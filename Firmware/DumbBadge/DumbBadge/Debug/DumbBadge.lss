
DumbBadge.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001f94  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000000  20000000  20000000  00011f94  2**0
                  CONTENTS
  2 .bss          000002bc  20000000  20000000  00020000  2**2
                  ALLOC
  3 .stack        00002004  200002bc  200002bc  00020000  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00011f94  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00011fbc  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002cc9e  00000000  00000000  00012015  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002aec  00000000  00000000  0003ecb3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000124d4  00000000  00000000  0004179f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000a78  00000000  00000000  00053c73  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000012c8  00000000  00000000  000546eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00018d4f  00000000  00000000  000559b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000dd90  00000000  00000000  0006e702  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008a40c  00000000  00000000  0007c492  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001c5c  00000000  00000000  001068a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	c0 22 00 20 25 01 00 00 21 01 00 00 21 01 00 00     .". %...!...!...
	...
      2c:	21 01 00 00 00 00 00 00 00 00 00 00 21 01 00 00     !...........!...
      3c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
      4c:	05 0e 00 00 21 01 00 00 21 01 00 00 21 01 00 00     ....!...!...!...
      5c:	f5 1b 00 00 21 01 00 00 21 01 00 00 21 01 00 00     ....!...!...!...
      6c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
      7c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
      8c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
      9c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
      ac:	21 01 00 00 00 00 00 00                             !.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000000 	.word	0x20000000
      d4:	00000000 	.word	0x00000000
      d8:	00001f94 	.word	0x00001f94

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000004 	.word	0x20000004
     108:	00001f94 	.word	0x00001f94
     10c:	00001f94 	.word	0x00001f94
     110:	00000000 	.word	0x00000000

00000114 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     114:	b510      	push	{r4, lr}
	system_init();
     116:	4b01      	ldr	r3, [pc, #4]	; (11c <atmel_start_init+0x8>)
     118:	4798      	blx	r3
}
     11a:	bd10      	pop	{r4, pc}
     11c:	000003ed 	.word	0x000003ed

00000120 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     120:	e7fe      	b.n	120 <Dummy_Handler>
	...

00000124 <Reset_Handler>:
{
     124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     126:	4a2a      	ldr	r2, [pc, #168]	; (1d0 <Reset_Handler+0xac>)
     128:	4b2a      	ldr	r3, [pc, #168]	; (1d4 <Reset_Handler+0xb0>)
     12a:	429a      	cmp	r2, r3
     12c:	d011      	beq.n	152 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     12e:	001a      	movs	r2, r3
     130:	4b29      	ldr	r3, [pc, #164]	; (1d8 <Reset_Handler+0xb4>)
     132:	429a      	cmp	r2, r3
     134:	d20d      	bcs.n	152 <Reset_Handler+0x2e>
     136:	4a29      	ldr	r2, [pc, #164]	; (1dc <Reset_Handler+0xb8>)
     138:	3303      	adds	r3, #3
     13a:	1a9b      	subs	r3, r3, r2
     13c:	089b      	lsrs	r3, r3, #2
     13e:	3301      	adds	r3, #1
     140:	009b      	lsls	r3, r3, #2
     142:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     144:	4823      	ldr	r0, [pc, #140]	; (1d4 <Reset_Handler+0xb0>)
     146:	4922      	ldr	r1, [pc, #136]	; (1d0 <Reset_Handler+0xac>)
     148:	588c      	ldr	r4, [r1, r2]
     14a:	5084      	str	r4, [r0, r2]
     14c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     14e:	429a      	cmp	r2, r3
     150:	d1fa      	bne.n	148 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     152:	4a23      	ldr	r2, [pc, #140]	; (1e0 <Reset_Handler+0xbc>)
     154:	4b23      	ldr	r3, [pc, #140]	; (1e4 <Reset_Handler+0xc0>)
     156:	429a      	cmp	r2, r3
     158:	d20a      	bcs.n	170 <Reset_Handler+0x4c>
     15a:	43d3      	mvns	r3, r2
     15c:	4921      	ldr	r1, [pc, #132]	; (1e4 <Reset_Handler+0xc0>)
     15e:	185b      	adds	r3, r3, r1
     160:	2103      	movs	r1, #3
     162:	438b      	bics	r3, r1
     164:	3304      	adds	r3, #4
     166:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     168:	2100      	movs	r1, #0
     16a:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     16c:	4293      	cmp	r3, r2
     16e:	d1fc      	bne.n	16a <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     170:	4a1d      	ldr	r2, [pc, #116]	; (1e8 <Reset_Handler+0xc4>)
     172:	21ff      	movs	r1, #255	; 0xff
     174:	4b1d      	ldr	r3, [pc, #116]	; (1ec <Reset_Handler+0xc8>)
     176:	438b      	bics	r3, r1
     178:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     17a:	39fd      	subs	r1, #253	; 0xfd
     17c:	2390      	movs	r3, #144	; 0x90
     17e:	005b      	lsls	r3, r3, #1
     180:	4a1b      	ldr	r2, [pc, #108]	; (1f0 <Reset_Handler+0xcc>)
     182:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     184:	4a1b      	ldr	r2, [pc, #108]	; (1f4 <Reset_Handler+0xd0>)
     186:	78d3      	ldrb	r3, [r2, #3]
     188:	2503      	movs	r5, #3
     18a:	43ab      	bics	r3, r5
     18c:	2402      	movs	r4, #2
     18e:	4323      	orrs	r3, r4
     190:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     192:	78d3      	ldrb	r3, [r2, #3]
     194:	270c      	movs	r7, #12
     196:	43bb      	bics	r3, r7
     198:	2608      	movs	r6, #8
     19a:	4333      	orrs	r3, r6
     19c:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     19e:	4b16      	ldr	r3, [pc, #88]	; (1f8 <Reset_Handler+0xd4>)
     1a0:	7b98      	ldrb	r0, [r3, #14]
     1a2:	2230      	movs	r2, #48	; 0x30
     1a4:	4390      	bics	r0, r2
     1a6:	2220      	movs	r2, #32
     1a8:	4310      	orrs	r0, r2
     1aa:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     1ac:	7b99      	ldrb	r1, [r3, #14]
     1ae:	43b9      	bics	r1, r7
     1b0:	4331      	orrs	r1, r6
     1b2:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     1b4:	7b9a      	ldrb	r2, [r3, #14]
     1b6:	43aa      	bics	r2, r5
     1b8:	4322      	orrs	r2, r4
     1ba:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     1bc:	4a0f      	ldr	r2, [pc, #60]	; (1fc <Reset_Handler+0xd8>)
     1be:	6853      	ldr	r3, [r2, #4]
     1c0:	2180      	movs	r1, #128	; 0x80
     1c2:	430b      	orrs	r3, r1
     1c4:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     1c6:	4b0e      	ldr	r3, [pc, #56]	; (200 <Reset_Handler+0xdc>)
     1c8:	4798      	blx	r3
        main();
     1ca:	4b0e      	ldr	r3, [pc, #56]	; (204 <Reset_Handler+0xe0>)
     1cc:	4798      	blx	r3
     1ce:	e7fe      	b.n	1ce <Reset_Handler+0xaa>
     1d0:	00001f94 	.word	0x00001f94
     1d4:	20000000 	.word	0x20000000
     1d8:	20000000 	.word	0x20000000
     1dc:	20000004 	.word	0x20000004
     1e0:	20000000 	.word	0x20000000
     1e4:	200002bc 	.word	0x200002bc
     1e8:	e000ed00 	.word	0xe000ed00
     1ec:	00000000 	.word	0x00000000
     1f0:	41007000 	.word	0x41007000
     1f4:	41005000 	.word	0x41005000
     1f8:	41004800 	.word	0x41004800
     1fc:	41004000 	.word	0x41004000
     200:	00001e3d 	.word	0x00001e3d
     204:	00001e31 	.word	0x00001e31

00000208 <USART_0_PORT_init>:
struct usart_sync_descriptor USART_0;

struct usart_sync_descriptor USART_1;

void USART_0_PORT_init(void)
{
     208:	b530      	push	{r4, r5, lr}
static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     20a:	4b0e      	ldr	r3, [pc, #56]	; (244 <USART_0_PORT_init+0x3c>)
     20c:	2244      	movs	r2, #68	; 0x44
     20e:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     210:	2501      	movs	r5, #1
     212:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     214:	2401      	movs	r4, #1
     216:	4321      	orrs	r1, r4
     218:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     21a:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     21c:	2032      	movs	r0, #50	; 0x32
     21e:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     220:	3a35      	subs	r2, #53	; 0x35
     222:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     224:	3a0c      	subs	r2, #12
     226:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     228:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     22a:	2145      	movs	r1, #69	; 0x45
     22c:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     22e:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     230:	4322      	orrs	r2, r4
     232:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     234:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     236:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     238:	3936      	subs	r1, #54	; 0x36
     23a:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     23c:	3121      	adds	r1, #33	; 0x21
     23e:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     240:	541a      	strb	r2, [r3, r0]

	gpio_set_pin_function(PA04, PINMUX_PA04D_SERCOM0_PAD0);

	gpio_set_pin_function(PA05, PINMUX_PA05D_SERCOM0_PAD1);
}
     242:	bd30      	pop	{r4, r5, pc}
     244:	41004400 	.word	0x41004400

00000248 <USART_0_CLOCK_init>:
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
     248:	4a04      	ldr	r2, [pc, #16]	; (25c <USART_0_CLOCK_init+0x14>)
     24a:	6a13      	ldr	r3, [r2, #32]
     24c:	2104      	movs	r1, #4
     24e:	430b      	orrs	r3, r1
     250:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
     252:	4a03      	ldr	r2, [pc, #12]	; (260 <USART_0_CLOCK_init+0x18>)
     254:	4b03      	ldr	r3, [pc, #12]	; (264 <USART_0_CLOCK_init+0x1c>)
     256:	805a      	strh	r2, [r3, #2]

void USART_0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM0);
	_gclk_enable_channel(SERCOM0_GCLK_ID_CORE, CONF_GCLK_SERCOM0_CORE_SRC);
}
     258:	4770      	bx	lr
     25a:	46c0      	nop			; (mov r8, r8)
     25c:	40000400 	.word	0x40000400
     260:	00004014 	.word	0x00004014
     264:	40000c00 	.word	0x40000c00

00000268 <USART_0_init>:

void USART_0_init(void)
{
     268:	b510      	push	{r4, lr}
	USART_0_CLOCK_init();
     26a:	4b05      	ldr	r3, [pc, #20]	; (280 <USART_0_init+0x18>)
     26c:	4798      	blx	r3
	usart_sync_init(&USART_0, SERCOM0, (void *)NULL);
     26e:	2200      	movs	r2, #0
     270:	4904      	ldr	r1, [pc, #16]	; (284 <USART_0_init+0x1c>)
     272:	4805      	ldr	r0, [pc, #20]	; (288 <USART_0_init+0x20>)
     274:	4b05      	ldr	r3, [pc, #20]	; (28c <USART_0_init+0x24>)
     276:	4798      	blx	r3
	USART_0_PORT_init();
     278:	4b05      	ldr	r3, [pc, #20]	; (290 <USART_0_init+0x28>)
     27a:	4798      	blx	r3
}
     27c:	bd10      	pop	{r4, pc}
     27e:	46c0      	nop			; (mov r8, r8)
     280:	00000249 	.word	0x00000249
     284:	42000800 	.word	0x42000800
     288:	20000288 	.word	0x20000288
     28c:	00000981 	.word	0x00000981
     290:	00000209 	.word	0x00000209

00000294 <USART_1_PORT_init>:

void USART_1_PORT_init(void)
{
     294:	b530      	push	{r4, r5, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     296:	4b0e      	ldr	r3, [pc, #56]	; (2d0 <USART_1_PORT_init+0x3c>)
     298:	2248      	movs	r2, #72	; 0x48
     29a:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     29c:	2501      	movs	r5, #1
     29e:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     2a0:	2401      	movs	r4, #1
     2a2:	4321      	orrs	r1, r4
     2a4:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2a6:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     2a8:	2034      	movs	r0, #52	; 0x34
     2aa:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     2ac:	3a39      	subs	r2, #57	; 0x39
     2ae:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     2b0:	3a0c      	subs	r2, #12
     2b2:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     2b4:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     2b6:	2149      	movs	r1, #73	; 0x49
     2b8:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2ba:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     2bc:	4322      	orrs	r2, r4
     2be:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2c0:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     2c2:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     2c4:	393a      	subs	r1, #58	; 0x3a
     2c6:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     2c8:	3121      	adds	r1, #33	; 0x21
     2ca:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     2cc:	541a      	strb	r2, [r3, r0]

	gpio_set_pin_function(PA08, PINMUX_PA08D_SERCOM2_PAD0);

	gpio_set_pin_function(PA09, PINMUX_PA09D_SERCOM2_PAD1);
}
     2ce:	bd30      	pop	{r4, r5, pc}
     2d0:	41004400 	.word	0x41004400

000002d4 <USART_1_CLOCK_init>:
     2d4:	4a04      	ldr	r2, [pc, #16]	; (2e8 <USART_1_CLOCK_init+0x14>)
     2d6:	6a13      	ldr	r3, [r2, #32]
     2d8:	2110      	movs	r1, #16
     2da:	430b      	orrs	r3, r1
     2dc:	6213      	str	r3, [r2, #32]
     2de:	4a03      	ldr	r2, [pc, #12]	; (2ec <USART_1_CLOCK_init+0x18>)
     2e0:	4b03      	ldr	r3, [pc, #12]	; (2f0 <USART_1_CLOCK_init+0x1c>)
     2e2:	805a      	strh	r2, [r3, #2]

void USART_1_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM2);
	_gclk_enable_channel(SERCOM2_GCLK_ID_CORE, CONF_GCLK_SERCOM2_CORE_SRC);
}
     2e4:	4770      	bx	lr
     2e6:	46c0      	nop			; (mov r8, r8)
     2e8:	40000400 	.word	0x40000400
     2ec:	00004016 	.word	0x00004016
     2f0:	40000c00 	.word	0x40000c00

000002f4 <USART_1_init>:

void USART_1_init(void)
{
     2f4:	b510      	push	{r4, lr}
	USART_1_CLOCK_init();
     2f6:	4b05      	ldr	r3, [pc, #20]	; (30c <USART_1_init+0x18>)
     2f8:	4798      	blx	r3
	usart_sync_init(&USART_1, SERCOM2, (void *)NULL);
     2fa:	2200      	movs	r2, #0
     2fc:	4904      	ldr	r1, [pc, #16]	; (310 <USART_1_init+0x1c>)
     2fe:	4805      	ldr	r0, [pc, #20]	; (314 <USART_1_init+0x20>)
     300:	4b05      	ldr	r3, [pc, #20]	; (318 <USART_1_init+0x24>)
     302:	4798      	blx	r3
	USART_1_PORT_init();
     304:	4b05      	ldr	r3, [pc, #20]	; (31c <USART_1_init+0x28>)
     306:	4798      	blx	r3
}
     308:	bd10      	pop	{r4, pc}
     30a:	46c0      	nop			; (mov r8, r8)
     30c:	000002d5 	.word	0x000002d5
     310:	42001000 	.word	0x42001000
     314:	20000294 	.word	0x20000294
     318:	00000981 	.word	0x00000981
     31c:	00000295 	.word	0x00000295

00000320 <USB_0_PORT_init>:
	_gclk_enable_channel(RTC_GCLK_ID, CONF_GCLK_RTC_SRC);
	timer_init(&TIMER_0, RTC, _rtc_get_timer());
}

void USB_0_PORT_init(void)
{
     320:	b5f0      	push	{r4, r5, r6, r7, lr}
     322:	46c6      	mov	lr, r8
     324:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     326:	24c0      	movs	r4, #192	; 0xc0
     328:	05e4      	lsls	r4, r4, #23
     32a:	2280      	movs	r2, #128	; 0x80
     32c:	0452      	lsls	r2, r2, #17
     32e:	60a2      	str	r2, [r4, #8]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     330:	4b1a      	ldr	r3, [pc, #104]	; (39c <USB_0_PORT_init+0x7c>)
     332:	2780      	movs	r7, #128	; 0x80
     334:	05ff      	lsls	r7, r7, #23
     336:	629f      	str	r7, [r3, #40]	; 0x28
     338:	4919      	ldr	r1, [pc, #100]	; (3a0 <USB_0_PORT_init+0x80>)
     33a:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     33c:	6162      	str	r2, [r4, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     33e:	2058      	movs	r0, #88	; 0x58
     340:	5c19      	ldrb	r1, [r3, r0]
     342:	2204      	movs	r2, #4
     344:	4690      	mov	r8, r2
     346:	4391      	bics	r1, r2
     348:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     34a:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     34c:	2601      	movs	r6, #1
     34e:	43b1      	bics	r1, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     350:	2501      	movs	r5, #1
     352:	4329      	orrs	r1, r5
     354:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     356:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     358:	381c      	subs	r0, #28
     35a:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     35c:	320b      	adds	r2, #11
     35e:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     360:	3a09      	subs	r2, #9
     362:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     364:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     366:	2180      	movs	r1, #128	; 0x80
     368:	0489      	lsls	r1, r1, #18
     36a:	60a1      	str	r1, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     36c:	629f      	str	r7, [r3, #40]	; 0x28
     36e:	4f0d      	ldr	r7, [pc, #52]	; (3a4 <USB_0_PORT_init+0x84>)
     370:	629f      	str	r7, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     372:	6161      	str	r1, [r4, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     374:	2159      	movs	r1, #89	; 0x59
     376:	5c5c      	ldrb	r4, [r3, r1]
     378:	4642      	mov	r2, r8
     37a:	4394      	bics	r4, r2
     37c:	545c      	strb	r4, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     37e:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     380:	43b2      	bics	r2, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     382:	432a      	orrs	r2, r5
     384:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     386:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     388:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     38a:	394a      	subs	r1, #74	; 0x4a
     38c:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     38e:	3151      	adds	r1, #81	; 0x51
     390:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     392:	541a      	strb	r2, [r3, r0]
	                      // <GPIO_PIN_FUNCTION_E"> E
	                      // <GPIO_PIN_FUNCTION_F"> F
	                      // <GPIO_PIN_FUNCTION_G"> G
	                      // <GPIO_PIN_FUNCTION_H"> H
	                      PINMUX_PA25G_USB_DP);
}
     394:	bc04      	pop	{r2}
     396:	4690      	mov	r8, r2
     398:	bdf0      	pop	{r4, r5, r6, r7, pc}
     39a:	46c0      	nop			; (mov r8, r8)
     39c:	41004400 	.word	0x41004400
     3a0:	c0000100 	.word	0xc0000100
     3a4:	c0000200 	.word	0xc0000200

000003a8 <USB_0_CLOCK_init>:
			PM->APBBMASK.reg |= 1 << peripheral;
     3a8:	4b06      	ldr	r3, [pc, #24]	; (3c4 <USB_0_CLOCK_init+0x1c>)
     3aa:	69da      	ldr	r2, [r3, #28]
     3ac:	2120      	movs	r1, #32
     3ae:	430a      	orrs	r2, r1
     3b0:	61da      	str	r2, [r3, #28]
			PM->AHBMASK.reg |= 1 << peripheral;
     3b2:	695a      	ldr	r2, [r3, #20]
     3b4:	3120      	adds	r1, #32
     3b6:	430a      	orrs	r2, r1
     3b8:	615a      	str	r2, [r3, #20]
     3ba:	4a03      	ldr	r2, [pc, #12]	; (3c8 <USB_0_CLOCK_init+0x20>)
     3bc:	4b03      	ldr	r3, [pc, #12]	; (3cc <USB_0_CLOCK_init+0x24>)
     3be:	805a      	strh	r2, [r3, #2]
{

	_pm_enable_bus_clock(PM_BUS_APBB, USB);
	_pm_enable_bus_clock(PM_BUS_AHB, USB);
	_gclk_enable_channel(USB_GCLK_ID, CONF_GCLK_USB_SRC);
}
     3c0:	4770      	bx	lr
     3c2:	46c0      	nop			; (mov r8, r8)
     3c4:	40000400 	.word	0x40000400
     3c8:	00004006 	.word	0x00004006
     3cc:	40000c00 	.word	0x40000c00

000003d0 <USB_0_init>:

void USB_0_init(void)
{
     3d0:	b510      	push	{r4, lr}
	USB_0_CLOCK_init();
     3d2:	4b03      	ldr	r3, [pc, #12]	; (3e0 <USB_0_init+0x10>)
     3d4:	4798      	blx	r3
	usb_d_init();
     3d6:	4b03      	ldr	r3, [pc, #12]	; (3e4 <USB_0_init+0x14>)
     3d8:	4798      	blx	r3
	USB_0_PORT_init();
     3da:	4b03      	ldr	r3, [pc, #12]	; (3e8 <USB_0_init+0x18>)
     3dc:	4798      	blx	r3
}
     3de:	bd10      	pop	{r4, pc}
     3e0:	000003a9 	.word	0x000003a9
     3e4:	00000c3d 	.word	0x00000c3d
     3e8:	00000321 	.word	0x00000321

000003ec <system_init>:

void system_init(void)
{
     3ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     3ee:	46de      	mov	lr, fp
     3f0:	4657      	mov	r7, sl
     3f2:	464e      	mov	r6, r9
     3f4:	4645      	mov	r5, r8
     3f6:	b5e0      	push	{r5, r6, r7, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     3f8:	4bb1      	ldr	r3, [pc, #708]	; (6c0 <system_init+0x2d4>)
     3fa:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     3fc:	22c0      	movs	r2, #192	; 0xc0
     3fe:	05d2      	lsls	r2, r2, #23
     400:	2001      	movs	r0, #1
     402:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     404:	4baf      	ldr	r3, [pc, #700]	; (6c4 <system_init+0x2d8>)
     406:	49b0      	ldr	r1, [pc, #704]	; (6c8 <system_init+0x2dc>)
     408:	4689      	mov	r9, r1
     40a:	6299      	str	r1, [r3, #40]	; 0x28
     40c:	21c0      	movs	r1, #192	; 0xc0
     40e:	0609      	lsls	r1, r1, #24
     410:	468c      	mov	ip, r1
     412:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     414:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     416:	2640      	movs	r6, #64	; 0x40
     418:	5d99      	ldrb	r1, [r3, r6]
     41a:	2404      	movs	r4, #4
     41c:	43a1      	bics	r1, r4
     41e:	5599      	strb	r1, [r3, r6]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     420:	5d99      	ldrb	r1, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
     422:	4381      	bics	r1, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     424:	5599      	strb	r1, [r3, r6]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     426:	2102      	movs	r1, #2
     428:	4688      	mov	r8, r1
     42a:	6091      	str	r1, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     42c:	49a7      	ldr	r1, [pc, #668]	; (6cc <system_init+0x2e0>)
     42e:	468a      	mov	sl, r1
     430:	6299      	str	r1, [r3, #40]	; 0x28
     432:	4661      	mov	r1, ip
     434:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     436:	4641      	mov	r1, r8
     438:	6151      	str	r1, [r2, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     43a:	313f      	adds	r1, #63	; 0x3f
     43c:	5c5c      	ldrb	r4, [r3, r1]
     43e:	2504      	movs	r5, #4
     440:	43ac      	bics	r4, r5
     442:	545c      	strb	r4, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     444:	5c5c      	ldrb	r4, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     446:	4384      	bics	r4, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     448:	545c      	strb	r4, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     44a:	3590      	adds	r5, #144	; 0x90
     44c:	5150      	str	r0, [r2, r5]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     44e:	3147      	adds	r1, #71	; 0x47
     450:	5050      	str	r0, [r2, r1]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     452:	3120      	adds	r1, #32
     454:	464c      	mov	r4, r9
     456:	505c      	str	r4, [r3, r1]
     458:	4664      	mov	r4, ip
     45a:	505c      	str	r4, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     45c:	24c0      	movs	r4, #192	; 0xc0
     45e:	46a3      	mov	fp, r4
     460:	5d1c      	ldrb	r4, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     462:	4384      	bics	r4, r0
     464:	46a1      	mov	r9, r4
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     466:	465c      	mov	r4, fp
     468:	464f      	mov	r7, r9
     46a:	551f      	strb	r7, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     46c:	4644      	mov	r4, r8
     46e:	5154      	str	r4, [r2, r5]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     470:	2788      	movs	r7, #136	; 0x88
     472:	51d4      	str	r4, [r2, r7]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     474:	4654      	mov	r4, sl
     476:	505c      	str	r4, [r3, r1]
     478:	4664      	mov	r4, ip
     47a:	505c      	str	r4, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     47c:	24c1      	movs	r4, #193	; 0xc1
     47e:	46a1      	mov	r9, r4
     480:	5d1c      	ldrb	r4, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     482:	4384      	bics	r4, r0
     484:	46a0      	mov	r8, r4
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     486:	464c      	mov	r4, r9
     488:	4647      	mov	r7, r8
     48a:	551f      	strb	r7, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     48c:	3cbd      	subs	r4, #189	; 0xbd
     48e:	5154      	str	r4, [r2, r5]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     490:	3484      	adds	r4, #132	; 0x84
     492:	2704      	movs	r7, #4
     494:	5117      	str	r7, [r2, r4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     496:	4f8e      	ldr	r7, [pc, #568]	; (6d0 <system_init+0x2e4>)
     498:	505f      	str	r7, [r3, r1]
     49a:	4664      	mov	r4, ip
     49c:	505c      	str	r4, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     49e:	24c2      	movs	r4, #194	; 0xc2
     4a0:	5d1f      	ldrb	r7, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     4a2:	4387      	bics	r7, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4a4:	551f      	strb	r7, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     4a6:	2708      	movs	r7, #8
     4a8:	5157      	str	r7, [r2, r5]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     4aa:	3c3a      	subs	r4, #58	; 0x3a
     4ac:	5117      	str	r7, [r2, r4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4ae:	4f89      	ldr	r7, [pc, #548]	; (6d4 <system_init+0x2e8>)
     4b0:	505f      	str	r7, [r3, r1]
     4b2:	4664      	mov	r4, ip
     4b4:	505c      	str	r4, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4b6:	24c3      	movs	r4, #195	; 0xc3
     4b8:	5d1f      	ldrb	r7, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     4ba:	4387      	bics	r7, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4bc:	551f      	strb	r7, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     4be:	2710      	movs	r7, #16
     4c0:	5157      	str	r7, [r2, r5]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     4c2:	3c3b      	subs	r4, #59	; 0x3b
     4c4:	5117      	str	r7, [r2, r4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4c6:	4f84      	ldr	r7, [pc, #528]	; (6d8 <system_init+0x2ec>)
     4c8:	505f      	str	r7, [r3, r1]
     4ca:	4664      	mov	r4, ip
     4cc:	505c      	str	r4, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4ce:	24c4      	movs	r4, #196	; 0xc4
     4d0:	5d1f      	ldrb	r7, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     4d2:	4387      	bics	r7, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4d4:	551f      	strb	r7, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     4d6:	3ca4      	subs	r4, #164	; 0xa4
     4d8:	46a2      	mov	sl, r4
     4da:	5154      	str	r4, [r2, r5]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     4dc:	2788      	movs	r7, #136	; 0x88
     4de:	51d4      	str	r4, [r2, r7]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4e0:	4f7e      	ldr	r7, [pc, #504]	; (6dc <system_init+0x2f0>)
     4e2:	505f      	str	r7, [r3, r1]
     4e4:	4664      	mov	r4, ip
     4e6:	505c      	str	r4, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4e8:	27c5      	movs	r7, #197	; 0xc5
     4ea:	5ddc      	ldrb	r4, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     4ec:	4384      	bics	r4, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4ee:	55dc      	strb	r4, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     4f0:	5156      	str	r6, [r2, r5]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     4f2:	2488      	movs	r4, #136	; 0x88
     4f4:	5116      	str	r6, [r2, r4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4f6:	4e7a      	ldr	r6, [pc, #488]	; (6e0 <system_init+0x2f4>)
     4f8:	505e      	str	r6, [r3, r1]
     4fa:	4664      	mov	r4, ip
     4fc:	505c      	str	r4, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4fe:	3701      	adds	r7, #1
     500:	5dde      	ldrb	r6, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     502:	4386      	bics	r6, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     504:	55de      	strb	r6, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     506:	2680      	movs	r6, #128	; 0x80
     508:	5156      	str	r6, [r2, r5]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     50a:	2488      	movs	r4, #136	; 0x88
     50c:	5116      	str	r6, [r2, r4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     50e:	4e75      	ldr	r6, [pc, #468]	; (6e4 <system_init+0x2f8>)
     510:	505e      	str	r6, [r3, r1]
     512:	4664      	mov	r4, ip
     514:	505c      	str	r4, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     516:	3701      	adds	r7, #1
     518:	5dde      	ldrb	r6, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     51a:	4386      	bics	r6, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     51c:	55de      	strb	r6, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     51e:	2680      	movs	r6, #128	; 0x80
     520:	0076      	lsls	r6, r6, #1
     522:	5156      	str	r6, [r2, r5]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     524:	2488      	movs	r4, #136	; 0x88
     526:	5116      	str	r6, [r2, r4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     528:	4e6f      	ldr	r6, [pc, #444]	; (6e8 <system_init+0x2fc>)
     52a:	505e      	str	r6, [r3, r1]
     52c:	4664      	mov	r4, ip
     52e:	505c      	str	r4, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     530:	3701      	adds	r7, #1
     532:	5dde      	ldrb	r6, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     534:	4386      	bics	r6, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     536:	55de      	strb	r6, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     538:	2680      	movs	r6, #128	; 0x80
     53a:	00b6      	lsls	r6, r6, #2
     53c:	5156      	str	r6, [r2, r5]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     53e:	2488      	movs	r4, #136	; 0x88
     540:	5116      	str	r6, [r2, r4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     542:	4e6a      	ldr	r6, [pc, #424]	; (6ec <system_init+0x300>)
     544:	505e      	str	r6, [r3, r1]
     546:	4664      	mov	r4, ip
     548:	505c      	str	r4, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     54a:	3701      	adds	r7, #1
     54c:	5dde      	ldrb	r6, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     54e:	4386      	bics	r6, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     550:	55de      	strb	r6, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     552:	2680      	movs	r6, #128	; 0x80
     554:	00f6      	lsls	r6, r6, #3
     556:	5156      	str	r6, [r2, r5]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     558:	2488      	movs	r4, #136	; 0x88
     55a:	5116      	str	r6, [r2, r4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     55c:	4c64      	ldr	r4, [pc, #400]	; (6f0 <system_init+0x304>)
     55e:	46a3      	mov	fp, r4
     560:	505c      	str	r4, [r3, r1]
     562:	4664      	mov	r4, ip
     564:	505c      	str	r4, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     566:	3701      	adds	r7, #1
     568:	5ddc      	ldrb	r4, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     56a:	4384      	bics	r4, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     56c:	55dc      	strb	r4, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     56e:	2780      	movs	r7, #128	; 0x80
     570:	013f      	lsls	r7, r7, #4
     572:	5157      	str	r7, [r2, r5]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     574:	2488      	movs	r4, #136	; 0x88
     576:	5117      	str	r7, [r2, r4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     578:	4f5e      	ldr	r7, [pc, #376]	; (6f4 <system_init+0x308>)
     57a:	505f      	str	r7, [r3, r1]
     57c:	4664      	mov	r4, ip
     57e:	505c      	str	r4, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     580:	27cb      	movs	r7, #203	; 0xcb
     582:	5ddc      	ldrb	r4, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     584:	4384      	bics	r4, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     586:	55dc      	strb	r4, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     588:	2780      	movs	r7, #128	; 0x80
     58a:	017f      	lsls	r7, r7, #5
     58c:	5157      	str	r7, [r2, r5]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     58e:	2488      	movs	r4, #136	; 0x88
     590:	5117      	str	r7, [r2, r4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     592:	4f59      	ldr	r7, [pc, #356]	; (6f8 <system_init+0x30c>)
     594:	505f      	str	r7, [r3, r1]
     596:	4664      	mov	r4, ip
     598:	505c      	str	r4, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     59a:	27cc      	movs	r7, #204	; 0xcc
     59c:	5ddc      	ldrb	r4, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     59e:	4384      	bics	r4, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5a0:	55dc      	strb	r4, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     5a2:	2780      	movs	r7, #128	; 0x80
     5a4:	01bf      	lsls	r7, r7, #6
     5a6:	5157      	str	r7, [r2, r5]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     5a8:	2488      	movs	r4, #136	; 0x88
     5aa:	5117      	str	r7, [r2, r4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     5ac:	4f53      	ldr	r7, [pc, #332]	; (6fc <system_init+0x310>)
     5ae:	505f      	str	r7, [r3, r1]
     5b0:	4664      	mov	r4, ip
     5b2:	505c      	str	r4, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5b4:	27cd      	movs	r7, #205	; 0xcd
     5b6:	5ddc      	ldrb	r4, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     5b8:	4384      	bics	r4, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5ba:	55dc      	strb	r4, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     5bc:	2780      	movs	r7, #128	; 0x80
     5be:	01ff      	lsls	r7, r7, #7
     5c0:	5157      	str	r7, [r2, r5]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     5c2:	2488      	movs	r4, #136	; 0x88
     5c4:	5117      	str	r7, [r2, r4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     5c6:	4f4e      	ldr	r7, [pc, #312]	; (700 <system_init+0x314>)
     5c8:	505f      	str	r7, [r3, r1]
     5ca:	4664      	mov	r4, ip
     5cc:	505c      	str	r4, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5ce:	27ce      	movs	r7, #206	; 0xce
     5d0:	5ddc      	ldrb	r4, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     5d2:	4384      	bics	r4, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5d4:	55dc      	strb	r4, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     5d6:	2780      	movs	r7, #128	; 0x80
     5d8:	023f      	lsls	r7, r7, #8
     5da:	5157      	str	r7, [r2, r5]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     5dc:	2488      	movs	r4, #136	; 0x88
     5de:	5117      	str	r7, [r2, r4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     5e0:	4f48      	ldr	r7, [pc, #288]	; (704 <system_init+0x318>)
     5e2:	505f      	str	r7, [r3, r1]
     5e4:	4664      	mov	r4, ip
     5e6:	505c      	str	r4, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5e8:	27cf      	movs	r7, #207	; 0xcf
     5ea:	5ddc      	ldrb	r4, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
     5ec:	4384      	bics	r4, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5ee:	55dc      	strb	r4, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     5f0:	2780      	movs	r7, #128	; 0x80
     5f2:	027f      	lsls	r7, r7, #9
     5f4:	5157      	str	r7, [r2, r5]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     5f6:	2488      	movs	r4, #136	; 0x88
     5f8:	5117      	str	r7, [r2, r4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     5fa:	2780      	movs	r7, #128	; 0x80
     5fc:	05ff      	lsls	r7, r7, #23
     5fe:	505f      	str	r7, [r3, r1]
     600:	4c41      	ldr	r4, [pc, #260]	; (708 <system_init+0x31c>)
     602:	505c      	str	r4, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     604:	24d0      	movs	r4, #208	; 0xd0
     606:	46a1      	mov	r9, r4
     608:	5d1c      	ldrb	r4, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     60a:	4384      	bics	r4, r0
     60c:	46a0      	mov	r8, r4
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     60e:	464c      	mov	r4, r9
     610:	4646      	mov	r6, r8
     612:	551e      	strb	r6, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     614:	2480      	movs	r4, #128	; 0x80
     616:	02a4      	lsls	r4, r4, #10
     618:	5154      	str	r4, [r2, r5]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     61a:	2688      	movs	r6, #136	; 0x88
     61c:	5194      	str	r4, [r2, r6]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     61e:	505f      	str	r7, [r3, r1]
     620:	4c3a      	ldr	r4, [pc, #232]	; (70c <system_init+0x320>)
     622:	505c      	str	r4, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     624:	24d1      	movs	r4, #209	; 0xd1
     626:	46a1      	mov	r9, r4
     628:	5d1c      	ldrb	r4, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     62a:	4384      	bics	r4, r0
     62c:	46a0      	mov	r8, r4
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     62e:	464c      	mov	r4, r9
     630:	4646      	mov	r6, r8
     632:	551e      	strb	r6, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     634:	2480      	movs	r4, #128	; 0x80
     636:	03e4      	lsls	r4, r4, #15
     638:	5154      	str	r4, [r2, r5]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     63a:	2688      	movs	r6, #136	; 0x88
     63c:	5194      	str	r4, [r2, r6]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     63e:	505f      	str	r7, [r3, r1]
     640:	4c33      	ldr	r4, [pc, #204]	; (710 <system_init+0x324>)
     642:	505c      	str	r4, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     644:	24d6      	movs	r4, #214	; 0xd6
     646:	46a1      	mov	r9, r4
     648:	5d1c      	ldrb	r4, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     64a:	4384      	bics	r4, r0
     64c:	46a0      	mov	r8, r4
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     64e:	464c      	mov	r4, r9
     650:	4646      	mov	r6, r8
     652:	551e      	strb	r6, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     654:	2480      	movs	r4, #128	; 0x80
     656:	0424      	lsls	r4, r4, #16
     658:	5154      	str	r4, [r2, r5]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     65a:	2688      	movs	r6, #136	; 0x88
     65c:	5194      	str	r4, [r2, r6]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     65e:	505f      	str	r7, [r3, r1]
     660:	4c2c      	ldr	r4, [pc, #176]	; (714 <system_init+0x328>)
     662:	505c      	str	r4, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     664:	24d7      	movs	r4, #215	; 0xd7
     666:	46a1      	mov	r9, r4
     668:	5d1c      	ldrb	r4, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     66a:	4384      	bics	r4, r0
     66c:	46a0      	mov	r8, r4
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     66e:	464c      	mov	r4, r9
     670:	4646      	mov	r6, r8
     672:	551e      	strb	r6, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     674:	5157      	str	r7, [r2, r5]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     676:	3c4f      	subs	r4, #79	; 0x4f
     678:	5117      	str	r7, [r2, r4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     67a:	505f      	str	r7, [r3, r1]
     67c:	4a26      	ldr	r2, [pc, #152]	; (718 <system_init+0x32c>)
     67e:	505a      	str	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     680:	3136      	adds	r1, #54	; 0x36
     682:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     684:	4382      	bics	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     686:	545a      	strb	r2, [r3, r1]
	// Set pin direction to output
	gpio_set_pin_direction(LCD_RST, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(LCD_RST, GPIO_PIN_FUNCTION_OFF);

	USART_0_init();
     688:	4b24      	ldr	r3, [pc, #144]	; (71c <system_init+0x330>)
     68a:	4798      	blx	r3

	USART_1_init();
     68c:	4b24      	ldr	r3, [pc, #144]	; (720 <system_init+0x334>)
     68e:	4798      	blx	r3
		PM->APBAMASK.reg |= 1 << peripheral;
     690:	465b      	mov	r3, fp
     692:	699b      	ldr	r3, [r3, #24]
     694:	4657      	mov	r7, sl
     696:	431f      	orrs	r7, r3
     698:	465b      	mov	r3, fp
     69a:	619f      	str	r7, [r3, #24]
     69c:	4a21      	ldr	r2, [pc, #132]	; (724 <system_init+0x338>)
     69e:	4b22      	ldr	r3, [pc, #136]	; (728 <system_init+0x33c>)
     6a0:	805a      	strh	r2, [r3, #2]
	timer_init(&TIMER_0, RTC, _rtc_get_timer());
     6a2:	4b22      	ldr	r3, [pc, #136]	; (72c <system_init+0x340>)
     6a4:	4798      	blx	r3
     6a6:	0002      	movs	r2, r0
     6a8:	4921      	ldr	r1, [pc, #132]	; (730 <system_init+0x344>)
     6aa:	4822      	ldr	r0, [pc, #136]	; (734 <system_init+0x348>)
     6ac:	4b22      	ldr	r3, [pc, #136]	; (738 <system_init+0x34c>)
     6ae:	4798      	blx	r3

	TIMER_0_init();

	USB_0_init();
     6b0:	4b22      	ldr	r3, [pc, #136]	; (73c <system_init+0x350>)
     6b2:	4798      	blx	r3
}
     6b4:	bc3c      	pop	{r2, r3, r4, r5}
     6b6:	4690      	mov	r8, r2
     6b8:	4699      	mov	r9, r3
     6ba:	46a2      	mov	sl, r4
     6bc:	46ab      	mov	fp, r5
     6be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     6c0:	00000d11 	.word	0x00000d11
     6c4:	41004400 	.word	0x41004400
     6c8:	40000001 	.word	0x40000001
     6cc:	40000002 	.word	0x40000002
     6d0:	40000004 	.word	0x40000004
     6d4:	40000008 	.word	0x40000008
     6d8:	40000010 	.word	0x40000010
     6dc:	40000020 	.word	0x40000020
     6e0:	40000040 	.word	0x40000040
     6e4:	40000080 	.word	0x40000080
     6e8:	40000100 	.word	0x40000100
     6ec:	40000200 	.word	0x40000200
     6f0:	40000400 	.word	0x40000400
     6f4:	40000800 	.word	0x40000800
     6f8:	40001000 	.word	0x40001000
     6fc:	40002000 	.word	0x40002000
     700:	40004000 	.word	0x40004000
     704:	40008000 	.word	0x40008000
     708:	c0000001 	.word	0xc0000001
     70c:	c0000002 	.word	0xc0000002
     710:	c0000040 	.word	0xc0000040
     714:	c0000080 	.word	0xc0000080
     718:	c0004000 	.word	0xc0004000
     71c:	00000269 	.word	0x00000269
     720:	000002f5 	.word	0x000002f5
     724:	00004004 	.word	0x00004004
     728:	40000c00 	.word	0x40000c00
     72c:	00000e01 	.word	0x00000e01
     730:	40001400 	.word	0x40001400
     734:	200002a0 	.word	0x200002a0
     738:	00000859 	.word	0x00000859
     73c:	000003d1 	.word	0x000003d1

00000740 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     740:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     744:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     746:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     748:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     74c:	4770      	bx	lr

0000074e <atomic_leave_critical>:
     74e:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     752:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     754:	f383 8810 	msr	PRIMASK, r3
}
     758:	4770      	bx	lr
	...

0000075c <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
     75c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     75e:	46ce      	mov	lr, r9
     760:	4647      	mov	r7, r8
     762:	b580      	push	{r7, lr}
     764:	4681      	mov	r9, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
     766:	6803      	ldr	r3, [r0, #0]
     768:	469c      	mov	ip, r3
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
     76a:	2b00      	cmp	r3, #0
     76c:	d005      	beq.n	77a <timer_add_timer_task+0x1e>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
     76e:	688e      	ldr	r6, [r1, #8]
     770:	001c      	movs	r4, r3
     772:	2500      	movs	r5, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     774:	2701      	movs	r7, #1
     776:	1abf      	subs	r7, r7, r2
     778:	e00d      	b.n	796 <timer_add_timer_task+0x3a>
		list_insert_as_head(list, new_task);
     77a:	4b12      	ldr	r3, [pc, #72]	; (7c4 <timer_add_timer_task+0x68>)
     77c:	4798      	blx	r3
		return;
     77e:	e018      	b.n	7b2 <timer_add_timer_task+0x56>
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     780:	18fb      	adds	r3, r7, r3
     782:	68a0      	ldr	r0, [r4, #8]
     784:	4680      	mov	r8, r0
     786:	4443      	add	r3, r8
		if (time_left >= new_task->interval)
     788:	42b3      	cmp	r3, r6
     78a:	d20c      	bcs.n	7a6 <timer_add_timer_task+0x4a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
     78c:	6823      	ldr	r3, [r4, #0]
     78e:	0025      	movs	r5, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
     790:	2b00      	cmp	r3, #0
     792:	d00b      	beq.n	7ac <timer_add_timer_task+0x50>
     794:	001c      	movs	r4, r3
		if (it->time_label <= time) {
     796:	6863      	ldr	r3, [r4, #4]
     798:	4293      	cmp	r3, r2
     79a:	d8f1      	bhi.n	780 <timer_add_timer_task+0x24>
			time_left = it->interval - (time - it->time_label);
     79c:	68a0      	ldr	r0, [r4, #8]
     79e:	4680      	mov	r8, r0
     7a0:	4443      	add	r3, r8
     7a2:	1a9b      	subs	r3, r3, r2
     7a4:	e7f0      	b.n	788 <timer_add_timer_task+0x2c>
			break;
		prev = it;
	}

	if (it == head) {
     7a6:	45a4      	cmp	ip, r4
     7a8:	d007      	beq.n	7ba <timer_add_timer_task+0x5e>
     7aa:	002c      	movs	r4, r5
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
     7ac:	0020      	movs	r0, r4
     7ae:	4b06      	ldr	r3, [pc, #24]	; (7c8 <timer_add_timer_task+0x6c>)
     7b0:	4798      	blx	r3
	}
}
     7b2:	bc0c      	pop	{r2, r3}
     7b4:	4690      	mov	r8, r2
     7b6:	4699      	mov	r9, r3
     7b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
     7ba:	4648      	mov	r0, r9
     7bc:	4b01      	ldr	r3, [pc, #4]	; (7c4 <timer_add_timer_task+0x68>)
     7be:	4798      	blx	r3
     7c0:	e7f7      	b.n	7b2 <timer_add_timer_task+0x56>
     7c2:	46c0      	nop			; (mov r8, r8)
     7c4:	00000ccd 	.word	0x00000ccd
     7c8:	00000cf9 	.word	0x00000cf9

000007cc <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
     7cc:	b5f0      	push	{r4, r5, r6, r7, lr}
     7ce:	46c6      	mov	lr, r8
     7d0:	b500      	push	{lr}
     7d2:	b082      	sub	sp, #8
     7d4:	0007      	movs	r7, r0
	return (void *)list->head;
     7d6:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
     7d8:	6903      	ldr	r3, [r0, #16]
     7da:	3301      	adds	r3, #1
     7dc:	4698      	mov	r8, r3
     7de:	6103      	str	r3, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
     7e0:	7e03      	ldrb	r3, [r0, #24]
     7e2:	07db      	lsls	r3, r3, #31
     7e4:	d411      	bmi.n	80a <timer_process_counted+0x3e>
     7e6:	7e03      	ldrb	r3, [r0, #24]
     7e8:	079b      	lsls	r3, r3, #30
     7ea:	d40e      	bmi.n	80a <timer_process_counted+0x3e>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
     7ec:	2c00      	cmp	r4, #0
     7ee:	d010      	beq.n	812 <timer_process_counted+0x46>
     7f0:	4643      	mov	r3, r8
     7f2:	6862      	ldr	r2, [r4, #4]
     7f4:	1a9b      	subs	r3, r3, r2
     7f6:	68a2      	ldr	r2, [r4, #8]
     7f8:	4293      	cmp	r3, r2
     7fa:	d30a      	bcc.n	812 <timer_process_counted+0x46>
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
     7fc:	2314      	movs	r3, #20
     7fe:	469c      	mov	ip, r3
     800:	4484      	add	ip, r0
     802:	4663      	mov	r3, ip
     804:	9301      	str	r3, [sp, #4]
     806:	4e12      	ldr	r6, [pc, #72]	; (850 <timer_process_counted+0x84>)
     808:	e014      	b.n	834 <timer_process_counted+0x68>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
     80a:	7e3b      	ldrb	r3, [r7, #24]
     80c:	2202      	movs	r2, #2
     80e:	4313      	orrs	r3, r2
     810:	763b      	strb	r3, [r7, #24]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
	}
}
     812:	b002      	add	sp, #8
     814:	bc04      	pop	{r2}
     816:	4690      	mov	r8, r2
     818:	bdf0      	pop	{r4, r5, r6, r7, pc}
     81a:	697d      	ldr	r5, [r7, #20]
		tmp->cb(tmp);
     81c:	68e3      	ldr	r3, [r4, #12]
     81e:	0020      	movs	r0, r4
     820:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
     822:	2d00      	cmp	r5, #0
     824:	d0f5      	beq.n	812 <timer_process_counted+0x46>
		it = (struct timer_task *)list_get_head(&timer->tasks);
     826:	002c      	movs	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
     828:	4643      	mov	r3, r8
     82a:	686a      	ldr	r2, [r5, #4]
     82c:	1a9b      	subs	r3, r3, r2
     82e:	68aa      	ldr	r2, [r5, #8]
     830:	4293      	cmp	r3, r2
     832:	d3ee      	bcc.n	812 <timer_process_counted+0x46>
		list_remove_head(&timer->tasks);
     834:	9801      	ldr	r0, [sp, #4]
     836:	47b0      	blx	r6
		if (TIMER_TASK_REPEAT == tmp->mode) {
     838:	7c23      	ldrb	r3, [r4, #16]
     83a:	2b01      	cmp	r3, #1
     83c:	d1ed      	bne.n	81a <timer_process_counted+0x4e>
			tmp->time_label = time;
     83e:	4643      	mov	r3, r8
     840:	6063      	str	r3, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
     842:	4642      	mov	r2, r8
     844:	0021      	movs	r1, r4
     846:	9801      	ldr	r0, [sp, #4]
     848:	4b02      	ldr	r3, [pc, #8]	; (854 <timer_process_counted+0x88>)
     84a:	4798      	blx	r3
     84c:	e7e5      	b.n	81a <timer_process_counted+0x4e>
     84e:	46c0      	nop			; (mov r8, r8)
     850:	00000d01 	.word	0x00000d01
     854:	0000075d 	.word	0x0000075d

00000858 <timer_init>:
{
     858:	b570      	push	{r4, r5, r6, lr}
     85a:	0005      	movs	r5, r0
     85c:	000c      	movs	r4, r1
	ASSERT(descr && hw);
     85e:	2800      	cmp	r0, #0
     860:	d011      	beq.n	886 <timer_init+0x2e>
     862:	0008      	movs	r0, r1
     864:	1e43      	subs	r3, r0, #1
     866:	4198      	sbcs	r0, r3
     868:	b2c0      	uxtb	r0, r0
     86a:	223b      	movs	r2, #59	; 0x3b
     86c:	4907      	ldr	r1, [pc, #28]	; (88c <timer_init+0x34>)
     86e:	4b08      	ldr	r3, [pc, #32]	; (890 <timer_init+0x38>)
     870:	4798      	blx	r3
	_timer_init(&descr->device, hw);
     872:	0021      	movs	r1, r4
     874:	0028      	movs	r0, r5
     876:	4b07      	ldr	r3, [pc, #28]	; (894 <timer_init+0x3c>)
     878:	4798      	blx	r3
	descr->time                           = 0;
     87a:	2300      	movs	r3, #0
     87c:	612b      	str	r3, [r5, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
     87e:	4b06      	ldr	r3, [pc, #24]	; (898 <timer_init+0x40>)
     880:	602b      	str	r3, [r5, #0]
}
     882:	2000      	movs	r0, #0
     884:	bd70      	pop	{r4, r5, r6, pc}
     886:	2000      	movs	r0, #0
     888:	e7ef      	b.n	86a <timer_init+0x12>
     88a:	46c0      	nop			; (mov r8, r8)
     88c:	00001ea8 	.word	0x00001ea8
     890:	00000ca1 	.word	0x00000ca1
     894:	00000da5 	.word	0x00000da5
     898:	000007cd 	.word	0x000007cd

0000089c <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     89c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     89e:	46ce      	mov	lr, r9
     8a0:	4647      	mov	r7, r8
     8a2:	b580      	push	{r7, lr}
     8a4:	0004      	movs	r4, r0
     8a6:	000f      	movs	r7, r1
     8a8:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     8aa:	2800      	cmp	r0, #0
     8ac:	d026      	beq.n	8fc <usart_sync_write+0x60>
     8ae:	2900      	cmp	r1, #0
     8b0:	d026      	beq.n	900 <usart_sync_write+0x64>
     8b2:	0010      	movs	r0, r2
     8b4:	1e43      	subs	r3, r0, #1
     8b6:	4198      	sbcs	r0, r3
     8b8:	22f1      	movs	r2, #241	; 0xf1
     8ba:	4912      	ldr	r1, [pc, #72]	; (904 <usart_sync_write+0x68>)
     8bc:	4b12      	ldr	r3, [pc, #72]	; (908 <usart_sync_write+0x6c>)
     8be:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
     8c0:	3408      	adds	r4, #8
     8c2:	4d12      	ldr	r5, [pc, #72]	; (90c <usart_sync_write+0x70>)
     8c4:	0020      	movs	r0, r4
     8c6:	47a8      	blx	r5
     8c8:	2800      	cmp	r0, #0
     8ca:	d0fb      	beq.n	8c4 <usart_sync_write+0x28>
     8cc:	2600      	movs	r6, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
     8ce:	4b10      	ldr	r3, [pc, #64]	; (910 <usart_sync_write+0x74>)
     8d0:	4699      	mov	r9, r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
     8d2:	4d0e      	ldr	r5, [pc, #56]	; (90c <usart_sync_write+0x70>)
		_usart_sync_write_byte(&descr->device, buf[offset]);
     8d4:	5db9      	ldrb	r1, [r7, r6]
     8d6:	0020      	movs	r0, r4
     8d8:	47c8      	blx	r9
		while (!_usart_sync_is_ready_to_send(&descr->device))
     8da:	0020      	movs	r0, r4
     8dc:	47a8      	blx	r5
     8de:	2800      	cmp	r0, #0
     8e0:	d0fb      	beq.n	8da <usart_sync_write+0x3e>
			;
	} while (++offset < length);
     8e2:	3601      	adds	r6, #1
     8e4:	4546      	cmp	r6, r8
     8e6:	d3f5      	bcc.n	8d4 <usart_sync_write+0x38>
	while (!_usart_sync_is_transmit_done(&descr->device))
     8e8:	4d0a      	ldr	r5, [pc, #40]	; (914 <usart_sync_write+0x78>)
     8ea:	0020      	movs	r0, r4
     8ec:	47a8      	blx	r5
     8ee:	2800      	cmp	r0, #0
     8f0:	d0fb      	beq.n	8ea <usart_sync_write+0x4e>
		;
	return (int32_t)offset;
}
     8f2:	0030      	movs	r0, r6
     8f4:	bc0c      	pop	{r2, r3}
     8f6:	4690      	mov	r8, r2
     8f8:	4699      	mov	r9, r3
     8fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     8fc:	2000      	movs	r0, #0
     8fe:	e7db      	b.n	8b8 <usart_sync_write+0x1c>
     900:	2000      	movs	r0, #0
     902:	e7d9      	b.n	8b8 <usart_sync_write+0x1c>
     904:	00001ec0 	.word	0x00001ec0
     908:	00000ca1 	.word	0x00000ca1
     90c:	00000f89 	.word	0x00000f89
     910:	00000f79 	.word	0x00000f79
     914:	00000f93 	.word	0x00000f93

00000918 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     91a:	46ce      	mov	lr, r9
     91c:	4647      	mov	r7, r8
     91e:	b580      	push	{r7, lr}
     920:	0004      	movs	r4, r0
     922:	000f      	movs	r7, r1
     924:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     926:	2800      	cmp	r0, #0
     928:	d01d      	beq.n	966 <usart_sync_read+0x4e>
     92a:	2900      	cmp	r1, #0
     92c:	d01d      	beq.n	96a <usart_sync_read+0x52>
     92e:	0010      	movs	r0, r2
     930:	1e43      	subs	r3, r0, #1
     932:	4198      	sbcs	r0, r3
     934:	2286      	movs	r2, #134	; 0x86
     936:	0052      	lsls	r2, r2, #1
     938:	490d      	ldr	r1, [pc, #52]	; (970 <usart_sync_read+0x58>)
     93a:	4b0e      	ldr	r3, [pc, #56]	; (974 <usart_sync_read+0x5c>)
     93c:	4798      	blx	r3
	uint32_t                      offset = 0;
     93e:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
     940:	3408      	adds	r4, #8
     942:	4d0d      	ldr	r5, [pc, #52]	; (978 <usart_sync_read+0x60>)
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
     944:	4b0d      	ldr	r3, [pc, #52]	; (97c <usart_sync_read+0x64>)
     946:	4699      	mov	r9, r3
		while (!_usart_sync_is_byte_received(&descr->device))
     948:	0020      	movs	r0, r4
     94a:	47a8      	blx	r5
     94c:	2800      	cmp	r0, #0
     94e:	d0fb      	beq.n	948 <usart_sync_read+0x30>
		buf[offset] = _usart_sync_read_byte(&descr->device);
     950:	0020      	movs	r0, r4
     952:	47c8      	blx	r9
     954:	55b8      	strb	r0, [r7, r6]
	} while (++offset < length);
     956:	3601      	adds	r6, #1
     958:	4546      	cmp	r6, r8
     95a:	d3f5      	bcc.n	948 <usart_sync_read+0x30>

	return (int32_t)offset;
}
     95c:	0030      	movs	r0, r6
     95e:	bc0c      	pop	{r2, r3}
     960:	4690      	mov	r8, r2
     962:	4699      	mov	r9, r3
     964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     966:	2000      	movs	r0, #0
     968:	e7e4      	b.n	934 <usart_sync_read+0x1c>
     96a:	2000      	movs	r0, #0
     96c:	e7e2      	b.n	934 <usart_sync_read+0x1c>
     96e:	46c0      	nop			; (mov r8, r8)
     970:	00001ec0 	.word	0x00001ec0
     974:	00000ca1 	.word	0x00000ca1
     978:	00000f9d 	.word	0x00000f9d
     97c:	00000f81 	.word	0x00000f81

00000980 <usart_sync_init>:
{
     980:	b570      	push	{r4, r5, r6, lr}
     982:	0005      	movs	r5, r0
     984:	000c      	movs	r4, r1
	ASSERT(descr && hw);
     986:	2800      	cmp	r0, #0
     988:	d013      	beq.n	9b2 <usart_sync_init+0x32>
     98a:	0008      	movs	r0, r1
     98c:	1e43      	subs	r3, r0, #1
     98e:	4198      	sbcs	r0, r3
     990:	b2c0      	uxtb	r0, r0
     992:	2234      	movs	r2, #52	; 0x34
     994:	4908      	ldr	r1, [pc, #32]	; (9b8 <usart_sync_init+0x38>)
     996:	4b09      	ldr	r3, [pc, #36]	; (9bc <usart_sync_init+0x3c>)
     998:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
     99a:	0028      	movs	r0, r5
     99c:	3008      	adds	r0, #8
     99e:	0021      	movs	r1, r4
     9a0:	4b07      	ldr	r3, [pc, #28]	; (9c0 <usart_sync_init+0x40>)
     9a2:	4798      	blx	r3
	if (init_status) {
     9a4:	2800      	cmp	r0, #0
     9a6:	d103      	bne.n	9b0 <usart_sync_init+0x30>
	descr->io.read  = usart_sync_read;
     9a8:	4b06      	ldr	r3, [pc, #24]	; (9c4 <usart_sync_init+0x44>)
     9aa:	606b      	str	r3, [r5, #4]
	descr->io.write = usart_sync_write;
     9ac:	4b06      	ldr	r3, [pc, #24]	; (9c8 <usart_sync_init+0x48>)
     9ae:	602b      	str	r3, [r5, #0]
}
     9b0:	bd70      	pop	{r4, r5, r6, pc}
     9b2:	2000      	movs	r0, #0
     9b4:	e7ed      	b.n	992 <usart_sync_init+0x12>
     9b6:	46c0      	nop			; (mov r8, r8)
     9b8:	00001ec0 	.word	0x00001ec0
     9bc:	00000ca1 	.word	0x00000ca1
     9c0:	00000f4d 	.word	0x00000f4d
     9c4:	00000919 	.word	0x00000919
     9c8:	0000089d 	.word	0x0000089d

000009cc <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
     9cc:	b5f0      	push	{r4, r5, r6, r7, lr}
     9ce:	0004      	movs	r4, r0
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     9d0:	4b0e      	ldr	r3, [pc, #56]	; (a0c <_usb_d_find_ep+0x40>)
     9d2:	785a      	ldrb	r2, [r3, #1]
     9d4:	4290      	cmp	r0, r2
     9d6:	d017      	beq.n	a08 <_usb_d_find_ep+0x3c>
     9d8:	2300      	movs	r3, #0
     9da:	2000      	movs	r0, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
     9dc:	4f0b      	ldr	r7, [pc, #44]	; (a0c <_usb_d_find_ep+0x40>)
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
     9de:	260f      	movs	r6, #15
     9e0:	4026      	ands	r6, r4
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     9e2:	003d      	movs	r5, r7
     9e4:	e008      	b.n	9f8 <_usb_d_find_ep+0x2c>
     9e6:	3001      	adds	r0, #1
     9e8:	b240      	sxtb	r0, r0
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     9ea:	2804      	cmp	r0, #4
     9ec:	d00a      	beq.n	a04 <_usb_d_find_ep+0x38>
     9ee:	3320      	adds	r3, #32
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     9f0:	18ea      	adds	r2, r5, r3
     9f2:	7852      	ldrb	r2, [r2, #1]
     9f4:	42a2      	cmp	r2, r4
     9f6:	d006      	beq.n	a06 <_usb_d_find_ep+0x3a>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
     9f8:	5dd9      	ldrb	r1, [r3, r7]
     9fa:	2900      	cmp	r1, #0
     9fc:	d1f3      	bne.n	9e6 <_usb_d_find_ep+0x1a>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
     9fe:	4296      	cmp	r6, r2
     a00:	d1f1      	bne.n	9e6 <_usb_d_find_ep+0x1a>
     a02:	e000      	b.n	a06 <_usb_d_find_ep+0x3a>
			return i;
		}
	}
	return -1;
     a04:	3805      	subs	r0, #5
}
     a06:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     a08:	2000      	movs	r0, #0
     a0a:	e7fc      	b.n	a06 <_usb_d_find_ep+0x3a>
     a0c:	2000001c 	.word	0x2000001c

00000a10 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
     a10:	2000      	movs	r0, #0
     a12:	4770      	bx	lr

00000a14 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
     a14:	b570      	push	{r4, r5, r6, lr}
     a16:	0004      	movs	r4, r0
     a18:	000d      	movs	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
     a1a:	4b0a      	ldr	r3, [pc, #40]	; (a44 <usb_d_cb_trans_more+0x30>)
     a1c:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
     a1e:	0142      	lsls	r2, r0, #5
     a20:	4b09      	ldr	r3, [pc, #36]	; (a48 <usb_d_cb_trans_more+0x34>)
     a22:	189b      	adds	r3, r3, r2
     a24:	789a      	ldrb	r2, [r3, #2]
		return ept->callbacks.more(ep, transfered);
	}
	return false;
     a26:	2300      	movs	r3, #0
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
     a28:	2a03      	cmp	r2, #3
     a2a:	d001      	beq.n	a30 <usb_d_cb_trans_more+0x1c>
}
     a2c:	0018      	movs	r0, r3
     a2e:	bd70      	pop	{r4, r5, r6, pc}
		return ept->callbacks.more(ep, transfered);
     a30:	0140      	lsls	r0, r0, #5
     a32:	4b05      	ldr	r3, [pc, #20]	; (a48 <usb_d_cb_trans_more+0x34>)
     a34:	1818      	adds	r0, r3, r0
     a36:	6983      	ldr	r3, [r0, #24]
     a38:	0029      	movs	r1, r5
     a3a:	0020      	movs	r0, r4
     a3c:	4798      	blx	r3
     a3e:	0003      	movs	r3, r0
     a40:	e7f4      	b.n	a2c <usb_d_cb_trans_more+0x18>
     a42:	46c0      	nop			; (mov r8, r8)
     a44:	000009cd 	.word	0x000009cd
     a48:	2000001c 	.word	0x2000001c

00000a4c <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
     a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
     a4e:	b085      	sub	sp, #20
     a50:	0005      	movs	r5, r0
     a52:	000f      	movs	r7, r1
     a54:	0016      	movs	r6, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
     a56:	4b51      	ldr	r3, [pc, #324]	; (b9c <_usb_d_cb_trans_done+0x150>)
     a58:	4798      	blx	r3
     a5a:	0004      	movs	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
     a5c:	2f00      	cmp	r7, #0
     a5e:	d162      	bne.n	b26 <_usb_d_cb_trans_done+0xda>
		ept->xfer.hdr.status = USB_XFER_DONE;
     a60:	4b4f      	ldr	r3, [pc, #316]	; (ba0 <_usb_d_cb_trans_done+0x154>)
     a62:	0142      	lsls	r2, r0, #5
     a64:	1899      	adds	r1, r3, r2
     a66:	2000      	movs	r0, #0
     a68:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     a6a:	5cd3      	ldrb	r3, [r2, r3]
     a6c:	2b00      	cmp	r3, #0
     a6e:	d00e      	beq.n	a8e <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
     a70:	0162      	lsls	r2, r4, #5
     a72:	4b4b      	ldr	r3, [pc, #300]	; (ba0 <_usb_d_cb_trans_done+0x154>)
     a74:	189b      	adds	r3, r3, r2
     a76:	2201      	movs	r2, #1
     a78:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
     a7a:	0164      	lsls	r4, r4, #5
     a7c:	4b48      	ldr	r3, [pc, #288]	; (ba0 <_usb_d_cb_trans_done+0x154>)
     a7e:	191c      	adds	r4, r3, r4
     a80:	78e1      	ldrb	r1, [r4, #3]
     a82:	69e3      	ldr	r3, [r4, #28]
     a84:	0032      	movs	r2, r6
     a86:	0028      	movs	r0, r5
     a88:	4798      	blx	r3
}
     a8a:	b005      	add	sp, #20
     a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state == USB_EP_S_X_DATA) {
     a8e:	788b      	ldrb	r3, [r1, #2]
     a90:	2b03      	cmp	r3, #3
     a92:	d00c      	beq.n	aae <_usb_d_cb_trans_done+0x62>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
     a94:	4b42      	ldr	r3, [pc, #264]	; (ba0 <_usb_d_cb_trans_done+0x154>)
     a96:	0162      	lsls	r2, r4, #5
     a98:	320c      	adds	r2, #12
     a9a:	189a      	adds	r2, r3, r2
     a9c:	0164      	lsls	r4, r4, #5
     a9e:	191c      	adds	r4, r3, r4
     aa0:	7860      	ldrb	r0, [r4, #1]
     aa2:	2100      	movs	r1, #0
     aa4:	69e3      	ldr	r3, [r4, #28]
     aa6:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     aa8:	2302      	movs	r3, #2
     aaa:	70a3      	strb	r3, [r4, #2]
     aac:	e7ed      	b.n	a8a <_usb_d_cb_trans_done+0x3e>
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
     aae:	4a3c      	ldr	r2, [pc, #240]	; (ba0 <_usb_d_cb_trans_done+0x154>)
     ab0:	000b      	movs	r3, r1
     ab2:	250c      	movs	r5, #12
     ab4:	574d      	ldrsb	r5, [r1, r5]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
     ab6:	0161      	lsls	r1, r4, #5
     ab8:	310c      	adds	r1, #12
     aba:	1852      	adds	r2, r2, r1
     abc:	7858      	ldrb	r0, [r3, #1]
     abe:	69db      	ldr	r3, [r3, #28]
     ac0:	2101      	movs	r1, #1
     ac2:	4798      	blx	r3
		if (err) {
     ac4:	2800      	cmp	r0, #0
     ac6:	d017      	beq.n	af8 <_usb_d_cb_trans_done+0xac>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
     ac8:	0162      	lsls	r2, r4, #5
     aca:	4b35      	ldr	r3, [pc, #212]	; (ba0 <_usb_d_cb_trans_done+0x154>)
     acc:	189b      	adds	r3, r3, r2
     ace:	2205      	movs	r2, #5
     ad0:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
     ad2:	3a03      	subs	r2, #3
     ad4:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
     ad6:	2d00      	cmp	r5, #0
     ad8:	db09      	blt.n	aee <_usb_d_cb_trans_done+0xa2>
     ada:	0164      	lsls	r4, r4, #5
     adc:	4b30      	ldr	r3, [pc, #192]	; (ba0 <_usb_d_cb_trans_done+0x154>)
     ade:	191c      	adds	r4, r3, r4
     ae0:	7860      	ldrb	r0, [r4, #1]
     ae2:	2380      	movs	r3, #128	; 0x80
     ae4:	4318      	orrs	r0, r3
     ae6:	2101      	movs	r1, #1
     ae8:	4b2e      	ldr	r3, [pc, #184]	; (ba4 <_usb_d_cb_trans_done+0x158>)
     aea:	4798      	blx	r3
     aec:	e7cd      	b.n	a8a <_usb_d_cb_trans_done+0x3e>
     aee:	0164      	lsls	r4, r4, #5
     af0:	4b2b      	ldr	r3, [pc, #172]	; (ba0 <_usb_d_cb_trans_done+0x154>)
     af2:	191c      	adds	r4, r3, r4
     af4:	7860      	ldrb	r0, [r4, #1]
     af6:	e7f6      	b.n	ae6 <_usb_d_cb_trans_done+0x9a>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
     af8:	0164      	lsls	r4, r4, #5
     afa:	4b29      	ldr	r3, [pc, #164]	; (ba0 <_usb_d_cb_trans_done+0x154>)
     afc:	191c      	adds	r4, r3, r4
     afe:	2304      	movs	r3, #4
     b00:	70a3      	strb	r3, [r4, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
     b02:	7863      	ldrb	r3, [r4, #1]
	struct usb_d_transfer trans
     b04:	2200      	movs	r2, #0
     b06:	9201      	str	r2, [sp, #4]
     b08:	9202      	str	r2, [sp, #8]
     b0a:	2d00      	cmp	r5, #0
     b0c:	db08      	blt.n	b20 <_usb_d_cb_trans_done+0xd4>
     b0e:	3280      	adds	r2, #128	; 0x80
     b10:	4313      	orrs	r3, r2
     b12:	a801      	add	r0, sp, #4
     b14:	7203      	strb	r3, [r0, #8]
     b16:	2301      	movs	r3, #1
     b18:	7243      	strb	r3, [r0, #9]
	return _usb_d_dev_ep_trans(&trans);
     b1a:	4b23      	ldr	r3, [pc, #140]	; (ba8 <_usb_d_cb_trans_done+0x15c>)
     b1c:	4798      	blx	r3
     b1e:	e7b4      	b.n	a8a <_usb_d_cb_trans_done+0x3e>
	struct usb_d_transfer trans
     b20:	220f      	movs	r2, #15
     b22:	4013      	ands	r3, r2
     b24:	e7f5      	b.n	b12 <_usb_d_cb_trans_done+0xc6>
	} else if (code == USB_TRANS_STALL) {
     b26:	2f01      	cmp	r7, #1
     b28:	d00a      	beq.n	b40 <_usb_d_cb_trans_done+0xf4>
	} else if (code == USB_TRANS_ABORT) {
     b2a:	2f02      	cmp	r7, #2
     b2c:	d01d      	beq.n	b6a <_usb_d_cb_trans_done+0x11e>
	} else if (code == USB_TRANS_RESET) {
     b2e:	2f03      	cmp	r7, #3
     b30:	d02c      	beq.n	b8c <_usb_d_cb_trans_done+0x140>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
     b32:	0142      	lsls	r2, r0, #5
     b34:	4b1a      	ldr	r3, [pc, #104]	; (ba0 <_usb_d_cb_trans_done+0x154>)
     b36:	189b      	adds	r3, r3, r2
     b38:	2206      	movs	r2, #6
     b3a:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
     b3c:	70da      	strb	r2, [r3, #3]
     b3e:	e79c      	b.n	a7a <_usb_d_cb_trans_done+0x2e>
		ept->xfer.hdr.status = USB_XFER_HALT;
     b40:	4b17      	ldr	r3, [pc, #92]	; (ba0 <_usb_d_cb_trans_done+0x154>)
     b42:	0142      	lsls	r2, r0, #5
     b44:	1899      	adds	r1, r3, r2
     b46:	2002      	movs	r0, #2
     b48:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     b4a:	5cd3      	ldrb	r3, [r2, r3]
     b4c:	2b00      	cmp	r3, #0
     b4e:	d005      	beq.n	b5c <_usb_d_cb_trans_done+0x110>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
     b50:	0162      	lsls	r2, r4, #5
     b52:	4b13      	ldr	r3, [pc, #76]	; (ba0 <_usb_d_cb_trans_done+0x154>)
     b54:	189b      	adds	r3, r3, r2
     b56:	2205      	movs	r2, #5
     b58:	709a      	strb	r2, [r3, #2]
     b5a:	e78e      	b.n	a7a <_usb_d_cb_trans_done+0x2e>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     b5c:	2202      	movs	r2, #2
     b5e:	708a      	strb	r2, [r1, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     b60:	2100      	movs	r1, #0
     b62:	0028      	movs	r0, r5
     b64:	4b0f      	ldr	r3, [pc, #60]	; (ba4 <_usb_d_cb_trans_done+0x158>)
     b66:	4798      	blx	r3
     b68:	e787      	b.n	a7a <_usb_d_cb_trans_done+0x2e>
		ept->xfer.hdr.status = USB_XFER_ABORT;
     b6a:	4b0d      	ldr	r3, [pc, #52]	; (ba0 <_usb_d_cb_trans_done+0x154>)
     b6c:	0142      	lsls	r2, r0, #5
     b6e:	1899      	adds	r1, r3, r2
     b70:	2004      	movs	r0, #4
     b72:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     b74:	5cd3      	ldrb	r3, [r2, r3]
     b76:	2b00      	cmp	r3, #0
     b78:	d005      	beq.n	b86 <_usb_d_cb_trans_done+0x13a>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
     b7a:	0162      	lsls	r2, r4, #5
     b7c:	4b08      	ldr	r3, [pc, #32]	; (ba0 <_usb_d_cb_trans_done+0x154>)
     b7e:	189b      	adds	r3, r3, r2
     b80:	2201      	movs	r2, #1
     b82:	709a      	strb	r2, [r3, #2]
     b84:	e779      	b.n	a7a <_usb_d_cb_trans_done+0x2e>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     b86:	2302      	movs	r3, #2
     b88:	708b      	strb	r3, [r1, #2]
			return;
     b8a:	e77e      	b.n	a8a <_usb_d_cb_trans_done+0x3e>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
     b8c:	0142      	lsls	r2, r0, #5
     b8e:	4b04      	ldr	r3, [pc, #16]	; (ba0 <_usb_d_cb_trans_done+0x154>)
     b90:	189b      	adds	r3, r3, r2
     b92:	2200      	movs	r2, #0
     b94:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
     b96:	3205      	adds	r2, #5
     b98:	70da      	strb	r2, [r3, #3]
     b9a:	e76e      	b.n	a7a <_usb_d_cb_trans_done+0x2e>
     b9c:	000009cd 	.word	0x000009cd
     ba0:	2000001c 	.word	0x2000001c
     ba4:	000017dd 	.word	0x000017dd
     ba8:	000019b1 	.word	0x000019b1

00000bac <usb_d_cb_trans_setup>:
{
     bac:	b5f0      	push	{r4, r5, r6, r7, lr}
     bae:	46c6      	mov	lr, r8
     bb0:	b500      	push	{lr}
     bb2:	0004      	movs	r4, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     bb4:	4b1d      	ldr	r3, [pc, #116]	; (c2c <usb_d_cb_trans_setup+0x80>)
     bb6:	4798      	blx	r3
     bb8:	0006      	movs	r6, r0
	uint8_t *        req      = ept->xfer.req;
     bba:	0145      	lsls	r5, r0, #5
     bbc:	350c      	adds	r5, #12
     bbe:	4b1c      	ldr	r3, [pc, #112]	; (c30 <usb_d_cb_trans_setup+0x84>)
     bc0:	195d      	adds	r5, r3, r5
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
     bc2:	0029      	movs	r1, r5
     bc4:	0020      	movs	r0, r4
     bc6:	4b1b      	ldr	r3, [pc, #108]	; (c34 <usb_d_cb_trans_setup+0x88>)
     bc8:	4798      	blx	r3
	if (n != 8) {
     bca:	b2c0      	uxtb	r0, r0
     bcc:	2808      	cmp	r0, #8
     bce:	d00a      	beq.n	be6 <usb_d_cb_trans_setup+0x3a>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     bd0:	2101      	movs	r1, #1
     bd2:	0020      	movs	r0, r4
     bd4:	4d18      	ldr	r5, [pc, #96]	; (c38 <usb_d_cb_trans_setup+0x8c>)
     bd6:	47a8      	blx	r5
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
     bd8:	2080      	movs	r0, #128	; 0x80
     bda:	4320      	orrs	r0, r4
     bdc:	2101      	movs	r1, #1
     bde:	47a8      	blx	r5
}
     be0:	bc04      	pop	{r2}
     be2:	4690      	mov	r8, r2
     be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     be6:	2100      	movs	r1, #0
     be8:	0020      	movs	r0, r4
     bea:	4b13      	ldr	r3, [pc, #76]	; (c38 <usb_d_cb_trans_setup+0x8c>)
     bec:	4698      	mov	r8, r3
     bee:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
     bf0:	2780      	movs	r7, #128	; 0x80
     bf2:	4327      	orrs	r7, r4
     bf4:	2100      	movs	r1, #0
     bf6:	0038      	movs	r0, r7
     bf8:	47c0      	blx	r8
	ept->xfer.hdr.state = USB_EP_S_IDLE;
     bfa:	0172      	lsls	r2, r6, #5
     bfc:	4b0c      	ldr	r3, [pc, #48]	; (c30 <usb_d_cb_trans_setup+0x84>)
     bfe:	189b      	adds	r3, r3, r2
     c00:	2201      	movs	r2, #1
     c02:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
     c04:	695b      	ldr	r3, [r3, #20]
     c06:	0029      	movs	r1, r5
     c08:	0020      	movs	r0, r4
     c0a:	4798      	blx	r3
     c0c:	2800      	cmp	r0, #0
     c0e:	d1e7      	bne.n	be0 <usb_d_cb_trans_setup+0x34>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
     c10:	0176      	lsls	r6, r6, #5
     c12:	4b07      	ldr	r3, [pc, #28]	; (c30 <usb_d_cb_trans_setup+0x84>)
     c14:	199e      	adds	r6, r3, r6
     c16:	2305      	movs	r3, #5
     c18:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     c1a:	2101      	movs	r1, #1
     c1c:	0020      	movs	r0, r4
     c1e:	4c06      	ldr	r4, [pc, #24]	; (c38 <usb_d_cb_trans_setup+0x8c>)
     c20:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
     c22:	2101      	movs	r1, #1
     c24:	0038      	movs	r0, r7
     c26:	47a0      	blx	r4
     c28:	e7da      	b.n	be0 <usb_d_cb_trans_setup+0x34>
     c2a:	46c0      	nop			; (mov r8, r8)
     c2c:	000009cd 	.word	0x000009cd
     c30:	2000001c 	.word	0x2000001c
     c34:	00001941 	.word	0x00001941
     c38:	000017dd 	.word	0x000017dd

00000c3c <usb_d_init>:

int32_t usb_d_init(void)
{
     c3c:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
     c3e:	4b10      	ldr	r3, [pc, #64]	; (c80 <usb_d_init+0x44>)
     c40:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
     c42:	2800      	cmp	r0, #0
     c44:	db1b      	blt.n	c7e <usb_d_init+0x42>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
     c46:	4c0f      	ldr	r4, [pc, #60]	; (c84 <usb_d_init+0x48>)
     c48:	2280      	movs	r2, #128	; 0x80
     c4a:	2100      	movs	r1, #0
     c4c:	0020      	movs	r0, r4
     c4e:	4b0e      	ldr	r3, [pc, #56]	; (c88 <usb_d_init+0x4c>)
     c50:	4798      	blx	r3
     c52:	0023      	movs	r3, r4
     c54:	3480      	adds	r4, #128	; 0x80
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
     c56:	21ff      	movs	r1, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
     c58:	4a0c      	ldr	r2, [pc, #48]	; (c8c <usb_d_init+0x50>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
     c5a:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
     c5c:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
     c5e:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
     c60:	61da      	str	r2, [r3, #28]
     c62:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     c64:	42a3      	cmp	r3, r4
     c66:	d1f8      	bne.n	c5a <usb_d_init+0x1e>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
     c68:	4909      	ldr	r1, [pc, #36]	; (c90 <usb_d_init+0x54>)
     c6a:	2000      	movs	r0, #0
     c6c:	4c09      	ldr	r4, [pc, #36]	; (c94 <usb_d_init+0x58>)
     c6e:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
     c70:	4909      	ldr	r1, [pc, #36]	; (c98 <usb_d_init+0x5c>)
     c72:	2001      	movs	r0, #1
     c74:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
     c76:	4909      	ldr	r1, [pc, #36]	; (c9c <usb_d_init+0x60>)
     c78:	2002      	movs	r0, #2
     c7a:	47a0      	blx	r4
	return ERR_NONE;
     c7c:	2000      	movs	r0, #0
}
     c7e:	bd10      	pop	{r4, pc}
     c80:	00001701 	.word	0x00001701
     c84:	2000001c 	.word	0x2000001c
     c88:	00001e97 	.word	0x00001e97
     c8c:	00000a11 	.word	0x00000a11
     c90:	00000bad 	.word	0x00000bad
     c94:	00001bc5 	.word	0x00001bc5
     c98:	00000a15 	.word	0x00000a15
     c9c:	00000a4d 	.word	0x00000a4d

00000ca0 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     ca0:	2800      	cmp	r0, #0
     ca2:	d100      	bne.n	ca6 <assert+0x6>
		__asm("BKPT #0");
     ca4:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     ca6:	4770      	bx	lr

00000ca8 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
     ca8:	6803      	ldr	r3, [r0, #0]
     caa:	2b00      	cmp	r3, #0
     cac:	d00a      	beq.n	cc4 <is_list_element+0x1c>
		if (it == element) {
     cae:	428b      	cmp	r3, r1
     cb0:	d00a      	beq.n	cc8 <is_list_element+0x20>
	for (it = list->head; it; it = it->next) {
     cb2:	681b      	ldr	r3, [r3, #0]
     cb4:	2b00      	cmp	r3, #0
     cb6:	d003      	beq.n	cc0 <is_list_element+0x18>
		if (it == element) {
     cb8:	4299      	cmp	r1, r3
     cba:	d1fa      	bne.n	cb2 <is_list_element+0xa>
			return true;
     cbc:	2001      	movs	r0, #1
     cbe:	e000      	b.n	cc2 <is_list_element+0x1a>
		}
	}

	return false;
     cc0:	2000      	movs	r0, #0
}
     cc2:	4770      	bx	lr
	return false;
     cc4:	2000      	movs	r0, #0
     cc6:	e7fc      	b.n	cc2 <is_list_element+0x1a>
			return true;
     cc8:	2001      	movs	r0, #1
     cca:	e7fa      	b.n	cc2 <is_list_element+0x1a>

00000ccc <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
     ccc:	b570      	push	{r4, r5, r6, lr}
     cce:	0004      	movs	r4, r0
     cd0:	000d      	movs	r5, r1
	ASSERT(!is_list_element(list, element));
     cd2:	4b06      	ldr	r3, [pc, #24]	; (cec <list_insert_as_head+0x20>)
     cd4:	4798      	blx	r3
     cd6:	2301      	movs	r3, #1
     cd8:	4058      	eors	r0, r3
     cda:	b2c0      	uxtb	r0, r0
     cdc:	2239      	movs	r2, #57	; 0x39
     cde:	4904      	ldr	r1, [pc, #16]	; (cf0 <list_insert_as_head+0x24>)
     ce0:	4b04      	ldr	r3, [pc, #16]	; (cf4 <list_insert_as_head+0x28>)
     ce2:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
     ce4:	6823      	ldr	r3, [r4, #0]
     ce6:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
     ce8:	6025      	str	r5, [r4, #0]
}
     cea:	bd70      	pop	{r4, r5, r6, pc}
     cec:	00000ca9 	.word	0x00000ca9
     cf0:	00001edc 	.word	0x00001edc
     cf4:	00000ca1 	.word	0x00000ca1

00000cf8 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
     cf8:	6803      	ldr	r3, [r0, #0]
     cfa:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
     cfc:	6001      	str	r1, [r0, #0]
}
     cfe:	4770      	bx	lr

00000d00 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
     d00:	6803      	ldr	r3, [r0, #0]
     d02:	2b00      	cmp	r3, #0
     d04:	d001      	beq.n	d0a <list_remove_head+0xa>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
     d06:	681a      	ldr	r2, [r3, #0]
     d08:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
     d0a:	0018      	movs	r0, r3
     d0c:	4770      	bx	lr
	...

00000d10 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     d10:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     d12:	4b07      	ldr	r3, [pc, #28]	; (d30 <_init_chip+0x20>)
     d14:	685a      	ldr	r2, [r3, #4]
     d16:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
     d18:	4b06      	ldr	r3, [pc, #24]	; (d34 <_init_chip+0x24>)
     d1a:	4798      	blx	r3
	_sysctrl_init_sources();
     d1c:	4b06      	ldr	r3, [pc, #24]	; (d38 <_init_chip+0x28>)
     d1e:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
     d20:	2008      	movs	r0, #8
     d22:	4c06      	ldr	r4, [pc, #24]	; (d3c <_init_chip+0x2c>)
     d24:	47a0      	blx	r4
#endif
	_sysctrl_init_referenced_generators();
     d26:	4b06      	ldr	r3, [pc, #24]	; (d40 <_init_chip+0x30>)
     d28:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     d2a:	20f7      	movs	r0, #247	; 0xf7
     d2c:	47a0      	blx	r4
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
     d2e:	bd10      	pop	{r4, pc}
     d30:	41004000 	.word	0x41004000
     d34:	00000d85 	.word	0x00000d85
     d38:	00000fa9 	.word	0x00000fa9
     d3c:	00000d45 	.word	0x00000d45
     d40:	00001009 	.word	0x00001009

00000d44 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     d44:	07c3      	lsls	r3, r0, #31
     d46:	d509      	bpl.n	d5c <_gclk_init_generators_by_fref+0x18>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
     d48:	4b0b      	ldr	r3, [pc, #44]	; (d78 <_gclk_init_generators_by_fref+0x34>)
     d4a:	2280      	movs	r2, #128	; 0x80
     d4c:	0052      	lsls	r2, r2, #1
     d4e:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     d50:	4a0a      	ldr	r2, [pc, #40]	; (d7c <_gclk_init_generators_by_fref+0x38>)
     d52:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     d54:	001a      	movs	r2, r3
     d56:	7853      	ldrb	r3, [r2, #1]
     d58:	09db      	lsrs	r3, r3, #7
     d5a:	d1fc      	bne.n	d56 <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SRC | GCLK_GENCTRL_ID(2));
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
     d5c:	0703      	lsls	r3, r0, #28
     d5e:	d509      	bpl.n	d74 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENDIV.reg = data;
     d60:	4b05      	ldr	r3, [pc, #20]	; (d78 <_gclk_init_generators_by_fref+0x34>)
     d62:	2204      	movs	r2, #4
     d64:	32ff      	adds	r2, #255	; 0xff
     d66:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     d68:	4a05      	ldr	r2, [pc, #20]	; (d80 <_gclk_init_generators_by_fref+0x3c>)
     d6a:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     d6c:	001a      	movs	r2, r3
     d6e:	7853      	ldrb	r3, [r2, #1]
     d70:	09db      	lsrs	r3, r3, #7
     d72:	d1fc      	bne.n	d6e <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
     d74:	4770      	bx	lr
     d76:	46c0      	nop			; (mov r8, r8)
     d78:	40000c00 	.word	0x40000c00
     d7c:	00010700 	.word	0x00010700
     d80:	00010503 	.word	0x00010503

00000d84 <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
     d84:	4b06      	ldr	r3, [pc, #24]	; (da0 <_pm_init+0x1c>)
     d86:	7a1a      	ldrb	r2, [r3, #8]
     d88:	b2d2      	uxtb	r2, r2
     d8a:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
     d8c:	7a5a      	ldrb	r2, [r3, #9]
     d8e:	b2d2      	uxtb	r2, r2
     d90:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
     d92:	7a9a      	ldrb	r2, [r3, #10]
     d94:	b2d2      	uxtb	r2, r2
     d96:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
     d98:	7ada      	ldrb	r2, [r3, #11]
     d9a:	b2d2      	uxtb	r2, r2
     d9c:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
     d9e:	4770      	bx	lr
     da0:	40000400 	.word	0x40000400

00000da4 <_timer_init>:

/**
 * \brief Initialize Timer
 */
int32_t _timer_init(struct _timer_device *const dev, void *const hw)
{
     da4:	b570      	push	{r4, r5, r6, lr}
     da6:	0004      	movs	r4, r0
     da8:	000d      	movs	r5, r1
	ASSERT(dev);
     daa:	1e43      	subs	r3, r0, #1
     dac:	4198      	sbcs	r0, r3
     dae:	b2c0      	uxtb	r0, r0
     db0:	2233      	movs	r2, #51	; 0x33
     db2:	4910      	ldr	r1, [pc, #64]	; (df4 <_timer_init+0x50>)
     db4:	4b10      	ldr	r3, [pc, #64]	; (df8 <_timer_init+0x54>)
     db6:	4798      	blx	r3

	uint16_t register_value;
	dev->hw = hw;
     db8:	60e5      	str	r5, [r4, #12]
}

static inline void hri_rtcmode0_write_CTRL_reg(const void *const hw, hri_rtcmode0_ctrl_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRL.reg = data;
     dba:	2301      	movs	r3, #1
     dbc:	802b      	strh	r3, [r5, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     dbe:	7aab      	ldrb	r3, [r5, #10]
     dc0:	09db      	lsrs	r3, r3, #7
     dc2:	d1fc      	bne.n	dbe <_timer_init+0x1a>

	hri_rtcmode0_write_CTRL_reg(dev->hw, RTC_MODE0_CTRL_SWRST);
	hri_rtcmode0_wait_for_sync(dev->hw);
     dc4:	68e2      	ldr	r2, [r4, #12]
     dc6:	7a93      	ldrb	r3, [r2, #10]
     dc8:	09db      	lsrs	r3, r3, #7
     dca:	d1fc      	bne.n	dc6 <_timer_init+0x22>
	((Rtc *)hw)->MODE0.CTRL.reg = data;
     dcc:	3380      	adds	r3, #128	; 0x80
     dce:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     dd0:	7a93      	ldrb	r3, [r2, #10]
     dd2:	09db      	lsrs	r3, r3, #7
     dd4:	d1fc      	bne.n	dd0 <_timer_init+0x2c>
	/* clear counter on compare/timer match */
	register_value |= RTC_MODE0_CTRL_MATCHCLR;

	hri_rtcmode0_write_CTRL_reg(dev->hw, register_value);

	hri_rtcmode0_write_COMP_COMP_bf(dev->hw, 0, CONF_RTC_COMP_VAL);
     dd6:	68e2      	ldr	r2, [r4, #12]

static inline void hri_rtcmode0_write_COMP_COMP_bf(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	uint32_t tmp;
	RTC_CRITICAL_SECTION_ENTER();
	tmp = ((Rtc *)hw)->MODE0.COMP[index].reg;
     dd8:	6993      	ldr	r3, [r2, #24]
	tmp &= ~RTC_MODE0_COMP_COMP_Msk;
	tmp |= RTC_MODE0_COMP_COMP(data);
	((Rtc *)hw)->MODE0.COMP[index].reg = tmp;
     dda:	2380      	movs	r3, #128	; 0x80
     ddc:	00db      	lsls	r3, r3, #3
     dde:	6193      	str	r3, [r2, #24]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     de0:	7a93      	ldrb	r3, [r2, #10]
     de2:	09db      	lsrs	r3, r3, #7
     de4:	d1fc      	bne.n	de0 <_timer_init+0x3c>
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
     de6:	3301      	adds	r3, #1
     de8:	68e2      	ldr	r2, [r4, #12]
     dea:	71d3      	strb	r3, [r2, #7]
	        | (CONF_RTC_PEREO4 << RTC_MODE0_EVCTRL_PEREO4_Pos) | (CONF_RTC_PEREO5 << RTC_MODE0_EVCTRL_PEREO5_Pos)
	        | (CONF_RTC_PEREO6 << RTC_MODE0_EVCTRL_PEREO6_Pos) | (CONF_RTC_PEREO7 << RTC_MODE0_EVCTRL_PEREO7_Pos)
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	_rtc_dev = dev;
     dec:	4b03      	ldr	r3, [pc, #12]	; (dfc <_timer_init+0x58>)
     dee:	601c      	str	r4, [r3, #0]

	return ERR_NONE;
}
     df0:	2000      	movs	r0, #0
     df2:	bd70      	pop	{r4, r5, r6, pc}
     df4:	00001efc 	.word	0x00001efc
     df8:	00000ca1 	.word	0x00000ca1
     dfc:	2000009c 	.word	0x2000009c

00000e00 <_rtc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
	return NULL;
}
     e00:	2000      	movs	r0, #0
     e02:	4770      	bx	lr

00000e04 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
     e04:	b510      	push	{r4, lr}
	_rtc_timer_interrupt_handler(_rtc_dev);
     e06:	4b07      	ldr	r3, [pc, #28]	; (e24 <RTC_Handler+0x20>)
     e08:	681c      	ldr	r4, [r3, #0]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
     e0a:	68e3      	ldr	r3, [r4, #12]
     e0c:	7a1b      	ldrb	r3, [r3, #8]
	if (flag & RTC_MODE0_INTFLAG_CMP0) {
     e0e:	07db      	lsls	r3, r3, #31
     e10:	d507      	bpl.n	e22 <RTC_Handler+0x1e>
		if (dev->timer_cb.period_expired) {
     e12:	6823      	ldr	r3, [r4, #0]
     e14:	2b00      	cmp	r3, #0
     e16:	d001      	beq.n	e1c <RTC_Handler+0x18>
			dev->timer_cb.period_expired(dev);
     e18:	0020      	movs	r0, r4
     e1a:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
     e1c:	68e3      	ldr	r3, [r4, #12]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
     e1e:	2201      	movs	r2, #1
     e20:	721a      	strb	r2, [r3, #8]
}
     e22:	bd10      	pop	{r4, pc}
     e24:	2000009c 	.word	0x2000009c

00000e28 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
     e28:	b510      	push	{r4, lr}
     e2a:	0004      	movs	r4, r0
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
     e2c:	4b42      	ldr	r3, [pc, #264]	; (f38 <_usart_init+0x110>)
     e2e:	18c3      	adds	r3, r0, r3
     e30:	0a9b      	lsrs	r3, r3, #10
     e32:	b2db      	uxtb	r3, r3
		if (_usarts[i].number == sercom_offset) {
     e34:	2b00      	cmp	r3, #0
     e36:	d053      	beq.n	ee0 <_usart_init+0xb8>
     e38:	2b02      	cmp	r3, #2
     e3a:	d053      	beq.n	ee4 <_usart_init+0xbc>
	ASSERT(false);
     e3c:	4a3f      	ldr	r2, [pc, #252]	; (f3c <_usart_init+0x114>)
     e3e:	4940      	ldr	r1, [pc, #256]	; (f40 <_usart_init+0x118>)
     e40:	2000      	movs	r0, #0
     e42:	4b40      	ldr	r3, [pc, #256]	; (f44 <_usart_init+0x11c>)
     e44:	4798      	blx	r3
	return 0;
     e46:	2000      	movs	r0, #0
	};
}

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
     e48:	69e3      	ldr	r3, [r4, #28]
	uint8_t i = _get_sercom_index(hw);

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
     e4a:	07db      	lsls	r3, r3, #31
     e4c:	d421      	bmi.n	e92 <_usart_init+0x6a>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
     e4e:	0083      	lsls	r3, r0, #2
     e50:	181b      	adds	r3, r3, r0
     e52:	009b      	lsls	r3, r3, #2
     e54:	4a3c      	ldr	r2, [pc, #240]	; (f48 <_usart_init+0x120>)
     e56:	18d3      	adds	r3, r2, r3
     e58:	69d9      	ldr	r1, [r3, #28]
     e5a:	231c      	movs	r3, #28
     e5c:	4019      	ands	r1, r3
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     e5e:	2203      	movs	r2, #3
     e60:	69e3      	ldr	r3, [r4, #28]
     e62:	421a      	tst	r2, r3
     e64:	d1fc      	bne.n	e60 <_usart_init+0x38>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
     e66:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
     e68:	079b      	lsls	r3, r3, #30
     e6a:	d50b      	bpl.n	e84 <_usart_init+0x5c>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
     e6c:	6823      	ldr	r3, [r4, #0]
     e6e:	2202      	movs	r2, #2
     e70:	4393      	bics	r3, r2
     e72:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     e74:	2303      	movs	r3, #3
     e76:	69e2      	ldr	r2, [r4, #28]
     e78:	4213      	tst	r3, r2
     e7a:	d1fc      	bne.n	e76 <_usart_init+0x4e>
     e7c:	2302      	movs	r3, #2
     e7e:	69e2      	ldr	r2, [r4, #28]
     e80:	4213      	tst	r3, r2
     e82:	d1fc      	bne.n	e7e <_usart_init+0x56>
			hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
		}
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
     e84:	2301      	movs	r3, #1
     e86:	430b      	orrs	r3, r1
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
     e88:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     e8a:	2203      	movs	r2, #3
     e8c:	69e3      	ldr	r3, [r4, #28]
     e8e:	421a      	tst	r2, r3
     e90:	d1fc      	bne.n	e8c <_usart_init+0x64>
     e92:	2201      	movs	r2, #1
     e94:	69e3      	ldr	r3, [r4, #28]
     e96:	421a      	tst	r2, r3
     e98:	d1fc      	bne.n	e94 <_usart_init+0x6c>
	}
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);

	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
     e9a:	0001      	movs	r1, r0
     e9c:	0083      	lsls	r3, r0, #2
     e9e:	181b      	adds	r3, r3, r0
     ea0:	009b      	lsls	r3, r3, #2
     ea2:	4a29      	ldr	r2, [pc, #164]	; (f48 <_usart_init+0x120>)
     ea4:	18d3      	adds	r3, r2, r3
     ea6:	69d8      	ldr	r0, [r3, #28]
	((Sercom *)hw)->USART.CTRLA.reg = data;
     ea8:	6020      	str	r0, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     eaa:	2203      	movs	r2, #3
     eac:	69e3      	ldr	r3, [r4, #28]
     eae:	421a      	tst	r2, r3
     eb0:	d1fc      	bne.n	eac <_usart_init+0x84>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
     eb2:	008b      	lsls	r3, r1, #2
     eb4:	185b      	adds	r3, r3, r1
     eb6:	009b      	lsls	r3, r3, #2
     eb8:	4a23      	ldr	r2, [pc, #140]	; (f48 <_usart_init+0x120>)
     eba:	18d3      	adds	r3, r2, r3
     ebc:	6a1b      	ldr	r3, [r3, #32]
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
     ebe:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     ec0:	2207      	movs	r2, #7
     ec2:	69e3      	ldr	r3, [r4, #28]
     ec4:	421a      	tst	r2, r3
     ec6:	d1fc      	bne.n	ec2 <_usart_init+0x9a>
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
     ec8:	23c0      	movs	r3, #192	; 0xc0
     eca:	01db      	lsls	r3, r3, #7
     ecc:	4218      	tst	r0, r3
     ece:	d10b      	bne.n	ee8 <_usart_init+0xc0>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
	} else {
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
     ed0:	008b      	lsls	r3, r1, #2
     ed2:	185b      	adds	r3, r3, r1
     ed4:	009b      	lsls	r3, r3, #2
     ed6:	4a1c      	ldr	r2, [pc, #112]	; (f48 <_usart_init+0x120>)
     ed8:	18d3      	adds	r3, r2, r3
     eda:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
     edc:	81a3      	strh	r3, [r4, #12]
     ede:	e01a      	b.n	f16 <_usart_init+0xee>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
     ee0:	2000      	movs	r0, #0
     ee2:	e7b1      	b.n	e48 <_usart_init+0x20>
		if (_usarts[i].number == sercom_offset) {
     ee4:	2001      	movs	r0, #1
     ee6:	e7af      	b.n	e48 <_usart_init+0x20>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
     ee8:	008a      	lsls	r2, r1, #2
     eea:	1852      	adds	r2, r2, r1
     eec:	0093      	lsls	r3, r2, #2
     eee:	4a16      	ldr	r2, [pc, #88]	; (f48 <_usart_init+0x120>)
     ef0:	18d2      	adds	r2, r2, r3
     ef2:	8c90      	ldrh	r0, [r2, #36]	; 0x24
     ef4:	89a3      	ldrh	r3, [r4, #12]
     ef6:	04c0      	lsls	r0, r0, #19
     ef8:	0cc0      	lsrs	r0, r0, #19
     efa:	0b5b      	lsrs	r3, r3, #13
     efc:	035b      	lsls	r3, r3, #13
     efe:	4303      	orrs	r3, r0
     f00:	81a3      	strh	r3, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
     f02:	3226      	adds	r2, #38	; 0x26
     f04:	7813      	ldrb	r3, [r2, #0]
     f06:	2207      	movs	r2, #7
     f08:	401a      	ands	r2, r3
     f0a:	89a3      	ldrh	r3, [r4, #12]
     f0c:	0352      	lsls	r2, r2, #13
     f0e:	04db      	lsls	r3, r3, #19
     f10:	0cdb      	lsrs	r3, r3, #19
     f12:	4313      	orrs	r3, r2
     f14:	81a3      	strh	r3, [r4, #12]
	}

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
     f16:	4a0c      	ldr	r2, [pc, #48]	; (f48 <_usart_init+0x120>)
     f18:	0088      	lsls	r0, r1, #2
     f1a:	1843      	adds	r3, r0, r1
     f1c:	009b      	lsls	r3, r3, #2
     f1e:	18d3      	adds	r3, r2, r3
     f20:	3327      	adds	r3, #39	; 0x27
     f22:	781b      	ldrb	r3, [r3, #0]
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
     f24:	73a3      	strb	r3, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
     f26:	1841      	adds	r1, r0, r1
     f28:	0089      	lsls	r1, r1, #2
     f2a:	1852      	adds	r2, r2, r1
     f2c:	3228      	adds	r2, #40	; 0x28
     f2e:	7812      	ldrb	r2, [r2, #0]
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
     f30:	2330      	movs	r3, #48	; 0x30
     f32:	54e2      	strb	r2, [r4, r3]

	return ERR_NONE;
}
     f34:	2000      	movs	r0, #0
     f36:	bd10      	pop	{r4, pc}
     f38:	bdfff800 	.word	0xbdfff800
     f3c:	0000023a 	.word	0x0000023a
     f40:	00001f54 	.word	0x00001f54
     f44:	00000ca1 	.word	0x00000ca1
     f48:	00001f14 	.word	0x00001f14

00000f4c <_usart_sync_init>:
{
     f4c:	b570      	push	{r4, r5, r6, lr}
     f4e:	0005      	movs	r5, r0
     f50:	000c      	movs	r4, r1
	ASSERT(device);
     f52:	1e43      	subs	r3, r0, #1
     f54:	4198      	sbcs	r0, r3
     f56:	b2c0      	uxtb	r0, r0
     f58:	22b4      	movs	r2, #180	; 0xb4
     f5a:	4904      	ldr	r1, [pc, #16]	; (f6c <_usart_sync_init+0x20>)
     f5c:	4b04      	ldr	r3, [pc, #16]	; (f70 <_usart_sync_init+0x24>)
     f5e:	4798      	blx	r3
	device->hw = hw;
     f60:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
     f62:	0020      	movs	r0, r4
     f64:	4b03      	ldr	r3, [pc, #12]	; (f74 <_usart_sync_init+0x28>)
     f66:	4798      	blx	r3
}
     f68:	bd70      	pop	{r4, r5, r6, pc}
     f6a:	46c0      	nop			; (mov r8, r8)
     f6c:	00001f54 	.word	0x00001f54
     f70:	00000ca1 	.word	0x00000ca1
     f74:	00000e29 	.word	0x00000e29

00000f78 <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
     f78:	6803      	ldr	r3, [r0, #0]
     f7a:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
     f7c:	8519      	strh	r1, [r3, #40]	; 0x28
}
     f7e:	4770      	bx	lr

00000f80 <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
     f80:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
     f82:	8d18      	ldrh	r0, [r3, #40]	; 0x28
     f84:	b2c0      	uxtb	r0, r0
}
     f86:	4770      	bx	lr

00000f88 <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
     f88:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
     f8a:	7e18      	ldrb	r0, [r3, #24]
     f8c:	2301      	movs	r3, #1
     f8e:	4018      	ands	r0, r3
}
     f90:	4770      	bx	lr

00000f92 <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
     f92:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
     f94:	7e18      	ldrb	r0, [r3, #24]
     f96:	0780      	lsls	r0, r0, #30
     f98:	0fc0      	lsrs	r0, r0, #31
}
     f9a:	4770      	bx	lr

00000f9c <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
     f9c:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
     f9e:	7e18      	ldrb	r0, [r3, #24]
     fa0:	0740      	lsls	r0, r0, #29
     fa2:	0fc0      	lsrs	r0, r0, #31
}
     fa4:	4770      	bx	lr
	...

00000fa8 <_sysctrl_init_sources>:
 * \brief Initializes clock generators
 *
 * All GCLK generators are running when this function returns.
 */
void _sysctrl_init_sources(void)
{
     fa8:	b510      	push	{r4, lr}
}

static inline void hri_sysctrl_write_XOSC32K_reg(const void *const hw, hri_sysctrl_xosc32k_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->XOSC32K.reg = data;
     faa:	4b14      	ldr	r3, [pc, #80]	; (ffc <_sysctrl_init_sources+0x54>)
     fac:	2402      	movs	r4, #2
     fae:	829c      	strh	r4, [r3, #20]
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
     fb0:	6a1a      	ldr	r2, [r3, #32]
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
     fb2:	6a19      	ldr	r1, [r3, #32]
	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
     fb4:	4812      	ldr	r0, [pc, #72]	; (1000 <_sysctrl_init_sources+0x58>)
     fb6:	4002      	ands	r2, r0
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
     fb8:	0f89      	lsrs	r1, r1, #30
     fba:	0789      	lsls	r1, r1, #30
	hri_sysctrl_write_OSC8M_reg(hw,
     fbc:	4811      	ldr	r0, [pc, #68]	; (1004 <_sysctrl_init_sources+0x5c>)
     fbe:	4301      	orrs	r1, r0
     fc0:	430a      	orrs	r2, r1
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
     fc2:	621a      	str	r2, [r3, #32]
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     fc4:	699a      	ldr	r2, [r3, #24]
     fc6:	4322      	orrs	r2, r4
     fc8:	619a      	str	r2, [r3, #24]
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
     fca:	7f1a      	ldrb	r2, [r3, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
     fcc:	211f      	movs	r1, #31
     fce:	400a      	ands	r2, r1
	((Sysctrl *)hw)->OSCULP32K.reg = data;
     fd0:	771a      	strb	r2, [r3, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_XOSC32KRDY) >> SYSCTRL_PCLKSR_XOSC32KRDY_Pos;
     fd2:	0019      	movs	r1, r3
	                                    (CONF_OSC32K_WRTLOCK << SYSCTRL_OSCULP32K_WRTLOCK_Pos));
#endif

#if CONF_XOSC32K_CONFIG == 1
#if CONF_XOSC32K_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_XOSC32KRDY_bit(hw))
     fd4:	2202      	movs	r2, #2
     fd6:	68cb      	ldr	r3, [r1, #12]
     fd8:	421a      	tst	r2, r3
     fda:	d0fc      	beq.n	fd6 <_sysctrl_init_sources+0x2e>
	((Sysctrl *)hw)->XOSC32K.reg |= SYSCTRL_XOSC32K_ONDEMAND;
     fdc:	4a07      	ldr	r2, [pc, #28]	; (ffc <_sysctrl_init_sources+0x54>)
     fde:	8a93      	ldrh	r3, [r2, #20]
     fe0:	2180      	movs	r1, #128	; 0x80
     fe2:	430b      	orrs	r3, r1
     fe4:	8293      	strh	r3, [r2, #20]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
     fe6:	0011      	movs	r1, r2
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
     fe8:	2208      	movs	r2, #8
     fea:	68cb      	ldr	r3, [r1, #12]
     fec:	421a      	tst	r2, r3
     fee:	d0fc      	beq.n	fea <_sysctrl_init_sources+0x42>
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
     ff0:	4a02      	ldr	r2, [pc, #8]	; (ffc <_sysctrl_init_sources+0x54>)
     ff2:	6a13      	ldr	r3, [r2, #32]
     ff4:	2180      	movs	r1, #128	; 0x80
     ff6:	430b      	orrs	r3, r1
     ff8:	6213      	str	r3, [r2, #32]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
     ffa:	bd10      	pop	{r4, pc}
     ffc:	40000800 	.word	0x40000800
    1000:	0fff0000 	.word	0x0fff0000
    1004:	00000302 	.word	0x00000302

00001008 <_sysctrl_init_referenced_generators>:
}

static inline void hri_sysctrl_write_DFLLCTRL_reg(const void *const hw, hri_sysctrl_dfllctrl_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    1008:	2202      	movs	r2, #2
    100a:	4b1c      	ldr	r3, [pc, #112]	; (107c <_sysctrl_init_referenced_generators+0x74>)
    100c:	849a      	strh	r2, [r3, #36]	; 0x24
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    100e:	0019      	movs	r1, r3
	hri_gclk_write_CLKCTRL_reg(GCLK,
	                           GCLK_CLKCTRL_ID(0) | GCLK_CLKCTRL_GEN(CONF_DFLL_GCLK) | (1 << GCLK_CLKCTRL_CLKEN_Pos));
#endif

	hri_sysctrl_write_DFLLCTRL_reg(hw, SYSCTRL_DFLLCTRL_ENABLE);
	while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    1010:	320e      	adds	r2, #14
    1012:	68cb      	ldr	r3, [r1, #12]
    1014:	421a      	tst	r2, r3
    1016:	d0fc      	beq.n	1012 <_sysctrl_init_referenced_generators+0xa>
}

static inline void hri_sysctrl_write_DFLLMUL_reg(const void *const hw, hri_sysctrl_dfllmul_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLMUL.reg = data;
    1018:	4a19      	ldr	r2, [pc, #100]	; (1080 <_sysctrl_init_referenced_generators+0x78>)
    101a:	4b18      	ldr	r3, [pc, #96]	; (107c <_sysctrl_init_referenced_generators+0x74>)
    101c:	62da      	str	r2, [r3, #44]	; 0x2c
		;

	hri_sysctrl_write_DFLLMUL_reg(hw,
	                              SYSCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | SYSCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | SYSCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    101e:	4b19      	ldr	r3, [pc, #100]	; (1084 <_sysctrl_init_referenced_generators+0x7c>)
    1020:	681b      	ldr	r3, [r3, #0]
    1022:	0e9b      	lsrs	r3, r3, #26
    1024:	2b3f      	cmp	r3, #63	; 0x3f
    1026:	d01f      	beq.n	1068 <_sysctrl_init_referenced_generators+0x60>
    1028:	029b      	lsls	r3, r3, #10
    102a:	2280      	movs	r2, #128	; 0x80
    102c:	0092      	lsls	r2, r2, #2
    102e:	4313      	orrs	r3, r2
	((Sysctrl *)hw)->DFLLVAL.reg = data;
    1030:	4a12      	ldr	r2, [pc, #72]	; (107c <_sysctrl_init_referenced_generators+0x74>)
    1032:	6293      	str	r3, [r2, #40]	; 0x28
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    1034:	2302      	movs	r3, #2
    1036:	8493      	strh	r3, [r2, #36]	; 0x24
	tmp = ((Sysctrl *)hw)->DFLLCTRL.reg;
    1038:	8c93      	ldrh	r3, [r2, #36]	; 0x24
	        | SYSCTRL_DPLLCTRLB_FILTER(CONF_DPLL_FILTER));
#endif

#if CONF_DFLL_CONFIG == 1
#if CONF_DFLL_ENABLE == 1
	if (hri_sysctrl_get_DFLLCTRL_MODE_bit(hw)) {
    103a:	075b      	lsls	r3, r3, #29
    103c:	d517      	bpl.n	106e <_sysctrl_init_referenced_generators+0x66>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    103e:	0011      	movs	r1, r2
	tmp &= mask;
    1040:	22d0      	movs	r2, #208	; 0xd0
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    1042:	68cb      	ldr	r3, [r1, #12]
	tmp &= mask;
    1044:	4013      	ands	r3, r2
		    = SYSCTRL_PCLKSR_DFLLRDY | SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC;
#else
		hri_sysctrl_pclksr_reg_t status_mask = SYSCTRL_PCLKSR_DFLLRDY;
#endif

		while (hri_sysctrl_get_PCLKSR_reg(hw, status_mask) != status_mask)
    1046:	2bd0      	cmp	r3, #208	; 0xd0
    1048:	d1fb      	bne.n	1042 <_sysctrl_init_referenced_generators+0x3a>
	((Sysctrl *)hw)->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ONDEMAND;
    104a:	4a0c      	ldr	r2, [pc, #48]	; (107c <_sysctrl_init_referenced_generators+0x74>)
    104c:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    104e:	2180      	movs	r1, #128	; 0x80
    1050:	430b      	orrs	r3, r1
    1052:	8493      	strh	r3, [r2, #36]	; 0x24
	return (((Gclk *)hw)->STATUS.reg & GCLK_STATUS_SYNCBUSY) >> GCLK_STATUS_SYNCBUSY_Pos;
    1054:	4a0c      	ldr	r2, [pc, #48]	; (1088 <_sysctrl_init_referenced_generators+0x80>)
    1056:	7853      	ldrb	r3, [r2, #1]
	hri_sysctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_get_STATUS_SYNCBUSY_bit(GCLK))
    1058:	09db      	lsrs	r3, r3, #7
    105a:	d1fc      	bne.n	1056 <_sysctrl_init_referenced_generators+0x4e>
	((Sysctrl *)hw)->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
    105c:	4a07      	ldr	r2, [pc, #28]	; (107c <_sysctrl_init_referenced_generators+0x74>)
    105e:	6993      	ldr	r3, [r2, #24]
    1060:	2102      	movs	r1, #2
    1062:	438b      	bics	r3, r1
    1064:	6193      	str	r3, [r2, #24]
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
    1066:	4770      	bx	lr
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    1068:	23fc      	movs	r3, #252	; 0xfc
    106a:	01db      	lsls	r3, r3, #7
    106c:	e7e0      	b.n	1030 <_sysctrl_init_referenced_generators+0x28>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    106e:	4903      	ldr	r1, [pc, #12]	; (107c <_sysctrl_init_referenced_generators+0x74>)
		while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    1070:	2210      	movs	r2, #16
    1072:	68cb      	ldr	r3, [r1, #12]
    1074:	421a      	tst	r2, r3
    1076:	d0fc      	beq.n	1072 <_sysctrl_init_referenced_generators+0x6a>
    1078:	e7e7      	b.n	104a <_sysctrl_init_referenced_generators+0x42>
    107a:	46c0      	nop			; (mov r8, r8)
    107c:	40000800 	.word	0x40000800
    1080:	04010000 	.word	0x04010000
    1084:	00806024 	.word	0x00806024
    1088:	40000c00 	.word	0x40000c00

0000108c <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    108c:	2000      	movs	r0, #0
    108e:	4770      	bx	lr

00001090 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    1090:	b570      	push	{r4, r5, r6, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    1092:	7c83      	ldrb	r3, [r0, #18]
    1094:	220f      	movs	r2, #15
    1096:	4013      	ands	r3, r2
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1098:	7cc1      	ldrb	r1, [r0, #19]

	if (!is_ctrl) {
    109a:	3a08      	subs	r2, #8
    109c:	400a      	ands	r2, r1
    109e:	2a01      	cmp	r2, #1
    10a0:	d00b      	beq.n	10ba <_usb_d_dev_handle_setup+0x2a>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    10a2:	015a      	lsls	r2, r3, #5
    10a4:	4919      	ldr	r1, [pc, #100]	; (110c <_usb_d_dev_handle_setup+0x7c>)
    10a6:	468c      	mov	ip, r1
    10a8:	4462      	add	r2, ip
    10aa:	2110      	movs	r1, #16
    10ac:	71d1      	strb	r1, [r2, #7]
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    10ae:	015b      	lsls	r3, r3, #5
    10b0:	4a17      	ldr	r2, [pc, #92]	; (1110 <_usb_d_dev_handle_setup+0x80>)
    10b2:	4694      	mov	ip, r2
    10b4:	4463      	add	r3, ip
    10b6:	7019      	strb	r1, [r3, #0]
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
}
    10b8:	bd70      	pop	{r4, r5, r6, pc}
	if (_usb_d_dev_ep_is_busy(ept)) {
    10ba:	064a      	lsls	r2, r1, #25
    10bc:	d50e      	bpl.n	10dc <_usb_d_dev_handle_setup+0x4c>
		ept->flags.bits.is_busy = 0;
    10be:	7cc2      	ldrb	r2, [r0, #19]
    10c0:	2140      	movs	r1, #64	; 0x40
    10c2:	438a      	bics	r2, r1
    10c4:	74c2      	strb	r2, [r0, #19]
    10c6:	015a      	lsls	r2, r3, #5
    10c8:	4c12      	ldr	r4, [pc, #72]	; (1114 <_usb_d_dev_handle_setup+0x84>)
    10ca:	46a4      	mov	ip, r4
    10cc:	4462      	add	r2, ip
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    10ce:	2580      	movs	r5, #128	; 0x80
    10d0:	2482      	movs	r4, #130	; 0x82
    10d2:	0064      	lsls	r4, r4, #1
    10d4:	5515      	strb	r5, [r2, r4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    10d6:	2406      	movs	r4, #6
    10d8:	34ff      	adds	r4, #255	; 0xff
    10da:	5511      	strb	r1, [r2, r4]
	ept->flags.bits.is_stalled = 0;
    10dc:	7cc2      	ldrb	r2, [r0, #19]
    10de:	2108      	movs	r1, #8
    10e0:	438a      	bics	r2, r1
    10e2:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    10e4:	490c      	ldr	r1, [pc, #48]	; (1118 <_usb_d_dev_handle_setup+0x88>)
    10e6:	015a      	lsls	r2, r3, #5
    10e8:	188c      	adds	r4, r1, r2
    10ea:	2500      	movs	r5, #0
    10ec:	72a5      	strb	r5, [r4, #10]
    10ee:	76a5      	strb	r5, [r4, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    10f0:	0013      	movs	r3, r2
    10f2:	4c06      	ldr	r4, [pc, #24]	; (110c <_usb_d_dev_handle_setup+0x7c>)
    10f4:	46a4      	mov	ip, r4
    10f6:	4463      	add	r3, ip
    10f8:	246f      	movs	r4, #111	; 0x6f
    10fa:	71dc      	strb	r4, [r3, #7]
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    10fc:	4b04      	ldr	r3, [pc, #16]	; (1110 <_usb_d_dev_handle_setup+0x80>)
    10fe:	469c      	mov	ip, r3
    1100:	4462      	add	r2, ip
    1102:	7014      	strb	r4, [r2, #0]
	dev_inst.ep_callbacks.setup(ept->ep);
    1104:	7c80      	ldrb	r0, [r0, #18]
    1106:	6e8b      	ldr	r3, [r1, #104]	; 0x68
    1108:	4798      	blx	r3
    110a:	e7d5      	b.n	10b8 <_usb_d_dev_handle_setup+0x28>
    110c:	41005100 	.word	0x41005100
    1110:	41005108 	.word	0x41005108
    1114:	41005000 	.word	0x41005000
    1118:	200000a0 	.word	0x200000a0

0000111c <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    111c:	b510      	push	{r4, lr}
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    111e:	2220      	movs	r2, #32
    1120:	408a      	lsls	r2, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    1122:	b2d2      	uxtb	r2, r2
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1124:	7c81      	ldrb	r1, [r0, #18]
    1126:	230f      	movs	r3, #15
    1128:	400b      	ands	r3, r1
    112a:	015b      	lsls	r3, r3, #5
    112c:	4905      	ldr	r1, [pc, #20]	; (1144 <_usb_d_dev_handle_stall+0x28>)
    112e:	468c      	mov	ip, r1
    1130:	4463      	add	r3, ip
    1132:	701a      	strb	r2, [r3, #0]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    1134:	6882      	ldr	r2, [r0, #8]
    1136:	7c80      	ldrb	r0, [r0, #18]
    1138:	4b03      	ldr	r3, [pc, #12]	; (1148 <_usb_d_dev_handle_stall+0x2c>)
    113a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    113c:	2101      	movs	r1, #1
    113e:	4798      	blx	r3
}
    1140:	bd10      	pop	{r4, pc}
    1142:	46c0      	nop			; (mov r8, r8)
    1144:	41005108 	.word	0x41005108
    1148:	200000a0 	.word	0x200000a0

0000114c <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    114c:	b510      	push	{r4, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    114e:	7c83      	ldrb	r3, [r0, #18]
    1150:	2bff      	cmp	r3, #255	; 0xff
    1152:	d002      	beq.n	115a <_usb_d_dev_trans_done+0xe>
    1154:	7cc2      	ldrb	r2, [r0, #19]
    1156:	0652      	lsls	r2, r2, #25
    1158:	d400      	bmi.n	115c <_usb_d_dev_trans_done+0x10>
		return;
	}
	ept->flags.bits.is_busy = 0;
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
}
    115a:	bd10      	pop	{r4, pc}
	ept->flags.bits.is_busy = 0;
    115c:	7cc2      	ldrb	r2, [r0, #19]
    115e:	2440      	movs	r4, #64	; 0x40
    1160:	43a2      	bics	r2, r4
    1162:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    1164:	6882      	ldr	r2, [r0, #8]
    1166:	4802      	ldr	r0, [pc, #8]	; (1170 <_usb_d_dev_trans_done+0x24>)
    1168:	6f04      	ldr	r4, [r0, #112]	; 0x70
    116a:	0018      	movs	r0, r3
    116c:	47a0      	blx	r4
    116e:	e7f4      	b.n	115a <_usb_d_dev_trans_done+0xe>
    1170:	200000a0 	.word	0x200000a0

00001174 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    1174:	b530      	push	{r4, r5, lr}
    1176:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1178:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    117a:	ac01      	add	r4, sp, #4
    117c:	2525      	movs	r5, #37	; 0x25
    117e:	7025      	strb	r5, [r4, #0]
    1180:	3525      	adds	r5, #37	; 0x25
    1182:	7065      	strb	r5, [r4, #1]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    1184:	2bff      	cmp	r3, #255	; 0xff
    1186:	d01b      	beq.n	11c0 <_usb_d_dev_trans_stop+0x4c>
    1188:	7cc4      	ldrb	r4, [r0, #19]
    118a:	0664      	lsls	r4, r4, #25
    118c:	d518      	bpl.n	11c0 <_usb_d_dev_trans_stop+0x4c>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    118e:	240f      	movs	r4, #15
    1190:	4023      	ands	r3, r4
		return;
	}
	/* Stop transfer */
	if (dir) {
    1192:	2900      	cmp	r1, #0
    1194:	d016      	beq.n	11c4 <_usb_d_dev_trans_stop+0x50>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1196:	015c      	lsls	r4, r3, #5
    1198:	4d0e      	ldr	r5, [pc, #56]	; (11d4 <_usb_d_dev_trans_stop+0x60>)
    119a:	46ac      	mov	ip, r5
    119c:	4464      	add	r4, ip
    119e:	2580      	movs	r5, #128	; 0x80
    11a0:	7125      	strb	r5, [r4, #4]
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    11a2:	ac01      	add	r4, sp, #4
    11a4:	5c64      	ldrb	r4, [r4, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    11a6:	0159      	lsls	r1, r3, #5
    11a8:	4d0a      	ldr	r5, [pc, #40]	; (11d4 <_usb_d_dev_trans_stop+0x60>)
    11aa:	46ac      	mov	ip, r5
    11ac:	4461      	add	r1, ip
    11ae:	71cc      	strb	r4, [r1, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    11b0:	015b      	lsls	r3, r3, #5
    11b2:	4909      	ldr	r1, [pc, #36]	; (11d8 <_usb_d_dev_trans_stop+0x64>)
    11b4:	468c      	mov	ip, r1
    11b6:	4463      	add	r3, ip
    11b8:	701c      	strb	r4, [r3, #0]
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
    11ba:	0011      	movs	r1, r2
    11bc:	4b07      	ldr	r3, [pc, #28]	; (11dc <_usb_d_dev_trans_stop+0x68>)
    11be:	4798      	blx	r3
}
    11c0:	b003      	add	sp, #12
    11c2:	bd30      	pop	{r4, r5, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    11c4:	015c      	lsls	r4, r3, #5
    11c6:	4d03      	ldr	r5, [pc, #12]	; (11d4 <_usb_d_dev_trans_stop+0x60>)
    11c8:	46ac      	mov	ip, r5
    11ca:	4464      	add	r4, ip
    11cc:	2540      	movs	r5, #64	; 0x40
    11ce:	7165      	strb	r5, [r4, #5]
    11d0:	e7e7      	b.n	11a2 <_usb_d_dev_trans_stop+0x2e>
    11d2:	46c0      	nop			; (mov r8, r8)
    11d4:	41005100 	.word	0x41005100
    11d8:	41005108 	.word	0x41005108
    11dc:	0000114d 	.word	0x0000114d

000011e0 <_usb_d_dev_handle_trfail>:
{
    11e0:	b570      	push	{r4, r5, r6, lr}
    11e2:	b082      	sub	sp, #8
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    11e4:	7c83      	ldrb	r3, [r0, #18]
    11e6:	220f      	movs	r2, #15
    11e8:	4013      	ands	r3, r2
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    11ea:	aa01      	add	r2, sp, #4
    11ec:	2404      	movs	r4, #4
    11ee:	7014      	strb	r4, [r2, #0]
    11f0:	3404      	adds	r4, #4
    11f2:	7054      	strb	r4, [r2, #1]
    11f4:	015d      	lsls	r5, r3, #5
	uint8_t            eptype
    11f6:	2900      	cmp	r1, #0
    11f8:	d031      	beq.n	125e <_usb_d_dev_handle_trfail+0x7e>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    11fa:	001a      	movs	r2, r3
    11fc:	3208      	adds	r2, #8
    11fe:	0152      	lsls	r2, r2, #5
    1200:	4c32      	ldr	r4, [pc, #200]	; (12cc <_usb_d_dev_handle_trfail+0xec>)
    1202:	5d14      	ldrb	r4, [r2, r4]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    1204:	0664      	lsls	r4, r4, #25
    1206:	0f64      	lsrs	r4, r4, #29
	st.reg = bank[bank_n].STATUS_BK.reg;
    1208:	010a      	lsls	r2, r1, #4
    120a:	1952      	adds	r2, r2, r5
    120c:	4d30      	ldr	r5, [pc, #192]	; (12d0 <_usb_d_dev_handle_trfail+0xf0>)
    120e:	18aa      	adds	r2, r5, r2
    1210:	7a95      	ldrb	r5, [r2, #10]
    1212:	b2ed      	uxtb	r5, r5
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    1214:	2c02      	cmp	r4, #2
    1216:	d02a      	beq.n	126e <_usb_d_dev_handle_trfail+0x8e>
	} else if (st.bit.ERRORFLOW) {
    1218:	07ac      	lsls	r4, r5, #30
    121a:	d541      	bpl.n	12a0 <_usb_d_dev_handle_trfail+0xc0>
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    121c:	7cc5      	ldrb	r5, [r0, #19]
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    121e:	7a94      	ldrb	r4, [r2, #10]
    1220:	2602      	movs	r6, #2
    1222:	43b4      	bics	r4, r6
    1224:	7294      	strb	r4, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    1226:	aa01      	add	r2, sp, #4
    1228:	5c54      	ldrb	r4, [r2, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    122a:	015a      	lsls	r2, r3, #5
    122c:	4e29      	ldr	r6, [pc, #164]	; (12d4 <_usb_d_dev_handle_trfail+0xf4>)
    122e:	46b4      	mov	ip, r6
    1230:	4462      	add	r2, ip
    1232:	71d4      	strb	r4, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1234:	015b      	lsls	r3, r3, #5
    1236:	4a28      	ldr	r2, [pc, #160]	; (12d8 <_usb_d_dev_handle_trfail+0xf8>)
    1238:	4694      	mov	ip, r2
    123a:	4463      	add	r3, ip
    123c:	701c      	strb	r4, [r3, #0]
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    123e:	2307      	movs	r3, #7
    1240:	402b      	ands	r3, r5
    1242:	2b01      	cmp	r3, #1
    1244:	d13f      	bne.n	12c6 <_usb_d_dev_handle_trfail+0xe6>
    1246:	7cc3      	ldrb	r3, [r0, #19]
    1248:	065b      	lsls	r3, r3, #25
    124a:	d53c      	bpl.n	12c6 <_usb_d_dev_handle_trfail+0xe6>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    124c:	7cc3      	ldrb	r3, [r0, #19]
    124e:	09db      	lsrs	r3, r3, #7
    1250:	4299      	cmp	r1, r3
    1252:	d038      	beq.n	12c6 <_usb_d_dev_handle_trfail+0xe6>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    1254:	2200      	movs	r2, #0
    1256:	0019      	movs	r1, r3
    1258:	4b20      	ldr	r3, [pc, #128]	; (12dc <_usb_d_dev_handle_trfail+0xfc>)
    125a:	4798      	blx	r3
    125c:	e033      	b.n	12c6 <_usb_d_dev_handle_trfail+0xe6>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    125e:	001a      	movs	r2, r3
    1260:	3208      	adds	r2, #8
    1262:	0152      	lsls	r2, r2, #5
    1264:	4c19      	ldr	r4, [pc, #100]	; (12cc <_usb_d_dev_handle_trfail+0xec>)
    1266:	5d14      	ldrb	r4, [r2, r4]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    1268:	2207      	movs	r2, #7
    126a:	4014      	ands	r4, r2
    126c:	e7cc      	b.n	1208 <_usb_d_dev_handle_trfail+0x28>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    126e:	07ec      	lsls	r4, r5, #31
    1270:	d5d2      	bpl.n	1218 <_usb_d_dev_handle_trfail+0x38>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    1272:	7a94      	ldrb	r4, [r2, #10]
    1274:	2501      	movs	r5, #1
    1276:	43ac      	bics	r4, r5
    1278:	7294      	strb	r4, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    127a:	aa01      	add	r2, sp, #4
    127c:	5c54      	ldrb	r4, [r2, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    127e:	015a      	lsls	r2, r3, #5
    1280:	4d14      	ldr	r5, [pc, #80]	; (12d4 <_usb_d_dev_handle_trfail+0xf4>)
    1282:	46ac      	mov	ip, r5
    1284:	4462      	add	r2, ip
    1286:	71d4      	strb	r4, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1288:	015b      	lsls	r3, r3, #5
    128a:	4a13      	ldr	r2, [pc, #76]	; (12d8 <_usb_d_dev_handle_trfail+0xf8>)
    128c:	4694      	mov	ip, r2
    128e:	4463      	add	r3, ip
    1290:	701c      	strb	r4, [r3, #0]
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    1292:	1e4b      	subs	r3, r1, #1
    1294:	4199      	sbcs	r1, r3
    1296:	b2c9      	uxtb	r1, r1
    1298:	2204      	movs	r2, #4
    129a:	4b10      	ldr	r3, [pc, #64]	; (12dc <_usb_d_dev_handle_trfail+0xfc>)
    129c:	4798      	blx	r3
    129e:	e012      	b.n	12c6 <_usb_d_dev_handle_trfail+0xe6>
	bank->STATUS_BK.reg     = 0;
    12a0:	005a      	lsls	r2, r3, #1
    12a2:	1852      	adds	r2, r2, r1
    12a4:	0112      	lsls	r2, r2, #4
    12a6:	480a      	ldr	r0, [pc, #40]	; (12d0 <_usb_d_dev_handle_trfail+0xf0>)
    12a8:	1882      	adds	r2, r0, r2
    12aa:	2000      	movs	r0, #0
    12ac:	7290      	strb	r0, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    12ae:	aa01      	add	r2, sp, #4
    12b0:	5c51      	ldrb	r1, [r2, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    12b2:	015a      	lsls	r2, r3, #5
    12b4:	4807      	ldr	r0, [pc, #28]	; (12d4 <_usb_d_dev_handle_trfail+0xf4>)
    12b6:	4684      	mov	ip, r0
    12b8:	4462      	add	r2, ip
    12ba:	71d1      	strb	r1, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    12bc:	015b      	lsls	r3, r3, #5
    12be:	4a06      	ldr	r2, [pc, #24]	; (12d8 <_usb_d_dev_handle_trfail+0xf8>)
    12c0:	4694      	mov	ip, r2
    12c2:	4463      	add	r3, ip
    12c4:	7019      	strb	r1, [r3, #0]
}
    12c6:	b002      	add	sp, #8
    12c8:	bd70      	pop	{r4, r5, r6, pc}
    12ca:	46c0      	nop			; (mov r8, r8)
    12cc:	41005000 	.word	0x41005000
    12d0:	200000a0 	.word	0x200000a0
    12d4:	41005100 	.word	0x41005100
    12d8:	41005108 	.word	0x41005108
    12dc:	00001175 	.word	0x00001175

000012e0 <_usb_d_dev_reset_epts>:
{
    12e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    12e2:	46c6      	mov	lr, r8
    12e4:	b500      	push	{lr}
    12e6:	4d0c      	ldr	r5, [pc, #48]	; (1318 <_usb_d_dev_reset_epts+0x38>)
    12e8:	002c      	movs	r4, r5
    12ea:	3474      	adds	r4, #116	; 0x74
    12ec:	3529      	adds	r5, #41	; 0x29
    12ee:	35ff      	adds	r5, #255	; 0xff
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    12f0:	4b0a      	ldr	r3, [pc, #40]	; (131c <_usb_d_dev_reset_epts+0x3c>)
    12f2:	4698      	mov	r8, r3
		dev_inst.ep[i].ep       = 0xFF;
    12f4:	27ff      	movs	r7, #255	; 0xff
		dev_inst.ep[i].flags.u8 = 0;
    12f6:	2600      	movs	r6, #0
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    12f8:	2103      	movs	r1, #3
    12fa:	0020      	movs	r0, r4
    12fc:	47c0      	blx	r8
		dev_inst.ep[i].ep       = 0xFF;
    12fe:	74a7      	strb	r7, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    1300:	74e6      	strb	r6, [r4, #19]
    1302:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    1304:	42ac      	cmp	r4, r5
    1306:	d1f7      	bne.n	12f8 <_usb_d_dev_reset_epts+0x18>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    1308:	2260      	movs	r2, #96	; 0x60
    130a:	2100      	movs	r1, #0
    130c:	4802      	ldr	r0, [pc, #8]	; (1318 <_usb_d_dev_reset_epts+0x38>)
    130e:	4b04      	ldr	r3, [pc, #16]	; (1320 <_usb_d_dev_reset_epts+0x40>)
    1310:	4798      	blx	r3
}
    1312:	bc04      	pop	{r2}
    1314:	4690      	mov	r8, r2
    1316:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1318:	200000a0 	.word	0x200000a0
    131c:	0000114d 	.word	0x0000114d
    1320:	00001e97 	.word	0x00001e97

00001324 <_usb_d_dev_in_next>:
{
    1324:	b5f0      	push	{r4, r5, r6, r7, lr}
    1326:	46c6      	mov	lr, r8
    1328:	b500      	push	{lr}
    132a:	0004      	movs	r4, r0
    132c:	000e      	movs	r6, r1
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    132e:	7c83      	ldrb	r3, [r0, #18]
    1330:	250f      	movs	r5, #15
    1332:	401d      	ands	r5, r3
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    1334:	2900      	cmp	r1, #0
    1336:	d100      	bne.n	133a <_usb_d_dev_in_next+0x16>
    1338:	e0aa      	b.n	1490 <_usb_d_dev_in_next+0x16c>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    133a:	016a      	lsls	r2, r5, #5
    133c:	4b5a      	ldr	r3, [pc, #360]	; (14a8 <_usb_d_dev_in_next+0x184>)
    133e:	189b      	adds	r3, r3, r2
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    1340:	6958      	ldr	r0, [r3, #20]
    1342:	0480      	lsls	r0, r0, #18
    1344:	0c80      	lsrs	r0, r0, #18
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    1346:	8a23      	ldrh	r3, [r4, #16]
    1348:	4a58      	ldr	r2, [pc, #352]	; (14ac <_usb_d_dev_in_next+0x188>)
    134a:	4293      	cmp	r3, r2
    134c:	d100      	bne.n	1350 <_usb_d_dev_in_next+0x2c>
    134e:	e09a      	b.n	1486 <_usb_d_dev_in_next+0x162>
    1350:	3b01      	subs	r3, #1
    1352:	b29a      	uxth	r2, r3
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    1354:	7ce3      	ldrb	r3, [r4, #19]
    1356:	2707      	movs	r7, #7
    1358:	401f      	ands	r7, r3
	if (isr) {
    135a:	2e00      	cmp	r6, #0
    135c:	d005      	beq.n	136a <_usb_d_dev_in_next+0x46>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    135e:	016b      	lsls	r3, r5, #5
    1360:	4953      	ldr	r1, [pc, #332]	; (14b0 <_usb_d_dev_in_next+0x18c>)
    1362:	468c      	mov	ip, r1
    1364:	4463      	add	r3, ip
    1366:	2102      	movs	r1, #2
    1368:	71d9      	strb	r1, [r3, #7]
	ept->trans_count += trans_count;
    136a:	68a3      	ldr	r3, [r4, #8]
    136c:	18c1      	adds	r1, r0, r3
    136e:	60a1      	str	r1, [r4, #8]
	if (ept->trans_count < ept->trans_size) {
    1370:	6863      	ldr	r3, [r4, #4]
    1372:	4299      	cmp	r1, r3
    1374:	d24a      	bcs.n	140c <_usb_d_dev_in_next+0xe8>
		trans_next = ept->trans_size - ept->trans_count;
    1376:	1a5b      	subs	r3, r3, r1
    1378:	b29b      	uxth	r3, r3
		if (ept->flags.bits.use_cache) {
    137a:	7ce2      	ldrb	r2, [r4, #19]
    137c:	0692      	lsls	r2, r2, #26
    137e:	d535      	bpl.n	13ec <_usb_d_dev_in_next+0xc8>
    1380:	8a22      	ldrh	r2, [r4, #16]
    1382:	1c10      	adds	r0, r2, #0
    1384:	b292      	uxth	r2, r2
    1386:	429a      	cmp	r2, r3
    1388:	d900      	bls.n	138c <_usb_d_dev_in_next+0x68>
    138a:	1c18      	adds	r0, r3, #0
    138c:	b283      	uxth	r3, r0
    138e:	4698      	mov	r8, r3
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    1390:	6823      	ldr	r3, [r4, #0]
    1392:	469c      	mov	ip, r3
    1394:	4461      	add	r1, ip
    1396:	4642      	mov	r2, r8
    1398:	68e0      	ldr	r0, [r4, #12]
    139a:	4b46      	ldr	r3, [pc, #280]	; (14b4 <_usb_d_dev_in_next+0x190>)
    139c:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    139e:	68e1      	ldr	r1, [r4, #12]
	bank->ADDR.reg          = addr;
    13a0:	016a      	lsls	r2, r5, #5
    13a2:	4b41      	ldr	r3, [pc, #260]	; (14a8 <_usb_d_dev_in_next+0x184>)
    13a4:	189b      	adds	r3, r3, r2
    13a6:	6119      	str	r1, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    13a8:	016a      	lsls	r2, r5, #5
    13aa:	4b3f      	ldr	r3, [pc, #252]	; (14a8 <_usb_d_dev_in_next+0x184>)
    13ac:	189b      	adds	r3, r3, r2
    13ae:	695a      	ldr	r2, [r3, #20]
    13b0:	4641      	mov	r1, r8
    13b2:	0489      	lsls	r1, r1, #18
    13b4:	0c89      	lsrs	r1, r1, #18
    13b6:	0b92      	lsrs	r2, r2, #14
    13b8:	0392      	lsls	r2, r2, #14
    13ba:	430a      	orrs	r2, r1
    13bc:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    13be:	695a      	ldr	r2, [r3, #20]
    13c0:	493d      	ldr	r1, [pc, #244]	; (14b8 <_usb_d_dev_in_next+0x194>)
    13c2:	400a      	ands	r2, r1
    13c4:	615a      	str	r2, [r3, #20]
	if (!isr) {
    13c6:	2e00      	cmp	r6, #0
    13c8:	d107      	bne.n	13da <_usb_d_dev_in_next+0xb6>
		if (is_ctrl) {
    13ca:	2f01      	cmp	r7, #1
    13cc:	d059      	beq.n	1482 <_usb_d_dev_in_next+0x15e>
			inten = USB_D_BANK1_INT_FLAGS;
    13ce:	224a      	movs	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    13d0:	016b      	lsls	r3, r5, #5
    13d2:	493a      	ldr	r1, [pc, #232]	; (14bc <_usb_d_dev_in_next+0x198>)
    13d4:	468c      	mov	ip, r1
    13d6:	4463      	add	r3, ip
    13d8:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    13da:	016d      	lsls	r5, r5, #5
    13dc:	4b34      	ldr	r3, [pc, #208]	; (14b0 <_usb_d_dev_in_next+0x18c>)
    13de:	469c      	mov	ip, r3
    13e0:	4465      	add	r5, ip
    13e2:	2380      	movs	r3, #128	; 0x80
    13e4:	716b      	strb	r3, [r5, #5]
}
    13e6:	bc04      	pop	{r2}
    13e8:	4690      	mov	r8, r2
    13ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    13ec:	1c1a      	adds	r2, r3, #0
    13ee:	2080      	movs	r0, #128	; 0x80
    13f0:	0180      	lsls	r0, r0, #6
    13f2:	4283      	cmp	r3, r0
    13f4:	d901      	bls.n	13fa <_usb_d_dev_in_next+0xd6>
    13f6:	4b32      	ldr	r3, [pc, #200]	; (14c0 <_usb_d_dev_in_next+0x19c>)
    13f8:	881a      	ldrh	r2, [r3, #0]
    13fa:	b293      	uxth	r3, r2
    13fc:	4698      	mov	r8, r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    13fe:	6823      	ldr	r3, [r4, #0]
    1400:	1859      	adds	r1, r3, r1
	bank->ADDR.reg          = addr;
    1402:	016a      	lsls	r2, r5, #5
    1404:	4b28      	ldr	r3, [pc, #160]	; (14a8 <_usb_d_dev_in_next+0x184>)
    1406:	189b      	adds	r3, r3, r2
    1408:	6119      	str	r1, [r3, #16]
    140a:	e7cd      	b.n	13a8 <_usb_d_dev_in_next+0x84>
	} else if (ept->flags.bits.need_zlp) {
    140c:	7ce3      	ldrb	r3, [r4, #19]
    140e:	06db      	lsls	r3, r3, #27
    1410:	d50f      	bpl.n	1432 <_usb_d_dev_in_next+0x10e>
		ept->flags.bits.need_zlp = 0;
    1412:	7ce3      	ldrb	r3, [r4, #19]
    1414:	2210      	movs	r2, #16
    1416:	4393      	bics	r3, r2
    1418:	74e3      	strb	r3, [r4, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    141a:	016a      	lsls	r2, r5, #5
    141c:	4b22      	ldr	r3, [pc, #136]	; (14a8 <_usb_d_dev_in_next+0x184>)
    141e:	189b      	adds	r3, r3, r2
    1420:	695a      	ldr	r2, [r3, #20]
    1422:	0b92      	lsrs	r2, r2, #14
    1424:	0392      	lsls	r2, r2, #14
    1426:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    1428:	695a      	ldr	r2, [r3, #20]
    142a:	4923      	ldr	r1, [pc, #140]	; (14b8 <_usb_d_dev_in_next+0x194>)
    142c:	400a      	ands	r2, r1
    142e:	615a      	str	r2, [r3, #20]
    1430:	e7c9      	b.n	13c6 <_usb_d_dev_in_next+0xa2>
	if (is_ctrl) {
    1432:	2f01      	cmp	r7, #1
    1434:	d00e      	beq.n	1454 <_usb_d_dev_in_next+0x130>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1436:	016d      	lsls	r5, r5, #5
    1438:	4b22      	ldr	r3, [pc, #136]	; (14c4 <_usb_d_dev_in_next+0x1a0>)
    143a:	469c      	mov	ip, r3
    143c:	4465      	add	r5, ip
    143e:	234a      	movs	r3, #74	; 0x4a
    1440:	702b      	strb	r3, [r5, #0]
	if (last_pkt == ept->size) {
    1442:	8a21      	ldrh	r1, [r4, #16]
    1444:	4002      	ands	r2, r0
    1446:	4291      	cmp	r1, r2
    1448:	d00b      	beq.n	1462 <_usb_d_dev_in_next+0x13e>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    144a:	2100      	movs	r1, #0
    144c:	0020      	movs	r0, r4
    144e:	4b1e      	ldr	r3, [pc, #120]	; (14c8 <_usb_d_dev_in_next+0x1a4>)
    1450:	4798      	blx	r3
	return;
    1452:	e7c8      	b.n	13e6 <_usb_d_dev_in_next+0xc2>
    1454:	016d      	lsls	r5, r5, #5
    1456:	4b1b      	ldr	r3, [pc, #108]	; (14c4 <_usb_d_dev_in_next+0x1a0>)
    1458:	469c      	mov	ip, r3
    145a:	4465      	add	r5, ip
    145c:	234b      	movs	r3, #75	; 0x4b
    145e:	702b      	strb	r3, [r5, #0]
    1460:	e7ef      	b.n	1442 <_usb_d_dev_in_next+0x11e>
		ept->flags.bits.is_busy = 0;
    1462:	7ce3      	ldrb	r3, [r4, #19]
    1464:	2240      	movs	r2, #64	; 0x40
    1466:	4393      	bics	r3, r2
    1468:	74e3      	strb	r3, [r4, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    146a:	7ca0      	ldrb	r0, [r4, #18]
    146c:	4b0e      	ldr	r3, [pc, #56]	; (14a8 <_usb_d_dev_in_next+0x184>)
    146e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    1470:	68a1      	ldr	r1, [r4, #8]
    1472:	4798      	blx	r3
    1474:	2800      	cmp	r0, #0
    1476:	d1b6      	bne.n	13e6 <_usb_d_dev_in_next+0xc2>
		ept->flags.bits.is_busy = 1;
    1478:	7ce3      	ldrb	r3, [r4, #19]
    147a:	2240      	movs	r2, #64	; 0x40
    147c:	4313      	orrs	r3, r2
    147e:	74e3      	strb	r3, [r4, #19]
    1480:	e7e3      	b.n	144a <_usb_d_dev_in_next+0x126>
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    1482:	224e      	movs	r2, #78	; 0x4e
    1484:	e7a4      	b.n	13d0 <_usb_d_dev_in_next+0xac>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    1486:	7ce7      	ldrb	r7, [r4, #19]
    1488:	2307      	movs	r3, #7
    148a:	401f      	ands	r7, r3
    148c:	4a07      	ldr	r2, [pc, #28]	; (14ac <_usb_d_dev_in_next+0x188>)
    148e:	e766      	b.n	135e <_usb_d_dev_in_next+0x3a>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    1490:	8a03      	ldrh	r3, [r0, #16]
    1492:	4a06      	ldr	r2, [pc, #24]	; (14ac <_usb_d_dev_in_next+0x188>)
    1494:	2000      	movs	r0, #0
    1496:	4293      	cmp	r3, r2
    1498:	d000      	beq.n	149c <_usb_d_dev_in_next+0x178>
    149a:	e759      	b.n	1350 <_usb_d_dev_in_next+0x2c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    149c:	7ce3      	ldrb	r3, [r4, #19]
    149e:	2707      	movs	r7, #7
    14a0:	401f      	ands	r7, r3
    14a2:	2000      	movs	r0, #0
    14a4:	4a01      	ldr	r2, [pc, #4]	; (14ac <_usb_d_dev_in_next+0x188>)
    14a6:	e760      	b.n	136a <_usb_d_dev_in_next+0x46>
    14a8:	200000a0 	.word	0x200000a0
    14ac:	000003ff 	.word	0x000003ff
    14b0:	41005100 	.word	0x41005100
    14b4:	00001e85 	.word	0x00001e85
    14b8:	f0003fff 	.word	0xf0003fff
    14bc:	41005109 	.word	0x41005109
    14c0:	00001f70 	.word	0x00001f70
    14c4:	41005108 	.word	0x41005108
    14c8:	0000114d 	.word	0x0000114d

000014cc <_usb_d_dev_out_next>:
{
    14cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    14ce:	46de      	mov	lr, fp
    14d0:	4657      	mov	r7, sl
    14d2:	464e      	mov	r6, r9
    14d4:	4645      	mov	r5, r8
    14d6:	b5e0      	push	{r5, r6, r7, lr}
    14d8:	0004      	movs	r4, r0
    14da:	4688      	mov	r8, r1
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    14dc:	7c83      	ldrb	r3, [r0, #18]
    14de:	250f      	movs	r5, #15
    14e0:	401d      	ands	r5, r3
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    14e2:	2900      	cmp	r1, #0
    14e4:	d057      	beq.n	1596 <_usb_d_dev_out_next+0xca>
    14e6:	016a      	lsls	r2, r5, #5
    14e8:	4b7d      	ldr	r3, [pc, #500]	; (16e0 <_usb_d_dev_out_next+0x214>)
    14ea:	189b      	adds	r3, r3, r2
    14ec:	685a      	ldr	r2, [r3, #4]
    14ee:	0112      	lsls	r2, r2, #4
    14f0:	0c92      	lsrs	r2, r2, #18
    14f2:	4692      	mov	sl, r2
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    14f4:	685f      	ldr	r7, [r3, #4]
    14f6:	04bf      	lsls	r7, r7, #18
    14f8:	0cbf      	lsrs	r7, r7, #18
    14fa:	46bb      	mov	fp, r7
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    14fc:	8a06      	ldrh	r6, [r0, #16]
    14fe:	4b79      	ldr	r3, [pc, #484]	; (16e4 <_usb_d_dev_out_next+0x218>)
    1500:	429e      	cmp	r6, r3
    1502:	d100      	bne.n	1506 <_usb_d_dev_out_next+0x3a>
    1504:	e0cd      	b.n	16a2 <_usb_d_dev_out_next+0x1d6>
    1506:	3e01      	subs	r6, #1
    1508:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    150a:	465f      	mov	r7, fp
    150c:	4037      	ands	r7, r6
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    150e:	7ce3      	ldrb	r3, [r4, #19]
    1510:	2207      	movs	r2, #7
    1512:	401a      	ands	r2, r3
    1514:	4691      	mov	r9, r2
	if (isr) {
    1516:	4643      	mov	r3, r8
    1518:	2b00      	cmp	r3, #0
    151a:	d005      	beq.n	1528 <_usb_d_dev_out_next+0x5c>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    151c:	016b      	lsls	r3, r5, #5
    151e:	4a72      	ldr	r2, [pc, #456]	; (16e8 <_usb_d_dev_out_next+0x21c>)
    1520:	4694      	mov	ip, r2
    1522:	4463      	add	r3, ip
    1524:	2201      	movs	r2, #1
    1526:	71da      	strb	r2, [r3, #7]
	if (ept->flags.bits.use_cache && ept->trans_size) {
    1528:	7ce3      	ldrb	r3, [r4, #19]
    152a:	069b      	lsls	r3, r3, #26
    152c:	d50f      	bpl.n	154e <_usb_d_dev_out_next+0x82>
    152e:	6863      	ldr	r3, [r4, #4]
    1530:	2b00      	cmp	r3, #0
    1532:	d039      	beq.n	15a8 <_usb_d_dev_out_next+0xdc>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    1534:	68a0      	ldr	r0, [r4, #8]
    1536:	1a1b      	subs	r3, r3, r0
    1538:	b29b      	uxth	r3, r3
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    153a:	6822      	ldr	r2, [r4, #0]
    153c:	4694      	mov	ip, r2
    153e:	4460      	add	r0, ip
    1540:	68e1      	ldr	r1, [r4, #12]
    1542:	001a      	movs	r2, r3
    1544:	42bb      	cmp	r3, r7
    1546:	d900      	bls.n	154a <_usb_d_dev_out_next+0x7e>
    1548:	003a      	movs	r2, r7
    154a:	4b68      	ldr	r3, [pc, #416]	; (16ec <_usb_d_dev_out_next+0x220>)
    154c:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    154e:	6863      	ldr	r3, [r4, #4]
    1550:	2b00      	cmp	r3, #0
    1552:	d029      	beq.n	15a8 <_usb_d_dev_out_next+0xdc>
	} else if (isr && last_pkt < ept->size) {
    1554:	4642      	mov	r2, r8
    1556:	2a00      	cmp	r2, #0
    1558:	d042      	beq.n	15e0 <_usb_d_dev_out_next+0x114>
    155a:	8a22      	ldrh	r2, [r4, #16]
    155c:	42ba      	cmp	r2, r7
    155e:	d93f      	bls.n	15e0 <_usb_d_dev_out_next+0x114>
		ept->flags.bits.need_zlp = 0;
    1560:	7ce3      	ldrb	r3, [r4, #19]
    1562:	2210      	movs	r2, #16
    1564:	4393      	bics	r3, r2
    1566:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    1568:	68a3      	ldr	r3, [r4, #8]
    156a:	445b      	add	r3, fp
    156c:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    156e:	464b      	mov	r3, r9
    1570:	2b01      	cmp	r3, #1
    1572:	d100      	bne.n	1576 <_usb_d_dev_out_next+0xaa>
    1574:	e087      	b.n	1686 <_usb_d_dev_out_next+0x1ba>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1576:	016b      	lsls	r3, r5, #5
    1578:	4a5d      	ldr	r2, [pc, #372]	; (16f0 <_usb_d_dev_out_next+0x224>)
    157a:	4694      	mov	ip, r2
    157c:	4463      	add	r3, ip
    157e:	2225      	movs	r2, #37	; 0x25
    1580:	701a      	strb	r2, [r3, #0]
	if (0 == epn) {
    1582:	2d00      	cmp	r5, #0
    1584:	d102      	bne.n	158c <_usb_d_dev_out_next+0xc0>
	bank->ADDR.reg          = addr;
    1586:	4b56      	ldr	r3, [pc, #344]	; (16e0 <_usb_d_dev_out_next+0x214>)
    1588:	68e2      	ldr	r2, [r4, #12]
    158a:	601a      	str	r2, [r3, #0]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    158c:	2100      	movs	r1, #0
    158e:	0020      	movs	r0, r4
    1590:	4b58      	ldr	r3, [pc, #352]	; (16f4 <_usb_d_dev_out_next+0x228>)
    1592:	4798      	blx	r3
	return;
    1594:	e059      	b.n	164a <_usb_d_dev_out_next+0x17e>
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    1596:	8a06      	ldrh	r6, [r0, #16]
    1598:	4b52      	ldr	r3, [pc, #328]	; (16e4 <_usb_d_dev_out_next+0x218>)
    159a:	429e      	cmp	r6, r3
    159c:	d100      	bne.n	15a0 <_usb_d_dev_out_next+0xd4>
    159e:	e08e      	b.n	16be <_usb_d_dev_out_next+0x1f2>
    15a0:	2300      	movs	r3, #0
    15a2:	469b      	mov	fp, r3
    15a4:	469a      	mov	sl, r3
    15a6:	e7ae      	b.n	1506 <_usb_d_dev_out_next+0x3a>
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    15a8:	7ce3      	ldrb	r3, [r4, #19]
    15aa:	06db      	lsls	r3, r3, #27
    15ac:	d400      	bmi.n	15b0 <_usb_d_dev_out_next+0xe4>
    15ae:	e07f      	b.n	16b0 <_usb_d_dev_out_next+0x1e4>
		ept->flags.bits.need_zlp  = 0;
    15b0:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    15b2:	2210      	movs	r2, #16
    15b4:	4393      	bics	r3, r2
    15b6:	2220      	movs	r2, #32
    15b8:	4313      	orrs	r3, r2
    15ba:	74e3      	strb	r3, [r4, #19]
	bank->ADDR.reg          = addr;
    15bc:	4a48      	ldr	r2, [pc, #288]	; (16e0 <_usb_d_dev_out_next+0x214>)
    15be:	016b      	lsls	r3, r5, #5
    15c0:	68e1      	ldr	r1, [r4, #12]
    15c2:	5099      	str	r1, [r3, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    15c4:	8a21      	ldrh	r1, [r4, #16]
    15c6:	18d3      	adds	r3, r2, r3
    15c8:	685a      	ldr	r2, [r3, #4]
    15ca:	0489      	lsls	r1, r1, #18
    15cc:	0909      	lsrs	r1, r1, #4
    15ce:	484a      	ldr	r0, [pc, #296]	; (16f8 <_usb_d_dev_out_next+0x22c>)
    15d0:	4002      	ands	r2, r0
    15d2:	430a      	orrs	r2, r1
    15d4:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    15d6:	685a      	ldr	r2, [r3, #4]
    15d8:	0b92      	lsrs	r2, r2, #14
    15da:	0392      	lsls	r2, r2, #14
    15dc:	605a      	str	r2, [r3, #4]
    15de:	e022      	b.n	1626 <_usb_d_dev_out_next+0x15a>
		ept->trans_count += trans_size;
    15e0:	68a2      	ldr	r2, [r4, #8]
    15e2:	4452      	add	r2, sl
    15e4:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    15e6:	4293      	cmp	r3, r2
    15e8:	d9c1      	bls.n	156e <_usb_d_dev_out_next+0xa2>
			trans_next = ept->trans_size - ept->trans_count;
    15ea:	1a9b      	subs	r3, r3, r2
    15ec:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    15ee:	7ce1      	ldrb	r1, [r4, #19]
    15f0:	0689      	lsls	r1, r1, #26
    15f2:	d530      	bpl.n	1656 <_usb_d_dev_out_next+0x18a>
    15f4:	8a22      	ldrh	r2, [r4, #16]
    15f6:	1c11      	adds	r1, r2, #0
    15f8:	b292      	uxth	r2, r2
    15fa:	429a      	cmp	r2, r3
    15fc:	d900      	bls.n	1600 <_usb_d_dev_out_next+0x134>
    15fe:	1c19      	adds	r1, r3, #0
    1600:	b28b      	uxth	r3, r1
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    1602:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    1604:	016a      	lsls	r2, r5, #5
    1606:	4936      	ldr	r1, [pc, #216]	; (16e0 <_usb_d_dev_out_next+0x214>)
    1608:	5050      	str	r0, [r2, r1]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    160a:	016a      	lsls	r2, r5, #5
    160c:	4934      	ldr	r1, [pc, #208]	; (16e0 <_usb_d_dev_out_next+0x214>)
    160e:	1889      	adds	r1, r1, r2
    1610:	684a      	ldr	r2, [r1, #4]
    1612:	049b      	lsls	r3, r3, #18
    1614:	091b      	lsrs	r3, r3, #4
    1616:	4838      	ldr	r0, [pc, #224]	; (16f8 <_usb_d_dev_out_next+0x22c>)
    1618:	4002      	ands	r2, r0
    161a:	4313      	orrs	r3, r2
    161c:	604b      	str	r3, [r1, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    161e:	684b      	ldr	r3, [r1, #4]
    1620:	0b9b      	lsrs	r3, r3, #14
    1622:	039b      	lsls	r3, r3, #14
    1624:	604b      	str	r3, [r1, #4]
	if (!isr) {
    1626:	4643      	mov	r3, r8
    1628:	2b00      	cmp	r3, #0
    162a:	d108      	bne.n	163e <_usb_d_dev_out_next+0x172>
			inten = USB_D_BANK0_INT_FLAGS;
    162c:	2225      	movs	r2, #37	; 0x25
		if (is_ctrl) {
    162e:	464b      	mov	r3, r9
    1630:	2b01      	cmp	r3, #1
    1632:	d02f      	beq.n	1694 <_usb_d_dev_out_next+0x1c8>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    1634:	016b      	lsls	r3, r5, #5
    1636:	4931      	ldr	r1, [pc, #196]	; (16fc <_usb_d_dev_out_next+0x230>)
    1638:	468c      	mov	ip, r1
    163a:	4463      	add	r3, ip
    163c:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    163e:	016d      	lsls	r5, r5, #5
    1640:	4b29      	ldr	r3, [pc, #164]	; (16e8 <_usb_d_dev_out_next+0x21c>)
    1642:	469c      	mov	ip, r3
    1644:	4465      	add	r5, ip
    1646:	2340      	movs	r3, #64	; 0x40
    1648:	712b      	strb	r3, [r5, #4]
}
    164a:	bc3c      	pop	{r2, r3, r4, r5}
    164c:	4690      	mov	r8, r2
    164e:	4699      	mov	r9, r3
    1650:	46a2      	mov	sl, r4
    1652:	46ab      	mov	fp, r5
    1654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if (trans_next > ept->size) {
    1656:	8a21      	ldrh	r1, [r4, #16]
    1658:	428b      	cmp	r3, r1
    165a:	d90a      	bls.n	1672 <_usb_d_dev_out_next+0x1a6>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    165c:	2180      	movs	r1, #128	; 0x80
    165e:	0189      	lsls	r1, r1, #6
    1660:	428b      	cmp	r3, r1
    1662:	d80d      	bhi.n	1680 <_usb_d_dev_out_next+0x1b4>
    1664:	43b3      	bics	r3, r6
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    1666:	6821      	ldr	r1, [r4, #0]
    1668:	188a      	adds	r2, r1, r2
	bank->ADDR.reg          = addr;
    166a:	0169      	lsls	r1, r5, #5
    166c:	481c      	ldr	r0, [pc, #112]	; (16e0 <_usb_d_dev_out_next+0x214>)
    166e:	500a      	str	r2, [r1, r0]
    1670:	e7cb      	b.n	160a <_usb_d_dev_out_next+0x13e>
				} else if (trans_next < ept->size) {
    1672:	428b      	cmp	r3, r1
    1674:	d2f7      	bcs.n	1666 <_usb_d_dev_out_next+0x19a>
					ept->flags.bits.use_cache = 1;
    1676:	7ce1      	ldrb	r1, [r4, #19]
    1678:	2020      	movs	r0, #32
    167a:	4301      	orrs	r1, r0
    167c:	74e1      	strb	r1, [r4, #19]
    167e:	e7f2      	b.n	1666 <_usb_d_dev_out_next+0x19a>
						trans_next = USB_D_DEV_TRANS_MAX;
    1680:	2380      	movs	r3, #128	; 0x80
    1682:	019b      	lsls	r3, r3, #6
    1684:	e7ef      	b.n	1666 <_usb_d_dev_out_next+0x19a>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1686:	016b      	lsls	r3, r5, #5
    1688:	4a19      	ldr	r2, [pc, #100]	; (16f0 <_usb_d_dev_out_next+0x224>)
    168a:	4694      	mov	ip, r2
    168c:	4463      	add	r3, ip
    168e:	222d      	movs	r2, #45	; 0x2d
    1690:	701a      	strb	r2, [r3, #0]
    1692:	e776      	b.n	1582 <_usb_d_dev_out_next+0xb6>
	bank->STATUS_BK.reg     = 0;
    1694:	016a      	lsls	r2, r5, #5
    1696:	4b12      	ldr	r3, [pc, #72]	; (16e0 <_usb_d_dev_out_next+0x214>)
    1698:	189b      	adds	r3, r3, r2
    169a:	2200      	movs	r2, #0
    169c:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    169e:	322d      	adds	r2, #45	; 0x2d
    16a0:	e7c8      	b.n	1634 <_usb_d_dev_out_next+0x168>
	uint16_t           last_pkt   = last_trans & size_mask;
    16a2:	05bf      	lsls	r7, r7, #22
    16a4:	0dbf      	lsrs	r7, r7, #22
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    16a6:	7cc3      	ldrb	r3, [r0, #19]
    16a8:	2207      	movs	r2, #7
    16aa:	401a      	ands	r2, r3
    16ac:	4691      	mov	r9, r2
    16ae:	e735      	b.n	151c <_usb_d_dev_out_next+0x50>
	} else if (isr && last_pkt < ept->size) {
    16b0:	4643      	mov	r3, r8
    16b2:	2b00      	cmp	r3, #0
    16b4:	d10c      	bne.n	16d0 <_usb_d_dev_out_next+0x204>
		ept->trans_count += trans_size;
    16b6:	68a3      	ldr	r3, [r4, #8]
    16b8:	4453      	add	r3, sl
    16ba:	60a3      	str	r3, [r4, #8]
    16bc:	e757      	b.n	156e <_usb_d_dev_out_next+0xa2>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    16be:	7cc3      	ldrb	r3, [r0, #19]
    16c0:	2207      	movs	r2, #7
    16c2:	401a      	ands	r2, r3
    16c4:	4691      	mov	r9, r2
	uint16_t           last_pkt   = last_trans & size_mask;
    16c6:	2700      	movs	r7, #0
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    16c8:	2300      	movs	r3, #0
    16ca:	469b      	mov	fp, r3
    16cc:	469a      	mov	sl, r3
    16ce:	e72b      	b.n	1528 <_usb_d_dev_out_next+0x5c>
	} else if (isr && last_pkt < ept->size) {
    16d0:	8a23      	ldrh	r3, [r4, #16]
    16d2:	42bb      	cmp	r3, r7
    16d4:	d900      	bls.n	16d8 <_usb_d_dev_out_next+0x20c>
    16d6:	e743      	b.n	1560 <_usb_d_dev_out_next+0x94>
		ept->trans_count += trans_size;
    16d8:	68a3      	ldr	r3, [r4, #8]
    16da:	4453      	add	r3, sl
    16dc:	60a3      	str	r3, [r4, #8]
    16de:	e746      	b.n	156e <_usb_d_dev_out_next+0xa2>
    16e0:	200000a0 	.word	0x200000a0
    16e4:	000003ff 	.word	0x000003ff
    16e8:	41005100 	.word	0x41005100
    16ec:	00001e85 	.word	0x00001e85
    16f0:	41005108 	.word	0x41005108
    16f4:	0000114d 	.word	0x0000114d
    16f8:	f0003fff 	.word	0xf0003fff
    16fc:	41005109 	.word	0x41005109

00001700 <_usb_d_dev_init>:
{
    1700:	b510      	push	{r4, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    1702:	4b31      	ldr	r3, [pc, #196]	; (17c8 <_usb_d_dev_init+0xc8>)
    1704:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    1706:	07db      	lsls	r3, r3, #31
    1708:	d41f      	bmi.n	174a <_usb_d_dev_init+0x4a>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    170a:	492f      	ldr	r1, [pc, #188]	; (17c8 <_usb_d_dev_init+0xc8>)
    170c:	2203      	movs	r2, #3
    170e:	788b      	ldrb	r3, [r1, #2]
    1710:	4213      	tst	r3, r2
    1712:	d1fc      	bne.n	170e <_usb_d_dev_init+0xe>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    1714:	4b2c      	ldr	r3, [pc, #176]	; (17c8 <_usb_d_dev_init+0xc8>)
    1716:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    1718:	079b      	lsls	r3, r3, #30
    171a:	d50e      	bpl.n	173a <_usb_d_dev_init+0x3a>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    171c:	4a2a      	ldr	r2, [pc, #168]	; (17c8 <_usb_d_dev_init+0xc8>)
    171e:	7813      	ldrb	r3, [r2, #0]
    1720:	2102      	movs	r1, #2
    1722:	438b      	bics	r3, r1
    1724:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1726:	0011      	movs	r1, r2
    1728:	2203      	movs	r2, #3
    172a:	788b      	ldrb	r3, [r1, #2]
    172c:	4213      	tst	r3, r2
    172e:	d1fc      	bne.n	172a <_usb_d_dev_init+0x2a>
    1730:	4925      	ldr	r1, [pc, #148]	; (17c8 <_usb_d_dev_init+0xc8>)
    1732:	2202      	movs	r2, #2
    1734:	788b      	ldrb	r3, [r1, #2]
    1736:	4213      	tst	r3, r2
    1738:	d1fc      	bne.n	1734 <_usb_d_dev_init+0x34>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    173a:	2201      	movs	r2, #1
    173c:	4b22      	ldr	r3, [pc, #136]	; (17c8 <_usb_d_dev_init+0xc8>)
    173e:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1740:	0019      	movs	r1, r3
    1742:	3202      	adds	r2, #2
    1744:	788b      	ldrb	r3, [r1, #2]
    1746:	4213      	tst	r3, r2
    1748:	d1fc      	bne.n	1744 <_usb_d_dev_init+0x44>
    174a:	491f      	ldr	r1, [pc, #124]	; (17c8 <_usb_d_dev_init+0xc8>)
    174c:	2201      	movs	r2, #1
    174e:	788b      	ldrb	r3, [r1, #2]
    1750:	4213      	tst	r3, r2
    1752:	d1fc      	bne.n	174e <_usb_d_dev_init+0x4e>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    1754:	4b1d      	ldr	r3, [pc, #116]	; (17cc <_usb_d_dev_init+0xcc>)
    1756:	4a1e      	ldr	r2, [pc, #120]	; (17d0 <_usb_d_dev_init+0xd0>)
    1758:	661a      	str	r2, [r3, #96]	; 0x60
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    175a:	665a      	str	r2, [r3, #100]	; 0x64
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    175c:	669a      	str	r2, [r3, #104]	; 0x68
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    175e:	66da      	str	r2, [r3, #108]	; 0x6c
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    1760:	671a      	str	r2, [r3, #112]	; 0x70
	_usb_d_dev_reset_epts();
    1762:	4b1c      	ldr	r3, [pc, #112]	; (17d4 <_usb_d_dev_init+0xd4>)
    1764:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    1766:	4b1c      	ldr	r3, [pc, #112]	; (17d8 <_usb_d_dev_init+0xd8>)
    1768:	681b      	ldr	r3, [r3, #0]
    176a:	0b5a      	lsrs	r2, r3, #13
	uint32_t pad_transn
    176c:	211f      	movs	r1, #31
    176e:	400a      	ands	r2, r1
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    1770:	0c98      	lsrs	r0, r3, #18
	uint32_t pad_transp
    1772:	4001      	ands	r1, r0
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    1774:	019b      	lsls	r3, r3, #6
    1776:	0f5b      	lsrs	r3, r3, #29
	if (pad_transn == 0x1F) {
    1778:	2a1f      	cmp	r2, #31
    177a:	d01f      	beq.n	17bc <_usb_d_dev_init+0xbc>
	if (pad_transp == 0x1F) {
    177c:	291f      	cmp	r1, #31
    177e:	d01f      	beq.n	17c0 <_usb_d_dev_init+0xc0>
	if (pad_trim == 0x7) {
    1780:	2b07      	cmp	r3, #7
    1782:	d01f      	beq.n	17c4 <_usb_d_dev_init+0xc4>
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    1784:	0192      	lsls	r2, r2, #6
    1786:	430a      	orrs	r2, r1
    1788:	031b      	lsls	r3, r3, #12
    178a:	4313      	orrs	r3, r2
    178c:	4a0e      	ldr	r2, [pc, #56]	; (17c8 <_usb_d_dev_init+0xc8>)
    178e:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    1790:	78d3      	ldrb	r3, [r2, #3]
    1792:	2103      	movs	r1, #3
    1794:	430b      	orrs	r3, r1
    1796:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    1798:	78d3      	ldrb	r3, [r2, #3]
    179a:	210c      	movs	r1, #12
    179c:	430b      	orrs	r3, r1
    179e:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
    17a0:	2304      	movs	r3, #4
    17a2:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    17a4:	0011      	movs	r1, r2
    17a6:	2203      	movs	r2, #3
    17a8:	788b      	ldrb	r3, [r1, #2]
    17aa:	4213      	tst	r3, r2
    17ac:	d1fc      	bne.n	17a8 <_usb_d_dev_init+0xa8>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    17ae:	4b06      	ldr	r3, [pc, #24]	; (17c8 <_usb_d_dev_init+0xc8>)
    17b0:	4a06      	ldr	r2, [pc, #24]	; (17cc <_usb_d_dev_init+0xcc>)
    17b2:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    17b4:	2201      	movs	r2, #1
    17b6:	811a      	strh	r2, [r3, #8]
}
    17b8:	2000      	movs	r0, #0
    17ba:	bd10      	pop	{r4, pc}
		pad_transn = 5;
    17bc:	3a1a      	subs	r2, #26
    17be:	e7dd      	b.n	177c <_usb_d_dev_init+0x7c>
		pad_transp = 29;
    17c0:	3902      	subs	r1, #2
    17c2:	e7dd      	b.n	1780 <_usb_d_dev_init+0x80>
		pad_trim = 5;
    17c4:	3b02      	subs	r3, #2
    17c6:	e7dd      	b.n	1784 <_usb_d_dev_init+0x84>
    17c8:	41005000 	.word	0x41005000
    17cc:	200000a0 	.word	0x200000a0
    17d0:	0000108d 	.word	0x0000108d
    17d4:	000012e1 	.word	0x000012e1
    17d8:	00806024 	.word	0x00806024

000017dc <_usb_d_dev_ep_stall>:
{
    17dc:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    17de:	230f      	movs	r3, #15
    17e0:	4003      	ands	r3, r0
    17e2:	b240      	sxtb	r0, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    17e4:	0fc4      	lsrs	r4, r0, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    17e6:	2b00      	cmp	r3, #0
    17e8:	d009      	beq.n	17fe <_usb_d_dev_ep_stall+0x22>
    17ea:	001a      	movs	r2, r3
    17ec:	2800      	cmp	r0, #0
    17ee:	db04      	blt.n	17fa <_usb_d_dev_ep_stall+0x1e>
	if (epn > CONF_USB_D_MAX_EP_N) {
    17f0:	2b02      	cmp	r3, #2
    17f2:	d905      	bls.n	1800 <_usb_d_dev_ep_stall+0x24>
		return -USB_ERR_PARAM;
    17f4:	2012      	movs	r0, #18
    17f6:	4240      	negs	r0, r0
    17f8:	e019      	b.n	182e <_usb_d_dev_ep_stall+0x52>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    17fa:	1c9a      	adds	r2, r3, #2
    17fc:	e7f8      	b.n	17f0 <_usb_d_dev_ep_stall+0x14>
	return &dev_inst.ep[ep_index];
    17fe:	2200      	movs	r2, #0
	if (USB_EP_STALL_SET == ctrl) {
    1800:	2901      	cmp	r1, #1
    1802:	d015      	beq.n	1830 <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
    1804:	2900      	cmp	r1, #0
    1806:	d036      	beq.n	1876 <_usb_d_dev_ep_stall+0x9a>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1808:	0093      	lsls	r3, r2, #2
    180a:	189b      	adds	r3, r3, r2
    180c:	009b      	lsls	r3, r3, #2
    180e:	4a47      	ldr	r2, [pc, #284]	; (192c <_usb_d_dev_ep_stall+0x150>)
    1810:	18d2      	adds	r2, r2, r3
    1812:	3286      	adds	r2, #134	; 0x86
    1814:	7812      	ldrb	r2, [r2, #0]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    1816:	230f      	movs	r3, #15
    1818:	4013      	ands	r3, r2
    181a:	015b      	lsls	r3, r3, #5
    181c:	4a44      	ldr	r2, [pc, #272]	; (1930 <_usb_d_dev_ep_stall+0x154>)
    181e:	4694      	mov	ip, r2
    1820:	4463      	add	r3, ip
    1822:	7998      	ldrb	r0, [r3, #6]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    1824:	2310      	movs	r3, #16
    1826:	40a3      	lsls	r3, r4
    1828:	4018      	ands	r0, r3
	return _usbd_ep_is_stalled(epn, dir);
    182a:	1e43      	subs	r3, r0, #1
    182c:	4198      	sbcs	r0, r3
}
    182e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    1830:	2510      	movs	r5, #16
    1832:	40a5      	lsls	r5, r4
    1834:	b2ed      	uxtb	r5, r5
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1836:	493d      	ldr	r1, [pc, #244]	; (192c <_usb_d_dev_ep_stall+0x150>)
    1838:	0090      	lsls	r0, r2, #2
    183a:	1883      	adds	r3, r0, r2
    183c:	009b      	lsls	r3, r3, #2
    183e:	18cb      	adds	r3, r1, r3
    1840:	3386      	adds	r3, #134	; 0x86
    1842:	781e      	ldrb	r6, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1844:	230f      	movs	r3, #15
    1846:	4033      	ands	r3, r6
    1848:	015e      	lsls	r6, r3, #5
    184a:	4f39      	ldr	r7, [pc, #228]	; (1930 <_usb_d_dev_ep_stall+0x154>)
    184c:	46bc      	mov	ip, r7
    184e:	4466      	add	r6, ip
    1850:	7175      	strb	r5, [r6, #5]
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    1852:	2520      	movs	r5, #32
    1854:	40a5      	lsls	r5, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    1856:	b2ec      	uxtb	r4, r5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    1858:	015b      	lsls	r3, r3, #5
    185a:	4d36      	ldr	r5, [pc, #216]	; (1934 <_usb_d_dev_ep_stall+0x158>)
    185c:	46ac      	mov	ip, r5
    185e:	4463      	add	r3, ip
    1860:	701c      	strb	r4, [r3, #0]
	ept->flags.bits.is_stalled = 1;
    1862:	1882      	adds	r2, r0, r2
    1864:	0092      	lsls	r2, r2, #2
    1866:	188a      	adds	r2, r1, r2
    1868:	3280      	adds	r2, #128	; 0x80
    186a:	79d3      	ldrb	r3, [r2, #7]
    186c:	2108      	movs	r1, #8
    186e:	430b      	orrs	r3, r1
    1870:	71d3      	strb	r3, [r2, #7]
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    1872:	2000      	movs	r0, #0
    1874:	e7db      	b.n	182e <_usb_d_dev_ep_stall+0x52>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    1876:	0093      	lsls	r3, r2, #2
    1878:	189b      	adds	r3, r3, r2
    187a:	0099      	lsls	r1, r3, #2
    187c:	4b2b      	ldr	r3, [pc, #172]	; (192c <_usb_d_dev_ep_stall+0x150>)
    187e:	185b      	adds	r3, r3, r1
    1880:	3386      	adds	r3, #134	; 0x86
    1882:	781b      	ldrb	r3, [r3, #0]
    1884:	210f      	movs	r1, #15
    1886:	400b      	ands	r3, r1
    1888:	015d      	lsls	r5, r3, #5
    188a:	492b      	ldr	r1, [pc, #172]	; (1938 <_usb_d_dev_ep_stall+0x15c>)
    188c:	468c      	mov	ip, r1
    188e:	4465      	add	r5, ip
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    1890:	2183      	movs	r1, #131	; 0x83
    1892:	0049      	lsls	r1, r1, #1
    1894:	5c6e      	ldrb	r6, [r5, r1]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    1896:	39f6      	subs	r1, #246	; 0xf6
    1898:	40a1      	lsls	r1, r4
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    189a:	2000      	movs	r0, #0
	if (!is_stalled) {
    189c:	420e      	tst	r6, r1
    189e:	d0c6      	beq.n	182e <_usb_d_dev_ep_stall+0x52>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    18a0:	b2c9      	uxtb	r1, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    18a2:	3005      	adds	r0, #5
    18a4:	30ff      	adds	r0, #255	; 0xff
    18a6:	5429      	strb	r1, [r5, r0]
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    18a8:	2120      	movs	r1, #32
    18aa:	40a1      	lsls	r1, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    18ac:	b2c8      	uxtb	r0, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    18ae:	015b      	lsls	r3, r3, #5
    18b0:	4e22      	ldr	r6, [pc, #136]	; (193c <_usb_d_dev_ep_stall+0x160>)
    18b2:	46b4      	mov	ip, r6
    18b4:	4463      	add	r3, ip
    18b6:	7018      	strb	r0, [r3, #0]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    18b8:	2308      	movs	r3, #8
    18ba:	33ff      	adds	r3, #255	; 0xff
    18bc:	5ceb      	ldrb	r3, [r5, r3]
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    18be:	420b      	tst	r3, r1
    18c0:	d009      	beq.n	18d6 <_usb_d_dev_ep_stall+0xfa>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    18c2:	2308      	movs	r3, #8
    18c4:	33ff      	adds	r3, #255	; 0xff
    18c6:	54e8      	strb	r0, [r5, r3]
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    18c8:	3b07      	subs	r3, #7
    18ca:	3bff      	subs	r3, #255	; 0xff
    18cc:	40a3      	lsls	r3, r4
    18ce:	b2db      	uxtb	r3, r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    18d0:	2182      	movs	r1, #130	; 0x82
    18d2:	0049      	lsls	r1, r1, #1
    18d4:	546b      	strb	r3, [r5, r1]
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    18d6:	0093      	lsls	r3, r2, #2
    18d8:	189b      	adds	r3, r3, r2
    18da:	0099      	lsls	r1, r3, #2
    18dc:	4b13      	ldr	r3, [pc, #76]	; (192c <_usb_d_dev_ep_stall+0x150>)
    18de:	185b      	adds	r3, r3, r1
    18e0:	3380      	adds	r3, #128	; 0x80
    18e2:	79d9      	ldrb	r1, [r3, #7]
    18e4:	2307      	movs	r3, #7
    18e6:	400b      	ands	r3, r1
    18e8:	2b01      	cmp	r3, #1
    18ea:	d00b      	beq.n	1904 <_usb_d_dev_ep_stall+0x128>
		ept->flags.bits.is_stalled = 0;
    18ec:	0093      	lsls	r3, r2, #2
    18ee:	189a      	adds	r2, r3, r2
    18f0:	0092      	lsls	r2, r2, #2
    18f2:	4b0e      	ldr	r3, [pc, #56]	; (192c <_usb_d_dev_ep_stall+0x150>)
    18f4:	189b      	adds	r3, r3, r2
    18f6:	3380      	adds	r3, #128	; 0x80
    18f8:	79da      	ldrb	r2, [r3, #7]
    18fa:	2108      	movs	r1, #8
    18fc:	438a      	bics	r2, r1
    18fe:	71da      	strb	r2, [r3, #7]
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    1900:	2000      	movs	r0, #0
    1902:	e794      	b.n	182e <_usb_d_dev_ep_stall+0x52>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    1904:	3306      	adds	r3, #6
    1906:	33ff      	adds	r3, #255	; 0xff
    1908:	5ce9      	ldrb	r1, [r5, r3]
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    190a:	3bd6      	subs	r3, #214	; 0xd6
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    190c:	2000      	movs	r0, #0
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    190e:	4219      	tst	r1, r3
    1910:	d000      	beq.n	1914 <_usb_d_dev_ep_stall+0x138>
    1912:	e78c      	b.n	182e <_usb_d_dev_ep_stall+0x52>
			ept->flags.bits.is_stalled = 0;
    1914:	0093      	lsls	r3, r2, #2
    1916:	189a      	adds	r2, r3, r2
    1918:	0092      	lsls	r2, r2, #2
    191a:	4b04      	ldr	r3, [pc, #16]	; (192c <_usb_d_dev_ep_stall+0x150>)
    191c:	189b      	adds	r3, r3, r2
    191e:	3380      	adds	r3, #128	; 0x80
    1920:	79da      	ldrb	r2, [r3, #7]
    1922:	2108      	movs	r1, #8
    1924:	438a      	bics	r2, r1
    1926:	71da      	strb	r2, [r3, #7]
    1928:	e781      	b.n	182e <_usb_d_dev_ep_stall+0x52>
    192a:	46c0      	nop			; (mov r8, r8)
    192c:	200000a0 	.word	0x200000a0
    1930:	41005100 	.word	0x41005100
    1934:	41005109 	.word	0x41005109
    1938:	41005000 	.word	0x41005000
    193c:	41005108 	.word	0x41005108

00001940 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    1940:	b570      	push	{r4, r5, r6, lr}
    1942:	000d      	movs	r5, r1
	uint8_t            epn   = USB_EP_GET_N(ep);
    1944:	230f      	movs	r3, #15
    1946:	4018      	ands	r0, r3
    1948:	0144      	lsls	r4, r0, #5
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    194a:	4b16      	ldr	r3, [pc, #88]	; (19a4 <_usb_d_dev_ep_read_req+0x64>)
    194c:	191b      	adds	r3, r3, r4
	uint32_t           addr  = bank[0].ADDR.reg;
    194e:	6819      	ldr	r1, [r3, #0]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    1950:	685b      	ldr	r3, [r3, #4]
    1952:	049b      	lsls	r3, r3, #18
    1954:	0c9e      	lsrs	r6, r3, #18

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    1956:	2802      	cmp	r0, #2
    1958:	d81a      	bhi.n	1990 <_usb_d_dev_ep_read_req+0x50>
    195a:	2d00      	cmp	r5, #0
    195c:	d01b      	beq.n	1996 <_usb_d_dev_ep_read_req+0x56>
    195e:	4b12      	ldr	r3, [pc, #72]	; (19a8 <_usb_d_dev_ep_read_req+0x68>)
    1960:	469c      	mov	ip, r3
    1962:	4464      	add	r4, ip
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    1964:	2380      	movs	r3, #128	; 0x80
    1966:	005b      	lsls	r3, r3, #1
    1968:	5ce3      	ldrb	r3, [r4, r3]
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    196a:	2b11      	cmp	r3, #17
    196c:	d116      	bne.n	199c <_usb_d_dev_ep_read_req+0x5c>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    196e:	2308      	movs	r3, #8
    1970:	33ff      	adds	r3, #255	; 0xff
    1972:	5ce3      	ldrb	r3, [r4, r3]
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
		return ERR_NONE;
    1974:	2000      	movs	r0, #0
	if (!_usbd_ep_is_setup(epn)) {
    1976:	06db      	lsls	r3, r3, #27
    1978:	d400      	bmi.n	197c <_usb_d_dev_ep_read_req+0x3c>
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    197a:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(req_buf, (void *)addr, 8);
    197c:	2208      	movs	r2, #8
    197e:	0028      	movs	r0, r5
    1980:	4b0a      	ldr	r3, [pc, #40]	; (19ac <_usb_d_dev_ep_read_req+0x6c>)
    1982:	4798      	blx	r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1984:	2210      	movs	r2, #16
    1986:	2308      	movs	r3, #8
    1988:	33ff      	adds	r3, #255	; 0xff
    198a:	54e2      	strb	r2, [r4, r3]
	return bytes;
    198c:	0030      	movs	r0, r6
    198e:	e7f4      	b.n	197a <_usb_d_dev_ep_read_req+0x3a>
		return -USB_ERR_PARAM;
    1990:	2012      	movs	r0, #18
    1992:	4240      	negs	r0, r0
    1994:	e7f1      	b.n	197a <_usb_d_dev_ep_read_req+0x3a>
    1996:	2012      	movs	r0, #18
    1998:	4240      	negs	r0, r0
    199a:	e7ee      	b.n	197a <_usb_d_dev_ep_read_req+0x3a>
		return -USB_ERR_FUNC;
    199c:	2013      	movs	r0, #19
    199e:	4240      	negs	r0, r0
    19a0:	e7eb      	b.n	197a <_usb_d_dev_ep_read_req+0x3a>
    19a2:	46c0      	nop			; (mov r8, r8)
    19a4:	200000a0 	.word	0x200000a0
    19a8:	41005000 	.word	0x41005000
    19ac:	00001e85 	.word	0x00001e85

000019b0 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    19b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    19b2:	46de      	mov	lr, fp
    19b4:	4657      	mov	r7, sl
    19b6:	464e      	mov	r6, r9
    19b8:	4645      	mov	r5, r8
    19ba:	b5e0      	push	{r5, r6, r7, lr}
    19bc:	b085      	sub	sp, #20
    19be:	4680      	mov	r8, r0
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    19c0:	7a06      	ldrb	r6, [r0, #8]
    19c2:	230f      	movs	r3, #15
    19c4:	4033      	ands	r3, r6
    19c6:	b276      	sxtb	r6, r6
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    19c8:	2b00      	cmp	r3, #0
    19ca:	d100      	bne.n	19ce <_usb_d_dev_ep_trans+0x1e>
    19cc:	e0d3      	b.n	1b76 <_usb_d_dev_ep_trans+0x1c6>
    19ce:	0018      	movs	r0, r3
    19d0:	2e00      	cmp	r6, #0
    19d2:	db39      	blt.n	1a48 <_usb_d_dev_ep_trans+0x98>
	return &dev_inst.ep[ep_index];
    19d4:	0004      	movs	r4, r0
    19d6:	4a73      	ldr	r2, [pc, #460]	; (1ba4 <_usb_d_dev_ep_trans+0x1f4>)
    19d8:	3260      	adds	r2, #96	; 0x60
    19da:	1c41      	adds	r1, r0, #1
    19dc:	008d      	lsls	r5, r1, #2
    19de:	186d      	adds	r5, r5, r1
    19e0:	00ad      	lsls	r5, r5, #2
    19e2:	1955      	adds	r5, r2, r5
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    19e4:	0081      	lsls	r1, r0, #2
    19e6:	1809      	adds	r1, r1, r0
    19e8:	0089      	lsls	r1, r1, #2
    19ea:	1852      	adds	r2, r2, r1
    19ec:	8c91      	ldrh	r1, [r2, #36]	; 0x24
    19ee:	4a6e      	ldr	r2, [pc, #440]	; (1ba8 <_usb_d_dev_ep_trans+0x1f8>)
    19f0:	4291      	cmp	r1, r2
    19f2:	d02b      	beq.n	1a4c <_usb_d_dev_ep_trans+0x9c>
    19f4:	1e4f      	subs	r7, r1, #1
    19f6:	b2bf      	uxth	r7, r7
	bool     size_n_aligned = (trans->size & size_mask);
    19f8:	4642      	mov	r2, r8
    19fa:	6852      	ldr	r2, [r2, #4]
    19fc:	4017      	ands	r7, r2

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    19fe:	2b02      	cmp	r3, #2
    1a00:	d900      	bls.n	1a04 <_usb_d_dev_ep_trans+0x54>
    1a02:	e0a4      	b.n	1b4e <_usb_d_dev_ep_trans+0x19e>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    1a04:	4643      	mov	r3, r8
    1a06:	681b      	ldr	r3, [r3, #0]
    1a08:	4868      	ldr	r0, [pc, #416]	; (1bac <_usb_d_dev_ep_trans+0x1fc>)
    1a0a:	4283      	cmp	r3, r0
    1a0c:	d920      	bls.n	1a50 <_usb_d_dev_ep_trans+0xa0>
    1a0e:	1898      	adds	r0, r3, r2
    1a10:	9001      	str	r0, [sp, #4]
    1a12:	4867      	ldr	r0, [pc, #412]	; (1bb0 <_usb_d_dev_ep_trans+0x200>)
    1a14:	4684      	mov	ip, r0
    1a16:	9801      	ldr	r0, [sp, #4]
    1a18:	4560      	cmp	r0, ip
    1a1a:	d819      	bhi.n	1a50 <_usb_d_dev_ep_trans+0xa0>
    1a1c:	079b      	lsls	r3, r3, #30
    1a1e:	d117      	bne.n	1a50 <_usb_d_dev_ep_trans+0xa0>
	    || (!dir && (trans->size < ept->size))) {
    1a20:	2e00      	cmp	r6, #0
    1a22:	db32      	blt.n	1a8a <_usb_d_dev_ep_trans+0xda>
    1a24:	4291      	cmp	r1, r2
    1a26:	d900      	bls.n	1a2a <_usb_d_dev_ep_trans+0x7a>
    1a28:	e0af      	b.n	1b8a <_usb_d_dev_ep_trans+0x1da>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
	}
	if (!dir && size_n_aligned) {
    1a2a:	2f00      	cmp	r7, #0
    1a2c:	d030      	beq.n	1a90 <_usb_d_dev_ep_trans+0xe0>
		if (!ept->cache) {
    1a2e:	00a3      	lsls	r3, r4, #2
    1a30:	191b      	adds	r3, r3, r4
    1a32:	009a      	lsls	r2, r3, #2
    1a34:	4b5b      	ldr	r3, [pc, #364]	; (1ba4 <_usb_d_dev_ep_trans+0x1f4>)
    1a36:	189b      	adds	r3, r3, r2
    1a38:	3380      	adds	r3, #128	; 0x80
    1a3a:	681b      	ldr	r3, [r3, #0]
    1a3c:	2b00      	cmp	r3, #0
    1a3e:	d100      	bne.n	1a42 <_usb_d_dev_ep_trans+0x92>
    1a40:	e08b      	b.n	1b5a <_usb_d_dev_ep_trans+0x1aa>
	bool use_cache = false;
    1a42:	2300      	movs	r3, #0
    1a44:	4699      	mov	r9, r3
    1a46:	e00f      	b.n	1a68 <_usb_d_dev_ep_trans+0xb8>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1a48:	1c98      	adds	r0, r3, #2
    1a4a:	e7c3      	b.n	19d4 <_usb_d_dev_ep_trans+0x24>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    1a4c:	000f      	movs	r7, r1
    1a4e:	e7d3      	b.n	19f8 <_usb_d_dev_ep_trans+0x48>
		if (!ept->cache) {
    1a50:	00a3      	lsls	r3, r4, #2
    1a52:	191b      	adds	r3, r3, r4
    1a54:	009a      	lsls	r2, r3, #2
    1a56:	4b53      	ldr	r3, [pc, #332]	; (1ba4 <_usb_d_dev_ep_trans+0x1f4>)
    1a58:	189b      	adds	r3, r3, r2
    1a5a:	3380      	adds	r3, #128	; 0x80
    1a5c:	681b      	ldr	r3, [r3, #0]
    1a5e:	2b00      	cmp	r3, #0
    1a60:	d100      	bne.n	1a64 <_usb_d_dev_ep_trans+0xb4>
    1a62:	e077      	b.n	1b54 <_usb_d_dev_ep_trans+0x1a4>
		use_cache = true;
    1a64:	2301      	movs	r3, #1
    1a66:	4699      	mov	r9, r3
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    1a68:	00a3      	lsls	r3, r4, #2
    1a6a:	191b      	adds	r3, r3, r4
    1a6c:	009a      	lsls	r2, r3, #2
    1a6e:	4b4d      	ldr	r3, [pc, #308]	; (1ba4 <_usb_d_dev_ep_trans+0x1f4>)
    1a70:	189b      	adds	r3, r3, r2
    1a72:	3380      	adds	r3, #128	; 0x80
    1a74:	79db      	ldrb	r3, [r3, #7]
		return USB_HALTED;
    1a76:	2002      	movs	r0, #2
	if (ept->flags.bits.is_stalled) {
    1a78:	071b      	lsls	r3, r3, #28
    1a7a:	d50c      	bpl.n	1a96 <_usb_d_dev_ep_trans+0xe6>
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    1a7c:	b005      	add	sp, #20
    1a7e:	bc3c      	pop	{r2, r3, r4, r5}
    1a80:	4690      	mov	r8, r2
    1a82:	4699      	mov	r9, r3
    1a84:	46a2      	mov	sl, r4
    1a86:	46ab      	mov	fp, r5
    1a88:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bool use_cache = false;
    1a8a:	2300      	movs	r3, #0
    1a8c:	4699      	mov	r9, r3
    1a8e:	e7eb      	b.n	1a68 <_usb_d_dev_ep_trans+0xb8>
    1a90:	2300      	movs	r3, #0
    1a92:	4699      	mov	r9, r3
    1a94:	e7e8      	b.n	1a68 <_usb_d_dev_ep_trans+0xb8>
	atomic_enter_critical(&flags);
    1a96:	a803      	add	r0, sp, #12
    1a98:	4b46      	ldr	r3, [pc, #280]	; (1bb4 <_usb_d_dev_ep_trans+0x204>)
    1a9a:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    1a9c:	00a3      	lsls	r3, r4, #2
    1a9e:	191b      	adds	r3, r3, r4
    1aa0:	009a      	lsls	r2, r3, #2
    1aa2:	4b40      	ldr	r3, [pc, #256]	; (1ba4 <_usb_d_dev_ep_trans+0x1f4>)
    1aa4:	189b      	adds	r3, r3, r2
    1aa6:	3380      	adds	r3, #128	; 0x80
    1aa8:	79db      	ldrb	r3, [r3, #7]
    1aaa:	065b      	lsls	r3, r3, #25
    1aac:	d444      	bmi.n	1b38 <_usb_d_dev_ep_trans+0x188>
	ept->flags.bits.is_busy = 1;
    1aae:	00a3      	lsls	r3, r4, #2
    1ab0:	191b      	adds	r3, r3, r4
    1ab2:	009b      	lsls	r3, r3, #2
    1ab4:	4a3b      	ldr	r2, [pc, #236]	; (1ba4 <_usb_d_dev_ep_trans+0x1f4>)
    1ab6:	4693      	mov	fp, r2
    1ab8:	449b      	add	fp, r3
    1aba:	2380      	movs	r3, #128	; 0x80
    1abc:	445b      	add	r3, fp
    1abe:	469a      	mov	sl, r3
    1ac0:	79db      	ldrb	r3, [r3, #7]
    1ac2:	2240      	movs	r2, #64	; 0x40
    1ac4:	4313      	orrs	r3, r2
    1ac6:	4652      	mov	r2, sl
    1ac8:	71d3      	strb	r3, [r2, #7]
	atomic_leave_critical(&flags);
    1aca:	a803      	add	r0, sp, #12
    1acc:	4b3a      	ldr	r3, [pc, #232]	; (1bb8 <_usb_d_dev_ep_trans+0x208>)
    1ace:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    1ad0:	465b      	mov	r3, fp
    1ad2:	4642      	mov	r2, r8
    1ad4:	6812      	ldr	r2, [r2, #0]
    1ad6:	675a      	str	r2, [r3, #116]	; 0x74
	ept->trans_size  = trans->size;
    1ad8:	4642      	mov	r2, r8
    1ada:	6852      	ldr	r2, [r2, #4]
    1adc:	679a      	str	r2, [r3, #120]	; 0x78
	ept->trans_count = 0;
    1ade:	2300      	movs	r3, #0
    1ae0:	465a      	mov	r2, fp
    1ae2:	67d3      	str	r3, [r2, #124]	; 0x7c
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    1ae4:	0ff2      	lsrs	r2, r6, #31
	ept->flags.bits.dir       = dir;
    1ae6:	01d2      	lsls	r2, r2, #7
    1ae8:	4653      	mov	r3, sl
    1aea:	79d9      	ldrb	r1, [r3, #7]
    1aec:	237f      	movs	r3, #127	; 0x7f
    1aee:	400b      	ands	r3, r1
	ept->flags.bits.use_cache = use_cache;
    1af0:	4649      	mov	r1, r9
    1af2:	0149      	lsls	r1, r1, #5
    1af4:	4313      	orrs	r3, r2
    1af6:	2220      	movs	r2, #32
    1af8:	4393      	bics	r3, r2
    1afa:	430b      	orrs	r3, r1
    1afc:	4652      	mov	r2, sl
    1afe:	71d3      	strb	r3, [r2, #7]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    1b00:	4643      	mov	r3, r8
    1b02:	7a5b      	ldrb	r3, [r3, #9]
    1b04:	2200      	movs	r2, #0
    1b06:	2b00      	cmp	r3, #0
    1b08:	d002      	beq.n	1b10 <_usb_d_dev_ep_trans+0x160>
    1b0a:	427a      	negs	r2, r7
    1b0c:	417a      	adcs	r2, r7
    1b0e:	b2d2      	uxtb	r2, r2
    1b10:	00a3      	lsls	r3, r4, #2
    1b12:	191c      	adds	r4, r3, r4
    1b14:	00a4      	lsls	r4, r4, #2
    1b16:	4b23      	ldr	r3, [pc, #140]	; (1ba4 <_usb_d_dev_ep_trans+0x1f4>)
    1b18:	191b      	adds	r3, r3, r4
    1b1a:	3380      	adds	r3, #128	; 0x80
    1b1c:	0112      	lsls	r2, r2, #4
    1b1e:	79df      	ldrb	r7, [r3, #7]
    1b20:	2110      	movs	r1, #16
    1b22:	438f      	bics	r7, r1
    1b24:	4317      	orrs	r7, r2
    1b26:	71df      	strb	r7, [r3, #7]
	if (dir) {
    1b28:	2e00      	cmp	r6, #0
    1b2a:	db0a      	blt.n	1b42 <_usb_d_dev_ep_trans+0x192>
		_usb_d_dev_out_next(ept, false);
    1b2c:	2100      	movs	r1, #0
    1b2e:	0028      	movs	r0, r5
    1b30:	4b22      	ldr	r3, [pc, #136]	; (1bbc <_usb_d_dev_ep_trans+0x20c>)
    1b32:	4798      	blx	r3
	return ERR_NONE;
    1b34:	2000      	movs	r0, #0
    1b36:	e7a1      	b.n	1a7c <_usb_d_dev_ep_trans+0xcc>
		atomic_leave_critical(&flags);
    1b38:	a803      	add	r0, sp, #12
    1b3a:	4b1f      	ldr	r3, [pc, #124]	; (1bb8 <_usb_d_dev_ep_trans+0x208>)
    1b3c:	4798      	blx	r3
		return USB_BUSY;
    1b3e:	2001      	movs	r0, #1
    1b40:	e79c      	b.n	1a7c <_usb_d_dev_ep_trans+0xcc>
		_usb_d_dev_in_next(ept, false);
    1b42:	2100      	movs	r1, #0
    1b44:	0028      	movs	r0, r5
    1b46:	4b1e      	ldr	r3, [pc, #120]	; (1bc0 <_usb_d_dev_ep_trans+0x210>)
    1b48:	4798      	blx	r3
	return ERR_NONE;
    1b4a:	2000      	movs	r0, #0
    1b4c:	e796      	b.n	1a7c <_usb_d_dev_ep_trans+0xcc>
		return -USB_ERR_PARAM;
    1b4e:	2012      	movs	r0, #18
    1b50:	4240      	negs	r0, r0
    1b52:	e793      	b.n	1a7c <_usb_d_dev_ep_trans+0xcc>
			return -USB_ERR_FUNC;
    1b54:	2013      	movs	r0, #19
    1b56:	4240      	negs	r0, r0
    1b58:	e790      	b.n	1a7c <_usb_d_dev_ep_trans+0xcc>
			return -USB_ERR_PARAM;
    1b5a:	2012      	movs	r0, #18
    1b5c:	4240      	negs	r0, r0
    1b5e:	e78d      	b.n	1a7c <_usb_d_dev_ep_trans+0xcc>
			return -USB_ERR_FUNC;
    1b60:	2013      	movs	r0, #19
    1b62:	4240      	negs	r0, r0
    1b64:	e78a      	b.n	1a7c <_usb_d_dev_ep_trans+0xcc>
	bool     size_n_aligned = (trans->size & size_mask);
    1b66:	4643      	mov	r3, r8
    1b68:	685a      	ldr	r2, [r3, #4]
    1b6a:	0597      	lsls	r7, r2, #22
    1b6c:	0dbf      	lsrs	r7, r7, #22
	return &dev_inst.ep[ep_index];
    1b6e:	4d0d      	ldr	r5, [pc, #52]	; (1ba4 <_usb_d_dev_ep_trans+0x1f4>)
    1b70:	3574      	adds	r5, #116	; 0x74
    1b72:	2400      	movs	r4, #0
    1b74:	e746      	b.n	1a04 <_usb_d_dev_ep_trans+0x54>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    1b76:	4a0b      	ldr	r2, [pc, #44]	; (1ba4 <_usb_d_dev_ep_trans+0x1f4>)
    1b78:	3260      	adds	r2, #96	; 0x60
    1b7a:	8c91      	ldrh	r1, [r2, #36]	; 0x24
    1b7c:	4a0a      	ldr	r2, [pc, #40]	; (1ba8 <_usb_d_dev_ep_trans+0x1f8>)
    1b7e:	4291      	cmp	r1, r2
    1b80:	d0f1      	beq.n	1b66 <_usb_d_dev_ep_trans+0x1b6>
	return &dev_inst.ep[ep_index];
    1b82:	4d08      	ldr	r5, [pc, #32]	; (1ba4 <_usb_d_dev_ep_trans+0x1f4>)
    1b84:	3574      	adds	r5, #116	; 0x74
    1b86:	2400      	movs	r4, #0
    1b88:	e734      	b.n	19f4 <_usb_d_dev_ep_trans+0x44>
		if (!ept->cache) {
    1b8a:	00a3      	lsls	r3, r4, #2
    1b8c:	191b      	adds	r3, r3, r4
    1b8e:	009a      	lsls	r2, r3, #2
    1b90:	4b04      	ldr	r3, [pc, #16]	; (1ba4 <_usb_d_dev_ep_trans+0x1f4>)
    1b92:	189b      	adds	r3, r3, r2
    1b94:	3380      	adds	r3, #128	; 0x80
    1b96:	681b      	ldr	r3, [r3, #0]
    1b98:	2b00      	cmp	r3, #0
    1b9a:	d0e1      	beq.n	1b60 <_usb_d_dev_ep_trans+0x1b0>
    1b9c:	2301      	movs	r3, #1
    1b9e:	4699      	mov	r9, r3
    1ba0:	e762      	b.n	1a68 <_usb_d_dev_ep_trans+0xb8>
    1ba2:	46c0      	nop			; (mov r8, r8)
    1ba4:	200000a0 	.word	0x200000a0
    1ba8:	000003ff 	.word	0x000003ff
    1bac:	1fffffff 	.word	0x1fffffff
    1bb0:	20007fff 	.word	0x20007fff
    1bb4:	00000741 	.word	0x00000741
    1bb8:	0000074f 	.word	0x0000074f
    1bbc:	000014cd 	.word	0x000014cd
    1bc0:	00001325 	.word	0x00001325

00001bc4 <_usb_d_dev_register_ep_callback>:
	}
}

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    1bc4:	1e0b      	subs	r3, r1, #0
    1bc6:	d008      	beq.n	1bda <_usb_d_dev_register_ep_callback+0x16>
	if (type == USB_D_DEV_EP_CB_SETUP) {
    1bc8:	2800      	cmp	r0, #0
    1bca:	d008      	beq.n	1bde <_usb_d_dev_register_ep_callback+0x1a>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    1bcc:	2801      	cmp	r0, #1
    1bce:	d009      	beq.n	1be4 <_usb_d_dev_register_ep_callback+0x20>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    1bd0:	2802      	cmp	r0, #2
    1bd2:	d106      	bne.n	1be2 <_usb_d_dev_register_ep_callback+0x1e>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    1bd4:	4a05      	ldr	r2, [pc, #20]	; (1bec <_usb_d_dev_register_ep_callback+0x28>)
    1bd6:	6713      	str	r3, [r2, #112]	; 0x70
	}
}
    1bd8:	e003      	b.n	1be2 <_usb_d_dev_register_ep_callback+0x1e>
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    1bda:	4b05      	ldr	r3, [pc, #20]	; (1bf0 <_usb_d_dev_register_ep_callback+0x2c>)
    1bdc:	e7f4      	b.n	1bc8 <_usb_d_dev_register_ep_callback+0x4>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    1bde:	4a03      	ldr	r2, [pc, #12]	; (1bec <_usb_d_dev_register_ep_callback+0x28>)
    1be0:	6693      	str	r3, [r2, #104]	; 0x68
}
    1be2:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    1be4:	4a01      	ldr	r2, [pc, #4]	; (1bec <_usb_d_dev_register_ep_callback+0x28>)
    1be6:	66d3      	str	r3, [r2, #108]	; 0x6c
    1be8:	e7fb      	b.n	1be2 <_usb_d_dev_register_ep_callback+0x1e>
    1bea:	46c0      	nop			; (mov r8, r8)
    1bec:	200000a0 	.word	0x200000a0
    1bf0:	0000108d 	.word	0x0000108d

00001bf4 <USB_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_Handler(void)
{
    1bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    1bf6:	4b82      	ldr	r3, [pc, #520]	; (1e00 <USB_Handler+0x20c>)
    1bf8:	8c1e      	ldrh	r6, [r3, #32]
    1bfa:	b2b6      	uxth	r6, r6
	if (0 == epint) {
    1bfc:	2e00      	cmp	r6, #0
    1bfe:	d003      	beq.n	1c08 <USB_Handler+0x14>
    1c00:	4c80      	ldr	r4, [pc, #512]	; (1e04 <USB_Handler+0x210>)
    1c02:	3474      	adds	r4, #116	; 0x74
	uint32_t lpm_variable = 0;
    1c04:	2500      	movs	r5, #0
    1c06:	e0b9      	b.n	1d7c <USB_Handler+0x188>
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    1c08:	8b99      	ldrh	r1, [r3, #28]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    1c0a:	8b1b      	ldrh	r3, [r3, #24]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    1c0c:	400b      	ands	r3, r1
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    1c0e:	075a      	lsls	r2, r3, #29
    1c10:	d417      	bmi.n	1c42 <USB_Handler+0x4e>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    1c12:	059a      	lsls	r2, r3, #22
    1c14:	d41c      	bmi.n	1c50 <USB_Handler+0x5c>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    1c16:	061a      	lsls	r2, r3, #24
    1c18:	d43e      	bmi.n	1c98 <USB_Handler+0xa4>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    1c1a:	2270      	movs	r2, #112	; 0x70
    1c1c:	421a      	tst	r2, r3
    1c1e:	d144      	bne.n	1caa <USB_Handler+0xb6>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    1c20:	071a      	lsls	r2, r3, #28
    1c22:	d45e      	bmi.n	1ce2 <USB_Handler+0xee>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    1c24:	07db      	lsls	r3, r3, #31
    1c26:	d5eb      	bpl.n	1c00 <USB_Handler+0xc>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    1c28:	4b75      	ldr	r3, [pc, #468]	; (1e00 <USB_Handler+0x20c>)
    1c2a:	4a77      	ldr	r2, [pc, #476]	; (1e08 <USB_Handler+0x214>)
    1c2c:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    1c2e:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    1c30:	3a92      	subs	r2, #146	; 0x92
    1c32:	3aff      	subs	r2, #255	; 0xff
    1c34:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    1c36:	4b73      	ldr	r3, [pc, #460]	; (1e04 <USB_Handler+0x210>)
    1c38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    1c3a:	2100      	movs	r1, #0
    1c3c:	2004      	movs	r0, #4
    1c3e:	4798      	blx	r3
    1c40:	e005      	b.n	1c4e <USB_Handler+0x5a>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    1c42:	2204      	movs	r2, #4
    1c44:	4b6e      	ldr	r3, [pc, #440]	; (1e00 <USB_Handler+0x20c>)
    1c46:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    1c48:	4b6e      	ldr	r3, [pc, #440]	; (1e04 <USB_Handler+0x210>)
    1c4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    1c4c:	4798      	blx	r3

	_usb_d_dev_handler();
}
    1c4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1c50:	4b6b      	ldr	r3, [pc, #428]	; (1e00 <USB_Handler+0x20c>)
    1c52:	4a6d      	ldr	r2, [pc, #436]	; (1e08 <USB_Handler+0x214>)
    1c54:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    1c56:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    1c58:	3a92      	subs	r2, #146	; 0x92
    1c5a:	3aff      	subs	r2, #255	; 0xff
    1c5c:	831a      	strh	r2, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    1c5e:	4b69      	ldr	r3, [pc, #420]	; (1e04 <USB_Handler+0x210>)
    1c60:	891b      	ldrh	r3, [r3, #8]
    1c62:	071b      	lsls	r3, r3, #28
    1c64:	0f1b      	lsrs	r3, r3, #28
    1c66:	2b03      	cmp	r3, #3
    1c68:	d00c      	beq.n	1c84 <USB_Handler+0x90>
    1c6a:	4b66      	ldr	r3, [pc, #408]	; (1e04 <USB_Handler+0x210>)
    1c6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    1c6e:	071b      	lsls	r3, r3, #28
    1c70:	0f1b      	lsrs	r3, r3, #28
	uint32_t lpm_variable = 0;
    1c72:	2100      	movs	r1, #0
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    1c74:	3a6f      	subs	r2, #111	; 0x6f
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    1c76:	2b03      	cmp	r3, #3
    1c78:	d005      	beq.n	1c86 <USB_Handler+0x92>
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    1c7a:	4b62      	ldr	r3, [pc, #392]	; (1e04 <USB_Handler+0x210>)
    1c7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    1c7e:	2003      	movs	r0, #3
    1c80:	4798      	blx	r3
    1c82:	e7e4      	b.n	1c4e <USB_Handler+0x5a>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    1c84:	2200      	movs	r2, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    1c86:	0152      	lsls	r2, r2, #5
    1c88:	4b5e      	ldr	r3, [pc, #376]	; (1e04 <USB_Handler+0x210>)
    1c8a:	189b      	adds	r3, r3, r2
    1c8c:	8919      	ldrh	r1, [r3, #8]
    1c8e:	0449      	lsls	r1, r1, #17
    1c90:	0d49      	lsrs	r1, r1, #21
			bank->EXTREG.reg = 0;
    1c92:	2200      	movs	r2, #0
    1c94:	811a      	strh	r2, [r3, #8]
    1c96:	e7f0      	b.n	1c7a <USB_Handler+0x86>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    1c98:	2280      	movs	r2, #128	; 0x80
    1c9a:	4b59      	ldr	r3, [pc, #356]	; (1e00 <USB_Handler+0x20c>)
    1c9c:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    1c9e:	4b59      	ldr	r3, [pc, #356]	; (1e04 <USB_Handler+0x210>)
    1ca0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    1ca2:	2100      	movs	r1, #0
    1ca4:	2005      	movs	r0, #5
    1ca6:	4798      	blx	r3
    1ca8:	e7d1      	b.n	1c4e <USB_Handler+0x5a>
    1caa:	4b55      	ldr	r3, [pc, #340]	; (1e00 <USB_Handler+0x20c>)
    1cac:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    1cae:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    1cb0:	4a55      	ldr	r2, [pc, #340]	; (1e08 <USB_Handler+0x214>)
    1cb2:	831a      	strh	r2, [r3, #24]
	if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    1cb4:	4b55      	ldr	r3, [pc, #340]	; (1e0c <USB_Handler+0x218>)
    1cb6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    1cb8:	069b      	lsls	r3, r3, #26
    1cba:	d40c      	bmi.n	1cd6 <USB_Handler+0xe2>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    1cbc:	4953      	ldr	r1, [pc, #332]	; (1e0c <USB_Handler+0x218>)
	tmp &= mask;
    1cbe:	3a32      	subs	r2, #50	; 0x32
    1cc0:	3aff      	subs	r2, #255	; 0xff
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    1cc2:	68cb      	ldr	r3, [r1, #12]
	tmp &= mask;
    1cc4:	4013      	ands	r3, r2
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, DFLL_READY_FLAG) != DFLL_READY_FLAG)
    1cc6:	2bd0      	cmp	r3, #208	; 0xd0
    1cc8:	d1fb      	bne.n	1cc2 <USB_Handler+0xce>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    1cca:	4b4e      	ldr	r3, [pc, #312]	; (1e04 <USB_Handler+0x210>)
    1ccc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    1cce:	2100      	movs	r1, #0
    1cd0:	2002      	movs	r0, #2
    1cd2:	4798      	blx	r3
    1cd4:	e7bb      	b.n	1c4e <USB_Handler+0x5a>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    1cd6:	494d      	ldr	r1, [pc, #308]	; (1e0c <USB_Handler+0x218>)
	tmp &= mask;
    1cd8:	2210      	movs	r2, #16
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    1cda:	68cb      	ldr	r3, [r1, #12]
		while (hri_sysctrl_get_PCLKSR_reg(SYSCTRL, SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY)
    1cdc:	421a      	tst	r2, r3
    1cde:	d0fc      	beq.n	1cda <USB_Handler+0xe6>
    1ce0:	e7f3      	b.n	1cca <USB_Handler+0xd6>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    1ce2:	4b47      	ldr	r3, [pc, #284]	; (1e00 <USB_Handler+0x20c>)
    1ce4:	2100      	movs	r1, #0
    1ce6:	2280      	movs	r2, #128	; 0x80
    1ce8:	0052      	lsls	r2, r2, #1
    1cea:	5499      	strb	r1, [r3, r2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    1cec:	3af8      	subs	r2, #248	; 0xf8
    1cee:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    1cf0:	3268      	adds	r2, #104	; 0x68
    1cf2:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    1cf4:	4a44      	ldr	r2, [pc, #272]	; (1e08 <USB_Handler+0x214>)
    1cf6:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    1cf8:	4b45      	ldr	r3, [pc, #276]	; (1e10 <USB_Handler+0x21c>)
    1cfa:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    1cfc:	4b41      	ldr	r3, [pc, #260]	; (1e04 <USB_Handler+0x210>)
    1cfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    1d00:	2100      	movs	r1, #0
    1d02:	2001      	movs	r0, #1
    1d04:	4798      	blx	r3
    1d06:	e7a2      	b.n	1c4e <USB_Handler+0x5a>
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    1d08:	06cb      	lsls	r3, r1, #27
    1d0a:	d407      	bmi.n	1d1c <USB_Handler+0x128>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    1d0c:	064b      	lsls	r3, r1, #25
    1d0e:	d408      	bmi.n	1d22 <USB_Handler+0x12e>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    1d10:	068b      	lsls	r3, r1, #26
    1d12:	d52e      	bpl.n	1d72 <USB_Handler+0x17e>
		_usb_d_dev_handle_stall(ept, 0);
    1d14:	2100      	movs	r1, #0
    1d16:	4b3f      	ldr	r3, [pc, #252]	; (1e14 <USB_Handler+0x220>)
    1d18:	4798      	blx	r3
    1d1a:	e02a      	b.n	1d72 <USB_Handler+0x17e>
		_usb_d_dev_handle_setup(ept);
    1d1c:	4b3e      	ldr	r3, [pc, #248]	; (1e18 <USB_Handler+0x224>)
    1d1e:	4798      	blx	r3
    1d20:	e027      	b.n	1d72 <USB_Handler+0x17e>
		_usb_d_dev_handle_stall(ept, 1);
    1d22:	2101      	movs	r1, #1
    1d24:	4b3b      	ldr	r3, [pc, #236]	; (1e14 <USB_Handler+0x220>)
    1d26:	4798      	blx	r3
    1d28:	e023      	b.n	1d72 <USB_Handler+0x17e>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    1d2a:	064b      	lsls	r3, r1, #25
    1d2c:	d40e      	bmi.n	1d4c <USB_Handler+0x158>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    1d2e:	070b      	lsls	r3, r1, #28
    1d30:	d410      	bmi.n	1d54 <USB_Handler+0x160>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    1d32:	078b      	lsls	r3, r1, #30
    1d34:	d412      	bmi.n	1d5c <USB_Handler+0x168>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    1d36:	2307      	movs	r3, #7
    1d38:	401a      	ands	r2, r3
    1d3a:	2a01      	cmp	r2, #1
    1d3c:	d119      	bne.n	1d72 <USB_Handler+0x17e>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    1d3e:	074b      	lsls	r3, r1, #29
    1d40:	d410      	bmi.n	1d64 <USB_Handler+0x170>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    1d42:	06cb      	lsls	r3, r1, #27
    1d44:	d515      	bpl.n	1d72 <USB_Handler+0x17e>
			_usb_d_dev_handle_setup(ept);
    1d46:	4b34      	ldr	r3, [pc, #208]	; (1e18 <USB_Handler+0x224>)
    1d48:	4798      	blx	r3
    1d4a:	e012      	b.n	1d72 <USB_Handler+0x17e>
		_usb_d_dev_handle_stall(ept, 1);
    1d4c:	2101      	movs	r1, #1
    1d4e:	4b31      	ldr	r3, [pc, #196]	; (1e14 <USB_Handler+0x220>)
    1d50:	4798      	blx	r3
    1d52:	e00e      	b.n	1d72 <USB_Handler+0x17e>
		_usb_d_dev_handle_trfail(ept, 1);
    1d54:	2101      	movs	r1, #1
    1d56:	4b31      	ldr	r3, [pc, #196]	; (1e1c <USB_Handler+0x228>)
    1d58:	4798      	blx	r3
    1d5a:	e00a      	b.n	1d72 <USB_Handler+0x17e>
		_usb_d_dev_in_next(ept, true);
    1d5c:	2101      	movs	r1, #1
    1d5e:	4b30      	ldr	r3, [pc, #192]	; (1e20 <USB_Handler+0x22c>)
    1d60:	4798      	blx	r3
    1d62:	e006      	b.n	1d72 <USB_Handler+0x17e>
			_usb_d_dev_handle_trfail(ept, 0);
    1d64:	2100      	movs	r1, #0
    1d66:	4b2d      	ldr	r3, [pc, #180]	; (1e1c <USB_Handler+0x228>)
    1d68:	4798      	blx	r3
    1d6a:	e002      	b.n	1d72 <USB_Handler+0x17e>
		_usb_d_dev_handle_stall(ept, 0);
    1d6c:	2100      	movs	r1, #0
    1d6e:	4b29      	ldr	r3, [pc, #164]	; (1e14 <USB_Handler+0x220>)
    1d70:	4798      	blx	r3
    1d72:	3501      	adds	r5, #1
    1d74:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    1d76:	2d09      	cmp	r5, #9
    1d78:	d100      	bne.n	1d7c <USB_Handler+0x188>
    1d7a:	e768      	b.n	1c4e <USB_Handler+0x5a>
    1d7c:	0020      	movs	r0, r4
		if (ept->ep == 0xFF) {
    1d7e:	7ca1      	ldrb	r1, [r4, #18]
    1d80:	29ff      	cmp	r1, #255	; 0xff
    1d82:	d0f6      	beq.n	1d72 <USB_Handler+0x17e>
	if (!(epint & (1u << epn))) {
    1d84:	230f      	movs	r3, #15
    1d86:	400b      	ands	r3, r1
    1d88:	2101      	movs	r1, #1
    1d8a:	4099      	lsls	r1, r3
    1d8c:	420e      	tst	r6, r1
    1d8e:	d0f0      	beq.n	1d72 <USB_Handler+0x17e>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    1d90:	0159      	lsls	r1, r3, #5
    1d92:	4f24      	ldr	r7, [pc, #144]	; (1e24 <USB_Handler+0x230>)
    1d94:	46bc      	mov	ip, r7
    1d96:	4461      	add	r1, ip
    1d98:	79c9      	ldrb	r1, [r1, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    1d9a:	015b      	lsls	r3, r3, #5
    1d9c:	4f22      	ldr	r7, [pc, #136]	; (1e28 <USB_Handler+0x234>)
    1d9e:	46bc      	mov	ip, r7
    1da0:	4463      	add	r3, ip
    1da2:	781b      	ldrb	r3, [r3, #0]
	flags &= mask;
    1da4:	4019      	ands	r1, r3
	if (flags) {
    1da6:	d0e4      	beq.n	1d72 <USB_Handler+0x17e>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    1da8:	00ab      	lsls	r3, r5, #2
    1daa:	195a      	adds	r2, r3, r5
    1dac:	0092      	lsls	r2, r2, #2
    1dae:	4b15      	ldr	r3, [pc, #84]	; (1e04 <USB_Handler+0x210>)
    1db0:	469c      	mov	ip, r3
    1db2:	4462      	add	r2, ip
    1db4:	3270      	adds	r2, #112	; 0x70
    1db6:	7dd2      	ldrb	r2, [r2, #23]
    1db8:	2347      	movs	r3, #71	; 0x47
    1dba:	4013      	ands	r3, r2
    1dbc:	2b01      	cmp	r3, #1
    1dbe:	d0a3      	beq.n	1d08 <USB_Handler+0x114>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    1dc0:	b253      	sxtb	r3, r2
    1dc2:	2b00      	cmp	r3, #0
    1dc4:	dbb1      	blt.n	1d2a <USB_Handler+0x136>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    1dc6:	068b      	lsls	r3, r1, #26
    1dc8:	d4d0      	bmi.n	1d6c <USB_Handler+0x178>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    1dca:	074b      	lsls	r3, r1, #29
    1dcc:	d40c      	bmi.n	1de8 <USB_Handler+0x1f4>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    1dce:	07cb      	lsls	r3, r1, #31
    1dd0:	d40e      	bmi.n	1df0 <USB_Handler+0x1fc>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    1dd2:	2307      	movs	r3, #7
    1dd4:	401a      	ands	r2, r3
    1dd6:	2a01      	cmp	r2, #1
    1dd8:	d1cb      	bne.n	1d72 <USB_Handler+0x17e>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    1dda:	070b      	lsls	r3, r1, #28
    1ddc:	d40c      	bmi.n	1df8 <USB_Handler+0x204>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    1dde:	06cb      	lsls	r3, r1, #27
    1de0:	d5c7      	bpl.n	1d72 <USB_Handler+0x17e>
			_usb_d_dev_handle_setup(ept);
    1de2:	4b0d      	ldr	r3, [pc, #52]	; (1e18 <USB_Handler+0x224>)
    1de4:	4798      	blx	r3
    1de6:	e7c4      	b.n	1d72 <USB_Handler+0x17e>
		_usb_d_dev_handle_trfail(ept, 0);
    1de8:	2100      	movs	r1, #0
    1dea:	4b0c      	ldr	r3, [pc, #48]	; (1e1c <USB_Handler+0x228>)
    1dec:	4798      	blx	r3
    1dee:	e7c0      	b.n	1d72 <USB_Handler+0x17e>
		_usb_d_dev_out_next(ept, true);
    1df0:	2101      	movs	r1, #1
    1df2:	4b0e      	ldr	r3, [pc, #56]	; (1e2c <USB_Handler+0x238>)
    1df4:	4798      	blx	r3
    1df6:	e7bc      	b.n	1d72 <USB_Handler+0x17e>
			_usb_d_dev_handle_trfail(ept, 1);
    1df8:	2101      	movs	r1, #1
    1dfa:	4b08      	ldr	r3, [pc, #32]	; (1e1c <USB_Handler+0x228>)
    1dfc:	4798      	blx	r3
    1dfe:	e7b8      	b.n	1d72 <USB_Handler+0x17e>
    1e00:	41005000 	.word	0x41005000
    1e04:	200000a0 	.word	0x200000a0
    1e08:	00000201 	.word	0x00000201
    1e0c:	40000800 	.word	0x40000800
    1e10:	000012e1 	.word	0x000012e1
    1e14:	0000111d 	.word	0x0000111d
    1e18:	00001091 	.word	0x00001091
    1e1c:	000011e1 	.word	0x000011e1
    1e20:	00001325 	.word	0x00001325
    1e24:	41005100 	.word	0x41005100
    1e28:	41005109 	.word	0x41005109
    1e2c:	000014cd 	.word	0x000014cd

00001e30 <main>:
#include <atmel_start.h>

int main(void)
{
    1e30:	b510      	push	{r4, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    1e32:	4b01      	ldr	r3, [pc, #4]	; (1e38 <main+0x8>)
    1e34:	4798      	blx	r3
    1e36:	e7fe      	b.n	1e36 <main+0x6>
    1e38:	00000115 	.word	0x00000115

00001e3c <__libc_init_array>:
    1e3c:	b570      	push	{r4, r5, r6, lr}
    1e3e:	2600      	movs	r6, #0
    1e40:	4d0c      	ldr	r5, [pc, #48]	; (1e74 <__libc_init_array+0x38>)
    1e42:	4c0d      	ldr	r4, [pc, #52]	; (1e78 <__libc_init_array+0x3c>)
    1e44:	1b64      	subs	r4, r4, r5
    1e46:	10a4      	asrs	r4, r4, #2
    1e48:	42a6      	cmp	r6, r4
    1e4a:	d109      	bne.n	1e60 <__libc_init_array+0x24>
    1e4c:	2600      	movs	r6, #0
    1e4e:	f000 f891 	bl	1f74 <_init>
    1e52:	4d0a      	ldr	r5, [pc, #40]	; (1e7c <__libc_init_array+0x40>)
    1e54:	4c0a      	ldr	r4, [pc, #40]	; (1e80 <__libc_init_array+0x44>)
    1e56:	1b64      	subs	r4, r4, r5
    1e58:	10a4      	asrs	r4, r4, #2
    1e5a:	42a6      	cmp	r6, r4
    1e5c:	d105      	bne.n	1e6a <__libc_init_array+0x2e>
    1e5e:	bd70      	pop	{r4, r5, r6, pc}
    1e60:	00b3      	lsls	r3, r6, #2
    1e62:	58eb      	ldr	r3, [r5, r3]
    1e64:	4798      	blx	r3
    1e66:	3601      	adds	r6, #1
    1e68:	e7ee      	b.n	1e48 <__libc_init_array+0xc>
    1e6a:	00b3      	lsls	r3, r6, #2
    1e6c:	58eb      	ldr	r3, [r5, r3]
    1e6e:	4798      	blx	r3
    1e70:	3601      	adds	r6, #1
    1e72:	e7f2      	b.n	1e5a <__libc_init_array+0x1e>
    1e74:	00001f80 	.word	0x00001f80
    1e78:	00001f80 	.word	0x00001f80
    1e7c:	00001f80 	.word	0x00001f80
    1e80:	00001f84 	.word	0x00001f84

00001e84 <memcpy>:
    1e84:	2300      	movs	r3, #0
    1e86:	b510      	push	{r4, lr}
    1e88:	429a      	cmp	r2, r3
    1e8a:	d100      	bne.n	1e8e <memcpy+0xa>
    1e8c:	bd10      	pop	{r4, pc}
    1e8e:	5ccc      	ldrb	r4, [r1, r3]
    1e90:	54c4      	strb	r4, [r0, r3]
    1e92:	3301      	adds	r3, #1
    1e94:	e7f8      	b.n	1e88 <memcpy+0x4>

00001e96 <memset>:
    1e96:	0003      	movs	r3, r0
    1e98:	1882      	adds	r2, r0, r2
    1e9a:	4293      	cmp	r3, r2
    1e9c:	d100      	bne.n	1ea0 <memset+0xa>
    1e9e:	4770      	bx	lr
    1ea0:	7019      	strb	r1, [r3, #0]
    1ea2:	3301      	adds	r3, #1
    1ea4:	e7f9      	b.n	1e9a <memset+0x4>
    1ea6:	0000      	movs	r0, r0
    1ea8:	682f2e2e 	.word	0x682f2e2e
    1eac:	732f6c61 	.word	0x732f6c61
    1eb0:	682f6372 	.word	0x682f6372
    1eb4:	745f6c61 	.word	0x745f6c61
    1eb8:	72656d69 	.word	0x72656d69
    1ebc:	0000632e 	.word	0x0000632e
    1ec0:	682f2e2e 	.word	0x682f2e2e
    1ec4:	732f6c61 	.word	0x732f6c61
    1ec8:	682f6372 	.word	0x682f6372
    1ecc:	755f6c61 	.word	0x755f6c61
    1ed0:	74726173 	.word	0x74726173
    1ed4:	6e79735f 	.word	0x6e79735f
    1ed8:	00632e63 	.word	0x00632e63
    1edc:	682f2e2e 	.word	0x682f2e2e
    1ee0:	752f6c61 	.word	0x752f6c61
    1ee4:	736c6974 	.word	0x736c6974
    1ee8:	6372732f 	.word	0x6372732f
    1eec:	6974752f 	.word	0x6974752f
    1ef0:	6c5f736c 	.word	0x6c5f736c
    1ef4:	2e747369 	.word	0x2e747369
    1ef8:	00000063 	.word	0x00000063
    1efc:	682f2e2e 	.word	0x682f2e2e
    1f00:	722f6c70 	.word	0x722f6c70
    1f04:	682f6374 	.word	0x682f6374
    1f08:	725f6c70 	.word	0x725f6c70
    1f0c:	632e6374 	.word	0x632e6374
    1f10:	00000000 	.word	0x00000000

00001f14 <_i2cms>:
	...

00001f2c <_usarts>:
    1f2c:	00000000 40100004 00030000 0000ff2e     .......@........
    1f3c:	00000000 00000002 40100004 00030000     ...........@....
    1f4c:	0000ff2e 00000000 682f2e2e 732f6c70     ........../hpl/s
    1f5c:	6f637265 70682f6d 65735f6c 6d6f6372     ercom/hpl_sercom
    1f6c:	0000632e 00002000                       .c... ..

00001f74 <_init>:
    1f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1f76:	46c0      	nop			; (mov r8, r8)
    1f78:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1f7a:	bc08      	pop	{r3}
    1f7c:	469e      	mov	lr, r3
    1f7e:	4770      	bx	lr

00001f80 <__init_array_start>:
    1f80:	000000dd 	.word	0x000000dd

00001f84 <_fini>:
    1f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1f86:	46c0      	nop			; (mov r8, r8)
    1f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1f8a:	bc08      	pop	{r3}
    1f8c:	469e      	mov	lr, r3
    1f8e:	4770      	bx	lr

00001f90 <__fini_array_start>:
    1f90:	000000b5 	.word	0x000000b5
