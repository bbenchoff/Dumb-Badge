
DumBadgeFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000074f8  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001dc  20000000  000074f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000998  200001dc  000076d4  000201dc  2**2
                  ALLOC
  3 .stack        00002004  20000b74  0000806c  000201dc  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
  6 .debug_info   0003cf6b  00000000  00000000  0002025d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005d35  00000000  00000000  0005d1c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00006db9  00000000  00000000  00062efd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000008e0  00000000  00000000  00069cb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000a20  00000000  00000000  0006a596  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001fb41  00000000  00000000  0006afb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000150ac  00000000  00000000  0008aaf7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00090546  00000000  00000000  0009fba3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001d70  00000000  00000000  001300ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
	// Keep the default device state after reset
	SystemCoreClock = __SYSTEM_CLOCK;
       0:	78 2b 00 20 39 27 00 00 35 27 00 00 35 27 00 00     x+. 9'..5'..5'..
	...
	config->stopbits         = USART_STOPBITS_1;
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
	config->baudrate         = 9600;
	config->receiver_enable  = true;
	config->transmitter_enable = true;
	config->clock_polarity_inverted = false;
      2c:	35 27 00 00 00 00 00 00 00 00 00 00 35 27 00 00     5'..........5'..
	config->use_external_clock = false;
	config->ext_clock_freq   = 0;
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
	config->generator_source = GCLK_GENERATOR_0;
      3c:	c1 37 00 00 35 27 00 00 35 27 00 00 35 27 00 00     .7..5'..5'..5'..
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
	config->receive_pulse_length                    = 19;
      4c:	35 27 00 00 35 27 00 00 35 27 00 00 35 27 00 00     5'..5'..5'..5'..
	usart_get_config_defaults(&config_usart);

	config_usart.baudrate    = SERCOMBAUD;
	config_usart.mux_setting = SERCOMMUX;
	config_usart.pinmux_pad0 = SERCOMPAD0;
	config_usart.pinmux_pad1 = SERCOMPAD1;
      5c:	35 27 00 00 35 27 00 00 51 19 00 00 61 19 00 00     5'..5'..Q...a...
	config_usart.pinmux_pad2 = SERCOMPAD2;
	config_usart.pinmux_pad3 = SERCOMPAD3;

	while (usart_init(&usart_instance,	 SERCOMMODULE, &config_usart) != STATUS_OK) { }
      6c:	71 19 00 00 81 19 00 00 91 19 00 00 a1 19 00 00     q...............
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
      7c:	35 27 00 00 35 27 00 00 35 27 00 00 35 27 00 00     5'..5'..5'..5'..
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	if (usart_init(module, hw, config) == STATUS_OK) {
      8c:	35 27 00 00 35 27 00 00 35 27 00 00 35 27 00 00     5'..5'..5'..5'..
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
      9c:	85 14 00 00 35 27 00 00 35 27 00 00 35 27 00 00     ....5'..5'..5'..
	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
      ac:	35 27 00 00 00 00 00 00                             5'......

000000b4 <__do_global_dtors_aux>:
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
      ba:	2b00      	cmp	r3, #0
	return (usart_hw->SYNCBUSY.reg);
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
	while (usart_is_syncing(module)) {
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop

	stdio_serial_init(&usart_instance, SERCOMMODULE, &config_usart);
	usart_enable(&usart_instance);
}
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200001dc 	.word	0x200001dc
      d4:	00000000 	.word	0x00000000
      d8:	000074f8 	.word	0x000074f8

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200001e0 	.word	0x200001e0
     108:	000074f8 	.word	0x000074f8
     10c:	000074f8 	.word	0x000074f8
     110:	00000000 	.word	0x00000000

00000114 <ring_init>:
	cbuf->full = false;
	cbuf->tail = (cbuf->tail + 1) % cbuf->max;
}

cbuf_handle_t ring_init(uint8_t* buffer, uint16_t size)
{
     114:	b570      	push	{r4, r5, r6, lr}
     116:	0005      	movs	r5, r0
     118:	000c      	movs	r4, r1
	cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
     11a:	200c      	movs	r0, #12
     11c:	4b04      	ldr	r3, [pc, #16]	; (130 <ring_init+0x1c>)
     11e:	4798      	blx	r3

	cbuf->buffer = buffer;
     120:	6005      	str	r5, [r0, #0]
	cbuf->max = size;
     122:	8104      	strh	r4, [r0, #8]
	return cbuf;
}

void ring_reset(cbuf_handle_t cbuf)
{
	cbuf->head = 0;
     124:	2300      	movs	r3, #0
     126:	8083      	strh	r3, [r0, #4]
	cbuf->tail = 0;
     128:	80c3      	strh	r3, [r0, #6]
	cbuf->full = false;
     12a:	7283      	strb	r3, [r0, #10]
}
     12c:	bd70      	pop	{r4, r5, r6, pc}
     12e:	46c0      	nop			; (mov r8, r8)
     130:	00003f21 	.word	0x00003f21

00000134 <ring_reset>:
	cbuf->head = 0;
     134:	2300      	movs	r3, #0
     136:	8083      	strh	r3, [r0, #4]
	cbuf->tail = 0;
     138:	80c3      	strh	r3, [r0, #6]
	cbuf->full = false;
     13a:	7283      	strb	r3, [r0, #10]
}
     13c:	4770      	bx	lr
	...

00000140 <ring_put>:

void ring_put(cbuf_handle_t cbuf, uint8_t data)
{
     140:	b510      	push	{r4, lr}
     142:	0004      	movs	r4, r0
	cbuf->buffer[cbuf->head] = data;
     144:	8883      	ldrh	r3, [r0, #4]
     146:	005b      	lsls	r3, r3, #1
     148:	6802      	ldr	r2, [r0, #0]
     14a:	5299      	strh	r1, [r3, r2]
	if(cbuf->full)
     14c:	7a83      	ldrb	r3, [r0, #10]
     14e:	2b00      	cmp	r3, #0
     150:	d005      	beq.n	15e <ring_put+0x1e>
		cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     152:	88c0      	ldrh	r0, [r0, #6]
     154:	3001      	adds	r0, #1
     156:	8921      	ldrh	r1, [r4, #8]
     158:	4b07      	ldr	r3, [pc, #28]	; (178 <ring_put+0x38>)
     15a:	4798      	blx	r3
     15c:	80e1      	strh	r1, [r4, #6]
	cbuf->head = (cbuf->head + 1) % cbuf->max;
     15e:	88a0      	ldrh	r0, [r4, #4]
     160:	3001      	adds	r0, #1
     162:	8921      	ldrh	r1, [r4, #8]
     164:	4b04      	ldr	r3, [pc, #16]	; (178 <ring_put+0x38>)
     166:	4798      	blx	r3
     168:	b28b      	uxth	r3, r1
     16a:	80a3      	strh	r3, [r4, #4]
	cbuf->full = (cbuf->head == cbuf->tail);
     16c:	88e1      	ldrh	r1, [r4, #6]
     16e:	1ac9      	subs	r1, r1, r3
     170:	424a      	negs	r2, r1
     172:	414a      	adcs	r2, r1
     174:	72a2      	strb	r2, [r4, #10]

	advance_pointer(cbuf);
}
     176:	bd10      	pop	{r4, pc}
     178:	00003e79 	.word	0x00003e79

0000017c <ring_empty>:
	return r;
}

bool ring_empty(cbuf_handle_t cbuf)
{
	return (!cbuf->full && (cbuf->head == cbuf->tail));
     17c:	7a82      	ldrb	r2, [r0, #10]
     17e:	2300      	movs	r3, #0
     180:	2a00      	cmp	r2, #0
     182:	d105      	bne.n	190 <ring_empty+0x14>
     184:	8883      	ldrh	r3, [r0, #4]
     186:	88c0      	ldrh	r0, [r0, #6]
     188:	1a1b      	subs	r3, r3, r0
     18a:	4258      	negs	r0, r3
     18c:	4143      	adcs	r3, r0
     18e:	b2db      	uxtb	r3, r3
     190:	0018      	movs	r0, r3
}
     192:	4770      	bx	lr

00000194 <ring_get>:
{
     194:	b570      	push	{r4, r5, r6, lr}
     196:	0004      	movs	r4, r0
     198:	000d      	movs	r5, r1
	if(!ring_empty(cbuf))
     19a:	4b0b      	ldr	r3, [pc, #44]	; (1c8 <ring_get+0x34>)
     19c:	4798      	blx	r3
     19e:	2800      	cmp	r0, #0
     1a0:	d10e      	bne.n	1c0 <ring_get+0x2c>
		*data = cbuf->buffer[cbuf->tail];
     1a2:	88e3      	ldrh	r3, [r4, #6]
     1a4:	005b      	lsls	r3, r3, #1
     1a6:	6822      	ldr	r2, [r4, #0]
     1a8:	5a9b      	ldrh	r3, [r3, r2]
     1aa:	702b      	strb	r3, [r5, #0]
	cbuf->full = false;
     1ac:	2300      	movs	r3, #0
     1ae:	72a3      	strb	r3, [r4, #10]
	cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     1b0:	88e0      	ldrh	r0, [r4, #6]
     1b2:	3001      	adds	r0, #1
     1b4:	8921      	ldrh	r1, [r4, #8]
     1b6:	4b05      	ldr	r3, [pc, #20]	; (1cc <ring_get+0x38>)
     1b8:	4798      	blx	r3
     1ba:	80e1      	strh	r1, [r4, #6]
		r = 0;
     1bc:	2000      	movs	r0, #0
}
     1be:	bd70      	pop	{r4, r5, r6, pc}
	int r = -1;
     1c0:	2001      	movs	r0, #1
     1c2:	4240      	negs	r0, r0
	return r;
     1c4:	e7fb      	b.n	1be <ring_get+0x2a>
     1c6:	46c0      	nop			; (mov r8, r8)
     1c8:	0000017d 	.word	0x0000017d
     1cc:	00003e79 	.word	0x00003e79

000001d0 <isEmptyParser>:
int rearParam = -1;
int rearParser = -1;

bool isEmptyParser(void)
{
	if(frontParser == -1)
     1d0:	4b03      	ldr	r3, [pc, #12]	; (1e0 <isEmptyParser+0x10>)
     1d2:	6818      	ldr	r0, [r3, #0]
     1d4:	3001      	adds	r0, #1
     1d6:	4243      	negs	r3, r0
     1d8:	4158      	adcs	r0, r3
     1da:	b2c0      	uxtb	r0, r0
	{
		return true;
	}
	return false;
}
     1dc:	4770      	bx	lr
     1de:	46c0      	nop			; (mov r8, r8)
     1e0:	20000008 	.word	0x20000008

000001e4 <dequeueParser>:
}
char dequeueParser(void)
{
	char temp;
	
	temp = queueParser[frontParser];
     1e4:	4a08      	ldr	r2, [pc, #32]	; (208 <dequeueParser+0x24>)
     1e6:	6813      	ldr	r3, [r2, #0]
     1e8:	4908      	ldr	r1, [pc, #32]	; (20c <dequeueParser+0x28>)
     1ea:	5cc8      	ldrb	r0, [r1, r3]
	frontParser++;
     1ec:	3301      	adds	r3, #1
     1ee:	6013      	str	r3, [r2, #0]
	if(frontParser > rearParser)
     1f0:	4a07      	ldr	r2, [pc, #28]	; (210 <dequeueParser+0x2c>)
     1f2:	6812      	ldr	r2, [r2, #0]
     1f4:	4293      	cmp	r3, r2
     1f6:	dd05      	ble.n	204 <dequeueParser+0x20>
	{
		frontParser = rearParser = -1;
     1f8:	2301      	movs	r3, #1
     1fa:	425b      	negs	r3, r3
     1fc:	4a04      	ldr	r2, [pc, #16]	; (210 <dequeueParser+0x2c>)
     1fe:	6013      	str	r3, [r2, #0]
     200:	4a01      	ldr	r2, [pc, #4]	; (208 <dequeueParser+0x24>)
     202:	6013      	str	r3, [r2, #0]
	}
	return temp;
}
     204:	4770      	bx	lr
     206:	46c0      	nop			; (mov r8, r8)
     208:	20000008 	.word	0x20000008
     20c:	200002d0 	.word	0x200002d0
     210:	20000010 	.word	0x20000010

00000214 <enqueueParser>:
void enqueueParser(char data)
{
	if(frontParser == -1)
     214:	4b07      	ldr	r3, [pc, #28]	; (234 <enqueueParser+0x20>)
     216:	681b      	ldr	r3, [r3, #0]
     218:	3301      	adds	r3, #1
     21a:	d006      	beq.n	22a <enqueueParser+0x16>
	{
		frontParser = 0;
	}
	rearParser++;
     21c:	4a06      	ldr	r2, [pc, #24]	; (238 <enqueueParser+0x24>)
     21e:	6813      	ldr	r3, [r2, #0]
     220:	3301      	adds	r3, #1
     222:	6013      	str	r3, [r2, #0]
	queueParser[rearParser] = data;
     224:	4a05      	ldr	r2, [pc, #20]	; (23c <enqueueParser+0x28>)
     226:	54d0      	strb	r0, [r2, r3]
}
     228:	4770      	bx	lr
		frontParser = 0;
     22a:	2200      	movs	r2, #0
     22c:	4b01      	ldr	r3, [pc, #4]	; (234 <enqueueParser+0x20>)
     22e:	601a      	str	r2, [r3, #0]
     230:	e7f4      	b.n	21c <enqueueParser+0x8>
     232:	46c0      	nop			; (mov r8, r8)
     234:	20000008 	.word	0x20000008
     238:	20000010 	.word	0x20000010
     23c:	200002d0 	.word	0x200002d0

00000240 <isEmptyParam>:
bool isEmptyParam(void)
{
	if(frontParam == -1)
     240:	4b03      	ldr	r3, [pc, #12]	; (250 <isEmptyParam+0x10>)
     242:	6818      	ldr	r0, [r3, #0]
     244:	3001      	adds	r0, #1
     246:	4243      	negs	r3, r0
     248:	4158      	adcs	r0, r3
     24a:	b2c0      	uxtb	r0, r0
	{
		return true;
	}
	return false;
}
     24c:	4770      	bx	lr
     24e:	46c0      	nop			; (mov r8, r8)
     250:	20000004 	.word	0x20000004

00000254 <dequeueParam>:
}
uint8_t dequeueParam(void)
{
	uint8_t temp;
	
	temp = queueParam[frontParam];
     254:	4a08      	ldr	r2, [pc, #32]	; (278 <dequeueParam+0x24>)
     256:	6813      	ldr	r3, [r2, #0]
     258:	4908      	ldr	r1, [pc, #32]	; (27c <dequeueParam+0x28>)
     25a:	5cc8      	ldrb	r0, [r1, r3]
	frontParam++;
     25c:	3301      	adds	r3, #1
     25e:	6013      	str	r3, [r2, #0]
	if(frontParam > rearParam)
     260:	4a07      	ldr	r2, [pc, #28]	; (280 <dequeueParam+0x2c>)
     262:	6812      	ldr	r2, [r2, #0]
     264:	4293      	cmp	r3, r2
     266:	dd05      	ble.n	274 <dequeueParam+0x20>
	{
		frontParam = rearParam = -1;
     268:	2301      	movs	r3, #1
     26a:	425b      	negs	r3, r3
     26c:	4a04      	ldr	r2, [pc, #16]	; (280 <dequeueParam+0x2c>)
     26e:	6013      	str	r3, [r2, #0]
     270:	4a01      	ldr	r2, [pc, #4]	; (278 <dequeueParam+0x24>)
     272:	6013      	str	r3, [r2, #0]
	}

	return temp;
}
     274:	4770      	bx	lr
     276:	46c0      	nop			; (mov r8, r8)
     278:	20000004 	.word	0x20000004
     27c:	20000304 	.word	0x20000304
     280:	2000000c 	.word	0x2000000c

00000284 <enqueueParam>:
void enqueueParam(uint8_t data)
{

	if(frontParam == -1)
     284:	4b07      	ldr	r3, [pc, #28]	; (2a4 <enqueueParam+0x20>)
     286:	681b      	ldr	r3, [r3, #0]
     288:	3301      	adds	r3, #1
     28a:	d006      	beq.n	29a <enqueueParam+0x16>
	{
		frontParam = 0;
	}
	rearParam++;
     28c:	4a06      	ldr	r2, [pc, #24]	; (2a8 <enqueueParam+0x24>)
     28e:	6813      	ldr	r3, [r2, #0]
     290:	3301      	adds	r3, #1
     292:	6013      	str	r3, [r2, #0]
	queueParam[rearParam] = data;
     294:	4a05      	ldr	r2, [pc, #20]	; (2ac <enqueueParam+0x28>)
     296:	54d0      	strb	r0, [r2, r3]

}
     298:	4770      	bx	lr
		frontParam = 0;
     29a:	2200      	movs	r2, #0
     29c:	4b01      	ldr	r3, [pc, #4]	; (2a4 <enqueueParam+0x20>)
     29e:	601a      	str	r2, [r3, #0]
     2a0:	e7f4      	b.n	28c <enqueueParam+0x8>
     2a2:	46c0      	nop			; (mov r8, r8)
     2a4:	20000004 	.word	0x20000004
     2a8:	2000000c 	.word	0x2000000c
     2ac:	20000304 	.word	0x20000304

000002b0 <clearQueues>:

void clearQueues(void)
{
     2b0:	b530      	push	{r4, r5, lr}

	for(int i = 0 ; i < (MAXSIZE - 1) ; i++)
     2b2:	4b0e      	ldr	r3, [pc, #56]	; (2ec <clearQueues+0x3c>)
     2b4:	6818      	ldr	r0, [r3, #0]
     2b6:	1e43      	subs	r3, r0, #1
     2b8:	2b00      	cmp	r3, #0
     2ba:	dd0b      	ble.n	2d4 <clearQueues+0x24>
     2bc:	0018      	movs	r0, r3
     2be:	2300      	movs	r3, #0
	{
		queueParam[i] = 0;
     2c0:	4d0b      	ldr	r5, [pc, #44]	; (2f0 <clearQueues+0x40>)
     2c2:	2200      	movs	r2, #0
		queueParser[i] = 0;
     2c4:	4c0b      	ldr	r4, [pc, #44]	; (2f4 <clearQueues+0x44>)
		queueParam[i] = 0;
     2c6:	1959      	adds	r1, r3, r5
     2c8:	700a      	strb	r2, [r1, #0]
		queueParser[i] = 0;
     2ca:	1919      	adds	r1, r3, r4
     2cc:	700a      	strb	r2, [r1, #0]
	for(int i = 0 ; i < (MAXSIZE - 1) ; i++)
     2ce:	3301      	adds	r3, #1
     2d0:	4283      	cmp	r3, r0
     2d2:	d1f8      	bne.n	2c6 <clearQueues+0x16>
	}
	
	frontParser = -1;
     2d4:	2301      	movs	r3, #1
     2d6:	425b      	negs	r3, r3
     2d8:	4a07      	ldr	r2, [pc, #28]	; (2f8 <clearQueues+0x48>)
     2da:	6013      	str	r3, [r2, #0]
	frontParam = -1;
     2dc:	4a07      	ldr	r2, [pc, #28]	; (2fc <clearQueues+0x4c>)
     2de:	6013      	str	r3, [r2, #0]
	rearParam = -1;
     2e0:	4a07      	ldr	r2, [pc, #28]	; (300 <clearQueues+0x50>)
     2e2:	6013      	str	r3, [r2, #0]
	rearParser = -1;
     2e4:	4a07      	ldr	r2, [pc, #28]	; (304 <clearQueues+0x54>)
     2e6:	6013      	str	r3, [r2, #0]
}
     2e8:	bd30      	pop	{r4, r5, pc}
     2ea:	46c0      	nop			; (mov r8, r8)
     2ec:	20000000 	.word	0x20000000
     2f0:	20000304 	.word	0x20000304
     2f4:	200002d0 	.word	0x200002d0
     2f8:	20000008 	.word	0x20000008
     2fc:	20000004 	.word	0x20000004
     300:	2000000c 	.word	0x2000000c
     304:	20000010 	.word	0x20000010

00000308 <queueTransmogrifier>:

void queueTransmogrifier(void)
{
     308:	b570      	push	{r4, r5, r6, lr}
	
	Function operates while the queueParser is not empty, then:
	
	*/
	
	int param = 0;
     30a:	2400      	movs	r4, #0
	char currentByte;
	
	while(!isEmptyParser())
     30c:	4d0b      	ldr	r5, [pc, #44]	; (33c <queueTransmogrifier+0x34>)
	{
		
		currentByte = dequeueParser();		//deque from parser
     30e:	4e0c      	ldr	r6, [pc, #48]	; (340 <queueTransmogrifier+0x38>)
	while(!isEmptyParser())
     310:	e003      	b.n	31a <queueTransmogrifier+0x12>
		{
			param = (10 * param) + (int)(currentByte-48);
		}
		else
		{
			enqueueParam(param);
     312:	b2e0      	uxtb	r0, r4
     314:	4b0b      	ldr	r3, [pc, #44]	; (344 <queueTransmogrifier+0x3c>)
     316:	4798      	blx	r3
			param = 0;	
     318:	2400      	movs	r4, #0
	while(!isEmptyParser())
     31a:	47a8      	blx	r5
     31c:	2800      	cmp	r0, #0
     31e:	d108      	bne.n	332 <queueTransmogrifier+0x2a>
		currentByte = dequeueParser();		//deque from parser
     320:	47b0      	blx	r6
		if(currentByte != 0x3B)
     322:	283b      	cmp	r0, #59	; 0x3b
     324:	d0f5      	beq.n	312 <queueTransmogrifier+0xa>
			param = (10 * param) + (int)(currentByte-48);
     326:	00a3      	lsls	r3, r4, #2
     328:	191c      	adds	r4, r3, r4
     32a:	0064      	lsls	r4, r4, #1
     32c:	3830      	subs	r0, #48	; 0x30
     32e:	1904      	adds	r4, r0, r4
     330:	e7f3      	b.n	31a <queueTransmogrifier+0x12>
		}
	}
	enqueueParam(param);
     332:	b2e0      	uxtb	r0, r4
     334:	4b03      	ldr	r3, [pc, #12]	; (344 <queueTransmogrifier+0x3c>)
     336:	4798      	blx	r3
}
     338:	bd70      	pop	{r4, r5, r6, pc}
     33a:	46c0      	nop			; (mov r8, r8)
     33c:	000001d1 	.word	0x000001d1
     340:	000001e5 	.word	0x000001e5
     344:	00000285 	.word	0x00000285

00000348 <CSIignoreState>:
	}
}

void CSIignoreState(uint8_t character)
{
	if(character == 0x1B)
     348:	281b      	cmp	r0, #27
     34a:	d003      	beq.n	354 <CSIignoreState+0xc>
	{
		currentState = stateGround;
	}
	else
	{
		currentState = stateGround;
     34c:	2200      	movs	r2, #0
     34e:	4b03      	ldr	r3, [pc, #12]	; (35c <CSIignoreState+0x14>)
     350:	701a      	strb	r2, [r3, #0]
	}
}
     352:	4770      	bx	lr
		currentState = stateGround;
     354:	2200      	movs	r2, #0
     356:	4b01      	ldr	r3, [pc, #4]	; (35c <CSIignoreState+0x14>)
     358:	701a      	strb	r2, [r3, #0]
     35a:	e7fa      	b.n	352 <CSIignoreState+0xa>
     35c:	200002c1 	.word	0x200002c1

00000360 <SC>:
/************************************************************************/

void SC()
{
	//Save cursor position
	DECSCX = xCharPos;
     360:	4b05      	ldr	r3, [pc, #20]	; (378 <SC+0x18>)
     362:	881a      	ldrh	r2, [r3, #0]
     364:	4b05      	ldr	r3, [pc, #20]	; (37c <SC+0x1c>)
     366:	701a      	strb	r2, [r3, #0]
	DECSCY = yCharPos;
     368:	4b05      	ldr	r3, [pc, #20]	; (380 <SC+0x20>)
     36a:	881a      	ldrh	r2, [r3, #0]
     36c:	4b05      	ldr	r3, [pc, #20]	; (384 <SC+0x24>)
     36e:	701a      	strb	r2, [r3, #0]
	currentState = stateGround;
     370:	2200      	movs	r2, #0
     372:	4b05      	ldr	r3, [pc, #20]	; (388 <SC+0x28>)
     374:	701a      	strb	r2, [r3, #0]
}
     376:	4770      	bx	lr
     378:	200002bc 	.word	0x200002bc
     37c:	200001f8 	.word	0x200001f8
     380:	200002be 	.word	0x200002be
     384:	200001f9 	.word	0x200001f9
     388:	200002c1 	.word	0x200002c1

0000038c <RC>:

void RC()
{
     38c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//Restore cursor to saved position
	
	char tempCharacter;
	
	drawChar(consoleDisplay[xCharPos][yCharPos]);
     38e:	4c0f      	ldr	r4, [pc, #60]	; (3cc <RC+0x40>)
     390:	4f0f      	ldr	r7, [pc, #60]	; (3d0 <RC+0x44>)
     392:	883a      	ldrh	r2, [r7, #0]
     394:	4e0f      	ldr	r6, [pc, #60]	; (3d4 <RC+0x48>)
     396:	8831      	ldrh	r1, [r6, #0]
     398:	0053      	lsls	r3, r2, #1
     39a:	189b      	adds	r3, r3, r2
     39c:	00db      	lsls	r3, r3, #3
     39e:	18e3      	adds	r3, r4, r3
     3a0:	5c58      	ldrb	r0, [r3, r1]
     3a2:	4d0d      	ldr	r5, [pc, #52]	; (3d8 <RC+0x4c>)
     3a4:	47a8      	blx	r5
	xCharPos = DECSCX;
     3a6:	4b0d      	ldr	r3, [pc, #52]	; (3dc <RC+0x50>)
     3a8:	781a      	ldrb	r2, [r3, #0]
     3aa:	803a      	strh	r2, [r7, #0]
	yCharPos = DECSCY;
     3ac:	4b0c      	ldr	r3, [pc, #48]	; (3e0 <RC+0x54>)
     3ae:	7819      	ldrb	r1, [r3, #0]
     3b0:	8031      	strh	r1, [r6, #0]
	tempCharacter = consoleDisplay[xCharPos][yCharPos];
     3b2:	0053      	lsls	r3, r2, #1
     3b4:	189b      	adds	r3, r3, r2
     3b6:	00db      	lsls	r3, r3, #3
     3b8:	18e3      	adds	r3, r4, r3
	drawChar(tempCharacter);
     3ba:	5c58      	ldrb	r0, [r3, r1]
     3bc:	47a8      	blx	r5
	blinkCursor();
     3be:	4b09      	ldr	r3, [pc, #36]	; (3e4 <RC+0x58>)
     3c0:	4798      	blx	r3
	currentState = stateGround;
     3c2:	2200      	movs	r2, #0
     3c4:	4b08      	ldr	r3, [pc, #32]	; (3e8 <RC+0x5c>)
     3c6:	701a      	strb	r2, [r3, #0]
}
     3c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     3ca:	46c0      	nop			; (mov r8, r8)
     3cc:	200003c4 	.word	0x200003c4
     3d0:	200002bc 	.word	0x200002bc
     3d4:	200002be 	.word	0x200002be
     3d8:	000028ed 	.word	0x000028ed
     3dc:	200001f8 	.word	0x200001f8
     3e0:	200001f9 	.word	0x200001f9
     3e4:	000029d5 	.word	0x000029d5
     3e8:	200002c1 	.word	0x200002c1

000003ec <IND>:

void IND()
{
     3ec:	b570      	push	{r4, r5, r6, lr}
	//performs newline() if row = 24
	
	char tempCharacter;
	int xTemp = 0;
	
	if(yCharPos < 23)
     3ee:	4b19      	ldr	r3, [pc, #100]	; (454 <IND+0x68>)
     3f0:	881a      	ldrh	r2, [r3, #0]
     3f2:	2a16      	cmp	r2, #22
     3f4:	d914      	bls.n	420 <IND+0x34>
		drawChar(tempCharacter);
		blinkCursor();
	}
	else
	{
		xTemp = xCharPos;
     3f6:	4d18      	ldr	r5, [pc, #96]	; (458 <IND+0x6c>)
     3f8:	882c      	ldrh	r4, [r5, #0]
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     3fa:	0063      	lsls	r3, r4, #1
     3fc:	191b      	adds	r3, r3, r4
     3fe:	00db      	lsls	r3, r3, #3
     400:	4916      	ldr	r1, [pc, #88]	; (45c <IND+0x70>)
     402:	18cb      	adds	r3, r1, r3
     404:	5c98      	ldrb	r0, [r3, r2]
     406:	4e16      	ldr	r6, [pc, #88]	; (460 <IND+0x74>)
     408:	47b0      	blx	r6
		newLine();
     40a:	4b16      	ldr	r3, [pc, #88]	; (464 <IND+0x78>)
     40c:	4798      	blx	r3
		drawChar(0x00);
     40e:	2000      	movs	r0, #0
     410:	47b0      	blx	r6
		xCharPos = xTemp;
     412:	802c      	strh	r4, [r5, #0]
		blinkCursor();
     414:	4b14      	ldr	r3, [pc, #80]	; (468 <IND+0x7c>)
     416:	4798      	blx	r3
	}
		
		currentState = stateGround;	
     418:	2200      	movs	r2, #0
     41a:	4b14      	ldr	r3, [pc, #80]	; (46c <IND+0x80>)
     41c:	701a      	strb	r2, [r3, #0]
}
     41e:	bd70      	pop	{r4, r5, r6, pc}
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     420:	4c0e      	ldr	r4, [pc, #56]	; (45c <IND+0x70>)
     422:	4d0d      	ldr	r5, [pc, #52]	; (458 <IND+0x6c>)
     424:	8829      	ldrh	r1, [r5, #0]
     426:	004b      	lsls	r3, r1, #1
     428:	185b      	adds	r3, r3, r1
     42a:	00db      	lsls	r3, r3, #3
     42c:	18e3      	adds	r3, r4, r3
     42e:	5c98      	ldrb	r0, [r3, r2]
     430:	4e0b      	ldr	r6, [pc, #44]	; (460 <IND+0x74>)
     432:	47b0      	blx	r6
		yCharPos++;
     434:	4a07      	ldr	r2, [pc, #28]	; (454 <IND+0x68>)
     436:	8813      	ldrh	r3, [r2, #0]
     438:	3301      	adds	r3, #1
     43a:	b29b      	uxth	r3, r3
     43c:	8013      	strh	r3, [r2, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     43e:	8829      	ldrh	r1, [r5, #0]
     440:	004a      	lsls	r2, r1, #1
     442:	1852      	adds	r2, r2, r1
     444:	00d2      	lsls	r2, r2, #3
     446:	18a4      	adds	r4, r4, r2
		drawChar(tempCharacter);
     448:	5ce0      	ldrb	r0, [r4, r3]
     44a:	47b0      	blx	r6
		blinkCursor();
     44c:	4b06      	ldr	r3, [pc, #24]	; (468 <IND+0x7c>)
     44e:	4798      	blx	r3
     450:	e7e2      	b.n	418 <IND+0x2c>
     452:	46c0      	nop			; (mov r8, r8)
     454:	200002be 	.word	0x200002be
     458:	200002bc 	.word	0x200002bc
     45c:	200003c4 	.word	0x200003c4
     460:	000028ed 	.word	0x000028ed
     464:	00002b31 	.word	0x00002b31
     468:	000029d5 	.word	0x000029d5
     46c:	200002c1 	.word	0x200002c1

00000470 <NEL>:

void NEL()
{
     470:	b570      	push	{r4, r5, r6, lr}
	//new line, moves down one line and to the
	//first column (CR,LF) scrolls if row = 24
	
	char tempCharacter;
	
	if(yCharPos < 23)
     472:	4b18      	ldr	r3, [pc, #96]	; (4d4 <NEL+0x64>)
     474:	881a      	ldrh	r2, [r3, #0]
     476:	2a16      	cmp	r2, #22
     478:	d915      	bls.n	4a6 <NEL+0x36>
		drawChar(tempCharacter);
		blinkCursor();
	}
	else
	{
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     47a:	4c17      	ldr	r4, [pc, #92]	; (4d8 <NEL+0x68>)
     47c:	8821      	ldrh	r1, [r4, #0]
     47e:	004b      	lsls	r3, r1, #1
     480:	185b      	adds	r3, r3, r1
     482:	00db      	lsls	r3, r3, #3
     484:	4915      	ldr	r1, [pc, #84]	; (4dc <NEL+0x6c>)
     486:	18cb      	adds	r3, r1, r3
     488:	5c98      	ldrb	r0, [r3, r2]
     48a:	4d15      	ldr	r5, [pc, #84]	; (4e0 <NEL+0x70>)
     48c:	47a8      	blx	r5
		newLine();
     48e:	4b15      	ldr	r3, [pc, #84]	; (4e4 <NEL+0x74>)
     490:	4798      	blx	r3
		drawChar(0x00);
     492:	2000      	movs	r0, #0
     494:	47a8      	blx	r5
		xCharPos = 0;
     496:	2300      	movs	r3, #0
     498:	8023      	strh	r3, [r4, #0]
		blinkCursor();
     49a:	4b13      	ldr	r3, [pc, #76]	; (4e8 <NEL+0x78>)
     49c:	4798      	blx	r3
	}
		
	currentState = stateGround;
     49e:	2200      	movs	r2, #0
     4a0:	4b12      	ldr	r3, [pc, #72]	; (4ec <NEL+0x7c>)
     4a2:	701a      	strb	r2, [r3, #0]
}
     4a4:	bd70      	pop	{r4, r5, r6, pc}
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     4a6:	4c0d      	ldr	r4, [pc, #52]	; (4dc <NEL+0x6c>)
     4a8:	4d0b      	ldr	r5, [pc, #44]	; (4d8 <NEL+0x68>)
     4aa:	8829      	ldrh	r1, [r5, #0]
     4ac:	004b      	lsls	r3, r1, #1
     4ae:	185b      	adds	r3, r3, r1
     4b0:	00db      	lsls	r3, r3, #3
     4b2:	18e3      	adds	r3, r4, r3
     4b4:	5c98      	ldrb	r0, [r3, r2]
     4b6:	4e0a      	ldr	r6, [pc, #40]	; (4e0 <NEL+0x70>)
     4b8:	47b0      	blx	r6
		yCharPos++;
     4ba:	4a06      	ldr	r2, [pc, #24]	; (4d4 <NEL+0x64>)
     4bc:	8813      	ldrh	r3, [r2, #0]
     4be:	3301      	adds	r3, #1
     4c0:	b29b      	uxth	r3, r3
     4c2:	8013      	strh	r3, [r2, #0]
		xCharPos = 0;
     4c4:	2200      	movs	r2, #0
     4c6:	802a      	strh	r2, [r5, #0]
		drawChar(tempCharacter);
     4c8:	5ce0      	ldrb	r0, [r4, r3]
     4ca:	47b0      	blx	r6
		blinkCursor();
     4cc:	4b06      	ldr	r3, [pc, #24]	; (4e8 <NEL+0x78>)
     4ce:	4798      	blx	r3
     4d0:	e7e5      	b.n	49e <NEL+0x2e>
     4d2:	46c0      	nop			; (mov r8, r8)
     4d4:	200002be 	.word	0x200002be
     4d8:	200002bc 	.word	0x200002bc
     4dc:	200003c4 	.word	0x200003c4
     4e0:	000028ed 	.word	0x000028ed
     4e4:	00002b31 	.word	0x00002b31
     4e8:	000029d5 	.word	0x000029d5
     4ec:	200002c1 	.word	0x200002c1

000004f0 <RI>:

void RI()
{
     4f0:	b570      	push	{r4, r5, r6, lr}
	//Reverse Index
	//Moves the cursor to the same horizontal position on the preceding line
	
	char tempCharacter;
	
	if(yCharPos == 0)
     4f2:	4b10      	ldr	r3, [pc, #64]	; (534 <RI+0x44>)
     4f4:	881a      	ldrh	r2, [r3, #0]
     4f6:	2a00      	cmp	r2, #0
     4f8:	d103      	bne.n	502 <RI+0x12>
		yCharPos--;
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
		drawChar(tempCharacter);
		blinkCursor();
	}
	currentState = stateGround;
     4fa:	2200      	movs	r2, #0
     4fc:	4b0e      	ldr	r3, [pc, #56]	; (538 <RI+0x48>)
     4fe:	701a      	strb	r2, [r3, #0]
}
     500:	bd70      	pop	{r4, r5, r6, pc}
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     502:	4c0e      	ldr	r4, [pc, #56]	; (53c <RI+0x4c>)
     504:	4d0e      	ldr	r5, [pc, #56]	; (540 <RI+0x50>)
     506:	8829      	ldrh	r1, [r5, #0]
     508:	004b      	lsls	r3, r1, #1
     50a:	185b      	adds	r3, r3, r1
     50c:	00db      	lsls	r3, r3, #3
     50e:	18e3      	adds	r3, r4, r3
     510:	5c98      	ldrb	r0, [r3, r2]
     512:	4e0c      	ldr	r6, [pc, #48]	; (544 <RI+0x54>)
     514:	47b0      	blx	r6
		yCharPos--;
     516:	4a07      	ldr	r2, [pc, #28]	; (534 <RI+0x44>)
     518:	8813      	ldrh	r3, [r2, #0]
     51a:	3b01      	subs	r3, #1
     51c:	b29b      	uxth	r3, r3
     51e:	8013      	strh	r3, [r2, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     520:	8829      	ldrh	r1, [r5, #0]
     522:	004a      	lsls	r2, r1, #1
     524:	1852      	adds	r2, r2, r1
     526:	00d2      	lsls	r2, r2, #3
     528:	18a4      	adds	r4, r4, r2
		drawChar(tempCharacter);
     52a:	5ce0      	ldrb	r0, [r4, r3]
     52c:	47b0      	blx	r6
		blinkCursor();
     52e:	4b06      	ldr	r3, [pc, #24]	; (548 <RI+0x58>)
     530:	4798      	blx	r3
     532:	e7e2      	b.n	4fa <RI+0xa>
     534:	200002be 	.word	0x200002be
     538:	200002c1 	.word	0x200002c1
     53c:	200003c4 	.word	0x200003c4
     540:	200002bc 	.word	0x200002bc
     544:	000028ed 	.word	0x000028ed
     548:	000029d5 	.word	0x000029d5

0000054c <RIS>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     54c:	f3bf 8f4f 	dsb	sy
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
     550:	4a03      	ldr	r2, [pc, #12]	; (560 <RIS+0x14>)
     552:	4b04      	ldr	r3, [pc, #16]	; (564 <RIS+0x18>)
     554:	60da      	str	r2, [r3, #12]
     556:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     55a:	46c0      	nop			; (mov r8, r8)
     55c:	e7fd      	b.n	55a <RIS+0xe>
     55e:	46c0      	nop			; (mov r8, r8)
     560:	05fa0004 	.word	0x05fa0004
     564:	e000ed00 	.word	0xe000ed00

00000568 <escState>:
{
     568:	b510      	push	{r4, lr}
	if(character == 0x37)		//ESC + 7 - (DECSC) -
     56a:	2837      	cmp	r0, #55	; 0x37
     56c:	d010      	beq.n	590 <escState+0x28>
	else if(character == 0x38)		//ESC + 8 - (DECRC) -
     56e:	2838      	cmp	r0, #56	; 0x38
     570:	d011      	beq.n	596 <escState+0x2e>
	else if(character == 0x44)		//ESC + D - (IND) - 
     572:	2844      	cmp	r0, #68	; 0x44
     574:	d012      	beq.n	59c <escState+0x34>
	else if(character == 0x45)		//ESC + E - (NEL) -
     576:	2845      	cmp	r0, #69	; 0x45
     578:	d013      	beq.n	5a2 <escState+0x3a>
	else if(character == 0x4D)		//ESC + M - (RI)
     57a:	284d      	cmp	r0, #77	; 0x4d
     57c:	d014      	beq.n	5a8 <escState+0x40>
	else if(character == 0x63)		//ESC + c - (RIS)
     57e:	2863      	cmp	r0, #99	; 0x63
     580:	d015      	beq.n	5ae <escState+0x46>
	else if(character == 0x23 || character == 0x28)
     582:	2823      	cmp	r0, #35	; 0x23
     584:	d015      	beq.n	5b2 <escState+0x4a>
     586:	2828      	cmp	r0, #40	; 0x28
     588:	d013      	beq.n	5b2 <escState+0x4a>
	else if(character == 0x5B)
     58a:	285b      	cmp	r0, #91	; 0x5b
     58c:	d017      	beq.n	5be <escState+0x56>
}
     58e:	bd10      	pop	{r4, pc}
		SC();
     590:	4b0d      	ldr	r3, [pc, #52]	; (5c8 <escState+0x60>)
     592:	4798      	blx	r3
     594:	e7fb      	b.n	58e <escState+0x26>
		RC();
     596:	4b0d      	ldr	r3, [pc, #52]	; (5cc <escState+0x64>)
     598:	4798      	blx	r3
     59a:	e7f8      	b.n	58e <escState+0x26>
		IND();			
     59c:	4b0c      	ldr	r3, [pc, #48]	; (5d0 <escState+0x68>)
     59e:	4798      	blx	r3
     5a0:	e7f5      	b.n	58e <escState+0x26>
		NEL();
     5a2:	4b0c      	ldr	r3, [pc, #48]	; (5d4 <escState+0x6c>)
     5a4:	4798      	blx	r3
     5a6:	e7f2      	b.n	58e <escState+0x26>
		RI();
     5a8:	4b0b      	ldr	r3, [pc, #44]	; (5d8 <escState+0x70>)
     5aa:	4798      	blx	r3
     5ac:	e7ef      	b.n	58e <escState+0x26>
		RIS();
     5ae:	4b0b      	ldr	r3, [pc, #44]	; (5dc <escState+0x74>)
     5b0:	4798      	blx	r3
		stateEnterBuffer = character;
     5b2:	4b0b      	ldr	r3, [pc, #44]	; (5e0 <escState+0x78>)
     5b4:	7018      	strb	r0, [r3, #0]
		currentState = stateESCinter;
     5b6:	2202      	movs	r2, #2
     5b8:	4b0a      	ldr	r3, [pc, #40]	; (5e4 <escState+0x7c>)
     5ba:	701a      	strb	r2, [r3, #0]
     5bc:	e7e7      	b.n	58e <escState+0x26>
		currentState = stateCSIentry;
     5be:	2203      	movs	r2, #3
     5c0:	4b08      	ldr	r3, [pc, #32]	; (5e4 <escState+0x7c>)
     5c2:	701a      	strb	r2, [r3, #0]
}
     5c4:	e7e3      	b.n	58e <escState+0x26>
     5c6:	46c0      	nop			; (mov r8, r8)
     5c8:	00000361 	.word	0x00000361
     5cc:	0000038d 	.word	0x0000038d
     5d0:	000003ed 	.word	0x000003ed
     5d4:	00000471 	.word	0x00000471
     5d8:	000004f1 	.word	0x000004f1
     5dc:	0000054d 	.word	0x0000054d
     5e0:	20000346 	.word	0x20000346
     5e4:	200002c1 	.word	0x200002c1

000005e8 <CUU>:

/************************************************************************/
/*    CSI mnemonic functions                                            */
/************************************************************************/
void CUU() // Cursor Up
{
     5e8:	b570      	push	{r4, r5, r6, lr}
	{
		ring_get(paramBuffer, (int)parameter);
	}
	*/
		
	if(yCharPos > 0)
     5ea:	4b10      	ldr	r3, [pc, #64]	; (62c <CUU+0x44>)
     5ec:	881a      	ldrh	r2, [r3, #0]
     5ee:	2a00      	cmp	r2, #0
     5f0:	d103      	bne.n	5fa <CUU+0x12>
		yCharPos = yCharPos - parameter;
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
		drawChar(tempCharacter);
		blinkCursor();
	}
	currentState = stateGround;
     5f2:	2200      	movs	r2, #0
     5f4:	4b0e      	ldr	r3, [pc, #56]	; (630 <CUU+0x48>)
     5f6:	701a      	strb	r2, [r3, #0]
}
     5f8:	bd70      	pop	{r4, r5, r6, pc}
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     5fa:	4c0e      	ldr	r4, [pc, #56]	; (634 <CUU+0x4c>)
     5fc:	4d0e      	ldr	r5, [pc, #56]	; (638 <CUU+0x50>)
     5fe:	8829      	ldrh	r1, [r5, #0]
     600:	004b      	lsls	r3, r1, #1
     602:	185b      	adds	r3, r3, r1
     604:	00db      	lsls	r3, r3, #3
     606:	18e3      	adds	r3, r4, r3
     608:	5c98      	ldrb	r0, [r3, r2]
     60a:	4e0c      	ldr	r6, [pc, #48]	; (63c <CUU+0x54>)
     60c:	47b0      	blx	r6
		yCharPos = yCharPos - parameter;
     60e:	4a07      	ldr	r2, [pc, #28]	; (62c <CUU+0x44>)
     610:	8813      	ldrh	r3, [r2, #0]
     612:	3b01      	subs	r3, #1
     614:	b29b      	uxth	r3, r3
     616:	8013      	strh	r3, [r2, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     618:	8829      	ldrh	r1, [r5, #0]
     61a:	004a      	lsls	r2, r1, #1
     61c:	1852      	adds	r2, r2, r1
     61e:	00d2      	lsls	r2, r2, #3
     620:	18a4      	adds	r4, r4, r2
		drawChar(tempCharacter);
     622:	5ce0      	ldrb	r0, [r4, r3]
     624:	47b0      	blx	r6
		blinkCursor();
     626:	4b06      	ldr	r3, [pc, #24]	; (640 <CUU+0x58>)
     628:	4798      	blx	r3
     62a:	e7e2      	b.n	5f2 <CUU+0xa>
     62c:	200002be 	.word	0x200002be
     630:	200002c1 	.word	0x200002c1
     634:	200003c4 	.word	0x200003c4
     638:	200002bc 	.word	0x200002bc
     63c:	000028ed 	.word	0x000028ed
     640:	000029d5 	.word	0x000029d5

00000644 <CUD>:
void CUD() //Cursor Down
{
     644:	b570      	push	{r4, r5, r6, lr}
	unsigned char tempCharacter;
	if(yCharPos < 23)
     646:	4b10      	ldr	r3, [pc, #64]	; (688 <CUD+0x44>)
     648:	881a      	ldrh	r2, [r3, #0]
     64a:	2a16      	cmp	r2, #22
     64c:	d903      	bls.n	656 <CUD+0x12>
		yCharPos++;
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
		drawChar(tempCharacter);
		blinkCursor();
	}
	currentState = stateGround;
     64e:	2200      	movs	r2, #0
     650:	4b0e      	ldr	r3, [pc, #56]	; (68c <CUD+0x48>)
     652:	701a      	strb	r2, [r3, #0]
}
     654:	bd70      	pop	{r4, r5, r6, pc}
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     656:	4c0e      	ldr	r4, [pc, #56]	; (690 <CUD+0x4c>)
     658:	4d0e      	ldr	r5, [pc, #56]	; (694 <CUD+0x50>)
     65a:	8829      	ldrh	r1, [r5, #0]
     65c:	004b      	lsls	r3, r1, #1
     65e:	185b      	adds	r3, r3, r1
     660:	00db      	lsls	r3, r3, #3
     662:	18e3      	adds	r3, r4, r3
     664:	5c98      	ldrb	r0, [r3, r2]
     666:	4e0c      	ldr	r6, [pc, #48]	; (698 <CUD+0x54>)
     668:	47b0      	blx	r6
		yCharPos++;
     66a:	4a07      	ldr	r2, [pc, #28]	; (688 <CUD+0x44>)
     66c:	8813      	ldrh	r3, [r2, #0]
     66e:	3301      	adds	r3, #1
     670:	b29b      	uxth	r3, r3
     672:	8013      	strh	r3, [r2, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     674:	8829      	ldrh	r1, [r5, #0]
     676:	004a      	lsls	r2, r1, #1
     678:	1852      	adds	r2, r2, r1
     67a:	00d2      	lsls	r2, r2, #3
     67c:	18a4      	adds	r4, r4, r2
		drawChar(tempCharacter);
     67e:	5ce0      	ldrb	r0, [r4, r3]
     680:	47b0      	blx	r6
		blinkCursor();
     682:	4b06      	ldr	r3, [pc, #24]	; (69c <CUD+0x58>)
     684:	4798      	blx	r3
     686:	e7e2      	b.n	64e <CUD+0xa>
     688:	200002be 	.word	0x200002be
     68c:	200002c1 	.word	0x200002c1
     690:	200003c4 	.word	0x200003c4
     694:	200002bc 	.word	0x200002bc
     698:	000028ed 	.word	0x000028ed
     69c:	000029d5 	.word	0x000029d5

000006a0 <CUF>:
void CUF() //Cursor Forward
{
     6a0:	b570      	push	{r4, r5, r6, lr}
	unsigned char tempCharacter;
	if(xCharPos < 79)
     6a2:	4b10      	ldr	r3, [pc, #64]	; (6e4 <CUF+0x44>)
     6a4:	881b      	ldrh	r3, [r3, #0]
     6a6:	2b4e      	cmp	r3, #78	; 0x4e
     6a8:	d903      	bls.n	6b2 <CUF+0x12>
		xCharPos++;
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
		drawChar(tempCharacter);
		blinkCursor();
	}
	currentState = stateGround;
     6aa:	2200      	movs	r2, #0
     6ac:	4b0e      	ldr	r3, [pc, #56]	; (6e8 <CUF+0x48>)
     6ae:	701a      	strb	r2, [r3, #0]
}
     6b0:	bd70      	pop	{r4, r5, r6, pc}
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     6b2:	4c0e      	ldr	r4, [pc, #56]	; (6ec <CUF+0x4c>)
     6b4:	4d0e      	ldr	r5, [pc, #56]	; (6f0 <CUF+0x50>)
     6b6:	8829      	ldrh	r1, [r5, #0]
     6b8:	005a      	lsls	r2, r3, #1
     6ba:	18d2      	adds	r2, r2, r3
     6bc:	00d2      	lsls	r2, r2, #3
     6be:	18a2      	adds	r2, r4, r2
     6c0:	5c50      	ldrb	r0, [r2, r1]
     6c2:	4e0c      	ldr	r6, [pc, #48]	; (6f4 <CUF+0x54>)
     6c4:	47b0      	blx	r6
		xCharPos++;
     6c6:	4a07      	ldr	r2, [pc, #28]	; (6e4 <CUF+0x44>)
     6c8:	8813      	ldrh	r3, [r2, #0]
     6ca:	3301      	adds	r3, #1
     6cc:	b29b      	uxth	r3, r3
     6ce:	8013      	strh	r3, [r2, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     6d0:	8829      	ldrh	r1, [r5, #0]
     6d2:	005a      	lsls	r2, r3, #1
     6d4:	18d3      	adds	r3, r2, r3
     6d6:	00db      	lsls	r3, r3, #3
     6d8:	18e3      	adds	r3, r4, r3
		drawChar(tempCharacter);
     6da:	5c58      	ldrb	r0, [r3, r1]
     6dc:	47b0      	blx	r6
		blinkCursor();
     6de:	4b06      	ldr	r3, [pc, #24]	; (6f8 <CUF+0x58>)
     6e0:	4798      	blx	r3
     6e2:	e7e2      	b.n	6aa <CUF+0xa>
     6e4:	200002bc 	.word	0x200002bc
     6e8:	200002c1 	.word	0x200002c1
     6ec:	200003c4 	.word	0x200003c4
     6f0:	200002be 	.word	0x200002be
     6f4:	000028ed 	.word	0x000028ed
     6f8:	000029d5 	.word	0x000029d5

000006fc <CUB>:
void CUB() //Cursor Backward
{
     6fc:	b570      	push	{r4, r5, r6, lr}
	unsigned char tempCharacter;
	if(xCharPos > 0)
     6fe:	4b10      	ldr	r3, [pc, #64]	; (740 <CUB+0x44>)
     700:	881b      	ldrh	r3, [r3, #0]
     702:	2b00      	cmp	r3, #0
     704:	d103      	bne.n	70e <CUB+0x12>
		xCharPos--;
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
		drawChar(tempCharacter);
		blinkCursor();
	}
	currentState = stateGround;
     706:	2200      	movs	r2, #0
     708:	4b0e      	ldr	r3, [pc, #56]	; (744 <CUB+0x48>)
     70a:	701a      	strb	r2, [r3, #0]
}
     70c:	bd70      	pop	{r4, r5, r6, pc}
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     70e:	4c0e      	ldr	r4, [pc, #56]	; (748 <CUB+0x4c>)
     710:	4d0e      	ldr	r5, [pc, #56]	; (74c <CUB+0x50>)
     712:	8829      	ldrh	r1, [r5, #0]
     714:	005a      	lsls	r2, r3, #1
     716:	18d2      	adds	r2, r2, r3
     718:	00d2      	lsls	r2, r2, #3
     71a:	18a2      	adds	r2, r4, r2
     71c:	5c50      	ldrb	r0, [r2, r1]
     71e:	4e0c      	ldr	r6, [pc, #48]	; (750 <CUB+0x54>)
     720:	47b0      	blx	r6
		xCharPos--;
     722:	4a07      	ldr	r2, [pc, #28]	; (740 <CUB+0x44>)
     724:	8813      	ldrh	r3, [r2, #0]
     726:	3b01      	subs	r3, #1
     728:	b29b      	uxth	r3, r3
     72a:	8013      	strh	r3, [r2, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     72c:	8829      	ldrh	r1, [r5, #0]
     72e:	005a      	lsls	r2, r3, #1
     730:	18d3      	adds	r3, r2, r3
     732:	00db      	lsls	r3, r3, #3
     734:	18e3      	adds	r3, r4, r3
		drawChar(tempCharacter);
     736:	5c58      	ldrb	r0, [r3, r1]
     738:	47b0      	blx	r6
		blinkCursor();
     73a:	4b06      	ldr	r3, [pc, #24]	; (754 <CUB+0x58>)
     73c:	4798      	blx	r3
     73e:	e7e2      	b.n	706 <CUB+0xa>
     740:	200002bc 	.word	0x200002bc
     744:	200002c1 	.word	0x200002c1
     748:	200003c4 	.word	0x200003c4
     74c:	200002be 	.word	0x200002be
     750:	000028ed 	.word	0x000028ed
     754:	000029d5 	.word	0x000029d5

00000758 <isValidCSIEscapeCode>:
bool isValidCSIEscapeCode(uint8_t character)
{
	
	for(int i = 0; i <= sizeof(csiEscCodes)/sizeof(csiEscCodes[0]) ; i++)
	{
		if(character == csiEscCodes[i])
     758:	2841      	cmp	r0, #65	; 0x41
     75a:	d006      	beq.n	76a <isValidCSIEscapeCode+0x12>
     75c:	4b04      	ldr	r3, [pc, #16]	; (770 <isValidCSIEscapeCode+0x18>)
     75e:	3301      	adds	r3, #1
     760:	3301      	adds	r3, #1
     762:	1e5a      	subs	r2, r3, #1
     764:	7812      	ldrb	r2, [r2, #0]
     766:	4282      	cmp	r2, r0
     768:	d1fa      	bne.n	760 <isValidCSIEscapeCode+0x8>
		{
			return true;	
		}
	}
	return false;
}
     76a:	2001      	movs	r0, #1
     76c:	4770      	bx	lr
     76e:	46c0      	nop			; (mov r8, r8)
     770:	00005208 	.word	0x00005208

00000774 <CSIparamState>:
{
     774:	b570      	push	{r4, r5, r6, lr}
     776:	0004      	movs	r4, r0
	if(character >= 0x30 && character <= 0x39)		//character is a digit, put it in the buffer
     778:	0003      	movs	r3, r0
     77a:	3b30      	subs	r3, #48	; 0x30
     77c:	2b09      	cmp	r3, #9
     77e:	d909      	bls.n	794 <CSIparamState+0x20>
	else if(character == 0x3B)					//character is ';', now we take items out of 
     780:	283b      	cmp	r0, #59	; 0x3b
     782:	d00a      	beq.n	79a <CSIparamState+0x26>
	else if(isValidCSIEscapeCode(character))		//character matches a supported escape code
     784:	4b12      	ldr	r3, [pc, #72]	; (7d0 <CSIparamState+0x5c>)
     786:	4798      	blx	r3
     788:	2800      	cmp	r0, #0
     78a:	d10a      	bne.n	7a2 <CSIparamState+0x2e>
		currentState = stateGround;
     78c:	2200      	movs	r2, #0
     78e:	4b11      	ldr	r3, [pc, #68]	; (7d4 <CSIparamState+0x60>)
     790:	701a      	strb	r2, [r3, #0]
}
     792:	bd70      	pop	{r4, r5, r6, pc}
		enqueueParser(character);
     794:	4b10      	ldr	r3, [pc, #64]	; (7d8 <CSIparamState+0x64>)
     796:	4798      	blx	r3
     798:	e7fb      	b.n	792 <CSIparamState+0x1e>
		enqueueParser(';');						//parambuffer 			
     79a:	203b      	movs	r0, #59	; 0x3b
     79c:	4b0e      	ldr	r3, [pc, #56]	; (7d8 <CSIparamState+0x64>)
     79e:	4798      	blx	r3
     7a0:	e7f7      	b.n	792 <CSIparamState+0x1e>
		queueTransmogrifier();
     7a2:	4b0e      	ldr	r3, [pc, #56]	; (7dc <CSIparamState+0x68>)
     7a4:	4798      	blx	r3
		printf("param: ");
     7a6:	480e      	ldr	r0, [pc, #56]	; (7e0 <CSIparamState+0x6c>)
     7a8:	4b0e      	ldr	r3, [pc, #56]	; (7e4 <CSIparamState+0x70>)
     7aa:	4798      	blx	r3
		while(!isEmptyParam())
     7ac:	4d0e      	ldr	r5, [pc, #56]	; (7e8 <CSIparamState+0x74>)
			printf("%i ",dequeueParam());
     7ae:	4e0f      	ldr	r6, [pc, #60]	; (7ec <CSIparamState+0x78>)
		while(!isEmptyParam())
     7b0:	e004      	b.n	7bc <CSIparamState+0x48>
			printf("%i ",dequeueParam());
     7b2:	47b0      	blx	r6
     7b4:	0001      	movs	r1, r0
     7b6:	480e      	ldr	r0, [pc, #56]	; (7f0 <CSIparamState+0x7c>)
     7b8:	4b0a      	ldr	r3, [pc, #40]	; (7e4 <CSIparamState+0x70>)
     7ba:	4798      	blx	r3
		while(!isEmptyParam())
     7bc:	47a8      	blx	r5
     7be:	2800      	cmp	r0, #0
     7c0:	d0f7      	beq.n	7b2 <CSIparamState+0x3e>
		currentState = stateCSIentry;
     7c2:	2203      	movs	r2, #3
     7c4:	4b03      	ldr	r3, [pc, #12]	; (7d4 <CSIparamState+0x60>)
     7c6:	701a      	strb	r2, [r3, #0]
		CSIentryState(character);
     7c8:	0020      	movs	r0, r4
     7ca:	4b0a      	ldr	r3, [pc, #40]	; (7f4 <CSIparamState+0x80>)
     7cc:	4798      	blx	r3
     7ce:	e7e0      	b.n	792 <CSIparamState+0x1e>
     7d0:	00000759 	.word	0x00000759
     7d4:	200002c1 	.word	0x200002c1
     7d8:	00000215 	.word	0x00000215
     7dc:	00000309 	.word	0x00000309
     7e0:	000051fc 	.word	0x000051fc
     7e4:	000040a9 	.word	0x000040a9
     7e8:	00000241 	.word	0x00000241
     7ec:	00000255 	.word	0x00000255
     7f0:	00005204 	.word	0x00005204
     7f4:	000007f9 	.word	0x000007f9

000007f8 <CSIentryState>:
{
     7f8:	b510      	push	{r4, lr}
	if(character == 0x41)		//ESC [ A	Cursor Up
     7fa:	2841      	cmp	r0, #65	; 0x41
     7fc:	d01e      	beq.n	83c <CSIentryState+0x44>
	else if(character == 0x42)	//ESC [ B	Cursor Down
     7fe:	2842      	cmp	r0, #66	; 0x42
     800:	d01f      	beq.n	842 <CSIentryState+0x4a>
	else if(character == 0x43)	//ESC [ C	Cursor Forward
     802:	2843      	cmp	r0, #67	; 0x43
     804:	d020      	beq.n	848 <CSIentryState+0x50>
	else if(character == 0x44)	//ESC [ D	Cursor Backward
     806:	2844      	cmp	r0, #68	; 0x44
     808:	d021      	beq.n	84e <CSIentryState+0x56>
	else if(character == 0x45)	//ESC [ E	Cursor Next Line
     80a:	0003      	movs	r3, r0
     80c:	3b45      	subs	r3, #69	; 0x45
     80e:	b2db      	uxtb	r3, r3
     810:	2b15      	cmp	r3, #21
     812:	d803      	bhi.n	81c <CSIentryState+0x24>
     814:	4a19      	ldr	r2, [pc, #100]	; (87c <CSIentryState+0x84>)
     816:	40da      	lsrs	r2, r3
     818:	07d3      	lsls	r3, r2, #31
     81a:	d411      	bmi.n	840 <CSIentryState+0x48>
	else if(character == 0x6D)	//ESC [ m	Select Graphic Rendition
     81c:	286d      	cmp	r0, #109	; 0x6d
     81e:	d00f      	beq.n	840 <CSIentryState+0x48>
	else if(character >= 0x30 && character <= 0x39) // if the character is a digit 0-9
     820:	0003      	movs	r3, r0
     822:	3b30      	subs	r3, #48	; 0x30
     824:	2b09      	cmp	r3, #9
     826:	d915      	bls.n	854 <CSIentryState+0x5c>
	else if(character == 0x3B)	//Semicolon ; parameter deliminator
     828:	283b      	cmp	r0, #59	; 0x3b
     82a:	d019      	beq.n	860 <CSIentryState+0x68>
	else if(character == 0x1B)
     82c:	281b      	cmp	r0, #27
     82e:	d01d      	beq.n	86c <CSIentryState+0x74>
	else if(character == 0x3A)
     830:	283a      	cmp	r0, #58	; 0x3a
     832:	d01f      	beq.n	874 <CSIentryState+0x7c>
		currentState = stateCSIignore;
     834:	2206      	movs	r2, #6
     836:	4b12      	ldr	r3, [pc, #72]	; (880 <CSIentryState+0x88>)
     838:	701a      	strb	r2, [r3, #0]
}
     83a:	e001      	b.n	840 <CSIentryState+0x48>
		CUU();
     83c:	4b11      	ldr	r3, [pc, #68]	; (884 <CSIentryState+0x8c>)
     83e:	4798      	blx	r3
}
     840:	bd10      	pop	{r4, pc}
		CUD();
     842:	4b11      	ldr	r3, [pc, #68]	; (888 <CSIentryState+0x90>)
     844:	4798      	blx	r3
     846:	e7fb      	b.n	840 <CSIentryState+0x48>
		CUF();
     848:	4b10      	ldr	r3, [pc, #64]	; (88c <CSIentryState+0x94>)
     84a:	4798      	blx	r3
     84c:	e7f8      	b.n	840 <CSIentryState+0x48>
		CUB();
     84e:	4b10      	ldr	r3, [pc, #64]	; (890 <CSIentryState+0x98>)
     850:	4798      	blx	r3
     852:	e7f5      	b.n	840 <CSIentryState+0x48>
		currentState = stateCSIparam;
     854:	2204      	movs	r2, #4
     856:	4b0a      	ldr	r3, [pc, #40]	; (880 <CSIentryState+0x88>)
     858:	701a      	strb	r2, [r3, #0]
		CSIparamState(character);
     85a:	4b0e      	ldr	r3, [pc, #56]	; (894 <CSIentryState+0x9c>)
     85c:	4798      	blx	r3
     85e:	e7ef      	b.n	840 <CSIentryState+0x48>
		currentState = stateCSIparam;
     860:	2204      	movs	r2, #4
     862:	4b07      	ldr	r3, [pc, #28]	; (880 <CSIentryState+0x88>)
     864:	701a      	strb	r2, [r3, #0]
		CSIparamState(character);
     866:	4b0b      	ldr	r3, [pc, #44]	; (894 <CSIentryState+0x9c>)
     868:	4798      	blx	r3
     86a:	e7e9      	b.n	840 <CSIentryState+0x48>
		currentState = stateGround;
     86c:	2200      	movs	r2, #0
     86e:	4b04      	ldr	r3, [pc, #16]	; (880 <CSIentryState+0x88>)
     870:	701a      	strb	r2, [r3, #0]
     872:	e7e5      	b.n	840 <CSIentryState+0x48>
		currentState = stateCSIignore;
     874:	2206      	movs	r2, #6
     876:	4b02      	ldr	r3, [pc, #8]	; (880 <CSIentryState+0x88>)
     878:	701a      	strb	r2, [r3, #0]
     87a:	e7e1      	b.n	840 <CSIentryState+0x48>
     87c:	002c187f 	.word	0x002c187f
     880:	200002c1 	.word	0x200002c1
     884:	000005e9 	.word	0x000005e9
     888:	00000645 	.word	0x00000645
     88c:	000006a1 	.word	0x000006a1
     890:	000006fd 	.word	0x000006fd
     894:	00000775 	.word	0x00000775

00000898 <nextTab>:


int nextTab(int a) 
{
     898:	b510      	push	{r4, lr}
     89a:	b0d0      	sub	sp, #320	; 0x140
     89c:	0004      	movs	r4, r0
	int tabArray[] =
     89e:	22a0      	movs	r2, #160	; 0xa0
     8a0:	0052      	lsls	r2, r2, #1
     8a2:	4904      	ldr	r1, [pc, #16]	; (8b4 <nextTab+0x1c>)
     8a4:	4668      	mov	r0, sp
     8a6:	4b04      	ldr	r3, [pc, #16]	; (8b8 <nextTab+0x20>)
     8a8:	4798      	blx	r3
		 64,64,64,64,64,64,64,64,
		 72,72,72,72,72,72,72,72,
		 79,79,79,79,79,79,79,79
		};
	
	return tabArray[a];
     8aa:	00a4      	lsls	r4, r4, #2
     8ac:	466b      	mov	r3, sp
     8ae:	58e0      	ldr	r0, [r4, r3]
}
     8b0:	b050      	add	sp, #320	; 0x140
     8b2:	bd10      	pop	{r4, pc}
     8b4:	000050bc 	.word	0x000050bc
     8b8:	00003f35 	.word	0x00003f35

000008bc <groundState>:
{
     8bc:	b5f0      	push	{r4, r5, r6, r7, lr}
     8be:	46c6      	mov	lr, r8
     8c0:	b500      	push	{lr}
     8c2:	0004      	movs	r4, r0
	clearQueues();									//parser and paramQueues cleared
     8c4:	4bac      	ldr	r3, [pc, #688]	; (b78 <groundState+0x2bc>)
     8c6:	4798      	blx	r3
	if(character == 0x00)							//NUL 0x00 DO NOTHING
     8c8:	2c07      	cmp	r4, #7
     8ca:	d93d      	bls.n	948 <groundState+0x8c>
	else if(character == 0x08)						//BS 0x08 Backspace
     8cc:	2c08      	cmp	r4, #8
     8ce:	d037      	beq.n	940 <groundState+0x84>
	else if(character == 0x09)						//TAB 0x09 Horizontal Tab
     8d0:	2c09      	cmp	r4, #9
     8d2:	d055      	beq.n	980 <groundState+0xc4>
	else if(character == 0x0A)						//LF 0x0A Line Feed
     8d4:	2c0a      	cmp	r4, #10
     8d6:	d100      	bne.n	8da <groundState+0x1e>
     8d8:	e074      	b.n	9c4 <groundState+0x108>
	else if(character == 0x0B)						//VT 0x0B Vertical Tab
     8da:	2c0b      	cmp	r4, #11
     8dc:	d100      	bne.n	8e0 <groundState+0x24>
     8de:	e0c8      	b.n	a72 <groundState+0x1b6>
	else if(character == 0x0C)						//FF 0x0C Form Feed
     8e0:	2c0c      	cmp	r4, #12
     8e2:	d031      	beq.n	948 <groundState+0x8c>
	else if(character == 0x0D)						//CR 0x0D Carriage Return
     8e4:	2c0d      	cmp	r4, #13
     8e6:	d100      	bne.n	8ea <groundState+0x2e>
     8e8:	e11b      	b.n	b22 <groundState+0x266>
	else if(character == 0x0E)						//SO 0x0E Shift Out
     8ea:	0023      	movs	r3, r4
     8ec:	3b0e      	subs	r3, #14
     8ee:	2b0c      	cmp	r3, #12
     8f0:	d92a      	bls.n	948 <groundState+0x8c>
	else if(character == 0x1B)						//ESC 0x1B Escape
     8f2:	2c1b      	cmp	r4, #27
     8f4:	d100      	bne.n	8f8 <groundState+0x3c>
     8f6:	e13a      	b.n	b6e <groundState+0x2b2>
	else if(character == 0x1C)						//FS 0x1C File Separator
     8f8:	0023      	movs	r3, r4
     8fa:	3b1c      	subs	r3, #28
     8fc:	2b03      	cmp	r3, #3
     8fe:	d923      	bls.n	948 <groundState+0x8c>
	else if(character == 0x7F)						//DEL 0x7F Delete
     900:	2c7f      	cmp	r4, #127	; 0x7f
     902:	d021      	beq.n	948 <groundState+0x8c>
		consoleDisplay[xCharPos][yCharPos] = character;
     904:	4e9d      	ldr	r6, [pc, #628]	; (b7c <groundState+0x2c0>)
     906:	4d9e      	ldr	r5, [pc, #632]	; (b80 <groundState+0x2c4>)
     908:	882b      	ldrh	r3, [r5, #0]
     90a:	4a9e      	ldr	r2, [pc, #632]	; (b84 <groundState+0x2c8>)
     90c:	4690      	mov	r8, r2
     90e:	8812      	ldrh	r2, [r2, #0]
     910:	2718      	movs	r7, #24
     912:	437b      	muls	r3, r7
     914:	18f3      	adds	r3, r6, r3
     916:	549c      	strb	r4, [r3, r2]
		drawChar(character);
     918:	0020      	movs	r0, r4
     91a:	4c9b      	ldr	r4, [pc, #620]	; (b88 <groundState+0x2cc>)
     91c:	47a0      	blx	r4
		xCharPos++;
     91e:	882b      	ldrh	r3, [r5, #0]
     920:	3301      	adds	r3, #1
     922:	b29b      	uxth	r3, r3
     924:	802b      	strh	r3, [r5, #0]
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     926:	4642      	mov	r2, r8
     928:	8812      	ldrh	r2, [r2, #0]
     92a:	437b      	muls	r3, r7
     92c:	18f6      	adds	r6, r6, r3
     92e:	5cb0      	ldrb	r0, [r6, r2]
     930:	47a0      	blx	r4
		if(xCharPos > 79)		//END OF LINE
     932:	882b      	ldrh	r3, [r5, #0]
     934:	2b4f      	cmp	r3, #79	; 0x4f
     936:	d907      	bls.n	948 <groundState+0x8c>
			xCharPos--;
     938:	3b01      	subs	r3, #1
     93a:	4a91      	ldr	r2, [pc, #580]	; (b80 <groundState+0x2c4>)
     93c:	8013      	strh	r3, [r2, #0]
}
     93e:	e003      	b.n	948 <groundState+0x8c>
		if(xCharPos > 0)
     940:	4b8f      	ldr	r3, [pc, #572]	; (b80 <groundState+0x2c4>)
     942:	881b      	ldrh	r3, [r3, #0]
     944:	2b00      	cmp	r3, #0
     946:	d102      	bne.n	94e <groundState+0x92>
}
     948:	bc04      	pop	{r2}
     94a:	4690      	mov	r8, r2
     94c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     94e:	4c8b      	ldr	r4, [pc, #556]	; (b7c <groundState+0x2c0>)
     950:	4d8c      	ldr	r5, [pc, #560]	; (b84 <groundState+0x2c8>)
     952:	8829      	ldrh	r1, [r5, #0]
     954:	005a      	lsls	r2, r3, #1
     956:	18d3      	adds	r3, r2, r3
     958:	00db      	lsls	r3, r3, #3
     95a:	18e3      	adds	r3, r4, r3
     95c:	5c58      	ldrb	r0, [r3, r1]
     95e:	4e8a      	ldr	r6, [pc, #552]	; (b88 <groundState+0x2cc>)
     960:	47b0      	blx	r6
			xCharPos--;
     962:	4a87      	ldr	r2, [pc, #540]	; (b80 <groundState+0x2c4>)
     964:	8813      	ldrh	r3, [r2, #0]
     966:	3b01      	subs	r3, #1
     968:	b29b      	uxth	r3, r3
     96a:	8013      	strh	r3, [r2, #0]
			tempCharacter = consoleDisplay[xCharPos][yCharPos];
     96c:	8829      	ldrh	r1, [r5, #0]
     96e:	005a      	lsls	r2, r3, #1
     970:	18d3      	adds	r3, r2, r3
     972:	00db      	lsls	r3, r3, #3
     974:	18e3      	adds	r3, r4, r3
			drawChar(tempCharacter);
     976:	5c58      	ldrb	r0, [r3, r1]
     978:	47b0      	blx	r6
			blinkCursor();
     97a:	4b84      	ldr	r3, [pc, #528]	; (b8c <groundState+0x2d0>)
     97c:	4798      	blx	r3
     97e:	e7e3      	b.n	948 <groundState+0x8c>
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     980:	4c7f      	ldr	r4, [pc, #508]	; (b80 <groundState+0x2c4>)
     982:	8822      	ldrh	r2, [r4, #0]
     984:	4b7f      	ldr	r3, [pc, #508]	; (b84 <groundState+0x2c8>)
     986:	8819      	ldrh	r1, [r3, #0]
     988:	0053      	lsls	r3, r2, #1
     98a:	189b      	adds	r3, r3, r2
     98c:	00db      	lsls	r3, r3, #3
     98e:	4a7b      	ldr	r2, [pc, #492]	; (b7c <groundState+0x2c0>)
     990:	18d3      	adds	r3, r2, r3
     992:	5c58      	ldrb	r0, [r3, r1]
     994:	4b7c      	ldr	r3, [pc, #496]	; (b88 <groundState+0x2cc>)
     996:	4798      	blx	r3
		if(xCharPos <= 79)
     998:	8820      	ldrh	r0, [r4, #0]
     99a:	284f      	cmp	r0, #79	; 0x4f
     99c:	d803      	bhi.n	9a6 <groundState+0xea>
			xCharPos = nextTab(xCharPos);
     99e:	4b7c      	ldr	r3, [pc, #496]	; (b90 <groundState+0x2d4>)
     9a0:	4798      	blx	r3
     9a2:	4b77      	ldr	r3, [pc, #476]	; (b80 <groundState+0x2c4>)
     9a4:	8018      	strh	r0, [r3, #0]
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     9a6:	4b76      	ldr	r3, [pc, #472]	; (b80 <groundState+0x2c4>)
     9a8:	881a      	ldrh	r2, [r3, #0]
     9aa:	4b76      	ldr	r3, [pc, #472]	; (b84 <groundState+0x2c8>)
     9ac:	8819      	ldrh	r1, [r3, #0]
     9ae:	0053      	lsls	r3, r2, #1
     9b0:	189b      	adds	r3, r3, r2
     9b2:	00db      	lsls	r3, r3, #3
     9b4:	4a71      	ldr	r2, [pc, #452]	; (b7c <groundState+0x2c0>)
     9b6:	18d3      	adds	r3, r2, r3
     9b8:	5c58      	ldrb	r0, [r3, r1]
     9ba:	4b73      	ldr	r3, [pc, #460]	; (b88 <groundState+0x2cc>)
     9bc:	4798      	blx	r3
		blinkCursor();
     9be:	4b73      	ldr	r3, [pc, #460]	; (b8c <groundState+0x2d0>)
     9c0:	4798      	blx	r3
     9c2:	e7c1      	b.n	948 <groundState+0x8c>
		if(yCharPos == 23)
     9c4:	4b6f      	ldr	r3, [pc, #444]	; (b84 <groundState+0x2c8>)
     9c6:	881a      	ldrh	r2, [r3, #0]
     9c8:	2a17      	cmp	r2, #23
     9ca:	d032      	beq.n	a32 <groundState+0x176>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     9cc:	4c6b      	ldr	r4, [pc, #428]	; (b7c <groundState+0x2c0>)
     9ce:	4d6c      	ldr	r5, [pc, #432]	; (b80 <groundState+0x2c4>)
     9d0:	8829      	ldrh	r1, [r5, #0]
     9d2:	004b      	lsls	r3, r1, #1
     9d4:	185b      	adds	r3, r3, r1
     9d6:	00db      	lsls	r3, r3, #3
     9d8:	18e3      	adds	r3, r4, r3
     9da:	5c98      	ldrb	r0, [r3, r2]
     9dc:	4e6a      	ldr	r6, [pc, #424]	; (b88 <groundState+0x2cc>)
     9de:	47b0      	blx	r6
			yCharPos++;
     9e0:	4a68      	ldr	r2, [pc, #416]	; (b84 <groundState+0x2c8>)
     9e2:	8813      	ldrh	r3, [r2, #0]
     9e4:	3301      	adds	r3, #1
     9e6:	b29b      	uxth	r3, r3
     9e8:	8013      	strh	r3, [r2, #0]
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     9ea:	8829      	ldrh	r1, [r5, #0]
     9ec:	004a      	lsls	r2, r1, #1
     9ee:	1852      	adds	r2, r2, r1
     9f0:	00d2      	lsls	r2, r2, #3
     9f2:	18a4      	adds	r4, r4, r2
     9f4:	5ce0      	ldrb	r0, [r4, r3]
     9f6:	47b0      	blx	r6
			blinkCursor();
     9f8:	4b64      	ldr	r3, [pc, #400]	; (b8c <groundState+0x2d0>)
     9fa:	4798      	blx	r3
		if(lineFeed)
     9fc:	4b65      	ldr	r3, [pc, #404]	; (b94 <groundState+0x2d8>)
     9fe:	781b      	ldrb	r3, [r3, #0]
     a00:	2b00      	cmp	r3, #0
     a02:	d0a1      	beq.n	948 <groundState+0x8c>
			if(yCharPos == 23)
     a04:	4b5f      	ldr	r3, [pc, #380]	; (b84 <groundState+0x2c8>)
     a06:	881a      	ldrh	r2, [r3, #0]
     a08:	2a17      	cmp	r2, #23
     a0a:	d021      	beq.n	a50 <groundState+0x194>
				drawChar(consoleDisplay[xCharPos][yCharPos]);
     a0c:	4d5b      	ldr	r5, [pc, #364]	; (b7c <groundState+0x2c0>)
     a0e:	4e5c      	ldr	r6, [pc, #368]	; (b80 <groundState+0x2c4>)
     a10:	8831      	ldrh	r1, [r6, #0]
     a12:	004b      	lsls	r3, r1, #1
     a14:	185b      	adds	r3, r3, r1
     a16:	00db      	lsls	r3, r3, #3
     a18:	18eb      	adds	r3, r5, r3
     a1a:	5c98      	ldrb	r0, [r3, r2]
     a1c:	4c5a      	ldr	r4, [pc, #360]	; (b88 <groundState+0x2cc>)
     a1e:	47a0      	blx	r4
				xCharPos = 0;
     a20:	2300      	movs	r3, #0
     a22:	8033      	strh	r3, [r6, #0]
				drawChar(consoleDisplay[xCharPos][yCharPos]);
     a24:	4b57      	ldr	r3, [pc, #348]	; (b84 <groundState+0x2c8>)
     a26:	881b      	ldrh	r3, [r3, #0]
     a28:	5ce8      	ldrb	r0, [r5, r3]
     a2a:	47a0      	blx	r4
				blinkCursor();
     a2c:	4b57      	ldr	r3, [pc, #348]	; (b8c <groundState+0x2d0>)
     a2e:	4798      	blx	r3
     a30:	e78a      	b.n	948 <groundState+0x8c>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     a32:	4b53      	ldr	r3, [pc, #332]	; (b80 <groundState+0x2c4>)
     a34:	881a      	ldrh	r2, [r3, #0]
     a36:	0053      	lsls	r3, r2, #1
     a38:	189b      	adds	r3, r3, r2
     a3a:	00db      	lsls	r3, r3, #3
     a3c:	4a4f      	ldr	r2, [pc, #316]	; (b7c <groundState+0x2c0>)
     a3e:	18d3      	adds	r3, r2, r3
     a40:	7dd8      	ldrb	r0, [r3, #23]
     a42:	4b51      	ldr	r3, [pc, #324]	; (b88 <groundState+0x2cc>)
     a44:	4798      	blx	r3
			newLine();
     a46:	4b54      	ldr	r3, [pc, #336]	; (b98 <groundState+0x2dc>)
     a48:	4798      	blx	r3
			blinkCursor();
     a4a:	4b50      	ldr	r3, [pc, #320]	; (b8c <groundState+0x2d0>)
     a4c:	4798      	blx	r3
     a4e:	e7d5      	b.n	9fc <groundState+0x140>
				drawChar(consoleDisplay[xCharPos][yCharPos]);
     a50:	4d4b      	ldr	r5, [pc, #300]	; (b80 <groundState+0x2c4>)
     a52:	882a      	ldrh	r2, [r5, #0]
     a54:	0053      	lsls	r3, r2, #1
     a56:	189b      	adds	r3, r3, r2
     a58:	00db      	lsls	r3, r3, #3
     a5a:	4a48      	ldr	r2, [pc, #288]	; (b7c <groundState+0x2c0>)
     a5c:	18d3      	adds	r3, r2, r3
     a5e:	7dd8      	ldrb	r0, [r3, #23]
     a60:	4c49      	ldr	r4, [pc, #292]	; (b88 <groundState+0x2cc>)
     a62:	47a0      	blx	r4
				xCharPos = 0;
     a64:	2300      	movs	r3, #0
     a66:	802b      	strh	r3, [r5, #0]
				drawChar(0x00);
     a68:	2000      	movs	r0, #0
     a6a:	47a0      	blx	r4
				blinkCursor();
     a6c:	4b47      	ldr	r3, [pc, #284]	; (b8c <groundState+0x2d0>)
     a6e:	4798      	blx	r3
     a70:	e76a      	b.n	948 <groundState+0x8c>
		if(yCharPos == 23)
     a72:	4b44      	ldr	r3, [pc, #272]	; (b84 <groundState+0x2c8>)
     a74:	881a      	ldrh	r2, [r3, #0]
     a76:	2a17      	cmp	r2, #23
     a78:	d033      	beq.n	ae2 <groundState+0x226>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     a7a:	4c40      	ldr	r4, [pc, #256]	; (b7c <groundState+0x2c0>)
     a7c:	4d40      	ldr	r5, [pc, #256]	; (b80 <groundState+0x2c4>)
     a7e:	8829      	ldrh	r1, [r5, #0]
     a80:	004b      	lsls	r3, r1, #1
     a82:	185b      	adds	r3, r3, r1
     a84:	00db      	lsls	r3, r3, #3
     a86:	18e3      	adds	r3, r4, r3
     a88:	5c98      	ldrb	r0, [r3, r2]
     a8a:	4e3f      	ldr	r6, [pc, #252]	; (b88 <groundState+0x2cc>)
     a8c:	47b0      	blx	r6
			yCharPos++;
     a8e:	4a3d      	ldr	r2, [pc, #244]	; (b84 <groundState+0x2c8>)
     a90:	8813      	ldrh	r3, [r2, #0]
     a92:	3301      	adds	r3, #1
     a94:	b29b      	uxth	r3, r3
     a96:	8013      	strh	r3, [r2, #0]
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     a98:	8829      	ldrh	r1, [r5, #0]
     a9a:	004a      	lsls	r2, r1, #1
     a9c:	1852      	adds	r2, r2, r1
     a9e:	00d2      	lsls	r2, r2, #3
     aa0:	18a4      	adds	r4, r4, r2
     aa2:	5ce0      	ldrb	r0, [r4, r3]
     aa4:	47b0      	blx	r6
			blinkCursor();
     aa6:	4b39      	ldr	r3, [pc, #228]	; (b8c <groundState+0x2d0>)
     aa8:	4798      	blx	r3
		if(lineFeed)
     aaa:	4b3a      	ldr	r3, [pc, #232]	; (b94 <groundState+0x2d8>)
     aac:	781b      	ldrb	r3, [r3, #0]
     aae:	2b00      	cmp	r3, #0
     ab0:	d100      	bne.n	ab4 <groundState+0x1f8>
     ab2:	e749      	b.n	948 <groundState+0x8c>
			if(yCharPos == 23)
     ab4:	4b33      	ldr	r3, [pc, #204]	; (b84 <groundState+0x2c8>)
     ab6:	881a      	ldrh	r2, [r3, #0]
     ab8:	2a17      	cmp	r2, #23
     aba:	d021      	beq.n	b00 <groundState+0x244>
				drawChar(consoleDisplay[xCharPos][yCharPos]);
     abc:	4d2f      	ldr	r5, [pc, #188]	; (b7c <groundState+0x2c0>)
     abe:	4e30      	ldr	r6, [pc, #192]	; (b80 <groundState+0x2c4>)
     ac0:	8831      	ldrh	r1, [r6, #0]
     ac2:	004b      	lsls	r3, r1, #1
     ac4:	185b      	adds	r3, r3, r1
     ac6:	00db      	lsls	r3, r3, #3
     ac8:	18eb      	adds	r3, r5, r3
     aca:	5c98      	ldrb	r0, [r3, r2]
     acc:	4c2e      	ldr	r4, [pc, #184]	; (b88 <groundState+0x2cc>)
     ace:	47a0      	blx	r4
				xCharPos = 0;
     ad0:	2300      	movs	r3, #0
     ad2:	8033      	strh	r3, [r6, #0]
				drawChar(consoleDisplay[xCharPos][yCharPos]);
     ad4:	4b2b      	ldr	r3, [pc, #172]	; (b84 <groundState+0x2c8>)
     ad6:	881b      	ldrh	r3, [r3, #0]
     ad8:	5ce8      	ldrb	r0, [r5, r3]
     ada:	47a0      	blx	r4
				blinkCursor();
     adc:	4b2b      	ldr	r3, [pc, #172]	; (b8c <groundState+0x2d0>)
     ade:	4798      	blx	r3
     ae0:	e732      	b.n	948 <groundState+0x8c>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     ae2:	4b27      	ldr	r3, [pc, #156]	; (b80 <groundState+0x2c4>)
     ae4:	881a      	ldrh	r2, [r3, #0]
     ae6:	0053      	lsls	r3, r2, #1
     ae8:	189b      	adds	r3, r3, r2
     aea:	00db      	lsls	r3, r3, #3
     aec:	4a23      	ldr	r2, [pc, #140]	; (b7c <groundState+0x2c0>)
     aee:	18d3      	adds	r3, r2, r3
     af0:	7dd8      	ldrb	r0, [r3, #23]
     af2:	4b25      	ldr	r3, [pc, #148]	; (b88 <groundState+0x2cc>)
     af4:	4798      	blx	r3
			newLine();
     af6:	4b28      	ldr	r3, [pc, #160]	; (b98 <groundState+0x2dc>)
     af8:	4798      	blx	r3
			blinkCursor();
     afa:	4b24      	ldr	r3, [pc, #144]	; (b8c <groundState+0x2d0>)
     afc:	4798      	blx	r3
     afe:	e7d4      	b.n	aaa <groundState+0x1ee>
				drawChar(consoleDisplay[xCharPos][yCharPos]);
     b00:	4d1f      	ldr	r5, [pc, #124]	; (b80 <groundState+0x2c4>)
     b02:	882a      	ldrh	r2, [r5, #0]
     b04:	0053      	lsls	r3, r2, #1
     b06:	189b      	adds	r3, r3, r2
     b08:	00db      	lsls	r3, r3, #3
     b0a:	4a1c      	ldr	r2, [pc, #112]	; (b7c <groundState+0x2c0>)
     b0c:	18d3      	adds	r3, r2, r3
     b0e:	7dd8      	ldrb	r0, [r3, #23]
     b10:	4c1d      	ldr	r4, [pc, #116]	; (b88 <groundState+0x2cc>)
     b12:	47a0      	blx	r4
				xCharPos = 0;
     b14:	2300      	movs	r3, #0
     b16:	802b      	strh	r3, [r5, #0]
				drawChar(0x00);
     b18:	2000      	movs	r0, #0
     b1a:	47a0      	blx	r4
				blinkCursor();
     b1c:	4b1b      	ldr	r3, [pc, #108]	; (b8c <groundState+0x2d0>)
     b1e:	4798      	blx	r3
     b20:	e712      	b.n	948 <groundState+0x8c>
		if(yCharPos == 23)
     b22:	4b18      	ldr	r3, [pc, #96]	; (b84 <groundState+0x2c8>)
     b24:	881a      	ldrh	r2, [r3, #0]
     b26:	2a17      	cmp	r2, #23
     b28:	d012      	beq.n	b50 <groundState+0x294>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     b2a:	4d14      	ldr	r5, [pc, #80]	; (b7c <groundState+0x2c0>)
     b2c:	4e14      	ldr	r6, [pc, #80]	; (b80 <groundState+0x2c4>)
     b2e:	8831      	ldrh	r1, [r6, #0]
     b30:	004b      	lsls	r3, r1, #1
     b32:	185b      	adds	r3, r3, r1
     b34:	00db      	lsls	r3, r3, #3
     b36:	18eb      	adds	r3, r5, r3
     b38:	5c98      	ldrb	r0, [r3, r2]
     b3a:	4c13      	ldr	r4, [pc, #76]	; (b88 <groundState+0x2cc>)
     b3c:	47a0      	blx	r4
			xCharPos = 0;
     b3e:	2300      	movs	r3, #0
     b40:	8033      	strh	r3, [r6, #0]
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     b42:	4b10      	ldr	r3, [pc, #64]	; (b84 <groundState+0x2c8>)
     b44:	881b      	ldrh	r3, [r3, #0]
     b46:	5ce8      	ldrb	r0, [r5, r3]
     b48:	47a0      	blx	r4
			blinkCursor();
     b4a:	4b10      	ldr	r3, [pc, #64]	; (b8c <groundState+0x2d0>)
     b4c:	4798      	blx	r3
     b4e:	e6fb      	b.n	948 <groundState+0x8c>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     b50:	4c0b      	ldr	r4, [pc, #44]	; (b80 <groundState+0x2c4>)
     b52:	8822      	ldrh	r2, [r4, #0]
     b54:	0053      	lsls	r3, r2, #1
     b56:	189b      	adds	r3, r3, r2
     b58:	00db      	lsls	r3, r3, #3
     b5a:	4a08      	ldr	r2, [pc, #32]	; (b7c <groundState+0x2c0>)
     b5c:	18d3      	adds	r3, r2, r3
     b5e:	7dd8      	ldrb	r0, [r3, #23]
     b60:	4b09      	ldr	r3, [pc, #36]	; (b88 <groundState+0x2cc>)
     b62:	4798      	blx	r3
			xCharPos = 0;
     b64:	2300      	movs	r3, #0
     b66:	8023      	strh	r3, [r4, #0]
			blinkCursor();
     b68:	4b08      	ldr	r3, [pc, #32]	; (b8c <groundState+0x2d0>)
     b6a:	4798      	blx	r3
     b6c:	e6ec      	b.n	948 <groundState+0x8c>
		currentState = stateESC;
     b6e:	2201      	movs	r2, #1
     b70:	4b0a      	ldr	r3, [pc, #40]	; (b9c <groundState+0x2e0>)
     b72:	701a      	strb	r2, [r3, #0]
     b74:	e6e8      	b.n	948 <groundState+0x8c>
     b76:	46c0      	nop			; (mov r8, r8)
     b78:	000002b1 	.word	0x000002b1
     b7c:	200003c4 	.word	0x200003c4
     b80:	200002bc 	.word	0x200002bc
     b84:	200002be 	.word	0x200002be
     b88:	000028ed 	.word	0x000028ed
     b8c:	000029d5 	.word	0x000029d5
     b90:	00000899 	.word	0x00000899
     b94:	2000016c 	.word	0x2000016c
     b98:	00002b31 	.word	0x00002b31
     b9c:	200002c1 	.word	0x200002c1

00000ba0 <parseChar>:
{
     ba0:	b510      	push	{r4, lr}
	parserState state = currentState;
     ba2:	4b0e      	ldr	r3, [pc, #56]	; (bdc <parseChar+0x3c>)
	switch(state)
     ba4:	781a      	ldrb	r2, [r3, #0]
     ba6:	2a06      	cmp	r2, #6
     ba8:	d805      	bhi.n	bb6 <parseChar+0x16>
     baa:	0093      	lsls	r3, r2, #2
     bac:	4a0c      	ldr	r2, [pc, #48]	; (be0 <parseChar+0x40>)
     bae:	58d3      	ldr	r3, [r2, r3]
     bb0:	469f      	mov	pc, r3
			groundState(character);
     bb2:	4b0c      	ldr	r3, [pc, #48]	; (be4 <parseChar+0x44>)
     bb4:	4798      	blx	r3
}
     bb6:	bd10      	pop	{r4, pc}
			escState(character);
     bb8:	4b0b      	ldr	r3, [pc, #44]	; (be8 <parseChar+0x48>)
     bba:	4798      	blx	r3
		break;
     bbc:	e7fb      	b.n	bb6 <parseChar+0x16>
	stateEnterBuffer = 0x00;
     bbe:	2300      	movs	r3, #0
     bc0:	4a0a      	ldr	r2, [pc, #40]	; (bec <parseChar+0x4c>)
     bc2:	7013      	strb	r3, [r2, #0]
	currentState = stateGround;
     bc4:	4a05      	ldr	r2, [pc, #20]	; (bdc <parseChar+0x3c>)
     bc6:	7013      	strb	r3, [r2, #0]
     bc8:	e7f5      	b.n	bb6 <parseChar+0x16>
			CSIentryState(character);
     bca:	4b09      	ldr	r3, [pc, #36]	; (bf0 <parseChar+0x50>)
     bcc:	4798      	blx	r3
		break;
     bce:	e7f2      	b.n	bb6 <parseChar+0x16>
			CSIparamState(character);
     bd0:	4b08      	ldr	r3, [pc, #32]	; (bf4 <parseChar+0x54>)
     bd2:	4798      	blx	r3
		break;
     bd4:	e7ef      	b.n	bb6 <parseChar+0x16>
			CSIignoreState(character);
     bd6:	4b08      	ldr	r3, [pc, #32]	; (bf8 <parseChar+0x58>)
     bd8:	4798      	blx	r3
}
     bda:	e7ec      	b.n	bb6 <parseChar+0x16>
     bdc:	200002c1 	.word	0x200002c1
     be0:	000050a0 	.word	0x000050a0
     be4:	000008bd 	.word	0x000008bd
     be8:	00000569 	.word	0x00000569
     bec:	20000346 	.word	0x20000346
     bf0:	000007f9 	.word	0x000007f9
     bf4:	00000775 	.word	0x00000775
     bf8:	00000349 	.word	0x00000349

00000bfc <drawKare>:
//	graphic in the entire project. Please note this is the most
//	space efficient way to do this; a 40x31 bitmap is 930 bytes,
//	whereas	this is (104*2)+28+20, or 256 bytes.
/*********************************************************************/
void drawKare(int emotion)
{
     bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
     bfe:	b0c1      	sub	sp, #260	; 0x104
     c00:	0007      	movs	r7, r0
	uint16_t body[104] = {10,10,20,20,20,0,380,10,380,10,390,20,0,
     c02:	22d0      	movs	r2, #208	; 0xd0
     c04:	492d      	ldr	r1, [pc, #180]	; (cbc <drawKare+0xc0>)
     c06:	a80c      	add	r0, sp, #48	; 0x30
     c08:	4b2d      	ldr	r3, [pc, #180]	; (cc0 <drawKare+0xc4>)
     c0a:	4798      	blx	r3
		80,190,280,200,280,40,290,190,0,70,50,80,0,90,50,100,0,110,
		50,120,0,130,50,140,0,150,50,160,0,170,50,180,0,190,50,200,
		300,200,370,210,30,220,370,230,30,240,370,250,30,260,370,
		270,90,280,300,290};
	
	uint8_t happyTerm[28] = {180,80,190,130,170,130,190,140,140,
     c0c:	a805      	add	r0, sp, #20
     c0e:	4b2d      	ldr	r3, [pc, #180]	; (cc4 <drawKare+0xc8>)
     c10:	001a      	movs	r2, r3
     c12:	3250      	adds	r2, #80	; 0x50
     c14:	0001      	movs	r1, r0
     c16:	ca31      	ldmia	r2!, {r0, r4, r5}
     c18:	c131      	stmia	r1!, {r0, r4, r5}
     c1a:	ca31      	ldmia	r2!, {r0, r4, r5}
     c1c:	c131      	stmia	r1!, {r0, r4, r5}
     c1e:	6812      	ldr	r2, [r2, #0]
     c20:	600a      	str	r2, [r1, #0]
		60,150,100,210,60,220,100,130,150,140,160,140,160,220,170,
	220,150,230,160};
	
	uint8_t rPiBeret[20] = {120,60,240,80,110,70,120,90,150,
     c22:	336c      	adds	r3, #108	; 0x6c
     c24:	466a      	mov	r2, sp
     c26:	cb13      	ldmia	r3!, {r0, r1, r4}
     c28:	c213      	stmia	r2!, {r0, r1, r4}
     c2a:	cb03      	ldmia	r3!, {r0, r1}
     c2c:	c203      	stmia	r2!, {r0, r1}
     c2e:	ac0c      	add	r4, sp, #48	; 0x30
     c30:	ae40      	add	r6, sp, #256	; 0x100

	
	
	for(int i = 0; i < 104; i = i+4)
	{
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
     c32:	4d25      	ldr	r5, [pc, #148]	; (cc8 <drawKare+0xcc>)
		((body[i+1]/iSv)+(offsetGraphicY)),
		((body[i+2]/iSv)+(offsetGraphicX)),
		((body[i+3]/iSv)+(offsetGraphicY)));
     c34:	88e3      	ldrh	r3, [r4, #6]
     c36:	105b      	asrs	r3, r3, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
     c38:	3396      	adds	r3, #150	; 0x96
		((body[i+2]/iSv)+(offsetGraphicX)),
     c3a:	88a2      	ldrh	r2, [r4, #4]
     c3c:	1052      	asrs	r2, r2, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
     c3e:	322d      	adds	r2, #45	; 0x2d
     c40:	32ff      	adds	r2, #255	; 0xff
		((body[i+1]/iSv)+(offsetGraphicY)),
     c42:	8861      	ldrh	r1, [r4, #2]
     c44:	1049      	asrs	r1, r1, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
     c46:	3196      	adds	r1, #150	; 0x96
     c48:	8820      	ldrh	r0, [r4, #0]
     c4a:	1040      	asrs	r0, r0, #1
     c4c:	302d      	adds	r0, #45	; 0x2d
     c4e:	30ff      	adds	r0, #255	; 0xff
     c50:	47a8      	blx	r5
     c52:	3408      	adds	r4, #8
	for(int i = 0; i < 104; i = i+4)
     c54:	42b4      	cmp	r4, r6
     c56:	d1ed      	bne.n	c34 <drawKare+0x38>
	}
	switch(emotion)
     c58:	2f00      	cmp	r7, #0
     c5a:	d003      	beq.n	c64 <drawKare+0x68>
     c5c:	2f01      	cmp	r7, #1
     c5e:	d017      	beq.n	c90 <drawKare+0x94>
		break;
		case 2:
		//make a sad terminal thing go here
		break;
	}
}
     c60:	b041      	add	sp, #260	; 0x104
     c62:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c64:	ac05      	add	r4, sp, #20
     c66:	ae0c      	add	r6, sp, #48	; 0x30
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
     c68:	4d17      	ldr	r5, [pc, #92]	; (cc8 <drawKare+0xcc>)
			((happyTerm[i+3]/iSv)+(offsetGraphicY)));
     c6a:	78e3      	ldrb	r3, [r4, #3]
     c6c:	105b      	asrs	r3, r3, #1
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
     c6e:	3396      	adds	r3, #150	; 0x96
			((happyTerm[i+2]/iSv)+(offsetGraphicX)),
     c70:	78a2      	ldrb	r2, [r4, #2]
     c72:	1052      	asrs	r2, r2, #1
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
     c74:	322d      	adds	r2, #45	; 0x2d
     c76:	32ff      	adds	r2, #255	; 0xff
			((happyTerm[i+1]/iSv)+(offsetGraphicY)),
     c78:	7861      	ldrb	r1, [r4, #1]
     c7a:	1049      	asrs	r1, r1, #1
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
     c7c:	3196      	adds	r1, #150	; 0x96
     c7e:	7820      	ldrb	r0, [r4, #0]
     c80:	1040      	asrs	r0, r0, #1
     c82:	302d      	adds	r0, #45	; 0x2d
     c84:	30ff      	adds	r0, #255	; 0xff
     c86:	47a8      	blx	r5
     c88:	3404      	adds	r4, #4
		for(int i = 0; i < 28; i = i+4)
     c8a:	42a6      	cmp	r6, r4
     c8c:	d1ed      	bne.n	c6a <drawKare+0x6e>
     c8e:	e7e7      	b.n	c60 <drawKare+0x64>
     c90:	466c      	mov	r4, sp
     c92:	ae05      	add	r6, sp, #20
			fillRect((
     c94:	4d0c      	ldr	r5, [pc, #48]	; (cc8 <drawKare+0xcc>)
			((rPiBeret[i+3]/iSv)+(offsetGraphicY)));
     c96:	78e3      	ldrb	r3, [r4, #3]
     c98:	105b      	asrs	r3, r3, #1
			fillRect((
     c9a:	3396      	adds	r3, #150	; 0x96
			((rPiBeret[i+2]/iSv)+(offsetGraphicX)),
     c9c:	78a2      	ldrb	r2, [r4, #2]
     c9e:	1052      	asrs	r2, r2, #1
			fillRect((
     ca0:	322d      	adds	r2, #45	; 0x2d
     ca2:	32ff      	adds	r2, #255	; 0xff
			((rPiBeret[i+1]/iSv)+(offsetGraphicY)),
     ca4:	7861      	ldrb	r1, [r4, #1]
     ca6:	1049      	asrs	r1, r1, #1
			fillRect((
     ca8:	3196      	adds	r1, #150	; 0x96
			(rPiBeret[i]/iSv)+(offsetGraphicX)),
     caa:	7820      	ldrb	r0, [r4, #0]
     cac:	1040      	asrs	r0, r0, #1
			fillRect((
     cae:	302d      	adds	r0, #45	; 0x2d
     cb0:	30ff      	adds	r0, #255	; 0xff
     cb2:	47a8      	blx	r5
     cb4:	3404      	adds	r4, #4
		for(int i = 0; i < 20; i = i+4)
     cb6:	42b4      	cmp	r4, r6
     cb8:	d1ed      	bne.n	c96 <drawKare+0x9a>
     cba:	e7d1      	b.n	c60 <drawKare+0x64>
     cbc:	0000521c 	.word	0x0000521c
     cc0:	00003f35 	.word	0x00003f35
     cc4:	0000529c 	.word	0x0000529c
     cc8:	00003389 	.word	0x00003389

00000ccc <splashScreen>:

void splashScreen(void)
{
     ccc:	b570      	push	{r4, r5, r6, lr}
	static const char *splashText[32];
	splashText[0]  = "Trans rights are human rights";//
     cce:	4c49      	ldr	r4, [pc, #292]	; (df4 <splashScreen+0x128>)
     cd0:	4b49      	ldr	r3, [pc, #292]	; (df8 <splashScreen+0x12c>)
     cd2:	6023      	str	r3, [r4, #0]
	splashText[1]  = "13^5 + 16^5 = 17^5";//
     cd4:	4b49      	ldr	r3, [pc, #292]	; (dfc <splashScreen+0x130>)
     cd6:	6063      	str	r3, [r4, #4]
	splashText[2]  = "Reticulating Splines";//
     cd8:	4b49      	ldr	r3, [pc, #292]	; (e00 <splashScreen+0x134>)
     cda:	60a3      	str	r3, [r4, #8]
	splashText[3]  = "violence.works";//
     cdc:	4b49      	ldr	r3, [pc, #292]	; (e04 <splashScreen+0x138>)
     cde:	60e3      	str	r3, [r4, #12]
	splashText[4]  = "Si + PB";//
     ce0:	4b49      	ldr	r3, [pc, #292]	; (e08 <splashScreen+0x13c>)
     ce2:	6123      	str	r3, [r4, #16]
	splashText[5]  = "Kill Billionaires (and Trillionaire)";//
     ce4:	4b49      	ldr	r3, [pc, #292]	; (e0c <splashScreen+0x140>)
     ce6:	6163      	str	r3, [r4, #20]
	splashText[6]  = "Interest in technology is not a personality";//
     ce8:	4b49      	ldr	r3, [pc, #292]	; (e10 <splashScreen+0x144>)
     cea:	61a3      	str	r3, [r4, #24]
	splashText[7]  = "10 PRINT CHR$(205.5+RND(1)); : GOTO 10";//
     cec:	4b49      	ldr	r3, [pc, #292]	; (e14 <splashScreen+0x148>)
     cee:	61e3      	str	r3, [r4, #28]
	splashText[8]  = "No gods. No masters. No external libraries.";//
     cf0:	4b49      	ldr	r3, [pc, #292]	; (e18 <splashScreen+0x14c>)
     cf2:	6223      	str	r3, [r4, #32]
	splashText[9]  = "Kill Nazis";//
     cf4:	4b49      	ldr	r3, [pc, #292]	; (e1c <splashScreen+0x150>)
     cf6:	6263      	str	r3, [r4, #36]	; 0x24
	splashText[10] = "Tiananmen Square 1989";//
     cf8:	4b49      	ldr	r3, [pc, #292]	; (e20 <splashScreen+0x154>)
     cfa:	62a3      	str	r3, [r4, #40]	; 0x28
	splashText[11] = "America was founded on slavery";
     cfc:	4b49      	ldr	r3, [pc, #292]	; (e24 <splashScreen+0x158>)
     cfe:	62e3      	str	r3, [r4, #44]	; 0x2c
	splashText[12] = "There is only capital and labor";//
     d00:	4b49      	ldr	r3, [pc, #292]	; (e28 <splashScreen+0x15c>)
     d02:	6323      	str	r3, [r4, #48]	; 0x30
	splashText[13] = "Encourage SYMMETRIC class warfare";//
     d04:	4b49      	ldr	r3, [pc, #292]	; (e2c <splashScreen+0x160>)
     d06:	6363      	str	r3, [r4, #52]	; 0x34
	splashText[14] = "$CURRENT_MEME";//
     d08:	4b49      	ldr	r3, [pc, #292]	; (e30 <splashScreen+0x164>)
     d0a:	63a3      	str	r3, [r4, #56]	; 0x38
	splashText[15] = "A Nice TTY";//
     d0c:	4b49      	ldr	r3, [pc, #292]	; (e34 <splashScreen+0x168>)
     d0e:	63e3      	str	r3, [r4, #60]	; 0x3c
	splashText[16] = "Unix epoch minus 0xFF days";//
     d10:	4b49      	ldr	r3, [pc, #292]	; (e38 <splashScreen+0x16c>)
     d12:	6423      	str	r3, [r4, #64]	; 0x40
	splashText[17] = "i  = 0x5f3759df - ( i >> 1 );";//
     d14:	4b49      	ldr	r3, [pc, #292]	; (e3c <splashScreen+0x170>)
     d16:	6463      	str	r3, [r4, #68]	; 0x44
	splashText[18] = "Speak truth to power; I'm sure they'll listen this time.";//
     d18:	4b49      	ldr	r3, [pc, #292]	; (e40 <splashScreen+0x174>)
     d1a:	64a3      	str	r3, [r4, #72]	; 0x48
	splashText[19] = "Defcon's canceled (2020) (2021)";//
     d1c:	4b49      	ldr	r3, [pc, #292]	; (e44 <splashScreen+0x178>)
     d1e:	64e3      	str	r3, [r4, #76]	; 0x4c
	splashText[20] = "Ratsnest: Nothing To Do!";//
     d20:	4b49      	ldr	r3, [pc, #292]	; (e48 <splashScreen+0x17c>)
     d22:	6523      	str	r3, [r4, #80]	; 0x50
	splashText[21] = "It has 69 keys.";//
     d24:	4b49      	ldr	r3, [pc, #292]	; (e4c <splashScreen+0x180>)
     d26:	6563      	str	r3, [r4, #84]	; 0x54
	splashText[22] = "Because VT-420 was already taken";//
     d28:	4b49      	ldr	r3, [pc, #292]	; (e50 <splashScreen+0x184>)
     d2a:	65a3      	str	r3, [r4, #88]	; 0x58
	splashText[23] = "Compression algorithm based on BBP (1997)";//
     d2c:	4b49      	ldr	r3, [pc, #292]	; (e54 <splashScreen+0x188>)
     d2e:	65e3      	str	r3, [r4, #92]	; 0x5c
	splashText[24] = "Teach health insurance providers to code.";
     d30:	4b49      	ldr	r3, [pc, #292]	; (e58 <splashScreen+0x18c>)
     d32:	6623      	str	r3, [r4, #96]	; 0x60
	splashText[25] = "Grand Central Hack The Planet";//
     d34:	4b49      	ldr	r3, [pc, #292]	; (e5c <splashScreen+0x190>)
     d36:	6663      	str	r3, [r4, #100]	; 0x64
	splashText[26] = "WiFi is not wireless Ethernet!";//
     d38:	4b49      	ldr	r3, [pc, #292]	; (e60 <splashScreen+0x194>)
     d3a:	66a3      	str	r3, [r4, #104]	; 0x68
	splashText[27] = "Dummy thicc client";//
     d3c:	4b49      	ldr	r3, [pc, #292]	; (e64 <splashScreen+0x198>)
     d3e:	66e3      	str	r3, [r4, #108]	; 0x6c
	splashText[28] = "A Nice TTY. An OK Computer.";//
     d40:	4b49      	ldr	r3, [pc, #292]	; (e68 <splashScreen+0x19c>)
     d42:	6723      	str	r3, [r4, #112]	; 0x70
	splashText[29] = "USTeledildonics";//
     d44:	4b49      	ldr	r3, [pc, #292]	; (e6c <splashScreen+0x1a0>)
     d46:	6763      	str	r3, [r4, #116]	; 0x74
	splashText[30] = "Solidarity is not a new framework";//
     d48:	4b49      	ldr	r3, [pc, #292]	; (e70 <splashScreen+0x1a4>)
     d4a:	67a3      	str	r3, [r4, #120]	; 0x78
	splashText[31] = "Breadboarding Is Not A Crime";//
     d4c:	4b49      	ldr	r3, [pc, #292]	; (e74 <splashScreen+0x1a8>)
     d4e:	67e3      	str	r3, [r4, #124]	; 0x7c
	splashText[32] = "Off by one errors are common";
     d50:	4a49      	ldr	r2, [pc, #292]	; (e78 <splashScreen+0x1ac>)
     d52:	2380      	movs	r3, #128	; 0x80
     d54:	50e2      	str	r2, [r4, r3]
	
	const char *textPhrase = splashText[(((rand())%32))];
     d56:	4b49      	ldr	r3, [pc, #292]	; (e7c <splashScreen+0x1b0>)
     d58:	4798      	blx	r3
     d5a:	17c3      	asrs	r3, r0, #31
     d5c:	0edb      	lsrs	r3, r3, #27
     d5e:	18c2      	adds	r2, r0, r3
     d60:	201f      	movs	r0, #31
     d62:	4010      	ands	r0, r2
     d64:	1ac0      	subs	r0, r0, r3
     d66:	0080      	lsls	r0, r0, #2
     d68:	5904      	ldr	r4, [r0, r4]
	
	clearScreen();
     d6a:	4b45      	ldr	r3, [pc, #276]	; (e80 <splashScreen+0x1b4>)
     d6c:	4798      	blx	r3
	setColorRGB(255,255,255);
     d6e:	22ff      	movs	r2, #255	; 0xff
     d70:	21ff      	movs	r1, #255	; 0xff
     d72:	20ff      	movs	r0, #255	; 0xff
     d74:	4b43      	ldr	r3, [pc, #268]	; (e84 <splashScreen+0x1b8>)
     d76:	4798      	blx	r3
	
	REG_PORT_DIRTGL1 = PORT_PB31;
     d78:	2280      	movs	r2, #128	; 0x80
     d7a:	0612      	lsls	r2, r2, #24
     d7c:	4b42      	ldr	r3, [pc, #264]	; (e88 <splashScreen+0x1bc>)
     d7e:	601a      	str	r2, [r3, #0]
	PORT->Group[1].PINCFG[31].bit.PULLEN = 1;
     d80:	4b42      	ldr	r3, [pc, #264]	; (e8c <splashScreen+0x1c0>)
     d82:	22df      	movs	r2, #223	; 0xdf
     d84:	5c99      	ldrb	r1, [r3, r2]
     d86:	2004      	movs	r0, #4
     d88:	4301      	orrs	r1, r0
     d8a:	5499      	strb	r1, [r3, r2]
	PORT->Group[1].PINCFG[31].bit.INEN = 1;
     d8c:	5c99      	ldrb	r1, [r3, r2]
     d8e:	2002      	movs	r0, #2
     d90:	4301      	orrs	r1, r0
     d92:	5499      	strb	r1, [r3, r2]
	if((PORT->Group[1].IN.reg & PORT_PB31) != 0)
     d94:	3a3f      	subs	r2, #63	; 0x3f
     d96:	589b      	ldr	r3, [r3, r2]
     d98:	2b00      	cmp	r3, #0
     d9a:	db26      	blt.n	dea <splashScreen+0x11e>
		//This is the 'pi' graphic; put some codes
		//here to handle setting up the uarts.
		drawKare(1);
	}
	else
	drawKare(0); //The normal graphic
     d9c:	2000      	movs	r0, #0
     d9e:	4b3c      	ldr	r3, [pc, #240]	; (e90 <splashScreen+0x1c4>)
     da0:	4798      	blx	r3
	

	
	xCharPos = 40 - (strlen(textPhrase)/2);
     da2:	0020      	movs	r0, r4
     da4:	4b3b      	ldr	r3, [pc, #236]	; (e94 <splashScreen+0x1c8>)
     da6:	4798      	blx	r3
     da8:	4e3b      	ldr	r6, [pc, #236]	; (e98 <splashScreen+0x1cc>)
     daa:	0840      	lsrs	r0, r0, #1
     dac:	2328      	movs	r3, #40	; 0x28
     dae:	1a18      	subs	r0, r3, r0
     db0:	8030      	strh	r0, [r6, #0]
	yCharPos = 16;
     db2:	4d3a      	ldr	r5, [pc, #232]	; (e9c <splashScreen+0x1d0>)
     db4:	2310      	movs	r3, #16
     db6:	802b      	strh	r3, [r5, #0]
	
	writeString(textPhrase);
     db8:	0020      	movs	r0, r4
     dba:	4b39      	ldr	r3, [pc, #228]	; (ea0 <splashScreen+0x1d4>)
     dbc:	4798      	blx	r3
	xCharPos = 40 - (strlen(versionLabel)/2);
	yCharPos = 18;
	
	writeString(versionLabel);
	*/
	delay_ms(2000);
     dbe:	20fa      	movs	r0, #250	; 0xfa
     dc0:	00c0      	lsls	r0, r0, #3
     dc2:	4b38      	ldr	r3, [pc, #224]	; (ea4 <splashScreen+0x1d8>)
     dc4:	4798      	blx	r3
		
	clearScreen();
     dc6:	4b2e      	ldr	r3, [pc, #184]	; (e80 <splashScreen+0x1b4>)
     dc8:	4798      	blx	r3
	nullifyConsole();
     dca:	4b37      	ldr	r3, [pc, #220]	; (ea8 <splashScreen+0x1dc>)
     dcc:	4798      	blx	r3
	
	setColorRGB(0,255,0);
     dce:	2200      	movs	r2, #0
     dd0:	21ff      	movs	r1, #255	; 0xff
     dd2:	2000      	movs	r0, #0
     dd4:	4b2b      	ldr	r3, [pc, #172]	; (e84 <splashScreen+0x1b8>)
     dd6:	4798      	blx	r3
	setBackColorRGB(0,0,0);
     dd8:	2200      	movs	r2, #0
     dda:	2100      	movs	r1, #0
     ddc:	2000      	movs	r0, #0
     dde:	4b33      	ldr	r3, [pc, #204]	; (eac <splashScreen+0x1e0>)
     de0:	4798      	blx	r3
	
	//Setting the xChar and yChar position has to come
	//after splashScreen() and InitLCD();
	xCharPos = 0;
     de2:	2300      	movs	r3, #0
     de4:	8033      	strh	r3, [r6, #0]
	yCharPos = 0;
     de6:	802b      	strh	r3, [r5, #0]
	

     de8:	bd70      	pop	{r4, r5, r6, pc}
		drawKare(1);
     dea:	2001      	movs	r0, #1
     dec:	4b28      	ldr	r3, [pc, #160]	; (e90 <splashScreen+0x1c4>)
     dee:	4798      	blx	r3
     df0:	e7d7      	b.n	da2 <splashScreen+0xd6>
     df2:	46c0      	nop			; (mov r8, r8)
     df4:	200001fc 	.word	0x200001fc
     df8:	0000531c 	.word	0x0000531c
     dfc:	0000533c 	.word	0x0000533c
     e00:	00005350 	.word	0x00005350
     e04:	00005368 	.word	0x00005368
     e08:	00005378 	.word	0x00005378
     e0c:	00005380 	.word	0x00005380
     e10:	000053a8 	.word	0x000053a8
     e14:	000053d4 	.word	0x000053d4
     e18:	000053fc 	.word	0x000053fc
     e1c:	00005428 	.word	0x00005428
     e20:	00005434 	.word	0x00005434
     e24:	0000544c 	.word	0x0000544c
     e28:	0000546c 	.word	0x0000546c
     e2c:	0000548c 	.word	0x0000548c
     e30:	000054b0 	.word	0x000054b0
     e34:	000054c0 	.word	0x000054c0
     e38:	000054cc 	.word	0x000054cc
     e3c:	000054e8 	.word	0x000054e8
     e40:	00005508 	.word	0x00005508
     e44:	00005544 	.word	0x00005544
     e48:	00005564 	.word	0x00005564
     e4c:	00005580 	.word	0x00005580
     e50:	00005590 	.word	0x00005590
     e54:	000055b4 	.word	0x000055b4
     e58:	000055e0 	.word	0x000055e0
     e5c:	0000560c 	.word	0x0000560c
     e60:	0000562c 	.word	0x0000562c
     e64:	0000564c 	.word	0x0000564c
     e68:	00005660 	.word	0x00005660
     e6c:	0000567c 	.word	0x0000567c
     e70:	0000568c 	.word	0x0000568c
     e74:	000056b0 	.word	0x000056b0
     e78:	000056d0 	.word	0x000056d0
     e7c:	00004161 	.word	0x00004161
     e80:	00003459 	.word	0x00003459
     e84:	0000324d 	.word	0x0000324d
     e88:	4100448c 	.word	0x4100448c
     e8c:	41004400 	.word	0x41004400
     e90:	00000bfd 	.word	0x00000bfd
     e94:	00004369 	.word	0x00004369
     e98:	200002bc 	.word	0x200002bc
     e9c:	200002be 	.word	0x200002be
     ea0:	00002bed 	.word	0x00002bed
     ea4:	00000f45 	.word	0x00000f45
     ea8:	00002c35 	.word	0x00002c35
     eac:	00003275 	.word	0x00003275

00000eb0 <parseRXBuffer>:
char tempCharacter;

cbuf_handle_t ouroboros;	

void parseRXBuffer(void)
{
     eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
     eb2:	b083      	sub	sp, #12
		while(!ring_empty(ouroboros))
     eb4:	4e0b      	ldr	r6, [pc, #44]	; (ee4 <parseRXBuffer+0x34>)
     eb6:	4d0c      	ldr	r5, [pc, #48]	; (ee8 <parseRXBuffer+0x38>)
		{
			uint8_t characterFromRingBuffer;
			ring_get(ouroboros, &characterFromRingBuffer);
     eb8:	0037      	movs	r7, r6
		while(!ring_empty(ouroboros))
     eba:	e008      	b.n	ece <parseRXBuffer+0x1e>
			ring_get(ouroboros, &characterFromRingBuffer);
     ebc:	466b      	mov	r3, sp
     ebe:	1ddc      	adds	r4, r3, #7
     ec0:	0021      	movs	r1, r4
     ec2:	6838      	ldr	r0, [r7, #0]
     ec4:	4b09      	ldr	r3, [pc, #36]	; (eec <parseRXBuffer+0x3c>)
     ec6:	4798      	blx	r3
			parseChar(characterFromRingBuffer);
     ec8:	7820      	ldrb	r0, [r4, #0]
     eca:	4b09      	ldr	r3, [pc, #36]	; (ef0 <parseRXBuffer+0x40>)
     ecc:	4798      	blx	r3
		while(!ring_empty(ouroboros))
     ece:	6830      	ldr	r0, [r6, #0]
     ed0:	47a8      	blx	r5
     ed2:	2800      	cmp	r0, #0
     ed4:	d0f2      	beq.n	ebc <parseRXBuffer+0xc>
		
		}
		ring_reset(ouroboros);
     ed6:	4b03      	ldr	r3, [pc, #12]	; (ee4 <parseRXBuffer+0x34>)
     ed8:	6818      	ldr	r0, [r3, #0]
     eda:	4b06      	ldr	r3, [pc, #24]	; (ef4 <parseRXBuffer+0x44>)
     edc:	4798      	blx	r3
}
     ede:	b003      	add	sp, #12
     ee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ee2:	46c0      	nop			; (mov r8, r8)
     ee4:	20000360 	.word	0x20000360
     ee8:	0000017d 	.word	0x0000017d
     eec:	00000195 	.word	0x00000195
     ef0:	00000ba1 	.word	0x00000ba1
     ef4:	00000135 	.word	0x00000135

00000ef8 <sendChar>:

void sendChar(char character)
{
     ef8:	b510      	push	{r4, lr}
	printf("%c", character);
     efa:	4b01      	ldr	r3, [pc, #4]	; (f00 <sendChar+0x8>)
     efc:	4798      	blx	r3
     efe:	bd10      	pop	{r4, pc}
     f00:	000040dd 	.word	0x000040dd

00000f04 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     f04:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     f06:	2000      	movs	r0, #0
     f08:	4b08      	ldr	r3, [pc, #32]	; (f2c <delay_init+0x28>)
     f0a:	4798      	blx	r3
     f0c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     f0e:	4c08      	ldr	r4, [pc, #32]	; (f30 <delay_init+0x2c>)
     f10:	21fa      	movs	r1, #250	; 0xfa
     f12:	0089      	lsls	r1, r1, #2
     f14:	47a0      	blx	r4
     f16:	4b07      	ldr	r3, [pc, #28]	; (f34 <delay_init+0x30>)
     f18:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     f1a:	4907      	ldr	r1, [pc, #28]	; (f38 <delay_init+0x34>)
     f1c:	0028      	movs	r0, r5
     f1e:	47a0      	blx	r4
     f20:	4b06      	ldr	r3, [pc, #24]	; (f3c <delay_init+0x38>)
     f22:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     f24:	2205      	movs	r2, #5
     f26:	4b06      	ldr	r3, [pc, #24]	; (f40 <delay_init+0x3c>)
     f28:	601a      	str	r2, [r3, #0]
}
     f2a:	bd70      	pop	{r4, r5, r6, pc}
     f2c:	000024c5 	.word	0x000024c5
     f30:	00003b99 	.word	0x00003b99
     f34:	20000014 	.word	0x20000014
     f38:	000f4240 	.word	0x000f4240
     f3c:	20000018 	.word	0x20000018
     f40:	e000e010 	.word	0xe000e010

00000f44 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     f44:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     f46:	4b08      	ldr	r3, [pc, #32]	; (f68 <delay_cycles_ms+0x24>)
     f48:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     f4a:	4a08      	ldr	r2, [pc, #32]	; (f6c <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     f4c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     f4e:	2180      	movs	r1, #128	; 0x80
     f50:	0249      	lsls	r1, r1, #9
	while (n--) {
     f52:	3801      	subs	r0, #1
     f54:	d307      	bcc.n	f66 <delay_cycles_ms+0x22>
	if (n > 0) {
     f56:	2c00      	cmp	r4, #0
     f58:	d0fb      	beq.n	f52 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     f5a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     f5c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     f5e:	6813      	ldr	r3, [r2, #0]
     f60:	420b      	tst	r3, r1
     f62:	d0fc      	beq.n	f5e <delay_cycles_ms+0x1a>
     f64:	e7f5      	b.n	f52 <delay_cycles_ms+0xe>
	}
}
     f66:	bd30      	pop	{r4, r5, pc}
     f68:	20000014 	.word	0x20000014
     f6c:	e000e010 	.word	0xe000e010

00000f70 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     f70:	4b0c      	ldr	r3, [pc, #48]	; (fa4 <cpu_irq_enter_critical+0x34>)
     f72:	681b      	ldr	r3, [r3, #0]
     f74:	2b00      	cmp	r3, #0
     f76:	d106      	bne.n	f86 <cpu_irq_enter_critical+0x16>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     f78:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     f7c:	2b00      	cmp	r3, #0
     f7e:	d007      	beq.n	f90 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     f80:	2200      	movs	r2, #0
     f82:	4b09      	ldr	r3, [pc, #36]	; (fa8 <cpu_irq_enter_critical+0x38>)
     f84:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     f86:	4a07      	ldr	r2, [pc, #28]	; (fa4 <cpu_irq_enter_critical+0x34>)
     f88:	6813      	ldr	r3, [r2, #0]
     f8a:	3301      	adds	r3, #1
     f8c:	6013      	str	r3, [r2, #0]
}
     f8e:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     f90:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     f92:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     f96:	2200      	movs	r2, #0
     f98:	4b04      	ldr	r3, [pc, #16]	; (fac <cpu_irq_enter_critical+0x3c>)
     f9a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     f9c:	3201      	adds	r2, #1
     f9e:	4b02      	ldr	r3, [pc, #8]	; (fa8 <cpu_irq_enter_critical+0x38>)
     fa0:	701a      	strb	r2, [r3, #0]
     fa2:	e7f0      	b.n	f86 <cpu_irq_enter_critical+0x16>
     fa4:	2000027c 	.word	0x2000027c
     fa8:	20000280 	.word	0x20000280
     fac:	2000001c 	.word	0x2000001c

00000fb0 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     fb0:	4b08      	ldr	r3, [pc, #32]	; (fd4 <cpu_irq_leave_critical+0x24>)
     fb2:	681a      	ldr	r2, [r3, #0]
     fb4:	3a01      	subs	r2, #1
     fb6:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     fb8:	681b      	ldr	r3, [r3, #0]
     fba:	2b00      	cmp	r3, #0
     fbc:	d109      	bne.n	fd2 <cpu_irq_leave_critical+0x22>
     fbe:	4b06      	ldr	r3, [pc, #24]	; (fd8 <cpu_irq_leave_critical+0x28>)
     fc0:	781b      	ldrb	r3, [r3, #0]
     fc2:	2b00      	cmp	r3, #0
     fc4:	d005      	beq.n	fd2 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     fc6:	2201      	movs	r2, #1
     fc8:	4b04      	ldr	r3, [pc, #16]	; (fdc <cpu_irq_leave_critical+0x2c>)
     fca:	701a      	strb	r2, [r3, #0]
     fcc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     fd0:	b662      	cpsie	i
	}
}
     fd2:	4770      	bx	lr
     fd4:	2000027c 	.word	0x2000027c
     fd8:	20000280 	.word	0x20000280
     fdc:	2000001c 	.word	0x2000001c

00000fe0 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
     fe2:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     fe4:	ac01      	add	r4, sp, #4
     fe6:	2501      	movs	r5, #1
     fe8:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     fea:	2700      	movs	r7, #0
     fec:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     fee:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     ff0:	0021      	movs	r1, r4
     ff2:	203e      	movs	r0, #62	; 0x3e
     ff4:	4e06      	ldr	r6, [pc, #24]	; (1010 <system_board_init+0x30>)
     ff6:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     ff8:	2280      	movs	r2, #128	; 0x80
     ffa:	05d2      	lsls	r2, r2, #23
     ffc:	4b05      	ldr	r3, [pc, #20]	; (1014 <system_board_init+0x34>)
     ffe:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    1000:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    1002:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    1004:	0021      	movs	r1, r4
    1006:	200f      	movs	r0, #15
    1008:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
    100a:	b003      	add	sp, #12
    100c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    100e:	46c0      	nop			; (mov r8, r8)
    1010:	00001549 	.word	0x00001549
    1014:	41004480 	.word	0x41004480

00001018 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
    1018:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
    101a:	2200      	movs	r2, #0
    101c:	2300      	movs	r3, #0
    101e:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
    1020:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
    1022:	2100      	movs	r1, #0
    1024:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
    1026:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
    1028:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
    102a:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
    102c:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
    102e:	6082      	str	r2, [r0, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	//config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
    1030:	24c0      	movs	r4, #192	; 0xc0
    1032:	0164      	lsls	r4, r4, #5
    1034:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
    1036:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
    1038:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
    103a:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
    103c:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
    103e:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
    1040:	242a      	movs	r4, #42	; 0x2a
    1042:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
    1044:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
    1046:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
    1048:	3c06      	subs	r4, #6
    104a:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
    104c:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
    104e:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
    1050:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
    1052:	232b      	movs	r3, #43	; 0x2b
    1054:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
    1056:	3301      	adds	r3, #1
    1058:	54c1      	strb	r1, [r0, r3]
}
    105a:	bd10      	pop	{r4, pc}

0000105c <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
    105c:	b5f0      	push	{r4, r5, r6, r7, lr}
    105e:	46d6      	mov	lr, sl
    1060:	464f      	mov	r7, r9
    1062:	4646      	mov	r6, r8
    1064:	b5c0      	push	{r6, r7, lr}
    1066:	b096      	sub	sp, #88	; 0x58
    1068:	0007      	movs	r7, r0
    106a:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    106c:	6001      	str	r1, [r0, #0]
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    106e:	4ac6      	ldr	r2, [pc, #792]	; (1388 <adc_init+0x32c>)
    1070:	6a10      	ldr	r0, [r2, #32]
    1072:	2380      	movs	r3, #128	; 0x80
    1074:	025b      	lsls	r3, r3, #9
    1076:	4303      	orrs	r3, r0
    1078:	6213      	str	r3, [r2, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    107a:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    107c:	2005      	movs	r0, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    107e:	07db      	lsls	r3, r3, #31
    1080:	d505      	bpl.n	108e <adc_init+0x32>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
    1082:	b016      	add	sp, #88	; 0x58
    1084:	bc1c      	pop	{r2, r3, r4}
    1086:	4690      	mov	r8, r2
    1088:	4699      	mov	r9, r3
    108a:	46a2      	mov	sl, r4
    108c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    108e:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
    1090:	3017      	adds	r0, #23
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    1092:	079b      	lsls	r3, r3, #30
    1094:	d4f5      	bmi.n	1082 <adc_init+0x26>
	module_inst->reference = config->reference;
    1096:	7873      	ldrb	r3, [r6, #1]
    1098:	713b      	strb	r3, [r7, #4]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
    109a:	2b00      	cmp	r3, #0
    109c:	d104      	bne.n	10a8 <adc_init+0x4c>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
    109e:	4abb      	ldr	r2, [pc, #748]	; (138c <adc_init+0x330>)
    10a0:	6c13      	ldr	r3, [r2, #64]	; 0x40
    10a2:	2104      	movs	r1, #4
    10a4:	430b      	orrs	r3, r1
    10a6:	6413      	str	r3, [r2, #64]	; 0x40
		module_inst->callback[i] = NULL;
    10a8:	2300      	movs	r3, #0
    10aa:	60bb      	str	r3, [r7, #8]
    10ac:	60fb      	str	r3, [r7, #12]
    10ae:	613b      	str	r3, [r7, #16]
	module_inst->registered_callback_mask = 0;
    10b0:	76bb      	strb	r3, [r7, #26]
	module_inst->enabled_callback_mask = 0;
    10b2:	76fb      	strb	r3, [r7, #27]
	module_inst->remaining_conversions = 0;
    10b4:	833b      	strh	r3, [r7, #24]
	module_inst->job_status = STATUS_OK;
    10b6:	773b      	strb	r3, [r7, #28]
	_adc_instances[0] = module_inst;
    10b8:	4bb5      	ldr	r3, [pc, #724]	; (1390 <adc_init+0x334>)
    10ba:	601f      	str	r7, [r3, #0]
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
    10bc:	232a      	movs	r3, #42	; 0x2a
    10be:	5cf3      	ldrb	r3, [r6, r3]
    10c0:	2b00      	cmp	r3, #0
    10c2:	d105      	bne.n	10d0 <adc_init+0x74>
    10c4:	7d33      	ldrb	r3, [r6, #20]
    10c6:	2b00      	cmp	r3, #0
    10c8:	d102      	bne.n	10d0 <adc_init+0x74>
		module_inst->software_trigger = true;
    10ca:	3301      	adds	r3, #1
    10cc:	777b      	strb	r3, [r7, #29]
    10ce:	e001      	b.n	10d4 <adc_init+0x78>
		module_inst->software_trigger = false;
    10d0:	2300      	movs	r3, #0
    10d2:	777b      	strb	r3, [r7, #29]
	Adc *const adc_module = module_inst->hw;
    10d4:	683b      	ldr	r3, [r7, #0]
    10d6:	4698      	mov	r8, r3
	gclk_chan_conf.source_generator = config->clock_source;
    10d8:	7833      	ldrb	r3, [r6, #0]
    10da:	466a      	mov	r2, sp
    10dc:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
    10de:	4669      	mov	r1, sp
    10e0:	201e      	movs	r0, #30
    10e2:	4bac      	ldr	r3, [pc, #688]	; (1394 <adc_init+0x338>)
    10e4:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
    10e6:	201e      	movs	r0, #30
    10e8:	4bab      	ldr	r3, [pc, #684]	; (1398 <adc_init+0x33c>)
    10ea:	4798      	blx	r3
	if (config->pin_scan.inputs_to_scan != 0) {
    10ec:	232c      	movs	r3, #44	; 0x2c
    10ee:	5cf2      	ldrb	r2, [r6, r3]
    10f0:	2a00      	cmp	r2, #0
    10f2:	d054      	beq.n	119e <adc_init+0x142>
		uint8_t offset = config->pin_scan.offset_start_scan;
    10f4:	3b01      	subs	r3, #1
    10f6:	5cf5      	ldrb	r5, [r6, r3]
		uint8_t start_pin =
    10f8:	7b33      	ldrb	r3, [r6, #12]
    10fa:	18eb      	adds	r3, r5, r3
    10fc:	b2db      	uxtb	r3, r3
		uint8_t end_pin =
    10fe:	18d1      	adds	r1, r2, r3
		while (start_pin < end_pin) {
    1100:	b2c9      	uxtb	r1, r1
    1102:	428b      	cmp	r3, r1
    1104:	d221      	bcs.n	114a <adc_init+0xee>
    1106:	1952      	adds	r2, r2, r5
    1108:	b2d3      	uxtb	r3, r2
    110a:	4699      	mov	r9, r3
	const uint32_t pinmapping[] = {
    110c:	4ba3      	ldr	r3, [pc, #652]	; (139c <adc_init+0x340>)
    110e:	469a      	mov	sl, r3
    1110:	e003      	b.n	111a <adc_init+0xbe>
			offset++;
    1112:	3501      	adds	r5, #1
    1114:	b2ed      	uxtb	r5, r5
		while (start_pin < end_pin) {
    1116:	454d      	cmp	r5, r9
    1118:	d017      	beq.n	114a <adc_init+0xee>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
    111a:	240f      	movs	r4, #15
    111c:	402c      	ands	r4, r5
    111e:	7b33      	ldrb	r3, [r6, #12]
    1120:	18e4      	adds	r4, r4, r3
	const uint32_t pinmapping[] = {
    1122:	2250      	movs	r2, #80	; 0x50
    1124:	499e      	ldr	r1, [pc, #632]	; (13a0 <adc_init+0x344>)
    1126:	a802      	add	r0, sp, #8
    1128:	47d0      	blx	sl
	if (pin <= ADC_EXTCHANNEL_MSB) {
    112a:	2c13      	cmp	r4, #19
    112c:	d8f1      	bhi.n	1112 <adc_init+0xb6>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    112e:	00a4      	lsls	r4, r4, #2
    1130:	ab02      	add	r3, sp, #8
    1132:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1134:	a901      	add	r1, sp, #4
    1136:	2300      	movs	r3, #0
    1138:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    113a:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    113c:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    113e:	3301      	adds	r3, #1
    1140:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    1142:	b2c0      	uxtb	r0, r0
    1144:	4b97      	ldr	r3, [pc, #604]	; (13a4 <adc_init+0x348>)
    1146:	4798      	blx	r3
    1148:	e7e3      	b.n	1112 <adc_init+0xb6>
		_adc_configure_ain_pin(config->negative_input);
    114a:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
    114c:	2250      	movs	r2, #80	; 0x50
    114e:	4994      	ldr	r1, [pc, #592]	; (13a0 <adc_init+0x344>)
    1150:	a802      	add	r0, sp, #8
    1152:	4b92      	ldr	r3, [pc, #584]	; (139c <adc_init+0x340>)
    1154:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
    1156:	2c13      	cmp	r4, #19
    1158:	d913      	bls.n	1182 <adc_init+0x126>
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
    115a:	7d73      	ldrb	r3, [r6, #21]
    115c:	009b      	lsls	r3, r3, #2
    115e:	b2db      	uxtb	r3, r3
    1160:	4642      	mov	r2, r8
    1162:	7013      	strb	r3, [r2, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
    1164:	7db3      	ldrb	r3, [r6, #22]
    1166:	01db      	lsls	r3, r3, #7
    1168:	7872      	ldrb	r2, [r6, #1]
    116a:	4313      	orrs	r3, r2
    116c:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
    116e:	4642      	mov	r2, r8
    1170:	7053      	strb	r3, [r2, #1]
	switch (config->resolution) {
    1172:	7933      	ldrb	r3, [r6, #4]
    1174:	2b34      	cmp	r3, #52	; 0x34
    1176:	d900      	bls.n	117a <adc_init+0x11e>
    1178:	e17b      	b.n	1472 <adc_init+0x416>
    117a:	009b      	lsls	r3, r3, #2
    117c:	4a8a      	ldr	r2, [pc, #552]	; (13a8 <adc_init+0x34c>)
    117e:	58d3      	ldr	r3, [r2, r3]
    1180:	469f      	mov	pc, r3
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    1182:	00a4      	lsls	r4, r4, #2
    1184:	ab02      	add	r3, sp, #8
    1186:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1188:	a901      	add	r1, sp, #4
    118a:	2300      	movs	r3, #0
    118c:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    118e:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    1190:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    1192:	3301      	adds	r3, #1
    1194:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    1196:	b2c0      	uxtb	r0, r0
    1198:	4b82      	ldr	r3, [pc, #520]	; (13a4 <adc_init+0x348>)
    119a:	4798      	blx	r3
    119c:	e7dd      	b.n	115a <adc_init+0xfe>
		_adc_configure_ain_pin(config->positive_input);
    119e:	7b34      	ldrb	r4, [r6, #12]
	const uint32_t pinmapping[] = {
    11a0:	2250      	movs	r2, #80	; 0x50
    11a2:	497f      	ldr	r1, [pc, #508]	; (13a0 <adc_init+0x344>)
    11a4:	a802      	add	r0, sp, #8
    11a6:	4b7d      	ldr	r3, [pc, #500]	; (139c <adc_init+0x340>)
    11a8:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
    11aa:	2c13      	cmp	r4, #19
    11ac:	d915      	bls.n	11da <adc_init+0x17e>
		_adc_configure_ain_pin(config->negative_input);
    11ae:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
    11b0:	2250      	movs	r2, #80	; 0x50
    11b2:	497b      	ldr	r1, [pc, #492]	; (13a0 <adc_init+0x344>)
    11b4:	a802      	add	r0, sp, #8
    11b6:	4b79      	ldr	r3, [pc, #484]	; (139c <adc_init+0x340>)
    11b8:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
    11ba:	2c13      	cmp	r4, #19
    11bc:	d8cd      	bhi.n	115a <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    11be:	00a4      	lsls	r4, r4, #2
    11c0:	ab02      	add	r3, sp, #8
    11c2:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    11c4:	a901      	add	r1, sp, #4
    11c6:	2300      	movs	r3, #0
    11c8:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    11ca:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    11cc:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    11ce:	3301      	adds	r3, #1
    11d0:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    11d2:	b2c0      	uxtb	r0, r0
    11d4:	4b73      	ldr	r3, [pc, #460]	; (13a4 <adc_init+0x348>)
    11d6:	4798      	blx	r3
    11d8:	e7bf      	b.n	115a <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    11da:	00a4      	lsls	r4, r4, #2
    11dc:	ab02      	add	r3, sp, #8
    11de:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    11e0:	a901      	add	r1, sp, #4
    11e2:	2300      	movs	r3, #0
    11e4:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    11e6:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    11e8:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    11ea:	3301      	adds	r3, #1
    11ec:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    11ee:	b2c0      	uxtb	r0, r0
    11f0:	4b6c      	ldr	r3, [pc, #432]	; (13a4 <adc_init+0x348>)
    11f2:	4798      	blx	r3
    11f4:	e7db      	b.n	11ae <adc_init+0x152>
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
    11f6:	2304      	movs	r3, #4
		resolution = ADC_RESOLUTION_16BIT;
    11f8:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_4;
    11fa:	2102      	movs	r1, #2
    11fc:	e01a      	b.n	1234 <adc_init+0x1d8>
		adjres = config->divide_result;
    11fe:	7c71      	ldrb	r1, [r6, #17]
		accumulate = config->accumulate_samples;
    1200:	7c33      	ldrb	r3, [r6, #16]
		resolution = ADC_RESOLUTION_16BIT;
    1202:	2410      	movs	r4, #16
    1204:	e016      	b.n	1234 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
    1206:	2306      	movs	r3, #6
		resolution = ADC_RESOLUTION_16BIT;
    1208:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
    120a:	2101      	movs	r1, #1
    120c:	e012      	b.n	1234 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
    120e:	2308      	movs	r3, #8
		resolution = ADC_RESOLUTION_16BIT;
    1210:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
    1212:	2100      	movs	r1, #0
    1214:	e00e      	b.n	1234 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    1216:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_8BIT;
    1218:	2430      	movs	r4, #48	; 0x30
	uint8_t adjres = 0;
    121a:	2100      	movs	r1, #0
    121c:	e00a      	b.n	1234 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    121e:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_10BIT;
    1220:	2420      	movs	r4, #32
	uint8_t adjres = 0;
    1222:	2100      	movs	r1, #0
    1224:	e006      	b.n	1234 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    1226:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_12BIT;
    1228:	2400      	movs	r4, #0
	uint8_t adjres = 0;
    122a:	2100      	movs	r1, #0
    122c:	e002      	b.n	1234 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
    122e:	2302      	movs	r3, #2
		resolution = ADC_RESOLUTION_16BIT;
    1230:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
    1232:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
    1234:	0109      	lsls	r1, r1, #4
    1236:	2270      	movs	r2, #112	; 0x70
    1238:	400a      	ands	r2, r1
    123a:	4313      	orrs	r3, r2
    123c:	4642      	mov	r2, r8
    123e:	7093      	strb	r3, [r2, #2]
	if (config->sample_length > 63) {
    1240:	7df3      	ldrb	r3, [r6, #23]
		return STATUS_ERR_INVALID_ARG;
    1242:	2017      	movs	r0, #23
	if (config->sample_length > 63) {
    1244:	2b3f      	cmp	r3, #63	; 0x3f
    1246:	d900      	bls.n	124a <adc_init+0x1ee>
    1248:	e71b      	b.n	1082 <adc_init+0x26>
		adc_module->SAMPCTRL.reg =
    124a:	70d3      	strb	r3, [r2, #3]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    124c:	683a      	ldr	r2, [r7, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    124e:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    1250:	b25b      	sxtb	r3, r3
    1252:	2b00      	cmp	r3, #0
    1254:	dbfb      	blt.n	124e <adc_init+0x1f2>
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
    1256:	7cf3      	ldrb	r3, [r6, #19]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    1258:	8872      	ldrh	r2, [r6, #2]
    125a:	4313      	orrs	r3, r2
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
    125c:	2224      	movs	r2, #36	; 0x24
    125e:	5cb2      	ldrb	r2, [r6, r2]
    1260:	00d2      	lsls	r2, r2, #3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    1262:	4313      	orrs	r3, r2
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
    1264:	7d32      	ldrb	r2, [r6, #20]
    1266:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    1268:	4313      	orrs	r3, r2
    126a:	7cb2      	ldrb	r2, [r6, #18]
    126c:	0052      	lsls	r2, r2, #1
    126e:	4313      	orrs	r3, r2
    1270:	4323      	orrs	r3, r4
	adc_module->CTRLB.reg =
    1272:	4642      	mov	r2, r8
    1274:	8093      	strh	r3, [r2, #4]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
    1276:	7e33      	ldrb	r3, [r6, #24]
    1278:	2b00      	cmp	r3, #0
    127a:	d020      	beq.n	12be <adc_init+0x262>
		switch (resolution) {
    127c:	2c10      	cmp	r4, #16
    127e:	d100      	bne.n	1282 <adc_init+0x226>
    1280:	e0d9      	b.n	1436 <adc_init+0x3da>
    1282:	d800      	bhi.n	1286 <adc_init+0x22a>
    1284:	e098      	b.n	13b8 <adc_init+0x35c>
    1286:	2c20      	cmp	r4, #32
    1288:	d100      	bne.n	128c <adc_init+0x230>
    128a:	e0b6      	b.n	13fa <adc_init+0x39e>
    128c:	2c30      	cmp	r4, #48	; 0x30
    128e:	d116      	bne.n	12be <adc_init+0x262>
			if (config->differential_mode &&
    1290:	7cf2      	ldrb	r2, [r6, #19]
    1292:	2a00      	cmp	r2, #0
    1294:	d00a      	beq.n	12ac <adc_init+0x250>
					(config->window.window_lower_value > 127 ||
    1296:	69f2      	ldr	r2, [r6, #28]
    1298:	3280      	adds	r2, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
    129a:	2017      	movs	r0, #23
			if (config->differential_mode &&
    129c:	2aff      	cmp	r2, #255	; 0xff
    129e:	d900      	bls.n	12a2 <adc_init+0x246>
    12a0:	e6ef      	b.n	1082 <adc_init+0x26>
					config->window.window_lower_value < -128 ||
    12a2:	6a32      	ldr	r2, [r6, #32]
    12a4:	3280      	adds	r2, #128	; 0x80
    12a6:	2aff      	cmp	r2, #255	; 0xff
    12a8:	d900      	bls.n	12ac <adc_init+0x250>
    12aa:	e6ea      	b.n	1082 <adc_init+0x26>
				return STATUS_ERR_INVALID_ARG;
    12ac:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 255 ||
    12ae:	69f2      	ldr	r2, [r6, #28]
    12b0:	2aff      	cmp	r2, #255	; 0xff
    12b2:	dd00      	ble.n	12b6 <adc_init+0x25a>
    12b4:	e6e5      	b.n	1082 <adc_init+0x26>
    12b6:	6a32      	ldr	r2, [r6, #32]
    12b8:	2aff      	cmp	r2, #255	; 0xff
    12ba:	dd00      	ble.n	12be <adc_init+0x262>
    12bc:	e6e1      	b.n	1082 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
    12be:	6839      	ldr	r1, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    12c0:	7e4a      	ldrb	r2, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    12c2:	b252      	sxtb	r2, r2
    12c4:	2a00      	cmp	r2, #0
    12c6:	dbfb      	blt.n	12c0 <adc_init+0x264>
	adc_module->WINCTRL.reg = config->window.window_mode;
    12c8:	4642      	mov	r2, r8
    12ca:	7213      	strb	r3, [r2, #8]
	Adc *const adc_module = module_inst->hw;
    12cc:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    12ce:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    12d0:	b25b      	sxtb	r3, r3
    12d2:	2b00      	cmp	r3, #0
    12d4:	dbfb      	blt.n	12ce <adc_init+0x272>
	adc_module->WINLT.reg =
    12d6:	8bb3      	ldrh	r3, [r6, #28]
    12d8:	4642      	mov	r2, r8
    12da:	8393      	strh	r3, [r2, #28]
	Adc *const adc_module = module_inst->hw;
    12dc:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    12de:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    12e0:	b25b      	sxtb	r3, r3
    12e2:	2b00      	cmp	r3, #0
    12e4:	dbfb      	blt.n	12de <adc_init+0x282>
	adc_module->WINUT.reg = config->window.window_upper_value <<
    12e6:	8c33      	ldrh	r3, [r6, #32]
    12e8:	4642      	mov	r2, r8
    12ea:	8413      	strh	r3, [r2, #32]
	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
    12ec:	232c      	movs	r3, #44	; 0x2c
    12ee:	5cf3      	ldrb	r3, [r6, r3]
	if (inputs_to_scan > 0) {
    12f0:	2b00      	cmp	r3, #0
    12f2:	d005      	beq.n	1300 <adc_init+0x2a4>
		inputs_to_scan--;
    12f4:	3b01      	subs	r3, #1
    12f6:	b2db      	uxtb	r3, r3
		return STATUS_ERR_INVALID_ARG;
    12f8:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    12fa:	2b0f      	cmp	r3, #15
    12fc:	d900      	bls.n	1300 <adc_init+0x2a4>
    12fe:	e6c0      	b.n	1082 <adc_init+0x26>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
    1300:	222b      	movs	r2, #43	; 0x2b
    1302:	5cb1      	ldrb	r1, [r6, r2]
		return STATUS_ERR_INVALID_ARG;
    1304:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    1306:	290f      	cmp	r1, #15
    1308:	d900      	bls.n	130c <adc_init+0x2b0>
    130a:	e6ba      	b.n	1082 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
    130c:	6838      	ldr	r0, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    130e:	7e42      	ldrb	r2, [r0, #25]
	while (adc_is_syncing(module_inst)) {
    1310:	b252      	sxtb	r2, r2
    1312:	2a00      	cmp	r2, #0
    1314:	dbfb      	blt.n	130e <adc_init+0x2b2>
			config->negative_input |
    1316:	89f2      	ldrh	r2, [r6, #14]
			config->positive_input;
    1318:	7b30      	ldrb	r0, [r6, #12]
			config->negative_input |
    131a:	4302      	orrs	r2, r0
    131c:	68b0      	ldr	r0, [r6, #8]
    131e:	4302      	orrs	r2, r0
			(config->pin_scan.offset_start_scan <<
    1320:	0509      	lsls	r1, r1, #20
			config->negative_input |
    1322:	430a      	orrs	r2, r1
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    1324:	041b      	lsls	r3, r3, #16
			config->negative_input |
    1326:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
    1328:	4642      	mov	r2, r8
    132a:	6113      	str	r3, [r2, #16]
	adc_module->EVCTRL.reg = config->event_action;
    132c:	232a      	movs	r3, #42	; 0x2a
    132e:	5cf3      	ldrb	r3, [r6, r3]
    1330:	7513      	strb	r3, [r2, #20]
	adc_module->INTENCLR.reg =
    1332:	230f      	movs	r3, #15
    1334:	7593      	strb	r3, [r2, #22]
	if (config->correction.correction_enable){
    1336:	3315      	adds	r3, #21
    1338:	5cf3      	ldrb	r3, [r6, r3]
    133a:	2b00      	cmp	r3, #0
    133c:	d012      	beq.n	1364 <adc_init+0x308>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    133e:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
    1340:	4a1a      	ldr	r2, [pc, #104]	; (13ac <adc_init+0x350>)
			return STATUS_ERR_INVALID_ARG;
    1342:	2017      	movs	r0, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    1344:	4293      	cmp	r3, r2
    1346:	d900      	bls.n	134a <adc_init+0x2ee>
    1348:	e69b      	b.n	1082 <adc_init+0x26>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
    134a:	4642      	mov	r2, r8
    134c:	8493      	strh	r3, [r2, #36]	; 0x24
		if (config->correction.offset_correction > 2047 ||
    134e:	8d32      	ldrh	r2, [r6, #40]	; 0x28
    1350:	2380      	movs	r3, #128	; 0x80
    1352:	011b      	lsls	r3, r3, #4
    1354:	18d3      	adds	r3, r2, r3
    1356:	4915      	ldr	r1, [pc, #84]	; (13ac <adc_init+0x350>)
    1358:	b29b      	uxth	r3, r3
    135a:	428b      	cmp	r3, r1
    135c:	d900      	bls.n	1360 <adc_init+0x304>
    135e:	e690      	b.n	1082 <adc_init+0x26>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
    1360:	4643      	mov	r3, r8
    1362:	84da      	strh	r2, [r3, #38]	; 0x26
			ADC_CALIB_BIAS_CAL(
    1364:	4b12      	ldr	r3, [pc, #72]	; (13b0 <adc_init+0x354>)
    1366:	681b      	ldr	r3, [r3, #0]
    1368:	015b      	lsls	r3, r3, #5
    136a:	22e0      	movs	r2, #224	; 0xe0
    136c:	00d2      	lsls	r2, r2, #3
    136e:	4013      	ands	r3, r2
			ADC_CALIB_LINEARITY_CAL(
    1370:	4a10      	ldr	r2, [pc, #64]	; (13b4 <adc_init+0x358>)
    1372:	6851      	ldr	r1, [r2, #4]
    1374:	0149      	lsls	r1, r1, #5
    1376:	6812      	ldr	r2, [r2, #0]
    1378:	0ed2      	lsrs	r2, r2, #27
    137a:	430a      	orrs	r2, r1
    137c:	b2d2      	uxtb	r2, r2
			) |
    137e:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
    1380:	4642      	mov	r2, r8
    1382:	8513      	strh	r3, [r2, #40]	; 0x28
	return STATUS_OK;
    1384:	2000      	movs	r0, #0
    1386:	e67c      	b.n	1082 <adc_init+0x26>
    1388:	40000400 	.word	0x40000400
    138c:	40000800 	.word	0x40000800
    1390:	20000364 	.word	0x20000364
    1394:	000025dd 	.word	0x000025dd
    1398:	00002551 	.word	0x00002551
    139c:	00003f35 	.word	0x00003f35
    13a0:	000057c4 	.word	0x000057c4
    13a4:	000026d5 	.word	0x000026d5
    13a8:	000056f0 	.word	0x000056f0
    13ac:	00000fff 	.word	0x00000fff
    13b0:	00806024 	.word	0x00806024
    13b4:	00806020 	.word	0x00806020
		switch (resolution) {
    13b8:	2c00      	cmp	r4, #0
    13ba:	d000      	beq.n	13be <adc_init+0x362>
    13bc:	e77f      	b.n	12be <adc_init+0x262>
			if (config->differential_mode &&
    13be:	7cf2      	ldrb	r2, [r6, #19]
    13c0:	2a00      	cmp	r2, #0
    13c2:	d00f      	beq.n	13e4 <adc_init+0x388>
					(config->window.window_lower_value > 2047 ||
    13c4:	69f2      	ldr	r2, [r6, #28]
    13c6:	2180      	movs	r1, #128	; 0x80
    13c8:	0109      	lsls	r1, r1, #4
    13ca:	468c      	mov	ip, r1
    13cc:	4462      	add	r2, ip
			if (config->differential_mode &&
    13ce:	492a      	ldr	r1, [pc, #168]	; (1478 <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
    13d0:	2017      	movs	r0, #23
			if (config->differential_mode &&
    13d2:	428a      	cmp	r2, r1
    13d4:	d900      	bls.n	13d8 <adc_init+0x37c>
    13d6:	e654      	b.n	1082 <adc_init+0x26>
					config->window.window_lower_value < -2048 ||
    13d8:	6a32      	ldr	r2, [r6, #32]
    13da:	4462      	add	r2, ip
    13dc:	4926      	ldr	r1, [pc, #152]	; (1478 <adc_init+0x41c>)
    13de:	428a      	cmp	r2, r1
    13e0:	d900      	bls.n	13e4 <adc_init+0x388>
    13e2:	e64e      	b.n	1082 <adc_init+0x26>
			} else if (config->window.window_lower_value > 4095 ||
    13e4:	4a24      	ldr	r2, [pc, #144]	; (1478 <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
    13e6:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
    13e8:	69f1      	ldr	r1, [r6, #28]
    13ea:	4291      	cmp	r1, r2
    13ec:	dd00      	ble.n	13f0 <adc_init+0x394>
    13ee:	e648      	b.n	1082 <adc_init+0x26>
    13f0:	6a31      	ldr	r1, [r6, #32]
    13f2:	4291      	cmp	r1, r2
    13f4:	dd00      	ble.n	13f8 <adc_init+0x39c>
    13f6:	e644      	b.n	1082 <adc_init+0x26>
    13f8:	e761      	b.n	12be <adc_init+0x262>
			if (config->differential_mode &&
    13fa:	7cf2      	ldrb	r2, [r6, #19]
    13fc:	2a00      	cmp	r2, #0
    13fe:	d00f      	beq.n	1420 <adc_init+0x3c4>
					(config->window.window_lower_value > 511 ||
    1400:	69f2      	ldr	r2, [r6, #28]
    1402:	2180      	movs	r1, #128	; 0x80
    1404:	0089      	lsls	r1, r1, #2
    1406:	468c      	mov	ip, r1
    1408:	4462      	add	r2, ip
			if (config->differential_mode &&
    140a:	491c      	ldr	r1, [pc, #112]	; (147c <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
    140c:	2017      	movs	r0, #23
			if (config->differential_mode &&
    140e:	428a      	cmp	r2, r1
    1410:	d900      	bls.n	1414 <adc_init+0x3b8>
    1412:	e636      	b.n	1082 <adc_init+0x26>
					config->window.window_lower_value < -512 ||
    1414:	6a32      	ldr	r2, [r6, #32]
    1416:	4462      	add	r2, ip
    1418:	4918      	ldr	r1, [pc, #96]	; (147c <adc_init+0x420>)
    141a:	428a      	cmp	r2, r1
    141c:	d900      	bls.n	1420 <adc_init+0x3c4>
    141e:	e630      	b.n	1082 <adc_init+0x26>
			} else if (config->window.window_lower_value > 1023 ||
    1420:	4a16      	ldr	r2, [pc, #88]	; (147c <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
    1422:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
    1424:	69f1      	ldr	r1, [r6, #28]
    1426:	4291      	cmp	r1, r2
    1428:	dd00      	ble.n	142c <adc_init+0x3d0>
    142a:	e62a      	b.n	1082 <adc_init+0x26>
    142c:	6a31      	ldr	r1, [r6, #32]
    142e:	4291      	cmp	r1, r2
    1430:	dd00      	ble.n	1434 <adc_init+0x3d8>
    1432:	e626      	b.n	1082 <adc_init+0x26>
    1434:	e743      	b.n	12be <adc_init+0x262>
			if (config->differential_mode &&
    1436:	7cf2      	ldrb	r2, [r6, #19]
    1438:	2a00      	cmp	r2, #0
    143a:	d00f      	beq.n	145c <adc_init+0x400>
					(config->window.window_lower_value > 32767 ||
    143c:	69f2      	ldr	r2, [r6, #28]
    143e:	2180      	movs	r1, #128	; 0x80
    1440:	0209      	lsls	r1, r1, #8
    1442:	468c      	mov	ip, r1
    1444:	4462      	add	r2, ip
			if (config->differential_mode &&
    1446:	490e      	ldr	r1, [pc, #56]	; (1480 <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
    1448:	2017      	movs	r0, #23
			if (config->differential_mode &&
    144a:	428a      	cmp	r2, r1
    144c:	d900      	bls.n	1450 <adc_init+0x3f4>
    144e:	e618      	b.n	1082 <adc_init+0x26>
					config->window.window_lower_value < -32768 ||
    1450:	6a32      	ldr	r2, [r6, #32]
    1452:	4462      	add	r2, ip
    1454:	490a      	ldr	r1, [pc, #40]	; (1480 <adc_init+0x424>)
    1456:	428a      	cmp	r2, r1
    1458:	d900      	bls.n	145c <adc_init+0x400>
    145a:	e612      	b.n	1082 <adc_init+0x26>
			} else if (config->window.window_lower_value > 65535 ||
    145c:	4a08      	ldr	r2, [pc, #32]	; (1480 <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
    145e:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
    1460:	69f1      	ldr	r1, [r6, #28]
    1462:	4291      	cmp	r1, r2
    1464:	dd00      	ble.n	1468 <adc_init+0x40c>
    1466:	e60c      	b.n	1082 <adc_init+0x26>
    1468:	6a31      	ldr	r1, [r6, #32]
    146a:	4291      	cmp	r1, r2
    146c:	dd00      	ble.n	1470 <adc_init+0x414>
    146e:	e608      	b.n	1082 <adc_init+0x26>
    1470:	e725      	b.n	12be <adc_init+0x262>
		return STATUS_ERR_INVALID_ARG;
    1472:	2017      	movs	r0, #23
    1474:	e605      	b.n	1082 <adc_init+0x26>
    1476:	46c0      	nop			; (mov r8, r8)
    1478:	00000fff 	.word	0x00000fff
    147c:	000003ff 	.word	0x000003ff
    1480:	0000ffff 	.word	0x0000ffff

00001484 <ADC_Handler>:
	}
}

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
    1484:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
    1486:	4b2f      	ldr	r3, [pc, #188]	; (1544 <ADC_Handler+0xc0>)
    1488:	681d      	ldr	r5, [r3, #0]
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
    148a:	682b      	ldr	r3, [r5, #0]
    148c:	7e1a      	ldrb	r2, [r3, #24]
    148e:	7ddc      	ldrb	r4, [r3, #23]
    1490:	4014      	ands	r4, r2
	if (flags & ADC_INTFLAG_RESRDY) {
    1492:	07e2      	lsls	r2, r4, #31
    1494:	d416      	bmi.n	14c4 <ADC_Handler+0x40>
	if (flags & ADC_INTFLAG_WINMON) {
    1496:	0763      	lsls	r3, r4, #29
    1498:	d508      	bpl.n	14ac <ADC_Handler+0x28>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
    149a:	2304      	movs	r3, #4
    149c:	682a      	ldr	r2, [r5, #0]
    149e:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    14a0:	7eeb      	ldrb	r3, [r5, #27]
    14a2:	079b      	lsls	r3, r3, #30
    14a4:	d502      	bpl.n	14ac <ADC_Handler+0x28>
    14a6:	7eab      	ldrb	r3, [r5, #26]
    14a8:	079b      	lsls	r3, r3, #30
    14aa:	d442      	bmi.n	1532 <ADC_Handler+0xae>
	if (flags & ADC_INTFLAG_OVERRUN) {
    14ac:	07a3      	lsls	r3, r4, #30
    14ae:	d508      	bpl.n	14c2 <ADC_Handler+0x3e>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    14b0:	2302      	movs	r3, #2
    14b2:	682a      	ldr	r2, [r5, #0]
    14b4:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    14b6:	7eeb      	ldrb	r3, [r5, #27]
    14b8:	075b      	lsls	r3, r3, #29
    14ba:	d502      	bpl.n	14c2 <ADC_Handler+0x3e>
    14bc:	7eab      	ldrb	r3, [r5, #26]
    14be:	075b      	lsls	r3, r3, #29
    14c0:	d43b      	bmi.n	153a <ADC_Handler+0xb6>
	_adc_interrupt_handler(0);
}
    14c2:	bd70      	pop	{r4, r5, r6, pc}
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    14c4:	2201      	movs	r2, #1
    14c6:	761a      	strb	r2, [r3, #24]
	Adc *const adc_module = module_inst->hw;
    14c8:	682a      	ldr	r2, [r5, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    14ca:	7e53      	ldrb	r3, [r2, #25]
		while (adc_is_syncing(module)) {
    14cc:	b25b      	sxtb	r3, r3
    14ce:	2b00      	cmp	r3, #0
    14d0:	dbfb      	blt.n	14ca <ADC_Handler+0x46>
		*(module->job_buffer++) = module->hw->RESULT.reg;
    14d2:	6969      	ldr	r1, [r5, #20]
    14d4:	1c8b      	adds	r3, r1, #2
    14d6:	616b      	str	r3, [r5, #20]
    14d8:	8b53      	ldrh	r3, [r2, #26]
    14da:	b29b      	uxth	r3, r3
    14dc:	800b      	strh	r3, [r1, #0]
		if (--module->remaining_conversions > 0) {
    14de:	8b2b      	ldrh	r3, [r5, #24]
    14e0:	3b01      	subs	r3, #1
    14e2:	b29b      	uxth	r3, r3
    14e4:	832b      	strh	r3, [r5, #24]
    14e6:	2b00      	cmp	r3, #0
    14e8:	d011      	beq.n	150e <ADC_Handler+0x8a>
			if (module->software_trigger == true) {
    14ea:	7f6b      	ldrb	r3, [r5, #29]
    14ec:	2b00      	cmp	r3, #0
    14ee:	d0d2      	beq.n	1496 <ADC_Handler+0x12>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    14f0:	682a      	ldr	r2, [r5, #0]
    14f2:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    14f4:	b25b      	sxtb	r3, r3
    14f6:	2b00      	cmp	r3, #0
    14f8:	dbfb      	blt.n	14f2 <ADC_Handler+0x6e>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    14fa:	7b13      	ldrb	r3, [r2, #12]
    14fc:	2102      	movs	r1, #2
    14fe:	430b      	orrs	r3, r1
    1500:	7313      	strb	r3, [r2, #12]
	Adc *const adc_module = module_inst->hw;
    1502:	682a      	ldr	r2, [r5, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1504:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    1506:	b25b      	sxtb	r3, r3
    1508:	2b00      	cmp	r3, #0
    150a:	dbfb      	blt.n	1504 <ADC_Handler+0x80>
    150c:	e7c3      	b.n	1496 <ADC_Handler+0x12>
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
    150e:	2301      	movs	r3, #1
    1510:	682a      	ldr	r2, [r5, #0]
    1512:	7593      	strb	r3, [r2, #22]
			if (module->job_status == STATUS_BUSY) {
    1514:	7f2b      	ldrb	r3, [r5, #28]
    1516:	2b05      	cmp	r3, #5
    1518:	d1bd      	bne.n	1496 <ADC_Handler+0x12>
				module->job_status = STATUS_OK;
    151a:	2300      	movs	r3, #0
    151c:	772b      	strb	r3, [r5, #28]
				if ((module->enabled_callback_mask &
    151e:	7eeb      	ldrb	r3, [r5, #27]
    1520:	07db      	lsls	r3, r3, #31
    1522:	d5b8      	bpl.n	1496 <ADC_Handler+0x12>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
    1524:	7eab      	ldrb	r3, [r5, #26]
    1526:	07db      	lsls	r3, r3, #31
    1528:	d5b5      	bpl.n	1496 <ADC_Handler+0x12>
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
    152a:	0028      	movs	r0, r5
    152c:	68ab      	ldr	r3, [r5, #8]
    152e:	4798      	blx	r3
    1530:	e7b1      	b.n	1496 <ADC_Handler+0x12>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
    1532:	0028      	movs	r0, r5
    1534:	68eb      	ldr	r3, [r5, #12]
    1536:	4798      	blx	r3
    1538:	e7b8      	b.n	14ac <ADC_Handler+0x28>
			(module->callback[ADC_CALLBACK_ERROR])(module);
    153a:	692b      	ldr	r3, [r5, #16]
    153c:	0028      	movs	r0, r5
    153e:	4798      	blx	r3
}
    1540:	e7bf      	b.n	14c2 <ADC_Handler+0x3e>
    1542:	46c0      	nop			; (mov r8, r8)
    1544:	20000364 	.word	0x20000364

00001548 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    1548:	b500      	push	{lr}
    154a:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    154c:	ab01      	add	r3, sp, #4
    154e:	2280      	movs	r2, #128	; 0x80
    1550:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    1552:	780a      	ldrb	r2, [r1, #0]
    1554:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    1556:	784a      	ldrb	r2, [r1, #1]
    1558:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    155a:	788a      	ldrb	r2, [r1, #2]
    155c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    155e:	0019      	movs	r1, r3
    1560:	4b01      	ldr	r3, [pc, #4]	; (1568 <port_pin_set_config+0x20>)
    1562:	4798      	blx	r3
}
    1564:	b003      	add	sp, #12
    1566:	bd00      	pop	{pc}
    1568:	000026d5 	.word	0x000026d5

0000156c <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    156c:	b5f0      	push	{r4, r5, r6, r7, lr}
    156e:	46de      	mov	lr, fp
    1570:	4657      	mov	r7, sl
    1572:	464e      	mov	r6, r9
    1574:	4645      	mov	r5, r8
    1576:	b5e0      	push	{r5, r6, r7, lr}
    1578:	b087      	sub	sp, #28
    157a:	4680      	mov	r8, r0
    157c:	9104      	str	r1, [sp, #16]
    157e:	0016      	movs	r6, r2
    1580:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    1582:	2200      	movs	r2, #0
    1584:	2300      	movs	r3, #0
    1586:	2100      	movs	r1, #0
    1588:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    158a:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    158c:	2001      	movs	r0, #1
    158e:	0021      	movs	r1, r4
    1590:	9600      	str	r6, [sp, #0]
    1592:	9701      	str	r7, [sp, #4]
    1594:	465c      	mov	r4, fp
    1596:	9403      	str	r4, [sp, #12]
    1598:	4644      	mov	r4, r8
    159a:	9405      	str	r4, [sp, #20]
    159c:	e013      	b.n	15c6 <long_division+0x5a>
    159e:	2420      	movs	r4, #32
    15a0:	1a64      	subs	r4, r4, r1
    15a2:	0005      	movs	r5, r0
    15a4:	40e5      	lsrs	r5, r4
    15a6:	46a8      	mov	r8, r5
    15a8:	e014      	b.n	15d4 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    15aa:	9c00      	ldr	r4, [sp, #0]
    15ac:	9d01      	ldr	r5, [sp, #4]
    15ae:	1b12      	subs	r2, r2, r4
    15b0:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    15b2:	465c      	mov	r4, fp
    15b4:	464d      	mov	r5, r9
    15b6:	432c      	orrs	r4, r5
    15b8:	46a3      	mov	fp, r4
    15ba:	9c03      	ldr	r4, [sp, #12]
    15bc:	4645      	mov	r5, r8
    15be:	432c      	orrs	r4, r5
    15c0:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    15c2:	3901      	subs	r1, #1
    15c4:	d325      	bcc.n	1612 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    15c6:	2420      	movs	r4, #32
    15c8:	4264      	negs	r4, r4
    15ca:	190c      	adds	r4, r1, r4
    15cc:	d4e7      	bmi.n	159e <long_division+0x32>
    15ce:	0005      	movs	r5, r0
    15d0:	40a5      	lsls	r5, r4
    15d2:	46a8      	mov	r8, r5
    15d4:	0004      	movs	r4, r0
    15d6:	408c      	lsls	r4, r1
    15d8:	46a1      	mov	r9, r4
		r = r << 1;
    15da:	1892      	adds	r2, r2, r2
    15dc:	415b      	adcs	r3, r3
    15de:	0014      	movs	r4, r2
    15e0:	001d      	movs	r5, r3
		if (n & bit_shift) {
    15e2:	9e05      	ldr	r6, [sp, #20]
    15e4:	464f      	mov	r7, r9
    15e6:	403e      	ands	r6, r7
    15e8:	46b4      	mov	ip, r6
    15ea:	9e04      	ldr	r6, [sp, #16]
    15ec:	4647      	mov	r7, r8
    15ee:	403e      	ands	r6, r7
    15f0:	46b2      	mov	sl, r6
    15f2:	4666      	mov	r6, ip
    15f4:	4657      	mov	r7, sl
    15f6:	433e      	orrs	r6, r7
    15f8:	d003      	beq.n	1602 <long_division+0x96>
			r |= 0x01;
    15fa:	0006      	movs	r6, r0
    15fc:	4326      	orrs	r6, r4
    15fe:	0032      	movs	r2, r6
    1600:	002b      	movs	r3, r5
		if (r >= d) {
    1602:	9c00      	ldr	r4, [sp, #0]
    1604:	9d01      	ldr	r5, [sp, #4]
    1606:	429d      	cmp	r5, r3
    1608:	d8db      	bhi.n	15c2 <long_division+0x56>
    160a:	d1ce      	bne.n	15aa <long_division+0x3e>
    160c:	4294      	cmp	r4, r2
    160e:	d8d8      	bhi.n	15c2 <long_division+0x56>
    1610:	e7cb      	b.n	15aa <long_division+0x3e>
    1612:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    1614:	4658      	mov	r0, fp
    1616:	0019      	movs	r1, r3
    1618:	b007      	add	sp, #28
    161a:	bc3c      	pop	{r2, r3, r4, r5}
    161c:	4690      	mov	r8, r2
    161e:	4699      	mov	r9, r3
    1620:	46a2      	mov	sl, r4
    1622:	46ab      	mov	fp, r5
    1624:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001626 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    1626:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    1628:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    162a:	2340      	movs	r3, #64	; 0x40
    162c:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    162e:	4281      	cmp	r1, r0
    1630:	d202      	bcs.n	1638 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    1632:	0018      	movs	r0, r3
    1634:	bd10      	pop	{r4, pc}
		baud_calculated++;
    1636:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    1638:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    163a:	1c63      	adds	r3, r4, #1
    163c:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    163e:	4288      	cmp	r0, r1
    1640:	d9f9      	bls.n	1636 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1642:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    1644:	2cff      	cmp	r4, #255	; 0xff
    1646:	d8f4      	bhi.n	1632 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    1648:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    164a:	2300      	movs	r3, #0
    164c:	e7f1      	b.n	1632 <_sercom_get_sync_baud_val+0xc>
	...

00001650 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    1650:	b5f0      	push	{r4, r5, r6, r7, lr}
    1652:	b083      	sub	sp, #12
    1654:	000f      	movs	r7, r1
    1656:	0016      	movs	r6, r2
    1658:	aa08      	add	r2, sp, #32
    165a:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    165c:	0004      	movs	r4, r0
    165e:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1660:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    1662:	42bc      	cmp	r4, r7
    1664:	d902      	bls.n	166c <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    1666:	0010      	movs	r0, r2
    1668:	b003      	add	sp, #12
    166a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    166c:	2b00      	cmp	r3, #0
    166e:	d114      	bne.n	169a <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    1670:	0002      	movs	r2, r0
    1672:	0008      	movs	r0, r1
    1674:	2100      	movs	r1, #0
    1676:	4c19      	ldr	r4, [pc, #100]	; (16dc <_sercom_get_async_baud_val+0x8c>)
    1678:	47a0      	blx	r4
    167a:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    167c:	003a      	movs	r2, r7
    167e:	2300      	movs	r3, #0
    1680:	2000      	movs	r0, #0
    1682:	4c17      	ldr	r4, [pc, #92]	; (16e0 <_sercom_get_async_baud_val+0x90>)
    1684:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    1686:	2200      	movs	r2, #0
    1688:	2301      	movs	r3, #1
    168a:	1a12      	subs	r2, r2, r0
    168c:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    168e:	0c12      	lsrs	r2, r2, #16
    1690:	041b      	lsls	r3, r3, #16
    1692:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    1694:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    1696:	2200      	movs	r2, #0
    1698:	e7e5      	b.n	1666 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    169a:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    169c:	2b01      	cmp	r3, #1
    169e:	d1f9      	bne.n	1694 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    16a0:	000a      	movs	r2, r1
    16a2:	2300      	movs	r3, #0
    16a4:	2100      	movs	r1, #0
    16a6:	4c0d      	ldr	r4, [pc, #52]	; (16dc <_sercom_get_async_baud_val+0x8c>)
    16a8:	47a0      	blx	r4
    16aa:	0002      	movs	r2, r0
    16ac:	000b      	movs	r3, r1
    16ae:	9200      	str	r2, [sp, #0]
    16b0:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    16b2:	0038      	movs	r0, r7
    16b4:	2100      	movs	r1, #0
    16b6:	4c0a      	ldr	r4, [pc, #40]	; (16e0 <_sercom_get_async_baud_val+0x90>)
    16b8:	47a0      	blx	r4
    16ba:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    16bc:	2380      	movs	r3, #128	; 0x80
    16be:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    16c0:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    16c2:	4298      	cmp	r0, r3
    16c4:	d8cf      	bhi.n	1666 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    16c6:	0f79      	lsrs	r1, r7, #29
    16c8:	00f8      	lsls	r0, r7, #3
    16ca:	9a00      	ldr	r2, [sp, #0]
    16cc:	9b01      	ldr	r3, [sp, #4]
    16ce:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    16d0:	00ea      	lsls	r2, r5, #3
    16d2:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    16d4:	b2d2      	uxtb	r2, r2
    16d6:	0352      	lsls	r2, r2, #13
    16d8:	432a      	orrs	r2, r5
    16da:	e7db      	b.n	1694 <_sercom_get_async_baud_val+0x44>
    16dc:	00003e85 	.word	0x00003e85
    16e0:	0000156d 	.word	0x0000156d

000016e4 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    16e4:	b510      	push	{r4, lr}
    16e6:	b082      	sub	sp, #8
    16e8:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    16ea:	4b0e      	ldr	r3, [pc, #56]	; (1724 <sercom_set_gclk_generator+0x40>)
    16ec:	781b      	ldrb	r3, [r3, #0]
    16ee:	2b00      	cmp	r3, #0
    16f0:	d007      	beq.n	1702 <sercom_set_gclk_generator+0x1e>
    16f2:	2900      	cmp	r1, #0
    16f4:	d105      	bne.n	1702 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    16f6:	4b0b      	ldr	r3, [pc, #44]	; (1724 <sercom_set_gclk_generator+0x40>)
    16f8:	785b      	ldrb	r3, [r3, #1]
    16fa:	4283      	cmp	r3, r0
    16fc:	d010      	beq.n	1720 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    16fe:	201d      	movs	r0, #29
    1700:	e00c      	b.n	171c <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    1702:	a901      	add	r1, sp, #4
    1704:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    1706:	2013      	movs	r0, #19
    1708:	4b07      	ldr	r3, [pc, #28]	; (1728 <sercom_set_gclk_generator+0x44>)
    170a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    170c:	2013      	movs	r0, #19
    170e:	4b07      	ldr	r3, [pc, #28]	; (172c <sercom_set_gclk_generator+0x48>)
    1710:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    1712:	4b04      	ldr	r3, [pc, #16]	; (1724 <sercom_set_gclk_generator+0x40>)
    1714:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    1716:	2201      	movs	r2, #1
    1718:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    171a:	2000      	movs	r0, #0
}
    171c:	b002      	add	sp, #8
    171e:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    1720:	2000      	movs	r0, #0
    1722:	e7fb      	b.n	171c <sercom_set_gclk_generator+0x38>
    1724:	20000284 	.word	0x20000284
    1728:	000025dd 	.word	0x000025dd
    172c:	00002551 	.word	0x00002551

00001730 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    1730:	4b40      	ldr	r3, [pc, #256]	; (1834 <_sercom_get_default_pad+0x104>)
    1732:	4298      	cmp	r0, r3
    1734:	d031      	beq.n	179a <_sercom_get_default_pad+0x6a>
    1736:	d90a      	bls.n	174e <_sercom_get_default_pad+0x1e>
    1738:	4b3f      	ldr	r3, [pc, #252]	; (1838 <_sercom_get_default_pad+0x108>)
    173a:	4298      	cmp	r0, r3
    173c:	d04d      	beq.n	17da <_sercom_get_default_pad+0xaa>
    173e:	4b3f      	ldr	r3, [pc, #252]	; (183c <_sercom_get_default_pad+0x10c>)
    1740:	4298      	cmp	r0, r3
    1742:	d05a      	beq.n	17fa <_sercom_get_default_pad+0xca>
    1744:	4b3e      	ldr	r3, [pc, #248]	; (1840 <_sercom_get_default_pad+0x110>)
    1746:	4298      	cmp	r0, r3
    1748:	d037      	beq.n	17ba <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    174a:	2000      	movs	r0, #0
}
    174c:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    174e:	4b3d      	ldr	r3, [pc, #244]	; (1844 <_sercom_get_default_pad+0x114>)
    1750:	4298      	cmp	r0, r3
    1752:	d00c      	beq.n	176e <_sercom_get_default_pad+0x3e>
    1754:	4b3c      	ldr	r3, [pc, #240]	; (1848 <_sercom_get_default_pad+0x118>)
    1756:	4298      	cmp	r0, r3
    1758:	d1f7      	bne.n	174a <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    175a:	2901      	cmp	r1, #1
    175c:	d017      	beq.n	178e <_sercom_get_default_pad+0x5e>
    175e:	2900      	cmp	r1, #0
    1760:	d05d      	beq.n	181e <_sercom_get_default_pad+0xee>
    1762:	2902      	cmp	r1, #2
    1764:	d015      	beq.n	1792 <_sercom_get_default_pad+0x62>
    1766:	2903      	cmp	r1, #3
    1768:	d015      	beq.n	1796 <_sercom_get_default_pad+0x66>
	return 0;
    176a:	2000      	movs	r0, #0
    176c:	e7ee      	b.n	174c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    176e:	2901      	cmp	r1, #1
    1770:	d007      	beq.n	1782 <_sercom_get_default_pad+0x52>
    1772:	2900      	cmp	r1, #0
    1774:	d051      	beq.n	181a <_sercom_get_default_pad+0xea>
    1776:	2902      	cmp	r1, #2
    1778:	d005      	beq.n	1786 <_sercom_get_default_pad+0x56>
    177a:	2903      	cmp	r1, #3
    177c:	d005      	beq.n	178a <_sercom_get_default_pad+0x5a>
	return 0;
    177e:	2000      	movs	r0, #0
    1780:	e7e4      	b.n	174c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1782:	4832      	ldr	r0, [pc, #200]	; (184c <_sercom_get_default_pad+0x11c>)
    1784:	e7e2      	b.n	174c <_sercom_get_default_pad+0x1c>
    1786:	4832      	ldr	r0, [pc, #200]	; (1850 <_sercom_get_default_pad+0x120>)
    1788:	e7e0      	b.n	174c <_sercom_get_default_pad+0x1c>
    178a:	4832      	ldr	r0, [pc, #200]	; (1854 <_sercom_get_default_pad+0x124>)
    178c:	e7de      	b.n	174c <_sercom_get_default_pad+0x1c>
    178e:	4832      	ldr	r0, [pc, #200]	; (1858 <_sercom_get_default_pad+0x128>)
    1790:	e7dc      	b.n	174c <_sercom_get_default_pad+0x1c>
    1792:	4832      	ldr	r0, [pc, #200]	; (185c <_sercom_get_default_pad+0x12c>)
    1794:	e7da      	b.n	174c <_sercom_get_default_pad+0x1c>
    1796:	4832      	ldr	r0, [pc, #200]	; (1860 <_sercom_get_default_pad+0x130>)
    1798:	e7d8      	b.n	174c <_sercom_get_default_pad+0x1c>
    179a:	2901      	cmp	r1, #1
    179c:	d007      	beq.n	17ae <_sercom_get_default_pad+0x7e>
    179e:	2900      	cmp	r1, #0
    17a0:	d03f      	beq.n	1822 <_sercom_get_default_pad+0xf2>
    17a2:	2902      	cmp	r1, #2
    17a4:	d005      	beq.n	17b2 <_sercom_get_default_pad+0x82>
    17a6:	2903      	cmp	r1, #3
    17a8:	d005      	beq.n	17b6 <_sercom_get_default_pad+0x86>
	return 0;
    17aa:	2000      	movs	r0, #0
    17ac:	e7ce      	b.n	174c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    17ae:	482d      	ldr	r0, [pc, #180]	; (1864 <_sercom_get_default_pad+0x134>)
    17b0:	e7cc      	b.n	174c <_sercom_get_default_pad+0x1c>
    17b2:	482d      	ldr	r0, [pc, #180]	; (1868 <_sercom_get_default_pad+0x138>)
    17b4:	e7ca      	b.n	174c <_sercom_get_default_pad+0x1c>
    17b6:	482d      	ldr	r0, [pc, #180]	; (186c <_sercom_get_default_pad+0x13c>)
    17b8:	e7c8      	b.n	174c <_sercom_get_default_pad+0x1c>
    17ba:	2901      	cmp	r1, #1
    17bc:	d007      	beq.n	17ce <_sercom_get_default_pad+0x9e>
    17be:	2900      	cmp	r1, #0
    17c0:	d031      	beq.n	1826 <_sercom_get_default_pad+0xf6>
    17c2:	2902      	cmp	r1, #2
    17c4:	d005      	beq.n	17d2 <_sercom_get_default_pad+0xa2>
    17c6:	2903      	cmp	r1, #3
    17c8:	d005      	beq.n	17d6 <_sercom_get_default_pad+0xa6>
	return 0;
    17ca:	2000      	movs	r0, #0
    17cc:	e7be      	b.n	174c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    17ce:	4828      	ldr	r0, [pc, #160]	; (1870 <_sercom_get_default_pad+0x140>)
    17d0:	e7bc      	b.n	174c <_sercom_get_default_pad+0x1c>
    17d2:	4828      	ldr	r0, [pc, #160]	; (1874 <_sercom_get_default_pad+0x144>)
    17d4:	e7ba      	b.n	174c <_sercom_get_default_pad+0x1c>
    17d6:	4828      	ldr	r0, [pc, #160]	; (1878 <_sercom_get_default_pad+0x148>)
    17d8:	e7b8      	b.n	174c <_sercom_get_default_pad+0x1c>
    17da:	2901      	cmp	r1, #1
    17dc:	d007      	beq.n	17ee <_sercom_get_default_pad+0xbe>
    17de:	2900      	cmp	r1, #0
    17e0:	d023      	beq.n	182a <_sercom_get_default_pad+0xfa>
    17e2:	2902      	cmp	r1, #2
    17e4:	d005      	beq.n	17f2 <_sercom_get_default_pad+0xc2>
    17e6:	2903      	cmp	r1, #3
    17e8:	d005      	beq.n	17f6 <_sercom_get_default_pad+0xc6>
	return 0;
    17ea:	2000      	movs	r0, #0
    17ec:	e7ae      	b.n	174c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    17ee:	4823      	ldr	r0, [pc, #140]	; (187c <_sercom_get_default_pad+0x14c>)
    17f0:	e7ac      	b.n	174c <_sercom_get_default_pad+0x1c>
    17f2:	4823      	ldr	r0, [pc, #140]	; (1880 <_sercom_get_default_pad+0x150>)
    17f4:	e7aa      	b.n	174c <_sercom_get_default_pad+0x1c>
    17f6:	4823      	ldr	r0, [pc, #140]	; (1884 <_sercom_get_default_pad+0x154>)
    17f8:	e7a8      	b.n	174c <_sercom_get_default_pad+0x1c>
    17fa:	2901      	cmp	r1, #1
    17fc:	d007      	beq.n	180e <_sercom_get_default_pad+0xde>
    17fe:	2900      	cmp	r1, #0
    1800:	d015      	beq.n	182e <_sercom_get_default_pad+0xfe>
    1802:	2902      	cmp	r1, #2
    1804:	d005      	beq.n	1812 <_sercom_get_default_pad+0xe2>
    1806:	2903      	cmp	r1, #3
    1808:	d005      	beq.n	1816 <_sercom_get_default_pad+0xe6>
	return 0;
    180a:	2000      	movs	r0, #0
    180c:	e79e      	b.n	174c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    180e:	481e      	ldr	r0, [pc, #120]	; (1888 <_sercom_get_default_pad+0x158>)
    1810:	e79c      	b.n	174c <_sercom_get_default_pad+0x1c>
    1812:	481e      	ldr	r0, [pc, #120]	; (188c <_sercom_get_default_pad+0x15c>)
    1814:	e79a      	b.n	174c <_sercom_get_default_pad+0x1c>
    1816:	481e      	ldr	r0, [pc, #120]	; (1890 <_sercom_get_default_pad+0x160>)
    1818:	e798      	b.n	174c <_sercom_get_default_pad+0x1c>
    181a:	481e      	ldr	r0, [pc, #120]	; (1894 <_sercom_get_default_pad+0x164>)
    181c:	e796      	b.n	174c <_sercom_get_default_pad+0x1c>
    181e:	2003      	movs	r0, #3
    1820:	e794      	b.n	174c <_sercom_get_default_pad+0x1c>
    1822:	481d      	ldr	r0, [pc, #116]	; (1898 <_sercom_get_default_pad+0x168>)
    1824:	e792      	b.n	174c <_sercom_get_default_pad+0x1c>
    1826:	481d      	ldr	r0, [pc, #116]	; (189c <_sercom_get_default_pad+0x16c>)
    1828:	e790      	b.n	174c <_sercom_get_default_pad+0x1c>
    182a:	481d      	ldr	r0, [pc, #116]	; (18a0 <_sercom_get_default_pad+0x170>)
    182c:	e78e      	b.n	174c <_sercom_get_default_pad+0x1c>
    182e:	481d      	ldr	r0, [pc, #116]	; (18a4 <_sercom_get_default_pad+0x174>)
    1830:	e78c      	b.n	174c <_sercom_get_default_pad+0x1c>
    1832:	46c0      	nop			; (mov r8, r8)
    1834:	42001000 	.word	0x42001000
    1838:	42001800 	.word	0x42001800
    183c:	42001c00 	.word	0x42001c00
    1840:	42001400 	.word	0x42001400
    1844:	42000800 	.word	0x42000800
    1848:	42000c00 	.word	0x42000c00
    184c:	00050003 	.word	0x00050003
    1850:	00060003 	.word	0x00060003
    1854:	00070003 	.word	0x00070003
    1858:	00010003 	.word	0x00010003
    185c:	001e0003 	.word	0x001e0003
    1860:	001f0003 	.word	0x001f0003
    1864:	00090003 	.word	0x00090003
    1868:	000a0003 	.word	0x000a0003
    186c:	000b0003 	.word	0x000b0003
    1870:	00110003 	.word	0x00110003
    1874:	00120003 	.word	0x00120003
    1878:	00130003 	.word	0x00130003
    187c:	000d0003 	.word	0x000d0003
    1880:	000e0003 	.word	0x000e0003
    1884:	000f0003 	.word	0x000f0003
    1888:	00170003 	.word	0x00170003
    188c:	00180003 	.word	0x00180003
    1890:	00190003 	.word	0x00190003
    1894:	00040003 	.word	0x00040003
    1898:	00080003 	.word	0x00080003
    189c:	00100003 	.word	0x00100003
    18a0:	000c0003 	.word	0x000c0003
    18a4:	00160003 	.word	0x00160003

000018a8 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    18a8:	b530      	push	{r4, r5, lr}
    18aa:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    18ac:	4b0b      	ldr	r3, [pc, #44]	; (18dc <_sercom_get_sercom_inst_index+0x34>)
    18ae:	466a      	mov	r2, sp
    18b0:	cb32      	ldmia	r3!, {r1, r4, r5}
    18b2:	c232      	stmia	r2!, {r1, r4, r5}
    18b4:	cb32      	ldmia	r3!, {r1, r4, r5}
    18b6:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    18b8:	9b00      	ldr	r3, [sp, #0]
    18ba:	4283      	cmp	r3, r0
    18bc:	d00b      	beq.n	18d6 <_sercom_get_sercom_inst_index+0x2e>
    18be:	2301      	movs	r3, #1
    18c0:	009a      	lsls	r2, r3, #2
    18c2:	4669      	mov	r1, sp
    18c4:	5852      	ldr	r2, [r2, r1]
    18c6:	4282      	cmp	r2, r0
    18c8:	d006      	beq.n	18d8 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    18ca:	3301      	adds	r3, #1
    18cc:	2b06      	cmp	r3, #6
    18ce:	d1f7      	bne.n	18c0 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    18d0:	2000      	movs	r0, #0
}
    18d2:	b007      	add	sp, #28
    18d4:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    18d6:	2300      	movs	r3, #0
			return i;
    18d8:	b2d8      	uxtb	r0, r3
    18da:	e7fa      	b.n	18d2 <_sercom_get_sercom_inst_index+0x2a>
    18dc:	00005814 	.word	0x00005814

000018e0 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    18e0:	4770      	bx	lr
	...

000018e4 <_sercom_set_handler>:


void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    18e4:	b5f0      	push	{r4, r5, r6, r7, lr}
	// Initialize handlers with default handler and device instances with 0 
	if (_handler_table_initialized == false) {
    18e6:	4b0a      	ldr	r3, [pc, #40]	; (1910 <_sercom_set_handler+0x2c>)
    18e8:	781b      	ldrb	r3, [r3, #0]
    18ea:	2b00      	cmp	r3, #0
    18ec:	d10c      	bne.n	1908 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    18ee:	4f09      	ldr	r7, [pc, #36]	; (1914 <_sercom_set_handler+0x30>)
    18f0:	4e09      	ldr	r6, [pc, #36]	; (1918 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    18f2:	4d0a      	ldr	r5, [pc, #40]	; (191c <_sercom_set_handler+0x38>)
    18f4:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    18f6:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    18f8:	195a      	adds	r2, r3, r5
    18fa:	6014      	str	r4, [r2, #0]
    18fc:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    18fe:	2b18      	cmp	r3, #24
    1900:	d1f9      	bne.n	18f6 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    1902:	2201      	movs	r2, #1
    1904:	4b02      	ldr	r3, [pc, #8]	; (1910 <_sercom_set_handler+0x2c>)
    1906:	701a      	strb	r2, [r3, #0]
	}

	// Save interrupt handler 
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1908:	0080      	lsls	r0, r0, #2
    190a:	4b02      	ldr	r3, [pc, #8]	; (1914 <_sercom_set_handler+0x30>)
    190c:	50c1      	str	r1, [r0, r3]
}
    190e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1910:	20000286 	.word	0x20000286
    1914:	20000288 	.word	0x20000288
    1918:	000018e1 	.word	0x000018e1
    191c:	20000368 	.word	0x20000368

00001920 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1920:	b500      	push	{lr}
    1922:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    1924:	2309      	movs	r3, #9
    1926:	466a      	mov	r2, sp
    1928:	7013      	strb	r3, [r2, #0]
    192a:	3301      	adds	r3, #1
    192c:	7053      	strb	r3, [r2, #1]
    192e:	3301      	adds	r3, #1
    1930:	7093      	strb	r3, [r2, #2]
    1932:	3301      	adds	r3, #1
    1934:	70d3      	strb	r3, [r2, #3]
    1936:	3301      	adds	r3, #1
    1938:	7113      	strb	r3, [r2, #4]
    193a:	3301      	adds	r3, #1
    193c:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    193e:	4b03      	ldr	r3, [pc, #12]	; (194c <_sercom_get_interrupt_vector+0x2c>)
    1940:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    1942:	466b      	mov	r3, sp
    1944:	5618      	ldrsb	r0, [r3, r0]
}
    1946:	b003      	add	sp, #12
    1948:	bd00      	pop	{pc}
    194a:	46c0      	nop			; (mov r8, r8)
    194c:	000018a9 	.word	0x000018a9

00001950 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1950:	b510      	push	{r4, lr}
    1952:	4b02      	ldr	r3, [pc, #8]	; (195c <SERCOM0_Handler+0xc>)
    1954:	681b      	ldr	r3, [r3, #0]
    1956:	2000      	movs	r0, #0
    1958:	4798      	blx	r3
    195a:	bd10      	pop	{r4, pc}
    195c:	20000288 	.word	0x20000288

00001960 <SERCOM1_Handler>:
    1960:	b510      	push	{r4, lr}
    1962:	4b02      	ldr	r3, [pc, #8]	; (196c <SERCOM1_Handler+0xc>)
    1964:	685b      	ldr	r3, [r3, #4]
    1966:	2001      	movs	r0, #1
    1968:	4798      	blx	r3
    196a:	bd10      	pop	{r4, pc}
    196c:	20000288 	.word	0x20000288

00001970 <SERCOM2_Handler>:
    1970:	b510      	push	{r4, lr}
    1972:	4b02      	ldr	r3, [pc, #8]	; (197c <SERCOM2_Handler+0xc>)
    1974:	689b      	ldr	r3, [r3, #8]
    1976:	2002      	movs	r0, #2
    1978:	4798      	blx	r3
    197a:	bd10      	pop	{r4, pc}
    197c:	20000288 	.word	0x20000288

00001980 <SERCOM3_Handler>:
    1980:	b510      	push	{r4, lr}
    1982:	4b02      	ldr	r3, [pc, #8]	; (198c <SERCOM3_Handler+0xc>)
    1984:	68db      	ldr	r3, [r3, #12]
    1986:	2003      	movs	r0, #3
    1988:	4798      	blx	r3
    198a:	bd10      	pop	{r4, pc}
    198c:	20000288 	.word	0x20000288

00001990 <SERCOM4_Handler>:
    1990:	b510      	push	{r4, lr}
    1992:	4b02      	ldr	r3, [pc, #8]	; (199c <SERCOM4_Handler+0xc>)
    1994:	691b      	ldr	r3, [r3, #16]
    1996:	2004      	movs	r0, #4
    1998:	4798      	blx	r3
    199a:	bd10      	pop	{r4, pc}
    199c:	20000288 	.word	0x20000288

000019a0 <SERCOM5_Handler>:
    19a0:	b510      	push	{r4, lr}
    19a2:	4b02      	ldr	r3, [pc, #8]	; (19ac <SERCOM5_Handler+0xc>)
    19a4:	695b      	ldr	r3, [r3, #20]
    19a6:	2005      	movs	r0, #5
    19a8:	4798      	blx	r3
    19aa:	bd10      	pop	{r4, pc}
    19ac:	20000288 	.word	0x20000288

000019b0 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    19b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    19b2:	46de      	mov	lr, fp
    19b4:	4657      	mov	r7, sl
    19b6:	464e      	mov	r6, r9
    19b8:	4645      	mov	r5, r8
    19ba:	b5e0      	push	{r5, r6, r7, lr}
    19bc:	b091      	sub	sp, #68	; 0x44
    19be:	0005      	movs	r5, r0
    19c0:	000c      	movs	r4, r1
    19c2:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    19c4:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    19c6:	0008      	movs	r0, r1
    19c8:	4bba      	ldr	r3, [pc, #744]	; (1cb4 <usart_init+0x304>)
    19ca:	4798      	blx	r3
    19cc:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    19ce:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    19d0:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    19d2:	07db      	lsls	r3, r3, #31
    19d4:	d506      	bpl.n	19e4 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    19d6:	b011      	add	sp, #68	; 0x44
    19d8:	bc3c      	pop	{r2, r3, r4, r5}
    19da:	4690      	mov	r8, r2
    19dc:	4699      	mov	r9, r3
    19de:	46a2      	mov	sl, r4
    19e0:	46ab      	mov	fp, r5
    19e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    19e4:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    19e6:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    19e8:	079b      	lsls	r3, r3, #30
    19ea:	d4f4      	bmi.n	19d6 <usart_init+0x26>
    19ec:	49b2      	ldr	r1, [pc, #712]	; (1cb8 <usart_init+0x308>)
    19ee:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    19f0:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    19f2:	2301      	movs	r3, #1
    19f4:	40bb      	lsls	r3, r7
    19f6:	4303      	orrs	r3, r0
    19f8:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    19fa:	a90f      	add	r1, sp, #60	; 0x3c
    19fc:	272d      	movs	r7, #45	; 0x2d
    19fe:	5df3      	ldrb	r3, [r6, r7]
    1a00:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1a02:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1a04:	b2d3      	uxtb	r3, r2
    1a06:	9302      	str	r3, [sp, #8]
    1a08:	0018      	movs	r0, r3
    1a0a:	4bac      	ldr	r3, [pc, #688]	; (1cbc <usart_init+0x30c>)
    1a0c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1a0e:	9802      	ldr	r0, [sp, #8]
    1a10:	4bab      	ldr	r3, [pc, #684]	; (1cc0 <usart_init+0x310>)
    1a12:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1a14:	5df0      	ldrb	r0, [r6, r7]
    1a16:	2100      	movs	r1, #0
    1a18:	4baa      	ldr	r3, [pc, #680]	; (1cc4 <usart_init+0x314>)
    1a1a:	4798      	blx	r3
	module->character_size = config->character_size;
    1a1c:	7af3      	ldrb	r3, [r6, #11]
    1a1e:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    1a20:	2324      	movs	r3, #36	; 0x24
    1a22:	5cf3      	ldrb	r3, [r6, r3]
    1a24:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    1a26:	2325      	movs	r3, #37	; 0x25
    1a28:	5cf3      	ldrb	r3, [r6, r3]
    1a2a:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    1a2c:	7ef3      	ldrb	r3, [r6, #27]
    1a2e:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    1a30:	7f33      	ldrb	r3, [r6, #28]
    1a32:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1a34:	682b      	ldr	r3, [r5, #0]
    1a36:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1a38:	0018      	movs	r0, r3
    1a3a:	4b9e      	ldr	r3, [pc, #632]	; (1cb4 <usart_init+0x304>)
    1a3c:	4798      	blx	r3
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1a3e:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    1a40:	2200      	movs	r2, #0
    1a42:	230e      	movs	r3, #14
    1a44:	a906      	add	r1, sp, #24
    1a46:	468c      	mov	ip, r1
    1a48:	4463      	add	r3, ip
    1a4a:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    1a4c:	8a32      	ldrh	r2, [r6, #16]
    1a4e:	9202      	str	r2, [sp, #8]
    1a50:	2380      	movs	r3, #128	; 0x80
    1a52:	01db      	lsls	r3, r3, #7
    1a54:	429a      	cmp	r2, r3
    1a56:	d100      	bne.n	1a5a <usart_init+0xaa>
    1a58:	e09a      	b.n	1b90 <usart_init+0x1e0>
    1a5a:	d90f      	bls.n	1a7c <usart_init+0xcc>
    1a5c:	23c0      	movs	r3, #192	; 0xc0
    1a5e:	01db      	lsls	r3, r3, #7
    1a60:	9a02      	ldr	r2, [sp, #8]
    1a62:	429a      	cmp	r2, r3
    1a64:	d100      	bne.n	1a68 <usart_init+0xb8>
    1a66:	e08e      	b.n	1b86 <usart_init+0x1d6>
    1a68:	2380      	movs	r3, #128	; 0x80
    1a6a:	021b      	lsls	r3, r3, #8
    1a6c:	429a      	cmp	r2, r3
    1a6e:	d000      	beq.n	1a72 <usart_init+0xc2>
    1a70:	e11b      	b.n	1caa <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    1a72:	2303      	movs	r3, #3
    1a74:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1a76:	2300      	movs	r3, #0
    1a78:	9307      	str	r3, [sp, #28]
    1a7a:	e008      	b.n	1a8e <usart_init+0xde>
	switch (config->sample_rate) {
    1a7c:	2380      	movs	r3, #128	; 0x80
    1a7e:	019b      	lsls	r3, r3, #6
    1a80:	429a      	cmp	r2, r3
    1a82:	d000      	beq.n	1a86 <usart_init+0xd6>
    1a84:	e111      	b.n	1caa <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1a86:	2310      	movs	r3, #16
    1a88:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1a8a:	3b0f      	subs	r3, #15
    1a8c:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    1a8e:	6833      	ldr	r3, [r6, #0]
    1a90:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    1a92:	68f3      	ldr	r3, [r6, #12]
    1a94:	469b      	mov	fp, r3
		config->sample_adjustment |
    1a96:	6973      	ldr	r3, [r6, #20]
    1a98:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1a9a:	7e33      	ldrb	r3, [r6, #24]
    1a9c:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1a9e:	2326      	movs	r3, #38	; 0x26
    1aa0:	5cf3      	ldrb	r3, [r6, r3]
    1aa2:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    1aa4:	6873      	ldr	r3, [r6, #4]
    1aa6:	4699      	mov	r9, r3
	switch (transfer_mode)
    1aa8:	2b00      	cmp	r3, #0
    1aaa:	d100      	bne.n	1aae <usart_init+0xfe>
    1aac:	e09c      	b.n	1be8 <usart_init+0x238>
    1aae:	2380      	movs	r3, #128	; 0x80
    1ab0:	055b      	lsls	r3, r3, #21
    1ab2:	4599      	cmp	r9, r3
    1ab4:	d100      	bne.n	1ab8 <usart_init+0x108>
    1ab6:	e080      	b.n	1bba <usart_init+0x20a>
	if(config->encoding_format_enable) {
    1ab8:	7e73      	ldrb	r3, [r6, #25]
    1aba:	2b00      	cmp	r3, #0
    1abc:	d002      	beq.n	1ac4 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    1abe:	7eb3      	ldrb	r3, [r6, #26]
    1ac0:	4642      	mov	r2, r8
    1ac2:	7393      	strb	r3, [r2, #14]
	usart_hw->BAUD.reg = baud;
    1ac4:	230e      	movs	r3, #14
    1ac6:	aa06      	add	r2, sp, #24
    1ac8:	4694      	mov	ip, r2
    1aca:	4463      	add	r3, ip
    1acc:	881b      	ldrh	r3, [r3, #0]
    1ace:	4642      	mov	r2, r8
    1ad0:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    1ad2:	9b05      	ldr	r3, [sp, #20]
    1ad4:	465a      	mov	r2, fp
    1ad6:	4313      	orrs	r3, r2
    1ad8:	9a03      	ldr	r2, [sp, #12]
    1ada:	4313      	orrs	r3, r2
    1adc:	464a      	mov	r2, r9
    1ade:	4313      	orrs	r3, r2
    1ae0:	9f02      	ldr	r7, [sp, #8]
    1ae2:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1ae4:	9b04      	ldr	r3, [sp, #16]
    1ae6:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    1ae8:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1aea:	4653      	mov	r3, sl
    1aec:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    1aee:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    1af0:	2327      	movs	r3, #39	; 0x27
    1af2:	5cf3      	ldrb	r3, [r6, r3]
    1af4:	2b00      	cmp	r3, #0
    1af6:	d101      	bne.n	1afc <usart_init+0x14c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    1af8:	3304      	adds	r3, #4
    1afa:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1afc:	7e73      	ldrb	r3, [r6, #25]
    1afe:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1b00:	7f32      	ldrb	r2, [r6, #28]
    1b02:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1b04:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1b06:	7f72      	ldrb	r2, [r6, #29]
    1b08:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1b0a:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1b0c:	2224      	movs	r2, #36	; 0x24
    1b0e:	5cb2      	ldrb	r2, [r6, r2]
    1b10:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1b12:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    1b14:	2225      	movs	r2, #37	; 0x25
    1b16:	5cb2      	ldrb	r2, [r6, r2]
    1b18:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1b1a:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    1b1c:	7ab1      	ldrb	r1, [r6, #10]
    1b1e:	7af2      	ldrb	r2, [r6, #11]
    1b20:	4311      	orrs	r1, r2
    1b22:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    1b24:	8933      	ldrh	r3, [r6, #8]
    1b26:	2bff      	cmp	r3, #255	; 0xff
    1b28:	d100      	bne.n	1b2c <usart_init+0x17c>
    1b2a:	e081      	b.n	1c30 <usart_init+0x280>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    1b2c:	2280      	movs	r2, #128	; 0x80
    1b2e:	0452      	lsls	r2, r2, #17
    1b30:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    1b32:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    1b34:	232c      	movs	r3, #44	; 0x2c
    1b36:	5cf3      	ldrb	r3, [r6, r3]
    1b38:	2b00      	cmp	r3, #0
    1b3a:	d103      	bne.n	1b44 <usart_init+0x194>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    1b3c:	4b62      	ldr	r3, [pc, #392]	; (1cc8 <usart_init+0x318>)
    1b3e:	789b      	ldrb	r3, [r3, #2]
    1b40:	079b      	lsls	r3, r3, #30
    1b42:	d501      	bpl.n	1b48 <usart_init+0x198>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    1b44:	2380      	movs	r3, #128	; 0x80
    1b46:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    1b48:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1b4a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1b4c:	2b00      	cmp	r3, #0
    1b4e:	d1fc      	bne.n	1b4a <usart_init+0x19a>
	usart_hw->CTRLB.reg = ctrlb;
    1b50:	4643      	mov	r3, r8
    1b52:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1b54:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1b56:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1b58:	2b00      	cmp	r3, #0
    1b5a:	d1fc      	bne.n	1b56 <usart_init+0x1a6>
	usart_hw->CTRLA.reg = ctrla;
    1b5c:	4643      	mov	r3, r8
    1b5e:	601f      	str	r7, [r3, #0]
    1b60:	ab0e      	add	r3, sp, #56	; 0x38
    1b62:	2280      	movs	r2, #128	; 0x80
    1b64:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1b66:	2200      	movs	r2, #0
    1b68:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    1b6a:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1b6c:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    1b6e:	6b33      	ldr	r3, [r6, #48]	; 0x30
    1b70:	930a      	str	r3, [sp, #40]	; 0x28
    1b72:	6b73      	ldr	r3, [r6, #52]	; 0x34
    1b74:	930b      	str	r3, [sp, #44]	; 0x2c
    1b76:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    1b78:	930c      	str	r3, [sp, #48]	; 0x30
    1b7a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    1b7c:	9302      	str	r3, [sp, #8]
    1b7e:	930d      	str	r3, [sp, #52]	; 0x34
    1b80:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1b82:	ae0a      	add	r6, sp, #40	; 0x28
    1b84:	e063      	b.n	1c4e <usart_init+0x29e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1b86:	2308      	movs	r3, #8
    1b88:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1b8a:	3b07      	subs	r3, #7
    1b8c:	9307      	str	r3, [sp, #28]
    1b8e:	e77e      	b.n	1a8e <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    1b90:	6833      	ldr	r3, [r6, #0]
    1b92:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    1b94:	68f3      	ldr	r3, [r6, #12]
    1b96:	469b      	mov	fp, r3
		config->sample_adjustment |
    1b98:	6973      	ldr	r3, [r6, #20]
    1b9a:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1b9c:	7e33      	ldrb	r3, [r6, #24]
    1b9e:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1ba0:	2326      	movs	r3, #38	; 0x26
    1ba2:	5cf3      	ldrb	r3, [r6, r3]
    1ba4:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    1ba6:	6873      	ldr	r3, [r6, #4]
    1ba8:	4699      	mov	r9, r3
	switch (transfer_mode)
    1baa:	2b00      	cmp	r3, #0
    1bac:	d018      	beq.n	1be0 <usart_init+0x230>
    1bae:	2380      	movs	r3, #128	; 0x80
    1bb0:	055b      	lsls	r3, r3, #21
    1bb2:	4599      	cmp	r9, r3
    1bb4:	d001      	beq.n	1bba <usart_init+0x20a>
	enum status_code status_code = STATUS_OK;
    1bb6:	2000      	movs	r0, #0
    1bb8:	e025      	b.n	1c06 <usart_init+0x256>
			if (!config->use_external_clock) {
    1bba:	2327      	movs	r3, #39	; 0x27
    1bbc:	5cf3      	ldrb	r3, [r6, r3]
    1bbe:	2b00      	cmp	r3, #0
    1bc0:	d000      	beq.n	1bc4 <usart_init+0x214>
    1bc2:	e779      	b.n	1ab8 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    1bc4:	6a33      	ldr	r3, [r6, #32]
    1bc6:	001f      	movs	r7, r3
    1bc8:	b2c0      	uxtb	r0, r0
    1bca:	4b40      	ldr	r3, [pc, #256]	; (1ccc <usart_init+0x31c>)
    1bcc:	4798      	blx	r3
    1bce:	0001      	movs	r1, r0
    1bd0:	220e      	movs	r2, #14
    1bd2:	ab06      	add	r3, sp, #24
    1bd4:	469c      	mov	ip, r3
    1bd6:	4462      	add	r2, ip
    1bd8:	0038      	movs	r0, r7
    1bda:	4b3d      	ldr	r3, [pc, #244]	; (1cd0 <usart_init+0x320>)
    1bdc:	4798      	blx	r3
    1bde:	e012      	b.n	1c06 <usart_init+0x256>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1be0:	2308      	movs	r3, #8
    1be2:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1be4:	2300      	movs	r3, #0
    1be6:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    1be8:	2327      	movs	r3, #39	; 0x27
    1bea:	5cf3      	ldrb	r3, [r6, r3]
    1bec:	2b00      	cmp	r3, #0
    1bee:	d00e      	beq.n	1c0e <usart_init+0x25e>
				status_code =
    1bf0:	9b06      	ldr	r3, [sp, #24]
    1bf2:	9300      	str	r3, [sp, #0]
    1bf4:	9b07      	ldr	r3, [sp, #28]
    1bf6:	220e      	movs	r2, #14
    1bf8:	a906      	add	r1, sp, #24
    1bfa:	468c      	mov	ip, r1
    1bfc:	4462      	add	r2, ip
    1bfe:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    1c00:	6a30      	ldr	r0, [r6, #32]
    1c02:	4f34      	ldr	r7, [pc, #208]	; (1cd4 <usart_init+0x324>)
    1c04:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    1c06:	2800      	cmp	r0, #0
    1c08:	d000      	beq.n	1c0c <usart_init+0x25c>
    1c0a:	e6e4      	b.n	19d6 <usart_init+0x26>
    1c0c:	e754      	b.n	1ab8 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    1c0e:	6a33      	ldr	r3, [r6, #32]
    1c10:	001f      	movs	r7, r3
    1c12:	b2c0      	uxtb	r0, r0
    1c14:	4b2d      	ldr	r3, [pc, #180]	; (1ccc <usart_init+0x31c>)
    1c16:	4798      	blx	r3
    1c18:	0001      	movs	r1, r0
				status_code =
    1c1a:	9b06      	ldr	r3, [sp, #24]
    1c1c:	9300      	str	r3, [sp, #0]
    1c1e:	9b07      	ldr	r3, [sp, #28]
    1c20:	220e      	movs	r2, #14
    1c22:	a806      	add	r0, sp, #24
    1c24:	4684      	mov	ip, r0
    1c26:	4462      	add	r2, ip
    1c28:	0038      	movs	r0, r7
    1c2a:	4f2a      	ldr	r7, [pc, #168]	; (1cd4 <usart_init+0x324>)
    1c2c:	47b8      	blx	r7
    1c2e:	e7ea      	b.n	1c06 <usart_init+0x256>
		if(config->lin_slave_enable) {
    1c30:	7ef3      	ldrb	r3, [r6, #27]
    1c32:	2b00      	cmp	r3, #0
    1c34:	d100      	bne.n	1c38 <usart_init+0x288>
    1c36:	e77d      	b.n	1b34 <usart_init+0x184>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    1c38:	2380      	movs	r3, #128	; 0x80
    1c3a:	04db      	lsls	r3, r3, #19
    1c3c:	431f      	orrs	r7, r3
    1c3e:	e779      	b.n	1b34 <usart_init+0x184>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1c40:	0020      	movs	r0, r4
    1c42:	4b25      	ldr	r3, [pc, #148]	; (1cd8 <usart_init+0x328>)
    1c44:	4798      	blx	r3
    1c46:	e007      	b.n	1c58 <usart_init+0x2a8>
    1c48:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    1c4a:	2f04      	cmp	r7, #4
    1c4c:	d00d      	beq.n	1c6a <usart_init+0x2ba>
    1c4e:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1c50:	00bb      	lsls	r3, r7, #2
    1c52:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    1c54:	2800      	cmp	r0, #0
    1c56:	d0f3      	beq.n	1c40 <usart_init+0x290>
		if (current_pinmux != PINMUX_UNUSED) {
    1c58:	1c43      	adds	r3, r0, #1
    1c5a:	d0f5      	beq.n	1c48 <usart_init+0x298>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1c5c:	a90e      	add	r1, sp, #56	; 0x38
    1c5e:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1c60:	0c00      	lsrs	r0, r0, #16
    1c62:	b2c0      	uxtb	r0, r0
    1c64:	4b1d      	ldr	r3, [pc, #116]	; (1cdc <usart_init+0x32c>)
    1c66:	4798      	blx	r3
    1c68:	e7ee      	b.n	1c48 <usart_init+0x298>
		module->callback[i]            = NULL;
    1c6a:	2300      	movs	r3, #0
    1c6c:	60eb      	str	r3, [r5, #12]
    1c6e:	612b      	str	r3, [r5, #16]
    1c70:	616b      	str	r3, [r5, #20]
    1c72:	61ab      	str	r3, [r5, #24]
    1c74:	61eb      	str	r3, [r5, #28]
    1c76:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    1c78:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    1c7a:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    1c7c:	2200      	movs	r2, #0
    1c7e:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    1c80:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    1c82:	3330      	adds	r3, #48	; 0x30
    1c84:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    1c86:	3301      	adds	r3, #1
    1c88:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    1c8a:	3301      	adds	r3, #1
    1c8c:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    1c8e:	3301      	adds	r3, #1
    1c90:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    1c92:	6828      	ldr	r0, [r5, #0]
    1c94:	4b07      	ldr	r3, [pc, #28]	; (1cb4 <usart_init+0x304>)
    1c96:	4798      	blx	r3
    1c98:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    1c9a:	4911      	ldr	r1, [pc, #68]	; (1ce0 <usart_init+0x330>)
    1c9c:	4b11      	ldr	r3, [pc, #68]	; (1ce4 <usart_init+0x334>)
    1c9e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    1ca0:	00a4      	lsls	r4, r4, #2
    1ca2:	4b11      	ldr	r3, [pc, #68]	; (1ce8 <usart_init+0x338>)
    1ca4:	50e5      	str	r5, [r4, r3]
	return status_code;
    1ca6:	2000      	movs	r0, #0
    1ca8:	e695      	b.n	19d6 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1caa:	2310      	movs	r3, #16
    1cac:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1cae:	2300      	movs	r3, #0
    1cb0:	9307      	str	r3, [sp, #28]
    1cb2:	e6ec      	b.n	1a8e <usart_init+0xde>
    1cb4:	000018a9 	.word	0x000018a9
    1cb8:	40000400 	.word	0x40000400
    1cbc:	000025dd 	.word	0x000025dd
    1cc0:	00002551 	.word	0x00002551
    1cc4:	000016e5 	.word	0x000016e5
    1cc8:	41002000 	.word	0x41002000
    1ccc:	000025f9 	.word	0x000025f9
    1cd0:	00001627 	.word	0x00001627
    1cd4:	00001651 	.word	0x00001651
    1cd8:	00001731 	.word	0x00001731
    1cdc:	000026d5 	.word	0x000026d5
    1ce0:	00001e05 	.word	0x00001e05
    1ce4:	000018e5 	.word	0x000018e5
    1ce8:	20000368 	.word	0x20000368

00001cec <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1cec:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    1cee:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    1cf0:	2a00      	cmp	r2, #0
    1cf2:	d101      	bne.n	1cf8 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    1cf4:	0018      	movs	r0, r3
    1cf6:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    1cf8:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    1cfa:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    1cfc:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    1cfe:	2a00      	cmp	r2, #0
    1d00:	d1f8      	bne.n	1cf4 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    1d02:	6802      	ldr	r2, [r0, #0]
	usart_hw->DATA.reg = tx_data;
    1d04:	8511      	strh	r1, [r2, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    1d06:	2102      	movs	r1, #2
    1d08:	7e13      	ldrb	r3, [r2, #24]
    1d0a:	420b      	tst	r3, r1
    1d0c:	d0fc      	beq.n	1d08 <usart_write_wait+0x1c>
	return STATUS_OK;
    1d0e:	2300      	movs	r3, #0
    1d10:	e7f0      	b.n	1cf4 <usart_write_wait+0x8>

00001d12 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    1d12:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    1d14:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    1d16:	2a00      	cmp	r2, #0
    1d18:	d101      	bne.n	1d1e <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    1d1a:	0018      	movs	r0, r3
    1d1c:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    1d1e:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    1d20:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    1d22:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    1d24:	2a00      	cmp	r2, #0
    1d26:	d1f8      	bne.n	1d1a <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    1d28:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    1d2a:	7e10      	ldrb	r0, [r2, #24]
    1d2c:	0740      	lsls	r0, r0, #29
    1d2e:	d5f4      	bpl.n	1d1a <usart_read_wait+0x8>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1d30:	8b53      	ldrh	r3, [r2, #26]
    1d32:	b2db      	uxtb	r3, r3
	if (error_code) {
    1d34:	0698      	lsls	r0, r3, #26
    1d36:	d01d      	beq.n	1d74 <usart_read_wait+0x62>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    1d38:	0798      	lsls	r0, r3, #30
    1d3a:	d503      	bpl.n	1d44 <usart_read_wait+0x32>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1d3c:	2302      	movs	r3, #2
    1d3e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    1d40:	3318      	adds	r3, #24
    1d42:	e7ea      	b.n	1d1a <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1d44:	0758      	lsls	r0, r3, #29
    1d46:	d503      	bpl.n	1d50 <usart_read_wait+0x3e>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1d48:	2304      	movs	r3, #4
    1d4a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    1d4c:	331a      	adds	r3, #26
    1d4e:	e7e4      	b.n	1d1a <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1d50:	07d8      	lsls	r0, r3, #31
    1d52:	d503      	bpl.n	1d5c <usart_read_wait+0x4a>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1d54:	2301      	movs	r3, #1
    1d56:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    1d58:	3312      	adds	r3, #18
    1d5a:	e7de      	b.n	1d1a <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    1d5c:	06d8      	lsls	r0, r3, #27
    1d5e:	d503      	bpl.n	1d68 <usart_read_wait+0x56>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1d60:	2310      	movs	r3, #16
    1d62:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    1d64:	3332      	adds	r3, #50	; 0x32
    1d66:	e7d8      	b.n	1d1a <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    1d68:	069b      	lsls	r3, r3, #26
    1d6a:	d503      	bpl.n	1d74 <usart_read_wait+0x62>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1d6c:	2320      	movs	r3, #32
    1d6e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    1d70:	3321      	adds	r3, #33	; 0x21
    1d72:	e7d2      	b.n	1d1a <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    1d74:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    1d76:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    1d78:	2300      	movs	r3, #0
    1d7a:	e7ce      	b.n	1d1a <usart_read_wait+0x8>

00001d7c <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    1d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1d7e:	0004      	movs	r4, r0
    1d80:	000d      	movs	r5, r1
    1d82:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1d84:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    1d86:	4b0f      	ldr	r3, [pc, #60]	; (1dc4 <_usart_read_buffer+0x48>)
    1d88:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    1d8a:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    1d8c:	b29b      	uxth	r3, r3
    1d8e:	2b00      	cmp	r3, #0
    1d90:	d003      	beq.n	1d9a <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
    1d92:	4b0d      	ldr	r3, [pc, #52]	; (1dc8 <_usart_read_buffer+0x4c>)
    1d94:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    1d96:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    1d98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    1d9a:	85a6      	strh	r6, [r4, #44]	; 0x2c
    1d9c:	4b0a      	ldr	r3, [pc, #40]	; (1dc8 <_usart_read_buffer+0x4c>)
    1d9e:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    1da0:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    1da2:	2205      	movs	r2, #5
    1da4:	2332      	movs	r3, #50	; 0x32
    1da6:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    1da8:	3b2e      	subs	r3, #46	; 0x2e
    1daa:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
    1dac:	7a23      	ldrb	r3, [r4, #8]
    1dae:	2b00      	cmp	r3, #0
    1db0:	d001      	beq.n	1db6 <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    1db2:	2320      	movs	r3, #32
    1db4:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
    1db6:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
    1db8:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
    1dba:	2b00      	cmp	r3, #0
    1dbc:	d0ec      	beq.n	1d98 <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    1dbe:	2308      	movs	r3, #8
    1dc0:	75bb      	strb	r3, [r7, #22]
    1dc2:	e7e9      	b.n	1d98 <_usart_read_buffer+0x1c>
    1dc4:	00000f71 	.word	0x00000f71
    1dc8:	00000fb1 	.word	0x00000fb1

00001dcc <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    1dcc:	1c93      	adds	r3, r2, #2
    1dce:	009b      	lsls	r3, r3, #2
    1dd0:	18c3      	adds	r3, r0, r3
    1dd2:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    1dd4:	2130      	movs	r1, #48	; 0x30
    1dd6:	2301      	movs	r3, #1
    1dd8:	4093      	lsls	r3, r2
    1dda:	001a      	movs	r2, r3
    1ddc:	5c43      	ldrb	r3, [r0, r1]
    1dde:	4313      	orrs	r3, r2
    1de0:	5443      	strb	r3, [r0, r1]
}
    1de2:	4770      	bx	lr

00001de4 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    1de4:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    1de6:	2317      	movs	r3, #23
	if (length == 0) {
    1de8:	2a00      	cmp	r2, #0
    1dea:	d101      	bne.n	1df0 <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
    1dec:	0018      	movs	r0, r3
    1dee:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
    1df0:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
    1df2:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
    1df4:	2c00      	cmp	r4, #0
    1df6:	d0f9      	beq.n	1dec <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
    1df8:	4b01      	ldr	r3, [pc, #4]	; (1e00 <usart_read_buffer_job+0x1c>)
    1dfa:	4798      	blx	r3
    1dfc:	0003      	movs	r3, r0
    1dfe:	e7f5      	b.n	1dec <usart_read_buffer_job+0x8>
    1e00:	00001d7d 	.word	0x00001d7d

00001e04 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    1e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    1e06:	0080      	lsls	r0, r0, #2
    1e08:	4b62      	ldr	r3, [pc, #392]	; (1f94 <_usart_interrupt_handler+0x190>)
    1e0a:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    1e0c:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1e0e:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    1e10:	2b00      	cmp	r3, #0
    1e12:	d1fc      	bne.n	1e0e <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    1e14:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    1e16:	7da6      	ldrb	r6, [r4, #22]
    1e18:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    1e1a:	2330      	movs	r3, #48	; 0x30
    1e1c:	5ceb      	ldrb	r3, [r5, r3]
    1e1e:	2231      	movs	r2, #49	; 0x31
    1e20:	5caf      	ldrb	r7, [r5, r2]
    1e22:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    1e24:	07f3      	lsls	r3, r6, #31
    1e26:	d522      	bpl.n	1e6e <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    1e28:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1e2a:	b29b      	uxth	r3, r3
    1e2c:	2b00      	cmp	r3, #0
    1e2e:	d01c      	beq.n	1e6a <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1e30:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    1e32:	7813      	ldrb	r3, [r2, #0]
    1e34:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    1e36:	1c51      	adds	r1, r2, #1
    1e38:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1e3a:	7969      	ldrb	r1, [r5, #5]
    1e3c:	2901      	cmp	r1, #1
    1e3e:	d00e      	beq.n	1e5e <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1e40:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    1e42:	05db      	lsls	r3, r3, #23
    1e44:	0ddb      	lsrs	r3, r3, #23
    1e46:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    1e48:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1e4a:	3b01      	subs	r3, #1
    1e4c:	b29b      	uxth	r3, r3
    1e4e:	85eb      	strh	r3, [r5, #46]	; 0x2e
    1e50:	2b00      	cmp	r3, #0
    1e52:	d10c      	bne.n	1e6e <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1e54:	3301      	adds	r3, #1
    1e56:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    1e58:	3301      	adds	r3, #1
    1e5a:	75a3      	strb	r3, [r4, #22]
    1e5c:	e007      	b.n	1e6e <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    1e5e:	7851      	ldrb	r1, [r2, #1]
    1e60:	0209      	lsls	r1, r1, #8
    1e62:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    1e64:	3202      	adds	r2, #2
    1e66:	62aa      	str	r2, [r5, #40]	; 0x28
    1e68:	e7eb      	b.n	1e42 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1e6a:	2301      	movs	r3, #1
    1e6c:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    1e6e:	07b3      	lsls	r3, r6, #30
    1e70:	d506      	bpl.n	1e80 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    1e72:	2302      	movs	r3, #2
    1e74:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    1e76:	2200      	movs	r2, #0
    1e78:	3331      	adds	r3, #49	; 0x31
    1e7a:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    1e7c:	07fb      	lsls	r3, r7, #31
    1e7e:	d41a      	bmi.n	1eb6 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    1e80:	0773      	lsls	r3, r6, #29
    1e82:	d565      	bpl.n	1f50 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    1e84:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1e86:	b29b      	uxth	r3, r3
    1e88:	2b00      	cmp	r3, #0
    1e8a:	d05f      	beq.n	1f4c <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1e8c:	8b63      	ldrh	r3, [r4, #26]
    1e8e:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    1e90:	071a      	lsls	r2, r3, #28
    1e92:	d414      	bmi.n	1ebe <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1e94:	223f      	movs	r2, #63	; 0x3f
    1e96:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    1e98:	2b00      	cmp	r3, #0
    1e9a:	d034      	beq.n	1f06 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    1e9c:	079a      	lsls	r2, r3, #30
    1e9e:	d511      	bpl.n	1ec4 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    1ea0:	221a      	movs	r2, #26
    1ea2:	2332      	movs	r3, #50	; 0x32
    1ea4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1ea6:	3b30      	subs	r3, #48	; 0x30
    1ea8:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    1eaa:	077b      	lsls	r3, r7, #29
    1eac:	d550      	bpl.n	1f50 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    1eae:	0028      	movs	r0, r5
    1eb0:	696b      	ldr	r3, [r5, #20]
    1eb2:	4798      	blx	r3
    1eb4:	e04c      	b.n	1f50 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    1eb6:	0028      	movs	r0, r5
    1eb8:	68eb      	ldr	r3, [r5, #12]
    1eba:	4798      	blx	r3
    1ebc:	e7e0      	b.n	1e80 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    1ebe:	2237      	movs	r2, #55	; 0x37
    1ec0:	4013      	ands	r3, r2
    1ec2:	e7e9      	b.n	1e98 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1ec4:	075a      	lsls	r2, r3, #29
    1ec6:	d505      	bpl.n	1ed4 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    1ec8:	221e      	movs	r2, #30
    1eca:	2332      	movs	r3, #50	; 0x32
    1ecc:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1ece:	3b2e      	subs	r3, #46	; 0x2e
    1ed0:	8363      	strh	r3, [r4, #26]
    1ed2:	e7ea      	b.n	1eaa <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1ed4:	07da      	lsls	r2, r3, #31
    1ed6:	d505      	bpl.n	1ee4 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    1ed8:	2213      	movs	r2, #19
    1eda:	2332      	movs	r3, #50	; 0x32
    1edc:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1ede:	3b31      	subs	r3, #49	; 0x31
    1ee0:	8363      	strh	r3, [r4, #26]
    1ee2:	e7e2      	b.n	1eaa <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    1ee4:	06da      	lsls	r2, r3, #27
    1ee6:	d505      	bpl.n	1ef4 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    1ee8:	2242      	movs	r2, #66	; 0x42
    1eea:	2332      	movs	r3, #50	; 0x32
    1eec:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1eee:	3b22      	subs	r3, #34	; 0x22
    1ef0:	8363      	strh	r3, [r4, #26]
    1ef2:	e7da      	b.n	1eaa <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    1ef4:	2220      	movs	r2, #32
    1ef6:	421a      	tst	r2, r3
    1ef8:	d0d7      	beq.n	1eaa <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    1efa:	3221      	adds	r2, #33	; 0x21
    1efc:	2332      	movs	r3, #50	; 0x32
    1efe:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1f00:	3b12      	subs	r3, #18
    1f02:	8363      	strh	r3, [r4, #26]
    1f04:	e7d1      	b.n	1eaa <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    1f06:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    1f08:	05db      	lsls	r3, r3, #23
    1f0a:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    1f0c:	b2da      	uxtb	r2, r3
    1f0e:	6a69      	ldr	r1, [r5, #36]	; 0x24
    1f10:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    1f12:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    1f14:	1c51      	adds	r1, r2, #1
    1f16:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1f18:	7969      	ldrb	r1, [r5, #5]
    1f1a:	2901      	cmp	r1, #1
    1f1c:	d010      	beq.n	1f40 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    1f1e:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1f20:	3b01      	subs	r3, #1
    1f22:	b29b      	uxth	r3, r3
    1f24:	85ab      	strh	r3, [r5, #44]	; 0x2c
    1f26:	2b00      	cmp	r3, #0
    1f28:	d112      	bne.n	1f50 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1f2a:	3304      	adds	r3, #4
    1f2c:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    1f2e:	2200      	movs	r2, #0
    1f30:	332e      	adds	r3, #46	; 0x2e
    1f32:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    1f34:	07bb      	lsls	r3, r7, #30
    1f36:	d50b      	bpl.n	1f50 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    1f38:	0028      	movs	r0, r5
    1f3a:	692b      	ldr	r3, [r5, #16]
    1f3c:	4798      	blx	r3
    1f3e:	e007      	b.n	1f50 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    1f40:	0a1b      	lsrs	r3, r3, #8
    1f42:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    1f44:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    1f46:	3301      	adds	r3, #1
    1f48:	626b      	str	r3, [r5, #36]	; 0x24
    1f4a:	e7e8      	b.n	1f1e <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1f4c:	2304      	movs	r3, #4
    1f4e:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    1f50:	06f3      	lsls	r3, r6, #27
    1f52:	d504      	bpl.n	1f5e <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    1f54:	2310      	movs	r3, #16
    1f56:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    1f58:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    1f5a:	06fb      	lsls	r3, r7, #27
    1f5c:	d40e      	bmi.n	1f7c <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    1f5e:	06b3      	lsls	r3, r6, #26
    1f60:	d504      	bpl.n	1f6c <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    1f62:	2320      	movs	r3, #32
    1f64:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    1f66:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    1f68:	073b      	lsls	r3, r7, #28
    1f6a:	d40b      	bmi.n	1f84 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    1f6c:	0733      	lsls	r3, r6, #28
    1f6e:	d504      	bpl.n	1f7a <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    1f70:	2308      	movs	r3, #8
    1f72:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    1f74:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    1f76:	06bb      	lsls	r3, r7, #26
    1f78:	d408      	bmi.n	1f8c <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    1f7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    1f7c:	0028      	movs	r0, r5
    1f7e:	69eb      	ldr	r3, [r5, #28]
    1f80:	4798      	blx	r3
    1f82:	e7ec      	b.n	1f5e <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    1f84:	0028      	movs	r0, r5
    1f86:	69ab      	ldr	r3, [r5, #24]
    1f88:	4798      	blx	r3
    1f8a:	e7ef      	b.n	1f6c <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    1f8c:	6a2b      	ldr	r3, [r5, #32]
    1f8e:	0028      	movs	r0, r5
    1f90:	4798      	blx	r3
}
    1f92:	e7f2      	b.n	1f7a <_usart_interrupt_handler+0x176>
    1f94:	20000368 	.word	0x20000368

00001f98 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1f98:	b510      	push	{r4, lr}
	switch (clock_source) {
    1f9a:	2808      	cmp	r0, #8
    1f9c:	d803      	bhi.n	1fa6 <system_clock_source_get_hz+0xe>
    1f9e:	0080      	lsls	r0, r0, #2
    1fa0:	4b1c      	ldr	r3, [pc, #112]	; (2014 <STACK_SIZE+0x14>)
    1fa2:	581b      	ldr	r3, [r3, r0]
    1fa4:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    1fa6:	2000      	movs	r0, #0
    1fa8:	e032      	b.n	2010 <STACK_SIZE+0x10>
		return _system_clock_inst.xosc.frequency;
    1faa:	4b1b      	ldr	r3, [pc, #108]	; (2018 <STACK_SIZE+0x18>)
    1fac:	6918      	ldr	r0, [r3, #16]
    1fae:	e02f      	b.n	2010 <STACK_SIZE+0x10>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1fb0:	4b1a      	ldr	r3, [pc, #104]	; (201c <STACK_SIZE+0x1c>)
    1fb2:	6a1b      	ldr	r3, [r3, #32]
    1fb4:	059b      	lsls	r3, r3, #22
    1fb6:	0f9b      	lsrs	r3, r3, #30
    1fb8:	4819      	ldr	r0, [pc, #100]	; (2020 <STACK_SIZE+0x20>)
    1fba:	40d8      	lsrs	r0, r3
    1fbc:	e028      	b.n	2010 <STACK_SIZE+0x10>
		return _system_clock_inst.xosc32k.frequency;
    1fbe:	4b16      	ldr	r3, [pc, #88]	; (2018 <STACK_SIZE+0x18>)
    1fc0:	6958      	ldr	r0, [r3, #20]
    1fc2:	e025      	b.n	2010 <STACK_SIZE+0x10>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1fc4:	4b14      	ldr	r3, [pc, #80]	; (2018 <STACK_SIZE+0x18>)
    1fc6:	681b      	ldr	r3, [r3, #0]
			return 0;
    1fc8:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1fca:	079b      	lsls	r3, r3, #30
    1fcc:	d520      	bpl.n	2010 <STACK_SIZE+0x10>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1fce:	4913      	ldr	r1, [pc, #76]	; (201c <STACK_SIZE+0x1c>)
    1fd0:	2210      	movs	r2, #16
    1fd2:	68cb      	ldr	r3, [r1, #12]
    1fd4:	421a      	tst	r2, r3
    1fd6:	d0fc      	beq.n	1fd2 <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    1fd8:	4b0f      	ldr	r3, [pc, #60]	; (2018 <STACK_SIZE+0x18>)
    1fda:	681a      	ldr	r2, [r3, #0]
    1fdc:	2324      	movs	r3, #36	; 0x24
    1fde:	4013      	ands	r3, r2
    1fe0:	2b04      	cmp	r3, #4
    1fe2:	d001      	beq.n	1fe8 <system_clock_source_get_hz+0x50>
			return 48000000UL;
    1fe4:	480f      	ldr	r0, [pc, #60]	; (2024 <STACK_SIZE+0x24>)
    1fe6:	e013      	b.n	2010 <STACK_SIZE+0x10>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1fe8:	2000      	movs	r0, #0
    1fea:	4b0f      	ldr	r3, [pc, #60]	; (2028 <STACK_SIZE+0x28>)
    1fec:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    1fee:	4b0a      	ldr	r3, [pc, #40]	; (2018 <STACK_SIZE+0x18>)
    1ff0:	689b      	ldr	r3, [r3, #8]
    1ff2:	041b      	lsls	r3, r3, #16
    1ff4:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1ff6:	4358      	muls	r0, r3
    1ff8:	e00a      	b.n	2010 <STACK_SIZE+0x10>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1ffa:	2350      	movs	r3, #80	; 0x50
    1ffc:	4a07      	ldr	r2, [pc, #28]	; (201c <STACK_SIZE+0x1c>)
    1ffe:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    2000:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2002:	075b      	lsls	r3, r3, #29
    2004:	d504      	bpl.n	2010 <STACK_SIZE+0x10>
		return _system_clock_inst.dpll.frequency;
    2006:	4b04      	ldr	r3, [pc, #16]	; (2018 <STACK_SIZE+0x18>)
    2008:	68d8      	ldr	r0, [r3, #12]
    200a:	e001      	b.n	2010 <STACK_SIZE+0x10>
		return 32768UL;
    200c:	2080      	movs	r0, #128	; 0x80
    200e:	0200      	lsls	r0, r0, #8
	}
}
    2010:	bd10      	pop	{r4, pc}
    2012:	46c0      	nop			; (mov r8, r8)
    2014:	0000582c 	.word	0x0000582c
    2018:	200002a0 	.word	0x200002a0
    201c:	40000800 	.word	0x40000800
    2020:	007a1200 	.word	0x007a1200
    2024:	02dc6c00 	.word	0x02dc6c00
    2028:	000025f9 	.word	0x000025f9

0000202c <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    202c:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    202e:	490c      	ldr	r1, [pc, #48]	; (2060 <system_clock_source_osc8m_set_config+0x34>)
    2030:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    2032:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    2034:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    2036:	7840      	ldrb	r0, [r0, #1]
    2038:	2201      	movs	r2, #1
    203a:	4010      	ands	r0, r2
    203c:	0180      	lsls	r0, r0, #6
    203e:	2640      	movs	r6, #64	; 0x40
    2040:	43b3      	bics	r3, r6
    2042:	4303      	orrs	r3, r0
    2044:	402a      	ands	r2, r5
    2046:	01d2      	lsls	r2, r2, #7
    2048:	2080      	movs	r0, #128	; 0x80
    204a:	4383      	bics	r3, r0
    204c:	4313      	orrs	r3, r2
    204e:	2203      	movs	r2, #3
    2050:	4022      	ands	r2, r4
    2052:	0212      	lsls	r2, r2, #8
    2054:	4803      	ldr	r0, [pc, #12]	; (2064 <system_clock_source_osc8m_set_config+0x38>)
    2056:	4003      	ands	r3, r0
    2058:	4313      	orrs	r3, r2
    205a:	620b      	str	r3, [r1, #32]
}
    205c:	bd70      	pop	{r4, r5, r6, pc}
    205e:	46c0      	nop			; (mov r8, r8)
    2060:	40000800 	.word	0x40000800
    2064:	fffffcff 	.word	0xfffffcff

00002068 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    2068:	b5f0      	push	{r4, r5, r6, r7, lr}
    206a:	46de      	mov	lr, fp
    206c:	4657      	mov	r7, sl
    206e:	464e      	mov	r6, r9
    2070:	4645      	mov	r5, r8
    2072:	b5e0      	push	{r5, r6, r7, lr}
    2074:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    2076:	4b26      	ldr	r3, [pc, #152]	; (2110 <system_clock_source_xosc32k_set_config+0xa8>)
    2078:	469b      	mov	fp, r3
    207a:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    207c:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    207e:	7800      	ldrb	r0, [r0, #0]
    2080:	4242      	negs	r2, r0
    2082:	4142      	adcs	r2, r0
    2084:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    2086:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    2088:	78ca      	ldrb	r2, [r1, #3]
    208a:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    208c:	790a      	ldrb	r2, [r1, #4]
    208e:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    2090:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    2092:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    2094:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    2096:	688a      	ldr	r2, [r1, #8]
    2098:	491e      	ldr	r1, [pc, #120]	; (2114 <system_clock_source_xosc32k_set_config+0xac>)
    209a:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    209c:	2101      	movs	r1, #1
    209e:	464a      	mov	r2, r9
    20a0:	0092      	lsls	r2, r2, #2
    20a2:	4691      	mov	r9, r2
    20a4:	2204      	movs	r2, #4
    20a6:	4393      	bics	r3, r2
    20a8:	464a      	mov	r2, r9
    20aa:	4313      	orrs	r3, r2
    20ac:	4642      	mov	r2, r8
    20ae:	400a      	ands	r2, r1
    20b0:	00d2      	lsls	r2, r2, #3
    20b2:	4690      	mov	r8, r2
    20b4:	2208      	movs	r2, #8
    20b6:	4393      	bics	r3, r2
    20b8:	4642      	mov	r2, r8
    20ba:	4313      	orrs	r3, r2
    20bc:	4662      	mov	r2, ip
    20be:	400a      	ands	r2, r1
    20c0:	0112      	lsls	r2, r2, #4
    20c2:	4694      	mov	ip, r2
    20c4:	2210      	movs	r2, #16
    20c6:	4393      	bics	r3, r2
    20c8:	4662      	mov	r2, ip
    20ca:	4313      	orrs	r3, r2
    20cc:	4008      	ands	r0, r1
    20ce:	0140      	lsls	r0, r0, #5
    20d0:	2220      	movs	r2, #32
    20d2:	4393      	bics	r3, r2
    20d4:	4303      	orrs	r3, r0
    20d6:	400f      	ands	r7, r1
    20d8:	01bf      	lsls	r7, r7, #6
    20da:	2040      	movs	r0, #64	; 0x40
    20dc:	4383      	bics	r3, r0
    20de:	433b      	orrs	r3, r7
    20e0:	400e      	ands	r6, r1
    20e2:	01f6      	lsls	r6, r6, #7
    20e4:	3040      	adds	r0, #64	; 0x40
    20e6:	4383      	bics	r3, r0
    20e8:	4333      	orrs	r3, r6
    20ea:	3879      	subs	r0, #121	; 0x79
    20ec:	4005      	ands	r5, r0
    20ee:	022d      	lsls	r5, r5, #8
    20f0:	4809      	ldr	r0, [pc, #36]	; (2118 <system_clock_source_xosc32k_set_config+0xb0>)
    20f2:	4003      	ands	r3, r0
    20f4:	432b      	orrs	r3, r5
    20f6:	4021      	ands	r1, r4
    20f8:	0309      	lsls	r1, r1, #12
    20fa:	4808      	ldr	r0, [pc, #32]	; (211c <system_clock_source_xosc32k_set_config+0xb4>)
    20fc:	4003      	ands	r3, r0
    20fe:	430b      	orrs	r3, r1
    2100:	465a      	mov	r2, fp
    2102:	8293      	strh	r3, [r2, #20]
}
    2104:	bc3c      	pop	{r2, r3, r4, r5}
    2106:	4690      	mov	r8, r2
    2108:	4699      	mov	r9, r3
    210a:	46a2      	mov	sl, r4
    210c:	46ab      	mov	fp, r5
    210e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2110:	40000800 	.word	0x40000800
    2114:	200002a0 	.word	0x200002a0
    2118:	fffff8ff 	.word	0xfffff8ff
    211c:	ffffefff 	.word	0xffffefff

00002120 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    2120:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    2122:	7a03      	ldrb	r3, [r0, #8]
    2124:	069b      	lsls	r3, r3, #26
    2126:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    2128:	8942      	ldrh	r2, [r0, #10]
    212a:	0592      	lsls	r2, r2, #22
    212c:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    212e:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    2130:	4918      	ldr	r1, [pc, #96]	; (2194 <system_clock_source_dfll_set_config+0x74>)
    2132:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    2134:	7983      	ldrb	r3, [r0, #6]
    2136:	79c2      	ldrb	r2, [r0, #7]
    2138:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    213a:	8842      	ldrh	r2, [r0, #2]
    213c:	8884      	ldrh	r4, [r0, #4]
    213e:	4322      	orrs	r2, r4
    2140:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    2142:	7842      	ldrb	r2, [r0, #1]
    2144:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    2146:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    2148:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    214a:	7803      	ldrb	r3, [r0, #0]
    214c:	2b04      	cmp	r3, #4
    214e:	d011      	beq.n	2174 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    2150:	2b20      	cmp	r3, #32
    2152:	d10e      	bne.n	2172 <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2154:	7b03      	ldrb	r3, [r0, #12]
    2156:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    2158:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    215a:	4313      	orrs	r3, r2
    215c:	89c2      	ldrh	r2, [r0, #14]
    215e:	0412      	lsls	r2, r2, #16
    2160:	490d      	ldr	r1, [pc, #52]	; (2198 <system_clock_source_dfll_set_config+0x78>)
    2162:	400a      	ands	r2, r1
    2164:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    2166:	4a0b      	ldr	r2, [pc, #44]	; (2194 <system_clock_source_dfll_set_config+0x74>)
    2168:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    216a:	6811      	ldr	r1, [r2, #0]
    216c:	4b0b      	ldr	r3, [pc, #44]	; (219c <system_clock_source_dfll_set_config+0x7c>)
    216e:	430b      	orrs	r3, r1
    2170:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    2172:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2174:	7b03      	ldrb	r3, [r0, #12]
    2176:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    2178:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    217a:	4313      	orrs	r3, r2
    217c:	89c2      	ldrh	r2, [r0, #14]
    217e:	0412      	lsls	r2, r2, #16
    2180:	4905      	ldr	r1, [pc, #20]	; (2198 <system_clock_source_dfll_set_config+0x78>)
    2182:	400a      	ands	r2, r1
    2184:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    2186:	4a03      	ldr	r2, [pc, #12]	; (2194 <system_clock_source_dfll_set_config+0x74>)
    2188:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    218a:	6813      	ldr	r3, [r2, #0]
    218c:	2104      	movs	r1, #4
    218e:	430b      	orrs	r3, r1
    2190:	6013      	str	r3, [r2, #0]
    2192:	e7ee      	b.n	2172 <system_clock_source_dfll_set_config+0x52>
    2194:	200002a0 	.word	0x200002a0
    2198:	03ff0000 	.word	0x03ff0000
    219c:	00000424 	.word	0x00000424

000021a0 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    21a0:	2808      	cmp	r0, #8
    21a2:	d803      	bhi.n	21ac <system_clock_source_enable+0xc>
    21a4:	0080      	lsls	r0, r0, #2
    21a6:	4b25      	ldr	r3, [pc, #148]	; (223c <system_clock_source_enable+0x9c>)
    21a8:	581b      	ldr	r3, [r3, r0]
    21aa:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    21ac:	2017      	movs	r0, #23
    21ae:	e044      	b.n	223a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    21b0:	4a23      	ldr	r2, [pc, #140]	; (2240 <system_clock_source_enable+0xa0>)
    21b2:	6a13      	ldr	r3, [r2, #32]
    21b4:	2102      	movs	r1, #2
    21b6:	430b      	orrs	r3, r1
    21b8:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    21ba:	2000      	movs	r0, #0
    21bc:	e03d      	b.n	223a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    21be:	4a20      	ldr	r2, [pc, #128]	; (2240 <system_clock_source_enable+0xa0>)
    21c0:	6993      	ldr	r3, [r2, #24]
    21c2:	2102      	movs	r1, #2
    21c4:	430b      	orrs	r3, r1
    21c6:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    21c8:	2000      	movs	r0, #0
		break;
    21ca:	e036      	b.n	223a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    21cc:	4a1c      	ldr	r2, [pc, #112]	; (2240 <system_clock_source_enable+0xa0>)
    21ce:	8a13      	ldrh	r3, [r2, #16]
    21d0:	2102      	movs	r1, #2
    21d2:	430b      	orrs	r3, r1
    21d4:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    21d6:	2000      	movs	r0, #0
		break;
    21d8:	e02f      	b.n	223a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    21da:	4a19      	ldr	r2, [pc, #100]	; (2240 <system_clock_source_enable+0xa0>)
    21dc:	8a93      	ldrh	r3, [r2, #20]
    21de:	2102      	movs	r1, #2
    21e0:	430b      	orrs	r3, r1
    21e2:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    21e4:	2000      	movs	r0, #0
		break;
    21e6:	e028      	b.n	223a <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    21e8:	4916      	ldr	r1, [pc, #88]	; (2244 <system_clock_source_enable+0xa4>)
    21ea:	680b      	ldr	r3, [r1, #0]
    21ec:	2202      	movs	r2, #2
    21ee:	4313      	orrs	r3, r2
    21f0:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    21f2:	4b13      	ldr	r3, [pc, #76]	; (2240 <system_clock_source_enable+0xa0>)
    21f4:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    21f6:	0019      	movs	r1, r3
    21f8:	320e      	adds	r2, #14
    21fa:	68cb      	ldr	r3, [r1, #12]
    21fc:	421a      	tst	r2, r3
    21fe:	d0fc      	beq.n	21fa <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    2200:	4a10      	ldr	r2, [pc, #64]	; (2244 <system_clock_source_enable+0xa4>)
    2202:	6891      	ldr	r1, [r2, #8]
    2204:	4b0e      	ldr	r3, [pc, #56]	; (2240 <system_clock_source_enable+0xa0>)
    2206:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    2208:	6852      	ldr	r2, [r2, #4]
    220a:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    220c:	2200      	movs	r2, #0
    220e:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2210:	0019      	movs	r1, r3
    2212:	3210      	adds	r2, #16
    2214:	68cb      	ldr	r3, [r1, #12]
    2216:	421a      	tst	r2, r3
    2218:	d0fc      	beq.n	2214 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    221a:	4b0a      	ldr	r3, [pc, #40]	; (2244 <system_clock_source_enable+0xa4>)
    221c:	681b      	ldr	r3, [r3, #0]
    221e:	b29b      	uxth	r3, r3
    2220:	4a07      	ldr	r2, [pc, #28]	; (2240 <system_clock_source_enable+0xa0>)
    2222:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    2224:	2000      	movs	r0, #0
    2226:	e008      	b.n	223a <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    2228:	4905      	ldr	r1, [pc, #20]	; (2240 <system_clock_source_enable+0xa0>)
    222a:	2244      	movs	r2, #68	; 0x44
    222c:	5c8b      	ldrb	r3, [r1, r2]
    222e:	2002      	movs	r0, #2
    2230:	4303      	orrs	r3, r0
    2232:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    2234:	2000      	movs	r0, #0
		break;
    2236:	e000      	b.n	223a <system_clock_source_enable+0x9a>
		return STATUS_OK;
    2238:	2000      	movs	r0, #0
}
    223a:	4770      	bx	lr
    223c:	00005850 	.word	0x00005850
    2240:	40000800 	.word	0x40000800
    2244:	200002a0 	.word	0x200002a0

00002248 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    2248:	b5f0      	push	{r4, r5, r6, r7, lr}
    224a:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    224c:	22c2      	movs	r2, #194	; 0xc2
    224e:	00d2      	lsls	r2, r2, #3
    2250:	4b47      	ldr	r3, [pc, #284]	; (2370 <system_clock_init+0x128>)
    2252:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    2254:	4947      	ldr	r1, [pc, #284]	; (2374 <system_clock_init+0x12c>)
    2256:	684b      	ldr	r3, [r1, #4]
    2258:	221e      	movs	r2, #30
    225a:	4393      	bics	r3, r2
    225c:	3a1c      	subs	r2, #28
    225e:	4313      	orrs	r3, r2
    2260:	604b      	str	r3, [r1, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    2262:	ab01      	add	r3, sp, #4
    2264:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2266:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    2268:	4d43      	ldr	r5, [pc, #268]	; (2378 <system_clock_init+0x130>)
    226a:	b2e0      	uxtb	r0, r4
    226c:	a901      	add	r1, sp, #4
    226e:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2270:	3401      	adds	r4, #1
    2272:	2c25      	cmp	r4, #37	; 0x25
    2274:	d1f9      	bne.n	226a <system_clock_init+0x22>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    2276:	a80a      	add	r0, sp, #40	; 0x28
    2278:	2300      	movs	r3, #0
    227a:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    227c:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    227e:	2280      	movs	r2, #128	; 0x80
    2280:	0212      	lsls	r2, r2, #8
    2282:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    2284:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    2286:	2201      	movs	r2, #1
    2288:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    228a:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    228c:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    228e:	3205      	adds	r2, #5
    2290:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    2292:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    2294:	4b39      	ldr	r3, [pc, #228]	; (237c <system_clock_init+0x134>)
    2296:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    2298:	2005      	movs	r0, #5
    229a:	4b39      	ldr	r3, [pc, #228]	; (2380 <system_clock_init+0x138>)
    229c:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    229e:	4934      	ldr	r1, [pc, #208]	; (2370 <system_clock_init+0x128>)
    22a0:	2202      	movs	r2, #2
    22a2:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    22a4:	421a      	tst	r2, r3
    22a6:	d0fc      	beq.n	22a2 <system_clock_init+0x5a>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    22a8:	4a31      	ldr	r2, [pc, #196]	; (2370 <system_clock_init+0x128>)
    22aa:	8a93      	ldrh	r3, [r2, #20]
    22ac:	2180      	movs	r1, #128	; 0x80
    22ae:	430b      	orrs	r3, r1
    22b0:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    22b2:	ab05      	add	r3, sp, #20
    22b4:	2100      	movs	r1, #0
    22b6:	2200      	movs	r2, #0
    22b8:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    22ba:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    22bc:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    22be:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    22c0:	313f      	adds	r1, #63	; 0x3f
    22c2:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    22c4:	393b      	subs	r1, #59	; 0x3b
    22c6:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    22c8:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    22ca:	4b2e      	ldr	r3, [pc, #184]	; (2384 <system_clock_init+0x13c>)
    22cc:	681b      	ldr	r3, [r3, #0]
    22ce:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    22d0:	2b3f      	cmp	r3, #63	; 0x3f
    22d2:	d04b      	beq.n	236c <system_clock_init+0x124>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    22d4:	a805      	add	r0, sp, #20
    22d6:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    22d8:	23b7      	movs	r3, #183	; 0xb7
    22da:	00db      	lsls	r3, r3, #3
    22dc:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    22de:	2307      	movs	r3, #7
    22e0:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    22e2:	3338      	adds	r3, #56	; 0x38
    22e4:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    22e6:	4b28      	ldr	r3, [pc, #160]	; (2388 <system_clock_init+0x140>)
    22e8:	4798      	blx	r3
	config->run_in_standby  = false;
    22ea:	a804      	add	r0, sp, #16
    22ec:	2500      	movs	r5, #0
    22ee:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    22f0:	2601      	movs	r6, #1
    22f2:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    22f4:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    22f6:	4b25      	ldr	r3, [pc, #148]	; (238c <system_clock_init+0x144>)
    22f8:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    22fa:	2006      	movs	r0, #6
    22fc:	4f20      	ldr	r7, [pc, #128]	; (2380 <system_clock_init+0x138>)
    22fe:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    2300:	4b23      	ldr	r3, [pc, #140]	; (2390 <system_clock_init+0x148>)
    2302:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    2304:	ac01      	add	r4, sp, #4
    2306:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    2308:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    230a:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    230c:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    230e:	2305      	movs	r3, #5
    2310:	7023      	strb	r3, [r4, #0]
    2312:	0021      	movs	r1, r4
    2314:	2001      	movs	r0, #1
    2316:	4b1f      	ldr	r3, [pc, #124]	; (2394 <system_clock_init+0x14c>)
    2318:	4798      	blx	r3
    231a:	2001      	movs	r0, #1
    231c:	4b1e      	ldr	r3, [pc, #120]	; (2398 <system_clock_init+0x150>)
    231e:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    2320:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    2322:	0021      	movs	r1, r4
    2324:	2000      	movs	r0, #0
    2326:	4b14      	ldr	r3, [pc, #80]	; (2378 <system_clock_init+0x130>)
    2328:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    232a:	2000      	movs	r0, #0
    232c:	4b1b      	ldr	r3, [pc, #108]	; (239c <system_clock_init+0x154>)
    232e:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    2330:	2007      	movs	r0, #7
    2332:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    2334:	490e      	ldr	r1, [pc, #56]	; (2370 <system_clock_init+0x128>)
    2336:	22d0      	movs	r2, #208	; 0xd0
    2338:	68cb      	ldr	r3, [r1, #12]
    233a:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    233c:	2bd0      	cmp	r3, #208	; 0xd0
    233e:	d1fb      	bne.n	2338 <system_clock_init+0xf0>
	PM->CPUSEL.reg = (uint32_t)divider;
    2340:	4a17      	ldr	r2, [pc, #92]	; (23a0 <system_clock_init+0x158>)
    2342:	2300      	movs	r3, #0
    2344:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    2346:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    2348:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    234a:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    234c:	a901      	add	r1, sp, #4
    234e:	2201      	movs	r2, #1
    2350:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    2352:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    2354:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    2356:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    2358:	3307      	adds	r3, #7
    235a:	700b      	strb	r3, [r1, #0]
    235c:	2000      	movs	r0, #0
    235e:	4b0d      	ldr	r3, [pc, #52]	; (2394 <system_clock_init+0x14c>)
    2360:	4798      	blx	r3
    2362:	2000      	movs	r0, #0
    2364:	4b0c      	ldr	r3, [pc, #48]	; (2398 <system_clock_init+0x150>)
    2366:	4798      	blx	r3
#endif
}
    2368:	b00f      	add	sp, #60	; 0x3c
    236a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    236c:	3b20      	subs	r3, #32
    236e:	e7b1      	b.n	22d4 <system_clock_init+0x8c>
    2370:	40000800 	.word	0x40000800
    2374:	41004000 	.word	0x41004000
    2378:	000025dd 	.word	0x000025dd
    237c:	00002069 	.word	0x00002069
    2380:	000021a1 	.word	0x000021a1
    2384:	00806024 	.word	0x00806024
    2388:	00002121 	.word	0x00002121
    238c:	0000202d 	.word	0x0000202d
    2390:	000023a5 	.word	0x000023a5
    2394:	000023c9 	.word	0x000023c9
    2398:	00002481 	.word	0x00002481
    239c:	00002551 	.word	0x00002551
    23a0:	40000400 	.word	0x40000400

000023a4 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    23a4:	4a06      	ldr	r2, [pc, #24]	; (23c0 <system_gclk_init+0x1c>)
    23a6:	6993      	ldr	r3, [r2, #24]
    23a8:	2108      	movs	r1, #8
    23aa:	430b      	orrs	r3, r1
    23ac:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    23ae:	2201      	movs	r2, #1
    23b0:	4b04      	ldr	r3, [pc, #16]	; (23c4 <system_gclk_init+0x20>)
    23b2:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    23b4:	0019      	movs	r1, r3
    23b6:	780b      	ldrb	r3, [r1, #0]
    23b8:	4213      	tst	r3, r2
    23ba:	d1fc      	bne.n	23b6 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    23bc:	4770      	bx	lr
    23be:	46c0      	nop			; (mov r8, r8)
    23c0:	40000400 	.word	0x40000400
    23c4:	40000c00 	.word	0x40000c00

000023c8 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    23c8:	b570      	push	{r4, r5, r6, lr}
    23ca:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    23cc:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    23ce:	780d      	ldrb	r5, [r1, #0]
    23d0:	022d      	lsls	r5, r5, #8
    23d2:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    23d4:	784b      	ldrb	r3, [r1, #1]
    23d6:	2b00      	cmp	r3, #0
    23d8:	d002      	beq.n	23e0 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    23da:	2380      	movs	r3, #128	; 0x80
    23dc:	02db      	lsls	r3, r3, #11
    23de:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    23e0:	7a4b      	ldrb	r3, [r1, #9]
    23e2:	2b00      	cmp	r3, #0
    23e4:	d002      	beq.n	23ec <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    23e6:	2380      	movs	r3, #128	; 0x80
    23e8:	031b      	lsls	r3, r3, #12
    23ea:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    23ec:	6848      	ldr	r0, [r1, #4]
    23ee:	2801      	cmp	r0, #1
    23f0:	d910      	bls.n	2414 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    23f2:	1e43      	subs	r3, r0, #1
    23f4:	4218      	tst	r0, r3
    23f6:	d134      	bne.n	2462 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    23f8:	2802      	cmp	r0, #2
    23fa:	d930      	bls.n	245e <system_gclk_gen_set_config+0x96>
    23fc:	2302      	movs	r3, #2
    23fe:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    2400:	3201      	adds	r2, #1
						mask <<= 1) {
    2402:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    2404:	4298      	cmp	r0, r3
    2406:	d8fb      	bhi.n	2400 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    2408:	0212      	lsls	r2, r2, #8
    240a:	4332      	orrs	r2, r6
    240c:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    240e:	2380      	movs	r3, #128	; 0x80
    2410:	035b      	lsls	r3, r3, #13
    2412:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    2414:	7a0b      	ldrb	r3, [r1, #8]
    2416:	2b00      	cmp	r3, #0
    2418:	d002      	beq.n	2420 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    241a:	2380      	movs	r3, #128	; 0x80
    241c:	039b      	lsls	r3, r3, #14
    241e:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2420:	4a13      	ldr	r2, [pc, #76]	; (2470 <system_gclk_gen_set_config+0xa8>)
    2422:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    2424:	b25b      	sxtb	r3, r3
    2426:	2b00      	cmp	r3, #0
    2428:	dbfb      	blt.n	2422 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    242a:	4b12      	ldr	r3, [pc, #72]	; (2474 <system_gclk_gen_set_config+0xac>)
    242c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    242e:	4b12      	ldr	r3, [pc, #72]	; (2478 <system_gclk_gen_set_config+0xb0>)
    2430:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2432:	4a0f      	ldr	r2, [pc, #60]	; (2470 <system_gclk_gen_set_config+0xa8>)
    2434:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    2436:	b25b      	sxtb	r3, r3
    2438:	2b00      	cmp	r3, #0
    243a:	dbfb      	blt.n	2434 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    243c:	4b0c      	ldr	r3, [pc, #48]	; (2470 <system_gclk_gen_set_config+0xa8>)
    243e:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2440:	001a      	movs	r2, r3
    2442:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    2444:	b25b      	sxtb	r3, r3
    2446:	2b00      	cmp	r3, #0
    2448:	dbfb      	blt.n	2442 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    244a:	4a09      	ldr	r2, [pc, #36]	; (2470 <system_gclk_gen_set_config+0xa8>)
    244c:	6853      	ldr	r3, [r2, #4]
    244e:	2180      	movs	r1, #128	; 0x80
    2450:	0249      	lsls	r1, r1, #9
    2452:	400b      	ands	r3, r1
    2454:	431d      	orrs	r5, r3
    2456:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    2458:	4b08      	ldr	r3, [pc, #32]	; (247c <system_gclk_gen_set_config+0xb4>)
    245a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    245c:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    245e:	2200      	movs	r2, #0
    2460:	e7d2      	b.n	2408 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    2462:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    2464:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    2466:	2380      	movs	r3, #128	; 0x80
    2468:	029b      	lsls	r3, r3, #10
    246a:	431d      	orrs	r5, r3
    246c:	e7d2      	b.n	2414 <system_gclk_gen_set_config+0x4c>
    246e:	46c0      	nop			; (mov r8, r8)
    2470:	40000c00 	.word	0x40000c00
    2474:	00000f71 	.word	0x00000f71
    2478:	40000c08 	.word	0x40000c08
    247c:	00000fb1 	.word	0x00000fb1

00002480 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    2480:	b510      	push	{r4, lr}
    2482:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2484:	4a0b      	ldr	r2, [pc, #44]	; (24b4 <system_gclk_gen_enable+0x34>)
    2486:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2488:	b25b      	sxtb	r3, r3
    248a:	2b00      	cmp	r3, #0
    248c:	dbfb      	blt.n	2486 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    248e:	4b0a      	ldr	r3, [pc, #40]	; (24b8 <system_gclk_gen_enable+0x38>)
    2490:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2492:	4b0a      	ldr	r3, [pc, #40]	; (24bc <system_gclk_gen_enable+0x3c>)
    2494:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2496:	4a07      	ldr	r2, [pc, #28]	; (24b4 <system_gclk_gen_enable+0x34>)
    2498:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    249a:	b25b      	sxtb	r3, r3
    249c:	2b00      	cmp	r3, #0
    249e:	dbfb      	blt.n	2498 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    24a0:	4a04      	ldr	r2, [pc, #16]	; (24b4 <system_gclk_gen_enable+0x34>)
    24a2:	6851      	ldr	r1, [r2, #4]
    24a4:	2380      	movs	r3, #128	; 0x80
    24a6:	025b      	lsls	r3, r3, #9
    24a8:	430b      	orrs	r3, r1
    24aa:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    24ac:	4b04      	ldr	r3, [pc, #16]	; (24c0 <system_gclk_gen_enable+0x40>)
    24ae:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    24b0:	bd10      	pop	{r4, pc}
    24b2:	46c0      	nop			; (mov r8, r8)
    24b4:	40000c00 	.word	0x40000c00
    24b8:	00000f71 	.word	0x00000f71
    24bc:	40000c04 	.word	0x40000c04
    24c0:	00000fb1 	.word	0x00000fb1

000024c4 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    24c4:	b570      	push	{r4, r5, r6, lr}
    24c6:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    24c8:	4a1a      	ldr	r2, [pc, #104]	; (2534 <system_gclk_gen_get_hz+0x70>)
    24ca:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    24cc:	b25b      	sxtb	r3, r3
    24ce:	2b00      	cmp	r3, #0
    24d0:	dbfb      	blt.n	24ca <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    24d2:	4b19      	ldr	r3, [pc, #100]	; (2538 <system_gclk_gen_get_hz+0x74>)
    24d4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    24d6:	4b19      	ldr	r3, [pc, #100]	; (253c <system_gclk_gen_get_hz+0x78>)
    24d8:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    24da:	4a16      	ldr	r2, [pc, #88]	; (2534 <system_gclk_gen_get_hz+0x70>)
    24dc:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    24de:	b25b      	sxtb	r3, r3
    24e0:	2b00      	cmp	r3, #0
    24e2:	dbfb      	blt.n	24dc <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    24e4:	4e13      	ldr	r6, [pc, #76]	; (2534 <system_gclk_gen_get_hz+0x70>)
    24e6:	6870      	ldr	r0, [r6, #4]
    24e8:	04c0      	lsls	r0, r0, #19
    24ea:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    24ec:	4b14      	ldr	r3, [pc, #80]	; (2540 <system_gclk_gen_get_hz+0x7c>)
    24ee:	4798      	blx	r3
    24f0:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    24f2:	4b12      	ldr	r3, [pc, #72]	; (253c <system_gclk_gen_get_hz+0x78>)
    24f4:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    24f6:	6876      	ldr	r6, [r6, #4]
    24f8:	02f6      	lsls	r6, r6, #11
    24fa:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    24fc:	4b11      	ldr	r3, [pc, #68]	; (2544 <system_gclk_gen_get_hz+0x80>)
    24fe:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2500:	4a0c      	ldr	r2, [pc, #48]	; (2534 <system_gclk_gen_get_hz+0x70>)
    2502:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2504:	b25b      	sxtb	r3, r3
    2506:	2b00      	cmp	r3, #0
    2508:	dbfb      	blt.n	2502 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    250a:	4b0a      	ldr	r3, [pc, #40]	; (2534 <system_gclk_gen_get_hz+0x70>)
    250c:	689c      	ldr	r4, [r3, #8]
    250e:	0224      	lsls	r4, r4, #8
    2510:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    2512:	4b0d      	ldr	r3, [pc, #52]	; (2548 <system_gclk_gen_get_hz+0x84>)
    2514:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    2516:	2e00      	cmp	r6, #0
    2518:	d107      	bne.n	252a <system_gclk_gen_get_hz+0x66>
    251a:	2c01      	cmp	r4, #1
    251c:	d907      	bls.n	252e <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    251e:	0021      	movs	r1, r4
    2520:	0028      	movs	r0, r5
    2522:	4b0a      	ldr	r3, [pc, #40]	; (254c <system_gclk_gen_get_hz+0x88>)
    2524:	4798      	blx	r3
    2526:	0005      	movs	r5, r0
    2528:	e001      	b.n	252e <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    252a:	3401      	adds	r4, #1
    252c:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    252e:	0028      	movs	r0, r5
    2530:	bd70      	pop	{r4, r5, r6, pc}
    2532:	46c0      	nop			; (mov r8, r8)
    2534:	40000c00 	.word	0x40000c00
    2538:	00000f71 	.word	0x00000f71
    253c:	40000c04 	.word	0x40000c04
    2540:	00001f99 	.word	0x00001f99
    2544:	40000c08 	.word	0x40000c08
    2548:	00000fb1 	.word	0x00000fb1
    254c:	00003b99 	.word	0x00003b99

00002550 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    2550:	b510      	push	{r4, lr}
    2552:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2554:	4b06      	ldr	r3, [pc, #24]	; (2570 <system_gclk_chan_enable+0x20>)
    2556:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2558:	4b06      	ldr	r3, [pc, #24]	; (2574 <system_gclk_chan_enable+0x24>)
    255a:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    255c:	4a06      	ldr	r2, [pc, #24]	; (2578 <system_gclk_chan_enable+0x28>)
    255e:	8853      	ldrh	r3, [r2, #2]
    2560:	2180      	movs	r1, #128	; 0x80
    2562:	01c9      	lsls	r1, r1, #7
    2564:	430b      	orrs	r3, r1
    2566:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    2568:	4b04      	ldr	r3, [pc, #16]	; (257c <system_gclk_chan_enable+0x2c>)
    256a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    256c:	bd10      	pop	{r4, pc}
    256e:	46c0      	nop			; (mov r8, r8)
    2570:	00000f71 	.word	0x00000f71
    2574:	40000c02 	.word	0x40000c02
    2578:	40000c00 	.word	0x40000c00
    257c:	00000fb1 	.word	0x00000fb1

00002580 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    2580:	b510      	push	{r4, lr}
    2582:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2584:	4b0f      	ldr	r3, [pc, #60]	; (25c4 <system_gclk_chan_disable+0x44>)
    2586:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2588:	4b0f      	ldr	r3, [pc, #60]	; (25c8 <system_gclk_chan_disable+0x48>)
    258a:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    258c:	4a0f      	ldr	r2, [pc, #60]	; (25cc <system_gclk_chan_disable+0x4c>)
    258e:	8853      	ldrh	r3, [r2, #2]
    2590:	051b      	lsls	r3, r3, #20
    2592:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    2594:	8853      	ldrh	r3, [r2, #2]
    2596:	490e      	ldr	r1, [pc, #56]	; (25d0 <system_gclk_chan_disable+0x50>)
    2598:	400b      	ands	r3, r1
    259a:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    259c:	8853      	ldrh	r3, [r2, #2]
    259e:	490d      	ldr	r1, [pc, #52]	; (25d4 <system_gclk_chan_disable+0x54>)
    25a0:	400b      	ands	r3, r1
    25a2:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    25a4:	0011      	movs	r1, r2
    25a6:	2280      	movs	r2, #128	; 0x80
    25a8:	01d2      	lsls	r2, r2, #7
    25aa:	884b      	ldrh	r3, [r1, #2]
    25ac:	4213      	tst	r3, r2
    25ae:	d1fc      	bne.n	25aa <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    25b0:	4906      	ldr	r1, [pc, #24]	; (25cc <system_gclk_chan_disable+0x4c>)
    25b2:	884a      	ldrh	r2, [r1, #2]
    25b4:	0203      	lsls	r3, r0, #8
    25b6:	4806      	ldr	r0, [pc, #24]	; (25d0 <system_gclk_chan_disable+0x50>)
    25b8:	4002      	ands	r2, r0
    25ba:	4313      	orrs	r3, r2
    25bc:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    25be:	4b06      	ldr	r3, [pc, #24]	; (25d8 <system_gclk_chan_disable+0x58>)
    25c0:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    25c2:	bd10      	pop	{r4, pc}
    25c4:	00000f71 	.word	0x00000f71
    25c8:	40000c02 	.word	0x40000c02
    25cc:	40000c00 	.word	0x40000c00
    25d0:	fffff0ff 	.word	0xfffff0ff
    25d4:	ffffbfff 	.word	0xffffbfff
    25d8:	00000fb1 	.word	0x00000fb1

000025dc <system_gclk_chan_set_config>:
{
    25dc:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    25de:	780c      	ldrb	r4, [r1, #0]
    25e0:	0224      	lsls	r4, r4, #8
    25e2:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    25e4:	4b02      	ldr	r3, [pc, #8]	; (25f0 <system_gclk_chan_set_config+0x14>)
    25e6:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    25e8:	b2a4      	uxth	r4, r4
    25ea:	4b02      	ldr	r3, [pc, #8]	; (25f4 <system_gclk_chan_set_config+0x18>)
    25ec:	805c      	strh	r4, [r3, #2]
}
    25ee:	bd10      	pop	{r4, pc}
    25f0:	00002581 	.word	0x00002581
    25f4:	40000c00 	.word	0x40000c00

000025f8 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    25f8:	b510      	push	{r4, lr}
    25fa:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    25fc:	4b06      	ldr	r3, [pc, #24]	; (2618 <system_gclk_chan_get_hz+0x20>)
    25fe:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2600:	4b06      	ldr	r3, [pc, #24]	; (261c <system_gclk_chan_get_hz+0x24>)
    2602:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    2604:	4b06      	ldr	r3, [pc, #24]	; (2620 <system_gclk_chan_get_hz+0x28>)
    2606:	885c      	ldrh	r4, [r3, #2]
    2608:	0524      	lsls	r4, r4, #20
    260a:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    260c:	4b05      	ldr	r3, [pc, #20]	; (2624 <system_gclk_chan_get_hz+0x2c>)
    260e:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    2610:	0020      	movs	r0, r4
    2612:	4b05      	ldr	r3, [pc, #20]	; (2628 <system_gclk_chan_get_hz+0x30>)
    2614:	4798      	blx	r3
}
    2616:	bd10      	pop	{r4, pc}
    2618:	00000f71 	.word	0x00000f71
    261c:	40000c02 	.word	0x40000c02
    2620:	40000c00 	.word	0x40000c00
    2624:	00000fb1 	.word	0x00000fb1
    2628:	000024c5 	.word	0x000024c5

0000262c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    262c:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    262e:	78d3      	ldrb	r3, [r2, #3]
    2630:	2b00      	cmp	r3, #0
    2632:	d135      	bne.n	26a0 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    2634:	7813      	ldrb	r3, [r2, #0]
    2636:	2b80      	cmp	r3, #128	; 0x80
    2638:	d029      	beq.n	268e <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    263a:	061b      	lsls	r3, r3, #24
    263c:	2480      	movs	r4, #128	; 0x80
    263e:	0264      	lsls	r4, r4, #9
    2640:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    2642:	7854      	ldrb	r4, [r2, #1]
    2644:	2502      	movs	r5, #2
    2646:	43ac      	bics	r4, r5
    2648:	d106      	bne.n	2658 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    264a:	7894      	ldrb	r4, [r2, #2]
    264c:	2c00      	cmp	r4, #0
    264e:	d120      	bne.n	2692 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    2650:	2480      	movs	r4, #128	; 0x80
    2652:	02a4      	lsls	r4, r4, #10
    2654:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    2656:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2658:	7854      	ldrb	r4, [r2, #1]
    265a:	3c01      	subs	r4, #1
    265c:	2c01      	cmp	r4, #1
    265e:	d91c      	bls.n	269a <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2660:	040d      	lsls	r5, r1, #16
    2662:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2664:	24a0      	movs	r4, #160	; 0xa0
    2666:	05e4      	lsls	r4, r4, #23
    2668:	432c      	orrs	r4, r5
    266a:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    266c:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    266e:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2670:	24d0      	movs	r4, #208	; 0xd0
    2672:	0624      	lsls	r4, r4, #24
    2674:	432c      	orrs	r4, r5
    2676:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2678:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    267a:	78d4      	ldrb	r4, [r2, #3]
    267c:	2c00      	cmp	r4, #0
    267e:	d122      	bne.n	26c6 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    2680:	035b      	lsls	r3, r3, #13
    2682:	d51c      	bpl.n	26be <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    2684:	7893      	ldrb	r3, [r2, #2]
    2686:	2b01      	cmp	r3, #1
    2688:	d01e      	beq.n	26c8 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    268a:	6141      	str	r1, [r0, #20]
    268c:	e017      	b.n	26be <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    268e:	2300      	movs	r3, #0
    2690:	e7d7      	b.n	2642 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    2692:	24c0      	movs	r4, #192	; 0xc0
    2694:	02e4      	lsls	r4, r4, #11
    2696:	4323      	orrs	r3, r4
    2698:	e7dd      	b.n	2656 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    269a:	4c0d      	ldr	r4, [pc, #52]	; (26d0 <_system_pinmux_config+0xa4>)
    269c:	4023      	ands	r3, r4
    269e:	e7df      	b.n	2660 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    26a0:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    26a2:	040c      	lsls	r4, r1, #16
    26a4:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    26a6:	23a0      	movs	r3, #160	; 0xa0
    26a8:	05db      	lsls	r3, r3, #23
    26aa:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    26ac:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    26ae:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    26b0:	23d0      	movs	r3, #208	; 0xd0
    26b2:	061b      	lsls	r3, r3, #24
    26b4:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    26b6:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    26b8:	78d3      	ldrb	r3, [r2, #3]
    26ba:	2b00      	cmp	r3, #0
    26bc:	d103      	bne.n	26c6 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    26be:	7853      	ldrb	r3, [r2, #1]
    26c0:	3b01      	subs	r3, #1
    26c2:	2b01      	cmp	r3, #1
    26c4:	d902      	bls.n	26cc <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    26c6:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    26c8:	6181      	str	r1, [r0, #24]
    26ca:	e7f8      	b.n	26be <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    26cc:	6081      	str	r1, [r0, #8]
}
    26ce:	e7fa      	b.n	26c6 <_system_pinmux_config+0x9a>
    26d0:	fffbffff 	.word	0xfffbffff

000026d4 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    26d4:	b510      	push	{r4, lr}
    26d6:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    26d8:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    26da:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    26dc:	2900      	cmp	r1, #0
    26de:	d104      	bne.n	26ea <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    26e0:	0943      	lsrs	r3, r0, #5
    26e2:	01db      	lsls	r3, r3, #7
    26e4:	4905      	ldr	r1, [pc, #20]	; (26fc <system_pinmux_pin_set_config+0x28>)
    26e6:	468c      	mov	ip, r1
    26e8:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    26ea:	241f      	movs	r4, #31
    26ec:	4020      	ands	r0, r4
    26ee:	2101      	movs	r1, #1
    26f0:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    26f2:	0018      	movs	r0, r3
    26f4:	4b02      	ldr	r3, [pc, #8]	; (2700 <system_pinmux_pin_set_config+0x2c>)
    26f6:	4798      	blx	r3
}
    26f8:	bd10      	pop	{r4, pc}
    26fa:	46c0      	nop			; (mov r8, r8)
    26fc:	41004400 	.word	0x41004400
    2700:	0000262d 	.word	0x0000262d

00002704 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    2704:	4770      	bx	lr
	...

00002708 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    2708:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    270a:	4b05      	ldr	r3, [pc, #20]	; (2720 <system_init+0x18>)
    270c:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    270e:	4b05      	ldr	r3, [pc, #20]	; (2724 <system_init+0x1c>)
    2710:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    2712:	4b05      	ldr	r3, [pc, #20]	; (2728 <system_init+0x20>)
    2714:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    2716:	4b05      	ldr	r3, [pc, #20]	; (272c <system_init+0x24>)
    2718:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    271a:	4b05      	ldr	r3, [pc, #20]	; (2730 <system_init+0x28>)
    271c:	4798      	blx	r3
}
    271e:	bd10      	pop	{r4, pc}
    2720:	00002249 	.word	0x00002249
    2724:	00000fe1 	.word	0x00000fe1
    2728:	00002705 	.word	0x00002705
    272c:	00002705 	.word	0x00002705
    2730:	00002705 	.word	0x00002705

00002734 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    2734:	e7fe      	b.n	2734 <Dummy_Handler>
	...

00002738 <Reset_Handler>:
{
    2738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    273a:	4a2a      	ldr	r2, [pc, #168]	; (27e4 <Reset_Handler+0xac>)
    273c:	4b2a      	ldr	r3, [pc, #168]	; (27e8 <Reset_Handler+0xb0>)
    273e:	429a      	cmp	r2, r3
    2740:	d011      	beq.n	2766 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    2742:	001a      	movs	r2, r3
    2744:	4b29      	ldr	r3, [pc, #164]	; (27ec <Reset_Handler+0xb4>)
    2746:	429a      	cmp	r2, r3
    2748:	d20d      	bcs.n	2766 <Reset_Handler+0x2e>
    274a:	4a29      	ldr	r2, [pc, #164]	; (27f0 <Reset_Handler+0xb8>)
    274c:	3303      	adds	r3, #3
    274e:	1a9b      	subs	r3, r3, r2
    2750:	089b      	lsrs	r3, r3, #2
    2752:	3301      	adds	r3, #1
    2754:	009b      	lsls	r3, r3, #2
    2756:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    2758:	4823      	ldr	r0, [pc, #140]	; (27e8 <Reset_Handler+0xb0>)
    275a:	4922      	ldr	r1, [pc, #136]	; (27e4 <Reset_Handler+0xac>)
    275c:	588c      	ldr	r4, [r1, r2]
    275e:	5084      	str	r4, [r0, r2]
    2760:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    2762:	429a      	cmp	r2, r3
    2764:	d1fa      	bne.n	275c <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    2766:	4a23      	ldr	r2, [pc, #140]	; (27f4 <Reset_Handler+0xbc>)
    2768:	4b23      	ldr	r3, [pc, #140]	; (27f8 <Reset_Handler+0xc0>)
    276a:	429a      	cmp	r2, r3
    276c:	d20a      	bcs.n	2784 <Reset_Handler+0x4c>
    276e:	43d3      	mvns	r3, r2
    2770:	4921      	ldr	r1, [pc, #132]	; (27f8 <Reset_Handler+0xc0>)
    2772:	185b      	adds	r3, r3, r1
    2774:	2103      	movs	r1, #3
    2776:	438b      	bics	r3, r1
    2778:	3304      	adds	r3, #4
    277a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    277c:	2100      	movs	r1, #0
    277e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    2780:	4293      	cmp	r3, r2
    2782:	d1fc      	bne.n	277e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2784:	4a1d      	ldr	r2, [pc, #116]	; (27fc <Reset_Handler+0xc4>)
    2786:	21ff      	movs	r1, #255	; 0xff
    2788:	4b1d      	ldr	r3, [pc, #116]	; (2800 <Reset_Handler+0xc8>)
    278a:	438b      	bics	r3, r1
    278c:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    278e:	39fd      	subs	r1, #253	; 0xfd
    2790:	2390      	movs	r3, #144	; 0x90
    2792:	005b      	lsls	r3, r3, #1
    2794:	4a1b      	ldr	r2, [pc, #108]	; (2804 <Reset_Handler+0xcc>)
    2796:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    2798:	4a1b      	ldr	r2, [pc, #108]	; (2808 <Reset_Handler+0xd0>)
    279a:	78d3      	ldrb	r3, [r2, #3]
    279c:	2503      	movs	r5, #3
    279e:	43ab      	bics	r3, r5
    27a0:	2402      	movs	r4, #2
    27a2:	4323      	orrs	r3, r4
    27a4:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    27a6:	78d3      	ldrb	r3, [r2, #3]
    27a8:	270c      	movs	r7, #12
    27aa:	43bb      	bics	r3, r7
    27ac:	2608      	movs	r6, #8
    27ae:	4333      	orrs	r3, r6
    27b0:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    27b2:	4b16      	ldr	r3, [pc, #88]	; (280c <Reset_Handler+0xd4>)
    27b4:	7b98      	ldrb	r0, [r3, #14]
    27b6:	2230      	movs	r2, #48	; 0x30
    27b8:	4390      	bics	r0, r2
    27ba:	2220      	movs	r2, #32
    27bc:	4310      	orrs	r0, r2
    27be:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    27c0:	7b99      	ldrb	r1, [r3, #14]
    27c2:	43b9      	bics	r1, r7
    27c4:	4331      	orrs	r1, r6
    27c6:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    27c8:	7b9a      	ldrb	r2, [r3, #14]
    27ca:	43aa      	bics	r2, r5
    27cc:	4322      	orrs	r2, r4
    27ce:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    27d0:	4a0f      	ldr	r2, [pc, #60]	; (2810 <Reset_Handler+0xd8>)
    27d2:	6853      	ldr	r3, [r2, #4]
    27d4:	2180      	movs	r1, #128	; 0x80
    27d6:	430b      	orrs	r3, r1
    27d8:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    27da:	4b0e      	ldr	r3, [pc, #56]	; (2814 <Reset_Handler+0xdc>)
    27dc:	4798      	blx	r3
        main();
    27de:	4b0e      	ldr	r3, [pc, #56]	; (2818 <Reset_Handler+0xe0>)
    27e0:	4798      	blx	r3
    27e2:	e7fe      	b.n	27e2 <Reset_Handler+0xaa>
    27e4:	000074f8 	.word	0x000074f8
    27e8:	20000000 	.word	0x20000000
    27ec:	200001dc 	.word	0x200001dc
    27f0:	20000004 	.word	0x20000004
    27f4:	200001dc 	.word	0x200001dc
    27f8:	20000b74 	.word	0x20000b74
    27fc:	e000ed00 	.word	0xe000ed00
    2800:	00000000 	.word	0x00000000
    2804:	41007000 	.word	0x41007000
    2808:	41005000 	.word	0x41005000
    280c:	41004800 	.word	0x41004800
    2810:	41004000 	.word	0x41004000
    2814:	00003ed9 	.word	0x00003ed9
    2818:	00003ae5 	.word	0x00003ae5

0000281c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    281c:	b5f0      	push	{r4, r5, r6, r7, lr}
    281e:	46c6      	mov	lr, r8
    2820:	b500      	push	{lr}
    2822:	000c      	movs	r4, r1
    2824:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    2826:	2800      	cmp	r0, #0
    2828:	d10f      	bne.n	284a <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    282a:	2a00      	cmp	r2, #0
    282c:	dd11      	ble.n	2852 <_read+0x36>
    282e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    2830:	4e09      	ldr	r6, [pc, #36]	; (2858 <_read+0x3c>)
    2832:	4d0a      	ldr	r5, [pc, #40]	; (285c <_read+0x40>)
    2834:	6830      	ldr	r0, [r6, #0]
    2836:	0021      	movs	r1, r4
    2838:	682b      	ldr	r3, [r5, #0]
    283a:	4798      	blx	r3
		ptr++;
    283c:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    283e:	42bc      	cmp	r4, r7
    2840:	d1f8      	bne.n	2834 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    2842:	4640      	mov	r0, r8
    2844:	bc04      	pop	{r2}
    2846:	4690      	mov	r8, r2
    2848:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    284a:	2301      	movs	r3, #1
    284c:	425b      	negs	r3, r3
    284e:	4698      	mov	r8, r3
    2850:	e7f7      	b.n	2842 <_read+0x26>
	for (; len > 0; --len) {
    2852:	4680      	mov	r8, r0
    2854:	e7f5      	b.n	2842 <_read+0x26>
    2856:	46c0      	nop			; (mov r8, r8)
    2858:	20000388 	.word	0x20000388
    285c:	20000380 	.word	0x20000380

00002860 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    2860:	b5f0      	push	{r4, r5, r6, r7, lr}
    2862:	46c6      	mov	lr, r8
    2864:	b500      	push	{lr}
    2866:	000e      	movs	r6, r1
    2868:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    286a:	3801      	subs	r0, #1
    286c:	2802      	cmp	r0, #2
    286e:	d810      	bhi.n	2892 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    2870:	2a00      	cmp	r2, #0
    2872:	d011      	beq.n	2898 <_write+0x38>
    2874:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    2876:	4b0c      	ldr	r3, [pc, #48]	; (28a8 <_write+0x48>)
    2878:	4698      	mov	r8, r3
    287a:	4f0c      	ldr	r7, [pc, #48]	; (28ac <_write+0x4c>)
    287c:	4643      	mov	r3, r8
    287e:	6818      	ldr	r0, [r3, #0]
    2880:	5d31      	ldrb	r1, [r6, r4]
    2882:	683b      	ldr	r3, [r7, #0]
    2884:	4798      	blx	r3
    2886:	2800      	cmp	r0, #0
    2888:	db08      	blt.n	289c <_write+0x3c>
			return -1;
		}
		++nChars;
    288a:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    288c:	42a5      	cmp	r5, r4
    288e:	d1f5      	bne.n	287c <_write+0x1c>
    2890:	e006      	b.n	28a0 <_write+0x40>
		return -1;
    2892:	2401      	movs	r4, #1
    2894:	4264      	negs	r4, r4
    2896:	e003      	b.n	28a0 <_write+0x40>
	for (; len != 0; --len) {
    2898:	0014      	movs	r4, r2
    289a:	e001      	b.n	28a0 <_write+0x40>
			return -1;
    289c:	2401      	movs	r4, #1
    289e:	4264      	negs	r4, r4
	}
	return nChars;
}
    28a0:	0020      	movs	r0, r4
    28a2:	bc04      	pop	{r2}
    28a4:	4690      	mov	r8, r2
    28a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    28a8:	20000388 	.word	0x20000388
    28ac:	20000384 	.word	0x20000384

000028b0 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    28b0:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    28b2:	4a06      	ldr	r2, [pc, #24]	; (28cc <_sbrk+0x1c>)
    28b4:	6812      	ldr	r2, [r2, #0]
    28b6:	2a00      	cmp	r2, #0
    28b8:	d004      	beq.n	28c4 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    28ba:	4a04      	ldr	r2, [pc, #16]	; (28cc <_sbrk+0x1c>)
    28bc:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    28be:	18c3      	adds	r3, r0, r3
    28c0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    28c2:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    28c4:	4902      	ldr	r1, [pc, #8]	; (28d0 <_sbrk+0x20>)
    28c6:	4a01      	ldr	r2, [pc, #4]	; (28cc <_sbrk+0x1c>)
    28c8:	6011      	str	r1, [r2, #0]
    28ca:	e7f6      	b.n	28ba <_sbrk+0xa>
    28cc:	200002b8 	.word	0x200002b8
    28d0:	20002b78 	.word	0x20002b78

000028d4 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    28d4:	2001      	movs	r0, #1
    28d6:	4240      	negs	r0, r0
    28d8:	4770      	bx	lr

000028da <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    28da:	2380      	movs	r3, #128	; 0x80
    28dc:	019b      	lsls	r3, r3, #6
    28de:	604b      	str	r3, [r1, #4]

	return 0;
}
    28e0:	2000      	movs	r0, #0
    28e2:	4770      	bx	lr

000028e4 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    28e4:	2001      	movs	r0, #1
    28e6:	4770      	bx	lr

000028e8 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    28e8:	2000      	movs	r0, #0
    28ea:	4770      	bx	lr

000028ec <drawChar>:
uint16_t xCharPos = 0;
uint16_t yCharPos = 0;


void drawChar(uint8_t character)
{
    28ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    28ee:	46d6      	mov	lr, sl
    28f0:	464f      	mov	r7, r9
    28f2:	4646      	mov	r6, r8
    28f4:	b5c0      	push	{r6, r7, lr}
    28f6:	0004      	movs	r4, r0
	uint16_t x = xCharPos;
    28f8:	4b2a      	ldr	r3, [pc, #168]	; (29a4 <drawChar+0xb8>)
    28fa:	881b      	ldrh	r3, [r3, #0]
	uint16_t y = yCharPos;
    28fc:	4a2a      	ldr	r2, [pc, #168]	; (29a8 <drawChar+0xbc>)
    28fe:	8815      	ldrh	r5, [r2, #0]
	
	consoleDisplay[xCharPos][yCharPos] = character;
    2900:	005a      	lsls	r2, r3, #1
    2902:	18d2      	adds	r2, r2, r3
    2904:	00d2      	lsls	r2, r2, #3
    2906:	4829      	ldr	r0, [pc, #164]	; (29ac <drawChar+0xc0>)
    2908:	1882      	adds	r2, r0, r2
    290a:	5554      	strb	r4, [r2, r5]
	
	REG_PORT_OUTCLR1 = LCD_CS;
    290c:	2180      	movs	r1, #128	; 0x80
    290e:	03c9      	lsls	r1, r1, #15
    2910:	4a27      	ldr	r2, [pc, #156]	; (29b0 <drawChar+0xc4>)
    2912:	6011      	str	r1, [r2, #0]
	setXY(x*10,y*20,x*10+9,y*20+19);
    2914:	0098      	lsls	r0, r3, #2
    2916:	181b      	adds	r3, r3, r0
    2918:	005b      	lsls	r3, r3, #1
    291a:	b298      	uxth	r0, r3
    291c:	2114      	movs	r1, #20
    291e:	4369      	muls	r1, r5
    2920:	b289      	uxth	r1, r1
    2922:	000b      	movs	r3, r1
    2924:	3313      	adds	r3, #19
    2926:	b29b      	uxth	r3, r3
    2928:	0002      	movs	r2, r0
    292a:	3209      	adds	r2, #9
    292c:	b292      	uxth	r2, r2
    292e:	4d21      	ldr	r5, [pc, #132]	; (29b4 <drawChar+0xc8>)
    2930:	47a8      	blx	r5
    2932:	4a21      	ldr	r2, [pc, #132]	; (29b8 <drawChar+0xcc>)
    2934:	00a5      	lsls	r5, r4, #2
    2936:	192d      	adds	r5, r5, r4
    2938:	00ab      	lsls	r3, r5, #2
    293a:	18ed      	adds	r5, r5, r3
    293c:	1955      	adds	r5, r2, r5
    293e:	3401      	adds	r4, #1
    2940:	00a3      	lsls	r3, r4, #2
    2942:	191c      	adds	r4, r3, r4
    2944:	00a3      	lsls	r3, r4, #2
    2946:	18e4      	adds	r4, r4, r3
    2948:	4692      	mov	sl, r2
    294a:	44a2      	add	sl, r4
			{
				setPixel((fore_Color_High<<8)|fore_Color_Low);	
			}
			else
			{
				setPixel((back_Color_High<<8)|back_Color_Low);
    294c:	4b1b      	ldr	r3, [pc, #108]	; (29bc <drawChar+0xd0>)
    294e:	4699      	mov	r9, r3
    2950:	4b1b      	ldr	r3, [pc, #108]	; (29c0 <drawChar+0xd4>)
    2952:	4698      	mov	r8, r3
    2954:	4f1b      	ldr	r7, [pc, #108]	; (29c4 <drawChar+0xd8>)
				setPixel((fore_Color_High<<8)|fore_Color_Low);	
    2956:	4e1c      	ldr	r6, [pc, #112]	; (29c8 <drawChar+0xdc>)
    2958:	e019      	b.n	298e <drawChar+0xa2>
				setPixel((back_Color_High<<8)|back_Color_Low);
    295a:	464b      	mov	r3, r9
    295c:	8818      	ldrh	r0, [r3, #0]
    295e:	0200      	lsls	r0, r0, #8
    2960:	4643      	mov	r3, r8
    2962:	881b      	ldrh	r3, [r3, #0]
    2964:	4318      	orrs	r0, r3
    2966:	b280      	uxth	r0, r0
    2968:	47b8      	blx	r7
		for(int j=0;j<8;j++)
    296a:	3c01      	subs	r4, #1
    296c:	d30c      	bcc.n	2988 <drawChar+0x9c>
			if((CodePage437[character][i]&(1<<(7-j)))!=0)
    296e:	782b      	ldrb	r3, [r5, #0]
    2970:	4123      	asrs	r3, r4
    2972:	07db      	lsls	r3, r3, #31
    2974:	d5f1      	bpl.n	295a <drawChar+0x6e>
				setPixel((fore_Color_High<<8)|fore_Color_Low);	
    2976:	8830      	ldrh	r0, [r6, #0]
    2978:	0200      	lsls	r0, r0, #8
    297a:	4b14      	ldr	r3, [pc, #80]	; (29cc <drawChar+0xe0>)
    297c:	881b      	ldrh	r3, [r3, #0]
    297e:	4318      	orrs	r0, r3
    2980:	b280      	uxth	r0, r0
    2982:	4b10      	ldr	r3, [pc, #64]	; (29c4 <drawChar+0xd8>)
    2984:	4798      	blx	r3
    2986:	e7f0      	b.n	296a <drawChar+0x7e>
    2988:	3501      	adds	r5, #1
	for(uint16_t i=0; i <= 24; i++)
    298a:	4555      	cmp	r5, sl
    298c:	d001      	beq.n	2992 <drawChar+0xa6>
{
    298e:	2407      	movs	r4, #7
    2990:	e7ed      	b.n	296e <drawChar+0x82>
			}

		}
	}
	REG_PORT_OUTSET1 = LCD_CS;
    2992:	2280      	movs	r2, #128	; 0x80
    2994:	03d2      	lsls	r2, r2, #15
    2996:	4b0e      	ldr	r3, [pc, #56]	; (29d0 <drawChar+0xe4>)
    2998:	601a      	str	r2, [r3, #0]
	

}
    299a:	bc1c      	pop	{r2, r3, r4}
    299c:	4690      	mov	r8, r2
    299e:	4699      	mov	r9, r3
    29a0:	46a2      	mov	sl, r4
    29a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    29a4:	200002bc 	.word	0x200002bc
    29a8:	200002be 	.word	0x200002be
    29ac:	200003c4 	.word	0x200003c4
    29b0:	41004494 	.word	0x41004494
    29b4:	00003311 	.word	0x00003311
    29b8:	00005874 	.word	0x00005874
    29bc:	20000b4a 	.word	0x20000b4a
    29c0:	20000b44 	.word	0x20000b44
    29c4:	00003449 	.word	0x00003449
    29c8:	20000b46 	.word	0x20000b46
    29cc:	20000b48 	.word	0x20000b48
    29d0:	41004498 	.word	0x41004498

000029d4 <blinkCursor>:
	*/
	
}

void blinkCursor(void)
{
    29d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    29d6:	46d6      	mov	lr, sl
    29d8:	464f      	mov	r7, r9
    29da:	4646      	mov	r6, r8
    29dc:	b5c0      	push	{r6, r7, lr}
	uint16_t x = xCharPos;
    29de:	4b47      	ldr	r3, [pc, #284]	; (2afc <blinkCursor+0x128>)
    29e0:	881b      	ldrh	r3, [r3, #0]
	uint16_t y = yCharPos;
    29e2:	4a47      	ldr	r2, [pc, #284]	; (2b00 <blinkCursor+0x12c>)
    29e4:	8815      	ldrh	r5, [r2, #0]
	unsigned char character = consoleDisplay[x][y];
    29e6:	005a      	lsls	r2, r3, #1
    29e8:	18d2      	adds	r2, r2, r3
    29ea:	00d2      	lsls	r2, r2, #3
    29ec:	4845      	ldr	r0, [pc, #276]	; (2b04 <blinkCursor+0x130>)
    29ee:	1882      	adds	r2, r0, r2
    29f0:	5d54      	ldrb	r4, [r2, r5]
	setXY(x*10,y*20,x*10+9,y*20+19);
    29f2:	0098      	lsls	r0, r3, #2
    29f4:	181b      	adds	r3, r3, r0
    29f6:	005b      	lsls	r3, r3, #1
    29f8:	b298      	uxth	r0, r3
    29fa:	2114      	movs	r1, #20
    29fc:	4369      	muls	r1, r5
    29fe:	b289      	uxth	r1, r1
    2a00:	000b      	movs	r3, r1
    2a02:	3313      	adds	r3, #19
    2a04:	b29b      	uxth	r3, r3
    2a06:	0002      	movs	r2, r0
    2a08:	3209      	adds	r2, #9
    2a0a:	b292      	uxth	r2, r2
    2a0c:	4d3e      	ldr	r5, [pc, #248]	; (2b08 <blinkCursor+0x134>)
    2a0e:	47a8      	blx	r5
	REG_PORT_OUTCLR1 = LCD_CS;
    2a10:	2280      	movs	r2, #128	; 0x80
    2a12:	03d2      	lsls	r2, r2, #15
    2a14:	4b3d      	ldr	r3, [pc, #244]	; (2b0c <blinkCursor+0x138>)
    2a16:	601a      	str	r2, [r3, #0]
	if(cursorBlinkState)
    2a18:	4b3d      	ldr	r3, [pc, #244]	; (2b10 <blinkCursor+0x13c>)
    2a1a:	781b      	ldrb	r3, [r3, #0]
    2a1c:	2b00      	cmp	r3, #0
    2a1e:	d113      	bne.n	2a48 <blinkCursor+0x74>
    2a20:	4a3c      	ldr	r2, [pc, #240]	; (2b14 <blinkCursor+0x140>)
    2a22:	00a5      	lsls	r5, r4, #2
    2a24:	192d      	adds	r5, r5, r4
    2a26:	00ab      	lsls	r3, r5, #2
    2a28:	18ed      	adds	r5, r5, r3
    2a2a:	1955      	adds	r5, r2, r5
    2a2c:	3401      	adds	r4, #1
    2a2e:	00a3      	lsls	r3, r4, #2
    2a30:	191c      	adds	r4, r3, r4
    2a32:	00a3      	lsls	r3, r4, #2
    2a34:	18e4      	adds	r4, r4, r3
    2a36:	4692      	mov	sl, r2
    2a38:	44a2      	add	sl, r4
				{
					setPixel((fore_Color_High<<8)|fore_Color_Low);
				}
				else
				{
					setPixel((back_Color_High<<8)|back_Color_Low);
    2a3a:	4b37      	ldr	r3, [pc, #220]	; (2b18 <blinkCursor+0x144>)
    2a3c:	4699      	mov	r9, r3
    2a3e:	4b37      	ldr	r3, [pc, #220]	; (2b1c <blinkCursor+0x148>)
    2a40:	4698      	mov	r8, r3
    2a42:	4f37      	ldr	r7, [pc, #220]	; (2b20 <blinkCursor+0x14c>)
					setPixel((fore_Color_High<<8)|fore_Color_Low);
    2a44:	4e37      	ldr	r6, [pc, #220]	; (2b24 <blinkCursor+0x150>)
    2a46:	e049      	b.n	2adc <blinkCursor+0x108>
    2a48:	4a32      	ldr	r2, [pc, #200]	; (2b14 <blinkCursor+0x140>)
    2a4a:	00a5      	lsls	r5, r4, #2
    2a4c:	192d      	adds	r5, r5, r4
    2a4e:	00ab      	lsls	r3, r5, #2
    2a50:	18ed      	adds	r5, r5, r3
    2a52:	1955      	adds	r5, r2, r5
    2a54:	3401      	adds	r4, #1
    2a56:	00a3      	lsls	r3, r4, #2
    2a58:	191c      	adds	r4, r3, r4
    2a5a:	00a3      	lsls	r3, r4, #2
    2a5c:	18e4      	adds	r4, r4, r3
    2a5e:	4692      	mov	sl, r2
    2a60:	44a2      	add	sl, r4
					setPixel((fore_Color_High<<8)|fore_Color_Low);
    2a62:	4b30      	ldr	r3, [pc, #192]	; (2b24 <blinkCursor+0x150>)
    2a64:	4699      	mov	r9, r3
    2a66:	4b30      	ldr	r3, [pc, #192]	; (2b28 <blinkCursor+0x154>)
    2a68:	4698      	mov	r8, r3
    2a6a:	4f2d      	ldr	r7, [pc, #180]	; (2b20 <blinkCursor+0x14c>)
					setPixel((back_Color_High<<8)|back_Color_Low);
    2a6c:	4e2a      	ldr	r6, [pc, #168]	; (2b18 <blinkCursor+0x144>)
    2a6e:	e019      	b.n	2aa4 <blinkCursor+0xd0>
					setPixel((fore_Color_High<<8)|fore_Color_Low);
    2a70:	464b      	mov	r3, r9
    2a72:	8818      	ldrh	r0, [r3, #0]
    2a74:	0200      	lsls	r0, r0, #8
    2a76:	4643      	mov	r3, r8
    2a78:	881b      	ldrh	r3, [r3, #0]
    2a7a:	4318      	orrs	r0, r3
    2a7c:	b280      	uxth	r0, r0
    2a7e:	47b8      	blx	r7
			for(int j=0;j<8;j++)
    2a80:	3c01      	subs	r4, #1
    2a82:	d30c      	bcc.n	2a9e <blinkCursor+0xca>
				if((CodePage437[character][i]&(1<<(7-j)))!=0)
    2a84:	782b      	ldrb	r3, [r5, #0]
    2a86:	4123      	asrs	r3, r4
    2a88:	07db      	lsls	r3, r3, #31
    2a8a:	d5f1      	bpl.n	2a70 <blinkCursor+0x9c>
					setPixel((back_Color_High<<8)|back_Color_Low);
    2a8c:	8830      	ldrh	r0, [r6, #0]
    2a8e:	0200      	lsls	r0, r0, #8
    2a90:	4b22      	ldr	r3, [pc, #136]	; (2b1c <blinkCursor+0x148>)
    2a92:	881b      	ldrh	r3, [r3, #0]
    2a94:	4318      	orrs	r0, r3
    2a96:	b280      	uxth	r0, r0
    2a98:	4b21      	ldr	r3, [pc, #132]	; (2b20 <blinkCursor+0x14c>)
    2a9a:	4798      	blx	r3
    2a9c:	e7f0      	b.n	2a80 <blinkCursor+0xac>
    2a9e:	3501      	adds	r5, #1
		for(uint16_t i=0; i <= 24; i++)
    2aa0:	4555      	cmp	r5, sl
    2aa2:	d01d      	beq.n	2ae0 <blinkCursor+0x10c>
{
    2aa4:	2407      	movs	r4, #7
    2aa6:	e7ed      	b.n	2a84 <blinkCursor+0xb0>
					setPixel((back_Color_High<<8)|back_Color_Low);
    2aa8:	464b      	mov	r3, r9
    2aaa:	8818      	ldrh	r0, [r3, #0]
    2aac:	0200      	lsls	r0, r0, #8
    2aae:	4643      	mov	r3, r8
    2ab0:	881b      	ldrh	r3, [r3, #0]
    2ab2:	4318      	orrs	r0, r3
    2ab4:	b280      	uxth	r0, r0
    2ab6:	47b8      	blx	r7
			for(int j=0;j<8;j++)
    2ab8:	3c01      	subs	r4, #1
    2aba:	d30c      	bcc.n	2ad6 <blinkCursor+0x102>
				if((CodePage437[character][i]&(1<<(7-j)))!=0)
    2abc:	782b      	ldrb	r3, [r5, #0]
    2abe:	4123      	asrs	r3, r4
    2ac0:	07db      	lsls	r3, r3, #31
    2ac2:	d5f1      	bpl.n	2aa8 <blinkCursor+0xd4>
					setPixel((fore_Color_High<<8)|fore_Color_Low);
    2ac4:	8830      	ldrh	r0, [r6, #0]
    2ac6:	0200      	lsls	r0, r0, #8
    2ac8:	4b17      	ldr	r3, [pc, #92]	; (2b28 <blinkCursor+0x154>)
    2aca:	881b      	ldrh	r3, [r3, #0]
    2acc:	4318      	orrs	r0, r3
    2ace:	b280      	uxth	r0, r0
    2ad0:	4b13      	ldr	r3, [pc, #76]	; (2b20 <blinkCursor+0x14c>)
    2ad2:	4798      	blx	r3
    2ad4:	e7f0      	b.n	2ab8 <blinkCursor+0xe4>
    2ad6:	3501      	adds	r5, #1
		for(uint16_t i=0; i <= 24; i++)
    2ad8:	4555      	cmp	r5, sl
    2ada:	d001      	beq.n	2ae0 <blinkCursor+0x10c>
{
    2adc:	2407      	movs	r4, #7
    2ade:	e7ed      	b.n	2abc <blinkCursor+0xe8>
				}
			}
		}
	}

	REG_PORT_OUTSET1 = LCD_CS;
    2ae0:	2280      	movs	r2, #128	; 0x80
    2ae2:	03d2      	lsls	r2, r2, #15
    2ae4:	4b11      	ldr	r3, [pc, #68]	; (2b2c <blinkCursor+0x158>)
    2ae6:	601a      	str	r2, [r3, #0]
	
	//invert cursorBlinkState
	cursorBlinkState = !cursorBlinkState;
    2ae8:	4a09      	ldr	r2, [pc, #36]	; (2b10 <blinkCursor+0x13c>)
    2aea:	7813      	ldrb	r3, [r2, #0]
    2aec:	2101      	movs	r1, #1
    2aee:	404b      	eors	r3, r1
    2af0:	7013      	strb	r3, [r2, #0]
	
}
    2af2:	bc1c      	pop	{r2, r3, r4}
    2af4:	4690      	mov	r8, r2
    2af6:	4699      	mov	r9, r3
    2af8:	46a2      	mov	sl, r4
    2afa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2afc:	200002bc 	.word	0x200002bc
    2b00:	200002be 	.word	0x200002be
    2b04:	200003c4 	.word	0x200003c4
    2b08:	00003311 	.word	0x00003311
    2b0c:	41004494 	.word	0x41004494
    2b10:	20000024 	.word	0x20000024
    2b14:	00005874 	.word	0x00005874
    2b18:	20000b4a 	.word	0x20000b4a
    2b1c:	20000b44 	.word	0x20000b44
    2b20:	00003449 	.word	0x00003449
    2b24:	20000b46 	.word	0x20000b46
    2b28:	20000b48 	.word	0x20000b48
    2b2c:	41004498 	.word	0x41004498

00002b30 <newLine>:
{
    2b30:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b32:	46de      	mov	lr, fp
    2b34:	4657      	mov	r7, sl
    2b36:	464e      	mov	r6, r9
    2b38:	4645      	mov	r5, r8
    2b3a:	b5e0      	push	{r5, r6, r7, lr}
    2b3c:	b083      	sub	sp, #12
	int tempCursorx = xCharPos;
    2b3e:	4b24      	ldr	r3, [pc, #144]	; (2bd0 <newLine+0xa0>)
    2b40:	881b      	ldrh	r3, [r3, #0]
    2b42:	469b      	mov	fp, r3
	int tempCursory = yCharPos;
    2b44:	4b23      	ldr	r3, [pc, #140]	; (2bd4 <newLine+0xa4>)
    2b46:	881b      	ldrh	r3, [r3, #0]
    2b48:	9301      	str	r3, [sp, #4]
	cursorBlinkState = true;
    2b4a:	2201      	movs	r2, #1
    2b4c:	4b22      	ldr	r3, [pc, #136]	; (2bd8 <newLine+0xa8>)
    2b4e:	701a      	strb	r2, [r3, #0]
	blinkCursor();
    2b50:	4b22      	ldr	r3, [pc, #136]	; (2bdc <newLine+0xac>)
    2b52:	4798      	blx	r3
    2b54:	4822      	ldr	r0, [pc, #136]	; (2be0 <newLine+0xb0>)
    2b56:	0004      	movs	r4, r0
    2b58:	3418      	adds	r4, #24
    2b5a:	23f0      	movs	r3, #240	; 0xf0
    2b5c:	00db      	lsls	r3, r3, #3
    2b5e:	18c1      	adds	r1, r0, r3
{
    2b60:	0003      	movs	r3, r0
			consoleDisplay[i][j-1] = consoleDisplay[i][j];
    2b62:	785a      	ldrb	r2, [r3, #1]
    2b64:	701a      	strb	r2, [r3, #0]
    2b66:	3318      	adds	r3, #24
		for(int i = 0 ; i < 80 ; i++)
    2b68:	428b      	cmp	r3, r1
    2b6a:	d1fa      	bne.n	2b62 <newLine+0x32>
    2b6c:	3001      	adds	r0, #1
	for(int j = 1 ; j <= 24 ; j++)
    2b6e:	42a0      	cmp	r0, r4
    2b70:	d1f3      	bne.n	2b5a <newLine+0x2a>
    2b72:	4b1c      	ldr	r3, [pc, #112]	; (2be4 <newLine+0xb4>)
    2b74:	22f0      	movs	r2, #240	; 0xf0
    2b76:	00d2      	lsls	r2, r2, #3
    2b78:	1899      	adds	r1, r3, r2
		consoleDisplay[k][23] = 0x20;
    2b7a:	2220      	movs	r2, #32
    2b7c:	701a      	strb	r2, [r3, #0]
    2b7e:	3318      	adds	r3, #24
	for(int k = 0 ; k < 80 ; k ++)
    2b80:	428b      	cmp	r3, r1
    2b82:	d1fb      	bne.n	2b7c <newLine+0x4c>
    2b84:	2600      	movs	r6, #0
    2b86:	4b16      	ldr	r3, [pc, #88]	; (2be0 <newLine+0xb0>)
    2b88:	469a      	mov	sl, r3
			xCharPos = i;
    2b8a:	4b11      	ldr	r3, [pc, #68]	; (2bd0 <newLine+0xa0>)
    2b8c:	4699      	mov	r9, r3
			yCharPos = j;
    2b8e:	4b11      	ldr	r3, [pc, #68]	; (2bd4 <newLine+0xa4>)
    2b90:	4698      	mov	r8, r3
    2b92:	4653      	mov	r3, sl
    2b94:	18f5      	adds	r5, r6, r3
{
    2b96:	2400      	movs	r4, #0
			drawChar(consoleDisplay[i][j]);
    2b98:	4f13      	ldr	r7, [pc, #76]	; (2be8 <newLine+0xb8>)
			xCharPos = i;
    2b9a:	464b      	mov	r3, r9
    2b9c:	801c      	strh	r4, [r3, #0]
			yCharPos = j;
    2b9e:	4643      	mov	r3, r8
    2ba0:	801e      	strh	r6, [r3, #0]
			drawChar(consoleDisplay[i][j]);
    2ba2:	7828      	ldrb	r0, [r5, #0]
    2ba4:	47b8      	blx	r7
		for(int i = 0 ; i < 80 ; i++)
    2ba6:	3401      	adds	r4, #1
    2ba8:	3518      	adds	r5, #24
    2baa:	2c50      	cmp	r4, #80	; 0x50
    2bac:	d1f5      	bne.n	2b9a <newLine+0x6a>
	for(int j = 0 ; j < 24 ; j++)
    2bae:	3601      	adds	r6, #1
    2bb0:	2e18      	cmp	r6, #24
    2bb2:	d1ee      	bne.n	2b92 <newLine+0x62>
	xCharPos = tempCursorx;
    2bb4:	4b06      	ldr	r3, [pc, #24]	; (2bd0 <newLine+0xa0>)
    2bb6:	465a      	mov	r2, fp
    2bb8:	801a      	strh	r2, [r3, #0]
	yCharPos = tempCursory;
    2bba:	4b06      	ldr	r3, [pc, #24]	; (2bd4 <newLine+0xa4>)
    2bbc:	466a      	mov	r2, sp
    2bbe:	8892      	ldrh	r2, [r2, #4]
    2bc0:	801a      	strh	r2, [r3, #0]
}
    2bc2:	b003      	add	sp, #12
    2bc4:	bc3c      	pop	{r2, r3, r4, r5}
    2bc6:	4690      	mov	r8, r2
    2bc8:	4699      	mov	r9, r3
    2bca:	46a2      	mov	sl, r4
    2bcc:	46ab      	mov	fp, r5
    2bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2bd0:	200002bc 	.word	0x200002bc
    2bd4:	200002be 	.word	0x200002be
    2bd8:	20000024 	.word	0x20000024
    2bdc:	000029d5 	.word	0x000029d5
    2be0:	200003c4 	.word	0x200003c4
    2be4:	200003db 	.word	0x200003db
    2be8:	000028ed 	.word	0x000028ed

00002bec <writeString>:

void writeString(const char str[])
{
    2bec:	b5f0      	push	{r4, r5, r6, r7, lr}
    2bee:	46c6      	mov	lr, r8
    2bf0:	b500      	push	{lr}
    2bf2:	0005      	movs	r5, r0
	int length = strlen(str);
    2bf4:	4b0c      	ldr	r3, [pc, #48]	; (2c28 <writeString+0x3c>)
    2bf6:	4798      	blx	r3
	for(int i = 0; i < length; i++)
    2bf8:	2800      	cmp	r0, #0
    2bfa:	dd11      	ble.n	2c20 <writeString+0x34>
    2bfc:	002c      	movs	r4, r5
    2bfe:	182d      	adds	r5, r5, r0
	{
		drawChar(str[i]);
    2c00:	4f0a      	ldr	r7, [pc, #40]	; (2c2c <writeString+0x40>)
		if(xCharPos <= 80)
    2c02:	4e0b      	ldr	r6, [pc, #44]	; (2c30 <writeString+0x44>)
		xCharPos++;
    2c04:	46b0      	mov	r8, r6
    2c06:	e002      	b.n	2c0e <writeString+0x22>
    2c08:	3401      	adds	r4, #1
	for(int i = 0; i < length; i++)
    2c0a:	42ac      	cmp	r4, r5
    2c0c:	d008      	beq.n	2c20 <writeString+0x34>
		drawChar(str[i]);
    2c0e:	7820      	ldrb	r0, [r4, #0]
    2c10:	47b8      	blx	r7
		if(xCharPos <= 80)
    2c12:	8833      	ldrh	r3, [r6, #0]
    2c14:	2b50      	cmp	r3, #80	; 0x50
    2c16:	d8f7      	bhi.n	2c08 <writeString+0x1c>
		xCharPos++;
    2c18:	3301      	adds	r3, #1
    2c1a:	4642      	mov	r2, r8
    2c1c:	8013      	strh	r3, [r2, #0]
    2c1e:	e7f3      	b.n	2c08 <writeString+0x1c>
	}
}
    2c20:	bc04      	pop	{r2}
    2c22:	4690      	mov	r8, r2
    2c24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c26:	46c0      	nop			; (mov r8, r8)
    2c28:	00004369 	.word	0x00004369
    2c2c:	000028ed 	.word	0x000028ed
    2c30:	200002bc 	.word	0x200002bc

00002c34 <nullifyConsole>:

void nullifyConsole(void)
{
    2c34:	4b08      	ldr	r3, [pc, #32]	; (2c58 <nullifyConsole+0x24>)
    2c36:	22f0      	movs	r2, #240	; 0xf0
    2c38:	00d2      	lsls	r2, r2, #3
    2c3a:	1898      	adds	r0, r3, r2
	for(int i = 0 ; i < 80 ; i++)
	{
		for(int j = 0 ; j < 24 ; j++)
		{
			consoleDisplay[i][j] = 0x00;
    2c3c:	2100      	movs	r1, #0
    2c3e:	e002      	b.n	2c46 <nullifyConsole+0x12>
    2c40:	0013      	movs	r3, r2
	for(int i = 0 ; i < 80 ; i++)
    2c42:	4290      	cmp	r0, r2
    2c44:	d006      	beq.n	2c54 <nullifyConsole+0x20>
    2c46:	001a      	movs	r2, r3
    2c48:	3218      	adds	r2, #24
			consoleDisplay[i][j] = 0x00;
    2c4a:	7019      	strb	r1, [r3, #0]
    2c4c:	3301      	adds	r3, #1
		for(int j = 0 ; j < 24 ; j++)
    2c4e:	4293      	cmp	r3, r2
    2c50:	d1fb      	bne.n	2c4a <nullifyConsole+0x16>
    2c52:	e7f5      	b.n	2c40 <nullifyConsole+0xc>
		}
	}
}
    2c54:	4770      	bx	lr
    2c56:	46c0      	nop			; (mov r8, r8)
    2c58:	200003c4 	.word	0x200003c4

00002c5c <scanCodesContains>:

bool scanCodesContains(int scanCode)
{
	for(int i = 0 ; i < 70 ; i++)
	{
		if(scanCodes[i] == scanCode)
    2c5c:	4b09      	ldr	r3, [pc, #36]	; (2c84 <scanCodesContains+0x28>)
    2c5e:	681b      	ldr	r3, [r3, #0]
    2c60:	4298      	cmp	r0, r3
    2c62:	d00b      	beq.n	2c7c <scanCodesContains+0x20>
    2c64:	4a07      	ldr	r2, [pc, #28]	; (2c84 <scanCodesContains+0x28>)
    2c66:	1d13      	adds	r3, r2, #4
    2c68:	3219      	adds	r2, #25
    2c6a:	32ff      	adds	r2, #255	; 0xff
    2c6c:	6819      	ldr	r1, [r3, #0]
    2c6e:	4281      	cmp	r1, r0
    2c70:	d006      	beq.n	2c80 <scanCodesContains+0x24>
    2c72:	3304      	adds	r3, #4
	for(int i = 0 ; i < 70 ; i++)
    2c74:	4293      	cmp	r3, r2
    2c76:	d1f9      	bne.n	2c6c <scanCodesContains+0x10>
		{
			return true;
		}
	}
	return false;
    2c78:	2000      	movs	r0, #0
    2c7a:	e002      	b.n	2c82 <scanCodesContains+0x26>
			return true;
    2c7c:	2001      	movs	r0, #1
    2c7e:	e000      	b.n	2c82 <scanCodesContains+0x26>
    2c80:	2001      	movs	r0, #1
}
    2c82:	4770      	bx	lr
    2c84:	20000050 	.word	0x20000050

00002c88 <keyDown>:

bool keyDown(int scancode)
{
	for(int i = 0 ; i < 20 ; i++)
	{
		if(keyDownBuffer[i] == scancode)
    2c88:	4b09      	ldr	r3, [pc, #36]	; (2cb0 <keyDown+0x28>)
    2c8a:	781b      	ldrb	r3, [r3, #0]
    2c8c:	4298      	cmp	r0, r3
    2c8e:	d00a      	beq.n	2ca6 <keyDown+0x1e>
    2c90:	4907      	ldr	r1, [pc, #28]	; (2cb0 <keyDown+0x28>)
    2c92:	1c4b      	adds	r3, r1, #1
    2c94:	3114      	adds	r1, #20
    2c96:	781a      	ldrb	r2, [r3, #0]
    2c98:	4282      	cmp	r2, r0
    2c9a:	d006      	beq.n	2caa <keyDown+0x22>
    2c9c:	3301      	adds	r3, #1
	for(int i = 0 ; i < 20 ; i++)
    2c9e:	428b      	cmp	r3, r1
    2ca0:	d1f9      	bne.n	2c96 <keyDown+0xe>
		{
			return true;
		}	
	}
	return false;
    2ca2:	2000      	movs	r0, #0
}
    2ca4:	4770      	bx	lr
			return true;
    2ca6:	2001      	movs	r0, #1
    2ca8:	e7fc      	b.n	2ca4 <keyDown+0x1c>
    2caa:	2001      	movs	r0, #1
    2cac:	e7fa      	b.n	2ca4 <keyDown+0x1c>
    2cae:	46c0      	nop			; (mov r8, r8)
    2cb0:	20000028 	.word	0x20000028

00002cb4 <printKeyboardBuffer>:
{
    2cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2cb6:	46d6      	mov	lr, sl
    2cb8:	464f      	mov	r7, r9
    2cba:	4646      	mov	r6, r8
    2cbc:	b5c0      	push	{r6, r7, lr}
    2cbe:	b0cc      	sub	sp, #304	; 0x130
	unsigned char noCase[] =
    2cc0:	4dca      	ldr	r5, [pc, #808]	; (2fec <printKeyboardBuffer+0x338>)
    2cc2:	2246      	movs	r2, #70	; 0x46
    2cc4:	0029      	movs	r1, r5
    2cc6:	a83a      	add	r0, sp, #232	; 0xe8
    2cc8:	4cc9      	ldr	r4, [pc, #804]	; (2ff0 <printKeyboardBuffer+0x33c>)
    2cca:	47a0      	blx	r4
	unsigned char shiftCase[] =
    2ccc:	0029      	movs	r1, r5
    2cce:	3148      	adds	r1, #72	; 0x48
    2cd0:	2246      	movs	r2, #70	; 0x46
    2cd2:	a828      	add	r0, sp, #160	; 0xa0
    2cd4:	47a0      	blx	r4
	unsigned char capsLockCase[] =
    2cd6:	4dc7      	ldr	r5, [pc, #796]	; (2ff4 <printKeyboardBuffer+0x340>)
    2cd8:	0029      	movs	r1, r5
    2cda:	3110      	adds	r1, #16
    2cdc:	2246      	movs	r2, #70	; 0x46
    2cde:	a816      	add	r0, sp, #88	; 0x58
    2ce0:	47a0      	blx	r4
	unsigned char controlCase[] =
    2ce2:	0029      	movs	r1, r5
    2ce4:	3158      	adds	r1, #88	; 0x58
    2ce6:	2246      	movs	r2, #70	; 0x46
    2ce8:	a804      	add	r0, sp, #16
    2cea:	47a0      	blx	r4
    2cec:	4fc2      	ldr	r7, [pc, #776]	; (2ff8 <printKeyboardBuffer+0x344>)
    2cee:	003c      	movs	r4, r7
    2cf0:	3414      	adds	r4, #20
    2cf2:	003d      	movs	r5, r7
	bool controled = false;
    2cf4:	2300      	movs	r3, #0
    2cf6:	9303      	str	r3, [sp, #12]
	bool shifted = false;
    2cf8:	9302      	str	r3, [sp, #8]
			controled = true;
    2cfa:	2201      	movs	r2, #1
    2cfc:	e004      	b.n	2d08 <printKeyboardBuffer+0x54>
		if(scanCodeBuffer[i] == 22)
    2cfe:	2916      	cmp	r1, #22
    2d00:	d011      	beq.n	2d26 <printKeyboardBuffer+0x72>
    2d02:	3501      	adds	r5, #1
	for(int i=0; i<20; i++)
    2d04:	42a5      	cmp	r5, r4
    2d06:	d010      	beq.n	2d2a <printKeyboardBuffer+0x76>
		if((scanCodeBuffer[i] == 13) | (scanCodeBuffer[i] == 49))
    2d08:	7829      	ldrb	r1, [r5, #0]
    2d0a:	000b      	movs	r3, r1
    2d0c:	3b0d      	subs	r3, #13
    2d0e:	425e      	negs	r6, r3
    2d10:	415e      	adcs	r6, r3
    2d12:	46b4      	mov	ip, r6
    2d14:	0008      	movs	r0, r1
    2d16:	3831      	subs	r0, #49	; 0x31
    2d18:	4243      	negs	r3, r0
    2d1a:	4143      	adcs	r3, r0
    2d1c:	4660      	mov	r0, ip
    2d1e:	4318      	orrs	r0, r3
    2d20:	d0ed      	beq.n	2cfe <printKeyboardBuffer+0x4a>
			shifted = true;
    2d22:	9002      	str	r0, [sp, #8]
    2d24:	e7eb      	b.n	2cfe <printKeyboardBuffer+0x4a>
			controled = true;
    2d26:	9203      	str	r2, [sp, #12]
    2d28:	e7eb      	b.n	2d02 <printKeyboardBuffer+0x4e>
    2d2a:	4eb4      	ldr	r6, [pc, #720]	; (2ffc <printKeyboardBuffer+0x348>)
	for(int i=0; i<20; i++)
    2d2c:	003c      	movs	r4, r7
		if(!keyDown(scanCodeBuffer[i]))
    2d2e:	4bb4      	ldr	r3, [pc, #720]	; (3000 <printKeyboardBuffer+0x34c>)
    2d30:	469a      	mov	sl, r3
    2d32:	e00b      	b.n	2d4c <printKeyboardBuffer+0x98>
				sendChar(0x1B);
    2d34:	301b      	adds	r0, #27
    2d36:	4bb3      	ldr	r3, [pc, #716]	; (3004 <printKeyboardBuffer+0x350>)
    2d38:	4798      	blx	r3
				if(localEcho)
    2d3a:	4bb3      	ldr	r3, [pc, #716]	; (3008 <printKeyboardBuffer+0x354>)
    2d3c:	781b      	ldrb	r3, [r3, #0]
    2d3e:	2b00      	cmp	r3, #0
    2d40:	d14a      	bne.n	2dd8 <printKeyboardBuffer+0x124>
    2d42:	3401      	adds	r4, #1
    2d44:	3601      	adds	r6, #1
	for(int i = 0 ; i < 20 ; i++)
    2d46:	42ac      	cmp	r4, r5
    2d48:	d100      	bne.n	2d4c <printKeyboardBuffer+0x98>
    2d4a:	e144      	b.n	2fd6 <printKeyboardBuffer+0x322>
    2d4c:	9401      	str	r4, [sp, #4]
		if(!keyDown(scanCodeBuffer[i]))
    2d4e:	7823      	ldrb	r3, [r4, #0]
    2d50:	4698      	mov	r8, r3
    2d52:	0018      	movs	r0, r3
    2d54:	47d0      	blx	sl
    2d56:	2800      	cmp	r0, #0
    2d58:	d1f3      	bne.n	2d42 <printKeyboardBuffer+0x8e>
			keyDownBuffer[i] = scanCodeBuffer[i];
    2d5a:	4643      	mov	r3, r8
    2d5c:	7033      	strb	r3, [r6, #0]
			if(scanCodeBuffer[i] == 0x00)  //this is escape
    2d5e:	4643      	mov	r3, r8
    2d60:	2b00      	cmp	r3, #0
    2d62:	d0e7      	beq.n	2d34 <printKeyboardBuffer+0x80>
			else if(scanCodeBuffer[i] == 0x01)	//setup button, do something weird here
    2d64:	4643      	mov	r3, r8
    2d66:	2b01      	cmp	r3, #1
    2d68:	d0eb      	beq.n	2d42 <printKeyboardBuffer+0x8e>
			else if(scanCodeBuffer[i] == 67)		//Break key, set by break enable in settings
    2d6a:	2b43      	cmp	r3, #67	; 0x43
    2d6c:	d03a      	beq.n	2de4 <printKeyboardBuffer+0x130>
			else if(scanCodeBuffer[i] == 58)   //Return key
    2d6e:	4643      	mov	r3, r8
    2d70:	2b3a      	cmp	r3, #58	; 0x3a
    2d72:	d03f      	beq.n	2df4 <printKeyboardBuffer+0x140>
			else if(scanCodeBuffer[i] == 12)		//caps lock
    2d74:	4643      	mov	r3, r8
    2d76:	2b0c      	cmp	r3, #12
    2d78:	d078      	beq.n	2e6c <printKeyboardBuffer+0x1b8>
			else if(scanCodeBuffer[i] == 3)			//scroll lock
    2d7a:	4643      	mov	r3, r8
    2d7c:	2b03      	cmp	r3, #3
    2d7e:	d07b      	beq.n	2e78 <printKeyboardBuffer+0x1c4>
			else if(scanCodeBuffer[i] == 35) //left
    2d80:	4643      	mov	r3, r8
    2d82:	2b23      	cmp	r3, #35	; 0x23
    2d84:	d07e      	beq.n	2e84 <printKeyboardBuffer+0x1d0>
			else if(scanCodeBuffer[i]  == 45)	//down
    2d86:	4643      	mov	r3, r8
    2d88:	2b2d      	cmp	r3, #45	; 0x2d
    2d8a:	d100      	bne.n	2d8e <printKeyboardBuffer+0xda>
    2d8c:	e097      	b.n	2ebe <printKeyboardBuffer+0x20a>
			else if(scanCodeBuffer[i]  == 55)	//up
    2d8e:	4643      	mov	r3, r8
    2d90:	2b37      	cmp	r3, #55	; 0x37
    2d92:	d100      	bne.n	2d96 <printKeyboardBuffer+0xe2>
    2d94:	e0b0      	b.n	2ef8 <printKeyboardBuffer+0x244>
			else if(scanCodeBuffer[i]  == 65)	//right
    2d96:	4643      	mov	r3, r8
    2d98:	2b41      	cmp	r3, #65	; 0x41
    2d9a:	d100      	bne.n	2d9e <printKeyboardBuffer+0xea>
    2d9c:	e0c9      	b.n	2f32 <printKeyboardBuffer+0x27e>
				if(controled)
    2d9e:	9b03      	ldr	r3, [sp, #12]
    2da0:	2b00      	cmp	r3, #0
    2da2:	d000      	beq.n	2da6 <printKeyboardBuffer+0xf2>
    2da4:	e0e2      	b.n	2f6c <printKeyboardBuffer+0x2b8>
				else if(capsLock)
    2da6:	4b99      	ldr	r3, [pc, #612]	; (300c <printKeyboardBuffer+0x358>)
    2da8:	781b      	ldrb	r3, [r3, #0]
    2daa:	2b00      	cmp	r3, #0
    2dac:	d000      	beq.n	2db0 <printKeyboardBuffer+0xfc>
    2dae:	e0f0      	b.n	2f92 <printKeyboardBuffer+0x2de>
				else if(shifted)
    2db0:	9b02      	ldr	r3, [sp, #8]
    2db2:	2b00      	cmp	r3, #0
    2db4:	d100      	bne.n	2db8 <printKeyboardBuffer+0x104>
    2db6:	e0fd      	b.n	2fb4 <printKeyboardBuffer+0x300>
					sendChar(shiftCase[scanCodeBuffer[i]]);
    2db8:	ab28      	add	r3, sp, #160	; 0xa0
    2dba:	4642      	mov	r2, r8
    2dbc:	5c98      	ldrb	r0, [r3, r2]
    2dbe:	4b91      	ldr	r3, [pc, #580]	; (3004 <printKeyboardBuffer+0x350>)
    2dc0:	4798      	blx	r3
					if(localEcho)
    2dc2:	4b91      	ldr	r3, [pc, #580]	; (3008 <printKeyboardBuffer+0x354>)
    2dc4:	781b      	ldrb	r3, [r3, #0]
    2dc6:	2b00      	cmp	r3, #0
    2dc8:	d0bb      	beq.n	2d42 <printKeyboardBuffer+0x8e>
						parseChar(shiftCase[scanCodeBuffer[i]]);
    2dca:	9b01      	ldr	r3, [sp, #4]
    2dcc:	781b      	ldrb	r3, [r3, #0]
    2dce:	aa28      	add	r2, sp, #160	; 0xa0
    2dd0:	5cd0      	ldrb	r0, [r2, r3]
    2dd2:	4b8f      	ldr	r3, [pc, #572]	; (3010 <printKeyboardBuffer+0x35c>)
    2dd4:	4798      	blx	r3
    2dd6:	e7b4      	b.n	2d42 <printKeyboardBuffer+0x8e>
					ring_put(ouroboros,0x1B);
    2dd8:	4b8e      	ldr	r3, [pc, #568]	; (3014 <printKeyboardBuffer+0x360>)
    2dda:	6818      	ldr	r0, [r3, #0]
    2ddc:	211b      	movs	r1, #27
    2dde:	4b8e      	ldr	r3, [pc, #568]	; (3018 <printKeyboardBuffer+0x364>)
    2de0:	4798      	blx	r3
    2de2:	e7ae      	b.n	2d42 <printKeyboardBuffer+0x8e>
				if(breakEnable)
    2de4:	4b8d      	ldr	r3, [pc, #564]	; (301c <printKeyboardBuffer+0x368>)
    2de6:	781b      	ldrb	r3, [r3, #0]
    2de8:	2b00      	cmp	r3, #0
    2dea:	d0aa      	beq.n	2d42 <printKeyboardBuffer+0x8e>
					sendChar(0x00);
    2dec:	2000      	movs	r0, #0
    2dee:	4b85      	ldr	r3, [pc, #532]	; (3004 <printKeyboardBuffer+0x350>)
    2df0:	4798      	blx	r3
    2df2:	e7a6      	b.n	2d42 <printKeyboardBuffer+0x8e>
				if(lineFeedNewLine == 1)  //This is Windows; CRLF
    2df4:	4b8a      	ldr	r3, [pc, #552]	; (3020 <printKeyboardBuffer+0x36c>)
    2df6:	681b      	ldr	r3, [r3, #0]
    2df8:	2b01      	cmp	r3, #1
    2dfa:	d014      	beq.n	2e26 <printKeyboardBuffer+0x172>
				if(lineFeedNewLine == 2)  //This is Unix, sends LF
    2dfc:	4b88      	ldr	r3, [pc, #544]	; (3020 <printKeyboardBuffer+0x36c>)
    2dfe:	681b      	ldr	r3, [r3, #0]
    2e00:	2b02      	cmp	r3, #2
    2e02:	d026      	beq.n	2e52 <printKeyboardBuffer+0x19e>
				if(lineFeedNewLine == 3)  //This is classic mac, sends CR
    2e04:	4b86      	ldr	r3, [pc, #536]	; (3020 <printKeyboardBuffer+0x36c>)
    2e06:	681b      	ldr	r3, [r3, #0]
    2e08:	2b03      	cmp	r3, #3
    2e0a:	d19a      	bne.n	2d42 <printKeyboardBuffer+0x8e>
					sendChar(0x0D);
    2e0c:	200d      	movs	r0, #13
    2e0e:	4b7d      	ldr	r3, [pc, #500]	; (3004 <printKeyboardBuffer+0x350>)
    2e10:	4798      	blx	r3
					if(localEcho)
    2e12:	4b7d      	ldr	r3, [pc, #500]	; (3008 <printKeyboardBuffer+0x354>)
    2e14:	781b      	ldrb	r3, [r3, #0]
    2e16:	2b00      	cmp	r3, #0
    2e18:	d093      	beq.n	2d42 <printKeyboardBuffer+0x8e>
						ring_put(ouroboros, 0x0D);
    2e1a:	4b7e      	ldr	r3, [pc, #504]	; (3014 <printKeyboardBuffer+0x360>)
    2e1c:	6818      	ldr	r0, [r3, #0]
    2e1e:	210d      	movs	r1, #13
    2e20:	4b7d      	ldr	r3, [pc, #500]	; (3018 <printKeyboardBuffer+0x364>)
    2e22:	4798      	blx	r3
    2e24:	e78d      	b.n	2d42 <printKeyboardBuffer+0x8e>
					sendChar(0x0D);
    2e26:	200d      	movs	r0, #13
    2e28:	4b76      	ldr	r3, [pc, #472]	; (3004 <printKeyboardBuffer+0x350>)
    2e2a:	4698      	mov	r8, r3
    2e2c:	4798      	blx	r3
					sendChar(0x0A);
    2e2e:	200a      	movs	r0, #10
    2e30:	47c0      	blx	r8
					if(localEcho)
    2e32:	4b75      	ldr	r3, [pc, #468]	; (3008 <printKeyboardBuffer+0x354>)
    2e34:	781b      	ldrb	r3, [r3, #0]
    2e36:	2b00      	cmp	r3, #0
    2e38:	d0e0      	beq.n	2dfc <printKeyboardBuffer+0x148>
						ring_put(ouroboros, 0x0D);
    2e3a:	4b76      	ldr	r3, [pc, #472]	; (3014 <printKeyboardBuffer+0x360>)
    2e3c:	4699      	mov	r9, r3
    2e3e:	210d      	movs	r1, #13
    2e40:	6818      	ldr	r0, [r3, #0]
    2e42:	4b75      	ldr	r3, [pc, #468]	; (3018 <printKeyboardBuffer+0x364>)
    2e44:	4698      	mov	r8, r3
    2e46:	4798      	blx	r3
						ring_put(ouroboros, 0x0A);
    2e48:	464b      	mov	r3, r9
    2e4a:	6818      	ldr	r0, [r3, #0]
    2e4c:	210a      	movs	r1, #10
    2e4e:	47c0      	blx	r8
    2e50:	e7d4      	b.n	2dfc <printKeyboardBuffer+0x148>
					sendChar(0x0A);
    2e52:	200a      	movs	r0, #10
    2e54:	4b6b      	ldr	r3, [pc, #428]	; (3004 <printKeyboardBuffer+0x350>)
    2e56:	4798      	blx	r3
					if(localEcho)
    2e58:	4b6b      	ldr	r3, [pc, #428]	; (3008 <printKeyboardBuffer+0x354>)
    2e5a:	781b      	ldrb	r3, [r3, #0]
    2e5c:	2b00      	cmp	r3, #0
    2e5e:	d0d1      	beq.n	2e04 <printKeyboardBuffer+0x150>
						ring_put(ouroboros, 0x0A);
    2e60:	4b6c      	ldr	r3, [pc, #432]	; (3014 <printKeyboardBuffer+0x360>)
    2e62:	6818      	ldr	r0, [r3, #0]
    2e64:	210a      	movs	r1, #10
    2e66:	4b6c      	ldr	r3, [pc, #432]	; (3018 <printKeyboardBuffer+0x364>)
    2e68:	4798      	blx	r3
    2e6a:	e7cb      	b.n	2e04 <printKeyboardBuffer+0x150>
				capsLock = !capsLock;
    2e6c:	4a67      	ldr	r2, [pc, #412]	; (300c <printKeyboardBuffer+0x358>)
    2e6e:	7813      	ldrb	r3, [r2, #0]
    2e70:	2101      	movs	r1, #1
    2e72:	404b      	eors	r3, r1
    2e74:	7013      	strb	r3, [r2, #0]
    2e76:	e764      	b.n	2d42 <printKeyboardBuffer+0x8e>
				scrollLock = !scrollLock;
    2e78:	4a6a      	ldr	r2, [pc, #424]	; (3024 <printKeyboardBuffer+0x370>)
    2e7a:	7813      	ldrb	r3, [r2, #0]
    2e7c:	2101      	movs	r1, #1
    2e7e:	404b      	eors	r3, r1
    2e80:	7013      	strb	r3, [r2, #0]
    2e82:	e75e      	b.n	2d42 <printKeyboardBuffer+0x8e>
				sendChar(0x1B);
    2e84:	201b      	movs	r0, #27
    2e86:	4b5f      	ldr	r3, [pc, #380]	; (3004 <printKeyboardBuffer+0x350>)
    2e88:	4698      	mov	r8, r3
    2e8a:	4798      	blx	r3
				sendChar(0x5B);
    2e8c:	205b      	movs	r0, #91	; 0x5b
    2e8e:	47c0      	blx	r8
				sendChar(0x44);
    2e90:	2044      	movs	r0, #68	; 0x44
    2e92:	47c0      	blx	r8
				if(localEcho)
    2e94:	4b5c      	ldr	r3, [pc, #368]	; (3008 <printKeyboardBuffer+0x354>)
    2e96:	781b      	ldrb	r3, [r3, #0]
    2e98:	2b00      	cmp	r3, #0
    2e9a:	d100      	bne.n	2e9e <printKeyboardBuffer+0x1ea>
    2e9c:	e751      	b.n	2d42 <printKeyboardBuffer+0x8e>
					ring_put(ouroboros, 0x1B);
    2e9e:	4b5d      	ldr	r3, [pc, #372]	; (3014 <printKeyboardBuffer+0x360>)
    2ea0:	4699      	mov	r9, r3
    2ea2:	211b      	movs	r1, #27
    2ea4:	6818      	ldr	r0, [r3, #0]
    2ea6:	4b5c      	ldr	r3, [pc, #368]	; (3018 <printKeyboardBuffer+0x364>)
    2ea8:	4698      	mov	r8, r3
    2eaa:	4798      	blx	r3
					ring_put(ouroboros, 0x5B);
    2eac:	215b      	movs	r1, #91	; 0x5b
    2eae:	464b      	mov	r3, r9
    2eb0:	6818      	ldr	r0, [r3, #0]
    2eb2:	47c0      	blx	r8
					ring_put(ouroboros, 0x44);
    2eb4:	464b      	mov	r3, r9
    2eb6:	6818      	ldr	r0, [r3, #0]
    2eb8:	2144      	movs	r1, #68	; 0x44
    2eba:	47c0      	blx	r8
    2ebc:	e741      	b.n	2d42 <printKeyboardBuffer+0x8e>
				sendChar(0x1B);
    2ebe:	201b      	movs	r0, #27
    2ec0:	4b50      	ldr	r3, [pc, #320]	; (3004 <printKeyboardBuffer+0x350>)
    2ec2:	4698      	mov	r8, r3
    2ec4:	4798      	blx	r3
				sendChar(0x5B);
    2ec6:	205b      	movs	r0, #91	; 0x5b
    2ec8:	47c0      	blx	r8
				sendChar(0x42);
    2eca:	2042      	movs	r0, #66	; 0x42
    2ecc:	47c0      	blx	r8
				if(localEcho)
    2ece:	4b4e      	ldr	r3, [pc, #312]	; (3008 <printKeyboardBuffer+0x354>)
    2ed0:	781b      	ldrb	r3, [r3, #0]
    2ed2:	2b00      	cmp	r3, #0
    2ed4:	d100      	bne.n	2ed8 <printKeyboardBuffer+0x224>
    2ed6:	e734      	b.n	2d42 <printKeyboardBuffer+0x8e>
					ring_put(ouroboros, 0x1B);
    2ed8:	4b4e      	ldr	r3, [pc, #312]	; (3014 <printKeyboardBuffer+0x360>)
    2eda:	4699      	mov	r9, r3
    2edc:	211b      	movs	r1, #27
    2ede:	6818      	ldr	r0, [r3, #0]
    2ee0:	4b4d      	ldr	r3, [pc, #308]	; (3018 <printKeyboardBuffer+0x364>)
    2ee2:	4698      	mov	r8, r3
    2ee4:	4798      	blx	r3
					ring_put(ouroboros, 0x5B);
    2ee6:	215b      	movs	r1, #91	; 0x5b
    2ee8:	464b      	mov	r3, r9
    2eea:	6818      	ldr	r0, [r3, #0]
    2eec:	47c0      	blx	r8
					ring_put(ouroboros, 0x42);
    2eee:	464b      	mov	r3, r9
    2ef0:	6818      	ldr	r0, [r3, #0]
    2ef2:	2142      	movs	r1, #66	; 0x42
    2ef4:	47c0      	blx	r8
    2ef6:	e724      	b.n	2d42 <printKeyboardBuffer+0x8e>
				sendChar(0x1B);
    2ef8:	201b      	movs	r0, #27
    2efa:	4b42      	ldr	r3, [pc, #264]	; (3004 <printKeyboardBuffer+0x350>)
    2efc:	4698      	mov	r8, r3
    2efe:	4798      	blx	r3
				sendChar(0x5B);
    2f00:	205b      	movs	r0, #91	; 0x5b
    2f02:	47c0      	blx	r8
				sendChar(0x41);
    2f04:	2041      	movs	r0, #65	; 0x41
    2f06:	47c0      	blx	r8
				if(localEcho)
    2f08:	4b3f      	ldr	r3, [pc, #252]	; (3008 <printKeyboardBuffer+0x354>)
    2f0a:	781b      	ldrb	r3, [r3, #0]
    2f0c:	2b00      	cmp	r3, #0
    2f0e:	d100      	bne.n	2f12 <printKeyboardBuffer+0x25e>
    2f10:	e717      	b.n	2d42 <printKeyboardBuffer+0x8e>
					ring_put(ouroboros, 0x1B);
    2f12:	4b40      	ldr	r3, [pc, #256]	; (3014 <printKeyboardBuffer+0x360>)
    2f14:	4699      	mov	r9, r3
    2f16:	211b      	movs	r1, #27
    2f18:	6818      	ldr	r0, [r3, #0]
    2f1a:	4b3f      	ldr	r3, [pc, #252]	; (3018 <printKeyboardBuffer+0x364>)
    2f1c:	4698      	mov	r8, r3
    2f1e:	4798      	blx	r3
					ring_put(ouroboros, 0x5B);
    2f20:	215b      	movs	r1, #91	; 0x5b
    2f22:	464b      	mov	r3, r9
    2f24:	6818      	ldr	r0, [r3, #0]
    2f26:	47c0      	blx	r8
					ring_put(ouroboros, 0x41);
    2f28:	464b      	mov	r3, r9
    2f2a:	6818      	ldr	r0, [r3, #0]
    2f2c:	2141      	movs	r1, #65	; 0x41
    2f2e:	47c0      	blx	r8
    2f30:	e707      	b.n	2d42 <printKeyboardBuffer+0x8e>
				sendChar(0x1B);
    2f32:	201b      	movs	r0, #27
    2f34:	4b33      	ldr	r3, [pc, #204]	; (3004 <printKeyboardBuffer+0x350>)
    2f36:	4698      	mov	r8, r3
    2f38:	4798      	blx	r3
				sendChar(0x5B);
    2f3a:	205b      	movs	r0, #91	; 0x5b
    2f3c:	47c0      	blx	r8
				sendChar(0x43);
    2f3e:	2043      	movs	r0, #67	; 0x43
    2f40:	47c0      	blx	r8
				if(localEcho)
    2f42:	4b31      	ldr	r3, [pc, #196]	; (3008 <printKeyboardBuffer+0x354>)
    2f44:	781b      	ldrb	r3, [r3, #0]
    2f46:	2b00      	cmp	r3, #0
    2f48:	d100      	bne.n	2f4c <printKeyboardBuffer+0x298>
    2f4a:	e6fa      	b.n	2d42 <printKeyboardBuffer+0x8e>
					ring_put(ouroboros, 0x1B);
    2f4c:	4b31      	ldr	r3, [pc, #196]	; (3014 <printKeyboardBuffer+0x360>)
    2f4e:	4699      	mov	r9, r3
    2f50:	211b      	movs	r1, #27
    2f52:	6818      	ldr	r0, [r3, #0]
    2f54:	4b30      	ldr	r3, [pc, #192]	; (3018 <printKeyboardBuffer+0x364>)
    2f56:	4698      	mov	r8, r3
    2f58:	4798      	blx	r3
					ring_put(ouroboros, 0x5B);
    2f5a:	215b      	movs	r1, #91	; 0x5b
    2f5c:	464b      	mov	r3, r9
    2f5e:	6818      	ldr	r0, [r3, #0]
    2f60:	47c0      	blx	r8
					ring_put(ouroboros, 0x43);
    2f62:	464b      	mov	r3, r9
    2f64:	6818      	ldr	r0, [r3, #0]
    2f66:	2143      	movs	r1, #67	; 0x43
    2f68:	47c0      	blx	r8
    2f6a:	e6ea      	b.n	2d42 <printKeyboardBuffer+0x8e>
					sendChar(controlCase[scanCodeBuffer[i]]);
    2f6c:	ab04      	add	r3, sp, #16
    2f6e:	4642      	mov	r2, r8
    2f70:	5c98      	ldrb	r0, [r3, r2]
    2f72:	4b24      	ldr	r3, [pc, #144]	; (3004 <printKeyboardBuffer+0x350>)
    2f74:	4798      	blx	r3
					if(localEcho)
    2f76:	4b24      	ldr	r3, [pc, #144]	; (3008 <printKeyboardBuffer+0x354>)
    2f78:	781b      	ldrb	r3, [r3, #0]
    2f7a:	2b00      	cmp	r3, #0
    2f7c:	d100      	bne.n	2f80 <printKeyboardBuffer+0x2cc>
    2f7e:	e6e0      	b.n	2d42 <printKeyboardBuffer+0x8e>
						ring_put(ouroboros, controlCase[scanCodeBuffer[i]]);
    2f80:	9b01      	ldr	r3, [sp, #4]
    2f82:	781b      	ldrb	r3, [r3, #0]
    2f84:	aa04      	add	r2, sp, #16
    2f86:	5cd1      	ldrb	r1, [r2, r3]
    2f88:	4b22      	ldr	r3, [pc, #136]	; (3014 <printKeyboardBuffer+0x360>)
    2f8a:	6818      	ldr	r0, [r3, #0]
    2f8c:	4b22      	ldr	r3, [pc, #136]	; (3018 <printKeyboardBuffer+0x364>)
    2f8e:	4798      	blx	r3
    2f90:	e6d7      	b.n	2d42 <printKeyboardBuffer+0x8e>
					sendChar(capsLockCase[scanCodeBuffer[i]]);
    2f92:	ab16      	add	r3, sp, #88	; 0x58
    2f94:	4642      	mov	r2, r8
    2f96:	5c98      	ldrb	r0, [r3, r2]
    2f98:	4b1a      	ldr	r3, [pc, #104]	; (3004 <printKeyboardBuffer+0x350>)
    2f9a:	4798      	blx	r3
					if(localEcho)
    2f9c:	4b1a      	ldr	r3, [pc, #104]	; (3008 <printKeyboardBuffer+0x354>)
    2f9e:	781b      	ldrb	r3, [r3, #0]
    2fa0:	2b00      	cmp	r3, #0
    2fa2:	d100      	bne.n	2fa6 <printKeyboardBuffer+0x2f2>
    2fa4:	e6cd      	b.n	2d42 <printKeyboardBuffer+0x8e>
						parseChar(capsLockCase[scanCodeBuffer[i]]);
    2fa6:	9b01      	ldr	r3, [sp, #4]
    2fa8:	781b      	ldrb	r3, [r3, #0]
    2faa:	aa16      	add	r2, sp, #88	; 0x58
    2fac:	5cd0      	ldrb	r0, [r2, r3]
    2fae:	4b18      	ldr	r3, [pc, #96]	; (3010 <printKeyboardBuffer+0x35c>)
    2fb0:	4798      	blx	r3
    2fb2:	e6c6      	b.n	2d42 <printKeyboardBuffer+0x8e>
					sendChar(noCase[scanCodeBuffer[i]]);
    2fb4:	ab3a      	add	r3, sp, #232	; 0xe8
    2fb6:	4642      	mov	r2, r8
    2fb8:	5c98      	ldrb	r0, [r3, r2]
    2fba:	4b12      	ldr	r3, [pc, #72]	; (3004 <printKeyboardBuffer+0x350>)
    2fbc:	4798      	blx	r3
					if(localEcho)
    2fbe:	4b12      	ldr	r3, [pc, #72]	; (3008 <printKeyboardBuffer+0x354>)
    2fc0:	781b      	ldrb	r3, [r3, #0]
    2fc2:	2b00      	cmp	r3, #0
    2fc4:	d100      	bne.n	2fc8 <printKeyboardBuffer+0x314>
    2fc6:	e6bc      	b.n	2d42 <printKeyboardBuffer+0x8e>
						parseChar(noCase[scanCodeBuffer[i]]);
    2fc8:	9b01      	ldr	r3, [sp, #4]
    2fca:	781b      	ldrb	r3, [r3, #0]
    2fcc:	aa3a      	add	r2, sp, #232	; 0xe8
    2fce:	5cd0      	ldrb	r0, [r2, r3]
    2fd0:	4b0f      	ldr	r3, [pc, #60]	; (3010 <printKeyboardBuffer+0x35c>)
    2fd2:	4798      	blx	r3
    2fd4:	e6b5      	b.n	2d42 <printKeyboardBuffer+0x8e>
		scanCodeBuffer[i] = 0xFF;
    2fd6:	23ff      	movs	r3, #255	; 0xff
    2fd8:	703b      	strb	r3, [r7, #0]
    2fda:	3701      	adds	r7, #1
	for(int i = 0 ; i < 20 ; i++)
    2fdc:	42bc      	cmp	r4, r7
    2fde:	d1fb      	bne.n	2fd8 <printKeyboardBuffer+0x324>
}
    2fe0:	b04c      	add	sp, #304	; 0x130
    2fe2:	bc1c      	pop	{r2, r3, r4}
    2fe4:	4690      	mov	r8, r2
    2fe6:	4699      	mov	r9, r3
    2fe8:	46a2      	mov	sl, r4
    2fea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2fec:	00007174 	.word	0x00007174
    2ff0:	00003f35 	.word	0x00003f35
    2ff4:	000071f4 	.word	0x000071f4
    2ff8:	2000003c 	.word	0x2000003c
    2ffc:	20000028 	.word	0x20000028
    3000:	00002c89 	.word	0x00002c89
    3004:	00000ef9 	.word	0x00000ef9
    3008:	20000174 	.word	0x20000174
    300c:	20000338 	.word	0x20000338
    3010:	00000ba1 	.word	0x00000ba1
    3014:	20000360 	.word	0x20000360
    3018:	00000141 	.word	0x00000141
    301c:	200002c0 	.word	0x200002c0
    3020:	20000170 	.word	0x20000170
    3024:	20000359 	.word	0x20000359

00003028 <removeFromKeyDown>:

void removeFromKeyDown(int scancode)
{
    3028:	b510      	push	{r4, lr}
    302a:	4b07      	ldr	r3, [pc, #28]	; (3048 <removeFromKeyDown+0x20>)
    302c:	0019      	movs	r1, r3
    302e:	3114      	adds	r1, #20
	for(int i = 0 ; i < 20 ; i++)
	{
		if(keyDownBuffer[i] == scancode)
		{
			keyDownBuffer[i] = 0xFF;
    3030:	24ff      	movs	r4, #255	; 0xff
    3032:	e002      	b.n	303a <removeFromKeyDown+0x12>
    3034:	3301      	adds	r3, #1
	for(int i = 0 ; i < 20 ; i++)
    3036:	428b      	cmp	r3, r1
    3038:	d004      	beq.n	3044 <removeFromKeyDown+0x1c>
		if(keyDownBuffer[i] == scancode)
    303a:	781a      	ldrb	r2, [r3, #0]
    303c:	4282      	cmp	r2, r0
    303e:	d1f9      	bne.n	3034 <removeFromKeyDown+0xc>
			keyDownBuffer[i] = 0xFF;
    3040:	701c      	strb	r4, [r3, #0]
    3042:	e7f7      	b.n	3034 <removeFromKeyDown+0xc>
		}
	}
}
    3044:	bd10      	pop	{r4, pc}
    3046:	46c0      	nop			; (mov r8, r8)
    3048:	20000028 	.word	0x20000028

0000304c <readKeyboard>:
{
    304c:	b5f0      	push	{r4, r5, r6, r7, lr}
    304e:	46de      	mov	lr, fp
    3050:	4657      	mov	r7, sl
    3052:	464e      	mov	r6, r9
    3054:	4645      	mov	r5, r8
    3056:	b5e0      	push	{r5, r6, r7, lr}
    3058:	b083      	sub	sp, #12
    305a:	4e6d      	ldr	r6, [pc, #436]	; (3210 <readKeyboard+0x1c4>)
    305c:	0031      	movs	r1, r6
    305e:	3119      	adds	r1, #25
    3060:	31ff      	adds	r1, #255	; 0xff
    3062:	0033      	movs	r3, r6
		scanCodes[i] = 0xFF;
    3064:	22ff      	movs	r2, #255	; 0xff
    3066:	c304      	stmia	r3!, {r2}
	for(i = 0 ; i < 70 ; i++)
    3068:	428b      	cmp	r3, r1
    306a:	d1fc      	bne.n	3066 <readKeyboard+0x1a>
	PORT->Group[0].WRCONFIG.bit.DRVSTR = 1;
    306c:	4a69      	ldr	r2, [pc, #420]	; (3214 <readKeyboard+0x1c8>)
    306e:	6a91      	ldr	r1, [r2, #40]	; 0x28
    3070:	2380      	movs	r3, #128	; 0x80
    3072:	03db      	lsls	r3, r3, #15
    3074:	430b      	orrs	r3, r1
    3076:	6293      	str	r3, [r2, #40]	; 0x28
    3078:	4c67      	ldr	r4, [pc, #412]	; (3218 <readKeyboard+0x1cc>)
    307a:	341c      	adds	r4, #28
    307c:	4b66      	ldr	r3, [pc, #408]	; (3218 <readKeyboard+0x1cc>)
		REG_PORT_DIRSET0 = kb_col[i];
    307e:	4867      	ldr	r0, [pc, #412]	; (321c <readKeyboard+0x1d0>)
		REG_PORT_OUTCLR0 = kb_col[i];
    3080:	4967      	ldr	r1, [pc, #412]	; (3220 <readKeyboard+0x1d4>)
		REG_PORT_DIRSET0 = kb_col[i];
    3082:	681a      	ldr	r2, [r3, #0]
    3084:	6002      	str	r2, [r0, #0]
		REG_PORT_OUTCLR0 = kb_col[i];
    3086:	cb04      	ldmia	r3!, {r2}
    3088:	600a      	str	r2, [r1, #0]
	for (i = 0; i < NUM_COL; i++) {
    308a:	42a3      	cmp	r3, r4
    308c:	d1f9      	bne.n	3082 <readKeyboard+0x36>
    308e:	2200      	movs	r2, #0
		REG_PORT_DIRCLR0 = kb_row[i];
    3090:	4b64      	ldr	r3, [pc, #400]	; (3224 <readKeyboard+0x1d8>)
    3092:	469c      	mov	ip, r3
    3094:	4f64      	ldr	r7, [pc, #400]	; (3228 <readKeyboard+0x1dc>)
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.PULLEN = 1;
    3096:	4d65      	ldr	r5, [pc, #404]	; (322c <readKeyboard+0x1e0>)
    3098:	2404      	movs	r4, #4
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.INEN = 1;
    309a:	2002      	movs	r0, #2
		REG_PORT_DIRCLR0 = kb_row[i];
    309c:	4663      	mov	r3, ip
    309e:	58d3      	ldr	r3, [r2, r3]
    30a0:	603b      	str	r3, [r7, #0]
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.PULLEN = 1;
    30a2:	5953      	ldr	r3, [r2, r5]
    30a4:	4962      	ldr	r1, [pc, #392]	; (3230 <readKeyboard+0x1e4>)
    30a6:	4688      	mov	r8, r1
    30a8:	4443      	add	r3, r8
    30aa:	7819      	ldrb	r1, [r3, #0]
    30ac:	4321      	orrs	r1, r4
    30ae:	7019      	strb	r1, [r3, #0]
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.INEN = 1;
    30b0:	7819      	ldrb	r1, [r3, #0]
    30b2:	4301      	orrs	r1, r0
    30b4:	7019      	strb	r1, [r3, #0]
    30b6:	3204      	adds	r2, #4
	for (i = 0; i < NUM_ROW; i++) {
    30b8:	2a28      	cmp	r2, #40	; 0x28
    30ba:	d1ef      	bne.n	309c <readKeyboard+0x50>
    30bc:	4b56      	ldr	r3, [pc, #344]	; (3218 <readKeyboard+0x1cc>)
    30be:	4699      	mov	r9, r3
    30c0:	2300      	movs	r3, #0
    30c2:	4698      	mov	r8, r3
    30c4:	2200      	movs	r2, #0
		REG_PORT_OUTSET0 = kb_col[i];
    30c6:	4b5b      	ldr	r3, [pc, #364]	; (3234 <readKeyboard+0x1e8>)
    30c8:	469b      	mov	fp, r3
			if((PORT->Group[0].IN.reg & kb_row[j]) != 0) {
    30ca:	4d52      	ldr	r5, [pc, #328]	; (3214 <readKeyboard+0x1c8>)
				scanCodes[scanCodeIndex] = (i * NUM_ROW) + j;
    30cc:	4b50      	ldr	r3, [pc, #320]	; (3210 <readKeyboard+0x1c4>)
    30ce:	469c      	mov	ip, r3
		REG_PORT_OUTCLR0 = kb_col[i];
    30d0:	4b53      	ldr	r3, [pc, #332]	; (3220 <readKeyboard+0x1d4>)
    30d2:	469a      	mov	sl, r3
    30d4:	9601      	str	r6, [sp, #4]
    30d6:	464e      	mov	r6, r9
    30d8:	4647      	mov	r7, r8
    30da:	e015      	b.n	3108 <readKeyboard+0xbc>
    30dc:	3304      	adds	r3, #4
    30de:	3101      	adds	r1, #1
		for (j = 0; j < NUM_ROW; j++) {	
    30e0:	42a3      	cmp	r3, r4
    30e2:	d008      	beq.n	30f6 <readKeyboard+0xaa>
			if((PORT->Group[0].IN.reg & kb_row[j]) != 0) {
    30e4:	6a28      	ldr	r0, [r5, #32]
    30e6:	681e      	ldr	r6, [r3, #0]
    30e8:	4206      	tst	r6, r0
    30ea:	d0f7      	beq.n	30dc <readKeyboard+0x90>
				scanCodes[scanCodeIndex] = (i * NUM_ROW) + j;
    30ec:	0090      	lsls	r0, r2, #2
    30ee:	4666      	mov	r6, ip
    30f0:	5181      	str	r1, [r0, r6]
				scanCodeIndex++;
    30f2:	3201      	adds	r2, #1
    30f4:	e7f2      	b.n	30dc <readKeyboard+0x90>
    30f6:	9e00      	ldr	r6, [sp, #0]
		REG_PORT_OUTCLR0 = kb_col[i];
    30f8:	4649      	mov	r1, r9
    30fa:	6809      	ldr	r1, [r1, #0]
    30fc:	4650      	mov	r0, sl
    30fe:	6001      	str	r1, [r0, #0]
    3100:	3604      	adds	r6, #4
    3102:	370a      	adds	r7, #10
	for (i = 0; i < NUM_COL; i++) {
    3104:	2f46      	cmp	r7, #70	; 0x46
    3106:	d00a      	beq.n	311e <readKeyboard+0xd2>
    3108:	46b1      	mov	r9, r6
		REG_PORT_OUTSET0 = kb_col[i];
    310a:	465b      	mov	r3, fp
    310c:	6831      	ldr	r1, [r6, #0]
    310e:	6019      	str	r1, [r3, #0]
    3110:	4b44      	ldr	r3, [pc, #272]	; (3224 <readKeyboard+0x1d8>)
    3112:	4698      	mov	r8, r3
    3114:	001c      	movs	r4, r3
    3116:	3428      	adds	r4, #40	; 0x28
    3118:	0039      	movs	r1, r7
    311a:	9600      	str	r6, [sp, #0]
    311c:	e7e2      	b.n	30e4 <readKeyboard+0x98>
    311e:	4647      	mov	r7, r8
    3120:	9e01      	ldr	r6, [sp, #4]
    3122:	4641      	mov	r1, r8
		REG_PORT_DIRSET0 = kb_row[i];
    3124:	4d3d      	ldr	r5, [pc, #244]	; (321c <readKeyboard+0x1d0>)
		REG_PORT_OUTCLR0 = kb_row[i];
    3126:	4c3e      	ldr	r4, [pc, #248]	; (3220 <readKeyboard+0x1d4>)
		REG_PORT_DIRSET0 = kb_row[i];
    3128:	6808      	ldr	r0, [r1, #0]
    312a:	6028      	str	r0, [r5, #0]
		REG_PORT_OUTCLR0 = kb_row[i];
    312c:	c901      	ldmia	r1!, {r0}
    312e:	6020      	str	r0, [r4, #0]
	for (i = 0; i < NUM_ROW; i++) {
    3130:	4299      	cmp	r1, r3
    3132:	d1f9      	bne.n	3128 <readKeyboard+0xdc>
    3134:	2100      	movs	r1, #0
		REG_PORT_DIRCLR0 = kb_col[i];
    3136:	4b38      	ldr	r3, [pc, #224]	; (3218 <readKeyboard+0x1cc>)
    3138:	4699      	mov	r9, r3
    313a:	4b3b      	ldr	r3, [pc, #236]	; (3228 <readKeyboard+0x1dc>)
    313c:	4698      	mov	r8, r3
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.PULLEN = 1;
    313e:	4b3e      	ldr	r3, [pc, #248]	; (3238 <readKeyboard+0x1ec>)
    3140:	469c      	mov	ip, r3
    3142:	2504      	movs	r5, #4
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.INEN = 1;
    3144:	2402      	movs	r4, #2
		REG_PORT_DIRCLR0 = kb_col[i];
    3146:	4643      	mov	r3, r8
    3148:	4648      	mov	r0, r9
    314a:	5808      	ldr	r0, [r1, r0]
    314c:	6018      	str	r0, [r3, #0]
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.PULLEN = 1;
    314e:	4663      	mov	r3, ip
    3150:	58cb      	ldr	r3, [r1, r3]
    3152:	4837      	ldr	r0, [pc, #220]	; (3230 <readKeyboard+0x1e4>)
    3154:	4682      	mov	sl, r0
    3156:	4453      	add	r3, sl
    3158:	7818      	ldrb	r0, [r3, #0]
    315a:	4328      	orrs	r0, r5
    315c:	7018      	strb	r0, [r3, #0]
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.INEN = 1;
    315e:	7818      	ldrb	r0, [r3, #0]
    3160:	4320      	orrs	r0, r4
    3162:	7018      	strb	r0, [r3, #0]
    3164:	3104      	adds	r1, #4
	for (i = 0; i < NUM_COL; i++) {
    3166:	291c      	cmp	r1, #28
    3168:	d1ed      	bne.n	3146 <readKeyboard+0xfa>
    316a:	2300      	movs	r3, #0
    316c:	469c      	mov	ip, r3
		REG_PORT_OUTSET0 = kb_row[i];
    316e:	4b31      	ldr	r3, [pc, #196]	; (3234 <readKeyboard+0x1e8>)
    3170:	469b      	mov	fp, r3
			if((PORT->Group[0].IN.reg & kb_col[j]) != 0)
    3172:	4d28      	ldr	r5, [pc, #160]	; (3214 <readKeyboard+0x1c8>)
				scanCodes[scanCodeIndex] = (j * NUM_ROW) + i;
    3174:	4b26      	ldr	r3, [pc, #152]	; (3210 <readKeyboard+0x1c4>)
    3176:	4698      	mov	r8, r3
		REG_PORT_OUTCLR0 = kb_row[i];
    3178:	4b29      	ldr	r3, [pc, #164]	; (3220 <readKeyboard+0x1d4>)
    317a:	469a      	mov	sl, r3
    317c:	46b1      	mov	r9, r6
    317e:	003e      	movs	r6, r7
    3180:	4667      	mov	r7, ip
    3182:	e015      	b.n	31b0 <readKeyboard+0x164>
    3184:	3104      	adds	r1, #4
    3186:	330a      	adds	r3, #10
		for (j = 0; j < NUM_COL; j++) {
    3188:	42a3      	cmp	r3, r4
    318a:	d008      	beq.n	319e <readKeyboard+0x152>
			if((PORT->Group[0].IN.reg & kb_col[j]) != 0)
    318c:	6a28      	ldr	r0, [r5, #32]
    318e:	680e      	ldr	r6, [r1, #0]
    3190:	4206      	tst	r6, r0
    3192:	d0f7      	beq.n	3184 <readKeyboard+0x138>
				scanCodes[scanCodeIndex] = (j * NUM_ROW) + i;
    3194:	0090      	lsls	r0, r2, #2
    3196:	4646      	mov	r6, r8
    3198:	5183      	str	r3, [r0, r6]
				scanCodeIndex++;
    319a:	3201      	adds	r2, #1
    319c:	e7f2      	b.n	3184 <readKeyboard+0x138>
    319e:	9e00      	ldr	r6, [sp, #0]
		REG_PORT_OUTCLR0 = kb_row[i];
    31a0:	4663      	mov	r3, ip
    31a2:	681b      	ldr	r3, [r3, #0]
    31a4:	4651      	mov	r1, sl
    31a6:	600b      	str	r3, [r1, #0]
	for (i = 0; i < NUM_ROW; i++) {
    31a8:	3701      	adds	r7, #1
    31aa:	3604      	adds	r6, #4
    31ac:	2f0a      	cmp	r7, #10
    31ae:	d009      	beq.n	31c4 <readKeyboard+0x178>
    31b0:	46b4      	mov	ip, r6
		REG_PORT_OUTSET0 = kb_row[i];
    31b2:	465b      	mov	r3, fp
    31b4:	6831      	ldr	r1, [r6, #0]
    31b6:	6019      	str	r1, [r3, #0]
    31b8:	003b      	movs	r3, r7
    31ba:	003c      	movs	r4, r7
    31bc:	3446      	adds	r4, #70	; 0x46
    31be:	4916      	ldr	r1, [pc, #88]	; (3218 <readKeyboard+0x1cc>)
    31c0:	9600      	str	r6, [sp, #0]
    31c2:	e7e3      	b.n	318c <readKeyboard+0x140>
    31c4:	464e      	mov	r6, r9
	for(i = 0 ; i < scanCodeIndex ; i++)
    31c6:	2a00      	cmp	r2, #0
    31c8:	dd08      	ble.n	31dc <readKeyboard+0x190>
    31ca:	4b1c      	ldr	r3, [pc, #112]	; (323c <readKeyboard+0x1f0>)
    31cc:	0092      	lsls	r2, r2, #2
    31ce:	4910      	ldr	r1, [pc, #64]	; (3210 <readKeyboard+0x1c4>)
    31d0:	188a      	adds	r2, r1, r2
		scanCodeBuffer[i] = scanCodes[i];	
    31d2:	ce02      	ldmia	r6!, {r1}
    31d4:	7019      	strb	r1, [r3, #0]
    31d6:	3301      	adds	r3, #1
	for(i = 0 ; i < scanCodeIndex ; i++)
    31d8:	42b2      	cmp	r2, r6
    31da:	d1fa      	bne.n	31d2 <readKeyboard+0x186>
		REG_PORT_OUTSET0 = kb_row[i];
    31dc:	2400      	movs	r4, #0
		if(keyDown(i) && !scanCodesContains(i))
    31de:	4d18      	ldr	r5, [pc, #96]	; (3240 <readKeyboard+0x1f4>)
    31e0:	4e18      	ldr	r6, [pc, #96]	; (3244 <readKeyboard+0x1f8>)
			removeFromKeyDown(i);
    31e2:	4f19      	ldr	r7, [pc, #100]	; (3248 <readKeyboard+0x1fc>)
    31e4:	e002      	b.n	31ec <readKeyboard+0x1a0>
	for(i = 0; i < 70; i++)
    31e6:	3401      	adds	r4, #1
    31e8:	2c46      	cmp	r4, #70	; 0x46
    31ea:	d00a      	beq.n	3202 <readKeyboard+0x1b6>
		if(keyDown(i) && !scanCodesContains(i))
    31ec:	0020      	movs	r0, r4
    31ee:	47a8      	blx	r5
    31f0:	2800      	cmp	r0, #0
    31f2:	d0f8      	beq.n	31e6 <readKeyboard+0x19a>
    31f4:	0020      	movs	r0, r4
    31f6:	47b0      	blx	r6
    31f8:	2800      	cmp	r0, #0
    31fa:	d1f4      	bne.n	31e6 <readKeyboard+0x19a>
			removeFromKeyDown(i);
    31fc:	0020      	movs	r0, r4
    31fe:	47b8      	blx	r7
    3200:	e7f1      	b.n	31e6 <readKeyboard+0x19a>
}
    3202:	b003      	add	sp, #12
    3204:	bc3c      	pop	{r2, r3, r4, r5}
    3206:	4690      	mov	r8, r2
    3208:	4699      	mov	r9, r3
    320a:	46a2      	mov	sl, r4
    320c:	46ab      	mov	fp, r5
    320e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3210:	20000050 	.word	0x20000050
    3214:	41004400 	.word	0x41004400
    3218:	00007294 	.word	0x00007294
    321c:	41004408 	.word	0x41004408
    3220:	41004414 	.word	0x41004414
    3224:	000072cc 	.word	0x000072cc
    3228:	41004404 	.word	0x41004404
    322c:	000072f4 	.word	0x000072f4
    3230:	41004440 	.word	0x41004440
    3234:	41004418 	.word	0x41004418
    3238:	000072b0 	.word	0x000072b0
    323c:	2000003c 	.word	0x2000003c
    3240:	00002c89 	.word	0x00002c89
    3244:	00002c5d 	.word	0x00002c5d
    3248:	00003029 	.word	0x00003029

0000324c <setColorRGB>:

uint16_t fore_Color_High, fore_Color_Low;
uint16_t back_Color_High, back_Color_Low;

void setColorRGB(uint8_t r, uint8_t g, uint8_t b)
{
    324c:	b510      	push	{r4, lr}
	fore_Color_High = ((r&248)|g>>5);
    324e:	094b      	lsrs	r3, r1, #5
    3250:	2407      	movs	r4, #7
    3252:	43a0      	bics	r0, r4
    3254:	4318      	orrs	r0, r3
    3256:	4b05      	ldr	r3, [pc, #20]	; (326c <setColorRGB+0x20>)
    3258:	8018      	strh	r0, [r3, #0]
	fore_Color_Low = ((g&28)<<3|b>>3);
    325a:	00c9      	lsls	r1, r1, #3
    325c:	23e0      	movs	r3, #224	; 0xe0
    325e:	4019      	ands	r1, r3
    3260:	08d2      	lsrs	r2, r2, #3
    3262:	430a      	orrs	r2, r1
    3264:	4b02      	ldr	r3, [pc, #8]	; (3270 <setColorRGB+0x24>)
    3266:	801a      	strh	r2, [r3, #0]
}
    3268:	bd10      	pop	{r4, pc}
    326a:	46c0      	nop			; (mov r8, r8)
    326c:	20000b46 	.word	0x20000b46
    3270:	20000b48 	.word	0x20000b48

00003274 <setBackColorRGB>:
	fore_Color_Low = (color & 0xFF);
}

void setBackColorRGB(unsigned char r,
unsigned char g, unsigned char b)
{
    3274:	b510      	push	{r4, lr}
	back_Color_High = ((r&248)|g>>5);
    3276:	094b      	lsrs	r3, r1, #5
    3278:	2407      	movs	r4, #7
    327a:	43a0      	bics	r0, r4
    327c:	4318      	orrs	r0, r3
    327e:	4b05      	ldr	r3, [pc, #20]	; (3294 <setBackColorRGB+0x20>)
    3280:	8018      	strh	r0, [r3, #0]
	back_Color_Low = ((g&28)<<3|b>>3);
    3282:	00c9      	lsls	r1, r1, #3
    3284:	23e0      	movs	r3, #224	; 0xe0
    3286:	4019      	ands	r1, r3
    3288:	08d2      	lsrs	r2, r2, #3
    328a:	430a      	orrs	r2, r1
    328c:	4b02      	ldr	r3, [pc, #8]	; (3298 <setBackColorRGB+0x24>)
    328e:	801a      	strh	r2, [r3, #0]
}
    3290:	bd10      	pop	{r4, pc}
    3292:	46c0      	nop			; (mov r8, r8)
    3294:	20000b4a 	.word	0x20000b4a
    3298:	20000b44 	.word	0x20000b44

0000329c <LCD_Fast_Fill>:
	(((long)(x2-x1)+1)*((long)(y2-y1)+1)));
	REG_PORT_OUTSET1 = LCD_CS;
}

void LCD_Fast_Fill(int ch, int cl, long pix)
{
    329c:	b570      	push	{r4, r5, r6, lr}
	int blocks;
	
	
	REG_PORT_OUTCLR1 = 0x0000ffff;
    329e:	4c19      	ldr	r4, [pc, #100]	; (3304 <LCD_Fast_Fill+0x68>)
    32a0:	4b19      	ldr	r3, [pc, #100]	; (3308 <LCD_Fast_Fill+0x6c>)
    32a2:	601c      	str	r4, [r3, #0]
	REG_PORT_OUTSET1 = (ch << 8) | cl;
    32a4:	0200      	lsls	r0, r0, #8
    32a6:	4301      	orrs	r1, r0
    32a8:	4b18      	ldr	r3, [pc, #96]	; (330c <LCD_Fast_Fill+0x70>)
    32aa:	6019      	str	r1, [r3, #0]

	blocks = pix/16;
    32ac:	17d3      	asrs	r3, r2, #31
    32ae:	260f      	movs	r6, #15
    32b0:	401e      	ands	r6, r3
    32b2:	18b6      	adds	r6, r6, r2
    32b4:	1136      	asrs	r6, r6, #4
	for (int i=0; i<blocks; i++)
    32b6:	2500      	movs	r5, #0
    32b8:	2e00      	cmp	r6, #0
    32ba:	dd0c      	ble.n	32d6 <LCD_Fast_Fill+0x3a>
	{
		for (int j=0; j<16; j++)
		{
			REG_PORT_OUTCLR1 = LCD_WR;
    32bc:	4c12      	ldr	r4, [pc, #72]	; (3308 <LCD_Fast_Fill+0x6c>)
    32be:	2180      	movs	r1, #128	; 0x80
    32c0:	0289      	lsls	r1, r1, #10
			REG_PORT_OUTSET1 = LCD_WR;
    32c2:	4812      	ldr	r0, [pc, #72]	; (330c <LCD_Fast_Fill+0x70>)
{
    32c4:	2310      	movs	r3, #16
			REG_PORT_OUTCLR1 = LCD_WR;
    32c6:	6021      	str	r1, [r4, #0]
			REG_PORT_OUTSET1 = LCD_WR;
    32c8:	6001      	str	r1, [r0, #0]
    32ca:	3b01      	subs	r3, #1
		for (int j=0; j<16; j++)
    32cc:	2b00      	cmp	r3, #0
    32ce:	d1fa      	bne.n	32c6 <LCD_Fast_Fill+0x2a>
	for (int i=0; i<blocks; i++)
    32d0:	3501      	adds	r5, #1
    32d2:	42ae      	cmp	r6, r5
    32d4:	d1f6      	bne.n	32c4 <LCD_Fast_Fill+0x28>
		}
	}
	
	if ((pix % 16) != 0)
    32d6:	0713      	lsls	r3, r2, #28
    32d8:	d013      	beq.n	3302 <LCD_Fast_Fill+0x66>
	for (int i=0; i<(pix % 16)+1; i++)
    32da:	17d3      	asrs	r3, r2, #31
    32dc:	0f1b      	lsrs	r3, r3, #28
    32de:	18d2      	adds	r2, r2, r3
    32e0:	210f      	movs	r1, #15
    32e2:	4011      	ands	r1, r2
    32e4:	1ac9      	subs	r1, r1, r3
    32e6:	1c4b      	adds	r3, r1, #1
    32e8:	2b00      	cmp	r3, #0
    32ea:	dd0a      	ble.n	3302 <LCD_Fast_Fill+0x66>
    32ec:	0019      	movs	r1, r3
    32ee:	2300      	movs	r3, #0
	{
		REG_PORT_OUTCLR1 = LCD_WR;
    32f0:	4c05      	ldr	r4, [pc, #20]	; (3308 <LCD_Fast_Fill+0x6c>)
    32f2:	2280      	movs	r2, #128	; 0x80
    32f4:	0292      	lsls	r2, r2, #10
		REG_PORT_OUTSET1 = LCD_WR;
    32f6:	4805      	ldr	r0, [pc, #20]	; (330c <LCD_Fast_Fill+0x70>)
		REG_PORT_OUTCLR1 = LCD_WR;
    32f8:	6022      	str	r2, [r4, #0]
		REG_PORT_OUTSET1 = LCD_WR;
    32fa:	6002      	str	r2, [r0, #0]
	for (int i=0; i<(pix % 16)+1; i++)
    32fc:	3301      	adds	r3, #1
    32fe:	4299      	cmp	r1, r3
    3300:	d1fa      	bne.n	32f8 <LCD_Fast_Fill+0x5c>
	}
}
    3302:	bd70      	pop	{r4, r5, r6, pc}
    3304:	0000ffff 	.word	0x0000ffff
    3308:	41004494 	.word	0x41004494
    330c:	41004498 	.word	0x41004498

00003310 <setXY>:
{
	setXY(0,0,display_X_size,display_Y_size);
}

void setXY(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
    3310:	b5f0      	push	{r4, r5, r6, r7, lr}
    3312:	b083      	sub	sp, #12
    3314:	0007      	movs	r7, r0
    3316:	9100      	str	r1, [sp, #0]
    3318:	0016      	movs	r6, r2
    331a:	9301      	str	r3, [sp, #4]
	y1=display_Y_size-y1;
	y2=display_Y_size-y2;
	SwapUint16(y1, y2);
	*/
	
	LCD_Write_COM16(0x2a,0x00);
    331c:	2100      	movs	r1, #0
    331e:	202a      	movs	r0, #42	; 0x2a
    3320:	4c17      	ldr	r4, [pc, #92]	; (3380 <setXY+0x70>)
    3322:	47a0      	blx	r4
	LCD_Write_DATA8(x1>>8);
    3324:	0a38      	lsrs	r0, r7, #8
    3326:	4d17      	ldr	r5, [pc, #92]	; (3384 <setXY+0x74>)
    3328:	47a8      	blx	r5
	LCD_Write_COM16(0x2a,0x01);
    332a:	2101      	movs	r1, #1
    332c:	202a      	movs	r0, #42	; 0x2a
    332e:	47a0      	blx	r4
	LCD_Write_DATA8(x1);
    3330:	b2f8      	uxtb	r0, r7
    3332:	47a8      	blx	r5
	LCD_Write_COM16(0x2a,0x02);
    3334:	2102      	movs	r1, #2
    3336:	202a      	movs	r0, #42	; 0x2a
    3338:	47a0      	blx	r4
	LCD_Write_DATA8(x2>>8);
    333a:	0a30      	lsrs	r0, r6, #8
    333c:	47a8      	blx	r5
	LCD_Write_COM16(0x2a,0x03);
    333e:	2103      	movs	r1, #3
    3340:	202a      	movs	r0, #42	; 0x2a
    3342:	47a0      	blx	r4
	LCD_Write_DATA8(x2);
    3344:	b2f0      	uxtb	r0, r6
    3346:	47a8      	blx	r5

	LCD_Write_COM16(0x2b,0x00);
    3348:	2100      	movs	r1, #0
    334a:	202b      	movs	r0, #43	; 0x2b
    334c:	47a0      	blx	r4
	LCD_Write_DATA8(y1>>8);
    334e:	9e00      	ldr	r6, [sp, #0]
    3350:	0a30      	lsrs	r0, r6, #8
    3352:	47a8      	blx	r5
	LCD_Write_COM16(0x2b,0x01);
    3354:	2101      	movs	r1, #1
    3356:	202b      	movs	r0, #43	; 0x2b
    3358:	47a0      	blx	r4
	LCD_Write_DATA8(y1);
    335a:	b2f0      	uxtb	r0, r6
    335c:	47a8      	blx	r5
	LCD_Write_COM16(0x2b,0x02);
    335e:	2102      	movs	r1, #2
    3360:	202b      	movs	r0, #43	; 0x2b
    3362:	47a0      	blx	r4
	LCD_Write_DATA8(y2>>8);
    3364:	9e01      	ldr	r6, [sp, #4]
    3366:	0a30      	lsrs	r0, r6, #8
    3368:	47a8      	blx	r5
	LCD_Write_COM16(0x2b,0x03);
    336a:	2103      	movs	r1, #3
    336c:	202b      	movs	r0, #43	; 0x2b
    336e:	47a0      	blx	r4
	LCD_Write_DATA8(y2);
    3370:	b2f0      	uxtb	r0, r6
    3372:	47a8      	blx	r5

	LCD_Write_COM16(0x2c,0x00);
    3374:	2100      	movs	r1, #0
    3376:	202c      	movs	r0, #44	; 0x2c
    3378:	47a0      	blx	r4
}
    337a:	b003      	add	sp, #12
    337c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    337e:	46c0      	nop			; (mov r8, r8)
    3380:	000034b5 	.word	0x000034b5
    3384:	000034e5 	.word	0x000034e5

00003388 <fillRect>:
{
    3388:	b5f0      	push	{r4, r5, r6, r7, lr}
    338a:	46ce      	mov	lr, r9
    338c:	4647      	mov	r7, r8
    338e:	b580      	push	{r7, lr}
    3390:	b083      	sub	sp, #12
    3392:	0006      	movs	r6, r0
    3394:	4689      	mov	r9, r1
    3396:	0014      	movs	r4, r2
    3398:	001d      	movs	r5, r3
	if (x1>x2)
    339a:	4290      	cmp	r0, r2
    339c:	dd01      	ble.n	33a2 <fillRect+0x1a>
		x1 = x2;
    339e:	0016      	movs	r6, r2
		x2 = temp;
    33a0:	0004      	movs	r4, r0
	if (y1>y2)
    33a2:	45a9      	cmp	r9, r5
    33a4:	dd02      	ble.n	33ac <fillRect+0x24>
    33a6:	0033      	movs	r3, r6
		x1 = x2;
    33a8:	0026      	movs	r6, r4
		x2 = temp;
    33aa:	001c      	movs	r4, r3
	REG_PORT_OUTCLR1 = LCD_CS;
    33ac:	2380      	movs	r3, #128	; 0x80
    33ae:	03db      	lsls	r3, r3, #15
    33b0:	4698      	mov	r8, r3
    33b2:	4b11      	ldr	r3, [pc, #68]	; (33f8 <fillRect+0x70>)
    33b4:	4642      	mov	r2, r8
    33b6:	601a      	str	r2, [r3, #0]
	setXY(x1, y1, x2, y2);
    33b8:	b2ab      	uxth	r3, r5
    33ba:	b2a2      	uxth	r2, r4
    33bc:	4649      	mov	r1, r9
    33be:	4668      	mov	r0, sp
    33c0:	80c1      	strh	r1, [r0, #6]
    33c2:	88c1      	ldrh	r1, [r0, #6]
    33c4:	b2b0      	uxth	r0, r6
    33c6:	4f0d      	ldr	r7, [pc, #52]	; (33fc <fillRect+0x74>)
    33c8:	47b8      	blx	r7
	REG_PORT_OUTSET1 = LCD_DC;
    33ca:	4f0d      	ldr	r7, [pc, #52]	; (3400 <fillRect+0x78>)
    33cc:	2380      	movs	r3, #128	; 0x80
    33ce:	041b      	lsls	r3, r3, #16
    33d0:	603b      	str	r3, [r7, #0]
	(((long)(x2-x1)+1)*((long)(y2-y1)+1)));
    33d2:	1ba4      	subs	r4, r4, r6
    33d4:	3401      	adds	r4, #1
    33d6:	464b      	mov	r3, r9
    33d8:	1aea      	subs	r2, r5, r3
    33da:	3201      	adds	r2, #1
	LCD_Fast_Fill(fore_Color_High, fore_Color_Low,
    33dc:	4362      	muls	r2, r4
    33de:	4b09      	ldr	r3, [pc, #36]	; (3404 <fillRect+0x7c>)
    33e0:	8819      	ldrh	r1, [r3, #0]
    33e2:	4b09      	ldr	r3, [pc, #36]	; (3408 <fillRect+0x80>)
    33e4:	8818      	ldrh	r0, [r3, #0]
    33e6:	4b09      	ldr	r3, [pc, #36]	; (340c <fillRect+0x84>)
    33e8:	4798      	blx	r3
	REG_PORT_OUTSET1 = LCD_CS;
    33ea:	4643      	mov	r3, r8
    33ec:	603b      	str	r3, [r7, #0]
}
    33ee:	b003      	add	sp, #12
    33f0:	bc0c      	pop	{r2, r3}
    33f2:	4690      	mov	r8, r2
    33f4:	4699      	mov	r9, r3
    33f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    33f8:	41004494 	.word	0x41004494
    33fc:	00003311 	.word	0x00003311
    3400:	41004498 	.word	0x41004498
    3404:	20000b48 	.word	0x20000b48
    3408:	20000b46 	.word	0x20000b46
    340c:	0000329d 	.word	0x0000329d

00003410 <clrXY>:
{
    3410:	b510      	push	{r4, lr}
	setXY(0,0,display_X_size,display_Y_size);
    3412:	4b04      	ldr	r3, [pc, #16]	; (3424 <clrXY+0x14>)
    3414:	881b      	ldrh	r3, [r3, #0]
    3416:	4a04      	ldr	r2, [pc, #16]	; (3428 <clrXY+0x18>)
    3418:	8812      	ldrh	r2, [r2, #0]
    341a:	2100      	movs	r1, #0
    341c:	2000      	movs	r0, #0
    341e:	4c03      	ldr	r4, [pc, #12]	; (342c <clrXY+0x1c>)
    3420:	47a0      	blx	r4
}
    3422:	bd10      	pop	{r4, pc}
    3424:	2000016a 	.word	0x2000016a
    3428:	20000168 	.word	0x20000168
    342c:	00003311 	.word	0x00003311

00003430 <clrScr>:
{
    3430:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = LCD_CS;
    3432:	2280      	movs	r2, #128	; 0x80
    3434:	03d2      	lsls	r2, r2, #15
    3436:	4b02      	ldr	r3, [pc, #8]	; (3440 <clrScr+0x10>)
    3438:	601a      	str	r2, [r3, #0]
	clrXY();
    343a:	4b02      	ldr	r3, [pc, #8]	; (3444 <clrScr+0x14>)
    343c:	4798      	blx	r3
}
    343e:	bd10      	pop	{r4, pc}
    3440:	41004494 	.word	0x41004494
    3444:	00003411 	.word	0x00003411

00003448 <setPixel>:

void setPixel(uint16_t color)
{
    3448:	b510      	push	{r4, lr}
	//it sets it to a 16-bit color.
	LCD_Write_DATA16((color>>8),(color&0xFF));
    344a:	b2c1      	uxtb	r1, r0
    344c:	0a00      	lsrs	r0, r0, #8
    344e:	4b01      	ldr	r3, [pc, #4]	; (3454 <setPixel+0xc>)
    3450:	4798      	blx	r3
}
    3452:	bd10      	pop	{r4, pc}
    3454:	000034cd 	.word	0x000034cd

00003458 <clearScreen>:
	LCD_Write_DATA8(0x80);
	REG_PORT_OUTSET1 = LCD_CS;
}
*/
void clearScreen(void)
{
    3458:	b510      	push	{r4, lr}
	fore_Color_High = ((r&248)|g>>5);
    345a:	2300      	movs	r3, #0
    345c:	4a06      	ldr	r2, [pc, #24]	; (3478 <clearScreen+0x20>)
    345e:	8013      	strh	r3, [r2, #0]
	fore_Color_Low = ((g&28)<<3|b>>3);
    3460:	4a06      	ldr	r2, [pc, #24]	; (347c <clearScreen+0x24>)
    3462:	8013      	strh	r3, [r2, #0]
	setColorRGB(0,0,0);
	fillRect(0,0,display_Y_size,display_X_size);
    3464:	4b06      	ldr	r3, [pc, #24]	; (3480 <clearScreen+0x28>)
    3466:	881b      	ldrh	r3, [r3, #0]
    3468:	4a06      	ldr	r2, [pc, #24]	; (3484 <clearScreen+0x2c>)
    346a:	8812      	ldrh	r2, [r2, #0]
    346c:	2100      	movs	r1, #0
    346e:	2000      	movs	r0, #0
    3470:	4c05      	ldr	r4, [pc, #20]	; (3488 <clearScreen+0x30>)
    3472:	47a0      	blx	r4
}
    3474:	bd10      	pop	{r4, pc}
    3476:	46c0      	nop			; (mov r8, r8)
    3478:	20000b46 	.word	0x20000b46
    347c:	20000b48 	.word	0x20000b48
    3480:	20000168 	.word	0x20000168
    3484:	2000016a 	.word	0x2000016a
    3488:	00003389 	.word	0x00003389

0000348c <LCD_Write_Bus>:
	fillRect(0,0,799,489);
		
}

void LCD_Write_Bus(char VH, char VL)
{
    348c:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = 0x0000ffff;
    348e:	4c06      	ldr	r4, [pc, #24]	; (34a8 <LCD_Write_Bus+0x1c>)
    3490:	4b06      	ldr	r3, [pc, #24]	; (34ac <LCD_Write_Bus+0x20>)
    3492:	6023      	str	r3, [r4, #0]
	REG_PORT_OUTSET1 = (VH << 8) | VL;
    3494:	0200      	lsls	r0, r0, #8
    3496:	4301      	orrs	r1, r0
    3498:	4b05      	ldr	r3, [pc, #20]	; (34b0 <LCD_Write_Bus+0x24>)
    349a:	6019      	str	r1, [r3, #0]
	REG_PORT_OUTCLR1 = LCD_WR;
    349c:	2280      	movs	r2, #128	; 0x80
    349e:	0292      	lsls	r2, r2, #10
    34a0:	6022      	str	r2, [r4, #0]
	REG_PORT_OUTSET1 = LCD_WR;
    34a2:	601a      	str	r2, [r3, #0]
}
    34a4:	bd10      	pop	{r4, pc}
    34a6:	46c0      	nop			; (mov r8, r8)
    34a8:	41004494 	.word	0x41004494
    34ac:	0000ffff 	.word	0x0000ffff
    34b0:	41004498 	.word	0x41004498

000034b4 <LCD_Write_COM16>:

void LCD_Write_COM16(char VH, char VL)
{
    34b4:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = LCD_DC;
    34b6:	2280      	movs	r2, #128	; 0x80
    34b8:	0412      	lsls	r2, r2, #16
    34ba:	4b02      	ldr	r3, [pc, #8]	; (34c4 <LCD_Write_COM16+0x10>)
    34bc:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(VH,VL);
    34be:	4b02      	ldr	r3, [pc, #8]	; (34c8 <LCD_Write_COM16+0x14>)
    34c0:	4798      	blx	r3
}
    34c2:	bd10      	pop	{r4, pc}
    34c4:	41004494 	.word	0x41004494
    34c8:	0000348d 	.word	0x0000348d

000034cc <LCD_Write_DATA16>:
	REG_PORT_OUTCLR1 = LCD_DC;
	LCD_Write_Bus(0x00, VL);
}

void LCD_Write_DATA16(char VH, char VL)
{
    34cc:	b510      	push	{r4, lr}
	REG_PORT_OUTSET1 = LCD_DC;
    34ce:	2280      	movs	r2, #128	; 0x80
    34d0:	0412      	lsls	r2, r2, #16
    34d2:	4b02      	ldr	r3, [pc, #8]	; (34dc <LCD_Write_DATA16+0x10>)
    34d4:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(VH,VL);
    34d6:	4b02      	ldr	r3, [pc, #8]	; (34e0 <LCD_Write_DATA16+0x14>)
    34d8:	4798      	blx	r3
}
    34da:	bd10      	pop	{r4, pc}
    34dc:	41004498 	.word	0x41004498
    34e0:	0000348d 	.word	0x0000348d

000034e4 <LCD_Write_DATA8>:

void LCD_Write_DATA8(char VL)
{
    34e4:	b510      	push	{r4, lr}
    34e6:	0001      	movs	r1, r0
	REG_PORT_OUTSET1 = LCD_DC;
    34e8:	2280      	movs	r2, #128	; 0x80
    34ea:	0412      	lsls	r2, r2, #16
    34ec:	4b02      	ldr	r3, [pc, #8]	; (34f8 <LCD_Write_DATA8+0x14>)
    34ee:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(0x00, VL);
    34f0:	2000      	movs	r0, #0
    34f2:	4b02      	ldr	r3, [pc, #8]	; (34fc <LCD_Write_DATA8+0x18>)
    34f4:	4798      	blx	r3
}
    34f6:	bd10      	pop	{r4, pc}
    34f8:	41004498 	.word	0x41004498
    34fc:	0000348d 	.word	0x0000348d

00003500 <InitLCD>:
{
    3500:	b5f0      	push	{r4, r5, r6, r7, lr}
    3502:	46c6      	mov	lr, r8
    3504:	b500      	push	{lr}
    3506:	b082      	sub	sp, #8
	REG_PORT_DIRSET1 = 0x0000ffff;		//LCD data bus, PB00 - PB15
    3508:	4b80      	ldr	r3, [pc, #512]	; (370c <InitLCD+0x20c>)
    350a:	4f81      	ldr	r7, [pc, #516]	; (3710 <InitLCD+0x210>)
    350c:	601f      	str	r7, [r3, #0]
	REG_PORT_DIRSET1 = LCD_Reset;
    350e:	2580      	movs	r5, #128	; 0x80
    3510:	05ed      	lsls	r5, r5, #23
    3512:	601d      	str	r5, [r3, #0]
	REG_PORT_DIRSET1 = LCD_CS;
    3514:	2680      	movs	r6, #128	; 0x80
    3516:	03f6      	lsls	r6, r6, #15
    3518:	601e      	str	r6, [r3, #0]
	REG_PORT_DIRSET1 = LCD_WR;
    351a:	2080      	movs	r0, #128	; 0x80
    351c:	0280      	lsls	r0, r0, #10
    351e:	6018      	str	r0, [r3, #0]
	REG_PORT_DIRSET1 = LCD_DC;
    3520:	2180      	movs	r1, #128	; 0x80
    3522:	0409      	lsls	r1, r1, #16
    3524:	6019      	str	r1, [r3, #0]
	REG_PORT_DIRSET1 = LCD_RD;
    3526:	2280      	movs	r2, #128	; 0x80
    3528:	0252      	lsls	r2, r2, #9
    352a:	601a      	str	r2, [r3, #0]
	REG_PORT_OUTCLR1 = 0x0000ffff;
    352c:	4c79      	ldr	r4, [pc, #484]	; (3714 <InitLCD+0x214>)
    352e:	6027      	str	r7, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_Reset;
    3530:	6025      	str	r5, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_CS;
    3532:	6026      	str	r6, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_WR;
    3534:	6020      	str	r0, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_DC;
    3536:	6021      	str	r1, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_RD;
    3538:	6022      	str	r2, [r4, #0]
	REG_PORT_DIRSET1 = PORT_PB16;
    353a:	601a      	str	r2, [r3, #0]
	REG_PORT_OUTSET1 = PORT_PB16;
    353c:	4f76      	ldr	r7, [pc, #472]	; (3718 <InitLCD+0x218>)
    353e:	603a      	str	r2, [r7, #0]
	REG_PORT_OUTSET1 = LCD_Reset;
    3540:	603d      	str	r5, [r7, #0]
	delay_ms(5);
    3542:	2005      	movs	r0, #5
    3544:	4b75      	ldr	r3, [pc, #468]	; (371c <InitLCD+0x21c>)
    3546:	4698      	mov	r8, r3
    3548:	4798      	blx	r3
	REG_PORT_OUTCLR1 = LCD_Reset;
    354a:	6025      	str	r5, [r4, #0]
	delay_ms(5);
    354c:	2005      	movs	r0, #5
    354e:	47c0      	blx	r8
	REG_PORT_OUTSET1 = LCD_Reset;
    3550:	603d      	str	r5, [r7, #0]
	REG_PORT_OUTCLR1 = LCD_CS;
    3552:	6026      	str	r6, [r4, #0]
	for(int i = 0; i < 70; i++)
    3554:	2400      	movs	r4, #0
		REG_PORT_OUTCLR1 = LCD_DC;
    3556:	4b6f      	ldr	r3, [pc, #444]	; (3714 <InitLCD+0x214>)
    3558:	4698      	mov	r8, r3
    355a:	2580      	movs	r5, #128	; 0x80
    355c:	042d      	lsls	r5, r5, #16
    355e:	002f      	movs	r7, r5
		LCD_Write_COM16(belial[i],mulciber[i]);
    3560:	4e6f      	ldr	r6, [pc, #444]	; (3720 <InitLCD+0x220>)
		REG_PORT_OUTCLR1 = LCD_DC;
    3562:	4643      	mov	r3, r8
    3564:	601f      	str	r7, [r3, #0]
		LCD_Write_COM16(belial[i],mulciber[i]);
    3566:	5da1      	ldrb	r1, [r4, r6]
    3568:	4b6e      	ldr	r3, [pc, #440]	; (3724 <InitLCD+0x224>)
    356a:	5ce0      	ldrb	r0, [r4, r3]
    356c:	4b6e      	ldr	r3, [pc, #440]	; (3728 <InitLCD+0x228>)
    356e:	4798      	blx	r3
		REG_PORT_OUTSET1 = LCD_DC;
    3570:	4b69      	ldr	r3, [pc, #420]	; (3718 <InitLCD+0x218>)
    3572:	601d      	str	r5, [r3, #0]
		LCD_Write_DATA8(lucifer[i]);
    3574:	4b6d      	ldr	r3, [pc, #436]	; (372c <InitLCD+0x22c>)
    3576:	5ce0      	ldrb	r0, [r4, r3]
    3578:	4b6d      	ldr	r3, [pc, #436]	; (3730 <InitLCD+0x230>)
    357a:	4798      	blx	r3
	for(int i = 0; i < 70; i++)
    357c:	3401      	adds	r4, #1
    357e:	2c46      	cmp	r4, #70	; 0x46
    3580:	d1ef      	bne.n	3562 <InitLCD+0x62>
    3582:	23d1      	movs	r3, #209	; 0xd1
    3584:	9301      	str	r3, [sp, #4]
			LCD_Write_COM16(k,0x00);
    3586:	4d68      	ldr	r5, [pc, #416]	; (3728 <InitLCD+0x228>)
			LCD_Write_DATA8(beelzebub[l]);
    3588:	4f69      	ldr	r7, [pc, #420]	; (3730 <InitLCD+0x230>)
    358a:	4c6a      	ldr	r4, [pc, #424]	; (3734 <InitLCD+0x234>)
    358c:	0026      	movs	r6, r4
    358e:	3634      	adds	r6, #52	; 0x34
			LCD_Write_COM16(k,0x00);
    3590:	2100      	movs	r1, #0
    3592:	9801      	ldr	r0, [sp, #4]
    3594:	47a8      	blx	r5
			LCD_Write_DATA8(beelzebub[l]);
    3596:	7820      	ldrb	r0, [r4, #0]
    3598:	47b8      	blx	r7
    359a:	3401      	adds	r4, #1
		for(int l = 0; l < 52; l++)
    359c:	42a6      	cmp	r6, r4
    359e:	d1f7      	bne.n	3590 <InitLCD+0x90>
	for(char k = 0xD1; k < 0xD6; k++)
    35a0:	9b01      	ldr	r3, [sp, #4]
    35a2:	3301      	adds	r3, #1
    35a4:	b2db      	uxtb	r3, r3
    35a6:	9301      	str	r3, [sp, #4]
    35a8:	2bd6      	cmp	r3, #214	; 0xd6
    35aa:	d1ee      	bne.n	358a <InitLCD+0x8a>
	LCD_Write_COM16(0xF0, 0x00);LCD_Write_DATA8(0x55);
    35ac:	2100      	movs	r1, #0
    35ae:	20f0      	movs	r0, #240	; 0xf0
    35b0:	4c5d      	ldr	r4, [pc, #372]	; (3728 <InitLCD+0x228>)
    35b2:	47a0      	blx	r4
    35b4:	2055      	movs	r0, #85	; 0x55
    35b6:	4d5e      	ldr	r5, [pc, #376]	; (3730 <InitLCD+0x230>)
    35b8:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x01);LCD_Write_DATA8(0xAA);	
    35ba:	2101      	movs	r1, #1
    35bc:	20f0      	movs	r0, #240	; 0xf0
    35be:	47a0      	blx	r4
    35c0:	20aa      	movs	r0, #170	; 0xaa
    35c2:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x02);LCD_Write_DATA8(0x52);	
    35c4:	2102      	movs	r1, #2
    35c6:	20f0      	movs	r0, #240	; 0xf0
    35c8:	47a0      	blx	r4
    35ca:	2052      	movs	r0, #82	; 0x52
    35cc:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x03);LCD_Write_DATA8(0x08);	
    35ce:	2103      	movs	r1, #3
    35d0:	20f0      	movs	r0, #240	; 0xf0
    35d2:	47a0      	blx	r4
    35d4:	2008      	movs	r0, #8
    35d6:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x04);LCD_Write_DATA8(0x00);	
    35d8:	2104      	movs	r1, #4
    35da:	20f0      	movs	r0, #240	; 0xf0
    35dc:	47a0      	blx	r4
    35de:	2000      	movs	r0, #0
    35e0:	47a8      	blx	r5
	LCD_Write_COM16(0xB1, 0x00);LCD_Write_DATA8(0xCC);
    35e2:	2100      	movs	r1, #0
    35e4:	20b1      	movs	r0, #177	; 0xb1
    35e6:	47a0      	blx	r4
    35e8:	20cc      	movs	r0, #204	; 0xcc
    35ea:	47a8      	blx	r5
	LCD_Write_COM16(0xB1, 0x01);LCD_Write_DATA8(0x00);	
    35ec:	2101      	movs	r1, #1
    35ee:	20b1      	movs	r0, #177	; 0xb1
    35f0:	47a0      	blx	r4
    35f2:	2000      	movs	r0, #0
    35f4:	47a8      	blx	r5
	LCD_Write_COM16(0xB5, 0x00);LCD_Write_DATA8(0x50);	
    35f6:	2100      	movs	r1, #0
    35f8:	20b5      	movs	r0, #181	; 0xb5
    35fa:	47a0      	blx	r4
    35fc:	2050      	movs	r0, #80	; 0x50
    35fe:	47a8      	blx	r5
	LCD_Write_COM16(0xB6, 0x00);LCD_Write_DATA8(0x05);
    3600:	2100      	movs	r1, #0
    3602:	20b6      	movs	r0, #182	; 0xb6
    3604:	47a0      	blx	r4
    3606:	2005      	movs	r0, #5
    3608:	47a8      	blx	r5
	LCD_Write_COM16(0xB7, 0x00);LCD_Write_DATA8(0x70);
    360a:	2100      	movs	r1, #0
    360c:	20b7      	movs	r0, #183	; 0xb7
    360e:	47a0      	blx	r4
    3610:	2070      	movs	r0, #112	; 0x70
    3612:	47a8      	blx	r5
	LCD_Write_COM16(0xB7, 0x01);LCD_Write_DATA8(0x70);
    3614:	2101      	movs	r1, #1
    3616:	20b7      	movs	r0, #183	; 0xb7
    3618:	47a0      	blx	r4
    361a:	2070      	movs	r0, #112	; 0x70
    361c:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x00);LCD_Write_DATA8(0x01);
    361e:	2100      	movs	r1, #0
    3620:	20b8      	movs	r0, #184	; 0xb8
    3622:	47a0      	blx	r4
    3624:	2001      	movs	r0, #1
    3626:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x01);LCD_Write_DATA8(0x03);
    3628:	2101      	movs	r1, #1
    362a:	20b8      	movs	r0, #184	; 0xb8
    362c:	47a0      	blx	r4
    362e:	2003      	movs	r0, #3
    3630:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x02);LCD_Write_DATA8(0x03);
    3632:	2102      	movs	r1, #2
    3634:	20b8      	movs	r0, #184	; 0xb8
    3636:	47a0      	blx	r4
    3638:	2003      	movs	r0, #3
    363a:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x03);LCD_Write_DATA8(0x03);	
    363c:	2103      	movs	r1, #3
    363e:	20b8      	movs	r0, #184	; 0xb8
    3640:	47a0      	blx	r4
    3642:	2003      	movs	r0, #3
    3644:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x00);LCD_Write_DATA8(0x02);
    3646:	2100      	movs	r1, #0
    3648:	20bc      	movs	r0, #188	; 0xbc
    364a:	47a0      	blx	r4
    364c:	2002      	movs	r0, #2
    364e:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x01);LCD_Write_DATA8(0x00);
    3650:	2101      	movs	r1, #1
    3652:	20bc      	movs	r0, #188	; 0xbc
    3654:	47a0      	blx	r4
    3656:	2000      	movs	r0, #0
    3658:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x02);LCD_Write_DATA8(0x00);
    365a:	2102      	movs	r1, #2
    365c:	20bc      	movs	r0, #188	; 0xbc
    365e:	47a0      	blx	r4
    3660:	2000      	movs	r0, #0
    3662:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x00);LCD_Write_DATA8(0xD0);
    3664:	2100      	movs	r1, #0
    3666:	20c9      	movs	r0, #201	; 0xc9
    3668:	47a0      	blx	r4
    366a:	20d0      	movs	r0, #208	; 0xd0
    366c:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x01);LCD_Write_DATA8(0x02);
    366e:	2101      	movs	r1, #1
    3670:	20c9      	movs	r0, #201	; 0xc9
    3672:	47a0      	blx	r4
    3674:	2002      	movs	r0, #2
    3676:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x02);LCD_Write_DATA8(0x50);
    3678:	2102      	movs	r1, #2
    367a:	20c9      	movs	r0, #201	; 0xc9
    367c:	47a0      	blx	r4
    367e:	2050      	movs	r0, #80	; 0x50
    3680:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x03);LCD_Write_DATA8(0x50);
    3682:	2103      	movs	r1, #3
    3684:	20c9      	movs	r0, #201	; 0xc9
    3686:	47a0      	blx	r4
    3688:	2050      	movs	r0, #80	; 0x50
    368a:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x04);LCD_Write_DATA8(0x50);
    368c:	2104      	movs	r1, #4
    368e:	20c9      	movs	r0, #201	; 0xc9
    3690:	47a0      	blx	r4
    3692:	2050      	movs	r0, #80	; 0x50
    3694:	47a8      	blx	r5
	LCD_Write_COM16(0x35, 0x00);LCD_Write_DATA8(0x00);
    3696:	2100      	movs	r1, #0
    3698:	2035      	movs	r0, #53	; 0x35
    369a:	47a0      	blx	r4
    369c:	2000      	movs	r0, #0
    369e:	47a8      	blx	r5
	LCD_Write_COM16(0x3A, 0x00);LCD_Write_DATA8(0x55);
    36a0:	2100      	movs	r1, #0
    36a2:	203a      	movs	r0, #58	; 0x3a
    36a4:	47a0      	blx	r4
    36a6:	2055      	movs	r0, #85	; 0x55
    36a8:	47a8      	blx	r5
	LCD_Write_COM16(0x36, 0x00);LCD_Write_DATA8(0xE2);  //This is the MADCTL register
    36aa:	2100      	movs	r1, #0
    36ac:	2036      	movs	r0, #54	; 0x36
    36ae:	47a0      	blx	r4
    36b0:	20e2      	movs	r0, #226	; 0xe2
    36b2:	47a8      	blx	r5
  	LCD_Write_COM16(0x11,0x00);   //Start Up  
    36b4:	2100      	movs	r1, #0
    36b6:	2011      	movs	r0, #17
    36b8:	47a0      	blx	r4
  	delay_ms(100);
    36ba:	2064      	movs	r0, #100	; 0x64
    36bc:	4e17      	ldr	r6, [pc, #92]	; (371c <InitLCD+0x21c>)
    36be:	47b0      	blx	r6
  	LCD_Write_COM16(0x29,0x00);   //Display On  
    36c0:	2100      	movs	r1, #0
    36c2:	2029      	movs	r0, #41	; 0x29
    36c4:	47a0      	blx	r4
   	delay_ms(100);
    36c6:	2064      	movs	r0, #100	; 0x64
    36c8:	47b0      	blx	r6
	LCD_Write_COM16(0x51,0x00);LCD_Write_DATA8(0xFF);
    36ca:	2100      	movs	r1, #0
    36cc:	2051      	movs	r0, #81	; 0x51
    36ce:	47a0      	blx	r4
    36d0:	20ff      	movs	r0, #255	; 0xff
    36d2:	47a8      	blx	r5
	REG_PORT_OUTSET1 = LCD_CS;
    36d4:	2280      	movs	r2, #128	; 0x80
    36d6:	03d2      	lsls	r2, r2, #15
    36d8:	4b0f      	ldr	r3, [pc, #60]	; (3718 <InitLCD+0x218>)
    36da:	601a      	str	r2, [r3, #0]
	clrScr();
    36dc:	4b16      	ldr	r3, [pc, #88]	; (3738 <InitLCD+0x238>)
    36de:	4798      	blx	r3
	setColorRGB(0,0,0);
    36e0:	2200      	movs	r2, #0
    36e2:	2100      	movs	r1, #0
    36e4:	2000      	movs	r0, #0
    36e6:	4b15      	ldr	r3, [pc, #84]	; (373c <InitLCD+0x23c>)
    36e8:	4798      	blx	r3
	setBackColorRGB(0, 0, 0);
    36ea:	2200      	movs	r2, #0
    36ec:	2100      	movs	r1, #0
    36ee:	2000      	movs	r0, #0
    36f0:	4b13      	ldr	r3, [pc, #76]	; (3740 <InitLCD+0x240>)
    36f2:	4798      	blx	r3
	fillRect(0,0,799,489);
    36f4:	23ea      	movs	r3, #234	; 0xea
    36f6:	33ff      	adds	r3, #255	; 0xff
    36f8:	4a12      	ldr	r2, [pc, #72]	; (3744 <InitLCD+0x244>)
    36fa:	2100      	movs	r1, #0
    36fc:	2000      	movs	r0, #0
    36fe:	4c12      	ldr	r4, [pc, #72]	; (3748 <InitLCD+0x248>)
    3700:	47a0      	blx	r4
}
    3702:	b002      	add	sp, #8
    3704:	bc04      	pop	{r2}
    3706:	4690      	mov	r8, r2
    3708:	bdf0      	pop	{r4, r5, r6, r7, pc}
    370a:	46c0      	nop			; (mov r8, r8)
    370c:	41004488 	.word	0x41004488
    3710:	0000ffff 	.word	0x0000ffff
    3714:	41004494 	.word	0x41004494
    3718:	41004498 	.word	0x41004498
    371c:	00000f45 	.word	0x00000f45
    3720:	000073e0 	.word	0x000073e0
    3724:	00007350 	.word	0x00007350
    3728:	000034b5 	.word	0x000034b5
    372c:	00007398 	.word	0x00007398
    3730:	000034e5 	.word	0x000034e5
    3734:	0000731c 	.word	0x0000731c
    3738:	00003431 	.word	0x00003431
    373c:	0000324d 	.word	0x0000324d
    3740:	00003275 	.word	0x00003275
    3744:	0000031f 	.word	0x0000031f
    3748:	00003389 	.word	0x00003389

0000374c <usart_read_callback>:
	SysTick_Config(SystemCoreClock/1000);
	system_interrupt_enable(SYSTEM_INTERRUPT_SYSTICK);
}

void usart_read_callback(struct usart_module *const usart_module)
{
    374c:	b510      	push	{r4, lr}
	// Read one character from the UART.
	//We can only use this function because it's non-blocking
	//and we can only read one character because reading > 1 means
	//it doesn't complete until _all_ characters are read.
	
	usart_read_buffer_job(&usart_instance, (uint8_t*)&rx_buf, 1);
    374e:	4c06      	ldr	r4, [pc, #24]	; (3768 <usart_read_callback+0x1c>)
    3750:	2201      	movs	r2, #1
    3752:	0021      	movs	r1, r4
    3754:	4805      	ldr	r0, [pc, #20]	; (376c <usart_read_callback+0x20>)
    3756:	4b06      	ldr	r3, [pc, #24]	; (3770 <usart_read_callback+0x24>)
    3758:	4798      	blx	r3
	
	//stuff that ONE CHARACTER into the circular FIFO buffer
	ring_put(ouroboros, rx_buf);
    375a:	7821      	ldrb	r1, [r4, #0]
    375c:	4b05      	ldr	r3, [pc, #20]	; (3774 <usart_read_callback+0x28>)
    375e:	6818      	ldr	r0, [r3, #0]
    3760:	4b05      	ldr	r3, [pc, #20]	; (3778 <usart_read_callback+0x2c>)
    3762:	4798      	blx	r3
}
    3764:	bd10      	pop	{r4, pc}
    3766:	46c0      	nop			; (mov r8, r8)
    3768:	20000b4c 	.word	0x20000b4c
    376c:	2000038c 	.word	0x2000038c
    3770:	00001de5 	.word	0x00001de5
    3774:	20000360 	.word	0x20000360
    3778:	00000141 	.word	0x00000141

0000377c <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    377c:	b570      	push	{r4, r5, r6, lr}
    377e:	b082      	sub	sp, #8
    3780:	0005      	movs	r5, r0
    3782:	000e      	movs	r6, r1
	uint16_t temp = 0;
    3784:	2200      	movs	r2, #0
    3786:	466b      	mov	r3, sp
    3788:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    378a:	4c06      	ldr	r4, [pc, #24]	; (37a4 <usart_serial_getchar+0x28>)
    378c:	466b      	mov	r3, sp
    378e:	1d99      	adds	r1, r3, #6
    3790:	0028      	movs	r0, r5
    3792:	47a0      	blx	r4
    3794:	2800      	cmp	r0, #0
    3796:	d1f9      	bne.n	378c <usart_serial_getchar+0x10>

	*c = temp;
    3798:	466b      	mov	r3, sp
    379a:	3306      	adds	r3, #6
    379c:	881b      	ldrh	r3, [r3, #0]
    379e:	7033      	strb	r3, [r6, #0]
}
    37a0:	b002      	add	sp, #8
    37a2:	bd70      	pop	{r4, r5, r6, pc}
    37a4:	00001d13 	.word	0x00001d13

000037a8 <usart_serial_putchar>:
{
    37a8:	b570      	push	{r4, r5, r6, lr}
    37aa:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    37ac:	b28c      	uxth	r4, r1
    37ae:	4e03      	ldr	r6, [pc, #12]	; (37bc <usart_serial_putchar+0x14>)
    37b0:	0021      	movs	r1, r4
    37b2:	0028      	movs	r0, r5
    37b4:	47b0      	blx	r6
    37b6:	2800      	cmp	r0, #0
    37b8:	d1fa      	bne.n	37b0 <usart_serial_putchar+0x8>
}
    37ba:	bd70      	pop	{r4, r5, r6, pc}
    37bc:	00001ced 	.word	0x00001ced

000037c0 <SysTick_Handler>:
	ul_tickcount++;
    37c0:	4a02      	ldr	r2, [pc, #8]	; (37cc <SysTick_Handler+0xc>)
    37c2:	8813      	ldrh	r3, [r2, #0]
    37c4:	3301      	adds	r3, #1
    37c6:	8013      	strh	r3, [r2, #0]
}
    37c8:	4770      	bx	lr
    37ca:	46c0      	nop			; (mov r8, r8)
    37cc:	200002c4 	.word	0x200002c4

000037d0 <conf_systick>:
{
    37d0:	b510      	push	{r4, lr}
	SysTick_Config(SystemCoreClock/1000);
    37d2:	4b0e      	ldr	r3, [pc, #56]	; (380c <conf_systick+0x3c>)
    37d4:	6818      	ldr	r0, [r3, #0]
    37d6:	21fa      	movs	r1, #250	; 0xfa
    37d8:	0089      	lsls	r1, r1, #2
    37da:	4b0d      	ldr	r3, [pc, #52]	; (3810 <conf_systick+0x40>)
    37dc:	4798      	blx	r3
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    37de:	3801      	subs	r0, #1
    37e0:	4b0c      	ldr	r3, [pc, #48]	; (3814 <conf_systick+0x44>)
    37e2:	4298      	cmp	r0, r3
    37e4:	d80d      	bhi.n	3802 <conf_systick+0x32>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    37e6:	4a0c      	ldr	r2, [pc, #48]	; (3818 <conf_systick+0x48>)
    37e8:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    37ea:	480c      	ldr	r0, [pc, #48]	; (381c <conf_systick+0x4c>)
    37ec:	6a03      	ldr	r3, [r0, #32]
    37ee:	021b      	lsls	r3, r3, #8
    37f0:	0a1b      	lsrs	r3, r3, #8
    37f2:	21c0      	movs	r1, #192	; 0xc0
    37f4:	0609      	lsls	r1, r1, #24
    37f6:	430b      	orrs	r3, r1
    37f8:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    37fa:	2300      	movs	r3, #0
    37fc:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    37fe:	3307      	adds	r3, #7
    3800:	6013      	str	r3, [r2, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3802:	2280      	movs	r2, #128	; 0x80
    3804:	0612      	lsls	r2, r2, #24
    3806:	4b06      	ldr	r3, [pc, #24]	; (3820 <conf_systick+0x50>)
    3808:	601a      	str	r2, [r3, #0]
}
    380a:	bd10      	pop	{r4, pc}
    380c:	20000020 	.word	0x20000020
    3810:	00003b99 	.word	0x00003b99
    3814:	00ffffff 	.word	0x00ffffff
    3818:	e000e010 	.word	0xe000e010
    381c:	e000ed00 	.word	0xe000ed00
    3820:	e000e100 	.word	0xe000e100

00003824 <configure_usart>:

/**************************SERCOM STUFF*******************************/


void configure_usart(void)
{
    3824:	b570      	push	{r4, r5, r6, lr}
    3826:	b090      	sub	sp, #64	; 0x40
	config->data_order       = USART_DATAORDER_LSB;
    3828:	2380      	movs	r3, #128	; 0x80
    382a:	05db      	lsls	r3, r3, #23
    382c:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    382e:	2300      	movs	r3, #0
    3830:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    3832:	22ff      	movs	r2, #255	; 0xff
    3834:	4669      	mov	r1, sp
    3836:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    3838:	2200      	movs	r2, #0
    383a:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    383c:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
    383e:	2196      	movs	r1, #150	; 0x96
    3840:	0189      	lsls	r1, r1, #6
    3842:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
    3844:	2101      	movs	r1, #1
    3846:	2024      	movs	r0, #36	; 0x24
    3848:	466c      	mov	r4, sp
    384a:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    384c:	3001      	adds	r0, #1
    384e:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    3850:	3125      	adds	r1, #37	; 0x25
    3852:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    3854:	3101      	adds	r1, #1
    3856:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    3858:	930a      	str	r3, [sp, #40]	; 0x28
	config->run_in_standby   = false;
    385a:	3105      	adds	r1, #5
    385c:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    385e:	3101      	adds	r1, #1
    3860:	5463      	strb	r3, [r4, r1]
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    3862:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    3864:	8223      	strh	r3, [r4, #16]
	config->lin_slave_enable      = false;
    3866:	76e3      	strb	r3, [r4, #27]
	config->immediate_buffer_overflow_notification  = false;
    3868:	7622      	strb	r2, [r4, #24]
	config->start_frame_detection_enable            = false;
    386a:	7722      	strb	r2, [r4, #28]
	config->encoding_format_enable                  = false;
    386c:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    386e:	2313      	movs	r3, #19
    3870:	76a3      	strb	r3, [r4, #26]
	config->collision_detection_enable              = false;
    3872:	7762      	strb	r2, [r4, #29]
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);

	config_usart.baudrate    = 9600;
	config_usart.mux_setting = USART_RX_1_TX_0_XCK_1;
    3874:	2380      	movs	r3, #128	; 0x80
    3876:	035b      	lsls	r3, r3, #13
    3878:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = PINMUX_PA08D_SERCOM2_PAD0;
    387a:	4b1e      	ldr	r3, [pc, #120]	; (38f4 <configure_usart+0xd0>)
    387c:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = PINMUX_PA09D_SERCOM2_PAD1;
    387e:	4b1e      	ldr	r3, [pc, #120]	; (38f8 <configure_usart+0xd4>)
    3880:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = PINMUX_UNUSED;
    3882:	2301      	movs	r3, #1
    3884:	425b      	negs	r3, r3
    3886:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = PINMUX_UNUSED;
    3888:	930f      	str	r3, [sp, #60]	; 0x3c
	
	
	
	while (usart_init(&usart_instance, SERCOM2, &config_usart) != STATUS_OK) {
    388a:	4d1c      	ldr	r5, [pc, #112]	; (38fc <configure_usart+0xd8>)
    388c:	4c1c      	ldr	r4, [pc, #112]	; (3900 <configure_usart+0xdc>)
    388e:	466a      	mov	r2, sp
    3890:	491c      	ldr	r1, [pc, #112]	; (3904 <configure_usart+0xe0>)
    3892:	0028      	movs	r0, r5
    3894:	47a0      	blx	r4
    3896:	2800      	cmp	r0, #0
    3898:	d1f9      	bne.n	388e <configure_usart+0x6a>
	stdio_base = (void *)module;
    389a:	4c18      	ldr	r4, [pc, #96]	; (38fc <configure_usart+0xd8>)
    389c:	4b1a      	ldr	r3, [pc, #104]	; (3908 <configure_usart+0xe4>)
    389e:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    38a0:	4a1a      	ldr	r2, [pc, #104]	; (390c <configure_usart+0xe8>)
    38a2:	4b1b      	ldr	r3, [pc, #108]	; (3910 <configure_usart+0xec>)
    38a4:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    38a6:	4a1b      	ldr	r2, [pc, #108]	; (3914 <configure_usart+0xf0>)
    38a8:	4b1b      	ldr	r3, [pc, #108]	; (3918 <configure_usart+0xf4>)
    38aa:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    38ac:	466a      	mov	r2, sp
    38ae:	4915      	ldr	r1, [pc, #84]	; (3904 <configure_usart+0xe0>)
    38b0:	0020      	movs	r0, r4
    38b2:	4b13      	ldr	r3, [pc, #76]	; (3900 <configure_usart+0xdc>)
    38b4:	4798      	blx	r3
	setbuf(stdout, NULL);
    38b6:	4e19      	ldr	r6, [pc, #100]	; (391c <configure_usart+0xf8>)
    38b8:	6833      	ldr	r3, [r6, #0]
    38ba:	6898      	ldr	r0, [r3, #8]
    38bc:	2100      	movs	r1, #0
    38be:	4d18      	ldr	r5, [pc, #96]	; (3920 <configure_usart+0xfc>)
    38c0:	47a8      	blx	r5
	setbuf(stdin, NULL);
    38c2:	6833      	ldr	r3, [r6, #0]
    38c4:	6858      	ldr	r0, [r3, #4]
    38c6:	2100      	movs	r1, #0
    38c8:	47a8      	blx	r5
	SercomUsart *const usart_hw = &(module->hw->USART);
    38ca:	6825      	ldr	r5, [r4, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    38cc:	0028      	movs	r0, r5
    38ce:	4b15      	ldr	r3, [pc, #84]	; (3924 <configure_usart+0x100>)
    38d0:	4798      	blx	r3
    38d2:	231f      	movs	r3, #31
    38d4:	4018      	ands	r0, r3
    38d6:	3b1e      	subs	r3, #30
    38d8:	4083      	lsls	r3, r0
    38da:	4a13      	ldr	r2, [pc, #76]	; (3928 <configure_usart+0x104>)
    38dc:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    38de:	6822      	ldr	r2, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
    38e0:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    38e2:	2b00      	cmp	r3, #0
    38e4:	d1fc      	bne.n	38e0 <configure_usart+0xbc>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    38e6:	682b      	ldr	r3, [r5, #0]
    38e8:	2202      	movs	r2, #2
    38ea:	4313      	orrs	r3, r2
    38ec:	602b      	str	r3, [r5, #0]
	}
	stdio_serial_init(&usart_instance, SERCOM2, &config_usart);
	usart_enable(&usart_instance);
}
    38ee:	b010      	add	sp, #64	; 0x40
    38f0:	bd70      	pop	{r4, r5, r6, pc}
    38f2:	46c0      	nop			; (mov r8, r8)
    38f4:	00080003 	.word	0x00080003
    38f8:	00090003 	.word	0x00090003
    38fc:	2000038c 	.word	0x2000038c
    3900:	000019b1 	.word	0x000019b1
    3904:	42001000 	.word	0x42001000
    3908:	20000388 	.word	0x20000388
    390c:	000037a9 	.word	0x000037a9
    3910:	20000384 	.word	0x20000384
    3914:	0000377d 	.word	0x0000377d
    3918:	20000380 	.word	0x20000380
    391c:	20000178 	.word	0x20000178
    3920:	000041fd 	.word	0x000041fd
    3924:	00001921 	.word	0x00001921
    3928:	e000e100 	.word	0xe000e100

0000392c <configure_usart_callbacks>:

void configure_usart_callbacks(void)
{
    392c:	b510      	push	{r4, lr}
	usart_register_callback(&usart_instance,usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
    392e:	4c06      	ldr	r4, [pc, #24]	; (3948 <configure_usart_callbacks+0x1c>)
    3930:	2201      	movs	r2, #1
    3932:	4906      	ldr	r1, [pc, #24]	; (394c <configure_usart_callbacks+0x20>)
    3934:	0020      	movs	r0, r4
    3936:	4b06      	ldr	r3, [pc, #24]	; (3950 <configure_usart_callbacks+0x24>)
    3938:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    393a:	2231      	movs	r2, #49	; 0x31
    393c:	5ca3      	ldrb	r3, [r4, r2]
    393e:	2102      	movs	r1, #2
    3940:	430b      	orrs	r3, r1
    3942:	54a3      	strb	r3, [r4, r2]
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
}
    3944:	bd10      	pop	{r4, pc}
    3946:	46c0      	nop			; (mov r8, r8)
    3948:	2000038c 	.word	0x2000038c
    394c:	0000374d 	.word	0x0000374d
    3950:	00001dcd 	.word	0x00001dcd

00003954 <configure_adc>:
	usart_enable(&usart_USB);
}
*/

void configure_adc(void)
{
    3954:	b510      	push	{r4, lr}
    3956:	b08c      	sub	sp, #48	; 0x30
	struct adc_config config_adc;
	adc_get_config_defaults(&config_adc);
    3958:	4668      	mov	r0, sp
    395a:	4b16      	ldr	r3, [pc, #88]	; (39b4 <configure_adc+0x60>)
    395c:	4798      	blx	r3
	config_adc.clock_source = GCLK_GENERATOR_1;
    395e:	2301      	movs	r3, #1
    3960:	466a      	mov	r2, sp
    3962:	7013      	strb	r3, [r2, #0]
	config_adc.clock_prescaler = ADC_CLOCK_PRESCALER_DIV16;
    3964:	2380      	movs	r3, #128	; 0x80
    3966:	009b      	lsls	r3, r3, #2
    3968:	8053      	strh	r3, [r2, #2]
	config_adc.reference = ADC_REFERENCE_INT1V;
    396a:	2300      	movs	r3, #0
    396c:	7053      	strb	r3, [r2, #1]
	config_adc.positive_input = ADC_POSITIVE_INPUT_TEMP;
    396e:	3318      	adds	r3, #24
    3970:	7313      	strb	r3, [r2, #12]
	config_adc.negative_input = ADC_NEGATIVE_INPUT_GND;
    3972:	23c0      	movs	r3, #192	; 0xc0
    3974:	015b      	lsls	r3, r3, #5
    3976:	81d3      	strh	r3, [r2, #14]
	adc_init(&adc_instance, ADC, &config_adc);
    3978:	4c0f      	ldr	r4, [pc, #60]	; (39b8 <configure_adc+0x64>)
    397a:	4910      	ldr	r1, [pc, #64]	; (39bc <configure_adc+0x68>)
    397c:	0020      	movs	r0, r4
    397e:	4b10      	ldr	r3, [pc, #64]	; (39c0 <configure_adc+0x6c>)
    3980:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    3982:	6822      	ldr	r2, [r4, #0]
    3984:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    3986:	b25b      	sxtb	r3, r3
    3988:	2b00      	cmp	r3, #0
    398a:	dbfb      	blt.n	3984 <configure_adc+0x30>
    398c:	2180      	movs	r1, #128	; 0x80
    398e:	0409      	lsls	r1, r1, #16
    3990:	4b0c      	ldr	r3, [pc, #48]	; (39c4 <configure_adc+0x70>)
    3992:	6019      	str	r1, [r3, #0]
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    3994:	230f      	movs	r3, #15
    3996:	7593      	strb	r3, [r2, #22]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    3998:	7613      	strb	r3, [r2, #24]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    399a:	7813      	ldrb	r3, [r2, #0]
    399c:	2102      	movs	r1, #2
    399e:	430b      	orrs	r3, r1
    39a0:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
    39a2:	4b05      	ldr	r3, [pc, #20]	; (39b8 <configure_adc+0x64>)
    39a4:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    39a6:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    39a8:	b25b      	sxtb	r3, r3
    39aa:	2b00      	cmp	r3, #0
    39ac:	dbfb      	blt.n	39a6 <configure_adc+0x52>
	adc_enable(&adc_instance);
}
    39ae:	b00c      	add	sp, #48	; 0x30
    39b0:	bd10      	pop	{r4, pc}
    39b2:	46c0      	nop			; (mov r8, r8)
    39b4:	00001019 	.word	0x00001019
    39b8:	20000b50 	.word	0x20000b50
    39bc:	42004000 	.word	0x42004000
    39c0:	0000105d 	.word	0x0000105d
    39c4:	e000e100 	.word	0xe000e100

000039c8 <setupBoard>:


void setupBoard(void)
{
    39c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t adcResult;
	uint16_t megaHurtz = (uint16_t)system_gclk_gen_get_hz(0);
    39ca:	2000      	movs	r0, #0
    39cc:	4b31      	ldr	r3, [pc, #196]	; (3a94 <setupBoard+0xcc>)
    39ce:	4798      	blx	r3
    39d0:	b287      	uxth	r7, r0
	

	system_init();
    39d2:	4b31      	ldr	r3, [pc, #196]	; (3a98 <setupBoard+0xd0>)
    39d4:	4798      	blx	r3
	
	configure_adc();
    39d6:	4b31      	ldr	r3, [pc, #196]	; (3a9c <setupBoard+0xd4>)
    39d8:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    39da:	4b31      	ldr	r3, [pc, #196]	; (3aa0 <setupBoard+0xd8>)
    39dc:	6819      	ldr	r1, [r3, #0]
    39de:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    39e0:	b25b      	sxtb	r3, r3
    39e2:	2b00      	cmp	r3, #0
    39e4:	dbfb      	blt.n	39de <setupBoard+0x16>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    39e6:	7b0b      	ldrb	r3, [r1, #12]
    39e8:	2202      	movs	r2, #2
    39ea:	4313      	orrs	r3, r2
    39ec:	730b      	strb	r3, [r1, #12]
    39ee:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    39f0:	b25b      	sxtb	r3, r3
    39f2:	2b00      	cmp	r3, #0
    39f4:	dbfb      	blt.n	39ee <setupBoard+0x26>
	if (int_flags & ADC_INTFLAG_RESRDY) {
    39f6:	2401      	movs	r4, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
    39f8:	2604      	movs	r6, #4
		status_flags |= ADC_STATUS_WINDOW;
    39fa:	2502      	movs	r5, #2
    39fc:	e001      	b.n	3a02 <setupBoard+0x3a>
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    39fe:	4214      	tst	r4, r2
    3a00:	d10a      	bne.n	3a18 <setupBoard+0x50>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    3a02:	7e0b      	ldrb	r3, [r1, #24]
    3a04:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
    3a06:	0022      	movs	r2, r4
    3a08:	401a      	ands	r2, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
    3a0a:	421e      	tst	r6, r3
    3a0c:	d000      	beq.n	3a10 <setupBoard+0x48>
		status_flags |= ADC_STATUS_WINDOW;
    3a0e:	432a      	orrs	r2, r5
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    3a10:	421d      	tst	r5, r3
    3a12:	d0f4      	beq.n	39fe <setupBoard+0x36>
		status_flags |= ADC_STATUS_OVERRUN;
    3a14:	4332      	orrs	r2, r6
    3a16:	e7f2      	b.n	39fe <setupBoard+0x36>
    3a18:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    3a1a:	b25b      	sxtb	r3, r3
    3a1c:	2b00      	cmp	r3, #0
    3a1e:	dbfb      	blt.n	3a18 <setupBoard+0x50>
	*result = adc_module->RESULT.reg;
    3a20:	8b48      	ldrh	r0, [r1, #26]
    3a22:	b280      	uxth	r0, r0
	adc_module->INTFLAG.reg = int_flags;
    3a24:	2301      	movs	r3, #1
    3a26:	760b      	strb	r3, [r1, #24]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    3a28:	7e0a      	ldrb	r2, [r1, #24]
    3a2a:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    3a2c:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    3a2e:	0754      	lsls	r4, r2, #29
    3a30:	d501      	bpl.n	3a36 <setupBoard+0x6e>
		status_flags |= ADC_STATUS_WINDOW;
    3a32:	2402      	movs	r4, #2
    3a34:	4323      	orrs	r3, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    3a36:	0792      	lsls	r2, r2, #30
    3a38:	d501      	bpl.n	3a3e <setupBoard+0x76>
		status_flags |= ADC_STATUS_OVERRUN;
    3a3a:	2204      	movs	r2, #4
    3a3c:	4313      	orrs	r3, r2
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    3a3e:	075b      	lsls	r3, r3, #29
    3a40:	d501      	bpl.n	3a46 <setupBoard+0x7e>
	adc_module->INTFLAG.reg = int_flags;
    3a42:	2302      	movs	r3, #2
    3a44:	760b      	strb	r3, [r1, #24]
	do {
	/* Wait for conversion to be done and read out result */
	} while (adc_read(&adc_instance, &adcResult) == STATUS_BUSY);
	
	
	srand((adcResult ^ megaHurtz));
    3a46:	4078      	eors	r0, r7
    3a48:	4b16      	ldr	r3, [pc, #88]	; (3aa4 <setupBoard+0xdc>)
    3a4a:	4798      	blx	r3
	
	delay_init();
    3a4c:	4b16      	ldr	r3, [pc, #88]	; (3aa8 <setupBoard+0xe0>)
    3a4e:	4798      	blx	r3
	
	conf_systick();
    3a50:	4c16      	ldr	r4, [pc, #88]	; (3aac <setupBoard+0xe4>)
    3a52:	47a0      	blx	r4

	//configure_usart_USB();
	
	configure_usart();
    3a54:	4b16      	ldr	r3, [pc, #88]	; (3ab0 <setupBoard+0xe8>)
    3a56:	4798      	blx	r3
	configure_usart_callbacks();
    3a58:	4b16      	ldr	r3, [pc, #88]	; (3ab4 <setupBoard+0xec>)
    3a5a:	4798      	blx	r3
	cpu_irq_enable();
    3a5c:	2201      	movs	r2, #1
    3a5e:	4b16      	ldr	r3, [pc, #88]	; (3ab8 <setupBoard+0xf0>)
    3a60:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    3a62:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3a66:	b662      	cpsie	i
	system_interrupt_enable_global();
	
	//I have no idea why I need to call this; it's in the callback and it
	//doesn't work without this line here. Remove this at your own peril.
	usart_read_buffer_job(&usart_instance, (uint8_t*)&rx_buf, 1);
    3a68:	4914      	ldr	r1, [pc, #80]	; (3abc <setupBoard+0xf4>)
    3a6a:	4815      	ldr	r0, [pc, #84]	; (3ac0 <setupBoard+0xf8>)
    3a6c:	4b15      	ldr	r3, [pc, #84]	; (3ac4 <setupBoard+0xfc>)
    3a6e:	4798      	blx	r3
	


	printf("\n\rSerial OK 9600 8N1\n\r");
    3a70:	4815      	ldr	r0, [pc, #84]	; (3ac8 <setupBoard+0x100>)
    3a72:	4b16      	ldr	r3, [pc, #88]	; (3acc <setupBoard+0x104>)
    3a74:	4798      	blx	r3

	
	InitLCD();
    3a76:	4b16      	ldr	r3, [pc, #88]	; (3ad0 <setupBoard+0x108>)
    3a78:	4798      	blx	r3
	splashScreen();
    3a7a:	4b16      	ldr	r3, [pc, #88]	; (3ad4 <setupBoard+0x10c>)
    3a7c:	4798      	blx	r3
			
	conf_systick();
    3a7e:	47a0      	blx	r4

	xCharPos=0;
    3a80:	2300      	movs	r3, #0
    3a82:	4a15      	ldr	r2, [pc, #84]	; (3ad8 <setupBoard+0x110>)
    3a84:	8013      	strh	r3, [r2, #0]
	yCharPos=0;
    3a86:	4a15      	ldr	r2, [pc, #84]	; (3adc <setupBoard+0x114>)
    3a88:	8013      	strh	r3, [r2, #0]
	drawChar(0xFF);
    3a8a:	20ff      	movs	r0, #255	; 0xff
    3a8c:	4b14      	ldr	r3, [pc, #80]	; (3ae0 <setupBoard+0x118>)
    3a8e:	4798      	blx	r3
}
    3a90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3a92:	46c0      	nop			; (mov r8, r8)
    3a94:	000024c5 	.word	0x000024c5
    3a98:	00002709 	.word	0x00002709
    3a9c:	00003955 	.word	0x00003955
    3aa0:	20000b50 	.word	0x20000b50
    3aa4:	00004105 	.word	0x00004105
    3aa8:	00000f05 	.word	0x00000f05
    3aac:	000037d1 	.word	0x000037d1
    3ab0:	00003825 	.word	0x00003825
    3ab4:	0000392d 	.word	0x0000392d
    3ab8:	2000001c 	.word	0x2000001c
    3abc:	20000b4c 	.word	0x20000b4c
    3ac0:	2000038c 	.word	0x2000038c
    3ac4:	00001de5 	.word	0x00001de5
    3ac8:	00007428 	.word	0x00007428
    3acc:	000040a9 	.word	0x000040a9
    3ad0:	00003501 	.word	0x00003501
    3ad4:	00000ccd 	.word	0x00000ccd
    3ad8:	200002bc 	.word	0x200002bc
    3adc:	200002be 	.word	0x200002be
    3ae0:	000028ed 	.word	0x000028ed

00003ae4 <main>:
{
    3ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	setupBoard();
    3ae6:	4b20      	ldr	r3, [pc, #128]	; (3b68 <main+0x84>)
    3ae8:	4798      	blx	r3
	uint8_t * buffer  = malloc(UART_BUFFER_SIZE * sizeof(uint8_t));
    3aea:	200a      	movs	r0, #10
    3aec:	4b1f      	ldr	r3, [pc, #124]	; (3b6c <main+0x88>)
    3aee:	4798      	blx	r3
	ouroboros = ring_init(buffer, UART_BUFFER_SIZE);
    3af0:	210a      	movs	r1, #10
    3af2:	4b1f      	ldr	r3, [pc, #124]	; (3b70 <main+0x8c>)
    3af4:	4798      	blx	r3
    3af6:	4b1f      	ldr	r3, [pc, #124]	; (3b74 <main+0x90>)
    3af8:	6018      	str	r0, [r3, #0]
		if((ul_tickcount % (UINT16_MAX/4) == 0) && (funcLock == false))
    3afa:	4f1f      	ldr	r7, [pc, #124]	; (3b78 <main+0x94>)
    3afc:	4e1f      	ldr	r6, [pc, #124]	; (3b7c <main+0x98>)
    3afe:	4d20      	ldr	r5, [pc, #128]	; (3b80 <main+0x9c>)
    3b00:	e015      	b.n	3b2e <main+0x4a>
		if((ul_tickcount % 200 == 0) && (funcLock == false))
    3b02:	21c8      	movs	r1, #200	; 0xc8
    3b04:	0020      	movs	r0, r4
    3b06:	4b1d      	ldr	r3, [pc, #116]	; (3b7c <main+0x98>)
    3b08:	4798      	blx	r3
    3b0a:	b289      	uxth	r1, r1
    3b0c:	2900      	cmp	r1, #0
    3b0e:	d10e      	bne.n	3b2e <main+0x4a>
    3b10:	4b1c      	ldr	r3, [pc, #112]	; (3b84 <main+0xa0>)
    3b12:	781b      	ldrb	r3, [r3, #0]
    3b14:	2b00      	cmp	r3, #0
    3b16:	d10a      	bne.n	3b2e <main+0x4a>
			funcLock = true;
    3b18:	4c1a      	ldr	r4, [pc, #104]	; (3b84 <main+0xa0>)
    3b1a:	2301      	movs	r3, #1
    3b1c:	7023      	strb	r3, [r4, #0]
			readKeyboard();
    3b1e:	4b1a      	ldr	r3, [pc, #104]	; (3b88 <main+0xa4>)
    3b20:	4798      	blx	r3
			printKeyboardBuffer();
    3b22:	4b1a      	ldr	r3, [pc, #104]	; (3b8c <main+0xa8>)
    3b24:	4798      	blx	r3
			parseRXBuffer();
    3b26:	4b1a      	ldr	r3, [pc, #104]	; (3b90 <main+0xac>)
    3b28:	4798      	blx	r3
			funcLock = false;
    3b2a:	2300      	movs	r3, #0
    3b2c:	7023      	strb	r3, [r4, #0]
		__WFI();
    3b2e:	bf30      	wfi
		if((ul_tickcount % (UINT16_MAX/4) == 0) && (funcLock == false))
    3b30:	883c      	ldrh	r4, [r7, #0]
    3b32:	0029      	movs	r1, r5
    3b34:	0020      	movs	r0, r4
    3b36:	47b0      	blx	r6
    3b38:	b289      	uxth	r1, r1
    3b3a:	2900      	cmp	r1, #0
    3b3c:	d1e1      	bne.n	3b02 <main+0x1e>
    3b3e:	4b11      	ldr	r3, [pc, #68]	; (3b84 <main+0xa0>)
    3b40:	781b      	ldrb	r3, [r3, #0]
    3b42:	2b00      	cmp	r3, #0
    3b44:	d1f3      	bne.n	3b2e <main+0x4a>
			funcLock = true;
    3b46:	4c0f      	ldr	r4, [pc, #60]	; (3b84 <main+0xa0>)
    3b48:	3301      	adds	r3, #1
    3b4a:	7023      	strb	r3, [r4, #0]
			blinkCursor();
    3b4c:	4b11      	ldr	r3, [pc, #68]	; (3b94 <main+0xb0>)
    3b4e:	4798      	blx	r3
			funcLock = false;
    3b50:	2300      	movs	r3, #0
    3b52:	7023      	strb	r3, [r4, #0]
		if((ul_tickcount % 200 == 0) && (funcLock == false))
    3b54:	4b08      	ldr	r3, [pc, #32]	; (3b78 <main+0x94>)
    3b56:	8818      	ldrh	r0, [r3, #0]
    3b58:	21c8      	movs	r1, #200	; 0xc8
    3b5a:	4b08      	ldr	r3, [pc, #32]	; (3b7c <main+0x98>)
    3b5c:	4798      	blx	r3
    3b5e:	b289      	uxth	r1, r1
    3b60:	2900      	cmp	r1, #0
    3b62:	d0d9      	beq.n	3b18 <main+0x34>
    3b64:	e7e3      	b.n	3b2e <main+0x4a>
    3b66:	46c0      	nop			; (mov r8, r8)
    3b68:	000039c9 	.word	0x000039c9
    3b6c:	00003f21 	.word	0x00003f21
    3b70:	00000115 	.word	0x00000115
    3b74:	20000360 	.word	0x20000360
    3b78:	200002c4 	.word	0x200002c4
    3b7c:	00003ca5 	.word	0x00003ca5
    3b80:	00003fff 	.word	0x00003fff
    3b84:	200002c2 	.word	0x200002c2
    3b88:	0000304d 	.word	0x0000304d
    3b8c:	00002cb5 	.word	0x00002cb5
    3b90:	00000eb1 	.word	0x00000eb1
    3b94:	000029d5 	.word	0x000029d5

00003b98 <__udivsi3>:
    3b98:	2200      	movs	r2, #0
    3b9a:	0843      	lsrs	r3, r0, #1
    3b9c:	428b      	cmp	r3, r1
    3b9e:	d374      	bcc.n	3c8a <__udivsi3+0xf2>
    3ba0:	0903      	lsrs	r3, r0, #4
    3ba2:	428b      	cmp	r3, r1
    3ba4:	d35f      	bcc.n	3c66 <__udivsi3+0xce>
    3ba6:	0a03      	lsrs	r3, r0, #8
    3ba8:	428b      	cmp	r3, r1
    3baa:	d344      	bcc.n	3c36 <__udivsi3+0x9e>
    3bac:	0b03      	lsrs	r3, r0, #12
    3bae:	428b      	cmp	r3, r1
    3bb0:	d328      	bcc.n	3c04 <__udivsi3+0x6c>
    3bb2:	0c03      	lsrs	r3, r0, #16
    3bb4:	428b      	cmp	r3, r1
    3bb6:	d30d      	bcc.n	3bd4 <__udivsi3+0x3c>
    3bb8:	22ff      	movs	r2, #255	; 0xff
    3bba:	0209      	lsls	r1, r1, #8
    3bbc:	ba12      	rev	r2, r2
    3bbe:	0c03      	lsrs	r3, r0, #16
    3bc0:	428b      	cmp	r3, r1
    3bc2:	d302      	bcc.n	3bca <__udivsi3+0x32>
    3bc4:	1212      	asrs	r2, r2, #8
    3bc6:	0209      	lsls	r1, r1, #8
    3bc8:	d065      	beq.n	3c96 <__udivsi3+0xfe>
    3bca:	0b03      	lsrs	r3, r0, #12
    3bcc:	428b      	cmp	r3, r1
    3bce:	d319      	bcc.n	3c04 <__udivsi3+0x6c>
    3bd0:	e000      	b.n	3bd4 <__udivsi3+0x3c>
    3bd2:	0a09      	lsrs	r1, r1, #8
    3bd4:	0bc3      	lsrs	r3, r0, #15
    3bd6:	428b      	cmp	r3, r1
    3bd8:	d301      	bcc.n	3bde <__udivsi3+0x46>
    3bda:	03cb      	lsls	r3, r1, #15
    3bdc:	1ac0      	subs	r0, r0, r3
    3bde:	4152      	adcs	r2, r2
    3be0:	0b83      	lsrs	r3, r0, #14
    3be2:	428b      	cmp	r3, r1
    3be4:	d301      	bcc.n	3bea <__udivsi3+0x52>
    3be6:	038b      	lsls	r3, r1, #14
    3be8:	1ac0      	subs	r0, r0, r3
    3bea:	4152      	adcs	r2, r2
    3bec:	0b43      	lsrs	r3, r0, #13
    3bee:	428b      	cmp	r3, r1
    3bf0:	d301      	bcc.n	3bf6 <__udivsi3+0x5e>
    3bf2:	034b      	lsls	r3, r1, #13
    3bf4:	1ac0      	subs	r0, r0, r3
    3bf6:	4152      	adcs	r2, r2
    3bf8:	0b03      	lsrs	r3, r0, #12
    3bfa:	428b      	cmp	r3, r1
    3bfc:	d301      	bcc.n	3c02 <__udivsi3+0x6a>
    3bfe:	030b      	lsls	r3, r1, #12
    3c00:	1ac0      	subs	r0, r0, r3
    3c02:	4152      	adcs	r2, r2
    3c04:	0ac3      	lsrs	r3, r0, #11
    3c06:	428b      	cmp	r3, r1
    3c08:	d301      	bcc.n	3c0e <__udivsi3+0x76>
    3c0a:	02cb      	lsls	r3, r1, #11
    3c0c:	1ac0      	subs	r0, r0, r3
    3c0e:	4152      	adcs	r2, r2
    3c10:	0a83      	lsrs	r3, r0, #10
    3c12:	428b      	cmp	r3, r1
    3c14:	d301      	bcc.n	3c1a <__udivsi3+0x82>
    3c16:	028b      	lsls	r3, r1, #10
    3c18:	1ac0      	subs	r0, r0, r3
    3c1a:	4152      	adcs	r2, r2
    3c1c:	0a43      	lsrs	r3, r0, #9
    3c1e:	428b      	cmp	r3, r1
    3c20:	d301      	bcc.n	3c26 <__udivsi3+0x8e>
    3c22:	024b      	lsls	r3, r1, #9
    3c24:	1ac0      	subs	r0, r0, r3
    3c26:	4152      	adcs	r2, r2
    3c28:	0a03      	lsrs	r3, r0, #8
    3c2a:	428b      	cmp	r3, r1
    3c2c:	d301      	bcc.n	3c32 <__udivsi3+0x9a>
    3c2e:	020b      	lsls	r3, r1, #8
    3c30:	1ac0      	subs	r0, r0, r3
    3c32:	4152      	adcs	r2, r2
    3c34:	d2cd      	bcs.n	3bd2 <__udivsi3+0x3a>
    3c36:	09c3      	lsrs	r3, r0, #7
    3c38:	428b      	cmp	r3, r1
    3c3a:	d301      	bcc.n	3c40 <__udivsi3+0xa8>
    3c3c:	01cb      	lsls	r3, r1, #7
    3c3e:	1ac0      	subs	r0, r0, r3
    3c40:	4152      	adcs	r2, r2
    3c42:	0983      	lsrs	r3, r0, #6
    3c44:	428b      	cmp	r3, r1
    3c46:	d301      	bcc.n	3c4c <__udivsi3+0xb4>
    3c48:	018b      	lsls	r3, r1, #6
    3c4a:	1ac0      	subs	r0, r0, r3
    3c4c:	4152      	adcs	r2, r2
    3c4e:	0943      	lsrs	r3, r0, #5
    3c50:	428b      	cmp	r3, r1
    3c52:	d301      	bcc.n	3c58 <__udivsi3+0xc0>
    3c54:	014b      	lsls	r3, r1, #5
    3c56:	1ac0      	subs	r0, r0, r3
    3c58:	4152      	adcs	r2, r2
    3c5a:	0903      	lsrs	r3, r0, #4
    3c5c:	428b      	cmp	r3, r1
    3c5e:	d301      	bcc.n	3c64 <__udivsi3+0xcc>
    3c60:	010b      	lsls	r3, r1, #4
    3c62:	1ac0      	subs	r0, r0, r3
    3c64:	4152      	adcs	r2, r2
    3c66:	08c3      	lsrs	r3, r0, #3
    3c68:	428b      	cmp	r3, r1
    3c6a:	d301      	bcc.n	3c70 <__udivsi3+0xd8>
    3c6c:	00cb      	lsls	r3, r1, #3
    3c6e:	1ac0      	subs	r0, r0, r3
    3c70:	4152      	adcs	r2, r2
    3c72:	0883      	lsrs	r3, r0, #2
    3c74:	428b      	cmp	r3, r1
    3c76:	d301      	bcc.n	3c7c <__udivsi3+0xe4>
    3c78:	008b      	lsls	r3, r1, #2
    3c7a:	1ac0      	subs	r0, r0, r3
    3c7c:	4152      	adcs	r2, r2
    3c7e:	0843      	lsrs	r3, r0, #1
    3c80:	428b      	cmp	r3, r1
    3c82:	d301      	bcc.n	3c88 <__udivsi3+0xf0>
    3c84:	004b      	lsls	r3, r1, #1
    3c86:	1ac0      	subs	r0, r0, r3
    3c88:	4152      	adcs	r2, r2
    3c8a:	1a41      	subs	r1, r0, r1
    3c8c:	d200      	bcs.n	3c90 <__udivsi3+0xf8>
    3c8e:	4601      	mov	r1, r0
    3c90:	4152      	adcs	r2, r2
    3c92:	4610      	mov	r0, r2
    3c94:	4770      	bx	lr
    3c96:	e7ff      	b.n	3c98 <__udivsi3+0x100>
    3c98:	b501      	push	{r0, lr}
    3c9a:	2000      	movs	r0, #0
    3c9c:	f000 f8f0 	bl	3e80 <__aeabi_idiv0>
    3ca0:	bd02      	pop	{r1, pc}
    3ca2:	46c0      	nop			; (mov r8, r8)

00003ca4 <__aeabi_uidivmod>:
    3ca4:	2900      	cmp	r1, #0
    3ca6:	d0f7      	beq.n	3c98 <__udivsi3+0x100>
    3ca8:	e776      	b.n	3b98 <__udivsi3>
    3caa:	4770      	bx	lr

00003cac <__divsi3>:
    3cac:	4603      	mov	r3, r0
    3cae:	430b      	orrs	r3, r1
    3cb0:	d47f      	bmi.n	3db2 <__divsi3+0x106>
    3cb2:	2200      	movs	r2, #0
    3cb4:	0843      	lsrs	r3, r0, #1
    3cb6:	428b      	cmp	r3, r1
    3cb8:	d374      	bcc.n	3da4 <__divsi3+0xf8>
    3cba:	0903      	lsrs	r3, r0, #4
    3cbc:	428b      	cmp	r3, r1
    3cbe:	d35f      	bcc.n	3d80 <__divsi3+0xd4>
    3cc0:	0a03      	lsrs	r3, r0, #8
    3cc2:	428b      	cmp	r3, r1
    3cc4:	d344      	bcc.n	3d50 <__divsi3+0xa4>
    3cc6:	0b03      	lsrs	r3, r0, #12
    3cc8:	428b      	cmp	r3, r1
    3cca:	d328      	bcc.n	3d1e <__divsi3+0x72>
    3ccc:	0c03      	lsrs	r3, r0, #16
    3cce:	428b      	cmp	r3, r1
    3cd0:	d30d      	bcc.n	3cee <__divsi3+0x42>
    3cd2:	22ff      	movs	r2, #255	; 0xff
    3cd4:	0209      	lsls	r1, r1, #8
    3cd6:	ba12      	rev	r2, r2
    3cd8:	0c03      	lsrs	r3, r0, #16
    3cda:	428b      	cmp	r3, r1
    3cdc:	d302      	bcc.n	3ce4 <__divsi3+0x38>
    3cde:	1212      	asrs	r2, r2, #8
    3ce0:	0209      	lsls	r1, r1, #8
    3ce2:	d065      	beq.n	3db0 <__divsi3+0x104>
    3ce4:	0b03      	lsrs	r3, r0, #12
    3ce6:	428b      	cmp	r3, r1
    3ce8:	d319      	bcc.n	3d1e <__divsi3+0x72>
    3cea:	e000      	b.n	3cee <__divsi3+0x42>
    3cec:	0a09      	lsrs	r1, r1, #8
    3cee:	0bc3      	lsrs	r3, r0, #15
    3cf0:	428b      	cmp	r3, r1
    3cf2:	d301      	bcc.n	3cf8 <__divsi3+0x4c>
    3cf4:	03cb      	lsls	r3, r1, #15
    3cf6:	1ac0      	subs	r0, r0, r3
    3cf8:	4152      	adcs	r2, r2
    3cfa:	0b83      	lsrs	r3, r0, #14
    3cfc:	428b      	cmp	r3, r1
    3cfe:	d301      	bcc.n	3d04 <__divsi3+0x58>
    3d00:	038b      	lsls	r3, r1, #14
    3d02:	1ac0      	subs	r0, r0, r3
    3d04:	4152      	adcs	r2, r2
    3d06:	0b43      	lsrs	r3, r0, #13
    3d08:	428b      	cmp	r3, r1
    3d0a:	d301      	bcc.n	3d10 <__divsi3+0x64>
    3d0c:	034b      	lsls	r3, r1, #13
    3d0e:	1ac0      	subs	r0, r0, r3
    3d10:	4152      	adcs	r2, r2
    3d12:	0b03      	lsrs	r3, r0, #12
    3d14:	428b      	cmp	r3, r1
    3d16:	d301      	bcc.n	3d1c <__divsi3+0x70>
    3d18:	030b      	lsls	r3, r1, #12
    3d1a:	1ac0      	subs	r0, r0, r3
    3d1c:	4152      	adcs	r2, r2
    3d1e:	0ac3      	lsrs	r3, r0, #11
    3d20:	428b      	cmp	r3, r1
    3d22:	d301      	bcc.n	3d28 <__divsi3+0x7c>
    3d24:	02cb      	lsls	r3, r1, #11
    3d26:	1ac0      	subs	r0, r0, r3
    3d28:	4152      	adcs	r2, r2
    3d2a:	0a83      	lsrs	r3, r0, #10
    3d2c:	428b      	cmp	r3, r1
    3d2e:	d301      	bcc.n	3d34 <__divsi3+0x88>
    3d30:	028b      	lsls	r3, r1, #10
    3d32:	1ac0      	subs	r0, r0, r3
    3d34:	4152      	adcs	r2, r2
    3d36:	0a43      	lsrs	r3, r0, #9
    3d38:	428b      	cmp	r3, r1
    3d3a:	d301      	bcc.n	3d40 <__divsi3+0x94>
    3d3c:	024b      	lsls	r3, r1, #9
    3d3e:	1ac0      	subs	r0, r0, r3
    3d40:	4152      	adcs	r2, r2
    3d42:	0a03      	lsrs	r3, r0, #8
    3d44:	428b      	cmp	r3, r1
    3d46:	d301      	bcc.n	3d4c <__divsi3+0xa0>
    3d48:	020b      	lsls	r3, r1, #8
    3d4a:	1ac0      	subs	r0, r0, r3
    3d4c:	4152      	adcs	r2, r2
    3d4e:	d2cd      	bcs.n	3cec <__divsi3+0x40>
    3d50:	09c3      	lsrs	r3, r0, #7
    3d52:	428b      	cmp	r3, r1
    3d54:	d301      	bcc.n	3d5a <__divsi3+0xae>
    3d56:	01cb      	lsls	r3, r1, #7
    3d58:	1ac0      	subs	r0, r0, r3
    3d5a:	4152      	adcs	r2, r2
    3d5c:	0983      	lsrs	r3, r0, #6
    3d5e:	428b      	cmp	r3, r1
    3d60:	d301      	bcc.n	3d66 <__divsi3+0xba>
    3d62:	018b      	lsls	r3, r1, #6
    3d64:	1ac0      	subs	r0, r0, r3
    3d66:	4152      	adcs	r2, r2
    3d68:	0943      	lsrs	r3, r0, #5
    3d6a:	428b      	cmp	r3, r1
    3d6c:	d301      	bcc.n	3d72 <__divsi3+0xc6>
    3d6e:	014b      	lsls	r3, r1, #5
    3d70:	1ac0      	subs	r0, r0, r3
    3d72:	4152      	adcs	r2, r2
    3d74:	0903      	lsrs	r3, r0, #4
    3d76:	428b      	cmp	r3, r1
    3d78:	d301      	bcc.n	3d7e <__divsi3+0xd2>
    3d7a:	010b      	lsls	r3, r1, #4
    3d7c:	1ac0      	subs	r0, r0, r3
    3d7e:	4152      	adcs	r2, r2
    3d80:	08c3      	lsrs	r3, r0, #3
    3d82:	428b      	cmp	r3, r1
    3d84:	d301      	bcc.n	3d8a <__divsi3+0xde>
    3d86:	00cb      	lsls	r3, r1, #3
    3d88:	1ac0      	subs	r0, r0, r3
    3d8a:	4152      	adcs	r2, r2
    3d8c:	0883      	lsrs	r3, r0, #2
    3d8e:	428b      	cmp	r3, r1
    3d90:	d301      	bcc.n	3d96 <__divsi3+0xea>
    3d92:	008b      	lsls	r3, r1, #2
    3d94:	1ac0      	subs	r0, r0, r3
    3d96:	4152      	adcs	r2, r2
    3d98:	0843      	lsrs	r3, r0, #1
    3d9a:	428b      	cmp	r3, r1
    3d9c:	d301      	bcc.n	3da2 <__divsi3+0xf6>
    3d9e:	004b      	lsls	r3, r1, #1
    3da0:	1ac0      	subs	r0, r0, r3
    3da2:	4152      	adcs	r2, r2
    3da4:	1a41      	subs	r1, r0, r1
    3da6:	d200      	bcs.n	3daa <__divsi3+0xfe>
    3da8:	4601      	mov	r1, r0
    3daa:	4152      	adcs	r2, r2
    3dac:	4610      	mov	r0, r2
    3dae:	4770      	bx	lr
    3db0:	e05d      	b.n	3e6e <__divsi3+0x1c2>
    3db2:	0fca      	lsrs	r2, r1, #31
    3db4:	d000      	beq.n	3db8 <__divsi3+0x10c>
    3db6:	4249      	negs	r1, r1
    3db8:	1003      	asrs	r3, r0, #32
    3dba:	d300      	bcc.n	3dbe <__divsi3+0x112>
    3dbc:	4240      	negs	r0, r0
    3dbe:	4053      	eors	r3, r2
    3dc0:	2200      	movs	r2, #0
    3dc2:	469c      	mov	ip, r3
    3dc4:	0903      	lsrs	r3, r0, #4
    3dc6:	428b      	cmp	r3, r1
    3dc8:	d32d      	bcc.n	3e26 <__divsi3+0x17a>
    3dca:	0a03      	lsrs	r3, r0, #8
    3dcc:	428b      	cmp	r3, r1
    3dce:	d312      	bcc.n	3df6 <__divsi3+0x14a>
    3dd0:	22fc      	movs	r2, #252	; 0xfc
    3dd2:	0189      	lsls	r1, r1, #6
    3dd4:	ba12      	rev	r2, r2
    3dd6:	0a03      	lsrs	r3, r0, #8
    3dd8:	428b      	cmp	r3, r1
    3dda:	d30c      	bcc.n	3df6 <__divsi3+0x14a>
    3ddc:	0189      	lsls	r1, r1, #6
    3dde:	1192      	asrs	r2, r2, #6
    3de0:	428b      	cmp	r3, r1
    3de2:	d308      	bcc.n	3df6 <__divsi3+0x14a>
    3de4:	0189      	lsls	r1, r1, #6
    3de6:	1192      	asrs	r2, r2, #6
    3de8:	428b      	cmp	r3, r1
    3dea:	d304      	bcc.n	3df6 <__divsi3+0x14a>
    3dec:	0189      	lsls	r1, r1, #6
    3dee:	d03a      	beq.n	3e66 <__divsi3+0x1ba>
    3df0:	1192      	asrs	r2, r2, #6
    3df2:	e000      	b.n	3df6 <__divsi3+0x14a>
    3df4:	0989      	lsrs	r1, r1, #6
    3df6:	09c3      	lsrs	r3, r0, #7
    3df8:	428b      	cmp	r3, r1
    3dfa:	d301      	bcc.n	3e00 <__divsi3+0x154>
    3dfc:	01cb      	lsls	r3, r1, #7
    3dfe:	1ac0      	subs	r0, r0, r3
    3e00:	4152      	adcs	r2, r2
    3e02:	0983      	lsrs	r3, r0, #6
    3e04:	428b      	cmp	r3, r1
    3e06:	d301      	bcc.n	3e0c <__divsi3+0x160>
    3e08:	018b      	lsls	r3, r1, #6
    3e0a:	1ac0      	subs	r0, r0, r3
    3e0c:	4152      	adcs	r2, r2
    3e0e:	0943      	lsrs	r3, r0, #5
    3e10:	428b      	cmp	r3, r1
    3e12:	d301      	bcc.n	3e18 <__divsi3+0x16c>
    3e14:	014b      	lsls	r3, r1, #5
    3e16:	1ac0      	subs	r0, r0, r3
    3e18:	4152      	adcs	r2, r2
    3e1a:	0903      	lsrs	r3, r0, #4
    3e1c:	428b      	cmp	r3, r1
    3e1e:	d301      	bcc.n	3e24 <__divsi3+0x178>
    3e20:	010b      	lsls	r3, r1, #4
    3e22:	1ac0      	subs	r0, r0, r3
    3e24:	4152      	adcs	r2, r2
    3e26:	08c3      	lsrs	r3, r0, #3
    3e28:	428b      	cmp	r3, r1
    3e2a:	d301      	bcc.n	3e30 <__divsi3+0x184>
    3e2c:	00cb      	lsls	r3, r1, #3
    3e2e:	1ac0      	subs	r0, r0, r3
    3e30:	4152      	adcs	r2, r2
    3e32:	0883      	lsrs	r3, r0, #2
    3e34:	428b      	cmp	r3, r1
    3e36:	d301      	bcc.n	3e3c <__divsi3+0x190>
    3e38:	008b      	lsls	r3, r1, #2
    3e3a:	1ac0      	subs	r0, r0, r3
    3e3c:	4152      	adcs	r2, r2
    3e3e:	d2d9      	bcs.n	3df4 <__divsi3+0x148>
    3e40:	0843      	lsrs	r3, r0, #1
    3e42:	428b      	cmp	r3, r1
    3e44:	d301      	bcc.n	3e4a <__divsi3+0x19e>
    3e46:	004b      	lsls	r3, r1, #1
    3e48:	1ac0      	subs	r0, r0, r3
    3e4a:	4152      	adcs	r2, r2
    3e4c:	1a41      	subs	r1, r0, r1
    3e4e:	d200      	bcs.n	3e52 <__divsi3+0x1a6>
    3e50:	4601      	mov	r1, r0
    3e52:	4663      	mov	r3, ip
    3e54:	4152      	adcs	r2, r2
    3e56:	105b      	asrs	r3, r3, #1
    3e58:	4610      	mov	r0, r2
    3e5a:	d301      	bcc.n	3e60 <__divsi3+0x1b4>
    3e5c:	4240      	negs	r0, r0
    3e5e:	2b00      	cmp	r3, #0
    3e60:	d500      	bpl.n	3e64 <__divsi3+0x1b8>
    3e62:	4249      	negs	r1, r1
    3e64:	4770      	bx	lr
    3e66:	4663      	mov	r3, ip
    3e68:	105b      	asrs	r3, r3, #1
    3e6a:	d300      	bcc.n	3e6e <__divsi3+0x1c2>
    3e6c:	4240      	negs	r0, r0
    3e6e:	b501      	push	{r0, lr}
    3e70:	2000      	movs	r0, #0
    3e72:	f000 f805 	bl	3e80 <__aeabi_idiv0>
    3e76:	bd02      	pop	{r1, pc}

00003e78 <__aeabi_idivmod>:
    3e78:	2900      	cmp	r1, #0
    3e7a:	d0f8      	beq.n	3e6e <__divsi3+0x1c2>
    3e7c:	e716      	b.n	3cac <__divsi3>
    3e7e:	4770      	bx	lr

00003e80 <__aeabi_idiv0>:
    3e80:	4770      	bx	lr
    3e82:	46c0      	nop			; (mov r8, r8)

00003e84 <__aeabi_lmul>:
    3e84:	b5f0      	push	{r4, r5, r6, r7, lr}
    3e86:	46ce      	mov	lr, r9
    3e88:	4647      	mov	r7, r8
    3e8a:	0415      	lsls	r5, r2, #16
    3e8c:	0c2d      	lsrs	r5, r5, #16
    3e8e:	002e      	movs	r6, r5
    3e90:	b580      	push	{r7, lr}
    3e92:	0407      	lsls	r7, r0, #16
    3e94:	0c14      	lsrs	r4, r2, #16
    3e96:	0c3f      	lsrs	r7, r7, #16
    3e98:	4699      	mov	r9, r3
    3e9a:	0c03      	lsrs	r3, r0, #16
    3e9c:	437e      	muls	r6, r7
    3e9e:	435d      	muls	r5, r3
    3ea0:	4367      	muls	r7, r4
    3ea2:	4363      	muls	r3, r4
    3ea4:	197f      	adds	r7, r7, r5
    3ea6:	0c34      	lsrs	r4, r6, #16
    3ea8:	19e4      	adds	r4, r4, r7
    3eaa:	469c      	mov	ip, r3
    3eac:	42a5      	cmp	r5, r4
    3eae:	d903      	bls.n	3eb8 <__aeabi_lmul+0x34>
    3eb0:	2380      	movs	r3, #128	; 0x80
    3eb2:	025b      	lsls	r3, r3, #9
    3eb4:	4698      	mov	r8, r3
    3eb6:	44c4      	add	ip, r8
    3eb8:	464b      	mov	r3, r9
    3eba:	4351      	muls	r1, r2
    3ebc:	4343      	muls	r3, r0
    3ebe:	0436      	lsls	r6, r6, #16
    3ec0:	0c36      	lsrs	r6, r6, #16
    3ec2:	0c25      	lsrs	r5, r4, #16
    3ec4:	0424      	lsls	r4, r4, #16
    3ec6:	4465      	add	r5, ip
    3ec8:	19a4      	adds	r4, r4, r6
    3eca:	1859      	adds	r1, r3, r1
    3ecc:	1949      	adds	r1, r1, r5
    3ece:	0020      	movs	r0, r4
    3ed0:	bc0c      	pop	{r2, r3}
    3ed2:	4690      	mov	r8, r2
    3ed4:	4699      	mov	r9, r3
    3ed6:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003ed8 <__libc_init_array>:
    3ed8:	b570      	push	{r4, r5, r6, lr}
    3eda:	2600      	movs	r6, #0
    3edc:	4d0c      	ldr	r5, [pc, #48]	; (3f10 <__libc_init_array+0x38>)
    3ede:	4c0d      	ldr	r4, [pc, #52]	; (3f14 <__libc_init_array+0x3c>)
    3ee0:	1b64      	subs	r4, r4, r5
    3ee2:	10a4      	asrs	r4, r4, #2
    3ee4:	42a6      	cmp	r6, r4
    3ee6:	d109      	bne.n	3efc <__libc_init_array+0x24>
    3ee8:	2600      	movs	r6, #0
    3eea:	f003 faf5 	bl	74d8 <_init>
    3eee:	4d0a      	ldr	r5, [pc, #40]	; (3f18 <__libc_init_array+0x40>)
    3ef0:	4c0a      	ldr	r4, [pc, #40]	; (3f1c <__libc_init_array+0x44>)
    3ef2:	1b64      	subs	r4, r4, r5
    3ef4:	10a4      	asrs	r4, r4, #2
    3ef6:	42a6      	cmp	r6, r4
    3ef8:	d105      	bne.n	3f06 <__libc_init_array+0x2e>
    3efa:	bd70      	pop	{r4, r5, r6, pc}
    3efc:	00b3      	lsls	r3, r6, #2
    3efe:	58eb      	ldr	r3, [r5, r3]
    3f00:	4798      	blx	r3
    3f02:	3601      	adds	r6, #1
    3f04:	e7ee      	b.n	3ee4 <__libc_init_array+0xc>
    3f06:	00b3      	lsls	r3, r6, #2
    3f08:	58eb      	ldr	r3, [r5, r3]
    3f0a:	4798      	blx	r3
    3f0c:	3601      	adds	r6, #1
    3f0e:	e7f2      	b.n	3ef6 <__libc_init_array+0x1e>
    3f10:	000074e4 	.word	0x000074e4
    3f14:	000074e4 	.word	0x000074e4
    3f18:	000074e4 	.word	0x000074e4
    3f1c:	000074e8 	.word	0x000074e8

00003f20 <malloc>:
    3f20:	b510      	push	{r4, lr}
    3f22:	4b03      	ldr	r3, [pc, #12]	; (3f30 <malloc+0x10>)
    3f24:	0001      	movs	r1, r0
    3f26:	6818      	ldr	r0, [r3, #0]
    3f28:	f000 f860 	bl	3fec <_malloc_r>
    3f2c:	bd10      	pop	{r4, pc}
    3f2e:	46c0      	nop			; (mov r8, r8)
    3f30:	20000178 	.word	0x20000178

00003f34 <memcpy>:
    3f34:	2300      	movs	r3, #0
    3f36:	b510      	push	{r4, lr}
    3f38:	429a      	cmp	r2, r3
    3f3a:	d100      	bne.n	3f3e <memcpy+0xa>
    3f3c:	bd10      	pop	{r4, pc}
    3f3e:	5ccc      	ldrb	r4, [r1, r3]
    3f40:	54c4      	strb	r4, [r0, r3]
    3f42:	3301      	adds	r3, #1
    3f44:	e7f8      	b.n	3f38 <memcpy+0x4>

00003f46 <memset>:
    3f46:	0003      	movs	r3, r0
    3f48:	1882      	adds	r2, r0, r2
    3f4a:	4293      	cmp	r3, r2
    3f4c:	d100      	bne.n	3f50 <memset+0xa>
    3f4e:	4770      	bx	lr
    3f50:	7019      	strb	r1, [r3, #0]
    3f52:	3301      	adds	r3, #1
    3f54:	e7f9      	b.n	3f4a <memset+0x4>
	...

00003f58 <_free_r>:
    3f58:	b570      	push	{r4, r5, r6, lr}
    3f5a:	0005      	movs	r5, r0
    3f5c:	2900      	cmp	r1, #0
    3f5e:	d010      	beq.n	3f82 <_free_r+0x2a>
    3f60:	1f0c      	subs	r4, r1, #4
    3f62:	6823      	ldr	r3, [r4, #0]
    3f64:	2b00      	cmp	r3, #0
    3f66:	da00      	bge.n	3f6a <_free_r+0x12>
    3f68:	18e4      	adds	r4, r4, r3
    3f6a:	0028      	movs	r0, r5
    3f6c:	f000 fbfe 	bl	476c <__malloc_lock>
    3f70:	4a1d      	ldr	r2, [pc, #116]	; (3fe8 <_free_r+0x90>)
    3f72:	6813      	ldr	r3, [r2, #0]
    3f74:	2b00      	cmp	r3, #0
    3f76:	d105      	bne.n	3f84 <_free_r+0x2c>
    3f78:	6063      	str	r3, [r4, #4]
    3f7a:	6014      	str	r4, [r2, #0]
    3f7c:	0028      	movs	r0, r5
    3f7e:	f000 fbf6 	bl	476e <__malloc_unlock>
    3f82:	bd70      	pop	{r4, r5, r6, pc}
    3f84:	42a3      	cmp	r3, r4
    3f86:	d909      	bls.n	3f9c <_free_r+0x44>
    3f88:	6821      	ldr	r1, [r4, #0]
    3f8a:	1860      	adds	r0, r4, r1
    3f8c:	4283      	cmp	r3, r0
    3f8e:	d1f3      	bne.n	3f78 <_free_r+0x20>
    3f90:	6818      	ldr	r0, [r3, #0]
    3f92:	685b      	ldr	r3, [r3, #4]
    3f94:	1841      	adds	r1, r0, r1
    3f96:	6021      	str	r1, [r4, #0]
    3f98:	e7ee      	b.n	3f78 <_free_r+0x20>
    3f9a:	0013      	movs	r3, r2
    3f9c:	685a      	ldr	r2, [r3, #4]
    3f9e:	2a00      	cmp	r2, #0
    3fa0:	d001      	beq.n	3fa6 <_free_r+0x4e>
    3fa2:	42a2      	cmp	r2, r4
    3fa4:	d9f9      	bls.n	3f9a <_free_r+0x42>
    3fa6:	6819      	ldr	r1, [r3, #0]
    3fa8:	1858      	adds	r0, r3, r1
    3faa:	42a0      	cmp	r0, r4
    3fac:	d10b      	bne.n	3fc6 <_free_r+0x6e>
    3fae:	6820      	ldr	r0, [r4, #0]
    3fb0:	1809      	adds	r1, r1, r0
    3fb2:	1858      	adds	r0, r3, r1
    3fb4:	6019      	str	r1, [r3, #0]
    3fb6:	4282      	cmp	r2, r0
    3fb8:	d1e0      	bne.n	3f7c <_free_r+0x24>
    3fba:	6810      	ldr	r0, [r2, #0]
    3fbc:	6852      	ldr	r2, [r2, #4]
    3fbe:	1841      	adds	r1, r0, r1
    3fc0:	6019      	str	r1, [r3, #0]
    3fc2:	605a      	str	r2, [r3, #4]
    3fc4:	e7da      	b.n	3f7c <_free_r+0x24>
    3fc6:	42a0      	cmp	r0, r4
    3fc8:	d902      	bls.n	3fd0 <_free_r+0x78>
    3fca:	230c      	movs	r3, #12
    3fcc:	602b      	str	r3, [r5, #0]
    3fce:	e7d5      	b.n	3f7c <_free_r+0x24>
    3fd0:	6821      	ldr	r1, [r4, #0]
    3fd2:	1860      	adds	r0, r4, r1
    3fd4:	4282      	cmp	r2, r0
    3fd6:	d103      	bne.n	3fe0 <_free_r+0x88>
    3fd8:	6810      	ldr	r0, [r2, #0]
    3fda:	6852      	ldr	r2, [r2, #4]
    3fdc:	1841      	adds	r1, r0, r1
    3fde:	6021      	str	r1, [r4, #0]
    3fe0:	6062      	str	r2, [r4, #4]
    3fe2:	605c      	str	r4, [r3, #4]
    3fe4:	e7ca      	b.n	3f7c <_free_r+0x24>
    3fe6:	46c0      	nop			; (mov r8, r8)
    3fe8:	200002c8 	.word	0x200002c8

00003fec <_malloc_r>:
    3fec:	2303      	movs	r3, #3
    3fee:	b570      	push	{r4, r5, r6, lr}
    3ff0:	1ccd      	adds	r5, r1, #3
    3ff2:	439d      	bics	r5, r3
    3ff4:	3508      	adds	r5, #8
    3ff6:	0006      	movs	r6, r0
    3ff8:	2d0c      	cmp	r5, #12
    3ffa:	d21e      	bcs.n	403a <_malloc_r+0x4e>
    3ffc:	250c      	movs	r5, #12
    3ffe:	42a9      	cmp	r1, r5
    4000:	d81d      	bhi.n	403e <_malloc_r+0x52>
    4002:	0030      	movs	r0, r6
    4004:	f000 fbb2 	bl	476c <__malloc_lock>
    4008:	4a25      	ldr	r2, [pc, #148]	; (40a0 <_malloc_r+0xb4>)
    400a:	6814      	ldr	r4, [r2, #0]
    400c:	0021      	movs	r1, r4
    400e:	2900      	cmp	r1, #0
    4010:	d119      	bne.n	4046 <_malloc_r+0x5a>
    4012:	4c24      	ldr	r4, [pc, #144]	; (40a4 <_malloc_r+0xb8>)
    4014:	6823      	ldr	r3, [r4, #0]
    4016:	2b00      	cmp	r3, #0
    4018:	d103      	bne.n	4022 <_malloc_r+0x36>
    401a:	0030      	movs	r0, r6
    401c:	f000 f8dc 	bl	41d8 <_sbrk_r>
    4020:	6020      	str	r0, [r4, #0]
    4022:	0029      	movs	r1, r5
    4024:	0030      	movs	r0, r6
    4026:	f000 f8d7 	bl	41d8 <_sbrk_r>
    402a:	1c43      	adds	r3, r0, #1
    402c:	d12c      	bne.n	4088 <_malloc_r+0x9c>
    402e:	230c      	movs	r3, #12
    4030:	0030      	movs	r0, r6
    4032:	6033      	str	r3, [r6, #0]
    4034:	f000 fb9b 	bl	476e <__malloc_unlock>
    4038:	e003      	b.n	4042 <_malloc_r+0x56>
    403a:	2d00      	cmp	r5, #0
    403c:	dadf      	bge.n	3ffe <_malloc_r+0x12>
    403e:	230c      	movs	r3, #12
    4040:	6033      	str	r3, [r6, #0]
    4042:	2000      	movs	r0, #0
    4044:	bd70      	pop	{r4, r5, r6, pc}
    4046:	680b      	ldr	r3, [r1, #0]
    4048:	1b5b      	subs	r3, r3, r5
    404a:	d41a      	bmi.n	4082 <_malloc_r+0x96>
    404c:	2b0b      	cmp	r3, #11
    404e:	d903      	bls.n	4058 <_malloc_r+0x6c>
    4050:	600b      	str	r3, [r1, #0]
    4052:	18cc      	adds	r4, r1, r3
    4054:	6025      	str	r5, [r4, #0]
    4056:	e003      	b.n	4060 <_malloc_r+0x74>
    4058:	428c      	cmp	r4, r1
    405a:	d10e      	bne.n	407a <_malloc_r+0x8e>
    405c:	6863      	ldr	r3, [r4, #4]
    405e:	6013      	str	r3, [r2, #0]
    4060:	0030      	movs	r0, r6
    4062:	f000 fb84 	bl	476e <__malloc_unlock>
    4066:	0020      	movs	r0, r4
    4068:	2207      	movs	r2, #7
    406a:	300b      	adds	r0, #11
    406c:	1d23      	adds	r3, r4, #4
    406e:	4390      	bics	r0, r2
    4070:	1ac3      	subs	r3, r0, r3
    4072:	d0e7      	beq.n	4044 <_malloc_r+0x58>
    4074:	425a      	negs	r2, r3
    4076:	50e2      	str	r2, [r4, r3]
    4078:	e7e4      	b.n	4044 <_malloc_r+0x58>
    407a:	684b      	ldr	r3, [r1, #4]
    407c:	6063      	str	r3, [r4, #4]
    407e:	000c      	movs	r4, r1
    4080:	e7ee      	b.n	4060 <_malloc_r+0x74>
    4082:	000c      	movs	r4, r1
    4084:	6849      	ldr	r1, [r1, #4]
    4086:	e7c2      	b.n	400e <_malloc_r+0x22>
    4088:	2303      	movs	r3, #3
    408a:	1cc4      	adds	r4, r0, #3
    408c:	439c      	bics	r4, r3
    408e:	42a0      	cmp	r0, r4
    4090:	d0e0      	beq.n	4054 <_malloc_r+0x68>
    4092:	1a21      	subs	r1, r4, r0
    4094:	0030      	movs	r0, r6
    4096:	f000 f89f 	bl	41d8 <_sbrk_r>
    409a:	1c43      	adds	r3, r0, #1
    409c:	d1da      	bne.n	4054 <_malloc_r+0x68>
    409e:	e7c6      	b.n	402e <_malloc_r+0x42>
    40a0:	200002c8 	.word	0x200002c8
    40a4:	200002cc 	.word	0x200002cc

000040a8 <iprintf>:
    40a8:	b40f      	push	{r0, r1, r2, r3}
    40aa:	4b0b      	ldr	r3, [pc, #44]	; (40d8 <iprintf+0x30>)
    40ac:	b513      	push	{r0, r1, r4, lr}
    40ae:	681c      	ldr	r4, [r3, #0]
    40b0:	2c00      	cmp	r4, #0
    40b2:	d005      	beq.n	40c0 <iprintf+0x18>
    40b4:	69a3      	ldr	r3, [r4, #24]
    40b6:	2b00      	cmp	r3, #0
    40b8:	d102      	bne.n	40c0 <iprintf+0x18>
    40ba:	0020      	movs	r0, r4
    40bc:	f000 fa54 	bl	4568 <__sinit>
    40c0:	ab05      	add	r3, sp, #20
    40c2:	9a04      	ldr	r2, [sp, #16]
    40c4:	68a1      	ldr	r1, [r4, #8]
    40c6:	0020      	movs	r0, r4
    40c8:	9301      	str	r3, [sp, #4]
    40ca:	f000 fb79 	bl	47c0 <_vfiprintf_r>
    40ce:	bc16      	pop	{r1, r2, r4}
    40d0:	bc08      	pop	{r3}
    40d2:	b004      	add	sp, #16
    40d4:	4718      	bx	r3
    40d6:	46c0      	nop			; (mov r8, r8)
    40d8:	20000178 	.word	0x20000178

000040dc <putchar>:
    40dc:	4b08      	ldr	r3, [pc, #32]	; (4100 <putchar+0x24>)
    40de:	b570      	push	{r4, r5, r6, lr}
    40e0:	681c      	ldr	r4, [r3, #0]
    40e2:	0005      	movs	r5, r0
    40e4:	2c00      	cmp	r4, #0
    40e6:	d005      	beq.n	40f4 <putchar+0x18>
    40e8:	69a3      	ldr	r3, [r4, #24]
    40ea:	2b00      	cmp	r3, #0
    40ec:	d102      	bne.n	40f4 <putchar+0x18>
    40ee:	0020      	movs	r0, r4
    40f0:	f000 fa3a 	bl	4568 <__sinit>
    40f4:	0029      	movs	r1, r5
    40f6:	68a2      	ldr	r2, [r4, #8]
    40f8:	0020      	movs	r0, r4
    40fa:	f000 fe05 	bl	4d08 <_putc_r>
    40fe:	bd70      	pop	{r4, r5, r6, pc}
    4100:	20000178 	.word	0x20000178

00004104 <srand>:
    4104:	4b10      	ldr	r3, [pc, #64]	; (4148 <srand+0x44>)
    4106:	b570      	push	{r4, r5, r6, lr}
    4108:	681c      	ldr	r4, [r3, #0]
    410a:	0005      	movs	r5, r0
    410c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    410e:	2b00      	cmp	r3, #0
    4110:	d115      	bne.n	413e <srand+0x3a>
    4112:	2018      	movs	r0, #24
    4114:	f7ff ff04 	bl	3f20 <malloc>
    4118:	4b0c      	ldr	r3, [pc, #48]	; (414c <srand+0x48>)
    411a:	63a0      	str	r0, [r4, #56]	; 0x38
    411c:	8003      	strh	r3, [r0, #0]
    411e:	4b0c      	ldr	r3, [pc, #48]	; (4150 <srand+0x4c>)
    4120:	2201      	movs	r2, #1
    4122:	8043      	strh	r3, [r0, #2]
    4124:	4b0b      	ldr	r3, [pc, #44]	; (4154 <srand+0x50>)
    4126:	8083      	strh	r3, [r0, #4]
    4128:	4b0b      	ldr	r3, [pc, #44]	; (4158 <srand+0x54>)
    412a:	80c3      	strh	r3, [r0, #6]
    412c:	4b0b      	ldr	r3, [pc, #44]	; (415c <srand+0x58>)
    412e:	8103      	strh	r3, [r0, #8]
    4130:	2305      	movs	r3, #5
    4132:	8143      	strh	r3, [r0, #10]
    4134:	3306      	adds	r3, #6
    4136:	8183      	strh	r3, [r0, #12]
    4138:	2300      	movs	r3, #0
    413a:	6102      	str	r2, [r0, #16]
    413c:	6143      	str	r3, [r0, #20]
    413e:	2200      	movs	r2, #0
    4140:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    4142:	611d      	str	r5, [r3, #16]
    4144:	615a      	str	r2, [r3, #20]
    4146:	bd70      	pop	{r4, r5, r6, pc}
    4148:	20000178 	.word	0x20000178
    414c:	0000330e 	.word	0x0000330e
    4150:	ffffabcd 	.word	0xffffabcd
    4154:	00001234 	.word	0x00001234
    4158:	ffffe66d 	.word	0xffffe66d
    415c:	ffffdeec 	.word	0xffffdeec

00004160 <rand>:
    4160:	4b15      	ldr	r3, [pc, #84]	; (41b8 <rand+0x58>)
    4162:	b510      	push	{r4, lr}
    4164:	681c      	ldr	r4, [r3, #0]
    4166:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    4168:	2b00      	cmp	r3, #0
    416a:	d115      	bne.n	4198 <rand+0x38>
    416c:	2018      	movs	r0, #24
    416e:	f7ff fed7 	bl	3f20 <malloc>
    4172:	4b12      	ldr	r3, [pc, #72]	; (41bc <rand+0x5c>)
    4174:	63a0      	str	r0, [r4, #56]	; 0x38
    4176:	8003      	strh	r3, [r0, #0]
    4178:	4b11      	ldr	r3, [pc, #68]	; (41c0 <rand+0x60>)
    417a:	2201      	movs	r2, #1
    417c:	8043      	strh	r3, [r0, #2]
    417e:	4b11      	ldr	r3, [pc, #68]	; (41c4 <rand+0x64>)
    4180:	8083      	strh	r3, [r0, #4]
    4182:	4b11      	ldr	r3, [pc, #68]	; (41c8 <rand+0x68>)
    4184:	80c3      	strh	r3, [r0, #6]
    4186:	4b11      	ldr	r3, [pc, #68]	; (41cc <rand+0x6c>)
    4188:	8103      	strh	r3, [r0, #8]
    418a:	2305      	movs	r3, #5
    418c:	8143      	strh	r3, [r0, #10]
    418e:	3306      	adds	r3, #6
    4190:	8183      	strh	r3, [r0, #12]
    4192:	2300      	movs	r3, #0
    4194:	6102      	str	r2, [r0, #16]
    4196:	6143      	str	r3, [r0, #20]
    4198:	6ba4      	ldr	r4, [r4, #56]	; 0x38
    419a:	4a0d      	ldr	r2, [pc, #52]	; (41d0 <rand+0x70>)
    419c:	6920      	ldr	r0, [r4, #16]
    419e:	6961      	ldr	r1, [r4, #20]
    41a0:	4b0c      	ldr	r3, [pc, #48]	; (41d4 <rand+0x74>)
    41a2:	f7ff fe6f 	bl	3e84 <__aeabi_lmul>
    41a6:	2201      	movs	r2, #1
    41a8:	2300      	movs	r3, #0
    41aa:	1880      	adds	r0, r0, r2
    41ac:	4159      	adcs	r1, r3
    41ae:	6120      	str	r0, [r4, #16]
    41b0:	6161      	str	r1, [r4, #20]
    41b2:	0048      	lsls	r0, r1, #1
    41b4:	0840      	lsrs	r0, r0, #1
    41b6:	bd10      	pop	{r4, pc}
    41b8:	20000178 	.word	0x20000178
    41bc:	0000330e 	.word	0x0000330e
    41c0:	ffffabcd 	.word	0xffffabcd
    41c4:	00001234 	.word	0x00001234
    41c8:	ffffe66d 	.word	0xffffe66d
    41cc:	ffffdeec 	.word	0xffffdeec
    41d0:	4c957f2d 	.word	0x4c957f2d
    41d4:	5851f42d 	.word	0x5851f42d

000041d8 <_sbrk_r>:
    41d8:	2300      	movs	r3, #0
    41da:	b570      	push	{r4, r5, r6, lr}
    41dc:	4c06      	ldr	r4, [pc, #24]	; (41f8 <_sbrk_r+0x20>)
    41de:	0005      	movs	r5, r0
    41e0:	0008      	movs	r0, r1
    41e2:	6023      	str	r3, [r4, #0]
    41e4:	f7fe fb64 	bl	28b0 <_sbrk>
    41e8:	1c43      	adds	r3, r0, #1
    41ea:	d103      	bne.n	41f4 <_sbrk_r+0x1c>
    41ec:	6823      	ldr	r3, [r4, #0]
    41ee:	2b00      	cmp	r3, #0
    41f0:	d000      	beq.n	41f4 <_sbrk_r+0x1c>
    41f2:	602b      	str	r3, [r5, #0]
    41f4:	bd70      	pop	{r4, r5, r6, pc}
    41f6:	46c0      	nop			; (mov r8, r8)
    41f8:	20000b70 	.word	0x20000b70

000041fc <setbuf>:
    41fc:	424a      	negs	r2, r1
    41fe:	414a      	adcs	r2, r1
    4200:	2380      	movs	r3, #128	; 0x80
    4202:	b510      	push	{r4, lr}
    4204:	0052      	lsls	r2, r2, #1
    4206:	00db      	lsls	r3, r3, #3
    4208:	f000 f802 	bl	4210 <setvbuf>
    420c:	bd10      	pop	{r4, pc}
	...

00004210 <setvbuf>:
    4210:	b5f0      	push	{r4, r5, r6, r7, lr}
    4212:	001d      	movs	r5, r3
    4214:	4b4f      	ldr	r3, [pc, #316]	; (4354 <setvbuf+0x144>)
    4216:	b085      	sub	sp, #20
    4218:	681e      	ldr	r6, [r3, #0]
    421a:	0004      	movs	r4, r0
    421c:	000f      	movs	r7, r1
    421e:	9200      	str	r2, [sp, #0]
    4220:	2e00      	cmp	r6, #0
    4222:	d005      	beq.n	4230 <setvbuf+0x20>
    4224:	69b3      	ldr	r3, [r6, #24]
    4226:	2b00      	cmp	r3, #0
    4228:	d102      	bne.n	4230 <setvbuf+0x20>
    422a:	0030      	movs	r0, r6
    422c:	f000 f99c 	bl	4568 <__sinit>
    4230:	4b49      	ldr	r3, [pc, #292]	; (4358 <setvbuf+0x148>)
    4232:	429c      	cmp	r4, r3
    4234:	d150      	bne.n	42d8 <setvbuf+0xc8>
    4236:	6874      	ldr	r4, [r6, #4]
    4238:	9b00      	ldr	r3, [sp, #0]
    423a:	2b02      	cmp	r3, #2
    423c:	d005      	beq.n	424a <setvbuf+0x3a>
    423e:	2b01      	cmp	r3, #1
    4240:	d900      	bls.n	4244 <setvbuf+0x34>
    4242:	e084      	b.n	434e <setvbuf+0x13e>
    4244:	2d00      	cmp	r5, #0
    4246:	da00      	bge.n	424a <setvbuf+0x3a>
    4248:	e081      	b.n	434e <setvbuf+0x13e>
    424a:	0021      	movs	r1, r4
    424c:	0030      	movs	r0, r6
    424e:	f000 f91d 	bl	448c <_fflush_r>
    4252:	6b61      	ldr	r1, [r4, #52]	; 0x34
    4254:	2900      	cmp	r1, #0
    4256:	d008      	beq.n	426a <setvbuf+0x5a>
    4258:	0023      	movs	r3, r4
    425a:	3344      	adds	r3, #68	; 0x44
    425c:	4299      	cmp	r1, r3
    425e:	d002      	beq.n	4266 <setvbuf+0x56>
    4260:	0030      	movs	r0, r6
    4262:	f7ff fe79 	bl	3f58 <_free_r>
    4266:	2300      	movs	r3, #0
    4268:	6363      	str	r3, [r4, #52]	; 0x34
    426a:	2300      	movs	r3, #0
    426c:	61a3      	str	r3, [r4, #24]
    426e:	6063      	str	r3, [r4, #4]
    4270:	89a3      	ldrh	r3, [r4, #12]
    4272:	061b      	lsls	r3, r3, #24
    4274:	d503      	bpl.n	427e <setvbuf+0x6e>
    4276:	6921      	ldr	r1, [r4, #16]
    4278:	0030      	movs	r0, r6
    427a:	f7ff fe6d 	bl	3f58 <_free_r>
    427e:	89a3      	ldrh	r3, [r4, #12]
    4280:	4a36      	ldr	r2, [pc, #216]	; (435c <setvbuf+0x14c>)
    4282:	4013      	ands	r3, r2
    4284:	81a3      	strh	r3, [r4, #12]
    4286:	9b00      	ldr	r3, [sp, #0]
    4288:	2b02      	cmp	r3, #2
    428a:	d05a      	beq.n	4342 <setvbuf+0x132>
    428c:	ab03      	add	r3, sp, #12
    428e:	aa02      	add	r2, sp, #8
    4290:	0021      	movs	r1, r4
    4292:	0030      	movs	r0, r6
    4294:	f000 f9fe 	bl	4694 <__swhatbuf_r>
    4298:	89a3      	ldrh	r3, [r4, #12]
    429a:	4318      	orrs	r0, r3
    429c:	81a0      	strh	r0, [r4, #12]
    429e:	2d00      	cmp	r5, #0
    42a0:	d124      	bne.n	42ec <setvbuf+0xdc>
    42a2:	9d02      	ldr	r5, [sp, #8]
    42a4:	0028      	movs	r0, r5
    42a6:	f7ff fe3b 	bl	3f20 <malloc>
    42aa:	9501      	str	r5, [sp, #4]
    42ac:	1e07      	subs	r7, r0, #0
    42ae:	d142      	bne.n	4336 <setvbuf+0x126>
    42b0:	9b02      	ldr	r3, [sp, #8]
    42b2:	9301      	str	r3, [sp, #4]
    42b4:	42ab      	cmp	r3, r5
    42b6:	d139      	bne.n	432c <setvbuf+0x11c>
    42b8:	2001      	movs	r0, #1
    42ba:	4240      	negs	r0, r0
    42bc:	2302      	movs	r3, #2
    42be:	89a2      	ldrh	r2, [r4, #12]
    42c0:	4313      	orrs	r3, r2
    42c2:	81a3      	strh	r3, [r4, #12]
    42c4:	2300      	movs	r3, #0
    42c6:	60a3      	str	r3, [r4, #8]
    42c8:	0023      	movs	r3, r4
    42ca:	3347      	adds	r3, #71	; 0x47
    42cc:	6023      	str	r3, [r4, #0]
    42ce:	6123      	str	r3, [r4, #16]
    42d0:	2301      	movs	r3, #1
    42d2:	6163      	str	r3, [r4, #20]
    42d4:	b005      	add	sp, #20
    42d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    42d8:	4b21      	ldr	r3, [pc, #132]	; (4360 <setvbuf+0x150>)
    42da:	429c      	cmp	r4, r3
    42dc:	d101      	bne.n	42e2 <setvbuf+0xd2>
    42de:	68b4      	ldr	r4, [r6, #8]
    42e0:	e7aa      	b.n	4238 <setvbuf+0x28>
    42e2:	4b20      	ldr	r3, [pc, #128]	; (4364 <setvbuf+0x154>)
    42e4:	429c      	cmp	r4, r3
    42e6:	d1a7      	bne.n	4238 <setvbuf+0x28>
    42e8:	68f4      	ldr	r4, [r6, #12]
    42ea:	e7a5      	b.n	4238 <setvbuf+0x28>
    42ec:	2f00      	cmp	r7, #0
    42ee:	d0d9      	beq.n	42a4 <setvbuf+0x94>
    42f0:	69b3      	ldr	r3, [r6, #24]
    42f2:	2b00      	cmp	r3, #0
    42f4:	d102      	bne.n	42fc <setvbuf+0xec>
    42f6:	0030      	movs	r0, r6
    42f8:	f000 f936 	bl	4568 <__sinit>
    42fc:	9b00      	ldr	r3, [sp, #0]
    42fe:	2b01      	cmp	r3, #1
    4300:	d103      	bne.n	430a <setvbuf+0xfa>
    4302:	89a3      	ldrh	r3, [r4, #12]
    4304:	9a00      	ldr	r2, [sp, #0]
    4306:	431a      	orrs	r2, r3
    4308:	81a2      	strh	r2, [r4, #12]
    430a:	2008      	movs	r0, #8
    430c:	89a3      	ldrh	r3, [r4, #12]
    430e:	6027      	str	r7, [r4, #0]
    4310:	6127      	str	r7, [r4, #16]
    4312:	6165      	str	r5, [r4, #20]
    4314:	4018      	ands	r0, r3
    4316:	d018      	beq.n	434a <setvbuf+0x13a>
    4318:	2001      	movs	r0, #1
    431a:	4018      	ands	r0, r3
    431c:	2300      	movs	r3, #0
    431e:	4298      	cmp	r0, r3
    4320:	d011      	beq.n	4346 <setvbuf+0x136>
    4322:	426d      	negs	r5, r5
    4324:	60a3      	str	r3, [r4, #8]
    4326:	61a5      	str	r5, [r4, #24]
    4328:	0018      	movs	r0, r3
    432a:	e7d3      	b.n	42d4 <setvbuf+0xc4>
    432c:	9801      	ldr	r0, [sp, #4]
    432e:	f7ff fdf7 	bl	3f20 <malloc>
    4332:	1e07      	subs	r7, r0, #0
    4334:	d0c0      	beq.n	42b8 <setvbuf+0xa8>
    4336:	2380      	movs	r3, #128	; 0x80
    4338:	89a2      	ldrh	r2, [r4, #12]
    433a:	9d01      	ldr	r5, [sp, #4]
    433c:	4313      	orrs	r3, r2
    433e:	81a3      	strh	r3, [r4, #12]
    4340:	e7d6      	b.n	42f0 <setvbuf+0xe0>
    4342:	2000      	movs	r0, #0
    4344:	e7ba      	b.n	42bc <setvbuf+0xac>
    4346:	60a5      	str	r5, [r4, #8]
    4348:	e7c4      	b.n	42d4 <setvbuf+0xc4>
    434a:	60a0      	str	r0, [r4, #8]
    434c:	e7c2      	b.n	42d4 <setvbuf+0xc4>
    434e:	2001      	movs	r0, #1
    4350:	4240      	negs	r0, r0
    4352:	e7bf      	b.n	42d4 <setvbuf+0xc4>
    4354:	20000178 	.word	0x20000178
    4358:	00007464 	.word	0x00007464
    435c:	fffff35c 	.word	0xfffff35c
    4360:	00007484 	.word	0x00007484
    4364:	00007444 	.word	0x00007444

00004368 <strlen>:
    4368:	2300      	movs	r3, #0
    436a:	5cc2      	ldrb	r2, [r0, r3]
    436c:	3301      	adds	r3, #1
    436e:	2a00      	cmp	r2, #0
    4370:	d1fb      	bne.n	436a <strlen+0x2>
    4372:	1e58      	subs	r0, r3, #1
    4374:	4770      	bx	lr
	...

00004378 <__sflush_r>:
    4378:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    437a:	898a      	ldrh	r2, [r1, #12]
    437c:	0005      	movs	r5, r0
    437e:	000c      	movs	r4, r1
    4380:	0713      	lsls	r3, r2, #28
    4382:	d460      	bmi.n	4446 <__sflush_r+0xce>
    4384:	684b      	ldr	r3, [r1, #4]
    4386:	2b00      	cmp	r3, #0
    4388:	dc04      	bgt.n	4394 <__sflush_r+0x1c>
    438a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    438c:	2b00      	cmp	r3, #0
    438e:	dc01      	bgt.n	4394 <__sflush_r+0x1c>
    4390:	2000      	movs	r0, #0
    4392:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4394:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    4396:	2f00      	cmp	r7, #0
    4398:	d0fa      	beq.n	4390 <__sflush_r+0x18>
    439a:	2300      	movs	r3, #0
    439c:	682e      	ldr	r6, [r5, #0]
    439e:	602b      	str	r3, [r5, #0]
    43a0:	2380      	movs	r3, #128	; 0x80
    43a2:	015b      	lsls	r3, r3, #5
    43a4:	401a      	ands	r2, r3
    43a6:	d034      	beq.n	4412 <__sflush_r+0x9a>
    43a8:	6d60      	ldr	r0, [r4, #84]	; 0x54
    43aa:	89a3      	ldrh	r3, [r4, #12]
    43ac:	075b      	lsls	r3, r3, #29
    43ae:	d506      	bpl.n	43be <__sflush_r+0x46>
    43b0:	6863      	ldr	r3, [r4, #4]
    43b2:	1ac0      	subs	r0, r0, r3
    43b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
    43b6:	2b00      	cmp	r3, #0
    43b8:	d001      	beq.n	43be <__sflush_r+0x46>
    43ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
    43bc:	1ac0      	subs	r0, r0, r3
    43be:	0002      	movs	r2, r0
    43c0:	6a21      	ldr	r1, [r4, #32]
    43c2:	2300      	movs	r3, #0
    43c4:	0028      	movs	r0, r5
    43c6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    43c8:	47b8      	blx	r7
    43ca:	89a1      	ldrh	r1, [r4, #12]
    43cc:	1c43      	adds	r3, r0, #1
    43ce:	d106      	bne.n	43de <__sflush_r+0x66>
    43d0:	682b      	ldr	r3, [r5, #0]
    43d2:	2b1d      	cmp	r3, #29
    43d4:	d831      	bhi.n	443a <__sflush_r+0xc2>
    43d6:	4a2c      	ldr	r2, [pc, #176]	; (4488 <__sflush_r+0x110>)
    43d8:	40da      	lsrs	r2, r3
    43da:	07d3      	lsls	r3, r2, #31
    43dc:	d52d      	bpl.n	443a <__sflush_r+0xc2>
    43de:	2300      	movs	r3, #0
    43e0:	6063      	str	r3, [r4, #4]
    43e2:	6923      	ldr	r3, [r4, #16]
    43e4:	6023      	str	r3, [r4, #0]
    43e6:	04cb      	lsls	r3, r1, #19
    43e8:	d505      	bpl.n	43f6 <__sflush_r+0x7e>
    43ea:	1c43      	adds	r3, r0, #1
    43ec:	d102      	bne.n	43f4 <__sflush_r+0x7c>
    43ee:	682b      	ldr	r3, [r5, #0]
    43f0:	2b00      	cmp	r3, #0
    43f2:	d100      	bne.n	43f6 <__sflush_r+0x7e>
    43f4:	6560      	str	r0, [r4, #84]	; 0x54
    43f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
    43f8:	602e      	str	r6, [r5, #0]
    43fa:	2900      	cmp	r1, #0
    43fc:	d0c8      	beq.n	4390 <__sflush_r+0x18>
    43fe:	0023      	movs	r3, r4
    4400:	3344      	adds	r3, #68	; 0x44
    4402:	4299      	cmp	r1, r3
    4404:	d002      	beq.n	440c <__sflush_r+0x94>
    4406:	0028      	movs	r0, r5
    4408:	f7ff fda6 	bl	3f58 <_free_r>
    440c:	2000      	movs	r0, #0
    440e:	6360      	str	r0, [r4, #52]	; 0x34
    4410:	e7bf      	b.n	4392 <__sflush_r+0x1a>
    4412:	2301      	movs	r3, #1
    4414:	6a21      	ldr	r1, [r4, #32]
    4416:	0028      	movs	r0, r5
    4418:	47b8      	blx	r7
    441a:	1c43      	adds	r3, r0, #1
    441c:	d1c5      	bne.n	43aa <__sflush_r+0x32>
    441e:	682b      	ldr	r3, [r5, #0]
    4420:	2b00      	cmp	r3, #0
    4422:	d0c2      	beq.n	43aa <__sflush_r+0x32>
    4424:	2b1d      	cmp	r3, #29
    4426:	d001      	beq.n	442c <__sflush_r+0xb4>
    4428:	2b16      	cmp	r3, #22
    442a:	d101      	bne.n	4430 <__sflush_r+0xb8>
    442c:	602e      	str	r6, [r5, #0]
    442e:	e7af      	b.n	4390 <__sflush_r+0x18>
    4430:	2340      	movs	r3, #64	; 0x40
    4432:	89a2      	ldrh	r2, [r4, #12]
    4434:	4313      	orrs	r3, r2
    4436:	81a3      	strh	r3, [r4, #12]
    4438:	e7ab      	b.n	4392 <__sflush_r+0x1a>
    443a:	2340      	movs	r3, #64	; 0x40
    443c:	430b      	orrs	r3, r1
    443e:	2001      	movs	r0, #1
    4440:	81a3      	strh	r3, [r4, #12]
    4442:	4240      	negs	r0, r0
    4444:	e7a5      	b.n	4392 <__sflush_r+0x1a>
    4446:	690f      	ldr	r7, [r1, #16]
    4448:	2f00      	cmp	r7, #0
    444a:	d0a1      	beq.n	4390 <__sflush_r+0x18>
    444c:	680b      	ldr	r3, [r1, #0]
    444e:	600f      	str	r7, [r1, #0]
    4450:	1bdb      	subs	r3, r3, r7
    4452:	9301      	str	r3, [sp, #4]
    4454:	2300      	movs	r3, #0
    4456:	0792      	lsls	r2, r2, #30
    4458:	d100      	bne.n	445c <__sflush_r+0xe4>
    445a:	694b      	ldr	r3, [r1, #20]
    445c:	60a3      	str	r3, [r4, #8]
    445e:	9b01      	ldr	r3, [sp, #4]
    4460:	2b00      	cmp	r3, #0
    4462:	dc00      	bgt.n	4466 <__sflush_r+0xee>
    4464:	e794      	b.n	4390 <__sflush_r+0x18>
    4466:	9b01      	ldr	r3, [sp, #4]
    4468:	003a      	movs	r2, r7
    446a:	6a21      	ldr	r1, [r4, #32]
    446c:	0028      	movs	r0, r5
    446e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    4470:	47b0      	blx	r6
    4472:	2800      	cmp	r0, #0
    4474:	dc03      	bgt.n	447e <__sflush_r+0x106>
    4476:	2340      	movs	r3, #64	; 0x40
    4478:	89a2      	ldrh	r2, [r4, #12]
    447a:	4313      	orrs	r3, r2
    447c:	e7df      	b.n	443e <__sflush_r+0xc6>
    447e:	9b01      	ldr	r3, [sp, #4]
    4480:	183f      	adds	r7, r7, r0
    4482:	1a1b      	subs	r3, r3, r0
    4484:	9301      	str	r3, [sp, #4]
    4486:	e7ea      	b.n	445e <__sflush_r+0xe6>
    4488:	20400001 	.word	0x20400001

0000448c <_fflush_r>:
    448c:	690b      	ldr	r3, [r1, #16]
    448e:	b570      	push	{r4, r5, r6, lr}
    4490:	0005      	movs	r5, r0
    4492:	000c      	movs	r4, r1
    4494:	2b00      	cmp	r3, #0
    4496:	d101      	bne.n	449c <_fflush_r+0x10>
    4498:	2000      	movs	r0, #0
    449a:	bd70      	pop	{r4, r5, r6, pc}
    449c:	2800      	cmp	r0, #0
    449e:	d004      	beq.n	44aa <_fflush_r+0x1e>
    44a0:	6983      	ldr	r3, [r0, #24]
    44a2:	2b00      	cmp	r3, #0
    44a4:	d101      	bne.n	44aa <_fflush_r+0x1e>
    44a6:	f000 f85f 	bl	4568 <__sinit>
    44aa:	4b0b      	ldr	r3, [pc, #44]	; (44d8 <_fflush_r+0x4c>)
    44ac:	429c      	cmp	r4, r3
    44ae:	d109      	bne.n	44c4 <_fflush_r+0x38>
    44b0:	686c      	ldr	r4, [r5, #4]
    44b2:	220c      	movs	r2, #12
    44b4:	5ea3      	ldrsh	r3, [r4, r2]
    44b6:	2b00      	cmp	r3, #0
    44b8:	d0ee      	beq.n	4498 <_fflush_r+0xc>
    44ba:	0021      	movs	r1, r4
    44bc:	0028      	movs	r0, r5
    44be:	f7ff ff5b 	bl	4378 <__sflush_r>
    44c2:	e7ea      	b.n	449a <_fflush_r+0xe>
    44c4:	4b05      	ldr	r3, [pc, #20]	; (44dc <_fflush_r+0x50>)
    44c6:	429c      	cmp	r4, r3
    44c8:	d101      	bne.n	44ce <_fflush_r+0x42>
    44ca:	68ac      	ldr	r4, [r5, #8]
    44cc:	e7f1      	b.n	44b2 <_fflush_r+0x26>
    44ce:	4b04      	ldr	r3, [pc, #16]	; (44e0 <_fflush_r+0x54>)
    44d0:	429c      	cmp	r4, r3
    44d2:	d1ee      	bne.n	44b2 <_fflush_r+0x26>
    44d4:	68ec      	ldr	r4, [r5, #12]
    44d6:	e7ec      	b.n	44b2 <_fflush_r+0x26>
    44d8:	00007464 	.word	0x00007464
    44dc:	00007484 	.word	0x00007484
    44e0:	00007444 	.word	0x00007444

000044e4 <_cleanup_r>:
    44e4:	b510      	push	{r4, lr}
    44e6:	4902      	ldr	r1, [pc, #8]	; (44f0 <_cleanup_r+0xc>)
    44e8:	f000 f8b2 	bl	4650 <_fwalk_reent>
    44ec:	bd10      	pop	{r4, pc}
    44ee:	46c0      	nop			; (mov r8, r8)
    44f0:	0000448d 	.word	0x0000448d

000044f4 <std.isra.0>:
    44f4:	2300      	movs	r3, #0
    44f6:	b510      	push	{r4, lr}
    44f8:	0004      	movs	r4, r0
    44fa:	6003      	str	r3, [r0, #0]
    44fc:	6043      	str	r3, [r0, #4]
    44fe:	6083      	str	r3, [r0, #8]
    4500:	8181      	strh	r1, [r0, #12]
    4502:	6643      	str	r3, [r0, #100]	; 0x64
    4504:	81c2      	strh	r2, [r0, #14]
    4506:	6103      	str	r3, [r0, #16]
    4508:	6143      	str	r3, [r0, #20]
    450a:	6183      	str	r3, [r0, #24]
    450c:	0019      	movs	r1, r3
    450e:	2208      	movs	r2, #8
    4510:	305c      	adds	r0, #92	; 0x5c
    4512:	f7ff fd18 	bl	3f46 <memset>
    4516:	4b05      	ldr	r3, [pc, #20]	; (452c <std.isra.0+0x38>)
    4518:	6224      	str	r4, [r4, #32]
    451a:	6263      	str	r3, [r4, #36]	; 0x24
    451c:	4b04      	ldr	r3, [pc, #16]	; (4530 <std.isra.0+0x3c>)
    451e:	62a3      	str	r3, [r4, #40]	; 0x28
    4520:	4b04      	ldr	r3, [pc, #16]	; (4534 <std.isra.0+0x40>)
    4522:	62e3      	str	r3, [r4, #44]	; 0x2c
    4524:	4b04      	ldr	r3, [pc, #16]	; (4538 <std.isra.0+0x44>)
    4526:	6323      	str	r3, [r4, #48]	; 0x30
    4528:	bd10      	pop	{r4, pc}
    452a:	46c0      	nop			; (mov r8, r8)
    452c:	00004d75 	.word	0x00004d75
    4530:	00004d9d 	.word	0x00004d9d
    4534:	00004dd5 	.word	0x00004dd5
    4538:	00004e01 	.word	0x00004e01

0000453c <__sfmoreglue>:
    453c:	b570      	push	{r4, r5, r6, lr}
    453e:	2568      	movs	r5, #104	; 0x68
    4540:	1e4a      	subs	r2, r1, #1
    4542:	4355      	muls	r5, r2
    4544:	000e      	movs	r6, r1
    4546:	0029      	movs	r1, r5
    4548:	3174      	adds	r1, #116	; 0x74
    454a:	f7ff fd4f 	bl	3fec <_malloc_r>
    454e:	1e04      	subs	r4, r0, #0
    4550:	d008      	beq.n	4564 <__sfmoreglue+0x28>
    4552:	2100      	movs	r1, #0
    4554:	002a      	movs	r2, r5
    4556:	6001      	str	r1, [r0, #0]
    4558:	6046      	str	r6, [r0, #4]
    455a:	300c      	adds	r0, #12
    455c:	60a0      	str	r0, [r4, #8]
    455e:	3268      	adds	r2, #104	; 0x68
    4560:	f7ff fcf1 	bl	3f46 <memset>
    4564:	0020      	movs	r0, r4
    4566:	bd70      	pop	{r4, r5, r6, pc}

00004568 <__sinit>:
    4568:	6983      	ldr	r3, [r0, #24]
    456a:	b513      	push	{r0, r1, r4, lr}
    456c:	0004      	movs	r4, r0
    456e:	2b00      	cmp	r3, #0
    4570:	d128      	bne.n	45c4 <__sinit+0x5c>
    4572:	6483      	str	r3, [r0, #72]	; 0x48
    4574:	64c3      	str	r3, [r0, #76]	; 0x4c
    4576:	6503      	str	r3, [r0, #80]	; 0x50
    4578:	4b13      	ldr	r3, [pc, #76]	; (45c8 <__sinit+0x60>)
    457a:	4a14      	ldr	r2, [pc, #80]	; (45cc <__sinit+0x64>)
    457c:	681b      	ldr	r3, [r3, #0]
    457e:	6282      	str	r2, [r0, #40]	; 0x28
    4580:	9301      	str	r3, [sp, #4]
    4582:	4298      	cmp	r0, r3
    4584:	d101      	bne.n	458a <__sinit+0x22>
    4586:	2301      	movs	r3, #1
    4588:	6183      	str	r3, [r0, #24]
    458a:	0020      	movs	r0, r4
    458c:	f000 f820 	bl	45d0 <__sfp>
    4590:	6060      	str	r0, [r4, #4]
    4592:	0020      	movs	r0, r4
    4594:	f000 f81c 	bl	45d0 <__sfp>
    4598:	60a0      	str	r0, [r4, #8]
    459a:	0020      	movs	r0, r4
    459c:	f000 f818 	bl	45d0 <__sfp>
    45a0:	2200      	movs	r2, #0
    45a2:	60e0      	str	r0, [r4, #12]
    45a4:	2104      	movs	r1, #4
    45a6:	6860      	ldr	r0, [r4, #4]
    45a8:	f7ff ffa4 	bl	44f4 <std.isra.0>
    45ac:	2201      	movs	r2, #1
    45ae:	2109      	movs	r1, #9
    45b0:	68a0      	ldr	r0, [r4, #8]
    45b2:	f7ff ff9f 	bl	44f4 <std.isra.0>
    45b6:	2202      	movs	r2, #2
    45b8:	2112      	movs	r1, #18
    45ba:	68e0      	ldr	r0, [r4, #12]
    45bc:	f7ff ff9a 	bl	44f4 <std.isra.0>
    45c0:	2301      	movs	r3, #1
    45c2:	61a3      	str	r3, [r4, #24]
    45c4:	bd13      	pop	{r0, r1, r4, pc}
    45c6:	46c0      	nop			; (mov r8, r8)
    45c8:	00007440 	.word	0x00007440
    45cc:	000044e5 	.word	0x000044e5

000045d0 <__sfp>:
    45d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    45d2:	4b1e      	ldr	r3, [pc, #120]	; (464c <__sfp+0x7c>)
    45d4:	0007      	movs	r7, r0
    45d6:	681e      	ldr	r6, [r3, #0]
    45d8:	69b3      	ldr	r3, [r6, #24]
    45da:	2b00      	cmp	r3, #0
    45dc:	d102      	bne.n	45e4 <__sfp+0x14>
    45de:	0030      	movs	r0, r6
    45e0:	f7ff ffc2 	bl	4568 <__sinit>
    45e4:	3648      	adds	r6, #72	; 0x48
    45e6:	68b4      	ldr	r4, [r6, #8]
    45e8:	6873      	ldr	r3, [r6, #4]
    45ea:	3b01      	subs	r3, #1
    45ec:	d504      	bpl.n	45f8 <__sfp+0x28>
    45ee:	6833      	ldr	r3, [r6, #0]
    45f0:	2b00      	cmp	r3, #0
    45f2:	d007      	beq.n	4604 <__sfp+0x34>
    45f4:	6836      	ldr	r6, [r6, #0]
    45f6:	e7f6      	b.n	45e6 <__sfp+0x16>
    45f8:	220c      	movs	r2, #12
    45fa:	5ea5      	ldrsh	r5, [r4, r2]
    45fc:	2d00      	cmp	r5, #0
    45fe:	d00d      	beq.n	461c <__sfp+0x4c>
    4600:	3468      	adds	r4, #104	; 0x68
    4602:	e7f2      	b.n	45ea <__sfp+0x1a>
    4604:	2104      	movs	r1, #4
    4606:	0038      	movs	r0, r7
    4608:	f7ff ff98 	bl	453c <__sfmoreglue>
    460c:	6030      	str	r0, [r6, #0]
    460e:	2800      	cmp	r0, #0
    4610:	d1f0      	bne.n	45f4 <__sfp+0x24>
    4612:	230c      	movs	r3, #12
    4614:	0004      	movs	r4, r0
    4616:	603b      	str	r3, [r7, #0]
    4618:	0020      	movs	r0, r4
    461a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    461c:	2301      	movs	r3, #1
    461e:	0020      	movs	r0, r4
    4620:	425b      	negs	r3, r3
    4622:	81e3      	strh	r3, [r4, #14]
    4624:	3302      	adds	r3, #2
    4626:	81a3      	strh	r3, [r4, #12]
    4628:	6665      	str	r5, [r4, #100]	; 0x64
    462a:	6025      	str	r5, [r4, #0]
    462c:	60a5      	str	r5, [r4, #8]
    462e:	6065      	str	r5, [r4, #4]
    4630:	6125      	str	r5, [r4, #16]
    4632:	6165      	str	r5, [r4, #20]
    4634:	61a5      	str	r5, [r4, #24]
    4636:	2208      	movs	r2, #8
    4638:	0029      	movs	r1, r5
    463a:	305c      	adds	r0, #92	; 0x5c
    463c:	f7ff fc83 	bl	3f46 <memset>
    4640:	6365      	str	r5, [r4, #52]	; 0x34
    4642:	63a5      	str	r5, [r4, #56]	; 0x38
    4644:	64a5      	str	r5, [r4, #72]	; 0x48
    4646:	64e5      	str	r5, [r4, #76]	; 0x4c
    4648:	e7e6      	b.n	4618 <__sfp+0x48>
    464a:	46c0      	nop			; (mov r8, r8)
    464c:	00007440 	.word	0x00007440

00004650 <_fwalk_reent>:
    4650:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4652:	0004      	movs	r4, r0
    4654:	0007      	movs	r7, r0
    4656:	2600      	movs	r6, #0
    4658:	9101      	str	r1, [sp, #4]
    465a:	3448      	adds	r4, #72	; 0x48
    465c:	2c00      	cmp	r4, #0
    465e:	d101      	bne.n	4664 <_fwalk_reent+0x14>
    4660:	0030      	movs	r0, r6
    4662:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4664:	6863      	ldr	r3, [r4, #4]
    4666:	68a5      	ldr	r5, [r4, #8]
    4668:	9300      	str	r3, [sp, #0]
    466a:	9b00      	ldr	r3, [sp, #0]
    466c:	3b01      	subs	r3, #1
    466e:	9300      	str	r3, [sp, #0]
    4670:	d501      	bpl.n	4676 <_fwalk_reent+0x26>
    4672:	6824      	ldr	r4, [r4, #0]
    4674:	e7f2      	b.n	465c <_fwalk_reent+0xc>
    4676:	89ab      	ldrh	r3, [r5, #12]
    4678:	2b01      	cmp	r3, #1
    467a:	d908      	bls.n	468e <_fwalk_reent+0x3e>
    467c:	220e      	movs	r2, #14
    467e:	5eab      	ldrsh	r3, [r5, r2]
    4680:	3301      	adds	r3, #1
    4682:	d004      	beq.n	468e <_fwalk_reent+0x3e>
    4684:	0029      	movs	r1, r5
    4686:	0038      	movs	r0, r7
    4688:	9b01      	ldr	r3, [sp, #4]
    468a:	4798      	blx	r3
    468c:	4306      	orrs	r6, r0
    468e:	3568      	adds	r5, #104	; 0x68
    4690:	e7eb      	b.n	466a <_fwalk_reent+0x1a>
	...

00004694 <__swhatbuf_r>:
    4694:	b570      	push	{r4, r5, r6, lr}
    4696:	000e      	movs	r6, r1
    4698:	001d      	movs	r5, r3
    469a:	230e      	movs	r3, #14
    469c:	5ec9      	ldrsh	r1, [r1, r3]
    469e:	b090      	sub	sp, #64	; 0x40
    46a0:	0014      	movs	r4, r2
    46a2:	2900      	cmp	r1, #0
    46a4:	da07      	bge.n	46b6 <__swhatbuf_r+0x22>
    46a6:	2300      	movs	r3, #0
    46a8:	602b      	str	r3, [r5, #0]
    46aa:	89b3      	ldrh	r3, [r6, #12]
    46ac:	061b      	lsls	r3, r3, #24
    46ae:	d411      	bmi.n	46d4 <__swhatbuf_r+0x40>
    46b0:	2380      	movs	r3, #128	; 0x80
    46b2:	00db      	lsls	r3, r3, #3
    46b4:	e00f      	b.n	46d6 <__swhatbuf_r+0x42>
    46b6:	aa01      	add	r2, sp, #4
    46b8:	f000 fc9a 	bl	4ff0 <_fstat_r>
    46bc:	2800      	cmp	r0, #0
    46be:	dbf2      	blt.n	46a6 <__swhatbuf_r+0x12>
    46c0:	22f0      	movs	r2, #240	; 0xf0
    46c2:	9b02      	ldr	r3, [sp, #8]
    46c4:	0212      	lsls	r2, r2, #8
    46c6:	4013      	ands	r3, r2
    46c8:	4a05      	ldr	r2, [pc, #20]	; (46e0 <__swhatbuf_r+0x4c>)
    46ca:	189b      	adds	r3, r3, r2
    46cc:	425a      	negs	r2, r3
    46ce:	4153      	adcs	r3, r2
    46d0:	602b      	str	r3, [r5, #0]
    46d2:	e7ed      	b.n	46b0 <__swhatbuf_r+0x1c>
    46d4:	2340      	movs	r3, #64	; 0x40
    46d6:	2000      	movs	r0, #0
    46d8:	6023      	str	r3, [r4, #0]
    46da:	b010      	add	sp, #64	; 0x40
    46dc:	bd70      	pop	{r4, r5, r6, pc}
    46de:	46c0      	nop			; (mov r8, r8)
    46e0:	ffffe000 	.word	0xffffe000

000046e4 <__smakebuf_r>:
    46e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    46e6:	2602      	movs	r6, #2
    46e8:	898b      	ldrh	r3, [r1, #12]
    46ea:	0005      	movs	r5, r0
    46ec:	000c      	movs	r4, r1
    46ee:	4233      	tst	r3, r6
    46f0:	d006      	beq.n	4700 <__smakebuf_r+0x1c>
    46f2:	0023      	movs	r3, r4
    46f4:	3347      	adds	r3, #71	; 0x47
    46f6:	6023      	str	r3, [r4, #0]
    46f8:	6123      	str	r3, [r4, #16]
    46fa:	2301      	movs	r3, #1
    46fc:	6163      	str	r3, [r4, #20]
    46fe:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    4700:	ab01      	add	r3, sp, #4
    4702:	466a      	mov	r2, sp
    4704:	f7ff ffc6 	bl	4694 <__swhatbuf_r>
    4708:	9900      	ldr	r1, [sp, #0]
    470a:	0007      	movs	r7, r0
    470c:	0028      	movs	r0, r5
    470e:	f7ff fc6d 	bl	3fec <_malloc_r>
    4712:	2800      	cmp	r0, #0
    4714:	d108      	bne.n	4728 <__smakebuf_r+0x44>
    4716:	220c      	movs	r2, #12
    4718:	5ea3      	ldrsh	r3, [r4, r2]
    471a:	059a      	lsls	r2, r3, #22
    471c:	d4ef      	bmi.n	46fe <__smakebuf_r+0x1a>
    471e:	2203      	movs	r2, #3
    4720:	4393      	bics	r3, r2
    4722:	431e      	orrs	r6, r3
    4724:	81a6      	strh	r6, [r4, #12]
    4726:	e7e4      	b.n	46f2 <__smakebuf_r+0xe>
    4728:	4b0f      	ldr	r3, [pc, #60]	; (4768 <__smakebuf_r+0x84>)
    472a:	62ab      	str	r3, [r5, #40]	; 0x28
    472c:	2380      	movs	r3, #128	; 0x80
    472e:	89a2      	ldrh	r2, [r4, #12]
    4730:	6020      	str	r0, [r4, #0]
    4732:	4313      	orrs	r3, r2
    4734:	81a3      	strh	r3, [r4, #12]
    4736:	9b00      	ldr	r3, [sp, #0]
    4738:	6120      	str	r0, [r4, #16]
    473a:	6163      	str	r3, [r4, #20]
    473c:	9b01      	ldr	r3, [sp, #4]
    473e:	2b00      	cmp	r3, #0
    4740:	d00d      	beq.n	475e <__smakebuf_r+0x7a>
    4742:	230e      	movs	r3, #14
    4744:	5ee1      	ldrsh	r1, [r4, r3]
    4746:	0028      	movs	r0, r5
    4748:	f000 fc64 	bl	5014 <_isatty_r>
    474c:	2800      	cmp	r0, #0
    474e:	d006      	beq.n	475e <__smakebuf_r+0x7a>
    4750:	2203      	movs	r2, #3
    4752:	89a3      	ldrh	r3, [r4, #12]
    4754:	4393      	bics	r3, r2
    4756:	001a      	movs	r2, r3
    4758:	2301      	movs	r3, #1
    475a:	4313      	orrs	r3, r2
    475c:	81a3      	strh	r3, [r4, #12]
    475e:	89a0      	ldrh	r0, [r4, #12]
    4760:	4338      	orrs	r0, r7
    4762:	81a0      	strh	r0, [r4, #12]
    4764:	e7cb      	b.n	46fe <__smakebuf_r+0x1a>
    4766:	46c0      	nop			; (mov r8, r8)
    4768:	000044e5 	.word	0x000044e5

0000476c <__malloc_lock>:
    476c:	4770      	bx	lr

0000476e <__malloc_unlock>:
    476e:	4770      	bx	lr

00004770 <__sfputc_r>:
    4770:	6893      	ldr	r3, [r2, #8]
    4772:	b510      	push	{r4, lr}
    4774:	3b01      	subs	r3, #1
    4776:	6093      	str	r3, [r2, #8]
    4778:	2b00      	cmp	r3, #0
    477a:	da05      	bge.n	4788 <__sfputc_r+0x18>
    477c:	6994      	ldr	r4, [r2, #24]
    477e:	42a3      	cmp	r3, r4
    4780:	db08      	blt.n	4794 <__sfputc_r+0x24>
    4782:	b2cb      	uxtb	r3, r1
    4784:	2b0a      	cmp	r3, #10
    4786:	d005      	beq.n	4794 <__sfputc_r+0x24>
    4788:	6813      	ldr	r3, [r2, #0]
    478a:	1c58      	adds	r0, r3, #1
    478c:	6010      	str	r0, [r2, #0]
    478e:	7019      	strb	r1, [r3, #0]
    4790:	b2c8      	uxtb	r0, r1
    4792:	bd10      	pop	{r4, pc}
    4794:	f000 fb3a 	bl	4e0c <__swbuf_r>
    4798:	e7fb      	b.n	4792 <__sfputc_r+0x22>

0000479a <__sfputs_r>:
    479a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    479c:	0006      	movs	r6, r0
    479e:	000f      	movs	r7, r1
    47a0:	0014      	movs	r4, r2
    47a2:	18d5      	adds	r5, r2, r3
    47a4:	42ac      	cmp	r4, r5
    47a6:	d101      	bne.n	47ac <__sfputs_r+0x12>
    47a8:	2000      	movs	r0, #0
    47aa:	e007      	b.n	47bc <__sfputs_r+0x22>
    47ac:	7821      	ldrb	r1, [r4, #0]
    47ae:	003a      	movs	r2, r7
    47b0:	0030      	movs	r0, r6
    47b2:	f7ff ffdd 	bl	4770 <__sfputc_r>
    47b6:	3401      	adds	r4, #1
    47b8:	1c43      	adds	r3, r0, #1
    47ba:	d1f3      	bne.n	47a4 <__sfputs_r+0xa>
    47bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000047c0 <_vfiprintf_r>:
    47c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    47c2:	b09f      	sub	sp, #124	; 0x7c
    47c4:	0006      	movs	r6, r0
    47c6:	000f      	movs	r7, r1
    47c8:	0014      	movs	r4, r2
    47ca:	9305      	str	r3, [sp, #20]
    47cc:	2800      	cmp	r0, #0
    47ce:	d004      	beq.n	47da <_vfiprintf_r+0x1a>
    47d0:	6983      	ldr	r3, [r0, #24]
    47d2:	2b00      	cmp	r3, #0
    47d4:	d101      	bne.n	47da <_vfiprintf_r+0x1a>
    47d6:	f7ff fec7 	bl	4568 <__sinit>
    47da:	4b7f      	ldr	r3, [pc, #508]	; (49d8 <_vfiprintf_r+0x218>)
    47dc:	429f      	cmp	r7, r3
    47de:	d15c      	bne.n	489a <_vfiprintf_r+0xda>
    47e0:	6877      	ldr	r7, [r6, #4]
    47e2:	89bb      	ldrh	r3, [r7, #12]
    47e4:	071b      	lsls	r3, r3, #28
    47e6:	d562      	bpl.n	48ae <_vfiprintf_r+0xee>
    47e8:	693b      	ldr	r3, [r7, #16]
    47ea:	2b00      	cmp	r3, #0
    47ec:	d05f      	beq.n	48ae <_vfiprintf_r+0xee>
    47ee:	2300      	movs	r3, #0
    47f0:	ad06      	add	r5, sp, #24
    47f2:	616b      	str	r3, [r5, #20]
    47f4:	3320      	adds	r3, #32
    47f6:	766b      	strb	r3, [r5, #25]
    47f8:	3310      	adds	r3, #16
    47fa:	76ab      	strb	r3, [r5, #26]
    47fc:	9402      	str	r4, [sp, #8]
    47fe:	9c02      	ldr	r4, [sp, #8]
    4800:	7823      	ldrb	r3, [r4, #0]
    4802:	2b00      	cmp	r3, #0
    4804:	d15d      	bne.n	48c2 <_vfiprintf_r+0x102>
    4806:	9b02      	ldr	r3, [sp, #8]
    4808:	1ae3      	subs	r3, r4, r3
    480a:	9304      	str	r3, [sp, #16]
    480c:	d00d      	beq.n	482a <_vfiprintf_r+0x6a>
    480e:	9b04      	ldr	r3, [sp, #16]
    4810:	9a02      	ldr	r2, [sp, #8]
    4812:	0039      	movs	r1, r7
    4814:	0030      	movs	r0, r6
    4816:	f7ff ffc0 	bl	479a <__sfputs_r>
    481a:	1c43      	adds	r3, r0, #1
    481c:	d100      	bne.n	4820 <_vfiprintf_r+0x60>
    481e:	e0cc      	b.n	49ba <_vfiprintf_r+0x1fa>
    4820:	696a      	ldr	r2, [r5, #20]
    4822:	9b04      	ldr	r3, [sp, #16]
    4824:	4694      	mov	ip, r2
    4826:	4463      	add	r3, ip
    4828:	616b      	str	r3, [r5, #20]
    482a:	7823      	ldrb	r3, [r4, #0]
    482c:	2b00      	cmp	r3, #0
    482e:	d100      	bne.n	4832 <_vfiprintf_r+0x72>
    4830:	e0c3      	b.n	49ba <_vfiprintf_r+0x1fa>
    4832:	2201      	movs	r2, #1
    4834:	2300      	movs	r3, #0
    4836:	4252      	negs	r2, r2
    4838:	606a      	str	r2, [r5, #4]
    483a:	a902      	add	r1, sp, #8
    483c:	3254      	adds	r2, #84	; 0x54
    483e:	1852      	adds	r2, r2, r1
    4840:	3401      	adds	r4, #1
    4842:	602b      	str	r3, [r5, #0]
    4844:	60eb      	str	r3, [r5, #12]
    4846:	60ab      	str	r3, [r5, #8]
    4848:	7013      	strb	r3, [r2, #0]
    484a:	65ab      	str	r3, [r5, #88]	; 0x58
    484c:	7821      	ldrb	r1, [r4, #0]
    484e:	2205      	movs	r2, #5
    4850:	4862      	ldr	r0, [pc, #392]	; (49dc <_vfiprintf_r+0x21c>)
    4852:	f000 fc05 	bl	5060 <memchr>
    4856:	1c63      	adds	r3, r4, #1
    4858:	469c      	mov	ip, r3
    485a:	2800      	cmp	r0, #0
    485c:	d135      	bne.n	48ca <_vfiprintf_r+0x10a>
    485e:	6829      	ldr	r1, [r5, #0]
    4860:	06cb      	lsls	r3, r1, #27
    4862:	d504      	bpl.n	486e <_vfiprintf_r+0xae>
    4864:	2353      	movs	r3, #83	; 0x53
    4866:	aa02      	add	r2, sp, #8
    4868:	3020      	adds	r0, #32
    486a:	189b      	adds	r3, r3, r2
    486c:	7018      	strb	r0, [r3, #0]
    486e:	070b      	lsls	r3, r1, #28
    4870:	d504      	bpl.n	487c <_vfiprintf_r+0xbc>
    4872:	2353      	movs	r3, #83	; 0x53
    4874:	202b      	movs	r0, #43	; 0x2b
    4876:	aa02      	add	r2, sp, #8
    4878:	189b      	adds	r3, r3, r2
    487a:	7018      	strb	r0, [r3, #0]
    487c:	7823      	ldrb	r3, [r4, #0]
    487e:	2b2a      	cmp	r3, #42	; 0x2a
    4880:	d02c      	beq.n	48dc <_vfiprintf_r+0x11c>
    4882:	2000      	movs	r0, #0
    4884:	210a      	movs	r1, #10
    4886:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4888:	7822      	ldrb	r2, [r4, #0]
    488a:	3a30      	subs	r2, #48	; 0x30
    488c:	2a09      	cmp	r2, #9
    488e:	d800      	bhi.n	4892 <_vfiprintf_r+0xd2>
    4890:	e06b      	b.n	496a <_vfiprintf_r+0x1aa>
    4892:	2800      	cmp	r0, #0
    4894:	d02a      	beq.n	48ec <_vfiprintf_r+0x12c>
    4896:	9309      	str	r3, [sp, #36]	; 0x24
    4898:	e028      	b.n	48ec <_vfiprintf_r+0x12c>
    489a:	4b51      	ldr	r3, [pc, #324]	; (49e0 <_vfiprintf_r+0x220>)
    489c:	429f      	cmp	r7, r3
    489e:	d101      	bne.n	48a4 <_vfiprintf_r+0xe4>
    48a0:	68b7      	ldr	r7, [r6, #8]
    48a2:	e79e      	b.n	47e2 <_vfiprintf_r+0x22>
    48a4:	4b4f      	ldr	r3, [pc, #316]	; (49e4 <_vfiprintf_r+0x224>)
    48a6:	429f      	cmp	r7, r3
    48a8:	d19b      	bne.n	47e2 <_vfiprintf_r+0x22>
    48aa:	68f7      	ldr	r7, [r6, #12]
    48ac:	e799      	b.n	47e2 <_vfiprintf_r+0x22>
    48ae:	0039      	movs	r1, r7
    48b0:	0030      	movs	r0, r6
    48b2:	f000 fb15 	bl	4ee0 <__swsetup_r>
    48b6:	2800      	cmp	r0, #0
    48b8:	d099      	beq.n	47ee <_vfiprintf_r+0x2e>
    48ba:	2001      	movs	r0, #1
    48bc:	4240      	negs	r0, r0
    48be:	b01f      	add	sp, #124	; 0x7c
    48c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    48c2:	2b25      	cmp	r3, #37	; 0x25
    48c4:	d09f      	beq.n	4806 <_vfiprintf_r+0x46>
    48c6:	3401      	adds	r4, #1
    48c8:	e79a      	b.n	4800 <_vfiprintf_r+0x40>
    48ca:	4b44      	ldr	r3, [pc, #272]	; (49dc <_vfiprintf_r+0x21c>)
    48cc:	6829      	ldr	r1, [r5, #0]
    48ce:	1ac0      	subs	r0, r0, r3
    48d0:	2301      	movs	r3, #1
    48d2:	4083      	lsls	r3, r0
    48d4:	430b      	orrs	r3, r1
    48d6:	602b      	str	r3, [r5, #0]
    48d8:	4664      	mov	r4, ip
    48da:	e7b7      	b.n	484c <_vfiprintf_r+0x8c>
    48dc:	9b05      	ldr	r3, [sp, #20]
    48de:	1d18      	adds	r0, r3, #4
    48e0:	681b      	ldr	r3, [r3, #0]
    48e2:	9005      	str	r0, [sp, #20]
    48e4:	2b00      	cmp	r3, #0
    48e6:	db3a      	blt.n	495e <_vfiprintf_r+0x19e>
    48e8:	9309      	str	r3, [sp, #36]	; 0x24
    48ea:	4664      	mov	r4, ip
    48ec:	7823      	ldrb	r3, [r4, #0]
    48ee:	2b2e      	cmp	r3, #46	; 0x2e
    48f0:	d10b      	bne.n	490a <_vfiprintf_r+0x14a>
    48f2:	7863      	ldrb	r3, [r4, #1]
    48f4:	1c62      	adds	r2, r4, #1
    48f6:	2b2a      	cmp	r3, #42	; 0x2a
    48f8:	d13f      	bne.n	497a <_vfiprintf_r+0x1ba>
    48fa:	9b05      	ldr	r3, [sp, #20]
    48fc:	3402      	adds	r4, #2
    48fe:	1d1a      	adds	r2, r3, #4
    4900:	681b      	ldr	r3, [r3, #0]
    4902:	9205      	str	r2, [sp, #20]
    4904:	2b00      	cmp	r3, #0
    4906:	db35      	blt.n	4974 <_vfiprintf_r+0x1b4>
    4908:	9307      	str	r3, [sp, #28]
    490a:	7821      	ldrb	r1, [r4, #0]
    490c:	2203      	movs	r2, #3
    490e:	4836      	ldr	r0, [pc, #216]	; (49e8 <_vfiprintf_r+0x228>)
    4910:	f000 fba6 	bl	5060 <memchr>
    4914:	2800      	cmp	r0, #0
    4916:	d007      	beq.n	4928 <_vfiprintf_r+0x168>
    4918:	4b33      	ldr	r3, [pc, #204]	; (49e8 <_vfiprintf_r+0x228>)
    491a:	682a      	ldr	r2, [r5, #0]
    491c:	1ac0      	subs	r0, r0, r3
    491e:	2340      	movs	r3, #64	; 0x40
    4920:	4083      	lsls	r3, r0
    4922:	4313      	orrs	r3, r2
    4924:	602b      	str	r3, [r5, #0]
    4926:	3401      	adds	r4, #1
    4928:	7821      	ldrb	r1, [r4, #0]
    492a:	1c63      	adds	r3, r4, #1
    492c:	2206      	movs	r2, #6
    492e:	482f      	ldr	r0, [pc, #188]	; (49ec <_vfiprintf_r+0x22c>)
    4930:	9302      	str	r3, [sp, #8]
    4932:	7629      	strb	r1, [r5, #24]
    4934:	f000 fb94 	bl	5060 <memchr>
    4938:	2800      	cmp	r0, #0
    493a:	d044      	beq.n	49c6 <_vfiprintf_r+0x206>
    493c:	4b2c      	ldr	r3, [pc, #176]	; (49f0 <_vfiprintf_r+0x230>)
    493e:	2b00      	cmp	r3, #0
    4940:	d12f      	bne.n	49a2 <_vfiprintf_r+0x1e2>
    4942:	6829      	ldr	r1, [r5, #0]
    4944:	9b05      	ldr	r3, [sp, #20]
    4946:	2207      	movs	r2, #7
    4948:	05c9      	lsls	r1, r1, #23
    494a:	d528      	bpl.n	499e <_vfiprintf_r+0x1de>
    494c:	189b      	adds	r3, r3, r2
    494e:	4393      	bics	r3, r2
    4950:	3308      	adds	r3, #8
    4952:	9305      	str	r3, [sp, #20]
    4954:	696b      	ldr	r3, [r5, #20]
    4956:	9a03      	ldr	r2, [sp, #12]
    4958:	189b      	adds	r3, r3, r2
    495a:	616b      	str	r3, [r5, #20]
    495c:	e74f      	b.n	47fe <_vfiprintf_r+0x3e>
    495e:	425b      	negs	r3, r3
    4960:	60eb      	str	r3, [r5, #12]
    4962:	2302      	movs	r3, #2
    4964:	430b      	orrs	r3, r1
    4966:	602b      	str	r3, [r5, #0]
    4968:	e7bf      	b.n	48ea <_vfiprintf_r+0x12a>
    496a:	434b      	muls	r3, r1
    496c:	3401      	adds	r4, #1
    496e:	189b      	adds	r3, r3, r2
    4970:	2001      	movs	r0, #1
    4972:	e789      	b.n	4888 <_vfiprintf_r+0xc8>
    4974:	2301      	movs	r3, #1
    4976:	425b      	negs	r3, r3
    4978:	e7c6      	b.n	4908 <_vfiprintf_r+0x148>
    497a:	2300      	movs	r3, #0
    497c:	0014      	movs	r4, r2
    497e:	200a      	movs	r0, #10
    4980:	001a      	movs	r2, r3
    4982:	606b      	str	r3, [r5, #4]
    4984:	7821      	ldrb	r1, [r4, #0]
    4986:	3930      	subs	r1, #48	; 0x30
    4988:	2909      	cmp	r1, #9
    498a:	d903      	bls.n	4994 <_vfiprintf_r+0x1d4>
    498c:	2b00      	cmp	r3, #0
    498e:	d0bc      	beq.n	490a <_vfiprintf_r+0x14a>
    4990:	9207      	str	r2, [sp, #28]
    4992:	e7ba      	b.n	490a <_vfiprintf_r+0x14a>
    4994:	4342      	muls	r2, r0
    4996:	3401      	adds	r4, #1
    4998:	1852      	adds	r2, r2, r1
    499a:	2301      	movs	r3, #1
    499c:	e7f2      	b.n	4984 <_vfiprintf_r+0x1c4>
    499e:	3307      	adds	r3, #7
    49a0:	e7d5      	b.n	494e <_vfiprintf_r+0x18e>
    49a2:	ab05      	add	r3, sp, #20
    49a4:	9300      	str	r3, [sp, #0]
    49a6:	003a      	movs	r2, r7
    49a8:	4b12      	ldr	r3, [pc, #72]	; (49f4 <_vfiprintf_r+0x234>)
    49aa:	0029      	movs	r1, r5
    49ac:	0030      	movs	r0, r6
    49ae:	e000      	b.n	49b2 <_vfiprintf_r+0x1f2>
    49b0:	bf00      	nop
    49b2:	9003      	str	r0, [sp, #12]
    49b4:	9b03      	ldr	r3, [sp, #12]
    49b6:	3301      	adds	r3, #1
    49b8:	d1cc      	bne.n	4954 <_vfiprintf_r+0x194>
    49ba:	89bb      	ldrh	r3, [r7, #12]
    49bc:	065b      	lsls	r3, r3, #25
    49be:	d500      	bpl.n	49c2 <_vfiprintf_r+0x202>
    49c0:	e77b      	b.n	48ba <_vfiprintf_r+0xfa>
    49c2:	980b      	ldr	r0, [sp, #44]	; 0x2c
    49c4:	e77b      	b.n	48be <_vfiprintf_r+0xfe>
    49c6:	ab05      	add	r3, sp, #20
    49c8:	9300      	str	r3, [sp, #0]
    49ca:	003a      	movs	r2, r7
    49cc:	4b09      	ldr	r3, [pc, #36]	; (49f4 <_vfiprintf_r+0x234>)
    49ce:	0029      	movs	r1, r5
    49d0:	0030      	movs	r0, r6
    49d2:	f000 f87f 	bl	4ad4 <_printf_i>
    49d6:	e7ec      	b.n	49b2 <_vfiprintf_r+0x1f2>
    49d8:	00007464 	.word	0x00007464
    49dc:	000074a4 	.word	0x000074a4
    49e0:	00007484 	.word	0x00007484
    49e4:	00007444 	.word	0x00007444
    49e8:	000074aa 	.word	0x000074aa
    49ec:	000074ae 	.word	0x000074ae
    49f0:	00000000 	.word	0x00000000
    49f4:	0000479b 	.word	0x0000479b

000049f8 <_printf_common>:
    49f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    49fa:	0015      	movs	r5, r2
    49fc:	9301      	str	r3, [sp, #4]
    49fe:	688a      	ldr	r2, [r1, #8]
    4a00:	690b      	ldr	r3, [r1, #16]
    4a02:	9000      	str	r0, [sp, #0]
    4a04:	000c      	movs	r4, r1
    4a06:	4293      	cmp	r3, r2
    4a08:	da00      	bge.n	4a0c <_printf_common+0x14>
    4a0a:	0013      	movs	r3, r2
    4a0c:	0022      	movs	r2, r4
    4a0e:	602b      	str	r3, [r5, #0]
    4a10:	3243      	adds	r2, #67	; 0x43
    4a12:	7812      	ldrb	r2, [r2, #0]
    4a14:	2a00      	cmp	r2, #0
    4a16:	d001      	beq.n	4a1c <_printf_common+0x24>
    4a18:	3301      	adds	r3, #1
    4a1a:	602b      	str	r3, [r5, #0]
    4a1c:	6823      	ldr	r3, [r4, #0]
    4a1e:	069b      	lsls	r3, r3, #26
    4a20:	d502      	bpl.n	4a28 <_printf_common+0x30>
    4a22:	682b      	ldr	r3, [r5, #0]
    4a24:	3302      	adds	r3, #2
    4a26:	602b      	str	r3, [r5, #0]
    4a28:	2706      	movs	r7, #6
    4a2a:	6823      	ldr	r3, [r4, #0]
    4a2c:	401f      	ands	r7, r3
    4a2e:	d027      	beq.n	4a80 <_printf_common+0x88>
    4a30:	0023      	movs	r3, r4
    4a32:	3343      	adds	r3, #67	; 0x43
    4a34:	781b      	ldrb	r3, [r3, #0]
    4a36:	1e5a      	subs	r2, r3, #1
    4a38:	4193      	sbcs	r3, r2
    4a3a:	6822      	ldr	r2, [r4, #0]
    4a3c:	0692      	lsls	r2, r2, #26
    4a3e:	d430      	bmi.n	4aa2 <_printf_common+0xaa>
    4a40:	0022      	movs	r2, r4
    4a42:	9901      	ldr	r1, [sp, #4]
    4a44:	3243      	adds	r2, #67	; 0x43
    4a46:	9800      	ldr	r0, [sp, #0]
    4a48:	9e08      	ldr	r6, [sp, #32]
    4a4a:	47b0      	blx	r6
    4a4c:	1c43      	adds	r3, r0, #1
    4a4e:	d025      	beq.n	4a9c <_printf_common+0xa4>
    4a50:	2306      	movs	r3, #6
    4a52:	6820      	ldr	r0, [r4, #0]
    4a54:	682a      	ldr	r2, [r5, #0]
    4a56:	68e1      	ldr	r1, [r4, #12]
    4a58:	4003      	ands	r3, r0
    4a5a:	2500      	movs	r5, #0
    4a5c:	2b04      	cmp	r3, #4
    4a5e:	d103      	bne.n	4a68 <_printf_common+0x70>
    4a60:	1a8d      	subs	r5, r1, r2
    4a62:	43eb      	mvns	r3, r5
    4a64:	17db      	asrs	r3, r3, #31
    4a66:	401d      	ands	r5, r3
    4a68:	68a3      	ldr	r3, [r4, #8]
    4a6a:	6922      	ldr	r2, [r4, #16]
    4a6c:	4293      	cmp	r3, r2
    4a6e:	dd01      	ble.n	4a74 <_printf_common+0x7c>
    4a70:	1a9b      	subs	r3, r3, r2
    4a72:	18ed      	adds	r5, r5, r3
    4a74:	2700      	movs	r7, #0
    4a76:	42bd      	cmp	r5, r7
    4a78:	d120      	bne.n	4abc <_printf_common+0xc4>
    4a7a:	2000      	movs	r0, #0
    4a7c:	e010      	b.n	4aa0 <_printf_common+0xa8>
    4a7e:	3701      	adds	r7, #1
    4a80:	68e3      	ldr	r3, [r4, #12]
    4a82:	682a      	ldr	r2, [r5, #0]
    4a84:	1a9b      	subs	r3, r3, r2
    4a86:	429f      	cmp	r7, r3
    4a88:	dad2      	bge.n	4a30 <_printf_common+0x38>
    4a8a:	0022      	movs	r2, r4
    4a8c:	2301      	movs	r3, #1
    4a8e:	3219      	adds	r2, #25
    4a90:	9901      	ldr	r1, [sp, #4]
    4a92:	9800      	ldr	r0, [sp, #0]
    4a94:	9e08      	ldr	r6, [sp, #32]
    4a96:	47b0      	blx	r6
    4a98:	1c43      	adds	r3, r0, #1
    4a9a:	d1f0      	bne.n	4a7e <_printf_common+0x86>
    4a9c:	2001      	movs	r0, #1
    4a9e:	4240      	negs	r0, r0
    4aa0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4aa2:	2030      	movs	r0, #48	; 0x30
    4aa4:	18e1      	adds	r1, r4, r3
    4aa6:	3143      	adds	r1, #67	; 0x43
    4aa8:	7008      	strb	r0, [r1, #0]
    4aaa:	0021      	movs	r1, r4
    4aac:	1c5a      	adds	r2, r3, #1
    4aae:	3145      	adds	r1, #69	; 0x45
    4ab0:	7809      	ldrb	r1, [r1, #0]
    4ab2:	18a2      	adds	r2, r4, r2
    4ab4:	3243      	adds	r2, #67	; 0x43
    4ab6:	3302      	adds	r3, #2
    4ab8:	7011      	strb	r1, [r2, #0]
    4aba:	e7c1      	b.n	4a40 <_printf_common+0x48>
    4abc:	0022      	movs	r2, r4
    4abe:	2301      	movs	r3, #1
    4ac0:	321a      	adds	r2, #26
    4ac2:	9901      	ldr	r1, [sp, #4]
    4ac4:	9800      	ldr	r0, [sp, #0]
    4ac6:	9e08      	ldr	r6, [sp, #32]
    4ac8:	47b0      	blx	r6
    4aca:	1c43      	adds	r3, r0, #1
    4acc:	d0e6      	beq.n	4a9c <_printf_common+0xa4>
    4ace:	3701      	adds	r7, #1
    4ad0:	e7d1      	b.n	4a76 <_printf_common+0x7e>
	...

00004ad4 <_printf_i>:
    4ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
    4ad6:	b08b      	sub	sp, #44	; 0x2c
    4ad8:	9206      	str	r2, [sp, #24]
    4ada:	000a      	movs	r2, r1
    4adc:	3243      	adds	r2, #67	; 0x43
    4ade:	9307      	str	r3, [sp, #28]
    4ae0:	9005      	str	r0, [sp, #20]
    4ae2:	9204      	str	r2, [sp, #16]
    4ae4:	7e0a      	ldrb	r2, [r1, #24]
    4ae6:	000c      	movs	r4, r1
    4ae8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4aea:	2a6e      	cmp	r2, #110	; 0x6e
    4aec:	d100      	bne.n	4af0 <_printf_i+0x1c>
    4aee:	e08f      	b.n	4c10 <_printf_i+0x13c>
    4af0:	d817      	bhi.n	4b22 <_printf_i+0x4e>
    4af2:	2a63      	cmp	r2, #99	; 0x63
    4af4:	d02c      	beq.n	4b50 <_printf_i+0x7c>
    4af6:	d808      	bhi.n	4b0a <_printf_i+0x36>
    4af8:	2a00      	cmp	r2, #0
    4afa:	d100      	bne.n	4afe <_printf_i+0x2a>
    4afc:	e099      	b.n	4c32 <_printf_i+0x15e>
    4afe:	2a58      	cmp	r2, #88	; 0x58
    4b00:	d054      	beq.n	4bac <_printf_i+0xd8>
    4b02:	0026      	movs	r6, r4
    4b04:	3642      	adds	r6, #66	; 0x42
    4b06:	7032      	strb	r2, [r6, #0]
    4b08:	e029      	b.n	4b5e <_printf_i+0x8a>
    4b0a:	2a64      	cmp	r2, #100	; 0x64
    4b0c:	d001      	beq.n	4b12 <_printf_i+0x3e>
    4b0e:	2a69      	cmp	r2, #105	; 0x69
    4b10:	d1f7      	bne.n	4b02 <_printf_i+0x2e>
    4b12:	6821      	ldr	r1, [r4, #0]
    4b14:	681a      	ldr	r2, [r3, #0]
    4b16:	0608      	lsls	r0, r1, #24
    4b18:	d523      	bpl.n	4b62 <_printf_i+0x8e>
    4b1a:	1d11      	adds	r1, r2, #4
    4b1c:	6019      	str	r1, [r3, #0]
    4b1e:	6815      	ldr	r5, [r2, #0]
    4b20:	e025      	b.n	4b6e <_printf_i+0x9a>
    4b22:	2a73      	cmp	r2, #115	; 0x73
    4b24:	d100      	bne.n	4b28 <_printf_i+0x54>
    4b26:	e088      	b.n	4c3a <_printf_i+0x166>
    4b28:	d808      	bhi.n	4b3c <_printf_i+0x68>
    4b2a:	2a6f      	cmp	r2, #111	; 0x6f
    4b2c:	d029      	beq.n	4b82 <_printf_i+0xae>
    4b2e:	2a70      	cmp	r2, #112	; 0x70
    4b30:	d1e7      	bne.n	4b02 <_printf_i+0x2e>
    4b32:	2220      	movs	r2, #32
    4b34:	6809      	ldr	r1, [r1, #0]
    4b36:	430a      	orrs	r2, r1
    4b38:	6022      	str	r2, [r4, #0]
    4b3a:	e003      	b.n	4b44 <_printf_i+0x70>
    4b3c:	2a75      	cmp	r2, #117	; 0x75
    4b3e:	d020      	beq.n	4b82 <_printf_i+0xae>
    4b40:	2a78      	cmp	r2, #120	; 0x78
    4b42:	d1de      	bne.n	4b02 <_printf_i+0x2e>
    4b44:	0022      	movs	r2, r4
    4b46:	2178      	movs	r1, #120	; 0x78
    4b48:	3245      	adds	r2, #69	; 0x45
    4b4a:	7011      	strb	r1, [r2, #0]
    4b4c:	4a6c      	ldr	r2, [pc, #432]	; (4d00 <_printf_i+0x22c>)
    4b4e:	e030      	b.n	4bb2 <_printf_i+0xde>
    4b50:	000e      	movs	r6, r1
    4b52:	681a      	ldr	r2, [r3, #0]
    4b54:	3642      	adds	r6, #66	; 0x42
    4b56:	1d11      	adds	r1, r2, #4
    4b58:	6019      	str	r1, [r3, #0]
    4b5a:	6813      	ldr	r3, [r2, #0]
    4b5c:	7033      	strb	r3, [r6, #0]
    4b5e:	2301      	movs	r3, #1
    4b60:	e079      	b.n	4c56 <_printf_i+0x182>
    4b62:	0649      	lsls	r1, r1, #25
    4b64:	d5d9      	bpl.n	4b1a <_printf_i+0x46>
    4b66:	1d11      	adds	r1, r2, #4
    4b68:	6019      	str	r1, [r3, #0]
    4b6a:	2300      	movs	r3, #0
    4b6c:	5ed5      	ldrsh	r5, [r2, r3]
    4b6e:	2d00      	cmp	r5, #0
    4b70:	da03      	bge.n	4b7a <_printf_i+0xa6>
    4b72:	232d      	movs	r3, #45	; 0x2d
    4b74:	9a04      	ldr	r2, [sp, #16]
    4b76:	426d      	negs	r5, r5
    4b78:	7013      	strb	r3, [r2, #0]
    4b7a:	4b62      	ldr	r3, [pc, #392]	; (4d04 <_printf_i+0x230>)
    4b7c:	270a      	movs	r7, #10
    4b7e:	9303      	str	r3, [sp, #12]
    4b80:	e02f      	b.n	4be2 <_printf_i+0x10e>
    4b82:	6820      	ldr	r0, [r4, #0]
    4b84:	6819      	ldr	r1, [r3, #0]
    4b86:	0605      	lsls	r5, r0, #24
    4b88:	d503      	bpl.n	4b92 <_printf_i+0xbe>
    4b8a:	1d08      	adds	r0, r1, #4
    4b8c:	6018      	str	r0, [r3, #0]
    4b8e:	680d      	ldr	r5, [r1, #0]
    4b90:	e005      	b.n	4b9e <_printf_i+0xca>
    4b92:	0640      	lsls	r0, r0, #25
    4b94:	d5f9      	bpl.n	4b8a <_printf_i+0xb6>
    4b96:	680d      	ldr	r5, [r1, #0]
    4b98:	1d08      	adds	r0, r1, #4
    4b9a:	6018      	str	r0, [r3, #0]
    4b9c:	b2ad      	uxth	r5, r5
    4b9e:	4b59      	ldr	r3, [pc, #356]	; (4d04 <_printf_i+0x230>)
    4ba0:	2708      	movs	r7, #8
    4ba2:	9303      	str	r3, [sp, #12]
    4ba4:	2a6f      	cmp	r2, #111	; 0x6f
    4ba6:	d018      	beq.n	4bda <_printf_i+0x106>
    4ba8:	270a      	movs	r7, #10
    4baa:	e016      	b.n	4bda <_printf_i+0x106>
    4bac:	3145      	adds	r1, #69	; 0x45
    4bae:	700a      	strb	r2, [r1, #0]
    4bb0:	4a54      	ldr	r2, [pc, #336]	; (4d04 <_printf_i+0x230>)
    4bb2:	9203      	str	r2, [sp, #12]
    4bb4:	681a      	ldr	r2, [r3, #0]
    4bb6:	6821      	ldr	r1, [r4, #0]
    4bb8:	1d10      	adds	r0, r2, #4
    4bba:	6018      	str	r0, [r3, #0]
    4bbc:	6815      	ldr	r5, [r2, #0]
    4bbe:	0608      	lsls	r0, r1, #24
    4bc0:	d522      	bpl.n	4c08 <_printf_i+0x134>
    4bc2:	07cb      	lsls	r3, r1, #31
    4bc4:	d502      	bpl.n	4bcc <_printf_i+0xf8>
    4bc6:	2320      	movs	r3, #32
    4bc8:	4319      	orrs	r1, r3
    4bca:	6021      	str	r1, [r4, #0]
    4bcc:	2710      	movs	r7, #16
    4bce:	2d00      	cmp	r5, #0
    4bd0:	d103      	bne.n	4bda <_printf_i+0x106>
    4bd2:	2320      	movs	r3, #32
    4bd4:	6822      	ldr	r2, [r4, #0]
    4bd6:	439a      	bics	r2, r3
    4bd8:	6022      	str	r2, [r4, #0]
    4bda:	0023      	movs	r3, r4
    4bdc:	2200      	movs	r2, #0
    4bde:	3343      	adds	r3, #67	; 0x43
    4be0:	701a      	strb	r2, [r3, #0]
    4be2:	6863      	ldr	r3, [r4, #4]
    4be4:	60a3      	str	r3, [r4, #8]
    4be6:	2b00      	cmp	r3, #0
    4be8:	db5c      	blt.n	4ca4 <_printf_i+0x1d0>
    4bea:	2204      	movs	r2, #4
    4bec:	6821      	ldr	r1, [r4, #0]
    4bee:	4391      	bics	r1, r2
    4bf0:	6021      	str	r1, [r4, #0]
    4bf2:	2d00      	cmp	r5, #0
    4bf4:	d158      	bne.n	4ca8 <_printf_i+0x1d4>
    4bf6:	9e04      	ldr	r6, [sp, #16]
    4bf8:	2b00      	cmp	r3, #0
    4bfa:	d064      	beq.n	4cc6 <_printf_i+0x1f2>
    4bfc:	0026      	movs	r6, r4
    4bfe:	9b03      	ldr	r3, [sp, #12]
    4c00:	3642      	adds	r6, #66	; 0x42
    4c02:	781b      	ldrb	r3, [r3, #0]
    4c04:	7033      	strb	r3, [r6, #0]
    4c06:	e05e      	b.n	4cc6 <_printf_i+0x1f2>
    4c08:	0648      	lsls	r0, r1, #25
    4c0a:	d5da      	bpl.n	4bc2 <_printf_i+0xee>
    4c0c:	b2ad      	uxth	r5, r5
    4c0e:	e7d8      	b.n	4bc2 <_printf_i+0xee>
    4c10:	6809      	ldr	r1, [r1, #0]
    4c12:	681a      	ldr	r2, [r3, #0]
    4c14:	0608      	lsls	r0, r1, #24
    4c16:	d505      	bpl.n	4c24 <_printf_i+0x150>
    4c18:	1d11      	adds	r1, r2, #4
    4c1a:	6019      	str	r1, [r3, #0]
    4c1c:	6813      	ldr	r3, [r2, #0]
    4c1e:	6962      	ldr	r2, [r4, #20]
    4c20:	601a      	str	r2, [r3, #0]
    4c22:	e006      	b.n	4c32 <_printf_i+0x15e>
    4c24:	0649      	lsls	r1, r1, #25
    4c26:	d5f7      	bpl.n	4c18 <_printf_i+0x144>
    4c28:	1d11      	adds	r1, r2, #4
    4c2a:	6019      	str	r1, [r3, #0]
    4c2c:	6813      	ldr	r3, [r2, #0]
    4c2e:	8aa2      	ldrh	r2, [r4, #20]
    4c30:	801a      	strh	r2, [r3, #0]
    4c32:	2300      	movs	r3, #0
    4c34:	9e04      	ldr	r6, [sp, #16]
    4c36:	6123      	str	r3, [r4, #16]
    4c38:	e054      	b.n	4ce4 <_printf_i+0x210>
    4c3a:	681a      	ldr	r2, [r3, #0]
    4c3c:	1d11      	adds	r1, r2, #4
    4c3e:	6019      	str	r1, [r3, #0]
    4c40:	6816      	ldr	r6, [r2, #0]
    4c42:	2100      	movs	r1, #0
    4c44:	6862      	ldr	r2, [r4, #4]
    4c46:	0030      	movs	r0, r6
    4c48:	f000 fa0a 	bl	5060 <memchr>
    4c4c:	2800      	cmp	r0, #0
    4c4e:	d001      	beq.n	4c54 <_printf_i+0x180>
    4c50:	1b80      	subs	r0, r0, r6
    4c52:	6060      	str	r0, [r4, #4]
    4c54:	6863      	ldr	r3, [r4, #4]
    4c56:	6123      	str	r3, [r4, #16]
    4c58:	2300      	movs	r3, #0
    4c5a:	9a04      	ldr	r2, [sp, #16]
    4c5c:	7013      	strb	r3, [r2, #0]
    4c5e:	e041      	b.n	4ce4 <_printf_i+0x210>
    4c60:	6923      	ldr	r3, [r4, #16]
    4c62:	0032      	movs	r2, r6
    4c64:	9906      	ldr	r1, [sp, #24]
    4c66:	9805      	ldr	r0, [sp, #20]
    4c68:	9d07      	ldr	r5, [sp, #28]
    4c6a:	47a8      	blx	r5
    4c6c:	1c43      	adds	r3, r0, #1
    4c6e:	d043      	beq.n	4cf8 <_printf_i+0x224>
    4c70:	6823      	ldr	r3, [r4, #0]
    4c72:	2500      	movs	r5, #0
    4c74:	079b      	lsls	r3, r3, #30
    4c76:	d40f      	bmi.n	4c98 <_printf_i+0x1c4>
    4c78:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4c7a:	68e0      	ldr	r0, [r4, #12]
    4c7c:	4298      	cmp	r0, r3
    4c7e:	da3d      	bge.n	4cfc <_printf_i+0x228>
    4c80:	0018      	movs	r0, r3
    4c82:	e03b      	b.n	4cfc <_printf_i+0x228>
    4c84:	0022      	movs	r2, r4
    4c86:	2301      	movs	r3, #1
    4c88:	3219      	adds	r2, #25
    4c8a:	9906      	ldr	r1, [sp, #24]
    4c8c:	9805      	ldr	r0, [sp, #20]
    4c8e:	9e07      	ldr	r6, [sp, #28]
    4c90:	47b0      	blx	r6
    4c92:	1c43      	adds	r3, r0, #1
    4c94:	d030      	beq.n	4cf8 <_printf_i+0x224>
    4c96:	3501      	adds	r5, #1
    4c98:	68e3      	ldr	r3, [r4, #12]
    4c9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    4c9c:	1a9b      	subs	r3, r3, r2
    4c9e:	429d      	cmp	r5, r3
    4ca0:	dbf0      	blt.n	4c84 <_printf_i+0x1b0>
    4ca2:	e7e9      	b.n	4c78 <_printf_i+0x1a4>
    4ca4:	2d00      	cmp	r5, #0
    4ca6:	d0a9      	beq.n	4bfc <_printf_i+0x128>
    4ca8:	9e04      	ldr	r6, [sp, #16]
    4caa:	0028      	movs	r0, r5
    4cac:	0039      	movs	r1, r7
    4cae:	f7fe fff9 	bl	3ca4 <__aeabi_uidivmod>
    4cb2:	9b03      	ldr	r3, [sp, #12]
    4cb4:	3e01      	subs	r6, #1
    4cb6:	5c5b      	ldrb	r3, [r3, r1]
    4cb8:	0028      	movs	r0, r5
    4cba:	7033      	strb	r3, [r6, #0]
    4cbc:	0039      	movs	r1, r7
    4cbe:	f7fe ff6b 	bl	3b98 <__udivsi3>
    4cc2:	1e05      	subs	r5, r0, #0
    4cc4:	d1f1      	bne.n	4caa <_printf_i+0x1d6>
    4cc6:	2f08      	cmp	r7, #8
    4cc8:	d109      	bne.n	4cde <_printf_i+0x20a>
    4cca:	6823      	ldr	r3, [r4, #0]
    4ccc:	07db      	lsls	r3, r3, #31
    4cce:	d506      	bpl.n	4cde <_printf_i+0x20a>
    4cd0:	6863      	ldr	r3, [r4, #4]
    4cd2:	6922      	ldr	r2, [r4, #16]
    4cd4:	4293      	cmp	r3, r2
    4cd6:	dc02      	bgt.n	4cde <_printf_i+0x20a>
    4cd8:	2330      	movs	r3, #48	; 0x30
    4cda:	3e01      	subs	r6, #1
    4cdc:	7033      	strb	r3, [r6, #0]
    4cde:	9b04      	ldr	r3, [sp, #16]
    4ce0:	1b9b      	subs	r3, r3, r6
    4ce2:	6123      	str	r3, [r4, #16]
    4ce4:	9b07      	ldr	r3, [sp, #28]
    4ce6:	aa09      	add	r2, sp, #36	; 0x24
    4ce8:	9300      	str	r3, [sp, #0]
    4cea:	0021      	movs	r1, r4
    4cec:	9b06      	ldr	r3, [sp, #24]
    4cee:	9805      	ldr	r0, [sp, #20]
    4cf0:	f7ff fe82 	bl	49f8 <_printf_common>
    4cf4:	1c43      	adds	r3, r0, #1
    4cf6:	d1b3      	bne.n	4c60 <_printf_i+0x18c>
    4cf8:	2001      	movs	r0, #1
    4cfa:	4240      	negs	r0, r0
    4cfc:	b00b      	add	sp, #44	; 0x2c
    4cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4d00:	000074c6 	.word	0x000074c6
    4d04:	000074b5 	.word	0x000074b5

00004d08 <_putc_r>:
    4d08:	b570      	push	{r4, r5, r6, lr}
    4d0a:	0006      	movs	r6, r0
    4d0c:	000d      	movs	r5, r1
    4d0e:	0014      	movs	r4, r2
    4d10:	2800      	cmp	r0, #0
    4d12:	d004      	beq.n	4d1e <_putc_r+0x16>
    4d14:	6983      	ldr	r3, [r0, #24]
    4d16:	2b00      	cmp	r3, #0
    4d18:	d101      	bne.n	4d1e <_putc_r+0x16>
    4d1a:	f7ff fc25 	bl	4568 <__sinit>
    4d1e:	4b12      	ldr	r3, [pc, #72]	; (4d68 <_putc_r+0x60>)
    4d20:	429c      	cmp	r4, r3
    4d22:	d111      	bne.n	4d48 <_putc_r+0x40>
    4d24:	6874      	ldr	r4, [r6, #4]
    4d26:	68a3      	ldr	r3, [r4, #8]
    4d28:	3b01      	subs	r3, #1
    4d2a:	60a3      	str	r3, [r4, #8]
    4d2c:	2b00      	cmp	r3, #0
    4d2e:	da05      	bge.n	4d3c <_putc_r+0x34>
    4d30:	69a2      	ldr	r2, [r4, #24]
    4d32:	4293      	cmp	r3, r2
    4d34:	db12      	blt.n	4d5c <_putc_r+0x54>
    4d36:	b2eb      	uxtb	r3, r5
    4d38:	2b0a      	cmp	r3, #10
    4d3a:	d00f      	beq.n	4d5c <_putc_r+0x54>
    4d3c:	6823      	ldr	r3, [r4, #0]
    4d3e:	b2e8      	uxtb	r0, r5
    4d40:	1c5a      	adds	r2, r3, #1
    4d42:	6022      	str	r2, [r4, #0]
    4d44:	701d      	strb	r5, [r3, #0]
    4d46:	bd70      	pop	{r4, r5, r6, pc}
    4d48:	4b08      	ldr	r3, [pc, #32]	; (4d6c <_putc_r+0x64>)
    4d4a:	429c      	cmp	r4, r3
    4d4c:	d101      	bne.n	4d52 <_putc_r+0x4a>
    4d4e:	68b4      	ldr	r4, [r6, #8]
    4d50:	e7e9      	b.n	4d26 <_putc_r+0x1e>
    4d52:	4b07      	ldr	r3, [pc, #28]	; (4d70 <_putc_r+0x68>)
    4d54:	429c      	cmp	r4, r3
    4d56:	d1e6      	bne.n	4d26 <_putc_r+0x1e>
    4d58:	68f4      	ldr	r4, [r6, #12]
    4d5a:	e7e4      	b.n	4d26 <_putc_r+0x1e>
    4d5c:	0022      	movs	r2, r4
    4d5e:	0029      	movs	r1, r5
    4d60:	0030      	movs	r0, r6
    4d62:	f000 f853 	bl	4e0c <__swbuf_r>
    4d66:	e7ee      	b.n	4d46 <_putc_r+0x3e>
    4d68:	00007464 	.word	0x00007464
    4d6c:	00007484 	.word	0x00007484
    4d70:	00007444 	.word	0x00007444

00004d74 <__sread>:
    4d74:	b570      	push	{r4, r5, r6, lr}
    4d76:	000c      	movs	r4, r1
    4d78:	250e      	movs	r5, #14
    4d7a:	5f49      	ldrsh	r1, [r1, r5]
    4d7c:	f000 f97c 	bl	5078 <_read_r>
    4d80:	2800      	cmp	r0, #0
    4d82:	db03      	blt.n	4d8c <__sread+0x18>
    4d84:	6d63      	ldr	r3, [r4, #84]	; 0x54
    4d86:	181b      	adds	r3, r3, r0
    4d88:	6563      	str	r3, [r4, #84]	; 0x54
    4d8a:	bd70      	pop	{r4, r5, r6, pc}
    4d8c:	89a3      	ldrh	r3, [r4, #12]
    4d8e:	4a02      	ldr	r2, [pc, #8]	; (4d98 <__sread+0x24>)
    4d90:	4013      	ands	r3, r2
    4d92:	81a3      	strh	r3, [r4, #12]
    4d94:	e7f9      	b.n	4d8a <__sread+0x16>
    4d96:	46c0      	nop			; (mov r8, r8)
    4d98:	ffffefff 	.word	0xffffefff

00004d9c <__swrite>:
    4d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4d9e:	001f      	movs	r7, r3
    4da0:	898b      	ldrh	r3, [r1, #12]
    4da2:	0005      	movs	r5, r0
    4da4:	000c      	movs	r4, r1
    4da6:	0016      	movs	r6, r2
    4da8:	05db      	lsls	r3, r3, #23
    4daa:	d505      	bpl.n	4db8 <__swrite+0x1c>
    4dac:	230e      	movs	r3, #14
    4dae:	5ec9      	ldrsh	r1, [r1, r3]
    4db0:	2200      	movs	r2, #0
    4db2:	2302      	movs	r3, #2
    4db4:	f000 f940 	bl	5038 <_lseek_r>
    4db8:	89a3      	ldrh	r3, [r4, #12]
    4dba:	4a05      	ldr	r2, [pc, #20]	; (4dd0 <__swrite+0x34>)
    4dbc:	0028      	movs	r0, r5
    4dbe:	4013      	ands	r3, r2
    4dc0:	81a3      	strh	r3, [r4, #12]
    4dc2:	0032      	movs	r2, r6
    4dc4:	230e      	movs	r3, #14
    4dc6:	5ee1      	ldrsh	r1, [r4, r3]
    4dc8:	003b      	movs	r3, r7
    4dca:	f000 f875 	bl	4eb8 <_write_r>
    4dce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4dd0:	ffffefff 	.word	0xffffefff

00004dd4 <__sseek>:
    4dd4:	b570      	push	{r4, r5, r6, lr}
    4dd6:	000c      	movs	r4, r1
    4dd8:	250e      	movs	r5, #14
    4dda:	5f49      	ldrsh	r1, [r1, r5]
    4ddc:	f000 f92c 	bl	5038 <_lseek_r>
    4de0:	89a3      	ldrh	r3, [r4, #12]
    4de2:	1c42      	adds	r2, r0, #1
    4de4:	d103      	bne.n	4dee <__sseek+0x1a>
    4de6:	4a05      	ldr	r2, [pc, #20]	; (4dfc <__sseek+0x28>)
    4de8:	4013      	ands	r3, r2
    4dea:	81a3      	strh	r3, [r4, #12]
    4dec:	bd70      	pop	{r4, r5, r6, pc}
    4dee:	2280      	movs	r2, #128	; 0x80
    4df0:	0152      	lsls	r2, r2, #5
    4df2:	4313      	orrs	r3, r2
    4df4:	81a3      	strh	r3, [r4, #12]
    4df6:	6560      	str	r0, [r4, #84]	; 0x54
    4df8:	e7f8      	b.n	4dec <__sseek+0x18>
    4dfa:	46c0      	nop			; (mov r8, r8)
    4dfc:	ffffefff 	.word	0xffffefff

00004e00 <__sclose>:
    4e00:	b510      	push	{r4, lr}
    4e02:	230e      	movs	r3, #14
    4e04:	5ec9      	ldrsh	r1, [r1, r3]
    4e06:	f000 f8e1 	bl	4fcc <_close_r>
    4e0a:	bd10      	pop	{r4, pc}

00004e0c <__swbuf_r>:
    4e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4e0e:	0005      	movs	r5, r0
    4e10:	000e      	movs	r6, r1
    4e12:	0014      	movs	r4, r2
    4e14:	2800      	cmp	r0, #0
    4e16:	d004      	beq.n	4e22 <__swbuf_r+0x16>
    4e18:	6983      	ldr	r3, [r0, #24]
    4e1a:	2b00      	cmp	r3, #0
    4e1c:	d101      	bne.n	4e22 <__swbuf_r+0x16>
    4e1e:	f7ff fba3 	bl	4568 <__sinit>
    4e22:	4b22      	ldr	r3, [pc, #136]	; (4eac <__swbuf_r+0xa0>)
    4e24:	429c      	cmp	r4, r3
    4e26:	d12d      	bne.n	4e84 <__swbuf_r+0x78>
    4e28:	686c      	ldr	r4, [r5, #4]
    4e2a:	69a3      	ldr	r3, [r4, #24]
    4e2c:	60a3      	str	r3, [r4, #8]
    4e2e:	89a3      	ldrh	r3, [r4, #12]
    4e30:	071b      	lsls	r3, r3, #28
    4e32:	d531      	bpl.n	4e98 <__swbuf_r+0x8c>
    4e34:	6923      	ldr	r3, [r4, #16]
    4e36:	2b00      	cmp	r3, #0
    4e38:	d02e      	beq.n	4e98 <__swbuf_r+0x8c>
    4e3a:	6823      	ldr	r3, [r4, #0]
    4e3c:	6922      	ldr	r2, [r4, #16]
    4e3e:	b2f7      	uxtb	r7, r6
    4e40:	1a98      	subs	r0, r3, r2
    4e42:	6963      	ldr	r3, [r4, #20]
    4e44:	b2f6      	uxtb	r6, r6
    4e46:	4298      	cmp	r0, r3
    4e48:	db05      	blt.n	4e56 <__swbuf_r+0x4a>
    4e4a:	0021      	movs	r1, r4
    4e4c:	0028      	movs	r0, r5
    4e4e:	f7ff fb1d 	bl	448c <_fflush_r>
    4e52:	2800      	cmp	r0, #0
    4e54:	d126      	bne.n	4ea4 <__swbuf_r+0x98>
    4e56:	68a3      	ldr	r3, [r4, #8]
    4e58:	3001      	adds	r0, #1
    4e5a:	3b01      	subs	r3, #1
    4e5c:	60a3      	str	r3, [r4, #8]
    4e5e:	6823      	ldr	r3, [r4, #0]
    4e60:	1c5a      	adds	r2, r3, #1
    4e62:	6022      	str	r2, [r4, #0]
    4e64:	701f      	strb	r7, [r3, #0]
    4e66:	6963      	ldr	r3, [r4, #20]
    4e68:	4298      	cmp	r0, r3
    4e6a:	d004      	beq.n	4e76 <__swbuf_r+0x6a>
    4e6c:	89a3      	ldrh	r3, [r4, #12]
    4e6e:	07db      	lsls	r3, r3, #31
    4e70:	d51a      	bpl.n	4ea8 <__swbuf_r+0x9c>
    4e72:	2e0a      	cmp	r6, #10
    4e74:	d118      	bne.n	4ea8 <__swbuf_r+0x9c>
    4e76:	0021      	movs	r1, r4
    4e78:	0028      	movs	r0, r5
    4e7a:	f7ff fb07 	bl	448c <_fflush_r>
    4e7e:	2800      	cmp	r0, #0
    4e80:	d012      	beq.n	4ea8 <__swbuf_r+0x9c>
    4e82:	e00f      	b.n	4ea4 <__swbuf_r+0x98>
    4e84:	4b0a      	ldr	r3, [pc, #40]	; (4eb0 <__swbuf_r+0xa4>)
    4e86:	429c      	cmp	r4, r3
    4e88:	d101      	bne.n	4e8e <__swbuf_r+0x82>
    4e8a:	68ac      	ldr	r4, [r5, #8]
    4e8c:	e7cd      	b.n	4e2a <__swbuf_r+0x1e>
    4e8e:	4b09      	ldr	r3, [pc, #36]	; (4eb4 <__swbuf_r+0xa8>)
    4e90:	429c      	cmp	r4, r3
    4e92:	d1ca      	bne.n	4e2a <__swbuf_r+0x1e>
    4e94:	68ec      	ldr	r4, [r5, #12]
    4e96:	e7c8      	b.n	4e2a <__swbuf_r+0x1e>
    4e98:	0021      	movs	r1, r4
    4e9a:	0028      	movs	r0, r5
    4e9c:	f000 f820 	bl	4ee0 <__swsetup_r>
    4ea0:	2800      	cmp	r0, #0
    4ea2:	d0ca      	beq.n	4e3a <__swbuf_r+0x2e>
    4ea4:	2601      	movs	r6, #1
    4ea6:	4276      	negs	r6, r6
    4ea8:	0030      	movs	r0, r6
    4eaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4eac:	00007464 	.word	0x00007464
    4eb0:	00007484 	.word	0x00007484
    4eb4:	00007444 	.word	0x00007444

00004eb8 <_write_r>:
    4eb8:	b570      	push	{r4, r5, r6, lr}
    4eba:	0005      	movs	r5, r0
    4ebc:	0008      	movs	r0, r1
    4ebe:	0011      	movs	r1, r2
    4ec0:	2200      	movs	r2, #0
    4ec2:	4c06      	ldr	r4, [pc, #24]	; (4edc <_write_r+0x24>)
    4ec4:	6022      	str	r2, [r4, #0]
    4ec6:	001a      	movs	r2, r3
    4ec8:	f7fd fcca 	bl	2860 <_write>
    4ecc:	1c43      	adds	r3, r0, #1
    4ece:	d103      	bne.n	4ed8 <_write_r+0x20>
    4ed0:	6823      	ldr	r3, [r4, #0]
    4ed2:	2b00      	cmp	r3, #0
    4ed4:	d000      	beq.n	4ed8 <_write_r+0x20>
    4ed6:	602b      	str	r3, [r5, #0]
    4ed8:	bd70      	pop	{r4, r5, r6, pc}
    4eda:	46c0      	nop			; (mov r8, r8)
    4edc:	20000b70 	.word	0x20000b70

00004ee0 <__swsetup_r>:
    4ee0:	4b36      	ldr	r3, [pc, #216]	; (4fbc <__swsetup_r+0xdc>)
    4ee2:	b570      	push	{r4, r5, r6, lr}
    4ee4:	681d      	ldr	r5, [r3, #0]
    4ee6:	0006      	movs	r6, r0
    4ee8:	000c      	movs	r4, r1
    4eea:	2d00      	cmp	r5, #0
    4eec:	d005      	beq.n	4efa <__swsetup_r+0x1a>
    4eee:	69ab      	ldr	r3, [r5, #24]
    4ef0:	2b00      	cmp	r3, #0
    4ef2:	d102      	bne.n	4efa <__swsetup_r+0x1a>
    4ef4:	0028      	movs	r0, r5
    4ef6:	f7ff fb37 	bl	4568 <__sinit>
    4efa:	4b31      	ldr	r3, [pc, #196]	; (4fc0 <__swsetup_r+0xe0>)
    4efc:	429c      	cmp	r4, r3
    4efe:	d10f      	bne.n	4f20 <__swsetup_r+0x40>
    4f00:	686c      	ldr	r4, [r5, #4]
    4f02:	230c      	movs	r3, #12
    4f04:	5ee2      	ldrsh	r2, [r4, r3]
    4f06:	b293      	uxth	r3, r2
    4f08:	0719      	lsls	r1, r3, #28
    4f0a:	d42d      	bmi.n	4f68 <__swsetup_r+0x88>
    4f0c:	06d9      	lsls	r1, r3, #27
    4f0e:	d411      	bmi.n	4f34 <__swsetup_r+0x54>
    4f10:	2309      	movs	r3, #9
    4f12:	2001      	movs	r0, #1
    4f14:	6033      	str	r3, [r6, #0]
    4f16:	3337      	adds	r3, #55	; 0x37
    4f18:	4313      	orrs	r3, r2
    4f1a:	81a3      	strh	r3, [r4, #12]
    4f1c:	4240      	negs	r0, r0
    4f1e:	bd70      	pop	{r4, r5, r6, pc}
    4f20:	4b28      	ldr	r3, [pc, #160]	; (4fc4 <__swsetup_r+0xe4>)
    4f22:	429c      	cmp	r4, r3
    4f24:	d101      	bne.n	4f2a <__swsetup_r+0x4a>
    4f26:	68ac      	ldr	r4, [r5, #8]
    4f28:	e7eb      	b.n	4f02 <__swsetup_r+0x22>
    4f2a:	4b27      	ldr	r3, [pc, #156]	; (4fc8 <__swsetup_r+0xe8>)
    4f2c:	429c      	cmp	r4, r3
    4f2e:	d1e8      	bne.n	4f02 <__swsetup_r+0x22>
    4f30:	68ec      	ldr	r4, [r5, #12]
    4f32:	e7e6      	b.n	4f02 <__swsetup_r+0x22>
    4f34:	075b      	lsls	r3, r3, #29
    4f36:	d513      	bpl.n	4f60 <__swsetup_r+0x80>
    4f38:	6b61      	ldr	r1, [r4, #52]	; 0x34
    4f3a:	2900      	cmp	r1, #0
    4f3c:	d008      	beq.n	4f50 <__swsetup_r+0x70>
    4f3e:	0023      	movs	r3, r4
    4f40:	3344      	adds	r3, #68	; 0x44
    4f42:	4299      	cmp	r1, r3
    4f44:	d002      	beq.n	4f4c <__swsetup_r+0x6c>
    4f46:	0030      	movs	r0, r6
    4f48:	f7ff f806 	bl	3f58 <_free_r>
    4f4c:	2300      	movs	r3, #0
    4f4e:	6363      	str	r3, [r4, #52]	; 0x34
    4f50:	2224      	movs	r2, #36	; 0x24
    4f52:	89a3      	ldrh	r3, [r4, #12]
    4f54:	4393      	bics	r3, r2
    4f56:	81a3      	strh	r3, [r4, #12]
    4f58:	2300      	movs	r3, #0
    4f5a:	6063      	str	r3, [r4, #4]
    4f5c:	6923      	ldr	r3, [r4, #16]
    4f5e:	6023      	str	r3, [r4, #0]
    4f60:	2308      	movs	r3, #8
    4f62:	89a2      	ldrh	r2, [r4, #12]
    4f64:	4313      	orrs	r3, r2
    4f66:	81a3      	strh	r3, [r4, #12]
    4f68:	6923      	ldr	r3, [r4, #16]
    4f6a:	2b00      	cmp	r3, #0
    4f6c:	d10b      	bne.n	4f86 <__swsetup_r+0xa6>
    4f6e:	21a0      	movs	r1, #160	; 0xa0
    4f70:	2280      	movs	r2, #128	; 0x80
    4f72:	89a3      	ldrh	r3, [r4, #12]
    4f74:	0089      	lsls	r1, r1, #2
    4f76:	0092      	lsls	r2, r2, #2
    4f78:	400b      	ands	r3, r1
    4f7a:	4293      	cmp	r3, r2
    4f7c:	d003      	beq.n	4f86 <__swsetup_r+0xa6>
    4f7e:	0021      	movs	r1, r4
    4f80:	0030      	movs	r0, r6
    4f82:	f7ff fbaf 	bl	46e4 <__smakebuf_r>
    4f86:	2301      	movs	r3, #1
    4f88:	89a2      	ldrh	r2, [r4, #12]
    4f8a:	4013      	ands	r3, r2
    4f8c:	d011      	beq.n	4fb2 <__swsetup_r+0xd2>
    4f8e:	2300      	movs	r3, #0
    4f90:	60a3      	str	r3, [r4, #8]
    4f92:	6963      	ldr	r3, [r4, #20]
    4f94:	425b      	negs	r3, r3
    4f96:	61a3      	str	r3, [r4, #24]
    4f98:	2000      	movs	r0, #0
    4f9a:	6923      	ldr	r3, [r4, #16]
    4f9c:	4283      	cmp	r3, r0
    4f9e:	d1be      	bne.n	4f1e <__swsetup_r+0x3e>
    4fa0:	230c      	movs	r3, #12
    4fa2:	5ee2      	ldrsh	r2, [r4, r3]
    4fa4:	0613      	lsls	r3, r2, #24
    4fa6:	d5ba      	bpl.n	4f1e <__swsetup_r+0x3e>
    4fa8:	2340      	movs	r3, #64	; 0x40
    4faa:	4313      	orrs	r3, r2
    4fac:	81a3      	strh	r3, [r4, #12]
    4fae:	3801      	subs	r0, #1
    4fb0:	e7b5      	b.n	4f1e <__swsetup_r+0x3e>
    4fb2:	0792      	lsls	r2, r2, #30
    4fb4:	d400      	bmi.n	4fb8 <__swsetup_r+0xd8>
    4fb6:	6963      	ldr	r3, [r4, #20]
    4fb8:	60a3      	str	r3, [r4, #8]
    4fba:	e7ed      	b.n	4f98 <__swsetup_r+0xb8>
    4fbc:	20000178 	.word	0x20000178
    4fc0:	00007464 	.word	0x00007464
    4fc4:	00007484 	.word	0x00007484
    4fc8:	00007444 	.word	0x00007444

00004fcc <_close_r>:
    4fcc:	2300      	movs	r3, #0
    4fce:	b570      	push	{r4, r5, r6, lr}
    4fd0:	4c06      	ldr	r4, [pc, #24]	; (4fec <_close_r+0x20>)
    4fd2:	0005      	movs	r5, r0
    4fd4:	0008      	movs	r0, r1
    4fd6:	6023      	str	r3, [r4, #0]
    4fd8:	f7fd fc7c 	bl	28d4 <_close>
    4fdc:	1c43      	adds	r3, r0, #1
    4fde:	d103      	bne.n	4fe8 <_close_r+0x1c>
    4fe0:	6823      	ldr	r3, [r4, #0]
    4fe2:	2b00      	cmp	r3, #0
    4fe4:	d000      	beq.n	4fe8 <_close_r+0x1c>
    4fe6:	602b      	str	r3, [r5, #0]
    4fe8:	bd70      	pop	{r4, r5, r6, pc}
    4fea:	46c0      	nop			; (mov r8, r8)
    4fec:	20000b70 	.word	0x20000b70

00004ff0 <_fstat_r>:
    4ff0:	2300      	movs	r3, #0
    4ff2:	b570      	push	{r4, r5, r6, lr}
    4ff4:	4c06      	ldr	r4, [pc, #24]	; (5010 <_fstat_r+0x20>)
    4ff6:	0005      	movs	r5, r0
    4ff8:	0008      	movs	r0, r1
    4ffa:	0011      	movs	r1, r2
    4ffc:	6023      	str	r3, [r4, #0]
    4ffe:	f7fd fc6c 	bl	28da <_fstat>
    5002:	1c43      	adds	r3, r0, #1
    5004:	d103      	bne.n	500e <_fstat_r+0x1e>
    5006:	6823      	ldr	r3, [r4, #0]
    5008:	2b00      	cmp	r3, #0
    500a:	d000      	beq.n	500e <_fstat_r+0x1e>
    500c:	602b      	str	r3, [r5, #0]
    500e:	bd70      	pop	{r4, r5, r6, pc}
    5010:	20000b70 	.word	0x20000b70

00005014 <_isatty_r>:
    5014:	2300      	movs	r3, #0
    5016:	b570      	push	{r4, r5, r6, lr}
    5018:	4c06      	ldr	r4, [pc, #24]	; (5034 <_isatty_r+0x20>)
    501a:	0005      	movs	r5, r0
    501c:	0008      	movs	r0, r1
    501e:	6023      	str	r3, [r4, #0]
    5020:	f7fd fc60 	bl	28e4 <_isatty>
    5024:	1c43      	adds	r3, r0, #1
    5026:	d103      	bne.n	5030 <_isatty_r+0x1c>
    5028:	6823      	ldr	r3, [r4, #0]
    502a:	2b00      	cmp	r3, #0
    502c:	d000      	beq.n	5030 <_isatty_r+0x1c>
    502e:	602b      	str	r3, [r5, #0]
    5030:	bd70      	pop	{r4, r5, r6, pc}
    5032:	46c0      	nop			; (mov r8, r8)
    5034:	20000b70 	.word	0x20000b70

00005038 <_lseek_r>:
    5038:	b570      	push	{r4, r5, r6, lr}
    503a:	0005      	movs	r5, r0
    503c:	0008      	movs	r0, r1
    503e:	0011      	movs	r1, r2
    5040:	2200      	movs	r2, #0
    5042:	4c06      	ldr	r4, [pc, #24]	; (505c <_lseek_r+0x24>)
    5044:	6022      	str	r2, [r4, #0]
    5046:	001a      	movs	r2, r3
    5048:	f7fd fc4e 	bl	28e8 <_lseek>
    504c:	1c43      	adds	r3, r0, #1
    504e:	d103      	bne.n	5058 <_lseek_r+0x20>
    5050:	6823      	ldr	r3, [r4, #0]
    5052:	2b00      	cmp	r3, #0
    5054:	d000      	beq.n	5058 <_lseek_r+0x20>
    5056:	602b      	str	r3, [r5, #0]
    5058:	bd70      	pop	{r4, r5, r6, pc}
    505a:	46c0      	nop			; (mov r8, r8)
    505c:	20000b70 	.word	0x20000b70

00005060 <memchr>:
    5060:	b2c9      	uxtb	r1, r1
    5062:	1882      	adds	r2, r0, r2
    5064:	4290      	cmp	r0, r2
    5066:	d101      	bne.n	506c <memchr+0xc>
    5068:	2000      	movs	r0, #0
    506a:	4770      	bx	lr
    506c:	7803      	ldrb	r3, [r0, #0]
    506e:	428b      	cmp	r3, r1
    5070:	d0fb      	beq.n	506a <memchr+0xa>
    5072:	3001      	adds	r0, #1
    5074:	e7f6      	b.n	5064 <memchr+0x4>
	...

00005078 <_read_r>:
    5078:	b570      	push	{r4, r5, r6, lr}
    507a:	0005      	movs	r5, r0
    507c:	0008      	movs	r0, r1
    507e:	0011      	movs	r1, r2
    5080:	2200      	movs	r2, #0
    5082:	4c06      	ldr	r4, [pc, #24]	; (509c <_read_r+0x24>)
    5084:	6022      	str	r2, [r4, #0]
    5086:	001a      	movs	r2, r3
    5088:	f7fd fbc8 	bl	281c <_read>
    508c:	1c43      	adds	r3, r0, #1
    508e:	d103      	bne.n	5098 <_read_r+0x20>
    5090:	6823      	ldr	r3, [r4, #0]
    5092:	2b00      	cmp	r3, #0
    5094:	d000      	beq.n	5098 <_read_r+0x20>
    5096:	602b      	str	r3, [r5, #0]
    5098:	bd70      	pop	{r4, r5, r6, pc}
    509a:	46c0      	nop			; (mov r8, r8)
    509c:	20000b70 	.word	0x20000b70
    50a0:	00000bb2 	.word	0x00000bb2
    50a4:	00000bb8 	.word	0x00000bb8
    50a8:	00000bbe 	.word	0x00000bbe
    50ac:	00000bca 	.word	0x00000bca
    50b0:	00000bd0 	.word	0x00000bd0
    50b4:	00000bb6 	.word	0x00000bb6
    50b8:	00000bd6 	.word	0x00000bd6
    50bc:	00000008 	.word	0x00000008
    50c0:	00000008 	.word	0x00000008
    50c4:	00000008 	.word	0x00000008
    50c8:	00000008 	.word	0x00000008
    50cc:	00000008 	.word	0x00000008
    50d0:	00000008 	.word	0x00000008
    50d4:	00000008 	.word	0x00000008
    50d8:	00000008 	.word	0x00000008
    50dc:	00000010 	.word	0x00000010
    50e0:	00000010 	.word	0x00000010
    50e4:	00000010 	.word	0x00000010
    50e8:	00000010 	.word	0x00000010
    50ec:	00000010 	.word	0x00000010
    50f0:	00000010 	.word	0x00000010
    50f4:	00000010 	.word	0x00000010
    50f8:	00000010 	.word	0x00000010
    50fc:	00000018 	.word	0x00000018
    5100:	00000018 	.word	0x00000018
    5104:	00000018 	.word	0x00000018
    5108:	00000018 	.word	0x00000018
    510c:	00000018 	.word	0x00000018
    5110:	00000018 	.word	0x00000018
    5114:	00000018 	.word	0x00000018
    5118:	00000018 	.word	0x00000018
    511c:	00000020 	.word	0x00000020
    5120:	00000020 	.word	0x00000020
    5124:	00000020 	.word	0x00000020
    5128:	00000020 	.word	0x00000020
    512c:	00000020 	.word	0x00000020
    5130:	00000020 	.word	0x00000020
    5134:	00000020 	.word	0x00000020
    5138:	00000020 	.word	0x00000020
    513c:	00000028 	.word	0x00000028
    5140:	00000028 	.word	0x00000028
    5144:	00000028 	.word	0x00000028
    5148:	00000028 	.word	0x00000028
    514c:	00000028 	.word	0x00000028
    5150:	00000028 	.word	0x00000028
    5154:	00000028 	.word	0x00000028
    5158:	00000028 	.word	0x00000028
    515c:	00000030 	.word	0x00000030
    5160:	00000030 	.word	0x00000030
    5164:	00000030 	.word	0x00000030
    5168:	00000030 	.word	0x00000030
    516c:	00000030 	.word	0x00000030
    5170:	00000030 	.word	0x00000030
    5174:	00000030 	.word	0x00000030
    5178:	00000030 	.word	0x00000030
    517c:	00000038 	.word	0x00000038
    5180:	00000038 	.word	0x00000038
    5184:	00000038 	.word	0x00000038
    5188:	00000038 	.word	0x00000038
    518c:	00000038 	.word	0x00000038
    5190:	00000038 	.word	0x00000038
    5194:	00000038 	.word	0x00000038
    5198:	00000038 	.word	0x00000038
    519c:	00000040 	.word	0x00000040
    51a0:	00000040 	.word	0x00000040
    51a4:	00000040 	.word	0x00000040
    51a8:	00000040 	.word	0x00000040
    51ac:	00000040 	.word	0x00000040
    51b0:	00000040 	.word	0x00000040
    51b4:	00000040 	.word	0x00000040
    51b8:	00000040 	.word	0x00000040
    51bc:	00000048 	.word	0x00000048
    51c0:	00000048 	.word	0x00000048
    51c4:	00000048 	.word	0x00000048
    51c8:	00000048 	.word	0x00000048
    51cc:	00000048 	.word	0x00000048
    51d0:	00000048 	.word	0x00000048
    51d4:	00000048 	.word	0x00000048
    51d8:	00000048 	.word	0x00000048
    51dc:	0000004f 	.word	0x0000004f
    51e0:	0000004f 	.word	0x0000004f
    51e4:	0000004f 	.word	0x0000004f
    51e8:	0000004f 	.word	0x0000004f
    51ec:	0000004f 	.word	0x0000004f
    51f0:	0000004f 	.word	0x0000004f
    51f4:	0000004f 	.word	0x0000004f
    51f8:	0000004f 	.word	0x0000004f
    51fc:	61726170 	.word	0x61726170
    5200:	00203a6d 	.word	0x00203a6d
    5204:	00206925 	.word	0x00206925

00005208 <csiEscCodes>:
    5208:	44434241 48474645 6d4b4a49 58575150     ABCDEFGHIJKmPQWX
    5218:	0000005a 000a000a 00140014 00000014     Z...............
    5228:	000a017c 000a017c 00140186 00140000     |...|...........
    5238:	0122000a 00140186 01220190 0122000a     .."......."...".
    5248:	012c0014 0122017c 012c0186 012c0014     ..,.|."...,...,.
    5258:	0136017c 001e0000 00280032 00320000     |.6.....2.(...2.
    5268:	003c0032 001e0050 00280118 00280046     2.<.P.....(.F.(.
    5278:	00be0050 00be0050 00c80118 00280118     P...P.........(.
    5288:	00be0122 00460000 00500032 005a0000     ".....F.2.P...Z.
    5298:	00640032 006e0000 00780032 00820000     2.d...n.2.x.....
    52a8:	008c0032 00960000 00a00032 00aa0000     2.......2.......
    52b8:	00b40032 00be0000 00c80032 00c8012c     2.......2...,...
    52c8:	00d20172 00dc001e 00e60172 00f0001e     r.......r.......
    52d8:	00fa0172 0104001e 010e0172 0118005a     r.......r...Z...
    52e8:	0122012c 82be50b4 8cbe82aa 64963c8c     ,."..P.......<.d
    52f8:	64dc3cd2 a08c9682 aadca08c a0e696dc     .<.d............
    5308:	50f03c78 5a78466e aaaa3c96 a0dc3cc8     x<.PnFxZ.<...<..
    5318:	aae6a0d2 6e617254 69722073 73746867     ....Trans rights
    5328:	65726120 6d756820 72206e61 74686769      are human right
    5338:	00000073 355e3331 31202b20 20355e36     s...13^5 + 16^5 
    5348:	3731203d 0000355e 69746552 616c7563     = 17^5..Reticula
    5358:	676e6974 6c705320 73656e69 00000000     ting Splines....
    5368:	6c6f6976 65636e65 726f772e 0000736b     violence.works..
    5378:	2b206953 00425020 6c6c694b 6c694220     Si + PB.Kill Bil
    5388:	6e6f696c 65726961 61282073 5420646e     lionaires (and T
    5398:	6c6c6972 616e6f69 29657269 00000000     rillionaire)....
    53a8:	65746e49 74736572 206e6920 68636574     Interest in tech
    53b8:	6f6c6f6e 69207967 6f6e2073 20612074     nology is not a 
    53c8:	73726570 6c616e6f 00797469 50203031     personality.10 P
    53d8:	544e4952 52484320 30322824 2b352e35     RINT CHR$(205.5+
    53e8:	28444e52 3b292931 47203a20 204f544f     RND(1)); : GOTO 
    53f8:	00003031 67206f4e 2e73646f 206f4e20     10..No gods. No 
    5408:	7473616d 2e737265 206f4e20 65747865     masters. No exte
    5418:	6c616e72 62696c20 69726172 002e7365     rnal libraries..
    5428:	6c6c694b 7a614e20 00007369 6e616954     Kill Nazis..Tian
    5438:	656d6e61 7153206e 65726175 38393120     anmen Square 198
    5448:	00000039 72656d41 20616369 20736177     9...America was 
    5458:	6e756f66 20646564 73206e6f 6576616c     founded on slave
    5468:	00007972 72656854 73692065 6c6e6f20     ry..There is onl
    5478:	61632079 61746970 6e61206c 616c2064     y capital and la
    5488:	00726f62 6f636e45 67617275 59532065     bor.Encourage SY
    5498:	54454d4d 20434952 73616c63 61772073     MMETRIC class wa
    54a8:	72616672 00000065 52554324 544e4552     rfare...$CURRENT
    54b8:	4d454d5f 00000045 694e2041 54206563     _MEME...A Nice T
    54c8:	00005954 78696e55 6f706520 6d206863     TY..Unix epoch m
    54d8:	73756e69 46783020 61642046 00007379     inus 0xFF days..
    54e8:	3d202069 35783020 35373366 20666439     i  = 0x5f3759df 
    54f8:	2028202d 3e3e2069 29203120 0000003b     - ( i >> 1 );...
    5508:	61657053 7274206b 20687475 70206f74     Speak truth to p
    5518:	7265776f 2749203b 7573206d 74206572     ower; I'm sure t
    5528:	27796568 6c206c6c 65747369 6874206e     hey'll listen th
    5538:	74207369 2e656d69 00000000 63666544     is time.....Defc
    5548:	73276e6f 6e616320 656c6563 32282064     on's canceled (2
    5558:	29303230 30322820 00293132 73746152     020) (2021).Rats
    5568:	7473656e 6f4e203a 6e696874 6f542067     nest: Nothing To
    5578:	216f4420 00000000 68207449 36207361      Do!....It has 6
    5588:	656b2039 002e7379 61636542 20657375     9 keys..Because 
    5598:	342d5456 77203032 61207361 6165726c     VT-420 was alrea
    55a8:	74207964 6e656b61 00000000 706d6f43     dy taken....Comp
    55b8:	73736572 206e6f69 6f676c61 68746972     ression algorith
    55c8:	6162206d 20646573 42206e6f 28205042     m based on BBP (
    55d8:	37393931 00000029 63616554 65682068     1997)...Teach he
    55e8:	68746c61 736e6920 6e617275 70206563     alth insurance p
    55f8:	69766f72 73726564 206f7420 65646f63     roviders to code
    5608:	0000002e 6e617247 65432064 6172746e     ....Grand Centra
    5618:	6148206c 54206b63 50206568 656e616c     l Hack The Plane
    5628:	00000074 69466957 20736920 20746f6e     t...WiFi is not 
    5638:	65726977 7373656c 68744520 656e7265     wireless Etherne
    5648:	00002174 6d6d7544 68742079 20636369     t!..Dummy thicc 
    5658:	65696c63 0000746e 694e2041 54206563     client..A Nice T
    5668:	202e5954 4f206e41 6f43204b 7475706d     TY. An OK Comput
    5678:	002e7265 65545355 6964656c 6e6f646c     er..USTeledildon
    5688:	00736369 696c6f53 69726164 69207974     ics.Solidarity i
    5698:	6f6e2073 20612074 2077656e 6d617266     s not a new fram
    56a8:	726f7765 0000006b 61657242 616f6264     ework...Breadboa
    56b8:	6e696472 73492067 746f4e20 43204120     rding Is Not A C
    56c8:	656d6972 00000000 2066664f 6f207962     rime....Off by o
    56d8:	6520656e 726f7272 72612073 6f632065     ne errors are co
    56e8:	6e6f6d6d 00000000 00001226 00001472     mmon....&...r...
    56f8:	00001472 00001472 00001472 00001472     r...r...r...r...
    5708:	00001472 00001472 00001472 00001472     r...r...r...r...
    5718:	00001472 00001472 00001472 00001472     r...r...r...r...
    5728:	00001472 00001472 0000120e 00001472     r...r.......r...
    5738:	00001472 00001472 00001472 00001472     r...r...r...r...
    5748:	00001472 00001472 00001472 00001472     r...r...r...r...
    5758:	00001472 00001472 00001472 00001472     r...r...r...r...
    5768:	00001472 00001472 0000121e 00001472     r...r.......r...
    5778:	00001472 00001472 00001472 00001472     r...r...r...r...
    5788:	00001472 00001472 00001472 00001472     r...r...r...r...
    5798:	00001472 00001472 00001472 00001472     r...r...r...r...
    57a8:	00001472 00001472 00001216 0000122e     r...r...........
    57b8:	000011f6 00001206 000011fe 00000002     ................
    57c8:	00000003 00000028 00000029 00000004     ....(...).......
    57d8:	00000005 00000006 00000007 00000020     ............ ...
    57e8:	00000021 00000022 00000023 00000024     !..."...#...$...
    57f8:	00000025 00000026 00000027 00000008     %...&...'.......
    5808:	00000009 0000000a 0000000b 42000800     ...............B
    5818:	42000c00 42001000 42001400 42001800     ...B...B...B...B
    5828:	42001c00 00001faa 00001fa6 00001fa6     ...B............
    5838:	0000200c 0000200c 00001fbe 00001fb0     . ... ..........
    5848:	00001fc4 00001ffa 000021cc 000021ac     .........!...!..
    5858:	000021ac 00002238 000021be 000021da     .!..8"...!...!..
    5868:	000021b0 000021e8 00002228              .!...!..("..

00005874 <CodePage437>:
	...
    5bac:	01000000 06186080 18608001 60800106     .....`....`....`
    5bbc:	80010000 00000060 00000000 66986106     ....`........a.f
    5bcc:	98618619 00000000 00000000 00000000     ..a.............
    5bdc:	00000000 98610600 fb8f1966 8f1966fe     ......a.f....f..
    5bec:	1966fefb 00986186 00000000 80010000     ..f..a..........
    5bfc:	891f7e60 1f7e6082 7e649081 6080811f     `~...`~...d~...`
    5c0c:	00000000 04000000 29a60823 1820c106     ........#..).. .
    5c1c:	98200304 324c1165 00000008 00000000     .. .e.L2........
    5c2c:	84e08107 10420821 5a081e78 87208216     ....!.B.x..Z.. .
    5c3c:	0000f6d9 00000000 30c00000 00030618     ...........0....
    5c4c:	000000c0 00000000 00000000 00000000     ................
    5c5c:	40000000 03020810 0c30c000 08c00003     ...@......0.....
    5c6c:	10400002 00000000 01000000 02084000     ..@..........@..
    5c7c:	06186000 18608001 00010208 00000040     .`....`.....@...
    5c8c:	00000000 42000000 90408210 40c23fff     .......B..@..?.@
    5c9c:	80104290 00000000 00000000 00000000     .B..............
    5cac:	80000208 e0bfff20 02082080 00000000     .... .... ......
	...
    5ccc:	18000000 c0000306 00001040 00000000     ........@.......
    5cdc:	00000000 ff000000 0000e0bf 00000000     ................
	...
    5d00:	030e3800 0000e080 00000000 08200000     .8............ .
    5d10:	80000104 02041020 10408000 00000208     .... .....@.....
    5d20:	00000000 e0030000 cc1863f8 b0c1061b     .........c......
    5d30:	63061b6c f8e0c318 00000000 00000000     l..c............
    5d40:	1b3c70c0 0c30c004 30c00003 e107030c     .p<...0....0....
    5d50:	000000f8 00000000 c1f8e107 061860b0     .............`..
    5d60:	0187030e 0f30c0c0 0000fefb 00000000     ......0.........
    5d70:	fefb0f00 60c00003 80030e30 b0810618     .......`0.......
    5d80:	00f8e167 00000000 40000000 03070c30     g..........@0...
    5d90:	31649040 04fefb0f 10400001 00000000     @.d1......@.....
    5da0:	0f000000 30c0fefb c1f8e30f 061860b0     .......0.....`..
    5db0:	e167a081 000000f8 00000000 60f8e003     ..g............`
    5dc0:	00030c18 1b8c3ffe 67b0c106 0000f8e1     .....?.....g....
    5dd0:	00000000 fefb0f00 20608001 00010408     ..........` ....
    5de0:	0c302080 00c00003 00000000 e0030000     . 0.............
    5df0:	6cb0c1f8 0f3e061b c1061b8c f8e063b0     ...l..>......c..
    5e00:	00000000 07000000 b0c1f8e1 7d0e3b6c     ............l;.}
    5e10:	0618609f e1c70003 000000f0 00000000     .`..............
    5e20:	38000000 e080030e 00000000 030e3800     ...8.........8..
    5e30:	0000e080 00000000 00000000 80030e38     ............8...
    5e40:	000000e0 0e380000 40c00003 00000010     ......8....@....
    5e50:	30000000 03030c0c 30c0c000 0cc00003     ...0.......0....
    5e60:	0c300003 00000000 00000000 00000000     ..0.............
    5e70:	00fefb0f fefb0f00 00000000 00000000     ................
    5e80:	00000000 3000030c 30c0000c c0c00003     .......0...0....
    5e90:	0c0c3030 00000003 00000000 f8e10700     00..............
    5ea0:	6060b0c1 01061818 00006080 00608001     ..``.....`....`.
    5eb0:	00000000 e1070000 6cb0c1f8 b4d33edb     ...........l.>..
    5ec0:	c036fbec f8e10730 00000000 00000000     ..6.0...........
    5ed0:	0d367080 c18c3186 fefb6fb0 1b6cb0c1     .p6..1...o....l.
    5ee0:	00000006 00000000 61f8e30f 86196698     ...........a.f..
    5ef0:	19861f7e 6f986186 0000f8e3 00000000     ~....a.o........
    5f00:	f8e00300 036c9861 0c30c000 98610003     ....a.l...0...a.
    5f10:	00f8e063 00000000 c30f0000 861966f0     c............f..
    5f20:	98618631 668c1966 f0c38f19 00000000     1.a.f..f........
    5f30:	0f000000 30c0fefb fc00030c 00030c3f     .......0....?...
    5f40:	fb0f30c0 000000fe 00000000 c0fefb0f     .0..............
    5f50:	00030c30 030c3ffc 0c30c000 00000003     0....?....0.....
    5f60:	00000000 f8e00300 036c9861 0c30c000     ........a.l...0.
    5f70:	98611e7b 00f8e063 00000000 1b0c0000     {.a.c...........
    5f80:	6cb0c106 bfff061b c1061bec 061b6cb0     ...l.........l..
    5f90:	00000000 07000000 0618f8e1 18608001     ..............`.
    5fa0:	60800106 e1070618 000000f8 00000000     ...`............
    5fb0:	067ef801 18608001 60800106 8731c618     ..~...`....`..1.
    5fc0:	0000f0c1 00000000 061b0c00 838d31c6     .............1..
    5fd0:	0d38e060 31c66083 00061b8c 00000000     `.8..`.1........
    5fe0:	030c0000 0c30c000 30c00003 c000030c     ......0....0....
    5ff0:	fefb0f30 00000000 0c000000 bde38e1b     0...............
    6000:	c976dbed 061b6cb2 1b6cb0c1 00000006     ..v..l....l.....
    6010:	00000000 e1861b0c 661b6dbc 5b6cb3c9     .........m.f..l[
    6020:	ecb0c31e 0000061b 00000000 f8e00300     ................
    6030:	1b6cb0e3 6cb0c106 b8c1061b 00f8e0e3     ..l....l........
    6040:	00000000 e30f0000 6cb0c1f8 3ffe061b     ...........l...?
    6050:	c000038c 00030c30 00000000 07000000     ....0...........
    6060:	b0c1f8e1 c1061b6c 36db6cb0 d98731c6     ....l....l.6.1..
    6070:	000000f6 00000000 c1f8e30f 061b6cb0     .............l..
    6080:	638c3ffe cc30c318 0000061b 00000000     .?.c..0.........
    6090:	f8e10700 036cb0c1 801f7e00 b0c10618     ......l..~......
    60a0:	00f8e167 00000000 fb0f0000 000208fe     g...............
    60b0:	02082080 08208000 20800002 00000000     . .... .... ....
    60c0:	0c000000 b0c1061b c1061b6c 061b6cb0     ........l....l..
    60d0:	e063b0c1 000000f8 00000000 c1061b0c     ..c.............
    60e0:	8c3166b0 60c31863 810d36d8 000020c0     .f1.c..`.6... ..
    60f0:	00000000 061b0c00 1b6cb0c1 6db2c906     ..........l....m
    6100:	b5d576db 008c796f 00000000 1b0c0000     .v..oy..........
    6110:	c3186306 060cf860 63d8e003 061bcc18     .c..`......c....
    6120:	00000000 0c000000 1863061b 1cd860c3     ..........c..`..
    6130:	20c00107 80000208 00000020 00000000     ... .... .......
    6140:	03fefb0f 1060c000 0103060c 0f30c0c0     ......`.......0.
    6150:	0000fefb 00000000 f8e00300 00030c30     ............0...
    6160:	030c30c0 0c30c000 00f8e003 00000000     .0....0.........
    6170:	01060000 010c3080 030c6080 03186000     .....0...`...`..
    6180:	0618c000 00000000 07000000 030cf0c1     ................
    6190:	0c30c000 30c00003 c107030c 000000f0     ..0....0........
    61a0:	00000000 36708000 8c31860d 0060b0c1     ......p6..1...`.
	...
    61cc:	00fefb0f 00000000 80030000 00030ce0     ................
    61dc:	00001860 00000000 00000000 00000000     `...............
	...
    61f4:	01fcf003 fef86380 f823b0c0 000000fe     .....c....#.....
    6204:	00000000 c000030c fcf30d30 0b6cb8e1     ........0.....l.
    6214:	6fb8e102 00007cf3 00000000 00000000     ...o.|..........
    6224:	e1070000 6cb0c1f8 30c00003 00fef907     .......l...0....
    6234:	00000000 18000000 67800106 b0c3f6d9     ...........g....
    6244:	c3061bec f6d9e7b0 00000000 00000000     ................
    6254:	00000000 c1f8e107 fefb6fb0 f10730c0     .........o...0..
    6264:	000000fc 00000000 3138e000 c000638c     ..........81.c..
    6274:	00033ffc 030c30c0 0000c000 00000000     .?...0..........
    6284:	00000000 d9070000 8731c6f6 30c0f0c1     ..........1....0
    6294:	c3f8e107 f8e1e7b0 030c0000 0d30c000     ..............0.
    62a4:	b8e178e3 c1061b6c 061b6cb0 00000000     .x..l....l......
    62b4:	01000000 00006080 18e08003 60800106     .....`.........`
    62c4:	e1070618 000000f8 00000000 00186000     .............`..
    62d4:	18600000 60800106 8c010618 31c61863     ..`....`....c..1
    62e4:	00f0c187 00030c00 638c30c0 0f36cc30     .........0.c0.6.
    62f4:	33ccc083 000c330c 00000000 c0030000     ...3.3..........
    6304:	00030cf0 030c30c0 0c30c000 f8e00303     .....0....0.....
	...
    6320:	e70c330c 669b6dbf 1b6cb0c1 00000006     .3...m.f..l.....
	...
    6338:	f8e20b00 1b6cb8e1 6cb0c106 0000061b     ......l....l....
	...
    6350:	e1070000 cc30c3f8 30c30c33 00f8e1c7     ......0.3..0....
	...
    6368:	0b000000 b0c1f8e2 be061b6c 0002882f     ........l.../...
    6378:	02082080 00000000 00000000 c1fae803     . ..............
    6388:	061b6cb0 08a08f3e 20800002 00000208     .l..>...... ....
    6398:	00000000 7ce20800 036cbcf1 0c30c000     .......|..l...0.
    63a8:	00000003 00000000 00000000 e1070000     ................
    63b8:	0730c0f8 8001f8e1 00f8e36f 00000000     ..0.....o.......
    63c8:	00030000 0f0c30c0 0c30f8e3 33c00003     .....0....0....3
    63d8:	30c0c00c 00000000 00000000 00000000     ...0............
    63e8:	c30c330c 0c33cc30 d9c730c3 000000f6     .3..0.3..0......
	...
    6400:	02020000 30e6b8c1 01073ed8 000020c0     .......0.>... ..
	...
    6418:	1b0c0000 6cb0c106 b5d5769b 008c3166     .......l.v..f1..
	...
    6430:	08000000 1b441823 6ce08003 08620c11     ....#.D....l..b.
	...
    644c:	c618630c 18638c31 60801f7e 873bc618     .c..1.c.~..`..;.
    645c:	0000f0c1 00000000 fefb0f00 c0c00003     ................
    646c:	0f0c3030 0000fefb 00000000 1e780000     00............x.
    647c:	40000208 000e3810 02081040 001e7800     ...@.8..@....x..
    648c:	00000000 80010000 01061860 06186080     ........`....`..
    649c:	18608001 60800106 00000000 0f000000     ..`....`........
    64ac:	0208c003 0cc00003 c0000303 030f0208     ................
    64bc:	000000c0 00000000 d9c61907 1c736cb3     .............ls.
	...
    64f4:	e0030000 6c9861f8 30c00003 6100030c     .....a.l...0...a
    6504:	f8e06398 00000608 00000000 00669801     .c............f.
    6514:	c30c330c 0c33cc30 d9c730c3 000000f6     .3..0.3..0......
    6524:	00000000 0c180000 f8e10700 fb6fb0c1     ..............o.
    6534:	0730c0fe 0000fcf1 00000000 10000000     ..0.............
    6544:	f003000a 638001fc b0c0fef8 00fef823     .......c....#...
	...
    655c:	030033cc 8001fcf0 c0fef863 fef823b0     .3......c....#..
	...
    6574:	000c6000 01fcf003 fef86380 f823b0c0     .`.......c....#.
    6584:	000000fe 03000000 0c482001 fcf00300     ......... H.....
    6594:	f8638001 23b0c0fe 0000fef8 00000000     ..c....#........
    65a4:	00000000 e1070000 6cb0c1f8 30c00003     ...........l...0
    65b4:	04fef907 00000003 00000000 07001420     ............ ...
    65c4:	b0c1f8e1 c0fefb6f fcf10730 00000000     ....o...0.......
    65d4:	00000000 00669801 c1f8e107 fefb6fb0     ......f......o..
    65e4:	f10730c0 000000fc 00000000 18c00000     .0..............
    65f4:	f8e10700 fb6fb0c1 0730c0fe 0000fcf1     ......o...0.....
    6604:	00000000 98610600 80030000 010618e0     ......a.........
    6614:	06186080 00f8e107 00000000 00000000     .`..............
    6624:	03002840 0618e080 18608001 f8e10706     @(........`.....
	...
    663c:	0018c000 18e08003 60800106 e1070618     ...........`....
    664c:	000000f8 18630000 367080c0 8c31860d     ......c...p6..1.
    665c:	fb6fb0c1 6cb0c1fe 0000061b 1c000000     ..o....l........
    666c:	70c08108 31860d36 6fb0c18c b0c1fefb     ...p6..1...o....
    667c:	00061b6c 00000000 fb0f0606 0c30c0fe     l.............0.
    668c:	3ffc0003 c000030c fefb0f30 00000000     ...?....0.......
	...
    66a4:	1dfe7907 fedb2786 f90733cc 000000ee     .y...'...3......
    66b4:	00000000 367ef800 9861860d e3efb1c7     ......~6..a.....
    66c4:	8c31c6f8 00001e7b 00000000 20000000     ..1.{.......... 
    66d4:	e1070014 cc30c3f8 30c30c33 00f8e1c7     ......0.3..0....
    66e4:	00000000 01000000 07006698 30c3f8e1     .........f.....0
    66f4:	c30c33cc f8e1c730 00000000 00000000     .3..0...........
    6704:	0018c000 c3f8e107 0c33cc30 e1c730c3     ........0.3..0..
    6714:	000000f8 00000000 14200000 0c330c00     .......... ...3.
    6724:	33cc30c3 c730c30c 0000f6d9 00000000     .0.3..0.........
    6734:	60000000 330c000c cc30c30c 30c30c33     ...`...3..0.3..0
    6744:	00f6d9c7 00000000 01000000 0c006698     .............f..
    6754:	31c61863 7e18638c 1860801f c1873bc6     c..1.c.~..`..;..
    6764:	800d36f0 383ef800 c1061bec 061b6cb0     .6....>8.....l..
    6774:	e0e3b8c1 000000f8 0c330000 c10603c0     ..........3.....
    6784:	061b6cb0 1b6cb0c1 63b0c106 0000f8e0     .l....l....c....
    6794:	00000000 20800002 1b8c1f7e 0c32c826     ....... ~...&.2.
    67a4:	1f7e069b 08208080 00000000 c0010000     ..~... .........
    67b4:	461873f8 3e608001 6080810f fefb0f18     .s.F..`>...`....
    67c4:	00000000 0c000000 08630419 1c506083     ..........c..`P.
    67d4:	20e00302 80800f08 00000020 00000000     ... .... .......
    67e4:	c1f8e30f f81b6cb0 830d30fe 0d36d878     .....l...0..x.6.
    67f4:	000038e3 00000000 3ce00000 98638e3f     .8.........<?.c.
    6804:	833ffee0 1c70c000 60800106 00000018     ..?...p....`....
    6814:	00000000 03000c18 8001fcf0 c0fef863     ............c...
    6824:	fef823b0 00000000 00000000 000060c0     .#...........`..
    6834:	18e08003 60800106 e1070618 000000f8     .......`........
    6844:	00000000 18300000 f8e10700 33cc30c3     ......0......0.3
    6854:	c730c30c 0000f8e1 00000000 30000000     ..0............0
    6864:	330c0018 cc30c30c 30c30c33 00f6d9c7     ...3..0.3..0....
	...
    687c:	0b001998 b8e1f8e2 c1061b6c 061b6cb0     ........l....l..
    688c:	00000000 8c0c4c00 b8e1061b c9461b6d     .....L......m.F.
    689c:	165b6cb2 1becb0c3 00000006 00000000     .l[.............
    68ac:	1e08c003 00e08308 000080ff 00000000     ................
	...
    68c4:	d8c00100 c0810d22 0080ff00 00000000     ...."...........
	...
    68e0:	00030c00 030c0000 3030c000 061b0c0c     ..........00....
    68f0:	00c00f3f 00000000 00000000 ff000000     ?...............
    6900:	0003ecbf 00000000 00000000 00000000     ................
	...
    6918:	18e0bfff 00000006 00000000 00000000     ................
    6928:	30c00003 c000030c e0bfff00 0c1f3800     ...0.........8..
    6938:	183060c0 0000c00f c0000300 00030c30     .`0.........0...
    6948:	bfff00c0 668001e0 fc618619 60800106     .......f..a....`
    6958:	00000000 06180000 18000000 60800106     ...............`
    6968:	80010618 00061860 00000000 00000000     ....`...........
    6978:	90200100 80042448 00001290 00000000     .. .H$..........
	...
    6990:	40020000 20010948 00244890 00000000     ...@H.. .H$.....
    69a0:	00000000 48024092 09004900 80240024     .....@.H.I..$.$.
    69b0:	92009004 00480240 24090049 42529200     ....@.H.I..$..RB
    69c0:	0949494a 24242529 929094a4 4a425292     JII.)%$$.....RBJ
    69d0:	29094949 ad6d2425 b6b6b5bd dbdad6f6     II.)%$m.........
    69e0:	6f6b5bdb bdad6d6d f6b6b6b5 08dbdad6     .[komm..........
    69f0:	20800002 80000208 00020820 02082080     ... .... .... ..
    6a00:	08208000 20800002 80000208 00020820     .. .... .... ...
    6a10:	3e082080 08208000 20800002 80000208     . .>.. .... ....
    6a20:	00020820 02082080 f8208000 20800f02      .... .... .... 
    6a30:	80000208 00020820 05142080 14504001     .... .... ...@P.
    6a40:	50400105 40013d14 01051450 05145040     ..@P.=.@P...@P..
    6a50:	00504001 00000000 00000000 013f0000     .@P...........?.
    6a60:	05145040 14504001 50400105 00000000     @P...@P...@P....
    6a70:	00000000 02f80000 0820800f 20800002     .......... .... 
    6a80:	80000208 01051420 05145040 f4504001     .... ...@P...@P.
    6a90:	50400f01 40010514 01051450 05145040     ..@P...@P...@P..
    6aa0:	14504001 50400105 40010514 01051450     .@P...@P...@P...
    6ab0:	05145040 00504001 00000000 00000000     @P...@P.........
    6ac0:	0f01fc00 05145040 14504001 50400105     ....@P...@P...@P
    6ad0:	40010514 01051450 01f45040 0000c00f     ...@P...@P......
	...
    6ae8:	01051400 05145040 14504001 0000003f     ....@P...@P.?...
	...
    6b00:	02080000 08208000 20800002 800f02f8     ...... .... ....
	...
    6b24:	003e0000 02082080 08208000 20800002     ..>.. .... .... 
    6b34:	80000208 00020820 03082080 000000f0     .... .... ......
	...
    6b4c:	00020800 02082080 08208000 0000f03f     ..... .... .?...
	...
    6b70:	80f03f00 00020820 02082080 08208000     .?.. .... .... .
    6b80:	20800002 80000208 f0030820 02082080     ... .... .... ..
    6b90:	08208000 20800002 00000000 00000000     .. .... ........
    6ba0:	3f000000 000000f0 00000000 00000000     ...?............
    6bb0:	00020800 02082080 08208000 2080f03f     ..... .... .?.. 
    6bc0:	80000208 00020820 02082080 08208000     .... .... .... .
    6bd0:	20800002 fc00c20f 00020820 02082080     ... .... .... ..
    6be0:	14208000 50400105 40010514 f1051450     .. ...@P...@P...
    6bf0:	05145040 14504001 50400105 40010514     @P...@P...@P...@
    6c00:	01051450 c4175040 0000fc01 00000000     P...@P..........
	...
    6c1c:	1f000000 507c01c4 40010514 01051450     ......|P...@P...
    6c2c:	05145040 14504001 50400105 fc0fc0f7     @P...@P...@P....
	...
    6c50:	0fc0ff00 0514507c 14504001 50400105     ....|P...@P...@P
    6c60:	40010514 01051450 c4175040 14507c01     ...@P...@P...|P.
    6c70:	50400105 40010514 00000050 00000000     ..@P...@P.......
    6c80:	ff000000 00fc0fc0 00000000 00000000     ................
    6c90:	05140000 14504001 50400105 7c0fc0f7     .....@P...@P...|
    6ca0:	01051450 05145040 08504001 20800002     P...@P...@P.... 
    6cb0:	80000208 0fc0ff20 000000fc 00000000     .... ...........
    6cc0:	00000000 40010514 01051450 3f145040     .......@P...@P.?
    6cd0:	000000f0 00000000 00000000 00000000     ................
    6ce0:	00000000 ff000000 20fc0fc0 80000208     ........... ....
    6cf0:	00020820 00002080 00000000 00000000      .... ..........
    6d00:	40f13f00 01051450 05145040 14504001     .?.@P...@P...@P.
    6d10:	50400105 40010514 f0071450 00000000     ..@P...@P.......
	...
    6d28:	80000208 00020820 c20f2080 0000fc00     .... .... ......
	...
    6d48:	0f000000 20fc00c2 80000208 00020820     ....... .... ...
    6d58:	00002080 00000000 00000000 40f10700     . .............@
    6d68:	01051450 05145040 14504001 50400105     P...@P...@P...@P
    6d78:	40010514 f13f1450 05145040 14504001     ...@P.?.@P...@P.
    6d88:	50400105 80000208 00020820 c2ff2080     ..@P.... .... ..
    6d98:	0820fc0f 20800002 80000208 00020820     .. .... .... ...
    6da8:	02082080 08208000 0000003e 00000000     . .... .>.......
	...
    6dc8:	80f00300 00020820 02082080 ff208000     .... .... .... .
    6dd8:	ffffffff ffffffff ffffffff ffffffff     ................
    6de8:	ffffffff ffffffff 00000000 00000000     ................
    6df8:	3f000000 ffffffff ffffffff ffffffff     ...?............
    6e08:	0f3ef8ff 3ef8e083 f8e0830f e0830f3e     ..>....>....>...
    6e18:	830f3ef8 0f3ef8e0 c30fe083 0f3ffcf0     .>....>.......?.
    6e28:	3ffcf0c3 fcf0c30f f0c30f3f c30f3ffc     ...?....?....?..
    6e38:	ff3ffcf0 ffffffff ffffffff f0ffffff     ..?.............
	...
    6e5c:	8f380000 c208234c e2d08330 00000000     ..8.L#..0.......
    6e6c:	00000000 193c0000 7c982186 8c61061f     ......<..!.|..a.
    6e7c:	63c61861 000000f8 00000000 ff000000     a..c............
    6e8c:	8c31c61f 01061863 06186080 0000c003     ..1.c....`......
	...
    6ea8:	c69fff00 18638c31 008e33c6 00000000     ....1.c..3......
    6eb8:	fb0f0000 06b080fe 0618c000 c0800103     ................
    6ec8:	fefb2f20 00000000 00000000 00000000      /..............
    6ed8:	c3fef907 0c33cc30 e1c730c3 000000f8     ....0.3..0......
	...
    6ef0:	0c330c00 33cc30c3 cf30c30c 30c0f6db     ..3..0.3..0....0
    6f00:	0000000c 00000000 e30c0000 618e7bbc     .............{.a
    6f10:	06186080 00608001 00000000 00000000     .`....`.........
    6f20:	c33f0000 30c3f8c1 c30c33cc f0e0c730     ..?....0.3..0...
    6f30:	000000ff 03000000 1863f8e0 ff061bcc     ..........c.....
    6f40:	061becbf e0c31863 000000f8 00000000     ....c...........
    6f50:	e3fce103 061b6cb0 1b6cb0c1 c698e38e     .....l....l.....
    6f60:	00008e33 00000000 fef80300 e1070318     3...............
    6f70:	cc30c3f8 30c30c33 00f8e1c7 00000000     ..0.3..0........
    6f80:	00000000 02000000 a2885421 88228a28     ........!T..(.".
    6f90:	00204295 00000000 00000000 07000000     .B .............
    6fa0:	860e7367 628a28a3 7367b8b0 00000070     gs...(.b..gsp...
    6fb0:	00000000 60f8e003 00030c18 030c3ffc     .......`.....?..
    6fc0:	03186000 0000f8e0 00000000 00000000     .`..............
    6fd0:	1b8c0f3e 6cb0c106 b0c1061b c1061b6c     >......l....l...
    6fe0:	000060b0 00000000 0f000000 0000fefb     .`..............
    6ff0:	00fefb0f fefb0f00 00000000 00000000     ................
    7000:	02080000 ff208000 2080e0bf 03000208     ...... .... ....
    7010:	000000fe 00000000 3000030c 30c0000c     ...........0...0
    7020:	c0c00003 0c0c3030 3f000003 0000f0cf     ....00.....?....
    7030:	0c300000 0003030c 0330c0c0 030cc000     ..0.......0.....
    7040:	000c3000 00f0cf3f 88600307 00020820     .0..?.....`. ...
    7050:	02082080 08208000 20800002 80000208     . .... .... ....
    7060:	00020820 02082080 08208000 20800002      .... .... .... 
    7070:	80000208 09240820 00008001 18000000     .... .$.........
    7080:	00000006 00e0bfff 00061800 00000000     ................
	...
    7098:	8a0f1c00 0f1c073e 00073e8a 00000000     ....>....>......
	...
    70b0:	01092460 00000080 00000000 00000000     `$..............
	...
    70d4:	80030e38 00000000 00000000 00000000     8...............
	...
    70ec:	01000000 00006080 00000000 0f000000     .....`..........
    70fc:	40000104 0d020820 0c504001 00800002     ...@ ....@P.....
    710c:	00000000 f0c30b00 638c31c6 00000018     .........1.c....
	...
    7128:	83070000 03070cf0 3fe0c081 00000000     ...........?....
	...
    714c:	c30f3ffc 0f3ffcf0 0000f0c3 00000000     .?....?.........
	...
    7174:	0009001b 67753700 71312c6a 38000000     .....7ugj,1q...8
    7184:	006b6869 7a007732 6f303900 65332e6c     ihk.2w.z.90ol.3e
    7194:	00007861 2f3b702d 63737234 5b3d0020     ax..-p;/4rsc .=[
    71a4:	74350027 006e7664 5c0d5d27 62667936     '.5tdvn.'].\6yfb
    71b4:	0008006d 00000a7f 0009001b 47552600     m............&UG
    71c4:	51213c4a 2a000000 004b4849 5a005740     J<!Q...*IHK.@W.Z
    71d4:	4f292800 45233e4c 00005841 3f3a505f     .()OL>#EAX.._P:?
    71e4:	43535224 7b2b0020 54250022 004e5644     $RSC .+{".%TDVN.
    71f4:	7c0d7d7e 4246595e 0008004d 00000a7f     ~}.|^YFBM.......
    7204:	0009001b 47553700 51312c4a 38000000     .....7UGJ,1Q...8
    7214:	004b4849 5a005732 4f303900 45332e4c     IHK.2W.Z.90OL.3E
    7224:	00005841 2f3b502d 43535234 5b3d0020     AX..-P;/4RSC .=[
    7234:	54350027 004e5644 5c0d5d27 42465936     '.5TDVN.'].\6YFB
    7244:	0008004d 00000a7f 0009001b 07150000     M...............
    7254:	1100000a 00000000 000b0809 1a001700     ................
    7264:	0f000000 0500000a 00001801 1f001000     ................
    7274:	03131200 1b000000 14000000 000e1604     ................
    7284:	1c001d1e 02061900 0008000d 00000a00     ................

00007294 <kb_col>:
    7294:	00010000 00020000 00040000 00080000     ................
    72a4:	00100000 00200000 08000000              ...... .....

000072b0 <kb_col_index>:
    72b0:	00000010 00000011 00000012 00000013     ................
    72c0:	00000014 00000015 0000001b              ............

000072cc <kb_row>:
    72cc:	00000004 00000008 00000010 00000020     ............ ...
    72dc:	00000040 00000080 00000400 00000800     @...............
    72ec:	00001000 00002000                       ..... ..

000072f4 <kb_row_index>:
    72f4:	00000002 00000003 00000004 00000005     ................
    7304:	00000006 00000007 0000000a 0000000b     ................
    7314:	0000000c 0000000d                       ........

0000731c <beelzebub.12957>:
    731c:	2e002d00 44003200 88005300 f300b600     .-...2.D.S......
    732c:	64012201 d4019201 08020702 5f023402     .".d.........4._
    733c:	94027802 bb02a602 db02ca02 f902e802     .x..............
    734c:	7f031f03                                ....

00007350 <belial.12954>:
    7350:	f0f0f0f0 b0b0b0f0 b1b6b6b6 b7b7b1b1     ................
    7360:	b2b2b2b7 bfb8b8b8 b9b3b3b3 b5b5b9b9     ................
    7370:	babac2b5 bcbcbcba bebdbdbd f0f0f0be     ................
    7380:	b1b1f0f0 b8b7b7b6 bcb8b8b8 c9c9bcbc     ................
    7390:	35c9c9c9 0000363a                       ...5:6..

00007398 <lucifer.12956>:
    7398:	0852aa55 0d0d0d01 0d343434 34340d0d     U.R.....444...44
    73a8:	00000034 01242424 340f0f0f 08083434     4...$$$....444..
    73b8:	24240308 00780024 00007800 52aa5589     ..$$$.x..x...U.R
    73c8:	00cc0008 01707005 02030303 02d00000     .....pp.........
    73d8:	00505050 00000055                       PPP.U...

000073e0 <mulciber.12955>:
    73e0:	03020100 02010004 00020100 01000201     ................
    73f0:	02010002 00020100 01000201 01000002     ................
    7400:	02010000 00020100 01000201 03020100     ................
    7410:	00000004 01000100 01000302 02010002     ................
    7420:	00000403 00000000 65530d0a 6c616972     ..........Serial
    7430:	204b4f20 30303639 314e3820 00000d0a      OK 9600 8N1....

00007440 <_global_impure_ptr>:
    7440:	2000017c                                |.. 

00007444 <__sf_fake_stderr>:
	...

00007464 <__sf_fake_stdin>:
	...

00007484 <__sf_fake_stdout>:
	...
    74a4:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    74b4:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    74c4:	31300046 35343332 39383736 64636261     F.0123456789abcd
    74d4:	00006665                                ef..

000074d8 <_init>:
    74d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    74da:	46c0      	nop			; (mov r8, r8)
    74dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    74de:	bc08      	pop	{r3}
    74e0:	469e      	mov	lr, r3
    74e2:	4770      	bx	lr

000074e4 <__init_array_start>:
    74e4:	000000dd 	.word	0x000000dd

000074e8 <_fini>:
    74e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    74ea:	46c0      	nop			; (mov r8, r8)
    74ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
    74ee:	bc08      	pop	{r3}
    74f0:	469e      	mov	lr, r3
    74f2:	4770      	bx	lr

000074f4 <__fini_array_start>:
    74f4:	000000b5 	.word	0x000000b5
