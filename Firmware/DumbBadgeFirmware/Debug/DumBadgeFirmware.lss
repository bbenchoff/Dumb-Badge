
DumBadgeFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006b4c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001c0  20000000  00006b4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000908  200001c0  00006d0c  000201c0  2**2
                  ALLOC
  3 .stack        00002000  20000ac8  00007614  000201c0  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000201c0  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
  6 .debug_info   0003a32e  00000000  00000000  00020241  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005676  00000000  00000000  0005a56f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00006950  00000000  00000000  0005fbe5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000770  00000000  00000000  00066535  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000008c0  00000000  00000000  00066ca5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001f2cf  00000000  00000000  00067565  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00013d16  00000000  00000000  00086834  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000902e0  00000000  00000000  0009a54a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001968  00000000  00000000  0012a82c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
	// Keep the default device state after reset
	SystemCoreClock = __SYSTEM_CLOCK;
       0:	c8 2a 00 20 49 1e 00 00 45 1e 00 00 45 1e 00 00     .*. I...E...E...
	...
	config->stopbits         = USART_STOPBITS_1;
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
	config->baudrate         = 9600;
	config->receiver_enable  = true;
	config->transmitter_enable = true;
	config->clock_polarity_inverted = false;
      2c:	45 1e 00 00 00 00 00 00 00 00 00 00 45 1e 00 00     E...........E...
	config->use_external_clock = false;
	config->ext_clock_freq   = 0;
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
	config->generator_source = GCLK_GENERATOR_0;
      3c:	61 30 00 00 45 1e 00 00 45 1e 00 00 45 1e 00 00     a0..E...E...E...
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
	config->receive_pulse_length                    = 19;
      4c:	45 1e 00 00 45 1e 00 00 45 1e 00 00 45 1e 00 00     E...E...E...E...
	usart_get_config_defaults(&config_usart);

	config_usart.baudrate    = SERCOMBAUD;
	config_usart.mux_setting = SERCOMMUX;
	config_usart.pinmux_pad0 = SERCOMPAD0;
	config_usart.pinmux_pad1 = SERCOMPAD1;
      5c:	45 1e 00 00 45 1e 00 00 61 10 00 00 71 10 00 00     E...E...a...q...
	config_usart.pinmux_pad2 = SERCOMPAD2;
	config_usart.pinmux_pad3 = SERCOMPAD3;

	while (usart_init(&usart_instance,	 SERCOMMODULE, &config_usart) != STATUS_OK) { }
      6c:	81 10 00 00 91 10 00 00 a1 10 00 00 b1 10 00 00     ................
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
      7c:	45 1e 00 00 45 1e 00 00 45 1e 00 00 45 1e 00 00     E...E...E...E...
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	if (usart_init(module, hw, config) == STATUS_OK) {
      8c:	45 1e 00 00 45 1e 00 00 45 1e 00 00 45 1e 00 00     E...E...E...E...
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
      9c:	95 0b 00 00 45 1e 00 00 45 1e 00 00 45 1e 00 00     ....E...E...E...
	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
      ac:	45 1e 00 00 00 00 00 00                             E.......

000000b4 <__do_global_dtors_aux>:
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
      ba:	2b00      	cmp	r3, #0
	return (usart_hw->SYNCBUSY.reg);
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
	while (usart_is_syncing(module)) {
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop

	stdio_serial_init(&usart_instance, SERCOMMODULE, &config_usart);
	usart_enable(&usart_instance);
}
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200001c0 	.word	0x200001c0
      d4:	00000000 	.word	0x00000000
      d8:	00006b4c 	.word	0x00006b4c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200001c4 	.word	0x200001c4
     108:	00006b4c 	.word	0x00006b4c
     10c:	00006b4c 	.word	0x00006b4c
     110:	00000000 	.word	0x00000000

00000114 <ring_init>:
	cbuf->full = false;
	cbuf->tail = (cbuf->tail + 1) % cbuf->max;
}

cbuf_handle_t ring_init(uint8_t* buffer, uint16_t size)
{
     114:	b570      	push	{r4, r5, r6, lr}
     116:	0005      	movs	r5, r0
     118:	000c      	movs	r4, r1
	cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
     11a:	200c      	movs	r0, #12
     11c:	4b04      	ldr	r3, [pc, #16]	; (130 <ring_init+0x1c>)
     11e:	4798      	blx	r3

	cbuf->buffer = buffer;
     120:	6005      	str	r5, [r0, #0]
	cbuf->max = size;
     122:	8104      	strh	r4, [r0, #8]
	return cbuf;
}

void ring_reset(cbuf_handle_t cbuf)
{
	cbuf->head = 0;
     124:	2300      	movs	r3, #0
     126:	8083      	strh	r3, [r0, #4]
	cbuf->tail = 0;
     128:	80c3      	strh	r3, [r0, #6]
	cbuf->full = false;
     12a:	7283      	strb	r3, [r0, #10]
}
     12c:	bd70      	pop	{r4, r5, r6, pc}
     12e:	46c0      	nop			; (mov r8, r8)
     130:	000037a1 	.word	0x000037a1

00000134 <ring_reset>:
	cbuf->head = 0;
     134:	2300      	movs	r3, #0
     136:	8083      	strh	r3, [r0, #4]
	cbuf->tail = 0;
     138:	80c3      	strh	r3, [r0, #6]
	cbuf->full = false;
     13a:	7283      	strb	r3, [r0, #10]
}
     13c:	4770      	bx	lr
	...

00000140 <ring_put>:

void ring_put(cbuf_handle_t cbuf, uint8_t data)
{
     140:	b510      	push	{r4, lr}
     142:	0004      	movs	r4, r0
	cbuf->buffer[cbuf->head] = data;
     144:	8883      	ldrh	r3, [r0, #4]
     146:	005b      	lsls	r3, r3, #1
     148:	6802      	ldr	r2, [r0, #0]
     14a:	5299      	strh	r1, [r3, r2]
	if(cbuf->full)
     14c:	7a83      	ldrb	r3, [r0, #10]
     14e:	2b00      	cmp	r3, #0
     150:	d005      	beq.n	15e <ring_put+0x1e>
		cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     152:	88c0      	ldrh	r0, [r0, #6]
     154:	3001      	adds	r0, #1
     156:	8921      	ldrh	r1, [r4, #8]
     158:	4b07      	ldr	r3, [pc, #28]	; (178 <ring_put+0x38>)
     15a:	4798      	blx	r3
     15c:	80e1      	strh	r1, [r4, #6]
	cbuf->head = (cbuf->head + 1) % cbuf->max;
     15e:	88a0      	ldrh	r0, [r4, #4]
     160:	3001      	adds	r0, #1
     162:	8921      	ldrh	r1, [r4, #8]
     164:	4b04      	ldr	r3, [pc, #16]	; (178 <ring_put+0x38>)
     166:	4798      	blx	r3
     168:	b28b      	uxth	r3, r1
     16a:	80a3      	strh	r3, [r4, #4]
	cbuf->full = (cbuf->head == cbuf->tail);
     16c:	88e1      	ldrh	r1, [r4, #6]
     16e:	1ac9      	subs	r1, r1, r3
     170:	424a      	negs	r2, r1
     172:	414a      	adcs	r2, r1
     174:	72a2      	strb	r2, [r4, #10]

	advance_pointer(cbuf);
}
     176:	bd10      	pop	{r4, pc}
     178:	000036f9 	.word	0x000036f9

0000017c <ring_empty>:
	return r;
}

bool ring_empty(cbuf_handle_t cbuf)
{
	return (!cbuf->full && (cbuf->head == cbuf->tail));
     17c:	7a82      	ldrb	r2, [r0, #10]
     17e:	2300      	movs	r3, #0
     180:	2a00      	cmp	r2, #0
     182:	d105      	bne.n	190 <ring_empty+0x14>
     184:	8883      	ldrh	r3, [r0, #4]
     186:	88c0      	ldrh	r0, [r0, #6]
     188:	1a1b      	subs	r3, r3, r0
     18a:	4258      	negs	r0, r3
     18c:	4143      	adcs	r3, r0
     18e:	b2db      	uxtb	r3, r3
     190:	0018      	movs	r0, r3
}
     192:	4770      	bx	lr

00000194 <ring_get>:
{
     194:	b570      	push	{r4, r5, r6, lr}
     196:	0004      	movs	r4, r0
     198:	000d      	movs	r5, r1
	if(!ring_empty(cbuf))
     19a:	4b0b      	ldr	r3, [pc, #44]	; (1c8 <ring_get+0x34>)
     19c:	4798      	blx	r3
     19e:	2800      	cmp	r0, #0
     1a0:	d10e      	bne.n	1c0 <ring_get+0x2c>
		*data = cbuf->buffer[cbuf->tail];
     1a2:	88e3      	ldrh	r3, [r4, #6]
     1a4:	005b      	lsls	r3, r3, #1
     1a6:	6822      	ldr	r2, [r4, #0]
     1a8:	5a9b      	ldrh	r3, [r3, r2]
     1aa:	702b      	strb	r3, [r5, #0]
	cbuf->full = false;
     1ac:	2300      	movs	r3, #0
     1ae:	72a3      	strb	r3, [r4, #10]
	cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     1b0:	88e0      	ldrh	r0, [r4, #6]
     1b2:	3001      	adds	r0, #1
     1b4:	8921      	ldrh	r1, [r4, #8]
     1b6:	4b05      	ldr	r3, [pc, #20]	; (1cc <ring_get+0x38>)
     1b8:	4798      	blx	r3
     1ba:	80e1      	strh	r1, [r4, #6]
		r = 0;
     1bc:	2000      	movs	r0, #0
}
     1be:	bd70      	pop	{r4, r5, r6, pc}
	int r = -1;
     1c0:	2001      	movs	r0, #1
     1c2:	4240      	negs	r0, r0
	return r;
     1c4:	e7fb      	b.n	1be <ring_get+0x2a>
     1c6:	46c0      	nop			; (mov r8, r8)
     1c8:	0000017d 	.word	0x0000017d
     1cc:	000036f9 	.word	0x000036f9

000001d0 <parseChar>:
#include "uart.h"
#include "ouroboros.h"
#include "settings.h"

void parseChar(uint8_t character)
{
     1d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	char tempCharacter;
	
	
	if(character == 0x0D)  //Carriage Return  //this returns to xcharpos = 0
     1d2:	280d      	cmp	r0, #13
     1d4:	d007      	beq.n	1e6 <parseChar+0x16>
			xCharPos = 0;
			drawChar(consoleDisplay[xCharPos][yCharPos]);
			blinkCursor();
		}
	}
	else if(character == 0x0A)	//Line Feed
     1d6:	280a      	cmp	r0, #10
     1d8:	d02d      	beq.n	236 <parseChar+0x66>
			yCharPos++;
			drawChar(consoleDisplay[xCharPos][yCharPos]);
			blinkCursor();
		}
	}
	else if(character == 0x08)  //Backspace
     1da:	2808      	cmp	r0, #8
     1dc:	d059      	beq.n	292 <parseChar+0xc2>
		xCharPos--;
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
		drawChar(tempCharacter);
		blinkCursor();
	}
	else if(character != 0x00)
     1de:	2800      	cmp	r0, #0
     1e0:	d000      	beq.n	1e4 <parseChar+0x14>
     1e2:	e070      	b.n	2c6 <parseChar+0xf6>
		if(xCharPos > 79)		//END OF LINE
		{
			xCharPos--;
		}
	}
}
     1e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if(yCharPos == 23)
     1e6:	4b47      	ldr	r3, [pc, #284]	; (304 <parseChar+0x134>)
     1e8:	881a      	ldrh	r2, [r3, #0]
     1ea:	2a17      	cmp	r2, #23
     1ec:	d012      	beq.n	214 <parseChar+0x44>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     1ee:	4d46      	ldr	r5, [pc, #280]	; (308 <parseChar+0x138>)
     1f0:	4e46      	ldr	r6, [pc, #280]	; (30c <parseChar+0x13c>)
     1f2:	8831      	ldrh	r1, [r6, #0]
     1f4:	004b      	lsls	r3, r1, #1
     1f6:	185b      	adds	r3, r3, r1
     1f8:	00db      	lsls	r3, r3, #3
     1fa:	18eb      	adds	r3, r5, r3
     1fc:	5c98      	ldrb	r0, [r3, r2]
     1fe:	4c44      	ldr	r4, [pc, #272]	; (310 <parseChar+0x140>)
     200:	47a0      	blx	r4
			xCharPos = 0;
     202:	2300      	movs	r3, #0
     204:	8033      	strh	r3, [r6, #0]
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     206:	4b3f      	ldr	r3, [pc, #252]	; (304 <parseChar+0x134>)
     208:	881b      	ldrh	r3, [r3, #0]
     20a:	5ce8      	ldrb	r0, [r5, r3]
     20c:	47a0      	blx	r4
			blinkCursor();
     20e:	4b41      	ldr	r3, [pc, #260]	; (314 <parseChar+0x144>)
     210:	4798      	blx	r3
     212:	e7e7      	b.n	1e4 <parseChar+0x14>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     214:	4d3d      	ldr	r5, [pc, #244]	; (30c <parseChar+0x13c>)
     216:	882a      	ldrh	r2, [r5, #0]
     218:	0053      	lsls	r3, r2, #1
     21a:	189b      	adds	r3, r3, r2
     21c:	00db      	lsls	r3, r3, #3
     21e:	4a3a      	ldr	r2, [pc, #232]	; (308 <parseChar+0x138>)
     220:	18d3      	adds	r3, r2, r3
     222:	7dd8      	ldrb	r0, [r3, #23]
     224:	4c3a      	ldr	r4, [pc, #232]	; (310 <parseChar+0x140>)
     226:	47a0      	blx	r4
			xCharPos = 0;
     228:	2300      	movs	r3, #0
     22a:	802b      	strh	r3, [r5, #0]
			drawChar(0x00);
     22c:	2000      	movs	r0, #0
     22e:	47a0      	blx	r4
			blinkCursor();
     230:	4b38      	ldr	r3, [pc, #224]	; (314 <parseChar+0x144>)
     232:	4798      	blx	r3
     234:	e7d6      	b.n	1e4 <parseChar+0x14>
		if(yCharPos == 23)
     236:	4b33      	ldr	r3, [pc, #204]	; (304 <parseChar+0x134>)
     238:	881a      	ldrh	r2, [r3, #0]
     23a:	2a17      	cmp	r2, #23
     23c:	d018      	beq.n	270 <parseChar+0xa0>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     23e:	4c32      	ldr	r4, [pc, #200]	; (308 <parseChar+0x138>)
     240:	4d32      	ldr	r5, [pc, #200]	; (30c <parseChar+0x13c>)
     242:	8829      	ldrh	r1, [r5, #0]
     244:	004b      	lsls	r3, r1, #1
     246:	185b      	adds	r3, r3, r1
     248:	00db      	lsls	r3, r3, #3
     24a:	18e3      	adds	r3, r4, r3
     24c:	5c98      	ldrb	r0, [r3, r2]
     24e:	4e30      	ldr	r6, [pc, #192]	; (310 <parseChar+0x140>)
     250:	47b0      	blx	r6
			yCharPos++;
     252:	4a2c      	ldr	r2, [pc, #176]	; (304 <parseChar+0x134>)
     254:	8813      	ldrh	r3, [r2, #0]
     256:	3301      	adds	r3, #1
     258:	b29b      	uxth	r3, r3
     25a:	8013      	strh	r3, [r2, #0]
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     25c:	8829      	ldrh	r1, [r5, #0]
     25e:	004a      	lsls	r2, r1, #1
     260:	1852      	adds	r2, r2, r1
     262:	00d2      	lsls	r2, r2, #3
     264:	18a4      	adds	r4, r4, r2
     266:	5ce0      	ldrb	r0, [r4, r3]
     268:	47b0      	blx	r6
			blinkCursor();
     26a:	4b2a      	ldr	r3, [pc, #168]	; (314 <parseChar+0x144>)
     26c:	4798      	blx	r3
     26e:	e7b9      	b.n	1e4 <parseChar+0x14>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     270:	4b26      	ldr	r3, [pc, #152]	; (30c <parseChar+0x13c>)
     272:	881a      	ldrh	r2, [r3, #0]
     274:	0053      	lsls	r3, r2, #1
     276:	189b      	adds	r3, r3, r2
     278:	00db      	lsls	r3, r3, #3
     27a:	4a23      	ldr	r2, [pc, #140]	; (308 <parseChar+0x138>)
     27c:	18d3      	adds	r3, r2, r3
     27e:	7dd8      	ldrb	r0, [r3, #23]
     280:	4c23      	ldr	r4, [pc, #140]	; (310 <parseChar+0x140>)
     282:	47a0      	blx	r4
			newLine();
     284:	4b24      	ldr	r3, [pc, #144]	; (318 <parseChar+0x148>)
     286:	4798      	blx	r3
			drawChar(0x00);
     288:	2000      	movs	r0, #0
     28a:	47a0      	blx	r4
			blinkCursor();
     28c:	4b21      	ldr	r3, [pc, #132]	; (314 <parseChar+0x144>)
     28e:	4798      	blx	r3
     290:	e7a8      	b.n	1e4 <parseChar+0x14>
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     292:	4c1d      	ldr	r4, [pc, #116]	; (308 <parseChar+0x138>)
     294:	4d1d      	ldr	r5, [pc, #116]	; (30c <parseChar+0x13c>)
     296:	882a      	ldrh	r2, [r5, #0]
     298:	4e1a      	ldr	r6, [pc, #104]	; (304 <parseChar+0x134>)
     29a:	8831      	ldrh	r1, [r6, #0]
     29c:	0053      	lsls	r3, r2, #1
     29e:	189b      	adds	r3, r3, r2
     2a0:	00db      	lsls	r3, r3, #3
     2a2:	18e3      	adds	r3, r4, r3
     2a4:	5c58      	ldrb	r0, [r3, r1]
     2a6:	4f1a      	ldr	r7, [pc, #104]	; (310 <parseChar+0x140>)
     2a8:	47b8      	blx	r7
		xCharPos--;
     2aa:	882b      	ldrh	r3, [r5, #0]
     2ac:	3b01      	subs	r3, #1
     2ae:	b29b      	uxth	r3, r3
     2b0:	802b      	strh	r3, [r5, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     2b2:	8831      	ldrh	r1, [r6, #0]
     2b4:	005a      	lsls	r2, r3, #1
     2b6:	18d3      	adds	r3, r2, r3
     2b8:	00db      	lsls	r3, r3, #3
     2ba:	18e3      	adds	r3, r4, r3
		drawChar(tempCharacter);
     2bc:	5c58      	ldrb	r0, [r3, r1]
     2be:	47b8      	blx	r7
		blinkCursor();
     2c0:	4b14      	ldr	r3, [pc, #80]	; (314 <parseChar+0x144>)
     2c2:	4798      	blx	r3
     2c4:	e78e      	b.n	1e4 <parseChar+0x14>
		consoleDisplay[xCharPos][yCharPos] = character;
     2c6:	4d10      	ldr	r5, [pc, #64]	; (308 <parseChar+0x138>)
     2c8:	4c10      	ldr	r4, [pc, #64]	; (30c <parseChar+0x13c>)
     2ca:	8823      	ldrh	r3, [r4, #0]
     2cc:	4e0d      	ldr	r6, [pc, #52]	; (304 <parseChar+0x134>)
     2ce:	8831      	ldrh	r1, [r6, #0]
     2d0:	005a      	lsls	r2, r3, #1
     2d2:	18d2      	adds	r2, r2, r3
     2d4:	00d2      	lsls	r2, r2, #3
     2d6:	18aa      	adds	r2, r5, r2
     2d8:	5450      	strb	r0, [r2, r1]
		drawChar(character);
     2da:	4f0d      	ldr	r7, [pc, #52]	; (310 <parseChar+0x140>)
     2dc:	47b8      	blx	r7
		xCharPos++;
     2de:	8823      	ldrh	r3, [r4, #0]
     2e0:	3301      	adds	r3, #1
     2e2:	b29b      	uxth	r3, r3
     2e4:	8023      	strh	r3, [r4, #0]
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     2e6:	8831      	ldrh	r1, [r6, #0]
     2e8:	005a      	lsls	r2, r3, #1
     2ea:	18d3      	adds	r3, r2, r3
     2ec:	00db      	lsls	r3, r3, #3
     2ee:	18eb      	adds	r3, r5, r3
     2f0:	5c58      	ldrb	r0, [r3, r1]
     2f2:	47b8      	blx	r7
		if(xCharPos > 79)		//END OF LINE
     2f4:	8823      	ldrh	r3, [r4, #0]
     2f6:	2b4f      	cmp	r3, #79	; 0x4f
     2f8:	d800      	bhi.n	2fc <parseChar+0x12c>
     2fa:	e773      	b.n	1e4 <parseChar+0x14>
			xCharPos--;
     2fc:	3b01      	subs	r3, #1
     2fe:	4a03      	ldr	r2, [pc, #12]	; (30c <parseChar+0x13c>)
     300:	8013      	strh	r3, [r2, #0]
}
     302:	e76f      	b.n	1e4 <parseChar+0x14>
     304:	2000029e 	.word	0x2000029e
     308:	20000318 	.word	0x20000318
     30c:	2000029c 	.word	0x2000029c
     310:	00001ffd 	.word	0x00001ffd
     314:	00002295 	.word	0x00002295
     318:	000020e5 	.word	0x000020e5

0000031c <drawKare>:
//	graphic in the entire project. Please note this is the most
//	space efficient way to do this; a 40x31 bitmap is 930 bytes,
//	whereas	this is (104*2)+28+20, or 256 bytes.
/*********************************************************************/
void drawKare(int emotion)
{
     31c:	b5f0      	push	{r4, r5, r6, r7, lr}
     31e:	b0c1      	sub	sp, #260	; 0x104
     320:	0007      	movs	r7, r0
	uint16_t body[104] = {10,10,20,20,20,0,380,10,380,10,390,20,0,
     322:	22d0      	movs	r2, #208	; 0xd0
     324:	492d      	ldr	r1, [pc, #180]	; (3dc <drawKare+0xc0>)
     326:	a80c      	add	r0, sp, #48	; 0x30
     328:	4b2d      	ldr	r3, [pc, #180]	; (3e0 <drawKare+0xc4>)
     32a:	4798      	blx	r3
		80,190,280,200,280,40,290,190,0,70,50,80,0,90,50,100,0,110,
		50,120,0,130,50,140,0,150,50,160,0,170,50,180,0,190,50,200,
		300,200,370,210,30,220,370,230,30,240,370,250,30,260,370,
		270,90,280,300,290};
	
	uint8_t happyTerm[28] = {180,80,190,130,170,130,190,140,140,
     32c:	a805      	add	r0, sp, #20
     32e:	4b2d      	ldr	r3, [pc, #180]	; (3e4 <drawKare+0xc8>)
     330:	001a      	movs	r2, r3
     332:	3250      	adds	r2, #80	; 0x50
     334:	0001      	movs	r1, r0
     336:	ca31      	ldmia	r2!, {r0, r4, r5}
     338:	c131      	stmia	r1!, {r0, r4, r5}
     33a:	ca31      	ldmia	r2!, {r0, r4, r5}
     33c:	c131      	stmia	r1!, {r0, r4, r5}
     33e:	6812      	ldr	r2, [r2, #0]
     340:	600a      	str	r2, [r1, #0]
		60,150,100,210,60,220,100,130,150,140,160,140,160,220,170,
	220,150,230,160};
	
	uint8_t rPiBeret[20] = {120,60,240,80,110,70,120,90,150,
     342:	336c      	adds	r3, #108	; 0x6c
     344:	466a      	mov	r2, sp
     346:	cb13      	ldmia	r3!, {r0, r1, r4}
     348:	c213      	stmia	r2!, {r0, r1, r4}
     34a:	cb03      	ldmia	r3!, {r0, r1}
     34c:	c203      	stmia	r2!, {r0, r1}
     34e:	ac0c      	add	r4, sp, #48	; 0x30
     350:	ae40      	add	r6, sp, #256	; 0x100

	
	
	for(int i = 0; i < 104; i = i+4)
	{
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
     352:	4d25      	ldr	r5, [pc, #148]	; (3e8 <drawKare+0xcc>)
		((body[i+1]/iSv)+(offsetGraphicY)),
		((body[i+2]/iSv)+(offsetGraphicX)),
		((body[i+3]/iSv)+(offsetGraphicY)));
     354:	88e3      	ldrh	r3, [r4, #6]
     356:	105b      	asrs	r3, r3, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
     358:	3396      	adds	r3, #150	; 0x96
		((body[i+2]/iSv)+(offsetGraphicX)),
     35a:	88a2      	ldrh	r2, [r4, #4]
     35c:	1052      	asrs	r2, r2, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
     35e:	322d      	adds	r2, #45	; 0x2d
     360:	32ff      	adds	r2, #255	; 0xff
		((body[i+1]/iSv)+(offsetGraphicY)),
     362:	8861      	ldrh	r1, [r4, #2]
     364:	1049      	asrs	r1, r1, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
     366:	3196      	adds	r1, #150	; 0x96
     368:	8820      	ldrh	r0, [r4, #0]
     36a:	1040      	asrs	r0, r0, #1
     36c:	302d      	adds	r0, #45	; 0x2d
     36e:	30ff      	adds	r0, #255	; 0xff
     370:	47a8      	blx	r5
     372:	3408      	adds	r4, #8
	for(int i = 0; i < 104; i = i+4)
     374:	42b4      	cmp	r4, r6
     376:	d1ed      	bne.n	354 <drawKare+0x38>
	}
	switch(emotion)
     378:	2f00      	cmp	r7, #0
     37a:	d003      	beq.n	384 <drawKare+0x68>
     37c:	2f01      	cmp	r7, #1
     37e:	d017      	beq.n	3b0 <drawKare+0x94>
		break;
		case 2:
		//make a sad terminal thing go here
		break;
	}
}
     380:	b041      	add	sp, #260	; 0x104
     382:	bdf0      	pop	{r4, r5, r6, r7, pc}
     384:	ac05      	add	r4, sp, #20
     386:	ae0c      	add	r6, sp, #48	; 0x30
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
     388:	4d17      	ldr	r5, [pc, #92]	; (3e8 <drawKare+0xcc>)
			((happyTerm[i+3]/iSv)+(offsetGraphicY)));
     38a:	78e3      	ldrb	r3, [r4, #3]
     38c:	105b      	asrs	r3, r3, #1
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
     38e:	3396      	adds	r3, #150	; 0x96
			((happyTerm[i+2]/iSv)+(offsetGraphicX)),
     390:	78a2      	ldrb	r2, [r4, #2]
     392:	1052      	asrs	r2, r2, #1
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
     394:	322d      	adds	r2, #45	; 0x2d
     396:	32ff      	adds	r2, #255	; 0xff
			((happyTerm[i+1]/iSv)+(offsetGraphicY)),
     398:	7861      	ldrb	r1, [r4, #1]
     39a:	1049      	asrs	r1, r1, #1
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
     39c:	3196      	adds	r1, #150	; 0x96
     39e:	7820      	ldrb	r0, [r4, #0]
     3a0:	1040      	asrs	r0, r0, #1
     3a2:	302d      	adds	r0, #45	; 0x2d
     3a4:	30ff      	adds	r0, #255	; 0xff
     3a6:	47a8      	blx	r5
     3a8:	3404      	adds	r4, #4
		for(int i = 0; i < 28; i = i+4)
     3aa:	42a6      	cmp	r6, r4
     3ac:	d1ed      	bne.n	38a <drawKare+0x6e>
     3ae:	e7e7      	b.n	380 <drawKare+0x64>
     3b0:	466c      	mov	r4, sp
     3b2:	ae05      	add	r6, sp, #20
			fillRect((
     3b4:	4d0c      	ldr	r5, [pc, #48]	; (3e8 <drawKare+0xcc>)
			((rPiBeret[i+3]/iSv)+(offsetGraphicY)));
     3b6:	78e3      	ldrb	r3, [r4, #3]
     3b8:	105b      	asrs	r3, r3, #1
			fillRect((
     3ba:	3396      	adds	r3, #150	; 0x96
			((rPiBeret[i+2]/iSv)+(offsetGraphicX)),
     3bc:	78a2      	ldrb	r2, [r4, #2]
     3be:	1052      	asrs	r2, r2, #1
			fillRect((
     3c0:	322d      	adds	r2, #45	; 0x2d
     3c2:	32ff      	adds	r2, #255	; 0xff
			((rPiBeret[i+1]/iSv)+(offsetGraphicY)),
     3c4:	7861      	ldrb	r1, [r4, #1]
     3c6:	1049      	asrs	r1, r1, #1
			fillRect((
     3c8:	3196      	adds	r1, #150	; 0x96
			(rPiBeret[i]/iSv)+(offsetGraphicX)),
     3ca:	7820      	ldrb	r0, [r4, #0]
     3cc:	1040      	asrs	r0, r0, #1
			fillRect((
     3ce:	302d      	adds	r0, #45	; 0x2d
     3d0:	30ff      	adds	r0, #255	; 0xff
     3d2:	47a8      	blx	r5
     3d4:	3404      	adds	r4, #4
		for(int i = 0; i < 20; i = i+4)
     3d6:	42b4      	cmp	r4, r6
     3d8:	d1ed      	bne.n	3b6 <drawKare+0x9a>
     3da:	e7d1      	b.n	380 <drawKare+0x64>
     3dc:	0000488c 	.word	0x0000488c
     3e0:	000037b5 	.word	0x000037b5
     3e4:	0000490c 	.word	0x0000490c
     3e8:	00002ba1 	.word	0x00002ba1

000003ec <splashScreen>:

void splashScreen(void)
{
     3ec:	b570      	push	{r4, r5, r6, lr}
	static const char *splashText[32];
	splashText[0]  = "Trans rights are human rights";//
     3ee:	4c48      	ldr	r4, [pc, #288]	; (510 <splashScreen+0x124>)
     3f0:	4b48      	ldr	r3, [pc, #288]	; (514 <splashScreen+0x128>)
     3f2:	6023      	str	r3, [r4, #0]
	splashText[1]  = "13^5 + 16^5 = 17^5";//
     3f4:	4b48      	ldr	r3, [pc, #288]	; (518 <splashScreen+0x12c>)
     3f6:	6063      	str	r3, [r4, #4]
	splashText[2]  = "Reticulating Splines";//
     3f8:	4b48      	ldr	r3, [pc, #288]	; (51c <splashScreen+0x130>)
     3fa:	60a3      	str	r3, [r4, #8]
	splashText[3]  = "violence.works";//
     3fc:	4b48      	ldr	r3, [pc, #288]	; (520 <splashScreen+0x134>)
     3fe:	60e3      	str	r3, [r4, #12]
	splashText[4]  = "Tabs!";//
     400:	4b48      	ldr	r3, [pc, #288]	; (524 <splashScreen+0x138>)
     402:	6123      	str	r3, [r4, #16]
	splashText[5]  = "Kill Billionaires (and Trillionaire)";//
     404:	4b48      	ldr	r3, [pc, #288]	; (528 <splashScreen+0x13c>)
     406:	6163      	str	r3, [r4, #20]
	splashText[6]  = "Interest in technology is not a personality";//
     408:	4b48      	ldr	r3, [pc, #288]	; (52c <splashScreen+0x140>)
     40a:	61a3      	str	r3, [r4, #24]
	splashText[7]  = "10 PRINT CHR$(205.5+RND(1)); : GOTO 10";//
     40c:	4b48      	ldr	r3, [pc, #288]	; (530 <splashScreen+0x144>)
     40e:	61e3      	str	r3, [r4, #28]
	splashText[8]  = "No gods. No masters. No external libraries.";//
     410:	4b48      	ldr	r3, [pc, #288]	; (534 <splashScreen+0x148>)
     412:	6223      	str	r3, [r4, #32]
	splashText[9]  = "Kill Nazis";//
     414:	4b48      	ldr	r3, [pc, #288]	; (538 <splashScreen+0x14c>)
     416:	6263      	str	r3, [r4, #36]	; 0x24
	splashText[10] = "Tiananmen Square 1989";//
     418:	4b48      	ldr	r3, [pc, #288]	; (53c <splashScreen+0x150>)
     41a:	62a3      	str	r3, [r4, #40]	; 0x28
	splashText[11] = "America was founded on slavery";
     41c:	4b48      	ldr	r3, [pc, #288]	; (540 <splashScreen+0x154>)
     41e:	62e3      	str	r3, [r4, #44]	; 0x2c
	splashText[12] = "There is only capital and labor";//
     420:	4b48      	ldr	r3, [pc, #288]	; (544 <splashScreen+0x158>)
     422:	6323      	str	r3, [r4, #48]	; 0x30
	splashText[13] = "Encourage _symmetric_ class warfare";//
     424:	4b48      	ldr	r3, [pc, #288]	; (548 <splashScreen+0x15c>)
     426:	6363      	str	r3, [r4, #52]	; 0x34
	splashText[14] = "$CURRENT_MEME";//
     428:	4b48      	ldr	r3, [pc, #288]	; (54c <splashScreen+0x160>)
     42a:	63a3      	str	r3, [r4, #56]	; 0x38
	splashText[15] = "A Nice TTY";//
     42c:	4b48      	ldr	r3, [pc, #288]	; (550 <splashScreen+0x164>)
     42e:	63e3      	str	r3, [r4, #60]	; 0x3c
	splashText[16] = "Unix epoch minus 0xFF days";//
     430:	4b48      	ldr	r3, [pc, #288]	; (554 <splashScreen+0x168>)
     432:	6423      	str	r3, [r4, #64]	; 0x40
	splashText[17] = "i  = 0x5f3759df - ( i >> 1 );";//
     434:	4b48      	ldr	r3, [pc, #288]	; (558 <splashScreen+0x16c>)
     436:	6463      	str	r3, [r4, #68]	; 0x44
	splashText[18] = "ACAB";//
     438:	4b48      	ldr	r3, [pc, #288]	; (55c <splashScreen+0x170>)
     43a:	64a3      	str	r3, [r4, #72]	; 0x48
	splashText[19] = "Defcon's canceled.";//
     43c:	4b48      	ldr	r3, [pc, #288]	; (560 <splashScreen+0x174>)
     43e:	64e3      	str	r3, [r4, #76]	; 0x4c
	splashText[20] = "Ratsnest: Nothing To Do!";//
     440:	4b48      	ldr	r3, [pc, #288]	; (564 <splashScreen+0x178>)
     442:	6523      	str	r3, [r4, #80]	; 0x50
	splashText[21] = "It has 69 keys.";//
     444:	4b48      	ldr	r3, [pc, #288]	; (568 <splashScreen+0x17c>)
     446:	6563      	str	r3, [r4, #84]	; 0x54
	splashText[22] = "Because VT-420 was already taken";//
     448:	4b48      	ldr	r3, [pc, #288]	; (56c <splashScreen+0x180>)
     44a:	65a3      	str	r3, [r4, #88]	; 0x58
	splashText[23] = "Compression algorithm based on BBP (1997)";//
     44c:	4b48      	ldr	r3, [pc, #288]	; (570 <splashScreen+0x184>)
     44e:	65e3      	str	r3, [r4, #92]	; 0x5c
	splashText[24] = "Teach health insurance providers to code.";
     450:	4b48      	ldr	r3, [pc, #288]	; (574 <splashScreen+0x188>)
     452:	6623      	str	r3, [r4, #96]	; 0x60
	splashText[25] = "Offensive hardware";//
     454:	4b48      	ldr	r3, [pc, #288]	; (578 <splashScreen+0x18c>)
     456:	6663      	str	r3, [r4, #100]	; 0x64
	splashText[26] = "WiFi is not wireless Ethernet!";//
     458:	4b48      	ldr	r3, [pc, #288]	; (57c <splashScreen+0x190>)
     45a:	66a3      	str	r3, [r4, #104]	; 0x68
	splashText[27] = "Dummy thicc client";//
     45c:	4b48      	ldr	r3, [pc, #288]	; (580 <splashScreen+0x194>)
     45e:	66e3      	str	r3, [r4, #108]	; 0x6c
	splashText[28] = "A Nice TTY. An OK Computer.";//
     460:	4b48      	ldr	r3, [pc, #288]	; (584 <splashScreen+0x198>)
     462:	6723      	str	r3, [r4, #112]	; 0x70
	splashText[29] = "Ceci n'est pas une Cyberdeck (because it's not a Pelican Case)";//
     464:	4b48      	ldr	r3, [pc, #288]	; (588 <splashScreen+0x19c>)
     466:	6763      	str	r3, [r4, #116]	; 0x74
	splashText[30] = "Solidarity is not a new framework";//
     468:	4b48      	ldr	r3, [pc, #288]	; (58c <splashScreen+0x1a0>)
     46a:	67a3      	str	r3, [r4, #120]	; 0x78
	splashText[31] = "Breadboarding Is Not A Crime";//
     46c:	4b48      	ldr	r3, [pc, #288]	; (590 <splashScreen+0x1a4>)
     46e:	67e3      	str	r3, [r4, #124]	; 0x7c
	splashText[32] = "Off by one errors are common";
     470:	4a48      	ldr	r2, [pc, #288]	; (594 <splashScreen+0x1a8>)
     472:	2380      	movs	r3, #128	; 0x80
     474:	50e2      	str	r2, [r4, r3]
	
	const uint32_t megaHurtz = system_gclk_gen_get_hz(0);
     476:	2000      	movs	r0, #0
     478:	4b47      	ldr	r3, [pc, #284]	; (598 <splashScreen+0x1ac>)
     47a:	4798      	blx	r3
     47c:	0005      	movs	r5, r0
	const char *textPhrase = splashText[(((rand()+megaHurtz)%32))];
     47e:	4b47      	ldr	r3, [pc, #284]	; (59c <splashScreen+0x1b0>)
     480:	4798      	blx	r3
     482:	1945      	adds	r5, r0, r5
     484:	201f      	movs	r0, #31
     486:	4028      	ands	r0, r5
     488:	0080      	lsls	r0, r0, #2
     48a:	5904      	ldr	r4, [r0, r4]


	
	clearScreen();
     48c:	4b44      	ldr	r3, [pc, #272]	; (5a0 <splashScreen+0x1b4>)
     48e:	4798      	blx	r3
	setColorRGB(255,255,255);
     490:	22ff      	movs	r2, #255	; 0xff
     492:	21ff      	movs	r1, #255	; 0xff
     494:	20ff      	movs	r0, #255	; 0xff
     496:	4b43      	ldr	r3, [pc, #268]	; (5a4 <splashScreen+0x1b8>)
     498:	4798      	blx	r3
	
	REG_PORT_DIRTGL1 = PORT_PB31;
     49a:	2280      	movs	r2, #128	; 0x80
     49c:	0612      	lsls	r2, r2, #24
     49e:	4b42      	ldr	r3, [pc, #264]	; (5a8 <splashScreen+0x1bc>)
     4a0:	601a      	str	r2, [r3, #0]
	PORT->Group[1].PINCFG[31].bit.PULLEN = 1;
     4a2:	4b42      	ldr	r3, [pc, #264]	; (5ac <splashScreen+0x1c0>)
     4a4:	22df      	movs	r2, #223	; 0xdf
     4a6:	5c99      	ldrb	r1, [r3, r2]
     4a8:	2004      	movs	r0, #4
     4aa:	4301      	orrs	r1, r0
     4ac:	5499      	strb	r1, [r3, r2]
	PORT->Group[1].PINCFG[31].bit.INEN = 1;
     4ae:	5c99      	ldrb	r1, [r3, r2]
     4b0:	2002      	movs	r0, #2
     4b2:	4301      	orrs	r1, r0
     4b4:	5499      	strb	r1, [r3, r2]
	if((PORT->Group[1].IN.reg & PORT_PB31) != 0)
     4b6:	3a3f      	subs	r2, #63	; 0x3f
     4b8:	589b      	ldr	r3, [r3, r2]
     4ba:	2b00      	cmp	r3, #0
     4bc:	db24      	blt.n	508 <splashScreen+0x11c>
		//This is the 'pi' graphic; put some codes
		//here to handle setting up the uarts.
		drawKare(1);
	}
	else
	drawKare(0); //The normal graphic
     4be:	2000      	movs	r0, #0
     4c0:	4b3b      	ldr	r3, [pc, #236]	; (5b0 <splashScreen+0x1c4>)
     4c2:	4798      	blx	r3
	

	
	xCharPos = 40 - (strlen(textPhrase)/2);
     4c4:	0020      	movs	r0, r4
     4c6:	4b3b      	ldr	r3, [pc, #236]	; (5b4 <splashScreen+0x1c8>)
     4c8:	4798      	blx	r3
     4ca:	4e3b      	ldr	r6, [pc, #236]	; (5b8 <splashScreen+0x1cc>)
     4cc:	0840      	lsrs	r0, r0, #1
     4ce:	2328      	movs	r3, #40	; 0x28
     4d0:	1a18      	subs	r0, r3, r0
     4d2:	8030      	strh	r0, [r6, #0]
	yCharPos = 16;
     4d4:	4d39      	ldr	r5, [pc, #228]	; (5bc <splashScreen+0x1d0>)
     4d6:	2310      	movs	r3, #16
     4d8:	802b      	strh	r3, [r5, #0]
	
	writeString(textPhrase);
     4da:	0020      	movs	r0, r4
     4dc:	4b38      	ldr	r3, [pc, #224]	; (5c0 <splashScreen+0x1d4>)
     4de:	4798      	blx	r3

	delay_ms(2000);
     4e0:	20fa      	movs	r0, #250	; 0xfa
     4e2:	00c0      	lsls	r0, r0, #3
     4e4:	4b37      	ldr	r3, [pc, #220]	; (5c4 <splashScreen+0x1d8>)
     4e6:	4798      	blx	r3
	clearScreen();
     4e8:	4b2d      	ldr	r3, [pc, #180]	; (5a0 <splashScreen+0x1b4>)
     4ea:	4798      	blx	r3
	
	setColorRGB(0,255,0);
     4ec:	2200      	movs	r2, #0
     4ee:	21ff      	movs	r1, #255	; 0xff
     4f0:	2000      	movs	r0, #0
     4f2:	4b2c      	ldr	r3, [pc, #176]	; (5a4 <splashScreen+0x1b8>)
     4f4:	4798      	blx	r3
	setBackColorRGB(0,0,0);
     4f6:	2200      	movs	r2, #0
     4f8:	2100      	movs	r1, #0
     4fa:	2000      	movs	r0, #0
     4fc:	4b32      	ldr	r3, [pc, #200]	; (5c8 <splashScreen+0x1dc>)
     4fe:	4798      	blx	r3
	
	//Setting the xChar and yChar position has to come
	//after splashScreen() and InitLCD();
	xCharPos = 0;
     500:	2300      	movs	r3, #0
     502:	8033      	strh	r3, [r6, #0]
	yCharPos = 0;
     504:	802b      	strh	r3, [r5, #0]
	

     506:	bd70      	pop	{r4, r5, r6, pc}
		drawKare(1);
     508:	2001      	movs	r0, #1
     50a:	4b29      	ldr	r3, [pc, #164]	; (5b0 <splashScreen+0x1c4>)
     50c:	4798      	blx	r3
     50e:	e7d9      	b.n	4c4 <splashScreen+0xd8>
     510:	200001dc 	.word	0x200001dc
     514:	0000498c 	.word	0x0000498c
     518:	000049ac 	.word	0x000049ac
     51c:	000049c0 	.word	0x000049c0
     520:	000049d8 	.word	0x000049d8
     524:	000049e8 	.word	0x000049e8
     528:	000049f0 	.word	0x000049f0
     52c:	00004a18 	.word	0x00004a18
     530:	00004a44 	.word	0x00004a44
     534:	00004a6c 	.word	0x00004a6c
     538:	00004a98 	.word	0x00004a98
     53c:	00004aa4 	.word	0x00004aa4
     540:	00004abc 	.word	0x00004abc
     544:	00004adc 	.word	0x00004adc
     548:	00004afc 	.word	0x00004afc
     54c:	00004b20 	.word	0x00004b20
     550:	00004b30 	.word	0x00004b30
     554:	00004b3c 	.word	0x00004b3c
     558:	00004b58 	.word	0x00004b58
     55c:	00004b78 	.word	0x00004b78
     560:	00004b80 	.word	0x00004b80
     564:	00004b94 	.word	0x00004b94
     568:	00004bb0 	.word	0x00004bb0
     56c:	00004bc0 	.word	0x00004bc0
     570:	00004be4 	.word	0x00004be4
     574:	00004c10 	.word	0x00004c10
     578:	00004c3c 	.word	0x00004c3c
     57c:	00004c50 	.word	0x00004c50
     580:	00004c70 	.word	0x00004c70
     584:	00004c84 	.word	0x00004c84
     588:	00004ca0 	.word	0x00004ca0
     58c:	00004ce0 	.word	0x00004ce0
     590:	00004d04 	.word	0x00004d04
     594:	00004d24 	.word	0x00004d24
     598:	00001bd5 	.word	0x00001bd5
     59c:	000039b9 	.word	0x000039b9
     5a0:	00002cf9 	.word	0x00002cf9
     5a4:	00002a65 	.word	0x00002a65
     5a8:	4100448c 	.word	0x4100448c
     5ac:	41004400 	.word	0x41004400
     5b0:	0000031d 	.word	0x0000031d
     5b4:	00003bc1 	.word	0x00003bc1
     5b8:	2000029c 	.word	0x2000029c
     5bc:	2000029e 	.word	0x2000029e
     5c0:	000023f1 	.word	0x000023f1
     5c4:	00000655 	.word	0x00000655
     5c8:	00002a8d 	.word	0x00002a8d

000005cc <parseRXBuffer>:
char tempCharacter;

cbuf_handle_t ouroboros;	

void parseRXBuffer(void)
{
     5cc:	b5f0      	push	{r4, r5, r6, r7, lr}
     5ce:	b083      	sub	sp, #12
		while(!ring_empty(ouroboros))
     5d0:	4e0b      	ldr	r6, [pc, #44]	; (600 <parseRXBuffer+0x34>)
     5d2:	4d0c      	ldr	r5, [pc, #48]	; (604 <parseRXBuffer+0x38>)
		{
			uint8_t characterFromRingBuffer;
			ring_get(ouroboros, &characterFromRingBuffer);
     5d4:	0037      	movs	r7, r6
		while(!ring_empty(ouroboros))
     5d6:	e008      	b.n	5ea <parseRXBuffer+0x1e>
			ring_get(ouroboros, &characterFromRingBuffer);
     5d8:	466b      	mov	r3, sp
     5da:	1ddc      	adds	r4, r3, #7
     5dc:	0021      	movs	r1, r4
     5de:	6838      	ldr	r0, [r7, #0]
     5e0:	4b09      	ldr	r3, [pc, #36]	; (608 <parseRXBuffer+0x3c>)
     5e2:	4798      	blx	r3
			parseChar(characterFromRingBuffer);
     5e4:	7820      	ldrb	r0, [r4, #0]
     5e6:	4b09      	ldr	r3, [pc, #36]	; (60c <parseRXBuffer+0x40>)
     5e8:	4798      	blx	r3
		while(!ring_empty(ouroboros))
     5ea:	6830      	ldr	r0, [r6, #0]
     5ec:	47a8      	blx	r5
     5ee:	2800      	cmp	r0, #0
     5f0:	d0f2      	beq.n	5d8 <parseRXBuffer+0xc>
		
		}
		ring_reset(ouroboros);
     5f2:	4b03      	ldr	r3, [pc, #12]	; (600 <parseRXBuffer+0x34>)
     5f4:	6818      	ldr	r0, [r3, #0]
     5f6:	4b06      	ldr	r3, [pc, #24]	; (610 <parseRXBuffer+0x44>)
     5f8:	4798      	blx	r3
}
     5fa:	b003      	add	sp, #12
     5fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     5fe:	46c0      	nop			; (mov r8, r8)
     600:	200002b4 	.word	0x200002b4
     604:	0000017d 	.word	0x0000017d
     608:	00000195 	.word	0x00000195
     60c:	000001d1 	.word	0x000001d1
     610:	00000135 	.word	0x00000135

00000614 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     614:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     616:	2000      	movs	r0, #0
     618:	4b08      	ldr	r3, [pc, #32]	; (63c <delay_init+0x28>)
     61a:	4798      	blx	r3
     61c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     61e:	4c08      	ldr	r4, [pc, #32]	; (640 <delay_init+0x2c>)
     620:	21fa      	movs	r1, #250	; 0xfa
     622:	0089      	lsls	r1, r1, #2
     624:	47a0      	blx	r4
     626:	4b07      	ldr	r3, [pc, #28]	; (644 <delay_init+0x30>)
     628:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     62a:	4907      	ldr	r1, [pc, #28]	; (648 <delay_init+0x34>)
     62c:	0028      	movs	r0, r5
     62e:	47a0      	blx	r4
     630:	4b06      	ldr	r3, [pc, #24]	; (64c <delay_init+0x38>)
     632:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     634:	2205      	movs	r2, #5
     636:	4b06      	ldr	r3, [pc, #24]	; (650 <delay_init+0x3c>)
     638:	601a      	str	r2, [r3, #0]
}
     63a:	bd70      	pop	{r4, r5, r6, pc}
     63c:	00001bd5 	.word	0x00001bd5
     640:	00003419 	.word	0x00003419
     644:	20000000 	.word	0x20000000
     648:	000f4240 	.word	0x000f4240
     64c:	20000004 	.word	0x20000004
     650:	e000e010 	.word	0xe000e010

00000654 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     654:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     656:	4b08      	ldr	r3, [pc, #32]	; (678 <delay_cycles_ms+0x24>)
     658:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     65a:	4a08      	ldr	r2, [pc, #32]	; (67c <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     65c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     65e:	2180      	movs	r1, #128	; 0x80
     660:	0249      	lsls	r1, r1, #9
	while (n--) {
     662:	3801      	subs	r0, #1
     664:	d307      	bcc.n	676 <delay_cycles_ms+0x22>
	if (n > 0) {
     666:	2c00      	cmp	r4, #0
     668:	d0fb      	beq.n	662 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     66a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     66c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     66e:	6813      	ldr	r3, [r2, #0]
     670:	420b      	tst	r3, r1
     672:	d0fc      	beq.n	66e <delay_cycles_ms+0x1a>
     674:	e7f5      	b.n	662 <delay_cycles_ms+0xe>
	}
}
     676:	bd30      	pop	{r4, r5, pc}
     678:	20000000 	.word	0x20000000
     67c:	e000e010 	.word	0xe000e010

00000680 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     680:	4b0c      	ldr	r3, [pc, #48]	; (6b4 <cpu_irq_enter_critical+0x34>)
     682:	681b      	ldr	r3, [r3, #0]
     684:	2b00      	cmp	r3, #0
     686:	d106      	bne.n	696 <cpu_irq_enter_critical+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     688:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     68c:	2b00      	cmp	r3, #0
     68e:	d007      	beq.n	6a0 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     690:	2200      	movs	r2, #0
     692:	4b09      	ldr	r3, [pc, #36]	; (6b8 <cpu_irq_enter_critical+0x38>)
     694:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     696:	4a07      	ldr	r2, [pc, #28]	; (6b4 <cpu_irq_enter_critical+0x34>)
     698:	6813      	ldr	r3, [r2, #0]
     69a:	3301      	adds	r3, #1
     69c:	6013      	str	r3, [r2, #0]
}
     69e:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     6a0:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     6a2:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     6a6:	2200      	movs	r2, #0
     6a8:	4b04      	ldr	r3, [pc, #16]	; (6bc <cpu_irq_enter_critical+0x3c>)
     6aa:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     6ac:	3201      	adds	r2, #1
     6ae:	4b02      	ldr	r3, [pc, #8]	; (6b8 <cpu_irq_enter_critical+0x38>)
     6b0:	701a      	strb	r2, [r3, #0]
     6b2:	e7f0      	b.n	696 <cpu_irq_enter_critical+0x16>
     6b4:	2000025c 	.word	0x2000025c
     6b8:	20000260 	.word	0x20000260
     6bc:	20000008 	.word	0x20000008

000006c0 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     6c0:	4b08      	ldr	r3, [pc, #32]	; (6e4 <cpu_irq_leave_critical+0x24>)
     6c2:	681a      	ldr	r2, [r3, #0]
     6c4:	3a01      	subs	r2, #1
     6c6:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     6c8:	681b      	ldr	r3, [r3, #0]
     6ca:	2b00      	cmp	r3, #0
     6cc:	d109      	bne.n	6e2 <cpu_irq_leave_critical+0x22>
     6ce:	4b06      	ldr	r3, [pc, #24]	; (6e8 <cpu_irq_leave_critical+0x28>)
     6d0:	781b      	ldrb	r3, [r3, #0]
     6d2:	2b00      	cmp	r3, #0
     6d4:	d005      	beq.n	6e2 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     6d6:	2201      	movs	r2, #1
     6d8:	4b04      	ldr	r3, [pc, #16]	; (6ec <cpu_irq_leave_critical+0x2c>)
     6da:	701a      	strb	r2, [r3, #0]
     6dc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     6e0:	b662      	cpsie	i
	}
}
     6e2:	4770      	bx	lr
     6e4:	2000025c 	.word	0x2000025c
     6e8:	20000260 	.word	0x20000260
     6ec:	20000008 	.word	0x20000008

000006f0 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     6f0:	b5f0      	push	{r4, r5, r6, r7, lr}
     6f2:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     6f4:	ac01      	add	r4, sp, #4
     6f6:	2501      	movs	r5, #1
     6f8:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     6fa:	2700      	movs	r7, #0
     6fc:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     6fe:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     700:	0021      	movs	r1, r4
     702:	203e      	movs	r0, #62	; 0x3e
     704:	4e06      	ldr	r6, [pc, #24]	; (720 <system_board_init+0x30>)
     706:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     708:	2280      	movs	r2, #128	; 0x80
     70a:	05d2      	lsls	r2, r2, #23
     70c:	4b05      	ldr	r3, [pc, #20]	; (724 <system_board_init+0x34>)
     70e:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     710:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     712:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     714:	0021      	movs	r1, r4
     716:	200f      	movs	r0, #15
     718:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
     71a:	b003      	add	sp, #12
     71c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     71e:	46c0      	nop			; (mov r8, r8)
     720:	00000c59 	.word	0x00000c59
     724:	41004480 	.word	0x41004480

00000728 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     728:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     72a:	2200      	movs	r2, #0
     72c:	2300      	movs	r3, #0
     72e:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
     730:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
     732:	2100      	movs	r1, #0
     734:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     736:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     738:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
     73a:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
     73c:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
     73e:	6082      	str	r2, [r0, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	//config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
     740:	24c0      	movs	r4, #192	; 0xc0
     742:	0164      	lsls	r4, r4, #5
     744:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     746:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     748:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
     74a:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
     74c:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
     74e:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     750:	242a      	movs	r4, #42	; 0x2a
     752:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
     754:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
     756:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
     758:	3c06      	subs	r4, #6
     75a:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     75c:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     75e:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
     760:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
     762:	232b      	movs	r3, #43	; 0x2b
     764:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
     766:	3301      	adds	r3, #1
     768:	54c1      	strb	r1, [r0, r3]
}
     76a:	bd10      	pop	{r4, pc}

0000076c <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     76c:	b5f0      	push	{r4, r5, r6, r7, lr}
     76e:	46d6      	mov	lr, sl
     770:	464f      	mov	r7, r9
     772:	4646      	mov	r6, r8
     774:	b5c0      	push	{r6, r7, lr}
     776:	b096      	sub	sp, #88	; 0x58
     778:	0007      	movs	r7, r0
     77a:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     77c:	6001      	str	r1, [r0, #0]
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     77e:	4ac6      	ldr	r2, [pc, #792]	; (a98 <adc_init+0x32c>)
     780:	6a10      	ldr	r0, [r2, #32]
     782:	2380      	movs	r3, #128	; 0x80
     784:	025b      	lsls	r3, r3, #9
     786:	4303      	orrs	r3, r0
     788:	6213      	str	r3, [r2, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     78a:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     78c:	2005      	movs	r0, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     78e:	07db      	lsls	r3, r3, #31
     790:	d505      	bpl.n	79e <adc_init+0x32>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
     792:	b016      	add	sp, #88	; 0x58
     794:	bc1c      	pop	{r2, r3, r4}
     796:	4690      	mov	r8, r2
     798:	4699      	mov	r9, r3
     79a:	46a2      	mov	sl, r4
     79c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     79e:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
     7a0:	3017      	adds	r0, #23
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     7a2:	079b      	lsls	r3, r3, #30
     7a4:	d4f5      	bmi.n	792 <adc_init+0x26>
	module_inst->reference = config->reference;
     7a6:	7873      	ldrb	r3, [r6, #1]
     7a8:	713b      	strb	r3, [r7, #4]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
     7aa:	2b00      	cmp	r3, #0
     7ac:	d104      	bne.n	7b8 <adc_init+0x4c>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
     7ae:	4abb      	ldr	r2, [pc, #748]	; (a9c <adc_init+0x330>)
     7b0:	6c13      	ldr	r3, [r2, #64]	; 0x40
     7b2:	2104      	movs	r1, #4
     7b4:	430b      	orrs	r3, r1
     7b6:	6413      	str	r3, [r2, #64]	; 0x40
		module_inst->callback[i] = NULL;
     7b8:	2300      	movs	r3, #0
     7ba:	60bb      	str	r3, [r7, #8]
     7bc:	60fb      	str	r3, [r7, #12]
     7be:	613b      	str	r3, [r7, #16]
	module_inst->registered_callback_mask = 0;
     7c0:	76bb      	strb	r3, [r7, #26]
	module_inst->enabled_callback_mask = 0;
     7c2:	76fb      	strb	r3, [r7, #27]
	module_inst->remaining_conversions = 0;
     7c4:	833b      	strh	r3, [r7, #24]
	module_inst->job_status = STATUS_OK;
     7c6:	773b      	strb	r3, [r7, #28]
	_adc_instances[0] = module_inst;
     7c8:	4bb5      	ldr	r3, [pc, #724]	; (aa0 <adc_init+0x334>)
     7ca:	601f      	str	r7, [r3, #0]
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
     7cc:	232a      	movs	r3, #42	; 0x2a
     7ce:	5cf3      	ldrb	r3, [r6, r3]
     7d0:	2b00      	cmp	r3, #0
     7d2:	d105      	bne.n	7e0 <adc_init+0x74>
     7d4:	7d33      	ldrb	r3, [r6, #20]
     7d6:	2b00      	cmp	r3, #0
     7d8:	d102      	bne.n	7e0 <adc_init+0x74>
		module_inst->software_trigger = true;
     7da:	3301      	adds	r3, #1
     7dc:	777b      	strb	r3, [r7, #29]
     7de:	e001      	b.n	7e4 <adc_init+0x78>
		module_inst->software_trigger = false;
     7e0:	2300      	movs	r3, #0
     7e2:	777b      	strb	r3, [r7, #29]
	Adc *const adc_module = module_inst->hw;
     7e4:	683b      	ldr	r3, [r7, #0]
     7e6:	4698      	mov	r8, r3
	gclk_chan_conf.source_generator = config->clock_source;
     7e8:	7833      	ldrb	r3, [r6, #0]
     7ea:	466a      	mov	r2, sp
     7ec:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
     7ee:	4669      	mov	r1, sp
     7f0:	201e      	movs	r0, #30
     7f2:	4bac      	ldr	r3, [pc, #688]	; (aa4 <adc_init+0x338>)
     7f4:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
     7f6:	201e      	movs	r0, #30
     7f8:	4bab      	ldr	r3, [pc, #684]	; (aa8 <adc_init+0x33c>)
     7fa:	4798      	blx	r3
	if (config->pin_scan.inputs_to_scan != 0) {
     7fc:	232c      	movs	r3, #44	; 0x2c
     7fe:	5cf2      	ldrb	r2, [r6, r3]
     800:	2a00      	cmp	r2, #0
     802:	d054      	beq.n	8ae <adc_init+0x142>
		uint8_t offset = config->pin_scan.offset_start_scan;
     804:	3b01      	subs	r3, #1
     806:	5cf5      	ldrb	r5, [r6, r3]
		uint8_t start_pin =
     808:	7b33      	ldrb	r3, [r6, #12]
     80a:	18eb      	adds	r3, r5, r3
     80c:	b2db      	uxtb	r3, r3
		uint8_t end_pin =
     80e:	18d1      	adds	r1, r2, r3
		while (start_pin < end_pin) {
     810:	b2c9      	uxtb	r1, r1
     812:	428b      	cmp	r3, r1
     814:	d221      	bcs.n	85a <adc_init+0xee>
     816:	1952      	adds	r2, r2, r5
     818:	b2d3      	uxtb	r3, r2
     81a:	4699      	mov	r9, r3
	const uint32_t pinmapping[] = {
     81c:	4ba3      	ldr	r3, [pc, #652]	; (aac <adc_init+0x340>)
     81e:	469a      	mov	sl, r3
     820:	e003      	b.n	82a <adc_init+0xbe>
			offset++;
     822:	3501      	adds	r5, #1
     824:	b2ed      	uxtb	r5, r5
		while (start_pin < end_pin) {
     826:	454d      	cmp	r5, r9
     828:	d017      	beq.n	85a <adc_init+0xee>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
     82a:	240f      	movs	r4, #15
     82c:	402c      	ands	r4, r5
     82e:	7b33      	ldrb	r3, [r6, #12]
     830:	18e4      	adds	r4, r4, r3
	const uint32_t pinmapping[] = {
     832:	2250      	movs	r2, #80	; 0x50
     834:	499e      	ldr	r1, [pc, #632]	; (ab0 <adc_init+0x344>)
     836:	a802      	add	r0, sp, #8
     838:	47d0      	blx	sl
	if (pin <= ADC_EXTCHANNEL_MSB) {
     83a:	2c13      	cmp	r4, #19
     83c:	d8f1      	bhi.n	822 <adc_init+0xb6>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     83e:	00a4      	lsls	r4, r4, #2
     840:	ab02      	add	r3, sp, #8
     842:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     844:	a901      	add	r1, sp, #4
     846:	2300      	movs	r3, #0
     848:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     84a:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     84c:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     84e:	3301      	adds	r3, #1
     850:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     852:	b2c0      	uxtb	r0, r0
     854:	4b97      	ldr	r3, [pc, #604]	; (ab4 <adc_init+0x348>)
     856:	4798      	blx	r3
     858:	e7e3      	b.n	822 <adc_init+0xb6>
		_adc_configure_ain_pin(config->negative_input);
     85a:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     85c:	2250      	movs	r2, #80	; 0x50
     85e:	4994      	ldr	r1, [pc, #592]	; (ab0 <adc_init+0x344>)
     860:	a802      	add	r0, sp, #8
     862:	4b92      	ldr	r3, [pc, #584]	; (aac <adc_init+0x340>)
     864:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     866:	2c13      	cmp	r4, #19
     868:	d913      	bls.n	892 <adc_init+0x126>
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
     86a:	7d73      	ldrb	r3, [r6, #21]
     86c:	009b      	lsls	r3, r3, #2
     86e:	b2db      	uxtb	r3, r3
     870:	4642      	mov	r2, r8
     872:	7013      	strb	r3, [r2, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     874:	7db3      	ldrb	r3, [r6, #22]
     876:	01db      	lsls	r3, r3, #7
     878:	7872      	ldrb	r2, [r6, #1]
     87a:	4313      	orrs	r3, r2
     87c:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
     87e:	4642      	mov	r2, r8
     880:	7053      	strb	r3, [r2, #1]
	switch (config->resolution) {
     882:	7933      	ldrb	r3, [r6, #4]
     884:	2b34      	cmp	r3, #52	; 0x34
     886:	d900      	bls.n	88a <adc_init+0x11e>
     888:	e17b      	b.n	b82 <adc_init+0x416>
     88a:	009b      	lsls	r3, r3, #2
     88c:	4a8a      	ldr	r2, [pc, #552]	; (ab8 <adc_init+0x34c>)
     88e:	58d3      	ldr	r3, [r2, r3]
     890:	469f      	mov	pc, r3
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     892:	00a4      	lsls	r4, r4, #2
     894:	ab02      	add	r3, sp, #8
     896:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     898:	a901      	add	r1, sp, #4
     89a:	2300      	movs	r3, #0
     89c:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     89e:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     8a0:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     8a2:	3301      	adds	r3, #1
     8a4:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     8a6:	b2c0      	uxtb	r0, r0
     8a8:	4b82      	ldr	r3, [pc, #520]	; (ab4 <adc_init+0x348>)
     8aa:	4798      	blx	r3
     8ac:	e7dd      	b.n	86a <adc_init+0xfe>
		_adc_configure_ain_pin(config->positive_input);
     8ae:	7b34      	ldrb	r4, [r6, #12]
	const uint32_t pinmapping[] = {
     8b0:	2250      	movs	r2, #80	; 0x50
     8b2:	497f      	ldr	r1, [pc, #508]	; (ab0 <adc_init+0x344>)
     8b4:	a802      	add	r0, sp, #8
     8b6:	4b7d      	ldr	r3, [pc, #500]	; (aac <adc_init+0x340>)
     8b8:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     8ba:	2c13      	cmp	r4, #19
     8bc:	d915      	bls.n	8ea <adc_init+0x17e>
		_adc_configure_ain_pin(config->negative_input);
     8be:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     8c0:	2250      	movs	r2, #80	; 0x50
     8c2:	497b      	ldr	r1, [pc, #492]	; (ab0 <adc_init+0x344>)
     8c4:	a802      	add	r0, sp, #8
     8c6:	4b79      	ldr	r3, [pc, #484]	; (aac <adc_init+0x340>)
     8c8:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     8ca:	2c13      	cmp	r4, #19
     8cc:	d8cd      	bhi.n	86a <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     8ce:	00a4      	lsls	r4, r4, #2
     8d0:	ab02      	add	r3, sp, #8
     8d2:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     8d4:	a901      	add	r1, sp, #4
     8d6:	2300      	movs	r3, #0
     8d8:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     8da:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     8dc:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     8de:	3301      	adds	r3, #1
     8e0:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     8e2:	b2c0      	uxtb	r0, r0
     8e4:	4b73      	ldr	r3, [pc, #460]	; (ab4 <adc_init+0x348>)
     8e6:	4798      	blx	r3
     8e8:	e7bf      	b.n	86a <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     8ea:	00a4      	lsls	r4, r4, #2
     8ec:	ab02      	add	r3, sp, #8
     8ee:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     8f0:	a901      	add	r1, sp, #4
     8f2:	2300      	movs	r3, #0
     8f4:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     8f6:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     8f8:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     8fa:	3301      	adds	r3, #1
     8fc:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     8fe:	b2c0      	uxtb	r0, r0
     900:	4b6c      	ldr	r3, [pc, #432]	; (ab4 <adc_init+0x348>)
     902:	4798      	blx	r3
     904:	e7db      	b.n	8be <adc_init+0x152>
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     906:	2304      	movs	r3, #4
		resolution = ADC_RESOLUTION_16BIT;
     908:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_4;
     90a:	2102      	movs	r1, #2
     90c:	e01a      	b.n	944 <adc_init+0x1d8>
		adjres = config->divide_result;
     90e:	7c71      	ldrb	r1, [r6, #17]
		accumulate = config->accumulate_samples;
     910:	7c33      	ldrb	r3, [r6, #16]
		resolution = ADC_RESOLUTION_16BIT;
     912:	2410      	movs	r4, #16
     914:	e016      	b.n	944 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     916:	2306      	movs	r3, #6
		resolution = ADC_RESOLUTION_16BIT;
     918:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     91a:	2101      	movs	r1, #1
     91c:	e012      	b.n	944 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     91e:	2308      	movs	r3, #8
		resolution = ADC_RESOLUTION_16BIT;
     920:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     922:	2100      	movs	r1, #0
     924:	e00e      	b.n	944 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     926:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_8BIT;
     928:	2430      	movs	r4, #48	; 0x30
	uint8_t adjres = 0;
     92a:	2100      	movs	r1, #0
     92c:	e00a      	b.n	944 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     92e:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_10BIT;
     930:	2420      	movs	r4, #32
	uint8_t adjres = 0;
     932:	2100      	movs	r1, #0
     934:	e006      	b.n	944 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     936:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_12BIT;
     938:	2400      	movs	r4, #0
	uint8_t adjres = 0;
     93a:	2100      	movs	r1, #0
     93c:	e002      	b.n	944 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     93e:	2302      	movs	r3, #2
		resolution = ADC_RESOLUTION_16BIT;
     940:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     942:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     944:	0109      	lsls	r1, r1, #4
     946:	2270      	movs	r2, #112	; 0x70
     948:	400a      	ands	r2, r1
     94a:	4313      	orrs	r3, r2
     94c:	4642      	mov	r2, r8
     94e:	7093      	strb	r3, [r2, #2]
	if (config->sample_length > 63) {
     950:	7df3      	ldrb	r3, [r6, #23]
		return STATUS_ERR_INVALID_ARG;
     952:	2017      	movs	r0, #23
	if (config->sample_length > 63) {
     954:	2b3f      	cmp	r3, #63	; 0x3f
     956:	d900      	bls.n	95a <adc_init+0x1ee>
     958:	e71b      	b.n	792 <adc_init+0x26>
		adc_module->SAMPCTRL.reg =
     95a:	70d3      	strb	r3, [r2, #3]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     95c:	683a      	ldr	r2, [r7, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     95e:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     960:	b25b      	sxtb	r3, r3
     962:	2b00      	cmp	r3, #0
     964:	dbfb      	blt.n	95e <adc_init+0x1f2>
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
     966:	7cf3      	ldrb	r3, [r6, #19]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     968:	8872      	ldrh	r2, [r6, #2]
     96a:	4313      	orrs	r3, r2
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     96c:	2224      	movs	r2, #36	; 0x24
     96e:	5cb2      	ldrb	r2, [r6, r2]
     970:	00d2      	lsls	r2, r2, #3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     972:	4313      	orrs	r3, r2
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
     974:	7d32      	ldrb	r2, [r6, #20]
     976:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     978:	4313      	orrs	r3, r2
     97a:	7cb2      	ldrb	r2, [r6, #18]
     97c:	0052      	lsls	r2, r2, #1
     97e:	4313      	orrs	r3, r2
     980:	4323      	orrs	r3, r4
	adc_module->CTRLB.reg =
     982:	4642      	mov	r2, r8
     984:	8093      	strh	r3, [r2, #4]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     986:	7e33      	ldrb	r3, [r6, #24]
     988:	2b00      	cmp	r3, #0
     98a:	d020      	beq.n	9ce <adc_init+0x262>
		switch (resolution) {
     98c:	2c10      	cmp	r4, #16
     98e:	d100      	bne.n	992 <adc_init+0x226>
     990:	e0d9      	b.n	b46 <adc_init+0x3da>
     992:	d800      	bhi.n	996 <adc_init+0x22a>
     994:	e098      	b.n	ac8 <adc_init+0x35c>
     996:	2c20      	cmp	r4, #32
     998:	d100      	bne.n	99c <adc_init+0x230>
     99a:	e0b6      	b.n	b0a <adc_init+0x39e>
     99c:	2c30      	cmp	r4, #48	; 0x30
     99e:	d116      	bne.n	9ce <adc_init+0x262>
			if (config->differential_mode &&
     9a0:	7cf2      	ldrb	r2, [r6, #19]
     9a2:	2a00      	cmp	r2, #0
     9a4:	d00a      	beq.n	9bc <adc_init+0x250>
					(config->window.window_lower_value > 127 ||
     9a6:	69f2      	ldr	r2, [r6, #28]
     9a8:	3280      	adds	r2, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
     9aa:	2017      	movs	r0, #23
			if (config->differential_mode &&
     9ac:	2aff      	cmp	r2, #255	; 0xff
     9ae:	d900      	bls.n	9b2 <adc_init+0x246>
     9b0:	e6ef      	b.n	792 <adc_init+0x26>
					config->window.window_lower_value < -128 ||
     9b2:	6a32      	ldr	r2, [r6, #32]
     9b4:	3280      	adds	r2, #128	; 0x80
     9b6:	2aff      	cmp	r2, #255	; 0xff
     9b8:	d900      	bls.n	9bc <adc_init+0x250>
     9ba:	e6ea      	b.n	792 <adc_init+0x26>
				return STATUS_ERR_INVALID_ARG;
     9bc:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 255 ||
     9be:	69f2      	ldr	r2, [r6, #28]
     9c0:	2aff      	cmp	r2, #255	; 0xff
     9c2:	dd00      	ble.n	9c6 <adc_init+0x25a>
     9c4:	e6e5      	b.n	792 <adc_init+0x26>
     9c6:	6a32      	ldr	r2, [r6, #32]
     9c8:	2aff      	cmp	r2, #255	; 0xff
     9ca:	dd00      	ble.n	9ce <adc_init+0x262>
     9cc:	e6e1      	b.n	792 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     9ce:	6839      	ldr	r1, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     9d0:	7e4a      	ldrb	r2, [r1, #25]
	while (adc_is_syncing(module_inst)) {
     9d2:	b252      	sxtb	r2, r2
     9d4:	2a00      	cmp	r2, #0
     9d6:	dbfb      	blt.n	9d0 <adc_init+0x264>
	adc_module->WINCTRL.reg = config->window.window_mode;
     9d8:	4642      	mov	r2, r8
     9da:	7213      	strb	r3, [r2, #8]
	Adc *const adc_module = module_inst->hw;
     9dc:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     9de:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     9e0:	b25b      	sxtb	r3, r3
     9e2:	2b00      	cmp	r3, #0
     9e4:	dbfb      	blt.n	9de <adc_init+0x272>
	adc_module->WINLT.reg =
     9e6:	8bb3      	ldrh	r3, [r6, #28]
     9e8:	4642      	mov	r2, r8
     9ea:	8393      	strh	r3, [r2, #28]
	Adc *const adc_module = module_inst->hw;
     9ec:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     9ee:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     9f0:	b25b      	sxtb	r3, r3
     9f2:	2b00      	cmp	r3, #0
     9f4:	dbfb      	blt.n	9ee <adc_init+0x282>
	adc_module->WINUT.reg = config->window.window_upper_value <<
     9f6:	8c33      	ldrh	r3, [r6, #32]
     9f8:	4642      	mov	r2, r8
     9fa:	8413      	strh	r3, [r2, #32]
	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
     9fc:	232c      	movs	r3, #44	; 0x2c
     9fe:	5cf3      	ldrb	r3, [r6, r3]
	if (inputs_to_scan > 0) {
     a00:	2b00      	cmp	r3, #0
     a02:	d005      	beq.n	a10 <adc_init+0x2a4>
		inputs_to_scan--;
     a04:	3b01      	subs	r3, #1
     a06:	b2db      	uxtb	r3, r3
		return STATUS_ERR_INVALID_ARG;
     a08:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     a0a:	2b0f      	cmp	r3, #15
     a0c:	d900      	bls.n	a10 <adc_init+0x2a4>
     a0e:	e6c0      	b.n	792 <adc_init+0x26>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
     a10:	222b      	movs	r2, #43	; 0x2b
     a12:	5cb1      	ldrb	r1, [r6, r2]
		return STATUS_ERR_INVALID_ARG;
     a14:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     a16:	290f      	cmp	r1, #15
     a18:	d900      	bls.n	a1c <adc_init+0x2b0>
     a1a:	e6ba      	b.n	792 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     a1c:	6838      	ldr	r0, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     a1e:	7e42      	ldrb	r2, [r0, #25]
	while (adc_is_syncing(module_inst)) {
     a20:	b252      	sxtb	r2, r2
     a22:	2a00      	cmp	r2, #0
     a24:	dbfb      	blt.n	a1e <adc_init+0x2b2>
			config->negative_input |
     a26:	89f2      	ldrh	r2, [r6, #14]
			config->positive_input;
     a28:	7b30      	ldrb	r0, [r6, #12]
			config->negative_input |
     a2a:	4302      	orrs	r2, r0
     a2c:	68b0      	ldr	r0, [r6, #8]
     a2e:	4302      	orrs	r2, r0
			(config->pin_scan.offset_start_scan <<
     a30:	0509      	lsls	r1, r1, #20
			config->negative_input |
     a32:	430a      	orrs	r2, r1
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     a34:	041b      	lsls	r3, r3, #16
			config->negative_input |
     a36:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
     a38:	4642      	mov	r2, r8
     a3a:	6113      	str	r3, [r2, #16]
	adc_module->EVCTRL.reg = config->event_action;
     a3c:	232a      	movs	r3, #42	; 0x2a
     a3e:	5cf3      	ldrb	r3, [r6, r3]
     a40:	7513      	strb	r3, [r2, #20]
	adc_module->INTENCLR.reg =
     a42:	230f      	movs	r3, #15
     a44:	7593      	strb	r3, [r2, #22]
	if (config->correction.correction_enable){
     a46:	3315      	adds	r3, #21
     a48:	5cf3      	ldrb	r3, [r6, r3]
     a4a:	2b00      	cmp	r3, #0
     a4c:	d012      	beq.n	a74 <adc_init+0x308>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     a4e:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
     a50:	4a1a      	ldr	r2, [pc, #104]	; (abc <adc_init+0x350>)
			return STATUS_ERR_INVALID_ARG;
     a52:	2017      	movs	r0, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     a54:	4293      	cmp	r3, r2
     a56:	d900      	bls.n	a5a <adc_init+0x2ee>
     a58:	e69b      	b.n	792 <adc_init+0x26>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     a5a:	4642      	mov	r2, r8
     a5c:	8493      	strh	r3, [r2, #36]	; 0x24
		if (config->correction.offset_correction > 2047 ||
     a5e:	8d32      	ldrh	r2, [r6, #40]	; 0x28
     a60:	2380      	movs	r3, #128	; 0x80
     a62:	011b      	lsls	r3, r3, #4
     a64:	18d3      	adds	r3, r2, r3
     a66:	4915      	ldr	r1, [pc, #84]	; (abc <adc_init+0x350>)
     a68:	b29b      	uxth	r3, r3
     a6a:	428b      	cmp	r3, r1
     a6c:	d900      	bls.n	a70 <adc_init+0x304>
     a6e:	e690      	b.n	792 <adc_init+0x26>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     a70:	4643      	mov	r3, r8
     a72:	84da      	strh	r2, [r3, #38]	; 0x26
			ADC_CALIB_BIAS_CAL(
     a74:	4b12      	ldr	r3, [pc, #72]	; (ac0 <adc_init+0x354>)
     a76:	681b      	ldr	r3, [r3, #0]
     a78:	015b      	lsls	r3, r3, #5
     a7a:	22e0      	movs	r2, #224	; 0xe0
     a7c:	00d2      	lsls	r2, r2, #3
     a7e:	4013      	ands	r3, r2
			ADC_CALIB_LINEARITY_CAL(
     a80:	4a10      	ldr	r2, [pc, #64]	; (ac4 <adc_init+0x358>)
     a82:	6851      	ldr	r1, [r2, #4]
     a84:	0149      	lsls	r1, r1, #5
     a86:	6812      	ldr	r2, [r2, #0]
     a88:	0ed2      	lsrs	r2, r2, #27
     a8a:	430a      	orrs	r2, r1
     a8c:	b2d2      	uxtb	r2, r2
			) |
     a8e:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
     a90:	4642      	mov	r2, r8
     a92:	8513      	strh	r3, [r2, #40]	; 0x28
	return STATUS_OK;
     a94:	2000      	movs	r0, #0
     a96:	e67c      	b.n	792 <adc_init+0x26>
     a98:	40000400 	.word	0x40000400
     a9c:	40000800 	.word	0x40000800
     aa0:	200002b8 	.word	0x200002b8
     aa4:	00001ced 	.word	0x00001ced
     aa8:	00001c61 	.word	0x00001c61
     aac:	000037b5 	.word	0x000037b5
     ab0:	00004e18 	.word	0x00004e18
     ab4:	00001de5 	.word	0x00001de5
     ab8:	00004d44 	.word	0x00004d44
     abc:	00000fff 	.word	0x00000fff
     ac0:	00806024 	.word	0x00806024
     ac4:	00806020 	.word	0x00806020
		switch (resolution) {
     ac8:	2c00      	cmp	r4, #0
     aca:	d000      	beq.n	ace <adc_init+0x362>
     acc:	e77f      	b.n	9ce <adc_init+0x262>
			if (config->differential_mode &&
     ace:	7cf2      	ldrb	r2, [r6, #19]
     ad0:	2a00      	cmp	r2, #0
     ad2:	d00f      	beq.n	af4 <adc_init+0x388>
					(config->window.window_lower_value > 2047 ||
     ad4:	69f2      	ldr	r2, [r6, #28]
     ad6:	2180      	movs	r1, #128	; 0x80
     ad8:	0109      	lsls	r1, r1, #4
     ada:	468c      	mov	ip, r1
     adc:	4462      	add	r2, ip
			if (config->differential_mode &&
     ade:	492a      	ldr	r1, [pc, #168]	; (b88 <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
     ae0:	2017      	movs	r0, #23
			if (config->differential_mode &&
     ae2:	428a      	cmp	r2, r1
     ae4:	d900      	bls.n	ae8 <adc_init+0x37c>
     ae6:	e654      	b.n	792 <adc_init+0x26>
					config->window.window_lower_value < -2048 ||
     ae8:	6a32      	ldr	r2, [r6, #32]
     aea:	4462      	add	r2, ip
     aec:	4926      	ldr	r1, [pc, #152]	; (b88 <adc_init+0x41c>)
     aee:	428a      	cmp	r2, r1
     af0:	d900      	bls.n	af4 <adc_init+0x388>
     af2:	e64e      	b.n	792 <adc_init+0x26>
			} else if (config->window.window_lower_value > 4095 ||
     af4:	4a24      	ldr	r2, [pc, #144]	; (b88 <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
     af6:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
     af8:	69f1      	ldr	r1, [r6, #28]
     afa:	4291      	cmp	r1, r2
     afc:	dd00      	ble.n	b00 <adc_init+0x394>
     afe:	e648      	b.n	792 <adc_init+0x26>
     b00:	6a31      	ldr	r1, [r6, #32]
     b02:	4291      	cmp	r1, r2
     b04:	dd00      	ble.n	b08 <adc_init+0x39c>
     b06:	e644      	b.n	792 <adc_init+0x26>
     b08:	e761      	b.n	9ce <adc_init+0x262>
			if (config->differential_mode &&
     b0a:	7cf2      	ldrb	r2, [r6, #19]
     b0c:	2a00      	cmp	r2, #0
     b0e:	d00f      	beq.n	b30 <adc_init+0x3c4>
					(config->window.window_lower_value > 511 ||
     b10:	69f2      	ldr	r2, [r6, #28]
     b12:	2180      	movs	r1, #128	; 0x80
     b14:	0089      	lsls	r1, r1, #2
     b16:	468c      	mov	ip, r1
     b18:	4462      	add	r2, ip
			if (config->differential_mode &&
     b1a:	491c      	ldr	r1, [pc, #112]	; (b8c <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
     b1c:	2017      	movs	r0, #23
			if (config->differential_mode &&
     b1e:	428a      	cmp	r2, r1
     b20:	d900      	bls.n	b24 <adc_init+0x3b8>
     b22:	e636      	b.n	792 <adc_init+0x26>
					config->window.window_lower_value < -512 ||
     b24:	6a32      	ldr	r2, [r6, #32]
     b26:	4462      	add	r2, ip
     b28:	4918      	ldr	r1, [pc, #96]	; (b8c <adc_init+0x420>)
     b2a:	428a      	cmp	r2, r1
     b2c:	d900      	bls.n	b30 <adc_init+0x3c4>
     b2e:	e630      	b.n	792 <adc_init+0x26>
			} else if (config->window.window_lower_value > 1023 ||
     b30:	4a16      	ldr	r2, [pc, #88]	; (b8c <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
     b32:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
     b34:	69f1      	ldr	r1, [r6, #28]
     b36:	4291      	cmp	r1, r2
     b38:	dd00      	ble.n	b3c <adc_init+0x3d0>
     b3a:	e62a      	b.n	792 <adc_init+0x26>
     b3c:	6a31      	ldr	r1, [r6, #32]
     b3e:	4291      	cmp	r1, r2
     b40:	dd00      	ble.n	b44 <adc_init+0x3d8>
     b42:	e626      	b.n	792 <adc_init+0x26>
     b44:	e743      	b.n	9ce <adc_init+0x262>
			if (config->differential_mode &&
     b46:	7cf2      	ldrb	r2, [r6, #19]
     b48:	2a00      	cmp	r2, #0
     b4a:	d00f      	beq.n	b6c <adc_init+0x400>
					(config->window.window_lower_value > 32767 ||
     b4c:	69f2      	ldr	r2, [r6, #28]
     b4e:	2180      	movs	r1, #128	; 0x80
     b50:	0209      	lsls	r1, r1, #8
     b52:	468c      	mov	ip, r1
     b54:	4462      	add	r2, ip
			if (config->differential_mode &&
     b56:	490e      	ldr	r1, [pc, #56]	; (b90 <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
     b58:	2017      	movs	r0, #23
			if (config->differential_mode &&
     b5a:	428a      	cmp	r2, r1
     b5c:	d900      	bls.n	b60 <adc_init+0x3f4>
     b5e:	e618      	b.n	792 <adc_init+0x26>
					config->window.window_lower_value < -32768 ||
     b60:	6a32      	ldr	r2, [r6, #32]
     b62:	4462      	add	r2, ip
     b64:	490a      	ldr	r1, [pc, #40]	; (b90 <adc_init+0x424>)
     b66:	428a      	cmp	r2, r1
     b68:	d900      	bls.n	b6c <adc_init+0x400>
     b6a:	e612      	b.n	792 <adc_init+0x26>
			} else if (config->window.window_lower_value > 65535 ||
     b6c:	4a08      	ldr	r2, [pc, #32]	; (b90 <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
     b6e:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
     b70:	69f1      	ldr	r1, [r6, #28]
     b72:	4291      	cmp	r1, r2
     b74:	dd00      	ble.n	b78 <adc_init+0x40c>
     b76:	e60c      	b.n	792 <adc_init+0x26>
     b78:	6a31      	ldr	r1, [r6, #32]
     b7a:	4291      	cmp	r1, r2
     b7c:	dd00      	ble.n	b80 <adc_init+0x414>
     b7e:	e608      	b.n	792 <adc_init+0x26>
     b80:	e725      	b.n	9ce <adc_init+0x262>
		return STATUS_ERR_INVALID_ARG;
     b82:	2017      	movs	r0, #23
     b84:	e605      	b.n	792 <adc_init+0x26>
     b86:	46c0      	nop			; (mov r8, r8)
     b88:	00000fff 	.word	0x00000fff
     b8c:	000003ff 	.word	0x000003ff
     b90:	0000ffff 	.word	0x0000ffff

00000b94 <ADC_Handler>:
	}
}

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
     b94:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
     b96:	4b2f      	ldr	r3, [pc, #188]	; (c54 <ADC_Handler+0xc0>)
     b98:	681d      	ldr	r5, [r3, #0]
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
     b9a:	682b      	ldr	r3, [r5, #0]
     b9c:	7e1a      	ldrb	r2, [r3, #24]
     b9e:	7ddc      	ldrb	r4, [r3, #23]
     ba0:	4014      	ands	r4, r2
	if (flags & ADC_INTFLAG_RESRDY) {
     ba2:	07e2      	lsls	r2, r4, #31
     ba4:	d416      	bmi.n	bd4 <ADC_Handler+0x40>
	if (flags & ADC_INTFLAG_WINMON) {
     ba6:	0763      	lsls	r3, r4, #29
     ba8:	d508      	bpl.n	bbc <ADC_Handler+0x28>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     baa:	2304      	movs	r3, #4
     bac:	682a      	ldr	r2, [r5, #0]
     bae:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     bb0:	7eeb      	ldrb	r3, [r5, #27]
     bb2:	079b      	lsls	r3, r3, #30
     bb4:	d502      	bpl.n	bbc <ADC_Handler+0x28>
     bb6:	7eab      	ldrb	r3, [r5, #26]
     bb8:	079b      	lsls	r3, r3, #30
     bba:	d442      	bmi.n	c42 <ADC_Handler+0xae>
	if (flags & ADC_INTFLAG_OVERRUN) {
     bbc:	07a3      	lsls	r3, r4, #30
     bbe:	d508      	bpl.n	bd2 <ADC_Handler+0x3e>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     bc0:	2302      	movs	r3, #2
     bc2:	682a      	ldr	r2, [r5, #0]
     bc4:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     bc6:	7eeb      	ldrb	r3, [r5, #27]
     bc8:	075b      	lsls	r3, r3, #29
     bca:	d502      	bpl.n	bd2 <ADC_Handler+0x3e>
     bcc:	7eab      	ldrb	r3, [r5, #26]
     bce:	075b      	lsls	r3, r3, #29
     bd0:	d43b      	bmi.n	c4a <ADC_Handler+0xb6>
	_adc_interrupt_handler(0);
}
     bd2:	bd70      	pop	{r4, r5, r6, pc}
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     bd4:	2201      	movs	r2, #1
     bd6:	761a      	strb	r2, [r3, #24]
	Adc *const adc_module = module_inst->hw;
     bd8:	682a      	ldr	r2, [r5, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     bda:	7e53      	ldrb	r3, [r2, #25]
		while (adc_is_syncing(module)) {
     bdc:	b25b      	sxtb	r3, r3
     bde:	2b00      	cmp	r3, #0
     be0:	dbfb      	blt.n	bda <ADC_Handler+0x46>
		*(module->job_buffer++) = module->hw->RESULT.reg;
     be2:	6969      	ldr	r1, [r5, #20]
     be4:	1c8b      	adds	r3, r1, #2
     be6:	616b      	str	r3, [r5, #20]
     be8:	8b53      	ldrh	r3, [r2, #26]
     bea:	b29b      	uxth	r3, r3
     bec:	800b      	strh	r3, [r1, #0]
		if (--module->remaining_conversions > 0) {
     bee:	8b2b      	ldrh	r3, [r5, #24]
     bf0:	3b01      	subs	r3, #1
     bf2:	b29b      	uxth	r3, r3
     bf4:	832b      	strh	r3, [r5, #24]
     bf6:	2b00      	cmp	r3, #0
     bf8:	d011      	beq.n	c1e <ADC_Handler+0x8a>
			if (module->software_trigger == true) {
     bfa:	7f6b      	ldrb	r3, [r5, #29]
     bfc:	2b00      	cmp	r3, #0
     bfe:	d0d2      	beq.n	ba6 <ADC_Handler+0x12>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     c00:	682a      	ldr	r2, [r5, #0]
     c02:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     c04:	b25b      	sxtb	r3, r3
     c06:	2b00      	cmp	r3, #0
     c08:	dbfb      	blt.n	c02 <ADC_Handler+0x6e>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     c0a:	7b13      	ldrb	r3, [r2, #12]
     c0c:	2102      	movs	r1, #2
     c0e:	430b      	orrs	r3, r1
     c10:	7313      	strb	r3, [r2, #12]
	Adc *const adc_module = module_inst->hw;
     c12:	682a      	ldr	r2, [r5, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     c14:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     c16:	b25b      	sxtb	r3, r3
     c18:	2b00      	cmp	r3, #0
     c1a:	dbfb      	blt.n	c14 <ADC_Handler+0x80>
     c1c:	e7c3      	b.n	ba6 <ADC_Handler+0x12>
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     c1e:	2301      	movs	r3, #1
     c20:	682a      	ldr	r2, [r5, #0]
     c22:	7593      	strb	r3, [r2, #22]
			if (module->job_status == STATUS_BUSY) {
     c24:	7f2b      	ldrb	r3, [r5, #28]
     c26:	2b05      	cmp	r3, #5
     c28:	d1bd      	bne.n	ba6 <ADC_Handler+0x12>
				module->job_status = STATUS_OK;
     c2a:	2300      	movs	r3, #0
     c2c:	772b      	strb	r3, [r5, #28]
				if ((module->enabled_callback_mask &
     c2e:	7eeb      	ldrb	r3, [r5, #27]
     c30:	07db      	lsls	r3, r3, #31
     c32:	d5b8      	bpl.n	ba6 <ADC_Handler+0x12>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
     c34:	7eab      	ldrb	r3, [r5, #26]
     c36:	07db      	lsls	r3, r3, #31
     c38:	d5b5      	bpl.n	ba6 <ADC_Handler+0x12>
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     c3a:	0028      	movs	r0, r5
     c3c:	68ab      	ldr	r3, [r5, #8]
     c3e:	4798      	blx	r3
     c40:	e7b1      	b.n	ba6 <ADC_Handler+0x12>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     c42:	0028      	movs	r0, r5
     c44:	68eb      	ldr	r3, [r5, #12]
     c46:	4798      	blx	r3
     c48:	e7b8      	b.n	bbc <ADC_Handler+0x28>
			(module->callback[ADC_CALLBACK_ERROR])(module);
     c4a:	692b      	ldr	r3, [r5, #16]
     c4c:	0028      	movs	r0, r5
     c4e:	4798      	blx	r3
}
     c50:	e7bf      	b.n	bd2 <ADC_Handler+0x3e>
     c52:	46c0      	nop			; (mov r8, r8)
     c54:	200002b8 	.word	0x200002b8

00000c58 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     c58:	b500      	push	{lr}
     c5a:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     c5c:	ab01      	add	r3, sp, #4
     c5e:	2280      	movs	r2, #128	; 0x80
     c60:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     c62:	780a      	ldrb	r2, [r1, #0]
     c64:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     c66:	784a      	ldrb	r2, [r1, #1]
     c68:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     c6a:	788a      	ldrb	r2, [r1, #2]
     c6c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     c6e:	0019      	movs	r1, r3
     c70:	4b01      	ldr	r3, [pc, #4]	; (c78 <port_pin_set_config+0x20>)
     c72:	4798      	blx	r3
}
     c74:	b003      	add	sp, #12
     c76:	bd00      	pop	{pc}
     c78:	00001de5 	.word	0x00001de5

00000c7c <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
     c7e:	46de      	mov	lr, fp
     c80:	4657      	mov	r7, sl
     c82:	464e      	mov	r6, r9
     c84:	4645      	mov	r5, r8
     c86:	b5e0      	push	{r5, r6, r7, lr}
     c88:	b087      	sub	sp, #28
     c8a:	4680      	mov	r8, r0
     c8c:	9104      	str	r1, [sp, #16]
     c8e:	0016      	movs	r6, r2
     c90:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     c92:	2200      	movs	r2, #0
     c94:	2300      	movs	r3, #0
     c96:	2100      	movs	r1, #0
     c98:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     c9a:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     c9c:	2001      	movs	r0, #1
     c9e:	0021      	movs	r1, r4
     ca0:	9600      	str	r6, [sp, #0]
     ca2:	9701      	str	r7, [sp, #4]
     ca4:	465c      	mov	r4, fp
     ca6:	9403      	str	r4, [sp, #12]
     ca8:	4644      	mov	r4, r8
     caa:	9405      	str	r4, [sp, #20]
     cac:	e013      	b.n	cd6 <long_division+0x5a>
     cae:	2420      	movs	r4, #32
     cb0:	1a64      	subs	r4, r4, r1
     cb2:	0005      	movs	r5, r0
     cb4:	40e5      	lsrs	r5, r4
     cb6:	46a8      	mov	r8, r5
     cb8:	e014      	b.n	ce4 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     cba:	9c00      	ldr	r4, [sp, #0]
     cbc:	9d01      	ldr	r5, [sp, #4]
     cbe:	1b12      	subs	r2, r2, r4
     cc0:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     cc2:	465c      	mov	r4, fp
     cc4:	464d      	mov	r5, r9
     cc6:	432c      	orrs	r4, r5
     cc8:	46a3      	mov	fp, r4
     cca:	9c03      	ldr	r4, [sp, #12]
     ccc:	4645      	mov	r5, r8
     cce:	432c      	orrs	r4, r5
     cd0:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     cd2:	3901      	subs	r1, #1
     cd4:	d325      	bcc.n	d22 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     cd6:	2420      	movs	r4, #32
     cd8:	4264      	negs	r4, r4
     cda:	190c      	adds	r4, r1, r4
     cdc:	d4e7      	bmi.n	cae <long_division+0x32>
     cde:	0005      	movs	r5, r0
     ce0:	40a5      	lsls	r5, r4
     ce2:	46a8      	mov	r8, r5
     ce4:	0004      	movs	r4, r0
     ce6:	408c      	lsls	r4, r1
     ce8:	46a1      	mov	r9, r4
		r = r << 1;
     cea:	1892      	adds	r2, r2, r2
     cec:	415b      	adcs	r3, r3
     cee:	0014      	movs	r4, r2
     cf0:	001d      	movs	r5, r3
		if (n & bit_shift) {
     cf2:	9e05      	ldr	r6, [sp, #20]
     cf4:	464f      	mov	r7, r9
     cf6:	403e      	ands	r6, r7
     cf8:	46b4      	mov	ip, r6
     cfa:	9e04      	ldr	r6, [sp, #16]
     cfc:	4647      	mov	r7, r8
     cfe:	403e      	ands	r6, r7
     d00:	46b2      	mov	sl, r6
     d02:	4666      	mov	r6, ip
     d04:	4657      	mov	r7, sl
     d06:	433e      	orrs	r6, r7
     d08:	d003      	beq.n	d12 <long_division+0x96>
			r |= 0x01;
     d0a:	0006      	movs	r6, r0
     d0c:	4326      	orrs	r6, r4
     d0e:	0032      	movs	r2, r6
     d10:	002b      	movs	r3, r5
		if (r >= d) {
     d12:	9c00      	ldr	r4, [sp, #0]
     d14:	9d01      	ldr	r5, [sp, #4]
     d16:	429d      	cmp	r5, r3
     d18:	d8db      	bhi.n	cd2 <long_division+0x56>
     d1a:	d1ce      	bne.n	cba <long_division+0x3e>
     d1c:	4294      	cmp	r4, r2
     d1e:	d8d8      	bhi.n	cd2 <long_division+0x56>
     d20:	e7cb      	b.n	cba <long_division+0x3e>
     d22:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     d24:	4658      	mov	r0, fp
     d26:	0019      	movs	r1, r3
     d28:	b007      	add	sp, #28
     d2a:	bc3c      	pop	{r2, r3, r4, r5}
     d2c:	4690      	mov	r8, r2
     d2e:	4699      	mov	r9, r3
     d30:	46a2      	mov	sl, r4
     d32:	46ab      	mov	fp, r5
     d34:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000d36 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     d36:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     d38:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     d3a:	2340      	movs	r3, #64	; 0x40
     d3c:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     d3e:	4281      	cmp	r1, r0
     d40:	d202      	bcs.n	d48 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     d42:	0018      	movs	r0, r3
     d44:	bd10      	pop	{r4, pc}
		baud_calculated++;
     d46:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     d48:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     d4a:	1c63      	adds	r3, r4, #1
     d4c:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     d4e:	4288      	cmp	r0, r1
     d50:	d9f9      	bls.n	d46 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     d52:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     d54:	2cff      	cmp	r4, #255	; 0xff
     d56:	d8f4      	bhi.n	d42 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     d58:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     d5a:	2300      	movs	r3, #0
     d5c:	e7f1      	b.n	d42 <_sercom_get_sync_baud_val+0xc>
	...

00000d60 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     d60:	b5f0      	push	{r4, r5, r6, r7, lr}
     d62:	b083      	sub	sp, #12
     d64:	000f      	movs	r7, r1
     d66:	0016      	movs	r6, r2
     d68:	aa08      	add	r2, sp, #32
     d6a:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     d6c:	0004      	movs	r4, r0
     d6e:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     d70:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     d72:	42bc      	cmp	r4, r7
     d74:	d902      	bls.n	d7c <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     d76:	0010      	movs	r0, r2
     d78:	b003      	add	sp, #12
     d7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     d7c:	2b00      	cmp	r3, #0
     d7e:	d114      	bne.n	daa <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     d80:	0002      	movs	r2, r0
     d82:	0008      	movs	r0, r1
     d84:	2100      	movs	r1, #0
     d86:	4c19      	ldr	r4, [pc, #100]	; (dec <_sercom_get_async_baud_val+0x8c>)
     d88:	47a0      	blx	r4
     d8a:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     d8c:	003a      	movs	r2, r7
     d8e:	2300      	movs	r3, #0
     d90:	2000      	movs	r0, #0
     d92:	4c17      	ldr	r4, [pc, #92]	; (df0 <_sercom_get_async_baud_val+0x90>)
     d94:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     d96:	2200      	movs	r2, #0
     d98:	2301      	movs	r3, #1
     d9a:	1a12      	subs	r2, r2, r0
     d9c:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     d9e:	0c12      	lsrs	r2, r2, #16
     da0:	041b      	lsls	r3, r3, #16
     da2:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     da4:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     da6:	2200      	movs	r2, #0
     da8:	e7e5      	b.n	d76 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     daa:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     dac:	2b01      	cmp	r3, #1
     dae:	d1f9      	bne.n	da4 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     db0:	000a      	movs	r2, r1
     db2:	2300      	movs	r3, #0
     db4:	2100      	movs	r1, #0
     db6:	4c0d      	ldr	r4, [pc, #52]	; (dec <_sercom_get_async_baud_val+0x8c>)
     db8:	47a0      	blx	r4
     dba:	0002      	movs	r2, r0
     dbc:	000b      	movs	r3, r1
     dbe:	9200      	str	r2, [sp, #0]
     dc0:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     dc2:	0038      	movs	r0, r7
     dc4:	2100      	movs	r1, #0
     dc6:	4c0a      	ldr	r4, [pc, #40]	; (df0 <_sercom_get_async_baud_val+0x90>)
     dc8:	47a0      	blx	r4
     dca:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     dcc:	2380      	movs	r3, #128	; 0x80
     dce:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     dd0:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     dd2:	4298      	cmp	r0, r3
     dd4:	d8cf      	bhi.n	d76 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     dd6:	0f79      	lsrs	r1, r7, #29
     dd8:	00f8      	lsls	r0, r7, #3
     dda:	9a00      	ldr	r2, [sp, #0]
     ddc:	9b01      	ldr	r3, [sp, #4]
     dde:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     de0:	00ea      	lsls	r2, r5, #3
     de2:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     de4:	b2d2      	uxtb	r2, r2
     de6:	0352      	lsls	r2, r2, #13
     de8:	432a      	orrs	r2, r5
     dea:	e7db      	b.n	da4 <_sercom_get_async_baud_val+0x44>
     dec:	00003705 	.word	0x00003705
     df0:	00000c7d 	.word	0x00000c7d

00000df4 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     df4:	b510      	push	{r4, lr}
     df6:	b082      	sub	sp, #8
     df8:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     dfa:	4b0e      	ldr	r3, [pc, #56]	; (e34 <sercom_set_gclk_generator+0x40>)
     dfc:	781b      	ldrb	r3, [r3, #0]
     dfe:	2b00      	cmp	r3, #0
     e00:	d007      	beq.n	e12 <sercom_set_gclk_generator+0x1e>
     e02:	2900      	cmp	r1, #0
     e04:	d105      	bne.n	e12 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     e06:	4b0b      	ldr	r3, [pc, #44]	; (e34 <sercom_set_gclk_generator+0x40>)
     e08:	785b      	ldrb	r3, [r3, #1]
     e0a:	4283      	cmp	r3, r0
     e0c:	d010      	beq.n	e30 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     e0e:	201d      	movs	r0, #29
     e10:	e00c      	b.n	e2c <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     e12:	a901      	add	r1, sp, #4
     e14:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     e16:	2013      	movs	r0, #19
     e18:	4b07      	ldr	r3, [pc, #28]	; (e38 <sercom_set_gclk_generator+0x44>)
     e1a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     e1c:	2013      	movs	r0, #19
     e1e:	4b07      	ldr	r3, [pc, #28]	; (e3c <sercom_set_gclk_generator+0x48>)
     e20:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     e22:	4b04      	ldr	r3, [pc, #16]	; (e34 <sercom_set_gclk_generator+0x40>)
     e24:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     e26:	2201      	movs	r2, #1
     e28:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     e2a:	2000      	movs	r0, #0
}
     e2c:	b002      	add	sp, #8
     e2e:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     e30:	2000      	movs	r0, #0
     e32:	e7fb      	b.n	e2c <sercom_set_gclk_generator+0x38>
     e34:	20000264 	.word	0x20000264
     e38:	00001ced 	.word	0x00001ced
     e3c:	00001c61 	.word	0x00001c61

00000e40 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     e40:	4b40      	ldr	r3, [pc, #256]	; (f44 <_sercom_get_default_pad+0x104>)
     e42:	4298      	cmp	r0, r3
     e44:	d031      	beq.n	eaa <_sercom_get_default_pad+0x6a>
     e46:	d90a      	bls.n	e5e <_sercom_get_default_pad+0x1e>
     e48:	4b3f      	ldr	r3, [pc, #252]	; (f48 <_sercom_get_default_pad+0x108>)
     e4a:	4298      	cmp	r0, r3
     e4c:	d04d      	beq.n	eea <_sercom_get_default_pad+0xaa>
     e4e:	4b3f      	ldr	r3, [pc, #252]	; (f4c <_sercom_get_default_pad+0x10c>)
     e50:	4298      	cmp	r0, r3
     e52:	d05a      	beq.n	f0a <_sercom_get_default_pad+0xca>
     e54:	4b3e      	ldr	r3, [pc, #248]	; (f50 <_sercom_get_default_pad+0x110>)
     e56:	4298      	cmp	r0, r3
     e58:	d037      	beq.n	eca <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     e5a:	2000      	movs	r0, #0
}
     e5c:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     e5e:	4b3d      	ldr	r3, [pc, #244]	; (f54 <_sercom_get_default_pad+0x114>)
     e60:	4298      	cmp	r0, r3
     e62:	d00c      	beq.n	e7e <_sercom_get_default_pad+0x3e>
     e64:	4b3c      	ldr	r3, [pc, #240]	; (f58 <_sercom_get_default_pad+0x118>)
     e66:	4298      	cmp	r0, r3
     e68:	d1f7      	bne.n	e5a <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     e6a:	2901      	cmp	r1, #1
     e6c:	d017      	beq.n	e9e <_sercom_get_default_pad+0x5e>
     e6e:	2900      	cmp	r1, #0
     e70:	d05d      	beq.n	f2e <_sercom_get_default_pad+0xee>
     e72:	2902      	cmp	r1, #2
     e74:	d015      	beq.n	ea2 <_sercom_get_default_pad+0x62>
     e76:	2903      	cmp	r1, #3
     e78:	d015      	beq.n	ea6 <_sercom_get_default_pad+0x66>
	return 0;
     e7a:	2000      	movs	r0, #0
     e7c:	e7ee      	b.n	e5c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     e7e:	2901      	cmp	r1, #1
     e80:	d007      	beq.n	e92 <_sercom_get_default_pad+0x52>
     e82:	2900      	cmp	r1, #0
     e84:	d051      	beq.n	f2a <_sercom_get_default_pad+0xea>
     e86:	2902      	cmp	r1, #2
     e88:	d005      	beq.n	e96 <_sercom_get_default_pad+0x56>
     e8a:	2903      	cmp	r1, #3
     e8c:	d005      	beq.n	e9a <_sercom_get_default_pad+0x5a>
	return 0;
     e8e:	2000      	movs	r0, #0
     e90:	e7e4      	b.n	e5c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     e92:	4832      	ldr	r0, [pc, #200]	; (f5c <_sercom_get_default_pad+0x11c>)
     e94:	e7e2      	b.n	e5c <_sercom_get_default_pad+0x1c>
     e96:	4832      	ldr	r0, [pc, #200]	; (f60 <_sercom_get_default_pad+0x120>)
     e98:	e7e0      	b.n	e5c <_sercom_get_default_pad+0x1c>
     e9a:	4832      	ldr	r0, [pc, #200]	; (f64 <_sercom_get_default_pad+0x124>)
     e9c:	e7de      	b.n	e5c <_sercom_get_default_pad+0x1c>
     e9e:	4832      	ldr	r0, [pc, #200]	; (f68 <_sercom_get_default_pad+0x128>)
     ea0:	e7dc      	b.n	e5c <_sercom_get_default_pad+0x1c>
     ea2:	4832      	ldr	r0, [pc, #200]	; (f6c <_sercom_get_default_pad+0x12c>)
     ea4:	e7da      	b.n	e5c <_sercom_get_default_pad+0x1c>
     ea6:	4832      	ldr	r0, [pc, #200]	; (f70 <_sercom_get_default_pad+0x130>)
     ea8:	e7d8      	b.n	e5c <_sercom_get_default_pad+0x1c>
     eaa:	2901      	cmp	r1, #1
     eac:	d007      	beq.n	ebe <_sercom_get_default_pad+0x7e>
     eae:	2900      	cmp	r1, #0
     eb0:	d03f      	beq.n	f32 <_sercom_get_default_pad+0xf2>
     eb2:	2902      	cmp	r1, #2
     eb4:	d005      	beq.n	ec2 <_sercom_get_default_pad+0x82>
     eb6:	2903      	cmp	r1, #3
     eb8:	d005      	beq.n	ec6 <_sercom_get_default_pad+0x86>
	return 0;
     eba:	2000      	movs	r0, #0
     ebc:	e7ce      	b.n	e5c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     ebe:	482d      	ldr	r0, [pc, #180]	; (f74 <_sercom_get_default_pad+0x134>)
     ec0:	e7cc      	b.n	e5c <_sercom_get_default_pad+0x1c>
     ec2:	482d      	ldr	r0, [pc, #180]	; (f78 <_sercom_get_default_pad+0x138>)
     ec4:	e7ca      	b.n	e5c <_sercom_get_default_pad+0x1c>
     ec6:	482d      	ldr	r0, [pc, #180]	; (f7c <_sercom_get_default_pad+0x13c>)
     ec8:	e7c8      	b.n	e5c <_sercom_get_default_pad+0x1c>
     eca:	2901      	cmp	r1, #1
     ecc:	d007      	beq.n	ede <_sercom_get_default_pad+0x9e>
     ece:	2900      	cmp	r1, #0
     ed0:	d031      	beq.n	f36 <_sercom_get_default_pad+0xf6>
     ed2:	2902      	cmp	r1, #2
     ed4:	d005      	beq.n	ee2 <_sercom_get_default_pad+0xa2>
     ed6:	2903      	cmp	r1, #3
     ed8:	d005      	beq.n	ee6 <_sercom_get_default_pad+0xa6>
	return 0;
     eda:	2000      	movs	r0, #0
     edc:	e7be      	b.n	e5c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     ede:	4828      	ldr	r0, [pc, #160]	; (f80 <_sercom_get_default_pad+0x140>)
     ee0:	e7bc      	b.n	e5c <_sercom_get_default_pad+0x1c>
     ee2:	4828      	ldr	r0, [pc, #160]	; (f84 <_sercom_get_default_pad+0x144>)
     ee4:	e7ba      	b.n	e5c <_sercom_get_default_pad+0x1c>
     ee6:	4828      	ldr	r0, [pc, #160]	; (f88 <_sercom_get_default_pad+0x148>)
     ee8:	e7b8      	b.n	e5c <_sercom_get_default_pad+0x1c>
     eea:	2901      	cmp	r1, #1
     eec:	d007      	beq.n	efe <_sercom_get_default_pad+0xbe>
     eee:	2900      	cmp	r1, #0
     ef0:	d023      	beq.n	f3a <_sercom_get_default_pad+0xfa>
     ef2:	2902      	cmp	r1, #2
     ef4:	d005      	beq.n	f02 <_sercom_get_default_pad+0xc2>
     ef6:	2903      	cmp	r1, #3
     ef8:	d005      	beq.n	f06 <_sercom_get_default_pad+0xc6>
	return 0;
     efa:	2000      	movs	r0, #0
     efc:	e7ae      	b.n	e5c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     efe:	4823      	ldr	r0, [pc, #140]	; (f8c <_sercom_get_default_pad+0x14c>)
     f00:	e7ac      	b.n	e5c <_sercom_get_default_pad+0x1c>
     f02:	4823      	ldr	r0, [pc, #140]	; (f90 <_sercom_get_default_pad+0x150>)
     f04:	e7aa      	b.n	e5c <_sercom_get_default_pad+0x1c>
     f06:	4823      	ldr	r0, [pc, #140]	; (f94 <_sercom_get_default_pad+0x154>)
     f08:	e7a8      	b.n	e5c <_sercom_get_default_pad+0x1c>
     f0a:	2901      	cmp	r1, #1
     f0c:	d007      	beq.n	f1e <_sercom_get_default_pad+0xde>
     f0e:	2900      	cmp	r1, #0
     f10:	d015      	beq.n	f3e <_sercom_get_default_pad+0xfe>
     f12:	2902      	cmp	r1, #2
     f14:	d005      	beq.n	f22 <_sercom_get_default_pad+0xe2>
     f16:	2903      	cmp	r1, #3
     f18:	d005      	beq.n	f26 <_sercom_get_default_pad+0xe6>
	return 0;
     f1a:	2000      	movs	r0, #0
     f1c:	e79e      	b.n	e5c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     f1e:	481e      	ldr	r0, [pc, #120]	; (f98 <_sercom_get_default_pad+0x158>)
     f20:	e79c      	b.n	e5c <_sercom_get_default_pad+0x1c>
     f22:	481e      	ldr	r0, [pc, #120]	; (f9c <_sercom_get_default_pad+0x15c>)
     f24:	e79a      	b.n	e5c <_sercom_get_default_pad+0x1c>
     f26:	481e      	ldr	r0, [pc, #120]	; (fa0 <_sercom_get_default_pad+0x160>)
     f28:	e798      	b.n	e5c <_sercom_get_default_pad+0x1c>
     f2a:	481e      	ldr	r0, [pc, #120]	; (fa4 <_sercom_get_default_pad+0x164>)
     f2c:	e796      	b.n	e5c <_sercom_get_default_pad+0x1c>
     f2e:	2003      	movs	r0, #3
     f30:	e794      	b.n	e5c <_sercom_get_default_pad+0x1c>
     f32:	481d      	ldr	r0, [pc, #116]	; (fa8 <_sercom_get_default_pad+0x168>)
     f34:	e792      	b.n	e5c <_sercom_get_default_pad+0x1c>
     f36:	481d      	ldr	r0, [pc, #116]	; (fac <_sercom_get_default_pad+0x16c>)
     f38:	e790      	b.n	e5c <_sercom_get_default_pad+0x1c>
     f3a:	481d      	ldr	r0, [pc, #116]	; (fb0 <_sercom_get_default_pad+0x170>)
     f3c:	e78e      	b.n	e5c <_sercom_get_default_pad+0x1c>
     f3e:	481d      	ldr	r0, [pc, #116]	; (fb4 <_sercom_get_default_pad+0x174>)
     f40:	e78c      	b.n	e5c <_sercom_get_default_pad+0x1c>
     f42:	46c0      	nop			; (mov r8, r8)
     f44:	42001000 	.word	0x42001000
     f48:	42001800 	.word	0x42001800
     f4c:	42001c00 	.word	0x42001c00
     f50:	42001400 	.word	0x42001400
     f54:	42000800 	.word	0x42000800
     f58:	42000c00 	.word	0x42000c00
     f5c:	00050003 	.word	0x00050003
     f60:	00060003 	.word	0x00060003
     f64:	00070003 	.word	0x00070003
     f68:	00010003 	.word	0x00010003
     f6c:	001e0003 	.word	0x001e0003
     f70:	001f0003 	.word	0x001f0003
     f74:	00090003 	.word	0x00090003
     f78:	000a0003 	.word	0x000a0003
     f7c:	000b0003 	.word	0x000b0003
     f80:	00110003 	.word	0x00110003
     f84:	00120003 	.word	0x00120003
     f88:	00130003 	.word	0x00130003
     f8c:	000d0003 	.word	0x000d0003
     f90:	000e0003 	.word	0x000e0003
     f94:	000f0003 	.word	0x000f0003
     f98:	00170003 	.word	0x00170003
     f9c:	00180003 	.word	0x00180003
     fa0:	00190003 	.word	0x00190003
     fa4:	00040003 	.word	0x00040003
     fa8:	00080003 	.word	0x00080003
     fac:	00100003 	.word	0x00100003
     fb0:	000c0003 	.word	0x000c0003
     fb4:	00160003 	.word	0x00160003

00000fb8 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     fb8:	b530      	push	{r4, r5, lr}
     fba:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     fbc:	4b0b      	ldr	r3, [pc, #44]	; (fec <_sercom_get_sercom_inst_index+0x34>)
     fbe:	466a      	mov	r2, sp
     fc0:	cb32      	ldmia	r3!, {r1, r4, r5}
     fc2:	c232      	stmia	r2!, {r1, r4, r5}
     fc4:	cb32      	ldmia	r3!, {r1, r4, r5}
     fc6:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     fc8:	9b00      	ldr	r3, [sp, #0]
     fca:	4283      	cmp	r3, r0
     fcc:	d00b      	beq.n	fe6 <_sercom_get_sercom_inst_index+0x2e>
     fce:	2301      	movs	r3, #1
     fd0:	009a      	lsls	r2, r3, #2
     fd2:	4669      	mov	r1, sp
     fd4:	5852      	ldr	r2, [r2, r1]
     fd6:	4282      	cmp	r2, r0
     fd8:	d006      	beq.n	fe8 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     fda:	3301      	adds	r3, #1
     fdc:	2b06      	cmp	r3, #6
     fde:	d1f7      	bne.n	fd0 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     fe0:	2000      	movs	r0, #0
}
     fe2:	b007      	add	sp, #28
     fe4:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     fe6:	2300      	movs	r3, #0
			return i;
     fe8:	b2d8      	uxtb	r0, r3
     fea:	e7fa      	b.n	fe2 <_sercom_get_sercom_inst_index+0x2a>
     fec:	00004e68 	.word	0x00004e68

00000ff0 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     ff0:	4770      	bx	lr
	...

00000ff4 <_sercom_set_handler>:


void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
	// Initialize handlers with default handler and device instances with 0 
	if (_handler_table_initialized == false) {
     ff6:	4b0a      	ldr	r3, [pc, #40]	; (1020 <_sercom_set_handler+0x2c>)
     ff8:	781b      	ldrb	r3, [r3, #0]
     ffa:	2b00      	cmp	r3, #0
     ffc:	d10c      	bne.n	1018 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     ffe:	4f09      	ldr	r7, [pc, #36]	; (1024 <_sercom_set_handler+0x30>)
    1000:	4e09      	ldr	r6, [pc, #36]	; (1028 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    1002:	4d0a      	ldr	r5, [pc, #40]	; (102c <_sercom_set_handler+0x38>)
    1004:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1006:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    1008:	195a      	adds	r2, r3, r5
    100a:	6014      	str	r4, [r2, #0]
    100c:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    100e:	2b18      	cmp	r3, #24
    1010:	d1f9      	bne.n	1006 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    1012:	2201      	movs	r2, #1
    1014:	4b02      	ldr	r3, [pc, #8]	; (1020 <_sercom_set_handler+0x2c>)
    1016:	701a      	strb	r2, [r3, #0]
	}

	// Save interrupt handler 
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1018:	0080      	lsls	r0, r0, #2
    101a:	4b02      	ldr	r3, [pc, #8]	; (1024 <_sercom_set_handler+0x30>)
    101c:	50c1      	str	r1, [r0, r3]
}
    101e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1020:	20000266 	.word	0x20000266
    1024:	20000268 	.word	0x20000268
    1028:	00000ff1 	.word	0x00000ff1
    102c:	200002bc 	.word	0x200002bc

00001030 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1030:	b500      	push	{lr}
    1032:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    1034:	2309      	movs	r3, #9
    1036:	466a      	mov	r2, sp
    1038:	7013      	strb	r3, [r2, #0]
    103a:	3301      	adds	r3, #1
    103c:	7053      	strb	r3, [r2, #1]
    103e:	3301      	adds	r3, #1
    1040:	7093      	strb	r3, [r2, #2]
    1042:	3301      	adds	r3, #1
    1044:	70d3      	strb	r3, [r2, #3]
    1046:	3301      	adds	r3, #1
    1048:	7113      	strb	r3, [r2, #4]
    104a:	3301      	adds	r3, #1
    104c:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    104e:	4b03      	ldr	r3, [pc, #12]	; (105c <_sercom_get_interrupt_vector+0x2c>)
    1050:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    1052:	466b      	mov	r3, sp
    1054:	5618      	ldrsb	r0, [r3, r0]
}
    1056:	b003      	add	sp, #12
    1058:	bd00      	pop	{pc}
    105a:	46c0      	nop			; (mov r8, r8)
    105c:	00000fb9 	.word	0x00000fb9

00001060 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1060:	b510      	push	{r4, lr}
    1062:	4b02      	ldr	r3, [pc, #8]	; (106c <SERCOM0_Handler+0xc>)
    1064:	681b      	ldr	r3, [r3, #0]
    1066:	2000      	movs	r0, #0
    1068:	4798      	blx	r3
    106a:	bd10      	pop	{r4, pc}
    106c:	20000268 	.word	0x20000268

00001070 <SERCOM1_Handler>:
    1070:	b510      	push	{r4, lr}
    1072:	4b02      	ldr	r3, [pc, #8]	; (107c <SERCOM1_Handler+0xc>)
    1074:	685b      	ldr	r3, [r3, #4]
    1076:	2001      	movs	r0, #1
    1078:	4798      	blx	r3
    107a:	bd10      	pop	{r4, pc}
    107c:	20000268 	.word	0x20000268

00001080 <SERCOM2_Handler>:
    1080:	b510      	push	{r4, lr}
    1082:	4b02      	ldr	r3, [pc, #8]	; (108c <SERCOM2_Handler+0xc>)
    1084:	689b      	ldr	r3, [r3, #8]
    1086:	2002      	movs	r0, #2
    1088:	4798      	blx	r3
    108a:	bd10      	pop	{r4, pc}
    108c:	20000268 	.word	0x20000268

00001090 <SERCOM3_Handler>:
    1090:	b510      	push	{r4, lr}
    1092:	4b02      	ldr	r3, [pc, #8]	; (109c <SERCOM3_Handler+0xc>)
    1094:	68db      	ldr	r3, [r3, #12]
    1096:	2003      	movs	r0, #3
    1098:	4798      	blx	r3
    109a:	bd10      	pop	{r4, pc}
    109c:	20000268 	.word	0x20000268

000010a0 <SERCOM4_Handler>:
    10a0:	b510      	push	{r4, lr}
    10a2:	4b02      	ldr	r3, [pc, #8]	; (10ac <SERCOM4_Handler+0xc>)
    10a4:	691b      	ldr	r3, [r3, #16]
    10a6:	2004      	movs	r0, #4
    10a8:	4798      	blx	r3
    10aa:	bd10      	pop	{r4, pc}
    10ac:	20000268 	.word	0x20000268

000010b0 <SERCOM5_Handler>:
    10b0:	b510      	push	{r4, lr}
    10b2:	4b02      	ldr	r3, [pc, #8]	; (10bc <SERCOM5_Handler+0xc>)
    10b4:	695b      	ldr	r3, [r3, #20]
    10b6:	2005      	movs	r0, #5
    10b8:	4798      	blx	r3
    10ba:	bd10      	pop	{r4, pc}
    10bc:	20000268 	.word	0x20000268

000010c0 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    10c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    10c2:	46de      	mov	lr, fp
    10c4:	4657      	mov	r7, sl
    10c6:	464e      	mov	r6, r9
    10c8:	4645      	mov	r5, r8
    10ca:	b5e0      	push	{r5, r6, r7, lr}
    10cc:	b091      	sub	sp, #68	; 0x44
    10ce:	0005      	movs	r5, r0
    10d0:	000c      	movs	r4, r1
    10d2:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    10d4:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    10d6:	0008      	movs	r0, r1
    10d8:	4bba      	ldr	r3, [pc, #744]	; (13c4 <usart_init+0x304>)
    10da:	4798      	blx	r3
    10dc:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    10de:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    10e0:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    10e2:	07db      	lsls	r3, r3, #31
    10e4:	d506      	bpl.n	10f4 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    10e6:	b011      	add	sp, #68	; 0x44
    10e8:	bc3c      	pop	{r2, r3, r4, r5}
    10ea:	4690      	mov	r8, r2
    10ec:	4699      	mov	r9, r3
    10ee:	46a2      	mov	sl, r4
    10f0:	46ab      	mov	fp, r5
    10f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    10f4:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    10f6:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    10f8:	079b      	lsls	r3, r3, #30
    10fa:	d4f4      	bmi.n	10e6 <usart_init+0x26>
    10fc:	49b2      	ldr	r1, [pc, #712]	; (13c8 <usart_init+0x308>)
    10fe:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    1100:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1102:	2301      	movs	r3, #1
    1104:	40bb      	lsls	r3, r7
    1106:	4303      	orrs	r3, r0
    1108:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    110a:	a90f      	add	r1, sp, #60	; 0x3c
    110c:	272d      	movs	r7, #45	; 0x2d
    110e:	5df3      	ldrb	r3, [r6, r7]
    1110:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1112:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1114:	b2d3      	uxtb	r3, r2
    1116:	9302      	str	r3, [sp, #8]
    1118:	0018      	movs	r0, r3
    111a:	4bac      	ldr	r3, [pc, #688]	; (13cc <usart_init+0x30c>)
    111c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    111e:	9802      	ldr	r0, [sp, #8]
    1120:	4bab      	ldr	r3, [pc, #684]	; (13d0 <usart_init+0x310>)
    1122:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1124:	5df0      	ldrb	r0, [r6, r7]
    1126:	2100      	movs	r1, #0
    1128:	4baa      	ldr	r3, [pc, #680]	; (13d4 <usart_init+0x314>)
    112a:	4798      	blx	r3
	module->character_size = config->character_size;
    112c:	7af3      	ldrb	r3, [r6, #11]
    112e:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    1130:	2324      	movs	r3, #36	; 0x24
    1132:	5cf3      	ldrb	r3, [r6, r3]
    1134:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    1136:	2325      	movs	r3, #37	; 0x25
    1138:	5cf3      	ldrb	r3, [r6, r3]
    113a:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    113c:	7ef3      	ldrb	r3, [r6, #27]
    113e:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    1140:	7f33      	ldrb	r3, [r6, #28]
    1142:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1144:	682b      	ldr	r3, [r5, #0]
    1146:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1148:	0018      	movs	r0, r3
    114a:	4b9e      	ldr	r3, [pc, #632]	; (13c4 <usart_init+0x304>)
    114c:	4798      	blx	r3
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    114e:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    1150:	2200      	movs	r2, #0
    1152:	230e      	movs	r3, #14
    1154:	a906      	add	r1, sp, #24
    1156:	468c      	mov	ip, r1
    1158:	4463      	add	r3, ip
    115a:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    115c:	8a32      	ldrh	r2, [r6, #16]
    115e:	9202      	str	r2, [sp, #8]
    1160:	2380      	movs	r3, #128	; 0x80
    1162:	01db      	lsls	r3, r3, #7
    1164:	429a      	cmp	r2, r3
    1166:	d100      	bne.n	116a <usart_init+0xaa>
    1168:	e09a      	b.n	12a0 <usart_init+0x1e0>
    116a:	d90f      	bls.n	118c <usart_init+0xcc>
    116c:	23c0      	movs	r3, #192	; 0xc0
    116e:	01db      	lsls	r3, r3, #7
    1170:	9a02      	ldr	r2, [sp, #8]
    1172:	429a      	cmp	r2, r3
    1174:	d100      	bne.n	1178 <usart_init+0xb8>
    1176:	e08e      	b.n	1296 <usart_init+0x1d6>
    1178:	2380      	movs	r3, #128	; 0x80
    117a:	021b      	lsls	r3, r3, #8
    117c:	429a      	cmp	r2, r3
    117e:	d000      	beq.n	1182 <usart_init+0xc2>
    1180:	e11b      	b.n	13ba <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    1182:	2303      	movs	r3, #3
    1184:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1186:	2300      	movs	r3, #0
    1188:	9307      	str	r3, [sp, #28]
    118a:	e008      	b.n	119e <usart_init+0xde>
	switch (config->sample_rate) {
    118c:	2380      	movs	r3, #128	; 0x80
    118e:	019b      	lsls	r3, r3, #6
    1190:	429a      	cmp	r2, r3
    1192:	d000      	beq.n	1196 <usart_init+0xd6>
    1194:	e111      	b.n	13ba <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1196:	2310      	movs	r3, #16
    1198:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    119a:	3b0f      	subs	r3, #15
    119c:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    119e:	6833      	ldr	r3, [r6, #0]
    11a0:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    11a2:	68f3      	ldr	r3, [r6, #12]
    11a4:	469b      	mov	fp, r3
		config->sample_adjustment |
    11a6:	6973      	ldr	r3, [r6, #20]
    11a8:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    11aa:	7e33      	ldrb	r3, [r6, #24]
    11ac:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    11ae:	2326      	movs	r3, #38	; 0x26
    11b0:	5cf3      	ldrb	r3, [r6, r3]
    11b2:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    11b4:	6873      	ldr	r3, [r6, #4]
    11b6:	4699      	mov	r9, r3
	switch (transfer_mode)
    11b8:	2b00      	cmp	r3, #0
    11ba:	d100      	bne.n	11be <usart_init+0xfe>
    11bc:	e09c      	b.n	12f8 <usart_init+0x238>
    11be:	2380      	movs	r3, #128	; 0x80
    11c0:	055b      	lsls	r3, r3, #21
    11c2:	4599      	cmp	r9, r3
    11c4:	d100      	bne.n	11c8 <usart_init+0x108>
    11c6:	e080      	b.n	12ca <usart_init+0x20a>
	if(config->encoding_format_enable) {
    11c8:	7e73      	ldrb	r3, [r6, #25]
    11ca:	2b00      	cmp	r3, #0
    11cc:	d002      	beq.n	11d4 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    11ce:	7eb3      	ldrb	r3, [r6, #26]
    11d0:	4642      	mov	r2, r8
    11d2:	7393      	strb	r3, [r2, #14]
	usart_hw->BAUD.reg = baud;
    11d4:	230e      	movs	r3, #14
    11d6:	aa06      	add	r2, sp, #24
    11d8:	4694      	mov	ip, r2
    11da:	4463      	add	r3, ip
    11dc:	881b      	ldrh	r3, [r3, #0]
    11de:	4642      	mov	r2, r8
    11e0:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    11e2:	9b05      	ldr	r3, [sp, #20]
    11e4:	465a      	mov	r2, fp
    11e6:	4313      	orrs	r3, r2
    11e8:	9a03      	ldr	r2, [sp, #12]
    11ea:	4313      	orrs	r3, r2
    11ec:	464a      	mov	r2, r9
    11ee:	4313      	orrs	r3, r2
    11f0:	9f02      	ldr	r7, [sp, #8]
    11f2:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    11f4:	9b04      	ldr	r3, [sp, #16]
    11f6:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    11f8:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    11fa:	4653      	mov	r3, sl
    11fc:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    11fe:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    1200:	2327      	movs	r3, #39	; 0x27
    1202:	5cf3      	ldrb	r3, [r6, r3]
    1204:	2b00      	cmp	r3, #0
    1206:	d101      	bne.n	120c <usart_init+0x14c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    1208:	3304      	adds	r3, #4
    120a:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    120c:	7e73      	ldrb	r3, [r6, #25]
    120e:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1210:	7f32      	ldrb	r2, [r6, #28]
    1212:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1214:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1216:	7f72      	ldrb	r2, [r6, #29]
    1218:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    121a:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    121c:	2224      	movs	r2, #36	; 0x24
    121e:	5cb2      	ldrb	r2, [r6, r2]
    1220:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1222:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    1224:	2225      	movs	r2, #37	; 0x25
    1226:	5cb2      	ldrb	r2, [r6, r2]
    1228:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    122a:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    122c:	7ab1      	ldrb	r1, [r6, #10]
    122e:	7af2      	ldrb	r2, [r6, #11]
    1230:	4311      	orrs	r1, r2
    1232:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    1234:	8933      	ldrh	r3, [r6, #8]
    1236:	2bff      	cmp	r3, #255	; 0xff
    1238:	d100      	bne.n	123c <usart_init+0x17c>
    123a:	e081      	b.n	1340 <usart_init+0x280>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    123c:	2280      	movs	r2, #128	; 0x80
    123e:	0452      	lsls	r2, r2, #17
    1240:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    1242:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    1244:	232c      	movs	r3, #44	; 0x2c
    1246:	5cf3      	ldrb	r3, [r6, r3]
    1248:	2b00      	cmp	r3, #0
    124a:	d103      	bne.n	1254 <usart_init+0x194>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    124c:	4b62      	ldr	r3, [pc, #392]	; (13d8 <usart_init+0x318>)
    124e:	789b      	ldrb	r3, [r3, #2]
    1250:	079b      	lsls	r3, r3, #30
    1252:	d501      	bpl.n	1258 <usart_init+0x198>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    1254:	2380      	movs	r3, #128	; 0x80
    1256:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    1258:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    125a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    125c:	2b00      	cmp	r3, #0
    125e:	d1fc      	bne.n	125a <usart_init+0x19a>
	usart_hw->CTRLB.reg = ctrlb;
    1260:	4643      	mov	r3, r8
    1262:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1264:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1266:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1268:	2b00      	cmp	r3, #0
    126a:	d1fc      	bne.n	1266 <usart_init+0x1a6>
	usart_hw->CTRLA.reg = ctrla;
    126c:	4643      	mov	r3, r8
    126e:	601f      	str	r7, [r3, #0]
    1270:	ab0e      	add	r3, sp, #56	; 0x38
    1272:	2280      	movs	r2, #128	; 0x80
    1274:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1276:	2200      	movs	r2, #0
    1278:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    127a:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    127c:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    127e:	6b33      	ldr	r3, [r6, #48]	; 0x30
    1280:	930a      	str	r3, [sp, #40]	; 0x28
    1282:	6b73      	ldr	r3, [r6, #52]	; 0x34
    1284:	930b      	str	r3, [sp, #44]	; 0x2c
    1286:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    1288:	930c      	str	r3, [sp, #48]	; 0x30
    128a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    128c:	9302      	str	r3, [sp, #8]
    128e:	930d      	str	r3, [sp, #52]	; 0x34
    1290:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1292:	ae0a      	add	r6, sp, #40	; 0x28
    1294:	e063      	b.n	135e <usart_init+0x29e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1296:	2308      	movs	r3, #8
    1298:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    129a:	3b07      	subs	r3, #7
    129c:	9307      	str	r3, [sp, #28]
    129e:	e77e      	b.n	119e <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    12a0:	6833      	ldr	r3, [r6, #0]
    12a2:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    12a4:	68f3      	ldr	r3, [r6, #12]
    12a6:	469b      	mov	fp, r3
		config->sample_adjustment |
    12a8:	6973      	ldr	r3, [r6, #20]
    12aa:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    12ac:	7e33      	ldrb	r3, [r6, #24]
    12ae:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    12b0:	2326      	movs	r3, #38	; 0x26
    12b2:	5cf3      	ldrb	r3, [r6, r3]
    12b4:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    12b6:	6873      	ldr	r3, [r6, #4]
    12b8:	4699      	mov	r9, r3
	switch (transfer_mode)
    12ba:	2b00      	cmp	r3, #0
    12bc:	d018      	beq.n	12f0 <usart_init+0x230>
    12be:	2380      	movs	r3, #128	; 0x80
    12c0:	055b      	lsls	r3, r3, #21
    12c2:	4599      	cmp	r9, r3
    12c4:	d001      	beq.n	12ca <usart_init+0x20a>
	enum status_code status_code = STATUS_OK;
    12c6:	2000      	movs	r0, #0
    12c8:	e025      	b.n	1316 <usart_init+0x256>
			if (!config->use_external_clock) {
    12ca:	2327      	movs	r3, #39	; 0x27
    12cc:	5cf3      	ldrb	r3, [r6, r3]
    12ce:	2b00      	cmp	r3, #0
    12d0:	d000      	beq.n	12d4 <usart_init+0x214>
    12d2:	e779      	b.n	11c8 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    12d4:	6a33      	ldr	r3, [r6, #32]
    12d6:	001f      	movs	r7, r3
    12d8:	b2c0      	uxtb	r0, r0
    12da:	4b40      	ldr	r3, [pc, #256]	; (13dc <usart_init+0x31c>)
    12dc:	4798      	blx	r3
    12de:	0001      	movs	r1, r0
    12e0:	220e      	movs	r2, #14
    12e2:	ab06      	add	r3, sp, #24
    12e4:	469c      	mov	ip, r3
    12e6:	4462      	add	r2, ip
    12e8:	0038      	movs	r0, r7
    12ea:	4b3d      	ldr	r3, [pc, #244]	; (13e0 <usart_init+0x320>)
    12ec:	4798      	blx	r3
    12ee:	e012      	b.n	1316 <usart_init+0x256>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    12f0:	2308      	movs	r3, #8
    12f2:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    12f4:	2300      	movs	r3, #0
    12f6:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    12f8:	2327      	movs	r3, #39	; 0x27
    12fa:	5cf3      	ldrb	r3, [r6, r3]
    12fc:	2b00      	cmp	r3, #0
    12fe:	d00e      	beq.n	131e <usart_init+0x25e>
				status_code =
    1300:	9b06      	ldr	r3, [sp, #24]
    1302:	9300      	str	r3, [sp, #0]
    1304:	9b07      	ldr	r3, [sp, #28]
    1306:	220e      	movs	r2, #14
    1308:	a906      	add	r1, sp, #24
    130a:	468c      	mov	ip, r1
    130c:	4462      	add	r2, ip
    130e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    1310:	6a30      	ldr	r0, [r6, #32]
    1312:	4f34      	ldr	r7, [pc, #208]	; (13e4 <usart_init+0x324>)
    1314:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    1316:	2800      	cmp	r0, #0
    1318:	d000      	beq.n	131c <usart_init+0x25c>
    131a:	e6e4      	b.n	10e6 <usart_init+0x26>
    131c:	e754      	b.n	11c8 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    131e:	6a33      	ldr	r3, [r6, #32]
    1320:	001f      	movs	r7, r3
    1322:	b2c0      	uxtb	r0, r0
    1324:	4b2d      	ldr	r3, [pc, #180]	; (13dc <usart_init+0x31c>)
    1326:	4798      	blx	r3
    1328:	0001      	movs	r1, r0
				status_code =
    132a:	9b06      	ldr	r3, [sp, #24]
    132c:	9300      	str	r3, [sp, #0]
    132e:	9b07      	ldr	r3, [sp, #28]
    1330:	220e      	movs	r2, #14
    1332:	a806      	add	r0, sp, #24
    1334:	4684      	mov	ip, r0
    1336:	4462      	add	r2, ip
    1338:	0038      	movs	r0, r7
    133a:	4f2a      	ldr	r7, [pc, #168]	; (13e4 <usart_init+0x324>)
    133c:	47b8      	blx	r7
    133e:	e7ea      	b.n	1316 <usart_init+0x256>
		if(config->lin_slave_enable) {
    1340:	7ef3      	ldrb	r3, [r6, #27]
    1342:	2b00      	cmp	r3, #0
    1344:	d100      	bne.n	1348 <usart_init+0x288>
    1346:	e77d      	b.n	1244 <usart_init+0x184>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    1348:	2380      	movs	r3, #128	; 0x80
    134a:	04db      	lsls	r3, r3, #19
    134c:	431f      	orrs	r7, r3
    134e:	e779      	b.n	1244 <usart_init+0x184>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1350:	0020      	movs	r0, r4
    1352:	4b25      	ldr	r3, [pc, #148]	; (13e8 <usart_init+0x328>)
    1354:	4798      	blx	r3
    1356:	e007      	b.n	1368 <usart_init+0x2a8>
    1358:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    135a:	2f04      	cmp	r7, #4
    135c:	d00d      	beq.n	137a <usart_init+0x2ba>
    135e:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1360:	00bb      	lsls	r3, r7, #2
    1362:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    1364:	2800      	cmp	r0, #0
    1366:	d0f3      	beq.n	1350 <usart_init+0x290>
		if (current_pinmux != PINMUX_UNUSED) {
    1368:	1c43      	adds	r3, r0, #1
    136a:	d0f5      	beq.n	1358 <usart_init+0x298>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    136c:	a90e      	add	r1, sp, #56	; 0x38
    136e:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1370:	0c00      	lsrs	r0, r0, #16
    1372:	b2c0      	uxtb	r0, r0
    1374:	4b1d      	ldr	r3, [pc, #116]	; (13ec <usart_init+0x32c>)
    1376:	4798      	blx	r3
    1378:	e7ee      	b.n	1358 <usart_init+0x298>
		module->callback[i]            = NULL;
    137a:	2300      	movs	r3, #0
    137c:	60eb      	str	r3, [r5, #12]
    137e:	612b      	str	r3, [r5, #16]
    1380:	616b      	str	r3, [r5, #20]
    1382:	61ab      	str	r3, [r5, #24]
    1384:	61eb      	str	r3, [r5, #28]
    1386:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    1388:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    138a:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    138c:	2200      	movs	r2, #0
    138e:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    1390:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    1392:	3330      	adds	r3, #48	; 0x30
    1394:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    1396:	3301      	adds	r3, #1
    1398:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    139a:	3301      	adds	r3, #1
    139c:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    139e:	3301      	adds	r3, #1
    13a0:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    13a2:	6828      	ldr	r0, [r5, #0]
    13a4:	4b07      	ldr	r3, [pc, #28]	; (13c4 <usart_init+0x304>)
    13a6:	4798      	blx	r3
    13a8:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    13aa:	4911      	ldr	r1, [pc, #68]	; (13f0 <usart_init+0x330>)
    13ac:	4b11      	ldr	r3, [pc, #68]	; (13f4 <usart_init+0x334>)
    13ae:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    13b0:	00a4      	lsls	r4, r4, #2
    13b2:	4b11      	ldr	r3, [pc, #68]	; (13f8 <usart_init+0x338>)
    13b4:	50e5      	str	r5, [r4, r3]
	return status_code;
    13b6:	2000      	movs	r0, #0
    13b8:	e695      	b.n	10e6 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    13ba:	2310      	movs	r3, #16
    13bc:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    13be:	2300      	movs	r3, #0
    13c0:	9307      	str	r3, [sp, #28]
    13c2:	e6ec      	b.n	119e <usart_init+0xde>
    13c4:	00000fb9 	.word	0x00000fb9
    13c8:	40000400 	.word	0x40000400
    13cc:	00001ced 	.word	0x00001ced
    13d0:	00001c61 	.word	0x00001c61
    13d4:	00000df5 	.word	0x00000df5
    13d8:	41002000 	.word	0x41002000
    13dc:	00001d09 	.word	0x00001d09
    13e0:	00000d37 	.word	0x00000d37
    13e4:	00000d61 	.word	0x00000d61
    13e8:	00000e41 	.word	0x00000e41
    13ec:	00001de5 	.word	0x00001de5
    13f0:	00001515 	.word	0x00001515
    13f4:	00000ff5 	.word	0x00000ff5
    13f8:	200002bc 	.word	0x200002bc

000013fc <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    13fc:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    13fe:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    1400:	2a00      	cmp	r2, #0
    1402:	d101      	bne.n	1408 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    1404:	0018      	movs	r0, r3
    1406:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    1408:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    140a:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    140c:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    140e:	2a00      	cmp	r2, #0
    1410:	d1f8      	bne.n	1404 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    1412:	6802      	ldr	r2, [r0, #0]
	usart_hw->DATA.reg = tx_data;
    1414:	8511      	strh	r1, [r2, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    1416:	2102      	movs	r1, #2
    1418:	7e13      	ldrb	r3, [r2, #24]
    141a:	420b      	tst	r3, r1
    141c:	d0fc      	beq.n	1418 <usart_write_wait+0x1c>
	return STATUS_OK;
    141e:	2300      	movs	r3, #0
    1420:	e7f0      	b.n	1404 <usart_write_wait+0x8>

00001422 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    1422:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    1424:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    1426:	2a00      	cmp	r2, #0
    1428:	d101      	bne.n	142e <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    142a:	0018      	movs	r0, r3
    142c:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    142e:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    1430:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    1432:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    1434:	2a00      	cmp	r2, #0
    1436:	d1f8      	bne.n	142a <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    1438:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    143a:	7e10      	ldrb	r0, [r2, #24]
    143c:	0740      	lsls	r0, r0, #29
    143e:	d5f4      	bpl.n	142a <usart_read_wait+0x8>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1440:	8b53      	ldrh	r3, [r2, #26]
    1442:	b2db      	uxtb	r3, r3
	if (error_code) {
    1444:	0698      	lsls	r0, r3, #26
    1446:	d01d      	beq.n	1484 <usart_read_wait+0x62>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    1448:	0798      	lsls	r0, r3, #30
    144a:	d503      	bpl.n	1454 <usart_read_wait+0x32>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    144c:	2302      	movs	r3, #2
    144e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    1450:	3318      	adds	r3, #24
    1452:	e7ea      	b.n	142a <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1454:	0758      	lsls	r0, r3, #29
    1456:	d503      	bpl.n	1460 <usart_read_wait+0x3e>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1458:	2304      	movs	r3, #4
    145a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    145c:	331a      	adds	r3, #26
    145e:	e7e4      	b.n	142a <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1460:	07d8      	lsls	r0, r3, #31
    1462:	d503      	bpl.n	146c <usart_read_wait+0x4a>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1464:	2301      	movs	r3, #1
    1466:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    1468:	3312      	adds	r3, #18
    146a:	e7de      	b.n	142a <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    146c:	06d8      	lsls	r0, r3, #27
    146e:	d503      	bpl.n	1478 <usart_read_wait+0x56>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1470:	2310      	movs	r3, #16
    1472:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    1474:	3332      	adds	r3, #50	; 0x32
    1476:	e7d8      	b.n	142a <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    1478:	069b      	lsls	r3, r3, #26
    147a:	d503      	bpl.n	1484 <usart_read_wait+0x62>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    147c:	2320      	movs	r3, #32
    147e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    1480:	3321      	adds	r3, #33	; 0x21
    1482:	e7d2      	b.n	142a <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    1484:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    1486:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    1488:	2300      	movs	r3, #0
    148a:	e7ce      	b.n	142a <usart_read_wait+0x8>

0000148c <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    148c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    148e:	0004      	movs	r4, r0
    1490:	000d      	movs	r5, r1
    1492:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1494:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    1496:	4b0f      	ldr	r3, [pc, #60]	; (14d4 <_usart_read_buffer+0x48>)
    1498:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    149a:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    149c:	b29b      	uxth	r3, r3
    149e:	2b00      	cmp	r3, #0
    14a0:	d003      	beq.n	14aa <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
    14a2:	4b0d      	ldr	r3, [pc, #52]	; (14d8 <_usart_read_buffer+0x4c>)
    14a4:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    14a6:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    14a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    14aa:	85a6      	strh	r6, [r4, #44]	; 0x2c
    14ac:	4b0a      	ldr	r3, [pc, #40]	; (14d8 <_usart_read_buffer+0x4c>)
    14ae:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    14b0:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    14b2:	2205      	movs	r2, #5
    14b4:	2332      	movs	r3, #50	; 0x32
    14b6:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    14b8:	3b2e      	subs	r3, #46	; 0x2e
    14ba:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
    14bc:	7a23      	ldrb	r3, [r4, #8]
    14be:	2b00      	cmp	r3, #0
    14c0:	d001      	beq.n	14c6 <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    14c2:	2320      	movs	r3, #32
    14c4:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
    14c6:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
    14c8:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
    14ca:	2b00      	cmp	r3, #0
    14cc:	d0ec      	beq.n	14a8 <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    14ce:	2308      	movs	r3, #8
    14d0:	75bb      	strb	r3, [r7, #22]
    14d2:	e7e9      	b.n	14a8 <_usart_read_buffer+0x1c>
    14d4:	00000681 	.word	0x00000681
    14d8:	000006c1 	.word	0x000006c1

000014dc <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    14dc:	1c93      	adds	r3, r2, #2
    14de:	009b      	lsls	r3, r3, #2
    14e0:	18c3      	adds	r3, r0, r3
    14e2:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    14e4:	2130      	movs	r1, #48	; 0x30
    14e6:	2301      	movs	r3, #1
    14e8:	4093      	lsls	r3, r2
    14ea:	001a      	movs	r2, r3
    14ec:	5c43      	ldrb	r3, [r0, r1]
    14ee:	4313      	orrs	r3, r2
    14f0:	5443      	strb	r3, [r0, r1]
}
    14f2:	4770      	bx	lr

000014f4 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    14f4:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    14f6:	2317      	movs	r3, #23
	if (length == 0) {
    14f8:	2a00      	cmp	r2, #0
    14fa:	d101      	bne.n	1500 <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
    14fc:	0018      	movs	r0, r3
    14fe:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
    1500:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
    1502:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
    1504:	2c00      	cmp	r4, #0
    1506:	d0f9      	beq.n	14fc <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
    1508:	4b01      	ldr	r3, [pc, #4]	; (1510 <usart_read_buffer_job+0x1c>)
    150a:	4798      	blx	r3
    150c:	0003      	movs	r3, r0
    150e:	e7f5      	b.n	14fc <usart_read_buffer_job+0x8>
    1510:	0000148d 	.word	0x0000148d

00001514 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    1514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    1516:	0080      	lsls	r0, r0, #2
    1518:	4b62      	ldr	r3, [pc, #392]	; (16a4 <_usart_interrupt_handler+0x190>)
    151a:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    151c:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    151e:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    1520:	2b00      	cmp	r3, #0
    1522:	d1fc      	bne.n	151e <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    1524:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    1526:	7da6      	ldrb	r6, [r4, #22]
    1528:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    152a:	2330      	movs	r3, #48	; 0x30
    152c:	5ceb      	ldrb	r3, [r5, r3]
    152e:	2231      	movs	r2, #49	; 0x31
    1530:	5caf      	ldrb	r7, [r5, r2]
    1532:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    1534:	07f3      	lsls	r3, r6, #31
    1536:	d522      	bpl.n	157e <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    1538:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    153a:	b29b      	uxth	r3, r3
    153c:	2b00      	cmp	r3, #0
    153e:	d01c      	beq.n	157a <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1540:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    1542:	7813      	ldrb	r3, [r2, #0]
    1544:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    1546:	1c51      	adds	r1, r2, #1
    1548:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    154a:	7969      	ldrb	r1, [r5, #5]
    154c:	2901      	cmp	r1, #1
    154e:	d00e      	beq.n	156e <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1550:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    1552:	05db      	lsls	r3, r3, #23
    1554:	0ddb      	lsrs	r3, r3, #23
    1556:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    1558:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    155a:	3b01      	subs	r3, #1
    155c:	b29b      	uxth	r3, r3
    155e:	85eb      	strh	r3, [r5, #46]	; 0x2e
    1560:	2b00      	cmp	r3, #0
    1562:	d10c      	bne.n	157e <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1564:	3301      	adds	r3, #1
    1566:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    1568:	3301      	adds	r3, #1
    156a:	75a3      	strb	r3, [r4, #22]
    156c:	e007      	b.n	157e <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    156e:	7851      	ldrb	r1, [r2, #1]
    1570:	0209      	lsls	r1, r1, #8
    1572:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    1574:	3202      	adds	r2, #2
    1576:	62aa      	str	r2, [r5, #40]	; 0x28
    1578:	e7eb      	b.n	1552 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    157a:	2301      	movs	r3, #1
    157c:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    157e:	07b3      	lsls	r3, r6, #30
    1580:	d506      	bpl.n	1590 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    1582:	2302      	movs	r3, #2
    1584:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    1586:	2200      	movs	r2, #0
    1588:	3331      	adds	r3, #49	; 0x31
    158a:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    158c:	07fb      	lsls	r3, r7, #31
    158e:	d41a      	bmi.n	15c6 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    1590:	0773      	lsls	r3, r6, #29
    1592:	d565      	bpl.n	1660 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    1594:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1596:	b29b      	uxth	r3, r3
    1598:	2b00      	cmp	r3, #0
    159a:	d05f      	beq.n	165c <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    159c:	8b63      	ldrh	r3, [r4, #26]
    159e:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    15a0:	071a      	lsls	r2, r3, #28
    15a2:	d414      	bmi.n	15ce <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    15a4:	223f      	movs	r2, #63	; 0x3f
    15a6:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    15a8:	2b00      	cmp	r3, #0
    15aa:	d034      	beq.n	1616 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    15ac:	079a      	lsls	r2, r3, #30
    15ae:	d511      	bpl.n	15d4 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    15b0:	221a      	movs	r2, #26
    15b2:	2332      	movs	r3, #50	; 0x32
    15b4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    15b6:	3b30      	subs	r3, #48	; 0x30
    15b8:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    15ba:	077b      	lsls	r3, r7, #29
    15bc:	d550      	bpl.n	1660 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    15be:	0028      	movs	r0, r5
    15c0:	696b      	ldr	r3, [r5, #20]
    15c2:	4798      	blx	r3
    15c4:	e04c      	b.n	1660 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    15c6:	0028      	movs	r0, r5
    15c8:	68eb      	ldr	r3, [r5, #12]
    15ca:	4798      	blx	r3
    15cc:	e7e0      	b.n	1590 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    15ce:	2237      	movs	r2, #55	; 0x37
    15d0:	4013      	ands	r3, r2
    15d2:	e7e9      	b.n	15a8 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    15d4:	075a      	lsls	r2, r3, #29
    15d6:	d505      	bpl.n	15e4 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    15d8:	221e      	movs	r2, #30
    15da:	2332      	movs	r3, #50	; 0x32
    15dc:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    15de:	3b2e      	subs	r3, #46	; 0x2e
    15e0:	8363      	strh	r3, [r4, #26]
    15e2:	e7ea      	b.n	15ba <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    15e4:	07da      	lsls	r2, r3, #31
    15e6:	d505      	bpl.n	15f4 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    15e8:	2213      	movs	r2, #19
    15ea:	2332      	movs	r3, #50	; 0x32
    15ec:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    15ee:	3b31      	subs	r3, #49	; 0x31
    15f0:	8363      	strh	r3, [r4, #26]
    15f2:	e7e2      	b.n	15ba <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    15f4:	06da      	lsls	r2, r3, #27
    15f6:	d505      	bpl.n	1604 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    15f8:	2242      	movs	r2, #66	; 0x42
    15fa:	2332      	movs	r3, #50	; 0x32
    15fc:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    15fe:	3b22      	subs	r3, #34	; 0x22
    1600:	8363      	strh	r3, [r4, #26]
    1602:	e7da      	b.n	15ba <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    1604:	2220      	movs	r2, #32
    1606:	421a      	tst	r2, r3
    1608:	d0d7      	beq.n	15ba <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    160a:	3221      	adds	r2, #33	; 0x21
    160c:	2332      	movs	r3, #50	; 0x32
    160e:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1610:	3b12      	subs	r3, #18
    1612:	8363      	strh	r3, [r4, #26]
    1614:	e7d1      	b.n	15ba <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    1616:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    1618:	05db      	lsls	r3, r3, #23
    161a:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    161c:	b2da      	uxtb	r2, r3
    161e:	6a69      	ldr	r1, [r5, #36]	; 0x24
    1620:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    1622:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    1624:	1c51      	adds	r1, r2, #1
    1626:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1628:	7969      	ldrb	r1, [r5, #5]
    162a:	2901      	cmp	r1, #1
    162c:	d010      	beq.n	1650 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    162e:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1630:	3b01      	subs	r3, #1
    1632:	b29b      	uxth	r3, r3
    1634:	85ab      	strh	r3, [r5, #44]	; 0x2c
    1636:	2b00      	cmp	r3, #0
    1638:	d112      	bne.n	1660 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    163a:	3304      	adds	r3, #4
    163c:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    163e:	2200      	movs	r2, #0
    1640:	332e      	adds	r3, #46	; 0x2e
    1642:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    1644:	07bb      	lsls	r3, r7, #30
    1646:	d50b      	bpl.n	1660 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    1648:	0028      	movs	r0, r5
    164a:	692b      	ldr	r3, [r5, #16]
    164c:	4798      	blx	r3
    164e:	e007      	b.n	1660 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    1650:	0a1b      	lsrs	r3, r3, #8
    1652:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    1654:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    1656:	3301      	adds	r3, #1
    1658:	626b      	str	r3, [r5, #36]	; 0x24
    165a:	e7e8      	b.n	162e <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    165c:	2304      	movs	r3, #4
    165e:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    1660:	06f3      	lsls	r3, r6, #27
    1662:	d504      	bpl.n	166e <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    1664:	2310      	movs	r3, #16
    1666:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    1668:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    166a:	06fb      	lsls	r3, r7, #27
    166c:	d40e      	bmi.n	168c <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    166e:	06b3      	lsls	r3, r6, #26
    1670:	d504      	bpl.n	167c <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    1672:	2320      	movs	r3, #32
    1674:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    1676:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    1678:	073b      	lsls	r3, r7, #28
    167a:	d40b      	bmi.n	1694 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    167c:	0733      	lsls	r3, r6, #28
    167e:	d504      	bpl.n	168a <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    1680:	2308      	movs	r3, #8
    1682:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    1684:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    1686:	06bb      	lsls	r3, r7, #26
    1688:	d408      	bmi.n	169c <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    168a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    168c:	0028      	movs	r0, r5
    168e:	69eb      	ldr	r3, [r5, #28]
    1690:	4798      	blx	r3
    1692:	e7ec      	b.n	166e <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    1694:	0028      	movs	r0, r5
    1696:	69ab      	ldr	r3, [r5, #24]
    1698:	4798      	blx	r3
    169a:	e7ef      	b.n	167c <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    169c:	6a2b      	ldr	r3, [r5, #32]
    169e:	0028      	movs	r0, r5
    16a0:	4798      	blx	r3
}
    16a2:	e7f2      	b.n	168a <_usart_interrupt_handler+0x176>
    16a4:	200002bc 	.word	0x200002bc

000016a8 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    16a8:	b510      	push	{r4, lr}
	switch (clock_source) {
    16aa:	2808      	cmp	r0, #8
    16ac:	d803      	bhi.n	16b6 <system_clock_source_get_hz+0xe>
    16ae:	0080      	lsls	r0, r0, #2
    16b0:	4b1c      	ldr	r3, [pc, #112]	; (1724 <system_clock_source_get_hz+0x7c>)
    16b2:	581b      	ldr	r3, [r3, r0]
    16b4:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    16b6:	2000      	movs	r0, #0
    16b8:	e032      	b.n	1720 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    16ba:	4b1b      	ldr	r3, [pc, #108]	; (1728 <system_clock_source_get_hz+0x80>)
    16bc:	6918      	ldr	r0, [r3, #16]
    16be:	e02f      	b.n	1720 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    16c0:	4b1a      	ldr	r3, [pc, #104]	; (172c <system_clock_source_get_hz+0x84>)
    16c2:	6a1b      	ldr	r3, [r3, #32]
    16c4:	059b      	lsls	r3, r3, #22
    16c6:	0f9b      	lsrs	r3, r3, #30
    16c8:	4819      	ldr	r0, [pc, #100]	; (1730 <system_clock_source_get_hz+0x88>)
    16ca:	40d8      	lsrs	r0, r3
    16cc:	e028      	b.n	1720 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    16ce:	4b16      	ldr	r3, [pc, #88]	; (1728 <system_clock_source_get_hz+0x80>)
    16d0:	6958      	ldr	r0, [r3, #20]
    16d2:	e025      	b.n	1720 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    16d4:	4b14      	ldr	r3, [pc, #80]	; (1728 <system_clock_source_get_hz+0x80>)
    16d6:	681b      	ldr	r3, [r3, #0]
			return 0;
    16d8:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    16da:	079b      	lsls	r3, r3, #30
    16dc:	d520      	bpl.n	1720 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    16de:	4913      	ldr	r1, [pc, #76]	; (172c <system_clock_source_get_hz+0x84>)
    16e0:	2210      	movs	r2, #16
    16e2:	68cb      	ldr	r3, [r1, #12]
    16e4:	421a      	tst	r2, r3
    16e6:	d0fc      	beq.n	16e2 <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    16e8:	4b0f      	ldr	r3, [pc, #60]	; (1728 <system_clock_source_get_hz+0x80>)
    16ea:	681a      	ldr	r2, [r3, #0]
    16ec:	2324      	movs	r3, #36	; 0x24
    16ee:	4013      	ands	r3, r2
    16f0:	2b04      	cmp	r3, #4
    16f2:	d001      	beq.n	16f8 <system_clock_source_get_hz+0x50>
			return 48000000UL;
    16f4:	480f      	ldr	r0, [pc, #60]	; (1734 <system_clock_source_get_hz+0x8c>)
    16f6:	e013      	b.n	1720 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    16f8:	2000      	movs	r0, #0
    16fa:	4b0f      	ldr	r3, [pc, #60]	; (1738 <system_clock_source_get_hz+0x90>)
    16fc:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    16fe:	4b0a      	ldr	r3, [pc, #40]	; (1728 <system_clock_source_get_hz+0x80>)
    1700:	689b      	ldr	r3, [r3, #8]
    1702:	041b      	lsls	r3, r3, #16
    1704:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1706:	4358      	muls	r0, r3
    1708:	e00a      	b.n	1720 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    170a:	2350      	movs	r3, #80	; 0x50
    170c:	4a07      	ldr	r2, [pc, #28]	; (172c <system_clock_source_get_hz+0x84>)
    170e:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    1710:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1712:	075b      	lsls	r3, r3, #29
    1714:	d504      	bpl.n	1720 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    1716:	4b04      	ldr	r3, [pc, #16]	; (1728 <system_clock_source_get_hz+0x80>)
    1718:	68d8      	ldr	r0, [r3, #12]
    171a:	e001      	b.n	1720 <system_clock_source_get_hz+0x78>
		return 32768UL;
    171c:	2080      	movs	r0, #128	; 0x80
    171e:	0200      	lsls	r0, r0, #8
	}
}
    1720:	bd10      	pop	{r4, pc}
    1722:	46c0      	nop			; (mov r8, r8)
    1724:	00004e80 	.word	0x00004e80
    1728:	20000280 	.word	0x20000280
    172c:	40000800 	.word	0x40000800
    1730:	007a1200 	.word	0x007a1200
    1734:	02dc6c00 	.word	0x02dc6c00
    1738:	00001d09 	.word	0x00001d09

0000173c <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    173c:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    173e:	490c      	ldr	r1, [pc, #48]	; (1770 <system_clock_source_osc8m_set_config+0x34>)
    1740:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    1742:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1744:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    1746:	7840      	ldrb	r0, [r0, #1]
    1748:	2201      	movs	r2, #1
    174a:	4010      	ands	r0, r2
    174c:	0180      	lsls	r0, r0, #6
    174e:	2640      	movs	r6, #64	; 0x40
    1750:	43b3      	bics	r3, r6
    1752:	4303      	orrs	r3, r0
    1754:	402a      	ands	r2, r5
    1756:	01d2      	lsls	r2, r2, #7
    1758:	2080      	movs	r0, #128	; 0x80
    175a:	4383      	bics	r3, r0
    175c:	4313      	orrs	r3, r2
    175e:	2203      	movs	r2, #3
    1760:	4022      	ands	r2, r4
    1762:	0212      	lsls	r2, r2, #8
    1764:	4803      	ldr	r0, [pc, #12]	; (1774 <system_clock_source_osc8m_set_config+0x38>)
    1766:	4003      	ands	r3, r0
    1768:	4313      	orrs	r3, r2
    176a:	620b      	str	r3, [r1, #32]
}
    176c:	bd70      	pop	{r4, r5, r6, pc}
    176e:	46c0      	nop			; (mov r8, r8)
    1770:	40000800 	.word	0x40000800
    1774:	fffffcff 	.word	0xfffffcff

00001778 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    1778:	b5f0      	push	{r4, r5, r6, r7, lr}
    177a:	46de      	mov	lr, fp
    177c:	4657      	mov	r7, sl
    177e:	464e      	mov	r6, r9
    1780:	4645      	mov	r5, r8
    1782:	b5e0      	push	{r5, r6, r7, lr}
    1784:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    1786:	4b26      	ldr	r3, [pc, #152]	; (1820 <system_clock_source_xosc32k_set_config+0xa8>)
    1788:	469b      	mov	fp, r3
    178a:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    178c:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    178e:	7800      	ldrb	r0, [r0, #0]
    1790:	4242      	negs	r2, r0
    1792:	4142      	adcs	r2, r0
    1794:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    1796:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    1798:	78ca      	ldrb	r2, [r1, #3]
    179a:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    179c:	790a      	ldrb	r2, [r1, #4]
    179e:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    17a0:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    17a2:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    17a4:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    17a6:	688a      	ldr	r2, [r1, #8]
    17a8:	491e      	ldr	r1, [pc, #120]	; (1824 <system_clock_source_xosc32k_set_config+0xac>)
    17aa:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    17ac:	2101      	movs	r1, #1
    17ae:	464a      	mov	r2, r9
    17b0:	0092      	lsls	r2, r2, #2
    17b2:	4691      	mov	r9, r2
    17b4:	2204      	movs	r2, #4
    17b6:	4393      	bics	r3, r2
    17b8:	464a      	mov	r2, r9
    17ba:	4313      	orrs	r3, r2
    17bc:	4642      	mov	r2, r8
    17be:	400a      	ands	r2, r1
    17c0:	00d2      	lsls	r2, r2, #3
    17c2:	4690      	mov	r8, r2
    17c4:	2208      	movs	r2, #8
    17c6:	4393      	bics	r3, r2
    17c8:	4642      	mov	r2, r8
    17ca:	4313      	orrs	r3, r2
    17cc:	4662      	mov	r2, ip
    17ce:	400a      	ands	r2, r1
    17d0:	0112      	lsls	r2, r2, #4
    17d2:	4694      	mov	ip, r2
    17d4:	2210      	movs	r2, #16
    17d6:	4393      	bics	r3, r2
    17d8:	4662      	mov	r2, ip
    17da:	4313      	orrs	r3, r2
    17dc:	4008      	ands	r0, r1
    17de:	0140      	lsls	r0, r0, #5
    17e0:	2220      	movs	r2, #32
    17e2:	4393      	bics	r3, r2
    17e4:	4303      	orrs	r3, r0
    17e6:	400f      	ands	r7, r1
    17e8:	01bf      	lsls	r7, r7, #6
    17ea:	2040      	movs	r0, #64	; 0x40
    17ec:	4383      	bics	r3, r0
    17ee:	433b      	orrs	r3, r7
    17f0:	400e      	ands	r6, r1
    17f2:	01f6      	lsls	r6, r6, #7
    17f4:	3040      	adds	r0, #64	; 0x40
    17f6:	4383      	bics	r3, r0
    17f8:	4333      	orrs	r3, r6
    17fa:	3879      	subs	r0, #121	; 0x79
    17fc:	4005      	ands	r5, r0
    17fe:	022d      	lsls	r5, r5, #8
    1800:	4809      	ldr	r0, [pc, #36]	; (1828 <system_clock_source_xosc32k_set_config+0xb0>)
    1802:	4003      	ands	r3, r0
    1804:	432b      	orrs	r3, r5
    1806:	4021      	ands	r1, r4
    1808:	0309      	lsls	r1, r1, #12
    180a:	4808      	ldr	r0, [pc, #32]	; (182c <system_clock_source_xosc32k_set_config+0xb4>)
    180c:	4003      	ands	r3, r0
    180e:	430b      	orrs	r3, r1
    1810:	465a      	mov	r2, fp
    1812:	8293      	strh	r3, [r2, #20]
}
    1814:	bc3c      	pop	{r2, r3, r4, r5}
    1816:	4690      	mov	r8, r2
    1818:	4699      	mov	r9, r3
    181a:	46a2      	mov	sl, r4
    181c:	46ab      	mov	fp, r5
    181e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1820:	40000800 	.word	0x40000800
    1824:	20000280 	.word	0x20000280
    1828:	fffff8ff 	.word	0xfffff8ff
    182c:	ffffefff 	.word	0xffffefff

00001830 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    1830:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1832:	7a03      	ldrb	r3, [r0, #8]
    1834:	069b      	lsls	r3, r3, #26
    1836:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    1838:	8942      	ldrh	r2, [r0, #10]
    183a:	0592      	lsls	r2, r2, #22
    183c:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    183e:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    1840:	4918      	ldr	r1, [pc, #96]	; (18a4 <system_clock_source_dfll_set_config+0x74>)
    1842:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    1844:	7983      	ldrb	r3, [r0, #6]
    1846:	79c2      	ldrb	r2, [r0, #7]
    1848:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    184a:	8842      	ldrh	r2, [r0, #2]
    184c:	8884      	ldrh	r4, [r0, #4]
    184e:	4322      	orrs	r2, r4
    1850:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    1852:	7842      	ldrb	r2, [r0, #1]
    1854:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    1856:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    1858:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    185a:	7803      	ldrb	r3, [r0, #0]
    185c:	2b04      	cmp	r3, #4
    185e:	d011      	beq.n	1884 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    1860:	2b20      	cmp	r3, #32
    1862:	d10e      	bne.n	1882 <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1864:	7b03      	ldrb	r3, [r0, #12]
    1866:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1868:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    186a:	4313      	orrs	r3, r2
    186c:	89c2      	ldrh	r2, [r0, #14]
    186e:	0412      	lsls	r2, r2, #16
    1870:	490d      	ldr	r1, [pc, #52]	; (18a8 <system_clock_source_dfll_set_config+0x78>)
    1872:	400a      	ands	r2, r1
    1874:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    1876:	4a0b      	ldr	r2, [pc, #44]	; (18a4 <system_clock_source_dfll_set_config+0x74>)
    1878:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    187a:	6811      	ldr	r1, [r2, #0]
    187c:	4b0b      	ldr	r3, [pc, #44]	; (18ac <system_clock_source_dfll_set_config+0x7c>)
    187e:	430b      	orrs	r3, r1
    1880:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    1882:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1884:	7b03      	ldrb	r3, [r0, #12]
    1886:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1888:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    188a:	4313      	orrs	r3, r2
    188c:	89c2      	ldrh	r2, [r0, #14]
    188e:	0412      	lsls	r2, r2, #16
    1890:	4905      	ldr	r1, [pc, #20]	; (18a8 <system_clock_source_dfll_set_config+0x78>)
    1892:	400a      	ands	r2, r1
    1894:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    1896:	4a03      	ldr	r2, [pc, #12]	; (18a4 <system_clock_source_dfll_set_config+0x74>)
    1898:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    189a:	6813      	ldr	r3, [r2, #0]
    189c:	2104      	movs	r1, #4
    189e:	430b      	orrs	r3, r1
    18a0:	6013      	str	r3, [r2, #0]
    18a2:	e7ee      	b.n	1882 <system_clock_source_dfll_set_config+0x52>
    18a4:	20000280 	.word	0x20000280
    18a8:	03ff0000 	.word	0x03ff0000
    18ac:	00000424 	.word	0x00000424

000018b0 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    18b0:	2808      	cmp	r0, #8
    18b2:	d803      	bhi.n	18bc <system_clock_source_enable+0xc>
    18b4:	0080      	lsls	r0, r0, #2
    18b6:	4b25      	ldr	r3, [pc, #148]	; (194c <system_clock_source_enable+0x9c>)
    18b8:	581b      	ldr	r3, [r3, r0]
    18ba:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    18bc:	2017      	movs	r0, #23
    18be:	e044      	b.n	194a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    18c0:	4a23      	ldr	r2, [pc, #140]	; (1950 <system_clock_source_enable+0xa0>)
    18c2:	6a13      	ldr	r3, [r2, #32]
    18c4:	2102      	movs	r1, #2
    18c6:	430b      	orrs	r3, r1
    18c8:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    18ca:	2000      	movs	r0, #0
    18cc:	e03d      	b.n	194a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    18ce:	4a20      	ldr	r2, [pc, #128]	; (1950 <system_clock_source_enable+0xa0>)
    18d0:	6993      	ldr	r3, [r2, #24]
    18d2:	2102      	movs	r1, #2
    18d4:	430b      	orrs	r3, r1
    18d6:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    18d8:	2000      	movs	r0, #0
		break;
    18da:	e036      	b.n	194a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    18dc:	4a1c      	ldr	r2, [pc, #112]	; (1950 <system_clock_source_enable+0xa0>)
    18de:	8a13      	ldrh	r3, [r2, #16]
    18e0:	2102      	movs	r1, #2
    18e2:	430b      	orrs	r3, r1
    18e4:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    18e6:	2000      	movs	r0, #0
		break;
    18e8:	e02f      	b.n	194a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    18ea:	4a19      	ldr	r2, [pc, #100]	; (1950 <system_clock_source_enable+0xa0>)
    18ec:	8a93      	ldrh	r3, [r2, #20]
    18ee:	2102      	movs	r1, #2
    18f0:	430b      	orrs	r3, r1
    18f2:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    18f4:	2000      	movs	r0, #0
		break;
    18f6:	e028      	b.n	194a <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    18f8:	4916      	ldr	r1, [pc, #88]	; (1954 <system_clock_source_enable+0xa4>)
    18fa:	680b      	ldr	r3, [r1, #0]
    18fc:	2202      	movs	r2, #2
    18fe:	4313      	orrs	r3, r2
    1900:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1902:	4b13      	ldr	r3, [pc, #76]	; (1950 <system_clock_source_enable+0xa0>)
    1904:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1906:	0019      	movs	r1, r3
    1908:	320e      	adds	r2, #14
    190a:	68cb      	ldr	r3, [r1, #12]
    190c:	421a      	tst	r2, r3
    190e:	d0fc      	beq.n	190a <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1910:	4a10      	ldr	r2, [pc, #64]	; (1954 <system_clock_source_enable+0xa4>)
    1912:	6891      	ldr	r1, [r2, #8]
    1914:	4b0e      	ldr	r3, [pc, #56]	; (1950 <system_clock_source_enable+0xa0>)
    1916:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1918:	6852      	ldr	r2, [r2, #4]
    191a:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    191c:	2200      	movs	r2, #0
    191e:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1920:	0019      	movs	r1, r3
    1922:	3210      	adds	r2, #16
    1924:	68cb      	ldr	r3, [r1, #12]
    1926:	421a      	tst	r2, r3
    1928:	d0fc      	beq.n	1924 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    192a:	4b0a      	ldr	r3, [pc, #40]	; (1954 <system_clock_source_enable+0xa4>)
    192c:	681b      	ldr	r3, [r3, #0]
    192e:	b29b      	uxth	r3, r3
    1930:	4a07      	ldr	r2, [pc, #28]	; (1950 <system_clock_source_enable+0xa0>)
    1932:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    1934:	2000      	movs	r0, #0
    1936:	e008      	b.n	194a <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1938:	4905      	ldr	r1, [pc, #20]	; (1950 <system_clock_source_enable+0xa0>)
    193a:	2244      	movs	r2, #68	; 0x44
    193c:	5c8b      	ldrb	r3, [r1, r2]
    193e:	2002      	movs	r0, #2
    1940:	4303      	orrs	r3, r0
    1942:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    1944:	2000      	movs	r0, #0
		break;
    1946:	e000      	b.n	194a <system_clock_source_enable+0x9a>
		return STATUS_OK;
    1948:	2000      	movs	r0, #0
}
    194a:	4770      	bx	lr
    194c:	00004ea4 	.word	0x00004ea4
    1950:	40000800 	.word	0x40000800
    1954:	20000280 	.word	0x20000280

00001958 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1958:	b5f0      	push	{r4, r5, r6, r7, lr}
    195a:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    195c:	22c2      	movs	r2, #194	; 0xc2
    195e:	00d2      	lsls	r2, r2, #3
    1960:	4b47      	ldr	r3, [pc, #284]	; (1a80 <system_clock_init+0x128>)
    1962:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1964:	4947      	ldr	r1, [pc, #284]	; (1a84 <system_clock_init+0x12c>)
    1966:	684b      	ldr	r3, [r1, #4]
    1968:	221e      	movs	r2, #30
    196a:	4393      	bics	r3, r2
    196c:	3a1c      	subs	r2, #28
    196e:	4313      	orrs	r3, r2
    1970:	604b      	str	r3, [r1, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    1972:	ab01      	add	r3, sp, #4
    1974:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1976:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1978:	4d43      	ldr	r5, [pc, #268]	; (1a88 <system_clock_init+0x130>)
    197a:	b2e0      	uxtb	r0, r4
    197c:	a901      	add	r1, sp, #4
    197e:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1980:	3401      	adds	r4, #1
    1982:	2c25      	cmp	r4, #37	; 0x25
    1984:	d1f9      	bne.n	197a <system_clock_init+0x22>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    1986:	a80a      	add	r0, sp, #40	; 0x28
    1988:	2300      	movs	r3, #0
    198a:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    198c:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    198e:	2280      	movs	r2, #128	; 0x80
    1990:	0212      	lsls	r2, r2, #8
    1992:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    1994:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    1996:	2201      	movs	r2, #1
    1998:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    199a:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    199c:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    199e:	3205      	adds	r2, #5
    19a0:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    19a2:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    19a4:	4b39      	ldr	r3, [pc, #228]	; (1a8c <system_clock_init+0x134>)
    19a6:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    19a8:	2005      	movs	r0, #5
    19aa:	4b39      	ldr	r3, [pc, #228]	; (1a90 <system_clock_init+0x138>)
    19ac:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    19ae:	4934      	ldr	r1, [pc, #208]	; (1a80 <system_clock_init+0x128>)
    19b0:	2202      	movs	r2, #2
    19b2:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    19b4:	421a      	tst	r2, r3
    19b6:	d0fc      	beq.n	19b2 <system_clock_init+0x5a>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    19b8:	4a31      	ldr	r2, [pc, #196]	; (1a80 <system_clock_init+0x128>)
    19ba:	8a93      	ldrh	r3, [r2, #20]
    19bc:	2180      	movs	r1, #128	; 0x80
    19be:	430b      	orrs	r3, r1
    19c0:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    19c2:	ab05      	add	r3, sp, #20
    19c4:	2100      	movs	r1, #0
    19c6:	2200      	movs	r2, #0
    19c8:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    19ca:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    19cc:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    19ce:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    19d0:	313f      	adds	r1, #63	; 0x3f
    19d2:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    19d4:	393b      	subs	r1, #59	; 0x3b
    19d6:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    19d8:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    19da:	4b2e      	ldr	r3, [pc, #184]	; (1a94 <system_clock_init+0x13c>)
    19dc:	681b      	ldr	r3, [r3, #0]
    19de:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    19e0:	2b3f      	cmp	r3, #63	; 0x3f
    19e2:	d04b      	beq.n	1a7c <system_clock_init+0x124>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    19e4:	a805      	add	r0, sp, #20
    19e6:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    19e8:	23b7      	movs	r3, #183	; 0xb7
    19ea:	00db      	lsls	r3, r3, #3
    19ec:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    19ee:	2307      	movs	r3, #7
    19f0:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    19f2:	3338      	adds	r3, #56	; 0x38
    19f4:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    19f6:	4b28      	ldr	r3, [pc, #160]	; (1a98 <system_clock_init+0x140>)
    19f8:	4798      	blx	r3
	config->run_in_standby  = false;
    19fa:	a804      	add	r0, sp, #16
    19fc:	2500      	movs	r5, #0
    19fe:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    1a00:	2601      	movs	r6, #1
    1a02:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1a04:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1a06:	4b25      	ldr	r3, [pc, #148]	; (1a9c <system_clock_init+0x144>)
    1a08:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1a0a:	2006      	movs	r0, #6
    1a0c:	4f20      	ldr	r7, [pc, #128]	; (1a90 <system_clock_init+0x138>)
    1a0e:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1a10:	4b23      	ldr	r3, [pc, #140]	; (1aa0 <system_clock_init+0x148>)
    1a12:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1a14:	ac01      	add	r4, sp, #4
    1a16:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    1a18:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    1a1a:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    1a1c:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    1a1e:	2305      	movs	r3, #5
    1a20:	7023      	strb	r3, [r4, #0]
    1a22:	0021      	movs	r1, r4
    1a24:	2001      	movs	r0, #1
    1a26:	4b1f      	ldr	r3, [pc, #124]	; (1aa4 <system_clock_init+0x14c>)
    1a28:	4798      	blx	r3
    1a2a:	2001      	movs	r0, #1
    1a2c:	4b1e      	ldr	r3, [pc, #120]	; (1aa8 <system_clock_init+0x150>)
    1a2e:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    1a30:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    1a32:	0021      	movs	r1, r4
    1a34:	2000      	movs	r0, #0
    1a36:	4b14      	ldr	r3, [pc, #80]	; (1a88 <system_clock_init+0x130>)
    1a38:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    1a3a:	2000      	movs	r0, #0
    1a3c:	4b1b      	ldr	r3, [pc, #108]	; (1aac <system_clock_init+0x154>)
    1a3e:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    1a40:	2007      	movs	r0, #7
    1a42:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1a44:	490e      	ldr	r1, [pc, #56]	; (1a80 <system_clock_init+0x128>)
    1a46:	22d0      	movs	r2, #208	; 0xd0
    1a48:	68cb      	ldr	r3, [r1, #12]
    1a4a:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    1a4c:	2bd0      	cmp	r3, #208	; 0xd0
    1a4e:	d1fb      	bne.n	1a48 <system_clock_init+0xf0>
	PM->CPUSEL.reg = (uint32_t)divider;
    1a50:	4a17      	ldr	r2, [pc, #92]	; (1ab0 <system_clock_init+0x158>)
    1a52:	2300      	movs	r3, #0
    1a54:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    1a56:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    1a58:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    1a5a:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    1a5c:	a901      	add	r1, sp, #4
    1a5e:	2201      	movs	r2, #1
    1a60:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    1a62:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    1a64:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    1a66:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1a68:	3307      	adds	r3, #7
    1a6a:	700b      	strb	r3, [r1, #0]
    1a6c:	2000      	movs	r0, #0
    1a6e:	4b0d      	ldr	r3, [pc, #52]	; (1aa4 <system_clock_init+0x14c>)
    1a70:	4798      	blx	r3
    1a72:	2000      	movs	r0, #0
    1a74:	4b0c      	ldr	r3, [pc, #48]	; (1aa8 <system_clock_init+0x150>)
    1a76:	4798      	blx	r3
#endif
}
    1a78:	b00f      	add	sp, #60	; 0x3c
    1a7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    1a7c:	3b20      	subs	r3, #32
    1a7e:	e7b1      	b.n	19e4 <system_clock_init+0x8c>
    1a80:	40000800 	.word	0x40000800
    1a84:	41004000 	.word	0x41004000
    1a88:	00001ced 	.word	0x00001ced
    1a8c:	00001779 	.word	0x00001779
    1a90:	000018b1 	.word	0x000018b1
    1a94:	00806024 	.word	0x00806024
    1a98:	00001831 	.word	0x00001831
    1a9c:	0000173d 	.word	0x0000173d
    1aa0:	00001ab5 	.word	0x00001ab5
    1aa4:	00001ad9 	.word	0x00001ad9
    1aa8:	00001b91 	.word	0x00001b91
    1aac:	00001c61 	.word	0x00001c61
    1ab0:	40000400 	.word	0x40000400

00001ab4 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    1ab4:	4a06      	ldr	r2, [pc, #24]	; (1ad0 <system_gclk_init+0x1c>)
    1ab6:	6993      	ldr	r3, [r2, #24]
    1ab8:	2108      	movs	r1, #8
    1aba:	430b      	orrs	r3, r1
    1abc:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1abe:	2201      	movs	r2, #1
    1ac0:	4b04      	ldr	r3, [pc, #16]	; (1ad4 <system_gclk_init+0x20>)
    1ac2:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1ac4:	0019      	movs	r1, r3
    1ac6:	780b      	ldrb	r3, [r1, #0]
    1ac8:	4213      	tst	r3, r2
    1aca:	d1fc      	bne.n	1ac6 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1acc:	4770      	bx	lr
    1ace:	46c0      	nop			; (mov r8, r8)
    1ad0:	40000400 	.word	0x40000400
    1ad4:	40000c00 	.word	0x40000c00

00001ad8 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1ad8:	b570      	push	{r4, r5, r6, lr}
    1ada:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1adc:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1ade:	780d      	ldrb	r5, [r1, #0]
    1ae0:	022d      	lsls	r5, r5, #8
    1ae2:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1ae4:	784b      	ldrb	r3, [r1, #1]
    1ae6:	2b00      	cmp	r3, #0
    1ae8:	d002      	beq.n	1af0 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1aea:	2380      	movs	r3, #128	; 0x80
    1aec:	02db      	lsls	r3, r3, #11
    1aee:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1af0:	7a4b      	ldrb	r3, [r1, #9]
    1af2:	2b00      	cmp	r3, #0
    1af4:	d002      	beq.n	1afc <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1af6:	2380      	movs	r3, #128	; 0x80
    1af8:	031b      	lsls	r3, r3, #12
    1afa:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1afc:	6848      	ldr	r0, [r1, #4]
    1afe:	2801      	cmp	r0, #1
    1b00:	d910      	bls.n	1b24 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1b02:	1e43      	subs	r3, r0, #1
    1b04:	4218      	tst	r0, r3
    1b06:	d134      	bne.n	1b72 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1b08:	2802      	cmp	r0, #2
    1b0a:	d930      	bls.n	1b6e <system_gclk_gen_set_config+0x96>
    1b0c:	2302      	movs	r3, #2
    1b0e:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1b10:	3201      	adds	r2, #1
						mask <<= 1) {
    1b12:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    1b14:	4298      	cmp	r0, r3
    1b16:	d8fb      	bhi.n	1b10 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1b18:	0212      	lsls	r2, r2, #8
    1b1a:	4332      	orrs	r2, r6
    1b1c:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1b1e:	2380      	movs	r3, #128	; 0x80
    1b20:	035b      	lsls	r3, r3, #13
    1b22:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1b24:	7a0b      	ldrb	r3, [r1, #8]
    1b26:	2b00      	cmp	r3, #0
    1b28:	d002      	beq.n	1b30 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1b2a:	2380      	movs	r3, #128	; 0x80
    1b2c:	039b      	lsls	r3, r3, #14
    1b2e:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1b30:	4a13      	ldr	r2, [pc, #76]	; (1b80 <system_gclk_gen_set_config+0xa8>)
    1b32:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    1b34:	b25b      	sxtb	r3, r3
    1b36:	2b00      	cmp	r3, #0
    1b38:	dbfb      	blt.n	1b32 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    1b3a:	4b12      	ldr	r3, [pc, #72]	; (1b84 <system_gclk_gen_set_config+0xac>)
    1b3c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1b3e:	4b12      	ldr	r3, [pc, #72]	; (1b88 <system_gclk_gen_set_config+0xb0>)
    1b40:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1b42:	4a0f      	ldr	r2, [pc, #60]	; (1b80 <system_gclk_gen_set_config+0xa8>)
    1b44:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1b46:	b25b      	sxtb	r3, r3
    1b48:	2b00      	cmp	r3, #0
    1b4a:	dbfb      	blt.n	1b44 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1b4c:	4b0c      	ldr	r3, [pc, #48]	; (1b80 <system_gclk_gen_set_config+0xa8>)
    1b4e:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1b50:	001a      	movs	r2, r3
    1b52:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    1b54:	b25b      	sxtb	r3, r3
    1b56:	2b00      	cmp	r3, #0
    1b58:	dbfb      	blt.n	1b52 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1b5a:	4a09      	ldr	r2, [pc, #36]	; (1b80 <system_gclk_gen_set_config+0xa8>)
    1b5c:	6853      	ldr	r3, [r2, #4]
    1b5e:	2180      	movs	r1, #128	; 0x80
    1b60:	0249      	lsls	r1, r1, #9
    1b62:	400b      	ands	r3, r1
    1b64:	431d      	orrs	r5, r3
    1b66:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    1b68:	4b08      	ldr	r3, [pc, #32]	; (1b8c <system_gclk_gen_set_config+0xb4>)
    1b6a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1b6c:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    1b6e:	2200      	movs	r2, #0
    1b70:	e7d2      	b.n	1b18 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1b72:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    1b74:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1b76:	2380      	movs	r3, #128	; 0x80
    1b78:	029b      	lsls	r3, r3, #10
    1b7a:	431d      	orrs	r5, r3
    1b7c:	e7d2      	b.n	1b24 <system_gclk_gen_set_config+0x4c>
    1b7e:	46c0      	nop			; (mov r8, r8)
    1b80:	40000c00 	.word	0x40000c00
    1b84:	00000681 	.word	0x00000681
    1b88:	40000c08 	.word	0x40000c08
    1b8c:	000006c1 	.word	0x000006c1

00001b90 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1b90:	b510      	push	{r4, lr}
    1b92:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1b94:	4a0b      	ldr	r2, [pc, #44]	; (1bc4 <system_gclk_gen_enable+0x34>)
    1b96:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1b98:	b25b      	sxtb	r3, r3
    1b9a:	2b00      	cmp	r3, #0
    1b9c:	dbfb      	blt.n	1b96 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    1b9e:	4b0a      	ldr	r3, [pc, #40]	; (1bc8 <system_gclk_gen_enable+0x38>)
    1ba0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1ba2:	4b0a      	ldr	r3, [pc, #40]	; (1bcc <system_gclk_gen_enable+0x3c>)
    1ba4:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1ba6:	4a07      	ldr	r2, [pc, #28]	; (1bc4 <system_gclk_gen_enable+0x34>)
    1ba8:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1baa:	b25b      	sxtb	r3, r3
    1bac:	2b00      	cmp	r3, #0
    1bae:	dbfb      	blt.n	1ba8 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1bb0:	4a04      	ldr	r2, [pc, #16]	; (1bc4 <system_gclk_gen_enable+0x34>)
    1bb2:	6851      	ldr	r1, [r2, #4]
    1bb4:	2380      	movs	r3, #128	; 0x80
    1bb6:	025b      	lsls	r3, r3, #9
    1bb8:	430b      	orrs	r3, r1
    1bba:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    1bbc:	4b04      	ldr	r3, [pc, #16]	; (1bd0 <system_gclk_gen_enable+0x40>)
    1bbe:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1bc0:	bd10      	pop	{r4, pc}
    1bc2:	46c0      	nop			; (mov r8, r8)
    1bc4:	40000c00 	.word	0x40000c00
    1bc8:	00000681 	.word	0x00000681
    1bcc:	40000c04 	.word	0x40000c04
    1bd0:	000006c1 	.word	0x000006c1

00001bd4 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1bd4:	b570      	push	{r4, r5, r6, lr}
    1bd6:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1bd8:	4a1a      	ldr	r2, [pc, #104]	; (1c44 <system_gclk_gen_get_hz+0x70>)
    1bda:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1bdc:	b25b      	sxtb	r3, r3
    1bde:	2b00      	cmp	r3, #0
    1be0:	dbfb      	blt.n	1bda <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    1be2:	4b19      	ldr	r3, [pc, #100]	; (1c48 <system_gclk_gen_get_hz+0x74>)
    1be4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1be6:	4b19      	ldr	r3, [pc, #100]	; (1c4c <system_gclk_gen_get_hz+0x78>)
    1be8:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1bea:	4a16      	ldr	r2, [pc, #88]	; (1c44 <system_gclk_gen_get_hz+0x70>)
    1bec:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1bee:	b25b      	sxtb	r3, r3
    1bf0:	2b00      	cmp	r3, #0
    1bf2:	dbfb      	blt.n	1bec <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1bf4:	4e13      	ldr	r6, [pc, #76]	; (1c44 <system_gclk_gen_get_hz+0x70>)
    1bf6:	6870      	ldr	r0, [r6, #4]
    1bf8:	04c0      	lsls	r0, r0, #19
    1bfa:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1bfc:	4b14      	ldr	r3, [pc, #80]	; (1c50 <system_gclk_gen_get_hz+0x7c>)
    1bfe:	4798      	blx	r3
    1c00:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1c02:	4b12      	ldr	r3, [pc, #72]	; (1c4c <system_gclk_gen_get_hz+0x78>)
    1c04:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1c06:	6876      	ldr	r6, [r6, #4]
    1c08:	02f6      	lsls	r6, r6, #11
    1c0a:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1c0c:	4b11      	ldr	r3, [pc, #68]	; (1c54 <system_gclk_gen_get_hz+0x80>)
    1c0e:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1c10:	4a0c      	ldr	r2, [pc, #48]	; (1c44 <system_gclk_gen_get_hz+0x70>)
    1c12:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1c14:	b25b      	sxtb	r3, r3
    1c16:	2b00      	cmp	r3, #0
    1c18:	dbfb      	blt.n	1c12 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1c1a:	4b0a      	ldr	r3, [pc, #40]	; (1c44 <system_gclk_gen_get_hz+0x70>)
    1c1c:	689c      	ldr	r4, [r3, #8]
    1c1e:	0224      	lsls	r4, r4, #8
    1c20:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    1c22:	4b0d      	ldr	r3, [pc, #52]	; (1c58 <system_gclk_gen_get_hz+0x84>)
    1c24:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1c26:	2e00      	cmp	r6, #0
    1c28:	d107      	bne.n	1c3a <system_gclk_gen_get_hz+0x66>
    1c2a:	2c01      	cmp	r4, #1
    1c2c:	d907      	bls.n	1c3e <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    1c2e:	0021      	movs	r1, r4
    1c30:	0028      	movs	r0, r5
    1c32:	4b0a      	ldr	r3, [pc, #40]	; (1c5c <system_gclk_gen_get_hz+0x88>)
    1c34:	4798      	blx	r3
    1c36:	0005      	movs	r5, r0
    1c38:	e001      	b.n	1c3e <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1c3a:	3401      	adds	r4, #1
    1c3c:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    1c3e:	0028      	movs	r0, r5
    1c40:	bd70      	pop	{r4, r5, r6, pc}
    1c42:	46c0      	nop			; (mov r8, r8)
    1c44:	40000c00 	.word	0x40000c00
    1c48:	00000681 	.word	0x00000681
    1c4c:	40000c04 	.word	0x40000c04
    1c50:	000016a9 	.word	0x000016a9
    1c54:	40000c08 	.word	0x40000c08
    1c58:	000006c1 	.word	0x000006c1
    1c5c:	00003419 	.word	0x00003419

00001c60 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1c60:	b510      	push	{r4, lr}
    1c62:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1c64:	4b06      	ldr	r3, [pc, #24]	; (1c80 <system_gclk_chan_enable+0x20>)
    1c66:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1c68:	4b06      	ldr	r3, [pc, #24]	; (1c84 <system_gclk_chan_enable+0x24>)
    1c6a:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1c6c:	4a06      	ldr	r2, [pc, #24]	; (1c88 <system_gclk_chan_enable+0x28>)
    1c6e:	8853      	ldrh	r3, [r2, #2]
    1c70:	2180      	movs	r1, #128	; 0x80
    1c72:	01c9      	lsls	r1, r1, #7
    1c74:	430b      	orrs	r3, r1
    1c76:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1c78:	4b04      	ldr	r3, [pc, #16]	; (1c8c <system_gclk_chan_enable+0x2c>)
    1c7a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1c7c:	bd10      	pop	{r4, pc}
    1c7e:	46c0      	nop			; (mov r8, r8)
    1c80:	00000681 	.word	0x00000681
    1c84:	40000c02 	.word	0x40000c02
    1c88:	40000c00 	.word	0x40000c00
    1c8c:	000006c1 	.word	0x000006c1

00001c90 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1c90:	b510      	push	{r4, lr}
    1c92:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1c94:	4b0f      	ldr	r3, [pc, #60]	; (1cd4 <system_gclk_chan_disable+0x44>)
    1c96:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1c98:	4b0f      	ldr	r3, [pc, #60]	; (1cd8 <system_gclk_chan_disable+0x48>)
    1c9a:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1c9c:	4a0f      	ldr	r2, [pc, #60]	; (1cdc <system_gclk_chan_disable+0x4c>)
    1c9e:	8853      	ldrh	r3, [r2, #2]
    1ca0:	051b      	lsls	r3, r3, #20
    1ca2:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1ca4:	8853      	ldrh	r3, [r2, #2]
    1ca6:	490e      	ldr	r1, [pc, #56]	; (1ce0 <system_gclk_chan_disable+0x50>)
    1ca8:	400b      	ands	r3, r1
    1caa:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1cac:	8853      	ldrh	r3, [r2, #2]
    1cae:	490d      	ldr	r1, [pc, #52]	; (1ce4 <system_gclk_chan_disable+0x54>)
    1cb0:	400b      	ands	r3, r1
    1cb2:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1cb4:	0011      	movs	r1, r2
    1cb6:	2280      	movs	r2, #128	; 0x80
    1cb8:	01d2      	lsls	r2, r2, #7
    1cba:	884b      	ldrh	r3, [r1, #2]
    1cbc:	4213      	tst	r3, r2
    1cbe:	d1fc      	bne.n	1cba <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1cc0:	4906      	ldr	r1, [pc, #24]	; (1cdc <system_gclk_chan_disable+0x4c>)
    1cc2:	884a      	ldrh	r2, [r1, #2]
    1cc4:	0203      	lsls	r3, r0, #8
    1cc6:	4806      	ldr	r0, [pc, #24]	; (1ce0 <system_gclk_chan_disable+0x50>)
    1cc8:	4002      	ands	r2, r0
    1cca:	4313      	orrs	r3, r2
    1ccc:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    1cce:	4b06      	ldr	r3, [pc, #24]	; (1ce8 <system_gclk_chan_disable+0x58>)
    1cd0:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1cd2:	bd10      	pop	{r4, pc}
    1cd4:	00000681 	.word	0x00000681
    1cd8:	40000c02 	.word	0x40000c02
    1cdc:	40000c00 	.word	0x40000c00
    1ce0:	fffff0ff 	.word	0xfffff0ff
    1ce4:	ffffbfff 	.word	0xffffbfff
    1ce8:	000006c1 	.word	0x000006c1

00001cec <system_gclk_chan_set_config>:
{
    1cec:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1cee:	780c      	ldrb	r4, [r1, #0]
    1cf0:	0224      	lsls	r4, r4, #8
    1cf2:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    1cf4:	4b02      	ldr	r3, [pc, #8]	; (1d00 <system_gclk_chan_set_config+0x14>)
    1cf6:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1cf8:	b2a4      	uxth	r4, r4
    1cfa:	4b02      	ldr	r3, [pc, #8]	; (1d04 <system_gclk_chan_set_config+0x18>)
    1cfc:	805c      	strh	r4, [r3, #2]
}
    1cfe:	bd10      	pop	{r4, pc}
    1d00:	00001c91 	.word	0x00001c91
    1d04:	40000c00 	.word	0x40000c00

00001d08 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1d08:	b510      	push	{r4, lr}
    1d0a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1d0c:	4b06      	ldr	r3, [pc, #24]	; (1d28 <system_gclk_chan_get_hz+0x20>)
    1d0e:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1d10:	4b06      	ldr	r3, [pc, #24]	; (1d2c <system_gclk_chan_get_hz+0x24>)
    1d12:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1d14:	4b06      	ldr	r3, [pc, #24]	; (1d30 <system_gclk_chan_get_hz+0x28>)
    1d16:	885c      	ldrh	r4, [r3, #2]
    1d18:	0524      	lsls	r4, r4, #20
    1d1a:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    1d1c:	4b05      	ldr	r3, [pc, #20]	; (1d34 <system_gclk_chan_get_hz+0x2c>)
    1d1e:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1d20:	0020      	movs	r0, r4
    1d22:	4b05      	ldr	r3, [pc, #20]	; (1d38 <system_gclk_chan_get_hz+0x30>)
    1d24:	4798      	blx	r3
}
    1d26:	bd10      	pop	{r4, pc}
    1d28:	00000681 	.word	0x00000681
    1d2c:	40000c02 	.word	0x40000c02
    1d30:	40000c00 	.word	0x40000c00
    1d34:	000006c1 	.word	0x000006c1
    1d38:	00001bd5 	.word	0x00001bd5

00001d3c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1d3c:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1d3e:	78d3      	ldrb	r3, [r2, #3]
    1d40:	2b00      	cmp	r3, #0
    1d42:	d135      	bne.n	1db0 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1d44:	7813      	ldrb	r3, [r2, #0]
    1d46:	2b80      	cmp	r3, #128	; 0x80
    1d48:	d029      	beq.n	1d9e <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1d4a:	061b      	lsls	r3, r3, #24
    1d4c:	2480      	movs	r4, #128	; 0x80
    1d4e:	0264      	lsls	r4, r4, #9
    1d50:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1d52:	7854      	ldrb	r4, [r2, #1]
    1d54:	2502      	movs	r5, #2
    1d56:	43ac      	bics	r4, r5
    1d58:	d106      	bne.n	1d68 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1d5a:	7894      	ldrb	r4, [r2, #2]
    1d5c:	2c00      	cmp	r4, #0
    1d5e:	d120      	bne.n	1da2 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    1d60:	2480      	movs	r4, #128	; 0x80
    1d62:	02a4      	lsls	r4, r4, #10
    1d64:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1d66:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1d68:	7854      	ldrb	r4, [r2, #1]
    1d6a:	3c01      	subs	r4, #1
    1d6c:	2c01      	cmp	r4, #1
    1d6e:	d91c      	bls.n	1daa <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1d70:	040d      	lsls	r5, r1, #16
    1d72:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1d74:	24a0      	movs	r4, #160	; 0xa0
    1d76:	05e4      	lsls	r4, r4, #23
    1d78:	432c      	orrs	r4, r5
    1d7a:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1d7c:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1d7e:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1d80:	24d0      	movs	r4, #208	; 0xd0
    1d82:	0624      	lsls	r4, r4, #24
    1d84:	432c      	orrs	r4, r5
    1d86:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1d88:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1d8a:	78d4      	ldrb	r4, [r2, #3]
    1d8c:	2c00      	cmp	r4, #0
    1d8e:	d122      	bne.n	1dd6 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1d90:	035b      	lsls	r3, r3, #13
    1d92:	d51c      	bpl.n	1dce <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1d94:	7893      	ldrb	r3, [r2, #2]
    1d96:	2b01      	cmp	r3, #1
    1d98:	d01e      	beq.n	1dd8 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    1d9a:	6141      	str	r1, [r0, #20]
    1d9c:	e017      	b.n	1dce <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    1d9e:	2300      	movs	r3, #0
    1da0:	e7d7      	b.n	1d52 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1da2:	24c0      	movs	r4, #192	; 0xc0
    1da4:	02e4      	lsls	r4, r4, #11
    1da6:	4323      	orrs	r3, r4
    1da8:	e7dd      	b.n	1d66 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1daa:	4c0d      	ldr	r4, [pc, #52]	; (1de0 <_system_pinmux_config+0xa4>)
    1dac:	4023      	ands	r3, r4
    1dae:	e7df      	b.n	1d70 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    1db0:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1db2:	040c      	lsls	r4, r1, #16
    1db4:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1db6:	23a0      	movs	r3, #160	; 0xa0
    1db8:	05db      	lsls	r3, r3, #23
    1dba:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1dbc:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1dbe:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1dc0:	23d0      	movs	r3, #208	; 0xd0
    1dc2:	061b      	lsls	r3, r3, #24
    1dc4:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1dc6:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    1dc8:	78d3      	ldrb	r3, [r2, #3]
    1dca:	2b00      	cmp	r3, #0
    1dcc:	d103      	bne.n	1dd6 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1dce:	7853      	ldrb	r3, [r2, #1]
    1dd0:	3b01      	subs	r3, #1
    1dd2:	2b01      	cmp	r3, #1
    1dd4:	d902      	bls.n	1ddc <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    1dd6:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    1dd8:	6181      	str	r1, [r0, #24]
    1dda:	e7f8      	b.n	1dce <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    1ddc:	6081      	str	r1, [r0, #8]
}
    1dde:	e7fa      	b.n	1dd6 <_system_pinmux_config+0x9a>
    1de0:	fffbffff 	.word	0xfffbffff

00001de4 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1de4:	b510      	push	{r4, lr}
    1de6:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1de8:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1dea:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1dec:	2900      	cmp	r1, #0
    1dee:	d104      	bne.n	1dfa <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1df0:	0943      	lsrs	r3, r0, #5
    1df2:	01db      	lsls	r3, r3, #7
    1df4:	4905      	ldr	r1, [pc, #20]	; (1e0c <system_pinmux_pin_set_config+0x28>)
    1df6:	468c      	mov	ip, r1
    1df8:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1dfa:	241f      	movs	r4, #31
    1dfc:	4020      	ands	r0, r4
    1dfe:	2101      	movs	r1, #1
    1e00:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    1e02:	0018      	movs	r0, r3
    1e04:	4b02      	ldr	r3, [pc, #8]	; (1e10 <system_pinmux_pin_set_config+0x2c>)
    1e06:	4798      	blx	r3
}
    1e08:	bd10      	pop	{r4, pc}
    1e0a:	46c0      	nop			; (mov r8, r8)
    1e0c:	41004400 	.word	0x41004400
    1e10:	00001d3d 	.word	0x00001d3d

00001e14 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1e14:	4770      	bx	lr
	...

00001e18 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1e18:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1e1a:	4b05      	ldr	r3, [pc, #20]	; (1e30 <system_init+0x18>)
    1e1c:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1e1e:	4b05      	ldr	r3, [pc, #20]	; (1e34 <system_init+0x1c>)
    1e20:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1e22:	4b05      	ldr	r3, [pc, #20]	; (1e38 <system_init+0x20>)
    1e24:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1e26:	4b05      	ldr	r3, [pc, #20]	; (1e3c <system_init+0x24>)
    1e28:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1e2a:	4b05      	ldr	r3, [pc, #20]	; (1e40 <system_init+0x28>)
    1e2c:	4798      	blx	r3
}
    1e2e:	bd10      	pop	{r4, pc}
    1e30:	00001959 	.word	0x00001959
    1e34:	000006f1 	.word	0x000006f1
    1e38:	00001e15 	.word	0x00001e15
    1e3c:	00001e15 	.word	0x00001e15
    1e40:	00001e15 	.word	0x00001e15

00001e44 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1e44:	e7fe      	b.n	1e44 <Dummy_Handler>
	...

00001e48 <Reset_Handler>:
{
    1e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    1e4a:	4a2a      	ldr	r2, [pc, #168]	; (1ef4 <Reset_Handler+0xac>)
    1e4c:	4b2a      	ldr	r3, [pc, #168]	; (1ef8 <Reset_Handler+0xb0>)
    1e4e:	429a      	cmp	r2, r3
    1e50:	d011      	beq.n	1e76 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    1e52:	001a      	movs	r2, r3
    1e54:	4b29      	ldr	r3, [pc, #164]	; (1efc <Reset_Handler+0xb4>)
    1e56:	429a      	cmp	r2, r3
    1e58:	d20d      	bcs.n	1e76 <Reset_Handler+0x2e>
    1e5a:	4a29      	ldr	r2, [pc, #164]	; (1f00 <Reset_Handler+0xb8>)
    1e5c:	3303      	adds	r3, #3
    1e5e:	1a9b      	subs	r3, r3, r2
    1e60:	089b      	lsrs	r3, r3, #2
    1e62:	3301      	adds	r3, #1
    1e64:	009b      	lsls	r3, r3, #2
    1e66:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1e68:	4823      	ldr	r0, [pc, #140]	; (1ef8 <Reset_Handler+0xb0>)
    1e6a:	4922      	ldr	r1, [pc, #136]	; (1ef4 <Reset_Handler+0xac>)
    1e6c:	588c      	ldr	r4, [r1, r2]
    1e6e:	5084      	str	r4, [r0, r2]
    1e70:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    1e72:	429a      	cmp	r2, r3
    1e74:	d1fa      	bne.n	1e6c <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    1e76:	4a23      	ldr	r2, [pc, #140]	; (1f04 <Reset_Handler+0xbc>)
    1e78:	4b23      	ldr	r3, [pc, #140]	; (1f08 <Reset_Handler+0xc0>)
    1e7a:	429a      	cmp	r2, r3
    1e7c:	d20a      	bcs.n	1e94 <Reset_Handler+0x4c>
    1e7e:	43d3      	mvns	r3, r2
    1e80:	4921      	ldr	r1, [pc, #132]	; (1f08 <Reset_Handler+0xc0>)
    1e82:	185b      	adds	r3, r3, r1
    1e84:	2103      	movs	r1, #3
    1e86:	438b      	bics	r3, r1
    1e88:	3304      	adds	r3, #4
    1e8a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    1e8c:	2100      	movs	r1, #0
    1e8e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    1e90:	4293      	cmp	r3, r2
    1e92:	d1fc      	bne.n	1e8e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1e94:	4a1d      	ldr	r2, [pc, #116]	; (1f0c <Reset_Handler+0xc4>)
    1e96:	21ff      	movs	r1, #255	; 0xff
    1e98:	4b1d      	ldr	r3, [pc, #116]	; (1f10 <Reset_Handler+0xc8>)
    1e9a:	438b      	bics	r3, r1
    1e9c:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1e9e:	39fd      	subs	r1, #253	; 0xfd
    1ea0:	2390      	movs	r3, #144	; 0x90
    1ea2:	005b      	lsls	r3, r3, #1
    1ea4:	4a1b      	ldr	r2, [pc, #108]	; (1f14 <Reset_Handler+0xcc>)
    1ea6:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1ea8:	4a1b      	ldr	r2, [pc, #108]	; (1f18 <Reset_Handler+0xd0>)
    1eaa:	78d3      	ldrb	r3, [r2, #3]
    1eac:	2503      	movs	r5, #3
    1eae:	43ab      	bics	r3, r5
    1eb0:	2402      	movs	r4, #2
    1eb2:	4323      	orrs	r3, r4
    1eb4:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1eb6:	78d3      	ldrb	r3, [r2, #3]
    1eb8:	270c      	movs	r7, #12
    1eba:	43bb      	bics	r3, r7
    1ebc:	2608      	movs	r6, #8
    1ebe:	4333      	orrs	r3, r6
    1ec0:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    1ec2:	4b16      	ldr	r3, [pc, #88]	; (1f1c <Reset_Handler+0xd4>)
    1ec4:	7b98      	ldrb	r0, [r3, #14]
    1ec6:	2230      	movs	r2, #48	; 0x30
    1ec8:	4390      	bics	r0, r2
    1eca:	2220      	movs	r2, #32
    1ecc:	4310      	orrs	r0, r2
    1ece:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1ed0:	7b99      	ldrb	r1, [r3, #14]
    1ed2:	43b9      	bics	r1, r7
    1ed4:	4331      	orrs	r1, r6
    1ed6:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1ed8:	7b9a      	ldrb	r2, [r3, #14]
    1eda:	43aa      	bics	r2, r5
    1edc:	4322      	orrs	r2, r4
    1ede:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    1ee0:	4a0f      	ldr	r2, [pc, #60]	; (1f20 <Reset_Handler+0xd8>)
    1ee2:	6853      	ldr	r3, [r2, #4]
    1ee4:	2180      	movs	r1, #128	; 0x80
    1ee6:	430b      	orrs	r3, r1
    1ee8:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    1eea:	4b0e      	ldr	r3, [pc, #56]	; (1f24 <Reset_Handler+0xdc>)
    1eec:	4798      	blx	r3
        main();
    1eee:	4b0e      	ldr	r3, [pc, #56]	; (1f28 <Reset_Handler+0xe0>)
    1ef0:	4798      	blx	r3
    1ef2:	e7fe      	b.n	1ef2 <Reset_Handler+0xaa>
    1ef4:	00006b4c 	.word	0x00006b4c
    1ef8:	20000000 	.word	0x20000000
    1efc:	200001c0 	.word	0x200001c0
    1f00:	20000004 	.word	0x20000004
    1f04:	200001c0 	.word	0x200001c0
    1f08:	20000ac8 	.word	0x20000ac8
    1f0c:	e000ed00 	.word	0xe000ed00
    1f10:	00000000 	.word	0x00000000
    1f14:	41007000 	.word	0x41007000
    1f18:	41005000 	.word	0x41005000
    1f1c:	41004800 	.word	0x41004800
    1f20:	41004000 	.word	0x41004000
    1f24:	00003759 	.word	0x00003759
    1f28:	00003365 	.word	0x00003365

00001f2c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    1f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f2e:	46c6      	mov	lr, r8
    1f30:	b500      	push	{lr}
    1f32:	000c      	movs	r4, r1
    1f34:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    1f36:	2800      	cmp	r0, #0
    1f38:	d10f      	bne.n	1f5a <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    1f3a:	2a00      	cmp	r2, #0
    1f3c:	dd11      	ble.n	1f62 <_read+0x36>
    1f3e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    1f40:	4e09      	ldr	r6, [pc, #36]	; (1f68 <_read+0x3c>)
    1f42:	4d0a      	ldr	r5, [pc, #40]	; (1f6c <_read+0x40>)
    1f44:	6830      	ldr	r0, [r6, #0]
    1f46:	0021      	movs	r1, r4
    1f48:	682b      	ldr	r3, [r5, #0]
    1f4a:	4798      	blx	r3
		ptr++;
    1f4c:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    1f4e:	42bc      	cmp	r4, r7
    1f50:	d1f8      	bne.n	1f44 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    1f52:	4640      	mov	r0, r8
    1f54:	bc04      	pop	{r2}
    1f56:	4690      	mov	r8, r2
    1f58:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    1f5a:	2301      	movs	r3, #1
    1f5c:	425b      	negs	r3, r3
    1f5e:	4698      	mov	r8, r3
    1f60:	e7f7      	b.n	1f52 <_read+0x26>
	for (; len > 0; --len) {
    1f62:	4680      	mov	r8, r0
    1f64:	e7f5      	b.n	1f52 <_read+0x26>
    1f66:	46c0      	nop			; (mov r8, r8)
    1f68:	200002dc 	.word	0x200002dc
    1f6c:	200002d4 	.word	0x200002d4

00001f70 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    1f70:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f72:	46c6      	mov	lr, r8
    1f74:	b500      	push	{lr}
    1f76:	000e      	movs	r6, r1
    1f78:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    1f7a:	3801      	subs	r0, #1
    1f7c:	2802      	cmp	r0, #2
    1f7e:	d810      	bhi.n	1fa2 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    1f80:	2a00      	cmp	r2, #0
    1f82:	d011      	beq.n	1fa8 <_write+0x38>
    1f84:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    1f86:	4b0c      	ldr	r3, [pc, #48]	; (1fb8 <_write+0x48>)
    1f88:	4698      	mov	r8, r3
    1f8a:	4f0c      	ldr	r7, [pc, #48]	; (1fbc <_write+0x4c>)
    1f8c:	4643      	mov	r3, r8
    1f8e:	6818      	ldr	r0, [r3, #0]
    1f90:	5d31      	ldrb	r1, [r6, r4]
    1f92:	683b      	ldr	r3, [r7, #0]
    1f94:	4798      	blx	r3
    1f96:	2800      	cmp	r0, #0
    1f98:	db08      	blt.n	1fac <_write+0x3c>
			return -1;
		}
		++nChars;
    1f9a:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    1f9c:	42a5      	cmp	r5, r4
    1f9e:	d1f5      	bne.n	1f8c <_write+0x1c>
    1fa0:	e006      	b.n	1fb0 <_write+0x40>
		return -1;
    1fa2:	2401      	movs	r4, #1
    1fa4:	4264      	negs	r4, r4
    1fa6:	e003      	b.n	1fb0 <_write+0x40>
	for (; len != 0; --len) {
    1fa8:	0014      	movs	r4, r2
    1faa:	e001      	b.n	1fb0 <_write+0x40>
			return -1;
    1fac:	2401      	movs	r4, #1
    1fae:	4264      	negs	r4, r4
	}
	return nChars;
}
    1fb0:	0020      	movs	r0, r4
    1fb2:	bc04      	pop	{r2}
    1fb4:	4690      	mov	r8, r2
    1fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1fb8:	200002dc 	.word	0x200002dc
    1fbc:	200002d8 	.word	0x200002d8

00001fc0 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    1fc0:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    1fc2:	4a06      	ldr	r2, [pc, #24]	; (1fdc <_sbrk+0x1c>)
    1fc4:	6812      	ldr	r2, [r2, #0]
    1fc6:	2a00      	cmp	r2, #0
    1fc8:	d004      	beq.n	1fd4 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    1fca:	4a04      	ldr	r2, [pc, #16]	; (1fdc <_sbrk+0x1c>)
    1fcc:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    1fce:	18c3      	adds	r3, r0, r3
    1fd0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    1fd2:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    1fd4:	4902      	ldr	r1, [pc, #8]	; (1fe0 <_sbrk+0x20>)
    1fd6:	4a01      	ldr	r2, [pc, #4]	; (1fdc <_sbrk+0x1c>)
    1fd8:	6011      	str	r1, [r2, #0]
    1fda:	e7f6      	b.n	1fca <_sbrk+0xa>
    1fdc:	20000298 	.word	0x20000298
    1fe0:	20002ac8 	.word	0x20002ac8

00001fe4 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    1fe4:	2001      	movs	r0, #1
    1fe6:	4240      	negs	r0, r0
    1fe8:	4770      	bx	lr

00001fea <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    1fea:	2380      	movs	r3, #128	; 0x80
    1fec:	019b      	lsls	r3, r3, #6
    1fee:	604b      	str	r3, [r1, #4]

	return 0;
}
    1ff0:	2000      	movs	r0, #0
    1ff2:	4770      	bx	lr

00001ff4 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    1ff4:	2001      	movs	r0, #1
    1ff6:	4770      	bx	lr

00001ff8 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    1ff8:	2000      	movs	r0, #0
    1ffa:	4770      	bx	lr

00001ffc <drawChar>:
uint16_t xCharPos = 0;
uint16_t yCharPos = 0;


void drawChar(uint8_t character)
{
    1ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ffe:	46d6      	mov	lr, sl
    2000:	464f      	mov	r7, r9
    2002:	4646      	mov	r6, r8
    2004:	b5c0      	push	{r6, r7, lr}
    2006:	0004      	movs	r4, r0
	uint16_t x = xCharPos;
    2008:	4b2a      	ldr	r3, [pc, #168]	; (20b4 <STACK_SIZE+0xb4>)
    200a:	881b      	ldrh	r3, [r3, #0]
	uint16_t y = yCharPos;
    200c:	4a2a      	ldr	r2, [pc, #168]	; (20b8 <STACK_SIZE+0xb8>)
    200e:	8815      	ldrh	r5, [r2, #0]
	
	consoleDisplay[xCharPos][yCharPos] = character;
    2010:	005a      	lsls	r2, r3, #1
    2012:	18d2      	adds	r2, r2, r3
    2014:	00d2      	lsls	r2, r2, #3
    2016:	4829      	ldr	r0, [pc, #164]	; (20bc <STACK_SIZE+0xbc>)
    2018:	1882      	adds	r2, r0, r2
    201a:	5554      	strb	r4, [r2, r5]
	
	REG_PORT_OUTCLR1 = LCD_CS;
    201c:	2180      	movs	r1, #128	; 0x80
    201e:	03c9      	lsls	r1, r1, #15
    2020:	4a27      	ldr	r2, [pc, #156]	; (20c0 <STACK_SIZE+0xc0>)
    2022:	6011      	str	r1, [r2, #0]
	setXY(x*10,y*20,x*10+9,y*20+19);
    2024:	0098      	lsls	r0, r3, #2
    2026:	181b      	adds	r3, r3, r0
    2028:	005b      	lsls	r3, r3, #1
    202a:	b298      	uxth	r0, r3
    202c:	2114      	movs	r1, #20
    202e:	4369      	muls	r1, r5
    2030:	b289      	uxth	r1, r1
    2032:	000b      	movs	r3, r1
    2034:	3313      	adds	r3, #19
    2036:	b29b      	uxth	r3, r3
    2038:	0002      	movs	r2, r0
    203a:	3209      	adds	r2, #9
    203c:	b292      	uxth	r2, r2
    203e:	4d21      	ldr	r5, [pc, #132]	; (20c4 <STACK_SIZE+0xc4>)
    2040:	47a8      	blx	r5
    2042:	4a21      	ldr	r2, [pc, #132]	; (20c8 <STACK_SIZE+0xc8>)
    2044:	00a5      	lsls	r5, r4, #2
    2046:	192d      	adds	r5, r5, r4
    2048:	00ab      	lsls	r3, r5, #2
    204a:	18ed      	adds	r5, r5, r3
    204c:	1955      	adds	r5, r2, r5
    204e:	3401      	adds	r4, #1
    2050:	00a3      	lsls	r3, r4, #2
    2052:	191c      	adds	r4, r3, r4
    2054:	00a3      	lsls	r3, r4, #2
    2056:	18e4      	adds	r4, r4, r3
    2058:	4692      	mov	sl, r2
    205a:	44a2      	add	sl, r4
			{
				setPixel((fore_Color_High<<8)|fore_Color_Low);	
			}
			else
			{
				setPixel((back_Color_High<<8)|back_Color_Low);
    205c:	4b1b      	ldr	r3, [pc, #108]	; (20cc <STACK_SIZE+0xcc>)
    205e:	4699      	mov	r9, r3
    2060:	4b1b      	ldr	r3, [pc, #108]	; (20d0 <STACK_SIZE+0xd0>)
    2062:	4698      	mov	r8, r3
    2064:	4f1b      	ldr	r7, [pc, #108]	; (20d4 <STACK_SIZE+0xd4>)
				setPixel((fore_Color_High<<8)|fore_Color_Low);	
    2066:	4e1c      	ldr	r6, [pc, #112]	; (20d8 <STACK_SIZE+0xd8>)
    2068:	e019      	b.n	209e <STACK_SIZE+0x9e>
				setPixel((back_Color_High<<8)|back_Color_Low);
    206a:	464b      	mov	r3, r9
    206c:	8818      	ldrh	r0, [r3, #0]
    206e:	0200      	lsls	r0, r0, #8
    2070:	4643      	mov	r3, r8
    2072:	881b      	ldrh	r3, [r3, #0]
    2074:	4318      	orrs	r0, r3
    2076:	b280      	uxth	r0, r0
    2078:	47b8      	blx	r7
		for(int j=0;j<8;j++)
    207a:	3c01      	subs	r4, #1
    207c:	d30c      	bcc.n	2098 <STACK_SIZE+0x98>
			if((CodePage437[character][i]&(1<<(7-j)))!=0)
    207e:	782b      	ldrb	r3, [r5, #0]
    2080:	4123      	asrs	r3, r4
    2082:	07db      	lsls	r3, r3, #31
    2084:	d5f1      	bpl.n	206a <STACK_SIZE+0x6a>
				setPixel((fore_Color_High<<8)|fore_Color_Low);	
    2086:	8830      	ldrh	r0, [r6, #0]
    2088:	0200      	lsls	r0, r0, #8
    208a:	4b14      	ldr	r3, [pc, #80]	; (20dc <STACK_SIZE+0xdc>)
    208c:	881b      	ldrh	r3, [r3, #0]
    208e:	4318      	orrs	r0, r3
    2090:	b280      	uxth	r0, r0
    2092:	4b10      	ldr	r3, [pc, #64]	; (20d4 <STACK_SIZE+0xd4>)
    2094:	4798      	blx	r3
    2096:	e7f0      	b.n	207a <STACK_SIZE+0x7a>
    2098:	3501      	adds	r5, #1
	for(uint16_t i=0; i <= 24; i++)
    209a:	4555      	cmp	r5, sl
    209c:	d001      	beq.n	20a2 <STACK_SIZE+0xa2>
{
    209e:	2407      	movs	r4, #7
    20a0:	e7ed      	b.n	207e <STACK_SIZE+0x7e>
			}

		}
	}
	REG_PORT_OUTSET1 = LCD_CS;
    20a2:	2280      	movs	r2, #128	; 0x80
    20a4:	03d2      	lsls	r2, r2, #15
    20a6:	4b0e      	ldr	r3, [pc, #56]	; (20e0 <STACK_SIZE+0xe0>)
    20a8:	601a      	str	r2, [r3, #0]
	
	//printf(consoleDisplay[xCharPos][yCharPos]);

}
    20aa:	bc1c      	pop	{r2, r3, r4}
    20ac:	4690      	mov	r8, r2
    20ae:	4699      	mov	r9, r3
    20b0:	46a2      	mov	sl, r4
    20b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    20b4:	2000029c 	.word	0x2000029c
    20b8:	2000029e 	.word	0x2000029e
    20bc:	20000318 	.word	0x20000318
    20c0:	41004494 	.word	0x41004494
    20c4:	00002b29 	.word	0x00002b29
    20c8:	00004ec8 	.word	0x00004ec8
    20cc:	20000a9e 	.word	0x20000a9e
    20d0:	20000a98 	.word	0x20000a98
    20d4:	00002ce9 	.word	0x00002ce9
    20d8:	20000a9a 	.word	0x20000a9a
    20dc:	20000a9c 	.word	0x20000a9c
    20e0:	41004498 	.word	0x41004498

000020e4 <newLine>:

void newLine(void)
{
    20e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    20e6:	46de      	mov	lr, fp
    20e8:	4657      	mov	r7, sl
    20ea:	464e      	mov	r6, r9
    20ec:	4645      	mov	r5, r8
    20ee:	b5e0      	push	{r5, r6, r7, lr}
    20f0:	4c56      	ldr	r4, [pc, #344]	; (224c <newLine+0x168>)
    20f2:	44a5      	add	sp, r4
    20f4:	4856      	ldr	r0, [pc, #344]	; (2250 <newLine+0x16c>)
    20f6:	23f0      	movs	r3, #240	; 0xf0
    20f8:	00db      	lsls	r3, r3, #3
    20fa:	18c4      	adds	r4, r0, r3
    20fc:	e002      	b.n	2104 <newLine+0x20>
    20fe:	3018      	adds	r0, #24
	/*
	This is split into two parts; the first moves consoledisplay around
	so the first line is deleted and all other lines are moved up one line
	*/
	
	for(int i = 0 ; i < 80 ; i++)
    2100:	42a0      	cmp	r0, r4
    2102:	d008      	beq.n	2116 <newLine+0x32>
    2104:	0001      	movs	r1, r0
    2106:	3117      	adds	r1, #23
{
    2108:	0003      	movs	r3, r0
	{
		for(int j = 1 ; j < 24 ; j++)
		{
			consoleDisplay[i][j-1] = consoleDisplay[i][j];
    210a:	785a      	ldrb	r2, [r3, #1]
    210c:	701a      	strb	r2, [r3, #0]
    210e:	3301      	adds	r3, #1
		for(int j = 1 ; j < 24 ; j++)
    2110:	428b      	cmp	r3, r1
    2112:	d1fa      	bne.n	210a <newLine+0x26>
    2114:	e7f3      	b.n	20fe <newLine+0x1a>
    2116:	4b4f      	ldr	r3, [pc, #316]	; (2254 <newLine+0x170>)
    2118:	22f0      	movs	r2, #240	; 0xf0
    211a:	00d2      	lsls	r2, r2, #3
    211c:	1899      	adds	r1, r3, r2
		}
	}
	
	for(int k = 0 ; k < 80 ; k ++)
	{
		consoleDisplay[k][23] = 0x00;
    211e:	2200      	movs	r2, #0
    2120:	701a      	strb	r2, [r3, #0]
    2122:	3318      	adds	r3, #24
	for(int k = 0 ; k < 80 ; k ++)
    2124:	428b      	cmp	r3, r1
    2126:	d1fb      	bne.n	2120 <newLine+0x3c>
    2128:	2300      	movs	r3, #0
    212a:	9300      	str	r3, [sp, #0]
			
	for(uint16_t row = 0 ; row < 460 ; row++)
	{
		//Per page 40 of datasheet (5.1.2.7, 16-bit
		//parallel interface for data ram read.
		REG_PORT_OUTCLR1 = LCD_CS;
    212c:	4b4a      	ldr	r3, [pc, #296]	; (2258 <newLine+0x174>)
    212e:	4698      	mov	r8, r3
		setXY(0, row+20, 799, row+20);
		//Send'Memory read' command 0x2E00, no data bit
		LCD_Write_COM16(0x2E,0x00);
		REG_PORT_OUTSET1 = LCD_DC;
    2130:	4f4a      	ldr	r7, [pc, #296]	; (225c <newLine+0x178>)
		
		
		//Read pixel data into the display	
		for(uint16_t getpixel = 0 ; getpixel < 800 ; getpixel++)
		{
			REG_PORT_OUTCLR1 = LCD_RD;
    2132:	2680      	movs	r6, #128	; 0x80
    2134:	0276      	lsls	r6, r6, #9
    2136:	e046      	b.n	21c6 <newLine+0xe2>
			//This can be expanded with else if for the MSBs
			//of all the colors; see datasheet page 40.
			if((PORT->Group[1].IN.reg & PORT_PB07) != 0)
				rowPixel[getpixel] = 0xFF;
			else
				rowPixel[getpixel] = 0x00;
    2138:	4653      	mov	r3, sl
    213a:	7023      	strb	r3, [r4, #0]
			//dummy read, because pixel data broken up
			//per datasheet page 40. Everything after
			//the dummy write is BLUE pixels. Do we ever
			//need blue? IDK.
			
			REG_PORT_OUTCLR1 = LCD_RD;
    213c:	4643      	mov	r3, r8
    213e:	601e      	str	r6, [r3, #0]
			REG_PORT_OUTSET1 = LCD_RD;
    2140:	603e      	str	r6, [r7, #0]
    2142:	3401      	adds	r4, #1
		for(uint16_t getpixel = 0 ; getpixel < 800 ; getpixel++)
    2144:	4564      	cmp	r4, ip
    2146:	d008      	beq.n	215a <newLine+0x76>
			REG_PORT_OUTCLR1 = LCD_RD;
    2148:	4643      	mov	r3, r8
    214a:	601e      	str	r6, [r3, #0]
			REG_PORT_OUTSET1 = LCD_RD;
    214c:	603e      	str	r6, [r7, #0]
			if((PORT->Group[1].IN.reg & PORT_PB07) != 0)
    214e:	5843      	ldr	r3, [r0, r1]
    2150:	421a      	tst	r2, r3
    2152:	d0f1      	beq.n	2138 <newLine+0x54>
				rowPixel[getpixel] = 0xFF;
    2154:	464b      	mov	r3, r9
    2156:	7023      	strb	r3, [r4, #0]
    2158:	e7f0      	b.n	213c <newLine+0x58>
    215a:	9401      	str	r4, [sp, #4]
		}
		
		REG_PORT_OUTSET1 = LCD_DC;
    215c:	2380      	movs	r3, #128	; 0x80
    215e:	041b      	lsls	r3, r3, #16
    2160:	603b      	str	r3, [r7, #0]
		REG_PORT_DIRSET1 = 0x0000FFFF;
    2162:	4a3f      	ldr	r2, [pc, #252]	; (2260 <newLine+0x17c>)
    2164:	4b3f      	ldr	r3, [pc, #252]	; (2264 <newLine+0x180>)
    2166:	601a      	str	r2, [r3, #0]
		
		//now, read out that line of the display
		setXY(0, row, 799, row);	
    2168:	9900      	ldr	r1, [sp, #0]
    216a:	000b      	movs	r3, r1
    216c:	4a3e      	ldr	r2, [pc, #248]	; (2268 <newLine+0x184>)
    216e:	2000      	movs	r0, #0
    2170:	4c3e      	ldr	r4, [pc, #248]	; (226c <newLine+0x188>)
    2172:	47a0      	blx	r4
		for(uint16_t writepixel = 0 ; writepixel < 800 ; writepixel++)
		{
			if((rowPixel[writepixel] == 0xFF))
				setPixel((fore_Color_High<<8)|fore_Color_Low);
			else
				setPixel((back_Color_High<<8)|back_Color_Low);
    2174:	4b3e      	ldr	r3, [pc, #248]	; (2270 <newLine+0x18c>)
    2176:	469b      	mov	fp, r3
    2178:	4b3e      	ldr	r3, [pc, #248]	; (2274 <newLine+0x190>)
    217a:	469a      	mov	sl, r3
    217c:	4b3e      	ldr	r3, [pc, #248]	; (2278 <newLine+0x194>)
    217e:	4699      	mov	r9, r3
    2180:	9c01      	ldr	r4, [sp, #4]
    2182:	e00b      	b.n	219c <newLine+0xb8>
				setPixel((fore_Color_High<<8)|fore_Color_Low);
    2184:	4b3d      	ldr	r3, [pc, #244]	; (227c <newLine+0x198>)
    2186:	8818      	ldrh	r0, [r3, #0]
    2188:	0200      	lsls	r0, r0, #8
    218a:	4b3d      	ldr	r3, [pc, #244]	; (2280 <newLine+0x19c>)
    218c:	881b      	ldrh	r3, [r3, #0]
    218e:	4318      	orrs	r0, r3
    2190:	b280      	uxth	r0, r0
    2192:	4b39      	ldr	r3, [pc, #228]	; (2278 <newLine+0x194>)
    2194:	4798      	blx	r3
    2196:	3501      	adds	r5, #1
		for(uint16_t writepixel = 0 ; writepixel < 800 ; writepixel++)
    2198:	42a5      	cmp	r5, r4
    219a:	d00b      	beq.n	21b4 <newLine+0xd0>
			if((rowPixel[writepixel] == 0xFF))
    219c:	782b      	ldrb	r3, [r5, #0]
    219e:	2bff      	cmp	r3, #255	; 0xff
    21a0:	d0f0      	beq.n	2184 <newLine+0xa0>
				setPixel((back_Color_High<<8)|back_Color_Low);
    21a2:	465b      	mov	r3, fp
    21a4:	8818      	ldrh	r0, [r3, #0]
    21a6:	0200      	lsls	r0, r0, #8
    21a8:	4653      	mov	r3, sl
    21aa:	881b      	ldrh	r3, [r3, #0]
    21ac:	4318      	orrs	r0, r3
    21ae:	b280      	uxth	r0, r0
    21b0:	47c8      	blx	r9
    21b2:	e7f0      	b.n	2196 <newLine+0xb2>
	for(uint16_t row = 0 ; row < 460 ; row++)
    21b4:	9b00      	ldr	r3, [sp, #0]
    21b6:	3301      	adds	r3, #1
    21b8:	b29b      	uxth	r3, r3
    21ba:	001a      	movs	r2, r3
    21bc:	9300      	str	r3, [sp, #0]
    21be:	23e6      	movs	r3, #230	; 0xe6
    21c0:	005b      	lsls	r3, r3, #1
    21c2:	429a      	cmp	r2, r3
    21c4:	d031      	beq.n	222a <newLine+0x146>
		REG_PORT_OUTCLR1 = LCD_CS;
    21c6:	4643      	mov	r3, r8
    21c8:	2280      	movs	r2, #128	; 0x80
    21ca:	03d2      	lsls	r2, r2, #15
    21cc:	601a      	str	r2, [r3, #0]
		setXY(0, row+20, 799, row+20);
    21ce:	9900      	ldr	r1, [sp, #0]
    21d0:	3114      	adds	r1, #20
    21d2:	b289      	uxth	r1, r1
    21d4:	000b      	movs	r3, r1
    21d6:	4a24      	ldr	r2, [pc, #144]	; (2268 <newLine+0x184>)
    21d8:	2000      	movs	r0, #0
    21da:	4c24      	ldr	r4, [pc, #144]	; (226c <newLine+0x188>)
    21dc:	47a0      	blx	r4
		LCD_Write_COM16(0x2E,0x00);
    21de:	2100      	movs	r1, #0
    21e0:	202e      	movs	r0, #46	; 0x2e
    21e2:	4b28      	ldr	r3, [pc, #160]	; (2284 <newLine+0x1a0>)
    21e4:	4798      	blx	r3
		REG_PORT_OUTSET1 = LCD_DC;
    21e6:	2380      	movs	r3, #128	; 0x80
    21e8:	041b      	lsls	r3, r3, #16
    21ea:	603b      	str	r3, [r7, #0]
		REG_PORT_OUTCLR1 = LCD_RD;
    21ec:	4643      	mov	r3, r8
    21ee:	2280      	movs	r2, #128	; 0x80
    21f0:	0252      	lsls	r2, r2, #9
    21f2:	601a      	str	r2, [r3, #0]
		REG_PORT_OUTSET1 = LCD_RD;
    21f4:	603a      	str	r2, [r7, #0]
		REG_PORT_DIRCLR1 = PORT_PB07;
    21f6:	2280      	movs	r2, #128	; 0x80
    21f8:	4b23      	ldr	r3, [pc, #140]	; (2288 <newLine+0x1a4>)
    21fa:	601a      	str	r2, [r3, #0]
		PORT->Group[1].PINCFG[7].bit.INEN = 1;
    21fc:	4a23      	ldr	r2, [pc, #140]	; (228c <newLine+0x1a8>)
    21fe:	23c7      	movs	r3, #199	; 0xc7
    2200:	5cd1      	ldrb	r1, [r2, r3]
    2202:	2002      	movs	r0, #2
    2204:	4301      	orrs	r1, r0
    2206:	54d1      	strb	r1, [r2, r3]
		PORT->Group[1].PINCFG[7].bit.PULLEN = 1;
    2208:	5cd1      	ldrb	r1, [r2, r3]
    220a:	2004      	movs	r0, #4
    220c:	4301      	orrs	r1, r0
    220e:	54d1      	strb	r1, [r2, r3]
    2210:	ad02      	add	r5, sp, #8
    2212:	abca      	add	r3, sp, #808	; 0x328
    2214:	469c      	mov	ip, r3
    2216:	9501      	str	r5, [sp, #4]
			if((PORT->Group[1].IN.reg & PORT_PB07) != 0)
    2218:	0010      	movs	r0, r2
    221a:	21a0      	movs	r1, #160	; 0xa0
    221c:	2280      	movs	r2, #128	; 0x80
				rowPixel[getpixel] = 0x00;
    221e:	2300      	movs	r3, #0
    2220:	469a      	mov	sl, r3
				rowPixel[getpixel] = 0xFF;
    2222:	33ff      	adds	r3, #255	; 0xff
    2224:	4699      	mov	r9, r3
    2226:	002c      	movs	r4, r5
    2228:	e78e      	b.n	2148 <newLine+0x64>
		}
	}
	
	//clear the last character line of the display
	//and fix the console text buffer
	fillRectBackColor(0, 460, 799, 480);
    222a:	3314      	adds	r3, #20
    222c:	4a0e      	ldr	r2, [pc, #56]	; (2268 <newLine+0x184>)
    222e:	21e6      	movs	r1, #230	; 0xe6
    2230:	0049      	lsls	r1, r1, #1
    2232:	2000      	movs	r0, #0
    2234:	4c16      	ldr	r4, [pc, #88]	; (2290 <newLine+0x1ac>)
    2236:	47a0      	blx	r4
	
	
}
    2238:	23cb      	movs	r3, #203	; 0xcb
    223a:	009b      	lsls	r3, r3, #2
    223c:	449d      	add	sp, r3
    223e:	bc3c      	pop	{r2, r3, r4, r5}
    2240:	4690      	mov	r8, r2
    2242:	4699      	mov	r9, r3
    2244:	46a2      	mov	sl, r4
    2246:	46ab      	mov	fp, r5
    2248:	bdf0      	pop	{r4, r5, r6, r7, pc}
    224a:	46c0      	nop			; (mov r8, r8)
    224c:	fffffcd4 	.word	0xfffffcd4
    2250:	20000318 	.word	0x20000318
    2254:	2000032f 	.word	0x2000032f
    2258:	41004494 	.word	0x41004494
    225c:	41004498 	.word	0x41004498
    2260:	0000ffff 	.word	0x0000ffff
    2264:	41004488 	.word	0x41004488
    2268:	0000031f 	.word	0x0000031f
    226c:	00002b29 	.word	0x00002b29
    2270:	20000a9e 	.word	0x20000a9e
    2274:	20000a98 	.word	0x20000a98
    2278:	00002ce9 	.word	0x00002ce9
    227c:	20000a9a 	.word	0x20000a9a
    2280:	20000a9c 	.word	0x20000a9c
    2284:	00002d55 	.word	0x00002d55
    2288:	41004484 	.word	0x41004484
    228c:	41004400 	.word	0x41004400
    2290:	00002c29 	.word	0x00002c29

00002294 <blinkCursor>:

void blinkCursor(void)
{
    2294:	b5f0      	push	{r4, r5, r6, r7, lr}
    2296:	46d6      	mov	lr, sl
    2298:	464f      	mov	r7, r9
    229a:	4646      	mov	r6, r8
    229c:	b5c0      	push	{r6, r7, lr}
	uint16_t x = xCharPos;
    229e:	4b47      	ldr	r3, [pc, #284]	; (23bc <blinkCursor+0x128>)
    22a0:	881b      	ldrh	r3, [r3, #0]
	uint16_t y = yCharPos;
    22a2:	4a47      	ldr	r2, [pc, #284]	; (23c0 <blinkCursor+0x12c>)
    22a4:	8815      	ldrh	r5, [r2, #0]
	unsigned char character = consoleDisplay[x][y];
    22a6:	005a      	lsls	r2, r3, #1
    22a8:	18d2      	adds	r2, r2, r3
    22aa:	00d2      	lsls	r2, r2, #3
    22ac:	4845      	ldr	r0, [pc, #276]	; (23c4 <blinkCursor+0x130>)
    22ae:	1882      	adds	r2, r0, r2
    22b0:	5d54      	ldrb	r4, [r2, r5]
	setXY(x*10,y*20,x*10+9,y*20+19);
    22b2:	0098      	lsls	r0, r3, #2
    22b4:	181b      	adds	r3, r3, r0
    22b6:	005b      	lsls	r3, r3, #1
    22b8:	b298      	uxth	r0, r3
    22ba:	2114      	movs	r1, #20
    22bc:	4369      	muls	r1, r5
    22be:	b289      	uxth	r1, r1
    22c0:	000b      	movs	r3, r1
    22c2:	3313      	adds	r3, #19
    22c4:	b29b      	uxth	r3, r3
    22c6:	0002      	movs	r2, r0
    22c8:	3209      	adds	r2, #9
    22ca:	b292      	uxth	r2, r2
    22cc:	4d3e      	ldr	r5, [pc, #248]	; (23c8 <blinkCursor+0x134>)
    22ce:	47a8      	blx	r5
	REG_PORT_OUTCLR1 = LCD_CS;
    22d0:	2280      	movs	r2, #128	; 0x80
    22d2:	03d2      	lsls	r2, r2, #15
    22d4:	4b3d      	ldr	r3, [pc, #244]	; (23cc <blinkCursor+0x138>)
    22d6:	601a      	str	r2, [r3, #0]
	if(cursorBlinkState)
    22d8:	4b3d      	ldr	r3, [pc, #244]	; (23d0 <blinkCursor+0x13c>)
    22da:	781b      	ldrb	r3, [r3, #0]
    22dc:	2b00      	cmp	r3, #0
    22de:	d113      	bne.n	2308 <blinkCursor+0x74>
    22e0:	4a3c      	ldr	r2, [pc, #240]	; (23d4 <blinkCursor+0x140>)
    22e2:	00a5      	lsls	r5, r4, #2
    22e4:	192d      	adds	r5, r5, r4
    22e6:	00ab      	lsls	r3, r5, #2
    22e8:	18ed      	adds	r5, r5, r3
    22ea:	1955      	adds	r5, r2, r5
    22ec:	3401      	adds	r4, #1
    22ee:	00a3      	lsls	r3, r4, #2
    22f0:	191c      	adds	r4, r3, r4
    22f2:	00a3      	lsls	r3, r4, #2
    22f4:	18e4      	adds	r4, r4, r3
    22f6:	4692      	mov	sl, r2
    22f8:	44a2      	add	sl, r4
				{
					setPixel((fore_Color_High<<8)|fore_Color_Low);
				}
				else
				{
					setPixel((back_Color_High<<8)|back_Color_Low);
    22fa:	4b37      	ldr	r3, [pc, #220]	; (23d8 <blinkCursor+0x144>)
    22fc:	4699      	mov	r9, r3
    22fe:	4b37      	ldr	r3, [pc, #220]	; (23dc <blinkCursor+0x148>)
    2300:	4698      	mov	r8, r3
    2302:	4f37      	ldr	r7, [pc, #220]	; (23e0 <blinkCursor+0x14c>)
					setPixel((fore_Color_High<<8)|fore_Color_Low);
    2304:	4e37      	ldr	r6, [pc, #220]	; (23e4 <blinkCursor+0x150>)
    2306:	e049      	b.n	239c <blinkCursor+0x108>
    2308:	4a32      	ldr	r2, [pc, #200]	; (23d4 <blinkCursor+0x140>)
    230a:	00a5      	lsls	r5, r4, #2
    230c:	192d      	adds	r5, r5, r4
    230e:	00ab      	lsls	r3, r5, #2
    2310:	18ed      	adds	r5, r5, r3
    2312:	1955      	adds	r5, r2, r5
    2314:	3401      	adds	r4, #1
    2316:	00a3      	lsls	r3, r4, #2
    2318:	191c      	adds	r4, r3, r4
    231a:	00a3      	lsls	r3, r4, #2
    231c:	18e4      	adds	r4, r4, r3
    231e:	4692      	mov	sl, r2
    2320:	44a2      	add	sl, r4
					setPixel((fore_Color_High<<8)|fore_Color_Low);
    2322:	4b30      	ldr	r3, [pc, #192]	; (23e4 <blinkCursor+0x150>)
    2324:	4699      	mov	r9, r3
    2326:	4b30      	ldr	r3, [pc, #192]	; (23e8 <blinkCursor+0x154>)
    2328:	4698      	mov	r8, r3
    232a:	4f2d      	ldr	r7, [pc, #180]	; (23e0 <blinkCursor+0x14c>)
					setPixel((back_Color_High<<8)|back_Color_Low);
    232c:	4e2a      	ldr	r6, [pc, #168]	; (23d8 <blinkCursor+0x144>)
    232e:	e019      	b.n	2364 <blinkCursor+0xd0>
					setPixel((fore_Color_High<<8)|fore_Color_Low);
    2330:	464b      	mov	r3, r9
    2332:	8818      	ldrh	r0, [r3, #0]
    2334:	0200      	lsls	r0, r0, #8
    2336:	4643      	mov	r3, r8
    2338:	881b      	ldrh	r3, [r3, #0]
    233a:	4318      	orrs	r0, r3
    233c:	b280      	uxth	r0, r0
    233e:	47b8      	blx	r7
			for(int j=0;j<8;j++)
    2340:	3c01      	subs	r4, #1
    2342:	d30c      	bcc.n	235e <blinkCursor+0xca>
				if((CodePage437[character][i]&(1<<(7-j)))!=0)
    2344:	782b      	ldrb	r3, [r5, #0]
    2346:	4123      	asrs	r3, r4
    2348:	07db      	lsls	r3, r3, #31
    234a:	d5f1      	bpl.n	2330 <blinkCursor+0x9c>
					setPixel((back_Color_High<<8)|back_Color_Low);
    234c:	8830      	ldrh	r0, [r6, #0]
    234e:	0200      	lsls	r0, r0, #8
    2350:	4b22      	ldr	r3, [pc, #136]	; (23dc <blinkCursor+0x148>)
    2352:	881b      	ldrh	r3, [r3, #0]
    2354:	4318      	orrs	r0, r3
    2356:	b280      	uxth	r0, r0
    2358:	4b21      	ldr	r3, [pc, #132]	; (23e0 <blinkCursor+0x14c>)
    235a:	4798      	blx	r3
    235c:	e7f0      	b.n	2340 <blinkCursor+0xac>
    235e:	3501      	adds	r5, #1
		for(uint16_t i=0; i <= 24; i++)
    2360:	4555      	cmp	r5, sl
    2362:	d01d      	beq.n	23a0 <blinkCursor+0x10c>
{
    2364:	2407      	movs	r4, #7
    2366:	e7ed      	b.n	2344 <blinkCursor+0xb0>
					setPixel((back_Color_High<<8)|back_Color_Low);
    2368:	464b      	mov	r3, r9
    236a:	8818      	ldrh	r0, [r3, #0]
    236c:	0200      	lsls	r0, r0, #8
    236e:	4643      	mov	r3, r8
    2370:	881b      	ldrh	r3, [r3, #0]
    2372:	4318      	orrs	r0, r3
    2374:	b280      	uxth	r0, r0
    2376:	47b8      	blx	r7
			for(int j=0;j<8;j++)
    2378:	3c01      	subs	r4, #1
    237a:	d30c      	bcc.n	2396 <blinkCursor+0x102>
				if((CodePage437[character][i]&(1<<(7-j)))!=0)
    237c:	782b      	ldrb	r3, [r5, #0]
    237e:	4123      	asrs	r3, r4
    2380:	07db      	lsls	r3, r3, #31
    2382:	d5f1      	bpl.n	2368 <blinkCursor+0xd4>
					setPixel((fore_Color_High<<8)|fore_Color_Low);
    2384:	8830      	ldrh	r0, [r6, #0]
    2386:	0200      	lsls	r0, r0, #8
    2388:	4b17      	ldr	r3, [pc, #92]	; (23e8 <blinkCursor+0x154>)
    238a:	881b      	ldrh	r3, [r3, #0]
    238c:	4318      	orrs	r0, r3
    238e:	b280      	uxth	r0, r0
    2390:	4b13      	ldr	r3, [pc, #76]	; (23e0 <blinkCursor+0x14c>)
    2392:	4798      	blx	r3
    2394:	e7f0      	b.n	2378 <blinkCursor+0xe4>
    2396:	3501      	adds	r5, #1
		for(uint16_t i=0; i <= 24; i++)
    2398:	4555      	cmp	r5, sl
    239a:	d001      	beq.n	23a0 <blinkCursor+0x10c>
{
    239c:	2407      	movs	r4, #7
    239e:	e7ed      	b.n	237c <blinkCursor+0xe8>
				}
			}
		}
	}

	REG_PORT_OUTSET1 = LCD_CS;
    23a0:	2280      	movs	r2, #128	; 0x80
    23a2:	03d2      	lsls	r2, r2, #15
    23a4:	4b11      	ldr	r3, [pc, #68]	; (23ec <blinkCursor+0x158>)
    23a6:	601a      	str	r2, [r3, #0]
	
	//invert cursorBlinkState
	cursorBlinkState = !cursorBlinkState;
    23a8:	4a09      	ldr	r2, [pc, #36]	; (23d0 <blinkCursor+0x13c>)
    23aa:	7813      	ldrb	r3, [r2, #0]
    23ac:	2101      	movs	r1, #1
    23ae:	404b      	eors	r3, r1
    23b0:	7013      	strb	r3, [r2, #0]
	
}
    23b2:	bc1c      	pop	{r2, r3, r4}
    23b4:	4690      	mov	r8, r2
    23b6:	4699      	mov	r9, r3
    23b8:	46a2      	mov	sl, r4
    23ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    23bc:	2000029c 	.word	0x2000029c
    23c0:	2000029e 	.word	0x2000029e
    23c4:	20000318 	.word	0x20000318
    23c8:	00002b29 	.word	0x00002b29
    23cc:	41004494 	.word	0x41004494
    23d0:	20000010 	.word	0x20000010
    23d4:	00004ec8 	.word	0x00004ec8
    23d8:	20000a9e 	.word	0x20000a9e
    23dc:	20000a98 	.word	0x20000a98
    23e0:	00002ce9 	.word	0x00002ce9
    23e4:	20000a9a 	.word	0x20000a9a
    23e8:	20000a9c 	.word	0x20000a9c
    23ec:	41004498 	.word	0x41004498

000023f0 <writeString>:

void writeString(const char str[])
{
    23f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    23f2:	46c6      	mov	lr, r8
    23f4:	b500      	push	{lr}
    23f6:	0005      	movs	r5, r0
	int length = strlen(str);
    23f8:	4b0c      	ldr	r3, [pc, #48]	; (242c <writeString+0x3c>)
    23fa:	4798      	blx	r3
	for(int i = 0; i < length; i++)
    23fc:	2800      	cmp	r0, #0
    23fe:	dd11      	ble.n	2424 <writeString+0x34>
    2400:	002c      	movs	r4, r5
    2402:	182d      	adds	r5, r5, r0
	{
		drawChar(str[i]);
    2404:	4f0a      	ldr	r7, [pc, #40]	; (2430 <writeString+0x40>)
		if(xCharPos <= 80)
    2406:	4e0b      	ldr	r6, [pc, #44]	; (2434 <writeString+0x44>)
		xCharPos++;
    2408:	46b0      	mov	r8, r6
    240a:	e002      	b.n	2412 <writeString+0x22>
    240c:	3401      	adds	r4, #1
	for(int i = 0; i < length; i++)
    240e:	42ac      	cmp	r4, r5
    2410:	d008      	beq.n	2424 <writeString+0x34>
		drawChar(str[i]);
    2412:	7820      	ldrb	r0, [r4, #0]
    2414:	47b8      	blx	r7
		if(xCharPos <= 80)
    2416:	8833      	ldrh	r3, [r6, #0]
    2418:	2b50      	cmp	r3, #80	; 0x50
    241a:	d8f7      	bhi.n	240c <writeString+0x1c>
		xCharPos++;
    241c:	3301      	adds	r3, #1
    241e:	4642      	mov	r2, r8
    2420:	8013      	strh	r3, [r2, #0]
    2422:	e7f3      	b.n	240c <writeString+0x1c>
	}
}
    2424:	bc04      	pop	{r2}
    2426:	4690      	mov	r8, r2
    2428:	bdf0      	pop	{r4, r5, r6, r7, pc}
    242a:	46c0      	nop			; (mov r8, r8)
    242c:	00003bc1 	.word	0x00003bc1
    2430:	00001ffd 	.word	0x00001ffd
    2434:	2000029c 	.word	0x2000029c

00002438 <scanCodesContains>:

bool scanCodesContains(int scanCode)
{
	for(int i = 0 ; i < 70 ; i++)
	{
		if(scanCodes[i] == scanCode)
    2438:	4b09      	ldr	r3, [pc, #36]	; (2460 <scanCodesContains+0x28>)
    243a:	681b      	ldr	r3, [r3, #0]
    243c:	4298      	cmp	r0, r3
    243e:	d00b      	beq.n	2458 <scanCodesContains+0x20>
    2440:	4a07      	ldr	r2, [pc, #28]	; (2460 <scanCodesContains+0x28>)
    2442:	1d13      	adds	r3, r2, #4
    2444:	3219      	adds	r2, #25
    2446:	32ff      	adds	r2, #255	; 0xff
    2448:	6819      	ldr	r1, [r3, #0]
    244a:	4281      	cmp	r1, r0
    244c:	d006      	beq.n	245c <scanCodesContains+0x24>
    244e:	3304      	adds	r3, #4
	for(int i = 0 ; i < 70 ; i++)
    2450:	4293      	cmp	r3, r2
    2452:	d1f9      	bne.n	2448 <scanCodesContains+0x10>
		{
			return true;
		}
	}
	return false;
    2454:	2000      	movs	r0, #0
    2456:	e002      	b.n	245e <scanCodesContains+0x26>
			return true;
    2458:	2001      	movs	r0, #1
    245a:	e000      	b.n	245e <scanCodesContains+0x26>
    245c:	2001      	movs	r0, #1
}
    245e:	4770      	bx	lr
    2460:	2000003c 	.word	0x2000003c

00002464 <keyDown>:

bool keyDown(int scancode)
{
	for(int i = 0 ; i < 20 ; i++)
	{
		if(keyDownBuffer[i] == scancode)
    2464:	4b09      	ldr	r3, [pc, #36]	; (248c <keyDown+0x28>)
    2466:	781b      	ldrb	r3, [r3, #0]
    2468:	4298      	cmp	r0, r3
    246a:	d00a      	beq.n	2482 <keyDown+0x1e>
    246c:	4907      	ldr	r1, [pc, #28]	; (248c <keyDown+0x28>)
    246e:	1c4b      	adds	r3, r1, #1
    2470:	3114      	adds	r1, #20
    2472:	781a      	ldrb	r2, [r3, #0]
    2474:	4282      	cmp	r2, r0
    2476:	d006      	beq.n	2486 <keyDown+0x22>
    2478:	3301      	adds	r3, #1
	for(int i = 0 ; i < 20 ; i++)
    247a:	428b      	cmp	r3, r1
    247c:	d1f9      	bne.n	2472 <keyDown+0xe>
		{
			return true;
		}	
	}
	return false;
    247e:	2000      	movs	r0, #0
}
    2480:	4770      	bx	lr
			return true;
    2482:	2001      	movs	r0, #1
    2484:	e7fc      	b.n	2480 <keyDown+0x1c>
    2486:	2001      	movs	r0, #1
    2488:	e7fa      	b.n	2480 <keyDown+0x1c>
    248a:	46c0      	nop			; (mov r8, r8)
    248c:	20000014 	.word	0x20000014

00002490 <removeFromKeyDown>:

void removeFromKeyDown(int scancode)
{
    2490:	b510      	push	{r4, lr}
    2492:	4b07      	ldr	r3, [pc, #28]	; (24b0 <removeFromKeyDown+0x20>)
    2494:	0019      	movs	r1, r3
    2496:	3114      	adds	r1, #20
	for(int i = 0 ; i < 20 ; i++)
	{
		if(keyDownBuffer[i] == scancode)
		{
			keyDownBuffer[i] = 0xFF;
    2498:	24ff      	movs	r4, #255	; 0xff
    249a:	e002      	b.n	24a2 <removeFromKeyDown+0x12>
    249c:	3301      	adds	r3, #1
	for(int i = 0 ; i < 20 ; i++)
    249e:	428b      	cmp	r3, r1
    24a0:	d004      	beq.n	24ac <removeFromKeyDown+0x1c>
		if(keyDownBuffer[i] == scancode)
    24a2:	781a      	ldrb	r2, [r3, #0]
    24a4:	4282      	cmp	r2, r0
    24a6:	d1f9      	bne.n	249c <removeFromKeyDown+0xc>
			keyDownBuffer[i] = 0xFF;
    24a8:	701c      	strb	r4, [r3, #0]
    24aa:	e7f7      	b.n	249c <removeFromKeyDown+0xc>
		}
	}
}
    24ac:	bd10      	pop	{r4, pc}
    24ae:	46c0      	nop			; (mov r8, r8)
    24b0:	20000014 	.word	0x20000014

000024b4 <readKeyboard>:
{
    24b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    24b6:	46de      	mov	lr, fp
    24b8:	4657      	mov	r7, sl
    24ba:	464e      	mov	r6, r9
    24bc:	4645      	mov	r5, r8
    24be:	b5e0      	push	{r5, r6, r7, lr}
    24c0:	b083      	sub	sp, #12
    24c2:	4e6d      	ldr	r6, [pc, #436]	; (2678 <readKeyboard+0x1c4>)
    24c4:	0031      	movs	r1, r6
    24c6:	3119      	adds	r1, #25
    24c8:	31ff      	adds	r1, #255	; 0xff
    24ca:	0033      	movs	r3, r6
		scanCodes[i] = 0xFF;
    24cc:	22ff      	movs	r2, #255	; 0xff
    24ce:	c304      	stmia	r3!, {r2}
	for(i = 0 ; i < 70 ; i++)
    24d0:	428b      	cmp	r3, r1
    24d2:	d1fc      	bne.n	24ce <readKeyboard+0x1a>
	PORT->Group[0].WRCONFIG.bit.DRVSTR = 1;
    24d4:	4a69      	ldr	r2, [pc, #420]	; (267c <readKeyboard+0x1c8>)
    24d6:	6a91      	ldr	r1, [r2, #40]	; 0x28
    24d8:	2380      	movs	r3, #128	; 0x80
    24da:	03db      	lsls	r3, r3, #15
    24dc:	430b      	orrs	r3, r1
    24de:	6293      	str	r3, [r2, #40]	; 0x28
    24e0:	4c67      	ldr	r4, [pc, #412]	; (2680 <readKeyboard+0x1cc>)
    24e2:	341c      	adds	r4, #28
    24e4:	4b66      	ldr	r3, [pc, #408]	; (2680 <readKeyboard+0x1cc>)
		REG_PORT_DIRSET0 = kb_col[i];
    24e6:	4867      	ldr	r0, [pc, #412]	; (2684 <readKeyboard+0x1d0>)
		REG_PORT_OUTCLR0 = kb_col[i];
    24e8:	4967      	ldr	r1, [pc, #412]	; (2688 <readKeyboard+0x1d4>)
		REG_PORT_DIRSET0 = kb_col[i];
    24ea:	681a      	ldr	r2, [r3, #0]
    24ec:	6002      	str	r2, [r0, #0]
		REG_PORT_OUTCLR0 = kb_col[i];
    24ee:	cb04      	ldmia	r3!, {r2}
    24f0:	600a      	str	r2, [r1, #0]
	for (i = 0; i < NUM_COL; i++) {
    24f2:	42a3      	cmp	r3, r4
    24f4:	d1f9      	bne.n	24ea <readKeyboard+0x36>
    24f6:	2200      	movs	r2, #0
		REG_PORT_DIRCLR0 = kb_row[i];
    24f8:	4b64      	ldr	r3, [pc, #400]	; (268c <readKeyboard+0x1d8>)
    24fa:	469c      	mov	ip, r3
    24fc:	4f64      	ldr	r7, [pc, #400]	; (2690 <readKeyboard+0x1dc>)
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.PULLEN = 1;
    24fe:	4d65      	ldr	r5, [pc, #404]	; (2694 <readKeyboard+0x1e0>)
    2500:	2404      	movs	r4, #4
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.INEN = 1;
    2502:	2002      	movs	r0, #2
		REG_PORT_DIRCLR0 = kb_row[i];
    2504:	4663      	mov	r3, ip
    2506:	58d3      	ldr	r3, [r2, r3]
    2508:	603b      	str	r3, [r7, #0]
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.PULLEN = 1;
    250a:	5953      	ldr	r3, [r2, r5]
    250c:	4962      	ldr	r1, [pc, #392]	; (2698 <readKeyboard+0x1e4>)
    250e:	4688      	mov	r8, r1
    2510:	4443      	add	r3, r8
    2512:	7819      	ldrb	r1, [r3, #0]
    2514:	4321      	orrs	r1, r4
    2516:	7019      	strb	r1, [r3, #0]
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.INEN = 1;
    2518:	7819      	ldrb	r1, [r3, #0]
    251a:	4301      	orrs	r1, r0
    251c:	7019      	strb	r1, [r3, #0]
    251e:	3204      	adds	r2, #4
	for (i = 0; i < NUM_ROW; i++) {
    2520:	2a28      	cmp	r2, #40	; 0x28
    2522:	d1ef      	bne.n	2504 <readKeyboard+0x50>
    2524:	4b56      	ldr	r3, [pc, #344]	; (2680 <readKeyboard+0x1cc>)
    2526:	4699      	mov	r9, r3
    2528:	2300      	movs	r3, #0
    252a:	4698      	mov	r8, r3
    252c:	2200      	movs	r2, #0
		REG_PORT_OUTSET0 = kb_col[i];
    252e:	4b5b      	ldr	r3, [pc, #364]	; (269c <readKeyboard+0x1e8>)
    2530:	469b      	mov	fp, r3
			if((PORT->Group[0].IN.reg & kb_row[j]) != 0) {
    2532:	4d52      	ldr	r5, [pc, #328]	; (267c <readKeyboard+0x1c8>)
				scanCodes[scanCodeIndex] = (i * NUM_ROW) + j;
    2534:	4b50      	ldr	r3, [pc, #320]	; (2678 <readKeyboard+0x1c4>)
    2536:	469c      	mov	ip, r3
		REG_PORT_OUTCLR0 = kb_col[i];
    2538:	4b53      	ldr	r3, [pc, #332]	; (2688 <readKeyboard+0x1d4>)
    253a:	469a      	mov	sl, r3
    253c:	9601      	str	r6, [sp, #4]
    253e:	464e      	mov	r6, r9
    2540:	4647      	mov	r7, r8
    2542:	e015      	b.n	2570 <readKeyboard+0xbc>
    2544:	3304      	adds	r3, #4
    2546:	3101      	adds	r1, #1
		for (j = 0; j < NUM_ROW; j++) {	
    2548:	42a3      	cmp	r3, r4
    254a:	d008      	beq.n	255e <readKeyboard+0xaa>
			if((PORT->Group[0].IN.reg & kb_row[j]) != 0) {
    254c:	6a28      	ldr	r0, [r5, #32]
    254e:	681e      	ldr	r6, [r3, #0]
    2550:	4206      	tst	r6, r0
    2552:	d0f7      	beq.n	2544 <readKeyboard+0x90>
				scanCodes[scanCodeIndex] = (i * NUM_ROW) + j;
    2554:	0090      	lsls	r0, r2, #2
    2556:	4666      	mov	r6, ip
    2558:	5181      	str	r1, [r0, r6]
				scanCodeIndex++;
    255a:	3201      	adds	r2, #1
    255c:	e7f2      	b.n	2544 <readKeyboard+0x90>
    255e:	9e00      	ldr	r6, [sp, #0]
		REG_PORT_OUTCLR0 = kb_col[i];
    2560:	4649      	mov	r1, r9
    2562:	6809      	ldr	r1, [r1, #0]
    2564:	4650      	mov	r0, sl
    2566:	6001      	str	r1, [r0, #0]
    2568:	3604      	adds	r6, #4
    256a:	370a      	adds	r7, #10
	for (i = 0; i < NUM_COL; i++) {
    256c:	2f46      	cmp	r7, #70	; 0x46
    256e:	d00a      	beq.n	2586 <readKeyboard+0xd2>
    2570:	46b1      	mov	r9, r6
		REG_PORT_OUTSET0 = kb_col[i];
    2572:	465b      	mov	r3, fp
    2574:	6831      	ldr	r1, [r6, #0]
    2576:	6019      	str	r1, [r3, #0]
    2578:	4b44      	ldr	r3, [pc, #272]	; (268c <readKeyboard+0x1d8>)
    257a:	4698      	mov	r8, r3
    257c:	001c      	movs	r4, r3
    257e:	3428      	adds	r4, #40	; 0x28
    2580:	0039      	movs	r1, r7
    2582:	9600      	str	r6, [sp, #0]
    2584:	e7e2      	b.n	254c <readKeyboard+0x98>
    2586:	4647      	mov	r7, r8
    2588:	9e01      	ldr	r6, [sp, #4]
    258a:	4641      	mov	r1, r8
		REG_PORT_DIRSET0 = kb_row[i];
    258c:	4d3d      	ldr	r5, [pc, #244]	; (2684 <readKeyboard+0x1d0>)
		REG_PORT_OUTCLR0 = kb_row[i];
    258e:	4c3e      	ldr	r4, [pc, #248]	; (2688 <readKeyboard+0x1d4>)
		REG_PORT_DIRSET0 = kb_row[i];
    2590:	6808      	ldr	r0, [r1, #0]
    2592:	6028      	str	r0, [r5, #0]
		REG_PORT_OUTCLR0 = kb_row[i];
    2594:	c901      	ldmia	r1!, {r0}
    2596:	6020      	str	r0, [r4, #0]
	for (i = 0; i < NUM_ROW; i++) {
    2598:	4299      	cmp	r1, r3
    259a:	d1f9      	bne.n	2590 <readKeyboard+0xdc>
    259c:	2100      	movs	r1, #0
		REG_PORT_DIRCLR0 = kb_col[i];
    259e:	4b38      	ldr	r3, [pc, #224]	; (2680 <readKeyboard+0x1cc>)
    25a0:	4699      	mov	r9, r3
    25a2:	4b3b      	ldr	r3, [pc, #236]	; (2690 <readKeyboard+0x1dc>)
    25a4:	4698      	mov	r8, r3
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.PULLEN = 1;
    25a6:	4b3e      	ldr	r3, [pc, #248]	; (26a0 <readKeyboard+0x1ec>)
    25a8:	469c      	mov	ip, r3
    25aa:	2504      	movs	r5, #4
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.INEN = 1;
    25ac:	2402      	movs	r4, #2
		REG_PORT_DIRCLR0 = kb_col[i];
    25ae:	4643      	mov	r3, r8
    25b0:	4648      	mov	r0, r9
    25b2:	5808      	ldr	r0, [r1, r0]
    25b4:	6018      	str	r0, [r3, #0]
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.PULLEN = 1;
    25b6:	4663      	mov	r3, ip
    25b8:	58cb      	ldr	r3, [r1, r3]
    25ba:	4837      	ldr	r0, [pc, #220]	; (2698 <readKeyboard+0x1e4>)
    25bc:	4682      	mov	sl, r0
    25be:	4453      	add	r3, sl
    25c0:	7818      	ldrb	r0, [r3, #0]
    25c2:	4328      	orrs	r0, r5
    25c4:	7018      	strb	r0, [r3, #0]
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.INEN = 1;
    25c6:	7818      	ldrb	r0, [r3, #0]
    25c8:	4320      	orrs	r0, r4
    25ca:	7018      	strb	r0, [r3, #0]
    25cc:	3104      	adds	r1, #4
	for (i = 0; i < NUM_COL; i++) {
    25ce:	291c      	cmp	r1, #28
    25d0:	d1ed      	bne.n	25ae <readKeyboard+0xfa>
    25d2:	2300      	movs	r3, #0
    25d4:	469c      	mov	ip, r3
		REG_PORT_OUTSET0 = kb_row[i];
    25d6:	4b31      	ldr	r3, [pc, #196]	; (269c <readKeyboard+0x1e8>)
    25d8:	469b      	mov	fp, r3
			if((PORT->Group[0].IN.reg & kb_col[j]) != 0)
    25da:	4d28      	ldr	r5, [pc, #160]	; (267c <readKeyboard+0x1c8>)
				scanCodes[scanCodeIndex] = (j * NUM_ROW) + i;
    25dc:	4b26      	ldr	r3, [pc, #152]	; (2678 <readKeyboard+0x1c4>)
    25de:	4698      	mov	r8, r3
		REG_PORT_OUTCLR0 = kb_row[i];
    25e0:	4b29      	ldr	r3, [pc, #164]	; (2688 <readKeyboard+0x1d4>)
    25e2:	469a      	mov	sl, r3
    25e4:	46b1      	mov	r9, r6
    25e6:	003e      	movs	r6, r7
    25e8:	4667      	mov	r7, ip
    25ea:	e015      	b.n	2618 <readKeyboard+0x164>
    25ec:	3104      	adds	r1, #4
    25ee:	330a      	adds	r3, #10
		for (j = 0; j < NUM_COL; j++) {
    25f0:	42a3      	cmp	r3, r4
    25f2:	d008      	beq.n	2606 <readKeyboard+0x152>
			if((PORT->Group[0].IN.reg & kb_col[j]) != 0)
    25f4:	6a28      	ldr	r0, [r5, #32]
    25f6:	680e      	ldr	r6, [r1, #0]
    25f8:	4206      	tst	r6, r0
    25fa:	d0f7      	beq.n	25ec <readKeyboard+0x138>
				scanCodes[scanCodeIndex] = (j * NUM_ROW) + i;
    25fc:	0090      	lsls	r0, r2, #2
    25fe:	4646      	mov	r6, r8
    2600:	5183      	str	r3, [r0, r6]
				scanCodeIndex++;
    2602:	3201      	adds	r2, #1
    2604:	e7f2      	b.n	25ec <readKeyboard+0x138>
    2606:	9e00      	ldr	r6, [sp, #0]
		REG_PORT_OUTCLR0 = kb_row[i];
    2608:	4663      	mov	r3, ip
    260a:	681b      	ldr	r3, [r3, #0]
    260c:	4651      	mov	r1, sl
    260e:	600b      	str	r3, [r1, #0]
	for (i = 0; i < NUM_ROW; i++) {
    2610:	3701      	adds	r7, #1
    2612:	3604      	adds	r6, #4
    2614:	2f0a      	cmp	r7, #10
    2616:	d009      	beq.n	262c <readKeyboard+0x178>
    2618:	46b4      	mov	ip, r6
		REG_PORT_OUTSET0 = kb_row[i];
    261a:	465b      	mov	r3, fp
    261c:	6831      	ldr	r1, [r6, #0]
    261e:	6019      	str	r1, [r3, #0]
    2620:	003b      	movs	r3, r7
    2622:	003c      	movs	r4, r7
    2624:	3446      	adds	r4, #70	; 0x46
    2626:	4916      	ldr	r1, [pc, #88]	; (2680 <readKeyboard+0x1cc>)
    2628:	9600      	str	r6, [sp, #0]
    262a:	e7e3      	b.n	25f4 <readKeyboard+0x140>
    262c:	464e      	mov	r6, r9
	for(i = 0 ; i < scanCodeIndex ; i++)
    262e:	2a00      	cmp	r2, #0
    2630:	dd08      	ble.n	2644 <readKeyboard+0x190>
    2632:	4b1c      	ldr	r3, [pc, #112]	; (26a4 <readKeyboard+0x1f0>)
    2634:	0092      	lsls	r2, r2, #2
    2636:	4910      	ldr	r1, [pc, #64]	; (2678 <readKeyboard+0x1c4>)
    2638:	188a      	adds	r2, r1, r2
		scanCodeBuffer[i] = scanCodes[i];	
    263a:	ce02      	ldmia	r6!, {r1}
    263c:	7019      	strb	r1, [r3, #0]
    263e:	3301      	adds	r3, #1
	for(i = 0 ; i < scanCodeIndex ; i++)
    2640:	42b2      	cmp	r2, r6
    2642:	d1fa      	bne.n	263a <readKeyboard+0x186>
		REG_PORT_OUTSET0 = kb_row[i];
    2644:	2400      	movs	r4, #0
		if(keyDown(i) && !scanCodesContains(i))
    2646:	4d18      	ldr	r5, [pc, #96]	; (26a8 <readKeyboard+0x1f4>)
    2648:	4e18      	ldr	r6, [pc, #96]	; (26ac <readKeyboard+0x1f8>)
			removeFromKeyDown(i);
    264a:	4f19      	ldr	r7, [pc, #100]	; (26b0 <readKeyboard+0x1fc>)
    264c:	e002      	b.n	2654 <readKeyboard+0x1a0>
	for(i = 0; i < 70; i++)
    264e:	3401      	adds	r4, #1
    2650:	2c46      	cmp	r4, #70	; 0x46
    2652:	d00a      	beq.n	266a <readKeyboard+0x1b6>
		if(keyDown(i) && !scanCodesContains(i))
    2654:	0020      	movs	r0, r4
    2656:	47a8      	blx	r5
    2658:	2800      	cmp	r0, #0
    265a:	d0f8      	beq.n	264e <readKeyboard+0x19a>
    265c:	0020      	movs	r0, r4
    265e:	47b0      	blx	r6
    2660:	2800      	cmp	r0, #0
    2662:	d1f4      	bne.n	264e <readKeyboard+0x19a>
			removeFromKeyDown(i);
    2664:	0020      	movs	r0, r4
    2666:	47b8      	blx	r7
    2668:	e7f1      	b.n	264e <readKeyboard+0x19a>
}
    266a:	b003      	add	sp, #12
    266c:	bc3c      	pop	{r2, r3, r4, r5}
    266e:	4690      	mov	r8, r2
    2670:	4699      	mov	r9, r3
    2672:	46a2      	mov	sl, r4
    2674:	46ab      	mov	fp, r5
    2676:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2678:	2000003c 	.word	0x2000003c
    267c:	41004400 	.word	0x41004400
    2680:	000068e8 	.word	0x000068e8
    2684:	41004408 	.word	0x41004408
    2688:	41004414 	.word	0x41004414
    268c:	00006920 	.word	0x00006920
    2690:	41004404 	.word	0x41004404
    2694:	00006948 	.word	0x00006948
    2698:	41004440 	.word	0x41004440
    269c:	41004418 	.word	0x41004418
    26a0:	00006904 	.word	0x00006904
    26a4:	20000028 	.word	0x20000028
    26a8:	00002465 	.word	0x00002465
    26ac:	00002439 	.word	0x00002439
    26b0:	00002491 	.word	0x00002491

000026b4 <arrowKey>:

void arrowKey(int scancode)
{
    26b4:	b570      	push	{r4, r5, r6, lr}
	unsigned char tempCharacter;
	//Arrow key handling
	if(scancode == 35) //left
    26b6:	2823      	cmp	r0, #35	; 0x23
    26b8:	d006      	beq.n	26c8 <arrowKey+0x14>
			tempCharacter = consoleDisplay[xCharPos][yCharPos];
			drawChar(tempCharacter);
			blinkCursor();
		}
	}
	else if(scancode  == 45)	//down
    26ba:	282d      	cmp	r0, #45	; 0x2d
    26bc:	d021      	beq.n	2702 <arrowKey+0x4e>
			tempCharacter = consoleDisplay[xCharPos][yCharPos];
			drawChar(tempCharacter);
			blinkCursor();
		}
	}
	else if(scancode  == 55)	//up
    26be:	2837      	cmp	r0, #55	; 0x37
    26c0:	d03c      	beq.n	273c <arrowKey+0x88>
			tempCharacter = consoleDisplay[xCharPos][yCharPos];
			drawChar(tempCharacter);
			blinkCursor();
		}
	}
	else if(scancode  == 65)	//right
    26c2:	2841      	cmp	r0, #65	; 0x41
    26c4:	d057      	beq.n	2776 <arrowKey+0xc2>
			tempCharacter = consoleDisplay[xCharPos][yCharPos];
			drawChar(tempCharacter);
			blinkCursor();
		}
	}
}
    26c6:	bd70      	pop	{r4, r5, r6, pc}
		if(xCharPos > 0)
    26c8:	4b39      	ldr	r3, [pc, #228]	; (27b0 <arrowKey+0xfc>)
    26ca:	881b      	ldrh	r3, [r3, #0]
    26cc:	2b00      	cmp	r3, #0
    26ce:	d0fa      	beq.n	26c6 <arrowKey+0x12>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    26d0:	4c38      	ldr	r4, [pc, #224]	; (27b4 <arrowKey+0x100>)
    26d2:	4d39      	ldr	r5, [pc, #228]	; (27b8 <arrowKey+0x104>)
    26d4:	8829      	ldrh	r1, [r5, #0]
    26d6:	005a      	lsls	r2, r3, #1
    26d8:	18d3      	adds	r3, r2, r3
    26da:	00db      	lsls	r3, r3, #3
    26dc:	18e3      	adds	r3, r4, r3
    26de:	5c58      	ldrb	r0, [r3, r1]
    26e0:	4e36      	ldr	r6, [pc, #216]	; (27bc <arrowKey+0x108>)
    26e2:	47b0      	blx	r6
			xCharPos--;
    26e4:	4a32      	ldr	r2, [pc, #200]	; (27b0 <arrowKey+0xfc>)
    26e6:	8813      	ldrh	r3, [r2, #0]
    26e8:	3b01      	subs	r3, #1
    26ea:	b29b      	uxth	r3, r3
    26ec:	8013      	strh	r3, [r2, #0]
			tempCharacter = consoleDisplay[xCharPos][yCharPos];
    26ee:	8829      	ldrh	r1, [r5, #0]
    26f0:	005a      	lsls	r2, r3, #1
    26f2:	18d3      	adds	r3, r2, r3
    26f4:	00db      	lsls	r3, r3, #3
    26f6:	18e3      	adds	r3, r4, r3
			drawChar(tempCharacter);
    26f8:	5c58      	ldrb	r0, [r3, r1]
    26fa:	47b0      	blx	r6
			blinkCursor();
    26fc:	4b30      	ldr	r3, [pc, #192]	; (27c0 <arrowKey+0x10c>)
    26fe:	4798      	blx	r3
    2700:	e7e1      	b.n	26c6 <arrowKey+0x12>
		if(yCharPos < 23)
    2702:	4b2d      	ldr	r3, [pc, #180]	; (27b8 <arrowKey+0x104>)
    2704:	881a      	ldrh	r2, [r3, #0]
    2706:	2a16      	cmp	r2, #22
    2708:	d8dd      	bhi.n	26c6 <arrowKey+0x12>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    270a:	4c2a      	ldr	r4, [pc, #168]	; (27b4 <arrowKey+0x100>)
    270c:	4d28      	ldr	r5, [pc, #160]	; (27b0 <arrowKey+0xfc>)
    270e:	8829      	ldrh	r1, [r5, #0]
    2710:	004b      	lsls	r3, r1, #1
    2712:	185b      	adds	r3, r3, r1
    2714:	00db      	lsls	r3, r3, #3
    2716:	18e3      	adds	r3, r4, r3
    2718:	5c98      	ldrb	r0, [r3, r2]
    271a:	4e28      	ldr	r6, [pc, #160]	; (27bc <arrowKey+0x108>)
    271c:	47b0      	blx	r6
			yCharPos++;
    271e:	4a26      	ldr	r2, [pc, #152]	; (27b8 <arrowKey+0x104>)
    2720:	8813      	ldrh	r3, [r2, #0]
    2722:	3301      	adds	r3, #1
    2724:	b29b      	uxth	r3, r3
    2726:	8013      	strh	r3, [r2, #0]
			tempCharacter = consoleDisplay[xCharPos][yCharPos];
    2728:	8829      	ldrh	r1, [r5, #0]
    272a:	004a      	lsls	r2, r1, #1
    272c:	1852      	adds	r2, r2, r1
    272e:	00d2      	lsls	r2, r2, #3
    2730:	18a4      	adds	r4, r4, r2
			drawChar(tempCharacter);
    2732:	5ce0      	ldrb	r0, [r4, r3]
    2734:	47b0      	blx	r6
			blinkCursor();
    2736:	4b22      	ldr	r3, [pc, #136]	; (27c0 <arrowKey+0x10c>)
    2738:	4798      	blx	r3
    273a:	e7c4      	b.n	26c6 <arrowKey+0x12>
		if(yCharPos > 0)
    273c:	4b1e      	ldr	r3, [pc, #120]	; (27b8 <arrowKey+0x104>)
    273e:	881a      	ldrh	r2, [r3, #0]
    2740:	2a00      	cmp	r2, #0
    2742:	d0c0      	beq.n	26c6 <arrowKey+0x12>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    2744:	4c1b      	ldr	r4, [pc, #108]	; (27b4 <arrowKey+0x100>)
    2746:	4d1a      	ldr	r5, [pc, #104]	; (27b0 <arrowKey+0xfc>)
    2748:	8829      	ldrh	r1, [r5, #0]
    274a:	004b      	lsls	r3, r1, #1
    274c:	185b      	adds	r3, r3, r1
    274e:	00db      	lsls	r3, r3, #3
    2750:	18e3      	adds	r3, r4, r3
    2752:	5c98      	ldrb	r0, [r3, r2]
    2754:	4e19      	ldr	r6, [pc, #100]	; (27bc <arrowKey+0x108>)
    2756:	47b0      	blx	r6
			yCharPos--;
    2758:	4a17      	ldr	r2, [pc, #92]	; (27b8 <arrowKey+0x104>)
    275a:	8813      	ldrh	r3, [r2, #0]
    275c:	3b01      	subs	r3, #1
    275e:	b29b      	uxth	r3, r3
    2760:	8013      	strh	r3, [r2, #0]
			tempCharacter = consoleDisplay[xCharPos][yCharPos];
    2762:	8829      	ldrh	r1, [r5, #0]
    2764:	004a      	lsls	r2, r1, #1
    2766:	1852      	adds	r2, r2, r1
    2768:	00d2      	lsls	r2, r2, #3
    276a:	18a4      	adds	r4, r4, r2
			drawChar(tempCharacter);
    276c:	5ce0      	ldrb	r0, [r4, r3]
    276e:	47b0      	blx	r6
			blinkCursor();
    2770:	4b13      	ldr	r3, [pc, #76]	; (27c0 <arrowKey+0x10c>)
    2772:	4798      	blx	r3
    2774:	e7a7      	b.n	26c6 <arrowKey+0x12>
		if(xCharPos < 79)
    2776:	4b0e      	ldr	r3, [pc, #56]	; (27b0 <arrowKey+0xfc>)
    2778:	881a      	ldrh	r2, [r3, #0]
    277a:	2a4e      	cmp	r2, #78	; 0x4e
    277c:	d8a3      	bhi.n	26c6 <arrowKey+0x12>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    277e:	4c0d      	ldr	r4, [pc, #52]	; (27b4 <arrowKey+0x100>)
    2780:	4d0d      	ldr	r5, [pc, #52]	; (27b8 <arrowKey+0x104>)
    2782:	8829      	ldrh	r1, [r5, #0]
    2784:	0053      	lsls	r3, r2, #1
    2786:	189b      	adds	r3, r3, r2
    2788:	00db      	lsls	r3, r3, #3
    278a:	18e3      	adds	r3, r4, r3
    278c:	5c58      	ldrb	r0, [r3, r1]
    278e:	4e0b      	ldr	r6, [pc, #44]	; (27bc <arrowKey+0x108>)
    2790:	47b0      	blx	r6
			xCharPos++;
    2792:	4a07      	ldr	r2, [pc, #28]	; (27b0 <arrowKey+0xfc>)
    2794:	8813      	ldrh	r3, [r2, #0]
    2796:	3301      	adds	r3, #1
    2798:	b29b      	uxth	r3, r3
    279a:	8013      	strh	r3, [r2, #0]
			tempCharacter = consoleDisplay[xCharPos][yCharPos];
    279c:	8829      	ldrh	r1, [r5, #0]
    279e:	005a      	lsls	r2, r3, #1
    27a0:	18d3      	adds	r3, r2, r3
    27a2:	00db      	lsls	r3, r3, #3
    27a4:	18e3      	adds	r3, r4, r3
			drawChar(tempCharacter);
    27a6:	5c58      	ldrb	r0, [r3, r1]
    27a8:	47b0      	blx	r6
			blinkCursor();
    27aa:	4b05      	ldr	r3, [pc, #20]	; (27c0 <arrowKey+0x10c>)
    27ac:	4798      	blx	r3
}
    27ae:	e78a      	b.n	26c6 <arrowKey+0x12>
    27b0:	2000029c 	.word	0x2000029c
    27b4:	20000318 	.word	0x20000318
    27b8:	2000029e 	.word	0x2000029e
    27bc:	00001ffd 	.word	0x00001ffd
    27c0:	00002295 	.word	0x00002295

000027c4 <printKeyboardBuffer>:
{
    27c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    27c6:	46d6      	mov	lr, sl
    27c8:	464f      	mov	r7, r9
    27ca:	4646      	mov	r6, r8
    27cc:	b5c0      	push	{r6, r7, lr}
    27ce:	b0cc      	sub	sp, #304	; 0x130
	unsigned char noCase[] =
    27d0:	4d96      	ldr	r5, [pc, #600]	; (2a2c <printKeyboardBuffer+0x268>)
    27d2:	2246      	movs	r2, #70	; 0x46
    27d4:	0029      	movs	r1, r5
    27d6:	a83a      	add	r0, sp, #232	; 0xe8
    27d8:	4c95      	ldr	r4, [pc, #596]	; (2a30 <printKeyboardBuffer+0x26c>)
    27da:	47a0      	blx	r4
	unsigned char shiftCase[] =
    27dc:	0029      	movs	r1, r5
    27de:	3148      	adds	r1, #72	; 0x48
    27e0:	2246      	movs	r2, #70	; 0x46
    27e2:	a828      	add	r0, sp, #160	; 0xa0
    27e4:	47a0      	blx	r4
	unsigned char capsLockCase[] =
    27e6:	4d93      	ldr	r5, [pc, #588]	; (2a34 <printKeyboardBuffer+0x270>)
    27e8:	0029      	movs	r1, r5
    27ea:	3110      	adds	r1, #16
    27ec:	2246      	movs	r2, #70	; 0x46
    27ee:	a816      	add	r0, sp, #88	; 0x58
    27f0:	47a0      	blx	r4
	unsigned char controlCase[] =
    27f2:	0029      	movs	r1, r5
    27f4:	3158      	adds	r1, #88	; 0x58
    27f6:	2246      	movs	r2, #70	; 0x46
    27f8:	a804      	add	r0, sp, #16
    27fa:	47a0      	blx	r4
    27fc:	4f8e      	ldr	r7, [pc, #568]	; (2a38 <printKeyboardBuffer+0x274>)
    27fe:	003c      	movs	r4, r7
    2800:	3414      	adds	r4, #20
    2802:	003d      	movs	r5, r7
	bool controled = false;
    2804:	2300      	movs	r3, #0
    2806:	9303      	str	r3, [sp, #12]
	bool shifted = false;
    2808:	9302      	str	r3, [sp, #8]
			controled = true;
    280a:	2201      	movs	r2, #1
    280c:	e004      	b.n	2818 <printKeyboardBuffer+0x54>
		if(scanCodeBuffer[i] == 22)
    280e:	2916      	cmp	r1, #22
    2810:	d011      	beq.n	2836 <printKeyboardBuffer+0x72>
    2812:	3501      	adds	r5, #1
	for(int i=0; i<20; i++)
    2814:	42a5      	cmp	r5, r4
    2816:	d010      	beq.n	283a <printKeyboardBuffer+0x76>
		if((scanCodeBuffer[i] == 13) | (scanCodeBuffer[i] == 49))
    2818:	7829      	ldrb	r1, [r5, #0]
    281a:	000b      	movs	r3, r1
    281c:	3b0d      	subs	r3, #13
    281e:	425e      	negs	r6, r3
    2820:	415e      	adcs	r6, r3
    2822:	46b4      	mov	ip, r6
    2824:	0008      	movs	r0, r1
    2826:	3831      	subs	r0, #49	; 0x31
    2828:	4243      	negs	r3, r0
    282a:	4143      	adcs	r3, r0
    282c:	4660      	mov	r0, ip
    282e:	4318      	orrs	r0, r3
    2830:	d0ed      	beq.n	280e <printKeyboardBuffer+0x4a>
			shifted = true;
    2832:	9002      	str	r0, [sp, #8]
    2834:	e7eb      	b.n	280e <printKeyboardBuffer+0x4a>
			controled = true;
    2836:	9203      	str	r2, [sp, #12]
    2838:	e7eb      	b.n	2812 <printKeyboardBuffer+0x4e>
    283a:	4e80      	ldr	r6, [pc, #512]	; (2a3c <printKeyboardBuffer+0x278>)
	for(int i=0; i<20; i++)
    283c:	003c      	movs	r4, r7
		if(!keyDown(scanCodeBuffer[i]))
    283e:	4b80      	ldr	r3, [pc, #512]	; (2a40 <printKeyboardBuffer+0x27c>)
    2840:	469a      	mov	sl, r3
    2842:	e013      	b.n	286c <printKeyboardBuffer+0xa8>
				if(breakEnable)
    2844:	4b7f      	ldr	r3, [pc, #508]	; (2a44 <printKeyboardBuffer+0x280>)
    2846:	781b      	ldrb	r3, [r3, #0]
    2848:	2b00      	cmp	r3, #0
    284a:	d00a      	beq.n	2862 <printKeyboardBuffer+0x9e>
					ring_put(ouroboros, 0x00);
    284c:	4b7e      	ldr	r3, [pc, #504]	; (2a48 <printKeyboardBuffer+0x284>)
    284e:	6818      	ldr	r0, [r3, #0]
    2850:	2100      	movs	r1, #0
    2852:	4b7e      	ldr	r3, [pc, #504]	; (2a4c <printKeyboardBuffer+0x288>)
    2854:	4798      	blx	r3
    2856:	e004      	b.n	2862 <printKeyboardBuffer+0x9e>
				capsLock = !capsLock;
    2858:	4a7d      	ldr	r2, [pc, #500]	; (2a50 <printKeyboardBuffer+0x28c>)
    285a:	7813      	ldrb	r3, [r2, #0]
    285c:	2101      	movs	r1, #1
    285e:	404b      	eors	r3, r1
    2860:	7013      	strb	r3, [r2, #0]
    2862:	3401      	adds	r4, #1
    2864:	3601      	adds	r6, #1
	for(int i = 0 ; i < 20 ; i++)
    2866:	42ac      	cmp	r4, r5
    2868:	d100      	bne.n	286c <printKeyboardBuffer+0xa8>
    286a:	e0d4      	b.n	2a16 <printKeyboardBuffer+0x252>
    286c:	9401      	str	r4, [sp, #4]
		if(!keyDown(scanCodeBuffer[i]))
    286e:	7823      	ldrb	r3, [r4, #0]
    2870:	4699      	mov	r9, r3
    2872:	0018      	movs	r0, r3
    2874:	47d0      	blx	sl
    2876:	2800      	cmp	r0, #0
    2878:	d1f3      	bne.n	2862 <printKeyboardBuffer+0x9e>
			keyDownBuffer[i] = scanCodeBuffer[i];
    287a:	464b      	mov	r3, r9
    287c:	7033      	strb	r3, [r6, #0]
			if(scanCodeBuffer[i] == 0x00)  //do nothing
    287e:	464b      	mov	r3, r9
    2880:	2b01      	cmp	r3, #1
    2882:	d9ee      	bls.n	2862 <printKeyboardBuffer+0x9e>
			else if(scanCodeBuffer[i] == 67)		//Break key, set by break enable in settings
    2884:	2b43      	cmp	r3, #67	; 0x43
    2886:	d0dd      	beq.n	2844 <printKeyboardBuffer+0x80>
			else if(scanCodeBuffer[i] == 12)			//caps lock
    2888:	464b      	mov	r3, r9
    288a:	2b0c      	cmp	r3, #12
    288c:	d0e4      	beq.n	2858 <printKeyboardBuffer+0x94>
			else if(scanCodeBuffer[i] == 3)			//scroll lock
    288e:	464b      	mov	r3, r9
    2890:	2b03      	cmp	r3, #3
    2892:	d02a      	beq.n	28ea <printKeyboardBuffer+0x126>
			else if(scanCodeBuffer[i] == 35) //left
    2894:	464b      	mov	r3, r9
    2896:	2b23      	cmp	r3, #35	; 0x23
    2898:	d02d      	beq.n	28f6 <printKeyboardBuffer+0x132>
			else if(scanCodeBuffer[i]  == 45)	//down
    289a:	464b      	mov	r3, r9
    289c:	2b2d      	cmp	r3, #45	; 0x2d
    289e:	d042      	beq.n	2926 <printKeyboardBuffer+0x162>
			else if(scanCodeBuffer[i]  == 55)	//up
    28a0:	464b      	mov	r3, r9
    28a2:	2b37      	cmp	r3, #55	; 0x37
    28a4:	d057      	beq.n	2956 <printKeyboardBuffer+0x192>
			else if(scanCodeBuffer[i]  == 65)	//right
    28a6:	464b      	mov	r3, r9
    28a8:	2b41      	cmp	r3, #65	; 0x41
    28aa:	d06d      	beq.n	2988 <printKeyboardBuffer+0x1c4>
				if(controled)
    28ac:	9b03      	ldr	r3, [sp, #12]
    28ae:	2b00      	cmp	r3, #0
    28b0:	d000      	beq.n	28b4 <printKeyboardBuffer+0xf0>
    28b2:	e082      	b.n	29ba <printKeyboardBuffer+0x1f6>
				else if(capsLock)
    28b4:	4b66      	ldr	r3, [pc, #408]	; (2a50 <printKeyboardBuffer+0x28c>)
    28b6:	781b      	ldrb	r3, [r3, #0]
    28b8:	2b00      	cmp	r3, #0
    28ba:	d000      	beq.n	28be <printKeyboardBuffer+0xfa>
    28bc:	e085      	b.n	29ca <printKeyboardBuffer+0x206>
				else if(shifted)
    28be:	9b02      	ldr	r3, [sp, #8]
    28c0:	2b00      	cmp	r3, #0
    28c2:	d100      	bne.n	28c6 <printKeyboardBuffer+0x102>
    28c4:	e094      	b.n	29f0 <printKeyboardBuffer+0x22c>
					ring_put(ouroboros, shiftCase[scanCodeBuffer[i]]);
    28c6:	ab28      	add	r3, sp, #160	; 0xa0
    28c8:	464a      	mov	r2, r9
    28ca:	5c99      	ldrb	r1, [r3, r2]
    28cc:	4b5e      	ldr	r3, [pc, #376]	; (2a48 <printKeyboardBuffer+0x284>)
    28ce:	6818      	ldr	r0, [r3, #0]
    28d0:	4b5e      	ldr	r3, [pc, #376]	; (2a4c <printKeyboardBuffer+0x288>)
    28d2:	4798      	blx	r3
					if(localEcho)
    28d4:	4b5f      	ldr	r3, [pc, #380]	; (2a54 <printKeyboardBuffer+0x290>)
    28d6:	781b      	ldrb	r3, [r3, #0]
    28d8:	2b00      	cmp	r3, #0
    28da:	d0c2      	beq.n	2862 <printKeyboardBuffer+0x9e>
						parseChar(shiftCase[scanCodeBuffer[i]]);
    28dc:	9b01      	ldr	r3, [sp, #4]
    28de:	781b      	ldrb	r3, [r3, #0]
    28e0:	aa28      	add	r2, sp, #160	; 0xa0
    28e2:	5cd0      	ldrb	r0, [r2, r3]
    28e4:	4b5c      	ldr	r3, [pc, #368]	; (2a58 <printKeyboardBuffer+0x294>)
    28e6:	4798      	blx	r3
    28e8:	e7bb      	b.n	2862 <printKeyboardBuffer+0x9e>
				scrollLock = !scrollLock;
    28ea:	4a5c      	ldr	r2, [pc, #368]	; (2a5c <printKeyboardBuffer+0x298>)
    28ec:	7813      	ldrb	r3, [r2, #0]
    28ee:	2101      	movs	r1, #1
    28f0:	404b      	eors	r3, r1
    28f2:	7013      	strb	r3, [r2, #0]
    28f4:	e7b5      	b.n	2862 <printKeyboardBuffer+0x9e>
				ring_put(ouroboros, 0x1B);
    28f6:	4b54      	ldr	r3, [pc, #336]	; (2a48 <printKeyboardBuffer+0x284>)
    28f8:	4699      	mov	r9, r3
    28fa:	211b      	movs	r1, #27
    28fc:	6818      	ldr	r0, [r3, #0]
    28fe:	4b53      	ldr	r3, [pc, #332]	; (2a4c <printKeyboardBuffer+0x288>)
    2900:	4698      	mov	r8, r3
    2902:	4798      	blx	r3
				ring_put(ouroboros, 0x5B);
    2904:	215b      	movs	r1, #91	; 0x5b
    2906:	464b      	mov	r3, r9
    2908:	6818      	ldr	r0, [r3, #0]
    290a:	47c0      	blx	r8
				ring_put(ouroboros, 0x44);
    290c:	464b      	mov	r3, r9
    290e:	6818      	ldr	r0, [r3, #0]
    2910:	2144      	movs	r1, #68	; 0x44
    2912:	47c0      	blx	r8
				if(localEcho)
    2914:	4b4f      	ldr	r3, [pc, #316]	; (2a54 <printKeyboardBuffer+0x290>)
    2916:	781b      	ldrb	r3, [r3, #0]
    2918:	2b00      	cmp	r3, #0
    291a:	d0a2      	beq.n	2862 <printKeyboardBuffer+0x9e>
					arrowKey(scanCodeBuffer[i]);
    291c:	9b01      	ldr	r3, [sp, #4]
    291e:	7818      	ldrb	r0, [r3, #0]
    2920:	4b4f      	ldr	r3, [pc, #316]	; (2a60 <printKeyboardBuffer+0x29c>)
    2922:	4798      	blx	r3
    2924:	e79d      	b.n	2862 <printKeyboardBuffer+0x9e>
				ring_put(ouroboros, 0x1B);
    2926:	4b48      	ldr	r3, [pc, #288]	; (2a48 <printKeyboardBuffer+0x284>)
    2928:	4699      	mov	r9, r3
    292a:	211b      	movs	r1, #27
    292c:	6818      	ldr	r0, [r3, #0]
    292e:	4b47      	ldr	r3, [pc, #284]	; (2a4c <printKeyboardBuffer+0x288>)
    2930:	4698      	mov	r8, r3
    2932:	4798      	blx	r3
				ring_put(ouroboros, 0x5B);
    2934:	215b      	movs	r1, #91	; 0x5b
    2936:	464b      	mov	r3, r9
    2938:	6818      	ldr	r0, [r3, #0]
    293a:	47c0      	blx	r8
				ring_put(ouroboros, 0x42);
    293c:	464b      	mov	r3, r9
    293e:	6818      	ldr	r0, [r3, #0]
    2940:	2142      	movs	r1, #66	; 0x42
    2942:	47c0      	blx	r8
				if(localEcho)
    2944:	4b43      	ldr	r3, [pc, #268]	; (2a54 <printKeyboardBuffer+0x290>)
    2946:	781b      	ldrb	r3, [r3, #0]
    2948:	2b00      	cmp	r3, #0
    294a:	d08a      	beq.n	2862 <printKeyboardBuffer+0x9e>
					arrowKey(scanCodeBuffer[i]);
    294c:	9b01      	ldr	r3, [sp, #4]
    294e:	7818      	ldrb	r0, [r3, #0]
    2950:	4b43      	ldr	r3, [pc, #268]	; (2a60 <printKeyboardBuffer+0x29c>)
    2952:	4798      	blx	r3
    2954:	e785      	b.n	2862 <printKeyboardBuffer+0x9e>
				ring_put(ouroboros, 0x1B);
    2956:	4b3c      	ldr	r3, [pc, #240]	; (2a48 <printKeyboardBuffer+0x284>)
    2958:	4699      	mov	r9, r3
    295a:	211b      	movs	r1, #27
    295c:	6818      	ldr	r0, [r3, #0]
    295e:	4b3b      	ldr	r3, [pc, #236]	; (2a4c <printKeyboardBuffer+0x288>)
    2960:	4698      	mov	r8, r3
    2962:	4798      	blx	r3
				ring_put(ouroboros, 0x5B);
    2964:	215b      	movs	r1, #91	; 0x5b
    2966:	464b      	mov	r3, r9
    2968:	6818      	ldr	r0, [r3, #0]
    296a:	47c0      	blx	r8
				ring_put(ouroboros, 0x41);
    296c:	464b      	mov	r3, r9
    296e:	6818      	ldr	r0, [r3, #0]
    2970:	2141      	movs	r1, #65	; 0x41
    2972:	47c0      	blx	r8
				if(localEcho)
    2974:	4b37      	ldr	r3, [pc, #220]	; (2a54 <printKeyboardBuffer+0x290>)
    2976:	781b      	ldrb	r3, [r3, #0]
    2978:	2b00      	cmp	r3, #0
    297a:	d100      	bne.n	297e <printKeyboardBuffer+0x1ba>
    297c:	e771      	b.n	2862 <printKeyboardBuffer+0x9e>
					arrowKey(scanCodeBuffer[i]);
    297e:	9b01      	ldr	r3, [sp, #4]
    2980:	7818      	ldrb	r0, [r3, #0]
    2982:	4b37      	ldr	r3, [pc, #220]	; (2a60 <printKeyboardBuffer+0x29c>)
    2984:	4798      	blx	r3
    2986:	e76c      	b.n	2862 <printKeyboardBuffer+0x9e>
				ring_put(ouroboros, 0x1B);
    2988:	4b2f      	ldr	r3, [pc, #188]	; (2a48 <printKeyboardBuffer+0x284>)
    298a:	4699      	mov	r9, r3
    298c:	211b      	movs	r1, #27
    298e:	6818      	ldr	r0, [r3, #0]
    2990:	4b2e      	ldr	r3, [pc, #184]	; (2a4c <printKeyboardBuffer+0x288>)
    2992:	4698      	mov	r8, r3
    2994:	4798      	blx	r3
				ring_put(ouroboros, 0x5B);
    2996:	215b      	movs	r1, #91	; 0x5b
    2998:	464b      	mov	r3, r9
    299a:	6818      	ldr	r0, [r3, #0]
    299c:	47c0      	blx	r8
				ring_put(ouroboros, 0x43);
    299e:	464b      	mov	r3, r9
    29a0:	6818      	ldr	r0, [r3, #0]
    29a2:	2143      	movs	r1, #67	; 0x43
    29a4:	47c0      	blx	r8
				if(localEcho)
    29a6:	4b2b      	ldr	r3, [pc, #172]	; (2a54 <printKeyboardBuffer+0x290>)
    29a8:	781b      	ldrb	r3, [r3, #0]
    29aa:	2b00      	cmp	r3, #0
    29ac:	d100      	bne.n	29b0 <printKeyboardBuffer+0x1ec>
    29ae:	e758      	b.n	2862 <printKeyboardBuffer+0x9e>
					arrowKey(scanCodeBuffer[i]);
    29b0:	9b01      	ldr	r3, [sp, #4]
    29b2:	7818      	ldrb	r0, [r3, #0]
    29b4:	4b2a      	ldr	r3, [pc, #168]	; (2a60 <printKeyboardBuffer+0x29c>)
    29b6:	4798      	blx	r3
    29b8:	e753      	b.n	2862 <printKeyboardBuffer+0x9e>
					ring_put(ouroboros, controlCase[scanCodeBuffer[i]]);
    29ba:	ab04      	add	r3, sp, #16
    29bc:	464a      	mov	r2, r9
    29be:	5c99      	ldrb	r1, [r3, r2]
    29c0:	4b21      	ldr	r3, [pc, #132]	; (2a48 <printKeyboardBuffer+0x284>)
    29c2:	6818      	ldr	r0, [r3, #0]
    29c4:	4b21      	ldr	r3, [pc, #132]	; (2a4c <printKeyboardBuffer+0x288>)
    29c6:	4798      	blx	r3
    29c8:	e74b      	b.n	2862 <printKeyboardBuffer+0x9e>
					ring_put(ouroboros, capsLockCase[scanCodeBuffer[i]]);
    29ca:	ab16      	add	r3, sp, #88	; 0x58
    29cc:	464a      	mov	r2, r9
    29ce:	5c99      	ldrb	r1, [r3, r2]
    29d0:	4b1d      	ldr	r3, [pc, #116]	; (2a48 <printKeyboardBuffer+0x284>)
    29d2:	6818      	ldr	r0, [r3, #0]
    29d4:	4b1d      	ldr	r3, [pc, #116]	; (2a4c <printKeyboardBuffer+0x288>)
    29d6:	4798      	blx	r3
					if(localEcho)
    29d8:	4b1e      	ldr	r3, [pc, #120]	; (2a54 <printKeyboardBuffer+0x290>)
    29da:	781b      	ldrb	r3, [r3, #0]
    29dc:	2b00      	cmp	r3, #0
    29de:	d100      	bne.n	29e2 <printKeyboardBuffer+0x21e>
    29e0:	e73f      	b.n	2862 <printKeyboardBuffer+0x9e>
						parseChar(capsLockCase[scanCodeBuffer[i]]);
    29e2:	9b01      	ldr	r3, [sp, #4]
    29e4:	781b      	ldrb	r3, [r3, #0]
    29e6:	aa16      	add	r2, sp, #88	; 0x58
    29e8:	5cd0      	ldrb	r0, [r2, r3]
    29ea:	4b1b      	ldr	r3, [pc, #108]	; (2a58 <printKeyboardBuffer+0x294>)
    29ec:	4798      	blx	r3
    29ee:	e738      	b.n	2862 <printKeyboardBuffer+0x9e>
					ring_put(ouroboros, noCase[scanCodeBuffer[i]]);
    29f0:	ab3a      	add	r3, sp, #232	; 0xe8
    29f2:	464a      	mov	r2, r9
    29f4:	5c99      	ldrb	r1, [r3, r2]
    29f6:	4b14      	ldr	r3, [pc, #80]	; (2a48 <printKeyboardBuffer+0x284>)
    29f8:	6818      	ldr	r0, [r3, #0]
    29fa:	4b14      	ldr	r3, [pc, #80]	; (2a4c <printKeyboardBuffer+0x288>)
    29fc:	4798      	blx	r3
					if(localEcho)
    29fe:	4b15      	ldr	r3, [pc, #84]	; (2a54 <printKeyboardBuffer+0x290>)
    2a00:	781b      	ldrb	r3, [r3, #0]
    2a02:	2b00      	cmp	r3, #0
    2a04:	d100      	bne.n	2a08 <printKeyboardBuffer+0x244>
    2a06:	e72c      	b.n	2862 <printKeyboardBuffer+0x9e>
						parseChar(noCase[scanCodeBuffer[i]]);
    2a08:	9b01      	ldr	r3, [sp, #4]
    2a0a:	781b      	ldrb	r3, [r3, #0]
    2a0c:	aa3a      	add	r2, sp, #232	; 0xe8
    2a0e:	5cd0      	ldrb	r0, [r2, r3]
    2a10:	4b11      	ldr	r3, [pc, #68]	; (2a58 <printKeyboardBuffer+0x294>)
    2a12:	4798      	blx	r3
    2a14:	e725      	b.n	2862 <printKeyboardBuffer+0x9e>
		scanCodeBuffer[i] = 0xFF;
    2a16:	23ff      	movs	r3, #255	; 0xff
    2a18:	703b      	strb	r3, [r7, #0]
    2a1a:	3701      	adds	r7, #1
	for(int i = 0 ; i < 20 ; i++)
    2a1c:	42bc      	cmp	r4, r7
    2a1e:	d1fb      	bne.n	2a18 <printKeyboardBuffer+0x254>
}
    2a20:	b04c      	add	sp, #304	; 0x130
    2a22:	bc1c      	pop	{r2, r3, r4}
    2a24:	4690      	mov	r8, r2
    2a26:	4699      	mov	r9, r3
    2a28:	46a2      	mov	sl, r4
    2a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a2c:	000067c8 	.word	0x000067c8
    2a30:	000037b5 	.word	0x000037b5
    2a34:	00006848 	.word	0x00006848
    2a38:	20000028 	.word	0x20000028
    2a3c:	20000014 	.word	0x20000014
    2a40:	00002465 	.word	0x00002465
    2a44:	200002a0 	.word	0x200002a0
    2a48:	200002b4 	.word	0x200002b4
    2a4c:	00000141 	.word	0x00000141
    2a50:	200002ac 	.word	0x200002ac
    2a54:	20000158 	.word	0x20000158
    2a58:	000001d1 	.word	0x000001d1
    2a5c:	200002ae 	.word	0x200002ae
    2a60:	000026b5 	.word	0x000026b5

00002a64 <setColorRGB>:

uint16_t fore_Color_High, fore_Color_Low;
uint16_t back_Color_High, back_Color_Low;

void setColorRGB(uint8_t r, uint8_t g, uint8_t b)
{
    2a64:	b510      	push	{r4, lr}
	fore_Color_High = ((r&248)|g>>5);
    2a66:	094b      	lsrs	r3, r1, #5
    2a68:	2407      	movs	r4, #7
    2a6a:	43a0      	bics	r0, r4
    2a6c:	4318      	orrs	r0, r3
    2a6e:	4b05      	ldr	r3, [pc, #20]	; (2a84 <setColorRGB+0x20>)
    2a70:	8018      	strh	r0, [r3, #0]
	fore_Color_Low = ((g&28)<<3|b>>3);
    2a72:	00c9      	lsls	r1, r1, #3
    2a74:	23e0      	movs	r3, #224	; 0xe0
    2a76:	4019      	ands	r1, r3
    2a78:	08d2      	lsrs	r2, r2, #3
    2a7a:	430a      	orrs	r2, r1
    2a7c:	4b02      	ldr	r3, [pc, #8]	; (2a88 <setColorRGB+0x24>)
    2a7e:	801a      	strh	r2, [r3, #0]
}
    2a80:	bd10      	pop	{r4, pc}
    2a82:	46c0      	nop			; (mov r8, r8)
    2a84:	20000a9a 	.word	0x20000a9a
    2a88:	20000a9c 	.word	0x20000a9c

00002a8c <setBackColorRGB>:
	fore_Color_Low = (color & 0xFF);
}

void setBackColorRGB(unsigned char r,
unsigned char g, unsigned char b)
{
    2a8c:	b510      	push	{r4, lr}
	back_Color_High = ((r&248)|g>>5);
    2a8e:	094b      	lsrs	r3, r1, #5
    2a90:	2407      	movs	r4, #7
    2a92:	43a0      	bics	r0, r4
    2a94:	4318      	orrs	r0, r3
    2a96:	4b05      	ldr	r3, [pc, #20]	; (2aac <setBackColorRGB+0x20>)
    2a98:	8018      	strh	r0, [r3, #0]
	back_Color_Low = ((g&28)<<3|b>>3);
    2a9a:	00c9      	lsls	r1, r1, #3
    2a9c:	23e0      	movs	r3, #224	; 0xe0
    2a9e:	4019      	ands	r1, r3
    2aa0:	08d2      	lsrs	r2, r2, #3
    2aa2:	430a      	orrs	r2, r1
    2aa4:	4b02      	ldr	r3, [pc, #8]	; (2ab0 <setBackColorRGB+0x24>)
    2aa6:	801a      	strh	r2, [r3, #0]
}
    2aa8:	bd10      	pop	{r4, pc}
    2aaa:	46c0      	nop			; (mov r8, r8)
    2aac:	20000a9e 	.word	0x20000a9e
    2ab0:	20000a98 	.word	0x20000a98

00002ab4 <LCD_Fast_Fill>:
	(((long)(x2-x1)+1)*((long)(y2-y1)+1)));
	REG_PORT_OUTSET1 = LCD_CS;
}

void LCD_Fast_Fill(int ch, int cl, long pix)
{
    2ab4:	b570      	push	{r4, r5, r6, lr}
	int blocks;
	
	
	REG_PORT_OUTCLR1 = 0x0000ffff;
    2ab6:	4c19      	ldr	r4, [pc, #100]	; (2b1c <LCD_Fast_Fill+0x68>)
    2ab8:	4b19      	ldr	r3, [pc, #100]	; (2b20 <LCD_Fast_Fill+0x6c>)
    2aba:	601c      	str	r4, [r3, #0]
	REG_PORT_OUTSET1 = (ch << 8) | cl;
    2abc:	0200      	lsls	r0, r0, #8
    2abe:	4301      	orrs	r1, r0
    2ac0:	4b18      	ldr	r3, [pc, #96]	; (2b24 <LCD_Fast_Fill+0x70>)
    2ac2:	6019      	str	r1, [r3, #0]

	blocks = pix/16;
    2ac4:	17d3      	asrs	r3, r2, #31
    2ac6:	260f      	movs	r6, #15
    2ac8:	401e      	ands	r6, r3
    2aca:	18b6      	adds	r6, r6, r2
    2acc:	1136      	asrs	r6, r6, #4
	for (int i=0; i<blocks; i++)
    2ace:	2500      	movs	r5, #0
    2ad0:	2e00      	cmp	r6, #0
    2ad2:	dd0c      	ble.n	2aee <LCD_Fast_Fill+0x3a>
	{
		for (int j=0; j<16; j++)
		{
			REG_PORT_OUTCLR1 = LCD_WR;
    2ad4:	4c12      	ldr	r4, [pc, #72]	; (2b20 <LCD_Fast_Fill+0x6c>)
    2ad6:	2180      	movs	r1, #128	; 0x80
    2ad8:	0289      	lsls	r1, r1, #10
			REG_PORT_OUTSET1 = LCD_WR;
    2ada:	4812      	ldr	r0, [pc, #72]	; (2b24 <LCD_Fast_Fill+0x70>)
{
    2adc:	2310      	movs	r3, #16
			REG_PORT_OUTCLR1 = LCD_WR;
    2ade:	6021      	str	r1, [r4, #0]
			REG_PORT_OUTSET1 = LCD_WR;
    2ae0:	6001      	str	r1, [r0, #0]
    2ae2:	3b01      	subs	r3, #1
		for (int j=0; j<16; j++)
    2ae4:	2b00      	cmp	r3, #0
    2ae6:	d1fa      	bne.n	2ade <LCD_Fast_Fill+0x2a>
	for (int i=0; i<blocks; i++)
    2ae8:	3501      	adds	r5, #1
    2aea:	42ae      	cmp	r6, r5
    2aec:	d1f6      	bne.n	2adc <LCD_Fast_Fill+0x28>
		}
	}
	
	if ((pix % 16) != 0)
    2aee:	0713      	lsls	r3, r2, #28
    2af0:	d013      	beq.n	2b1a <LCD_Fast_Fill+0x66>
	for (int i=0; i<(pix % 16)+1; i++)
    2af2:	17d3      	asrs	r3, r2, #31
    2af4:	0f1b      	lsrs	r3, r3, #28
    2af6:	18d2      	adds	r2, r2, r3
    2af8:	210f      	movs	r1, #15
    2afa:	4011      	ands	r1, r2
    2afc:	1ac9      	subs	r1, r1, r3
    2afe:	1c4b      	adds	r3, r1, #1
    2b00:	2b00      	cmp	r3, #0
    2b02:	dd0a      	ble.n	2b1a <LCD_Fast_Fill+0x66>
    2b04:	0019      	movs	r1, r3
    2b06:	2300      	movs	r3, #0
	{
		REG_PORT_OUTCLR1 = LCD_WR;
    2b08:	4c05      	ldr	r4, [pc, #20]	; (2b20 <LCD_Fast_Fill+0x6c>)
    2b0a:	2280      	movs	r2, #128	; 0x80
    2b0c:	0292      	lsls	r2, r2, #10
		REG_PORT_OUTSET1 = LCD_WR;
    2b0e:	4805      	ldr	r0, [pc, #20]	; (2b24 <LCD_Fast_Fill+0x70>)
		REG_PORT_OUTCLR1 = LCD_WR;
    2b10:	6022      	str	r2, [r4, #0]
		REG_PORT_OUTSET1 = LCD_WR;
    2b12:	6002      	str	r2, [r0, #0]
	for (int i=0; i<(pix % 16)+1; i++)
    2b14:	3301      	adds	r3, #1
    2b16:	4299      	cmp	r1, r3
    2b18:	d1fa      	bne.n	2b10 <LCD_Fast_Fill+0x5c>
	}
}
    2b1a:	bd70      	pop	{r4, r5, r6, pc}
    2b1c:	0000ffff 	.word	0x0000ffff
    2b20:	41004494 	.word	0x41004494
    2b24:	41004498 	.word	0x41004498

00002b28 <setXY>:
{
	setXY(0,0,display_X_size,display_Y_size);
}

void setXY(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
    2b28:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b2a:	b083      	sub	sp, #12
    2b2c:	0007      	movs	r7, r0
    2b2e:	9100      	str	r1, [sp, #0]
    2b30:	0016      	movs	r6, r2
    2b32:	9301      	str	r3, [sp, #4]
	y1=display_Y_size-y1;
	y2=display_Y_size-y2;
	SwapUint16(y1, y2);
	*/
	
	LCD_Write_COM16(0x2a,0x00);
    2b34:	2100      	movs	r1, #0
    2b36:	202a      	movs	r0, #42	; 0x2a
    2b38:	4c17      	ldr	r4, [pc, #92]	; (2b98 <setXY+0x70>)
    2b3a:	47a0      	blx	r4
	LCD_Write_DATA8(x1>>8);
    2b3c:	0a38      	lsrs	r0, r7, #8
    2b3e:	4d17      	ldr	r5, [pc, #92]	; (2b9c <setXY+0x74>)
    2b40:	47a8      	blx	r5
	LCD_Write_COM16(0x2a,0x01);
    2b42:	2101      	movs	r1, #1
    2b44:	202a      	movs	r0, #42	; 0x2a
    2b46:	47a0      	blx	r4
	LCD_Write_DATA8(x1);
    2b48:	b2f8      	uxtb	r0, r7
    2b4a:	47a8      	blx	r5
	LCD_Write_COM16(0x2a,0x02);
    2b4c:	2102      	movs	r1, #2
    2b4e:	202a      	movs	r0, #42	; 0x2a
    2b50:	47a0      	blx	r4
	LCD_Write_DATA8(x2>>8);
    2b52:	0a30      	lsrs	r0, r6, #8
    2b54:	47a8      	blx	r5
	LCD_Write_COM16(0x2a,0x03);
    2b56:	2103      	movs	r1, #3
    2b58:	202a      	movs	r0, #42	; 0x2a
    2b5a:	47a0      	blx	r4
	LCD_Write_DATA8(x2);
    2b5c:	b2f0      	uxtb	r0, r6
    2b5e:	47a8      	blx	r5

	LCD_Write_COM16(0x2b,0x00);
    2b60:	2100      	movs	r1, #0
    2b62:	202b      	movs	r0, #43	; 0x2b
    2b64:	47a0      	blx	r4
	LCD_Write_DATA8(y1>>8);
    2b66:	9e00      	ldr	r6, [sp, #0]
    2b68:	0a30      	lsrs	r0, r6, #8
    2b6a:	47a8      	blx	r5
	LCD_Write_COM16(0x2b,0x01);
    2b6c:	2101      	movs	r1, #1
    2b6e:	202b      	movs	r0, #43	; 0x2b
    2b70:	47a0      	blx	r4
	LCD_Write_DATA8(y1);
    2b72:	b2f0      	uxtb	r0, r6
    2b74:	47a8      	blx	r5
	LCD_Write_COM16(0x2b,0x02);
    2b76:	2102      	movs	r1, #2
    2b78:	202b      	movs	r0, #43	; 0x2b
    2b7a:	47a0      	blx	r4
	LCD_Write_DATA8(y2>>8);
    2b7c:	9e01      	ldr	r6, [sp, #4]
    2b7e:	0a30      	lsrs	r0, r6, #8
    2b80:	47a8      	blx	r5
	LCD_Write_COM16(0x2b,0x03);
    2b82:	2103      	movs	r1, #3
    2b84:	202b      	movs	r0, #43	; 0x2b
    2b86:	47a0      	blx	r4
	LCD_Write_DATA8(y2);
    2b88:	b2f0      	uxtb	r0, r6
    2b8a:	47a8      	blx	r5

	LCD_Write_COM16(0x2c,0x00);
    2b8c:	2100      	movs	r1, #0
    2b8e:	202c      	movs	r0, #44	; 0x2c
    2b90:	47a0      	blx	r4
}
    2b92:	b003      	add	sp, #12
    2b94:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2b96:	46c0      	nop			; (mov r8, r8)
    2b98:	00002d55 	.word	0x00002d55
    2b9c:	00002d85 	.word	0x00002d85

00002ba0 <fillRect>:
{
    2ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ba2:	46ce      	mov	lr, r9
    2ba4:	4647      	mov	r7, r8
    2ba6:	b580      	push	{r7, lr}
    2ba8:	b083      	sub	sp, #12
    2baa:	0006      	movs	r6, r0
    2bac:	4689      	mov	r9, r1
    2bae:	0014      	movs	r4, r2
    2bb0:	001d      	movs	r5, r3
	if (x1>x2)
    2bb2:	4290      	cmp	r0, r2
    2bb4:	dd01      	ble.n	2bba <fillRect+0x1a>
		x1 = x2;
    2bb6:	0016      	movs	r6, r2
		x2 = temp;
    2bb8:	0004      	movs	r4, r0
	if (y1>y2)
    2bba:	45a9      	cmp	r9, r5
    2bbc:	dd02      	ble.n	2bc4 <fillRect+0x24>
    2bbe:	0033      	movs	r3, r6
		x1 = x2;
    2bc0:	0026      	movs	r6, r4
		x2 = temp;
    2bc2:	001c      	movs	r4, r3
	REG_PORT_OUTCLR1 = LCD_CS;
    2bc4:	2380      	movs	r3, #128	; 0x80
    2bc6:	03db      	lsls	r3, r3, #15
    2bc8:	4698      	mov	r8, r3
    2bca:	4b11      	ldr	r3, [pc, #68]	; (2c10 <fillRect+0x70>)
    2bcc:	4642      	mov	r2, r8
    2bce:	601a      	str	r2, [r3, #0]
	setXY(x1, y1, x2, y2);
    2bd0:	b2ab      	uxth	r3, r5
    2bd2:	b2a2      	uxth	r2, r4
    2bd4:	4649      	mov	r1, r9
    2bd6:	4668      	mov	r0, sp
    2bd8:	80c1      	strh	r1, [r0, #6]
    2bda:	88c1      	ldrh	r1, [r0, #6]
    2bdc:	b2b0      	uxth	r0, r6
    2bde:	4f0d      	ldr	r7, [pc, #52]	; (2c14 <fillRect+0x74>)
    2be0:	47b8      	blx	r7
	REG_PORT_OUTSET1 = LCD_DC;
    2be2:	4f0d      	ldr	r7, [pc, #52]	; (2c18 <fillRect+0x78>)
    2be4:	2380      	movs	r3, #128	; 0x80
    2be6:	041b      	lsls	r3, r3, #16
    2be8:	603b      	str	r3, [r7, #0]
	(((long)(x2-x1)+1)*((long)(y2-y1)+1)));
    2bea:	1ba4      	subs	r4, r4, r6
    2bec:	3401      	adds	r4, #1
    2bee:	464b      	mov	r3, r9
    2bf0:	1aea      	subs	r2, r5, r3
    2bf2:	3201      	adds	r2, #1
	LCD_Fast_Fill(fore_Color_High, fore_Color_Low,
    2bf4:	4362      	muls	r2, r4
    2bf6:	4b09      	ldr	r3, [pc, #36]	; (2c1c <fillRect+0x7c>)
    2bf8:	8819      	ldrh	r1, [r3, #0]
    2bfa:	4b09      	ldr	r3, [pc, #36]	; (2c20 <fillRect+0x80>)
    2bfc:	8818      	ldrh	r0, [r3, #0]
    2bfe:	4b09      	ldr	r3, [pc, #36]	; (2c24 <fillRect+0x84>)
    2c00:	4798      	blx	r3
	REG_PORT_OUTSET1 = LCD_CS;
    2c02:	4643      	mov	r3, r8
    2c04:	603b      	str	r3, [r7, #0]
}
    2c06:	b003      	add	sp, #12
    2c08:	bc0c      	pop	{r2, r3}
    2c0a:	4690      	mov	r8, r2
    2c0c:	4699      	mov	r9, r3
    2c0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c10:	41004494 	.word	0x41004494
    2c14:	00002b29 	.word	0x00002b29
    2c18:	41004498 	.word	0x41004498
    2c1c:	20000a9c 	.word	0x20000a9c
    2c20:	20000a9a 	.word	0x20000a9a
    2c24:	00002ab5 	.word	0x00002ab5

00002c28 <fillRectBackColor>:
{
    2c28:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c2a:	46ce      	mov	lr, r9
    2c2c:	4647      	mov	r7, r8
    2c2e:	b580      	push	{r7, lr}
    2c30:	b083      	sub	sp, #12
    2c32:	0006      	movs	r6, r0
    2c34:	4689      	mov	r9, r1
    2c36:	0014      	movs	r4, r2
    2c38:	001d      	movs	r5, r3
	if (x1>x2)
    2c3a:	4290      	cmp	r0, r2
    2c3c:	dd01      	ble.n	2c42 <fillRectBackColor+0x1a>
		x1 = x2;
    2c3e:	0016      	movs	r6, r2
		x2 = temp;
    2c40:	0004      	movs	r4, r0
	if (y1>y2)
    2c42:	45a9      	cmp	r9, r5
    2c44:	dd02      	ble.n	2c4c <fillRectBackColor+0x24>
    2c46:	0033      	movs	r3, r6
		x1 = x2;
    2c48:	0026      	movs	r6, r4
		x2 = temp;
    2c4a:	001c      	movs	r4, r3
	REG_PORT_OUTCLR1 = LCD_CS;
    2c4c:	2380      	movs	r3, #128	; 0x80
    2c4e:	03db      	lsls	r3, r3, #15
    2c50:	4698      	mov	r8, r3
    2c52:	4b11      	ldr	r3, [pc, #68]	; (2c98 <fillRectBackColor+0x70>)
    2c54:	4642      	mov	r2, r8
    2c56:	601a      	str	r2, [r3, #0]
	setXY(x1, y1, x2, y2);
    2c58:	b2ab      	uxth	r3, r5
    2c5a:	b2a2      	uxth	r2, r4
    2c5c:	4649      	mov	r1, r9
    2c5e:	4668      	mov	r0, sp
    2c60:	80c1      	strh	r1, [r0, #6]
    2c62:	88c1      	ldrh	r1, [r0, #6]
    2c64:	b2b0      	uxth	r0, r6
    2c66:	4f0d      	ldr	r7, [pc, #52]	; (2c9c <fillRectBackColor+0x74>)
    2c68:	47b8      	blx	r7
	REG_PORT_OUTSET1 = LCD_DC;
    2c6a:	4f0d      	ldr	r7, [pc, #52]	; (2ca0 <fillRectBackColor+0x78>)
    2c6c:	2380      	movs	r3, #128	; 0x80
    2c6e:	041b      	lsls	r3, r3, #16
    2c70:	603b      	str	r3, [r7, #0]
	(((long)(x2-x1)+1)*((long)(y2-y1)+1)));
    2c72:	1ba4      	subs	r4, r4, r6
    2c74:	3401      	adds	r4, #1
    2c76:	464b      	mov	r3, r9
    2c78:	1aea      	subs	r2, r5, r3
    2c7a:	3201      	adds	r2, #1
	LCD_Fast_Fill(back_Color_High, back_Color_Low,
    2c7c:	4362      	muls	r2, r4
    2c7e:	4b09      	ldr	r3, [pc, #36]	; (2ca4 <fillRectBackColor+0x7c>)
    2c80:	8819      	ldrh	r1, [r3, #0]
    2c82:	4b09      	ldr	r3, [pc, #36]	; (2ca8 <fillRectBackColor+0x80>)
    2c84:	8818      	ldrh	r0, [r3, #0]
    2c86:	4b09      	ldr	r3, [pc, #36]	; (2cac <fillRectBackColor+0x84>)
    2c88:	4798      	blx	r3
	REG_PORT_OUTSET1 = LCD_CS;
    2c8a:	4643      	mov	r3, r8
    2c8c:	603b      	str	r3, [r7, #0]
}
    2c8e:	b003      	add	sp, #12
    2c90:	bc0c      	pop	{r2, r3}
    2c92:	4690      	mov	r8, r2
    2c94:	4699      	mov	r9, r3
    2c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c98:	41004494 	.word	0x41004494
    2c9c:	00002b29 	.word	0x00002b29
    2ca0:	41004498 	.word	0x41004498
    2ca4:	20000a98 	.word	0x20000a98
    2ca8:	20000a9e 	.word	0x20000a9e
    2cac:	00002ab5 	.word	0x00002ab5

00002cb0 <clrXY>:
{
    2cb0:	b510      	push	{r4, lr}
	setXY(0,0,display_X_size,display_Y_size);
    2cb2:	4b04      	ldr	r3, [pc, #16]	; (2cc4 <clrXY+0x14>)
    2cb4:	881b      	ldrh	r3, [r3, #0]
    2cb6:	4a04      	ldr	r2, [pc, #16]	; (2cc8 <clrXY+0x18>)
    2cb8:	8812      	ldrh	r2, [r2, #0]
    2cba:	2100      	movs	r1, #0
    2cbc:	2000      	movs	r0, #0
    2cbe:	4c03      	ldr	r4, [pc, #12]	; (2ccc <clrXY+0x1c>)
    2cc0:	47a0      	blx	r4
}
    2cc2:	bd10      	pop	{r4, pc}
    2cc4:	20000156 	.word	0x20000156
    2cc8:	20000154 	.word	0x20000154
    2ccc:	00002b29 	.word	0x00002b29

00002cd0 <clrScr>:
{
    2cd0:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = LCD_CS;
    2cd2:	2280      	movs	r2, #128	; 0x80
    2cd4:	03d2      	lsls	r2, r2, #15
    2cd6:	4b02      	ldr	r3, [pc, #8]	; (2ce0 <clrScr+0x10>)
    2cd8:	601a      	str	r2, [r3, #0]
	clrXY();
    2cda:	4b02      	ldr	r3, [pc, #8]	; (2ce4 <clrScr+0x14>)
    2cdc:	4798      	blx	r3
}
    2cde:	bd10      	pop	{r4, pc}
    2ce0:	41004494 	.word	0x41004494
    2ce4:	00002cb1 	.word	0x00002cb1

00002ce8 <setPixel>:

void setPixel(uint16_t color)
{
    2ce8:	b510      	push	{r4, lr}
	//it sets it to a 16-bit color.
	LCD_Write_DATA16((color>>8),(color&0xFF));
    2cea:	b2c1      	uxtb	r1, r0
    2cec:	0a00      	lsrs	r0, r0, #8
    2cee:	4b01      	ldr	r3, [pc, #4]	; (2cf4 <setPixel+0xc>)
    2cf0:	4798      	blx	r3
}
    2cf2:	bd10      	pop	{r4, pc}
    2cf4:	00002d6d 	.word	0x00002d6d

00002cf8 <clearScreen>:
	LCD_Write_DATA8(0x80);
	REG_PORT_OUTSET1 = LCD_CS;
}
*/
void clearScreen(void)
{
    2cf8:	b510      	push	{r4, lr}
	fore_Color_High = ((r&248)|g>>5);
    2cfa:	2300      	movs	r3, #0
    2cfc:	4a06      	ldr	r2, [pc, #24]	; (2d18 <clearScreen+0x20>)
    2cfe:	8013      	strh	r3, [r2, #0]
	fore_Color_Low = ((g&28)<<3|b>>3);
    2d00:	4a06      	ldr	r2, [pc, #24]	; (2d1c <clearScreen+0x24>)
    2d02:	8013      	strh	r3, [r2, #0]
	setColorRGB(0,0,0);
	fillRect(0,0,display_Y_size,display_X_size);
    2d04:	4b06      	ldr	r3, [pc, #24]	; (2d20 <clearScreen+0x28>)
    2d06:	881b      	ldrh	r3, [r3, #0]
    2d08:	4a06      	ldr	r2, [pc, #24]	; (2d24 <clearScreen+0x2c>)
    2d0a:	8812      	ldrh	r2, [r2, #0]
    2d0c:	2100      	movs	r1, #0
    2d0e:	2000      	movs	r0, #0
    2d10:	4c05      	ldr	r4, [pc, #20]	; (2d28 <clearScreen+0x30>)
    2d12:	47a0      	blx	r4
}
    2d14:	bd10      	pop	{r4, pc}
    2d16:	46c0      	nop			; (mov r8, r8)
    2d18:	20000a9a 	.word	0x20000a9a
    2d1c:	20000a9c 	.word	0x20000a9c
    2d20:	20000154 	.word	0x20000154
    2d24:	20000156 	.word	0x20000156
    2d28:	00002ba1 	.word	0x00002ba1

00002d2c <LCD_Write_Bus>:
	fillRect(0,0,799,489);
		
}

void LCD_Write_Bus(char VH, char VL)
{
    2d2c:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = 0x0000ffff;
    2d2e:	4c06      	ldr	r4, [pc, #24]	; (2d48 <LCD_Write_Bus+0x1c>)
    2d30:	4b06      	ldr	r3, [pc, #24]	; (2d4c <LCD_Write_Bus+0x20>)
    2d32:	6023      	str	r3, [r4, #0]
	REG_PORT_OUTSET1 = (VH << 8) | VL;
    2d34:	0200      	lsls	r0, r0, #8
    2d36:	4301      	orrs	r1, r0
    2d38:	4b05      	ldr	r3, [pc, #20]	; (2d50 <LCD_Write_Bus+0x24>)
    2d3a:	6019      	str	r1, [r3, #0]
	REG_PORT_OUTCLR1 = LCD_WR;
    2d3c:	2280      	movs	r2, #128	; 0x80
    2d3e:	0292      	lsls	r2, r2, #10
    2d40:	6022      	str	r2, [r4, #0]
	REG_PORT_OUTSET1 = LCD_WR;
    2d42:	601a      	str	r2, [r3, #0]
}
    2d44:	bd10      	pop	{r4, pc}
    2d46:	46c0      	nop			; (mov r8, r8)
    2d48:	41004494 	.word	0x41004494
    2d4c:	0000ffff 	.word	0x0000ffff
    2d50:	41004498 	.word	0x41004498

00002d54 <LCD_Write_COM16>:

void LCD_Write_COM16(char VH, char VL)
{
    2d54:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = LCD_DC;
    2d56:	2280      	movs	r2, #128	; 0x80
    2d58:	0412      	lsls	r2, r2, #16
    2d5a:	4b02      	ldr	r3, [pc, #8]	; (2d64 <LCD_Write_COM16+0x10>)
    2d5c:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(VH,VL);
    2d5e:	4b02      	ldr	r3, [pc, #8]	; (2d68 <LCD_Write_COM16+0x14>)
    2d60:	4798      	blx	r3
}
    2d62:	bd10      	pop	{r4, pc}
    2d64:	41004494 	.word	0x41004494
    2d68:	00002d2d 	.word	0x00002d2d

00002d6c <LCD_Write_DATA16>:
	REG_PORT_OUTCLR1 = LCD_DC;
	LCD_Write_Bus(0x00, VL);
}

void LCD_Write_DATA16(char VH, char VL)
{
    2d6c:	b510      	push	{r4, lr}
	REG_PORT_OUTSET1 = LCD_DC;
    2d6e:	2280      	movs	r2, #128	; 0x80
    2d70:	0412      	lsls	r2, r2, #16
    2d72:	4b02      	ldr	r3, [pc, #8]	; (2d7c <LCD_Write_DATA16+0x10>)
    2d74:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(VH,VL);
    2d76:	4b02      	ldr	r3, [pc, #8]	; (2d80 <LCD_Write_DATA16+0x14>)
    2d78:	4798      	blx	r3
}
    2d7a:	bd10      	pop	{r4, pc}
    2d7c:	41004498 	.word	0x41004498
    2d80:	00002d2d 	.word	0x00002d2d

00002d84 <LCD_Write_DATA8>:

void LCD_Write_DATA8(char VL)
{
    2d84:	b510      	push	{r4, lr}
    2d86:	0001      	movs	r1, r0
	REG_PORT_OUTSET1 = LCD_DC;
    2d88:	2280      	movs	r2, #128	; 0x80
    2d8a:	0412      	lsls	r2, r2, #16
    2d8c:	4b02      	ldr	r3, [pc, #8]	; (2d98 <LCD_Write_DATA8+0x14>)
    2d8e:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(0x00, VL);
    2d90:	2000      	movs	r0, #0
    2d92:	4b02      	ldr	r3, [pc, #8]	; (2d9c <LCD_Write_DATA8+0x18>)
    2d94:	4798      	blx	r3
}
    2d96:	bd10      	pop	{r4, pc}
    2d98:	41004498 	.word	0x41004498
    2d9c:	00002d2d 	.word	0x00002d2d

00002da0 <InitLCD>:
{
    2da0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2da2:	46c6      	mov	lr, r8
    2da4:	b500      	push	{lr}
    2da6:	b082      	sub	sp, #8
	REG_PORT_DIRSET1 = 0x0000ffff;		//LCD data bus, PB00 - PB15
    2da8:	4b80      	ldr	r3, [pc, #512]	; (2fac <InitLCD+0x20c>)
    2daa:	4f81      	ldr	r7, [pc, #516]	; (2fb0 <InitLCD+0x210>)
    2dac:	601f      	str	r7, [r3, #0]
	REG_PORT_DIRSET1 = LCD_Reset;
    2dae:	2580      	movs	r5, #128	; 0x80
    2db0:	05ed      	lsls	r5, r5, #23
    2db2:	601d      	str	r5, [r3, #0]
	REG_PORT_DIRSET1 = LCD_CS;
    2db4:	2680      	movs	r6, #128	; 0x80
    2db6:	03f6      	lsls	r6, r6, #15
    2db8:	601e      	str	r6, [r3, #0]
	REG_PORT_DIRSET1 = LCD_WR;
    2dba:	2080      	movs	r0, #128	; 0x80
    2dbc:	0280      	lsls	r0, r0, #10
    2dbe:	6018      	str	r0, [r3, #0]
	REG_PORT_DIRSET1 = LCD_DC;
    2dc0:	2180      	movs	r1, #128	; 0x80
    2dc2:	0409      	lsls	r1, r1, #16
    2dc4:	6019      	str	r1, [r3, #0]
	REG_PORT_DIRSET1 = LCD_RD;
    2dc6:	2280      	movs	r2, #128	; 0x80
    2dc8:	0252      	lsls	r2, r2, #9
    2dca:	601a      	str	r2, [r3, #0]
	REG_PORT_OUTCLR1 = 0x0000ffff;
    2dcc:	4c79      	ldr	r4, [pc, #484]	; (2fb4 <InitLCD+0x214>)
    2dce:	6027      	str	r7, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_Reset;
    2dd0:	6025      	str	r5, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_CS;
    2dd2:	6026      	str	r6, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_WR;
    2dd4:	6020      	str	r0, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_DC;
    2dd6:	6021      	str	r1, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_RD;
    2dd8:	6022      	str	r2, [r4, #0]
	REG_PORT_DIRSET1 = PORT_PB16;
    2dda:	601a      	str	r2, [r3, #0]
	REG_PORT_OUTSET1 = PORT_PB16;
    2ddc:	4f76      	ldr	r7, [pc, #472]	; (2fb8 <InitLCD+0x218>)
    2dde:	603a      	str	r2, [r7, #0]
	REG_PORT_OUTSET1 = LCD_Reset;
    2de0:	603d      	str	r5, [r7, #0]
	delay_ms(5);
    2de2:	2005      	movs	r0, #5
    2de4:	4b75      	ldr	r3, [pc, #468]	; (2fbc <InitLCD+0x21c>)
    2de6:	4698      	mov	r8, r3
    2de8:	4798      	blx	r3
	REG_PORT_OUTCLR1 = LCD_Reset;
    2dea:	6025      	str	r5, [r4, #0]
	delay_ms(5);
    2dec:	2005      	movs	r0, #5
    2dee:	47c0      	blx	r8
	REG_PORT_OUTSET1 = LCD_Reset;
    2df0:	603d      	str	r5, [r7, #0]
	REG_PORT_OUTCLR1 = LCD_CS;
    2df2:	6026      	str	r6, [r4, #0]
	for(int i = 0; i < 70; i++)
    2df4:	2400      	movs	r4, #0
		REG_PORT_OUTCLR1 = LCD_DC;
    2df6:	4b6f      	ldr	r3, [pc, #444]	; (2fb4 <InitLCD+0x214>)
    2df8:	4698      	mov	r8, r3
    2dfa:	2580      	movs	r5, #128	; 0x80
    2dfc:	042d      	lsls	r5, r5, #16
    2dfe:	002f      	movs	r7, r5
		LCD_Write_COM16(belial[i],mulciber[i]);
    2e00:	4e6f      	ldr	r6, [pc, #444]	; (2fc0 <InitLCD+0x220>)
		REG_PORT_OUTCLR1 = LCD_DC;
    2e02:	4643      	mov	r3, r8
    2e04:	601f      	str	r7, [r3, #0]
		LCD_Write_COM16(belial[i],mulciber[i]);
    2e06:	5da1      	ldrb	r1, [r4, r6]
    2e08:	4b6e      	ldr	r3, [pc, #440]	; (2fc4 <InitLCD+0x224>)
    2e0a:	5ce0      	ldrb	r0, [r4, r3]
    2e0c:	4b6e      	ldr	r3, [pc, #440]	; (2fc8 <InitLCD+0x228>)
    2e0e:	4798      	blx	r3
		REG_PORT_OUTSET1 = LCD_DC;
    2e10:	4b69      	ldr	r3, [pc, #420]	; (2fb8 <InitLCD+0x218>)
    2e12:	601d      	str	r5, [r3, #0]
		LCD_Write_DATA8(lucifer[i]);
    2e14:	4b6d      	ldr	r3, [pc, #436]	; (2fcc <InitLCD+0x22c>)
    2e16:	5ce0      	ldrb	r0, [r4, r3]
    2e18:	4b6d      	ldr	r3, [pc, #436]	; (2fd0 <InitLCD+0x230>)
    2e1a:	4798      	blx	r3
	for(int i = 0; i < 70; i++)
    2e1c:	3401      	adds	r4, #1
    2e1e:	2c46      	cmp	r4, #70	; 0x46
    2e20:	d1ef      	bne.n	2e02 <InitLCD+0x62>
    2e22:	23d1      	movs	r3, #209	; 0xd1
    2e24:	9301      	str	r3, [sp, #4]
			LCD_Write_COM16(k,0x00);
    2e26:	4d68      	ldr	r5, [pc, #416]	; (2fc8 <InitLCD+0x228>)
			LCD_Write_DATA8(beelzebub[l]);
    2e28:	4f69      	ldr	r7, [pc, #420]	; (2fd0 <InitLCD+0x230>)
    2e2a:	4c6a      	ldr	r4, [pc, #424]	; (2fd4 <InitLCD+0x234>)
    2e2c:	0026      	movs	r6, r4
    2e2e:	3634      	adds	r6, #52	; 0x34
			LCD_Write_COM16(k,0x00);
    2e30:	2100      	movs	r1, #0
    2e32:	9801      	ldr	r0, [sp, #4]
    2e34:	47a8      	blx	r5
			LCD_Write_DATA8(beelzebub[l]);
    2e36:	7820      	ldrb	r0, [r4, #0]
    2e38:	47b8      	blx	r7
    2e3a:	3401      	adds	r4, #1
		for(int l = 0; l < 52; l++)
    2e3c:	42a6      	cmp	r6, r4
    2e3e:	d1f7      	bne.n	2e30 <InitLCD+0x90>
	for(char k = 0xD1; k < 0xD6; k++)
    2e40:	9b01      	ldr	r3, [sp, #4]
    2e42:	3301      	adds	r3, #1
    2e44:	b2db      	uxtb	r3, r3
    2e46:	9301      	str	r3, [sp, #4]
    2e48:	2bd6      	cmp	r3, #214	; 0xd6
    2e4a:	d1ee      	bne.n	2e2a <InitLCD+0x8a>
	LCD_Write_COM16(0xF0, 0x00);LCD_Write_DATA8(0x55);
    2e4c:	2100      	movs	r1, #0
    2e4e:	20f0      	movs	r0, #240	; 0xf0
    2e50:	4c5d      	ldr	r4, [pc, #372]	; (2fc8 <InitLCD+0x228>)
    2e52:	47a0      	blx	r4
    2e54:	2055      	movs	r0, #85	; 0x55
    2e56:	4d5e      	ldr	r5, [pc, #376]	; (2fd0 <InitLCD+0x230>)
    2e58:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x01);LCD_Write_DATA8(0xAA);	
    2e5a:	2101      	movs	r1, #1
    2e5c:	20f0      	movs	r0, #240	; 0xf0
    2e5e:	47a0      	blx	r4
    2e60:	20aa      	movs	r0, #170	; 0xaa
    2e62:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x02);LCD_Write_DATA8(0x52);	
    2e64:	2102      	movs	r1, #2
    2e66:	20f0      	movs	r0, #240	; 0xf0
    2e68:	47a0      	blx	r4
    2e6a:	2052      	movs	r0, #82	; 0x52
    2e6c:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x03);LCD_Write_DATA8(0x08);	
    2e6e:	2103      	movs	r1, #3
    2e70:	20f0      	movs	r0, #240	; 0xf0
    2e72:	47a0      	blx	r4
    2e74:	2008      	movs	r0, #8
    2e76:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x04);LCD_Write_DATA8(0x00);	
    2e78:	2104      	movs	r1, #4
    2e7a:	20f0      	movs	r0, #240	; 0xf0
    2e7c:	47a0      	blx	r4
    2e7e:	2000      	movs	r0, #0
    2e80:	47a8      	blx	r5
	LCD_Write_COM16(0xB1, 0x00);LCD_Write_DATA8(0xCC);
    2e82:	2100      	movs	r1, #0
    2e84:	20b1      	movs	r0, #177	; 0xb1
    2e86:	47a0      	blx	r4
    2e88:	20cc      	movs	r0, #204	; 0xcc
    2e8a:	47a8      	blx	r5
	LCD_Write_COM16(0xB1, 0x01);LCD_Write_DATA8(0x00);	
    2e8c:	2101      	movs	r1, #1
    2e8e:	20b1      	movs	r0, #177	; 0xb1
    2e90:	47a0      	blx	r4
    2e92:	2000      	movs	r0, #0
    2e94:	47a8      	blx	r5
	LCD_Write_COM16(0xB5, 0x00);LCD_Write_DATA8(0x50);	
    2e96:	2100      	movs	r1, #0
    2e98:	20b5      	movs	r0, #181	; 0xb5
    2e9a:	47a0      	blx	r4
    2e9c:	2050      	movs	r0, #80	; 0x50
    2e9e:	47a8      	blx	r5
	LCD_Write_COM16(0xB6, 0x00);LCD_Write_DATA8(0x05);
    2ea0:	2100      	movs	r1, #0
    2ea2:	20b6      	movs	r0, #182	; 0xb6
    2ea4:	47a0      	blx	r4
    2ea6:	2005      	movs	r0, #5
    2ea8:	47a8      	blx	r5
	LCD_Write_COM16(0xB7, 0x00);LCD_Write_DATA8(0x70);
    2eaa:	2100      	movs	r1, #0
    2eac:	20b7      	movs	r0, #183	; 0xb7
    2eae:	47a0      	blx	r4
    2eb0:	2070      	movs	r0, #112	; 0x70
    2eb2:	47a8      	blx	r5
	LCD_Write_COM16(0xB7, 0x01);LCD_Write_DATA8(0x70);
    2eb4:	2101      	movs	r1, #1
    2eb6:	20b7      	movs	r0, #183	; 0xb7
    2eb8:	47a0      	blx	r4
    2eba:	2070      	movs	r0, #112	; 0x70
    2ebc:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x00);LCD_Write_DATA8(0x01);
    2ebe:	2100      	movs	r1, #0
    2ec0:	20b8      	movs	r0, #184	; 0xb8
    2ec2:	47a0      	blx	r4
    2ec4:	2001      	movs	r0, #1
    2ec6:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x01);LCD_Write_DATA8(0x03);
    2ec8:	2101      	movs	r1, #1
    2eca:	20b8      	movs	r0, #184	; 0xb8
    2ecc:	47a0      	blx	r4
    2ece:	2003      	movs	r0, #3
    2ed0:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x02);LCD_Write_DATA8(0x03);
    2ed2:	2102      	movs	r1, #2
    2ed4:	20b8      	movs	r0, #184	; 0xb8
    2ed6:	47a0      	blx	r4
    2ed8:	2003      	movs	r0, #3
    2eda:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x03);LCD_Write_DATA8(0x03);	
    2edc:	2103      	movs	r1, #3
    2ede:	20b8      	movs	r0, #184	; 0xb8
    2ee0:	47a0      	blx	r4
    2ee2:	2003      	movs	r0, #3
    2ee4:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x00);LCD_Write_DATA8(0x02);
    2ee6:	2100      	movs	r1, #0
    2ee8:	20bc      	movs	r0, #188	; 0xbc
    2eea:	47a0      	blx	r4
    2eec:	2002      	movs	r0, #2
    2eee:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x01);LCD_Write_DATA8(0x00);
    2ef0:	2101      	movs	r1, #1
    2ef2:	20bc      	movs	r0, #188	; 0xbc
    2ef4:	47a0      	blx	r4
    2ef6:	2000      	movs	r0, #0
    2ef8:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x02);LCD_Write_DATA8(0x00);
    2efa:	2102      	movs	r1, #2
    2efc:	20bc      	movs	r0, #188	; 0xbc
    2efe:	47a0      	blx	r4
    2f00:	2000      	movs	r0, #0
    2f02:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x00);LCD_Write_DATA8(0xD0);
    2f04:	2100      	movs	r1, #0
    2f06:	20c9      	movs	r0, #201	; 0xc9
    2f08:	47a0      	blx	r4
    2f0a:	20d0      	movs	r0, #208	; 0xd0
    2f0c:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x01);LCD_Write_DATA8(0x02);
    2f0e:	2101      	movs	r1, #1
    2f10:	20c9      	movs	r0, #201	; 0xc9
    2f12:	47a0      	blx	r4
    2f14:	2002      	movs	r0, #2
    2f16:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x02);LCD_Write_DATA8(0x50);
    2f18:	2102      	movs	r1, #2
    2f1a:	20c9      	movs	r0, #201	; 0xc9
    2f1c:	47a0      	blx	r4
    2f1e:	2050      	movs	r0, #80	; 0x50
    2f20:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x03);LCD_Write_DATA8(0x50);
    2f22:	2103      	movs	r1, #3
    2f24:	20c9      	movs	r0, #201	; 0xc9
    2f26:	47a0      	blx	r4
    2f28:	2050      	movs	r0, #80	; 0x50
    2f2a:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x04);LCD_Write_DATA8(0x50);
    2f2c:	2104      	movs	r1, #4
    2f2e:	20c9      	movs	r0, #201	; 0xc9
    2f30:	47a0      	blx	r4
    2f32:	2050      	movs	r0, #80	; 0x50
    2f34:	47a8      	blx	r5
	LCD_Write_COM16(0x35, 0x00);LCD_Write_DATA8(0x00);
    2f36:	2100      	movs	r1, #0
    2f38:	2035      	movs	r0, #53	; 0x35
    2f3a:	47a0      	blx	r4
    2f3c:	2000      	movs	r0, #0
    2f3e:	47a8      	blx	r5
	LCD_Write_COM16(0x3A, 0x00);LCD_Write_DATA8(0x55);
    2f40:	2100      	movs	r1, #0
    2f42:	203a      	movs	r0, #58	; 0x3a
    2f44:	47a0      	blx	r4
    2f46:	2055      	movs	r0, #85	; 0x55
    2f48:	47a8      	blx	r5
	LCD_Write_COM16(0x36, 0x00);LCD_Write_DATA8(0xE2);  //This is the MADCTL register
    2f4a:	2100      	movs	r1, #0
    2f4c:	2036      	movs	r0, #54	; 0x36
    2f4e:	47a0      	blx	r4
    2f50:	20e2      	movs	r0, #226	; 0xe2
    2f52:	47a8      	blx	r5
  	LCD_Write_COM16(0x11,0x00);   //Start Up  
    2f54:	2100      	movs	r1, #0
    2f56:	2011      	movs	r0, #17
    2f58:	47a0      	blx	r4
  	delay_ms(100);
    2f5a:	2064      	movs	r0, #100	; 0x64
    2f5c:	4e17      	ldr	r6, [pc, #92]	; (2fbc <InitLCD+0x21c>)
    2f5e:	47b0      	blx	r6
  	LCD_Write_COM16(0x29,0x00);   //Display On  
    2f60:	2100      	movs	r1, #0
    2f62:	2029      	movs	r0, #41	; 0x29
    2f64:	47a0      	blx	r4
   	delay_ms(100);
    2f66:	2064      	movs	r0, #100	; 0x64
    2f68:	47b0      	blx	r6
	LCD_Write_COM16(0x51,0x00);LCD_Write_DATA8(0xFF);
    2f6a:	2100      	movs	r1, #0
    2f6c:	2051      	movs	r0, #81	; 0x51
    2f6e:	47a0      	blx	r4
    2f70:	20ff      	movs	r0, #255	; 0xff
    2f72:	47a8      	blx	r5
	REG_PORT_OUTSET1 = LCD_CS;
    2f74:	2280      	movs	r2, #128	; 0x80
    2f76:	03d2      	lsls	r2, r2, #15
    2f78:	4b0f      	ldr	r3, [pc, #60]	; (2fb8 <InitLCD+0x218>)
    2f7a:	601a      	str	r2, [r3, #0]
	clrScr();
    2f7c:	4b16      	ldr	r3, [pc, #88]	; (2fd8 <InitLCD+0x238>)
    2f7e:	4798      	blx	r3
	setColorRGB(0,0,0);
    2f80:	2200      	movs	r2, #0
    2f82:	2100      	movs	r1, #0
    2f84:	2000      	movs	r0, #0
    2f86:	4b15      	ldr	r3, [pc, #84]	; (2fdc <InitLCD+0x23c>)
    2f88:	4798      	blx	r3
	setBackColorRGB(0, 0, 0);
    2f8a:	2200      	movs	r2, #0
    2f8c:	2100      	movs	r1, #0
    2f8e:	2000      	movs	r0, #0
    2f90:	4b13      	ldr	r3, [pc, #76]	; (2fe0 <InitLCD+0x240>)
    2f92:	4798      	blx	r3
	fillRect(0,0,799,489);
    2f94:	23ea      	movs	r3, #234	; 0xea
    2f96:	33ff      	adds	r3, #255	; 0xff
    2f98:	4a12      	ldr	r2, [pc, #72]	; (2fe4 <InitLCD+0x244>)
    2f9a:	2100      	movs	r1, #0
    2f9c:	2000      	movs	r0, #0
    2f9e:	4c12      	ldr	r4, [pc, #72]	; (2fe8 <InitLCD+0x248>)
    2fa0:	47a0      	blx	r4
}
    2fa2:	b002      	add	sp, #8
    2fa4:	bc04      	pop	{r2}
    2fa6:	4690      	mov	r8, r2
    2fa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2faa:	46c0      	nop			; (mov r8, r8)
    2fac:	41004488 	.word	0x41004488
    2fb0:	0000ffff 	.word	0x0000ffff
    2fb4:	41004494 	.word	0x41004494
    2fb8:	41004498 	.word	0x41004498
    2fbc:	00000655 	.word	0x00000655
    2fc0:	00006a34 	.word	0x00006a34
    2fc4:	000069a4 	.word	0x000069a4
    2fc8:	00002d55 	.word	0x00002d55
    2fcc:	000069ec 	.word	0x000069ec
    2fd0:	00002d85 	.word	0x00002d85
    2fd4:	00006970 	.word	0x00006970
    2fd8:	00002cd1 	.word	0x00002cd1
    2fdc:	00002a65 	.word	0x00002a65
    2fe0:	00002a8d 	.word	0x00002a8d
    2fe4:	0000031f 	.word	0x0000031f
    2fe8:	00002ba1 	.word	0x00002ba1

00002fec <usart_read_callback>:
	SysTick_Config(SystemCoreClock/1000);
	system_interrupt_enable(SYSTEM_INTERRUPT_SYSTICK);
}

void usart_read_callback(struct usart_module *const usart_module)
{
    2fec:	b510      	push	{r4, lr}
	// Read one character from the UART.
	//We can only use this function because it's non-blocking
	//and we can only read one character because reading > 1 means
	//it doesn't complete until _all_ characters are read.
	
	usart_read_buffer_job(&usart_instance, (uint8_t*)&rx_buf, 1);
    2fee:	4c06      	ldr	r4, [pc, #24]	; (3008 <usart_read_callback+0x1c>)
    2ff0:	2201      	movs	r2, #1
    2ff2:	0021      	movs	r1, r4
    2ff4:	4805      	ldr	r0, [pc, #20]	; (300c <usart_read_callback+0x20>)
    2ff6:	4b06      	ldr	r3, [pc, #24]	; (3010 <usart_read_callback+0x24>)
    2ff8:	4798      	blx	r3
	
	//stuff that ONE CHARACTER into the circular FIFO buffer
	ring_put(ouroboros, rx_buf);
    2ffa:	7821      	ldrb	r1, [r4, #0]
    2ffc:	4b05      	ldr	r3, [pc, #20]	; (3014 <usart_read_callback+0x28>)
    2ffe:	6818      	ldr	r0, [r3, #0]
    3000:	4b05      	ldr	r3, [pc, #20]	; (3018 <usart_read_callback+0x2c>)
    3002:	4798      	blx	r3
}
    3004:	bd10      	pop	{r4, pc}
    3006:	46c0      	nop			; (mov r8, r8)
    3008:	20000aa0 	.word	0x20000aa0
    300c:	200002e0 	.word	0x200002e0
    3010:	000014f5 	.word	0x000014f5
    3014:	200002b4 	.word	0x200002b4
    3018:	00000141 	.word	0x00000141

0000301c <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    301c:	b570      	push	{r4, r5, r6, lr}
    301e:	b082      	sub	sp, #8
    3020:	0005      	movs	r5, r0
    3022:	000e      	movs	r6, r1
	uint16_t temp = 0;
    3024:	2200      	movs	r2, #0
    3026:	466b      	mov	r3, sp
    3028:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    302a:	4c06      	ldr	r4, [pc, #24]	; (3044 <usart_serial_getchar+0x28>)
    302c:	466b      	mov	r3, sp
    302e:	1d99      	adds	r1, r3, #6
    3030:	0028      	movs	r0, r5
    3032:	47a0      	blx	r4
    3034:	2800      	cmp	r0, #0
    3036:	d1f9      	bne.n	302c <usart_serial_getchar+0x10>

	*c = temp;
    3038:	466b      	mov	r3, sp
    303a:	3306      	adds	r3, #6
    303c:	881b      	ldrh	r3, [r3, #0]
    303e:	7033      	strb	r3, [r6, #0]
}
    3040:	b002      	add	sp, #8
    3042:	bd70      	pop	{r4, r5, r6, pc}
    3044:	00001423 	.word	0x00001423

00003048 <usart_serial_putchar>:
{
    3048:	b570      	push	{r4, r5, r6, lr}
    304a:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    304c:	b28c      	uxth	r4, r1
    304e:	4e03      	ldr	r6, [pc, #12]	; (305c <usart_serial_putchar+0x14>)
    3050:	0021      	movs	r1, r4
    3052:	0028      	movs	r0, r5
    3054:	47b0      	blx	r6
    3056:	2800      	cmp	r0, #0
    3058:	d1fa      	bne.n	3050 <usart_serial_putchar+0x8>
}
    305a:	bd70      	pop	{r4, r5, r6, pc}
    305c:	000013fd 	.word	0x000013fd

00003060 <SysTick_Handler>:
	ul_tickcount++;
    3060:	4a02      	ldr	r2, [pc, #8]	; (306c <SysTick_Handler+0xc>)
    3062:	8813      	ldrh	r3, [r2, #0]
    3064:	3301      	adds	r3, #1
    3066:	8013      	strh	r3, [r2, #0]
}
    3068:	4770      	bx	lr
    306a:	46c0      	nop			; (mov r8, r8)
    306c:	200002a2 	.word	0x200002a2

00003070 <conf_systick>:
{
    3070:	b510      	push	{r4, lr}
	SysTick_Config(SystemCoreClock/1000);
    3072:	4b0e      	ldr	r3, [pc, #56]	; (30ac <conf_systick+0x3c>)
    3074:	6818      	ldr	r0, [r3, #0]
    3076:	21fa      	movs	r1, #250	; 0xfa
    3078:	0089      	lsls	r1, r1, #2
    307a:	4b0d      	ldr	r3, [pc, #52]	; (30b0 <conf_systick+0x40>)
    307c:	4798      	blx	r3
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    307e:	3801      	subs	r0, #1
    3080:	4b0c      	ldr	r3, [pc, #48]	; (30b4 <conf_systick+0x44>)
    3082:	4298      	cmp	r0, r3
    3084:	d80d      	bhi.n	30a2 <conf_systick+0x32>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    3086:	4a0c      	ldr	r2, [pc, #48]	; (30b8 <conf_systick+0x48>)
    3088:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    308a:	480c      	ldr	r0, [pc, #48]	; (30bc <conf_systick+0x4c>)
    308c:	6a03      	ldr	r3, [r0, #32]
    308e:	021b      	lsls	r3, r3, #8
    3090:	0a1b      	lsrs	r3, r3, #8
    3092:	21c0      	movs	r1, #192	; 0xc0
    3094:	0609      	lsls	r1, r1, #24
    3096:	430b      	orrs	r3, r1
    3098:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    309a:	2300      	movs	r3, #0
    309c:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    309e:	3307      	adds	r3, #7
    30a0:	6013      	str	r3, [r2, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    30a2:	2280      	movs	r2, #128	; 0x80
    30a4:	0612      	lsls	r2, r2, #24
    30a6:	4b06      	ldr	r3, [pc, #24]	; (30c0 <conf_systick+0x50>)
    30a8:	601a      	str	r2, [r3, #0]
}
    30aa:	bd10      	pop	{r4, pc}
    30ac:	2000000c 	.word	0x2000000c
    30b0:	00003419 	.word	0x00003419
    30b4:	00ffffff 	.word	0x00ffffff
    30b8:	e000e010 	.word	0xe000e010
    30bc:	e000ed00 	.word	0xe000ed00
    30c0:	e000e100 	.word	0xe000e100

000030c4 <configure_usart>:

/**************************SERCOM STUFF*******************************/


void configure_usart(void)
{
    30c4:	b570      	push	{r4, r5, r6, lr}
    30c6:	b090      	sub	sp, #64	; 0x40
	config->data_order       = USART_DATAORDER_LSB;
    30c8:	2380      	movs	r3, #128	; 0x80
    30ca:	05db      	lsls	r3, r3, #23
    30cc:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    30ce:	2300      	movs	r3, #0
    30d0:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    30d2:	22ff      	movs	r2, #255	; 0xff
    30d4:	4669      	mov	r1, sp
    30d6:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    30d8:	2200      	movs	r2, #0
    30da:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    30dc:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
    30de:	2196      	movs	r1, #150	; 0x96
    30e0:	0189      	lsls	r1, r1, #6
    30e2:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
    30e4:	2101      	movs	r1, #1
    30e6:	2024      	movs	r0, #36	; 0x24
    30e8:	466c      	mov	r4, sp
    30ea:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    30ec:	3001      	adds	r0, #1
    30ee:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    30f0:	3125      	adds	r1, #37	; 0x25
    30f2:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    30f4:	3101      	adds	r1, #1
    30f6:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    30f8:	930a      	str	r3, [sp, #40]	; 0x28
	config->run_in_standby   = false;
    30fa:	3105      	adds	r1, #5
    30fc:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    30fe:	3101      	adds	r1, #1
    3100:	5463      	strb	r3, [r4, r1]
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    3102:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    3104:	8223      	strh	r3, [r4, #16]
	config->lin_slave_enable      = false;
    3106:	76e3      	strb	r3, [r4, #27]
	config->immediate_buffer_overflow_notification  = false;
    3108:	7622      	strb	r2, [r4, #24]
	config->start_frame_detection_enable            = false;
    310a:	7722      	strb	r2, [r4, #28]
	config->encoding_format_enable                  = false;
    310c:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    310e:	2313      	movs	r3, #19
    3110:	76a3      	strb	r3, [r4, #26]
	config->collision_detection_enable              = false;
    3112:	7762      	strb	r2, [r4, #29]
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);

	config_usart.baudrate    = 9600;
	config_usart.mux_setting = USART_RX_1_TX_0_XCK_1;
    3114:	2380      	movs	r3, #128	; 0x80
    3116:	035b      	lsls	r3, r3, #13
    3118:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = PINMUX_PA08D_SERCOM2_PAD0;
    311a:	4b1e      	ldr	r3, [pc, #120]	; (3194 <configure_usart+0xd0>)
    311c:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = PINMUX_PA09D_SERCOM2_PAD1;
    311e:	4b1e      	ldr	r3, [pc, #120]	; (3198 <configure_usart+0xd4>)
    3120:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = PINMUX_UNUSED;
    3122:	2301      	movs	r3, #1
    3124:	425b      	negs	r3, r3
    3126:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = PINMUX_UNUSED;
    3128:	930f      	str	r3, [sp, #60]	; 0x3c
	
	while (usart_init(&usart_instance, SERCOM2, &config_usart) != STATUS_OK) {
    312a:	4d1c      	ldr	r5, [pc, #112]	; (319c <configure_usart+0xd8>)
    312c:	4c1c      	ldr	r4, [pc, #112]	; (31a0 <configure_usart+0xdc>)
    312e:	466a      	mov	r2, sp
    3130:	491c      	ldr	r1, [pc, #112]	; (31a4 <configure_usart+0xe0>)
    3132:	0028      	movs	r0, r5
    3134:	47a0      	blx	r4
    3136:	2800      	cmp	r0, #0
    3138:	d1f9      	bne.n	312e <configure_usart+0x6a>
	stdio_base = (void *)module;
    313a:	4c18      	ldr	r4, [pc, #96]	; (319c <configure_usart+0xd8>)
    313c:	4b1a      	ldr	r3, [pc, #104]	; (31a8 <configure_usart+0xe4>)
    313e:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    3140:	4a1a      	ldr	r2, [pc, #104]	; (31ac <configure_usart+0xe8>)
    3142:	4b1b      	ldr	r3, [pc, #108]	; (31b0 <configure_usart+0xec>)
    3144:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    3146:	4a1b      	ldr	r2, [pc, #108]	; (31b4 <configure_usart+0xf0>)
    3148:	4b1b      	ldr	r3, [pc, #108]	; (31b8 <configure_usart+0xf4>)
    314a:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    314c:	466a      	mov	r2, sp
    314e:	4915      	ldr	r1, [pc, #84]	; (31a4 <configure_usart+0xe0>)
    3150:	0020      	movs	r0, r4
    3152:	4b13      	ldr	r3, [pc, #76]	; (31a0 <configure_usart+0xdc>)
    3154:	4798      	blx	r3
	setbuf(stdout, NULL);
    3156:	4e19      	ldr	r6, [pc, #100]	; (31bc <configure_usart+0xf8>)
    3158:	6833      	ldr	r3, [r6, #0]
    315a:	6898      	ldr	r0, [r3, #8]
    315c:	2100      	movs	r1, #0
    315e:	4d18      	ldr	r5, [pc, #96]	; (31c0 <configure_usart+0xfc>)
    3160:	47a8      	blx	r5
	setbuf(stdin, NULL);
    3162:	6833      	ldr	r3, [r6, #0]
    3164:	6858      	ldr	r0, [r3, #4]
    3166:	2100      	movs	r1, #0
    3168:	47a8      	blx	r5
	SercomUsart *const usart_hw = &(module->hw->USART);
    316a:	6825      	ldr	r5, [r4, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    316c:	0028      	movs	r0, r5
    316e:	4b15      	ldr	r3, [pc, #84]	; (31c4 <configure_usart+0x100>)
    3170:	4798      	blx	r3
    3172:	231f      	movs	r3, #31
    3174:	4018      	ands	r0, r3
    3176:	3b1e      	subs	r3, #30
    3178:	4083      	lsls	r3, r0
    317a:	4a13      	ldr	r2, [pc, #76]	; (31c8 <configure_usart+0x104>)
    317c:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    317e:	6822      	ldr	r2, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
    3180:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    3182:	2b00      	cmp	r3, #0
    3184:	d1fc      	bne.n	3180 <configure_usart+0xbc>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    3186:	682b      	ldr	r3, [r5, #0]
    3188:	2202      	movs	r2, #2
    318a:	4313      	orrs	r3, r2
    318c:	602b      	str	r3, [r5, #0]
	}
	stdio_serial_init(&usart_instance, SERCOM2, &config_usart);
	usart_enable(&usart_instance);
}
    318e:	b010      	add	sp, #64	; 0x40
    3190:	bd70      	pop	{r4, r5, r6, pc}
    3192:	46c0      	nop			; (mov r8, r8)
    3194:	00080003 	.word	0x00080003
    3198:	00090003 	.word	0x00090003
    319c:	200002e0 	.word	0x200002e0
    31a0:	000010c1 	.word	0x000010c1
    31a4:	42001000 	.word	0x42001000
    31a8:	200002dc 	.word	0x200002dc
    31ac:	00003049 	.word	0x00003049
    31b0:	200002d8 	.word	0x200002d8
    31b4:	0000301d 	.word	0x0000301d
    31b8:	200002d4 	.word	0x200002d4
    31bc:	2000015c 	.word	0x2000015c
    31c0:	00003a55 	.word	0x00003a55
    31c4:	00001031 	.word	0x00001031
    31c8:	e000e100 	.word	0xe000e100

000031cc <configure_usart_callbacks>:

void configure_usart_callbacks(void)
{
    31cc:	b510      	push	{r4, lr}
	usart_register_callback(&usart_instance,usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
    31ce:	4c06      	ldr	r4, [pc, #24]	; (31e8 <configure_usart_callbacks+0x1c>)
    31d0:	2201      	movs	r2, #1
    31d2:	4906      	ldr	r1, [pc, #24]	; (31ec <configure_usart_callbacks+0x20>)
    31d4:	0020      	movs	r0, r4
    31d6:	4b06      	ldr	r3, [pc, #24]	; (31f0 <configure_usart_callbacks+0x24>)
    31d8:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    31da:	2231      	movs	r2, #49	; 0x31
    31dc:	5ca3      	ldrb	r3, [r4, r2]
    31de:	2102      	movs	r1, #2
    31e0:	430b      	orrs	r3, r1
    31e2:	54a3      	strb	r3, [r4, r2]
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
}
    31e4:	bd10      	pop	{r4, pc}
    31e6:	46c0      	nop			; (mov r8, r8)
    31e8:	200002e0 	.word	0x200002e0
    31ec:	00002fed 	.word	0x00002fed
    31f0:	000014dd 	.word	0x000014dd

000031f4 <configure_adc>:
	usart_enable(&usart_USB);
}
*/

void configure_adc(void)
{
    31f4:	b510      	push	{r4, lr}
    31f6:	b08c      	sub	sp, #48	; 0x30
	struct adc_config config_adc;
	adc_get_config_defaults(&config_adc);
    31f8:	4668      	mov	r0, sp
    31fa:	4b11      	ldr	r3, [pc, #68]	; (3240 <configure_adc+0x4c>)
    31fc:	4798      	blx	r3
	config_adc.positive_input = ADC_POSITIVE_INPUT_DAC;
    31fe:	231c      	movs	r3, #28
    3200:	466a      	mov	r2, sp
    3202:	7313      	strb	r3, [r2, #12]
	adc_init(&adc_instance, ADC, &config_adc);
    3204:	4c0f      	ldr	r4, [pc, #60]	; (3244 <configure_adc+0x50>)
    3206:	4910      	ldr	r1, [pc, #64]	; (3248 <configure_adc+0x54>)
    3208:	0020      	movs	r0, r4
    320a:	4b10      	ldr	r3, [pc, #64]	; (324c <configure_adc+0x58>)
    320c:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    320e:	6822      	ldr	r2, [r4, #0]
    3210:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    3212:	b25b      	sxtb	r3, r3
    3214:	2b00      	cmp	r3, #0
    3216:	dbfb      	blt.n	3210 <configure_adc+0x1c>
    3218:	2180      	movs	r1, #128	; 0x80
    321a:	0409      	lsls	r1, r1, #16
    321c:	4b0c      	ldr	r3, [pc, #48]	; (3250 <configure_adc+0x5c>)
    321e:	6019      	str	r1, [r3, #0]
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    3220:	230f      	movs	r3, #15
    3222:	7593      	strb	r3, [r2, #22]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    3224:	7613      	strb	r3, [r2, #24]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    3226:	7813      	ldrb	r3, [r2, #0]
    3228:	2102      	movs	r1, #2
    322a:	430b      	orrs	r3, r1
    322c:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
    322e:	4b05      	ldr	r3, [pc, #20]	; (3244 <configure_adc+0x50>)
    3230:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    3232:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    3234:	b25b      	sxtb	r3, r3
    3236:	2b00      	cmp	r3, #0
    3238:	dbfb      	blt.n	3232 <configure_adc+0x3e>
	adc_enable(&adc_instance);
}
    323a:	b00c      	add	sp, #48	; 0x30
    323c:	bd10      	pop	{r4, pc}
    323e:	46c0      	nop			; (mov r8, r8)
    3240:	00000729 	.word	0x00000729
    3244:	20000aa4 	.word	0x20000aa4
    3248:	42004000 	.word	0x42004000
    324c:	0000076d 	.word	0x0000076d
    3250:	e000e100 	.word	0xe000e100

00003254 <setupBoard>:


void setupBoard(void)
{
    3254:	b570      	push	{r4, r5, r6, lr}
	uint16_t adcResult;

	system_init();
    3256:	4b30      	ldr	r3, [pc, #192]	; (3318 <setupBoard+0xc4>)
    3258:	4798      	blx	r3
	
	configure_adc();
    325a:	4b30      	ldr	r3, [pc, #192]	; (331c <setupBoard+0xc8>)
    325c:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    325e:	4b30      	ldr	r3, [pc, #192]	; (3320 <setupBoard+0xcc>)
    3260:	6819      	ldr	r1, [r3, #0]
    3262:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    3264:	b25b      	sxtb	r3, r3
    3266:	2b00      	cmp	r3, #0
    3268:	dbfb      	blt.n	3262 <setupBoard+0xe>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    326a:	7b0b      	ldrb	r3, [r1, #12]
    326c:	2202      	movs	r2, #2
    326e:	4313      	orrs	r3, r2
    3270:	730b      	strb	r3, [r1, #12]
    3272:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    3274:	b25b      	sxtb	r3, r3
    3276:	2b00      	cmp	r3, #0
    3278:	dbfb      	blt.n	3272 <setupBoard+0x1e>
	if (int_flags & ADC_INTFLAG_RESRDY) {
    327a:	2001      	movs	r0, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
    327c:	2504      	movs	r5, #4
		status_flags |= ADC_STATUS_WINDOW;
    327e:	2402      	movs	r4, #2
    3280:	e001      	b.n	3286 <setupBoard+0x32>
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    3282:	4210      	tst	r0, r2
    3284:	d10a      	bne.n	329c <setupBoard+0x48>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    3286:	7e0b      	ldrb	r3, [r1, #24]
    3288:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
    328a:	0002      	movs	r2, r0
    328c:	401a      	ands	r2, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
    328e:	421d      	tst	r5, r3
    3290:	d000      	beq.n	3294 <setupBoard+0x40>
		status_flags |= ADC_STATUS_WINDOW;
    3292:	4322      	orrs	r2, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    3294:	421c      	tst	r4, r3
    3296:	d0f4      	beq.n	3282 <setupBoard+0x2e>
		status_flags |= ADC_STATUS_OVERRUN;
    3298:	432a      	orrs	r2, r5
    329a:	e7f2      	b.n	3282 <setupBoard+0x2e>
    329c:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    329e:	b25b      	sxtb	r3, r3
    32a0:	2b00      	cmp	r3, #0
    32a2:	dbfb      	blt.n	329c <setupBoard+0x48>
	*result = adc_module->RESULT.reg;
    32a4:	8b4c      	ldrh	r4, [r1, #26]
    32a6:	b2a4      	uxth	r4, r4
	adc_module->INTFLAG.reg = int_flags;
    32a8:	2301      	movs	r3, #1
    32aa:	760b      	strb	r3, [r1, #24]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    32ac:	7e0a      	ldrb	r2, [r1, #24]
    32ae:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    32b0:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    32b2:	0750      	lsls	r0, r2, #29
    32b4:	d501      	bpl.n	32ba <setupBoard+0x66>
		status_flags |= ADC_STATUS_WINDOW;
    32b6:	2002      	movs	r0, #2
    32b8:	4303      	orrs	r3, r0
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    32ba:	0792      	lsls	r2, r2, #30
    32bc:	d501      	bpl.n	32c2 <setupBoard+0x6e>
		status_flags |= ADC_STATUS_OVERRUN;
    32be:	2204      	movs	r2, #4
    32c0:	4313      	orrs	r3, r2
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    32c2:	075b      	lsls	r3, r3, #29
    32c4:	d501      	bpl.n	32ca <setupBoard+0x76>
	adc_module->INTFLAG.reg = int_flags;
    32c6:	2302      	movs	r3, #2
    32c8:	760b      	strb	r3, [r1, #24]
	adc_start_conversion(&adc_instance);
	do {
	/* Wait for conversion to be done and read out result */
	} while (adc_read(&adc_instance, &adcResult) == STATUS_BUSY);
	
	delay_init();
    32ca:	4b16      	ldr	r3, [pc, #88]	; (3324 <setupBoard+0xd0>)
    32cc:	4798      	blx	r3
	srand(adcResult);
    32ce:	0020      	movs	r0, r4
    32d0:	4b15      	ldr	r3, [pc, #84]	; (3328 <setupBoard+0xd4>)
    32d2:	4798      	blx	r3
	conf_systick();
    32d4:	4c15      	ldr	r4, [pc, #84]	; (332c <setupBoard+0xd8>)
    32d6:	47a0      	blx	r4
    
	//configure_usart_USB();
	
	configure_usart();
    32d8:	4b15      	ldr	r3, [pc, #84]	; (3330 <setupBoard+0xdc>)
    32da:	4798      	blx	r3
	configure_usart_callbacks();
    32dc:	4b15      	ldr	r3, [pc, #84]	; (3334 <setupBoard+0xe0>)
    32de:	4798      	blx	r3
	cpu_irq_enable();
    32e0:	2201      	movs	r2, #1
    32e2:	4b15      	ldr	r3, [pc, #84]	; (3338 <setupBoard+0xe4>)
    32e4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    32e6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    32ea:	b662      	cpsie	i
	system_interrupt_enable_global();
	
	//I have no idea why I need to call this; it's in the callback and it
	//doesn't work without this line here. Remove this at your own peril.
	usart_read_buffer_job(&usart_instance, (uint8_t*)&rx_buf, 1);
    32ec:	4913      	ldr	r1, [pc, #76]	; (333c <setupBoard+0xe8>)
    32ee:	4814      	ldr	r0, [pc, #80]	; (3340 <setupBoard+0xec>)
    32f0:	4b14      	ldr	r3, [pc, #80]	; (3344 <setupBoard+0xf0>)
    32f2:	4798      	blx	r3

	printf("\n\rSerial OK 9600 8N1\n\r");
    32f4:	4814      	ldr	r0, [pc, #80]	; (3348 <setupBoard+0xf4>)
    32f6:	4b15      	ldr	r3, [pc, #84]	; (334c <setupBoard+0xf8>)
    32f8:	4798      	blx	r3
	
	InitLCD();
    32fa:	4b15      	ldr	r3, [pc, #84]	; (3350 <setupBoard+0xfc>)
    32fc:	4798      	blx	r3
	splashScreen();
    32fe:	4b15      	ldr	r3, [pc, #84]	; (3354 <setupBoard+0x100>)
    3300:	4798      	blx	r3
			
	conf_systick();
    3302:	47a0      	blx	r4

	xCharPos=0;
    3304:	2300      	movs	r3, #0
    3306:	4a14      	ldr	r2, [pc, #80]	; (3358 <setupBoard+0x104>)
    3308:	8013      	strh	r3, [r2, #0]
	yCharPos=0;
    330a:	4a14      	ldr	r2, [pc, #80]	; (335c <setupBoard+0x108>)
    330c:	8013      	strh	r3, [r2, #0]
	drawChar(0xFF);
    330e:	20ff      	movs	r0, #255	; 0xff
    3310:	4b13      	ldr	r3, [pc, #76]	; (3360 <setupBoard+0x10c>)
    3312:	4798      	blx	r3
}
    3314:	bd70      	pop	{r4, r5, r6, pc}
    3316:	46c0      	nop			; (mov r8, r8)
    3318:	00001e19 	.word	0x00001e19
    331c:	000031f5 	.word	0x000031f5
    3320:	20000aa4 	.word	0x20000aa4
    3324:	00000615 	.word	0x00000615
    3328:	0000395d 	.word	0x0000395d
    332c:	00003071 	.word	0x00003071
    3330:	000030c5 	.word	0x000030c5
    3334:	000031cd 	.word	0x000031cd
    3338:	20000008 	.word	0x20000008
    333c:	20000aa0 	.word	0x20000aa0
    3340:	200002e0 	.word	0x200002e0
    3344:	000014f5 	.word	0x000014f5
    3348:	00006a7c 	.word	0x00006a7c
    334c:	00003929 	.word	0x00003929
    3350:	00002da1 	.word	0x00002da1
    3354:	000003ed 	.word	0x000003ed
    3358:	2000029c 	.word	0x2000029c
    335c:	2000029e 	.word	0x2000029e
    3360:	00001ffd 	.word	0x00001ffd

00003364 <main>:
{
    3364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	setupBoard();
    3366:	4b20      	ldr	r3, [pc, #128]	; (33e8 <main+0x84>)
    3368:	4798      	blx	r3
	uint8_t * buffer  = malloc(UART_BUFFER_SIZE * sizeof(uint8_t));
    336a:	200a      	movs	r0, #10
    336c:	4b1f      	ldr	r3, [pc, #124]	; (33ec <main+0x88>)
    336e:	4798      	blx	r3
	ouroboros = ring_init(buffer, UART_BUFFER_SIZE);
    3370:	210a      	movs	r1, #10
    3372:	4b1f      	ldr	r3, [pc, #124]	; (33f0 <main+0x8c>)
    3374:	4798      	blx	r3
    3376:	4b1f      	ldr	r3, [pc, #124]	; (33f4 <main+0x90>)
    3378:	6018      	str	r0, [r3, #0]
		if((ul_tickcount % (UINT16_MAX/4) == 0) && (funcLock == false))
    337a:	4f1f      	ldr	r7, [pc, #124]	; (33f8 <main+0x94>)
    337c:	4e1f      	ldr	r6, [pc, #124]	; (33fc <main+0x98>)
    337e:	4d20      	ldr	r5, [pc, #128]	; (3400 <main+0x9c>)
    3380:	e015      	b.n	33ae <main+0x4a>
		if((ul_tickcount % 200 == 0) && (funcLock == false))
    3382:	21c8      	movs	r1, #200	; 0xc8
    3384:	0020      	movs	r0, r4
    3386:	4b1d      	ldr	r3, [pc, #116]	; (33fc <main+0x98>)
    3388:	4798      	blx	r3
    338a:	b289      	uxth	r1, r1
    338c:	2900      	cmp	r1, #0
    338e:	d10e      	bne.n	33ae <main+0x4a>
    3390:	4b1c      	ldr	r3, [pc, #112]	; (3404 <main+0xa0>)
    3392:	781b      	ldrb	r3, [r3, #0]
    3394:	2b00      	cmp	r3, #0
    3396:	d10a      	bne.n	33ae <main+0x4a>
			funcLock = true;
    3398:	4c1a      	ldr	r4, [pc, #104]	; (3404 <main+0xa0>)
    339a:	2301      	movs	r3, #1
    339c:	7023      	strb	r3, [r4, #0]
			readKeyboard();
    339e:	4b1a      	ldr	r3, [pc, #104]	; (3408 <main+0xa4>)
    33a0:	4798      	blx	r3
			printKeyboardBuffer();
    33a2:	4b1a      	ldr	r3, [pc, #104]	; (340c <main+0xa8>)
    33a4:	4798      	blx	r3
			parseRXBuffer();
    33a6:	4b1a      	ldr	r3, [pc, #104]	; (3410 <main+0xac>)
    33a8:	4798      	blx	r3
			funcLock = false;
    33aa:	2300      	movs	r3, #0
    33ac:	7023      	strb	r3, [r4, #0]
		__WFI();
    33ae:	bf30      	wfi
		if((ul_tickcount % (UINT16_MAX/4) == 0) && (funcLock == false))
    33b0:	883c      	ldrh	r4, [r7, #0]
    33b2:	0029      	movs	r1, r5
    33b4:	0020      	movs	r0, r4
    33b6:	47b0      	blx	r6
    33b8:	b289      	uxth	r1, r1
    33ba:	2900      	cmp	r1, #0
    33bc:	d1e1      	bne.n	3382 <main+0x1e>
    33be:	4b11      	ldr	r3, [pc, #68]	; (3404 <main+0xa0>)
    33c0:	781b      	ldrb	r3, [r3, #0]
    33c2:	2b00      	cmp	r3, #0
    33c4:	d1f3      	bne.n	33ae <main+0x4a>
			funcLock = true;
    33c6:	4c0f      	ldr	r4, [pc, #60]	; (3404 <main+0xa0>)
    33c8:	3301      	adds	r3, #1
    33ca:	7023      	strb	r3, [r4, #0]
			blinkCursor();
    33cc:	4b11      	ldr	r3, [pc, #68]	; (3414 <main+0xb0>)
    33ce:	4798      	blx	r3
			funcLock = false;
    33d0:	2300      	movs	r3, #0
    33d2:	7023      	strb	r3, [r4, #0]
		if((ul_tickcount % 200 == 0) && (funcLock == false))
    33d4:	4b08      	ldr	r3, [pc, #32]	; (33f8 <main+0x94>)
    33d6:	8818      	ldrh	r0, [r3, #0]
    33d8:	21c8      	movs	r1, #200	; 0xc8
    33da:	4b08      	ldr	r3, [pc, #32]	; (33fc <main+0x98>)
    33dc:	4798      	blx	r3
    33de:	b289      	uxth	r1, r1
    33e0:	2900      	cmp	r1, #0
    33e2:	d0d9      	beq.n	3398 <main+0x34>
    33e4:	e7e3      	b.n	33ae <main+0x4a>
    33e6:	46c0      	nop			; (mov r8, r8)
    33e8:	00003255 	.word	0x00003255
    33ec:	000037a1 	.word	0x000037a1
    33f0:	00000115 	.word	0x00000115
    33f4:	200002b4 	.word	0x200002b4
    33f8:	200002a2 	.word	0x200002a2
    33fc:	00003525 	.word	0x00003525
    3400:	00003fff 	.word	0x00003fff
    3404:	200002a1 	.word	0x200002a1
    3408:	000024b5 	.word	0x000024b5
    340c:	000027c5 	.word	0x000027c5
    3410:	000005cd 	.word	0x000005cd
    3414:	00002295 	.word	0x00002295

00003418 <__udivsi3>:
    3418:	2200      	movs	r2, #0
    341a:	0843      	lsrs	r3, r0, #1
    341c:	428b      	cmp	r3, r1
    341e:	d374      	bcc.n	350a <__udivsi3+0xf2>
    3420:	0903      	lsrs	r3, r0, #4
    3422:	428b      	cmp	r3, r1
    3424:	d35f      	bcc.n	34e6 <__udivsi3+0xce>
    3426:	0a03      	lsrs	r3, r0, #8
    3428:	428b      	cmp	r3, r1
    342a:	d344      	bcc.n	34b6 <__udivsi3+0x9e>
    342c:	0b03      	lsrs	r3, r0, #12
    342e:	428b      	cmp	r3, r1
    3430:	d328      	bcc.n	3484 <__udivsi3+0x6c>
    3432:	0c03      	lsrs	r3, r0, #16
    3434:	428b      	cmp	r3, r1
    3436:	d30d      	bcc.n	3454 <__udivsi3+0x3c>
    3438:	22ff      	movs	r2, #255	; 0xff
    343a:	0209      	lsls	r1, r1, #8
    343c:	ba12      	rev	r2, r2
    343e:	0c03      	lsrs	r3, r0, #16
    3440:	428b      	cmp	r3, r1
    3442:	d302      	bcc.n	344a <__udivsi3+0x32>
    3444:	1212      	asrs	r2, r2, #8
    3446:	0209      	lsls	r1, r1, #8
    3448:	d065      	beq.n	3516 <__udivsi3+0xfe>
    344a:	0b03      	lsrs	r3, r0, #12
    344c:	428b      	cmp	r3, r1
    344e:	d319      	bcc.n	3484 <__udivsi3+0x6c>
    3450:	e000      	b.n	3454 <__udivsi3+0x3c>
    3452:	0a09      	lsrs	r1, r1, #8
    3454:	0bc3      	lsrs	r3, r0, #15
    3456:	428b      	cmp	r3, r1
    3458:	d301      	bcc.n	345e <__udivsi3+0x46>
    345a:	03cb      	lsls	r3, r1, #15
    345c:	1ac0      	subs	r0, r0, r3
    345e:	4152      	adcs	r2, r2
    3460:	0b83      	lsrs	r3, r0, #14
    3462:	428b      	cmp	r3, r1
    3464:	d301      	bcc.n	346a <__udivsi3+0x52>
    3466:	038b      	lsls	r3, r1, #14
    3468:	1ac0      	subs	r0, r0, r3
    346a:	4152      	adcs	r2, r2
    346c:	0b43      	lsrs	r3, r0, #13
    346e:	428b      	cmp	r3, r1
    3470:	d301      	bcc.n	3476 <__udivsi3+0x5e>
    3472:	034b      	lsls	r3, r1, #13
    3474:	1ac0      	subs	r0, r0, r3
    3476:	4152      	adcs	r2, r2
    3478:	0b03      	lsrs	r3, r0, #12
    347a:	428b      	cmp	r3, r1
    347c:	d301      	bcc.n	3482 <__udivsi3+0x6a>
    347e:	030b      	lsls	r3, r1, #12
    3480:	1ac0      	subs	r0, r0, r3
    3482:	4152      	adcs	r2, r2
    3484:	0ac3      	lsrs	r3, r0, #11
    3486:	428b      	cmp	r3, r1
    3488:	d301      	bcc.n	348e <__udivsi3+0x76>
    348a:	02cb      	lsls	r3, r1, #11
    348c:	1ac0      	subs	r0, r0, r3
    348e:	4152      	adcs	r2, r2
    3490:	0a83      	lsrs	r3, r0, #10
    3492:	428b      	cmp	r3, r1
    3494:	d301      	bcc.n	349a <__udivsi3+0x82>
    3496:	028b      	lsls	r3, r1, #10
    3498:	1ac0      	subs	r0, r0, r3
    349a:	4152      	adcs	r2, r2
    349c:	0a43      	lsrs	r3, r0, #9
    349e:	428b      	cmp	r3, r1
    34a0:	d301      	bcc.n	34a6 <__udivsi3+0x8e>
    34a2:	024b      	lsls	r3, r1, #9
    34a4:	1ac0      	subs	r0, r0, r3
    34a6:	4152      	adcs	r2, r2
    34a8:	0a03      	lsrs	r3, r0, #8
    34aa:	428b      	cmp	r3, r1
    34ac:	d301      	bcc.n	34b2 <__udivsi3+0x9a>
    34ae:	020b      	lsls	r3, r1, #8
    34b0:	1ac0      	subs	r0, r0, r3
    34b2:	4152      	adcs	r2, r2
    34b4:	d2cd      	bcs.n	3452 <__udivsi3+0x3a>
    34b6:	09c3      	lsrs	r3, r0, #7
    34b8:	428b      	cmp	r3, r1
    34ba:	d301      	bcc.n	34c0 <__udivsi3+0xa8>
    34bc:	01cb      	lsls	r3, r1, #7
    34be:	1ac0      	subs	r0, r0, r3
    34c0:	4152      	adcs	r2, r2
    34c2:	0983      	lsrs	r3, r0, #6
    34c4:	428b      	cmp	r3, r1
    34c6:	d301      	bcc.n	34cc <__udivsi3+0xb4>
    34c8:	018b      	lsls	r3, r1, #6
    34ca:	1ac0      	subs	r0, r0, r3
    34cc:	4152      	adcs	r2, r2
    34ce:	0943      	lsrs	r3, r0, #5
    34d0:	428b      	cmp	r3, r1
    34d2:	d301      	bcc.n	34d8 <__udivsi3+0xc0>
    34d4:	014b      	lsls	r3, r1, #5
    34d6:	1ac0      	subs	r0, r0, r3
    34d8:	4152      	adcs	r2, r2
    34da:	0903      	lsrs	r3, r0, #4
    34dc:	428b      	cmp	r3, r1
    34de:	d301      	bcc.n	34e4 <__udivsi3+0xcc>
    34e0:	010b      	lsls	r3, r1, #4
    34e2:	1ac0      	subs	r0, r0, r3
    34e4:	4152      	adcs	r2, r2
    34e6:	08c3      	lsrs	r3, r0, #3
    34e8:	428b      	cmp	r3, r1
    34ea:	d301      	bcc.n	34f0 <__udivsi3+0xd8>
    34ec:	00cb      	lsls	r3, r1, #3
    34ee:	1ac0      	subs	r0, r0, r3
    34f0:	4152      	adcs	r2, r2
    34f2:	0883      	lsrs	r3, r0, #2
    34f4:	428b      	cmp	r3, r1
    34f6:	d301      	bcc.n	34fc <__udivsi3+0xe4>
    34f8:	008b      	lsls	r3, r1, #2
    34fa:	1ac0      	subs	r0, r0, r3
    34fc:	4152      	adcs	r2, r2
    34fe:	0843      	lsrs	r3, r0, #1
    3500:	428b      	cmp	r3, r1
    3502:	d301      	bcc.n	3508 <__udivsi3+0xf0>
    3504:	004b      	lsls	r3, r1, #1
    3506:	1ac0      	subs	r0, r0, r3
    3508:	4152      	adcs	r2, r2
    350a:	1a41      	subs	r1, r0, r1
    350c:	d200      	bcs.n	3510 <__udivsi3+0xf8>
    350e:	4601      	mov	r1, r0
    3510:	4152      	adcs	r2, r2
    3512:	4610      	mov	r0, r2
    3514:	4770      	bx	lr
    3516:	e7ff      	b.n	3518 <__udivsi3+0x100>
    3518:	b501      	push	{r0, lr}
    351a:	2000      	movs	r0, #0
    351c:	f000 f8f0 	bl	3700 <__aeabi_idiv0>
    3520:	bd02      	pop	{r1, pc}
    3522:	46c0      	nop			; (mov r8, r8)

00003524 <__aeabi_uidivmod>:
    3524:	2900      	cmp	r1, #0
    3526:	d0f7      	beq.n	3518 <__udivsi3+0x100>
    3528:	e776      	b.n	3418 <__udivsi3>
    352a:	4770      	bx	lr

0000352c <__divsi3>:
    352c:	4603      	mov	r3, r0
    352e:	430b      	orrs	r3, r1
    3530:	d47f      	bmi.n	3632 <__divsi3+0x106>
    3532:	2200      	movs	r2, #0
    3534:	0843      	lsrs	r3, r0, #1
    3536:	428b      	cmp	r3, r1
    3538:	d374      	bcc.n	3624 <__divsi3+0xf8>
    353a:	0903      	lsrs	r3, r0, #4
    353c:	428b      	cmp	r3, r1
    353e:	d35f      	bcc.n	3600 <__divsi3+0xd4>
    3540:	0a03      	lsrs	r3, r0, #8
    3542:	428b      	cmp	r3, r1
    3544:	d344      	bcc.n	35d0 <__divsi3+0xa4>
    3546:	0b03      	lsrs	r3, r0, #12
    3548:	428b      	cmp	r3, r1
    354a:	d328      	bcc.n	359e <__divsi3+0x72>
    354c:	0c03      	lsrs	r3, r0, #16
    354e:	428b      	cmp	r3, r1
    3550:	d30d      	bcc.n	356e <__divsi3+0x42>
    3552:	22ff      	movs	r2, #255	; 0xff
    3554:	0209      	lsls	r1, r1, #8
    3556:	ba12      	rev	r2, r2
    3558:	0c03      	lsrs	r3, r0, #16
    355a:	428b      	cmp	r3, r1
    355c:	d302      	bcc.n	3564 <__divsi3+0x38>
    355e:	1212      	asrs	r2, r2, #8
    3560:	0209      	lsls	r1, r1, #8
    3562:	d065      	beq.n	3630 <__divsi3+0x104>
    3564:	0b03      	lsrs	r3, r0, #12
    3566:	428b      	cmp	r3, r1
    3568:	d319      	bcc.n	359e <__divsi3+0x72>
    356a:	e000      	b.n	356e <__divsi3+0x42>
    356c:	0a09      	lsrs	r1, r1, #8
    356e:	0bc3      	lsrs	r3, r0, #15
    3570:	428b      	cmp	r3, r1
    3572:	d301      	bcc.n	3578 <__divsi3+0x4c>
    3574:	03cb      	lsls	r3, r1, #15
    3576:	1ac0      	subs	r0, r0, r3
    3578:	4152      	adcs	r2, r2
    357a:	0b83      	lsrs	r3, r0, #14
    357c:	428b      	cmp	r3, r1
    357e:	d301      	bcc.n	3584 <__divsi3+0x58>
    3580:	038b      	lsls	r3, r1, #14
    3582:	1ac0      	subs	r0, r0, r3
    3584:	4152      	adcs	r2, r2
    3586:	0b43      	lsrs	r3, r0, #13
    3588:	428b      	cmp	r3, r1
    358a:	d301      	bcc.n	3590 <__divsi3+0x64>
    358c:	034b      	lsls	r3, r1, #13
    358e:	1ac0      	subs	r0, r0, r3
    3590:	4152      	adcs	r2, r2
    3592:	0b03      	lsrs	r3, r0, #12
    3594:	428b      	cmp	r3, r1
    3596:	d301      	bcc.n	359c <__divsi3+0x70>
    3598:	030b      	lsls	r3, r1, #12
    359a:	1ac0      	subs	r0, r0, r3
    359c:	4152      	adcs	r2, r2
    359e:	0ac3      	lsrs	r3, r0, #11
    35a0:	428b      	cmp	r3, r1
    35a2:	d301      	bcc.n	35a8 <__divsi3+0x7c>
    35a4:	02cb      	lsls	r3, r1, #11
    35a6:	1ac0      	subs	r0, r0, r3
    35a8:	4152      	adcs	r2, r2
    35aa:	0a83      	lsrs	r3, r0, #10
    35ac:	428b      	cmp	r3, r1
    35ae:	d301      	bcc.n	35b4 <__divsi3+0x88>
    35b0:	028b      	lsls	r3, r1, #10
    35b2:	1ac0      	subs	r0, r0, r3
    35b4:	4152      	adcs	r2, r2
    35b6:	0a43      	lsrs	r3, r0, #9
    35b8:	428b      	cmp	r3, r1
    35ba:	d301      	bcc.n	35c0 <__divsi3+0x94>
    35bc:	024b      	lsls	r3, r1, #9
    35be:	1ac0      	subs	r0, r0, r3
    35c0:	4152      	adcs	r2, r2
    35c2:	0a03      	lsrs	r3, r0, #8
    35c4:	428b      	cmp	r3, r1
    35c6:	d301      	bcc.n	35cc <__divsi3+0xa0>
    35c8:	020b      	lsls	r3, r1, #8
    35ca:	1ac0      	subs	r0, r0, r3
    35cc:	4152      	adcs	r2, r2
    35ce:	d2cd      	bcs.n	356c <__divsi3+0x40>
    35d0:	09c3      	lsrs	r3, r0, #7
    35d2:	428b      	cmp	r3, r1
    35d4:	d301      	bcc.n	35da <__divsi3+0xae>
    35d6:	01cb      	lsls	r3, r1, #7
    35d8:	1ac0      	subs	r0, r0, r3
    35da:	4152      	adcs	r2, r2
    35dc:	0983      	lsrs	r3, r0, #6
    35de:	428b      	cmp	r3, r1
    35e0:	d301      	bcc.n	35e6 <__divsi3+0xba>
    35e2:	018b      	lsls	r3, r1, #6
    35e4:	1ac0      	subs	r0, r0, r3
    35e6:	4152      	adcs	r2, r2
    35e8:	0943      	lsrs	r3, r0, #5
    35ea:	428b      	cmp	r3, r1
    35ec:	d301      	bcc.n	35f2 <__divsi3+0xc6>
    35ee:	014b      	lsls	r3, r1, #5
    35f0:	1ac0      	subs	r0, r0, r3
    35f2:	4152      	adcs	r2, r2
    35f4:	0903      	lsrs	r3, r0, #4
    35f6:	428b      	cmp	r3, r1
    35f8:	d301      	bcc.n	35fe <__divsi3+0xd2>
    35fa:	010b      	lsls	r3, r1, #4
    35fc:	1ac0      	subs	r0, r0, r3
    35fe:	4152      	adcs	r2, r2
    3600:	08c3      	lsrs	r3, r0, #3
    3602:	428b      	cmp	r3, r1
    3604:	d301      	bcc.n	360a <__divsi3+0xde>
    3606:	00cb      	lsls	r3, r1, #3
    3608:	1ac0      	subs	r0, r0, r3
    360a:	4152      	adcs	r2, r2
    360c:	0883      	lsrs	r3, r0, #2
    360e:	428b      	cmp	r3, r1
    3610:	d301      	bcc.n	3616 <__divsi3+0xea>
    3612:	008b      	lsls	r3, r1, #2
    3614:	1ac0      	subs	r0, r0, r3
    3616:	4152      	adcs	r2, r2
    3618:	0843      	lsrs	r3, r0, #1
    361a:	428b      	cmp	r3, r1
    361c:	d301      	bcc.n	3622 <__divsi3+0xf6>
    361e:	004b      	lsls	r3, r1, #1
    3620:	1ac0      	subs	r0, r0, r3
    3622:	4152      	adcs	r2, r2
    3624:	1a41      	subs	r1, r0, r1
    3626:	d200      	bcs.n	362a <__divsi3+0xfe>
    3628:	4601      	mov	r1, r0
    362a:	4152      	adcs	r2, r2
    362c:	4610      	mov	r0, r2
    362e:	4770      	bx	lr
    3630:	e05d      	b.n	36ee <__divsi3+0x1c2>
    3632:	0fca      	lsrs	r2, r1, #31
    3634:	d000      	beq.n	3638 <__divsi3+0x10c>
    3636:	4249      	negs	r1, r1
    3638:	1003      	asrs	r3, r0, #32
    363a:	d300      	bcc.n	363e <__divsi3+0x112>
    363c:	4240      	negs	r0, r0
    363e:	4053      	eors	r3, r2
    3640:	2200      	movs	r2, #0
    3642:	469c      	mov	ip, r3
    3644:	0903      	lsrs	r3, r0, #4
    3646:	428b      	cmp	r3, r1
    3648:	d32d      	bcc.n	36a6 <__divsi3+0x17a>
    364a:	0a03      	lsrs	r3, r0, #8
    364c:	428b      	cmp	r3, r1
    364e:	d312      	bcc.n	3676 <__divsi3+0x14a>
    3650:	22fc      	movs	r2, #252	; 0xfc
    3652:	0189      	lsls	r1, r1, #6
    3654:	ba12      	rev	r2, r2
    3656:	0a03      	lsrs	r3, r0, #8
    3658:	428b      	cmp	r3, r1
    365a:	d30c      	bcc.n	3676 <__divsi3+0x14a>
    365c:	0189      	lsls	r1, r1, #6
    365e:	1192      	asrs	r2, r2, #6
    3660:	428b      	cmp	r3, r1
    3662:	d308      	bcc.n	3676 <__divsi3+0x14a>
    3664:	0189      	lsls	r1, r1, #6
    3666:	1192      	asrs	r2, r2, #6
    3668:	428b      	cmp	r3, r1
    366a:	d304      	bcc.n	3676 <__divsi3+0x14a>
    366c:	0189      	lsls	r1, r1, #6
    366e:	d03a      	beq.n	36e6 <__divsi3+0x1ba>
    3670:	1192      	asrs	r2, r2, #6
    3672:	e000      	b.n	3676 <__divsi3+0x14a>
    3674:	0989      	lsrs	r1, r1, #6
    3676:	09c3      	lsrs	r3, r0, #7
    3678:	428b      	cmp	r3, r1
    367a:	d301      	bcc.n	3680 <__divsi3+0x154>
    367c:	01cb      	lsls	r3, r1, #7
    367e:	1ac0      	subs	r0, r0, r3
    3680:	4152      	adcs	r2, r2
    3682:	0983      	lsrs	r3, r0, #6
    3684:	428b      	cmp	r3, r1
    3686:	d301      	bcc.n	368c <__divsi3+0x160>
    3688:	018b      	lsls	r3, r1, #6
    368a:	1ac0      	subs	r0, r0, r3
    368c:	4152      	adcs	r2, r2
    368e:	0943      	lsrs	r3, r0, #5
    3690:	428b      	cmp	r3, r1
    3692:	d301      	bcc.n	3698 <__divsi3+0x16c>
    3694:	014b      	lsls	r3, r1, #5
    3696:	1ac0      	subs	r0, r0, r3
    3698:	4152      	adcs	r2, r2
    369a:	0903      	lsrs	r3, r0, #4
    369c:	428b      	cmp	r3, r1
    369e:	d301      	bcc.n	36a4 <__divsi3+0x178>
    36a0:	010b      	lsls	r3, r1, #4
    36a2:	1ac0      	subs	r0, r0, r3
    36a4:	4152      	adcs	r2, r2
    36a6:	08c3      	lsrs	r3, r0, #3
    36a8:	428b      	cmp	r3, r1
    36aa:	d301      	bcc.n	36b0 <__divsi3+0x184>
    36ac:	00cb      	lsls	r3, r1, #3
    36ae:	1ac0      	subs	r0, r0, r3
    36b0:	4152      	adcs	r2, r2
    36b2:	0883      	lsrs	r3, r0, #2
    36b4:	428b      	cmp	r3, r1
    36b6:	d301      	bcc.n	36bc <__divsi3+0x190>
    36b8:	008b      	lsls	r3, r1, #2
    36ba:	1ac0      	subs	r0, r0, r3
    36bc:	4152      	adcs	r2, r2
    36be:	d2d9      	bcs.n	3674 <__divsi3+0x148>
    36c0:	0843      	lsrs	r3, r0, #1
    36c2:	428b      	cmp	r3, r1
    36c4:	d301      	bcc.n	36ca <__divsi3+0x19e>
    36c6:	004b      	lsls	r3, r1, #1
    36c8:	1ac0      	subs	r0, r0, r3
    36ca:	4152      	adcs	r2, r2
    36cc:	1a41      	subs	r1, r0, r1
    36ce:	d200      	bcs.n	36d2 <__divsi3+0x1a6>
    36d0:	4601      	mov	r1, r0
    36d2:	4663      	mov	r3, ip
    36d4:	4152      	adcs	r2, r2
    36d6:	105b      	asrs	r3, r3, #1
    36d8:	4610      	mov	r0, r2
    36da:	d301      	bcc.n	36e0 <__divsi3+0x1b4>
    36dc:	4240      	negs	r0, r0
    36de:	2b00      	cmp	r3, #0
    36e0:	d500      	bpl.n	36e4 <__divsi3+0x1b8>
    36e2:	4249      	negs	r1, r1
    36e4:	4770      	bx	lr
    36e6:	4663      	mov	r3, ip
    36e8:	105b      	asrs	r3, r3, #1
    36ea:	d300      	bcc.n	36ee <__divsi3+0x1c2>
    36ec:	4240      	negs	r0, r0
    36ee:	b501      	push	{r0, lr}
    36f0:	2000      	movs	r0, #0
    36f2:	f000 f805 	bl	3700 <__aeabi_idiv0>
    36f6:	bd02      	pop	{r1, pc}

000036f8 <__aeabi_idivmod>:
    36f8:	2900      	cmp	r1, #0
    36fa:	d0f8      	beq.n	36ee <__divsi3+0x1c2>
    36fc:	e716      	b.n	352c <__divsi3>
    36fe:	4770      	bx	lr

00003700 <__aeabi_idiv0>:
    3700:	4770      	bx	lr
    3702:	46c0      	nop			; (mov r8, r8)

00003704 <__aeabi_lmul>:
    3704:	b5f0      	push	{r4, r5, r6, r7, lr}
    3706:	46ce      	mov	lr, r9
    3708:	4647      	mov	r7, r8
    370a:	0415      	lsls	r5, r2, #16
    370c:	0c2d      	lsrs	r5, r5, #16
    370e:	002e      	movs	r6, r5
    3710:	b580      	push	{r7, lr}
    3712:	0407      	lsls	r7, r0, #16
    3714:	0c14      	lsrs	r4, r2, #16
    3716:	0c3f      	lsrs	r7, r7, #16
    3718:	4699      	mov	r9, r3
    371a:	0c03      	lsrs	r3, r0, #16
    371c:	437e      	muls	r6, r7
    371e:	435d      	muls	r5, r3
    3720:	4367      	muls	r7, r4
    3722:	4363      	muls	r3, r4
    3724:	197f      	adds	r7, r7, r5
    3726:	0c34      	lsrs	r4, r6, #16
    3728:	19e4      	adds	r4, r4, r7
    372a:	469c      	mov	ip, r3
    372c:	42a5      	cmp	r5, r4
    372e:	d903      	bls.n	3738 <__aeabi_lmul+0x34>
    3730:	2380      	movs	r3, #128	; 0x80
    3732:	025b      	lsls	r3, r3, #9
    3734:	4698      	mov	r8, r3
    3736:	44c4      	add	ip, r8
    3738:	464b      	mov	r3, r9
    373a:	4351      	muls	r1, r2
    373c:	4343      	muls	r3, r0
    373e:	0436      	lsls	r6, r6, #16
    3740:	0c36      	lsrs	r6, r6, #16
    3742:	0c25      	lsrs	r5, r4, #16
    3744:	0424      	lsls	r4, r4, #16
    3746:	4465      	add	r5, ip
    3748:	19a4      	adds	r4, r4, r6
    374a:	1859      	adds	r1, r3, r1
    374c:	1949      	adds	r1, r1, r5
    374e:	0020      	movs	r0, r4
    3750:	bc0c      	pop	{r2, r3}
    3752:	4690      	mov	r8, r2
    3754:	4699      	mov	r9, r3
    3756:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003758 <__libc_init_array>:
    3758:	b570      	push	{r4, r5, r6, lr}
    375a:	2600      	movs	r6, #0
    375c:	4d0c      	ldr	r5, [pc, #48]	; (3790 <__libc_init_array+0x38>)
    375e:	4c0d      	ldr	r4, [pc, #52]	; (3794 <__libc_init_array+0x3c>)
    3760:	1b64      	subs	r4, r4, r5
    3762:	10a4      	asrs	r4, r4, #2
    3764:	42a6      	cmp	r6, r4
    3766:	d109      	bne.n	377c <__libc_init_array+0x24>
    3768:	2600      	movs	r6, #0
    376a:	f003 f9df 	bl	6b2c <_init>
    376e:	4d0a      	ldr	r5, [pc, #40]	; (3798 <__libc_init_array+0x40>)
    3770:	4c0a      	ldr	r4, [pc, #40]	; (379c <__libc_init_array+0x44>)
    3772:	1b64      	subs	r4, r4, r5
    3774:	10a4      	asrs	r4, r4, #2
    3776:	42a6      	cmp	r6, r4
    3778:	d105      	bne.n	3786 <__libc_init_array+0x2e>
    377a:	bd70      	pop	{r4, r5, r6, pc}
    377c:	00b3      	lsls	r3, r6, #2
    377e:	58eb      	ldr	r3, [r5, r3]
    3780:	4798      	blx	r3
    3782:	3601      	adds	r6, #1
    3784:	e7ee      	b.n	3764 <__libc_init_array+0xc>
    3786:	00b3      	lsls	r3, r6, #2
    3788:	58eb      	ldr	r3, [r5, r3]
    378a:	4798      	blx	r3
    378c:	3601      	adds	r6, #1
    378e:	e7f2      	b.n	3776 <__libc_init_array+0x1e>
    3790:	00006b38 	.word	0x00006b38
    3794:	00006b38 	.word	0x00006b38
    3798:	00006b38 	.word	0x00006b38
    379c:	00006b3c 	.word	0x00006b3c

000037a0 <malloc>:
    37a0:	b510      	push	{r4, lr}
    37a2:	4b03      	ldr	r3, [pc, #12]	; (37b0 <malloc+0x10>)
    37a4:	0001      	movs	r1, r0
    37a6:	6818      	ldr	r0, [r3, #0]
    37a8:	f000 f860 	bl	386c <_malloc_r>
    37ac:	bd10      	pop	{r4, pc}
    37ae:	46c0      	nop			; (mov r8, r8)
    37b0:	2000015c 	.word	0x2000015c

000037b4 <memcpy>:
    37b4:	2300      	movs	r3, #0
    37b6:	b510      	push	{r4, lr}
    37b8:	429a      	cmp	r2, r3
    37ba:	d100      	bne.n	37be <memcpy+0xa>
    37bc:	bd10      	pop	{r4, pc}
    37be:	5ccc      	ldrb	r4, [r1, r3]
    37c0:	54c4      	strb	r4, [r0, r3]
    37c2:	3301      	adds	r3, #1
    37c4:	e7f8      	b.n	37b8 <memcpy+0x4>

000037c6 <memset>:
    37c6:	0003      	movs	r3, r0
    37c8:	1882      	adds	r2, r0, r2
    37ca:	4293      	cmp	r3, r2
    37cc:	d100      	bne.n	37d0 <memset+0xa>
    37ce:	4770      	bx	lr
    37d0:	7019      	strb	r1, [r3, #0]
    37d2:	3301      	adds	r3, #1
    37d4:	e7f9      	b.n	37ca <memset+0x4>
	...

000037d8 <_free_r>:
    37d8:	b570      	push	{r4, r5, r6, lr}
    37da:	0005      	movs	r5, r0
    37dc:	2900      	cmp	r1, #0
    37de:	d010      	beq.n	3802 <_free_r+0x2a>
    37e0:	1f0c      	subs	r4, r1, #4
    37e2:	6823      	ldr	r3, [r4, #0]
    37e4:	2b00      	cmp	r3, #0
    37e6:	da00      	bge.n	37ea <_free_r+0x12>
    37e8:	18e4      	adds	r4, r4, r3
    37ea:	0028      	movs	r0, r5
    37ec:	f000 fbea 	bl	3fc4 <__malloc_lock>
    37f0:	4a1d      	ldr	r2, [pc, #116]	; (3868 <_free_r+0x90>)
    37f2:	6813      	ldr	r3, [r2, #0]
    37f4:	2b00      	cmp	r3, #0
    37f6:	d105      	bne.n	3804 <_free_r+0x2c>
    37f8:	6063      	str	r3, [r4, #4]
    37fa:	6014      	str	r4, [r2, #0]
    37fc:	0028      	movs	r0, r5
    37fe:	f000 fbe2 	bl	3fc6 <__malloc_unlock>
    3802:	bd70      	pop	{r4, r5, r6, pc}
    3804:	42a3      	cmp	r3, r4
    3806:	d909      	bls.n	381c <_free_r+0x44>
    3808:	6821      	ldr	r1, [r4, #0]
    380a:	1860      	adds	r0, r4, r1
    380c:	4283      	cmp	r3, r0
    380e:	d1f3      	bne.n	37f8 <_free_r+0x20>
    3810:	6818      	ldr	r0, [r3, #0]
    3812:	685b      	ldr	r3, [r3, #4]
    3814:	1841      	adds	r1, r0, r1
    3816:	6021      	str	r1, [r4, #0]
    3818:	e7ee      	b.n	37f8 <_free_r+0x20>
    381a:	0013      	movs	r3, r2
    381c:	685a      	ldr	r2, [r3, #4]
    381e:	2a00      	cmp	r2, #0
    3820:	d001      	beq.n	3826 <_free_r+0x4e>
    3822:	42a2      	cmp	r2, r4
    3824:	d9f9      	bls.n	381a <_free_r+0x42>
    3826:	6819      	ldr	r1, [r3, #0]
    3828:	1858      	adds	r0, r3, r1
    382a:	42a0      	cmp	r0, r4
    382c:	d10b      	bne.n	3846 <_free_r+0x6e>
    382e:	6820      	ldr	r0, [r4, #0]
    3830:	1809      	adds	r1, r1, r0
    3832:	1858      	adds	r0, r3, r1
    3834:	6019      	str	r1, [r3, #0]
    3836:	4282      	cmp	r2, r0
    3838:	d1e0      	bne.n	37fc <_free_r+0x24>
    383a:	6810      	ldr	r0, [r2, #0]
    383c:	6852      	ldr	r2, [r2, #4]
    383e:	1841      	adds	r1, r0, r1
    3840:	6019      	str	r1, [r3, #0]
    3842:	605a      	str	r2, [r3, #4]
    3844:	e7da      	b.n	37fc <_free_r+0x24>
    3846:	42a0      	cmp	r0, r4
    3848:	d902      	bls.n	3850 <_free_r+0x78>
    384a:	230c      	movs	r3, #12
    384c:	602b      	str	r3, [r5, #0]
    384e:	e7d5      	b.n	37fc <_free_r+0x24>
    3850:	6821      	ldr	r1, [r4, #0]
    3852:	1860      	adds	r0, r4, r1
    3854:	4282      	cmp	r2, r0
    3856:	d103      	bne.n	3860 <_free_r+0x88>
    3858:	6810      	ldr	r0, [r2, #0]
    385a:	6852      	ldr	r2, [r2, #4]
    385c:	1841      	adds	r1, r0, r1
    385e:	6021      	str	r1, [r4, #0]
    3860:	6062      	str	r2, [r4, #4]
    3862:	605c      	str	r4, [r3, #4]
    3864:	e7ca      	b.n	37fc <_free_r+0x24>
    3866:	46c0      	nop			; (mov r8, r8)
    3868:	200002a4 	.word	0x200002a4

0000386c <_malloc_r>:
    386c:	2303      	movs	r3, #3
    386e:	b570      	push	{r4, r5, r6, lr}
    3870:	1ccd      	adds	r5, r1, #3
    3872:	439d      	bics	r5, r3
    3874:	3508      	adds	r5, #8
    3876:	0006      	movs	r6, r0
    3878:	2d0c      	cmp	r5, #12
    387a:	d21e      	bcs.n	38ba <_malloc_r+0x4e>
    387c:	250c      	movs	r5, #12
    387e:	42a9      	cmp	r1, r5
    3880:	d81d      	bhi.n	38be <_malloc_r+0x52>
    3882:	0030      	movs	r0, r6
    3884:	f000 fb9e 	bl	3fc4 <__malloc_lock>
    3888:	4a25      	ldr	r2, [pc, #148]	; (3920 <_malloc_r+0xb4>)
    388a:	6814      	ldr	r4, [r2, #0]
    388c:	0021      	movs	r1, r4
    388e:	2900      	cmp	r1, #0
    3890:	d119      	bne.n	38c6 <_malloc_r+0x5a>
    3892:	4c24      	ldr	r4, [pc, #144]	; (3924 <_malloc_r+0xb8>)
    3894:	6823      	ldr	r3, [r4, #0]
    3896:	2b00      	cmp	r3, #0
    3898:	d103      	bne.n	38a2 <_malloc_r+0x36>
    389a:	0030      	movs	r0, r6
    389c:	f000 f8c8 	bl	3a30 <_sbrk_r>
    38a0:	6020      	str	r0, [r4, #0]
    38a2:	0029      	movs	r1, r5
    38a4:	0030      	movs	r0, r6
    38a6:	f000 f8c3 	bl	3a30 <_sbrk_r>
    38aa:	1c43      	adds	r3, r0, #1
    38ac:	d12c      	bne.n	3908 <_malloc_r+0x9c>
    38ae:	230c      	movs	r3, #12
    38b0:	0030      	movs	r0, r6
    38b2:	6033      	str	r3, [r6, #0]
    38b4:	f000 fb87 	bl	3fc6 <__malloc_unlock>
    38b8:	e003      	b.n	38c2 <_malloc_r+0x56>
    38ba:	2d00      	cmp	r5, #0
    38bc:	dadf      	bge.n	387e <_malloc_r+0x12>
    38be:	230c      	movs	r3, #12
    38c0:	6033      	str	r3, [r6, #0]
    38c2:	2000      	movs	r0, #0
    38c4:	bd70      	pop	{r4, r5, r6, pc}
    38c6:	680b      	ldr	r3, [r1, #0]
    38c8:	1b5b      	subs	r3, r3, r5
    38ca:	d41a      	bmi.n	3902 <_malloc_r+0x96>
    38cc:	2b0b      	cmp	r3, #11
    38ce:	d903      	bls.n	38d8 <_malloc_r+0x6c>
    38d0:	600b      	str	r3, [r1, #0]
    38d2:	18cc      	adds	r4, r1, r3
    38d4:	6025      	str	r5, [r4, #0]
    38d6:	e003      	b.n	38e0 <_malloc_r+0x74>
    38d8:	428c      	cmp	r4, r1
    38da:	d10e      	bne.n	38fa <_malloc_r+0x8e>
    38dc:	6863      	ldr	r3, [r4, #4]
    38de:	6013      	str	r3, [r2, #0]
    38e0:	0030      	movs	r0, r6
    38e2:	f000 fb70 	bl	3fc6 <__malloc_unlock>
    38e6:	0020      	movs	r0, r4
    38e8:	2207      	movs	r2, #7
    38ea:	300b      	adds	r0, #11
    38ec:	1d23      	adds	r3, r4, #4
    38ee:	4390      	bics	r0, r2
    38f0:	1ac3      	subs	r3, r0, r3
    38f2:	d0e7      	beq.n	38c4 <_malloc_r+0x58>
    38f4:	425a      	negs	r2, r3
    38f6:	50e2      	str	r2, [r4, r3]
    38f8:	e7e4      	b.n	38c4 <_malloc_r+0x58>
    38fa:	684b      	ldr	r3, [r1, #4]
    38fc:	6063      	str	r3, [r4, #4]
    38fe:	000c      	movs	r4, r1
    3900:	e7ee      	b.n	38e0 <_malloc_r+0x74>
    3902:	000c      	movs	r4, r1
    3904:	6849      	ldr	r1, [r1, #4]
    3906:	e7c2      	b.n	388e <_malloc_r+0x22>
    3908:	2303      	movs	r3, #3
    390a:	1cc4      	adds	r4, r0, #3
    390c:	439c      	bics	r4, r3
    390e:	42a0      	cmp	r0, r4
    3910:	d0e0      	beq.n	38d4 <_malloc_r+0x68>
    3912:	1a21      	subs	r1, r4, r0
    3914:	0030      	movs	r0, r6
    3916:	f000 f88b 	bl	3a30 <_sbrk_r>
    391a:	1c43      	adds	r3, r0, #1
    391c:	d1da      	bne.n	38d4 <_malloc_r+0x68>
    391e:	e7c6      	b.n	38ae <_malloc_r+0x42>
    3920:	200002a4 	.word	0x200002a4
    3924:	200002a8 	.word	0x200002a8

00003928 <iprintf>:
    3928:	b40f      	push	{r0, r1, r2, r3}
    392a:	4b0b      	ldr	r3, [pc, #44]	; (3958 <iprintf+0x30>)
    392c:	b513      	push	{r0, r1, r4, lr}
    392e:	681c      	ldr	r4, [r3, #0]
    3930:	2c00      	cmp	r4, #0
    3932:	d005      	beq.n	3940 <iprintf+0x18>
    3934:	69a3      	ldr	r3, [r4, #24]
    3936:	2b00      	cmp	r3, #0
    3938:	d102      	bne.n	3940 <iprintf+0x18>
    393a:	0020      	movs	r0, r4
    393c:	f000 fa40 	bl	3dc0 <__sinit>
    3940:	ab05      	add	r3, sp, #20
    3942:	9a04      	ldr	r2, [sp, #16]
    3944:	68a1      	ldr	r1, [r4, #8]
    3946:	0020      	movs	r0, r4
    3948:	9301      	str	r3, [sp, #4]
    394a:	f000 fb65 	bl	4018 <_vfiprintf_r>
    394e:	bc16      	pop	{r1, r2, r4}
    3950:	bc08      	pop	{r3}
    3952:	b004      	add	sp, #16
    3954:	4718      	bx	r3
    3956:	46c0      	nop			; (mov r8, r8)
    3958:	2000015c 	.word	0x2000015c

0000395c <srand>:
    395c:	4b10      	ldr	r3, [pc, #64]	; (39a0 <srand+0x44>)
    395e:	b570      	push	{r4, r5, r6, lr}
    3960:	681c      	ldr	r4, [r3, #0]
    3962:	0005      	movs	r5, r0
    3964:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    3966:	2b00      	cmp	r3, #0
    3968:	d115      	bne.n	3996 <srand+0x3a>
    396a:	2018      	movs	r0, #24
    396c:	f7ff ff18 	bl	37a0 <malloc>
    3970:	4b0c      	ldr	r3, [pc, #48]	; (39a4 <srand+0x48>)
    3972:	63a0      	str	r0, [r4, #56]	; 0x38
    3974:	8003      	strh	r3, [r0, #0]
    3976:	4b0c      	ldr	r3, [pc, #48]	; (39a8 <srand+0x4c>)
    3978:	2201      	movs	r2, #1
    397a:	8043      	strh	r3, [r0, #2]
    397c:	4b0b      	ldr	r3, [pc, #44]	; (39ac <srand+0x50>)
    397e:	8083      	strh	r3, [r0, #4]
    3980:	4b0b      	ldr	r3, [pc, #44]	; (39b0 <srand+0x54>)
    3982:	80c3      	strh	r3, [r0, #6]
    3984:	4b0b      	ldr	r3, [pc, #44]	; (39b4 <srand+0x58>)
    3986:	8103      	strh	r3, [r0, #8]
    3988:	2305      	movs	r3, #5
    398a:	8143      	strh	r3, [r0, #10]
    398c:	3306      	adds	r3, #6
    398e:	8183      	strh	r3, [r0, #12]
    3990:	2300      	movs	r3, #0
    3992:	6102      	str	r2, [r0, #16]
    3994:	6143      	str	r3, [r0, #20]
    3996:	2200      	movs	r2, #0
    3998:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    399a:	611d      	str	r5, [r3, #16]
    399c:	615a      	str	r2, [r3, #20]
    399e:	bd70      	pop	{r4, r5, r6, pc}
    39a0:	2000015c 	.word	0x2000015c
    39a4:	0000330e 	.word	0x0000330e
    39a8:	ffffabcd 	.word	0xffffabcd
    39ac:	00001234 	.word	0x00001234
    39b0:	ffffe66d 	.word	0xffffe66d
    39b4:	ffffdeec 	.word	0xffffdeec

000039b8 <rand>:
    39b8:	4b15      	ldr	r3, [pc, #84]	; (3a10 <rand+0x58>)
    39ba:	b510      	push	{r4, lr}
    39bc:	681c      	ldr	r4, [r3, #0]
    39be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    39c0:	2b00      	cmp	r3, #0
    39c2:	d115      	bne.n	39f0 <rand+0x38>
    39c4:	2018      	movs	r0, #24
    39c6:	f7ff feeb 	bl	37a0 <malloc>
    39ca:	4b12      	ldr	r3, [pc, #72]	; (3a14 <rand+0x5c>)
    39cc:	63a0      	str	r0, [r4, #56]	; 0x38
    39ce:	8003      	strh	r3, [r0, #0]
    39d0:	4b11      	ldr	r3, [pc, #68]	; (3a18 <rand+0x60>)
    39d2:	2201      	movs	r2, #1
    39d4:	8043      	strh	r3, [r0, #2]
    39d6:	4b11      	ldr	r3, [pc, #68]	; (3a1c <rand+0x64>)
    39d8:	8083      	strh	r3, [r0, #4]
    39da:	4b11      	ldr	r3, [pc, #68]	; (3a20 <rand+0x68>)
    39dc:	80c3      	strh	r3, [r0, #6]
    39de:	4b11      	ldr	r3, [pc, #68]	; (3a24 <rand+0x6c>)
    39e0:	8103      	strh	r3, [r0, #8]
    39e2:	2305      	movs	r3, #5
    39e4:	8143      	strh	r3, [r0, #10]
    39e6:	3306      	adds	r3, #6
    39e8:	8183      	strh	r3, [r0, #12]
    39ea:	2300      	movs	r3, #0
    39ec:	6102      	str	r2, [r0, #16]
    39ee:	6143      	str	r3, [r0, #20]
    39f0:	6ba4      	ldr	r4, [r4, #56]	; 0x38
    39f2:	4a0d      	ldr	r2, [pc, #52]	; (3a28 <rand+0x70>)
    39f4:	6920      	ldr	r0, [r4, #16]
    39f6:	6961      	ldr	r1, [r4, #20]
    39f8:	4b0c      	ldr	r3, [pc, #48]	; (3a2c <rand+0x74>)
    39fa:	f7ff fe83 	bl	3704 <__aeabi_lmul>
    39fe:	2201      	movs	r2, #1
    3a00:	2300      	movs	r3, #0
    3a02:	1880      	adds	r0, r0, r2
    3a04:	4159      	adcs	r1, r3
    3a06:	6120      	str	r0, [r4, #16]
    3a08:	6161      	str	r1, [r4, #20]
    3a0a:	0048      	lsls	r0, r1, #1
    3a0c:	0840      	lsrs	r0, r0, #1
    3a0e:	bd10      	pop	{r4, pc}
    3a10:	2000015c 	.word	0x2000015c
    3a14:	0000330e 	.word	0x0000330e
    3a18:	ffffabcd 	.word	0xffffabcd
    3a1c:	00001234 	.word	0x00001234
    3a20:	ffffe66d 	.word	0xffffe66d
    3a24:	ffffdeec 	.word	0xffffdeec
    3a28:	4c957f2d 	.word	0x4c957f2d
    3a2c:	5851f42d 	.word	0x5851f42d

00003a30 <_sbrk_r>:
    3a30:	2300      	movs	r3, #0
    3a32:	b570      	push	{r4, r5, r6, lr}
    3a34:	4c06      	ldr	r4, [pc, #24]	; (3a50 <_sbrk_r+0x20>)
    3a36:	0005      	movs	r5, r0
    3a38:	0008      	movs	r0, r1
    3a3a:	6023      	str	r3, [r4, #0]
    3a3c:	f7fe fac0 	bl	1fc0 <_sbrk>
    3a40:	1c43      	adds	r3, r0, #1
    3a42:	d103      	bne.n	3a4c <_sbrk_r+0x1c>
    3a44:	6823      	ldr	r3, [r4, #0]
    3a46:	2b00      	cmp	r3, #0
    3a48:	d000      	beq.n	3a4c <_sbrk_r+0x1c>
    3a4a:	602b      	str	r3, [r5, #0]
    3a4c:	bd70      	pop	{r4, r5, r6, pc}
    3a4e:	46c0      	nop			; (mov r8, r8)
    3a50:	20000ac4 	.word	0x20000ac4

00003a54 <setbuf>:
    3a54:	424a      	negs	r2, r1
    3a56:	414a      	adcs	r2, r1
    3a58:	2380      	movs	r3, #128	; 0x80
    3a5a:	b510      	push	{r4, lr}
    3a5c:	0052      	lsls	r2, r2, #1
    3a5e:	00db      	lsls	r3, r3, #3
    3a60:	f000 f802 	bl	3a68 <setvbuf>
    3a64:	bd10      	pop	{r4, pc}
	...

00003a68 <setvbuf>:
    3a68:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a6a:	001d      	movs	r5, r3
    3a6c:	4b4f      	ldr	r3, [pc, #316]	; (3bac <setvbuf+0x144>)
    3a6e:	b085      	sub	sp, #20
    3a70:	681e      	ldr	r6, [r3, #0]
    3a72:	0004      	movs	r4, r0
    3a74:	000f      	movs	r7, r1
    3a76:	9200      	str	r2, [sp, #0]
    3a78:	2e00      	cmp	r6, #0
    3a7a:	d005      	beq.n	3a88 <setvbuf+0x20>
    3a7c:	69b3      	ldr	r3, [r6, #24]
    3a7e:	2b00      	cmp	r3, #0
    3a80:	d102      	bne.n	3a88 <setvbuf+0x20>
    3a82:	0030      	movs	r0, r6
    3a84:	f000 f99c 	bl	3dc0 <__sinit>
    3a88:	4b49      	ldr	r3, [pc, #292]	; (3bb0 <setvbuf+0x148>)
    3a8a:	429c      	cmp	r4, r3
    3a8c:	d150      	bne.n	3b30 <setvbuf+0xc8>
    3a8e:	6874      	ldr	r4, [r6, #4]
    3a90:	9b00      	ldr	r3, [sp, #0]
    3a92:	2b02      	cmp	r3, #2
    3a94:	d005      	beq.n	3aa2 <setvbuf+0x3a>
    3a96:	2b01      	cmp	r3, #1
    3a98:	d900      	bls.n	3a9c <setvbuf+0x34>
    3a9a:	e084      	b.n	3ba6 <setvbuf+0x13e>
    3a9c:	2d00      	cmp	r5, #0
    3a9e:	da00      	bge.n	3aa2 <setvbuf+0x3a>
    3aa0:	e081      	b.n	3ba6 <setvbuf+0x13e>
    3aa2:	0021      	movs	r1, r4
    3aa4:	0030      	movs	r0, r6
    3aa6:	f000 f91d 	bl	3ce4 <_fflush_r>
    3aaa:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3aac:	2900      	cmp	r1, #0
    3aae:	d008      	beq.n	3ac2 <setvbuf+0x5a>
    3ab0:	0023      	movs	r3, r4
    3ab2:	3344      	adds	r3, #68	; 0x44
    3ab4:	4299      	cmp	r1, r3
    3ab6:	d002      	beq.n	3abe <setvbuf+0x56>
    3ab8:	0030      	movs	r0, r6
    3aba:	f7ff fe8d 	bl	37d8 <_free_r>
    3abe:	2300      	movs	r3, #0
    3ac0:	6363      	str	r3, [r4, #52]	; 0x34
    3ac2:	2300      	movs	r3, #0
    3ac4:	61a3      	str	r3, [r4, #24]
    3ac6:	6063      	str	r3, [r4, #4]
    3ac8:	89a3      	ldrh	r3, [r4, #12]
    3aca:	061b      	lsls	r3, r3, #24
    3acc:	d503      	bpl.n	3ad6 <setvbuf+0x6e>
    3ace:	6921      	ldr	r1, [r4, #16]
    3ad0:	0030      	movs	r0, r6
    3ad2:	f7ff fe81 	bl	37d8 <_free_r>
    3ad6:	89a3      	ldrh	r3, [r4, #12]
    3ad8:	4a36      	ldr	r2, [pc, #216]	; (3bb4 <setvbuf+0x14c>)
    3ada:	4013      	ands	r3, r2
    3adc:	81a3      	strh	r3, [r4, #12]
    3ade:	9b00      	ldr	r3, [sp, #0]
    3ae0:	2b02      	cmp	r3, #2
    3ae2:	d05a      	beq.n	3b9a <setvbuf+0x132>
    3ae4:	ab03      	add	r3, sp, #12
    3ae6:	aa02      	add	r2, sp, #8
    3ae8:	0021      	movs	r1, r4
    3aea:	0030      	movs	r0, r6
    3aec:	f000 f9fe 	bl	3eec <__swhatbuf_r>
    3af0:	89a3      	ldrh	r3, [r4, #12]
    3af2:	4318      	orrs	r0, r3
    3af4:	81a0      	strh	r0, [r4, #12]
    3af6:	2d00      	cmp	r5, #0
    3af8:	d124      	bne.n	3b44 <setvbuf+0xdc>
    3afa:	9d02      	ldr	r5, [sp, #8]
    3afc:	0028      	movs	r0, r5
    3afe:	f7ff fe4f 	bl	37a0 <malloc>
    3b02:	9501      	str	r5, [sp, #4]
    3b04:	1e07      	subs	r7, r0, #0
    3b06:	d142      	bne.n	3b8e <setvbuf+0x126>
    3b08:	9b02      	ldr	r3, [sp, #8]
    3b0a:	9301      	str	r3, [sp, #4]
    3b0c:	42ab      	cmp	r3, r5
    3b0e:	d139      	bne.n	3b84 <setvbuf+0x11c>
    3b10:	2001      	movs	r0, #1
    3b12:	4240      	negs	r0, r0
    3b14:	2302      	movs	r3, #2
    3b16:	89a2      	ldrh	r2, [r4, #12]
    3b18:	4313      	orrs	r3, r2
    3b1a:	81a3      	strh	r3, [r4, #12]
    3b1c:	2300      	movs	r3, #0
    3b1e:	60a3      	str	r3, [r4, #8]
    3b20:	0023      	movs	r3, r4
    3b22:	3347      	adds	r3, #71	; 0x47
    3b24:	6023      	str	r3, [r4, #0]
    3b26:	6123      	str	r3, [r4, #16]
    3b28:	2301      	movs	r3, #1
    3b2a:	6163      	str	r3, [r4, #20]
    3b2c:	b005      	add	sp, #20
    3b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3b30:	4b21      	ldr	r3, [pc, #132]	; (3bb8 <setvbuf+0x150>)
    3b32:	429c      	cmp	r4, r3
    3b34:	d101      	bne.n	3b3a <setvbuf+0xd2>
    3b36:	68b4      	ldr	r4, [r6, #8]
    3b38:	e7aa      	b.n	3a90 <setvbuf+0x28>
    3b3a:	4b20      	ldr	r3, [pc, #128]	; (3bbc <setvbuf+0x154>)
    3b3c:	429c      	cmp	r4, r3
    3b3e:	d1a7      	bne.n	3a90 <setvbuf+0x28>
    3b40:	68f4      	ldr	r4, [r6, #12]
    3b42:	e7a5      	b.n	3a90 <setvbuf+0x28>
    3b44:	2f00      	cmp	r7, #0
    3b46:	d0d9      	beq.n	3afc <setvbuf+0x94>
    3b48:	69b3      	ldr	r3, [r6, #24]
    3b4a:	2b00      	cmp	r3, #0
    3b4c:	d102      	bne.n	3b54 <setvbuf+0xec>
    3b4e:	0030      	movs	r0, r6
    3b50:	f000 f936 	bl	3dc0 <__sinit>
    3b54:	9b00      	ldr	r3, [sp, #0]
    3b56:	2b01      	cmp	r3, #1
    3b58:	d103      	bne.n	3b62 <setvbuf+0xfa>
    3b5a:	89a3      	ldrh	r3, [r4, #12]
    3b5c:	9a00      	ldr	r2, [sp, #0]
    3b5e:	431a      	orrs	r2, r3
    3b60:	81a2      	strh	r2, [r4, #12]
    3b62:	2008      	movs	r0, #8
    3b64:	89a3      	ldrh	r3, [r4, #12]
    3b66:	6027      	str	r7, [r4, #0]
    3b68:	6127      	str	r7, [r4, #16]
    3b6a:	6165      	str	r5, [r4, #20]
    3b6c:	4018      	ands	r0, r3
    3b6e:	d018      	beq.n	3ba2 <setvbuf+0x13a>
    3b70:	2001      	movs	r0, #1
    3b72:	4018      	ands	r0, r3
    3b74:	2300      	movs	r3, #0
    3b76:	4298      	cmp	r0, r3
    3b78:	d011      	beq.n	3b9e <setvbuf+0x136>
    3b7a:	426d      	negs	r5, r5
    3b7c:	60a3      	str	r3, [r4, #8]
    3b7e:	61a5      	str	r5, [r4, #24]
    3b80:	0018      	movs	r0, r3
    3b82:	e7d3      	b.n	3b2c <setvbuf+0xc4>
    3b84:	9801      	ldr	r0, [sp, #4]
    3b86:	f7ff fe0b 	bl	37a0 <malloc>
    3b8a:	1e07      	subs	r7, r0, #0
    3b8c:	d0c0      	beq.n	3b10 <setvbuf+0xa8>
    3b8e:	2380      	movs	r3, #128	; 0x80
    3b90:	89a2      	ldrh	r2, [r4, #12]
    3b92:	9d01      	ldr	r5, [sp, #4]
    3b94:	4313      	orrs	r3, r2
    3b96:	81a3      	strh	r3, [r4, #12]
    3b98:	e7d6      	b.n	3b48 <setvbuf+0xe0>
    3b9a:	2000      	movs	r0, #0
    3b9c:	e7ba      	b.n	3b14 <setvbuf+0xac>
    3b9e:	60a5      	str	r5, [r4, #8]
    3ba0:	e7c4      	b.n	3b2c <setvbuf+0xc4>
    3ba2:	60a0      	str	r0, [r4, #8]
    3ba4:	e7c2      	b.n	3b2c <setvbuf+0xc4>
    3ba6:	2001      	movs	r0, #1
    3ba8:	4240      	negs	r0, r0
    3baa:	e7bf      	b.n	3b2c <setvbuf+0xc4>
    3bac:	2000015c 	.word	0x2000015c
    3bb0:	00006ab8 	.word	0x00006ab8
    3bb4:	fffff35c 	.word	0xfffff35c
    3bb8:	00006ad8 	.word	0x00006ad8
    3bbc:	00006a98 	.word	0x00006a98

00003bc0 <strlen>:
    3bc0:	2300      	movs	r3, #0
    3bc2:	5cc2      	ldrb	r2, [r0, r3]
    3bc4:	3301      	adds	r3, #1
    3bc6:	2a00      	cmp	r2, #0
    3bc8:	d1fb      	bne.n	3bc2 <strlen+0x2>
    3bca:	1e58      	subs	r0, r3, #1
    3bcc:	4770      	bx	lr
	...

00003bd0 <__sflush_r>:
    3bd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3bd2:	898a      	ldrh	r2, [r1, #12]
    3bd4:	0005      	movs	r5, r0
    3bd6:	000c      	movs	r4, r1
    3bd8:	0713      	lsls	r3, r2, #28
    3bda:	d460      	bmi.n	3c9e <__sflush_r+0xce>
    3bdc:	684b      	ldr	r3, [r1, #4]
    3bde:	2b00      	cmp	r3, #0
    3be0:	dc04      	bgt.n	3bec <__sflush_r+0x1c>
    3be2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    3be4:	2b00      	cmp	r3, #0
    3be6:	dc01      	bgt.n	3bec <__sflush_r+0x1c>
    3be8:	2000      	movs	r0, #0
    3bea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3bec:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    3bee:	2f00      	cmp	r7, #0
    3bf0:	d0fa      	beq.n	3be8 <__sflush_r+0x18>
    3bf2:	2300      	movs	r3, #0
    3bf4:	682e      	ldr	r6, [r5, #0]
    3bf6:	602b      	str	r3, [r5, #0]
    3bf8:	2380      	movs	r3, #128	; 0x80
    3bfa:	015b      	lsls	r3, r3, #5
    3bfc:	401a      	ands	r2, r3
    3bfe:	d034      	beq.n	3c6a <__sflush_r+0x9a>
    3c00:	6d60      	ldr	r0, [r4, #84]	; 0x54
    3c02:	89a3      	ldrh	r3, [r4, #12]
    3c04:	075b      	lsls	r3, r3, #29
    3c06:	d506      	bpl.n	3c16 <__sflush_r+0x46>
    3c08:	6863      	ldr	r3, [r4, #4]
    3c0a:	1ac0      	subs	r0, r0, r3
    3c0c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    3c0e:	2b00      	cmp	r3, #0
    3c10:	d001      	beq.n	3c16 <__sflush_r+0x46>
    3c12:	6c23      	ldr	r3, [r4, #64]	; 0x40
    3c14:	1ac0      	subs	r0, r0, r3
    3c16:	0002      	movs	r2, r0
    3c18:	6a21      	ldr	r1, [r4, #32]
    3c1a:	2300      	movs	r3, #0
    3c1c:	0028      	movs	r0, r5
    3c1e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    3c20:	47b8      	blx	r7
    3c22:	89a1      	ldrh	r1, [r4, #12]
    3c24:	1c43      	adds	r3, r0, #1
    3c26:	d106      	bne.n	3c36 <__sflush_r+0x66>
    3c28:	682b      	ldr	r3, [r5, #0]
    3c2a:	2b1d      	cmp	r3, #29
    3c2c:	d831      	bhi.n	3c92 <__sflush_r+0xc2>
    3c2e:	4a2c      	ldr	r2, [pc, #176]	; (3ce0 <__sflush_r+0x110>)
    3c30:	40da      	lsrs	r2, r3
    3c32:	07d3      	lsls	r3, r2, #31
    3c34:	d52d      	bpl.n	3c92 <__sflush_r+0xc2>
    3c36:	2300      	movs	r3, #0
    3c38:	6063      	str	r3, [r4, #4]
    3c3a:	6923      	ldr	r3, [r4, #16]
    3c3c:	6023      	str	r3, [r4, #0]
    3c3e:	04cb      	lsls	r3, r1, #19
    3c40:	d505      	bpl.n	3c4e <__sflush_r+0x7e>
    3c42:	1c43      	adds	r3, r0, #1
    3c44:	d102      	bne.n	3c4c <__sflush_r+0x7c>
    3c46:	682b      	ldr	r3, [r5, #0]
    3c48:	2b00      	cmp	r3, #0
    3c4a:	d100      	bne.n	3c4e <__sflush_r+0x7e>
    3c4c:	6560      	str	r0, [r4, #84]	; 0x54
    3c4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3c50:	602e      	str	r6, [r5, #0]
    3c52:	2900      	cmp	r1, #0
    3c54:	d0c8      	beq.n	3be8 <__sflush_r+0x18>
    3c56:	0023      	movs	r3, r4
    3c58:	3344      	adds	r3, #68	; 0x44
    3c5a:	4299      	cmp	r1, r3
    3c5c:	d002      	beq.n	3c64 <__sflush_r+0x94>
    3c5e:	0028      	movs	r0, r5
    3c60:	f7ff fdba 	bl	37d8 <_free_r>
    3c64:	2000      	movs	r0, #0
    3c66:	6360      	str	r0, [r4, #52]	; 0x34
    3c68:	e7bf      	b.n	3bea <__sflush_r+0x1a>
    3c6a:	2301      	movs	r3, #1
    3c6c:	6a21      	ldr	r1, [r4, #32]
    3c6e:	0028      	movs	r0, r5
    3c70:	47b8      	blx	r7
    3c72:	1c43      	adds	r3, r0, #1
    3c74:	d1c5      	bne.n	3c02 <__sflush_r+0x32>
    3c76:	682b      	ldr	r3, [r5, #0]
    3c78:	2b00      	cmp	r3, #0
    3c7a:	d0c2      	beq.n	3c02 <__sflush_r+0x32>
    3c7c:	2b1d      	cmp	r3, #29
    3c7e:	d001      	beq.n	3c84 <__sflush_r+0xb4>
    3c80:	2b16      	cmp	r3, #22
    3c82:	d101      	bne.n	3c88 <__sflush_r+0xb8>
    3c84:	602e      	str	r6, [r5, #0]
    3c86:	e7af      	b.n	3be8 <__sflush_r+0x18>
    3c88:	2340      	movs	r3, #64	; 0x40
    3c8a:	89a2      	ldrh	r2, [r4, #12]
    3c8c:	4313      	orrs	r3, r2
    3c8e:	81a3      	strh	r3, [r4, #12]
    3c90:	e7ab      	b.n	3bea <__sflush_r+0x1a>
    3c92:	2340      	movs	r3, #64	; 0x40
    3c94:	430b      	orrs	r3, r1
    3c96:	2001      	movs	r0, #1
    3c98:	81a3      	strh	r3, [r4, #12]
    3c9a:	4240      	negs	r0, r0
    3c9c:	e7a5      	b.n	3bea <__sflush_r+0x1a>
    3c9e:	690f      	ldr	r7, [r1, #16]
    3ca0:	2f00      	cmp	r7, #0
    3ca2:	d0a1      	beq.n	3be8 <__sflush_r+0x18>
    3ca4:	680b      	ldr	r3, [r1, #0]
    3ca6:	600f      	str	r7, [r1, #0]
    3ca8:	1bdb      	subs	r3, r3, r7
    3caa:	9301      	str	r3, [sp, #4]
    3cac:	2300      	movs	r3, #0
    3cae:	0792      	lsls	r2, r2, #30
    3cb0:	d100      	bne.n	3cb4 <__sflush_r+0xe4>
    3cb2:	694b      	ldr	r3, [r1, #20]
    3cb4:	60a3      	str	r3, [r4, #8]
    3cb6:	9b01      	ldr	r3, [sp, #4]
    3cb8:	2b00      	cmp	r3, #0
    3cba:	dc00      	bgt.n	3cbe <__sflush_r+0xee>
    3cbc:	e794      	b.n	3be8 <__sflush_r+0x18>
    3cbe:	9b01      	ldr	r3, [sp, #4]
    3cc0:	003a      	movs	r2, r7
    3cc2:	6a21      	ldr	r1, [r4, #32]
    3cc4:	0028      	movs	r0, r5
    3cc6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    3cc8:	47b0      	blx	r6
    3cca:	2800      	cmp	r0, #0
    3ccc:	dc03      	bgt.n	3cd6 <__sflush_r+0x106>
    3cce:	2340      	movs	r3, #64	; 0x40
    3cd0:	89a2      	ldrh	r2, [r4, #12]
    3cd2:	4313      	orrs	r3, r2
    3cd4:	e7df      	b.n	3c96 <__sflush_r+0xc6>
    3cd6:	9b01      	ldr	r3, [sp, #4]
    3cd8:	183f      	adds	r7, r7, r0
    3cda:	1a1b      	subs	r3, r3, r0
    3cdc:	9301      	str	r3, [sp, #4]
    3cde:	e7ea      	b.n	3cb6 <__sflush_r+0xe6>
    3ce0:	20400001 	.word	0x20400001

00003ce4 <_fflush_r>:
    3ce4:	690b      	ldr	r3, [r1, #16]
    3ce6:	b570      	push	{r4, r5, r6, lr}
    3ce8:	0005      	movs	r5, r0
    3cea:	000c      	movs	r4, r1
    3cec:	2b00      	cmp	r3, #0
    3cee:	d101      	bne.n	3cf4 <_fflush_r+0x10>
    3cf0:	2000      	movs	r0, #0
    3cf2:	bd70      	pop	{r4, r5, r6, pc}
    3cf4:	2800      	cmp	r0, #0
    3cf6:	d004      	beq.n	3d02 <_fflush_r+0x1e>
    3cf8:	6983      	ldr	r3, [r0, #24]
    3cfa:	2b00      	cmp	r3, #0
    3cfc:	d101      	bne.n	3d02 <_fflush_r+0x1e>
    3cfe:	f000 f85f 	bl	3dc0 <__sinit>
    3d02:	4b0b      	ldr	r3, [pc, #44]	; (3d30 <_fflush_r+0x4c>)
    3d04:	429c      	cmp	r4, r3
    3d06:	d109      	bne.n	3d1c <_fflush_r+0x38>
    3d08:	686c      	ldr	r4, [r5, #4]
    3d0a:	220c      	movs	r2, #12
    3d0c:	5ea3      	ldrsh	r3, [r4, r2]
    3d0e:	2b00      	cmp	r3, #0
    3d10:	d0ee      	beq.n	3cf0 <_fflush_r+0xc>
    3d12:	0021      	movs	r1, r4
    3d14:	0028      	movs	r0, r5
    3d16:	f7ff ff5b 	bl	3bd0 <__sflush_r>
    3d1a:	e7ea      	b.n	3cf2 <_fflush_r+0xe>
    3d1c:	4b05      	ldr	r3, [pc, #20]	; (3d34 <_fflush_r+0x50>)
    3d1e:	429c      	cmp	r4, r3
    3d20:	d101      	bne.n	3d26 <_fflush_r+0x42>
    3d22:	68ac      	ldr	r4, [r5, #8]
    3d24:	e7f1      	b.n	3d0a <_fflush_r+0x26>
    3d26:	4b04      	ldr	r3, [pc, #16]	; (3d38 <_fflush_r+0x54>)
    3d28:	429c      	cmp	r4, r3
    3d2a:	d1ee      	bne.n	3d0a <_fflush_r+0x26>
    3d2c:	68ec      	ldr	r4, [r5, #12]
    3d2e:	e7ec      	b.n	3d0a <_fflush_r+0x26>
    3d30:	00006ab8 	.word	0x00006ab8
    3d34:	00006ad8 	.word	0x00006ad8
    3d38:	00006a98 	.word	0x00006a98

00003d3c <_cleanup_r>:
    3d3c:	b510      	push	{r4, lr}
    3d3e:	4902      	ldr	r1, [pc, #8]	; (3d48 <_cleanup_r+0xc>)
    3d40:	f000 f8b2 	bl	3ea8 <_fwalk_reent>
    3d44:	bd10      	pop	{r4, pc}
    3d46:	46c0      	nop			; (mov r8, r8)
    3d48:	00003ce5 	.word	0x00003ce5

00003d4c <std.isra.0>:
    3d4c:	2300      	movs	r3, #0
    3d4e:	b510      	push	{r4, lr}
    3d50:	0004      	movs	r4, r0
    3d52:	6003      	str	r3, [r0, #0]
    3d54:	6043      	str	r3, [r0, #4]
    3d56:	6083      	str	r3, [r0, #8]
    3d58:	8181      	strh	r1, [r0, #12]
    3d5a:	6643      	str	r3, [r0, #100]	; 0x64
    3d5c:	81c2      	strh	r2, [r0, #14]
    3d5e:	6103      	str	r3, [r0, #16]
    3d60:	6143      	str	r3, [r0, #20]
    3d62:	6183      	str	r3, [r0, #24]
    3d64:	0019      	movs	r1, r3
    3d66:	2208      	movs	r2, #8
    3d68:	305c      	adds	r0, #92	; 0x5c
    3d6a:	f7ff fd2c 	bl	37c6 <memset>
    3d6e:	4b05      	ldr	r3, [pc, #20]	; (3d84 <std.isra.0+0x38>)
    3d70:	6224      	str	r4, [r4, #32]
    3d72:	6263      	str	r3, [r4, #36]	; 0x24
    3d74:	4b04      	ldr	r3, [pc, #16]	; (3d88 <std.isra.0+0x3c>)
    3d76:	62a3      	str	r3, [r4, #40]	; 0x28
    3d78:	4b04      	ldr	r3, [pc, #16]	; (3d8c <std.isra.0+0x40>)
    3d7a:	62e3      	str	r3, [r4, #44]	; 0x2c
    3d7c:	4b04      	ldr	r3, [pc, #16]	; (3d90 <std.isra.0+0x44>)
    3d7e:	6323      	str	r3, [r4, #48]	; 0x30
    3d80:	bd10      	pop	{r4, pc}
    3d82:	46c0      	nop			; (mov r8, r8)
    3d84:	00004561 	.word	0x00004561
    3d88:	00004589 	.word	0x00004589
    3d8c:	000045c1 	.word	0x000045c1
    3d90:	000045ed 	.word	0x000045ed

00003d94 <__sfmoreglue>:
    3d94:	b570      	push	{r4, r5, r6, lr}
    3d96:	2568      	movs	r5, #104	; 0x68
    3d98:	1e4a      	subs	r2, r1, #1
    3d9a:	4355      	muls	r5, r2
    3d9c:	000e      	movs	r6, r1
    3d9e:	0029      	movs	r1, r5
    3da0:	3174      	adds	r1, #116	; 0x74
    3da2:	f7ff fd63 	bl	386c <_malloc_r>
    3da6:	1e04      	subs	r4, r0, #0
    3da8:	d008      	beq.n	3dbc <__sfmoreglue+0x28>
    3daa:	2100      	movs	r1, #0
    3dac:	002a      	movs	r2, r5
    3dae:	6001      	str	r1, [r0, #0]
    3db0:	6046      	str	r6, [r0, #4]
    3db2:	300c      	adds	r0, #12
    3db4:	60a0      	str	r0, [r4, #8]
    3db6:	3268      	adds	r2, #104	; 0x68
    3db8:	f7ff fd05 	bl	37c6 <memset>
    3dbc:	0020      	movs	r0, r4
    3dbe:	bd70      	pop	{r4, r5, r6, pc}

00003dc0 <__sinit>:
    3dc0:	6983      	ldr	r3, [r0, #24]
    3dc2:	b513      	push	{r0, r1, r4, lr}
    3dc4:	0004      	movs	r4, r0
    3dc6:	2b00      	cmp	r3, #0
    3dc8:	d128      	bne.n	3e1c <__sinit+0x5c>
    3dca:	6483      	str	r3, [r0, #72]	; 0x48
    3dcc:	64c3      	str	r3, [r0, #76]	; 0x4c
    3dce:	6503      	str	r3, [r0, #80]	; 0x50
    3dd0:	4b13      	ldr	r3, [pc, #76]	; (3e20 <__sinit+0x60>)
    3dd2:	4a14      	ldr	r2, [pc, #80]	; (3e24 <__sinit+0x64>)
    3dd4:	681b      	ldr	r3, [r3, #0]
    3dd6:	6282      	str	r2, [r0, #40]	; 0x28
    3dd8:	9301      	str	r3, [sp, #4]
    3dda:	4298      	cmp	r0, r3
    3ddc:	d101      	bne.n	3de2 <__sinit+0x22>
    3dde:	2301      	movs	r3, #1
    3de0:	6183      	str	r3, [r0, #24]
    3de2:	0020      	movs	r0, r4
    3de4:	f000 f820 	bl	3e28 <__sfp>
    3de8:	6060      	str	r0, [r4, #4]
    3dea:	0020      	movs	r0, r4
    3dec:	f000 f81c 	bl	3e28 <__sfp>
    3df0:	60a0      	str	r0, [r4, #8]
    3df2:	0020      	movs	r0, r4
    3df4:	f000 f818 	bl	3e28 <__sfp>
    3df8:	2200      	movs	r2, #0
    3dfa:	60e0      	str	r0, [r4, #12]
    3dfc:	2104      	movs	r1, #4
    3dfe:	6860      	ldr	r0, [r4, #4]
    3e00:	f7ff ffa4 	bl	3d4c <std.isra.0>
    3e04:	2201      	movs	r2, #1
    3e06:	2109      	movs	r1, #9
    3e08:	68a0      	ldr	r0, [r4, #8]
    3e0a:	f7ff ff9f 	bl	3d4c <std.isra.0>
    3e0e:	2202      	movs	r2, #2
    3e10:	2112      	movs	r1, #18
    3e12:	68e0      	ldr	r0, [r4, #12]
    3e14:	f7ff ff9a 	bl	3d4c <std.isra.0>
    3e18:	2301      	movs	r3, #1
    3e1a:	61a3      	str	r3, [r4, #24]
    3e1c:	bd13      	pop	{r0, r1, r4, pc}
    3e1e:	46c0      	nop			; (mov r8, r8)
    3e20:	00006a94 	.word	0x00006a94
    3e24:	00003d3d 	.word	0x00003d3d

00003e28 <__sfp>:
    3e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3e2a:	4b1e      	ldr	r3, [pc, #120]	; (3ea4 <__sfp+0x7c>)
    3e2c:	0007      	movs	r7, r0
    3e2e:	681e      	ldr	r6, [r3, #0]
    3e30:	69b3      	ldr	r3, [r6, #24]
    3e32:	2b00      	cmp	r3, #0
    3e34:	d102      	bne.n	3e3c <__sfp+0x14>
    3e36:	0030      	movs	r0, r6
    3e38:	f7ff ffc2 	bl	3dc0 <__sinit>
    3e3c:	3648      	adds	r6, #72	; 0x48
    3e3e:	68b4      	ldr	r4, [r6, #8]
    3e40:	6873      	ldr	r3, [r6, #4]
    3e42:	3b01      	subs	r3, #1
    3e44:	d504      	bpl.n	3e50 <__sfp+0x28>
    3e46:	6833      	ldr	r3, [r6, #0]
    3e48:	2b00      	cmp	r3, #0
    3e4a:	d007      	beq.n	3e5c <__sfp+0x34>
    3e4c:	6836      	ldr	r6, [r6, #0]
    3e4e:	e7f6      	b.n	3e3e <__sfp+0x16>
    3e50:	220c      	movs	r2, #12
    3e52:	5ea5      	ldrsh	r5, [r4, r2]
    3e54:	2d00      	cmp	r5, #0
    3e56:	d00d      	beq.n	3e74 <__sfp+0x4c>
    3e58:	3468      	adds	r4, #104	; 0x68
    3e5a:	e7f2      	b.n	3e42 <__sfp+0x1a>
    3e5c:	2104      	movs	r1, #4
    3e5e:	0038      	movs	r0, r7
    3e60:	f7ff ff98 	bl	3d94 <__sfmoreglue>
    3e64:	6030      	str	r0, [r6, #0]
    3e66:	2800      	cmp	r0, #0
    3e68:	d1f0      	bne.n	3e4c <__sfp+0x24>
    3e6a:	230c      	movs	r3, #12
    3e6c:	0004      	movs	r4, r0
    3e6e:	603b      	str	r3, [r7, #0]
    3e70:	0020      	movs	r0, r4
    3e72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3e74:	2301      	movs	r3, #1
    3e76:	0020      	movs	r0, r4
    3e78:	425b      	negs	r3, r3
    3e7a:	81e3      	strh	r3, [r4, #14]
    3e7c:	3302      	adds	r3, #2
    3e7e:	81a3      	strh	r3, [r4, #12]
    3e80:	6665      	str	r5, [r4, #100]	; 0x64
    3e82:	6025      	str	r5, [r4, #0]
    3e84:	60a5      	str	r5, [r4, #8]
    3e86:	6065      	str	r5, [r4, #4]
    3e88:	6125      	str	r5, [r4, #16]
    3e8a:	6165      	str	r5, [r4, #20]
    3e8c:	61a5      	str	r5, [r4, #24]
    3e8e:	2208      	movs	r2, #8
    3e90:	0029      	movs	r1, r5
    3e92:	305c      	adds	r0, #92	; 0x5c
    3e94:	f7ff fc97 	bl	37c6 <memset>
    3e98:	6365      	str	r5, [r4, #52]	; 0x34
    3e9a:	63a5      	str	r5, [r4, #56]	; 0x38
    3e9c:	64a5      	str	r5, [r4, #72]	; 0x48
    3e9e:	64e5      	str	r5, [r4, #76]	; 0x4c
    3ea0:	e7e6      	b.n	3e70 <__sfp+0x48>
    3ea2:	46c0      	nop			; (mov r8, r8)
    3ea4:	00006a94 	.word	0x00006a94

00003ea8 <_fwalk_reent>:
    3ea8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3eaa:	0004      	movs	r4, r0
    3eac:	0007      	movs	r7, r0
    3eae:	2600      	movs	r6, #0
    3eb0:	9101      	str	r1, [sp, #4]
    3eb2:	3448      	adds	r4, #72	; 0x48
    3eb4:	2c00      	cmp	r4, #0
    3eb6:	d101      	bne.n	3ebc <_fwalk_reent+0x14>
    3eb8:	0030      	movs	r0, r6
    3eba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3ebc:	6863      	ldr	r3, [r4, #4]
    3ebe:	68a5      	ldr	r5, [r4, #8]
    3ec0:	9300      	str	r3, [sp, #0]
    3ec2:	9b00      	ldr	r3, [sp, #0]
    3ec4:	3b01      	subs	r3, #1
    3ec6:	9300      	str	r3, [sp, #0]
    3ec8:	d501      	bpl.n	3ece <_fwalk_reent+0x26>
    3eca:	6824      	ldr	r4, [r4, #0]
    3ecc:	e7f2      	b.n	3eb4 <_fwalk_reent+0xc>
    3ece:	89ab      	ldrh	r3, [r5, #12]
    3ed0:	2b01      	cmp	r3, #1
    3ed2:	d908      	bls.n	3ee6 <_fwalk_reent+0x3e>
    3ed4:	220e      	movs	r2, #14
    3ed6:	5eab      	ldrsh	r3, [r5, r2]
    3ed8:	3301      	adds	r3, #1
    3eda:	d004      	beq.n	3ee6 <_fwalk_reent+0x3e>
    3edc:	0029      	movs	r1, r5
    3ede:	0038      	movs	r0, r7
    3ee0:	9b01      	ldr	r3, [sp, #4]
    3ee2:	4798      	blx	r3
    3ee4:	4306      	orrs	r6, r0
    3ee6:	3568      	adds	r5, #104	; 0x68
    3ee8:	e7eb      	b.n	3ec2 <_fwalk_reent+0x1a>
	...

00003eec <__swhatbuf_r>:
    3eec:	b570      	push	{r4, r5, r6, lr}
    3eee:	000e      	movs	r6, r1
    3ef0:	001d      	movs	r5, r3
    3ef2:	230e      	movs	r3, #14
    3ef4:	5ec9      	ldrsh	r1, [r1, r3]
    3ef6:	b090      	sub	sp, #64	; 0x40
    3ef8:	0014      	movs	r4, r2
    3efa:	2900      	cmp	r1, #0
    3efc:	da07      	bge.n	3f0e <__swhatbuf_r+0x22>
    3efe:	2300      	movs	r3, #0
    3f00:	602b      	str	r3, [r5, #0]
    3f02:	89b3      	ldrh	r3, [r6, #12]
    3f04:	061b      	lsls	r3, r3, #24
    3f06:	d411      	bmi.n	3f2c <__swhatbuf_r+0x40>
    3f08:	2380      	movs	r3, #128	; 0x80
    3f0a:	00db      	lsls	r3, r3, #3
    3f0c:	e00f      	b.n	3f2e <__swhatbuf_r+0x42>
    3f0e:	aa01      	add	r2, sp, #4
    3f10:	f000 fc64 	bl	47dc <_fstat_r>
    3f14:	2800      	cmp	r0, #0
    3f16:	dbf2      	blt.n	3efe <__swhatbuf_r+0x12>
    3f18:	22f0      	movs	r2, #240	; 0xf0
    3f1a:	9b02      	ldr	r3, [sp, #8]
    3f1c:	0212      	lsls	r2, r2, #8
    3f1e:	4013      	ands	r3, r2
    3f20:	4a05      	ldr	r2, [pc, #20]	; (3f38 <__swhatbuf_r+0x4c>)
    3f22:	189b      	adds	r3, r3, r2
    3f24:	425a      	negs	r2, r3
    3f26:	4153      	adcs	r3, r2
    3f28:	602b      	str	r3, [r5, #0]
    3f2a:	e7ed      	b.n	3f08 <__swhatbuf_r+0x1c>
    3f2c:	2340      	movs	r3, #64	; 0x40
    3f2e:	2000      	movs	r0, #0
    3f30:	6023      	str	r3, [r4, #0]
    3f32:	b010      	add	sp, #64	; 0x40
    3f34:	bd70      	pop	{r4, r5, r6, pc}
    3f36:	46c0      	nop			; (mov r8, r8)
    3f38:	ffffe000 	.word	0xffffe000

00003f3c <__smakebuf_r>:
    3f3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3f3e:	2602      	movs	r6, #2
    3f40:	898b      	ldrh	r3, [r1, #12]
    3f42:	0005      	movs	r5, r0
    3f44:	000c      	movs	r4, r1
    3f46:	4233      	tst	r3, r6
    3f48:	d006      	beq.n	3f58 <__smakebuf_r+0x1c>
    3f4a:	0023      	movs	r3, r4
    3f4c:	3347      	adds	r3, #71	; 0x47
    3f4e:	6023      	str	r3, [r4, #0]
    3f50:	6123      	str	r3, [r4, #16]
    3f52:	2301      	movs	r3, #1
    3f54:	6163      	str	r3, [r4, #20]
    3f56:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    3f58:	ab01      	add	r3, sp, #4
    3f5a:	466a      	mov	r2, sp
    3f5c:	f7ff ffc6 	bl	3eec <__swhatbuf_r>
    3f60:	9900      	ldr	r1, [sp, #0]
    3f62:	0007      	movs	r7, r0
    3f64:	0028      	movs	r0, r5
    3f66:	f7ff fc81 	bl	386c <_malloc_r>
    3f6a:	2800      	cmp	r0, #0
    3f6c:	d108      	bne.n	3f80 <__smakebuf_r+0x44>
    3f6e:	220c      	movs	r2, #12
    3f70:	5ea3      	ldrsh	r3, [r4, r2]
    3f72:	059a      	lsls	r2, r3, #22
    3f74:	d4ef      	bmi.n	3f56 <__smakebuf_r+0x1a>
    3f76:	2203      	movs	r2, #3
    3f78:	4393      	bics	r3, r2
    3f7a:	431e      	orrs	r6, r3
    3f7c:	81a6      	strh	r6, [r4, #12]
    3f7e:	e7e4      	b.n	3f4a <__smakebuf_r+0xe>
    3f80:	4b0f      	ldr	r3, [pc, #60]	; (3fc0 <__smakebuf_r+0x84>)
    3f82:	62ab      	str	r3, [r5, #40]	; 0x28
    3f84:	2380      	movs	r3, #128	; 0x80
    3f86:	89a2      	ldrh	r2, [r4, #12]
    3f88:	6020      	str	r0, [r4, #0]
    3f8a:	4313      	orrs	r3, r2
    3f8c:	81a3      	strh	r3, [r4, #12]
    3f8e:	9b00      	ldr	r3, [sp, #0]
    3f90:	6120      	str	r0, [r4, #16]
    3f92:	6163      	str	r3, [r4, #20]
    3f94:	9b01      	ldr	r3, [sp, #4]
    3f96:	2b00      	cmp	r3, #0
    3f98:	d00d      	beq.n	3fb6 <__smakebuf_r+0x7a>
    3f9a:	230e      	movs	r3, #14
    3f9c:	5ee1      	ldrsh	r1, [r4, r3]
    3f9e:	0028      	movs	r0, r5
    3fa0:	f000 fc2e 	bl	4800 <_isatty_r>
    3fa4:	2800      	cmp	r0, #0
    3fa6:	d006      	beq.n	3fb6 <__smakebuf_r+0x7a>
    3fa8:	2203      	movs	r2, #3
    3faa:	89a3      	ldrh	r3, [r4, #12]
    3fac:	4393      	bics	r3, r2
    3fae:	001a      	movs	r2, r3
    3fb0:	2301      	movs	r3, #1
    3fb2:	4313      	orrs	r3, r2
    3fb4:	81a3      	strh	r3, [r4, #12]
    3fb6:	89a0      	ldrh	r0, [r4, #12]
    3fb8:	4338      	orrs	r0, r7
    3fba:	81a0      	strh	r0, [r4, #12]
    3fbc:	e7cb      	b.n	3f56 <__smakebuf_r+0x1a>
    3fbe:	46c0      	nop			; (mov r8, r8)
    3fc0:	00003d3d 	.word	0x00003d3d

00003fc4 <__malloc_lock>:
    3fc4:	4770      	bx	lr

00003fc6 <__malloc_unlock>:
    3fc6:	4770      	bx	lr

00003fc8 <__sfputc_r>:
    3fc8:	6893      	ldr	r3, [r2, #8]
    3fca:	b510      	push	{r4, lr}
    3fcc:	3b01      	subs	r3, #1
    3fce:	6093      	str	r3, [r2, #8]
    3fd0:	2b00      	cmp	r3, #0
    3fd2:	da05      	bge.n	3fe0 <__sfputc_r+0x18>
    3fd4:	6994      	ldr	r4, [r2, #24]
    3fd6:	42a3      	cmp	r3, r4
    3fd8:	db08      	blt.n	3fec <__sfputc_r+0x24>
    3fda:	b2cb      	uxtb	r3, r1
    3fdc:	2b0a      	cmp	r3, #10
    3fde:	d005      	beq.n	3fec <__sfputc_r+0x24>
    3fe0:	6813      	ldr	r3, [r2, #0]
    3fe2:	1c58      	adds	r0, r3, #1
    3fe4:	6010      	str	r0, [r2, #0]
    3fe6:	7019      	strb	r1, [r3, #0]
    3fe8:	b2c8      	uxtb	r0, r1
    3fea:	bd10      	pop	{r4, pc}
    3fec:	f000 fb04 	bl	45f8 <__swbuf_r>
    3ff0:	e7fb      	b.n	3fea <__sfputc_r+0x22>

00003ff2 <__sfputs_r>:
    3ff2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3ff4:	0006      	movs	r6, r0
    3ff6:	000f      	movs	r7, r1
    3ff8:	0014      	movs	r4, r2
    3ffa:	18d5      	adds	r5, r2, r3
    3ffc:	42ac      	cmp	r4, r5
    3ffe:	d101      	bne.n	4004 <__sfputs_r+0x12>
    4000:	2000      	movs	r0, #0
    4002:	e007      	b.n	4014 <__sfputs_r+0x22>
    4004:	7821      	ldrb	r1, [r4, #0]
    4006:	003a      	movs	r2, r7
    4008:	0030      	movs	r0, r6
    400a:	f7ff ffdd 	bl	3fc8 <__sfputc_r>
    400e:	3401      	adds	r4, #1
    4010:	1c43      	adds	r3, r0, #1
    4012:	d1f3      	bne.n	3ffc <__sfputs_r+0xa>
    4014:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00004018 <_vfiprintf_r>:
    4018:	b5f0      	push	{r4, r5, r6, r7, lr}
    401a:	b09f      	sub	sp, #124	; 0x7c
    401c:	0006      	movs	r6, r0
    401e:	000f      	movs	r7, r1
    4020:	0014      	movs	r4, r2
    4022:	9305      	str	r3, [sp, #20]
    4024:	2800      	cmp	r0, #0
    4026:	d004      	beq.n	4032 <_vfiprintf_r+0x1a>
    4028:	6983      	ldr	r3, [r0, #24]
    402a:	2b00      	cmp	r3, #0
    402c:	d101      	bne.n	4032 <_vfiprintf_r+0x1a>
    402e:	f7ff fec7 	bl	3dc0 <__sinit>
    4032:	4b7f      	ldr	r3, [pc, #508]	; (4230 <_vfiprintf_r+0x218>)
    4034:	429f      	cmp	r7, r3
    4036:	d15c      	bne.n	40f2 <_vfiprintf_r+0xda>
    4038:	6877      	ldr	r7, [r6, #4]
    403a:	89bb      	ldrh	r3, [r7, #12]
    403c:	071b      	lsls	r3, r3, #28
    403e:	d562      	bpl.n	4106 <_vfiprintf_r+0xee>
    4040:	693b      	ldr	r3, [r7, #16]
    4042:	2b00      	cmp	r3, #0
    4044:	d05f      	beq.n	4106 <_vfiprintf_r+0xee>
    4046:	2300      	movs	r3, #0
    4048:	ad06      	add	r5, sp, #24
    404a:	616b      	str	r3, [r5, #20]
    404c:	3320      	adds	r3, #32
    404e:	766b      	strb	r3, [r5, #25]
    4050:	3310      	adds	r3, #16
    4052:	76ab      	strb	r3, [r5, #26]
    4054:	9402      	str	r4, [sp, #8]
    4056:	9c02      	ldr	r4, [sp, #8]
    4058:	7823      	ldrb	r3, [r4, #0]
    405a:	2b00      	cmp	r3, #0
    405c:	d15d      	bne.n	411a <_vfiprintf_r+0x102>
    405e:	9b02      	ldr	r3, [sp, #8]
    4060:	1ae3      	subs	r3, r4, r3
    4062:	9304      	str	r3, [sp, #16]
    4064:	d00d      	beq.n	4082 <_vfiprintf_r+0x6a>
    4066:	9b04      	ldr	r3, [sp, #16]
    4068:	9a02      	ldr	r2, [sp, #8]
    406a:	0039      	movs	r1, r7
    406c:	0030      	movs	r0, r6
    406e:	f7ff ffc0 	bl	3ff2 <__sfputs_r>
    4072:	1c43      	adds	r3, r0, #1
    4074:	d100      	bne.n	4078 <_vfiprintf_r+0x60>
    4076:	e0cc      	b.n	4212 <_vfiprintf_r+0x1fa>
    4078:	696a      	ldr	r2, [r5, #20]
    407a:	9b04      	ldr	r3, [sp, #16]
    407c:	4694      	mov	ip, r2
    407e:	4463      	add	r3, ip
    4080:	616b      	str	r3, [r5, #20]
    4082:	7823      	ldrb	r3, [r4, #0]
    4084:	2b00      	cmp	r3, #0
    4086:	d100      	bne.n	408a <_vfiprintf_r+0x72>
    4088:	e0c3      	b.n	4212 <_vfiprintf_r+0x1fa>
    408a:	2201      	movs	r2, #1
    408c:	2300      	movs	r3, #0
    408e:	4252      	negs	r2, r2
    4090:	606a      	str	r2, [r5, #4]
    4092:	a902      	add	r1, sp, #8
    4094:	3254      	adds	r2, #84	; 0x54
    4096:	1852      	adds	r2, r2, r1
    4098:	3401      	adds	r4, #1
    409a:	602b      	str	r3, [r5, #0]
    409c:	60eb      	str	r3, [r5, #12]
    409e:	60ab      	str	r3, [r5, #8]
    40a0:	7013      	strb	r3, [r2, #0]
    40a2:	65ab      	str	r3, [r5, #88]	; 0x58
    40a4:	7821      	ldrb	r1, [r4, #0]
    40a6:	2205      	movs	r2, #5
    40a8:	4862      	ldr	r0, [pc, #392]	; (4234 <_vfiprintf_r+0x21c>)
    40aa:	f000 fbcf 	bl	484c <memchr>
    40ae:	1c63      	adds	r3, r4, #1
    40b0:	469c      	mov	ip, r3
    40b2:	2800      	cmp	r0, #0
    40b4:	d135      	bne.n	4122 <_vfiprintf_r+0x10a>
    40b6:	6829      	ldr	r1, [r5, #0]
    40b8:	06cb      	lsls	r3, r1, #27
    40ba:	d504      	bpl.n	40c6 <_vfiprintf_r+0xae>
    40bc:	2353      	movs	r3, #83	; 0x53
    40be:	aa02      	add	r2, sp, #8
    40c0:	3020      	adds	r0, #32
    40c2:	189b      	adds	r3, r3, r2
    40c4:	7018      	strb	r0, [r3, #0]
    40c6:	070b      	lsls	r3, r1, #28
    40c8:	d504      	bpl.n	40d4 <_vfiprintf_r+0xbc>
    40ca:	2353      	movs	r3, #83	; 0x53
    40cc:	202b      	movs	r0, #43	; 0x2b
    40ce:	aa02      	add	r2, sp, #8
    40d0:	189b      	adds	r3, r3, r2
    40d2:	7018      	strb	r0, [r3, #0]
    40d4:	7823      	ldrb	r3, [r4, #0]
    40d6:	2b2a      	cmp	r3, #42	; 0x2a
    40d8:	d02c      	beq.n	4134 <_vfiprintf_r+0x11c>
    40da:	2000      	movs	r0, #0
    40dc:	210a      	movs	r1, #10
    40de:	9b09      	ldr	r3, [sp, #36]	; 0x24
    40e0:	7822      	ldrb	r2, [r4, #0]
    40e2:	3a30      	subs	r2, #48	; 0x30
    40e4:	2a09      	cmp	r2, #9
    40e6:	d800      	bhi.n	40ea <_vfiprintf_r+0xd2>
    40e8:	e06b      	b.n	41c2 <_vfiprintf_r+0x1aa>
    40ea:	2800      	cmp	r0, #0
    40ec:	d02a      	beq.n	4144 <_vfiprintf_r+0x12c>
    40ee:	9309      	str	r3, [sp, #36]	; 0x24
    40f0:	e028      	b.n	4144 <_vfiprintf_r+0x12c>
    40f2:	4b51      	ldr	r3, [pc, #324]	; (4238 <_vfiprintf_r+0x220>)
    40f4:	429f      	cmp	r7, r3
    40f6:	d101      	bne.n	40fc <_vfiprintf_r+0xe4>
    40f8:	68b7      	ldr	r7, [r6, #8]
    40fa:	e79e      	b.n	403a <_vfiprintf_r+0x22>
    40fc:	4b4f      	ldr	r3, [pc, #316]	; (423c <_vfiprintf_r+0x224>)
    40fe:	429f      	cmp	r7, r3
    4100:	d19b      	bne.n	403a <_vfiprintf_r+0x22>
    4102:	68f7      	ldr	r7, [r6, #12]
    4104:	e799      	b.n	403a <_vfiprintf_r+0x22>
    4106:	0039      	movs	r1, r7
    4108:	0030      	movs	r0, r6
    410a:	f000 fadf 	bl	46cc <__swsetup_r>
    410e:	2800      	cmp	r0, #0
    4110:	d099      	beq.n	4046 <_vfiprintf_r+0x2e>
    4112:	2001      	movs	r0, #1
    4114:	4240      	negs	r0, r0
    4116:	b01f      	add	sp, #124	; 0x7c
    4118:	bdf0      	pop	{r4, r5, r6, r7, pc}
    411a:	2b25      	cmp	r3, #37	; 0x25
    411c:	d09f      	beq.n	405e <_vfiprintf_r+0x46>
    411e:	3401      	adds	r4, #1
    4120:	e79a      	b.n	4058 <_vfiprintf_r+0x40>
    4122:	4b44      	ldr	r3, [pc, #272]	; (4234 <_vfiprintf_r+0x21c>)
    4124:	6829      	ldr	r1, [r5, #0]
    4126:	1ac0      	subs	r0, r0, r3
    4128:	2301      	movs	r3, #1
    412a:	4083      	lsls	r3, r0
    412c:	430b      	orrs	r3, r1
    412e:	602b      	str	r3, [r5, #0]
    4130:	4664      	mov	r4, ip
    4132:	e7b7      	b.n	40a4 <_vfiprintf_r+0x8c>
    4134:	9b05      	ldr	r3, [sp, #20]
    4136:	1d18      	adds	r0, r3, #4
    4138:	681b      	ldr	r3, [r3, #0]
    413a:	9005      	str	r0, [sp, #20]
    413c:	2b00      	cmp	r3, #0
    413e:	db3a      	blt.n	41b6 <_vfiprintf_r+0x19e>
    4140:	9309      	str	r3, [sp, #36]	; 0x24
    4142:	4664      	mov	r4, ip
    4144:	7823      	ldrb	r3, [r4, #0]
    4146:	2b2e      	cmp	r3, #46	; 0x2e
    4148:	d10b      	bne.n	4162 <_vfiprintf_r+0x14a>
    414a:	7863      	ldrb	r3, [r4, #1]
    414c:	1c62      	adds	r2, r4, #1
    414e:	2b2a      	cmp	r3, #42	; 0x2a
    4150:	d13f      	bne.n	41d2 <_vfiprintf_r+0x1ba>
    4152:	9b05      	ldr	r3, [sp, #20]
    4154:	3402      	adds	r4, #2
    4156:	1d1a      	adds	r2, r3, #4
    4158:	681b      	ldr	r3, [r3, #0]
    415a:	9205      	str	r2, [sp, #20]
    415c:	2b00      	cmp	r3, #0
    415e:	db35      	blt.n	41cc <_vfiprintf_r+0x1b4>
    4160:	9307      	str	r3, [sp, #28]
    4162:	7821      	ldrb	r1, [r4, #0]
    4164:	2203      	movs	r2, #3
    4166:	4836      	ldr	r0, [pc, #216]	; (4240 <_vfiprintf_r+0x228>)
    4168:	f000 fb70 	bl	484c <memchr>
    416c:	2800      	cmp	r0, #0
    416e:	d007      	beq.n	4180 <_vfiprintf_r+0x168>
    4170:	4b33      	ldr	r3, [pc, #204]	; (4240 <_vfiprintf_r+0x228>)
    4172:	682a      	ldr	r2, [r5, #0]
    4174:	1ac0      	subs	r0, r0, r3
    4176:	2340      	movs	r3, #64	; 0x40
    4178:	4083      	lsls	r3, r0
    417a:	4313      	orrs	r3, r2
    417c:	602b      	str	r3, [r5, #0]
    417e:	3401      	adds	r4, #1
    4180:	7821      	ldrb	r1, [r4, #0]
    4182:	1c63      	adds	r3, r4, #1
    4184:	2206      	movs	r2, #6
    4186:	482f      	ldr	r0, [pc, #188]	; (4244 <_vfiprintf_r+0x22c>)
    4188:	9302      	str	r3, [sp, #8]
    418a:	7629      	strb	r1, [r5, #24]
    418c:	f000 fb5e 	bl	484c <memchr>
    4190:	2800      	cmp	r0, #0
    4192:	d044      	beq.n	421e <_vfiprintf_r+0x206>
    4194:	4b2c      	ldr	r3, [pc, #176]	; (4248 <_vfiprintf_r+0x230>)
    4196:	2b00      	cmp	r3, #0
    4198:	d12f      	bne.n	41fa <_vfiprintf_r+0x1e2>
    419a:	6829      	ldr	r1, [r5, #0]
    419c:	9b05      	ldr	r3, [sp, #20]
    419e:	2207      	movs	r2, #7
    41a0:	05c9      	lsls	r1, r1, #23
    41a2:	d528      	bpl.n	41f6 <_vfiprintf_r+0x1de>
    41a4:	189b      	adds	r3, r3, r2
    41a6:	4393      	bics	r3, r2
    41a8:	3308      	adds	r3, #8
    41aa:	9305      	str	r3, [sp, #20]
    41ac:	696b      	ldr	r3, [r5, #20]
    41ae:	9a03      	ldr	r2, [sp, #12]
    41b0:	189b      	adds	r3, r3, r2
    41b2:	616b      	str	r3, [r5, #20]
    41b4:	e74f      	b.n	4056 <_vfiprintf_r+0x3e>
    41b6:	425b      	negs	r3, r3
    41b8:	60eb      	str	r3, [r5, #12]
    41ba:	2302      	movs	r3, #2
    41bc:	430b      	orrs	r3, r1
    41be:	602b      	str	r3, [r5, #0]
    41c0:	e7bf      	b.n	4142 <_vfiprintf_r+0x12a>
    41c2:	434b      	muls	r3, r1
    41c4:	3401      	adds	r4, #1
    41c6:	189b      	adds	r3, r3, r2
    41c8:	2001      	movs	r0, #1
    41ca:	e789      	b.n	40e0 <_vfiprintf_r+0xc8>
    41cc:	2301      	movs	r3, #1
    41ce:	425b      	negs	r3, r3
    41d0:	e7c6      	b.n	4160 <_vfiprintf_r+0x148>
    41d2:	2300      	movs	r3, #0
    41d4:	0014      	movs	r4, r2
    41d6:	200a      	movs	r0, #10
    41d8:	001a      	movs	r2, r3
    41da:	606b      	str	r3, [r5, #4]
    41dc:	7821      	ldrb	r1, [r4, #0]
    41de:	3930      	subs	r1, #48	; 0x30
    41e0:	2909      	cmp	r1, #9
    41e2:	d903      	bls.n	41ec <_vfiprintf_r+0x1d4>
    41e4:	2b00      	cmp	r3, #0
    41e6:	d0bc      	beq.n	4162 <_vfiprintf_r+0x14a>
    41e8:	9207      	str	r2, [sp, #28]
    41ea:	e7ba      	b.n	4162 <_vfiprintf_r+0x14a>
    41ec:	4342      	muls	r2, r0
    41ee:	3401      	adds	r4, #1
    41f0:	1852      	adds	r2, r2, r1
    41f2:	2301      	movs	r3, #1
    41f4:	e7f2      	b.n	41dc <_vfiprintf_r+0x1c4>
    41f6:	3307      	adds	r3, #7
    41f8:	e7d5      	b.n	41a6 <_vfiprintf_r+0x18e>
    41fa:	ab05      	add	r3, sp, #20
    41fc:	9300      	str	r3, [sp, #0]
    41fe:	003a      	movs	r2, r7
    4200:	4b12      	ldr	r3, [pc, #72]	; (424c <_vfiprintf_r+0x234>)
    4202:	0029      	movs	r1, r5
    4204:	0030      	movs	r0, r6
    4206:	e000      	b.n	420a <_vfiprintf_r+0x1f2>
    4208:	bf00      	nop
    420a:	9003      	str	r0, [sp, #12]
    420c:	9b03      	ldr	r3, [sp, #12]
    420e:	3301      	adds	r3, #1
    4210:	d1cc      	bne.n	41ac <_vfiprintf_r+0x194>
    4212:	89bb      	ldrh	r3, [r7, #12]
    4214:	065b      	lsls	r3, r3, #25
    4216:	d500      	bpl.n	421a <_vfiprintf_r+0x202>
    4218:	e77b      	b.n	4112 <_vfiprintf_r+0xfa>
    421a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    421c:	e77b      	b.n	4116 <_vfiprintf_r+0xfe>
    421e:	ab05      	add	r3, sp, #20
    4220:	9300      	str	r3, [sp, #0]
    4222:	003a      	movs	r2, r7
    4224:	4b09      	ldr	r3, [pc, #36]	; (424c <_vfiprintf_r+0x234>)
    4226:	0029      	movs	r1, r5
    4228:	0030      	movs	r0, r6
    422a:	f000 f87f 	bl	432c <_printf_i>
    422e:	e7ec      	b.n	420a <_vfiprintf_r+0x1f2>
    4230:	00006ab8 	.word	0x00006ab8
    4234:	00006af8 	.word	0x00006af8
    4238:	00006ad8 	.word	0x00006ad8
    423c:	00006a98 	.word	0x00006a98
    4240:	00006afe 	.word	0x00006afe
    4244:	00006b02 	.word	0x00006b02
    4248:	00000000 	.word	0x00000000
    424c:	00003ff3 	.word	0x00003ff3

00004250 <_printf_common>:
    4250:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4252:	0015      	movs	r5, r2
    4254:	9301      	str	r3, [sp, #4]
    4256:	688a      	ldr	r2, [r1, #8]
    4258:	690b      	ldr	r3, [r1, #16]
    425a:	9000      	str	r0, [sp, #0]
    425c:	000c      	movs	r4, r1
    425e:	4293      	cmp	r3, r2
    4260:	da00      	bge.n	4264 <_printf_common+0x14>
    4262:	0013      	movs	r3, r2
    4264:	0022      	movs	r2, r4
    4266:	602b      	str	r3, [r5, #0]
    4268:	3243      	adds	r2, #67	; 0x43
    426a:	7812      	ldrb	r2, [r2, #0]
    426c:	2a00      	cmp	r2, #0
    426e:	d001      	beq.n	4274 <_printf_common+0x24>
    4270:	3301      	adds	r3, #1
    4272:	602b      	str	r3, [r5, #0]
    4274:	6823      	ldr	r3, [r4, #0]
    4276:	069b      	lsls	r3, r3, #26
    4278:	d502      	bpl.n	4280 <_printf_common+0x30>
    427a:	682b      	ldr	r3, [r5, #0]
    427c:	3302      	adds	r3, #2
    427e:	602b      	str	r3, [r5, #0]
    4280:	2706      	movs	r7, #6
    4282:	6823      	ldr	r3, [r4, #0]
    4284:	401f      	ands	r7, r3
    4286:	d027      	beq.n	42d8 <_printf_common+0x88>
    4288:	0023      	movs	r3, r4
    428a:	3343      	adds	r3, #67	; 0x43
    428c:	781b      	ldrb	r3, [r3, #0]
    428e:	1e5a      	subs	r2, r3, #1
    4290:	4193      	sbcs	r3, r2
    4292:	6822      	ldr	r2, [r4, #0]
    4294:	0692      	lsls	r2, r2, #26
    4296:	d430      	bmi.n	42fa <_printf_common+0xaa>
    4298:	0022      	movs	r2, r4
    429a:	9901      	ldr	r1, [sp, #4]
    429c:	3243      	adds	r2, #67	; 0x43
    429e:	9800      	ldr	r0, [sp, #0]
    42a0:	9e08      	ldr	r6, [sp, #32]
    42a2:	47b0      	blx	r6
    42a4:	1c43      	adds	r3, r0, #1
    42a6:	d025      	beq.n	42f4 <_printf_common+0xa4>
    42a8:	2306      	movs	r3, #6
    42aa:	6820      	ldr	r0, [r4, #0]
    42ac:	682a      	ldr	r2, [r5, #0]
    42ae:	68e1      	ldr	r1, [r4, #12]
    42b0:	4003      	ands	r3, r0
    42b2:	2500      	movs	r5, #0
    42b4:	2b04      	cmp	r3, #4
    42b6:	d103      	bne.n	42c0 <_printf_common+0x70>
    42b8:	1a8d      	subs	r5, r1, r2
    42ba:	43eb      	mvns	r3, r5
    42bc:	17db      	asrs	r3, r3, #31
    42be:	401d      	ands	r5, r3
    42c0:	68a3      	ldr	r3, [r4, #8]
    42c2:	6922      	ldr	r2, [r4, #16]
    42c4:	4293      	cmp	r3, r2
    42c6:	dd01      	ble.n	42cc <_printf_common+0x7c>
    42c8:	1a9b      	subs	r3, r3, r2
    42ca:	18ed      	adds	r5, r5, r3
    42cc:	2700      	movs	r7, #0
    42ce:	42bd      	cmp	r5, r7
    42d0:	d120      	bne.n	4314 <_printf_common+0xc4>
    42d2:	2000      	movs	r0, #0
    42d4:	e010      	b.n	42f8 <_printf_common+0xa8>
    42d6:	3701      	adds	r7, #1
    42d8:	68e3      	ldr	r3, [r4, #12]
    42da:	682a      	ldr	r2, [r5, #0]
    42dc:	1a9b      	subs	r3, r3, r2
    42de:	429f      	cmp	r7, r3
    42e0:	dad2      	bge.n	4288 <_printf_common+0x38>
    42e2:	0022      	movs	r2, r4
    42e4:	2301      	movs	r3, #1
    42e6:	3219      	adds	r2, #25
    42e8:	9901      	ldr	r1, [sp, #4]
    42ea:	9800      	ldr	r0, [sp, #0]
    42ec:	9e08      	ldr	r6, [sp, #32]
    42ee:	47b0      	blx	r6
    42f0:	1c43      	adds	r3, r0, #1
    42f2:	d1f0      	bne.n	42d6 <_printf_common+0x86>
    42f4:	2001      	movs	r0, #1
    42f6:	4240      	negs	r0, r0
    42f8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    42fa:	2030      	movs	r0, #48	; 0x30
    42fc:	18e1      	adds	r1, r4, r3
    42fe:	3143      	adds	r1, #67	; 0x43
    4300:	7008      	strb	r0, [r1, #0]
    4302:	0021      	movs	r1, r4
    4304:	1c5a      	adds	r2, r3, #1
    4306:	3145      	adds	r1, #69	; 0x45
    4308:	7809      	ldrb	r1, [r1, #0]
    430a:	18a2      	adds	r2, r4, r2
    430c:	3243      	adds	r2, #67	; 0x43
    430e:	3302      	adds	r3, #2
    4310:	7011      	strb	r1, [r2, #0]
    4312:	e7c1      	b.n	4298 <_printf_common+0x48>
    4314:	0022      	movs	r2, r4
    4316:	2301      	movs	r3, #1
    4318:	321a      	adds	r2, #26
    431a:	9901      	ldr	r1, [sp, #4]
    431c:	9800      	ldr	r0, [sp, #0]
    431e:	9e08      	ldr	r6, [sp, #32]
    4320:	47b0      	blx	r6
    4322:	1c43      	adds	r3, r0, #1
    4324:	d0e6      	beq.n	42f4 <_printf_common+0xa4>
    4326:	3701      	adds	r7, #1
    4328:	e7d1      	b.n	42ce <_printf_common+0x7e>
	...

0000432c <_printf_i>:
    432c:	b5f0      	push	{r4, r5, r6, r7, lr}
    432e:	b08b      	sub	sp, #44	; 0x2c
    4330:	9206      	str	r2, [sp, #24]
    4332:	000a      	movs	r2, r1
    4334:	3243      	adds	r2, #67	; 0x43
    4336:	9307      	str	r3, [sp, #28]
    4338:	9005      	str	r0, [sp, #20]
    433a:	9204      	str	r2, [sp, #16]
    433c:	7e0a      	ldrb	r2, [r1, #24]
    433e:	000c      	movs	r4, r1
    4340:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4342:	2a6e      	cmp	r2, #110	; 0x6e
    4344:	d100      	bne.n	4348 <_printf_i+0x1c>
    4346:	e08f      	b.n	4468 <_printf_i+0x13c>
    4348:	d817      	bhi.n	437a <_printf_i+0x4e>
    434a:	2a63      	cmp	r2, #99	; 0x63
    434c:	d02c      	beq.n	43a8 <_printf_i+0x7c>
    434e:	d808      	bhi.n	4362 <_printf_i+0x36>
    4350:	2a00      	cmp	r2, #0
    4352:	d100      	bne.n	4356 <_printf_i+0x2a>
    4354:	e099      	b.n	448a <_printf_i+0x15e>
    4356:	2a58      	cmp	r2, #88	; 0x58
    4358:	d054      	beq.n	4404 <_printf_i+0xd8>
    435a:	0026      	movs	r6, r4
    435c:	3642      	adds	r6, #66	; 0x42
    435e:	7032      	strb	r2, [r6, #0]
    4360:	e029      	b.n	43b6 <_printf_i+0x8a>
    4362:	2a64      	cmp	r2, #100	; 0x64
    4364:	d001      	beq.n	436a <_printf_i+0x3e>
    4366:	2a69      	cmp	r2, #105	; 0x69
    4368:	d1f7      	bne.n	435a <_printf_i+0x2e>
    436a:	6821      	ldr	r1, [r4, #0]
    436c:	681a      	ldr	r2, [r3, #0]
    436e:	0608      	lsls	r0, r1, #24
    4370:	d523      	bpl.n	43ba <_printf_i+0x8e>
    4372:	1d11      	adds	r1, r2, #4
    4374:	6019      	str	r1, [r3, #0]
    4376:	6815      	ldr	r5, [r2, #0]
    4378:	e025      	b.n	43c6 <_printf_i+0x9a>
    437a:	2a73      	cmp	r2, #115	; 0x73
    437c:	d100      	bne.n	4380 <_printf_i+0x54>
    437e:	e088      	b.n	4492 <_printf_i+0x166>
    4380:	d808      	bhi.n	4394 <_printf_i+0x68>
    4382:	2a6f      	cmp	r2, #111	; 0x6f
    4384:	d029      	beq.n	43da <_printf_i+0xae>
    4386:	2a70      	cmp	r2, #112	; 0x70
    4388:	d1e7      	bne.n	435a <_printf_i+0x2e>
    438a:	2220      	movs	r2, #32
    438c:	6809      	ldr	r1, [r1, #0]
    438e:	430a      	orrs	r2, r1
    4390:	6022      	str	r2, [r4, #0]
    4392:	e003      	b.n	439c <_printf_i+0x70>
    4394:	2a75      	cmp	r2, #117	; 0x75
    4396:	d020      	beq.n	43da <_printf_i+0xae>
    4398:	2a78      	cmp	r2, #120	; 0x78
    439a:	d1de      	bne.n	435a <_printf_i+0x2e>
    439c:	0022      	movs	r2, r4
    439e:	2178      	movs	r1, #120	; 0x78
    43a0:	3245      	adds	r2, #69	; 0x45
    43a2:	7011      	strb	r1, [r2, #0]
    43a4:	4a6c      	ldr	r2, [pc, #432]	; (4558 <_printf_i+0x22c>)
    43a6:	e030      	b.n	440a <_printf_i+0xde>
    43a8:	000e      	movs	r6, r1
    43aa:	681a      	ldr	r2, [r3, #0]
    43ac:	3642      	adds	r6, #66	; 0x42
    43ae:	1d11      	adds	r1, r2, #4
    43b0:	6019      	str	r1, [r3, #0]
    43b2:	6813      	ldr	r3, [r2, #0]
    43b4:	7033      	strb	r3, [r6, #0]
    43b6:	2301      	movs	r3, #1
    43b8:	e079      	b.n	44ae <_printf_i+0x182>
    43ba:	0649      	lsls	r1, r1, #25
    43bc:	d5d9      	bpl.n	4372 <_printf_i+0x46>
    43be:	1d11      	adds	r1, r2, #4
    43c0:	6019      	str	r1, [r3, #0]
    43c2:	2300      	movs	r3, #0
    43c4:	5ed5      	ldrsh	r5, [r2, r3]
    43c6:	2d00      	cmp	r5, #0
    43c8:	da03      	bge.n	43d2 <_printf_i+0xa6>
    43ca:	232d      	movs	r3, #45	; 0x2d
    43cc:	9a04      	ldr	r2, [sp, #16]
    43ce:	426d      	negs	r5, r5
    43d0:	7013      	strb	r3, [r2, #0]
    43d2:	4b62      	ldr	r3, [pc, #392]	; (455c <_printf_i+0x230>)
    43d4:	270a      	movs	r7, #10
    43d6:	9303      	str	r3, [sp, #12]
    43d8:	e02f      	b.n	443a <_printf_i+0x10e>
    43da:	6820      	ldr	r0, [r4, #0]
    43dc:	6819      	ldr	r1, [r3, #0]
    43de:	0605      	lsls	r5, r0, #24
    43e0:	d503      	bpl.n	43ea <_printf_i+0xbe>
    43e2:	1d08      	adds	r0, r1, #4
    43e4:	6018      	str	r0, [r3, #0]
    43e6:	680d      	ldr	r5, [r1, #0]
    43e8:	e005      	b.n	43f6 <_printf_i+0xca>
    43ea:	0640      	lsls	r0, r0, #25
    43ec:	d5f9      	bpl.n	43e2 <_printf_i+0xb6>
    43ee:	680d      	ldr	r5, [r1, #0]
    43f0:	1d08      	adds	r0, r1, #4
    43f2:	6018      	str	r0, [r3, #0]
    43f4:	b2ad      	uxth	r5, r5
    43f6:	4b59      	ldr	r3, [pc, #356]	; (455c <_printf_i+0x230>)
    43f8:	2708      	movs	r7, #8
    43fa:	9303      	str	r3, [sp, #12]
    43fc:	2a6f      	cmp	r2, #111	; 0x6f
    43fe:	d018      	beq.n	4432 <_printf_i+0x106>
    4400:	270a      	movs	r7, #10
    4402:	e016      	b.n	4432 <_printf_i+0x106>
    4404:	3145      	adds	r1, #69	; 0x45
    4406:	700a      	strb	r2, [r1, #0]
    4408:	4a54      	ldr	r2, [pc, #336]	; (455c <_printf_i+0x230>)
    440a:	9203      	str	r2, [sp, #12]
    440c:	681a      	ldr	r2, [r3, #0]
    440e:	6821      	ldr	r1, [r4, #0]
    4410:	1d10      	adds	r0, r2, #4
    4412:	6018      	str	r0, [r3, #0]
    4414:	6815      	ldr	r5, [r2, #0]
    4416:	0608      	lsls	r0, r1, #24
    4418:	d522      	bpl.n	4460 <_printf_i+0x134>
    441a:	07cb      	lsls	r3, r1, #31
    441c:	d502      	bpl.n	4424 <_printf_i+0xf8>
    441e:	2320      	movs	r3, #32
    4420:	4319      	orrs	r1, r3
    4422:	6021      	str	r1, [r4, #0]
    4424:	2710      	movs	r7, #16
    4426:	2d00      	cmp	r5, #0
    4428:	d103      	bne.n	4432 <_printf_i+0x106>
    442a:	2320      	movs	r3, #32
    442c:	6822      	ldr	r2, [r4, #0]
    442e:	439a      	bics	r2, r3
    4430:	6022      	str	r2, [r4, #0]
    4432:	0023      	movs	r3, r4
    4434:	2200      	movs	r2, #0
    4436:	3343      	adds	r3, #67	; 0x43
    4438:	701a      	strb	r2, [r3, #0]
    443a:	6863      	ldr	r3, [r4, #4]
    443c:	60a3      	str	r3, [r4, #8]
    443e:	2b00      	cmp	r3, #0
    4440:	db5c      	blt.n	44fc <_printf_i+0x1d0>
    4442:	2204      	movs	r2, #4
    4444:	6821      	ldr	r1, [r4, #0]
    4446:	4391      	bics	r1, r2
    4448:	6021      	str	r1, [r4, #0]
    444a:	2d00      	cmp	r5, #0
    444c:	d158      	bne.n	4500 <_printf_i+0x1d4>
    444e:	9e04      	ldr	r6, [sp, #16]
    4450:	2b00      	cmp	r3, #0
    4452:	d064      	beq.n	451e <_printf_i+0x1f2>
    4454:	0026      	movs	r6, r4
    4456:	9b03      	ldr	r3, [sp, #12]
    4458:	3642      	adds	r6, #66	; 0x42
    445a:	781b      	ldrb	r3, [r3, #0]
    445c:	7033      	strb	r3, [r6, #0]
    445e:	e05e      	b.n	451e <_printf_i+0x1f2>
    4460:	0648      	lsls	r0, r1, #25
    4462:	d5da      	bpl.n	441a <_printf_i+0xee>
    4464:	b2ad      	uxth	r5, r5
    4466:	e7d8      	b.n	441a <_printf_i+0xee>
    4468:	6809      	ldr	r1, [r1, #0]
    446a:	681a      	ldr	r2, [r3, #0]
    446c:	0608      	lsls	r0, r1, #24
    446e:	d505      	bpl.n	447c <_printf_i+0x150>
    4470:	1d11      	adds	r1, r2, #4
    4472:	6019      	str	r1, [r3, #0]
    4474:	6813      	ldr	r3, [r2, #0]
    4476:	6962      	ldr	r2, [r4, #20]
    4478:	601a      	str	r2, [r3, #0]
    447a:	e006      	b.n	448a <_printf_i+0x15e>
    447c:	0649      	lsls	r1, r1, #25
    447e:	d5f7      	bpl.n	4470 <_printf_i+0x144>
    4480:	1d11      	adds	r1, r2, #4
    4482:	6019      	str	r1, [r3, #0]
    4484:	6813      	ldr	r3, [r2, #0]
    4486:	8aa2      	ldrh	r2, [r4, #20]
    4488:	801a      	strh	r2, [r3, #0]
    448a:	2300      	movs	r3, #0
    448c:	9e04      	ldr	r6, [sp, #16]
    448e:	6123      	str	r3, [r4, #16]
    4490:	e054      	b.n	453c <_printf_i+0x210>
    4492:	681a      	ldr	r2, [r3, #0]
    4494:	1d11      	adds	r1, r2, #4
    4496:	6019      	str	r1, [r3, #0]
    4498:	6816      	ldr	r6, [r2, #0]
    449a:	2100      	movs	r1, #0
    449c:	6862      	ldr	r2, [r4, #4]
    449e:	0030      	movs	r0, r6
    44a0:	f000 f9d4 	bl	484c <memchr>
    44a4:	2800      	cmp	r0, #0
    44a6:	d001      	beq.n	44ac <_printf_i+0x180>
    44a8:	1b80      	subs	r0, r0, r6
    44aa:	6060      	str	r0, [r4, #4]
    44ac:	6863      	ldr	r3, [r4, #4]
    44ae:	6123      	str	r3, [r4, #16]
    44b0:	2300      	movs	r3, #0
    44b2:	9a04      	ldr	r2, [sp, #16]
    44b4:	7013      	strb	r3, [r2, #0]
    44b6:	e041      	b.n	453c <_printf_i+0x210>
    44b8:	6923      	ldr	r3, [r4, #16]
    44ba:	0032      	movs	r2, r6
    44bc:	9906      	ldr	r1, [sp, #24]
    44be:	9805      	ldr	r0, [sp, #20]
    44c0:	9d07      	ldr	r5, [sp, #28]
    44c2:	47a8      	blx	r5
    44c4:	1c43      	adds	r3, r0, #1
    44c6:	d043      	beq.n	4550 <_printf_i+0x224>
    44c8:	6823      	ldr	r3, [r4, #0]
    44ca:	2500      	movs	r5, #0
    44cc:	079b      	lsls	r3, r3, #30
    44ce:	d40f      	bmi.n	44f0 <_printf_i+0x1c4>
    44d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    44d2:	68e0      	ldr	r0, [r4, #12]
    44d4:	4298      	cmp	r0, r3
    44d6:	da3d      	bge.n	4554 <_printf_i+0x228>
    44d8:	0018      	movs	r0, r3
    44da:	e03b      	b.n	4554 <_printf_i+0x228>
    44dc:	0022      	movs	r2, r4
    44de:	2301      	movs	r3, #1
    44e0:	3219      	adds	r2, #25
    44e2:	9906      	ldr	r1, [sp, #24]
    44e4:	9805      	ldr	r0, [sp, #20]
    44e6:	9e07      	ldr	r6, [sp, #28]
    44e8:	47b0      	blx	r6
    44ea:	1c43      	adds	r3, r0, #1
    44ec:	d030      	beq.n	4550 <_printf_i+0x224>
    44ee:	3501      	adds	r5, #1
    44f0:	68e3      	ldr	r3, [r4, #12]
    44f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    44f4:	1a9b      	subs	r3, r3, r2
    44f6:	429d      	cmp	r5, r3
    44f8:	dbf0      	blt.n	44dc <_printf_i+0x1b0>
    44fa:	e7e9      	b.n	44d0 <_printf_i+0x1a4>
    44fc:	2d00      	cmp	r5, #0
    44fe:	d0a9      	beq.n	4454 <_printf_i+0x128>
    4500:	9e04      	ldr	r6, [sp, #16]
    4502:	0028      	movs	r0, r5
    4504:	0039      	movs	r1, r7
    4506:	f7ff f80d 	bl	3524 <__aeabi_uidivmod>
    450a:	9b03      	ldr	r3, [sp, #12]
    450c:	3e01      	subs	r6, #1
    450e:	5c5b      	ldrb	r3, [r3, r1]
    4510:	0028      	movs	r0, r5
    4512:	7033      	strb	r3, [r6, #0]
    4514:	0039      	movs	r1, r7
    4516:	f7fe ff7f 	bl	3418 <__udivsi3>
    451a:	1e05      	subs	r5, r0, #0
    451c:	d1f1      	bne.n	4502 <_printf_i+0x1d6>
    451e:	2f08      	cmp	r7, #8
    4520:	d109      	bne.n	4536 <_printf_i+0x20a>
    4522:	6823      	ldr	r3, [r4, #0]
    4524:	07db      	lsls	r3, r3, #31
    4526:	d506      	bpl.n	4536 <_printf_i+0x20a>
    4528:	6863      	ldr	r3, [r4, #4]
    452a:	6922      	ldr	r2, [r4, #16]
    452c:	4293      	cmp	r3, r2
    452e:	dc02      	bgt.n	4536 <_printf_i+0x20a>
    4530:	2330      	movs	r3, #48	; 0x30
    4532:	3e01      	subs	r6, #1
    4534:	7033      	strb	r3, [r6, #0]
    4536:	9b04      	ldr	r3, [sp, #16]
    4538:	1b9b      	subs	r3, r3, r6
    453a:	6123      	str	r3, [r4, #16]
    453c:	9b07      	ldr	r3, [sp, #28]
    453e:	aa09      	add	r2, sp, #36	; 0x24
    4540:	9300      	str	r3, [sp, #0]
    4542:	0021      	movs	r1, r4
    4544:	9b06      	ldr	r3, [sp, #24]
    4546:	9805      	ldr	r0, [sp, #20]
    4548:	f7ff fe82 	bl	4250 <_printf_common>
    454c:	1c43      	adds	r3, r0, #1
    454e:	d1b3      	bne.n	44b8 <_printf_i+0x18c>
    4550:	2001      	movs	r0, #1
    4552:	4240      	negs	r0, r0
    4554:	b00b      	add	sp, #44	; 0x2c
    4556:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4558:	00006b1a 	.word	0x00006b1a
    455c:	00006b09 	.word	0x00006b09

00004560 <__sread>:
    4560:	b570      	push	{r4, r5, r6, lr}
    4562:	000c      	movs	r4, r1
    4564:	250e      	movs	r5, #14
    4566:	5f49      	ldrsh	r1, [r1, r5]
    4568:	f000 f97c 	bl	4864 <_read_r>
    456c:	2800      	cmp	r0, #0
    456e:	db03      	blt.n	4578 <__sread+0x18>
    4570:	6d63      	ldr	r3, [r4, #84]	; 0x54
    4572:	181b      	adds	r3, r3, r0
    4574:	6563      	str	r3, [r4, #84]	; 0x54
    4576:	bd70      	pop	{r4, r5, r6, pc}
    4578:	89a3      	ldrh	r3, [r4, #12]
    457a:	4a02      	ldr	r2, [pc, #8]	; (4584 <__sread+0x24>)
    457c:	4013      	ands	r3, r2
    457e:	81a3      	strh	r3, [r4, #12]
    4580:	e7f9      	b.n	4576 <__sread+0x16>
    4582:	46c0      	nop			; (mov r8, r8)
    4584:	ffffefff 	.word	0xffffefff

00004588 <__swrite>:
    4588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    458a:	001f      	movs	r7, r3
    458c:	898b      	ldrh	r3, [r1, #12]
    458e:	0005      	movs	r5, r0
    4590:	000c      	movs	r4, r1
    4592:	0016      	movs	r6, r2
    4594:	05db      	lsls	r3, r3, #23
    4596:	d505      	bpl.n	45a4 <__swrite+0x1c>
    4598:	230e      	movs	r3, #14
    459a:	5ec9      	ldrsh	r1, [r1, r3]
    459c:	2200      	movs	r2, #0
    459e:	2302      	movs	r3, #2
    45a0:	f000 f940 	bl	4824 <_lseek_r>
    45a4:	89a3      	ldrh	r3, [r4, #12]
    45a6:	4a05      	ldr	r2, [pc, #20]	; (45bc <__swrite+0x34>)
    45a8:	0028      	movs	r0, r5
    45aa:	4013      	ands	r3, r2
    45ac:	81a3      	strh	r3, [r4, #12]
    45ae:	0032      	movs	r2, r6
    45b0:	230e      	movs	r3, #14
    45b2:	5ee1      	ldrsh	r1, [r4, r3]
    45b4:	003b      	movs	r3, r7
    45b6:	f000 f875 	bl	46a4 <_write_r>
    45ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    45bc:	ffffefff 	.word	0xffffefff

000045c0 <__sseek>:
    45c0:	b570      	push	{r4, r5, r6, lr}
    45c2:	000c      	movs	r4, r1
    45c4:	250e      	movs	r5, #14
    45c6:	5f49      	ldrsh	r1, [r1, r5]
    45c8:	f000 f92c 	bl	4824 <_lseek_r>
    45cc:	89a3      	ldrh	r3, [r4, #12]
    45ce:	1c42      	adds	r2, r0, #1
    45d0:	d103      	bne.n	45da <__sseek+0x1a>
    45d2:	4a05      	ldr	r2, [pc, #20]	; (45e8 <__sseek+0x28>)
    45d4:	4013      	ands	r3, r2
    45d6:	81a3      	strh	r3, [r4, #12]
    45d8:	bd70      	pop	{r4, r5, r6, pc}
    45da:	2280      	movs	r2, #128	; 0x80
    45dc:	0152      	lsls	r2, r2, #5
    45de:	4313      	orrs	r3, r2
    45e0:	81a3      	strh	r3, [r4, #12]
    45e2:	6560      	str	r0, [r4, #84]	; 0x54
    45e4:	e7f8      	b.n	45d8 <__sseek+0x18>
    45e6:	46c0      	nop			; (mov r8, r8)
    45e8:	ffffefff 	.word	0xffffefff

000045ec <__sclose>:
    45ec:	b510      	push	{r4, lr}
    45ee:	230e      	movs	r3, #14
    45f0:	5ec9      	ldrsh	r1, [r1, r3]
    45f2:	f000 f8e1 	bl	47b8 <_close_r>
    45f6:	bd10      	pop	{r4, pc}

000045f8 <__swbuf_r>:
    45f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    45fa:	0005      	movs	r5, r0
    45fc:	000e      	movs	r6, r1
    45fe:	0014      	movs	r4, r2
    4600:	2800      	cmp	r0, #0
    4602:	d004      	beq.n	460e <__swbuf_r+0x16>
    4604:	6983      	ldr	r3, [r0, #24]
    4606:	2b00      	cmp	r3, #0
    4608:	d101      	bne.n	460e <__swbuf_r+0x16>
    460a:	f7ff fbd9 	bl	3dc0 <__sinit>
    460e:	4b22      	ldr	r3, [pc, #136]	; (4698 <__swbuf_r+0xa0>)
    4610:	429c      	cmp	r4, r3
    4612:	d12d      	bne.n	4670 <__swbuf_r+0x78>
    4614:	686c      	ldr	r4, [r5, #4]
    4616:	69a3      	ldr	r3, [r4, #24]
    4618:	60a3      	str	r3, [r4, #8]
    461a:	89a3      	ldrh	r3, [r4, #12]
    461c:	071b      	lsls	r3, r3, #28
    461e:	d531      	bpl.n	4684 <__swbuf_r+0x8c>
    4620:	6923      	ldr	r3, [r4, #16]
    4622:	2b00      	cmp	r3, #0
    4624:	d02e      	beq.n	4684 <__swbuf_r+0x8c>
    4626:	6823      	ldr	r3, [r4, #0]
    4628:	6922      	ldr	r2, [r4, #16]
    462a:	b2f7      	uxtb	r7, r6
    462c:	1a98      	subs	r0, r3, r2
    462e:	6963      	ldr	r3, [r4, #20]
    4630:	b2f6      	uxtb	r6, r6
    4632:	4298      	cmp	r0, r3
    4634:	db05      	blt.n	4642 <__swbuf_r+0x4a>
    4636:	0021      	movs	r1, r4
    4638:	0028      	movs	r0, r5
    463a:	f7ff fb53 	bl	3ce4 <_fflush_r>
    463e:	2800      	cmp	r0, #0
    4640:	d126      	bne.n	4690 <__swbuf_r+0x98>
    4642:	68a3      	ldr	r3, [r4, #8]
    4644:	3001      	adds	r0, #1
    4646:	3b01      	subs	r3, #1
    4648:	60a3      	str	r3, [r4, #8]
    464a:	6823      	ldr	r3, [r4, #0]
    464c:	1c5a      	adds	r2, r3, #1
    464e:	6022      	str	r2, [r4, #0]
    4650:	701f      	strb	r7, [r3, #0]
    4652:	6963      	ldr	r3, [r4, #20]
    4654:	4298      	cmp	r0, r3
    4656:	d004      	beq.n	4662 <__swbuf_r+0x6a>
    4658:	89a3      	ldrh	r3, [r4, #12]
    465a:	07db      	lsls	r3, r3, #31
    465c:	d51a      	bpl.n	4694 <__swbuf_r+0x9c>
    465e:	2e0a      	cmp	r6, #10
    4660:	d118      	bne.n	4694 <__swbuf_r+0x9c>
    4662:	0021      	movs	r1, r4
    4664:	0028      	movs	r0, r5
    4666:	f7ff fb3d 	bl	3ce4 <_fflush_r>
    466a:	2800      	cmp	r0, #0
    466c:	d012      	beq.n	4694 <__swbuf_r+0x9c>
    466e:	e00f      	b.n	4690 <__swbuf_r+0x98>
    4670:	4b0a      	ldr	r3, [pc, #40]	; (469c <__swbuf_r+0xa4>)
    4672:	429c      	cmp	r4, r3
    4674:	d101      	bne.n	467a <__swbuf_r+0x82>
    4676:	68ac      	ldr	r4, [r5, #8]
    4678:	e7cd      	b.n	4616 <__swbuf_r+0x1e>
    467a:	4b09      	ldr	r3, [pc, #36]	; (46a0 <__swbuf_r+0xa8>)
    467c:	429c      	cmp	r4, r3
    467e:	d1ca      	bne.n	4616 <__swbuf_r+0x1e>
    4680:	68ec      	ldr	r4, [r5, #12]
    4682:	e7c8      	b.n	4616 <__swbuf_r+0x1e>
    4684:	0021      	movs	r1, r4
    4686:	0028      	movs	r0, r5
    4688:	f000 f820 	bl	46cc <__swsetup_r>
    468c:	2800      	cmp	r0, #0
    468e:	d0ca      	beq.n	4626 <__swbuf_r+0x2e>
    4690:	2601      	movs	r6, #1
    4692:	4276      	negs	r6, r6
    4694:	0030      	movs	r0, r6
    4696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4698:	00006ab8 	.word	0x00006ab8
    469c:	00006ad8 	.word	0x00006ad8
    46a0:	00006a98 	.word	0x00006a98

000046a4 <_write_r>:
    46a4:	b570      	push	{r4, r5, r6, lr}
    46a6:	0005      	movs	r5, r0
    46a8:	0008      	movs	r0, r1
    46aa:	0011      	movs	r1, r2
    46ac:	2200      	movs	r2, #0
    46ae:	4c06      	ldr	r4, [pc, #24]	; (46c8 <_write_r+0x24>)
    46b0:	6022      	str	r2, [r4, #0]
    46b2:	001a      	movs	r2, r3
    46b4:	f7fd fc5c 	bl	1f70 <_write>
    46b8:	1c43      	adds	r3, r0, #1
    46ba:	d103      	bne.n	46c4 <_write_r+0x20>
    46bc:	6823      	ldr	r3, [r4, #0]
    46be:	2b00      	cmp	r3, #0
    46c0:	d000      	beq.n	46c4 <_write_r+0x20>
    46c2:	602b      	str	r3, [r5, #0]
    46c4:	bd70      	pop	{r4, r5, r6, pc}
    46c6:	46c0      	nop			; (mov r8, r8)
    46c8:	20000ac4 	.word	0x20000ac4

000046cc <__swsetup_r>:
    46cc:	4b36      	ldr	r3, [pc, #216]	; (47a8 <__swsetup_r+0xdc>)
    46ce:	b570      	push	{r4, r5, r6, lr}
    46d0:	681d      	ldr	r5, [r3, #0]
    46d2:	0006      	movs	r6, r0
    46d4:	000c      	movs	r4, r1
    46d6:	2d00      	cmp	r5, #0
    46d8:	d005      	beq.n	46e6 <__swsetup_r+0x1a>
    46da:	69ab      	ldr	r3, [r5, #24]
    46dc:	2b00      	cmp	r3, #0
    46de:	d102      	bne.n	46e6 <__swsetup_r+0x1a>
    46e0:	0028      	movs	r0, r5
    46e2:	f7ff fb6d 	bl	3dc0 <__sinit>
    46e6:	4b31      	ldr	r3, [pc, #196]	; (47ac <__swsetup_r+0xe0>)
    46e8:	429c      	cmp	r4, r3
    46ea:	d10f      	bne.n	470c <__swsetup_r+0x40>
    46ec:	686c      	ldr	r4, [r5, #4]
    46ee:	230c      	movs	r3, #12
    46f0:	5ee2      	ldrsh	r2, [r4, r3]
    46f2:	b293      	uxth	r3, r2
    46f4:	0719      	lsls	r1, r3, #28
    46f6:	d42d      	bmi.n	4754 <__swsetup_r+0x88>
    46f8:	06d9      	lsls	r1, r3, #27
    46fa:	d411      	bmi.n	4720 <__swsetup_r+0x54>
    46fc:	2309      	movs	r3, #9
    46fe:	2001      	movs	r0, #1
    4700:	6033      	str	r3, [r6, #0]
    4702:	3337      	adds	r3, #55	; 0x37
    4704:	4313      	orrs	r3, r2
    4706:	81a3      	strh	r3, [r4, #12]
    4708:	4240      	negs	r0, r0
    470a:	bd70      	pop	{r4, r5, r6, pc}
    470c:	4b28      	ldr	r3, [pc, #160]	; (47b0 <__swsetup_r+0xe4>)
    470e:	429c      	cmp	r4, r3
    4710:	d101      	bne.n	4716 <__swsetup_r+0x4a>
    4712:	68ac      	ldr	r4, [r5, #8]
    4714:	e7eb      	b.n	46ee <__swsetup_r+0x22>
    4716:	4b27      	ldr	r3, [pc, #156]	; (47b4 <__swsetup_r+0xe8>)
    4718:	429c      	cmp	r4, r3
    471a:	d1e8      	bne.n	46ee <__swsetup_r+0x22>
    471c:	68ec      	ldr	r4, [r5, #12]
    471e:	e7e6      	b.n	46ee <__swsetup_r+0x22>
    4720:	075b      	lsls	r3, r3, #29
    4722:	d513      	bpl.n	474c <__swsetup_r+0x80>
    4724:	6b61      	ldr	r1, [r4, #52]	; 0x34
    4726:	2900      	cmp	r1, #0
    4728:	d008      	beq.n	473c <__swsetup_r+0x70>
    472a:	0023      	movs	r3, r4
    472c:	3344      	adds	r3, #68	; 0x44
    472e:	4299      	cmp	r1, r3
    4730:	d002      	beq.n	4738 <__swsetup_r+0x6c>
    4732:	0030      	movs	r0, r6
    4734:	f7ff f850 	bl	37d8 <_free_r>
    4738:	2300      	movs	r3, #0
    473a:	6363      	str	r3, [r4, #52]	; 0x34
    473c:	2224      	movs	r2, #36	; 0x24
    473e:	89a3      	ldrh	r3, [r4, #12]
    4740:	4393      	bics	r3, r2
    4742:	81a3      	strh	r3, [r4, #12]
    4744:	2300      	movs	r3, #0
    4746:	6063      	str	r3, [r4, #4]
    4748:	6923      	ldr	r3, [r4, #16]
    474a:	6023      	str	r3, [r4, #0]
    474c:	2308      	movs	r3, #8
    474e:	89a2      	ldrh	r2, [r4, #12]
    4750:	4313      	orrs	r3, r2
    4752:	81a3      	strh	r3, [r4, #12]
    4754:	6923      	ldr	r3, [r4, #16]
    4756:	2b00      	cmp	r3, #0
    4758:	d10b      	bne.n	4772 <__swsetup_r+0xa6>
    475a:	21a0      	movs	r1, #160	; 0xa0
    475c:	2280      	movs	r2, #128	; 0x80
    475e:	89a3      	ldrh	r3, [r4, #12]
    4760:	0089      	lsls	r1, r1, #2
    4762:	0092      	lsls	r2, r2, #2
    4764:	400b      	ands	r3, r1
    4766:	4293      	cmp	r3, r2
    4768:	d003      	beq.n	4772 <__swsetup_r+0xa6>
    476a:	0021      	movs	r1, r4
    476c:	0030      	movs	r0, r6
    476e:	f7ff fbe5 	bl	3f3c <__smakebuf_r>
    4772:	2301      	movs	r3, #1
    4774:	89a2      	ldrh	r2, [r4, #12]
    4776:	4013      	ands	r3, r2
    4778:	d011      	beq.n	479e <__swsetup_r+0xd2>
    477a:	2300      	movs	r3, #0
    477c:	60a3      	str	r3, [r4, #8]
    477e:	6963      	ldr	r3, [r4, #20]
    4780:	425b      	negs	r3, r3
    4782:	61a3      	str	r3, [r4, #24]
    4784:	2000      	movs	r0, #0
    4786:	6923      	ldr	r3, [r4, #16]
    4788:	4283      	cmp	r3, r0
    478a:	d1be      	bne.n	470a <__swsetup_r+0x3e>
    478c:	230c      	movs	r3, #12
    478e:	5ee2      	ldrsh	r2, [r4, r3]
    4790:	0613      	lsls	r3, r2, #24
    4792:	d5ba      	bpl.n	470a <__swsetup_r+0x3e>
    4794:	2340      	movs	r3, #64	; 0x40
    4796:	4313      	orrs	r3, r2
    4798:	81a3      	strh	r3, [r4, #12]
    479a:	3801      	subs	r0, #1
    479c:	e7b5      	b.n	470a <__swsetup_r+0x3e>
    479e:	0792      	lsls	r2, r2, #30
    47a0:	d400      	bmi.n	47a4 <__swsetup_r+0xd8>
    47a2:	6963      	ldr	r3, [r4, #20]
    47a4:	60a3      	str	r3, [r4, #8]
    47a6:	e7ed      	b.n	4784 <__swsetup_r+0xb8>
    47a8:	2000015c 	.word	0x2000015c
    47ac:	00006ab8 	.word	0x00006ab8
    47b0:	00006ad8 	.word	0x00006ad8
    47b4:	00006a98 	.word	0x00006a98

000047b8 <_close_r>:
    47b8:	2300      	movs	r3, #0
    47ba:	b570      	push	{r4, r5, r6, lr}
    47bc:	4c06      	ldr	r4, [pc, #24]	; (47d8 <_close_r+0x20>)
    47be:	0005      	movs	r5, r0
    47c0:	0008      	movs	r0, r1
    47c2:	6023      	str	r3, [r4, #0]
    47c4:	f7fd fc0e 	bl	1fe4 <_close>
    47c8:	1c43      	adds	r3, r0, #1
    47ca:	d103      	bne.n	47d4 <_close_r+0x1c>
    47cc:	6823      	ldr	r3, [r4, #0]
    47ce:	2b00      	cmp	r3, #0
    47d0:	d000      	beq.n	47d4 <_close_r+0x1c>
    47d2:	602b      	str	r3, [r5, #0]
    47d4:	bd70      	pop	{r4, r5, r6, pc}
    47d6:	46c0      	nop			; (mov r8, r8)
    47d8:	20000ac4 	.word	0x20000ac4

000047dc <_fstat_r>:
    47dc:	2300      	movs	r3, #0
    47de:	b570      	push	{r4, r5, r6, lr}
    47e0:	4c06      	ldr	r4, [pc, #24]	; (47fc <_fstat_r+0x20>)
    47e2:	0005      	movs	r5, r0
    47e4:	0008      	movs	r0, r1
    47e6:	0011      	movs	r1, r2
    47e8:	6023      	str	r3, [r4, #0]
    47ea:	f7fd fbfe 	bl	1fea <_fstat>
    47ee:	1c43      	adds	r3, r0, #1
    47f0:	d103      	bne.n	47fa <_fstat_r+0x1e>
    47f2:	6823      	ldr	r3, [r4, #0]
    47f4:	2b00      	cmp	r3, #0
    47f6:	d000      	beq.n	47fa <_fstat_r+0x1e>
    47f8:	602b      	str	r3, [r5, #0]
    47fa:	bd70      	pop	{r4, r5, r6, pc}
    47fc:	20000ac4 	.word	0x20000ac4

00004800 <_isatty_r>:
    4800:	2300      	movs	r3, #0
    4802:	b570      	push	{r4, r5, r6, lr}
    4804:	4c06      	ldr	r4, [pc, #24]	; (4820 <_isatty_r+0x20>)
    4806:	0005      	movs	r5, r0
    4808:	0008      	movs	r0, r1
    480a:	6023      	str	r3, [r4, #0]
    480c:	f7fd fbf2 	bl	1ff4 <_isatty>
    4810:	1c43      	adds	r3, r0, #1
    4812:	d103      	bne.n	481c <_isatty_r+0x1c>
    4814:	6823      	ldr	r3, [r4, #0]
    4816:	2b00      	cmp	r3, #0
    4818:	d000      	beq.n	481c <_isatty_r+0x1c>
    481a:	602b      	str	r3, [r5, #0]
    481c:	bd70      	pop	{r4, r5, r6, pc}
    481e:	46c0      	nop			; (mov r8, r8)
    4820:	20000ac4 	.word	0x20000ac4

00004824 <_lseek_r>:
    4824:	b570      	push	{r4, r5, r6, lr}
    4826:	0005      	movs	r5, r0
    4828:	0008      	movs	r0, r1
    482a:	0011      	movs	r1, r2
    482c:	2200      	movs	r2, #0
    482e:	4c06      	ldr	r4, [pc, #24]	; (4848 <_lseek_r+0x24>)
    4830:	6022      	str	r2, [r4, #0]
    4832:	001a      	movs	r2, r3
    4834:	f7fd fbe0 	bl	1ff8 <_lseek>
    4838:	1c43      	adds	r3, r0, #1
    483a:	d103      	bne.n	4844 <_lseek_r+0x20>
    483c:	6823      	ldr	r3, [r4, #0]
    483e:	2b00      	cmp	r3, #0
    4840:	d000      	beq.n	4844 <_lseek_r+0x20>
    4842:	602b      	str	r3, [r5, #0]
    4844:	bd70      	pop	{r4, r5, r6, pc}
    4846:	46c0      	nop			; (mov r8, r8)
    4848:	20000ac4 	.word	0x20000ac4

0000484c <memchr>:
    484c:	b2c9      	uxtb	r1, r1
    484e:	1882      	adds	r2, r0, r2
    4850:	4290      	cmp	r0, r2
    4852:	d101      	bne.n	4858 <memchr+0xc>
    4854:	2000      	movs	r0, #0
    4856:	4770      	bx	lr
    4858:	7803      	ldrb	r3, [r0, #0]
    485a:	428b      	cmp	r3, r1
    485c:	d0fb      	beq.n	4856 <memchr+0xa>
    485e:	3001      	adds	r0, #1
    4860:	e7f6      	b.n	4850 <memchr+0x4>
	...

00004864 <_read_r>:
    4864:	b570      	push	{r4, r5, r6, lr}
    4866:	0005      	movs	r5, r0
    4868:	0008      	movs	r0, r1
    486a:	0011      	movs	r1, r2
    486c:	2200      	movs	r2, #0
    486e:	4c06      	ldr	r4, [pc, #24]	; (4888 <_read_r+0x24>)
    4870:	6022      	str	r2, [r4, #0]
    4872:	001a      	movs	r2, r3
    4874:	f7fd fb5a 	bl	1f2c <_read>
    4878:	1c43      	adds	r3, r0, #1
    487a:	d103      	bne.n	4884 <_read_r+0x20>
    487c:	6823      	ldr	r3, [r4, #0]
    487e:	2b00      	cmp	r3, #0
    4880:	d000      	beq.n	4884 <_read_r+0x20>
    4882:	602b      	str	r3, [r5, #0]
    4884:	bd70      	pop	{r4, r5, r6, pc}
    4886:	46c0      	nop			; (mov r8, r8)
    4888:	20000ac4 	.word	0x20000ac4
    488c:	000a000a 	.word	0x000a000a
    4890:	00140014 	.word	0x00140014
    4894:	00000014 	.word	0x00000014
    4898:	000a017c 	.word	0x000a017c
    489c:	000a017c 	.word	0x000a017c
    48a0:	00140186 	.word	0x00140186
    48a4:	00140000 	.word	0x00140000
    48a8:	0122000a 	.word	0x0122000a
    48ac:	00140186 	.word	0x00140186
    48b0:	01220190 	.word	0x01220190
    48b4:	0122000a 	.word	0x0122000a
    48b8:	012c0014 	.word	0x012c0014
    48bc:	0122017c 	.word	0x0122017c
    48c0:	012c0186 	.word	0x012c0186
    48c4:	012c0014 	.word	0x012c0014
    48c8:	0136017c 	.word	0x0136017c
    48cc:	001e0000 	.word	0x001e0000
    48d0:	00280032 	.word	0x00280032
    48d4:	00320000 	.word	0x00320000
    48d8:	003c0032 	.word	0x003c0032
    48dc:	001e0050 	.word	0x001e0050
    48e0:	00280118 	.word	0x00280118
    48e4:	00280046 	.word	0x00280046
    48e8:	00be0050 	.word	0x00be0050
    48ec:	00be0050 	.word	0x00be0050
    48f0:	00c80118 	.word	0x00c80118
    48f4:	00280118 	.word	0x00280118
    48f8:	00be0122 	.word	0x00be0122
    48fc:	00460000 	.word	0x00460000
    4900:	00500032 	.word	0x00500032
    4904:	005a0000 	.word	0x005a0000
    4908:	00640032 	.word	0x00640032
    490c:	006e0000 	.word	0x006e0000
    4910:	00780032 	.word	0x00780032
    4914:	00820000 	.word	0x00820000
    4918:	008c0032 	.word	0x008c0032
    491c:	00960000 	.word	0x00960000
    4920:	00a00032 	.word	0x00a00032
    4924:	00aa0000 	.word	0x00aa0000
    4928:	00b40032 	.word	0x00b40032
    492c:	00be0000 	.word	0x00be0000
    4930:	00c80032 	.word	0x00c80032
    4934:	00c8012c 	.word	0x00c8012c
    4938:	00d20172 	.word	0x00d20172
    493c:	00dc001e 	.word	0x00dc001e
    4940:	00e60172 	.word	0x00e60172
    4944:	00f0001e 	.word	0x00f0001e
    4948:	00fa0172 	.word	0x00fa0172
    494c:	0104001e 	.word	0x0104001e
    4950:	010e0172 	.word	0x010e0172
    4954:	0118005a 	.word	0x0118005a
    4958:	0122012c 	.word	0x0122012c
    495c:	82be50b4 	.word	0x82be50b4
    4960:	8cbe82aa 	.word	0x8cbe82aa
    4964:	64963c8c 	.word	0x64963c8c
    4968:	64dc3cd2 	.word	0x64dc3cd2
    496c:	a08c9682 	.word	0xa08c9682
    4970:	aadca08c 	.word	0xaadca08c
    4974:	a0e696dc 	.word	0xa0e696dc
    4978:	50f03c78 	.word	0x50f03c78
    497c:	5a78466e 	.word	0x5a78466e
    4980:	aaaa3c96 	.word	0xaaaa3c96
    4984:	a0dc3cc8 	.word	0xa0dc3cc8
    4988:	aae6a0d2 	.word	0xaae6a0d2
    498c:	6e617254 	.word	0x6e617254
    4990:	69722073 	.word	0x69722073
    4994:	73746867 	.word	0x73746867
    4998:	65726120 	.word	0x65726120
    499c:	6d756820 	.word	0x6d756820
    49a0:	72206e61 	.word	0x72206e61
    49a4:	74686769 	.word	0x74686769
    49a8:	00000073 	.word	0x00000073
    49ac:	355e3331 	.word	0x355e3331
    49b0:	31202b20 	.word	0x31202b20
    49b4:	20355e36 	.word	0x20355e36
    49b8:	3731203d 	.word	0x3731203d
    49bc:	0000355e 	.word	0x0000355e
    49c0:	69746552 	.word	0x69746552
    49c4:	616c7563 	.word	0x616c7563
    49c8:	676e6974 	.word	0x676e6974
    49cc:	6c705320 	.word	0x6c705320
    49d0:	73656e69 	.word	0x73656e69
    49d4:	00000000 	.word	0x00000000
    49d8:	6c6f6976 	.word	0x6c6f6976
    49dc:	65636e65 	.word	0x65636e65
    49e0:	726f772e 	.word	0x726f772e
    49e4:	0000736b 	.word	0x0000736b
    49e8:	73626154 	.word	0x73626154
    49ec:	00000021 	.word	0x00000021
    49f0:	6c6c694b 	.word	0x6c6c694b
    49f4:	6c694220 	.word	0x6c694220
    49f8:	6e6f696c 	.word	0x6e6f696c
    49fc:	65726961 	.word	0x65726961
    4a00:	61282073 	.word	0x61282073
    4a04:	5420646e 	.word	0x5420646e
    4a08:	6c6c6972 	.word	0x6c6c6972
    4a0c:	616e6f69 	.word	0x616e6f69
    4a10:	29657269 	.word	0x29657269
    4a14:	00000000 	.word	0x00000000
    4a18:	65746e49 	.word	0x65746e49
    4a1c:	74736572 	.word	0x74736572
    4a20:	206e6920 	.word	0x206e6920
    4a24:	68636574 	.word	0x68636574
    4a28:	6f6c6f6e 	.word	0x6f6c6f6e
    4a2c:	69207967 	.word	0x69207967
    4a30:	6f6e2073 	.word	0x6f6e2073
    4a34:	20612074 	.word	0x20612074
    4a38:	73726570 	.word	0x73726570
    4a3c:	6c616e6f 	.word	0x6c616e6f
    4a40:	00797469 	.word	0x00797469
    4a44:	50203031 	.word	0x50203031
    4a48:	544e4952 	.word	0x544e4952
    4a4c:	52484320 	.word	0x52484320
    4a50:	30322824 	.word	0x30322824
    4a54:	2b352e35 	.word	0x2b352e35
    4a58:	28444e52 	.word	0x28444e52
    4a5c:	3b292931 	.word	0x3b292931
    4a60:	47203a20 	.word	0x47203a20
    4a64:	204f544f 	.word	0x204f544f
    4a68:	00003031 	.word	0x00003031
    4a6c:	67206f4e 	.word	0x67206f4e
    4a70:	2e73646f 	.word	0x2e73646f
    4a74:	206f4e20 	.word	0x206f4e20
    4a78:	7473616d 	.word	0x7473616d
    4a7c:	2e737265 	.word	0x2e737265
    4a80:	206f4e20 	.word	0x206f4e20
    4a84:	65747865 	.word	0x65747865
    4a88:	6c616e72 	.word	0x6c616e72
    4a8c:	62696c20 	.word	0x62696c20
    4a90:	69726172 	.word	0x69726172
    4a94:	002e7365 	.word	0x002e7365
    4a98:	6c6c694b 	.word	0x6c6c694b
    4a9c:	7a614e20 	.word	0x7a614e20
    4aa0:	00007369 	.word	0x00007369
    4aa4:	6e616954 	.word	0x6e616954
    4aa8:	656d6e61 	.word	0x656d6e61
    4aac:	7153206e 	.word	0x7153206e
    4ab0:	65726175 	.word	0x65726175
    4ab4:	38393120 	.word	0x38393120
    4ab8:	00000039 	.word	0x00000039
    4abc:	72656d41 	.word	0x72656d41
    4ac0:	20616369 	.word	0x20616369
    4ac4:	20736177 	.word	0x20736177
    4ac8:	6e756f66 	.word	0x6e756f66
    4acc:	20646564 	.word	0x20646564
    4ad0:	73206e6f 	.word	0x73206e6f
    4ad4:	6576616c 	.word	0x6576616c
    4ad8:	00007972 	.word	0x00007972
    4adc:	72656854 	.word	0x72656854
    4ae0:	73692065 	.word	0x73692065
    4ae4:	6c6e6f20 	.word	0x6c6e6f20
    4ae8:	61632079 	.word	0x61632079
    4aec:	61746970 	.word	0x61746970
    4af0:	6e61206c 	.word	0x6e61206c
    4af4:	616c2064 	.word	0x616c2064
    4af8:	00726f62 	.word	0x00726f62
    4afc:	6f636e45 	.word	0x6f636e45
    4b00:	67617275 	.word	0x67617275
    4b04:	735f2065 	.word	0x735f2065
    4b08:	656d6d79 	.word	0x656d6d79
    4b0c:	63697274 	.word	0x63697274
    4b10:	6c63205f 	.word	0x6c63205f
    4b14:	20737361 	.word	0x20737361
    4b18:	66726177 	.word	0x66726177
    4b1c:	00657261 	.word	0x00657261
    4b20:	52554324 	.word	0x52554324
    4b24:	544e4552 	.word	0x544e4552
    4b28:	4d454d5f 	.word	0x4d454d5f
    4b2c:	00000045 	.word	0x00000045
    4b30:	694e2041 	.word	0x694e2041
    4b34:	54206563 	.word	0x54206563
    4b38:	00005954 	.word	0x00005954
    4b3c:	78696e55 	.word	0x78696e55
    4b40:	6f706520 	.word	0x6f706520
    4b44:	6d206863 	.word	0x6d206863
    4b48:	73756e69 	.word	0x73756e69
    4b4c:	46783020 	.word	0x46783020
    4b50:	61642046 	.word	0x61642046
    4b54:	00007379 	.word	0x00007379
    4b58:	3d202069 	.word	0x3d202069
    4b5c:	35783020 	.word	0x35783020
    4b60:	35373366 	.word	0x35373366
    4b64:	20666439 	.word	0x20666439
    4b68:	2028202d 	.word	0x2028202d
    4b6c:	3e3e2069 	.word	0x3e3e2069
    4b70:	29203120 	.word	0x29203120
    4b74:	0000003b 	.word	0x0000003b
    4b78:	42414341 	.word	0x42414341
    4b7c:	00000000 	.word	0x00000000
    4b80:	63666544 	.word	0x63666544
    4b84:	73276e6f 	.word	0x73276e6f
    4b88:	6e616320 	.word	0x6e616320
    4b8c:	656c6563 	.word	0x656c6563
    4b90:	00002e64 	.word	0x00002e64
    4b94:	73746152 	.word	0x73746152
    4b98:	7473656e 	.word	0x7473656e
    4b9c:	6f4e203a 	.word	0x6f4e203a
    4ba0:	6e696874 	.word	0x6e696874
    4ba4:	6f542067 	.word	0x6f542067
    4ba8:	216f4420 	.word	0x216f4420
    4bac:	00000000 	.word	0x00000000
    4bb0:	68207449 	.word	0x68207449
    4bb4:	36207361 	.word	0x36207361
    4bb8:	656b2039 	.word	0x656b2039
    4bbc:	002e7379 	.word	0x002e7379
    4bc0:	61636542 	.word	0x61636542
    4bc4:	20657375 	.word	0x20657375
    4bc8:	342d5456 	.word	0x342d5456
    4bcc:	77203032 	.word	0x77203032
    4bd0:	61207361 	.word	0x61207361
    4bd4:	6165726c 	.word	0x6165726c
    4bd8:	74207964 	.word	0x74207964
    4bdc:	6e656b61 	.word	0x6e656b61
    4be0:	00000000 	.word	0x00000000
    4be4:	706d6f43 	.word	0x706d6f43
    4be8:	73736572 	.word	0x73736572
    4bec:	206e6f69 	.word	0x206e6f69
    4bf0:	6f676c61 	.word	0x6f676c61
    4bf4:	68746972 	.word	0x68746972
    4bf8:	6162206d 	.word	0x6162206d
    4bfc:	20646573 	.word	0x20646573
    4c00:	42206e6f 	.word	0x42206e6f
    4c04:	28205042 	.word	0x28205042
    4c08:	37393931 	.word	0x37393931
    4c0c:	00000029 	.word	0x00000029
    4c10:	63616554 	.word	0x63616554
    4c14:	65682068 	.word	0x65682068
    4c18:	68746c61 	.word	0x68746c61
    4c1c:	736e6920 	.word	0x736e6920
    4c20:	6e617275 	.word	0x6e617275
    4c24:	70206563 	.word	0x70206563
    4c28:	69766f72 	.word	0x69766f72
    4c2c:	73726564 	.word	0x73726564
    4c30:	206f7420 	.word	0x206f7420
    4c34:	65646f63 	.word	0x65646f63
    4c38:	0000002e 	.word	0x0000002e
    4c3c:	6566664f 	.word	0x6566664f
    4c40:	7669736e 	.word	0x7669736e
    4c44:	61682065 	.word	0x61682065
    4c48:	61776472 	.word	0x61776472
    4c4c:	00006572 	.word	0x00006572
    4c50:	69466957 	.word	0x69466957
    4c54:	20736920 	.word	0x20736920
    4c58:	20746f6e 	.word	0x20746f6e
    4c5c:	65726977 	.word	0x65726977
    4c60:	7373656c 	.word	0x7373656c
    4c64:	68744520 	.word	0x68744520
    4c68:	656e7265 	.word	0x656e7265
    4c6c:	00002174 	.word	0x00002174
    4c70:	6d6d7544 	.word	0x6d6d7544
    4c74:	68742079 	.word	0x68742079
    4c78:	20636369 	.word	0x20636369
    4c7c:	65696c63 	.word	0x65696c63
    4c80:	0000746e 	.word	0x0000746e
    4c84:	694e2041 	.word	0x694e2041
    4c88:	54206563 	.word	0x54206563
    4c8c:	202e5954 	.word	0x202e5954
    4c90:	4f206e41 	.word	0x4f206e41
    4c94:	6f43204b 	.word	0x6f43204b
    4c98:	7475706d 	.word	0x7475706d
    4c9c:	002e7265 	.word	0x002e7265
    4ca0:	69636543 	.word	0x69636543
    4ca4:	65276e20 	.word	0x65276e20
    4ca8:	70207473 	.word	0x70207473
    4cac:	75207361 	.word	0x75207361
    4cb0:	4320656e 	.word	0x4320656e
    4cb4:	72656279 	.word	0x72656279
    4cb8:	6b636564 	.word	0x6b636564
    4cbc:	65622820 	.word	0x65622820
    4cc0:	73756163 	.word	0x73756163
    4cc4:	74692065 	.word	0x74692065
    4cc8:	6e207327 	.word	0x6e207327
    4ccc:	6120746f 	.word	0x6120746f
    4cd0:	6c655020 	.word	0x6c655020
    4cd4:	6e616369 	.word	0x6e616369
    4cd8:	73614320 	.word	0x73614320
    4cdc:	00002965 	.word	0x00002965
    4ce0:	696c6f53 	.word	0x696c6f53
    4ce4:	69726164 	.word	0x69726164
    4ce8:	69207974 	.word	0x69207974
    4cec:	6f6e2073 	.word	0x6f6e2073
    4cf0:	20612074 	.word	0x20612074
    4cf4:	2077656e 	.word	0x2077656e
    4cf8:	6d617266 	.word	0x6d617266
    4cfc:	726f7765 	.word	0x726f7765
    4d00:	0000006b 	.word	0x0000006b
    4d04:	61657242 	.word	0x61657242
    4d08:	616f6264 	.word	0x616f6264
    4d0c:	6e696472 	.word	0x6e696472
    4d10:	73492067 	.word	0x73492067
    4d14:	746f4e20 	.word	0x746f4e20
    4d18:	43204120 	.word	0x43204120
    4d1c:	656d6972 	.word	0x656d6972
    4d20:	00000000 	.word	0x00000000
    4d24:	2066664f 	.word	0x2066664f
    4d28:	6f207962 	.word	0x6f207962
    4d2c:	6520656e 	.word	0x6520656e
    4d30:	726f7272 	.word	0x726f7272
    4d34:	72612073 	.word	0x72612073
    4d38:	6f632065 	.word	0x6f632065
    4d3c:	6e6f6d6d 	.word	0x6e6f6d6d
    4d40:	00000000 	.word	0x00000000
    4d44:	00000936 	.word	0x00000936
    4d48:	00000b82 	.word	0x00000b82
    4d4c:	00000b82 	.word	0x00000b82
    4d50:	00000b82 	.word	0x00000b82
    4d54:	00000b82 	.word	0x00000b82
    4d58:	00000b82 	.word	0x00000b82
    4d5c:	00000b82 	.word	0x00000b82
    4d60:	00000b82 	.word	0x00000b82
    4d64:	00000b82 	.word	0x00000b82
    4d68:	00000b82 	.word	0x00000b82
    4d6c:	00000b82 	.word	0x00000b82
    4d70:	00000b82 	.word	0x00000b82
    4d74:	00000b82 	.word	0x00000b82
    4d78:	00000b82 	.word	0x00000b82
    4d7c:	00000b82 	.word	0x00000b82
    4d80:	00000b82 	.word	0x00000b82
    4d84:	0000091e 	.word	0x0000091e
    4d88:	00000b82 	.word	0x00000b82
    4d8c:	00000b82 	.word	0x00000b82
    4d90:	00000b82 	.word	0x00000b82
    4d94:	00000b82 	.word	0x00000b82
    4d98:	00000b82 	.word	0x00000b82
    4d9c:	00000b82 	.word	0x00000b82
    4da0:	00000b82 	.word	0x00000b82
    4da4:	00000b82 	.word	0x00000b82
    4da8:	00000b82 	.word	0x00000b82
    4dac:	00000b82 	.word	0x00000b82
    4db0:	00000b82 	.word	0x00000b82
    4db4:	00000b82 	.word	0x00000b82
    4db8:	00000b82 	.word	0x00000b82
    4dbc:	00000b82 	.word	0x00000b82
    4dc0:	00000b82 	.word	0x00000b82
    4dc4:	0000092e 	.word	0x0000092e
    4dc8:	00000b82 	.word	0x00000b82
    4dcc:	00000b82 	.word	0x00000b82
    4dd0:	00000b82 	.word	0x00000b82
    4dd4:	00000b82 	.word	0x00000b82
    4dd8:	00000b82 	.word	0x00000b82
    4ddc:	00000b82 	.word	0x00000b82
    4de0:	00000b82 	.word	0x00000b82
    4de4:	00000b82 	.word	0x00000b82
    4de8:	00000b82 	.word	0x00000b82
    4dec:	00000b82 	.word	0x00000b82
    4df0:	00000b82 	.word	0x00000b82
    4df4:	00000b82 	.word	0x00000b82
    4df8:	00000b82 	.word	0x00000b82
    4dfc:	00000b82 	.word	0x00000b82
    4e00:	00000b82 	.word	0x00000b82
    4e04:	00000926 	.word	0x00000926
    4e08:	0000093e 	.word	0x0000093e
    4e0c:	00000906 	.word	0x00000906
    4e10:	00000916 	.word	0x00000916
    4e14:	0000090e 	.word	0x0000090e
    4e18:	00000002 	.word	0x00000002
    4e1c:	00000003 	.word	0x00000003
    4e20:	00000028 	.word	0x00000028
    4e24:	00000029 	.word	0x00000029
    4e28:	00000004 	.word	0x00000004
    4e2c:	00000005 	.word	0x00000005
    4e30:	00000006 	.word	0x00000006
    4e34:	00000007 	.word	0x00000007
    4e38:	00000020 	.word	0x00000020
    4e3c:	00000021 	.word	0x00000021
    4e40:	00000022 	.word	0x00000022
    4e44:	00000023 	.word	0x00000023
    4e48:	00000024 	.word	0x00000024
    4e4c:	00000025 	.word	0x00000025
    4e50:	00000026 	.word	0x00000026
    4e54:	00000027 	.word	0x00000027
    4e58:	00000008 	.word	0x00000008
    4e5c:	00000009 	.word	0x00000009
    4e60:	0000000a 	.word	0x0000000a
    4e64:	0000000b 	.word	0x0000000b
    4e68:	42000800 	.word	0x42000800
    4e6c:	42000c00 	.word	0x42000c00
    4e70:	42001000 	.word	0x42001000
    4e74:	42001400 	.word	0x42001400
    4e78:	42001800 	.word	0x42001800
    4e7c:	42001c00 	.word	0x42001c00
    4e80:	000016ba 	.word	0x000016ba
    4e84:	000016b6 	.word	0x000016b6
    4e88:	000016b6 	.word	0x000016b6
    4e8c:	0000171c 	.word	0x0000171c
    4e90:	0000171c 	.word	0x0000171c
    4e94:	000016ce 	.word	0x000016ce
    4e98:	000016c0 	.word	0x000016c0
    4e9c:	000016d4 	.word	0x000016d4
    4ea0:	0000170a 	.word	0x0000170a
    4ea4:	000018dc 	.word	0x000018dc
    4ea8:	000018bc 	.word	0x000018bc
    4eac:	000018bc 	.word	0x000018bc
    4eb0:	00001948 	.word	0x00001948
    4eb4:	000018ce 	.word	0x000018ce
    4eb8:	000018ea 	.word	0x000018ea
    4ebc:	000018c0 	.word	0x000018c0
    4ec0:	000018f8 	.word	0x000018f8
    4ec4:	00001938 	.word	0x00001938

00004ec8 <CodePage437>:
	...
    5200:	01000000 06186080 18608001 60800106     .....`....`....`
    5210:	80010000 00000060 00000000 66986106     ....`........a.f
    5220:	98618619 00000000 00000000 00000000     ..a.............
    5230:	00000000 98610600 fb8f1966 8f1966fe     ......a.f....f..
    5240:	1966fefb 00986186 00000000 80010000     ..f..a..........
    5250:	891f7e60 1f7e6082 7e649081 6080811f     `~...`~...d~...`
    5260:	00000000 04000000 29a60823 1820c106     ........#..).. .
    5270:	98200304 324c1165 00000008 00000000     .. .e.L2........
    5280:	84e08107 10420821 5a081e78 87208216     ....!.B.x..Z.. .
    5290:	0000f6d9 00000000 30c00000 00030618     ...........0....
    52a0:	000000c0 00000000 00000000 00000000     ................
    52b0:	40000000 03020810 0c30c000 08c00003     ...@......0.....
    52c0:	10400002 00000000 01000000 02084000     ..@..........@..
    52d0:	06186000 18608001 00010208 00000040     .`....`.....@...
    52e0:	00000000 42000000 90408210 40c23fff     .......B..@..?.@
    52f0:	80104290 00000000 00000000 00000000     .B..............
    5300:	80000208 e0bfff20 02082080 00000000     .... .... ......
	...
    5320:	18000000 c0000306 00001040 00000000     ........@.......
    5330:	00000000 ff000000 0000e0bf 00000000     ................
	...
    5354:	030e3800 0000e080 00000000 08200000     .8............ .
    5364:	80000104 02041020 10408000 00000208     .... .....@.....
    5374:	00000000 e0030000 cc1863f8 b0c1061b     .........c......
    5384:	63061b6c f8e0c318 00000000 00000000     l..c............
    5394:	1b3c70c0 0c30c004 30c00003 e107030c     .p<...0....0....
    53a4:	000000f8 00000000 c1f8e107 061860b0     .............`..
    53b4:	0187030e 0f30c0c0 0000fefb 00000000     ......0.........
    53c4:	fefb0f00 60c00003 80030e30 b0810618     .......`0.......
    53d4:	00f8e167 00000000 40000000 03070c30     g..........@0...
    53e4:	31649040 04fefb0f 10400001 00000000     @.d1......@.....
    53f4:	0f000000 30c0fefb c1f8e30f 061860b0     .......0.....`..
    5404:	e167a081 000000f8 00000000 60f8e003     ..g............`
    5414:	00030c18 1b8c3ffe 67b0c106 0000f8e1     .....?.....g....
    5424:	00000000 fefb0f00 20608001 00010408     ..........` ....
    5434:	0c302080 00c00003 00000000 e0030000     . 0.............
    5444:	6cb0c1f8 0f3e061b c1061b8c f8e063b0     ...l..>......c..
    5454:	00000000 07000000 b0c1f8e1 7d0e3b6c     ............l;.}
    5464:	0618609f e1c70003 000000f0 00000000     .`..............
    5474:	38000000 e080030e 00000000 030e3800     ...8.........8..
    5484:	0000e080 00000000 00000000 80030e38     ............8...
    5494:	000000e0 0e380000 40c00003 00000010     ......8....@....
    54a4:	30000000 03030c0c 30c0c000 0cc00003     ...0.......0....
    54b4:	0c300003 00000000 00000000 00000000     ..0.............
    54c4:	00fefb0f fefb0f00 00000000 00000000     ................
    54d4:	00000000 3000030c 30c0000c c0c00003     .......0...0....
    54e4:	0c0c3030 00000003 00000000 f8e10700     00..............
    54f4:	6060b0c1 01061818 00006080 00608001     ..``.....`....`.
    5504:	00000000 e1070000 6cb0c1f8 b4d33edb     ...........l.>..
    5514:	c036fbec f8e10730 00000000 00000000     ..6.0...........
    5524:	0d367080 c18c3186 fefb6fb0 1b6cb0c1     .p6..1...o....l.
    5534:	00000006 00000000 61f8e30f 86196698     ...........a.f..
    5544:	19861f7e 6f986186 0000f8e3 00000000     ~....a.o........
    5554:	f8e00300 036c9861 0c30c000 98610003     ....a.l...0...a.
    5564:	00f8e063 00000000 c30f0000 861966f0     c............f..
    5574:	98618631 668c1966 f0c38f19 00000000     1.a.f..f........
    5584:	0f000000 30c0fefb fc00030c 00030c3f     .......0....?...
    5594:	fb0f30c0 000000fe 00000000 c0fefb0f     .0..............
    55a4:	00030c30 030c3ffc 0c30c000 00000003     0....?....0.....
    55b4:	00000000 f8e00300 036c9861 0c30c000     ........a.l...0.
    55c4:	98611e7b 00f8e063 00000000 1b0c0000     {.a.c...........
    55d4:	6cb0c106 bfff061b c1061bec 061b6cb0     ...l.........l..
    55e4:	00000000 07000000 0618f8e1 18608001     ..............`.
    55f4:	60800106 e1070618 000000f8 00000000     ...`............
    5604:	067ef801 18608001 60800106 8731c618     ..~...`....`..1.
    5614:	0000f0c1 00000000 061b0c00 838d31c6     .............1..
    5624:	0d38e060 31c66083 00061b8c 00000000     `.8..`.1........
    5634:	030c0000 0c30c000 30c00003 c000030c     ......0....0....
    5644:	fefb0f30 00000000 0c000000 bde38e1b     0...............
    5654:	c976dbed 061b6cb2 1b6cb0c1 00000006     ..v..l....l.....
    5664:	00000000 e1861b0c 661b6dbc 5b6cb3c9     .........m.f..l[
    5674:	ecb0c31e 0000061b 00000000 f8e00300     ................
    5684:	1b6cb0e3 6cb0c106 b8c1061b 00f8e0e3     ..l....l........
    5694:	00000000 e30f0000 6cb0c1f8 3ffe061b     ...........l...?
    56a4:	c000038c 00030c30 00000000 07000000     ....0...........
    56b4:	b0c1f8e1 c1061b6c 36db6cb0 d98731c6     ....l....l.6.1..
    56c4:	000000f6 00000000 c1f8e30f 061b6cb0     .............l..
    56d4:	638c3ffe cc30c318 0000061b 00000000     .?.c..0.........
    56e4:	f8e10700 036cb0c1 801f7e00 b0c10618     ......l..~......
    56f4:	00f8e167 00000000 fb0f0000 000208fe     g...............
    5704:	02082080 08208000 20800002 00000000     . .... .... ....
    5714:	0c000000 b0c1061b c1061b6c 061b6cb0     ........l....l..
    5724:	e063b0c1 000000f8 00000000 c1061b0c     ..c.............
    5734:	8c3166b0 60c31863 810d36d8 000020c0     .f1.c..`.6... ..
    5744:	00000000 061b0c00 1b6cb0c1 6db2c906     ..........l....m
    5754:	b5d576db 008c796f 00000000 1b0c0000     .v..oy..........
    5764:	c3186306 060cf860 63d8e003 061bcc18     .c..`......c....
    5774:	00000000 0c000000 1863061b 1cd860c3     ..........c..`..
    5784:	20c00107 80000208 00000020 00000000     ... .... .......
    5794:	03fefb0f 1060c000 0103060c 0f30c0c0     ......`.......0.
    57a4:	0000fefb 00000000 f8e00300 00030c30     ............0...
    57b4:	030c30c0 0c30c000 00f8e003 00000000     .0....0.........
    57c4:	01060000 010c3080 030c6080 03186000     .....0...`...`..
    57d4:	0618c000 00000000 07000000 030cf0c1     ................
    57e4:	0c30c000 30c00003 c107030c 000000f0     ..0....0........
    57f4:	00000000 36708000 8c31860d 0060b0c1     ......p6..1...`.
	...
    5820:	00fefb0f 00000000 80030000 00030ce0     ................
    5830:	00001860 00000000 00000000 00000000     `...............
	...
    5848:	01fcf003 fef86380 f823b0c0 000000fe     .....c....#.....
    5858:	00000000 c000030c fcf30d30 0b6cb8e1     ........0.....l.
    5868:	6fb8e102 00007cf3 00000000 00000000     ...o.|..........
    5878:	e1070000 6cb0c1f8 30c00003 00fef907     .......l...0....
    5888:	00000000 18000000 67800106 b0c3f6d9     ...........g....
    5898:	c3061bec f6d9e7b0 00000000 00000000     ................
    58a8:	00000000 c1f8e107 fefb6fb0 f10730c0     .........o...0..
    58b8:	000000fc 00000000 3138e000 c000638c     ..........81.c..
    58c8:	00033ffc 030c30c0 0000c000 00000000     .?...0..........
    58d8:	00000000 d9070000 8731c6f6 30c0f0c1     ..........1....0
    58e8:	c3f8e107 f8e1e7b0 030c0000 0d30c000     ..............0.
    58f8:	b8e178e3 c1061b6c 061b6cb0 00000000     .x..l....l......
    5908:	01000000 00006080 18e08003 60800106     .....`.........`
    5918:	e1070618 000000f8 00000000 00186000     .............`..
    5928:	18600000 60800106 8c010618 31c61863     ..`....`....c..1
    5938:	00f0c187 00030c00 638c30c0 0f36cc30     .........0.c0.6.
    5948:	33ccc083 000c330c 00000000 c0030000     ...3.3..........
    5958:	00030cf0 030c30c0 0c30c000 f8e00303     .....0....0.....
	...
    5974:	e70c330c 669b6dbf 1b6cb0c1 00000006     .3...m.f..l.....
	...
    598c:	f8e20b00 1b6cb8e1 6cb0c106 0000061b     ......l....l....
	...
    59a4:	e1070000 cc30c3f8 30c30c33 00f8e1c7     ......0.3..0....
	...
    59bc:	0b000000 b0c1f8e2 be061b6c 0002882f     ........l.../...
    59cc:	02082080 00000000 00000000 c1fae803     . ..............
    59dc:	061b6cb0 08a08f3e 20800002 00000208     .l..>...... ....
    59ec:	00000000 7ce20800 036cbcf1 0c30c000     .......|..l...0.
    59fc:	00000003 00000000 00000000 e1070000     ................
    5a0c:	0730c0f8 8001f8e1 00f8e36f 00000000     ..0.....o.......
    5a1c:	00030000 0f0c30c0 0c30f8e3 33c00003     .....0....0....3
    5a2c:	30c0c00c 00000000 00000000 00000000     ...0............
    5a3c:	c30c330c 0c33cc30 d9c730c3 000000f6     .3..0.3..0......
	...
    5a54:	02020000 30e6b8c1 01073ed8 000020c0     .......0.>... ..
	...
    5a6c:	1b0c0000 6cb0c106 b5d5769b 008c3166     .......l.v..f1..
	...
    5a84:	08000000 1b441823 6ce08003 08620c11     ....#.D....l..b.
	...
    5aa0:	c618630c 18638c31 60801f7e 873bc618     .c..1.c.~..`..;.
    5ab0:	0000f0c1 00000000 fefb0f00 c0c00003     ................
    5ac0:	0f0c3030 0000fefb 00000000 1e780000     00............x.
    5ad0:	40000208 000e3810 02081040 001e7800     ...@.8..@....x..
    5ae0:	00000000 80010000 01061860 06186080     ........`....`..
    5af0:	18608001 60800106 00000000 0f000000     ..`....`........
    5b00:	0208c003 0cc00003 c0000303 030f0208     ................
    5b10:	000000c0 00000000 d9c61907 1c736cb3     .............ls.
	...
    5b48:	e0030000 6c9861f8 30c00003 6100030c     .....a.l...0...a
    5b58:	f8e06398 00000608 00000000 00669801     .c............f.
    5b68:	c30c330c 0c33cc30 d9c730c3 000000f6     .3..0.3..0......
    5b78:	00000000 0c180000 f8e10700 fb6fb0c1     ..............o.
    5b88:	0730c0fe 0000fcf1 00000000 10000000     ..0.............
    5b98:	f003000a 638001fc b0c0fef8 00fef823     .......c....#...
	...
    5bb0:	030033cc 8001fcf0 c0fef863 fef823b0     .3......c....#..
	...
    5bc8:	000c6000 01fcf003 fef86380 f823b0c0     .`.......c....#.
    5bd8:	000000fe 03000000 0c482001 fcf00300     ......... H.....
    5be8:	f8638001 23b0c0fe 0000fef8 00000000     ..c....#........
    5bf8:	00000000 e1070000 6cb0c1f8 30c00003     ...........l...0
    5c08:	04fef907 00000003 00000000 07001420     ............ ...
    5c18:	b0c1f8e1 c0fefb6f fcf10730 00000000     ....o...0.......
    5c28:	00000000 00669801 c1f8e107 fefb6fb0     ......f......o..
    5c38:	f10730c0 000000fc 00000000 18c00000     .0..............
    5c48:	f8e10700 fb6fb0c1 0730c0fe 0000fcf1     ......o...0.....
    5c58:	00000000 98610600 80030000 010618e0     ......a.........
    5c68:	06186080 00f8e107 00000000 00000000     .`..............
    5c78:	03002840 0618e080 18608001 f8e10706     @(........`.....
	...
    5c90:	0018c000 18e08003 60800106 e1070618     ...........`....
    5ca0:	000000f8 18630000 367080c0 8c31860d     ......c...p6..1.
    5cb0:	fb6fb0c1 6cb0c1fe 0000061b 1c000000     ..o....l........
    5cc0:	70c08108 31860d36 6fb0c18c b0c1fefb     ...p6..1...o....
    5cd0:	00061b6c 00000000 fb0f0606 0c30c0fe     l.............0.
    5ce0:	3ffc0003 c000030c fefb0f30 00000000     ...?....0.......
	...
    5cf8:	1dfe7907 fedb2786 f90733cc 000000ee     .y...'...3......
    5d08:	00000000 367ef800 9861860d e3efb1c7     ......~6..a.....
    5d18:	8c31c6f8 00001e7b 00000000 20000000     ..1.{.......... 
    5d28:	e1070014 cc30c3f8 30c30c33 00f8e1c7     ......0.3..0....
    5d38:	00000000 01000000 07006698 30c3f8e1     .........f.....0
    5d48:	c30c33cc f8e1c730 00000000 00000000     .3..0...........
    5d58:	0018c000 c3f8e107 0c33cc30 e1c730c3     ........0.3..0..
    5d68:	000000f8 00000000 14200000 0c330c00     .......... ...3.
    5d78:	33cc30c3 c730c30c 0000f6d9 00000000     .0.3..0.........
    5d88:	60000000 330c000c cc30c30c 30c30c33     ...`...3..0.3..0
    5d98:	00f6d9c7 00000000 01000000 0c006698     .............f..
    5da8:	31c61863 7e18638c 1860801f c1873bc6     c..1.c.~..`..;..
    5db8:	800d36f0 383ef800 c1061bec 061b6cb0     .6....>8.....l..
    5dc8:	e0e3b8c1 000000f8 0c330000 c10603c0     ..........3.....
    5dd8:	061b6cb0 1b6cb0c1 63b0c106 0000f8e0     .l....l....c....
    5de8:	00000000 20800002 1b8c1f7e 0c32c826     ....... ~...&.2.
    5df8:	1f7e069b 08208080 00000000 c0010000     ..~... .........
    5e08:	461873f8 3e608001 6080810f fefb0f18     .s.F..`>...`....
    5e18:	00000000 0c000000 08630419 1c506083     ..........c..`P.
    5e28:	20e00302 80800f08 00000020 00000000     ... .... .......
    5e38:	c1f8e30f f81b6cb0 830d30fe 0d36d878     .....l...0..x.6.
    5e48:	000038e3 00000000 3ce00000 98638e3f     .8.........<?.c.
    5e58:	833ffee0 1c70c000 60800106 00000018     ..?...p....`....
    5e68:	00000000 03000c18 8001fcf0 c0fef863     ............c...
    5e78:	fef823b0 00000000 00000000 000060c0     .#...........`..
    5e88:	18e08003 60800106 e1070618 000000f8     .......`........
    5e98:	00000000 18300000 f8e10700 33cc30c3     ......0......0.3
    5ea8:	c730c30c 0000f8e1 00000000 30000000     ..0............0
    5eb8:	330c0018 cc30c30c 30c30c33 00f6d9c7     ...3..0.3..0....
	...
    5ed0:	0b001998 b8e1f8e2 c1061b6c 061b6cb0     ........l....l..
    5ee0:	00000000 8c0c4c00 b8e1061b c9461b6d     .....L......m.F.
    5ef0:	165b6cb2 1becb0c3 00000006 00000000     .l[.............
    5f00:	1e08c003 00e08308 000080ff 00000000     ................
	...
    5f18:	d8c00100 c0810d22 0080ff00 00000000     ...."...........
	...
    5f34:	00030c00 030c0000 3030c000 061b0c0c     ..........00....
    5f44:	00c00f3f 00000000 00000000 ff000000     ?...............
    5f54:	0003ecbf 00000000 00000000 00000000     ................
	...
    5f6c:	18e0bfff 00000006 00000000 00000000     ................
    5f7c:	30c00003 c000030c e0bfff00 0c1f3800     ...0.........8..
    5f8c:	183060c0 0000c00f c0000300 00030c30     .`0.........0...
    5f9c:	bfff00c0 668001e0 fc618619 60800106     .......f..a....`
    5fac:	00000000 06180000 18000000 60800106     ...............`
    5fbc:	80010618 00061860 00000000 00000000     ....`...........
    5fcc:	90200100 80042448 00001290 00000000     .. .H$..........
	...
    5fe4:	40020000 20010948 00244890 00000000     ...@H.. .H$.....
    5ff4:	00000000 48024092 09004900 80240024     .....@.H.I..$.$.
    6004:	92009004 00480240 24090049 42529200     ....@.H.I..$..RB
    6014:	0949494a 24242529 929094a4 4a425292     JII.)%$$.....RBJ
    6024:	29094949 ad6d2425 b6b6b5bd dbdad6f6     II.)%$m.........
    6034:	6f6b5bdb bdad6d6d f6b6b6b5 08dbdad6     .[komm..........
    6044:	20800002 80000208 00020820 02082080     ... .... .... ..
    6054:	08208000 20800002 80000208 00020820     .. .... .... ...
    6064:	3e082080 08208000 20800002 80000208     . .>.. .... ....
    6074:	00020820 02082080 f8208000 20800f02      .... .... .... 
    6084:	80000208 00020820 05142080 14504001     .... .... ...@P.
    6094:	50400105 40013d14 01051450 05145040     ..@P.=.@P...@P..
    60a4:	00504001 00000000 00000000 013f0000     .@P...........?.
    60b4:	05145040 14504001 50400105 00000000     @P...@P...@P....
    60c4:	00000000 02f80000 0820800f 20800002     .......... .... 
    60d4:	80000208 01051420 05145040 f4504001     .... ...@P...@P.
    60e4:	50400f01 40010514 01051450 05145040     ..@P...@P...@P..
    60f4:	14504001 50400105 40010514 01051450     .@P...@P...@P...
    6104:	05145040 00504001 00000000 00000000     @P...@P.........
    6114:	0f01fc00 05145040 14504001 50400105     ....@P...@P...@P
    6124:	40010514 01051450 01f45040 0000c00f     ...@P...@P......
	...
    613c:	01051400 05145040 14504001 0000003f     ....@P...@P.?...
	...
    6154:	02080000 08208000 20800002 800f02f8     ...... .... ....
	...
    6178:	003e0000 02082080 08208000 20800002     ..>.. .... .... 
    6188:	80000208 00020820 03082080 000000f0     .... .... ......
	...
    61a0:	00020800 02082080 08208000 0000f03f     ..... .... .?...
	...
    61c4:	80f03f00 00020820 02082080 08208000     .?.. .... .... .
    61d4:	20800002 80000208 f0030820 02082080     ... .... .... ..
    61e4:	08208000 20800002 00000000 00000000     .. .... ........
    61f4:	3f000000 000000f0 00000000 00000000     ...?............
    6204:	00020800 02082080 08208000 2080f03f     ..... .... .?.. 
    6214:	80000208 00020820 02082080 08208000     .... .... .... .
    6224:	20800002 fc00c20f 00020820 02082080     ... .... .... ..
    6234:	14208000 50400105 40010514 f1051450     .. ...@P...@P...
    6244:	05145040 14504001 50400105 40010514     @P...@P...@P...@
    6254:	01051450 c4175040 0000fc01 00000000     P...@P..........
	...
    6270:	1f000000 507c01c4 40010514 01051450     ......|P...@P...
    6280:	05145040 14504001 50400105 fc0fc0f7     @P...@P...@P....
	...
    62a4:	0fc0ff00 0514507c 14504001 50400105     ....|P...@P...@P
    62b4:	40010514 01051450 c4175040 14507c01     ...@P...@P...|P.
    62c4:	50400105 40010514 00000050 00000000     ..@P...@P.......
    62d4:	ff000000 00fc0fc0 00000000 00000000     ................
    62e4:	05140000 14504001 50400105 7c0fc0f7     .....@P...@P...|
    62f4:	01051450 05145040 08504001 20800002     P...@P...@P.... 
    6304:	80000208 0fc0ff20 000000fc 00000000     .... ...........
    6314:	00000000 40010514 01051450 3f145040     .......@P...@P.?
    6324:	000000f0 00000000 00000000 00000000     ................
    6334:	00000000 ff000000 20fc0fc0 80000208     ........... ....
    6344:	00020820 00002080 00000000 00000000      .... ..........
    6354:	40f13f00 01051450 05145040 14504001     .?.@P...@P...@P.
    6364:	50400105 40010514 f0071450 00000000     ..@P...@P.......
	...
    637c:	80000208 00020820 c20f2080 0000fc00     .... .... ......
	...
    639c:	0f000000 20fc00c2 80000208 00020820     ....... .... ...
    63ac:	00002080 00000000 00000000 40f10700     . .............@
    63bc:	01051450 05145040 14504001 50400105     P...@P...@P...@P
    63cc:	40010514 f13f1450 05145040 14504001     ...@P.?.@P...@P.
    63dc:	50400105 80000208 00020820 c2ff2080     ..@P.... .... ..
    63ec:	0820fc0f 20800002 80000208 00020820     .. .... .... ...
    63fc:	02082080 08208000 0000003e 00000000     . .... .>.......
	...
    641c:	80f00300 00020820 02082080 ff208000     .... .... .... .
    642c:	ffffffff ffffffff ffffffff ffffffff     ................
    643c:	ffffffff ffffffff 00000000 00000000     ................
    644c:	3f000000 ffffffff ffffffff ffffffff     ...?............
    645c:	0f3ef8ff 3ef8e083 f8e0830f e0830f3e     ..>....>....>...
    646c:	830f3ef8 0f3ef8e0 c30fe083 0f3ffcf0     .>....>.......?.
    647c:	3ffcf0c3 fcf0c30f f0c30f3f c30f3ffc     ...?....?....?..
    648c:	ff3ffcf0 ffffffff ffffffff f0ffffff     ..?.............
	...
    64b0:	8f380000 c208234c e2d08330 00000000     ..8.L#..0.......
    64c0:	00000000 193c0000 7c982186 8c61061f     ......<..!.|..a.
    64d0:	63c61861 000000f8 00000000 ff000000     a..c............
    64e0:	8c31c61f 01061863 06186080 0000c003     ..1.c....`......
	...
    64fc:	c69fff00 18638c31 008e33c6 00000000     ....1.c..3......
    650c:	fb0f0000 06b080fe 0618c000 c0800103     ................
    651c:	fefb2f20 00000000 00000000 00000000      /..............
    652c:	c3fef907 0c33cc30 e1c730c3 000000f8     ....0.3..0......
	...
    6544:	0c330c00 33cc30c3 cf30c30c 30c0f6db     ..3..0.3..0....0
    6554:	0000000c 00000000 e30c0000 618e7bbc     .............{.a
    6564:	06186080 00608001 00000000 00000000     .`....`.........
    6574:	c33f0000 30c3f8c1 c30c33cc f0e0c730     ..?....0.3..0...
    6584:	000000ff 03000000 1863f8e0 ff061bcc     ..........c.....
    6594:	061becbf e0c31863 000000f8 00000000     ....c...........
    65a4:	e3fce103 061b6cb0 1b6cb0c1 c698e38e     .....l....l.....
    65b4:	00008e33 00000000 fef80300 e1070318     3...............
    65c4:	cc30c3f8 30c30c33 00f8e1c7 00000000     ..0.3..0........
    65d4:	00000000 02000000 a2885421 88228a28     ........!T..(.".
    65e4:	00204295 00000000 00000000 07000000     .B .............
    65f4:	860e7367 628a28a3 7367b8b0 00000070     gs...(.b..gsp...
    6604:	00000000 60f8e003 00030c18 030c3ffc     .......`.....?..
    6614:	03186000 0000f8e0 00000000 00000000     .`..............
    6624:	1b8c0f3e 6cb0c106 b0c1061b c1061b6c     >......l....l...
    6634:	000060b0 00000000 0f000000 0000fefb     .`..............
    6644:	00fefb0f fefb0f00 00000000 00000000     ................
    6654:	02080000 ff208000 2080e0bf 03000208     ...... .... ....
    6664:	000000fe 00000000 3000030c 30c0000c     ...........0...0
    6674:	c0c00003 0c0c3030 3f000003 0000f0cf     ....00.....?....
    6684:	0c300000 0003030c 0330c0c0 030cc000     ..0.......0.....
    6694:	000c3000 00f0cf3f 88600307 00020820     .0..?.....`. ...
    66a4:	02082080 08208000 20800002 80000208     . .... .... ....
    66b4:	00020820 02082080 08208000 20800002      .... .... .... 
    66c4:	80000208 09240820 00008001 18000000     .... .$.........
    66d4:	00000006 00e0bfff 00061800 00000000     ................
	...
    66ec:	8a0f1c00 0f1c073e 00073e8a 00000000     ....>....>......
	...
    6704:	01092460 00000080 00000000 00000000     `$..............
	...
    6728:	80030e38 00000000 00000000 00000000     8...............
	...
    6740:	01000000 00006080 00000000 0f000000     .....`..........
    6750:	40000104 0d020820 0c504001 00800002     ...@ ....@P.....
    6760:	00000000 f0c30b00 638c31c6 00000018     .........1.c....
	...
    677c:	83070000 03070cf0 3fe0c081 00000000     ...........?....
	...
    67a0:	c30f3ffc 0f3ffcf0 0000f0c3 00000000     .?....?.........
	...
    67c8:	0009001b 67753700 71312c6a 38000000     .....7ugj,1q...8
    67d8:	006b6869 7a007732 6f303900 65332e6c     ihk.2w.z.90ol.3e
    67e8:	00007861 2f3b702d 63737234 5b3d0020     ax..-p;/4rsc .=[
    67f8:	74350027 006e7664 5c0d5d27 62667936     '.5tdvn.'].\6yfb
    6808:	0008006d 00000a7f 0009001b 47552600     m............&UG
    6818:	51213c4a 2a000000 004b4849 5a005740     J<!Q...*IHK.@W.Z
    6828:	4f292800 45233e4c 00005841 3f3a505f     .()OL>#EAX.._P:?
    6838:	43535224 7b2b0020 54250022 004e5644     $RSC .+{".%TDVN.
    6848:	7c0d7d7e 4246595e 0008004d 00000a7f     ~}.|^YFBM.......
    6858:	0009001b 47553700 51312c4a 38000000     .....7UGJ,1Q...8
    6868:	004b4849 5a005732 4f303900 45332e4c     IHK.2W.Z.90OL.3E
    6878:	00005841 2f3b502d 43535234 5b3d0020     AX..-P;/4RSC .=[
    6888:	54350027 004e5644 5c0d5d27 42465936     '.5TDVN.'].\6YFB
    6898:	0008004d 00000a7f 0009001b 07150000     M...............
    68a8:	1100000a 00000000 000b0809 1a001700     ................
    68b8:	0f000000 0500000a 00001801 1f001000     ................
    68c8:	03131200 1b000000 14000000 000e1604     ................
    68d8:	1c001d1e 02061900 0008000d 00000a00     ................

000068e8 <kb_col>:
    68e8:	00010000 00020000 00040000 00080000     ................
    68f8:	00100000 00200000 08000000              ...... .....

00006904 <kb_col_index>:
    6904:	00000010 00000011 00000012 00000013     ................
    6914:	00000014 00000015 0000001b              ............

00006920 <kb_row>:
    6920:	00000004 00000008 00000010 00000020     ............ ...
    6930:	00000040 00000080 00000400 00000800     @...............
    6940:	00001000 00002000                       ..... ..

00006948 <kb_row_index>:
    6948:	00000002 00000003 00000004 00000005     ................
    6958:	00000006 00000007 0000000a 0000000b     ................
    6968:	0000000c 0000000d                       ........

00006970 <beelzebub.12955>:
    6970:	2e002d00 44003200 88005300 f300b600     .-...2.D.S......
    6980:	64012201 d4019201 08020702 5f023402     .".d.........4._
    6990:	94027802 bb02a602 db02ca02 f902e802     .x..............
    69a0:	7f031f03                                ....

000069a4 <belial.12952>:
    69a4:	f0f0f0f0 b0b0b0f0 b1b6b6b6 b7b7b1b1     ................
    69b4:	b2b2b2b7 bfb8b8b8 b9b3b3b3 b5b5b9b9     ................
    69c4:	babac2b5 bcbcbcba bebdbdbd f0f0f0be     ................
    69d4:	b1b1f0f0 b8b7b7b6 bcb8b8b8 c9c9bcbc     ................
    69e4:	35c9c9c9 0000363a                       ...5:6..

000069ec <lucifer.12954>:
    69ec:	0852aa55 0d0d0d01 0d343434 34340d0d     U.R.....444...44
    69fc:	00000034 01242424 340f0f0f 08083434     4...$$$....444..
    6a0c:	24240308 00780024 00007800 52aa5589     ..$$$.x..x...U.R
    6a1c:	00cc0008 01707005 02030303 02d00000     .....pp.........
    6a2c:	00505050 00000055                       PPP.U...

00006a34 <mulciber.12953>:
    6a34:	03020100 02010004 00020100 01000201     ................
    6a44:	02010002 00020100 01000201 01000002     ................
    6a54:	02010000 00020100 01000201 03020100     ................
    6a64:	00000004 01000100 01000302 02010002     ................
    6a74:	00000403 00000000 65530d0a 6c616972     ..........Serial
    6a84:	204b4f20 30303639 314e3820 00000d0a      OK 9600 8N1....

00006a94 <_global_impure_ptr>:
    6a94:	20000160                                `.. 

00006a98 <__sf_fake_stderr>:
	...

00006ab8 <__sf_fake_stdin>:
	...

00006ad8 <__sf_fake_stdout>:
	...
    6af8:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    6b08:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    6b18:	31300046 35343332 39383736 64636261     F.0123456789abcd
    6b28:	00006665                                ef..

00006b2c <_init>:
    6b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6b2e:	46c0      	nop			; (mov r8, r8)
    6b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
    6b32:	bc08      	pop	{r3}
    6b34:	469e      	mov	lr, r3
    6b36:	4770      	bx	lr

00006b38 <__init_array_start>:
    6b38:	000000dd 	.word	0x000000dd

00006b3c <_fini>:
    6b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6b3e:	46c0      	nop			; (mov r8, r8)
    6b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
    6b42:	bc08      	pop	{r3}
    6b44:	469e      	mov	lr, r3
    6b46:	4770      	bx	lr

00006b48 <__fini_array_start>:
    6b48:	000000b5 	.word	0x000000b5
