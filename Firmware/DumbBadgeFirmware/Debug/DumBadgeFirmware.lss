
DumBadgeFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006be8  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001bc  20000000  00006be8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000904  200001bc  00006da4  000201bc  2**2
                  ALLOC
  3 .stack        00002000  20000ac0  000076a8  000201bc  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000201bc  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
  6 .debug_info   0003a072  00000000  00000000  0002023d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000055a6  00000000  00000000  0005a2af  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00006809  00000000  00000000  0005f855  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000748  00000000  00000000  0006605e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000008b0  00000000  00000000  000667a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001f156  00000000  00000000  00067056  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00013a40  00000000  00000000  000861ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0009028d  00000000  00000000  00099bec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000019b4  00000000  00000000  00129e7c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
	// Keep the default device state after reset
	SystemCoreClock = __SYSTEM_CLOCK;
       0:	c0 2a 00 20 71 1e 00 00 6d 1e 00 00 6d 1e 00 00     .*. q...m...m...
	...
	config->stopbits         = USART_STOPBITS_1;
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
	config->baudrate         = 9600;
	config->receiver_enable  = true;
	config->transmitter_enable = true;
	config->clock_polarity_inverted = false;
      2c:	6d 1e 00 00 00 00 00 00 00 00 00 00 6d 1e 00 00     m...........m...
	config->use_external_clock = false;
	config->ext_clock_freq   = 0;
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
	config->generator_source = GCLK_GENERATOR_0;
      3c:	d9 30 00 00 6d 1e 00 00 6d 1e 00 00 6d 1e 00 00     .0..m...m...m...
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
	config->receive_pulse_length                    = 19;
      4c:	6d 1e 00 00 6d 1e 00 00 6d 1e 00 00 6d 1e 00 00     m...m...m...m...
	usart_get_config_defaults(&config_usart);

	config_usart.baudrate    = SERCOMBAUD;
	config_usart.mux_setting = SERCOMMUX;
	config_usart.pinmux_pad0 = SERCOMPAD0;
	config_usart.pinmux_pad1 = SERCOMPAD1;
      5c:	6d 1e 00 00 6d 1e 00 00 89 10 00 00 99 10 00 00     m...m...........
	config_usart.pinmux_pad2 = SERCOMPAD2;
	config_usart.pinmux_pad3 = SERCOMPAD3;

	while (usart_init(&usart_instance,	 SERCOMMODULE, &config_usart) != STATUS_OK) { }
      6c:	a9 10 00 00 b9 10 00 00 c9 10 00 00 d9 10 00 00     ................
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
      7c:	6d 1e 00 00 6d 1e 00 00 6d 1e 00 00 6d 1e 00 00     m...m...m...m...
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	if (usart_init(module, hw, config) == STATUS_OK) {
      8c:	6d 1e 00 00 6d 1e 00 00 6d 1e 00 00 6d 1e 00 00     m...m...m...m...
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
      9c:	bd 0b 00 00 6d 1e 00 00 6d 1e 00 00 6d 1e 00 00     ....m...m...m...
	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
      ac:	6d 1e 00 00 00 00 00 00                             m.......

000000b4 <__do_global_dtors_aux>:
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
      ba:	2b00      	cmp	r3, #0
	return (usart_hw->SYNCBUSY.reg);
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
	while (usart_is_syncing(module)) {
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop

	stdio_serial_init(&usart_instance, SERCOMMODULE, &config_usart);
	usart_enable(&usart_instance);
}
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200001bc 	.word	0x200001bc
      d4:	00000000 	.word	0x00000000
      d8:	00006be8 	.word	0x00006be8

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200001c0 	.word	0x200001c0
     108:	00006be8 	.word	0x00006be8
     10c:	00006be8 	.word	0x00006be8
     110:	00000000 	.word	0x00000000

00000114 <ring_init>:
	cbuf->full = false;
	cbuf->tail = (cbuf->tail + 1) % cbuf->max;
}

cbuf_handle_t ring_init(uint8_t* buffer, uint16_t size)
{
     114:	b570      	push	{r4, r5, r6, lr}
     116:	0005      	movs	r5, r0
     118:	000c      	movs	r4, r1
	cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
     11a:	200c      	movs	r0, #12
     11c:	4b04      	ldr	r3, [pc, #16]	; (130 <ring_init+0x1c>)
     11e:	4798      	blx	r3

	cbuf->buffer = buffer;
     120:	6005      	str	r5, [r0, #0]
	cbuf->max = size;
     122:	8104      	strh	r4, [r0, #8]
	return cbuf;
}

void ring_reset(cbuf_handle_t cbuf)
{
	cbuf->head = 0;
     124:	2300      	movs	r3, #0
     126:	8083      	strh	r3, [r0, #4]
	cbuf->tail = 0;
     128:	80c3      	strh	r3, [r0, #6]
	cbuf->full = false;
     12a:	7283      	strb	r3, [r0, #10]
}
     12c:	bd70      	pop	{r4, r5, r6, pc}
     12e:	46c0      	nop			; (mov r8, r8)
     130:	00003821 	.word	0x00003821

00000134 <ring_reset>:
	cbuf->head = 0;
     134:	2300      	movs	r3, #0
     136:	8083      	strh	r3, [r0, #4]
	cbuf->tail = 0;
     138:	80c3      	strh	r3, [r0, #6]
	cbuf->full = false;
     13a:	7283      	strb	r3, [r0, #10]
}
     13c:	4770      	bx	lr
	...

00000140 <ring_put>:

void ring_put(cbuf_handle_t cbuf, uint8_t data)
{
     140:	b510      	push	{r4, lr}
     142:	0004      	movs	r4, r0
	cbuf->buffer[cbuf->head] = data;
     144:	8883      	ldrh	r3, [r0, #4]
     146:	005b      	lsls	r3, r3, #1
     148:	6802      	ldr	r2, [r0, #0]
     14a:	5299      	strh	r1, [r3, r2]
	if(cbuf->full)
     14c:	7a83      	ldrb	r3, [r0, #10]
     14e:	2b00      	cmp	r3, #0
     150:	d005      	beq.n	15e <ring_put+0x1e>
		cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     152:	88c0      	ldrh	r0, [r0, #6]
     154:	3001      	adds	r0, #1
     156:	8921      	ldrh	r1, [r4, #8]
     158:	4b07      	ldr	r3, [pc, #28]	; (178 <ring_put+0x38>)
     15a:	4798      	blx	r3
     15c:	80e1      	strh	r1, [r4, #6]
	cbuf->head = (cbuf->head + 1) % cbuf->max;
     15e:	88a0      	ldrh	r0, [r4, #4]
     160:	3001      	adds	r0, #1
     162:	8921      	ldrh	r1, [r4, #8]
     164:	4b04      	ldr	r3, [pc, #16]	; (178 <ring_put+0x38>)
     166:	4798      	blx	r3
     168:	b28b      	uxth	r3, r1
     16a:	80a3      	strh	r3, [r4, #4]
	cbuf->full = (cbuf->head == cbuf->tail);
     16c:	88e1      	ldrh	r1, [r4, #6]
     16e:	1ac9      	subs	r1, r1, r3
     170:	424a      	negs	r2, r1
     172:	414a      	adcs	r2, r1
     174:	72a2      	strb	r2, [r4, #10]

	advance_pointer(cbuf);
}
     176:	bd10      	pop	{r4, pc}
     178:	00003779 	.word	0x00003779

0000017c <ring_empty>:
	return r;
}

bool ring_empty(cbuf_handle_t cbuf)
{
	return (!cbuf->full && (cbuf->head == cbuf->tail));
     17c:	7a82      	ldrb	r2, [r0, #10]
     17e:	2300      	movs	r3, #0
     180:	2a00      	cmp	r2, #0
     182:	d105      	bne.n	190 <ring_empty+0x14>
     184:	8883      	ldrh	r3, [r0, #4]
     186:	88c0      	ldrh	r0, [r0, #6]
     188:	1a1b      	subs	r3, r3, r0
     18a:	4258      	negs	r0, r3
     18c:	4143      	adcs	r3, r0
     18e:	b2db      	uxtb	r3, r3
     190:	0018      	movs	r0, r3
}
     192:	4770      	bx	lr

00000194 <ring_get>:
{
     194:	b570      	push	{r4, r5, r6, lr}
     196:	0004      	movs	r4, r0
     198:	000d      	movs	r5, r1
	if(!ring_empty(cbuf))
     19a:	4b0b      	ldr	r3, [pc, #44]	; (1c8 <ring_get+0x34>)
     19c:	4798      	blx	r3
     19e:	2800      	cmp	r0, #0
     1a0:	d10e      	bne.n	1c0 <ring_get+0x2c>
		*data = cbuf->buffer[cbuf->tail];
     1a2:	88e3      	ldrh	r3, [r4, #6]
     1a4:	005b      	lsls	r3, r3, #1
     1a6:	6822      	ldr	r2, [r4, #0]
     1a8:	5a9b      	ldrh	r3, [r3, r2]
     1aa:	702b      	strb	r3, [r5, #0]
	cbuf->full = false;
     1ac:	2300      	movs	r3, #0
     1ae:	72a3      	strb	r3, [r4, #10]
	cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     1b0:	88e0      	ldrh	r0, [r4, #6]
     1b2:	3001      	adds	r0, #1
     1b4:	8921      	ldrh	r1, [r4, #8]
     1b6:	4b05      	ldr	r3, [pc, #20]	; (1cc <ring_get+0x38>)
     1b8:	4798      	blx	r3
     1ba:	80e1      	strh	r1, [r4, #6]
		r = 0;
     1bc:	2000      	movs	r0, #0
}
     1be:	bd70      	pop	{r4, r5, r6, pc}
	int r = -1;
     1c0:	2001      	movs	r0, #1
     1c2:	4240      	negs	r0, r0
	return r;
     1c4:	e7fb      	b.n	1be <ring_get+0x2a>
     1c6:	46c0      	nop			; (mov r8, r8)
     1c8:	0000017d 	.word	0x0000017d
     1cc:	00003779 	.word	0x00003779

000001d0 <drawKare>:
//	graphic in the entire project. Please note this is the most
//	space efficient way to do this; a 40x31 bitmap is 930 bytes,
//	whereas	this is (104*2)+28+20, or 256 bytes.
/*********************************************************************/
void drawKare(int emotion)
{
     1d0:	b5f0      	push	{r4, r5, r6, r7, lr}
     1d2:	b0c1      	sub	sp, #260	; 0x104
     1d4:	0007      	movs	r7, r0
	uint16_t body[104] = {10,10,20,20,20,0,380,10,380,10,390,20,0,
     1d6:	22d0      	movs	r2, #208	; 0xd0
     1d8:	492d      	ldr	r1, [pc, #180]	; (290 <drawKare+0xc0>)
     1da:	a80c      	add	r0, sp, #48	; 0x30
     1dc:	4b2d      	ldr	r3, [pc, #180]	; (294 <drawKare+0xc4>)
     1de:	4798      	blx	r3
		80,190,280,200,280,40,290,190,0,70,50,80,0,90,50,100,0,110,
		50,120,0,130,50,140,0,150,50,160,0,170,50,180,0,190,50,200,
		300,200,370,210,30,220,370,230,30,240,370,250,30,260,370,
		270,90,280,300,290};
	
	uint8_t happyTerm[28] = {180,80,190,130,170,130,190,140,140,
     1e0:	a805      	add	r0, sp, #20
     1e2:	4b2d      	ldr	r3, [pc, #180]	; (298 <drawKare+0xc8>)
     1e4:	001a      	movs	r2, r3
     1e6:	3250      	adds	r2, #80	; 0x50
     1e8:	0001      	movs	r1, r0
     1ea:	ca31      	ldmia	r2!, {r0, r4, r5}
     1ec:	c131      	stmia	r1!, {r0, r4, r5}
     1ee:	ca31      	ldmia	r2!, {r0, r4, r5}
     1f0:	c131      	stmia	r1!, {r0, r4, r5}
     1f2:	6812      	ldr	r2, [r2, #0]
     1f4:	600a      	str	r2, [r1, #0]
		60,150,100,210,60,220,100,130,150,140,160,140,160,220,170,
	220,150,230,160};
	
	uint8_t rPiBeret[20] = {120,60,240,80,110,70,120,90,150,
     1f6:	336c      	adds	r3, #108	; 0x6c
     1f8:	466a      	mov	r2, sp
     1fa:	cb13      	ldmia	r3!, {r0, r1, r4}
     1fc:	c213      	stmia	r2!, {r0, r1, r4}
     1fe:	cb03      	ldmia	r3!, {r0, r1}
     200:	c203      	stmia	r2!, {r0, r1}
     202:	ac0c      	add	r4, sp, #48	; 0x30
     204:	ae40      	add	r6, sp, #256	; 0x100

	
	
	for(int i = 0; i < 104; i = i+4)
	{
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
     206:	4d25      	ldr	r5, [pc, #148]	; (29c <drawKare+0xcc>)
		((body[i+1]/iSv)+(offsetGraphicY)),
		((body[i+2]/iSv)+(offsetGraphicX)),
		((body[i+3]/iSv)+(offsetGraphicY)));
     208:	88e3      	ldrh	r3, [r4, #6]
     20a:	105b      	asrs	r3, r3, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
     20c:	3396      	adds	r3, #150	; 0x96
		((body[i+2]/iSv)+(offsetGraphicX)),
     20e:	88a2      	ldrh	r2, [r4, #4]
     210:	1052      	asrs	r2, r2, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
     212:	322d      	adds	r2, #45	; 0x2d
     214:	32ff      	adds	r2, #255	; 0xff
		((body[i+1]/iSv)+(offsetGraphicY)),
     216:	8861      	ldrh	r1, [r4, #2]
     218:	1049      	asrs	r1, r1, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
     21a:	3196      	adds	r1, #150	; 0x96
     21c:	8820      	ldrh	r0, [r4, #0]
     21e:	1040      	asrs	r0, r0, #1
     220:	302d      	adds	r0, #45	; 0x2d
     222:	30ff      	adds	r0, #255	; 0xff
     224:	47a8      	blx	r5
     226:	3408      	adds	r4, #8
	for(int i = 0; i < 104; i = i+4)
     228:	42b4      	cmp	r4, r6
     22a:	d1ed      	bne.n	208 <drawKare+0x38>
	}
	switch(emotion)
     22c:	2f00      	cmp	r7, #0
     22e:	d003      	beq.n	238 <drawKare+0x68>
     230:	2f01      	cmp	r7, #1
     232:	d017      	beq.n	264 <drawKare+0x94>
		break;
		case 2:
		//make a sad terminal thing go here
		break;
	}
}
     234:	b041      	add	sp, #260	; 0x104
     236:	bdf0      	pop	{r4, r5, r6, r7, pc}
     238:	ac05      	add	r4, sp, #20
     23a:	ae0c      	add	r6, sp, #48	; 0x30
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
     23c:	4d17      	ldr	r5, [pc, #92]	; (29c <drawKare+0xcc>)
			((happyTerm[i+3]/iSv)+(offsetGraphicY)));
     23e:	78e3      	ldrb	r3, [r4, #3]
     240:	105b      	asrs	r3, r3, #1
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
     242:	3396      	adds	r3, #150	; 0x96
			((happyTerm[i+2]/iSv)+(offsetGraphicX)),
     244:	78a2      	ldrb	r2, [r4, #2]
     246:	1052      	asrs	r2, r2, #1
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
     248:	322d      	adds	r2, #45	; 0x2d
     24a:	32ff      	adds	r2, #255	; 0xff
			((happyTerm[i+1]/iSv)+(offsetGraphicY)),
     24c:	7861      	ldrb	r1, [r4, #1]
     24e:	1049      	asrs	r1, r1, #1
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
     250:	3196      	adds	r1, #150	; 0x96
     252:	7820      	ldrb	r0, [r4, #0]
     254:	1040      	asrs	r0, r0, #1
     256:	302d      	adds	r0, #45	; 0x2d
     258:	30ff      	adds	r0, #255	; 0xff
     25a:	47a8      	blx	r5
     25c:	3404      	adds	r4, #4
		for(int i = 0; i < 28; i = i+4)
     25e:	42a6      	cmp	r6, r4
     260:	d1ed      	bne.n	23e <drawKare+0x6e>
     262:	e7e7      	b.n	234 <drawKare+0x64>
     264:	466c      	mov	r4, sp
     266:	ae05      	add	r6, sp, #20
			fillRect((
     268:	4d0c      	ldr	r5, [pc, #48]	; (29c <drawKare+0xcc>)
			((rPiBeret[i+3]/iSv)+(offsetGraphicY)));
     26a:	78e3      	ldrb	r3, [r4, #3]
     26c:	105b      	asrs	r3, r3, #1
			fillRect((
     26e:	3396      	adds	r3, #150	; 0x96
			((rPiBeret[i+2]/iSv)+(offsetGraphicX)),
     270:	78a2      	ldrb	r2, [r4, #2]
     272:	1052      	asrs	r2, r2, #1
			fillRect((
     274:	322d      	adds	r2, #45	; 0x2d
     276:	32ff      	adds	r2, #255	; 0xff
			((rPiBeret[i+1]/iSv)+(offsetGraphicY)),
     278:	7861      	ldrb	r1, [r4, #1]
     27a:	1049      	asrs	r1, r1, #1
			fillRect((
     27c:	3196      	adds	r1, #150	; 0x96
			(rPiBeret[i]/iSv)+(offsetGraphicX)),
     27e:	7820      	ldrb	r0, [r4, #0]
     280:	1040      	asrs	r0, r0, #1
			fillRect((
     282:	302d      	adds	r0, #45	; 0x2d
     284:	30ff      	adds	r0, #255	; 0xff
     286:	47a8      	blx	r5
     288:	3404      	adds	r4, #4
		for(int i = 0; i < 20; i = i+4)
     28a:	42b4      	cmp	r4, r6
     28c:	d1ed      	bne.n	26a <drawKare+0x9a>
     28e:	e7d1      	b.n	234 <drawKare+0x64>
     290:	000049a0 	.word	0x000049a0
     294:	00003835 	.word	0x00003835
     298:	00004a20 	.word	0x00004a20
     29c:	00002c19 	.word	0x00002c19

000002a0 <splashScreen>:

void splashScreen(void)
{
     2a0:	b570      	push	{r4, r5, r6, lr}
	static const char *splashText[32];
	splashText[0] = "Trans rights are human rights";//
     2a2:	4c48      	ldr	r4, [pc, #288]	; (3c4 <splashScreen+0x124>)
     2a4:	4b48      	ldr	r3, [pc, #288]	; (3c8 <splashScreen+0x128>)
     2a6:	6023      	str	r3, [r4, #0]
	splashText[1] = "13^5 + 16^5 = 17^5";//
     2a8:	4b48      	ldr	r3, [pc, #288]	; (3cc <splashScreen+0x12c>)
     2aa:	6063      	str	r3, [r4, #4]
	splashText[2] = "Reticulating Splines";//
     2ac:	4b48      	ldr	r3, [pc, #288]	; (3d0 <splashScreen+0x130>)
     2ae:	60a3      	str	r3, [r4, #8]
	splashText[3] = "violence.works";//
     2b0:	4b48      	ldr	r3, [pc, #288]	; (3d4 <splashScreen+0x134>)
     2b2:	60e3      	str	r3, [r4, #12]
	splashText[4] = "Tabs!";//
     2b4:	4b48      	ldr	r3, [pc, #288]	; (3d8 <splashScreen+0x138>)
     2b6:	6123      	str	r3, [r4, #16]
	splashText[5] = "Kill Billionaires (and Trillionaire)";//
     2b8:	4b48      	ldr	r3, [pc, #288]	; (3dc <splashScreen+0x13c>)
     2ba:	6163      	str	r3, [r4, #20]
	splashText[6] = "Interest in technology is not a personality";//
     2bc:	4b48      	ldr	r3, [pc, #288]	; (3e0 <splashScreen+0x140>)
     2be:	61a3      	str	r3, [r4, #24]
	splashText[7] = "10 PRINT CHR$(205.5+RND(1)); : GOTO 10";//
     2c0:	4b48      	ldr	r3, [pc, #288]	; (3e4 <splashScreen+0x144>)
     2c2:	61e3      	str	r3, [r4, #28]
	splashText[8] = "No gods. No masters. No external libraries.";//
     2c4:	4b48      	ldr	r3, [pc, #288]	; (3e8 <splashScreen+0x148>)
     2c6:	6223      	str	r3, [r4, #32]
	splashText[9] = "Kill Nazis";//
     2c8:	4b48      	ldr	r3, [pc, #288]	; (3ec <splashScreen+0x14c>)
     2ca:	6263      	str	r3, [r4, #36]	; 0x24
	splashText[10] = "Tiananmen Square 1989";//
     2cc:	4b48      	ldr	r3, [pc, #288]	; (3f0 <splashScreen+0x150>)
     2ce:	62a3      	str	r3, [r4, #40]	; 0x28
	splashText[11] = "America was founded on slavery";
     2d0:	4b48      	ldr	r3, [pc, #288]	; (3f4 <splashScreen+0x154>)
     2d2:	62e3      	str	r3, [r4, #44]	; 0x2c
	splashText[12] = "There is only capital and labor";//
     2d4:	4b48      	ldr	r3, [pc, #288]	; (3f8 <splashScreen+0x158>)
     2d6:	6323      	str	r3, [r4, #48]	; 0x30
	splashText[13] = "Encourage _symmetric_ class warfare";//
     2d8:	4b48      	ldr	r3, [pc, #288]	; (3fc <splashScreen+0x15c>)
     2da:	6363      	str	r3, [r4, #52]	; 0x34
	splashText[14] = "$CURRENT_MEME";//
     2dc:	4b48      	ldr	r3, [pc, #288]	; (400 <splashScreen+0x160>)
     2de:	63a3      	str	r3, [r4, #56]	; 0x38
	splashText[15] = "A Nice TTY";//
     2e0:	4b48      	ldr	r3, [pc, #288]	; (404 <splashScreen+0x164>)
     2e2:	63e3      	str	r3, [r4, #60]	; 0x3c
	splashText[16] = "Unix epoch minus 0xFF days";//
     2e4:	4b48      	ldr	r3, [pc, #288]	; (408 <splashScreen+0x168>)
     2e6:	6423      	str	r3, [r4, #64]	; 0x40
	splashText[17] = "i  = 0x5f3759df - ( i >> 1 );";//
     2e8:	4b48      	ldr	r3, [pc, #288]	; (40c <splashScreen+0x16c>)
     2ea:	6463      	str	r3, [r4, #68]	; 0x44
	splashText[18] = "ACAB";//
     2ec:	4b48      	ldr	r3, [pc, #288]	; (410 <splashScreen+0x170>)
     2ee:	64a3      	str	r3, [r4, #72]	; 0x48
	splashText[19] = "Defcon's canceled.";//
     2f0:	4b48      	ldr	r3, [pc, #288]	; (414 <splashScreen+0x174>)
     2f2:	64e3      	str	r3, [r4, #76]	; 0x4c
	splashText[20] = "Ratsnest: Nothing To Do!";//
     2f4:	4b48      	ldr	r3, [pc, #288]	; (418 <splashScreen+0x178>)
     2f6:	6523      	str	r3, [r4, #80]	; 0x50
	splashText[21] = "It has 69 keys.";//
     2f8:	4b48      	ldr	r3, [pc, #288]	; (41c <splashScreen+0x17c>)
     2fa:	6563      	str	r3, [r4, #84]	; 0x54
	splashText[22] = "Because VT-420 was already taken";//
     2fc:	4b48      	ldr	r3, [pc, #288]	; (420 <splashScreen+0x180>)
     2fe:	65a3      	str	r3, [r4, #88]	; 0x58
	splashText[23] = "Compression algorithm based on BBP (1997)";//
     300:	4b48      	ldr	r3, [pc, #288]	; (424 <splashScreen+0x184>)
     302:	65e3      	str	r3, [r4, #92]	; 0x5c
	splashText[24] = "The source of the Mississippi river is in Pennsylvania.";
     304:	4b48      	ldr	r3, [pc, #288]	; (428 <splashScreen+0x188>)
     306:	6623      	str	r3, [r4, #96]	; 0x60
	splashText[25] = "Offensive hardware";//
     308:	4b48      	ldr	r3, [pc, #288]	; (42c <splashScreen+0x18c>)
     30a:	6663      	str	r3, [r4, #100]	; 0x64
	splashText[26] = "Follow World Pog Federation    @WorldPog";//
     30c:	4b48      	ldr	r3, [pc, #288]	; (430 <splashScreen+0x190>)
     30e:	66a3      	str	r3, [r4, #104]	; 0x68
	splashText[27] = "Dummy thicc client";//
     310:	4b48      	ldr	r3, [pc, #288]	; (434 <splashScreen+0x194>)
     312:	66e3      	str	r3, [r4, #108]	; 0x6c
	splashText[28] = "A Nice TTY. An OK Computer.";//
     314:	4b48      	ldr	r3, [pc, #288]	; (438 <splashScreen+0x198>)
     316:	6723      	str	r3, [r4, #112]	; 0x70
	splashText[29] = "Ceci n'est pas une Cyberdeck (because it's not a Pelican Case)";//
     318:	4b48      	ldr	r3, [pc, #288]	; (43c <splashScreen+0x19c>)
     31a:	6763      	str	r3, [r4, #116]	; 0x74
	splashText[30] = "Solidarity is not a new framework";//
     31c:	4b48      	ldr	r3, [pc, #288]	; (440 <splashScreen+0x1a0>)
     31e:	67a3      	str	r3, [r4, #120]	; 0x78
	splashText[31] = "Breadboarding Is Not A Crime";//
     320:	4b48      	ldr	r3, [pc, #288]	; (444 <splashScreen+0x1a4>)
     322:	67e3      	str	r3, [r4, #124]	; 0x7c
	splashText[32] = "Off by one errors are common";
     324:	4a48      	ldr	r2, [pc, #288]	; (448 <splashScreen+0x1a8>)
     326:	2380      	movs	r3, #128	; 0x80
     328:	50e2      	str	r2, [r4, r3]
	
	const uint32_t megaHurtz = system_gclk_gen_get_hz(0);
     32a:	2000      	movs	r0, #0
     32c:	4b47      	ldr	r3, [pc, #284]	; (44c <splashScreen+0x1ac>)
     32e:	4798      	blx	r3
     330:	0005      	movs	r5, r0
	const char *textPhrase = splashText[(((rand()+megaHurtz)%32))];
     332:	4b47      	ldr	r3, [pc, #284]	; (450 <splashScreen+0x1b0>)
     334:	4798      	blx	r3
     336:	1945      	adds	r5, r0, r5
     338:	201f      	movs	r0, #31
     33a:	4028      	ands	r0, r5
     33c:	0080      	lsls	r0, r0, #2
     33e:	5904      	ldr	r4, [r0, r4]


	
	clearScreen();
     340:	4b44      	ldr	r3, [pc, #272]	; (454 <splashScreen+0x1b4>)
     342:	4798      	blx	r3
	setColorRGB(255,255,255);
     344:	22ff      	movs	r2, #255	; 0xff
     346:	21ff      	movs	r1, #255	; 0xff
     348:	20ff      	movs	r0, #255	; 0xff
     34a:	4b43      	ldr	r3, [pc, #268]	; (458 <splashScreen+0x1b8>)
     34c:	4798      	blx	r3
	
	REG_PORT_DIRTGL1 = PORT_PB31;
     34e:	2280      	movs	r2, #128	; 0x80
     350:	0612      	lsls	r2, r2, #24
     352:	4b42      	ldr	r3, [pc, #264]	; (45c <splashScreen+0x1bc>)
     354:	601a      	str	r2, [r3, #0]
	PORT->Group[1].PINCFG[31].bit.PULLEN = 1;
     356:	4b42      	ldr	r3, [pc, #264]	; (460 <splashScreen+0x1c0>)
     358:	22df      	movs	r2, #223	; 0xdf
     35a:	5c99      	ldrb	r1, [r3, r2]
     35c:	2004      	movs	r0, #4
     35e:	4301      	orrs	r1, r0
     360:	5499      	strb	r1, [r3, r2]
	PORT->Group[1].PINCFG[31].bit.INEN = 1;
     362:	5c99      	ldrb	r1, [r3, r2]
     364:	2002      	movs	r0, #2
     366:	4301      	orrs	r1, r0
     368:	5499      	strb	r1, [r3, r2]
	if((PORT->Group[1].IN.reg & PORT_PB31) != 0)
     36a:	3a3f      	subs	r2, #63	; 0x3f
     36c:	589b      	ldr	r3, [r3, r2]
     36e:	2b00      	cmp	r3, #0
     370:	db24      	blt.n	3bc <splashScreen+0x11c>
		//This is the 'pi' graphic; put some codes
		//here to handle setting up the uarts.
		drawKare(1);
	}
	else
	drawKare(0); //The normal graphic
     372:	2000      	movs	r0, #0
     374:	4b3b      	ldr	r3, [pc, #236]	; (464 <splashScreen+0x1c4>)
     376:	4798      	blx	r3
	

	
	xCharPos = 40 - (strlen(textPhrase)/2);
     378:	0020      	movs	r0, r4
     37a:	4b3b      	ldr	r3, [pc, #236]	; (468 <splashScreen+0x1c8>)
     37c:	4798      	blx	r3
     37e:	4e3b      	ldr	r6, [pc, #236]	; (46c <splashScreen+0x1cc>)
     380:	0840      	lsrs	r0, r0, #1
     382:	2328      	movs	r3, #40	; 0x28
     384:	1a18      	subs	r0, r3, r0
     386:	8030      	strh	r0, [r6, #0]
	yCharPos = 16;
     388:	4d39      	ldr	r5, [pc, #228]	; (470 <splashScreen+0x1d0>)
     38a:	2310      	movs	r3, #16
     38c:	802b      	strh	r3, [r5, #0]
	
	writeString(textPhrase);
     38e:	0020      	movs	r0, r4
     390:	4b38      	ldr	r3, [pc, #224]	; (474 <splashScreen+0x1d4>)
     392:	4798      	blx	r3

	delay_ms(2000);
     394:	20fa      	movs	r0, #250	; 0xfa
     396:	00c0      	lsls	r0, r0, #3
     398:	4b37      	ldr	r3, [pc, #220]	; (478 <splashScreen+0x1d8>)
     39a:	4798      	blx	r3
	clearScreen();
     39c:	4b2d      	ldr	r3, [pc, #180]	; (454 <splashScreen+0x1b4>)
     39e:	4798      	blx	r3
	
	setColorRGB(0,255,0);
     3a0:	2200      	movs	r2, #0
     3a2:	21ff      	movs	r1, #255	; 0xff
     3a4:	2000      	movs	r0, #0
     3a6:	4b2c      	ldr	r3, [pc, #176]	; (458 <splashScreen+0x1b8>)
     3a8:	4798      	blx	r3
	setBackColorRGB(0,0,0);
     3aa:	2200      	movs	r2, #0
     3ac:	2100      	movs	r1, #0
     3ae:	2000      	movs	r0, #0
     3b0:	4b32      	ldr	r3, [pc, #200]	; (47c <splashScreen+0x1dc>)
     3b2:	4798      	blx	r3
	
	//Setting the xChar and yChar position has to come
	//after splashScreen() and InitLCD();
	xCharPos = 0;
     3b4:	2300      	movs	r3, #0
     3b6:	8033      	strh	r3, [r6, #0]
	yCharPos = 0;
     3b8:	802b      	strh	r3, [r5, #0]
	

     3ba:	bd70      	pop	{r4, r5, r6, pc}
		drawKare(1);
     3bc:	2001      	movs	r0, #1
     3be:	4b29      	ldr	r3, [pc, #164]	; (464 <splashScreen+0x1c4>)
     3c0:	4798      	blx	r3
     3c2:	e7d9      	b.n	378 <splashScreen+0xd8>
     3c4:	200001d8 	.word	0x200001d8
     3c8:	00004aa0 	.word	0x00004aa0
     3cc:	00004ac0 	.word	0x00004ac0
     3d0:	00004ad4 	.word	0x00004ad4
     3d4:	00004aec 	.word	0x00004aec
     3d8:	00004afc 	.word	0x00004afc
     3dc:	00004b04 	.word	0x00004b04
     3e0:	00004b2c 	.word	0x00004b2c
     3e4:	00004b58 	.word	0x00004b58
     3e8:	00004b80 	.word	0x00004b80
     3ec:	00004bac 	.word	0x00004bac
     3f0:	00004bb8 	.word	0x00004bb8
     3f4:	00004bd0 	.word	0x00004bd0
     3f8:	00004bf0 	.word	0x00004bf0
     3fc:	00004c10 	.word	0x00004c10
     400:	00004c34 	.word	0x00004c34
     404:	00004c44 	.word	0x00004c44
     408:	00004c50 	.word	0x00004c50
     40c:	00004c6c 	.word	0x00004c6c
     410:	00004c8c 	.word	0x00004c8c
     414:	00004c94 	.word	0x00004c94
     418:	00004ca8 	.word	0x00004ca8
     41c:	00004cc4 	.word	0x00004cc4
     420:	00004cd4 	.word	0x00004cd4
     424:	00004cf8 	.word	0x00004cf8
     428:	00004d24 	.word	0x00004d24
     42c:	00004d5c 	.word	0x00004d5c
     430:	00004d70 	.word	0x00004d70
     434:	00004d9c 	.word	0x00004d9c
     438:	00004db0 	.word	0x00004db0
     43c:	00004dcc 	.word	0x00004dcc
     440:	00004e0c 	.word	0x00004e0c
     444:	00004e30 	.word	0x00004e30
     448:	00004e50 	.word	0x00004e50
     44c:	00001bfd 	.word	0x00001bfd
     450:	00003a61 	.word	0x00003a61
     454:	00002d71 	.word	0x00002d71
     458:	00002add 	.word	0x00002add
     45c:	4100448c 	.word	0x4100448c
     460:	41004400 	.word	0x41004400
     464:	000001d1 	.word	0x000001d1
     468:	00003c69 	.word	0x00003c69
     46c:	20000298 	.word	0x20000298
     470:	2000029a 	.word	0x2000029a
     474:	00002419 	.word	0x00002419
     478:	0000067d 	.word	0x0000067d
     47c:	00002b05 	.word	0x00002b05

00000480 <parseRXBuffer>:
char tempCharacter;

cbuf_handle_t ouroboros;	

void parseRXBuffer(void)
{
     480:	b5f0      	push	{r4, r5, r6, r7, lr}
     482:	46d6      	mov	lr, sl
     484:	464f      	mov	r7, r9
     486:	4646      	mov	r6, r8
     488:	b5c0      	push	{r6, r7, lr}
     48a:	b082      	sub	sp, #8
		while(!ring_empty(ouroboros))
     48c:	4e60      	ldr	r6, [pc, #384]	; (610 <parseRXBuffer+0x190>)
     48e:	4d61      	ldr	r5, [pc, #388]	; (614 <parseRXBuffer+0x194>)
		{
			uint8_t characterFromRingBuffer;
			ring_get(ouroboros, &characterFromRingBuffer);
     490:	0037      	movs	r7, r6
		while(!ring_empty(ouroboros))
     492:	e018      	b.n	4c6 <parseRXBuffer+0x46>
		
			if(characterFromRingBuffer == 0x0D)  //Carriage Return  //this returns to xcharpos = 0
			{
				if(yCharPos == 23)
     494:	4b60      	ldr	r3, [pc, #384]	; (618 <parseRXBuffer+0x198>)
     496:	881a      	ldrh	r2, [r3, #0]
     498:	2a17      	cmp	r2, #23
     49a:	d04a      	beq.n	532 <parseRXBuffer+0xb2>
					drawChar(0x00);
					blinkCursor();
				}
				else
				{
					drawChar(consoleDisplay[xCharPos][yCharPos]);
     49c:	4c5f      	ldr	r4, [pc, #380]	; (61c <parseRXBuffer+0x19c>)
     49e:	4b60      	ldr	r3, [pc, #384]	; (620 <parseRXBuffer+0x1a0>)
     4a0:	4698      	mov	r8, r3
     4a2:	8819      	ldrh	r1, [r3, #0]
     4a4:	004b      	lsls	r3, r1, #1
     4a6:	185b      	adds	r3, r3, r1
     4a8:	00db      	lsls	r3, r3, #3
     4aa:	18e3      	adds	r3, r4, r3
     4ac:	5c98      	ldrb	r0, [r3, r2]
     4ae:	4b5d      	ldr	r3, [pc, #372]	; (624 <parseRXBuffer+0x1a4>)
     4b0:	4699      	mov	r9, r3
     4b2:	4798      	blx	r3
					xCharPos = 0;
     4b4:	2300      	movs	r3, #0
     4b6:	4642      	mov	r2, r8
     4b8:	8013      	strh	r3, [r2, #0]
					drawChar(consoleDisplay[xCharPos][yCharPos]);
     4ba:	4b57      	ldr	r3, [pc, #348]	; (618 <parseRXBuffer+0x198>)
     4bc:	881b      	ldrh	r3, [r3, #0]
     4be:	5ce0      	ldrb	r0, [r4, r3]
     4c0:	47c8      	blx	r9
					blinkCursor();
     4c2:	4b59      	ldr	r3, [pc, #356]	; (628 <parseRXBuffer+0x1a8>)
     4c4:	4798      	blx	r3
		while(!ring_empty(ouroboros))
     4c6:	6830      	ldr	r0, [r6, #0]
     4c8:	47a8      	blx	r5
     4ca:	2800      	cmp	r0, #0
     4cc:	d000      	beq.n	4d0 <parseRXBuffer+0x50>
     4ce:	e095      	b.n	5fc <parseRXBuffer+0x17c>
			ring_get(ouroboros, &characterFromRingBuffer);
     4d0:	466b      	mov	r3, sp
     4d2:	1ddc      	adds	r4, r3, #7
     4d4:	0021      	movs	r1, r4
     4d6:	6838      	ldr	r0, [r7, #0]
     4d8:	4b54      	ldr	r3, [pc, #336]	; (62c <parseRXBuffer+0x1ac>)
     4da:	4798      	blx	r3
			if(characterFromRingBuffer == 0x0D)  //Carriage Return  //this returns to xcharpos = 0
     4dc:	7820      	ldrb	r0, [r4, #0]
     4de:	280d      	cmp	r0, #13
     4e0:	d0d8      	beq.n	494 <parseRXBuffer+0x14>
				}
			}
			else if(characterFromRingBuffer == 0x0A)	//Line Feed
     4e2:	280a      	cmp	r0, #10
     4e4:	d037      	beq.n	556 <parseRXBuffer+0xd6>
					yCharPos++;
					drawChar(consoleDisplay[xCharPos][yCharPos]);
					blinkCursor();
				}
			}
			else if(characterFromRingBuffer == 0x08)  //Backspace
     4e6:	2808      	cmp	r0, #8
     4e8:	d066      	beq.n	5b8 <parseRXBuffer+0x138>
				xCharPos--;
				tempCharacter = consoleDisplay[xCharPos][yCharPos];
				drawChar(tempCharacter);
				blinkCursor();
			}
			else if(characterFromRingBuffer != 0x00)
     4ea:	2800      	cmp	r0, #0
     4ec:	d0eb      	beq.n	4c6 <parseRXBuffer+0x46>
			{
				//this line places the key to be printed into the console buffer
				consoleDisplay[xCharPos][yCharPos] = characterFromRingBuffer;
     4ee:	4b4b      	ldr	r3, [pc, #300]	; (61c <parseRXBuffer+0x19c>)
     4f0:	4698      	mov	r8, r3
     4f2:	4c4b      	ldr	r4, [pc, #300]	; (620 <parseRXBuffer+0x1a0>)
     4f4:	8822      	ldrh	r2, [r4, #0]
     4f6:	4b48      	ldr	r3, [pc, #288]	; (618 <parseRXBuffer+0x198>)
     4f8:	4699      	mov	r9, r3
     4fa:	8819      	ldrh	r1, [r3, #0]
     4fc:	0053      	lsls	r3, r2, #1
     4fe:	189b      	adds	r3, r3, r2
     500:	00db      	lsls	r3, r3, #3
     502:	4443      	add	r3, r8
     504:	5458      	strb	r0, [r3, r1]
				
				//this line _actually prints the character_
				drawChar(characterFromRingBuffer);
     506:	4b47      	ldr	r3, [pc, #284]	; (624 <parseRXBuffer+0x1a4>)
     508:	469a      	mov	sl, r3
     50a:	4798      	blx	r3

				//move the cursor one postition forward
				xCharPos++;
     50c:	8823      	ldrh	r3, [r4, #0]
     50e:	3301      	adds	r3, #1
     510:	b29b      	uxth	r3, r3
     512:	8023      	strh	r3, [r4, #0]

				//draw the character again, for some reason, idk.
				drawChar(consoleDisplay[xCharPos][yCharPos]);
     514:	464a      	mov	r2, r9
     516:	8811      	ldrh	r1, [r2, #0]
     518:	005a      	lsls	r2, r3, #1
     51a:	18d3      	adds	r3, r2, r3
     51c:	00db      	lsls	r3, r3, #3
     51e:	4443      	add	r3, r8
     520:	5c58      	ldrb	r0, [r3, r1]
     522:	47d0      	blx	sl
				
				if(xCharPos > 79)		//END OF LINE
     524:	8823      	ldrh	r3, [r4, #0]
     526:	2b4f      	cmp	r3, #79	; 0x4f
     528:	d9cd      	bls.n	4c6 <parseRXBuffer+0x46>
				{
					xCharPos--;
     52a:	3b01      	subs	r3, #1
     52c:	4a3c      	ldr	r2, [pc, #240]	; (620 <parseRXBuffer+0x1a0>)
     52e:	8013      	strh	r3, [r2, #0]
     530:	e7c9      	b.n	4c6 <parseRXBuffer+0x46>
					drawChar(consoleDisplay[xCharPos][yCharPos]);
     532:	4c3b      	ldr	r4, [pc, #236]	; (620 <parseRXBuffer+0x1a0>)
     534:	8822      	ldrh	r2, [r4, #0]
     536:	0053      	lsls	r3, r2, #1
     538:	189b      	adds	r3, r3, r2
     53a:	00db      	lsls	r3, r3, #3
     53c:	4a37      	ldr	r2, [pc, #220]	; (61c <parseRXBuffer+0x19c>)
     53e:	18d3      	adds	r3, r2, r3
     540:	7dd8      	ldrb	r0, [r3, #23]
     542:	4b38      	ldr	r3, [pc, #224]	; (624 <parseRXBuffer+0x1a4>)
     544:	4698      	mov	r8, r3
     546:	4798      	blx	r3
					xCharPos = 0;
     548:	2300      	movs	r3, #0
     54a:	8023      	strh	r3, [r4, #0]
					drawChar(0x00);
     54c:	2000      	movs	r0, #0
     54e:	47c0      	blx	r8
					blinkCursor();
     550:	4b35      	ldr	r3, [pc, #212]	; (628 <parseRXBuffer+0x1a8>)
     552:	4798      	blx	r3
     554:	e7b7      	b.n	4c6 <parseRXBuffer+0x46>
				if(yCharPos == 23)
     556:	4b30      	ldr	r3, [pc, #192]	; (618 <parseRXBuffer+0x198>)
     558:	881a      	ldrh	r2, [r3, #0]
     55a:	2a17      	cmp	r2, #23
     55c:	d01b      	beq.n	596 <parseRXBuffer+0x116>
					drawChar(consoleDisplay[xCharPos][yCharPos]);
     55e:	4c2f      	ldr	r4, [pc, #188]	; (61c <parseRXBuffer+0x19c>)
     560:	4b2f      	ldr	r3, [pc, #188]	; (620 <parseRXBuffer+0x1a0>)
     562:	4698      	mov	r8, r3
     564:	8819      	ldrh	r1, [r3, #0]
     566:	004b      	lsls	r3, r1, #1
     568:	185b      	adds	r3, r3, r1
     56a:	00db      	lsls	r3, r3, #3
     56c:	18e3      	adds	r3, r4, r3
     56e:	5c98      	ldrb	r0, [r3, r2]
     570:	4b2c      	ldr	r3, [pc, #176]	; (624 <parseRXBuffer+0x1a4>)
     572:	4699      	mov	r9, r3
     574:	4798      	blx	r3
					yCharPos++;
     576:	4a28      	ldr	r2, [pc, #160]	; (618 <parseRXBuffer+0x198>)
     578:	8813      	ldrh	r3, [r2, #0]
     57a:	3301      	adds	r3, #1
     57c:	b29b      	uxth	r3, r3
     57e:	8013      	strh	r3, [r2, #0]
					drawChar(consoleDisplay[xCharPos][yCharPos]);
     580:	4642      	mov	r2, r8
     582:	8811      	ldrh	r1, [r2, #0]
     584:	004a      	lsls	r2, r1, #1
     586:	1852      	adds	r2, r2, r1
     588:	00d2      	lsls	r2, r2, #3
     58a:	18a4      	adds	r4, r4, r2
     58c:	5ce0      	ldrb	r0, [r4, r3]
     58e:	47c8      	blx	r9
					blinkCursor();
     590:	4b25      	ldr	r3, [pc, #148]	; (628 <parseRXBuffer+0x1a8>)
     592:	4798      	blx	r3
     594:	e797      	b.n	4c6 <parseRXBuffer+0x46>
					drawChar(consoleDisplay[xCharPos][yCharPos]);
     596:	4b22      	ldr	r3, [pc, #136]	; (620 <parseRXBuffer+0x1a0>)
     598:	881a      	ldrh	r2, [r3, #0]
     59a:	0053      	lsls	r3, r2, #1
     59c:	189b      	adds	r3, r3, r2
     59e:	00db      	lsls	r3, r3, #3
     5a0:	4a1e      	ldr	r2, [pc, #120]	; (61c <parseRXBuffer+0x19c>)
     5a2:	18d3      	adds	r3, r2, r3
     5a4:	7dd8      	ldrb	r0, [r3, #23]
     5a6:	4c1f      	ldr	r4, [pc, #124]	; (624 <parseRXBuffer+0x1a4>)
     5a8:	47a0      	blx	r4
					newLine();
     5aa:	4b21      	ldr	r3, [pc, #132]	; (630 <parseRXBuffer+0x1b0>)
     5ac:	4798      	blx	r3
					drawChar(0x00);
     5ae:	2000      	movs	r0, #0
     5b0:	47a0      	blx	r4
					blinkCursor();
     5b2:	4b1d      	ldr	r3, [pc, #116]	; (628 <parseRXBuffer+0x1a8>)
     5b4:	4798      	blx	r3
     5b6:	e786      	b.n	4c6 <parseRXBuffer+0x46>
				drawChar(consoleDisplay[xCharPos][yCharPos]);
     5b8:	4c18      	ldr	r4, [pc, #96]	; (61c <parseRXBuffer+0x19c>)
     5ba:	4b19      	ldr	r3, [pc, #100]	; (620 <parseRXBuffer+0x1a0>)
     5bc:	4698      	mov	r8, r3
     5be:	881a      	ldrh	r2, [r3, #0]
     5c0:	4b15      	ldr	r3, [pc, #84]	; (618 <parseRXBuffer+0x198>)
     5c2:	469a      	mov	sl, r3
     5c4:	8819      	ldrh	r1, [r3, #0]
     5c6:	0053      	lsls	r3, r2, #1
     5c8:	189b      	adds	r3, r3, r2
     5ca:	00db      	lsls	r3, r3, #3
     5cc:	18e3      	adds	r3, r4, r3
     5ce:	5c58      	ldrb	r0, [r3, r1]
     5d0:	4b14      	ldr	r3, [pc, #80]	; (624 <parseRXBuffer+0x1a4>)
     5d2:	4699      	mov	r9, r3
     5d4:	4798      	blx	r3
				xCharPos--;
     5d6:	4643      	mov	r3, r8
     5d8:	881b      	ldrh	r3, [r3, #0]
     5da:	3b01      	subs	r3, #1
     5dc:	b29b      	uxth	r3, r3
     5de:	4642      	mov	r2, r8
     5e0:	8013      	strh	r3, [r2, #0]
				tempCharacter = consoleDisplay[xCharPos][yCharPos];
     5e2:	4652      	mov	r2, sl
     5e4:	8811      	ldrh	r1, [r2, #0]
     5e6:	005a      	lsls	r2, r3, #1
     5e8:	18d3      	adds	r3, r2, r3
     5ea:	00db      	lsls	r3, r3, #3
     5ec:	18e3      	adds	r3, r4, r3
     5ee:	5c58      	ldrb	r0, [r3, r1]
     5f0:	4b10      	ldr	r3, [pc, #64]	; (634 <parseRXBuffer+0x1b4>)
     5f2:	7018      	strb	r0, [r3, #0]
				drawChar(tempCharacter);
     5f4:	47c8      	blx	r9
				blinkCursor();
     5f6:	4b0c      	ldr	r3, [pc, #48]	; (628 <parseRXBuffer+0x1a8>)
     5f8:	4798      	blx	r3
     5fa:	e764      	b.n	4c6 <parseRXBuffer+0x46>
				}
			}
		}
		ring_reset(ouroboros);
     5fc:	4b04      	ldr	r3, [pc, #16]	; (610 <parseRXBuffer+0x190>)
     5fe:	6818      	ldr	r0, [r3, #0]
     600:	4b0d      	ldr	r3, [pc, #52]	; (638 <parseRXBuffer+0x1b8>)
     602:	4798      	blx	r3
}
     604:	b002      	add	sp, #8
     606:	bc1c      	pop	{r2, r3, r4}
     608:	4690      	mov	r8, r2
     60a:	4699      	mov	r9, r3
     60c:	46a2      	mov	sl, r4
     60e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     610:	200002ac 	.word	0x200002ac
     614:	0000017d 	.word	0x0000017d
     618:	2000029a 	.word	0x2000029a
     61c:	20000310 	.word	0x20000310
     620:	20000298 	.word	0x20000298
     624:	00002025 	.word	0x00002025
     628:	000022bd 	.word	0x000022bd
     62c:	00000195 	.word	0x00000195
     630:	0000210d 	.word	0x0000210d
     634:	200002a8 	.word	0x200002a8
     638:	00000135 	.word	0x00000135

0000063c <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     63c:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     63e:	2000      	movs	r0, #0
     640:	4b08      	ldr	r3, [pc, #32]	; (664 <delay_init+0x28>)
     642:	4798      	blx	r3
     644:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     646:	4c08      	ldr	r4, [pc, #32]	; (668 <delay_init+0x2c>)
     648:	21fa      	movs	r1, #250	; 0xfa
     64a:	0089      	lsls	r1, r1, #2
     64c:	47a0      	blx	r4
     64e:	4b07      	ldr	r3, [pc, #28]	; (66c <delay_init+0x30>)
     650:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     652:	4907      	ldr	r1, [pc, #28]	; (670 <delay_init+0x34>)
     654:	0028      	movs	r0, r5
     656:	47a0      	blx	r4
     658:	4b06      	ldr	r3, [pc, #24]	; (674 <delay_init+0x38>)
     65a:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     65c:	2205      	movs	r2, #5
     65e:	4b06      	ldr	r3, [pc, #24]	; (678 <delay_init+0x3c>)
     660:	601a      	str	r2, [r3, #0]
}
     662:	bd70      	pop	{r4, r5, r6, pc}
     664:	00001bfd 	.word	0x00001bfd
     668:	00003499 	.word	0x00003499
     66c:	20000000 	.word	0x20000000
     670:	000f4240 	.word	0x000f4240
     674:	20000004 	.word	0x20000004
     678:	e000e010 	.word	0xe000e010

0000067c <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     67c:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     67e:	4b08      	ldr	r3, [pc, #32]	; (6a0 <delay_cycles_ms+0x24>)
     680:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     682:	4a08      	ldr	r2, [pc, #32]	; (6a4 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     684:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     686:	2180      	movs	r1, #128	; 0x80
     688:	0249      	lsls	r1, r1, #9
	while (n--) {
     68a:	3801      	subs	r0, #1
     68c:	d307      	bcc.n	69e <delay_cycles_ms+0x22>
	if (n > 0) {
     68e:	2c00      	cmp	r4, #0
     690:	d0fb      	beq.n	68a <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     692:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     694:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     696:	6813      	ldr	r3, [r2, #0]
     698:	420b      	tst	r3, r1
     69a:	d0fc      	beq.n	696 <delay_cycles_ms+0x1a>
     69c:	e7f5      	b.n	68a <delay_cycles_ms+0xe>
	}
}
     69e:	bd30      	pop	{r4, r5, pc}
     6a0:	20000000 	.word	0x20000000
     6a4:	e000e010 	.word	0xe000e010

000006a8 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     6a8:	4b0c      	ldr	r3, [pc, #48]	; (6dc <cpu_irq_enter_critical+0x34>)
     6aa:	681b      	ldr	r3, [r3, #0]
     6ac:	2b00      	cmp	r3, #0
     6ae:	d106      	bne.n	6be <cpu_irq_enter_critical+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     6b0:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     6b4:	2b00      	cmp	r3, #0
     6b6:	d007      	beq.n	6c8 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     6b8:	2200      	movs	r2, #0
     6ba:	4b09      	ldr	r3, [pc, #36]	; (6e0 <cpu_irq_enter_critical+0x38>)
     6bc:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     6be:	4a07      	ldr	r2, [pc, #28]	; (6dc <cpu_irq_enter_critical+0x34>)
     6c0:	6813      	ldr	r3, [r2, #0]
     6c2:	3301      	adds	r3, #1
     6c4:	6013      	str	r3, [r2, #0]
}
     6c6:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     6c8:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     6ca:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     6ce:	2200      	movs	r2, #0
     6d0:	4b04      	ldr	r3, [pc, #16]	; (6e4 <cpu_irq_enter_critical+0x3c>)
     6d2:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     6d4:	3201      	adds	r2, #1
     6d6:	4b02      	ldr	r3, [pc, #8]	; (6e0 <cpu_irq_enter_critical+0x38>)
     6d8:	701a      	strb	r2, [r3, #0]
     6da:	e7f0      	b.n	6be <cpu_irq_enter_critical+0x16>
     6dc:	20000258 	.word	0x20000258
     6e0:	2000025c 	.word	0x2000025c
     6e4:	20000008 	.word	0x20000008

000006e8 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     6e8:	4b08      	ldr	r3, [pc, #32]	; (70c <cpu_irq_leave_critical+0x24>)
     6ea:	681a      	ldr	r2, [r3, #0]
     6ec:	3a01      	subs	r2, #1
     6ee:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     6f0:	681b      	ldr	r3, [r3, #0]
     6f2:	2b00      	cmp	r3, #0
     6f4:	d109      	bne.n	70a <cpu_irq_leave_critical+0x22>
     6f6:	4b06      	ldr	r3, [pc, #24]	; (710 <cpu_irq_leave_critical+0x28>)
     6f8:	781b      	ldrb	r3, [r3, #0]
     6fa:	2b00      	cmp	r3, #0
     6fc:	d005      	beq.n	70a <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     6fe:	2201      	movs	r2, #1
     700:	4b04      	ldr	r3, [pc, #16]	; (714 <cpu_irq_leave_critical+0x2c>)
     702:	701a      	strb	r2, [r3, #0]
     704:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     708:	b662      	cpsie	i
	}
}
     70a:	4770      	bx	lr
     70c:	20000258 	.word	0x20000258
     710:	2000025c 	.word	0x2000025c
     714:	20000008 	.word	0x20000008

00000718 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     718:	b5f0      	push	{r4, r5, r6, r7, lr}
     71a:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     71c:	ac01      	add	r4, sp, #4
     71e:	2501      	movs	r5, #1
     720:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     722:	2700      	movs	r7, #0
     724:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     726:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     728:	0021      	movs	r1, r4
     72a:	203e      	movs	r0, #62	; 0x3e
     72c:	4e06      	ldr	r6, [pc, #24]	; (748 <system_board_init+0x30>)
     72e:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     730:	2280      	movs	r2, #128	; 0x80
     732:	05d2      	lsls	r2, r2, #23
     734:	4b05      	ldr	r3, [pc, #20]	; (74c <system_board_init+0x34>)
     736:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     738:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     73a:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     73c:	0021      	movs	r1, r4
     73e:	200f      	movs	r0, #15
     740:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
     742:	b003      	add	sp, #12
     744:	bdf0      	pop	{r4, r5, r6, r7, pc}
     746:	46c0      	nop			; (mov r8, r8)
     748:	00000c81 	.word	0x00000c81
     74c:	41004480 	.word	0x41004480

00000750 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     750:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     752:	2200      	movs	r2, #0
     754:	2300      	movs	r3, #0
     756:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
     758:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
     75a:	2100      	movs	r1, #0
     75c:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     75e:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     760:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
     762:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
     764:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
     766:	6082      	str	r2, [r0, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	//config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
     768:	24c0      	movs	r4, #192	; 0xc0
     76a:	0164      	lsls	r4, r4, #5
     76c:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     76e:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     770:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
     772:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
     774:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
     776:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     778:	242a      	movs	r4, #42	; 0x2a
     77a:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
     77c:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
     77e:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
     780:	3c06      	subs	r4, #6
     782:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     784:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     786:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
     788:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
     78a:	232b      	movs	r3, #43	; 0x2b
     78c:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
     78e:	3301      	adds	r3, #1
     790:	54c1      	strb	r1, [r0, r3]
}
     792:	bd10      	pop	{r4, pc}

00000794 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     794:	b5f0      	push	{r4, r5, r6, r7, lr}
     796:	46d6      	mov	lr, sl
     798:	464f      	mov	r7, r9
     79a:	4646      	mov	r6, r8
     79c:	b5c0      	push	{r6, r7, lr}
     79e:	b096      	sub	sp, #88	; 0x58
     7a0:	0007      	movs	r7, r0
     7a2:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     7a4:	6001      	str	r1, [r0, #0]
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     7a6:	4ac6      	ldr	r2, [pc, #792]	; (ac0 <adc_init+0x32c>)
     7a8:	6a10      	ldr	r0, [r2, #32]
     7aa:	2380      	movs	r3, #128	; 0x80
     7ac:	025b      	lsls	r3, r3, #9
     7ae:	4303      	orrs	r3, r0
     7b0:	6213      	str	r3, [r2, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     7b2:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     7b4:	2005      	movs	r0, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     7b6:	07db      	lsls	r3, r3, #31
     7b8:	d505      	bpl.n	7c6 <adc_init+0x32>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
     7ba:	b016      	add	sp, #88	; 0x58
     7bc:	bc1c      	pop	{r2, r3, r4}
     7be:	4690      	mov	r8, r2
     7c0:	4699      	mov	r9, r3
     7c2:	46a2      	mov	sl, r4
     7c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     7c6:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
     7c8:	3017      	adds	r0, #23
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     7ca:	079b      	lsls	r3, r3, #30
     7cc:	d4f5      	bmi.n	7ba <adc_init+0x26>
	module_inst->reference = config->reference;
     7ce:	7873      	ldrb	r3, [r6, #1]
     7d0:	713b      	strb	r3, [r7, #4]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
     7d2:	2b00      	cmp	r3, #0
     7d4:	d104      	bne.n	7e0 <adc_init+0x4c>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
     7d6:	4abb      	ldr	r2, [pc, #748]	; (ac4 <adc_init+0x330>)
     7d8:	6c13      	ldr	r3, [r2, #64]	; 0x40
     7da:	2104      	movs	r1, #4
     7dc:	430b      	orrs	r3, r1
     7de:	6413      	str	r3, [r2, #64]	; 0x40
		module_inst->callback[i] = NULL;
     7e0:	2300      	movs	r3, #0
     7e2:	60bb      	str	r3, [r7, #8]
     7e4:	60fb      	str	r3, [r7, #12]
     7e6:	613b      	str	r3, [r7, #16]
	module_inst->registered_callback_mask = 0;
     7e8:	76bb      	strb	r3, [r7, #26]
	module_inst->enabled_callback_mask = 0;
     7ea:	76fb      	strb	r3, [r7, #27]
	module_inst->remaining_conversions = 0;
     7ec:	833b      	strh	r3, [r7, #24]
	module_inst->job_status = STATUS_OK;
     7ee:	773b      	strb	r3, [r7, #28]
	_adc_instances[0] = module_inst;
     7f0:	4bb5      	ldr	r3, [pc, #724]	; (ac8 <adc_init+0x334>)
     7f2:	601f      	str	r7, [r3, #0]
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
     7f4:	232a      	movs	r3, #42	; 0x2a
     7f6:	5cf3      	ldrb	r3, [r6, r3]
     7f8:	2b00      	cmp	r3, #0
     7fa:	d105      	bne.n	808 <adc_init+0x74>
     7fc:	7d33      	ldrb	r3, [r6, #20]
     7fe:	2b00      	cmp	r3, #0
     800:	d102      	bne.n	808 <adc_init+0x74>
		module_inst->software_trigger = true;
     802:	3301      	adds	r3, #1
     804:	777b      	strb	r3, [r7, #29]
     806:	e001      	b.n	80c <adc_init+0x78>
		module_inst->software_trigger = false;
     808:	2300      	movs	r3, #0
     80a:	777b      	strb	r3, [r7, #29]
	Adc *const adc_module = module_inst->hw;
     80c:	683b      	ldr	r3, [r7, #0]
     80e:	4698      	mov	r8, r3
	gclk_chan_conf.source_generator = config->clock_source;
     810:	7833      	ldrb	r3, [r6, #0]
     812:	466a      	mov	r2, sp
     814:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
     816:	4669      	mov	r1, sp
     818:	201e      	movs	r0, #30
     81a:	4bac      	ldr	r3, [pc, #688]	; (acc <adc_init+0x338>)
     81c:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
     81e:	201e      	movs	r0, #30
     820:	4bab      	ldr	r3, [pc, #684]	; (ad0 <adc_init+0x33c>)
     822:	4798      	blx	r3
	if (config->pin_scan.inputs_to_scan != 0) {
     824:	232c      	movs	r3, #44	; 0x2c
     826:	5cf2      	ldrb	r2, [r6, r3]
     828:	2a00      	cmp	r2, #0
     82a:	d054      	beq.n	8d6 <adc_init+0x142>
		uint8_t offset = config->pin_scan.offset_start_scan;
     82c:	3b01      	subs	r3, #1
     82e:	5cf5      	ldrb	r5, [r6, r3]
		uint8_t start_pin =
     830:	7b33      	ldrb	r3, [r6, #12]
     832:	18eb      	adds	r3, r5, r3
     834:	b2db      	uxtb	r3, r3
		uint8_t end_pin =
     836:	18d1      	adds	r1, r2, r3
		while (start_pin < end_pin) {
     838:	b2c9      	uxtb	r1, r1
     83a:	428b      	cmp	r3, r1
     83c:	d221      	bcs.n	882 <adc_init+0xee>
     83e:	1952      	adds	r2, r2, r5
     840:	b2d3      	uxtb	r3, r2
     842:	4699      	mov	r9, r3
	const uint32_t pinmapping[] = {
     844:	4ba3      	ldr	r3, [pc, #652]	; (ad4 <adc_init+0x340>)
     846:	469a      	mov	sl, r3
     848:	e003      	b.n	852 <adc_init+0xbe>
			offset++;
     84a:	3501      	adds	r5, #1
     84c:	b2ed      	uxtb	r5, r5
		while (start_pin < end_pin) {
     84e:	454d      	cmp	r5, r9
     850:	d017      	beq.n	882 <adc_init+0xee>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
     852:	240f      	movs	r4, #15
     854:	402c      	ands	r4, r5
     856:	7b33      	ldrb	r3, [r6, #12]
     858:	18e4      	adds	r4, r4, r3
	const uint32_t pinmapping[] = {
     85a:	2250      	movs	r2, #80	; 0x50
     85c:	499e      	ldr	r1, [pc, #632]	; (ad8 <adc_init+0x344>)
     85e:	a802      	add	r0, sp, #8
     860:	47d0      	blx	sl
	if (pin <= ADC_EXTCHANNEL_MSB) {
     862:	2c13      	cmp	r4, #19
     864:	d8f1      	bhi.n	84a <adc_init+0xb6>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     866:	00a4      	lsls	r4, r4, #2
     868:	ab02      	add	r3, sp, #8
     86a:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     86c:	a901      	add	r1, sp, #4
     86e:	2300      	movs	r3, #0
     870:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     872:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     874:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     876:	3301      	adds	r3, #1
     878:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     87a:	b2c0      	uxtb	r0, r0
     87c:	4b97      	ldr	r3, [pc, #604]	; (adc <adc_init+0x348>)
     87e:	4798      	blx	r3
     880:	e7e3      	b.n	84a <adc_init+0xb6>
		_adc_configure_ain_pin(config->negative_input);
     882:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     884:	2250      	movs	r2, #80	; 0x50
     886:	4994      	ldr	r1, [pc, #592]	; (ad8 <adc_init+0x344>)
     888:	a802      	add	r0, sp, #8
     88a:	4b92      	ldr	r3, [pc, #584]	; (ad4 <adc_init+0x340>)
     88c:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     88e:	2c13      	cmp	r4, #19
     890:	d913      	bls.n	8ba <adc_init+0x126>
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
     892:	7d73      	ldrb	r3, [r6, #21]
     894:	009b      	lsls	r3, r3, #2
     896:	b2db      	uxtb	r3, r3
     898:	4642      	mov	r2, r8
     89a:	7013      	strb	r3, [r2, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     89c:	7db3      	ldrb	r3, [r6, #22]
     89e:	01db      	lsls	r3, r3, #7
     8a0:	7872      	ldrb	r2, [r6, #1]
     8a2:	4313      	orrs	r3, r2
     8a4:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
     8a6:	4642      	mov	r2, r8
     8a8:	7053      	strb	r3, [r2, #1]
	switch (config->resolution) {
     8aa:	7933      	ldrb	r3, [r6, #4]
     8ac:	2b34      	cmp	r3, #52	; 0x34
     8ae:	d900      	bls.n	8b2 <adc_init+0x11e>
     8b0:	e17b      	b.n	baa <adc_init+0x416>
     8b2:	009b      	lsls	r3, r3, #2
     8b4:	4a8a      	ldr	r2, [pc, #552]	; (ae0 <adc_init+0x34c>)
     8b6:	58d3      	ldr	r3, [r2, r3]
     8b8:	469f      	mov	pc, r3
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     8ba:	00a4      	lsls	r4, r4, #2
     8bc:	ab02      	add	r3, sp, #8
     8be:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     8c0:	a901      	add	r1, sp, #4
     8c2:	2300      	movs	r3, #0
     8c4:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     8c6:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     8c8:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     8ca:	3301      	adds	r3, #1
     8cc:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     8ce:	b2c0      	uxtb	r0, r0
     8d0:	4b82      	ldr	r3, [pc, #520]	; (adc <adc_init+0x348>)
     8d2:	4798      	blx	r3
     8d4:	e7dd      	b.n	892 <adc_init+0xfe>
		_adc_configure_ain_pin(config->positive_input);
     8d6:	7b34      	ldrb	r4, [r6, #12]
	const uint32_t pinmapping[] = {
     8d8:	2250      	movs	r2, #80	; 0x50
     8da:	497f      	ldr	r1, [pc, #508]	; (ad8 <adc_init+0x344>)
     8dc:	a802      	add	r0, sp, #8
     8de:	4b7d      	ldr	r3, [pc, #500]	; (ad4 <adc_init+0x340>)
     8e0:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     8e2:	2c13      	cmp	r4, #19
     8e4:	d915      	bls.n	912 <adc_init+0x17e>
		_adc_configure_ain_pin(config->negative_input);
     8e6:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     8e8:	2250      	movs	r2, #80	; 0x50
     8ea:	497b      	ldr	r1, [pc, #492]	; (ad8 <adc_init+0x344>)
     8ec:	a802      	add	r0, sp, #8
     8ee:	4b79      	ldr	r3, [pc, #484]	; (ad4 <adc_init+0x340>)
     8f0:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     8f2:	2c13      	cmp	r4, #19
     8f4:	d8cd      	bhi.n	892 <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     8f6:	00a4      	lsls	r4, r4, #2
     8f8:	ab02      	add	r3, sp, #8
     8fa:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     8fc:	a901      	add	r1, sp, #4
     8fe:	2300      	movs	r3, #0
     900:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     902:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     904:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     906:	3301      	adds	r3, #1
     908:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     90a:	b2c0      	uxtb	r0, r0
     90c:	4b73      	ldr	r3, [pc, #460]	; (adc <adc_init+0x348>)
     90e:	4798      	blx	r3
     910:	e7bf      	b.n	892 <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     912:	00a4      	lsls	r4, r4, #2
     914:	ab02      	add	r3, sp, #8
     916:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     918:	a901      	add	r1, sp, #4
     91a:	2300      	movs	r3, #0
     91c:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     91e:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     920:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     922:	3301      	adds	r3, #1
     924:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     926:	b2c0      	uxtb	r0, r0
     928:	4b6c      	ldr	r3, [pc, #432]	; (adc <adc_init+0x348>)
     92a:	4798      	blx	r3
     92c:	e7db      	b.n	8e6 <adc_init+0x152>
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     92e:	2304      	movs	r3, #4
		resolution = ADC_RESOLUTION_16BIT;
     930:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_4;
     932:	2102      	movs	r1, #2
     934:	e01a      	b.n	96c <adc_init+0x1d8>
		adjres = config->divide_result;
     936:	7c71      	ldrb	r1, [r6, #17]
		accumulate = config->accumulate_samples;
     938:	7c33      	ldrb	r3, [r6, #16]
		resolution = ADC_RESOLUTION_16BIT;
     93a:	2410      	movs	r4, #16
     93c:	e016      	b.n	96c <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     93e:	2306      	movs	r3, #6
		resolution = ADC_RESOLUTION_16BIT;
     940:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     942:	2101      	movs	r1, #1
     944:	e012      	b.n	96c <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     946:	2308      	movs	r3, #8
		resolution = ADC_RESOLUTION_16BIT;
     948:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     94a:	2100      	movs	r1, #0
     94c:	e00e      	b.n	96c <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     94e:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_8BIT;
     950:	2430      	movs	r4, #48	; 0x30
	uint8_t adjres = 0;
     952:	2100      	movs	r1, #0
     954:	e00a      	b.n	96c <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     956:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_10BIT;
     958:	2420      	movs	r4, #32
	uint8_t adjres = 0;
     95a:	2100      	movs	r1, #0
     95c:	e006      	b.n	96c <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     95e:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_12BIT;
     960:	2400      	movs	r4, #0
	uint8_t adjres = 0;
     962:	2100      	movs	r1, #0
     964:	e002      	b.n	96c <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     966:	2302      	movs	r3, #2
		resolution = ADC_RESOLUTION_16BIT;
     968:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     96a:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     96c:	0109      	lsls	r1, r1, #4
     96e:	2270      	movs	r2, #112	; 0x70
     970:	400a      	ands	r2, r1
     972:	4313      	orrs	r3, r2
     974:	4642      	mov	r2, r8
     976:	7093      	strb	r3, [r2, #2]
	if (config->sample_length > 63) {
     978:	7df3      	ldrb	r3, [r6, #23]
		return STATUS_ERR_INVALID_ARG;
     97a:	2017      	movs	r0, #23
	if (config->sample_length > 63) {
     97c:	2b3f      	cmp	r3, #63	; 0x3f
     97e:	d900      	bls.n	982 <adc_init+0x1ee>
     980:	e71b      	b.n	7ba <adc_init+0x26>
		adc_module->SAMPCTRL.reg =
     982:	70d3      	strb	r3, [r2, #3]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     984:	683a      	ldr	r2, [r7, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     986:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     988:	b25b      	sxtb	r3, r3
     98a:	2b00      	cmp	r3, #0
     98c:	dbfb      	blt.n	986 <adc_init+0x1f2>
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
     98e:	7cf3      	ldrb	r3, [r6, #19]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     990:	8872      	ldrh	r2, [r6, #2]
     992:	4313      	orrs	r3, r2
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     994:	2224      	movs	r2, #36	; 0x24
     996:	5cb2      	ldrb	r2, [r6, r2]
     998:	00d2      	lsls	r2, r2, #3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     99a:	4313      	orrs	r3, r2
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
     99c:	7d32      	ldrb	r2, [r6, #20]
     99e:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     9a0:	4313      	orrs	r3, r2
     9a2:	7cb2      	ldrb	r2, [r6, #18]
     9a4:	0052      	lsls	r2, r2, #1
     9a6:	4313      	orrs	r3, r2
     9a8:	4323      	orrs	r3, r4
	adc_module->CTRLB.reg =
     9aa:	4642      	mov	r2, r8
     9ac:	8093      	strh	r3, [r2, #4]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     9ae:	7e33      	ldrb	r3, [r6, #24]
     9b0:	2b00      	cmp	r3, #0
     9b2:	d020      	beq.n	9f6 <adc_init+0x262>
		switch (resolution) {
     9b4:	2c10      	cmp	r4, #16
     9b6:	d100      	bne.n	9ba <adc_init+0x226>
     9b8:	e0d9      	b.n	b6e <adc_init+0x3da>
     9ba:	d800      	bhi.n	9be <adc_init+0x22a>
     9bc:	e098      	b.n	af0 <adc_init+0x35c>
     9be:	2c20      	cmp	r4, #32
     9c0:	d100      	bne.n	9c4 <adc_init+0x230>
     9c2:	e0b6      	b.n	b32 <adc_init+0x39e>
     9c4:	2c30      	cmp	r4, #48	; 0x30
     9c6:	d116      	bne.n	9f6 <adc_init+0x262>
			if (config->differential_mode &&
     9c8:	7cf2      	ldrb	r2, [r6, #19]
     9ca:	2a00      	cmp	r2, #0
     9cc:	d00a      	beq.n	9e4 <adc_init+0x250>
					(config->window.window_lower_value > 127 ||
     9ce:	69f2      	ldr	r2, [r6, #28]
     9d0:	3280      	adds	r2, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
     9d2:	2017      	movs	r0, #23
			if (config->differential_mode &&
     9d4:	2aff      	cmp	r2, #255	; 0xff
     9d6:	d900      	bls.n	9da <adc_init+0x246>
     9d8:	e6ef      	b.n	7ba <adc_init+0x26>
					config->window.window_lower_value < -128 ||
     9da:	6a32      	ldr	r2, [r6, #32]
     9dc:	3280      	adds	r2, #128	; 0x80
     9de:	2aff      	cmp	r2, #255	; 0xff
     9e0:	d900      	bls.n	9e4 <adc_init+0x250>
     9e2:	e6ea      	b.n	7ba <adc_init+0x26>
				return STATUS_ERR_INVALID_ARG;
     9e4:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 255 ||
     9e6:	69f2      	ldr	r2, [r6, #28]
     9e8:	2aff      	cmp	r2, #255	; 0xff
     9ea:	dd00      	ble.n	9ee <adc_init+0x25a>
     9ec:	e6e5      	b.n	7ba <adc_init+0x26>
     9ee:	6a32      	ldr	r2, [r6, #32]
     9f0:	2aff      	cmp	r2, #255	; 0xff
     9f2:	dd00      	ble.n	9f6 <adc_init+0x262>
     9f4:	e6e1      	b.n	7ba <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     9f6:	6839      	ldr	r1, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     9f8:	7e4a      	ldrb	r2, [r1, #25]
	while (adc_is_syncing(module_inst)) {
     9fa:	b252      	sxtb	r2, r2
     9fc:	2a00      	cmp	r2, #0
     9fe:	dbfb      	blt.n	9f8 <adc_init+0x264>
	adc_module->WINCTRL.reg = config->window.window_mode;
     a00:	4642      	mov	r2, r8
     a02:	7213      	strb	r3, [r2, #8]
	Adc *const adc_module = module_inst->hw;
     a04:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     a06:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     a08:	b25b      	sxtb	r3, r3
     a0a:	2b00      	cmp	r3, #0
     a0c:	dbfb      	blt.n	a06 <adc_init+0x272>
	adc_module->WINLT.reg =
     a0e:	8bb3      	ldrh	r3, [r6, #28]
     a10:	4642      	mov	r2, r8
     a12:	8393      	strh	r3, [r2, #28]
	Adc *const adc_module = module_inst->hw;
     a14:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     a16:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     a18:	b25b      	sxtb	r3, r3
     a1a:	2b00      	cmp	r3, #0
     a1c:	dbfb      	blt.n	a16 <adc_init+0x282>
	adc_module->WINUT.reg = config->window.window_upper_value <<
     a1e:	8c33      	ldrh	r3, [r6, #32]
     a20:	4642      	mov	r2, r8
     a22:	8413      	strh	r3, [r2, #32]
	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
     a24:	232c      	movs	r3, #44	; 0x2c
     a26:	5cf3      	ldrb	r3, [r6, r3]
	if (inputs_to_scan > 0) {
     a28:	2b00      	cmp	r3, #0
     a2a:	d005      	beq.n	a38 <adc_init+0x2a4>
		inputs_to_scan--;
     a2c:	3b01      	subs	r3, #1
     a2e:	b2db      	uxtb	r3, r3
		return STATUS_ERR_INVALID_ARG;
     a30:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     a32:	2b0f      	cmp	r3, #15
     a34:	d900      	bls.n	a38 <adc_init+0x2a4>
     a36:	e6c0      	b.n	7ba <adc_init+0x26>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
     a38:	222b      	movs	r2, #43	; 0x2b
     a3a:	5cb1      	ldrb	r1, [r6, r2]
		return STATUS_ERR_INVALID_ARG;
     a3c:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     a3e:	290f      	cmp	r1, #15
     a40:	d900      	bls.n	a44 <adc_init+0x2b0>
     a42:	e6ba      	b.n	7ba <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     a44:	6838      	ldr	r0, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     a46:	7e42      	ldrb	r2, [r0, #25]
	while (adc_is_syncing(module_inst)) {
     a48:	b252      	sxtb	r2, r2
     a4a:	2a00      	cmp	r2, #0
     a4c:	dbfb      	blt.n	a46 <adc_init+0x2b2>
			config->negative_input |
     a4e:	89f2      	ldrh	r2, [r6, #14]
			config->positive_input;
     a50:	7b30      	ldrb	r0, [r6, #12]
			config->negative_input |
     a52:	4302      	orrs	r2, r0
     a54:	68b0      	ldr	r0, [r6, #8]
     a56:	4302      	orrs	r2, r0
			(config->pin_scan.offset_start_scan <<
     a58:	0509      	lsls	r1, r1, #20
			config->negative_input |
     a5a:	430a      	orrs	r2, r1
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     a5c:	041b      	lsls	r3, r3, #16
			config->negative_input |
     a5e:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
     a60:	4642      	mov	r2, r8
     a62:	6113      	str	r3, [r2, #16]
	adc_module->EVCTRL.reg = config->event_action;
     a64:	232a      	movs	r3, #42	; 0x2a
     a66:	5cf3      	ldrb	r3, [r6, r3]
     a68:	7513      	strb	r3, [r2, #20]
	adc_module->INTENCLR.reg =
     a6a:	230f      	movs	r3, #15
     a6c:	7593      	strb	r3, [r2, #22]
	if (config->correction.correction_enable){
     a6e:	3315      	adds	r3, #21
     a70:	5cf3      	ldrb	r3, [r6, r3]
     a72:	2b00      	cmp	r3, #0
     a74:	d012      	beq.n	a9c <adc_init+0x308>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     a76:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
     a78:	4a1a      	ldr	r2, [pc, #104]	; (ae4 <adc_init+0x350>)
			return STATUS_ERR_INVALID_ARG;
     a7a:	2017      	movs	r0, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     a7c:	4293      	cmp	r3, r2
     a7e:	d900      	bls.n	a82 <adc_init+0x2ee>
     a80:	e69b      	b.n	7ba <adc_init+0x26>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     a82:	4642      	mov	r2, r8
     a84:	8493      	strh	r3, [r2, #36]	; 0x24
		if (config->correction.offset_correction > 2047 ||
     a86:	8d32      	ldrh	r2, [r6, #40]	; 0x28
     a88:	2380      	movs	r3, #128	; 0x80
     a8a:	011b      	lsls	r3, r3, #4
     a8c:	18d3      	adds	r3, r2, r3
     a8e:	4915      	ldr	r1, [pc, #84]	; (ae4 <adc_init+0x350>)
     a90:	b29b      	uxth	r3, r3
     a92:	428b      	cmp	r3, r1
     a94:	d900      	bls.n	a98 <adc_init+0x304>
     a96:	e690      	b.n	7ba <adc_init+0x26>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     a98:	4643      	mov	r3, r8
     a9a:	84da      	strh	r2, [r3, #38]	; 0x26
			ADC_CALIB_BIAS_CAL(
     a9c:	4b12      	ldr	r3, [pc, #72]	; (ae8 <adc_init+0x354>)
     a9e:	681b      	ldr	r3, [r3, #0]
     aa0:	015b      	lsls	r3, r3, #5
     aa2:	22e0      	movs	r2, #224	; 0xe0
     aa4:	00d2      	lsls	r2, r2, #3
     aa6:	4013      	ands	r3, r2
			ADC_CALIB_LINEARITY_CAL(
     aa8:	4a10      	ldr	r2, [pc, #64]	; (aec <adc_init+0x358>)
     aaa:	6851      	ldr	r1, [r2, #4]
     aac:	0149      	lsls	r1, r1, #5
     aae:	6812      	ldr	r2, [r2, #0]
     ab0:	0ed2      	lsrs	r2, r2, #27
     ab2:	430a      	orrs	r2, r1
     ab4:	b2d2      	uxtb	r2, r2
			) |
     ab6:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
     ab8:	4642      	mov	r2, r8
     aba:	8513      	strh	r3, [r2, #40]	; 0x28
	return STATUS_OK;
     abc:	2000      	movs	r0, #0
     abe:	e67c      	b.n	7ba <adc_init+0x26>
     ac0:	40000400 	.word	0x40000400
     ac4:	40000800 	.word	0x40000800
     ac8:	200002b0 	.word	0x200002b0
     acc:	00001d15 	.word	0x00001d15
     ad0:	00001c89 	.word	0x00001c89
     ad4:	00003835 	.word	0x00003835
     ad8:	00004f44 	.word	0x00004f44
     adc:	00001e0d 	.word	0x00001e0d
     ae0:	00004e70 	.word	0x00004e70
     ae4:	00000fff 	.word	0x00000fff
     ae8:	00806024 	.word	0x00806024
     aec:	00806020 	.word	0x00806020
		switch (resolution) {
     af0:	2c00      	cmp	r4, #0
     af2:	d000      	beq.n	af6 <adc_init+0x362>
     af4:	e77f      	b.n	9f6 <adc_init+0x262>
			if (config->differential_mode &&
     af6:	7cf2      	ldrb	r2, [r6, #19]
     af8:	2a00      	cmp	r2, #0
     afa:	d00f      	beq.n	b1c <adc_init+0x388>
					(config->window.window_lower_value > 2047 ||
     afc:	69f2      	ldr	r2, [r6, #28]
     afe:	2180      	movs	r1, #128	; 0x80
     b00:	0109      	lsls	r1, r1, #4
     b02:	468c      	mov	ip, r1
     b04:	4462      	add	r2, ip
			if (config->differential_mode &&
     b06:	492a      	ldr	r1, [pc, #168]	; (bb0 <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
     b08:	2017      	movs	r0, #23
			if (config->differential_mode &&
     b0a:	428a      	cmp	r2, r1
     b0c:	d900      	bls.n	b10 <adc_init+0x37c>
     b0e:	e654      	b.n	7ba <adc_init+0x26>
					config->window.window_lower_value < -2048 ||
     b10:	6a32      	ldr	r2, [r6, #32]
     b12:	4462      	add	r2, ip
     b14:	4926      	ldr	r1, [pc, #152]	; (bb0 <adc_init+0x41c>)
     b16:	428a      	cmp	r2, r1
     b18:	d900      	bls.n	b1c <adc_init+0x388>
     b1a:	e64e      	b.n	7ba <adc_init+0x26>
			} else if (config->window.window_lower_value > 4095 ||
     b1c:	4a24      	ldr	r2, [pc, #144]	; (bb0 <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
     b1e:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
     b20:	69f1      	ldr	r1, [r6, #28]
     b22:	4291      	cmp	r1, r2
     b24:	dd00      	ble.n	b28 <adc_init+0x394>
     b26:	e648      	b.n	7ba <adc_init+0x26>
     b28:	6a31      	ldr	r1, [r6, #32]
     b2a:	4291      	cmp	r1, r2
     b2c:	dd00      	ble.n	b30 <adc_init+0x39c>
     b2e:	e644      	b.n	7ba <adc_init+0x26>
     b30:	e761      	b.n	9f6 <adc_init+0x262>
			if (config->differential_mode &&
     b32:	7cf2      	ldrb	r2, [r6, #19]
     b34:	2a00      	cmp	r2, #0
     b36:	d00f      	beq.n	b58 <adc_init+0x3c4>
					(config->window.window_lower_value > 511 ||
     b38:	69f2      	ldr	r2, [r6, #28]
     b3a:	2180      	movs	r1, #128	; 0x80
     b3c:	0089      	lsls	r1, r1, #2
     b3e:	468c      	mov	ip, r1
     b40:	4462      	add	r2, ip
			if (config->differential_mode &&
     b42:	491c      	ldr	r1, [pc, #112]	; (bb4 <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
     b44:	2017      	movs	r0, #23
			if (config->differential_mode &&
     b46:	428a      	cmp	r2, r1
     b48:	d900      	bls.n	b4c <adc_init+0x3b8>
     b4a:	e636      	b.n	7ba <adc_init+0x26>
					config->window.window_lower_value < -512 ||
     b4c:	6a32      	ldr	r2, [r6, #32]
     b4e:	4462      	add	r2, ip
     b50:	4918      	ldr	r1, [pc, #96]	; (bb4 <adc_init+0x420>)
     b52:	428a      	cmp	r2, r1
     b54:	d900      	bls.n	b58 <adc_init+0x3c4>
     b56:	e630      	b.n	7ba <adc_init+0x26>
			} else if (config->window.window_lower_value > 1023 ||
     b58:	4a16      	ldr	r2, [pc, #88]	; (bb4 <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
     b5a:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
     b5c:	69f1      	ldr	r1, [r6, #28]
     b5e:	4291      	cmp	r1, r2
     b60:	dd00      	ble.n	b64 <adc_init+0x3d0>
     b62:	e62a      	b.n	7ba <adc_init+0x26>
     b64:	6a31      	ldr	r1, [r6, #32]
     b66:	4291      	cmp	r1, r2
     b68:	dd00      	ble.n	b6c <adc_init+0x3d8>
     b6a:	e626      	b.n	7ba <adc_init+0x26>
     b6c:	e743      	b.n	9f6 <adc_init+0x262>
			if (config->differential_mode &&
     b6e:	7cf2      	ldrb	r2, [r6, #19]
     b70:	2a00      	cmp	r2, #0
     b72:	d00f      	beq.n	b94 <adc_init+0x400>
					(config->window.window_lower_value > 32767 ||
     b74:	69f2      	ldr	r2, [r6, #28]
     b76:	2180      	movs	r1, #128	; 0x80
     b78:	0209      	lsls	r1, r1, #8
     b7a:	468c      	mov	ip, r1
     b7c:	4462      	add	r2, ip
			if (config->differential_mode &&
     b7e:	490e      	ldr	r1, [pc, #56]	; (bb8 <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
     b80:	2017      	movs	r0, #23
			if (config->differential_mode &&
     b82:	428a      	cmp	r2, r1
     b84:	d900      	bls.n	b88 <adc_init+0x3f4>
     b86:	e618      	b.n	7ba <adc_init+0x26>
					config->window.window_lower_value < -32768 ||
     b88:	6a32      	ldr	r2, [r6, #32]
     b8a:	4462      	add	r2, ip
     b8c:	490a      	ldr	r1, [pc, #40]	; (bb8 <adc_init+0x424>)
     b8e:	428a      	cmp	r2, r1
     b90:	d900      	bls.n	b94 <adc_init+0x400>
     b92:	e612      	b.n	7ba <adc_init+0x26>
			} else if (config->window.window_lower_value > 65535 ||
     b94:	4a08      	ldr	r2, [pc, #32]	; (bb8 <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
     b96:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
     b98:	69f1      	ldr	r1, [r6, #28]
     b9a:	4291      	cmp	r1, r2
     b9c:	dd00      	ble.n	ba0 <adc_init+0x40c>
     b9e:	e60c      	b.n	7ba <adc_init+0x26>
     ba0:	6a31      	ldr	r1, [r6, #32]
     ba2:	4291      	cmp	r1, r2
     ba4:	dd00      	ble.n	ba8 <adc_init+0x414>
     ba6:	e608      	b.n	7ba <adc_init+0x26>
     ba8:	e725      	b.n	9f6 <adc_init+0x262>
		return STATUS_ERR_INVALID_ARG;
     baa:	2017      	movs	r0, #23
     bac:	e605      	b.n	7ba <adc_init+0x26>
     bae:	46c0      	nop			; (mov r8, r8)
     bb0:	00000fff 	.word	0x00000fff
     bb4:	000003ff 	.word	0x000003ff
     bb8:	0000ffff 	.word	0x0000ffff

00000bbc <ADC_Handler>:
	}
}

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
     bbc:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
     bbe:	4b2f      	ldr	r3, [pc, #188]	; (c7c <ADC_Handler+0xc0>)
     bc0:	681d      	ldr	r5, [r3, #0]
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
     bc2:	682b      	ldr	r3, [r5, #0]
     bc4:	7e1a      	ldrb	r2, [r3, #24]
     bc6:	7ddc      	ldrb	r4, [r3, #23]
     bc8:	4014      	ands	r4, r2
	if (flags & ADC_INTFLAG_RESRDY) {
     bca:	07e2      	lsls	r2, r4, #31
     bcc:	d416      	bmi.n	bfc <ADC_Handler+0x40>
	if (flags & ADC_INTFLAG_WINMON) {
     bce:	0763      	lsls	r3, r4, #29
     bd0:	d508      	bpl.n	be4 <ADC_Handler+0x28>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     bd2:	2304      	movs	r3, #4
     bd4:	682a      	ldr	r2, [r5, #0]
     bd6:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     bd8:	7eeb      	ldrb	r3, [r5, #27]
     bda:	079b      	lsls	r3, r3, #30
     bdc:	d502      	bpl.n	be4 <ADC_Handler+0x28>
     bde:	7eab      	ldrb	r3, [r5, #26]
     be0:	079b      	lsls	r3, r3, #30
     be2:	d442      	bmi.n	c6a <ADC_Handler+0xae>
	if (flags & ADC_INTFLAG_OVERRUN) {
     be4:	07a3      	lsls	r3, r4, #30
     be6:	d508      	bpl.n	bfa <ADC_Handler+0x3e>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     be8:	2302      	movs	r3, #2
     bea:	682a      	ldr	r2, [r5, #0]
     bec:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     bee:	7eeb      	ldrb	r3, [r5, #27]
     bf0:	075b      	lsls	r3, r3, #29
     bf2:	d502      	bpl.n	bfa <ADC_Handler+0x3e>
     bf4:	7eab      	ldrb	r3, [r5, #26]
     bf6:	075b      	lsls	r3, r3, #29
     bf8:	d43b      	bmi.n	c72 <ADC_Handler+0xb6>
	_adc_interrupt_handler(0);
}
     bfa:	bd70      	pop	{r4, r5, r6, pc}
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     bfc:	2201      	movs	r2, #1
     bfe:	761a      	strb	r2, [r3, #24]
	Adc *const adc_module = module_inst->hw;
     c00:	682a      	ldr	r2, [r5, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     c02:	7e53      	ldrb	r3, [r2, #25]
		while (adc_is_syncing(module)) {
     c04:	b25b      	sxtb	r3, r3
     c06:	2b00      	cmp	r3, #0
     c08:	dbfb      	blt.n	c02 <ADC_Handler+0x46>
		*(module->job_buffer++) = module->hw->RESULT.reg;
     c0a:	6969      	ldr	r1, [r5, #20]
     c0c:	1c8b      	adds	r3, r1, #2
     c0e:	616b      	str	r3, [r5, #20]
     c10:	8b53      	ldrh	r3, [r2, #26]
     c12:	b29b      	uxth	r3, r3
     c14:	800b      	strh	r3, [r1, #0]
		if (--module->remaining_conversions > 0) {
     c16:	8b2b      	ldrh	r3, [r5, #24]
     c18:	3b01      	subs	r3, #1
     c1a:	b29b      	uxth	r3, r3
     c1c:	832b      	strh	r3, [r5, #24]
     c1e:	2b00      	cmp	r3, #0
     c20:	d011      	beq.n	c46 <ADC_Handler+0x8a>
			if (module->software_trigger == true) {
     c22:	7f6b      	ldrb	r3, [r5, #29]
     c24:	2b00      	cmp	r3, #0
     c26:	d0d2      	beq.n	bce <ADC_Handler+0x12>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     c28:	682a      	ldr	r2, [r5, #0]
     c2a:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     c2c:	b25b      	sxtb	r3, r3
     c2e:	2b00      	cmp	r3, #0
     c30:	dbfb      	blt.n	c2a <ADC_Handler+0x6e>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     c32:	7b13      	ldrb	r3, [r2, #12]
     c34:	2102      	movs	r1, #2
     c36:	430b      	orrs	r3, r1
     c38:	7313      	strb	r3, [r2, #12]
	Adc *const adc_module = module_inst->hw;
     c3a:	682a      	ldr	r2, [r5, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     c3c:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     c3e:	b25b      	sxtb	r3, r3
     c40:	2b00      	cmp	r3, #0
     c42:	dbfb      	blt.n	c3c <ADC_Handler+0x80>
     c44:	e7c3      	b.n	bce <ADC_Handler+0x12>
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     c46:	2301      	movs	r3, #1
     c48:	682a      	ldr	r2, [r5, #0]
     c4a:	7593      	strb	r3, [r2, #22]
			if (module->job_status == STATUS_BUSY) {
     c4c:	7f2b      	ldrb	r3, [r5, #28]
     c4e:	2b05      	cmp	r3, #5
     c50:	d1bd      	bne.n	bce <ADC_Handler+0x12>
				module->job_status = STATUS_OK;
     c52:	2300      	movs	r3, #0
     c54:	772b      	strb	r3, [r5, #28]
				if ((module->enabled_callback_mask &
     c56:	7eeb      	ldrb	r3, [r5, #27]
     c58:	07db      	lsls	r3, r3, #31
     c5a:	d5b8      	bpl.n	bce <ADC_Handler+0x12>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
     c5c:	7eab      	ldrb	r3, [r5, #26]
     c5e:	07db      	lsls	r3, r3, #31
     c60:	d5b5      	bpl.n	bce <ADC_Handler+0x12>
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     c62:	0028      	movs	r0, r5
     c64:	68ab      	ldr	r3, [r5, #8]
     c66:	4798      	blx	r3
     c68:	e7b1      	b.n	bce <ADC_Handler+0x12>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     c6a:	0028      	movs	r0, r5
     c6c:	68eb      	ldr	r3, [r5, #12]
     c6e:	4798      	blx	r3
     c70:	e7b8      	b.n	be4 <ADC_Handler+0x28>
			(module->callback[ADC_CALLBACK_ERROR])(module);
     c72:	692b      	ldr	r3, [r5, #16]
     c74:	0028      	movs	r0, r5
     c76:	4798      	blx	r3
}
     c78:	e7bf      	b.n	bfa <ADC_Handler+0x3e>
     c7a:	46c0      	nop			; (mov r8, r8)
     c7c:	200002b0 	.word	0x200002b0

00000c80 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     c80:	b500      	push	{lr}
     c82:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     c84:	ab01      	add	r3, sp, #4
     c86:	2280      	movs	r2, #128	; 0x80
     c88:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     c8a:	780a      	ldrb	r2, [r1, #0]
     c8c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     c8e:	784a      	ldrb	r2, [r1, #1]
     c90:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     c92:	788a      	ldrb	r2, [r1, #2]
     c94:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     c96:	0019      	movs	r1, r3
     c98:	4b01      	ldr	r3, [pc, #4]	; (ca0 <port_pin_set_config+0x20>)
     c9a:	4798      	blx	r3
}
     c9c:	b003      	add	sp, #12
     c9e:	bd00      	pop	{pc}
     ca0:	00001e0d 	.word	0x00001e0d

00000ca4 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
     ca6:	46de      	mov	lr, fp
     ca8:	4657      	mov	r7, sl
     caa:	464e      	mov	r6, r9
     cac:	4645      	mov	r5, r8
     cae:	b5e0      	push	{r5, r6, r7, lr}
     cb0:	b087      	sub	sp, #28
     cb2:	4680      	mov	r8, r0
     cb4:	9104      	str	r1, [sp, #16]
     cb6:	0016      	movs	r6, r2
     cb8:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     cba:	2200      	movs	r2, #0
     cbc:	2300      	movs	r3, #0
     cbe:	2100      	movs	r1, #0
     cc0:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     cc2:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     cc4:	2001      	movs	r0, #1
     cc6:	0021      	movs	r1, r4
     cc8:	9600      	str	r6, [sp, #0]
     cca:	9701      	str	r7, [sp, #4]
     ccc:	465c      	mov	r4, fp
     cce:	9403      	str	r4, [sp, #12]
     cd0:	4644      	mov	r4, r8
     cd2:	9405      	str	r4, [sp, #20]
     cd4:	e013      	b.n	cfe <long_division+0x5a>
     cd6:	2420      	movs	r4, #32
     cd8:	1a64      	subs	r4, r4, r1
     cda:	0005      	movs	r5, r0
     cdc:	40e5      	lsrs	r5, r4
     cde:	46a8      	mov	r8, r5
     ce0:	e014      	b.n	d0c <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     ce2:	9c00      	ldr	r4, [sp, #0]
     ce4:	9d01      	ldr	r5, [sp, #4]
     ce6:	1b12      	subs	r2, r2, r4
     ce8:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     cea:	465c      	mov	r4, fp
     cec:	464d      	mov	r5, r9
     cee:	432c      	orrs	r4, r5
     cf0:	46a3      	mov	fp, r4
     cf2:	9c03      	ldr	r4, [sp, #12]
     cf4:	4645      	mov	r5, r8
     cf6:	432c      	orrs	r4, r5
     cf8:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     cfa:	3901      	subs	r1, #1
     cfc:	d325      	bcc.n	d4a <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     cfe:	2420      	movs	r4, #32
     d00:	4264      	negs	r4, r4
     d02:	190c      	adds	r4, r1, r4
     d04:	d4e7      	bmi.n	cd6 <long_division+0x32>
     d06:	0005      	movs	r5, r0
     d08:	40a5      	lsls	r5, r4
     d0a:	46a8      	mov	r8, r5
     d0c:	0004      	movs	r4, r0
     d0e:	408c      	lsls	r4, r1
     d10:	46a1      	mov	r9, r4
		r = r << 1;
     d12:	1892      	adds	r2, r2, r2
     d14:	415b      	adcs	r3, r3
     d16:	0014      	movs	r4, r2
     d18:	001d      	movs	r5, r3
		if (n & bit_shift) {
     d1a:	9e05      	ldr	r6, [sp, #20]
     d1c:	464f      	mov	r7, r9
     d1e:	403e      	ands	r6, r7
     d20:	46b4      	mov	ip, r6
     d22:	9e04      	ldr	r6, [sp, #16]
     d24:	4647      	mov	r7, r8
     d26:	403e      	ands	r6, r7
     d28:	46b2      	mov	sl, r6
     d2a:	4666      	mov	r6, ip
     d2c:	4657      	mov	r7, sl
     d2e:	433e      	orrs	r6, r7
     d30:	d003      	beq.n	d3a <long_division+0x96>
			r |= 0x01;
     d32:	0006      	movs	r6, r0
     d34:	4326      	orrs	r6, r4
     d36:	0032      	movs	r2, r6
     d38:	002b      	movs	r3, r5
		if (r >= d) {
     d3a:	9c00      	ldr	r4, [sp, #0]
     d3c:	9d01      	ldr	r5, [sp, #4]
     d3e:	429d      	cmp	r5, r3
     d40:	d8db      	bhi.n	cfa <long_division+0x56>
     d42:	d1ce      	bne.n	ce2 <long_division+0x3e>
     d44:	4294      	cmp	r4, r2
     d46:	d8d8      	bhi.n	cfa <long_division+0x56>
     d48:	e7cb      	b.n	ce2 <long_division+0x3e>
     d4a:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     d4c:	4658      	mov	r0, fp
     d4e:	0019      	movs	r1, r3
     d50:	b007      	add	sp, #28
     d52:	bc3c      	pop	{r2, r3, r4, r5}
     d54:	4690      	mov	r8, r2
     d56:	4699      	mov	r9, r3
     d58:	46a2      	mov	sl, r4
     d5a:	46ab      	mov	fp, r5
     d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000d5e <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     d5e:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     d60:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     d62:	2340      	movs	r3, #64	; 0x40
     d64:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     d66:	4281      	cmp	r1, r0
     d68:	d202      	bcs.n	d70 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     d6a:	0018      	movs	r0, r3
     d6c:	bd10      	pop	{r4, pc}
		baud_calculated++;
     d6e:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     d70:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     d72:	1c63      	adds	r3, r4, #1
     d74:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     d76:	4288      	cmp	r0, r1
     d78:	d9f9      	bls.n	d6e <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     d7a:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     d7c:	2cff      	cmp	r4, #255	; 0xff
     d7e:	d8f4      	bhi.n	d6a <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     d80:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     d82:	2300      	movs	r3, #0
     d84:	e7f1      	b.n	d6a <_sercom_get_sync_baud_val+0xc>
	...

00000d88 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     d88:	b5f0      	push	{r4, r5, r6, r7, lr}
     d8a:	b083      	sub	sp, #12
     d8c:	000f      	movs	r7, r1
     d8e:	0016      	movs	r6, r2
     d90:	aa08      	add	r2, sp, #32
     d92:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     d94:	0004      	movs	r4, r0
     d96:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     d98:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     d9a:	42bc      	cmp	r4, r7
     d9c:	d902      	bls.n	da4 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     d9e:	0010      	movs	r0, r2
     da0:	b003      	add	sp, #12
     da2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     da4:	2b00      	cmp	r3, #0
     da6:	d114      	bne.n	dd2 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     da8:	0002      	movs	r2, r0
     daa:	0008      	movs	r0, r1
     dac:	2100      	movs	r1, #0
     dae:	4c19      	ldr	r4, [pc, #100]	; (e14 <_sercom_get_async_baud_val+0x8c>)
     db0:	47a0      	blx	r4
     db2:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     db4:	003a      	movs	r2, r7
     db6:	2300      	movs	r3, #0
     db8:	2000      	movs	r0, #0
     dba:	4c17      	ldr	r4, [pc, #92]	; (e18 <_sercom_get_async_baud_val+0x90>)
     dbc:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     dbe:	2200      	movs	r2, #0
     dc0:	2301      	movs	r3, #1
     dc2:	1a12      	subs	r2, r2, r0
     dc4:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     dc6:	0c12      	lsrs	r2, r2, #16
     dc8:	041b      	lsls	r3, r3, #16
     dca:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     dcc:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     dce:	2200      	movs	r2, #0
     dd0:	e7e5      	b.n	d9e <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     dd2:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     dd4:	2b01      	cmp	r3, #1
     dd6:	d1f9      	bne.n	dcc <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     dd8:	000a      	movs	r2, r1
     dda:	2300      	movs	r3, #0
     ddc:	2100      	movs	r1, #0
     dde:	4c0d      	ldr	r4, [pc, #52]	; (e14 <_sercom_get_async_baud_val+0x8c>)
     de0:	47a0      	blx	r4
     de2:	0002      	movs	r2, r0
     de4:	000b      	movs	r3, r1
     de6:	9200      	str	r2, [sp, #0]
     de8:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     dea:	0038      	movs	r0, r7
     dec:	2100      	movs	r1, #0
     dee:	4c0a      	ldr	r4, [pc, #40]	; (e18 <_sercom_get_async_baud_val+0x90>)
     df0:	47a0      	blx	r4
     df2:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     df4:	2380      	movs	r3, #128	; 0x80
     df6:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     df8:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     dfa:	4298      	cmp	r0, r3
     dfc:	d8cf      	bhi.n	d9e <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     dfe:	0f79      	lsrs	r1, r7, #29
     e00:	00f8      	lsls	r0, r7, #3
     e02:	9a00      	ldr	r2, [sp, #0]
     e04:	9b01      	ldr	r3, [sp, #4]
     e06:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     e08:	00ea      	lsls	r2, r5, #3
     e0a:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     e0c:	b2d2      	uxtb	r2, r2
     e0e:	0352      	lsls	r2, r2, #13
     e10:	432a      	orrs	r2, r5
     e12:	e7db      	b.n	dcc <_sercom_get_async_baud_val+0x44>
     e14:	00003785 	.word	0x00003785
     e18:	00000ca5 	.word	0x00000ca5

00000e1c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     e1c:	b510      	push	{r4, lr}
     e1e:	b082      	sub	sp, #8
     e20:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     e22:	4b0e      	ldr	r3, [pc, #56]	; (e5c <sercom_set_gclk_generator+0x40>)
     e24:	781b      	ldrb	r3, [r3, #0]
     e26:	2b00      	cmp	r3, #0
     e28:	d007      	beq.n	e3a <sercom_set_gclk_generator+0x1e>
     e2a:	2900      	cmp	r1, #0
     e2c:	d105      	bne.n	e3a <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     e2e:	4b0b      	ldr	r3, [pc, #44]	; (e5c <sercom_set_gclk_generator+0x40>)
     e30:	785b      	ldrb	r3, [r3, #1]
     e32:	4283      	cmp	r3, r0
     e34:	d010      	beq.n	e58 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     e36:	201d      	movs	r0, #29
     e38:	e00c      	b.n	e54 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     e3a:	a901      	add	r1, sp, #4
     e3c:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     e3e:	2013      	movs	r0, #19
     e40:	4b07      	ldr	r3, [pc, #28]	; (e60 <sercom_set_gclk_generator+0x44>)
     e42:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     e44:	2013      	movs	r0, #19
     e46:	4b07      	ldr	r3, [pc, #28]	; (e64 <sercom_set_gclk_generator+0x48>)
     e48:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     e4a:	4b04      	ldr	r3, [pc, #16]	; (e5c <sercom_set_gclk_generator+0x40>)
     e4c:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     e4e:	2201      	movs	r2, #1
     e50:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     e52:	2000      	movs	r0, #0
}
     e54:	b002      	add	sp, #8
     e56:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     e58:	2000      	movs	r0, #0
     e5a:	e7fb      	b.n	e54 <sercom_set_gclk_generator+0x38>
     e5c:	20000260 	.word	0x20000260
     e60:	00001d15 	.word	0x00001d15
     e64:	00001c89 	.word	0x00001c89

00000e68 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     e68:	4b40      	ldr	r3, [pc, #256]	; (f6c <_sercom_get_default_pad+0x104>)
     e6a:	4298      	cmp	r0, r3
     e6c:	d031      	beq.n	ed2 <_sercom_get_default_pad+0x6a>
     e6e:	d90a      	bls.n	e86 <_sercom_get_default_pad+0x1e>
     e70:	4b3f      	ldr	r3, [pc, #252]	; (f70 <_sercom_get_default_pad+0x108>)
     e72:	4298      	cmp	r0, r3
     e74:	d04d      	beq.n	f12 <_sercom_get_default_pad+0xaa>
     e76:	4b3f      	ldr	r3, [pc, #252]	; (f74 <_sercom_get_default_pad+0x10c>)
     e78:	4298      	cmp	r0, r3
     e7a:	d05a      	beq.n	f32 <_sercom_get_default_pad+0xca>
     e7c:	4b3e      	ldr	r3, [pc, #248]	; (f78 <_sercom_get_default_pad+0x110>)
     e7e:	4298      	cmp	r0, r3
     e80:	d037      	beq.n	ef2 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     e82:	2000      	movs	r0, #0
}
     e84:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     e86:	4b3d      	ldr	r3, [pc, #244]	; (f7c <_sercom_get_default_pad+0x114>)
     e88:	4298      	cmp	r0, r3
     e8a:	d00c      	beq.n	ea6 <_sercom_get_default_pad+0x3e>
     e8c:	4b3c      	ldr	r3, [pc, #240]	; (f80 <_sercom_get_default_pad+0x118>)
     e8e:	4298      	cmp	r0, r3
     e90:	d1f7      	bne.n	e82 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     e92:	2901      	cmp	r1, #1
     e94:	d017      	beq.n	ec6 <_sercom_get_default_pad+0x5e>
     e96:	2900      	cmp	r1, #0
     e98:	d05d      	beq.n	f56 <_sercom_get_default_pad+0xee>
     e9a:	2902      	cmp	r1, #2
     e9c:	d015      	beq.n	eca <_sercom_get_default_pad+0x62>
     e9e:	2903      	cmp	r1, #3
     ea0:	d015      	beq.n	ece <_sercom_get_default_pad+0x66>
	return 0;
     ea2:	2000      	movs	r0, #0
     ea4:	e7ee      	b.n	e84 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     ea6:	2901      	cmp	r1, #1
     ea8:	d007      	beq.n	eba <_sercom_get_default_pad+0x52>
     eaa:	2900      	cmp	r1, #0
     eac:	d051      	beq.n	f52 <_sercom_get_default_pad+0xea>
     eae:	2902      	cmp	r1, #2
     eb0:	d005      	beq.n	ebe <_sercom_get_default_pad+0x56>
     eb2:	2903      	cmp	r1, #3
     eb4:	d005      	beq.n	ec2 <_sercom_get_default_pad+0x5a>
	return 0;
     eb6:	2000      	movs	r0, #0
     eb8:	e7e4      	b.n	e84 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     eba:	4832      	ldr	r0, [pc, #200]	; (f84 <_sercom_get_default_pad+0x11c>)
     ebc:	e7e2      	b.n	e84 <_sercom_get_default_pad+0x1c>
     ebe:	4832      	ldr	r0, [pc, #200]	; (f88 <_sercom_get_default_pad+0x120>)
     ec0:	e7e0      	b.n	e84 <_sercom_get_default_pad+0x1c>
     ec2:	4832      	ldr	r0, [pc, #200]	; (f8c <_sercom_get_default_pad+0x124>)
     ec4:	e7de      	b.n	e84 <_sercom_get_default_pad+0x1c>
     ec6:	4832      	ldr	r0, [pc, #200]	; (f90 <_sercom_get_default_pad+0x128>)
     ec8:	e7dc      	b.n	e84 <_sercom_get_default_pad+0x1c>
     eca:	4832      	ldr	r0, [pc, #200]	; (f94 <_sercom_get_default_pad+0x12c>)
     ecc:	e7da      	b.n	e84 <_sercom_get_default_pad+0x1c>
     ece:	4832      	ldr	r0, [pc, #200]	; (f98 <_sercom_get_default_pad+0x130>)
     ed0:	e7d8      	b.n	e84 <_sercom_get_default_pad+0x1c>
     ed2:	2901      	cmp	r1, #1
     ed4:	d007      	beq.n	ee6 <_sercom_get_default_pad+0x7e>
     ed6:	2900      	cmp	r1, #0
     ed8:	d03f      	beq.n	f5a <_sercom_get_default_pad+0xf2>
     eda:	2902      	cmp	r1, #2
     edc:	d005      	beq.n	eea <_sercom_get_default_pad+0x82>
     ede:	2903      	cmp	r1, #3
     ee0:	d005      	beq.n	eee <_sercom_get_default_pad+0x86>
	return 0;
     ee2:	2000      	movs	r0, #0
     ee4:	e7ce      	b.n	e84 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     ee6:	482d      	ldr	r0, [pc, #180]	; (f9c <_sercom_get_default_pad+0x134>)
     ee8:	e7cc      	b.n	e84 <_sercom_get_default_pad+0x1c>
     eea:	482d      	ldr	r0, [pc, #180]	; (fa0 <_sercom_get_default_pad+0x138>)
     eec:	e7ca      	b.n	e84 <_sercom_get_default_pad+0x1c>
     eee:	482d      	ldr	r0, [pc, #180]	; (fa4 <_sercom_get_default_pad+0x13c>)
     ef0:	e7c8      	b.n	e84 <_sercom_get_default_pad+0x1c>
     ef2:	2901      	cmp	r1, #1
     ef4:	d007      	beq.n	f06 <_sercom_get_default_pad+0x9e>
     ef6:	2900      	cmp	r1, #0
     ef8:	d031      	beq.n	f5e <_sercom_get_default_pad+0xf6>
     efa:	2902      	cmp	r1, #2
     efc:	d005      	beq.n	f0a <_sercom_get_default_pad+0xa2>
     efe:	2903      	cmp	r1, #3
     f00:	d005      	beq.n	f0e <_sercom_get_default_pad+0xa6>
	return 0;
     f02:	2000      	movs	r0, #0
     f04:	e7be      	b.n	e84 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     f06:	4828      	ldr	r0, [pc, #160]	; (fa8 <_sercom_get_default_pad+0x140>)
     f08:	e7bc      	b.n	e84 <_sercom_get_default_pad+0x1c>
     f0a:	4828      	ldr	r0, [pc, #160]	; (fac <_sercom_get_default_pad+0x144>)
     f0c:	e7ba      	b.n	e84 <_sercom_get_default_pad+0x1c>
     f0e:	4828      	ldr	r0, [pc, #160]	; (fb0 <_sercom_get_default_pad+0x148>)
     f10:	e7b8      	b.n	e84 <_sercom_get_default_pad+0x1c>
     f12:	2901      	cmp	r1, #1
     f14:	d007      	beq.n	f26 <_sercom_get_default_pad+0xbe>
     f16:	2900      	cmp	r1, #0
     f18:	d023      	beq.n	f62 <_sercom_get_default_pad+0xfa>
     f1a:	2902      	cmp	r1, #2
     f1c:	d005      	beq.n	f2a <_sercom_get_default_pad+0xc2>
     f1e:	2903      	cmp	r1, #3
     f20:	d005      	beq.n	f2e <_sercom_get_default_pad+0xc6>
	return 0;
     f22:	2000      	movs	r0, #0
     f24:	e7ae      	b.n	e84 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     f26:	4823      	ldr	r0, [pc, #140]	; (fb4 <_sercom_get_default_pad+0x14c>)
     f28:	e7ac      	b.n	e84 <_sercom_get_default_pad+0x1c>
     f2a:	4823      	ldr	r0, [pc, #140]	; (fb8 <_sercom_get_default_pad+0x150>)
     f2c:	e7aa      	b.n	e84 <_sercom_get_default_pad+0x1c>
     f2e:	4823      	ldr	r0, [pc, #140]	; (fbc <_sercom_get_default_pad+0x154>)
     f30:	e7a8      	b.n	e84 <_sercom_get_default_pad+0x1c>
     f32:	2901      	cmp	r1, #1
     f34:	d007      	beq.n	f46 <_sercom_get_default_pad+0xde>
     f36:	2900      	cmp	r1, #0
     f38:	d015      	beq.n	f66 <_sercom_get_default_pad+0xfe>
     f3a:	2902      	cmp	r1, #2
     f3c:	d005      	beq.n	f4a <_sercom_get_default_pad+0xe2>
     f3e:	2903      	cmp	r1, #3
     f40:	d005      	beq.n	f4e <_sercom_get_default_pad+0xe6>
	return 0;
     f42:	2000      	movs	r0, #0
     f44:	e79e      	b.n	e84 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     f46:	481e      	ldr	r0, [pc, #120]	; (fc0 <_sercom_get_default_pad+0x158>)
     f48:	e79c      	b.n	e84 <_sercom_get_default_pad+0x1c>
     f4a:	481e      	ldr	r0, [pc, #120]	; (fc4 <_sercom_get_default_pad+0x15c>)
     f4c:	e79a      	b.n	e84 <_sercom_get_default_pad+0x1c>
     f4e:	481e      	ldr	r0, [pc, #120]	; (fc8 <_sercom_get_default_pad+0x160>)
     f50:	e798      	b.n	e84 <_sercom_get_default_pad+0x1c>
     f52:	481e      	ldr	r0, [pc, #120]	; (fcc <_sercom_get_default_pad+0x164>)
     f54:	e796      	b.n	e84 <_sercom_get_default_pad+0x1c>
     f56:	2003      	movs	r0, #3
     f58:	e794      	b.n	e84 <_sercom_get_default_pad+0x1c>
     f5a:	481d      	ldr	r0, [pc, #116]	; (fd0 <_sercom_get_default_pad+0x168>)
     f5c:	e792      	b.n	e84 <_sercom_get_default_pad+0x1c>
     f5e:	481d      	ldr	r0, [pc, #116]	; (fd4 <_sercom_get_default_pad+0x16c>)
     f60:	e790      	b.n	e84 <_sercom_get_default_pad+0x1c>
     f62:	481d      	ldr	r0, [pc, #116]	; (fd8 <_sercom_get_default_pad+0x170>)
     f64:	e78e      	b.n	e84 <_sercom_get_default_pad+0x1c>
     f66:	481d      	ldr	r0, [pc, #116]	; (fdc <_sercom_get_default_pad+0x174>)
     f68:	e78c      	b.n	e84 <_sercom_get_default_pad+0x1c>
     f6a:	46c0      	nop			; (mov r8, r8)
     f6c:	42001000 	.word	0x42001000
     f70:	42001800 	.word	0x42001800
     f74:	42001c00 	.word	0x42001c00
     f78:	42001400 	.word	0x42001400
     f7c:	42000800 	.word	0x42000800
     f80:	42000c00 	.word	0x42000c00
     f84:	00050003 	.word	0x00050003
     f88:	00060003 	.word	0x00060003
     f8c:	00070003 	.word	0x00070003
     f90:	00010003 	.word	0x00010003
     f94:	001e0003 	.word	0x001e0003
     f98:	001f0003 	.word	0x001f0003
     f9c:	00090003 	.word	0x00090003
     fa0:	000a0003 	.word	0x000a0003
     fa4:	000b0003 	.word	0x000b0003
     fa8:	00110003 	.word	0x00110003
     fac:	00120003 	.word	0x00120003
     fb0:	00130003 	.word	0x00130003
     fb4:	000d0003 	.word	0x000d0003
     fb8:	000e0003 	.word	0x000e0003
     fbc:	000f0003 	.word	0x000f0003
     fc0:	00170003 	.word	0x00170003
     fc4:	00180003 	.word	0x00180003
     fc8:	00190003 	.word	0x00190003
     fcc:	00040003 	.word	0x00040003
     fd0:	00080003 	.word	0x00080003
     fd4:	00100003 	.word	0x00100003
     fd8:	000c0003 	.word	0x000c0003
     fdc:	00160003 	.word	0x00160003

00000fe0 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     fe0:	b530      	push	{r4, r5, lr}
     fe2:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     fe4:	4b0b      	ldr	r3, [pc, #44]	; (1014 <_sercom_get_sercom_inst_index+0x34>)
     fe6:	466a      	mov	r2, sp
     fe8:	cb32      	ldmia	r3!, {r1, r4, r5}
     fea:	c232      	stmia	r2!, {r1, r4, r5}
     fec:	cb32      	ldmia	r3!, {r1, r4, r5}
     fee:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     ff0:	9b00      	ldr	r3, [sp, #0]
     ff2:	4283      	cmp	r3, r0
     ff4:	d00b      	beq.n	100e <_sercom_get_sercom_inst_index+0x2e>
     ff6:	2301      	movs	r3, #1
     ff8:	009a      	lsls	r2, r3, #2
     ffa:	4669      	mov	r1, sp
     ffc:	5852      	ldr	r2, [r2, r1]
     ffe:	4282      	cmp	r2, r0
    1000:	d006      	beq.n	1010 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1002:	3301      	adds	r3, #1
    1004:	2b06      	cmp	r3, #6
    1006:	d1f7      	bne.n	ff8 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    1008:	2000      	movs	r0, #0
}
    100a:	b007      	add	sp, #28
    100c:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    100e:	2300      	movs	r3, #0
			return i;
    1010:	b2d8      	uxtb	r0, r3
    1012:	e7fa      	b.n	100a <_sercom_get_sercom_inst_index+0x2a>
    1014:	00004f94 	.word	0x00004f94

00001018 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    1018:	4770      	bx	lr
	...

0000101c <_sercom_set_handler>:


void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    101c:	b5f0      	push	{r4, r5, r6, r7, lr}
	// Initialize handlers with default handler and device instances with 0 
	if (_handler_table_initialized == false) {
    101e:	4b0a      	ldr	r3, [pc, #40]	; (1048 <_sercom_set_handler+0x2c>)
    1020:	781b      	ldrb	r3, [r3, #0]
    1022:	2b00      	cmp	r3, #0
    1024:	d10c      	bne.n	1040 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1026:	4f09      	ldr	r7, [pc, #36]	; (104c <_sercom_set_handler+0x30>)
    1028:	4e09      	ldr	r6, [pc, #36]	; (1050 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    102a:	4d0a      	ldr	r5, [pc, #40]	; (1054 <_sercom_set_handler+0x38>)
    102c:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    102e:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    1030:	195a      	adds	r2, r3, r5
    1032:	6014      	str	r4, [r2, #0]
    1034:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1036:	2b18      	cmp	r3, #24
    1038:	d1f9      	bne.n	102e <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    103a:	2201      	movs	r2, #1
    103c:	4b02      	ldr	r3, [pc, #8]	; (1048 <_sercom_set_handler+0x2c>)
    103e:	701a      	strb	r2, [r3, #0]
	}

	// Save interrupt handler 
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1040:	0080      	lsls	r0, r0, #2
    1042:	4b02      	ldr	r3, [pc, #8]	; (104c <_sercom_set_handler+0x30>)
    1044:	50c1      	str	r1, [r0, r3]
}
    1046:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1048:	20000262 	.word	0x20000262
    104c:	20000264 	.word	0x20000264
    1050:	00001019 	.word	0x00001019
    1054:	200002b4 	.word	0x200002b4

00001058 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1058:	b500      	push	{lr}
    105a:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    105c:	2309      	movs	r3, #9
    105e:	466a      	mov	r2, sp
    1060:	7013      	strb	r3, [r2, #0]
    1062:	3301      	adds	r3, #1
    1064:	7053      	strb	r3, [r2, #1]
    1066:	3301      	adds	r3, #1
    1068:	7093      	strb	r3, [r2, #2]
    106a:	3301      	adds	r3, #1
    106c:	70d3      	strb	r3, [r2, #3]
    106e:	3301      	adds	r3, #1
    1070:	7113      	strb	r3, [r2, #4]
    1072:	3301      	adds	r3, #1
    1074:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    1076:	4b03      	ldr	r3, [pc, #12]	; (1084 <_sercom_get_interrupt_vector+0x2c>)
    1078:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    107a:	466b      	mov	r3, sp
    107c:	5618      	ldrsb	r0, [r3, r0]
}
    107e:	b003      	add	sp, #12
    1080:	bd00      	pop	{pc}
    1082:	46c0      	nop			; (mov r8, r8)
    1084:	00000fe1 	.word	0x00000fe1

00001088 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1088:	b510      	push	{r4, lr}
    108a:	4b02      	ldr	r3, [pc, #8]	; (1094 <SERCOM0_Handler+0xc>)
    108c:	681b      	ldr	r3, [r3, #0]
    108e:	2000      	movs	r0, #0
    1090:	4798      	blx	r3
    1092:	bd10      	pop	{r4, pc}
    1094:	20000264 	.word	0x20000264

00001098 <SERCOM1_Handler>:
    1098:	b510      	push	{r4, lr}
    109a:	4b02      	ldr	r3, [pc, #8]	; (10a4 <SERCOM1_Handler+0xc>)
    109c:	685b      	ldr	r3, [r3, #4]
    109e:	2001      	movs	r0, #1
    10a0:	4798      	blx	r3
    10a2:	bd10      	pop	{r4, pc}
    10a4:	20000264 	.word	0x20000264

000010a8 <SERCOM2_Handler>:
    10a8:	b510      	push	{r4, lr}
    10aa:	4b02      	ldr	r3, [pc, #8]	; (10b4 <SERCOM2_Handler+0xc>)
    10ac:	689b      	ldr	r3, [r3, #8]
    10ae:	2002      	movs	r0, #2
    10b0:	4798      	blx	r3
    10b2:	bd10      	pop	{r4, pc}
    10b4:	20000264 	.word	0x20000264

000010b8 <SERCOM3_Handler>:
    10b8:	b510      	push	{r4, lr}
    10ba:	4b02      	ldr	r3, [pc, #8]	; (10c4 <SERCOM3_Handler+0xc>)
    10bc:	68db      	ldr	r3, [r3, #12]
    10be:	2003      	movs	r0, #3
    10c0:	4798      	blx	r3
    10c2:	bd10      	pop	{r4, pc}
    10c4:	20000264 	.word	0x20000264

000010c8 <SERCOM4_Handler>:
    10c8:	b510      	push	{r4, lr}
    10ca:	4b02      	ldr	r3, [pc, #8]	; (10d4 <SERCOM4_Handler+0xc>)
    10cc:	691b      	ldr	r3, [r3, #16]
    10ce:	2004      	movs	r0, #4
    10d0:	4798      	blx	r3
    10d2:	bd10      	pop	{r4, pc}
    10d4:	20000264 	.word	0x20000264

000010d8 <SERCOM5_Handler>:
    10d8:	b510      	push	{r4, lr}
    10da:	4b02      	ldr	r3, [pc, #8]	; (10e4 <SERCOM5_Handler+0xc>)
    10dc:	695b      	ldr	r3, [r3, #20]
    10de:	2005      	movs	r0, #5
    10e0:	4798      	blx	r3
    10e2:	bd10      	pop	{r4, pc}
    10e4:	20000264 	.word	0x20000264

000010e8 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    10e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    10ea:	46de      	mov	lr, fp
    10ec:	4657      	mov	r7, sl
    10ee:	464e      	mov	r6, r9
    10f0:	4645      	mov	r5, r8
    10f2:	b5e0      	push	{r5, r6, r7, lr}
    10f4:	b091      	sub	sp, #68	; 0x44
    10f6:	0005      	movs	r5, r0
    10f8:	000c      	movs	r4, r1
    10fa:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    10fc:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    10fe:	0008      	movs	r0, r1
    1100:	4bba      	ldr	r3, [pc, #744]	; (13ec <usart_init+0x304>)
    1102:	4798      	blx	r3
    1104:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1106:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    1108:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    110a:	07db      	lsls	r3, r3, #31
    110c:	d506      	bpl.n	111c <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    110e:	b011      	add	sp, #68	; 0x44
    1110:	bc3c      	pop	{r2, r3, r4, r5}
    1112:	4690      	mov	r8, r2
    1114:	4699      	mov	r9, r3
    1116:	46a2      	mov	sl, r4
    1118:	46ab      	mov	fp, r5
    111a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    111c:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    111e:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1120:	079b      	lsls	r3, r3, #30
    1122:	d4f4      	bmi.n	110e <usart_init+0x26>
    1124:	49b2      	ldr	r1, [pc, #712]	; (13f0 <usart_init+0x308>)
    1126:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    1128:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    112a:	2301      	movs	r3, #1
    112c:	40bb      	lsls	r3, r7
    112e:	4303      	orrs	r3, r0
    1130:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    1132:	a90f      	add	r1, sp, #60	; 0x3c
    1134:	272d      	movs	r7, #45	; 0x2d
    1136:	5df3      	ldrb	r3, [r6, r7]
    1138:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    113a:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    113c:	b2d3      	uxtb	r3, r2
    113e:	9302      	str	r3, [sp, #8]
    1140:	0018      	movs	r0, r3
    1142:	4bac      	ldr	r3, [pc, #688]	; (13f4 <usart_init+0x30c>)
    1144:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1146:	9802      	ldr	r0, [sp, #8]
    1148:	4bab      	ldr	r3, [pc, #684]	; (13f8 <usart_init+0x310>)
    114a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    114c:	5df0      	ldrb	r0, [r6, r7]
    114e:	2100      	movs	r1, #0
    1150:	4baa      	ldr	r3, [pc, #680]	; (13fc <usart_init+0x314>)
    1152:	4798      	blx	r3
	module->character_size = config->character_size;
    1154:	7af3      	ldrb	r3, [r6, #11]
    1156:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    1158:	2324      	movs	r3, #36	; 0x24
    115a:	5cf3      	ldrb	r3, [r6, r3]
    115c:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    115e:	2325      	movs	r3, #37	; 0x25
    1160:	5cf3      	ldrb	r3, [r6, r3]
    1162:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    1164:	7ef3      	ldrb	r3, [r6, #27]
    1166:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    1168:	7f33      	ldrb	r3, [r6, #28]
    116a:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    116c:	682b      	ldr	r3, [r5, #0]
    116e:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1170:	0018      	movs	r0, r3
    1172:	4b9e      	ldr	r3, [pc, #632]	; (13ec <usart_init+0x304>)
    1174:	4798      	blx	r3
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1176:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    1178:	2200      	movs	r2, #0
    117a:	230e      	movs	r3, #14
    117c:	a906      	add	r1, sp, #24
    117e:	468c      	mov	ip, r1
    1180:	4463      	add	r3, ip
    1182:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    1184:	8a32      	ldrh	r2, [r6, #16]
    1186:	9202      	str	r2, [sp, #8]
    1188:	2380      	movs	r3, #128	; 0x80
    118a:	01db      	lsls	r3, r3, #7
    118c:	429a      	cmp	r2, r3
    118e:	d100      	bne.n	1192 <usart_init+0xaa>
    1190:	e09a      	b.n	12c8 <usart_init+0x1e0>
    1192:	d90f      	bls.n	11b4 <usart_init+0xcc>
    1194:	23c0      	movs	r3, #192	; 0xc0
    1196:	01db      	lsls	r3, r3, #7
    1198:	9a02      	ldr	r2, [sp, #8]
    119a:	429a      	cmp	r2, r3
    119c:	d100      	bne.n	11a0 <usart_init+0xb8>
    119e:	e08e      	b.n	12be <usart_init+0x1d6>
    11a0:	2380      	movs	r3, #128	; 0x80
    11a2:	021b      	lsls	r3, r3, #8
    11a4:	429a      	cmp	r2, r3
    11a6:	d000      	beq.n	11aa <usart_init+0xc2>
    11a8:	e11b      	b.n	13e2 <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    11aa:	2303      	movs	r3, #3
    11ac:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    11ae:	2300      	movs	r3, #0
    11b0:	9307      	str	r3, [sp, #28]
    11b2:	e008      	b.n	11c6 <usart_init+0xde>
	switch (config->sample_rate) {
    11b4:	2380      	movs	r3, #128	; 0x80
    11b6:	019b      	lsls	r3, r3, #6
    11b8:	429a      	cmp	r2, r3
    11ba:	d000      	beq.n	11be <usart_init+0xd6>
    11bc:	e111      	b.n	13e2 <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    11be:	2310      	movs	r3, #16
    11c0:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    11c2:	3b0f      	subs	r3, #15
    11c4:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    11c6:	6833      	ldr	r3, [r6, #0]
    11c8:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    11ca:	68f3      	ldr	r3, [r6, #12]
    11cc:	469b      	mov	fp, r3
		config->sample_adjustment |
    11ce:	6973      	ldr	r3, [r6, #20]
    11d0:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    11d2:	7e33      	ldrb	r3, [r6, #24]
    11d4:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    11d6:	2326      	movs	r3, #38	; 0x26
    11d8:	5cf3      	ldrb	r3, [r6, r3]
    11da:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    11dc:	6873      	ldr	r3, [r6, #4]
    11de:	4699      	mov	r9, r3
	switch (transfer_mode)
    11e0:	2b00      	cmp	r3, #0
    11e2:	d100      	bne.n	11e6 <usart_init+0xfe>
    11e4:	e09c      	b.n	1320 <usart_init+0x238>
    11e6:	2380      	movs	r3, #128	; 0x80
    11e8:	055b      	lsls	r3, r3, #21
    11ea:	4599      	cmp	r9, r3
    11ec:	d100      	bne.n	11f0 <usart_init+0x108>
    11ee:	e080      	b.n	12f2 <usart_init+0x20a>
	if(config->encoding_format_enable) {
    11f0:	7e73      	ldrb	r3, [r6, #25]
    11f2:	2b00      	cmp	r3, #0
    11f4:	d002      	beq.n	11fc <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    11f6:	7eb3      	ldrb	r3, [r6, #26]
    11f8:	4642      	mov	r2, r8
    11fa:	7393      	strb	r3, [r2, #14]
	usart_hw->BAUD.reg = baud;
    11fc:	230e      	movs	r3, #14
    11fe:	aa06      	add	r2, sp, #24
    1200:	4694      	mov	ip, r2
    1202:	4463      	add	r3, ip
    1204:	881b      	ldrh	r3, [r3, #0]
    1206:	4642      	mov	r2, r8
    1208:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    120a:	9b05      	ldr	r3, [sp, #20]
    120c:	465a      	mov	r2, fp
    120e:	4313      	orrs	r3, r2
    1210:	9a03      	ldr	r2, [sp, #12]
    1212:	4313      	orrs	r3, r2
    1214:	464a      	mov	r2, r9
    1216:	4313      	orrs	r3, r2
    1218:	9f02      	ldr	r7, [sp, #8]
    121a:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    121c:	9b04      	ldr	r3, [sp, #16]
    121e:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    1220:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1222:	4653      	mov	r3, sl
    1224:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    1226:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    1228:	2327      	movs	r3, #39	; 0x27
    122a:	5cf3      	ldrb	r3, [r6, r3]
    122c:	2b00      	cmp	r3, #0
    122e:	d101      	bne.n	1234 <usart_init+0x14c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    1230:	3304      	adds	r3, #4
    1232:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1234:	7e73      	ldrb	r3, [r6, #25]
    1236:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1238:	7f32      	ldrb	r2, [r6, #28]
    123a:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    123c:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    123e:	7f72      	ldrb	r2, [r6, #29]
    1240:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1242:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1244:	2224      	movs	r2, #36	; 0x24
    1246:	5cb2      	ldrb	r2, [r6, r2]
    1248:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    124a:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    124c:	2225      	movs	r2, #37	; 0x25
    124e:	5cb2      	ldrb	r2, [r6, r2]
    1250:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1252:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    1254:	7ab1      	ldrb	r1, [r6, #10]
    1256:	7af2      	ldrb	r2, [r6, #11]
    1258:	4311      	orrs	r1, r2
    125a:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    125c:	8933      	ldrh	r3, [r6, #8]
    125e:	2bff      	cmp	r3, #255	; 0xff
    1260:	d100      	bne.n	1264 <usart_init+0x17c>
    1262:	e081      	b.n	1368 <usart_init+0x280>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    1264:	2280      	movs	r2, #128	; 0x80
    1266:	0452      	lsls	r2, r2, #17
    1268:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    126a:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    126c:	232c      	movs	r3, #44	; 0x2c
    126e:	5cf3      	ldrb	r3, [r6, r3]
    1270:	2b00      	cmp	r3, #0
    1272:	d103      	bne.n	127c <usart_init+0x194>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    1274:	4b62      	ldr	r3, [pc, #392]	; (1400 <usart_init+0x318>)
    1276:	789b      	ldrb	r3, [r3, #2]
    1278:	079b      	lsls	r3, r3, #30
    127a:	d501      	bpl.n	1280 <usart_init+0x198>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    127c:	2380      	movs	r3, #128	; 0x80
    127e:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    1280:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1282:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1284:	2b00      	cmp	r3, #0
    1286:	d1fc      	bne.n	1282 <usart_init+0x19a>
	usart_hw->CTRLB.reg = ctrlb;
    1288:	4643      	mov	r3, r8
    128a:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    128c:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    128e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1290:	2b00      	cmp	r3, #0
    1292:	d1fc      	bne.n	128e <usart_init+0x1a6>
	usart_hw->CTRLA.reg = ctrla;
    1294:	4643      	mov	r3, r8
    1296:	601f      	str	r7, [r3, #0]
    1298:	ab0e      	add	r3, sp, #56	; 0x38
    129a:	2280      	movs	r2, #128	; 0x80
    129c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    129e:	2200      	movs	r2, #0
    12a0:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    12a2:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    12a4:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    12a6:	6b33      	ldr	r3, [r6, #48]	; 0x30
    12a8:	930a      	str	r3, [sp, #40]	; 0x28
    12aa:	6b73      	ldr	r3, [r6, #52]	; 0x34
    12ac:	930b      	str	r3, [sp, #44]	; 0x2c
    12ae:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    12b0:	930c      	str	r3, [sp, #48]	; 0x30
    12b2:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    12b4:	9302      	str	r3, [sp, #8]
    12b6:	930d      	str	r3, [sp, #52]	; 0x34
    12b8:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    12ba:	ae0a      	add	r6, sp, #40	; 0x28
    12bc:	e063      	b.n	1386 <usart_init+0x29e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    12be:	2308      	movs	r3, #8
    12c0:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    12c2:	3b07      	subs	r3, #7
    12c4:	9307      	str	r3, [sp, #28]
    12c6:	e77e      	b.n	11c6 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    12c8:	6833      	ldr	r3, [r6, #0]
    12ca:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    12cc:	68f3      	ldr	r3, [r6, #12]
    12ce:	469b      	mov	fp, r3
		config->sample_adjustment |
    12d0:	6973      	ldr	r3, [r6, #20]
    12d2:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    12d4:	7e33      	ldrb	r3, [r6, #24]
    12d6:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    12d8:	2326      	movs	r3, #38	; 0x26
    12da:	5cf3      	ldrb	r3, [r6, r3]
    12dc:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    12de:	6873      	ldr	r3, [r6, #4]
    12e0:	4699      	mov	r9, r3
	switch (transfer_mode)
    12e2:	2b00      	cmp	r3, #0
    12e4:	d018      	beq.n	1318 <usart_init+0x230>
    12e6:	2380      	movs	r3, #128	; 0x80
    12e8:	055b      	lsls	r3, r3, #21
    12ea:	4599      	cmp	r9, r3
    12ec:	d001      	beq.n	12f2 <usart_init+0x20a>
	enum status_code status_code = STATUS_OK;
    12ee:	2000      	movs	r0, #0
    12f0:	e025      	b.n	133e <usart_init+0x256>
			if (!config->use_external_clock) {
    12f2:	2327      	movs	r3, #39	; 0x27
    12f4:	5cf3      	ldrb	r3, [r6, r3]
    12f6:	2b00      	cmp	r3, #0
    12f8:	d000      	beq.n	12fc <usart_init+0x214>
    12fa:	e779      	b.n	11f0 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    12fc:	6a33      	ldr	r3, [r6, #32]
    12fe:	001f      	movs	r7, r3
    1300:	b2c0      	uxtb	r0, r0
    1302:	4b40      	ldr	r3, [pc, #256]	; (1404 <usart_init+0x31c>)
    1304:	4798      	blx	r3
    1306:	0001      	movs	r1, r0
    1308:	220e      	movs	r2, #14
    130a:	ab06      	add	r3, sp, #24
    130c:	469c      	mov	ip, r3
    130e:	4462      	add	r2, ip
    1310:	0038      	movs	r0, r7
    1312:	4b3d      	ldr	r3, [pc, #244]	; (1408 <usart_init+0x320>)
    1314:	4798      	blx	r3
    1316:	e012      	b.n	133e <usart_init+0x256>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1318:	2308      	movs	r3, #8
    131a:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    131c:	2300      	movs	r3, #0
    131e:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    1320:	2327      	movs	r3, #39	; 0x27
    1322:	5cf3      	ldrb	r3, [r6, r3]
    1324:	2b00      	cmp	r3, #0
    1326:	d00e      	beq.n	1346 <usart_init+0x25e>
				status_code =
    1328:	9b06      	ldr	r3, [sp, #24]
    132a:	9300      	str	r3, [sp, #0]
    132c:	9b07      	ldr	r3, [sp, #28]
    132e:	220e      	movs	r2, #14
    1330:	a906      	add	r1, sp, #24
    1332:	468c      	mov	ip, r1
    1334:	4462      	add	r2, ip
    1336:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    1338:	6a30      	ldr	r0, [r6, #32]
    133a:	4f34      	ldr	r7, [pc, #208]	; (140c <usart_init+0x324>)
    133c:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    133e:	2800      	cmp	r0, #0
    1340:	d000      	beq.n	1344 <usart_init+0x25c>
    1342:	e6e4      	b.n	110e <usart_init+0x26>
    1344:	e754      	b.n	11f0 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    1346:	6a33      	ldr	r3, [r6, #32]
    1348:	001f      	movs	r7, r3
    134a:	b2c0      	uxtb	r0, r0
    134c:	4b2d      	ldr	r3, [pc, #180]	; (1404 <usart_init+0x31c>)
    134e:	4798      	blx	r3
    1350:	0001      	movs	r1, r0
				status_code =
    1352:	9b06      	ldr	r3, [sp, #24]
    1354:	9300      	str	r3, [sp, #0]
    1356:	9b07      	ldr	r3, [sp, #28]
    1358:	220e      	movs	r2, #14
    135a:	a806      	add	r0, sp, #24
    135c:	4684      	mov	ip, r0
    135e:	4462      	add	r2, ip
    1360:	0038      	movs	r0, r7
    1362:	4f2a      	ldr	r7, [pc, #168]	; (140c <usart_init+0x324>)
    1364:	47b8      	blx	r7
    1366:	e7ea      	b.n	133e <usart_init+0x256>
		if(config->lin_slave_enable) {
    1368:	7ef3      	ldrb	r3, [r6, #27]
    136a:	2b00      	cmp	r3, #0
    136c:	d100      	bne.n	1370 <usart_init+0x288>
    136e:	e77d      	b.n	126c <usart_init+0x184>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    1370:	2380      	movs	r3, #128	; 0x80
    1372:	04db      	lsls	r3, r3, #19
    1374:	431f      	orrs	r7, r3
    1376:	e779      	b.n	126c <usart_init+0x184>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1378:	0020      	movs	r0, r4
    137a:	4b25      	ldr	r3, [pc, #148]	; (1410 <usart_init+0x328>)
    137c:	4798      	blx	r3
    137e:	e007      	b.n	1390 <usart_init+0x2a8>
    1380:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    1382:	2f04      	cmp	r7, #4
    1384:	d00d      	beq.n	13a2 <usart_init+0x2ba>
    1386:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1388:	00bb      	lsls	r3, r7, #2
    138a:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    138c:	2800      	cmp	r0, #0
    138e:	d0f3      	beq.n	1378 <usart_init+0x290>
		if (current_pinmux != PINMUX_UNUSED) {
    1390:	1c43      	adds	r3, r0, #1
    1392:	d0f5      	beq.n	1380 <usart_init+0x298>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1394:	a90e      	add	r1, sp, #56	; 0x38
    1396:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1398:	0c00      	lsrs	r0, r0, #16
    139a:	b2c0      	uxtb	r0, r0
    139c:	4b1d      	ldr	r3, [pc, #116]	; (1414 <usart_init+0x32c>)
    139e:	4798      	blx	r3
    13a0:	e7ee      	b.n	1380 <usart_init+0x298>
		module->callback[i]            = NULL;
    13a2:	2300      	movs	r3, #0
    13a4:	60eb      	str	r3, [r5, #12]
    13a6:	612b      	str	r3, [r5, #16]
    13a8:	616b      	str	r3, [r5, #20]
    13aa:	61ab      	str	r3, [r5, #24]
    13ac:	61eb      	str	r3, [r5, #28]
    13ae:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    13b0:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    13b2:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    13b4:	2200      	movs	r2, #0
    13b6:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    13b8:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    13ba:	3330      	adds	r3, #48	; 0x30
    13bc:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    13be:	3301      	adds	r3, #1
    13c0:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    13c2:	3301      	adds	r3, #1
    13c4:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    13c6:	3301      	adds	r3, #1
    13c8:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    13ca:	6828      	ldr	r0, [r5, #0]
    13cc:	4b07      	ldr	r3, [pc, #28]	; (13ec <usart_init+0x304>)
    13ce:	4798      	blx	r3
    13d0:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    13d2:	4911      	ldr	r1, [pc, #68]	; (1418 <usart_init+0x330>)
    13d4:	4b11      	ldr	r3, [pc, #68]	; (141c <usart_init+0x334>)
    13d6:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    13d8:	00a4      	lsls	r4, r4, #2
    13da:	4b11      	ldr	r3, [pc, #68]	; (1420 <usart_init+0x338>)
    13dc:	50e5      	str	r5, [r4, r3]
	return status_code;
    13de:	2000      	movs	r0, #0
    13e0:	e695      	b.n	110e <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    13e2:	2310      	movs	r3, #16
    13e4:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    13e6:	2300      	movs	r3, #0
    13e8:	9307      	str	r3, [sp, #28]
    13ea:	e6ec      	b.n	11c6 <usart_init+0xde>
    13ec:	00000fe1 	.word	0x00000fe1
    13f0:	40000400 	.word	0x40000400
    13f4:	00001d15 	.word	0x00001d15
    13f8:	00001c89 	.word	0x00001c89
    13fc:	00000e1d 	.word	0x00000e1d
    1400:	41002000 	.word	0x41002000
    1404:	00001d31 	.word	0x00001d31
    1408:	00000d5f 	.word	0x00000d5f
    140c:	00000d89 	.word	0x00000d89
    1410:	00000e69 	.word	0x00000e69
    1414:	00001e0d 	.word	0x00001e0d
    1418:	0000153d 	.word	0x0000153d
    141c:	0000101d 	.word	0x0000101d
    1420:	200002b4 	.word	0x200002b4

00001424 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1424:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    1426:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    1428:	2a00      	cmp	r2, #0
    142a:	d101      	bne.n	1430 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    142c:	0018      	movs	r0, r3
    142e:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    1430:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    1432:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    1434:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    1436:	2a00      	cmp	r2, #0
    1438:	d1f8      	bne.n	142c <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    143a:	6802      	ldr	r2, [r0, #0]
	usart_hw->DATA.reg = tx_data;
    143c:	8511      	strh	r1, [r2, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    143e:	2102      	movs	r1, #2
    1440:	7e13      	ldrb	r3, [r2, #24]
    1442:	420b      	tst	r3, r1
    1444:	d0fc      	beq.n	1440 <usart_write_wait+0x1c>
	return STATUS_OK;
    1446:	2300      	movs	r3, #0
    1448:	e7f0      	b.n	142c <usart_write_wait+0x8>

0000144a <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    144a:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    144c:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    144e:	2a00      	cmp	r2, #0
    1450:	d101      	bne.n	1456 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    1452:	0018      	movs	r0, r3
    1454:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    1456:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    1458:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    145a:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    145c:	2a00      	cmp	r2, #0
    145e:	d1f8      	bne.n	1452 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    1460:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    1462:	7e10      	ldrb	r0, [r2, #24]
    1464:	0740      	lsls	r0, r0, #29
    1466:	d5f4      	bpl.n	1452 <usart_read_wait+0x8>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1468:	8b53      	ldrh	r3, [r2, #26]
    146a:	b2db      	uxtb	r3, r3
	if (error_code) {
    146c:	0698      	lsls	r0, r3, #26
    146e:	d01d      	beq.n	14ac <usart_read_wait+0x62>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    1470:	0798      	lsls	r0, r3, #30
    1472:	d503      	bpl.n	147c <usart_read_wait+0x32>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1474:	2302      	movs	r3, #2
    1476:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    1478:	3318      	adds	r3, #24
    147a:	e7ea      	b.n	1452 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    147c:	0758      	lsls	r0, r3, #29
    147e:	d503      	bpl.n	1488 <usart_read_wait+0x3e>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1480:	2304      	movs	r3, #4
    1482:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    1484:	331a      	adds	r3, #26
    1486:	e7e4      	b.n	1452 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1488:	07d8      	lsls	r0, r3, #31
    148a:	d503      	bpl.n	1494 <usart_read_wait+0x4a>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    148c:	2301      	movs	r3, #1
    148e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    1490:	3312      	adds	r3, #18
    1492:	e7de      	b.n	1452 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    1494:	06d8      	lsls	r0, r3, #27
    1496:	d503      	bpl.n	14a0 <usart_read_wait+0x56>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1498:	2310      	movs	r3, #16
    149a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    149c:	3332      	adds	r3, #50	; 0x32
    149e:	e7d8      	b.n	1452 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    14a0:	069b      	lsls	r3, r3, #26
    14a2:	d503      	bpl.n	14ac <usart_read_wait+0x62>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    14a4:	2320      	movs	r3, #32
    14a6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    14a8:	3321      	adds	r3, #33	; 0x21
    14aa:	e7d2      	b.n	1452 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    14ac:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    14ae:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    14b0:	2300      	movs	r3, #0
    14b2:	e7ce      	b.n	1452 <usart_read_wait+0x8>

000014b4 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    14b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    14b6:	0004      	movs	r4, r0
    14b8:	000d      	movs	r5, r1
    14ba:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    14bc:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    14be:	4b0f      	ldr	r3, [pc, #60]	; (14fc <_usart_read_buffer+0x48>)
    14c0:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    14c2:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    14c4:	b29b      	uxth	r3, r3
    14c6:	2b00      	cmp	r3, #0
    14c8:	d003      	beq.n	14d2 <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
    14ca:	4b0d      	ldr	r3, [pc, #52]	; (1500 <_usart_read_buffer+0x4c>)
    14cc:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    14ce:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    14d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    14d2:	85a6      	strh	r6, [r4, #44]	; 0x2c
    14d4:	4b0a      	ldr	r3, [pc, #40]	; (1500 <_usart_read_buffer+0x4c>)
    14d6:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    14d8:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    14da:	2205      	movs	r2, #5
    14dc:	2332      	movs	r3, #50	; 0x32
    14de:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    14e0:	3b2e      	subs	r3, #46	; 0x2e
    14e2:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
    14e4:	7a23      	ldrb	r3, [r4, #8]
    14e6:	2b00      	cmp	r3, #0
    14e8:	d001      	beq.n	14ee <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    14ea:	2320      	movs	r3, #32
    14ec:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
    14ee:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
    14f0:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
    14f2:	2b00      	cmp	r3, #0
    14f4:	d0ec      	beq.n	14d0 <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    14f6:	2308      	movs	r3, #8
    14f8:	75bb      	strb	r3, [r7, #22]
    14fa:	e7e9      	b.n	14d0 <_usart_read_buffer+0x1c>
    14fc:	000006a9 	.word	0x000006a9
    1500:	000006e9 	.word	0x000006e9

00001504 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    1504:	1c93      	adds	r3, r2, #2
    1506:	009b      	lsls	r3, r3, #2
    1508:	18c3      	adds	r3, r0, r3
    150a:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    150c:	2130      	movs	r1, #48	; 0x30
    150e:	2301      	movs	r3, #1
    1510:	4093      	lsls	r3, r2
    1512:	001a      	movs	r2, r3
    1514:	5c43      	ldrb	r3, [r0, r1]
    1516:	4313      	orrs	r3, r2
    1518:	5443      	strb	r3, [r0, r1]
}
    151a:	4770      	bx	lr

0000151c <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    151c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    151e:	2317      	movs	r3, #23
	if (length == 0) {
    1520:	2a00      	cmp	r2, #0
    1522:	d101      	bne.n	1528 <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
    1524:	0018      	movs	r0, r3
    1526:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
    1528:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
    152a:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
    152c:	2c00      	cmp	r4, #0
    152e:	d0f9      	beq.n	1524 <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
    1530:	4b01      	ldr	r3, [pc, #4]	; (1538 <usart_read_buffer_job+0x1c>)
    1532:	4798      	blx	r3
    1534:	0003      	movs	r3, r0
    1536:	e7f5      	b.n	1524 <usart_read_buffer_job+0x8>
    1538:	000014b5 	.word	0x000014b5

0000153c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    153c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    153e:	0080      	lsls	r0, r0, #2
    1540:	4b62      	ldr	r3, [pc, #392]	; (16cc <_usart_interrupt_handler+0x190>)
    1542:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    1544:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1546:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    1548:	2b00      	cmp	r3, #0
    154a:	d1fc      	bne.n	1546 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    154c:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    154e:	7da6      	ldrb	r6, [r4, #22]
    1550:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    1552:	2330      	movs	r3, #48	; 0x30
    1554:	5ceb      	ldrb	r3, [r5, r3]
    1556:	2231      	movs	r2, #49	; 0x31
    1558:	5caf      	ldrb	r7, [r5, r2]
    155a:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    155c:	07f3      	lsls	r3, r6, #31
    155e:	d522      	bpl.n	15a6 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    1560:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1562:	b29b      	uxth	r3, r3
    1564:	2b00      	cmp	r3, #0
    1566:	d01c      	beq.n	15a2 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1568:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    156a:	7813      	ldrb	r3, [r2, #0]
    156c:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    156e:	1c51      	adds	r1, r2, #1
    1570:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1572:	7969      	ldrb	r1, [r5, #5]
    1574:	2901      	cmp	r1, #1
    1576:	d00e      	beq.n	1596 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1578:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    157a:	05db      	lsls	r3, r3, #23
    157c:	0ddb      	lsrs	r3, r3, #23
    157e:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    1580:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1582:	3b01      	subs	r3, #1
    1584:	b29b      	uxth	r3, r3
    1586:	85eb      	strh	r3, [r5, #46]	; 0x2e
    1588:	2b00      	cmp	r3, #0
    158a:	d10c      	bne.n	15a6 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    158c:	3301      	adds	r3, #1
    158e:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    1590:	3301      	adds	r3, #1
    1592:	75a3      	strb	r3, [r4, #22]
    1594:	e007      	b.n	15a6 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    1596:	7851      	ldrb	r1, [r2, #1]
    1598:	0209      	lsls	r1, r1, #8
    159a:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    159c:	3202      	adds	r2, #2
    159e:	62aa      	str	r2, [r5, #40]	; 0x28
    15a0:	e7eb      	b.n	157a <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    15a2:	2301      	movs	r3, #1
    15a4:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    15a6:	07b3      	lsls	r3, r6, #30
    15a8:	d506      	bpl.n	15b8 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    15aa:	2302      	movs	r3, #2
    15ac:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    15ae:	2200      	movs	r2, #0
    15b0:	3331      	adds	r3, #49	; 0x31
    15b2:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    15b4:	07fb      	lsls	r3, r7, #31
    15b6:	d41a      	bmi.n	15ee <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    15b8:	0773      	lsls	r3, r6, #29
    15ba:	d565      	bpl.n	1688 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    15bc:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    15be:	b29b      	uxth	r3, r3
    15c0:	2b00      	cmp	r3, #0
    15c2:	d05f      	beq.n	1684 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    15c4:	8b63      	ldrh	r3, [r4, #26]
    15c6:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    15c8:	071a      	lsls	r2, r3, #28
    15ca:	d414      	bmi.n	15f6 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    15cc:	223f      	movs	r2, #63	; 0x3f
    15ce:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    15d0:	2b00      	cmp	r3, #0
    15d2:	d034      	beq.n	163e <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    15d4:	079a      	lsls	r2, r3, #30
    15d6:	d511      	bpl.n	15fc <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    15d8:	221a      	movs	r2, #26
    15da:	2332      	movs	r3, #50	; 0x32
    15dc:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    15de:	3b30      	subs	r3, #48	; 0x30
    15e0:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    15e2:	077b      	lsls	r3, r7, #29
    15e4:	d550      	bpl.n	1688 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    15e6:	0028      	movs	r0, r5
    15e8:	696b      	ldr	r3, [r5, #20]
    15ea:	4798      	blx	r3
    15ec:	e04c      	b.n	1688 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    15ee:	0028      	movs	r0, r5
    15f0:	68eb      	ldr	r3, [r5, #12]
    15f2:	4798      	blx	r3
    15f4:	e7e0      	b.n	15b8 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    15f6:	2237      	movs	r2, #55	; 0x37
    15f8:	4013      	ands	r3, r2
    15fa:	e7e9      	b.n	15d0 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    15fc:	075a      	lsls	r2, r3, #29
    15fe:	d505      	bpl.n	160c <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    1600:	221e      	movs	r2, #30
    1602:	2332      	movs	r3, #50	; 0x32
    1604:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1606:	3b2e      	subs	r3, #46	; 0x2e
    1608:	8363      	strh	r3, [r4, #26]
    160a:	e7ea      	b.n	15e2 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    160c:	07da      	lsls	r2, r3, #31
    160e:	d505      	bpl.n	161c <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    1610:	2213      	movs	r2, #19
    1612:	2332      	movs	r3, #50	; 0x32
    1614:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1616:	3b31      	subs	r3, #49	; 0x31
    1618:	8363      	strh	r3, [r4, #26]
    161a:	e7e2      	b.n	15e2 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    161c:	06da      	lsls	r2, r3, #27
    161e:	d505      	bpl.n	162c <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    1620:	2242      	movs	r2, #66	; 0x42
    1622:	2332      	movs	r3, #50	; 0x32
    1624:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1626:	3b22      	subs	r3, #34	; 0x22
    1628:	8363      	strh	r3, [r4, #26]
    162a:	e7da      	b.n	15e2 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    162c:	2220      	movs	r2, #32
    162e:	421a      	tst	r2, r3
    1630:	d0d7      	beq.n	15e2 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    1632:	3221      	adds	r2, #33	; 0x21
    1634:	2332      	movs	r3, #50	; 0x32
    1636:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1638:	3b12      	subs	r3, #18
    163a:	8363      	strh	r3, [r4, #26]
    163c:	e7d1      	b.n	15e2 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    163e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    1640:	05db      	lsls	r3, r3, #23
    1642:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    1644:	b2da      	uxtb	r2, r3
    1646:	6a69      	ldr	r1, [r5, #36]	; 0x24
    1648:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    164a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    164c:	1c51      	adds	r1, r2, #1
    164e:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1650:	7969      	ldrb	r1, [r5, #5]
    1652:	2901      	cmp	r1, #1
    1654:	d010      	beq.n	1678 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    1656:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1658:	3b01      	subs	r3, #1
    165a:	b29b      	uxth	r3, r3
    165c:	85ab      	strh	r3, [r5, #44]	; 0x2c
    165e:	2b00      	cmp	r3, #0
    1660:	d112      	bne.n	1688 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1662:	3304      	adds	r3, #4
    1664:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    1666:	2200      	movs	r2, #0
    1668:	332e      	adds	r3, #46	; 0x2e
    166a:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    166c:	07bb      	lsls	r3, r7, #30
    166e:	d50b      	bpl.n	1688 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    1670:	0028      	movs	r0, r5
    1672:	692b      	ldr	r3, [r5, #16]
    1674:	4798      	blx	r3
    1676:	e007      	b.n	1688 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    1678:	0a1b      	lsrs	r3, r3, #8
    167a:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    167c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    167e:	3301      	adds	r3, #1
    1680:	626b      	str	r3, [r5, #36]	; 0x24
    1682:	e7e8      	b.n	1656 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1684:	2304      	movs	r3, #4
    1686:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    1688:	06f3      	lsls	r3, r6, #27
    168a:	d504      	bpl.n	1696 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    168c:	2310      	movs	r3, #16
    168e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    1690:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    1692:	06fb      	lsls	r3, r7, #27
    1694:	d40e      	bmi.n	16b4 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    1696:	06b3      	lsls	r3, r6, #26
    1698:	d504      	bpl.n	16a4 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    169a:	2320      	movs	r3, #32
    169c:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    169e:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    16a0:	073b      	lsls	r3, r7, #28
    16a2:	d40b      	bmi.n	16bc <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    16a4:	0733      	lsls	r3, r6, #28
    16a6:	d504      	bpl.n	16b2 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    16a8:	2308      	movs	r3, #8
    16aa:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    16ac:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    16ae:	06bb      	lsls	r3, r7, #26
    16b0:	d408      	bmi.n	16c4 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    16b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    16b4:	0028      	movs	r0, r5
    16b6:	69eb      	ldr	r3, [r5, #28]
    16b8:	4798      	blx	r3
    16ba:	e7ec      	b.n	1696 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    16bc:	0028      	movs	r0, r5
    16be:	69ab      	ldr	r3, [r5, #24]
    16c0:	4798      	blx	r3
    16c2:	e7ef      	b.n	16a4 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    16c4:	6a2b      	ldr	r3, [r5, #32]
    16c6:	0028      	movs	r0, r5
    16c8:	4798      	blx	r3
}
    16ca:	e7f2      	b.n	16b2 <_usart_interrupt_handler+0x176>
    16cc:	200002b4 	.word	0x200002b4

000016d0 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    16d0:	b510      	push	{r4, lr}
	switch (clock_source) {
    16d2:	2808      	cmp	r0, #8
    16d4:	d803      	bhi.n	16de <system_clock_source_get_hz+0xe>
    16d6:	0080      	lsls	r0, r0, #2
    16d8:	4b1c      	ldr	r3, [pc, #112]	; (174c <system_clock_source_get_hz+0x7c>)
    16da:	581b      	ldr	r3, [r3, r0]
    16dc:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    16de:	2000      	movs	r0, #0
    16e0:	e032      	b.n	1748 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    16e2:	4b1b      	ldr	r3, [pc, #108]	; (1750 <system_clock_source_get_hz+0x80>)
    16e4:	6918      	ldr	r0, [r3, #16]
    16e6:	e02f      	b.n	1748 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    16e8:	4b1a      	ldr	r3, [pc, #104]	; (1754 <system_clock_source_get_hz+0x84>)
    16ea:	6a1b      	ldr	r3, [r3, #32]
    16ec:	059b      	lsls	r3, r3, #22
    16ee:	0f9b      	lsrs	r3, r3, #30
    16f0:	4819      	ldr	r0, [pc, #100]	; (1758 <system_clock_source_get_hz+0x88>)
    16f2:	40d8      	lsrs	r0, r3
    16f4:	e028      	b.n	1748 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    16f6:	4b16      	ldr	r3, [pc, #88]	; (1750 <system_clock_source_get_hz+0x80>)
    16f8:	6958      	ldr	r0, [r3, #20]
    16fa:	e025      	b.n	1748 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    16fc:	4b14      	ldr	r3, [pc, #80]	; (1750 <system_clock_source_get_hz+0x80>)
    16fe:	681b      	ldr	r3, [r3, #0]
			return 0;
    1700:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1702:	079b      	lsls	r3, r3, #30
    1704:	d520      	bpl.n	1748 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1706:	4913      	ldr	r1, [pc, #76]	; (1754 <system_clock_source_get_hz+0x84>)
    1708:	2210      	movs	r2, #16
    170a:	68cb      	ldr	r3, [r1, #12]
    170c:	421a      	tst	r2, r3
    170e:	d0fc      	beq.n	170a <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    1710:	4b0f      	ldr	r3, [pc, #60]	; (1750 <system_clock_source_get_hz+0x80>)
    1712:	681a      	ldr	r2, [r3, #0]
    1714:	2324      	movs	r3, #36	; 0x24
    1716:	4013      	ands	r3, r2
    1718:	2b04      	cmp	r3, #4
    171a:	d001      	beq.n	1720 <system_clock_source_get_hz+0x50>
			return 48000000UL;
    171c:	480f      	ldr	r0, [pc, #60]	; (175c <system_clock_source_get_hz+0x8c>)
    171e:	e013      	b.n	1748 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1720:	2000      	movs	r0, #0
    1722:	4b0f      	ldr	r3, [pc, #60]	; (1760 <system_clock_source_get_hz+0x90>)
    1724:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    1726:	4b0a      	ldr	r3, [pc, #40]	; (1750 <system_clock_source_get_hz+0x80>)
    1728:	689b      	ldr	r3, [r3, #8]
    172a:	041b      	lsls	r3, r3, #16
    172c:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    172e:	4358      	muls	r0, r3
    1730:	e00a      	b.n	1748 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1732:	2350      	movs	r3, #80	; 0x50
    1734:	4a07      	ldr	r2, [pc, #28]	; (1754 <system_clock_source_get_hz+0x84>)
    1736:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    1738:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    173a:	075b      	lsls	r3, r3, #29
    173c:	d504      	bpl.n	1748 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    173e:	4b04      	ldr	r3, [pc, #16]	; (1750 <system_clock_source_get_hz+0x80>)
    1740:	68d8      	ldr	r0, [r3, #12]
    1742:	e001      	b.n	1748 <system_clock_source_get_hz+0x78>
		return 32768UL;
    1744:	2080      	movs	r0, #128	; 0x80
    1746:	0200      	lsls	r0, r0, #8
	}
}
    1748:	bd10      	pop	{r4, pc}
    174a:	46c0      	nop			; (mov r8, r8)
    174c:	00004fac 	.word	0x00004fac
    1750:	2000027c 	.word	0x2000027c
    1754:	40000800 	.word	0x40000800
    1758:	007a1200 	.word	0x007a1200
    175c:	02dc6c00 	.word	0x02dc6c00
    1760:	00001d31 	.word	0x00001d31

00001764 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1764:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1766:	490c      	ldr	r1, [pc, #48]	; (1798 <system_clock_source_osc8m_set_config+0x34>)
    1768:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    176a:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    176c:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    176e:	7840      	ldrb	r0, [r0, #1]
    1770:	2201      	movs	r2, #1
    1772:	4010      	ands	r0, r2
    1774:	0180      	lsls	r0, r0, #6
    1776:	2640      	movs	r6, #64	; 0x40
    1778:	43b3      	bics	r3, r6
    177a:	4303      	orrs	r3, r0
    177c:	402a      	ands	r2, r5
    177e:	01d2      	lsls	r2, r2, #7
    1780:	2080      	movs	r0, #128	; 0x80
    1782:	4383      	bics	r3, r0
    1784:	4313      	orrs	r3, r2
    1786:	2203      	movs	r2, #3
    1788:	4022      	ands	r2, r4
    178a:	0212      	lsls	r2, r2, #8
    178c:	4803      	ldr	r0, [pc, #12]	; (179c <system_clock_source_osc8m_set_config+0x38>)
    178e:	4003      	ands	r3, r0
    1790:	4313      	orrs	r3, r2
    1792:	620b      	str	r3, [r1, #32]
}
    1794:	bd70      	pop	{r4, r5, r6, pc}
    1796:	46c0      	nop			; (mov r8, r8)
    1798:	40000800 	.word	0x40000800
    179c:	fffffcff 	.word	0xfffffcff

000017a0 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    17a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    17a2:	46de      	mov	lr, fp
    17a4:	4657      	mov	r7, sl
    17a6:	464e      	mov	r6, r9
    17a8:	4645      	mov	r5, r8
    17aa:	b5e0      	push	{r5, r6, r7, lr}
    17ac:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    17ae:	4b26      	ldr	r3, [pc, #152]	; (1848 <system_clock_source_xosc32k_set_config+0xa8>)
    17b0:	469b      	mov	fp, r3
    17b2:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    17b4:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    17b6:	7800      	ldrb	r0, [r0, #0]
    17b8:	4242      	negs	r2, r0
    17ba:	4142      	adcs	r2, r0
    17bc:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    17be:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    17c0:	78ca      	ldrb	r2, [r1, #3]
    17c2:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    17c4:	790a      	ldrb	r2, [r1, #4]
    17c6:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    17c8:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    17ca:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    17cc:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    17ce:	688a      	ldr	r2, [r1, #8]
    17d0:	491e      	ldr	r1, [pc, #120]	; (184c <system_clock_source_xosc32k_set_config+0xac>)
    17d2:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    17d4:	2101      	movs	r1, #1
    17d6:	464a      	mov	r2, r9
    17d8:	0092      	lsls	r2, r2, #2
    17da:	4691      	mov	r9, r2
    17dc:	2204      	movs	r2, #4
    17de:	4393      	bics	r3, r2
    17e0:	464a      	mov	r2, r9
    17e2:	4313      	orrs	r3, r2
    17e4:	4642      	mov	r2, r8
    17e6:	400a      	ands	r2, r1
    17e8:	00d2      	lsls	r2, r2, #3
    17ea:	4690      	mov	r8, r2
    17ec:	2208      	movs	r2, #8
    17ee:	4393      	bics	r3, r2
    17f0:	4642      	mov	r2, r8
    17f2:	4313      	orrs	r3, r2
    17f4:	4662      	mov	r2, ip
    17f6:	400a      	ands	r2, r1
    17f8:	0112      	lsls	r2, r2, #4
    17fa:	4694      	mov	ip, r2
    17fc:	2210      	movs	r2, #16
    17fe:	4393      	bics	r3, r2
    1800:	4662      	mov	r2, ip
    1802:	4313      	orrs	r3, r2
    1804:	4008      	ands	r0, r1
    1806:	0140      	lsls	r0, r0, #5
    1808:	2220      	movs	r2, #32
    180a:	4393      	bics	r3, r2
    180c:	4303      	orrs	r3, r0
    180e:	400f      	ands	r7, r1
    1810:	01bf      	lsls	r7, r7, #6
    1812:	2040      	movs	r0, #64	; 0x40
    1814:	4383      	bics	r3, r0
    1816:	433b      	orrs	r3, r7
    1818:	400e      	ands	r6, r1
    181a:	01f6      	lsls	r6, r6, #7
    181c:	3040      	adds	r0, #64	; 0x40
    181e:	4383      	bics	r3, r0
    1820:	4333      	orrs	r3, r6
    1822:	3879      	subs	r0, #121	; 0x79
    1824:	4005      	ands	r5, r0
    1826:	022d      	lsls	r5, r5, #8
    1828:	4809      	ldr	r0, [pc, #36]	; (1850 <system_clock_source_xosc32k_set_config+0xb0>)
    182a:	4003      	ands	r3, r0
    182c:	432b      	orrs	r3, r5
    182e:	4021      	ands	r1, r4
    1830:	0309      	lsls	r1, r1, #12
    1832:	4808      	ldr	r0, [pc, #32]	; (1854 <system_clock_source_xosc32k_set_config+0xb4>)
    1834:	4003      	ands	r3, r0
    1836:	430b      	orrs	r3, r1
    1838:	465a      	mov	r2, fp
    183a:	8293      	strh	r3, [r2, #20]
}
    183c:	bc3c      	pop	{r2, r3, r4, r5}
    183e:	4690      	mov	r8, r2
    1840:	4699      	mov	r9, r3
    1842:	46a2      	mov	sl, r4
    1844:	46ab      	mov	fp, r5
    1846:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1848:	40000800 	.word	0x40000800
    184c:	2000027c 	.word	0x2000027c
    1850:	fffff8ff 	.word	0xfffff8ff
    1854:	ffffefff 	.word	0xffffefff

00001858 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    1858:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    185a:	7a03      	ldrb	r3, [r0, #8]
    185c:	069b      	lsls	r3, r3, #26
    185e:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    1860:	8942      	ldrh	r2, [r0, #10]
    1862:	0592      	lsls	r2, r2, #22
    1864:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1866:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    1868:	4918      	ldr	r1, [pc, #96]	; (18cc <system_clock_source_dfll_set_config+0x74>)
    186a:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    186c:	7983      	ldrb	r3, [r0, #6]
    186e:	79c2      	ldrb	r2, [r0, #7]
    1870:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    1872:	8842      	ldrh	r2, [r0, #2]
    1874:	8884      	ldrh	r4, [r0, #4]
    1876:	4322      	orrs	r2, r4
    1878:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    187a:	7842      	ldrb	r2, [r0, #1]
    187c:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    187e:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    1880:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    1882:	7803      	ldrb	r3, [r0, #0]
    1884:	2b04      	cmp	r3, #4
    1886:	d011      	beq.n	18ac <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    1888:	2b20      	cmp	r3, #32
    188a:	d10e      	bne.n	18aa <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    188c:	7b03      	ldrb	r3, [r0, #12]
    188e:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1890:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1892:	4313      	orrs	r3, r2
    1894:	89c2      	ldrh	r2, [r0, #14]
    1896:	0412      	lsls	r2, r2, #16
    1898:	490d      	ldr	r1, [pc, #52]	; (18d0 <system_clock_source_dfll_set_config+0x78>)
    189a:	400a      	ands	r2, r1
    189c:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    189e:	4a0b      	ldr	r2, [pc, #44]	; (18cc <system_clock_source_dfll_set_config+0x74>)
    18a0:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    18a2:	6811      	ldr	r1, [r2, #0]
    18a4:	4b0b      	ldr	r3, [pc, #44]	; (18d4 <system_clock_source_dfll_set_config+0x7c>)
    18a6:	430b      	orrs	r3, r1
    18a8:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    18aa:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    18ac:	7b03      	ldrb	r3, [r0, #12]
    18ae:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    18b0:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    18b2:	4313      	orrs	r3, r2
    18b4:	89c2      	ldrh	r2, [r0, #14]
    18b6:	0412      	lsls	r2, r2, #16
    18b8:	4905      	ldr	r1, [pc, #20]	; (18d0 <system_clock_source_dfll_set_config+0x78>)
    18ba:	400a      	ands	r2, r1
    18bc:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    18be:	4a03      	ldr	r2, [pc, #12]	; (18cc <system_clock_source_dfll_set_config+0x74>)
    18c0:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    18c2:	6813      	ldr	r3, [r2, #0]
    18c4:	2104      	movs	r1, #4
    18c6:	430b      	orrs	r3, r1
    18c8:	6013      	str	r3, [r2, #0]
    18ca:	e7ee      	b.n	18aa <system_clock_source_dfll_set_config+0x52>
    18cc:	2000027c 	.word	0x2000027c
    18d0:	03ff0000 	.word	0x03ff0000
    18d4:	00000424 	.word	0x00000424

000018d8 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    18d8:	2808      	cmp	r0, #8
    18da:	d803      	bhi.n	18e4 <system_clock_source_enable+0xc>
    18dc:	0080      	lsls	r0, r0, #2
    18de:	4b25      	ldr	r3, [pc, #148]	; (1974 <system_clock_source_enable+0x9c>)
    18e0:	581b      	ldr	r3, [r3, r0]
    18e2:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    18e4:	2017      	movs	r0, #23
    18e6:	e044      	b.n	1972 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    18e8:	4a23      	ldr	r2, [pc, #140]	; (1978 <system_clock_source_enable+0xa0>)
    18ea:	6a13      	ldr	r3, [r2, #32]
    18ec:	2102      	movs	r1, #2
    18ee:	430b      	orrs	r3, r1
    18f0:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    18f2:	2000      	movs	r0, #0
    18f4:	e03d      	b.n	1972 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    18f6:	4a20      	ldr	r2, [pc, #128]	; (1978 <system_clock_source_enable+0xa0>)
    18f8:	6993      	ldr	r3, [r2, #24]
    18fa:	2102      	movs	r1, #2
    18fc:	430b      	orrs	r3, r1
    18fe:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    1900:	2000      	movs	r0, #0
		break;
    1902:	e036      	b.n	1972 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1904:	4a1c      	ldr	r2, [pc, #112]	; (1978 <system_clock_source_enable+0xa0>)
    1906:	8a13      	ldrh	r3, [r2, #16]
    1908:	2102      	movs	r1, #2
    190a:	430b      	orrs	r3, r1
    190c:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    190e:	2000      	movs	r0, #0
		break;
    1910:	e02f      	b.n	1972 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1912:	4a19      	ldr	r2, [pc, #100]	; (1978 <system_clock_source_enable+0xa0>)
    1914:	8a93      	ldrh	r3, [r2, #20]
    1916:	2102      	movs	r1, #2
    1918:	430b      	orrs	r3, r1
    191a:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    191c:	2000      	movs	r0, #0
		break;
    191e:	e028      	b.n	1972 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1920:	4916      	ldr	r1, [pc, #88]	; (197c <system_clock_source_enable+0xa4>)
    1922:	680b      	ldr	r3, [r1, #0]
    1924:	2202      	movs	r2, #2
    1926:	4313      	orrs	r3, r2
    1928:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    192a:	4b13      	ldr	r3, [pc, #76]	; (1978 <system_clock_source_enable+0xa0>)
    192c:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    192e:	0019      	movs	r1, r3
    1930:	320e      	adds	r2, #14
    1932:	68cb      	ldr	r3, [r1, #12]
    1934:	421a      	tst	r2, r3
    1936:	d0fc      	beq.n	1932 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1938:	4a10      	ldr	r2, [pc, #64]	; (197c <system_clock_source_enable+0xa4>)
    193a:	6891      	ldr	r1, [r2, #8]
    193c:	4b0e      	ldr	r3, [pc, #56]	; (1978 <system_clock_source_enable+0xa0>)
    193e:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1940:	6852      	ldr	r2, [r2, #4]
    1942:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    1944:	2200      	movs	r2, #0
    1946:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1948:	0019      	movs	r1, r3
    194a:	3210      	adds	r2, #16
    194c:	68cb      	ldr	r3, [r1, #12]
    194e:	421a      	tst	r2, r3
    1950:	d0fc      	beq.n	194c <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1952:	4b0a      	ldr	r3, [pc, #40]	; (197c <system_clock_source_enable+0xa4>)
    1954:	681b      	ldr	r3, [r3, #0]
    1956:	b29b      	uxth	r3, r3
    1958:	4a07      	ldr	r2, [pc, #28]	; (1978 <system_clock_source_enable+0xa0>)
    195a:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    195c:	2000      	movs	r0, #0
    195e:	e008      	b.n	1972 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1960:	4905      	ldr	r1, [pc, #20]	; (1978 <system_clock_source_enable+0xa0>)
    1962:	2244      	movs	r2, #68	; 0x44
    1964:	5c8b      	ldrb	r3, [r1, r2]
    1966:	2002      	movs	r0, #2
    1968:	4303      	orrs	r3, r0
    196a:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    196c:	2000      	movs	r0, #0
		break;
    196e:	e000      	b.n	1972 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    1970:	2000      	movs	r0, #0
}
    1972:	4770      	bx	lr
    1974:	00004fd0 	.word	0x00004fd0
    1978:	40000800 	.word	0x40000800
    197c:	2000027c 	.word	0x2000027c

00001980 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1980:	b5f0      	push	{r4, r5, r6, r7, lr}
    1982:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1984:	22c2      	movs	r2, #194	; 0xc2
    1986:	00d2      	lsls	r2, r2, #3
    1988:	4b47      	ldr	r3, [pc, #284]	; (1aa8 <system_clock_init+0x128>)
    198a:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    198c:	4947      	ldr	r1, [pc, #284]	; (1aac <system_clock_init+0x12c>)
    198e:	684b      	ldr	r3, [r1, #4]
    1990:	221e      	movs	r2, #30
    1992:	4393      	bics	r3, r2
    1994:	3a1c      	subs	r2, #28
    1996:	4313      	orrs	r3, r2
    1998:	604b      	str	r3, [r1, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    199a:	ab01      	add	r3, sp, #4
    199c:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    199e:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    19a0:	4d43      	ldr	r5, [pc, #268]	; (1ab0 <system_clock_init+0x130>)
    19a2:	b2e0      	uxtb	r0, r4
    19a4:	a901      	add	r1, sp, #4
    19a6:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    19a8:	3401      	adds	r4, #1
    19aa:	2c25      	cmp	r4, #37	; 0x25
    19ac:	d1f9      	bne.n	19a2 <system_clock_init+0x22>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    19ae:	a80a      	add	r0, sp, #40	; 0x28
    19b0:	2300      	movs	r3, #0
    19b2:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    19b4:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    19b6:	2280      	movs	r2, #128	; 0x80
    19b8:	0212      	lsls	r2, r2, #8
    19ba:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    19bc:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    19be:	2201      	movs	r2, #1
    19c0:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    19c2:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    19c4:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    19c6:	3205      	adds	r2, #5
    19c8:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    19ca:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    19cc:	4b39      	ldr	r3, [pc, #228]	; (1ab4 <system_clock_init+0x134>)
    19ce:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    19d0:	2005      	movs	r0, #5
    19d2:	4b39      	ldr	r3, [pc, #228]	; (1ab8 <system_clock_init+0x138>)
    19d4:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    19d6:	4934      	ldr	r1, [pc, #208]	; (1aa8 <system_clock_init+0x128>)
    19d8:	2202      	movs	r2, #2
    19da:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    19dc:	421a      	tst	r2, r3
    19de:	d0fc      	beq.n	19da <system_clock_init+0x5a>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    19e0:	4a31      	ldr	r2, [pc, #196]	; (1aa8 <system_clock_init+0x128>)
    19e2:	8a93      	ldrh	r3, [r2, #20]
    19e4:	2180      	movs	r1, #128	; 0x80
    19e6:	430b      	orrs	r3, r1
    19e8:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    19ea:	ab05      	add	r3, sp, #20
    19ec:	2100      	movs	r1, #0
    19ee:	2200      	movs	r2, #0
    19f0:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    19f2:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    19f4:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    19f6:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    19f8:	313f      	adds	r1, #63	; 0x3f
    19fa:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    19fc:	393b      	subs	r1, #59	; 0x3b
    19fe:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    1a00:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    1a02:	4b2e      	ldr	r3, [pc, #184]	; (1abc <system_clock_init+0x13c>)
    1a04:	681b      	ldr	r3, [r3, #0]
    1a06:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    1a08:	2b3f      	cmp	r3, #63	; 0x3f
    1a0a:	d04b      	beq.n	1aa4 <system_clock_init+0x124>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    1a0c:	a805      	add	r0, sp, #20
    1a0e:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    1a10:	23b7      	movs	r3, #183	; 0xb7
    1a12:	00db      	lsls	r3, r3, #3
    1a14:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    1a16:	2307      	movs	r3, #7
    1a18:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    1a1a:	3338      	adds	r3, #56	; 0x38
    1a1c:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    1a1e:	4b28      	ldr	r3, [pc, #160]	; (1ac0 <system_clock_init+0x140>)
    1a20:	4798      	blx	r3
	config->run_in_standby  = false;
    1a22:	a804      	add	r0, sp, #16
    1a24:	2500      	movs	r5, #0
    1a26:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    1a28:	2601      	movs	r6, #1
    1a2a:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1a2c:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1a2e:	4b25      	ldr	r3, [pc, #148]	; (1ac4 <system_clock_init+0x144>)
    1a30:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1a32:	2006      	movs	r0, #6
    1a34:	4f20      	ldr	r7, [pc, #128]	; (1ab8 <system_clock_init+0x138>)
    1a36:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1a38:	4b23      	ldr	r3, [pc, #140]	; (1ac8 <system_clock_init+0x148>)
    1a3a:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1a3c:	ac01      	add	r4, sp, #4
    1a3e:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    1a40:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    1a42:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    1a44:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    1a46:	2305      	movs	r3, #5
    1a48:	7023      	strb	r3, [r4, #0]
    1a4a:	0021      	movs	r1, r4
    1a4c:	2001      	movs	r0, #1
    1a4e:	4b1f      	ldr	r3, [pc, #124]	; (1acc <system_clock_init+0x14c>)
    1a50:	4798      	blx	r3
    1a52:	2001      	movs	r0, #1
    1a54:	4b1e      	ldr	r3, [pc, #120]	; (1ad0 <system_clock_init+0x150>)
    1a56:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    1a58:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    1a5a:	0021      	movs	r1, r4
    1a5c:	2000      	movs	r0, #0
    1a5e:	4b14      	ldr	r3, [pc, #80]	; (1ab0 <system_clock_init+0x130>)
    1a60:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    1a62:	2000      	movs	r0, #0
    1a64:	4b1b      	ldr	r3, [pc, #108]	; (1ad4 <system_clock_init+0x154>)
    1a66:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    1a68:	2007      	movs	r0, #7
    1a6a:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1a6c:	490e      	ldr	r1, [pc, #56]	; (1aa8 <system_clock_init+0x128>)
    1a6e:	22d0      	movs	r2, #208	; 0xd0
    1a70:	68cb      	ldr	r3, [r1, #12]
    1a72:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    1a74:	2bd0      	cmp	r3, #208	; 0xd0
    1a76:	d1fb      	bne.n	1a70 <system_clock_init+0xf0>
	PM->CPUSEL.reg = (uint32_t)divider;
    1a78:	4a17      	ldr	r2, [pc, #92]	; (1ad8 <system_clock_init+0x158>)
    1a7a:	2300      	movs	r3, #0
    1a7c:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    1a7e:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    1a80:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    1a82:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    1a84:	a901      	add	r1, sp, #4
    1a86:	2201      	movs	r2, #1
    1a88:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    1a8a:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    1a8c:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    1a8e:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1a90:	3307      	adds	r3, #7
    1a92:	700b      	strb	r3, [r1, #0]
    1a94:	2000      	movs	r0, #0
    1a96:	4b0d      	ldr	r3, [pc, #52]	; (1acc <system_clock_init+0x14c>)
    1a98:	4798      	blx	r3
    1a9a:	2000      	movs	r0, #0
    1a9c:	4b0c      	ldr	r3, [pc, #48]	; (1ad0 <system_clock_init+0x150>)
    1a9e:	4798      	blx	r3
#endif
}
    1aa0:	b00f      	add	sp, #60	; 0x3c
    1aa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    1aa4:	3b20      	subs	r3, #32
    1aa6:	e7b1      	b.n	1a0c <system_clock_init+0x8c>
    1aa8:	40000800 	.word	0x40000800
    1aac:	41004000 	.word	0x41004000
    1ab0:	00001d15 	.word	0x00001d15
    1ab4:	000017a1 	.word	0x000017a1
    1ab8:	000018d9 	.word	0x000018d9
    1abc:	00806024 	.word	0x00806024
    1ac0:	00001859 	.word	0x00001859
    1ac4:	00001765 	.word	0x00001765
    1ac8:	00001add 	.word	0x00001add
    1acc:	00001b01 	.word	0x00001b01
    1ad0:	00001bb9 	.word	0x00001bb9
    1ad4:	00001c89 	.word	0x00001c89
    1ad8:	40000400 	.word	0x40000400

00001adc <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    1adc:	4a06      	ldr	r2, [pc, #24]	; (1af8 <system_gclk_init+0x1c>)
    1ade:	6993      	ldr	r3, [r2, #24]
    1ae0:	2108      	movs	r1, #8
    1ae2:	430b      	orrs	r3, r1
    1ae4:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1ae6:	2201      	movs	r2, #1
    1ae8:	4b04      	ldr	r3, [pc, #16]	; (1afc <system_gclk_init+0x20>)
    1aea:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1aec:	0019      	movs	r1, r3
    1aee:	780b      	ldrb	r3, [r1, #0]
    1af0:	4213      	tst	r3, r2
    1af2:	d1fc      	bne.n	1aee <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1af4:	4770      	bx	lr
    1af6:	46c0      	nop			; (mov r8, r8)
    1af8:	40000400 	.word	0x40000400
    1afc:	40000c00 	.word	0x40000c00

00001b00 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1b00:	b570      	push	{r4, r5, r6, lr}
    1b02:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1b04:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1b06:	780d      	ldrb	r5, [r1, #0]
    1b08:	022d      	lsls	r5, r5, #8
    1b0a:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1b0c:	784b      	ldrb	r3, [r1, #1]
    1b0e:	2b00      	cmp	r3, #0
    1b10:	d002      	beq.n	1b18 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1b12:	2380      	movs	r3, #128	; 0x80
    1b14:	02db      	lsls	r3, r3, #11
    1b16:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1b18:	7a4b      	ldrb	r3, [r1, #9]
    1b1a:	2b00      	cmp	r3, #0
    1b1c:	d002      	beq.n	1b24 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1b1e:	2380      	movs	r3, #128	; 0x80
    1b20:	031b      	lsls	r3, r3, #12
    1b22:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1b24:	6848      	ldr	r0, [r1, #4]
    1b26:	2801      	cmp	r0, #1
    1b28:	d910      	bls.n	1b4c <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1b2a:	1e43      	subs	r3, r0, #1
    1b2c:	4218      	tst	r0, r3
    1b2e:	d134      	bne.n	1b9a <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1b30:	2802      	cmp	r0, #2
    1b32:	d930      	bls.n	1b96 <system_gclk_gen_set_config+0x96>
    1b34:	2302      	movs	r3, #2
    1b36:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1b38:	3201      	adds	r2, #1
						mask <<= 1) {
    1b3a:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    1b3c:	4298      	cmp	r0, r3
    1b3e:	d8fb      	bhi.n	1b38 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1b40:	0212      	lsls	r2, r2, #8
    1b42:	4332      	orrs	r2, r6
    1b44:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1b46:	2380      	movs	r3, #128	; 0x80
    1b48:	035b      	lsls	r3, r3, #13
    1b4a:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1b4c:	7a0b      	ldrb	r3, [r1, #8]
    1b4e:	2b00      	cmp	r3, #0
    1b50:	d002      	beq.n	1b58 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1b52:	2380      	movs	r3, #128	; 0x80
    1b54:	039b      	lsls	r3, r3, #14
    1b56:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1b58:	4a13      	ldr	r2, [pc, #76]	; (1ba8 <system_gclk_gen_set_config+0xa8>)
    1b5a:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    1b5c:	b25b      	sxtb	r3, r3
    1b5e:	2b00      	cmp	r3, #0
    1b60:	dbfb      	blt.n	1b5a <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    1b62:	4b12      	ldr	r3, [pc, #72]	; (1bac <system_gclk_gen_set_config+0xac>)
    1b64:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1b66:	4b12      	ldr	r3, [pc, #72]	; (1bb0 <system_gclk_gen_set_config+0xb0>)
    1b68:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1b6a:	4a0f      	ldr	r2, [pc, #60]	; (1ba8 <system_gclk_gen_set_config+0xa8>)
    1b6c:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1b6e:	b25b      	sxtb	r3, r3
    1b70:	2b00      	cmp	r3, #0
    1b72:	dbfb      	blt.n	1b6c <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1b74:	4b0c      	ldr	r3, [pc, #48]	; (1ba8 <system_gclk_gen_set_config+0xa8>)
    1b76:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1b78:	001a      	movs	r2, r3
    1b7a:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    1b7c:	b25b      	sxtb	r3, r3
    1b7e:	2b00      	cmp	r3, #0
    1b80:	dbfb      	blt.n	1b7a <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1b82:	4a09      	ldr	r2, [pc, #36]	; (1ba8 <system_gclk_gen_set_config+0xa8>)
    1b84:	6853      	ldr	r3, [r2, #4]
    1b86:	2180      	movs	r1, #128	; 0x80
    1b88:	0249      	lsls	r1, r1, #9
    1b8a:	400b      	ands	r3, r1
    1b8c:	431d      	orrs	r5, r3
    1b8e:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    1b90:	4b08      	ldr	r3, [pc, #32]	; (1bb4 <system_gclk_gen_set_config+0xb4>)
    1b92:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1b94:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    1b96:	2200      	movs	r2, #0
    1b98:	e7d2      	b.n	1b40 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1b9a:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    1b9c:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1b9e:	2380      	movs	r3, #128	; 0x80
    1ba0:	029b      	lsls	r3, r3, #10
    1ba2:	431d      	orrs	r5, r3
    1ba4:	e7d2      	b.n	1b4c <system_gclk_gen_set_config+0x4c>
    1ba6:	46c0      	nop			; (mov r8, r8)
    1ba8:	40000c00 	.word	0x40000c00
    1bac:	000006a9 	.word	0x000006a9
    1bb0:	40000c08 	.word	0x40000c08
    1bb4:	000006e9 	.word	0x000006e9

00001bb8 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1bb8:	b510      	push	{r4, lr}
    1bba:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1bbc:	4a0b      	ldr	r2, [pc, #44]	; (1bec <system_gclk_gen_enable+0x34>)
    1bbe:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1bc0:	b25b      	sxtb	r3, r3
    1bc2:	2b00      	cmp	r3, #0
    1bc4:	dbfb      	blt.n	1bbe <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    1bc6:	4b0a      	ldr	r3, [pc, #40]	; (1bf0 <system_gclk_gen_enable+0x38>)
    1bc8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1bca:	4b0a      	ldr	r3, [pc, #40]	; (1bf4 <system_gclk_gen_enable+0x3c>)
    1bcc:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1bce:	4a07      	ldr	r2, [pc, #28]	; (1bec <system_gclk_gen_enable+0x34>)
    1bd0:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1bd2:	b25b      	sxtb	r3, r3
    1bd4:	2b00      	cmp	r3, #0
    1bd6:	dbfb      	blt.n	1bd0 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1bd8:	4a04      	ldr	r2, [pc, #16]	; (1bec <system_gclk_gen_enable+0x34>)
    1bda:	6851      	ldr	r1, [r2, #4]
    1bdc:	2380      	movs	r3, #128	; 0x80
    1bde:	025b      	lsls	r3, r3, #9
    1be0:	430b      	orrs	r3, r1
    1be2:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    1be4:	4b04      	ldr	r3, [pc, #16]	; (1bf8 <system_gclk_gen_enable+0x40>)
    1be6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1be8:	bd10      	pop	{r4, pc}
    1bea:	46c0      	nop			; (mov r8, r8)
    1bec:	40000c00 	.word	0x40000c00
    1bf0:	000006a9 	.word	0x000006a9
    1bf4:	40000c04 	.word	0x40000c04
    1bf8:	000006e9 	.word	0x000006e9

00001bfc <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1bfc:	b570      	push	{r4, r5, r6, lr}
    1bfe:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1c00:	4a1a      	ldr	r2, [pc, #104]	; (1c6c <system_gclk_gen_get_hz+0x70>)
    1c02:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1c04:	b25b      	sxtb	r3, r3
    1c06:	2b00      	cmp	r3, #0
    1c08:	dbfb      	blt.n	1c02 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    1c0a:	4b19      	ldr	r3, [pc, #100]	; (1c70 <system_gclk_gen_get_hz+0x74>)
    1c0c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1c0e:	4b19      	ldr	r3, [pc, #100]	; (1c74 <system_gclk_gen_get_hz+0x78>)
    1c10:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1c12:	4a16      	ldr	r2, [pc, #88]	; (1c6c <system_gclk_gen_get_hz+0x70>)
    1c14:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1c16:	b25b      	sxtb	r3, r3
    1c18:	2b00      	cmp	r3, #0
    1c1a:	dbfb      	blt.n	1c14 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1c1c:	4e13      	ldr	r6, [pc, #76]	; (1c6c <system_gclk_gen_get_hz+0x70>)
    1c1e:	6870      	ldr	r0, [r6, #4]
    1c20:	04c0      	lsls	r0, r0, #19
    1c22:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1c24:	4b14      	ldr	r3, [pc, #80]	; (1c78 <system_gclk_gen_get_hz+0x7c>)
    1c26:	4798      	blx	r3
    1c28:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1c2a:	4b12      	ldr	r3, [pc, #72]	; (1c74 <system_gclk_gen_get_hz+0x78>)
    1c2c:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1c2e:	6876      	ldr	r6, [r6, #4]
    1c30:	02f6      	lsls	r6, r6, #11
    1c32:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1c34:	4b11      	ldr	r3, [pc, #68]	; (1c7c <system_gclk_gen_get_hz+0x80>)
    1c36:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1c38:	4a0c      	ldr	r2, [pc, #48]	; (1c6c <system_gclk_gen_get_hz+0x70>)
    1c3a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1c3c:	b25b      	sxtb	r3, r3
    1c3e:	2b00      	cmp	r3, #0
    1c40:	dbfb      	blt.n	1c3a <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1c42:	4b0a      	ldr	r3, [pc, #40]	; (1c6c <system_gclk_gen_get_hz+0x70>)
    1c44:	689c      	ldr	r4, [r3, #8]
    1c46:	0224      	lsls	r4, r4, #8
    1c48:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    1c4a:	4b0d      	ldr	r3, [pc, #52]	; (1c80 <system_gclk_gen_get_hz+0x84>)
    1c4c:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1c4e:	2e00      	cmp	r6, #0
    1c50:	d107      	bne.n	1c62 <system_gclk_gen_get_hz+0x66>
    1c52:	2c01      	cmp	r4, #1
    1c54:	d907      	bls.n	1c66 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    1c56:	0021      	movs	r1, r4
    1c58:	0028      	movs	r0, r5
    1c5a:	4b0a      	ldr	r3, [pc, #40]	; (1c84 <system_gclk_gen_get_hz+0x88>)
    1c5c:	4798      	blx	r3
    1c5e:	0005      	movs	r5, r0
    1c60:	e001      	b.n	1c66 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1c62:	3401      	adds	r4, #1
    1c64:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    1c66:	0028      	movs	r0, r5
    1c68:	bd70      	pop	{r4, r5, r6, pc}
    1c6a:	46c0      	nop			; (mov r8, r8)
    1c6c:	40000c00 	.word	0x40000c00
    1c70:	000006a9 	.word	0x000006a9
    1c74:	40000c04 	.word	0x40000c04
    1c78:	000016d1 	.word	0x000016d1
    1c7c:	40000c08 	.word	0x40000c08
    1c80:	000006e9 	.word	0x000006e9
    1c84:	00003499 	.word	0x00003499

00001c88 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1c88:	b510      	push	{r4, lr}
    1c8a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1c8c:	4b06      	ldr	r3, [pc, #24]	; (1ca8 <system_gclk_chan_enable+0x20>)
    1c8e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1c90:	4b06      	ldr	r3, [pc, #24]	; (1cac <system_gclk_chan_enable+0x24>)
    1c92:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1c94:	4a06      	ldr	r2, [pc, #24]	; (1cb0 <system_gclk_chan_enable+0x28>)
    1c96:	8853      	ldrh	r3, [r2, #2]
    1c98:	2180      	movs	r1, #128	; 0x80
    1c9a:	01c9      	lsls	r1, r1, #7
    1c9c:	430b      	orrs	r3, r1
    1c9e:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1ca0:	4b04      	ldr	r3, [pc, #16]	; (1cb4 <system_gclk_chan_enable+0x2c>)
    1ca2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1ca4:	bd10      	pop	{r4, pc}
    1ca6:	46c0      	nop			; (mov r8, r8)
    1ca8:	000006a9 	.word	0x000006a9
    1cac:	40000c02 	.word	0x40000c02
    1cb0:	40000c00 	.word	0x40000c00
    1cb4:	000006e9 	.word	0x000006e9

00001cb8 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1cb8:	b510      	push	{r4, lr}
    1cba:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1cbc:	4b0f      	ldr	r3, [pc, #60]	; (1cfc <system_gclk_chan_disable+0x44>)
    1cbe:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1cc0:	4b0f      	ldr	r3, [pc, #60]	; (1d00 <system_gclk_chan_disable+0x48>)
    1cc2:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1cc4:	4a0f      	ldr	r2, [pc, #60]	; (1d04 <system_gclk_chan_disable+0x4c>)
    1cc6:	8853      	ldrh	r3, [r2, #2]
    1cc8:	051b      	lsls	r3, r3, #20
    1cca:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1ccc:	8853      	ldrh	r3, [r2, #2]
    1cce:	490e      	ldr	r1, [pc, #56]	; (1d08 <system_gclk_chan_disable+0x50>)
    1cd0:	400b      	ands	r3, r1
    1cd2:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1cd4:	8853      	ldrh	r3, [r2, #2]
    1cd6:	490d      	ldr	r1, [pc, #52]	; (1d0c <system_gclk_chan_disable+0x54>)
    1cd8:	400b      	ands	r3, r1
    1cda:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1cdc:	0011      	movs	r1, r2
    1cde:	2280      	movs	r2, #128	; 0x80
    1ce0:	01d2      	lsls	r2, r2, #7
    1ce2:	884b      	ldrh	r3, [r1, #2]
    1ce4:	4213      	tst	r3, r2
    1ce6:	d1fc      	bne.n	1ce2 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1ce8:	4906      	ldr	r1, [pc, #24]	; (1d04 <system_gclk_chan_disable+0x4c>)
    1cea:	884a      	ldrh	r2, [r1, #2]
    1cec:	0203      	lsls	r3, r0, #8
    1cee:	4806      	ldr	r0, [pc, #24]	; (1d08 <system_gclk_chan_disable+0x50>)
    1cf0:	4002      	ands	r2, r0
    1cf2:	4313      	orrs	r3, r2
    1cf4:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    1cf6:	4b06      	ldr	r3, [pc, #24]	; (1d10 <system_gclk_chan_disable+0x58>)
    1cf8:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1cfa:	bd10      	pop	{r4, pc}
    1cfc:	000006a9 	.word	0x000006a9
    1d00:	40000c02 	.word	0x40000c02
    1d04:	40000c00 	.word	0x40000c00
    1d08:	fffff0ff 	.word	0xfffff0ff
    1d0c:	ffffbfff 	.word	0xffffbfff
    1d10:	000006e9 	.word	0x000006e9

00001d14 <system_gclk_chan_set_config>:
{
    1d14:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1d16:	780c      	ldrb	r4, [r1, #0]
    1d18:	0224      	lsls	r4, r4, #8
    1d1a:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    1d1c:	4b02      	ldr	r3, [pc, #8]	; (1d28 <system_gclk_chan_set_config+0x14>)
    1d1e:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1d20:	b2a4      	uxth	r4, r4
    1d22:	4b02      	ldr	r3, [pc, #8]	; (1d2c <system_gclk_chan_set_config+0x18>)
    1d24:	805c      	strh	r4, [r3, #2]
}
    1d26:	bd10      	pop	{r4, pc}
    1d28:	00001cb9 	.word	0x00001cb9
    1d2c:	40000c00 	.word	0x40000c00

00001d30 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1d30:	b510      	push	{r4, lr}
    1d32:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1d34:	4b06      	ldr	r3, [pc, #24]	; (1d50 <system_gclk_chan_get_hz+0x20>)
    1d36:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1d38:	4b06      	ldr	r3, [pc, #24]	; (1d54 <system_gclk_chan_get_hz+0x24>)
    1d3a:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1d3c:	4b06      	ldr	r3, [pc, #24]	; (1d58 <system_gclk_chan_get_hz+0x28>)
    1d3e:	885c      	ldrh	r4, [r3, #2]
    1d40:	0524      	lsls	r4, r4, #20
    1d42:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    1d44:	4b05      	ldr	r3, [pc, #20]	; (1d5c <system_gclk_chan_get_hz+0x2c>)
    1d46:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1d48:	0020      	movs	r0, r4
    1d4a:	4b05      	ldr	r3, [pc, #20]	; (1d60 <system_gclk_chan_get_hz+0x30>)
    1d4c:	4798      	blx	r3
}
    1d4e:	bd10      	pop	{r4, pc}
    1d50:	000006a9 	.word	0x000006a9
    1d54:	40000c02 	.word	0x40000c02
    1d58:	40000c00 	.word	0x40000c00
    1d5c:	000006e9 	.word	0x000006e9
    1d60:	00001bfd 	.word	0x00001bfd

00001d64 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1d64:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1d66:	78d3      	ldrb	r3, [r2, #3]
    1d68:	2b00      	cmp	r3, #0
    1d6a:	d135      	bne.n	1dd8 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1d6c:	7813      	ldrb	r3, [r2, #0]
    1d6e:	2b80      	cmp	r3, #128	; 0x80
    1d70:	d029      	beq.n	1dc6 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1d72:	061b      	lsls	r3, r3, #24
    1d74:	2480      	movs	r4, #128	; 0x80
    1d76:	0264      	lsls	r4, r4, #9
    1d78:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1d7a:	7854      	ldrb	r4, [r2, #1]
    1d7c:	2502      	movs	r5, #2
    1d7e:	43ac      	bics	r4, r5
    1d80:	d106      	bne.n	1d90 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1d82:	7894      	ldrb	r4, [r2, #2]
    1d84:	2c00      	cmp	r4, #0
    1d86:	d120      	bne.n	1dca <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    1d88:	2480      	movs	r4, #128	; 0x80
    1d8a:	02a4      	lsls	r4, r4, #10
    1d8c:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1d8e:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1d90:	7854      	ldrb	r4, [r2, #1]
    1d92:	3c01      	subs	r4, #1
    1d94:	2c01      	cmp	r4, #1
    1d96:	d91c      	bls.n	1dd2 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1d98:	040d      	lsls	r5, r1, #16
    1d9a:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1d9c:	24a0      	movs	r4, #160	; 0xa0
    1d9e:	05e4      	lsls	r4, r4, #23
    1da0:	432c      	orrs	r4, r5
    1da2:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1da4:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1da6:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1da8:	24d0      	movs	r4, #208	; 0xd0
    1daa:	0624      	lsls	r4, r4, #24
    1dac:	432c      	orrs	r4, r5
    1dae:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1db0:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1db2:	78d4      	ldrb	r4, [r2, #3]
    1db4:	2c00      	cmp	r4, #0
    1db6:	d122      	bne.n	1dfe <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1db8:	035b      	lsls	r3, r3, #13
    1dba:	d51c      	bpl.n	1df6 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1dbc:	7893      	ldrb	r3, [r2, #2]
    1dbe:	2b01      	cmp	r3, #1
    1dc0:	d01e      	beq.n	1e00 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    1dc2:	6141      	str	r1, [r0, #20]
    1dc4:	e017      	b.n	1df6 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    1dc6:	2300      	movs	r3, #0
    1dc8:	e7d7      	b.n	1d7a <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1dca:	24c0      	movs	r4, #192	; 0xc0
    1dcc:	02e4      	lsls	r4, r4, #11
    1dce:	4323      	orrs	r3, r4
    1dd0:	e7dd      	b.n	1d8e <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1dd2:	4c0d      	ldr	r4, [pc, #52]	; (1e08 <_system_pinmux_config+0xa4>)
    1dd4:	4023      	ands	r3, r4
    1dd6:	e7df      	b.n	1d98 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    1dd8:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1dda:	040c      	lsls	r4, r1, #16
    1ddc:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1dde:	23a0      	movs	r3, #160	; 0xa0
    1de0:	05db      	lsls	r3, r3, #23
    1de2:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1de4:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1de6:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1de8:	23d0      	movs	r3, #208	; 0xd0
    1dea:	061b      	lsls	r3, r3, #24
    1dec:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1dee:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    1df0:	78d3      	ldrb	r3, [r2, #3]
    1df2:	2b00      	cmp	r3, #0
    1df4:	d103      	bne.n	1dfe <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1df6:	7853      	ldrb	r3, [r2, #1]
    1df8:	3b01      	subs	r3, #1
    1dfa:	2b01      	cmp	r3, #1
    1dfc:	d902      	bls.n	1e04 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    1dfe:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    1e00:	6181      	str	r1, [r0, #24]
    1e02:	e7f8      	b.n	1df6 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    1e04:	6081      	str	r1, [r0, #8]
}
    1e06:	e7fa      	b.n	1dfe <_system_pinmux_config+0x9a>
    1e08:	fffbffff 	.word	0xfffbffff

00001e0c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1e0c:	b510      	push	{r4, lr}
    1e0e:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1e10:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1e12:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1e14:	2900      	cmp	r1, #0
    1e16:	d104      	bne.n	1e22 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1e18:	0943      	lsrs	r3, r0, #5
    1e1a:	01db      	lsls	r3, r3, #7
    1e1c:	4905      	ldr	r1, [pc, #20]	; (1e34 <system_pinmux_pin_set_config+0x28>)
    1e1e:	468c      	mov	ip, r1
    1e20:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1e22:	241f      	movs	r4, #31
    1e24:	4020      	ands	r0, r4
    1e26:	2101      	movs	r1, #1
    1e28:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    1e2a:	0018      	movs	r0, r3
    1e2c:	4b02      	ldr	r3, [pc, #8]	; (1e38 <system_pinmux_pin_set_config+0x2c>)
    1e2e:	4798      	blx	r3
}
    1e30:	bd10      	pop	{r4, pc}
    1e32:	46c0      	nop			; (mov r8, r8)
    1e34:	41004400 	.word	0x41004400
    1e38:	00001d65 	.word	0x00001d65

00001e3c <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1e3c:	4770      	bx	lr
	...

00001e40 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1e40:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1e42:	4b05      	ldr	r3, [pc, #20]	; (1e58 <system_init+0x18>)
    1e44:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1e46:	4b05      	ldr	r3, [pc, #20]	; (1e5c <system_init+0x1c>)
    1e48:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1e4a:	4b05      	ldr	r3, [pc, #20]	; (1e60 <system_init+0x20>)
    1e4c:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1e4e:	4b05      	ldr	r3, [pc, #20]	; (1e64 <system_init+0x24>)
    1e50:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1e52:	4b05      	ldr	r3, [pc, #20]	; (1e68 <system_init+0x28>)
    1e54:	4798      	blx	r3
}
    1e56:	bd10      	pop	{r4, pc}
    1e58:	00001981 	.word	0x00001981
    1e5c:	00000719 	.word	0x00000719
    1e60:	00001e3d 	.word	0x00001e3d
    1e64:	00001e3d 	.word	0x00001e3d
    1e68:	00001e3d 	.word	0x00001e3d

00001e6c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1e6c:	e7fe      	b.n	1e6c <Dummy_Handler>
	...

00001e70 <Reset_Handler>:
{
    1e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    1e72:	4a2a      	ldr	r2, [pc, #168]	; (1f1c <Reset_Handler+0xac>)
    1e74:	4b2a      	ldr	r3, [pc, #168]	; (1f20 <Reset_Handler+0xb0>)
    1e76:	429a      	cmp	r2, r3
    1e78:	d011      	beq.n	1e9e <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    1e7a:	001a      	movs	r2, r3
    1e7c:	4b29      	ldr	r3, [pc, #164]	; (1f24 <Reset_Handler+0xb4>)
    1e7e:	429a      	cmp	r2, r3
    1e80:	d20d      	bcs.n	1e9e <Reset_Handler+0x2e>
    1e82:	4a29      	ldr	r2, [pc, #164]	; (1f28 <Reset_Handler+0xb8>)
    1e84:	3303      	adds	r3, #3
    1e86:	1a9b      	subs	r3, r3, r2
    1e88:	089b      	lsrs	r3, r3, #2
    1e8a:	3301      	adds	r3, #1
    1e8c:	009b      	lsls	r3, r3, #2
    1e8e:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1e90:	4823      	ldr	r0, [pc, #140]	; (1f20 <Reset_Handler+0xb0>)
    1e92:	4922      	ldr	r1, [pc, #136]	; (1f1c <Reset_Handler+0xac>)
    1e94:	588c      	ldr	r4, [r1, r2]
    1e96:	5084      	str	r4, [r0, r2]
    1e98:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    1e9a:	429a      	cmp	r2, r3
    1e9c:	d1fa      	bne.n	1e94 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    1e9e:	4a23      	ldr	r2, [pc, #140]	; (1f2c <Reset_Handler+0xbc>)
    1ea0:	4b23      	ldr	r3, [pc, #140]	; (1f30 <Reset_Handler+0xc0>)
    1ea2:	429a      	cmp	r2, r3
    1ea4:	d20a      	bcs.n	1ebc <Reset_Handler+0x4c>
    1ea6:	43d3      	mvns	r3, r2
    1ea8:	4921      	ldr	r1, [pc, #132]	; (1f30 <Reset_Handler+0xc0>)
    1eaa:	185b      	adds	r3, r3, r1
    1eac:	2103      	movs	r1, #3
    1eae:	438b      	bics	r3, r1
    1eb0:	3304      	adds	r3, #4
    1eb2:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    1eb4:	2100      	movs	r1, #0
    1eb6:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    1eb8:	4293      	cmp	r3, r2
    1eba:	d1fc      	bne.n	1eb6 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1ebc:	4a1d      	ldr	r2, [pc, #116]	; (1f34 <Reset_Handler+0xc4>)
    1ebe:	21ff      	movs	r1, #255	; 0xff
    1ec0:	4b1d      	ldr	r3, [pc, #116]	; (1f38 <Reset_Handler+0xc8>)
    1ec2:	438b      	bics	r3, r1
    1ec4:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1ec6:	39fd      	subs	r1, #253	; 0xfd
    1ec8:	2390      	movs	r3, #144	; 0x90
    1eca:	005b      	lsls	r3, r3, #1
    1ecc:	4a1b      	ldr	r2, [pc, #108]	; (1f3c <Reset_Handler+0xcc>)
    1ece:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1ed0:	4a1b      	ldr	r2, [pc, #108]	; (1f40 <Reset_Handler+0xd0>)
    1ed2:	78d3      	ldrb	r3, [r2, #3]
    1ed4:	2503      	movs	r5, #3
    1ed6:	43ab      	bics	r3, r5
    1ed8:	2402      	movs	r4, #2
    1eda:	4323      	orrs	r3, r4
    1edc:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1ede:	78d3      	ldrb	r3, [r2, #3]
    1ee0:	270c      	movs	r7, #12
    1ee2:	43bb      	bics	r3, r7
    1ee4:	2608      	movs	r6, #8
    1ee6:	4333      	orrs	r3, r6
    1ee8:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    1eea:	4b16      	ldr	r3, [pc, #88]	; (1f44 <Reset_Handler+0xd4>)
    1eec:	7b98      	ldrb	r0, [r3, #14]
    1eee:	2230      	movs	r2, #48	; 0x30
    1ef0:	4390      	bics	r0, r2
    1ef2:	2220      	movs	r2, #32
    1ef4:	4310      	orrs	r0, r2
    1ef6:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1ef8:	7b99      	ldrb	r1, [r3, #14]
    1efa:	43b9      	bics	r1, r7
    1efc:	4331      	orrs	r1, r6
    1efe:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1f00:	7b9a      	ldrb	r2, [r3, #14]
    1f02:	43aa      	bics	r2, r5
    1f04:	4322      	orrs	r2, r4
    1f06:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    1f08:	4a0f      	ldr	r2, [pc, #60]	; (1f48 <Reset_Handler+0xd8>)
    1f0a:	6853      	ldr	r3, [r2, #4]
    1f0c:	2180      	movs	r1, #128	; 0x80
    1f0e:	430b      	orrs	r3, r1
    1f10:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    1f12:	4b0e      	ldr	r3, [pc, #56]	; (1f4c <Reset_Handler+0xdc>)
    1f14:	4798      	blx	r3
        main();
    1f16:	4b0e      	ldr	r3, [pc, #56]	; (1f50 <Reset_Handler+0xe0>)
    1f18:	4798      	blx	r3
    1f1a:	e7fe      	b.n	1f1a <Reset_Handler+0xaa>
    1f1c:	00006be8 	.word	0x00006be8
    1f20:	20000000 	.word	0x20000000
    1f24:	200001bc 	.word	0x200001bc
    1f28:	20000004 	.word	0x20000004
    1f2c:	200001bc 	.word	0x200001bc
    1f30:	20000ac0 	.word	0x20000ac0
    1f34:	e000ed00 	.word	0xe000ed00
    1f38:	00000000 	.word	0x00000000
    1f3c:	41007000 	.word	0x41007000
    1f40:	41005000 	.word	0x41005000
    1f44:	41004800 	.word	0x41004800
    1f48:	41004000 	.word	0x41004000
    1f4c:	000037d9 	.word	0x000037d9
    1f50:	000033dd 	.word	0x000033dd

00001f54 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    1f54:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f56:	46c6      	mov	lr, r8
    1f58:	b500      	push	{lr}
    1f5a:	000c      	movs	r4, r1
    1f5c:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    1f5e:	2800      	cmp	r0, #0
    1f60:	d10f      	bne.n	1f82 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    1f62:	2a00      	cmp	r2, #0
    1f64:	dd11      	ble.n	1f8a <_read+0x36>
    1f66:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    1f68:	4e09      	ldr	r6, [pc, #36]	; (1f90 <_read+0x3c>)
    1f6a:	4d0a      	ldr	r5, [pc, #40]	; (1f94 <_read+0x40>)
    1f6c:	6830      	ldr	r0, [r6, #0]
    1f6e:	0021      	movs	r1, r4
    1f70:	682b      	ldr	r3, [r5, #0]
    1f72:	4798      	blx	r3
		ptr++;
    1f74:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    1f76:	42bc      	cmp	r4, r7
    1f78:	d1f8      	bne.n	1f6c <_read+0x18>
		nChars++;
	}
	return nChars;
}
    1f7a:	4640      	mov	r0, r8
    1f7c:	bc04      	pop	{r2}
    1f7e:	4690      	mov	r8, r2
    1f80:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    1f82:	2301      	movs	r3, #1
    1f84:	425b      	negs	r3, r3
    1f86:	4698      	mov	r8, r3
    1f88:	e7f7      	b.n	1f7a <_read+0x26>
	for (; len > 0; --len) {
    1f8a:	4680      	mov	r8, r0
    1f8c:	e7f5      	b.n	1f7a <_read+0x26>
    1f8e:	46c0      	nop			; (mov r8, r8)
    1f90:	200002d4 	.word	0x200002d4
    1f94:	200002cc 	.word	0x200002cc

00001f98 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    1f98:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f9a:	46c6      	mov	lr, r8
    1f9c:	b500      	push	{lr}
    1f9e:	000e      	movs	r6, r1
    1fa0:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    1fa2:	3801      	subs	r0, #1
    1fa4:	2802      	cmp	r0, #2
    1fa6:	d810      	bhi.n	1fca <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    1fa8:	2a00      	cmp	r2, #0
    1faa:	d011      	beq.n	1fd0 <_write+0x38>
    1fac:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    1fae:	4b0c      	ldr	r3, [pc, #48]	; (1fe0 <_write+0x48>)
    1fb0:	4698      	mov	r8, r3
    1fb2:	4f0c      	ldr	r7, [pc, #48]	; (1fe4 <_write+0x4c>)
    1fb4:	4643      	mov	r3, r8
    1fb6:	6818      	ldr	r0, [r3, #0]
    1fb8:	5d31      	ldrb	r1, [r6, r4]
    1fba:	683b      	ldr	r3, [r7, #0]
    1fbc:	4798      	blx	r3
    1fbe:	2800      	cmp	r0, #0
    1fc0:	db08      	blt.n	1fd4 <_write+0x3c>
			return -1;
		}
		++nChars;
    1fc2:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    1fc4:	42a5      	cmp	r5, r4
    1fc6:	d1f5      	bne.n	1fb4 <_write+0x1c>
    1fc8:	e006      	b.n	1fd8 <_write+0x40>
		return -1;
    1fca:	2401      	movs	r4, #1
    1fcc:	4264      	negs	r4, r4
    1fce:	e003      	b.n	1fd8 <_write+0x40>
	for (; len != 0; --len) {
    1fd0:	0014      	movs	r4, r2
    1fd2:	e001      	b.n	1fd8 <_write+0x40>
			return -1;
    1fd4:	2401      	movs	r4, #1
    1fd6:	4264      	negs	r4, r4
	}
	return nChars;
}
    1fd8:	0020      	movs	r0, r4
    1fda:	bc04      	pop	{r2}
    1fdc:	4690      	mov	r8, r2
    1fde:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1fe0:	200002d4 	.word	0x200002d4
    1fe4:	200002d0 	.word	0x200002d0

00001fe8 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    1fe8:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    1fea:	4a06      	ldr	r2, [pc, #24]	; (2004 <STACK_SIZE+0x4>)
    1fec:	6812      	ldr	r2, [r2, #0]
    1fee:	2a00      	cmp	r2, #0
    1ff0:	d004      	beq.n	1ffc <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    1ff2:	4a04      	ldr	r2, [pc, #16]	; (2004 <STACK_SIZE+0x4>)
    1ff4:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    1ff6:	18c3      	adds	r3, r0, r3
    1ff8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    1ffa:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    1ffc:	4902      	ldr	r1, [pc, #8]	; (2008 <STACK_SIZE+0x8>)
    1ffe:	4a01      	ldr	r2, [pc, #4]	; (2004 <STACK_SIZE+0x4>)
    2000:	6011      	str	r1, [r2, #0]
    2002:	e7f6      	b.n	1ff2 <_sbrk+0xa>
    2004:	20000294 	.word	0x20000294
    2008:	20002ac0 	.word	0x20002ac0

0000200c <_close>:
}

extern int _close(int file)
{
	return -1;
}
    200c:	2001      	movs	r0, #1
    200e:	4240      	negs	r0, r0
    2010:	4770      	bx	lr

00002012 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    2012:	2380      	movs	r3, #128	; 0x80
    2014:	019b      	lsls	r3, r3, #6
    2016:	604b      	str	r3, [r1, #4]

	return 0;
}
    2018:	2000      	movs	r0, #0
    201a:	4770      	bx	lr

0000201c <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    201c:	2001      	movs	r0, #1
    201e:	4770      	bx	lr

00002020 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    2020:	2000      	movs	r0, #0
    2022:	4770      	bx	lr

00002024 <drawChar>:
uint16_t xCharPos = 0;
uint16_t yCharPos = 0;


void drawChar(uint8_t character)
{
    2024:	b5f0      	push	{r4, r5, r6, r7, lr}
    2026:	46d6      	mov	lr, sl
    2028:	464f      	mov	r7, r9
    202a:	4646      	mov	r6, r8
    202c:	b5c0      	push	{r6, r7, lr}
    202e:	0004      	movs	r4, r0
	uint16_t x = xCharPos;
    2030:	4b2a      	ldr	r3, [pc, #168]	; (20dc <drawChar+0xb8>)
    2032:	881b      	ldrh	r3, [r3, #0]
	uint16_t y = yCharPos;
    2034:	4a2a      	ldr	r2, [pc, #168]	; (20e0 <drawChar+0xbc>)
    2036:	8815      	ldrh	r5, [r2, #0]
	
	consoleDisplay[xCharPos][yCharPos] = character;
    2038:	005a      	lsls	r2, r3, #1
    203a:	18d2      	adds	r2, r2, r3
    203c:	00d2      	lsls	r2, r2, #3
    203e:	4829      	ldr	r0, [pc, #164]	; (20e4 <drawChar+0xc0>)
    2040:	1882      	adds	r2, r0, r2
    2042:	5554      	strb	r4, [r2, r5]
	
	REG_PORT_OUTCLR1 = LCD_CS;
    2044:	2180      	movs	r1, #128	; 0x80
    2046:	03c9      	lsls	r1, r1, #15
    2048:	4a27      	ldr	r2, [pc, #156]	; (20e8 <drawChar+0xc4>)
    204a:	6011      	str	r1, [r2, #0]
	setXY(x*10,y*20,x*10+9,y*20+19);
    204c:	0098      	lsls	r0, r3, #2
    204e:	181b      	adds	r3, r3, r0
    2050:	005b      	lsls	r3, r3, #1
    2052:	b298      	uxth	r0, r3
    2054:	2114      	movs	r1, #20
    2056:	4369      	muls	r1, r5
    2058:	b289      	uxth	r1, r1
    205a:	000b      	movs	r3, r1
    205c:	3313      	adds	r3, #19
    205e:	b29b      	uxth	r3, r3
    2060:	0002      	movs	r2, r0
    2062:	3209      	adds	r2, #9
    2064:	b292      	uxth	r2, r2
    2066:	4d21      	ldr	r5, [pc, #132]	; (20ec <drawChar+0xc8>)
    2068:	47a8      	blx	r5
    206a:	4a21      	ldr	r2, [pc, #132]	; (20f0 <drawChar+0xcc>)
    206c:	00a5      	lsls	r5, r4, #2
    206e:	192d      	adds	r5, r5, r4
    2070:	00ab      	lsls	r3, r5, #2
    2072:	18ed      	adds	r5, r5, r3
    2074:	1955      	adds	r5, r2, r5
    2076:	3401      	adds	r4, #1
    2078:	00a3      	lsls	r3, r4, #2
    207a:	191c      	adds	r4, r3, r4
    207c:	00a3      	lsls	r3, r4, #2
    207e:	18e4      	adds	r4, r4, r3
    2080:	4692      	mov	sl, r2
    2082:	44a2      	add	sl, r4
			{
				setPixel((fore_Color_High<<8)|fore_Color_Low);	
			}
			else
			{
				setPixel((back_Color_High<<8)|back_Color_Low);
    2084:	4b1b      	ldr	r3, [pc, #108]	; (20f4 <drawChar+0xd0>)
    2086:	4699      	mov	r9, r3
    2088:	4b1b      	ldr	r3, [pc, #108]	; (20f8 <drawChar+0xd4>)
    208a:	4698      	mov	r8, r3
    208c:	4f1b      	ldr	r7, [pc, #108]	; (20fc <drawChar+0xd8>)
				setPixel((fore_Color_High<<8)|fore_Color_Low);	
    208e:	4e1c      	ldr	r6, [pc, #112]	; (2100 <drawChar+0xdc>)
    2090:	e019      	b.n	20c6 <drawChar+0xa2>
				setPixel((back_Color_High<<8)|back_Color_Low);
    2092:	464b      	mov	r3, r9
    2094:	8818      	ldrh	r0, [r3, #0]
    2096:	0200      	lsls	r0, r0, #8
    2098:	4643      	mov	r3, r8
    209a:	881b      	ldrh	r3, [r3, #0]
    209c:	4318      	orrs	r0, r3
    209e:	b280      	uxth	r0, r0
    20a0:	47b8      	blx	r7
		for(int j=0;j<8;j++)
    20a2:	3c01      	subs	r4, #1
    20a4:	d30c      	bcc.n	20c0 <drawChar+0x9c>
			if((CodePage437[character][i]&(1<<(7-j)))!=0)
    20a6:	782b      	ldrb	r3, [r5, #0]
    20a8:	4123      	asrs	r3, r4
    20aa:	07db      	lsls	r3, r3, #31
    20ac:	d5f1      	bpl.n	2092 <drawChar+0x6e>
				setPixel((fore_Color_High<<8)|fore_Color_Low);	
    20ae:	8830      	ldrh	r0, [r6, #0]
    20b0:	0200      	lsls	r0, r0, #8
    20b2:	4b14      	ldr	r3, [pc, #80]	; (2104 <drawChar+0xe0>)
    20b4:	881b      	ldrh	r3, [r3, #0]
    20b6:	4318      	orrs	r0, r3
    20b8:	b280      	uxth	r0, r0
    20ba:	4b10      	ldr	r3, [pc, #64]	; (20fc <drawChar+0xd8>)
    20bc:	4798      	blx	r3
    20be:	e7f0      	b.n	20a2 <drawChar+0x7e>
    20c0:	3501      	adds	r5, #1
	for(uint16_t i=0; i <= 24; i++)
    20c2:	4555      	cmp	r5, sl
    20c4:	d001      	beq.n	20ca <drawChar+0xa6>
{
    20c6:	2407      	movs	r4, #7
    20c8:	e7ed      	b.n	20a6 <drawChar+0x82>
			}

		}
	}
	REG_PORT_OUTSET1 = LCD_CS;
    20ca:	2280      	movs	r2, #128	; 0x80
    20cc:	03d2      	lsls	r2, r2, #15
    20ce:	4b0e      	ldr	r3, [pc, #56]	; (2108 <drawChar+0xe4>)
    20d0:	601a      	str	r2, [r3, #0]
	
	//printf(consoleDisplay[xCharPos][yCharPos]);

}
    20d2:	bc1c      	pop	{r2, r3, r4}
    20d4:	4690      	mov	r8, r2
    20d6:	4699      	mov	r9, r3
    20d8:	46a2      	mov	sl, r4
    20da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    20dc:	20000298 	.word	0x20000298
    20e0:	2000029a 	.word	0x2000029a
    20e4:	20000310 	.word	0x20000310
    20e8:	41004494 	.word	0x41004494
    20ec:	00002ba1 	.word	0x00002ba1
    20f0:	00004ff4 	.word	0x00004ff4
    20f4:	20000a96 	.word	0x20000a96
    20f8:	20000a90 	.word	0x20000a90
    20fc:	00002d61 	.word	0x00002d61
    2100:	20000a92 	.word	0x20000a92
    2104:	20000a94 	.word	0x20000a94
    2108:	41004498 	.word	0x41004498

0000210c <newLine>:

void newLine(void)
{
    210c:	b5f0      	push	{r4, r5, r6, r7, lr}
    210e:	46de      	mov	lr, fp
    2110:	4657      	mov	r7, sl
    2112:	464e      	mov	r6, r9
    2114:	4645      	mov	r5, r8
    2116:	b5e0      	push	{r5, r6, r7, lr}
    2118:	4c56      	ldr	r4, [pc, #344]	; (2274 <newLine+0x168>)
    211a:	44a5      	add	sp, r4
    211c:	4856      	ldr	r0, [pc, #344]	; (2278 <newLine+0x16c>)
    211e:	23f0      	movs	r3, #240	; 0xf0
    2120:	00db      	lsls	r3, r3, #3
    2122:	18c4      	adds	r4, r0, r3
    2124:	e002      	b.n	212c <newLine+0x20>
    2126:	3018      	adds	r0, #24
	/*
	This is split into two parts; the first moves consoledisplay around
	so the first line is deleted and all other lines are moved up one line
	*/
	
	for(int i = 0 ; i < 80 ; i++)
    2128:	42a0      	cmp	r0, r4
    212a:	d008      	beq.n	213e <newLine+0x32>
    212c:	0001      	movs	r1, r0
    212e:	3117      	adds	r1, #23
{
    2130:	0003      	movs	r3, r0
	{
		for(int j = 1 ; j < 24 ; j++)
		{
			consoleDisplay[i][j-1] = consoleDisplay[i][j];
    2132:	785a      	ldrb	r2, [r3, #1]
    2134:	701a      	strb	r2, [r3, #0]
    2136:	3301      	adds	r3, #1
		for(int j = 1 ; j < 24 ; j++)
    2138:	428b      	cmp	r3, r1
    213a:	d1fa      	bne.n	2132 <newLine+0x26>
    213c:	e7f3      	b.n	2126 <newLine+0x1a>
    213e:	4b4f      	ldr	r3, [pc, #316]	; (227c <newLine+0x170>)
    2140:	22f0      	movs	r2, #240	; 0xf0
    2142:	00d2      	lsls	r2, r2, #3
    2144:	1899      	adds	r1, r3, r2
		}
	}
	
	for(int k = 0 ; k < 80 ; k ++)
	{
		consoleDisplay[k][23] = 0x00;
    2146:	2200      	movs	r2, #0
    2148:	701a      	strb	r2, [r3, #0]
    214a:	3318      	adds	r3, #24
	for(int k = 0 ; k < 80 ; k ++)
    214c:	428b      	cmp	r3, r1
    214e:	d1fb      	bne.n	2148 <newLine+0x3c>
    2150:	2300      	movs	r3, #0
    2152:	9300      	str	r3, [sp, #0]
			
	for(uint16_t row = 0 ; row < 460 ; row++)
	{
		//Per page 40 of datasheet (5.1.2.7, 16-bit
		//parallel interface for data ram read.
		REG_PORT_OUTCLR1 = LCD_CS;
    2154:	4b4a      	ldr	r3, [pc, #296]	; (2280 <newLine+0x174>)
    2156:	4698      	mov	r8, r3
		setXY(0, row+20, 799, row+20);
		//Send'Memory read' command 0x2E00, no data bit
		LCD_Write_COM16(0x2E,0x00);
		REG_PORT_OUTSET1 = LCD_DC;
    2158:	4f4a      	ldr	r7, [pc, #296]	; (2284 <newLine+0x178>)
		
		
		//Read pixel data into the display	
		for(uint16_t getpixel = 0 ; getpixel < 800 ; getpixel++)
		{
			REG_PORT_OUTCLR1 = LCD_RD;
    215a:	2680      	movs	r6, #128	; 0x80
    215c:	0276      	lsls	r6, r6, #9
    215e:	e046      	b.n	21ee <newLine+0xe2>
			//This can be expanded with else if for the MSBs
			//of all the colors; see datasheet page 40.
			if((PORT->Group[1].IN.reg & PORT_PB07) != 0)
				rowPixel[getpixel] = 0xFF;
			else
				rowPixel[getpixel] = 0x00;
    2160:	4653      	mov	r3, sl
    2162:	7023      	strb	r3, [r4, #0]
			//dummy read, because pixel data broken up
			//per datasheet page 40. Everything after
			//the dummy write is BLUE pixels. Do we ever
			//need blue? IDK.
			
			REG_PORT_OUTCLR1 = LCD_RD;
    2164:	4643      	mov	r3, r8
    2166:	601e      	str	r6, [r3, #0]
			REG_PORT_OUTSET1 = LCD_RD;
    2168:	603e      	str	r6, [r7, #0]
    216a:	3401      	adds	r4, #1
		for(uint16_t getpixel = 0 ; getpixel < 800 ; getpixel++)
    216c:	4564      	cmp	r4, ip
    216e:	d008      	beq.n	2182 <newLine+0x76>
			REG_PORT_OUTCLR1 = LCD_RD;
    2170:	4643      	mov	r3, r8
    2172:	601e      	str	r6, [r3, #0]
			REG_PORT_OUTSET1 = LCD_RD;
    2174:	603e      	str	r6, [r7, #0]
			if((PORT->Group[1].IN.reg & PORT_PB07) != 0)
    2176:	5843      	ldr	r3, [r0, r1]
    2178:	421a      	tst	r2, r3
    217a:	d0f1      	beq.n	2160 <newLine+0x54>
				rowPixel[getpixel] = 0xFF;
    217c:	464b      	mov	r3, r9
    217e:	7023      	strb	r3, [r4, #0]
    2180:	e7f0      	b.n	2164 <newLine+0x58>
    2182:	9401      	str	r4, [sp, #4]
		}
		
		REG_PORT_OUTSET1 = LCD_DC;
    2184:	2380      	movs	r3, #128	; 0x80
    2186:	041b      	lsls	r3, r3, #16
    2188:	603b      	str	r3, [r7, #0]
		REG_PORT_DIRSET1 = 0x0000FFFF;
    218a:	4a3f      	ldr	r2, [pc, #252]	; (2288 <newLine+0x17c>)
    218c:	4b3f      	ldr	r3, [pc, #252]	; (228c <newLine+0x180>)
    218e:	601a      	str	r2, [r3, #0]
		
		//now, read out that line of the display
		setXY(0, row, 799, row);	
    2190:	9900      	ldr	r1, [sp, #0]
    2192:	000b      	movs	r3, r1
    2194:	4a3e      	ldr	r2, [pc, #248]	; (2290 <newLine+0x184>)
    2196:	2000      	movs	r0, #0
    2198:	4c3e      	ldr	r4, [pc, #248]	; (2294 <newLine+0x188>)
    219a:	47a0      	blx	r4
		for(uint16_t writepixel = 0 ; writepixel < 800 ; writepixel++)
		{
			if((rowPixel[writepixel] == 0xFF))
				setPixel((fore_Color_High<<8)|fore_Color_Low);
			else
				setPixel((back_Color_High<<8)|back_Color_Low);
    219c:	4b3e      	ldr	r3, [pc, #248]	; (2298 <newLine+0x18c>)
    219e:	469b      	mov	fp, r3
    21a0:	4b3e      	ldr	r3, [pc, #248]	; (229c <newLine+0x190>)
    21a2:	469a      	mov	sl, r3
    21a4:	4b3e      	ldr	r3, [pc, #248]	; (22a0 <newLine+0x194>)
    21a6:	4699      	mov	r9, r3
    21a8:	9c01      	ldr	r4, [sp, #4]
    21aa:	e00b      	b.n	21c4 <newLine+0xb8>
				setPixel((fore_Color_High<<8)|fore_Color_Low);
    21ac:	4b3d      	ldr	r3, [pc, #244]	; (22a4 <newLine+0x198>)
    21ae:	8818      	ldrh	r0, [r3, #0]
    21b0:	0200      	lsls	r0, r0, #8
    21b2:	4b3d      	ldr	r3, [pc, #244]	; (22a8 <newLine+0x19c>)
    21b4:	881b      	ldrh	r3, [r3, #0]
    21b6:	4318      	orrs	r0, r3
    21b8:	b280      	uxth	r0, r0
    21ba:	4b39      	ldr	r3, [pc, #228]	; (22a0 <newLine+0x194>)
    21bc:	4798      	blx	r3
    21be:	3501      	adds	r5, #1
		for(uint16_t writepixel = 0 ; writepixel < 800 ; writepixel++)
    21c0:	42a5      	cmp	r5, r4
    21c2:	d00b      	beq.n	21dc <newLine+0xd0>
			if((rowPixel[writepixel] == 0xFF))
    21c4:	782b      	ldrb	r3, [r5, #0]
    21c6:	2bff      	cmp	r3, #255	; 0xff
    21c8:	d0f0      	beq.n	21ac <newLine+0xa0>
				setPixel((back_Color_High<<8)|back_Color_Low);
    21ca:	465b      	mov	r3, fp
    21cc:	8818      	ldrh	r0, [r3, #0]
    21ce:	0200      	lsls	r0, r0, #8
    21d0:	4653      	mov	r3, sl
    21d2:	881b      	ldrh	r3, [r3, #0]
    21d4:	4318      	orrs	r0, r3
    21d6:	b280      	uxth	r0, r0
    21d8:	47c8      	blx	r9
    21da:	e7f0      	b.n	21be <newLine+0xb2>
	for(uint16_t row = 0 ; row < 460 ; row++)
    21dc:	9b00      	ldr	r3, [sp, #0]
    21de:	3301      	adds	r3, #1
    21e0:	b29b      	uxth	r3, r3
    21e2:	001a      	movs	r2, r3
    21e4:	9300      	str	r3, [sp, #0]
    21e6:	23e6      	movs	r3, #230	; 0xe6
    21e8:	005b      	lsls	r3, r3, #1
    21ea:	429a      	cmp	r2, r3
    21ec:	d031      	beq.n	2252 <newLine+0x146>
		REG_PORT_OUTCLR1 = LCD_CS;
    21ee:	4643      	mov	r3, r8
    21f0:	2280      	movs	r2, #128	; 0x80
    21f2:	03d2      	lsls	r2, r2, #15
    21f4:	601a      	str	r2, [r3, #0]
		setXY(0, row+20, 799, row+20);
    21f6:	9900      	ldr	r1, [sp, #0]
    21f8:	3114      	adds	r1, #20
    21fa:	b289      	uxth	r1, r1
    21fc:	000b      	movs	r3, r1
    21fe:	4a24      	ldr	r2, [pc, #144]	; (2290 <newLine+0x184>)
    2200:	2000      	movs	r0, #0
    2202:	4c24      	ldr	r4, [pc, #144]	; (2294 <newLine+0x188>)
    2204:	47a0      	blx	r4
		LCD_Write_COM16(0x2E,0x00);
    2206:	2100      	movs	r1, #0
    2208:	202e      	movs	r0, #46	; 0x2e
    220a:	4b28      	ldr	r3, [pc, #160]	; (22ac <newLine+0x1a0>)
    220c:	4798      	blx	r3
		REG_PORT_OUTSET1 = LCD_DC;
    220e:	2380      	movs	r3, #128	; 0x80
    2210:	041b      	lsls	r3, r3, #16
    2212:	603b      	str	r3, [r7, #0]
		REG_PORT_OUTCLR1 = LCD_RD;
    2214:	4643      	mov	r3, r8
    2216:	2280      	movs	r2, #128	; 0x80
    2218:	0252      	lsls	r2, r2, #9
    221a:	601a      	str	r2, [r3, #0]
		REG_PORT_OUTSET1 = LCD_RD;
    221c:	603a      	str	r2, [r7, #0]
		REG_PORT_DIRCLR1 = PORT_PB07;
    221e:	2280      	movs	r2, #128	; 0x80
    2220:	4b23      	ldr	r3, [pc, #140]	; (22b0 <newLine+0x1a4>)
    2222:	601a      	str	r2, [r3, #0]
		PORT->Group[1].PINCFG[7].bit.INEN = 1;
    2224:	4a23      	ldr	r2, [pc, #140]	; (22b4 <newLine+0x1a8>)
    2226:	23c7      	movs	r3, #199	; 0xc7
    2228:	5cd1      	ldrb	r1, [r2, r3]
    222a:	2002      	movs	r0, #2
    222c:	4301      	orrs	r1, r0
    222e:	54d1      	strb	r1, [r2, r3]
		PORT->Group[1].PINCFG[7].bit.PULLEN = 1;
    2230:	5cd1      	ldrb	r1, [r2, r3]
    2232:	2004      	movs	r0, #4
    2234:	4301      	orrs	r1, r0
    2236:	54d1      	strb	r1, [r2, r3]
    2238:	ad02      	add	r5, sp, #8
    223a:	abca      	add	r3, sp, #808	; 0x328
    223c:	469c      	mov	ip, r3
    223e:	9501      	str	r5, [sp, #4]
			if((PORT->Group[1].IN.reg & PORT_PB07) != 0)
    2240:	0010      	movs	r0, r2
    2242:	21a0      	movs	r1, #160	; 0xa0
    2244:	2280      	movs	r2, #128	; 0x80
				rowPixel[getpixel] = 0x00;
    2246:	2300      	movs	r3, #0
    2248:	469a      	mov	sl, r3
				rowPixel[getpixel] = 0xFF;
    224a:	33ff      	adds	r3, #255	; 0xff
    224c:	4699      	mov	r9, r3
    224e:	002c      	movs	r4, r5
    2250:	e78e      	b.n	2170 <newLine+0x64>
		}
	}
	
	//clear the last character line of the display
	//and fix the console text buffer
	fillRectBackColor(0, 460, 799, 480);
    2252:	3314      	adds	r3, #20
    2254:	4a0e      	ldr	r2, [pc, #56]	; (2290 <newLine+0x184>)
    2256:	21e6      	movs	r1, #230	; 0xe6
    2258:	0049      	lsls	r1, r1, #1
    225a:	2000      	movs	r0, #0
    225c:	4c16      	ldr	r4, [pc, #88]	; (22b8 <newLine+0x1ac>)
    225e:	47a0      	blx	r4
	
	
}
    2260:	23cb      	movs	r3, #203	; 0xcb
    2262:	009b      	lsls	r3, r3, #2
    2264:	449d      	add	sp, r3
    2266:	bc3c      	pop	{r2, r3, r4, r5}
    2268:	4690      	mov	r8, r2
    226a:	4699      	mov	r9, r3
    226c:	46a2      	mov	sl, r4
    226e:	46ab      	mov	fp, r5
    2270:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2272:	46c0      	nop			; (mov r8, r8)
    2274:	fffffcd4 	.word	0xfffffcd4
    2278:	20000310 	.word	0x20000310
    227c:	20000327 	.word	0x20000327
    2280:	41004494 	.word	0x41004494
    2284:	41004498 	.word	0x41004498
    2288:	0000ffff 	.word	0x0000ffff
    228c:	41004488 	.word	0x41004488
    2290:	0000031f 	.word	0x0000031f
    2294:	00002ba1 	.word	0x00002ba1
    2298:	20000a96 	.word	0x20000a96
    229c:	20000a90 	.word	0x20000a90
    22a0:	00002d61 	.word	0x00002d61
    22a4:	20000a92 	.word	0x20000a92
    22a8:	20000a94 	.word	0x20000a94
    22ac:	00002dcd 	.word	0x00002dcd
    22b0:	41004484 	.word	0x41004484
    22b4:	41004400 	.word	0x41004400
    22b8:	00002ca1 	.word	0x00002ca1

000022bc <blinkCursor>:

void blinkCursor(void)
{
    22bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    22be:	46d6      	mov	lr, sl
    22c0:	464f      	mov	r7, r9
    22c2:	4646      	mov	r6, r8
    22c4:	b5c0      	push	{r6, r7, lr}
	uint16_t x = xCharPos;
    22c6:	4b47      	ldr	r3, [pc, #284]	; (23e4 <blinkCursor+0x128>)
    22c8:	881b      	ldrh	r3, [r3, #0]
	uint16_t y = yCharPos;
    22ca:	4a47      	ldr	r2, [pc, #284]	; (23e8 <blinkCursor+0x12c>)
    22cc:	8815      	ldrh	r5, [r2, #0]
	unsigned char character = consoleDisplay[x][y];
    22ce:	005a      	lsls	r2, r3, #1
    22d0:	18d2      	adds	r2, r2, r3
    22d2:	00d2      	lsls	r2, r2, #3
    22d4:	4845      	ldr	r0, [pc, #276]	; (23ec <blinkCursor+0x130>)
    22d6:	1882      	adds	r2, r0, r2
    22d8:	5d54      	ldrb	r4, [r2, r5]
	setXY(x*10,y*20,x*10+9,y*20+19);
    22da:	0098      	lsls	r0, r3, #2
    22dc:	181b      	adds	r3, r3, r0
    22de:	005b      	lsls	r3, r3, #1
    22e0:	b298      	uxth	r0, r3
    22e2:	2114      	movs	r1, #20
    22e4:	4369      	muls	r1, r5
    22e6:	b289      	uxth	r1, r1
    22e8:	000b      	movs	r3, r1
    22ea:	3313      	adds	r3, #19
    22ec:	b29b      	uxth	r3, r3
    22ee:	0002      	movs	r2, r0
    22f0:	3209      	adds	r2, #9
    22f2:	b292      	uxth	r2, r2
    22f4:	4d3e      	ldr	r5, [pc, #248]	; (23f0 <blinkCursor+0x134>)
    22f6:	47a8      	blx	r5
	REG_PORT_OUTCLR1 = LCD_CS;
    22f8:	2280      	movs	r2, #128	; 0x80
    22fa:	03d2      	lsls	r2, r2, #15
    22fc:	4b3d      	ldr	r3, [pc, #244]	; (23f4 <blinkCursor+0x138>)
    22fe:	601a      	str	r2, [r3, #0]
	if(cursorBlinkState)
    2300:	4b3d      	ldr	r3, [pc, #244]	; (23f8 <blinkCursor+0x13c>)
    2302:	781b      	ldrb	r3, [r3, #0]
    2304:	2b00      	cmp	r3, #0
    2306:	d113      	bne.n	2330 <blinkCursor+0x74>
    2308:	4a3c      	ldr	r2, [pc, #240]	; (23fc <blinkCursor+0x140>)
    230a:	00a5      	lsls	r5, r4, #2
    230c:	192d      	adds	r5, r5, r4
    230e:	00ab      	lsls	r3, r5, #2
    2310:	18ed      	adds	r5, r5, r3
    2312:	1955      	adds	r5, r2, r5
    2314:	3401      	adds	r4, #1
    2316:	00a3      	lsls	r3, r4, #2
    2318:	191c      	adds	r4, r3, r4
    231a:	00a3      	lsls	r3, r4, #2
    231c:	18e4      	adds	r4, r4, r3
    231e:	4692      	mov	sl, r2
    2320:	44a2      	add	sl, r4
				{
					setPixel((fore_Color_High<<8)|fore_Color_Low);
				}
				else
				{
					setPixel((back_Color_High<<8)|back_Color_Low);
    2322:	4b37      	ldr	r3, [pc, #220]	; (2400 <blinkCursor+0x144>)
    2324:	4699      	mov	r9, r3
    2326:	4b37      	ldr	r3, [pc, #220]	; (2404 <blinkCursor+0x148>)
    2328:	4698      	mov	r8, r3
    232a:	4f37      	ldr	r7, [pc, #220]	; (2408 <blinkCursor+0x14c>)
					setPixel((fore_Color_High<<8)|fore_Color_Low);
    232c:	4e37      	ldr	r6, [pc, #220]	; (240c <blinkCursor+0x150>)
    232e:	e049      	b.n	23c4 <blinkCursor+0x108>
    2330:	4a32      	ldr	r2, [pc, #200]	; (23fc <blinkCursor+0x140>)
    2332:	00a5      	lsls	r5, r4, #2
    2334:	192d      	adds	r5, r5, r4
    2336:	00ab      	lsls	r3, r5, #2
    2338:	18ed      	adds	r5, r5, r3
    233a:	1955      	adds	r5, r2, r5
    233c:	3401      	adds	r4, #1
    233e:	00a3      	lsls	r3, r4, #2
    2340:	191c      	adds	r4, r3, r4
    2342:	00a3      	lsls	r3, r4, #2
    2344:	18e4      	adds	r4, r4, r3
    2346:	4692      	mov	sl, r2
    2348:	44a2      	add	sl, r4
					setPixel((fore_Color_High<<8)|fore_Color_Low);
    234a:	4b30      	ldr	r3, [pc, #192]	; (240c <blinkCursor+0x150>)
    234c:	4699      	mov	r9, r3
    234e:	4b30      	ldr	r3, [pc, #192]	; (2410 <blinkCursor+0x154>)
    2350:	4698      	mov	r8, r3
    2352:	4f2d      	ldr	r7, [pc, #180]	; (2408 <blinkCursor+0x14c>)
					setPixel((back_Color_High<<8)|back_Color_Low);
    2354:	4e2a      	ldr	r6, [pc, #168]	; (2400 <blinkCursor+0x144>)
    2356:	e019      	b.n	238c <blinkCursor+0xd0>
					setPixel((fore_Color_High<<8)|fore_Color_Low);
    2358:	464b      	mov	r3, r9
    235a:	8818      	ldrh	r0, [r3, #0]
    235c:	0200      	lsls	r0, r0, #8
    235e:	4643      	mov	r3, r8
    2360:	881b      	ldrh	r3, [r3, #0]
    2362:	4318      	orrs	r0, r3
    2364:	b280      	uxth	r0, r0
    2366:	47b8      	blx	r7
			for(int j=0;j<8;j++)
    2368:	3c01      	subs	r4, #1
    236a:	d30c      	bcc.n	2386 <blinkCursor+0xca>
				if((CodePage437[character][i]&(1<<(7-j)))!=0)
    236c:	782b      	ldrb	r3, [r5, #0]
    236e:	4123      	asrs	r3, r4
    2370:	07db      	lsls	r3, r3, #31
    2372:	d5f1      	bpl.n	2358 <blinkCursor+0x9c>
					setPixel((back_Color_High<<8)|back_Color_Low);
    2374:	8830      	ldrh	r0, [r6, #0]
    2376:	0200      	lsls	r0, r0, #8
    2378:	4b22      	ldr	r3, [pc, #136]	; (2404 <blinkCursor+0x148>)
    237a:	881b      	ldrh	r3, [r3, #0]
    237c:	4318      	orrs	r0, r3
    237e:	b280      	uxth	r0, r0
    2380:	4b21      	ldr	r3, [pc, #132]	; (2408 <blinkCursor+0x14c>)
    2382:	4798      	blx	r3
    2384:	e7f0      	b.n	2368 <blinkCursor+0xac>
    2386:	3501      	adds	r5, #1
		for(uint16_t i=0; i <= 24; i++)
    2388:	4555      	cmp	r5, sl
    238a:	d01d      	beq.n	23c8 <blinkCursor+0x10c>
{
    238c:	2407      	movs	r4, #7
    238e:	e7ed      	b.n	236c <blinkCursor+0xb0>
					setPixel((back_Color_High<<8)|back_Color_Low);
    2390:	464b      	mov	r3, r9
    2392:	8818      	ldrh	r0, [r3, #0]
    2394:	0200      	lsls	r0, r0, #8
    2396:	4643      	mov	r3, r8
    2398:	881b      	ldrh	r3, [r3, #0]
    239a:	4318      	orrs	r0, r3
    239c:	b280      	uxth	r0, r0
    239e:	47b8      	blx	r7
			for(int j=0;j<8;j++)
    23a0:	3c01      	subs	r4, #1
    23a2:	d30c      	bcc.n	23be <blinkCursor+0x102>
				if((CodePage437[character][i]&(1<<(7-j)))!=0)
    23a4:	782b      	ldrb	r3, [r5, #0]
    23a6:	4123      	asrs	r3, r4
    23a8:	07db      	lsls	r3, r3, #31
    23aa:	d5f1      	bpl.n	2390 <blinkCursor+0xd4>
					setPixel((fore_Color_High<<8)|fore_Color_Low);
    23ac:	8830      	ldrh	r0, [r6, #0]
    23ae:	0200      	lsls	r0, r0, #8
    23b0:	4b17      	ldr	r3, [pc, #92]	; (2410 <blinkCursor+0x154>)
    23b2:	881b      	ldrh	r3, [r3, #0]
    23b4:	4318      	orrs	r0, r3
    23b6:	b280      	uxth	r0, r0
    23b8:	4b13      	ldr	r3, [pc, #76]	; (2408 <blinkCursor+0x14c>)
    23ba:	4798      	blx	r3
    23bc:	e7f0      	b.n	23a0 <blinkCursor+0xe4>
    23be:	3501      	adds	r5, #1
		for(uint16_t i=0; i <= 24; i++)
    23c0:	4555      	cmp	r5, sl
    23c2:	d001      	beq.n	23c8 <blinkCursor+0x10c>
{
    23c4:	2407      	movs	r4, #7
    23c6:	e7ed      	b.n	23a4 <blinkCursor+0xe8>
				}
			}
		}
	}

	REG_PORT_OUTSET1 = LCD_CS;
    23c8:	2280      	movs	r2, #128	; 0x80
    23ca:	03d2      	lsls	r2, r2, #15
    23cc:	4b11      	ldr	r3, [pc, #68]	; (2414 <blinkCursor+0x158>)
    23ce:	601a      	str	r2, [r3, #0]
	
	//invert cursorBlinkState
	cursorBlinkState = !cursorBlinkState;
    23d0:	4a09      	ldr	r2, [pc, #36]	; (23f8 <blinkCursor+0x13c>)
    23d2:	7813      	ldrb	r3, [r2, #0]
    23d4:	2101      	movs	r1, #1
    23d6:	404b      	eors	r3, r1
    23d8:	7013      	strb	r3, [r2, #0]
	
}
    23da:	bc1c      	pop	{r2, r3, r4}
    23dc:	4690      	mov	r8, r2
    23de:	4699      	mov	r9, r3
    23e0:	46a2      	mov	sl, r4
    23e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    23e4:	20000298 	.word	0x20000298
    23e8:	2000029a 	.word	0x2000029a
    23ec:	20000310 	.word	0x20000310
    23f0:	00002ba1 	.word	0x00002ba1
    23f4:	41004494 	.word	0x41004494
    23f8:	20000010 	.word	0x20000010
    23fc:	00004ff4 	.word	0x00004ff4
    2400:	20000a96 	.word	0x20000a96
    2404:	20000a90 	.word	0x20000a90
    2408:	00002d61 	.word	0x00002d61
    240c:	20000a92 	.word	0x20000a92
    2410:	20000a94 	.word	0x20000a94
    2414:	41004498 	.word	0x41004498

00002418 <writeString>:

void writeString(const char str[])
{
    2418:	b5f0      	push	{r4, r5, r6, r7, lr}
    241a:	46c6      	mov	lr, r8
    241c:	b500      	push	{lr}
    241e:	0005      	movs	r5, r0
	int length = strlen(str);
    2420:	4b0c      	ldr	r3, [pc, #48]	; (2454 <writeString+0x3c>)
    2422:	4798      	blx	r3
	for(int i = 0; i < length; i++)
    2424:	2800      	cmp	r0, #0
    2426:	dd11      	ble.n	244c <writeString+0x34>
    2428:	002c      	movs	r4, r5
    242a:	182d      	adds	r5, r5, r0
	{
		drawChar(str[i]);
    242c:	4f0a      	ldr	r7, [pc, #40]	; (2458 <writeString+0x40>)
		if(xCharPos <= 80)
    242e:	4e0b      	ldr	r6, [pc, #44]	; (245c <writeString+0x44>)
		xCharPos++;
    2430:	46b0      	mov	r8, r6
    2432:	e002      	b.n	243a <writeString+0x22>
    2434:	3401      	adds	r4, #1
	for(int i = 0; i < length; i++)
    2436:	42ac      	cmp	r4, r5
    2438:	d008      	beq.n	244c <writeString+0x34>
		drawChar(str[i]);
    243a:	7820      	ldrb	r0, [r4, #0]
    243c:	47b8      	blx	r7
		if(xCharPos <= 80)
    243e:	8833      	ldrh	r3, [r6, #0]
    2440:	2b50      	cmp	r3, #80	; 0x50
    2442:	d8f7      	bhi.n	2434 <writeString+0x1c>
		xCharPos++;
    2444:	3301      	adds	r3, #1
    2446:	4642      	mov	r2, r8
    2448:	8013      	strh	r3, [r2, #0]
    244a:	e7f3      	b.n	2434 <writeString+0x1c>
	}
}
    244c:	bc04      	pop	{r2}
    244e:	4690      	mov	r8, r2
    2450:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2452:	46c0      	nop			; (mov r8, r8)
    2454:	00003c69 	.word	0x00003c69
    2458:	00002025 	.word	0x00002025
    245c:	20000298 	.word	0x20000298

00002460 <scanCodesContains>:

bool scanCodesContains(int scanCode)
{
	for(int i = 0 ; i < 70 ; i++)
	{
		if(scanCodes[i] == scanCode)
    2460:	4b09      	ldr	r3, [pc, #36]	; (2488 <scanCodesContains+0x28>)
    2462:	681b      	ldr	r3, [r3, #0]
    2464:	4298      	cmp	r0, r3
    2466:	d00b      	beq.n	2480 <scanCodesContains+0x20>
    2468:	4a07      	ldr	r2, [pc, #28]	; (2488 <scanCodesContains+0x28>)
    246a:	1d13      	adds	r3, r2, #4
    246c:	3219      	adds	r2, #25
    246e:	32ff      	adds	r2, #255	; 0xff
    2470:	6819      	ldr	r1, [r3, #0]
    2472:	4281      	cmp	r1, r0
    2474:	d006      	beq.n	2484 <scanCodesContains+0x24>
    2476:	3304      	adds	r3, #4
	for(int i = 0 ; i < 70 ; i++)
    2478:	4293      	cmp	r3, r2
    247a:	d1f9      	bne.n	2470 <scanCodesContains+0x10>
		{
			return true;
		}
	}
	return false;
    247c:	2000      	movs	r0, #0
    247e:	e002      	b.n	2486 <scanCodesContains+0x26>
			return true;
    2480:	2001      	movs	r0, #1
    2482:	e000      	b.n	2486 <scanCodesContains+0x26>
    2484:	2001      	movs	r0, #1
}
    2486:	4770      	bx	lr
    2488:	2000003c 	.word	0x2000003c

0000248c <keyDown>:

bool keyDown(int scancode)
{
	for(int i = 0 ; i < 20 ; i++)
	{
		if(keyDownBuffer[i] == scancode)
    248c:	4b09      	ldr	r3, [pc, #36]	; (24b4 <keyDown+0x28>)
    248e:	781b      	ldrb	r3, [r3, #0]
    2490:	4298      	cmp	r0, r3
    2492:	d00a      	beq.n	24aa <keyDown+0x1e>
    2494:	4907      	ldr	r1, [pc, #28]	; (24b4 <keyDown+0x28>)
    2496:	1c4b      	adds	r3, r1, #1
    2498:	3114      	adds	r1, #20
    249a:	781a      	ldrb	r2, [r3, #0]
    249c:	4282      	cmp	r2, r0
    249e:	d006      	beq.n	24ae <keyDown+0x22>
    24a0:	3301      	adds	r3, #1
	for(int i = 0 ; i < 20 ; i++)
    24a2:	428b      	cmp	r3, r1
    24a4:	d1f9      	bne.n	249a <keyDown+0xe>
		{
			return true;
		}	
	}
	return false;
    24a6:	2000      	movs	r0, #0
}
    24a8:	4770      	bx	lr
			return true;
    24aa:	2001      	movs	r0, #1
    24ac:	e7fc      	b.n	24a8 <keyDown+0x1c>
    24ae:	2001      	movs	r0, #1
    24b0:	e7fa      	b.n	24a8 <keyDown+0x1c>
    24b2:	46c0      	nop			; (mov r8, r8)
    24b4:	20000014 	.word	0x20000014

000024b8 <printKeyboardBuffer>:
{
    24b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    24ba:	46de      	mov	lr, fp
    24bc:	4657      	mov	r7, sl
    24be:	464e      	mov	r6, r9
    24c0:	4645      	mov	r5, r8
    24c2:	b5e0      	push	{r5, r6, r7, lr}
    24c4:	b0a7      	sub	sp, #156	; 0x9c
	unsigned char noCase[] =	  
    24c6:	4cc9      	ldr	r4, [pc, #804]	; (27ec <printKeyboardBuffer+0x334>)
    24c8:	2246      	movs	r2, #70	; 0x46
    24ca:	0021      	movs	r1, r4
    24cc:	a814      	add	r0, sp, #80	; 0x50
    24ce:	4dc8      	ldr	r5, [pc, #800]	; (27f0 <printKeyboardBuffer+0x338>)
    24d0:	47a8      	blx	r5
	unsigned char shiftCase[] = 
    24d2:	0021      	movs	r1, r4
    24d4:	3148      	adds	r1, #72	; 0x48
    24d6:	2246      	movs	r2, #70	; 0x46
    24d8:	a802      	add	r0, sp, #8
    24da:	47a8      	blx	r5
    24dc:	4fc5      	ldr	r7, [pc, #788]	; (27f4 <printKeyboardBuffer+0x33c>)
    24de:	0038      	movs	r0, r7
    24e0:	3014      	adds	r0, #20
    24e2:	003d      	movs	r5, r7
	bool shifted = false;
    24e4:	2300      	movs	r3, #0
    24e6:	9301      	str	r3, [sp, #4]
    24e8:	e002      	b.n	24f0 <printKeyboardBuffer+0x38>
    24ea:	3501      	adds	r5, #1
	for(int i=0; i<20; i++)
    24ec:	4285      	cmp	r5, r0
    24ee:	d00b      	beq.n	2508 <printKeyboardBuffer+0x50>
		if((scanCodeBuffer[i] == 13) | (scanCodeBuffer[i] == 49))
    24f0:	782b      	ldrb	r3, [r5, #0]
    24f2:	001a      	movs	r2, r3
    24f4:	3a0d      	subs	r2, #13
    24f6:	4251      	negs	r1, r2
    24f8:	414a      	adcs	r2, r1
    24fa:	3b31      	subs	r3, #49	; 0x31
    24fc:	4259      	negs	r1, r3
    24fe:	414b      	adcs	r3, r1
    2500:	4313      	orrs	r3, r2
    2502:	d0f2      	beq.n	24ea <printKeyboardBuffer+0x32>
			shifted = true;
    2504:	9301      	str	r3, [sp, #4]
    2506:	e7f0      	b.n	24ea <printKeyboardBuffer+0x32>
    2508:	4ebb      	ldr	r6, [pc, #748]	; (27f8 <printKeyboardBuffer+0x340>)
	for(int i=0; i<20; i++)
    250a:	003c      	movs	r4, r7
		if(!keyDown(scanCodeBuffer[i]))
    250c:	4bbb      	ldr	r3, [pc, #748]	; (27fc <printKeyboardBuffer+0x344>)
    250e:	469b      	mov	fp, r3
					consoleDisplay[xCharPos][yCharPos] = noCase[scanCodeBuffer[i]];
    2510:	46b9      	mov	r9, r7
    2512:	002f      	movs	r7, r5
    2514:	e008      	b.n	2528 <printKeyboardBuffer+0x70>
				if(xCharPos > 0) 
    2516:	4bba      	ldr	r3, [pc, #744]	; (2800 <printKeyboardBuffer+0x348>)
    2518:	881b      	ldrh	r3, [r3, #0]
    251a:	2b00      	cmp	r3, #0
    251c:	d159      	bne.n	25d2 <printKeyboardBuffer+0x11a>
    251e:	3401      	adds	r4, #1
    2520:	3601      	adds	r6, #1
	for(int i=0; i<20; i++)
    2522:	42bc      	cmp	r4, r7
    2524:	d100      	bne.n	2528 <printKeyboardBuffer+0x70>
    2526:	e1ad      	b.n	2884 <printKeyboardBuffer+0x3cc>
    2528:	9400      	str	r4, [sp, #0]
		if(!keyDown(scanCodeBuffer[i]))
    252a:	7825      	ldrb	r5, [r4, #0]
    252c:	0028      	movs	r0, r5
    252e:	47d8      	blx	fp
    2530:	2800      	cmp	r0, #0
    2532:	d1f4      	bne.n	251e <printKeyboardBuffer+0x66>
			keyDownBuffer[i] = scanCodeBuffer[i];
    2534:	7035      	strb	r5, [r6, #0]
			if(scanCodeBuffer[i] == 0xFF)
    2536:	2dff      	cmp	r5, #255	; 0xff
    2538:	d0f1      	beq.n	251e <printKeyboardBuffer+0x66>
			else if(scanCodeBuffer[i] == 35) //left
    253a:	2d23      	cmp	r5, #35	; 0x23
    253c:	d0eb      	beq.n	2516 <printKeyboardBuffer+0x5e>
			else if(scanCodeBuffer[i] == 45)	//down
    253e:	2d2d      	cmp	r5, #45	; 0x2d
    2540:	d063      	beq.n	260a <printKeyboardBuffer+0x152>
			else if(scanCodeBuffer[i] == 55)	//up
    2542:	2d37      	cmp	r5, #55	; 0x37
    2544:	d100      	bne.n	2548 <printKeyboardBuffer+0x90>
    2546:	e081      	b.n	264c <printKeyboardBuffer+0x194>
			else if(scanCodeBuffer[i] == 65)	//right
    2548:	2d41      	cmp	r5, #65	; 0x41
    254a:	d100      	bne.n	254e <printKeyboardBuffer+0x96>
    254c:	e09f      	b.n	268e <printKeyboardBuffer+0x1d6>
			else if((scanCodeBuffer[i] == 49) | (scanCodeBuffer[i] == 13))
    254e:	2d31      	cmp	r5, #49	; 0x31
    2550:	d0e5      	beq.n	251e <printKeyboardBuffer+0x66>
    2552:	2d0d      	cmp	r5, #13
    2554:	d0e3      	beq.n	251e <printKeyboardBuffer+0x66>
			else if(scanCodeBuffer[i] == 58) //Return
    2556:	2d3a      	cmp	r5, #58	; 0x3a
    2558:	d100      	bne.n	255c <printKeyboardBuffer+0xa4>
    255a:	e0b9      	b.n	26d0 <printKeyboardBuffer+0x218>
			else if(scanCodeBuffer[i] == 69) //Line
    255c:	2d45      	cmp	r5, #69	; 0x45
    255e:	d100      	bne.n	2562 <printKeyboardBuffer+0xaa>
    2560:	e0ed      	b.n	273e <printKeyboardBuffer+0x286>
			else if(scanCodeBuffer[i] == 66) //Backspace
    2562:	2d42      	cmp	r5, #66	; 0x42
    2564:	d100      	bne.n	2568 <printKeyboardBuffer+0xb0>
    2566:	e121      	b.n	27ac <printKeyboardBuffer+0x2f4>
				if(shifted)
    2568:	9b01      	ldr	r3, [sp, #4]
    256a:	2b00      	cmp	r3, #0
    256c:	d100      	bne.n	2570 <printKeyboardBuffer+0xb8>
    256e:	e155      	b.n	281c <printKeyboardBuffer+0x364>
					consoleDisplay[xCharPos][yCharPos] = shiftCase[scanCodeBuffer[i]];
    2570:	ab02      	add	r3, sp, #8
    2572:	5d58      	ldrb	r0, [r3, r5]
    2574:	4ba2      	ldr	r3, [pc, #648]	; (2800 <printKeyboardBuffer+0x348>)
    2576:	4698      	mov	r8, r3
    2578:	8819      	ldrh	r1, [r3, #0]
    257a:	4ba2      	ldr	r3, [pc, #648]	; (2804 <printKeyboardBuffer+0x34c>)
    257c:	469a      	mov	sl, r3
    257e:	881a      	ldrh	r2, [r3, #0]
    2580:	004b      	lsls	r3, r1, #1
    2582:	185b      	adds	r3, r3, r1
    2584:	00db      	lsls	r3, r3, #3
    2586:	49a0      	ldr	r1, [pc, #640]	; (2808 <printKeyboardBuffer+0x350>)
    2588:	468c      	mov	ip, r1
    258a:	4463      	add	r3, ip
    258c:	5498      	strb	r0, [r3, r2]
					printf("%c",consoleDisplay[xCharPos][yCharPos]);
    258e:	4b9f      	ldr	r3, [pc, #636]	; (280c <printKeyboardBuffer+0x354>)
    2590:	4798      	blx	r3
					drawChar(shiftCase[scanCodeBuffer[i]]);
    2592:	9b00      	ldr	r3, [sp, #0]
    2594:	781b      	ldrb	r3, [r3, #0]
    2596:	aa02      	add	r2, sp, #8
    2598:	5cd0      	ldrb	r0, [r2, r3]
    259a:	4d9d      	ldr	r5, [pc, #628]	; (2810 <printKeyboardBuffer+0x358>)
    259c:	47a8      	blx	r5
					xCharPos++;
    259e:	4643      	mov	r3, r8
    25a0:	881b      	ldrh	r3, [r3, #0]
    25a2:	3301      	adds	r3, #1
    25a4:	b29b      	uxth	r3, r3
    25a6:	4642      	mov	r2, r8
    25a8:	8013      	strh	r3, [r2, #0]
					drawChar(consoleDisplay[xCharPos][yCharPos]);
    25aa:	4652      	mov	r2, sl
    25ac:	8811      	ldrh	r1, [r2, #0]
    25ae:	005a      	lsls	r2, r3, #1
    25b0:	18d3      	adds	r3, r2, r3
    25b2:	00db      	lsls	r3, r3, #3
    25b4:	4a94      	ldr	r2, [pc, #592]	; (2808 <printKeyboardBuffer+0x350>)
    25b6:	4694      	mov	ip, r2
    25b8:	4463      	add	r3, ip
    25ba:	5c58      	ldrb	r0, [r3, r1]
    25bc:	47a8      	blx	r5
					if(xCharPos > 79)
    25be:	4643      	mov	r3, r8
    25c0:	881b      	ldrh	r3, [r3, #0]
    25c2:	2b4f      	cmp	r3, #79	; 0x4f
    25c4:	d902      	bls.n	25cc <printKeyboardBuffer+0x114>
						xCharPos--;
    25c6:	3b01      	subs	r3, #1
    25c8:	4a8d      	ldr	r2, [pc, #564]	; (2800 <printKeyboardBuffer+0x348>)
    25ca:	8013      	strh	r3, [r2, #0]
					blinkCursor();
    25cc:	4b91      	ldr	r3, [pc, #580]	; (2814 <printKeyboardBuffer+0x35c>)
    25ce:	4798      	blx	r3
    25d0:	e7a5      	b.n	251e <printKeyboardBuffer+0x66>
					drawChar(consoleDisplay[xCharPos][yCharPos]);
    25d2:	4d8d      	ldr	r5, [pc, #564]	; (2808 <printKeyboardBuffer+0x350>)
    25d4:	4a8b      	ldr	r2, [pc, #556]	; (2804 <printKeyboardBuffer+0x34c>)
    25d6:	4690      	mov	r8, r2
    25d8:	8811      	ldrh	r1, [r2, #0]
    25da:	005a      	lsls	r2, r3, #1
    25dc:	18d3      	adds	r3, r2, r3
    25de:	00db      	lsls	r3, r3, #3
    25e0:	18eb      	adds	r3, r5, r3
    25e2:	5c58      	ldrb	r0, [r3, r1]
    25e4:	4b8a      	ldr	r3, [pc, #552]	; (2810 <printKeyboardBuffer+0x358>)
    25e6:	469a      	mov	sl, r3
    25e8:	4798      	blx	r3
					xCharPos--;
    25ea:	4a85      	ldr	r2, [pc, #532]	; (2800 <printKeyboardBuffer+0x348>)
    25ec:	8813      	ldrh	r3, [r2, #0]
    25ee:	3b01      	subs	r3, #1
    25f0:	b29b      	uxth	r3, r3
    25f2:	8013      	strh	r3, [r2, #0]
					tempCharacter = consoleDisplay[xCharPos][yCharPos];
    25f4:	4642      	mov	r2, r8
    25f6:	8811      	ldrh	r1, [r2, #0]
    25f8:	005a      	lsls	r2, r3, #1
    25fa:	18d3      	adds	r3, r2, r3
    25fc:	00db      	lsls	r3, r3, #3
    25fe:	18eb      	adds	r3, r5, r3
					drawChar(tempCharacter);
    2600:	5c58      	ldrb	r0, [r3, r1]
    2602:	47d0      	blx	sl
					blinkCursor();
    2604:	4b83      	ldr	r3, [pc, #524]	; (2814 <printKeyboardBuffer+0x35c>)
    2606:	4798      	blx	r3
    2608:	e789      	b.n	251e <printKeyboardBuffer+0x66>
				if(yCharPos < 23)
    260a:	4b7e      	ldr	r3, [pc, #504]	; (2804 <printKeyboardBuffer+0x34c>)
    260c:	881a      	ldrh	r2, [r3, #0]
    260e:	2a16      	cmp	r2, #22
    2610:	d900      	bls.n	2614 <printKeyboardBuffer+0x15c>
    2612:	e784      	b.n	251e <printKeyboardBuffer+0x66>
					drawChar(consoleDisplay[xCharPos][yCharPos]);
    2614:	4d7c      	ldr	r5, [pc, #496]	; (2808 <printKeyboardBuffer+0x350>)
    2616:	4b7a      	ldr	r3, [pc, #488]	; (2800 <printKeyboardBuffer+0x348>)
    2618:	4698      	mov	r8, r3
    261a:	8819      	ldrh	r1, [r3, #0]
    261c:	004b      	lsls	r3, r1, #1
    261e:	185b      	adds	r3, r3, r1
    2620:	00db      	lsls	r3, r3, #3
    2622:	18eb      	adds	r3, r5, r3
    2624:	5c98      	ldrb	r0, [r3, r2]
    2626:	4b7a      	ldr	r3, [pc, #488]	; (2810 <printKeyboardBuffer+0x358>)
    2628:	469a      	mov	sl, r3
    262a:	4798      	blx	r3
					yCharPos++;
    262c:	4a75      	ldr	r2, [pc, #468]	; (2804 <printKeyboardBuffer+0x34c>)
    262e:	8813      	ldrh	r3, [r2, #0]
    2630:	3301      	adds	r3, #1
    2632:	b29b      	uxth	r3, r3
    2634:	8013      	strh	r3, [r2, #0]
					tempCharacter = consoleDisplay[xCharPos][yCharPos];
    2636:	4642      	mov	r2, r8
    2638:	8811      	ldrh	r1, [r2, #0]
    263a:	004a      	lsls	r2, r1, #1
    263c:	1852      	adds	r2, r2, r1
    263e:	00d2      	lsls	r2, r2, #3
    2640:	18ad      	adds	r5, r5, r2
					drawChar(tempCharacter);
    2642:	5ce8      	ldrb	r0, [r5, r3]
    2644:	47d0      	blx	sl
					blinkCursor();
    2646:	4b73      	ldr	r3, [pc, #460]	; (2814 <printKeyboardBuffer+0x35c>)
    2648:	4798      	blx	r3
    264a:	e768      	b.n	251e <printKeyboardBuffer+0x66>
				if(yCharPos > 0)
    264c:	4b6d      	ldr	r3, [pc, #436]	; (2804 <printKeyboardBuffer+0x34c>)
    264e:	881b      	ldrh	r3, [r3, #0]
    2650:	2b00      	cmp	r3, #0
    2652:	d100      	bne.n	2656 <printKeyboardBuffer+0x19e>
    2654:	e763      	b.n	251e <printKeyboardBuffer+0x66>
					drawChar(consoleDisplay[xCharPos][yCharPos]);
    2656:	4d6c      	ldr	r5, [pc, #432]	; (2808 <printKeyboardBuffer+0x350>)
    2658:	4a69      	ldr	r2, [pc, #420]	; (2800 <printKeyboardBuffer+0x348>)
    265a:	4690      	mov	r8, r2
    265c:	8811      	ldrh	r1, [r2, #0]
    265e:	004a      	lsls	r2, r1, #1
    2660:	1852      	adds	r2, r2, r1
    2662:	00d2      	lsls	r2, r2, #3
    2664:	18aa      	adds	r2, r5, r2
    2666:	5cd0      	ldrb	r0, [r2, r3]
    2668:	4b69      	ldr	r3, [pc, #420]	; (2810 <printKeyboardBuffer+0x358>)
    266a:	469a      	mov	sl, r3
    266c:	4798      	blx	r3
					yCharPos--;
    266e:	4a65      	ldr	r2, [pc, #404]	; (2804 <printKeyboardBuffer+0x34c>)
    2670:	8813      	ldrh	r3, [r2, #0]
    2672:	3b01      	subs	r3, #1
    2674:	b29b      	uxth	r3, r3
    2676:	8013      	strh	r3, [r2, #0]
					tempCharacter = consoleDisplay[xCharPos][yCharPos];
    2678:	4642      	mov	r2, r8
    267a:	8811      	ldrh	r1, [r2, #0]
    267c:	004a      	lsls	r2, r1, #1
    267e:	1852      	adds	r2, r2, r1
    2680:	00d2      	lsls	r2, r2, #3
    2682:	18ad      	adds	r5, r5, r2
					drawChar(tempCharacter);
    2684:	5ce8      	ldrb	r0, [r5, r3]
    2686:	47d0      	blx	sl
					blinkCursor();				
    2688:	4b62      	ldr	r3, [pc, #392]	; (2814 <printKeyboardBuffer+0x35c>)
    268a:	4798      	blx	r3
    268c:	e747      	b.n	251e <printKeyboardBuffer+0x66>
				if(xCharPos < 79)
    268e:	4b5c      	ldr	r3, [pc, #368]	; (2800 <printKeyboardBuffer+0x348>)
    2690:	881b      	ldrh	r3, [r3, #0]
    2692:	2b4e      	cmp	r3, #78	; 0x4e
    2694:	d900      	bls.n	2698 <printKeyboardBuffer+0x1e0>
    2696:	e742      	b.n	251e <printKeyboardBuffer+0x66>
					drawChar(consoleDisplay[xCharPos][yCharPos]);
    2698:	4d5b      	ldr	r5, [pc, #364]	; (2808 <printKeyboardBuffer+0x350>)
    269a:	4a5a      	ldr	r2, [pc, #360]	; (2804 <printKeyboardBuffer+0x34c>)
    269c:	4690      	mov	r8, r2
    269e:	8811      	ldrh	r1, [r2, #0]
    26a0:	005a      	lsls	r2, r3, #1
    26a2:	18d3      	adds	r3, r2, r3
    26a4:	00db      	lsls	r3, r3, #3
    26a6:	18eb      	adds	r3, r5, r3
    26a8:	5c58      	ldrb	r0, [r3, r1]
    26aa:	4b59      	ldr	r3, [pc, #356]	; (2810 <printKeyboardBuffer+0x358>)
    26ac:	469a      	mov	sl, r3
    26ae:	4798      	blx	r3
					xCharPos++;
    26b0:	4a53      	ldr	r2, [pc, #332]	; (2800 <printKeyboardBuffer+0x348>)
    26b2:	8813      	ldrh	r3, [r2, #0]
    26b4:	3301      	adds	r3, #1
    26b6:	b29b      	uxth	r3, r3
    26b8:	8013      	strh	r3, [r2, #0]
					tempCharacter = consoleDisplay[xCharPos][yCharPos];
    26ba:	4642      	mov	r2, r8
    26bc:	8811      	ldrh	r1, [r2, #0]
    26be:	005a      	lsls	r2, r3, #1
    26c0:	18d3      	adds	r3, r2, r3
    26c2:	00db      	lsls	r3, r3, #3
    26c4:	18eb      	adds	r3, r5, r3
					drawChar(tempCharacter);
    26c6:	5c58      	ldrb	r0, [r3, r1]
    26c8:	47d0      	blx	sl
					blinkCursor();					
    26ca:	4b52      	ldr	r3, [pc, #328]	; (2814 <printKeyboardBuffer+0x35c>)
    26cc:	4798      	blx	r3
    26ce:	e726      	b.n	251e <printKeyboardBuffer+0x66>
				if(yCharPos == 23)
    26d0:	4b4c      	ldr	r3, [pc, #304]	; (2804 <printKeyboardBuffer+0x34c>)
    26d2:	881a      	ldrh	r2, [r3, #0]
    26d4:	2a17      	cmp	r2, #23
    26d6:	d01b      	beq.n	2710 <printKeyboardBuffer+0x258>
					drawChar(consoleDisplay[xCharPos][yCharPos]);
    26d8:	4d4b      	ldr	r5, [pc, #300]	; (2808 <printKeyboardBuffer+0x350>)
    26da:	4b49      	ldr	r3, [pc, #292]	; (2800 <printKeyboardBuffer+0x348>)
    26dc:	4698      	mov	r8, r3
    26de:	8819      	ldrh	r1, [r3, #0]
    26e0:	004b      	lsls	r3, r1, #1
    26e2:	185b      	adds	r3, r3, r1
    26e4:	00db      	lsls	r3, r3, #3
    26e6:	18eb      	adds	r3, r5, r3
    26e8:	5c98      	ldrb	r0, [r3, r2]
    26ea:	4b49      	ldr	r3, [pc, #292]	; (2810 <printKeyboardBuffer+0x358>)
    26ec:	469a      	mov	sl, r3
    26ee:	4798      	blx	r3
					yCharPos++;
    26f0:	4a44      	ldr	r2, [pc, #272]	; (2804 <printKeyboardBuffer+0x34c>)
    26f2:	8813      	ldrh	r3, [r2, #0]
    26f4:	3301      	adds	r3, #1
    26f6:	b29b      	uxth	r3, r3
    26f8:	8013      	strh	r3, [r2, #0]
					xCharPos = 0;
    26fa:	2200      	movs	r2, #0
    26fc:	4641      	mov	r1, r8
    26fe:	800a      	strh	r2, [r1, #0]
					drawChar(consoleDisplay[xCharPos][yCharPos]);
    2700:	5ce8      	ldrb	r0, [r5, r3]
    2702:	47d0      	blx	sl
					blinkCursor();
    2704:	4b43      	ldr	r3, [pc, #268]	; (2814 <printKeyboardBuffer+0x35c>)
    2706:	4798      	blx	r3
					printf("\r");
    2708:	200d      	movs	r0, #13
    270a:	4b40      	ldr	r3, [pc, #256]	; (280c <printKeyboardBuffer+0x354>)
    270c:	4798      	blx	r3
    270e:	e706      	b.n	251e <printKeyboardBuffer+0x66>
					drawChar(consoleDisplay[xCharPos][yCharPos]);
    2710:	4d3b      	ldr	r5, [pc, #236]	; (2800 <printKeyboardBuffer+0x348>)
    2712:	882a      	ldrh	r2, [r5, #0]
    2714:	0053      	lsls	r3, r2, #1
    2716:	189b      	adds	r3, r3, r2
    2718:	00db      	lsls	r3, r3, #3
    271a:	4a3b      	ldr	r2, [pc, #236]	; (2808 <printKeyboardBuffer+0x350>)
    271c:	18d3      	adds	r3, r2, r3
    271e:	7dd8      	ldrb	r0, [r3, #23]
    2720:	4b3b      	ldr	r3, [pc, #236]	; (2810 <printKeyboardBuffer+0x358>)
    2722:	4698      	mov	r8, r3
    2724:	4798      	blx	r3
					newLine();
    2726:	4b3c      	ldr	r3, [pc, #240]	; (2818 <printKeyboardBuffer+0x360>)
    2728:	4798      	blx	r3
					xCharPos = 0;
    272a:	2300      	movs	r3, #0
    272c:	802b      	strh	r3, [r5, #0]
					drawChar(0x00);
    272e:	2000      	movs	r0, #0
    2730:	47c0      	blx	r8
					blinkCursor();
    2732:	4b38      	ldr	r3, [pc, #224]	; (2814 <printKeyboardBuffer+0x35c>)
    2734:	4798      	blx	r3
					printf("\r");
    2736:	200d      	movs	r0, #13
    2738:	4b34      	ldr	r3, [pc, #208]	; (280c <printKeyboardBuffer+0x354>)
    273a:	4798      	blx	r3
    273c:	e6ef      	b.n	251e <printKeyboardBuffer+0x66>
				if(yCharPos == 23)
    273e:	4b31      	ldr	r3, [pc, #196]	; (2804 <printKeyboardBuffer+0x34c>)
    2740:	881a      	ldrh	r2, [r3, #0]
    2742:	2a17      	cmp	r2, #23
    2744:	d01e      	beq.n	2784 <printKeyboardBuffer+0x2cc>
					drawChar(consoleDisplay[xCharPos][yCharPos]);
    2746:	4d30      	ldr	r5, [pc, #192]	; (2808 <printKeyboardBuffer+0x350>)
    2748:	4b2d      	ldr	r3, [pc, #180]	; (2800 <printKeyboardBuffer+0x348>)
    274a:	4698      	mov	r8, r3
    274c:	8819      	ldrh	r1, [r3, #0]
    274e:	004b      	lsls	r3, r1, #1
    2750:	185b      	adds	r3, r3, r1
    2752:	00db      	lsls	r3, r3, #3
    2754:	18eb      	adds	r3, r5, r3
    2756:	5c98      	ldrb	r0, [r3, r2]
    2758:	4b2d      	ldr	r3, [pc, #180]	; (2810 <printKeyboardBuffer+0x358>)
    275a:	469a      	mov	sl, r3
    275c:	4798      	blx	r3
					yCharPos++;
    275e:	4a29      	ldr	r2, [pc, #164]	; (2804 <printKeyboardBuffer+0x34c>)
    2760:	8813      	ldrh	r3, [r2, #0]
    2762:	3301      	adds	r3, #1
    2764:	b29b      	uxth	r3, r3
    2766:	8013      	strh	r3, [r2, #0]
					drawChar(consoleDisplay[xCharPos][yCharPos]);
    2768:	4642      	mov	r2, r8
    276a:	8811      	ldrh	r1, [r2, #0]
    276c:	004a      	lsls	r2, r1, #1
    276e:	1852      	adds	r2, r2, r1
    2770:	00d2      	lsls	r2, r2, #3
    2772:	18ad      	adds	r5, r5, r2
    2774:	5ce8      	ldrb	r0, [r5, r3]
    2776:	47d0      	blx	sl
					blinkCursor();
    2778:	4b26      	ldr	r3, [pc, #152]	; (2814 <printKeyboardBuffer+0x35c>)
    277a:	4798      	blx	r3
					printf("\n");
    277c:	200a      	movs	r0, #10
    277e:	4b23      	ldr	r3, [pc, #140]	; (280c <printKeyboardBuffer+0x354>)
    2780:	4798      	blx	r3
    2782:	e6cc      	b.n	251e <printKeyboardBuffer+0x66>
					drawChar(consoleDisplay[xCharPos][yCharPos]);
    2784:	4b1e      	ldr	r3, [pc, #120]	; (2800 <printKeyboardBuffer+0x348>)
    2786:	881a      	ldrh	r2, [r3, #0]
    2788:	0053      	lsls	r3, r2, #1
    278a:	189b      	adds	r3, r3, r2
    278c:	00db      	lsls	r3, r3, #3
    278e:	4a1e      	ldr	r2, [pc, #120]	; (2808 <printKeyboardBuffer+0x350>)
    2790:	18d3      	adds	r3, r2, r3
    2792:	7dd8      	ldrb	r0, [r3, #23]
    2794:	4d1e      	ldr	r5, [pc, #120]	; (2810 <printKeyboardBuffer+0x358>)
    2796:	47a8      	blx	r5
					newLine();
    2798:	4b1f      	ldr	r3, [pc, #124]	; (2818 <printKeyboardBuffer+0x360>)
    279a:	4798      	blx	r3
					drawChar(0x00);
    279c:	2000      	movs	r0, #0
    279e:	47a8      	blx	r5
					blinkCursor();
    27a0:	4b1c      	ldr	r3, [pc, #112]	; (2814 <printKeyboardBuffer+0x35c>)
    27a2:	4798      	blx	r3
					printf("\n");
    27a4:	200a      	movs	r0, #10
    27a6:	4b19      	ldr	r3, [pc, #100]	; (280c <printKeyboardBuffer+0x354>)
    27a8:	4798      	blx	r3
    27aa:	e6b8      	b.n	251e <printKeyboardBuffer+0x66>
				drawChar(consoleDisplay[xCharPos][yCharPos]);
    27ac:	4d16      	ldr	r5, [pc, #88]	; (2808 <printKeyboardBuffer+0x350>)
    27ae:	4b14      	ldr	r3, [pc, #80]	; (2800 <printKeyboardBuffer+0x348>)
    27b0:	4698      	mov	r8, r3
    27b2:	8819      	ldrh	r1, [r3, #0]
    27b4:	4b13      	ldr	r3, [pc, #76]	; (2804 <printKeyboardBuffer+0x34c>)
    27b6:	469a      	mov	sl, r3
    27b8:	881a      	ldrh	r2, [r3, #0]
    27ba:	004b      	lsls	r3, r1, #1
    27bc:	185b      	adds	r3, r3, r1
    27be:	00db      	lsls	r3, r3, #3
    27c0:	18eb      	adds	r3, r5, r3
    27c2:	5c98      	ldrb	r0, [r3, r2]
    27c4:	4b12      	ldr	r3, [pc, #72]	; (2810 <printKeyboardBuffer+0x358>)
    27c6:	4798      	blx	r3
				xCharPos--;
    27c8:	4643      	mov	r3, r8
    27ca:	881b      	ldrh	r3, [r3, #0]
    27cc:	3b01      	subs	r3, #1
    27ce:	b29b      	uxth	r3, r3
    27d0:	4642      	mov	r2, r8
    27d2:	8013      	strh	r3, [r2, #0]
				tempCharacter = consoleDisplay[xCharPos][yCharPos];
    27d4:	4652      	mov	r2, sl
    27d6:	8811      	ldrh	r1, [r2, #0]
    27d8:	005a      	lsls	r2, r3, #1
    27da:	18d3      	adds	r3, r2, r3
    27dc:	00db      	lsls	r3, r3, #3
    27de:	18eb      	adds	r3, r5, r3
				drawChar(tempCharacter);
    27e0:	5c58      	ldrb	r0, [r3, r1]
    27e2:	4b0b      	ldr	r3, [pc, #44]	; (2810 <printKeyboardBuffer+0x358>)
    27e4:	4798      	blx	r3
				blinkCursor();
    27e6:	4b0b      	ldr	r3, [pc, #44]	; (2814 <printKeyboardBuffer+0x35c>)
    27e8:	4798      	blx	r3
    27ea:	e698      	b.n	251e <printKeyboardBuffer+0x66>
    27ec:	000068f4 	.word	0x000068f4
    27f0:	00003835 	.word	0x00003835
    27f4:	20000028 	.word	0x20000028
    27f8:	20000014 	.word	0x20000014
    27fc:	0000248d 	.word	0x0000248d
    2800:	20000298 	.word	0x20000298
    2804:	2000029a 	.word	0x2000029a
    2808:	20000310 	.word	0x20000310
    280c:	000039dd 	.word	0x000039dd
    2810:	00002025 	.word	0x00002025
    2814:	000022bd 	.word	0x000022bd
    2818:	0000210d 	.word	0x0000210d
					consoleDisplay[xCharPos][yCharPos] = noCase[scanCodeBuffer[i]];
    281c:	ab02      	add	r3, sp, #8
    281e:	2248      	movs	r2, #72	; 0x48
    2820:	189b      	adds	r3, r3, r2
    2822:	5d58      	ldrb	r0, [r3, r5]
    2824:	4b1e      	ldr	r3, [pc, #120]	; (28a0 <printKeyboardBuffer+0x3e8>)
    2826:	8819      	ldrh	r1, [r3, #0]
    2828:	4b1e      	ldr	r3, [pc, #120]	; (28a4 <printKeyboardBuffer+0x3ec>)
    282a:	4698      	mov	r8, r3
    282c:	881a      	ldrh	r2, [r3, #0]
    282e:	004b      	lsls	r3, r1, #1
    2830:	185b      	adds	r3, r3, r1
    2832:	00db      	lsls	r3, r3, #3
    2834:	491c      	ldr	r1, [pc, #112]	; (28a8 <printKeyboardBuffer+0x3f0>)
    2836:	468c      	mov	ip, r1
    2838:	4463      	add	r3, ip
    283a:	5498      	strb	r0, [r3, r2]
					printf("%c",consoleDisplay[xCharPos][yCharPos]);
    283c:	4b1b      	ldr	r3, [pc, #108]	; (28ac <printKeyboardBuffer+0x3f4>)
    283e:	4798      	blx	r3
					drawChar(noCase[scanCodeBuffer[i]]);
    2840:	9b00      	ldr	r3, [sp, #0]
    2842:	781b      	ldrb	r3, [r3, #0]
    2844:	aa02      	add	r2, sp, #8
    2846:	2148      	movs	r1, #72	; 0x48
    2848:	1852      	adds	r2, r2, r1
    284a:	5cd0      	ldrb	r0, [r2, r3]
    284c:	4d18      	ldr	r5, [pc, #96]	; (28b0 <printKeyboardBuffer+0x3f8>)
    284e:	47a8      	blx	r5
					xCharPos++;
    2850:	4b13      	ldr	r3, [pc, #76]	; (28a0 <printKeyboardBuffer+0x3e8>)
    2852:	881b      	ldrh	r3, [r3, #0]
    2854:	3301      	adds	r3, #1
    2856:	b29a      	uxth	r2, r3
    2858:	4b11      	ldr	r3, [pc, #68]	; (28a0 <printKeyboardBuffer+0x3e8>)
    285a:	801a      	strh	r2, [r3, #0]
					drawChar(consoleDisplay[xCharPos][yCharPos]);
    285c:	4643      	mov	r3, r8
    285e:	8819      	ldrh	r1, [r3, #0]
    2860:	0053      	lsls	r3, r2, #1
    2862:	189b      	adds	r3, r3, r2
    2864:	00db      	lsls	r3, r3, #3
    2866:	4a10      	ldr	r2, [pc, #64]	; (28a8 <printKeyboardBuffer+0x3f0>)
    2868:	4694      	mov	ip, r2
    286a:	4463      	add	r3, ip
    286c:	5c58      	ldrb	r0, [r3, r1]
    286e:	47a8      	blx	r5
					if(xCharPos > 79)
    2870:	4b0b      	ldr	r3, [pc, #44]	; (28a0 <printKeyboardBuffer+0x3e8>)
    2872:	881b      	ldrh	r3, [r3, #0]
    2874:	2b4f      	cmp	r3, #79	; 0x4f
    2876:	d902      	bls.n	287e <printKeyboardBuffer+0x3c6>
						xCharPos--;
    2878:	3b01      	subs	r3, #1
    287a:	4a09      	ldr	r2, [pc, #36]	; (28a0 <printKeyboardBuffer+0x3e8>)
    287c:	8013      	strh	r3, [r2, #0]
					blinkCursor();
    287e:	4b0d      	ldr	r3, [pc, #52]	; (28b4 <printKeyboardBuffer+0x3fc>)
    2880:	4798      	blx	r3
    2882:	e64c      	b.n	251e <printKeyboardBuffer+0x66>
    2884:	464f      	mov	r7, r9
		scanCodeBuffer[i] = 0xFF;
    2886:	23ff      	movs	r3, #255	; 0xff
    2888:	703b      	strb	r3, [r7, #0]
    288a:	3701      	adds	r7, #1
	for(int i = 0 ; i < 20 ; i++)
    288c:	42bc      	cmp	r4, r7
    288e:	d1fb      	bne.n	2888 <printKeyboardBuffer+0x3d0>
}
    2890:	b027      	add	sp, #156	; 0x9c
    2892:	bc3c      	pop	{r2, r3, r4, r5}
    2894:	4690      	mov	r8, r2
    2896:	4699      	mov	r9, r3
    2898:	46a2      	mov	sl, r4
    289a:	46ab      	mov	fp, r5
    289c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    289e:	46c0      	nop			; (mov r8, r8)
    28a0:	20000298 	.word	0x20000298
    28a4:	2000029a 	.word	0x2000029a
    28a8:	20000310 	.word	0x20000310
    28ac:	000039dd 	.word	0x000039dd
    28b0:	00002025 	.word	0x00002025
    28b4:	000022bd 	.word	0x000022bd

000028b8 <removeFromKeyDown>:

void removeFromKeyDown(int scancode)
{
    28b8:	b510      	push	{r4, lr}
    28ba:	4b07      	ldr	r3, [pc, #28]	; (28d8 <removeFromKeyDown+0x20>)
    28bc:	0019      	movs	r1, r3
    28be:	3114      	adds	r1, #20
	for(int i = 0 ; i < 20 ; i++)
	{
		if(keyDownBuffer[i] == scancode)
		{
			keyDownBuffer[i] = 0xFF;
    28c0:	24ff      	movs	r4, #255	; 0xff
    28c2:	e002      	b.n	28ca <removeFromKeyDown+0x12>
    28c4:	3301      	adds	r3, #1
	for(int i = 0 ; i < 20 ; i++)
    28c6:	428b      	cmp	r3, r1
    28c8:	d004      	beq.n	28d4 <removeFromKeyDown+0x1c>
		if(keyDownBuffer[i] == scancode)
    28ca:	781a      	ldrb	r2, [r3, #0]
    28cc:	4282      	cmp	r2, r0
    28ce:	d1f9      	bne.n	28c4 <removeFromKeyDown+0xc>
			keyDownBuffer[i] = 0xFF;
    28d0:	701c      	strb	r4, [r3, #0]
    28d2:	e7f7      	b.n	28c4 <removeFromKeyDown+0xc>
		}
	}
    28d4:	bd10      	pop	{r4, pc}
    28d6:	46c0      	nop			; (mov r8, r8)
    28d8:	20000014 	.word	0x20000014

000028dc <readKeyboard>:
{
    28dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    28de:	46de      	mov	lr, fp
    28e0:	4657      	mov	r7, sl
    28e2:	464e      	mov	r6, r9
    28e4:	4645      	mov	r5, r8
    28e6:	b5e0      	push	{r5, r6, r7, lr}
    28e8:	b083      	sub	sp, #12
    28ea:	4e6d      	ldr	r6, [pc, #436]	; (2aa0 <readKeyboard+0x1c4>)
    28ec:	0031      	movs	r1, r6
    28ee:	3119      	adds	r1, #25
    28f0:	31ff      	adds	r1, #255	; 0xff
    28f2:	0033      	movs	r3, r6
		scanCodes[i] = 0xFF;
    28f4:	22ff      	movs	r2, #255	; 0xff
    28f6:	c304      	stmia	r3!, {r2}
	for(i = 0 ; i < 70 ; i++)
    28f8:	428b      	cmp	r3, r1
    28fa:	d1fc      	bne.n	28f6 <readKeyboard+0x1a>
	PORT->Group[0].WRCONFIG.bit.DRVSTR = 1;
    28fc:	4a69      	ldr	r2, [pc, #420]	; (2aa4 <readKeyboard+0x1c8>)
    28fe:	6a91      	ldr	r1, [r2, #40]	; 0x28
    2900:	2380      	movs	r3, #128	; 0x80
    2902:	03db      	lsls	r3, r3, #15
    2904:	430b      	orrs	r3, r1
    2906:	6293      	str	r3, [r2, #40]	; 0x28
    2908:	4c67      	ldr	r4, [pc, #412]	; (2aa8 <readKeyboard+0x1cc>)
    290a:	341c      	adds	r4, #28
    290c:	4b66      	ldr	r3, [pc, #408]	; (2aa8 <readKeyboard+0x1cc>)
		REG_PORT_DIRSET0 = kb_col[i];
    290e:	4867      	ldr	r0, [pc, #412]	; (2aac <readKeyboard+0x1d0>)
		REG_PORT_OUTCLR0 = kb_col[i];
    2910:	4967      	ldr	r1, [pc, #412]	; (2ab0 <readKeyboard+0x1d4>)
		REG_PORT_DIRSET0 = kb_col[i];
    2912:	681a      	ldr	r2, [r3, #0]
    2914:	6002      	str	r2, [r0, #0]
		REG_PORT_OUTCLR0 = kb_col[i];
    2916:	cb04      	ldmia	r3!, {r2}
    2918:	600a      	str	r2, [r1, #0]
	for (i = 0; i < NUM_COL; i++) {
    291a:	42a3      	cmp	r3, r4
    291c:	d1f9      	bne.n	2912 <readKeyboard+0x36>
    291e:	2200      	movs	r2, #0
		REG_PORT_DIRCLR0 = kb_row[i];
    2920:	4b64      	ldr	r3, [pc, #400]	; (2ab4 <readKeyboard+0x1d8>)
    2922:	469c      	mov	ip, r3
    2924:	4f64      	ldr	r7, [pc, #400]	; (2ab8 <readKeyboard+0x1dc>)
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.PULLEN = 1;
    2926:	4d65      	ldr	r5, [pc, #404]	; (2abc <readKeyboard+0x1e0>)
    2928:	2404      	movs	r4, #4
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.INEN = 1;
    292a:	2002      	movs	r0, #2
		REG_PORT_DIRCLR0 = kb_row[i];
    292c:	4663      	mov	r3, ip
    292e:	58d3      	ldr	r3, [r2, r3]
    2930:	603b      	str	r3, [r7, #0]
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.PULLEN = 1;
    2932:	5953      	ldr	r3, [r2, r5]
    2934:	4962      	ldr	r1, [pc, #392]	; (2ac0 <readKeyboard+0x1e4>)
    2936:	4688      	mov	r8, r1
    2938:	4443      	add	r3, r8
    293a:	7819      	ldrb	r1, [r3, #0]
    293c:	4321      	orrs	r1, r4
    293e:	7019      	strb	r1, [r3, #0]
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.INEN = 1;
    2940:	7819      	ldrb	r1, [r3, #0]
    2942:	4301      	orrs	r1, r0
    2944:	7019      	strb	r1, [r3, #0]
    2946:	3204      	adds	r2, #4
	for (i = 0; i < NUM_ROW; i++) {
    2948:	2a28      	cmp	r2, #40	; 0x28
    294a:	d1ef      	bne.n	292c <readKeyboard+0x50>
    294c:	4b56      	ldr	r3, [pc, #344]	; (2aa8 <readKeyboard+0x1cc>)
    294e:	4699      	mov	r9, r3
    2950:	2300      	movs	r3, #0
    2952:	4698      	mov	r8, r3
    2954:	2200      	movs	r2, #0
		REG_PORT_OUTSET0 = kb_col[i];
    2956:	4b5b      	ldr	r3, [pc, #364]	; (2ac4 <readKeyboard+0x1e8>)
    2958:	469b      	mov	fp, r3
			if((PORT->Group[0].IN.reg & kb_row[j]) != 0) {
    295a:	4d52      	ldr	r5, [pc, #328]	; (2aa4 <readKeyboard+0x1c8>)
				scanCodes[scanCodeIndex] = (i * NUM_ROW) + j;
    295c:	4b50      	ldr	r3, [pc, #320]	; (2aa0 <readKeyboard+0x1c4>)
    295e:	469c      	mov	ip, r3
		REG_PORT_OUTCLR0 = kb_col[i];
    2960:	4b53      	ldr	r3, [pc, #332]	; (2ab0 <readKeyboard+0x1d4>)
    2962:	469a      	mov	sl, r3
    2964:	9601      	str	r6, [sp, #4]
    2966:	464e      	mov	r6, r9
    2968:	4647      	mov	r7, r8
    296a:	e015      	b.n	2998 <readKeyboard+0xbc>
    296c:	3304      	adds	r3, #4
    296e:	3101      	adds	r1, #1
		for (j = 0; j < NUM_ROW; j++) {	
    2970:	42a3      	cmp	r3, r4
    2972:	d008      	beq.n	2986 <readKeyboard+0xaa>
			if((PORT->Group[0].IN.reg & kb_row[j]) != 0) {
    2974:	6a28      	ldr	r0, [r5, #32]
    2976:	681e      	ldr	r6, [r3, #0]
    2978:	4206      	tst	r6, r0
    297a:	d0f7      	beq.n	296c <readKeyboard+0x90>
				scanCodes[scanCodeIndex] = (i * NUM_ROW) + j;
    297c:	0090      	lsls	r0, r2, #2
    297e:	4666      	mov	r6, ip
    2980:	5181      	str	r1, [r0, r6]
				scanCodeIndex++;
    2982:	3201      	adds	r2, #1
    2984:	e7f2      	b.n	296c <readKeyboard+0x90>
    2986:	9e00      	ldr	r6, [sp, #0]
		REG_PORT_OUTCLR0 = kb_col[i];
    2988:	4649      	mov	r1, r9
    298a:	6809      	ldr	r1, [r1, #0]
    298c:	4650      	mov	r0, sl
    298e:	6001      	str	r1, [r0, #0]
    2990:	3604      	adds	r6, #4
    2992:	370a      	adds	r7, #10
	for (i = 0; i < NUM_COL; i++) {
    2994:	2f46      	cmp	r7, #70	; 0x46
    2996:	d00a      	beq.n	29ae <readKeyboard+0xd2>
    2998:	46b1      	mov	r9, r6
		REG_PORT_OUTSET0 = kb_col[i];
    299a:	465b      	mov	r3, fp
    299c:	6831      	ldr	r1, [r6, #0]
    299e:	6019      	str	r1, [r3, #0]
    29a0:	4b44      	ldr	r3, [pc, #272]	; (2ab4 <readKeyboard+0x1d8>)
    29a2:	4698      	mov	r8, r3
    29a4:	001c      	movs	r4, r3
    29a6:	3428      	adds	r4, #40	; 0x28
    29a8:	0039      	movs	r1, r7
    29aa:	9600      	str	r6, [sp, #0]
    29ac:	e7e2      	b.n	2974 <readKeyboard+0x98>
    29ae:	4647      	mov	r7, r8
    29b0:	9e01      	ldr	r6, [sp, #4]
    29b2:	4641      	mov	r1, r8
		REG_PORT_DIRSET0 = kb_row[i];
    29b4:	4d3d      	ldr	r5, [pc, #244]	; (2aac <readKeyboard+0x1d0>)
		REG_PORT_OUTCLR0 = kb_row[i];
    29b6:	4c3e      	ldr	r4, [pc, #248]	; (2ab0 <readKeyboard+0x1d4>)
		REG_PORT_DIRSET0 = kb_row[i];
    29b8:	6808      	ldr	r0, [r1, #0]
    29ba:	6028      	str	r0, [r5, #0]
		REG_PORT_OUTCLR0 = kb_row[i];
    29bc:	c901      	ldmia	r1!, {r0}
    29be:	6020      	str	r0, [r4, #0]
	for (i = 0; i < NUM_ROW; i++) {
    29c0:	4299      	cmp	r1, r3
    29c2:	d1f9      	bne.n	29b8 <readKeyboard+0xdc>
    29c4:	2100      	movs	r1, #0
		REG_PORT_DIRCLR0 = kb_col[i];
    29c6:	4b38      	ldr	r3, [pc, #224]	; (2aa8 <readKeyboard+0x1cc>)
    29c8:	4699      	mov	r9, r3
    29ca:	4b3b      	ldr	r3, [pc, #236]	; (2ab8 <readKeyboard+0x1dc>)
    29cc:	4698      	mov	r8, r3
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.PULLEN = 1;
    29ce:	4b3e      	ldr	r3, [pc, #248]	; (2ac8 <readKeyboard+0x1ec>)
    29d0:	469c      	mov	ip, r3
    29d2:	2504      	movs	r5, #4
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.INEN = 1;
    29d4:	2402      	movs	r4, #2
		REG_PORT_DIRCLR0 = kb_col[i];
    29d6:	4643      	mov	r3, r8
    29d8:	4648      	mov	r0, r9
    29da:	5808      	ldr	r0, [r1, r0]
    29dc:	6018      	str	r0, [r3, #0]
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.PULLEN = 1;
    29de:	4663      	mov	r3, ip
    29e0:	58cb      	ldr	r3, [r1, r3]
    29e2:	4837      	ldr	r0, [pc, #220]	; (2ac0 <readKeyboard+0x1e4>)
    29e4:	4682      	mov	sl, r0
    29e6:	4453      	add	r3, sl
    29e8:	7818      	ldrb	r0, [r3, #0]
    29ea:	4328      	orrs	r0, r5
    29ec:	7018      	strb	r0, [r3, #0]
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.INEN = 1;
    29ee:	7818      	ldrb	r0, [r3, #0]
    29f0:	4320      	orrs	r0, r4
    29f2:	7018      	strb	r0, [r3, #0]
    29f4:	3104      	adds	r1, #4
	for (i = 0; i < NUM_COL; i++) {
    29f6:	291c      	cmp	r1, #28
    29f8:	d1ed      	bne.n	29d6 <readKeyboard+0xfa>
    29fa:	2300      	movs	r3, #0
    29fc:	469c      	mov	ip, r3
		REG_PORT_OUTSET0 = kb_row[i];
    29fe:	4b31      	ldr	r3, [pc, #196]	; (2ac4 <readKeyboard+0x1e8>)
    2a00:	469b      	mov	fp, r3
			if((PORT->Group[0].IN.reg & kb_col[j]) != 0)
    2a02:	4d28      	ldr	r5, [pc, #160]	; (2aa4 <readKeyboard+0x1c8>)
				scanCodes[scanCodeIndex] = (j * NUM_ROW) + i;
    2a04:	4b26      	ldr	r3, [pc, #152]	; (2aa0 <readKeyboard+0x1c4>)
    2a06:	4698      	mov	r8, r3
		REG_PORT_OUTCLR0 = kb_row[i];
    2a08:	4b29      	ldr	r3, [pc, #164]	; (2ab0 <readKeyboard+0x1d4>)
    2a0a:	469a      	mov	sl, r3
    2a0c:	46b1      	mov	r9, r6
    2a0e:	003e      	movs	r6, r7
    2a10:	4667      	mov	r7, ip
    2a12:	e015      	b.n	2a40 <readKeyboard+0x164>
    2a14:	3104      	adds	r1, #4
    2a16:	330a      	adds	r3, #10
		for (j = 0; j < NUM_COL; j++) {
    2a18:	42a3      	cmp	r3, r4
    2a1a:	d008      	beq.n	2a2e <readKeyboard+0x152>
			if((PORT->Group[0].IN.reg & kb_col[j]) != 0)
    2a1c:	6a28      	ldr	r0, [r5, #32]
    2a1e:	680e      	ldr	r6, [r1, #0]
    2a20:	4206      	tst	r6, r0
    2a22:	d0f7      	beq.n	2a14 <readKeyboard+0x138>
				scanCodes[scanCodeIndex] = (j * NUM_ROW) + i;
    2a24:	0090      	lsls	r0, r2, #2
    2a26:	4646      	mov	r6, r8
    2a28:	5183      	str	r3, [r0, r6]
				scanCodeIndex++;
    2a2a:	3201      	adds	r2, #1
    2a2c:	e7f2      	b.n	2a14 <readKeyboard+0x138>
    2a2e:	9e00      	ldr	r6, [sp, #0]
		REG_PORT_OUTCLR0 = kb_row[i];
    2a30:	4663      	mov	r3, ip
    2a32:	681b      	ldr	r3, [r3, #0]
    2a34:	4651      	mov	r1, sl
    2a36:	600b      	str	r3, [r1, #0]
	for (i = 0; i < NUM_ROW; i++) {
    2a38:	3701      	adds	r7, #1
    2a3a:	3604      	adds	r6, #4
    2a3c:	2f0a      	cmp	r7, #10
    2a3e:	d009      	beq.n	2a54 <readKeyboard+0x178>
    2a40:	46b4      	mov	ip, r6
		REG_PORT_OUTSET0 = kb_row[i];
    2a42:	465b      	mov	r3, fp
    2a44:	6831      	ldr	r1, [r6, #0]
    2a46:	6019      	str	r1, [r3, #0]
    2a48:	003b      	movs	r3, r7
    2a4a:	003c      	movs	r4, r7
    2a4c:	3446      	adds	r4, #70	; 0x46
    2a4e:	4916      	ldr	r1, [pc, #88]	; (2aa8 <readKeyboard+0x1cc>)
    2a50:	9600      	str	r6, [sp, #0]
    2a52:	e7e3      	b.n	2a1c <readKeyboard+0x140>
    2a54:	464e      	mov	r6, r9
	for(i = 0 ; i < scanCodeIndex ; i++)
    2a56:	2a00      	cmp	r2, #0
    2a58:	dd08      	ble.n	2a6c <readKeyboard+0x190>
    2a5a:	4b1c      	ldr	r3, [pc, #112]	; (2acc <readKeyboard+0x1f0>)
    2a5c:	0092      	lsls	r2, r2, #2
    2a5e:	4910      	ldr	r1, [pc, #64]	; (2aa0 <readKeyboard+0x1c4>)
    2a60:	188a      	adds	r2, r1, r2
		scanCodeBuffer[i] = scanCodes[i];	
    2a62:	ce02      	ldmia	r6!, {r1}
    2a64:	7019      	strb	r1, [r3, #0]
    2a66:	3301      	adds	r3, #1
	for(i = 0 ; i < scanCodeIndex ; i++)
    2a68:	42b2      	cmp	r2, r6
    2a6a:	d1fa      	bne.n	2a62 <readKeyboard+0x186>
		REG_PORT_OUTSET0 = kb_row[i];
    2a6c:	2400      	movs	r4, #0
		if(keyDown(i) && !scanCodesContains(i))
    2a6e:	4d18      	ldr	r5, [pc, #96]	; (2ad0 <readKeyboard+0x1f4>)
    2a70:	4e18      	ldr	r6, [pc, #96]	; (2ad4 <readKeyboard+0x1f8>)
			removeFromKeyDown(i);
    2a72:	4f19      	ldr	r7, [pc, #100]	; (2ad8 <readKeyboard+0x1fc>)
    2a74:	e002      	b.n	2a7c <readKeyboard+0x1a0>
	for(i = 0; i < 70; i++)
    2a76:	3401      	adds	r4, #1
    2a78:	2c46      	cmp	r4, #70	; 0x46
    2a7a:	d00a      	beq.n	2a92 <readKeyboard+0x1b6>
		if(keyDown(i) && !scanCodesContains(i))
    2a7c:	0020      	movs	r0, r4
    2a7e:	47a8      	blx	r5
    2a80:	2800      	cmp	r0, #0
    2a82:	d0f8      	beq.n	2a76 <readKeyboard+0x19a>
    2a84:	0020      	movs	r0, r4
    2a86:	47b0      	blx	r6
    2a88:	2800      	cmp	r0, #0
    2a8a:	d1f4      	bne.n	2a76 <readKeyboard+0x19a>
			removeFromKeyDown(i);
    2a8c:	0020      	movs	r0, r4
    2a8e:	47b8      	blx	r7
    2a90:	e7f1      	b.n	2a76 <readKeyboard+0x19a>
}
    2a92:	b003      	add	sp, #12
    2a94:	bc3c      	pop	{r2, r3, r4, r5}
    2a96:	4690      	mov	r8, r2
    2a98:	4699      	mov	r9, r3
    2a9a:	46a2      	mov	sl, r4
    2a9c:	46ab      	mov	fp, r5
    2a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2aa0:	2000003c 	.word	0x2000003c
    2aa4:	41004400 	.word	0x41004400
    2aa8:	00006984 	.word	0x00006984
    2aac:	41004408 	.word	0x41004408
    2ab0:	41004414 	.word	0x41004414
    2ab4:	000069bc 	.word	0x000069bc
    2ab8:	41004404 	.word	0x41004404
    2abc:	000069e4 	.word	0x000069e4
    2ac0:	41004440 	.word	0x41004440
    2ac4:	41004418 	.word	0x41004418
    2ac8:	000069a0 	.word	0x000069a0
    2acc:	20000028 	.word	0x20000028
    2ad0:	0000248d 	.word	0x0000248d
    2ad4:	00002461 	.word	0x00002461
    2ad8:	000028b9 	.word	0x000028b9

00002adc <setColorRGB>:

uint16_t fore_Color_High, fore_Color_Low;
uint16_t back_Color_High, back_Color_Low;

void setColorRGB(uint8_t r, uint8_t g, uint8_t b)
{
    2adc:	b510      	push	{r4, lr}
	fore_Color_High = ((r&248)|g>>5);
    2ade:	094b      	lsrs	r3, r1, #5
    2ae0:	2407      	movs	r4, #7
    2ae2:	43a0      	bics	r0, r4
    2ae4:	4318      	orrs	r0, r3
    2ae6:	4b05      	ldr	r3, [pc, #20]	; (2afc <setColorRGB+0x20>)
    2ae8:	8018      	strh	r0, [r3, #0]
	fore_Color_Low = ((g&28)<<3|b>>3);
    2aea:	00c9      	lsls	r1, r1, #3
    2aec:	23e0      	movs	r3, #224	; 0xe0
    2aee:	4019      	ands	r1, r3
    2af0:	08d2      	lsrs	r2, r2, #3
    2af2:	430a      	orrs	r2, r1
    2af4:	4b02      	ldr	r3, [pc, #8]	; (2b00 <setColorRGB+0x24>)
    2af6:	801a      	strh	r2, [r3, #0]
}
    2af8:	bd10      	pop	{r4, pc}
    2afa:	46c0      	nop			; (mov r8, r8)
    2afc:	20000a92 	.word	0x20000a92
    2b00:	20000a94 	.word	0x20000a94

00002b04 <setBackColorRGB>:
	fore_Color_Low = (color & 0xFF);
}

void setBackColorRGB(unsigned char r,
unsigned char g, unsigned char b)
{
    2b04:	b510      	push	{r4, lr}
	back_Color_High = ((r&248)|g>>5);
    2b06:	094b      	lsrs	r3, r1, #5
    2b08:	2407      	movs	r4, #7
    2b0a:	43a0      	bics	r0, r4
    2b0c:	4318      	orrs	r0, r3
    2b0e:	4b05      	ldr	r3, [pc, #20]	; (2b24 <setBackColorRGB+0x20>)
    2b10:	8018      	strh	r0, [r3, #0]
	back_Color_Low = ((g&28)<<3|b>>3);
    2b12:	00c9      	lsls	r1, r1, #3
    2b14:	23e0      	movs	r3, #224	; 0xe0
    2b16:	4019      	ands	r1, r3
    2b18:	08d2      	lsrs	r2, r2, #3
    2b1a:	430a      	orrs	r2, r1
    2b1c:	4b02      	ldr	r3, [pc, #8]	; (2b28 <setBackColorRGB+0x24>)
    2b1e:	801a      	strh	r2, [r3, #0]
}
    2b20:	bd10      	pop	{r4, pc}
    2b22:	46c0      	nop			; (mov r8, r8)
    2b24:	20000a96 	.word	0x20000a96
    2b28:	20000a90 	.word	0x20000a90

00002b2c <LCD_Fast_Fill>:
	(((long)(x2-x1)+1)*((long)(y2-y1)+1)));
	REG_PORT_OUTSET1 = LCD_CS;
}

void LCD_Fast_Fill(int ch, int cl, long pix)
{
    2b2c:	b570      	push	{r4, r5, r6, lr}
	int blocks;
	
	
	REG_PORT_OUTCLR1 = 0x0000ffff;
    2b2e:	4c19      	ldr	r4, [pc, #100]	; (2b94 <LCD_Fast_Fill+0x68>)
    2b30:	4b19      	ldr	r3, [pc, #100]	; (2b98 <LCD_Fast_Fill+0x6c>)
    2b32:	601c      	str	r4, [r3, #0]
	REG_PORT_OUTSET1 = (ch << 8) | cl;
    2b34:	0200      	lsls	r0, r0, #8
    2b36:	4301      	orrs	r1, r0
    2b38:	4b18      	ldr	r3, [pc, #96]	; (2b9c <LCD_Fast_Fill+0x70>)
    2b3a:	6019      	str	r1, [r3, #0]

	blocks = pix/16;
    2b3c:	17d3      	asrs	r3, r2, #31
    2b3e:	260f      	movs	r6, #15
    2b40:	401e      	ands	r6, r3
    2b42:	18b6      	adds	r6, r6, r2
    2b44:	1136      	asrs	r6, r6, #4
	for (int i=0; i<blocks; i++)
    2b46:	2500      	movs	r5, #0
    2b48:	2e00      	cmp	r6, #0
    2b4a:	dd0c      	ble.n	2b66 <LCD_Fast_Fill+0x3a>
	{
		for (int j=0; j<16; j++)
		{
			REG_PORT_OUTCLR1 = LCD_WR;
    2b4c:	4c12      	ldr	r4, [pc, #72]	; (2b98 <LCD_Fast_Fill+0x6c>)
    2b4e:	2180      	movs	r1, #128	; 0x80
    2b50:	0289      	lsls	r1, r1, #10
			REG_PORT_OUTSET1 = LCD_WR;
    2b52:	4812      	ldr	r0, [pc, #72]	; (2b9c <LCD_Fast_Fill+0x70>)
{
    2b54:	2310      	movs	r3, #16
			REG_PORT_OUTCLR1 = LCD_WR;
    2b56:	6021      	str	r1, [r4, #0]
			REG_PORT_OUTSET1 = LCD_WR;
    2b58:	6001      	str	r1, [r0, #0]
    2b5a:	3b01      	subs	r3, #1
		for (int j=0; j<16; j++)
    2b5c:	2b00      	cmp	r3, #0
    2b5e:	d1fa      	bne.n	2b56 <LCD_Fast_Fill+0x2a>
	for (int i=0; i<blocks; i++)
    2b60:	3501      	adds	r5, #1
    2b62:	42ae      	cmp	r6, r5
    2b64:	d1f6      	bne.n	2b54 <LCD_Fast_Fill+0x28>
		}
	}
	
	if ((pix % 16) != 0)
    2b66:	0713      	lsls	r3, r2, #28
    2b68:	d013      	beq.n	2b92 <LCD_Fast_Fill+0x66>
	for (int i=0; i<(pix % 16)+1; i++)
    2b6a:	17d3      	asrs	r3, r2, #31
    2b6c:	0f1b      	lsrs	r3, r3, #28
    2b6e:	18d2      	adds	r2, r2, r3
    2b70:	210f      	movs	r1, #15
    2b72:	4011      	ands	r1, r2
    2b74:	1ac9      	subs	r1, r1, r3
    2b76:	1c4b      	adds	r3, r1, #1
    2b78:	2b00      	cmp	r3, #0
    2b7a:	dd0a      	ble.n	2b92 <LCD_Fast_Fill+0x66>
    2b7c:	0019      	movs	r1, r3
    2b7e:	2300      	movs	r3, #0
	{
		REG_PORT_OUTCLR1 = LCD_WR;
    2b80:	4c05      	ldr	r4, [pc, #20]	; (2b98 <LCD_Fast_Fill+0x6c>)
    2b82:	2280      	movs	r2, #128	; 0x80
    2b84:	0292      	lsls	r2, r2, #10
		REG_PORT_OUTSET1 = LCD_WR;
    2b86:	4805      	ldr	r0, [pc, #20]	; (2b9c <LCD_Fast_Fill+0x70>)
		REG_PORT_OUTCLR1 = LCD_WR;
    2b88:	6022      	str	r2, [r4, #0]
		REG_PORT_OUTSET1 = LCD_WR;
    2b8a:	6002      	str	r2, [r0, #0]
	for (int i=0; i<(pix % 16)+1; i++)
    2b8c:	3301      	adds	r3, #1
    2b8e:	4299      	cmp	r1, r3
    2b90:	d1fa      	bne.n	2b88 <LCD_Fast_Fill+0x5c>
	}
}
    2b92:	bd70      	pop	{r4, r5, r6, pc}
    2b94:	0000ffff 	.word	0x0000ffff
    2b98:	41004494 	.word	0x41004494
    2b9c:	41004498 	.word	0x41004498

00002ba0 <setXY>:
{
	setXY(0,0,display_X_size,display_Y_size);
}

void setXY(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
    2ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ba2:	b083      	sub	sp, #12
    2ba4:	0007      	movs	r7, r0
    2ba6:	9100      	str	r1, [sp, #0]
    2ba8:	0016      	movs	r6, r2
    2baa:	9301      	str	r3, [sp, #4]
	y1=display_Y_size-y1;
	y2=display_Y_size-y2;
	SwapUint16(y1, y2);
	*/
	
	LCD_Write_COM16(0x2a,0x00);
    2bac:	2100      	movs	r1, #0
    2bae:	202a      	movs	r0, #42	; 0x2a
    2bb0:	4c17      	ldr	r4, [pc, #92]	; (2c10 <setXY+0x70>)
    2bb2:	47a0      	blx	r4
	LCD_Write_DATA8(x1>>8);
    2bb4:	0a38      	lsrs	r0, r7, #8
    2bb6:	4d17      	ldr	r5, [pc, #92]	; (2c14 <setXY+0x74>)
    2bb8:	47a8      	blx	r5
	LCD_Write_COM16(0x2a,0x01);
    2bba:	2101      	movs	r1, #1
    2bbc:	202a      	movs	r0, #42	; 0x2a
    2bbe:	47a0      	blx	r4
	LCD_Write_DATA8(x1);
    2bc0:	b2f8      	uxtb	r0, r7
    2bc2:	47a8      	blx	r5
	LCD_Write_COM16(0x2a,0x02);
    2bc4:	2102      	movs	r1, #2
    2bc6:	202a      	movs	r0, #42	; 0x2a
    2bc8:	47a0      	blx	r4
	LCD_Write_DATA8(x2>>8);
    2bca:	0a30      	lsrs	r0, r6, #8
    2bcc:	47a8      	blx	r5
	LCD_Write_COM16(0x2a,0x03);
    2bce:	2103      	movs	r1, #3
    2bd0:	202a      	movs	r0, #42	; 0x2a
    2bd2:	47a0      	blx	r4
	LCD_Write_DATA8(x2);
    2bd4:	b2f0      	uxtb	r0, r6
    2bd6:	47a8      	blx	r5

	LCD_Write_COM16(0x2b,0x00);
    2bd8:	2100      	movs	r1, #0
    2bda:	202b      	movs	r0, #43	; 0x2b
    2bdc:	47a0      	blx	r4
	LCD_Write_DATA8(y1>>8);
    2bde:	9e00      	ldr	r6, [sp, #0]
    2be0:	0a30      	lsrs	r0, r6, #8
    2be2:	47a8      	blx	r5
	LCD_Write_COM16(0x2b,0x01);
    2be4:	2101      	movs	r1, #1
    2be6:	202b      	movs	r0, #43	; 0x2b
    2be8:	47a0      	blx	r4
	LCD_Write_DATA8(y1);
    2bea:	b2f0      	uxtb	r0, r6
    2bec:	47a8      	blx	r5
	LCD_Write_COM16(0x2b,0x02);
    2bee:	2102      	movs	r1, #2
    2bf0:	202b      	movs	r0, #43	; 0x2b
    2bf2:	47a0      	blx	r4
	LCD_Write_DATA8(y2>>8);
    2bf4:	9e01      	ldr	r6, [sp, #4]
    2bf6:	0a30      	lsrs	r0, r6, #8
    2bf8:	47a8      	blx	r5
	LCD_Write_COM16(0x2b,0x03);
    2bfa:	2103      	movs	r1, #3
    2bfc:	202b      	movs	r0, #43	; 0x2b
    2bfe:	47a0      	blx	r4
	LCD_Write_DATA8(y2);
    2c00:	b2f0      	uxtb	r0, r6
    2c02:	47a8      	blx	r5

	LCD_Write_COM16(0x2c,0x00);
    2c04:	2100      	movs	r1, #0
    2c06:	202c      	movs	r0, #44	; 0x2c
    2c08:	47a0      	blx	r4
}
    2c0a:	b003      	add	sp, #12
    2c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c0e:	46c0      	nop			; (mov r8, r8)
    2c10:	00002dcd 	.word	0x00002dcd
    2c14:	00002dfd 	.word	0x00002dfd

00002c18 <fillRect>:
{
    2c18:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c1a:	46ce      	mov	lr, r9
    2c1c:	4647      	mov	r7, r8
    2c1e:	b580      	push	{r7, lr}
    2c20:	b083      	sub	sp, #12
    2c22:	0006      	movs	r6, r0
    2c24:	4689      	mov	r9, r1
    2c26:	0014      	movs	r4, r2
    2c28:	001d      	movs	r5, r3
	if (x1>x2)
    2c2a:	4290      	cmp	r0, r2
    2c2c:	dd01      	ble.n	2c32 <fillRect+0x1a>
		x1 = x2;
    2c2e:	0016      	movs	r6, r2
		x2 = temp;
    2c30:	0004      	movs	r4, r0
	if (y1>y2)
    2c32:	45a9      	cmp	r9, r5
    2c34:	dd02      	ble.n	2c3c <fillRect+0x24>
    2c36:	0033      	movs	r3, r6
		x1 = x2;
    2c38:	0026      	movs	r6, r4
		x2 = temp;
    2c3a:	001c      	movs	r4, r3
	REG_PORT_OUTCLR1 = LCD_CS;
    2c3c:	2380      	movs	r3, #128	; 0x80
    2c3e:	03db      	lsls	r3, r3, #15
    2c40:	4698      	mov	r8, r3
    2c42:	4b11      	ldr	r3, [pc, #68]	; (2c88 <fillRect+0x70>)
    2c44:	4642      	mov	r2, r8
    2c46:	601a      	str	r2, [r3, #0]
	setXY(x1, y1, x2, y2);
    2c48:	b2ab      	uxth	r3, r5
    2c4a:	b2a2      	uxth	r2, r4
    2c4c:	4649      	mov	r1, r9
    2c4e:	4668      	mov	r0, sp
    2c50:	80c1      	strh	r1, [r0, #6]
    2c52:	88c1      	ldrh	r1, [r0, #6]
    2c54:	b2b0      	uxth	r0, r6
    2c56:	4f0d      	ldr	r7, [pc, #52]	; (2c8c <fillRect+0x74>)
    2c58:	47b8      	blx	r7
	REG_PORT_OUTSET1 = LCD_DC;
    2c5a:	4f0d      	ldr	r7, [pc, #52]	; (2c90 <fillRect+0x78>)
    2c5c:	2380      	movs	r3, #128	; 0x80
    2c5e:	041b      	lsls	r3, r3, #16
    2c60:	603b      	str	r3, [r7, #0]
	(((long)(x2-x1)+1)*((long)(y2-y1)+1)));
    2c62:	1ba4      	subs	r4, r4, r6
    2c64:	3401      	adds	r4, #1
    2c66:	464b      	mov	r3, r9
    2c68:	1aea      	subs	r2, r5, r3
    2c6a:	3201      	adds	r2, #1
	LCD_Fast_Fill(fore_Color_High, fore_Color_Low,
    2c6c:	4362      	muls	r2, r4
    2c6e:	4b09      	ldr	r3, [pc, #36]	; (2c94 <fillRect+0x7c>)
    2c70:	8819      	ldrh	r1, [r3, #0]
    2c72:	4b09      	ldr	r3, [pc, #36]	; (2c98 <fillRect+0x80>)
    2c74:	8818      	ldrh	r0, [r3, #0]
    2c76:	4b09      	ldr	r3, [pc, #36]	; (2c9c <fillRect+0x84>)
    2c78:	4798      	blx	r3
	REG_PORT_OUTSET1 = LCD_CS;
    2c7a:	4643      	mov	r3, r8
    2c7c:	603b      	str	r3, [r7, #0]
}
    2c7e:	b003      	add	sp, #12
    2c80:	bc0c      	pop	{r2, r3}
    2c82:	4690      	mov	r8, r2
    2c84:	4699      	mov	r9, r3
    2c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c88:	41004494 	.word	0x41004494
    2c8c:	00002ba1 	.word	0x00002ba1
    2c90:	41004498 	.word	0x41004498
    2c94:	20000a94 	.word	0x20000a94
    2c98:	20000a92 	.word	0x20000a92
    2c9c:	00002b2d 	.word	0x00002b2d

00002ca0 <fillRectBackColor>:
{
    2ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ca2:	46ce      	mov	lr, r9
    2ca4:	4647      	mov	r7, r8
    2ca6:	b580      	push	{r7, lr}
    2ca8:	b083      	sub	sp, #12
    2caa:	0006      	movs	r6, r0
    2cac:	4689      	mov	r9, r1
    2cae:	0014      	movs	r4, r2
    2cb0:	001d      	movs	r5, r3
	if (x1>x2)
    2cb2:	4290      	cmp	r0, r2
    2cb4:	dd01      	ble.n	2cba <fillRectBackColor+0x1a>
		x1 = x2;
    2cb6:	0016      	movs	r6, r2
		x2 = temp;
    2cb8:	0004      	movs	r4, r0
	if (y1>y2)
    2cba:	45a9      	cmp	r9, r5
    2cbc:	dd02      	ble.n	2cc4 <fillRectBackColor+0x24>
    2cbe:	0033      	movs	r3, r6
		x1 = x2;
    2cc0:	0026      	movs	r6, r4
		x2 = temp;
    2cc2:	001c      	movs	r4, r3
	REG_PORT_OUTCLR1 = LCD_CS;
    2cc4:	2380      	movs	r3, #128	; 0x80
    2cc6:	03db      	lsls	r3, r3, #15
    2cc8:	4698      	mov	r8, r3
    2cca:	4b11      	ldr	r3, [pc, #68]	; (2d10 <fillRectBackColor+0x70>)
    2ccc:	4642      	mov	r2, r8
    2cce:	601a      	str	r2, [r3, #0]
	setXY(x1, y1, x2, y2);
    2cd0:	b2ab      	uxth	r3, r5
    2cd2:	b2a2      	uxth	r2, r4
    2cd4:	4649      	mov	r1, r9
    2cd6:	4668      	mov	r0, sp
    2cd8:	80c1      	strh	r1, [r0, #6]
    2cda:	88c1      	ldrh	r1, [r0, #6]
    2cdc:	b2b0      	uxth	r0, r6
    2cde:	4f0d      	ldr	r7, [pc, #52]	; (2d14 <fillRectBackColor+0x74>)
    2ce0:	47b8      	blx	r7
	REG_PORT_OUTSET1 = LCD_DC;
    2ce2:	4f0d      	ldr	r7, [pc, #52]	; (2d18 <fillRectBackColor+0x78>)
    2ce4:	2380      	movs	r3, #128	; 0x80
    2ce6:	041b      	lsls	r3, r3, #16
    2ce8:	603b      	str	r3, [r7, #0]
	(((long)(x2-x1)+1)*((long)(y2-y1)+1)));
    2cea:	1ba4      	subs	r4, r4, r6
    2cec:	3401      	adds	r4, #1
    2cee:	464b      	mov	r3, r9
    2cf0:	1aea      	subs	r2, r5, r3
    2cf2:	3201      	adds	r2, #1
	LCD_Fast_Fill(back_Color_High, back_Color_Low,
    2cf4:	4362      	muls	r2, r4
    2cf6:	4b09      	ldr	r3, [pc, #36]	; (2d1c <fillRectBackColor+0x7c>)
    2cf8:	8819      	ldrh	r1, [r3, #0]
    2cfa:	4b09      	ldr	r3, [pc, #36]	; (2d20 <fillRectBackColor+0x80>)
    2cfc:	8818      	ldrh	r0, [r3, #0]
    2cfe:	4b09      	ldr	r3, [pc, #36]	; (2d24 <fillRectBackColor+0x84>)
    2d00:	4798      	blx	r3
	REG_PORT_OUTSET1 = LCD_CS;
    2d02:	4643      	mov	r3, r8
    2d04:	603b      	str	r3, [r7, #0]
}
    2d06:	b003      	add	sp, #12
    2d08:	bc0c      	pop	{r2, r3}
    2d0a:	4690      	mov	r8, r2
    2d0c:	4699      	mov	r9, r3
    2d0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2d10:	41004494 	.word	0x41004494
    2d14:	00002ba1 	.word	0x00002ba1
    2d18:	41004498 	.word	0x41004498
    2d1c:	20000a90 	.word	0x20000a90
    2d20:	20000a96 	.word	0x20000a96
    2d24:	00002b2d 	.word	0x00002b2d

00002d28 <clrXY>:
{
    2d28:	b510      	push	{r4, lr}
	setXY(0,0,display_X_size,display_Y_size);
    2d2a:	4b04      	ldr	r3, [pc, #16]	; (2d3c <clrXY+0x14>)
    2d2c:	881b      	ldrh	r3, [r3, #0]
    2d2e:	4a04      	ldr	r2, [pc, #16]	; (2d40 <clrXY+0x18>)
    2d30:	8812      	ldrh	r2, [r2, #0]
    2d32:	2100      	movs	r1, #0
    2d34:	2000      	movs	r0, #0
    2d36:	4c03      	ldr	r4, [pc, #12]	; (2d44 <clrXY+0x1c>)
    2d38:	47a0      	blx	r4
}
    2d3a:	bd10      	pop	{r4, pc}
    2d3c:	20000156 	.word	0x20000156
    2d40:	20000154 	.word	0x20000154
    2d44:	00002ba1 	.word	0x00002ba1

00002d48 <clrScr>:
{
    2d48:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = LCD_CS;
    2d4a:	2280      	movs	r2, #128	; 0x80
    2d4c:	03d2      	lsls	r2, r2, #15
    2d4e:	4b02      	ldr	r3, [pc, #8]	; (2d58 <clrScr+0x10>)
    2d50:	601a      	str	r2, [r3, #0]
	clrXY();
    2d52:	4b02      	ldr	r3, [pc, #8]	; (2d5c <clrScr+0x14>)
    2d54:	4798      	blx	r3
}
    2d56:	bd10      	pop	{r4, pc}
    2d58:	41004494 	.word	0x41004494
    2d5c:	00002d29 	.word	0x00002d29

00002d60 <setPixel>:

void setPixel(uint16_t color)
{
    2d60:	b510      	push	{r4, lr}
	//it sets it to a 16-bit color.
	LCD_Write_DATA16((color>>8),(color&0xFF));
    2d62:	b2c1      	uxtb	r1, r0
    2d64:	0a00      	lsrs	r0, r0, #8
    2d66:	4b01      	ldr	r3, [pc, #4]	; (2d6c <setPixel+0xc>)
    2d68:	4798      	blx	r3
}
    2d6a:	bd10      	pop	{r4, pc}
    2d6c:	00002de5 	.word	0x00002de5

00002d70 <clearScreen>:
	LCD_Write_DATA8(0x80);
	REG_PORT_OUTSET1 = LCD_CS;
}
*/
void clearScreen(void)
{
    2d70:	b510      	push	{r4, lr}
	fore_Color_High = ((r&248)|g>>5);
    2d72:	2300      	movs	r3, #0
    2d74:	4a06      	ldr	r2, [pc, #24]	; (2d90 <clearScreen+0x20>)
    2d76:	8013      	strh	r3, [r2, #0]
	fore_Color_Low = ((g&28)<<3|b>>3);
    2d78:	4a06      	ldr	r2, [pc, #24]	; (2d94 <clearScreen+0x24>)
    2d7a:	8013      	strh	r3, [r2, #0]
	setColorRGB(0,0,0);
	fillRect(0,0,display_Y_size,display_X_size);
    2d7c:	4b06      	ldr	r3, [pc, #24]	; (2d98 <clearScreen+0x28>)
    2d7e:	881b      	ldrh	r3, [r3, #0]
    2d80:	4a06      	ldr	r2, [pc, #24]	; (2d9c <clearScreen+0x2c>)
    2d82:	8812      	ldrh	r2, [r2, #0]
    2d84:	2100      	movs	r1, #0
    2d86:	2000      	movs	r0, #0
    2d88:	4c05      	ldr	r4, [pc, #20]	; (2da0 <clearScreen+0x30>)
    2d8a:	47a0      	blx	r4
}
    2d8c:	bd10      	pop	{r4, pc}
    2d8e:	46c0      	nop			; (mov r8, r8)
    2d90:	20000a92 	.word	0x20000a92
    2d94:	20000a94 	.word	0x20000a94
    2d98:	20000154 	.word	0x20000154
    2d9c:	20000156 	.word	0x20000156
    2da0:	00002c19 	.word	0x00002c19

00002da4 <LCD_Write_Bus>:
	fillRect(0,0,799,489);
		
}

void LCD_Write_Bus(char VH, char VL)
{
    2da4:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = 0x0000ffff;
    2da6:	4c06      	ldr	r4, [pc, #24]	; (2dc0 <LCD_Write_Bus+0x1c>)
    2da8:	4b06      	ldr	r3, [pc, #24]	; (2dc4 <LCD_Write_Bus+0x20>)
    2daa:	6023      	str	r3, [r4, #0]
	REG_PORT_OUTSET1 = (VH << 8) | VL;
    2dac:	0200      	lsls	r0, r0, #8
    2dae:	4301      	orrs	r1, r0
    2db0:	4b05      	ldr	r3, [pc, #20]	; (2dc8 <LCD_Write_Bus+0x24>)
    2db2:	6019      	str	r1, [r3, #0]
	REG_PORT_OUTCLR1 = LCD_WR;
    2db4:	2280      	movs	r2, #128	; 0x80
    2db6:	0292      	lsls	r2, r2, #10
    2db8:	6022      	str	r2, [r4, #0]
	REG_PORT_OUTSET1 = LCD_WR;
    2dba:	601a      	str	r2, [r3, #0]
}
    2dbc:	bd10      	pop	{r4, pc}
    2dbe:	46c0      	nop			; (mov r8, r8)
    2dc0:	41004494 	.word	0x41004494
    2dc4:	0000ffff 	.word	0x0000ffff
    2dc8:	41004498 	.word	0x41004498

00002dcc <LCD_Write_COM16>:

void LCD_Write_COM16(char VH, char VL)
{
    2dcc:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = LCD_DC;
    2dce:	2280      	movs	r2, #128	; 0x80
    2dd0:	0412      	lsls	r2, r2, #16
    2dd2:	4b02      	ldr	r3, [pc, #8]	; (2ddc <LCD_Write_COM16+0x10>)
    2dd4:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(VH,VL);
    2dd6:	4b02      	ldr	r3, [pc, #8]	; (2de0 <LCD_Write_COM16+0x14>)
    2dd8:	4798      	blx	r3
}
    2dda:	bd10      	pop	{r4, pc}
    2ddc:	41004494 	.word	0x41004494
    2de0:	00002da5 	.word	0x00002da5

00002de4 <LCD_Write_DATA16>:
	REG_PORT_OUTCLR1 = LCD_DC;
	LCD_Write_Bus(0x00, VL);
}

void LCD_Write_DATA16(char VH, char VL)
{
    2de4:	b510      	push	{r4, lr}
	REG_PORT_OUTSET1 = LCD_DC;
    2de6:	2280      	movs	r2, #128	; 0x80
    2de8:	0412      	lsls	r2, r2, #16
    2dea:	4b02      	ldr	r3, [pc, #8]	; (2df4 <LCD_Write_DATA16+0x10>)
    2dec:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(VH,VL);
    2dee:	4b02      	ldr	r3, [pc, #8]	; (2df8 <LCD_Write_DATA16+0x14>)
    2df0:	4798      	blx	r3
}
    2df2:	bd10      	pop	{r4, pc}
    2df4:	41004498 	.word	0x41004498
    2df8:	00002da5 	.word	0x00002da5

00002dfc <LCD_Write_DATA8>:

void LCD_Write_DATA8(char VL)
{
    2dfc:	b510      	push	{r4, lr}
    2dfe:	0001      	movs	r1, r0
	REG_PORT_OUTSET1 = LCD_DC;
    2e00:	2280      	movs	r2, #128	; 0x80
    2e02:	0412      	lsls	r2, r2, #16
    2e04:	4b02      	ldr	r3, [pc, #8]	; (2e10 <LCD_Write_DATA8+0x14>)
    2e06:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(0x00, VL);
    2e08:	2000      	movs	r0, #0
    2e0a:	4b02      	ldr	r3, [pc, #8]	; (2e14 <LCD_Write_DATA8+0x18>)
    2e0c:	4798      	blx	r3
}
    2e0e:	bd10      	pop	{r4, pc}
    2e10:	41004498 	.word	0x41004498
    2e14:	00002da5 	.word	0x00002da5

00002e18 <InitLCD>:
{
    2e18:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e1a:	46c6      	mov	lr, r8
    2e1c:	b500      	push	{lr}
    2e1e:	b082      	sub	sp, #8
	REG_PORT_DIRSET1 = 0x0000ffff;		//LCD data bus, PB00 - PB15
    2e20:	4b80      	ldr	r3, [pc, #512]	; (3024 <InitLCD+0x20c>)
    2e22:	4f81      	ldr	r7, [pc, #516]	; (3028 <InitLCD+0x210>)
    2e24:	601f      	str	r7, [r3, #0]
	REG_PORT_DIRSET1 = LCD_Reset;
    2e26:	2580      	movs	r5, #128	; 0x80
    2e28:	05ed      	lsls	r5, r5, #23
    2e2a:	601d      	str	r5, [r3, #0]
	REG_PORT_DIRSET1 = LCD_CS;
    2e2c:	2680      	movs	r6, #128	; 0x80
    2e2e:	03f6      	lsls	r6, r6, #15
    2e30:	601e      	str	r6, [r3, #0]
	REG_PORT_DIRSET1 = LCD_WR;
    2e32:	2080      	movs	r0, #128	; 0x80
    2e34:	0280      	lsls	r0, r0, #10
    2e36:	6018      	str	r0, [r3, #0]
	REG_PORT_DIRSET1 = LCD_DC;
    2e38:	2180      	movs	r1, #128	; 0x80
    2e3a:	0409      	lsls	r1, r1, #16
    2e3c:	6019      	str	r1, [r3, #0]
	REG_PORT_DIRSET1 = LCD_RD;
    2e3e:	2280      	movs	r2, #128	; 0x80
    2e40:	0252      	lsls	r2, r2, #9
    2e42:	601a      	str	r2, [r3, #0]
	REG_PORT_OUTCLR1 = 0x0000ffff;
    2e44:	4c79      	ldr	r4, [pc, #484]	; (302c <InitLCD+0x214>)
    2e46:	6027      	str	r7, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_Reset;
    2e48:	6025      	str	r5, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_CS;
    2e4a:	6026      	str	r6, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_WR;
    2e4c:	6020      	str	r0, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_DC;
    2e4e:	6021      	str	r1, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_RD;
    2e50:	6022      	str	r2, [r4, #0]
	REG_PORT_DIRSET1 = PORT_PB16;
    2e52:	601a      	str	r2, [r3, #0]
	REG_PORT_OUTSET1 = PORT_PB16;
    2e54:	4f76      	ldr	r7, [pc, #472]	; (3030 <InitLCD+0x218>)
    2e56:	603a      	str	r2, [r7, #0]
	REG_PORT_OUTSET1 = LCD_Reset;
    2e58:	603d      	str	r5, [r7, #0]
	delay_ms(5);
    2e5a:	2005      	movs	r0, #5
    2e5c:	4b75      	ldr	r3, [pc, #468]	; (3034 <InitLCD+0x21c>)
    2e5e:	4698      	mov	r8, r3
    2e60:	4798      	blx	r3
	REG_PORT_OUTCLR1 = LCD_Reset;
    2e62:	6025      	str	r5, [r4, #0]
	delay_ms(5);
    2e64:	2005      	movs	r0, #5
    2e66:	47c0      	blx	r8
	REG_PORT_OUTSET1 = LCD_Reset;
    2e68:	603d      	str	r5, [r7, #0]
	REG_PORT_OUTCLR1 = LCD_CS;
    2e6a:	6026      	str	r6, [r4, #0]
	for(int i = 0; i < 70; i++)
    2e6c:	2400      	movs	r4, #0
		REG_PORT_OUTCLR1 = LCD_DC;
    2e6e:	4b6f      	ldr	r3, [pc, #444]	; (302c <InitLCD+0x214>)
    2e70:	4698      	mov	r8, r3
    2e72:	2580      	movs	r5, #128	; 0x80
    2e74:	042d      	lsls	r5, r5, #16
    2e76:	002f      	movs	r7, r5
		LCD_Write_COM16(belial[i],mulciber[i]);
    2e78:	4e6f      	ldr	r6, [pc, #444]	; (3038 <InitLCD+0x220>)
		REG_PORT_OUTCLR1 = LCD_DC;
    2e7a:	4643      	mov	r3, r8
    2e7c:	601f      	str	r7, [r3, #0]
		LCD_Write_COM16(belial[i],mulciber[i]);
    2e7e:	5da1      	ldrb	r1, [r4, r6]
    2e80:	4b6e      	ldr	r3, [pc, #440]	; (303c <InitLCD+0x224>)
    2e82:	5ce0      	ldrb	r0, [r4, r3]
    2e84:	4b6e      	ldr	r3, [pc, #440]	; (3040 <InitLCD+0x228>)
    2e86:	4798      	blx	r3
		REG_PORT_OUTSET1 = LCD_DC;
    2e88:	4b69      	ldr	r3, [pc, #420]	; (3030 <InitLCD+0x218>)
    2e8a:	601d      	str	r5, [r3, #0]
		LCD_Write_DATA8(lucifer[i]);
    2e8c:	4b6d      	ldr	r3, [pc, #436]	; (3044 <InitLCD+0x22c>)
    2e8e:	5ce0      	ldrb	r0, [r4, r3]
    2e90:	4b6d      	ldr	r3, [pc, #436]	; (3048 <InitLCD+0x230>)
    2e92:	4798      	blx	r3
	for(int i = 0; i < 70; i++)
    2e94:	3401      	adds	r4, #1
    2e96:	2c46      	cmp	r4, #70	; 0x46
    2e98:	d1ef      	bne.n	2e7a <InitLCD+0x62>
    2e9a:	23d1      	movs	r3, #209	; 0xd1
    2e9c:	9301      	str	r3, [sp, #4]
			LCD_Write_COM16(k,0x00);
    2e9e:	4d68      	ldr	r5, [pc, #416]	; (3040 <InitLCD+0x228>)
			LCD_Write_DATA8(beelzebub[l]);
    2ea0:	4f69      	ldr	r7, [pc, #420]	; (3048 <InitLCD+0x230>)
    2ea2:	4c6a      	ldr	r4, [pc, #424]	; (304c <InitLCD+0x234>)
    2ea4:	0026      	movs	r6, r4
    2ea6:	3634      	adds	r6, #52	; 0x34
			LCD_Write_COM16(k,0x00);
    2ea8:	2100      	movs	r1, #0
    2eaa:	9801      	ldr	r0, [sp, #4]
    2eac:	47a8      	blx	r5
			LCD_Write_DATA8(beelzebub[l]);
    2eae:	7820      	ldrb	r0, [r4, #0]
    2eb0:	47b8      	blx	r7
    2eb2:	3401      	adds	r4, #1
		for(int l = 0; l < 52; l++)
    2eb4:	42a6      	cmp	r6, r4
    2eb6:	d1f7      	bne.n	2ea8 <InitLCD+0x90>
	for(char k = 0xD1; k < 0xD6; k++)
    2eb8:	9b01      	ldr	r3, [sp, #4]
    2eba:	3301      	adds	r3, #1
    2ebc:	b2db      	uxtb	r3, r3
    2ebe:	9301      	str	r3, [sp, #4]
    2ec0:	2bd6      	cmp	r3, #214	; 0xd6
    2ec2:	d1ee      	bne.n	2ea2 <InitLCD+0x8a>
	LCD_Write_COM16(0xF0, 0x00);LCD_Write_DATA8(0x55);
    2ec4:	2100      	movs	r1, #0
    2ec6:	20f0      	movs	r0, #240	; 0xf0
    2ec8:	4c5d      	ldr	r4, [pc, #372]	; (3040 <InitLCD+0x228>)
    2eca:	47a0      	blx	r4
    2ecc:	2055      	movs	r0, #85	; 0x55
    2ece:	4d5e      	ldr	r5, [pc, #376]	; (3048 <InitLCD+0x230>)
    2ed0:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x01);LCD_Write_DATA8(0xAA);	
    2ed2:	2101      	movs	r1, #1
    2ed4:	20f0      	movs	r0, #240	; 0xf0
    2ed6:	47a0      	blx	r4
    2ed8:	20aa      	movs	r0, #170	; 0xaa
    2eda:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x02);LCD_Write_DATA8(0x52);	
    2edc:	2102      	movs	r1, #2
    2ede:	20f0      	movs	r0, #240	; 0xf0
    2ee0:	47a0      	blx	r4
    2ee2:	2052      	movs	r0, #82	; 0x52
    2ee4:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x03);LCD_Write_DATA8(0x08);	
    2ee6:	2103      	movs	r1, #3
    2ee8:	20f0      	movs	r0, #240	; 0xf0
    2eea:	47a0      	blx	r4
    2eec:	2008      	movs	r0, #8
    2eee:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x04);LCD_Write_DATA8(0x00);	
    2ef0:	2104      	movs	r1, #4
    2ef2:	20f0      	movs	r0, #240	; 0xf0
    2ef4:	47a0      	blx	r4
    2ef6:	2000      	movs	r0, #0
    2ef8:	47a8      	blx	r5
	LCD_Write_COM16(0xB1, 0x00);LCD_Write_DATA8(0xCC);
    2efa:	2100      	movs	r1, #0
    2efc:	20b1      	movs	r0, #177	; 0xb1
    2efe:	47a0      	blx	r4
    2f00:	20cc      	movs	r0, #204	; 0xcc
    2f02:	47a8      	blx	r5
	LCD_Write_COM16(0xB1, 0x01);LCD_Write_DATA8(0x00);	
    2f04:	2101      	movs	r1, #1
    2f06:	20b1      	movs	r0, #177	; 0xb1
    2f08:	47a0      	blx	r4
    2f0a:	2000      	movs	r0, #0
    2f0c:	47a8      	blx	r5
	LCD_Write_COM16(0xB5, 0x00);LCD_Write_DATA8(0x50);	
    2f0e:	2100      	movs	r1, #0
    2f10:	20b5      	movs	r0, #181	; 0xb5
    2f12:	47a0      	blx	r4
    2f14:	2050      	movs	r0, #80	; 0x50
    2f16:	47a8      	blx	r5
	LCD_Write_COM16(0xB6, 0x00);LCD_Write_DATA8(0x05);
    2f18:	2100      	movs	r1, #0
    2f1a:	20b6      	movs	r0, #182	; 0xb6
    2f1c:	47a0      	blx	r4
    2f1e:	2005      	movs	r0, #5
    2f20:	47a8      	blx	r5
	LCD_Write_COM16(0xB7, 0x00);LCD_Write_DATA8(0x70);
    2f22:	2100      	movs	r1, #0
    2f24:	20b7      	movs	r0, #183	; 0xb7
    2f26:	47a0      	blx	r4
    2f28:	2070      	movs	r0, #112	; 0x70
    2f2a:	47a8      	blx	r5
	LCD_Write_COM16(0xB7, 0x01);LCD_Write_DATA8(0x70);
    2f2c:	2101      	movs	r1, #1
    2f2e:	20b7      	movs	r0, #183	; 0xb7
    2f30:	47a0      	blx	r4
    2f32:	2070      	movs	r0, #112	; 0x70
    2f34:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x00);LCD_Write_DATA8(0x01);
    2f36:	2100      	movs	r1, #0
    2f38:	20b8      	movs	r0, #184	; 0xb8
    2f3a:	47a0      	blx	r4
    2f3c:	2001      	movs	r0, #1
    2f3e:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x01);LCD_Write_DATA8(0x03);
    2f40:	2101      	movs	r1, #1
    2f42:	20b8      	movs	r0, #184	; 0xb8
    2f44:	47a0      	blx	r4
    2f46:	2003      	movs	r0, #3
    2f48:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x02);LCD_Write_DATA8(0x03);
    2f4a:	2102      	movs	r1, #2
    2f4c:	20b8      	movs	r0, #184	; 0xb8
    2f4e:	47a0      	blx	r4
    2f50:	2003      	movs	r0, #3
    2f52:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x03);LCD_Write_DATA8(0x03);	
    2f54:	2103      	movs	r1, #3
    2f56:	20b8      	movs	r0, #184	; 0xb8
    2f58:	47a0      	blx	r4
    2f5a:	2003      	movs	r0, #3
    2f5c:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x00);LCD_Write_DATA8(0x02);
    2f5e:	2100      	movs	r1, #0
    2f60:	20bc      	movs	r0, #188	; 0xbc
    2f62:	47a0      	blx	r4
    2f64:	2002      	movs	r0, #2
    2f66:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x01);LCD_Write_DATA8(0x00);
    2f68:	2101      	movs	r1, #1
    2f6a:	20bc      	movs	r0, #188	; 0xbc
    2f6c:	47a0      	blx	r4
    2f6e:	2000      	movs	r0, #0
    2f70:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x02);LCD_Write_DATA8(0x00);
    2f72:	2102      	movs	r1, #2
    2f74:	20bc      	movs	r0, #188	; 0xbc
    2f76:	47a0      	blx	r4
    2f78:	2000      	movs	r0, #0
    2f7a:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x00);LCD_Write_DATA8(0xD0);
    2f7c:	2100      	movs	r1, #0
    2f7e:	20c9      	movs	r0, #201	; 0xc9
    2f80:	47a0      	blx	r4
    2f82:	20d0      	movs	r0, #208	; 0xd0
    2f84:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x01);LCD_Write_DATA8(0x02);
    2f86:	2101      	movs	r1, #1
    2f88:	20c9      	movs	r0, #201	; 0xc9
    2f8a:	47a0      	blx	r4
    2f8c:	2002      	movs	r0, #2
    2f8e:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x02);LCD_Write_DATA8(0x50);
    2f90:	2102      	movs	r1, #2
    2f92:	20c9      	movs	r0, #201	; 0xc9
    2f94:	47a0      	blx	r4
    2f96:	2050      	movs	r0, #80	; 0x50
    2f98:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x03);LCD_Write_DATA8(0x50);
    2f9a:	2103      	movs	r1, #3
    2f9c:	20c9      	movs	r0, #201	; 0xc9
    2f9e:	47a0      	blx	r4
    2fa0:	2050      	movs	r0, #80	; 0x50
    2fa2:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x04);LCD_Write_DATA8(0x50);
    2fa4:	2104      	movs	r1, #4
    2fa6:	20c9      	movs	r0, #201	; 0xc9
    2fa8:	47a0      	blx	r4
    2faa:	2050      	movs	r0, #80	; 0x50
    2fac:	47a8      	blx	r5
	LCD_Write_COM16(0x35, 0x00);LCD_Write_DATA8(0x00);
    2fae:	2100      	movs	r1, #0
    2fb0:	2035      	movs	r0, #53	; 0x35
    2fb2:	47a0      	blx	r4
    2fb4:	2000      	movs	r0, #0
    2fb6:	47a8      	blx	r5
	LCD_Write_COM16(0x3A, 0x00);LCD_Write_DATA8(0x55);
    2fb8:	2100      	movs	r1, #0
    2fba:	203a      	movs	r0, #58	; 0x3a
    2fbc:	47a0      	blx	r4
    2fbe:	2055      	movs	r0, #85	; 0x55
    2fc0:	47a8      	blx	r5
	LCD_Write_COM16(0x36, 0x00);LCD_Write_DATA8(0xE2);  //This is the MADCTL register
    2fc2:	2100      	movs	r1, #0
    2fc4:	2036      	movs	r0, #54	; 0x36
    2fc6:	47a0      	blx	r4
    2fc8:	20e2      	movs	r0, #226	; 0xe2
    2fca:	47a8      	blx	r5
  	LCD_Write_COM16(0x11,0x00);   //Start Up  
    2fcc:	2100      	movs	r1, #0
    2fce:	2011      	movs	r0, #17
    2fd0:	47a0      	blx	r4
  	delay_ms(100);
    2fd2:	2064      	movs	r0, #100	; 0x64
    2fd4:	4e17      	ldr	r6, [pc, #92]	; (3034 <InitLCD+0x21c>)
    2fd6:	47b0      	blx	r6
  	LCD_Write_COM16(0x29,0x00);   //Display On  
    2fd8:	2100      	movs	r1, #0
    2fda:	2029      	movs	r0, #41	; 0x29
    2fdc:	47a0      	blx	r4
   	delay_ms(100);
    2fde:	2064      	movs	r0, #100	; 0x64
    2fe0:	47b0      	blx	r6
	LCD_Write_COM16(0x51,0x00);LCD_Write_DATA8(0xFF);
    2fe2:	2100      	movs	r1, #0
    2fe4:	2051      	movs	r0, #81	; 0x51
    2fe6:	47a0      	blx	r4
    2fe8:	20ff      	movs	r0, #255	; 0xff
    2fea:	47a8      	blx	r5
	REG_PORT_OUTSET1 = LCD_CS;
    2fec:	2280      	movs	r2, #128	; 0x80
    2fee:	03d2      	lsls	r2, r2, #15
    2ff0:	4b0f      	ldr	r3, [pc, #60]	; (3030 <InitLCD+0x218>)
    2ff2:	601a      	str	r2, [r3, #0]
	clrScr();
    2ff4:	4b16      	ldr	r3, [pc, #88]	; (3050 <InitLCD+0x238>)
    2ff6:	4798      	blx	r3
	setColorRGB(0,0,0);
    2ff8:	2200      	movs	r2, #0
    2ffa:	2100      	movs	r1, #0
    2ffc:	2000      	movs	r0, #0
    2ffe:	4b15      	ldr	r3, [pc, #84]	; (3054 <InitLCD+0x23c>)
    3000:	4798      	blx	r3
	setBackColorRGB(0, 0, 0);
    3002:	2200      	movs	r2, #0
    3004:	2100      	movs	r1, #0
    3006:	2000      	movs	r0, #0
    3008:	4b13      	ldr	r3, [pc, #76]	; (3058 <InitLCD+0x240>)
    300a:	4798      	blx	r3
	fillRect(0,0,799,489);
    300c:	23ea      	movs	r3, #234	; 0xea
    300e:	33ff      	adds	r3, #255	; 0xff
    3010:	4a12      	ldr	r2, [pc, #72]	; (305c <InitLCD+0x244>)
    3012:	2100      	movs	r1, #0
    3014:	2000      	movs	r0, #0
    3016:	4c12      	ldr	r4, [pc, #72]	; (3060 <InitLCD+0x248>)
    3018:	47a0      	blx	r4
}
    301a:	b002      	add	sp, #8
    301c:	bc04      	pop	{r2}
    301e:	4690      	mov	r8, r2
    3020:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3022:	46c0      	nop			; (mov r8, r8)
    3024:	41004488 	.word	0x41004488
    3028:	0000ffff 	.word	0x0000ffff
    302c:	41004494 	.word	0x41004494
    3030:	41004498 	.word	0x41004498
    3034:	0000067d 	.word	0x0000067d
    3038:	00006ad0 	.word	0x00006ad0
    303c:	00006a40 	.word	0x00006a40
    3040:	00002dcd 	.word	0x00002dcd
    3044:	00006a88 	.word	0x00006a88
    3048:	00002dfd 	.word	0x00002dfd
    304c:	00006a0c 	.word	0x00006a0c
    3050:	00002d49 	.word	0x00002d49
    3054:	00002add 	.word	0x00002add
    3058:	00002b05 	.word	0x00002b05
    305c:	0000031f 	.word	0x0000031f
    3060:	00002c19 	.word	0x00002c19

00003064 <usart_read_callback>:
	SysTick_Config(SystemCoreClock/1000);
	system_interrupt_enable(SYSTEM_INTERRUPT_SYSTICK);
}

void usart_read_callback(struct usart_module *const usart_module)
{
    3064:	b510      	push	{r4, lr}
	// Read one character from the UART.
	//We can only use this function because it's non-blocking
	//and we can only read one character because reading > 1 means
	//it doesn't complete until _all_ characters are read.
	
	usart_read_buffer_job(&usart_instance, (uint8_t*)&rx_buf, 1);
    3066:	4c06      	ldr	r4, [pc, #24]	; (3080 <usart_read_callback+0x1c>)
    3068:	2201      	movs	r2, #1
    306a:	0021      	movs	r1, r4
    306c:	4805      	ldr	r0, [pc, #20]	; (3084 <usart_read_callback+0x20>)
    306e:	4b06      	ldr	r3, [pc, #24]	; (3088 <usart_read_callback+0x24>)
    3070:	4798      	blx	r3
	
	//stuff that ONE CHARACTER into the circular FIFO buffer
	ring_put(ouroboros, rx_buf);
    3072:	7821      	ldrb	r1, [r4, #0]
    3074:	4b05      	ldr	r3, [pc, #20]	; (308c <usart_read_callback+0x28>)
    3076:	6818      	ldr	r0, [r3, #0]
    3078:	4b05      	ldr	r3, [pc, #20]	; (3090 <usart_read_callback+0x2c>)
    307a:	4798      	blx	r3
}
    307c:	bd10      	pop	{r4, pc}
    307e:	46c0      	nop			; (mov r8, r8)
    3080:	20000a99 	.word	0x20000a99
    3084:	200002d8 	.word	0x200002d8
    3088:	0000151d 	.word	0x0000151d
    308c:	200002ac 	.word	0x200002ac
    3090:	00000141 	.word	0x00000141

00003094 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    3094:	b570      	push	{r4, r5, r6, lr}
    3096:	b082      	sub	sp, #8
    3098:	0005      	movs	r5, r0
    309a:	000e      	movs	r6, r1
	uint16_t temp = 0;
    309c:	2200      	movs	r2, #0
    309e:	466b      	mov	r3, sp
    30a0:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    30a2:	4c06      	ldr	r4, [pc, #24]	; (30bc <usart_serial_getchar+0x28>)
    30a4:	466b      	mov	r3, sp
    30a6:	1d99      	adds	r1, r3, #6
    30a8:	0028      	movs	r0, r5
    30aa:	47a0      	blx	r4
    30ac:	2800      	cmp	r0, #0
    30ae:	d1f9      	bne.n	30a4 <usart_serial_getchar+0x10>

	*c = temp;
    30b0:	466b      	mov	r3, sp
    30b2:	3306      	adds	r3, #6
    30b4:	881b      	ldrh	r3, [r3, #0]
    30b6:	7033      	strb	r3, [r6, #0]
}
    30b8:	b002      	add	sp, #8
    30ba:	bd70      	pop	{r4, r5, r6, pc}
    30bc:	0000144b 	.word	0x0000144b

000030c0 <usart_serial_putchar>:
{
    30c0:	b570      	push	{r4, r5, r6, lr}
    30c2:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    30c4:	b28c      	uxth	r4, r1
    30c6:	4e03      	ldr	r6, [pc, #12]	; (30d4 <usart_serial_putchar+0x14>)
    30c8:	0021      	movs	r1, r4
    30ca:	0028      	movs	r0, r5
    30cc:	47b0      	blx	r6
    30ce:	2800      	cmp	r0, #0
    30d0:	d1fa      	bne.n	30c8 <usart_serial_putchar+0x8>
}
    30d2:	bd70      	pop	{r4, r5, r6, pc}
    30d4:	00001425 	.word	0x00001425

000030d8 <SysTick_Handler>:
	ul_tickcount++;
    30d8:	4a02      	ldr	r2, [pc, #8]	; (30e4 <SysTick_Handler+0xc>)
    30da:	8813      	ldrh	r3, [r2, #0]
    30dc:	3301      	adds	r3, #1
    30de:	8013      	strh	r3, [r2, #0]
}
    30e0:	4770      	bx	lr
    30e2:	46c0      	nop			; (mov r8, r8)
    30e4:	2000029e 	.word	0x2000029e

000030e8 <conf_systick>:
{
    30e8:	b510      	push	{r4, lr}
	SysTick_Config(SystemCoreClock/1000);
    30ea:	4b0e      	ldr	r3, [pc, #56]	; (3124 <conf_systick+0x3c>)
    30ec:	6818      	ldr	r0, [r3, #0]
    30ee:	21fa      	movs	r1, #250	; 0xfa
    30f0:	0089      	lsls	r1, r1, #2
    30f2:	4b0d      	ldr	r3, [pc, #52]	; (3128 <conf_systick+0x40>)
    30f4:	4798      	blx	r3
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    30f6:	3801      	subs	r0, #1
    30f8:	4b0c      	ldr	r3, [pc, #48]	; (312c <conf_systick+0x44>)
    30fa:	4298      	cmp	r0, r3
    30fc:	d80d      	bhi.n	311a <conf_systick+0x32>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    30fe:	4a0c      	ldr	r2, [pc, #48]	; (3130 <conf_systick+0x48>)
    3100:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    3102:	480c      	ldr	r0, [pc, #48]	; (3134 <conf_systick+0x4c>)
    3104:	6a03      	ldr	r3, [r0, #32]
    3106:	021b      	lsls	r3, r3, #8
    3108:	0a1b      	lsrs	r3, r3, #8
    310a:	21c0      	movs	r1, #192	; 0xc0
    310c:	0609      	lsls	r1, r1, #24
    310e:	430b      	orrs	r3, r1
    3110:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    3112:	2300      	movs	r3, #0
    3114:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    3116:	3307      	adds	r3, #7
    3118:	6013      	str	r3, [r2, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    311a:	2280      	movs	r2, #128	; 0x80
    311c:	0612      	lsls	r2, r2, #24
    311e:	4b06      	ldr	r3, [pc, #24]	; (3138 <conf_systick+0x50>)
    3120:	601a      	str	r2, [r3, #0]
}
    3122:	bd10      	pop	{r4, pc}
    3124:	2000000c 	.word	0x2000000c
    3128:	00003499 	.word	0x00003499
    312c:	00ffffff 	.word	0x00ffffff
    3130:	e000e010 	.word	0xe000e010
    3134:	e000ed00 	.word	0xe000ed00
    3138:	e000e100 	.word	0xe000e100

0000313c <configure_usart>:

/**************************SERCOM STUFF*******************************/


void configure_usart(void)
{
    313c:	b570      	push	{r4, r5, r6, lr}
    313e:	b090      	sub	sp, #64	; 0x40
	config->data_order       = USART_DATAORDER_LSB;
    3140:	2380      	movs	r3, #128	; 0x80
    3142:	05db      	lsls	r3, r3, #23
    3144:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    3146:	2300      	movs	r3, #0
    3148:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    314a:	22ff      	movs	r2, #255	; 0xff
    314c:	4669      	mov	r1, sp
    314e:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    3150:	2200      	movs	r2, #0
    3152:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    3154:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
    3156:	2196      	movs	r1, #150	; 0x96
    3158:	0189      	lsls	r1, r1, #6
    315a:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
    315c:	2101      	movs	r1, #1
    315e:	2024      	movs	r0, #36	; 0x24
    3160:	466c      	mov	r4, sp
    3162:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    3164:	3001      	adds	r0, #1
    3166:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    3168:	3125      	adds	r1, #37	; 0x25
    316a:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    316c:	3101      	adds	r1, #1
    316e:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    3170:	930a      	str	r3, [sp, #40]	; 0x28
	config->run_in_standby   = false;
    3172:	3105      	adds	r1, #5
    3174:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    3176:	3101      	adds	r1, #1
    3178:	5463      	strb	r3, [r4, r1]
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    317a:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    317c:	8223      	strh	r3, [r4, #16]
	config->lin_slave_enable      = false;
    317e:	76e3      	strb	r3, [r4, #27]
	config->immediate_buffer_overflow_notification  = false;
    3180:	7622      	strb	r2, [r4, #24]
	config->start_frame_detection_enable            = false;
    3182:	7722      	strb	r2, [r4, #28]
	config->encoding_format_enable                  = false;
    3184:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    3186:	2313      	movs	r3, #19
    3188:	76a3      	strb	r3, [r4, #26]
	config->collision_detection_enable              = false;
    318a:	7762      	strb	r2, [r4, #29]
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);

	config_usart.baudrate    = 9600;
	config_usart.mux_setting = USART_RX_1_TX_0_XCK_1;
    318c:	2380      	movs	r3, #128	; 0x80
    318e:	035b      	lsls	r3, r3, #13
    3190:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = PINMUX_PA08D_SERCOM2_PAD0;
    3192:	4b1e      	ldr	r3, [pc, #120]	; (320c <configure_usart+0xd0>)
    3194:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = PINMUX_PA09D_SERCOM2_PAD1;
    3196:	4b1e      	ldr	r3, [pc, #120]	; (3210 <configure_usart+0xd4>)
    3198:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = PINMUX_UNUSED;
    319a:	2301      	movs	r3, #1
    319c:	425b      	negs	r3, r3
    319e:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = PINMUX_UNUSED;
    31a0:	930f      	str	r3, [sp, #60]	; 0x3c
	
	while (usart_init(&usart_instance, SERCOM2, &config_usart) != STATUS_OK) {
    31a2:	4d1c      	ldr	r5, [pc, #112]	; (3214 <configure_usart+0xd8>)
    31a4:	4c1c      	ldr	r4, [pc, #112]	; (3218 <configure_usart+0xdc>)
    31a6:	466a      	mov	r2, sp
    31a8:	491c      	ldr	r1, [pc, #112]	; (321c <configure_usart+0xe0>)
    31aa:	0028      	movs	r0, r5
    31ac:	47a0      	blx	r4
    31ae:	2800      	cmp	r0, #0
    31b0:	d1f9      	bne.n	31a6 <configure_usart+0x6a>
	stdio_base = (void *)module;
    31b2:	4c18      	ldr	r4, [pc, #96]	; (3214 <configure_usart+0xd8>)
    31b4:	4b1a      	ldr	r3, [pc, #104]	; (3220 <configure_usart+0xe4>)
    31b6:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    31b8:	4a1a      	ldr	r2, [pc, #104]	; (3224 <configure_usart+0xe8>)
    31ba:	4b1b      	ldr	r3, [pc, #108]	; (3228 <configure_usart+0xec>)
    31bc:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    31be:	4a1b      	ldr	r2, [pc, #108]	; (322c <configure_usart+0xf0>)
    31c0:	4b1b      	ldr	r3, [pc, #108]	; (3230 <configure_usart+0xf4>)
    31c2:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    31c4:	466a      	mov	r2, sp
    31c6:	4915      	ldr	r1, [pc, #84]	; (321c <configure_usart+0xe0>)
    31c8:	0020      	movs	r0, r4
    31ca:	4b13      	ldr	r3, [pc, #76]	; (3218 <configure_usart+0xdc>)
    31cc:	4798      	blx	r3
	setbuf(stdout, NULL);
    31ce:	4e19      	ldr	r6, [pc, #100]	; (3234 <configure_usart+0xf8>)
    31d0:	6833      	ldr	r3, [r6, #0]
    31d2:	6898      	ldr	r0, [r3, #8]
    31d4:	2100      	movs	r1, #0
    31d6:	4d18      	ldr	r5, [pc, #96]	; (3238 <configure_usart+0xfc>)
    31d8:	47a8      	blx	r5
	setbuf(stdin, NULL);
    31da:	6833      	ldr	r3, [r6, #0]
    31dc:	6858      	ldr	r0, [r3, #4]
    31de:	2100      	movs	r1, #0
    31e0:	47a8      	blx	r5
	SercomUsart *const usart_hw = &(module->hw->USART);
    31e2:	6825      	ldr	r5, [r4, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    31e4:	0028      	movs	r0, r5
    31e6:	4b15      	ldr	r3, [pc, #84]	; (323c <configure_usart+0x100>)
    31e8:	4798      	blx	r3
    31ea:	231f      	movs	r3, #31
    31ec:	4018      	ands	r0, r3
    31ee:	3b1e      	subs	r3, #30
    31f0:	4083      	lsls	r3, r0
    31f2:	4a13      	ldr	r2, [pc, #76]	; (3240 <configure_usart+0x104>)
    31f4:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    31f6:	6822      	ldr	r2, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
    31f8:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    31fa:	2b00      	cmp	r3, #0
    31fc:	d1fc      	bne.n	31f8 <configure_usart+0xbc>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    31fe:	682b      	ldr	r3, [r5, #0]
    3200:	2202      	movs	r2, #2
    3202:	4313      	orrs	r3, r2
    3204:	602b      	str	r3, [r5, #0]
	}
	stdio_serial_init(&usart_instance, SERCOM2, &config_usart);
	usart_enable(&usart_instance);
}
    3206:	b010      	add	sp, #64	; 0x40
    3208:	bd70      	pop	{r4, r5, r6, pc}
    320a:	46c0      	nop			; (mov r8, r8)
    320c:	00080003 	.word	0x00080003
    3210:	00090003 	.word	0x00090003
    3214:	200002d8 	.word	0x200002d8
    3218:	000010e9 	.word	0x000010e9
    321c:	42001000 	.word	0x42001000
    3220:	200002d4 	.word	0x200002d4
    3224:	000030c1 	.word	0x000030c1
    3228:	200002d0 	.word	0x200002d0
    322c:	00003095 	.word	0x00003095
    3230:	200002cc 	.word	0x200002cc
    3234:	20000158 	.word	0x20000158
    3238:	00003afd 	.word	0x00003afd
    323c:	00001059 	.word	0x00001059
    3240:	e000e100 	.word	0xe000e100

00003244 <configure_usart_callbacks>:

void configure_usart_callbacks(void)
{
    3244:	b510      	push	{r4, lr}
	usart_register_callback(&usart_instance,usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
    3246:	4c06      	ldr	r4, [pc, #24]	; (3260 <configure_usart_callbacks+0x1c>)
    3248:	2201      	movs	r2, #1
    324a:	4906      	ldr	r1, [pc, #24]	; (3264 <configure_usart_callbacks+0x20>)
    324c:	0020      	movs	r0, r4
    324e:	4b06      	ldr	r3, [pc, #24]	; (3268 <configure_usart_callbacks+0x24>)
    3250:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    3252:	2231      	movs	r2, #49	; 0x31
    3254:	5ca3      	ldrb	r3, [r4, r2]
    3256:	2102      	movs	r1, #2
    3258:	430b      	orrs	r3, r1
    325a:	54a3      	strb	r3, [r4, r2]
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
}
    325c:	bd10      	pop	{r4, pc}
    325e:	46c0      	nop			; (mov r8, r8)
    3260:	200002d8 	.word	0x200002d8
    3264:	00003065 	.word	0x00003065
    3268:	00001505 	.word	0x00001505

0000326c <configure_adc>:
	usart_enable(&usart_USB);
}
*/

void configure_adc(void)
{
    326c:	b510      	push	{r4, lr}
    326e:	b08c      	sub	sp, #48	; 0x30
	struct adc_config config_adc;
	adc_get_config_defaults(&config_adc);
    3270:	4668      	mov	r0, sp
    3272:	4b11      	ldr	r3, [pc, #68]	; (32b8 <configure_adc+0x4c>)
    3274:	4798      	blx	r3
	config_adc.positive_input = ADC_POSITIVE_INPUT_DAC;
    3276:	231c      	movs	r3, #28
    3278:	466a      	mov	r2, sp
    327a:	7313      	strb	r3, [r2, #12]
	adc_init(&adc_instance, ADC, &config_adc);
    327c:	4c0f      	ldr	r4, [pc, #60]	; (32bc <configure_adc+0x50>)
    327e:	4910      	ldr	r1, [pc, #64]	; (32c0 <configure_adc+0x54>)
    3280:	0020      	movs	r0, r4
    3282:	4b10      	ldr	r3, [pc, #64]	; (32c4 <configure_adc+0x58>)
    3284:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    3286:	6822      	ldr	r2, [r4, #0]
    3288:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    328a:	b25b      	sxtb	r3, r3
    328c:	2b00      	cmp	r3, #0
    328e:	dbfb      	blt.n	3288 <configure_adc+0x1c>
    3290:	2180      	movs	r1, #128	; 0x80
    3292:	0409      	lsls	r1, r1, #16
    3294:	4b0c      	ldr	r3, [pc, #48]	; (32c8 <configure_adc+0x5c>)
    3296:	6019      	str	r1, [r3, #0]
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    3298:	230f      	movs	r3, #15
    329a:	7593      	strb	r3, [r2, #22]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    329c:	7613      	strb	r3, [r2, #24]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    329e:	7813      	ldrb	r3, [r2, #0]
    32a0:	2102      	movs	r1, #2
    32a2:	430b      	orrs	r3, r1
    32a4:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
    32a6:	4b05      	ldr	r3, [pc, #20]	; (32bc <configure_adc+0x50>)
    32a8:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    32aa:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    32ac:	b25b      	sxtb	r3, r3
    32ae:	2b00      	cmp	r3, #0
    32b0:	dbfb      	blt.n	32aa <configure_adc+0x3e>
	adc_enable(&adc_instance);
}
    32b2:	b00c      	add	sp, #48	; 0x30
    32b4:	bd10      	pop	{r4, pc}
    32b6:	46c0      	nop			; (mov r8, r8)
    32b8:	00000751 	.word	0x00000751
    32bc:	20000a9c 	.word	0x20000a9c
    32c0:	42004000 	.word	0x42004000
    32c4:	00000795 	.word	0x00000795
    32c8:	e000e100 	.word	0xe000e100

000032cc <setupBoard>:


void setupBoard(void)
{
    32cc:	b570      	push	{r4, r5, r6, lr}
	uint16_t adcResult;

	system_init();
    32ce:	4b30      	ldr	r3, [pc, #192]	; (3390 <setupBoard+0xc4>)
    32d0:	4798      	blx	r3
	
	configure_adc();
    32d2:	4b30      	ldr	r3, [pc, #192]	; (3394 <setupBoard+0xc8>)
    32d4:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    32d6:	4b30      	ldr	r3, [pc, #192]	; (3398 <setupBoard+0xcc>)
    32d8:	6819      	ldr	r1, [r3, #0]
    32da:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    32dc:	b25b      	sxtb	r3, r3
    32de:	2b00      	cmp	r3, #0
    32e0:	dbfb      	blt.n	32da <setupBoard+0xe>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    32e2:	7b0b      	ldrb	r3, [r1, #12]
    32e4:	2202      	movs	r2, #2
    32e6:	4313      	orrs	r3, r2
    32e8:	730b      	strb	r3, [r1, #12]
    32ea:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    32ec:	b25b      	sxtb	r3, r3
    32ee:	2b00      	cmp	r3, #0
    32f0:	dbfb      	blt.n	32ea <setupBoard+0x1e>
	if (int_flags & ADC_INTFLAG_RESRDY) {
    32f2:	2001      	movs	r0, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
    32f4:	2504      	movs	r5, #4
		status_flags |= ADC_STATUS_WINDOW;
    32f6:	2402      	movs	r4, #2
    32f8:	e001      	b.n	32fe <setupBoard+0x32>
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    32fa:	4210      	tst	r0, r2
    32fc:	d10a      	bne.n	3314 <setupBoard+0x48>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    32fe:	7e0b      	ldrb	r3, [r1, #24]
    3300:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
    3302:	0002      	movs	r2, r0
    3304:	401a      	ands	r2, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
    3306:	421d      	tst	r5, r3
    3308:	d000      	beq.n	330c <setupBoard+0x40>
		status_flags |= ADC_STATUS_WINDOW;
    330a:	4322      	orrs	r2, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    330c:	421c      	tst	r4, r3
    330e:	d0f4      	beq.n	32fa <setupBoard+0x2e>
		status_flags |= ADC_STATUS_OVERRUN;
    3310:	432a      	orrs	r2, r5
    3312:	e7f2      	b.n	32fa <setupBoard+0x2e>
    3314:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    3316:	b25b      	sxtb	r3, r3
    3318:	2b00      	cmp	r3, #0
    331a:	dbfb      	blt.n	3314 <setupBoard+0x48>
	*result = adc_module->RESULT.reg;
    331c:	8b4c      	ldrh	r4, [r1, #26]
    331e:	b2a4      	uxth	r4, r4
	adc_module->INTFLAG.reg = int_flags;
    3320:	2301      	movs	r3, #1
    3322:	760b      	strb	r3, [r1, #24]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    3324:	7e0a      	ldrb	r2, [r1, #24]
    3326:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    3328:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    332a:	0750      	lsls	r0, r2, #29
    332c:	d501      	bpl.n	3332 <setupBoard+0x66>
		status_flags |= ADC_STATUS_WINDOW;
    332e:	2002      	movs	r0, #2
    3330:	4303      	orrs	r3, r0
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    3332:	0792      	lsls	r2, r2, #30
    3334:	d501      	bpl.n	333a <setupBoard+0x6e>
		status_flags |= ADC_STATUS_OVERRUN;
    3336:	2204      	movs	r2, #4
    3338:	4313      	orrs	r3, r2
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    333a:	075b      	lsls	r3, r3, #29
    333c:	d501      	bpl.n	3342 <setupBoard+0x76>
	adc_module->INTFLAG.reg = int_flags;
    333e:	2302      	movs	r3, #2
    3340:	760b      	strb	r3, [r1, #24]
	adc_start_conversion(&adc_instance);
	do {
	/* Wait for conversion to be done and read out result */
	} while (adc_read(&adc_instance, &adcResult) == STATUS_BUSY);
	
	delay_init();
    3342:	4b16      	ldr	r3, [pc, #88]	; (339c <setupBoard+0xd0>)
    3344:	4798      	blx	r3
	srand(adcResult);
    3346:	0020      	movs	r0, r4
    3348:	4b15      	ldr	r3, [pc, #84]	; (33a0 <setupBoard+0xd4>)
    334a:	4798      	blx	r3
	conf_systick();
    334c:	4c15      	ldr	r4, [pc, #84]	; (33a4 <setupBoard+0xd8>)
    334e:	47a0      	blx	r4
    
	//configure_usart_USB();
	
	configure_usart();
    3350:	4b15      	ldr	r3, [pc, #84]	; (33a8 <setupBoard+0xdc>)
    3352:	4798      	blx	r3
	configure_usart_callbacks();
    3354:	4b15      	ldr	r3, [pc, #84]	; (33ac <setupBoard+0xe0>)
    3356:	4798      	blx	r3
	cpu_irq_enable();
    3358:	2201      	movs	r2, #1
    335a:	4b15      	ldr	r3, [pc, #84]	; (33b0 <setupBoard+0xe4>)
    335c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    335e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3362:	b662      	cpsie	i
	system_interrupt_enable_global();
	
	//I have no idea why I need to call this; it's in the callback and it
	//doesn't work without this line here. Remove this at your own peril.
	usart_read_buffer_job(&usart_instance, (uint8_t*)&rx_buf, 1);
    3364:	4913      	ldr	r1, [pc, #76]	; (33b4 <setupBoard+0xe8>)
    3366:	4814      	ldr	r0, [pc, #80]	; (33b8 <setupBoard+0xec>)
    3368:	4b14      	ldr	r3, [pc, #80]	; (33bc <setupBoard+0xf0>)
    336a:	4798      	blx	r3

	printf("\n\rSerial OK 9600 8N1\n\r");
    336c:	4814      	ldr	r0, [pc, #80]	; (33c0 <setupBoard+0xf4>)
    336e:	4b15      	ldr	r3, [pc, #84]	; (33c4 <setupBoard+0xf8>)
    3370:	4798      	blx	r3
	
	InitLCD();
    3372:	4b15      	ldr	r3, [pc, #84]	; (33c8 <setupBoard+0xfc>)
    3374:	4798      	blx	r3
	splashScreen();
    3376:	4b15      	ldr	r3, [pc, #84]	; (33cc <setupBoard+0x100>)
    3378:	4798      	blx	r3
			
	conf_systick();
    337a:	47a0      	blx	r4

	xCharPos=0;
    337c:	2300      	movs	r3, #0
    337e:	4a14      	ldr	r2, [pc, #80]	; (33d0 <setupBoard+0x104>)
    3380:	8013      	strh	r3, [r2, #0]
	yCharPos=0;
    3382:	4a14      	ldr	r2, [pc, #80]	; (33d4 <setupBoard+0x108>)
    3384:	8013      	strh	r3, [r2, #0]
	drawChar(0xFF);
    3386:	20ff      	movs	r0, #255	; 0xff
    3388:	4b13      	ldr	r3, [pc, #76]	; (33d8 <setupBoard+0x10c>)
    338a:	4798      	blx	r3
}
    338c:	bd70      	pop	{r4, r5, r6, pc}
    338e:	46c0      	nop			; (mov r8, r8)
    3390:	00001e41 	.word	0x00001e41
    3394:	0000326d 	.word	0x0000326d
    3398:	20000a9c 	.word	0x20000a9c
    339c:	0000063d 	.word	0x0000063d
    33a0:	00003a05 	.word	0x00003a05
    33a4:	000030e9 	.word	0x000030e9
    33a8:	0000313d 	.word	0x0000313d
    33ac:	00003245 	.word	0x00003245
    33b0:	20000008 	.word	0x20000008
    33b4:	20000a99 	.word	0x20000a99
    33b8:	200002d8 	.word	0x200002d8
    33bc:	0000151d 	.word	0x0000151d
    33c0:	00006b18 	.word	0x00006b18
    33c4:	000039a9 	.word	0x000039a9
    33c8:	00002e19 	.word	0x00002e19
    33cc:	000002a1 	.word	0x000002a1
    33d0:	20000298 	.word	0x20000298
    33d4:	2000029a 	.word	0x2000029a
    33d8:	00002025 	.word	0x00002025

000033dc <main>:
{
    33dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	setupBoard();
    33de:	4b21      	ldr	r3, [pc, #132]	; (3464 <main+0x88>)
    33e0:	4798      	blx	r3
	settings.localEcho=false;
    33e2:	2200      	movs	r2, #0
    33e4:	4b20      	ldr	r3, [pc, #128]	; (3468 <main+0x8c>)
    33e6:	701a      	strb	r2, [r3, #0]
	uint8_t * buffer  = malloc(UART_BUFFER_SIZE * sizeof(uint8_t));
    33e8:	200a      	movs	r0, #10
    33ea:	4b20      	ldr	r3, [pc, #128]	; (346c <main+0x90>)
    33ec:	4798      	blx	r3
	ouroboros = ring_init(buffer, UART_BUFFER_SIZE);
    33ee:	210a      	movs	r1, #10
    33f0:	4b1f      	ldr	r3, [pc, #124]	; (3470 <main+0x94>)
    33f2:	4798      	blx	r3
    33f4:	4b1f      	ldr	r3, [pc, #124]	; (3474 <main+0x98>)
    33f6:	6018      	str	r0, [r3, #0]
		if((ul_tickcount % (UINT16_MAX/4) == 0) && (funcLock == false))
    33f8:	4f1f      	ldr	r7, [pc, #124]	; (3478 <main+0x9c>)
    33fa:	4e20      	ldr	r6, [pc, #128]	; (347c <main+0xa0>)
    33fc:	4d20      	ldr	r5, [pc, #128]	; (3480 <main+0xa4>)
    33fe:	e015      	b.n	342c <main+0x50>
		if((ul_tickcount % 200 == 0) && (funcLock == false))
    3400:	21c8      	movs	r1, #200	; 0xc8
    3402:	0020      	movs	r0, r4
    3404:	4b1d      	ldr	r3, [pc, #116]	; (347c <main+0xa0>)
    3406:	4798      	blx	r3
    3408:	b289      	uxth	r1, r1
    340a:	2900      	cmp	r1, #0
    340c:	d10e      	bne.n	342c <main+0x50>
    340e:	4b1d      	ldr	r3, [pc, #116]	; (3484 <main+0xa8>)
    3410:	781b      	ldrb	r3, [r3, #0]
    3412:	2b00      	cmp	r3, #0
    3414:	d10a      	bne.n	342c <main+0x50>
			funcLock = true;
    3416:	4c1b      	ldr	r4, [pc, #108]	; (3484 <main+0xa8>)
    3418:	2301      	movs	r3, #1
    341a:	7023      	strb	r3, [r4, #0]
			readKeyboard();
    341c:	4b1a      	ldr	r3, [pc, #104]	; (3488 <main+0xac>)
    341e:	4798      	blx	r3
			printKeyboardBuffer();
    3420:	4b1a      	ldr	r3, [pc, #104]	; (348c <main+0xb0>)
    3422:	4798      	blx	r3
			parseRXBuffer();
    3424:	4b1a      	ldr	r3, [pc, #104]	; (3490 <main+0xb4>)
    3426:	4798      	blx	r3
			funcLock = false;
    3428:	2300      	movs	r3, #0
    342a:	7023      	strb	r3, [r4, #0]
		__WFI();
    342c:	bf30      	wfi
		if((ul_tickcount % (UINT16_MAX/4) == 0) && (funcLock == false))
    342e:	883c      	ldrh	r4, [r7, #0]
    3430:	0029      	movs	r1, r5
    3432:	0020      	movs	r0, r4
    3434:	47b0      	blx	r6
    3436:	b289      	uxth	r1, r1
    3438:	2900      	cmp	r1, #0
    343a:	d1e1      	bne.n	3400 <main+0x24>
    343c:	4b11      	ldr	r3, [pc, #68]	; (3484 <main+0xa8>)
    343e:	781b      	ldrb	r3, [r3, #0]
    3440:	2b00      	cmp	r3, #0
    3442:	d1f3      	bne.n	342c <main+0x50>
			funcLock = true;
    3444:	4c0f      	ldr	r4, [pc, #60]	; (3484 <main+0xa8>)
    3446:	3301      	adds	r3, #1
    3448:	7023      	strb	r3, [r4, #0]
			blinkCursor();
    344a:	4b12      	ldr	r3, [pc, #72]	; (3494 <main+0xb8>)
    344c:	4798      	blx	r3
			funcLock = false;
    344e:	2300      	movs	r3, #0
    3450:	7023      	strb	r3, [r4, #0]
		if((ul_tickcount % 200 == 0) && (funcLock == false))
    3452:	4b09      	ldr	r3, [pc, #36]	; (3478 <main+0x9c>)
    3454:	8818      	ldrh	r0, [r3, #0]
    3456:	21c8      	movs	r1, #200	; 0xc8
    3458:	4b08      	ldr	r3, [pc, #32]	; (347c <main+0xa0>)
    345a:	4798      	blx	r3
    345c:	b289      	uxth	r1, r1
    345e:	2900      	cmp	r1, #0
    3460:	d0d9      	beq.n	3416 <main+0x3a>
    3462:	e7e3      	b.n	342c <main+0x50>
    3464:	000032cd 	.word	0x000032cd
    3468:	20000a98 	.word	0x20000a98
    346c:	00003821 	.word	0x00003821
    3470:	00000115 	.word	0x00000115
    3474:	200002ac 	.word	0x200002ac
    3478:	2000029e 	.word	0x2000029e
    347c:	000035a5 	.word	0x000035a5
    3480:	00003fff 	.word	0x00003fff
    3484:	2000029c 	.word	0x2000029c
    3488:	000028dd 	.word	0x000028dd
    348c:	000024b9 	.word	0x000024b9
    3490:	00000481 	.word	0x00000481
    3494:	000022bd 	.word	0x000022bd

00003498 <__udivsi3>:
    3498:	2200      	movs	r2, #0
    349a:	0843      	lsrs	r3, r0, #1
    349c:	428b      	cmp	r3, r1
    349e:	d374      	bcc.n	358a <__udivsi3+0xf2>
    34a0:	0903      	lsrs	r3, r0, #4
    34a2:	428b      	cmp	r3, r1
    34a4:	d35f      	bcc.n	3566 <__udivsi3+0xce>
    34a6:	0a03      	lsrs	r3, r0, #8
    34a8:	428b      	cmp	r3, r1
    34aa:	d344      	bcc.n	3536 <__udivsi3+0x9e>
    34ac:	0b03      	lsrs	r3, r0, #12
    34ae:	428b      	cmp	r3, r1
    34b0:	d328      	bcc.n	3504 <__udivsi3+0x6c>
    34b2:	0c03      	lsrs	r3, r0, #16
    34b4:	428b      	cmp	r3, r1
    34b6:	d30d      	bcc.n	34d4 <__udivsi3+0x3c>
    34b8:	22ff      	movs	r2, #255	; 0xff
    34ba:	0209      	lsls	r1, r1, #8
    34bc:	ba12      	rev	r2, r2
    34be:	0c03      	lsrs	r3, r0, #16
    34c0:	428b      	cmp	r3, r1
    34c2:	d302      	bcc.n	34ca <__udivsi3+0x32>
    34c4:	1212      	asrs	r2, r2, #8
    34c6:	0209      	lsls	r1, r1, #8
    34c8:	d065      	beq.n	3596 <__udivsi3+0xfe>
    34ca:	0b03      	lsrs	r3, r0, #12
    34cc:	428b      	cmp	r3, r1
    34ce:	d319      	bcc.n	3504 <__udivsi3+0x6c>
    34d0:	e000      	b.n	34d4 <__udivsi3+0x3c>
    34d2:	0a09      	lsrs	r1, r1, #8
    34d4:	0bc3      	lsrs	r3, r0, #15
    34d6:	428b      	cmp	r3, r1
    34d8:	d301      	bcc.n	34de <__udivsi3+0x46>
    34da:	03cb      	lsls	r3, r1, #15
    34dc:	1ac0      	subs	r0, r0, r3
    34de:	4152      	adcs	r2, r2
    34e0:	0b83      	lsrs	r3, r0, #14
    34e2:	428b      	cmp	r3, r1
    34e4:	d301      	bcc.n	34ea <__udivsi3+0x52>
    34e6:	038b      	lsls	r3, r1, #14
    34e8:	1ac0      	subs	r0, r0, r3
    34ea:	4152      	adcs	r2, r2
    34ec:	0b43      	lsrs	r3, r0, #13
    34ee:	428b      	cmp	r3, r1
    34f0:	d301      	bcc.n	34f6 <__udivsi3+0x5e>
    34f2:	034b      	lsls	r3, r1, #13
    34f4:	1ac0      	subs	r0, r0, r3
    34f6:	4152      	adcs	r2, r2
    34f8:	0b03      	lsrs	r3, r0, #12
    34fa:	428b      	cmp	r3, r1
    34fc:	d301      	bcc.n	3502 <__udivsi3+0x6a>
    34fe:	030b      	lsls	r3, r1, #12
    3500:	1ac0      	subs	r0, r0, r3
    3502:	4152      	adcs	r2, r2
    3504:	0ac3      	lsrs	r3, r0, #11
    3506:	428b      	cmp	r3, r1
    3508:	d301      	bcc.n	350e <__udivsi3+0x76>
    350a:	02cb      	lsls	r3, r1, #11
    350c:	1ac0      	subs	r0, r0, r3
    350e:	4152      	adcs	r2, r2
    3510:	0a83      	lsrs	r3, r0, #10
    3512:	428b      	cmp	r3, r1
    3514:	d301      	bcc.n	351a <__udivsi3+0x82>
    3516:	028b      	lsls	r3, r1, #10
    3518:	1ac0      	subs	r0, r0, r3
    351a:	4152      	adcs	r2, r2
    351c:	0a43      	lsrs	r3, r0, #9
    351e:	428b      	cmp	r3, r1
    3520:	d301      	bcc.n	3526 <__udivsi3+0x8e>
    3522:	024b      	lsls	r3, r1, #9
    3524:	1ac0      	subs	r0, r0, r3
    3526:	4152      	adcs	r2, r2
    3528:	0a03      	lsrs	r3, r0, #8
    352a:	428b      	cmp	r3, r1
    352c:	d301      	bcc.n	3532 <__udivsi3+0x9a>
    352e:	020b      	lsls	r3, r1, #8
    3530:	1ac0      	subs	r0, r0, r3
    3532:	4152      	adcs	r2, r2
    3534:	d2cd      	bcs.n	34d2 <__udivsi3+0x3a>
    3536:	09c3      	lsrs	r3, r0, #7
    3538:	428b      	cmp	r3, r1
    353a:	d301      	bcc.n	3540 <__udivsi3+0xa8>
    353c:	01cb      	lsls	r3, r1, #7
    353e:	1ac0      	subs	r0, r0, r3
    3540:	4152      	adcs	r2, r2
    3542:	0983      	lsrs	r3, r0, #6
    3544:	428b      	cmp	r3, r1
    3546:	d301      	bcc.n	354c <__udivsi3+0xb4>
    3548:	018b      	lsls	r3, r1, #6
    354a:	1ac0      	subs	r0, r0, r3
    354c:	4152      	adcs	r2, r2
    354e:	0943      	lsrs	r3, r0, #5
    3550:	428b      	cmp	r3, r1
    3552:	d301      	bcc.n	3558 <__udivsi3+0xc0>
    3554:	014b      	lsls	r3, r1, #5
    3556:	1ac0      	subs	r0, r0, r3
    3558:	4152      	adcs	r2, r2
    355a:	0903      	lsrs	r3, r0, #4
    355c:	428b      	cmp	r3, r1
    355e:	d301      	bcc.n	3564 <__udivsi3+0xcc>
    3560:	010b      	lsls	r3, r1, #4
    3562:	1ac0      	subs	r0, r0, r3
    3564:	4152      	adcs	r2, r2
    3566:	08c3      	lsrs	r3, r0, #3
    3568:	428b      	cmp	r3, r1
    356a:	d301      	bcc.n	3570 <__udivsi3+0xd8>
    356c:	00cb      	lsls	r3, r1, #3
    356e:	1ac0      	subs	r0, r0, r3
    3570:	4152      	adcs	r2, r2
    3572:	0883      	lsrs	r3, r0, #2
    3574:	428b      	cmp	r3, r1
    3576:	d301      	bcc.n	357c <__udivsi3+0xe4>
    3578:	008b      	lsls	r3, r1, #2
    357a:	1ac0      	subs	r0, r0, r3
    357c:	4152      	adcs	r2, r2
    357e:	0843      	lsrs	r3, r0, #1
    3580:	428b      	cmp	r3, r1
    3582:	d301      	bcc.n	3588 <__udivsi3+0xf0>
    3584:	004b      	lsls	r3, r1, #1
    3586:	1ac0      	subs	r0, r0, r3
    3588:	4152      	adcs	r2, r2
    358a:	1a41      	subs	r1, r0, r1
    358c:	d200      	bcs.n	3590 <__udivsi3+0xf8>
    358e:	4601      	mov	r1, r0
    3590:	4152      	adcs	r2, r2
    3592:	4610      	mov	r0, r2
    3594:	4770      	bx	lr
    3596:	e7ff      	b.n	3598 <__udivsi3+0x100>
    3598:	b501      	push	{r0, lr}
    359a:	2000      	movs	r0, #0
    359c:	f000 f8f0 	bl	3780 <__aeabi_idiv0>
    35a0:	bd02      	pop	{r1, pc}
    35a2:	46c0      	nop			; (mov r8, r8)

000035a4 <__aeabi_uidivmod>:
    35a4:	2900      	cmp	r1, #0
    35a6:	d0f7      	beq.n	3598 <__udivsi3+0x100>
    35a8:	e776      	b.n	3498 <__udivsi3>
    35aa:	4770      	bx	lr

000035ac <__divsi3>:
    35ac:	4603      	mov	r3, r0
    35ae:	430b      	orrs	r3, r1
    35b0:	d47f      	bmi.n	36b2 <__divsi3+0x106>
    35b2:	2200      	movs	r2, #0
    35b4:	0843      	lsrs	r3, r0, #1
    35b6:	428b      	cmp	r3, r1
    35b8:	d374      	bcc.n	36a4 <__divsi3+0xf8>
    35ba:	0903      	lsrs	r3, r0, #4
    35bc:	428b      	cmp	r3, r1
    35be:	d35f      	bcc.n	3680 <__divsi3+0xd4>
    35c0:	0a03      	lsrs	r3, r0, #8
    35c2:	428b      	cmp	r3, r1
    35c4:	d344      	bcc.n	3650 <__divsi3+0xa4>
    35c6:	0b03      	lsrs	r3, r0, #12
    35c8:	428b      	cmp	r3, r1
    35ca:	d328      	bcc.n	361e <__divsi3+0x72>
    35cc:	0c03      	lsrs	r3, r0, #16
    35ce:	428b      	cmp	r3, r1
    35d0:	d30d      	bcc.n	35ee <__divsi3+0x42>
    35d2:	22ff      	movs	r2, #255	; 0xff
    35d4:	0209      	lsls	r1, r1, #8
    35d6:	ba12      	rev	r2, r2
    35d8:	0c03      	lsrs	r3, r0, #16
    35da:	428b      	cmp	r3, r1
    35dc:	d302      	bcc.n	35e4 <__divsi3+0x38>
    35de:	1212      	asrs	r2, r2, #8
    35e0:	0209      	lsls	r1, r1, #8
    35e2:	d065      	beq.n	36b0 <__divsi3+0x104>
    35e4:	0b03      	lsrs	r3, r0, #12
    35e6:	428b      	cmp	r3, r1
    35e8:	d319      	bcc.n	361e <__divsi3+0x72>
    35ea:	e000      	b.n	35ee <__divsi3+0x42>
    35ec:	0a09      	lsrs	r1, r1, #8
    35ee:	0bc3      	lsrs	r3, r0, #15
    35f0:	428b      	cmp	r3, r1
    35f2:	d301      	bcc.n	35f8 <__divsi3+0x4c>
    35f4:	03cb      	lsls	r3, r1, #15
    35f6:	1ac0      	subs	r0, r0, r3
    35f8:	4152      	adcs	r2, r2
    35fa:	0b83      	lsrs	r3, r0, #14
    35fc:	428b      	cmp	r3, r1
    35fe:	d301      	bcc.n	3604 <__divsi3+0x58>
    3600:	038b      	lsls	r3, r1, #14
    3602:	1ac0      	subs	r0, r0, r3
    3604:	4152      	adcs	r2, r2
    3606:	0b43      	lsrs	r3, r0, #13
    3608:	428b      	cmp	r3, r1
    360a:	d301      	bcc.n	3610 <__divsi3+0x64>
    360c:	034b      	lsls	r3, r1, #13
    360e:	1ac0      	subs	r0, r0, r3
    3610:	4152      	adcs	r2, r2
    3612:	0b03      	lsrs	r3, r0, #12
    3614:	428b      	cmp	r3, r1
    3616:	d301      	bcc.n	361c <__divsi3+0x70>
    3618:	030b      	lsls	r3, r1, #12
    361a:	1ac0      	subs	r0, r0, r3
    361c:	4152      	adcs	r2, r2
    361e:	0ac3      	lsrs	r3, r0, #11
    3620:	428b      	cmp	r3, r1
    3622:	d301      	bcc.n	3628 <__divsi3+0x7c>
    3624:	02cb      	lsls	r3, r1, #11
    3626:	1ac0      	subs	r0, r0, r3
    3628:	4152      	adcs	r2, r2
    362a:	0a83      	lsrs	r3, r0, #10
    362c:	428b      	cmp	r3, r1
    362e:	d301      	bcc.n	3634 <__divsi3+0x88>
    3630:	028b      	lsls	r3, r1, #10
    3632:	1ac0      	subs	r0, r0, r3
    3634:	4152      	adcs	r2, r2
    3636:	0a43      	lsrs	r3, r0, #9
    3638:	428b      	cmp	r3, r1
    363a:	d301      	bcc.n	3640 <__divsi3+0x94>
    363c:	024b      	lsls	r3, r1, #9
    363e:	1ac0      	subs	r0, r0, r3
    3640:	4152      	adcs	r2, r2
    3642:	0a03      	lsrs	r3, r0, #8
    3644:	428b      	cmp	r3, r1
    3646:	d301      	bcc.n	364c <__divsi3+0xa0>
    3648:	020b      	lsls	r3, r1, #8
    364a:	1ac0      	subs	r0, r0, r3
    364c:	4152      	adcs	r2, r2
    364e:	d2cd      	bcs.n	35ec <__divsi3+0x40>
    3650:	09c3      	lsrs	r3, r0, #7
    3652:	428b      	cmp	r3, r1
    3654:	d301      	bcc.n	365a <__divsi3+0xae>
    3656:	01cb      	lsls	r3, r1, #7
    3658:	1ac0      	subs	r0, r0, r3
    365a:	4152      	adcs	r2, r2
    365c:	0983      	lsrs	r3, r0, #6
    365e:	428b      	cmp	r3, r1
    3660:	d301      	bcc.n	3666 <__divsi3+0xba>
    3662:	018b      	lsls	r3, r1, #6
    3664:	1ac0      	subs	r0, r0, r3
    3666:	4152      	adcs	r2, r2
    3668:	0943      	lsrs	r3, r0, #5
    366a:	428b      	cmp	r3, r1
    366c:	d301      	bcc.n	3672 <__divsi3+0xc6>
    366e:	014b      	lsls	r3, r1, #5
    3670:	1ac0      	subs	r0, r0, r3
    3672:	4152      	adcs	r2, r2
    3674:	0903      	lsrs	r3, r0, #4
    3676:	428b      	cmp	r3, r1
    3678:	d301      	bcc.n	367e <__divsi3+0xd2>
    367a:	010b      	lsls	r3, r1, #4
    367c:	1ac0      	subs	r0, r0, r3
    367e:	4152      	adcs	r2, r2
    3680:	08c3      	lsrs	r3, r0, #3
    3682:	428b      	cmp	r3, r1
    3684:	d301      	bcc.n	368a <__divsi3+0xde>
    3686:	00cb      	lsls	r3, r1, #3
    3688:	1ac0      	subs	r0, r0, r3
    368a:	4152      	adcs	r2, r2
    368c:	0883      	lsrs	r3, r0, #2
    368e:	428b      	cmp	r3, r1
    3690:	d301      	bcc.n	3696 <__divsi3+0xea>
    3692:	008b      	lsls	r3, r1, #2
    3694:	1ac0      	subs	r0, r0, r3
    3696:	4152      	adcs	r2, r2
    3698:	0843      	lsrs	r3, r0, #1
    369a:	428b      	cmp	r3, r1
    369c:	d301      	bcc.n	36a2 <__divsi3+0xf6>
    369e:	004b      	lsls	r3, r1, #1
    36a0:	1ac0      	subs	r0, r0, r3
    36a2:	4152      	adcs	r2, r2
    36a4:	1a41      	subs	r1, r0, r1
    36a6:	d200      	bcs.n	36aa <__divsi3+0xfe>
    36a8:	4601      	mov	r1, r0
    36aa:	4152      	adcs	r2, r2
    36ac:	4610      	mov	r0, r2
    36ae:	4770      	bx	lr
    36b0:	e05d      	b.n	376e <__divsi3+0x1c2>
    36b2:	0fca      	lsrs	r2, r1, #31
    36b4:	d000      	beq.n	36b8 <__divsi3+0x10c>
    36b6:	4249      	negs	r1, r1
    36b8:	1003      	asrs	r3, r0, #32
    36ba:	d300      	bcc.n	36be <__divsi3+0x112>
    36bc:	4240      	negs	r0, r0
    36be:	4053      	eors	r3, r2
    36c0:	2200      	movs	r2, #0
    36c2:	469c      	mov	ip, r3
    36c4:	0903      	lsrs	r3, r0, #4
    36c6:	428b      	cmp	r3, r1
    36c8:	d32d      	bcc.n	3726 <__divsi3+0x17a>
    36ca:	0a03      	lsrs	r3, r0, #8
    36cc:	428b      	cmp	r3, r1
    36ce:	d312      	bcc.n	36f6 <__divsi3+0x14a>
    36d0:	22fc      	movs	r2, #252	; 0xfc
    36d2:	0189      	lsls	r1, r1, #6
    36d4:	ba12      	rev	r2, r2
    36d6:	0a03      	lsrs	r3, r0, #8
    36d8:	428b      	cmp	r3, r1
    36da:	d30c      	bcc.n	36f6 <__divsi3+0x14a>
    36dc:	0189      	lsls	r1, r1, #6
    36de:	1192      	asrs	r2, r2, #6
    36e0:	428b      	cmp	r3, r1
    36e2:	d308      	bcc.n	36f6 <__divsi3+0x14a>
    36e4:	0189      	lsls	r1, r1, #6
    36e6:	1192      	asrs	r2, r2, #6
    36e8:	428b      	cmp	r3, r1
    36ea:	d304      	bcc.n	36f6 <__divsi3+0x14a>
    36ec:	0189      	lsls	r1, r1, #6
    36ee:	d03a      	beq.n	3766 <__divsi3+0x1ba>
    36f0:	1192      	asrs	r2, r2, #6
    36f2:	e000      	b.n	36f6 <__divsi3+0x14a>
    36f4:	0989      	lsrs	r1, r1, #6
    36f6:	09c3      	lsrs	r3, r0, #7
    36f8:	428b      	cmp	r3, r1
    36fa:	d301      	bcc.n	3700 <__divsi3+0x154>
    36fc:	01cb      	lsls	r3, r1, #7
    36fe:	1ac0      	subs	r0, r0, r3
    3700:	4152      	adcs	r2, r2
    3702:	0983      	lsrs	r3, r0, #6
    3704:	428b      	cmp	r3, r1
    3706:	d301      	bcc.n	370c <__divsi3+0x160>
    3708:	018b      	lsls	r3, r1, #6
    370a:	1ac0      	subs	r0, r0, r3
    370c:	4152      	adcs	r2, r2
    370e:	0943      	lsrs	r3, r0, #5
    3710:	428b      	cmp	r3, r1
    3712:	d301      	bcc.n	3718 <__divsi3+0x16c>
    3714:	014b      	lsls	r3, r1, #5
    3716:	1ac0      	subs	r0, r0, r3
    3718:	4152      	adcs	r2, r2
    371a:	0903      	lsrs	r3, r0, #4
    371c:	428b      	cmp	r3, r1
    371e:	d301      	bcc.n	3724 <__divsi3+0x178>
    3720:	010b      	lsls	r3, r1, #4
    3722:	1ac0      	subs	r0, r0, r3
    3724:	4152      	adcs	r2, r2
    3726:	08c3      	lsrs	r3, r0, #3
    3728:	428b      	cmp	r3, r1
    372a:	d301      	bcc.n	3730 <__divsi3+0x184>
    372c:	00cb      	lsls	r3, r1, #3
    372e:	1ac0      	subs	r0, r0, r3
    3730:	4152      	adcs	r2, r2
    3732:	0883      	lsrs	r3, r0, #2
    3734:	428b      	cmp	r3, r1
    3736:	d301      	bcc.n	373c <__divsi3+0x190>
    3738:	008b      	lsls	r3, r1, #2
    373a:	1ac0      	subs	r0, r0, r3
    373c:	4152      	adcs	r2, r2
    373e:	d2d9      	bcs.n	36f4 <__divsi3+0x148>
    3740:	0843      	lsrs	r3, r0, #1
    3742:	428b      	cmp	r3, r1
    3744:	d301      	bcc.n	374a <__divsi3+0x19e>
    3746:	004b      	lsls	r3, r1, #1
    3748:	1ac0      	subs	r0, r0, r3
    374a:	4152      	adcs	r2, r2
    374c:	1a41      	subs	r1, r0, r1
    374e:	d200      	bcs.n	3752 <__divsi3+0x1a6>
    3750:	4601      	mov	r1, r0
    3752:	4663      	mov	r3, ip
    3754:	4152      	adcs	r2, r2
    3756:	105b      	asrs	r3, r3, #1
    3758:	4610      	mov	r0, r2
    375a:	d301      	bcc.n	3760 <__divsi3+0x1b4>
    375c:	4240      	negs	r0, r0
    375e:	2b00      	cmp	r3, #0
    3760:	d500      	bpl.n	3764 <__divsi3+0x1b8>
    3762:	4249      	negs	r1, r1
    3764:	4770      	bx	lr
    3766:	4663      	mov	r3, ip
    3768:	105b      	asrs	r3, r3, #1
    376a:	d300      	bcc.n	376e <__divsi3+0x1c2>
    376c:	4240      	negs	r0, r0
    376e:	b501      	push	{r0, lr}
    3770:	2000      	movs	r0, #0
    3772:	f000 f805 	bl	3780 <__aeabi_idiv0>
    3776:	bd02      	pop	{r1, pc}

00003778 <__aeabi_idivmod>:
    3778:	2900      	cmp	r1, #0
    377a:	d0f8      	beq.n	376e <__divsi3+0x1c2>
    377c:	e716      	b.n	35ac <__divsi3>
    377e:	4770      	bx	lr

00003780 <__aeabi_idiv0>:
    3780:	4770      	bx	lr
    3782:	46c0      	nop			; (mov r8, r8)

00003784 <__aeabi_lmul>:
    3784:	b5f0      	push	{r4, r5, r6, r7, lr}
    3786:	46ce      	mov	lr, r9
    3788:	4647      	mov	r7, r8
    378a:	0415      	lsls	r5, r2, #16
    378c:	0c2d      	lsrs	r5, r5, #16
    378e:	002e      	movs	r6, r5
    3790:	b580      	push	{r7, lr}
    3792:	0407      	lsls	r7, r0, #16
    3794:	0c14      	lsrs	r4, r2, #16
    3796:	0c3f      	lsrs	r7, r7, #16
    3798:	4699      	mov	r9, r3
    379a:	0c03      	lsrs	r3, r0, #16
    379c:	437e      	muls	r6, r7
    379e:	435d      	muls	r5, r3
    37a0:	4367      	muls	r7, r4
    37a2:	4363      	muls	r3, r4
    37a4:	197f      	adds	r7, r7, r5
    37a6:	0c34      	lsrs	r4, r6, #16
    37a8:	19e4      	adds	r4, r4, r7
    37aa:	469c      	mov	ip, r3
    37ac:	42a5      	cmp	r5, r4
    37ae:	d903      	bls.n	37b8 <__aeabi_lmul+0x34>
    37b0:	2380      	movs	r3, #128	; 0x80
    37b2:	025b      	lsls	r3, r3, #9
    37b4:	4698      	mov	r8, r3
    37b6:	44c4      	add	ip, r8
    37b8:	464b      	mov	r3, r9
    37ba:	4351      	muls	r1, r2
    37bc:	4343      	muls	r3, r0
    37be:	0436      	lsls	r6, r6, #16
    37c0:	0c36      	lsrs	r6, r6, #16
    37c2:	0c25      	lsrs	r5, r4, #16
    37c4:	0424      	lsls	r4, r4, #16
    37c6:	4465      	add	r5, ip
    37c8:	19a4      	adds	r4, r4, r6
    37ca:	1859      	adds	r1, r3, r1
    37cc:	1949      	adds	r1, r1, r5
    37ce:	0020      	movs	r0, r4
    37d0:	bc0c      	pop	{r2, r3}
    37d2:	4690      	mov	r8, r2
    37d4:	4699      	mov	r9, r3
    37d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000037d8 <__libc_init_array>:
    37d8:	b570      	push	{r4, r5, r6, lr}
    37da:	2600      	movs	r6, #0
    37dc:	4d0c      	ldr	r5, [pc, #48]	; (3810 <__libc_init_array+0x38>)
    37de:	4c0d      	ldr	r4, [pc, #52]	; (3814 <__libc_init_array+0x3c>)
    37e0:	1b64      	subs	r4, r4, r5
    37e2:	10a4      	asrs	r4, r4, #2
    37e4:	42a6      	cmp	r6, r4
    37e6:	d109      	bne.n	37fc <__libc_init_array+0x24>
    37e8:	2600      	movs	r6, #0
    37ea:	f003 f9ed 	bl	6bc8 <_init>
    37ee:	4d0a      	ldr	r5, [pc, #40]	; (3818 <__libc_init_array+0x40>)
    37f0:	4c0a      	ldr	r4, [pc, #40]	; (381c <__libc_init_array+0x44>)
    37f2:	1b64      	subs	r4, r4, r5
    37f4:	10a4      	asrs	r4, r4, #2
    37f6:	42a6      	cmp	r6, r4
    37f8:	d105      	bne.n	3806 <__libc_init_array+0x2e>
    37fa:	bd70      	pop	{r4, r5, r6, pc}
    37fc:	00b3      	lsls	r3, r6, #2
    37fe:	58eb      	ldr	r3, [r5, r3]
    3800:	4798      	blx	r3
    3802:	3601      	adds	r6, #1
    3804:	e7ee      	b.n	37e4 <__libc_init_array+0xc>
    3806:	00b3      	lsls	r3, r6, #2
    3808:	58eb      	ldr	r3, [r5, r3]
    380a:	4798      	blx	r3
    380c:	3601      	adds	r6, #1
    380e:	e7f2      	b.n	37f6 <__libc_init_array+0x1e>
    3810:	00006bd4 	.word	0x00006bd4
    3814:	00006bd4 	.word	0x00006bd4
    3818:	00006bd4 	.word	0x00006bd4
    381c:	00006bd8 	.word	0x00006bd8

00003820 <malloc>:
    3820:	b510      	push	{r4, lr}
    3822:	4b03      	ldr	r3, [pc, #12]	; (3830 <malloc+0x10>)
    3824:	0001      	movs	r1, r0
    3826:	6818      	ldr	r0, [r3, #0]
    3828:	f000 f860 	bl	38ec <_malloc_r>
    382c:	bd10      	pop	{r4, pc}
    382e:	46c0      	nop			; (mov r8, r8)
    3830:	20000158 	.word	0x20000158

00003834 <memcpy>:
    3834:	2300      	movs	r3, #0
    3836:	b510      	push	{r4, lr}
    3838:	429a      	cmp	r2, r3
    383a:	d100      	bne.n	383e <memcpy+0xa>
    383c:	bd10      	pop	{r4, pc}
    383e:	5ccc      	ldrb	r4, [r1, r3]
    3840:	54c4      	strb	r4, [r0, r3]
    3842:	3301      	adds	r3, #1
    3844:	e7f8      	b.n	3838 <memcpy+0x4>

00003846 <memset>:
    3846:	0003      	movs	r3, r0
    3848:	1882      	adds	r2, r0, r2
    384a:	4293      	cmp	r3, r2
    384c:	d100      	bne.n	3850 <memset+0xa>
    384e:	4770      	bx	lr
    3850:	7019      	strb	r1, [r3, #0]
    3852:	3301      	adds	r3, #1
    3854:	e7f9      	b.n	384a <memset+0x4>
	...

00003858 <_free_r>:
    3858:	b570      	push	{r4, r5, r6, lr}
    385a:	0005      	movs	r5, r0
    385c:	2900      	cmp	r1, #0
    385e:	d010      	beq.n	3882 <_free_r+0x2a>
    3860:	1f0c      	subs	r4, r1, #4
    3862:	6823      	ldr	r3, [r4, #0]
    3864:	2b00      	cmp	r3, #0
    3866:	da00      	bge.n	386a <_free_r+0x12>
    3868:	18e4      	adds	r4, r4, r3
    386a:	0028      	movs	r0, r5
    386c:	f000 fbfe 	bl	406c <__malloc_lock>
    3870:	4a1d      	ldr	r2, [pc, #116]	; (38e8 <_free_r+0x90>)
    3872:	6813      	ldr	r3, [r2, #0]
    3874:	2b00      	cmp	r3, #0
    3876:	d105      	bne.n	3884 <_free_r+0x2c>
    3878:	6063      	str	r3, [r4, #4]
    387a:	6014      	str	r4, [r2, #0]
    387c:	0028      	movs	r0, r5
    387e:	f000 fbf6 	bl	406e <__malloc_unlock>
    3882:	bd70      	pop	{r4, r5, r6, pc}
    3884:	42a3      	cmp	r3, r4
    3886:	d909      	bls.n	389c <_free_r+0x44>
    3888:	6821      	ldr	r1, [r4, #0]
    388a:	1860      	adds	r0, r4, r1
    388c:	4283      	cmp	r3, r0
    388e:	d1f3      	bne.n	3878 <_free_r+0x20>
    3890:	6818      	ldr	r0, [r3, #0]
    3892:	685b      	ldr	r3, [r3, #4]
    3894:	1841      	adds	r1, r0, r1
    3896:	6021      	str	r1, [r4, #0]
    3898:	e7ee      	b.n	3878 <_free_r+0x20>
    389a:	0013      	movs	r3, r2
    389c:	685a      	ldr	r2, [r3, #4]
    389e:	2a00      	cmp	r2, #0
    38a0:	d001      	beq.n	38a6 <_free_r+0x4e>
    38a2:	42a2      	cmp	r2, r4
    38a4:	d9f9      	bls.n	389a <_free_r+0x42>
    38a6:	6819      	ldr	r1, [r3, #0]
    38a8:	1858      	adds	r0, r3, r1
    38aa:	42a0      	cmp	r0, r4
    38ac:	d10b      	bne.n	38c6 <_free_r+0x6e>
    38ae:	6820      	ldr	r0, [r4, #0]
    38b0:	1809      	adds	r1, r1, r0
    38b2:	1858      	adds	r0, r3, r1
    38b4:	6019      	str	r1, [r3, #0]
    38b6:	4282      	cmp	r2, r0
    38b8:	d1e0      	bne.n	387c <_free_r+0x24>
    38ba:	6810      	ldr	r0, [r2, #0]
    38bc:	6852      	ldr	r2, [r2, #4]
    38be:	1841      	adds	r1, r0, r1
    38c0:	6019      	str	r1, [r3, #0]
    38c2:	605a      	str	r2, [r3, #4]
    38c4:	e7da      	b.n	387c <_free_r+0x24>
    38c6:	42a0      	cmp	r0, r4
    38c8:	d902      	bls.n	38d0 <_free_r+0x78>
    38ca:	230c      	movs	r3, #12
    38cc:	602b      	str	r3, [r5, #0]
    38ce:	e7d5      	b.n	387c <_free_r+0x24>
    38d0:	6821      	ldr	r1, [r4, #0]
    38d2:	1860      	adds	r0, r4, r1
    38d4:	4282      	cmp	r2, r0
    38d6:	d103      	bne.n	38e0 <_free_r+0x88>
    38d8:	6810      	ldr	r0, [r2, #0]
    38da:	6852      	ldr	r2, [r2, #4]
    38dc:	1841      	adds	r1, r0, r1
    38de:	6021      	str	r1, [r4, #0]
    38e0:	6062      	str	r2, [r4, #4]
    38e2:	605c      	str	r4, [r3, #4]
    38e4:	e7ca      	b.n	387c <_free_r+0x24>
    38e6:	46c0      	nop			; (mov r8, r8)
    38e8:	200002a0 	.word	0x200002a0

000038ec <_malloc_r>:
    38ec:	2303      	movs	r3, #3
    38ee:	b570      	push	{r4, r5, r6, lr}
    38f0:	1ccd      	adds	r5, r1, #3
    38f2:	439d      	bics	r5, r3
    38f4:	3508      	adds	r5, #8
    38f6:	0006      	movs	r6, r0
    38f8:	2d0c      	cmp	r5, #12
    38fa:	d21e      	bcs.n	393a <_malloc_r+0x4e>
    38fc:	250c      	movs	r5, #12
    38fe:	42a9      	cmp	r1, r5
    3900:	d81d      	bhi.n	393e <_malloc_r+0x52>
    3902:	0030      	movs	r0, r6
    3904:	f000 fbb2 	bl	406c <__malloc_lock>
    3908:	4a25      	ldr	r2, [pc, #148]	; (39a0 <_malloc_r+0xb4>)
    390a:	6814      	ldr	r4, [r2, #0]
    390c:	0021      	movs	r1, r4
    390e:	2900      	cmp	r1, #0
    3910:	d119      	bne.n	3946 <_malloc_r+0x5a>
    3912:	4c24      	ldr	r4, [pc, #144]	; (39a4 <_malloc_r+0xb8>)
    3914:	6823      	ldr	r3, [r4, #0]
    3916:	2b00      	cmp	r3, #0
    3918:	d103      	bne.n	3922 <_malloc_r+0x36>
    391a:	0030      	movs	r0, r6
    391c:	f000 f8dc 	bl	3ad8 <_sbrk_r>
    3920:	6020      	str	r0, [r4, #0]
    3922:	0029      	movs	r1, r5
    3924:	0030      	movs	r0, r6
    3926:	f000 f8d7 	bl	3ad8 <_sbrk_r>
    392a:	1c43      	adds	r3, r0, #1
    392c:	d12c      	bne.n	3988 <_malloc_r+0x9c>
    392e:	230c      	movs	r3, #12
    3930:	0030      	movs	r0, r6
    3932:	6033      	str	r3, [r6, #0]
    3934:	f000 fb9b 	bl	406e <__malloc_unlock>
    3938:	e003      	b.n	3942 <_malloc_r+0x56>
    393a:	2d00      	cmp	r5, #0
    393c:	dadf      	bge.n	38fe <_malloc_r+0x12>
    393e:	230c      	movs	r3, #12
    3940:	6033      	str	r3, [r6, #0]
    3942:	2000      	movs	r0, #0
    3944:	bd70      	pop	{r4, r5, r6, pc}
    3946:	680b      	ldr	r3, [r1, #0]
    3948:	1b5b      	subs	r3, r3, r5
    394a:	d41a      	bmi.n	3982 <_malloc_r+0x96>
    394c:	2b0b      	cmp	r3, #11
    394e:	d903      	bls.n	3958 <_malloc_r+0x6c>
    3950:	600b      	str	r3, [r1, #0]
    3952:	18cc      	adds	r4, r1, r3
    3954:	6025      	str	r5, [r4, #0]
    3956:	e003      	b.n	3960 <_malloc_r+0x74>
    3958:	428c      	cmp	r4, r1
    395a:	d10e      	bne.n	397a <_malloc_r+0x8e>
    395c:	6863      	ldr	r3, [r4, #4]
    395e:	6013      	str	r3, [r2, #0]
    3960:	0030      	movs	r0, r6
    3962:	f000 fb84 	bl	406e <__malloc_unlock>
    3966:	0020      	movs	r0, r4
    3968:	2207      	movs	r2, #7
    396a:	300b      	adds	r0, #11
    396c:	1d23      	adds	r3, r4, #4
    396e:	4390      	bics	r0, r2
    3970:	1ac3      	subs	r3, r0, r3
    3972:	d0e7      	beq.n	3944 <_malloc_r+0x58>
    3974:	425a      	negs	r2, r3
    3976:	50e2      	str	r2, [r4, r3]
    3978:	e7e4      	b.n	3944 <_malloc_r+0x58>
    397a:	684b      	ldr	r3, [r1, #4]
    397c:	6063      	str	r3, [r4, #4]
    397e:	000c      	movs	r4, r1
    3980:	e7ee      	b.n	3960 <_malloc_r+0x74>
    3982:	000c      	movs	r4, r1
    3984:	6849      	ldr	r1, [r1, #4]
    3986:	e7c2      	b.n	390e <_malloc_r+0x22>
    3988:	2303      	movs	r3, #3
    398a:	1cc4      	adds	r4, r0, #3
    398c:	439c      	bics	r4, r3
    398e:	42a0      	cmp	r0, r4
    3990:	d0e0      	beq.n	3954 <_malloc_r+0x68>
    3992:	1a21      	subs	r1, r4, r0
    3994:	0030      	movs	r0, r6
    3996:	f000 f89f 	bl	3ad8 <_sbrk_r>
    399a:	1c43      	adds	r3, r0, #1
    399c:	d1da      	bne.n	3954 <_malloc_r+0x68>
    399e:	e7c6      	b.n	392e <_malloc_r+0x42>
    39a0:	200002a0 	.word	0x200002a0
    39a4:	200002a4 	.word	0x200002a4

000039a8 <iprintf>:
    39a8:	b40f      	push	{r0, r1, r2, r3}
    39aa:	4b0b      	ldr	r3, [pc, #44]	; (39d8 <iprintf+0x30>)
    39ac:	b513      	push	{r0, r1, r4, lr}
    39ae:	681c      	ldr	r4, [r3, #0]
    39b0:	2c00      	cmp	r4, #0
    39b2:	d005      	beq.n	39c0 <iprintf+0x18>
    39b4:	69a3      	ldr	r3, [r4, #24]
    39b6:	2b00      	cmp	r3, #0
    39b8:	d102      	bne.n	39c0 <iprintf+0x18>
    39ba:	0020      	movs	r0, r4
    39bc:	f000 fa54 	bl	3e68 <__sinit>
    39c0:	ab05      	add	r3, sp, #20
    39c2:	9a04      	ldr	r2, [sp, #16]
    39c4:	68a1      	ldr	r1, [r4, #8]
    39c6:	0020      	movs	r0, r4
    39c8:	9301      	str	r3, [sp, #4]
    39ca:	f000 fb79 	bl	40c0 <_vfiprintf_r>
    39ce:	bc16      	pop	{r1, r2, r4}
    39d0:	bc08      	pop	{r3}
    39d2:	b004      	add	sp, #16
    39d4:	4718      	bx	r3
    39d6:	46c0      	nop			; (mov r8, r8)
    39d8:	20000158 	.word	0x20000158

000039dc <putchar>:
    39dc:	4b08      	ldr	r3, [pc, #32]	; (3a00 <putchar+0x24>)
    39de:	b570      	push	{r4, r5, r6, lr}
    39e0:	681c      	ldr	r4, [r3, #0]
    39e2:	0005      	movs	r5, r0
    39e4:	2c00      	cmp	r4, #0
    39e6:	d005      	beq.n	39f4 <putchar+0x18>
    39e8:	69a3      	ldr	r3, [r4, #24]
    39ea:	2b00      	cmp	r3, #0
    39ec:	d102      	bne.n	39f4 <putchar+0x18>
    39ee:	0020      	movs	r0, r4
    39f0:	f000 fa3a 	bl	3e68 <__sinit>
    39f4:	0029      	movs	r1, r5
    39f6:	68a2      	ldr	r2, [r4, #8]
    39f8:	0020      	movs	r0, r4
    39fa:	f000 fe05 	bl	4608 <_putc_r>
    39fe:	bd70      	pop	{r4, r5, r6, pc}
    3a00:	20000158 	.word	0x20000158

00003a04 <srand>:
    3a04:	4b10      	ldr	r3, [pc, #64]	; (3a48 <srand+0x44>)
    3a06:	b570      	push	{r4, r5, r6, lr}
    3a08:	681c      	ldr	r4, [r3, #0]
    3a0a:	0005      	movs	r5, r0
    3a0c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    3a0e:	2b00      	cmp	r3, #0
    3a10:	d115      	bne.n	3a3e <srand+0x3a>
    3a12:	2018      	movs	r0, #24
    3a14:	f7ff ff04 	bl	3820 <malloc>
    3a18:	4b0c      	ldr	r3, [pc, #48]	; (3a4c <srand+0x48>)
    3a1a:	63a0      	str	r0, [r4, #56]	; 0x38
    3a1c:	8003      	strh	r3, [r0, #0]
    3a1e:	4b0c      	ldr	r3, [pc, #48]	; (3a50 <srand+0x4c>)
    3a20:	2201      	movs	r2, #1
    3a22:	8043      	strh	r3, [r0, #2]
    3a24:	4b0b      	ldr	r3, [pc, #44]	; (3a54 <srand+0x50>)
    3a26:	8083      	strh	r3, [r0, #4]
    3a28:	4b0b      	ldr	r3, [pc, #44]	; (3a58 <srand+0x54>)
    3a2a:	80c3      	strh	r3, [r0, #6]
    3a2c:	4b0b      	ldr	r3, [pc, #44]	; (3a5c <srand+0x58>)
    3a2e:	8103      	strh	r3, [r0, #8]
    3a30:	2305      	movs	r3, #5
    3a32:	8143      	strh	r3, [r0, #10]
    3a34:	3306      	adds	r3, #6
    3a36:	8183      	strh	r3, [r0, #12]
    3a38:	2300      	movs	r3, #0
    3a3a:	6102      	str	r2, [r0, #16]
    3a3c:	6143      	str	r3, [r0, #20]
    3a3e:	2200      	movs	r2, #0
    3a40:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    3a42:	611d      	str	r5, [r3, #16]
    3a44:	615a      	str	r2, [r3, #20]
    3a46:	bd70      	pop	{r4, r5, r6, pc}
    3a48:	20000158 	.word	0x20000158
    3a4c:	0000330e 	.word	0x0000330e
    3a50:	ffffabcd 	.word	0xffffabcd
    3a54:	00001234 	.word	0x00001234
    3a58:	ffffe66d 	.word	0xffffe66d
    3a5c:	ffffdeec 	.word	0xffffdeec

00003a60 <rand>:
    3a60:	4b15      	ldr	r3, [pc, #84]	; (3ab8 <rand+0x58>)
    3a62:	b510      	push	{r4, lr}
    3a64:	681c      	ldr	r4, [r3, #0]
    3a66:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    3a68:	2b00      	cmp	r3, #0
    3a6a:	d115      	bne.n	3a98 <rand+0x38>
    3a6c:	2018      	movs	r0, #24
    3a6e:	f7ff fed7 	bl	3820 <malloc>
    3a72:	4b12      	ldr	r3, [pc, #72]	; (3abc <rand+0x5c>)
    3a74:	63a0      	str	r0, [r4, #56]	; 0x38
    3a76:	8003      	strh	r3, [r0, #0]
    3a78:	4b11      	ldr	r3, [pc, #68]	; (3ac0 <rand+0x60>)
    3a7a:	2201      	movs	r2, #1
    3a7c:	8043      	strh	r3, [r0, #2]
    3a7e:	4b11      	ldr	r3, [pc, #68]	; (3ac4 <rand+0x64>)
    3a80:	8083      	strh	r3, [r0, #4]
    3a82:	4b11      	ldr	r3, [pc, #68]	; (3ac8 <rand+0x68>)
    3a84:	80c3      	strh	r3, [r0, #6]
    3a86:	4b11      	ldr	r3, [pc, #68]	; (3acc <rand+0x6c>)
    3a88:	8103      	strh	r3, [r0, #8]
    3a8a:	2305      	movs	r3, #5
    3a8c:	8143      	strh	r3, [r0, #10]
    3a8e:	3306      	adds	r3, #6
    3a90:	8183      	strh	r3, [r0, #12]
    3a92:	2300      	movs	r3, #0
    3a94:	6102      	str	r2, [r0, #16]
    3a96:	6143      	str	r3, [r0, #20]
    3a98:	6ba4      	ldr	r4, [r4, #56]	; 0x38
    3a9a:	4a0d      	ldr	r2, [pc, #52]	; (3ad0 <rand+0x70>)
    3a9c:	6920      	ldr	r0, [r4, #16]
    3a9e:	6961      	ldr	r1, [r4, #20]
    3aa0:	4b0c      	ldr	r3, [pc, #48]	; (3ad4 <rand+0x74>)
    3aa2:	f7ff fe6f 	bl	3784 <__aeabi_lmul>
    3aa6:	2201      	movs	r2, #1
    3aa8:	2300      	movs	r3, #0
    3aaa:	1880      	adds	r0, r0, r2
    3aac:	4159      	adcs	r1, r3
    3aae:	6120      	str	r0, [r4, #16]
    3ab0:	6161      	str	r1, [r4, #20]
    3ab2:	0048      	lsls	r0, r1, #1
    3ab4:	0840      	lsrs	r0, r0, #1
    3ab6:	bd10      	pop	{r4, pc}
    3ab8:	20000158 	.word	0x20000158
    3abc:	0000330e 	.word	0x0000330e
    3ac0:	ffffabcd 	.word	0xffffabcd
    3ac4:	00001234 	.word	0x00001234
    3ac8:	ffffe66d 	.word	0xffffe66d
    3acc:	ffffdeec 	.word	0xffffdeec
    3ad0:	4c957f2d 	.word	0x4c957f2d
    3ad4:	5851f42d 	.word	0x5851f42d

00003ad8 <_sbrk_r>:
    3ad8:	2300      	movs	r3, #0
    3ada:	b570      	push	{r4, r5, r6, lr}
    3adc:	4c06      	ldr	r4, [pc, #24]	; (3af8 <_sbrk_r+0x20>)
    3ade:	0005      	movs	r5, r0
    3ae0:	0008      	movs	r0, r1
    3ae2:	6023      	str	r3, [r4, #0]
    3ae4:	f7fe fa80 	bl	1fe8 <_sbrk>
    3ae8:	1c43      	adds	r3, r0, #1
    3aea:	d103      	bne.n	3af4 <_sbrk_r+0x1c>
    3aec:	6823      	ldr	r3, [r4, #0]
    3aee:	2b00      	cmp	r3, #0
    3af0:	d000      	beq.n	3af4 <_sbrk_r+0x1c>
    3af2:	602b      	str	r3, [r5, #0]
    3af4:	bd70      	pop	{r4, r5, r6, pc}
    3af6:	46c0      	nop			; (mov r8, r8)
    3af8:	20000abc 	.word	0x20000abc

00003afc <setbuf>:
    3afc:	424a      	negs	r2, r1
    3afe:	414a      	adcs	r2, r1
    3b00:	2380      	movs	r3, #128	; 0x80
    3b02:	b510      	push	{r4, lr}
    3b04:	0052      	lsls	r2, r2, #1
    3b06:	00db      	lsls	r3, r3, #3
    3b08:	f000 f802 	bl	3b10 <setvbuf>
    3b0c:	bd10      	pop	{r4, pc}
	...

00003b10 <setvbuf>:
    3b10:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b12:	001d      	movs	r5, r3
    3b14:	4b4f      	ldr	r3, [pc, #316]	; (3c54 <setvbuf+0x144>)
    3b16:	b085      	sub	sp, #20
    3b18:	681e      	ldr	r6, [r3, #0]
    3b1a:	0004      	movs	r4, r0
    3b1c:	000f      	movs	r7, r1
    3b1e:	9200      	str	r2, [sp, #0]
    3b20:	2e00      	cmp	r6, #0
    3b22:	d005      	beq.n	3b30 <setvbuf+0x20>
    3b24:	69b3      	ldr	r3, [r6, #24]
    3b26:	2b00      	cmp	r3, #0
    3b28:	d102      	bne.n	3b30 <setvbuf+0x20>
    3b2a:	0030      	movs	r0, r6
    3b2c:	f000 f99c 	bl	3e68 <__sinit>
    3b30:	4b49      	ldr	r3, [pc, #292]	; (3c58 <setvbuf+0x148>)
    3b32:	429c      	cmp	r4, r3
    3b34:	d150      	bne.n	3bd8 <setvbuf+0xc8>
    3b36:	6874      	ldr	r4, [r6, #4]
    3b38:	9b00      	ldr	r3, [sp, #0]
    3b3a:	2b02      	cmp	r3, #2
    3b3c:	d005      	beq.n	3b4a <setvbuf+0x3a>
    3b3e:	2b01      	cmp	r3, #1
    3b40:	d900      	bls.n	3b44 <setvbuf+0x34>
    3b42:	e084      	b.n	3c4e <setvbuf+0x13e>
    3b44:	2d00      	cmp	r5, #0
    3b46:	da00      	bge.n	3b4a <setvbuf+0x3a>
    3b48:	e081      	b.n	3c4e <setvbuf+0x13e>
    3b4a:	0021      	movs	r1, r4
    3b4c:	0030      	movs	r0, r6
    3b4e:	f000 f91d 	bl	3d8c <_fflush_r>
    3b52:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3b54:	2900      	cmp	r1, #0
    3b56:	d008      	beq.n	3b6a <setvbuf+0x5a>
    3b58:	0023      	movs	r3, r4
    3b5a:	3344      	adds	r3, #68	; 0x44
    3b5c:	4299      	cmp	r1, r3
    3b5e:	d002      	beq.n	3b66 <setvbuf+0x56>
    3b60:	0030      	movs	r0, r6
    3b62:	f7ff fe79 	bl	3858 <_free_r>
    3b66:	2300      	movs	r3, #0
    3b68:	6363      	str	r3, [r4, #52]	; 0x34
    3b6a:	2300      	movs	r3, #0
    3b6c:	61a3      	str	r3, [r4, #24]
    3b6e:	6063      	str	r3, [r4, #4]
    3b70:	89a3      	ldrh	r3, [r4, #12]
    3b72:	061b      	lsls	r3, r3, #24
    3b74:	d503      	bpl.n	3b7e <setvbuf+0x6e>
    3b76:	6921      	ldr	r1, [r4, #16]
    3b78:	0030      	movs	r0, r6
    3b7a:	f7ff fe6d 	bl	3858 <_free_r>
    3b7e:	89a3      	ldrh	r3, [r4, #12]
    3b80:	4a36      	ldr	r2, [pc, #216]	; (3c5c <setvbuf+0x14c>)
    3b82:	4013      	ands	r3, r2
    3b84:	81a3      	strh	r3, [r4, #12]
    3b86:	9b00      	ldr	r3, [sp, #0]
    3b88:	2b02      	cmp	r3, #2
    3b8a:	d05a      	beq.n	3c42 <setvbuf+0x132>
    3b8c:	ab03      	add	r3, sp, #12
    3b8e:	aa02      	add	r2, sp, #8
    3b90:	0021      	movs	r1, r4
    3b92:	0030      	movs	r0, r6
    3b94:	f000 f9fe 	bl	3f94 <__swhatbuf_r>
    3b98:	89a3      	ldrh	r3, [r4, #12]
    3b9a:	4318      	orrs	r0, r3
    3b9c:	81a0      	strh	r0, [r4, #12]
    3b9e:	2d00      	cmp	r5, #0
    3ba0:	d124      	bne.n	3bec <setvbuf+0xdc>
    3ba2:	9d02      	ldr	r5, [sp, #8]
    3ba4:	0028      	movs	r0, r5
    3ba6:	f7ff fe3b 	bl	3820 <malloc>
    3baa:	9501      	str	r5, [sp, #4]
    3bac:	1e07      	subs	r7, r0, #0
    3bae:	d142      	bne.n	3c36 <setvbuf+0x126>
    3bb0:	9b02      	ldr	r3, [sp, #8]
    3bb2:	9301      	str	r3, [sp, #4]
    3bb4:	42ab      	cmp	r3, r5
    3bb6:	d139      	bne.n	3c2c <setvbuf+0x11c>
    3bb8:	2001      	movs	r0, #1
    3bba:	4240      	negs	r0, r0
    3bbc:	2302      	movs	r3, #2
    3bbe:	89a2      	ldrh	r2, [r4, #12]
    3bc0:	4313      	orrs	r3, r2
    3bc2:	81a3      	strh	r3, [r4, #12]
    3bc4:	2300      	movs	r3, #0
    3bc6:	60a3      	str	r3, [r4, #8]
    3bc8:	0023      	movs	r3, r4
    3bca:	3347      	adds	r3, #71	; 0x47
    3bcc:	6023      	str	r3, [r4, #0]
    3bce:	6123      	str	r3, [r4, #16]
    3bd0:	2301      	movs	r3, #1
    3bd2:	6163      	str	r3, [r4, #20]
    3bd4:	b005      	add	sp, #20
    3bd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3bd8:	4b21      	ldr	r3, [pc, #132]	; (3c60 <setvbuf+0x150>)
    3bda:	429c      	cmp	r4, r3
    3bdc:	d101      	bne.n	3be2 <setvbuf+0xd2>
    3bde:	68b4      	ldr	r4, [r6, #8]
    3be0:	e7aa      	b.n	3b38 <setvbuf+0x28>
    3be2:	4b20      	ldr	r3, [pc, #128]	; (3c64 <setvbuf+0x154>)
    3be4:	429c      	cmp	r4, r3
    3be6:	d1a7      	bne.n	3b38 <setvbuf+0x28>
    3be8:	68f4      	ldr	r4, [r6, #12]
    3bea:	e7a5      	b.n	3b38 <setvbuf+0x28>
    3bec:	2f00      	cmp	r7, #0
    3bee:	d0d9      	beq.n	3ba4 <setvbuf+0x94>
    3bf0:	69b3      	ldr	r3, [r6, #24]
    3bf2:	2b00      	cmp	r3, #0
    3bf4:	d102      	bne.n	3bfc <setvbuf+0xec>
    3bf6:	0030      	movs	r0, r6
    3bf8:	f000 f936 	bl	3e68 <__sinit>
    3bfc:	9b00      	ldr	r3, [sp, #0]
    3bfe:	2b01      	cmp	r3, #1
    3c00:	d103      	bne.n	3c0a <setvbuf+0xfa>
    3c02:	89a3      	ldrh	r3, [r4, #12]
    3c04:	9a00      	ldr	r2, [sp, #0]
    3c06:	431a      	orrs	r2, r3
    3c08:	81a2      	strh	r2, [r4, #12]
    3c0a:	2008      	movs	r0, #8
    3c0c:	89a3      	ldrh	r3, [r4, #12]
    3c0e:	6027      	str	r7, [r4, #0]
    3c10:	6127      	str	r7, [r4, #16]
    3c12:	6165      	str	r5, [r4, #20]
    3c14:	4018      	ands	r0, r3
    3c16:	d018      	beq.n	3c4a <setvbuf+0x13a>
    3c18:	2001      	movs	r0, #1
    3c1a:	4018      	ands	r0, r3
    3c1c:	2300      	movs	r3, #0
    3c1e:	4298      	cmp	r0, r3
    3c20:	d011      	beq.n	3c46 <setvbuf+0x136>
    3c22:	426d      	negs	r5, r5
    3c24:	60a3      	str	r3, [r4, #8]
    3c26:	61a5      	str	r5, [r4, #24]
    3c28:	0018      	movs	r0, r3
    3c2a:	e7d3      	b.n	3bd4 <setvbuf+0xc4>
    3c2c:	9801      	ldr	r0, [sp, #4]
    3c2e:	f7ff fdf7 	bl	3820 <malloc>
    3c32:	1e07      	subs	r7, r0, #0
    3c34:	d0c0      	beq.n	3bb8 <setvbuf+0xa8>
    3c36:	2380      	movs	r3, #128	; 0x80
    3c38:	89a2      	ldrh	r2, [r4, #12]
    3c3a:	9d01      	ldr	r5, [sp, #4]
    3c3c:	4313      	orrs	r3, r2
    3c3e:	81a3      	strh	r3, [r4, #12]
    3c40:	e7d6      	b.n	3bf0 <setvbuf+0xe0>
    3c42:	2000      	movs	r0, #0
    3c44:	e7ba      	b.n	3bbc <setvbuf+0xac>
    3c46:	60a5      	str	r5, [r4, #8]
    3c48:	e7c4      	b.n	3bd4 <setvbuf+0xc4>
    3c4a:	60a0      	str	r0, [r4, #8]
    3c4c:	e7c2      	b.n	3bd4 <setvbuf+0xc4>
    3c4e:	2001      	movs	r0, #1
    3c50:	4240      	negs	r0, r0
    3c52:	e7bf      	b.n	3bd4 <setvbuf+0xc4>
    3c54:	20000158 	.word	0x20000158
    3c58:	00006b54 	.word	0x00006b54
    3c5c:	fffff35c 	.word	0xfffff35c
    3c60:	00006b74 	.word	0x00006b74
    3c64:	00006b34 	.word	0x00006b34

00003c68 <strlen>:
    3c68:	2300      	movs	r3, #0
    3c6a:	5cc2      	ldrb	r2, [r0, r3]
    3c6c:	3301      	adds	r3, #1
    3c6e:	2a00      	cmp	r2, #0
    3c70:	d1fb      	bne.n	3c6a <strlen+0x2>
    3c72:	1e58      	subs	r0, r3, #1
    3c74:	4770      	bx	lr
	...

00003c78 <__sflush_r>:
    3c78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3c7a:	898a      	ldrh	r2, [r1, #12]
    3c7c:	0005      	movs	r5, r0
    3c7e:	000c      	movs	r4, r1
    3c80:	0713      	lsls	r3, r2, #28
    3c82:	d460      	bmi.n	3d46 <__sflush_r+0xce>
    3c84:	684b      	ldr	r3, [r1, #4]
    3c86:	2b00      	cmp	r3, #0
    3c88:	dc04      	bgt.n	3c94 <__sflush_r+0x1c>
    3c8a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    3c8c:	2b00      	cmp	r3, #0
    3c8e:	dc01      	bgt.n	3c94 <__sflush_r+0x1c>
    3c90:	2000      	movs	r0, #0
    3c92:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3c94:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    3c96:	2f00      	cmp	r7, #0
    3c98:	d0fa      	beq.n	3c90 <__sflush_r+0x18>
    3c9a:	2300      	movs	r3, #0
    3c9c:	682e      	ldr	r6, [r5, #0]
    3c9e:	602b      	str	r3, [r5, #0]
    3ca0:	2380      	movs	r3, #128	; 0x80
    3ca2:	015b      	lsls	r3, r3, #5
    3ca4:	401a      	ands	r2, r3
    3ca6:	d034      	beq.n	3d12 <__sflush_r+0x9a>
    3ca8:	6d60      	ldr	r0, [r4, #84]	; 0x54
    3caa:	89a3      	ldrh	r3, [r4, #12]
    3cac:	075b      	lsls	r3, r3, #29
    3cae:	d506      	bpl.n	3cbe <__sflush_r+0x46>
    3cb0:	6863      	ldr	r3, [r4, #4]
    3cb2:	1ac0      	subs	r0, r0, r3
    3cb4:	6b63      	ldr	r3, [r4, #52]	; 0x34
    3cb6:	2b00      	cmp	r3, #0
    3cb8:	d001      	beq.n	3cbe <__sflush_r+0x46>
    3cba:	6c23      	ldr	r3, [r4, #64]	; 0x40
    3cbc:	1ac0      	subs	r0, r0, r3
    3cbe:	0002      	movs	r2, r0
    3cc0:	6a21      	ldr	r1, [r4, #32]
    3cc2:	2300      	movs	r3, #0
    3cc4:	0028      	movs	r0, r5
    3cc6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    3cc8:	47b8      	blx	r7
    3cca:	89a1      	ldrh	r1, [r4, #12]
    3ccc:	1c43      	adds	r3, r0, #1
    3cce:	d106      	bne.n	3cde <__sflush_r+0x66>
    3cd0:	682b      	ldr	r3, [r5, #0]
    3cd2:	2b1d      	cmp	r3, #29
    3cd4:	d831      	bhi.n	3d3a <__sflush_r+0xc2>
    3cd6:	4a2c      	ldr	r2, [pc, #176]	; (3d88 <__sflush_r+0x110>)
    3cd8:	40da      	lsrs	r2, r3
    3cda:	07d3      	lsls	r3, r2, #31
    3cdc:	d52d      	bpl.n	3d3a <__sflush_r+0xc2>
    3cde:	2300      	movs	r3, #0
    3ce0:	6063      	str	r3, [r4, #4]
    3ce2:	6923      	ldr	r3, [r4, #16]
    3ce4:	6023      	str	r3, [r4, #0]
    3ce6:	04cb      	lsls	r3, r1, #19
    3ce8:	d505      	bpl.n	3cf6 <__sflush_r+0x7e>
    3cea:	1c43      	adds	r3, r0, #1
    3cec:	d102      	bne.n	3cf4 <__sflush_r+0x7c>
    3cee:	682b      	ldr	r3, [r5, #0]
    3cf0:	2b00      	cmp	r3, #0
    3cf2:	d100      	bne.n	3cf6 <__sflush_r+0x7e>
    3cf4:	6560      	str	r0, [r4, #84]	; 0x54
    3cf6:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3cf8:	602e      	str	r6, [r5, #0]
    3cfa:	2900      	cmp	r1, #0
    3cfc:	d0c8      	beq.n	3c90 <__sflush_r+0x18>
    3cfe:	0023      	movs	r3, r4
    3d00:	3344      	adds	r3, #68	; 0x44
    3d02:	4299      	cmp	r1, r3
    3d04:	d002      	beq.n	3d0c <__sflush_r+0x94>
    3d06:	0028      	movs	r0, r5
    3d08:	f7ff fda6 	bl	3858 <_free_r>
    3d0c:	2000      	movs	r0, #0
    3d0e:	6360      	str	r0, [r4, #52]	; 0x34
    3d10:	e7bf      	b.n	3c92 <__sflush_r+0x1a>
    3d12:	2301      	movs	r3, #1
    3d14:	6a21      	ldr	r1, [r4, #32]
    3d16:	0028      	movs	r0, r5
    3d18:	47b8      	blx	r7
    3d1a:	1c43      	adds	r3, r0, #1
    3d1c:	d1c5      	bne.n	3caa <__sflush_r+0x32>
    3d1e:	682b      	ldr	r3, [r5, #0]
    3d20:	2b00      	cmp	r3, #0
    3d22:	d0c2      	beq.n	3caa <__sflush_r+0x32>
    3d24:	2b1d      	cmp	r3, #29
    3d26:	d001      	beq.n	3d2c <__sflush_r+0xb4>
    3d28:	2b16      	cmp	r3, #22
    3d2a:	d101      	bne.n	3d30 <__sflush_r+0xb8>
    3d2c:	602e      	str	r6, [r5, #0]
    3d2e:	e7af      	b.n	3c90 <__sflush_r+0x18>
    3d30:	2340      	movs	r3, #64	; 0x40
    3d32:	89a2      	ldrh	r2, [r4, #12]
    3d34:	4313      	orrs	r3, r2
    3d36:	81a3      	strh	r3, [r4, #12]
    3d38:	e7ab      	b.n	3c92 <__sflush_r+0x1a>
    3d3a:	2340      	movs	r3, #64	; 0x40
    3d3c:	430b      	orrs	r3, r1
    3d3e:	2001      	movs	r0, #1
    3d40:	81a3      	strh	r3, [r4, #12]
    3d42:	4240      	negs	r0, r0
    3d44:	e7a5      	b.n	3c92 <__sflush_r+0x1a>
    3d46:	690f      	ldr	r7, [r1, #16]
    3d48:	2f00      	cmp	r7, #0
    3d4a:	d0a1      	beq.n	3c90 <__sflush_r+0x18>
    3d4c:	680b      	ldr	r3, [r1, #0]
    3d4e:	600f      	str	r7, [r1, #0]
    3d50:	1bdb      	subs	r3, r3, r7
    3d52:	9301      	str	r3, [sp, #4]
    3d54:	2300      	movs	r3, #0
    3d56:	0792      	lsls	r2, r2, #30
    3d58:	d100      	bne.n	3d5c <__sflush_r+0xe4>
    3d5a:	694b      	ldr	r3, [r1, #20]
    3d5c:	60a3      	str	r3, [r4, #8]
    3d5e:	9b01      	ldr	r3, [sp, #4]
    3d60:	2b00      	cmp	r3, #0
    3d62:	dc00      	bgt.n	3d66 <__sflush_r+0xee>
    3d64:	e794      	b.n	3c90 <__sflush_r+0x18>
    3d66:	9b01      	ldr	r3, [sp, #4]
    3d68:	003a      	movs	r2, r7
    3d6a:	6a21      	ldr	r1, [r4, #32]
    3d6c:	0028      	movs	r0, r5
    3d6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    3d70:	47b0      	blx	r6
    3d72:	2800      	cmp	r0, #0
    3d74:	dc03      	bgt.n	3d7e <__sflush_r+0x106>
    3d76:	2340      	movs	r3, #64	; 0x40
    3d78:	89a2      	ldrh	r2, [r4, #12]
    3d7a:	4313      	orrs	r3, r2
    3d7c:	e7df      	b.n	3d3e <__sflush_r+0xc6>
    3d7e:	9b01      	ldr	r3, [sp, #4]
    3d80:	183f      	adds	r7, r7, r0
    3d82:	1a1b      	subs	r3, r3, r0
    3d84:	9301      	str	r3, [sp, #4]
    3d86:	e7ea      	b.n	3d5e <__sflush_r+0xe6>
    3d88:	20400001 	.word	0x20400001

00003d8c <_fflush_r>:
    3d8c:	690b      	ldr	r3, [r1, #16]
    3d8e:	b570      	push	{r4, r5, r6, lr}
    3d90:	0005      	movs	r5, r0
    3d92:	000c      	movs	r4, r1
    3d94:	2b00      	cmp	r3, #0
    3d96:	d101      	bne.n	3d9c <_fflush_r+0x10>
    3d98:	2000      	movs	r0, #0
    3d9a:	bd70      	pop	{r4, r5, r6, pc}
    3d9c:	2800      	cmp	r0, #0
    3d9e:	d004      	beq.n	3daa <_fflush_r+0x1e>
    3da0:	6983      	ldr	r3, [r0, #24]
    3da2:	2b00      	cmp	r3, #0
    3da4:	d101      	bne.n	3daa <_fflush_r+0x1e>
    3da6:	f000 f85f 	bl	3e68 <__sinit>
    3daa:	4b0b      	ldr	r3, [pc, #44]	; (3dd8 <_fflush_r+0x4c>)
    3dac:	429c      	cmp	r4, r3
    3dae:	d109      	bne.n	3dc4 <_fflush_r+0x38>
    3db0:	686c      	ldr	r4, [r5, #4]
    3db2:	220c      	movs	r2, #12
    3db4:	5ea3      	ldrsh	r3, [r4, r2]
    3db6:	2b00      	cmp	r3, #0
    3db8:	d0ee      	beq.n	3d98 <_fflush_r+0xc>
    3dba:	0021      	movs	r1, r4
    3dbc:	0028      	movs	r0, r5
    3dbe:	f7ff ff5b 	bl	3c78 <__sflush_r>
    3dc2:	e7ea      	b.n	3d9a <_fflush_r+0xe>
    3dc4:	4b05      	ldr	r3, [pc, #20]	; (3ddc <_fflush_r+0x50>)
    3dc6:	429c      	cmp	r4, r3
    3dc8:	d101      	bne.n	3dce <_fflush_r+0x42>
    3dca:	68ac      	ldr	r4, [r5, #8]
    3dcc:	e7f1      	b.n	3db2 <_fflush_r+0x26>
    3dce:	4b04      	ldr	r3, [pc, #16]	; (3de0 <_fflush_r+0x54>)
    3dd0:	429c      	cmp	r4, r3
    3dd2:	d1ee      	bne.n	3db2 <_fflush_r+0x26>
    3dd4:	68ec      	ldr	r4, [r5, #12]
    3dd6:	e7ec      	b.n	3db2 <_fflush_r+0x26>
    3dd8:	00006b54 	.word	0x00006b54
    3ddc:	00006b74 	.word	0x00006b74
    3de0:	00006b34 	.word	0x00006b34

00003de4 <_cleanup_r>:
    3de4:	b510      	push	{r4, lr}
    3de6:	4902      	ldr	r1, [pc, #8]	; (3df0 <_cleanup_r+0xc>)
    3de8:	f000 f8b2 	bl	3f50 <_fwalk_reent>
    3dec:	bd10      	pop	{r4, pc}
    3dee:	46c0      	nop			; (mov r8, r8)
    3df0:	00003d8d 	.word	0x00003d8d

00003df4 <std.isra.0>:
    3df4:	2300      	movs	r3, #0
    3df6:	b510      	push	{r4, lr}
    3df8:	0004      	movs	r4, r0
    3dfa:	6003      	str	r3, [r0, #0]
    3dfc:	6043      	str	r3, [r0, #4]
    3dfe:	6083      	str	r3, [r0, #8]
    3e00:	8181      	strh	r1, [r0, #12]
    3e02:	6643      	str	r3, [r0, #100]	; 0x64
    3e04:	81c2      	strh	r2, [r0, #14]
    3e06:	6103      	str	r3, [r0, #16]
    3e08:	6143      	str	r3, [r0, #20]
    3e0a:	6183      	str	r3, [r0, #24]
    3e0c:	0019      	movs	r1, r3
    3e0e:	2208      	movs	r2, #8
    3e10:	305c      	adds	r0, #92	; 0x5c
    3e12:	f7ff fd18 	bl	3846 <memset>
    3e16:	4b05      	ldr	r3, [pc, #20]	; (3e2c <std.isra.0+0x38>)
    3e18:	6224      	str	r4, [r4, #32]
    3e1a:	6263      	str	r3, [r4, #36]	; 0x24
    3e1c:	4b04      	ldr	r3, [pc, #16]	; (3e30 <std.isra.0+0x3c>)
    3e1e:	62a3      	str	r3, [r4, #40]	; 0x28
    3e20:	4b04      	ldr	r3, [pc, #16]	; (3e34 <std.isra.0+0x40>)
    3e22:	62e3      	str	r3, [r4, #44]	; 0x2c
    3e24:	4b04      	ldr	r3, [pc, #16]	; (3e38 <std.isra.0+0x44>)
    3e26:	6323      	str	r3, [r4, #48]	; 0x30
    3e28:	bd10      	pop	{r4, pc}
    3e2a:	46c0      	nop			; (mov r8, r8)
    3e2c:	00004675 	.word	0x00004675
    3e30:	0000469d 	.word	0x0000469d
    3e34:	000046d5 	.word	0x000046d5
    3e38:	00004701 	.word	0x00004701

00003e3c <__sfmoreglue>:
    3e3c:	b570      	push	{r4, r5, r6, lr}
    3e3e:	2568      	movs	r5, #104	; 0x68
    3e40:	1e4a      	subs	r2, r1, #1
    3e42:	4355      	muls	r5, r2
    3e44:	000e      	movs	r6, r1
    3e46:	0029      	movs	r1, r5
    3e48:	3174      	adds	r1, #116	; 0x74
    3e4a:	f7ff fd4f 	bl	38ec <_malloc_r>
    3e4e:	1e04      	subs	r4, r0, #0
    3e50:	d008      	beq.n	3e64 <__sfmoreglue+0x28>
    3e52:	2100      	movs	r1, #0
    3e54:	002a      	movs	r2, r5
    3e56:	6001      	str	r1, [r0, #0]
    3e58:	6046      	str	r6, [r0, #4]
    3e5a:	300c      	adds	r0, #12
    3e5c:	60a0      	str	r0, [r4, #8]
    3e5e:	3268      	adds	r2, #104	; 0x68
    3e60:	f7ff fcf1 	bl	3846 <memset>
    3e64:	0020      	movs	r0, r4
    3e66:	bd70      	pop	{r4, r5, r6, pc}

00003e68 <__sinit>:
    3e68:	6983      	ldr	r3, [r0, #24]
    3e6a:	b513      	push	{r0, r1, r4, lr}
    3e6c:	0004      	movs	r4, r0
    3e6e:	2b00      	cmp	r3, #0
    3e70:	d128      	bne.n	3ec4 <__sinit+0x5c>
    3e72:	6483      	str	r3, [r0, #72]	; 0x48
    3e74:	64c3      	str	r3, [r0, #76]	; 0x4c
    3e76:	6503      	str	r3, [r0, #80]	; 0x50
    3e78:	4b13      	ldr	r3, [pc, #76]	; (3ec8 <__sinit+0x60>)
    3e7a:	4a14      	ldr	r2, [pc, #80]	; (3ecc <__sinit+0x64>)
    3e7c:	681b      	ldr	r3, [r3, #0]
    3e7e:	6282      	str	r2, [r0, #40]	; 0x28
    3e80:	9301      	str	r3, [sp, #4]
    3e82:	4298      	cmp	r0, r3
    3e84:	d101      	bne.n	3e8a <__sinit+0x22>
    3e86:	2301      	movs	r3, #1
    3e88:	6183      	str	r3, [r0, #24]
    3e8a:	0020      	movs	r0, r4
    3e8c:	f000 f820 	bl	3ed0 <__sfp>
    3e90:	6060      	str	r0, [r4, #4]
    3e92:	0020      	movs	r0, r4
    3e94:	f000 f81c 	bl	3ed0 <__sfp>
    3e98:	60a0      	str	r0, [r4, #8]
    3e9a:	0020      	movs	r0, r4
    3e9c:	f000 f818 	bl	3ed0 <__sfp>
    3ea0:	2200      	movs	r2, #0
    3ea2:	60e0      	str	r0, [r4, #12]
    3ea4:	2104      	movs	r1, #4
    3ea6:	6860      	ldr	r0, [r4, #4]
    3ea8:	f7ff ffa4 	bl	3df4 <std.isra.0>
    3eac:	2201      	movs	r2, #1
    3eae:	2109      	movs	r1, #9
    3eb0:	68a0      	ldr	r0, [r4, #8]
    3eb2:	f7ff ff9f 	bl	3df4 <std.isra.0>
    3eb6:	2202      	movs	r2, #2
    3eb8:	2112      	movs	r1, #18
    3eba:	68e0      	ldr	r0, [r4, #12]
    3ebc:	f7ff ff9a 	bl	3df4 <std.isra.0>
    3ec0:	2301      	movs	r3, #1
    3ec2:	61a3      	str	r3, [r4, #24]
    3ec4:	bd13      	pop	{r0, r1, r4, pc}
    3ec6:	46c0      	nop			; (mov r8, r8)
    3ec8:	00006b30 	.word	0x00006b30
    3ecc:	00003de5 	.word	0x00003de5

00003ed0 <__sfp>:
    3ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3ed2:	4b1e      	ldr	r3, [pc, #120]	; (3f4c <__sfp+0x7c>)
    3ed4:	0007      	movs	r7, r0
    3ed6:	681e      	ldr	r6, [r3, #0]
    3ed8:	69b3      	ldr	r3, [r6, #24]
    3eda:	2b00      	cmp	r3, #0
    3edc:	d102      	bne.n	3ee4 <__sfp+0x14>
    3ede:	0030      	movs	r0, r6
    3ee0:	f7ff ffc2 	bl	3e68 <__sinit>
    3ee4:	3648      	adds	r6, #72	; 0x48
    3ee6:	68b4      	ldr	r4, [r6, #8]
    3ee8:	6873      	ldr	r3, [r6, #4]
    3eea:	3b01      	subs	r3, #1
    3eec:	d504      	bpl.n	3ef8 <__sfp+0x28>
    3eee:	6833      	ldr	r3, [r6, #0]
    3ef0:	2b00      	cmp	r3, #0
    3ef2:	d007      	beq.n	3f04 <__sfp+0x34>
    3ef4:	6836      	ldr	r6, [r6, #0]
    3ef6:	e7f6      	b.n	3ee6 <__sfp+0x16>
    3ef8:	220c      	movs	r2, #12
    3efa:	5ea5      	ldrsh	r5, [r4, r2]
    3efc:	2d00      	cmp	r5, #0
    3efe:	d00d      	beq.n	3f1c <__sfp+0x4c>
    3f00:	3468      	adds	r4, #104	; 0x68
    3f02:	e7f2      	b.n	3eea <__sfp+0x1a>
    3f04:	2104      	movs	r1, #4
    3f06:	0038      	movs	r0, r7
    3f08:	f7ff ff98 	bl	3e3c <__sfmoreglue>
    3f0c:	6030      	str	r0, [r6, #0]
    3f0e:	2800      	cmp	r0, #0
    3f10:	d1f0      	bne.n	3ef4 <__sfp+0x24>
    3f12:	230c      	movs	r3, #12
    3f14:	0004      	movs	r4, r0
    3f16:	603b      	str	r3, [r7, #0]
    3f18:	0020      	movs	r0, r4
    3f1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3f1c:	2301      	movs	r3, #1
    3f1e:	0020      	movs	r0, r4
    3f20:	425b      	negs	r3, r3
    3f22:	81e3      	strh	r3, [r4, #14]
    3f24:	3302      	adds	r3, #2
    3f26:	81a3      	strh	r3, [r4, #12]
    3f28:	6665      	str	r5, [r4, #100]	; 0x64
    3f2a:	6025      	str	r5, [r4, #0]
    3f2c:	60a5      	str	r5, [r4, #8]
    3f2e:	6065      	str	r5, [r4, #4]
    3f30:	6125      	str	r5, [r4, #16]
    3f32:	6165      	str	r5, [r4, #20]
    3f34:	61a5      	str	r5, [r4, #24]
    3f36:	2208      	movs	r2, #8
    3f38:	0029      	movs	r1, r5
    3f3a:	305c      	adds	r0, #92	; 0x5c
    3f3c:	f7ff fc83 	bl	3846 <memset>
    3f40:	6365      	str	r5, [r4, #52]	; 0x34
    3f42:	63a5      	str	r5, [r4, #56]	; 0x38
    3f44:	64a5      	str	r5, [r4, #72]	; 0x48
    3f46:	64e5      	str	r5, [r4, #76]	; 0x4c
    3f48:	e7e6      	b.n	3f18 <__sfp+0x48>
    3f4a:	46c0      	nop			; (mov r8, r8)
    3f4c:	00006b30 	.word	0x00006b30

00003f50 <_fwalk_reent>:
    3f50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3f52:	0004      	movs	r4, r0
    3f54:	0007      	movs	r7, r0
    3f56:	2600      	movs	r6, #0
    3f58:	9101      	str	r1, [sp, #4]
    3f5a:	3448      	adds	r4, #72	; 0x48
    3f5c:	2c00      	cmp	r4, #0
    3f5e:	d101      	bne.n	3f64 <_fwalk_reent+0x14>
    3f60:	0030      	movs	r0, r6
    3f62:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3f64:	6863      	ldr	r3, [r4, #4]
    3f66:	68a5      	ldr	r5, [r4, #8]
    3f68:	9300      	str	r3, [sp, #0]
    3f6a:	9b00      	ldr	r3, [sp, #0]
    3f6c:	3b01      	subs	r3, #1
    3f6e:	9300      	str	r3, [sp, #0]
    3f70:	d501      	bpl.n	3f76 <_fwalk_reent+0x26>
    3f72:	6824      	ldr	r4, [r4, #0]
    3f74:	e7f2      	b.n	3f5c <_fwalk_reent+0xc>
    3f76:	89ab      	ldrh	r3, [r5, #12]
    3f78:	2b01      	cmp	r3, #1
    3f7a:	d908      	bls.n	3f8e <_fwalk_reent+0x3e>
    3f7c:	220e      	movs	r2, #14
    3f7e:	5eab      	ldrsh	r3, [r5, r2]
    3f80:	3301      	adds	r3, #1
    3f82:	d004      	beq.n	3f8e <_fwalk_reent+0x3e>
    3f84:	0029      	movs	r1, r5
    3f86:	0038      	movs	r0, r7
    3f88:	9b01      	ldr	r3, [sp, #4]
    3f8a:	4798      	blx	r3
    3f8c:	4306      	orrs	r6, r0
    3f8e:	3568      	adds	r5, #104	; 0x68
    3f90:	e7eb      	b.n	3f6a <_fwalk_reent+0x1a>
	...

00003f94 <__swhatbuf_r>:
    3f94:	b570      	push	{r4, r5, r6, lr}
    3f96:	000e      	movs	r6, r1
    3f98:	001d      	movs	r5, r3
    3f9a:	230e      	movs	r3, #14
    3f9c:	5ec9      	ldrsh	r1, [r1, r3]
    3f9e:	b090      	sub	sp, #64	; 0x40
    3fa0:	0014      	movs	r4, r2
    3fa2:	2900      	cmp	r1, #0
    3fa4:	da07      	bge.n	3fb6 <__swhatbuf_r+0x22>
    3fa6:	2300      	movs	r3, #0
    3fa8:	602b      	str	r3, [r5, #0]
    3faa:	89b3      	ldrh	r3, [r6, #12]
    3fac:	061b      	lsls	r3, r3, #24
    3fae:	d411      	bmi.n	3fd4 <__swhatbuf_r+0x40>
    3fb0:	2380      	movs	r3, #128	; 0x80
    3fb2:	00db      	lsls	r3, r3, #3
    3fb4:	e00f      	b.n	3fd6 <__swhatbuf_r+0x42>
    3fb6:	aa01      	add	r2, sp, #4
    3fb8:	f000 fc9a 	bl	48f0 <_fstat_r>
    3fbc:	2800      	cmp	r0, #0
    3fbe:	dbf2      	blt.n	3fa6 <__swhatbuf_r+0x12>
    3fc0:	22f0      	movs	r2, #240	; 0xf0
    3fc2:	9b02      	ldr	r3, [sp, #8]
    3fc4:	0212      	lsls	r2, r2, #8
    3fc6:	4013      	ands	r3, r2
    3fc8:	4a05      	ldr	r2, [pc, #20]	; (3fe0 <__swhatbuf_r+0x4c>)
    3fca:	189b      	adds	r3, r3, r2
    3fcc:	425a      	negs	r2, r3
    3fce:	4153      	adcs	r3, r2
    3fd0:	602b      	str	r3, [r5, #0]
    3fd2:	e7ed      	b.n	3fb0 <__swhatbuf_r+0x1c>
    3fd4:	2340      	movs	r3, #64	; 0x40
    3fd6:	2000      	movs	r0, #0
    3fd8:	6023      	str	r3, [r4, #0]
    3fda:	b010      	add	sp, #64	; 0x40
    3fdc:	bd70      	pop	{r4, r5, r6, pc}
    3fde:	46c0      	nop			; (mov r8, r8)
    3fe0:	ffffe000 	.word	0xffffe000

00003fe4 <__smakebuf_r>:
    3fe4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3fe6:	2602      	movs	r6, #2
    3fe8:	898b      	ldrh	r3, [r1, #12]
    3fea:	0005      	movs	r5, r0
    3fec:	000c      	movs	r4, r1
    3fee:	4233      	tst	r3, r6
    3ff0:	d006      	beq.n	4000 <__smakebuf_r+0x1c>
    3ff2:	0023      	movs	r3, r4
    3ff4:	3347      	adds	r3, #71	; 0x47
    3ff6:	6023      	str	r3, [r4, #0]
    3ff8:	6123      	str	r3, [r4, #16]
    3ffa:	2301      	movs	r3, #1
    3ffc:	6163      	str	r3, [r4, #20]
    3ffe:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    4000:	ab01      	add	r3, sp, #4
    4002:	466a      	mov	r2, sp
    4004:	f7ff ffc6 	bl	3f94 <__swhatbuf_r>
    4008:	9900      	ldr	r1, [sp, #0]
    400a:	0007      	movs	r7, r0
    400c:	0028      	movs	r0, r5
    400e:	f7ff fc6d 	bl	38ec <_malloc_r>
    4012:	2800      	cmp	r0, #0
    4014:	d108      	bne.n	4028 <__smakebuf_r+0x44>
    4016:	220c      	movs	r2, #12
    4018:	5ea3      	ldrsh	r3, [r4, r2]
    401a:	059a      	lsls	r2, r3, #22
    401c:	d4ef      	bmi.n	3ffe <__smakebuf_r+0x1a>
    401e:	2203      	movs	r2, #3
    4020:	4393      	bics	r3, r2
    4022:	431e      	orrs	r6, r3
    4024:	81a6      	strh	r6, [r4, #12]
    4026:	e7e4      	b.n	3ff2 <__smakebuf_r+0xe>
    4028:	4b0f      	ldr	r3, [pc, #60]	; (4068 <__smakebuf_r+0x84>)
    402a:	62ab      	str	r3, [r5, #40]	; 0x28
    402c:	2380      	movs	r3, #128	; 0x80
    402e:	89a2      	ldrh	r2, [r4, #12]
    4030:	6020      	str	r0, [r4, #0]
    4032:	4313      	orrs	r3, r2
    4034:	81a3      	strh	r3, [r4, #12]
    4036:	9b00      	ldr	r3, [sp, #0]
    4038:	6120      	str	r0, [r4, #16]
    403a:	6163      	str	r3, [r4, #20]
    403c:	9b01      	ldr	r3, [sp, #4]
    403e:	2b00      	cmp	r3, #0
    4040:	d00d      	beq.n	405e <__smakebuf_r+0x7a>
    4042:	230e      	movs	r3, #14
    4044:	5ee1      	ldrsh	r1, [r4, r3]
    4046:	0028      	movs	r0, r5
    4048:	f000 fc64 	bl	4914 <_isatty_r>
    404c:	2800      	cmp	r0, #0
    404e:	d006      	beq.n	405e <__smakebuf_r+0x7a>
    4050:	2203      	movs	r2, #3
    4052:	89a3      	ldrh	r3, [r4, #12]
    4054:	4393      	bics	r3, r2
    4056:	001a      	movs	r2, r3
    4058:	2301      	movs	r3, #1
    405a:	4313      	orrs	r3, r2
    405c:	81a3      	strh	r3, [r4, #12]
    405e:	89a0      	ldrh	r0, [r4, #12]
    4060:	4338      	orrs	r0, r7
    4062:	81a0      	strh	r0, [r4, #12]
    4064:	e7cb      	b.n	3ffe <__smakebuf_r+0x1a>
    4066:	46c0      	nop			; (mov r8, r8)
    4068:	00003de5 	.word	0x00003de5

0000406c <__malloc_lock>:
    406c:	4770      	bx	lr

0000406e <__malloc_unlock>:
    406e:	4770      	bx	lr

00004070 <__sfputc_r>:
    4070:	6893      	ldr	r3, [r2, #8]
    4072:	b510      	push	{r4, lr}
    4074:	3b01      	subs	r3, #1
    4076:	6093      	str	r3, [r2, #8]
    4078:	2b00      	cmp	r3, #0
    407a:	da05      	bge.n	4088 <__sfputc_r+0x18>
    407c:	6994      	ldr	r4, [r2, #24]
    407e:	42a3      	cmp	r3, r4
    4080:	db08      	blt.n	4094 <__sfputc_r+0x24>
    4082:	b2cb      	uxtb	r3, r1
    4084:	2b0a      	cmp	r3, #10
    4086:	d005      	beq.n	4094 <__sfputc_r+0x24>
    4088:	6813      	ldr	r3, [r2, #0]
    408a:	1c58      	adds	r0, r3, #1
    408c:	6010      	str	r0, [r2, #0]
    408e:	7019      	strb	r1, [r3, #0]
    4090:	b2c8      	uxtb	r0, r1
    4092:	bd10      	pop	{r4, pc}
    4094:	f000 fb3a 	bl	470c <__swbuf_r>
    4098:	e7fb      	b.n	4092 <__sfputc_r+0x22>

0000409a <__sfputs_r>:
    409a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    409c:	0006      	movs	r6, r0
    409e:	000f      	movs	r7, r1
    40a0:	0014      	movs	r4, r2
    40a2:	18d5      	adds	r5, r2, r3
    40a4:	42ac      	cmp	r4, r5
    40a6:	d101      	bne.n	40ac <__sfputs_r+0x12>
    40a8:	2000      	movs	r0, #0
    40aa:	e007      	b.n	40bc <__sfputs_r+0x22>
    40ac:	7821      	ldrb	r1, [r4, #0]
    40ae:	003a      	movs	r2, r7
    40b0:	0030      	movs	r0, r6
    40b2:	f7ff ffdd 	bl	4070 <__sfputc_r>
    40b6:	3401      	adds	r4, #1
    40b8:	1c43      	adds	r3, r0, #1
    40ba:	d1f3      	bne.n	40a4 <__sfputs_r+0xa>
    40bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000040c0 <_vfiprintf_r>:
    40c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    40c2:	b09f      	sub	sp, #124	; 0x7c
    40c4:	0006      	movs	r6, r0
    40c6:	000f      	movs	r7, r1
    40c8:	0014      	movs	r4, r2
    40ca:	9305      	str	r3, [sp, #20]
    40cc:	2800      	cmp	r0, #0
    40ce:	d004      	beq.n	40da <_vfiprintf_r+0x1a>
    40d0:	6983      	ldr	r3, [r0, #24]
    40d2:	2b00      	cmp	r3, #0
    40d4:	d101      	bne.n	40da <_vfiprintf_r+0x1a>
    40d6:	f7ff fec7 	bl	3e68 <__sinit>
    40da:	4b7f      	ldr	r3, [pc, #508]	; (42d8 <_vfiprintf_r+0x218>)
    40dc:	429f      	cmp	r7, r3
    40de:	d15c      	bne.n	419a <_vfiprintf_r+0xda>
    40e0:	6877      	ldr	r7, [r6, #4]
    40e2:	89bb      	ldrh	r3, [r7, #12]
    40e4:	071b      	lsls	r3, r3, #28
    40e6:	d562      	bpl.n	41ae <_vfiprintf_r+0xee>
    40e8:	693b      	ldr	r3, [r7, #16]
    40ea:	2b00      	cmp	r3, #0
    40ec:	d05f      	beq.n	41ae <_vfiprintf_r+0xee>
    40ee:	2300      	movs	r3, #0
    40f0:	ad06      	add	r5, sp, #24
    40f2:	616b      	str	r3, [r5, #20]
    40f4:	3320      	adds	r3, #32
    40f6:	766b      	strb	r3, [r5, #25]
    40f8:	3310      	adds	r3, #16
    40fa:	76ab      	strb	r3, [r5, #26]
    40fc:	9402      	str	r4, [sp, #8]
    40fe:	9c02      	ldr	r4, [sp, #8]
    4100:	7823      	ldrb	r3, [r4, #0]
    4102:	2b00      	cmp	r3, #0
    4104:	d15d      	bne.n	41c2 <_vfiprintf_r+0x102>
    4106:	9b02      	ldr	r3, [sp, #8]
    4108:	1ae3      	subs	r3, r4, r3
    410a:	9304      	str	r3, [sp, #16]
    410c:	d00d      	beq.n	412a <_vfiprintf_r+0x6a>
    410e:	9b04      	ldr	r3, [sp, #16]
    4110:	9a02      	ldr	r2, [sp, #8]
    4112:	0039      	movs	r1, r7
    4114:	0030      	movs	r0, r6
    4116:	f7ff ffc0 	bl	409a <__sfputs_r>
    411a:	1c43      	adds	r3, r0, #1
    411c:	d100      	bne.n	4120 <_vfiprintf_r+0x60>
    411e:	e0cc      	b.n	42ba <_vfiprintf_r+0x1fa>
    4120:	696a      	ldr	r2, [r5, #20]
    4122:	9b04      	ldr	r3, [sp, #16]
    4124:	4694      	mov	ip, r2
    4126:	4463      	add	r3, ip
    4128:	616b      	str	r3, [r5, #20]
    412a:	7823      	ldrb	r3, [r4, #0]
    412c:	2b00      	cmp	r3, #0
    412e:	d100      	bne.n	4132 <_vfiprintf_r+0x72>
    4130:	e0c3      	b.n	42ba <_vfiprintf_r+0x1fa>
    4132:	2201      	movs	r2, #1
    4134:	2300      	movs	r3, #0
    4136:	4252      	negs	r2, r2
    4138:	606a      	str	r2, [r5, #4]
    413a:	a902      	add	r1, sp, #8
    413c:	3254      	adds	r2, #84	; 0x54
    413e:	1852      	adds	r2, r2, r1
    4140:	3401      	adds	r4, #1
    4142:	602b      	str	r3, [r5, #0]
    4144:	60eb      	str	r3, [r5, #12]
    4146:	60ab      	str	r3, [r5, #8]
    4148:	7013      	strb	r3, [r2, #0]
    414a:	65ab      	str	r3, [r5, #88]	; 0x58
    414c:	7821      	ldrb	r1, [r4, #0]
    414e:	2205      	movs	r2, #5
    4150:	4862      	ldr	r0, [pc, #392]	; (42dc <_vfiprintf_r+0x21c>)
    4152:	f000 fc05 	bl	4960 <memchr>
    4156:	1c63      	adds	r3, r4, #1
    4158:	469c      	mov	ip, r3
    415a:	2800      	cmp	r0, #0
    415c:	d135      	bne.n	41ca <_vfiprintf_r+0x10a>
    415e:	6829      	ldr	r1, [r5, #0]
    4160:	06cb      	lsls	r3, r1, #27
    4162:	d504      	bpl.n	416e <_vfiprintf_r+0xae>
    4164:	2353      	movs	r3, #83	; 0x53
    4166:	aa02      	add	r2, sp, #8
    4168:	3020      	adds	r0, #32
    416a:	189b      	adds	r3, r3, r2
    416c:	7018      	strb	r0, [r3, #0]
    416e:	070b      	lsls	r3, r1, #28
    4170:	d504      	bpl.n	417c <_vfiprintf_r+0xbc>
    4172:	2353      	movs	r3, #83	; 0x53
    4174:	202b      	movs	r0, #43	; 0x2b
    4176:	aa02      	add	r2, sp, #8
    4178:	189b      	adds	r3, r3, r2
    417a:	7018      	strb	r0, [r3, #0]
    417c:	7823      	ldrb	r3, [r4, #0]
    417e:	2b2a      	cmp	r3, #42	; 0x2a
    4180:	d02c      	beq.n	41dc <_vfiprintf_r+0x11c>
    4182:	2000      	movs	r0, #0
    4184:	210a      	movs	r1, #10
    4186:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4188:	7822      	ldrb	r2, [r4, #0]
    418a:	3a30      	subs	r2, #48	; 0x30
    418c:	2a09      	cmp	r2, #9
    418e:	d800      	bhi.n	4192 <_vfiprintf_r+0xd2>
    4190:	e06b      	b.n	426a <_vfiprintf_r+0x1aa>
    4192:	2800      	cmp	r0, #0
    4194:	d02a      	beq.n	41ec <_vfiprintf_r+0x12c>
    4196:	9309      	str	r3, [sp, #36]	; 0x24
    4198:	e028      	b.n	41ec <_vfiprintf_r+0x12c>
    419a:	4b51      	ldr	r3, [pc, #324]	; (42e0 <_vfiprintf_r+0x220>)
    419c:	429f      	cmp	r7, r3
    419e:	d101      	bne.n	41a4 <_vfiprintf_r+0xe4>
    41a0:	68b7      	ldr	r7, [r6, #8]
    41a2:	e79e      	b.n	40e2 <_vfiprintf_r+0x22>
    41a4:	4b4f      	ldr	r3, [pc, #316]	; (42e4 <_vfiprintf_r+0x224>)
    41a6:	429f      	cmp	r7, r3
    41a8:	d19b      	bne.n	40e2 <_vfiprintf_r+0x22>
    41aa:	68f7      	ldr	r7, [r6, #12]
    41ac:	e799      	b.n	40e2 <_vfiprintf_r+0x22>
    41ae:	0039      	movs	r1, r7
    41b0:	0030      	movs	r0, r6
    41b2:	f000 fb15 	bl	47e0 <__swsetup_r>
    41b6:	2800      	cmp	r0, #0
    41b8:	d099      	beq.n	40ee <_vfiprintf_r+0x2e>
    41ba:	2001      	movs	r0, #1
    41bc:	4240      	negs	r0, r0
    41be:	b01f      	add	sp, #124	; 0x7c
    41c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    41c2:	2b25      	cmp	r3, #37	; 0x25
    41c4:	d09f      	beq.n	4106 <_vfiprintf_r+0x46>
    41c6:	3401      	adds	r4, #1
    41c8:	e79a      	b.n	4100 <_vfiprintf_r+0x40>
    41ca:	4b44      	ldr	r3, [pc, #272]	; (42dc <_vfiprintf_r+0x21c>)
    41cc:	6829      	ldr	r1, [r5, #0]
    41ce:	1ac0      	subs	r0, r0, r3
    41d0:	2301      	movs	r3, #1
    41d2:	4083      	lsls	r3, r0
    41d4:	430b      	orrs	r3, r1
    41d6:	602b      	str	r3, [r5, #0]
    41d8:	4664      	mov	r4, ip
    41da:	e7b7      	b.n	414c <_vfiprintf_r+0x8c>
    41dc:	9b05      	ldr	r3, [sp, #20]
    41de:	1d18      	adds	r0, r3, #4
    41e0:	681b      	ldr	r3, [r3, #0]
    41e2:	9005      	str	r0, [sp, #20]
    41e4:	2b00      	cmp	r3, #0
    41e6:	db3a      	blt.n	425e <_vfiprintf_r+0x19e>
    41e8:	9309      	str	r3, [sp, #36]	; 0x24
    41ea:	4664      	mov	r4, ip
    41ec:	7823      	ldrb	r3, [r4, #0]
    41ee:	2b2e      	cmp	r3, #46	; 0x2e
    41f0:	d10b      	bne.n	420a <_vfiprintf_r+0x14a>
    41f2:	7863      	ldrb	r3, [r4, #1]
    41f4:	1c62      	adds	r2, r4, #1
    41f6:	2b2a      	cmp	r3, #42	; 0x2a
    41f8:	d13f      	bne.n	427a <_vfiprintf_r+0x1ba>
    41fa:	9b05      	ldr	r3, [sp, #20]
    41fc:	3402      	adds	r4, #2
    41fe:	1d1a      	adds	r2, r3, #4
    4200:	681b      	ldr	r3, [r3, #0]
    4202:	9205      	str	r2, [sp, #20]
    4204:	2b00      	cmp	r3, #0
    4206:	db35      	blt.n	4274 <_vfiprintf_r+0x1b4>
    4208:	9307      	str	r3, [sp, #28]
    420a:	7821      	ldrb	r1, [r4, #0]
    420c:	2203      	movs	r2, #3
    420e:	4836      	ldr	r0, [pc, #216]	; (42e8 <_vfiprintf_r+0x228>)
    4210:	f000 fba6 	bl	4960 <memchr>
    4214:	2800      	cmp	r0, #0
    4216:	d007      	beq.n	4228 <_vfiprintf_r+0x168>
    4218:	4b33      	ldr	r3, [pc, #204]	; (42e8 <_vfiprintf_r+0x228>)
    421a:	682a      	ldr	r2, [r5, #0]
    421c:	1ac0      	subs	r0, r0, r3
    421e:	2340      	movs	r3, #64	; 0x40
    4220:	4083      	lsls	r3, r0
    4222:	4313      	orrs	r3, r2
    4224:	602b      	str	r3, [r5, #0]
    4226:	3401      	adds	r4, #1
    4228:	7821      	ldrb	r1, [r4, #0]
    422a:	1c63      	adds	r3, r4, #1
    422c:	2206      	movs	r2, #6
    422e:	482f      	ldr	r0, [pc, #188]	; (42ec <_vfiprintf_r+0x22c>)
    4230:	9302      	str	r3, [sp, #8]
    4232:	7629      	strb	r1, [r5, #24]
    4234:	f000 fb94 	bl	4960 <memchr>
    4238:	2800      	cmp	r0, #0
    423a:	d044      	beq.n	42c6 <_vfiprintf_r+0x206>
    423c:	4b2c      	ldr	r3, [pc, #176]	; (42f0 <_vfiprintf_r+0x230>)
    423e:	2b00      	cmp	r3, #0
    4240:	d12f      	bne.n	42a2 <_vfiprintf_r+0x1e2>
    4242:	6829      	ldr	r1, [r5, #0]
    4244:	9b05      	ldr	r3, [sp, #20]
    4246:	2207      	movs	r2, #7
    4248:	05c9      	lsls	r1, r1, #23
    424a:	d528      	bpl.n	429e <_vfiprintf_r+0x1de>
    424c:	189b      	adds	r3, r3, r2
    424e:	4393      	bics	r3, r2
    4250:	3308      	adds	r3, #8
    4252:	9305      	str	r3, [sp, #20]
    4254:	696b      	ldr	r3, [r5, #20]
    4256:	9a03      	ldr	r2, [sp, #12]
    4258:	189b      	adds	r3, r3, r2
    425a:	616b      	str	r3, [r5, #20]
    425c:	e74f      	b.n	40fe <_vfiprintf_r+0x3e>
    425e:	425b      	negs	r3, r3
    4260:	60eb      	str	r3, [r5, #12]
    4262:	2302      	movs	r3, #2
    4264:	430b      	orrs	r3, r1
    4266:	602b      	str	r3, [r5, #0]
    4268:	e7bf      	b.n	41ea <_vfiprintf_r+0x12a>
    426a:	434b      	muls	r3, r1
    426c:	3401      	adds	r4, #1
    426e:	189b      	adds	r3, r3, r2
    4270:	2001      	movs	r0, #1
    4272:	e789      	b.n	4188 <_vfiprintf_r+0xc8>
    4274:	2301      	movs	r3, #1
    4276:	425b      	negs	r3, r3
    4278:	e7c6      	b.n	4208 <_vfiprintf_r+0x148>
    427a:	2300      	movs	r3, #0
    427c:	0014      	movs	r4, r2
    427e:	200a      	movs	r0, #10
    4280:	001a      	movs	r2, r3
    4282:	606b      	str	r3, [r5, #4]
    4284:	7821      	ldrb	r1, [r4, #0]
    4286:	3930      	subs	r1, #48	; 0x30
    4288:	2909      	cmp	r1, #9
    428a:	d903      	bls.n	4294 <_vfiprintf_r+0x1d4>
    428c:	2b00      	cmp	r3, #0
    428e:	d0bc      	beq.n	420a <_vfiprintf_r+0x14a>
    4290:	9207      	str	r2, [sp, #28]
    4292:	e7ba      	b.n	420a <_vfiprintf_r+0x14a>
    4294:	4342      	muls	r2, r0
    4296:	3401      	adds	r4, #1
    4298:	1852      	adds	r2, r2, r1
    429a:	2301      	movs	r3, #1
    429c:	e7f2      	b.n	4284 <_vfiprintf_r+0x1c4>
    429e:	3307      	adds	r3, #7
    42a0:	e7d5      	b.n	424e <_vfiprintf_r+0x18e>
    42a2:	ab05      	add	r3, sp, #20
    42a4:	9300      	str	r3, [sp, #0]
    42a6:	003a      	movs	r2, r7
    42a8:	4b12      	ldr	r3, [pc, #72]	; (42f4 <_vfiprintf_r+0x234>)
    42aa:	0029      	movs	r1, r5
    42ac:	0030      	movs	r0, r6
    42ae:	e000      	b.n	42b2 <_vfiprintf_r+0x1f2>
    42b0:	bf00      	nop
    42b2:	9003      	str	r0, [sp, #12]
    42b4:	9b03      	ldr	r3, [sp, #12]
    42b6:	3301      	adds	r3, #1
    42b8:	d1cc      	bne.n	4254 <_vfiprintf_r+0x194>
    42ba:	89bb      	ldrh	r3, [r7, #12]
    42bc:	065b      	lsls	r3, r3, #25
    42be:	d500      	bpl.n	42c2 <_vfiprintf_r+0x202>
    42c0:	e77b      	b.n	41ba <_vfiprintf_r+0xfa>
    42c2:	980b      	ldr	r0, [sp, #44]	; 0x2c
    42c4:	e77b      	b.n	41be <_vfiprintf_r+0xfe>
    42c6:	ab05      	add	r3, sp, #20
    42c8:	9300      	str	r3, [sp, #0]
    42ca:	003a      	movs	r2, r7
    42cc:	4b09      	ldr	r3, [pc, #36]	; (42f4 <_vfiprintf_r+0x234>)
    42ce:	0029      	movs	r1, r5
    42d0:	0030      	movs	r0, r6
    42d2:	f000 f87f 	bl	43d4 <_printf_i>
    42d6:	e7ec      	b.n	42b2 <_vfiprintf_r+0x1f2>
    42d8:	00006b54 	.word	0x00006b54
    42dc:	00006b94 	.word	0x00006b94
    42e0:	00006b74 	.word	0x00006b74
    42e4:	00006b34 	.word	0x00006b34
    42e8:	00006b9a 	.word	0x00006b9a
    42ec:	00006b9e 	.word	0x00006b9e
    42f0:	00000000 	.word	0x00000000
    42f4:	0000409b 	.word	0x0000409b

000042f8 <_printf_common>:
    42f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    42fa:	0015      	movs	r5, r2
    42fc:	9301      	str	r3, [sp, #4]
    42fe:	688a      	ldr	r2, [r1, #8]
    4300:	690b      	ldr	r3, [r1, #16]
    4302:	9000      	str	r0, [sp, #0]
    4304:	000c      	movs	r4, r1
    4306:	4293      	cmp	r3, r2
    4308:	da00      	bge.n	430c <_printf_common+0x14>
    430a:	0013      	movs	r3, r2
    430c:	0022      	movs	r2, r4
    430e:	602b      	str	r3, [r5, #0]
    4310:	3243      	adds	r2, #67	; 0x43
    4312:	7812      	ldrb	r2, [r2, #0]
    4314:	2a00      	cmp	r2, #0
    4316:	d001      	beq.n	431c <_printf_common+0x24>
    4318:	3301      	adds	r3, #1
    431a:	602b      	str	r3, [r5, #0]
    431c:	6823      	ldr	r3, [r4, #0]
    431e:	069b      	lsls	r3, r3, #26
    4320:	d502      	bpl.n	4328 <_printf_common+0x30>
    4322:	682b      	ldr	r3, [r5, #0]
    4324:	3302      	adds	r3, #2
    4326:	602b      	str	r3, [r5, #0]
    4328:	2706      	movs	r7, #6
    432a:	6823      	ldr	r3, [r4, #0]
    432c:	401f      	ands	r7, r3
    432e:	d027      	beq.n	4380 <_printf_common+0x88>
    4330:	0023      	movs	r3, r4
    4332:	3343      	adds	r3, #67	; 0x43
    4334:	781b      	ldrb	r3, [r3, #0]
    4336:	1e5a      	subs	r2, r3, #1
    4338:	4193      	sbcs	r3, r2
    433a:	6822      	ldr	r2, [r4, #0]
    433c:	0692      	lsls	r2, r2, #26
    433e:	d430      	bmi.n	43a2 <_printf_common+0xaa>
    4340:	0022      	movs	r2, r4
    4342:	9901      	ldr	r1, [sp, #4]
    4344:	3243      	adds	r2, #67	; 0x43
    4346:	9800      	ldr	r0, [sp, #0]
    4348:	9e08      	ldr	r6, [sp, #32]
    434a:	47b0      	blx	r6
    434c:	1c43      	adds	r3, r0, #1
    434e:	d025      	beq.n	439c <_printf_common+0xa4>
    4350:	2306      	movs	r3, #6
    4352:	6820      	ldr	r0, [r4, #0]
    4354:	682a      	ldr	r2, [r5, #0]
    4356:	68e1      	ldr	r1, [r4, #12]
    4358:	4003      	ands	r3, r0
    435a:	2500      	movs	r5, #0
    435c:	2b04      	cmp	r3, #4
    435e:	d103      	bne.n	4368 <_printf_common+0x70>
    4360:	1a8d      	subs	r5, r1, r2
    4362:	43eb      	mvns	r3, r5
    4364:	17db      	asrs	r3, r3, #31
    4366:	401d      	ands	r5, r3
    4368:	68a3      	ldr	r3, [r4, #8]
    436a:	6922      	ldr	r2, [r4, #16]
    436c:	4293      	cmp	r3, r2
    436e:	dd01      	ble.n	4374 <_printf_common+0x7c>
    4370:	1a9b      	subs	r3, r3, r2
    4372:	18ed      	adds	r5, r5, r3
    4374:	2700      	movs	r7, #0
    4376:	42bd      	cmp	r5, r7
    4378:	d120      	bne.n	43bc <_printf_common+0xc4>
    437a:	2000      	movs	r0, #0
    437c:	e010      	b.n	43a0 <_printf_common+0xa8>
    437e:	3701      	adds	r7, #1
    4380:	68e3      	ldr	r3, [r4, #12]
    4382:	682a      	ldr	r2, [r5, #0]
    4384:	1a9b      	subs	r3, r3, r2
    4386:	429f      	cmp	r7, r3
    4388:	dad2      	bge.n	4330 <_printf_common+0x38>
    438a:	0022      	movs	r2, r4
    438c:	2301      	movs	r3, #1
    438e:	3219      	adds	r2, #25
    4390:	9901      	ldr	r1, [sp, #4]
    4392:	9800      	ldr	r0, [sp, #0]
    4394:	9e08      	ldr	r6, [sp, #32]
    4396:	47b0      	blx	r6
    4398:	1c43      	adds	r3, r0, #1
    439a:	d1f0      	bne.n	437e <_printf_common+0x86>
    439c:	2001      	movs	r0, #1
    439e:	4240      	negs	r0, r0
    43a0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    43a2:	2030      	movs	r0, #48	; 0x30
    43a4:	18e1      	adds	r1, r4, r3
    43a6:	3143      	adds	r1, #67	; 0x43
    43a8:	7008      	strb	r0, [r1, #0]
    43aa:	0021      	movs	r1, r4
    43ac:	1c5a      	adds	r2, r3, #1
    43ae:	3145      	adds	r1, #69	; 0x45
    43b0:	7809      	ldrb	r1, [r1, #0]
    43b2:	18a2      	adds	r2, r4, r2
    43b4:	3243      	adds	r2, #67	; 0x43
    43b6:	3302      	adds	r3, #2
    43b8:	7011      	strb	r1, [r2, #0]
    43ba:	e7c1      	b.n	4340 <_printf_common+0x48>
    43bc:	0022      	movs	r2, r4
    43be:	2301      	movs	r3, #1
    43c0:	321a      	adds	r2, #26
    43c2:	9901      	ldr	r1, [sp, #4]
    43c4:	9800      	ldr	r0, [sp, #0]
    43c6:	9e08      	ldr	r6, [sp, #32]
    43c8:	47b0      	blx	r6
    43ca:	1c43      	adds	r3, r0, #1
    43cc:	d0e6      	beq.n	439c <_printf_common+0xa4>
    43ce:	3701      	adds	r7, #1
    43d0:	e7d1      	b.n	4376 <_printf_common+0x7e>
	...

000043d4 <_printf_i>:
    43d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    43d6:	b08b      	sub	sp, #44	; 0x2c
    43d8:	9206      	str	r2, [sp, #24]
    43da:	000a      	movs	r2, r1
    43dc:	3243      	adds	r2, #67	; 0x43
    43de:	9307      	str	r3, [sp, #28]
    43e0:	9005      	str	r0, [sp, #20]
    43e2:	9204      	str	r2, [sp, #16]
    43e4:	7e0a      	ldrb	r2, [r1, #24]
    43e6:	000c      	movs	r4, r1
    43e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    43ea:	2a6e      	cmp	r2, #110	; 0x6e
    43ec:	d100      	bne.n	43f0 <_printf_i+0x1c>
    43ee:	e08f      	b.n	4510 <_printf_i+0x13c>
    43f0:	d817      	bhi.n	4422 <_printf_i+0x4e>
    43f2:	2a63      	cmp	r2, #99	; 0x63
    43f4:	d02c      	beq.n	4450 <_printf_i+0x7c>
    43f6:	d808      	bhi.n	440a <_printf_i+0x36>
    43f8:	2a00      	cmp	r2, #0
    43fa:	d100      	bne.n	43fe <_printf_i+0x2a>
    43fc:	e099      	b.n	4532 <_printf_i+0x15e>
    43fe:	2a58      	cmp	r2, #88	; 0x58
    4400:	d054      	beq.n	44ac <_printf_i+0xd8>
    4402:	0026      	movs	r6, r4
    4404:	3642      	adds	r6, #66	; 0x42
    4406:	7032      	strb	r2, [r6, #0]
    4408:	e029      	b.n	445e <_printf_i+0x8a>
    440a:	2a64      	cmp	r2, #100	; 0x64
    440c:	d001      	beq.n	4412 <_printf_i+0x3e>
    440e:	2a69      	cmp	r2, #105	; 0x69
    4410:	d1f7      	bne.n	4402 <_printf_i+0x2e>
    4412:	6821      	ldr	r1, [r4, #0]
    4414:	681a      	ldr	r2, [r3, #0]
    4416:	0608      	lsls	r0, r1, #24
    4418:	d523      	bpl.n	4462 <_printf_i+0x8e>
    441a:	1d11      	adds	r1, r2, #4
    441c:	6019      	str	r1, [r3, #0]
    441e:	6815      	ldr	r5, [r2, #0]
    4420:	e025      	b.n	446e <_printf_i+0x9a>
    4422:	2a73      	cmp	r2, #115	; 0x73
    4424:	d100      	bne.n	4428 <_printf_i+0x54>
    4426:	e088      	b.n	453a <_printf_i+0x166>
    4428:	d808      	bhi.n	443c <_printf_i+0x68>
    442a:	2a6f      	cmp	r2, #111	; 0x6f
    442c:	d029      	beq.n	4482 <_printf_i+0xae>
    442e:	2a70      	cmp	r2, #112	; 0x70
    4430:	d1e7      	bne.n	4402 <_printf_i+0x2e>
    4432:	2220      	movs	r2, #32
    4434:	6809      	ldr	r1, [r1, #0]
    4436:	430a      	orrs	r2, r1
    4438:	6022      	str	r2, [r4, #0]
    443a:	e003      	b.n	4444 <_printf_i+0x70>
    443c:	2a75      	cmp	r2, #117	; 0x75
    443e:	d020      	beq.n	4482 <_printf_i+0xae>
    4440:	2a78      	cmp	r2, #120	; 0x78
    4442:	d1de      	bne.n	4402 <_printf_i+0x2e>
    4444:	0022      	movs	r2, r4
    4446:	2178      	movs	r1, #120	; 0x78
    4448:	3245      	adds	r2, #69	; 0x45
    444a:	7011      	strb	r1, [r2, #0]
    444c:	4a6c      	ldr	r2, [pc, #432]	; (4600 <_printf_i+0x22c>)
    444e:	e030      	b.n	44b2 <_printf_i+0xde>
    4450:	000e      	movs	r6, r1
    4452:	681a      	ldr	r2, [r3, #0]
    4454:	3642      	adds	r6, #66	; 0x42
    4456:	1d11      	adds	r1, r2, #4
    4458:	6019      	str	r1, [r3, #0]
    445a:	6813      	ldr	r3, [r2, #0]
    445c:	7033      	strb	r3, [r6, #0]
    445e:	2301      	movs	r3, #1
    4460:	e079      	b.n	4556 <_printf_i+0x182>
    4462:	0649      	lsls	r1, r1, #25
    4464:	d5d9      	bpl.n	441a <_printf_i+0x46>
    4466:	1d11      	adds	r1, r2, #4
    4468:	6019      	str	r1, [r3, #0]
    446a:	2300      	movs	r3, #0
    446c:	5ed5      	ldrsh	r5, [r2, r3]
    446e:	2d00      	cmp	r5, #0
    4470:	da03      	bge.n	447a <_printf_i+0xa6>
    4472:	232d      	movs	r3, #45	; 0x2d
    4474:	9a04      	ldr	r2, [sp, #16]
    4476:	426d      	negs	r5, r5
    4478:	7013      	strb	r3, [r2, #0]
    447a:	4b62      	ldr	r3, [pc, #392]	; (4604 <_printf_i+0x230>)
    447c:	270a      	movs	r7, #10
    447e:	9303      	str	r3, [sp, #12]
    4480:	e02f      	b.n	44e2 <_printf_i+0x10e>
    4482:	6820      	ldr	r0, [r4, #0]
    4484:	6819      	ldr	r1, [r3, #0]
    4486:	0605      	lsls	r5, r0, #24
    4488:	d503      	bpl.n	4492 <_printf_i+0xbe>
    448a:	1d08      	adds	r0, r1, #4
    448c:	6018      	str	r0, [r3, #0]
    448e:	680d      	ldr	r5, [r1, #0]
    4490:	e005      	b.n	449e <_printf_i+0xca>
    4492:	0640      	lsls	r0, r0, #25
    4494:	d5f9      	bpl.n	448a <_printf_i+0xb6>
    4496:	680d      	ldr	r5, [r1, #0]
    4498:	1d08      	adds	r0, r1, #4
    449a:	6018      	str	r0, [r3, #0]
    449c:	b2ad      	uxth	r5, r5
    449e:	4b59      	ldr	r3, [pc, #356]	; (4604 <_printf_i+0x230>)
    44a0:	2708      	movs	r7, #8
    44a2:	9303      	str	r3, [sp, #12]
    44a4:	2a6f      	cmp	r2, #111	; 0x6f
    44a6:	d018      	beq.n	44da <_printf_i+0x106>
    44a8:	270a      	movs	r7, #10
    44aa:	e016      	b.n	44da <_printf_i+0x106>
    44ac:	3145      	adds	r1, #69	; 0x45
    44ae:	700a      	strb	r2, [r1, #0]
    44b0:	4a54      	ldr	r2, [pc, #336]	; (4604 <_printf_i+0x230>)
    44b2:	9203      	str	r2, [sp, #12]
    44b4:	681a      	ldr	r2, [r3, #0]
    44b6:	6821      	ldr	r1, [r4, #0]
    44b8:	1d10      	adds	r0, r2, #4
    44ba:	6018      	str	r0, [r3, #0]
    44bc:	6815      	ldr	r5, [r2, #0]
    44be:	0608      	lsls	r0, r1, #24
    44c0:	d522      	bpl.n	4508 <_printf_i+0x134>
    44c2:	07cb      	lsls	r3, r1, #31
    44c4:	d502      	bpl.n	44cc <_printf_i+0xf8>
    44c6:	2320      	movs	r3, #32
    44c8:	4319      	orrs	r1, r3
    44ca:	6021      	str	r1, [r4, #0]
    44cc:	2710      	movs	r7, #16
    44ce:	2d00      	cmp	r5, #0
    44d0:	d103      	bne.n	44da <_printf_i+0x106>
    44d2:	2320      	movs	r3, #32
    44d4:	6822      	ldr	r2, [r4, #0]
    44d6:	439a      	bics	r2, r3
    44d8:	6022      	str	r2, [r4, #0]
    44da:	0023      	movs	r3, r4
    44dc:	2200      	movs	r2, #0
    44de:	3343      	adds	r3, #67	; 0x43
    44e0:	701a      	strb	r2, [r3, #0]
    44e2:	6863      	ldr	r3, [r4, #4]
    44e4:	60a3      	str	r3, [r4, #8]
    44e6:	2b00      	cmp	r3, #0
    44e8:	db5c      	blt.n	45a4 <_printf_i+0x1d0>
    44ea:	2204      	movs	r2, #4
    44ec:	6821      	ldr	r1, [r4, #0]
    44ee:	4391      	bics	r1, r2
    44f0:	6021      	str	r1, [r4, #0]
    44f2:	2d00      	cmp	r5, #0
    44f4:	d158      	bne.n	45a8 <_printf_i+0x1d4>
    44f6:	9e04      	ldr	r6, [sp, #16]
    44f8:	2b00      	cmp	r3, #0
    44fa:	d064      	beq.n	45c6 <_printf_i+0x1f2>
    44fc:	0026      	movs	r6, r4
    44fe:	9b03      	ldr	r3, [sp, #12]
    4500:	3642      	adds	r6, #66	; 0x42
    4502:	781b      	ldrb	r3, [r3, #0]
    4504:	7033      	strb	r3, [r6, #0]
    4506:	e05e      	b.n	45c6 <_printf_i+0x1f2>
    4508:	0648      	lsls	r0, r1, #25
    450a:	d5da      	bpl.n	44c2 <_printf_i+0xee>
    450c:	b2ad      	uxth	r5, r5
    450e:	e7d8      	b.n	44c2 <_printf_i+0xee>
    4510:	6809      	ldr	r1, [r1, #0]
    4512:	681a      	ldr	r2, [r3, #0]
    4514:	0608      	lsls	r0, r1, #24
    4516:	d505      	bpl.n	4524 <_printf_i+0x150>
    4518:	1d11      	adds	r1, r2, #4
    451a:	6019      	str	r1, [r3, #0]
    451c:	6813      	ldr	r3, [r2, #0]
    451e:	6962      	ldr	r2, [r4, #20]
    4520:	601a      	str	r2, [r3, #0]
    4522:	e006      	b.n	4532 <_printf_i+0x15e>
    4524:	0649      	lsls	r1, r1, #25
    4526:	d5f7      	bpl.n	4518 <_printf_i+0x144>
    4528:	1d11      	adds	r1, r2, #4
    452a:	6019      	str	r1, [r3, #0]
    452c:	6813      	ldr	r3, [r2, #0]
    452e:	8aa2      	ldrh	r2, [r4, #20]
    4530:	801a      	strh	r2, [r3, #0]
    4532:	2300      	movs	r3, #0
    4534:	9e04      	ldr	r6, [sp, #16]
    4536:	6123      	str	r3, [r4, #16]
    4538:	e054      	b.n	45e4 <_printf_i+0x210>
    453a:	681a      	ldr	r2, [r3, #0]
    453c:	1d11      	adds	r1, r2, #4
    453e:	6019      	str	r1, [r3, #0]
    4540:	6816      	ldr	r6, [r2, #0]
    4542:	2100      	movs	r1, #0
    4544:	6862      	ldr	r2, [r4, #4]
    4546:	0030      	movs	r0, r6
    4548:	f000 fa0a 	bl	4960 <memchr>
    454c:	2800      	cmp	r0, #0
    454e:	d001      	beq.n	4554 <_printf_i+0x180>
    4550:	1b80      	subs	r0, r0, r6
    4552:	6060      	str	r0, [r4, #4]
    4554:	6863      	ldr	r3, [r4, #4]
    4556:	6123      	str	r3, [r4, #16]
    4558:	2300      	movs	r3, #0
    455a:	9a04      	ldr	r2, [sp, #16]
    455c:	7013      	strb	r3, [r2, #0]
    455e:	e041      	b.n	45e4 <_printf_i+0x210>
    4560:	6923      	ldr	r3, [r4, #16]
    4562:	0032      	movs	r2, r6
    4564:	9906      	ldr	r1, [sp, #24]
    4566:	9805      	ldr	r0, [sp, #20]
    4568:	9d07      	ldr	r5, [sp, #28]
    456a:	47a8      	blx	r5
    456c:	1c43      	adds	r3, r0, #1
    456e:	d043      	beq.n	45f8 <_printf_i+0x224>
    4570:	6823      	ldr	r3, [r4, #0]
    4572:	2500      	movs	r5, #0
    4574:	079b      	lsls	r3, r3, #30
    4576:	d40f      	bmi.n	4598 <_printf_i+0x1c4>
    4578:	9b09      	ldr	r3, [sp, #36]	; 0x24
    457a:	68e0      	ldr	r0, [r4, #12]
    457c:	4298      	cmp	r0, r3
    457e:	da3d      	bge.n	45fc <_printf_i+0x228>
    4580:	0018      	movs	r0, r3
    4582:	e03b      	b.n	45fc <_printf_i+0x228>
    4584:	0022      	movs	r2, r4
    4586:	2301      	movs	r3, #1
    4588:	3219      	adds	r2, #25
    458a:	9906      	ldr	r1, [sp, #24]
    458c:	9805      	ldr	r0, [sp, #20]
    458e:	9e07      	ldr	r6, [sp, #28]
    4590:	47b0      	blx	r6
    4592:	1c43      	adds	r3, r0, #1
    4594:	d030      	beq.n	45f8 <_printf_i+0x224>
    4596:	3501      	adds	r5, #1
    4598:	68e3      	ldr	r3, [r4, #12]
    459a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    459c:	1a9b      	subs	r3, r3, r2
    459e:	429d      	cmp	r5, r3
    45a0:	dbf0      	blt.n	4584 <_printf_i+0x1b0>
    45a2:	e7e9      	b.n	4578 <_printf_i+0x1a4>
    45a4:	2d00      	cmp	r5, #0
    45a6:	d0a9      	beq.n	44fc <_printf_i+0x128>
    45a8:	9e04      	ldr	r6, [sp, #16]
    45aa:	0028      	movs	r0, r5
    45ac:	0039      	movs	r1, r7
    45ae:	f7fe fff9 	bl	35a4 <__aeabi_uidivmod>
    45b2:	9b03      	ldr	r3, [sp, #12]
    45b4:	3e01      	subs	r6, #1
    45b6:	5c5b      	ldrb	r3, [r3, r1]
    45b8:	0028      	movs	r0, r5
    45ba:	7033      	strb	r3, [r6, #0]
    45bc:	0039      	movs	r1, r7
    45be:	f7fe ff6b 	bl	3498 <__udivsi3>
    45c2:	1e05      	subs	r5, r0, #0
    45c4:	d1f1      	bne.n	45aa <_printf_i+0x1d6>
    45c6:	2f08      	cmp	r7, #8
    45c8:	d109      	bne.n	45de <_printf_i+0x20a>
    45ca:	6823      	ldr	r3, [r4, #0]
    45cc:	07db      	lsls	r3, r3, #31
    45ce:	d506      	bpl.n	45de <_printf_i+0x20a>
    45d0:	6863      	ldr	r3, [r4, #4]
    45d2:	6922      	ldr	r2, [r4, #16]
    45d4:	4293      	cmp	r3, r2
    45d6:	dc02      	bgt.n	45de <_printf_i+0x20a>
    45d8:	2330      	movs	r3, #48	; 0x30
    45da:	3e01      	subs	r6, #1
    45dc:	7033      	strb	r3, [r6, #0]
    45de:	9b04      	ldr	r3, [sp, #16]
    45e0:	1b9b      	subs	r3, r3, r6
    45e2:	6123      	str	r3, [r4, #16]
    45e4:	9b07      	ldr	r3, [sp, #28]
    45e6:	aa09      	add	r2, sp, #36	; 0x24
    45e8:	9300      	str	r3, [sp, #0]
    45ea:	0021      	movs	r1, r4
    45ec:	9b06      	ldr	r3, [sp, #24]
    45ee:	9805      	ldr	r0, [sp, #20]
    45f0:	f7ff fe82 	bl	42f8 <_printf_common>
    45f4:	1c43      	adds	r3, r0, #1
    45f6:	d1b3      	bne.n	4560 <_printf_i+0x18c>
    45f8:	2001      	movs	r0, #1
    45fa:	4240      	negs	r0, r0
    45fc:	b00b      	add	sp, #44	; 0x2c
    45fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4600:	00006bb6 	.word	0x00006bb6
    4604:	00006ba5 	.word	0x00006ba5

00004608 <_putc_r>:
    4608:	b570      	push	{r4, r5, r6, lr}
    460a:	0006      	movs	r6, r0
    460c:	000d      	movs	r5, r1
    460e:	0014      	movs	r4, r2
    4610:	2800      	cmp	r0, #0
    4612:	d004      	beq.n	461e <_putc_r+0x16>
    4614:	6983      	ldr	r3, [r0, #24]
    4616:	2b00      	cmp	r3, #0
    4618:	d101      	bne.n	461e <_putc_r+0x16>
    461a:	f7ff fc25 	bl	3e68 <__sinit>
    461e:	4b12      	ldr	r3, [pc, #72]	; (4668 <_putc_r+0x60>)
    4620:	429c      	cmp	r4, r3
    4622:	d111      	bne.n	4648 <_putc_r+0x40>
    4624:	6874      	ldr	r4, [r6, #4]
    4626:	68a3      	ldr	r3, [r4, #8]
    4628:	3b01      	subs	r3, #1
    462a:	60a3      	str	r3, [r4, #8]
    462c:	2b00      	cmp	r3, #0
    462e:	da05      	bge.n	463c <_putc_r+0x34>
    4630:	69a2      	ldr	r2, [r4, #24]
    4632:	4293      	cmp	r3, r2
    4634:	db12      	blt.n	465c <_putc_r+0x54>
    4636:	b2eb      	uxtb	r3, r5
    4638:	2b0a      	cmp	r3, #10
    463a:	d00f      	beq.n	465c <_putc_r+0x54>
    463c:	6823      	ldr	r3, [r4, #0]
    463e:	b2e8      	uxtb	r0, r5
    4640:	1c5a      	adds	r2, r3, #1
    4642:	6022      	str	r2, [r4, #0]
    4644:	701d      	strb	r5, [r3, #0]
    4646:	bd70      	pop	{r4, r5, r6, pc}
    4648:	4b08      	ldr	r3, [pc, #32]	; (466c <_putc_r+0x64>)
    464a:	429c      	cmp	r4, r3
    464c:	d101      	bne.n	4652 <_putc_r+0x4a>
    464e:	68b4      	ldr	r4, [r6, #8]
    4650:	e7e9      	b.n	4626 <_putc_r+0x1e>
    4652:	4b07      	ldr	r3, [pc, #28]	; (4670 <_putc_r+0x68>)
    4654:	429c      	cmp	r4, r3
    4656:	d1e6      	bne.n	4626 <_putc_r+0x1e>
    4658:	68f4      	ldr	r4, [r6, #12]
    465a:	e7e4      	b.n	4626 <_putc_r+0x1e>
    465c:	0022      	movs	r2, r4
    465e:	0029      	movs	r1, r5
    4660:	0030      	movs	r0, r6
    4662:	f000 f853 	bl	470c <__swbuf_r>
    4666:	e7ee      	b.n	4646 <_putc_r+0x3e>
    4668:	00006b54 	.word	0x00006b54
    466c:	00006b74 	.word	0x00006b74
    4670:	00006b34 	.word	0x00006b34

00004674 <__sread>:
    4674:	b570      	push	{r4, r5, r6, lr}
    4676:	000c      	movs	r4, r1
    4678:	250e      	movs	r5, #14
    467a:	5f49      	ldrsh	r1, [r1, r5]
    467c:	f000 f97c 	bl	4978 <_read_r>
    4680:	2800      	cmp	r0, #0
    4682:	db03      	blt.n	468c <__sread+0x18>
    4684:	6d63      	ldr	r3, [r4, #84]	; 0x54
    4686:	181b      	adds	r3, r3, r0
    4688:	6563      	str	r3, [r4, #84]	; 0x54
    468a:	bd70      	pop	{r4, r5, r6, pc}
    468c:	89a3      	ldrh	r3, [r4, #12]
    468e:	4a02      	ldr	r2, [pc, #8]	; (4698 <__sread+0x24>)
    4690:	4013      	ands	r3, r2
    4692:	81a3      	strh	r3, [r4, #12]
    4694:	e7f9      	b.n	468a <__sread+0x16>
    4696:	46c0      	nop			; (mov r8, r8)
    4698:	ffffefff 	.word	0xffffefff

0000469c <__swrite>:
    469c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    469e:	001f      	movs	r7, r3
    46a0:	898b      	ldrh	r3, [r1, #12]
    46a2:	0005      	movs	r5, r0
    46a4:	000c      	movs	r4, r1
    46a6:	0016      	movs	r6, r2
    46a8:	05db      	lsls	r3, r3, #23
    46aa:	d505      	bpl.n	46b8 <__swrite+0x1c>
    46ac:	230e      	movs	r3, #14
    46ae:	5ec9      	ldrsh	r1, [r1, r3]
    46b0:	2200      	movs	r2, #0
    46b2:	2302      	movs	r3, #2
    46b4:	f000 f940 	bl	4938 <_lseek_r>
    46b8:	89a3      	ldrh	r3, [r4, #12]
    46ba:	4a05      	ldr	r2, [pc, #20]	; (46d0 <__swrite+0x34>)
    46bc:	0028      	movs	r0, r5
    46be:	4013      	ands	r3, r2
    46c0:	81a3      	strh	r3, [r4, #12]
    46c2:	0032      	movs	r2, r6
    46c4:	230e      	movs	r3, #14
    46c6:	5ee1      	ldrsh	r1, [r4, r3]
    46c8:	003b      	movs	r3, r7
    46ca:	f000 f875 	bl	47b8 <_write_r>
    46ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    46d0:	ffffefff 	.word	0xffffefff

000046d4 <__sseek>:
    46d4:	b570      	push	{r4, r5, r6, lr}
    46d6:	000c      	movs	r4, r1
    46d8:	250e      	movs	r5, #14
    46da:	5f49      	ldrsh	r1, [r1, r5]
    46dc:	f000 f92c 	bl	4938 <_lseek_r>
    46e0:	89a3      	ldrh	r3, [r4, #12]
    46e2:	1c42      	adds	r2, r0, #1
    46e4:	d103      	bne.n	46ee <__sseek+0x1a>
    46e6:	4a05      	ldr	r2, [pc, #20]	; (46fc <__sseek+0x28>)
    46e8:	4013      	ands	r3, r2
    46ea:	81a3      	strh	r3, [r4, #12]
    46ec:	bd70      	pop	{r4, r5, r6, pc}
    46ee:	2280      	movs	r2, #128	; 0x80
    46f0:	0152      	lsls	r2, r2, #5
    46f2:	4313      	orrs	r3, r2
    46f4:	81a3      	strh	r3, [r4, #12]
    46f6:	6560      	str	r0, [r4, #84]	; 0x54
    46f8:	e7f8      	b.n	46ec <__sseek+0x18>
    46fa:	46c0      	nop			; (mov r8, r8)
    46fc:	ffffefff 	.word	0xffffefff

00004700 <__sclose>:
    4700:	b510      	push	{r4, lr}
    4702:	230e      	movs	r3, #14
    4704:	5ec9      	ldrsh	r1, [r1, r3]
    4706:	f000 f8e1 	bl	48cc <_close_r>
    470a:	bd10      	pop	{r4, pc}

0000470c <__swbuf_r>:
    470c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    470e:	0005      	movs	r5, r0
    4710:	000e      	movs	r6, r1
    4712:	0014      	movs	r4, r2
    4714:	2800      	cmp	r0, #0
    4716:	d004      	beq.n	4722 <__swbuf_r+0x16>
    4718:	6983      	ldr	r3, [r0, #24]
    471a:	2b00      	cmp	r3, #0
    471c:	d101      	bne.n	4722 <__swbuf_r+0x16>
    471e:	f7ff fba3 	bl	3e68 <__sinit>
    4722:	4b22      	ldr	r3, [pc, #136]	; (47ac <__swbuf_r+0xa0>)
    4724:	429c      	cmp	r4, r3
    4726:	d12d      	bne.n	4784 <__swbuf_r+0x78>
    4728:	686c      	ldr	r4, [r5, #4]
    472a:	69a3      	ldr	r3, [r4, #24]
    472c:	60a3      	str	r3, [r4, #8]
    472e:	89a3      	ldrh	r3, [r4, #12]
    4730:	071b      	lsls	r3, r3, #28
    4732:	d531      	bpl.n	4798 <__swbuf_r+0x8c>
    4734:	6923      	ldr	r3, [r4, #16]
    4736:	2b00      	cmp	r3, #0
    4738:	d02e      	beq.n	4798 <__swbuf_r+0x8c>
    473a:	6823      	ldr	r3, [r4, #0]
    473c:	6922      	ldr	r2, [r4, #16]
    473e:	b2f7      	uxtb	r7, r6
    4740:	1a98      	subs	r0, r3, r2
    4742:	6963      	ldr	r3, [r4, #20]
    4744:	b2f6      	uxtb	r6, r6
    4746:	4298      	cmp	r0, r3
    4748:	db05      	blt.n	4756 <__swbuf_r+0x4a>
    474a:	0021      	movs	r1, r4
    474c:	0028      	movs	r0, r5
    474e:	f7ff fb1d 	bl	3d8c <_fflush_r>
    4752:	2800      	cmp	r0, #0
    4754:	d126      	bne.n	47a4 <__swbuf_r+0x98>
    4756:	68a3      	ldr	r3, [r4, #8]
    4758:	3001      	adds	r0, #1
    475a:	3b01      	subs	r3, #1
    475c:	60a3      	str	r3, [r4, #8]
    475e:	6823      	ldr	r3, [r4, #0]
    4760:	1c5a      	adds	r2, r3, #1
    4762:	6022      	str	r2, [r4, #0]
    4764:	701f      	strb	r7, [r3, #0]
    4766:	6963      	ldr	r3, [r4, #20]
    4768:	4298      	cmp	r0, r3
    476a:	d004      	beq.n	4776 <__swbuf_r+0x6a>
    476c:	89a3      	ldrh	r3, [r4, #12]
    476e:	07db      	lsls	r3, r3, #31
    4770:	d51a      	bpl.n	47a8 <__swbuf_r+0x9c>
    4772:	2e0a      	cmp	r6, #10
    4774:	d118      	bne.n	47a8 <__swbuf_r+0x9c>
    4776:	0021      	movs	r1, r4
    4778:	0028      	movs	r0, r5
    477a:	f7ff fb07 	bl	3d8c <_fflush_r>
    477e:	2800      	cmp	r0, #0
    4780:	d012      	beq.n	47a8 <__swbuf_r+0x9c>
    4782:	e00f      	b.n	47a4 <__swbuf_r+0x98>
    4784:	4b0a      	ldr	r3, [pc, #40]	; (47b0 <__swbuf_r+0xa4>)
    4786:	429c      	cmp	r4, r3
    4788:	d101      	bne.n	478e <__swbuf_r+0x82>
    478a:	68ac      	ldr	r4, [r5, #8]
    478c:	e7cd      	b.n	472a <__swbuf_r+0x1e>
    478e:	4b09      	ldr	r3, [pc, #36]	; (47b4 <__swbuf_r+0xa8>)
    4790:	429c      	cmp	r4, r3
    4792:	d1ca      	bne.n	472a <__swbuf_r+0x1e>
    4794:	68ec      	ldr	r4, [r5, #12]
    4796:	e7c8      	b.n	472a <__swbuf_r+0x1e>
    4798:	0021      	movs	r1, r4
    479a:	0028      	movs	r0, r5
    479c:	f000 f820 	bl	47e0 <__swsetup_r>
    47a0:	2800      	cmp	r0, #0
    47a2:	d0ca      	beq.n	473a <__swbuf_r+0x2e>
    47a4:	2601      	movs	r6, #1
    47a6:	4276      	negs	r6, r6
    47a8:	0030      	movs	r0, r6
    47aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    47ac:	00006b54 	.word	0x00006b54
    47b0:	00006b74 	.word	0x00006b74
    47b4:	00006b34 	.word	0x00006b34

000047b8 <_write_r>:
    47b8:	b570      	push	{r4, r5, r6, lr}
    47ba:	0005      	movs	r5, r0
    47bc:	0008      	movs	r0, r1
    47be:	0011      	movs	r1, r2
    47c0:	2200      	movs	r2, #0
    47c2:	4c06      	ldr	r4, [pc, #24]	; (47dc <_write_r+0x24>)
    47c4:	6022      	str	r2, [r4, #0]
    47c6:	001a      	movs	r2, r3
    47c8:	f7fd fbe6 	bl	1f98 <_write>
    47cc:	1c43      	adds	r3, r0, #1
    47ce:	d103      	bne.n	47d8 <_write_r+0x20>
    47d0:	6823      	ldr	r3, [r4, #0]
    47d2:	2b00      	cmp	r3, #0
    47d4:	d000      	beq.n	47d8 <_write_r+0x20>
    47d6:	602b      	str	r3, [r5, #0]
    47d8:	bd70      	pop	{r4, r5, r6, pc}
    47da:	46c0      	nop			; (mov r8, r8)
    47dc:	20000abc 	.word	0x20000abc

000047e0 <__swsetup_r>:
    47e0:	4b36      	ldr	r3, [pc, #216]	; (48bc <__swsetup_r+0xdc>)
    47e2:	b570      	push	{r4, r5, r6, lr}
    47e4:	681d      	ldr	r5, [r3, #0]
    47e6:	0006      	movs	r6, r0
    47e8:	000c      	movs	r4, r1
    47ea:	2d00      	cmp	r5, #0
    47ec:	d005      	beq.n	47fa <__swsetup_r+0x1a>
    47ee:	69ab      	ldr	r3, [r5, #24]
    47f0:	2b00      	cmp	r3, #0
    47f2:	d102      	bne.n	47fa <__swsetup_r+0x1a>
    47f4:	0028      	movs	r0, r5
    47f6:	f7ff fb37 	bl	3e68 <__sinit>
    47fa:	4b31      	ldr	r3, [pc, #196]	; (48c0 <__swsetup_r+0xe0>)
    47fc:	429c      	cmp	r4, r3
    47fe:	d10f      	bne.n	4820 <__swsetup_r+0x40>
    4800:	686c      	ldr	r4, [r5, #4]
    4802:	230c      	movs	r3, #12
    4804:	5ee2      	ldrsh	r2, [r4, r3]
    4806:	b293      	uxth	r3, r2
    4808:	0719      	lsls	r1, r3, #28
    480a:	d42d      	bmi.n	4868 <__swsetup_r+0x88>
    480c:	06d9      	lsls	r1, r3, #27
    480e:	d411      	bmi.n	4834 <__swsetup_r+0x54>
    4810:	2309      	movs	r3, #9
    4812:	2001      	movs	r0, #1
    4814:	6033      	str	r3, [r6, #0]
    4816:	3337      	adds	r3, #55	; 0x37
    4818:	4313      	orrs	r3, r2
    481a:	81a3      	strh	r3, [r4, #12]
    481c:	4240      	negs	r0, r0
    481e:	bd70      	pop	{r4, r5, r6, pc}
    4820:	4b28      	ldr	r3, [pc, #160]	; (48c4 <__swsetup_r+0xe4>)
    4822:	429c      	cmp	r4, r3
    4824:	d101      	bne.n	482a <__swsetup_r+0x4a>
    4826:	68ac      	ldr	r4, [r5, #8]
    4828:	e7eb      	b.n	4802 <__swsetup_r+0x22>
    482a:	4b27      	ldr	r3, [pc, #156]	; (48c8 <__swsetup_r+0xe8>)
    482c:	429c      	cmp	r4, r3
    482e:	d1e8      	bne.n	4802 <__swsetup_r+0x22>
    4830:	68ec      	ldr	r4, [r5, #12]
    4832:	e7e6      	b.n	4802 <__swsetup_r+0x22>
    4834:	075b      	lsls	r3, r3, #29
    4836:	d513      	bpl.n	4860 <__swsetup_r+0x80>
    4838:	6b61      	ldr	r1, [r4, #52]	; 0x34
    483a:	2900      	cmp	r1, #0
    483c:	d008      	beq.n	4850 <__swsetup_r+0x70>
    483e:	0023      	movs	r3, r4
    4840:	3344      	adds	r3, #68	; 0x44
    4842:	4299      	cmp	r1, r3
    4844:	d002      	beq.n	484c <__swsetup_r+0x6c>
    4846:	0030      	movs	r0, r6
    4848:	f7ff f806 	bl	3858 <_free_r>
    484c:	2300      	movs	r3, #0
    484e:	6363      	str	r3, [r4, #52]	; 0x34
    4850:	2224      	movs	r2, #36	; 0x24
    4852:	89a3      	ldrh	r3, [r4, #12]
    4854:	4393      	bics	r3, r2
    4856:	81a3      	strh	r3, [r4, #12]
    4858:	2300      	movs	r3, #0
    485a:	6063      	str	r3, [r4, #4]
    485c:	6923      	ldr	r3, [r4, #16]
    485e:	6023      	str	r3, [r4, #0]
    4860:	2308      	movs	r3, #8
    4862:	89a2      	ldrh	r2, [r4, #12]
    4864:	4313      	orrs	r3, r2
    4866:	81a3      	strh	r3, [r4, #12]
    4868:	6923      	ldr	r3, [r4, #16]
    486a:	2b00      	cmp	r3, #0
    486c:	d10b      	bne.n	4886 <__swsetup_r+0xa6>
    486e:	21a0      	movs	r1, #160	; 0xa0
    4870:	2280      	movs	r2, #128	; 0x80
    4872:	89a3      	ldrh	r3, [r4, #12]
    4874:	0089      	lsls	r1, r1, #2
    4876:	0092      	lsls	r2, r2, #2
    4878:	400b      	ands	r3, r1
    487a:	4293      	cmp	r3, r2
    487c:	d003      	beq.n	4886 <__swsetup_r+0xa6>
    487e:	0021      	movs	r1, r4
    4880:	0030      	movs	r0, r6
    4882:	f7ff fbaf 	bl	3fe4 <__smakebuf_r>
    4886:	2301      	movs	r3, #1
    4888:	89a2      	ldrh	r2, [r4, #12]
    488a:	4013      	ands	r3, r2
    488c:	d011      	beq.n	48b2 <__swsetup_r+0xd2>
    488e:	2300      	movs	r3, #0
    4890:	60a3      	str	r3, [r4, #8]
    4892:	6963      	ldr	r3, [r4, #20]
    4894:	425b      	negs	r3, r3
    4896:	61a3      	str	r3, [r4, #24]
    4898:	2000      	movs	r0, #0
    489a:	6923      	ldr	r3, [r4, #16]
    489c:	4283      	cmp	r3, r0
    489e:	d1be      	bne.n	481e <__swsetup_r+0x3e>
    48a0:	230c      	movs	r3, #12
    48a2:	5ee2      	ldrsh	r2, [r4, r3]
    48a4:	0613      	lsls	r3, r2, #24
    48a6:	d5ba      	bpl.n	481e <__swsetup_r+0x3e>
    48a8:	2340      	movs	r3, #64	; 0x40
    48aa:	4313      	orrs	r3, r2
    48ac:	81a3      	strh	r3, [r4, #12]
    48ae:	3801      	subs	r0, #1
    48b0:	e7b5      	b.n	481e <__swsetup_r+0x3e>
    48b2:	0792      	lsls	r2, r2, #30
    48b4:	d400      	bmi.n	48b8 <__swsetup_r+0xd8>
    48b6:	6963      	ldr	r3, [r4, #20]
    48b8:	60a3      	str	r3, [r4, #8]
    48ba:	e7ed      	b.n	4898 <__swsetup_r+0xb8>
    48bc:	20000158 	.word	0x20000158
    48c0:	00006b54 	.word	0x00006b54
    48c4:	00006b74 	.word	0x00006b74
    48c8:	00006b34 	.word	0x00006b34

000048cc <_close_r>:
    48cc:	2300      	movs	r3, #0
    48ce:	b570      	push	{r4, r5, r6, lr}
    48d0:	4c06      	ldr	r4, [pc, #24]	; (48ec <_close_r+0x20>)
    48d2:	0005      	movs	r5, r0
    48d4:	0008      	movs	r0, r1
    48d6:	6023      	str	r3, [r4, #0]
    48d8:	f7fd fb98 	bl	200c <_close>
    48dc:	1c43      	adds	r3, r0, #1
    48de:	d103      	bne.n	48e8 <_close_r+0x1c>
    48e0:	6823      	ldr	r3, [r4, #0]
    48e2:	2b00      	cmp	r3, #0
    48e4:	d000      	beq.n	48e8 <_close_r+0x1c>
    48e6:	602b      	str	r3, [r5, #0]
    48e8:	bd70      	pop	{r4, r5, r6, pc}
    48ea:	46c0      	nop			; (mov r8, r8)
    48ec:	20000abc 	.word	0x20000abc

000048f0 <_fstat_r>:
    48f0:	2300      	movs	r3, #0
    48f2:	b570      	push	{r4, r5, r6, lr}
    48f4:	4c06      	ldr	r4, [pc, #24]	; (4910 <_fstat_r+0x20>)
    48f6:	0005      	movs	r5, r0
    48f8:	0008      	movs	r0, r1
    48fa:	0011      	movs	r1, r2
    48fc:	6023      	str	r3, [r4, #0]
    48fe:	f7fd fb88 	bl	2012 <_fstat>
    4902:	1c43      	adds	r3, r0, #1
    4904:	d103      	bne.n	490e <_fstat_r+0x1e>
    4906:	6823      	ldr	r3, [r4, #0]
    4908:	2b00      	cmp	r3, #0
    490a:	d000      	beq.n	490e <_fstat_r+0x1e>
    490c:	602b      	str	r3, [r5, #0]
    490e:	bd70      	pop	{r4, r5, r6, pc}
    4910:	20000abc 	.word	0x20000abc

00004914 <_isatty_r>:
    4914:	2300      	movs	r3, #0
    4916:	b570      	push	{r4, r5, r6, lr}
    4918:	4c06      	ldr	r4, [pc, #24]	; (4934 <_isatty_r+0x20>)
    491a:	0005      	movs	r5, r0
    491c:	0008      	movs	r0, r1
    491e:	6023      	str	r3, [r4, #0]
    4920:	f7fd fb7c 	bl	201c <_isatty>
    4924:	1c43      	adds	r3, r0, #1
    4926:	d103      	bne.n	4930 <_isatty_r+0x1c>
    4928:	6823      	ldr	r3, [r4, #0]
    492a:	2b00      	cmp	r3, #0
    492c:	d000      	beq.n	4930 <_isatty_r+0x1c>
    492e:	602b      	str	r3, [r5, #0]
    4930:	bd70      	pop	{r4, r5, r6, pc}
    4932:	46c0      	nop			; (mov r8, r8)
    4934:	20000abc 	.word	0x20000abc

00004938 <_lseek_r>:
    4938:	b570      	push	{r4, r5, r6, lr}
    493a:	0005      	movs	r5, r0
    493c:	0008      	movs	r0, r1
    493e:	0011      	movs	r1, r2
    4940:	2200      	movs	r2, #0
    4942:	4c06      	ldr	r4, [pc, #24]	; (495c <_lseek_r+0x24>)
    4944:	6022      	str	r2, [r4, #0]
    4946:	001a      	movs	r2, r3
    4948:	f7fd fb6a 	bl	2020 <_lseek>
    494c:	1c43      	adds	r3, r0, #1
    494e:	d103      	bne.n	4958 <_lseek_r+0x20>
    4950:	6823      	ldr	r3, [r4, #0]
    4952:	2b00      	cmp	r3, #0
    4954:	d000      	beq.n	4958 <_lseek_r+0x20>
    4956:	602b      	str	r3, [r5, #0]
    4958:	bd70      	pop	{r4, r5, r6, pc}
    495a:	46c0      	nop			; (mov r8, r8)
    495c:	20000abc 	.word	0x20000abc

00004960 <memchr>:
    4960:	b2c9      	uxtb	r1, r1
    4962:	1882      	adds	r2, r0, r2
    4964:	4290      	cmp	r0, r2
    4966:	d101      	bne.n	496c <memchr+0xc>
    4968:	2000      	movs	r0, #0
    496a:	4770      	bx	lr
    496c:	7803      	ldrb	r3, [r0, #0]
    496e:	428b      	cmp	r3, r1
    4970:	d0fb      	beq.n	496a <memchr+0xa>
    4972:	3001      	adds	r0, #1
    4974:	e7f6      	b.n	4964 <memchr+0x4>
	...

00004978 <_read_r>:
    4978:	b570      	push	{r4, r5, r6, lr}
    497a:	0005      	movs	r5, r0
    497c:	0008      	movs	r0, r1
    497e:	0011      	movs	r1, r2
    4980:	2200      	movs	r2, #0
    4982:	4c06      	ldr	r4, [pc, #24]	; (499c <_read_r+0x24>)
    4984:	6022      	str	r2, [r4, #0]
    4986:	001a      	movs	r2, r3
    4988:	f7fd fae4 	bl	1f54 <_read>
    498c:	1c43      	adds	r3, r0, #1
    498e:	d103      	bne.n	4998 <_read_r+0x20>
    4990:	6823      	ldr	r3, [r4, #0]
    4992:	2b00      	cmp	r3, #0
    4994:	d000      	beq.n	4998 <_read_r+0x20>
    4996:	602b      	str	r3, [r5, #0]
    4998:	bd70      	pop	{r4, r5, r6, pc}
    499a:	46c0      	nop			; (mov r8, r8)
    499c:	20000abc 	.word	0x20000abc
    49a0:	000a000a 	.word	0x000a000a
    49a4:	00140014 	.word	0x00140014
    49a8:	00000014 	.word	0x00000014
    49ac:	000a017c 	.word	0x000a017c
    49b0:	000a017c 	.word	0x000a017c
    49b4:	00140186 	.word	0x00140186
    49b8:	00140000 	.word	0x00140000
    49bc:	0122000a 	.word	0x0122000a
    49c0:	00140186 	.word	0x00140186
    49c4:	01220190 	.word	0x01220190
    49c8:	0122000a 	.word	0x0122000a
    49cc:	012c0014 	.word	0x012c0014
    49d0:	0122017c 	.word	0x0122017c
    49d4:	012c0186 	.word	0x012c0186
    49d8:	012c0014 	.word	0x012c0014
    49dc:	0136017c 	.word	0x0136017c
    49e0:	001e0000 	.word	0x001e0000
    49e4:	00280032 	.word	0x00280032
    49e8:	00320000 	.word	0x00320000
    49ec:	003c0032 	.word	0x003c0032
    49f0:	001e0050 	.word	0x001e0050
    49f4:	00280118 	.word	0x00280118
    49f8:	00280046 	.word	0x00280046
    49fc:	00be0050 	.word	0x00be0050
    4a00:	00be0050 	.word	0x00be0050
    4a04:	00c80118 	.word	0x00c80118
    4a08:	00280118 	.word	0x00280118
    4a0c:	00be0122 	.word	0x00be0122
    4a10:	00460000 	.word	0x00460000
    4a14:	00500032 	.word	0x00500032
    4a18:	005a0000 	.word	0x005a0000
    4a1c:	00640032 	.word	0x00640032
    4a20:	006e0000 	.word	0x006e0000
    4a24:	00780032 	.word	0x00780032
    4a28:	00820000 	.word	0x00820000
    4a2c:	008c0032 	.word	0x008c0032
    4a30:	00960000 	.word	0x00960000
    4a34:	00a00032 	.word	0x00a00032
    4a38:	00aa0000 	.word	0x00aa0000
    4a3c:	00b40032 	.word	0x00b40032
    4a40:	00be0000 	.word	0x00be0000
    4a44:	00c80032 	.word	0x00c80032
    4a48:	00c8012c 	.word	0x00c8012c
    4a4c:	00d20172 	.word	0x00d20172
    4a50:	00dc001e 	.word	0x00dc001e
    4a54:	00e60172 	.word	0x00e60172
    4a58:	00f0001e 	.word	0x00f0001e
    4a5c:	00fa0172 	.word	0x00fa0172
    4a60:	0104001e 	.word	0x0104001e
    4a64:	010e0172 	.word	0x010e0172
    4a68:	0118005a 	.word	0x0118005a
    4a6c:	0122012c 	.word	0x0122012c
    4a70:	82be50b4 	.word	0x82be50b4
    4a74:	8cbe82aa 	.word	0x8cbe82aa
    4a78:	64963c8c 	.word	0x64963c8c
    4a7c:	64dc3cd2 	.word	0x64dc3cd2
    4a80:	a08c9682 	.word	0xa08c9682
    4a84:	aadca08c 	.word	0xaadca08c
    4a88:	a0e696dc 	.word	0xa0e696dc
    4a8c:	50f03c78 	.word	0x50f03c78
    4a90:	5a78466e 	.word	0x5a78466e
    4a94:	aaaa3c96 	.word	0xaaaa3c96
    4a98:	a0dc3cc8 	.word	0xa0dc3cc8
    4a9c:	aae6a0d2 	.word	0xaae6a0d2
    4aa0:	6e617254 	.word	0x6e617254
    4aa4:	69722073 	.word	0x69722073
    4aa8:	73746867 	.word	0x73746867
    4aac:	65726120 	.word	0x65726120
    4ab0:	6d756820 	.word	0x6d756820
    4ab4:	72206e61 	.word	0x72206e61
    4ab8:	74686769 	.word	0x74686769
    4abc:	00000073 	.word	0x00000073
    4ac0:	355e3331 	.word	0x355e3331
    4ac4:	31202b20 	.word	0x31202b20
    4ac8:	20355e36 	.word	0x20355e36
    4acc:	3731203d 	.word	0x3731203d
    4ad0:	0000355e 	.word	0x0000355e
    4ad4:	69746552 	.word	0x69746552
    4ad8:	616c7563 	.word	0x616c7563
    4adc:	676e6974 	.word	0x676e6974
    4ae0:	6c705320 	.word	0x6c705320
    4ae4:	73656e69 	.word	0x73656e69
    4ae8:	00000000 	.word	0x00000000
    4aec:	6c6f6976 	.word	0x6c6f6976
    4af0:	65636e65 	.word	0x65636e65
    4af4:	726f772e 	.word	0x726f772e
    4af8:	0000736b 	.word	0x0000736b
    4afc:	73626154 	.word	0x73626154
    4b00:	00000021 	.word	0x00000021
    4b04:	6c6c694b 	.word	0x6c6c694b
    4b08:	6c694220 	.word	0x6c694220
    4b0c:	6e6f696c 	.word	0x6e6f696c
    4b10:	65726961 	.word	0x65726961
    4b14:	61282073 	.word	0x61282073
    4b18:	5420646e 	.word	0x5420646e
    4b1c:	6c6c6972 	.word	0x6c6c6972
    4b20:	616e6f69 	.word	0x616e6f69
    4b24:	29657269 	.word	0x29657269
    4b28:	00000000 	.word	0x00000000
    4b2c:	65746e49 	.word	0x65746e49
    4b30:	74736572 	.word	0x74736572
    4b34:	206e6920 	.word	0x206e6920
    4b38:	68636574 	.word	0x68636574
    4b3c:	6f6c6f6e 	.word	0x6f6c6f6e
    4b40:	69207967 	.word	0x69207967
    4b44:	6f6e2073 	.word	0x6f6e2073
    4b48:	20612074 	.word	0x20612074
    4b4c:	73726570 	.word	0x73726570
    4b50:	6c616e6f 	.word	0x6c616e6f
    4b54:	00797469 	.word	0x00797469
    4b58:	50203031 	.word	0x50203031
    4b5c:	544e4952 	.word	0x544e4952
    4b60:	52484320 	.word	0x52484320
    4b64:	30322824 	.word	0x30322824
    4b68:	2b352e35 	.word	0x2b352e35
    4b6c:	28444e52 	.word	0x28444e52
    4b70:	3b292931 	.word	0x3b292931
    4b74:	47203a20 	.word	0x47203a20
    4b78:	204f544f 	.word	0x204f544f
    4b7c:	00003031 	.word	0x00003031
    4b80:	67206f4e 	.word	0x67206f4e
    4b84:	2e73646f 	.word	0x2e73646f
    4b88:	206f4e20 	.word	0x206f4e20
    4b8c:	7473616d 	.word	0x7473616d
    4b90:	2e737265 	.word	0x2e737265
    4b94:	206f4e20 	.word	0x206f4e20
    4b98:	65747865 	.word	0x65747865
    4b9c:	6c616e72 	.word	0x6c616e72
    4ba0:	62696c20 	.word	0x62696c20
    4ba4:	69726172 	.word	0x69726172
    4ba8:	002e7365 	.word	0x002e7365
    4bac:	6c6c694b 	.word	0x6c6c694b
    4bb0:	7a614e20 	.word	0x7a614e20
    4bb4:	00007369 	.word	0x00007369
    4bb8:	6e616954 	.word	0x6e616954
    4bbc:	656d6e61 	.word	0x656d6e61
    4bc0:	7153206e 	.word	0x7153206e
    4bc4:	65726175 	.word	0x65726175
    4bc8:	38393120 	.word	0x38393120
    4bcc:	00000039 	.word	0x00000039
    4bd0:	72656d41 	.word	0x72656d41
    4bd4:	20616369 	.word	0x20616369
    4bd8:	20736177 	.word	0x20736177
    4bdc:	6e756f66 	.word	0x6e756f66
    4be0:	20646564 	.word	0x20646564
    4be4:	73206e6f 	.word	0x73206e6f
    4be8:	6576616c 	.word	0x6576616c
    4bec:	00007972 	.word	0x00007972
    4bf0:	72656854 	.word	0x72656854
    4bf4:	73692065 	.word	0x73692065
    4bf8:	6c6e6f20 	.word	0x6c6e6f20
    4bfc:	61632079 	.word	0x61632079
    4c00:	61746970 	.word	0x61746970
    4c04:	6e61206c 	.word	0x6e61206c
    4c08:	616c2064 	.word	0x616c2064
    4c0c:	00726f62 	.word	0x00726f62
    4c10:	6f636e45 	.word	0x6f636e45
    4c14:	67617275 	.word	0x67617275
    4c18:	735f2065 	.word	0x735f2065
    4c1c:	656d6d79 	.word	0x656d6d79
    4c20:	63697274 	.word	0x63697274
    4c24:	6c63205f 	.word	0x6c63205f
    4c28:	20737361 	.word	0x20737361
    4c2c:	66726177 	.word	0x66726177
    4c30:	00657261 	.word	0x00657261
    4c34:	52554324 	.word	0x52554324
    4c38:	544e4552 	.word	0x544e4552
    4c3c:	4d454d5f 	.word	0x4d454d5f
    4c40:	00000045 	.word	0x00000045
    4c44:	694e2041 	.word	0x694e2041
    4c48:	54206563 	.word	0x54206563
    4c4c:	00005954 	.word	0x00005954
    4c50:	78696e55 	.word	0x78696e55
    4c54:	6f706520 	.word	0x6f706520
    4c58:	6d206863 	.word	0x6d206863
    4c5c:	73756e69 	.word	0x73756e69
    4c60:	46783020 	.word	0x46783020
    4c64:	61642046 	.word	0x61642046
    4c68:	00007379 	.word	0x00007379
    4c6c:	3d202069 	.word	0x3d202069
    4c70:	35783020 	.word	0x35783020
    4c74:	35373366 	.word	0x35373366
    4c78:	20666439 	.word	0x20666439
    4c7c:	2028202d 	.word	0x2028202d
    4c80:	3e3e2069 	.word	0x3e3e2069
    4c84:	29203120 	.word	0x29203120
    4c88:	0000003b 	.word	0x0000003b
    4c8c:	42414341 	.word	0x42414341
    4c90:	00000000 	.word	0x00000000
    4c94:	63666544 	.word	0x63666544
    4c98:	73276e6f 	.word	0x73276e6f
    4c9c:	6e616320 	.word	0x6e616320
    4ca0:	656c6563 	.word	0x656c6563
    4ca4:	00002e64 	.word	0x00002e64
    4ca8:	73746152 	.word	0x73746152
    4cac:	7473656e 	.word	0x7473656e
    4cb0:	6f4e203a 	.word	0x6f4e203a
    4cb4:	6e696874 	.word	0x6e696874
    4cb8:	6f542067 	.word	0x6f542067
    4cbc:	216f4420 	.word	0x216f4420
    4cc0:	00000000 	.word	0x00000000
    4cc4:	68207449 	.word	0x68207449
    4cc8:	36207361 	.word	0x36207361
    4ccc:	656b2039 	.word	0x656b2039
    4cd0:	002e7379 	.word	0x002e7379
    4cd4:	61636542 	.word	0x61636542
    4cd8:	20657375 	.word	0x20657375
    4cdc:	342d5456 	.word	0x342d5456
    4ce0:	77203032 	.word	0x77203032
    4ce4:	61207361 	.word	0x61207361
    4ce8:	6165726c 	.word	0x6165726c
    4cec:	74207964 	.word	0x74207964
    4cf0:	6e656b61 	.word	0x6e656b61
    4cf4:	00000000 	.word	0x00000000
    4cf8:	706d6f43 	.word	0x706d6f43
    4cfc:	73736572 	.word	0x73736572
    4d00:	206e6f69 	.word	0x206e6f69
    4d04:	6f676c61 	.word	0x6f676c61
    4d08:	68746972 	.word	0x68746972
    4d0c:	6162206d 	.word	0x6162206d
    4d10:	20646573 	.word	0x20646573
    4d14:	42206e6f 	.word	0x42206e6f
    4d18:	28205042 	.word	0x28205042
    4d1c:	37393931 	.word	0x37393931
    4d20:	00000029 	.word	0x00000029
    4d24:	20656854 	.word	0x20656854
    4d28:	72756f73 	.word	0x72756f73
    4d2c:	6f206563 	.word	0x6f206563
    4d30:	68742066 	.word	0x68742066
    4d34:	694d2065 	.word	0x694d2065
    4d38:	73697373 	.word	0x73697373
    4d3c:	70706973 	.word	0x70706973
    4d40:	69722069 	.word	0x69722069
    4d44:	20726576 	.word	0x20726576
    4d48:	69207369 	.word	0x69207369
    4d4c:	6550206e 	.word	0x6550206e
    4d50:	79736e6e 	.word	0x79736e6e
    4d54:	6e61766c 	.word	0x6e61766c
    4d58:	002e6169 	.word	0x002e6169
    4d5c:	6566664f 	.word	0x6566664f
    4d60:	7669736e 	.word	0x7669736e
    4d64:	61682065 	.word	0x61682065
    4d68:	61776472 	.word	0x61776472
    4d6c:	00006572 	.word	0x00006572
    4d70:	6c6c6f46 	.word	0x6c6c6f46
    4d74:	5720776f 	.word	0x5720776f
    4d78:	646c726f 	.word	0x646c726f
    4d7c:	676f5020 	.word	0x676f5020
    4d80:	64654620 	.word	0x64654620
    4d84:	74617265 	.word	0x74617265
    4d88:	206e6f69 	.word	0x206e6f69
    4d8c:	40202020 	.word	0x40202020
    4d90:	6c726f57 	.word	0x6c726f57
    4d94:	676f5064 	.word	0x676f5064
    4d98:	00000000 	.word	0x00000000
    4d9c:	6d6d7544 	.word	0x6d6d7544
    4da0:	68742079 	.word	0x68742079
    4da4:	20636369 	.word	0x20636369
    4da8:	65696c63 	.word	0x65696c63
    4dac:	0000746e 	.word	0x0000746e
    4db0:	694e2041 	.word	0x694e2041
    4db4:	54206563 	.word	0x54206563
    4db8:	202e5954 	.word	0x202e5954
    4dbc:	4f206e41 	.word	0x4f206e41
    4dc0:	6f43204b 	.word	0x6f43204b
    4dc4:	7475706d 	.word	0x7475706d
    4dc8:	002e7265 	.word	0x002e7265
    4dcc:	69636543 	.word	0x69636543
    4dd0:	65276e20 	.word	0x65276e20
    4dd4:	70207473 	.word	0x70207473
    4dd8:	75207361 	.word	0x75207361
    4ddc:	4320656e 	.word	0x4320656e
    4de0:	72656279 	.word	0x72656279
    4de4:	6b636564 	.word	0x6b636564
    4de8:	65622820 	.word	0x65622820
    4dec:	73756163 	.word	0x73756163
    4df0:	74692065 	.word	0x74692065
    4df4:	6e207327 	.word	0x6e207327
    4df8:	6120746f 	.word	0x6120746f
    4dfc:	6c655020 	.word	0x6c655020
    4e00:	6e616369 	.word	0x6e616369
    4e04:	73614320 	.word	0x73614320
    4e08:	00002965 	.word	0x00002965
    4e0c:	696c6f53 	.word	0x696c6f53
    4e10:	69726164 	.word	0x69726164
    4e14:	69207974 	.word	0x69207974
    4e18:	6f6e2073 	.word	0x6f6e2073
    4e1c:	20612074 	.word	0x20612074
    4e20:	2077656e 	.word	0x2077656e
    4e24:	6d617266 	.word	0x6d617266
    4e28:	726f7765 	.word	0x726f7765
    4e2c:	0000006b 	.word	0x0000006b
    4e30:	61657242 	.word	0x61657242
    4e34:	616f6264 	.word	0x616f6264
    4e38:	6e696472 	.word	0x6e696472
    4e3c:	73492067 	.word	0x73492067
    4e40:	746f4e20 	.word	0x746f4e20
    4e44:	43204120 	.word	0x43204120
    4e48:	656d6972 	.word	0x656d6972
    4e4c:	00000000 	.word	0x00000000
    4e50:	2066664f 	.word	0x2066664f
    4e54:	6f207962 	.word	0x6f207962
    4e58:	6520656e 	.word	0x6520656e
    4e5c:	726f7272 	.word	0x726f7272
    4e60:	72612073 	.word	0x72612073
    4e64:	6f632065 	.word	0x6f632065
    4e68:	6e6f6d6d 	.word	0x6e6f6d6d
    4e6c:	00000000 	.word	0x00000000
    4e70:	0000095e 	.word	0x0000095e
    4e74:	00000baa 	.word	0x00000baa
    4e78:	00000baa 	.word	0x00000baa
    4e7c:	00000baa 	.word	0x00000baa
    4e80:	00000baa 	.word	0x00000baa
    4e84:	00000baa 	.word	0x00000baa
    4e88:	00000baa 	.word	0x00000baa
    4e8c:	00000baa 	.word	0x00000baa
    4e90:	00000baa 	.word	0x00000baa
    4e94:	00000baa 	.word	0x00000baa
    4e98:	00000baa 	.word	0x00000baa
    4e9c:	00000baa 	.word	0x00000baa
    4ea0:	00000baa 	.word	0x00000baa
    4ea4:	00000baa 	.word	0x00000baa
    4ea8:	00000baa 	.word	0x00000baa
    4eac:	00000baa 	.word	0x00000baa
    4eb0:	00000946 	.word	0x00000946
    4eb4:	00000baa 	.word	0x00000baa
    4eb8:	00000baa 	.word	0x00000baa
    4ebc:	00000baa 	.word	0x00000baa
    4ec0:	00000baa 	.word	0x00000baa
    4ec4:	00000baa 	.word	0x00000baa
    4ec8:	00000baa 	.word	0x00000baa
    4ecc:	00000baa 	.word	0x00000baa
    4ed0:	00000baa 	.word	0x00000baa
    4ed4:	00000baa 	.word	0x00000baa
    4ed8:	00000baa 	.word	0x00000baa
    4edc:	00000baa 	.word	0x00000baa
    4ee0:	00000baa 	.word	0x00000baa
    4ee4:	00000baa 	.word	0x00000baa
    4ee8:	00000baa 	.word	0x00000baa
    4eec:	00000baa 	.word	0x00000baa
    4ef0:	00000956 	.word	0x00000956
    4ef4:	00000baa 	.word	0x00000baa
    4ef8:	00000baa 	.word	0x00000baa
    4efc:	00000baa 	.word	0x00000baa
    4f00:	00000baa 	.word	0x00000baa
    4f04:	00000baa 	.word	0x00000baa
    4f08:	00000baa 	.word	0x00000baa
    4f0c:	00000baa 	.word	0x00000baa
    4f10:	00000baa 	.word	0x00000baa
    4f14:	00000baa 	.word	0x00000baa
    4f18:	00000baa 	.word	0x00000baa
    4f1c:	00000baa 	.word	0x00000baa
    4f20:	00000baa 	.word	0x00000baa
    4f24:	00000baa 	.word	0x00000baa
    4f28:	00000baa 	.word	0x00000baa
    4f2c:	00000baa 	.word	0x00000baa
    4f30:	0000094e 	.word	0x0000094e
    4f34:	00000966 	.word	0x00000966
    4f38:	0000092e 	.word	0x0000092e
    4f3c:	0000093e 	.word	0x0000093e
    4f40:	00000936 	.word	0x00000936
    4f44:	00000002 	.word	0x00000002
    4f48:	00000003 	.word	0x00000003
    4f4c:	00000028 	.word	0x00000028
    4f50:	00000029 	.word	0x00000029
    4f54:	00000004 	.word	0x00000004
    4f58:	00000005 	.word	0x00000005
    4f5c:	00000006 	.word	0x00000006
    4f60:	00000007 	.word	0x00000007
    4f64:	00000020 	.word	0x00000020
    4f68:	00000021 	.word	0x00000021
    4f6c:	00000022 	.word	0x00000022
    4f70:	00000023 	.word	0x00000023
    4f74:	00000024 	.word	0x00000024
    4f78:	00000025 	.word	0x00000025
    4f7c:	00000026 	.word	0x00000026
    4f80:	00000027 	.word	0x00000027
    4f84:	00000008 	.word	0x00000008
    4f88:	00000009 	.word	0x00000009
    4f8c:	0000000a 	.word	0x0000000a
    4f90:	0000000b 	.word	0x0000000b
    4f94:	42000800 	.word	0x42000800
    4f98:	42000c00 	.word	0x42000c00
    4f9c:	42001000 	.word	0x42001000
    4fa0:	42001400 	.word	0x42001400
    4fa4:	42001800 	.word	0x42001800
    4fa8:	42001c00 	.word	0x42001c00
    4fac:	000016e2 	.word	0x000016e2
    4fb0:	000016de 	.word	0x000016de
    4fb4:	000016de 	.word	0x000016de
    4fb8:	00001744 	.word	0x00001744
    4fbc:	00001744 	.word	0x00001744
    4fc0:	000016f6 	.word	0x000016f6
    4fc4:	000016e8 	.word	0x000016e8
    4fc8:	000016fc 	.word	0x000016fc
    4fcc:	00001732 	.word	0x00001732
    4fd0:	00001904 	.word	0x00001904
    4fd4:	000018e4 	.word	0x000018e4
    4fd8:	000018e4 	.word	0x000018e4
    4fdc:	00001970 	.word	0x00001970
    4fe0:	000018f6 	.word	0x000018f6
    4fe4:	00001912 	.word	0x00001912
    4fe8:	000018e8 	.word	0x000018e8
    4fec:	00001920 	.word	0x00001920
    4ff0:	00001960 	.word	0x00001960

00004ff4 <CodePage437>:
	...
    532c:	01000000 06186080 18608001 60800106     .....`....`....`
    533c:	80010000 00000060 00000000 66986106     ....`........a.f
    534c:	98618619 00000000 00000000 00000000     ..a.............
    535c:	00000000 98610600 fb8f1966 8f1966fe     ......a.f....f..
    536c:	1966fefb 00986186 00000000 80010000     ..f..a..........
    537c:	891f7e60 1f7e6082 7e649081 6080811f     `~...`~...d~...`
    538c:	00000000 04000000 29a60823 1820c106     ........#..).. .
    539c:	98200304 324c1165 00000008 00000000     .. .e.L2........
    53ac:	84e08107 10420821 5a081e78 87208216     ....!.B.x..Z.. .
    53bc:	0000f6d9 00000000 30c00000 00030618     ...........0....
    53cc:	000000c0 00000000 00000000 00000000     ................
    53dc:	40000000 03020810 0c30c000 08c00003     ...@......0.....
    53ec:	10400002 00000000 01000000 02084000     ..@..........@..
    53fc:	06186000 18608001 00010208 00000040     .`....`.....@...
    540c:	00000000 42000000 90408210 40c23fff     .......B..@..?.@
    541c:	80104290 00000000 00000000 00000000     .B..............
    542c:	80000208 e0bfff20 02082080 00000000     .... .... ......
	...
    544c:	18000000 c0000306 00001040 00000000     ........@.......
    545c:	00000000 ff000000 0000e0bf 00000000     ................
	...
    5480:	030e3800 0000e080 00000000 08200000     .8............ .
    5490:	80000104 02041020 10408000 00000208     .... .....@.....
    54a0:	00000000 e0030000 cc1863f8 b0c1061b     .........c......
    54b0:	63061b6c f8e0c318 00000000 00000000     l..c............
    54c0:	1b3c70c0 0c30c004 30c00003 e107030c     .p<...0....0....
    54d0:	000000f8 00000000 c1f8e107 061860b0     .............`..
    54e0:	0187030e 0f30c0c0 0000fefb 00000000     ......0.........
    54f0:	fefb0f00 60c00003 80030e30 b0810618     .......`0.......
    5500:	00f8e167 00000000 40000000 03070c30     g..........@0...
    5510:	31649040 04fefb0f 10400001 00000000     @.d1......@.....
    5520:	0f000000 30c0fefb c1f8e30f 061860b0     .......0.....`..
    5530:	e167a081 000000f8 00000000 60f8e003     ..g............`
    5540:	00030c18 1b8c3ffe 67b0c106 0000f8e1     .....?.....g....
    5550:	00000000 fefb0f00 20608001 00010408     ..........` ....
    5560:	0c302080 00c00003 00000000 e0030000     . 0.............
    5570:	6cb0c1f8 0f3e061b c1061b8c f8e063b0     ...l..>......c..
    5580:	00000000 07000000 b0c1f8e1 7d0e3b6c     ............l;.}
    5590:	0618609f e1c70003 000000f0 00000000     .`..............
    55a0:	38000000 e080030e 00000000 030e3800     ...8.........8..
    55b0:	0000e080 00000000 00000000 80030e38     ............8...
    55c0:	000000e0 0e380000 40c00003 00000010     ......8....@....
    55d0:	30000000 03030c0c 30c0c000 0cc00003     ...0.......0....
    55e0:	0c300003 00000000 00000000 00000000     ..0.............
    55f0:	00fefb0f fefb0f00 00000000 00000000     ................
    5600:	00000000 3000030c 30c0000c c0c00003     .......0...0....
    5610:	0c0c3030 00000003 00000000 f8e10700     00..............
    5620:	6060b0c1 01061818 00006080 00608001     ..``.....`....`.
    5630:	00000000 e1070000 6cb0c1f8 b4d33edb     ...........l.>..
    5640:	c036fbec f8e10730 00000000 00000000     ..6.0...........
    5650:	0d367080 c18c3186 fefb6fb0 1b6cb0c1     .p6..1...o....l.
    5660:	00000006 00000000 61f8e30f 86196698     ...........a.f..
    5670:	19861f7e 6f986186 0000f8e3 00000000     ~....a.o........
    5680:	f8e00300 036c9861 0c30c000 98610003     ....a.l...0...a.
    5690:	00f8e063 00000000 c30f0000 861966f0     c............f..
    56a0:	98618631 668c1966 f0c38f19 00000000     1.a.f..f........
    56b0:	0f000000 30c0fefb fc00030c 00030c3f     .......0....?...
    56c0:	fb0f30c0 000000fe 00000000 c0fefb0f     .0..............
    56d0:	00030c30 030c3ffc 0c30c000 00000003     0....?....0.....
    56e0:	00000000 f8e00300 036c9861 0c30c000     ........a.l...0.
    56f0:	98611e7b 00f8e063 00000000 1b0c0000     {.a.c...........
    5700:	6cb0c106 bfff061b c1061bec 061b6cb0     ...l.........l..
    5710:	00000000 07000000 0618f8e1 18608001     ..............`.
    5720:	60800106 e1070618 000000f8 00000000     ...`............
    5730:	067ef801 18608001 60800106 8731c618     ..~...`....`..1.
    5740:	0000f0c1 00000000 061b0c00 838d31c6     .............1..
    5750:	0d38e060 31c66083 00061b8c 00000000     `.8..`.1........
    5760:	030c0000 0c30c000 30c00003 c000030c     ......0....0....
    5770:	fefb0f30 00000000 0c000000 bde38e1b     0...............
    5780:	c976dbed 061b6cb2 1b6cb0c1 00000006     ..v..l....l.....
    5790:	00000000 e1861b0c 661b6dbc 5b6cb3c9     .........m.f..l[
    57a0:	ecb0c31e 0000061b 00000000 f8e00300     ................
    57b0:	1b6cb0e3 6cb0c106 b8c1061b 00f8e0e3     ..l....l........
    57c0:	00000000 e30f0000 6cb0c1f8 3ffe061b     ...........l...?
    57d0:	c000038c 00030c30 00000000 07000000     ....0...........
    57e0:	b0c1f8e1 c1061b6c 36db6cb0 d98731c6     ....l....l.6.1..
    57f0:	000000f6 00000000 c1f8e30f 061b6cb0     .............l..
    5800:	638c3ffe cc30c318 0000061b 00000000     .?.c..0.........
    5810:	f8e10700 036cb0c1 801f7e00 b0c10618     ......l..~......
    5820:	00f8e167 00000000 fb0f0000 000208fe     g...............
    5830:	02082080 08208000 20800002 00000000     . .... .... ....
    5840:	0c000000 b0c1061b c1061b6c 061b6cb0     ........l....l..
    5850:	e063b0c1 000000f8 00000000 c1061b0c     ..c.............
    5860:	8c3166b0 60c31863 810d36d8 000020c0     .f1.c..`.6... ..
    5870:	00000000 061b0c00 1b6cb0c1 6db2c906     ..........l....m
    5880:	b5d576db 008c796f 00000000 1b0c0000     .v..oy..........
    5890:	c3186306 060cf860 63d8e003 061bcc18     .c..`......c....
    58a0:	00000000 0c000000 1863061b 1cd860c3     ..........c..`..
    58b0:	20c00107 80000208 00000020 00000000     ... .... .......
    58c0:	03fefb0f 1060c000 0103060c 0f30c0c0     ......`.......0.
    58d0:	0000fefb 00000000 f8e00300 00030c30     ............0...
    58e0:	030c30c0 0c30c000 00f8e003 00000000     .0....0.........
    58f0:	01060000 010c3080 030c6080 03186000     .....0...`...`..
    5900:	0618c000 00000000 07000000 030cf0c1     ................
    5910:	0c30c000 30c00003 c107030c 000000f0     ..0....0........
    5920:	00000000 36708000 8c31860d 0060b0c1     ......p6..1...`.
	...
    594c:	00fefb0f 00000000 80030000 00030ce0     ................
    595c:	00001860 00000000 00000000 00000000     `...............
	...
    5974:	01fcf003 fef86380 f823b0c0 000000fe     .....c....#.....
    5984:	00000000 c000030c fcf30d30 0b6cb8e1     ........0.....l.
    5994:	6fb8e102 00007cf3 00000000 00000000     ...o.|..........
    59a4:	e1070000 6cb0c1f8 30c00003 00fef907     .......l...0....
    59b4:	00000000 18000000 67800106 b0c3f6d9     ...........g....
    59c4:	c3061bec f6d9e7b0 00000000 00000000     ................
    59d4:	00000000 c1f8e107 fefb6fb0 f10730c0     .........o...0..
    59e4:	000000fc 00000000 3138e000 c000638c     ..........81.c..
    59f4:	00033ffc 030c30c0 0000c000 00000000     .?...0..........
    5a04:	00000000 d9070000 8731c6f6 30c0f0c1     ..........1....0
    5a14:	c3f8e107 f8e1e7b0 030c0000 0d30c000     ..............0.
    5a24:	b8e178e3 c1061b6c 061b6cb0 00000000     .x..l....l......
    5a34:	01000000 00006080 18e08003 60800106     .....`.........`
    5a44:	e1070618 000000f8 00000000 00186000     .............`..
    5a54:	18600000 60800106 8c010618 31c61863     ..`....`....c..1
    5a64:	00f0c187 00030c00 638c30c0 0f36cc30     .........0.c0.6.
    5a74:	33ccc083 000c330c 00000000 c0030000     ...3.3..........
    5a84:	00030cf0 030c30c0 0c30c000 f8e00303     .....0....0.....
	...
    5aa0:	e70c330c 669b6dbf 1b6cb0c1 00000006     .3...m.f..l.....
	...
    5ab8:	f8e20b00 1b6cb8e1 6cb0c106 0000061b     ......l....l....
	...
    5ad0:	e1070000 cc30c3f8 30c30c33 00f8e1c7     ......0.3..0....
	...
    5ae8:	0b000000 b0c1f8e2 be061b6c 0002882f     ........l.../...
    5af8:	02082080 00000000 00000000 c1fae803     . ..............
    5b08:	061b6cb0 08a08f3e 20800002 00000208     .l..>...... ....
    5b18:	00000000 7ce20800 036cbcf1 0c30c000     .......|..l...0.
    5b28:	00000003 00000000 00000000 e1070000     ................
    5b38:	0730c0f8 8001f8e1 00f8e36f 00000000     ..0.....o.......
    5b48:	00030000 0f0c30c0 0c30f8e3 33c00003     .....0....0....3
    5b58:	30c0c00c 00000000 00000000 00000000     ...0............
    5b68:	c30c330c 0c33cc30 d9c730c3 000000f6     .3..0.3..0......
	...
    5b80:	02020000 30e6b8c1 01073ed8 000020c0     .......0.>... ..
	...
    5b98:	1b0c0000 6cb0c106 b5d5769b 008c3166     .......l.v..f1..
	...
    5bb0:	08000000 1b441823 6ce08003 08620c11     ....#.D....l..b.
	...
    5bcc:	c618630c 18638c31 60801f7e 873bc618     .c..1.c.~..`..;.
    5bdc:	0000f0c1 00000000 fefb0f00 c0c00003     ................
    5bec:	0f0c3030 0000fefb 00000000 1e780000     00............x.
    5bfc:	40000208 000e3810 02081040 001e7800     ...@.8..@....x..
    5c0c:	00000000 80010000 01061860 06186080     ........`....`..
    5c1c:	18608001 60800106 00000000 0f000000     ..`....`........
    5c2c:	0208c003 0cc00003 c0000303 030f0208     ................
    5c3c:	000000c0 00000000 d9c61907 1c736cb3     .............ls.
	...
    5c74:	e0030000 6c9861f8 30c00003 6100030c     .....a.l...0...a
    5c84:	f8e06398 00000608 00000000 00669801     .c............f.
    5c94:	c30c330c 0c33cc30 d9c730c3 000000f6     .3..0.3..0......
    5ca4:	00000000 0c180000 f8e10700 fb6fb0c1     ..............o.
    5cb4:	0730c0fe 0000fcf1 00000000 10000000     ..0.............
    5cc4:	f003000a 638001fc b0c0fef8 00fef823     .......c....#...
	...
    5cdc:	030033cc 8001fcf0 c0fef863 fef823b0     .3......c....#..
	...
    5cf4:	000c6000 01fcf003 fef86380 f823b0c0     .`.......c....#.
    5d04:	000000fe 03000000 0c482001 fcf00300     ......... H.....
    5d14:	f8638001 23b0c0fe 0000fef8 00000000     ..c....#........
    5d24:	00000000 e1070000 6cb0c1f8 30c00003     ...........l...0
    5d34:	04fef907 00000003 00000000 07001420     ............ ...
    5d44:	b0c1f8e1 c0fefb6f fcf10730 00000000     ....o...0.......
    5d54:	00000000 00669801 c1f8e107 fefb6fb0     ......f......o..
    5d64:	f10730c0 000000fc 00000000 18c00000     .0..............
    5d74:	f8e10700 fb6fb0c1 0730c0fe 0000fcf1     ......o...0.....
    5d84:	00000000 98610600 80030000 010618e0     ......a.........
    5d94:	06186080 00f8e107 00000000 00000000     .`..............
    5da4:	03002840 0618e080 18608001 f8e10706     @(........`.....
	...
    5dbc:	0018c000 18e08003 60800106 e1070618     ...........`....
    5dcc:	000000f8 18630000 367080c0 8c31860d     ......c...p6..1.
    5ddc:	fb6fb0c1 6cb0c1fe 0000061b 1c000000     ..o....l........
    5dec:	70c08108 31860d36 6fb0c18c b0c1fefb     ...p6..1...o....
    5dfc:	00061b6c 00000000 fb0f0606 0c30c0fe     l.............0.
    5e0c:	3ffc0003 c000030c fefb0f30 00000000     ...?....0.......
	...
    5e24:	1dfe7907 fedb2786 f90733cc 000000ee     .y...'...3......
    5e34:	00000000 367ef800 9861860d e3efb1c7     ......~6..a.....
    5e44:	8c31c6f8 00001e7b 00000000 20000000     ..1.{.......... 
    5e54:	e1070014 cc30c3f8 30c30c33 00f8e1c7     ......0.3..0....
    5e64:	00000000 01000000 07006698 30c3f8e1     .........f.....0
    5e74:	c30c33cc f8e1c730 00000000 00000000     .3..0...........
    5e84:	0018c000 c3f8e107 0c33cc30 e1c730c3     ........0.3..0..
    5e94:	000000f8 00000000 14200000 0c330c00     .......... ...3.
    5ea4:	33cc30c3 c730c30c 0000f6d9 00000000     .0.3..0.........
    5eb4:	60000000 330c000c cc30c30c 30c30c33     ...`...3..0.3..0
    5ec4:	00f6d9c7 00000000 01000000 0c006698     .............f..
    5ed4:	31c61863 7e18638c 1860801f c1873bc6     c..1.c.~..`..;..
    5ee4:	800d36f0 383ef800 c1061bec 061b6cb0     .6....>8.....l..
    5ef4:	e0e3b8c1 000000f8 0c330000 c10603c0     ..........3.....
    5f04:	061b6cb0 1b6cb0c1 63b0c106 0000f8e0     .l....l....c....
    5f14:	00000000 20800002 1b8c1f7e 0c32c826     ....... ~...&.2.
    5f24:	1f7e069b 08208080 00000000 c0010000     ..~... .........
    5f34:	461873f8 3e608001 6080810f fefb0f18     .s.F..`>...`....
    5f44:	00000000 0c000000 08630419 1c506083     ..........c..`P.
    5f54:	20e00302 80800f08 00000020 00000000     ... .... .......
    5f64:	c1f8e30f f81b6cb0 830d30fe 0d36d878     .....l...0..x.6.
    5f74:	000038e3 00000000 3ce00000 98638e3f     .8.........<?.c.
    5f84:	833ffee0 1c70c000 60800106 00000018     ..?...p....`....
    5f94:	00000000 03000c18 8001fcf0 c0fef863     ............c...
    5fa4:	fef823b0 00000000 00000000 000060c0     .#...........`..
    5fb4:	18e08003 60800106 e1070618 000000f8     .......`........
    5fc4:	00000000 18300000 f8e10700 33cc30c3     ......0......0.3
    5fd4:	c730c30c 0000f8e1 00000000 30000000     ..0............0
    5fe4:	330c0018 cc30c30c 30c30c33 00f6d9c7     ...3..0.3..0....
	...
    5ffc:	0b001998 b8e1f8e2 c1061b6c 061b6cb0     ........l....l..
    600c:	00000000 8c0c4c00 b8e1061b c9461b6d     .....L......m.F.
    601c:	165b6cb2 1becb0c3 00000006 00000000     .l[.............
    602c:	1e08c003 00e08308 000080ff 00000000     ................
	...
    6044:	d8c00100 c0810d22 0080ff00 00000000     ...."...........
	...
    6060:	00030c00 030c0000 3030c000 061b0c0c     ..........00....
    6070:	00c00f3f 00000000 00000000 ff000000     ?...............
    6080:	0003ecbf 00000000 00000000 00000000     ................
	...
    6098:	18e0bfff 00000006 00000000 00000000     ................
    60a8:	30c00003 c000030c e0bfff00 0c1f3800     ...0.........8..
    60b8:	183060c0 0000c00f c0000300 00030c30     .`0.........0...
    60c8:	bfff00c0 668001e0 fc618619 60800106     .......f..a....`
    60d8:	00000000 06180000 18000000 60800106     ...............`
    60e8:	80010618 00061860 00000000 00000000     ....`...........
    60f8:	90200100 80042448 00001290 00000000     .. .H$..........
	...
    6110:	40020000 20010948 00244890 00000000     ...@H.. .H$.....
    6120:	00000000 48024092 09004900 80240024     .....@.H.I..$.$.
    6130:	92009004 00480240 24090049 42529200     ....@.H.I..$..RB
    6140:	0949494a 24242529 929094a4 4a425292     JII.)%$$.....RBJ
    6150:	29094949 ad6d2425 b6b6b5bd dbdad6f6     II.)%$m.........
    6160:	6f6b5bdb bdad6d6d f6b6b6b5 08dbdad6     .[komm..........
    6170:	20800002 80000208 00020820 02082080     ... .... .... ..
    6180:	08208000 20800002 80000208 00020820     .. .... .... ...
    6190:	3e082080 08208000 20800002 80000208     . .>.. .... ....
    61a0:	00020820 02082080 f8208000 20800f02      .... .... .... 
    61b0:	80000208 00020820 05142080 14504001     .... .... ...@P.
    61c0:	50400105 40013d14 01051450 05145040     ..@P.=.@P...@P..
    61d0:	00504001 00000000 00000000 013f0000     .@P...........?.
    61e0:	05145040 14504001 50400105 00000000     @P...@P...@P....
    61f0:	00000000 02f80000 0820800f 20800002     .......... .... 
    6200:	80000208 01051420 05145040 f4504001     .... ...@P...@P.
    6210:	50400f01 40010514 01051450 05145040     ..@P...@P...@P..
    6220:	14504001 50400105 40010514 01051450     .@P...@P...@P...
    6230:	05145040 00504001 00000000 00000000     @P...@P.........
    6240:	0f01fc00 05145040 14504001 50400105     ....@P...@P...@P
    6250:	40010514 01051450 01f45040 0000c00f     ...@P...@P......
	...
    6268:	01051400 05145040 14504001 0000003f     ....@P...@P.?...
	...
    6280:	02080000 08208000 20800002 800f02f8     ...... .... ....
	...
    62a4:	003e0000 02082080 08208000 20800002     ..>.. .... .... 
    62b4:	80000208 00020820 03082080 000000f0     .... .... ......
	...
    62cc:	00020800 02082080 08208000 0000f03f     ..... .... .?...
	...
    62f0:	80f03f00 00020820 02082080 08208000     .?.. .... .... .
    6300:	20800002 80000208 f0030820 02082080     ... .... .... ..
    6310:	08208000 20800002 00000000 00000000     .. .... ........
    6320:	3f000000 000000f0 00000000 00000000     ...?............
    6330:	00020800 02082080 08208000 2080f03f     ..... .... .?.. 
    6340:	80000208 00020820 02082080 08208000     .... .... .... .
    6350:	20800002 fc00c20f 00020820 02082080     ... .... .... ..
    6360:	14208000 50400105 40010514 f1051450     .. ...@P...@P...
    6370:	05145040 14504001 50400105 40010514     @P...@P...@P...@
    6380:	01051450 c4175040 0000fc01 00000000     P...@P..........
	...
    639c:	1f000000 507c01c4 40010514 01051450     ......|P...@P...
    63ac:	05145040 14504001 50400105 fc0fc0f7     @P...@P...@P....
	...
    63d0:	0fc0ff00 0514507c 14504001 50400105     ....|P...@P...@P
    63e0:	40010514 01051450 c4175040 14507c01     ...@P...@P...|P.
    63f0:	50400105 40010514 00000050 00000000     ..@P...@P.......
    6400:	ff000000 00fc0fc0 00000000 00000000     ................
    6410:	05140000 14504001 50400105 7c0fc0f7     .....@P...@P...|
    6420:	01051450 05145040 08504001 20800002     P...@P...@P.... 
    6430:	80000208 0fc0ff20 000000fc 00000000     .... ...........
    6440:	00000000 40010514 01051450 3f145040     .......@P...@P.?
    6450:	000000f0 00000000 00000000 00000000     ................
    6460:	00000000 ff000000 20fc0fc0 80000208     ........... ....
    6470:	00020820 00002080 00000000 00000000      .... ..........
    6480:	40f13f00 01051450 05145040 14504001     .?.@P...@P...@P.
    6490:	50400105 40010514 f0071450 00000000     ..@P...@P.......
	...
    64a8:	80000208 00020820 c20f2080 0000fc00     .... .... ......
	...
    64c8:	0f000000 20fc00c2 80000208 00020820     ....... .... ...
    64d8:	00002080 00000000 00000000 40f10700     . .............@
    64e8:	01051450 05145040 14504001 50400105     P...@P...@P...@P
    64f8:	40010514 f13f1450 05145040 14504001     ...@P.?.@P...@P.
    6508:	50400105 80000208 00020820 c2ff2080     ..@P.... .... ..
    6518:	0820fc0f 20800002 80000208 00020820     .. .... .... ...
    6528:	02082080 08208000 0000003e 00000000     . .... .>.......
	...
    6548:	80f00300 00020820 02082080 ff208000     .... .... .... .
    6558:	ffffffff ffffffff ffffffff ffffffff     ................
    6568:	ffffffff ffffffff 00000000 00000000     ................
    6578:	3f000000 ffffffff ffffffff ffffffff     ...?............
    6588:	0f3ef8ff 3ef8e083 f8e0830f e0830f3e     ..>....>....>...
    6598:	830f3ef8 0f3ef8e0 c30fe083 0f3ffcf0     .>....>.......?.
    65a8:	3ffcf0c3 fcf0c30f f0c30f3f c30f3ffc     ...?....?....?..
    65b8:	ff3ffcf0 ffffffff ffffffff f0ffffff     ..?.............
	...
    65dc:	8f380000 c208234c e2d08330 00000000     ..8.L#..0.......
    65ec:	00000000 193c0000 7c982186 8c61061f     ......<..!.|..a.
    65fc:	63c61861 000000f8 00000000 ff000000     a..c............
    660c:	8c31c61f 01061863 06186080 0000c003     ..1.c....`......
	...
    6628:	c69fff00 18638c31 008e33c6 00000000     ....1.c..3......
    6638:	fb0f0000 06b080fe 0618c000 c0800103     ................
    6648:	fefb2f20 00000000 00000000 00000000      /..............
    6658:	c3fef907 0c33cc30 e1c730c3 000000f8     ....0.3..0......
	...
    6670:	0c330c00 33cc30c3 cf30c30c 30c0f6db     ..3..0.3..0....0
    6680:	0000000c 00000000 e30c0000 618e7bbc     .............{.a
    6690:	06186080 00608001 00000000 00000000     .`....`.........
    66a0:	c33f0000 30c3f8c1 c30c33cc f0e0c730     ..?....0.3..0...
    66b0:	000000ff 03000000 1863f8e0 ff061bcc     ..........c.....
    66c0:	061becbf e0c31863 000000f8 00000000     ....c...........
    66d0:	e3fce103 061b6cb0 1b6cb0c1 c698e38e     .....l....l.....
    66e0:	00008e33 00000000 fef80300 e1070318     3...............
    66f0:	cc30c3f8 30c30c33 00f8e1c7 00000000     ..0.3..0........
    6700:	00000000 02000000 a2885421 88228a28     ........!T..(.".
    6710:	00204295 00000000 00000000 07000000     .B .............
    6720:	860e7367 628a28a3 7367b8b0 00000070     gs...(.b..gsp...
    6730:	00000000 60f8e003 00030c18 030c3ffc     .......`.....?..
    6740:	03186000 0000f8e0 00000000 00000000     .`..............
    6750:	1b8c0f3e 6cb0c106 b0c1061b c1061b6c     >......l....l...
    6760:	000060b0 00000000 0f000000 0000fefb     .`..............
    6770:	00fefb0f fefb0f00 00000000 00000000     ................
    6780:	02080000 ff208000 2080e0bf 03000208     ...... .... ....
    6790:	000000fe 00000000 3000030c 30c0000c     ...........0...0
    67a0:	c0c00003 0c0c3030 3f000003 0000f0cf     ....00.....?....
    67b0:	0c300000 0003030c 0330c0c0 030cc000     ..0.......0.....
    67c0:	000c3000 00f0cf3f 88600307 00020820     .0..?.....`. ...
    67d0:	02082080 08208000 20800002 80000208     . .... .... ....
    67e0:	00020820 02082080 08208000 20800002      .... .... .... 
    67f0:	80000208 09240820 00008001 18000000     .... .$.........
    6800:	00000006 00e0bfff 00061800 00000000     ................
	...
    6818:	8a0f1c00 0f1c073e 00073e8a 00000000     ....>....>......
	...
    6830:	01092460 00000080 00000000 00000000     `$..............
	...
    6854:	80030e38 00000000 00000000 00000000     8...............
	...
    686c:	01000000 00006080 00000000 0f000000     .....`..........
    687c:	40000104 0d020820 0c504001 00800002     ...@ ....@P.....
    688c:	00000000 f0c30b00 638c31c6 00000018     .........1.c....
	...
    68a8:	83070000 03070cf0 3fe0c081 00000000     ...........?....
	...
    68cc:	c30f3ffc 0f3ffcf0 0000f0c3 00000000     .?....?.........
	...
    68f4:	ffffffff 677537ff 71312c6a 38ffffff     .....7ugj,1q...8
    6904:	ff6b6869 7aff7732 6f3039ff 65332e6c     ihk.2w.z.90ol.3e
    6914:	ffff7861 2f3b702d 63737234 5b3dff20     ax..-p;/4rsc .=[
    6924:	7435ff27 ff6e7664 5cff5d27 62667936     '.5tdvn.'].\6yfb
    6934:	ffffff6d 0000ffff ffffffff 475526ff     m............&UG
    6944:	51213c4a 2affffff ff4b4849 5aff5740     J<!Q...*IHK.@W.Z
    6954:	4f2928ff 45233e4c ffff5841 3f3a505f     .()OL>#EAX.._P:?
    6964:	43535224 7b2bff20 5425ff22 ff4e5644     $RSC .+{".%TDVN.
    6974:	7cff7d7e 4246595e ffffff4d 0000ffff     ~}.|^YFBM.......

00006984 <kb_col>:
    6984:	00010000 00020000 00040000 00080000     ................
    6994:	00100000 00200000 08000000              ...... .....

000069a0 <kb_col_index>:
    69a0:	00000010 00000011 00000012 00000013     ................
    69b0:	00000014 00000015 0000001b              ............

000069bc <kb_row>:
    69bc:	00000004 00000008 00000010 00000020     ............ ...
    69cc:	00000040 00000080 00000400 00000800     @...............
    69dc:	00001000 00002000                       ..... ..

000069e4 <kb_row_index>:
    69e4:	00000002 00000003 00000004 00000005     ................
    69f4:	00000006 00000007 0000000a 0000000b     ................
    6a04:	0000000c 0000000d                       ........

00006a0c <beelzebub.12958>:
    6a0c:	2e002d00 44003200 88005300 f300b600     .-...2.D.S......
    6a1c:	64012201 d4019201 08020702 5f023402     .".d.........4._
    6a2c:	94027802 bb02a602 db02ca02 f902e802     .x..............
    6a3c:	7f031f03                                ....

00006a40 <belial.12955>:
    6a40:	f0f0f0f0 b0b0b0f0 b1b6b6b6 b7b7b1b1     ................
    6a50:	b2b2b2b7 bfb8b8b8 b9b3b3b3 b5b5b9b9     ................
    6a60:	babac2b5 bcbcbcba bebdbdbd f0f0f0be     ................
    6a70:	b1b1f0f0 b8b7b7b6 bcb8b8b8 c9c9bcbc     ................
    6a80:	35c9c9c9 0000363a                       ...5:6..

00006a88 <lucifer.12957>:
    6a88:	0852aa55 0d0d0d01 0d343434 34340d0d     U.R.....444...44
    6a98:	00000034 01242424 340f0f0f 08083434     4...$$$....444..
    6aa8:	24240308 00780024 00007800 52aa5589     ..$$$.x..x...U.R
    6ab8:	00cc0008 01707005 02030303 02d00000     .....pp.........
    6ac8:	00505050 00000055                       PPP.U...

00006ad0 <mulciber.12956>:
    6ad0:	03020100 02010004 00020100 01000201     ................
    6ae0:	02010002 00020100 01000201 01000002     ................
    6af0:	02010000 00020100 01000201 03020100     ................
    6b00:	00000004 01000100 01000302 02010002     ................
    6b10:	00000403 00000000 65530d0a 6c616972     ..........Serial
    6b20:	204b4f20 30303639 314e3820 00000d0a      OK 9600 8N1....

00006b30 <_global_impure_ptr>:
    6b30:	2000015c                                \.. 

00006b34 <__sf_fake_stderr>:
	...

00006b54 <__sf_fake_stdin>:
	...

00006b74 <__sf_fake_stdout>:
	...
    6b94:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    6ba4:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    6bb4:	31300046 35343332 39383736 64636261     F.0123456789abcd
    6bc4:	00006665                                ef..

00006bc8 <_init>:
    6bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6bca:	46c0      	nop			; (mov r8, r8)
    6bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    6bce:	bc08      	pop	{r3}
    6bd0:	469e      	mov	lr, r3
    6bd2:	4770      	bx	lr

00006bd4 <__init_array_start>:
    6bd4:	000000dd 	.word	0x000000dd

00006bd8 <_fini>:
    6bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6bda:	46c0      	nop			; (mov r8, r8)
    6bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    6bde:	bc08      	pop	{r3}
    6be0:	469e      	mov	lr, r3
    6be2:	4770      	bx	lr

00006be4 <__fini_array_start>:
    6be4:	000000b5 	.word	0x000000b5
