
DumBadgeFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000068b4  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001bc  20000000  000068b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000904  200001bc  00006a70  000201bc  2**2
                  ALLOC
  3 .stack        00002000  20000ac0  00007374  000201bc  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000201bc  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
  6 .debug_info   0003939a  00000000  00000000  0002023d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005316  00000000  00000000  000595d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000664a  00000000  00000000  0005e8ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000710  00000000  00000000  00064f37  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000868  00000000  00000000  00065647  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001da2f  00000000  00000000  00065eaf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000136ba  00000000  00000000  000838de  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0009024e  00000000  00000000  00096f98  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001924  00000000  00000000  001271e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
	// Keep the default device state after reset
	SystemCoreClock = __SYSTEM_CLOCK;
       0:	c0 2a 00 20 5d 1d 00 00 59 1d 00 00 59 1d 00 00     .*. ]...Y...Y...
	...
	config->stopbits         = USART_STOPBITS_1;
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
	config->baudrate         = 9600;
	config->receiver_enable  = true;
	config->transmitter_enable = true;
	config->clock_polarity_inverted = false;
      2c:	59 1d 00 00 00 00 00 00 00 00 00 00 59 1d 00 00     Y...........Y...
	config->use_external_clock = false;
	config->ext_clock_freq   = 0;
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
	config->generator_source = GCLK_GENERATOR_0;
      3c:	b1 2f 00 00 59 1d 00 00 59 1d 00 00 59 1d 00 00     ./..Y...Y...Y...
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
	config->receive_pulse_length                    = 19;
      4c:	59 1d 00 00 59 1d 00 00 59 1d 00 00 59 1d 00 00     Y...Y...Y...Y...
	usart_get_config_defaults(&config_usart);

	config_usart.baudrate    = SERCOMBAUD;
	config_usart.mux_setting = SERCOMMUX;
	config_usart.pinmux_pad0 = SERCOMPAD0;
	config_usart.pinmux_pad1 = SERCOMPAD1;
      5c:	59 1d 00 00 59 1d 00 00 75 0f 00 00 85 0f 00 00     Y...Y...u.......
	config_usart.pinmux_pad2 = SERCOMPAD2;
	config_usart.pinmux_pad3 = SERCOMPAD3;

	while (usart_init(&usart_instance,	 SERCOMMODULE, &config_usart) != STATUS_OK) { }
      6c:	95 0f 00 00 a5 0f 00 00 b5 0f 00 00 c5 0f 00 00     ................
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
      7c:	59 1d 00 00 59 1d 00 00 59 1d 00 00 59 1d 00 00     Y...Y...Y...Y...
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	if (usart_init(module, hw, config) == STATUS_OK) {
      8c:	59 1d 00 00 59 1d 00 00 59 1d 00 00 59 1d 00 00     Y...Y...Y...Y...
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
      9c:	a9 0a 00 00 59 1d 00 00 59 1d 00 00 59 1d 00 00     ....Y...Y...Y...
	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
      ac:	59 1d 00 00 00 00 00 00                             Y.......

000000b4 <__do_global_dtors_aux>:
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
      ba:	2b00      	cmp	r3, #0
	return (usart_hw->SYNCBUSY.reg);
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
	while (usart_is_syncing(module)) {
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop

	stdio_serial_init(&usart_instance, SERCOMMODULE, &config_usart);
	usart_enable(&usart_instance);
}
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200001bc 	.word	0x200001bc
      d4:	00000000 	.word	0x00000000
      d8:	000068b4 	.word	0x000068b4

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200001c0 	.word	0x200001c0
     108:	000068b4 	.word	0x000068b4
     10c:	000068b4 	.word	0x000068b4
     110:	00000000 	.word	0x00000000

00000114 <drawKare>:
//	graphic in the entire project. Please note this is the most
//	space efficient way to do this; a 40x31 bitmap is 930 bytes,
//	whereas	this is (104*2)+28+20, or 256 bytes.
/*********************************************************************/
void drawKare(int emotion)
{
     114:	b5f0      	push	{r4, r5, r6, r7, lr}
     116:	b0c1      	sub	sp, #260	; 0x104
     118:	0007      	movs	r7, r0
	uint16_t body[104] = {10,10,20,20,20,0,380,10,380,10,390,20,0,
     11a:	22d0      	movs	r2, #208	; 0xd0
     11c:	492d      	ldr	r1, [pc, #180]	; (1d4 <drawKare+0xc0>)
     11e:	a80c      	add	r0, sp, #48	; 0x30
     120:	4b2d      	ldr	r3, [pc, #180]	; (1d8 <drawKare+0xc4>)
     122:	4798      	blx	r3
		80,190,280,200,280,40,290,190,0,70,50,80,0,90,50,100,0,110,
		50,120,0,130,50,140,0,150,50,160,0,170,50,180,0,190,50,200,
		300,200,370,210,30,220,370,230,30,240,370,250,30,260,370,
		270,90,280,300,290};
	
	uint8_t happyTerm[28] = {180,80,190,130,170,130,190,140,140,
     124:	a805      	add	r0, sp, #20
     126:	4b2d      	ldr	r3, [pc, #180]	; (1dc <drawKare+0xc8>)
     128:	001a      	movs	r2, r3
     12a:	3250      	adds	r2, #80	; 0x50
     12c:	0001      	movs	r1, r0
     12e:	ca31      	ldmia	r2!, {r0, r4, r5}
     130:	c131      	stmia	r1!, {r0, r4, r5}
     132:	ca31      	ldmia	r2!, {r0, r4, r5}
     134:	c131      	stmia	r1!, {r0, r4, r5}
     136:	6812      	ldr	r2, [r2, #0]
     138:	600a      	str	r2, [r1, #0]
		60,150,100,210,60,220,100,130,150,140,160,140,160,220,170,
	220,150,230,160};
	
	uint8_t rPiBeret[20] = {120,60,240,80,110,70,120,90,150,
     13a:	336c      	adds	r3, #108	; 0x6c
     13c:	466a      	mov	r2, sp
     13e:	cb13      	ldmia	r3!, {r0, r1, r4}
     140:	c213      	stmia	r2!, {r0, r1, r4}
     142:	cb03      	ldmia	r3!, {r0, r1}
     144:	c203      	stmia	r2!, {r0, r1}
     146:	ac0c      	add	r4, sp, #48	; 0x30
     148:	ae40      	add	r6, sp, #256	; 0x100

	
	
	for(int i = 0; i < 104; i = i+4)
	{
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
     14a:	4d25      	ldr	r5, [pc, #148]	; (1e0 <drawKare+0xcc>)
		((body[i+1]/iSv)+(offsetGraphicY)),
		((body[i+2]/iSv)+(offsetGraphicX)),
		((body[i+3]/iSv)+(offsetGraphicY)));
     14c:	88e3      	ldrh	r3, [r4, #6]
     14e:	105b      	asrs	r3, r3, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
     150:	3396      	adds	r3, #150	; 0x96
		((body[i+2]/iSv)+(offsetGraphicX)),
     152:	88a2      	ldrh	r2, [r4, #4]
     154:	1052      	asrs	r2, r2, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
     156:	322d      	adds	r2, #45	; 0x2d
     158:	32ff      	adds	r2, #255	; 0xff
		((body[i+1]/iSv)+(offsetGraphicY)),
     15a:	8861      	ldrh	r1, [r4, #2]
     15c:	1049      	asrs	r1, r1, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
     15e:	3196      	adds	r1, #150	; 0x96
     160:	8820      	ldrh	r0, [r4, #0]
     162:	1040      	asrs	r0, r0, #1
     164:	302d      	adds	r0, #45	; 0x2d
     166:	30ff      	adds	r0, #255	; 0xff
     168:	47a8      	blx	r5
     16a:	3408      	adds	r4, #8
	for(int i = 0; i < 104; i = i+4)
     16c:	42b4      	cmp	r4, r6
     16e:	d1ed      	bne.n	14c <drawKare+0x38>
	}
	switch(emotion)
     170:	2f00      	cmp	r7, #0
     172:	d003      	beq.n	17c <drawKare+0x68>
     174:	2f01      	cmp	r7, #1
     176:	d017      	beq.n	1a8 <drawKare+0x94>
		break;
		case 2:
		//make a sad terminal thing go here
		break;
	}
}
     178:	b041      	add	sp, #260	; 0x104
     17a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     17c:	ac05      	add	r4, sp, #20
     17e:	ae0c      	add	r6, sp, #48	; 0x30
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
     180:	4d17      	ldr	r5, [pc, #92]	; (1e0 <drawKare+0xcc>)
			((happyTerm[i+3]/iSv)+(offsetGraphicY)));
     182:	78e3      	ldrb	r3, [r4, #3]
     184:	105b      	asrs	r3, r3, #1
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
     186:	3396      	adds	r3, #150	; 0x96
			((happyTerm[i+2]/iSv)+(offsetGraphicX)),
     188:	78a2      	ldrb	r2, [r4, #2]
     18a:	1052      	asrs	r2, r2, #1
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
     18c:	322d      	adds	r2, #45	; 0x2d
     18e:	32ff      	adds	r2, #255	; 0xff
			((happyTerm[i+1]/iSv)+(offsetGraphicY)),
     190:	7861      	ldrb	r1, [r4, #1]
     192:	1049      	asrs	r1, r1, #1
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
     194:	3196      	adds	r1, #150	; 0x96
     196:	7820      	ldrb	r0, [r4, #0]
     198:	1040      	asrs	r0, r0, #1
     19a:	302d      	adds	r0, #45	; 0x2d
     19c:	30ff      	adds	r0, #255	; 0xff
     19e:	47a8      	blx	r5
     1a0:	3404      	adds	r4, #4
		for(int i = 0; i < 28; i = i+4)
     1a2:	42a6      	cmp	r6, r4
     1a4:	d1ed      	bne.n	182 <drawKare+0x6e>
     1a6:	e7e7      	b.n	178 <drawKare+0x64>
     1a8:	466c      	mov	r4, sp
     1aa:	ae05      	add	r6, sp, #20
			fillRect((
     1ac:	4d0c      	ldr	r5, [pc, #48]	; (1e0 <drawKare+0xcc>)
			((rPiBeret[i+3]/iSv)+(offsetGraphicY)));
     1ae:	78e3      	ldrb	r3, [r4, #3]
     1b0:	105b      	asrs	r3, r3, #1
			fillRect((
     1b2:	3396      	adds	r3, #150	; 0x96
			((rPiBeret[i+2]/iSv)+(offsetGraphicX)),
     1b4:	78a2      	ldrb	r2, [r4, #2]
     1b6:	1052      	asrs	r2, r2, #1
			fillRect((
     1b8:	322d      	adds	r2, #45	; 0x2d
     1ba:	32ff      	adds	r2, #255	; 0xff
			((rPiBeret[i+1]/iSv)+(offsetGraphicY)),
     1bc:	7861      	ldrb	r1, [r4, #1]
     1be:	1049      	asrs	r1, r1, #1
			fillRect((
     1c0:	3196      	adds	r1, #150	; 0x96
			(rPiBeret[i]/iSv)+(offsetGraphicX)),
     1c2:	7820      	ldrb	r0, [r4, #0]
     1c4:	1040      	asrs	r0, r0, #1
			fillRect((
     1c6:	302d      	adds	r0, #45	; 0x2d
     1c8:	30ff      	adds	r0, #255	; 0xff
     1ca:	47a8      	blx	r5
     1cc:	3404      	adds	r4, #4
		for(int i = 0; i < 20; i = i+4)
     1ce:	42b4      	cmp	r4, r6
     1d0:	d1ed      	bne.n	1ae <drawKare+0x9a>
     1d2:	e7d1      	b.n	178 <drawKare+0x64>
     1d4:	0000466c 	.word	0x0000466c
     1d8:	00003501 	.word	0x00003501
     1dc:	000046ec 	.word	0x000046ec
     1e0:	00002b05 	.word	0x00002b05

000001e4 <splashScreen>:

void splashScreen(void)
{
     1e4:	b570      	push	{r4, r5, r6, lr}
	static const char *splashText[32];
	splashText[0] = "Trans rights are human rights";//
     1e6:	4c48      	ldr	r4, [pc, #288]	; (308 <splashScreen+0x124>)
     1e8:	4b48      	ldr	r3, [pc, #288]	; (30c <splashScreen+0x128>)
     1ea:	6023      	str	r3, [r4, #0]
	splashText[1] = "13^5 + 16^5 = 17^5";//
     1ec:	4b48      	ldr	r3, [pc, #288]	; (310 <splashScreen+0x12c>)
     1ee:	6063      	str	r3, [r4, #4]
	splashText[2] = "Reticulating Splines";//
     1f0:	4b48      	ldr	r3, [pc, #288]	; (314 <splashScreen+0x130>)
     1f2:	60a3      	str	r3, [r4, #8]
	splashText[3] = "violence.works";//
     1f4:	4b48      	ldr	r3, [pc, #288]	; (318 <splashScreen+0x134>)
     1f6:	60e3      	str	r3, [r4, #12]
	splashText[4] = "Tabs!";//
     1f8:	4b48      	ldr	r3, [pc, #288]	; (31c <splashScreen+0x138>)
     1fa:	6123      	str	r3, [r4, #16]
	splashText[5] = "Kill Billionaires (and Trillionaire)";//
     1fc:	4b48      	ldr	r3, [pc, #288]	; (320 <splashScreen+0x13c>)
     1fe:	6163      	str	r3, [r4, #20]
	splashText[6] = "Interest in technology is not a personality";//
     200:	4b48      	ldr	r3, [pc, #288]	; (324 <splashScreen+0x140>)
     202:	61a3      	str	r3, [r4, #24]
	splashText[7] = "10 PRINT CHR$(205.5+RND(1)); : GOTO 10";//
     204:	4b48      	ldr	r3, [pc, #288]	; (328 <splashScreen+0x144>)
     206:	61e3      	str	r3, [r4, #28]
	splashText[8] = "No gods. No masters. No external libraries.";//
     208:	4b48      	ldr	r3, [pc, #288]	; (32c <splashScreen+0x148>)
     20a:	6223      	str	r3, [r4, #32]
	splashText[9] = "Kill Nazis";//
     20c:	4b48      	ldr	r3, [pc, #288]	; (330 <splashScreen+0x14c>)
     20e:	6263      	str	r3, [r4, #36]	; 0x24
	splashText[10] = "Tiananmen Square 1989";//
     210:	4b48      	ldr	r3, [pc, #288]	; (334 <splashScreen+0x150>)
     212:	62a3      	str	r3, [r4, #40]	; 0x28
	splashText[11] = "America was founded on slavery";
     214:	4b48      	ldr	r3, [pc, #288]	; (338 <splashScreen+0x154>)
     216:	62e3      	str	r3, [r4, #44]	; 0x2c
	splashText[12] = "There is only capital and labor";//
     218:	4b48      	ldr	r3, [pc, #288]	; (33c <splashScreen+0x158>)
     21a:	6323      	str	r3, [r4, #48]	; 0x30
	splashText[13] = "Encourage _symmetric_ class warfare";//
     21c:	4b48      	ldr	r3, [pc, #288]	; (340 <splashScreen+0x15c>)
     21e:	6363      	str	r3, [r4, #52]	; 0x34
	splashText[14] = "$CURRENT_MEME";//
     220:	4b48      	ldr	r3, [pc, #288]	; (344 <splashScreen+0x160>)
     222:	63a3      	str	r3, [r4, #56]	; 0x38
	splashText[15] = "A Nice TTY";//
     224:	4b48      	ldr	r3, [pc, #288]	; (348 <splashScreen+0x164>)
     226:	63e3      	str	r3, [r4, #60]	; 0x3c
	splashText[16] = "Unix epoch minus 0xFF days";//
     228:	4b48      	ldr	r3, [pc, #288]	; (34c <splashScreen+0x168>)
     22a:	6423      	str	r3, [r4, #64]	; 0x40
	splashText[17] = "i  = 0x5f3759df - ( i >> 1 );";//
     22c:	4b48      	ldr	r3, [pc, #288]	; (350 <splashScreen+0x16c>)
     22e:	6463      	str	r3, [r4, #68]	; 0x44
	splashText[18] = "ACAB";//
     230:	4b48      	ldr	r3, [pc, #288]	; (354 <splashScreen+0x170>)
     232:	64a3      	str	r3, [r4, #72]	; 0x48
	splashText[19] = "Defcon's canceled.";//
     234:	4b48      	ldr	r3, [pc, #288]	; (358 <splashScreen+0x174>)
     236:	64e3      	str	r3, [r4, #76]	; 0x4c
	splashText[20] = "Ratsnest: Nothing To Do!";//
     238:	4b48      	ldr	r3, [pc, #288]	; (35c <splashScreen+0x178>)
     23a:	6523      	str	r3, [r4, #80]	; 0x50
	splashText[21] = "It has 69 keys.";//
     23c:	4b48      	ldr	r3, [pc, #288]	; (360 <splashScreen+0x17c>)
     23e:	6563      	str	r3, [r4, #84]	; 0x54
	splashText[22] = "Because VT-420 was already taken";//
     240:	4b48      	ldr	r3, [pc, #288]	; (364 <splashScreen+0x180>)
     242:	65a3      	str	r3, [r4, #88]	; 0x58
	splashText[23] = "Compression algorithm based on BBP (1997)";//
     244:	4b48      	ldr	r3, [pc, #288]	; (368 <splashScreen+0x184>)
     246:	65e3      	str	r3, [r4, #92]	; 0x5c
	splashText[24] = "The source of the Mississippi river is in Pennsylvania.";
     248:	4b48      	ldr	r3, [pc, #288]	; (36c <splashScreen+0x188>)
     24a:	6623      	str	r3, [r4, #96]	; 0x60
	splashText[25] = "Offensive hardware";//
     24c:	4b48      	ldr	r3, [pc, #288]	; (370 <splashScreen+0x18c>)
     24e:	6663      	str	r3, [r4, #100]	; 0x64
	splashText[26] = "Follow World Pog Federation    @WorldPog";//
     250:	4b48      	ldr	r3, [pc, #288]	; (374 <splashScreen+0x190>)
     252:	66a3      	str	r3, [r4, #104]	; 0x68
	splashText[27] = "Dummy thicc client";//
     254:	4b48      	ldr	r3, [pc, #288]	; (378 <splashScreen+0x194>)
     256:	66e3      	str	r3, [r4, #108]	; 0x6c
	splashText[28] = "A Nice TTY. An OK Computer.";//
     258:	4b48      	ldr	r3, [pc, #288]	; (37c <splashScreen+0x198>)
     25a:	6723      	str	r3, [r4, #112]	; 0x70
	splashText[29] = "Ceci n'est pas une Cyberdeck (because it's not a Pelican Case)";//
     25c:	4b48      	ldr	r3, [pc, #288]	; (380 <splashScreen+0x19c>)
     25e:	6763      	str	r3, [r4, #116]	; 0x74
	splashText[30] = "Solidarity is not a new framework";//
     260:	4b48      	ldr	r3, [pc, #288]	; (384 <splashScreen+0x1a0>)
     262:	67a3      	str	r3, [r4, #120]	; 0x78
	splashText[31] = "Breadboarding Is Not A Crime";//
     264:	4b48      	ldr	r3, [pc, #288]	; (388 <splashScreen+0x1a4>)
     266:	67e3      	str	r3, [r4, #124]	; 0x7c
	splashText[32] = "Off by one errors are common";
     268:	4a48      	ldr	r2, [pc, #288]	; (38c <splashScreen+0x1a8>)
     26a:	2380      	movs	r3, #128	; 0x80
     26c:	50e2      	str	r2, [r4, r3]
	
	const uint32_t megaHurtz = system_gclk_gen_get_hz(0);
     26e:	2000      	movs	r0, #0
     270:	4b47      	ldr	r3, [pc, #284]	; (390 <splashScreen+0x1ac>)
     272:	4798      	blx	r3
     274:	0005      	movs	r5, r0
	const char *textPhrase = splashText[(((rand()+megaHurtz)%32))];
     276:	4b47      	ldr	r3, [pc, #284]	; (394 <splashScreen+0x1b0>)
     278:	4798      	blx	r3
     27a:	1945      	adds	r5, r0, r5
     27c:	201f      	movs	r0, #31
     27e:	4028      	ands	r0, r5
     280:	0080      	lsls	r0, r0, #2
     282:	5904      	ldr	r4, [r0, r4]


	
	clearScreen();
     284:	4b44      	ldr	r3, [pc, #272]	; (398 <splashScreen+0x1b4>)
     286:	4798      	blx	r3
	setColorRGB(255,255,255);
     288:	22ff      	movs	r2, #255	; 0xff
     28a:	21ff      	movs	r1, #255	; 0xff
     28c:	20ff      	movs	r0, #255	; 0xff
     28e:	4b43      	ldr	r3, [pc, #268]	; (39c <splashScreen+0x1b8>)
     290:	4798      	blx	r3
	
	REG_PORT_DIRTGL1 = PORT_PB31;
     292:	2280      	movs	r2, #128	; 0x80
     294:	0612      	lsls	r2, r2, #24
     296:	4b42      	ldr	r3, [pc, #264]	; (3a0 <splashScreen+0x1bc>)
     298:	601a      	str	r2, [r3, #0]
	PORT->Group[1].PINCFG[31].bit.PULLEN = 1;
     29a:	4b42      	ldr	r3, [pc, #264]	; (3a4 <splashScreen+0x1c0>)
     29c:	22df      	movs	r2, #223	; 0xdf
     29e:	5c99      	ldrb	r1, [r3, r2]
     2a0:	2004      	movs	r0, #4
     2a2:	4301      	orrs	r1, r0
     2a4:	5499      	strb	r1, [r3, r2]
	PORT->Group[1].PINCFG[31].bit.INEN = 1;
     2a6:	5c99      	ldrb	r1, [r3, r2]
     2a8:	2002      	movs	r0, #2
     2aa:	4301      	orrs	r1, r0
     2ac:	5499      	strb	r1, [r3, r2]
	if((PORT->Group[1].IN.reg & PORT_PB31) != 0)
     2ae:	3a3f      	subs	r2, #63	; 0x3f
     2b0:	589b      	ldr	r3, [r3, r2]
     2b2:	2b00      	cmp	r3, #0
     2b4:	db24      	blt.n	300 <splashScreen+0x11c>
		//This is the 'pi' graphic; put some codes
		//here to handle setting up the uarts.
		drawKare(1);
	}
	else
	drawKare(0); //The normal graphic
     2b6:	2000      	movs	r0, #0
     2b8:	4b3b      	ldr	r3, [pc, #236]	; (3a8 <splashScreen+0x1c4>)
     2ba:	4798      	blx	r3
	

	
	xCharPos = 40 - (strlen(textPhrase)/2);
     2bc:	0020      	movs	r0, r4
     2be:	4b3b      	ldr	r3, [pc, #236]	; (3ac <splashScreen+0x1c8>)
     2c0:	4798      	blx	r3
     2c2:	4e3b      	ldr	r6, [pc, #236]	; (3b0 <splashScreen+0x1cc>)
     2c4:	0840      	lsrs	r0, r0, #1
     2c6:	2328      	movs	r3, #40	; 0x28
     2c8:	1a18      	subs	r0, r3, r0
     2ca:	8030      	strh	r0, [r6, #0]
	yCharPos = 16;
     2cc:	4d39      	ldr	r5, [pc, #228]	; (3b4 <splashScreen+0x1d0>)
     2ce:	2310      	movs	r3, #16
     2d0:	802b      	strh	r3, [r5, #0]
	
	writeString(textPhrase);
     2d2:	0020      	movs	r0, r4
     2d4:	4b38      	ldr	r3, [pc, #224]	; (3b8 <splashScreen+0x1d4>)
     2d6:	4798      	blx	r3

	delay_ms(2000);
     2d8:	20fa      	movs	r0, #250	; 0xfa
     2da:	00c0      	lsls	r0, r0, #3
     2dc:	4b37      	ldr	r3, [pc, #220]	; (3bc <splashScreen+0x1d8>)
     2de:	4798      	blx	r3
	clearScreen();
     2e0:	4b2d      	ldr	r3, [pc, #180]	; (398 <splashScreen+0x1b4>)
     2e2:	4798      	blx	r3
	
	setColorRGB(0,255,0);
     2e4:	2200      	movs	r2, #0
     2e6:	21ff      	movs	r1, #255	; 0xff
     2e8:	2000      	movs	r0, #0
     2ea:	4b2c      	ldr	r3, [pc, #176]	; (39c <splashScreen+0x1b8>)
     2ec:	4798      	blx	r3
	setBackColorRGB(0,0,0);
     2ee:	2200      	movs	r2, #0
     2f0:	2100      	movs	r1, #0
     2f2:	2000      	movs	r0, #0
     2f4:	4b32      	ldr	r3, [pc, #200]	; (3c0 <splashScreen+0x1dc>)
     2f6:	4798      	blx	r3
	
	//Setting the xChar and yChar position has to come
	//after splashScreen() and InitLCD();
	xCharPos = 0;
     2f8:	2300      	movs	r3, #0
     2fa:	8033      	strh	r3, [r6, #0]
	yCharPos = 0;
     2fc:	802b      	strh	r3, [r5, #0]
	

     2fe:	bd70      	pop	{r4, r5, r6, pc}
		drawKare(1);
     300:	2001      	movs	r0, #1
     302:	4b29      	ldr	r3, [pc, #164]	; (3a8 <splashScreen+0x1c4>)
     304:	4798      	blx	r3
     306:	e7d9      	b.n	2bc <splashScreen+0xd8>
     308:	200001d8 	.word	0x200001d8
     30c:	0000476c 	.word	0x0000476c
     310:	0000478c 	.word	0x0000478c
     314:	000047a0 	.word	0x000047a0
     318:	000047b8 	.word	0x000047b8
     31c:	000047c8 	.word	0x000047c8
     320:	000047d0 	.word	0x000047d0
     324:	000047f8 	.word	0x000047f8
     328:	00004824 	.word	0x00004824
     32c:	0000484c 	.word	0x0000484c
     330:	00004878 	.word	0x00004878
     334:	00004884 	.word	0x00004884
     338:	0000489c 	.word	0x0000489c
     33c:	000048bc 	.word	0x000048bc
     340:	000048dc 	.word	0x000048dc
     344:	00004900 	.word	0x00004900
     348:	00004910 	.word	0x00004910
     34c:	0000491c 	.word	0x0000491c
     350:	00004938 	.word	0x00004938
     354:	00004958 	.word	0x00004958
     358:	00004960 	.word	0x00004960
     35c:	00004974 	.word	0x00004974
     360:	00004990 	.word	0x00004990
     364:	000049a0 	.word	0x000049a0
     368:	000049c4 	.word	0x000049c4
     36c:	000049f0 	.word	0x000049f0
     370:	00004a28 	.word	0x00004a28
     374:	00004a3c 	.word	0x00004a3c
     378:	00004a68 	.word	0x00004a68
     37c:	00004a7c 	.word	0x00004a7c
     380:	00004a98 	.word	0x00004a98
     384:	00004ad8 	.word	0x00004ad8
     388:	00004afc 	.word	0x00004afc
     38c:	00004b1c 	.word	0x00004b1c
     390:	00001ae9 	.word	0x00001ae9
     394:	0000372d 	.word	0x0000372d
     398:	00002c5d 	.word	0x00002c5d
     39c:	000029c9 	.word	0x000029c9
     3a0:	4100448c 	.word	0x4100448c
     3a4:	41004400 	.word	0x41004400
     3a8:	00000115 	.word	0x00000115
     3ac:	00003935 	.word	0x00003935
     3b0:	20000298 	.word	0x20000298
     3b4:	2000029a 	.word	0x2000029a
     3b8:	00002305 	.word	0x00002305
     3bc:	00000569 	.word	0x00000569
     3c0:	000029f1 	.word	0x000029f1

000003c4 <parseRXBuffer>:
uint8_t characterFromRingBuffer;

cbuf_handle_t cbuf;	

void parseRXBuffer(void)
{
     3c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		//circular_buf_get(cbuf, &characterFromRingBuffer);
		
			if(characterFromRingBuffer == 0x0D)  //Carriage Return  //this returns to xcharpos = 0
     3c6:	4b4f      	ldr	r3, [pc, #316]	; (504 <parseRXBuffer+0x140>)
     3c8:	7818      	ldrb	r0, [r3, #0]
     3ca:	280d      	cmp	r0, #13
     3cc:	d007      	beq.n	3de <parseRXBuffer+0x1a>
					xCharPos = 0;
					drawChar(consoleDisplay[xCharPos][yCharPos]);
					blinkCursor();
				}
			}
			else if(characterFromRingBuffer == 0x0A)	//Line Feed
     3ce:	280a      	cmp	r0, #10
     3d0:	d02d      	beq.n	42e <parseRXBuffer+0x6a>
					yCharPos++;
					drawChar(consoleDisplay[xCharPos][yCharPos]);
					blinkCursor();
				}
			}
			else if(characterFromRingBuffer == 0x08)  //Backspace
     3d2:	2808      	cmp	r0, #8
     3d4:	d059      	beq.n	48a <parseRXBuffer+0xc6>
				xCharPos--;
				tempCharacter = consoleDisplay[xCharPos][yCharPos];
				drawChar(tempCharacter);
				blinkCursor();
			}
			else if(characterFromRingBuffer != 0x00)
     3d6:	2800      	cmp	r0, #0
     3d8:	d000      	beq.n	3dc <parseRXBuffer+0x18>
     3da:	e072      	b.n	4c2 <parseRXBuffer+0xfe>
				if(xCharPos > 79)		//END OF LINE
				{
					xCharPos--;
				}
			}
}
     3dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if(yCharPos == 23)
     3de:	4b4a      	ldr	r3, [pc, #296]	; (508 <parseRXBuffer+0x144>)
     3e0:	881a      	ldrh	r2, [r3, #0]
     3e2:	2a17      	cmp	r2, #23
     3e4:	d012      	beq.n	40c <parseRXBuffer+0x48>
					drawChar(consoleDisplay[xCharPos][yCharPos]);
     3e6:	4d49      	ldr	r5, [pc, #292]	; (50c <parseRXBuffer+0x148>)
     3e8:	4e49      	ldr	r6, [pc, #292]	; (510 <parseRXBuffer+0x14c>)
     3ea:	8831      	ldrh	r1, [r6, #0]
     3ec:	004b      	lsls	r3, r1, #1
     3ee:	185b      	adds	r3, r3, r1
     3f0:	00db      	lsls	r3, r3, #3
     3f2:	18eb      	adds	r3, r5, r3
     3f4:	5c98      	ldrb	r0, [r3, r2]
     3f6:	4c47      	ldr	r4, [pc, #284]	; (514 <parseRXBuffer+0x150>)
     3f8:	47a0      	blx	r4
					xCharPos = 0;
     3fa:	2300      	movs	r3, #0
     3fc:	8033      	strh	r3, [r6, #0]
					drawChar(consoleDisplay[xCharPos][yCharPos]);
     3fe:	4b42      	ldr	r3, [pc, #264]	; (508 <parseRXBuffer+0x144>)
     400:	881b      	ldrh	r3, [r3, #0]
     402:	5ce8      	ldrb	r0, [r5, r3]
     404:	47a0      	blx	r4
					blinkCursor();
     406:	4b44      	ldr	r3, [pc, #272]	; (518 <parseRXBuffer+0x154>)
     408:	4798      	blx	r3
     40a:	e7e7      	b.n	3dc <parseRXBuffer+0x18>
					drawChar(consoleDisplay[xCharPos][yCharPos]);
     40c:	4d40      	ldr	r5, [pc, #256]	; (510 <parseRXBuffer+0x14c>)
     40e:	882a      	ldrh	r2, [r5, #0]
     410:	0053      	lsls	r3, r2, #1
     412:	189b      	adds	r3, r3, r2
     414:	00db      	lsls	r3, r3, #3
     416:	4a3d      	ldr	r2, [pc, #244]	; (50c <parseRXBuffer+0x148>)
     418:	18d3      	adds	r3, r2, r3
     41a:	7dd8      	ldrb	r0, [r3, #23]
     41c:	4c3d      	ldr	r4, [pc, #244]	; (514 <parseRXBuffer+0x150>)
     41e:	47a0      	blx	r4
					xCharPos = 0;
     420:	2300      	movs	r3, #0
     422:	802b      	strh	r3, [r5, #0]
					drawChar(0x00);
     424:	2000      	movs	r0, #0
     426:	47a0      	blx	r4
					blinkCursor();
     428:	4b3b      	ldr	r3, [pc, #236]	; (518 <parseRXBuffer+0x154>)
     42a:	4798      	blx	r3
     42c:	e7d6      	b.n	3dc <parseRXBuffer+0x18>
				if(yCharPos == 23)
     42e:	4b36      	ldr	r3, [pc, #216]	; (508 <parseRXBuffer+0x144>)
     430:	881a      	ldrh	r2, [r3, #0]
     432:	2a17      	cmp	r2, #23
     434:	d018      	beq.n	468 <parseRXBuffer+0xa4>
					drawChar(consoleDisplay[xCharPos][yCharPos]);
     436:	4c35      	ldr	r4, [pc, #212]	; (50c <parseRXBuffer+0x148>)
     438:	4d35      	ldr	r5, [pc, #212]	; (510 <parseRXBuffer+0x14c>)
     43a:	8829      	ldrh	r1, [r5, #0]
     43c:	004b      	lsls	r3, r1, #1
     43e:	185b      	adds	r3, r3, r1
     440:	00db      	lsls	r3, r3, #3
     442:	18e3      	adds	r3, r4, r3
     444:	5c98      	ldrb	r0, [r3, r2]
     446:	4e33      	ldr	r6, [pc, #204]	; (514 <parseRXBuffer+0x150>)
     448:	47b0      	blx	r6
					yCharPos++;
     44a:	4a2f      	ldr	r2, [pc, #188]	; (508 <parseRXBuffer+0x144>)
     44c:	8813      	ldrh	r3, [r2, #0]
     44e:	3301      	adds	r3, #1
     450:	b29b      	uxth	r3, r3
     452:	8013      	strh	r3, [r2, #0]
					drawChar(consoleDisplay[xCharPos][yCharPos]);
     454:	8829      	ldrh	r1, [r5, #0]
     456:	004a      	lsls	r2, r1, #1
     458:	1852      	adds	r2, r2, r1
     45a:	00d2      	lsls	r2, r2, #3
     45c:	18a4      	adds	r4, r4, r2
     45e:	5ce0      	ldrb	r0, [r4, r3]
     460:	47b0      	blx	r6
					blinkCursor();
     462:	4b2d      	ldr	r3, [pc, #180]	; (518 <parseRXBuffer+0x154>)
     464:	4798      	blx	r3
     466:	e7b9      	b.n	3dc <parseRXBuffer+0x18>
					drawChar(consoleDisplay[xCharPos][yCharPos]);
     468:	4b29      	ldr	r3, [pc, #164]	; (510 <parseRXBuffer+0x14c>)
     46a:	881a      	ldrh	r2, [r3, #0]
     46c:	0053      	lsls	r3, r2, #1
     46e:	189b      	adds	r3, r3, r2
     470:	00db      	lsls	r3, r3, #3
     472:	4a26      	ldr	r2, [pc, #152]	; (50c <parseRXBuffer+0x148>)
     474:	18d3      	adds	r3, r2, r3
     476:	7dd8      	ldrb	r0, [r3, #23]
     478:	4c26      	ldr	r4, [pc, #152]	; (514 <parseRXBuffer+0x150>)
     47a:	47a0      	blx	r4
					newLine();
     47c:	4b27      	ldr	r3, [pc, #156]	; (51c <parseRXBuffer+0x158>)
     47e:	4798      	blx	r3
					drawChar(0x00);
     480:	2000      	movs	r0, #0
     482:	47a0      	blx	r4
					blinkCursor();
     484:	4b24      	ldr	r3, [pc, #144]	; (518 <parseRXBuffer+0x154>)
     486:	4798      	blx	r3
     488:	e7a8      	b.n	3dc <parseRXBuffer+0x18>
				drawChar(consoleDisplay[xCharPos][yCharPos]);
     48a:	4c20      	ldr	r4, [pc, #128]	; (50c <parseRXBuffer+0x148>)
     48c:	4d20      	ldr	r5, [pc, #128]	; (510 <parseRXBuffer+0x14c>)
     48e:	882a      	ldrh	r2, [r5, #0]
     490:	4e1d      	ldr	r6, [pc, #116]	; (508 <parseRXBuffer+0x144>)
     492:	8831      	ldrh	r1, [r6, #0]
     494:	0053      	lsls	r3, r2, #1
     496:	189b      	adds	r3, r3, r2
     498:	00db      	lsls	r3, r3, #3
     49a:	18e3      	adds	r3, r4, r3
     49c:	5c58      	ldrb	r0, [r3, r1]
     49e:	4f1d      	ldr	r7, [pc, #116]	; (514 <parseRXBuffer+0x150>)
     4a0:	47b8      	blx	r7
				xCharPos--;
     4a2:	882b      	ldrh	r3, [r5, #0]
     4a4:	3b01      	subs	r3, #1
     4a6:	b29b      	uxth	r3, r3
     4a8:	802b      	strh	r3, [r5, #0]
				tempCharacter = consoleDisplay[xCharPos][yCharPos];
     4aa:	8831      	ldrh	r1, [r6, #0]
     4ac:	005a      	lsls	r2, r3, #1
     4ae:	18d3      	adds	r3, r2, r3
     4b0:	00db      	lsls	r3, r3, #3
     4b2:	18e3      	adds	r3, r4, r3
     4b4:	5c58      	ldrb	r0, [r3, r1]
     4b6:	4b1a      	ldr	r3, [pc, #104]	; (520 <parseRXBuffer+0x15c>)
     4b8:	7018      	strb	r0, [r3, #0]
				drawChar(tempCharacter);
     4ba:	47b8      	blx	r7
				blinkCursor();
     4bc:	4b16      	ldr	r3, [pc, #88]	; (518 <parseRXBuffer+0x154>)
     4be:	4798      	blx	r3
     4c0:	e78c      	b.n	3dc <parseRXBuffer+0x18>
				consoleDisplay[xCharPos][yCharPos] = rx_buf;
     4c2:	4d12      	ldr	r5, [pc, #72]	; (50c <parseRXBuffer+0x148>)
     4c4:	4c12      	ldr	r4, [pc, #72]	; (510 <parseRXBuffer+0x14c>)
     4c6:	8823      	ldrh	r3, [r4, #0]
     4c8:	4e0f      	ldr	r6, [pc, #60]	; (508 <parseRXBuffer+0x144>)
     4ca:	8831      	ldrh	r1, [r6, #0]
     4cc:	005a      	lsls	r2, r3, #1
     4ce:	18d2      	adds	r2, r2, r3
     4d0:	00d2      	lsls	r2, r2, #3
     4d2:	18aa      	adds	r2, r5, r2
     4d4:	4b13      	ldr	r3, [pc, #76]	; (524 <parseRXBuffer+0x160>)
     4d6:	781b      	ldrb	r3, [r3, #0]
     4d8:	5453      	strb	r3, [r2, r1]
				drawChar(characterFromRingBuffer);
     4da:	4f0e      	ldr	r7, [pc, #56]	; (514 <parseRXBuffer+0x150>)
     4dc:	47b8      	blx	r7
				xCharPos++;
     4de:	8823      	ldrh	r3, [r4, #0]
     4e0:	3301      	adds	r3, #1
     4e2:	b29b      	uxth	r3, r3
     4e4:	8023      	strh	r3, [r4, #0]
				drawChar(consoleDisplay[xCharPos][yCharPos]);
     4e6:	8831      	ldrh	r1, [r6, #0]
     4e8:	005a      	lsls	r2, r3, #1
     4ea:	18d3      	adds	r3, r2, r3
     4ec:	00db      	lsls	r3, r3, #3
     4ee:	18eb      	adds	r3, r5, r3
     4f0:	5c58      	ldrb	r0, [r3, r1]
     4f2:	47b8      	blx	r7
				if(xCharPos > 79)		//END OF LINE
     4f4:	8823      	ldrh	r3, [r4, #0]
     4f6:	2b4f      	cmp	r3, #79	; 0x4f
     4f8:	d800      	bhi.n	4fc <parseRXBuffer+0x138>
     4fa:	e76f      	b.n	3dc <parseRXBuffer+0x18>
					xCharPos--;
     4fc:	3b01      	subs	r3, #1
     4fe:	4a04      	ldr	r2, [pc, #16]	; (510 <parseRXBuffer+0x14c>)
     500:	8013      	strh	r3, [r2, #0]
}
     502:	e76b      	b.n	3dc <parseRXBuffer+0x18>
     504:	200002b0 	.word	0x200002b0
     508:	2000029a 	.word	0x2000029a
     50c:	20000314 	.word	0x20000314
     510:	20000298 	.word	0x20000298
     514:	00001f11 	.word	0x00001f11
     518:	000021a9 	.word	0x000021a9
     51c:	00001ff9 	.word	0x00001ff9
     520:	200002a8 	.word	0x200002a8
     524:	200002a9 	.word	0x200002a9

00000528 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     528:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     52a:	2000      	movs	r0, #0
     52c:	4b08      	ldr	r3, [pc, #32]	; (550 <delay_init+0x28>)
     52e:	4798      	blx	r3
     530:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     532:	4c08      	ldr	r4, [pc, #32]	; (554 <delay_init+0x2c>)
     534:	21fa      	movs	r1, #250	; 0xfa
     536:	0089      	lsls	r1, r1, #2
     538:	47a0      	blx	r4
     53a:	4b07      	ldr	r3, [pc, #28]	; (558 <delay_init+0x30>)
     53c:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     53e:	4907      	ldr	r1, [pc, #28]	; (55c <delay_init+0x34>)
     540:	0028      	movs	r0, r5
     542:	47a0      	blx	r4
     544:	4b06      	ldr	r3, [pc, #24]	; (560 <delay_init+0x38>)
     546:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     548:	2205      	movs	r2, #5
     54a:	4b06      	ldr	r3, [pc, #24]	; (564 <delay_init+0x3c>)
     54c:	601a      	str	r2, [r3, #0]
}
     54e:	bd70      	pop	{r4, r5, r6, pc}
     550:	00001ae9 	.word	0x00001ae9
     554:	00003339 	.word	0x00003339
     558:	20000000 	.word	0x20000000
     55c:	000f4240 	.word	0x000f4240
     560:	20000004 	.word	0x20000004
     564:	e000e010 	.word	0xe000e010

00000568 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     568:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     56a:	4b08      	ldr	r3, [pc, #32]	; (58c <delay_cycles_ms+0x24>)
     56c:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     56e:	4a08      	ldr	r2, [pc, #32]	; (590 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     570:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     572:	2180      	movs	r1, #128	; 0x80
     574:	0249      	lsls	r1, r1, #9
	while (n--) {
     576:	3801      	subs	r0, #1
     578:	d307      	bcc.n	58a <delay_cycles_ms+0x22>
	if (n > 0) {
     57a:	2c00      	cmp	r4, #0
     57c:	d0fb      	beq.n	576 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     57e:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     580:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     582:	6813      	ldr	r3, [r2, #0]
     584:	420b      	tst	r3, r1
     586:	d0fc      	beq.n	582 <delay_cycles_ms+0x1a>
     588:	e7f5      	b.n	576 <delay_cycles_ms+0xe>
	}
}
     58a:	bd30      	pop	{r4, r5, pc}
     58c:	20000000 	.word	0x20000000
     590:	e000e010 	.word	0xe000e010

00000594 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     594:	4b0c      	ldr	r3, [pc, #48]	; (5c8 <cpu_irq_enter_critical+0x34>)
     596:	681b      	ldr	r3, [r3, #0]
     598:	2b00      	cmp	r3, #0
     59a:	d106      	bne.n	5aa <cpu_irq_enter_critical+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     59c:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     5a0:	2b00      	cmp	r3, #0
     5a2:	d007      	beq.n	5b4 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     5a4:	2200      	movs	r2, #0
     5a6:	4b09      	ldr	r3, [pc, #36]	; (5cc <cpu_irq_enter_critical+0x38>)
     5a8:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     5aa:	4a07      	ldr	r2, [pc, #28]	; (5c8 <cpu_irq_enter_critical+0x34>)
     5ac:	6813      	ldr	r3, [r2, #0]
     5ae:	3301      	adds	r3, #1
     5b0:	6013      	str	r3, [r2, #0]
}
     5b2:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     5b4:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     5b6:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     5ba:	2200      	movs	r2, #0
     5bc:	4b04      	ldr	r3, [pc, #16]	; (5d0 <cpu_irq_enter_critical+0x3c>)
     5be:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     5c0:	3201      	adds	r2, #1
     5c2:	4b02      	ldr	r3, [pc, #8]	; (5cc <cpu_irq_enter_critical+0x38>)
     5c4:	701a      	strb	r2, [r3, #0]
     5c6:	e7f0      	b.n	5aa <cpu_irq_enter_critical+0x16>
     5c8:	20000258 	.word	0x20000258
     5cc:	2000025c 	.word	0x2000025c
     5d0:	20000008 	.word	0x20000008

000005d4 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     5d4:	4b08      	ldr	r3, [pc, #32]	; (5f8 <cpu_irq_leave_critical+0x24>)
     5d6:	681a      	ldr	r2, [r3, #0]
     5d8:	3a01      	subs	r2, #1
     5da:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     5dc:	681b      	ldr	r3, [r3, #0]
     5de:	2b00      	cmp	r3, #0
     5e0:	d109      	bne.n	5f6 <cpu_irq_leave_critical+0x22>
     5e2:	4b06      	ldr	r3, [pc, #24]	; (5fc <cpu_irq_leave_critical+0x28>)
     5e4:	781b      	ldrb	r3, [r3, #0]
     5e6:	2b00      	cmp	r3, #0
     5e8:	d005      	beq.n	5f6 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     5ea:	2201      	movs	r2, #1
     5ec:	4b04      	ldr	r3, [pc, #16]	; (600 <cpu_irq_leave_critical+0x2c>)
     5ee:	701a      	strb	r2, [r3, #0]
     5f0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     5f4:	b662      	cpsie	i
	}
}
     5f6:	4770      	bx	lr
     5f8:	20000258 	.word	0x20000258
     5fc:	2000025c 	.word	0x2000025c
     600:	20000008 	.word	0x20000008

00000604 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     604:	b5f0      	push	{r4, r5, r6, r7, lr}
     606:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     608:	ac01      	add	r4, sp, #4
     60a:	2501      	movs	r5, #1
     60c:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     60e:	2700      	movs	r7, #0
     610:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     612:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     614:	0021      	movs	r1, r4
     616:	203e      	movs	r0, #62	; 0x3e
     618:	4e06      	ldr	r6, [pc, #24]	; (634 <system_board_init+0x30>)
     61a:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     61c:	2280      	movs	r2, #128	; 0x80
     61e:	05d2      	lsls	r2, r2, #23
     620:	4b05      	ldr	r3, [pc, #20]	; (638 <system_board_init+0x34>)
     622:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     624:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     626:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     628:	0021      	movs	r1, r4
     62a:	200f      	movs	r0, #15
     62c:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
     62e:	b003      	add	sp, #12
     630:	bdf0      	pop	{r4, r5, r6, r7, pc}
     632:	46c0      	nop			; (mov r8, r8)
     634:	00000b6d 	.word	0x00000b6d
     638:	41004480 	.word	0x41004480

0000063c <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     63c:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     63e:	2200      	movs	r2, #0
     640:	2300      	movs	r3, #0
     642:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
     644:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
     646:	2100      	movs	r1, #0
     648:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     64a:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     64c:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
     64e:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
     650:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
     652:	6082      	str	r2, [r0, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	//config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
     654:	24c0      	movs	r4, #192	; 0xc0
     656:	0164      	lsls	r4, r4, #5
     658:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     65a:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     65c:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
     65e:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
     660:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
     662:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     664:	242a      	movs	r4, #42	; 0x2a
     666:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
     668:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
     66a:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
     66c:	3c06      	subs	r4, #6
     66e:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     670:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     672:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
     674:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
     676:	232b      	movs	r3, #43	; 0x2b
     678:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
     67a:	3301      	adds	r3, #1
     67c:	54c1      	strb	r1, [r0, r3]
}
     67e:	bd10      	pop	{r4, pc}

00000680 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     680:	b5f0      	push	{r4, r5, r6, r7, lr}
     682:	46d6      	mov	lr, sl
     684:	464f      	mov	r7, r9
     686:	4646      	mov	r6, r8
     688:	b5c0      	push	{r6, r7, lr}
     68a:	b096      	sub	sp, #88	; 0x58
     68c:	0007      	movs	r7, r0
     68e:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     690:	6001      	str	r1, [r0, #0]
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     692:	4ac6      	ldr	r2, [pc, #792]	; (9ac <adc_init+0x32c>)
     694:	6a10      	ldr	r0, [r2, #32]
     696:	2380      	movs	r3, #128	; 0x80
     698:	025b      	lsls	r3, r3, #9
     69a:	4303      	orrs	r3, r0
     69c:	6213      	str	r3, [r2, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     69e:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     6a0:	2005      	movs	r0, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     6a2:	07db      	lsls	r3, r3, #31
     6a4:	d505      	bpl.n	6b2 <adc_init+0x32>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
     6a6:	b016      	add	sp, #88	; 0x58
     6a8:	bc1c      	pop	{r2, r3, r4}
     6aa:	4690      	mov	r8, r2
     6ac:	4699      	mov	r9, r3
     6ae:	46a2      	mov	sl, r4
     6b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     6b2:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
     6b4:	3017      	adds	r0, #23
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     6b6:	079b      	lsls	r3, r3, #30
     6b8:	d4f5      	bmi.n	6a6 <adc_init+0x26>
	module_inst->reference = config->reference;
     6ba:	7873      	ldrb	r3, [r6, #1]
     6bc:	713b      	strb	r3, [r7, #4]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
     6be:	2b00      	cmp	r3, #0
     6c0:	d104      	bne.n	6cc <adc_init+0x4c>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
     6c2:	4abb      	ldr	r2, [pc, #748]	; (9b0 <adc_init+0x330>)
     6c4:	6c13      	ldr	r3, [r2, #64]	; 0x40
     6c6:	2104      	movs	r1, #4
     6c8:	430b      	orrs	r3, r1
     6ca:	6413      	str	r3, [r2, #64]	; 0x40
		module_inst->callback[i] = NULL;
     6cc:	2300      	movs	r3, #0
     6ce:	60bb      	str	r3, [r7, #8]
     6d0:	60fb      	str	r3, [r7, #12]
     6d2:	613b      	str	r3, [r7, #16]
	module_inst->registered_callback_mask = 0;
     6d4:	76bb      	strb	r3, [r7, #26]
	module_inst->enabled_callback_mask = 0;
     6d6:	76fb      	strb	r3, [r7, #27]
	module_inst->remaining_conversions = 0;
     6d8:	833b      	strh	r3, [r7, #24]
	module_inst->job_status = STATUS_OK;
     6da:	773b      	strb	r3, [r7, #28]
	_adc_instances[0] = module_inst;
     6dc:	4bb5      	ldr	r3, [pc, #724]	; (9b4 <adc_init+0x334>)
     6de:	601f      	str	r7, [r3, #0]
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
     6e0:	232a      	movs	r3, #42	; 0x2a
     6e2:	5cf3      	ldrb	r3, [r6, r3]
     6e4:	2b00      	cmp	r3, #0
     6e6:	d105      	bne.n	6f4 <adc_init+0x74>
     6e8:	7d33      	ldrb	r3, [r6, #20]
     6ea:	2b00      	cmp	r3, #0
     6ec:	d102      	bne.n	6f4 <adc_init+0x74>
		module_inst->software_trigger = true;
     6ee:	3301      	adds	r3, #1
     6f0:	777b      	strb	r3, [r7, #29]
     6f2:	e001      	b.n	6f8 <adc_init+0x78>
		module_inst->software_trigger = false;
     6f4:	2300      	movs	r3, #0
     6f6:	777b      	strb	r3, [r7, #29]
	Adc *const adc_module = module_inst->hw;
     6f8:	683b      	ldr	r3, [r7, #0]
     6fa:	4698      	mov	r8, r3
	gclk_chan_conf.source_generator = config->clock_source;
     6fc:	7833      	ldrb	r3, [r6, #0]
     6fe:	466a      	mov	r2, sp
     700:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
     702:	4669      	mov	r1, sp
     704:	201e      	movs	r0, #30
     706:	4bac      	ldr	r3, [pc, #688]	; (9b8 <adc_init+0x338>)
     708:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
     70a:	201e      	movs	r0, #30
     70c:	4bab      	ldr	r3, [pc, #684]	; (9bc <adc_init+0x33c>)
     70e:	4798      	blx	r3
	if (config->pin_scan.inputs_to_scan != 0) {
     710:	232c      	movs	r3, #44	; 0x2c
     712:	5cf2      	ldrb	r2, [r6, r3]
     714:	2a00      	cmp	r2, #0
     716:	d054      	beq.n	7c2 <adc_init+0x142>
		uint8_t offset = config->pin_scan.offset_start_scan;
     718:	3b01      	subs	r3, #1
     71a:	5cf5      	ldrb	r5, [r6, r3]
		uint8_t start_pin =
     71c:	7b33      	ldrb	r3, [r6, #12]
     71e:	18eb      	adds	r3, r5, r3
     720:	b2db      	uxtb	r3, r3
		uint8_t end_pin =
     722:	18d1      	adds	r1, r2, r3
		while (start_pin < end_pin) {
     724:	b2c9      	uxtb	r1, r1
     726:	428b      	cmp	r3, r1
     728:	d221      	bcs.n	76e <adc_init+0xee>
     72a:	1952      	adds	r2, r2, r5
     72c:	b2d3      	uxtb	r3, r2
     72e:	4699      	mov	r9, r3
	const uint32_t pinmapping[] = {
     730:	4ba3      	ldr	r3, [pc, #652]	; (9c0 <adc_init+0x340>)
     732:	469a      	mov	sl, r3
     734:	e003      	b.n	73e <adc_init+0xbe>
			offset++;
     736:	3501      	adds	r5, #1
     738:	b2ed      	uxtb	r5, r5
		while (start_pin < end_pin) {
     73a:	454d      	cmp	r5, r9
     73c:	d017      	beq.n	76e <adc_init+0xee>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
     73e:	240f      	movs	r4, #15
     740:	402c      	ands	r4, r5
     742:	7b33      	ldrb	r3, [r6, #12]
     744:	18e4      	adds	r4, r4, r3
	const uint32_t pinmapping[] = {
     746:	2250      	movs	r2, #80	; 0x50
     748:	499e      	ldr	r1, [pc, #632]	; (9c4 <adc_init+0x344>)
     74a:	a802      	add	r0, sp, #8
     74c:	47d0      	blx	sl
	if (pin <= ADC_EXTCHANNEL_MSB) {
     74e:	2c13      	cmp	r4, #19
     750:	d8f1      	bhi.n	736 <adc_init+0xb6>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     752:	00a4      	lsls	r4, r4, #2
     754:	ab02      	add	r3, sp, #8
     756:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     758:	a901      	add	r1, sp, #4
     75a:	2300      	movs	r3, #0
     75c:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     75e:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     760:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     762:	3301      	adds	r3, #1
     764:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     766:	b2c0      	uxtb	r0, r0
     768:	4b97      	ldr	r3, [pc, #604]	; (9c8 <adc_init+0x348>)
     76a:	4798      	blx	r3
     76c:	e7e3      	b.n	736 <adc_init+0xb6>
		_adc_configure_ain_pin(config->negative_input);
     76e:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     770:	2250      	movs	r2, #80	; 0x50
     772:	4994      	ldr	r1, [pc, #592]	; (9c4 <adc_init+0x344>)
     774:	a802      	add	r0, sp, #8
     776:	4b92      	ldr	r3, [pc, #584]	; (9c0 <adc_init+0x340>)
     778:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     77a:	2c13      	cmp	r4, #19
     77c:	d913      	bls.n	7a6 <adc_init+0x126>
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
     77e:	7d73      	ldrb	r3, [r6, #21]
     780:	009b      	lsls	r3, r3, #2
     782:	b2db      	uxtb	r3, r3
     784:	4642      	mov	r2, r8
     786:	7013      	strb	r3, [r2, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     788:	7db3      	ldrb	r3, [r6, #22]
     78a:	01db      	lsls	r3, r3, #7
     78c:	7872      	ldrb	r2, [r6, #1]
     78e:	4313      	orrs	r3, r2
     790:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
     792:	4642      	mov	r2, r8
     794:	7053      	strb	r3, [r2, #1]
	switch (config->resolution) {
     796:	7933      	ldrb	r3, [r6, #4]
     798:	2b34      	cmp	r3, #52	; 0x34
     79a:	d900      	bls.n	79e <adc_init+0x11e>
     79c:	e17b      	b.n	a96 <adc_init+0x416>
     79e:	009b      	lsls	r3, r3, #2
     7a0:	4a8a      	ldr	r2, [pc, #552]	; (9cc <adc_init+0x34c>)
     7a2:	58d3      	ldr	r3, [r2, r3]
     7a4:	469f      	mov	pc, r3
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     7a6:	00a4      	lsls	r4, r4, #2
     7a8:	ab02      	add	r3, sp, #8
     7aa:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     7ac:	a901      	add	r1, sp, #4
     7ae:	2300      	movs	r3, #0
     7b0:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     7b2:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     7b4:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     7b6:	3301      	adds	r3, #1
     7b8:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     7ba:	b2c0      	uxtb	r0, r0
     7bc:	4b82      	ldr	r3, [pc, #520]	; (9c8 <adc_init+0x348>)
     7be:	4798      	blx	r3
     7c0:	e7dd      	b.n	77e <adc_init+0xfe>
		_adc_configure_ain_pin(config->positive_input);
     7c2:	7b34      	ldrb	r4, [r6, #12]
	const uint32_t pinmapping[] = {
     7c4:	2250      	movs	r2, #80	; 0x50
     7c6:	497f      	ldr	r1, [pc, #508]	; (9c4 <adc_init+0x344>)
     7c8:	a802      	add	r0, sp, #8
     7ca:	4b7d      	ldr	r3, [pc, #500]	; (9c0 <adc_init+0x340>)
     7cc:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     7ce:	2c13      	cmp	r4, #19
     7d0:	d915      	bls.n	7fe <adc_init+0x17e>
		_adc_configure_ain_pin(config->negative_input);
     7d2:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     7d4:	2250      	movs	r2, #80	; 0x50
     7d6:	497b      	ldr	r1, [pc, #492]	; (9c4 <adc_init+0x344>)
     7d8:	a802      	add	r0, sp, #8
     7da:	4b79      	ldr	r3, [pc, #484]	; (9c0 <adc_init+0x340>)
     7dc:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     7de:	2c13      	cmp	r4, #19
     7e0:	d8cd      	bhi.n	77e <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     7e2:	00a4      	lsls	r4, r4, #2
     7e4:	ab02      	add	r3, sp, #8
     7e6:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     7e8:	a901      	add	r1, sp, #4
     7ea:	2300      	movs	r3, #0
     7ec:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     7ee:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     7f0:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     7f2:	3301      	adds	r3, #1
     7f4:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     7f6:	b2c0      	uxtb	r0, r0
     7f8:	4b73      	ldr	r3, [pc, #460]	; (9c8 <adc_init+0x348>)
     7fa:	4798      	blx	r3
     7fc:	e7bf      	b.n	77e <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     7fe:	00a4      	lsls	r4, r4, #2
     800:	ab02      	add	r3, sp, #8
     802:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     804:	a901      	add	r1, sp, #4
     806:	2300      	movs	r3, #0
     808:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     80a:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     80c:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     80e:	3301      	adds	r3, #1
     810:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     812:	b2c0      	uxtb	r0, r0
     814:	4b6c      	ldr	r3, [pc, #432]	; (9c8 <adc_init+0x348>)
     816:	4798      	blx	r3
     818:	e7db      	b.n	7d2 <adc_init+0x152>
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     81a:	2304      	movs	r3, #4
		resolution = ADC_RESOLUTION_16BIT;
     81c:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_4;
     81e:	2102      	movs	r1, #2
     820:	e01a      	b.n	858 <adc_init+0x1d8>
		adjres = config->divide_result;
     822:	7c71      	ldrb	r1, [r6, #17]
		accumulate = config->accumulate_samples;
     824:	7c33      	ldrb	r3, [r6, #16]
		resolution = ADC_RESOLUTION_16BIT;
     826:	2410      	movs	r4, #16
     828:	e016      	b.n	858 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     82a:	2306      	movs	r3, #6
		resolution = ADC_RESOLUTION_16BIT;
     82c:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     82e:	2101      	movs	r1, #1
     830:	e012      	b.n	858 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     832:	2308      	movs	r3, #8
		resolution = ADC_RESOLUTION_16BIT;
     834:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     836:	2100      	movs	r1, #0
     838:	e00e      	b.n	858 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     83a:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_8BIT;
     83c:	2430      	movs	r4, #48	; 0x30
	uint8_t adjres = 0;
     83e:	2100      	movs	r1, #0
     840:	e00a      	b.n	858 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     842:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_10BIT;
     844:	2420      	movs	r4, #32
	uint8_t adjres = 0;
     846:	2100      	movs	r1, #0
     848:	e006      	b.n	858 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     84a:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_12BIT;
     84c:	2400      	movs	r4, #0
	uint8_t adjres = 0;
     84e:	2100      	movs	r1, #0
     850:	e002      	b.n	858 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     852:	2302      	movs	r3, #2
		resolution = ADC_RESOLUTION_16BIT;
     854:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     856:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     858:	0109      	lsls	r1, r1, #4
     85a:	2270      	movs	r2, #112	; 0x70
     85c:	400a      	ands	r2, r1
     85e:	4313      	orrs	r3, r2
     860:	4642      	mov	r2, r8
     862:	7093      	strb	r3, [r2, #2]
	if (config->sample_length > 63) {
     864:	7df3      	ldrb	r3, [r6, #23]
		return STATUS_ERR_INVALID_ARG;
     866:	2017      	movs	r0, #23
	if (config->sample_length > 63) {
     868:	2b3f      	cmp	r3, #63	; 0x3f
     86a:	d900      	bls.n	86e <adc_init+0x1ee>
     86c:	e71b      	b.n	6a6 <adc_init+0x26>
		adc_module->SAMPCTRL.reg =
     86e:	70d3      	strb	r3, [r2, #3]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     870:	683a      	ldr	r2, [r7, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     872:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     874:	b25b      	sxtb	r3, r3
     876:	2b00      	cmp	r3, #0
     878:	dbfb      	blt.n	872 <adc_init+0x1f2>
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
     87a:	7cf3      	ldrb	r3, [r6, #19]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     87c:	8872      	ldrh	r2, [r6, #2]
     87e:	4313      	orrs	r3, r2
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     880:	2224      	movs	r2, #36	; 0x24
     882:	5cb2      	ldrb	r2, [r6, r2]
     884:	00d2      	lsls	r2, r2, #3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     886:	4313      	orrs	r3, r2
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
     888:	7d32      	ldrb	r2, [r6, #20]
     88a:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     88c:	4313      	orrs	r3, r2
     88e:	7cb2      	ldrb	r2, [r6, #18]
     890:	0052      	lsls	r2, r2, #1
     892:	4313      	orrs	r3, r2
     894:	4323      	orrs	r3, r4
	adc_module->CTRLB.reg =
     896:	4642      	mov	r2, r8
     898:	8093      	strh	r3, [r2, #4]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     89a:	7e33      	ldrb	r3, [r6, #24]
     89c:	2b00      	cmp	r3, #0
     89e:	d020      	beq.n	8e2 <adc_init+0x262>
		switch (resolution) {
     8a0:	2c10      	cmp	r4, #16
     8a2:	d100      	bne.n	8a6 <adc_init+0x226>
     8a4:	e0d9      	b.n	a5a <adc_init+0x3da>
     8a6:	d800      	bhi.n	8aa <adc_init+0x22a>
     8a8:	e098      	b.n	9dc <adc_init+0x35c>
     8aa:	2c20      	cmp	r4, #32
     8ac:	d100      	bne.n	8b0 <adc_init+0x230>
     8ae:	e0b6      	b.n	a1e <adc_init+0x39e>
     8b0:	2c30      	cmp	r4, #48	; 0x30
     8b2:	d116      	bne.n	8e2 <adc_init+0x262>
			if (config->differential_mode &&
     8b4:	7cf2      	ldrb	r2, [r6, #19]
     8b6:	2a00      	cmp	r2, #0
     8b8:	d00a      	beq.n	8d0 <adc_init+0x250>
					(config->window.window_lower_value > 127 ||
     8ba:	69f2      	ldr	r2, [r6, #28]
     8bc:	3280      	adds	r2, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
     8be:	2017      	movs	r0, #23
			if (config->differential_mode &&
     8c0:	2aff      	cmp	r2, #255	; 0xff
     8c2:	d900      	bls.n	8c6 <adc_init+0x246>
     8c4:	e6ef      	b.n	6a6 <adc_init+0x26>
					config->window.window_lower_value < -128 ||
     8c6:	6a32      	ldr	r2, [r6, #32]
     8c8:	3280      	adds	r2, #128	; 0x80
     8ca:	2aff      	cmp	r2, #255	; 0xff
     8cc:	d900      	bls.n	8d0 <adc_init+0x250>
     8ce:	e6ea      	b.n	6a6 <adc_init+0x26>
				return STATUS_ERR_INVALID_ARG;
     8d0:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 255 ||
     8d2:	69f2      	ldr	r2, [r6, #28]
     8d4:	2aff      	cmp	r2, #255	; 0xff
     8d6:	dd00      	ble.n	8da <adc_init+0x25a>
     8d8:	e6e5      	b.n	6a6 <adc_init+0x26>
     8da:	6a32      	ldr	r2, [r6, #32]
     8dc:	2aff      	cmp	r2, #255	; 0xff
     8de:	dd00      	ble.n	8e2 <adc_init+0x262>
     8e0:	e6e1      	b.n	6a6 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     8e2:	6839      	ldr	r1, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     8e4:	7e4a      	ldrb	r2, [r1, #25]
	while (adc_is_syncing(module_inst)) {
     8e6:	b252      	sxtb	r2, r2
     8e8:	2a00      	cmp	r2, #0
     8ea:	dbfb      	blt.n	8e4 <adc_init+0x264>
	adc_module->WINCTRL.reg = config->window.window_mode;
     8ec:	4642      	mov	r2, r8
     8ee:	7213      	strb	r3, [r2, #8]
	Adc *const adc_module = module_inst->hw;
     8f0:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     8f2:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     8f4:	b25b      	sxtb	r3, r3
     8f6:	2b00      	cmp	r3, #0
     8f8:	dbfb      	blt.n	8f2 <adc_init+0x272>
	adc_module->WINLT.reg =
     8fa:	8bb3      	ldrh	r3, [r6, #28]
     8fc:	4642      	mov	r2, r8
     8fe:	8393      	strh	r3, [r2, #28]
	Adc *const adc_module = module_inst->hw;
     900:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     902:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     904:	b25b      	sxtb	r3, r3
     906:	2b00      	cmp	r3, #0
     908:	dbfb      	blt.n	902 <adc_init+0x282>
	adc_module->WINUT.reg = config->window.window_upper_value <<
     90a:	8c33      	ldrh	r3, [r6, #32]
     90c:	4642      	mov	r2, r8
     90e:	8413      	strh	r3, [r2, #32]
	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
     910:	232c      	movs	r3, #44	; 0x2c
     912:	5cf3      	ldrb	r3, [r6, r3]
	if (inputs_to_scan > 0) {
     914:	2b00      	cmp	r3, #0
     916:	d005      	beq.n	924 <adc_init+0x2a4>
		inputs_to_scan--;
     918:	3b01      	subs	r3, #1
     91a:	b2db      	uxtb	r3, r3
		return STATUS_ERR_INVALID_ARG;
     91c:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     91e:	2b0f      	cmp	r3, #15
     920:	d900      	bls.n	924 <adc_init+0x2a4>
     922:	e6c0      	b.n	6a6 <adc_init+0x26>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
     924:	222b      	movs	r2, #43	; 0x2b
     926:	5cb1      	ldrb	r1, [r6, r2]
		return STATUS_ERR_INVALID_ARG;
     928:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     92a:	290f      	cmp	r1, #15
     92c:	d900      	bls.n	930 <adc_init+0x2b0>
     92e:	e6ba      	b.n	6a6 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     930:	6838      	ldr	r0, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     932:	7e42      	ldrb	r2, [r0, #25]
	while (adc_is_syncing(module_inst)) {
     934:	b252      	sxtb	r2, r2
     936:	2a00      	cmp	r2, #0
     938:	dbfb      	blt.n	932 <adc_init+0x2b2>
			config->negative_input |
     93a:	89f2      	ldrh	r2, [r6, #14]
			config->positive_input;
     93c:	7b30      	ldrb	r0, [r6, #12]
			config->negative_input |
     93e:	4302      	orrs	r2, r0
     940:	68b0      	ldr	r0, [r6, #8]
     942:	4302      	orrs	r2, r0
			(config->pin_scan.offset_start_scan <<
     944:	0509      	lsls	r1, r1, #20
			config->negative_input |
     946:	430a      	orrs	r2, r1
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     948:	041b      	lsls	r3, r3, #16
			config->negative_input |
     94a:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
     94c:	4642      	mov	r2, r8
     94e:	6113      	str	r3, [r2, #16]
	adc_module->EVCTRL.reg = config->event_action;
     950:	232a      	movs	r3, #42	; 0x2a
     952:	5cf3      	ldrb	r3, [r6, r3]
     954:	7513      	strb	r3, [r2, #20]
	adc_module->INTENCLR.reg =
     956:	230f      	movs	r3, #15
     958:	7593      	strb	r3, [r2, #22]
	if (config->correction.correction_enable){
     95a:	3315      	adds	r3, #21
     95c:	5cf3      	ldrb	r3, [r6, r3]
     95e:	2b00      	cmp	r3, #0
     960:	d012      	beq.n	988 <adc_init+0x308>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     962:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
     964:	4a1a      	ldr	r2, [pc, #104]	; (9d0 <adc_init+0x350>)
			return STATUS_ERR_INVALID_ARG;
     966:	2017      	movs	r0, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     968:	4293      	cmp	r3, r2
     96a:	d900      	bls.n	96e <adc_init+0x2ee>
     96c:	e69b      	b.n	6a6 <adc_init+0x26>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     96e:	4642      	mov	r2, r8
     970:	8493      	strh	r3, [r2, #36]	; 0x24
		if (config->correction.offset_correction > 2047 ||
     972:	8d32      	ldrh	r2, [r6, #40]	; 0x28
     974:	2380      	movs	r3, #128	; 0x80
     976:	011b      	lsls	r3, r3, #4
     978:	18d3      	adds	r3, r2, r3
     97a:	4915      	ldr	r1, [pc, #84]	; (9d0 <adc_init+0x350>)
     97c:	b29b      	uxth	r3, r3
     97e:	428b      	cmp	r3, r1
     980:	d900      	bls.n	984 <adc_init+0x304>
     982:	e690      	b.n	6a6 <adc_init+0x26>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     984:	4643      	mov	r3, r8
     986:	84da      	strh	r2, [r3, #38]	; 0x26
			ADC_CALIB_BIAS_CAL(
     988:	4b12      	ldr	r3, [pc, #72]	; (9d4 <adc_init+0x354>)
     98a:	681b      	ldr	r3, [r3, #0]
     98c:	015b      	lsls	r3, r3, #5
     98e:	22e0      	movs	r2, #224	; 0xe0
     990:	00d2      	lsls	r2, r2, #3
     992:	4013      	ands	r3, r2
			ADC_CALIB_LINEARITY_CAL(
     994:	4a10      	ldr	r2, [pc, #64]	; (9d8 <adc_init+0x358>)
     996:	6851      	ldr	r1, [r2, #4]
     998:	0149      	lsls	r1, r1, #5
     99a:	6812      	ldr	r2, [r2, #0]
     99c:	0ed2      	lsrs	r2, r2, #27
     99e:	430a      	orrs	r2, r1
     9a0:	b2d2      	uxtb	r2, r2
			) |
     9a2:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
     9a4:	4642      	mov	r2, r8
     9a6:	8513      	strh	r3, [r2, #40]	; 0x28
	return STATUS_OK;
     9a8:	2000      	movs	r0, #0
     9aa:	e67c      	b.n	6a6 <adc_init+0x26>
     9ac:	40000400 	.word	0x40000400
     9b0:	40000800 	.word	0x40000800
     9b4:	200002b4 	.word	0x200002b4
     9b8:	00001c01 	.word	0x00001c01
     9bc:	00001b75 	.word	0x00001b75
     9c0:	00003501 	.word	0x00003501
     9c4:	00004c10 	.word	0x00004c10
     9c8:	00001cf9 	.word	0x00001cf9
     9cc:	00004b3c 	.word	0x00004b3c
     9d0:	00000fff 	.word	0x00000fff
     9d4:	00806024 	.word	0x00806024
     9d8:	00806020 	.word	0x00806020
		switch (resolution) {
     9dc:	2c00      	cmp	r4, #0
     9de:	d000      	beq.n	9e2 <adc_init+0x362>
     9e0:	e77f      	b.n	8e2 <adc_init+0x262>
			if (config->differential_mode &&
     9e2:	7cf2      	ldrb	r2, [r6, #19]
     9e4:	2a00      	cmp	r2, #0
     9e6:	d00f      	beq.n	a08 <adc_init+0x388>
					(config->window.window_lower_value > 2047 ||
     9e8:	69f2      	ldr	r2, [r6, #28]
     9ea:	2180      	movs	r1, #128	; 0x80
     9ec:	0109      	lsls	r1, r1, #4
     9ee:	468c      	mov	ip, r1
     9f0:	4462      	add	r2, ip
			if (config->differential_mode &&
     9f2:	492a      	ldr	r1, [pc, #168]	; (a9c <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
     9f4:	2017      	movs	r0, #23
			if (config->differential_mode &&
     9f6:	428a      	cmp	r2, r1
     9f8:	d900      	bls.n	9fc <adc_init+0x37c>
     9fa:	e654      	b.n	6a6 <adc_init+0x26>
					config->window.window_lower_value < -2048 ||
     9fc:	6a32      	ldr	r2, [r6, #32]
     9fe:	4462      	add	r2, ip
     a00:	4926      	ldr	r1, [pc, #152]	; (a9c <adc_init+0x41c>)
     a02:	428a      	cmp	r2, r1
     a04:	d900      	bls.n	a08 <adc_init+0x388>
     a06:	e64e      	b.n	6a6 <adc_init+0x26>
			} else if (config->window.window_lower_value > 4095 ||
     a08:	4a24      	ldr	r2, [pc, #144]	; (a9c <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
     a0a:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
     a0c:	69f1      	ldr	r1, [r6, #28]
     a0e:	4291      	cmp	r1, r2
     a10:	dd00      	ble.n	a14 <adc_init+0x394>
     a12:	e648      	b.n	6a6 <adc_init+0x26>
     a14:	6a31      	ldr	r1, [r6, #32]
     a16:	4291      	cmp	r1, r2
     a18:	dd00      	ble.n	a1c <adc_init+0x39c>
     a1a:	e644      	b.n	6a6 <adc_init+0x26>
     a1c:	e761      	b.n	8e2 <adc_init+0x262>
			if (config->differential_mode &&
     a1e:	7cf2      	ldrb	r2, [r6, #19]
     a20:	2a00      	cmp	r2, #0
     a22:	d00f      	beq.n	a44 <adc_init+0x3c4>
					(config->window.window_lower_value > 511 ||
     a24:	69f2      	ldr	r2, [r6, #28]
     a26:	2180      	movs	r1, #128	; 0x80
     a28:	0089      	lsls	r1, r1, #2
     a2a:	468c      	mov	ip, r1
     a2c:	4462      	add	r2, ip
			if (config->differential_mode &&
     a2e:	491c      	ldr	r1, [pc, #112]	; (aa0 <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
     a30:	2017      	movs	r0, #23
			if (config->differential_mode &&
     a32:	428a      	cmp	r2, r1
     a34:	d900      	bls.n	a38 <adc_init+0x3b8>
     a36:	e636      	b.n	6a6 <adc_init+0x26>
					config->window.window_lower_value < -512 ||
     a38:	6a32      	ldr	r2, [r6, #32]
     a3a:	4462      	add	r2, ip
     a3c:	4918      	ldr	r1, [pc, #96]	; (aa0 <adc_init+0x420>)
     a3e:	428a      	cmp	r2, r1
     a40:	d900      	bls.n	a44 <adc_init+0x3c4>
     a42:	e630      	b.n	6a6 <adc_init+0x26>
			} else if (config->window.window_lower_value > 1023 ||
     a44:	4a16      	ldr	r2, [pc, #88]	; (aa0 <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
     a46:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
     a48:	69f1      	ldr	r1, [r6, #28]
     a4a:	4291      	cmp	r1, r2
     a4c:	dd00      	ble.n	a50 <adc_init+0x3d0>
     a4e:	e62a      	b.n	6a6 <adc_init+0x26>
     a50:	6a31      	ldr	r1, [r6, #32]
     a52:	4291      	cmp	r1, r2
     a54:	dd00      	ble.n	a58 <adc_init+0x3d8>
     a56:	e626      	b.n	6a6 <adc_init+0x26>
     a58:	e743      	b.n	8e2 <adc_init+0x262>
			if (config->differential_mode &&
     a5a:	7cf2      	ldrb	r2, [r6, #19]
     a5c:	2a00      	cmp	r2, #0
     a5e:	d00f      	beq.n	a80 <adc_init+0x400>
					(config->window.window_lower_value > 32767 ||
     a60:	69f2      	ldr	r2, [r6, #28]
     a62:	2180      	movs	r1, #128	; 0x80
     a64:	0209      	lsls	r1, r1, #8
     a66:	468c      	mov	ip, r1
     a68:	4462      	add	r2, ip
			if (config->differential_mode &&
     a6a:	490e      	ldr	r1, [pc, #56]	; (aa4 <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
     a6c:	2017      	movs	r0, #23
			if (config->differential_mode &&
     a6e:	428a      	cmp	r2, r1
     a70:	d900      	bls.n	a74 <adc_init+0x3f4>
     a72:	e618      	b.n	6a6 <adc_init+0x26>
					config->window.window_lower_value < -32768 ||
     a74:	6a32      	ldr	r2, [r6, #32]
     a76:	4462      	add	r2, ip
     a78:	490a      	ldr	r1, [pc, #40]	; (aa4 <adc_init+0x424>)
     a7a:	428a      	cmp	r2, r1
     a7c:	d900      	bls.n	a80 <adc_init+0x400>
     a7e:	e612      	b.n	6a6 <adc_init+0x26>
			} else if (config->window.window_lower_value > 65535 ||
     a80:	4a08      	ldr	r2, [pc, #32]	; (aa4 <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
     a82:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
     a84:	69f1      	ldr	r1, [r6, #28]
     a86:	4291      	cmp	r1, r2
     a88:	dd00      	ble.n	a8c <adc_init+0x40c>
     a8a:	e60c      	b.n	6a6 <adc_init+0x26>
     a8c:	6a31      	ldr	r1, [r6, #32]
     a8e:	4291      	cmp	r1, r2
     a90:	dd00      	ble.n	a94 <adc_init+0x414>
     a92:	e608      	b.n	6a6 <adc_init+0x26>
     a94:	e725      	b.n	8e2 <adc_init+0x262>
		return STATUS_ERR_INVALID_ARG;
     a96:	2017      	movs	r0, #23
     a98:	e605      	b.n	6a6 <adc_init+0x26>
     a9a:	46c0      	nop			; (mov r8, r8)
     a9c:	00000fff 	.word	0x00000fff
     aa0:	000003ff 	.word	0x000003ff
     aa4:	0000ffff 	.word	0x0000ffff

00000aa8 <ADC_Handler>:
	}
}

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
     aa8:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
     aaa:	4b2f      	ldr	r3, [pc, #188]	; (b68 <ADC_Handler+0xc0>)
     aac:	681d      	ldr	r5, [r3, #0]
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
     aae:	682b      	ldr	r3, [r5, #0]
     ab0:	7e1a      	ldrb	r2, [r3, #24]
     ab2:	7ddc      	ldrb	r4, [r3, #23]
     ab4:	4014      	ands	r4, r2
	if (flags & ADC_INTFLAG_RESRDY) {
     ab6:	07e2      	lsls	r2, r4, #31
     ab8:	d416      	bmi.n	ae8 <ADC_Handler+0x40>
	if (flags & ADC_INTFLAG_WINMON) {
     aba:	0763      	lsls	r3, r4, #29
     abc:	d508      	bpl.n	ad0 <ADC_Handler+0x28>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     abe:	2304      	movs	r3, #4
     ac0:	682a      	ldr	r2, [r5, #0]
     ac2:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     ac4:	7eeb      	ldrb	r3, [r5, #27]
     ac6:	079b      	lsls	r3, r3, #30
     ac8:	d502      	bpl.n	ad0 <ADC_Handler+0x28>
     aca:	7eab      	ldrb	r3, [r5, #26]
     acc:	079b      	lsls	r3, r3, #30
     ace:	d442      	bmi.n	b56 <ADC_Handler+0xae>
	if (flags & ADC_INTFLAG_OVERRUN) {
     ad0:	07a3      	lsls	r3, r4, #30
     ad2:	d508      	bpl.n	ae6 <ADC_Handler+0x3e>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     ad4:	2302      	movs	r3, #2
     ad6:	682a      	ldr	r2, [r5, #0]
     ad8:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     ada:	7eeb      	ldrb	r3, [r5, #27]
     adc:	075b      	lsls	r3, r3, #29
     ade:	d502      	bpl.n	ae6 <ADC_Handler+0x3e>
     ae0:	7eab      	ldrb	r3, [r5, #26]
     ae2:	075b      	lsls	r3, r3, #29
     ae4:	d43b      	bmi.n	b5e <ADC_Handler+0xb6>
	_adc_interrupt_handler(0);
}
     ae6:	bd70      	pop	{r4, r5, r6, pc}
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     ae8:	2201      	movs	r2, #1
     aea:	761a      	strb	r2, [r3, #24]
	Adc *const adc_module = module_inst->hw;
     aec:	682a      	ldr	r2, [r5, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     aee:	7e53      	ldrb	r3, [r2, #25]
		while (adc_is_syncing(module)) {
     af0:	b25b      	sxtb	r3, r3
     af2:	2b00      	cmp	r3, #0
     af4:	dbfb      	blt.n	aee <ADC_Handler+0x46>
		*(module->job_buffer++) = module->hw->RESULT.reg;
     af6:	6969      	ldr	r1, [r5, #20]
     af8:	1c8b      	adds	r3, r1, #2
     afa:	616b      	str	r3, [r5, #20]
     afc:	8b53      	ldrh	r3, [r2, #26]
     afe:	b29b      	uxth	r3, r3
     b00:	800b      	strh	r3, [r1, #0]
		if (--module->remaining_conversions > 0) {
     b02:	8b2b      	ldrh	r3, [r5, #24]
     b04:	3b01      	subs	r3, #1
     b06:	b29b      	uxth	r3, r3
     b08:	832b      	strh	r3, [r5, #24]
     b0a:	2b00      	cmp	r3, #0
     b0c:	d011      	beq.n	b32 <ADC_Handler+0x8a>
			if (module->software_trigger == true) {
     b0e:	7f6b      	ldrb	r3, [r5, #29]
     b10:	2b00      	cmp	r3, #0
     b12:	d0d2      	beq.n	aba <ADC_Handler+0x12>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     b14:	682a      	ldr	r2, [r5, #0]
     b16:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     b18:	b25b      	sxtb	r3, r3
     b1a:	2b00      	cmp	r3, #0
     b1c:	dbfb      	blt.n	b16 <ADC_Handler+0x6e>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     b1e:	7b13      	ldrb	r3, [r2, #12]
     b20:	2102      	movs	r1, #2
     b22:	430b      	orrs	r3, r1
     b24:	7313      	strb	r3, [r2, #12]
	Adc *const adc_module = module_inst->hw;
     b26:	682a      	ldr	r2, [r5, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     b28:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     b2a:	b25b      	sxtb	r3, r3
     b2c:	2b00      	cmp	r3, #0
     b2e:	dbfb      	blt.n	b28 <ADC_Handler+0x80>
     b30:	e7c3      	b.n	aba <ADC_Handler+0x12>
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     b32:	2301      	movs	r3, #1
     b34:	682a      	ldr	r2, [r5, #0]
     b36:	7593      	strb	r3, [r2, #22]
			if (module->job_status == STATUS_BUSY) {
     b38:	7f2b      	ldrb	r3, [r5, #28]
     b3a:	2b05      	cmp	r3, #5
     b3c:	d1bd      	bne.n	aba <ADC_Handler+0x12>
				module->job_status = STATUS_OK;
     b3e:	2300      	movs	r3, #0
     b40:	772b      	strb	r3, [r5, #28]
				if ((module->enabled_callback_mask &
     b42:	7eeb      	ldrb	r3, [r5, #27]
     b44:	07db      	lsls	r3, r3, #31
     b46:	d5b8      	bpl.n	aba <ADC_Handler+0x12>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
     b48:	7eab      	ldrb	r3, [r5, #26]
     b4a:	07db      	lsls	r3, r3, #31
     b4c:	d5b5      	bpl.n	aba <ADC_Handler+0x12>
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     b4e:	0028      	movs	r0, r5
     b50:	68ab      	ldr	r3, [r5, #8]
     b52:	4798      	blx	r3
     b54:	e7b1      	b.n	aba <ADC_Handler+0x12>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     b56:	0028      	movs	r0, r5
     b58:	68eb      	ldr	r3, [r5, #12]
     b5a:	4798      	blx	r3
     b5c:	e7b8      	b.n	ad0 <ADC_Handler+0x28>
			(module->callback[ADC_CALLBACK_ERROR])(module);
     b5e:	692b      	ldr	r3, [r5, #16]
     b60:	0028      	movs	r0, r5
     b62:	4798      	blx	r3
}
     b64:	e7bf      	b.n	ae6 <ADC_Handler+0x3e>
     b66:	46c0      	nop			; (mov r8, r8)
     b68:	200002b4 	.word	0x200002b4

00000b6c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     b6c:	b500      	push	{lr}
     b6e:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     b70:	ab01      	add	r3, sp, #4
     b72:	2280      	movs	r2, #128	; 0x80
     b74:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     b76:	780a      	ldrb	r2, [r1, #0]
     b78:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     b7a:	784a      	ldrb	r2, [r1, #1]
     b7c:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     b7e:	788a      	ldrb	r2, [r1, #2]
     b80:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     b82:	0019      	movs	r1, r3
     b84:	4b01      	ldr	r3, [pc, #4]	; (b8c <port_pin_set_config+0x20>)
     b86:	4798      	blx	r3
}
     b88:	b003      	add	sp, #12
     b8a:	bd00      	pop	{pc}
     b8c:	00001cf9 	.word	0x00001cf9

00000b90 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     b90:	b5f0      	push	{r4, r5, r6, r7, lr}
     b92:	46de      	mov	lr, fp
     b94:	4657      	mov	r7, sl
     b96:	464e      	mov	r6, r9
     b98:	4645      	mov	r5, r8
     b9a:	b5e0      	push	{r5, r6, r7, lr}
     b9c:	b087      	sub	sp, #28
     b9e:	4680      	mov	r8, r0
     ba0:	9104      	str	r1, [sp, #16]
     ba2:	0016      	movs	r6, r2
     ba4:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     ba6:	2200      	movs	r2, #0
     ba8:	2300      	movs	r3, #0
     baa:	2100      	movs	r1, #0
     bac:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     bae:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     bb0:	2001      	movs	r0, #1
     bb2:	0021      	movs	r1, r4
     bb4:	9600      	str	r6, [sp, #0]
     bb6:	9701      	str	r7, [sp, #4]
     bb8:	465c      	mov	r4, fp
     bba:	9403      	str	r4, [sp, #12]
     bbc:	4644      	mov	r4, r8
     bbe:	9405      	str	r4, [sp, #20]
     bc0:	e013      	b.n	bea <long_division+0x5a>
     bc2:	2420      	movs	r4, #32
     bc4:	1a64      	subs	r4, r4, r1
     bc6:	0005      	movs	r5, r0
     bc8:	40e5      	lsrs	r5, r4
     bca:	46a8      	mov	r8, r5
     bcc:	e014      	b.n	bf8 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     bce:	9c00      	ldr	r4, [sp, #0]
     bd0:	9d01      	ldr	r5, [sp, #4]
     bd2:	1b12      	subs	r2, r2, r4
     bd4:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     bd6:	465c      	mov	r4, fp
     bd8:	464d      	mov	r5, r9
     bda:	432c      	orrs	r4, r5
     bdc:	46a3      	mov	fp, r4
     bde:	9c03      	ldr	r4, [sp, #12]
     be0:	4645      	mov	r5, r8
     be2:	432c      	orrs	r4, r5
     be4:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     be6:	3901      	subs	r1, #1
     be8:	d325      	bcc.n	c36 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     bea:	2420      	movs	r4, #32
     bec:	4264      	negs	r4, r4
     bee:	190c      	adds	r4, r1, r4
     bf0:	d4e7      	bmi.n	bc2 <long_division+0x32>
     bf2:	0005      	movs	r5, r0
     bf4:	40a5      	lsls	r5, r4
     bf6:	46a8      	mov	r8, r5
     bf8:	0004      	movs	r4, r0
     bfa:	408c      	lsls	r4, r1
     bfc:	46a1      	mov	r9, r4
		r = r << 1;
     bfe:	1892      	adds	r2, r2, r2
     c00:	415b      	adcs	r3, r3
     c02:	0014      	movs	r4, r2
     c04:	001d      	movs	r5, r3
		if (n & bit_shift) {
     c06:	9e05      	ldr	r6, [sp, #20]
     c08:	464f      	mov	r7, r9
     c0a:	403e      	ands	r6, r7
     c0c:	46b4      	mov	ip, r6
     c0e:	9e04      	ldr	r6, [sp, #16]
     c10:	4647      	mov	r7, r8
     c12:	403e      	ands	r6, r7
     c14:	46b2      	mov	sl, r6
     c16:	4666      	mov	r6, ip
     c18:	4657      	mov	r7, sl
     c1a:	433e      	orrs	r6, r7
     c1c:	d003      	beq.n	c26 <long_division+0x96>
			r |= 0x01;
     c1e:	0006      	movs	r6, r0
     c20:	4326      	orrs	r6, r4
     c22:	0032      	movs	r2, r6
     c24:	002b      	movs	r3, r5
		if (r >= d) {
     c26:	9c00      	ldr	r4, [sp, #0]
     c28:	9d01      	ldr	r5, [sp, #4]
     c2a:	429d      	cmp	r5, r3
     c2c:	d8db      	bhi.n	be6 <long_division+0x56>
     c2e:	d1ce      	bne.n	bce <long_division+0x3e>
     c30:	4294      	cmp	r4, r2
     c32:	d8d8      	bhi.n	be6 <long_division+0x56>
     c34:	e7cb      	b.n	bce <long_division+0x3e>
     c36:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     c38:	4658      	mov	r0, fp
     c3a:	0019      	movs	r1, r3
     c3c:	b007      	add	sp, #28
     c3e:	bc3c      	pop	{r2, r3, r4, r5}
     c40:	4690      	mov	r8, r2
     c42:	4699      	mov	r9, r3
     c44:	46a2      	mov	sl, r4
     c46:	46ab      	mov	fp, r5
     c48:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000c4a <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     c4a:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     c4c:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     c4e:	2340      	movs	r3, #64	; 0x40
     c50:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     c52:	4281      	cmp	r1, r0
     c54:	d202      	bcs.n	c5c <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     c56:	0018      	movs	r0, r3
     c58:	bd10      	pop	{r4, pc}
		baud_calculated++;
     c5a:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     c5c:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     c5e:	1c63      	adds	r3, r4, #1
     c60:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     c62:	4288      	cmp	r0, r1
     c64:	d9f9      	bls.n	c5a <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     c66:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     c68:	2cff      	cmp	r4, #255	; 0xff
     c6a:	d8f4      	bhi.n	c56 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     c6c:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     c6e:	2300      	movs	r3, #0
     c70:	e7f1      	b.n	c56 <_sercom_get_sync_baud_val+0xc>
	...

00000c74 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     c74:	b5f0      	push	{r4, r5, r6, r7, lr}
     c76:	b083      	sub	sp, #12
     c78:	000f      	movs	r7, r1
     c7a:	0016      	movs	r6, r2
     c7c:	aa08      	add	r2, sp, #32
     c7e:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     c80:	0004      	movs	r4, r0
     c82:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     c84:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     c86:	42bc      	cmp	r4, r7
     c88:	d902      	bls.n	c90 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     c8a:	0010      	movs	r0, r2
     c8c:	b003      	add	sp, #12
     c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     c90:	2b00      	cmp	r3, #0
     c92:	d114      	bne.n	cbe <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     c94:	0002      	movs	r2, r0
     c96:	0008      	movs	r0, r1
     c98:	2100      	movs	r1, #0
     c9a:	4c19      	ldr	r4, [pc, #100]	; (d00 <_sercom_get_async_baud_val+0x8c>)
     c9c:	47a0      	blx	r4
     c9e:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     ca0:	003a      	movs	r2, r7
     ca2:	2300      	movs	r3, #0
     ca4:	2000      	movs	r0, #0
     ca6:	4c17      	ldr	r4, [pc, #92]	; (d04 <_sercom_get_async_baud_val+0x90>)
     ca8:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     caa:	2200      	movs	r2, #0
     cac:	2301      	movs	r3, #1
     cae:	1a12      	subs	r2, r2, r0
     cb0:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     cb2:	0c12      	lsrs	r2, r2, #16
     cb4:	041b      	lsls	r3, r3, #16
     cb6:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     cb8:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     cba:	2200      	movs	r2, #0
     cbc:	e7e5      	b.n	c8a <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     cbe:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     cc0:	2b01      	cmp	r3, #1
     cc2:	d1f9      	bne.n	cb8 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     cc4:	000a      	movs	r2, r1
     cc6:	2300      	movs	r3, #0
     cc8:	2100      	movs	r1, #0
     cca:	4c0d      	ldr	r4, [pc, #52]	; (d00 <_sercom_get_async_baud_val+0x8c>)
     ccc:	47a0      	blx	r4
     cce:	0002      	movs	r2, r0
     cd0:	000b      	movs	r3, r1
     cd2:	9200      	str	r2, [sp, #0]
     cd4:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     cd6:	0038      	movs	r0, r7
     cd8:	2100      	movs	r1, #0
     cda:	4c0a      	ldr	r4, [pc, #40]	; (d04 <_sercom_get_async_baud_val+0x90>)
     cdc:	47a0      	blx	r4
     cde:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     ce0:	2380      	movs	r3, #128	; 0x80
     ce2:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     ce4:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     ce6:	4298      	cmp	r0, r3
     ce8:	d8cf      	bhi.n	c8a <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     cea:	0f79      	lsrs	r1, r7, #29
     cec:	00f8      	lsls	r0, r7, #3
     cee:	9a00      	ldr	r2, [sp, #0]
     cf0:	9b01      	ldr	r3, [sp, #4]
     cf2:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     cf4:	00ea      	lsls	r2, r5, #3
     cf6:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     cf8:	b2d2      	uxtb	r2, r2
     cfa:	0352      	lsls	r2, r2, #13
     cfc:	432a      	orrs	r2, r5
     cfe:	e7db      	b.n	cb8 <_sercom_get_async_baud_val+0x44>
     d00:	00003451 	.word	0x00003451
     d04:	00000b91 	.word	0x00000b91

00000d08 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     d08:	b510      	push	{r4, lr}
     d0a:	b082      	sub	sp, #8
     d0c:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     d0e:	4b0e      	ldr	r3, [pc, #56]	; (d48 <sercom_set_gclk_generator+0x40>)
     d10:	781b      	ldrb	r3, [r3, #0]
     d12:	2b00      	cmp	r3, #0
     d14:	d007      	beq.n	d26 <sercom_set_gclk_generator+0x1e>
     d16:	2900      	cmp	r1, #0
     d18:	d105      	bne.n	d26 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     d1a:	4b0b      	ldr	r3, [pc, #44]	; (d48 <sercom_set_gclk_generator+0x40>)
     d1c:	785b      	ldrb	r3, [r3, #1]
     d1e:	4283      	cmp	r3, r0
     d20:	d010      	beq.n	d44 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     d22:	201d      	movs	r0, #29
     d24:	e00c      	b.n	d40 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     d26:	a901      	add	r1, sp, #4
     d28:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     d2a:	2013      	movs	r0, #19
     d2c:	4b07      	ldr	r3, [pc, #28]	; (d4c <sercom_set_gclk_generator+0x44>)
     d2e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     d30:	2013      	movs	r0, #19
     d32:	4b07      	ldr	r3, [pc, #28]	; (d50 <sercom_set_gclk_generator+0x48>)
     d34:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     d36:	4b04      	ldr	r3, [pc, #16]	; (d48 <sercom_set_gclk_generator+0x40>)
     d38:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     d3a:	2201      	movs	r2, #1
     d3c:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     d3e:	2000      	movs	r0, #0
}
     d40:	b002      	add	sp, #8
     d42:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     d44:	2000      	movs	r0, #0
     d46:	e7fb      	b.n	d40 <sercom_set_gclk_generator+0x38>
     d48:	20000260 	.word	0x20000260
     d4c:	00001c01 	.word	0x00001c01
     d50:	00001b75 	.word	0x00001b75

00000d54 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     d54:	4b40      	ldr	r3, [pc, #256]	; (e58 <_sercom_get_default_pad+0x104>)
     d56:	4298      	cmp	r0, r3
     d58:	d031      	beq.n	dbe <_sercom_get_default_pad+0x6a>
     d5a:	d90a      	bls.n	d72 <_sercom_get_default_pad+0x1e>
     d5c:	4b3f      	ldr	r3, [pc, #252]	; (e5c <_sercom_get_default_pad+0x108>)
     d5e:	4298      	cmp	r0, r3
     d60:	d04d      	beq.n	dfe <_sercom_get_default_pad+0xaa>
     d62:	4b3f      	ldr	r3, [pc, #252]	; (e60 <_sercom_get_default_pad+0x10c>)
     d64:	4298      	cmp	r0, r3
     d66:	d05a      	beq.n	e1e <_sercom_get_default_pad+0xca>
     d68:	4b3e      	ldr	r3, [pc, #248]	; (e64 <_sercom_get_default_pad+0x110>)
     d6a:	4298      	cmp	r0, r3
     d6c:	d037      	beq.n	dde <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     d6e:	2000      	movs	r0, #0
}
     d70:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     d72:	4b3d      	ldr	r3, [pc, #244]	; (e68 <_sercom_get_default_pad+0x114>)
     d74:	4298      	cmp	r0, r3
     d76:	d00c      	beq.n	d92 <_sercom_get_default_pad+0x3e>
     d78:	4b3c      	ldr	r3, [pc, #240]	; (e6c <_sercom_get_default_pad+0x118>)
     d7a:	4298      	cmp	r0, r3
     d7c:	d1f7      	bne.n	d6e <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     d7e:	2901      	cmp	r1, #1
     d80:	d017      	beq.n	db2 <_sercom_get_default_pad+0x5e>
     d82:	2900      	cmp	r1, #0
     d84:	d05d      	beq.n	e42 <_sercom_get_default_pad+0xee>
     d86:	2902      	cmp	r1, #2
     d88:	d015      	beq.n	db6 <_sercom_get_default_pad+0x62>
     d8a:	2903      	cmp	r1, #3
     d8c:	d015      	beq.n	dba <_sercom_get_default_pad+0x66>
	return 0;
     d8e:	2000      	movs	r0, #0
     d90:	e7ee      	b.n	d70 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     d92:	2901      	cmp	r1, #1
     d94:	d007      	beq.n	da6 <_sercom_get_default_pad+0x52>
     d96:	2900      	cmp	r1, #0
     d98:	d051      	beq.n	e3e <_sercom_get_default_pad+0xea>
     d9a:	2902      	cmp	r1, #2
     d9c:	d005      	beq.n	daa <_sercom_get_default_pad+0x56>
     d9e:	2903      	cmp	r1, #3
     da0:	d005      	beq.n	dae <_sercom_get_default_pad+0x5a>
	return 0;
     da2:	2000      	movs	r0, #0
     da4:	e7e4      	b.n	d70 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     da6:	4832      	ldr	r0, [pc, #200]	; (e70 <_sercom_get_default_pad+0x11c>)
     da8:	e7e2      	b.n	d70 <_sercom_get_default_pad+0x1c>
     daa:	4832      	ldr	r0, [pc, #200]	; (e74 <_sercom_get_default_pad+0x120>)
     dac:	e7e0      	b.n	d70 <_sercom_get_default_pad+0x1c>
     dae:	4832      	ldr	r0, [pc, #200]	; (e78 <_sercom_get_default_pad+0x124>)
     db0:	e7de      	b.n	d70 <_sercom_get_default_pad+0x1c>
     db2:	4832      	ldr	r0, [pc, #200]	; (e7c <_sercom_get_default_pad+0x128>)
     db4:	e7dc      	b.n	d70 <_sercom_get_default_pad+0x1c>
     db6:	4832      	ldr	r0, [pc, #200]	; (e80 <_sercom_get_default_pad+0x12c>)
     db8:	e7da      	b.n	d70 <_sercom_get_default_pad+0x1c>
     dba:	4832      	ldr	r0, [pc, #200]	; (e84 <_sercom_get_default_pad+0x130>)
     dbc:	e7d8      	b.n	d70 <_sercom_get_default_pad+0x1c>
     dbe:	2901      	cmp	r1, #1
     dc0:	d007      	beq.n	dd2 <_sercom_get_default_pad+0x7e>
     dc2:	2900      	cmp	r1, #0
     dc4:	d03f      	beq.n	e46 <_sercom_get_default_pad+0xf2>
     dc6:	2902      	cmp	r1, #2
     dc8:	d005      	beq.n	dd6 <_sercom_get_default_pad+0x82>
     dca:	2903      	cmp	r1, #3
     dcc:	d005      	beq.n	dda <_sercom_get_default_pad+0x86>
	return 0;
     dce:	2000      	movs	r0, #0
     dd0:	e7ce      	b.n	d70 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     dd2:	482d      	ldr	r0, [pc, #180]	; (e88 <_sercom_get_default_pad+0x134>)
     dd4:	e7cc      	b.n	d70 <_sercom_get_default_pad+0x1c>
     dd6:	482d      	ldr	r0, [pc, #180]	; (e8c <_sercom_get_default_pad+0x138>)
     dd8:	e7ca      	b.n	d70 <_sercom_get_default_pad+0x1c>
     dda:	482d      	ldr	r0, [pc, #180]	; (e90 <_sercom_get_default_pad+0x13c>)
     ddc:	e7c8      	b.n	d70 <_sercom_get_default_pad+0x1c>
     dde:	2901      	cmp	r1, #1
     de0:	d007      	beq.n	df2 <_sercom_get_default_pad+0x9e>
     de2:	2900      	cmp	r1, #0
     de4:	d031      	beq.n	e4a <_sercom_get_default_pad+0xf6>
     de6:	2902      	cmp	r1, #2
     de8:	d005      	beq.n	df6 <_sercom_get_default_pad+0xa2>
     dea:	2903      	cmp	r1, #3
     dec:	d005      	beq.n	dfa <_sercom_get_default_pad+0xa6>
	return 0;
     dee:	2000      	movs	r0, #0
     df0:	e7be      	b.n	d70 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     df2:	4828      	ldr	r0, [pc, #160]	; (e94 <_sercom_get_default_pad+0x140>)
     df4:	e7bc      	b.n	d70 <_sercom_get_default_pad+0x1c>
     df6:	4828      	ldr	r0, [pc, #160]	; (e98 <_sercom_get_default_pad+0x144>)
     df8:	e7ba      	b.n	d70 <_sercom_get_default_pad+0x1c>
     dfa:	4828      	ldr	r0, [pc, #160]	; (e9c <_sercom_get_default_pad+0x148>)
     dfc:	e7b8      	b.n	d70 <_sercom_get_default_pad+0x1c>
     dfe:	2901      	cmp	r1, #1
     e00:	d007      	beq.n	e12 <_sercom_get_default_pad+0xbe>
     e02:	2900      	cmp	r1, #0
     e04:	d023      	beq.n	e4e <_sercom_get_default_pad+0xfa>
     e06:	2902      	cmp	r1, #2
     e08:	d005      	beq.n	e16 <_sercom_get_default_pad+0xc2>
     e0a:	2903      	cmp	r1, #3
     e0c:	d005      	beq.n	e1a <_sercom_get_default_pad+0xc6>
	return 0;
     e0e:	2000      	movs	r0, #0
     e10:	e7ae      	b.n	d70 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     e12:	4823      	ldr	r0, [pc, #140]	; (ea0 <_sercom_get_default_pad+0x14c>)
     e14:	e7ac      	b.n	d70 <_sercom_get_default_pad+0x1c>
     e16:	4823      	ldr	r0, [pc, #140]	; (ea4 <_sercom_get_default_pad+0x150>)
     e18:	e7aa      	b.n	d70 <_sercom_get_default_pad+0x1c>
     e1a:	4823      	ldr	r0, [pc, #140]	; (ea8 <_sercom_get_default_pad+0x154>)
     e1c:	e7a8      	b.n	d70 <_sercom_get_default_pad+0x1c>
     e1e:	2901      	cmp	r1, #1
     e20:	d007      	beq.n	e32 <_sercom_get_default_pad+0xde>
     e22:	2900      	cmp	r1, #0
     e24:	d015      	beq.n	e52 <_sercom_get_default_pad+0xfe>
     e26:	2902      	cmp	r1, #2
     e28:	d005      	beq.n	e36 <_sercom_get_default_pad+0xe2>
     e2a:	2903      	cmp	r1, #3
     e2c:	d005      	beq.n	e3a <_sercom_get_default_pad+0xe6>
	return 0;
     e2e:	2000      	movs	r0, #0
     e30:	e79e      	b.n	d70 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     e32:	481e      	ldr	r0, [pc, #120]	; (eac <_sercom_get_default_pad+0x158>)
     e34:	e79c      	b.n	d70 <_sercom_get_default_pad+0x1c>
     e36:	481e      	ldr	r0, [pc, #120]	; (eb0 <_sercom_get_default_pad+0x15c>)
     e38:	e79a      	b.n	d70 <_sercom_get_default_pad+0x1c>
     e3a:	481e      	ldr	r0, [pc, #120]	; (eb4 <_sercom_get_default_pad+0x160>)
     e3c:	e798      	b.n	d70 <_sercom_get_default_pad+0x1c>
     e3e:	481e      	ldr	r0, [pc, #120]	; (eb8 <_sercom_get_default_pad+0x164>)
     e40:	e796      	b.n	d70 <_sercom_get_default_pad+0x1c>
     e42:	2003      	movs	r0, #3
     e44:	e794      	b.n	d70 <_sercom_get_default_pad+0x1c>
     e46:	481d      	ldr	r0, [pc, #116]	; (ebc <_sercom_get_default_pad+0x168>)
     e48:	e792      	b.n	d70 <_sercom_get_default_pad+0x1c>
     e4a:	481d      	ldr	r0, [pc, #116]	; (ec0 <_sercom_get_default_pad+0x16c>)
     e4c:	e790      	b.n	d70 <_sercom_get_default_pad+0x1c>
     e4e:	481d      	ldr	r0, [pc, #116]	; (ec4 <_sercom_get_default_pad+0x170>)
     e50:	e78e      	b.n	d70 <_sercom_get_default_pad+0x1c>
     e52:	481d      	ldr	r0, [pc, #116]	; (ec8 <_sercom_get_default_pad+0x174>)
     e54:	e78c      	b.n	d70 <_sercom_get_default_pad+0x1c>
     e56:	46c0      	nop			; (mov r8, r8)
     e58:	42001000 	.word	0x42001000
     e5c:	42001800 	.word	0x42001800
     e60:	42001c00 	.word	0x42001c00
     e64:	42001400 	.word	0x42001400
     e68:	42000800 	.word	0x42000800
     e6c:	42000c00 	.word	0x42000c00
     e70:	00050003 	.word	0x00050003
     e74:	00060003 	.word	0x00060003
     e78:	00070003 	.word	0x00070003
     e7c:	00010003 	.word	0x00010003
     e80:	001e0003 	.word	0x001e0003
     e84:	001f0003 	.word	0x001f0003
     e88:	00090003 	.word	0x00090003
     e8c:	000a0003 	.word	0x000a0003
     e90:	000b0003 	.word	0x000b0003
     e94:	00110003 	.word	0x00110003
     e98:	00120003 	.word	0x00120003
     e9c:	00130003 	.word	0x00130003
     ea0:	000d0003 	.word	0x000d0003
     ea4:	000e0003 	.word	0x000e0003
     ea8:	000f0003 	.word	0x000f0003
     eac:	00170003 	.word	0x00170003
     eb0:	00180003 	.word	0x00180003
     eb4:	00190003 	.word	0x00190003
     eb8:	00040003 	.word	0x00040003
     ebc:	00080003 	.word	0x00080003
     ec0:	00100003 	.word	0x00100003
     ec4:	000c0003 	.word	0x000c0003
     ec8:	00160003 	.word	0x00160003

00000ecc <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     ecc:	b530      	push	{r4, r5, lr}
     ece:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     ed0:	4b0b      	ldr	r3, [pc, #44]	; (f00 <_sercom_get_sercom_inst_index+0x34>)
     ed2:	466a      	mov	r2, sp
     ed4:	cb32      	ldmia	r3!, {r1, r4, r5}
     ed6:	c232      	stmia	r2!, {r1, r4, r5}
     ed8:	cb32      	ldmia	r3!, {r1, r4, r5}
     eda:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     edc:	9b00      	ldr	r3, [sp, #0]
     ede:	4283      	cmp	r3, r0
     ee0:	d00b      	beq.n	efa <_sercom_get_sercom_inst_index+0x2e>
     ee2:	2301      	movs	r3, #1
     ee4:	009a      	lsls	r2, r3, #2
     ee6:	4669      	mov	r1, sp
     ee8:	5852      	ldr	r2, [r2, r1]
     eea:	4282      	cmp	r2, r0
     eec:	d006      	beq.n	efc <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     eee:	3301      	adds	r3, #1
     ef0:	2b06      	cmp	r3, #6
     ef2:	d1f7      	bne.n	ee4 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     ef4:	2000      	movs	r0, #0
}
     ef6:	b007      	add	sp, #28
     ef8:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     efa:	2300      	movs	r3, #0
			return i;
     efc:	b2d8      	uxtb	r0, r3
     efe:	e7fa      	b.n	ef6 <_sercom_get_sercom_inst_index+0x2a>
     f00:	00004c60 	.word	0x00004c60

00000f04 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     f04:	4770      	bx	lr
	...

00000f08 <_sercom_set_handler>:


void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     f08:	b5f0      	push	{r4, r5, r6, r7, lr}
	// Initialize handlers with default handler and device instances with 0 
	if (_handler_table_initialized == false) {
     f0a:	4b0a      	ldr	r3, [pc, #40]	; (f34 <_sercom_set_handler+0x2c>)
     f0c:	781b      	ldrb	r3, [r3, #0]
     f0e:	2b00      	cmp	r3, #0
     f10:	d10c      	bne.n	f2c <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     f12:	4f09      	ldr	r7, [pc, #36]	; (f38 <_sercom_set_handler+0x30>)
     f14:	4e09      	ldr	r6, [pc, #36]	; (f3c <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     f16:	4d0a      	ldr	r5, [pc, #40]	; (f40 <_sercom_set_handler+0x38>)
     f18:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     f1a:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     f1c:	195a      	adds	r2, r3, r5
     f1e:	6014      	str	r4, [r2, #0]
     f20:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     f22:	2b18      	cmp	r3, #24
     f24:	d1f9      	bne.n	f1a <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
     f26:	2201      	movs	r2, #1
     f28:	4b02      	ldr	r3, [pc, #8]	; (f34 <_sercom_set_handler+0x2c>)
     f2a:	701a      	strb	r2, [r3, #0]
	}

	// Save interrupt handler 
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     f2c:	0080      	lsls	r0, r0, #2
     f2e:	4b02      	ldr	r3, [pc, #8]	; (f38 <_sercom_set_handler+0x30>)
     f30:	50c1      	str	r1, [r0, r3]
}
     f32:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f34:	20000262 	.word	0x20000262
     f38:	20000264 	.word	0x20000264
     f3c:	00000f05 	.word	0x00000f05
     f40:	200002b8 	.word	0x200002b8

00000f44 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     f44:	b500      	push	{lr}
     f46:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     f48:	2309      	movs	r3, #9
     f4a:	466a      	mov	r2, sp
     f4c:	7013      	strb	r3, [r2, #0]
     f4e:	3301      	adds	r3, #1
     f50:	7053      	strb	r3, [r2, #1]
     f52:	3301      	adds	r3, #1
     f54:	7093      	strb	r3, [r2, #2]
     f56:	3301      	adds	r3, #1
     f58:	70d3      	strb	r3, [r2, #3]
     f5a:	3301      	adds	r3, #1
     f5c:	7113      	strb	r3, [r2, #4]
     f5e:	3301      	adds	r3, #1
     f60:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     f62:	4b03      	ldr	r3, [pc, #12]	; (f70 <_sercom_get_interrupt_vector+0x2c>)
     f64:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     f66:	466b      	mov	r3, sp
     f68:	5618      	ldrsb	r0, [r3, r0]
}
     f6a:	b003      	add	sp, #12
     f6c:	bd00      	pop	{pc}
     f6e:	46c0      	nop			; (mov r8, r8)
     f70:	00000ecd 	.word	0x00000ecd

00000f74 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     f74:	b510      	push	{r4, lr}
     f76:	4b02      	ldr	r3, [pc, #8]	; (f80 <SERCOM0_Handler+0xc>)
     f78:	681b      	ldr	r3, [r3, #0]
     f7a:	2000      	movs	r0, #0
     f7c:	4798      	blx	r3
     f7e:	bd10      	pop	{r4, pc}
     f80:	20000264 	.word	0x20000264

00000f84 <SERCOM1_Handler>:
     f84:	b510      	push	{r4, lr}
     f86:	4b02      	ldr	r3, [pc, #8]	; (f90 <SERCOM1_Handler+0xc>)
     f88:	685b      	ldr	r3, [r3, #4]
     f8a:	2001      	movs	r0, #1
     f8c:	4798      	blx	r3
     f8e:	bd10      	pop	{r4, pc}
     f90:	20000264 	.word	0x20000264

00000f94 <SERCOM2_Handler>:
     f94:	b510      	push	{r4, lr}
     f96:	4b02      	ldr	r3, [pc, #8]	; (fa0 <SERCOM2_Handler+0xc>)
     f98:	689b      	ldr	r3, [r3, #8]
     f9a:	2002      	movs	r0, #2
     f9c:	4798      	blx	r3
     f9e:	bd10      	pop	{r4, pc}
     fa0:	20000264 	.word	0x20000264

00000fa4 <SERCOM3_Handler>:
     fa4:	b510      	push	{r4, lr}
     fa6:	4b02      	ldr	r3, [pc, #8]	; (fb0 <SERCOM3_Handler+0xc>)
     fa8:	68db      	ldr	r3, [r3, #12]
     faa:	2003      	movs	r0, #3
     fac:	4798      	blx	r3
     fae:	bd10      	pop	{r4, pc}
     fb0:	20000264 	.word	0x20000264

00000fb4 <SERCOM4_Handler>:
     fb4:	b510      	push	{r4, lr}
     fb6:	4b02      	ldr	r3, [pc, #8]	; (fc0 <SERCOM4_Handler+0xc>)
     fb8:	691b      	ldr	r3, [r3, #16]
     fba:	2004      	movs	r0, #4
     fbc:	4798      	blx	r3
     fbe:	bd10      	pop	{r4, pc}
     fc0:	20000264 	.word	0x20000264

00000fc4 <SERCOM5_Handler>:
     fc4:	b510      	push	{r4, lr}
     fc6:	4b02      	ldr	r3, [pc, #8]	; (fd0 <SERCOM5_Handler+0xc>)
     fc8:	695b      	ldr	r3, [r3, #20]
     fca:	2005      	movs	r0, #5
     fcc:	4798      	blx	r3
     fce:	bd10      	pop	{r4, pc}
     fd0:	20000264 	.word	0x20000264

00000fd4 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
     fd6:	46de      	mov	lr, fp
     fd8:	4657      	mov	r7, sl
     fda:	464e      	mov	r6, r9
     fdc:	4645      	mov	r5, r8
     fde:	b5e0      	push	{r5, r6, r7, lr}
     fe0:	b091      	sub	sp, #68	; 0x44
     fe2:	0005      	movs	r5, r0
     fe4:	000c      	movs	r4, r1
     fe6:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     fe8:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     fea:	0008      	movs	r0, r1
     fec:	4bba      	ldr	r3, [pc, #744]	; (12d8 <usart_init+0x304>)
     fee:	4798      	blx	r3
     ff0:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     ff2:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     ff4:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     ff6:	07db      	lsls	r3, r3, #31
     ff8:	d506      	bpl.n	1008 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     ffa:	b011      	add	sp, #68	; 0x44
     ffc:	bc3c      	pop	{r2, r3, r4, r5}
     ffe:	4690      	mov	r8, r2
    1000:	4699      	mov	r9, r3
    1002:	46a2      	mov	sl, r4
    1004:	46ab      	mov	fp, r5
    1006:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1008:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    100a:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    100c:	079b      	lsls	r3, r3, #30
    100e:	d4f4      	bmi.n	ffa <usart_init+0x26>
    1010:	49b2      	ldr	r1, [pc, #712]	; (12dc <usart_init+0x308>)
    1012:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    1014:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1016:	2301      	movs	r3, #1
    1018:	40bb      	lsls	r3, r7
    101a:	4303      	orrs	r3, r0
    101c:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    101e:	a90f      	add	r1, sp, #60	; 0x3c
    1020:	272d      	movs	r7, #45	; 0x2d
    1022:	5df3      	ldrb	r3, [r6, r7]
    1024:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1026:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1028:	b2d3      	uxtb	r3, r2
    102a:	9302      	str	r3, [sp, #8]
    102c:	0018      	movs	r0, r3
    102e:	4bac      	ldr	r3, [pc, #688]	; (12e0 <usart_init+0x30c>)
    1030:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1032:	9802      	ldr	r0, [sp, #8]
    1034:	4bab      	ldr	r3, [pc, #684]	; (12e4 <usart_init+0x310>)
    1036:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1038:	5df0      	ldrb	r0, [r6, r7]
    103a:	2100      	movs	r1, #0
    103c:	4baa      	ldr	r3, [pc, #680]	; (12e8 <usart_init+0x314>)
    103e:	4798      	blx	r3
	module->character_size = config->character_size;
    1040:	7af3      	ldrb	r3, [r6, #11]
    1042:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    1044:	2324      	movs	r3, #36	; 0x24
    1046:	5cf3      	ldrb	r3, [r6, r3]
    1048:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    104a:	2325      	movs	r3, #37	; 0x25
    104c:	5cf3      	ldrb	r3, [r6, r3]
    104e:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    1050:	7ef3      	ldrb	r3, [r6, #27]
    1052:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    1054:	7f33      	ldrb	r3, [r6, #28]
    1056:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1058:	682b      	ldr	r3, [r5, #0]
    105a:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    105c:	0018      	movs	r0, r3
    105e:	4b9e      	ldr	r3, [pc, #632]	; (12d8 <usart_init+0x304>)
    1060:	4798      	blx	r3
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1062:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    1064:	2200      	movs	r2, #0
    1066:	230e      	movs	r3, #14
    1068:	a906      	add	r1, sp, #24
    106a:	468c      	mov	ip, r1
    106c:	4463      	add	r3, ip
    106e:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    1070:	8a32      	ldrh	r2, [r6, #16]
    1072:	9202      	str	r2, [sp, #8]
    1074:	2380      	movs	r3, #128	; 0x80
    1076:	01db      	lsls	r3, r3, #7
    1078:	429a      	cmp	r2, r3
    107a:	d100      	bne.n	107e <usart_init+0xaa>
    107c:	e09a      	b.n	11b4 <usart_init+0x1e0>
    107e:	d90f      	bls.n	10a0 <usart_init+0xcc>
    1080:	23c0      	movs	r3, #192	; 0xc0
    1082:	01db      	lsls	r3, r3, #7
    1084:	9a02      	ldr	r2, [sp, #8]
    1086:	429a      	cmp	r2, r3
    1088:	d100      	bne.n	108c <usart_init+0xb8>
    108a:	e08e      	b.n	11aa <usart_init+0x1d6>
    108c:	2380      	movs	r3, #128	; 0x80
    108e:	021b      	lsls	r3, r3, #8
    1090:	429a      	cmp	r2, r3
    1092:	d000      	beq.n	1096 <usart_init+0xc2>
    1094:	e11b      	b.n	12ce <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    1096:	2303      	movs	r3, #3
    1098:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    109a:	2300      	movs	r3, #0
    109c:	9307      	str	r3, [sp, #28]
    109e:	e008      	b.n	10b2 <usart_init+0xde>
	switch (config->sample_rate) {
    10a0:	2380      	movs	r3, #128	; 0x80
    10a2:	019b      	lsls	r3, r3, #6
    10a4:	429a      	cmp	r2, r3
    10a6:	d000      	beq.n	10aa <usart_init+0xd6>
    10a8:	e111      	b.n	12ce <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    10aa:	2310      	movs	r3, #16
    10ac:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    10ae:	3b0f      	subs	r3, #15
    10b0:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    10b2:	6833      	ldr	r3, [r6, #0]
    10b4:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    10b6:	68f3      	ldr	r3, [r6, #12]
    10b8:	469b      	mov	fp, r3
		config->sample_adjustment |
    10ba:	6973      	ldr	r3, [r6, #20]
    10bc:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    10be:	7e33      	ldrb	r3, [r6, #24]
    10c0:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    10c2:	2326      	movs	r3, #38	; 0x26
    10c4:	5cf3      	ldrb	r3, [r6, r3]
    10c6:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    10c8:	6873      	ldr	r3, [r6, #4]
    10ca:	4699      	mov	r9, r3
	switch (transfer_mode)
    10cc:	2b00      	cmp	r3, #0
    10ce:	d100      	bne.n	10d2 <usart_init+0xfe>
    10d0:	e09c      	b.n	120c <usart_init+0x238>
    10d2:	2380      	movs	r3, #128	; 0x80
    10d4:	055b      	lsls	r3, r3, #21
    10d6:	4599      	cmp	r9, r3
    10d8:	d100      	bne.n	10dc <usart_init+0x108>
    10da:	e080      	b.n	11de <usart_init+0x20a>
	if(config->encoding_format_enable) {
    10dc:	7e73      	ldrb	r3, [r6, #25]
    10de:	2b00      	cmp	r3, #0
    10e0:	d002      	beq.n	10e8 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    10e2:	7eb3      	ldrb	r3, [r6, #26]
    10e4:	4642      	mov	r2, r8
    10e6:	7393      	strb	r3, [r2, #14]
	usart_hw->BAUD.reg = baud;
    10e8:	230e      	movs	r3, #14
    10ea:	aa06      	add	r2, sp, #24
    10ec:	4694      	mov	ip, r2
    10ee:	4463      	add	r3, ip
    10f0:	881b      	ldrh	r3, [r3, #0]
    10f2:	4642      	mov	r2, r8
    10f4:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    10f6:	9b05      	ldr	r3, [sp, #20]
    10f8:	465a      	mov	r2, fp
    10fa:	4313      	orrs	r3, r2
    10fc:	9a03      	ldr	r2, [sp, #12]
    10fe:	4313      	orrs	r3, r2
    1100:	464a      	mov	r2, r9
    1102:	4313      	orrs	r3, r2
    1104:	9f02      	ldr	r7, [sp, #8]
    1106:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1108:	9b04      	ldr	r3, [sp, #16]
    110a:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    110c:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    110e:	4653      	mov	r3, sl
    1110:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    1112:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    1114:	2327      	movs	r3, #39	; 0x27
    1116:	5cf3      	ldrb	r3, [r6, r3]
    1118:	2b00      	cmp	r3, #0
    111a:	d101      	bne.n	1120 <usart_init+0x14c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    111c:	3304      	adds	r3, #4
    111e:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1120:	7e73      	ldrb	r3, [r6, #25]
    1122:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1124:	7f32      	ldrb	r2, [r6, #28]
    1126:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1128:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    112a:	7f72      	ldrb	r2, [r6, #29]
    112c:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    112e:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1130:	2224      	movs	r2, #36	; 0x24
    1132:	5cb2      	ldrb	r2, [r6, r2]
    1134:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1136:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    1138:	2225      	movs	r2, #37	; 0x25
    113a:	5cb2      	ldrb	r2, [r6, r2]
    113c:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    113e:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    1140:	7ab1      	ldrb	r1, [r6, #10]
    1142:	7af2      	ldrb	r2, [r6, #11]
    1144:	4311      	orrs	r1, r2
    1146:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    1148:	8933      	ldrh	r3, [r6, #8]
    114a:	2bff      	cmp	r3, #255	; 0xff
    114c:	d100      	bne.n	1150 <usart_init+0x17c>
    114e:	e081      	b.n	1254 <usart_init+0x280>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    1150:	2280      	movs	r2, #128	; 0x80
    1152:	0452      	lsls	r2, r2, #17
    1154:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    1156:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    1158:	232c      	movs	r3, #44	; 0x2c
    115a:	5cf3      	ldrb	r3, [r6, r3]
    115c:	2b00      	cmp	r3, #0
    115e:	d103      	bne.n	1168 <usart_init+0x194>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    1160:	4b62      	ldr	r3, [pc, #392]	; (12ec <usart_init+0x318>)
    1162:	789b      	ldrb	r3, [r3, #2]
    1164:	079b      	lsls	r3, r3, #30
    1166:	d501      	bpl.n	116c <usart_init+0x198>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    1168:	2380      	movs	r3, #128	; 0x80
    116a:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    116c:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    116e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1170:	2b00      	cmp	r3, #0
    1172:	d1fc      	bne.n	116e <usart_init+0x19a>
	usart_hw->CTRLB.reg = ctrlb;
    1174:	4643      	mov	r3, r8
    1176:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1178:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    117a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    117c:	2b00      	cmp	r3, #0
    117e:	d1fc      	bne.n	117a <usart_init+0x1a6>
	usart_hw->CTRLA.reg = ctrla;
    1180:	4643      	mov	r3, r8
    1182:	601f      	str	r7, [r3, #0]
    1184:	ab0e      	add	r3, sp, #56	; 0x38
    1186:	2280      	movs	r2, #128	; 0x80
    1188:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    118a:	2200      	movs	r2, #0
    118c:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    118e:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1190:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    1192:	6b33      	ldr	r3, [r6, #48]	; 0x30
    1194:	930a      	str	r3, [sp, #40]	; 0x28
    1196:	6b73      	ldr	r3, [r6, #52]	; 0x34
    1198:	930b      	str	r3, [sp, #44]	; 0x2c
    119a:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    119c:	930c      	str	r3, [sp, #48]	; 0x30
    119e:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    11a0:	9302      	str	r3, [sp, #8]
    11a2:	930d      	str	r3, [sp, #52]	; 0x34
    11a4:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    11a6:	ae0a      	add	r6, sp, #40	; 0x28
    11a8:	e063      	b.n	1272 <usart_init+0x29e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    11aa:	2308      	movs	r3, #8
    11ac:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    11ae:	3b07      	subs	r3, #7
    11b0:	9307      	str	r3, [sp, #28]
    11b2:	e77e      	b.n	10b2 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    11b4:	6833      	ldr	r3, [r6, #0]
    11b6:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    11b8:	68f3      	ldr	r3, [r6, #12]
    11ba:	469b      	mov	fp, r3
		config->sample_adjustment |
    11bc:	6973      	ldr	r3, [r6, #20]
    11be:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    11c0:	7e33      	ldrb	r3, [r6, #24]
    11c2:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    11c4:	2326      	movs	r3, #38	; 0x26
    11c6:	5cf3      	ldrb	r3, [r6, r3]
    11c8:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    11ca:	6873      	ldr	r3, [r6, #4]
    11cc:	4699      	mov	r9, r3
	switch (transfer_mode)
    11ce:	2b00      	cmp	r3, #0
    11d0:	d018      	beq.n	1204 <usart_init+0x230>
    11d2:	2380      	movs	r3, #128	; 0x80
    11d4:	055b      	lsls	r3, r3, #21
    11d6:	4599      	cmp	r9, r3
    11d8:	d001      	beq.n	11de <usart_init+0x20a>
	enum status_code status_code = STATUS_OK;
    11da:	2000      	movs	r0, #0
    11dc:	e025      	b.n	122a <usart_init+0x256>
			if (!config->use_external_clock) {
    11de:	2327      	movs	r3, #39	; 0x27
    11e0:	5cf3      	ldrb	r3, [r6, r3]
    11e2:	2b00      	cmp	r3, #0
    11e4:	d000      	beq.n	11e8 <usart_init+0x214>
    11e6:	e779      	b.n	10dc <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    11e8:	6a33      	ldr	r3, [r6, #32]
    11ea:	001f      	movs	r7, r3
    11ec:	b2c0      	uxtb	r0, r0
    11ee:	4b40      	ldr	r3, [pc, #256]	; (12f0 <usart_init+0x31c>)
    11f0:	4798      	blx	r3
    11f2:	0001      	movs	r1, r0
    11f4:	220e      	movs	r2, #14
    11f6:	ab06      	add	r3, sp, #24
    11f8:	469c      	mov	ip, r3
    11fa:	4462      	add	r2, ip
    11fc:	0038      	movs	r0, r7
    11fe:	4b3d      	ldr	r3, [pc, #244]	; (12f4 <usart_init+0x320>)
    1200:	4798      	blx	r3
    1202:	e012      	b.n	122a <usart_init+0x256>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1204:	2308      	movs	r3, #8
    1206:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1208:	2300      	movs	r3, #0
    120a:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    120c:	2327      	movs	r3, #39	; 0x27
    120e:	5cf3      	ldrb	r3, [r6, r3]
    1210:	2b00      	cmp	r3, #0
    1212:	d00e      	beq.n	1232 <usart_init+0x25e>
				status_code =
    1214:	9b06      	ldr	r3, [sp, #24]
    1216:	9300      	str	r3, [sp, #0]
    1218:	9b07      	ldr	r3, [sp, #28]
    121a:	220e      	movs	r2, #14
    121c:	a906      	add	r1, sp, #24
    121e:	468c      	mov	ip, r1
    1220:	4462      	add	r2, ip
    1222:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    1224:	6a30      	ldr	r0, [r6, #32]
    1226:	4f34      	ldr	r7, [pc, #208]	; (12f8 <usart_init+0x324>)
    1228:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    122a:	2800      	cmp	r0, #0
    122c:	d000      	beq.n	1230 <usart_init+0x25c>
    122e:	e6e4      	b.n	ffa <usart_init+0x26>
    1230:	e754      	b.n	10dc <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    1232:	6a33      	ldr	r3, [r6, #32]
    1234:	001f      	movs	r7, r3
    1236:	b2c0      	uxtb	r0, r0
    1238:	4b2d      	ldr	r3, [pc, #180]	; (12f0 <usart_init+0x31c>)
    123a:	4798      	blx	r3
    123c:	0001      	movs	r1, r0
				status_code =
    123e:	9b06      	ldr	r3, [sp, #24]
    1240:	9300      	str	r3, [sp, #0]
    1242:	9b07      	ldr	r3, [sp, #28]
    1244:	220e      	movs	r2, #14
    1246:	a806      	add	r0, sp, #24
    1248:	4684      	mov	ip, r0
    124a:	4462      	add	r2, ip
    124c:	0038      	movs	r0, r7
    124e:	4f2a      	ldr	r7, [pc, #168]	; (12f8 <usart_init+0x324>)
    1250:	47b8      	blx	r7
    1252:	e7ea      	b.n	122a <usart_init+0x256>
		if(config->lin_slave_enable) {
    1254:	7ef3      	ldrb	r3, [r6, #27]
    1256:	2b00      	cmp	r3, #0
    1258:	d100      	bne.n	125c <usart_init+0x288>
    125a:	e77d      	b.n	1158 <usart_init+0x184>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    125c:	2380      	movs	r3, #128	; 0x80
    125e:	04db      	lsls	r3, r3, #19
    1260:	431f      	orrs	r7, r3
    1262:	e779      	b.n	1158 <usart_init+0x184>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1264:	0020      	movs	r0, r4
    1266:	4b25      	ldr	r3, [pc, #148]	; (12fc <usart_init+0x328>)
    1268:	4798      	blx	r3
    126a:	e007      	b.n	127c <usart_init+0x2a8>
    126c:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    126e:	2f04      	cmp	r7, #4
    1270:	d00d      	beq.n	128e <usart_init+0x2ba>
    1272:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1274:	00bb      	lsls	r3, r7, #2
    1276:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    1278:	2800      	cmp	r0, #0
    127a:	d0f3      	beq.n	1264 <usart_init+0x290>
		if (current_pinmux != PINMUX_UNUSED) {
    127c:	1c43      	adds	r3, r0, #1
    127e:	d0f5      	beq.n	126c <usart_init+0x298>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1280:	a90e      	add	r1, sp, #56	; 0x38
    1282:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1284:	0c00      	lsrs	r0, r0, #16
    1286:	b2c0      	uxtb	r0, r0
    1288:	4b1d      	ldr	r3, [pc, #116]	; (1300 <usart_init+0x32c>)
    128a:	4798      	blx	r3
    128c:	e7ee      	b.n	126c <usart_init+0x298>
		module->callback[i]            = NULL;
    128e:	2300      	movs	r3, #0
    1290:	60eb      	str	r3, [r5, #12]
    1292:	612b      	str	r3, [r5, #16]
    1294:	616b      	str	r3, [r5, #20]
    1296:	61ab      	str	r3, [r5, #24]
    1298:	61eb      	str	r3, [r5, #28]
    129a:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    129c:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    129e:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    12a0:	2200      	movs	r2, #0
    12a2:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    12a4:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    12a6:	3330      	adds	r3, #48	; 0x30
    12a8:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    12aa:	3301      	adds	r3, #1
    12ac:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    12ae:	3301      	adds	r3, #1
    12b0:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    12b2:	3301      	adds	r3, #1
    12b4:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    12b6:	6828      	ldr	r0, [r5, #0]
    12b8:	4b07      	ldr	r3, [pc, #28]	; (12d8 <usart_init+0x304>)
    12ba:	4798      	blx	r3
    12bc:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    12be:	4911      	ldr	r1, [pc, #68]	; (1304 <usart_init+0x330>)
    12c0:	4b11      	ldr	r3, [pc, #68]	; (1308 <usart_init+0x334>)
    12c2:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    12c4:	00a4      	lsls	r4, r4, #2
    12c6:	4b11      	ldr	r3, [pc, #68]	; (130c <usart_init+0x338>)
    12c8:	50e5      	str	r5, [r4, r3]
	return status_code;
    12ca:	2000      	movs	r0, #0
    12cc:	e695      	b.n	ffa <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    12ce:	2310      	movs	r3, #16
    12d0:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    12d2:	2300      	movs	r3, #0
    12d4:	9307      	str	r3, [sp, #28]
    12d6:	e6ec      	b.n	10b2 <usart_init+0xde>
    12d8:	00000ecd 	.word	0x00000ecd
    12dc:	40000400 	.word	0x40000400
    12e0:	00001c01 	.word	0x00001c01
    12e4:	00001b75 	.word	0x00001b75
    12e8:	00000d09 	.word	0x00000d09
    12ec:	41002000 	.word	0x41002000
    12f0:	00001c1d 	.word	0x00001c1d
    12f4:	00000c4b 	.word	0x00000c4b
    12f8:	00000c75 	.word	0x00000c75
    12fc:	00000d55 	.word	0x00000d55
    1300:	00001cf9 	.word	0x00001cf9
    1304:	00001429 	.word	0x00001429
    1308:	00000f09 	.word	0x00000f09
    130c:	200002b8 	.word	0x200002b8

00001310 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1310:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    1312:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    1314:	2a00      	cmp	r2, #0
    1316:	d101      	bne.n	131c <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    1318:	0018      	movs	r0, r3
    131a:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    131c:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    131e:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    1320:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    1322:	2a00      	cmp	r2, #0
    1324:	d1f8      	bne.n	1318 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    1326:	6802      	ldr	r2, [r0, #0]
	usart_hw->DATA.reg = tx_data;
    1328:	8511      	strh	r1, [r2, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    132a:	2102      	movs	r1, #2
    132c:	7e13      	ldrb	r3, [r2, #24]
    132e:	420b      	tst	r3, r1
    1330:	d0fc      	beq.n	132c <usart_write_wait+0x1c>
	return STATUS_OK;
    1332:	2300      	movs	r3, #0
    1334:	e7f0      	b.n	1318 <usart_write_wait+0x8>

00001336 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    1336:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    1338:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    133a:	2a00      	cmp	r2, #0
    133c:	d101      	bne.n	1342 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    133e:	0018      	movs	r0, r3
    1340:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    1342:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    1344:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    1346:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    1348:	2a00      	cmp	r2, #0
    134a:	d1f8      	bne.n	133e <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    134c:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    134e:	7e10      	ldrb	r0, [r2, #24]
    1350:	0740      	lsls	r0, r0, #29
    1352:	d5f4      	bpl.n	133e <usart_read_wait+0x8>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1354:	8b53      	ldrh	r3, [r2, #26]
    1356:	b2db      	uxtb	r3, r3
	if (error_code) {
    1358:	0698      	lsls	r0, r3, #26
    135a:	d01d      	beq.n	1398 <usart_read_wait+0x62>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    135c:	0798      	lsls	r0, r3, #30
    135e:	d503      	bpl.n	1368 <usart_read_wait+0x32>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1360:	2302      	movs	r3, #2
    1362:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    1364:	3318      	adds	r3, #24
    1366:	e7ea      	b.n	133e <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1368:	0758      	lsls	r0, r3, #29
    136a:	d503      	bpl.n	1374 <usart_read_wait+0x3e>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    136c:	2304      	movs	r3, #4
    136e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    1370:	331a      	adds	r3, #26
    1372:	e7e4      	b.n	133e <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1374:	07d8      	lsls	r0, r3, #31
    1376:	d503      	bpl.n	1380 <usart_read_wait+0x4a>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1378:	2301      	movs	r3, #1
    137a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    137c:	3312      	adds	r3, #18
    137e:	e7de      	b.n	133e <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    1380:	06d8      	lsls	r0, r3, #27
    1382:	d503      	bpl.n	138c <usart_read_wait+0x56>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1384:	2310      	movs	r3, #16
    1386:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    1388:	3332      	adds	r3, #50	; 0x32
    138a:	e7d8      	b.n	133e <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    138c:	069b      	lsls	r3, r3, #26
    138e:	d503      	bpl.n	1398 <usart_read_wait+0x62>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1390:	2320      	movs	r3, #32
    1392:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    1394:	3321      	adds	r3, #33	; 0x21
    1396:	e7d2      	b.n	133e <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    1398:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    139a:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    139c:	2300      	movs	r3, #0
    139e:	e7ce      	b.n	133e <usart_read_wait+0x8>

000013a0 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    13a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    13a2:	0004      	movs	r4, r0
    13a4:	000d      	movs	r5, r1
    13a6:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    13a8:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    13aa:	4b0f      	ldr	r3, [pc, #60]	; (13e8 <_usart_read_buffer+0x48>)
    13ac:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    13ae:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    13b0:	b29b      	uxth	r3, r3
    13b2:	2b00      	cmp	r3, #0
    13b4:	d003      	beq.n	13be <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
    13b6:	4b0d      	ldr	r3, [pc, #52]	; (13ec <_usart_read_buffer+0x4c>)
    13b8:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    13ba:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    13bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    13be:	85a6      	strh	r6, [r4, #44]	; 0x2c
    13c0:	4b0a      	ldr	r3, [pc, #40]	; (13ec <_usart_read_buffer+0x4c>)
    13c2:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    13c4:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    13c6:	2205      	movs	r2, #5
    13c8:	2332      	movs	r3, #50	; 0x32
    13ca:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    13cc:	3b2e      	subs	r3, #46	; 0x2e
    13ce:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
    13d0:	7a23      	ldrb	r3, [r4, #8]
    13d2:	2b00      	cmp	r3, #0
    13d4:	d001      	beq.n	13da <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    13d6:	2320      	movs	r3, #32
    13d8:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
    13da:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
    13dc:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
    13de:	2b00      	cmp	r3, #0
    13e0:	d0ec      	beq.n	13bc <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    13e2:	2308      	movs	r3, #8
    13e4:	75bb      	strb	r3, [r7, #22]
    13e6:	e7e9      	b.n	13bc <_usart_read_buffer+0x1c>
    13e8:	00000595 	.word	0x00000595
    13ec:	000005d5 	.word	0x000005d5

000013f0 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    13f0:	1c93      	adds	r3, r2, #2
    13f2:	009b      	lsls	r3, r3, #2
    13f4:	18c3      	adds	r3, r0, r3
    13f6:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    13f8:	2130      	movs	r1, #48	; 0x30
    13fa:	2301      	movs	r3, #1
    13fc:	4093      	lsls	r3, r2
    13fe:	001a      	movs	r2, r3
    1400:	5c43      	ldrb	r3, [r0, r1]
    1402:	4313      	orrs	r3, r2
    1404:	5443      	strb	r3, [r0, r1]
}
    1406:	4770      	bx	lr

00001408 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    1408:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    140a:	2317      	movs	r3, #23
	if (length == 0) {
    140c:	2a00      	cmp	r2, #0
    140e:	d101      	bne.n	1414 <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
    1410:	0018      	movs	r0, r3
    1412:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
    1414:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
    1416:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
    1418:	2c00      	cmp	r4, #0
    141a:	d0f9      	beq.n	1410 <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
    141c:	4b01      	ldr	r3, [pc, #4]	; (1424 <usart_read_buffer_job+0x1c>)
    141e:	4798      	blx	r3
    1420:	0003      	movs	r3, r0
    1422:	e7f5      	b.n	1410 <usart_read_buffer_job+0x8>
    1424:	000013a1 	.word	0x000013a1

00001428 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    1428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    142a:	0080      	lsls	r0, r0, #2
    142c:	4b62      	ldr	r3, [pc, #392]	; (15b8 <_usart_interrupt_handler+0x190>)
    142e:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    1430:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1432:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    1434:	2b00      	cmp	r3, #0
    1436:	d1fc      	bne.n	1432 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    1438:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    143a:	7da6      	ldrb	r6, [r4, #22]
    143c:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    143e:	2330      	movs	r3, #48	; 0x30
    1440:	5ceb      	ldrb	r3, [r5, r3]
    1442:	2231      	movs	r2, #49	; 0x31
    1444:	5caf      	ldrb	r7, [r5, r2]
    1446:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    1448:	07f3      	lsls	r3, r6, #31
    144a:	d522      	bpl.n	1492 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    144c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    144e:	b29b      	uxth	r3, r3
    1450:	2b00      	cmp	r3, #0
    1452:	d01c      	beq.n	148e <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1454:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    1456:	7813      	ldrb	r3, [r2, #0]
    1458:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    145a:	1c51      	adds	r1, r2, #1
    145c:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    145e:	7969      	ldrb	r1, [r5, #5]
    1460:	2901      	cmp	r1, #1
    1462:	d00e      	beq.n	1482 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1464:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    1466:	05db      	lsls	r3, r3, #23
    1468:	0ddb      	lsrs	r3, r3, #23
    146a:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    146c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    146e:	3b01      	subs	r3, #1
    1470:	b29b      	uxth	r3, r3
    1472:	85eb      	strh	r3, [r5, #46]	; 0x2e
    1474:	2b00      	cmp	r3, #0
    1476:	d10c      	bne.n	1492 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1478:	3301      	adds	r3, #1
    147a:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    147c:	3301      	adds	r3, #1
    147e:	75a3      	strb	r3, [r4, #22]
    1480:	e007      	b.n	1492 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    1482:	7851      	ldrb	r1, [r2, #1]
    1484:	0209      	lsls	r1, r1, #8
    1486:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    1488:	3202      	adds	r2, #2
    148a:	62aa      	str	r2, [r5, #40]	; 0x28
    148c:	e7eb      	b.n	1466 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    148e:	2301      	movs	r3, #1
    1490:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    1492:	07b3      	lsls	r3, r6, #30
    1494:	d506      	bpl.n	14a4 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    1496:	2302      	movs	r3, #2
    1498:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    149a:	2200      	movs	r2, #0
    149c:	3331      	adds	r3, #49	; 0x31
    149e:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    14a0:	07fb      	lsls	r3, r7, #31
    14a2:	d41a      	bmi.n	14da <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    14a4:	0773      	lsls	r3, r6, #29
    14a6:	d565      	bpl.n	1574 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    14a8:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    14aa:	b29b      	uxth	r3, r3
    14ac:	2b00      	cmp	r3, #0
    14ae:	d05f      	beq.n	1570 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    14b0:	8b63      	ldrh	r3, [r4, #26]
    14b2:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    14b4:	071a      	lsls	r2, r3, #28
    14b6:	d414      	bmi.n	14e2 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    14b8:	223f      	movs	r2, #63	; 0x3f
    14ba:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    14bc:	2b00      	cmp	r3, #0
    14be:	d034      	beq.n	152a <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    14c0:	079a      	lsls	r2, r3, #30
    14c2:	d511      	bpl.n	14e8 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    14c4:	221a      	movs	r2, #26
    14c6:	2332      	movs	r3, #50	; 0x32
    14c8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    14ca:	3b30      	subs	r3, #48	; 0x30
    14cc:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    14ce:	077b      	lsls	r3, r7, #29
    14d0:	d550      	bpl.n	1574 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    14d2:	0028      	movs	r0, r5
    14d4:	696b      	ldr	r3, [r5, #20]
    14d6:	4798      	blx	r3
    14d8:	e04c      	b.n	1574 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    14da:	0028      	movs	r0, r5
    14dc:	68eb      	ldr	r3, [r5, #12]
    14de:	4798      	blx	r3
    14e0:	e7e0      	b.n	14a4 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    14e2:	2237      	movs	r2, #55	; 0x37
    14e4:	4013      	ands	r3, r2
    14e6:	e7e9      	b.n	14bc <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    14e8:	075a      	lsls	r2, r3, #29
    14ea:	d505      	bpl.n	14f8 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    14ec:	221e      	movs	r2, #30
    14ee:	2332      	movs	r3, #50	; 0x32
    14f0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    14f2:	3b2e      	subs	r3, #46	; 0x2e
    14f4:	8363      	strh	r3, [r4, #26]
    14f6:	e7ea      	b.n	14ce <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    14f8:	07da      	lsls	r2, r3, #31
    14fa:	d505      	bpl.n	1508 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    14fc:	2213      	movs	r2, #19
    14fe:	2332      	movs	r3, #50	; 0x32
    1500:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1502:	3b31      	subs	r3, #49	; 0x31
    1504:	8363      	strh	r3, [r4, #26]
    1506:	e7e2      	b.n	14ce <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    1508:	06da      	lsls	r2, r3, #27
    150a:	d505      	bpl.n	1518 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    150c:	2242      	movs	r2, #66	; 0x42
    150e:	2332      	movs	r3, #50	; 0x32
    1510:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1512:	3b22      	subs	r3, #34	; 0x22
    1514:	8363      	strh	r3, [r4, #26]
    1516:	e7da      	b.n	14ce <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    1518:	2220      	movs	r2, #32
    151a:	421a      	tst	r2, r3
    151c:	d0d7      	beq.n	14ce <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    151e:	3221      	adds	r2, #33	; 0x21
    1520:	2332      	movs	r3, #50	; 0x32
    1522:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1524:	3b12      	subs	r3, #18
    1526:	8363      	strh	r3, [r4, #26]
    1528:	e7d1      	b.n	14ce <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    152a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    152c:	05db      	lsls	r3, r3, #23
    152e:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    1530:	b2da      	uxtb	r2, r3
    1532:	6a69      	ldr	r1, [r5, #36]	; 0x24
    1534:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    1536:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    1538:	1c51      	adds	r1, r2, #1
    153a:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    153c:	7969      	ldrb	r1, [r5, #5]
    153e:	2901      	cmp	r1, #1
    1540:	d010      	beq.n	1564 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    1542:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1544:	3b01      	subs	r3, #1
    1546:	b29b      	uxth	r3, r3
    1548:	85ab      	strh	r3, [r5, #44]	; 0x2c
    154a:	2b00      	cmp	r3, #0
    154c:	d112      	bne.n	1574 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    154e:	3304      	adds	r3, #4
    1550:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    1552:	2200      	movs	r2, #0
    1554:	332e      	adds	r3, #46	; 0x2e
    1556:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    1558:	07bb      	lsls	r3, r7, #30
    155a:	d50b      	bpl.n	1574 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    155c:	0028      	movs	r0, r5
    155e:	692b      	ldr	r3, [r5, #16]
    1560:	4798      	blx	r3
    1562:	e007      	b.n	1574 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    1564:	0a1b      	lsrs	r3, r3, #8
    1566:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    1568:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    156a:	3301      	adds	r3, #1
    156c:	626b      	str	r3, [r5, #36]	; 0x24
    156e:	e7e8      	b.n	1542 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1570:	2304      	movs	r3, #4
    1572:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    1574:	06f3      	lsls	r3, r6, #27
    1576:	d504      	bpl.n	1582 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    1578:	2310      	movs	r3, #16
    157a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    157c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    157e:	06fb      	lsls	r3, r7, #27
    1580:	d40e      	bmi.n	15a0 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    1582:	06b3      	lsls	r3, r6, #26
    1584:	d504      	bpl.n	1590 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    1586:	2320      	movs	r3, #32
    1588:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    158a:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    158c:	073b      	lsls	r3, r7, #28
    158e:	d40b      	bmi.n	15a8 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    1590:	0733      	lsls	r3, r6, #28
    1592:	d504      	bpl.n	159e <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    1594:	2308      	movs	r3, #8
    1596:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    1598:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    159a:	06bb      	lsls	r3, r7, #26
    159c:	d408      	bmi.n	15b0 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    159e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    15a0:	0028      	movs	r0, r5
    15a2:	69eb      	ldr	r3, [r5, #28]
    15a4:	4798      	blx	r3
    15a6:	e7ec      	b.n	1582 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    15a8:	0028      	movs	r0, r5
    15aa:	69ab      	ldr	r3, [r5, #24]
    15ac:	4798      	blx	r3
    15ae:	e7ef      	b.n	1590 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    15b0:	6a2b      	ldr	r3, [r5, #32]
    15b2:	0028      	movs	r0, r5
    15b4:	4798      	blx	r3
}
    15b6:	e7f2      	b.n	159e <_usart_interrupt_handler+0x176>
    15b8:	200002b8 	.word	0x200002b8

000015bc <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    15bc:	b510      	push	{r4, lr}
	switch (clock_source) {
    15be:	2808      	cmp	r0, #8
    15c0:	d803      	bhi.n	15ca <system_clock_source_get_hz+0xe>
    15c2:	0080      	lsls	r0, r0, #2
    15c4:	4b1c      	ldr	r3, [pc, #112]	; (1638 <system_clock_source_get_hz+0x7c>)
    15c6:	581b      	ldr	r3, [r3, r0]
    15c8:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    15ca:	2000      	movs	r0, #0
    15cc:	e032      	b.n	1634 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    15ce:	4b1b      	ldr	r3, [pc, #108]	; (163c <system_clock_source_get_hz+0x80>)
    15d0:	6918      	ldr	r0, [r3, #16]
    15d2:	e02f      	b.n	1634 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    15d4:	4b1a      	ldr	r3, [pc, #104]	; (1640 <system_clock_source_get_hz+0x84>)
    15d6:	6a1b      	ldr	r3, [r3, #32]
    15d8:	059b      	lsls	r3, r3, #22
    15da:	0f9b      	lsrs	r3, r3, #30
    15dc:	4819      	ldr	r0, [pc, #100]	; (1644 <system_clock_source_get_hz+0x88>)
    15de:	40d8      	lsrs	r0, r3
    15e0:	e028      	b.n	1634 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    15e2:	4b16      	ldr	r3, [pc, #88]	; (163c <system_clock_source_get_hz+0x80>)
    15e4:	6958      	ldr	r0, [r3, #20]
    15e6:	e025      	b.n	1634 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    15e8:	4b14      	ldr	r3, [pc, #80]	; (163c <system_clock_source_get_hz+0x80>)
    15ea:	681b      	ldr	r3, [r3, #0]
			return 0;
    15ec:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    15ee:	079b      	lsls	r3, r3, #30
    15f0:	d520      	bpl.n	1634 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    15f2:	4913      	ldr	r1, [pc, #76]	; (1640 <system_clock_source_get_hz+0x84>)
    15f4:	2210      	movs	r2, #16
    15f6:	68cb      	ldr	r3, [r1, #12]
    15f8:	421a      	tst	r2, r3
    15fa:	d0fc      	beq.n	15f6 <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    15fc:	4b0f      	ldr	r3, [pc, #60]	; (163c <system_clock_source_get_hz+0x80>)
    15fe:	681a      	ldr	r2, [r3, #0]
    1600:	2324      	movs	r3, #36	; 0x24
    1602:	4013      	ands	r3, r2
    1604:	2b04      	cmp	r3, #4
    1606:	d001      	beq.n	160c <system_clock_source_get_hz+0x50>
			return 48000000UL;
    1608:	480f      	ldr	r0, [pc, #60]	; (1648 <system_clock_source_get_hz+0x8c>)
    160a:	e013      	b.n	1634 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    160c:	2000      	movs	r0, #0
    160e:	4b0f      	ldr	r3, [pc, #60]	; (164c <system_clock_source_get_hz+0x90>)
    1610:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    1612:	4b0a      	ldr	r3, [pc, #40]	; (163c <system_clock_source_get_hz+0x80>)
    1614:	689b      	ldr	r3, [r3, #8]
    1616:	041b      	lsls	r3, r3, #16
    1618:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    161a:	4358      	muls	r0, r3
    161c:	e00a      	b.n	1634 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    161e:	2350      	movs	r3, #80	; 0x50
    1620:	4a07      	ldr	r2, [pc, #28]	; (1640 <system_clock_source_get_hz+0x84>)
    1622:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    1624:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1626:	075b      	lsls	r3, r3, #29
    1628:	d504      	bpl.n	1634 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    162a:	4b04      	ldr	r3, [pc, #16]	; (163c <system_clock_source_get_hz+0x80>)
    162c:	68d8      	ldr	r0, [r3, #12]
    162e:	e001      	b.n	1634 <system_clock_source_get_hz+0x78>
		return 32768UL;
    1630:	2080      	movs	r0, #128	; 0x80
    1632:	0200      	lsls	r0, r0, #8
	}
}
    1634:	bd10      	pop	{r4, pc}
    1636:	46c0      	nop			; (mov r8, r8)
    1638:	00004c78 	.word	0x00004c78
    163c:	2000027c 	.word	0x2000027c
    1640:	40000800 	.word	0x40000800
    1644:	007a1200 	.word	0x007a1200
    1648:	02dc6c00 	.word	0x02dc6c00
    164c:	00001c1d 	.word	0x00001c1d

00001650 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1650:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1652:	490c      	ldr	r1, [pc, #48]	; (1684 <system_clock_source_osc8m_set_config+0x34>)
    1654:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    1656:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1658:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    165a:	7840      	ldrb	r0, [r0, #1]
    165c:	2201      	movs	r2, #1
    165e:	4010      	ands	r0, r2
    1660:	0180      	lsls	r0, r0, #6
    1662:	2640      	movs	r6, #64	; 0x40
    1664:	43b3      	bics	r3, r6
    1666:	4303      	orrs	r3, r0
    1668:	402a      	ands	r2, r5
    166a:	01d2      	lsls	r2, r2, #7
    166c:	2080      	movs	r0, #128	; 0x80
    166e:	4383      	bics	r3, r0
    1670:	4313      	orrs	r3, r2
    1672:	2203      	movs	r2, #3
    1674:	4022      	ands	r2, r4
    1676:	0212      	lsls	r2, r2, #8
    1678:	4803      	ldr	r0, [pc, #12]	; (1688 <system_clock_source_osc8m_set_config+0x38>)
    167a:	4003      	ands	r3, r0
    167c:	4313      	orrs	r3, r2
    167e:	620b      	str	r3, [r1, #32]
}
    1680:	bd70      	pop	{r4, r5, r6, pc}
    1682:	46c0      	nop			; (mov r8, r8)
    1684:	40000800 	.word	0x40000800
    1688:	fffffcff 	.word	0xfffffcff

0000168c <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    168c:	b5f0      	push	{r4, r5, r6, r7, lr}
    168e:	46de      	mov	lr, fp
    1690:	4657      	mov	r7, sl
    1692:	464e      	mov	r6, r9
    1694:	4645      	mov	r5, r8
    1696:	b5e0      	push	{r5, r6, r7, lr}
    1698:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    169a:	4b26      	ldr	r3, [pc, #152]	; (1734 <system_clock_source_xosc32k_set_config+0xa8>)
    169c:	469b      	mov	fp, r3
    169e:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    16a0:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    16a2:	7800      	ldrb	r0, [r0, #0]
    16a4:	4242      	negs	r2, r0
    16a6:	4142      	adcs	r2, r0
    16a8:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    16aa:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    16ac:	78ca      	ldrb	r2, [r1, #3]
    16ae:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    16b0:	790a      	ldrb	r2, [r1, #4]
    16b2:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    16b4:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    16b6:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    16b8:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    16ba:	688a      	ldr	r2, [r1, #8]
    16bc:	491e      	ldr	r1, [pc, #120]	; (1738 <system_clock_source_xosc32k_set_config+0xac>)
    16be:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    16c0:	2101      	movs	r1, #1
    16c2:	464a      	mov	r2, r9
    16c4:	0092      	lsls	r2, r2, #2
    16c6:	4691      	mov	r9, r2
    16c8:	2204      	movs	r2, #4
    16ca:	4393      	bics	r3, r2
    16cc:	464a      	mov	r2, r9
    16ce:	4313      	orrs	r3, r2
    16d0:	4642      	mov	r2, r8
    16d2:	400a      	ands	r2, r1
    16d4:	00d2      	lsls	r2, r2, #3
    16d6:	4690      	mov	r8, r2
    16d8:	2208      	movs	r2, #8
    16da:	4393      	bics	r3, r2
    16dc:	4642      	mov	r2, r8
    16de:	4313      	orrs	r3, r2
    16e0:	4662      	mov	r2, ip
    16e2:	400a      	ands	r2, r1
    16e4:	0112      	lsls	r2, r2, #4
    16e6:	4694      	mov	ip, r2
    16e8:	2210      	movs	r2, #16
    16ea:	4393      	bics	r3, r2
    16ec:	4662      	mov	r2, ip
    16ee:	4313      	orrs	r3, r2
    16f0:	4008      	ands	r0, r1
    16f2:	0140      	lsls	r0, r0, #5
    16f4:	2220      	movs	r2, #32
    16f6:	4393      	bics	r3, r2
    16f8:	4303      	orrs	r3, r0
    16fa:	400f      	ands	r7, r1
    16fc:	01bf      	lsls	r7, r7, #6
    16fe:	2040      	movs	r0, #64	; 0x40
    1700:	4383      	bics	r3, r0
    1702:	433b      	orrs	r3, r7
    1704:	400e      	ands	r6, r1
    1706:	01f6      	lsls	r6, r6, #7
    1708:	3040      	adds	r0, #64	; 0x40
    170a:	4383      	bics	r3, r0
    170c:	4333      	orrs	r3, r6
    170e:	3879      	subs	r0, #121	; 0x79
    1710:	4005      	ands	r5, r0
    1712:	022d      	lsls	r5, r5, #8
    1714:	4809      	ldr	r0, [pc, #36]	; (173c <system_clock_source_xosc32k_set_config+0xb0>)
    1716:	4003      	ands	r3, r0
    1718:	432b      	orrs	r3, r5
    171a:	4021      	ands	r1, r4
    171c:	0309      	lsls	r1, r1, #12
    171e:	4808      	ldr	r0, [pc, #32]	; (1740 <system_clock_source_xosc32k_set_config+0xb4>)
    1720:	4003      	ands	r3, r0
    1722:	430b      	orrs	r3, r1
    1724:	465a      	mov	r2, fp
    1726:	8293      	strh	r3, [r2, #20]
}
    1728:	bc3c      	pop	{r2, r3, r4, r5}
    172a:	4690      	mov	r8, r2
    172c:	4699      	mov	r9, r3
    172e:	46a2      	mov	sl, r4
    1730:	46ab      	mov	fp, r5
    1732:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1734:	40000800 	.word	0x40000800
    1738:	2000027c 	.word	0x2000027c
    173c:	fffff8ff 	.word	0xfffff8ff
    1740:	ffffefff 	.word	0xffffefff

00001744 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    1744:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1746:	7a03      	ldrb	r3, [r0, #8]
    1748:	069b      	lsls	r3, r3, #26
    174a:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    174c:	8942      	ldrh	r2, [r0, #10]
    174e:	0592      	lsls	r2, r2, #22
    1750:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1752:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    1754:	4918      	ldr	r1, [pc, #96]	; (17b8 <system_clock_source_dfll_set_config+0x74>)
    1756:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    1758:	7983      	ldrb	r3, [r0, #6]
    175a:	79c2      	ldrb	r2, [r0, #7]
    175c:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    175e:	8842      	ldrh	r2, [r0, #2]
    1760:	8884      	ldrh	r4, [r0, #4]
    1762:	4322      	orrs	r2, r4
    1764:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    1766:	7842      	ldrb	r2, [r0, #1]
    1768:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    176a:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    176c:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    176e:	7803      	ldrb	r3, [r0, #0]
    1770:	2b04      	cmp	r3, #4
    1772:	d011      	beq.n	1798 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    1774:	2b20      	cmp	r3, #32
    1776:	d10e      	bne.n	1796 <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1778:	7b03      	ldrb	r3, [r0, #12]
    177a:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    177c:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    177e:	4313      	orrs	r3, r2
    1780:	89c2      	ldrh	r2, [r0, #14]
    1782:	0412      	lsls	r2, r2, #16
    1784:	490d      	ldr	r1, [pc, #52]	; (17bc <system_clock_source_dfll_set_config+0x78>)
    1786:	400a      	ands	r2, r1
    1788:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    178a:	4a0b      	ldr	r2, [pc, #44]	; (17b8 <system_clock_source_dfll_set_config+0x74>)
    178c:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    178e:	6811      	ldr	r1, [r2, #0]
    1790:	4b0b      	ldr	r3, [pc, #44]	; (17c0 <system_clock_source_dfll_set_config+0x7c>)
    1792:	430b      	orrs	r3, r1
    1794:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    1796:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1798:	7b03      	ldrb	r3, [r0, #12]
    179a:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    179c:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    179e:	4313      	orrs	r3, r2
    17a0:	89c2      	ldrh	r2, [r0, #14]
    17a2:	0412      	lsls	r2, r2, #16
    17a4:	4905      	ldr	r1, [pc, #20]	; (17bc <system_clock_source_dfll_set_config+0x78>)
    17a6:	400a      	ands	r2, r1
    17a8:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    17aa:	4a03      	ldr	r2, [pc, #12]	; (17b8 <system_clock_source_dfll_set_config+0x74>)
    17ac:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    17ae:	6813      	ldr	r3, [r2, #0]
    17b0:	2104      	movs	r1, #4
    17b2:	430b      	orrs	r3, r1
    17b4:	6013      	str	r3, [r2, #0]
    17b6:	e7ee      	b.n	1796 <system_clock_source_dfll_set_config+0x52>
    17b8:	2000027c 	.word	0x2000027c
    17bc:	03ff0000 	.word	0x03ff0000
    17c0:	00000424 	.word	0x00000424

000017c4 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    17c4:	2808      	cmp	r0, #8
    17c6:	d803      	bhi.n	17d0 <system_clock_source_enable+0xc>
    17c8:	0080      	lsls	r0, r0, #2
    17ca:	4b25      	ldr	r3, [pc, #148]	; (1860 <system_clock_source_enable+0x9c>)
    17cc:	581b      	ldr	r3, [r3, r0]
    17ce:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    17d0:	2017      	movs	r0, #23
    17d2:	e044      	b.n	185e <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    17d4:	4a23      	ldr	r2, [pc, #140]	; (1864 <system_clock_source_enable+0xa0>)
    17d6:	6a13      	ldr	r3, [r2, #32]
    17d8:	2102      	movs	r1, #2
    17da:	430b      	orrs	r3, r1
    17dc:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    17de:	2000      	movs	r0, #0
    17e0:	e03d      	b.n	185e <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    17e2:	4a20      	ldr	r2, [pc, #128]	; (1864 <system_clock_source_enable+0xa0>)
    17e4:	6993      	ldr	r3, [r2, #24]
    17e6:	2102      	movs	r1, #2
    17e8:	430b      	orrs	r3, r1
    17ea:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    17ec:	2000      	movs	r0, #0
		break;
    17ee:	e036      	b.n	185e <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    17f0:	4a1c      	ldr	r2, [pc, #112]	; (1864 <system_clock_source_enable+0xa0>)
    17f2:	8a13      	ldrh	r3, [r2, #16]
    17f4:	2102      	movs	r1, #2
    17f6:	430b      	orrs	r3, r1
    17f8:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    17fa:	2000      	movs	r0, #0
		break;
    17fc:	e02f      	b.n	185e <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    17fe:	4a19      	ldr	r2, [pc, #100]	; (1864 <system_clock_source_enable+0xa0>)
    1800:	8a93      	ldrh	r3, [r2, #20]
    1802:	2102      	movs	r1, #2
    1804:	430b      	orrs	r3, r1
    1806:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    1808:	2000      	movs	r0, #0
		break;
    180a:	e028      	b.n	185e <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    180c:	4916      	ldr	r1, [pc, #88]	; (1868 <system_clock_source_enable+0xa4>)
    180e:	680b      	ldr	r3, [r1, #0]
    1810:	2202      	movs	r2, #2
    1812:	4313      	orrs	r3, r2
    1814:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1816:	4b13      	ldr	r3, [pc, #76]	; (1864 <system_clock_source_enable+0xa0>)
    1818:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    181a:	0019      	movs	r1, r3
    181c:	320e      	adds	r2, #14
    181e:	68cb      	ldr	r3, [r1, #12]
    1820:	421a      	tst	r2, r3
    1822:	d0fc      	beq.n	181e <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1824:	4a10      	ldr	r2, [pc, #64]	; (1868 <system_clock_source_enable+0xa4>)
    1826:	6891      	ldr	r1, [r2, #8]
    1828:	4b0e      	ldr	r3, [pc, #56]	; (1864 <system_clock_source_enable+0xa0>)
    182a:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    182c:	6852      	ldr	r2, [r2, #4]
    182e:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    1830:	2200      	movs	r2, #0
    1832:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1834:	0019      	movs	r1, r3
    1836:	3210      	adds	r2, #16
    1838:	68cb      	ldr	r3, [r1, #12]
    183a:	421a      	tst	r2, r3
    183c:	d0fc      	beq.n	1838 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    183e:	4b0a      	ldr	r3, [pc, #40]	; (1868 <system_clock_source_enable+0xa4>)
    1840:	681b      	ldr	r3, [r3, #0]
    1842:	b29b      	uxth	r3, r3
    1844:	4a07      	ldr	r2, [pc, #28]	; (1864 <system_clock_source_enable+0xa0>)
    1846:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    1848:	2000      	movs	r0, #0
    184a:	e008      	b.n	185e <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    184c:	4905      	ldr	r1, [pc, #20]	; (1864 <system_clock_source_enable+0xa0>)
    184e:	2244      	movs	r2, #68	; 0x44
    1850:	5c8b      	ldrb	r3, [r1, r2]
    1852:	2002      	movs	r0, #2
    1854:	4303      	orrs	r3, r0
    1856:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    1858:	2000      	movs	r0, #0
		break;
    185a:	e000      	b.n	185e <system_clock_source_enable+0x9a>
		return STATUS_OK;
    185c:	2000      	movs	r0, #0
}
    185e:	4770      	bx	lr
    1860:	00004c9c 	.word	0x00004c9c
    1864:	40000800 	.word	0x40000800
    1868:	2000027c 	.word	0x2000027c

0000186c <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    186c:	b5f0      	push	{r4, r5, r6, r7, lr}
    186e:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1870:	22c2      	movs	r2, #194	; 0xc2
    1872:	00d2      	lsls	r2, r2, #3
    1874:	4b47      	ldr	r3, [pc, #284]	; (1994 <system_clock_init+0x128>)
    1876:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1878:	4947      	ldr	r1, [pc, #284]	; (1998 <system_clock_init+0x12c>)
    187a:	684b      	ldr	r3, [r1, #4]
    187c:	221e      	movs	r2, #30
    187e:	4393      	bics	r3, r2
    1880:	3a1c      	subs	r2, #28
    1882:	4313      	orrs	r3, r2
    1884:	604b      	str	r3, [r1, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    1886:	ab01      	add	r3, sp, #4
    1888:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    188a:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    188c:	4d43      	ldr	r5, [pc, #268]	; (199c <system_clock_init+0x130>)
    188e:	b2e0      	uxtb	r0, r4
    1890:	a901      	add	r1, sp, #4
    1892:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1894:	3401      	adds	r4, #1
    1896:	2c25      	cmp	r4, #37	; 0x25
    1898:	d1f9      	bne.n	188e <system_clock_init+0x22>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    189a:	a80a      	add	r0, sp, #40	; 0x28
    189c:	2300      	movs	r3, #0
    189e:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    18a0:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    18a2:	2280      	movs	r2, #128	; 0x80
    18a4:	0212      	lsls	r2, r2, #8
    18a6:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    18a8:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    18aa:	2201      	movs	r2, #1
    18ac:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    18ae:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    18b0:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    18b2:	3205      	adds	r2, #5
    18b4:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    18b6:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    18b8:	4b39      	ldr	r3, [pc, #228]	; (19a0 <system_clock_init+0x134>)
    18ba:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    18bc:	2005      	movs	r0, #5
    18be:	4b39      	ldr	r3, [pc, #228]	; (19a4 <system_clock_init+0x138>)
    18c0:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    18c2:	4934      	ldr	r1, [pc, #208]	; (1994 <system_clock_init+0x128>)
    18c4:	2202      	movs	r2, #2
    18c6:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    18c8:	421a      	tst	r2, r3
    18ca:	d0fc      	beq.n	18c6 <system_clock_init+0x5a>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    18cc:	4a31      	ldr	r2, [pc, #196]	; (1994 <system_clock_init+0x128>)
    18ce:	8a93      	ldrh	r3, [r2, #20]
    18d0:	2180      	movs	r1, #128	; 0x80
    18d2:	430b      	orrs	r3, r1
    18d4:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    18d6:	ab05      	add	r3, sp, #20
    18d8:	2100      	movs	r1, #0
    18da:	2200      	movs	r2, #0
    18dc:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    18de:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    18e0:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    18e2:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    18e4:	313f      	adds	r1, #63	; 0x3f
    18e6:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    18e8:	393b      	subs	r1, #59	; 0x3b
    18ea:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    18ec:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    18ee:	4b2e      	ldr	r3, [pc, #184]	; (19a8 <system_clock_init+0x13c>)
    18f0:	681b      	ldr	r3, [r3, #0]
    18f2:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    18f4:	2b3f      	cmp	r3, #63	; 0x3f
    18f6:	d04b      	beq.n	1990 <system_clock_init+0x124>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    18f8:	a805      	add	r0, sp, #20
    18fa:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    18fc:	23b7      	movs	r3, #183	; 0xb7
    18fe:	00db      	lsls	r3, r3, #3
    1900:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    1902:	2307      	movs	r3, #7
    1904:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    1906:	3338      	adds	r3, #56	; 0x38
    1908:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    190a:	4b28      	ldr	r3, [pc, #160]	; (19ac <system_clock_init+0x140>)
    190c:	4798      	blx	r3
	config->run_in_standby  = false;
    190e:	a804      	add	r0, sp, #16
    1910:	2500      	movs	r5, #0
    1912:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    1914:	2601      	movs	r6, #1
    1916:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1918:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    191a:	4b25      	ldr	r3, [pc, #148]	; (19b0 <system_clock_init+0x144>)
    191c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    191e:	2006      	movs	r0, #6
    1920:	4f20      	ldr	r7, [pc, #128]	; (19a4 <system_clock_init+0x138>)
    1922:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1924:	4b23      	ldr	r3, [pc, #140]	; (19b4 <system_clock_init+0x148>)
    1926:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1928:	ac01      	add	r4, sp, #4
    192a:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    192c:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    192e:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    1930:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    1932:	2305      	movs	r3, #5
    1934:	7023      	strb	r3, [r4, #0]
    1936:	0021      	movs	r1, r4
    1938:	2001      	movs	r0, #1
    193a:	4b1f      	ldr	r3, [pc, #124]	; (19b8 <system_clock_init+0x14c>)
    193c:	4798      	blx	r3
    193e:	2001      	movs	r0, #1
    1940:	4b1e      	ldr	r3, [pc, #120]	; (19bc <system_clock_init+0x150>)
    1942:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    1944:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    1946:	0021      	movs	r1, r4
    1948:	2000      	movs	r0, #0
    194a:	4b14      	ldr	r3, [pc, #80]	; (199c <system_clock_init+0x130>)
    194c:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    194e:	2000      	movs	r0, #0
    1950:	4b1b      	ldr	r3, [pc, #108]	; (19c0 <system_clock_init+0x154>)
    1952:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    1954:	2007      	movs	r0, #7
    1956:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1958:	490e      	ldr	r1, [pc, #56]	; (1994 <system_clock_init+0x128>)
    195a:	22d0      	movs	r2, #208	; 0xd0
    195c:	68cb      	ldr	r3, [r1, #12]
    195e:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    1960:	2bd0      	cmp	r3, #208	; 0xd0
    1962:	d1fb      	bne.n	195c <system_clock_init+0xf0>
	PM->CPUSEL.reg = (uint32_t)divider;
    1964:	4a17      	ldr	r2, [pc, #92]	; (19c4 <system_clock_init+0x158>)
    1966:	2300      	movs	r3, #0
    1968:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    196a:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    196c:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    196e:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    1970:	a901      	add	r1, sp, #4
    1972:	2201      	movs	r2, #1
    1974:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    1976:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    1978:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    197a:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    197c:	3307      	adds	r3, #7
    197e:	700b      	strb	r3, [r1, #0]
    1980:	2000      	movs	r0, #0
    1982:	4b0d      	ldr	r3, [pc, #52]	; (19b8 <system_clock_init+0x14c>)
    1984:	4798      	blx	r3
    1986:	2000      	movs	r0, #0
    1988:	4b0c      	ldr	r3, [pc, #48]	; (19bc <system_clock_init+0x150>)
    198a:	4798      	blx	r3
#endif
}
    198c:	b00f      	add	sp, #60	; 0x3c
    198e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    1990:	3b20      	subs	r3, #32
    1992:	e7b1      	b.n	18f8 <system_clock_init+0x8c>
    1994:	40000800 	.word	0x40000800
    1998:	41004000 	.word	0x41004000
    199c:	00001c01 	.word	0x00001c01
    19a0:	0000168d 	.word	0x0000168d
    19a4:	000017c5 	.word	0x000017c5
    19a8:	00806024 	.word	0x00806024
    19ac:	00001745 	.word	0x00001745
    19b0:	00001651 	.word	0x00001651
    19b4:	000019c9 	.word	0x000019c9
    19b8:	000019ed 	.word	0x000019ed
    19bc:	00001aa5 	.word	0x00001aa5
    19c0:	00001b75 	.word	0x00001b75
    19c4:	40000400 	.word	0x40000400

000019c8 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    19c8:	4a06      	ldr	r2, [pc, #24]	; (19e4 <system_gclk_init+0x1c>)
    19ca:	6993      	ldr	r3, [r2, #24]
    19cc:	2108      	movs	r1, #8
    19ce:	430b      	orrs	r3, r1
    19d0:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    19d2:	2201      	movs	r2, #1
    19d4:	4b04      	ldr	r3, [pc, #16]	; (19e8 <system_gclk_init+0x20>)
    19d6:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    19d8:	0019      	movs	r1, r3
    19da:	780b      	ldrb	r3, [r1, #0]
    19dc:	4213      	tst	r3, r2
    19de:	d1fc      	bne.n	19da <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    19e0:	4770      	bx	lr
    19e2:	46c0      	nop			; (mov r8, r8)
    19e4:	40000400 	.word	0x40000400
    19e8:	40000c00 	.word	0x40000c00

000019ec <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    19ec:	b570      	push	{r4, r5, r6, lr}
    19ee:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    19f0:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    19f2:	780d      	ldrb	r5, [r1, #0]
    19f4:	022d      	lsls	r5, r5, #8
    19f6:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    19f8:	784b      	ldrb	r3, [r1, #1]
    19fa:	2b00      	cmp	r3, #0
    19fc:	d002      	beq.n	1a04 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    19fe:	2380      	movs	r3, #128	; 0x80
    1a00:	02db      	lsls	r3, r3, #11
    1a02:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1a04:	7a4b      	ldrb	r3, [r1, #9]
    1a06:	2b00      	cmp	r3, #0
    1a08:	d002      	beq.n	1a10 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1a0a:	2380      	movs	r3, #128	; 0x80
    1a0c:	031b      	lsls	r3, r3, #12
    1a0e:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1a10:	6848      	ldr	r0, [r1, #4]
    1a12:	2801      	cmp	r0, #1
    1a14:	d910      	bls.n	1a38 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1a16:	1e43      	subs	r3, r0, #1
    1a18:	4218      	tst	r0, r3
    1a1a:	d134      	bne.n	1a86 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1a1c:	2802      	cmp	r0, #2
    1a1e:	d930      	bls.n	1a82 <system_gclk_gen_set_config+0x96>
    1a20:	2302      	movs	r3, #2
    1a22:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1a24:	3201      	adds	r2, #1
						mask <<= 1) {
    1a26:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    1a28:	4298      	cmp	r0, r3
    1a2a:	d8fb      	bhi.n	1a24 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1a2c:	0212      	lsls	r2, r2, #8
    1a2e:	4332      	orrs	r2, r6
    1a30:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1a32:	2380      	movs	r3, #128	; 0x80
    1a34:	035b      	lsls	r3, r3, #13
    1a36:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1a38:	7a0b      	ldrb	r3, [r1, #8]
    1a3a:	2b00      	cmp	r3, #0
    1a3c:	d002      	beq.n	1a44 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1a3e:	2380      	movs	r3, #128	; 0x80
    1a40:	039b      	lsls	r3, r3, #14
    1a42:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1a44:	4a13      	ldr	r2, [pc, #76]	; (1a94 <system_gclk_gen_set_config+0xa8>)
    1a46:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    1a48:	b25b      	sxtb	r3, r3
    1a4a:	2b00      	cmp	r3, #0
    1a4c:	dbfb      	blt.n	1a46 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    1a4e:	4b12      	ldr	r3, [pc, #72]	; (1a98 <system_gclk_gen_set_config+0xac>)
    1a50:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1a52:	4b12      	ldr	r3, [pc, #72]	; (1a9c <system_gclk_gen_set_config+0xb0>)
    1a54:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1a56:	4a0f      	ldr	r2, [pc, #60]	; (1a94 <system_gclk_gen_set_config+0xa8>)
    1a58:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1a5a:	b25b      	sxtb	r3, r3
    1a5c:	2b00      	cmp	r3, #0
    1a5e:	dbfb      	blt.n	1a58 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1a60:	4b0c      	ldr	r3, [pc, #48]	; (1a94 <system_gclk_gen_set_config+0xa8>)
    1a62:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1a64:	001a      	movs	r2, r3
    1a66:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    1a68:	b25b      	sxtb	r3, r3
    1a6a:	2b00      	cmp	r3, #0
    1a6c:	dbfb      	blt.n	1a66 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1a6e:	4a09      	ldr	r2, [pc, #36]	; (1a94 <system_gclk_gen_set_config+0xa8>)
    1a70:	6853      	ldr	r3, [r2, #4]
    1a72:	2180      	movs	r1, #128	; 0x80
    1a74:	0249      	lsls	r1, r1, #9
    1a76:	400b      	ands	r3, r1
    1a78:	431d      	orrs	r5, r3
    1a7a:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    1a7c:	4b08      	ldr	r3, [pc, #32]	; (1aa0 <system_gclk_gen_set_config+0xb4>)
    1a7e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1a80:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    1a82:	2200      	movs	r2, #0
    1a84:	e7d2      	b.n	1a2c <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1a86:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    1a88:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1a8a:	2380      	movs	r3, #128	; 0x80
    1a8c:	029b      	lsls	r3, r3, #10
    1a8e:	431d      	orrs	r5, r3
    1a90:	e7d2      	b.n	1a38 <system_gclk_gen_set_config+0x4c>
    1a92:	46c0      	nop			; (mov r8, r8)
    1a94:	40000c00 	.word	0x40000c00
    1a98:	00000595 	.word	0x00000595
    1a9c:	40000c08 	.word	0x40000c08
    1aa0:	000005d5 	.word	0x000005d5

00001aa4 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1aa4:	b510      	push	{r4, lr}
    1aa6:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1aa8:	4a0b      	ldr	r2, [pc, #44]	; (1ad8 <system_gclk_gen_enable+0x34>)
    1aaa:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1aac:	b25b      	sxtb	r3, r3
    1aae:	2b00      	cmp	r3, #0
    1ab0:	dbfb      	blt.n	1aaa <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    1ab2:	4b0a      	ldr	r3, [pc, #40]	; (1adc <system_gclk_gen_enable+0x38>)
    1ab4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1ab6:	4b0a      	ldr	r3, [pc, #40]	; (1ae0 <system_gclk_gen_enable+0x3c>)
    1ab8:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1aba:	4a07      	ldr	r2, [pc, #28]	; (1ad8 <system_gclk_gen_enable+0x34>)
    1abc:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1abe:	b25b      	sxtb	r3, r3
    1ac0:	2b00      	cmp	r3, #0
    1ac2:	dbfb      	blt.n	1abc <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1ac4:	4a04      	ldr	r2, [pc, #16]	; (1ad8 <system_gclk_gen_enable+0x34>)
    1ac6:	6851      	ldr	r1, [r2, #4]
    1ac8:	2380      	movs	r3, #128	; 0x80
    1aca:	025b      	lsls	r3, r3, #9
    1acc:	430b      	orrs	r3, r1
    1ace:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    1ad0:	4b04      	ldr	r3, [pc, #16]	; (1ae4 <system_gclk_gen_enable+0x40>)
    1ad2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1ad4:	bd10      	pop	{r4, pc}
    1ad6:	46c0      	nop			; (mov r8, r8)
    1ad8:	40000c00 	.word	0x40000c00
    1adc:	00000595 	.word	0x00000595
    1ae0:	40000c04 	.word	0x40000c04
    1ae4:	000005d5 	.word	0x000005d5

00001ae8 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1ae8:	b570      	push	{r4, r5, r6, lr}
    1aea:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1aec:	4a1a      	ldr	r2, [pc, #104]	; (1b58 <system_gclk_gen_get_hz+0x70>)
    1aee:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1af0:	b25b      	sxtb	r3, r3
    1af2:	2b00      	cmp	r3, #0
    1af4:	dbfb      	blt.n	1aee <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    1af6:	4b19      	ldr	r3, [pc, #100]	; (1b5c <system_gclk_gen_get_hz+0x74>)
    1af8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1afa:	4b19      	ldr	r3, [pc, #100]	; (1b60 <system_gclk_gen_get_hz+0x78>)
    1afc:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1afe:	4a16      	ldr	r2, [pc, #88]	; (1b58 <system_gclk_gen_get_hz+0x70>)
    1b00:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1b02:	b25b      	sxtb	r3, r3
    1b04:	2b00      	cmp	r3, #0
    1b06:	dbfb      	blt.n	1b00 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1b08:	4e13      	ldr	r6, [pc, #76]	; (1b58 <system_gclk_gen_get_hz+0x70>)
    1b0a:	6870      	ldr	r0, [r6, #4]
    1b0c:	04c0      	lsls	r0, r0, #19
    1b0e:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1b10:	4b14      	ldr	r3, [pc, #80]	; (1b64 <system_gclk_gen_get_hz+0x7c>)
    1b12:	4798      	blx	r3
    1b14:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1b16:	4b12      	ldr	r3, [pc, #72]	; (1b60 <system_gclk_gen_get_hz+0x78>)
    1b18:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1b1a:	6876      	ldr	r6, [r6, #4]
    1b1c:	02f6      	lsls	r6, r6, #11
    1b1e:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1b20:	4b11      	ldr	r3, [pc, #68]	; (1b68 <system_gclk_gen_get_hz+0x80>)
    1b22:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1b24:	4a0c      	ldr	r2, [pc, #48]	; (1b58 <system_gclk_gen_get_hz+0x70>)
    1b26:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1b28:	b25b      	sxtb	r3, r3
    1b2a:	2b00      	cmp	r3, #0
    1b2c:	dbfb      	blt.n	1b26 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1b2e:	4b0a      	ldr	r3, [pc, #40]	; (1b58 <system_gclk_gen_get_hz+0x70>)
    1b30:	689c      	ldr	r4, [r3, #8]
    1b32:	0224      	lsls	r4, r4, #8
    1b34:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    1b36:	4b0d      	ldr	r3, [pc, #52]	; (1b6c <system_gclk_gen_get_hz+0x84>)
    1b38:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1b3a:	2e00      	cmp	r6, #0
    1b3c:	d107      	bne.n	1b4e <system_gclk_gen_get_hz+0x66>
    1b3e:	2c01      	cmp	r4, #1
    1b40:	d907      	bls.n	1b52 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    1b42:	0021      	movs	r1, r4
    1b44:	0028      	movs	r0, r5
    1b46:	4b0a      	ldr	r3, [pc, #40]	; (1b70 <system_gclk_gen_get_hz+0x88>)
    1b48:	4798      	blx	r3
    1b4a:	0005      	movs	r5, r0
    1b4c:	e001      	b.n	1b52 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1b4e:	3401      	adds	r4, #1
    1b50:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    1b52:	0028      	movs	r0, r5
    1b54:	bd70      	pop	{r4, r5, r6, pc}
    1b56:	46c0      	nop			; (mov r8, r8)
    1b58:	40000c00 	.word	0x40000c00
    1b5c:	00000595 	.word	0x00000595
    1b60:	40000c04 	.word	0x40000c04
    1b64:	000015bd 	.word	0x000015bd
    1b68:	40000c08 	.word	0x40000c08
    1b6c:	000005d5 	.word	0x000005d5
    1b70:	00003339 	.word	0x00003339

00001b74 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1b74:	b510      	push	{r4, lr}
    1b76:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1b78:	4b06      	ldr	r3, [pc, #24]	; (1b94 <system_gclk_chan_enable+0x20>)
    1b7a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1b7c:	4b06      	ldr	r3, [pc, #24]	; (1b98 <system_gclk_chan_enable+0x24>)
    1b7e:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1b80:	4a06      	ldr	r2, [pc, #24]	; (1b9c <system_gclk_chan_enable+0x28>)
    1b82:	8853      	ldrh	r3, [r2, #2]
    1b84:	2180      	movs	r1, #128	; 0x80
    1b86:	01c9      	lsls	r1, r1, #7
    1b88:	430b      	orrs	r3, r1
    1b8a:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1b8c:	4b04      	ldr	r3, [pc, #16]	; (1ba0 <system_gclk_chan_enable+0x2c>)
    1b8e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1b90:	bd10      	pop	{r4, pc}
    1b92:	46c0      	nop			; (mov r8, r8)
    1b94:	00000595 	.word	0x00000595
    1b98:	40000c02 	.word	0x40000c02
    1b9c:	40000c00 	.word	0x40000c00
    1ba0:	000005d5 	.word	0x000005d5

00001ba4 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1ba4:	b510      	push	{r4, lr}
    1ba6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1ba8:	4b0f      	ldr	r3, [pc, #60]	; (1be8 <system_gclk_chan_disable+0x44>)
    1baa:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1bac:	4b0f      	ldr	r3, [pc, #60]	; (1bec <system_gclk_chan_disable+0x48>)
    1bae:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1bb0:	4a0f      	ldr	r2, [pc, #60]	; (1bf0 <system_gclk_chan_disable+0x4c>)
    1bb2:	8853      	ldrh	r3, [r2, #2]
    1bb4:	051b      	lsls	r3, r3, #20
    1bb6:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1bb8:	8853      	ldrh	r3, [r2, #2]
    1bba:	490e      	ldr	r1, [pc, #56]	; (1bf4 <system_gclk_chan_disable+0x50>)
    1bbc:	400b      	ands	r3, r1
    1bbe:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1bc0:	8853      	ldrh	r3, [r2, #2]
    1bc2:	490d      	ldr	r1, [pc, #52]	; (1bf8 <system_gclk_chan_disable+0x54>)
    1bc4:	400b      	ands	r3, r1
    1bc6:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1bc8:	0011      	movs	r1, r2
    1bca:	2280      	movs	r2, #128	; 0x80
    1bcc:	01d2      	lsls	r2, r2, #7
    1bce:	884b      	ldrh	r3, [r1, #2]
    1bd0:	4213      	tst	r3, r2
    1bd2:	d1fc      	bne.n	1bce <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1bd4:	4906      	ldr	r1, [pc, #24]	; (1bf0 <system_gclk_chan_disable+0x4c>)
    1bd6:	884a      	ldrh	r2, [r1, #2]
    1bd8:	0203      	lsls	r3, r0, #8
    1bda:	4806      	ldr	r0, [pc, #24]	; (1bf4 <system_gclk_chan_disable+0x50>)
    1bdc:	4002      	ands	r2, r0
    1bde:	4313      	orrs	r3, r2
    1be0:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    1be2:	4b06      	ldr	r3, [pc, #24]	; (1bfc <system_gclk_chan_disable+0x58>)
    1be4:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1be6:	bd10      	pop	{r4, pc}
    1be8:	00000595 	.word	0x00000595
    1bec:	40000c02 	.word	0x40000c02
    1bf0:	40000c00 	.word	0x40000c00
    1bf4:	fffff0ff 	.word	0xfffff0ff
    1bf8:	ffffbfff 	.word	0xffffbfff
    1bfc:	000005d5 	.word	0x000005d5

00001c00 <system_gclk_chan_set_config>:
{
    1c00:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1c02:	780c      	ldrb	r4, [r1, #0]
    1c04:	0224      	lsls	r4, r4, #8
    1c06:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    1c08:	4b02      	ldr	r3, [pc, #8]	; (1c14 <system_gclk_chan_set_config+0x14>)
    1c0a:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1c0c:	b2a4      	uxth	r4, r4
    1c0e:	4b02      	ldr	r3, [pc, #8]	; (1c18 <system_gclk_chan_set_config+0x18>)
    1c10:	805c      	strh	r4, [r3, #2]
}
    1c12:	bd10      	pop	{r4, pc}
    1c14:	00001ba5 	.word	0x00001ba5
    1c18:	40000c00 	.word	0x40000c00

00001c1c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1c1c:	b510      	push	{r4, lr}
    1c1e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1c20:	4b06      	ldr	r3, [pc, #24]	; (1c3c <system_gclk_chan_get_hz+0x20>)
    1c22:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1c24:	4b06      	ldr	r3, [pc, #24]	; (1c40 <system_gclk_chan_get_hz+0x24>)
    1c26:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1c28:	4b06      	ldr	r3, [pc, #24]	; (1c44 <system_gclk_chan_get_hz+0x28>)
    1c2a:	885c      	ldrh	r4, [r3, #2]
    1c2c:	0524      	lsls	r4, r4, #20
    1c2e:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    1c30:	4b05      	ldr	r3, [pc, #20]	; (1c48 <system_gclk_chan_get_hz+0x2c>)
    1c32:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1c34:	0020      	movs	r0, r4
    1c36:	4b05      	ldr	r3, [pc, #20]	; (1c4c <system_gclk_chan_get_hz+0x30>)
    1c38:	4798      	blx	r3
}
    1c3a:	bd10      	pop	{r4, pc}
    1c3c:	00000595 	.word	0x00000595
    1c40:	40000c02 	.word	0x40000c02
    1c44:	40000c00 	.word	0x40000c00
    1c48:	000005d5 	.word	0x000005d5
    1c4c:	00001ae9 	.word	0x00001ae9

00001c50 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1c50:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1c52:	78d3      	ldrb	r3, [r2, #3]
    1c54:	2b00      	cmp	r3, #0
    1c56:	d135      	bne.n	1cc4 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1c58:	7813      	ldrb	r3, [r2, #0]
    1c5a:	2b80      	cmp	r3, #128	; 0x80
    1c5c:	d029      	beq.n	1cb2 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1c5e:	061b      	lsls	r3, r3, #24
    1c60:	2480      	movs	r4, #128	; 0x80
    1c62:	0264      	lsls	r4, r4, #9
    1c64:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1c66:	7854      	ldrb	r4, [r2, #1]
    1c68:	2502      	movs	r5, #2
    1c6a:	43ac      	bics	r4, r5
    1c6c:	d106      	bne.n	1c7c <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1c6e:	7894      	ldrb	r4, [r2, #2]
    1c70:	2c00      	cmp	r4, #0
    1c72:	d120      	bne.n	1cb6 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    1c74:	2480      	movs	r4, #128	; 0x80
    1c76:	02a4      	lsls	r4, r4, #10
    1c78:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1c7a:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1c7c:	7854      	ldrb	r4, [r2, #1]
    1c7e:	3c01      	subs	r4, #1
    1c80:	2c01      	cmp	r4, #1
    1c82:	d91c      	bls.n	1cbe <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1c84:	040d      	lsls	r5, r1, #16
    1c86:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1c88:	24a0      	movs	r4, #160	; 0xa0
    1c8a:	05e4      	lsls	r4, r4, #23
    1c8c:	432c      	orrs	r4, r5
    1c8e:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1c90:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1c92:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1c94:	24d0      	movs	r4, #208	; 0xd0
    1c96:	0624      	lsls	r4, r4, #24
    1c98:	432c      	orrs	r4, r5
    1c9a:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1c9c:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1c9e:	78d4      	ldrb	r4, [r2, #3]
    1ca0:	2c00      	cmp	r4, #0
    1ca2:	d122      	bne.n	1cea <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1ca4:	035b      	lsls	r3, r3, #13
    1ca6:	d51c      	bpl.n	1ce2 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1ca8:	7893      	ldrb	r3, [r2, #2]
    1caa:	2b01      	cmp	r3, #1
    1cac:	d01e      	beq.n	1cec <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    1cae:	6141      	str	r1, [r0, #20]
    1cb0:	e017      	b.n	1ce2 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    1cb2:	2300      	movs	r3, #0
    1cb4:	e7d7      	b.n	1c66 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1cb6:	24c0      	movs	r4, #192	; 0xc0
    1cb8:	02e4      	lsls	r4, r4, #11
    1cba:	4323      	orrs	r3, r4
    1cbc:	e7dd      	b.n	1c7a <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1cbe:	4c0d      	ldr	r4, [pc, #52]	; (1cf4 <_system_pinmux_config+0xa4>)
    1cc0:	4023      	ands	r3, r4
    1cc2:	e7df      	b.n	1c84 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    1cc4:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1cc6:	040c      	lsls	r4, r1, #16
    1cc8:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1cca:	23a0      	movs	r3, #160	; 0xa0
    1ccc:	05db      	lsls	r3, r3, #23
    1cce:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1cd0:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1cd2:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1cd4:	23d0      	movs	r3, #208	; 0xd0
    1cd6:	061b      	lsls	r3, r3, #24
    1cd8:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1cda:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    1cdc:	78d3      	ldrb	r3, [r2, #3]
    1cde:	2b00      	cmp	r3, #0
    1ce0:	d103      	bne.n	1cea <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1ce2:	7853      	ldrb	r3, [r2, #1]
    1ce4:	3b01      	subs	r3, #1
    1ce6:	2b01      	cmp	r3, #1
    1ce8:	d902      	bls.n	1cf0 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    1cea:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    1cec:	6181      	str	r1, [r0, #24]
    1cee:	e7f8      	b.n	1ce2 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    1cf0:	6081      	str	r1, [r0, #8]
}
    1cf2:	e7fa      	b.n	1cea <_system_pinmux_config+0x9a>
    1cf4:	fffbffff 	.word	0xfffbffff

00001cf8 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1cf8:	b510      	push	{r4, lr}
    1cfa:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1cfc:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1cfe:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1d00:	2900      	cmp	r1, #0
    1d02:	d104      	bne.n	1d0e <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1d04:	0943      	lsrs	r3, r0, #5
    1d06:	01db      	lsls	r3, r3, #7
    1d08:	4905      	ldr	r1, [pc, #20]	; (1d20 <system_pinmux_pin_set_config+0x28>)
    1d0a:	468c      	mov	ip, r1
    1d0c:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1d0e:	241f      	movs	r4, #31
    1d10:	4020      	ands	r0, r4
    1d12:	2101      	movs	r1, #1
    1d14:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    1d16:	0018      	movs	r0, r3
    1d18:	4b02      	ldr	r3, [pc, #8]	; (1d24 <system_pinmux_pin_set_config+0x2c>)
    1d1a:	4798      	blx	r3
}
    1d1c:	bd10      	pop	{r4, pc}
    1d1e:	46c0      	nop			; (mov r8, r8)
    1d20:	41004400 	.word	0x41004400
    1d24:	00001c51 	.word	0x00001c51

00001d28 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1d28:	4770      	bx	lr
	...

00001d2c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1d2c:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1d2e:	4b05      	ldr	r3, [pc, #20]	; (1d44 <system_init+0x18>)
    1d30:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1d32:	4b05      	ldr	r3, [pc, #20]	; (1d48 <system_init+0x1c>)
    1d34:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1d36:	4b05      	ldr	r3, [pc, #20]	; (1d4c <system_init+0x20>)
    1d38:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1d3a:	4b05      	ldr	r3, [pc, #20]	; (1d50 <system_init+0x24>)
    1d3c:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1d3e:	4b05      	ldr	r3, [pc, #20]	; (1d54 <system_init+0x28>)
    1d40:	4798      	blx	r3
}
    1d42:	bd10      	pop	{r4, pc}
    1d44:	0000186d 	.word	0x0000186d
    1d48:	00000605 	.word	0x00000605
    1d4c:	00001d29 	.word	0x00001d29
    1d50:	00001d29 	.word	0x00001d29
    1d54:	00001d29 	.word	0x00001d29

00001d58 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1d58:	e7fe      	b.n	1d58 <Dummy_Handler>
	...

00001d5c <Reset_Handler>:
{
    1d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    1d5e:	4a2a      	ldr	r2, [pc, #168]	; (1e08 <Reset_Handler+0xac>)
    1d60:	4b2a      	ldr	r3, [pc, #168]	; (1e0c <Reset_Handler+0xb0>)
    1d62:	429a      	cmp	r2, r3
    1d64:	d011      	beq.n	1d8a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    1d66:	001a      	movs	r2, r3
    1d68:	4b29      	ldr	r3, [pc, #164]	; (1e10 <Reset_Handler+0xb4>)
    1d6a:	429a      	cmp	r2, r3
    1d6c:	d20d      	bcs.n	1d8a <Reset_Handler+0x2e>
    1d6e:	4a29      	ldr	r2, [pc, #164]	; (1e14 <Reset_Handler+0xb8>)
    1d70:	3303      	adds	r3, #3
    1d72:	1a9b      	subs	r3, r3, r2
    1d74:	089b      	lsrs	r3, r3, #2
    1d76:	3301      	adds	r3, #1
    1d78:	009b      	lsls	r3, r3, #2
    1d7a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1d7c:	4823      	ldr	r0, [pc, #140]	; (1e0c <Reset_Handler+0xb0>)
    1d7e:	4922      	ldr	r1, [pc, #136]	; (1e08 <Reset_Handler+0xac>)
    1d80:	588c      	ldr	r4, [r1, r2]
    1d82:	5084      	str	r4, [r0, r2]
    1d84:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    1d86:	429a      	cmp	r2, r3
    1d88:	d1fa      	bne.n	1d80 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    1d8a:	4a23      	ldr	r2, [pc, #140]	; (1e18 <Reset_Handler+0xbc>)
    1d8c:	4b23      	ldr	r3, [pc, #140]	; (1e1c <Reset_Handler+0xc0>)
    1d8e:	429a      	cmp	r2, r3
    1d90:	d20a      	bcs.n	1da8 <Reset_Handler+0x4c>
    1d92:	43d3      	mvns	r3, r2
    1d94:	4921      	ldr	r1, [pc, #132]	; (1e1c <Reset_Handler+0xc0>)
    1d96:	185b      	adds	r3, r3, r1
    1d98:	2103      	movs	r1, #3
    1d9a:	438b      	bics	r3, r1
    1d9c:	3304      	adds	r3, #4
    1d9e:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    1da0:	2100      	movs	r1, #0
    1da2:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    1da4:	4293      	cmp	r3, r2
    1da6:	d1fc      	bne.n	1da2 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1da8:	4a1d      	ldr	r2, [pc, #116]	; (1e20 <Reset_Handler+0xc4>)
    1daa:	21ff      	movs	r1, #255	; 0xff
    1dac:	4b1d      	ldr	r3, [pc, #116]	; (1e24 <Reset_Handler+0xc8>)
    1dae:	438b      	bics	r3, r1
    1db0:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1db2:	39fd      	subs	r1, #253	; 0xfd
    1db4:	2390      	movs	r3, #144	; 0x90
    1db6:	005b      	lsls	r3, r3, #1
    1db8:	4a1b      	ldr	r2, [pc, #108]	; (1e28 <Reset_Handler+0xcc>)
    1dba:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1dbc:	4a1b      	ldr	r2, [pc, #108]	; (1e2c <Reset_Handler+0xd0>)
    1dbe:	78d3      	ldrb	r3, [r2, #3]
    1dc0:	2503      	movs	r5, #3
    1dc2:	43ab      	bics	r3, r5
    1dc4:	2402      	movs	r4, #2
    1dc6:	4323      	orrs	r3, r4
    1dc8:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1dca:	78d3      	ldrb	r3, [r2, #3]
    1dcc:	270c      	movs	r7, #12
    1dce:	43bb      	bics	r3, r7
    1dd0:	2608      	movs	r6, #8
    1dd2:	4333      	orrs	r3, r6
    1dd4:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    1dd6:	4b16      	ldr	r3, [pc, #88]	; (1e30 <Reset_Handler+0xd4>)
    1dd8:	7b98      	ldrb	r0, [r3, #14]
    1dda:	2230      	movs	r2, #48	; 0x30
    1ddc:	4390      	bics	r0, r2
    1dde:	2220      	movs	r2, #32
    1de0:	4310      	orrs	r0, r2
    1de2:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1de4:	7b99      	ldrb	r1, [r3, #14]
    1de6:	43b9      	bics	r1, r7
    1de8:	4331      	orrs	r1, r6
    1dea:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1dec:	7b9a      	ldrb	r2, [r3, #14]
    1dee:	43aa      	bics	r2, r5
    1df0:	4322      	orrs	r2, r4
    1df2:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    1df4:	4a0f      	ldr	r2, [pc, #60]	; (1e34 <Reset_Handler+0xd8>)
    1df6:	6853      	ldr	r3, [r2, #4]
    1df8:	2180      	movs	r1, #128	; 0x80
    1dfa:	430b      	orrs	r3, r1
    1dfc:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    1dfe:	4b0e      	ldr	r3, [pc, #56]	; (1e38 <Reset_Handler+0xdc>)
    1e00:	4798      	blx	r3
        main();
    1e02:	4b0e      	ldr	r3, [pc, #56]	; (1e3c <Reset_Handler+0xe0>)
    1e04:	4798      	blx	r3
    1e06:	e7fe      	b.n	1e06 <Reset_Handler+0xaa>
    1e08:	000068b4 	.word	0x000068b4
    1e0c:	20000000 	.word	0x20000000
    1e10:	200001bc 	.word	0x200001bc
    1e14:	20000004 	.word	0x20000004
    1e18:	200001bc 	.word	0x200001bc
    1e1c:	20000ac0 	.word	0x20000ac0
    1e20:	e000ed00 	.word	0xe000ed00
    1e24:	00000000 	.word	0x00000000
    1e28:	41007000 	.word	0x41007000
    1e2c:	41005000 	.word	0x41005000
    1e30:	41004800 	.word	0x41004800
    1e34:	41004000 	.word	0x41004000
    1e38:	000034a5 	.word	0x000034a5
    1e3c:	000032a1 	.word	0x000032a1

00001e40 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    1e40:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e42:	46c6      	mov	lr, r8
    1e44:	b500      	push	{lr}
    1e46:	000c      	movs	r4, r1
    1e48:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    1e4a:	2800      	cmp	r0, #0
    1e4c:	d10f      	bne.n	1e6e <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    1e4e:	2a00      	cmp	r2, #0
    1e50:	dd11      	ble.n	1e76 <_read+0x36>
    1e52:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    1e54:	4e09      	ldr	r6, [pc, #36]	; (1e7c <_read+0x3c>)
    1e56:	4d0a      	ldr	r5, [pc, #40]	; (1e80 <_read+0x40>)
    1e58:	6830      	ldr	r0, [r6, #0]
    1e5a:	0021      	movs	r1, r4
    1e5c:	682b      	ldr	r3, [r5, #0]
    1e5e:	4798      	blx	r3
		ptr++;
    1e60:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    1e62:	42bc      	cmp	r4, r7
    1e64:	d1f8      	bne.n	1e58 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    1e66:	4640      	mov	r0, r8
    1e68:	bc04      	pop	{r2}
    1e6a:	4690      	mov	r8, r2
    1e6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    1e6e:	2301      	movs	r3, #1
    1e70:	425b      	negs	r3, r3
    1e72:	4698      	mov	r8, r3
    1e74:	e7f7      	b.n	1e66 <_read+0x26>
	for (; len > 0; --len) {
    1e76:	4680      	mov	r8, r0
    1e78:	e7f5      	b.n	1e66 <_read+0x26>
    1e7a:	46c0      	nop			; (mov r8, r8)
    1e7c:	200002d8 	.word	0x200002d8
    1e80:	200002d0 	.word	0x200002d0

00001e84 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    1e84:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e86:	46c6      	mov	lr, r8
    1e88:	b500      	push	{lr}
    1e8a:	000e      	movs	r6, r1
    1e8c:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    1e8e:	3801      	subs	r0, #1
    1e90:	2802      	cmp	r0, #2
    1e92:	d810      	bhi.n	1eb6 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    1e94:	2a00      	cmp	r2, #0
    1e96:	d011      	beq.n	1ebc <_write+0x38>
    1e98:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    1e9a:	4b0c      	ldr	r3, [pc, #48]	; (1ecc <_write+0x48>)
    1e9c:	4698      	mov	r8, r3
    1e9e:	4f0c      	ldr	r7, [pc, #48]	; (1ed0 <_write+0x4c>)
    1ea0:	4643      	mov	r3, r8
    1ea2:	6818      	ldr	r0, [r3, #0]
    1ea4:	5d31      	ldrb	r1, [r6, r4]
    1ea6:	683b      	ldr	r3, [r7, #0]
    1ea8:	4798      	blx	r3
    1eaa:	2800      	cmp	r0, #0
    1eac:	db08      	blt.n	1ec0 <_write+0x3c>
			return -1;
		}
		++nChars;
    1eae:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    1eb0:	42a5      	cmp	r5, r4
    1eb2:	d1f5      	bne.n	1ea0 <_write+0x1c>
    1eb4:	e006      	b.n	1ec4 <_write+0x40>
		return -1;
    1eb6:	2401      	movs	r4, #1
    1eb8:	4264      	negs	r4, r4
    1eba:	e003      	b.n	1ec4 <_write+0x40>
	for (; len != 0; --len) {
    1ebc:	0014      	movs	r4, r2
    1ebe:	e001      	b.n	1ec4 <_write+0x40>
			return -1;
    1ec0:	2401      	movs	r4, #1
    1ec2:	4264      	negs	r4, r4
	}
	return nChars;
}
    1ec4:	0020      	movs	r0, r4
    1ec6:	bc04      	pop	{r2}
    1ec8:	4690      	mov	r8, r2
    1eca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ecc:	200002d8 	.word	0x200002d8
    1ed0:	200002d4 	.word	0x200002d4

00001ed4 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    1ed4:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    1ed6:	4a06      	ldr	r2, [pc, #24]	; (1ef0 <_sbrk+0x1c>)
    1ed8:	6812      	ldr	r2, [r2, #0]
    1eda:	2a00      	cmp	r2, #0
    1edc:	d004      	beq.n	1ee8 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    1ede:	4a04      	ldr	r2, [pc, #16]	; (1ef0 <_sbrk+0x1c>)
    1ee0:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    1ee2:	18c3      	adds	r3, r0, r3
    1ee4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    1ee6:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    1ee8:	4902      	ldr	r1, [pc, #8]	; (1ef4 <_sbrk+0x20>)
    1eea:	4a01      	ldr	r2, [pc, #4]	; (1ef0 <_sbrk+0x1c>)
    1eec:	6011      	str	r1, [r2, #0]
    1eee:	e7f6      	b.n	1ede <_sbrk+0xa>
    1ef0:	20000294 	.word	0x20000294
    1ef4:	20002ac0 	.word	0x20002ac0

00001ef8 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    1ef8:	2001      	movs	r0, #1
    1efa:	4240      	negs	r0, r0
    1efc:	4770      	bx	lr

00001efe <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    1efe:	2380      	movs	r3, #128	; 0x80
    1f00:	019b      	lsls	r3, r3, #6
    1f02:	604b      	str	r3, [r1, #4]

	return 0;
}
    1f04:	2000      	movs	r0, #0
    1f06:	4770      	bx	lr

00001f08 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    1f08:	2001      	movs	r0, #1
    1f0a:	4770      	bx	lr

00001f0c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    1f0c:	2000      	movs	r0, #0
    1f0e:	4770      	bx	lr

00001f10 <drawChar>:
uint16_t xCharPos = 0;
uint16_t yCharPos = 0;


void drawChar(uint8_t character)
{
    1f10:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f12:	46d6      	mov	lr, sl
    1f14:	464f      	mov	r7, r9
    1f16:	4646      	mov	r6, r8
    1f18:	b5c0      	push	{r6, r7, lr}
    1f1a:	0004      	movs	r4, r0
	uint16_t x = xCharPos;
    1f1c:	4b2a      	ldr	r3, [pc, #168]	; (1fc8 <drawChar+0xb8>)
    1f1e:	881b      	ldrh	r3, [r3, #0]
	uint16_t y = yCharPos;
    1f20:	4a2a      	ldr	r2, [pc, #168]	; (1fcc <drawChar+0xbc>)
    1f22:	8815      	ldrh	r5, [r2, #0]
	
	consoleDisplay[xCharPos][yCharPos] = character;
    1f24:	005a      	lsls	r2, r3, #1
    1f26:	18d2      	adds	r2, r2, r3
    1f28:	00d2      	lsls	r2, r2, #3
    1f2a:	4829      	ldr	r0, [pc, #164]	; (1fd0 <drawChar+0xc0>)
    1f2c:	1882      	adds	r2, r0, r2
    1f2e:	5554      	strb	r4, [r2, r5]
	
	REG_PORT_OUTCLR1 = LCD_CS;
    1f30:	2180      	movs	r1, #128	; 0x80
    1f32:	03c9      	lsls	r1, r1, #15
    1f34:	4a27      	ldr	r2, [pc, #156]	; (1fd4 <drawChar+0xc4>)
    1f36:	6011      	str	r1, [r2, #0]
	setXY(x*10,y*20,x*10+9,y*20+19);
    1f38:	0098      	lsls	r0, r3, #2
    1f3a:	181b      	adds	r3, r3, r0
    1f3c:	005b      	lsls	r3, r3, #1
    1f3e:	b298      	uxth	r0, r3
    1f40:	2114      	movs	r1, #20
    1f42:	4369      	muls	r1, r5
    1f44:	b289      	uxth	r1, r1
    1f46:	000b      	movs	r3, r1
    1f48:	3313      	adds	r3, #19
    1f4a:	b29b      	uxth	r3, r3
    1f4c:	0002      	movs	r2, r0
    1f4e:	3209      	adds	r2, #9
    1f50:	b292      	uxth	r2, r2
    1f52:	4d21      	ldr	r5, [pc, #132]	; (1fd8 <drawChar+0xc8>)
    1f54:	47a8      	blx	r5
    1f56:	4a21      	ldr	r2, [pc, #132]	; (1fdc <drawChar+0xcc>)
    1f58:	00a5      	lsls	r5, r4, #2
    1f5a:	192d      	adds	r5, r5, r4
    1f5c:	00ab      	lsls	r3, r5, #2
    1f5e:	18ed      	adds	r5, r5, r3
    1f60:	1955      	adds	r5, r2, r5
    1f62:	3401      	adds	r4, #1
    1f64:	00a3      	lsls	r3, r4, #2
    1f66:	191c      	adds	r4, r3, r4
    1f68:	00a3      	lsls	r3, r4, #2
    1f6a:	18e4      	adds	r4, r4, r3
    1f6c:	4692      	mov	sl, r2
    1f6e:	44a2      	add	sl, r4
			{
				setPixel((fore_Color_High<<8)|fore_Color_Low);	
			}
			else
			{
				setPixel((back_Color_High<<8)|back_Color_Low);
    1f70:	4b1b      	ldr	r3, [pc, #108]	; (1fe0 <drawChar+0xd0>)
    1f72:	4699      	mov	r9, r3
    1f74:	4b1b      	ldr	r3, [pc, #108]	; (1fe4 <drawChar+0xd4>)
    1f76:	4698      	mov	r8, r3
    1f78:	4f1b      	ldr	r7, [pc, #108]	; (1fe8 <drawChar+0xd8>)
				setPixel((fore_Color_High<<8)|fore_Color_Low);	
    1f7a:	4e1c      	ldr	r6, [pc, #112]	; (1fec <drawChar+0xdc>)
    1f7c:	e019      	b.n	1fb2 <drawChar+0xa2>
				setPixel((back_Color_High<<8)|back_Color_Low);
    1f7e:	464b      	mov	r3, r9
    1f80:	8818      	ldrh	r0, [r3, #0]
    1f82:	0200      	lsls	r0, r0, #8
    1f84:	4643      	mov	r3, r8
    1f86:	881b      	ldrh	r3, [r3, #0]
    1f88:	4318      	orrs	r0, r3
    1f8a:	b280      	uxth	r0, r0
    1f8c:	47b8      	blx	r7
		for(int j=0;j<8;j++)
    1f8e:	3c01      	subs	r4, #1
    1f90:	d30c      	bcc.n	1fac <drawChar+0x9c>
			if((CodePage437[character][i]&(1<<(7-j)))!=0)
    1f92:	782b      	ldrb	r3, [r5, #0]
    1f94:	4123      	asrs	r3, r4
    1f96:	07db      	lsls	r3, r3, #31
    1f98:	d5f1      	bpl.n	1f7e <drawChar+0x6e>
				setPixel((fore_Color_High<<8)|fore_Color_Low);	
    1f9a:	8830      	ldrh	r0, [r6, #0]
    1f9c:	0200      	lsls	r0, r0, #8
    1f9e:	4b14      	ldr	r3, [pc, #80]	; (1ff0 <drawChar+0xe0>)
    1fa0:	881b      	ldrh	r3, [r3, #0]
    1fa2:	4318      	orrs	r0, r3
    1fa4:	b280      	uxth	r0, r0
    1fa6:	4b10      	ldr	r3, [pc, #64]	; (1fe8 <drawChar+0xd8>)
    1fa8:	4798      	blx	r3
    1faa:	e7f0      	b.n	1f8e <drawChar+0x7e>
    1fac:	3501      	adds	r5, #1
	for(uint16_t i=0; i <= 24; i++)
    1fae:	4555      	cmp	r5, sl
    1fb0:	d001      	beq.n	1fb6 <drawChar+0xa6>
{
    1fb2:	2407      	movs	r4, #7
    1fb4:	e7ed      	b.n	1f92 <drawChar+0x82>
			}

		}
	}
	REG_PORT_OUTSET1 = LCD_CS;
    1fb6:	2280      	movs	r2, #128	; 0x80
    1fb8:	03d2      	lsls	r2, r2, #15
    1fba:	4b0e      	ldr	r3, [pc, #56]	; (1ff4 <drawChar+0xe4>)
    1fbc:	601a      	str	r2, [r3, #0]
	
	//printf(consoleDisplay[xCharPos][yCharPos]);

}
    1fbe:	bc1c      	pop	{r2, r3, r4}
    1fc0:	4690      	mov	r8, r2
    1fc2:	4699      	mov	r9, r3
    1fc4:	46a2      	mov	sl, r4
    1fc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1fc8:	20000298 	.word	0x20000298
    1fcc:	2000029a 	.word	0x2000029a
    1fd0:	20000314 	.word	0x20000314
    1fd4:	41004494 	.word	0x41004494
    1fd8:	00002a8d 	.word	0x00002a8d
    1fdc:	00004cc0 	.word	0x00004cc0
    1fe0:	20000a9a 	.word	0x20000a9a
    1fe4:	20000a94 	.word	0x20000a94
    1fe8:	00002c4d 	.word	0x00002c4d
    1fec:	20000a96 	.word	0x20000a96
    1ff0:	20000a98 	.word	0x20000a98
    1ff4:	41004498 	.word	0x41004498

00001ff8 <newLine>:

void newLine(void)
{
    1ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ffa:	46de      	mov	lr, fp
    1ffc:	4657      	mov	r7, sl
    1ffe:	464e      	mov	r6, r9
    2000:	4645      	mov	r5, r8
    2002:	b5e0      	push	{r5, r6, r7, lr}
    2004:	4c56      	ldr	r4, [pc, #344]	; (2160 <STACK_SIZE+0x160>)
    2006:	44a5      	add	sp, r4
    2008:	4856      	ldr	r0, [pc, #344]	; (2164 <STACK_SIZE+0x164>)
    200a:	23f0      	movs	r3, #240	; 0xf0
    200c:	00db      	lsls	r3, r3, #3
    200e:	18c4      	adds	r4, r0, r3
    2010:	e002      	b.n	2018 <STACK_SIZE+0x18>
    2012:	3018      	adds	r0, #24
	/*
	This is split into two parts; the first moves consoledisplay around
	so the first line is deleted and all other lines are moved up one line
	*/
	
	for(int i = 0 ; i < 80 ; i++)
    2014:	42a0      	cmp	r0, r4
    2016:	d008      	beq.n	202a <STACK_SIZE+0x2a>
    2018:	0001      	movs	r1, r0
    201a:	3117      	adds	r1, #23
{
    201c:	0003      	movs	r3, r0
	{
		for(int j = 1 ; j < 24 ; j++)
		{
			consoleDisplay[i][j-1] = consoleDisplay[i][j];
    201e:	785a      	ldrb	r2, [r3, #1]
    2020:	701a      	strb	r2, [r3, #0]
    2022:	3301      	adds	r3, #1
		for(int j = 1 ; j < 24 ; j++)
    2024:	428b      	cmp	r3, r1
    2026:	d1fa      	bne.n	201e <STACK_SIZE+0x1e>
    2028:	e7f3      	b.n	2012 <STACK_SIZE+0x12>
    202a:	4b4f      	ldr	r3, [pc, #316]	; (2168 <STACK_SIZE+0x168>)
    202c:	22f0      	movs	r2, #240	; 0xf0
    202e:	00d2      	lsls	r2, r2, #3
    2030:	1899      	adds	r1, r3, r2
		}
	}
	
	for(int k = 0 ; k < 80 ; k ++)
	{
		consoleDisplay[k][23] = 0x00;
    2032:	2200      	movs	r2, #0
    2034:	701a      	strb	r2, [r3, #0]
    2036:	3318      	adds	r3, #24
	for(int k = 0 ; k < 80 ; k ++)
    2038:	428b      	cmp	r3, r1
    203a:	d1fb      	bne.n	2034 <STACK_SIZE+0x34>
    203c:	2300      	movs	r3, #0
    203e:	9300      	str	r3, [sp, #0]
			
	for(uint16_t row = 0 ; row < 460 ; row++)
	{
		//Per page 40 of datasheet (5.1.2.7, 16-bit
		//parallel interface for data ram read.
		REG_PORT_OUTCLR1 = LCD_CS;
    2040:	4b4a      	ldr	r3, [pc, #296]	; (216c <STACK_SIZE+0x16c>)
    2042:	4698      	mov	r8, r3
		setXY(0, row+20, 799, row+20);
		//Send'Memory read' command 0x2E00, no data bit
		LCD_Write_COM16(0x2E,0x00);
		REG_PORT_OUTSET1 = LCD_DC;
    2044:	4f4a      	ldr	r7, [pc, #296]	; (2170 <STACK_SIZE+0x170>)
		
		
		//Read pixel data into the display	
		for(uint16_t getpixel = 0 ; getpixel < 800 ; getpixel++)
		{
			REG_PORT_OUTCLR1 = LCD_RD;
    2046:	2680      	movs	r6, #128	; 0x80
    2048:	0276      	lsls	r6, r6, #9
    204a:	e046      	b.n	20da <STACK_SIZE+0xda>
			//This can be expanded with else if for the MSBs
			//of all the colors; see datasheet page 40.
			if((PORT->Group[1].IN.reg & PORT_PB07) != 0)
				rowPixel[getpixel] = 0xFF;
			else
				rowPixel[getpixel] = 0x00;
    204c:	4653      	mov	r3, sl
    204e:	7023      	strb	r3, [r4, #0]
			//dummy read, because pixel data broken up
			//per datasheet page 40. Everything after
			//the dummy write is BLUE pixels. Do we ever
			//need blue? IDK.
			
			REG_PORT_OUTCLR1 = LCD_RD;
    2050:	4643      	mov	r3, r8
    2052:	601e      	str	r6, [r3, #0]
			REG_PORT_OUTSET1 = LCD_RD;
    2054:	603e      	str	r6, [r7, #0]
    2056:	3401      	adds	r4, #1
		for(uint16_t getpixel = 0 ; getpixel < 800 ; getpixel++)
    2058:	4564      	cmp	r4, ip
    205a:	d008      	beq.n	206e <STACK_SIZE+0x6e>
			REG_PORT_OUTCLR1 = LCD_RD;
    205c:	4643      	mov	r3, r8
    205e:	601e      	str	r6, [r3, #0]
			REG_PORT_OUTSET1 = LCD_RD;
    2060:	603e      	str	r6, [r7, #0]
			if((PORT->Group[1].IN.reg & PORT_PB07) != 0)
    2062:	5843      	ldr	r3, [r0, r1]
    2064:	421a      	tst	r2, r3
    2066:	d0f1      	beq.n	204c <STACK_SIZE+0x4c>
				rowPixel[getpixel] = 0xFF;
    2068:	464b      	mov	r3, r9
    206a:	7023      	strb	r3, [r4, #0]
    206c:	e7f0      	b.n	2050 <STACK_SIZE+0x50>
    206e:	9401      	str	r4, [sp, #4]
		}
		
		REG_PORT_OUTSET1 = LCD_DC;
    2070:	2380      	movs	r3, #128	; 0x80
    2072:	041b      	lsls	r3, r3, #16
    2074:	603b      	str	r3, [r7, #0]
		REG_PORT_DIRSET1 = 0x0000FFFF;
    2076:	4a3f      	ldr	r2, [pc, #252]	; (2174 <STACK_SIZE+0x174>)
    2078:	4b3f      	ldr	r3, [pc, #252]	; (2178 <STACK_SIZE+0x178>)
    207a:	601a      	str	r2, [r3, #0]
		
		//now, read out that line of the display
		setXY(0, row, 799, row);	
    207c:	9900      	ldr	r1, [sp, #0]
    207e:	000b      	movs	r3, r1
    2080:	4a3e      	ldr	r2, [pc, #248]	; (217c <STACK_SIZE+0x17c>)
    2082:	2000      	movs	r0, #0
    2084:	4c3e      	ldr	r4, [pc, #248]	; (2180 <STACK_SIZE+0x180>)
    2086:	47a0      	blx	r4
		for(uint16_t writepixel = 0 ; writepixel < 800 ; writepixel++)
		{
			if((rowPixel[writepixel] == 0xFF))
				setPixel((fore_Color_High<<8)|fore_Color_Low);
			else
				setPixel((back_Color_High<<8)|back_Color_Low);
    2088:	4b3e      	ldr	r3, [pc, #248]	; (2184 <STACK_SIZE+0x184>)
    208a:	469b      	mov	fp, r3
    208c:	4b3e      	ldr	r3, [pc, #248]	; (2188 <STACK_SIZE+0x188>)
    208e:	469a      	mov	sl, r3
    2090:	4b3e      	ldr	r3, [pc, #248]	; (218c <STACK_SIZE+0x18c>)
    2092:	4699      	mov	r9, r3
    2094:	9c01      	ldr	r4, [sp, #4]
    2096:	e00b      	b.n	20b0 <STACK_SIZE+0xb0>
				setPixel((fore_Color_High<<8)|fore_Color_Low);
    2098:	4b3d      	ldr	r3, [pc, #244]	; (2190 <STACK_SIZE+0x190>)
    209a:	8818      	ldrh	r0, [r3, #0]
    209c:	0200      	lsls	r0, r0, #8
    209e:	4b3d      	ldr	r3, [pc, #244]	; (2194 <STACK_SIZE+0x194>)
    20a0:	881b      	ldrh	r3, [r3, #0]
    20a2:	4318      	orrs	r0, r3
    20a4:	b280      	uxth	r0, r0
    20a6:	4b39      	ldr	r3, [pc, #228]	; (218c <STACK_SIZE+0x18c>)
    20a8:	4798      	blx	r3
    20aa:	3501      	adds	r5, #1
		for(uint16_t writepixel = 0 ; writepixel < 800 ; writepixel++)
    20ac:	42a5      	cmp	r5, r4
    20ae:	d00b      	beq.n	20c8 <STACK_SIZE+0xc8>
			if((rowPixel[writepixel] == 0xFF))
    20b0:	782b      	ldrb	r3, [r5, #0]
    20b2:	2bff      	cmp	r3, #255	; 0xff
    20b4:	d0f0      	beq.n	2098 <STACK_SIZE+0x98>
				setPixel((back_Color_High<<8)|back_Color_Low);
    20b6:	465b      	mov	r3, fp
    20b8:	8818      	ldrh	r0, [r3, #0]
    20ba:	0200      	lsls	r0, r0, #8
    20bc:	4653      	mov	r3, sl
    20be:	881b      	ldrh	r3, [r3, #0]
    20c0:	4318      	orrs	r0, r3
    20c2:	b280      	uxth	r0, r0
    20c4:	47c8      	blx	r9
    20c6:	e7f0      	b.n	20aa <STACK_SIZE+0xaa>
	for(uint16_t row = 0 ; row < 460 ; row++)
    20c8:	9b00      	ldr	r3, [sp, #0]
    20ca:	3301      	adds	r3, #1
    20cc:	b29b      	uxth	r3, r3
    20ce:	001a      	movs	r2, r3
    20d0:	9300      	str	r3, [sp, #0]
    20d2:	23e6      	movs	r3, #230	; 0xe6
    20d4:	005b      	lsls	r3, r3, #1
    20d6:	429a      	cmp	r2, r3
    20d8:	d031      	beq.n	213e <STACK_SIZE+0x13e>
		REG_PORT_OUTCLR1 = LCD_CS;
    20da:	4643      	mov	r3, r8
    20dc:	2280      	movs	r2, #128	; 0x80
    20de:	03d2      	lsls	r2, r2, #15
    20e0:	601a      	str	r2, [r3, #0]
		setXY(0, row+20, 799, row+20);
    20e2:	9900      	ldr	r1, [sp, #0]
    20e4:	3114      	adds	r1, #20
    20e6:	b289      	uxth	r1, r1
    20e8:	000b      	movs	r3, r1
    20ea:	4a24      	ldr	r2, [pc, #144]	; (217c <STACK_SIZE+0x17c>)
    20ec:	2000      	movs	r0, #0
    20ee:	4c24      	ldr	r4, [pc, #144]	; (2180 <STACK_SIZE+0x180>)
    20f0:	47a0      	blx	r4
		LCD_Write_COM16(0x2E,0x00);
    20f2:	2100      	movs	r1, #0
    20f4:	202e      	movs	r0, #46	; 0x2e
    20f6:	4b28      	ldr	r3, [pc, #160]	; (2198 <STACK_SIZE+0x198>)
    20f8:	4798      	blx	r3
		REG_PORT_OUTSET1 = LCD_DC;
    20fa:	2380      	movs	r3, #128	; 0x80
    20fc:	041b      	lsls	r3, r3, #16
    20fe:	603b      	str	r3, [r7, #0]
		REG_PORT_OUTCLR1 = LCD_RD;
    2100:	4643      	mov	r3, r8
    2102:	2280      	movs	r2, #128	; 0x80
    2104:	0252      	lsls	r2, r2, #9
    2106:	601a      	str	r2, [r3, #0]
		REG_PORT_OUTSET1 = LCD_RD;
    2108:	603a      	str	r2, [r7, #0]
		REG_PORT_DIRCLR1 = PORT_PB07;
    210a:	2280      	movs	r2, #128	; 0x80
    210c:	4b23      	ldr	r3, [pc, #140]	; (219c <STACK_SIZE+0x19c>)
    210e:	601a      	str	r2, [r3, #0]
		PORT->Group[1].PINCFG[7].bit.INEN = 1;
    2110:	4a23      	ldr	r2, [pc, #140]	; (21a0 <STACK_SIZE+0x1a0>)
    2112:	23c7      	movs	r3, #199	; 0xc7
    2114:	5cd1      	ldrb	r1, [r2, r3]
    2116:	2002      	movs	r0, #2
    2118:	4301      	orrs	r1, r0
    211a:	54d1      	strb	r1, [r2, r3]
		PORT->Group[1].PINCFG[7].bit.PULLEN = 1;
    211c:	5cd1      	ldrb	r1, [r2, r3]
    211e:	2004      	movs	r0, #4
    2120:	4301      	orrs	r1, r0
    2122:	54d1      	strb	r1, [r2, r3]
    2124:	ad02      	add	r5, sp, #8
    2126:	abca      	add	r3, sp, #808	; 0x328
    2128:	469c      	mov	ip, r3
    212a:	9501      	str	r5, [sp, #4]
			if((PORT->Group[1].IN.reg & PORT_PB07) != 0)
    212c:	0010      	movs	r0, r2
    212e:	21a0      	movs	r1, #160	; 0xa0
    2130:	2280      	movs	r2, #128	; 0x80
				rowPixel[getpixel] = 0x00;
    2132:	2300      	movs	r3, #0
    2134:	469a      	mov	sl, r3
				rowPixel[getpixel] = 0xFF;
    2136:	33ff      	adds	r3, #255	; 0xff
    2138:	4699      	mov	r9, r3
    213a:	002c      	movs	r4, r5
    213c:	e78e      	b.n	205c <STACK_SIZE+0x5c>
		}
	}
	
	//clear the last character line of the display
	//and fix the console text buffer
	fillRectBackColor(0, 460, 799, 480);
    213e:	3314      	adds	r3, #20
    2140:	4a0e      	ldr	r2, [pc, #56]	; (217c <STACK_SIZE+0x17c>)
    2142:	21e6      	movs	r1, #230	; 0xe6
    2144:	0049      	lsls	r1, r1, #1
    2146:	2000      	movs	r0, #0
    2148:	4c16      	ldr	r4, [pc, #88]	; (21a4 <STACK_SIZE+0x1a4>)
    214a:	47a0      	blx	r4
	
	
}
    214c:	23cb      	movs	r3, #203	; 0xcb
    214e:	009b      	lsls	r3, r3, #2
    2150:	449d      	add	sp, r3
    2152:	bc3c      	pop	{r2, r3, r4, r5}
    2154:	4690      	mov	r8, r2
    2156:	4699      	mov	r9, r3
    2158:	46a2      	mov	sl, r4
    215a:	46ab      	mov	fp, r5
    215c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    215e:	46c0      	nop			; (mov r8, r8)
    2160:	fffffcd4 	.word	0xfffffcd4
    2164:	20000314 	.word	0x20000314
    2168:	2000032b 	.word	0x2000032b
    216c:	41004494 	.word	0x41004494
    2170:	41004498 	.word	0x41004498
    2174:	0000ffff 	.word	0x0000ffff
    2178:	41004488 	.word	0x41004488
    217c:	0000031f 	.word	0x0000031f
    2180:	00002a8d 	.word	0x00002a8d
    2184:	20000a9a 	.word	0x20000a9a
    2188:	20000a94 	.word	0x20000a94
    218c:	00002c4d 	.word	0x00002c4d
    2190:	20000a96 	.word	0x20000a96
    2194:	20000a98 	.word	0x20000a98
    2198:	00002cb9 	.word	0x00002cb9
    219c:	41004484 	.word	0x41004484
    21a0:	41004400 	.word	0x41004400
    21a4:	00002b8d 	.word	0x00002b8d

000021a8 <blinkCursor>:

void blinkCursor(void)
{
    21a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    21aa:	46d6      	mov	lr, sl
    21ac:	464f      	mov	r7, r9
    21ae:	4646      	mov	r6, r8
    21b0:	b5c0      	push	{r6, r7, lr}
	uint16_t x = xCharPos;
    21b2:	4b47      	ldr	r3, [pc, #284]	; (22d0 <blinkCursor+0x128>)
    21b4:	881b      	ldrh	r3, [r3, #0]
	uint16_t y = yCharPos;
    21b6:	4a47      	ldr	r2, [pc, #284]	; (22d4 <blinkCursor+0x12c>)
    21b8:	8815      	ldrh	r5, [r2, #0]
	unsigned char character = consoleDisplay[x][y];
    21ba:	005a      	lsls	r2, r3, #1
    21bc:	18d2      	adds	r2, r2, r3
    21be:	00d2      	lsls	r2, r2, #3
    21c0:	4845      	ldr	r0, [pc, #276]	; (22d8 <blinkCursor+0x130>)
    21c2:	1882      	adds	r2, r0, r2
    21c4:	5d54      	ldrb	r4, [r2, r5]
	setXY(x*10,y*20,x*10+9,y*20+19);
    21c6:	0098      	lsls	r0, r3, #2
    21c8:	181b      	adds	r3, r3, r0
    21ca:	005b      	lsls	r3, r3, #1
    21cc:	b298      	uxth	r0, r3
    21ce:	2114      	movs	r1, #20
    21d0:	4369      	muls	r1, r5
    21d2:	b289      	uxth	r1, r1
    21d4:	000b      	movs	r3, r1
    21d6:	3313      	adds	r3, #19
    21d8:	b29b      	uxth	r3, r3
    21da:	0002      	movs	r2, r0
    21dc:	3209      	adds	r2, #9
    21de:	b292      	uxth	r2, r2
    21e0:	4d3e      	ldr	r5, [pc, #248]	; (22dc <blinkCursor+0x134>)
    21e2:	47a8      	blx	r5
	REG_PORT_OUTCLR1 = LCD_CS;
    21e4:	2280      	movs	r2, #128	; 0x80
    21e6:	03d2      	lsls	r2, r2, #15
    21e8:	4b3d      	ldr	r3, [pc, #244]	; (22e0 <blinkCursor+0x138>)
    21ea:	601a      	str	r2, [r3, #0]
	if(cursorBlinkState)
    21ec:	4b3d      	ldr	r3, [pc, #244]	; (22e4 <blinkCursor+0x13c>)
    21ee:	781b      	ldrb	r3, [r3, #0]
    21f0:	2b00      	cmp	r3, #0
    21f2:	d113      	bne.n	221c <blinkCursor+0x74>
    21f4:	4a3c      	ldr	r2, [pc, #240]	; (22e8 <blinkCursor+0x140>)
    21f6:	00a5      	lsls	r5, r4, #2
    21f8:	192d      	adds	r5, r5, r4
    21fa:	00ab      	lsls	r3, r5, #2
    21fc:	18ed      	adds	r5, r5, r3
    21fe:	1955      	adds	r5, r2, r5
    2200:	3401      	adds	r4, #1
    2202:	00a3      	lsls	r3, r4, #2
    2204:	191c      	adds	r4, r3, r4
    2206:	00a3      	lsls	r3, r4, #2
    2208:	18e4      	adds	r4, r4, r3
    220a:	4692      	mov	sl, r2
    220c:	44a2      	add	sl, r4
				{
					setPixel((fore_Color_High<<8)|fore_Color_Low);
				}
				else
				{
					setPixel((back_Color_High<<8)|back_Color_Low);
    220e:	4b37      	ldr	r3, [pc, #220]	; (22ec <blinkCursor+0x144>)
    2210:	4699      	mov	r9, r3
    2212:	4b37      	ldr	r3, [pc, #220]	; (22f0 <blinkCursor+0x148>)
    2214:	4698      	mov	r8, r3
    2216:	4f37      	ldr	r7, [pc, #220]	; (22f4 <blinkCursor+0x14c>)
					setPixel((fore_Color_High<<8)|fore_Color_Low);
    2218:	4e37      	ldr	r6, [pc, #220]	; (22f8 <blinkCursor+0x150>)
    221a:	e049      	b.n	22b0 <blinkCursor+0x108>
    221c:	4a32      	ldr	r2, [pc, #200]	; (22e8 <blinkCursor+0x140>)
    221e:	00a5      	lsls	r5, r4, #2
    2220:	192d      	adds	r5, r5, r4
    2222:	00ab      	lsls	r3, r5, #2
    2224:	18ed      	adds	r5, r5, r3
    2226:	1955      	adds	r5, r2, r5
    2228:	3401      	adds	r4, #1
    222a:	00a3      	lsls	r3, r4, #2
    222c:	191c      	adds	r4, r3, r4
    222e:	00a3      	lsls	r3, r4, #2
    2230:	18e4      	adds	r4, r4, r3
    2232:	4692      	mov	sl, r2
    2234:	44a2      	add	sl, r4
					setPixel((fore_Color_High<<8)|fore_Color_Low);
    2236:	4b30      	ldr	r3, [pc, #192]	; (22f8 <blinkCursor+0x150>)
    2238:	4699      	mov	r9, r3
    223a:	4b30      	ldr	r3, [pc, #192]	; (22fc <blinkCursor+0x154>)
    223c:	4698      	mov	r8, r3
    223e:	4f2d      	ldr	r7, [pc, #180]	; (22f4 <blinkCursor+0x14c>)
					setPixel((back_Color_High<<8)|back_Color_Low);
    2240:	4e2a      	ldr	r6, [pc, #168]	; (22ec <blinkCursor+0x144>)
    2242:	e019      	b.n	2278 <blinkCursor+0xd0>
					setPixel((fore_Color_High<<8)|fore_Color_Low);
    2244:	464b      	mov	r3, r9
    2246:	8818      	ldrh	r0, [r3, #0]
    2248:	0200      	lsls	r0, r0, #8
    224a:	4643      	mov	r3, r8
    224c:	881b      	ldrh	r3, [r3, #0]
    224e:	4318      	orrs	r0, r3
    2250:	b280      	uxth	r0, r0
    2252:	47b8      	blx	r7
			for(int j=0;j<8;j++)
    2254:	3c01      	subs	r4, #1
    2256:	d30c      	bcc.n	2272 <blinkCursor+0xca>
				if((CodePage437[character][i]&(1<<(7-j)))!=0)
    2258:	782b      	ldrb	r3, [r5, #0]
    225a:	4123      	asrs	r3, r4
    225c:	07db      	lsls	r3, r3, #31
    225e:	d5f1      	bpl.n	2244 <blinkCursor+0x9c>
					setPixel((back_Color_High<<8)|back_Color_Low);
    2260:	8830      	ldrh	r0, [r6, #0]
    2262:	0200      	lsls	r0, r0, #8
    2264:	4b22      	ldr	r3, [pc, #136]	; (22f0 <blinkCursor+0x148>)
    2266:	881b      	ldrh	r3, [r3, #0]
    2268:	4318      	orrs	r0, r3
    226a:	b280      	uxth	r0, r0
    226c:	4b21      	ldr	r3, [pc, #132]	; (22f4 <blinkCursor+0x14c>)
    226e:	4798      	blx	r3
    2270:	e7f0      	b.n	2254 <blinkCursor+0xac>
    2272:	3501      	adds	r5, #1
		for(uint16_t i=0; i <= 24; i++)
    2274:	4555      	cmp	r5, sl
    2276:	d01d      	beq.n	22b4 <blinkCursor+0x10c>
{
    2278:	2407      	movs	r4, #7
    227a:	e7ed      	b.n	2258 <blinkCursor+0xb0>
					setPixel((back_Color_High<<8)|back_Color_Low);
    227c:	464b      	mov	r3, r9
    227e:	8818      	ldrh	r0, [r3, #0]
    2280:	0200      	lsls	r0, r0, #8
    2282:	4643      	mov	r3, r8
    2284:	881b      	ldrh	r3, [r3, #0]
    2286:	4318      	orrs	r0, r3
    2288:	b280      	uxth	r0, r0
    228a:	47b8      	blx	r7
			for(int j=0;j<8;j++)
    228c:	3c01      	subs	r4, #1
    228e:	d30c      	bcc.n	22aa <blinkCursor+0x102>
				if((CodePage437[character][i]&(1<<(7-j)))!=0)
    2290:	782b      	ldrb	r3, [r5, #0]
    2292:	4123      	asrs	r3, r4
    2294:	07db      	lsls	r3, r3, #31
    2296:	d5f1      	bpl.n	227c <blinkCursor+0xd4>
					setPixel((fore_Color_High<<8)|fore_Color_Low);
    2298:	8830      	ldrh	r0, [r6, #0]
    229a:	0200      	lsls	r0, r0, #8
    229c:	4b17      	ldr	r3, [pc, #92]	; (22fc <blinkCursor+0x154>)
    229e:	881b      	ldrh	r3, [r3, #0]
    22a0:	4318      	orrs	r0, r3
    22a2:	b280      	uxth	r0, r0
    22a4:	4b13      	ldr	r3, [pc, #76]	; (22f4 <blinkCursor+0x14c>)
    22a6:	4798      	blx	r3
    22a8:	e7f0      	b.n	228c <blinkCursor+0xe4>
    22aa:	3501      	adds	r5, #1
		for(uint16_t i=0; i <= 24; i++)
    22ac:	4555      	cmp	r5, sl
    22ae:	d001      	beq.n	22b4 <blinkCursor+0x10c>
{
    22b0:	2407      	movs	r4, #7
    22b2:	e7ed      	b.n	2290 <blinkCursor+0xe8>
				}
			}
		}
	}

	REG_PORT_OUTSET1 = LCD_CS;
    22b4:	2280      	movs	r2, #128	; 0x80
    22b6:	03d2      	lsls	r2, r2, #15
    22b8:	4b11      	ldr	r3, [pc, #68]	; (2300 <blinkCursor+0x158>)
    22ba:	601a      	str	r2, [r3, #0]
	
	//invert cursorBlinkState
	cursorBlinkState = !cursorBlinkState;
    22bc:	4a09      	ldr	r2, [pc, #36]	; (22e4 <blinkCursor+0x13c>)
    22be:	7813      	ldrb	r3, [r2, #0]
    22c0:	2101      	movs	r1, #1
    22c2:	404b      	eors	r3, r1
    22c4:	7013      	strb	r3, [r2, #0]
	
}
    22c6:	bc1c      	pop	{r2, r3, r4}
    22c8:	4690      	mov	r8, r2
    22ca:	4699      	mov	r9, r3
    22cc:	46a2      	mov	sl, r4
    22ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    22d0:	20000298 	.word	0x20000298
    22d4:	2000029a 	.word	0x2000029a
    22d8:	20000314 	.word	0x20000314
    22dc:	00002a8d 	.word	0x00002a8d
    22e0:	41004494 	.word	0x41004494
    22e4:	20000010 	.word	0x20000010
    22e8:	00004cc0 	.word	0x00004cc0
    22ec:	20000a9a 	.word	0x20000a9a
    22f0:	20000a94 	.word	0x20000a94
    22f4:	00002c4d 	.word	0x00002c4d
    22f8:	20000a96 	.word	0x20000a96
    22fc:	20000a98 	.word	0x20000a98
    2300:	41004498 	.word	0x41004498

00002304 <writeString>:

void writeString(const char str[])
{
    2304:	b5f0      	push	{r4, r5, r6, r7, lr}
    2306:	46c6      	mov	lr, r8
    2308:	b500      	push	{lr}
    230a:	0005      	movs	r5, r0
	int length = strlen(str);
    230c:	4b0c      	ldr	r3, [pc, #48]	; (2340 <writeString+0x3c>)
    230e:	4798      	blx	r3
	for(int i = 0; i < length; i++)
    2310:	2800      	cmp	r0, #0
    2312:	dd11      	ble.n	2338 <writeString+0x34>
    2314:	002c      	movs	r4, r5
    2316:	182d      	adds	r5, r5, r0
	{
		drawChar(str[i]);
    2318:	4f0a      	ldr	r7, [pc, #40]	; (2344 <writeString+0x40>)
		if(xCharPos <= 80)
    231a:	4e0b      	ldr	r6, [pc, #44]	; (2348 <writeString+0x44>)
		xCharPos++;
    231c:	46b0      	mov	r8, r6
    231e:	e002      	b.n	2326 <writeString+0x22>
    2320:	3401      	adds	r4, #1
	for(int i = 0; i < length; i++)
    2322:	42ac      	cmp	r4, r5
    2324:	d008      	beq.n	2338 <writeString+0x34>
		drawChar(str[i]);
    2326:	7820      	ldrb	r0, [r4, #0]
    2328:	47b8      	blx	r7
		if(xCharPos <= 80)
    232a:	8833      	ldrh	r3, [r6, #0]
    232c:	2b50      	cmp	r3, #80	; 0x50
    232e:	d8f7      	bhi.n	2320 <writeString+0x1c>
		xCharPos++;
    2330:	3301      	adds	r3, #1
    2332:	4642      	mov	r2, r8
    2334:	8013      	strh	r3, [r2, #0]
    2336:	e7f3      	b.n	2320 <writeString+0x1c>
	}
}
    2338:	bc04      	pop	{r2}
    233a:	4690      	mov	r8, r2
    233c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    233e:	46c0      	nop			; (mov r8, r8)
    2340:	00003935 	.word	0x00003935
    2344:	00001f11 	.word	0x00001f11
    2348:	20000298 	.word	0x20000298

0000234c <scanCodesContains>:

bool scanCodesContains(int scanCode)
{
	for(int i = 0 ; i < 70 ; i++)
	{
		if(scanCodes[i] == scanCode)
    234c:	4b09      	ldr	r3, [pc, #36]	; (2374 <scanCodesContains+0x28>)
    234e:	681b      	ldr	r3, [r3, #0]
    2350:	4298      	cmp	r0, r3
    2352:	d00b      	beq.n	236c <scanCodesContains+0x20>
    2354:	4a07      	ldr	r2, [pc, #28]	; (2374 <scanCodesContains+0x28>)
    2356:	1d13      	adds	r3, r2, #4
    2358:	3219      	adds	r2, #25
    235a:	32ff      	adds	r2, #255	; 0xff
    235c:	6819      	ldr	r1, [r3, #0]
    235e:	4281      	cmp	r1, r0
    2360:	d006      	beq.n	2370 <scanCodesContains+0x24>
    2362:	3304      	adds	r3, #4
	for(int i = 0 ; i < 70 ; i++)
    2364:	4293      	cmp	r3, r2
    2366:	d1f9      	bne.n	235c <scanCodesContains+0x10>
		{
			return true;
		}
	}
	return false;
    2368:	2000      	movs	r0, #0
    236a:	e002      	b.n	2372 <scanCodesContains+0x26>
			return true;
    236c:	2001      	movs	r0, #1
    236e:	e000      	b.n	2372 <scanCodesContains+0x26>
    2370:	2001      	movs	r0, #1
}
    2372:	4770      	bx	lr
    2374:	2000003c 	.word	0x2000003c

00002378 <keyDown>:

bool keyDown(int scancode)
{
	for(int i = 0 ; i < 20 ; i++)
	{
		if(keyDownBuffer[i] == scancode)
    2378:	4b09      	ldr	r3, [pc, #36]	; (23a0 <keyDown+0x28>)
    237a:	781b      	ldrb	r3, [r3, #0]
    237c:	4298      	cmp	r0, r3
    237e:	d00a      	beq.n	2396 <keyDown+0x1e>
    2380:	4907      	ldr	r1, [pc, #28]	; (23a0 <keyDown+0x28>)
    2382:	1c4b      	adds	r3, r1, #1
    2384:	3114      	adds	r1, #20
    2386:	781a      	ldrb	r2, [r3, #0]
    2388:	4282      	cmp	r2, r0
    238a:	d006      	beq.n	239a <keyDown+0x22>
    238c:	3301      	adds	r3, #1
	for(int i = 0 ; i < 20 ; i++)
    238e:	428b      	cmp	r3, r1
    2390:	d1f9      	bne.n	2386 <keyDown+0xe>
		{
			return true;
		}	
	}
	return false;
    2392:	2000      	movs	r0, #0
}
    2394:	4770      	bx	lr
			return true;
    2396:	2001      	movs	r0, #1
    2398:	e7fc      	b.n	2394 <keyDown+0x1c>
    239a:	2001      	movs	r0, #1
    239c:	e7fa      	b.n	2394 <keyDown+0x1c>
    239e:	46c0      	nop			; (mov r8, r8)
    23a0:	20000014 	.word	0x20000014

000023a4 <printKeyboardBuffer>:
{
    23a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    23a6:	46de      	mov	lr, fp
    23a8:	4657      	mov	r7, sl
    23aa:	464e      	mov	r6, r9
    23ac:	4645      	mov	r5, r8
    23ae:	b5e0      	push	{r5, r6, r7, lr}
    23b0:	b0a7      	sub	sp, #156	; 0x9c
	unsigned char noCase[] =	  
    23b2:	4cc9      	ldr	r4, [pc, #804]	; (26d8 <printKeyboardBuffer+0x334>)
    23b4:	2246      	movs	r2, #70	; 0x46
    23b6:	0021      	movs	r1, r4
    23b8:	a814      	add	r0, sp, #80	; 0x50
    23ba:	4dc8      	ldr	r5, [pc, #800]	; (26dc <printKeyboardBuffer+0x338>)
    23bc:	47a8      	blx	r5
	unsigned char shiftCase[] = 
    23be:	0021      	movs	r1, r4
    23c0:	3148      	adds	r1, #72	; 0x48
    23c2:	2246      	movs	r2, #70	; 0x46
    23c4:	a802      	add	r0, sp, #8
    23c6:	47a8      	blx	r5
    23c8:	4fc5      	ldr	r7, [pc, #788]	; (26e0 <printKeyboardBuffer+0x33c>)
    23ca:	0038      	movs	r0, r7
    23cc:	3014      	adds	r0, #20
    23ce:	003d      	movs	r5, r7
	bool shifted = false;
    23d0:	2300      	movs	r3, #0
    23d2:	9301      	str	r3, [sp, #4]
    23d4:	e002      	b.n	23dc <printKeyboardBuffer+0x38>
    23d6:	3501      	adds	r5, #1
	for(int i=0; i<20; i++)
    23d8:	4285      	cmp	r5, r0
    23da:	d00b      	beq.n	23f4 <printKeyboardBuffer+0x50>
		if((scanCodeBuffer[i] == 13) | (scanCodeBuffer[i] == 49))
    23dc:	782b      	ldrb	r3, [r5, #0]
    23de:	001a      	movs	r2, r3
    23e0:	3a0d      	subs	r2, #13
    23e2:	4251      	negs	r1, r2
    23e4:	414a      	adcs	r2, r1
    23e6:	3b31      	subs	r3, #49	; 0x31
    23e8:	4259      	negs	r1, r3
    23ea:	414b      	adcs	r3, r1
    23ec:	4313      	orrs	r3, r2
    23ee:	d0f2      	beq.n	23d6 <printKeyboardBuffer+0x32>
			shifted = true;
    23f0:	9301      	str	r3, [sp, #4]
    23f2:	e7f0      	b.n	23d6 <printKeyboardBuffer+0x32>
    23f4:	4ebb      	ldr	r6, [pc, #748]	; (26e4 <printKeyboardBuffer+0x340>)
	for(int i=0; i<20; i++)
    23f6:	003c      	movs	r4, r7
		if(!keyDown(scanCodeBuffer[i]))
    23f8:	4bbb      	ldr	r3, [pc, #748]	; (26e8 <printKeyboardBuffer+0x344>)
    23fa:	469b      	mov	fp, r3
					consoleDisplay[xCharPos][yCharPos] = noCase[scanCodeBuffer[i]];
    23fc:	46b9      	mov	r9, r7
    23fe:	002f      	movs	r7, r5
    2400:	e008      	b.n	2414 <printKeyboardBuffer+0x70>
				if(xCharPos > 0) 
    2402:	4bba      	ldr	r3, [pc, #744]	; (26ec <printKeyboardBuffer+0x348>)
    2404:	881b      	ldrh	r3, [r3, #0]
    2406:	2b00      	cmp	r3, #0
    2408:	d159      	bne.n	24be <printKeyboardBuffer+0x11a>
    240a:	3401      	adds	r4, #1
    240c:	3601      	adds	r6, #1
	for(int i=0; i<20; i++)
    240e:	42bc      	cmp	r4, r7
    2410:	d100      	bne.n	2414 <printKeyboardBuffer+0x70>
    2412:	e1ad      	b.n	2770 <printKeyboardBuffer+0x3cc>
    2414:	9400      	str	r4, [sp, #0]
		if(!keyDown(scanCodeBuffer[i]))
    2416:	7825      	ldrb	r5, [r4, #0]
    2418:	0028      	movs	r0, r5
    241a:	47d8      	blx	fp
    241c:	2800      	cmp	r0, #0
    241e:	d1f4      	bne.n	240a <printKeyboardBuffer+0x66>
			keyDownBuffer[i] = scanCodeBuffer[i];
    2420:	7035      	strb	r5, [r6, #0]
			if(scanCodeBuffer[i] == 0xFF)
    2422:	2dff      	cmp	r5, #255	; 0xff
    2424:	d0f1      	beq.n	240a <printKeyboardBuffer+0x66>
			else if(scanCodeBuffer[i] == 35) //left
    2426:	2d23      	cmp	r5, #35	; 0x23
    2428:	d0eb      	beq.n	2402 <printKeyboardBuffer+0x5e>
			else if(scanCodeBuffer[i] == 45)	//down
    242a:	2d2d      	cmp	r5, #45	; 0x2d
    242c:	d063      	beq.n	24f6 <printKeyboardBuffer+0x152>
			else if(scanCodeBuffer[i] == 55)	//up
    242e:	2d37      	cmp	r5, #55	; 0x37
    2430:	d100      	bne.n	2434 <printKeyboardBuffer+0x90>
    2432:	e081      	b.n	2538 <printKeyboardBuffer+0x194>
			else if(scanCodeBuffer[i] == 65)	//right
    2434:	2d41      	cmp	r5, #65	; 0x41
    2436:	d100      	bne.n	243a <printKeyboardBuffer+0x96>
    2438:	e09f      	b.n	257a <printKeyboardBuffer+0x1d6>
			else if((scanCodeBuffer[i] == 49) | (scanCodeBuffer[i] == 13))
    243a:	2d31      	cmp	r5, #49	; 0x31
    243c:	d0e5      	beq.n	240a <printKeyboardBuffer+0x66>
    243e:	2d0d      	cmp	r5, #13
    2440:	d0e3      	beq.n	240a <printKeyboardBuffer+0x66>
			else if(scanCodeBuffer[i] == 58) //Return
    2442:	2d3a      	cmp	r5, #58	; 0x3a
    2444:	d100      	bne.n	2448 <printKeyboardBuffer+0xa4>
    2446:	e0b9      	b.n	25bc <printKeyboardBuffer+0x218>
			else if(scanCodeBuffer[i] == 69) //Line
    2448:	2d45      	cmp	r5, #69	; 0x45
    244a:	d100      	bne.n	244e <printKeyboardBuffer+0xaa>
    244c:	e0ed      	b.n	262a <printKeyboardBuffer+0x286>
			else if(scanCodeBuffer[i] == 66) //Backspace
    244e:	2d42      	cmp	r5, #66	; 0x42
    2450:	d100      	bne.n	2454 <printKeyboardBuffer+0xb0>
    2452:	e121      	b.n	2698 <printKeyboardBuffer+0x2f4>
				if(shifted)
    2454:	9b01      	ldr	r3, [sp, #4]
    2456:	2b00      	cmp	r3, #0
    2458:	d100      	bne.n	245c <printKeyboardBuffer+0xb8>
    245a:	e155      	b.n	2708 <printKeyboardBuffer+0x364>
					consoleDisplay[xCharPos][yCharPos] = shiftCase[scanCodeBuffer[i]];
    245c:	ab02      	add	r3, sp, #8
    245e:	5d58      	ldrb	r0, [r3, r5]
    2460:	4ba2      	ldr	r3, [pc, #648]	; (26ec <printKeyboardBuffer+0x348>)
    2462:	4698      	mov	r8, r3
    2464:	8819      	ldrh	r1, [r3, #0]
    2466:	4ba2      	ldr	r3, [pc, #648]	; (26f0 <printKeyboardBuffer+0x34c>)
    2468:	469a      	mov	sl, r3
    246a:	881a      	ldrh	r2, [r3, #0]
    246c:	004b      	lsls	r3, r1, #1
    246e:	185b      	adds	r3, r3, r1
    2470:	00db      	lsls	r3, r3, #3
    2472:	49a0      	ldr	r1, [pc, #640]	; (26f4 <printKeyboardBuffer+0x350>)
    2474:	468c      	mov	ip, r1
    2476:	4463      	add	r3, ip
    2478:	5498      	strb	r0, [r3, r2]
					printf("%c",consoleDisplay[xCharPos][yCharPos]);
    247a:	4b9f      	ldr	r3, [pc, #636]	; (26f8 <printKeyboardBuffer+0x354>)
    247c:	4798      	blx	r3
					drawChar(shiftCase[scanCodeBuffer[i]]);
    247e:	9b00      	ldr	r3, [sp, #0]
    2480:	781b      	ldrb	r3, [r3, #0]
    2482:	aa02      	add	r2, sp, #8
    2484:	5cd0      	ldrb	r0, [r2, r3]
    2486:	4d9d      	ldr	r5, [pc, #628]	; (26fc <printKeyboardBuffer+0x358>)
    2488:	47a8      	blx	r5
					xCharPos++;
    248a:	4643      	mov	r3, r8
    248c:	881b      	ldrh	r3, [r3, #0]
    248e:	3301      	adds	r3, #1
    2490:	b29b      	uxth	r3, r3
    2492:	4642      	mov	r2, r8
    2494:	8013      	strh	r3, [r2, #0]
					drawChar(consoleDisplay[xCharPos][yCharPos]);
    2496:	4652      	mov	r2, sl
    2498:	8811      	ldrh	r1, [r2, #0]
    249a:	005a      	lsls	r2, r3, #1
    249c:	18d3      	adds	r3, r2, r3
    249e:	00db      	lsls	r3, r3, #3
    24a0:	4a94      	ldr	r2, [pc, #592]	; (26f4 <printKeyboardBuffer+0x350>)
    24a2:	4694      	mov	ip, r2
    24a4:	4463      	add	r3, ip
    24a6:	5c58      	ldrb	r0, [r3, r1]
    24a8:	47a8      	blx	r5
					if(xCharPos > 79)
    24aa:	4643      	mov	r3, r8
    24ac:	881b      	ldrh	r3, [r3, #0]
    24ae:	2b4f      	cmp	r3, #79	; 0x4f
    24b0:	d902      	bls.n	24b8 <printKeyboardBuffer+0x114>
						xCharPos--;
    24b2:	3b01      	subs	r3, #1
    24b4:	4a8d      	ldr	r2, [pc, #564]	; (26ec <printKeyboardBuffer+0x348>)
    24b6:	8013      	strh	r3, [r2, #0]
					blinkCursor();
    24b8:	4b91      	ldr	r3, [pc, #580]	; (2700 <printKeyboardBuffer+0x35c>)
    24ba:	4798      	blx	r3
    24bc:	e7a5      	b.n	240a <printKeyboardBuffer+0x66>
					drawChar(consoleDisplay[xCharPos][yCharPos]);
    24be:	4d8d      	ldr	r5, [pc, #564]	; (26f4 <printKeyboardBuffer+0x350>)
    24c0:	4a8b      	ldr	r2, [pc, #556]	; (26f0 <printKeyboardBuffer+0x34c>)
    24c2:	4690      	mov	r8, r2
    24c4:	8811      	ldrh	r1, [r2, #0]
    24c6:	005a      	lsls	r2, r3, #1
    24c8:	18d3      	adds	r3, r2, r3
    24ca:	00db      	lsls	r3, r3, #3
    24cc:	18eb      	adds	r3, r5, r3
    24ce:	5c58      	ldrb	r0, [r3, r1]
    24d0:	4b8a      	ldr	r3, [pc, #552]	; (26fc <printKeyboardBuffer+0x358>)
    24d2:	469a      	mov	sl, r3
    24d4:	4798      	blx	r3
					xCharPos--;
    24d6:	4a85      	ldr	r2, [pc, #532]	; (26ec <printKeyboardBuffer+0x348>)
    24d8:	8813      	ldrh	r3, [r2, #0]
    24da:	3b01      	subs	r3, #1
    24dc:	b29b      	uxth	r3, r3
    24de:	8013      	strh	r3, [r2, #0]
					tempCharacter = consoleDisplay[xCharPos][yCharPos];
    24e0:	4642      	mov	r2, r8
    24e2:	8811      	ldrh	r1, [r2, #0]
    24e4:	005a      	lsls	r2, r3, #1
    24e6:	18d3      	adds	r3, r2, r3
    24e8:	00db      	lsls	r3, r3, #3
    24ea:	18eb      	adds	r3, r5, r3
					drawChar(tempCharacter);
    24ec:	5c58      	ldrb	r0, [r3, r1]
    24ee:	47d0      	blx	sl
					blinkCursor();
    24f0:	4b83      	ldr	r3, [pc, #524]	; (2700 <printKeyboardBuffer+0x35c>)
    24f2:	4798      	blx	r3
    24f4:	e789      	b.n	240a <printKeyboardBuffer+0x66>
				if(yCharPos < 23)
    24f6:	4b7e      	ldr	r3, [pc, #504]	; (26f0 <printKeyboardBuffer+0x34c>)
    24f8:	881a      	ldrh	r2, [r3, #0]
    24fa:	2a16      	cmp	r2, #22
    24fc:	d900      	bls.n	2500 <printKeyboardBuffer+0x15c>
    24fe:	e784      	b.n	240a <printKeyboardBuffer+0x66>
					drawChar(consoleDisplay[xCharPos][yCharPos]);
    2500:	4d7c      	ldr	r5, [pc, #496]	; (26f4 <printKeyboardBuffer+0x350>)
    2502:	4b7a      	ldr	r3, [pc, #488]	; (26ec <printKeyboardBuffer+0x348>)
    2504:	4698      	mov	r8, r3
    2506:	8819      	ldrh	r1, [r3, #0]
    2508:	004b      	lsls	r3, r1, #1
    250a:	185b      	adds	r3, r3, r1
    250c:	00db      	lsls	r3, r3, #3
    250e:	18eb      	adds	r3, r5, r3
    2510:	5c98      	ldrb	r0, [r3, r2]
    2512:	4b7a      	ldr	r3, [pc, #488]	; (26fc <printKeyboardBuffer+0x358>)
    2514:	469a      	mov	sl, r3
    2516:	4798      	blx	r3
					yCharPos++;
    2518:	4a75      	ldr	r2, [pc, #468]	; (26f0 <printKeyboardBuffer+0x34c>)
    251a:	8813      	ldrh	r3, [r2, #0]
    251c:	3301      	adds	r3, #1
    251e:	b29b      	uxth	r3, r3
    2520:	8013      	strh	r3, [r2, #0]
					tempCharacter = consoleDisplay[xCharPos][yCharPos];
    2522:	4642      	mov	r2, r8
    2524:	8811      	ldrh	r1, [r2, #0]
    2526:	004a      	lsls	r2, r1, #1
    2528:	1852      	adds	r2, r2, r1
    252a:	00d2      	lsls	r2, r2, #3
    252c:	18ad      	adds	r5, r5, r2
					drawChar(tempCharacter);
    252e:	5ce8      	ldrb	r0, [r5, r3]
    2530:	47d0      	blx	sl
					blinkCursor();
    2532:	4b73      	ldr	r3, [pc, #460]	; (2700 <printKeyboardBuffer+0x35c>)
    2534:	4798      	blx	r3
    2536:	e768      	b.n	240a <printKeyboardBuffer+0x66>
				if(yCharPos > 0)
    2538:	4b6d      	ldr	r3, [pc, #436]	; (26f0 <printKeyboardBuffer+0x34c>)
    253a:	881b      	ldrh	r3, [r3, #0]
    253c:	2b00      	cmp	r3, #0
    253e:	d100      	bne.n	2542 <printKeyboardBuffer+0x19e>
    2540:	e763      	b.n	240a <printKeyboardBuffer+0x66>
					drawChar(consoleDisplay[xCharPos][yCharPos]);
    2542:	4d6c      	ldr	r5, [pc, #432]	; (26f4 <printKeyboardBuffer+0x350>)
    2544:	4a69      	ldr	r2, [pc, #420]	; (26ec <printKeyboardBuffer+0x348>)
    2546:	4690      	mov	r8, r2
    2548:	8811      	ldrh	r1, [r2, #0]
    254a:	004a      	lsls	r2, r1, #1
    254c:	1852      	adds	r2, r2, r1
    254e:	00d2      	lsls	r2, r2, #3
    2550:	18aa      	adds	r2, r5, r2
    2552:	5cd0      	ldrb	r0, [r2, r3]
    2554:	4b69      	ldr	r3, [pc, #420]	; (26fc <printKeyboardBuffer+0x358>)
    2556:	469a      	mov	sl, r3
    2558:	4798      	blx	r3
					yCharPos--;
    255a:	4a65      	ldr	r2, [pc, #404]	; (26f0 <printKeyboardBuffer+0x34c>)
    255c:	8813      	ldrh	r3, [r2, #0]
    255e:	3b01      	subs	r3, #1
    2560:	b29b      	uxth	r3, r3
    2562:	8013      	strh	r3, [r2, #0]
					tempCharacter = consoleDisplay[xCharPos][yCharPos];
    2564:	4642      	mov	r2, r8
    2566:	8811      	ldrh	r1, [r2, #0]
    2568:	004a      	lsls	r2, r1, #1
    256a:	1852      	adds	r2, r2, r1
    256c:	00d2      	lsls	r2, r2, #3
    256e:	18ad      	adds	r5, r5, r2
					drawChar(tempCharacter);
    2570:	5ce8      	ldrb	r0, [r5, r3]
    2572:	47d0      	blx	sl
					blinkCursor();				
    2574:	4b62      	ldr	r3, [pc, #392]	; (2700 <printKeyboardBuffer+0x35c>)
    2576:	4798      	blx	r3
    2578:	e747      	b.n	240a <printKeyboardBuffer+0x66>
				if(xCharPos < 79)
    257a:	4b5c      	ldr	r3, [pc, #368]	; (26ec <printKeyboardBuffer+0x348>)
    257c:	881b      	ldrh	r3, [r3, #0]
    257e:	2b4e      	cmp	r3, #78	; 0x4e
    2580:	d900      	bls.n	2584 <printKeyboardBuffer+0x1e0>
    2582:	e742      	b.n	240a <printKeyboardBuffer+0x66>
					drawChar(consoleDisplay[xCharPos][yCharPos]);
    2584:	4d5b      	ldr	r5, [pc, #364]	; (26f4 <printKeyboardBuffer+0x350>)
    2586:	4a5a      	ldr	r2, [pc, #360]	; (26f0 <printKeyboardBuffer+0x34c>)
    2588:	4690      	mov	r8, r2
    258a:	8811      	ldrh	r1, [r2, #0]
    258c:	005a      	lsls	r2, r3, #1
    258e:	18d3      	adds	r3, r2, r3
    2590:	00db      	lsls	r3, r3, #3
    2592:	18eb      	adds	r3, r5, r3
    2594:	5c58      	ldrb	r0, [r3, r1]
    2596:	4b59      	ldr	r3, [pc, #356]	; (26fc <printKeyboardBuffer+0x358>)
    2598:	469a      	mov	sl, r3
    259a:	4798      	blx	r3
					xCharPos++;
    259c:	4a53      	ldr	r2, [pc, #332]	; (26ec <printKeyboardBuffer+0x348>)
    259e:	8813      	ldrh	r3, [r2, #0]
    25a0:	3301      	adds	r3, #1
    25a2:	b29b      	uxth	r3, r3
    25a4:	8013      	strh	r3, [r2, #0]
					tempCharacter = consoleDisplay[xCharPos][yCharPos];
    25a6:	4642      	mov	r2, r8
    25a8:	8811      	ldrh	r1, [r2, #0]
    25aa:	005a      	lsls	r2, r3, #1
    25ac:	18d3      	adds	r3, r2, r3
    25ae:	00db      	lsls	r3, r3, #3
    25b0:	18eb      	adds	r3, r5, r3
					drawChar(tempCharacter);
    25b2:	5c58      	ldrb	r0, [r3, r1]
    25b4:	47d0      	blx	sl
					blinkCursor();					
    25b6:	4b52      	ldr	r3, [pc, #328]	; (2700 <printKeyboardBuffer+0x35c>)
    25b8:	4798      	blx	r3
    25ba:	e726      	b.n	240a <printKeyboardBuffer+0x66>
				if(yCharPos == 23)
    25bc:	4b4c      	ldr	r3, [pc, #304]	; (26f0 <printKeyboardBuffer+0x34c>)
    25be:	881a      	ldrh	r2, [r3, #0]
    25c0:	2a17      	cmp	r2, #23
    25c2:	d01b      	beq.n	25fc <printKeyboardBuffer+0x258>
					drawChar(consoleDisplay[xCharPos][yCharPos]);
    25c4:	4d4b      	ldr	r5, [pc, #300]	; (26f4 <printKeyboardBuffer+0x350>)
    25c6:	4b49      	ldr	r3, [pc, #292]	; (26ec <printKeyboardBuffer+0x348>)
    25c8:	4698      	mov	r8, r3
    25ca:	8819      	ldrh	r1, [r3, #0]
    25cc:	004b      	lsls	r3, r1, #1
    25ce:	185b      	adds	r3, r3, r1
    25d0:	00db      	lsls	r3, r3, #3
    25d2:	18eb      	adds	r3, r5, r3
    25d4:	5c98      	ldrb	r0, [r3, r2]
    25d6:	4b49      	ldr	r3, [pc, #292]	; (26fc <printKeyboardBuffer+0x358>)
    25d8:	469a      	mov	sl, r3
    25da:	4798      	blx	r3
					yCharPos++;
    25dc:	4a44      	ldr	r2, [pc, #272]	; (26f0 <printKeyboardBuffer+0x34c>)
    25de:	8813      	ldrh	r3, [r2, #0]
    25e0:	3301      	adds	r3, #1
    25e2:	b29b      	uxth	r3, r3
    25e4:	8013      	strh	r3, [r2, #0]
					xCharPos = 0;
    25e6:	2200      	movs	r2, #0
    25e8:	4641      	mov	r1, r8
    25ea:	800a      	strh	r2, [r1, #0]
					drawChar(consoleDisplay[xCharPos][yCharPos]);
    25ec:	5ce8      	ldrb	r0, [r5, r3]
    25ee:	47d0      	blx	sl
					blinkCursor();
    25f0:	4b43      	ldr	r3, [pc, #268]	; (2700 <printKeyboardBuffer+0x35c>)
    25f2:	4798      	blx	r3
					printf("\r");
    25f4:	200d      	movs	r0, #13
    25f6:	4b40      	ldr	r3, [pc, #256]	; (26f8 <printKeyboardBuffer+0x354>)
    25f8:	4798      	blx	r3
    25fa:	e706      	b.n	240a <printKeyboardBuffer+0x66>
					drawChar(consoleDisplay[xCharPos][yCharPos]);
    25fc:	4d3b      	ldr	r5, [pc, #236]	; (26ec <printKeyboardBuffer+0x348>)
    25fe:	882a      	ldrh	r2, [r5, #0]
    2600:	0053      	lsls	r3, r2, #1
    2602:	189b      	adds	r3, r3, r2
    2604:	00db      	lsls	r3, r3, #3
    2606:	4a3b      	ldr	r2, [pc, #236]	; (26f4 <printKeyboardBuffer+0x350>)
    2608:	18d3      	adds	r3, r2, r3
    260a:	7dd8      	ldrb	r0, [r3, #23]
    260c:	4b3b      	ldr	r3, [pc, #236]	; (26fc <printKeyboardBuffer+0x358>)
    260e:	4698      	mov	r8, r3
    2610:	4798      	blx	r3
					newLine();
    2612:	4b3c      	ldr	r3, [pc, #240]	; (2704 <printKeyboardBuffer+0x360>)
    2614:	4798      	blx	r3
					xCharPos = 0;
    2616:	2300      	movs	r3, #0
    2618:	802b      	strh	r3, [r5, #0]
					drawChar(0x00);
    261a:	2000      	movs	r0, #0
    261c:	47c0      	blx	r8
					blinkCursor();
    261e:	4b38      	ldr	r3, [pc, #224]	; (2700 <printKeyboardBuffer+0x35c>)
    2620:	4798      	blx	r3
					printf("\r");
    2622:	200d      	movs	r0, #13
    2624:	4b34      	ldr	r3, [pc, #208]	; (26f8 <printKeyboardBuffer+0x354>)
    2626:	4798      	blx	r3
    2628:	e6ef      	b.n	240a <printKeyboardBuffer+0x66>
				if(yCharPos == 23)
    262a:	4b31      	ldr	r3, [pc, #196]	; (26f0 <printKeyboardBuffer+0x34c>)
    262c:	881a      	ldrh	r2, [r3, #0]
    262e:	2a17      	cmp	r2, #23
    2630:	d01e      	beq.n	2670 <printKeyboardBuffer+0x2cc>
					drawChar(consoleDisplay[xCharPos][yCharPos]);
    2632:	4d30      	ldr	r5, [pc, #192]	; (26f4 <printKeyboardBuffer+0x350>)
    2634:	4b2d      	ldr	r3, [pc, #180]	; (26ec <printKeyboardBuffer+0x348>)
    2636:	4698      	mov	r8, r3
    2638:	8819      	ldrh	r1, [r3, #0]
    263a:	004b      	lsls	r3, r1, #1
    263c:	185b      	adds	r3, r3, r1
    263e:	00db      	lsls	r3, r3, #3
    2640:	18eb      	adds	r3, r5, r3
    2642:	5c98      	ldrb	r0, [r3, r2]
    2644:	4b2d      	ldr	r3, [pc, #180]	; (26fc <printKeyboardBuffer+0x358>)
    2646:	469a      	mov	sl, r3
    2648:	4798      	blx	r3
					yCharPos++;
    264a:	4a29      	ldr	r2, [pc, #164]	; (26f0 <printKeyboardBuffer+0x34c>)
    264c:	8813      	ldrh	r3, [r2, #0]
    264e:	3301      	adds	r3, #1
    2650:	b29b      	uxth	r3, r3
    2652:	8013      	strh	r3, [r2, #0]
					drawChar(consoleDisplay[xCharPos][yCharPos]);
    2654:	4642      	mov	r2, r8
    2656:	8811      	ldrh	r1, [r2, #0]
    2658:	004a      	lsls	r2, r1, #1
    265a:	1852      	adds	r2, r2, r1
    265c:	00d2      	lsls	r2, r2, #3
    265e:	18ad      	adds	r5, r5, r2
    2660:	5ce8      	ldrb	r0, [r5, r3]
    2662:	47d0      	blx	sl
					blinkCursor();
    2664:	4b26      	ldr	r3, [pc, #152]	; (2700 <printKeyboardBuffer+0x35c>)
    2666:	4798      	blx	r3
					printf("\n");
    2668:	200a      	movs	r0, #10
    266a:	4b23      	ldr	r3, [pc, #140]	; (26f8 <printKeyboardBuffer+0x354>)
    266c:	4798      	blx	r3
    266e:	e6cc      	b.n	240a <printKeyboardBuffer+0x66>
					drawChar(consoleDisplay[xCharPos][yCharPos]);
    2670:	4b1e      	ldr	r3, [pc, #120]	; (26ec <printKeyboardBuffer+0x348>)
    2672:	881a      	ldrh	r2, [r3, #0]
    2674:	0053      	lsls	r3, r2, #1
    2676:	189b      	adds	r3, r3, r2
    2678:	00db      	lsls	r3, r3, #3
    267a:	4a1e      	ldr	r2, [pc, #120]	; (26f4 <printKeyboardBuffer+0x350>)
    267c:	18d3      	adds	r3, r2, r3
    267e:	7dd8      	ldrb	r0, [r3, #23]
    2680:	4d1e      	ldr	r5, [pc, #120]	; (26fc <printKeyboardBuffer+0x358>)
    2682:	47a8      	blx	r5
					newLine();
    2684:	4b1f      	ldr	r3, [pc, #124]	; (2704 <printKeyboardBuffer+0x360>)
    2686:	4798      	blx	r3
					drawChar(0x00);
    2688:	2000      	movs	r0, #0
    268a:	47a8      	blx	r5
					blinkCursor();
    268c:	4b1c      	ldr	r3, [pc, #112]	; (2700 <printKeyboardBuffer+0x35c>)
    268e:	4798      	blx	r3
					printf("\n");
    2690:	200a      	movs	r0, #10
    2692:	4b19      	ldr	r3, [pc, #100]	; (26f8 <printKeyboardBuffer+0x354>)
    2694:	4798      	blx	r3
    2696:	e6b8      	b.n	240a <printKeyboardBuffer+0x66>
				drawChar(consoleDisplay[xCharPos][yCharPos]);
    2698:	4d16      	ldr	r5, [pc, #88]	; (26f4 <printKeyboardBuffer+0x350>)
    269a:	4b14      	ldr	r3, [pc, #80]	; (26ec <printKeyboardBuffer+0x348>)
    269c:	4698      	mov	r8, r3
    269e:	8819      	ldrh	r1, [r3, #0]
    26a0:	4b13      	ldr	r3, [pc, #76]	; (26f0 <printKeyboardBuffer+0x34c>)
    26a2:	469a      	mov	sl, r3
    26a4:	881a      	ldrh	r2, [r3, #0]
    26a6:	004b      	lsls	r3, r1, #1
    26a8:	185b      	adds	r3, r3, r1
    26aa:	00db      	lsls	r3, r3, #3
    26ac:	18eb      	adds	r3, r5, r3
    26ae:	5c98      	ldrb	r0, [r3, r2]
    26b0:	4b12      	ldr	r3, [pc, #72]	; (26fc <printKeyboardBuffer+0x358>)
    26b2:	4798      	blx	r3
				xCharPos--;
    26b4:	4643      	mov	r3, r8
    26b6:	881b      	ldrh	r3, [r3, #0]
    26b8:	3b01      	subs	r3, #1
    26ba:	b29b      	uxth	r3, r3
    26bc:	4642      	mov	r2, r8
    26be:	8013      	strh	r3, [r2, #0]
				tempCharacter = consoleDisplay[xCharPos][yCharPos];
    26c0:	4652      	mov	r2, sl
    26c2:	8811      	ldrh	r1, [r2, #0]
    26c4:	005a      	lsls	r2, r3, #1
    26c6:	18d3      	adds	r3, r2, r3
    26c8:	00db      	lsls	r3, r3, #3
    26ca:	18eb      	adds	r3, r5, r3
				drawChar(tempCharacter);
    26cc:	5c58      	ldrb	r0, [r3, r1]
    26ce:	4b0b      	ldr	r3, [pc, #44]	; (26fc <printKeyboardBuffer+0x358>)
    26d0:	4798      	blx	r3
				blinkCursor();
    26d2:	4b0b      	ldr	r3, [pc, #44]	; (2700 <printKeyboardBuffer+0x35c>)
    26d4:	4798      	blx	r3
    26d6:	e698      	b.n	240a <printKeyboardBuffer+0x66>
    26d8:	000065c0 	.word	0x000065c0
    26dc:	00003501 	.word	0x00003501
    26e0:	20000028 	.word	0x20000028
    26e4:	20000014 	.word	0x20000014
    26e8:	00002379 	.word	0x00002379
    26ec:	20000298 	.word	0x20000298
    26f0:	2000029a 	.word	0x2000029a
    26f4:	20000314 	.word	0x20000314
    26f8:	000036a9 	.word	0x000036a9
    26fc:	00001f11 	.word	0x00001f11
    2700:	000021a9 	.word	0x000021a9
    2704:	00001ff9 	.word	0x00001ff9
					consoleDisplay[xCharPos][yCharPos] = noCase[scanCodeBuffer[i]];
    2708:	ab02      	add	r3, sp, #8
    270a:	2248      	movs	r2, #72	; 0x48
    270c:	189b      	adds	r3, r3, r2
    270e:	5d58      	ldrb	r0, [r3, r5]
    2710:	4b1e      	ldr	r3, [pc, #120]	; (278c <printKeyboardBuffer+0x3e8>)
    2712:	8819      	ldrh	r1, [r3, #0]
    2714:	4b1e      	ldr	r3, [pc, #120]	; (2790 <printKeyboardBuffer+0x3ec>)
    2716:	4698      	mov	r8, r3
    2718:	881a      	ldrh	r2, [r3, #0]
    271a:	004b      	lsls	r3, r1, #1
    271c:	185b      	adds	r3, r3, r1
    271e:	00db      	lsls	r3, r3, #3
    2720:	491c      	ldr	r1, [pc, #112]	; (2794 <printKeyboardBuffer+0x3f0>)
    2722:	468c      	mov	ip, r1
    2724:	4463      	add	r3, ip
    2726:	5498      	strb	r0, [r3, r2]
					printf("%c",consoleDisplay[xCharPos][yCharPos]);
    2728:	4b1b      	ldr	r3, [pc, #108]	; (2798 <printKeyboardBuffer+0x3f4>)
    272a:	4798      	blx	r3
					drawChar(noCase[scanCodeBuffer[i]]);
    272c:	9b00      	ldr	r3, [sp, #0]
    272e:	781b      	ldrb	r3, [r3, #0]
    2730:	aa02      	add	r2, sp, #8
    2732:	2148      	movs	r1, #72	; 0x48
    2734:	1852      	adds	r2, r2, r1
    2736:	5cd0      	ldrb	r0, [r2, r3]
    2738:	4d18      	ldr	r5, [pc, #96]	; (279c <printKeyboardBuffer+0x3f8>)
    273a:	47a8      	blx	r5
					xCharPos++;
    273c:	4b13      	ldr	r3, [pc, #76]	; (278c <printKeyboardBuffer+0x3e8>)
    273e:	881b      	ldrh	r3, [r3, #0]
    2740:	3301      	adds	r3, #1
    2742:	b29a      	uxth	r2, r3
    2744:	4b11      	ldr	r3, [pc, #68]	; (278c <printKeyboardBuffer+0x3e8>)
    2746:	801a      	strh	r2, [r3, #0]
					drawChar(consoleDisplay[xCharPos][yCharPos]);
    2748:	4643      	mov	r3, r8
    274a:	8819      	ldrh	r1, [r3, #0]
    274c:	0053      	lsls	r3, r2, #1
    274e:	189b      	adds	r3, r3, r2
    2750:	00db      	lsls	r3, r3, #3
    2752:	4a10      	ldr	r2, [pc, #64]	; (2794 <printKeyboardBuffer+0x3f0>)
    2754:	4694      	mov	ip, r2
    2756:	4463      	add	r3, ip
    2758:	5c58      	ldrb	r0, [r3, r1]
    275a:	47a8      	blx	r5
					if(xCharPos > 79)
    275c:	4b0b      	ldr	r3, [pc, #44]	; (278c <printKeyboardBuffer+0x3e8>)
    275e:	881b      	ldrh	r3, [r3, #0]
    2760:	2b4f      	cmp	r3, #79	; 0x4f
    2762:	d902      	bls.n	276a <printKeyboardBuffer+0x3c6>
						xCharPos--;
    2764:	3b01      	subs	r3, #1
    2766:	4a09      	ldr	r2, [pc, #36]	; (278c <printKeyboardBuffer+0x3e8>)
    2768:	8013      	strh	r3, [r2, #0]
					blinkCursor();
    276a:	4b0d      	ldr	r3, [pc, #52]	; (27a0 <printKeyboardBuffer+0x3fc>)
    276c:	4798      	blx	r3
    276e:	e64c      	b.n	240a <printKeyboardBuffer+0x66>
    2770:	464f      	mov	r7, r9
		scanCodeBuffer[i] = 0xFF;
    2772:	23ff      	movs	r3, #255	; 0xff
    2774:	703b      	strb	r3, [r7, #0]
    2776:	3701      	adds	r7, #1
	for(int i = 0 ; i < 20 ; i++)
    2778:	42bc      	cmp	r4, r7
    277a:	d1fb      	bne.n	2774 <printKeyboardBuffer+0x3d0>
}
    277c:	b027      	add	sp, #156	; 0x9c
    277e:	bc3c      	pop	{r2, r3, r4, r5}
    2780:	4690      	mov	r8, r2
    2782:	4699      	mov	r9, r3
    2784:	46a2      	mov	sl, r4
    2786:	46ab      	mov	fp, r5
    2788:	bdf0      	pop	{r4, r5, r6, r7, pc}
    278a:	46c0      	nop			; (mov r8, r8)
    278c:	20000298 	.word	0x20000298
    2790:	2000029a 	.word	0x2000029a
    2794:	20000314 	.word	0x20000314
    2798:	000036a9 	.word	0x000036a9
    279c:	00001f11 	.word	0x00001f11
    27a0:	000021a9 	.word	0x000021a9

000027a4 <removeFromKeyDown>:

void removeFromKeyDown(int scancode)
{
    27a4:	b510      	push	{r4, lr}
    27a6:	4b07      	ldr	r3, [pc, #28]	; (27c4 <removeFromKeyDown+0x20>)
    27a8:	0019      	movs	r1, r3
    27aa:	3114      	adds	r1, #20
	for(int i = 0 ; i < 20 ; i++)
	{
		if(keyDownBuffer[i] == scancode)
		{
			keyDownBuffer[i] = 0xFF;
    27ac:	24ff      	movs	r4, #255	; 0xff
    27ae:	e002      	b.n	27b6 <removeFromKeyDown+0x12>
    27b0:	3301      	adds	r3, #1
	for(int i = 0 ; i < 20 ; i++)
    27b2:	428b      	cmp	r3, r1
    27b4:	d004      	beq.n	27c0 <removeFromKeyDown+0x1c>
		if(keyDownBuffer[i] == scancode)
    27b6:	781a      	ldrb	r2, [r3, #0]
    27b8:	4282      	cmp	r2, r0
    27ba:	d1f9      	bne.n	27b0 <removeFromKeyDown+0xc>
			keyDownBuffer[i] = 0xFF;
    27bc:	701c      	strb	r4, [r3, #0]
    27be:	e7f7      	b.n	27b0 <removeFromKeyDown+0xc>
		}
	}
    27c0:	bd10      	pop	{r4, pc}
    27c2:	46c0      	nop			; (mov r8, r8)
    27c4:	20000014 	.word	0x20000014

000027c8 <readKeyboard>:
{
    27c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    27ca:	46de      	mov	lr, fp
    27cc:	4657      	mov	r7, sl
    27ce:	464e      	mov	r6, r9
    27d0:	4645      	mov	r5, r8
    27d2:	b5e0      	push	{r5, r6, r7, lr}
    27d4:	b083      	sub	sp, #12
    27d6:	4e6d      	ldr	r6, [pc, #436]	; (298c <readKeyboard+0x1c4>)
    27d8:	0031      	movs	r1, r6
    27da:	3119      	adds	r1, #25
    27dc:	31ff      	adds	r1, #255	; 0xff
    27de:	0033      	movs	r3, r6
		scanCodes[i] = 0xFF;
    27e0:	22ff      	movs	r2, #255	; 0xff
    27e2:	c304      	stmia	r3!, {r2}
	for(i = 0 ; i < 70 ; i++)
    27e4:	428b      	cmp	r3, r1
    27e6:	d1fc      	bne.n	27e2 <readKeyboard+0x1a>
	PORT->Group[0].WRCONFIG.bit.DRVSTR = 1;
    27e8:	4a69      	ldr	r2, [pc, #420]	; (2990 <readKeyboard+0x1c8>)
    27ea:	6a91      	ldr	r1, [r2, #40]	; 0x28
    27ec:	2380      	movs	r3, #128	; 0x80
    27ee:	03db      	lsls	r3, r3, #15
    27f0:	430b      	orrs	r3, r1
    27f2:	6293      	str	r3, [r2, #40]	; 0x28
    27f4:	4c67      	ldr	r4, [pc, #412]	; (2994 <readKeyboard+0x1cc>)
    27f6:	341c      	adds	r4, #28
    27f8:	4b66      	ldr	r3, [pc, #408]	; (2994 <readKeyboard+0x1cc>)
		REG_PORT_DIRSET0 = kb_col[i];
    27fa:	4867      	ldr	r0, [pc, #412]	; (2998 <readKeyboard+0x1d0>)
		REG_PORT_OUTCLR0 = kb_col[i];
    27fc:	4967      	ldr	r1, [pc, #412]	; (299c <readKeyboard+0x1d4>)
		REG_PORT_DIRSET0 = kb_col[i];
    27fe:	681a      	ldr	r2, [r3, #0]
    2800:	6002      	str	r2, [r0, #0]
		REG_PORT_OUTCLR0 = kb_col[i];
    2802:	cb04      	ldmia	r3!, {r2}
    2804:	600a      	str	r2, [r1, #0]
	for (i = 0; i < NUM_COL; i++) {
    2806:	42a3      	cmp	r3, r4
    2808:	d1f9      	bne.n	27fe <readKeyboard+0x36>
    280a:	2200      	movs	r2, #0
		REG_PORT_DIRCLR0 = kb_row[i];
    280c:	4b64      	ldr	r3, [pc, #400]	; (29a0 <readKeyboard+0x1d8>)
    280e:	469c      	mov	ip, r3
    2810:	4f64      	ldr	r7, [pc, #400]	; (29a4 <readKeyboard+0x1dc>)
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.PULLEN = 1;
    2812:	4d65      	ldr	r5, [pc, #404]	; (29a8 <readKeyboard+0x1e0>)
    2814:	2404      	movs	r4, #4
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.INEN = 1;
    2816:	2002      	movs	r0, #2
		REG_PORT_DIRCLR0 = kb_row[i];
    2818:	4663      	mov	r3, ip
    281a:	58d3      	ldr	r3, [r2, r3]
    281c:	603b      	str	r3, [r7, #0]
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.PULLEN = 1;
    281e:	5953      	ldr	r3, [r2, r5]
    2820:	4962      	ldr	r1, [pc, #392]	; (29ac <readKeyboard+0x1e4>)
    2822:	4688      	mov	r8, r1
    2824:	4443      	add	r3, r8
    2826:	7819      	ldrb	r1, [r3, #0]
    2828:	4321      	orrs	r1, r4
    282a:	7019      	strb	r1, [r3, #0]
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.INEN = 1;
    282c:	7819      	ldrb	r1, [r3, #0]
    282e:	4301      	orrs	r1, r0
    2830:	7019      	strb	r1, [r3, #0]
    2832:	3204      	adds	r2, #4
	for (i = 0; i < NUM_ROW; i++) {
    2834:	2a28      	cmp	r2, #40	; 0x28
    2836:	d1ef      	bne.n	2818 <readKeyboard+0x50>
    2838:	4b56      	ldr	r3, [pc, #344]	; (2994 <readKeyboard+0x1cc>)
    283a:	4699      	mov	r9, r3
    283c:	2300      	movs	r3, #0
    283e:	4698      	mov	r8, r3
    2840:	2200      	movs	r2, #0
		REG_PORT_OUTSET0 = kb_col[i];
    2842:	4b5b      	ldr	r3, [pc, #364]	; (29b0 <readKeyboard+0x1e8>)
    2844:	469b      	mov	fp, r3
			if((PORT->Group[0].IN.reg & kb_row[j]) != 0) {
    2846:	4d52      	ldr	r5, [pc, #328]	; (2990 <readKeyboard+0x1c8>)
				scanCodes[scanCodeIndex] = (i * NUM_ROW) + j;
    2848:	4b50      	ldr	r3, [pc, #320]	; (298c <readKeyboard+0x1c4>)
    284a:	469c      	mov	ip, r3
		REG_PORT_OUTCLR0 = kb_col[i];
    284c:	4b53      	ldr	r3, [pc, #332]	; (299c <readKeyboard+0x1d4>)
    284e:	469a      	mov	sl, r3
    2850:	9601      	str	r6, [sp, #4]
    2852:	464e      	mov	r6, r9
    2854:	4647      	mov	r7, r8
    2856:	e015      	b.n	2884 <readKeyboard+0xbc>
    2858:	3304      	adds	r3, #4
    285a:	3101      	adds	r1, #1
		for (j = 0; j < NUM_ROW; j++) {	
    285c:	42a3      	cmp	r3, r4
    285e:	d008      	beq.n	2872 <readKeyboard+0xaa>
			if((PORT->Group[0].IN.reg & kb_row[j]) != 0) {
    2860:	6a28      	ldr	r0, [r5, #32]
    2862:	681e      	ldr	r6, [r3, #0]
    2864:	4206      	tst	r6, r0
    2866:	d0f7      	beq.n	2858 <readKeyboard+0x90>
				scanCodes[scanCodeIndex] = (i * NUM_ROW) + j;
    2868:	0090      	lsls	r0, r2, #2
    286a:	4666      	mov	r6, ip
    286c:	5181      	str	r1, [r0, r6]
				scanCodeIndex++;
    286e:	3201      	adds	r2, #1
    2870:	e7f2      	b.n	2858 <readKeyboard+0x90>
    2872:	9e00      	ldr	r6, [sp, #0]
		REG_PORT_OUTCLR0 = kb_col[i];
    2874:	4649      	mov	r1, r9
    2876:	6809      	ldr	r1, [r1, #0]
    2878:	4650      	mov	r0, sl
    287a:	6001      	str	r1, [r0, #0]
    287c:	3604      	adds	r6, #4
    287e:	370a      	adds	r7, #10
	for (i = 0; i < NUM_COL; i++) {
    2880:	2f46      	cmp	r7, #70	; 0x46
    2882:	d00a      	beq.n	289a <readKeyboard+0xd2>
    2884:	46b1      	mov	r9, r6
		REG_PORT_OUTSET0 = kb_col[i];
    2886:	465b      	mov	r3, fp
    2888:	6831      	ldr	r1, [r6, #0]
    288a:	6019      	str	r1, [r3, #0]
    288c:	4b44      	ldr	r3, [pc, #272]	; (29a0 <readKeyboard+0x1d8>)
    288e:	4698      	mov	r8, r3
    2890:	001c      	movs	r4, r3
    2892:	3428      	adds	r4, #40	; 0x28
    2894:	0039      	movs	r1, r7
    2896:	9600      	str	r6, [sp, #0]
    2898:	e7e2      	b.n	2860 <readKeyboard+0x98>
    289a:	4647      	mov	r7, r8
    289c:	9e01      	ldr	r6, [sp, #4]
    289e:	4641      	mov	r1, r8
		REG_PORT_DIRSET0 = kb_row[i];
    28a0:	4d3d      	ldr	r5, [pc, #244]	; (2998 <readKeyboard+0x1d0>)
		REG_PORT_OUTCLR0 = kb_row[i];
    28a2:	4c3e      	ldr	r4, [pc, #248]	; (299c <readKeyboard+0x1d4>)
		REG_PORT_DIRSET0 = kb_row[i];
    28a4:	6808      	ldr	r0, [r1, #0]
    28a6:	6028      	str	r0, [r5, #0]
		REG_PORT_OUTCLR0 = kb_row[i];
    28a8:	c901      	ldmia	r1!, {r0}
    28aa:	6020      	str	r0, [r4, #0]
	for (i = 0; i < NUM_ROW; i++) {
    28ac:	4299      	cmp	r1, r3
    28ae:	d1f9      	bne.n	28a4 <readKeyboard+0xdc>
    28b0:	2100      	movs	r1, #0
		REG_PORT_DIRCLR0 = kb_col[i];
    28b2:	4b38      	ldr	r3, [pc, #224]	; (2994 <readKeyboard+0x1cc>)
    28b4:	4699      	mov	r9, r3
    28b6:	4b3b      	ldr	r3, [pc, #236]	; (29a4 <readKeyboard+0x1dc>)
    28b8:	4698      	mov	r8, r3
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.PULLEN = 1;
    28ba:	4b3e      	ldr	r3, [pc, #248]	; (29b4 <readKeyboard+0x1ec>)
    28bc:	469c      	mov	ip, r3
    28be:	2504      	movs	r5, #4
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.INEN = 1;
    28c0:	2402      	movs	r4, #2
		REG_PORT_DIRCLR0 = kb_col[i];
    28c2:	4643      	mov	r3, r8
    28c4:	4648      	mov	r0, r9
    28c6:	5808      	ldr	r0, [r1, r0]
    28c8:	6018      	str	r0, [r3, #0]
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.PULLEN = 1;
    28ca:	4663      	mov	r3, ip
    28cc:	58cb      	ldr	r3, [r1, r3]
    28ce:	4837      	ldr	r0, [pc, #220]	; (29ac <readKeyboard+0x1e4>)
    28d0:	4682      	mov	sl, r0
    28d2:	4453      	add	r3, sl
    28d4:	7818      	ldrb	r0, [r3, #0]
    28d6:	4328      	orrs	r0, r5
    28d8:	7018      	strb	r0, [r3, #0]
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.INEN = 1;
    28da:	7818      	ldrb	r0, [r3, #0]
    28dc:	4320      	orrs	r0, r4
    28de:	7018      	strb	r0, [r3, #0]
    28e0:	3104      	adds	r1, #4
	for (i = 0; i < NUM_COL; i++) {
    28e2:	291c      	cmp	r1, #28
    28e4:	d1ed      	bne.n	28c2 <readKeyboard+0xfa>
    28e6:	2300      	movs	r3, #0
    28e8:	469c      	mov	ip, r3
		REG_PORT_OUTSET0 = kb_row[i];
    28ea:	4b31      	ldr	r3, [pc, #196]	; (29b0 <readKeyboard+0x1e8>)
    28ec:	469b      	mov	fp, r3
			if((PORT->Group[0].IN.reg & kb_col[j]) != 0)
    28ee:	4d28      	ldr	r5, [pc, #160]	; (2990 <readKeyboard+0x1c8>)
				scanCodes[scanCodeIndex] = (j * NUM_ROW) + i;
    28f0:	4b26      	ldr	r3, [pc, #152]	; (298c <readKeyboard+0x1c4>)
    28f2:	4698      	mov	r8, r3
		REG_PORT_OUTCLR0 = kb_row[i];
    28f4:	4b29      	ldr	r3, [pc, #164]	; (299c <readKeyboard+0x1d4>)
    28f6:	469a      	mov	sl, r3
    28f8:	46b1      	mov	r9, r6
    28fa:	003e      	movs	r6, r7
    28fc:	4667      	mov	r7, ip
    28fe:	e015      	b.n	292c <readKeyboard+0x164>
    2900:	3104      	adds	r1, #4
    2902:	330a      	adds	r3, #10
		for (j = 0; j < NUM_COL; j++) {
    2904:	42a3      	cmp	r3, r4
    2906:	d008      	beq.n	291a <readKeyboard+0x152>
			if((PORT->Group[0].IN.reg & kb_col[j]) != 0)
    2908:	6a28      	ldr	r0, [r5, #32]
    290a:	680e      	ldr	r6, [r1, #0]
    290c:	4206      	tst	r6, r0
    290e:	d0f7      	beq.n	2900 <readKeyboard+0x138>
				scanCodes[scanCodeIndex] = (j * NUM_ROW) + i;
    2910:	0090      	lsls	r0, r2, #2
    2912:	4646      	mov	r6, r8
    2914:	5183      	str	r3, [r0, r6]
				scanCodeIndex++;
    2916:	3201      	adds	r2, #1
    2918:	e7f2      	b.n	2900 <readKeyboard+0x138>
    291a:	9e00      	ldr	r6, [sp, #0]
		REG_PORT_OUTCLR0 = kb_row[i];
    291c:	4663      	mov	r3, ip
    291e:	681b      	ldr	r3, [r3, #0]
    2920:	4651      	mov	r1, sl
    2922:	600b      	str	r3, [r1, #0]
	for (i = 0; i < NUM_ROW; i++) {
    2924:	3701      	adds	r7, #1
    2926:	3604      	adds	r6, #4
    2928:	2f0a      	cmp	r7, #10
    292a:	d009      	beq.n	2940 <readKeyboard+0x178>
    292c:	46b4      	mov	ip, r6
		REG_PORT_OUTSET0 = kb_row[i];
    292e:	465b      	mov	r3, fp
    2930:	6831      	ldr	r1, [r6, #0]
    2932:	6019      	str	r1, [r3, #0]
    2934:	003b      	movs	r3, r7
    2936:	003c      	movs	r4, r7
    2938:	3446      	adds	r4, #70	; 0x46
    293a:	4916      	ldr	r1, [pc, #88]	; (2994 <readKeyboard+0x1cc>)
    293c:	9600      	str	r6, [sp, #0]
    293e:	e7e3      	b.n	2908 <readKeyboard+0x140>
    2940:	464e      	mov	r6, r9
	for(i = 0 ; i < scanCodeIndex ; i++)
    2942:	2a00      	cmp	r2, #0
    2944:	dd08      	ble.n	2958 <readKeyboard+0x190>
    2946:	4b1c      	ldr	r3, [pc, #112]	; (29b8 <readKeyboard+0x1f0>)
    2948:	0092      	lsls	r2, r2, #2
    294a:	4910      	ldr	r1, [pc, #64]	; (298c <readKeyboard+0x1c4>)
    294c:	188a      	adds	r2, r1, r2
		scanCodeBuffer[i] = scanCodes[i];	
    294e:	ce02      	ldmia	r6!, {r1}
    2950:	7019      	strb	r1, [r3, #0]
    2952:	3301      	adds	r3, #1
	for(i = 0 ; i < scanCodeIndex ; i++)
    2954:	42b2      	cmp	r2, r6
    2956:	d1fa      	bne.n	294e <readKeyboard+0x186>
		REG_PORT_OUTSET0 = kb_row[i];
    2958:	2400      	movs	r4, #0
		if(keyDown(i) && !scanCodesContains(i))
    295a:	4d18      	ldr	r5, [pc, #96]	; (29bc <readKeyboard+0x1f4>)
    295c:	4e18      	ldr	r6, [pc, #96]	; (29c0 <readKeyboard+0x1f8>)
			removeFromKeyDown(i);
    295e:	4f19      	ldr	r7, [pc, #100]	; (29c4 <readKeyboard+0x1fc>)
    2960:	e002      	b.n	2968 <readKeyboard+0x1a0>
	for(i = 0; i < 70; i++)
    2962:	3401      	adds	r4, #1
    2964:	2c46      	cmp	r4, #70	; 0x46
    2966:	d00a      	beq.n	297e <readKeyboard+0x1b6>
		if(keyDown(i) && !scanCodesContains(i))
    2968:	0020      	movs	r0, r4
    296a:	47a8      	blx	r5
    296c:	2800      	cmp	r0, #0
    296e:	d0f8      	beq.n	2962 <readKeyboard+0x19a>
    2970:	0020      	movs	r0, r4
    2972:	47b0      	blx	r6
    2974:	2800      	cmp	r0, #0
    2976:	d1f4      	bne.n	2962 <readKeyboard+0x19a>
			removeFromKeyDown(i);
    2978:	0020      	movs	r0, r4
    297a:	47b8      	blx	r7
    297c:	e7f1      	b.n	2962 <readKeyboard+0x19a>
}
    297e:	b003      	add	sp, #12
    2980:	bc3c      	pop	{r2, r3, r4, r5}
    2982:	4690      	mov	r8, r2
    2984:	4699      	mov	r9, r3
    2986:	46a2      	mov	sl, r4
    2988:	46ab      	mov	fp, r5
    298a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    298c:	2000003c 	.word	0x2000003c
    2990:	41004400 	.word	0x41004400
    2994:	00006650 	.word	0x00006650
    2998:	41004408 	.word	0x41004408
    299c:	41004414 	.word	0x41004414
    29a0:	00006688 	.word	0x00006688
    29a4:	41004404 	.word	0x41004404
    29a8:	000066b0 	.word	0x000066b0
    29ac:	41004440 	.word	0x41004440
    29b0:	41004418 	.word	0x41004418
    29b4:	0000666c 	.word	0x0000666c
    29b8:	20000028 	.word	0x20000028
    29bc:	00002379 	.word	0x00002379
    29c0:	0000234d 	.word	0x0000234d
    29c4:	000027a5 	.word	0x000027a5

000029c8 <setColorRGB>:

uint16_t fore_Color_High, fore_Color_Low;
uint16_t back_Color_High, back_Color_Low;

void setColorRGB(uint8_t r, uint8_t g, uint8_t b)
{
    29c8:	b510      	push	{r4, lr}
	fore_Color_High = ((r&248)|g>>5);
    29ca:	094b      	lsrs	r3, r1, #5
    29cc:	2407      	movs	r4, #7
    29ce:	43a0      	bics	r0, r4
    29d0:	4318      	orrs	r0, r3
    29d2:	4b05      	ldr	r3, [pc, #20]	; (29e8 <setColorRGB+0x20>)
    29d4:	8018      	strh	r0, [r3, #0]
	fore_Color_Low = ((g&28)<<3|b>>3);
    29d6:	00c9      	lsls	r1, r1, #3
    29d8:	23e0      	movs	r3, #224	; 0xe0
    29da:	4019      	ands	r1, r3
    29dc:	08d2      	lsrs	r2, r2, #3
    29de:	430a      	orrs	r2, r1
    29e0:	4b02      	ldr	r3, [pc, #8]	; (29ec <setColorRGB+0x24>)
    29e2:	801a      	strh	r2, [r3, #0]
}
    29e4:	bd10      	pop	{r4, pc}
    29e6:	46c0      	nop			; (mov r8, r8)
    29e8:	20000a96 	.word	0x20000a96
    29ec:	20000a98 	.word	0x20000a98

000029f0 <setBackColorRGB>:
	fore_Color_Low = (color & 0xFF);
}

void setBackColorRGB(unsigned char r,
unsigned char g, unsigned char b)
{
    29f0:	b510      	push	{r4, lr}
	back_Color_High = ((r&248)|g>>5);
    29f2:	094b      	lsrs	r3, r1, #5
    29f4:	2407      	movs	r4, #7
    29f6:	43a0      	bics	r0, r4
    29f8:	4318      	orrs	r0, r3
    29fa:	4b05      	ldr	r3, [pc, #20]	; (2a10 <setBackColorRGB+0x20>)
    29fc:	8018      	strh	r0, [r3, #0]
	back_Color_Low = ((g&28)<<3|b>>3);
    29fe:	00c9      	lsls	r1, r1, #3
    2a00:	23e0      	movs	r3, #224	; 0xe0
    2a02:	4019      	ands	r1, r3
    2a04:	08d2      	lsrs	r2, r2, #3
    2a06:	430a      	orrs	r2, r1
    2a08:	4b02      	ldr	r3, [pc, #8]	; (2a14 <setBackColorRGB+0x24>)
    2a0a:	801a      	strh	r2, [r3, #0]
}
    2a0c:	bd10      	pop	{r4, pc}
    2a0e:	46c0      	nop			; (mov r8, r8)
    2a10:	20000a9a 	.word	0x20000a9a
    2a14:	20000a94 	.word	0x20000a94

00002a18 <LCD_Fast_Fill>:
	(((long)(x2-x1)+1)*((long)(y2-y1)+1)));
	REG_PORT_OUTSET1 = LCD_CS;
}

void LCD_Fast_Fill(int ch, int cl, long pix)
{
    2a18:	b570      	push	{r4, r5, r6, lr}
	int blocks;
	
	
	REG_PORT_OUTCLR1 = 0x0000ffff;
    2a1a:	4c19      	ldr	r4, [pc, #100]	; (2a80 <LCD_Fast_Fill+0x68>)
    2a1c:	4b19      	ldr	r3, [pc, #100]	; (2a84 <LCD_Fast_Fill+0x6c>)
    2a1e:	601c      	str	r4, [r3, #0]
	REG_PORT_OUTSET1 = (ch << 8) | cl;
    2a20:	0200      	lsls	r0, r0, #8
    2a22:	4301      	orrs	r1, r0
    2a24:	4b18      	ldr	r3, [pc, #96]	; (2a88 <LCD_Fast_Fill+0x70>)
    2a26:	6019      	str	r1, [r3, #0]

	blocks = pix/16;
    2a28:	17d3      	asrs	r3, r2, #31
    2a2a:	260f      	movs	r6, #15
    2a2c:	401e      	ands	r6, r3
    2a2e:	18b6      	adds	r6, r6, r2
    2a30:	1136      	asrs	r6, r6, #4
	for (int i=0; i<blocks; i++)
    2a32:	2500      	movs	r5, #0
    2a34:	2e00      	cmp	r6, #0
    2a36:	dd0c      	ble.n	2a52 <LCD_Fast_Fill+0x3a>
	{
		for (int j=0; j<16; j++)
		{
			REG_PORT_OUTCLR1 = LCD_WR;
    2a38:	4c12      	ldr	r4, [pc, #72]	; (2a84 <LCD_Fast_Fill+0x6c>)
    2a3a:	2180      	movs	r1, #128	; 0x80
    2a3c:	0289      	lsls	r1, r1, #10
			REG_PORT_OUTSET1 = LCD_WR;
    2a3e:	4812      	ldr	r0, [pc, #72]	; (2a88 <LCD_Fast_Fill+0x70>)
{
    2a40:	2310      	movs	r3, #16
			REG_PORT_OUTCLR1 = LCD_WR;
    2a42:	6021      	str	r1, [r4, #0]
			REG_PORT_OUTSET1 = LCD_WR;
    2a44:	6001      	str	r1, [r0, #0]
    2a46:	3b01      	subs	r3, #1
		for (int j=0; j<16; j++)
    2a48:	2b00      	cmp	r3, #0
    2a4a:	d1fa      	bne.n	2a42 <LCD_Fast_Fill+0x2a>
	for (int i=0; i<blocks; i++)
    2a4c:	3501      	adds	r5, #1
    2a4e:	42ae      	cmp	r6, r5
    2a50:	d1f6      	bne.n	2a40 <LCD_Fast_Fill+0x28>
		}
	}
	
	if ((pix % 16) != 0)
    2a52:	0713      	lsls	r3, r2, #28
    2a54:	d013      	beq.n	2a7e <LCD_Fast_Fill+0x66>
	for (int i=0; i<(pix % 16)+1; i++)
    2a56:	17d3      	asrs	r3, r2, #31
    2a58:	0f1b      	lsrs	r3, r3, #28
    2a5a:	18d2      	adds	r2, r2, r3
    2a5c:	210f      	movs	r1, #15
    2a5e:	4011      	ands	r1, r2
    2a60:	1ac9      	subs	r1, r1, r3
    2a62:	1c4b      	adds	r3, r1, #1
    2a64:	2b00      	cmp	r3, #0
    2a66:	dd0a      	ble.n	2a7e <LCD_Fast_Fill+0x66>
    2a68:	0019      	movs	r1, r3
    2a6a:	2300      	movs	r3, #0
	{
		REG_PORT_OUTCLR1 = LCD_WR;
    2a6c:	4c05      	ldr	r4, [pc, #20]	; (2a84 <LCD_Fast_Fill+0x6c>)
    2a6e:	2280      	movs	r2, #128	; 0x80
    2a70:	0292      	lsls	r2, r2, #10
		REG_PORT_OUTSET1 = LCD_WR;
    2a72:	4805      	ldr	r0, [pc, #20]	; (2a88 <LCD_Fast_Fill+0x70>)
		REG_PORT_OUTCLR1 = LCD_WR;
    2a74:	6022      	str	r2, [r4, #0]
		REG_PORT_OUTSET1 = LCD_WR;
    2a76:	6002      	str	r2, [r0, #0]
	for (int i=0; i<(pix % 16)+1; i++)
    2a78:	3301      	adds	r3, #1
    2a7a:	4299      	cmp	r1, r3
    2a7c:	d1fa      	bne.n	2a74 <LCD_Fast_Fill+0x5c>
	}
}
    2a7e:	bd70      	pop	{r4, r5, r6, pc}
    2a80:	0000ffff 	.word	0x0000ffff
    2a84:	41004494 	.word	0x41004494
    2a88:	41004498 	.word	0x41004498

00002a8c <setXY>:
{
	setXY(0,0,display_X_size,display_Y_size);
}

void setXY(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
    2a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a8e:	b083      	sub	sp, #12
    2a90:	0007      	movs	r7, r0
    2a92:	9100      	str	r1, [sp, #0]
    2a94:	0016      	movs	r6, r2
    2a96:	9301      	str	r3, [sp, #4]
	y1=display_Y_size-y1;
	y2=display_Y_size-y2;
	SwapUint16(y1, y2);
	*/
	
	LCD_Write_COM16(0x2a,0x00);
    2a98:	2100      	movs	r1, #0
    2a9a:	202a      	movs	r0, #42	; 0x2a
    2a9c:	4c17      	ldr	r4, [pc, #92]	; (2afc <setXY+0x70>)
    2a9e:	47a0      	blx	r4
	LCD_Write_DATA8(x1>>8);
    2aa0:	0a38      	lsrs	r0, r7, #8
    2aa2:	4d17      	ldr	r5, [pc, #92]	; (2b00 <setXY+0x74>)
    2aa4:	47a8      	blx	r5
	LCD_Write_COM16(0x2a,0x01);
    2aa6:	2101      	movs	r1, #1
    2aa8:	202a      	movs	r0, #42	; 0x2a
    2aaa:	47a0      	blx	r4
	LCD_Write_DATA8(x1);
    2aac:	b2f8      	uxtb	r0, r7
    2aae:	47a8      	blx	r5
	LCD_Write_COM16(0x2a,0x02);
    2ab0:	2102      	movs	r1, #2
    2ab2:	202a      	movs	r0, #42	; 0x2a
    2ab4:	47a0      	blx	r4
	LCD_Write_DATA8(x2>>8);
    2ab6:	0a30      	lsrs	r0, r6, #8
    2ab8:	47a8      	blx	r5
	LCD_Write_COM16(0x2a,0x03);
    2aba:	2103      	movs	r1, #3
    2abc:	202a      	movs	r0, #42	; 0x2a
    2abe:	47a0      	blx	r4
	LCD_Write_DATA8(x2);
    2ac0:	b2f0      	uxtb	r0, r6
    2ac2:	47a8      	blx	r5

	LCD_Write_COM16(0x2b,0x00);
    2ac4:	2100      	movs	r1, #0
    2ac6:	202b      	movs	r0, #43	; 0x2b
    2ac8:	47a0      	blx	r4
	LCD_Write_DATA8(y1>>8);
    2aca:	9e00      	ldr	r6, [sp, #0]
    2acc:	0a30      	lsrs	r0, r6, #8
    2ace:	47a8      	blx	r5
	LCD_Write_COM16(0x2b,0x01);
    2ad0:	2101      	movs	r1, #1
    2ad2:	202b      	movs	r0, #43	; 0x2b
    2ad4:	47a0      	blx	r4
	LCD_Write_DATA8(y1);
    2ad6:	b2f0      	uxtb	r0, r6
    2ad8:	47a8      	blx	r5
	LCD_Write_COM16(0x2b,0x02);
    2ada:	2102      	movs	r1, #2
    2adc:	202b      	movs	r0, #43	; 0x2b
    2ade:	47a0      	blx	r4
	LCD_Write_DATA8(y2>>8);
    2ae0:	9e01      	ldr	r6, [sp, #4]
    2ae2:	0a30      	lsrs	r0, r6, #8
    2ae4:	47a8      	blx	r5
	LCD_Write_COM16(0x2b,0x03);
    2ae6:	2103      	movs	r1, #3
    2ae8:	202b      	movs	r0, #43	; 0x2b
    2aea:	47a0      	blx	r4
	LCD_Write_DATA8(y2);
    2aec:	b2f0      	uxtb	r0, r6
    2aee:	47a8      	blx	r5

	LCD_Write_COM16(0x2c,0x00);
    2af0:	2100      	movs	r1, #0
    2af2:	202c      	movs	r0, #44	; 0x2c
    2af4:	47a0      	blx	r4
}
    2af6:	b003      	add	sp, #12
    2af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2afa:	46c0      	nop			; (mov r8, r8)
    2afc:	00002cb9 	.word	0x00002cb9
    2b00:	00002ce9 	.word	0x00002ce9

00002b04 <fillRect>:
{
    2b04:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b06:	46ce      	mov	lr, r9
    2b08:	4647      	mov	r7, r8
    2b0a:	b580      	push	{r7, lr}
    2b0c:	b083      	sub	sp, #12
    2b0e:	0006      	movs	r6, r0
    2b10:	4689      	mov	r9, r1
    2b12:	0014      	movs	r4, r2
    2b14:	001d      	movs	r5, r3
	if (x1>x2)
    2b16:	4290      	cmp	r0, r2
    2b18:	dd01      	ble.n	2b1e <fillRect+0x1a>
		x1 = x2;
    2b1a:	0016      	movs	r6, r2
		x2 = temp;
    2b1c:	0004      	movs	r4, r0
	if (y1>y2)
    2b1e:	45a9      	cmp	r9, r5
    2b20:	dd02      	ble.n	2b28 <fillRect+0x24>
    2b22:	0033      	movs	r3, r6
		x1 = x2;
    2b24:	0026      	movs	r6, r4
		x2 = temp;
    2b26:	001c      	movs	r4, r3
	REG_PORT_OUTCLR1 = LCD_CS;
    2b28:	2380      	movs	r3, #128	; 0x80
    2b2a:	03db      	lsls	r3, r3, #15
    2b2c:	4698      	mov	r8, r3
    2b2e:	4b11      	ldr	r3, [pc, #68]	; (2b74 <fillRect+0x70>)
    2b30:	4642      	mov	r2, r8
    2b32:	601a      	str	r2, [r3, #0]
	setXY(x1, y1, x2, y2);
    2b34:	b2ab      	uxth	r3, r5
    2b36:	b2a2      	uxth	r2, r4
    2b38:	4649      	mov	r1, r9
    2b3a:	4668      	mov	r0, sp
    2b3c:	80c1      	strh	r1, [r0, #6]
    2b3e:	88c1      	ldrh	r1, [r0, #6]
    2b40:	b2b0      	uxth	r0, r6
    2b42:	4f0d      	ldr	r7, [pc, #52]	; (2b78 <fillRect+0x74>)
    2b44:	47b8      	blx	r7
	REG_PORT_OUTSET1 = LCD_DC;
    2b46:	4f0d      	ldr	r7, [pc, #52]	; (2b7c <fillRect+0x78>)
    2b48:	2380      	movs	r3, #128	; 0x80
    2b4a:	041b      	lsls	r3, r3, #16
    2b4c:	603b      	str	r3, [r7, #0]
	(((long)(x2-x1)+1)*((long)(y2-y1)+1)));
    2b4e:	1ba4      	subs	r4, r4, r6
    2b50:	3401      	adds	r4, #1
    2b52:	464b      	mov	r3, r9
    2b54:	1aea      	subs	r2, r5, r3
    2b56:	3201      	adds	r2, #1
	LCD_Fast_Fill(fore_Color_High, fore_Color_Low,
    2b58:	4362      	muls	r2, r4
    2b5a:	4b09      	ldr	r3, [pc, #36]	; (2b80 <fillRect+0x7c>)
    2b5c:	8819      	ldrh	r1, [r3, #0]
    2b5e:	4b09      	ldr	r3, [pc, #36]	; (2b84 <fillRect+0x80>)
    2b60:	8818      	ldrh	r0, [r3, #0]
    2b62:	4b09      	ldr	r3, [pc, #36]	; (2b88 <fillRect+0x84>)
    2b64:	4798      	blx	r3
	REG_PORT_OUTSET1 = LCD_CS;
    2b66:	4643      	mov	r3, r8
    2b68:	603b      	str	r3, [r7, #0]
}
    2b6a:	b003      	add	sp, #12
    2b6c:	bc0c      	pop	{r2, r3}
    2b6e:	4690      	mov	r8, r2
    2b70:	4699      	mov	r9, r3
    2b72:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2b74:	41004494 	.word	0x41004494
    2b78:	00002a8d 	.word	0x00002a8d
    2b7c:	41004498 	.word	0x41004498
    2b80:	20000a98 	.word	0x20000a98
    2b84:	20000a96 	.word	0x20000a96
    2b88:	00002a19 	.word	0x00002a19

00002b8c <fillRectBackColor>:
{
    2b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b8e:	46ce      	mov	lr, r9
    2b90:	4647      	mov	r7, r8
    2b92:	b580      	push	{r7, lr}
    2b94:	b083      	sub	sp, #12
    2b96:	0006      	movs	r6, r0
    2b98:	4689      	mov	r9, r1
    2b9a:	0014      	movs	r4, r2
    2b9c:	001d      	movs	r5, r3
	if (x1>x2)
    2b9e:	4290      	cmp	r0, r2
    2ba0:	dd01      	ble.n	2ba6 <fillRectBackColor+0x1a>
		x1 = x2;
    2ba2:	0016      	movs	r6, r2
		x2 = temp;
    2ba4:	0004      	movs	r4, r0
	if (y1>y2)
    2ba6:	45a9      	cmp	r9, r5
    2ba8:	dd02      	ble.n	2bb0 <fillRectBackColor+0x24>
    2baa:	0033      	movs	r3, r6
		x1 = x2;
    2bac:	0026      	movs	r6, r4
		x2 = temp;
    2bae:	001c      	movs	r4, r3
	REG_PORT_OUTCLR1 = LCD_CS;
    2bb0:	2380      	movs	r3, #128	; 0x80
    2bb2:	03db      	lsls	r3, r3, #15
    2bb4:	4698      	mov	r8, r3
    2bb6:	4b11      	ldr	r3, [pc, #68]	; (2bfc <fillRectBackColor+0x70>)
    2bb8:	4642      	mov	r2, r8
    2bba:	601a      	str	r2, [r3, #0]
	setXY(x1, y1, x2, y2);
    2bbc:	b2ab      	uxth	r3, r5
    2bbe:	b2a2      	uxth	r2, r4
    2bc0:	4649      	mov	r1, r9
    2bc2:	4668      	mov	r0, sp
    2bc4:	80c1      	strh	r1, [r0, #6]
    2bc6:	88c1      	ldrh	r1, [r0, #6]
    2bc8:	b2b0      	uxth	r0, r6
    2bca:	4f0d      	ldr	r7, [pc, #52]	; (2c00 <fillRectBackColor+0x74>)
    2bcc:	47b8      	blx	r7
	REG_PORT_OUTSET1 = LCD_DC;
    2bce:	4f0d      	ldr	r7, [pc, #52]	; (2c04 <fillRectBackColor+0x78>)
    2bd0:	2380      	movs	r3, #128	; 0x80
    2bd2:	041b      	lsls	r3, r3, #16
    2bd4:	603b      	str	r3, [r7, #0]
	(((long)(x2-x1)+1)*((long)(y2-y1)+1)));
    2bd6:	1ba4      	subs	r4, r4, r6
    2bd8:	3401      	adds	r4, #1
    2bda:	464b      	mov	r3, r9
    2bdc:	1aea      	subs	r2, r5, r3
    2bde:	3201      	adds	r2, #1
	LCD_Fast_Fill(back_Color_High, back_Color_Low,
    2be0:	4362      	muls	r2, r4
    2be2:	4b09      	ldr	r3, [pc, #36]	; (2c08 <fillRectBackColor+0x7c>)
    2be4:	8819      	ldrh	r1, [r3, #0]
    2be6:	4b09      	ldr	r3, [pc, #36]	; (2c0c <fillRectBackColor+0x80>)
    2be8:	8818      	ldrh	r0, [r3, #0]
    2bea:	4b09      	ldr	r3, [pc, #36]	; (2c10 <fillRectBackColor+0x84>)
    2bec:	4798      	blx	r3
	REG_PORT_OUTSET1 = LCD_CS;
    2bee:	4643      	mov	r3, r8
    2bf0:	603b      	str	r3, [r7, #0]
}
    2bf2:	b003      	add	sp, #12
    2bf4:	bc0c      	pop	{r2, r3}
    2bf6:	4690      	mov	r8, r2
    2bf8:	4699      	mov	r9, r3
    2bfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2bfc:	41004494 	.word	0x41004494
    2c00:	00002a8d 	.word	0x00002a8d
    2c04:	41004498 	.word	0x41004498
    2c08:	20000a94 	.word	0x20000a94
    2c0c:	20000a9a 	.word	0x20000a9a
    2c10:	00002a19 	.word	0x00002a19

00002c14 <clrXY>:
{
    2c14:	b510      	push	{r4, lr}
	setXY(0,0,display_X_size,display_Y_size);
    2c16:	4b04      	ldr	r3, [pc, #16]	; (2c28 <clrXY+0x14>)
    2c18:	881b      	ldrh	r3, [r3, #0]
    2c1a:	4a04      	ldr	r2, [pc, #16]	; (2c2c <clrXY+0x18>)
    2c1c:	8812      	ldrh	r2, [r2, #0]
    2c1e:	2100      	movs	r1, #0
    2c20:	2000      	movs	r0, #0
    2c22:	4c03      	ldr	r4, [pc, #12]	; (2c30 <clrXY+0x1c>)
    2c24:	47a0      	blx	r4
}
    2c26:	bd10      	pop	{r4, pc}
    2c28:	20000156 	.word	0x20000156
    2c2c:	20000154 	.word	0x20000154
    2c30:	00002a8d 	.word	0x00002a8d

00002c34 <clrScr>:
{
    2c34:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = LCD_CS;
    2c36:	2280      	movs	r2, #128	; 0x80
    2c38:	03d2      	lsls	r2, r2, #15
    2c3a:	4b02      	ldr	r3, [pc, #8]	; (2c44 <clrScr+0x10>)
    2c3c:	601a      	str	r2, [r3, #0]
	clrXY();
    2c3e:	4b02      	ldr	r3, [pc, #8]	; (2c48 <clrScr+0x14>)
    2c40:	4798      	blx	r3
}
    2c42:	bd10      	pop	{r4, pc}
    2c44:	41004494 	.word	0x41004494
    2c48:	00002c15 	.word	0x00002c15

00002c4c <setPixel>:

void setPixel(uint16_t color)
{
    2c4c:	b510      	push	{r4, lr}
	//it sets it to a 16-bit color.
	LCD_Write_DATA16((color>>8),(color&0xFF));
    2c4e:	b2c1      	uxtb	r1, r0
    2c50:	0a00      	lsrs	r0, r0, #8
    2c52:	4b01      	ldr	r3, [pc, #4]	; (2c58 <setPixel+0xc>)
    2c54:	4798      	blx	r3
}
    2c56:	bd10      	pop	{r4, pc}
    2c58:	00002cd1 	.word	0x00002cd1

00002c5c <clearScreen>:
	LCD_Write_DATA8(0x80);
	REG_PORT_OUTSET1 = LCD_CS;
}
*/
void clearScreen(void)
{
    2c5c:	b510      	push	{r4, lr}
	fore_Color_High = ((r&248)|g>>5);
    2c5e:	2300      	movs	r3, #0
    2c60:	4a06      	ldr	r2, [pc, #24]	; (2c7c <clearScreen+0x20>)
    2c62:	8013      	strh	r3, [r2, #0]
	fore_Color_Low = ((g&28)<<3|b>>3);
    2c64:	4a06      	ldr	r2, [pc, #24]	; (2c80 <clearScreen+0x24>)
    2c66:	8013      	strh	r3, [r2, #0]
	setColorRGB(0,0,0);
	fillRect(0,0,display_Y_size,display_X_size);
    2c68:	4b06      	ldr	r3, [pc, #24]	; (2c84 <clearScreen+0x28>)
    2c6a:	881b      	ldrh	r3, [r3, #0]
    2c6c:	4a06      	ldr	r2, [pc, #24]	; (2c88 <clearScreen+0x2c>)
    2c6e:	8812      	ldrh	r2, [r2, #0]
    2c70:	2100      	movs	r1, #0
    2c72:	2000      	movs	r0, #0
    2c74:	4c05      	ldr	r4, [pc, #20]	; (2c8c <clearScreen+0x30>)
    2c76:	47a0      	blx	r4
}
    2c78:	bd10      	pop	{r4, pc}
    2c7a:	46c0      	nop			; (mov r8, r8)
    2c7c:	20000a96 	.word	0x20000a96
    2c80:	20000a98 	.word	0x20000a98
    2c84:	20000154 	.word	0x20000154
    2c88:	20000156 	.word	0x20000156
    2c8c:	00002b05 	.word	0x00002b05

00002c90 <LCD_Write_Bus>:
	fillRect(0,0,799,489);
		
}

void LCD_Write_Bus(char VH, char VL)
{
    2c90:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = 0x0000ffff;
    2c92:	4c06      	ldr	r4, [pc, #24]	; (2cac <LCD_Write_Bus+0x1c>)
    2c94:	4b06      	ldr	r3, [pc, #24]	; (2cb0 <LCD_Write_Bus+0x20>)
    2c96:	6023      	str	r3, [r4, #0]
	REG_PORT_OUTSET1 = (VH << 8) | VL;
    2c98:	0200      	lsls	r0, r0, #8
    2c9a:	4301      	orrs	r1, r0
    2c9c:	4b05      	ldr	r3, [pc, #20]	; (2cb4 <LCD_Write_Bus+0x24>)
    2c9e:	6019      	str	r1, [r3, #0]
	REG_PORT_OUTCLR1 = LCD_WR;
    2ca0:	2280      	movs	r2, #128	; 0x80
    2ca2:	0292      	lsls	r2, r2, #10
    2ca4:	6022      	str	r2, [r4, #0]
	REG_PORT_OUTSET1 = LCD_WR;
    2ca6:	601a      	str	r2, [r3, #0]
}
    2ca8:	bd10      	pop	{r4, pc}
    2caa:	46c0      	nop			; (mov r8, r8)
    2cac:	41004494 	.word	0x41004494
    2cb0:	0000ffff 	.word	0x0000ffff
    2cb4:	41004498 	.word	0x41004498

00002cb8 <LCD_Write_COM16>:

void LCD_Write_COM16(char VH, char VL)
{
    2cb8:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = LCD_DC;
    2cba:	2280      	movs	r2, #128	; 0x80
    2cbc:	0412      	lsls	r2, r2, #16
    2cbe:	4b02      	ldr	r3, [pc, #8]	; (2cc8 <LCD_Write_COM16+0x10>)
    2cc0:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(VH,VL);
    2cc2:	4b02      	ldr	r3, [pc, #8]	; (2ccc <LCD_Write_COM16+0x14>)
    2cc4:	4798      	blx	r3
}
    2cc6:	bd10      	pop	{r4, pc}
    2cc8:	41004494 	.word	0x41004494
    2ccc:	00002c91 	.word	0x00002c91

00002cd0 <LCD_Write_DATA16>:
	REG_PORT_OUTCLR1 = LCD_DC;
	LCD_Write_Bus(0x00, VL);
}

void LCD_Write_DATA16(char VH, char VL)
{
    2cd0:	b510      	push	{r4, lr}
	REG_PORT_OUTSET1 = LCD_DC;
    2cd2:	2280      	movs	r2, #128	; 0x80
    2cd4:	0412      	lsls	r2, r2, #16
    2cd6:	4b02      	ldr	r3, [pc, #8]	; (2ce0 <LCD_Write_DATA16+0x10>)
    2cd8:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(VH,VL);
    2cda:	4b02      	ldr	r3, [pc, #8]	; (2ce4 <LCD_Write_DATA16+0x14>)
    2cdc:	4798      	blx	r3
}
    2cde:	bd10      	pop	{r4, pc}
    2ce0:	41004498 	.word	0x41004498
    2ce4:	00002c91 	.word	0x00002c91

00002ce8 <LCD_Write_DATA8>:

void LCD_Write_DATA8(char VL)
{
    2ce8:	b510      	push	{r4, lr}
    2cea:	0001      	movs	r1, r0
	REG_PORT_OUTSET1 = LCD_DC;
    2cec:	2280      	movs	r2, #128	; 0x80
    2cee:	0412      	lsls	r2, r2, #16
    2cf0:	4b02      	ldr	r3, [pc, #8]	; (2cfc <LCD_Write_DATA8+0x14>)
    2cf2:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(0x00, VL);
    2cf4:	2000      	movs	r0, #0
    2cf6:	4b02      	ldr	r3, [pc, #8]	; (2d00 <LCD_Write_DATA8+0x18>)
    2cf8:	4798      	blx	r3
}
    2cfa:	bd10      	pop	{r4, pc}
    2cfc:	41004498 	.word	0x41004498
    2d00:	00002c91 	.word	0x00002c91

00002d04 <InitLCD>:
{
    2d04:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d06:	46c6      	mov	lr, r8
    2d08:	b500      	push	{lr}
    2d0a:	b082      	sub	sp, #8
	REG_PORT_DIRSET1 = 0x0000ffff;		//LCD data bus, PB00 - PB15
    2d0c:	4b80      	ldr	r3, [pc, #512]	; (2f10 <InitLCD+0x20c>)
    2d0e:	4f81      	ldr	r7, [pc, #516]	; (2f14 <InitLCD+0x210>)
    2d10:	601f      	str	r7, [r3, #0]
	REG_PORT_DIRSET1 = LCD_Reset;
    2d12:	2580      	movs	r5, #128	; 0x80
    2d14:	05ed      	lsls	r5, r5, #23
    2d16:	601d      	str	r5, [r3, #0]
	REG_PORT_DIRSET1 = LCD_CS;
    2d18:	2680      	movs	r6, #128	; 0x80
    2d1a:	03f6      	lsls	r6, r6, #15
    2d1c:	601e      	str	r6, [r3, #0]
	REG_PORT_DIRSET1 = LCD_WR;
    2d1e:	2080      	movs	r0, #128	; 0x80
    2d20:	0280      	lsls	r0, r0, #10
    2d22:	6018      	str	r0, [r3, #0]
	REG_PORT_DIRSET1 = LCD_DC;
    2d24:	2180      	movs	r1, #128	; 0x80
    2d26:	0409      	lsls	r1, r1, #16
    2d28:	6019      	str	r1, [r3, #0]
	REG_PORT_DIRSET1 = LCD_RD;
    2d2a:	2280      	movs	r2, #128	; 0x80
    2d2c:	0252      	lsls	r2, r2, #9
    2d2e:	601a      	str	r2, [r3, #0]
	REG_PORT_OUTCLR1 = 0x0000ffff;
    2d30:	4c79      	ldr	r4, [pc, #484]	; (2f18 <InitLCD+0x214>)
    2d32:	6027      	str	r7, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_Reset;
    2d34:	6025      	str	r5, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_CS;
    2d36:	6026      	str	r6, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_WR;
    2d38:	6020      	str	r0, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_DC;
    2d3a:	6021      	str	r1, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_RD;
    2d3c:	6022      	str	r2, [r4, #0]
	REG_PORT_DIRSET1 = PORT_PB16;
    2d3e:	601a      	str	r2, [r3, #0]
	REG_PORT_OUTSET1 = PORT_PB16;
    2d40:	4f76      	ldr	r7, [pc, #472]	; (2f1c <InitLCD+0x218>)
    2d42:	603a      	str	r2, [r7, #0]
	REG_PORT_OUTSET1 = LCD_Reset;
    2d44:	603d      	str	r5, [r7, #0]
	delay_ms(5);
    2d46:	2005      	movs	r0, #5
    2d48:	4b75      	ldr	r3, [pc, #468]	; (2f20 <InitLCD+0x21c>)
    2d4a:	4698      	mov	r8, r3
    2d4c:	4798      	blx	r3
	REG_PORT_OUTCLR1 = LCD_Reset;
    2d4e:	6025      	str	r5, [r4, #0]
	delay_ms(5);
    2d50:	2005      	movs	r0, #5
    2d52:	47c0      	blx	r8
	REG_PORT_OUTSET1 = LCD_Reset;
    2d54:	603d      	str	r5, [r7, #0]
	REG_PORT_OUTCLR1 = LCD_CS;
    2d56:	6026      	str	r6, [r4, #0]
	for(int i = 0; i < 70; i++)
    2d58:	2400      	movs	r4, #0
		REG_PORT_OUTCLR1 = LCD_DC;
    2d5a:	4b6f      	ldr	r3, [pc, #444]	; (2f18 <InitLCD+0x214>)
    2d5c:	4698      	mov	r8, r3
    2d5e:	2580      	movs	r5, #128	; 0x80
    2d60:	042d      	lsls	r5, r5, #16
    2d62:	002f      	movs	r7, r5
		LCD_Write_COM16(belial[i],mulciber[i]);
    2d64:	4e6f      	ldr	r6, [pc, #444]	; (2f24 <InitLCD+0x220>)
		REG_PORT_OUTCLR1 = LCD_DC;
    2d66:	4643      	mov	r3, r8
    2d68:	601f      	str	r7, [r3, #0]
		LCD_Write_COM16(belial[i],mulciber[i]);
    2d6a:	5da1      	ldrb	r1, [r4, r6]
    2d6c:	4b6e      	ldr	r3, [pc, #440]	; (2f28 <InitLCD+0x224>)
    2d6e:	5ce0      	ldrb	r0, [r4, r3]
    2d70:	4b6e      	ldr	r3, [pc, #440]	; (2f2c <InitLCD+0x228>)
    2d72:	4798      	blx	r3
		REG_PORT_OUTSET1 = LCD_DC;
    2d74:	4b69      	ldr	r3, [pc, #420]	; (2f1c <InitLCD+0x218>)
    2d76:	601d      	str	r5, [r3, #0]
		LCD_Write_DATA8(lucifer[i]);
    2d78:	4b6d      	ldr	r3, [pc, #436]	; (2f30 <InitLCD+0x22c>)
    2d7a:	5ce0      	ldrb	r0, [r4, r3]
    2d7c:	4b6d      	ldr	r3, [pc, #436]	; (2f34 <InitLCD+0x230>)
    2d7e:	4798      	blx	r3
	for(int i = 0; i < 70; i++)
    2d80:	3401      	adds	r4, #1
    2d82:	2c46      	cmp	r4, #70	; 0x46
    2d84:	d1ef      	bne.n	2d66 <InitLCD+0x62>
    2d86:	23d1      	movs	r3, #209	; 0xd1
    2d88:	9301      	str	r3, [sp, #4]
			LCD_Write_COM16(k,0x00);
    2d8a:	4d68      	ldr	r5, [pc, #416]	; (2f2c <InitLCD+0x228>)
			LCD_Write_DATA8(beelzebub[l]);
    2d8c:	4f69      	ldr	r7, [pc, #420]	; (2f34 <InitLCD+0x230>)
    2d8e:	4c6a      	ldr	r4, [pc, #424]	; (2f38 <InitLCD+0x234>)
    2d90:	0026      	movs	r6, r4
    2d92:	3634      	adds	r6, #52	; 0x34
			LCD_Write_COM16(k,0x00);
    2d94:	2100      	movs	r1, #0
    2d96:	9801      	ldr	r0, [sp, #4]
    2d98:	47a8      	blx	r5
			LCD_Write_DATA8(beelzebub[l]);
    2d9a:	7820      	ldrb	r0, [r4, #0]
    2d9c:	47b8      	blx	r7
    2d9e:	3401      	adds	r4, #1
		for(int l = 0; l < 52; l++)
    2da0:	42a6      	cmp	r6, r4
    2da2:	d1f7      	bne.n	2d94 <InitLCD+0x90>
	for(char k = 0xD1; k < 0xD6; k++)
    2da4:	9b01      	ldr	r3, [sp, #4]
    2da6:	3301      	adds	r3, #1
    2da8:	b2db      	uxtb	r3, r3
    2daa:	9301      	str	r3, [sp, #4]
    2dac:	2bd6      	cmp	r3, #214	; 0xd6
    2dae:	d1ee      	bne.n	2d8e <InitLCD+0x8a>
	LCD_Write_COM16(0xF0, 0x00);LCD_Write_DATA8(0x55);
    2db0:	2100      	movs	r1, #0
    2db2:	20f0      	movs	r0, #240	; 0xf0
    2db4:	4c5d      	ldr	r4, [pc, #372]	; (2f2c <InitLCD+0x228>)
    2db6:	47a0      	blx	r4
    2db8:	2055      	movs	r0, #85	; 0x55
    2dba:	4d5e      	ldr	r5, [pc, #376]	; (2f34 <InitLCD+0x230>)
    2dbc:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x01);LCD_Write_DATA8(0xAA);	
    2dbe:	2101      	movs	r1, #1
    2dc0:	20f0      	movs	r0, #240	; 0xf0
    2dc2:	47a0      	blx	r4
    2dc4:	20aa      	movs	r0, #170	; 0xaa
    2dc6:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x02);LCD_Write_DATA8(0x52);	
    2dc8:	2102      	movs	r1, #2
    2dca:	20f0      	movs	r0, #240	; 0xf0
    2dcc:	47a0      	blx	r4
    2dce:	2052      	movs	r0, #82	; 0x52
    2dd0:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x03);LCD_Write_DATA8(0x08);	
    2dd2:	2103      	movs	r1, #3
    2dd4:	20f0      	movs	r0, #240	; 0xf0
    2dd6:	47a0      	blx	r4
    2dd8:	2008      	movs	r0, #8
    2dda:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x04);LCD_Write_DATA8(0x00);	
    2ddc:	2104      	movs	r1, #4
    2dde:	20f0      	movs	r0, #240	; 0xf0
    2de0:	47a0      	blx	r4
    2de2:	2000      	movs	r0, #0
    2de4:	47a8      	blx	r5
	LCD_Write_COM16(0xB1, 0x00);LCD_Write_DATA8(0xCC);
    2de6:	2100      	movs	r1, #0
    2de8:	20b1      	movs	r0, #177	; 0xb1
    2dea:	47a0      	blx	r4
    2dec:	20cc      	movs	r0, #204	; 0xcc
    2dee:	47a8      	blx	r5
	LCD_Write_COM16(0xB1, 0x01);LCD_Write_DATA8(0x00);	
    2df0:	2101      	movs	r1, #1
    2df2:	20b1      	movs	r0, #177	; 0xb1
    2df4:	47a0      	blx	r4
    2df6:	2000      	movs	r0, #0
    2df8:	47a8      	blx	r5
	LCD_Write_COM16(0xB5, 0x00);LCD_Write_DATA8(0x50);	
    2dfa:	2100      	movs	r1, #0
    2dfc:	20b5      	movs	r0, #181	; 0xb5
    2dfe:	47a0      	blx	r4
    2e00:	2050      	movs	r0, #80	; 0x50
    2e02:	47a8      	blx	r5
	LCD_Write_COM16(0xB6, 0x00);LCD_Write_DATA8(0x05);
    2e04:	2100      	movs	r1, #0
    2e06:	20b6      	movs	r0, #182	; 0xb6
    2e08:	47a0      	blx	r4
    2e0a:	2005      	movs	r0, #5
    2e0c:	47a8      	blx	r5
	LCD_Write_COM16(0xB7, 0x00);LCD_Write_DATA8(0x70);
    2e0e:	2100      	movs	r1, #0
    2e10:	20b7      	movs	r0, #183	; 0xb7
    2e12:	47a0      	blx	r4
    2e14:	2070      	movs	r0, #112	; 0x70
    2e16:	47a8      	blx	r5
	LCD_Write_COM16(0xB7, 0x01);LCD_Write_DATA8(0x70);
    2e18:	2101      	movs	r1, #1
    2e1a:	20b7      	movs	r0, #183	; 0xb7
    2e1c:	47a0      	blx	r4
    2e1e:	2070      	movs	r0, #112	; 0x70
    2e20:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x00);LCD_Write_DATA8(0x01);
    2e22:	2100      	movs	r1, #0
    2e24:	20b8      	movs	r0, #184	; 0xb8
    2e26:	47a0      	blx	r4
    2e28:	2001      	movs	r0, #1
    2e2a:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x01);LCD_Write_DATA8(0x03);
    2e2c:	2101      	movs	r1, #1
    2e2e:	20b8      	movs	r0, #184	; 0xb8
    2e30:	47a0      	blx	r4
    2e32:	2003      	movs	r0, #3
    2e34:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x02);LCD_Write_DATA8(0x03);
    2e36:	2102      	movs	r1, #2
    2e38:	20b8      	movs	r0, #184	; 0xb8
    2e3a:	47a0      	blx	r4
    2e3c:	2003      	movs	r0, #3
    2e3e:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x03);LCD_Write_DATA8(0x03);	
    2e40:	2103      	movs	r1, #3
    2e42:	20b8      	movs	r0, #184	; 0xb8
    2e44:	47a0      	blx	r4
    2e46:	2003      	movs	r0, #3
    2e48:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x00);LCD_Write_DATA8(0x02);
    2e4a:	2100      	movs	r1, #0
    2e4c:	20bc      	movs	r0, #188	; 0xbc
    2e4e:	47a0      	blx	r4
    2e50:	2002      	movs	r0, #2
    2e52:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x01);LCD_Write_DATA8(0x00);
    2e54:	2101      	movs	r1, #1
    2e56:	20bc      	movs	r0, #188	; 0xbc
    2e58:	47a0      	blx	r4
    2e5a:	2000      	movs	r0, #0
    2e5c:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x02);LCD_Write_DATA8(0x00);
    2e5e:	2102      	movs	r1, #2
    2e60:	20bc      	movs	r0, #188	; 0xbc
    2e62:	47a0      	blx	r4
    2e64:	2000      	movs	r0, #0
    2e66:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x00);LCD_Write_DATA8(0xD0);
    2e68:	2100      	movs	r1, #0
    2e6a:	20c9      	movs	r0, #201	; 0xc9
    2e6c:	47a0      	blx	r4
    2e6e:	20d0      	movs	r0, #208	; 0xd0
    2e70:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x01);LCD_Write_DATA8(0x02);
    2e72:	2101      	movs	r1, #1
    2e74:	20c9      	movs	r0, #201	; 0xc9
    2e76:	47a0      	blx	r4
    2e78:	2002      	movs	r0, #2
    2e7a:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x02);LCD_Write_DATA8(0x50);
    2e7c:	2102      	movs	r1, #2
    2e7e:	20c9      	movs	r0, #201	; 0xc9
    2e80:	47a0      	blx	r4
    2e82:	2050      	movs	r0, #80	; 0x50
    2e84:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x03);LCD_Write_DATA8(0x50);
    2e86:	2103      	movs	r1, #3
    2e88:	20c9      	movs	r0, #201	; 0xc9
    2e8a:	47a0      	blx	r4
    2e8c:	2050      	movs	r0, #80	; 0x50
    2e8e:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x04);LCD_Write_DATA8(0x50);
    2e90:	2104      	movs	r1, #4
    2e92:	20c9      	movs	r0, #201	; 0xc9
    2e94:	47a0      	blx	r4
    2e96:	2050      	movs	r0, #80	; 0x50
    2e98:	47a8      	blx	r5
	LCD_Write_COM16(0x35, 0x00);LCD_Write_DATA8(0x00);
    2e9a:	2100      	movs	r1, #0
    2e9c:	2035      	movs	r0, #53	; 0x35
    2e9e:	47a0      	blx	r4
    2ea0:	2000      	movs	r0, #0
    2ea2:	47a8      	blx	r5
	LCD_Write_COM16(0x3A, 0x00);LCD_Write_DATA8(0x55);
    2ea4:	2100      	movs	r1, #0
    2ea6:	203a      	movs	r0, #58	; 0x3a
    2ea8:	47a0      	blx	r4
    2eaa:	2055      	movs	r0, #85	; 0x55
    2eac:	47a8      	blx	r5
	LCD_Write_COM16(0x36, 0x00);LCD_Write_DATA8(0xE2);  //This is the MADCTL register
    2eae:	2100      	movs	r1, #0
    2eb0:	2036      	movs	r0, #54	; 0x36
    2eb2:	47a0      	blx	r4
    2eb4:	20e2      	movs	r0, #226	; 0xe2
    2eb6:	47a8      	blx	r5
  	LCD_Write_COM16(0x11,0x00);   //Start Up  
    2eb8:	2100      	movs	r1, #0
    2eba:	2011      	movs	r0, #17
    2ebc:	47a0      	blx	r4
  	delay_ms(100);
    2ebe:	2064      	movs	r0, #100	; 0x64
    2ec0:	4e17      	ldr	r6, [pc, #92]	; (2f20 <InitLCD+0x21c>)
    2ec2:	47b0      	blx	r6
  	LCD_Write_COM16(0x29,0x00);   //Display On  
    2ec4:	2100      	movs	r1, #0
    2ec6:	2029      	movs	r0, #41	; 0x29
    2ec8:	47a0      	blx	r4
   	delay_ms(100);
    2eca:	2064      	movs	r0, #100	; 0x64
    2ecc:	47b0      	blx	r6
	LCD_Write_COM16(0x51,0x00);LCD_Write_DATA8(0xFF);
    2ece:	2100      	movs	r1, #0
    2ed0:	2051      	movs	r0, #81	; 0x51
    2ed2:	47a0      	blx	r4
    2ed4:	20ff      	movs	r0, #255	; 0xff
    2ed6:	47a8      	blx	r5
	REG_PORT_OUTSET1 = LCD_CS;
    2ed8:	2280      	movs	r2, #128	; 0x80
    2eda:	03d2      	lsls	r2, r2, #15
    2edc:	4b0f      	ldr	r3, [pc, #60]	; (2f1c <InitLCD+0x218>)
    2ede:	601a      	str	r2, [r3, #0]
	clrScr();
    2ee0:	4b16      	ldr	r3, [pc, #88]	; (2f3c <InitLCD+0x238>)
    2ee2:	4798      	blx	r3
	setColorRGB(0,0,0);
    2ee4:	2200      	movs	r2, #0
    2ee6:	2100      	movs	r1, #0
    2ee8:	2000      	movs	r0, #0
    2eea:	4b15      	ldr	r3, [pc, #84]	; (2f40 <InitLCD+0x23c>)
    2eec:	4798      	blx	r3
	setBackColorRGB(0, 0, 0);
    2eee:	2200      	movs	r2, #0
    2ef0:	2100      	movs	r1, #0
    2ef2:	2000      	movs	r0, #0
    2ef4:	4b13      	ldr	r3, [pc, #76]	; (2f44 <InitLCD+0x240>)
    2ef6:	4798      	blx	r3
	fillRect(0,0,799,489);
    2ef8:	23ea      	movs	r3, #234	; 0xea
    2efa:	33ff      	adds	r3, #255	; 0xff
    2efc:	4a12      	ldr	r2, [pc, #72]	; (2f48 <InitLCD+0x244>)
    2efe:	2100      	movs	r1, #0
    2f00:	2000      	movs	r0, #0
    2f02:	4c12      	ldr	r4, [pc, #72]	; (2f4c <InitLCD+0x248>)
    2f04:	47a0      	blx	r4
}
    2f06:	b002      	add	sp, #8
    2f08:	bc04      	pop	{r2}
    2f0a:	4690      	mov	r8, r2
    2f0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2f0e:	46c0      	nop			; (mov r8, r8)
    2f10:	41004488 	.word	0x41004488
    2f14:	0000ffff 	.word	0x0000ffff
    2f18:	41004494 	.word	0x41004494
    2f1c:	41004498 	.word	0x41004498
    2f20:	00000569 	.word	0x00000569
    2f24:	0000679c 	.word	0x0000679c
    2f28:	0000670c 	.word	0x0000670c
    2f2c:	00002cb9 	.word	0x00002cb9
    2f30:	00006754 	.word	0x00006754
    2f34:	00002ce9 	.word	0x00002ce9
    2f38:	000066d8 	.word	0x000066d8
    2f3c:	00002c35 	.word	0x00002c35
    2f40:	000029c9 	.word	0x000029c9
    2f44:	000029f1 	.word	0x000029f1
    2f48:	0000031f 	.word	0x0000031f
    2f4c:	00002b05 	.word	0x00002b05

00002f50 <usart_read_callback>:
	SysTick_Config(SystemCoreClock/1000);
	system_interrupt_enable(SYSTEM_INTERRUPT_SYSTICK);
}

void usart_read_callback(struct usart_module *const usart_module)
{
    2f50:	b500      	push	{lr}
    2f52:	b083      	sub	sp, #12
	// Read one character from the UART.
	//We can only use this function because it's non-blocking
	//and we can only read one character because reading > 1 means
	//it doesn't complete until _all_ characters are read.
	
	usart_read_buffer_job(&usart_instance, (char*)&rx_buf, 1);
    2f54:	2201      	movs	r2, #1
    2f56:	466b      	mov	r3, sp
    2f58:	1dd9      	adds	r1, r3, #7
    2f5a:	4802      	ldr	r0, [pc, #8]	; (2f64 <usart_read_callback+0x14>)
    2f5c:	4b02      	ldr	r3, [pc, #8]	; (2f68 <usart_read_callback+0x18>)
    2f5e:	4798      	blx	r3
	
	//stuff that ONE CHARACTER into the circular FIFO buffer
	//circular_buf_put(cbuf, rx_buf);
}
    2f60:	b003      	add	sp, #12
    2f62:	bd00      	pop	{pc}
    2f64:	200002dc 	.word	0x200002dc
    2f68:	00001409 	.word	0x00001409

00002f6c <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    2f6c:	b570      	push	{r4, r5, r6, lr}
    2f6e:	b082      	sub	sp, #8
    2f70:	0005      	movs	r5, r0
    2f72:	000e      	movs	r6, r1
	uint16_t temp = 0;
    2f74:	2200      	movs	r2, #0
    2f76:	466b      	mov	r3, sp
    2f78:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    2f7a:	4c06      	ldr	r4, [pc, #24]	; (2f94 <usart_serial_getchar+0x28>)
    2f7c:	466b      	mov	r3, sp
    2f7e:	1d99      	adds	r1, r3, #6
    2f80:	0028      	movs	r0, r5
    2f82:	47a0      	blx	r4
    2f84:	2800      	cmp	r0, #0
    2f86:	d1f9      	bne.n	2f7c <usart_serial_getchar+0x10>

	*c = temp;
    2f88:	466b      	mov	r3, sp
    2f8a:	3306      	adds	r3, #6
    2f8c:	881b      	ldrh	r3, [r3, #0]
    2f8e:	7033      	strb	r3, [r6, #0]
}
    2f90:	b002      	add	sp, #8
    2f92:	bd70      	pop	{r4, r5, r6, pc}
    2f94:	00001337 	.word	0x00001337

00002f98 <usart_serial_putchar>:
{
    2f98:	b570      	push	{r4, r5, r6, lr}
    2f9a:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    2f9c:	b28c      	uxth	r4, r1
    2f9e:	4e03      	ldr	r6, [pc, #12]	; (2fac <usart_serial_putchar+0x14>)
    2fa0:	0021      	movs	r1, r4
    2fa2:	0028      	movs	r0, r5
    2fa4:	47b0      	blx	r6
    2fa6:	2800      	cmp	r0, #0
    2fa8:	d1fa      	bne.n	2fa0 <usart_serial_putchar+0x8>
}
    2faa:	bd70      	pop	{r4, r5, r6, pc}
    2fac:	00001311 	.word	0x00001311

00002fb0 <SysTick_Handler>:
	ul_tickcount++;
    2fb0:	4a02      	ldr	r2, [pc, #8]	; (2fbc <SysTick_Handler+0xc>)
    2fb2:	8813      	ldrh	r3, [r2, #0]
    2fb4:	3301      	adds	r3, #1
    2fb6:	8013      	strh	r3, [r2, #0]
}
    2fb8:	4770      	bx	lr
    2fba:	46c0      	nop			; (mov r8, r8)
    2fbc:	2000029e 	.word	0x2000029e

00002fc0 <conf_systick>:
{
    2fc0:	b510      	push	{r4, lr}
	SysTick_Config(SystemCoreClock/1000);
    2fc2:	4b0e      	ldr	r3, [pc, #56]	; (2ffc <conf_systick+0x3c>)
    2fc4:	6818      	ldr	r0, [r3, #0]
    2fc6:	21fa      	movs	r1, #250	; 0xfa
    2fc8:	0089      	lsls	r1, r1, #2
    2fca:	4b0d      	ldr	r3, [pc, #52]	; (3000 <conf_systick+0x40>)
    2fcc:	4798      	blx	r3
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    2fce:	3801      	subs	r0, #1
    2fd0:	4b0c      	ldr	r3, [pc, #48]	; (3004 <conf_systick+0x44>)
    2fd2:	4298      	cmp	r0, r3
    2fd4:	d80d      	bhi.n	2ff2 <conf_systick+0x32>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    2fd6:	4a0c      	ldr	r2, [pc, #48]	; (3008 <conf_systick+0x48>)
    2fd8:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    2fda:	480c      	ldr	r0, [pc, #48]	; (300c <conf_systick+0x4c>)
    2fdc:	6a03      	ldr	r3, [r0, #32]
    2fde:	021b      	lsls	r3, r3, #8
    2fe0:	0a1b      	lsrs	r3, r3, #8
    2fe2:	21c0      	movs	r1, #192	; 0xc0
    2fe4:	0609      	lsls	r1, r1, #24
    2fe6:	430b      	orrs	r3, r1
    2fe8:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    2fea:	2300      	movs	r3, #0
    2fec:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    2fee:	3307      	adds	r3, #7
    2ff0:	6013      	str	r3, [r2, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2ff2:	2280      	movs	r2, #128	; 0x80
    2ff4:	0612      	lsls	r2, r2, #24
    2ff6:	4b06      	ldr	r3, [pc, #24]	; (3010 <conf_systick+0x50>)
    2ff8:	601a      	str	r2, [r3, #0]
}
    2ffa:	bd10      	pop	{r4, pc}
    2ffc:	2000000c 	.word	0x2000000c
    3000:	00003339 	.word	0x00003339
    3004:	00ffffff 	.word	0x00ffffff
    3008:	e000e010 	.word	0xe000e010
    300c:	e000ed00 	.word	0xe000ed00
    3010:	e000e100 	.word	0xe000e100

00003014 <configure_usart>:

/**************************SERCOM STUFF*******************************/


void configure_usart(void)
{
    3014:	b570      	push	{r4, r5, r6, lr}
    3016:	b090      	sub	sp, #64	; 0x40
	config->data_order       = USART_DATAORDER_LSB;
    3018:	2380      	movs	r3, #128	; 0x80
    301a:	05db      	lsls	r3, r3, #23
    301c:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    301e:	2300      	movs	r3, #0
    3020:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    3022:	22ff      	movs	r2, #255	; 0xff
    3024:	4669      	mov	r1, sp
    3026:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    3028:	2200      	movs	r2, #0
    302a:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    302c:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
    302e:	2196      	movs	r1, #150	; 0x96
    3030:	0189      	lsls	r1, r1, #6
    3032:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
    3034:	2101      	movs	r1, #1
    3036:	2024      	movs	r0, #36	; 0x24
    3038:	466c      	mov	r4, sp
    303a:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    303c:	3001      	adds	r0, #1
    303e:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    3040:	3125      	adds	r1, #37	; 0x25
    3042:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    3044:	3101      	adds	r1, #1
    3046:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    3048:	930a      	str	r3, [sp, #40]	; 0x28
	config->run_in_standby   = false;
    304a:	3105      	adds	r1, #5
    304c:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    304e:	3101      	adds	r1, #1
    3050:	5463      	strb	r3, [r4, r1]
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    3052:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    3054:	8223      	strh	r3, [r4, #16]
	config->lin_slave_enable      = false;
    3056:	76e3      	strb	r3, [r4, #27]
	config->immediate_buffer_overflow_notification  = false;
    3058:	7622      	strb	r2, [r4, #24]
	config->start_frame_detection_enable            = false;
    305a:	7722      	strb	r2, [r4, #28]
	config->encoding_format_enable                  = false;
    305c:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    305e:	2313      	movs	r3, #19
    3060:	76a3      	strb	r3, [r4, #26]
	config->collision_detection_enable              = false;
    3062:	7762      	strb	r2, [r4, #29]
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);

	config_usart.baudrate    = 9600;
	config_usart.mux_setting = USART_RX_1_TX_0_XCK_1;
    3064:	2380      	movs	r3, #128	; 0x80
    3066:	035b      	lsls	r3, r3, #13
    3068:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = PINMUX_PA08D_SERCOM2_PAD0;
    306a:	4b1e      	ldr	r3, [pc, #120]	; (30e4 <configure_usart+0xd0>)
    306c:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = PINMUX_PA09D_SERCOM2_PAD1;
    306e:	4b1e      	ldr	r3, [pc, #120]	; (30e8 <configure_usart+0xd4>)
    3070:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = PINMUX_UNUSED;
    3072:	2301      	movs	r3, #1
    3074:	425b      	negs	r3, r3
    3076:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = PINMUX_UNUSED;
    3078:	930f      	str	r3, [sp, #60]	; 0x3c
	
	while (usart_init(&usart_instance, SERCOM2, &config_usart) != STATUS_OK) {
    307a:	4d1c      	ldr	r5, [pc, #112]	; (30ec <configure_usart+0xd8>)
    307c:	4c1c      	ldr	r4, [pc, #112]	; (30f0 <configure_usart+0xdc>)
    307e:	466a      	mov	r2, sp
    3080:	491c      	ldr	r1, [pc, #112]	; (30f4 <configure_usart+0xe0>)
    3082:	0028      	movs	r0, r5
    3084:	47a0      	blx	r4
    3086:	2800      	cmp	r0, #0
    3088:	d1f9      	bne.n	307e <configure_usart+0x6a>
	stdio_base = (void *)module;
    308a:	4c18      	ldr	r4, [pc, #96]	; (30ec <configure_usart+0xd8>)
    308c:	4b1a      	ldr	r3, [pc, #104]	; (30f8 <configure_usart+0xe4>)
    308e:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    3090:	4a1a      	ldr	r2, [pc, #104]	; (30fc <configure_usart+0xe8>)
    3092:	4b1b      	ldr	r3, [pc, #108]	; (3100 <configure_usart+0xec>)
    3094:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    3096:	4a1b      	ldr	r2, [pc, #108]	; (3104 <configure_usart+0xf0>)
    3098:	4b1b      	ldr	r3, [pc, #108]	; (3108 <configure_usart+0xf4>)
    309a:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    309c:	466a      	mov	r2, sp
    309e:	4915      	ldr	r1, [pc, #84]	; (30f4 <configure_usart+0xe0>)
    30a0:	0020      	movs	r0, r4
    30a2:	4b13      	ldr	r3, [pc, #76]	; (30f0 <configure_usart+0xdc>)
    30a4:	4798      	blx	r3
	setbuf(stdout, NULL);
    30a6:	4e19      	ldr	r6, [pc, #100]	; (310c <configure_usart+0xf8>)
    30a8:	6833      	ldr	r3, [r6, #0]
    30aa:	6898      	ldr	r0, [r3, #8]
    30ac:	2100      	movs	r1, #0
    30ae:	4d18      	ldr	r5, [pc, #96]	; (3110 <configure_usart+0xfc>)
    30b0:	47a8      	blx	r5
	setbuf(stdin, NULL);
    30b2:	6833      	ldr	r3, [r6, #0]
    30b4:	6858      	ldr	r0, [r3, #4]
    30b6:	2100      	movs	r1, #0
    30b8:	47a8      	blx	r5
	SercomUsart *const usart_hw = &(module->hw->USART);
    30ba:	6825      	ldr	r5, [r4, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    30bc:	0028      	movs	r0, r5
    30be:	4b15      	ldr	r3, [pc, #84]	; (3114 <configure_usart+0x100>)
    30c0:	4798      	blx	r3
    30c2:	231f      	movs	r3, #31
    30c4:	4018      	ands	r0, r3
    30c6:	3b1e      	subs	r3, #30
    30c8:	4083      	lsls	r3, r0
    30ca:	4a13      	ldr	r2, [pc, #76]	; (3118 <configure_usart+0x104>)
    30cc:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    30ce:	6822      	ldr	r2, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
    30d0:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    30d2:	2b00      	cmp	r3, #0
    30d4:	d1fc      	bne.n	30d0 <configure_usart+0xbc>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    30d6:	682b      	ldr	r3, [r5, #0]
    30d8:	2202      	movs	r2, #2
    30da:	4313      	orrs	r3, r2
    30dc:	602b      	str	r3, [r5, #0]
	}
	stdio_serial_init(&usart_instance, SERCOM2, &config_usart);
	usart_enable(&usart_instance);
}
    30de:	b010      	add	sp, #64	; 0x40
    30e0:	bd70      	pop	{r4, r5, r6, pc}
    30e2:	46c0      	nop			; (mov r8, r8)
    30e4:	00080003 	.word	0x00080003
    30e8:	00090003 	.word	0x00090003
    30ec:	200002dc 	.word	0x200002dc
    30f0:	00000fd5 	.word	0x00000fd5
    30f4:	42001000 	.word	0x42001000
    30f8:	200002d8 	.word	0x200002d8
    30fc:	00002f99 	.word	0x00002f99
    3100:	200002d4 	.word	0x200002d4
    3104:	00002f6d 	.word	0x00002f6d
    3108:	200002d0 	.word	0x200002d0
    310c:	20000158 	.word	0x20000158
    3110:	000037c9 	.word	0x000037c9
    3114:	00000f45 	.word	0x00000f45
    3118:	e000e100 	.word	0xe000e100

0000311c <configure_usart_callbacks>:

void configure_usart_callbacks(void)
{
    311c:	b510      	push	{r4, lr}
	usart_register_callback(&usart_instance,usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
    311e:	4c06      	ldr	r4, [pc, #24]	; (3138 <configure_usart_callbacks+0x1c>)
    3120:	2201      	movs	r2, #1
    3122:	4906      	ldr	r1, [pc, #24]	; (313c <configure_usart_callbacks+0x20>)
    3124:	0020      	movs	r0, r4
    3126:	4b06      	ldr	r3, [pc, #24]	; (3140 <configure_usart_callbacks+0x24>)
    3128:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    312a:	2231      	movs	r2, #49	; 0x31
    312c:	5ca3      	ldrb	r3, [r4, r2]
    312e:	2102      	movs	r1, #2
    3130:	430b      	orrs	r3, r1
    3132:	54a3      	strb	r3, [r4, r2]
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
}
    3134:	bd10      	pop	{r4, pc}
    3136:	46c0      	nop			; (mov r8, r8)
    3138:	200002dc 	.word	0x200002dc
    313c:	00002f51 	.word	0x00002f51
    3140:	000013f1 	.word	0x000013f1

00003144 <configure_adc>:
	usart_enable(&usart_USB);
}
*/

void configure_adc(void)
{
    3144:	b510      	push	{r4, lr}
    3146:	b08c      	sub	sp, #48	; 0x30
	struct adc_config config_adc;
	adc_get_config_defaults(&config_adc);
    3148:	4668      	mov	r0, sp
    314a:	4b11      	ldr	r3, [pc, #68]	; (3190 <configure_adc+0x4c>)
    314c:	4798      	blx	r3
	config_adc.positive_input = ADC_POSITIVE_INPUT_DAC;
    314e:	231c      	movs	r3, #28
    3150:	466a      	mov	r2, sp
    3152:	7313      	strb	r3, [r2, #12]
	adc_init(&adc_instance, ADC, &config_adc);
    3154:	4c0f      	ldr	r4, [pc, #60]	; (3194 <configure_adc+0x50>)
    3156:	4910      	ldr	r1, [pc, #64]	; (3198 <configure_adc+0x54>)
    3158:	0020      	movs	r0, r4
    315a:	4b10      	ldr	r3, [pc, #64]	; (319c <configure_adc+0x58>)
    315c:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    315e:	6822      	ldr	r2, [r4, #0]
    3160:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    3162:	b25b      	sxtb	r3, r3
    3164:	2b00      	cmp	r3, #0
    3166:	dbfb      	blt.n	3160 <configure_adc+0x1c>
    3168:	2180      	movs	r1, #128	; 0x80
    316a:	0409      	lsls	r1, r1, #16
    316c:	4b0c      	ldr	r3, [pc, #48]	; (31a0 <configure_adc+0x5c>)
    316e:	6019      	str	r1, [r3, #0]
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    3170:	230f      	movs	r3, #15
    3172:	7593      	strb	r3, [r2, #22]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    3174:	7613      	strb	r3, [r2, #24]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    3176:	7813      	ldrb	r3, [r2, #0]
    3178:	2102      	movs	r1, #2
    317a:	430b      	orrs	r3, r1
    317c:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
    317e:	4b05      	ldr	r3, [pc, #20]	; (3194 <configure_adc+0x50>)
    3180:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    3182:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    3184:	b25b      	sxtb	r3, r3
    3186:	2b00      	cmp	r3, #0
    3188:	dbfb      	blt.n	3182 <configure_adc+0x3e>
	adc_enable(&adc_instance);
}
    318a:	b00c      	add	sp, #48	; 0x30
    318c:	bd10      	pop	{r4, pc}
    318e:	46c0      	nop			; (mov r8, r8)
    3190:	0000063d 	.word	0x0000063d
    3194:	20000a9c 	.word	0x20000a9c
    3198:	42004000 	.word	0x42004000
    319c:	00000681 	.word	0x00000681
    31a0:	e000e100 	.word	0xe000e100

000031a4 <setupBoard>:


void setupBoard(void)
{
    31a4:	b570      	push	{r4, r5, r6, lr}
	uint16_t adcResult;

	system_init();
    31a6:	4b2e      	ldr	r3, [pc, #184]	; (3260 <setupBoard+0xbc>)
    31a8:	4798      	blx	r3
	
	configure_adc();
    31aa:	4b2e      	ldr	r3, [pc, #184]	; (3264 <setupBoard+0xc0>)
    31ac:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    31ae:	4b2e      	ldr	r3, [pc, #184]	; (3268 <setupBoard+0xc4>)
    31b0:	6819      	ldr	r1, [r3, #0]
    31b2:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    31b4:	b25b      	sxtb	r3, r3
    31b6:	2b00      	cmp	r3, #0
    31b8:	dbfb      	blt.n	31b2 <setupBoard+0xe>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    31ba:	7b0b      	ldrb	r3, [r1, #12]
    31bc:	2202      	movs	r2, #2
    31be:	4313      	orrs	r3, r2
    31c0:	730b      	strb	r3, [r1, #12]
    31c2:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    31c4:	b25b      	sxtb	r3, r3
    31c6:	2b00      	cmp	r3, #0
    31c8:	dbfb      	blt.n	31c2 <setupBoard+0x1e>
	if (int_flags & ADC_INTFLAG_RESRDY) {
    31ca:	2001      	movs	r0, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
    31cc:	2504      	movs	r5, #4
		status_flags |= ADC_STATUS_WINDOW;
    31ce:	2402      	movs	r4, #2
    31d0:	e001      	b.n	31d6 <setupBoard+0x32>
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    31d2:	4210      	tst	r0, r2
    31d4:	d10a      	bne.n	31ec <setupBoard+0x48>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    31d6:	7e0b      	ldrb	r3, [r1, #24]
    31d8:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
    31da:	0002      	movs	r2, r0
    31dc:	401a      	ands	r2, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
    31de:	421d      	tst	r5, r3
    31e0:	d000      	beq.n	31e4 <setupBoard+0x40>
		status_flags |= ADC_STATUS_WINDOW;
    31e2:	4322      	orrs	r2, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    31e4:	421c      	tst	r4, r3
    31e6:	d0f4      	beq.n	31d2 <setupBoard+0x2e>
		status_flags |= ADC_STATUS_OVERRUN;
    31e8:	432a      	orrs	r2, r5
    31ea:	e7f2      	b.n	31d2 <setupBoard+0x2e>
    31ec:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    31ee:	b25b      	sxtb	r3, r3
    31f0:	2b00      	cmp	r3, #0
    31f2:	dbfb      	blt.n	31ec <setupBoard+0x48>
	*result = adc_module->RESULT.reg;
    31f4:	8b4c      	ldrh	r4, [r1, #26]
    31f6:	b2a4      	uxth	r4, r4
	adc_module->INTFLAG.reg = int_flags;
    31f8:	2301      	movs	r3, #1
    31fa:	760b      	strb	r3, [r1, #24]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    31fc:	7e0a      	ldrb	r2, [r1, #24]
    31fe:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    3200:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    3202:	0750      	lsls	r0, r2, #29
    3204:	d501      	bpl.n	320a <setupBoard+0x66>
		status_flags |= ADC_STATUS_WINDOW;
    3206:	2002      	movs	r0, #2
    3208:	4303      	orrs	r3, r0
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    320a:	0792      	lsls	r2, r2, #30
    320c:	d501      	bpl.n	3212 <setupBoard+0x6e>
		status_flags |= ADC_STATUS_OVERRUN;
    320e:	2204      	movs	r2, #4
    3210:	4313      	orrs	r3, r2
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    3212:	075b      	lsls	r3, r3, #29
    3214:	d501      	bpl.n	321a <setupBoard+0x76>
	adc_module->INTFLAG.reg = int_flags;
    3216:	2302      	movs	r3, #2
    3218:	760b      	strb	r3, [r1, #24]
	adc_start_conversion(&adc_instance);
	do {
	/* Wait for conversion to be done and read out result */
	} while (adc_read(&adc_instance, &adcResult) == STATUS_BUSY);
	
	delay_init();
    321a:	4b14      	ldr	r3, [pc, #80]	; (326c <setupBoard+0xc8>)
    321c:	4798      	blx	r3
	srand(adcResult);
    321e:	0020      	movs	r0, r4
    3220:	4b13      	ldr	r3, [pc, #76]	; (3270 <setupBoard+0xcc>)
    3222:	4798      	blx	r3
	conf_systick();
    3224:	4c13      	ldr	r4, [pc, #76]	; (3274 <setupBoard+0xd0>)
    3226:	47a0      	blx	r4
    
	//configure_usart_USB();


	configure_usart();
    3228:	4b13      	ldr	r3, [pc, #76]	; (3278 <setupBoard+0xd4>)
    322a:	4798      	blx	r3
	configure_usart_callbacks();
    322c:	4b13      	ldr	r3, [pc, #76]	; (327c <setupBoard+0xd8>)
    322e:	4798      	blx	r3
	cpu_irq_enable();
    3230:	2201      	movs	r2, #1
    3232:	4b13      	ldr	r3, [pc, #76]	; (3280 <setupBoard+0xdc>)
    3234:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    3236:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    323a:	b662      	cpsie	i
	system_interrupt_enable_global();
	//usart_read_buffer_job(&usart_instance, (uint8_t*)&rx_buf, 1);
	
	
	printf("Serial OK 9600 8N1\n\r");
    323c:	4811      	ldr	r0, [pc, #68]	; (3284 <setupBoard+0xe0>)
    323e:	4b12      	ldr	r3, [pc, #72]	; (3288 <setupBoard+0xe4>)
    3240:	4798      	blx	r3
	

	
	InitLCD();
    3242:	4b12      	ldr	r3, [pc, #72]	; (328c <setupBoard+0xe8>)
    3244:	4798      	blx	r3
	splashScreen();
    3246:	4b12      	ldr	r3, [pc, #72]	; (3290 <setupBoard+0xec>)
    3248:	4798      	blx	r3
			
	conf_systick();
    324a:	47a0      	blx	r4

	xCharPos=0;
    324c:	2300      	movs	r3, #0
    324e:	4a11      	ldr	r2, [pc, #68]	; (3294 <setupBoard+0xf0>)
    3250:	8013      	strh	r3, [r2, #0]
	yCharPos=0;
    3252:	4a11      	ldr	r2, [pc, #68]	; (3298 <setupBoard+0xf4>)
    3254:	8013      	strh	r3, [r2, #0]
	drawChar(0xFF);
    3256:	20ff      	movs	r0, #255	; 0xff
    3258:	4b10      	ldr	r3, [pc, #64]	; (329c <setupBoard+0xf8>)
    325a:	4798      	blx	r3
}
    325c:	bd70      	pop	{r4, r5, r6, pc}
    325e:	46c0      	nop			; (mov r8, r8)
    3260:	00001d2d 	.word	0x00001d2d
    3264:	00003145 	.word	0x00003145
    3268:	20000a9c 	.word	0x20000a9c
    326c:	00000529 	.word	0x00000529
    3270:	000036d1 	.word	0x000036d1
    3274:	00002fc1 	.word	0x00002fc1
    3278:	00003015 	.word	0x00003015
    327c:	0000311d 	.word	0x0000311d
    3280:	20000008 	.word	0x20000008
    3284:	000067e4 	.word	0x000067e4
    3288:	00003675 	.word	0x00003675
    328c:	00002d05 	.word	0x00002d05
    3290:	000001e5 	.word	0x000001e5
    3294:	20000298 	.word	0x20000298
    3298:	2000029a 	.word	0x2000029a
    329c:	00001f11 	.word	0x00001f11

000032a0 <main>:
{
    32a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	setupBoard();
    32a2:	4b1c      	ldr	r3, [pc, #112]	; (3314 <main+0x74>)
    32a4:	4798      	blx	r3
		if((ul_tickcount % (UINT16_MAX/4) == 0) && (funcLock == false))
    32a6:	4f1c      	ldr	r7, [pc, #112]	; (3318 <main+0x78>)
    32a8:	4e1c      	ldr	r6, [pc, #112]	; (331c <main+0x7c>)
    32aa:	4d1d      	ldr	r5, [pc, #116]	; (3320 <main+0x80>)
    32ac:	e015      	b.n	32da <main+0x3a>
		if((ul_tickcount % 200 == 0) && (funcLock == false))
    32ae:	21c8      	movs	r1, #200	; 0xc8
    32b0:	0020      	movs	r0, r4
    32b2:	4b1a      	ldr	r3, [pc, #104]	; (331c <main+0x7c>)
    32b4:	4798      	blx	r3
    32b6:	b289      	uxth	r1, r1
    32b8:	2900      	cmp	r1, #0
    32ba:	d10e      	bne.n	32da <main+0x3a>
    32bc:	4b19      	ldr	r3, [pc, #100]	; (3324 <main+0x84>)
    32be:	781b      	ldrb	r3, [r3, #0]
    32c0:	2b00      	cmp	r3, #0
    32c2:	d10a      	bne.n	32da <main+0x3a>
			funcLock = true;
    32c4:	4c17      	ldr	r4, [pc, #92]	; (3324 <main+0x84>)
    32c6:	2301      	movs	r3, #1
    32c8:	7023      	strb	r3, [r4, #0]
			readKeyboard();
    32ca:	4b17      	ldr	r3, [pc, #92]	; (3328 <main+0x88>)
    32cc:	4798      	blx	r3
			printKeyboardBuffer();
    32ce:	4b17      	ldr	r3, [pc, #92]	; (332c <main+0x8c>)
    32d0:	4798      	blx	r3
			parseRXBuffer();
    32d2:	4b17      	ldr	r3, [pc, #92]	; (3330 <main+0x90>)
    32d4:	4798      	blx	r3
			funcLock = false;
    32d6:	2300      	movs	r3, #0
    32d8:	7023      	strb	r3, [r4, #0]
		__WFI();
    32da:	bf30      	wfi
		if((ul_tickcount % (UINT16_MAX/4) == 0) && (funcLock == false))
    32dc:	883c      	ldrh	r4, [r7, #0]
    32de:	0029      	movs	r1, r5
    32e0:	0020      	movs	r0, r4
    32e2:	47b0      	blx	r6
    32e4:	b289      	uxth	r1, r1
    32e6:	2900      	cmp	r1, #0
    32e8:	d1e1      	bne.n	32ae <main+0xe>
    32ea:	4b0e      	ldr	r3, [pc, #56]	; (3324 <main+0x84>)
    32ec:	781b      	ldrb	r3, [r3, #0]
    32ee:	2b00      	cmp	r3, #0
    32f0:	d1f3      	bne.n	32da <main+0x3a>
			funcLock = true;
    32f2:	4c0c      	ldr	r4, [pc, #48]	; (3324 <main+0x84>)
    32f4:	3301      	adds	r3, #1
    32f6:	7023      	strb	r3, [r4, #0]
			blinkCursor();
    32f8:	4b0e      	ldr	r3, [pc, #56]	; (3334 <main+0x94>)
    32fa:	4798      	blx	r3
			funcLock = false;
    32fc:	2300      	movs	r3, #0
    32fe:	7023      	strb	r3, [r4, #0]
		if((ul_tickcount % 200 == 0) && (funcLock == false))
    3300:	4b05      	ldr	r3, [pc, #20]	; (3318 <main+0x78>)
    3302:	8818      	ldrh	r0, [r3, #0]
    3304:	21c8      	movs	r1, #200	; 0xc8
    3306:	4b05      	ldr	r3, [pc, #20]	; (331c <main+0x7c>)
    3308:	4798      	blx	r3
    330a:	b289      	uxth	r1, r1
    330c:	2900      	cmp	r1, #0
    330e:	d0d9      	beq.n	32c4 <main+0x24>
    3310:	e7e3      	b.n	32da <main+0x3a>
    3312:	46c0      	nop			; (mov r8, r8)
    3314:	000031a5 	.word	0x000031a5
    3318:	2000029e 	.word	0x2000029e
    331c:	00003445 	.word	0x00003445
    3320:	00003fff 	.word	0x00003fff
    3324:	2000029c 	.word	0x2000029c
    3328:	000027c9 	.word	0x000027c9
    332c:	000023a5 	.word	0x000023a5
    3330:	000003c5 	.word	0x000003c5
    3334:	000021a9 	.word	0x000021a9

00003338 <__udivsi3>:
    3338:	2200      	movs	r2, #0
    333a:	0843      	lsrs	r3, r0, #1
    333c:	428b      	cmp	r3, r1
    333e:	d374      	bcc.n	342a <__udivsi3+0xf2>
    3340:	0903      	lsrs	r3, r0, #4
    3342:	428b      	cmp	r3, r1
    3344:	d35f      	bcc.n	3406 <__udivsi3+0xce>
    3346:	0a03      	lsrs	r3, r0, #8
    3348:	428b      	cmp	r3, r1
    334a:	d344      	bcc.n	33d6 <__udivsi3+0x9e>
    334c:	0b03      	lsrs	r3, r0, #12
    334e:	428b      	cmp	r3, r1
    3350:	d328      	bcc.n	33a4 <__udivsi3+0x6c>
    3352:	0c03      	lsrs	r3, r0, #16
    3354:	428b      	cmp	r3, r1
    3356:	d30d      	bcc.n	3374 <__udivsi3+0x3c>
    3358:	22ff      	movs	r2, #255	; 0xff
    335a:	0209      	lsls	r1, r1, #8
    335c:	ba12      	rev	r2, r2
    335e:	0c03      	lsrs	r3, r0, #16
    3360:	428b      	cmp	r3, r1
    3362:	d302      	bcc.n	336a <__udivsi3+0x32>
    3364:	1212      	asrs	r2, r2, #8
    3366:	0209      	lsls	r1, r1, #8
    3368:	d065      	beq.n	3436 <__udivsi3+0xfe>
    336a:	0b03      	lsrs	r3, r0, #12
    336c:	428b      	cmp	r3, r1
    336e:	d319      	bcc.n	33a4 <__udivsi3+0x6c>
    3370:	e000      	b.n	3374 <__udivsi3+0x3c>
    3372:	0a09      	lsrs	r1, r1, #8
    3374:	0bc3      	lsrs	r3, r0, #15
    3376:	428b      	cmp	r3, r1
    3378:	d301      	bcc.n	337e <__udivsi3+0x46>
    337a:	03cb      	lsls	r3, r1, #15
    337c:	1ac0      	subs	r0, r0, r3
    337e:	4152      	adcs	r2, r2
    3380:	0b83      	lsrs	r3, r0, #14
    3382:	428b      	cmp	r3, r1
    3384:	d301      	bcc.n	338a <__udivsi3+0x52>
    3386:	038b      	lsls	r3, r1, #14
    3388:	1ac0      	subs	r0, r0, r3
    338a:	4152      	adcs	r2, r2
    338c:	0b43      	lsrs	r3, r0, #13
    338e:	428b      	cmp	r3, r1
    3390:	d301      	bcc.n	3396 <__udivsi3+0x5e>
    3392:	034b      	lsls	r3, r1, #13
    3394:	1ac0      	subs	r0, r0, r3
    3396:	4152      	adcs	r2, r2
    3398:	0b03      	lsrs	r3, r0, #12
    339a:	428b      	cmp	r3, r1
    339c:	d301      	bcc.n	33a2 <__udivsi3+0x6a>
    339e:	030b      	lsls	r3, r1, #12
    33a0:	1ac0      	subs	r0, r0, r3
    33a2:	4152      	adcs	r2, r2
    33a4:	0ac3      	lsrs	r3, r0, #11
    33a6:	428b      	cmp	r3, r1
    33a8:	d301      	bcc.n	33ae <__udivsi3+0x76>
    33aa:	02cb      	lsls	r3, r1, #11
    33ac:	1ac0      	subs	r0, r0, r3
    33ae:	4152      	adcs	r2, r2
    33b0:	0a83      	lsrs	r3, r0, #10
    33b2:	428b      	cmp	r3, r1
    33b4:	d301      	bcc.n	33ba <__udivsi3+0x82>
    33b6:	028b      	lsls	r3, r1, #10
    33b8:	1ac0      	subs	r0, r0, r3
    33ba:	4152      	adcs	r2, r2
    33bc:	0a43      	lsrs	r3, r0, #9
    33be:	428b      	cmp	r3, r1
    33c0:	d301      	bcc.n	33c6 <__udivsi3+0x8e>
    33c2:	024b      	lsls	r3, r1, #9
    33c4:	1ac0      	subs	r0, r0, r3
    33c6:	4152      	adcs	r2, r2
    33c8:	0a03      	lsrs	r3, r0, #8
    33ca:	428b      	cmp	r3, r1
    33cc:	d301      	bcc.n	33d2 <__udivsi3+0x9a>
    33ce:	020b      	lsls	r3, r1, #8
    33d0:	1ac0      	subs	r0, r0, r3
    33d2:	4152      	adcs	r2, r2
    33d4:	d2cd      	bcs.n	3372 <__udivsi3+0x3a>
    33d6:	09c3      	lsrs	r3, r0, #7
    33d8:	428b      	cmp	r3, r1
    33da:	d301      	bcc.n	33e0 <__udivsi3+0xa8>
    33dc:	01cb      	lsls	r3, r1, #7
    33de:	1ac0      	subs	r0, r0, r3
    33e0:	4152      	adcs	r2, r2
    33e2:	0983      	lsrs	r3, r0, #6
    33e4:	428b      	cmp	r3, r1
    33e6:	d301      	bcc.n	33ec <__udivsi3+0xb4>
    33e8:	018b      	lsls	r3, r1, #6
    33ea:	1ac0      	subs	r0, r0, r3
    33ec:	4152      	adcs	r2, r2
    33ee:	0943      	lsrs	r3, r0, #5
    33f0:	428b      	cmp	r3, r1
    33f2:	d301      	bcc.n	33f8 <__udivsi3+0xc0>
    33f4:	014b      	lsls	r3, r1, #5
    33f6:	1ac0      	subs	r0, r0, r3
    33f8:	4152      	adcs	r2, r2
    33fa:	0903      	lsrs	r3, r0, #4
    33fc:	428b      	cmp	r3, r1
    33fe:	d301      	bcc.n	3404 <__udivsi3+0xcc>
    3400:	010b      	lsls	r3, r1, #4
    3402:	1ac0      	subs	r0, r0, r3
    3404:	4152      	adcs	r2, r2
    3406:	08c3      	lsrs	r3, r0, #3
    3408:	428b      	cmp	r3, r1
    340a:	d301      	bcc.n	3410 <__udivsi3+0xd8>
    340c:	00cb      	lsls	r3, r1, #3
    340e:	1ac0      	subs	r0, r0, r3
    3410:	4152      	adcs	r2, r2
    3412:	0883      	lsrs	r3, r0, #2
    3414:	428b      	cmp	r3, r1
    3416:	d301      	bcc.n	341c <__udivsi3+0xe4>
    3418:	008b      	lsls	r3, r1, #2
    341a:	1ac0      	subs	r0, r0, r3
    341c:	4152      	adcs	r2, r2
    341e:	0843      	lsrs	r3, r0, #1
    3420:	428b      	cmp	r3, r1
    3422:	d301      	bcc.n	3428 <__udivsi3+0xf0>
    3424:	004b      	lsls	r3, r1, #1
    3426:	1ac0      	subs	r0, r0, r3
    3428:	4152      	adcs	r2, r2
    342a:	1a41      	subs	r1, r0, r1
    342c:	d200      	bcs.n	3430 <__udivsi3+0xf8>
    342e:	4601      	mov	r1, r0
    3430:	4152      	adcs	r2, r2
    3432:	4610      	mov	r0, r2
    3434:	4770      	bx	lr
    3436:	e7ff      	b.n	3438 <__udivsi3+0x100>
    3438:	b501      	push	{r0, lr}
    343a:	2000      	movs	r0, #0
    343c:	f000 f806 	bl	344c <__aeabi_idiv0>
    3440:	bd02      	pop	{r1, pc}
    3442:	46c0      	nop			; (mov r8, r8)

00003444 <__aeabi_uidivmod>:
    3444:	2900      	cmp	r1, #0
    3446:	d0f7      	beq.n	3438 <__udivsi3+0x100>
    3448:	e776      	b.n	3338 <__udivsi3>
    344a:	4770      	bx	lr

0000344c <__aeabi_idiv0>:
    344c:	4770      	bx	lr
    344e:	46c0      	nop			; (mov r8, r8)

00003450 <__aeabi_lmul>:
    3450:	b5f0      	push	{r4, r5, r6, r7, lr}
    3452:	46ce      	mov	lr, r9
    3454:	4647      	mov	r7, r8
    3456:	0415      	lsls	r5, r2, #16
    3458:	0c2d      	lsrs	r5, r5, #16
    345a:	002e      	movs	r6, r5
    345c:	b580      	push	{r7, lr}
    345e:	0407      	lsls	r7, r0, #16
    3460:	0c14      	lsrs	r4, r2, #16
    3462:	0c3f      	lsrs	r7, r7, #16
    3464:	4699      	mov	r9, r3
    3466:	0c03      	lsrs	r3, r0, #16
    3468:	437e      	muls	r6, r7
    346a:	435d      	muls	r5, r3
    346c:	4367      	muls	r7, r4
    346e:	4363      	muls	r3, r4
    3470:	197f      	adds	r7, r7, r5
    3472:	0c34      	lsrs	r4, r6, #16
    3474:	19e4      	adds	r4, r4, r7
    3476:	469c      	mov	ip, r3
    3478:	42a5      	cmp	r5, r4
    347a:	d903      	bls.n	3484 <__aeabi_lmul+0x34>
    347c:	2380      	movs	r3, #128	; 0x80
    347e:	025b      	lsls	r3, r3, #9
    3480:	4698      	mov	r8, r3
    3482:	44c4      	add	ip, r8
    3484:	464b      	mov	r3, r9
    3486:	4351      	muls	r1, r2
    3488:	4343      	muls	r3, r0
    348a:	0436      	lsls	r6, r6, #16
    348c:	0c36      	lsrs	r6, r6, #16
    348e:	0c25      	lsrs	r5, r4, #16
    3490:	0424      	lsls	r4, r4, #16
    3492:	4465      	add	r5, ip
    3494:	19a4      	adds	r4, r4, r6
    3496:	1859      	adds	r1, r3, r1
    3498:	1949      	adds	r1, r1, r5
    349a:	0020      	movs	r0, r4
    349c:	bc0c      	pop	{r2, r3}
    349e:	4690      	mov	r8, r2
    34a0:	4699      	mov	r9, r3
    34a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000034a4 <__libc_init_array>:
    34a4:	b570      	push	{r4, r5, r6, lr}
    34a6:	2600      	movs	r6, #0
    34a8:	4d0c      	ldr	r5, [pc, #48]	; (34dc <__libc_init_array+0x38>)
    34aa:	4c0d      	ldr	r4, [pc, #52]	; (34e0 <__libc_init_array+0x3c>)
    34ac:	1b64      	subs	r4, r4, r5
    34ae:	10a4      	asrs	r4, r4, #2
    34b0:	42a6      	cmp	r6, r4
    34b2:	d109      	bne.n	34c8 <__libc_init_array+0x24>
    34b4:	2600      	movs	r6, #0
    34b6:	f003 f9ed 	bl	6894 <_init>
    34ba:	4d0a      	ldr	r5, [pc, #40]	; (34e4 <__libc_init_array+0x40>)
    34bc:	4c0a      	ldr	r4, [pc, #40]	; (34e8 <__libc_init_array+0x44>)
    34be:	1b64      	subs	r4, r4, r5
    34c0:	10a4      	asrs	r4, r4, #2
    34c2:	42a6      	cmp	r6, r4
    34c4:	d105      	bne.n	34d2 <__libc_init_array+0x2e>
    34c6:	bd70      	pop	{r4, r5, r6, pc}
    34c8:	00b3      	lsls	r3, r6, #2
    34ca:	58eb      	ldr	r3, [r5, r3]
    34cc:	4798      	blx	r3
    34ce:	3601      	adds	r6, #1
    34d0:	e7ee      	b.n	34b0 <__libc_init_array+0xc>
    34d2:	00b3      	lsls	r3, r6, #2
    34d4:	58eb      	ldr	r3, [r5, r3]
    34d6:	4798      	blx	r3
    34d8:	3601      	adds	r6, #1
    34da:	e7f2      	b.n	34c2 <__libc_init_array+0x1e>
    34dc:	000068a0 	.word	0x000068a0
    34e0:	000068a0 	.word	0x000068a0
    34e4:	000068a0 	.word	0x000068a0
    34e8:	000068a4 	.word	0x000068a4

000034ec <malloc>:
    34ec:	b510      	push	{r4, lr}
    34ee:	4b03      	ldr	r3, [pc, #12]	; (34fc <malloc+0x10>)
    34f0:	0001      	movs	r1, r0
    34f2:	6818      	ldr	r0, [r3, #0]
    34f4:	f000 f860 	bl	35b8 <_malloc_r>
    34f8:	bd10      	pop	{r4, pc}
    34fa:	46c0      	nop			; (mov r8, r8)
    34fc:	20000158 	.word	0x20000158

00003500 <memcpy>:
    3500:	2300      	movs	r3, #0
    3502:	b510      	push	{r4, lr}
    3504:	429a      	cmp	r2, r3
    3506:	d100      	bne.n	350a <memcpy+0xa>
    3508:	bd10      	pop	{r4, pc}
    350a:	5ccc      	ldrb	r4, [r1, r3]
    350c:	54c4      	strb	r4, [r0, r3]
    350e:	3301      	adds	r3, #1
    3510:	e7f8      	b.n	3504 <memcpy+0x4>

00003512 <memset>:
    3512:	0003      	movs	r3, r0
    3514:	1882      	adds	r2, r0, r2
    3516:	4293      	cmp	r3, r2
    3518:	d100      	bne.n	351c <memset+0xa>
    351a:	4770      	bx	lr
    351c:	7019      	strb	r1, [r3, #0]
    351e:	3301      	adds	r3, #1
    3520:	e7f9      	b.n	3516 <memset+0x4>
	...

00003524 <_free_r>:
    3524:	b570      	push	{r4, r5, r6, lr}
    3526:	0005      	movs	r5, r0
    3528:	2900      	cmp	r1, #0
    352a:	d010      	beq.n	354e <_free_r+0x2a>
    352c:	1f0c      	subs	r4, r1, #4
    352e:	6823      	ldr	r3, [r4, #0]
    3530:	2b00      	cmp	r3, #0
    3532:	da00      	bge.n	3536 <_free_r+0x12>
    3534:	18e4      	adds	r4, r4, r3
    3536:	0028      	movs	r0, r5
    3538:	f000 fbfe 	bl	3d38 <__malloc_lock>
    353c:	4a1d      	ldr	r2, [pc, #116]	; (35b4 <_free_r+0x90>)
    353e:	6813      	ldr	r3, [r2, #0]
    3540:	2b00      	cmp	r3, #0
    3542:	d105      	bne.n	3550 <_free_r+0x2c>
    3544:	6063      	str	r3, [r4, #4]
    3546:	6014      	str	r4, [r2, #0]
    3548:	0028      	movs	r0, r5
    354a:	f000 fbf6 	bl	3d3a <__malloc_unlock>
    354e:	bd70      	pop	{r4, r5, r6, pc}
    3550:	42a3      	cmp	r3, r4
    3552:	d909      	bls.n	3568 <_free_r+0x44>
    3554:	6821      	ldr	r1, [r4, #0]
    3556:	1860      	adds	r0, r4, r1
    3558:	4283      	cmp	r3, r0
    355a:	d1f3      	bne.n	3544 <_free_r+0x20>
    355c:	6818      	ldr	r0, [r3, #0]
    355e:	685b      	ldr	r3, [r3, #4]
    3560:	1841      	adds	r1, r0, r1
    3562:	6021      	str	r1, [r4, #0]
    3564:	e7ee      	b.n	3544 <_free_r+0x20>
    3566:	0013      	movs	r3, r2
    3568:	685a      	ldr	r2, [r3, #4]
    356a:	2a00      	cmp	r2, #0
    356c:	d001      	beq.n	3572 <_free_r+0x4e>
    356e:	42a2      	cmp	r2, r4
    3570:	d9f9      	bls.n	3566 <_free_r+0x42>
    3572:	6819      	ldr	r1, [r3, #0]
    3574:	1858      	adds	r0, r3, r1
    3576:	42a0      	cmp	r0, r4
    3578:	d10b      	bne.n	3592 <_free_r+0x6e>
    357a:	6820      	ldr	r0, [r4, #0]
    357c:	1809      	adds	r1, r1, r0
    357e:	1858      	adds	r0, r3, r1
    3580:	6019      	str	r1, [r3, #0]
    3582:	4282      	cmp	r2, r0
    3584:	d1e0      	bne.n	3548 <_free_r+0x24>
    3586:	6810      	ldr	r0, [r2, #0]
    3588:	6852      	ldr	r2, [r2, #4]
    358a:	1841      	adds	r1, r0, r1
    358c:	6019      	str	r1, [r3, #0]
    358e:	605a      	str	r2, [r3, #4]
    3590:	e7da      	b.n	3548 <_free_r+0x24>
    3592:	42a0      	cmp	r0, r4
    3594:	d902      	bls.n	359c <_free_r+0x78>
    3596:	230c      	movs	r3, #12
    3598:	602b      	str	r3, [r5, #0]
    359a:	e7d5      	b.n	3548 <_free_r+0x24>
    359c:	6821      	ldr	r1, [r4, #0]
    359e:	1860      	adds	r0, r4, r1
    35a0:	4282      	cmp	r2, r0
    35a2:	d103      	bne.n	35ac <_free_r+0x88>
    35a4:	6810      	ldr	r0, [r2, #0]
    35a6:	6852      	ldr	r2, [r2, #4]
    35a8:	1841      	adds	r1, r0, r1
    35aa:	6021      	str	r1, [r4, #0]
    35ac:	6062      	str	r2, [r4, #4]
    35ae:	605c      	str	r4, [r3, #4]
    35b0:	e7ca      	b.n	3548 <_free_r+0x24>
    35b2:	46c0      	nop			; (mov r8, r8)
    35b4:	200002a0 	.word	0x200002a0

000035b8 <_malloc_r>:
    35b8:	2303      	movs	r3, #3
    35ba:	b570      	push	{r4, r5, r6, lr}
    35bc:	1ccd      	adds	r5, r1, #3
    35be:	439d      	bics	r5, r3
    35c0:	3508      	adds	r5, #8
    35c2:	0006      	movs	r6, r0
    35c4:	2d0c      	cmp	r5, #12
    35c6:	d21e      	bcs.n	3606 <_malloc_r+0x4e>
    35c8:	250c      	movs	r5, #12
    35ca:	42a9      	cmp	r1, r5
    35cc:	d81d      	bhi.n	360a <_malloc_r+0x52>
    35ce:	0030      	movs	r0, r6
    35d0:	f000 fbb2 	bl	3d38 <__malloc_lock>
    35d4:	4a25      	ldr	r2, [pc, #148]	; (366c <_malloc_r+0xb4>)
    35d6:	6814      	ldr	r4, [r2, #0]
    35d8:	0021      	movs	r1, r4
    35da:	2900      	cmp	r1, #0
    35dc:	d119      	bne.n	3612 <_malloc_r+0x5a>
    35de:	4c24      	ldr	r4, [pc, #144]	; (3670 <_malloc_r+0xb8>)
    35e0:	6823      	ldr	r3, [r4, #0]
    35e2:	2b00      	cmp	r3, #0
    35e4:	d103      	bne.n	35ee <_malloc_r+0x36>
    35e6:	0030      	movs	r0, r6
    35e8:	f000 f8dc 	bl	37a4 <_sbrk_r>
    35ec:	6020      	str	r0, [r4, #0]
    35ee:	0029      	movs	r1, r5
    35f0:	0030      	movs	r0, r6
    35f2:	f000 f8d7 	bl	37a4 <_sbrk_r>
    35f6:	1c43      	adds	r3, r0, #1
    35f8:	d12c      	bne.n	3654 <_malloc_r+0x9c>
    35fa:	230c      	movs	r3, #12
    35fc:	0030      	movs	r0, r6
    35fe:	6033      	str	r3, [r6, #0]
    3600:	f000 fb9b 	bl	3d3a <__malloc_unlock>
    3604:	e003      	b.n	360e <_malloc_r+0x56>
    3606:	2d00      	cmp	r5, #0
    3608:	dadf      	bge.n	35ca <_malloc_r+0x12>
    360a:	230c      	movs	r3, #12
    360c:	6033      	str	r3, [r6, #0]
    360e:	2000      	movs	r0, #0
    3610:	bd70      	pop	{r4, r5, r6, pc}
    3612:	680b      	ldr	r3, [r1, #0]
    3614:	1b5b      	subs	r3, r3, r5
    3616:	d41a      	bmi.n	364e <_malloc_r+0x96>
    3618:	2b0b      	cmp	r3, #11
    361a:	d903      	bls.n	3624 <_malloc_r+0x6c>
    361c:	600b      	str	r3, [r1, #0]
    361e:	18cc      	adds	r4, r1, r3
    3620:	6025      	str	r5, [r4, #0]
    3622:	e003      	b.n	362c <_malloc_r+0x74>
    3624:	428c      	cmp	r4, r1
    3626:	d10e      	bne.n	3646 <_malloc_r+0x8e>
    3628:	6863      	ldr	r3, [r4, #4]
    362a:	6013      	str	r3, [r2, #0]
    362c:	0030      	movs	r0, r6
    362e:	f000 fb84 	bl	3d3a <__malloc_unlock>
    3632:	0020      	movs	r0, r4
    3634:	2207      	movs	r2, #7
    3636:	300b      	adds	r0, #11
    3638:	1d23      	adds	r3, r4, #4
    363a:	4390      	bics	r0, r2
    363c:	1ac3      	subs	r3, r0, r3
    363e:	d0e7      	beq.n	3610 <_malloc_r+0x58>
    3640:	425a      	negs	r2, r3
    3642:	50e2      	str	r2, [r4, r3]
    3644:	e7e4      	b.n	3610 <_malloc_r+0x58>
    3646:	684b      	ldr	r3, [r1, #4]
    3648:	6063      	str	r3, [r4, #4]
    364a:	000c      	movs	r4, r1
    364c:	e7ee      	b.n	362c <_malloc_r+0x74>
    364e:	000c      	movs	r4, r1
    3650:	6849      	ldr	r1, [r1, #4]
    3652:	e7c2      	b.n	35da <_malloc_r+0x22>
    3654:	2303      	movs	r3, #3
    3656:	1cc4      	adds	r4, r0, #3
    3658:	439c      	bics	r4, r3
    365a:	42a0      	cmp	r0, r4
    365c:	d0e0      	beq.n	3620 <_malloc_r+0x68>
    365e:	1a21      	subs	r1, r4, r0
    3660:	0030      	movs	r0, r6
    3662:	f000 f89f 	bl	37a4 <_sbrk_r>
    3666:	1c43      	adds	r3, r0, #1
    3668:	d1da      	bne.n	3620 <_malloc_r+0x68>
    366a:	e7c6      	b.n	35fa <_malloc_r+0x42>
    366c:	200002a0 	.word	0x200002a0
    3670:	200002a4 	.word	0x200002a4

00003674 <iprintf>:
    3674:	b40f      	push	{r0, r1, r2, r3}
    3676:	4b0b      	ldr	r3, [pc, #44]	; (36a4 <iprintf+0x30>)
    3678:	b513      	push	{r0, r1, r4, lr}
    367a:	681c      	ldr	r4, [r3, #0]
    367c:	2c00      	cmp	r4, #0
    367e:	d005      	beq.n	368c <iprintf+0x18>
    3680:	69a3      	ldr	r3, [r4, #24]
    3682:	2b00      	cmp	r3, #0
    3684:	d102      	bne.n	368c <iprintf+0x18>
    3686:	0020      	movs	r0, r4
    3688:	f000 fa54 	bl	3b34 <__sinit>
    368c:	ab05      	add	r3, sp, #20
    368e:	9a04      	ldr	r2, [sp, #16]
    3690:	68a1      	ldr	r1, [r4, #8]
    3692:	0020      	movs	r0, r4
    3694:	9301      	str	r3, [sp, #4]
    3696:	f000 fb79 	bl	3d8c <_vfiprintf_r>
    369a:	bc16      	pop	{r1, r2, r4}
    369c:	bc08      	pop	{r3}
    369e:	b004      	add	sp, #16
    36a0:	4718      	bx	r3
    36a2:	46c0      	nop			; (mov r8, r8)
    36a4:	20000158 	.word	0x20000158

000036a8 <putchar>:
    36a8:	4b08      	ldr	r3, [pc, #32]	; (36cc <putchar+0x24>)
    36aa:	b570      	push	{r4, r5, r6, lr}
    36ac:	681c      	ldr	r4, [r3, #0]
    36ae:	0005      	movs	r5, r0
    36b0:	2c00      	cmp	r4, #0
    36b2:	d005      	beq.n	36c0 <putchar+0x18>
    36b4:	69a3      	ldr	r3, [r4, #24]
    36b6:	2b00      	cmp	r3, #0
    36b8:	d102      	bne.n	36c0 <putchar+0x18>
    36ba:	0020      	movs	r0, r4
    36bc:	f000 fa3a 	bl	3b34 <__sinit>
    36c0:	0029      	movs	r1, r5
    36c2:	68a2      	ldr	r2, [r4, #8]
    36c4:	0020      	movs	r0, r4
    36c6:	f000 fe05 	bl	42d4 <_putc_r>
    36ca:	bd70      	pop	{r4, r5, r6, pc}
    36cc:	20000158 	.word	0x20000158

000036d0 <srand>:
    36d0:	4b10      	ldr	r3, [pc, #64]	; (3714 <srand+0x44>)
    36d2:	b570      	push	{r4, r5, r6, lr}
    36d4:	681c      	ldr	r4, [r3, #0]
    36d6:	0005      	movs	r5, r0
    36d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    36da:	2b00      	cmp	r3, #0
    36dc:	d115      	bne.n	370a <srand+0x3a>
    36de:	2018      	movs	r0, #24
    36e0:	f7ff ff04 	bl	34ec <malloc>
    36e4:	4b0c      	ldr	r3, [pc, #48]	; (3718 <srand+0x48>)
    36e6:	63a0      	str	r0, [r4, #56]	; 0x38
    36e8:	8003      	strh	r3, [r0, #0]
    36ea:	4b0c      	ldr	r3, [pc, #48]	; (371c <srand+0x4c>)
    36ec:	2201      	movs	r2, #1
    36ee:	8043      	strh	r3, [r0, #2]
    36f0:	4b0b      	ldr	r3, [pc, #44]	; (3720 <srand+0x50>)
    36f2:	8083      	strh	r3, [r0, #4]
    36f4:	4b0b      	ldr	r3, [pc, #44]	; (3724 <srand+0x54>)
    36f6:	80c3      	strh	r3, [r0, #6]
    36f8:	4b0b      	ldr	r3, [pc, #44]	; (3728 <srand+0x58>)
    36fa:	8103      	strh	r3, [r0, #8]
    36fc:	2305      	movs	r3, #5
    36fe:	8143      	strh	r3, [r0, #10]
    3700:	3306      	adds	r3, #6
    3702:	8183      	strh	r3, [r0, #12]
    3704:	2300      	movs	r3, #0
    3706:	6102      	str	r2, [r0, #16]
    3708:	6143      	str	r3, [r0, #20]
    370a:	2200      	movs	r2, #0
    370c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    370e:	611d      	str	r5, [r3, #16]
    3710:	615a      	str	r2, [r3, #20]
    3712:	bd70      	pop	{r4, r5, r6, pc}
    3714:	20000158 	.word	0x20000158
    3718:	0000330e 	.word	0x0000330e
    371c:	ffffabcd 	.word	0xffffabcd
    3720:	00001234 	.word	0x00001234
    3724:	ffffe66d 	.word	0xffffe66d
    3728:	ffffdeec 	.word	0xffffdeec

0000372c <rand>:
    372c:	4b15      	ldr	r3, [pc, #84]	; (3784 <rand+0x58>)
    372e:	b510      	push	{r4, lr}
    3730:	681c      	ldr	r4, [r3, #0]
    3732:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    3734:	2b00      	cmp	r3, #0
    3736:	d115      	bne.n	3764 <rand+0x38>
    3738:	2018      	movs	r0, #24
    373a:	f7ff fed7 	bl	34ec <malloc>
    373e:	4b12      	ldr	r3, [pc, #72]	; (3788 <rand+0x5c>)
    3740:	63a0      	str	r0, [r4, #56]	; 0x38
    3742:	8003      	strh	r3, [r0, #0]
    3744:	4b11      	ldr	r3, [pc, #68]	; (378c <rand+0x60>)
    3746:	2201      	movs	r2, #1
    3748:	8043      	strh	r3, [r0, #2]
    374a:	4b11      	ldr	r3, [pc, #68]	; (3790 <rand+0x64>)
    374c:	8083      	strh	r3, [r0, #4]
    374e:	4b11      	ldr	r3, [pc, #68]	; (3794 <rand+0x68>)
    3750:	80c3      	strh	r3, [r0, #6]
    3752:	4b11      	ldr	r3, [pc, #68]	; (3798 <rand+0x6c>)
    3754:	8103      	strh	r3, [r0, #8]
    3756:	2305      	movs	r3, #5
    3758:	8143      	strh	r3, [r0, #10]
    375a:	3306      	adds	r3, #6
    375c:	8183      	strh	r3, [r0, #12]
    375e:	2300      	movs	r3, #0
    3760:	6102      	str	r2, [r0, #16]
    3762:	6143      	str	r3, [r0, #20]
    3764:	6ba4      	ldr	r4, [r4, #56]	; 0x38
    3766:	4a0d      	ldr	r2, [pc, #52]	; (379c <rand+0x70>)
    3768:	6920      	ldr	r0, [r4, #16]
    376a:	6961      	ldr	r1, [r4, #20]
    376c:	4b0c      	ldr	r3, [pc, #48]	; (37a0 <rand+0x74>)
    376e:	f7ff fe6f 	bl	3450 <__aeabi_lmul>
    3772:	2201      	movs	r2, #1
    3774:	2300      	movs	r3, #0
    3776:	1880      	adds	r0, r0, r2
    3778:	4159      	adcs	r1, r3
    377a:	6120      	str	r0, [r4, #16]
    377c:	6161      	str	r1, [r4, #20]
    377e:	0048      	lsls	r0, r1, #1
    3780:	0840      	lsrs	r0, r0, #1
    3782:	bd10      	pop	{r4, pc}
    3784:	20000158 	.word	0x20000158
    3788:	0000330e 	.word	0x0000330e
    378c:	ffffabcd 	.word	0xffffabcd
    3790:	00001234 	.word	0x00001234
    3794:	ffffe66d 	.word	0xffffe66d
    3798:	ffffdeec 	.word	0xffffdeec
    379c:	4c957f2d 	.word	0x4c957f2d
    37a0:	5851f42d 	.word	0x5851f42d

000037a4 <_sbrk_r>:
    37a4:	2300      	movs	r3, #0
    37a6:	b570      	push	{r4, r5, r6, lr}
    37a8:	4c06      	ldr	r4, [pc, #24]	; (37c4 <_sbrk_r+0x20>)
    37aa:	0005      	movs	r5, r0
    37ac:	0008      	movs	r0, r1
    37ae:	6023      	str	r3, [r4, #0]
    37b0:	f7fe fb90 	bl	1ed4 <_sbrk>
    37b4:	1c43      	adds	r3, r0, #1
    37b6:	d103      	bne.n	37c0 <_sbrk_r+0x1c>
    37b8:	6823      	ldr	r3, [r4, #0]
    37ba:	2b00      	cmp	r3, #0
    37bc:	d000      	beq.n	37c0 <_sbrk_r+0x1c>
    37be:	602b      	str	r3, [r5, #0]
    37c0:	bd70      	pop	{r4, r5, r6, pc}
    37c2:	46c0      	nop			; (mov r8, r8)
    37c4:	20000abc 	.word	0x20000abc

000037c8 <setbuf>:
    37c8:	424a      	negs	r2, r1
    37ca:	414a      	adcs	r2, r1
    37cc:	2380      	movs	r3, #128	; 0x80
    37ce:	b510      	push	{r4, lr}
    37d0:	0052      	lsls	r2, r2, #1
    37d2:	00db      	lsls	r3, r3, #3
    37d4:	f000 f802 	bl	37dc <setvbuf>
    37d8:	bd10      	pop	{r4, pc}
	...

000037dc <setvbuf>:
    37dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    37de:	001d      	movs	r5, r3
    37e0:	4b4f      	ldr	r3, [pc, #316]	; (3920 <setvbuf+0x144>)
    37e2:	b085      	sub	sp, #20
    37e4:	681e      	ldr	r6, [r3, #0]
    37e6:	0004      	movs	r4, r0
    37e8:	000f      	movs	r7, r1
    37ea:	9200      	str	r2, [sp, #0]
    37ec:	2e00      	cmp	r6, #0
    37ee:	d005      	beq.n	37fc <setvbuf+0x20>
    37f0:	69b3      	ldr	r3, [r6, #24]
    37f2:	2b00      	cmp	r3, #0
    37f4:	d102      	bne.n	37fc <setvbuf+0x20>
    37f6:	0030      	movs	r0, r6
    37f8:	f000 f99c 	bl	3b34 <__sinit>
    37fc:	4b49      	ldr	r3, [pc, #292]	; (3924 <setvbuf+0x148>)
    37fe:	429c      	cmp	r4, r3
    3800:	d150      	bne.n	38a4 <setvbuf+0xc8>
    3802:	6874      	ldr	r4, [r6, #4]
    3804:	9b00      	ldr	r3, [sp, #0]
    3806:	2b02      	cmp	r3, #2
    3808:	d005      	beq.n	3816 <setvbuf+0x3a>
    380a:	2b01      	cmp	r3, #1
    380c:	d900      	bls.n	3810 <setvbuf+0x34>
    380e:	e084      	b.n	391a <setvbuf+0x13e>
    3810:	2d00      	cmp	r5, #0
    3812:	da00      	bge.n	3816 <setvbuf+0x3a>
    3814:	e081      	b.n	391a <setvbuf+0x13e>
    3816:	0021      	movs	r1, r4
    3818:	0030      	movs	r0, r6
    381a:	f000 f91d 	bl	3a58 <_fflush_r>
    381e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3820:	2900      	cmp	r1, #0
    3822:	d008      	beq.n	3836 <setvbuf+0x5a>
    3824:	0023      	movs	r3, r4
    3826:	3344      	adds	r3, #68	; 0x44
    3828:	4299      	cmp	r1, r3
    382a:	d002      	beq.n	3832 <setvbuf+0x56>
    382c:	0030      	movs	r0, r6
    382e:	f7ff fe79 	bl	3524 <_free_r>
    3832:	2300      	movs	r3, #0
    3834:	6363      	str	r3, [r4, #52]	; 0x34
    3836:	2300      	movs	r3, #0
    3838:	61a3      	str	r3, [r4, #24]
    383a:	6063      	str	r3, [r4, #4]
    383c:	89a3      	ldrh	r3, [r4, #12]
    383e:	061b      	lsls	r3, r3, #24
    3840:	d503      	bpl.n	384a <setvbuf+0x6e>
    3842:	6921      	ldr	r1, [r4, #16]
    3844:	0030      	movs	r0, r6
    3846:	f7ff fe6d 	bl	3524 <_free_r>
    384a:	89a3      	ldrh	r3, [r4, #12]
    384c:	4a36      	ldr	r2, [pc, #216]	; (3928 <setvbuf+0x14c>)
    384e:	4013      	ands	r3, r2
    3850:	81a3      	strh	r3, [r4, #12]
    3852:	9b00      	ldr	r3, [sp, #0]
    3854:	2b02      	cmp	r3, #2
    3856:	d05a      	beq.n	390e <setvbuf+0x132>
    3858:	ab03      	add	r3, sp, #12
    385a:	aa02      	add	r2, sp, #8
    385c:	0021      	movs	r1, r4
    385e:	0030      	movs	r0, r6
    3860:	f000 f9fe 	bl	3c60 <__swhatbuf_r>
    3864:	89a3      	ldrh	r3, [r4, #12]
    3866:	4318      	orrs	r0, r3
    3868:	81a0      	strh	r0, [r4, #12]
    386a:	2d00      	cmp	r5, #0
    386c:	d124      	bne.n	38b8 <setvbuf+0xdc>
    386e:	9d02      	ldr	r5, [sp, #8]
    3870:	0028      	movs	r0, r5
    3872:	f7ff fe3b 	bl	34ec <malloc>
    3876:	9501      	str	r5, [sp, #4]
    3878:	1e07      	subs	r7, r0, #0
    387a:	d142      	bne.n	3902 <setvbuf+0x126>
    387c:	9b02      	ldr	r3, [sp, #8]
    387e:	9301      	str	r3, [sp, #4]
    3880:	42ab      	cmp	r3, r5
    3882:	d139      	bne.n	38f8 <setvbuf+0x11c>
    3884:	2001      	movs	r0, #1
    3886:	4240      	negs	r0, r0
    3888:	2302      	movs	r3, #2
    388a:	89a2      	ldrh	r2, [r4, #12]
    388c:	4313      	orrs	r3, r2
    388e:	81a3      	strh	r3, [r4, #12]
    3890:	2300      	movs	r3, #0
    3892:	60a3      	str	r3, [r4, #8]
    3894:	0023      	movs	r3, r4
    3896:	3347      	adds	r3, #71	; 0x47
    3898:	6023      	str	r3, [r4, #0]
    389a:	6123      	str	r3, [r4, #16]
    389c:	2301      	movs	r3, #1
    389e:	6163      	str	r3, [r4, #20]
    38a0:	b005      	add	sp, #20
    38a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    38a4:	4b21      	ldr	r3, [pc, #132]	; (392c <setvbuf+0x150>)
    38a6:	429c      	cmp	r4, r3
    38a8:	d101      	bne.n	38ae <setvbuf+0xd2>
    38aa:	68b4      	ldr	r4, [r6, #8]
    38ac:	e7aa      	b.n	3804 <setvbuf+0x28>
    38ae:	4b20      	ldr	r3, [pc, #128]	; (3930 <setvbuf+0x154>)
    38b0:	429c      	cmp	r4, r3
    38b2:	d1a7      	bne.n	3804 <setvbuf+0x28>
    38b4:	68f4      	ldr	r4, [r6, #12]
    38b6:	e7a5      	b.n	3804 <setvbuf+0x28>
    38b8:	2f00      	cmp	r7, #0
    38ba:	d0d9      	beq.n	3870 <setvbuf+0x94>
    38bc:	69b3      	ldr	r3, [r6, #24]
    38be:	2b00      	cmp	r3, #0
    38c0:	d102      	bne.n	38c8 <setvbuf+0xec>
    38c2:	0030      	movs	r0, r6
    38c4:	f000 f936 	bl	3b34 <__sinit>
    38c8:	9b00      	ldr	r3, [sp, #0]
    38ca:	2b01      	cmp	r3, #1
    38cc:	d103      	bne.n	38d6 <setvbuf+0xfa>
    38ce:	89a3      	ldrh	r3, [r4, #12]
    38d0:	9a00      	ldr	r2, [sp, #0]
    38d2:	431a      	orrs	r2, r3
    38d4:	81a2      	strh	r2, [r4, #12]
    38d6:	2008      	movs	r0, #8
    38d8:	89a3      	ldrh	r3, [r4, #12]
    38da:	6027      	str	r7, [r4, #0]
    38dc:	6127      	str	r7, [r4, #16]
    38de:	6165      	str	r5, [r4, #20]
    38e0:	4018      	ands	r0, r3
    38e2:	d018      	beq.n	3916 <setvbuf+0x13a>
    38e4:	2001      	movs	r0, #1
    38e6:	4018      	ands	r0, r3
    38e8:	2300      	movs	r3, #0
    38ea:	4298      	cmp	r0, r3
    38ec:	d011      	beq.n	3912 <setvbuf+0x136>
    38ee:	426d      	negs	r5, r5
    38f0:	60a3      	str	r3, [r4, #8]
    38f2:	61a5      	str	r5, [r4, #24]
    38f4:	0018      	movs	r0, r3
    38f6:	e7d3      	b.n	38a0 <setvbuf+0xc4>
    38f8:	9801      	ldr	r0, [sp, #4]
    38fa:	f7ff fdf7 	bl	34ec <malloc>
    38fe:	1e07      	subs	r7, r0, #0
    3900:	d0c0      	beq.n	3884 <setvbuf+0xa8>
    3902:	2380      	movs	r3, #128	; 0x80
    3904:	89a2      	ldrh	r2, [r4, #12]
    3906:	9d01      	ldr	r5, [sp, #4]
    3908:	4313      	orrs	r3, r2
    390a:	81a3      	strh	r3, [r4, #12]
    390c:	e7d6      	b.n	38bc <setvbuf+0xe0>
    390e:	2000      	movs	r0, #0
    3910:	e7ba      	b.n	3888 <setvbuf+0xac>
    3912:	60a5      	str	r5, [r4, #8]
    3914:	e7c4      	b.n	38a0 <setvbuf+0xc4>
    3916:	60a0      	str	r0, [r4, #8]
    3918:	e7c2      	b.n	38a0 <setvbuf+0xc4>
    391a:	2001      	movs	r0, #1
    391c:	4240      	negs	r0, r0
    391e:	e7bf      	b.n	38a0 <setvbuf+0xc4>
    3920:	20000158 	.word	0x20000158
    3924:	00006820 	.word	0x00006820
    3928:	fffff35c 	.word	0xfffff35c
    392c:	00006840 	.word	0x00006840
    3930:	00006800 	.word	0x00006800

00003934 <strlen>:
    3934:	2300      	movs	r3, #0
    3936:	5cc2      	ldrb	r2, [r0, r3]
    3938:	3301      	adds	r3, #1
    393a:	2a00      	cmp	r2, #0
    393c:	d1fb      	bne.n	3936 <strlen+0x2>
    393e:	1e58      	subs	r0, r3, #1
    3940:	4770      	bx	lr
	...

00003944 <__sflush_r>:
    3944:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3946:	898a      	ldrh	r2, [r1, #12]
    3948:	0005      	movs	r5, r0
    394a:	000c      	movs	r4, r1
    394c:	0713      	lsls	r3, r2, #28
    394e:	d460      	bmi.n	3a12 <__sflush_r+0xce>
    3950:	684b      	ldr	r3, [r1, #4]
    3952:	2b00      	cmp	r3, #0
    3954:	dc04      	bgt.n	3960 <__sflush_r+0x1c>
    3956:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    3958:	2b00      	cmp	r3, #0
    395a:	dc01      	bgt.n	3960 <__sflush_r+0x1c>
    395c:	2000      	movs	r0, #0
    395e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3960:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    3962:	2f00      	cmp	r7, #0
    3964:	d0fa      	beq.n	395c <__sflush_r+0x18>
    3966:	2300      	movs	r3, #0
    3968:	682e      	ldr	r6, [r5, #0]
    396a:	602b      	str	r3, [r5, #0]
    396c:	2380      	movs	r3, #128	; 0x80
    396e:	015b      	lsls	r3, r3, #5
    3970:	401a      	ands	r2, r3
    3972:	d034      	beq.n	39de <__sflush_r+0x9a>
    3974:	6d60      	ldr	r0, [r4, #84]	; 0x54
    3976:	89a3      	ldrh	r3, [r4, #12]
    3978:	075b      	lsls	r3, r3, #29
    397a:	d506      	bpl.n	398a <__sflush_r+0x46>
    397c:	6863      	ldr	r3, [r4, #4]
    397e:	1ac0      	subs	r0, r0, r3
    3980:	6b63      	ldr	r3, [r4, #52]	; 0x34
    3982:	2b00      	cmp	r3, #0
    3984:	d001      	beq.n	398a <__sflush_r+0x46>
    3986:	6c23      	ldr	r3, [r4, #64]	; 0x40
    3988:	1ac0      	subs	r0, r0, r3
    398a:	0002      	movs	r2, r0
    398c:	6a21      	ldr	r1, [r4, #32]
    398e:	2300      	movs	r3, #0
    3990:	0028      	movs	r0, r5
    3992:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    3994:	47b8      	blx	r7
    3996:	89a1      	ldrh	r1, [r4, #12]
    3998:	1c43      	adds	r3, r0, #1
    399a:	d106      	bne.n	39aa <__sflush_r+0x66>
    399c:	682b      	ldr	r3, [r5, #0]
    399e:	2b1d      	cmp	r3, #29
    39a0:	d831      	bhi.n	3a06 <__sflush_r+0xc2>
    39a2:	4a2c      	ldr	r2, [pc, #176]	; (3a54 <__sflush_r+0x110>)
    39a4:	40da      	lsrs	r2, r3
    39a6:	07d3      	lsls	r3, r2, #31
    39a8:	d52d      	bpl.n	3a06 <__sflush_r+0xc2>
    39aa:	2300      	movs	r3, #0
    39ac:	6063      	str	r3, [r4, #4]
    39ae:	6923      	ldr	r3, [r4, #16]
    39b0:	6023      	str	r3, [r4, #0]
    39b2:	04cb      	lsls	r3, r1, #19
    39b4:	d505      	bpl.n	39c2 <__sflush_r+0x7e>
    39b6:	1c43      	adds	r3, r0, #1
    39b8:	d102      	bne.n	39c0 <__sflush_r+0x7c>
    39ba:	682b      	ldr	r3, [r5, #0]
    39bc:	2b00      	cmp	r3, #0
    39be:	d100      	bne.n	39c2 <__sflush_r+0x7e>
    39c0:	6560      	str	r0, [r4, #84]	; 0x54
    39c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
    39c4:	602e      	str	r6, [r5, #0]
    39c6:	2900      	cmp	r1, #0
    39c8:	d0c8      	beq.n	395c <__sflush_r+0x18>
    39ca:	0023      	movs	r3, r4
    39cc:	3344      	adds	r3, #68	; 0x44
    39ce:	4299      	cmp	r1, r3
    39d0:	d002      	beq.n	39d8 <__sflush_r+0x94>
    39d2:	0028      	movs	r0, r5
    39d4:	f7ff fda6 	bl	3524 <_free_r>
    39d8:	2000      	movs	r0, #0
    39da:	6360      	str	r0, [r4, #52]	; 0x34
    39dc:	e7bf      	b.n	395e <__sflush_r+0x1a>
    39de:	2301      	movs	r3, #1
    39e0:	6a21      	ldr	r1, [r4, #32]
    39e2:	0028      	movs	r0, r5
    39e4:	47b8      	blx	r7
    39e6:	1c43      	adds	r3, r0, #1
    39e8:	d1c5      	bne.n	3976 <__sflush_r+0x32>
    39ea:	682b      	ldr	r3, [r5, #0]
    39ec:	2b00      	cmp	r3, #0
    39ee:	d0c2      	beq.n	3976 <__sflush_r+0x32>
    39f0:	2b1d      	cmp	r3, #29
    39f2:	d001      	beq.n	39f8 <__sflush_r+0xb4>
    39f4:	2b16      	cmp	r3, #22
    39f6:	d101      	bne.n	39fc <__sflush_r+0xb8>
    39f8:	602e      	str	r6, [r5, #0]
    39fa:	e7af      	b.n	395c <__sflush_r+0x18>
    39fc:	2340      	movs	r3, #64	; 0x40
    39fe:	89a2      	ldrh	r2, [r4, #12]
    3a00:	4313      	orrs	r3, r2
    3a02:	81a3      	strh	r3, [r4, #12]
    3a04:	e7ab      	b.n	395e <__sflush_r+0x1a>
    3a06:	2340      	movs	r3, #64	; 0x40
    3a08:	430b      	orrs	r3, r1
    3a0a:	2001      	movs	r0, #1
    3a0c:	81a3      	strh	r3, [r4, #12]
    3a0e:	4240      	negs	r0, r0
    3a10:	e7a5      	b.n	395e <__sflush_r+0x1a>
    3a12:	690f      	ldr	r7, [r1, #16]
    3a14:	2f00      	cmp	r7, #0
    3a16:	d0a1      	beq.n	395c <__sflush_r+0x18>
    3a18:	680b      	ldr	r3, [r1, #0]
    3a1a:	600f      	str	r7, [r1, #0]
    3a1c:	1bdb      	subs	r3, r3, r7
    3a1e:	9301      	str	r3, [sp, #4]
    3a20:	2300      	movs	r3, #0
    3a22:	0792      	lsls	r2, r2, #30
    3a24:	d100      	bne.n	3a28 <__sflush_r+0xe4>
    3a26:	694b      	ldr	r3, [r1, #20]
    3a28:	60a3      	str	r3, [r4, #8]
    3a2a:	9b01      	ldr	r3, [sp, #4]
    3a2c:	2b00      	cmp	r3, #0
    3a2e:	dc00      	bgt.n	3a32 <__sflush_r+0xee>
    3a30:	e794      	b.n	395c <__sflush_r+0x18>
    3a32:	9b01      	ldr	r3, [sp, #4]
    3a34:	003a      	movs	r2, r7
    3a36:	6a21      	ldr	r1, [r4, #32]
    3a38:	0028      	movs	r0, r5
    3a3a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    3a3c:	47b0      	blx	r6
    3a3e:	2800      	cmp	r0, #0
    3a40:	dc03      	bgt.n	3a4a <__sflush_r+0x106>
    3a42:	2340      	movs	r3, #64	; 0x40
    3a44:	89a2      	ldrh	r2, [r4, #12]
    3a46:	4313      	orrs	r3, r2
    3a48:	e7df      	b.n	3a0a <__sflush_r+0xc6>
    3a4a:	9b01      	ldr	r3, [sp, #4]
    3a4c:	183f      	adds	r7, r7, r0
    3a4e:	1a1b      	subs	r3, r3, r0
    3a50:	9301      	str	r3, [sp, #4]
    3a52:	e7ea      	b.n	3a2a <__sflush_r+0xe6>
    3a54:	20400001 	.word	0x20400001

00003a58 <_fflush_r>:
    3a58:	690b      	ldr	r3, [r1, #16]
    3a5a:	b570      	push	{r4, r5, r6, lr}
    3a5c:	0005      	movs	r5, r0
    3a5e:	000c      	movs	r4, r1
    3a60:	2b00      	cmp	r3, #0
    3a62:	d101      	bne.n	3a68 <_fflush_r+0x10>
    3a64:	2000      	movs	r0, #0
    3a66:	bd70      	pop	{r4, r5, r6, pc}
    3a68:	2800      	cmp	r0, #0
    3a6a:	d004      	beq.n	3a76 <_fflush_r+0x1e>
    3a6c:	6983      	ldr	r3, [r0, #24]
    3a6e:	2b00      	cmp	r3, #0
    3a70:	d101      	bne.n	3a76 <_fflush_r+0x1e>
    3a72:	f000 f85f 	bl	3b34 <__sinit>
    3a76:	4b0b      	ldr	r3, [pc, #44]	; (3aa4 <_fflush_r+0x4c>)
    3a78:	429c      	cmp	r4, r3
    3a7a:	d109      	bne.n	3a90 <_fflush_r+0x38>
    3a7c:	686c      	ldr	r4, [r5, #4]
    3a7e:	220c      	movs	r2, #12
    3a80:	5ea3      	ldrsh	r3, [r4, r2]
    3a82:	2b00      	cmp	r3, #0
    3a84:	d0ee      	beq.n	3a64 <_fflush_r+0xc>
    3a86:	0021      	movs	r1, r4
    3a88:	0028      	movs	r0, r5
    3a8a:	f7ff ff5b 	bl	3944 <__sflush_r>
    3a8e:	e7ea      	b.n	3a66 <_fflush_r+0xe>
    3a90:	4b05      	ldr	r3, [pc, #20]	; (3aa8 <_fflush_r+0x50>)
    3a92:	429c      	cmp	r4, r3
    3a94:	d101      	bne.n	3a9a <_fflush_r+0x42>
    3a96:	68ac      	ldr	r4, [r5, #8]
    3a98:	e7f1      	b.n	3a7e <_fflush_r+0x26>
    3a9a:	4b04      	ldr	r3, [pc, #16]	; (3aac <_fflush_r+0x54>)
    3a9c:	429c      	cmp	r4, r3
    3a9e:	d1ee      	bne.n	3a7e <_fflush_r+0x26>
    3aa0:	68ec      	ldr	r4, [r5, #12]
    3aa2:	e7ec      	b.n	3a7e <_fflush_r+0x26>
    3aa4:	00006820 	.word	0x00006820
    3aa8:	00006840 	.word	0x00006840
    3aac:	00006800 	.word	0x00006800

00003ab0 <_cleanup_r>:
    3ab0:	b510      	push	{r4, lr}
    3ab2:	4902      	ldr	r1, [pc, #8]	; (3abc <_cleanup_r+0xc>)
    3ab4:	f000 f8b2 	bl	3c1c <_fwalk_reent>
    3ab8:	bd10      	pop	{r4, pc}
    3aba:	46c0      	nop			; (mov r8, r8)
    3abc:	00003a59 	.word	0x00003a59

00003ac0 <std.isra.0>:
    3ac0:	2300      	movs	r3, #0
    3ac2:	b510      	push	{r4, lr}
    3ac4:	0004      	movs	r4, r0
    3ac6:	6003      	str	r3, [r0, #0]
    3ac8:	6043      	str	r3, [r0, #4]
    3aca:	6083      	str	r3, [r0, #8]
    3acc:	8181      	strh	r1, [r0, #12]
    3ace:	6643      	str	r3, [r0, #100]	; 0x64
    3ad0:	81c2      	strh	r2, [r0, #14]
    3ad2:	6103      	str	r3, [r0, #16]
    3ad4:	6143      	str	r3, [r0, #20]
    3ad6:	6183      	str	r3, [r0, #24]
    3ad8:	0019      	movs	r1, r3
    3ada:	2208      	movs	r2, #8
    3adc:	305c      	adds	r0, #92	; 0x5c
    3ade:	f7ff fd18 	bl	3512 <memset>
    3ae2:	4b05      	ldr	r3, [pc, #20]	; (3af8 <std.isra.0+0x38>)
    3ae4:	6224      	str	r4, [r4, #32]
    3ae6:	6263      	str	r3, [r4, #36]	; 0x24
    3ae8:	4b04      	ldr	r3, [pc, #16]	; (3afc <std.isra.0+0x3c>)
    3aea:	62a3      	str	r3, [r4, #40]	; 0x28
    3aec:	4b04      	ldr	r3, [pc, #16]	; (3b00 <std.isra.0+0x40>)
    3aee:	62e3      	str	r3, [r4, #44]	; 0x2c
    3af0:	4b04      	ldr	r3, [pc, #16]	; (3b04 <std.isra.0+0x44>)
    3af2:	6323      	str	r3, [r4, #48]	; 0x30
    3af4:	bd10      	pop	{r4, pc}
    3af6:	46c0      	nop			; (mov r8, r8)
    3af8:	00004341 	.word	0x00004341
    3afc:	00004369 	.word	0x00004369
    3b00:	000043a1 	.word	0x000043a1
    3b04:	000043cd 	.word	0x000043cd

00003b08 <__sfmoreglue>:
    3b08:	b570      	push	{r4, r5, r6, lr}
    3b0a:	2568      	movs	r5, #104	; 0x68
    3b0c:	1e4a      	subs	r2, r1, #1
    3b0e:	4355      	muls	r5, r2
    3b10:	000e      	movs	r6, r1
    3b12:	0029      	movs	r1, r5
    3b14:	3174      	adds	r1, #116	; 0x74
    3b16:	f7ff fd4f 	bl	35b8 <_malloc_r>
    3b1a:	1e04      	subs	r4, r0, #0
    3b1c:	d008      	beq.n	3b30 <__sfmoreglue+0x28>
    3b1e:	2100      	movs	r1, #0
    3b20:	002a      	movs	r2, r5
    3b22:	6001      	str	r1, [r0, #0]
    3b24:	6046      	str	r6, [r0, #4]
    3b26:	300c      	adds	r0, #12
    3b28:	60a0      	str	r0, [r4, #8]
    3b2a:	3268      	adds	r2, #104	; 0x68
    3b2c:	f7ff fcf1 	bl	3512 <memset>
    3b30:	0020      	movs	r0, r4
    3b32:	bd70      	pop	{r4, r5, r6, pc}

00003b34 <__sinit>:
    3b34:	6983      	ldr	r3, [r0, #24]
    3b36:	b513      	push	{r0, r1, r4, lr}
    3b38:	0004      	movs	r4, r0
    3b3a:	2b00      	cmp	r3, #0
    3b3c:	d128      	bne.n	3b90 <__sinit+0x5c>
    3b3e:	6483      	str	r3, [r0, #72]	; 0x48
    3b40:	64c3      	str	r3, [r0, #76]	; 0x4c
    3b42:	6503      	str	r3, [r0, #80]	; 0x50
    3b44:	4b13      	ldr	r3, [pc, #76]	; (3b94 <__sinit+0x60>)
    3b46:	4a14      	ldr	r2, [pc, #80]	; (3b98 <__sinit+0x64>)
    3b48:	681b      	ldr	r3, [r3, #0]
    3b4a:	6282      	str	r2, [r0, #40]	; 0x28
    3b4c:	9301      	str	r3, [sp, #4]
    3b4e:	4298      	cmp	r0, r3
    3b50:	d101      	bne.n	3b56 <__sinit+0x22>
    3b52:	2301      	movs	r3, #1
    3b54:	6183      	str	r3, [r0, #24]
    3b56:	0020      	movs	r0, r4
    3b58:	f000 f820 	bl	3b9c <__sfp>
    3b5c:	6060      	str	r0, [r4, #4]
    3b5e:	0020      	movs	r0, r4
    3b60:	f000 f81c 	bl	3b9c <__sfp>
    3b64:	60a0      	str	r0, [r4, #8]
    3b66:	0020      	movs	r0, r4
    3b68:	f000 f818 	bl	3b9c <__sfp>
    3b6c:	2200      	movs	r2, #0
    3b6e:	60e0      	str	r0, [r4, #12]
    3b70:	2104      	movs	r1, #4
    3b72:	6860      	ldr	r0, [r4, #4]
    3b74:	f7ff ffa4 	bl	3ac0 <std.isra.0>
    3b78:	2201      	movs	r2, #1
    3b7a:	2109      	movs	r1, #9
    3b7c:	68a0      	ldr	r0, [r4, #8]
    3b7e:	f7ff ff9f 	bl	3ac0 <std.isra.0>
    3b82:	2202      	movs	r2, #2
    3b84:	2112      	movs	r1, #18
    3b86:	68e0      	ldr	r0, [r4, #12]
    3b88:	f7ff ff9a 	bl	3ac0 <std.isra.0>
    3b8c:	2301      	movs	r3, #1
    3b8e:	61a3      	str	r3, [r4, #24]
    3b90:	bd13      	pop	{r0, r1, r4, pc}
    3b92:	46c0      	nop			; (mov r8, r8)
    3b94:	000067fc 	.word	0x000067fc
    3b98:	00003ab1 	.word	0x00003ab1

00003b9c <__sfp>:
    3b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3b9e:	4b1e      	ldr	r3, [pc, #120]	; (3c18 <__sfp+0x7c>)
    3ba0:	0007      	movs	r7, r0
    3ba2:	681e      	ldr	r6, [r3, #0]
    3ba4:	69b3      	ldr	r3, [r6, #24]
    3ba6:	2b00      	cmp	r3, #0
    3ba8:	d102      	bne.n	3bb0 <__sfp+0x14>
    3baa:	0030      	movs	r0, r6
    3bac:	f7ff ffc2 	bl	3b34 <__sinit>
    3bb0:	3648      	adds	r6, #72	; 0x48
    3bb2:	68b4      	ldr	r4, [r6, #8]
    3bb4:	6873      	ldr	r3, [r6, #4]
    3bb6:	3b01      	subs	r3, #1
    3bb8:	d504      	bpl.n	3bc4 <__sfp+0x28>
    3bba:	6833      	ldr	r3, [r6, #0]
    3bbc:	2b00      	cmp	r3, #0
    3bbe:	d007      	beq.n	3bd0 <__sfp+0x34>
    3bc0:	6836      	ldr	r6, [r6, #0]
    3bc2:	e7f6      	b.n	3bb2 <__sfp+0x16>
    3bc4:	220c      	movs	r2, #12
    3bc6:	5ea5      	ldrsh	r5, [r4, r2]
    3bc8:	2d00      	cmp	r5, #0
    3bca:	d00d      	beq.n	3be8 <__sfp+0x4c>
    3bcc:	3468      	adds	r4, #104	; 0x68
    3bce:	e7f2      	b.n	3bb6 <__sfp+0x1a>
    3bd0:	2104      	movs	r1, #4
    3bd2:	0038      	movs	r0, r7
    3bd4:	f7ff ff98 	bl	3b08 <__sfmoreglue>
    3bd8:	6030      	str	r0, [r6, #0]
    3bda:	2800      	cmp	r0, #0
    3bdc:	d1f0      	bne.n	3bc0 <__sfp+0x24>
    3bde:	230c      	movs	r3, #12
    3be0:	0004      	movs	r4, r0
    3be2:	603b      	str	r3, [r7, #0]
    3be4:	0020      	movs	r0, r4
    3be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3be8:	2301      	movs	r3, #1
    3bea:	0020      	movs	r0, r4
    3bec:	425b      	negs	r3, r3
    3bee:	81e3      	strh	r3, [r4, #14]
    3bf0:	3302      	adds	r3, #2
    3bf2:	81a3      	strh	r3, [r4, #12]
    3bf4:	6665      	str	r5, [r4, #100]	; 0x64
    3bf6:	6025      	str	r5, [r4, #0]
    3bf8:	60a5      	str	r5, [r4, #8]
    3bfa:	6065      	str	r5, [r4, #4]
    3bfc:	6125      	str	r5, [r4, #16]
    3bfe:	6165      	str	r5, [r4, #20]
    3c00:	61a5      	str	r5, [r4, #24]
    3c02:	2208      	movs	r2, #8
    3c04:	0029      	movs	r1, r5
    3c06:	305c      	adds	r0, #92	; 0x5c
    3c08:	f7ff fc83 	bl	3512 <memset>
    3c0c:	6365      	str	r5, [r4, #52]	; 0x34
    3c0e:	63a5      	str	r5, [r4, #56]	; 0x38
    3c10:	64a5      	str	r5, [r4, #72]	; 0x48
    3c12:	64e5      	str	r5, [r4, #76]	; 0x4c
    3c14:	e7e6      	b.n	3be4 <__sfp+0x48>
    3c16:	46c0      	nop			; (mov r8, r8)
    3c18:	000067fc 	.word	0x000067fc

00003c1c <_fwalk_reent>:
    3c1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3c1e:	0004      	movs	r4, r0
    3c20:	0007      	movs	r7, r0
    3c22:	2600      	movs	r6, #0
    3c24:	9101      	str	r1, [sp, #4]
    3c26:	3448      	adds	r4, #72	; 0x48
    3c28:	2c00      	cmp	r4, #0
    3c2a:	d101      	bne.n	3c30 <_fwalk_reent+0x14>
    3c2c:	0030      	movs	r0, r6
    3c2e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3c30:	6863      	ldr	r3, [r4, #4]
    3c32:	68a5      	ldr	r5, [r4, #8]
    3c34:	9300      	str	r3, [sp, #0]
    3c36:	9b00      	ldr	r3, [sp, #0]
    3c38:	3b01      	subs	r3, #1
    3c3a:	9300      	str	r3, [sp, #0]
    3c3c:	d501      	bpl.n	3c42 <_fwalk_reent+0x26>
    3c3e:	6824      	ldr	r4, [r4, #0]
    3c40:	e7f2      	b.n	3c28 <_fwalk_reent+0xc>
    3c42:	89ab      	ldrh	r3, [r5, #12]
    3c44:	2b01      	cmp	r3, #1
    3c46:	d908      	bls.n	3c5a <_fwalk_reent+0x3e>
    3c48:	220e      	movs	r2, #14
    3c4a:	5eab      	ldrsh	r3, [r5, r2]
    3c4c:	3301      	adds	r3, #1
    3c4e:	d004      	beq.n	3c5a <_fwalk_reent+0x3e>
    3c50:	0029      	movs	r1, r5
    3c52:	0038      	movs	r0, r7
    3c54:	9b01      	ldr	r3, [sp, #4]
    3c56:	4798      	blx	r3
    3c58:	4306      	orrs	r6, r0
    3c5a:	3568      	adds	r5, #104	; 0x68
    3c5c:	e7eb      	b.n	3c36 <_fwalk_reent+0x1a>
	...

00003c60 <__swhatbuf_r>:
    3c60:	b570      	push	{r4, r5, r6, lr}
    3c62:	000e      	movs	r6, r1
    3c64:	001d      	movs	r5, r3
    3c66:	230e      	movs	r3, #14
    3c68:	5ec9      	ldrsh	r1, [r1, r3]
    3c6a:	b090      	sub	sp, #64	; 0x40
    3c6c:	0014      	movs	r4, r2
    3c6e:	2900      	cmp	r1, #0
    3c70:	da07      	bge.n	3c82 <__swhatbuf_r+0x22>
    3c72:	2300      	movs	r3, #0
    3c74:	602b      	str	r3, [r5, #0]
    3c76:	89b3      	ldrh	r3, [r6, #12]
    3c78:	061b      	lsls	r3, r3, #24
    3c7a:	d411      	bmi.n	3ca0 <__swhatbuf_r+0x40>
    3c7c:	2380      	movs	r3, #128	; 0x80
    3c7e:	00db      	lsls	r3, r3, #3
    3c80:	e00f      	b.n	3ca2 <__swhatbuf_r+0x42>
    3c82:	aa01      	add	r2, sp, #4
    3c84:	f000 fc9a 	bl	45bc <_fstat_r>
    3c88:	2800      	cmp	r0, #0
    3c8a:	dbf2      	blt.n	3c72 <__swhatbuf_r+0x12>
    3c8c:	22f0      	movs	r2, #240	; 0xf0
    3c8e:	9b02      	ldr	r3, [sp, #8]
    3c90:	0212      	lsls	r2, r2, #8
    3c92:	4013      	ands	r3, r2
    3c94:	4a05      	ldr	r2, [pc, #20]	; (3cac <__swhatbuf_r+0x4c>)
    3c96:	189b      	adds	r3, r3, r2
    3c98:	425a      	negs	r2, r3
    3c9a:	4153      	adcs	r3, r2
    3c9c:	602b      	str	r3, [r5, #0]
    3c9e:	e7ed      	b.n	3c7c <__swhatbuf_r+0x1c>
    3ca0:	2340      	movs	r3, #64	; 0x40
    3ca2:	2000      	movs	r0, #0
    3ca4:	6023      	str	r3, [r4, #0]
    3ca6:	b010      	add	sp, #64	; 0x40
    3ca8:	bd70      	pop	{r4, r5, r6, pc}
    3caa:	46c0      	nop			; (mov r8, r8)
    3cac:	ffffe000 	.word	0xffffe000

00003cb0 <__smakebuf_r>:
    3cb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3cb2:	2602      	movs	r6, #2
    3cb4:	898b      	ldrh	r3, [r1, #12]
    3cb6:	0005      	movs	r5, r0
    3cb8:	000c      	movs	r4, r1
    3cba:	4233      	tst	r3, r6
    3cbc:	d006      	beq.n	3ccc <__smakebuf_r+0x1c>
    3cbe:	0023      	movs	r3, r4
    3cc0:	3347      	adds	r3, #71	; 0x47
    3cc2:	6023      	str	r3, [r4, #0]
    3cc4:	6123      	str	r3, [r4, #16]
    3cc6:	2301      	movs	r3, #1
    3cc8:	6163      	str	r3, [r4, #20]
    3cca:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    3ccc:	ab01      	add	r3, sp, #4
    3cce:	466a      	mov	r2, sp
    3cd0:	f7ff ffc6 	bl	3c60 <__swhatbuf_r>
    3cd4:	9900      	ldr	r1, [sp, #0]
    3cd6:	0007      	movs	r7, r0
    3cd8:	0028      	movs	r0, r5
    3cda:	f7ff fc6d 	bl	35b8 <_malloc_r>
    3cde:	2800      	cmp	r0, #0
    3ce0:	d108      	bne.n	3cf4 <__smakebuf_r+0x44>
    3ce2:	220c      	movs	r2, #12
    3ce4:	5ea3      	ldrsh	r3, [r4, r2]
    3ce6:	059a      	lsls	r2, r3, #22
    3ce8:	d4ef      	bmi.n	3cca <__smakebuf_r+0x1a>
    3cea:	2203      	movs	r2, #3
    3cec:	4393      	bics	r3, r2
    3cee:	431e      	orrs	r6, r3
    3cf0:	81a6      	strh	r6, [r4, #12]
    3cf2:	e7e4      	b.n	3cbe <__smakebuf_r+0xe>
    3cf4:	4b0f      	ldr	r3, [pc, #60]	; (3d34 <__smakebuf_r+0x84>)
    3cf6:	62ab      	str	r3, [r5, #40]	; 0x28
    3cf8:	2380      	movs	r3, #128	; 0x80
    3cfa:	89a2      	ldrh	r2, [r4, #12]
    3cfc:	6020      	str	r0, [r4, #0]
    3cfe:	4313      	orrs	r3, r2
    3d00:	81a3      	strh	r3, [r4, #12]
    3d02:	9b00      	ldr	r3, [sp, #0]
    3d04:	6120      	str	r0, [r4, #16]
    3d06:	6163      	str	r3, [r4, #20]
    3d08:	9b01      	ldr	r3, [sp, #4]
    3d0a:	2b00      	cmp	r3, #0
    3d0c:	d00d      	beq.n	3d2a <__smakebuf_r+0x7a>
    3d0e:	230e      	movs	r3, #14
    3d10:	5ee1      	ldrsh	r1, [r4, r3]
    3d12:	0028      	movs	r0, r5
    3d14:	f000 fc64 	bl	45e0 <_isatty_r>
    3d18:	2800      	cmp	r0, #0
    3d1a:	d006      	beq.n	3d2a <__smakebuf_r+0x7a>
    3d1c:	2203      	movs	r2, #3
    3d1e:	89a3      	ldrh	r3, [r4, #12]
    3d20:	4393      	bics	r3, r2
    3d22:	001a      	movs	r2, r3
    3d24:	2301      	movs	r3, #1
    3d26:	4313      	orrs	r3, r2
    3d28:	81a3      	strh	r3, [r4, #12]
    3d2a:	89a0      	ldrh	r0, [r4, #12]
    3d2c:	4338      	orrs	r0, r7
    3d2e:	81a0      	strh	r0, [r4, #12]
    3d30:	e7cb      	b.n	3cca <__smakebuf_r+0x1a>
    3d32:	46c0      	nop			; (mov r8, r8)
    3d34:	00003ab1 	.word	0x00003ab1

00003d38 <__malloc_lock>:
    3d38:	4770      	bx	lr

00003d3a <__malloc_unlock>:
    3d3a:	4770      	bx	lr

00003d3c <__sfputc_r>:
    3d3c:	6893      	ldr	r3, [r2, #8]
    3d3e:	b510      	push	{r4, lr}
    3d40:	3b01      	subs	r3, #1
    3d42:	6093      	str	r3, [r2, #8]
    3d44:	2b00      	cmp	r3, #0
    3d46:	da05      	bge.n	3d54 <__sfputc_r+0x18>
    3d48:	6994      	ldr	r4, [r2, #24]
    3d4a:	42a3      	cmp	r3, r4
    3d4c:	db08      	blt.n	3d60 <__sfputc_r+0x24>
    3d4e:	b2cb      	uxtb	r3, r1
    3d50:	2b0a      	cmp	r3, #10
    3d52:	d005      	beq.n	3d60 <__sfputc_r+0x24>
    3d54:	6813      	ldr	r3, [r2, #0]
    3d56:	1c58      	adds	r0, r3, #1
    3d58:	6010      	str	r0, [r2, #0]
    3d5a:	7019      	strb	r1, [r3, #0]
    3d5c:	b2c8      	uxtb	r0, r1
    3d5e:	bd10      	pop	{r4, pc}
    3d60:	f000 fb3a 	bl	43d8 <__swbuf_r>
    3d64:	e7fb      	b.n	3d5e <__sfputc_r+0x22>

00003d66 <__sfputs_r>:
    3d66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3d68:	0006      	movs	r6, r0
    3d6a:	000f      	movs	r7, r1
    3d6c:	0014      	movs	r4, r2
    3d6e:	18d5      	adds	r5, r2, r3
    3d70:	42ac      	cmp	r4, r5
    3d72:	d101      	bne.n	3d78 <__sfputs_r+0x12>
    3d74:	2000      	movs	r0, #0
    3d76:	e007      	b.n	3d88 <__sfputs_r+0x22>
    3d78:	7821      	ldrb	r1, [r4, #0]
    3d7a:	003a      	movs	r2, r7
    3d7c:	0030      	movs	r0, r6
    3d7e:	f7ff ffdd 	bl	3d3c <__sfputc_r>
    3d82:	3401      	adds	r4, #1
    3d84:	1c43      	adds	r3, r0, #1
    3d86:	d1f3      	bne.n	3d70 <__sfputs_r+0xa>
    3d88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00003d8c <_vfiprintf_r>:
    3d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3d8e:	b09f      	sub	sp, #124	; 0x7c
    3d90:	0006      	movs	r6, r0
    3d92:	000f      	movs	r7, r1
    3d94:	0014      	movs	r4, r2
    3d96:	9305      	str	r3, [sp, #20]
    3d98:	2800      	cmp	r0, #0
    3d9a:	d004      	beq.n	3da6 <_vfiprintf_r+0x1a>
    3d9c:	6983      	ldr	r3, [r0, #24]
    3d9e:	2b00      	cmp	r3, #0
    3da0:	d101      	bne.n	3da6 <_vfiprintf_r+0x1a>
    3da2:	f7ff fec7 	bl	3b34 <__sinit>
    3da6:	4b7f      	ldr	r3, [pc, #508]	; (3fa4 <_vfiprintf_r+0x218>)
    3da8:	429f      	cmp	r7, r3
    3daa:	d15c      	bne.n	3e66 <_vfiprintf_r+0xda>
    3dac:	6877      	ldr	r7, [r6, #4]
    3dae:	89bb      	ldrh	r3, [r7, #12]
    3db0:	071b      	lsls	r3, r3, #28
    3db2:	d562      	bpl.n	3e7a <_vfiprintf_r+0xee>
    3db4:	693b      	ldr	r3, [r7, #16]
    3db6:	2b00      	cmp	r3, #0
    3db8:	d05f      	beq.n	3e7a <_vfiprintf_r+0xee>
    3dba:	2300      	movs	r3, #0
    3dbc:	ad06      	add	r5, sp, #24
    3dbe:	616b      	str	r3, [r5, #20]
    3dc0:	3320      	adds	r3, #32
    3dc2:	766b      	strb	r3, [r5, #25]
    3dc4:	3310      	adds	r3, #16
    3dc6:	76ab      	strb	r3, [r5, #26]
    3dc8:	9402      	str	r4, [sp, #8]
    3dca:	9c02      	ldr	r4, [sp, #8]
    3dcc:	7823      	ldrb	r3, [r4, #0]
    3dce:	2b00      	cmp	r3, #0
    3dd0:	d15d      	bne.n	3e8e <_vfiprintf_r+0x102>
    3dd2:	9b02      	ldr	r3, [sp, #8]
    3dd4:	1ae3      	subs	r3, r4, r3
    3dd6:	9304      	str	r3, [sp, #16]
    3dd8:	d00d      	beq.n	3df6 <_vfiprintf_r+0x6a>
    3dda:	9b04      	ldr	r3, [sp, #16]
    3ddc:	9a02      	ldr	r2, [sp, #8]
    3dde:	0039      	movs	r1, r7
    3de0:	0030      	movs	r0, r6
    3de2:	f7ff ffc0 	bl	3d66 <__sfputs_r>
    3de6:	1c43      	adds	r3, r0, #1
    3de8:	d100      	bne.n	3dec <_vfiprintf_r+0x60>
    3dea:	e0cc      	b.n	3f86 <_vfiprintf_r+0x1fa>
    3dec:	696a      	ldr	r2, [r5, #20]
    3dee:	9b04      	ldr	r3, [sp, #16]
    3df0:	4694      	mov	ip, r2
    3df2:	4463      	add	r3, ip
    3df4:	616b      	str	r3, [r5, #20]
    3df6:	7823      	ldrb	r3, [r4, #0]
    3df8:	2b00      	cmp	r3, #0
    3dfa:	d100      	bne.n	3dfe <_vfiprintf_r+0x72>
    3dfc:	e0c3      	b.n	3f86 <_vfiprintf_r+0x1fa>
    3dfe:	2201      	movs	r2, #1
    3e00:	2300      	movs	r3, #0
    3e02:	4252      	negs	r2, r2
    3e04:	606a      	str	r2, [r5, #4]
    3e06:	a902      	add	r1, sp, #8
    3e08:	3254      	adds	r2, #84	; 0x54
    3e0a:	1852      	adds	r2, r2, r1
    3e0c:	3401      	adds	r4, #1
    3e0e:	602b      	str	r3, [r5, #0]
    3e10:	60eb      	str	r3, [r5, #12]
    3e12:	60ab      	str	r3, [r5, #8]
    3e14:	7013      	strb	r3, [r2, #0]
    3e16:	65ab      	str	r3, [r5, #88]	; 0x58
    3e18:	7821      	ldrb	r1, [r4, #0]
    3e1a:	2205      	movs	r2, #5
    3e1c:	4862      	ldr	r0, [pc, #392]	; (3fa8 <_vfiprintf_r+0x21c>)
    3e1e:	f000 fc05 	bl	462c <memchr>
    3e22:	1c63      	adds	r3, r4, #1
    3e24:	469c      	mov	ip, r3
    3e26:	2800      	cmp	r0, #0
    3e28:	d135      	bne.n	3e96 <_vfiprintf_r+0x10a>
    3e2a:	6829      	ldr	r1, [r5, #0]
    3e2c:	06cb      	lsls	r3, r1, #27
    3e2e:	d504      	bpl.n	3e3a <_vfiprintf_r+0xae>
    3e30:	2353      	movs	r3, #83	; 0x53
    3e32:	aa02      	add	r2, sp, #8
    3e34:	3020      	adds	r0, #32
    3e36:	189b      	adds	r3, r3, r2
    3e38:	7018      	strb	r0, [r3, #0]
    3e3a:	070b      	lsls	r3, r1, #28
    3e3c:	d504      	bpl.n	3e48 <_vfiprintf_r+0xbc>
    3e3e:	2353      	movs	r3, #83	; 0x53
    3e40:	202b      	movs	r0, #43	; 0x2b
    3e42:	aa02      	add	r2, sp, #8
    3e44:	189b      	adds	r3, r3, r2
    3e46:	7018      	strb	r0, [r3, #0]
    3e48:	7823      	ldrb	r3, [r4, #0]
    3e4a:	2b2a      	cmp	r3, #42	; 0x2a
    3e4c:	d02c      	beq.n	3ea8 <_vfiprintf_r+0x11c>
    3e4e:	2000      	movs	r0, #0
    3e50:	210a      	movs	r1, #10
    3e52:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3e54:	7822      	ldrb	r2, [r4, #0]
    3e56:	3a30      	subs	r2, #48	; 0x30
    3e58:	2a09      	cmp	r2, #9
    3e5a:	d800      	bhi.n	3e5e <_vfiprintf_r+0xd2>
    3e5c:	e06b      	b.n	3f36 <_vfiprintf_r+0x1aa>
    3e5e:	2800      	cmp	r0, #0
    3e60:	d02a      	beq.n	3eb8 <_vfiprintf_r+0x12c>
    3e62:	9309      	str	r3, [sp, #36]	; 0x24
    3e64:	e028      	b.n	3eb8 <_vfiprintf_r+0x12c>
    3e66:	4b51      	ldr	r3, [pc, #324]	; (3fac <_vfiprintf_r+0x220>)
    3e68:	429f      	cmp	r7, r3
    3e6a:	d101      	bne.n	3e70 <_vfiprintf_r+0xe4>
    3e6c:	68b7      	ldr	r7, [r6, #8]
    3e6e:	e79e      	b.n	3dae <_vfiprintf_r+0x22>
    3e70:	4b4f      	ldr	r3, [pc, #316]	; (3fb0 <_vfiprintf_r+0x224>)
    3e72:	429f      	cmp	r7, r3
    3e74:	d19b      	bne.n	3dae <_vfiprintf_r+0x22>
    3e76:	68f7      	ldr	r7, [r6, #12]
    3e78:	e799      	b.n	3dae <_vfiprintf_r+0x22>
    3e7a:	0039      	movs	r1, r7
    3e7c:	0030      	movs	r0, r6
    3e7e:	f000 fb15 	bl	44ac <__swsetup_r>
    3e82:	2800      	cmp	r0, #0
    3e84:	d099      	beq.n	3dba <_vfiprintf_r+0x2e>
    3e86:	2001      	movs	r0, #1
    3e88:	4240      	negs	r0, r0
    3e8a:	b01f      	add	sp, #124	; 0x7c
    3e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3e8e:	2b25      	cmp	r3, #37	; 0x25
    3e90:	d09f      	beq.n	3dd2 <_vfiprintf_r+0x46>
    3e92:	3401      	adds	r4, #1
    3e94:	e79a      	b.n	3dcc <_vfiprintf_r+0x40>
    3e96:	4b44      	ldr	r3, [pc, #272]	; (3fa8 <_vfiprintf_r+0x21c>)
    3e98:	6829      	ldr	r1, [r5, #0]
    3e9a:	1ac0      	subs	r0, r0, r3
    3e9c:	2301      	movs	r3, #1
    3e9e:	4083      	lsls	r3, r0
    3ea0:	430b      	orrs	r3, r1
    3ea2:	602b      	str	r3, [r5, #0]
    3ea4:	4664      	mov	r4, ip
    3ea6:	e7b7      	b.n	3e18 <_vfiprintf_r+0x8c>
    3ea8:	9b05      	ldr	r3, [sp, #20]
    3eaa:	1d18      	adds	r0, r3, #4
    3eac:	681b      	ldr	r3, [r3, #0]
    3eae:	9005      	str	r0, [sp, #20]
    3eb0:	2b00      	cmp	r3, #0
    3eb2:	db3a      	blt.n	3f2a <_vfiprintf_r+0x19e>
    3eb4:	9309      	str	r3, [sp, #36]	; 0x24
    3eb6:	4664      	mov	r4, ip
    3eb8:	7823      	ldrb	r3, [r4, #0]
    3eba:	2b2e      	cmp	r3, #46	; 0x2e
    3ebc:	d10b      	bne.n	3ed6 <_vfiprintf_r+0x14a>
    3ebe:	7863      	ldrb	r3, [r4, #1]
    3ec0:	1c62      	adds	r2, r4, #1
    3ec2:	2b2a      	cmp	r3, #42	; 0x2a
    3ec4:	d13f      	bne.n	3f46 <_vfiprintf_r+0x1ba>
    3ec6:	9b05      	ldr	r3, [sp, #20]
    3ec8:	3402      	adds	r4, #2
    3eca:	1d1a      	adds	r2, r3, #4
    3ecc:	681b      	ldr	r3, [r3, #0]
    3ece:	9205      	str	r2, [sp, #20]
    3ed0:	2b00      	cmp	r3, #0
    3ed2:	db35      	blt.n	3f40 <_vfiprintf_r+0x1b4>
    3ed4:	9307      	str	r3, [sp, #28]
    3ed6:	7821      	ldrb	r1, [r4, #0]
    3ed8:	2203      	movs	r2, #3
    3eda:	4836      	ldr	r0, [pc, #216]	; (3fb4 <_vfiprintf_r+0x228>)
    3edc:	f000 fba6 	bl	462c <memchr>
    3ee0:	2800      	cmp	r0, #0
    3ee2:	d007      	beq.n	3ef4 <_vfiprintf_r+0x168>
    3ee4:	4b33      	ldr	r3, [pc, #204]	; (3fb4 <_vfiprintf_r+0x228>)
    3ee6:	682a      	ldr	r2, [r5, #0]
    3ee8:	1ac0      	subs	r0, r0, r3
    3eea:	2340      	movs	r3, #64	; 0x40
    3eec:	4083      	lsls	r3, r0
    3eee:	4313      	orrs	r3, r2
    3ef0:	602b      	str	r3, [r5, #0]
    3ef2:	3401      	adds	r4, #1
    3ef4:	7821      	ldrb	r1, [r4, #0]
    3ef6:	1c63      	adds	r3, r4, #1
    3ef8:	2206      	movs	r2, #6
    3efa:	482f      	ldr	r0, [pc, #188]	; (3fb8 <_vfiprintf_r+0x22c>)
    3efc:	9302      	str	r3, [sp, #8]
    3efe:	7629      	strb	r1, [r5, #24]
    3f00:	f000 fb94 	bl	462c <memchr>
    3f04:	2800      	cmp	r0, #0
    3f06:	d044      	beq.n	3f92 <_vfiprintf_r+0x206>
    3f08:	4b2c      	ldr	r3, [pc, #176]	; (3fbc <_vfiprintf_r+0x230>)
    3f0a:	2b00      	cmp	r3, #0
    3f0c:	d12f      	bne.n	3f6e <_vfiprintf_r+0x1e2>
    3f0e:	6829      	ldr	r1, [r5, #0]
    3f10:	9b05      	ldr	r3, [sp, #20]
    3f12:	2207      	movs	r2, #7
    3f14:	05c9      	lsls	r1, r1, #23
    3f16:	d528      	bpl.n	3f6a <_vfiprintf_r+0x1de>
    3f18:	189b      	adds	r3, r3, r2
    3f1a:	4393      	bics	r3, r2
    3f1c:	3308      	adds	r3, #8
    3f1e:	9305      	str	r3, [sp, #20]
    3f20:	696b      	ldr	r3, [r5, #20]
    3f22:	9a03      	ldr	r2, [sp, #12]
    3f24:	189b      	adds	r3, r3, r2
    3f26:	616b      	str	r3, [r5, #20]
    3f28:	e74f      	b.n	3dca <_vfiprintf_r+0x3e>
    3f2a:	425b      	negs	r3, r3
    3f2c:	60eb      	str	r3, [r5, #12]
    3f2e:	2302      	movs	r3, #2
    3f30:	430b      	orrs	r3, r1
    3f32:	602b      	str	r3, [r5, #0]
    3f34:	e7bf      	b.n	3eb6 <_vfiprintf_r+0x12a>
    3f36:	434b      	muls	r3, r1
    3f38:	3401      	adds	r4, #1
    3f3a:	189b      	adds	r3, r3, r2
    3f3c:	2001      	movs	r0, #1
    3f3e:	e789      	b.n	3e54 <_vfiprintf_r+0xc8>
    3f40:	2301      	movs	r3, #1
    3f42:	425b      	negs	r3, r3
    3f44:	e7c6      	b.n	3ed4 <_vfiprintf_r+0x148>
    3f46:	2300      	movs	r3, #0
    3f48:	0014      	movs	r4, r2
    3f4a:	200a      	movs	r0, #10
    3f4c:	001a      	movs	r2, r3
    3f4e:	606b      	str	r3, [r5, #4]
    3f50:	7821      	ldrb	r1, [r4, #0]
    3f52:	3930      	subs	r1, #48	; 0x30
    3f54:	2909      	cmp	r1, #9
    3f56:	d903      	bls.n	3f60 <_vfiprintf_r+0x1d4>
    3f58:	2b00      	cmp	r3, #0
    3f5a:	d0bc      	beq.n	3ed6 <_vfiprintf_r+0x14a>
    3f5c:	9207      	str	r2, [sp, #28]
    3f5e:	e7ba      	b.n	3ed6 <_vfiprintf_r+0x14a>
    3f60:	4342      	muls	r2, r0
    3f62:	3401      	adds	r4, #1
    3f64:	1852      	adds	r2, r2, r1
    3f66:	2301      	movs	r3, #1
    3f68:	e7f2      	b.n	3f50 <_vfiprintf_r+0x1c4>
    3f6a:	3307      	adds	r3, #7
    3f6c:	e7d5      	b.n	3f1a <_vfiprintf_r+0x18e>
    3f6e:	ab05      	add	r3, sp, #20
    3f70:	9300      	str	r3, [sp, #0]
    3f72:	003a      	movs	r2, r7
    3f74:	4b12      	ldr	r3, [pc, #72]	; (3fc0 <_vfiprintf_r+0x234>)
    3f76:	0029      	movs	r1, r5
    3f78:	0030      	movs	r0, r6
    3f7a:	e000      	b.n	3f7e <_vfiprintf_r+0x1f2>
    3f7c:	bf00      	nop
    3f7e:	9003      	str	r0, [sp, #12]
    3f80:	9b03      	ldr	r3, [sp, #12]
    3f82:	3301      	adds	r3, #1
    3f84:	d1cc      	bne.n	3f20 <_vfiprintf_r+0x194>
    3f86:	89bb      	ldrh	r3, [r7, #12]
    3f88:	065b      	lsls	r3, r3, #25
    3f8a:	d500      	bpl.n	3f8e <_vfiprintf_r+0x202>
    3f8c:	e77b      	b.n	3e86 <_vfiprintf_r+0xfa>
    3f8e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    3f90:	e77b      	b.n	3e8a <_vfiprintf_r+0xfe>
    3f92:	ab05      	add	r3, sp, #20
    3f94:	9300      	str	r3, [sp, #0]
    3f96:	003a      	movs	r2, r7
    3f98:	4b09      	ldr	r3, [pc, #36]	; (3fc0 <_vfiprintf_r+0x234>)
    3f9a:	0029      	movs	r1, r5
    3f9c:	0030      	movs	r0, r6
    3f9e:	f000 f87f 	bl	40a0 <_printf_i>
    3fa2:	e7ec      	b.n	3f7e <_vfiprintf_r+0x1f2>
    3fa4:	00006820 	.word	0x00006820
    3fa8:	00006860 	.word	0x00006860
    3fac:	00006840 	.word	0x00006840
    3fb0:	00006800 	.word	0x00006800
    3fb4:	00006866 	.word	0x00006866
    3fb8:	0000686a 	.word	0x0000686a
    3fbc:	00000000 	.word	0x00000000
    3fc0:	00003d67 	.word	0x00003d67

00003fc4 <_printf_common>:
    3fc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3fc6:	0015      	movs	r5, r2
    3fc8:	9301      	str	r3, [sp, #4]
    3fca:	688a      	ldr	r2, [r1, #8]
    3fcc:	690b      	ldr	r3, [r1, #16]
    3fce:	9000      	str	r0, [sp, #0]
    3fd0:	000c      	movs	r4, r1
    3fd2:	4293      	cmp	r3, r2
    3fd4:	da00      	bge.n	3fd8 <_printf_common+0x14>
    3fd6:	0013      	movs	r3, r2
    3fd8:	0022      	movs	r2, r4
    3fda:	602b      	str	r3, [r5, #0]
    3fdc:	3243      	adds	r2, #67	; 0x43
    3fde:	7812      	ldrb	r2, [r2, #0]
    3fe0:	2a00      	cmp	r2, #0
    3fe2:	d001      	beq.n	3fe8 <_printf_common+0x24>
    3fe4:	3301      	adds	r3, #1
    3fe6:	602b      	str	r3, [r5, #0]
    3fe8:	6823      	ldr	r3, [r4, #0]
    3fea:	069b      	lsls	r3, r3, #26
    3fec:	d502      	bpl.n	3ff4 <_printf_common+0x30>
    3fee:	682b      	ldr	r3, [r5, #0]
    3ff0:	3302      	adds	r3, #2
    3ff2:	602b      	str	r3, [r5, #0]
    3ff4:	2706      	movs	r7, #6
    3ff6:	6823      	ldr	r3, [r4, #0]
    3ff8:	401f      	ands	r7, r3
    3ffa:	d027      	beq.n	404c <_printf_common+0x88>
    3ffc:	0023      	movs	r3, r4
    3ffe:	3343      	adds	r3, #67	; 0x43
    4000:	781b      	ldrb	r3, [r3, #0]
    4002:	1e5a      	subs	r2, r3, #1
    4004:	4193      	sbcs	r3, r2
    4006:	6822      	ldr	r2, [r4, #0]
    4008:	0692      	lsls	r2, r2, #26
    400a:	d430      	bmi.n	406e <_printf_common+0xaa>
    400c:	0022      	movs	r2, r4
    400e:	9901      	ldr	r1, [sp, #4]
    4010:	3243      	adds	r2, #67	; 0x43
    4012:	9800      	ldr	r0, [sp, #0]
    4014:	9e08      	ldr	r6, [sp, #32]
    4016:	47b0      	blx	r6
    4018:	1c43      	adds	r3, r0, #1
    401a:	d025      	beq.n	4068 <_printf_common+0xa4>
    401c:	2306      	movs	r3, #6
    401e:	6820      	ldr	r0, [r4, #0]
    4020:	682a      	ldr	r2, [r5, #0]
    4022:	68e1      	ldr	r1, [r4, #12]
    4024:	4003      	ands	r3, r0
    4026:	2500      	movs	r5, #0
    4028:	2b04      	cmp	r3, #4
    402a:	d103      	bne.n	4034 <_printf_common+0x70>
    402c:	1a8d      	subs	r5, r1, r2
    402e:	43eb      	mvns	r3, r5
    4030:	17db      	asrs	r3, r3, #31
    4032:	401d      	ands	r5, r3
    4034:	68a3      	ldr	r3, [r4, #8]
    4036:	6922      	ldr	r2, [r4, #16]
    4038:	4293      	cmp	r3, r2
    403a:	dd01      	ble.n	4040 <_printf_common+0x7c>
    403c:	1a9b      	subs	r3, r3, r2
    403e:	18ed      	adds	r5, r5, r3
    4040:	2700      	movs	r7, #0
    4042:	42bd      	cmp	r5, r7
    4044:	d120      	bne.n	4088 <_printf_common+0xc4>
    4046:	2000      	movs	r0, #0
    4048:	e010      	b.n	406c <_printf_common+0xa8>
    404a:	3701      	adds	r7, #1
    404c:	68e3      	ldr	r3, [r4, #12]
    404e:	682a      	ldr	r2, [r5, #0]
    4050:	1a9b      	subs	r3, r3, r2
    4052:	429f      	cmp	r7, r3
    4054:	dad2      	bge.n	3ffc <_printf_common+0x38>
    4056:	0022      	movs	r2, r4
    4058:	2301      	movs	r3, #1
    405a:	3219      	adds	r2, #25
    405c:	9901      	ldr	r1, [sp, #4]
    405e:	9800      	ldr	r0, [sp, #0]
    4060:	9e08      	ldr	r6, [sp, #32]
    4062:	47b0      	blx	r6
    4064:	1c43      	adds	r3, r0, #1
    4066:	d1f0      	bne.n	404a <_printf_common+0x86>
    4068:	2001      	movs	r0, #1
    406a:	4240      	negs	r0, r0
    406c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    406e:	2030      	movs	r0, #48	; 0x30
    4070:	18e1      	adds	r1, r4, r3
    4072:	3143      	adds	r1, #67	; 0x43
    4074:	7008      	strb	r0, [r1, #0]
    4076:	0021      	movs	r1, r4
    4078:	1c5a      	adds	r2, r3, #1
    407a:	3145      	adds	r1, #69	; 0x45
    407c:	7809      	ldrb	r1, [r1, #0]
    407e:	18a2      	adds	r2, r4, r2
    4080:	3243      	adds	r2, #67	; 0x43
    4082:	3302      	adds	r3, #2
    4084:	7011      	strb	r1, [r2, #0]
    4086:	e7c1      	b.n	400c <_printf_common+0x48>
    4088:	0022      	movs	r2, r4
    408a:	2301      	movs	r3, #1
    408c:	321a      	adds	r2, #26
    408e:	9901      	ldr	r1, [sp, #4]
    4090:	9800      	ldr	r0, [sp, #0]
    4092:	9e08      	ldr	r6, [sp, #32]
    4094:	47b0      	blx	r6
    4096:	1c43      	adds	r3, r0, #1
    4098:	d0e6      	beq.n	4068 <_printf_common+0xa4>
    409a:	3701      	adds	r7, #1
    409c:	e7d1      	b.n	4042 <_printf_common+0x7e>
	...

000040a0 <_printf_i>:
    40a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    40a2:	b08b      	sub	sp, #44	; 0x2c
    40a4:	9206      	str	r2, [sp, #24]
    40a6:	000a      	movs	r2, r1
    40a8:	3243      	adds	r2, #67	; 0x43
    40aa:	9307      	str	r3, [sp, #28]
    40ac:	9005      	str	r0, [sp, #20]
    40ae:	9204      	str	r2, [sp, #16]
    40b0:	7e0a      	ldrb	r2, [r1, #24]
    40b2:	000c      	movs	r4, r1
    40b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    40b6:	2a6e      	cmp	r2, #110	; 0x6e
    40b8:	d100      	bne.n	40bc <_printf_i+0x1c>
    40ba:	e08f      	b.n	41dc <_printf_i+0x13c>
    40bc:	d817      	bhi.n	40ee <_printf_i+0x4e>
    40be:	2a63      	cmp	r2, #99	; 0x63
    40c0:	d02c      	beq.n	411c <_printf_i+0x7c>
    40c2:	d808      	bhi.n	40d6 <_printf_i+0x36>
    40c4:	2a00      	cmp	r2, #0
    40c6:	d100      	bne.n	40ca <_printf_i+0x2a>
    40c8:	e099      	b.n	41fe <_printf_i+0x15e>
    40ca:	2a58      	cmp	r2, #88	; 0x58
    40cc:	d054      	beq.n	4178 <_printf_i+0xd8>
    40ce:	0026      	movs	r6, r4
    40d0:	3642      	adds	r6, #66	; 0x42
    40d2:	7032      	strb	r2, [r6, #0]
    40d4:	e029      	b.n	412a <_printf_i+0x8a>
    40d6:	2a64      	cmp	r2, #100	; 0x64
    40d8:	d001      	beq.n	40de <_printf_i+0x3e>
    40da:	2a69      	cmp	r2, #105	; 0x69
    40dc:	d1f7      	bne.n	40ce <_printf_i+0x2e>
    40de:	6821      	ldr	r1, [r4, #0]
    40e0:	681a      	ldr	r2, [r3, #0]
    40e2:	0608      	lsls	r0, r1, #24
    40e4:	d523      	bpl.n	412e <_printf_i+0x8e>
    40e6:	1d11      	adds	r1, r2, #4
    40e8:	6019      	str	r1, [r3, #0]
    40ea:	6815      	ldr	r5, [r2, #0]
    40ec:	e025      	b.n	413a <_printf_i+0x9a>
    40ee:	2a73      	cmp	r2, #115	; 0x73
    40f0:	d100      	bne.n	40f4 <_printf_i+0x54>
    40f2:	e088      	b.n	4206 <_printf_i+0x166>
    40f4:	d808      	bhi.n	4108 <_printf_i+0x68>
    40f6:	2a6f      	cmp	r2, #111	; 0x6f
    40f8:	d029      	beq.n	414e <_printf_i+0xae>
    40fa:	2a70      	cmp	r2, #112	; 0x70
    40fc:	d1e7      	bne.n	40ce <_printf_i+0x2e>
    40fe:	2220      	movs	r2, #32
    4100:	6809      	ldr	r1, [r1, #0]
    4102:	430a      	orrs	r2, r1
    4104:	6022      	str	r2, [r4, #0]
    4106:	e003      	b.n	4110 <_printf_i+0x70>
    4108:	2a75      	cmp	r2, #117	; 0x75
    410a:	d020      	beq.n	414e <_printf_i+0xae>
    410c:	2a78      	cmp	r2, #120	; 0x78
    410e:	d1de      	bne.n	40ce <_printf_i+0x2e>
    4110:	0022      	movs	r2, r4
    4112:	2178      	movs	r1, #120	; 0x78
    4114:	3245      	adds	r2, #69	; 0x45
    4116:	7011      	strb	r1, [r2, #0]
    4118:	4a6c      	ldr	r2, [pc, #432]	; (42cc <_printf_i+0x22c>)
    411a:	e030      	b.n	417e <_printf_i+0xde>
    411c:	000e      	movs	r6, r1
    411e:	681a      	ldr	r2, [r3, #0]
    4120:	3642      	adds	r6, #66	; 0x42
    4122:	1d11      	adds	r1, r2, #4
    4124:	6019      	str	r1, [r3, #0]
    4126:	6813      	ldr	r3, [r2, #0]
    4128:	7033      	strb	r3, [r6, #0]
    412a:	2301      	movs	r3, #1
    412c:	e079      	b.n	4222 <_printf_i+0x182>
    412e:	0649      	lsls	r1, r1, #25
    4130:	d5d9      	bpl.n	40e6 <_printf_i+0x46>
    4132:	1d11      	adds	r1, r2, #4
    4134:	6019      	str	r1, [r3, #0]
    4136:	2300      	movs	r3, #0
    4138:	5ed5      	ldrsh	r5, [r2, r3]
    413a:	2d00      	cmp	r5, #0
    413c:	da03      	bge.n	4146 <_printf_i+0xa6>
    413e:	232d      	movs	r3, #45	; 0x2d
    4140:	9a04      	ldr	r2, [sp, #16]
    4142:	426d      	negs	r5, r5
    4144:	7013      	strb	r3, [r2, #0]
    4146:	4b62      	ldr	r3, [pc, #392]	; (42d0 <_printf_i+0x230>)
    4148:	270a      	movs	r7, #10
    414a:	9303      	str	r3, [sp, #12]
    414c:	e02f      	b.n	41ae <_printf_i+0x10e>
    414e:	6820      	ldr	r0, [r4, #0]
    4150:	6819      	ldr	r1, [r3, #0]
    4152:	0605      	lsls	r5, r0, #24
    4154:	d503      	bpl.n	415e <_printf_i+0xbe>
    4156:	1d08      	adds	r0, r1, #4
    4158:	6018      	str	r0, [r3, #0]
    415a:	680d      	ldr	r5, [r1, #0]
    415c:	e005      	b.n	416a <_printf_i+0xca>
    415e:	0640      	lsls	r0, r0, #25
    4160:	d5f9      	bpl.n	4156 <_printf_i+0xb6>
    4162:	680d      	ldr	r5, [r1, #0]
    4164:	1d08      	adds	r0, r1, #4
    4166:	6018      	str	r0, [r3, #0]
    4168:	b2ad      	uxth	r5, r5
    416a:	4b59      	ldr	r3, [pc, #356]	; (42d0 <_printf_i+0x230>)
    416c:	2708      	movs	r7, #8
    416e:	9303      	str	r3, [sp, #12]
    4170:	2a6f      	cmp	r2, #111	; 0x6f
    4172:	d018      	beq.n	41a6 <_printf_i+0x106>
    4174:	270a      	movs	r7, #10
    4176:	e016      	b.n	41a6 <_printf_i+0x106>
    4178:	3145      	adds	r1, #69	; 0x45
    417a:	700a      	strb	r2, [r1, #0]
    417c:	4a54      	ldr	r2, [pc, #336]	; (42d0 <_printf_i+0x230>)
    417e:	9203      	str	r2, [sp, #12]
    4180:	681a      	ldr	r2, [r3, #0]
    4182:	6821      	ldr	r1, [r4, #0]
    4184:	1d10      	adds	r0, r2, #4
    4186:	6018      	str	r0, [r3, #0]
    4188:	6815      	ldr	r5, [r2, #0]
    418a:	0608      	lsls	r0, r1, #24
    418c:	d522      	bpl.n	41d4 <_printf_i+0x134>
    418e:	07cb      	lsls	r3, r1, #31
    4190:	d502      	bpl.n	4198 <_printf_i+0xf8>
    4192:	2320      	movs	r3, #32
    4194:	4319      	orrs	r1, r3
    4196:	6021      	str	r1, [r4, #0]
    4198:	2710      	movs	r7, #16
    419a:	2d00      	cmp	r5, #0
    419c:	d103      	bne.n	41a6 <_printf_i+0x106>
    419e:	2320      	movs	r3, #32
    41a0:	6822      	ldr	r2, [r4, #0]
    41a2:	439a      	bics	r2, r3
    41a4:	6022      	str	r2, [r4, #0]
    41a6:	0023      	movs	r3, r4
    41a8:	2200      	movs	r2, #0
    41aa:	3343      	adds	r3, #67	; 0x43
    41ac:	701a      	strb	r2, [r3, #0]
    41ae:	6863      	ldr	r3, [r4, #4]
    41b0:	60a3      	str	r3, [r4, #8]
    41b2:	2b00      	cmp	r3, #0
    41b4:	db5c      	blt.n	4270 <_printf_i+0x1d0>
    41b6:	2204      	movs	r2, #4
    41b8:	6821      	ldr	r1, [r4, #0]
    41ba:	4391      	bics	r1, r2
    41bc:	6021      	str	r1, [r4, #0]
    41be:	2d00      	cmp	r5, #0
    41c0:	d158      	bne.n	4274 <_printf_i+0x1d4>
    41c2:	9e04      	ldr	r6, [sp, #16]
    41c4:	2b00      	cmp	r3, #0
    41c6:	d064      	beq.n	4292 <_printf_i+0x1f2>
    41c8:	0026      	movs	r6, r4
    41ca:	9b03      	ldr	r3, [sp, #12]
    41cc:	3642      	adds	r6, #66	; 0x42
    41ce:	781b      	ldrb	r3, [r3, #0]
    41d0:	7033      	strb	r3, [r6, #0]
    41d2:	e05e      	b.n	4292 <_printf_i+0x1f2>
    41d4:	0648      	lsls	r0, r1, #25
    41d6:	d5da      	bpl.n	418e <_printf_i+0xee>
    41d8:	b2ad      	uxth	r5, r5
    41da:	e7d8      	b.n	418e <_printf_i+0xee>
    41dc:	6809      	ldr	r1, [r1, #0]
    41de:	681a      	ldr	r2, [r3, #0]
    41e0:	0608      	lsls	r0, r1, #24
    41e2:	d505      	bpl.n	41f0 <_printf_i+0x150>
    41e4:	1d11      	adds	r1, r2, #4
    41e6:	6019      	str	r1, [r3, #0]
    41e8:	6813      	ldr	r3, [r2, #0]
    41ea:	6962      	ldr	r2, [r4, #20]
    41ec:	601a      	str	r2, [r3, #0]
    41ee:	e006      	b.n	41fe <_printf_i+0x15e>
    41f0:	0649      	lsls	r1, r1, #25
    41f2:	d5f7      	bpl.n	41e4 <_printf_i+0x144>
    41f4:	1d11      	adds	r1, r2, #4
    41f6:	6019      	str	r1, [r3, #0]
    41f8:	6813      	ldr	r3, [r2, #0]
    41fa:	8aa2      	ldrh	r2, [r4, #20]
    41fc:	801a      	strh	r2, [r3, #0]
    41fe:	2300      	movs	r3, #0
    4200:	9e04      	ldr	r6, [sp, #16]
    4202:	6123      	str	r3, [r4, #16]
    4204:	e054      	b.n	42b0 <_printf_i+0x210>
    4206:	681a      	ldr	r2, [r3, #0]
    4208:	1d11      	adds	r1, r2, #4
    420a:	6019      	str	r1, [r3, #0]
    420c:	6816      	ldr	r6, [r2, #0]
    420e:	2100      	movs	r1, #0
    4210:	6862      	ldr	r2, [r4, #4]
    4212:	0030      	movs	r0, r6
    4214:	f000 fa0a 	bl	462c <memchr>
    4218:	2800      	cmp	r0, #0
    421a:	d001      	beq.n	4220 <_printf_i+0x180>
    421c:	1b80      	subs	r0, r0, r6
    421e:	6060      	str	r0, [r4, #4]
    4220:	6863      	ldr	r3, [r4, #4]
    4222:	6123      	str	r3, [r4, #16]
    4224:	2300      	movs	r3, #0
    4226:	9a04      	ldr	r2, [sp, #16]
    4228:	7013      	strb	r3, [r2, #0]
    422a:	e041      	b.n	42b0 <_printf_i+0x210>
    422c:	6923      	ldr	r3, [r4, #16]
    422e:	0032      	movs	r2, r6
    4230:	9906      	ldr	r1, [sp, #24]
    4232:	9805      	ldr	r0, [sp, #20]
    4234:	9d07      	ldr	r5, [sp, #28]
    4236:	47a8      	blx	r5
    4238:	1c43      	adds	r3, r0, #1
    423a:	d043      	beq.n	42c4 <_printf_i+0x224>
    423c:	6823      	ldr	r3, [r4, #0]
    423e:	2500      	movs	r5, #0
    4240:	079b      	lsls	r3, r3, #30
    4242:	d40f      	bmi.n	4264 <_printf_i+0x1c4>
    4244:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4246:	68e0      	ldr	r0, [r4, #12]
    4248:	4298      	cmp	r0, r3
    424a:	da3d      	bge.n	42c8 <_printf_i+0x228>
    424c:	0018      	movs	r0, r3
    424e:	e03b      	b.n	42c8 <_printf_i+0x228>
    4250:	0022      	movs	r2, r4
    4252:	2301      	movs	r3, #1
    4254:	3219      	adds	r2, #25
    4256:	9906      	ldr	r1, [sp, #24]
    4258:	9805      	ldr	r0, [sp, #20]
    425a:	9e07      	ldr	r6, [sp, #28]
    425c:	47b0      	blx	r6
    425e:	1c43      	adds	r3, r0, #1
    4260:	d030      	beq.n	42c4 <_printf_i+0x224>
    4262:	3501      	adds	r5, #1
    4264:	68e3      	ldr	r3, [r4, #12]
    4266:	9a09      	ldr	r2, [sp, #36]	; 0x24
    4268:	1a9b      	subs	r3, r3, r2
    426a:	429d      	cmp	r5, r3
    426c:	dbf0      	blt.n	4250 <_printf_i+0x1b0>
    426e:	e7e9      	b.n	4244 <_printf_i+0x1a4>
    4270:	2d00      	cmp	r5, #0
    4272:	d0a9      	beq.n	41c8 <_printf_i+0x128>
    4274:	9e04      	ldr	r6, [sp, #16]
    4276:	0028      	movs	r0, r5
    4278:	0039      	movs	r1, r7
    427a:	f7ff f8e3 	bl	3444 <__aeabi_uidivmod>
    427e:	9b03      	ldr	r3, [sp, #12]
    4280:	3e01      	subs	r6, #1
    4282:	5c5b      	ldrb	r3, [r3, r1]
    4284:	0028      	movs	r0, r5
    4286:	7033      	strb	r3, [r6, #0]
    4288:	0039      	movs	r1, r7
    428a:	f7ff f855 	bl	3338 <__udivsi3>
    428e:	1e05      	subs	r5, r0, #0
    4290:	d1f1      	bne.n	4276 <_printf_i+0x1d6>
    4292:	2f08      	cmp	r7, #8
    4294:	d109      	bne.n	42aa <_printf_i+0x20a>
    4296:	6823      	ldr	r3, [r4, #0]
    4298:	07db      	lsls	r3, r3, #31
    429a:	d506      	bpl.n	42aa <_printf_i+0x20a>
    429c:	6863      	ldr	r3, [r4, #4]
    429e:	6922      	ldr	r2, [r4, #16]
    42a0:	4293      	cmp	r3, r2
    42a2:	dc02      	bgt.n	42aa <_printf_i+0x20a>
    42a4:	2330      	movs	r3, #48	; 0x30
    42a6:	3e01      	subs	r6, #1
    42a8:	7033      	strb	r3, [r6, #0]
    42aa:	9b04      	ldr	r3, [sp, #16]
    42ac:	1b9b      	subs	r3, r3, r6
    42ae:	6123      	str	r3, [r4, #16]
    42b0:	9b07      	ldr	r3, [sp, #28]
    42b2:	aa09      	add	r2, sp, #36	; 0x24
    42b4:	9300      	str	r3, [sp, #0]
    42b6:	0021      	movs	r1, r4
    42b8:	9b06      	ldr	r3, [sp, #24]
    42ba:	9805      	ldr	r0, [sp, #20]
    42bc:	f7ff fe82 	bl	3fc4 <_printf_common>
    42c0:	1c43      	adds	r3, r0, #1
    42c2:	d1b3      	bne.n	422c <_printf_i+0x18c>
    42c4:	2001      	movs	r0, #1
    42c6:	4240      	negs	r0, r0
    42c8:	b00b      	add	sp, #44	; 0x2c
    42ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    42cc:	00006882 	.word	0x00006882
    42d0:	00006871 	.word	0x00006871

000042d4 <_putc_r>:
    42d4:	b570      	push	{r4, r5, r6, lr}
    42d6:	0006      	movs	r6, r0
    42d8:	000d      	movs	r5, r1
    42da:	0014      	movs	r4, r2
    42dc:	2800      	cmp	r0, #0
    42de:	d004      	beq.n	42ea <_putc_r+0x16>
    42e0:	6983      	ldr	r3, [r0, #24]
    42e2:	2b00      	cmp	r3, #0
    42e4:	d101      	bne.n	42ea <_putc_r+0x16>
    42e6:	f7ff fc25 	bl	3b34 <__sinit>
    42ea:	4b12      	ldr	r3, [pc, #72]	; (4334 <_putc_r+0x60>)
    42ec:	429c      	cmp	r4, r3
    42ee:	d111      	bne.n	4314 <_putc_r+0x40>
    42f0:	6874      	ldr	r4, [r6, #4]
    42f2:	68a3      	ldr	r3, [r4, #8]
    42f4:	3b01      	subs	r3, #1
    42f6:	60a3      	str	r3, [r4, #8]
    42f8:	2b00      	cmp	r3, #0
    42fa:	da05      	bge.n	4308 <_putc_r+0x34>
    42fc:	69a2      	ldr	r2, [r4, #24]
    42fe:	4293      	cmp	r3, r2
    4300:	db12      	blt.n	4328 <_putc_r+0x54>
    4302:	b2eb      	uxtb	r3, r5
    4304:	2b0a      	cmp	r3, #10
    4306:	d00f      	beq.n	4328 <_putc_r+0x54>
    4308:	6823      	ldr	r3, [r4, #0]
    430a:	b2e8      	uxtb	r0, r5
    430c:	1c5a      	adds	r2, r3, #1
    430e:	6022      	str	r2, [r4, #0]
    4310:	701d      	strb	r5, [r3, #0]
    4312:	bd70      	pop	{r4, r5, r6, pc}
    4314:	4b08      	ldr	r3, [pc, #32]	; (4338 <_putc_r+0x64>)
    4316:	429c      	cmp	r4, r3
    4318:	d101      	bne.n	431e <_putc_r+0x4a>
    431a:	68b4      	ldr	r4, [r6, #8]
    431c:	e7e9      	b.n	42f2 <_putc_r+0x1e>
    431e:	4b07      	ldr	r3, [pc, #28]	; (433c <_putc_r+0x68>)
    4320:	429c      	cmp	r4, r3
    4322:	d1e6      	bne.n	42f2 <_putc_r+0x1e>
    4324:	68f4      	ldr	r4, [r6, #12]
    4326:	e7e4      	b.n	42f2 <_putc_r+0x1e>
    4328:	0022      	movs	r2, r4
    432a:	0029      	movs	r1, r5
    432c:	0030      	movs	r0, r6
    432e:	f000 f853 	bl	43d8 <__swbuf_r>
    4332:	e7ee      	b.n	4312 <_putc_r+0x3e>
    4334:	00006820 	.word	0x00006820
    4338:	00006840 	.word	0x00006840
    433c:	00006800 	.word	0x00006800

00004340 <__sread>:
    4340:	b570      	push	{r4, r5, r6, lr}
    4342:	000c      	movs	r4, r1
    4344:	250e      	movs	r5, #14
    4346:	5f49      	ldrsh	r1, [r1, r5]
    4348:	f000 f97c 	bl	4644 <_read_r>
    434c:	2800      	cmp	r0, #0
    434e:	db03      	blt.n	4358 <__sread+0x18>
    4350:	6d63      	ldr	r3, [r4, #84]	; 0x54
    4352:	181b      	adds	r3, r3, r0
    4354:	6563      	str	r3, [r4, #84]	; 0x54
    4356:	bd70      	pop	{r4, r5, r6, pc}
    4358:	89a3      	ldrh	r3, [r4, #12]
    435a:	4a02      	ldr	r2, [pc, #8]	; (4364 <__sread+0x24>)
    435c:	4013      	ands	r3, r2
    435e:	81a3      	strh	r3, [r4, #12]
    4360:	e7f9      	b.n	4356 <__sread+0x16>
    4362:	46c0      	nop			; (mov r8, r8)
    4364:	ffffefff 	.word	0xffffefff

00004368 <__swrite>:
    4368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    436a:	001f      	movs	r7, r3
    436c:	898b      	ldrh	r3, [r1, #12]
    436e:	0005      	movs	r5, r0
    4370:	000c      	movs	r4, r1
    4372:	0016      	movs	r6, r2
    4374:	05db      	lsls	r3, r3, #23
    4376:	d505      	bpl.n	4384 <__swrite+0x1c>
    4378:	230e      	movs	r3, #14
    437a:	5ec9      	ldrsh	r1, [r1, r3]
    437c:	2200      	movs	r2, #0
    437e:	2302      	movs	r3, #2
    4380:	f000 f940 	bl	4604 <_lseek_r>
    4384:	89a3      	ldrh	r3, [r4, #12]
    4386:	4a05      	ldr	r2, [pc, #20]	; (439c <__swrite+0x34>)
    4388:	0028      	movs	r0, r5
    438a:	4013      	ands	r3, r2
    438c:	81a3      	strh	r3, [r4, #12]
    438e:	0032      	movs	r2, r6
    4390:	230e      	movs	r3, #14
    4392:	5ee1      	ldrsh	r1, [r4, r3]
    4394:	003b      	movs	r3, r7
    4396:	f000 f875 	bl	4484 <_write_r>
    439a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    439c:	ffffefff 	.word	0xffffefff

000043a0 <__sseek>:
    43a0:	b570      	push	{r4, r5, r6, lr}
    43a2:	000c      	movs	r4, r1
    43a4:	250e      	movs	r5, #14
    43a6:	5f49      	ldrsh	r1, [r1, r5]
    43a8:	f000 f92c 	bl	4604 <_lseek_r>
    43ac:	89a3      	ldrh	r3, [r4, #12]
    43ae:	1c42      	adds	r2, r0, #1
    43b0:	d103      	bne.n	43ba <__sseek+0x1a>
    43b2:	4a05      	ldr	r2, [pc, #20]	; (43c8 <__sseek+0x28>)
    43b4:	4013      	ands	r3, r2
    43b6:	81a3      	strh	r3, [r4, #12]
    43b8:	bd70      	pop	{r4, r5, r6, pc}
    43ba:	2280      	movs	r2, #128	; 0x80
    43bc:	0152      	lsls	r2, r2, #5
    43be:	4313      	orrs	r3, r2
    43c0:	81a3      	strh	r3, [r4, #12]
    43c2:	6560      	str	r0, [r4, #84]	; 0x54
    43c4:	e7f8      	b.n	43b8 <__sseek+0x18>
    43c6:	46c0      	nop			; (mov r8, r8)
    43c8:	ffffefff 	.word	0xffffefff

000043cc <__sclose>:
    43cc:	b510      	push	{r4, lr}
    43ce:	230e      	movs	r3, #14
    43d0:	5ec9      	ldrsh	r1, [r1, r3]
    43d2:	f000 f8e1 	bl	4598 <_close_r>
    43d6:	bd10      	pop	{r4, pc}

000043d8 <__swbuf_r>:
    43d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    43da:	0005      	movs	r5, r0
    43dc:	000e      	movs	r6, r1
    43de:	0014      	movs	r4, r2
    43e0:	2800      	cmp	r0, #0
    43e2:	d004      	beq.n	43ee <__swbuf_r+0x16>
    43e4:	6983      	ldr	r3, [r0, #24]
    43e6:	2b00      	cmp	r3, #0
    43e8:	d101      	bne.n	43ee <__swbuf_r+0x16>
    43ea:	f7ff fba3 	bl	3b34 <__sinit>
    43ee:	4b22      	ldr	r3, [pc, #136]	; (4478 <__swbuf_r+0xa0>)
    43f0:	429c      	cmp	r4, r3
    43f2:	d12d      	bne.n	4450 <__swbuf_r+0x78>
    43f4:	686c      	ldr	r4, [r5, #4]
    43f6:	69a3      	ldr	r3, [r4, #24]
    43f8:	60a3      	str	r3, [r4, #8]
    43fa:	89a3      	ldrh	r3, [r4, #12]
    43fc:	071b      	lsls	r3, r3, #28
    43fe:	d531      	bpl.n	4464 <__swbuf_r+0x8c>
    4400:	6923      	ldr	r3, [r4, #16]
    4402:	2b00      	cmp	r3, #0
    4404:	d02e      	beq.n	4464 <__swbuf_r+0x8c>
    4406:	6823      	ldr	r3, [r4, #0]
    4408:	6922      	ldr	r2, [r4, #16]
    440a:	b2f7      	uxtb	r7, r6
    440c:	1a98      	subs	r0, r3, r2
    440e:	6963      	ldr	r3, [r4, #20]
    4410:	b2f6      	uxtb	r6, r6
    4412:	4298      	cmp	r0, r3
    4414:	db05      	blt.n	4422 <__swbuf_r+0x4a>
    4416:	0021      	movs	r1, r4
    4418:	0028      	movs	r0, r5
    441a:	f7ff fb1d 	bl	3a58 <_fflush_r>
    441e:	2800      	cmp	r0, #0
    4420:	d126      	bne.n	4470 <__swbuf_r+0x98>
    4422:	68a3      	ldr	r3, [r4, #8]
    4424:	3001      	adds	r0, #1
    4426:	3b01      	subs	r3, #1
    4428:	60a3      	str	r3, [r4, #8]
    442a:	6823      	ldr	r3, [r4, #0]
    442c:	1c5a      	adds	r2, r3, #1
    442e:	6022      	str	r2, [r4, #0]
    4430:	701f      	strb	r7, [r3, #0]
    4432:	6963      	ldr	r3, [r4, #20]
    4434:	4298      	cmp	r0, r3
    4436:	d004      	beq.n	4442 <__swbuf_r+0x6a>
    4438:	89a3      	ldrh	r3, [r4, #12]
    443a:	07db      	lsls	r3, r3, #31
    443c:	d51a      	bpl.n	4474 <__swbuf_r+0x9c>
    443e:	2e0a      	cmp	r6, #10
    4440:	d118      	bne.n	4474 <__swbuf_r+0x9c>
    4442:	0021      	movs	r1, r4
    4444:	0028      	movs	r0, r5
    4446:	f7ff fb07 	bl	3a58 <_fflush_r>
    444a:	2800      	cmp	r0, #0
    444c:	d012      	beq.n	4474 <__swbuf_r+0x9c>
    444e:	e00f      	b.n	4470 <__swbuf_r+0x98>
    4450:	4b0a      	ldr	r3, [pc, #40]	; (447c <__swbuf_r+0xa4>)
    4452:	429c      	cmp	r4, r3
    4454:	d101      	bne.n	445a <__swbuf_r+0x82>
    4456:	68ac      	ldr	r4, [r5, #8]
    4458:	e7cd      	b.n	43f6 <__swbuf_r+0x1e>
    445a:	4b09      	ldr	r3, [pc, #36]	; (4480 <__swbuf_r+0xa8>)
    445c:	429c      	cmp	r4, r3
    445e:	d1ca      	bne.n	43f6 <__swbuf_r+0x1e>
    4460:	68ec      	ldr	r4, [r5, #12]
    4462:	e7c8      	b.n	43f6 <__swbuf_r+0x1e>
    4464:	0021      	movs	r1, r4
    4466:	0028      	movs	r0, r5
    4468:	f000 f820 	bl	44ac <__swsetup_r>
    446c:	2800      	cmp	r0, #0
    446e:	d0ca      	beq.n	4406 <__swbuf_r+0x2e>
    4470:	2601      	movs	r6, #1
    4472:	4276      	negs	r6, r6
    4474:	0030      	movs	r0, r6
    4476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4478:	00006820 	.word	0x00006820
    447c:	00006840 	.word	0x00006840
    4480:	00006800 	.word	0x00006800

00004484 <_write_r>:
    4484:	b570      	push	{r4, r5, r6, lr}
    4486:	0005      	movs	r5, r0
    4488:	0008      	movs	r0, r1
    448a:	0011      	movs	r1, r2
    448c:	2200      	movs	r2, #0
    448e:	4c06      	ldr	r4, [pc, #24]	; (44a8 <_write_r+0x24>)
    4490:	6022      	str	r2, [r4, #0]
    4492:	001a      	movs	r2, r3
    4494:	f7fd fcf6 	bl	1e84 <_write>
    4498:	1c43      	adds	r3, r0, #1
    449a:	d103      	bne.n	44a4 <_write_r+0x20>
    449c:	6823      	ldr	r3, [r4, #0]
    449e:	2b00      	cmp	r3, #0
    44a0:	d000      	beq.n	44a4 <_write_r+0x20>
    44a2:	602b      	str	r3, [r5, #0]
    44a4:	bd70      	pop	{r4, r5, r6, pc}
    44a6:	46c0      	nop			; (mov r8, r8)
    44a8:	20000abc 	.word	0x20000abc

000044ac <__swsetup_r>:
    44ac:	4b36      	ldr	r3, [pc, #216]	; (4588 <__swsetup_r+0xdc>)
    44ae:	b570      	push	{r4, r5, r6, lr}
    44b0:	681d      	ldr	r5, [r3, #0]
    44b2:	0006      	movs	r6, r0
    44b4:	000c      	movs	r4, r1
    44b6:	2d00      	cmp	r5, #0
    44b8:	d005      	beq.n	44c6 <__swsetup_r+0x1a>
    44ba:	69ab      	ldr	r3, [r5, #24]
    44bc:	2b00      	cmp	r3, #0
    44be:	d102      	bne.n	44c6 <__swsetup_r+0x1a>
    44c0:	0028      	movs	r0, r5
    44c2:	f7ff fb37 	bl	3b34 <__sinit>
    44c6:	4b31      	ldr	r3, [pc, #196]	; (458c <__swsetup_r+0xe0>)
    44c8:	429c      	cmp	r4, r3
    44ca:	d10f      	bne.n	44ec <__swsetup_r+0x40>
    44cc:	686c      	ldr	r4, [r5, #4]
    44ce:	230c      	movs	r3, #12
    44d0:	5ee2      	ldrsh	r2, [r4, r3]
    44d2:	b293      	uxth	r3, r2
    44d4:	0719      	lsls	r1, r3, #28
    44d6:	d42d      	bmi.n	4534 <__swsetup_r+0x88>
    44d8:	06d9      	lsls	r1, r3, #27
    44da:	d411      	bmi.n	4500 <__swsetup_r+0x54>
    44dc:	2309      	movs	r3, #9
    44de:	2001      	movs	r0, #1
    44e0:	6033      	str	r3, [r6, #0]
    44e2:	3337      	adds	r3, #55	; 0x37
    44e4:	4313      	orrs	r3, r2
    44e6:	81a3      	strh	r3, [r4, #12]
    44e8:	4240      	negs	r0, r0
    44ea:	bd70      	pop	{r4, r5, r6, pc}
    44ec:	4b28      	ldr	r3, [pc, #160]	; (4590 <__swsetup_r+0xe4>)
    44ee:	429c      	cmp	r4, r3
    44f0:	d101      	bne.n	44f6 <__swsetup_r+0x4a>
    44f2:	68ac      	ldr	r4, [r5, #8]
    44f4:	e7eb      	b.n	44ce <__swsetup_r+0x22>
    44f6:	4b27      	ldr	r3, [pc, #156]	; (4594 <__swsetup_r+0xe8>)
    44f8:	429c      	cmp	r4, r3
    44fa:	d1e8      	bne.n	44ce <__swsetup_r+0x22>
    44fc:	68ec      	ldr	r4, [r5, #12]
    44fe:	e7e6      	b.n	44ce <__swsetup_r+0x22>
    4500:	075b      	lsls	r3, r3, #29
    4502:	d513      	bpl.n	452c <__swsetup_r+0x80>
    4504:	6b61      	ldr	r1, [r4, #52]	; 0x34
    4506:	2900      	cmp	r1, #0
    4508:	d008      	beq.n	451c <__swsetup_r+0x70>
    450a:	0023      	movs	r3, r4
    450c:	3344      	adds	r3, #68	; 0x44
    450e:	4299      	cmp	r1, r3
    4510:	d002      	beq.n	4518 <__swsetup_r+0x6c>
    4512:	0030      	movs	r0, r6
    4514:	f7ff f806 	bl	3524 <_free_r>
    4518:	2300      	movs	r3, #0
    451a:	6363      	str	r3, [r4, #52]	; 0x34
    451c:	2224      	movs	r2, #36	; 0x24
    451e:	89a3      	ldrh	r3, [r4, #12]
    4520:	4393      	bics	r3, r2
    4522:	81a3      	strh	r3, [r4, #12]
    4524:	2300      	movs	r3, #0
    4526:	6063      	str	r3, [r4, #4]
    4528:	6923      	ldr	r3, [r4, #16]
    452a:	6023      	str	r3, [r4, #0]
    452c:	2308      	movs	r3, #8
    452e:	89a2      	ldrh	r2, [r4, #12]
    4530:	4313      	orrs	r3, r2
    4532:	81a3      	strh	r3, [r4, #12]
    4534:	6923      	ldr	r3, [r4, #16]
    4536:	2b00      	cmp	r3, #0
    4538:	d10b      	bne.n	4552 <__swsetup_r+0xa6>
    453a:	21a0      	movs	r1, #160	; 0xa0
    453c:	2280      	movs	r2, #128	; 0x80
    453e:	89a3      	ldrh	r3, [r4, #12]
    4540:	0089      	lsls	r1, r1, #2
    4542:	0092      	lsls	r2, r2, #2
    4544:	400b      	ands	r3, r1
    4546:	4293      	cmp	r3, r2
    4548:	d003      	beq.n	4552 <__swsetup_r+0xa6>
    454a:	0021      	movs	r1, r4
    454c:	0030      	movs	r0, r6
    454e:	f7ff fbaf 	bl	3cb0 <__smakebuf_r>
    4552:	2301      	movs	r3, #1
    4554:	89a2      	ldrh	r2, [r4, #12]
    4556:	4013      	ands	r3, r2
    4558:	d011      	beq.n	457e <__swsetup_r+0xd2>
    455a:	2300      	movs	r3, #0
    455c:	60a3      	str	r3, [r4, #8]
    455e:	6963      	ldr	r3, [r4, #20]
    4560:	425b      	negs	r3, r3
    4562:	61a3      	str	r3, [r4, #24]
    4564:	2000      	movs	r0, #0
    4566:	6923      	ldr	r3, [r4, #16]
    4568:	4283      	cmp	r3, r0
    456a:	d1be      	bne.n	44ea <__swsetup_r+0x3e>
    456c:	230c      	movs	r3, #12
    456e:	5ee2      	ldrsh	r2, [r4, r3]
    4570:	0613      	lsls	r3, r2, #24
    4572:	d5ba      	bpl.n	44ea <__swsetup_r+0x3e>
    4574:	2340      	movs	r3, #64	; 0x40
    4576:	4313      	orrs	r3, r2
    4578:	81a3      	strh	r3, [r4, #12]
    457a:	3801      	subs	r0, #1
    457c:	e7b5      	b.n	44ea <__swsetup_r+0x3e>
    457e:	0792      	lsls	r2, r2, #30
    4580:	d400      	bmi.n	4584 <__swsetup_r+0xd8>
    4582:	6963      	ldr	r3, [r4, #20]
    4584:	60a3      	str	r3, [r4, #8]
    4586:	e7ed      	b.n	4564 <__swsetup_r+0xb8>
    4588:	20000158 	.word	0x20000158
    458c:	00006820 	.word	0x00006820
    4590:	00006840 	.word	0x00006840
    4594:	00006800 	.word	0x00006800

00004598 <_close_r>:
    4598:	2300      	movs	r3, #0
    459a:	b570      	push	{r4, r5, r6, lr}
    459c:	4c06      	ldr	r4, [pc, #24]	; (45b8 <_close_r+0x20>)
    459e:	0005      	movs	r5, r0
    45a0:	0008      	movs	r0, r1
    45a2:	6023      	str	r3, [r4, #0]
    45a4:	f7fd fca8 	bl	1ef8 <_close>
    45a8:	1c43      	adds	r3, r0, #1
    45aa:	d103      	bne.n	45b4 <_close_r+0x1c>
    45ac:	6823      	ldr	r3, [r4, #0]
    45ae:	2b00      	cmp	r3, #0
    45b0:	d000      	beq.n	45b4 <_close_r+0x1c>
    45b2:	602b      	str	r3, [r5, #0]
    45b4:	bd70      	pop	{r4, r5, r6, pc}
    45b6:	46c0      	nop			; (mov r8, r8)
    45b8:	20000abc 	.word	0x20000abc

000045bc <_fstat_r>:
    45bc:	2300      	movs	r3, #0
    45be:	b570      	push	{r4, r5, r6, lr}
    45c0:	4c06      	ldr	r4, [pc, #24]	; (45dc <_fstat_r+0x20>)
    45c2:	0005      	movs	r5, r0
    45c4:	0008      	movs	r0, r1
    45c6:	0011      	movs	r1, r2
    45c8:	6023      	str	r3, [r4, #0]
    45ca:	f7fd fc98 	bl	1efe <_fstat>
    45ce:	1c43      	adds	r3, r0, #1
    45d0:	d103      	bne.n	45da <_fstat_r+0x1e>
    45d2:	6823      	ldr	r3, [r4, #0]
    45d4:	2b00      	cmp	r3, #0
    45d6:	d000      	beq.n	45da <_fstat_r+0x1e>
    45d8:	602b      	str	r3, [r5, #0]
    45da:	bd70      	pop	{r4, r5, r6, pc}
    45dc:	20000abc 	.word	0x20000abc

000045e0 <_isatty_r>:
    45e0:	2300      	movs	r3, #0
    45e2:	b570      	push	{r4, r5, r6, lr}
    45e4:	4c06      	ldr	r4, [pc, #24]	; (4600 <_isatty_r+0x20>)
    45e6:	0005      	movs	r5, r0
    45e8:	0008      	movs	r0, r1
    45ea:	6023      	str	r3, [r4, #0]
    45ec:	f7fd fc8c 	bl	1f08 <_isatty>
    45f0:	1c43      	adds	r3, r0, #1
    45f2:	d103      	bne.n	45fc <_isatty_r+0x1c>
    45f4:	6823      	ldr	r3, [r4, #0]
    45f6:	2b00      	cmp	r3, #0
    45f8:	d000      	beq.n	45fc <_isatty_r+0x1c>
    45fa:	602b      	str	r3, [r5, #0]
    45fc:	bd70      	pop	{r4, r5, r6, pc}
    45fe:	46c0      	nop			; (mov r8, r8)
    4600:	20000abc 	.word	0x20000abc

00004604 <_lseek_r>:
    4604:	b570      	push	{r4, r5, r6, lr}
    4606:	0005      	movs	r5, r0
    4608:	0008      	movs	r0, r1
    460a:	0011      	movs	r1, r2
    460c:	2200      	movs	r2, #0
    460e:	4c06      	ldr	r4, [pc, #24]	; (4628 <_lseek_r+0x24>)
    4610:	6022      	str	r2, [r4, #0]
    4612:	001a      	movs	r2, r3
    4614:	f7fd fc7a 	bl	1f0c <_lseek>
    4618:	1c43      	adds	r3, r0, #1
    461a:	d103      	bne.n	4624 <_lseek_r+0x20>
    461c:	6823      	ldr	r3, [r4, #0]
    461e:	2b00      	cmp	r3, #0
    4620:	d000      	beq.n	4624 <_lseek_r+0x20>
    4622:	602b      	str	r3, [r5, #0]
    4624:	bd70      	pop	{r4, r5, r6, pc}
    4626:	46c0      	nop			; (mov r8, r8)
    4628:	20000abc 	.word	0x20000abc

0000462c <memchr>:
    462c:	b2c9      	uxtb	r1, r1
    462e:	1882      	adds	r2, r0, r2
    4630:	4290      	cmp	r0, r2
    4632:	d101      	bne.n	4638 <memchr+0xc>
    4634:	2000      	movs	r0, #0
    4636:	4770      	bx	lr
    4638:	7803      	ldrb	r3, [r0, #0]
    463a:	428b      	cmp	r3, r1
    463c:	d0fb      	beq.n	4636 <memchr+0xa>
    463e:	3001      	adds	r0, #1
    4640:	e7f6      	b.n	4630 <memchr+0x4>
	...

00004644 <_read_r>:
    4644:	b570      	push	{r4, r5, r6, lr}
    4646:	0005      	movs	r5, r0
    4648:	0008      	movs	r0, r1
    464a:	0011      	movs	r1, r2
    464c:	2200      	movs	r2, #0
    464e:	4c06      	ldr	r4, [pc, #24]	; (4668 <_read_r+0x24>)
    4650:	6022      	str	r2, [r4, #0]
    4652:	001a      	movs	r2, r3
    4654:	f7fd fbf4 	bl	1e40 <_read>
    4658:	1c43      	adds	r3, r0, #1
    465a:	d103      	bne.n	4664 <_read_r+0x20>
    465c:	6823      	ldr	r3, [r4, #0]
    465e:	2b00      	cmp	r3, #0
    4660:	d000      	beq.n	4664 <_read_r+0x20>
    4662:	602b      	str	r3, [r5, #0]
    4664:	bd70      	pop	{r4, r5, r6, pc}
    4666:	46c0      	nop			; (mov r8, r8)
    4668:	20000abc 	.word	0x20000abc
    466c:	000a000a 	.word	0x000a000a
    4670:	00140014 	.word	0x00140014
    4674:	00000014 	.word	0x00000014
    4678:	000a017c 	.word	0x000a017c
    467c:	000a017c 	.word	0x000a017c
    4680:	00140186 	.word	0x00140186
    4684:	00140000 	.word	0x00140000
    4688:	0122000a 	.word	0x0122000a
    468c:	00140186 	.word	0x00140186
    4690:	01220190 	.word	0x01220190
    4694:	0122000a 	.word	0x0122000a
    4698:	012c0014 	.word	0x012c0014
    469c:	0122017c 	.word	0x0122017c
    46a0:	012c0186 	.word	0x012c0186
    46a4:	012c0014 	.word	0x012c0014
    46a8:	0136017c 	.word	0x0136017c
    46ac:	001e0000 	.word	0x001e0000
    46b0:	00280032 	.word	0x00280032
    46b4:	00320000 	.word	0x00320000
    46b8:	003c0032 	.word	0x003c0032
    46bc:	001e0050 	.word	0x001e0050
    46c0:	00280118 	.word	0x00280118
    46c4:	00280046 	.word	0x00280046
    46c8:	00be0050 	.word	0x00be0050
    46cc:	00be0050 	.word	0x00be0050
    46d0:	00c80118 	.word	0x00c80118
    46d4:	00280118 	.word	0x00280118
    46d8:	00be0122 	.word	0x00be0122
    46dc:	00460000 	.word	0x00460000
    46e0:	00500032 	.word	0x00500032
    46e4:	005a0000 	.word	0x005a0000
    46e8:	00640032 	.word	0x00640032
    46ec:	006e0000 	.word	0x006e0000
    46f0:	00780032 	.word	0x00780032
    46f4:	00820000 	.word	0x00820000
    46f8:	008c0032 	.word	0x008c0032
    46fc:	00960000 	.word	0x00960000
    4700:	00a00032 	.word	0x00a00032
    4704:	00aa0000 	.word	0x00aa0000
    4708:	00b40032 	.word	0x00b40032
    470c:	00be0000 	.word	0x00be0000
    4710:	00c80032 	.word	0x00c80032
    4714:	00c8012c 	.word	0x00c8012c
    4718:	00d20172 	.word	0x00d20172
    471c:	00dc001e 	.word	0x00dc001e
    4720:	00e60172 	.word	0x00e60172
    4724:	00f0001e 	.word	0x00f0001e
    4728:	00fa0172 	.word	0x00fa0172
    472c:	0104001e 	.word	0x0104001e
    4730:	010e0172 	.word	0x010e0172
    4734:	0118005a 	.word	0x0118005a
    4738:	0122012c 	.word	0x0122012c
    473c:	82be50b4 	.word	0x82be50b4
    4740:	8cbe82aa 	.word	0x8cbe82aa
    4744:	64963c8c 	.word	0x64963c8c
    4748:	64dc3cd2 	.word	0x64dc3cd2
    474c:	a08c9682 	.word	0xa08c9682
    4750:	aadca08c 	.word	0xaadca08c
    4754:	a0e696dc 	.word	0xa0e696dc
    4758:	50f03c78 	.word	0x50f03c78
    475c:	5a78466e 	.word	0x5a78466e
    4760:	aaaa3c96 	.word	0xaaaa3c96
    4764:	a0dc3cc8 	.word	0xa0dc3cc8
    4768:	aae6a0d2 	.word	0xaae6a0d2
    476c:	6e617254 	.word	0x6e617254
    4770:	69722073 	.word	0x69722073
    4774:	73746867 	.word	0x73746867
    4778:	65726120 	.word	0x65726120
    477c:	6d756820 	.word	0x6d756820
    4780:	72206e61 	.word	0x72206e61
    4784:	74686769 	.word	0x74686769
    4788:	00000073 	.word	0x00000073
    478c:	355e3331 	.word	0x355e3331
    4790:	31202b20 	.word	0x31202b20
    4794:	20355e36 	.word	0x20355e36
    4798:	3731203d 	.word	0x3731203d
    479c:	0000355e 	.word	0x0000355e
    47a0:	69746552 	.word	0x69746552
    47a4:	616c7563 	.word	0x616c7563
    47a8:	676e6974 	.word	0x676e6974
    47ac:	6c705320 	.word	0x6c705320
    47b0:	73656e69 	.word	0x73656e69
    47b4:	00000000 	.word	0x00000000
    47b8:	6c6f6976 	.word	0x6c6f6976
    47bc:	65636e65 	.word	0x65636e65
    47c0:	726f772e 	.word	0x726f772e
    47c4:	0000736b 	.word	0x0000736b
    47c8:	73626154 	.word	0x73626154
    47cc:	00000021 	.word	0x00000021
    47d0:	6c6c694b 	.word	0x6c6c694b
    47d4:	6c694220 	.word	0x6c694220
    47d8:	6e6f696c 	.word	0x6e6f696c
    47dc:	65726961 	.word	0x65726961
    47e0:	61282073 	.word	0x61282073
    47e4:	5420646e 	.word	0x5420646e
    47e8:	6c6c6972 	.word	0x6c6c6972
    47ec:	616e6f69 	.word	0x616e6f69
    47f0:	29657269 	.word	0x29657269
    47f4:	00000000 	.word	0x00000000
    47f8:	65746e49 	.word	0x65746e49
    47fc:	74736572 	.word	0x74736572
    4800:	206e6920 	.word	0x206e6920
    4804:	68636574 	.word	0x68636574
    4808:	6f6c6f6e 	.word	0x6f6c6f6e
    480c:	69207967 	.word	0x69207967
    4810:	6f6e2073 	.word	0x6f6e2073
    4814:	20612074 	.word	0x20612074
    4818:	73726570 	.word	0x73726570
    481c:	6c616e6f 	.word	0x6c616e6f
    4820:	00797469 	.word	0x00797469
    4824:	50203031 	.word	0x50203031
    4828:	544e4952 	.word	0x544e4952
    482c:	52484320 	.word	0x52484320
    4830:	30322824 	.word	0x30322824
    4834:	2b352e35 	.word	0x2b352e35
    4838:	28444e52 	.word	0x28444e52
    483c:	3b292931 	.word	0x3b292931
    4840:	47203a20 	.word	0x47203a20
    4844:	204f544f 	.word	0x204f544f
    4848:	00003031 	.word	0x00003031
    484c:	67206f4e 	.word	0x67206f4e
    4850:	2e73646f 	.word	0x2e73646f
    4854:	206f4e20 	.word	0x206f4e20
    4858:	7473616d 	.word	0x7473616d
    485c:	2e737265 	.word	0x2e737265
    4860:	206f4e20 	.word	0x206f4e20
    4864:	65747865 	.word	0x65747865
    4868:	6c616e72 	.word	0x6c616e72
    486c:	62696c20 	.word	0x62696c20
    4870:	69726172 	.word	0x69726172
    4874:	002e7365 	.word	0x002e7365
    4878:	6c6c694b 	.word	0x6c6c694b
    487c:	7a614e20 	.word	0x7a614e20
    4880:	00007369 	.word	0x00007369
    4884:	6e616954 	.word	0x6e616954
    4888:	656d6e61 	.word	0x656d6e61
    488c:	7153206e 	.word	0x7153206e
    4890:	65726175 	.word	0x65726175
    4894:	38393120 	.word	0x38393120
    4898:	00000039 	.word	0x00000039
    489c:	72656d41 	.word	0x72656d41
    48a0:	20616369 	.word	0x20616369
    48a4:	20736177 	.word	0x20736177
    48a8:	6e756f66 	.word	0x6e756f66
    48ac:	20646564 	.word	0x20646564
    48b0:	73206e6f 	.word	0x73206e6f
    48b4:	6576616c 	.word	0x6576616c
    48b8:	00007972 	.word	0x00007972
    48bc:	72656854 	.word	0x72656854
    48c0:	73692065 	.word	0x73692065
    48c4:	6c6e6f20 	.word	0x6c6e6f20
    48c8:	61632079 	.word	0x61632079
    48cc:	61746970 	.word	0x61746970
    48d0:	6e61206c 	.word	0x6e61206c
    48d4:	616c2064 	.word	0x616c2064
    48d8:	00726f62 	.word	0x00726f62
    48dc:	6f636e45 	.word	0x6f636e45
    48e0:	67617275 	.word	0x67617275
    48e4:	735f2065 	.word	0x735f2065
    48e8:	656d6d79 	.word	0x656d6d79
    48ec:	63697274 	.word	0x63697274
    48f0:	6c63205f 	.word	0x6c63205f
    48f4:	20737361 	.word	0x20737361
    48f8:	66726177 	.word	0x66726177
    48fc:	00657261 	.word	0x00657261
    4900:	52554324 	.word	0x52554324
    4904:	544e4552 	.word	0x544e4552
    4908:	4d454d5f 	.word	0x4d454d5f
    490c:	00000045 	.word	0x00000045
    4910:	694e2041 	.word	0x694e2041
    4914:	54206563 	.word	0x54206563
    4918:	00005954 	.word	0x00005954
    491c:	78696e55 	.word	0x78696e55
    4920:	6f706520 	.word	0x6f706520
    4924:	6d206863 	.word	0x6d206863
    4928:	73756e69 	.word	0x73756e69
    492c:	46783020 	.word	0x46783020
    4930:	61642046 	.word	0x61642046
    4934:	00007379 	.word	0x00007379
    4938:	3d202069 	.word	0x3d202069
    493c:	35783020 	.word	0x35783020
    4940:	35373366 	.word	0x35373366
    4944:	20666439 	.word	0x20666439
    4948:	2028202d 	.word	0x2028202d
    494c:	3e3e2069 	.word	0x3e3e2069
    4950:	29203120 	.word	0x29203120
    4954:	0000003b 	.word	0x0000003b
    4958:	42414341 	.word	0x42414341
    495c:	00000000 	.word	0x00000000
    4960:	63666544 	.word	0x63666544
    4964:	73276e6f 	.word	0x73276e6f
    4968:	6e616320 	.word	0x6e616320
    496c:	656c6563 	.word	0x656c6563
    4970:	00002e64 	.word	0x00002e64
    4974:	73746152 	.word	0x73746152
    4978:	7473656e 	.word	0x7473656e
    497c:	6f4e203a 	.word	0x6f4e203a
    4980:	6e696874 	.word	0x6e696874
    4984:	6f542067 	.word	0x6f542067
    4988:	216f4420 	.word	0x216f4420
    498c:	00000000 	.word	0x00000000
    4990:	68207449 	.word	0x68207449
    4994:	36207361 	.word	0x36207361
    4998:	656b2039 	.word	0x656b2039
    499c:	002e7379 	.word	0x002e7379
    49a0:	61636542 	.word	0x61636542
    49a4:	20657375 	.word	0x20657375
    49a8:	342d5456 	.word	0x342d5456
    49ac:	77203032 	.word	0x77203032
    49b0:	61207361 	.word	0x61207361
    49b4:	6165726c 	.word	0x6165726c
    49b8:	74207964 	.word	0x74207964
    49bc:	6e656b61 	.word	0x6e656b61
    49c0:	00000000 	.word	0x00000000
    49c4:	706d6f43 	.word	0x706d6f43
    49c8:	73736572 	.word	0x73736572
    49cc:	206e6f69 	.word	0x206e6f69
    49d0:	6f676c61 	.word	0x6f676c61
    49d4:	68746972 	.word	0x68746972
    49d8:	6162206d 	.word	0x6162206d
    49dc:	20646573 	.word	0x20646573
    49e0:	42206e6f 	.word	0x42206e6f
    49e4:	28205042 	.word	0x28205042
    49e8:	37393931 	.word	0x37393931
    49ec:	00000029 	.word	0x00000029
    49f0:	20656854 	.word	0x20656854
    49f4:	72756f73 	.word	0x72756f73
    49f8:	6f206563 	.word	0x6f206563
    49fc:	68742066 	.word	0x68742066
    4a00:	694d2065 	.word	0x694d2065
    4a04:	73697373 	.word	0x73697373
    4a08:	70706973 	.word	0x70706973
    4a0c:	69722069 	.word	0x69722069
    4a10:	20726576 	.word	0x20726576
    4a14:	69207369 	.word	0x69207369
    4a18:	6550206e 	.word	0x6550206e
    4a1c:	79736e6e 	.word	0x79736e6e
    4a20:	6e61766c 	.word	0x6e61766c
    4a24:	002e6169 	.word	0x002e6169
    4a28:	6566664f 	.word	0x6566664f
    4a2c:	7669736e 	.word	0x7669736e
    4a30:	61682065 	.word	0x61682065
    4a34:	61776472 	.word	0x61776472
    4a38:	00006572 	.word	0x00006572
    4a3c:	6c6c6f46 	.word	0x6c6c6f46
    4a40:	5720776f 	.word	0x5720776f
    4a44:	646c726f 	.word	0x646c726f
    4a48:	676f5020 	.word	0x676f5020
    4a4c:	64654620 	.word	0x64654620
    4a50:	74617265 	.word	0x74617265
    4a54:	206e6f69 	.word	0x206e6f69
    4a58:	40202020 	.word	0x40202020
    4a5c:	6c726f57 	.word	0x6c726f57
    4a60:	676f5064 	.word	0x676f5064
    4a64:	00000000 	.word	0x00000000
    4a68:	6d6d7544 	.word	0x6d6d7544
    4a6c:	68742079 	.word	0x68742079
    4a70:	20636369 	.word	0x20636369
    4a74:	65696c63 	.word	0x65696c63
    4a78:	0000746e 	.word	0x0000746e
    4a7c:	694e2041 	.word	0x694e2041
    4a80:	54206563 	.word	0x54206563
    4a84:	202e5954 	.word	0x202e5954
    4a88:	4f206e41 	.word	0x4f206e41
    4a8c:	6f43204b 	.word	0x6f43204b
    4a90:	7475706d 	.word	0x7475706d
    4a94:	002e7265 	.word	0x002e7265
    4a98:	69636543 	.word	0x69636543
    4a9c:	65276e20 	.word	0x65276e20
    4aa0:	70207473 	.word	0x70207473
    4aa4:	75207361 	.word	0x75207361
    4aa8:	4320656e 	.word	0x4320656e
    4aac:	72656279 	.word	0x72656279
    4ab0:	6b636564 	.word	0x6b636564
    4ab4:	65622820 	.word	0x65622820
    4ab8:	73756163 	.word	0x73756163
    4abc:	74692065 	.word	0x74692065
    4ac0:	6e207327 	.word	0x6e207327
    4ac4:	6120746f 	.word	0x6120746f
    4ac8:	6c655020 	.word	0x6c655020
    4acc:	6e616369 	.word	0x6e616369
    4ad0:	73614320 	.word	0x73614320
    4ad4:	00002965 	.word	0x00002965
    4ad8:	696c6f53 	.word	0x696c6f53
    4adc:	69726164 	.word	0x69726164
    4ae0:	69207974 	.word	0x69207974
    4ae4:	6f6e2073 	.word	0x6f6e2073
    4ae8:	20612074 	.word	0x20612074
    4aec:	2077656e 	.word	0x2077656e
    4af0:	6d617266 	.word	0x6d617266
    4af4:	726f7765 	.word	0x726f7765
    4af8:	0000006b 	.word	0x0000006b
    4afc:	61657242 	.word	0x61657242
    4b00:	616f6264 	.word	0x616f6264
    4b04:	6e696472 	.word	0x6e696472
    4b08:	73492067 	.word	0x73492067
    4b0c:	746f4e20 	.word	0x746f4e20
    4b10:	43204120 	.word	0x43204120
    4b14:	656d6972 	.word	0x656d6972
    4b18:	00000000 	.word	0x00000000
    4b1c:	2066664f 	.word	0x2066664f
    4b20:	6f207962 	.word	0x6f207962
    4b24:	6520656e 	.word	0x6520656e
    4b28:	726f7272 	.word	0x726f7272
    4b2c:	72612073 	.word	0x72612073
    4b30:	6f632065 	.word	0x6f632065
    4b34:	6e6f6d6d 	.word	0x6e6f6d6d
    4b38:	00000000 	.word	0x00000000
    4b3c:	0000084a 	.word	0x0000084a
    4b40:	00000a96 	.word	0x00000a96
    4b44:	00000a96 	.word	0x00000a96
    4b48:	00000a96 	.word	0x00000a96
    4b4c:	00000a96 	.word	0x00000a96
    4b50:	00000a96 	.word	0x00000a96
    4b54:	00000a96 	.word	0x00000a96
    4b58:	00000a96 	.word	0x00000a96
    4b5c:	00000a96 	.word	0x00000a96
    4b60:	00000a96 	.word	0x00000a96
    4b64:	00000a96 	.word	0x00000a96
    4b68:	00000a96 	.word	0x00000a96
    4b6c:	00000a96 	.word	0x00000a96
    4b70:	00000a96 	.word	0x00000a96
    4b74:	00000a96 	.word	0x00000a96
    4b78:	00000a96 	.word	0x00000a96
    4b7c:	00000832 	.word	0x00000832
    4b80:	00000a96 	.word	0x00000a96
    4b84:	00000a96 	.word	0x00000a96
    4b88:	00000a96 	.word	0x00000a96
    4b8c:	00000a96 	.word	0x00000a96
    4b90:	00000a96 	.word	0x00000a96
    4b94:	00000a96 	.word	0x00000a96
    4b98:	00000a96 	.word	0x00000a96
    4b9c:	00000a96 	.word	0x00000a96
    4ba0:	00000a96 	.word	0x00000a96
    4ba4:	00000a96 	.word	0x00000a96
    4ba8:	00000a96 	.word	0x00000a96
    4bac:	00000a96 	.word	0x00000a96
    4bb0:	00000a96 	.word	0x00000a96
    4bb4:	00000a96 	.word	0x00000a96
    4bb8:	00000a96 	.word	0x00000a96
    4bbc:	00000842 	.word	0x00000842
    4bc0:	00000a96 	.word	0x00000a96
    4bc4:	00000a96 	.word	0x00000a96
    4bc8:	00000a96 	.word	0x00000a96
    4bcc:	00000a96 	.word	0x00000a96
    4bd0:	00000a96 	.word	0x00000a96
    4bd4:	00000a96 	.word	0x00000a96
    4bd8:	00000a96 	.word	0x00000a96
    4bdc:	00000a96 	.word	0x00000a96
    4be0:	00000a96 	.word	0x00000a96
    4be4:	00000a96 	.word	0x00000a96
    4be8:	00000a96 	.word	0x00000a96
    4bec:	00000a96 	.word	0x00000a96
    4bf0:	00000a96 	.word	0x00000a96
    4bf4:	00000a96 	.word	0x00000a96
    4bf8:	00000a96 	.word	0x00000a96
    4bfc:	0000083a 	.word	0x0000083a
    4c00:	00000852 	.word	0x00000852
    4c04:	0000081a 	.word	0x0000081a
    4c08:	0000082a 	.word	0x0000082a
    4c0c:	00000822 	.word	0x00000822
    4c10:	00000002 	.word	0x00000002
    4c14:	00000003 	.word	0x00000003
    4c18:	00000028 	.word	0x00000028
    4c1c:	00000029 	.word	0x00000029
    4c20:	00000004 	.word	0x00000004
    4c24:	00000005 	.word	0x00000005
    4c28:	00000006 	.word	0x00000006
    4c2c:	00000007 	.word	0x00000007
    4c30:	00000020 	.word	0x00000020
    4c34:	00000021 	.word	0x00000021
    4c38:	00000022 	.word	0x00000022
    4c3c:	00000023 	.word	0x00000023
    4c40:	00000024 	.word	0x00000024
    4c44:	00000025 	.word	0x00000025
    4c48:	00000026 	.word	0x00000026
    4c4c:	00000027 	.word	0x00000027
    4c50:	00000008 	.word	0x00000008
    4c54:	00000009 	.word	0x00000009
    4c58:	0000000a 	.word	0x0000000a
    4c5c:	0000000b 	.word	0x0000000b
    4c60:	42000800 	.word	0x42000800
    4c64:	42000c00 	.word	0x42000c00
    4c68:	42001000 	.word	0x42001000
    4c6c:	42001400 	.word	0x42001400
    4c70:	42001800 	.word	0x42001800
    4c74:	42001c00 	.word	0x42001c00
    4c78:	000015ce 	.word	0x000015ce
    4c7c:	000015ca 	.word	0x000015ca
    4c80:	000015ca 	.word	0x000015ca
    4c84:	00001630 	.word	0x00001630
    4c88:	00001630 	.word	0x00001630
    4c8c:	000015e2 	.word	0x000015e2
    4c90:	000015d4 	.word	0x000015d4
    4c94:	000015e8 	.word	0x000015e8
    4c98:	0000161e 	.word	0x0000161e
    4c9c:	000017f0 	.word	0x000017f0
    4ca0:	000017d0 	.word	0x000017d0
    4ca4:	000017d0 	.word	0x000017d0
    4ca8:	0000185c 	.word	0x0000185c
    4cac:	000017e2 	.word	0x000017e2
    4cb0:	000017fe 	.word	0x000017fe
    4cb4:	000017d4 	.word	0x000017d4
    4cb8:	0000180c 	.word	0x0000180c
    4cbc:	0000184c 	.word	0x0000184c

00004cc0 <CodePage437>:
	...
    4ff8:	01000000 06186080 18608001 60800106     .....`....`....`
    5008:	80010000 00000060 00000000 66986106     ....`........a.f
    5018:	98618619 00000000 00000000 00000000     ..a.............
    5028:	00000000 98610600 fb8f1966 8f1966fe     ......a.f....f..
    5038:	1966fefb 00986186 00000000 80010000     ..f..a..........
    5048:	891f7e60 1f7e6082 7e649081 6080811f     `~...`~...d~...`
    5058:	00000000 04000000 29a60823 1820c106     ........#..).. .
    5068:	98200304 324c1165 00000008 00000000     .. .e.L2........
    5078:	84e08107 10420821 5a081e78 87208216     ....!.B.x..Z.. .
    5088:	0000f6d9 00000000 30c00000 00030618     ...........0....
    5098:	000000c0 00000000 00000000 00000000     ................
    50a8:	40000000 03020810 0c30c000 08c00003     ...@......0.....
    50b8:	10400002 00000000 01000000 02084000     ..@..........@..
    50c8:	06186000 18608001 00010208 00000040     .`....`.....@...
    50d8:	00000000 42000000 90408210 40c23fff     .......B..@..?.@
    50e8:	80104290 00000000 00000000 00000000     .B..............
    50f8:	80000208 e0bfff20 02082080 00000000     .... .... ......
	...
    5118:	18000000 c0000306 00001040 00000000     ........@.......
    5128:	00000000 ff000000 0000e0bf 00000000     ................
	...
    514c:	030e3800 0000e080 00000000 08200000     .8............ .
    515c:	80000104 02041020 10408000 00000208     .... .....@.....
    516c:	00000000 e0030000 cc1863f8 b0c1061b     .........c......
    517c:	63061b6c f8e0c318 00000000 00000000     l..c............
    518c:	1b3c70c0 0c30c004 30c00003 e107030c     .p<...0....0....
    519c:	000000f8 00000000 c1f8e107 061860b0     .............`..
    51ac:	0187030e 0f30c0c0 0000fefb 00000000     ......0.........
    51bc:	fefb0f00 60c00003 80030e30 b0810618     .......`0.......
    51cc:	00f8e167 00000000 40000000 03070c30     g..........@0...
    51dc:	31649040 04fefb0f 10400001 00000000     @.d1......@.....
    51ec:	0f000000 30c0fefb c1f8e30f 061860b0     .......0.....`..
    51fc:	e167a081 000000f8 00000000 60f8e003     ..g............`
    520c:	00030c18 1b8c3ffe 67b0c106 0000f8e1     .....?.....g....
    521c:	00000000 fefb0f00 20608001 00010408     ..........` ....
    522c:	0c302080 00c00003 00000000 e0030000     . 0.............
    523c:	6cb0c1f8 0f3e061b c1061b8c f8e063b0     ...l..>......c..
    524c:	00000000 07000000 b0c1f8e1 7d0e3b6c     ............l;.}
    525c:	0618609f e1c70003 000000f0 00000000     .`..............
    526c:	38000000 e080030e 00000000 030e3800     ...8.........8..
    527c:	0000e080 00000000 00000000 80030e38     ............8...
    528c:	000000e0 0e380000 40c00003 00000010     ......8....@....
    529c:	30000000 03030c0c 30c0c000 0cc00003     ...0.......0....
    52ac:	0c300003 00000000 00000000 00000000     ..0.............
    52bc:	00fefb0f fefb0f00 00000000 00000000     ................
    52cc:	00000000 3000030c 30c0000c c0c00003     .......0...0....
    52dc:	0c0c3030 00000003 00000000 f8e10700     00..............
    52ec:	6060b0c1 01061818 00006080 00608001     ..``.....`....`.
    52fc:	00000000 e1070000 6cb0c1f8 b4d33edb     ...........l.>..
    530c:	c036fbec f8e10730 00000000 00000000     ..6.0...........
    531c:	0d367080 c18c3186 fefb6fb0 1b6cb0c1     .p6..1...o....l.
    532c:	00000006 00000000 61f8e30f 86196698     ...........a.f..
    533c:	19861f7e 6f986186 0000f8e3 00000000     ~....a.o........
    534c:	f8e00300 036c9861 0c30c000 98610003     ....a.l...0...a.
    535c:	00f8e063 00000000 c30f0000 861966f0     c............f..
    536c:	98618631 668c1966 f0c38f19 00000000     1.a.f..f........
    537c:	0f000000 30c0fefb fc00030c 00030c3f     .......0....?...
    538c:	fb0f30c0 000000fe 00000000 c0fefb0f     .0..............
    539c:	00030c30 030c3ffc 0c30c000 00000003     0....?....0.....
    53ac:	00000000 f8e00300 036c9861 0c30c000     ........a.l...0.
    53bc:	98611e7b 00f8e063 00000000 1b0c0000     {.a.c...........
    53cc:	6cb0c106 bfff061b c1061bec 061b6cb0     ...l.........l..
    53dc:	00000000 07000000 0618f8e1 18608001     ..............`.
    53ec:	60800106 e1070618 000000f8 00000000     ...`............
    53fc:	067ef801 18608001 60800106 8731c618     ..~...`....`..1.
    540c:	0000f0c1 00000000 061b0c00 838d31c6     .............1..
    541c:	0d38e060 31c66083 00061b8c 00000000     `.8..`.1........
    542c:	030c0000 0c30c000 30c00003 c000030c     ......0....0....
    543c:	fefb0f30 00000000 0c000000 bde38e1b     0...............
    544c:	c976dbed 061b6cb2 1b6cb0c1 00000006     ..v..l....l.....
    545c:	00000000 e1861b0c 661b6dbc 5b6cb3c9     .........m.f..l[
    546c:	ecb0c31e 0000061b 00000000 f8e00300     ................
    547c:	1b6cb0e3 6cb0c106 b8c1061b 00f8e0e3     ..l....l........
    548c:	00000000 e30f0000 6cb0c1f8 3ffe061b     ...........l...?
    549c:	c000038c 00030c30 00000000 07000000     ....0...........
    54ac:	b0c1f8e1 c1061b6c 36db6cb0 d98731c6     ....l....l.6.1..
    54bc:	000000f6 00000000 c1f8e30f 061b6cb0     .............l..
    54cc:	638c3ffe cc30c318 0000061b 00000000     .?.c..0.........
    54dc:	f8e10700 036cb0c1 801f7e00 b0c10618     ......l..~......
    54ec:	00f8e167 00000000 fb0f0000 000208fe     g...............
    54fc:	02082080 08208000 20800002 00000000     . .... .... ....
    550c:	0c000000 b0c1061b c1061b6c 061b6cb0     ........l....l..
    551c:	e063b0c1 000000f8 00000000 c1061b0c     ..c.............
    552c:	8c3166b0 60c31863 810d36d8 000020c0     .f1.c..`.6... ..
    553c:	00000000 061b0c00 1b6cb0c1 6db2c906     ..........l....m
    554c:	b5d576db 008c796f 00000000 1b0c0000     .v..oy..........
    555c:	c3186306 060cf860 63d8e003 061bcc18     .c..`......c....
    556c:	00000000 0c000000 1863061b 1cd860c3     ..........c..`..
    557c:	20c00107 80000208 00000020 00000000     ... .... .......
    558c:	03fefb0f 1060c000 0103060c 0f30c0c0     ......`.......0.
    559c:	0000fefb 00000000 f8e00300 00030c30     ............0...
    55ac:	030c30c0 0c30c000 00f8e003 00000000     .0....0.........
    55bc:	01060000 010c3080 030c6080 03186000     .....0...`...`..
    55cc:	0618c000 00000000 07000000 030cf0c1     ................
    55dc:	0c30c000 30c00003 c107030c 000000f0     ..0....0........
    55ec:	00000000 36708000 8c31860d 0060b0c1     ......p6..1...`.
	...
    5618:	00fefb0f 00000000 80030000 00030ce0     ................
    5628:	00001860 00000000 00000000 00000000     `...............
	...
    5640:	01fcf003 fef86380 f823b0c0 000000fe     .....c....#.....
    5650:	00000000 c000030c fcf30d30 0b6cb8e1     ........0.....l.
    5660:	6fb8e102 00007cf3 00000000 00000000     ...o.|..........
    5670:	e1070000 6cb0c1f8 30c00003 00fef907     .......l...0....
    5680:	00000000 18000000 67800106 b0c3f6d9     ...........g....
    5690:	c3061bec f6d9e7b0 00000000 00000000     ................
    56a0:	00000000 c1f8e107 fefb6fb0 f10730c0     .........o...0..
    56b0:	000000fc 00000000 3138e000 c000638c     ..........81.c..
    56c0:	00033ffc 030c30c0 0000c000 00000000     .?...0..........
    56d0:	00000000 d9070000 8731c6f6 30c0f0c1     ..........1....0
    56e0:	c3f8e107 f8e1e7b0 030c0000 0d30c000     ..............0.
    56f0:	b8e178e3 c1061b6c 061b6cb0 00000000     .x..l....l......
    5700:	01000000 00006080 18e08003 60800106     .....`.........`
    5710:	e1070618 000000f8 00000000 00186000     .............`..
    5720:	18600000 60800106 8c010618 31c61863     ..`....`....c..1
    5730:	00f0c187 00030c00 638c30c0 0f36cc30     .........0.c0.6.
    5740:	33ccc083 000c330c 00000000 c0030000     ...3.3..........
    5750:	00030cf0 030c30c0 0c30c000 f8e00303     .....0....0.....
	...
    576c:	e70c330c 669b6dbf 1b6cb0c1 00000006     .3...m.f..l.....
	...
    5784:	f8e20b00 1b6cb8e1 6cb0c106 0000061b     ......l....l....
	...
    579c:	e1070000 cc30c3f8 30c30c33 00f8e1c7     ......0.3..0....
	...
    57b4:	0b000000 b0c1f8e2 be061b6c 0002882f     ........l.../...
    57c4:	02082080 00000000 00000000 c1fae803     . ..............
    57d4:	061b6cb0 08a08f3e 20800002 00000208     .l..>...... ....
    57e4:	00000000 7ce20800 036cbcf1 0c30c000     .......|..l...0.
    57f4:	00000003 00000000 00000000 e1070000     ................
    5804:	0730c0f8 8001f8e1 00f8e36f 00000000     ..0.....o.......
    5814:	00030000 0f0c30c0 0c30f8e3 33c00003     .....0....0....3
    5824:	30c0c00c 00000000 00000000 00000000     ...0............
    5834:	c30c330c 0c33cc30 d9c730c3 000000f6     .3..0.3..0......
	...
    584c:	02020000 30e6b8c1 01073ed8 000020c0     .......0.>... ..
	...
    5864:	1b0c0000 6cb0c106 b5d5769b 008c3166     .......l.v..f1..
	...
    587c:	08000000 1b441823 6ce08003 08620c11     ....#.D....l..b.
	...
    5898:	c618630c 18638c31 60801f7e 873bc618     .c..1.c.~..`..;.
    58a8:	0000f0c1 00000000 fefb0f00 c0c00003     ................
    58b8:	0f0c3030 0000fefb 00000000 1e780000     00............x.
    58c8:	40000208 000e3810 02081040 001e7800     ...@.8..@....x..
    58d8:	00000000 80010000 01061860 06186080     ........`....`..
    58e8:	18608001 60800106 00000000 0f000000     ..`....`........
    58f8:	0208c003 0cc00003 c0000303 030f0208     ................
    5908:	000000c0 00000000 d9c61907 1c736cb3     .............ls.
	...
    5940:	e0030000 6c9861f8 30c00003 6100030c     .....a.l...0...a
    5950:	f8e06398 00000608 00000000 00669801     .c............f.
    5960:	c30c330c 0c33cc30 d9c730c3 000000f6     .3..0.3..0......
    5970:	00000000 0c180000 f8e10700 fb6fb0c1     ..............o.
    5980:	0730c0fe 0000fcf1 00000000 10000000     ..0.............
    5990:	f003000a 638001fc b0c0fef8 00fef823     .......c....#...
	...
    59a8:	030033cc 8001fcf0 c0fef863 fef823b0     .3......c....#..
	...
    59c0:	000c6000 01fcf003 fef86380 f823b0c0     .`.......c....#.
    59d0:	000000fe 03000000 0c482001 fcf00300     ......... H.....
    59e0:	f8638001 23b0c0fe 0000fef8 00000000     ..c....#........
    59f0:	00000000 e1070000 6cb0c1f8 30c00003     ...........l...0
    5a00:	04fef907 00000003 00000000 07001420     ............ ...
    5a10:	b0c1f8e1 c0fefb6f fcf10730 00000000     ....o...0.......
    5a20:	00000000 00669801 c1f8e107 fefb6fb0     ......f......o..
    5a30:	f10730c0 000000fc 00000000 18c00000     .0..............
    5a40:	f8e10700 fb6fb0c1 0730c0fe 0000fcf1     ......o...0.....
    5a50:	00000000 98610600 80030000 010618e0     ......a.........
    5a60:	06186080 00f8e107 00000000 00000000     .`..............
    5a70:	03002840 0618e080 18608001 f8e10706     @(........`.....
	...
    5a88:	0018c000 18e08003 60800106 e1070618     ...........`....
    5a98:	000000f8 18630000 367080c0 8c31860d     ......c...p6..1.
    5aa8:	fb6fb0c1 6cb0c1fe 0000061b 1c000000     ..o....l........
    5ab8:	70c08108 31860d36 6fb0c18c b0c1fefb     ...p6..1...o....
    5ac8:	00061b6c 00000000 fb0f0606 0c30c0fe     l.............0.
    5ad8:	3ffc0003 c000030c fefb0f30 00000000     ...?....0.......
	...
    5af0:	1dfe7907 fedb2786 f90733cc 000000ee     .y...'...3......
    5b00:	00000000 367ef800 9861860d e3efb1c7     ......~6..a.....
    5b10:	8c31c6f8 00001e7b 00000000 20000000     ..1.{.......... 
    5b20:	e1070014 cc30c3f8 30c30c33 00f8e1c7     ......0.3..0....
    5b30:	00000000 01000000 07006698 30c3f8e1     .........f.....0
    5b40:	c30c33cc f8e1c730 00000000 00000000     .3..0...........
    5b50:	0018c000 c3f8e107 0c33cc30 e1c730c3     ........0.3..0..
    5b60:	000000f8 00000000 14200000 0c330c00     .......... ...3.
    5b70:	33cc30c3 c730c30c 0000f6d9 00000000     .0.3..0.........
    5b80:	60000000 330c000c cc30c30c 30c30c33     ...`...3..0.3..0
    5b90:	00f6d9c7 00000000 01000000 0c006698     .............f..
    5ba0:	31c61863 7e18638c 1860801f c1873bc6     c..1.c.~..`..;..
    5bb0:	800d36f0 383ef800 c1061bec 061b6cb0     .6....>8.....l..
    5bc0:	e0e3b8c1 000000f8 0c330000 c10603c0     ..........3.....
    5bd0:	061b6cb0 1b6cb0c1 63b0c106 0000f8e0     .l....l....c....
    5be0:	00000000 20800002 1b8c1f7e 0c32c826     ....... ~...&.2.
    5bf0:	1f7e069b 08208080 00000000 c0010000     ..~... .........
    5c00:	461873f8 3e608001 6080810f fefb0f18     .s.F..`>...`....
    5c10:	00000000 0c000000 08630419 1c506083     ..........c..`P.
    5c20:	20e00302 80800f08 00000020 00000000     ... .... .......
    5c30:	c1f8e30f f81b6cb0 830d30fe 0d36d878     .....l...0..x.6.
    5c40:	000038e3 00000000 3ce00000 98638e3f     .8.........<?.c.
    5c50:	833ffee0 1c70c000 60800106 00000018     ..?...p....`....
    5c60:	00000000 03000c18 8001fcf0 c0fef863     ............c...
    5c70:	fef823b0 00000000 00000000 000060c0     .#...........`..
    5c80:	18e08003 60800106 e1070618 000000f8     .......`........
    5c90:	00000000 18300000 f8e10700 33cc30c3     ......0......0.3
    5ca0:	c730c30c 0000f8e1 00000000 30000000     ..0............0
    5cb0:	330c0018 cc30c30c 30c30c33 00f6d9c7     ...3..0.3..0....
	...
    5cc8:	0b001998 b8e1f8e2 c1061b6c 061b6cb0     ........l....l..
    5cd8:	00000000 8c0c4c00 b8e1061b c9461b6d     .....L......m.F.
    5ce8:	165b6cb2 1becb0c3 00000006 00000000     .l[.............
    5cf8:	1e08c003 00e08308 000080ff 00000000     ................
	...
    5d10:	d8c00100 c0810d22 0080ff00 00000000     ...."...........
	...
    5d2c:	00030c00 030c0000 3030c000 061b0c0c     ..........00....
    5d3c:	00c00f3f 00000000 00000000 ff000000     ?...............
    5d4c:	0003ecbf 00000000 00000000 00000000     ................
	...
    5d64:	18e0bfff 00000006 00000000 00000000     ................
    5d74:	30c00003 c000030c e0bfff00 0c1f3800     ...0.........8..
    5d84:	183060c0 0000c00f c0000300 00030c30     .`0.........0...
    5d94:	bfff00c0 668001e0 fc618619 60800106     .......f..a....`
    5da4:	00000000 06180000 18000000 60800106     ...............`
    5db4:	80010618 00061860 00000000 00000000     ....`...........
    5dc4:	90200100 80042448 00001290 00000000     .. .H$..........
	...
    5ddc:	40020000 20010948 00244890 00000000     ...@H.. .H$.....
    5dec:	00000000 48024092 09004900 80240024     .....@.H.I..$.$.
    5dfc:	92009004 00480240 24090049 42529200     ....@.H.I..$..RB
    5e0c:	0949494a 24242529 929094a4 4a425292     JII.)%$$.....RBJ
    5e1c:	29094949 ad6d2425 b6b6b5bd dbdad6f6     II.)%$m.........
    5e2c:	6f6b5bdb bdad6d6d f6b6b6b5 08dbdad6     .[komm..........
    5e3c:	20800002 80000208 00020820 02082080     ... .... .... ..
    5e4c:	08208000 20800002 80000208 00020820     .. .... .... ...
    5e5c:	3e082080 08208000 20800002 80000208     . .>.. .... ....
    5e6c:	00020820 02082080 f8208000 20800f02      .... .... .... 
    5e7c:	80000208 00020820 05142080 14504001     .... .... ...@P.
    5e8c:	50400105 40013d14 01051450 05145040     ..@P.=.@P...@P..
    5e9c:	00504001 00000000 00000000 013f0000     .@P...........?.
    5eac:	05145040 14504001 50400105 00000000     @P...@P...@P....
    5ebc:	00000000 02f80000 0820800f 20800002     .......... .... 
    5ecc:	80000208 01051420 05145040 f4504001     .... ...@P...@P.
    5edc:	50400f01 40010514 01051450 05145040     ..@P...@P...@P..
    5eec:	14504001 50400105 40010514 01051450     .@P...@P...@P...
    5efc:	05145040 00504001 00000000 00000000     @P...@P.........
    5f0c:	0f01fc00 05145040 14504001 50400105     ....@P...@P...@P
    5f1c:	40010514 01051450 01f45040 0000c00f     ...@P...@P......
	...
    5f34:	01051400 05145040 14504001 0000003f     ....@P...@P.?...
	...
    5f4c:	02080000 08208000 20800002 800f02f8     ...... .... ....
	...
    5f70:	003e0000 02082080 08208000 20800002     ..>.. .... .... 
    5f80:	80000208 00020820 03082080 000000f0     .... .... ......
	...
    5f98:	00020800 02082080 08208000 0000f03f     ..... .... .?...
	...
    5fbc:	80f03f00 00020820 02082080 08208000     .?.. .... .... .
    5fcc:	20800002 80000208 f0030820 02082080     ... .... .... ..
    5fdc:	08208000 20800002 00000000 00000000     .. .... ........
    5fec:	3f000000 000000f0 00000000 00000000     ...?............
    5ffc:	00020800 02082080 08208000 2080f03f     ..... .... .?.. 
    600c:	80000208 00020820 02082080 08208000     .... .... .... .
    601c:	20800002 fc00c20f 00020820 02082080     ... .... .... ..
    602c:	14208000 50400105 40010514 f1051450     .. ...@P...@P...
    603c:	05145040 14504001 50400105 40010514     @P...@P...@P...@
    604c:	01051450 c4175040 0000fc01 00000000     P...@P..........
	...
    6068:	1f000000 507c01c4 40010514 01051450     ......|P...@P...
    6078:	05145040 14504001 50400105 fc0fc0f7     @P...@P...@P....
	...
    609c:	0fc0ff00 0514507c 14504001 50400105     ....|P...@P...@P
    60ac:	40010514 01051450 c4175040 14507c01     ...@P...@P...|P.
    60bc:	50400105 40010514 00000050 00000000     ..@P...@P.......
    60cc:	ff000000 00fc0fc0 00000000 00000000     ................
    60dc:	05140000 14504001 50400105 7c0fc0f7     .....@P...@P...|
    60ec:	01051450 05145040 08504001 20800002     P...@P...@P.... 
    60fc:	80000208 0fc0ff20 000000fc 00000000     .... ...........
    610c:	00000000 40010514 01051450 3f145040     .......@P...@P.?
    611c:	000000f0 00000000 00000000 00000000     ................
    612c:	00000000 ff000000 20fc0fc0 80000208     ........... ....
    613c:	00020820 00002080 00000000 00000000      .... ..........
    614c:	40f13f00 01051450 05145040 14504001     .?.@P...@P...@P.
    615c:	50400105 40010514 f0071450 00000000     ..@P...@P.......
	...
    6174:	80000208 00020820 c20f2080 0000fc00     .... .... ......
	...
    6194:	0f000000 20fc00c2 80000208 00020820     ....... .... ...
    61a4:	00002080 00000000 00000000 40f10700     . .............@
    61b4:	01051450 05145040 14504001 50400105     P...@P...@P...@P
    61c4:	40010514 f13f1450 05145040 14504001     ...@P.?.@P...@P.
    61d4:	50400105 80000208 00020820 c2ff2080     ..@P.... .... ..
    61e4:	0820fc0f 20800002 80000208 00020820     .. .... .... ...
    61f4:	02082080 08208000 0000003e 00000000     . .... .>.......
	...
    6214:	80f00300 00020820 02082080 ff208000     .... .... .... .
    6224:	ffffffff ffffffff ffffffff ffffffff     ................
    6234:	ffffffff ffffffff 00000000 00000000     ................
    6244:	3f000000 ffffffff ffffffff ffffffff     ...?............
    6254:	0f3ef8ff 3ef8e083 f8e0830f e0830f3e     ..>....>....>...
    6264:	830f3ef8 0f3ef8e0 c30fe083 0f3ffcf0     .>....>.......?.
    6274:	3ffcf0c3 fcf0c30f f0c30f3f c30f3ffc     ...?....?....?..
    6284:	ff3ffcf0 ffffffff ffffffff f0ffffff     ..?.............
	...
    62a8:	8f380000 c208234c e2d08330 00000000     ..8.L#..0.......
    62b8:	00000000 193c0000 7c982186 8c61061f     ......<..!.|..a.
    62c8:	63c61861 000000f8 00000000 ff000000     a..c............
    62d8:	8c31c61f 01061863 06186080 0000c003     ..1.c....`......
	...
    62f4:	c69fff00 18638c31 008e33c6 00000000     ....1.c..3......
    6304:	fb0f0000 06b080fe 0618c000 c0800103     ................
    6314:	fefb2f20 00000000 00000000 00000000      /..............
    6324:	c3fef907 0c33cc30 e1c730c3 000000f8     ....0.3..0......
	...
    633c:	0c330c00 33cc30c3 cf30c30c 30c0f6db     ..3..0.3..0....0
    634c:	0000000c 00000000 e30c0000 618e7bbc     .............{.a
    635c:	06186080 00608001 00000000 00000000     .`....`.........
    636c:	c33f0000 30c3f8c1 c30c33cc f0e0c730     ..?....0.3..0...
    637c:	000000ff 03000000 1863f8e0 ff061bcc     ..........c.....
    638c:	061becbf e0c31863 000000f8 00000000     ....c...........
    639c:	e3fce103 061b6cb0 1b6cb0c1 c698e38e     .....l....l.....
    63ac:	00008e33 00000000 fef80300 e1070318     3...............
    63bc:	cc30c3f8 30c30c33 00f8e1c7 00000000     ..0.3..0........
    63cc:	00000000 02000000 a2885421 88228a28     ........!T..(.".
    63dc:	00204295 00000000 00000000 07000000     .B .............
    63ec:	860e7367 628a28a3 7367b8b0 00000070     gs...(.b..gsp...
    63fc:	00000000 60f8e003 00030c18 030c3ffc     .......`.....?..
    640c:	03186000 0000f8e0 00000000 00000000     .`..............
    641c:	1b8c0f3e 6cb0c106 b0c1061b c1061b6c     >......l....l...
    642c:	000060b0 00000000 0f000000 0000fefb     .`..............
    643c:	00fefb0f fefb0f00 00000000 00000000     ................
    644c:	02080000 ff208000 2080e0bf 03000208     ...... .... ....
    645c:	000000fe 00000000 3000030c 30c0000c     ...........0...0
    646c:	c0c00003 0c0c3030 3f000003 0000f0cf     ....00.....?....
    647c:	0c300000 0003030c 0330c0c0 030cc000     ..0.......0.....
    648c:	000c3000 00f0cf3f 88600307 00020820     .0..?.....`. ...
    649c:	02082080 08208000 20800002 80000208     . .... .... ....
    64ac:	00020820 02082080 08208000 20800002      .... .... .... 
    64bc:	80000208 09240820 00008001 18000000     .... .$.........
    64cc:	00000006 00e0bfff 00061800 00000000     ................
	...
    64e4:	8a0f1c00 0f1c073e 00073e8a 00000000     ....>....>......
	...
    64fc:	01092460 00000080 00000000 00000000     `$..............
	...
    6520:	80030e38 00000000 00000000 00000000     8...............
	...
    6538:	01000000 00006080 00000000 0f000000     .....`..........
    6548:	40000104 0d020820 0c504001 00800002     ...@ ....@P.....
    6558:	00000000 f0c30b00 638c31c6 00000018     .........1.c....
	...
    6574:	83070000 03070cf0 3fe0c081 00000000     ...........?....
	...
    6598:	c30f3ffc 0f3ffcf0 0000f0c3 00000000     .?....?.........
	...
    65c0:	ffffffff 677537ff 71312c6a 38ffffff     .....7ugj,1q...8
    65d0:	ff6b6869 7aff7732 6f3039ff 65332e6c     ihk.2w.z.90ol.3e
    65e0:	ffff7861 2f3b702d 63737234 5b3dff20     ax..-p;/4rsc .=[
    65f0:	7435ff27 ff6e7664 5cff5d27 62667936     '.5tdvn.'].\6yfb
    6600:	ffffff6d 0000ffff ffffffff 475526ff     m............&UG
    6610:	51213c4a 2affffff ff4b4849 5aff5740     J<!Q...*IHK.@W.Z
    6620:	4f2928ff 45233e4c ffff5841 3f3a505f     .()OL>#EAX.._P:?
    6630:	43535224 7b2bff20 5425ff22 ff4e5644     $RSC .+{".%TDVN.
    6640:	7cff7d7e 4246595e ffffff4d 0000ffff     ~}.|^YFBM.......

00006650 <kb_col>:
    6650:	00010000 00020000 00040000 00080000     ................
    6660:	00100000 00200000 08000000              ...... .....

0000666c <kb_col_index>:
    666c:	00000010 00000011 00000012 00000013     ................
    667c:	00000014 00000015 0000001b              ............

00006688 <kb_row>:
    6688:	00000004 00000008 00000010 00000020     ............ ...
    6698:	00000040 00000080 00000400 00000800     @...............
    66a8:	00001000 00002000                       ..... ..

000066b0 <kb_row_index>:
    66b0:	00000002 00000003 00000004 00000005     ................
    66c0:	00000006 00000007 0000000a 0000000b     ................
    66d0:	0000000c 0000000d                       ........

000066d8 <beelzebub.12957>:
    66d8:	2e002d00 44003200 88005300 f300b600     .-...2.D.S......
    66e8:	64012201 d4019201 08020702 5f023402     .".d.........4._
    66f8:	94027802 bb02a602 db02ca02 f902e802     .x..............
    6708:	7f031f03                                ....

0000670c <belial.12954>:
    670c:	f0f0f0f0 b0b0b0f0 b1b6b6b6 b7b7b1b1     ................
    671c:	b2b2b2b7 bfb8b8b8 b9b3b3b3 b5b5b9b9     ................
    672c:	babac2b5 bcbcbcba bebdbdbd f0f0f0be     ................
    673c:	b1b1f0f0 b8b7b7b6 bcb8b8b8 c9c9bcbc     ................
    674c:	35c9c9c9 0000363a                       ...5:6..

00006754 <lucifer.12956>:
    6754:	0852aa55 0d0d0d01 0d343434 34340d0d     U.R.....444...44
    6764:	00000034 01242424 340f0f0f 08083434     4...$$$....444..
    6774:	24240308 00780024 00007800 52aa5589     ..$$$.x..x...U.R
    6784:	00cc0008 01707005 02030303 02d00000     .....pp.........
    6794:	00505050 00000055                       PPP.U...

0000679c <mulciber.12955>:
    679c:	03020100 02010004 00020100 01000201     ................
    67ac:	02010002 00020100 01000201 01000002     ................
    67bc:	02010000 00020100 01000201 03020100     ................
    67cc:	00000004 01000100 01000302 02010002     ................
    67dc:	00000403 00000000 69726553 4f206c61     ........Serial O
    67ec:	3639204b 38203030 0d0a314e 00000000     K 9600 8N1......

000067fc <_global_impure_ptr>:
    67fc:	2000015c                                \.. 

00006800 <__sf_fake_stderr>:
	...

00006820 <__sf_fake_stdin>:
	...

00006840 <__sf_fake_stdout>:
	...
    6860:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    6870:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    6880:	31300046 35343332 39383736 64636261     F.0123456789abcd
    6890:	00006665                                ef..

00006894 <_init>:
    6894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6896:	46c0      	nop			; (mov r8, r8)
    6898:	bcf8      	pop	{r3, r4, r5, r6, r7}
    689a:	bc08      	pop	{r3}
    689c:	469e      	mov	lr, r3
    689e:	4770      	bx	lr

000068a0 <__init_array_start>:
    68a0:	000000dd 	.word	0x000000dd

000068a4 <_fini>:
    68a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    68a6:	46c0      	nop			; (mov r8, r8)
    68a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    68aa:	bc08      	pop	{r3}
    68ac:	469e      	mov	lr, r3
    68ae:	4770      	bx	lr

000068b0 <__fini_array_start>:
    68b0:	000000b5 	.word	0x000000b5
