
DumBadgeFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006f28  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001c8  20000000  00006f28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000908  200001c8  000070f0  000201c8  2**2
                  ALLOC
  3 .stack        00002000  20000ad0  000079f8  000201c8  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000201c8  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
  6 .debug_info   0003a7c2  00000000  00000000  00020249  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005725  00000000  00000000  0005aa0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00006992  00000000  00000000  00060130  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000780  00000000  00000000  00066ac2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000008d0  00000000  00000000  00067242  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001f2fa  00000000  00000000  00067b12  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00013de3  00000000  00000000  00086e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00090332  00000000  00000000  0009abef  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001a30  00000000  00000000  0012af24  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
	// Keep the default device state after reset
	SystemCoreClock = __SYSTEM_CLOCK;
       0:	d0 2a 00 20 f5 1f 00 00 f1 1f 00 00 f1 1f 00 00     .*. ............
	...
	config->stopbits         = USART_STOPBITS_1;
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
	config->baudrate         = 9600;
	config->receiver_enable  = true;
	config->transmitter_enable = true;
	config->clock_polarity_inverted = false;
      2c:	f1 1f 00 00 00 00 00 00 00 00 00 00 f1 1f 00 00     ................
	config->use_external_clock = false;
	config->ext_clock_freq   = 0;
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
	config->generator_source = GCLK_GENERATOR_0;
      3c:	6d 32 00 00 f1 1f 00 00 f1 1f 00 00 f1 1f 00 00     m2..............
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
	config->receive_pulse_length                    = 19;
      4c:	f1 1f 00 00 f1 1f 00 00 f1 1f 00 00 f1 1f 00 00     ................
	usart_get_config_defaults(&config_usart);

	config_usart.baudrate    = SERCOMBAUD;
	config_usart.mux_setting = SERCOMMUX;
	config_usart.pinmux_pad0 = SERCOMPAD0;
	config_usart.pinmux_pad1 = SERCOMPAD1;
      5c:	f1 1f 00 00 f1 1f 00 00 0d 12 00 00 1d 12 00 00     ................
	config_usart.pinmux_pad2 = SERCOMPAD2;
	config_usart.pinmux_pad3 = SERCOMPAD3;

	while (usart_init(&usart_instance,	 SERCOMMODULE, &config_usart) != STATUS_OK) { }
      6c:	2d 12 00 00 3d 12 00 00 4d 12 00 00 5d 12 00 00     -...=...M...]...
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
      7c:	f1 1f 00 00 f1 1f 00 00 f1 1f 00 00 f1 1f 00 00     ................
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	if (usart_init(module, hw, config) == STATUS_OK) {
      8c:	f1 1f 00 00 f1 1f 00 00 f1 1f 00 00 f1 1f 00 00     ................
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
      9c:	41 0d 00 00 f1 1f 00 00 f1 1f 00 00 f1 1f 00 00     A...............
	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
      ac:	f1 1f 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
      ba:	2b00      	cmp	r3, #0
	return (usart_hw->SYNCBUSY.reg);
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
	while (usart_is_syncing(module)) {
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop

	stdio_serial_init(&usart_instance, SERCOMMODULE, &config_usart);
	usart_enable(&usart_instance);
}
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200001c8 	.word	0x200001c8
      d4:	00000000 	.word	0x00000000
      d8:	00006f28 	.word	0x00006f28

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200001cc 	.word	0x200001cc
     108:	00006f28 	.word	0x00006f28
     10c:	00006f28 	.word	0x00006f28
     110:	00000000 	.word	0x00000000

00000114 <ring_init>:
	cbuf->full = false;
	cbuf->tail = (cbuf->tail + 1) % cbuf->max;
}

cbuf_handle_t ring_init(uint8_t* buffer, uint16_t size)
{
     114:	b570      	push	{r4, r5, r6, lr}
     116:	0005      	movs	r5, r0
     118:	000c      	movs	r4, r1
	cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
     11a:	200c      	movs	r0, #12
     11c:	4b04      	ldr	r3, [pc, #16]	; (130 <ring_init+0x1c>)
     11e:	4798      	blx	r3

	cbuf->buffer = buffer;
     120:	6005      	str	r5, [r0, #0]
	cbuf->max = size;
     122:	8104      	strh	r4, [r0, #8]
	return cbuf;
}

void ring_reset(cbuf_handle_t cbuf)
{
	cbuf->head = 0;
     124:	2300      	movs	r3, #0
     126:	8083      	strh	r3, [r0, #4]
	cbuf->tail = 0;
     128:	80c3      	strh	r3, [r0, #6]
	cbuf->full = false;
     12a:	7283      	strb	r3, [r0, #10]
}
     12c:	bd70      	pop	{r4, r5, r6, pc}
     12e:	46c0      	nop			; (mov r8, r8)
     130:	000039d5 	.word	0x000039d5

00000134 <ring_reset>:
	cbuf->head = 0;
     134:	2300      	movs	r3, #0
     136:	8083      	strh	r3, [r0, #4]
	cbuf->tail = 0;
     138:	80c3      	strh	r3, [r0, #6]
	cbuf->full = false;
     13a:	7283      	strb	r3, [r0, #10]
}
     13c:	4770      	bx	lr
	...

00000140 <ring_put>:

void ring_put(cbuf_handle_t cbuf, uint8_t data)
{
     140:	b510      	push	{r4, lr}
     142:	0004      	movs	r4, r0
	cbuf->buffer[cbuf->head] = data;
     144:	8883      	ldrh	r3, [r0, #4]
     146:	005b      	lsls	r3, r3, #1
     148:	6802      	ldr	r2, [r0, #0]
     14a:	5299      	strh	r1, [r3, r2]
	if(cbuf->full)
     14c:	7a83      	ldrb	r3, [r0, #10]
     14e:	2b00      	cmp	r3, #0
     150:	d005      	beq.n	15e <ring_put+0x1e>
		cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     152:	88c0      	ldrh	r0, [r0, #6]
     154:	3001      	adds	r0, #1
     156:	8921      	ldrh	r1, [r4, #8]
     158:	4b07      	ldr	r3, [pc, #28]	; (178 <ring_put+0x38>)
     15a:	4798      	blx	r3
     15c:	80e1      	strh	r1, [r4, #6]
	cbuf->head = (cbuf->head + 1) % cbuf->max;
     15e:	88a0      	ldrh	r0, [r4, #4]
     160:	3001      	adds	r0, #1
     162:	8921      	ldrh	r1, [r4, #8]
     164:	4b04      	ldr	r3, [pc, #16]	; (178 <ring_put+0x38>)
     166:	4798      	blx	r3
     168:	b28b      	uxth	r3, r1
     16a:	80a3      	strh	r3, [r4, #4]
	cbuf->full = (cbuf->head == cbuf->tail);
     16c:	88e1      	ldrh	r1, [r4, #6]
     16e:	1ac9      	subs	r1, r1, r3
     170:	424a      	negs	r2, r1
     172:	414a      	adcs	r2, r1
     174:	72a2      	strb	r2, [r4, #10]

	advance_pointer(cbuf);
}
     176:	bd10      	pop	{r4, pc}
     178:	0000392d 	.word	0x0000392d

0000017c <ring_empty>:
	return r;
}

bool ring_empty(cbuf_handle_t cbuf)
{
	return (!cbuf->full && (cbuf->head == cbuf->tail));
     17c:	7a82      	ldrb	r2, [r0, #10]
     17e:	2300      	movs	r3, #0
     180:	2a00      	cmp	r2, #0
     182:	d105      	bne.n	190 <ring_empty+0x14>
     184:	8883      	ldrh	r3, [r0, #4]
     186:	88c0      	ldrh	r0, [r0, #6]
     188:	1a1b      	subs	r3, r3, r0
     18a:	4258      	negs	r0, r3
     18c:	4143      	adcs	r3, r0
     18e:	b2db      	uxtb	r3, r3
     190:	0018      	movs	r0, r3
}
     192:	4770      	bx	lr

00000194 <ring_get>:
{
     194:	b570      	push	{r4, r5, r6, lr}
     196:	0004      	movs	r4, r0
     198:	000d      	movs	r5, r1
	if(!ring_empty(cbuf))
     19a:	4b0b      	ldr	r3, [pc, #44]	; (1c8 <ring_get+0x34>)
     19c:	4798      	blx	r3
     19e:	2800      	cmp	r0, #0
     1a0:	d10e      	bne.n	1c0 <ring_get+0x2c>
		*data = cbuf->buffer[cbuf->tail];
     1a2:	88e3      	ldrh	r3, [r4, #6]
     1a4:	005b      	lsls	r3, r3, #1
     1a6:	6822      	ldr	r2, [r4, #0]
     1a8:	5a9b      	ldrh	r3, [r3, r2]
     1aa:	702b      	strb	r3, [r5, #0]
	cbuf->full = false;
     1ac:	2300      	movs	r3, #0
     1ae:	72a3      	strb	r3, [r4, #10]
	cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     1b0:	88e0      	ldrh	r0, [r4, #6]
     1b2:	3001      	adds	r0, #1
     1b4:	8921      	ldrh	r1, [r4, #8]
     1b6:	4b05      	ldr	r3, [pc, #20]	; (1cc <ring_get+0x38>)
     1b8:	4798      	blx	r3
     1ba:	80e1      	strh	r1, [r4, #6]
		r = 0;
     1bc:	2000      	movs	r0, #0
}
     1be:	bd70      	pop	{r4, r5, r6, pc}
	int r = -1;
     1c0:	2001      	movs	r0, #1
     1c2:	4240      	negs	r0, r0
	return r;
     1c4:	e7fb      	b.n	1be <ring_get+0x2a>
     1c6:	46c0      	nop			; (mov r8, r8)
     1c8:	0000017d 	.word	0x0000017d
     1cc:	0000392d 	.word	0x0000392d

000001d0 <nextTab>:
		}
	}
}

int nextTab(int a) 
{
     1d0:	b510      	push	{r4, lr}
     1d2:	b0d0      	sub	sp, #320	; 0x140
     1d4:	0004      	movs	r4, r0
	int tabArray[] =
     1d6:	22a0      	movs	r2, #160	; 0xa0
     1d8:	0052      	lsls	r2, r2, #1
     1da:	4904      	ldr	r1, [pc, #16]	; (1ec <nextTab+0x1c>)
     1dc:	4668      	mov	r0, sp
     1de:	4b04      	ldr	r3, [pc, #16]	; (1f0 <nextTab+0x20>)
     1e0:	4798      	blx	r3
		 64,64,64,64,64,64,64,64,
		 72,72,72,72,72,72,72,72,
		 79,79,79,79,79,79,79,79
		};
	
	return tabArray[a];
     1e2:	00a4      	lsls	r4, r4, #2
     1e4:	466b      	mov	r3, sp
     1e6:	58e0      	ldr	r0, [r4, r3]
}
     1e8:	b050      	add	sp, #320	; 0x140
     1ea:	bd10      	pop	{r4, pc}
     1ec:	00004b54 	.word	0x00004b54
     1f0:	000039e9 	.word	0x000039e9

000001f4 <parseChar>:
{
     1f4:	b5f0      	push	{r4, r5, r6, r7, lr}
     1f6:	46c6      	mov	lr, r8
     1f8:	b500      	push	{lr}
	if(character == 0x00)							//NUL 0x00 DO NOTHING
     1fa:	2807      	cmp	r0, #7
     1fc:	d934      	bls.n	268 <parseChar+0x74>
	else if(character == 0x08)						//BS 0x08 Backspace
     1fe:	2808      	cmp	r0, #8
     200:	d02e      	beq.n	260 <parseChar+0x6c>
	else if(character == 0x09)						//TAB 0x09 Horizontal Tab
     202:	2809      	cmp	r0, #9
     204:	d04c      	beq.n	2a0 <parseChar+0xac>
	else if(character == 0x0A)						//LF 0x0A Line Feed
     206:	280a      	cmp	r0, #10
     208:	d100      	bne.n	20c <parseChar+0x18>
     20a:	e06b      	b.n	2e4 <parseChar+0xf0>
	else if(character == 0x0B)						//VT 0x0B Vertical Tab
     20c:	280b      	cmp	r0, #11
     20e:	d100      	bne.n	212 <parseChar+0x1e>
     210:	e0c1      	b.n	396 <parseChar+0x1a2>
	else if(character == 0x0C)						//FF 0x0C Form Feed
     212:	280c      	cmp	r0, #12
     214:	d028      	beq.n	268 <parseChar+0x74>
	else if(character == 0x0D)						//CR 0x0D Carriage Return
     216:	280d      	cmp	r0, #13
     218:	d100      	bne.n	21c <parseChar+0x28>
     21a:	e116      	b.n	44a <parseChar+0x256>
	else if(character == 0x0E)						//SO 0x0E Shift Out
     21c:	0003      	movs	r3, r0
     21e:	3b0e      	subs	r3, #14
     220:	2b11      	cmp	r3, #17
     222:	d921      	bls.n	268 <parseChar+0x74>
	else if(character == 0x7F)						//DEL 0x7F Delete
     224:	287f      	cmp	r0, #127	; 0x7f
     226:	d01f      	beq.n	268 <parseChar+0x74>
		consoleDisplay[xCharPos][yCharPos] = character;
     228:	4d9c      	ldr	r5, [pc, #624]	; (49c <parseChar+0x2a8>)
     22a:	4c9d      	ldr	r4, [pc, #628]	; (4a0 <parseChar+0x2ac>)
     22c:	8823      	ldrh	r3, [r4, #0]
     22e:	4f9d      	ldr	r7, [pc, #628]	; (4a4 <parseChar+0x2b0>)
     230:	883a      	ldrh	r2, [r7, #0]
     232:	2618      	movs	r6, #24
     234:	4373      	muls	r3, r6
     236:	18eb      	adds	r3, r5, r3
     238:	5498      	strb	r0, [r3, r2]
		drawChar(character);
     23a:	4b9b      	ldr	r3, [pc, #620]	; (4a8 <parseChar+0x2b4>)
     23c:	4698      	mov	r8, r3
     23e:	4798      	blx	r3
		xCharPos++;
     240:	8823      	ldrh	r3, [r4, #0]
     242:	3301      	adds	r3, #1
     244:	b29b      	uxth	r3, r3
     246:	8023      	strh	r3, [r4, #0]
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     248:	883a      	ldrh	r2, [r7, #0]
     24a:	4373      	muls	r3, r6
     24c:	18ed      	adds	r5, r5, r3
     24e:	5ca8      	ldrb	r0, [r5, r2]
     250:	47c0      	blx	r8
		if(xCharPos > 79)		//END OF LINE
     252:	8823      	ldrh	r3, [r4, #0]
     254:	2b4f      	cmp	r3, #79	; 0x4f
     256:	d907      	bls.n	268 <parseChar+0x74>
			xCharPos--;
     258:	3b01      	subs	r3, #1
     25a:	4a91      	ldr	r2, [pc, #580]	; (4a0 <parseChar+0x2ac>)
     25c:	8013      	strh	r3, [r2, #0]
}
     25e:	e003      	b.n	268 <parseChar+0x74>
		if(xCharPos > 0)
     260:	4b8f      	ldr	r3, [pc, #572]	; (4a0 <parseChar+0x2ac>)
     262:	881b      	ldrh	r3, [r3, #0]
     264:	2b00      	cmp	r3, #0
     266:	d102      	bne.n	26e <parseChar+0x7a>
}
     268:	bc04      	pop	{r2}
     26a:	4690      	mov	r8, r2
     26c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     26e:	4c8b      	ldr	r4, [pc, #556]	; (49c <parseChar+0x2a8>)
     270:	4d8c      	ldr	r5, [pc, #560]	; (4a4 <parseChar+0x2b0>)
     272:	8829      	ldrh	r1, [r5, #0]
     274:	005a      	lsls	r2, r3, #1
     276:	18d3      	adds	r3, r2, r3
     278:	00db      	lsls	r3, r3, #3
     27a:	18e3      	adds	r3, r4, r3
     27c:	5c58      	ldrb	r0, [r3, r1]
     27e:	4e8a      	ldr	r6, [pc, #552]	; (4a8 <parseChar+0x2b4>)
     280:	47b0      	blx	r6
			xCharPos--;
     282:	4a87      	ldr	r2, [pc, #540]	; (4a0 <parseChar+0x2ac>)
     284:	8813      	ldrh	r3, [r2, #0]
     286:	3b01      	subs	r3, #1
     288:	b29b      	uxth	r3, r3
     28a:	8013      	strh	r3, [r2, #0]
			tempCharacter = consoleDisplay[xCharPos][yCharPos];
     28c:	8829      	ldrh	r1, [r5, #0]
     28e:	005a      	lsls	r2, r3, #1
     290:	18d3      	adds	r3, r2, r3
     292:	00db      	lsls	r3, r3, #3
     294:	18e3      	adds	r3, r4, r3
			drawChar(tempCharacter);
     296:	5c58      	ldrb	r0, [r3, r1]
     298:	47b0      	blx	r6
			blinkCursor();	
     29a:	4b84      	ldr	r3, [pc, #528]	; (4ac <parseChar+0x2b8>)
     29c:	4798      	blx	r3
     29e:	e7e3      	b.n	268 <parseChar+0x74>
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     2a0:	4c7f      	ldr	r4, [pc, #508]	; (4a0 <parseChar+0x2ac>)
     2a2:	8822      	ldrh	r2, [r4, #0]
     2a4:	4b7f      	ldr	r3, [pc, #508]	; (4a4 <parseChar+0x2b0>)
     2a6:	8819      	ldrh	r1, [r3, #0]
     2a8:	0053      	lsls	r3, r2, #1
     2aa:	189b      	adds	r3, r3, r2
     2ac:	00db      	lsls	r3, r3, #3
     2ae:	4a7b      	ldr	r2, [pc, #492]	; (49c <parseChar+0x2a8>)
     2b0:	18d3      	adds	r3, r2, r3
     2b2:	5c58      	ldrb	r0, [r3, r1]
     2b4:	4b7c      	ldr	r3, [pc, #496]	; (4a8 <parseChar+0x2b4>)
     2b6:	4798      	blx	r3
		if(xCharPos <= 79)
     2b8:	8820      	ldrh	r0, [r4, #0]
     2ba:	284f      	cmp	r0, #79	; 0x4f
     2bc:	d803      	bhi.n	2c6 <parseChar+0xd2>
			xCharPos = nextTab(xCharPos);
     2be:	4b7c      	ldr	r3, [pc, #496]	; (4b0 <parseChar+0x2bc>)
     2c0:	4798      	blx	r3
     2c2:	4b77      	ldr	r3, [pc, #476]	; (4a0 <parseChar+0x2ac>)
     2c4:	8018      	strh	r0, [r3, #0]
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     2c6:	4b76      	ldr	r3, [pc, #472]	; (4a0 <parseChar+0x2ac>)
     2c8:	881a      	ldrh	r2, [r3, #0]
     2ca:	4b76      	ldr	r3, [pc, #472]	; (4a4 <parseChar+0x2b0>)
     2cc:	8819      	ldrh	r1, [r3, #0]
     2ce:	0053      	lsls	r3, r2, #1
     2d0:	189b      	adds	r3, r3, r2
     2d2:	00db      	lsls	r3, r3, #3
     2d4:	4a71      	ldr	r2, [pc, #452]	; (49c <parseChar+0x2a8>)
     2d6:	18d3      	adds	r3, r2, r3
     2d8:	5c58      	ldrb	r0, [r3, r1]
     2da:	4b73      	ldr	r3, [pc, #460]	; (4a8 <parseChar+0x2b4>)
     2dc:	4798      	blx	r3
		blinkCursor();
     2de:	4b73      	ldr	r3, [pc, #460]	; (4ac <parseChar+0x2b8>)
     2e0:	4798      	blx	r3
     2e2:	e7c1      	b.n	268 <parseChar+0x74>
		if(yCharPos == 23)
     2e4:	4b6f      	ldr	r3, [pc, #444]	; (4a4 <parseChar+0x2b0>)
     2e6:	881a      	ldrh	r2, [r3, #0]
     2e8:	2a17      	cmp	r2, #23
     2ea:	d032      	beq.n	352 <parseChar+0x15e>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     2ec:	4c6b      	ldr	r4, [pc, #428]	; (49c <parseChar+0x2a8>)
     2ee:	4d6c      	ldr	r5, [pc, #432]	; (4a0 <parseChar+0x2ac>)
     2f0:	8829      	ldrh	r1, [r5, #0]
     2f2:	004b      	lsls	r3, r1, #1
     2f4:	185b      	adds	r3, r3, r1
     2f6:	00db      	lsls	r3, r3, #3
     2f8:	18e3      	adds	r3, r4, r3
     2fa:	5c98      	ldrb	r0, [r3, r2]
     2fc:	4e6a      	ldr	r6, [pc, #424]	; (4a8 <parseChar+0x2b4>)
     2fe:	47b0      	blx	r6
			yCharPos++;
     300:	4a68      	ldr	r2, [pc, #416]	; (4a4 <parseChar+0x2b0>)
     302:	8813      	ldrh	r3, [r2, #0]
     304:	3301      	adds	r3, #1
     306:	b29b      	uxth	r3, r3
     308:	8013      	strh	r3, [r2, #0]
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     30a:	8829      	ldrh	r1, [r5, #0]
     30c:	004a      	lsls	r2, r1, #1
     30e:	1852      	adds	r2, r2, r1
     310:	00d2      	lsls	r2, r2, #3
     312:	18a4      	adds	r4, r4, r2
     314:	5ce0      	ldrb	r0, [r4, r3]
     316:	47b0      	blx	r6
			blinkCursor();
     318:	4b64      	ldr	r3, [pc, #400]	; (4ac <parseChar+0x2b8>)
     31a:	4798      	blx	r3
		if(lineFeed)
     31c:	4b65      	ldr	r3, [pc, #404]	; (4b4 <parseChar+0x2c0>)
     31e:	781b      	ldrb	r3, [r3, #0]
     320:	2b00      	cmp	r3, #0
     322:	d0a1      	beq.n	268 <parseChar+0x74>
			if(yCharPos == 23)
     324:	4b5f      	ldr	r3, [pc, #380]	; (4a4 <parseChar+0x2b0>)
     326:	881a      	ldrh	r2, [r3, #0]
     328:	2a17      	cmp	r2, #23
     32a:	d023      	beq.n	374 <parseChar+0x180>
				drawChar(consoleDisplay[xCharPos][yCharPos]);
     32c:	4d5b      	ldr	r5, [pc, #364]	; (49c <parseChar+0x2a8>)
     32e:	4e5c      	ldr	r6, [pc, #368]	; (4a0 <parseChar+0x2ac>)
     330:	8831      	ldrh	r1, [r6, #0]
     332:	004b      	lsls	r3, r1, #1
     334:	185b      	adds	r3, r3, r1
     336:	00db      	lsls	r3, r3, #3
     338:	18eb      	adds	r3, r5, r3
     33a:	5c98      	ldrb	r0, [r3, r2]
     33c:	4c5a      	ldr	r4, [pc, #360]	; (4a8 <parseChar+0x2b4>)
     33e:	47a0      	blx	r4
				xCharPos = 0;
     340:	2300      	movs	r3, #0
     342:	8033      	strh	r3, [r6, #0]
				drawChar(consoleDisplay[xCharPos][yCharPos]);
     344:	4b57      	ldr	r3, [pc, #348]	; (4a4 <parseChar+0x2b0>)
     346:	881b      	ldrh	r3, [r3, #0]
     348:	5ce8      	ldrb	r0, [r5, r3]
     34a:	47a0      	blx	r4
				blinkCursor();
     34c:	4b57      	ldr	r3, [pc, #348]	; (4ac <parseChar+0x2b8>)
     34e:	4798      	blx	r3
     350:	e78a      	b.n	268 <parseChar+0x74>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     352:	4b53      	ldr	r3, [pc, #332]	; (4a0 <parseChar+0x2ac>)
     354:	881a      	ldrh	r2, [r3, #0]
     356:	0053      	lsls	r3, r2, #1
     358:	189b      	adds	r3, r3, r2
     35a:	00db      	lsls	r3, r3, #3
     35c:	4a4f      	ldr	r2, [pc, #316]	; (49c <parseChar+0x2a8>)
     35e:	18d3      	adds	r3, r2, r3
     360:	7dd8      	ldrb	r0, [r3, #23]
     362:	4c51      	ldr	r4, [pc, #324]	; (4a8 <parseChar+0x2b4>)
     364:	47a0      	blx	r4
			newLine();
     366:	4b54      	ldr	r3, [pc, #336]	; (4b8 <parseChar+0x2c4>)
     368:	4798      	blx	r3
			drawChar(0x00);
     36a:	2000      	movs	r0, #0
     36c:	47a0      	blx	r4
			blinkCursor();
     36e:	4b4f      	ldr	r3, [pc, #316]	; (4ac <parseChar+0x2b8>)
     370:	4798      	blx	r3
     372:	e7d3      	b.n	31c <parseChar+0x128>
				drawChar(consoleDisplay[xCharPos][yCharPos]);
     374:	4d4a      	ldr	r5, [pc, #296]	; (4a0 <parseChar+0x2ac>)
     376:	882a      	ldrh	r2, [r5, #0]
     378:	0053      	lsls	r3, r2, #1
     37a:	189b      	adds	r3, r3, r2
     37c:	00db      	lsls	r3, r3, #3
     37e:	4a47      	ldr	r2, [pc, #284]	; (49c <parseChar+0x2a8>)
     380:	18d3      	adds	r3, r2, r3
     382:	7dd8      	ldrb	r0, [r3, #23]
     384:	4c48      	ldr	r4, [pc, #288]	; (4a8 <parseChar+0x2b4>)
     386:	47a0      	blx	r4
				xCharPos = 0;
     388:	2300      	movs	r3, #0
     38a:	802b      	strh	r3, [r5, #0]
				drawChar(0x00);
     38c:	2000      	movs	r0, #0
     38e:	47a0      	blx	r4
				blinkCursor();
     390:	4b46      	ldr	r3, [pc, #280]	; (4ac <parseChar+0x2b8>)
     392:	4798      	blx	r3
     394:	e768      	b.n	268 <parseChar+0x74>
		if(yCharPos == 23)
     396:	4b43      	ldr	r3, [pc, #268]	; (4a4 <parseChar+0x2b0>)
     398:	881a      	ldrh	r2, [r3, #0]
     39a:	2a17      	cmp	r2, #23
     39c:	d033      	beq.n	406 <parseChar+0x212>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     39e:	4c3f      	ldr	r4, [pc, #252]	; (49c <parseChar+0x2a8>)
     3a0:	4d3f      	ldr	r5, [pc, #252]	; (4a0 <parseChar+0x2ac>)
     3a2:	8829      	ldrh	r1, [r5, #0]
     3a4:	004b      	lsls	r3, r1, #1
     3a6:	185b      	adds	r3, r3, r1
     3a8:	00db      	lsls	r3, r3, #3
     3aa:	18e3      	adds	r3, r4, r3
     3ac:	5c98      	ldrb	r0, [r3, r2]
     3ae:	4e3e      	ldr	r6, [pc, #248]	; (4a8 <parseChar+0x2b4>)
     3b0:	47b0      	blx	r6
			yCharPos++;
     3b2:	4a3c      	ldr	r2, [pc, #240]	; (4a4 <parseChar+0x2b0>)
     3b4:	8813      	ldrh	r3, [r2, #0]
     3b6:	3301      	adds	r3, #1
     3b8:	b29b      	uxth	r3, r3
     3ba:	8013      	strh	r3, [r2, #0]
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     3bc:	8829      	ldrh	r1, [r5, #0]
     3be:	004a      	lsls	r2, r1, #1
     3c0:	1852      	adds	r2, r2, r1
     3c2:	00d2      	lsls	r2, r2, #3
     3c4:	18a4      	adds	r4, r4, r2
     3c6:	5ce0      	ldrb	r0, [r4, r3]
     3c8:	47b0      	blx	r6
			blinkCursor();
     3ca:	4b38      	ldr	r3, [pc, #224]	; (4ac <parseChar+0x2b8>)
     3cc:	4798      	blx	r3
		if(lineFeed)
     3ce:	4b39      	ldr	r3, [pc, #228]	; (4b4 <parseChar+0x2c0>)
     3d0:	781b      	ldrb	r3, [r3, #0]
     3d2:	2b00      	cmp	r3, #0
     3d4:	d100      	bne.n	3d8 <parseChar+0x1e4>
     3d6:	e747      	b.n	268 <parseChar+0x74>
			if(yCharPos == 23)
     3d8:	4b32      	ldr	r3, [pc, #200]	; (4a4 <parseChar+0x2b0>)
     3da:	881a      	ldrh	r2, [r3, #0]
     3dc:	2a17      	cmp	r2, #23
     3de:	d023      	beq.n	428 <parseChar+0x234>
				drawChar(consoleDisplay[xCharPos][yCharPos]);
     3e0:	4d2e      	ldr	r5, [pc, #184]	; (49c <parseChar+0x2a8>)
     3e2:	4e2f      	ldr	r6, [pc, #188]	; (4a0 <parseChar+0x2ac>)
     3e4:	8831      	ldrh	r1, [r6, #0]
     3e6:	004b      	lsls	r3, r1, #1
     3e8:	185b      	adds	r3, r3, r1
     3ea:	00db      	lsls	r3, r3, #3
     3ec:	18eb      	adds	r3, r5, r3
     3ee:	5c98      	ldrb	r0, [r3, r2]
     3f0:	4c2d      	ldr	r4, [pc, #180]	; (4a8 <parseChar+0x2b4>)
     3f2:	47a0      	blx	r4
				xCharPos = 0;
     3f4:	2300      	movs	r3, #0
     3f6:	8033      	strh	r3, [r6, #0]
				drawChar(consoleDisplay[xCharPos][yCharPos]);
     3f8:	4b2a      	ldr	r3, [pc, #168]	; (4a4 <parseChar+0x2b0>)
     3fa:	881b      	ldrh	r3, [r3, #0]
     3fc:	5ce8      	ldrb	r0, [r5, r3]
     3fe:	47a0      	blx	r4
				blinkCursor();
     400:	4b2a      	ldr	r3, [pc, #168]	; (4ac <parseChar+0x2b8>)
     402:	4798      	blx	r3
     404:	e730      	b.n	268 <parseChar+0x74>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     406:	4b26      	ldr	r3, [pc, #152]	; (4a0 <parseChar+0x2ac>)
     408:	881a      	ldrh	r2, [r3, #0]
     40a:	0053      	lsls	r3, r2, #1
     40c:	189b      	adds	r3, r3, r2
     40e:	00db      	lsls	r3, r3, #3
     410:	4a22      	ldr	r2, [pc, #136]	; (49c <parseChar+0x2a8>)
     412:	18d3      	adds	r3, r2, r3
     414:	7dd8      	ldrb	r0, [r3, #23]
     416:	4c24      	ldr	r4, [pc, #144]	; (4a8 <parseChar+0x2b4>)
     418:	47a0      	blx	r4
			newLine();
     41a:	4b27      	ldr	r3, [pc, #156]	; (4b8 <parseChar+0x2c4>)
     41c:	4798      	blx	r3
			drawChar(0x00);
     41e:	2000      	movs	r0, #0
     420:	47a0      	blx	r4
			blinkCursor();
     422:	4b22      	ldr	r3, [pc, #136]	; (4ac <parseChar+0x2b8>)
     424:	4798      	blx	r3
     426:	e7d2      	b.n	3ce <parseChar+0x1da>
				drawChar(consoleDisplay[xCharPos][yCharPos]);
     428:	4d1d      	ldr	r5, [pc, #116]	; (4a0 <parseChar+0x2ac>)
     42a:	882a      	ldrh	r2, [r5, #0]
     42c:	0053      	lsls	r3, r2, #1
     42e:	189b      	adds	r3, r3, r2
     430:	00db      	lsls	r3, r3, #3
     432:	4a1a      	ldr	r2, [pc, #104]	; (49c <parseChar+0x2a8>)
     434:	18d3      	adds	r3, r2, r3
     436:	7dd8      	ldrb	r0, [r3, #23]
     438:	4c1b      	ldr	r4, [pc, #108]	; (4a8 <parseChar+0x2b4>)
     43a:	47a0      	blx	r4
				xCharPos = 0;
     43c:	2300      	movs	r3, #0
     43e:	802b      	strh	r3, [r5, #0]
				drawChar(0x00);
     440:	2000      	movs	r0, #0
     442:	47a0      	blx	r4
				blinkCursor();
     444:	4b19      	ldr	r3, [pc, #100]	; (4ac <parseChar+0x2b8>)
     446:	4798      	blx	r3
     448:	e70e      	b.n	268 <parseChar+0x74>
		if(yCharPos == 23)
     44a:	4b16      	ldr	r3, [pc, #88]	; (4a4 <parseChar+0x2b0>)
     44c:	881a      	ldrh	r2, [r3, #0]
     44e:	2a17      	cmp	r2, #23
     450:	d012      	beq.n	478 <parseChar+0x284>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     452:	4d12      	ldr	r5, [pc, #72]	; (49c <parseChar+0x2a8>)
     454:	4e12      	ldr	r6, [pc, #72]	; (4a0 <parseChar+0x2ac>)
     456:	8831      	ldrh	r1, [r6, #0]
     458:	004b      	lsls	r3, r1, #1
     45a:	185b      	adds	r3, r3, r1
     45c:	00db      	lsls	r3, r3, #3
     45e:	18eb      	adds	r3, r5, r3
     460:	5c98      	ldrb	r0, [r3, r2]
     462:	4c11      	ldr	r4, [pc, #68]	; (4a8 <parseChar+0x2b4>)
     464:	47a0      	blx	r4
			xCharPos = 0;
     466:	2300      	movs	r3, #0
     468:	8033      	strh	r3, [r6, #0]
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     46a:	4b0e      	ldr	r3, [pc, #56]	; (4a4 <parseChar+0x2b0>)
     46c:	881b      	ldrh	r3, [r3, #0]
     46e:	5ce8      	ldrb	r0, [r5, r3]
     470:	47a0      	blx	r4
			blinkCursor();
     472:	4b0e      	ldr	r3, [pc, #56]	; (4ac <parseChar+0x2b8>)
     474:	4798      	blx	r3
     476:	e6f7      	b.n	268 <parseChar+0x74>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     478:	4d09      	ldr	r5, [pc, #36]	; (4a0 <parseChar+0x2ac>)
     47a:	882a      	ldrh	r2, [r5, #0]
     47c:	0053      	lsls	r3, r2, #1
     47e:	189b      	adds	r3, r3, r2
     480:	00db      	lsls	r3, r3, #3
     482:	4a06      	ldr	r2, [pc, #24]	; (49c <parseChar+0x2a8>)
     484:	18d3      	adds	r3, r2, r3
     486:	7dd8      	ldrb	r0, [r3, #23]
     488:	4c07      	ldr	r4, [pc, #28]	; (4a8 <parseChar+0x2b4>)
     48a:	47a0      	blx	r4
			xCharPos = 0;
     48c:	2300      	movs	r3, #0
     48e:	802b      	strh	r3, [r5, #0]
			drawChar(0x00);
     490:	2000      	movs	r0, #0
     492:	47a0      	blx	r4
			blinkCursor();
     494:	4b05      	ldr	r3, [pc, #20]	; (4ac <parseChar+0x2b8>)
     496:	4798      	blx	r3
     498:	e6e6      	b.n	268 <parseChar+0x74>
     49a:	46c0      	nop			; (mov r8, r8)
     49c:	20000320 	.word	0x20000320
     4a0:	200002a4 	.word	0x200002a4
     4a4:	200002a6 	.word	0x200002a6
     4a8:	000021a9 	.word	0x000021a9
     4ac:	00002441 	.word	0x00002441
     4b0:	000001d1 	.word	0x000001d1
     4b4:	20000158 	.word	0x20000158
     4b8:	00002291 	.word	0x00002291

000004bc <drawKare>:
//	graphic in the entire project. Please note this is the most
//	space efficient way to do this; a 40x31 bitmap is 930 bytes,
//	whereas	this is (104*2)+28+20, or 256 bytes.
/*********************************************************************/
void drawKare(int emotion)
{
     4bc:	b5f0      	push	{r4, r5, r6, r7, lr}
     4be:	b0c1      	sub	sp, #260	; 0x104
     4c0:	0007      	movs	r7, r0
	uint16_t body[104] = {10,10,20,20,20,0,380,10,380,10,390,20,0,
     4c2:	22d0      	movs	r2, #208	; 0xd0
     4c4:	492d      	ldr	r1, [pc, #180]	; (57c <drawKare+0xc0>)
     4c6:	a80c      	add	r0, sp, #48	; 0x30
     4c8:	4b2d      	ldr	r3, [pc, #180]	; (580 <drawKare+0xc4>)
     4ca:	4798      	blx	r3
		80,190,280,200,280,40,290,190,0,70,50,80,0,90,50,100,0,110,
		50,120,0,130,50,140,0,150,50,160,0,170,50,180,0,190,50,200,
		300,200,370,210,30,220,370,230,30,240,370,250,30,260,370,
		270,90,280,300,290};
	
	uint8_t happyTerm[28] = {180,80,190,130,170,130,190,140,140,
     4cc:	a805      	add	r0, sp, #20
     4ce:	4b2d      	ldr	r3, [pc, #180]	; (584 <drawKare+0xc8>)
     4d0:	001a      	movs	r2, r3
     4d2:	3250      	adds	r2, #80	; 0x50
     4d4:	0001      	movs	r1, r0
     4d6:	ca31      	ldmia	r2!, {r0, r4, r5}
     4d8:	c131      	stmia	r1!, {r0, r4, r5}
     4da:	ca31      	ldmia	r2!, {r0, r4, r5}
     4dc:	c131      	stmia	r1!, {r0, r4, r5}
     4de:	6812      	ldr	r2, [r2, #0]
     4e0:	600a      	str	r2, [r1, #0]
		60,150,100,210,60,220,100,130,150,140,160,140,160,220,170,
	220,150,230,160};
	
	uint8_t rPiBeret[20] = {120,60,240,80,110,70,120,90,150,
     4e2:	336c      	adds	r3, #108	; 0x6c
     4e4:	466a      	mov	r2, sp
     4e6:	cb13      	ldmia	r3!, {r0, r1, r4}
     4e8:	c213      	stmia	r2!, {r0, r1, r4}
     4ea:	cb03      	ldmia	r3!, {r0, r1}
     4ec:	c203      	stmia	r2!, {r0, r1}
     4ee:	ac0c      	add	r4, sp, #48	; 0x30
     4f0:	ae40      	add	r6, sp, #256	; 0x100

	
	
	for(int i = 0; i < 104; i = i+4)
	{
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
     4f2:	4d25      	ldr	r5, [pc, #148]	; (588 <drawKare+0xcc>)
		((body[i+1]/iSv)+(offsetGraphicY)),
		((body[i+2]/iSv)+(offsetGraphicX)),
		((body[i+3]/iSv)+(offsetGraphicY)));
     4f4:	88e3      	ldrh	r3, [r4, #6]
     4f6:	105b      	asrs	r3, r3, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
     4f8:	3396      	adds	r3, #150	; 0x96
		((body[i+2]/iSv)+(offsetGraphicX)),
     4fa:	88a2      	ldrh	r2, [r4, #4]
     4fc:	1052      	asrs	r2, r2, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
     4fe:	322d      	adds	r2, #45	; 0x2d
     500:	32ff      	adds	r2, #255	; 0xff
		((body[i+1]/iSv)+(offsetGraphicY)),
     502:	8861      	ldrh	r1, [r4, #2]
     504:	1049      	asrs	r1, r1, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
     506:	3196      	adds	r1, #150	; 0x96
     508:	8820      	ldrh	r0, [r4, #0]
     50a:	1040      	asrs	r0, r0, #1
     50c:	302d      	adds	r0, #45	; 0x2d
     50e:	30ff      	adds	r0, #255	; 0xff
     510:	47a8      	blx	r5
     512:	3408      	adds	r4, #8
	for(int i = 0; i < 104; i = i+4)
     514:	42b4      	cmp	r4, r6
     516:	d1ed      	bne.n	4f4 <drawKare+0x38>
	}
	switch(emotion)
     518:	2f00      	cmp	r7, #0
     51a:	d003      	beq.n	524 <drawKare+0x68>
     51c:	2f01      	cmp	r7, #1
     51e:	d017      	beq.n	550 <drawKare+0x94>
		break;
		case 2:
		//make a sad terminal thing go here
		break;
	}
}
     520:	b041      	add	sp, #260	; 0x104
     522:	bdf0      	pop	{r4, r5, r6, r7, pc}
     524:	ac05      	add	r4, sp, #20
     526:	ae0c      	add	r6, sp, #48	; 0x30
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
     528:	4d17      	ldr	r5, [pc, #92]	; (588 <drawKare+0xcc>)
			((happyTerm[i+3]/iSv)+(offsetGraphicY)));
     52a:	78e3      	ldrb	r3, [r4, #3]
     52c:	105b      	asrs	r3, r3, #1
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
     52e:	3396      	adds	r3, #150	; 0x96
			((happyTerm[i+2]/iSv)+(offsetGraphicX)),
     530:	78a2      	ldrb	r2, [r4, #2]
     532:	1052      	asrs	r2, r2, #1
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
     534:	322d      	adds	r2, #45	; 0x2d
     536:	32ff      	adds	r2, #255	; 0xff
			((happyTerm[i+1]/iSv)+(offsetGraphicY)),
     538:	7861      	ldrb	r1, [r4, #1]
     53a:	1049      	asrs	r1, r1, #1
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
     53c:	3196      	adds	r1, #150	; 0x96
     53e:	7820      	ldrb	r0, [r4, #0]
     540:	1040      	asrs	r0, r0, #1
     542:	302d      	adds	r0, #45	; 0x2d
     544:	30ff      	adds	r0, #255	; 0xff
     546:	47a8      	blx	r5
     548:	3404      	adds	r4, #4
		for(int i = 0; i < 28; i = i+4)
     54a:	42a6      	cmp	r6, r4
     54c:	d1ed      	bne.n	52a <drawKare+0x6e>
     54e:	e7e7      	b.n	520 <drawKare+0x64>
     550:	466c      	mov	r4, sp
     552:	ae05      	add	r6, sp, #20
			fillRect((
     554:	4d0c      	ldr	r5, [pc, #48]	; (588 <drawKare+0xcc>)
			((rPiBeret[i+3]/iSv)+(offsetGraphicY)));
     556:	78e3      	ldrb	r3, [r4, #3]
     558:	105b      	asrs	r3, r3, #1
			fillRect((
     55a:	3396      	adds	r3, #150	; 0x96
			((rPiBeret[i+2]/iSv)+(offsetGraphicX)),
     55c:	78a2      	ldrb	r2, [r4, #2]
     55e:	1052      	asrs	r2, r2, #1
			fillRect((
     560:	322d      	adds	r2, #45	; 0x2d
     562:	32ff      	adds	r2, #255	; 0xff
			((rPiBeret[i+1]/iSv)+(offsetGraphicY)),
     564:	7861      	ldrb	r1, [r4, #1]
     566:	1049      	asrs	r1, r1, #1
			fillRect((
     568:	3196      	adds	r1, #150	; 0x96
			(rPiBeret[i]/iSv)+(offsetGraphicX)),
     56a:	7820      	ldrb	r0, [r4, #0]
     56c:	1040      	asrs	r0, r0, #1
			fillRect((
     56e:	302d      	adds	r0, #45	; 0x2d
     570:	30ff      	adds	r0, #255	; 0xff
     572:	47a8      	blx	r5
     574:	3404      	adds	r4, #4
		for(int i = 0; i < 20; i = i+4)
     576:	42b4      	cmp	r4, r6
     578:	d1ed      	bne.n	556 <drawKare+0x9a>
     57a:	e7d1      	b.n	520 <drawKare+0x64>
     57c:	00004c94 	.word	0x00004c94
     580:	000039e9 	.word	0x000039e9
     584:	00004d14 	.word	0x00004d14
     588:	00002dad 	.word	0x00002dad

0000058c <splashScreen>:

void splashScreen(void)
{
     58c:	b570      	push	{r4, r5, r6, lr}
	static const char *splashText[32];
	splashText[0]  = "Trans rights are human rights";//
     58e:	4c48      	ldr	r4, [pc, #288]	; (6b0 <splashScreen+0x124>)
     590:	4b48      	ldr	r3, [pc, #288]	; (6b4 <splashScreen+0x128>)
     592:	6023      	str	r3, [r4, #0]
	splashText[1]  = "13^5 + 16^5 = 17^5";//
     594:	4b48      	ldr	r3, [pc, #288]	; (6b8 <splashScreen+0x12c>)
     596:	6063      	str	r3, [r4, #4]
	splashText[2]  = "Reticulating Splines";//
     598:	4b48      	ldr	r3, [pc, #288]	; (6bc <splashScreen+0x130>)
     59a:	60a3      	str	r3, [r4, #8]
	splashText[3]  = "violence.works";//
     59c:	4b48      	ldr	r3, [pc, #288]	; (6c0 <splashScreen+0x134>)
     59e:	60e3      	str	r3, [r4, #12]
	splashText[4]  = "Tabs!";//
     5a0:	4b48      	ldr	r3, [pc, #288]	; (6c4 <splashScreen+0x138>)
     5a2:	6123      	str	r3, [r4, #16]
	splashText[5]  = "Kill Billionaires (and Trillionaire)";//
     5a4:	4b48      	ldr	r3, [pc, #288]	; (6c8 <splashScreen+0x13c>)
     5a6:	6163      	str	r3, [r4, #20]
	splashText[6]  = "Interest in technology is not a personality";//
     5a8:	4b48      	ldr	r3, [pc, #288]	; (6cc <splashScreen+0x140>)
     5aa:	61a3      	str	r3, [r4, #24]
	splashText[7]  = "10 PRINT CHR$(205.5+RND(1)); : GOTO 10";//
     5ac:	4b48      	ldr	r3, [pc, #288]	; (6d0 <splashScreen+0x144>)
     5ae:	61e3      	str	r3, [r4, #28]
	splashText[8]  = "No gods. No masters. No external libraries.";//
     5b0:	4b48      	ldr	r3, [pc, #288]	; (6d4 <splashScreen+0x148>)
     5b2:	6223      	str	r3, [r4, #32]
	splashText[9]  = "Kill Nazis";//
     5b4:	4b48      	ldr	r3, [pc, #288]	; (6d8 <splashScreen+0x14c>)
     5b6:	6263      	str	r3, [r4, #36]	; 0x24
	splashText[10] = "Tiananmen Square 1989";//
     5b8:	4b48      	ldr	r3, [pc, #288]	; (6dc <splashScreen+0x150>)
     5ba:	62a3      	str	r3, [r4, #40]	; 0x28
	splashText[11] = "America was founded on slavery";
     5bc:	4b48      	ldr	r3, [pc, #288]	; (6e0 <splashScreen+0x154>)
     5be:	62e3      	str	r3, [r4, #44]	; 0x2c
	splashText[12] = "There is only capital and labor";//
     5c0:	4b48      	ldr	r3, [pc, #288]	; (6e4 <splashScreen+0x158>)
     5c2:	6323      	str	r3, [r4, #48]	; 0x30
	splashText[13] = "Encourage _symmetric_ class warfare";//
     5c4:	4b48      	ldr	r3, [pc, #288]	; (6e8 <splashScreen+0x15c>)
     5c6:	6363      	str	r3, [r4, #52]	; 0x34
	splashText[14] = "$CURRENT_MEME";//
     5c8:	4b48      	ldr	r3, [pc, #288]	; (6ec <splashScreen+0x160>)
     5ca:	63a3      	str	r3, [r4, #56]	; 0x38
	splashText[15] = "A Nice TTY";//
     5cc:	4b48      	ldr	r3, [pc, #288]	; (6f0 <splashScreen+0x164>)
     5ce:	63e3      	str	r3, [r4, #60]	; 0x3c
	splashText[16] = "Unix epoch minus 0xFF days";//
     5d0:	4b48      	ldr	r3, [pc, #288]	; (6f4 <splashScreen+0x168>)
     5d2:	6423      	str	r3, [r4, #64]	; 0x40
	splashText[17] = "i  = 0x5f3759df - ( i >> 1 );";//
     5d4:	4b48      	ldr	r3, [pc, #288]	; (6f8 <splashScreen+0x16c>)
     5d6:	6463      	str	r3, [r4, #68]	; 0x44
	splashText[18] = "ACAB";//
     5d8:	4b48      	ldr	r3, [pc, #288]	; (6fc <splashScreen+0x170>)
     5da:	64a3      	str	r3, [r4, #72]	; 0x48
	splashText[19] = "Defcon's canceled.";//
     5dc:	4b48      	ldr	r3, [pc, #288]	; (700 <splashScreen+0x174>)
     5de:	64e3      	str	r3, [r4, #76]	; 0x4c
	splashText[20] = "Ratsnest: Nothing To Do!";//
     5e0:	4b48      	ldr	r3, [pc, #288]	; (704 <splashScreen+0x178>)
     5e2:	6523      	str	r3, [r4, #80]	; 0x50
	splashText[21] = "It has 69 keys.";//
     5e4:	4b48      	ldr	r3, [pc, #288]	; (708 <splashScreen+0x17c>)
     5e6:	6563      	str	r3, [r4, #84]	; 0x54
	splashText[22] = "Because VT-420 was already taken";//
     5e8:	4b48      	ldr	r3, [pc, #288]	; (70c <splashScreen+0x180>)
     5ea:	65a3      	str	r3, [r4, #88]	; 0x58
	splashText[23] = "Compression algorithm based on BBP (1997)";//
     5ec:	4b48      	ldr	r3, [pc, #288]	; (710 <splashScreen+0x184>)
     5ee:	65e3      	str	r3, [r4, #92]	; 0x5c
	splashText[24] = "Teach health insurance providers to code.";
     5f0:	4b48      	ldr	r3, [pc, #288]	; (714 <splashScreen+0x188>)
     5f2:	6623      	str	r3, [r4, #96]	; 0x60
	splashText[25] = "Offensive hardware";//
     5f4:	4b48      	ldr	r3, [pc, #288]	; (718 <splashScreen+0x18c>)
     5f6:	6663      	str	r3, [r4, #100]	; 0x64
	splashText[26] = "WiFi is not wireless Ethernet!";//
     5f8:	4b48      	ldr	r3, [pc, #288]	; (71c <splashScreen+0x190>)
     5fa:	66a3      	str	r3, [r4, #104]	; 0x68
	splashText[27] = "Dummy thicc client";//
     5fc:	4b48      	ldr	r3, [pc, #288]	; (720 <splashScreen+0x194>)
     5fe:	66e3      	str	r3, [r4, #108]	; 0x6c
	splashText[28] = "A Nice TTY. An OK Computer.";//
     600:	4b48      	ldr	r3, [pc, #288]	; (724 <splashScreen+0x198>)
     602:	6723      	str	r3, [r4, #112]	; 0x70
	splashText[29] = "USTeledildonics";//
     604:	4b48      	ldr	r3, [pc, #288]	; (728 <splashScreen+0x19c>)
     606:	6763      	str	r3, [r4, #116]	; 0x74
	splashText[30] = "Solidarity is not a new framework";//
     608:	4b48      	ldr	r3, [pc, #288]	; (72c <splashScreen+0x1a0>)
     60a:	67a3      	str	r3, [r4, #120]	; 0x78
	splashText[31] = "Breadboarding Is Not A Crime";//
     60c:	4b48      	ldr	r3, [pc, #288]	; (730 <splashScreen+0x1a4>)
     60e:	67e3      	str	r3, [r4, #124]	; 0x7c
	splashText[32] = "Off by one errors are common";
     610:	4a48      	ldr	r2, [pc, #288]	; (734 <splashScreen+0x1a8>)
     612:	2380      	movs	r3, #128	; 0x80
     614:	50e2      	str	r2, [r4, r3]
	
	const uint32_t megaHurtz = system_gclk_gen_get_hz(0);
     616:	2000      	movs	r0, #0
     618:	4b47      	ldr	r3, [pc, #284]	; (738 <splashScreen+0x1ac>)
     61a:	4798      	blx	r3
     61c:	0005      	movs	r5, r0
	const char *textPhrase = splashText[(((rand()+megaHurtz)%32))];
     61e:	4b47      	ldr	r3, [pc, #284]	; (73c <splashScreen+0x1b0>)
     620:	4798      	blx	r3
     622:	1945      	adds	r5, r0, r5
     624:	201f      	movs	r0, #31
     626:	4028      	ands	r0, r5
     628:	0080      	lsls	r0, r0, #2
     62a:	5904      	ldr	r4, [r0, r4]


	
	clearScreen();
     62c:	4b44      	ldr	r3, [pc, #272]	; (740 <splashScreen+0x1b4>)
     62e:	4798      	blx	r3
	setColorRGB(255,255,255);
     630:	22ff      	movs	r2, #255	; 0xff
     632:	21ff      	movs	r1, #255	; 0xff
     634:	20ff      	movs	r0, #255	; 0xff
     636:	4b43      	ldr	r3, [pc, #268]	; (744 <splashScreen+0x1b8>)
     638:	4798      	blx	r3
	
	REG_PORT_DIRTGL1 = PORT_PB31;
     63a:	2280      	movs	r2, #128	; 0x80
     63c:	0612      	lsls	r2, r2, #24
     63e:	4b42      	ldr	r3, [pc, #264]	; (748 <splashScreen+0x1bc>)
     640:	601a      	str	r2, [r3, #0]
	PORT->Group[1].PINCFG[31].bit.PULLEN = 1;
     642:	4b42      	ldr	r3, [pc, #264]	; (74c <splashScreen+0x1c0>)
     644:	22df      	movs	r2, #223	; 0xdf
     646:	5c99      	ldrb	r1, [r3, r2]
     648:	2004      	movs	r0, #4
     64a:	4301      	orrs	r1, r0
     64c:	5499      	strb	r1, [r3, r2]
	PORT->Group[1].PINCFG[31].bit.INEN = 1;
     64e:	5c99      	ldrb	r1, [r3, r2]
     650:	2002      	movs	r0, #2
     652:	4301      	orrs	r1, r0
     654:	5499      	strb	r1, [r3, r2]
	if((PORT->Group[1].IN.reg & PORT_PB31) != 0)
     656:	3a3f      	subs	r2, #63	; 0x3f
     658:	589b      	ldr	r3, [r3, r2]
     65a:	2b00      	cmp	r3, #0
     65c:	db24      	blt.n	6a8 <splashScreen+0x11c>
		//This is the 'pi' graphic; put some codes
		//here to handle setting up the uarts.
		drawKare(1);
	}
	else
	drawKare(0); //The normal graphic
     65e:	2000      	movs	r0, #0
     660:	4b3b      	ldr	r3, [pc, #236]	; (750 <splashScreen+0x1c4>)
     662:	4798      	blx	r3
	

	
	xCharPos = 40 - (strlen(textPhrase)/2);
     664:	0020      	movs	r0, r4
     666:	4b3b      	ldr	r3, [pc, #236]	; (754 <splashScreen+0x1c8>)
     668:	4798      	blx	r3
     66a:	4e3b      	ldr	r6, [pc, #236]	; (758 <splashScreen+0x1cc>)
     66c:	0840      	lsrs	r0, r0, #1
     66e:	2328      	movs	r3, #40	; 0x28
     670:	1a18      	subs	r0, r3, r0
     672:	8030      	strh	r0, [r6, #0]
	yCharPos = 16;
     674:	4d39      	ldr	r5, [pc, #228]	; (75c <splashScreen+0x1d0>)
     676:	2310      	movs	r3, #16
     678:	802b      	strh	r3, [r5, #0]
	
	writeString(textPhrase);
     67a:	0020      	movs	r0, r4
     67c:	4b38      	ldr	r3, [pc, #224]	; (760 <splashScreen+0x1d4>)
     67e:	4798      	blx	r3
	xCharPos = 40 - (strlen(versionLabel)/2);
	yCharPos = 18;
	
	writeString(versionLabel);
	*/
	delay_ms(2000);
     680:	20fa      	movs	r0, #250	; 0xfa
     682:	00c0      	lsls	r0, r0, #3
     684:	4b37      	ldr	r3, [pc, #220]	; (764 <splashScreen+0x1d8>)
     686:	4798      	blx	r3
	clearScreen();
     688:	4b2d      	ldr	r3, [pc, #180]	; (740 <splashScreen+0x1b4>)
     68a:	4798      	blx	r3
	
	setColorRGB(0,255,0);
     68c:	2200      	movs	r2, #0
     68e:	21ff      	movs	r1, #255	; 0xff
     690:	2000      	movs	r0, #0
     692:	4b2c      	ldr	r3, [pc, #176]	; (744 <splashScreen+0x1b8>)
     694:	4798      	blx	r3
	setBackColorRGB(0,0,0);
     696:	2200      	movs	r2, #0
     698:	2100      	movs	r1, #0
     69a:	2000      	movs	r0, #0
     69c:	4b32      	ldr	r3, [pc, #200]	; (768 <splashScreen+0x1dc>)
     69e:	4798      	blx	r3
	
	//Setting the xChar and yChar position has to come
	//after splashScreen() and InitLCD();
	xCharPos = 0;
     6a0:	2300      	movs	r3, #0
     6a2:	8033      	strh	r3, [r6, #0]
	yCharPos = 0;
     6a4:	802b      	strh	r3, [r5, #0]
	

     6a6:	bd70      	pop	{r4, r5, r6, pc}
		drawKare(1);
     6a8:	2001      	movs	r0, #1
     6aa:	4b29      	ldr	r3, [pc, #164]	; (750 <splashScreen+0x1c4>)
     6ac:	4798      	blx	r3
     6ae:	e7d9      	b.n	664 <splashScreen+0xd8>
     6b0:	200001e4 	.word	0x200001e4
     6b4:	00004d94 	.word	0x00004d94
     6b8:	00004db4 	.word	0x00004db4
     6bc:	00004dc8 	.word	0x00004dc8
     6c0:	00004de0 	.word	0x00004de0
     6c4:	00004df0 	.word	0x00004df0
     6c8:	00004df8 	.word	0x00004df8
     6cc:	00004e20 	.word	0x00004e20
     6d0:	00004e4c 	.word	0x00004e4c
     6d4:	00004e74 	.word	0x00004e74
     6d8:	00004ea0 	.word	0x00004ea0
     6dc:	00004eac 	.word	0x00004eac
     6e0:	00004ec4 	.word	0x00004ec4
     6e4:	00004ee4 	.word	0x00004ee4
     6e8:	00004f04 	.word	0x00004f04
     6ec:	00004f28 	.word	0x00004f28
     6f0:	00004f38 	.word	0x00004f38
     6f4:	00004f44 	.word	0x00004f44
     6f8:	00004f60 	.word	0x00004f60
     6fc:	00004f80 	.word	0x00004f80
     700:	00004f88 	.word	0x00004f88
     704:	00004f9c 	.word	0x00004f9c
     708:	00004fb8 	.word	0x00004fb8
     70c:	00004fc8 	.word	0x00004fc8
     710:	00004fec 	.word	0x00004fec
     714:	00005018 	.word	0x00005018
     718:	00005044 	.word	0x00005044
     71c:	00005058 	.word	0x00005058
     720:	00005078 	.word	0x00005078
     724:	0000508c 	.word	0x0000508c
     728:	000050a8 	.word	0x000050a8
     72c:	000050b8 	.word	0x000050b8
     730:	000050dc 	.word	0x000050dc
     734:	000050fc 	.word	0x000050fc
     738:	00001d81 	.word	0x00001d81
     73c:	00003c15 	.word	0x00003c15
     740:	00002f05 	.word	0x00002f05
     744:	00002c71 	.word	0x00002c71
     748:	4100448c 	.word	0x4100448c
     74c:	41004400 	.word	0x41004400
     750:	000004bd 	.word	0x000004bd
     754:	00003e1d 	.word	0x00003e1d
     758:	200002a4 	.word	0x200002a4
     75c:	200002a6 	.word	0x200002a6
     760:	0000259d 	.word	0x0000259d
     764:	00000801 	.word	0x00000801
     768:	00002c99 	.word	0x00002c99

0000076c <parseRXBuffer>:
char tempCharacter;

cbuf_handle_t ouroboros;	

void parseRXBuffer(void)
{
     76c:	b5f0      	push	{r4, r5, r6, r7, lr}
     76e:	b083      	sub	sp, #12
		while(!ring_empty(ouroboros))
     770:	4e0b      	ldr	r6, [pc, #44]	; (7a0 <parseRXBuffer+0x34>)
     772:	4d0c      	ldr	r5, [pc, #48]	; (7a4 <parseRXBuffer+0x38>)
		{
			uint8_t characterFromRingBuffer;
			ring_get(ouroboros, &characterFromRingBuffer);
     774:	0037      	movs	r7, r6
		while(!ring_empty(ouroboros))
     776:	e008      	b.n	78a <parseRXBuffer+0x1e>
			ring_get(ouroboros, &characterFromRingBuffer);
     778:	466b      	mov	r3, sp
     77a:	1ddc      	adds	r4, r3, #7
     77c:	0021      	movs	r1, r4
     77e:	6838      	ldr	r0, [r7, #0]
     780:	4b09      	ldr	r3, [pc, #36]	; (7a8 <parseRXBuffer+0x3c>)
     782:	4798      	blx	r3
			parseChar(characterFromRingBuffer);
     784:	7820      	ldrb	r0, [r4, #0]
     786:	4b09      	ldr	r3, [pc, #36]	; (7ac <parseRXBuffer+0x40>)
     788:	4798      	blx	r3
		while(!ring_empty(ouroboros))
     78a:	6830      	ldr	r0, [r6, #0]
     78c:	47a8      	blx	r5
     78e:	2800      	cmp	r0, #0
     790:	d0f2      	beq.n	778 <parseRXBuffer+0xc>
		
		}
		ring_reset(ouroboros);
     792:	4b03      	ldr	r3, [pc, #12]	; (7a0 <parseRXBuffer+0x34>)
     794:	6818      	ldr	r0, [r3, #0]
     796:	4b06      	ldr	r3, [pc, #24]	; (7b0 <parseRXBuffer+0x44>)
     798:	4798      	blx	r3
}
     79a:	b003      	add	sp, #12
     79c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     79e:	46c0      	nop			; (mov r8, r8)
     7a0:	200002bc 	.word	0x200002bc
     7a4:	0000017d 	.word	0x0000017d
     7a8:	00000195 	.word	0x00000195
     7ac:	000001f5 	.word	0x000001f5
     7b0:	00000135 	.word	0x00000135

000007b4 <sendChar>:

void sendChar(char character)
{
     7b4:	b510      	push	{r4, lr}
	printf("%c", character);
     7b6:	4b01      	ldr	r3, [pc, #4]	; (7bc <sendChar+0x8>)
     7b8:	4798      	blx	r3
     7ba:	bd10      	pop	{r4, pc}
     7bc:	00003b91 	.word	0x00003b91

000007c0 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     7c0:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     7c2:	2000      	movs	r0, #0
     7c4:	4b08      	ldr	r3, [pc, #32]	; (7e8 <delay_init+0x28>)
     7c6:	4798      	blx	r3
     7c8:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     7ca:	4c08      	ldr	r4, [pc, #32]	; (7ec <delay_init+0x2c>)
     7cc:	21fa      	movs	r1, #250	; 0xfa
     7ce:	0089      	lsls	r1, r1, #2
     7d0:	47a0      	blx	r4
     7d2:	4b07      	ldr	r3, [pc, #28]	; (7f0 <delay_init+0x30>)
     7d4:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     7d6:	4907      	ldr	r1, [pc, #28]	; (7f4 <delay_init+0x34>)
     7d8:	0028      	movs	r0, r5
     7da:	47a0      	blx	r4
     7dc:	4b06      	ldr	r3, [pc, #24]	; (7f8 <delay_init+0x38>)
     7de:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     7e0:	2205      	movs	r2, #5
     7e2:	4b06      	ldr	r3, [pc, #24]	; (7fc <delay_init+0x3c>)
     7e4:	601a      	str	r2, [r3, #0]
}
     7e6:	bd70      	pop	{r4, r5, r6, pc}
     7e8:	00001d81 	.word	0x00001d81
     7ec:	0000364d 	.word	0x0000364d
     7f0:	20000000 	.word	0x20000000
     7f4:	000f4240 	.word	0x000f4240
     7f8:	20000004 	.word	0x20000004
     7fc:	e000e010 	.word	0xe000e010

00000800 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     800:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     802:	4b08      	ldr	r3, [pc, #32]	; (824 <delay_cycles_ms+0x24>)
     804:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     806:	4a08      	ldr	r2, [pc, #32]	; (828 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     808:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     80a:	2180      	movs	r1, #128	; 0x80
     80c:	0249      	lsls	r1, r1, #9
	while (n--) {
     80e:	3801      	subs	r0, #1
     810:	d307      	bcc.n	822 <delay_cycles_ms+0x22>
	if (n > 0) {
     812:	2c00      	cmp	r4, #0
     814:	d0fb      	beq.n	80e <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     816:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     818:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     81a:	6813      	ldr	r3, [r2, #0]
     81c:	420b      	tst	r3, r1
     81e:	d0fc      	beq.n	81a <delay_cycles_ms+0x1a>
     820:	e7f5      	b.n	80e <delay_cycles_ms+0xe>
	}
}
     822:	bd30      	pop	{r4, r5, pc}
     824:	20000000 	.word	0x20000000
     828:	e000e010 	.word	0xe000e010

0000082c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     82c:	4b0c      	ldr	r3, [pc, #48]	; (860 <cpu_irq_enter_critical+0x34>)
     82e:	681b      	ldr	r3, [r3, #0]
     830:	2b00      	cmp	r3, #0
     832:	d106      	bne.n	842 <cpu_irq_enter_critical+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     834:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     838:	2b00      	cmp	r3, #0
     83a:	d007      	beq.n	84c <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     83c:	2200      	movs	r2, #0
     83e:	4b09      	ldr	r3, [pc, #36]	; (864 <cpu_irq_enter_critical+0x38>)
     840:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     842:	4a07      	ldr	r2, [pc, #28]	; (860 <cpu_irq_enter_critical+0x34>)
     844:	6813      	ldr	r3, [r2, #0]
     846:	3301      	adds	r3, #1
     848:	6013      	str	r3, [r2, #0]
}
     84a:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     84c:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     84e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     852:	2200      	movs	r2, #0
     854:	4b04      	ldr	r3, [pc, #16]	; (868 <cpu_irq_enter_critical+0x3c>)
     856:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     858:	3201      	adds	r2, #1
     85a:	4b02      	ldr	r3, [pc, #8]	; (864 <cpu_irq_enter_critical+0x38>)
     85c:	701a      	strb	r2, [r3, #0]
     85e:	e7f0      	b.n	842 <cpu_irq_enter_critical+0x16>
     860:	20000264 	.word	0x20000264
     864:	20000268 	.word	0x20000268
     868:	20000008 	.word	0x20000008

0000086c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     86c:	4b08      	ldr	r3, [pc, #32]	; (890 <cpu_irq_leave_critical+0x24>)
     86e:	681a      	ldr	r2, [r3, #0]
     870:	3a01      	subs	r2, #1
     872:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     874:	681b      	ldr	r3, [r3, #0]
     876:	2b00      	cmp	r3, #0
     878:	d109      	bne.n	88e <cpu_irq_leave_critical+0x22>
     87a:	4b06      	ldr	r3, [pc, #24]	; (894 <cpu_irq_leave_critical+0x28>)
     87c:	781b      	ldrb	r3, [r3, #0]
     87e:	2b00      	cmp	r3, #0
     880:	d005      	beq.n	88e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     882:	2201      	movs	r2, #1
     884:	4b04      	ldr	r3, [pc, #16]	; (898 <cpu_irq_leave_critical+0x2c>)
     886:	701a      	strb	r2, [r3, #0]
     888:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     88c:	b662      	cpsie	i
	}
}
     88e:	4770      	bx	lr
     890:	20000264 	.word	0x20000264
     894:	20000268 	.word	0x20000268
     898:	20000008 	.word	0x20000008

0000089c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     89c:	b5f0      	push	{r4, r5, r6, r7, lr}
     89e:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     8a0:	ac01      	add	r4, sp, #4
     8a2:	2501      	movs	r5, #1
     8a4:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     8a6:	2700      	movs	r7, #0
     8a8:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     8aa:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     8ac:	0021      	movs	r1, r4
     8ae:	203e      	movs	r0, #62	; 0x3e
     8b0:	4e06      	ldr	r6, [pc, #24]	; (8cc <system_board_init+0x30>)
     8b2:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     8b4:	2280      	movs	r2, #128	; 0x80
     8b6:	05d2      	lsls	r2, r2, #23
     8b8:	4b05      	ldr	r3, [pc, #20]	; (8d0 <system_board_init+0x34>)
     8ba:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     8bc:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     8be:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     8c0:	0021      	movs	r1, r4
     8c2:	200f      	movs	r0, #15
     8c4:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
     8c6:	b003      	add	sp, #12
     8c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     8ca:	46c0      	nop			; (mov r8, r8)
     8cc:	00000e05 	.word	0x00000e05
     8d0:	41004480 	.word	0x41004480

000008d4 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     8d4:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     8d6:	2200      	movs	r2, #0
     8d8:	2300      	movs	r3, #0
     8da:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
     8dc:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
     8de:	2100      	movs	r1, #0
     8e0:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     8e2:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     8e4:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
     8e6:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
     8e8:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
     8ea:	6082      	str	r2, [r0, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	//config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
     8ec:	24c0      	movs	r4, #192	; 0xc0
     8ee:	0164      	lsls	r4, r4, #5
     8f0:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     8f2:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     8f4:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
     8f6:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
     8f8:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
     8fa:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     8fc:	242a      	movs	r4, #42	; 0x2a
     8fe:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
     900:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
     902:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
     904:	3c06      	subs	r4, #6
     906:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     908:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     90a:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
     90c:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
     90e:	232b      	movs	r3, #43	; 0x2b
     910:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
     912:	3301      	adds	r3, #1
     914:	54c1      	strb	r1, [r0, r3]
}
     916:	bd10      	pop	{r4, pc}

00000918 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     918:	b5f0      	push	{r4, r5, r6, r7, lr}
     91a:	46d6      	mov	lr, sl
     91c:	464f      	mov	r7, r9
     91e:	4646      	mov	r6, r8
     920:	b5c0      	push	{r6, r7, lr}
     922:	b096      	sub	sp, #88	; 0x58
     924:	0007      	movs	r7, r0
     926:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     928:	6001      	str	r1, [r0, #0]
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     92a:	4ac6      	ldr	r2, [pc, #792]	; (c44 <adc_init+0x32c>)
     92c:	6a10      	ldr	r0, [r2, #32]
     92e:	2380      	movs	r3, #128	; 0x80
     930:	025b      	lsls	r3, r3, #9
     932:	4303      	orrs	r3, r0
     934:	6213      	str	r3, [r2, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     936:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     938:	2005      	movs	r0, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     93a:	07db      	lsls	r3, r3, #31
     93c:	d505      	bpl.n	94a <adc_init+0x32>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
     93e:	b016      	add	sp, #88	; 0x58
     940:	bc1c      	pop	{r2, r3, r4}
     942:	4690      	mov	r8, r2
     944:	4699      	mov	r9, r3
     946:	46a2      	mov	sl, r4
     948:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     94a:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
     94c:	3017      	adds	r0, #23
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     94e:	079b      	lsls	r3, r3, #30
     950:	d4f5      	bmi.n	93e <adc_init+0x26>
	module_inst->reference = config->reference;
     952:	7873      	ldrb	r3, [r6, #1]
     954:	713b      	strb	r3, [r7, #4]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
     956:	2b00      	cmp	r3, #0
     958:	d104      	bne.n	964 <adc_init+0x4c>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
     95a:	4abb      	ldr	r2, [pc, #748]	; (c48 <adc_init+0x330>)
     95c:	6c13      	ldr	r3, [r2, #64]	; 0x40
     95e:	2104      	movs	r1, #4
     960:	430b      	orrs	r3, r1
     962:	6413      	str	r3, [r2, #64]	; 0x40
		module_inst->callback[i] = NULL;
     964:	2300      	movs	r3, #0
     966:	60bb      	str	r3, [r7, #8]
     968:	60fb      	str	r3, [r7, #12]
     96a:	613b      	str	r3, [r7, #16]
	module_inst->registered_callback_mask = 0;
     96c:	76bb      	strb	r3, [r7, #26]
	module_inst->enabled_callback_mask = 0;
     96e:	76fb      	strb	r3, [r7, #27]
	module_inst->remaining_conversions = 0;
     970:	833b      	strh	r3, [r7, #24]
	module_inst->job_status = STATUS_OK;
     972:	773b      	strb	r3, [r7, #28]
	_adc_instances[0] = module_inst;
     974:	4bb5      	ldr	r3, [pc, #724]	; (c4c <adc_init+0x334>)
     976:	601f      	str	r7, [r3, #0]
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
     978:	232a      	movs	r3, #42	; 0x2a
     97a:	5cf3      	ldrb	r3, [r6, r3]
     97c:	2b00      	cmp	r3, #0
     97e:	d105      	bne.n	98c <adc_init+0x74>
     980:	7d33      	ldrb	r3, [r6, #20]
     982:	2b00      	cmp	r3, #0
     984:	d102      	bne.n	98c <adc_init+0x74>
		module_inst->software_trigger = true;
     986:	3301      	adds	r3, #1
     988:	777b      	strb	r3, [r7, #29]
     98a:	e001      	b.n	990 <adc_init+0x78>
		module_inst->software_trigger = false;
     98c:	2300      	movs	r3, #0
     98e:	777b      	strb	r3, [r7, #29]
	Adc *const adc_module = module_inst->hw;
     990:	683b      	ldr	r3, [r7, #0]
     992:	4698      	mov	r8, r3
	gclk_chan_conf.source_generator = config->clock_source;
     994:	7833      	ldrb	r3, [r6, #0]
     996:	466a      	mov	r2, sp
     998:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
     99a:	4669      	mov	r1, sp
     99c:	201e      	movs	r0, #30
     99e:	4bac      	ldr	r3, [pc, #688]	; (c50 <adc_init+0x338>)
     9a0:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
     9a2:	201e      	movs	r0, #30
     9a4:	4bab      	ldr	r3, [pc, #684]	; (c54 <adc_init+0x33c>)
     9a6:	4798      	blx	r3
	if (config->pin_scan.inputs_to_scan != 0) {
     9a8:	232c      	movs	r3, #44	; 0x2c
     9aa:	5cf2      	ldrb	r2, [r6, r3]
     9ac:	2a00      	cmp	r2, #0
     9ae:	d054      	beq.n	a5a <adc_init+0x142>
		uint8_t offset = config->pin_scan.offset_start_scan;
     9b0:	3b01      	subs	r3, #1
     9b2:	5cf5      	ldrb	r5, [r6, r3]
		uint8_t start_pin =
     9b4:	7b33      	ldrb	r3, [r6, #12]
     9b6:	18eb      	adds	r3, r5, r3
     9b8:	b2db      	uxtb	r3, r3
		uint8_t end_pin =
     9ba:	18d1      	adds	r1, r2, r3
		while (start_pin < end_pin) {
     9bc:	b2c9      	uxtb	r1, r1
     9be:	428b      	cmp	r3, r1
     9c0:	d221      	bcs.n	a06 <adc_init+0xee>
     9c2:	1952      	adds	r2, r2, r5
     9c4:	b2d3      	uxtb	r3, r2
     9c6:	4699      	mov	r9, r3
	const uint32_t pinmapping[] = {
     9c8:	4ba3      	ldr	r3, [pc, #652]	; (c58 <adc_init+0x340>)
     9ca:	469a      	mov	sl, r3
     9cc:	e003      	b.n	9d6 <adc_init+0xbe>
			offset++;
     9ce:	3501      	adds	r5, #1
     9d0:	b2ed      	uxtb	r5, r5
		while (start_pin < end_pin) {
     9d2:	454d      	cmp	r5, r9
     9d4:	d017      	beq.n	a06 <adc_init+0xee>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
     9d6:	240f      	movs	r4, #15
     9d8:	402c      	ands	r4, r5
     9da:	7b33      	ldrb	r3, [r6, #12]
     9dc:	18e4      	adds	r4, r4, r3
	const uint32_t pinmapping[] = {
     9de:	2250      	movs	r2, #80	; 0x50
     9e0:	499e      	ldr	r1, [pc, #632]	; (c5c <adc_init+0x344>)
     9e2:	a802      	add	r0, sp, #8
     9e4:	47d0      	blx	sl
	if (pin <= ADC_EXTCHANNEL_MSB) {
     9e6:	2c13      	cmp	r4, #19
     9e8:	d8f1      	bhi.n	9ce <adc_init+0xb6>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     9ea:	00a4      	lsls	r4, r4, #2
     9ec:	ab02      	add	r3, sp, #8
     9ee:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     9f0:	a901      	add	r1, sp, #4
     9f2:	2300      	movs	r3, #0
     9f4:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     9f6:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     9f8:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     9fa:	3301      	adds	r3, #1
     9fc:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     9fe:	b2c0      	uxtb	r0, r0
     a00:	4b97      	ldr	r3, [pc, #604]	; (c60 <adc_init+0x348>)
     a02:	4798      	blx	r3
     a04:	e7e3      	b.n	9ce <adc_init+0xb6>
		_adc_configure_ain_pin(config->negative_input);
     a06:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     a08:	2250      	movs	r2, #80	; 0x50
     a0a:	4994      	ldr	r1, [pc, #592]	; (c5c <adc_init+0x344>)
     a0c:	a802      	add	r0, sp, #8
     a0e:	4b92      	ldr	r3, [pc, #584]	; (c58 <adc_init+0x340>)
     a10:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     a12:	2c13      	cmp	r4, #19
     a14:	d913      	bls.n	a3e <adc_init+0x126>
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
     a16:	7d73      	ldrb	r3, [r6, #21]
     a18:	009b      	lsls	r3, r3, #2
     a1a:	b2db      	uxtb	r3, r3
     a1c:	4642      	mov	r2, r8
     a1e:	7013      	strb	r3, [r2, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     a20:	7db3      	ldrb	r3, [r6, #22]
     a22:	01db      	lsls	r3, r3, #7
     a24:	7872      	ldrb	r2, [r6, #1]
     a26:	4313      	orrs	r3, r2
     a28:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
     a2a:	4642      	mov	r2, r8
     a2c:	7053      	strb	r3, [r2, #1]
	switch (config->resolution) {
     a2e:	7933      	ldrb	r3, [r6, #4]
     a30:	2b34      	cmp	r3, #52	; 0x34
     a32:	d900      	bls.n	a36 <adc_init+0x11e>
     a34:	e17b      	b.n	d2e <adc_init+0x416>
     a36:	009b      	lsls	r3, r3, #2
     a38:	4a8a      	ldr	r2, [pc, #552]	; (c64 <adc_init+0x34c>)
     a3a:	58d3      	ldr	r3, [r2, r3]
     a3c:	469f      	mov	pc, r3
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     a3e:	00a4      	lsls	r4, r4, #2
     a40:	ab02      	add	r3, sp, #8
     a42:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     a44:	a901      	add	r1, sp, #4
     a46:	2300      	movs	r3, #0
     a48:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     a4a:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     a4c:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     a4e:	3301      	adds	r3, #1
     a50:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     a52:	b2c0      	uxtb	r0, r0
     a54:	4b82      	ldr	r3, [pc, #520]	; (c60 <adc_init+0x348>)
     a56:	4798      	blx	r3
     a58:	e7dd      	b.n	a16 <adc_init+0xfe>
		_adc_configure_ain_pin(config->positive_input);
     a5a:	7b34      	ldrb	r4, [r6, #12]
	const uint32_t pinmapping[] = {
     a5c:	2250      	movs	r2, #80	; 0x50
     a5e:	497f      	ldr	r1, [pc, #508]	; (c5c <adc_init+0x344>)
     a60:	a802      	add	r0, sp, #8
     a62:	4b7d      	ldr	r3, [pc, #500]	; (c58 <adc_init+0x340>)
     a64:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     a66:	2c13      	cmp	r4, #19
     a68:	d915      	bls.n	a96 <adc_init+0x17e>
		_adc_configure_ain_pin(config->negative_input);
     a6a:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     a6c:	2250      	movs	r2, #80	; 0x50
     a6e:	497b      	ldr	r1, [pc, #492]	; (c5c <adc_init+0x344>)
     a70:	a802      	add	r0, sp, #8
     a72:	4b79      	ldr	r3, [pc, #484]	; (c58 <adc_init+0x340>)
     a74:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     a76:	2c13      	cmp	r4, #19
     a78:	d8cd      	bhi.n	a16 <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     a7a:	00a4      	lsls	r4, r4, #2
     a7c:	ab02      	add	r3, sp, #8
     a7e:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     a80:	a901      	add	r1, sp, #4
     a82:	2300      	movs	r3, #0
     a84:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     a86:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     a88:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     a8a:	3301      	adds	r3, #1
     a8c:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     a8e:	b2c0      	uxtb	r0, r0
     a90:	4b73      	ldr	r3, [pc, #460]	; (c60 <adc_init+0x348>)
     a92:	4798      	blx	r3
     a94:	e7bf      	b.n	a16 <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     a96:	00a4      	lsls	r4, r4, #2
     a98:	ab02      	add	r3, sp, #8
     a9a:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     a9c:	a901      	add	r1, sp, #4
     a9e:	2300      	movs	r3, #0
     aa0:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     aa2:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     aa4:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     aa6:	3301      	adds	r3, #1
     aa8:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     aaa:	b2c0      	uxtb	r0, r0
     aac:	4b6c      	ldr	r3, [pc, #432]	; (c60 <adc_init+0x348>)
     aae:	4798      	blx	r3
     ab0:	e7db      	b.n	a6a <adc_init+0x152>
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     ab2:	2304      	movs	r3, #4
		resolution = ADC_RESOLUTION_16BIT;
     ab4:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_4;
     ab6:	2102      	movs	r1, #2
     ab8:	e01a      	b.n	af0 <adc_init+0x1d8>
		adjres = config->divide_result;
     aba:	7c71      	ldrb	r1, [r6, #17]
		accumulate = config->accumulate_samples;
     abc:	7c33      	ldrb	r3, [r6, #16]
		resolution = ADC_RESOLUTION_16BIT;
     abe:	2410      	movs	r4, #16
     ac0:	e016      	b.n	af0 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     ac2:	2306      	movs	r3, #6
		resolution = ADC_RESOLUTION_16BIT;
     ac4:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     ac6:	2101      	movs	r1, #1
     ac8:	e012      	b.n	af0 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     aca:	2308      	movs	r3, #8
		resolution = ADC_RESOLUTION_16BIT;
     acc:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     ace:	2100      	movs	r1, #0
     ad0:	e00e      	b.n	af0 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     ad2:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_8BIT;
     ad4:	2430      	movs	r4, #48	; 0x30
	uint8_t adjres = 0;
     ad6:	2100      	movs	r1, #0
     ad8:	e00a      	b.n	af0 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     ada:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_10BIT;
     adc:	2420      	movs	r4, #32
	uint8_t adjres = 0;
     ade:	2100      	movs	r1, #0
     ae0:	e006      	b.n	af0 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     ae2:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_12BIT;
     ae4:	2400      	movs	r4, #0
	uint8_t adjres = 0;
     ae6:	2100      	movs	r1, #0
     ae8:	e002      	b.n	af0 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     aea:	2302      	movs	r3, #2
		resolution = ADC_RESOLUTION_16BIT;
     aec:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     aee:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     af0:	0109      	lsls	r1, r1, #4
     af2:	2270      	movs	r2, #112	; 0x70
     af4:	400a      	ands	r2, r1
     af6:	4313      	orrs	r3, r2
     af8:	4642      	mov	r2, r8
     afa:	7093      	strb	r3, [r2, #2]
	if (config->sample_length > 63) {
     afc:	7df3      	ldrb	r3, [r6, #23]
		return STATUS_ERR_INVALID_ARG;
     afe:	2017      	movs	r0, #23
	if (config->sample_length > 63) {
     b00:	2b3f      	cmp	r3, #63	; 0x3f
     b02:	d900      	bls.n	b06 <adc_init+0x1ee>
     b04:	e71b      	b.n	93e <adc_init+0x26>
		adc_module->SAMPCTRL.reg =
     b06:	70d3      	strb	r3, [r2, #3]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     b08:	683a      	ldr	r2, [r7, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     b0a:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     b0c:	b25b      	sxtb	r3, r3
     b0e:	2b00      	cmp	r3, #0
     b10:	dbfb      	blt.n	b0a <adc_init+0x1f2>
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
     b12:	7cf3      	ldrb	r3, [r6, #19]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     b14:	8872      	ldrh	r2, [r6, #2]
     b16:	4313      	orrs	r3, r2
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     b18:	2224      	movs	r2, #36	; 0x24
     b1a:	5cb2      	ldrb	r2, [r6, r2]
     b1c:	00d2      	lsls	r2, r2, #3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     b1e:	4313      	orrs	r3, r2
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
     b20:	7d32      	ldrb	r2, [r6, #20]
     b22:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     b24:	4313      	orrs	r3, r2
     b26:	7cb2      	ldrb	r2, [r6, #18]
     b28:	0052      	lsls	r2, r2, #1
     b2a:	4313      	orrs	r3, r2
     b2c:	4323      	orrs	r3, r4
	adc_module->CTRLB.reg =
     b2e:	4642      	mov	r2, r8
     b30:	8093      	strh	r3, [r2, #4]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     b32:	7e33      	ldrb	r3, [r6, #24]
     b34:	2b00      	cmp	r3, #0
     b36:	d020      	beq.n	b7a <adc_init+0x262>
		switch (resolution) {
     b38:	2c10      	cmp	r4, #16
     b3a:	d100      	bne.n	b3e <adc_init+0x226>
     b3c:	e0d9      	b.n	cf2 <adc_init+0x3da>
     b3e:	d800      	bhi.n	b42 <adc_init+0x22a>
     b40:	e098      	b.n	c74 <adc_init+0x35c>
     b42:	2c20      	cmp	r4, #32
     b44:	d100      	bne.n	b48 <adc_init+0x230>
     b46:	e0b6      	b.n	cb6 <adc_init+0x39e>
     b48:	2c30      	cmp	r4, #48	; 0x30
     b4a:	d116      	bne.n	b7a <adc_init+0x262>
			if (config->differential_mode &&
     b4c:	7cf2      	ldrb	r2, [r6, #19]
     b4e:	2a00      	cmp	r2, #0
     b50:	d00a      	beq.n	b68 <adc_init+0x250>
					(config->window.window_lower_value > 127 ||
     b52:	69f2      	ldr	r2, [r6, #28]
     b54:	3280      	adds	r2, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
     b56:	2017      	movs	r0, #23
			if (config->differential_mode &&
     b58:	2aff      	cmp	r2, #255	; 0xff
     b5a:	d900      	bls.n	b5e <adc_init+0x246>
     b5c:	e6ef      	b.n	93e <adc_init+0x26>
					config->window.window_lower_value < -128 ||
     b5e:	6a32      	ldr	r2, [r6, #32]
     b60:	3280      	adds	r2, #128	; 0x80
     b62:	2aff      	cmp	r2, #255	; 0xff
     b64:	d900      	bls.n	b68 <adc_init+0x250>
     b66:	e6ea      	b.n	93e <adc_init+0x26>
				return STATUS_ERR_INVALID_ARG;
     b68:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 255 ||
     b6a:	69f2      	ldr	r2, [r6, #28]
     b6c:	2aff      	cmp	r2, #255	; 0xff
     b6e:	dd00      	ble.n	b72 <adc_init+0x25a>
     b70:	e6e5      	b.n	93e <adc_init+0x26>
     b72:	6a32      	ldr	r2, [r6, #32]
     b74:	2aff      	cmp	r2, #255	; 0xff
     b76:	dd00      	ble.n	b7a <adc_init+0x262>
     b78:	e6e1      	b.n	93e <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     b7a:	6839      	ldr	r1, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     b7c:	7e4a      	ldrb	r2, [r1, #25]
	while (adc_is_syncing(module_inst)) {
     b7e:	b252      	sxtb	r2, r2
     b80:	2a00      	cmp	r2, #0
     b82:	dbfb      	blt.n	b7c <adc_init+0x264>
	adc_module->WINCTRL.reg = config->window.window_mode;
     b84:	4642      	mov	r2, r8
     b86:	7213      	strb	r3, [r2, #8]
	Adc *const adc_module = module_inst->hw;
     b88:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     b8a:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     b8c:	b25b      	sxtb	r3, r3
     b8e:	2b00      	cmp	r3, #0
     b90:	dbfb      	blt.n	b8a <adc_init+0x272>
	adc_module->WINLT.reg =
     b92:	8bb3      	ldrh	r3, [r6, #28]
     b94:	4642      	mov	r2, r8
     b96:	8393      	strh	r3, [r2, #28]
	Adc *const adc_module = module_inst->hw;
     b98:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     b9a:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     b9c:	b25b      	sxtb	r3, r3
     b9e:	2b00      	cmp	r3, #0
     ba0:	dbfb      	blt.n	b9a <adc_init+0x282>
	adc_module->WINUT.reg = config->window.window_upper_value <<
     ba2:	8c33      	ldrh	r3, [r6, #32]
     ba4:	4642      	mov	r2, r8
     ba6:	8413      	strh	r3, [r2, #32]
	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
     ba8:	232c      	movs	r3, #44	; 0x2c
     baa:	5cf3      	ldrb	r3, [r6, r3]
	if (inputs_to_scan > 0) {
     bac:	2b00      	cmp	r3, #0
     bae:	d005      	beq.n	bbc <adc_init+0x2a4>
		inputs_to_scan--;
     bb0:	3b01      	subs	r3, #1
     bb2:	b2db      	uxtb	r3, r3
		return STATUS_ERR_INVALID_ARG;
     bb4:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     bb6:	2b0f      	cmp	r3, #15
     bb8:	d900      	bls.n	bbc <adc_init+0x2a4>
     bba:	e6c0      	b.n	93e <adc_init+0x26>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
     bbc:	222b      	movs	r2, #43	; 0x2b
     bbe:	5cb1      	ldrb	r1, [r6, r2]
		return STATUS_ERR_INVALID_ARG;
     bc0:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     bc2:	290f      	cmp	r1, #15
     bc4:	d900      	bls.n	bc8 <adc_init+0x2b0>
     bc6:	e6ba      	b.n	93e <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     bc8:	6838      	ldr	r0, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     bca:	7e42      	ldrb	r2, [r0, #25]
	while (adc_is_syncing(module_inst)) {
     bcc:	b252      	sxtb	r2, r2
     bce:	2a00      	cmp	r2, #0
     bd0:	dbfb      	blt.n	bca <adc_init+0x2b2>
			config->negative_input |
     bd2:	89f2      	ldrh	r2, [r6, #14]
			config->positive_input;
     bd4:	7b30      	ldrb	r0, [r6, #12]
			config->negative_input |
     bd6:	4302      	orrs	r2, r0
     bd8:	68b0      	ldr	r0, [r6, #8]
     bda:	4302      	orrs	r2, r0
			(config->pin_scan.offset_start_scan <<
     bdc:	0509      	lsls	r1, r1, #20
			config->negative_input |
     bde:	430a      	orrs	r2, r1
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     be0:	041b      	lsls	r3, r3, #16
			config->negative_input |
     be2:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
     be4:	4642      	mov	r2, r8
     be6:	6113      	str	r3, [r2, #16]
	adc_module->EVCTRL.reg = config->event_action;
     be8:	232a      	movs	r3, #42	; 0x2a
     bea:	5cf3      	ldrb	r3, [r6, r3]
     bec:	7513      	strb	r3, [r2, #20]
	adc_module->INTENCLR.reg =
     bee:	230f      	movs	r3, #15
     bf0:	7593      	strb	r3, [r2, #22]
	if (config->correction.correction_enable){
     bf2:	3315      	adds	r3, #21
     bf4:	5cf3      	ldrb	r3, [r6, r3]
     bf6:	2b00      	cmp	r3, #0
     bf8:	d012      	beq.n	c20 <adc_init+0x308>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     bfa:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
     bfc:	4a1a      	ldr	r2, [pc, #104]	; (c68 <adc_init+0x350>)
			return STATUS_ERR_INVALID_ARG;
     bfe:	2017      	movs	r0, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     c00:	4293      	cmp	r3, r2
     c02:	d900      	bls.n	c06 <adc_init+0x2ee>
     c04:	e69b      	b.n	93e <adc_init+0x26>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     c06:	4642      	mov	r2, r8
     c08:	8493      	strh	r3, [r2, #36]	; 0x24
		if (config->correction.offset_correction > 2047 ||
     c0a:	8d32      	ldrh	r2, [r6, #40]	; 0x28
     c0c:	2380      	movs	r3, #128	; 0x80
     c0e:	011b      	lsls	r3, r3, #4
     c10:	18d3      	adds	r3, r2, r3
     c12:	4915      	ldr	r1, [pc, #84]	; (c68 <adc_init+0x350>)
     c14:	b29b      	uxth	r3, r3
     c16:	428b      	cmp	r3, r1
     c18:	d900      	bls.n	c1c <adc_init+0x304>
     c1a:	e690      	b.n	93e <adc_init+0x26>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     c1c:	4643      	mov	r3, r8
     c1e:	84da      	strh	r2, [r3, #38]	; 0x26
			ADC_CALIB_BIAS_CAL(
     c20:	4b12      	ldr	r3, [pc, #72]	; (c6c <adc_init+0x354>)
     c22:	681b      	ldr	r3, [r3, #0]
     c24:	015b      	lsls	r3, r3, #5
     c26:	22e0      	movs	r2, #224	; 0xe0
     c28:	00d2      	lsls	r2, r2, #3
     c2a:	4013      	ands	r3, r2
			ADC_CALIB_LINEARITY_CAL(
     c2c:	4a10      	ldr	r2, [pc, #64]	; (c70 <adc_init+0x358>)
     c2e:	6851      	ldr	r1, [r2, #4]
     c30:	0149      	lsls	r1, r1, #5
     c32:	6812      	ldr	r2, [r2, #0]
     c34:	0ed2      	lsrs	r2, r2, #27
     c36:	430a      	orrs	r2, r1
     c38:	b2d2      	uxtb	r2, r2
			) |
     c3a:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
     c3c:	4642      	mov	r2, r8
     c3e:	8513      	strh	r3, [r2, #40]	; 0x28
	return STATUS_OK;
     c40:	2000      	movs	r0, #0
     c42:	e67c      	b.n	93e <adc_init+0x26>
     c44:	40000400 	.word	0x40000400
     c48:	40000800 	.word	0x40000800
     c4c:	200002c0 	.word	0x200002c0
     c50:	00001e99 	.word	0x00001e99
     c54:	00001e0d 	.word	0x00001e0d
     c58:	000039e9 	.word	0x000039e9
     c5c:	000051f0 	.word	0x000051f0
     c60:	00001f91 	.word	0x00001f91
     c64:	0000511c 	.word	0x0000511c
     c68:	00000fff 	.word	0x00000fff
     c6c:	00806024 	.word	0x00806024
     c70:	00806020 	.word	0x00806020
		switch (resolution) {
     c74:	2c00      	cmp	r4, #0
     c76:	d000      	beq.n	c7a <adc_init+0x362>
     c78:	e77f      	b.n	b7a <adc_init+0x262>
			if (config->differential_mode &&
     c7a:	7cf2      	ldrb	r2, [r6, #19]
     c7c:	2a00      	cmp	r2, #0
     c7e:	d00f      	beq.n	ca0 <adc_init+0x388>
					(config->window.window_lower_value > 2047 ||
     c80:	69f2      	ldr	r2, [r6, #28]
     c82:	2180      	movs	r1, #128	; 0x80
     c84:	0109      	lsls	r1, r1, #4
     c86:	468c      	mov	ip, r1
     c88:	4462      	add	r2, ip
			if (config->differential_mode &&
     c8a:	492a      	ldr	r1, [pc, #168]	; (d34 <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
     c8c:	2017      	movs	r0, #23
			if (config->differential_mode &&
     c8e:	428a      	cmp	r2, r1
     c90:	d900      	bls.n	c94 <adc_init+0x37c>
     c92:	e654      	b.n	93e <adc_init+0x26>
					config->window.window_lower_value < -2048 ||
     c94:	6a32      	ldr	r2, [r6, #32]
     c96:	4462      	add	r2, ip
     c98:	4926      	ldr	r1, [pc, #152]	; (d34 <adc_init+0x41c>)
     c9a:	428a      	cmp	r2, r1
     c9c:	d900      	bls.n	ca0 <adc_init+0x388>
     c9e:	e64e      	b.n	93e <adc_init+0x26>
			} else if (config->window.window_lower_value > 4095 ||
     ca0:	4a24      	ldr	r2, [pc, #144]	; (d34 <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
     ca2:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
     ca4:	69f1      	ldr	r1, [r6, #28]
     ca6:	4291      	cmp	r1, r2
     ca8:	dd00      	ble.n	cac <adc_init+0x394>
     caa:	e648      	b.n	93e <adc_init+0x26>
     cac:	6a31      	ldr	r1, [r6, #32]
     cae:	4291      	cmp	r1, r2
     cb0:	dd00      	ble.n	cb4 <adc_init+0x39c>
     cb2:	e644      	b.n	93e <adc_init+0x26>
     cb4:	e761      	b.n	b7a <adc_init+0x262>
			if (config->differential_mode &&
     cb6:	7cf2      	ldrb	r2, [r6, #19]
     cb8:	2a00      	cmp	r2, #0
     cba:	d00f      	beq.n	cdc <adc_init+0x3c4>
					(config->window.window_lower_value > 511 ||
     cbc:	69f2      	ldr	r2, [r6, #28]
     cbe:	2180      	movs	r1, #128	; 0x80
     cc0:	0089      	lsls	r1, r1, #2
     cc2:	468c      	mov	ip, r1
     cc4:	4462      	add	r2, ip
			if (config->differential_mode &&
     cc6:	491c      	ldr	r1, [pc, #112]	; (d38 <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
     cc8:	2017      	movs	r0, #23
			if (config->differential_mode &&
     cca:	428a      	cmp	r2, r1
     ccc:	d900      	bls.n	cd0 <adc_init+0x3b8>
     cce:	e636      	b.n	93e <adc_init+0x26>
					config->window.window_lower_value < -512 ||
     cd0:	6a32      	ldr	r2, [r6, #32]
     cd2:	4462      	add	r2, ip
     cd4:	4918      	ldr	r1, [pc, #96]	; (d38 <adc_init+0x420>)
     cd6:	428a      	cmp	r2, r1
     cd8:	d900      	bls.n	cdc <adc_init+0x3c4>
     cda:	e630      	b.n	93e <adc_init+0x26>
			} else if (config->window.window_lower_value > 1023 ||
     cdc:	4a16      	ldr	r2, [pc, #88]	; (d38 <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
     cde:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
     ce0:	69f1      	ldr	r1, [r6, #28]
     ce2:	4291      	cmp	r1, r2
     ce4:	dd00      	ble.n	ce8 <adc_init+0x3d0>
     ce6:	e62a      	b.n	93e <adc_init+0x26>
     ce8:	6a31      	ldr	r1, [r6, #32]
     cea:	4291      	cmp	r1, r2
     cec:	dd00      	ble.n	cf0 <adc_init+0x3d8>
     cee:	e626      	b.n	93e <adc_init+0x26>
     cf0:	e743      	b.n	b7a <adc_init+0x262>
			if (config->differential_mode &&
     cf2:	7cf2      	ldrb	r2, [r6, #19]
     cf4:	2a00      	cmp	r2, #0
     cf6:	d00f      	beq.n	d18 <adc_init+0x400>
					(config->window.window_lower_value > 32767 ||
     cf8:	69f2      	ldr	r2, [r6, #28]
     cfa:	2180      	movs	r1, #128	; 0x80
     cfc:	0209      	lsls	r1, r1, #8
     cfe:	468c      	mov	ip, r1
     d00:	4462      	add	r2, ip
			if (config->differential_mode &&
     d02:	490e      	ldr	r1, [pc, #56]	; (d3c <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
     d04:	2017      	movs	r0, #23
			if (config->differential_mode &&
     d06:	428a      	cmp	r2, r1
     d08:	d900      	bls.n	d0c <adc_init+0x3f4>
     d0a:	e618      	b.n	93e <adc_init+0x26>
					config->window.window_lower_value < -32768 ||
     d0c:	6a32      	ldr	r2, [r6, #32]
     d0e:	4462      	add	r2, ip
     d10:	490a      	ldr	r1, [pc, #40]	; (d3c <adc_init+0x424>)
     d12:	428a      	cmp	r2, r1
     d14:	d900      	bls.n	d18 <adc_init+0x400>
     d16:	e612      	b.n	93e <adc_init+0x26>
			} else if (config->window.window_lower_value > 65535 ||
     d18:	4a08      	ldr	r2, [pc, #32]	; (d3c <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
     d1a:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
     d1c:	69f1      	ldr	r1, [r6, #28]
     d1e:	4291      	cmp	r1, r2
     d20:	dd00      	ble.n	d24 <adc_init+0x40c>
     d22:	e60c      	b.n	93e <adc_init+0x26>
     d24:	6a31      	ldr	r1, [r6, #32]
     d26:	4291      	cmp	r1, r2
     d28:	dd00      	ble.n	d2c <adc_init+0x414>
     d2a:	e608      	b.n	93e <adc_init+0x26>
     d2c:	e725      	b.n	b7a <adc_init+0x262>
		return STATUS_ERR_INVALID_ARG;
     d2e:	2017      	movs	r0, #23
     d30:	e605      	b.n	93e <adc_init+0x26>
     d32:	46c0      	nop			; (mov r8, r8)
     d34:	00000fff 	.word	0x00000fff
     d38:	000003ff 	.word	0x000003ff
     d3c:	0000ffff 	.word	0x0000ffff

00000d40 <ADC_Handler>:
	}
}

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
     d40:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
     d42:	4b2f      	ldr	r3, [pc, #188]	; (e00 <ADC_Handler+0xc0>)
     d44:	681d      	ldr	r5, [r3, #0]
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
     d46:	682b      	ldr	r3, [r5, #0]
     d48:	7e1a      	ldrb	r2, [r3, #24]
     d4a:	7ddc      	ldrb	r4, [r3, #23]
     d4c:	4014      	ands	r4, r2
	if (flags & ADC_INTFLAG_RESRDY) {
     d4e:	07e2      	lsls	r2, r4, #31
     d50:	d416      	bmi.n	d80 <ADC_Handler+0x40>
	if (flags & ADC_INTFLAG_WINMON) {
     d52:	0763      	lsls	r3, r4, #29
     d54:	d508      	bpl.n	d68 <ADC_Handler+0x28>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     d56:	2304      	movs	r3, #4
     d58:	682a      	ldr	r2, [r5, #0]
     d5a:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     d5c:	7eeb      	ldrb	r3, [r5, #27]
     d5e:	079b      	lsls	r3, r3, #30
     d60:	d502      	bpl.n	d68 <ADC_Handler+0x28>
     d62:	7eab      	ldrb	r3, [r5, #26]
     d64:	079b      	lsls	r3, r3, #30
     d66:	d442      	bmi.n	dee <ADC_Handler+0xae>
	if (flags & ADC_INTFLAG_OVERRUN) {
     d68:	07a3      	lsls	r3, r4, #30
     d6a:	d508      	bpl.n	d7e <ADC_Handler+0x3e>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     d6c:	2302      	movs	r3, #2
     d6e:	682a      	ldr	r2, [r5, #0]
     d70:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     d72:	7eeb      	ldrb	r3, [r5, #27]
     d74:	075b      	lsls	r3, r3, #29
     d76:	d502      	bpl.n	d7e <ADC_Handler+0x3e>
     d78:	7eab      	ldrb	r3, [r5, #26]
     d7a:	075b      	lsls	r3, r3, #29
     d7c:	d43b      	bmi.n	df6 <ADC_Handler+0xb6>
	_adc_interrupt_handler(0);
}
     d7e:	bd70      	pop	{r4, r5, r6, pc}
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     d80:	2201      	movs	r2, #1
     d82:	761a      	strb	r2, [r3, #24]
	Adc *const adc_module = module_inst->hw;
     d84:	682a      	ldr	r2, [r5, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     d86:	7e53      	ldrb	r3, [r2, #25]
		while (adc_is_syncing(module)) {
     d88:	b25b      	sxtb	r3, r3
     d8a:	2b00      	cmp	r3, #0
     d8c:	dbfb      	blt.n	d86 <ADC_Handler+0x46>
		*(module->job_buffer++) = module->hw->RESULT.reg;
     d8e:	6969      	ldr	r1, [r5, #20]
     d90:	1c8b      	adds	r3, r1, #2
     d92:	616b      	str	r3, [r5, #20]
     d94:	8b53      	ldrh	r3, [r2, #26]
     d96:	b29b      	uxth	r3, r3
     d98:	800b      	strh	r3, [r1, #0]
		if (--module->remaining_conversions > 0) {
     d9a:	8b2b      	ldrh	r3, [r5, #24]
     d9c:	3b01      	subs	r3, #1
     d9e:	b29b      	uxth	r3, r3
     da0:	832b      	strh	r3, [r5, #24]
     da2:	2b00      	cmp	r3, #0
     da4:	d011      	beq.n	dca <ADC_Handler+0x8a>
			if (module->software_trigger == true) {
     da6:	7f6b      	ldrb	r3, [r5, #29]
     da8:	2b00      	cmp	r3, #0
     daa:	d0d2      	beq.n	d52 <ADC_Handler+0x12>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     dac:	682a      	ldr	r2, [r5, #0]
     dae:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     db0:	b25b      	sxtb	r3, r3
     db2:	2b00      	cmp	r3, #0
     db4:	dbfb      	blt.n	dae <ADC_Handler+0x6e>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     db6:	7b13      	ldrb	r3, [r2, #12]
     db8:	2102      	movs	r1, #2
     dba:	430b      	orrs	r3, r1
     dbc:	7313      	strb	r3, [r2, #12]
	Adc *const adc_module = module_inst->hw;
     dbe:	682a      	ldr	r2, [r5, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     dc0:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     dc2:	b25b      	sxtb	r3, r3
     dc4:	2b00      	cmp	r3, #0
     dc6:	dbfb      	blt.n	dc0 <ADC_Handler+0x80>
     dc8:	e7c3      	b.n	d52 <ADC_Handler+0x12>
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     dca:	2301      	movs	r3, #1
     dcc:	682a      	ldr	r2, [r5, #0]
     dce:	7593      	strb	r3, [r2, #22]
			if (module->job_status == STATUS_BUSY) {
     dd0:	7f2b      	ldrb	r3, [r5, #28]
     dd2:	2b05      	cmp	r3, #5
     dd4:	d1bd      	bne.n	d52 <ADC_Handler+0x12>
				module->job_status = STATUS_OK;
     dd6:	2300      	movs	r3, #0
     dd8:	772b      	strb	r3, [r5, #28]
				if ((module->enabled_callback_mask &
     dda:	7eeb      	ldrb	r3, [r5, #27]
     ddc:	07db      	lsls	r3, r3, #31
     dde:	d5b8      	bpl.n	d52 <ADC_Handler+0x12>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
     de0:	7eab      	ldrb	r3, [r5, #26]
     de2:	07db      	lsls	r3, r3, #31
     de4:	d5b5      	bpl.n	d52 <ADC_Handler+0x12>
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     de6:	0028      	movs	r0, r5
     de8:	68ab      	ldr	r3, [r5, #8]
     dea:	4798      	blx	r3
     dec:	e7b1      	b.n	d52 <ADC_Handler+0x12>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     dee:	0028      	movs	r0, r5
     df0:	68eb      	ldr	r3, [r5, #12]
     df2:	4798      	blx	r3
     df4:	e7b8      	b.n	d68 <ADC_Handler+0x28>
			(module->callback[ADC_CALLBACK_ERROR])(module);
     df6:	692b      	ldr	r3, [r5, #16]
     df8:	0028      	movs	r0, r5
     dfa:	4798      	blx	r3
}
     dfc:	e7bf      	b.n	d7e <ADC_Handler+0x3e>
     dfe:	46c0      	nop			; (mov r8, r8)
     e00:	200002c0 	.word	0x200002c0

00000e04 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     e04:	b500      	push	{lr}
     e06:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     e08:	ab01      	add	r3, sp, #4
     e0a:	2280      	movs	r2, #128	; 0x80
     e0c:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     e0e:	780a      	ldrb	r2, [r1, #0]
     e10:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     e12:	784a      	ldrb	r2, [r1, #1]
     e14:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     e16:	788a      	ldrb	r2, [r1, #2]
     e18:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     e1a:	0019      	movs	r1, r3
     e1c:	4b01      	ldr	r3, [pc, #4]	; (e24 <port_pin_set_config+0x20>)
     e1e:	4798      	blx	r3
}
     e20:	b003      	add	sp, #12
     e22:	bd00      	pop	{pc}
     e24:	00001f91 	.word	0x00001f91

00000e28 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     e28:	b5f0      	push	{r4, r5, r6, r7, lr}
     e2a:	46de      	mov	lr, fp
     e2c:	4657      	mov	r7, sl
     e2e:	464e      	mov	r6, r9
     e30:	4645      	mov	r5, r8
     e32:	b5e0      	push	{r5, r6, r7, lr}
     e34:	b087      	sub	sp, #28
     e36:	4680      	mov	r8, r0
     e38:	9104      	str	r1, [sp, #16]
     e3a:	0016      	movs	r6, r2
     e3c:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     e3e:	2200      	movs	r2, #0
     e40:	2300      	movs	r3, #0
     e42:	2100      	movs	r1, #0
     e44:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     e46:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     e48:	2001      	movs	r0, #1
     e4a:	0021      	movs	r1, r4
     e4c:	9600      	str	r6, [sp, #0]
     e4e:	9701      	str	r7, [sp, #4]
     e50:	465c      	mov	r4, fp
     e52:	9403      	str	r4, [sp, #12]
     e54:	4644      	mov	r4, r8
     e56:	9405      	str	r4, [sp, #20]
     e58:	e013      	b.n	e82 <long_division+0x5a>
     e5a:	2420      	movs	r4, #32
     e5c:	1a64      	subs	r4, r4, r1
     e5e:	0005      	movs	r5, r0
     e60:	40e5      	lsrs	r5, r4
     e62:	46a8      	mov	r8, r5
     e64:	e014      	b.n	e90 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     e66:	9c00      	ldr	r4, [sp, #0]
     e68:	9d01      	ldr	r5, [sp, #4]
     e6a:	1b12      	subs	r2, r2, r4
     e6c:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     e6e:	465c      	mov	r4, fp
     e70:	464d      	mov	r5, r9
     e72:	432c      	orrs	r4, r5
     e74:	46a3      	mov	fp, r4
     e76:	9c03      	ldr	r4, [sp, #12]
     e78:	4645      	mov	r5, r8
     e7a:	432c      	orrs	r4, r5
     e7c:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     e7e:	3901      	subs	r1, #1
     e80:	d325      	bcc.n	ece <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     e82:	2420      	movs	r4, #32
     e84:	4264      	negs	r4, r4
     e86:	190c      	adds	r4, r1, r4
     e88:	d4e7      	bmi.n	e5a <long_division+0x32>
     e8a:	0005      	movs	r5, r0
     e8c:	40a5      	lsls	r5, r4
     e8e:	46a8      	mov	r8, r5
     e90:	0004      	movs	r4, r0
     e92:	408c      	lsls	r4, r1
     e94:	46a1      	mov	r9, r4
		r = r << 1;
     e96:	1892      	adds	r2, r2, r2
     e98:	415b      	adcs	r3, r3
     e9a:	0014      	movs	r4, r2
     e9c:	001d      	movs	r5, r3
		if (n & bit_shift) {
     e9e:	9e05      	ldr	r6, [sp, #20]
     ea0:	464f      	mov	r7, r9
     ea2:	403e      	ands	r6, r7
     ea4:	46b4      	mov	ip, r6
     ea6:	9e04      	ldr	r6, [sp, #16]
     ea8:	4647      	mov	r7, r8
     eaa:	403e      	ands	r6, r7
     eac:	46b2      	mov	sl, r6
     eae:	4666      	mov	r6, ip
     eb0:	4657      	mov	r7, sl
     eb2:	433e      	orrs	r6, r7
     eb4:	d003      	beq.n	ebe <long_division+0x96>
			r |= 0x01;
     eb6:	0006      	movs	r6, r0
     eb8:	4326      	orrs	r6, r4
     eba:	0032      	movs	r2, r6
     ebc:	002b      	movs	r3, r5
		if (r >= d) {
     ebe:	9c00      	ldr	r4, [sp, #0]
     ec0:	9d01      	ldr	r5, [sp, #4]
     ec2:	429d      	cmp	r5, r3
     ec4:	d8db      	bhi.n	e7e <long_division+0x56>
     ec6:	d1ce      	bne.n	e66 <long_division+0x3e>
     ec8:	4294      	cmp	r4, r2
     eca:	d8d8      	bhi.n	e7e <long_division+0x56>
     ecc:	e7cb      	b.n	e66 <long_division+0x3e>
     ece:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     ed0:	4658      	mov	r0, fp
     ed2:	0019      	movs	r1, r3
     ed4:	b007      	add	sp, #28
     ed6:	bc3c      	pop	{r2, r3, r4, r5}
     ed8:	4690      	mov	r8, r2
     eda:	4699      	mov	r9, r3
     edc:	46a2      	mov	sl, r4
     ede:	46ab      	mov	fp, r5
     ee0:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000ee2 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     ee2:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     ee4:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     ee6:	2340      	movs	r3, #64	; 0x40
     ee8:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     eea:	4281      	cmp	r1, r0
     eec:	d202      	bcs.n	ef4 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     eee:	0018      	movs	r0, r3
     ef0:	bd10      	pop	{r4, pc}
		baud_calculated++;
     ef2:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     ef4:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     ef6:	1c63      	adds	r3, r4, #1
     ef8:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     efa:	4288      	cmp	r0, r1
     efc:	d9f9      	bls.n	ef2 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     efe:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     f00:	2cff      	cmp	r4, #255	; 0xff
     f02:	d8f4      	bhi.n	eee <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     f04:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     f06:	2300      	movs	r3, #0
     f08:	e7f1      	b.n	eee <_sercom_get_sync_baud_val+0xc>
	...

00000f0c <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
     f0e:	b083      	sub	sp, #12
     f10:	000f      	movs	r7, r1
     f12:	0016      	movs	r6, r2
     f14:	aa08      	add	r2, sp, #32
     f16:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     f18:	0004      	movs	r4, r0
     f1a:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     f1c:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     f1e:	42bc      	cmp	r4, r7
     f20:	d902      	bls.n	f28 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     f22:	0010      	movs	r0, r2
     f24:	b003      	add	sp, #12
     f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     f28:	2b00      	cmp	r3, #0
     f2a:	d114      	bne.n	f56 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     f2c:	0002      	movs	r2, r0
     f2e:	0008      	movs	r0, r1
     f30:	2100      	movs	r1, #0
     f32:	4c19      	ldr	r4, [pc, #100]	; (f98 <_sercom_get_async_baud_val+0x8c>)
     f34:	47a0      	blx	r4
     f36:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     f38:	003a      	movs	r2, r7
     f3a:	2300      	movs	r3, #0
     f3c:	2000      	movs	r0, #0
     f3e:	4c17      	ldr	r4, [pc, #92]	; (f9c <_sercom_get_async_baud_val+0x90>)
     f40:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     f42:	2200      	movs	r2, #0
     f44:	2301      	movs	r3, #1
     f46:	1a12      	subs	r2, r2, r0
     f48:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     f4a:	0c12      	lsrs	r2, r2, #16
     f4c:	041b      	lsls	r3, r3, #16
     f4e:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     f50:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     f52:	2200      	movs	r2, #0
     f54:	e7e5      	b.n	f22 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     f56:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     f58:	2b01      	cmp	r3, #1
     f5a:	d1f9      	bne.n	f50 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     f5c:	000a      	movs	r2, r1
     f5e:	2300      	movs	r3, #0
     f60:	2100      	movs	r1, #0
     f62:	4c0d      	ldr	r4, [pc, #52]	; (f98 <_sercom_get_async_baud_val+0x8c>)
     f64:	47a0      	blx	r4
     f66:	0002      	movs	r2, r0
     f68:	000b      	movs	r3, r1
     f6a:	9200      	str	r2, [sp, #0]
     f6c:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     f6e:	0038      	movs	r0, r7
     f70:	2100      	movs	r1, #0
     f72:	4c0a      	ldr	r4, [pc, #40]	; (f9c <_sercom_get_async_baud_val+0x90>)
     f74:	47a0      	blx	r4
     f76:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     f78:	2380      	movs	r3, #128	; 0x80
     f7a:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     f7c:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     f7e:	4298      	cmp	r0, r3
     f80:	d8cf      	bhi.n	f22 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     f82:	0f79      	lsrs	r1, r7, #29
     f84:	00f8      	lsls	r0, r7, #3
     f86:	9a00      	ldr	r2, [sp, #0]
     f88:	9b01      	ldr	r3, [sp, #4]
     f8a:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     f8c:	00ea      	lsls	r2, r5, #3
     f8e:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     f90:	b2d2      	uxtb	r2, r2
     f92:	0352      	lsls	r2, r2, #13
     f94:	432a      	orrs	r2, r5
     f96:	e7db      	b.n	f50 <_sercom_get_async_baud_val+0x44>
     f98:	00003939 	.word	0x00003939
     f9c:	00000e29 	.word	0x00000e29

00000fa0 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     fa0:	b510      	push	{r4, lr}
     fa2:	b082      	sub	sp, #8
     fa4:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     fa6:	4b0e      	ldr	r3, [pc, #56]	; (fe0 <sercom_set_gclk_generator+0x40>)
     fa8:	781b      	ldrb	r3, [r3, #0]
     faa:	2b00      	cmp	r3, #0
     fac:	d007      	beq.n	fbe <sercom_set_gclk_generator+0x1e>
     fae:	2900      	cmp	r1, #0
     fb0:	d105      	bne.n	fbe <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     fb2:	4b0b      	ldr	r3, [pc, #44]	; (fe0 <sercom_set_gclk_generator+0x40>)
     fb4:	785b      	ldrb	r3, [r3, #1]
     fb6:	4283      	cmp	r3, r0
     fb8:	d010      	beq.n	fdc <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     fba:	201d      	movs	r0, #29
     fbc:	e00c      	b.n	fd8 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     fbe:	a901      	add	r1, sp, #4
     fc0:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     fc2:	2013      	movs	r0, #19
     fc4:	4b07      	ldr	r3, [pc, #28]	; (fe4 <sercom_set_gclk_generator+0x44>)
     fc6:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     fc8:	2013      	movs	r0, #19
     fca:	4b07      	ldr	r3, [pc, #28]	; (fe8 <sercom_set_gclk_generator+0x48>)
     fcc:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     fce:	4b04      	ldr	r3, [pc, #16]	; (fe0 <sercom_set_gclk_generator+0x40>)
     fd0:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     fd2:	2201      	movs	r2, #1
     fd4:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     fd6:	2000      	movs	r0, #0
}
     fd8:	b002      	add	sp, #8
     fda:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     fdc:	2000      	movs	r0, #0
     fde:	e7fb      	b.n	fd8 <sercom_set_gclk_generator+0x38>
     fe0:	2000026c 	.word	0x2000026c
     fe4:	00001e99 	.word	0x00001e99
     fe8:	00001e0d 	.word	0x00001e0d

00000fec <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     fec:	4b40      	ldr	r3, [pc, #256]	; (10f0 <_sercom_get_default_pad+0x104>)
     fee:	4298      	cmp	r0, r3
     ff0:	d031      	beq.n	1056 <_sercom_get_default_pad+0x6a>
     ff2:	d90a      	bls.n	100a <_sercom_get_default_pad+0x1e>
     ff4:	4b3f      	ldr	r3, [pc, #252]	; (10f4 <_sercom_get_default_pad+0x108>)
     ff6:	4298      	cmp	r0, r3
     ff8:	d04d      	beq.n	1096 <_sercom_get_default_pad+0xaa>
     ffa:	4b3f      	ldr	r3, [pc, #252]	; (10f8 <_sercom_get_default_pad+0x10c>)
     ffc:	4298      	cmp	r0, r3
     ffe:	d05a      	beq.n	10b6 <_sercom_get_default_pad+0xca>
    1000:	4b3e      	ldr	r3, [pc, #248]	; (10fc <_sercom_get_default_pad+0x110>)
    1002:	4298      	cmp	r0, r3
    1004:	d037      	beq.n	1076 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    1006:	2000      	movs	r0, #0
}
    1008:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    100a:	4b3d      	ldr	r3, [pc, #244]	; (1100 <_sercom_get_default_pad+0x114>)
    100c:	4298      	cmp	r0, r3
    100e:	d00c      	beq.n	102a <_sercom_get_default_pad+0x3e>
    1010:	4b3c      	ldr	r3, [pc, #240]	; (1104 <_sercom_get_default_pad+0x118>)
    1012:	4298      	cmp	r0, r3
    1014:	d1f7      	bne.n	1006 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1016:	2901      	cmp	r1, #1
    1018:	d017      	beq.n	104a <_sercom_get_default_pad+0x5e>
    101a:	2900      	cmp	r1, #0
    101c:	d05d      	beq.n	10da <_sercom_get_default_pad+0xee>
    101e:	2902      	cmp	r1, #2
    1020:	d015      	beq.n	104e <_sercom_get_default_pad+0x62>
    1022:	2903      	cmp	r1, #3
    1024:	d015      	beq.n	1052 <_sercom_get_default_pad+0x66>
	return 0;
    1026:	2000      	movs	r0, #0
    1028:	e7ee      	b.n	1008 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    102a:	2901      	cmp	r1, #1
    102c:	d007      	beq.n	103e <_sercom_get_default_pad+0x52>
    102e:	2900      	cmp	r1, #0
    1030:	d051      	beq.n	10d6 <_sercom_get_default_pad+0xea>
    1032:	2902      	cmp	r1, #2
    1034:	d005      	beq.n	1042 <_sercom_get_default_pad+0x56>
    1036:	2903      	cmp	r1, #3
    1038:	d005      	beq.n	1046 <_sercom_get_default_pad+0x5a>
	return 0;
    103a:	2000      	movs	r0, #0
    103c:	e7e4      	b.n	1008 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    103e:	4832      	ldr	r0, [pc, #200]	; (1108 <_sercom_get_default_pad+0x11c>)
    1040:	e7e2      	b.n	1008 <_sercom_get_default_pad+0x1c>
    1042:	4832      	ldr	r0, [pc, #200]	; (110c <_sercom_get_default_pad+0x120>)
    1044:	e7e0      	b.n	1008 <_sercom_get_default_pad+0x1c>
    1046:	4832      	ldr	r0, [pc, #200]	; (1110 <_sercom_get_default_pad+0x124>)
    1048:	e7de      	b.n	1008 <_sercom_get_default_pad+0x1c>
    104a:	4832      	ldr	r0, [pc, #200]	; (1114 <_sercom_get_default_pad+0x128>)
    104c:	e7dc      	b.n	1008 <_sercom_get_default_pad+0x1c>
    104e:	4832      	ldr	r0, [pc, #200]	; (1118 <_sercom_get_default_pad+0x12c>)
    1050:	e7da      	b.n	1008 <_sercom_get_default_pad+0x1c>
    1052:	4832      	ldr	r0, [pc, #200]	; (111c <_sercom_get_default_pad+0x130>)
    1054:	e7d8      	b.n	1008 <_sercom_get_default_pad+0x1c>
    1056:	2901      	cmp	r1, #1
    1058:	d007      	beq.n	106a <_sercom_get_default_pad+0x7e>
    105a:	2900      	cmp	r1, #0
    105c:	d03f      	beq.n	10de <_sercom_get_default_pad+0xf2>
    105e:	2902      	cmp	r1, #2
    1060:	d005      	beq.n	106e <_sercom_get_default_pad+0x82>
    1062:	2903      	cmp	r1, #3
    1064:	d005      	beq.n	1072 <_sercom_get_default_pad+0x86>
	return 0;
    1066:	2000      	movs	r0, #0
    1068:	e7ce      	b.n	1008 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    106a:	482d      	ldr	r0, [pc, #180]	; (1120 <_sercom_get_default_pad+0x134>)
    106c:	e7cc      	b.n	1008 <_sercom_get_default_pad+0x1c>
    106e:	482d      	ldr	r0, [pc, #180]	; (1124 <_sercom_get_default_pad+0x138>)
    1070:	e7ca      	b.n	1008 <_sercom_get_default_pad+0x1c>
    1072:	482d      	ldr	r0, [pc, #180]	; (1128 <_sercom_get_default_pad+0x13c>)
    1074:	e7c8      	b.n	1008 <_sercom_get_default_pad+0x1c>
    1076:	2901      	cmp	r1, #1
    1078:	d007      	beq.n	108a <_sercom_get_default_pad+0x9e>
    107a:	2900      	cmp	r1, #0
    107c:	d031      	beq.n	10e2 <_sercom_get_default_pad+0xf6>
    107e:	2902      	cmp	r1, #2
    1080:	d005      	beq.n	108e <_sercom_get_default_pad+0xa2>
    1082:	2903      	cmp	r1, #3
    1084:	d005      	beq.n	1092 <_sercom_get_default_pad+0xa6>
	return 0;
    1086:	2000      	movs	r0, #0
    1088:	e7be      	b.n	1008 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    108a:	4828      	ldr	r0, [pc, #160]	; (112c <_sercom_get_default_pad+0x140>)
    108c:	e7bc      	b.n	1008 <_sercom_get_default_pad+0x1c>
    108e:	4828      	ldr	r0, [pc, #160]	; (1130 <_sercom_get_default_pad+0x144>)
    1090:	e7ba      	b.n	1008 <_sercom_get_default_pad+0x1c>
    1092:	4828      	ldr	r0, [pc, #160]	; (1134 <_sercom_get_default_pad+0x148>)
    1094:	e7b8      	b.n	1008 <_sercom_get_default_pad+0x1c>
    1096:	2901      	cmp	r1, #1
    1098:	d007      	beq.n	10aa <_sercom_get_default_pad+0xbe>
    109a:	2900      	cmp	r1, #0
    109c:	d023      	beq.n	10e6 <_sercom_get_default_pad+0xfa>
    109e:	2902      	cmp	r1, #2
    10a0:	d005      	beq.n	10ae <_sercom_get_default_pad+0xc2>
    10a2:	2903      	cmp	r1, #3
    10a4:	d005      	beq.n	10b2 <_sercom_get_default_pad+0xc6>
	return 0;
    10a6:	2000      	movs	r0, #0
    10a8:	e7ae      	b.n	1008 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    10aa:	4823      	ldr	r0, [pc, #140]	; (1138 <_sercom_get_default_pad+0x14c>)
    10ac:	e7ac      	b.n	1008 <_sercom_get_default_pad+0x1c>
    10ae:	4823      	ldr	r0, [pc, #140]	; (113c <_sercom_get_default_pad+0x150>)
    10b0:	e7aa      	b.n	1008 <_sercom_get_default_pad+0x1c>
    10b2:	4823      	ldr	r0, [pc, #140]	; (1140 <_sercom_get_default_pad+0x154>)
    10b4:	e7a8      	b.n	1008 <_sercom_get_default_pad+0x1c>
    10b6:	2901      	cmp	r1, #1
    10b8:	d007      	beq.n	10ca <_sercom_get_default_pad+0xde>
    10ba:	2900      	cmp	r1, #0
    10bc:	d015      	beq.n	10ea <_sercom_get_default_pad+0xfe>
    10be:	2902      	cmp	r1, #2
    10c0:	d005      	beq.n	10ce <_sercom_get_default_pad+0xe2>
    10c2:	2903      	cmp	r1, #3
    10c4:	d005      	beq.n	10d2 <_sercom_get_default_pad+0xe6>
	return 0;
    10c6:	2000      	movs	r0, #0
    10c8:	e79e      	b.n	1008 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    10ca:	481e      	ldr	r0, [pc, #120]	; (1144 <_sercom_get_default_pad+0x158>)
    10cc:	e79c      	b.n	1008 <_sercom_get_default_pad+0x1c>
    10ce:	481e      	ldr	r0, [pc, #120]	; (1148 <_sercom_get_default_pad+0x15c>)
    10d0:	e79a      	b.n	1008 <_sercom_get_default_pad+0x1c>
    10d2:	481e      	ldr	r0, [pc, #120]	; (114c <_sercom_get_default_pad+0x160>)
    10d4:	e798      	b.n	1008 <_sercom_get_default_pad+0x1c>
    10d6:	481e      	ldr	r0, [pc, #120]	; (1150 <_sercom_get_default_pad+0x164>)
    10d8:	e796      	b.n	1008 <_sercom_get_default_pad+0x1c>
    10da:	2003      	movs	r0, #3
    10dc:	e794      	b.n	1008 <_sercom_get_default_pad+0x1c>
    10de:	481d      	ldr	r0, [pc, #116]	; (1154 <_sercom_get_default_pad+0x168>)
    10e0:	e792      	b.n	1008 <_sercom_get_default_pad+0x1c>
    10e2:	481d      	ldr	r0, [pc, #116]	; (1158 <_sercom_get_default_pad+0x16c>)
    10e4:	e790      	b.n	1008 <_sercom_get_default_pad+0x1c>
    10e6:	481d      	ldr	r0, [pc, #116]	; (115c <_sercom_get_default_pad+0x170>)
    10e8:	e78e      	b.n	1008 <_sercom_get_default_pad+0x1c>
    10ea:	481d      	ldr	r0, [pc, #116]	; (1160 <_sercom_get_default_pad+0x174>)
    10ec:	e78c      	b.n	1008 <_sercom_get_default_pad+0x1c>
    10ee:	46c0      	nop			; (mov r8, r8)
    10f0:	42001000 	.word	0x42001000
    10f4:	42001800 	.word	0x42001800
    10f8:	42001c00 	.word	0x42001c00
    10fc:	42001400 	.word	0x42001400
    1100:	42000800 	.word	0x42000800
    1104:	42000c00 	.word	0x42000c00
    1108:	00050003 	.word	0x00050003
    110c:	00060003 	.word	0x00060003
    1110:	00070003 	.word	0x00070003
    1114:	00010003 	.word	0x00010003
    1118:	001e0003 	.word	0x001e0003
    111c:	001f0003 	.word	0x001f0003
    1120:	00090003 	.word	0x00090003
    1124:	000a0003 	.word	0x000a0003
    1128:	000b0003 	.word	0x000b0003
    112c:	00110003 	.word	0x00110003
    1130:	00120003 	.word	0x00120003
    1134:	00130003 	.word	0x00130003
    1138:	000d0003 	.word	0x000d0003
    113c:	000e0003 	.word	0x000e0003
    1140:	000f0003 	.word	0x000f0003
    1144:	00170003 	.word	0x00170003
    1148:	00180003 	.word	0x00180003
    114c:	00190003 	.word	0x00190003
    1150:	00040003 	.word	0x00040003
    1154:	00080003 	.word	0x00080003
    1158:	00100003 	.word	0x00100003
    115c:	000c0003 	.word	0x000c0003
    1160:	00160003 	.word	0x00160003

00001164 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    1164:	b530      	push	{r4, r5, lr}
    1166:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    1168:	4b0b      	ldr	r3, [pc, #44]	; (1198 <_sercom_get_sercom_inst_index+0x34>)
    116a:	466a      	mov	r2, sp
    116c:	cb32      	ldmia	r3!, {r1, r4, r5}
    116e:	c232      	stmia	r2!, {r1, r4, r5}
    1170:	cb32      	ldmia	r3!, {r1, r4, r5}
    1172:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    1174:	9b00      	ldr	r3, [sp, #0]
    1176:	4283      	cmp	r3, r0
    1178:	d00b      	beq.n	1192 <_sercom_get_sercom_inst_index+0x2e>
    117a:	2301      	movs	r3, #1
    117c:	009a      	lsls	r2, r3, #2
    117e:	4669      	mov	r1, sp
    1180:	5852      	ldr	r2, [r2, r1]
    1182:	4282      	cmp	r2, r0
    1184:	d006      	beq.n	1194 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1186:	3301      	adds	r3, #1
    1188:	2b06      	cmp	r3, #6
    118a:	d1f7      	bne.n	117c <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    118c:	2000      	movs	r0, #0
}
    118e:	b007      	add	sp, #28
    1190:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1192:	2300      	movs	r3, #0
			return i;
    1194:	b2d8      	uxtb	r0, r3
    1196:	e7fa      	b.n	118e <_sercom_get_sercom_inst_index+0x2a>
    1198:	00005240 	.word	0x00005240

0000119c <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    119c:	4770      	bx	lr
	...

000011a0 <_sercom_set_handler>:


void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    11a0:	b5f0      	push	{r4, r5, r6, r7, lr}
	// Initialize handlers with default handler and device instances with 0 
	if (_handler_table_initialized == false) {
    11a2:	4b0a      	ldr	r3, [pc, #40]	; (11cc <_sercom_set_handler+0x2c>)
    11a4:	781b      	ldrb	r3, [r3, #0]
    11a6:	2b00      	cmp	r3, #0
    11a8:	d10c      	bne.n	11c4 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    11aa:	4f09      	ldr	r7, [pc, #36]	; (11d0 <_sercom_set_handler+0x30>)
    11ac:	4e09      	ldr	r6, [pc, #36]	; (11d4 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    11ae:	4d0a      	ldr	r5, [pc, #40]	; (11d8 <_sercom_set_handler+0x38>)
    11b0:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    11b2:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    11b4:	195a      	adds	r2, r3, r5
    11b6:	6014      	str	r4, [r2, #0]
    11b8:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    11ba:	2b18      	cmp	r3, #24
    11bc:	d1f9      	bne.n	11b2 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    11be:	2201      	movs	r2, #1
    11c0:	4b02      	ldr	r3, [pc, #8]	; (11cc <_sercom_set_handler+0x2c>)
    11c2:	701a      	strb	r2, [r3, #0]
	}

	// Save interrupt handler 
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    11c4:	0080      	lsls	r0, r0, #2
    11c6:	4b02      	ldr	r3, [pc, #8]	; (11d0 <_sercom_set_handler+0x30>)
    11c8:	50c1      	str	r1, [r0, r3]
}
    11ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    11cc:	2000026e 	.word	0x2000026e
    11d0:	20000270 	.word	0x20000270
    11d4:	0000119d 	.word	0x0000119d
    11d8:	200002c4 	.word	0x200002c4

000011dc <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    11dc:	b500      	push	{lr}
    11de:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    11e0:	2309      	movs	r3, #9
    11e2:	466a      	mov	r2, sp
    11e4:	7013      	strb	r3, [r2, #0]
    11e6:	3301      	adds	r3, #1
    11e8:	7053      	strb	r3, [r2, #1]
    11ea:	3301      	adds	r3, #1
    11ec:	7093      	strb	r3, [r2, #2]
    11ee:	3301      	adds	r3, #1
    11f0:	70d3      	strb	r3, [r2, #3]
    11f2:	3301      	adds	r3, #1
    11f4:	7113      	strb	r3, [r2, #4]
    11f6:	3301      	adds	r3, #1
    11f8:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    11fa:	4b03      	ldr	r3, [pc, #12]	; (1208 <_sercom_get_interrupt_vector+0x2c>)
    11fc:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    11fe:	466b      	mov	r3, sp
    1200:	5618      	ldrsb	r0, [r3, r0]
}
    1202:	b003      	add	sp, #12
    1204:	bd00      	pop	{pc}
    1206:	46c0      	nop			; (mov r8, r8)
    1208:	00001165 	.word	0x00001165

0000120c <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    120c:	b510      	push	{r4, lr}
    120e:	4b02      	ldr	r3, [pc, #8]	; (1218 <SERCOM0_Handler+0xc>)
    1210:	681b      	ldr	r3, [r3, #0]
    1212:	2000      	movs	r0, #0
    1214:	4798      	blx	r3
    1216:	bd10      	pop	{r4, pc}
    1218:	20000270 	.word	0x20000270

0000121c <SERCOM1_Handler>:
    121c:	b510      	push	{r4, lr}
    121e:	4b02      	ldr	r3, [pc, #8]	; (1228 <SERCOM1_Handler+0xc>)
    1220:	685b      	ldr	r3, [r3, #4]
    1222:	2001      	movs	r0, #1
    1224:	4798      	blx	r3
    1226:	bd10      	pop	{r4, pc}
    1228:	20000270 	.word	0x20000270

0000122c <SERCOM2_Handler>:
    122c:	b510      	push	{r4, lr}
    122e:	4b02      	ldr	r3, [pc, #8]	; (1238 <SERCOM2_Handler+0xc>)
    1230:	689b      	ldr	r3, [r3, #8]
    1232:	2002      	movs	r0, #2
    1234:	4798      	blx	r3
    1236:	bd10      	pop	{r4, pc}
    1238:	20000270 	.word	0x20000270

0000123c <SERCOM3_Handler>:
    123c:	b510      	push	{r4, lr}
    123e:	4b02      	ldr	r3, [pc, #8]	; (1248 <SERCOM3_Handler+0xc>)
    1240:	68db      	ldr	r3, [r3, #12]
    1242:	2003      	movs	r0, #3
    1244:	4798      	blx	r3
    1246:	bd10      	pop	{r4, pc}
    1248:	20000270 	.word	0x20000270

0000124c <SERCOM4_Handler>:
    124c:	b510      	push	{r4, lr}
    124e:	4b02      	ldr	r3, [pc, #8]	; (1258 <SERCOM4_Handler+0xc>)
    1250:	691b      	ldr	r3, [r3, #16]
    1252:	2004      	movs	r0, #4
    1254:	4798      	blx	r3
    1256:	bd10      	pop	{r4, pc}
    1258:	20000270 	.word	0x20000270

0000125c <SERCOM5_Handler>:
    125c:	b510      	push	{r4, lr}
    125e:	4b02      	ldr	r3, [pc, #8]	; (1268 <SERCOM5_Handler+0xc>)
    1260:	695b      	ldr	r3, [r3, #20]
    1262:	2005      	movs	r0, #5
    1264:	4798      	blx	r3
    1266:	bd10      	pop	{r4, pc}
    1268:	20000270 	.word	0x20000270

0000126c <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    126c:	b5f0      	push	{r4, r5, r6, r7, lr}
    126e:	46de      	mov	lr, fp
    1270:	4657      	mov	r7, sl
    1272:	464e      	mov	r6, r9
    1274:	4645      	mov	r5, r8
    1276:	b5e0      	push	{r5, r6, r7, lr}
    1278:	b091      	sub	sp, #68	; 0x44
    127a:	0005      	movs	r5, r0
    127c:	000c      	movs	r4, r1
    127e:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    1280:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1282:	0008      	movs	r0, r1
    1284:	4bba      	ldr	r3, [pc, #744]	; (1570 <usart_init+0x304>)
    1286:	4798      	blx	r3
    1288:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    128a:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    128c:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    128e:	07db      	lsls	r3, r3, #31
    1290:	d506      	bpl.n	12a0 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    1292:	b011      	add	sp, #68	; 0x44
    1294:	bc3c      	pop	{r2, r3, r4, r5}
    1296:	4690      	mov	r8, r2
    1298:	4699      	mov	r9, r3
    129a:	46a2      	mov	sl, r4
    129c:	46ab      	mov	fp, r5
    129e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    12a0:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    12a2:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    12a4:	079b      	lsls	r3, r3, #30
    12a6:	d4f4      	bmi.n	1292 <usart_init+0x26>
    12a8:	49b2      	ldr	r1, [pc, #712]	; (1574 <usart_init+0x308>)
    12aa:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    12ac:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    12ae:	2301      	movs	r3, #1
    12b0:	40bb      	lsls	r3, r7
    12b2:	4303      	orrs	r3, r0
    12b4:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    12b6:	a90f      	add	r1, sp, #60	; 0x3c
    12b8:	272d      	movs	r7, #45	; 0x2d
    12ba:	5df3      	ldrb	r3, [r6, r7]
    12bc:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    12be:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    12c0:	b2d3      	uxtb	r3, r2
    12c2:	9302      	str	r3, [sp, #8]
    12c4:	0018      	movs	r0, r3
    12c6:	4bac      	ldr	r3, [pc, #688]	; (1578 <usart_init+0x30c>)
    12c8:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    12ca:	9802      	ldr	r0, [sp, #8]
    12cc:	4bab      	ldr	r3, [pc, #684]	; (157c <usart_init+0x310>)
    12ce:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    12d0:	5df0      	ldrb	r0, [r6, r7]
    12d2:	2100      	movs	r1, #0
    12d4:	4baa      	ldr	r3, [pc, #680]	; (1580 <usart_init+0x314>)
    12d6:	4798      	blx	r3
	module->character_size = config->character_size;
    12d8:	7af3      	ldrb	r3, [r6, #11]
    12da:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    12dc:	2324      	movs	r3, #36	; 0x24
    12de:	5cf3      	ldrb	r3, [r6, r3]
    12e0:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    12e2:	2325      	movs	r3, #37	; 0x25
    12e4:	5cf3      	ldrb	r3, [r6, r3]
    12e6:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    12e8:	7ef3      	ldrb	r3, [r6, #27]
    12ea:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    12ec:	7f33      	ldrb	r3, [r6, #28]
    12ee:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    12f0:	682b      	ldr	r3, [r5, #0]
    12f2:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    12f4:	0018      	movs	r0, r3
    12f6:	4b9e      	ldr	r3, [pc, #632]	; (1570 <usart_init+0x304>)
    12f8:	4798      	blx	r3
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    12fa:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    12fc:	2200      	movs	r2, #0
    12fe:	230e      	movs	r3, #14
    1300:	a906      	add	r1, sp, #24
    1302:	468c      	mov	ip, r1
    1304:	4463      	add	r3, ip
    1306:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    1308:	8a32      	ldrh	r2, [r6, #16]
    130a:	9202      	str	r2, [sp, #8]
    130c:	2380      	movs	r3, #128	; 0x80
    130e:	01db      	lsls	r3, r3, #7
    1310:	429a      	cmp	r2, r3
    1312:	d100      	bne.n	1316 <usart_init+0xaa>
    1314:	e09a      	b.n	144c <usart_init+0x1e0>
    1316:	d90f      	bls.n	1338 <usart_init+0xcc>
    1318:	23c0      	movs	r3, #192	; 0xc0
    131a:	01db      	lsls	r3, r3, #7
    131c:	9a02      	ldr	r2, [sp, #8]
    131e:	429a      	cmp	r2, r3
    1320:	d100      	bne.n	1324 <usart_init+0xb8>
    1322:	e08e      	b.n	1442 <usart_init+0x1d6>
    1324:	2380      	movs	r3, #128	; 0x80
    1326:	021b      	lsls	r3, r3, #8
    1328:	429a      	cmp	r2, r3
    132a:	d000      	beq.n	132e <usart_init+0xc2>
    132c:	e11b      	b.n	1566 <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    132e:	2303      	movs	r3, #3
    1330:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1332:	2300      	movs	r3, #0
    1334:	9307      	str	r3, [sp, #28]
    1336:	e008      	b.n	134a <usart_init+0xde>
	switch (config->sample_rate) {
    1338:	2380      	movs	r3, #128	; 0x80
    133a:	019b      	lsls	r3, r3, #6
    133c:	429a      	cmp	r2, r3
    133e:	d000      	beq.n	1342 <usart_init+0xd6>
    1340:	e111      	b.n	1566 <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1342:	2310      	movs	r3, #16
    1344:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1346:	3b0f      	subs	r3, #15
    1348:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    134a:	6833      	ldr	r3, [r6, #0]
    134c:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    134e:	68f3      	ldr	r3, [r6, #12]
    1350:	469b      	mov	fp, r3
		config->sample_adjustment |
    1352:	6973      	ldr	r3, [r6, #20]
    1354:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1356:	7e33      	ldrb	r3, [r6, #24]
    1358:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    135a:	2326      	movs	r3, #38	; 0x26
    135c:	5cf3      	ldrb	r3, [r6, r3]
    135e:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    1360:	6873      	ldr	r3, [r6, #4]
    1362:	4699      	mov	r9, r3
	switch (transfer_mode)
    1364:	2b00      	cmp	r3, #0
    1366:	d100      	bne.n	136a <usart_init+0xfe>
    1368:	e09c      	b.n	14a4 <usart_init+0x238>
    136a:	2380      	movs	r3, #128	; 0x80
    136c:	055b      	lsls	r3, r3, #21
    136e:	4599      	cmp	r9, r3
    1370:	d100      	bne.n	1374 <usart_init+0x108>
    1372:	e080      	b.n	1476 <usart_init+0x20a>
	if(config->encoding_format_enable) {
    1374:	7e73      	ldrb	r3, [r6, #25]
    1376:	2b00      	cmp	r3, #0
    1378:	d002      	beq.n	1380 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    137a:	7eb3      	ldrb	r3, [r6, #26]
    137c:	4642      	mov	r2, r8
    137e:	7393      	strb	r3, [r2, #14]
	usart_hw->BAUD.reg = baud;
    1380:	230e      	movs	r3, #14
    1382:	aa06      	add	r2, sp, #24
    1384:	4694      	mov	ip, r2
    1386:	4463      	add	r3, ip
    1388:	881b      	ldrh	r3, [r3, #0]
    138a:	4642      	mov	r2, r8
    138c:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    138e:	9b05      	ldr	r3, [sp, #20]
    1390:	465a      	mov	r2, fp
    1392:	4313      	orrs	r3, r2
    1394:	9a03      	ldr	r2, [sp, #12]
    1396:	4313      	orrs	r3, r2
    1398:	464a      	mov	r2, r9
    139a:	4313      	orrs	r3, r2
    139c:	9f02      	ldr	r7, [sp, #8]
    139e:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    13a0:	9b04      	ldr	r3, [sp, #16]
    13a2:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    13a4:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    13a6:	4653      	mov	r3, sl
    13a8:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    13aa:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    13ac:	2327      	movs	r3, #39	; 0x27
    13ae:	5cf3      	ldrb	r3, [r6, r3]
    13b0:	2b00      	cmp	r3, #0
    13b2:	d101      	bne.n	13b8 <usart_init+0x14c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    13b4:	3304      	adds	r3, #4
    13b6:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    13b8:	7e73      	ldrb	r3, [r6, #25]
    13ba:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    13bc:	7f32      	ldrb	r2, [r6, #28]
    13be:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    13c0:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    13c2:	7f72      	ldrb	r2, [r6, #29]
    13c4:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    13c6:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    13c8:	2224      	movs	r2, #36	; 0x24
    13ca:	5cb2      	ldrb	r2, [r6, r2]
    13cc:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    13ce:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    13d0:	2225      	movs	r2, #37	; 0x25
    13d2:	5cb2      	ldrb	r2, [r6, r2]
    13d4:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    13d6:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    13d8:	7ab1      	ldrb	r1, [r6, #10]
    13da:	7af2      	ldrb	r2, [r6, #11]
    13dc:	4311      	orrs	r1, r2
    13de:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    13e0:	8933      	ldrh	r3, [r6, #8]
    13e2:	2bff      	cmp	r3, #255	; 0xff
    13e4:	d100      	bne.n	13e8 <usart_init+0x17c>
    13e6:	e081      	b.n	14ec <usart_init+0x280>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    13e8:	2280      	movs	r2, #128	; 0x80
    13ea:	0452      	lsls	r2, r2, #17
    13ec:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    13ee:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    13f0:	232c      	movs	r3, #44	; 0x2c
    13f2:	5cf3      	ldrb	r3, [r6, r3]
    13f4:	2b00      	cmp	r3, #0
    13f6:	d103      	bne.n	1400 <usart_init+0x194>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    13f8:	4b62      	ldr	r3, [pc, #392]	; (1584 <usart_init+0x318>)
    13fa:	789b      	ldrb	r3, [r3, #2]
    13fc:	079b      	lsls	r3, r3, #30
    13fe:	d501      	bpl.n	1404 <usart_init+0x198>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    1400:	2380      	movs	r3, #128	; 0x80
    1402:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    1404:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1406:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1408:	2b00      	cmp	r3, #0
    140a:	d1fc      	bne.n	1406 <usart_init+0x19a>
	usart_hw->CTRLB.reg = ctrlb;
    140c:	4643      	mov	r3, r8
    140e:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1410:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1412:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1414:	2b00      	cmp	r3, #0
    1416:	d1fc      	bne.n	1412 <usart_init+0x1a6>
	usart_hw->CTRLA.reg = ctrla;
    1418:	4643      	mov	r3, r8
    141a:	601f      	str	r7, [r3, #0]
    141c:	ab0e      	add	r3, sp, #56	; 0x38
    141e:	2280      	movs	r2, #128	; 0x80
    1420:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1422:	2200      	movs	r2, #0
    1424:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    1426:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1428:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    142a:	6b33      	ldr	r3, [r6, #48]	; 0x30
    142c:	930a      	str	r3, [sp, #40]	; 0x28
    142e:	6b73      	ldr	r3, [r6, #52]	; 0x34
    1430:	930b      	str	r3, [sp, #44]	; 0x2c
    1432:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    1434:	930c      	str	r3, [sp, #48]	; 0x30
    1436:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    1438:	9302      	str	r3, [sp, #8]
    143a:	930d      	str	r3, [sp, #52]	; 0x34
    143c:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    143e:	ae0a      	add	r6, sp, #40	; 0x28
    1440:	e063      	b.n	150a <usart_init+0x29e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1442:	2308      	movs	r3, #8
    1444:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1446:	3b07      	subs	r3, #7
    1448:	9307      	str	r3, [sp, #28]
    144a:	e77e      	b.n	134a <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    144c:	6833      	ldr	r3, [r6, #0]
    144e:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    1450:	68f3      	ldr	r3, [r6, #12]
    1452:	469b      	mov	fp, r3
		config->sample_adjustment |
    1454:	6973      	ldr	r3, [r6, #20]
    1456:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1458:	7e33      	ldrb	r3, [r6, #24]
    145a:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    145c:	2326      	movs	r3, #38	; 0x26
    145e:	5cf3      	ldrb	r3, [r6, r3]
    1460:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    1462:	6873      	ldr	r3, [r6, #4]
    1464:	4699      	mov	r9, r3
	switch (transfer_mode)
    1466:	2b00      	cmp	r3, #0
    1468:	d018      	beq.n	149c <usart_init+0x230>
    146a:	2380      	movs	r3, #128	; 0x80
    146c:	055b      	lsls	r3, r3, #21
    146e:	4599      	cmp	r9, r3
    1470:	d001      	beq.n	1476 <usart_init+0x20a>
	enum status_code status_code = STATUS_OK;
    1472:	2000      	movs	r0, #0
    1474:	e025      	b.n	14c2 <usart_init+0x256>
			if (!config->use_external_clock) {
    1476:	2327      	movs	r3, #39	; 0x27
    1478:	5cf3      	ldrb	r3, [r6, r3]
    147a:	2b00      	cmp	r3, #0
    147c:	d000      	beq.n	1480 <usart_init+0x214>
    147e:	e779      	b.n	1374 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    1480:	6a33      	ldr	r3, [r6, #32]
    1482:	001f      	movs	r7, r3
    1484:	b2c0      	uxtb	r0, r0
    1486:	4b40      	ldr	r3, [pc, #256]	; (1588 <usart_init+0x31c>)
    1488:	4798      	blx	r3
    148a:	0001      	movs	r1, r0
    148c:	220e      	movs	r2, #14
    148e:	ab06      	add	r3, sp, #24
    1490:	469c      	mov	ip, r3
    1492:	4462      	add	r2, ip
    1494:	0038      	movs	r0, r7
    1496:	4b3d      	ldr	r3, [pc, #244]	; (158c <usart_init+0x320>)
    1498:	4798      	blx	r3
    149a:	e012      	b.n	14c2 <usart_init+0x256>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    149c:	2308      	movs	r3, #8
    149e:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    14a0:	2300      	movs	r3, #0
    14a2:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    14a4:	2327      	movs	r3, #39	; 0x27
    14a6:	5cf3      	ldrb	r3, [r6, r3]
    14a8:	2b00      	cmp	r3, #0
    14aa:	d00e      	beq.n	14ca <usart_init+0x25e>
				status_code =
    14ac:	9b06      	ldr	r3, [sp, #24]
    14ae:	9300      	str	r3, [sp, #0]
    14b0:	9b07      	ldr	r3, [sp, #28]
    14b2:	220e      	movs	r2, #14
    14b4:	a906      	add	r1, sp, #24
    14b6:	468c      	mov	ip, r1
    14b8:	4462      	add	r2, ip
    14ba:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    14bc:	6a30      	ldr	r0, [r6, #32]
    14be:	4f34      	ldr	r7, [pc, #208]	; (1590 <usart_init+0x324>)
    14c0:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    14c2:	2800      	cmp	r0, #0
    14c4:	d000      	beq.n	14c8 <usart_init+0x25c>
    14c6:	e6e4      	b.n	1292 <usart_init+0x26>
    14c8:	e754      	b.n	1374 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    14ca:	6a33      	ldr	r3, [r6, #32]
    14cc:	001f      	movs	r7, r3
    14ce:	b2c0      	uxtb	r0, r0
    14d0:	4b2d      	ldr	r3, [pc, #180]	; (1588 <usart_init+0x31c>)
    14d2:	4798      	blx	r3
    14d4:	0001      	movs	r1, r0
				status_code =
    14d6:	9b06      	ldr	r3, [sp, #24]
    14d8:	9300      	str	r3, [sp, #0]
    14da:	9b07      	ldr	r3, [sp, #28]
    14dc:	220e      	movs	r2, #14
    14de:	a806      	add	r0, sp, #24
    14e0:	4684      	mov	ip, r0
    14e2:	4462      	add	r2, ip
    14e4:	0038      	movs	r0, r7
    14e6:	4f2a      	ldr	r7, [pc, #168]	; (1590 <usart_init+0x324>)
    14e8:	47b8      	blx	r7
    14ea:	e7ea      	b.n	14c2 <usart_init+0x256>
		if(config->lin_slave_enable) {
    14ec:	7ef3      	ldrb	r3, [r6, #27]
    14ee:	2b00      	cmp	r3, #0
    14f0:	d100      	bne.n	14f4 <usart_init+0x288>
    14f2:	e77d      	b.n	13f0 <usart_init+0x184>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    14f4:	2380      	movs	r3, #128	; 0x80
    14f6:	04db      	lsls	r3, r3, #19
    14f8:	431f      	orrs	r7, r3
    14fa:	e779      	b.n	13f0 <usart_init+0x184>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    14fc:	0020      	movs	r0, r4
    14fe:	4b25      	ldr	r3, [pc, #148]	; (1594 <usart_init+0x328>)
    1500:	4798      	blx	r3
    1502:	e007      	b.n	1514 <usart_init+0x2a8>
    1504:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    1506:	2f04      	cmp	r7, #4
    1508:	d00d      	beq.n	1526 <usart_init+0x2ba>
    150a:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    150c:	00bb      	lsls	r3, r7, #2
    150e:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    1510:	2800      	cmp	r0, #0
    1512:	d0f3      	beq.n	14fc <usart_init+0x290>
		if (current_pinmux != PINMUX_UNUSED) {
    1514:	1c43      	adds	r3, r0, #1
    1516:	d0f5      	beq.n	1504 <usart_init+0x298>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1518:	a90e      	add	r1, sp, #56	; 0x38
    151a:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    151c:	0c00      	lsrs	r0, r0, #16
    151e:	b2c0      	uxtb	r0, r0
    1520:	4b1d      	ldr	r3, [pc, #116]	; (1598 <usart_init+0x32c>)
    1522:	4798      	blx	r3
    1524:	e7ee      	b.n	1504 <usart_init+0x298>
		module->callback[i]            = NULL;
    1526:	2300      	movs	r3, #0
    1528:	60eb      	str	r3, [r5, #12]
    152a:	612b      	str	r3, [r5, #16]
    152c:	616b      	str	r3, [r5, #20]
    152e:	61ab      	str	r3, [r5, #24]
    1530:	61eb      	str	r3, [r5, #28]
    1532:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    1534:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    1536:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    1538:	2200      	movs	r2, #0
    153a:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    153c:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    153e:	3330      	adds	r3, #48	; 0x30
    1540:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    1542:	3301      	adds	r3, #1
    1544:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    1546:	3301      	adds	r3, #1
    1548:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    154a:	3301      	adds	r3, #1
    154c:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    154e:	6828      	ldr	r0, [r5, #0]
    1550:	4b07      	ldr	r3, [pc, #28]	; (1570 <usart_init+0x304>)
    1552:	4798      	blx	r3
    1554:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    1556:	4911      	ldr	r1, [pc, #68]	; (159c <usart_init+0x330>)
    1558:	4b11      	ldr	r3, [pc, #68]	; (15a0 <usart_init+0x334>)
    155a:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    155c:	00a4      	lsls	r4, r4, #2
    155e:	4b11      	ldr	r3, [pc, #68]	; (15a4 <usart_init+0x338>)
    1560:	50e5      	str	r5, [r4, r3]
	return status_code;
    1562:	2000      	movs	r0, #0
    1564:	e695      	b.n	1292 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1566:	2310      	movs	r3, #16
    1568:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    156a:	2300      	movs	r3, #0
    156c:	9307      	str	r3, [sp, #28]
    156e:	e6ec      	b.n	134a <usart_init+0xde>
    1570:	00001165 	.word	0x00001165
    1574:	40000400 	.word	0x40000400
    1578:	00001e99 	.word	0x00001e99
    157c:	00001e0d 	.word	0x00001e0d
    1580:	00000fa1 	.word	0x00000fa1
    1584:	41002000 	.word	0x41002000
    1588:	00001eb5 	.word	0x00001eb5
    158c:	00000ee3 	.word	0x00000ee3
    1590:	00000f0d 	.word	0x00000f0d
    1594:	00000fed 	.word	0x00000fed
    1598:	00001f91 	.word	0x00001f91
    159c:	000016c1 	.word	0x000016c1
    15a0:	000011a1 	.word	0x000011a1
    15a4:	200002c4 	.word	0x200002c4

000015a8 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    15a8:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    15aa:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    15ac:	2a00      	cmp	r2, #0
    15ae:	d101      	bne.n	15b4 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    15b0:	0018      	movs	r0, r3
    15b2:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    15b4:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    15b6:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    15b8:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    15ba:	2a00      	cmp	r2, #0
    15bc:	d1f8      	bne.n	15b0 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    15be:	6802      	ldr	r2, [r0, #0]
	usart_hw->DATA.reg = tx_data;
    15c0:	8511      	strh	r1, [r2, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    15c2:	2102      	movs	r1, #2
    15c4:	7e13      	ldrb	r3, [r2, #24]
    15c6:	420b      	tst	r3, r1
    15c8:	d0fc      	beq.n	15c4 <usart_write_wait+0x1c>
	return STATUS_OK;
    15ca:	2300      	movs	r3, #0
    15cc:	e7f0      	b.n	15b0 <usart_write_wait+0x8>

000015ce <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    15ce:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    15d0:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    15d2:	2a00      	cmp	r2, #0
    15d4:	d101      	bne.n	15da <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    15d6:	0018      	movs	r0, r3
    15d8:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    15da:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    15dc:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    15de:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    15e0:	2a00      	cmp	r2, #0
    15e2:	d1f8      	bne.n	15d6 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    15e4:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    15e6:	7e10      	ldrb	r0, [r2, #24]
    15e8:	0740      	lsls	r0, r0, #29
    15ea:	d5f4      	bpl.n	15d6 <usart_read_wait+0x8>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    15ec:	8b53      	ldrh	r3, [r2, #26]
    15ee:	b2db      	uxtb	r3, r3
	if (error_code) {
    15f0:	0698      	lsls	r0, r3, #26
    15f2:	d01d      	beq.n	1630 <usart_read_wait+0x62>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    15f4:	0798      	lsls	r0, r3, #30
    15f6:	d503      	bpl.n	1600 <usart_read_wait+0x32>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    15f8:	2302      	movs	r3, #2
    15fa:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    15fc:	3318      	adds	r3, #24
    15fe:	e7ea      	b.n	15d6 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1600:	0758      	lsls	r0, r3, #29
    1602:	d503      	bpl.n	160c <usart_read_wait+0x3e>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1604:	2304      	movs	r3, #4
    1606:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    1608:	331a      	adds	r3, #26
    160a:	e7e4      	b.n	15d6 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    160c:	07d8      	lsls	r0, r3, #31
    160e:	d503      	bpl.n	1618 <usart_read_wait+0x4a>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1610:	2301      	movs	r3, #1
    1612:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    1614:	3312      	adds	r3, #18
    1616:	e7de      	b.n	15d6 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    1618:	06d8      	lsls	r0, r3, #27
    161a:	d503      	bpl.n	1624 <usart_read_wait+0x56>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    161c:	2310      	movs	r3, #16
    161e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    1620:	3332      	adds	r3, #50	; 0x32
    1622:	e7d8      	b.n	15d6 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    1624:	069b      	lsls	r3, r3, #26
    1626:	d503      	bpl.n	1630 <usart_read_wait+0x62>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1628:	2320      	movs	r3, #32
    162a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    162c:	3321      	adds	r3, #33	; 0x21
    162e:	e7d2      	b.n	15d6 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    1630:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    1632:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    1634:	2300      	movs	r3, #0
    1636:	e7ce      	b.n	15d6 <usart_read_wait+0x8>

00001638 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    1638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    163a:	0004      	movs	r4, r0
    163c:	000d      	movs	r5, r1
    163e:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1640:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    1642:	4b0f      	ldr	r3, [pc, #60]	; (1680 <_usart_read_buffer+0x48>)
    1644:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    1646:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    1648:	b29b      	uxth	r3, r3
    164a:	2b00      	cmp	r3, #0
    164c:	d003      	beq.n	1656 <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
    164e:	4b0d      	ldr	r3, [pc, #52]	; (1684 <_usart_read_buffer+0x4c>)
    1650:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    1652:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    1654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    1656:	85a6      	strh	r6, [r4, #44]	; 0x2c
    1658:	4b0a      	ldr	r3, [pc, #40]	; (1684 <_usart_read_buffer+0x4c>)
    165a:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    165c:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    165e:	2205      	movs	r2, #5
    1660:	2332      	movs	r3, #50	; 0x32
    1662:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    1664:	3b2e      	subs	r3, #46	; 0x2e
    1666:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
    1668:	7a23      	ldrb	r3, [r4, #8]
    166a:	2b00      	cmp	r3, #0
    166c:	d001      	beq.n	1672 <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    166e:	2320      	movs	r3, #32
    1670:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
    1672:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
    1674:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
    1676:	2b00      	cmp	r3, #0
    1678:	d0ec      	beq.n	1654 <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    167a:	2308      	movs	r3, #8
    167c:	75bb      	strb	r3, [r7, #22]
    167e:	e7e9      	b.n	1654 <_usart_read_buffer+0x1c>
    1680:	0000082d 	.word	0x0000082d
    1684:	0000086d 	.word	0x0000086d

00001688 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    1688:	1c93      	adds	r3, r2, #2
    168a:	009b      	lsls	r3, r3, #2
    168c:	18c3      	adds	r3, r0, r3
    168e:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    1690:	2130      	movs	r1, #48	; 0x30
    1692:	2301      	movs	r3, #1
    1694:	4093      	lsls	r3, r2
    1696:	001a      	movs	r2, r3
    1698:	5c43      	ldrb	r3, [r0, r1]
    169a:	4313      	orrs	r3, r2
    169c:	5443      	strb	r3, [r0, r1]
}
    169e:	4770      	bx	lr

000016a0 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    16a0:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    16a2:	2317      	movs	r3, #23
	if (length == 0) {
    16a4:	2a00      	cmp	r2, #0
    16a6:	d101      	bne.n	16ac <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
    16a8:	0018      	movs	r0, r3
    16aa:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
    16ac:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
    16ae:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
    16b0:	2c00      	cmp	r4, #0
    16b2:	d0f9      	beq.n	16a8 <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
    16b4:	4b01      	ldr	r3, [pc, #4]	; (16bc <usart_read_buffer_job+0x1c>)
    16b6:	4798      	blx	r3
    16b8:	0003      	movs	r3, r0
    16ba:	e7f5      	b.n	16a8 <usart_read_buffer_job+0x8>
    16bc:	00001639 	.word	0x00001639

000016c0 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    16c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    16c2:	0080      	lsls	r0, r0, #2
    16c4:	4b62      	ldr	r3, [pc, #392]	; (1850 <_usart_interrupt_handler+0x190>)
    16c6:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    16c8:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    16ca:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    16cc:	2b00      	cmp	r3, #0
    16ce:	d1fc      	bne.n	16ca <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    16d0:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    16d2:	7da6      	ldrb	r6, [r4, #22]
    16d4:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    16d6:	2330      	movs	r3, #48	; 0x30
    16d8:	5ceb      	ldrb	r3, [r5, r3]
    16da:	2231      	movs	r2, #49	; 0x31
    16dc:	5caf      	ldrb	r7, [r5, r2]
    16de:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    16e0:	07f3      	lsls	r3, r6, #31
    16e2:	d522      	bpl.n	172a <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    16e4:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    16e6:	b29b      	uxth	r3, r3
    16e8:	2b00      	cmp	r3, #0
    16ea:	d01c      	beq.n	1726 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    16ec:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    16ee:	7813      	ldrb	r3, [r2, #0]
    16f0:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    16f2:	1c51      	adds	r1, r2, #1
    16f4:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    16f6:	7969      	ldrb	r1, [r5, #5]
    16f8:	2901      	cmp	r1, #1
    16fa:	d00e      	beq.n	171a <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    16fc:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    16fe:	05db      	lsls	r3, r3, #23
    1700:	0ddb      	lsrs	r3, r3, #23
    1702:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    1704:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1706:	3b01      	subs	r3, #1
    1708:	b29b      	uxth	r3, r3
    170a:	85eb      	strh	r3, [r5, #46]	; 0x2e
    170c:	2b00      	cmp	r3, #0
    170e:	d10c      	bne.n	172a <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1710:	3301      	adds	r3, #1
    1712:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    1714:	3301      	adds	r3, #1
    1716:	75a3      	strb	r3, [r4, #22]
    1718:	e007      	b.n	172a <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    171a:	7851      	ldrb	r1, [r2, #1]
    171c:	0209      	lsls	r1, r1, #8
    171e:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    1720:	3202      	adds	r2, #2
    1722:	62aa      	str	r2, [r5, #40]	; 0x28
    1724:	e7eb      	b.n	16fe <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1726:	2301      	movs	r3, #1
    1728:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    172a:	07b3      	lsls	r3, r6, #30
    172c:	d506      	bpl.n	173c <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    172e:	2302      	movs	r3, #2
    1730:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    1732:	2200      	movs	r2, #0
    1734:	3331      	adds	r3, #49	; 0x31
    1736:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    1738:	07fb      	lsls	r3, r7, #31
    173a:	d41a      	bmi.n	1772 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    173c:	0773      	lsls	r3, r6, #29
    173e:	d565      	bpl.n	180c <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    1740:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1742:	b29b      	uxth	r3, r3
    1744:	2b00      	cmp	r3, #0
    1746:	d05f      	beq.n	1808 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1748:	8b63      	ldrh	r3, [r4, #26]
    174a:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    174c:	071a      	lsls	r2, r3, #28
    174e:	d414      	bmi.n	177a <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1750:	223f      	movs	r2, #63	; 0x3f
    1752:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    1754:	2b00      	cmp	r3, #0
    1756:	d034      	beq.n	17c2 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    1758:	079a      	lsls	r2, r3, #30
    175a:	d511      	bpl.n	1780 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    175c:	221a      	movs	r2, #26
    175e:	2332      	movs	r3, #50	; 0x32
    1760:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1762:	3b30      	subs	r3, #48	; 0x30
    1764:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    1766:	077b      	lsls	r3, r7, #29
    1768:	d550      	bpl.n	180c <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    176a:	0028      	movs	r0, r5
    176c:	696b      	ldr	r3, [r5, #20]
    176e:	4798      	blx	r3
    1770:	e04c      	b.n	180c <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    1772:	0028      	movs	r0, r5
    1774:	68eb      	ldr	r3, [r5, #12]
    1776:	4798      	blx	r3
    1778:	e7e0      	b.n	173c <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    177a:	2237      	movs	r2, #55	; 0x37
    177c:	4013      	ands	r3, r2
    177e:	e7e9      	b.n	1754 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1780:	075a      	lsls	r2, r3, #29
    1782:	d505      	bpl.n	1790 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    1784:	221e      	movs	r2, #30
    1786:	2332      	movs	r3, #50	; 0x32
    1788:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    178a:	3b2e      	subs	r3, #46	; 0x2e
    178c:	8363      	strh	r3, [r4, #26]
    178e:	e7ea      	b.n	1766 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1790:	07da      	lsls	r2, r3, #31
    1792:	d505      	bpl.n	17a0 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    1794:	2213      	movs	r2, #19
    1796:	2332      	movs	r3, #50	; 0x32
    1798:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    179a:	3b31      	subs	r3, #49	; 0x31
    179c:	8363      	strh	r3, [r4, #26]
    179e:	e7e2      	b.n	1766 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    17a0:	06da      	lsls	r2, r3, #27
    17a2:	d505      	bpl.n	17b0 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    17a4:	2242      	movs	r2, #66	; 0x42
    17a6:	2332      	movs	r3, #50	; 0x32
    17a8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    17aa:	3b22      	subs	r3, #34	; 0x22
    17ac:	8363      	strh	r3, [r4, #26]
    17ae:	e7da      	b.n	1766 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    17b0:	2220      	movs	r2, #32
    17b2:	421a      	tst	r2, r3
    17b4:	d0d7      	beq.n	1766 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    17b6:	3221      	adds	r2, #33	; 0x21
    17b8:	2332      	movs	r3, #50	; 0x32
    17ba:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    17bc:	3b12      	subs	r3, #18
    17be:	8363      	strh	r3, [r4, #26]
    17c0:	e7d1      	b.n	1766 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    17c2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    17c4:	05db      	lsls	r3, r3, #23
    17c6:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    17c8:	b2da      	uxtb	r2, r3
    17ca:	6a69      	ldr	r1, [r5, #36]	; 0x24
    17cc:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    17ce:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    17d0:	1c51      	adds	r1, r2, #1
    17d2:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    17d4:	7969      	ldrb	r1, [r5, #5]
    17d6:	2901      	cmp	r1, #1
    17d8:	d010      	beq.n	17fc <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    17da:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    17dc:	3b01      	subs	r3, #1
    17de:	b29b      	uxth	r3, r3
    17e0:	85ab      	strh	r3, [r5, #44]	; 0x2c
    17e2:	2b00      	cmp	r3, #0
    17e4:	d112      	bne.n	180c <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    17e6:	3304      	adds	r3, #4
    17e8:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    17ea:	2200      	movs	r2, #0
    17ec:	332e      	adds	r3, #46	; 0x2e
    17ee:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    17f0:	07bb      	lsls	r3, r7, #30
    17f2:	d50b      	bpl.n	180c <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    17f4:	0028      	movs	r0, r5
    17f6:	692b      	ldr	r3, [r5, #16]
    17f8:	4798      	blx	r3
    17fa:	e007      	b.n	180c <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    17fc:	0a1b      	lsrs	r3, r3, #8
    17fe:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    1800:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    1802:	3301      	adds	r3, #1
    1804:	626b      	str	r3, [r5, #36]	; 0x24
    1806:	e7e8      	b.n	17da <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1808:	2304      	movs	r3, #4
    180a:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    180c:	06f3      	lsls	r3, r6, #27
    180e:	d504      	bpl.n	181a <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    1810:	2310      	movs	r3, #16
    1812:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    1814:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    1816:	06fb      	lsls	r3, r7, #27
    1818:	d40e      	bmi.n	1838 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    181a:	06b3      	lsls	r3, r6, #26
    181c:	d504      	bpl.n	1828 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    181e:	2320      	movs	r3, #32
    1820:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    1822:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    1824:	073b      	lsls	r3, r7, #28
    1826:	d40b      	bmi.n	1840 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    1828:	0733      	lsls	r3, r6, #28
    182a:	d504      	bpl.n	1836 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    182c:	2308      	movs	r3, #8
    182e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    1830:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    1832:	06bb      	lsls	r3, r7, #26
    1834:	d408      	bmi.n	1848 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    1836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    1838:	0028      	movs	r0, r5
    183a:	69eb      	ldr	r3, [r5, #28]
    183c:	4798      	blx	r3
    183e:	e7ec      	b.n	181a <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    1840:	0028      	movs	r0, r5
    1842:	69ab      	ldr	r3, [r5, #24]
    1844:	4798      	blx	r3
    1846:	e7ef      	b.n	1828 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    1848:	6a2b      	ldr	r3, [r5, #32]
    184a:	0028      	movs	r0, r5
    184c:	4798      	blx	r3
}
    184e:	e7f2      	b.n	1836 <_usart_interrupt_handler+0x176>
    1850:	200002c4 	.word	0x200002c4

00001854 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1854:	b510      	push	{r4, lr}
	switch (clock_source) {
    1856:	2808      	cmp	r0, #8
    1858:	d803      	bhi.n	1862 <system_clock_source_get_hz+0xe>
    185a:	0080      	lsls	r0, r0, #2
    185c:	4b1c      	ldr	r3, [pc, #112]	; (18d0 <system_clock_source_get_hz+0x7c>)
    185e:	581b      	ldr	r3, [r3, r0]
    1860:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    1862:	2000      	movs	r0, #0
    1864:	e032      	b.n	18cc <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    1866:	4b1b      	ldr	r3, [pc, #108]	; (18d4 <system_clock_source_get_hz+0x80>)
    1868:	6918      	ldr	r0, [r3, #16]
    186a:	e02f      	b.n	18cc <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    186c:	4b1a      	ldr	r3, [pc, #104]	; (18d8 <system_clock_source_get_hz+0x84>)
    186e:	6a1b      	ldr	r3, [r3, #32]
    1870:	059b      	lsls	r3, r3, #22
    1872:	0f9b      	lsrs	r3, r3, #30
    1874:	4819      	ldr	r0, [pc, #100]	; (18dc <system_clock_source_get_hz+0x88>)
    1876:	40d8      	lsrs	r0, r3
    1878:	e028      	b.n	18cc <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    187a:	4b16      	ldr	r3, [pc, #88]	; (18d4 <system_clock_source_get_hz+0x80>)
    187c:	6958      	ldr	r0, [r3, #20]
    187e:	e025      	b.n	18cc <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1880:	4b14      	ldr	r3, [pc, #80]	; (18d4 <system_clock_source_get_hz+0x80>)
    1882:	681b      	ldr	r3, [r3, #0]
			return 0;
    1884:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1886:	079b      	lsls	r3, r3, #30
    1888:	d520      	bpl.n	18cc <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    188a:	4913      	ldr	r1, [pc, #76]	; (18d8 <system_clock_source_get_hz+0x84>)
    188c:	2210      	movs	r2, #16
    188e:	68cb      	ldr	r3, [r1, #12]
    1890:	421a      	tst	r2, r3
    1892:	d0fc      	beq.n	188e <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    1894:	4b0f      	ldr	r3, [pc, #60]	; (18d4 <system_clock_source_get_hz+0x80>)
    1896:	681a      	ldr	r2, [r3, #0]
    1898:	2324      	movs	r3, #36	; 0x24
    189a:	4013      	ands	r3, r2
    189c:	2b04      	cmp	r3, #4
    189e:	d001      	beq.n	18a4 <system_clock_source_get_hz+0x50>
			return 48000000UL;
    18a0:	480f      	ldr	r0, [pc, #60]	; (18e0 <system_clock_source_get_hz+0x8c>)
    18a2:	e013      	b.n	18cc <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    18a4:	2000      	movs	r0, #0
    18a6:	4b0f      	ldr	r3, [pc, #60]	; (18e4 <system_clock_source_get_hz+0x90>)
    18a8:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    18aa:	4b0a      	ldr	r3, [pc, #40]	; (18d4 <system_clock_source_get_hz+0x80>)
    18ac:	689b      	ldr	r3, [r3, #8]
    18ae:	041b      	lsls	r3, r3, #16
    18b0:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    18b2:	4358      	muls	r0, r3
    18b4:	e00a      	b.n	18cc <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    18b6:	2350      	movs	r3, #80	; 0x50
    18b8:	4a07      	ldr	r2, [pc, #28]	; (18d8 <system_clock_source_get_hz+0x84>)
    18ba:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    18bc:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    18be:	075b      	lsls	r3, r3, #29
    18c0:	d504      	bpl.n	18cc <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    18c2:	4b04      	ldr	r3, [pc, #16]	; (18d4 <system_clock_source_get_hz+0x80>)
    18c4:	68d8      	ldr	r0, [r3, #12]
    18c6:	e001      	b.n	18cc <system_clock_source_get_hz+0x78>
		return 32768UL;
    18c8:	2080      	movs	r0, #128	; 0x80
    18ca:	0200      	lsls	r0, r0, #8
	}
}
    18cc:	bd10      	pop	{r4, pc}
    18ce:	46c0      	nop			; (mov r8, r8)
    18d0:	00005258 	.word	0x00005258
    18d4:	20000288 	.word	0x20000288
    18d8:	40000800 	.word	0x40000800
    18dc:	007a1200 	.word	0x007a1200
    18e0:	02dc6c00 	.word	0x02dc6c00
    18e4:	00001eb5 	.word	0x00001eb5

000018e8 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    18e8:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    18ea:	490c      	ldr	r1, [pc, #48]	; (191c <system_clock_source_osc8m_set_config+0x34>)
    18ec:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    18ee:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    18f0:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    18f2:	7840      	ldrb	r0, [r0, #1]
    18f4:	2201      	movs	r2, #1
    18f6:	4010      	ands	r0, r2
    18f8:	0180      	lsls	r0, r0, #6
    18fa:	2640      	movs	r6, #64	; 0x40
    18fc:	43b3      	bics	r3, r6
    18fe:	4303      	orrs	r3, r0
    1900:	402a      	ands	r2, r5
    1902:	01d2      	lsls	r2, r2, #7
    1904:	2080      	movs	r0, #128	; 0x80
    1906:	4383      	bics	r3, r0
    1908:	4313      	orrs	r3, r2
    190a:	2203      	movs	r2, #3
    190c:	4022      	ands	r2, r4
    190e:	0212      	lsls	r2, r2, #8
    1910:	4803      	ldr	r0, [pc, #12]	; (1920 <system_clock_source_osc8m_set_config+0x38>)
    1912:	4003      	ands	r3, r0
    1914:	4313      	orrs	r3, r2
    1916:	620b      	str	r3, [r1, #32]
}
    1918:	bd70      	pop	{r4, r5, r6, pc}
    191a:	46c0      	nop			; (mov r8, r8)
    191c:	40000800 	.word	0x40000800
    1920:	fffffcff 	.word	0xfffffcff

00001924 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    1924:	b5f0      	push	{r4, r5, r6, r7, lr}
    1926:	46de      	mov	lr, fp
    1928:	4657      	mov	r7, sl
    192a:	464e      	mov	r6, r9
    192c:	4645      	mov	r5, r8
    192e:	b5e0      	push	{r5, r6, r7, lr}
    1930:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    1932:	4b26      	ldr	r3, [pc, #152]	; (19cc <system_clock_source_xosc32k_set_config+0xa8>)
    1934:	469b      	mov	fp, r3
    1936:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    1938:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    193a:	7800      	ldrb	r0, [r0, #0]
    193c:	4242      	negs	r2, r0
    193e:	4142      	adcs	r2, r0
    1940:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    1942:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    1944:	78ca      	ldrb	r2, [r1, #3]
    1946:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    1948:	790a      	ldrb	r2, [r1, #4]
    194a:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    194c:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    194e:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    1950:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    1952:	688a      	ldr	r2, [r1, #8]
    1954:	491e      	ldr	r1, [pc, #120]	; (19d0 <system_clock_source_xosc32k_set_config+0xac>)
    1956:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    1958:	2101      	movs	r1, #1
    195a:	464a      	mov	r2, r9
    195c:	0092      	lsls	r2, r2, #2
    195e:	4691      	mov	r9, r2
    1960:	2204      	movs	r2, #4
    1962:	4393      	bics	r3, r2
    1964:	464a      	mov	r2, r9
    1966:	4313      	orrs	r3, r2
    1968:	4642      	mov	r2, r8
    196a:	400a      	ands	r2, r1
    196c:	00d2      	lsls	r2, r2, #3
    196e:	4690      	mov	r8, r2
    1970:	2208      	movs	r2, #8
    1972:	4393      	bics	r3, r2
    1974:	4642      	mov	r2, r8
    1976:	4313      	orrs	r3, r2
    1978:	4662      	mov	r2, ip
    197a:	400a      	ands	r2, r1
    197c:	0112      	lsls	r2, r2, #4
    197e:	4694      	mov	ip, r2
    1980:	2210      	movs	r2, #16
    1982:	4393      	bics	r3, r2
    1984:	4662      	mov	r2, ip
    1986:	4313      	orrs	r3, r2
    1988:	4008      	ands	r0, r1
    198a:	0140      	lsls	r0, r0, #5
    198c:	2220      	movs	r2, #32
    198e:	4393      	bics	r3, r2
    1990:	4303      	orrs	r3, r0
    1992:	400f      	ands	r7, r1
    1994:	01bf      	lsls	r7, r7, #6
    1996:	2040      	movs	r0, #64	; 0x40
    1998:	4383      	bics	r3, r0
    199a:	433b      	orrs	r3, r7
    199c:	400e      	ands	r6, r1
    199e:	01f6      	lsls	r6, r6, #7
    19a0:	3040      	adds	r0, #64	; 0x40
    19a2:	4383      	bics	r3, r0
    19a4:	4333      	orrs	r3, r6
    19a6:	3879      	subs	r0, #121	; 0x79
    19a8:	4005      	ands	r5, r0
    19aa:	022d      	lsls	r5, r5, #8
    19ac:	4809      	ldr	r0, [pc, #36]	; (19d4 <system_clock_source_xosc32k_set_config+0xb0>)
    19ae:	4003      	ands	r3, r0
    19b0:	432b      	orrs	r3, r5
    19b2:	4021      	ands	r1, r4
    19b4:	0309      	lsls	r1, r1, #12
    19b6:	4808      	ldr	r0, [pc, #32]	; (19d8 <system_clock_source_xosc32k_set_config+0xb4>)
    19b8:	4003      	ands	r3, r0
    19ba:	430b      	orrs	r3, r1
    19bc:	465a      	mov	r2, fp
    19be:	8293      	strh	r3, [r2, #20]
}
    19c0:	bc3c      	pop	{r2, r3, r4, r5}
    19c2:	4690      	mov	r8, r2
    19c4:	4699      	mov	r9, r3
    19c6:	46a2      	mov	sl, r4
    19c8:	46ab      	mov	fp, r5
    19ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    19cc:	40000800 	.word	0x40000800
    19d0:	20000288 	.word	0x20000288
    19d4:	fffff8ff 	.word	0xfffff8ff
    19d8:	ffffefff 	.word	0xffffefff

000019dc <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    19dc:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    19de:	7a03      	ldrb	r3, [r0, #8]
    19e0:	069b      	lsls	r3, r3, #26
    19e2:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    19e4:	8942      	ldrh	r2, [r0, #10]
    19e6:	0592      	lsls	r2, r2, #22
    19e8:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    19ea:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    19ec:	4918      	ldr	r1, [pc, #96]	; (1a50 <system_clock_source_dfll_set_config+0x74>)
    19ee:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    19f0:	7983      	ldrb	r3, [r0, #6]
    19f2:	79c2      	ldrb	r2, [r0, #7]
    19f4:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    19f6:	8842      	ldrh	r2, [r0, #2]
    19f8:	8884      	ldrh	r4, [r0, #4]
    19fa:	4322      	orrs	r2, r4
    19fc:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    19fe:	7842      	ldrb	r2, [r0, #1]
    1a00:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    1a02:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    1a04:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    1a06:	7803      	ldrb	r3, [r0, #0]
    1a08:	2b04      	cmp	r3, #4
    1a0a:	d011      	beq.n	1a30 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    1a0c:	2b20      	cmp	r3, #32
    1a0e:	d10e      	bne.n	1a2e <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1a10:	7b03      	ldrb	r3, [r0, #12]
    1a12:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1a14:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1a16:	4313      	orrs	r3, r2
    1a18:	89c2      	ldrh	r2, [r0, #14]
    1a1a:	0412      	lsls	r2, r2, #16
    1a1c:	490d      	ldr	r1, [pc, #52]	; (1a54 <system_clock_source_dfll_set_config+0x78>)
    1a1e:	400a      	ands	r2, r1
    1a20:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    1a22:	4a0b      	ldr	r2, [pc, #44]	; (1a50 <system_clock_source_dfll_set_config+0x74>)
    1a24:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    1a26:	6811      	ldr	r1, [r2, #0]
    1a28:	4b0b      	ldr	r3, [pc, #44]	; (1a58 <system_clock_source_dfll_set_config+0x7c>)
    1a2a:	430b      	orrs	r3, r1
    1a2c:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    1a2e:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1a30:	7b03      	ldrb	r3, [r0, #12]
    1a32:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1a34:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1a36:	4313      	orrs	r3, r2
    1a38:	89c2      	ldrh	r2, [r0, #14]
    1a3a:	0412      	lsls	r2, r2, #16
    1a3c:	4905      	ldr	r1, [pc, #20]	; (1a54 <system_clock_source_dfll_set_config+0x78>)
    1a3e:	400a      	ands	r2, r1
    1a40:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    1a42:	4a03      	ldr	r2, [pc, #12]	; (1a50 <system_clock_source_dfll_set_config+0x74>)
    1a44:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    1a46:	6813      	ldr	r3, [r2, #0]
    1a48:	2104      	movs	r1, #4
    1a4a:	430b      	orrs	r3, r1
    1a4c:	6013      	str	r3, [r2, #0]
    1a4e:	e7ee      	b.n	1a2e <system_clock_source_dfll_set_config+0x52>
    1a50:	20000288 	.word	0x20000288
    1a54:	03ff0000 	.word	0x03ff0000
    1a58:	00000424 	.word	0x00000424

00001a5c <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1a5c:	2808      	cmp	r0, #8
    1a5e:	d803      	bhi.n	1a68 <system_clock_source_enable+0xc>
    1a60:	0080      	lsls	r0, r0, #2
    1a62:	4b25      	ldr	r3, [pc, #148]	; (1af8 <system_clock_source_enable+0x9c>)
    1a64:	581b      	ldr	r3, [r3, r0]
    1a66:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1a68:	2017      	movs	r0, #23
    1a6a:	e044      	b.n	1af6 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1a6c:	4a23      	ldr	r2, [pc, #140]	; (1afc <system_clock_source_enable+0xa0>)
    1a6e:	6a13      	ldr	r3, [r2, #32]
    1a70:	2102      	movs	r1, #2
    1a72:	430b      	orrs	r3, r1
    1a74:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    1a76:	2000      	movs	r0, #0
    1a78:	e03d      	b.n	1af6 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1a7a:	4a20      	ldr	r2, [pc, #128]	; (1afc <system_clock_source_enable+0xa0>)
    1a7c:	6993      	ldr	r3, [r2, #24]
    1a7e:	2102      	movs	r1, #2
    1a80:	430b      	orrs	r3, r1
    1a82:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    1a84:	2000      	movs	r0, #0
		break;
    1a86:	e036      	b.n	1af6 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1a88:	4a1c      	ldr	r2, [pc, #112]	; (1afc <system_clock_source_enable+0xa0>)
    1a8a:	8a13      	ldrh	r3, [r2, #16]
    1a8c:	2102      	movs	r1, #2
    1a8e:	430b      	orrs	r3, r1
    1a90:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    1a92:	2000      	movs	r0, #0
		break;
    1a94:	e02f      	b.n	1af6 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1a96:	4a19      	ldr	r2, [pc, #100]	; (1afc <system_clock_source_enable+0xa0>)
    1a98:	8a93      	ldrh	r3, [r2, #20]
    1a9a:	2102      	movs	r1, #2
    1a9c:	430b      	orrs	r3, r1
    1a9e:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    1aa0:	2000      	movs	r0, #0
		break;
    1aa2:	e028      	b.n	1af6 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1aa4:	4916      	ldr	r1, [pc, #88]	; (1b00 <system_clock_source_enable+0xa4>)
    1aa6:	680b      	ldr	r3, [r1, #0]
    1aa8:	2202      	movs	r2, #2
    1aaa:	4313      	orrs	r3, r2
    1aac:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1aae:	4b13      	ldr	r3, [pc, #76]	; (1afc <system_clock_source_enable+0xa0>)
    1ab0:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1ab2:	0019      	movs	r1, r3
    1ab4:	320e      	adds	r2, #14
    1ab6:	68cb      	ldr	r3, [r1, #12]
    1ab8:	421a      	tst	r2, r3
    1aba:	d0fc      	beq.n	1ab6 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1abc:	4a10      	ldr	r2, [pc, #64]	; (1b00 <system_clock_source_enable+0xa4>)
    1abe:	6891      	ldr	r1, [r2, #8]
    1ac0:	4b0e      	ldr	r3, [pc, #56]	; (1afc <system_clock_source_enable+0xa0>)
    1ac2:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1ac4:	6852      	ldr	r2, [r2, #4]
    1ac6:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    1ac8:	2200      	movs	r2, #0
    1aca:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1acc:	0019      	movs	r1, r3
    1ace:	3210      	adds	r2, #16
    1ad0:	68cb      	ldr	r3, [r1, #12]
    1ad2:	421a      	tst	r2, r3
    1ad4:	d0fc      	beq.n	1ad0 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1ad6:	4b0a      	ldr	r3, [pc, #40]	; (1b00 <system_clock_source_enable+0xa4>)
    1ad8:	681b      	ldr	r3, [r3, #0]
    1ada:	b29b      	uxth	r3, r3
    1adc:	4a07      	ldr	r2, [pc, #28]	; (1afc <system_clock_source_enable+0xa0>)
    1ade:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    1ae0:	2000      	movs	r0, #0
    1ae2:	e008      	b.n	1af6 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1ae4:	4905      	ldr	r1, [pc, #20]	; (1afc <system_clock_source_enable+0xa0>)
    1ae6:	2244      	movs	r2, #68	; 0x44
    1ae8:	5c8b      	ldrb	r3, [r1, r2]
    1aea:	2002      	movs	r0, #2
    1aec:	4303      	orrs	r3, r0
    1aee:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    1af0:	2000      	movs	r0, #0
		break;
    1af2:	e000      	b.n	1af6 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    1af4:	2000      	movs	r0, #0
}
    1af6:	4770      	bx	lr
    1af8:	0000527c 	.word	0x0000527c
    1afc:	40000800 	.word	0x40000800
    1b00:	20000288 	.word	0x20000288

00001b04 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1b04:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b06:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1b08:	22c2      	movs	r2, #194	; 0xc2
    1b0a:	00d2      	lsls	r2, r2, #3
    1b0c:	4b47      	ldr	r3, [pc, #284]	; (1c2c <system_clock_init+0x128>)
    1b0e:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1b10:	4947      	ldr	r1, [pc, #284]	; (1c30 <system_clock_init+0x12c>)
    1b12:	684b      	ldr	r3, [r1, #4]
    1b14:	221e      	movs	r2, #30
    1b16:	4393      	bics	r3, r2
    1b18:	3a1c      	subs	r2, #28
    1b1a:	4313      	orrs	r3, r2
    1b1c:	604b      	str	r3, [r1, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    1b1e:	ab01      	add	r3, sp, #4
    1b20:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1b22:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1b24:	4d43      	ldr	r5, [pc, #268]	; (1c34 <system_clock_init+0x130>)
    1b26:	b2e0      	uxtb	r0, r4
    1b28:	a901      	add	r1, sp, #4
    1b2a:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1b2c:	3401      	adds	r4, #1
    1b2e:	2c25      	cmp	r4, #37	; 0x25
    1b30:	d1f9      	bne.n	1b26 <system_clock_init+0x22>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    1b32:	a80a      	add	r0, sp, #40	; 0x28
    1b34:	2300      	movs	r3, #0
    1b36:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    1b38:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    1b3a:	2280      	movs	r2, #128	; 0x80
    1b3c:	0212      	lsls	r2, r2, #8
    1b3e:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    1b40:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    1b42:	2201      	movs	r2, #1
    1b44:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    1b46:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    1b48:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    1b4a:	3205      	adds	r2, #5
    1b4c:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    1b4e:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    1b50:	4b39      	ldr	r3, [pc, #228]	; (1c38 <system_clock_init+0x134>)
    1b52:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    1b54:	2005      	movs	r0, #5
    1b56:	4b39      	ldr	r3, [pc, #228]	; (1c3c <system_clock_init+0x138>)
    1b58:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1b5a:	4934      	ldr	r1, [pc, #208]	; (1c2c <system_clock_init+0x128>)
    1b5c:	2202      	movs	r2, #2
    1b5e:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    1b60:	421a      	tst	r2, r3
    1b62:	d0fc      	beq.n	1b5e <system_clock_init+0x5a>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    1b64:	4a31      	ldr	r2, [pc, #196]	; (1c2c <system_clock_init+0x128>)
    1b66:	8a93      	ldrh	r3, [r2, #20]
    1b68:	2180      	movs	r1, #128	; 0x80
    1b6a:	430b      	orrs	r3, r1
    1b6c:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    1b6e:	ab05      	add	r3, sp, #20
    1b70:	2100      	movs	r1, #0
    1b72:	2200      	movs	r2, #0
    1b74:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    1b76:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    1b78:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    1b7a:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    1b7c:	313f      	adds	r1, #63	; 0x3f
    1b7e:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    1b80:	393b      	subs	r1, #59	; 0x3b
    1b82:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    1b84:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    1b86:	4b2e      	ldr	r3, [pc, #184]	; (1c40 <system_clock_init+0x13c>)
    1b88:	681b      	ldr	r3, [r3, #0]
    1b8a:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    1b8c:	2b3f      	cmp	r3, #63	; 0x3f
    1b8e:	d04b      	beq.n	1c28 <system_clock_init+0x124>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    1b90:	a805      	add	r0, sp, #20
    1b92:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    1b94:	23b7      	movs	r3, #183	; 0xb7
    1b96:	00db      	lsls	r3, r3, #3
    1b98:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    1b9a:	2307      	movs	r3, #7
    1b9c:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    1b9e:	3338      	adds	r3, #56	; 0x38
    1ba0:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    1ba2:	4b28      	ldr	r3, [pc, #160]	; (1c44 <system_clock_init+0x140>)
    1ba4:	4798      	blx	r3
	config->run_in_standby  = false;
    1ba6:	a804      	add	r0, sp, #16
    1ba8:	2500      	movs	r5, #0
    1baa:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    1bac:	2601      	movs	r6, #1
    1bae:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1bb0:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1bb2:	4b25      	ldr	r3, [pc, #148]	; (1c48 <system_clock_init+0x144>)
    1bb4:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1bb6:	2006      	movs	r0, #6
    1bb8:	4f20      	ldr	r7, [pc, #128]	; (1c3c <system_clock_init+0x138>)
    1bba:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1bbc:	4b23      	ldr	r3, [pc, #140]	; (1c4c <system_clock_init+0x148>)
    1bbe:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1bc0:	ac01      	add	r4, sp, #4
    1bc2:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    1bc4:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    1bc6:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    1bc8:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    1bca:	2305      	movs	r3, #5
    1bcc:	7023      	strb	r3, [r4, #0]
    1bce:	0021      	movs	r1, r4
    1bd0:	2001      	movs	r0, #1
    1bd2:	4b1f      	ldr	r3, [pc, #124]	; (1c50 <system_clock_init+0x14c>)
    1bd4:	4798      	blx	r3
    1bd6:	2001      	movs	r0, #1
    1bd8:	4b1e      	ldr	r3, [pc, #120]	; (1c54 <system_clock_init+0x150>)
    1bda:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    1bdc:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    1bde:	0021      	movs	r1, r4
    1be0:	2000      	movs	r0, #0
    1be2:	4b14      	ldr	r3, [pc, #80]	; (1c34 <system_clock_init+0x130>)
    1be4:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    1be6:	2000      	movs	r0, #0
    1be8:	4b1b      	ldr	r3, [pc, #108]	; (1c58 <system_clock_init+0x154>)
    1bea:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    1bec:	2007      	movs	r0, #7
    1bee:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1bf0:	490e      	ldr	r1, [pc, #56]	; (1c2c <system_clock_init+0x128>)
    1bf2:	22d0      	movs	r2, #208	; 0xd0
    1bf4:	68cb      	ldr	r3, [r1, #12]
    1bf6:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    1bf8:	2bd0      	cmp	r3, #208	; 0xd0
    1bfa:	d1fb      	bne.n	1bf4 <system_clock_init+0xf0>
	PM->CPUSEL.reg = (uint32_t)divider;
    1bfc:	4a17      	ldr	r2, [pc, #92]	; (1c5c <system_clock_init+0x158>)
    1bfe:	2300      	movs	r3, #0
    1c00:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    1c02:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    1c04:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    1c06:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    1c08:	a901      	add	r1, sp, #4
    1c0a:	2201      	movs	r2, #1
    1c0c:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    1c0e:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    1c10:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    1c12:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1c14:	3307      	adds	r3, #7
    1c16:	700b      	strb	r3, [r1, #0]
    1c18:	2000      	movs	r0, #0
    1c1a:	4b0d      	ldr	r3, [pc, #52]	; (1c50 <system_clock_init+0x14c>)
    1c1c:	4798      	blx	r3
    1c1e:	2000      	movs	r0, #0
    1c20:	4b0c      	ldr	r3, [pc, #48]	; (1c54 <system_clock_init+0x150>)
    1c22:	4798      	blx	r3
#endif
}
    1c24:	b00f      	add	sp, #60	; 0x3c
    1c26:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    1c28:	3b20      	subs	r3, #32
    1c2a:	e7b1      	b.n	1b90 <system_clock_init+0x8c>
    1c2c:	40000800 	.word	0x40000800
    1c30:	41004000 	.word	0x41004000
    1c34:	00001e99 	.word	0x00001e99
    1c38:	00001925 	.word	0x00001925
    1c3c:	00001a5d 	.word	0x00001a5d
    1c40:	00806024 	.word	0x00806024
    1c44:	000019dd 	.word	0x000019dd
    1c48:	000018e9 	.word	0x000018e9
    1c4c:	00001c61 	.word	0x00001c61
    1c50:	00001c85 	.word	0x00001c85
    1c54:	00001d3d 	.word	0x00001d3d
    1c58:	00001e0d 	.word	0x00001e0d
    1c5c:	40000400 	.word	0x40000400

00001c60 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    1c60:	4a06      	ldr	r2, [pc, #24]	; (1c7c <system_gclk_init+0x1c>)
    1c62:	6993      	ldr	r3, [r2, #24]
    1c64:	2108      	movs	r1, #8
    1c66:	430b      	orrs	r3, r1
    1c68:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1c6a:	2201      	movs	r2, #1
    1c6c:	4b04      	ldr	r3, [pc, #16]	; (1c80 <system_gclk_init+0x20>)
    1c6e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1c70:	0019      	movs	r1, r3
    1c72:	780b      	ldrb	r3, [r1, #0]
    1c74:	4213      	tst	r3, r2
    1c76:	d1fc      	bne.n	1c72 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1c78:	4770      	bx	lr
    1c7a:	46c0      	nop			; (mov r8, r8)
    1c7c:	40000400 	.word	0x40000400
    1c80:	40000c00 	.word	0x40000c00

00001c84 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1c84:	b570      	push	{r4, r5, r6, lr}
    1c86:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1c88:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1c8a:	780d      	ldrb	r5, [r1, #0]
    1c8c:	022d      	lsls	r5, r5, #8
    1c8e:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1c90:	784b      	ldrb	r3, [r1, #1]
    1c92:	2b00      	cmp	r3, #0
    1c94:	d002      	beq.n	1c9c <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1c96:	2380      	movs	r3, #128	; 0x80
    1c98:	02db      	lsls	r3, r3, #11
    1c9a:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1c9c:	7a4b      	ldrb	r3, [r1, #9]
    1c9e:	2b00      	cmp	r3, #0
    1ca0:	d002      	beq.n	1ca8 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1ca2:	2380      	movs	r3, #128	; 0x80
    1ca4:	031b      	lsls	r3, r3, #12
    1ca6:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1ca8:	6848      	ldr	r0, [r1, #4]
    1caa:	2801      	cmp	r0, #1
    1cac:	d910      	bls.n	1cd0 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1cae:	1e43      	subs	r3, r0, #1
    1cb0:	4218      	tst	r0, r3
    1cb2:	d134      	bne.n	1d1e <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1cb4:	2802      	cmp	r0, #2
    1cb6:	d930      	bls.n	1d1a <system_gclk_gen_set_config+0x96>
    1cb8:	2302      	movs	r3, #2
    1cba:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1cbc:	3201      	adds	r2, #1
						mask <<= 1) {
    1cbe:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    1cc0:	4298      	cmp	r0, r3
    1cc2:	d8fb      	bhi.n	1cbc <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1cc4:	0212      	lsls	r2, r2, #8
    1cc6:	4332      	orrs	r2, r6
    1cc8:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1cca:	2380      	movs	r3, #128	; 0x80
    1ccc:	035b      	lsls	r3, r3, #13
    1cce:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1cd0:	7a0b      	ldrb	r3, [r1, #8]
    1cd2:	2b00      	cmp	r3, #0
    1cd4:	d002      	beq.n	1cdc <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1cd6:	2380      	movs	r3, #128	; 0x80
    1cd8:	039b      	lsls	r3, r3, #14
    1cda:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1cdc:	4a13      	ldr	r2, [pc, #76]	; (1d2c <system_gclk_gen_set_config+0xa8>)
    1cde:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    1ce0:	b25b      	sxtb	r3, r3
    1ce2:	2b00      	cmp	r3, #0
    1ce4:	dbfb      	blt.n	1cde <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    1ce6:	4b12      	ldr	r3, [pc, #72]	; (1d30 <system_gclk_gen_set_config+0xac>)
    1ce8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1cea:	4b12      	ldr	r3, [pc, #72]	; (1d34 <system_gclk_gen_set_config+0xb0>)
    1cec:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1cee:	4a0f      	ldr	r2, [pc, #60]	; (1d2c <system_gclk_gen_set_config+0xa8>)
    1cf0:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1cf2:	b25b      	sxtb	r3, r3
    1cf4:	2b00      	cmp	r3, #0
    1cf6:	dbfb      	blt.n	1cf0 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1cf8:	4b0c      	ldr	r3, [pc, #48]	; (1d2c <system_gclk_gen_set_config+0xa8>)
    1cfa:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1cfc:	001a      	movs	r2, r3
    1cfe:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    1d00:	b25b      	sxtb	r3, r3
    1d02:	2b00      	cmp	r3, #0
    1d04:	dbfb      	blt.n	1cfe <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1d06:	4a09      	ldr	r2, [pc, #36]	; (1d2c <system_gclk_gen_set_config+0xa8>)
    1d08:	6853      	ldr	r3, [r2, #4]
    1d0a:	2180      	movs	r1, #128	; 0x80
    1d0c:	0249      	lsls	r1, r1, #9
    1d0e:	400b      	ands	r3, r1
    1d10:	431d      	orrs	r5, r3
    1d12:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    1d14:	4b08      	ldr	r3, [pc, #32]	; (1d38 <system_gclk_gen_set_config+0xb4>)
    1d16:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1d18:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    1d1a:	2200      	movs	r2, #0
    1d1c:	e7d2      	b.n	1cc4 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1d1e:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    1d20:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1d22:	2380      	movs	r3, #128	; 0x80
    1d24:	029b      	lsls	r3, r3, #10
    1d26:	431d      	orrs	r5, r3
    1d28:	e7d2      	b.n	1cd0 <system_gclk_gen_set_config+0x4c>
    1d2a:	46c0      	nop			; (mov r8, r8)
    1d2c:	40000c00 	.word	0x40000c00
    1d30:	0000082d 	.word	0x0000082d
    1d34:	40000c08 	.word	0x40000c08
    1d38:	0000086d 	.word	0x0000086d

00001d3c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1d3c:	b510      	push	{r4, lr}
    1d3e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1d40:	4a0b      	ldr	r2, [pc, #44]	; (1d70 <system_gclk_gen_enable+0x34>)
    1d42:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1d44:	b25b      	sxtb	r3, r3
    1d46:	2b00      	cmp	r3, #0
    1d48:	dbfb      	blt.n	1d42 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    1d4a:	4b0a      	ldr	r3, [pc, #40]	; (1d74 <system_gclk_gen_enable+0x38>)
    1d4c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1d4e:	4b0a      	ldr	r3, [pc, #40]	; (1d78 <system_gclk_gen_enable+0x3c>)
    1d50:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1d52:	4a07      	ldr	r2, [pc, #28]	; (1d70 <system_gclk_gen_enable+0x34>)
    1d54:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1d56:	b25b      	sxtb	r3, r3
    1d58:	2b00      	cmp	r3, #0
    1d5a:	dbfb      	blt.n	1d54 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1d5c:	4a04      	ldr	r2, [pc, #16]	; (1d70 <system_gclk_gen_enable+0x34>)
    1d5e:	6851      	ldr	r1, [r2, #4]
    1d60:	2380      	movs	r3, #128	; 0x80
    1d62:	025b      	lsls	r3, r3, #9
    1d64:	430b      	orrs	r3, r1
    1d66:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    1d68:	4b04      	ldr	r3, [pc, #16]	; (1d7c <system_gclk_gen_enable+0x40>)
    1d6a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1d6c:	bd10      	pop	{r4, pc}
    1d6e:	46c0      	nop			; (mov r8, r8)
    1d70:	40000c00 	.word	0x40000c00
    1d74:	0000082d 	.word	0x0000082d
    1d78:	40000c04 	.word	0x40000c04
    1d7c:	0000086d 	.word	0x0000086d

00001d80 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1d80:	b570      	push	{r4, r5, r6, lr}
    1d82:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1d84:	4a1a      	ldr	r2, [pc, #104]	; (1df0 <system_gclk_gen_get_hz+0x70>)
    1d86:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1d88:	b25b      	sxtb	r3, r3
    1d8a:	2b00      	cmp	r3, #0
    1d8c:	dbfb      	blt.n	1d86 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    1d8e:	4b19      	ldr	r3, [pc, #100]	; (1df4 <system_gclk_gen_get_hz+0x74>)
    1d90:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1d92:	4b19      	ldr	r3, [pc, #100]	; (1df8 <system_gclk_gen_get_hz+0x78>)
    1d94:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1d96:	4a16      	ldr	r2, [pc, #88]	; (1df0 <system_gclk_gen_get_hz+0x70>)
    1d98:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1d9a:	b25b      	sxtb	r3, r3
    1d9c:	2b00      	cmp	r3, #0
    1d9e:	dbfb      	blt.n	1d98 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1da0:	4e13      	ldr	r6, [pc, #76]	; (1df0 <system_gclk_gen_get_hz+0x70>)
    1da2:	6870      	ldr	r0, [r6, #4]
    1da4:	04c0      	lsls	r0, r0, #19
    1da6:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1da8:	4b14      	ldr	r3, [pc, #80]	; (1dfc <system_gclk_gen_get_hz+0x7c>)
    1daa:	4798      	blx	r3
    1dac:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1dae:	4b12      	ldr	r3, [pc, #72]	; (1df8 <system_gclk_gen_get_hz+0x78>)
    1db0:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1db2:	6876      	ldr	r6, [r6, #4]
    1db4:	02f6      	lsls	r6, r6, #11
    1db6:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1db8:	4b11      	ldr	r3, [pc, #68]	; (1e00 <system_gclk_gen_get_hz+0x80>)
    1dba:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1dbc:	4a0c      	ldr	r2, [pc, #48]	; (1df0 <system_gclk_gen_get_hz+0x70>)
    1dbe:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1dc0:	b25b      	sxtb	r3, r3
    1dc2:	2b00      	cmp	r3, #0
    1dc4:	dbfb      	blt.n	1dbe <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1dc6:	4b0a      	ldr	r3, [pc, #40]	; (1df0 <system_gclk_gen_get_hz+0x70>)
    1dc8:	689c      	ldr	r4, [r3, #8]
    1dca:	0224      	lsls	r4, r4, #8
    1dcc:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    1dce:	4b0d      	ldr	r3, [pc, #52]	; (1e04 <system_gclk_gen_get_hz+0x84>)
    1dd0:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1dd2:	2e00      	cmp	r6, #0
    1dd4:	d107      	bne.n	1de6 <system_gclk_gen_get_hz+0x66>
    1dd6:	2c01      	cmp	r4, #1
    1dd8:	d907      	bls.n	1dea <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    1dda:	0021      	movs	r1, r4
    1ddc:	0028      	movs	r0, r5
    1dde:	4b0a      	ldr	r3, [pc, #40]	; (1e08 <system_gclk_gen_get_hz+0x88>)
    1de0:	4798      	blx	r3
    1de2:	0005      	movs	r5, r0
    1de4:	e001      	b.n	1dea <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1de6:	3401      	adds	r4, #1
    1de8:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    1dea:	0028      	movs	r0, r5
    1dec:	bd70      	pop	{r4, r5, r6, pc}
    1dee:	46c0      	nop			; (mov r8, r8)
    1df0:	40000c00 	.word	0x40000c00
    1df4:	0000082d 	.word	0x0000082d
    1df8:	40000c04 	.word	0x40000c04
    1dfc:	00001855 	.word	0x00001855
    1e00:	40000c08 	.word	0x40000c08
    1e04:	0000086d 	.word	0x0000086d
    1e08:	0000364d 	.word	0x0000364d

00001e0c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1e0c:	b510      	push	{r4, lr}
    1e0e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1e10:	4b06      	ldr	r3, [pc, #24]	; (1e2c <system_gclk_chan_enable+0x20>)
    1e12:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1e14:	4b06      	ldr	r3, [pc, #24]	; (1e30 <system_gclk_chan_enable+0x24>)
    1e16:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1e18:	4a06      	ldr	r2, [pc, #24]	; (1e34 <system_gclk_chan_enable+0x28>)
    1e1a:	8853      	ldrh	r3, [r2, #2]
    1e1c:	2180      	movs	r1, #128	; 0x80
    1e1e:	01c9      	lsls	r1, r1, #7
    1e20:	430b      	orrs	r3, r1
    1e22:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1e24:	4b04      	ldr	r3, [pc, #16]	; (1e38 <system_gclk_chan_enable+0x2c>)
    1e26:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1e28:	bd10      	pop	{r4, pc}
    1e2a:	46c0      	nop			; (mov r8, r8)
    1e2c:	0000082d 	.word	0x0000082d
    1e30:	40000c02 	.word	0x40000c02
    1e34:	40000c00 	.word	0x40000c00
    1e38:	0000086d 	.word	0x0000086d

00001e3c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1e3c:	b510      	push	{r4, lr}
    1e3e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1e40:	4b0f      	ldr	r3, [pc, #60]	; (1e80 <system_gclk_chan_disable+0x44>)
    1e42:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1e44:	4b0f      	ldr	r3, [pc, #60]	; (1e84 <system_gclk_chan_disable+0x48>)
    1e46:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1e48:	4a0f      	ldr	r2, [pc, #60]	; (1e88 <system_gclk_chan_disable+0x4c>)
    1e4a:	8853      	ldrh	r3, [r2, #2]
    1e4c:	051b      	lsls	r3, r3, #20
    1e4e:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1e50:	8853      	ldrh	r3, [r2, #2]
    1e52:	490e      	ldr	r1, [pc, #56]	; (1e8c <system_gclk_chan_disable+0x50>)
    1e54:	400b      	ands	r3, r1
    1e56:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1e58:	8853      	ldrh	r3, [r2, #2]
    1e5a:	490d      	ldr	r1, [pc, #52]	; (1e90 <system_gclk_chan_disable+0x54>)
    1e5c:	400b      	ands	r3, r1
    1e5e:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1e60:	0011      	movs	r1, r2
    1e62:	2280      	movs	r2, #128	; 0x80
    1e64:	01d2      	lsls	r2, r2, #7
    1e66:	884b      	ldrh	r3, [r1, #2]
    1e68:	4213      	tst	r3, r2
    1e6a:	d1fc      	bne.n	1e66 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1e6c:	4906      	ldr	r1, [pc, #24]	; (1e88 <system_gclk_chan_disable+0x4c>)
    1e6e:	884a      	ldrh	r2, [r1, #2]
    1e70:	0203      	lsls	r3, r0, #8
    1e72:	4806      	ldr	r0, [pc, #24]	; (1e8c <system_gclk_chan_disable+0x50>)
    1e74:	4002      	ands	r2, r0
    1e76:	4313      	orrs	r3, r2
    1e78:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    1e7a:	4b06      	ldr	r3, [pc, #24]	; (1e94 <system_gclk_chan_disable+0x58>)
    1e7c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1e7e:	bd10      	pop	{r4, pc}
    1e80:	0000082d 	.word	0x0000082d
    1e84:	40000c02 	.word	0x40000c02
    1e88:	40000c00 	.word	0x40000c00
    1e8c:	fffff0ff 	.word	0xfffff0ff
    1e90:	ffffbfff 	.word	0xffffbfff
    1e94:	0000086d 	.word	0x0000086d

00001e98 <system_gclk_chan_set_config>:
{
    1e98:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1e9a:	780c      	ldrb	r4, [r1, #0]
    1e9c:	0224      	lsls	r4, r4, #8
    1e9e:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    1ea0:	4b02      	ldr	r3, [pc, #8]	; (1eac <system_gclk_chan_set_config+0x14>)
    1ea2:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1ea4:	b2a4      	uxth	r4, r4
    1ea6:	4b02      	ldr	r3, [pc, #8]	; (1eb0 <system_gclk_chan_set_config+0x18>)
    1ea8:	805c      	strh	r4, [r3, #2]
}
    1eaa:	bd10      	pop	{r4, pc}
    1eac:	00001e3d 	.word	0x00001e3d
    1eb0:	40000c00 	.word	0x40000c00

00001eb4 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1eb4:	b510      	push	{r4, lr}
    1eb6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1eb8:	4b06      	ldr	r3, [pc, #24]	; (1ed4 <system_gclk_chan_get_hz+0x20>)
    1eba:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1ebc:	4b06      	ldr	r3, [pc, #24]	; (1ed8 <system_gclk_chan_get_hz+0x24>)
    1ebe:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1ec0:	4b06      	ldr	r3, [pc, #24]	; (1edc <system_gclk_chan_get_hz+0x28>)
    1ec2:	885c      	ldrh	r4, [r3, #2]
    1ec4:	0524      	lsls	r4, r4, #20
    1ec6:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    1ec8:	4b05      	ldr	r3, [pc, #20]	; (1ee0 <system_gclk_chan_get_hz+0x2c>)
    1eca:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1ecc:	0020      	movs	r0, r4
    1ece:	4b05      	ldr	r3, [pc, #20]	; (1ee4 <system_gclk_chan_get_hz+0x30>)
    1ed0:	4798      	blx	r3
}
    1ed2:	bd10      	pop	{r4, pc}
    1ed4:	0000082d 	.word	0x0000082d
    1ed8:	40000c02 	.word	0x40000c02
    1edc:	40000c00 	.word	0x40000c00
    1ee0:	0000086d 	.word	0x0000086d
    1ee4:	00001d81 	.word	0x00001d81

00001ee8 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1ee8:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1eea:	78d3      	ldrb	r3, [r2, #3]
    1eec:	2b00      	cmp	r3, #0
    1eee:	d135      	bne.n	1f5c <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1ef0:	7813      	ldrb	r3, [r2, #0]
    1ef2:	2b80      	cmp	r3, #128	; 0x80
    1ef4:	d029      	beq.n	1f4a <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1ef6:	061b      	lsls	r3, r3, #24
    1ef8:	2480      	movs	r4, #128	; 0x80
    1efa:	0264      	lsls	r4, r4, #9
    1efc:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1efe:	7854      	ldrb	r4, [r2, #1]
    1f00:	2502      	movs	r5, #2
    1f02:	43ac      	bics	r4, r5
    1f04:	d106      	bne.n	1f14 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1f06:	7894      	ldrb	r4, [r2, #2]
    1f08:	2c00      	cmp	r4, #0
    1f0a:	d120      	bne.n	1f4e <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    1f0c:	2480      	movs	r4, #128	; 0x80
    1f0e:	02a4      	lsls	r4, r4, #10
    1f10:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1f12:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1f14:	7854      	ldrb	r4, [r2, #1]
    1f16:	3c01      	subs	r4, #1
    1f18:	2c01      	cmp	r4, #1
    1f1a:	d91c      	bls.n	1f56 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1f1c:	040d      	lsls	r5, r1, #16
    1f1e:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1f20:	24a0      	movs	r4, #160	; 0xa0
    1f22:	05e4      	lsls	r4, r4, #23
    1f24:	432c      	orrs	r4, r5
    1f26:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1f28:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1f2a:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1f2c:	24d0      	movs	r4, #208	; 0xd0
    1f2e:	0624      	lsls	r4, r4, #24
    1f30:	432c      	orrs	r4, r5
    1f32:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1f34:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1f36:	78d4      	ldrb	r4, [r2, #3]
    1f38:	2c00      	cmp	r4, #0
    1f3a:	d122      	bne.n	1f82 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1f3c:	035b      	lsls	r3, r3, #13
    1f3e:	d51c      	bpl.n	1f7a <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1f40:	7893      	ldrb	r3, [r2, #2]
    1f42:	2b01      	cmp	r3, #1
    1f44:	d01e      	beq.n	1f84 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    1f46:	6141      	str	r1, [r0, #20]
    1f48:	e017      	b.n	1f7a <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    1f4a:	2300      	movs	r3, #0
    1f4c:	e7d7      	b.n	1efe <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1f4e:	24c0      	movs	r4, #192	; 0xc0
    1f50:	02e4      	lsls	r4, r4, #11
    1f52:	4323      	orrs	r3, r4
    1f54:	e7dd      	b.n	1f12 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1f56:	4c0d      	ldr	r4, [pc, #52]	; (1f8c <_system_pinmux_config+0xa4>)
    1f58:	4023      	ands	r3, r4
    1f5a:	e7df      	b.n	1f1c <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    1f5c:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1f5e:	040c      	lsls	r4, r1, #16
    1f60:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1f62:	23a0      	movs	r3, #160	; 0xa0
    1f64:	05db      	lsls	r3, r3, #23
    1f66:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1f68:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1f6a:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1f6c:	23d0      	movs	r3, #208	; 0xd0
    1f6e:	061b      	lsls	r3, r3, #24
    1f70:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1f72:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    1f74:	78d3      	ldrb	r3, [r2, #3]
    1f76:	2b00      	cmp	r3, #0
    1f78:	d103      	bne.n	1f82 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1f7a:	7853      	ldrb	r3, [r2, #1]
    1f7c:	3b01      	subs	r3, #1
    1f7e:	2b01      	cmp	r3, #1
    1f80:	d902      	bls.n	1f88 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    1f82:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    1f84:	6181      	str	r1, [r0, #24]
    1f86:	e7f8      	b.n	1f7a <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    1f88:	6081      	str	r1, [r0, #8]
}
    1f8a:	e7fa      	b.n	1f82 <_system_pinmux_config+0x9a>
    1f8c:	fffbffff 	.word	0xfffbffff

00001f90 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1f90:	b510      	push	{r4, lr}
    1f92:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1f94:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1f96:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1f98:	2900      	cmp	r1, #0
    1f9a:	d104      	bne.n	1fa6 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1f9c:	0943      	lsrs	r3, r0, #5
    1f9e:	01db      	lsls	r3, r3, #7
    1fa0:	4905      	ldr	r1, [pc, #20]	; (1fb8 <system_pinmux_pin_set_config+0x28>)
    1fa2:	468c      	mov	ip, r1
    1fa4:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1fa6:	241f      	movs	r4, #31
    1fa8:	4020      	ands	r0, r4
    1faa:	2101      	movs	r1, #1
    1fac:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    1fae:	0018      	movs	r0, r3
    1fb0:	4b02      	ldr	r3, [pc, #8]	; (1fbc <system_pinmux_pin_set_config+0x2c>)
    1fb2:	4798      	blx	r3
}
    1fb4:	bd10      	pop	{r4, pc}
    1fb6:	46c0      	nop			; (mov r8, r8)
    1fb8:	41004400 	.word	0x41004400
    1fbc:	00001ee9 	.word	0x00001ee9

00001fc0 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1fc0:	4770      	bx	lr
	...

00001fc4 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1fc4:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1fc6:	4b05      	ldr	r3, [pc, #20]	; (1fdc <system_init+0x18>)
    1fc8:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1fca:	4b05      	ldr	r3, [pc, #20]	; (1fe0 <system_init+0x1c>)
    1fcc:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1fce:	4b05      	ldr	r3, [pc, #20]	; (1fe4 <system_init+0x20>)
    1fd0:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1fd2:	4b05      	ldr	r3, [pc, #20]	; (1fe8 <system_init+0x24>)
    1fd4:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1fd6:	4b05      	ldr	r3, [pc, #20]	; (1fec <system_init+0x28>)
    1fd8:	4798      	blx	r3
}
    1fda:	bd10      	pop	{r4, pc}
    1fdc:	00001b05 	.word	0x00001b05
    1fe0:	0000089d 	.word	0x0000089d
    1fe4:	00001fc1 	.word	0x00001fc1
    1fe8:	00001fc1 	.word	0x00001fc1
    1fec:	00001fc1 	.word	0x00001fc1

00001ff0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1ff0:	e7fe      	b.n	1ff0 <Dummy_Handler>
	...

00001ff4 <Reset_Handler>:
{
    1ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    1ff6:	4a2a      	ldr	r2, [pc, #168]	; (20a0 <STACK_SIZE+0xa0>)
    1ff8:	4b2a      	ldr	r3, [pc, #168]	; (20a4 <STACK_SIZE+0xa4>)
    1ffa:	429a      	cmp	r2, r3
    1ffc:	d011      	beq.n	2022 <STACK_SIZE+0x22>
                for (; pDest < &_erelocate;) {
    1ffe:	001a      	movs	r2, r3
    2000:	4b29      	ldr	r3, [pc, #164]	; (20a8 <STACK_SIZE+0xa8>)
    2002:	429a      	cmp	r2, r3
    2004:	d20d      	bcs.n	2022 <STACK_SIZE+0x22>
    2006:	4a29      	ldr	r2, [pc, #164]	; (20ac <STACK_SIZE+0xac>)
    2008:	3303      	adds	r3, #3
    200a:	1a9b      	subs	r3, r3, r2
    200c:	089b      	lsrs	r3, r3, #2
    200e:	3301      	adds	r3, #1
    2010:	009b      	lsls	r3, r3, #2
    2012:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    2014:	4823      	ldr	r0, [pc, #140]	; (20a4 <STACK_SIZE+0xa4>)
    2016:	4922      	ldr	r1, [pc, #136]	; (20a0 <STACK_SIZE+0xa0>)
    2018:	588c      	ldr	r4, [r1, r2]
    201a:	5084      	str	r4, [r0, r2]
    201c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    201e:	429a      	cmp	r2, r3
    2020:	d1fa      	bne.n	2018 <STACK_SIZE+0x18>
        for (pDest = &_szero; pDest < &_ezero;) {
    2022:	4a23      	ldr	r2, [pc, #140]	; (20b0 <STACK_SIZE+0xb0>)
    2024:	4b23      	ldr	r3, [pc, #140]	; (20b4 <STACK_SIZE+0xb4>)
    2026:	429a      	cmp	r2, r3
    2028:	d20a      	bcs.n	2040 <STACK_SIZE+0x40>
    202a:	43d3      	mvns	r3, r2
    202c:	4921      	ldr	r1, [pc, #132]	; (20b4 <STACK_SIZE+0xb4>)
    202e:	185b      	adds	r3, r3, r1
    2030:	2103      	movs	r1, #3
    2032:	438b      	bics	r3, r1
    2034:	3304      	adds	r3, #4
    2036:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    2038:	2100      	movs	r1, #0
    203a:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    203c:	4293      	cmp	r3, r2
    203e:	d1fc      	bne.n	203a <STACK_SIZE+0x3a>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2040:	4a1d      	ldr	r2, [pc, #116]	; (20b8 <STACK_SIZE+0xb8>)
    2042:	21ff      	movs	r1, #255	; 0xff
    2044:	4b1d      	ldr	r3, [pc, #116]	; (20bc <STACK_SIZE+0xbc>)
    2046:	438b      	bics	r3, r1
    2048:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    204a:	39fd      	subs	r1, #253	; 0xfd
    204c:	2390      	movs	r3, #144	; 0x90
    204e:	005b      	lsls	r3, r3, #1
    2050:	4a1b      	ldr	r2, [pc, #108]	; (20c0 <STACK_SIZE+0xc0>)
    2052:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    2054:	4a1b      	ldr	r2, [pc, #108]	; (20c4 <STACK_SIZE+0xc4>)
    2056:	78d3      	ldrb	r3, [r2, #3]
    2058:	2503      	movs	r5, #3
    205a:	43ab      	bics	r3, r5
    205c:	2402      	movs	r4, #2
    205e:	4323      	orrs	r3, r4
    2060:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    2062:	78d3      	ldrb	r3, [r2, #3]
    2064:	270c      	movs	r7, #12
    2066:	43bb      	bics	r3, r7
    2068:	2608      	movs	r6, #8
    206a:	4333      	orrs	r3, r6
    206c:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    206e:	4b16      	ldr	r3, [pc, #88]	; (20c8 <STACK_SIZE+0xc8>)
    2070:	7b98      	ldrb	r0, [r3, #14]
    2072:	2230      	movs	r2, #48	; 0x30
    2074:	4390      	bics	r0, r2
    2076:	2220      	movs	r2, #32
    2078:	4310      	orrs	r0, r2
    207a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    207c:	7b99      	ldrb	r1, [r3, #14]
    207e:	43b9      	bics	r1, r7
    2080:	4331      	orrs	r1, r6
    2082:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    2084:	7b9a      	ldrb	r2, [r3, #14]
    2086:	43aa      	bics	r2, r5
    2088:	4322      	orrs	r2, r4
    208a:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    208c:	4a0f      	ldr	r2, [pc, #60]	; (20cc <STACK_SIZE+0xcc>)
    208e:	6853      	ldr	r3, [r2, #4]
    2090:	2180      	movs	r1, #128	; 0x80
    2092:	430b      	orrs	r3, r1
    2094:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    2096:	4b0e      	ldr	r3, [pc, #56]	; (20d0 <STACK_SIZE+0xd0>)
    2098:	4798      	blx	r3
        main();
    209a:	4b0e      	ldr	r3, [pc, #56]	; (20d4 <STACK_SIZE+0xd4>)
    209c:	4798      	blx	r3
    209e:	e7fe      	b.n	209e <STACK_SIZE+0x9e>
    20a0:	00006f28 	.word	0x00006f28
    20a4:	20000000 	.word	0x20000000
    20a8:	200001c8 	.word	0x200001c8
    20ac:	20000004 	.word	0x20000004
    20b0:	200001c8 	.word	0x200001c8
    20b4:	20000ad0 	.word	0x20000ad0
    20b8:	e000ed00 	.word	0xe000ed00
    20bc:	00000000 	.word	0x00000000
    20c0:	41007000 	.word	0x41007000
    20c4:	41005000 	.word	0x41005000
    20c8:	41004800 	.word	0x41004800
    20cc:	41004000 	.word	0x41004000
    20d0:	0000398d 	.word	0x0000398d
    20d4:	00003591 	.word	0x00003591

000020d8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    20d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    20da:	46c6      	mov	lr, r8
    20dc:	b500      	push	{lr}
    20de:	000c      	movs	r4, r1
    20e0:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    20e2:	2800      	cmp	r0, #0
    20e4:	d10f      	bne.n	2106 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    20e6:	2a00      	cmp	r2, #0
    20e8:	dd11      	ble.n	210e <_read+0x36>
    20ea:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    20ec:	4e09      	ldr	r6, [pc, #36]	; (2114 <_read+0x3c>)
    20ee:	4d0a      	ldr	r5, [pc, #40]	; (2118 <_read+0x40>)
    20f0:	6830      	ldr	r0, [r6, #0]
    20f2:	0021      	movs	r1, r4
    20f4:	682b      	ldr	r3, [r5, #0]
    20f6:	4798      	blx	r3
		ptr++;
    20f8:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    20fa:	42bc      	cmp	r4, r7
    20fc:	d1f8      	bne.n	20f0 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    20fe:	4640      	mov	r0, r8
    2100:	bc04      	pop	{r2}
    2102:	4690      	mov	r8, r2
    2104:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    2106:	2301      	movs	r3, #1
    2108:	425b      	negs	r3, r3
    210a:	4698      	mov	r8, r3
    210c:	e7f7      	b.n	20fe <_read+0x26>
	for (; len > 0; --len) {
    210e:	4680      	mov	r8, r0
    2110:	e7f5      	b.n	20fe <_read+0x26>
    2112:	46c0      	nop			; (mov r8, r8)
    2114:	200002e4 	.word	0x200002e4
    2118:	200002dc 	.word	0x200002dc

0000211c <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    211c:	b5f0      	push	{r4, r5, r6, r7, lr}
    211e:	46c6      	mov	lr, r8
    2120:	b500      	push	{lr}
    2122:	000e      	movs	r6, r1
    2124:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    2126:	3801      	subs	r0, #1
    2128:	2802      	cmp	r0, #2
    212a:	d810      	bhi.n	214e <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    212c:	2a00      	cmp	r2, #0
    212e:	d011      	beq.n	2154 <_write+0x38>
    2130:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    2132:	4b0c      	ldr	r3, [pc, #48]	; (2164 <_write+0x48>)
    2134:	4698      	mov	r8, r3
    2136:	4f0c      	ldr	r7, [pc, #48]	; (2168 <_write+0x4c>)
    2138:	4643      	mov	r3, r8
    213a:	6818      	ldr	r0, [r3, #0]
    213c:	5d31      	ldrb	r1, [r6, r4]
    213e:	683b      	ldr	r3, [r7, #0]
    2140:	4798      	blx	r3
    2142:	2800      	cmp	r0, #0
    2144:	db08      	blt.n	2158 <_write+0x3c>
			return -1;
		}
		++nChars;
    2146:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    2148:	42a5      	cmp	r5, r4
    214a:	d1f5      	bne.n	2138 <_write+0x1c>
    214c:	e006      	b.n	215c <_write+0x40>
		return -1;
    214e:	2401      	movs	r4, #1
    2150:	4264      	negs	r4, r4
    2152:	e003      	b.n	215c <_write+0x40>
	for (; len != 0; --len) {
    2154:	0014      	movs	r4, r2
    2156:	e001      	b.n	215c <_write+0x40>
			return -1;
    2158:	2401      	movs	r4, #1
    215a:	4264      	negs	r4, r4
	}
	return nChars;
}
    215c:	0020      	movs	r0, r4
    215e:	bc04      	pop	{r2}
    2160:	4690      	mov	r8, r2
    2162:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2164:	200002e4 	.word	0x200002e4
    2168:	200002e0 	.word	0x200002e0

0000216c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    216c:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    216e:	4a06      	ldr	r2, [pc, #24]	; (2188 <_sbrk+0x1c>)
    2170:	6812      	ldr	r2, [r2, #0]
    2172:	2a00      	cmp	r2, #0
    2174:	d004      	beq.n	2180 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    2176:	4a04      	ldr	r2, [pc, #16]	; (2188 <_sbrk+0x1c>)
    2178:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    217a:	18c3      	adds	r3, r0, r3
    217c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    217e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    2180:	4902      	ldr	r1, [pc, #8]	; (218c <_sbrk+0x20>)
    2182:	4a01      	ldr	r2, [pc, #4]	; (2188 <_sbrk+0x1c>)
    2184:	6011      	str	r1, [r2, #0]
    2186:	e7f6      	b.n	2176 <_sbrk+0xa>
    2188:	200002a0 	.word	0x200002a0
    218c:	20002ad0 	.word	0x20002ad0

00002190 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    2190:	2001      	movs	r0, #1
    2192:	4240      	negs	r0, r0
    2194:	4770      	bx	lr

00002196 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    2196:	2380      	movs	r3, #128	; 0x80
    2198:	019b      	lsls	r3, r3, #6
    219a:	604b      	str	r3, [r1, #4]

	return 0;
}
    219c:	2000      	movs	r0, #0
    219e:	4770      	bx	lr

000021a0 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    21a0:	2001      	movs	r0, #1
    21a2:	4770      	bx	lr

000021a4 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    21a4:	2000      	movs	r0, #0
    21a6:	4770      	bx	lr

000021a8 <drawChar>:
uint16_t xCharPos = 0;
uint16_t yCharPos = 0;


void drawChar(uint8_t character)
{
    21a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    21aa:	46d6      	mov	lr, sl
    21ac:	464f      	mov	r7, r9
    21ae:	4646      	mov	r6, r8
    21b0:	b5c0      	push	{r6, r7, lr}
    21b2:	0004      	movs	r4, r0
	uint16_t x = xCharPos;
    21b4:	4b2a      	ldr	r3, [pc, #168]	; (2260 <drawChar+0xb8>)
    21b6:	881b      	ldrh	r3, [r3, #0]
	uint16_t y = yCharPos;
    21b8:	4a2a      	ldr	r2, [pc, #168]	; (2264 <drawChar+0xbc>)
    21ba:	8815      	ldrh	r5, [r2, #0]
	
	consoleDisplay[xCharPos][yCharPos] = character;
    21bc:	005a      	lsls	r2, r3, #1
    21be:	18d2      	adds	r2, r2, r3
    21c0:	00d2      	lsls	r2, r2, #3
    21c2:	4829      	ldr	r0, [pc, #164]	; (2268 <drawChar+0xc0>)
    21c4:	1882      	adds	r2, r0, r2
    21c6:	5554      	strb	r4, [r2, r5]
	
	REG_PORT_OUTCLR1 = LCD_CS;
    21c8:	2180      	movs	r1, #128	; 0x80
    21ca:	03c9      	lsls	r1, r1, #15
    21cc:	4a27      	ldr	r2, [pc, #156]	; (226c <drawChar+0xc4>)
    21ce:	6011      	str	r1, [r2, #0]
	setXY(x*10,y*20,x*10+9,y*20+19);
    21d0:	0098      	lsls	r0, r3, #2
    21d2:	181b      	adds	r3, r3, r0
    21d4:	005b      	lsls	r3, r3, #1
    21d6:	b298      	uxth	r0, r3
    21d8:	2114      	movs	r1, #20
    21da:	4369      	muls	r1, r5
    21dc:	b289      	uxth	r1, r1
    21de:	000b      	movs	r3, r1
    21e0:	3313      	adds	r3, #19
    21e2:	b29b      	uxth	r3, r3
    21e4:	0002      	movs	r2, r0
    21e6:	3209      	adds	r2, #9
    21e8:	b292      	uxth	r2, r2
    21ea:	4d21      	ldr	r5, [pc, #132]	; (2270 <drawChar+0xc8>)
    21ec:	47a8      	blx	r5
    21ee:	4a21      	ldr	r2, [pc, #132]	; (2274 <drawChar+0xcc>)
    21f0:	00a5      	lsls	r5, r4, #2
    21f2:	192d      	adds	r5, r5, r4
    21f4:	00ab      	lsls	r3, r5, #2
    21f6:	18ed      	adds	r5, r5, r3
    21f8:	1955      	adds	r5, r2, r5
    21fa:	3401      	adds	r4, #1
    21fc:	00a3      	lsls	r3, r4, #2
    21fe:	191c      	adds	r4, r3, r4
    2200:	00a3      	lsls	r3, r4, #2
    2202:	18e4      	adds	r4, r4, r3
    2204:	4692      	mov	sl, r2
    2206:	44a2      	add	sl, r4
			{
				setPixel((fore_Color_High<<8)|fore_Color_Low);	
			}
			else
			{
				setPixel((back_Color_High<<8)|back_Color_Low);
    2208:	4b1b      	ldr	r3, [pc, #108]	; (2278 <drawChar+0xd0>)
    220a:	4699      	mov	r9, r3
    220c:	4b1b      	ldr	r3, [pc, #108]	; (227c <drawChar+0xd4>)
    220e:	4698      	mov	r8, r3
    2210:	4f1b      	ldr	r7, [pc, #108]	; (2280 <drawChar+0xd8>)
				setPixel((fore_Color_High<<8)|fore_Color_Low);	
    2212:	4e1c      	ldr	r6, [pc, #112]	; (2284 <drawChar+0xdc>)
    2214:	e019      	b.n	224a <drawChar+0xa2>
				setPixel((back_Color_High<<8)|back_Color_Low);
    2216:	464b      	mov	r3, r9
    2218:	8818      	ldrh	r0, [r3, #0]
    221a:	0200      	lsls	r0, r0, #8
    221c:	4643      	mov	r3, r8
    221e:	881b      	ldrh	r3, [r3, #0]
    2220:	4318      	orrs	r0, r3
    2222:	b280      	uxth	r0, r0
    2224:	47b8      	blx	r7
		for(int j=0;j<8;j++)
    2226:	3c01      	subs	r4, #1
    2228:	d30c      	bcc.n	2244 <drawChar+0x9c>
			if((CodePage437[character][i]&(1<<(7-j)))!=0)
    222a:	782b      	ldrb	r3, [r5, #0]
    222c:	4123      	asrs	r3, r4
    222e:	07db      	lsls	r3, r3, #31
    2230:	d5f1      	bpl.n	2216 <drawChar+0x6e>
				setPixel((fore_Color_High<<8)|fore_Color_Low);	
    2232:	8830      	ldrh	r0, [r6, #0]
    2234:	0200      	lsls	r0, r0, #8
    2236:	4b14      	ldr	r3, [pc, #80]	; (2288 <drawChar+0xe0>)
    2238:	881b      	ldrh	r3, [r3, #0]
    223a:	4318      	orrs	r0, r3
    223c:	b280      	uxth	r0, r0
    223e:	4b10      	ldr	r3, [pc, #64]	; (2280 <drawChar+0xd8>)
    2240:	4798      	blx	r3
    2242:	e7f0      	b.n	2226 <drawChar+0x7e>
    2244:	3501      	adds	r5, #1
	for(uint16_t i=0; i <= 24; i++)
    2246:	4555      	cmp	r5, sl
    2248:	d001      	beq.n	224e <drawChar+0xa6>
{
    224a:	2407      	movs	r4, #7
    224c:	e7ed      	b.n	222a <drawChar+0x82>
			}

		}
	}
	REG_PORT_OUTSET1 = LCD_CS;
    224e:	2280      	movs	r2, #128	; 0x80
    2250:	03d2      	lsls	r2, r2, #15
    2252:	4b0e      	ldr	r3, [pc, #56]	; (228c <drawChar+0xe4>)
    2254:	601a      	str	r2, [r3, #0]
	

}
    2256:	bc1c      	pop	{r2, r3, r4}
    2258:	4690      	mov	r8, r2
    225a:	4699      	mov	r9, r3
    225c:	46a2      	mov	sl, r4
    225e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2260:	200002a4 	.word	0x200002a4
    2264:	200002a6 	.word	0x200002a6
    2268:	20000320 	.word	0x20000320
    226c:	41004494 	.word	0x41004494
    2270:	00002d35 	.word	0x00002d35
    2274:	000052a0 	.word	0x000052a0
    2278:	20000aa6 	.word	0x20000aa6
    227c:	20000aa0 	.word	0x20000aa0
    2280:	00002ef5 	.word	0x00002ef5
    2284:	20000aa2 	.word	0x20000aa2
    2288:	20000aa4 	.word	0x20000aa4
    228c:	41004498 	.word	0x41004498

00002290 <newLine>:

void newLine(void)
{
    2290:	b5f0      	push	{r4, r5, r6, r7, lr}
    2292:	46de      	mov	lr, fp
    2294:	4657      	mov	r7, sl
    2296:	464e      	mov	r6, r9
    2298:	4645      	mov	r5, r8
    229a:	b5e0      	push	{r5, r6, r7, lr}
    229c:	4c56      	ldr	r4, [pc, #344]	; (23f8 <newLine+0x168>)
    229e:	44a5      	add	sp, r4
    22a0:	4856      	ldr	r0, [pc, #344]	; (23fc <newLine+0x16c>)
    22a2:	23f0      	movs	r3, #240	; 0xf0
    22a4:	00db      	lsls	r3, r3, #3
    22a6:	18c4      	adds	r4, r0, r3
    22a8:	e002      	b.n	22b0 <newLine+0x20>
    22aa:	3018      	adds	r0, #24
	/*
	This is split into two parts; the first moves consoledisplay around
	so the first line is deleted and all other lines are moved up one line
	*/
	
	for(int i = 0 ; i < 80 ; i++)
    22ac:	42a0      	cmp	r0, r4
    22ae:	d008      	beq.n	22c2 <newLine+0x32>
    22b0:	0001      	movs	r1, r0
    22b2:	3117      	adds	r1, #23
{
    22b4:	0003      	movs	r3, r0
	{
		for(int j = 1 ; j < 24 ; j++)
		{
			consoleDisplay[i][j-1] = consoleDisplay[i][j];
    22b6:	785a      	ldrb	r2, [r3, #1]
    22b8:	701a      	strb	r2, [r3, #0]
    22ba:	3301      	adds	r3, #1
		for(int j = 1 ; j < 24 ; j++)
    22bc:	428b      	cmp	r3, r1
    22be:	d1fa      	bne.n	22b6 <newLine+0x26>
    22c0:	e7f3      	b.n	22aa <newLine+0x1a>
    22c2:	4b4f      	ldr	r3, [pc, #316]	; (2400 <newLine+0x170>)
    22c4:	22f0      	movs	r2, #240	; 0xf0
    22c6:	00d2      	lsls	r2, r2, #3
    22c8:	1899      	adds	r1, r3, r2
		}
	}
	
	for(int k = 0 ; k < 80 ; k ++)
	{
		consoleDisplay[k][23] = 0x00;
    22ca:	2200      	movs	r2, #0
    22cc:	701a      	strb	r2, [r3, #0]
    22ce:	3318      	adds	r3, #24
	for(int k = 0 ; k < 80 ; k ++)
    22d0:	428b      	cmp	r3, r1
    22d2:	d1fb      	bne.n	22cc <newLine+0x3c>
    22d4:	2300      	movs	r3, #0
    22d6:	9300      	str	r3, [sp, #0]
			
	for(uint16_t row = 0 ; row < 460 ; row++)
	{
		//Per page 40 of datasheet (5.1.2.7, 16-bit
		//parallel interface for data ram read.
		REG_PORT_OUTCLR1 = LCD_CS;
    22d8:	4b4a      	ldr	r3, [pc, #296]	; (2404 <newLine+0x174>)
    22da:	4698      	mov	r8, r3
		setXY(0, row+20, 799, row+20);
		//Send'Memory read' command 0x2E00, no data bit
		LCD_Write_COM16(0x2E,0x00);
		REG_PORT_OUTSET1 = LCD_DC;
    22dc:	4f4a      	ldr	r7, [pc, #296]	; (2408 <newLine+0x178>)
		
		
		//Read pixel data into the display	
		for(uint16_t getpixel = 0 ; getpixel < 800 ; getpixel++)
		{
			REG_PORT_OUTCLR1 = LCD_RD;
    22de:	2680      	movs	r6, #128	; 0x80
    22e0:	0276      	lsls	r6, r6, #9
    22e2:	e046      	b.n	2372 <newLine+0xe2>
			//This can be expanded with else if for the MSBs
			//of all the colors; see datasheet page 40.
			if((PORT->Group[1].IN.reg & PORT_PB07) != 0)
				rowPixel[getpixel] = 0xFF;
			else
				rowPixel[getpixel] = 0x00;
    22e4:	4653      	mov	r3, sl
    22e6:	7023      	strb	r3, [r4, #0]
			//dummy read, because pixel data broken up
			//per datasheet page 40. Everything after
			//the dummy write is BLUE pixels. Do we ever
			//need blue? IDK.
			
			REG_PORT_OUTCLR1 = LCD_RD;
    22e8:	4643      	mov	r3, r8
    22ea:	601e      	str	r6, [r3, #0]
			REG_PORT_OUTSET1 = LCD_RD;
    22ec:	603e      	str	r6, [r7, #0]
    22ee:	3401      	adds	r4, #1
		for(uint16_t getpixel = 0 ; getpixel < 800 ; getpixel++)
    22f0:	4564      	cmp	r4, ip
    22f2:	d008      	beq.n	2306 <newLine+0x76>
			REG_PORT_OUTCLR1 = LCD_RD;
    22f4:	4643      	mov	r3, r8
    22f6:	601e      	str	r6, [r3, #0]
			REG_PORT_OUTSET1 = LCD_RD;
    22f8:	603e      	str	r6, [r7, #0]
			if((PORT->Group[1].IN.reg & PORT_PB07) != 0)
    22fa:	5843      	ldr	r3, [r0, r1]
    22fc:	421a      	tst	r2, r3
    22fe:	d0f1      	beq.n	22e4 <newLine+0x54>
				rowPixel[getpixel] = 0xFF;
    2300:	464b      	mov	r3, r9
    2302:	7023      	strb	r3, [r4, #0]
    2304:	e7f0      	b.n	22e8 <newLine+0x58>
    2306:	9401      	str	r4, [sp, #4]
		}
		
		REG_PORT_OUTSET1 = LCD_DC;
    2308:	2380      	movs	r3, #128	; 0x80
    230a:	041b      	lsls	r3, r3, #16
    230c:	603b      	str	r3, [r7, #0]
		REG_PORT_DIRSET1 = 0x0000FFFF;
    230e:	4a3f      	ldr	r2, [pc, #252]	; (240c <newLine+0x17c>)
    2310:	4b3f      	ldr	r3, [pc, #252]	; (2410 <newLine+0x180>)
    2312:	601a      	str	r2, [r3, #0]
		
		//now, read out that line of the display
		setXY(0, row, 799, row);	
    2314:	9900      	ldr	r1, [sp, #0]
    2316:	000b      	movs	r3, r1
    2318:	4a3e      	ldr	r2, [pc, #248]	; (2414 <newLine+0x184>)
    231a:	2000      	movs	r0, #0
    231c:	4c3e      	ldr	r4, [pc, #248]	; (2418 <newLine+0x188>)
    231e:	47a0      	blx	r4
		for(uint16_t writepixel = 0 ; writepixel < 800 ; writepixel++)
		{
			if((rowPixel[writepixel] == 0xFF))
				setPixel((fore_Color_High<<8)|fore_Color_Low);
			else
				setPixel((back_Color_High<<8)|back_Color_Low);
    2320:	4b3e      	ldr	r3, [pc, #248]	; (241c <newLine+0x18c>)
    2322:	469b      	mov	fp, r3
    2324:	4b3e      	ldr	r3, [pc, #248]	; (2420 <newLine+0x190>)
    2326:	469a      	mov	sl, r3
    2328:	4b3e      	ldr	r3, [pc, #248]	; (2424 <newLine+0x194>)
    232a:	4699      	mov	r9, r3
    232c:	9c01      	ldr	r4, [sp, #4]
    232e:	e00b      	b.n	2348 <newLine+0xb8>
				setPixel((fore_Color_High<<8)|fore_Color_Low);
    2330:	4b3d      	ldr	r3, [pc, #244]	; (2428 <newLine+0x198>)
    2332:	8818      	ldrh	r0, [r3, #0]
    2334:	0200      	lsls	r0, r0, #8
    2336:	4b3d      	ldr	r3, [pc, #244]	; (242c <newLine+0x19c>)
    2338:	881b      	ldrh	r3, [r3, #0]
    233a:	4318      	orrs	r0, r3
    233c:	b280      	uxth	r0, r0
    233e:	4b39      	ldr	r3, [pc, #228]	; (2424 <newLine+0x194>)
    2340:	4798      	blx	r3
    2342:	3501      	adds	r5, #1
		for(uint16_t writepixel = 0 ; writepixel < 800 ; writepixel++)
    2344:	42a5      	cmp	r5, r4
    2346:	d00b      	beq.n	2360 <newLine+0xd0>
			if((rowPixel[writepixel] == 0xFF))
    2348:	782b      	ldrb	r3, [r5, #0]
    234a:	2bff      	cmp	r3, #255	; 0xff
    234c:	d0f0      	beq.n	2330 <newLine+0xa0>
				setPixel((back_Color_High<<8)|back_Color_Low);
    234e:	465b      	mov	r3, fp
    2350:	8818      	ldrh	r0, [r3, #0]
    2352:	0200      	lsls	r0, r0, #8
    2354:	4653      	mov	r3, sl
    2356:	881b      	ldrh	r3, [r3, #0]
    2358:	4318      	orrs	r0, r3
    235a:	b280      	uxth	r0, r0
    235c:	47c8      	blx	r9
    235e:	e7f0      	b.n	2342 <newLine+0xb2>
	for(uint16_t row = 0 ; row < 460 ; row++)
    2360:	9b00      	ldr	r3, [sp, #0]
    2362:	3301      	adds	r3, #1
    2364:	b29b      	uxth	r3, r3
    2366:	001a      	movs	r2, r3
    2368:	9300      	str	r3, [sp, #0]
    236a:	23e6      	movs	r3, #230	; 0xe6
    236c:	005b      	lsls	r3, r3, #1
    236e:	429a      	cmp	r2, r3
    2370:	d031      	beq.n	23d6 <newLine+0x146>
		REG_PORT_OUTCLR1 = LCD_CS;
    2372:	4643      	mov	r3, r8
    2374:	2280      	movs	r2, #128	; 0x80
    2376:	03d2      	lsls	r2, r2, #15
    2378:	601a      	str	r2, [r3, #0]
		setXY(0, row+20, 799, row+20);
    237a:	9900      	ldr	r1, [sp, #0]
    237c:	3114      	adds	r1, #20
    237e:	b289      	uxth	r1, r1
    2380:	000b      	movs	r3, r1
    2382:	4a24      	ldr	r2, [pc, #144]	; (2414 <newLine+0x184>)
    2384:	2000      	movs	r0, #0
    2386:	4c24      	ldr	r4, [pc, #144]	; (2418 <newLine+0x188>)
    2388:	47a0      	blx	r4
		LCD_Write_COM16(0x2E,0x00);
    238a:	2100      	movs	r1, #0
    238c:	202e      	movs	r0, #46	; 0x2e
    238e:	4b28      	ldr	r3, [pc, #160]	; (2430 <newLine+0x1a0>)
    2390:	4798      	blx	r3
		REG_PORT_OUTSET1 = LCD_DC;
    2392:	2380      	movs	r3, #128	; 0x80
    2394:	041b      	lsls	r3, r3, #16
    2396:	603b      	str	r3, [r7, #0]
		REG_PORT_OUTCLR1 = LCD_RD;
    2398:	4643      	mov	r3, r8
    239a:	2280      	movs	r2, #128	; 0x80
    239c:	0252      	lsls	r2, r2, #9
    239e:	601a      	str	r2, [r3, #0]
		REG_PORT_OUTSET1 = LCD_RD;
    23a0:	603a      	str	r2, [r7, #0]
		REG_PORT_DIRCLR1 = PORT_PB07;
    23a2:	2280      	movs	r2, #128	; 0x80
    23a4:	4b23      	ldr	r3, [pc, #140]	; (2434 <newLine+0x1a4>)
    23a6:	601a      	str	r2, [r3, #0]
		PORT->Group[1].PINCFG[7].bit.INEN = 1;
    23a8:	4a23      	ldr	r2, [pc, #140]	; (2438 <newLine+0x1a8>)
    23aa:	23c7      	movs	r3, #199	; 0xc7
    23ac:	5cd1      	ldrb	r1, [r2, r3]
    23ae:	2002      	movs	r0, #2
    23b0:	4301      	orrs	r1, r0
    23b2:	54d1      	strb	r1, [r2, r3]
		PORT->Group[1].PINCFG[7].bit.PULLEN = 1;
    23b4:	5cd1      	ldrb	r1, [r2, r3]
    23b6:	2004      	movs	r0, #4
    23b8:	4301      	orrs	r1, r0
    23ba:	54d1      	strb	r1, [r2, r3]
    23bc:	ad02      	add	r5, sp, #8
    23be:	abca      	add	r3, sp, #808	; 0x328
    23c0:	469c      	mov	ip, r3
    23c2:	9501      	str	r5, [sp, #4]
			if((PORT->Group[1].IN.reg & PORT_PB07) != 0)
    23c4:	0010      	movs	r0, r2
    23c6:	21a0      	movs	r1, #160	; 0xa0
    23c8:	2280      	movs	r2, #128	; 0x80
				rowPixel[getpixel] = 0x00;
    23ca:	2300      	movs	r3, #0
    23cc:	469a      	mov	sl, r3
				rowPixel[getpixel] = 0xFF;
    23ce:	33ff      	adds	r3, #255	; 0xff
    23d0:	4699      	mov	r9, r3
    23d2:	002c      	movs	r4, r5
    23d4:	e78e      	b.n	22f4 <newLine+0x64>
		}
	}
	
	//clear the last character line of the display
	//and fix the console text buffer
	fillRectBackColor(0, 460, 799, 480);
    23d6:	3314      	adds	r3, #20
    23d8:	4a0e      	ldr	r2, [pc, #56]	; (2414 <newLine+0x184>)
    23da:	21e6      	movs	r1, #230	; 0xe6
    23dc:	0049      	lsls	r1, r1, #1
    23de:	2000      	movs	r0, #0
    23e0:	4c16      	ldr	r4, [pc, #88]	; (243c <newLine+0x1ac>)
    23e2:	47a0      	blx	r4
	
	
}
    23e4:	23cb      	movs	r3, #203	; 0xcb
    23e6:	009b      	lsls	r3, r3, #2
    23e8:	449d      	add	sp, r3
    23ea:	bc3c      	pop	{r2, r3, r4, r5}
    23ec:	4690      	mov	r8, r2
    23ee:	4699      	mov	r9, r3
    23f0:	46a2      	mov	sl, r4
    23f2:	46ab      	mov	fp, r5
    23f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    23f6:	46c0      	nop			; (mov r8, r8)
    23f8:	fffffcd4 	.word	0xfffffcd4
    23fc:	20000320 	.word	0x20000320
    2400:	20000337 	.word	0x20000337
    2404:	41004494 	.word	0x41004494
    2408:	41004498 	.word	0x41004498
    240c:	0000ffff 	.word	0x0000ffff
    2410:	41004488 	.word	0x41004488
    2414:	0000031f 	.word	0x0000031f
    2418:	00002d35 	.word	0x00002d35
    241c:	20000aa6 	.word	0x20000aa6
    2420:	20000aa0 	.word	0x20000aa0
    2424:	00002ef5 	.word	0x00002ef5
    2428:	20000aa2 	.word	0x20000aa2
    242c:	20000aa4 	.word	0x20000aa4
    2430:	00002f61 	.word	0x00002f61
    2434:	41004484 	.word	0x41004484
    2438:	41004400 	.word	0x41004400
    243c:	00002e35 	.word	0x00002e35

00002440 <blinkCursor>:

void blinkCursor(void)
{
    2440:	b5f0      	push	{r4, r5, r6, r7, lr}
    2442:	46d6      	mov	lr, sl
    2444:	464f      	mov	r7, r9
    2446:	4646      	mov	r6, r8
    2448:	b5c0      	push	{r6, r7, lr}
	uint16_t x = xCharPos;
    244a:	4b47      	ldr	r3, [pc, #284]	; (2568 <blinkCursor+0x128>)
    244c:	881b      	ldrh	r3, [r3, #0]
	uint16_t y = yCharPos;
    244e:	4a47      	ldr	r2, [pc, #284]	; (256c <blinkCursor+0x12c>)
    2450:	8815      	ldrh	r5, [r2, #0]
	unsigned char character = consoleDisplay[x][y];
    2452:	005a      	lsls	r2, r3, #1
    2454:	18d2      	adds	r2, r2, r3
    2456:	00d2      	lsls	r2, r2, #3
    2458:	4845      	ldr	r0, [pc, #276]	; (2570 <blinkCursor+0x130>)
    245a:	1882      	adds	r2, r0, r2
    245c:	5d54      	ldrb	r4, [r2, r5]
	setXY(x*10,y*20,x*10+9,y*20+19);
    245e:	0098      	lsls	r0, r3, #2
    2460:	181b      	adds	r3, r3, r0
    2462:	005b      	lsls	r3, r3, #1
    2464:	b298      	uxth	r0, r3
    2466:	2114      	movs	r1, #20
    2468:	4369      	muls	r1, r5
    246a:	b289      	uxth	r1, r1
    246c:	000b      	movs	r3, r1
    246e:	3313      	adds	r3, #19
    2470:	b29b      	uxth	r3, r3
    2472:	0002      	movs	r2, r0
    2474:	3209      	adds	r2, #9
    2476:	b292      	uxth	r2, r2
    2478:	4d3e      	ldr	r5, [pc, #248]	; (2574 <blinkCursor+0x134>)
    247a:	47a8      	blx	r5
	REG_PORT_OUTCLR1 = LCD_CS;
    247c:	2280      	movs	r2, #128	; 0x80
    247e:	03d2      	lsls	r2, r2, #15
    2480:	4b3d      	ldr	r3, [pc, #244]	; (2578 <blinkCursor+0x138>)
    2482:	601a      	str	r2, [r3, #0]
	if(cursorBlinkState)
    2484:	4b3d      	ldr	r3, [pc, #244]	; (257c <blinkCursor+0x13c>)
    2486:	781b      	ldrb	r3, [r3, #0]
    2488:	2b00      	cmp	r3, #0
    248a:	d113      	bne.n	24b4 <blinkCursor+0x74>
    248c:	4a3c      	ldr	r2, [pc, #240]	; (2580 <blinkCursor+0x140>)
    248e:	00a5      	lsls	r5, r4, #2
    2490:	192d      	adds	r5, r5, r4
    2492:	00ab      	lsls	r3, r5, #2
    2494:	18ed      	adds	r5, r5, r3
    2496:	1955      	adds	r5, r2, r5
    2498:	3401      	adds	r4, #1
    249a:	00a3      	lsls	r3, r4, #2
    249c:	191c      	adds	r4, r3, r4
    249e:	00a3      	lsls	r3, r4, #2
    24a0:	18e4      	adds	r4, r4, r3
    24a2:	4692      	mov	sl, r2
    24a4:	44a2      	add	sl, r4
				{
					setPixel((fore_Color_High<<8)|fore_Color_Low);
				}
				else
				{
					setPixel((back_Color_High<<8)|back_Color_Low);
    24a6:	4b37      	ldr	r3, [pc, #220]	; (2584 <blinkCursor+0x144>)
    24a8:	4699      	mov	r9, r3
    24aa:	4b37      	ldr	r3, [pc, #220]	; (2588 <blinkCursor+0x148>)
    24ac:	4698      	mov	r8, r3
    24ae:	4f37      	ldr	r7, [pc, #220]	; (258c <blinkCursor+0x14c>)
					setPixel((fore_Color_High<<8)|fore_Color_Low);
    24b0:	4e37      	ldr	r6, [pc, #220]	; (2590 <blinkCursor+0x150>)
    24b2:	e049      	b.n	2548 <blinkCursor+0x108>
    24b4:	4a32      	ldr	r2, [pc, #200]	; (2580 <blinkCursor+0x140>)
    24b6:	00a5      	lsls	r5, r4, #2
    24b8:	192d      	adds	r5, r5, r4
    24ba:	00ab      	lsls	r3, r5, #2
    24bc:	18ed      	adds	r5, r5, r3
    24be:	1955      	adds	r5, r2, r5
    24c0:	3401      	adds	r4, #1
    24c2:	00a3      	lsls	r3, r4, #2
    24c4:	191c      	adds	r4, r3, r4
    24c6:	00a3      	lsls	r3, r4, #2
    24c8:	18e4      	adds	r4, r4, r3
    24ca:	4692      	mov	sl, r2
    24cc:	44a2      	add	sl, r4
					setPixel((fore_Color_High<<8)|fore_Color_Low);
    24ce:	4b30      	ldr	r3, [pc, #192]	; (2590 <blinkCursor+0x150>)
    24d0:	4699      	mov	r9, r3
    24d2:	4b30      	ldr	r3, [pc, #192]	; (2594 <blinkCursor+0x154>)
    24d4:	4698      	mov	r8, r3
    24d6:	4f2d      	ldr	r7, [pc, #180]	; (258c <blinkCursor+0x14c>)
					setPixel((back_Color_High<<8)|back_Color_Low);
    24d8:	4e2a      	ldr	r6, [pc, #168]	; (2584 <blinkCursor+0x144>)
    24da:	e019      	b.n	2510 <blinkCursor+0xd0>
					setPixel((fore_Color_High<<8)|fore_Color_Low);
    24dc:	464b      	mov	r3, r9
    24de:	8818      	ldrh	r0, [r3, #0]
    24e0:	0200      	lsls	r0, r0, #8
    24e2:	4643      	mov	r3, r8
    24e4:	881b      	ldrh	r3, [r3, #0]
    24e6:	4318      	orrs	r0, r3
    24e8:	b280      	uxth	r0, r0
    24ea:	47b8      	blx	r7
			for(int j=0;j<8;j++)
    24ec:	3c01      	subs	r4, #1
    24ee:	d30c      	bcc.n	250a <blinkCursor+0xca>
				if((CodePage437[character][i]&(1<<(7-j)))!=0)
    24f0:	782b      	ldrb	r3, [r5, #0]
    24f2:	4123      	asrs	r3, r4
    24f4:	07db      	lsls	r3, r3, #31
    24f6:	d5f1      	bpl.n	24dc <blinkCursor+0x9c>
					setPixel((back_Color_High<<8)|back_Color_Low);
    24f8:	8830      	ldrh	r0, [r6, #0]
    24fa:	0200      	lsls	r0, r0, #8
    24fc:	4b22      	ldr	r3, [pc, #136]	; (2588 <blinkCursor+0x148>)
    24fe:	881b      	ldrh	r3, [r3, #0]
    2500:	4318      	orrs	r0, r3
    2502:	b280      	uxth	r0, r0
    2504:	4b21      	ldr	r3, [pc, #132]	; (258c <blinkCursor+0x14c>)
    2506:	4798      	blx	r3
    2508:	e7f0      	b.n	24ec <blinkCursor+0xac>
    250a:	3501      	adds	r5, #1
		for(uint16_t i=0; i <= 24; i++)
    250c:	4555      	cmp	r5, sl
    250e:	d01d      	beq.n	254c <blinkCursor+0x10c>
{
    2510:	2407      	movs	r4, #7
    2512:	e7ed      	b.n	24f0 <blinkCursor+0xb0>
					setPixel((back_Color_High<<8)|back_Color_Low);
    2514:	464b      	mov	r3, r9
    2516:	8818      	ldrh	r0, [r3, #0]
    2518:	0200      	lsls	r0, r0, #8
    251a:	4643      	mov	r3, r8
    251c:	881b      	ldrh	r3, [r3, #0]
    251e:	4318      	orrs	r0, r3
    2520:	b280      	uxth	r0, r0
    2522:	47b8      	blx	r7
			for(int j=0;j<8;j++)
    2524:	3c01      	subs	r4, #1
    2526:	d30c      	bcc.n	2542 <blinkCursor+0x102>
				if((CodePage437[character][i]&(1<<(7-j)))!=0)
    2528:	782b      	ldrb	r3, [r5, #0]
    252a:	4123      	asrs	r3, r4
    252c:	07db      	lsls	r3, r3, #31
    252e:	d5f1      	bpl.n	2514 <blinkCursor+0xd4>
					setPixel((fore_Color_High<<8)|fore_Color_Low);
    2530:	8830      	ldrh	r0, [r6, #0]
    2532:	0200      	lsls	r0, r0, #8
    2534:	4b17      	ldr	r3, [pc, #92]	; (2594 <blinkCursor+0x154>)
    2536:	881b      	ldrh	r3, [r3, #0]
    2538:	4318      	orrs	r0, r3
    253a:	b280      	uxth	r0, r0
    253c:	4b13      	ldr	r3, [pc, #76]	; (258c <blinkCursor+0x14c>)
    253e:	4798      	blx	r3
    2540:	e7f0      	b.n	2524 <blinkCursor+0xe4>
    2542:	3501      	adds	r5, #1
		for(uint16_t i=0; i <= 24; i++)
    2544:	4555      	cmp	r5, sl
    2546:	d001      	beq.n	254c <blinkCursor+0x10c>
{
    2548:	2407      	movs	r4, #7
    254a:	e7ed      	b.n	2528 <blinkCursor+0xe8>
				}
			}
		}
	}

	REG_PORT_OUTSET1 = LCD_CS;
    254c:	2280      	movs	r2, #128	; 0x80
    254e:	03d2      	lsls	r2, r2, #15
    2550:	4b11      	ldr	r3, [pc, #68]	; (2598 <blinkCursor+0x158>)
    2552:	601a      	str	r2, [r3, #0]
	
	//invert cursorBlinkState
	cursorBlinkState = !cursorBlinkState;
    2554:	4a09      	ldr	r2, [pc, #36]	; (257c <blinkCursor+0x13c>)
    2556:	7813      	ldrb	r3, [r2, #0]
    2558:	2101      	movs	r1, #1
    255a:	404b      	eors	r3, r1
    255c:	7013      	strb	r3, [r2, #0]
	
}
    255e:	bc1c      	pop	{r2, r3, r4}
    2560:	4690      	mov	r8, r2
    2562:	4699      	mov	r9, r3
    2564:	46a2      	mov	sl, r4
    2566:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2568:	200002a4 	.word	0x200002a4
    256c:	200002a6 	.word	0x200002a6
    2570:	20000320 	.word	0x20000320
    2574:	00002d35 	.word	0x00002d35
    2578:	41004494 	.word	0x41004494
    257c:	20000010 	.word	0x20000010
    2580:	000052a0 	.word	0x000052a0
    2584:	20000aa6 	.word	0x20000aa6
    2588:	20000aa0 	.word	0x20000aa0
    258c:	00002ef5 	.word	0x00002ef5
    2590:	20000aa2 	.word	0x20000aa2
    2594:	20000aa4 	.word	0x20000aa4
    2598:	41004498 	.word	0x41004498

0000259c <writeString>:

void writeString(const char str[])
{
    259c:	b5f0      	push	{r4, r5, r6, r7, lr}
    259e:	46c6      	mov	lr, r8
    25a0:	b500      	push	{lr}
    25a2:	0005      	movs	r5, r0
	int length = strlen(str);
    25a4:	4b0c      	ldr	r3, [pc, #48]	; (25d8 <writeString+0x3c>)
    25a6:	4798      	blx	r3
	for(int i = 0; i < length; i++)
    25a8:	2800      	cmp	r0, #0
    25aa:	dd11      	ble.n	25d0 <writeString+0x34>
    25ac:	002c      	movs	r4, r5
    25ae:	182d      	adds	r5, r5, r0
	{
		drawChar(str[i]);
    25b0:	4f0a      	ldr	r7, [pc, #40]	; (25dc <writeString+0x40>)
		if(xCharPos <= 80)
    25b2:	4e0b      	ldr	r6, [pc, #44]	; (25e0 <writeString+0x44>)
		xCharPos++;
    25b4:	46b0      	mov	r8, r6
    25b6:	e002      	b.n	25be <writeString+0x22>
    25b8:	3401      	adds	r4, #1
	for(int i = 0; i < length; i++)
    25ba:	42ac      	cmp	r4, r5
    25bc:	d008      	beq.n	25d0 <writeString+0x34>
		drawChar(str[i]);
    25be:	7820      	ldrb	r0, [r4, #0]
    25c0:	47b8      	blx	r7
		if(xCharPos <= 80)
    25c2:	8833      	ldrh	r3, [r6, #0]
    25c4:	2b50      	cmp	r3, #80	; 0x50
    25c6:	d8f7      	bhi.n	25b8 <writeString+0x1c>
		xCharPos++;
    25c8:	3301      	adds	r3, #1
    25ca:	4642      	mov	r2, r8
    25cc:	8013      	strh	r3, [r2, #0]
    25ce:	e7f3      	b.n	25b8 <writeString+0x1c>
	}
}
    25d0:	bc04      	pop	{r2}
    25d2:	4690      	mov	r8, r2
    25d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    25d6:	46c0      	nop			; (mov r8, r8)
    25d8:	00003e1d 	.word	0x00003e1d
    25dc:	000021a9 	.word	0x000021a9
    25e0:	200002a4 	.word	0x200002a4

000025e4 <arrowKey>:
		}
	}
}

void arrowKey(int scancode)
{
    25e4:	b570      	push	{r4, r5, r6, lr}
	unsigned char tempCharacter;
	//Arrow key handling
	if(scancode == 35) //left
    25e6:	2823      	cmp	r0, #35	; 0x23
    25e8:	d006      	beq.n	25f8 <arrowKey+0x14>
			tempCharacter = consoleDisplay[xCharPos][yCharPos];
			drawChar(tempCharacter);
			blinkCursor();
		}
	}
	else if(scancode  == 45)	//down
    25ea:	282d      	cmp	r0, #45	; 0x2d
    25ec:	d021      	beq.n	2632 <arrowKey+0x4e>
			tempCharacter = consoleDisplay[xCharPos][yCharPos];
			drawChar(tempCharacter);
			blinkCursor();
		}
	}
	else if(scancode  == 55)	//up
    25ee:	2837      	cmp	r0, #55	; 0x37
    25f0:	d03c      	beq.n	266c <arrowKey+0x88>
			tempCharacter = consoleDisplay[xCharPos][yCharPos];
			drawChar(tempCharacter);
			blinkCursor();
		}
	}
	else if(scancode  == 65)	//right
    25f2:	2841      	cmp	r0, #65	; 0x41
    25f4:	d057      	beq.n	26a6 <arrowKey+0xc2>
			tempCharacter = consoleDisplay[xCharPos][yCharPos];
			drawChar(tempCharacter);
			blinkCursor();
		}
	}
    25f6:	bd70      	pop	{r4, r5, r6, pc}
		if(xCharPos > 0)
    25f8:	4b39      	ldr	r3, [pc, #228]	; (26e0 <arrowKey+0xfc>)
    25fa:	881b      	ldrh	r3, [r3, #0]
    25fc:	2b00      	cmp	r3, #0
    25fe:	d0fa      	beq.n	25f6 <arrowKey+0x12>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    2600:	4c38      	ldr	r4, [pc, #224]	; (26e4 <arrowKey+0x100>)
    2602:	4d39      	ldr	r5, [pc, #228]	; (26e8 <arrowKey+0x104>)
    2604:	8829      	ldrh	r1, [r5, #0]
    2606:	005a      	lsls	r2, r3, #1
    2608:	18d3      	adds	r3, r2, r3
    260a:	00db      	lsls	r3, r3, #3
    260c:	18e3      	adds	r3, r4, r3
    260e:	5c58      	ldrb	r0, [r3, r1]
    2610:	4e36      	ldr	r6, [pc, #216]	; (26ec <arrowKey+0x108>)
    2612:	47b0      	blx	r6
			xCharPos--;
    2614:	4a32      	ldr	r2, [pc, #200]	; (26e0 <arrowKey+0xfc>)
    2616:	8813      	ldrh	r3, [r2, #0]
    2618:	3b01      	subs	r3, #1
    261a:	b29b      	uxth	r3, r3
    261c:	8013      	strh	r3, [r2, #0]
			tempCharacter = consoleDisplay[xCharPos][yCharPos];
    261e:	8829      	ldrh	r1, [r5, #0]
    2620:	005a      	lsls	r2, r3, #1
    2622:	18d3      	adds	r3, r2, r3
    2624:	00db      	lsls	r3, r3, #3
    2626:	18e3      	adds	r3, r4, r3
			drawChar(tempCharacter);
    2628:	5c58      	ldrb	r0, [r3, r1]
    262a:	47b0      	blx	r6
			blinkCursor();
    262c:	4b30      	ldr	r3, [pc, #192]	; (26f0 <arrowKey+0x10c>)
    262e:	4798      	blx	r3
    2630:	e7e1      	b.n	25f6 <arrowKey+0x12>
		if(yCharPos < 23)
    2632:	4b2d      	ldr	r3, [pc, #180]	; (26e8 <arrowKey+0x104>)
    2634:	881a      	ldrh	r2, [r3, #0]
    2636:	2a16      	cmp	r2, #22
    2638:	d8dd      	bhi.n	25f6 <arrowKey+0x12>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    263a:	4c2a      	ldr	r4, [pc, #168]	; (26e4 <arrowKey+0x100>)
    263c:	4d28      	ldr	r5, [pc, #160]	; (26e0 <arrowKey+0xfc>)
    263e:	8829      	ldrh	r1, [r5, #0]
    2640:	004b      	lsls	r3, r1, #1
    2642:	185b      	adds	r3, r3, r1
    2644:	00db      	lsls	r3, r3, #3
    2646:	18e3      	adds	r3, r4, r3
    2648:	5c98      	ldrb	r0, [r3, r2]
    264a:	4e28      	ldr	r6, [pc, #160]	; (26ec <arrowKey+0x108>)
    264c:	47b0      	blx	r6
			yCharPos++;
    264e:	4a26      	ldr	r2, [pc, #152]	; (26e8 <arrowKey+0x104>)
    2650:	8813      	ldrh	r3, [r2, #0]
    2652:	3301      	adds	r3, #1
    2654:	b29b      	uxth	r3, r3
    2656:	8013      	strh	r3, [r2, #0]
			tempCharacter = consoleDisplay[xCharPos][yCharPos];
    2658:	8829      	ldrh	r1, [r5, #0]
    265a:	004a      	lsls	r2, r1, #1
    265c:	1852      	adds	r2, r2, r1
    265e:	00d2      	lsls	r2, r2, #3
    2660:	18a4      	adds	r4, r4, r2
			drawChar(tempCharacter);
    2662:	5ce0      	ldrb	r0, [r4, r3]
    2664:	47b0      	blx	r6
			blinkCursor();
    2666:	4b22      	ldr	r3, [pc, #136]	; (26f0 <arrowKey+0x10c>)
    2668:	4798      	blx	r3
    266a:	e7c4      	b.n	25f6 <arrowKey+0x12>
		if(yCharPos > 0)
    266c:	4b1e      	ldr	r3, [pc, #120]	; (26e8 <arrowKey+0x104>)
    266e:	881a      	ldrh	r2, [r3, #0]
    2670:	2a00      	cmp	r2, #0
    2672:	d0c0      	beq.n	25f6 <arrowKey+0x12>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    2674:	4c1b      	ldr	r4, [pc, #108]	; (26e4 <arrowKey+0x100>)
    2676:	4d1a      	ldr	r5, [pc, #104]	; (26e0 <arrowKey+0xfc>)
    2678:	8829      	ldrh	r1, [r5, #0]
    267a:	004b      	lsls	r3, r1, #1
    267c:	185b      	adds	r3, r3, r1
    267e:	00db      	lsls	r3, r3, #3
    2680:	18e3      	adds	r3, r4, r3
    2682:	5c98      	ldrb	r0, [r3, r2]
    2684:	4e19      	ldr	r6, [pc, #100]	; (26ec <arrowKey+0x108>)
    2686:	47b0      	blx	r6
			yCharPos--;
    2688:	4a17      	ldr	r2, [pc, #92]	; (26e8 <arrowKey+0x104>)
    268a:	8813      	ldrh	r3, [r2, #0]
    268c:	3b01      	subs	r3, #1
    268e:	b29b      	uxth	r3, r3
    2690:	8013      	strh	r3, [r2, #0]
			tempCharacter = consoleDisplay[xCharPos][yCharPos];
    2692:	8829      	ldrh	r1, [r5, #0]
    2694:	004a      	lsls	r2, r1, #1
    2696:	1852      	adds	r2, r2, r1
    2698:	00d2      	lsls	r2, r2, #3
    269a:	18a4      	adds	r4, r4, r2
			drawChar(tempCharacter);
    269c:	5ce0      	ldrb	r0, [r4, r3]
    269e:	47b0      	blx	r6
			blinkCursor();
    26a0:	4b13      	ldr	r3, [pc, #76]	; (26f0 <arrowKey+0x10c>)
    26a2:	4798      	blx	r3
    26a4:	e7a7      	b.n	25f6 <arrowKey+0x12>
		if(xCharPos < 79)
    26a6:	4b0e      	ldr	r3, [pc, #56]	; (26e0 <arrowKey+0xfc>)
    26a8:	881a      	ldrh	r2, [r3, #0]
    26aa:	2a4e      	cmp	r2, #78	; 0x4e
    26ac:	d8a3      	bhi.n	25f6 <arrowKey+0x12>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    26ae:	4c0d      	ldr	r4, [pc, #52]	; (26e4 <arrowKey+0x100>)
    26b0:	4d0d      	ldr	r5, [pc, #52]	; (26e8 <arrowKey+0x104>)
    26b2:	8829      	ldrh	r1, [r5, #0]
    26b4:	0053      	lsls	r3, r2, #1
    26b6:	189b      	adds	r3, r3, r2
    26b8:	00db      	lsls	r3, r3, #3
    26ba:	18e3      	adds	r3, r4, r3
    26bc:	5c58      	ldrb	r0, [r3, r1]
    26be:	4e0b      	ldr	r6, [pc, #44]	; (26ec <arrowKey+0x108>)
    26c0:	47b0      	blx	r6
			xCharPos++;
    26c2:	4a07      	ldr	r2, [pc, #28]	; (26e0 <arrowKey+0xfc>)
    26c4:	8813      	ldrh	r3, [r2, #0]
    26c6:	3301      	adds	r3, #1
    26c8:	b29b      	uxth	r3, r3
    26ca:	8013      	strh	r3, [r2, #0]
			tempCharacter = consoleDisplay[xCharPos][yCharPos];
    26cc:	8829      	ldrh	r1, [r5, #0]
    26ce:	005a      	lsls	r2, r3, #1
    26d0:	18d3      	adds	r3, r2, r3
    26d2:	00db      	lsls	r3, r3, #3
    26d4:	18e3      	adds	r3, r4, r3
			drawChar(tempCharacter);
    26d6:	5c58      	ldrb	r0, [r3, r1]
    26d8:	47b0      	blx	r6
			blinkCursor();
    26da:	4b05      	ldr	r3, [pc, #20]	; (26f0 <arrowKey+0x10c>)
    26dc:	4798      	blx	r3
    26de:	e78a      	b.n	25f6 <arrowKey+0x12>
    26e0:	200002a4 	.word	0x200002a4
    26e4:	20000320 	.word	0x20000320
    26e8:	200002a6 	.word	0x200002a6
    26ec:	000021a9 	.word	0x000021a9
    26f0:	00002441 	.word	0x00002441

000026f4 <scanCodesContains>:

bool scanCodesContains(int scanCode)
{
	for(int i = 0 ; i < 70 ; i++)
	{
		if(scanCodes[i] == scanCode)
    26f4:	4b09      	ldr	r3, [pc, #36]	; (271c <scanCodesContains+0x28>)
    26f6:	681b      	ldr	r3, [r3, #0]
    26f8:	4298      	cmp	r0, r3
    26fa:	d00b      	beq.n	2714 <scanCodesContains+0x20>
    26fc:	4a07      	ldr	r2, [pc, #28]	; (271c <scanCodesContains+0x28>)
    26fe:	1d13      	adds	r3, r2, #4
    2700:	3219      	adds	r2, #25
    2702:	32ff      	adds	r2, #255	; 0xff
    2704:	6819      	ldr	r1, [r3, #0]
    2706:	4281      	cmp	r1, r0
    2708:	d006      	beq.n	2718 <scanCodesContains+0x24>
    270a:	3304      	adds	r3, #4
	for(int i = 0 ; i < 70 ; i++)
    270c:	4293      	cmp	r3, r2
    270e:	d1f9      	bne.n	2704 <scanCodesContains+0x10>
		{
			return true;
		}
	}
	return false;
    2710:	2000      	movs	r0, #0
    2712:	e002      	b.n	271a <scanCodesContains+0x26>
			return true;
    2714:	2001      	movs	r0, #1
    2716:	e000      	b.n	271a <scanCodesContains+0x26>
    2718:	2001      	movs	r0, #1
}
    271a:	4770      	bx	lr
    271c:	2000003c 	.word	0x2000003c

00002720 <keyDown>:

bool keyDown(int scancode)
{
	for(int i = 0 ; i < 20 ; i++)
	{
		if(keyDownBuffer[i] == scancode)
    2720:	4b09      	ldr	r3, [pc, #36]	; (2748 <keyDown+0x28>)
    2722:	781b      	ldrb	r3, [r3, #0]
    2724:	4298      	cmp	r0, r3
    2726:	d00a      	beq.n	273e <keyDown+0x1e>
    2728:	4907      	ldr	r1, [pc, #28]	; (2748 <keyDown+0x28>)
    272a:	1c4b      	adds	r3, r1, #1
    272c:	3114      	adds	r1, #20
    272e:	781a      	ldrb	r2, [r3, #0]
    2730:	4282      	cmp	r2, r0
    2732:	d006      	beq.n	2742 <keyDown+0x22>
    2734:	3301      	adds	r3, #1
	for(int i = 0 ; i < 20 ; i++)
    2736:	428b      	cmp	r3, r1
    2738:	d1f9      	bne.n	272e <keyDown+0xe>
		{
			return true;
		}	
	}
	return false;
    273a:	2000      	movs	r0, #0
}
    273c:	4770      	bx	lr
			return true;
    273e:	2001      	movs	r0, #1
    2740:	e7fc      	b.n	273c <keyDown+0x1c>
    2742:	2001      	movs	r0, #1
    2744:	e7fa      	b.n	273c <keyDown+0x1c>
    2746:	46c0      	nop			; (mov r8, r8)
    2748:	20000014 	.word	0x20000014

0000274c <printKeyboardBuffer>:
{
    274c:	b5f0      	push	{r4, r5, r6, r7, lr}
    274e:	46d6      	mov	lr, sl
    2750:	464f      	mov	r7, r9
    2752:	4646      	mov	r6, r8
    2754:	b5c0      	push	{r6, r7, lr}
    2756:	b0cc      	sub	sp, #304	; 0x130
	unsigned char noCase[] =
    2758:	4dac      	ldr	r5, [pc, #688]	; (2a0c <printKeyboardBuffer+0x2c0>)
    275a:	2246      	movs	r2, #70	; 0x46
    275c:	0029      	movs	r1, r5
    275e:	a83a      	add	r0, sp, #232	; 0xe8
    2760:	4cab      	ldr	r4, [pc, #684]	; (2a10 <printKeyboardBuffer+0x2c4>)
    2762:	47a0      	blx	r4
	unsigned char shiftCase[] =
    2764:	0029      	movs	r1, r5
    2766:	3148      	adds	r1, #72	; 0x48
    2768:	2246      	movs	r2, #70	; 0x46
    276a:	a828      	add	r0, sp, #160	; 0xa0
    276c:	47a0      	blx	r4
	unsigned char capsLockCase[] =
    276e:	4da9      	ldr	r5, [pc, #676]	; (2a14 <printKeyboardBuffer+0x2c8>)
    2770:	0029      	movs	r1, r5
    2772:	3110      	adds	r1, #16
    2774:	2246      	movs	r2, #70	; 0x46
    2776:	a816      	add	r0, sp, #88	; 0x58
    2778:	47a0      	blx	r4
	unsigned char controlCase[] =
    277a:	0029      	movs	r1, r5
    277c:	3158      	adds	r1, #88	; 0x58
    277e:	2246      	movs	r2, #70	; 0x46
    2780:	a804      	add	r0, sp, #16
    2782:	47a0      	blx	r4
    2784:	4fa4      	ldr	r7, [pc, #656]	; (2a18 <printKeyboardBuffer+0x2cc>)
    2786:	003c      	movs	r4, r7
    2788:	3414      	adds	r4, #20
    278a:	003d      	movs	r5, r7
	bool controled = false;
    278c:	2300      	movs	r3, #0
    278e:	9303      	str	r3, [sp, #12]
	bool shifted = false;
    2790:	9302      	str	r3, [sp, #8]
			controled = true;
    2792:	2201      	movs	r2, #1
    2794:	e004      	b.n	27a0 <printKeyboardBuffer+0x54>
		if(scanCodeBuffer[i] == 22)
    2796:	2916      	cmp	r1, #22
    2798:	d011      	beq.n	27be <printKeyboardBuffer+0x72>
    279a:	3501      	adds	r5, #1
	for(int i=0; i<20; i++)
    279c:	42a5      	cmp	r5, r4
    279e:	d010      	beq.n	27c2 <printKeyboardBuffer+0x76>
		if((scanCodeBuffer[i] == 13) | (scanCodeBuffer[i] == 49))
    27a0:	7829      	ldrb	r1, [r5, #0]
    27a2:	000b      	movs	r3, r1
    27a4:	3b0d      	subs	r3, #13
    27a6:	425e      	negs	r6, r3
    27a8:	415e      	adcs	r6, r3
    27aa:	46b4      	mov	ip, r6
    27ac:	0008      	movs	r0, r1
    27ae:	3831      	subs	r0, #49	; 0x31
    27b0:	4243      	negs	r3, r0
    27b2:	4143      	adcs	r3, r0
    27b4:	4660      	mov	r0, ip
    27b6:	4318      	orrs	r0, r3
    27b8:	d0ed      	beq.n	2796 <printKeyboardBuffer+0x4a>
			shifted = true;
    27ba:	9002      	str	r0, [sp, #8]
    27bc:	e7eb      	b.n	2796 <printKeyboardBuffer+0x4a>
			controled = true;
    27be:	9203      	str	r2, [sp, #12]
    27c0:	e7eb      	b.n	279a <printKeyboardBuffer+0x4e>
    27c2:	4e96      	ldr	r6, [pc, #600]	; (2a1c <printKeyboardBuffer+0x2d0>)
	for(int i=0; i<20; i++)
    27c4:	003c      	movs	r4, r7
		if(!keyDown(scanCodeBuffer[i]))
    27c6:	4b96      	ldr	r3, [pc, #600]	; (2a20 <printKeyboardBuffer+0x2d4>)
    27c8:	469a      	mov	sl, r3
    27ca:	e008      	b.n	27de <printKeyboardBuffer+0x92>
				if(breakEnable)
    27cc:	4b95      	ldr	r3, [pc, #596]	; (2a24 <printKeyboardBuffer+0x2d8>)
    27ce:	781b      	ldrb	r3, [r3, #0]
    27d0:	2b00      	cmp	r3, #0
    27d2:	d147      	bne.n	2864 <printKeyboardBuffer+0x118>
    27d4:	3401      	adds	r4, #1
    27d6:	3601      	adds	r6, #1
	for(int i = 0 ; i < 20 ; i++)
    27d8:	42ac      	cmp	r4, r5
    27da:	d100      	bne.n	27de <printKeyboardBuffer+0x92>
    27dc:	e10a      	b.n	29f4 <printKeyboardBuffer+0x2a8>
    27de:	9401      	str	r4, [sp, #4]
		if(!keyDown(scanCodeBuffer[i]))
    27e0:	7823      	ldrb	r3, [r4, #0]
    27e2:	4699      	mov	r9, r3
    27e4:	0018      	movs	r0, r3
    27e6:	47d0      	blx	sl
    27e8:	2800      	cmp	r0, #0
    27ea:	d1f3      	bne.n	27d4 <printKeyboardBuffer+0x88>
			keyDownBuffer[i] = scanCodeBuffer[i];
    27ec:	464b      	mov	r3, r9
    27ee:	7033      	strb	r3, [r6, #0]
			if(scanCodeBuffer[i] == 0x00)  //do nothing
    27f0:	464b      	mov	r3, r9
    27f2:	2b01      	cmp	r3, #1
    27f4:	d9ee      	bls.n	27d4 <printKeyboardBuffer+0x88>
			else if(scanCodeBuffer[i] == 67)		//Break key, set by break enable in settings
    27f6:	2b43      	cmp	r3, #67	; 0x43
    27f8:	d0e8      	beq.n	27cc <printKeyboardBuffer+0x80>
			else if(scanCodeBuffer[i] == 58)   //Return key
    27fa:	464b      	mov	r3, r9
    27fc:	2b3a      	cmp	r3, #58	; 0x3a
    27fe:	d034      	beq.n	286a <printKeyboardBuffer+0x11e>
			else if(scanCodeBuffer[i] == 12)		//caps lock
    2800:	464b      	mov	r3, r9
    2802:	2b0c      	cmp	r3, #12
    2804:	d06d      	beq.n	28e2 <printKeyboardBuffer+0x196>
			else if(scanCodeBuffer[i] == 3)			//scroll lock
    2806:	464b      	mov	r3, r9
    2808:	2b03      	cmp	r3, #3
    280a:	d070      	beq.n	28ee <printKeyboardBuffer+0x1a2>
			else if(scanCodeBuffer[i] == 35) //left
    280c:	464b      	mov	r3, r9
    280e:	2b23      	cmp	r3, #35	; 0x23
    2810:	d073      	beq.n	28fa <printKeyboardBuffer+0x1ae>
			else if(scanCodeBuffer[i]  == 45)	//down
    2812:	464b      	mov	r3, r9
    2814:	2b2d      	cmp	r3, #45	; 0x2d
    2816:	d100      	bne.n	281a <printKeyboardBuffer+0xce>
    2818:	e081      	b.n	291e <printKeyboardBuffer+0x1d2>
			else if(scanCodeBuffer[i]  == 55)	//up
    281a:	464b      	mov	r3, r9
    281c:	2b37      	cmp	r3, #55	; 0x37
    281e:	d100      	bne.n	2822 <printKeyboardBuffer+0xd6>
    2820:	e08f      	b.n	2942 <printKeyboardBuffer+0x1f6>
			else if(scanCodeBuffer[i]  == 65)	//right
    2822:	464b      	mov	r3, r9
    2824:	2b41      	cmp	r3, #65	; 0x41
    2826:	d100      	bne.n	282a <printKeyboardBuffer+0xde>
    2828:	e09d      	b.n	2966 <printKeyboardBuffer+0x21a>
				if(controled)
    282a:	9b03      	ldr	r3, [sp, #12]
    282c:	2b00      	cmp	r3, #0
    282e:	d000      	beq.n	2832 <printKeyboardBuffer+0xe6>
    2830:	e0ab      	b.n	298a <printKeyboardBuffer+0x23e>
				else if(capsLock)
    2832:	4b7d      	ldr	r3, [pc, #500]	; (2a28 <printKeyboardBuffer+0x2dc>)
    2834:	781b      	ldrb	r3, [r3, #0]
    2836:	2b00      	cmp	r3, #0
    2838:	d000      	beq.n	283c <printKeyboardBuffer+0xf0>
    283a:	e0b9      	b.n	29b0 <printKeyboardBuffer+0x264>
				else if(shifted)
    283c:	9b02      	ldr	r3, [sp, #8]
    283e:	2b00      	cmp	r3, #0
    2840:	d100      	bne.n	2844 <printKeyboardBuffer+0xf8>
    2842:	e0c6      	b.n	29d2 <printKeyboardBuffer+0x286>
					sendChar(shiftCase[scanCodeBuffer[i]]);
    2844:	ab28      	add	r3, sp, #160	; 0xa0
    2846:	464a      	mov	r2, r9
    2848:	5c98      	ldrb	r0, [r3, r2]
    284a:	4b78      	ldr	r3, [pc, #480]	; (2a2c <printKeyboardBuffer+0x2e0>)
    284c:	4798      	blx	r3
					if(localEcho)
    284e:	4b78      	ldr	r3, [pc, #480]	; (2a30 <printKeyboardBuffer+0x2e4>)
    2850:	781b      	ldrb	r3, [r3, #0]
    2852:	2b00      	cmp	r3, #0
    2854:	d0be      	beq.n	27d4 <printKeyboardBuffer+0x88>
						parseChar(shiftCase[scanCodeBuffer[i]]);
    2856:	9b01      	ldr	r3, [sp, #4]
    2858:	781b      	ldrb	r3, [r3, #0]
    285a:	aa28      	add	r2, sp, #160	; 0xa0
    285c:	5cd0      	ldrb	r0, [r2, r3]
    285e:	4b75      	ldr	r3, [pc, #468]	; (2a34 <printKeyboardBuffer+0x2e8>)
    2860:	4798      	blx	r3
    2862:	e7b7      	b.n	27d4 <printKeyboardBuffer+0x88>
					sendChar(0x00);
    2864:	4b71      	ldr	r3, [pc, #452]	; (2a2c <printKeyboardBuffer+0x2e0>)
    2866:	4798      	blx	r3
    2868:	e7b4      	b.n	27d4 <printKeyboardBuffer+0x88>
				if(lineFeedNewLine == 1)  //This is Windows; CRLF
    286a:	4b73      	ldr	r3, [pc, #460]	; (2a38 <printKeyboardBuffer+0x2ec>)
    286c:	681b      	ldr	r3, [r3, #0]
    286e:	2b01      	cmp	r3, #1
    2870:	d014      	beq.n	289c <printKeyboardBuffer+0x150>
				if(lineFeedNewLine == 2)  //This is Unix, sends LF
    2872:	4b71      	ldr	r3, [pc, #452]	; (2a38 <printKeyboardBuffer+0x2ec>)
    2874:	681b      	ldr	r3, [r3, #0]
    2876:	2b02      	cmp	r3, #2
    2878:	d026      	beq.n	28c8 <printKeyboardBuffer+0x17c>
				if(lineFeedNewLine == 3)  //This is classic mac, sends CR
    287a:	4b6f      	ldr	r3, [pc, #444]	; (2a38 <printKeyboardBuffer+0x2ec>)
    287c:	681b      	ldr	r3, [r3, #0]
    287e:	2b03      	cmp	r3, #3
    2880:	d1a8      	bne.n	27d4 <printKeyboardBuffer+0x88>
					sendChar(0x0D);
    2882:	200d      	movs	r0, #13
    2884:	4b69      	ldr	r3, [pc, #420]	; (2a2c <printKeyboardBuffer+0x2e0>)
    2886:	4798      	blx	r3
					if(localEcho)
    2888:	4b69      	ldr	r3, [pc, #420]	; (2a30 <printKeyboardBuffer+0x2e4>)
    288a:	781b      	ldrb	r3, [r3, #0]
    288c:	2b00      	cmp	r3, #0
    288e:	d0a1      	beq.n	27d4 <printKeyboardBuffer+0x88>
						ring_put(ouroboros, 0x0D);
    2890:	4b6a      	ldr	r3, [pc, #424]	; (2a3c <printKeyboardBuffer+0x2f0>)
    2892:	6818      	ldr	r0, [r3, #0]
    2894:	210d      	movs	r1, #13
    2896:	4b6a      	ldr	r3, [pc, #424]	; (2a40 <printKeyboardBuffer+0x2f4>)
    2898:	4798      	blx	r3
    289a:	e79b      	b.n	27d4 <printKeyboardBuffer+0x88>
					sendChar(0x0D);
    289c:	200d      	movs	r0, #13
    289e:	4b63      	ldr	r3, [pc, #396]	; (2a2c <printKeyboardBuffer+0x2e0>)
    28a0:	4698      	mov	r8, r3
    28a2:	4798      	blx	r3
					sendChar(0x0A);
    28a4:	200a      	movs	r0, #10
    28a6:	47c0      	blx	r8
					if(localEcho)
    28a8:	4b61      	ldr	r3, [pc, #388]	; (2a30 <printKeyboardBuffer+0x2e4>)
    28aa:	781b      	ldrb	r3, [r3, #0]
    28ac:	2b00      	cmp	r3, #0
    28ae:	d0e0      	beq.n	2872 <printKeyboardBuffer+0x126>
						ring_put(ouroboros, 0x0D);
    28b0:	4b62      	ldr	r3, [pc, #392]	; (2a3c <printKeyboardBuffer+0x2f0>)
    28b2:	4698      	mov	r8, r3
    28b4:	210d      	movs	r1, #13
    28b6:	6818      	ldr	r0, [r3, #0]
    28b8:	4b61      	ldr	r3, [pc, #388]	; (2a40 <printKeyboardBuffer+0x2f4>)
    28ba:	4699      	mov	r9, r3
    28bc:	4798      	blx	r3
						ring_put(ouroboros, 0x0A);
    28be:	4643      	mov	r3, r8
    28c0:	6818      	ldr	r0, [r3, #0]
    28c2:	210a      	movs	r1, #10
    28c4:	47c8      	blx	r9
    28c6:	e7d4      	b.n	2872 <printKeyboardBuffer+0x126>
					sendChar(0x0A);
    28c8:	200a      	movs	r0, #10
    28ca:	4b58      	ldr	r3, [pc, #352]	; (2a2c <printKeyboardBuffer+0x2e0>)
    28cc:	4798      	blx	r3
					if(localEcho)
    28ce:	4b58      	ldr	r3, [pc, #352]	; (2a30 <printKeyboardBuffer+0x2e4>)
    28d0:	781b      	ldrb	r3, [r3, #0]
    28d2:	2b00      	cmp	r3, #0
    28d4:	d0d1      	beq.n	287a <printKeyboardBuffer+0x12e>
						ring_put(ouroboros, 0x0A);
    28d6:	4b59      	ldr	r3, [pc, #356]	; (2a3c <printKeyboardBuffer+0x2f0>)
    28d8:	6818      	ldr	r0, [r3, #0]
    28da:	210a      	movs	r1, #10
    28dc:	4b58      	ldr	r3, [pc, #352]	; (2a40 <printKeyboardBuffer+0x2f4>)
    28de:	4798      	blx	r3
    28e0:	e7cb      	b.n	287a <printKeyboardBuffer+0x12e>
				capsLock = !capsLock;
    28e2:	4a51      	ldr	r2, [pc, #324]	; (2a28 <printKeyboardBuffer+0x2dc>)
    28e4:	7813      	ldrb	r3, [r2, #0]
    28e6:	2101      	movs	r1, #1
    28e8:	404b      	eors	r3, r1
    28ea:	7013      	strb	r3, [r2, #0]
    28ec:	e772      	b.n	27d4 <printKeyboardBuffer+0x88>
				scrollLock = !scrollLock;
    28ee:	4a55      	ldr	r2, [pc, #340]	; (2a44 <printKeyboardBuffer+0x2f8>)
    28f0:	7813      	ldrb	r3, [r2, #0]
    28f2:	2101      	movs	r1, #1
    28f4:	404b      	eors	r3, r1
    28f6:	7013      	strb	r3, [r2, #0]
    28f8:	e76c      	b.n	27d4 <printKeyboardBuffer+0x88>
				sendChar(0x1B);
    28fa:	201b      	movs	r0, #27
    28fc:	4b4b      	ldr	r3, [pc, #300]	; (2a2c <printKeyboardBuffer+0x2e0>)
    28fe:	4699      	mov	r9, r3
    2900:	4798      	blx	r3
				sendChar(0x5B);
    2902:	205b      	movs	r0, #91	; 0x5b
    2904:	47c8      	blx	r9
				sendChar(0x44);
    2906:	2044      	movs	r0, #68	; 0x44
    2908:	47c8      	blx	r9
				if(localEcho)
    290a:	4b49      	ldr	r3, [pc, #292]	; (2a30 <printKeyboardBuffer+0x2e4>)
    290c:	781b      	ldrb	r3, [r3, #0]
    290e:	2b00      	cmp	r3, #0
    2910:	d100      	bne.n	2914 <printKeyboardBuffer+0x1c8>
    2912:	e75f      	b.n	27d4 <printKeyboardBuffer+0x88>
					arrowKey(scanCodeBuffer[i]);
    2914:	9b01      	ldr	r3, [sp, #4]
    2916:	7818      	ldrb	r0, [r3, #0]
    2918:	4b4b      	ldr	r3, [pc, #300]	; (2a48 <printKeyboardBuffer+0x2fc>)
    291a:	4798      	blx	r3
    291c:	e75a      	b.n	27d4 <printKeyboardBuffer+0x88>
				sendChar(0x1B);
    291e:	201b      	movs	r0, #27
    2920:	4b42      	ldr	r3, [pc, #264]	; (2a2c <printKeyboardBuffer+0x2e0>)
    2922:	4699      	mov	r9, r3
    2924:	4798      	blx	r3
				sendChar(0x5B);
    2926:	205b      	movs	r0, #91	; 0x5b
    2928:	47c8      	blx	r9
				sendChar(0x42);
    292a:	2042      	movs	r0, #66	; 0x42
    292c:	47c8      	blx	r9
				if(localEcho)
    292e:	4b40      	ldr	r3, [pc, #256]	; (2a30 <printKeyboardBuffer+0x2e4>)
    2930:	781b      	ldrb	r3, [r3, #0]
    2932:	2b00      	cmp	r3, #0
    2934:	d100      	bne.n	2938 <printKeyboardBuffer+0x1ec>
    2936:	e74d      	b.n	27d4 <printKeyboardBuffer+0x88>
					arrowKey(scanCodeBuffer[i]);
    2938:	9b01      	ldr	r3, [sp, #4]
    293a:	7818      	ldrb	r0, [r3, #0]
    293c:	4b42      	ldr	r3, [pc, #264]	; (2a48 <printKeyboardBuffer+0x2fc>)
    293e:	4798      	blx	r3
    2940:	e748      	b.n	27d4 <printKeyboardBuffer+0x88>
				sendChar(0x1B);
    2942:	201b      	movs	r0, #27
    2944:	4b39      	ldr	r3, [pc, #228]	; (2a2c <printKeyboardBuffer+0x2e0>)
    2946:	4699      	mov	r9, r3
    2948:	4798      	blx	r3
				sendChar(0x5B);
    294a:	205b      	movs	r0, #91	; 0x5b
    294c:	47c8      	blx	r9
				sendChar(0x41);
    294e:	2041      	movs	r0, #65	; 0x41
    2950:	47c8      	blx	r9
				if(localEcho)
    2952:	4b37      	ldr	r3, [pc, #220]	; (2a30 <printKeyboardBuffer+0x2e4>)
    2954:	781b      	ldrb	r3, [r3, #0]
    2956:	2b00      	cmp	r3, #0
    2958:	d100      	bne.n	295c <printKeyboardBuffer+0x210>
    295a:	e73b      	b.n	27d4 <printKeyboardBuffer+0x88>
					arrowKey(scanCodeBuffer[i]);
    295c:	9b01      	ldr	r3, [sp, #4]
    295e:	7818      	ldrb	r0, [r3, #0]
    2960:	4b39      	ldr	r3, [pc, #228]	; (2a48 <printKeyboardBuffer+0x2fc>)
    2962:	4798      	blx	r3
    2964:	e736      	b.n	27d4 <printKeyboardBuffer+0x88>
				sendChar(0x1B);
    2966:	201b      	movs	r0, #27
    2968:	4b30      	ldr	r3, [pc, #192]	; (2a2c <printKeyboardBuffer+0x2e0>)
    296a:	4699      	mov	r9, r3
    296c:	4798      	blx	r3
				sendChar(0x5B);
    296e:	205b      	movs	r0, #91	; 0x5b
    2970:	47c8      	blx	r9
				sendChar(0x43);
    2972:	2043      	movs	r0, #67	; 0x43
    2974:	47c8      	blx	r9
				if(localEcho)
    2976:	4b2e      	ldr	r3, [pc, #184]	; (2a30 <printKeyboardBuffer+0x2e4>)
    2978:	781b      	ldrb	r3, [r3, #0]
    297a:	2b00      	cmp	r3, #0
    297c:	d100      	bne.n	2980 <printKeyboardBuffer+0x234>
    297e:	e729      	b.n	27d4 <printKeyboardBuffer+0x88>
					arrowKey(scanCodeBuffer[i]);
    2980:	9b01      	ldr	r3, [sp, #4]
    2982:	7818      	ldrb	r0, [r3, #0]
    2984:	4b30      	ldr	r3, [pc, #192]	; (2a48 <printKeyboardBuffer+0x2fc>)
    2986:	4798      	blx	r3
    2988:	e724      	b.n	27d4 <printKeyboardBuffer+0x88>
					sendChar(controlCase[scanCodeBuffer[i]]);
    298a:	ab04      	add	r3, sp, #16
    298c:	464a      	mov	r2, r9
    298e:	5c98      	ldrb	r0, [r3, r2]
    2990:	4b26      	ldr	r3, [pc, #152]	; (2a2c <printKeyboardBuffer+0x2e0>)
    2992:	4798      	blx	r3
					if(localEcho)
    2994:	4b26      	ldr	r3, [pc, #152]	; (2a30 <printKeyboardBuffer+0x2e4>)
    2996:	781b      	ldrb	r3, [r3, #0]
    2998:	2b00      	cmp	r3, #0
    299a:	d100      	bne.n	299e <printKeyboardBuffer+0x252>
    299c:	e71a      	b.n	27d4 <printKeyboardBuffer+0x88>
						ring_put(ouroboros, controlCase[scanCodeBuffer[i]]);
    299e:	9b01      	ldr	r3, [sp, #4]
    29a0:	781b      	ldrb	r3, [r3, #0]
    29a2:	aa04      	add	r2, sp, #16
    29a4:	5cd1      	ldrb	r1, [r2, r3]
    29a6:	4b25      	ldr	r3, [pc, #148]	; (2a3c <printKeyboardBuffer+0x2f0>)
    29a8:	6818      	ldr	r0, [r3, #0]
    29aa:	4b25      	ldr	r3, [pc, #148]	; (2a40 <printKeyboardBuffer+0x2f4>)
    29ac:	4798      	blx	r3
    29ae:	e711      	b.n	27d4 <printKeyboardBuffer+0x88>
					sendChar(capsLockCase[scanCodeBuffer[i]]);
    29b0:	ab16      	add	r3, sp, #88	; 0x58
    29b2:	464a      	mov	r2, r9
    29b4:	5c98      	ldrb	r0, [r3, r2]
    29b6:	4b1d      	ldr	r3, [pc, #116]	; (2a2c <printKeyboardBuffer+0x2e0>)
    29b8:	4798      	blx	r3
					if(localEcho)
    29ba:	4b1d      	ldr	r3, [pc, #116]	; (2a30 <printKeyboardBuffer+0x2e4>)
    29bc:	781b      	ldrb	r3, [r3, #0]
    29be:	2b00      	cmp	r3, #0
    29c0:	d100      	bne.n	29c4 <printKeyboardBuffer+0x278>
    29c2:	e707      	b.n	27d4 <printKeyboardBuffer+0x88>
						parseChar(capsLockCase[scanCodeBuffer[i]]);
    29c4:	9b01      	ldr	r3, [sp, #4]
    29c6:	781b      	ldrb	r3, [r3, #0]
    29c8:	aa16      	add	r2, sp, #88	; 0x58
    29ca:	5cd0      	ldrb	r0, [r2, r3]
    29cc:	4b19      	ldr	r3, [pc, #100]	; (2a34 <printKeyboardBuffer+0x2e8>)
    29ce:	4798      	blx	r3
    29d0:	e700      	b.n	27d4 <printKeyboardBuffer+0x88>
					sendChar(noCase[scanCodeBuffer[i]]);
    29d2:	ab3a      	add	r3, sp, #232	; 0xe8
    29d4:	464a      	mov	r2, r9
    29d6:	5c98      	ldrb	r0, [r3, r2]
    29d8:	4b14      	ldr	r3, [pc, #80]	; (2a2c <printKeyboardBuffer+0x2e0>)
    29da:	4798      	blx	r3
					if(localEcho)
    29dc:	4b14      	ldr	r3, [pc, #80]	; (2a30 <printKeyboardBuffer+0x2e4>)
    29de:	781b      	ldrb	r3, [r3, #0]
    29e0:	2b00      	cmp	r3, #0
    29e2:	d100      	bne.n	29e6 <printKeyboardBuffer+0x29a>
    29e4:	e6f6      	b.n	27d4 <printKeyboardBuffer+0x88>
						parseChar(noCase[scanCodeBuffer[i]]);
    29e6:	9b01      	ldr	r3, [sp, #4]
    29e8:	781b      	ldrb	r3, [r3, #0]
    29ea:	aa3a      	add	r2, sp, #232	; 0xe8
    29ec:	5cd0      	ldrb	r0, [r2, r3]
    29ee:	4b11      	ldr	r3, [pc, #68]	; (2a34 <printKeyboardBuffer+0x2e8>)
    29f0:	4798      	blx	r3
    29f2:	e6ef      	b.n	27d4 <printKeyboardBuffer+0x88>
		scanCodeBuffer[i] = 0xFF;
    29f4:	23ff      	movs	r3, #255	; 0xff
    29f6:	703b      	strb	r3, [r7, #0]
    29f8:	3701      	adds	r7, #1
	for(int i = 0 ; i < 20 ; i++)
    29fa:	42bc      	cmp	r4, r7
    29fc:	d1fb      	bne.n	29f6 <printKeyboardBuffer+0x2aa>
}
    29fe:	b04c      	add	sp, #304	; 0x130
    2a00:	bc1c      	pop	{r2, r3, r4}
    2a02:	4690      	mov	r8, r2
    2a04:	4699      	mov	r9, r3
    2a06:	46a2      	mov	sl, r4
    2a08:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a0a:	46c0      	nop			; (mov r8, r8)
    2a0c:	00006ba0 	.word	0x00006ba0
    2a10:	000039e9 	.word	0x000039e9
    2a14:	00006c20 	.word	0x00006c20
    2a18:	20000028 	.word	0x20000028
    2a1c:	20000014 	.word	0x20000014
    2a20:	00002721 	.word	0x00002721
    2a24:	200002a8 	.word	0x200002a8
    2a28:	200002b4 	.word	0x200002b4
    2a2c:	000007b5 	.word	0x000007b5
    2a30:	20000160 	.word	0x20000160
    2a34:	000001f5 	.word	0x000001f5
    2a38:	2000015c 	.word	0x2000015c
    2a3c:	200002bc 	.word	0x200002bc
    2a40:	00000141 	.word	0x00000141
    2a44:	200002b6 	.word	0x200002b6
    2a48:	000025e5 	.word	0x000025e5

00002a4c <removeFromKeyDown>:

void removeFromKeyDown(int scancode)
{
    2a4c:	b510      	push	{r4, lr}
    2a4e:	4b07      	ldr	r3, [pc, #28]	; (2a6c <removeFromKeyDown+0x20>)
    2a50:	0019      	movs	r1, r3
    2a52:	3114      	adds	r1, #20
	for(int i = 0 ; i < 20 ; i++)
	{
		if(keyDownBuffer[i] == scancode)
		{
			keyDownBuffer[i] = 0xFF;
    2a54:	24ff      	movs	r4, #255	; 0xff
    2a56:	e002      	b.n	2a5e <removeFromKeyDown+0x12>
    2a58:	3301      	adds	r3, #1
	for(int i = 0 ; i < 20 ; i++)
    2a5a:	428b      	cmp	r3, r1
    2a5c:	d004      	beq.n	2a68 <removeFromKeyDown+0x1c>
		if(keyDownBuffer[i] == scancode)
    2a5e:	781a      	ldrb	r2, [r3, #0]
    2a60:	4282      	cmp	r2, r0
    2a62:	d1f9      	bne.n	2a58 <removeFromKeyDown+0xc>
			keyDownBuffer[i] = 0xFF;
    2a64:	701c      	strb	r4, [r3, #0]
    2a66:	e7f7      	b.n	2a58 <removeFromKeyDown+0xc>
		}
	}
}
    2a68:	bd10      	pop	{r4, pc}
    2a6a:	46c0      	nop			; (mov r8, r8)
    2a6c:	20000014 	.word	0x20000014

00002a70 <readKeyboard>:
{
    2a70:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a72:	46de      	mov	lr, fp
    2a74:	4657      	mov	r7, sl
    2a76:	464e      	mov	r6, r9
    2a78:	4645      	mov	r5, r8
    2a7a:	b5e0      	push	{r5, r6, r7, lr}
    2a7c:	b083      	sub	sp, #12
    2a7e:	4e6d      	ldr	r6, [pc, #436]	; (2c34 <readKeyboard+0x1c4>)
    2a80:	0031      	movs	r1, r6
    2a82:	3119      	adds	r1, #25
    2a84:	31ff      	adds	r1, #255	; 0xff
    2a86:	0033      	movs	r3, r6
		scanCodes[i] = 0xFF;
    2a88:	22ff      	movs	r2, #255	; 0xff
    2a8a:	c304      	stmia	r3!, {r2}
	for(i = 0 ; i < 70 ; i++)
    2a8c:	428b      	cmp	r3, r1
    2a8e:	d1fc      	bne.n	2a8a <readKeyboard+0x1a>
	PORT->Group[0].WRCONFIG.bit.DRVSTR = 1;
    2a90:	4a69      	ldr	r2, [pc, #420]	; (2c38 <readKeyboard+0x1c8>)
    2a92:	6a91      	ldr	r1, [r2, #40]	; 0x28
    2a94:	2380      	movs	r3, #128	; 0x80
    2a96:	03db      	lsls	r3, r3, #15
    2a98:	430b      	orrs	r3, r1
    2a9a:	6293      	str	r3, [r2, #40]	; 0x28
    2a9c:	4c67      	ldr	r4, [pc, #412]	; (2c3c <readKeyboard+0x1cc>)
    2a9e:	341c      	adds	r4, #28
    2aa0:	4b66      	ldr	r3, [pc, #408]	; (2c3c <readKeyboard+0x1cc>)
		REG_PORT_DIRSET0 = kb_col[i];
    2aa2:	4867      	ldr	r0, [pc, #412]	; (2c40 <readKeyboard+0x1d0>)
		REG_PORT_OUTCLR0 = kb_col[i];
    2aa4:	4967      	ldr	r1, [pc, #412]	; (2c44 <readKeyboard+0x1d4>)
		REG_PORT_DIRSET0 = kb_col[i];
    2aa6:	681a      	ldr	r2, [r3, #0]
    2aa8:	6002      	str	r2, [r0, #0]
		REG_PORT_OUTCLR0 = kb_col[i];
    2aaa:	cb04      	ldmia	r3!, {r2}
    2aac:	600a      	str	r2, [r1, #0]
	for (i = 0; i < NUM_COL; i++) {
    2aae:	42a3      	cmp	r3, r4
    2ab0:	d1f9      	bne.n	2aa6 <readKeyboard+0x36>
    2ab2:	2200      	movs	r2, #0
		REG_PORT_DIRCLR0 = kb_row[i];
    2ab4:	4b64      	ldr	r3, [pc, #400]	; (2c48 <readKeyboard+0x1d8>)
    2ab6:	469c      	mov	ip, r3
    2ab8:	4f64      	ldr	r7, [pc, #400]	; (2c4c <readKeyboard+0x1dc>)
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.PULLEN = 1;
    2aba:	4d65      	ldr	r5, [pc, #404]	; (2c50 <readKeyboard+0x1e0>)
    2abc:	2404      	movs	r4, #4
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.INEN = 1;
    2abe:	2002      	movs	r0, #2
		REG_PORT_DIRCLR0 = kb_row[i];
    2ac0:	4663      	mov	r3, ip
    2ac2:	58d3      	ldr	r3, [r2, r3]
    2ac4:	603b      	str	r3, [r7, #0]
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.PULLEN = 1;
    2ac6:	5953      	ldr	r3, [r2, r5]
    2ac8:	4962      	ldr	r1, [pc, #392]	; (2c54 <readKeyboard+0x1e4>)
    2aca:	4688      	mov	r8, r1
    2acc:	4443      	add	r3, r8
    2ace:	7819      	ldrb	r1, [r3, #0]
    2ad0:	4321      	orrs	r1, r4
    2ad2:	7019      	strb	r1, [r3, #0]
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.INEN = 1;
    2ad4:	7819      	ldrb	r1, [r3, #0]
    2ad6:	4301      	orrs	r1, r0
    2ad8:	7019      	strb	r1, [r3, #0]
    2ada:	3204      	adds	r2, #4
	for (i = 0; i < NUM_ROW; i++) {
    2adc:	2a28      	cmp	r2, #40	; 0x28
    2ade:	d1ef      	bne.n	2ac0 <readKeyboard+0x50>
    2ae0:	4b56      	ldr	r3, [pc, #344]	; (2c3c <readKeyboard+0x1cc>)
    2ae2:	4699      	mov	r9, r3
    2ae4:	2300      	movs	r3, #0
    2ae6:	4698      	mov	r8, r3
    2ae8:	2200      	movs	r2, #0
		REG_PORT_OUTSET0 = kb_col[i];
    2aea:	4b5b      	ldr	r3, [pc, #364]	; (2c58 <readKeyboard+0x1e8>)
    2aec:	469b      	mov	fp, r3
			if((PORT->Group[0].IN.reg & kb_row[j]) != 0) {
    2aee:	4d52      	ldr	r5, [pc, #328]	; (2c38 <readKeyboard+0x1c8>)
				scanCodes[scanCodeIndex] = (i * NUM_ROW) + j;
    2af0:	4b50      	ldr	r3, [pc, #320]	; (2c34 <readKeyboard+0x1c4>)
    2af2:	469c      	mov	ip, r3
		REG_PORT_OUTCLR0 = kb_col[i];
    2af4:	4b53      	ldr	r3, [pc, #332]	; (2c44 <readKeyboard+0x1d4>)
    2af6:	469a      	mov	sl, r3
    2af8:	9601      	str	r6, [sp, #4]
    2afa:	464e      	mov	r6, r9
    2afc:	4647      	mov	r7, r8
    2afe:	e015      	b.n	2b2c <readKeyboard+0xbc>
    2b00:	3304      	adds	r3, #4
    2b02:	3101      	adds	r1, #1
		for (j = 0; j < NUM_ROW; j++) {	
    2b04:	42a3      	cmp	r3, r4
    2b06:	d008      	beq.n	2b1a <readKeyboard+0xaa>
			if((PORT->Group[0].IN.reg & kb_row[j]) != 0) {
    2b08:	6a28      	ldr	r0, [r5, #32]
    2b0a:	681e      	ldr	r6, [r3, #0]
    2b0c:	4206      	tst	r6, r0
    2b0e:	d0f7      	beq.n	2b00 <readKeyboard+0x90>
				scanCodes[scanCodeIndex] = (i * NUM_ROW) + j;
    2b10:	0090      	lsls	r0, r2, #2
    2b12:	4666      	mov	r6, ip
    2b14:	5181      	str	r1, [r0, r6]
				scanCodeIndex++;
    2b16:	3201      	adds	r2, #1
    2b18:	e7f2      	b.n	2b00 <readKeyboard+0x90>
    2b1a:	9e00      	ldr	r6, [sp, #0]
		REG_PORT_OUTCLR0 = kb_col[i];
    2b1c:	4649      	mov	r1, r9
    2b1e:	6809      	ldr	r1, [r1, #0]
    2b20:	4650      	mov	r0, sl
    2b22:	6001      	str	r1, [r0, #0]
    2b24:	3604      	adds	r6, #4
    2b26:	370a      	adds	r7, #10
	for (i = 0; i < NUM_COL; i++) {
    2b28:	2f46      	cmp	r7, #70	; 0x46
    2b2a:	d00a      	beq.n	2b42 <readKeyboard+0xd2>
    2b2c:	46b1      	mov	r9, r6
		REG_PORT_OUTSET0 = kb_col[i];
    2b2e:	465b      	mov	r3, fp
    2b30:	6831      	ldr	r1, [r6, #0]
    2b32:	6019      	str	r1, [r3, #0]
    2b34:	4b44      	ldr	r3, [pc, #272]	; (2c48 <readKeyboard+0x1d8>)
    2b36:	4698      	mov	r8, r3
    2b38:	001c      	movs	r4, r3
    2b3a:	3428      	adds	r4, #40	; 0x28
    2b3c:	0039      	movs	r1, r7
    2b3e:	9600      	str	r6, [sp, #0]
    2b40:	e7e2      	b.n	2b08 <readKeyboard+0x98>
    2b42:	4647      	mov	r7, r8
    2b44:	9e01      	ldr	r6, [sp, #4]
    2b46:	4641      	mov	r1, r8
		REG_PORT_DIRSET0 = kb_row[i];
    2b48:	4d3d      	ldr	r5, [pc, #244]	; (2c40 <readKeyboard+0x1d0>)
		REG_PORT_OUTCLR0 = kb_row[i];
    2b4a:	4c3e      	ldr	r4, [pc, #248]	; (2c44 <readKeyboard+0x1d4>)
		REG_PORT_DIRSET0 = kb_row[i];
    2b4c:	6808      	ldr	r0, [r1, #0]
    2b4e:	6028      	str	r0, [r5, #0]
		REG_PORT_OUTCLR0 = kb_row[i];
    2b50:	c901      	ldmia	r1!, {r0}
    2b52:	6020      	str	r0, [r4, #0]
	for (i = 0; i < NUM_ROW; i++) {
    2b54:	4299      	cmp	r1, r3
    2b56:	d1f9      	bne.n	2b4c <readKeyboard+0xdc>
    2b58:	2100      	movs	r1, #0
		REG_PORT_DIRCLR0 = kb_col[i];
    2b5a:	4b38      	ldr	r3, [pc, #224]	; (2c3c <readKeyboard+0x1cc>)
    2b5c:	4699      	mov	r9, r3
    2b5e:	4b3b      	ldr	r3, [pc, #236]	; (2c4c <readKeyboard+0x1dc>)
    2b60:	4698      	mov	r8, r3
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.PULLEN = 1;
    2b62:	4b3e      	ldr	r3, [pc, #248]	; (2c5c <readKeyboard+0x1ec>)
    2b64:	469c      	mov	ip, r3
    2b66:	2504      	movs	r5, #4
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.INEN = 1;
    2b68:	2402      	movs	r4, #2
		REG_PORT_DIRCLR0 = kb_col[i];
    2b6a:	4643      	mov	r3, r8
    2b6c:	4648      	mov	r0, r9
    2b6e:	5808      	ldr	r0, [r1, r0]
    2b70:	6018      	str	r0, [r3, #0]
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.PULLEN = 1;
    2b72:	4663      	mov	r3, ip
    2b74:	58cb      	ldr	r3, [r1, r3]
    2b76:	4837      	ldr	r0, [pc, #220]	; (2c54 <readKeyboard+0x1e4>)
    2b78:	4682      	mov	sl, r0
    2b7a:	4453      	add	r3, sl
    2b7c:	7818      	ldrb	r0, [r3, #0]
    2b7e:	4328      	orrs	r0, r5
    2b80:	7018      	strb	r0, [r3, #0]
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.INEN = 1;
    2b82:	7818      	ldrb	r0, [r3, #0]
    2b84:	4320      	orrs	r0, r4
    2b86:	7018      	strb	r0, [r3, #0]
    2b88:	3104      	adds	r1, #4
	for (i = 0; i < NUM_COL; i++) {
    2b8a:	291c      	cmp	r1, #28
    2b8c:	d1ed      	bne.n	2b6a <readKeyboard+0xfa>
    2b8e:	2300      	movs	r3, #0
    2b90:	469c      	mov	ip, r3
		REG_PORT_OUTSET0 = kb_row[i];
    2b92:	4b31      	ldr	r3, [pc, #196]	; (2c58 <readKeyboard+0x1e8>)
    2b94:	469b      	mov	fp, r3
			if((PORT->Group[0].IN.reg & kb_col[j]) != 0)
    2b96:	4d28      	ldr	r5, [pc, #160]	; (2c38 <readKeyboard+0x1c8>)
				scanCodes[scanCodeIndex] = (j * NUM_ROW) + i;
    2b98:	4b26      	ldr	r3, [pc, #152]	; (2c34 <readKeyboard+0x1c4>)
    2b9a:	4698      	mov	r8, r3
		REG_PORT_OUTCLR0 = kb_row[i];
    2b9c:	4b29      	ldr	r3, [pc, #164]	; (2c44 <readKeyboard+0x1d4>)
    2b9e:	469a      	mov	sl, r3
    2ba0:	46b1      	mov	r9, r6
    2ba2:	003e      	movs	r6, r7
    2ba4:	4667      	mov	r7, ip
    2ba6:	e015      	b.n	2bd4 <readKeyboard+0x164>
    2ba8:	3104      	adds	r1, #4
    2baa:	330a      	adds	r3, #10
		for (j = 0; j < NUM_COL; j++) {
    2bac:	42a3      	cmp	r3, r4
    2bae:	d008      	beq.n	2bc2 <readKeyboard+0x152>
			if((PORT->Group[0].IN.reg & kb_col[j]) != 0)
    2bb0:	6a28      	ldr	r0, [r5, #32]
    2bb2:	680e      	ldr	r6, [r1, #0]
    2bb4:	4206      	tst	r6, r0
    2bb6:	d0f7      	beq.n	2ba8 <readKeyboard+0x138>
				scanCodes[scanCodeIndex] = (j * NUM_ROW) + i;
    2bb8:	0090      	lsls	r0, r2, #2
    2bba:	4646      	mov	r6, r8
    2bbc:	5183      	str	r3, [r0, r6]
				scanCodeIndex++;
    2bbe:	3201      	adds	r2, #1
    2bc0:	e7f2      	b.n	2ba8 <readKeyboard+0x138>
    2bc2:	9e00      	ldr	r6, [sp, #0]
		REG_PORT_OUTCLR0 = kb_row[i];
    2bc4:	4663      	mov	r3, ip
    2bc6:	681b      	ldr	r3, [r3, #0]
    2bc8:	4651      	mov	r1, sl
    2bca:	600b      	str	r3, [r1, #0]
	for (i = 0; i < NUM_ROW; i++) {
    2bcc:	3701      	adds	r7, #1
    2bce:	3604      	adds	r6, #4
    2bd0:	2f0a      	cmp	r7, #10
    2bd2:	d009      	beq.n	2be8 <readKeyboard+0x178>
    2bd4:	46b4      	mov	ip, r6
		REG_PORT_OUTSET0 = kb_row[i];
    2bd6:	465b      	mov	r3, fp
    2bd8:	6831      	ldr	r1, [r6, #0]
    2bda:	6019      	str	r1, [r3, #0]
    2bdc:	003b      	movs	r3, r7
    2bde:	003c      	movs	r4, r7
    2be0:	3446      	adds	r4, #70	; 0x46
    2be2:	4916      	ldr	r1, [pc, #88]	; (2c3c <readKeyboard+0x1cc>)
    2be4:	9600      	str	r6, [sp, #0]
    2be6:	e7e3      	b.n	2bb0 <readKeyboard+0x140>
    2be8:	464e      	mov	r6, r9
	for(i = 0 ; i < scanCodeIndex ; i++)
    2bea:	2a00      	cmp	r2, #0
    2bec:	dd08      	ble.n	2c00 <readKeyboard+0x190>
    2bee:	4b1c      	ldr	r3, [pc, #112]	; (2c60 <readKeyboard+0x1f0>)
    2bf0:	0092      	lsls	r2, r2, #2
    2bf2:	4910      	ldr	r1, [pc, #64]	; (2c34 <readKeyboard+0x1c4>)
    2bf4:	188a      	adds	r2, r1, r2
		scanCodeBuffer[i] = scanCodes[i];	
    2bf6:	ce02      	ldmia	r6!, {r1}
    2bf8:	7019      	strb	r1, [r3, #0]
    2bfa:	3301      	adds	r3, #1
	for(i = 0 ; i < scanCodeIndex ; i++)
    2bfc:	42b2      	cmp	r2, r6
    2bfe:	d1fa      	bne.n	2bf6 <readKeyboard+0x186>
		REG_PORT_OUTSET0 = kb_row[i];
    2c00:	2400      	movs	r4, #0
		if(keyDown(i) && !scanCodesContains(i))
    2c02:	4d18      	ldr	r5, [pc, #96]	; (2c64 <readKeyboard+0x1f4>)
    2c04:	4e18      	ldr	r6, [pc, #96]	; (2c68 <readKeyboard+0x1f8>)
			removeFromKeyDown(i);
    2c06:	4f19      	ldr	r7, [pc, #100]	; (2c6c <readKeyboard+0x1fc>)
    2c08:	e002      	b.n	2c10 <readKeyboard+0x1a0>
	for(i = 0; i < 70; i++)
    2c0a:	3401      	adds	r4, #1
    2c0c:	2c46      	cmp	r4, #70	; 0x46
    2c0e:	d00a      	beq.n	2c26 <readKeyboard+0x1b6>
		if(keyDown(i) && !scanCodesContains(i))
    2c10:	0020      	movs	r0, r4
    2c12:	47a8      	blx	r5
    2c14:	2800      	cmp	r0, #0
    2c16:	d0f8      	beq.n	2c0a <readKeyboard+0x19a>
    2c18:	0020      	movs	r0, r4
    2c1a:	47b0      	blx	r6
    2c1c:	2800      	cmp	r0, #0
    2c1e:	d1f4      	bne.n	2c0a <readKeyboard+0x19a>
			removeFromKeyDown(i);
    2c20:	0020      	movs	r0, r4
    2c22:	47b8      	blx	r7
    2c24:	e7f1      	b.n	2c0a <readKeyboard+0x19a>
}
    2c26:	b003      	add	sp, #12
    2c28:	bc3c      	pop	{r2, r3, r4, r5}
    2c2a:	4690      	mov	r8, r2
    2c2c:	4699      	mov	r9, r3
    2c2e:	46a2      	mov	sl, r4
    2c30:	46ab      	mov	fp, r5
    2c32:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c34:	2000003c 	.word	0x2000003c
    2c38:	41004400 	.word	0x41004400
    2c3c:	00006cc0 	.word	0x00006cc0
    2c40:	41004408 	.word	0x41004408
    2c44:	41004414 	.word	0x41004414
    2c48:	00006cf8 	.word	0x00006cf8
    2c4c:	41004404 	.word	0x41004404
    2c50:	00006d20 	.word	0x00006d20
    2c54:	41004440 	.word	0x41004440
    2c58:	41004418 	.word	0x41004418
    2c5c:	00006cdc 	.word	0x00006cdc
    2c60:	20000028 	.word	0x20000028
    2c64:	00002721 	.word	0x00002721
    2c68:	000026f5 	.word	0x000026f5
    2c6c:	00002a4d 	.word	0x00002a4d

00002c70 <setColorRGB>:

uint16_t fore_Color_High, fore_Color_Low;
uint16_t back_Color_High, back_Color_Low;

void setColorRGB(uint8_t r, uint8_t g, uint8_t b)
{
    2c70:	b510      	push	{r4, lr}
	fore_Color_High = ((r&248)|g>>5);
    2c72:	094b      	lsrs	r3, r1, #5
    2c74:	2407      	movs	r4, #7
    2c76:	43a0      	bics	r0, r4
    2c78:	4318      	orrs	r0, r3
    2c7a:	4b05      	ldr	r3, [pc, #20]	; (2c90 <setColorRGB+0x20>)
    2c7c:	8018      	strh	r0, [r3, #0]
	fore_Color_Low = ((g&28)<<3|b>>3);
    2c7e:	00c9      	lsls	r1, r1, #3
    2c80:	23e0      	movs	r3, #224	; 0xe0
    2c82:	4019      	ands	r1, r3
    2c84:	08d2      	lsrs	r2, r2, #3
    2c86:	430a      	orrs	r2, r1
    2c88:	4b02      	ldr	r3, [pc, #8]	; (2c94 <setColorRGB+0x24>)
    2c8a:	801a      	strh	r2, [r3, #0]
}
    2c8c:	bd10      	pop	{r4, pc}
    2c8e:	46c0      	nop			; (mov r8, r8)
    2c90:	20000aa2 	.word	0x20000aa2
    2c94:	20000aa4 	.word	0x20000aa4

00002c98 <setBackColorRGB>:
	fore_Color_Low = (color & 0xFF);
}

void setBackColorRGB(unsigned char r,
unsigned char g, unsigned char b)
{
    2c98:	b510      	push	{r4, lr}
	back_Color_High = ((r&248)|g>>5);
    2c9a:	094b      	lsrs	r3, r1, #5
    2c9c:	2407      	movs	r4, #7
    2c9e:	43a0      	bics	r0, r4
    2ca0:	4318      	orrs	r0, r3
    2ca2:	4b05      	ldr	r3, [pc, #20]	; (2cb8 <setBackColorRGB+0x20>)
    2ca4:	8018      	strh	r0, [r3, #0]
	back_Color_Low = ((g&28)<<3|b>>3);
    2ca6:	00c9      	lsls	r1, r1, #3
    2ca8:	23e0      	movs	r3, #224	; 0xe0
    2caa:	4019      	ands	r1, r3
    2cac:	08d2      	lsrs	r2, r2, #3
    2cae:	430a      	orrs	r2, r1
    2cb0:	4b02      	ldr	r3, [pc, #8]	; (2cbc <setBackColorRGB+0x24>)
    2cb2:	801a      	strh	r2, [r3, #0]
}
    2cb4:	bd10      	pop	{r4, pc}
    2cb6:	46c0      	nop			; (mov r8, r8)
    2cb8:	20000aa6 	.word	0x20000aa6
    2cbc:	20000aa0 	.word	0x20000aa0

00002cc0 <LCD_Fast_Fill>:
	(((long)(x2-x1)+1)*((long)(y2-y1)+1)));
	REG_PORT_OUTSET1 = LCD_CS;
}

void LCD_Fast_Fill(int ch, int cl, long pix)
{
    2cc0:	b570      	push	{r4, r5, r6, lr}
	int blocks;
	
	
	REG_PORT_OUTCLR1 = 0x0000ffff;
    2cc2:	4c19      	ldr	r4, [pc, #100]	; (2d28 <LCD_Fast_Fill+0x68>)
    2cc4:	4b19      	ldr	r3, [pc, #100]	; (2d2c <LCD_Fast_Fill+0x6c>)
    2cc6:	601c      	str	r4, [r3, #0]
	REG_PORT_OUTSET1 = (ch << 8) | cl;
    2cc8:	0200      	lsls	r0, r0, #8
    2cca:	4301      	orrs	r1, r0
    2ccc:	4b18      	ldr	r3, [pc, #96]	; (2d30 <LCD_Fast_Fill+0x70>)
    2cce:	6019      	str	r1, [r3, #0]

	blocks = pix/16;
    2cd0:	17d3      	asrs	r3, r2, #31
    2cd2:	260f      	movs	r6, #15
    2cd4:	401e      	ands	r6, r3
    2cd6:	18b6      	adds	r6, r6, r2
    2cd8:	1136      	asrs	r6, r6, #4
	for (int i=0; i<blocks; i++)
    2cda:	2500      	movs	r5, #0
    2cdc:	2e00      	cmp	r6, #0
    2cde:	dd0c      	ble.n	2cfa <LCD_Fast_Fill+0x3a>
	{
		for (int j=0; j<16; j++)
		{
			REG_PORT_OUTCLR1 = LCD_WR;
    2ce0:	4c12      	ldr	r4, [pc, #72]	; (2d2c <LCD_Fast_Fill+0x6c>)
    2ce2:	2180      	movs	r1, #128	; 0x80
    2ce4:	0289      	lsls	r1, r1, #10
			REG_PORT_OUTSET1 = LCD_WR;
    2ce6:	4812      	ldr	r0, [pc, #72]	; (2d30 <LCD_Fast_Fill+0x70>)
{
    2ce8:	2310      	movs	r3, #16
			REG_PORT_OUTCLR1 = LCD_WR;
    2cea:	6021      	str	r1, [r4, #0]
			REG_PORT_OUTSET1 = LCD_WR;
    2cec:	6001      	str	r1, [r0, #0]
    2cee:	3b01      	subs	r3, #1
		for (int j=0; j<16; j++)
    2cf0:	2b00      	cmp	r3, #0
    2cf2:	d1fa      	bne.n	2cea <LCD_Fast_Fill+0x2a>
	for (int i=0; i<blocks; i++)
    2cf4:	3501      	adds	r5, #1
    2cf6:	42ae      	cmp	r6, r5
    2cf8:	d1f6      	bne.n	2ce8 <LCD_Fast_Fill+0x28>
		}
	}
	
	if ((pix % 16) != 0)
    2cfa:	0713      	lsls	r3, r2, #28
    2cfc:	d013      	beq.n	2d26 <LCD_Fast_Fill+0x66>
	for (int i=0; i<(pix % 16)+1; i++)
    2cfe:	17d3      	asrs	r3, r2, #31
    2d00:	0f1b      	lsrs	r3, r3, #28
    2d02:	18d2      	adds	r2, r2, r3
    2d04:	210f      	movs	r1, #15
    2d06:	4011      	ands	r1, r2
    2d08:	1ac9      	subs	r1, r1, r3
    2d0a:	1c4b      	adds	r3, r1, #1
    2d0c:	2b00      	cmp	r3, #0
    2d0e:	dd0a      	ble.n	2d26 <LCD_Fast_Fill+0x66>
    2d10:	0019      	movs	r1, r3
    2d12:	2300      	movs	r3, #0
	{
		REG_PORT_OUTCLR1 = LCD_WR;
    2d14:	4c05      	ldr	r4, [pc, #20]	; (2d2c <LCD_Fast_Fill+0x6c>)
    2d16:	2280      	movs	r2, #128	; 0x80
    2d18:	0292      	lsls	r2, r2, #10
		REG_PORT_OUTSET1 = LCD_WR;
    2d1a:	4805      	ldr	r0, [pc, #20]	; (2d30 <LCD_Fast_Fill+0x70>)
		REG_PORT_OUTCLR1 = LCD_WR;
    2d1c:	6022      	str	r2, [r4, #0]
		REG_PORT_OUTSET1 = LCD_WR;
    2d1e:	6002      	str	r2, [r0, #0]
	for (int i=0; i<(pix % 16)+1; i++)
    2d20:	3301      	adds	r3, #1
    2d22:	4299      	cmp	r1, r3
    2d24:	d1fa      	bne.n	2d1c <LCD_Fast_Fill+0x5c>
	}
}
    2d26:	bd70      	pop	{r4, r5, r6, pc}
    2d28:	0000ffff 	.word	0x0000ffff
    2d2c:	41004494 	.word	0x41004494
    2d30:	41004498 	.word	0x41004498

00002d34 <setXY>:
{
	setXY(0,0,display_X_size,display_Y_size);
}

void setXY(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
    2d34:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d36:	b083      	sub	sp, #12
    2d38:	0007      	movs	r7, r0
    2d3a:	9100      	str	r1, [sp, #0]
    2d3c:	0016      	movs	r6, r2
    2d3e:	9301      	str	r3, [sp, #4]
	y1=display_Y_size-y1;
	y2=display_Y_size-y2;
	SwapUint16(y1, y2);
	*/
	
	LCD_Write_COM16(0x2a,0x00);
    2d40:	2100      	movs	r1, #0
    2d42:	202a      	movs	r0, #42	; 0x2a
    2d44:	4c17      	ldr	r4, [pc, #92]	; (2da4 <setXY+0x70>)
    2d46:	47a0      	blx	r4
	LCD_Write_DATA8(x1>>8);
    2d48:	0a38      	lsrs	r0, r7, #8
    2d4a:	4d17      	ldr	r5, [pc, #92]	; (2da8 <setXY+0x74>)
    2d4c:	47a8      	blx	r5
	LCD_Write_COM16(0x2a,0x01);
    2d4e:	2101      	movs	r1, #1
    2d50:	202a      	movs	r0, #42	; 0x2a
    2d52:	47a0      	blx	r4
	LCD_Write_DATA8(x1);
    2d54:	b2f8      	uxtb	r0, r7
    2d56:	47a8      	blx	r5
	LCD_Write_COM16(0x2a,0x02);
    2d58:	2102      	movs	r1, #2
    2d5a:	202a      	movs	r0, #42	; 0x2a
    2d5c:	47a0      	blx	r4
	LCD_Write_DATA8(x2>>8);
    2d5e:	0a30      	lsrs	r0, r6, #8
    2d60:	47a8      	blx	r5
	LCD_Write_COM16(0x2a,0x03);
    2d62:	2103      	movs	r1, #3
    2d64:	202a      	movs	r0, #42	; 0x2a
    2d66:	47a0      	blx	r4
	LCD_Write_DATA8(x2);
    2d68:	b2f0      	uxtb	r0, r6
    2d6a:	47a8      	blx	r5

	LCD_Write_COM16(0x2b,0x00);
    2d6c:	2100      	movs	r1, #0
    2d6e:	202b      	movs	r0, #43	; 0x2b
    2d70:	47a0      	blx	r4
	LCD_Write_DATA8(y1>>8);
    2d72:	9e00      	ldr	r6, [sp, #0]
    2d74:	0a30      	lsrs	r0, r6, #8
    2d76:	47a8      	blx	r5
	LCD_Write_COM16(0x2b,0x01);
    2d78:	2101      	movs	r1, #1
    2d7a:	202b      	movs	r0, #43	; 0x2b
    2d7c:	47a0      	blx	r4
	LCD_Write_DATA8(y1);
    2d7e:	b2f0      	uxtb	r0, r6
    2d80:	47a8      	blx	r5
	LCD_Write_COM16(0x2b,0x02);
    2d82:	2102      	movs	r1, #2
    2d84:	202b      	movs	r0, #43	; 0x2b
    2d86:	47a0      	blx	r4
	LCD_Write_DATA8(y2>>8);
    2d88:	9e01      	ldr	r6, [sp, #4]
    2d8a:	0a30      	lsrs	r0, r6, #8
    2d8c:	47a8      	blx	r5
	LCD_Write_COM16(0x2b,0x03);
    2d8e:	2103      	movs	r1, #3
    2d90:	202b      	movs	r0, #43	; 0x2b
    2d92:	47a0      	blx	r4
	LCD_Write_DATA8(y2);
    2d94:	b2f0      	uxtb	r0, r6
    2d96:	47a8      	blx	r5

	LCD_Write_COM16(0x2c,0x00);
    2d98:	2100      	movs	r1, #0
    2d9a:	202c      	movs	r0, #44	; 0x2c
    2d9c:	47a0      	blx	r4
}
    2d9e:	b003      	add	sp, #12
    2da0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2da2:	46c0      	nop			; (mov r8, r8)
    2da4:	00002f61 	.word	0x00002f61
    2da8:	00002f91 	.word	0x00002f91

00002dac <fillRect>:
{
    2dac:	b5f0      	push	{r4, r5, r6, r7, lr}
    2dae:	46ce      	mov	lr, r9
    2db0:	4647      	mov	r7, r8
    2db2:	b580      	push	{r7, lr}
    2db4:	b083      	sub	sp, #12
    2db6:	0006      	movs	r6, r0
    2db8:	4689      	mov	r9, r1
    2dba:	0014      	movs	r4, r2
    2dbc:	001d      	movs	r5, r3
	if (x1>x2)
    2dbe:	4290      	cmp	r0, r2
    2dc0:	dd01      	ble.n	2dc6 <fillRect+0x1a>
		x1 = x2;
    2dc2:	0016      	movs	r6, r2
		x2 = temp;
    2dc4:	0004      	movs	r4, r0
	if (y1>y2)
    2dc6:	45a9      	cmp	r9, r5
    2dc8:	dd02      	ble.n	2dd0 <fillRect+0x24>
    2dca:	0033      	movs	r3, r6
		x1 = x2;
    2dcc:	0026      	movs	r6, r4
		x2 = temp;
    2dce:	001c      	movs	r4, r3
	REG_PORT_OUTCLR1 = LCD_CS;
    2dd0:	2380      	movs	r3, #128	; 0x80
    2dd2:	03db      	lsls	r3, r3, #15
    2dd4:	4698      	mov	r8, r3
    2dd6:	4b11      	ldr	r3, [pc, #68]	; (2e1c <fillRect+0x70>)
    2dd8:	4642      	mov	r2, r8
    2dda:	601a      	str	r2, [r3, #0]
	setXY(x1, y1, x2, y2);
    2ddc:	b2ab      	uxth	r3, r5
    2dde:	b2a2      	uxth	r2, r4
    2de0:	4649      	mov	r1, r9
    2de2:	4668      	mov	r0, sp
    2de4:	80c1      	strh	r1, [r0, #6]
    2de6:	88c1      	ldrh	r1, [r0, #6]
    2de8:	b2b0      	uxth	r0, r6
    2dea:	4f0d      	ldr	r7, [pc, #52]	; (2e20 <fillRect+0x74>)
    2dec:	47b8      	blx	r7
	REG_PORT_OUTSET1 = LCD_DC;
    2dee:	4f0d      	ldr	r7, [pc, #52]	; (2e24 <fillRect+0x78>)
    2df0:	2380      	movs	r3, #128	; 0x80
    2df2:	041b      	lsls	r3, r3, #16
    2df4:	603b      	str	r3, [r7, #0]
	(((long)(x2-x1)+1)*((long)(y2-y1)+1)));
    2df6:	1ba4      	subs	r4, r4, r6
    2df8:	3401      	adds	r4, #1
    2dfa:	464b      	mov	r3, r9
    2dfc:	1aea      	subs	r2, r5, r3
    2dfe:	3201      	adds	r2, #1
	LCD_Fast_Fill(fore_Color_High, fore_Color_Low,
    2e00:	4362      	muls	r2, r4
    2e02:	4b09      	ldr	r3, [pc, #36]	; (2e28 <fillRect+0x7c>)
    2e04:	8819      	ldrh	r1, [r3, #0]
    2e06:	4b09      	ldr	r3, [pc, #36]	; (2e2c <fillRect+0x80>)
    2e08:	8818      	ldrh	r0, [r3, #0]
    2e0a:	4b09      	ldr	r3, [pc, #36]	; (2e30 <fillRect+0x84>)
    2e0c:	4798      	blx	r3
	REG_PORT_OUTSET1 = LCD_CS;
    2e0e:	4643      	mov	r3, r8
    2e10:	603b      	str	r3, [r7, #0]
}
    2e12:	b003      	add	sp, #12
    2e14:	bc0c      	pop	{r2, r3}
    2e16:	4690      	mov	r8, r2
    2e18:	4699      	mov	r9, r3
    2e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2e1c:	41004494 	.word	0x41004494
    2e20:	00002d35 	.word	0x00002d35
    2e24:	41004498 	.word	0x41004498
    2e28:	20000aa4 	.word	0x20000aa4
    2e2c:	20000aa2 	.word	0x20000aa2
    2e30:	00002cc1 	.word	0x00002cc1

00002e34 <fillRectBackColor>:
{
    2e34:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e36:	46ce      	mov	lr, r9
    2e38:	4647      	mov	r7, r8
    2e3a:	b580      	push	{r7, lr}
    2e3c:	b083      	sub	sp, #12
    2e3e:	0006      	movs	r6, r0
    2e40:	4689      	mov	r9, r1
    2e42:	0014      	movs	r4, r2
    2e44:	001d      	movs	r5, r3
	if (x1>x2)
    2e46:	4290      	cmp	r0, r2
    2e48:	dd01      	ble.n	2e4e <fillRectBackColor+0x1a>
		x1 = x2;
    2e4a:	0016      	movs	r6, r2
		x2 = temp;
    2e4c:	0004      	movs	r4, r0
	if (y1>y2)
    2e4e:	45a9      	cmp	r9, r5
    2e50:	dd02      	ble.n	2e58 <fillRectBackColor+0x24>
    2e52:	0033      	movs	r3, r6
		x1 = x2;
    2e54:	0026      	movs	r6, r4
		x2 = temp;
    2e56:	001c      	movs	r4, r3
	REG_PORT_OUTCLR1 = LCD_CS;
    2e58:	2380      	movs	r3, #128	; 0x80
    2e5a:	03db      	lsls	r3, r3, #15
    2e5c:	4698      	mov	r8, r3
    2e5e:	4b11      	ldr	r3, [pc, #68]	; (2ea4 <fillRectBackColor+0x70>)
    2e60:	4642      	mov	r2, r8
    2e62:	601a      	str	r2, [r3, #0]
	setXY(x1, y1, x2, y2);
    2e64:	b2ab      	uxth	r3, r5
    2e66:	b2a2      	uxth	r2, r4
    2e68:	4649      	mov	r1, r9
    2e6a:	4668      	mov	r0, sp
    2e6c:	80c1      	strh	r1, [r0, #6]
    2e6e:	88c1      	ldrh	r1, [r0, #6]
    2e70:	b2b0      	uxth	r0, r6
    2e72:	4f0d      	ldr	r7, [pc, #52]	; (2ea8 <fillRectBackColor+0x74>)
    2e74:	47b8      	blx	r7
	REG_PORT_OUTSET1 = LCD_DC;
    2e76:	4f0d      	ldr	r7, [pc, #52]	; (2eac <fillRectBackColor+0x78>)
    2e78:	2380      	movs	r3, #128	; 0x80
    2e7a:	041b      	lsls	r3, r3, #16
    2e7c:	603b      	str	r3, [r7, #0]
	(((long)(x2-x1)+1)*((long)(y2-y1)+1)));
    2e7e:	1ba4      	subs	r4, r4, r6
    2e80:	3401      	adds	r4, #1
    2e82:	464b      	mov	r3, r9
    2e84:	1aea      	subs	r2, r5, r3
    2e86:	3201      	adds	r2, #1
	LCD_Fast_Fill(back_Color_High, back_Color_Low,
    2e88:	4362      	muls	r2, r4
    2e8a:	4b09      	ldr	r3, [pc, #36]	; (2eb0 <fillRectBackColor+0x7c>)
    2e8c:	8819      	ldrh	r1, [r3, #0]
    2e8e:	4b09      	ldr	r3, [pc, #36]	; (2eb4 <fillRectBackColor+0x80>)
    2e90:	8818      	ldrh	r0, [r3, #0]
    2e92:	4b09      	ldr	r3, [pc, #36]	; (2eb8 <fillRectBackColor+0x84>)
    2e94:	4798      	blx	r3
	REG_PORT_OUTSET1 = LCD_CS;
    2e96:	4643      	mov	r3, r8
    2e98:	603b      	str	r3, [r7, #0]
}
    2e9a:	b003      	add	sp, #12
    2e9c:	bc0c      	pop	{r2, r3}
    2e9e:	4690      	mov	r8, r2
    2ea0:	4699      	mov	r9, r3
    2ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2ea4:	41004494 	.word	0x41004494
    2ea8:	00002d35 	.word	0x00002d35
    2eac:	41004498 	.word	0x41004498
    2eb0:	20000aa0 	.word	0x20000aa0
    2eb4:	20000aa6 	.word	0x20000aa6
    2eb8:	00002cc1 	.word	0x00002cc1

00002ebc <clrXY>:
{
    2ebc:	b510      	push	{r4, lr}
	setXY(0,0,display_X_size,display_Y_size);
    2ebe:	4b04      	ldr	r3, [pc, #16]	; (2ed0 <clrXY+0x14>)
    2ec0:	881b      	ldrh	r3, [r3, #0]
    2ec2:	4a04      	ldr	r2, [pc, #16]	; (2ed4 <clrXY+0x18>)
    2ec4:	8812      	ldrh	r2, [r2, #0]
    2ec6:	2100      	movs	r1, #0
    2ec8:	2000      	movs	r0, #0
    2eca:	4c03      	ldr	r4, [pc, #12]	; (2ed8 <clrXY+0x1c>)
    2ecc:	47a0      	blx	r4
}
    2ece:	bd10      	pop	{r4, pc}
    2ed0:	20000156 	.word	0x20000156
    2ed4:	20000154 	.word	0x20000154
    2ed8:	00002d35 	.word	0x00002d35

00002edc <clrScr>:
{
    2edc:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = LCD_CS;
    2ede:	2280      	movs	r2, #128	; 0x80
    2ee0:	03d2      	lsls	r2, r2, #15
    2ee2:	4b02      	ldr	r3, [pc, #8]	; (2eec <clrScr+0x10>)
    2ee4:	601a      	str	r2, [r3, #0]
	clrXY();
    2ee6:	4b02      	ldr	r3, [pc, #8]	; (2ef0 <clrScr+0x14>)
    2ee8:	4798      	blx	r3
}
    2eea:	bd10      	pop	{r4, pc}
    2eec:	41004494 	.word	0x41004494
    2ef0:	00002ebd 	.word	0x00002ebd

00002ef4 <setPixel>:

void setPixel(uint16_t color)
{
    2ef4:	b510      	push	{r4, lr}
	//it sets it to a 16-bit color.
	LCD_Write_DATA16((color>>8),(color&0xFF));
    2ef6:	b2c1      	uxtb	r1, r0
    2ef8:	0a00      	lsrs	r0, r0, #8
    2efa:	4b01      	ldr	r3, [pc, #4]	; (2f00 <setPixel+0xc>)
    2efc:	4798      	blx	r3
}
    2efe:	bd10      	pop	{r4, pc}
    2f00:	00002f79 	.word	0x00002f79

00002f04 <clearScreen>:
	LCD_Write_DATA8(0x80);
	REG_PORT_OUTSET1 = LCD_CS;
}
*/
void clearScreen(void)
{
    2f04:	b510      	push	{r4, lr}
	fore_Color_High = ((r&248)|g>>5);
    2f06:	2300      	movs	r3, #0
    2f08:	4a06      	ldr	r2, [pc, #24]	; (2f24 <clearScreen+0x20>)
    2f0a:	8013      	strh	r3, [r2, #0]
	fore_Color_Low = ((g&28)<<3|b>>3);
    2f0c:	4a06      	ldr	r2, [pc, #24]	; (2f28 <clearScreen+0x24>)
    2f0e:	8013      	strh	r3, [r2, #0]
	setColorRGB(0,0,0);
	fillRect(0,0,display_Y_size,display_X_size);
    2f10:	4b06      	ldr	r3, [pc, #24]	; (2f2c <clearScreen+0x28>)
    2f12:	881b      	ldrh	r3, [r3, #0]
    2f14:	4a06      	ldr	r2, [pc, #24]	; (2f30 <clearScreen+0x2c>)
    2f16:	8812      	ldrh	r2, [r2, #0]
    2f18:	2100      	movs	r1, #0
    2f1a:	2000      	movs	r0, #0
    2f1c:	4c05      	ldr	r4, [pc, #20]	; (2f34 <clearScreen+0x30>)
    2f1e:	47a0      	blx	r4
}
    2f20:	bd10      	pop	{r4, pc}
    2f22:	46c0      	nop			; (mov r8, r8)
    2f24:	20000aa2 	.word	0x20000aa2
    2f28:	20000aa4 	.word	0x20000aa4
    2f2c:	20000154 	.word	0x20000154
    2f30:	20000156 	.word	0x20000156
    2f34:	00002dad 	.word	0x00002dad

00002f38 <LCD_Write_Bus>:
	fillRect(0,0,799,489);
		
}

void LCD_Write_Bus(char VH, char VL)
{
    2f38:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = 0x0000ffff;
    2f3a:	4c06      	ldr	r4, [pc, #24]	; (2f54 <LCD_Write_Bus+0x1c>)
    2f3c:	4b06      	ldr	r3, [pc, #24]	; (2f58 <LCD_Write_Bus+0x20>)
    2f3e:	6023      	str	r3, [r4, #0]
	REG_PORT_OUTSET1 = (VH << 8) | VL;
    2f40:	0200      	lsls	r0, r0, #8
    2f42:	4301      	orrs	r1, r0
    2f44:	4b05      	ldr	r3, [pc, #20]	; (2f5c <LCD_Write_Bus+0x24>)
    2f46:	6019      	str	r1, [r3, #0]
	REG_PORT_OUTCLR1 = LCD_WR;
    2f48:	2280      	movs	r2, #128	; 0x80
    2f4a:	0292      	lsls	r2, r2, #10
    2f4c:	6022      	str	r2, [r4, #0]
	REG_PORT_OUTSET1 = LCD_WR;
    2f4e:	601a      	str	r2, [r3, #0]
}
    2f50:	bd10      	pop	{r4, pc}
    2f52:	46c0      	nop			; (mov r8, r8)
    2f54:	41004494 	.word	0x41004494
    2f58:	0000ffff 	.word	0x0000ffff
    2f5c:	41004498 	.word	0x41004498

00002f60 <LCD_Write_COM16>:

void LCD_Write_COM16(char VH, char VL)
{
    2f60:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = LCD_DC;
    2f62:	2280      	movs	r2, #128	; 0x80
    2f64:	0412      	lsls	r2, r2, #16
    2f66:	4b02      	ldr	r3, [pc, #8]	; (2f70 <LCD_Write_COM16+0x10>)
    2f68:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(VH,VL);
    2f6a:	4b02      	ldr	r3, [pc, #8]	; (2f74 <LCD_Write_COM16+0x14>)
    2f6c:	4798      	blx	r3
}
    2f6e:	bd10      	pop	{r4, pc}
    2f70:	41004494 	.word	0x41004494
    2f74:	00002f39 	.word	0x00002f39

00002f78 <LCD_Write_DATA16>:
	REG_PORT_OUTCLR1 = LCD_DC;
	LCD_Write_Bus(0x00, VL);
}

void LCD_Write_DATA16(char VH, char VL)
{
    2f78:	b510      	push	{r4, lr}
	REG_PORT_OUTSET1 = LCD_DC;
    2f7a:	2280      	movs	r2, #128	; 0x80
    2f7c:	0412      	lsls	r2, r2, #16
    2f7e:	4b02      	ldr	r3, [pc, #8]	; (2f88 <LCD_Write_DATA16+0x10>)
    2f80:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(VH,VL);
    2f82:	4b02      	ldr	r3, [pc, #8]	; (2f8c <LCD_Write_DATA16+0x14>)
    2f84:	4798      	blx	r3
}
    2f86:	bd10      	pop	{r4, pc}
    2f88:	41004498 	.word	0x41004498
    2f8c:	00002f39 	.word	0x00002f39

00002f90 <LCD_Write_DATA8>:

void LCD_Write_DATA8(char VL)
{
    2f90:	b510      	push	{r4, lr}
    2f92:	0001      	movs	r1, r0
	REG_PORT_OUTSET1 = LCD_DC;
    2f94:	2280      	movs	r2, #128	; 0x80
    2f96:	0412      	lsls	r2, r2, #16
    2f98:	4b02      	ldr	r3, [pc, #8]	; (2fa4 <LCD_Write_DATA8+0x14>)
    2f9a:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(0x00, VL);
    2f9c:	2000      	movs	r0, #0
    2f9e:	4b02      	ldr	r3, [pc, #8]	; (2fa8 <LCD_Write_DATA8+0x18>)
    2fa0:	4798      	blx	r3
}
    2fa2:	bd10      	pop	{r4, pc}
    2fa4:	41004498 	.word	0x41004498
    2fa8:	00002f39 	.word	0x00002f39

00002fac <InitLCD>:
{
    2fac:	b5f0      	push	{r4, r5, r6, r7, lr}
    2fae:	46c6      	mov	lr, r8
    2fb0:	b500      	push	{lr}
    2fb2:	b082      	sub	sp, #8
	REG_PORT_DIRSET1 = 0x0000ffff;		//LCD data bus, PB00 - PB15
    2fb4:	4b80      	ldr	r3, [pc, #512]	; (31b8 <InitLCD+0x20c>)
    2fb6:	4f81      	ldr	r7, [pc, #516]	; (31bc <InitLCD+0x210>)
    2fb8:	601f      	str	r7, [r3, #0]
	REG_PORT_DIRSET1 = LCD_Reset;
    2fba:	2580      	movs	r5, #128	; 0x80
    2fbc:	05ed      	lsls	r5, r5, #23
    2fbe:	601d      	str	r5, [r3, #0]
	REG_PORT_DIRSET1 = LCD_CS;
    2fc0:	2680      	movs	r6, #128	; 0x80
    2fc2:	03f6      	lsls	r6, r6, #15
    2fc4:	601e      	str	r6, [r3, #0]
	REG_PORT_DIRSET1 = LCD_WR;
    2fc6:	2080      	movs	r0, #128	; 0x80
    2fc8:	0280      	lsls	r0, r0, #10
    2fca:	6018      	str	r0, [r3, #0]
	REG_PORT_DIRSET1 = LCD_DC;
    2fcc:	2180      	movs	r1, #128	; 0x80
    2fce:	0409      	lsls	r1, r1, #16
    2fd0:	6019      	str	r1, [r3, #0]
	REG_PORT_DIRSET1 = LCD_RD;
    2fd2:	2280      	movs	r2, #128	; 0x80
    2fd4:	0252      	lsls	r2, r2, #9
    2fd6:	601a      	str	r2, [r3, #0]
	REG_PORT_OUTCLR1 = 0x0000ffff;
    2fd8:	4c79      	ldr	r4, [pc, #484]	; (31c0 <InitLCD+0x214>)
    2fda:	6027      	str	r7, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_Reset;
    2fdc:	6025      	str	r5, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_CS;
    2fde:	6026      	str	r6, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_WR;
    2fe0:	6020      	str	r0, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_DC;
    2fe2:	6021      	str	r1, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_RD;
    2fe4:	6022      	str	r2, [r4, #0]
	REG_PORT_DIRSET1 = PORT_PB16;
    2fe6:	601a      	str	r2, [r3, #0]
	REG_PORT_OUTSET1 = PORT_PB16;
    2fe8:	4f76      	ldr	r7, [pc, #472]	; (31c4 <InitLCD+0x218>)
    2fea:	603a      	str	r2, [r7, #0]
	REG_PORT_OUTSET1 = LCD_Reset;
    2fec:	603d      	str	r5, [r7, #0]
	delay_ms(5);
    2fee:	2005      	movs	r0, #5
    2ff0:	4b75      	ldr	r3, [pc, #468]	; (31c8 <InitLCD+0x21c>)
    2ff2:	4698      	mov	r8, r3
    2ff4:	4798      	blx	r3
	REG_PORT_OUTCLR1 = LCD_Reset;
    2ff6:	6025      	str	r5, [r4, #0]
	delay_ms(5);
    2ff8:	2005      	movs	r0, #5
    2ffa:	47c0      	blx	r8
	REG_PORT_OUTSET1 = LCD_Reset;
    2ffc:	603d      	str	r5, [r7, #0]
	REG_PORT_OUTCLR1 = LCD_CS;
    2ffe:	6026      	str	r6, [r4, #0]
	for(int i = 0; i < 70; i++)
    3000:	2400      	movs	r4, #0
		REG_PORT_OUTCLR1 = LCD_DC;
    3002:	4b6f      	ldr	r3, [pc, #444]	; (31c0 <InitLCD+0x214>)
    3004:	4698      	mov	r8, r3
    3006:	2580      	movs	r5, #128	; 0x80
    3008:	042d      	lsls	r5, r5, #16
    300a:	002f      	movs	r7, r5
		LCD_Write_COM16(belial[i],mulciber[i]);
    300c:	4e6f      	ldr	r6, [pc, #444]	; (31cc <InitLCD+0x220>)
		REG_PORT_OUTCLR1 = LCD_DC;
    300e:	4643      	mov	r3, r8
    3010:	601f      	str	r7, [r3, #0]
		LCD_Write_COM16(belial[i],mulciber[i]);
    3012:	5da1      	ldrb	r1, [r4, r6]
    3014:	4b6e      	ldr	r3, [pc, #440]	; (31d0 <InitLCD+0x224>)
    3016:	5ce0      	ldrb	r0, [r4, r3]
    3018:	4b6e      	ldr	r3, [pc, #440]	; (31d4 <InitLCD+0x228>)
    301a:	4798      	blx	r3
		REG_PORT_OUTSET1 = LCD_DC;
    301c:	4b69      	ldr	r3, [pc, #420]	; (31c4 <InitLCD+0x218>)
    301e:	601d      	str	r5, [r3, #0]
		LCD_Write_DATA8(lucifer[i]);
    3020:	4b6d      	ldr	r3, [pc, #436]	; (31d8 <InitLCD+0x22c>)
    3022:	5ce0      	ldrb	r0, [r4, r3]
    3024:	4b6d      	ldr	r3, [pc, #436]	; (31dc <InitLCD+0x230>)
    3026:	4798      	blx	r3
	for(int i = 0; i < 70; i++)
    3028:	3401      	adds	r4, #1
    302a:	2c46      	cmp	r4, #70	; 0x46
    302c:	d1ef      	bne.n	300e <InitLCD+0x62>
    302e:	23d1      	movs	r3, #209	; 0xd1
    3030:	9301      	str	r3, [sp, #4]
			LCD_Write_COM16(k,0x00);
    3032:	4d68      	ldr	r5, [pc, #416]	; (31d4 <InitLCD+0x228>)
			LCD_Write_DATA8(beelzebub[l]);
    3034:	4f69      	ldr	r7, [pc, #420]	; (31dc <InitLCD+0x230>)
    3036:	4c6a      	ldr	r4, [pc, #424]	; (31e0 <InitLCD+0x234>)
    3038:	0026      	movs	r6, r4
    303a:	3634      	adds	r6, #52	; 0x34
			LCD_Write_COM16(k,0x00);
    303c:	2100      	movs	r1, #0
    303e:	9801      	ldr	r0, [sp, #4]
    3040:	47a8      	blx	r5
			LCD_Write_DATA8(beelzebub[l]);
    3042:	7820      	ldrb	r0, [r4, #0]
    3044:	47b8      	blx	r7
    3046:	3401      	adds	r4, #1
		for(int l = 0; l < 52; l++)
    3048:	42a6      	cmp	r6, r4
    304a:	d1f7      	bne.n	303c <InitLCD+0x90>
	for(char k = 0xD1; k < 0xD6; k++)
    304c:	9b01      	ldr	r3, [sp, #4]
    304e:	3301      	adds	r3, #1
    3050:	b2db      	uxtb	r3, r3
    3052:	9301      	str	r3, [sp, #4]
    3054:	2bd6      	cmp	r3, #214	; 0xd6
    3056:	d1ee      	bne.n	3036 <InitLCD+0x8a>
	LCD_Write_COM16(0xF0, 0x00);LCD_Write_DATA8(0x55);
    3058:	2100      	movs	r1, #0
    305a:	20f0      	movs	r0, #240	; 0xf0
    305c:	4c5d      	ldr	r4, [pc, #372]	; (31d4 <InitLCD+0x228>)
    305e:	47a0      	blx	r4
    3060:	2055      	movs	r0, #85	; 0x55
    3062:	4d5e      	ldr	r5, [pc, #376]	; (31dc <InitLCD+0x230>)
    3064:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x01);LCD_Write_DATA8(0xAA);	
    3066:	2101      	movs	r1, #1
    3068:	20f0      	movs	r0, #240	; 0xf0
    306a:	47a0      	blx	r4
    306c:	20aa      	movs	r0, #170	; 0xaa
    306e:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x02);LCD_Write_DATA8(0x52);	
    3070:	2102      	movs	r1, #2
    3072:	20f0      	movs	r0, #240	; 0xf0
    3074:	47a0      	blx	r4
    3076:	2052      	movs	r0, #82	; 0x52
    3078:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x03);LCD_Write_DATA8(0x08);	
    307a:	2103      	movs	r1, #3
    307c:	20f0      	movs	r0, #240	; 0xf0
    307e:	47a0      	blx	r4
    3080:	2008      	movs	r0, #8
    3082:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x04);LCD_Write_DATA8(0x00);	
    3084:	2104      	movs	r1, #4
    3086:	20f0      	movs	r0, #240	; 0xf0
    3088:	47a0      	blx	r4
    308a:	2000      	movs	r0, #0
    308c:	47a8      	blx	r5
	LCD_Write_COM16(0xB1, 0x00);LCD_Write_DATA8(0xCC);
    308e:	2100      	movs	r1, #0
    3090:	20b1      	movs	r0, #177	; 0xb1
    3092:	47a0      	blx	r4
    3094:	20cc      	movs	r0, #204	; 0xcc
    3096:	47a8      	blx	r5
	LCD_Write_COM16(0xB1, 0x01);LCD_Write_DATA8(0x00);	
    3098:	2101      	movs	r1, #1
    309a:	20b1      	movs	r0, #177	; 0xb1
    309c:	47a0      	blx	r4
    309e:	2000      	movs	r0, #0
    30a0:	47a8      	blx	r5
	LCD_Write_COM16(0xB5, 0x00);LCD_Write_DATA8(0x50);	
    30a2:	2100      	movs	r1, #0
    30a4:	20b5      	movs	r0, #181	; 0xb5
    30a6:	47a0      	blx	r4
    30a8:	2050      	movs	r0, #80	; 0x50
    30aa:	47a8      	blx	r5
	LCD_Write_COM16(0xB6, 0x00);LCD_Write_DATA8(0x05);
    30ac:	2100      	movs	r1, #0
    30ae:	20b6      	movs	r0, #182	; 0xb6
    30b0:	47a0      	blx	r4
    30b2:	2005      	movs	r0, #5
    30b4:	47a8      	blx	r5
	LCD_Write_COM16(0xB7, 0x00);LCD_Write_DATA8(0x70);
    30b6:	2100      	movs	r1, #0
    30b8:	20b7      	movs	r0, #183	; 0xb7
    30ba:	47a0      	blx	r4
    30bc:	2070      	movs	r0, #112	; 0x70
    30be:	47a8      	blx	r5
	LCD_Write_COM16(0xB7, 0x01);LCD_Write_DATA8(0x70);
    30c0:	2101      	movs	r1, #1
    30c2:	20b7      	movs	r0, #183	; 0xb7
    30c4:	47a0      	blx	r4
    30c6:	2070      	movs	r0, #112	; 0x70
    30c8:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x00);LCD_Write_DATA8(0x01);
    30ca:	2100      	movs	r1, #0
    30cc:	20b8      	movs	r0, #184	; 0xb8
    30ce:	47a0      	blx	r4
    30d0:	2001      	movs	r0, #1
    30d2:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x01);LCD_Write_DATA8(0x03);
    30d4:	2101      	movs	r1, #1
    30d6:	20b8      	movs	r0, #184	; 0xb8
    30d8:	47a0      	blx	r4
    30da:	2003      	movs	r0, #3
    30dc:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x02);LCD_Write_DATA8(0x03);
    30de:	2102      	movs	r1, #2
    30e0:	20b8      	movs	r0, #184	; 0xb8
    30e2:	47a0      	blx	r4
    30e4:	2003      	movs	r0, #3
    30e6:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x03);LCD_Write_DATA8(0x03);	
    30e8:	2103      	movs	r1, #3
    30ea:	20b8      	movs	r0, #184	; 0xb8
    30ec:	47a0      	blx	r4
    30ee:	2003      	movs	r0, #3
    30f0:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x00);LCD_Write_DATA8(0x02);
    30f2:	2100      	movs	r1, #0
    30f4:	20bc      	movs	r0, #188	; 0xbc
    30f6:	47a0      	blx	r4
    30f8:	2002      	movs	r0, #2
    30fa:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x01);LCD_Write_DATA8(0x00);
    30fc:	2101      	movs	r1, #1
    30fe:	20bc      	movs	r0, #188	; 0xbc
    3100:	47a0      	blx	r4
    3102:	2000      	movs	r0, #0
    3104:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x02);LCD_Write_DATA8(0x00);
    3106:	2102      	movs	r1, #2
    3108:	20bc      	movs	r0, #188	; 0xbc
    310a:	47a0      	blx	r4
    310c:	2000      	movs	r0, #0
    310e:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x00);LCD_Write_DATA8(0xD0);
    3110:	2100      	movs	r1, #0
    3112:	20c9      	movs	r0, #201	; 0xc9
    3114:	47a0      	blx	r4
    3116:	20d0      	movs	r0, #208	; 0xd0
    3118:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x01);LCD_Write_DATA8(0x02);
    311a:	2101      	movs	r1, #1
    311c:	20c9      	movs	r0, #201	; 0xc9
    311e:	47a0      	blx	r4
    3120:	2002      	movs	r0, #2
    3122:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x02);LCD_Write_DATA8(0x50);
    3124:	2102      	movs	r1, #2
    3126:	20c9      	movs	r0, #201	; 0xc9
    3128:	47a0      	blx	r4
    312a:	2050      	movs	r0, #80	; 0x50
    312c:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x03);LCD_Write_DATA8(0x50);
    312e:	2103      	movs	r1, #3
    3130:	20c9      	movs	r0, #201	; 0xc9
    3132:	47a0      	blx	r4
    3134:	2050      	movs	r0, #80	; 0x50
    3136:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x04);LCD_Write_DATA8(0x50);
    3138:	2104      	movs	r1, #4
    313a:	20c9      	movs	r0, #201	; 0xc9
    313c:	47a0      	blx	r4
    313e:	2050      	movs	r0, #80	; 0x50
    3140:	47a8      	blx	r5
	LCD_Write_COM16(0x35, 0x00);LCD_Write_DATA8(0x00);
    3142:	2100      	movs	r1, #0
    3144:	2035      	movs	r0, #53	; 0x35
    3146:	47a0      	blx	r4
    3148:	2000      	movs	r0, #0
    314a:	47a8      	blx	r5
	LCD_Write_COM16(0x3A, 0x00);LCD_Write_DATA8(0x55);
    314c:	2100      	movs	r1, #0
    314e:	203a      	movs	r0, #58	; 0x3a
    3150:	47a0      	blx	r4
    3152:	2055      	movs	r0, #85	; 0x55
    3154:	47a8      	blx	r5
	LCD_Write_COM16(0x36, 0x00);LCD_Write_DATA8(0xE2);  //This is the MADCTL register
    3156:	2100      	movs	r1, #0
    3158:	2036      	movs	r0, #54	; 0x36
    315a:	47a0      	blx	r4
    315c:	20e2      	movs	r0, #226	; 0xe2
    315e:	47a8      	blx	r5
  	LCD_Write_COM16(0x11,0x00);   //Start Up  
    3160:	2100      	movs	r1, #0
    3162:	2011      	movs	r0, #17
    3164:	47a0      	blx	r4
  	delay_ms(100);
    3166:	2064      	movs	r0, #100	; 0x64
    3168:	4e17      	ldr	r6, [pc, #92]	; (31c8 <InitLCD+0x21c>)
    316a:	47b0      	blx	r6
  	LCD_Write_COM16(0x29,0x00);   //Display On  
    316c:	2100      	movs	r1, #0
    316e:	2029      	movs	r0, #41	; 0x29
    3170:	47a0      	blx	r4
   	delay_ms(100);
    3172:	2064      	movs	r0, #100	; 0x64
    3174:	47b0      	blx	r6
	LCD_Write_COM16(0x51,0x00);LCD_Write_DATA8(0xFF);
    3176:	2100      	movs	r1, #0
    3178:	2051      	movs	r0, #81	; 0x51
    317a:	47a0      	blx	r4
    317c:	20ff      	movs	r0, #255	; 0xff
    317e:	47a8      	blx	r5
	REG_PORT_OUTSET1 = LCD_CS;
    3180:	2280      	movs	r2, #128	; 0x80
    3182:	03d2      	lsls	r2, r2, #15
    3184:	4b0f      	ldr	r3, [pc, #60]	; (31c4 <InitLCD+0x218>)
    3186:	601a      	str	r2, [r3, #0]
	clrScr();
    3188:	4b16      	ldr	r3, [pc, #88]	; (31e4 <InitLCD+0x238>)
    318a:	4798      	blx	r3
	setColorRGB(0,0,0);
    318c:	2200      	movs	r2, #0
    318e:	2100      	movs	r1, #0
    3190:	2000      	movs	r0, #0
    3192:	4b15      	ldr	r3, [pc, #84]	; (31e8 <InitLCD+0x23c>)
    3194:	4798      	blx	r3
	setBackColorRGB(0, 0, 0);
    3196:	2200      	movs	r2, #0
    3198:	2100      	movs	r1, #0
    319a:	2000      	movs	r0, #0
    319c:	4b13      	ldr	r3, [pc, #76]	; (31ec <InitLCD+0x240>)
    319e:	4798      	blx	r3
	fillRect(0,0,799,489);
    31a0:	23ea      	movs	r3, #234	; 0xea
    31a2:	33ff      	adds	r3, #255	; 0xff
    31a4:	4a12      	ldr	r2, [pc, #72]	; (31f0 <InitLCD+0x244>)
    31a6:	2100      	movs	r1, #0
    31a8:	2000      	movs	r0, #0
    31aa:	4c12      	ldr	r4, [pc, #72]	; (31f4 <InitLCD+0x248>)
    31ac:	47a0      	blx	r4
}
    31ae:	b002      	add	sp, #8
    31b0:	bc04      	pop	{r2}
    31b2:	4690      	mov	r8, r2
    31b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    31b6:	46c0      	nop			; (mov r8, r8)
    31b8:	41004488 	.word	0x41004488
    31bc:	0000ffff 	.word	0x0000ffff
    31c0:	41004494 	.word	0x41004494
    31c4:	41004498 	.word	0x41004498
    31c8:	00000801 	.word	0x00000801
    31cc:	00006e0c 	.word	0x00006e0c
    31d0:	00006d7c 	.word	0x00006d7c
    31d4:	00002f61 	.word	0x00002f61
    31d8:	00006dc4 	.word	0x00006dc4
    31dc:	00002f91 	.word	0x00002f91
    31e0:	00006d48 	.word	0x00006d48
    31e4:	00002edd 	.word	0x00002edd
    31e8:	00002c71 	.word	0x00002c71
    31ec:	00002c99 	.word	0x00002c99
    31f0:	0000031f 	.word	0x0000031f
    31f4:	00002dad 	.word	0x00002dad

000031f8 <usart_read_callback>:
	SysTick_Config(SystemCoreClock/1000);
	system_interrupt_enable(SYSTEM_INTERRUPT_SYSTICK);
}

void usart_read_callback(struct usart_module *const usart_module)
{
    31f8:	b510      	push	{r4, lr}
	// Read one character from the UART.
	//We can only use this function because it's non-blocking
	//and we can only read one character because reading > 1 means
	//it doesn't complete until _all_ characters are read.
	
	usart_read_buffer_job(&usart_instance, (uint8_t*)&rx_buf, 1);
    31fa:	4c06      	ldr	r4, [pc, #24]	; (3214 <usart_read_callback+0x1c>)
    31fc:	2201      	movs	r2, #1
    31fe:	0021      	movs	r1, r4
    3200:	4805      	ldr	r0, [pc, #20]	; (3218 <usart_read_callback+0x20>)
    3202:	4b06      	ldr	r3, [pc, #24]	; (321c <usart_read_callback+0x24>)
    3204:	4798      	blx	r3
	
	//stuff that ONE CHARACTER into the circular FIFO buffer
	ring_put(ouroboros, rx_buf);
    3206:	7821      	ldrb	r1, [r4, #0]
    3208:	4b05      	ldr	r3, [pc, #20]	; (3220 <usart_read_callback+0x28>)
    320a:	6818      	ldr	r0, [r3, #0]
    320c:	4b05      	ldr	r3, [pc, #20]	; (3224 <usart_read_callback+0x2c>)
    320e:	4798      	blx	r3
}
    3210:	bd10      	pop	{r4, pc}
    3212:	46c0      	nop			; (mov r8, r8)
    3214:	20000aa8 	.word	0x20000aa8
    3218:	200002e8 	.word	0x200002e8
    321c:	000016a1 	.word	0x000016a1
    3220:	200002bc 	.word	0x200002bc
    3224:	00000141 	.word	0x00000141

00003228 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    3228:	b570      	push	{r4, r5, r6, lr}
    322a:	b082      	sub	sp, #8
    322c:	0005      	movs	r5, r0
    322e:	000e      	movs	r6, r1
	uint16_t temp = 0;
    3230:	2200      	movs	r2, #0
    3232:	466b      	mov	r3, sp
    3234:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    3236:	4c06      	ldr	r4, [pc, #24]	; (3250 <usart_serial_getchar+0x28>)
    3238:	466b      	mov	r3, sp
    323a:	1d99      	adds	r1, r3, #6
    323c:	0028      	movs	r0, r5
    323e:	47a0      	blx	r4
    3240:	2800      	cmp	r0, #0
    3242:	d1f9      	bne.n	3238 <usart_serial_getchar+0x10>

	*c = temp;
    3244:	466b      	mov	r3, sp
    3246:	3306      	adds	r3, #6
    3248:	881b      	ldrh	r3, [r3, #0]
    324a:	7033      	strb	r3, [r6, #0]
}
    324c:	b002      	add	sp, #8
    324e:	bd70      	pop	{r4, r5, r6, pc}
    3250:	000015cf 	.word	0x000015cf

00003254 <usart_serial_putchar>:
{
    3254:	b570      	push	{r4, r5, r6, lr}
    3256:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    3258:	b28c      	uxth	r4, r1
    325a:	4e03      	ldr	r6, [pc, #12]	; (3268 <usart_serial_putchar+0x14>)
    325c:	0021      	movs	r1, r4
    325e:	0028      	movs	r0, r5
    3260:	47b0      	blx	r6
    3262:	2800      	cmp	r0, #0
    3264:	d1fa      	bne.n	325c <usart_serial_putchar+0x8>
}
    3266:	bd70      	pop	{r4, r5, r6, pc}
    3268:	000015a9 	.word	0x000015a9

0000326c <SysTick_Handler>:
	ul_tickcount++;
    326c:	4a02      	ldr	r2, [pc, #8]	; (3278 <SysTick_Handler+0xc>)
    326e:	8813      	ldrh	r3, [r2, #0]
    3270:	3301      	adds	r3, #1
    3272:	8013      	strh	r3, [r2, #0]
}
    3274:	4770      	bx	lr
    3276:	46c0      	nop			; (mov r8, r8)
    3278:	200002aa 	.word	0x200002aa

0000327c <conf_systick>:
{
    327c:	b510      	push	{r4, lr}
	SysTick_Config(SystemCoreClock/1000);
    327e:	4b0e      	ldr	r3, [pc, #56]	; (32b8 <conf_systick+0x3c>)
    3280:	6818      	ldr	r0, [r3, #0]
    3282:	21fa      	movs	r1, #250	; 0xfa
    3284:	0089      	lsls	r1, r1, #2
    3286:	4b0d      	ldr	r3, [pc, #52]	; (32bc <conf_systick+0x40>)
    3288:	4798      	blx	r3
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    328a:	3801      	subs	r0, #1
    328c:	4b0c      	ldr	r3, [pc, #48]	; (32c0 <conf_systick+0x44>)
    328e:	4298      	cmp	r0, r3
    3290:	d80d      	bhi.n	32ae <conf_systick+0x32>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    3292:	4a0c      	ldr	r2, [pc, #48]	; (32c4 <conf_systick+0x48>)
    3294:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    3296:	480c      	ldr	r0, [pc, #48]	; (32c8 <conf_systick+0x4c>)
    3298:	6a03      	ldr	r3, [r0, #32]
    329a:	021b      	lsls	r3, r3, #8
    329c:	0a1b      	lsrs	r3, r3, #8
    329e:	21c0      	movs	r1, #192	; 0xc0
    32a0:	0609      	lsls	r1, r1, #24
    32a2:	430b      	orrs	r3, r1
    32a4:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    32a6:	2300      	movs	r3, #0
    32a8:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    32aa:	3307      	adds	r3, #7
    32ac:	6013      	str	r3, [r2, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    32ae:	2280      	movs	r2, #128	; 0x80
    32b0:	0612      	lsls	r2, r2, #24
    32b2:	4b06      	ldr	r3, [pc, #24]	; (32cc <conf_systick+0x50>)
    32b4:	601a      	str	r2, [r3, #0]
}
    32b6:	bd10      	pop	{r4, pc}
    32b8:	2000000c 	.word	0x2000000c
    32bc:	0000364d 	.word	0x0000364d
    32c0:	00ffffff 	.word	0x00ffffff
    32c4:	e000e010 	.word	0xe000e010
    32c8:	e000ed00 	.word	0xe000ed00
    32cc:	e000e100 	.word	0xe000e100

000032d0 <configure_usart>:

/**************************SERCOM STUFF*******************************/


void configure_usart(void)
{
    32d0:	b570      	push	{r4, r5, r6, lr}
    32d2:	b090      	sub	sp, #64	; 0x40
	config->data_order       = USART_DATAORDER_LSB;
    32d4:	2380      	movs	r3, #128	; 0x80
    32d6:	05db      	lsls	r3, r3, #23
    32d8:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    32da:	2300      	movs	r3, #0
    32dc:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    32de:	22ff      	movs	r2, #255	; 0xff
    32e0:	4669      	mov	r1, sp
    32e2:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    32e4:	2200      	movs	r2, #0
    32e6:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    32e8:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
    32ea:	2196      	movs	r1, #150	; 0x96
    32ec:	0189      	lsls	r1, r1, #6
    32ee:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
    32f0:	2101      	movs	r1, #1
    32f2:	2024      	movs	r0, #36	; 0x24
    32f4:	466c      	mov	r4, sp
    32f6:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    32f8:	3001      	adds	r0, #1
    32fa:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    32fc:	3125      	adds	r1, #37	; 0x25
    32fe:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    3300:	3101      	adds	r1, #1
    3302:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    3304:	930a      	str	r3, [sp, #40]	; 0x28
	config->run_in_standby   = false;
    3306:	3105      	adds	r1, #5
    3308:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    330a:	3101      	adds	r1, #1
    330c:	5463      	strb	r3, [r4, r1]
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    330e:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    3310:	8223      	strh	r3, [r4, #16]
	config->lin_slave_enable      = false;
    3312:	76e3      	strb	r3, [r4, #27]
	config->immediate_buffer_overflow_notification  = false;
    3314:	7622      	strb	r2, [r4, #24]
	config->start_frame_detection_enable            = false;
    3316:	7722      	strb	r2, [r4, #28]
	config->encoding_format_enable                  = false;
    3318:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    331a:	2313      	movs	r3, #19
    331c:	76a3      	strb	r3, [r4, #26]
	config->collision_detection_enable              = false;
    331e:	7762      	strb	r2, [r4, #29]
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);

	config_usart.baudrate    = 9600;
	config_usart.mux_setting = USART_RX_1_TX_0_XCK_1;
    3320:	2380      	movs	r3, #128	; 0x80
    3322:	035b      	lsls	r3, r3, #13
    3324:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = PINMUX_PA08D_SERCOM2_PAD0;
    3326:	4b1e      	ldr	r3, [pc, #120]	; (33a0 <configure_usart+0xd0>)
    3328:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = PINMUX_PA09D_SERCOM2_PAD1;
    332a:	4b1e      	ldr	r3, [pc, #120]	; (33a4 <configure_usart+0xd4>)
    332c:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = PINMUX_UNUSED;
    332e:	2301      	movs	r3, #1
    3330:	425b      	negs	r3, r3
    3332:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = PINMUX_UNUSED;
    3334:	930f      	str	r3, [sp, #60]	; 0x3c
	
	while (usart_init(&usart_instance, SERCOM2, &config_usart) != STATUS_OK) {
    3336:	4d1c      	ldr	r5, [pc, #112]	; (33a8 <configure_usart+0xd8>)
    3338:	4c1c      	ldr	r4, [pc, #112]	; (33ac <configure_usart+0xdc>)
    333a:	466a      	mov	r2, sp
    333c:	491c      	ldr	r1, [pc, #112]	; (33b0 <configure_usart+0xe0>)
    333e:	0028      	movs	r0, r5
    3340:	47a0      	blx	r4
    3342:	2800      	cmp	r0, #0
    3344:	d1f9      	bne.n	333a <configure_usart+0x6a>
	stdio_base = (void *)module;
    3346:	4c18      	ldr	r4, [pc, #96]	; (33a8 <configure_usart+0xd8>)
    3348:	4b1a      	ldr	r3, [pc, #104]	; (33b4 <configure_usart+0xe4>)
    334a:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    334c:	4a1a      	ldr	r2, [pc, #104]	; (33b8 <configure_usart+0xe8>)
    334e:	4b1b      	ldr	r3, [pc, #108]	; (33bc <configure_usart+0xec>)
    3350:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    3352:	4a1b      	ldr	r2, [pc, #108]	; (33c0 <configure_usart+0xf0>)
    3354:	4b1b      	ldr	r3, [pc, #108]	; (33c4 <configure_usart+0xf4>)
    3356:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    3358:	466a      	mov	r2, sp
    335a:	4915      	ldr	r1, [pc, #84]	; (33b0 <configure_usart+0xe0>)
    335c:	0020      	movs	r0, r4
    335e:	4b13      	ldr	r3, [pc, #76]	; (33ac <configure_usart+0xdc>)
    3360:	4798      	blx	r3
	setbuf(stdout, NULL);
    3362:	4e19      	ldr	r6, [pc, #100]	; (33c8 <configure_usart+0xf8>)
    3364:	6833      	ldr	r3, [r6, #0]
    3366:	6898      	ldr	r0, [r3, #8]
    3368:	2100      	movs	r1, #0
    336a:	4d18      	ldr	r5, [pc, #96]	; (33cc <configure_usart+0xfc>)
    336c:	47a8      	blx	r5
	setbuf(stdin, NULL);
    336e:	6833      	ldr	r3, [r6, #0]
    3370:	6858      	ldr	r0, [r3, #4]
    3372:	2100      	movs	r1, #0
    3374:	47a8      	blx	r5
	SercomUsart *const usart_hw = &(module->hw->USART);
    3376:	6825      	ldr	r5, [r4, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    3378:	0028      	movs	r0, r5
    337a:	4b15      	ldr	r3, [pc, #84]	; (33d0 <configure_usart+0x100>)
    337c:	4798      	blx	r3
    337e:	231f      	movs	r3, #31
    3380:	4018      	ands	r0, r3
    3382:	3b1e      	subs	r3, #30
    3384:	4083      	lsls	r3, r0
    3386:	4a13      	ldr	r2, [pc, #76]	; (33d4 <configure_usart+0x104>)
    3388:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    338a:	6822      	ldr	r2, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
    338c:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    338e:	2b00      	cmp	r3, #0
    3390:	d1fc      	bne.n	338c <configure_usart+0xbc>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    3392:	682b      	ldr	r3, [r5, #0]
    3394:	2202      	movs	r2, #2
    3396:	4313      	orrs	r3, r2
    3398:	602b      	str	r3, [r5, #0]
	}
	stdio_serial_init(&usart_instance, SERCOM2, &config_usart);
	usart_enable(&usart_instance);
}
    339a:	b010      	add	sp, #64	; 0x40
    339c:	bd70      	pop	{r4, r5, r6, pc}
    339e:	46c0      	nop			; (mov r8, r8)
    33a0:	00080003 	.word	0x00080003
    33a4:	00090003 	.word	0x00090003
    33a8:	200002e8 	.word	0x200002e8
    33ac:	0000126d 	.word	0x0000126d
    33b0:	42001000 	.word	0x42001000
    33b4:	200002e4 	.word	0x200002e4
    33b8:	00003255 	.word	0x00003255
    33bc:	200002e0 	.word	0x200002e0
    33c0:	00003229 	.word	0x00003229
    33c4:	200002dc 	.word	0x200002dc
    33c8:	20000164 	.word	0x20000164
    33cc:	00003cb1 	.word	0x00003cb1
    33d0:	000011dd 	.word	0x000011dd
    33d4:	e000e100 	.word	0xe000e100

000033d8 <configure_usart_callbacks>:

void configure_usart_callbacks(void)
{
    33d8:	b510      	push	{r4, lr}
	usart_register_callback(&usart_instance,usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
    33da:	4c06      	ldr	r4, [pc, #24]	; (33f4 <configure_usart_callbacks+0x1c>)
    33dc:	2201      	movs	r2, #1
    33de:	4906      	ldr	r1, [pc, #24]	; (33f8 <configure_usart_callbacks+0x20>)
    33e0:	0020      	movs	r0, r4
    33e2:	4b06      	ldr	r3, [pc, #24]	; (33fc <configure_usart_callbacks+0x24>)
    33e4:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    33e6:	2231      	movs	r2, #49	; 0x31
    33e8:	5ca3      	ldrb	r3, [r4, r2]
    33ea:	2102      	movs	r1, #2
    33ec:	430b      	orrs	r3, r1
    33ee:	54a3      	strb	r3, [r4, r2]
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
}
    33f0:	bd10      	pop	{r4, pc}
    33f2:	46c0      	nop			; (mov r8, r8)
    33f4:	200002e8 	.word	0x200002e8
    33f8:	000031f9 	.word	0x000031f9
    33fc:	00001689 	.word	0x00001689

00003400 <configure_adc>:
	usart_enable(&usart_USB);
}
*/

void configure_adc(void)
{
    3400:	b510      	push	{r4, lr}
    3402:	b08c      	sub	sp, #48	; 0x30
	struct adc_config config_adc;
	adc_get_config_defaults(&config_adc);
    3404:	4668      	mov	r0, sp
    3406:	4b16      	ldr	r3, [pc, #88]	; (3460 <configure_adc+0x60>)
    3408:	4798      	blx	r3
	config_adc.clock_source = GCLK_GENERATOR_1;
    340a:	2301      	movs	r3, #1
    340c:	466a      	mov	r2, sp
    340e:	7013      	strb	r3, [r2, #0]
	config_adc.clock_prescaler = ADC_CLOCK_PRESCALER_DIV16;
    3410:	2380      	movs	r3, #128	; 0x80
    3412:	009b      	lsls	r3, r3, #2
    3414:	8053      	strh	r3, [r2, #2]
	config_adc.reference = ADC_REFERENCE_INT1V;
    3416:	2300      	movs	r3, #0
    3418:	7053      	strb	r3, [r2, #1]
	config_adc.positive_input = ADC_POSITIVE_INPUT_TEMP;
    341a:	3318      	adds	r3, #24
    341c:	7313      	strb	r3, [r2, #12]
	config_adc.negative_input = ADC_NEGATIVE_INPUT_GND;
    341e:	23c0      	movs	r3, #192	; 0xc0
    3420:	015b      	lsls	r3, r3, #5
    3422:	81d3      	strh	r3, [r2, #14]
	adc_init(&adc_instance, ADC, &config_adc);
    3424:	4c0f      	ldr	r4, [pc, #60]	; (3464 <configure_adc+0x64>)
    3426:	4910      	ldr	r1, [pc, #64]	; (3468 <configure_adc+0x68>)
    3428:	0020      	movs	r0, r4
    342a:	4b10      	ldr	r3, [pc, #64]	; (346c <configure_adc+0x6c>)
    342c:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    342e:	6822      	ldr	r2, [r4, #0]
    3430:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    3432:	b25b      	sxtb	r3, r3
    3434:	2b00      	cmp	r3, #0
    3436:	dbfb      	blt.n	3430 <configure_adc+0x30>
    3438:	2180      	movs	r1, #128	; 0x80
    343a:	0409      	lsls	r1, r1, #16
    343c:	4b0c      	ldr	r3, [pc, #48]	; (3470 <configure_adc+0x70>)
    343e:	6019      	str	r1, [r3, #0]
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    3440:	230f      	movs	r3, #15
    3442:	7593      	strb	r3, [r2, #22]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    3444:	7613      	strb	r3, [r2, #24]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    3446:	7813      	ldrb	r3, [r2, #0]
    3448:	2102      	movs	r1, #2
    344a:	430b      	orrs	r3, r1
    344c:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
    344e:	4b05      	ldr	r3, [pc, #20]	; (3464 <configure_adc+0x64>)
    3450:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    3452:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    3454:	b25b      	sxtb	r3, r3
    3456:	2b00      	cmp	r3, #0
    3458:	dbfb      	blt.n	3452 <configure_adc+0x52>
	adc_enable(&adc_instance);
}
    345a:	b00c      	add	sp, #48	; 0x30
    345c:	bd10      	pop	{r4, pc}
    345e:	46c0      	nop			; (mov r8, r8)
    3460:	000008d5 	.word	0x000008d5
    3464:	20000aac 	.word	0x20000aac
    3468:	42004000 	.word	0x42004000
    346c:	00000919 	.word	0x00000919
    3470:	e000e100 	.word	0xe000e100

00003474 <setupBoard>:


void setupBoard(void)
{
    3474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t adcResult;
	uint16_t megaHurtz = system_gclk_gen_get_hz(0);
    3476:	2000      	movs	r0, #0
    3478:	4b31      	ldr	r3, [pc, #196]	; (3540 <setupBoard+0xcc>)
    347a:	4798      	blx	r3
    347c:	b287      	uxth	r7, r0

	system_init();
    347e:	4b31      	ldr	r3, [pc, #196]	; (3544 <setupBoard+0xd0>)
    3480:	4798      	blx	r3
	
	configure_adc();
    3482:	4b31      	ldr	r3, [pc, #196]	; (3548 <setupBoard+0xd4>)
    3484:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    3486:	4b31      	ldr	r3, [pc, #196]	; (354c <setupBoard+0xd8>)
    3488:	6819      	ldr	r1, [r3, #0]
    348a:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    348c:	b25b      	sxtb	r3, r3
    348e:	2b00      	cmp	r3, #0
    3490:	dbfb      	blt.n	348a <setupBoard+0x16>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    3492:	7b0b      	ldrb	r3, [r1, #12]
    3494:	2202      	movs	r2, #2
    3496:	4313      	orrs	r3, r2
    3498:	730b      	strb	r3, [r1, #12]
    349a:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    349c:	b25b      	sxtb	r3, r3
    349e:	2b00      	cmp	r3, #0
    34a0:	dbfb      	blt.n	349a <setupBoard+0x26>
	if (int_flags & ADC_INTFLAG_RESRDY) {
    34a2:	2401      	movs	r4, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
    34a4:	2604      	movs	r6, #4
		status_flags |= ADC_STATUS_WINDOW;
    34a6:	2502      	movs	r5, #2
    34a8:	e001      	b.n	34ae <setupBoard+0x3a>
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    34aa:	4214      	tst	r4, r2
    34ac:	d10a      	bne.n	34c4 <setupBoard+0x50>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    34ae:	7e0b      	ldrb	r3, [r1, #24]
    34b0:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
    34b2:	0022      	movs	r2, r4
    34b4:	401a      	ands	r2, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
    34b6:	421e      	tst	r6, r3
    34b8:	d000      	beq.n	34bc <setupBoard+0x48>
		status_flags |= ADC_STATUS_WINDOW;
    34ba:	432a      	orrs	r2, r5
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    34bc:	421d      	tst	r5, r3
    34be:	d0f4      	beq.n	34aa <setupBoard+0x36>
		status_flags |= ADC_STATUS_OVERRUN;
    34c0:	4332      	orrs	r2, r6
    34c2:	e7f2      	b.n	34aa <setupBoard+0x36>
    34c4:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    34c6:	b25b      	sxtb	r3, r3
    34c8:	2b00      	cmp	r3, #0
    34ca:	dbfb      	blt.n	34c4 <setupBoard+0x50>
	*result = adc_module->RESULT.reg;
    34cc:	8b48      	ldrh	r0, [r1, #26]
    34ce:	b280      	uxth	r0, r0
	adc_module->INTFLAG.reg = int_flags;
    34d0:	2301      	movs	r3, #1
    34d2:	760b      	strb	r3, [r1, #24]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    34d4:	7e0a      	ldrb	r2, [r1, #24]
    34d6:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    34d8:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    34da:	0754      	lsls	r4, r2, #29
    34dc:	d501      	bpl.n	34e2 <setupBoard+0x6e>
		status_flags |= ADC_STATUS_WINDOW;
    34de:	2402      	movs	r4, #2
    34e0:	4323      	orrs	r3, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    34e2:	0792      	lsls	r2, r2, #30
    34e4:	d501      	bpl.n	34ea <setupBoard+0x76>
		status_flags |= ADC_STATUS_OVERRUN;
    34e6:	2204      	movs	r2, #4
    34e8:	4313      	orrs	r3, r2
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    34ea:	075b      	lsls	r3, r3, #29
    34ec:	d501      	bpl.n	34f2 <setupBoard+0x7e>
	adc_module->INTFLAG.reg = int_flags;
    34ee:	2302      	movs	r3, #2
    34f0:	760b      	strb	r3, [r1, #24]
	adc_start_conversion(&adc_instance);
	do {
	/* Wait for conversion to be done and read out result */
	} while (adc_read(&adc_instance, &adcResult) == STATUS_BUSY);
	
	srand((adcResult ^ megaHurtz));
    34f2:	4078      	eors	r0, r7
    34f4:	4b16      	ldr	r3, [pc, #88]	; (3550 <setupBoard+0xdc>)
    34f6:	4798      	blx	r3
	
	delay_init();
    34f8:	4b16      	ldr	r3, [pc, #88]	; (3554 <setupBoard+0xe0>)
    34fa:	4798      	blx	r3
	
	conf_systick();
    34fc:	4c16      	ldr	r4, [pc, #88]	; (3558 <setupBoard+0xe4>)
    34fe:	47a0      	blx	r4

	//configure_usart_USB();
	
	configure_usart();
    3500:	4b16      	ldr	r3, [pc, #88]	; (355c <setupBoard+0xe8>)
    3502:	4798      	blx	r3
	configure_usart_callbacks();
    3504:	4b16      	ldr	r3, [pc, #88]	; (3560 <setupBoard+0xec>)
    3506:	4798      	blx	r3
	cpu_irq_enable();
    3508:	2201      	movs	r2, #1
    350a:	4b16      	ldr	r3, [pc, #88]	; (3564 <setupBoard+0xf0>)
    350c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    350e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3512:	b662      	cpsie	i
	system_interrupt_enable_global();
	
	//I have no idea why I need to call this; it's in the callback and it
	//doesn't work without this line here. Remove this at your own peril.
	usart_read_buffer_job(&usart_instance, (uint8_t*)&rx_buf, 1);
    3514:	4914      	ldr	r1, [pc, #80]	; (3568 <setupBoard+0xf4>)
    3516:	4815      	ldr	r0, [pc, #84]	; (356c <setupBoard+0xf8>)
    3518:	4b15      	ldr	r3, [pc, #84]	; (3570 <setupBoard+0xfc>)
    351a:	4798      	blx	r3

	printf("\n\rSerial OK 9600 8N1\n\r");
    351c:	4815      	ldr	r0, [pc, #84]	; (3574 <setupBoard+0x100>)
    351e:	4b16      	ldr	r3, [pc, #88]	; (3578 <setupBoard+0x104>)
    3520:	4798      	blx	r3

	
	InitLCD();
    3522:	4b16      	ldr	r3, [pc, #88]	; (357c <setupBoard+0x108>)
    3524:	4798      	blx	r3
	splashScreen();
    3526:	4b16      	ldr	r3, [pc, #88]	; (3580 <setupBoard+0x10c>)
    3528:	4798      	blx	r3
			
	conf_systick();
    352a:	47a0      	blx	r4

	xCharPos=0;
    352c:	2300      	movs	r3, #0
    352e:	4a15      	ldr	r2, [pc, #84]	; (3584 <setupBoard+0x110>)
    3530:	8013      	strh	r3, [r2, #0]
	yCharPos=0;
    3532:	4a15      	ldr	r2, [pc, #84]	; (3588 <setupBoard+0x114>)
    3534:	8013      	strh	r3, [r2, #0]
	drawChar(0xFF);
    3536:	20ff      	movs	r0, #255	; 0xff
    3538:	4b14      	ldr	r3, [pc, #80]	; (358c <setupBoard+0x118>)
    353a:	4798      	blx	r3
}
    353c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    353e:	46c0      	nop			; (mov r8, r8)
    3540:	00001d81 	.word	0x00001d81
    3544:	00001fc5 	.word	0x00001fc5
    3548:	00003401 	.word	0x00003401
    354c:	20000aac 	.word	0x20000aac
    3550:	00003bb9 	.word	0x00003bb9
    3554:	000007c1 	.word	0x000007c1
    3558:	0000327d 	.word	0x0000327d
    355c:	000032d1 	.word	0x000032d1
    3560:	000033d9 	.word	0x000033d9
    3564:	20000008 	.word	0x20000008
    3568:	20000aa8 	.word	0x20000aa8
    356c:	200002e8 	.word	0x200002e8
    3570:	000016a1 	.word	0x000016a1
    3574:	00006e58 	.word	0x00006e58
    3578:	00003b5d 	.word	0x00003b5d
    357c:	00002fad 	.word	0x00002fad
    3580:	0000058d 	.word	0x0000058d
    3584:	200002a4 	.word	0x200002a4
    3588:	200002a6 	.word	0x200002a6
    358c:	000021a9 	.word	0x000021a9

00003590 <main>:
{
    3590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	setupBoard();
    3592:	4b1f      	ldr	r3, [pc, #124]	; (3610 <main+0x80>)
    3594:	4798      	blx	r3
	uint8_t * buffer  = malloc(UART_BUFFER_SIZE * sizeof(uint8_t));
    3596:	200a      	movs	r0, #10
    3598:	4b1e      	ldr	r3, [pc, #120]	; (3614 <main+0x84>)
    359a:	4798      	blx	r3
	ouroboros = ring_init(buffer, UART_BUFFER_SIZE);
    359c:	210a      	movs	r1, #10
    359e:	4b1e      	ldr	r3, [pc, #120]	; (3618 <main+0x88>)
    35a0:	4798      	blx	r3
    35a2:	4b1e      	ldr	r3, [pc, #120]	; (361c <main+0x8c>)
    35a4:	6018      	str	r0, [r3, #0]
		if((ul_tickcount % (UINT16_MAX/4) == 0) && (funcLock == false))
    35a6:	4e1e      	ldr	r6, [pc, #120]	; (3620 <main+0x90>)
    35a8:	4d1e      	ldr	r5, [pc, #120]	; (3624 <main+0x94>)
    35aa:	4c1f      	ldr	r4, [pc, #124]	; (3628 <main+0x98>)
    35ac:	e016      	b.n	35dc <main+0x4c>
		if((ul_tickcount % 200 == 0) && (funcLock == false))
    35ae:	4b1c      	ldr	r3, [pc, #112]	; (3620 <main+0x90>)
    35b0:	8818      	ldrh	r0, [r3, #0]
    35b2:	21c8      	movs	r1, #200	; 0xc8
    35b4:	4b1b      	ldr	r3, [pc, #108]	; (3624 <main+0x94>)
    35b6:	4798      	blx	r3
    35b8:	b289      	uxth	r1, r1
    35ba:	2900      	cmp	r1, #0
    35bc:	d10e      	bne.n	35dc <main+0x4c>
    35be:	4b1b      	ldr	r3, [pc, #108]	; (362c <main+0x9c>)
    35c0:	781b      	ldrb	r3, [r3, #0]
    35c2:	2b00      	cmp	r3, #0
    35c4:	d10a      	bne.n	35dc <main+0x4c>
			funcLock = true;
    35c6:	4f19      	ldr	r7, [pc, #100]	; (362c <main+0x9c>)
    35c8:	3301      	adds	r3, #1
    35ca:	703b      	strb	r3, [r7, #0]
			readKeyboard();
    35cc:	4b18      	ldr	r3, [pc, #96]	; (3630 <main+0xa0>)
    35ce:	4798      	blx	r3
			printKeyboardBuffer();
    35d0:	4b18      	ldr	r3, [pc, #96]	; (3634 <main+0xa4>)
    35d2:	4798      	blx	r3
			parseRXBuffer();
    35d4:	4b18      	ldr	r3, [pc, #96]	; (3638 <main+0xa8>)
    35d6:	4798      	blx	r3
			funcLock = false;
    35d8:	2300      	movs	r3, #0
    35da:	703b      	strb	r3, [r7, #0]
		__WFI();
    35dc:	bf30      	wfi
		if((ul_tickcount % (UINT16_MAX/4) == 0) && (funcLock == false))
    35de:	8830      	ldrh	r0, [r6, #0]
    35e0:	0021      	movs	r1, r4
    35e2:	47a8      	blx	r5
    35e4:	b289      	uxth	r1, r1
    35e6:	2900      	cmp	r1, #0
    35e8:	d1e1      	bne.n	35ae <main+0x1e>
    35ea:	4b10      	ldr	r3, [pc, #64]	; (362c <main+0x9c>)
    35ec:	781b      	ldrb	r3, [r3, #0]
    35ee:	2b00      	cmp	r3, #0
    35f0:	d1f4      	bne.n	35dc <main+0x4c>
			funcLock = true;
    35f2:	4f0e      	ldr	r7, [pc, #56]	; (362c <main+0x9c>)
    35f4:	3301      	adds	r3, #1
    35f6:	703b      	strb	r3, [r7, #0]
			blinkCursor();
    35f8:	4b10      	ldr	r3, [pc, #64]	; (363c <main+0xac>)
    35fa:	4798      	blx	r3
			funcLock = false;
    35fc:	2300      	movs	r3, #0
    35fe:	703b      	strb	r3, [r7, #0]
			printf("%i\n",rand());
    3600:	4b0f      	ldr	r3, [pc, #60]	; (3640 <main+0xb0>)
    3602:	4798      	blx	r3
    3604:	0001      	movs	r1, r0
    3606:	480f      	ldr	r0, [pc, #60]	; (3644 <main+0xb4>)
    3608:	4b0f      	ldr	r3, [pc, #60]	; (3648 <main+0xb8>)
    360a:	4798      	blx	r3
    360c:	e7cf      	b.n	35ae <main+0x1e>
    360e:	46c0      	nop			; (mov r8, r8)
    3610:	00003475 	.word	0x00003475
    3614:	000039d5 	.word	0x000039d5
    3618:	00000115 	.word	0x00000115
    361c:	200002bc 	.word	0x200002bc
    3620:	200002aa 	.word	0x200002aa
    3624:	00003759 	.word	0x00003759
    3628:	00003fff 	.word	0x00003fff
    362c:	200002a9 	.word	0x200002a9
    3630:	00002a71 	.word	0x00002a71
    3634:	0000274d 	.word	0x0000274d
    3638:	0000076d 	.word	0x0000076d
    363c:	00002441 	.word	0x00002441
    3640:	00003c15 	.word	0x00003c15
    3644:	00006e54 	.word	0x00006e54
    3648:	00003b5d 	.word	0x00003b5d

0000364c <__udivsi3>:
    364c:	2200      	movs	r2, #0
    364e:	0843      	lsrs	r3, r0, #1
    3650:	428b      	cmp	r3, r1
    3652:	d374      	bcc.n	373e <__udivsi3+0xf2>
    3654:	0903      	lsrs	r3, r0, #4
    3656:	428b      	cmp	r3, r1
    3658:	d35f      	bcc.n	371a <__udivsi3+0xce>
    365a:	0a03      	lsrs	r3, r0, #8
    365c:	428b      	cmp	r3, r1
    365e:	d344      	bcc.n	36ea <__udivsi3+0x9e>
    3660:	0b03      	lsrs	r3, r0, #12
    3662:	428b      	cmp	r3, r1
    3664:	d328      	bcc.n	36b8 <__udivsi3+0x6c>
    3666:	0c03      	lsrs	r3, r0, #16
    3668:	428b      	cmp	r3, r1
    366a:	d30d      	bcc.n	3688 <__udivsi3+0x3c>
    366c:	22ff      	movs	r2, #255	; 0xff
    366e:	0209      	lsls	r1, r1, #8
    3670:	ba12      	rev	r2, r2
    3672:	0c03      	lsrs	r3, r0, #16
    3674:	428b      	cmp	r3, r1
    3676:	d302      	bcc.n	367e <__udivsi3+0x32>
    3678:	1212      	asrs	r2, r2, #8
    367a:	0209      	lsls	r1, r1, #8
    367c:	d065      	beq.n	374a <__udivsi3+0xfe>
    367e:	0b03      	lsrs	r3, r0, #12
    3680:	428b      	cmp	r3, r1
    3682:	d319      	bcc.n	36b8 <__udivsi3+0x6c>
    3684:	e000      	b.n	3688 <__udivsi3+0x3c>
    3686:	0a09      	lsrs	r1, r1, #8
    3688:	0bc3      	lsrs	r3, r0, #15
    368a:	428b      	cmp	r3, r1
    368c:	d301      	bcc.n	3692 <__udivsi3+0x46>
    368e:	03cb      	lsls	r3, r1, #15
    3690:	1ac0      	subs	r0, r0, r3
    3692:	4152      	adcs	r2, r2
    3694:	0b83      	lsrs	r3, r0, #14
    3696:	428b      	cmp	r3, r1
    3698:	d301      	bcc.n	369e <__udivsi3+0x52>
    369a:	038b      	lsls	r3, r1, #14
    369c:	1ac0      	subs	r0, r0, r3
    369e:	4152      	adcs	r2, r2
    36a0:	0b43      	lsrs	r3, r0, #13
    36a2:	428b      	cmp	r3, r1
    36a4:	d301      	bcc.n	36aa <__udivsi3+0x5e>
    36a6:	034b      	lsls	r3, r1, #13
    36a8:	1ac0      	subs	r0, r0, r3
    36aa:	4152      	adcs	r2, r2
    36ac:	0b03      	lsrs	r3, r0, #12
    36ae:	428b      	cmp	r3, r1
    36b0:	d301      	bcc.n	36b6 <__udivsi3+0x6a>
    36b2:	030b      	lsls	r3, r1, #12
    36b4:	1ac0      	subs	r0, r0, r3
    36b6:	4152      	adcs	r2, r2
    36b8:	0ac3      	lsrs	r3, r0, #11
    36ba:	428b      	cmp	r3, r1
    36bc:	d301      	bcc.n	36c2 <__udivsi3+0x76>
    36be:	02cb      	lsls	r3, r1, #11
    36c0:	1ac0      	subs	r0, r0, r3
    36c2:	4152      	adcs	r2, r2
    36c4:	0a83      	lsrs	r3, r0, #10
    36c6:	428b      	cmp	r3, r1
    36c8:	d301      	bcc.n	36ce <__udivsi3+0x82>
    36ca:	028b      	lsls	r3, r1, #10
    36cc:	1ac0      	subs	r0, r0, r3
    36ce:	4152      	adcs	r2, r2
    36d0:	0a43      	lsrs	r3, r0, #9
    36d2:	428b      	cmp	r3, r1
    36d4:	d301      	bcc.n	36da <__udivsi3+0x8e>
    36d6:	024b      	lsls	r3, r1, #9
    36d8:	1ac0      	subs	r0, r0, r3
    36da:	4152      	adcs	r2, r2
    36dc:	0a03      	lsrs	r3, r0, #8
    36de:	428b      	cmp	r3, r1
    36e0:	d301      	bcc.n	36e6 <__udivsi3+0x9a>
    36e2:	020b      	lsls	r3, r1, #8
    36e4:	1ac0      	subs	r0, r0, r3
    36e6:	4152      	adcs	r2, r2
    36e8:	d2cd      	bcs.n	3686 <__udivsi3+0x3a>
    36ea:	09c3      	lsrs	r3, r0, #7
    36ec:	428b      	cmp	r3, r1
    36ee:	d301      	bcc.n	36f4 <__udivsi3+0xa8>
    36f0:	01cb      	lsls	r3, r1, #7
    36f2:	1ac0      	subs	r0, r0, r3
    36f4:	4152      	adcs	r2, r2
    36f6:	0983      	lsrs	r3, r0, #6
    36f8:	428b      	cmp	r3, r1
    36fa:	d301      	bcc.n	3700 <__udivsi3+0xb4>
    36fc:	018b      	lsls	r3, r1, #6
    36fe:	1ac0      	subs	r0, r0, r3
    3700:	4152      	adcs	r2, r2
    3702:	0943      	lsrs	r3, r0, #5
    3704:	428b      	cmp	r3, r1
    3706:	d301      	bcc.n	370c <__udivsi3+0xc0>
    3708:	014b      	lsls	r3, r1, #5
    370a:	1ac0      	subs	r0, r0, r3
    370c:	4152      	adcs	r2, r2
    370e:	0903      	lsrs	r3, r0, #4
    3710:	428b      	cmp	r3, r1
    3712:	d301      	bcc.n	3718 <__udivsi3+0xcc>
    3714:	010b      	lsls	r3, r1, #4
    3716:	1ac0      	subs	r0, r0, r3
    3718:	4152      	adcs	r2, r2
    371a:	08c3      	lsrs	r3, r0, #3
    371c:	428b      	cmp	r3, r1
    371e:	d301      	bcc.n	3724 <__udivsi3+0xd8>
    3720:	00cb      	lsls	r3, r1, #3
    3722:	1ac0      	subs	r0, r0, r3
    3724:	4152      	adcs	r2, r2
    3726:	0883      	lsrs	r3, r0, #2
    3728:	428b      	cmp	r3, r1
    372a:	d301      	bcc.n	3730 <__udivsi3+0xe4>
    372c:	008b      	lsls	r3, r1, #2
    372e:	1ac0      	subs	r0, r0, r3
    3730:	4152      	adcs	r2, r2
    3732:	0843      	lsrs	r3, r0, #1
    3734:	428b      	cmp	r3, r1
    3736:	d301      	bcc.n	373c <__udivsi3+0xf0>
    3738:	004b      	lsls	r3, r1, #1
    373a:	1ac0      	subs	r0, r0, r3
    373c:	4152      	adcs	r2, r2
    373e:	1a41      	subs	r1, r0, r1
    3740:	d200      	bcs.n	3744 <__udivsi3+0xf8>
    3742:	4601      	mov	r1, r0
    3744:	4152      	adcs	r2, r2
    3746:	4610      	mov	r0, r2
    3748:	4770      	bx	lr
    374a:	e7ff      	b.n	374c <__udivsi3+0x100>
    374c:	b501      	push	{r0, lr}
    374e:	2000      	movs	r0, #0
    3750:	f000 f8f0 	bl	3934 <__aeabi_idiv0>
    3754:	bd02      	pop	{r1, pc}
    3756:	46c0      	nop			; (mov r8, r8)

00003758 <__aeabi_uidivmod>:
    3758:	2900      	cmp	r1, #0
    375a:	d0f7      	beq.n	374c <__udivsi3+0x100>
    375c:	e776      	b.n	364c <__udivsi3>
    375e:	4770      	bx	lr

00003760 <__divsi3>:
    3760:	4603      	mov	r3, r0
    3762:	430b      	orrs	r3, r1
    3764:	d47f      	bmi.n	3866 <__divsi3+0x106>
    3766:	2200      	movs	r2, #0
    3768:	0843      	lsrs	r3, r0, #1
    376a:	428b      	cmp	r3, r1
    376c:	d374      	bcc.n	3858 <__divsi3+0xf8>
    376e:	0903      	lsrs	r3, r0, #4
    3770:	428b      	cmp	r3, r1
    3772:	d35f      	bcc.n	3834 <__divsi3+0xd4>
    3774:	0a03      	lsrs	r3, r0, #8
    3776:	428b      	cmp	r3, r1
    3778:	d344      	bcc.n	3804 <__divsi3+0xa4>
    377a:	0b03      	lsrs	r3, r0, #12
    377c:	428b      	cmp	r3, r1
    377e:	d328      	bcc.n	37d2 <__divsi3+0x72>
    3780:	0c03      	lsrs	r3, r0, #16
    3782:	428b      	cmp	r3, r1
    3784:	d30d      	bcc.n	37a2 <__divsi3+0x42>
    3786:	22ff      	movs	r2, #255	; 0xff
    3788:	0209      	lsls	r1, r1, #8
    378a:	ba12      	rev	r2, r2
    378c:	0c03      	lsrs	r3, r0, #16
    378e:	428b      	cmp	r3, r1
    3790:	d302      	bcc.n	3798 <__divsi3+0x38>
    3792:	1212      	asrs	r2, r2, #8
    3794:	0209      	lsls	r1, r1, #8
    3796:	d065      	beq.n	3864 <__divsi3+0x104>
    3798:	0b03      	lsrs	r3, r0, #12
    379a:	428b      	cmp	r3, r1
    379c:	d319      	bcc.n	37d2 <__divsi3+0x72>
    379e:	e000      	b.n	37a2 <__divsi3+0x42>
    37a0:	0a09      	lsrs	r1, r1, #8
    37a2:	0bc3      	lsrs	r3, r0, #15
    37a4:	428b      	cmp	r3, r1
    37a6:	d301      	bcc.n	37ac <__divsi3+0x4c>
    37a8:	03cb      	lsls	r3, r1, #15
    37aa:	1ac0      	subs	r0, r0, r3
    37ac:	4152      	adcs	r2, r2
    37ae:	0b83      	lsrs	r3, r0, #14
    37b0:	428b      	cmp	r3, r1
    37b2:	d301      	bcc.n	37b8 <__divsi3+0x58>
    37b4:	038b      	lsls	r3, r1, #14
    37b6:	1ac0      	subs	r0, r0, r3
    37b8:	4152      	adcs	r2, r2
    37ba:	0b43      	lsrs	r3, r0, #13
    37bc:	428b      	cmp	r3, r1
    37be:	d301      	bcc.n	37c4 <__divsi3+0x64>
    37c0:	034b      	lsls	r3, r1, #13
    37c2:	1ac0      	subs	r0, r0, r3
    37c4:	4152      	adcs	r2, r2
    37c6:	0b03      	lsrs	r3, r0, #12
    37c8:	428b      	cmp	r3, r1
    37ca:	d301      	bcc.n	37d0 <__divsi3+0x70>
    37cc:	030b      	lsls	r3, r1, #12
    37ce:	1ac0      	subs	r0, r0, r3
    37d0:	4152      	adcs	r2, r2
    37d2:	0ac3      	lsrs	r3, r0, #11
    37d4:	428b      	cmp	r3, r1
    37d6:	d301      	bcc.n	37dc <__divsi3+0x7c>
    37d8:	02cb      	lsls	r3, r1, #11
    37da:	1ac0      	subs	r0, r0, r3
    37dc:	4152      	adcs	r2, r2
    37de:	0a83      	lsrs	r3, r0, #10
    37e0:	428b      	cmp	r3, r1
    37e2:	d301      	bcc.n	37e8 <__divsi3+0x88>
    37e4:	028b      	lsls	r3, r1, #10
    37e6:	1ac0      	subs	r0, r0, r3
    37e8:	4152      	adcs	r2, r2
    37ea:	0a43      	lsrs	r3, r0, #9
    37ec:	428b      	cmp	r3, r1
    37ee:	d301      	bcc.n	37f4 <__divsi3+0x94>
    37f0:	024b      	lsls	r3, r1, #9
    37f2:	1ac0      	subs	r0, r0, r3
    37f4:	4152      	adcs	r2, r2
    37f6:	0a03      	lsrs	r3, r0, #8
    37f8:	428b      	cmp	r3, r1
    37fa:	d301      	bcc.n	3800 <__divsi3+0xa0>
    37fc:	020b      	lsls	r3, r1, #8
    37fe:	1ac0      	subs	r0, r0, r3
    3800:	4152      	adcs	r2, r2
    3802:	d2cd      	bcs.n	37a0 <__divsi3+0x40>
    3804:	09c3      	lsrs	r3, r0, #7
    3806:	428b      	cmp	r3, r1
    3808:	d301      	bcc.n	380e <__divsi3+0xae>
    380a:	01cb      	lsls	r3, r1, #7
    380c:	1ac0      	subs	r0, r0, r3
    380e:	4152      	adcs	r2, r2
    3810:	0983      	lsrs	r3, r0, #6
    3812:	428b      	cmp	r3, r1
    3814:	d301      	bcc.n	381a <__divsi3+0xba>
    3816:	018b      	lsls	r3, r1, #6
    3818:	1ac0      	subs	r0, r0, r3
    381a:	4152      	adcs	r2, r2
    381c:	0943      	lsrs	r3, r0, #5
    381e:	428b      	cmp	r3, r1
    3820:	d301      	bcc.n	3826 <__divsi3+0xc6>
    3822:	014b      	lsls	r3, r1, #5
    3824:	1ac0      	subs	r0, r0, r3
    3826:	4152      	adcs	r2, r2
    3828:	0903      	lsrs	r3, r0, #4
    382a:	428b      	cmp	r3, r1
    382c:	d301      	bcc.n	3832 <__divsi3+0xd2>
    382e:	010b      	lsls	r3, r1, #4
    3830:	1ac0      	subs	r0, r0, r3
    3832:	4152      	adcs	r2, r2
    3834:	08c3      	lsrs	r3, r0, #3
    3836:	428b      	cmp	r3, r1
    3838:	d301      	bcc.n	383e <__divsi3+0xde>
    383a:	00cb      	lsls	r3, r1, #3
    383c:	1ac0      	subs	r0, r0, r3
    383e:	4152      	adcs	r2, r2
    3840:	0883      	lsrs	r3, r0, #2
    3842:	428b      	cmp	r3, r1
    3844:	d301      	bcc.n	384a <__divsi3+0xea>
    3846:	008b      	lsls	r3, r1, #2
    3848:	1ac0      	subs	r0, r0, r3
    384a:	4152      	adcs	r2, r2
    384c:	0843      	lsrs	r3, r0, #1
    384e:	428b      	cmp	r3, r1
    3850:	d301      	bcc.n	3856 <__divsi3+0xf6>
    3852:	004b      	lsls	r3, r1, #1
    3854:	1ac0      	subs	r0, r0, r3
    3856:	4152      	adcs	r2, r2
    3858:	1a41      	subs	r1, r0, r1
    385a:	d200      	bcs.n	385e <__divsi3+0xfe>
    385c:	4601      	mov	r1, r0
    385e:	4152      	adcs	r2, r2
    3860:	4610      	mov	r0, r2
    3862:	4770      	bx	lr
    3864:	e05d      	b.n	3922 <__divsi3+0x1c2>
    3866:	0fca      	lsrs	r2, r1, #31
    3868:	d000      	beq.n	386c <__divsi3+0x10c>
    386a:	4249      	negs	r1, r1
    386c:	1003      	asrs	r3, r0, #32
    386e:	d300      	bcc.n	3872 <__divsi3+0x112>
    3870:	4240      	negs	r0, r0
    3872:	4053      	eors	r3, r2
    3874:	2200      	movs	r2, #0
    3876:	469c      	mov	ip, r3
    3878:	0903      	lsrs	r3, r0, #4
    387a:	428b      	cmp	r3, r1
    387c:	d32d      	bcc.n	38da <__divsi3+0x17a>
    387e:	0a03      	lsrs	r3, r0, #8
    3880:	428b      	cmp	r3, r1
    3882:	d312      	bcc.n	38aa <__divsi3+0x14a>
    3884:	22fc      	movs	r2, #252	; 0xfc
    3886:	0189      	lsls	r1, r1, #6
    3888:	ba12      	rev	r2, r2
    388a:	0a03      	lsrs	r3, r0, #8
    388c:	428b      	cmp	r3, r1
    388e:	d30c      	bcc.n	38aa <__divsi3+0x14a>
    3890:	0189      	lsls	r1, r1, #6
    3892:	1192      	asrs	r2, r2, #6
    3894:	428b      	cmp	r3, r1
    3896:	d308      	bcc.n	38aa <__divsi3+0x14a>
    3898:	0189      	lsls	r1, r1, #6
    389a:	1192      	asrs	r2, r2, #6
    389c:	428b      	cmp	r3, r1
    389e:	d304      	bcc.n	38aa <__divsi3+0x14a>
    38a0:	0189      	lsls	r1, r1, #6
    38a2:	d03a      	beq.n	391a <__divsi3+0x1ba>
    38a4:	1192      	asrs	r2, r2, #6
    38a6:	e000      	b.n	38aa <__divsi3+0x14a>
    38a8:	0989      	lsrs	r1, r1, #6
    38aa:	09c3      	lsrs	r3, r0, #7
    38ac:	428b      	cmp	r3, r1
    38ae:	d301      	bcc.n	38b4 <__divsi3+0x154>
    38b0:	01cb      	lsls	r3, r1, #7
    38b2:	1ac0      	subs	r0, r0, r3
    38b4:	4152      	adcs	r2, r2
    38b6:	0983      	lsrs	r3, r0, #6
    38b8:	428b      	cmp	r3, r1
    38ba:	d301      	bcc.n	38c0 <__divsi3+0x160>
    38bc:	018b      	lsls	r3, r1, #6
    38be:	1ac0      	subs	r0, r0, r3
    38c0:	4152      	adcs	r2, r2
    38c2:	0943      	lsrs	r3, r0, #5
    38c4:	428b      	cmp	r3, r1
    38c6:	d301      	bcc.n	38cc <__divsi3+0x16c>
    38c8:	014b      	lsls	r3, r1, #5
    38ca:	1ac0      	subs	r0, r0, r3
    38cc:	4152      	adcs	r2, r2
    38ce:	0903      	lsrs	r3, r0, #4
    38d0:	428b      	cmp	r3, r1
    38d2:	d301      	bcc.n	38d8 <__divsi3+0x178>
    38d4:	010b      	lsls	r3, r1, #4
    38d6:	1ac0      	subs	r0, r0, r3
    38d8:	4152      	adcs	r2, r2
    38da:	08c3      	lsrs	r3, r0, #3
    38dc:	428b      	cmp	r3, r1
    38de:	d301      	bcc.n	38e4 <__divsi3+0x184>
    38e0:	00cb      	lsls	r3, r1, #3
    38e2:	1ac0      	subs	r0, r0, r3
    38e4:	4152      	adcs	r2, r2
    38e6:	0883      	lsrs	r3, r0, #2
    38e8:	428b      	cmp	r3, r1
    38ea:	d301      	bcc.n	38f0 <__divsi3+0x190>
    38ec:	008b      	lsls	r3, r1, #2
    38ee:	1ac0      	subs	r0, r0, r3
    38f0:	4152      	adcs	r2, r2
    38f2:	d2d9      	bcs.n	38a8 <__divsi3+0x148>
    38f4:	0843      	lsrs	r3, r0, #1
    38f6:	428b      	cmp	r3, r1
    38f8:	d301      	bcc.n	38fe <__divsi3+0x19e>
    38fa:	004b      	lsls	r3, r1, #1
    38fc:	1ac0      	subs	r0, r0, r3
    38fe:	4152      	adcs	r2, r2
    3900:	1a41      	subs	r1, r0, r1
    3902:	d200      	bcs.n	3906 <__divsi3+0x1a6>
    3904:	4601      	mov	r1, r0
    3906:	4663      	mov	r3, ip
    3908:	4152      	adcs	r2, r2
    390a:	105b      	asrs	r3, r3, #1
    390c:	4610      	mov	r0, r2
    390e:	d301      	bcc.n	3914 <__divsi3+0x1b4>
    3910:	4240      	negs	r0, r0
    3912:	2b00      	cmp	r3, #0
    3914:	d500      	bpl.n	3918 <__divsi3+0x1b8>
    3916:	4249      	negs	r1, r1
    3918:	4770      	bx	lr
    391a:	4663      	mov	r3, ip
    391c:	105b      	asrs	r3, r3, #1
    391e:	d300      	bcc.n	3922 <__divsi3+0x1c2>
    3920:	4240      	negs	r0, r0
    3922:	b501      	push	{r0, lr}
    3924:	2000      	movs	r0, #0
    3926:	f000 f805 	bl	3934 <__aeabi_idiv0>
    392a:	bd02      	pop	{r1, pc}

0000392c <__aeabi_idivmod>:
    392c:	2900      	cmp	r1, #0
    392e:	d0f8      	beq.n	3922 <__divsi3+0x1c2>
    3930:	e716      	b.n	3760 <__divsi3>
    3932:	4770      	bx	lr

00003934 <__aeabi_idiv0>:
    3934:	4770      	bx	lr
    3936:	46c0      	nop			; (mov r8, r8)

00003938 <__aeabi_lmul>:
    3938:	b5f0      	push	{r4, r5, r6, r7, lr}
    393a:	46ce      	mov	lr, r9
    393c:	4647      	mov	r7, r8
    393e:	0415      	lsls	r5, r2, #16
    3940:	0c2d      	lsrs	r5, r5, #16
    3942:	002e      	movs	r6, r5
    3944:	b580      	push	{r7, lr}
    3946:	0407      	lsls	r7, r0, #16
    3948:	0c14      	lsrs	r4, r2, #16
    394a:	0c3f      	lsrs	r7, r7, #16
    394c:	4699      	mov	r9, r3
    394e:	0c03      	lsrs	r3, r0, #16
    3950:	437e      	muls	r6, r7
    3952:	435d      	muls	r5, r3
    3954:	4367      	muls	r7, r4
    3956:	4363      	muls	r3, r4
    3958:	197f      	adds	r7, r7, r5
    395a:	0c34      	lsrs	r4, r6, #16
    395c:	19e4      	adds	r4, r4, r7
    395e:	469c      	mov	ip, r3
    3960:	42a5      	cmp	r5, r4
    3962:	d903      	bls.n	396c <__aeabi_lmul+0x34>
    3964:	2380      	movs	r3, #128	; 0x80
    3966:	025b      	lsls	r3, r3, #9
    3968:	4698      	mov	r8, r3
    396a:	44c4      	add	ip, r8
    396c:	464b      	mov	r3, r9
    396e:	4351      	muls	r1, r2
    3970:	4343      	muls	r3, r0
    3972:	0436      	lsls	r6, r6, #16
    3974:	0c36      	lsrs	r6, r6, #16
    3976:	0c25      	lsrs	r5, r4, #16
    3978:	0424      	lsls	r4, r4, #16
    397a:	4465      	add	r5, ip
    397c:	19a4      	adds	r4, r4, r6
    397e:	1859      	adds	r1, r3, r1
    3980:	1949      	adds	r1, r1, r5
    3982:	0020      	movs	r0, r4
    3984:	bc0c      	pop	{r2, r3}
    3986:	4690      	mov	r8, r2
    3988:	4699      	mov	r9, r3
    398a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000398c <__libc_init_array>:
    398c:	b570      	push	{r4, r5, r6, lr}
    398e:	2600      	movs	r6, #0
    3990:	4d0c      	ldr	r5, [pc, #48]	; (39c4 <__libc_init_array+0x38>)
    3992:	4c0d      	ldr	r4, [pc, #52]	; (39c8 <__libc_init_array+0x3c>)
    3994:	1b64      	subs	r4, r4, r5
    3996:	10a4      	asrs	r4, r4, #2
    3998:	42a6      	cmp	r6, r4
    399a:	d109      	bne.n	39b0 <__libc_init_array+0x24>
    399c:	2600      	movs	r6, #0
    399e:	f003 fab3 	bl	6f08 <_init>
    39a2:	4d0a      	ldr	r5, [pc, #40]	; (39cc <__libc_init_array+0x40>)
    39a4:	4c0a      	ldr	r4, [pc, #40]	; (39d0 <__libc_init_array+0x44>)
    39a6:	1b64      	subs	r4, r4, r5
    39a8:	10a4      	asrs	r4, r4, #2
    39aa:	42a6      	cmp	r6, r4
    39ac:	d105      	bne.n	39ba <__libc_init_array+0x2e>
    39ae:	bd70      	pop	{r4, r5, r6, pc}
    39b0:	00b3      	lsls	r3, r6, #2
    39b2:	58eb      	ldr	r3, [r5, r3]
    39b4:	4798      	blx	r3
    39b6:	3601      	adds	r6, #1
    39b8:	e7ee      	b.n	3998 <__libc_init_array+0xc>
    39ba:	00b3      	lsls	r3, r6, #2
    39bc:	58eb      	ldr	r3, [r5, r3]
    39be:	4798      	blx	r3
    39c0:	3601      	adds	r6, #1
    39c2:	e7f2      	b.n	39aa <__libc_init_array+0x1e>
    39c4:	00006f14 	.word	0x00006f14
    39c8:	00006f14 	.word	0x00006f14
    39cc:	00006f14 	.word	0x00006f14
    39d0:	00006f18 	.word	0x00006f18

000039d4 <malloc>:
    39d4:	b510      	push	{r4, lr}
    39d6:	4b03      	ldr	r3, [pc, #12]	; (39e4 <malloc+0x10>)
    39d8:	0001      	movs	r1, r0
    39da:	6818      	ldr	r0, [r3, #0]
    39dc:	f000 f860 	bl	3aa0 <_malloc_r>
    39e0:	bd10      	pop	{r4, pc}
    39e2:	46c0      	nop			; (mov r8, r8)
    39e4:	20000164 	.word	0x20000164

000039e8 <memcpy>:
    39e8:	2300      	movs	r3, #0
    39ea:	b510      	push	{r4, lr}
    39ec:	429a      	cmp	r2, r3
    39ee:	d100      	bne.n	39f2 <memcpy+0xa>
    39f0:	bd10      	pop	{r4, pc}
    39f2:	5ccc      	ldrb	r4, [r1, r3]
    39f4:	54c4      	strb	r4, [r0, r3]
    39f6:	3301      	adds	r3, #1
    39f8:	e7f8      	b.n	39ec <memcpy+0x4>

000039fa <memset>:
    39fa:	0003      	movs	r3, r0
    39fc:	1882      	adds	r2, r0, r2
    39fe:	4293      	cmp	r3, r2
    3a00:	d100      	bne.n	3a04 <memset+0xa>
    3a02:	4770      	bx	lr
    3a04:	7019      	strb	r1, [r3, #0]
    3a06:	3301      	adds	r3, #1
    3a08:	e7f9      	b.n	39fe <memset+0x4>
	...

00003a0c <_free_r>:
    3a0c:	b570      	push	{r4, r5, r6, lr}
    3a0e:	0005      	movs	r5, r0
    3a10:	2900      	cmp	r1, #0
    3a12:	d010      	beq.n	3a36 <_free_r+0x2a>
    3a14:	1f0c      	subs	r4, r1, #4
    3a16:	6823      	ldr	r3, [r4, #0]
    3a18:	2b00      	cmp	r3, #0
    3a1a:	da00      	bge.n	3a1e <_free_r+0x12>
    3a1c:	18e4      	adds	r4, r4, r3
    3a1e:	0028      	movs	r0, r5
    3a20:	f000 fbfe 	bl	4220 <__malloc_lock>
    3a24:	4a1d      	ldr	r2, [pc, #116]	; (3a9c <_free_r+0x90>)
    3a26:	6813      	ldr	r3, [r2, #0]
    3a28:	2b00      	cmp	r3, #0
    3a2a:	d105      	bne.n	3a38 <_free_r+0x2c>
    3a2c:	6063      	str	r3, [r4, #4]
    3a2e:	6014      	str	r4, [r2, #0]
    3a30:	0028      	movs	r0, r5
    3a32:	f000 fbf6 	bl	4222 <__malloc_unlock>
    3a36:	bd70      	pop	{r4, r5, r6, pc}
    3a38:	42a3      	cmp	r3, r4
    3a3a:	d909      	bls.n	3a50 <_free_r+0x44>
    3a3c:	6821      	ldr	r1, [r4, #0]
    3a3e:	1860      	adds	r0, r4, r1
    3a40:	4283      	cmp	r3, r0
    3a42:	d1f3      	bne.n	3a2c <_free_r+0x20>
    3a44:	6818      	ldr	r0, [r3, #0]
    3a46:	685b      	ldr	r3, [r3, #4]
    3a48:	1841      	adds	r1, r0, r1
    3a4a:	6021      	str	r1, [r4, #0]
    3a4c:	e7ee      	b.n	3a2c <_free_r+0x20>
    3a4e:	0013      	movs	r3, r2
    3a50:	685a      	ldr	r2, [r3, #4]
    3a52:	2a00      	cmp	r2, #0
    3a54:	d001      	beq.n	3a5a <_free_r+0x4e>
    3a56:	42a2      	cmp	r2, r4
    3a58:	d9f9      	bls.n	3a4e <_free_r+0x42>
    3a5a:	6819      	ldr	r1, [r3, #0]
    3a5c:	1858      	adds	r0, r3, r1
    3a5e:	42a0      	cmp	r0, r4
    3a60:	d10b      	bne.n	3a7a <_free_r+0x6e>
    3a62:	6820      	ldr	r0, [r4, #0]
    3a64:	1809      	adds	r1, r1, r0
    3a66:	1858      	adds	r0, r3, r1
    3a68:	6019      	str	r1, [r3, #0]
    3a6a:	4282      	cmp	r2, r0
    3a6c:	d1e0      	bne.n	3a30 <_free_r+0x24>
    3a6e:	6810      	ldr	r0, [r2, #0]
    3a70:	6852      	ldr	r2, [r2, #4]
    3a72:	1841      	adds	r1, r0, r1
    3a74:	6019      	str	r1, [r3, #0]
    3a76:	605a      	str	r2, [r3, #4]
    3a78:	e7da      	b.n	3a30 <_free_r+0x24>
    3a7a:	42a0      	cmp	r0, r4
    3a7c:	d902      	bls.n	3a84 <_free_r+0x78>
    3a7e:	230c      	movs	r3, #12
    3a80:	602b      	str	r3, [r5, #0]
    3a82:	e7d5      	b.n	3a30 <_free_r+0x24>
    3a84:	6821      	ldr	r1, [r4, #0]
    3a86:	1860      	adds	r0, r4, r1
    3a88:	4282      	cmp	r2, r0
    3a8a:	d103      	bne.n	3a94 <_free_r+0x88>
    3a8c:	6810      	ldr	r0, [r2, #0]
    3a8e:	6852      	ldr	r2, [r2, #4]
    3a90:	1841      	adds	r1, r0, r1
    3a92:	6021      	str	r1, [r4, #0]
    3a94:	6062      	str	r2, [r4, #4]
    3a96:	605c      	str	r4, [r3, #4]
    3a98:	e7ca      	b.n	3a30 <_free_r+0x24>
    3a9a:	46c0      	nop			; (mov r8, r8)
    3a9c:	200002ac 	.word	0x200002ac

00003aa0 <_malloc_r>:
    3aa0:	2303      	movs	r3, #3
    3aa2:	b570      	push	{r4, r5, r6, lr}
    3aa4:	1ccd      	adds	r5, r1, #3
    3aa6:	439d      	bics	r5, r3
    3aa8:	3508      	adds	r5, #8
    3aaa:	0006      	movs	r6, r0
    3aac:	2d0c      	cmp	r5, #12
    3aae:	d21e      	bcs.n	3aee <_malloc_r+0x4e>
    3ab0:	250c      	movs	r5, #12
    3ab2:	42a9      	cmp	r1, r5
    3ab4:	d81d      	bhi.n	3af2 <_malloc_r+0x52>
    3ab6:	0030      	movs	r0, r6
    3ab8:	f000 fbb2 	bl	4220 <__malloc_lock>
    3abc:	4a25      	ldr	r2, [pc, #148]	; (3b54 <_malloc_r+0xb4>)
    3abe:	6814      	ldr	r4, [r2, #0]
    3ac0:	0021      	movs	r1, r4
    3ac2:	2900      	cmp	r1, #0
    3ac4:	d119      	bne.n	3afa <_malloc_r+0x5a>
    3ac6:	4c24      	ldr	r4, [pc, #144]	; (3b58 <_malloc_r+0xb8>)
    3ac8:	6823      	ldr	r3, [r4, #0]
    3aca:	2b00      	cmp	r3, #0
    3acc:	d103      	bne.n	3ad6 <_malloc_r+0x36>
    3ace:	0030      	movs	r0, r6
    3ad0:	f000 f8dc 	bl	3c8c <_sbrk_r>
    3ad4:	6020      	str	r0, [r4, #0]
    3ad6:	0029      	movs	r1, r5
    3ad8:	0030      	movs	r0, r6
    3ada:	f000 f8d7 	bl	3c8c <_sbrk_r>
    3ade:	1c43      	adds	r3, r0, #1
    3ae0:	d12c      	bne.n	3b3c <_malloc_r+0x9c>
    3ae2:	230c      	movs	r3, #12
    3ae4:	0030      	movs	r0, r6
    3ae6:	6033      	str	r3, [r6, #0]
    3ae8:	f000 fb9b 	bl	4222 <__malloc_unlock>
    3aec:	e003      	b.n	3af6 <_malloc_r+0x56>
    3aee:	2d00      	cmp	r5, #0
    3af0:	dadf      	bge.n	3ab2 <_malloc_r+0x12>
    3af2:	230c      	movs	r3, #12
    3af4:	6033      	str	r3, [r6, #0]
    3af6:	2000      	movs	r0, #0
    3af8:	bd70      	pop	{r4, r5, r6, pc}
    3afa:	680b      	ldr	r3, [r1, #0]
    3afc:	1b5b      	subs	r3, r3, r5
    3afe:	d41a      	bmi.n	3b36 <_malloc_r+0x96>
    3b00:	2b0b      	cmp	r3, #11
    3b02:	d903      	bls.n	3b0c <_malloc_r+0x6c>
    3b04:	600b      	str	r3, [r1, #0]
    3b06:	18cc      	adds	r4, r1, r3
    3b08:	6025      	str	r5, [r4, #0]
    3b0a:	e003      	b.n	3b14 <_malloc_r+0x74>
    3b0c:	428c      	cmp	r4, r1
    3b0e:	d10e      	bne.n	3b2e <_malloc_r+0x8e>
    3b10:	6863      	ldr	r3, [r4, #4]
    3b12:	6013      	str	r3, [r2, #0]
    3b14:	0030      	movs	r0, r6
    3b16:	f000 fb84 	bl	4222 <__malloc_unlock>
    3b1a:	0020      	movs	r0, r4
    3b1c:	2207      	movs	r2, #7
    3b1e:	300b      	adds	r0, #11
    3b20:	1d23      	adds	r3, r4, #4
    3b22:	4390      	bics	r0, r2
    3b24:	1ac3      	subs	r3, r0, r3
    3b26:	d0e7      	beq.n	3af8 <_malloc_r+0x58>
    3b28:	425a      	negs	r2, r3
    3b2a:	50e2      	str	r2, [r4, r3]
    3b2c:	e7e4      	b.n	3af8 <_malloc_r+0x58>
    3b2e:	684b      	ldr	r3, [r1, #4]
    3b30:	6063      	str	r3, [r4, #4]
    3b32:	000c      	movs	r4, r1
    3b34:	e7ee      	b.n	3b14 <_malloc_r+0x74>
    3b36:	000c      	movs	r4, r1
    3b38:	6849      	ldr	r1, [r1, #4]
    3b3a:	e7c2      	b.n	3ac2 <_malloc_r+0x22>
    3b3c:	2303      	movs	r3, #3
    3b3e:	1cc4      	adds	r4, r0, #3
    3b40:	439c      	bics	r4, r3
    3b42:	42a0      	cmp	r0, r4
    3b44:	d0e0      	beq.n	3b08 <_malloc_r+0x68>
    3b46:	1a21      	subs	r1, r4, r0
    3b48:	0030      	movs	r0, r6
    3b4a:	f000 f89f 	bl	3c8c <_sbrk_r>
    3b4e:	1c43      	adds	r3, r0, #1
    3b50:	d1da      	bne.n	3b08 <_malloc_r+0x68>
    3b52:	e7c6      	b.n	3ae2 <_malloc_r+0x42>
    3b54:	200002ac 	.word	0x200002ac
    3b58:	200002b0 	.word	0x200002b0

00003b5c <iprintf>:
    3b5c:	b40f      	push	{r0, r1, r2, r3}
    3b5e:	4b0b      	ldr	r3, [pc, #44]	; (3b8c <iprintf+0x30>)
    3b60:	b513      	push	{r0, r1, r4, lr}
    3b62:	681c      	ldr	r4, [r3, #0]
    3b64:	2c00      	cmp	r4, #0
    3b66:	d005      	beq.n	3b74 <iprintf+0x18>
    3b68:	69a3      	ldr	r3, [r4, #24]
    3b6a:	2b00      	cmp	r3, #0
    3b6c:	d102      	bne.n	3b74 <iprintf+0x18>
    3b6e:	0020      	movs	r0, r4
    3b70:	f000 fa54 	bl	401c <__sinit>
    3b74:	ab05      	add	r3, sp, #20
    3b76:	9a04      	ldr	r2, [sp, #16]
    3b78:	68a1      	ldr	r1, [r4, #8]
    3b7a:	0020      	movs	r0, r4
    3b7c:	9301      	str	r3, [sp, #4]
    3b7e:	f000 fb79 	bl	4274 <_vfiprintf_r>
    3b82:	bc16      	pop	{r1, r2, r4}
    3b84:	bc08      	pop	{r3}
    3b86:	b004      	add	sp, #16
    3b88:	4718      	bx	r3
    3b8a:	46c0      	nop			; (mov r8, r8)
    3b8c:	20000164 	.word	0x20000164

00003b90 <putchar>:
    3b90:	4b08      	ldr	r3, [pc, #32]	; (3bb4 <putchar+0x24>)
    3b92:	b570      	push	{r4, r5, r6, lr}
    3b94:	681c      	ldr	r4, [r3, #0]
    3b96:	0005      	movs	r5, r0
    3b98:	2c00      	cmp	r4, #0
    3b9a:	d005      	beq.n	3ba8 <putchar+0x18>
    3b9c:	69a3      	ldr	r3, [r4, #24]
    3b9e:	2b00      	cmp	r3, #0
    3ba0:	d102      	bne.n	3ba8 <putchar+0x18>
    3ba2:	0020      	movs	r0, r4
    3ba4:	f000 fa3a 	bl	401c <__sinit>
    3ba8:	0029      	movs	r1, r5
    3baa:	68a2      	ldr	r2, [r4, #8]
    3bac:	0020      	movs	r0, r4
    3bae:	f000 fe05 	bl	47bc <_putc_r>
    3bb2:	bd70      	pop	{r4, r5, r6, pc}
    3bb4:	20000164 	.word	0x20000164

00003bb8 <srand>:
    3bb8:	4b10      	ldr	r3, [pc, #64]	; (3bfc <srand+0x44>)
    3bba:	b570      	push	{r4, r5, r6, lr}
    3bbc:	681c      	ldr	r4, [r3, #0]
    3bbe:	0005      	movs	r5, r0
    3bc0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    3bc2:	2b00      	cmp	r3, #0
    3bc4:	d115      	bne.n	3bf2 <srand+0x3a>
    3bc6:	2018      	movs	r0, #24
    3bc8:	f7ff ff04 	bl	39d4 <malloc>
    3bcc:	4b0c      	ldr	r3, [pc, #48]	; (3c00 <srand+0x48>)
    3bce:	63a0      	str	r0, [r4, #56]	; 0x38
    3bd0:	8003      	strh	r3, [r0, #0]
    3bd2:	4b0c      	ldr	r3, [pc, #48]	; (3c04 <srand+0x4c>)
    3bd4:	2201      	movs	r2, #1
    3bd6:	8043      	strh	r3, [r0, #2]
    3bd8:	4b0b      	ldr	r3, [pc, #44]	; (3c08 <srand+0x50>)
    3bda:	8083      	strh	r3, [r0, #4]
    3bdc:	4b0b      	ldr	r3, [pc, #44]	; (3c0c <srand+0x54>)
    3bde:	80c3      	strh	r3, [r0, #6]
    3be0:	4b0b      	ldr	r3, [pc, #44]	; (3c10 <srand+0x58>)
    3be2:	8103      	strh	r3, [r0, #8]
    3be4:	2305      	movs	r3, #5
    3be6:	8143      	strh	r3, [r0, #10]
    3be8:	3306      	adds	r3, #6
    3bea:	8183      	strh	r3, [r0, #12]
    3bec:	2300      	movs	r3, #0
    3bee:	6102      	str	r2, [r0, #16]
    3bf0:	6143      	str	r3, [r0, #20]
    3bf2:	2200      	movs	r2, #0
    3bf4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    3bf6:	611d      	str	r5, [r3, #16]
    3bf8:	615a      	str	r2, [r3, #20]
    3bfa:	bd70      	pop	{r4, r5, r6, pc}
    3bfc:	20000164 	.word	0x20000164
    3c00:	0000330e 	.word	0x0000330e
    3c04:	ffffabcd 	.word	0xffffabcd
    3c08:	00001234 	.word	0x00001234
    3c0c:	ffffe66d 	.word	0xffffe66d
    3c10:	ffffdeec 	.word	0xffffdeec

00003c14 <rand>:
    3c14:	4b15      	ldr	r3, [pc, #84]	; (3c6c <rand+0x58>)
    3c16:	b510      	push	{r4, lr}
    3c18:	681c      	ldr	r4, [r3, #0]
    3c1a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    3c1c:	2b00      	cmp	r3, #0
    3c1e:	d115      	bne.n	3c4c <rand+0x38>
    3c20:	2018      	movs	r0, #24
    3c22:	f7ff fed7 	bl	39d4 <malloc>
    3c26:	4b12      	ldr	r3, [pc, #72]	; (3c70 <rand+0x5c>)
    3c28:	63a0      	str	r0, [r4, #56]	; 0x38
    3c2a:	8003      	strh	r3, [r0, #0]
    3c2c:	4b11      	ldr	r3, [pc, #68]	; (3c74 <rand+0x60>)
    3c2e:	2201      	movs	r2, #1
    3c30:	8043      	strh	r3, [r0, #2]
    3c32:	4b11      	ldr	r3, [pc, #68]	; (3c78 <rand+0x64>)
    3c34:	8083      	strh	r3, [r0, #4]
    3c36:	4b11      	ldr	r3, [pc, #68]	; (3c7c <rand+0x68>)
    3c38:	80c3      	strh	r3, [r0, #6]
    3c3a:	4b11      	ldr	r3, [pc, #68]	; (3c80 <rand+0x6c>)
    3c3c:	8103      	strh	r3, [r0, #8]
    3c3e:	2305      	movs	r3, #5
    3c40:	8143      	strh	r3, [r0, #10]
    3c42:	3306      	adds	r3, #6
    3c44:	8183      	strh	r3, [r0, #12]
    3c46:	2300      	movs	r3, #0
    3c48:	6102      	str	r2, [r0, #16]
    3c4a:	6143      	str	r3, [r0, #20]
    3c4c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
    3c4e:	4a0d      	ldr	r2, [pc, #52]	; (3c84 <rand+0x70>)
    3c50:	6920      	ldr	r0, [r4, #16]
    3c52:	6961      	ldr	r1, [r4, #20]
    3c54:	4b0c      	ldr	r3, [pc, #48]	; (3c88 <rand+0x74>)
    3c56:	f7ff fe6f 	bl	3938 <__aeabi_lmul>
    3c5a:	2201      	movs	r2, #1
    3c5c:	2300      	movs	r3, #0
    3c5e:	1880      	adds	r0, r0, r2
    3c60:	4159      	adcs	r1, r3
    3c62:	6120      	str	r0, [r4, #16]
    3c64:	6161      	str	r1, [r4, #20]
    3c66:	0048      	lsls	r0, r1, #1
    3c68:	0840      	lsrs	r0, r0, #1
    3c6a:	bd10      	pop	{r4, pc}
    3c6c:	20000164 	.word	0x20000164
    3c70:	0000330e 	.word	0x0000330e
    3c74:	ffffabcd 	.word	0xffffabcd
    3c78:	00001234 	.word	0x00001234
    3c7c:	ffffe66d 	.word	0xffffe66d
    3c80:	ffffdeec 	.word	0xffffdeec
    3c84:	4c957f2d 	.word	0x4c957f2d
    3c88:	5851f42d 	.word	0x5851f42d

00003c8c <_sbrk_r>:
    3c8c:	2300      	movs	r3, #0
    3c8e:	b570      	push	{r4, r5, r6, lr}
    3c90:	4c06      	ldr	r4, [pc, #24]	; (3cac <_sbrk_r+0x20>)
    3c92:	0005      	movs	r5, r0
    3c94:	0008      	movs	r0, r1
    3c96:	6023      	str	r3, [r4, #0]
    3c98:	f7fe fa68 	bl	216c <_sbrk>
    3c9c:	1c43      	adds	r3, r0, #1
    3c9e:	d103      	bne.n	3ca8 <_sbrk_r+0x1c>
    3ca0:	6823      	ldr	r3, [r4, #0]
    3ca2:	2b00      	cmp	r3, #0
    3ca4:	d000      	beq.n	3ca8 <_sbrk_r+0x1c>
    3ca6:	602b      	str	r3, [r5, #0]
    3ca8:	bd70      	pop	{r4, r5, r6, pc}
    3caa:	46c0      	nop			; (mov r8, r8)
    3cac:	20000acc 	.word	0x20000acc

00003cb0 <setbuf>:
    3cb0:	424a      	negs	r2, r1
    3cb2:	414a      	adcs	r2, r1
    3cb4:	2380      	movs	r3, #128	; 0x80
    3cb6:	b510      	push	{r4, lr}
    3cb8:	0052      	lsls	r2, r2, #1
    3cba:	00db      	lsls	r3, r3, #3
    3cbc:	f000 f802 	bl	3cc4 <setvbuf>
    3cc0:	bd10      	pop	{r4, pc}
	...

00003cc4 <setvbuf>:
    3cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
    3cc6:	001d      	movs	r5, r3
    3cc8:	4b4f      	ldr	r3, [pc, #316]	; (3e08 <setvbuf+0x144>)
    3cca:	b085      	sub	sp, #20
    3ccc:	681e      	ldr	r6, [r3, #0]
    3cce:	0004      	movs	r4, r0
    3cd0:	000f      	movs	r7, r1
    3cd2:	9200      	str	r2, [sp, #0]
    3cd4:	2e00      	cmp	r6, #0
    3cd6:	d005      	beq.n	3ce4 <setvbuf+0x20>
    3cd8:	69b3      	ldr	r3, [r6, #24]
    3cda:	2b00      	cmp	r3, #0
    3cdc:	d102      	bne.n	3ce4 <setvbuf+0x20>
    3cde:	0030      	movs	r0, r6
    3ce0:	f000 f99c 	bl	401c <__sinit>
    3ce4:	4b49      	ldr	r3, [pc, #292]	; (3e0c <setvbuf+0x148>)
    3ce6:	429c      	cmp	r4, r3
    3ce8:	d150      	bne.n	3d8c <setvbuf+0xc8>
    3cea:	6874      	ldr	r4, [r6, #4]
    3cec:	9b00      	ldr	r3, [sp, #0]
    3cee:	2b02      	cmp	r3, #2
    3cf0:	d005      	beq.n	3cfe <setvbuf+0x3a>
    3cf2:	2b01      	cmp	r3, #1
    3cf4:	d900      	bls.n	3cf8 <setvbuf+0x34>
    3cf6:	e084      	b.n	3e02 <setvbuf+0x13e>
    3cf8:	2d00      	cmp	r5, #0
    3cfa:	da00      	bge.n	3cfe <setvbuf+0x3a>
    3cfc:	e081      	b.n	3e02 <setvbuf+0x13e>
    3cfe:	0021      	movs	r1, r4
    3d00:	0030      	movs	r0, r6
    3d02:	f000 f91d 	bl	3f40 <_fflush_r>
    3d06:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3d08:	2900      	cmp	r1, #0
    3d0a:	d008      	beq.n	3d1e <setvbuf+0x5a>
    3d0c:	0023      	movs	r3, r4
    3d0e:	3344      	adds	r3, #68	; 0x44
    3d10:	4299      	cmp	r1, r3
    3d12:	d002      	beq.n	3d1a <setvbuf+0x56>
    3d14:	0030      	movs	r0, r6
    3d16:	f7ff fe79 	bl	3a0c <_free_r>
    3d1a:	2300      	movs	r3, #0
    3d1c:	6363      	str	r3, [r4, #52]	; 0x34
    3d1e:	2300      	movs	r3, #0
    3d20:	61a3      	str	r3, [r4, #24]
    3d22:	6063      	str	r3, [r4, #4]
    3d24:	89a3      	ldrh	r3, [r4, #12]
    3d26:	061b      	lsls	r3, r3, #24
    3d28:	d503      	bpl.n	3d32 <setvbuf+0x6e>
    3d2a:	6921      	ldr	r1, [r4, #16]
    3d2c:	0030      	movs	r0, r6
    3d2e:	f7ff fe6d 	bl	3a0c <_free_r>
    3d32:	89a3      	ldrh	r3, [r4, #12]
    3d34:	4a36      	ldr	r2, [pc, #216]	; (3e10 <setvbuf+0x14c>)
    3d36:	4013      	ands	r3, r2
    3d38:	81a3      	strh	r3, [r4, #12]
    3d3a:	9b00      	ldr	r3, [sp, #0]
    3d3c:	2b02      	cmp	r3, #2
    3d3e:	d05a      	beq.n	3df6 <setvbuf+0x132>
    3d40:	ab03      	add	r3, sp, #12
    3d42:	aa02      	add	r2, sp, #8
    3d44:	0021      	movs	r1, r4
    3d46:	0030      	movs	r0, r6
    3d48:	f000 f9fe 	bl	4148 <__swhatbuf_r>
    3d4c:	89a3      	ldrh	r3, [r4, #12]
    3d4e:	4318      	orrs	r0, r3
    3d50:	81a0      	strh	r0, [r4, #12]
    3d52:	2d00      	cmp	r5, #0
    3d54:	d124      	bne.n	3da0 <setvbuf+0xdc>
    3d56:	9d02      	ldr	r5, [sp, #8]
    3d58:	0028      	movs	r0, r5
    3d5a:	f7ff fe3b 	bl	39d4 <malloc>
    3d5e:	9501      	str	r5, [sp, #4]
    3d60:	1e07      	subs	r7, r0, #0
    3d62:	d142      	bne.n	3dea <setvbuf+0x126>
    3d64:	9b02      	ldr	r3, [sp, #8]
    3d66:	9301      	str	r3, [sp, #4]
    3d68:	42ab      	cmp	r3, r5
    3d6a:	d139      	bne.n	3de0 <setvbuf+0x11c>
    3d6c:	2001      	movs	r0, #1
    3d6e:	4240      	negs	r0, r0
    3d70:	2302      	movs	r3, #2
    3d72:	89a2      	ldrh	r2, [r4, #12]
    3d74:	4313      	orrs	r3, r2
    3d76:	81a3      	strh	r3, [r4, #12]
    3d78:	2300      	movs	r3, #0
    3d7a:	60a3      	str	r3, [r4, #8]
    3d7c:	0023      	movs	r3, r4
    3d7e:	3347      	adds	r3, #71	; 0x47
    3d80:	6023      	str	r3, [r4, #0]
    3d82:	6123      	str	r3, [r4, #16]
    3d84:	2301      	movs	r3, #1
    3d86:	6163      	str	r3, [r4, #20]
    3d88:	b005      	add	sp, #20
    3d8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3d8c:	4b21      	ldr	r3, [pc, #132]	; (3e14 <setvbuf+0x150>)
    3d8e:	429c      	cmp	r4, r3
    3d90:	d101      	bne.n	3d96 <setvbuf+0xd2>
    3d92:	68b4      	ldr	r4, [r6, #8]
    3d94:	e7aa      	b.n	3cec <setvbuf+0x28>
    3d96:	4b20      	ldr	r3, [pc, #128]	; (3e18 <setvbuf+0x154>)
    3d98:	429c      	cmp	r4, r3
    3d9a:	d1a7      	bne.n	3cec <setvbuf+0x28>
    3d9c:	68f4      	ldr	r4, [r6, #12]
    3d9e:	e7a5      	b.n	3cec <setvbuf+0x28>
    3da0:	2f00      	cmp	r7, #0
    3da2:	d0d9      	beq.n	3d58 <setvbuf+0x94>
    3da4:	69b3      	ldr	r3, [r6, #24]
    3da6:	2b00      	cmp	r3, #0
    3da8:	d102      	bne.n	3db0 <setvbuf+0xec>
    3daa:	0030      	movs	r0, r6
    3dac:	f000 f936 	bl	401c <__sinit>
    3db0:	9b00      	ldr	r3, [sp, #0]
    3db2:	2b01      	cmp	r3, #1
    3db4:	d103      	bne.n	3dbe <setvbuf+0xfa>
    3db6:	89a3      	ldrh	r3, [r4, #12]
    3db8:	9a00      	ldr	r2, [sp, #0]
    3dba:	431a      	orrs	r2, r3
    3dbc:	81a2      	strh	r2, [r4, #12]
    3dbe:	2008      	movs	r0, #8
    3dc0:	89a3      	ldrh	r3, [r4, #12]
    3dc2:	6027      	str	r7, [r4, #0]
    3dc4:	6127      	str	r7, [r4, #16]
    3dc6:	6165      	str	r5, [r4, #20]
    3dc8:	4018      	ands	r0, r3
    3dca:	d018      	beq.n	3dfe <setvbuf+0x13a>
    3dcc:	2001      	movs	r0, #1
    3dce:	4018      	ands	r0, r3
    3dd0:	2300      	movs	r3, #0
    3dd2:	4298      	cmp	r0, r3
    3dd4:	d011      	beq.n	3dfa <setvbuf+0x136>
    3dd6:	426d      	negs	r5, r5
    3dd8:	60a3      	str	r3, [r4, #8]
    3dda:	61a5      	str	r5, [r4, #24]
    3ddc:	0018      	movs	r0, r3
    3dde:	e7d3      	b.n	3d88 <setvbuf+0xc4>
    3de0:	9801      	ldr	r0, [sp, #4]
    3de2:	f7ff fdf7 	bl	39d4 <malloc>
    3de6:	1e07      	subs	r7, r0, #0
    3de8:	d0c0      	beq.n	3d6c <setvbuf+0xa8>
    3dea:	2380      	movs	r3, #128	; 0x80
    3dec:	89a2      	ldrh	r2, [r4, #12]
    3dee:	9d01      	ldr	r5, [sp, #4]
    3df0:	4313      	orrs	r3, r2
    3df2:	81a3      	strh	r3, [r4, #12]
    3df4:	e7d6      	b.n	3da4 <setvbuf+0xe0>
    3df6:	2000      	movs	r0, #0
    3df8:	e7ba      	b.n	3d70 <setvbuf+0xac>
    3dfa:	60a5      	str	r5, [r4, #8]
    3dfc:	e7c4      	b.n	3d88 <setvbuf+0xc4>
    3dfe:	60a0      	str	r0, [r4, #8]
    3e00:	e7c2      	b.n	3d88 <setvbuf+0xc4>
    3e02:	2001      	movs	r0, #1
    3e04:	4240      	negs	r0, r0
    3e06:	e7bf      	b.n	3d88 <setvbuf+0xc4>
    3e08:	20000164 	.word	0x20000164
    3e0c:	00006e94 	.word	0x00006e94
    3e10:	fffff35c 	.word	0xfffff35c
    3e14:	00006eb4 	.word	0x00006eb4
    3e18:	00006e74 	.word	0x00006e74

00003e1c <strlen>:
    3e1c:	2300      	movs	r3, #0
    3e1e:	5cc2      	ldrb	r2, [r0, r3]
    3e20:	3301      	adds	r3, #1
    3e22:	2a00      	cmp	r2, #0
    3e24:	d1fb      	bne.n	3e1e <strlen+0x2>
    3e26:	1e58      	subs	r0, r3, #1
    3e28:	4770      	bx	lr
	...

00003e2c <__sflush_r>:
    3e2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3e2e:	898a      	ldrh	r2, [r1, #12]
    3e30:	0005      	movs	r5, r0
    3e32:	000c      	movs	r4, r1
    3e34:	0713      	lsls	r3, r2, #28
    3e36:	d460      	bmi.n	3efa <__sflush_r+0xce>
    3e38:	684b      	ldr	r3, [r1, #4]
    3e3a:	2b00      	cmp	r3, #0
    3e3c:	dc04      	bgt.n	3e48 <__sflush_r+0x1c>
    3e3e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    3e40:	2b00      	cmp	r3, #0
    3e42:	dc01      	bgt.n	3e48 <__sflush_r+0x1c>
    3e44:	2000      	movs	r0, #0
    3e46:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3e48:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    3e4a:	2f00      	cmp	r7, #0
    3e4c:	d0fa      	beq.n	3e44 <__sflush_r+0x18>
    3e4e:	2300      	movs	r3, #0
    3e50:	682e      	ldr	r6, [r5, #0]
    3e52:	602b      	str	r3, [r5, #0]
    3e54:	2380      	movs	r3, #128	; 0x80
    3e56:	015b      	lsls	r3, r3, #5
    3e58:	401a      	ands	r2, r3
    3e5a:	d034      	beq.n	3ec6 <__sflush_r+0x9a>
    3e5c:	6d60      	ldr	r0, [r4, #84]	; 0x54
    3e5e:	89a3      	ldrh	r3, [r4, #12]
    3e60:	075b      	lsls	r3, r3, #29
    3e62:	d506      	bpl.n	3e72 <__sflush_r+0x46>
    3e64:	6863      	ldr	r3, [r4, #4]
    3e66:	1ac0      	subs	r0, r0, r3
    3e68:	6b63      	ldr	r3, [r4, #52]	; 0x34
    3e6a:	2b00      	cmp	r3, #0
    3e6c:	d001      	beq.n	3e72 <__sflush_r+0x46>
    3e6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    3e70:	1ac0      	subs	r0, r0, r3
    3e72:	0002      	movs	r2, r0
    3e74:	6a21      	ldr	r1, [r4, #32]
    3e76:	2300      	movs	r3, #0
    3e78:	0028      	movs	r0, r5
    3e7a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    3e7c:	47b8      	blx	r7
    3e7e:	89a1      	ldrh	r1, [r4, #12]
    3e80:	1c43      	adds	r3, r0, #1
    3e82:	d106      	bne.n	3e92 <__sflush_r+0x66>
    3e84:	682b      	ldr	r3, [r5, #0]
    3e86:	2b1d      	cmp	r3, #29
    3e88:	d831      	bhi.n	3eee <__sflush_r+0xc2>
    3e8a:	4a2c      	ldr	r2, [pc, #176]	; (3f3c <__sflush_r+0x110>)
    3e8c:	40da      	lsrs	r2, r3
    3e8e:	07d3      	lsls	r3, r2, #31
    3e90:	d52d      	bpl.n	3eee <__sflush_r+0xc2>
    3e92:	2300      	movs	r3, #0
    3e94:	6063      	str	r3, [r4, #4]
    3e96:	6923      	ldr	r3, [r4, #16]
    3e98:	6023      	str	r3, [r4, #0]
    3e9a:	04cb      	lsls	r3, r1, #19
    3e9c:	d505      	bpl.n	3eaa <__sflush_r+0x7e>
    3e9e:	1c43      	adds	r3, r0, #1
    3ea0:	d102      	bne.n	3ea8 <__sflush_r+0x7c>
    3ea2:	682b      	ldr	r3, [r5, #0]
    3ea4:	2b00      	cmp	r3, #0
    3ea6:	d100      	bne.n	3eaa <__sflush_r+0x7e>
    3ea8:	6560      	str	r0, [r4, #84]	; 0x54
    3eaa:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3eac:	602e      	str	r6, [r5, #0]
    3eae:	2900      	cmp	r1, #0
    3eb0:	d0c8      	beq.n	3e44 <__sflush_r+0x18>
    3eb2:	0023      	movs	r3, r4
    3eb4:	3344      	adds	r3, #68	; 0x44
    3eb6:	4299      	cmp	r1, r3
    3eb8:	d002      	beq.n	3ec0 <__sflush_r+0x94>
    3eba:	0028      	movs	r0, r5
    3ebc:	f7ff fda6 	bl	3a0c <_free_r>
    3ec0:	2000      	movs	r0, #0
    3ec2:	6360      	str	r0, [r4, #52]	; 0x34
    3ec4:	e7bf      	b.n	3e46 <__sflush_r+0x1a>
    3ec6:	2301      	movs	r3, #1
    3ec8:	6a21      	ldr	r1, [r4, #32]
    3eca:	0028      	movs	r0, r5
    3ecc:	47b8      	blx	r7
    3ece:	1c43      	adds	r3, r0, #1
    3ed0:	d1c5      	bne.n	3e5e <__sflush_r+0x32>
    3ed2:	682b      	ldr	r3, [r5, #0]
    3ed4:	2b00      	cmp	r3, #0
    3ed6:	d0c2      	beq.n	3e5e <__sflush_r+0x32>
    3ed8:	2b1d      	cmp	r3, #29
    3eda:	d001      	beq.n	3ee0 <__sflush_r+0xb4>
    3edc:	2b16      	cmp	r3, #22
    3ede:	d101      	bne.n	3ee4 <__sflush_r+0xb8>
    3ee0:	602e      	str	r6, [r5, #0]
    3ee2:	e7af      	b.n	3e44 <__sflush_r+0x18>
    3ee4:	2340      	movs	r3, #64	; 0x40
    3ee6:	89a2      	ldrh	r2, [r4, #12]
    3ee8:	4313      	orrs	r3, r2
    3eea:	81a3      	strh	r3, [r4, #12]
    3eec:	e7ab      	b.n	3e46 <__sflush_r+0x1a>
    3eee:	2340      	movs	r3, #64	; 0x40
    3ef0:	430b      	orrs	r3, r1
    3ef2:	2001      	movs	r0, #1
    3ef4:	81a3      	strh	r3, [r4, #12]
    3ef6:	4240      	negs	r0, r0
    3ef8:	e7a5      	b.n	3e46 <__sflush_r+0x1a>
    3efa:	690f      	ldr	r7, [r1, #16]
    3efc:	2f00      	cmp	r7, #0
    3efe:	d0a1      	beq.n	3e44 <__sflush_r+0x18>
    3f00:	680b      	ldr	r3, [r1, #0]
    3f02:	600f      	str	r7, [r1, #0]
    3f04:	1bdb      	subs	r3, r3, r7
    3f06:	9301      	str	r3, [sp, #4]
    3f08:	2300      	movs	r3, #0
    3f0a:	0792      	lsls	r2, r2, #30
    3f0c:	d100      	bne.n	3f10 <__sflush_r+0xe4>
    3f0e:	694b      	ldr	r3, [r1, #20]
    3f10:	60a3      	str	r3, [r4, #8]
    3f12:	9b01      	ldr	r3, [sp, #4]
    3f14:	2b00      	cmp	r3, #0
    3f16:	dc00      	bgt.n	3f1a <__sflush_r+0xee>
    3f18:	e794      	b.n	3e44 <__sflush_r+0x18>
    3f1a:	9b01      	ldr	r3, [sp, #4]
    3f1c:	003a      	movs	r2, r7
    3f1e:	6a21      	ldr	r1, [r4, #32]
    3f20:	0028      	movs	r0, r5
    3f22:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    3f24:	47b0      	blx	r6
    3f26:	2800      	cmp	r0, #0
    3f28:	dc03      	bgt.n	3f32 <__sflush_r+0x106>
    3f2a:	2340      	movs	r3, #64	; 0x40
    3f2c:	89a2      	ldrh	r2, [r4, #12]
    3f2e:	4313      	orrs	r3, r2
    3f30:	e7df      	b.n	3ef2 <__sflush_r+0xc6>
    3f32:	9b01      	ldr	r3, [sp, #4]
    3f34:	183f      	adds	r7, r7, r0
    3f36:	1a1b      	subs	r3, r3, r0
    3f38:	9301      	str	r3, [sp, #4]
    3f3a:	e7ea      	b.n	3f12 <__sflush_r+0xe6>
    3f3c:	20400001 	.word	0x20400001

00003f40 <_fflush_r>:
    3f40:	690b      	ldr	r3, [r1, #16]
    3f42:	b570      	push	{r4, r5, r6, lr}
    3f44:	0005      	movs	r5, r0
    3f46:	000c      	movs	r4, r1
    3f48:	2b00      	cmp	r3, #0
    3f4a:	d101      	bne.n	3f50 <_fflush_r+0x10>
    3f4c:	2000      	movs	r0, #0
    3f4e:	bd70      	pop	{r4, r5, r6, pc}
    3f50:	2800      	cmp	r0, #0
    3f52:	d004      	beq.n	3f5e <_fflush_r+0x1e>
    3f54:	6983      	ldr	r3, [r0, #24]
    3f56:	2b00      	cmp	r3, #0
    3f58:	d101      	bne.n	3f5e <_fflush_r+0x1e>
    3f5a:	f000 f85f 	bl	401c <__sinit>
    3f5e:	4b0b      	ldr	r3, [pc, #44]	; (3f8c <_fflush_r+0x4c>)
    3f60:	429c      	cmp	r4, r3
    3f62:	d109      	bne.n	3f78 <_fflush_r+0x38>
    3f64:	686c      	ldr	r4, [r5, #4]
    3f66:	220c      	movs	r2, #12
    3f68:	5ea3      	ldrsh	r3, [r4, r2]
    3f6a:	2b00      	cmp	r3, #0
    3f6c:	d0ee      	beq.n	3f4c <_fflush_r+0xc>
    3f6e:	0021      	movs	r1, r4
    3f70:	0028      	movs	r0, r5
    3f72:	f7ff ff5b 	bl	3e2c <__sflush_r>
    3f76:	e7ea      	b.n	3f4e <_fflush_r+0xe>
    3f78:	4b05      	ldr	r3, [pc, #20]	; (3f90 <_fflush_r+0x50>)
    3f7a:	429c      	cmp	r4, r3
    3f7c:	d101      	bne.n	3f82 <_fflush_r+0x42>
    3f7e:	68ac      	ldr	r4, [r5, #8]
    3f80:	e7f1      	b.n	3f66 <_fflush_r+0x26>
    3f82:	4b04      	ldr	r3, [pc, #16]	; (3f94 <_fflush_r+0x54>)
    3f84:	429c      	cmp	r4, r3
    3f86:	d1ee      	bne.n	3f66 <_fflush_r+0x26>
    3f88:	68ec      	ldr	r4, [r5, #12]
    3f8a:	e7ec      	b.n	3f66 <_fflush_r+0x26>
    3f8c:	00006e94 	.word	0x00006e94
    3f90:	00006eb4 	.word	0x00006eb4
    3f94:	00006e74 	.word	0x00006e74

00003f98 <_cleanup_r>:
    3f98:	b510      	push	{r4, lr}
    3f9a:	4902      	ldr	r1, [pc, #8]	; (3fa4 <_cleanup_r+0xc>)
    3f9c:	f000 f8b2 	bl	4104 <_fwalk_reent>
    3fa0:	bd10      	pop	{r4, pc}
    3fa2:	46c0      	nop			; (mov r8, r8)
    3fa4:	00003f41 	.word	0x00003f41

00003fa8 <std.isra.0>:
    3fa8:	2300      	movs	r3, #0
    3faa:	b510      	push	{r4, lr}
    3fac:	0004      	movs	r4, r0
    3fae:	6003      	str	r3, [r0, #0]
    3fb0:	6043      	str	r3, [r0, #4]
    3fb2:	6083      	str	r3, [r0, #8]
    3fb4:	8181      	strh	r1, [r0, #12]
    3fb6:	6643      	str	r3, [r0, #100]	; 0x64
    3fb8:	81c2      	strh	r2, [r0, #14]
    3fba:	6103      	str	r3, [r0, #16]
    3fbc:	6143      	str	r3, [r0, #20]
    3fbe:	6183      	str	r3, [r0, #24]
    3fc0:	0019      	movs	r1, r3
    3fc2:	2208      	movs	r2, #8
    3fc4:	305c      	adds	r0, #92	; 0x5c
    3fc6:	f7ff fd18 	bl	39fa <memset>
    3fca:	4b05      	ldr	r3, [pc, #20]	; (3fe0 <std.isra.0+0x38>)
    3fcc:	6224      	str	r4, [r4, #32]
    3fce:	6263      	str	r3, [r4, #36]	; 0x24
    3fd0:	4b04      	ldr	r3, [pc, #16]	; (3fe4 <std.isra.0+0x3c>)
    3fd2:	62a3      	str	r3, [r4, #40]	; 0x28
    3fd4:	4b04      	ldr	r3, [pc, #16]	; (3fe8 <std.isra.0+0x40>)
    3fd6:	62e3      	str	r3, [r4, #44]	; 0x2c
    3fd8:	4b04      	ldr	r3, [pc, #16]	; (3fec <std.isra.0+0x44>)
    3fda:	6323      	str	r3, [r4, #48]	; 0x30
    3fdc:	bd10      	pop	{r4, pc}
    3fde:	46c0      	nop			; (mov r8, r8)
    3fe0:	00004829 	.word	0x00004829
    3fe4:	00004851 	.word	0x00004851
    3fe8:	00004889 	.word	0x00004889
    3fec:	000048b5 	.word	0x000048b5

00003ff0 <__sfmoreglue>:
    3ff0:	b570      	push	{r4, r5, r6, lr}
    3ff2:	2568      	movs	r5, #104	; 0x68
    3ff4:	1e4a      	subs	r2, r1, #1
    3ff6:	4355      	muls	r5, r2
    3ff8:	000e      	movs	r6, r1
    3ffa:	0029      	movs	r1, r5
    3ffc:	3174      	adds	r1, #116	; 0x74
    3ffe:	f7ff fd4f 	bl	3aa0 <_malloc_r>
    4002:	1e04      	subs	r4, r0, #0
    4004:	d008      	beq.n	4018 <__sfmoreglue+0x28>
    4006:	2100      	movs	r1, #0
    4008:	002a      	movs	r2, r5
    400a:	6001      	str	r1, [r0, #0]
    400c:	6046      	str	r6, [r0, #4]
    400e:	300c      	adds	r0, #12
    4010:	60a0      	str	r0, [r4, #8]
    4012:	3268      	adds	r2, #104	; 0x68
    4014:	f7ff fcf1 	bl	39fa <memset>
    4018:	0020      	movs	r0, r4
    401a:	bd70      	pop	{r4, r5, r6, pc}

0000401c <__sinit>:
    401c:	6983      	ldr	r3, [r0, #24]
    401e:	b513      	push	{r0, r1, r4, lr}
    4020:	0004      	movs	r4, r0
    4022:	2b00      	cmp	r3, #0
    4024:	d128      	bne.n	4078 <__sinit+0x5c>
    4026:	6483      	str	r3, [r0, #72]	; 0x48
    4028:	64c3      	str	r3, [r0, #76]	; 0x4c
    402a:	6503      	str	r3, [r0, #80]	; 0x50
    402c:	4b13      	ldr	r3, [pc, #76]	; (407c <__sinit+0x60>)
    402e:	4a14      	ldr	r2, [pc, #80]	; (4080 <__sinit+0x64>)
    4030:	681b      	ldr	r3, [r3, #0]
    4032:	6282      	str	r2, [r0, #40]	; 0x28
    4034:	9301      	str	r3, [sp, #4]
    4036:	4298      	cmp	r0, r3
    4038:	d101      	bne.n	403e <__sinit+0x22>
    403a:	2301      	movs	r3, #1
    403c:	6183      	str	r3, [r0, #24]
    403e:	0020      	movs	r0, r4
    4040:	f000 f820 	bl	4084 <__sfp>
    4044:	6060      	str	r0, [r4, #4]
    4046:	0020      	movs	r0, r4
    4048:	f000 f81c 	bl	4084 <__sfp>
    404c:	60a0      	str	r0, [r4, #8]
    404e:	0020      	movs	r0, r4
    4050:	f000 f818 	bl	4084 <__sfp>
    4054:	2200      	movs	r2, #0
    4056:	60e0      	str	r0, [r4, #12]
    4058:	2104      	movs	r1, #4
    405a:	6860      	ldr	r0, [r4, #4]
    405c:	f7ff ffa4 	bl	3fa8 <std.isra.0>
    4060:	2201      	movs	r2, #1
    4062:	2109      	movs	r1, #9
    4064:	68a0      	ldr	r0, [r4, #8]
    4066:	f7ff ff9f 	bl	3fa8 <std.isra.0>
    406a:	2202      	movs	r2, #2
    406c:	2112      	movs	r1, #18
    406e:	68e0      	ldr	r0, [r4, #12]
    4070:	f7ff ff9a 	bl	3fa8 <std.isra.0>
    4074:	2301      	movs	r3, #1
    4076:	61a3      	str	r3, [r4, #24]
    4078:	bd13      	pop	{r0, r1, r4, pc}
    407a:	46c0      	nop			; (mov r8, r8)
    407c:	00006e70 	.word	0x00006e70
    4080:	00003f99 	.word	0x00003f99

00004084 <__sfp>:
    4084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4086:	4b1e      	ldr	r3, [pc, #120]	; (4100 <__sfp+0x7c>)
    4088:	0007      	movs	r7, r0
    408a:	681e      	ldr	r6, [r3, #0]
    408c:	69b3      	ldr	r3, [r6, #24]
    408e:	2b00      	cmp	r3, #0
    4090:	d102      	bne.n	4098 <__sfp+0x14>
    4092:	0030      	movs	r0, r6
    4094:	f7ff ffc2 	bl	401c <__sinit>
    4098:	3648      	adds	r6, #72	; 0x48
    409a:	68b4      	ldr	r4, [r6, #8]
    409c:	6873      	ldr	r3, [r6, #4]
    409e:	3b01      	subs	r3, #1
    40a0:	d504      	bpl.n	40ac <__sfp+0x28>
    40a2:	6833      	ldr	r3, [r6, #0]
    40a4:	2b00      	cmp	r3, #0
    40a6:	d007      	beq.n	40b8 <__sfp+0x34>
    40a8:	6836      	ldr	r6, [r6, #0]
    40aa:	e7f6      	b.n	409a <__sfp+0x16>
    40ac:	220c      	movs	r2, #12
    40ae:	5ea5      	ldrsh	r5, [r4, r2]
    40b0:	2d00      	cmp	r5, #0
    40b2:	d00d      	beq.n	40d0 <__sfp+0x4c>
    40b4:	3468      	adds	r4, #104	; 0x68
    40b6:	e7f2      	b.n	409e <__sfp+0x1a>
    40b8:	2104      	movs	r1, #4
    40ba:	0038      	movs	r0, r7
    40bc:	f7ff ff98 	bl	3ff0 <__sfmoreglue>
    40c0:	6030      	str	r0, [r6, #0]
    40c2:	2800      	cmp	r0, #0
    40c4:	d1f0      	bne.n	40a8 <__sfp+0x24>
    40c6:	230c      	movs	r3, #12
    40c8:	0004      	movs	r4, r0
    40ca:	603b      	str	r3, [r7, #0]
    40cc:	0020      	movs	r0, r4
    40ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    40d0:	2301      	movs	r3, #1
    40d2:	0020      	movs	r0, r4
    40d4:	425b      	negs	r3, r3
    40d6:	81e3      	strh	r3, [r4, #14]
    40d8:	3302      	adds	r3, #2
    40da:	81a3      	strh	r3, [r4, #12]
    40dc:	6665      	str	r5, [r4, #100]	; 0x64
    40de:	6025      	str	r5, [r4, #0]
    40e0:	60a5      	str	r5, [r4, #8]
    40e2:	6065      	str	r5, [r4, #4]
    40e4:	6125      	str	r5, [r4, #16]
    40e6:	6165      	str	r5, [r4, #20]
    40e8:	61a5      	str	r5, [r4, #24]
    40ea:	2208      	movs	r2, #8
    40ec:	0029      	movs	r1, r5
    40ee:	305c      	adds	r0, #92	; 0x5c
    40f0:	f7ff fc83 	bl	39fa <memset>
    40f4:	6365      	str	r5, [r4, #52]	; 0x34
    40f6:	63a5      	str	r5, [r4, #56]	; 0x38
    40f8:	64a5      	str	r5, [r4, #72]	; 0x48
    40fa:	64e5      	str	r5, [r4, #76]	; 0x4c
    40fc:	e7e6      	b.n	40cc <__sfp+0x48>
    40fe:	46c0      	nop			; (mov r8, r8)
    4100:	00006e70 	.word	0x00006e70

00004104 <_fwalk_reent>:
    4104:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4106:	0004      	movs	r4, r0
    4108:	0007      	movs	r7, r0
    410a:	2600      	movs	r6, #0
    410c:	9101      	str	r1, [sp, #4]
    410e:	3448      	adds	r4, #72	; 0x48
    4110:	2c00      	cmp	r4, #0
    4112:	d101      	bne.n	4118 <_fwalk_reent+0x14>
    4114:	0030      	movs	r0, r6
    4116:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4118:	6863      	ldr	r3, [r4, #4]
    411a:	68a5      	ldr	r5, [r4, #8]
    411c:	9300      	str	r3, [sp, #0]
    411e:	9b00      	ldr	r3, [sp, #0]
    4120:	3b01      	subs	r3, #1
    4122:	9300      	str	r3, [sp, #0]
    4124:	d501      	bpl.n	412a <_fwalk_reent+0x26>
    4126:	6824      	ldr	r4, [r4, #0]
    4128:	e7f2      	b.n	4110 <_fwalk_reent+0xc>
    412a:	89ab      	ldrh	r3, [r5, #12]
    412c:	2b01      	cmp	r3, #1
    412e:	d908      	bls.n	4142 <_fwalk_reent+0x3e>
    4130:	220e      	movs	r2, #14
    4132:	5eab      	ldrsh	r3, [r5, r2]
    4134:	3301      	adds	r3, #1
    4136:	d004      	beq.n	4142 <_fwalk_reent+0x3e>
    4138:	0029      	movs	r1, r5
    413a:	0038      	movs	r0, r7
    413c:	9b01      	ldr	r3, [sp, #4]
    413e:	4798      	blx	r3
    4140:	4306      	orrs	r6, r0
    4142:	3568      	adds	r5, #104	; 0x68
    4144:	e7eb      	b.n	411e <_fwalk_reent+0x1a>
	...

00004148 <__swhatbuf_r>:
    4148:	b570      	push	{r4, r5, r6, lr}
    414a:	000e      	movs	r6, r1
    414c:	001d      	movs	r5, r3
    414e:	230e      	movs	r3, #14
    4150:	5ec9      	ldrsh	r1, [r1, r3]
    4152:	b090      	sub	sp, #64	; 0x40
    4154:	0014      	movs	r4, r2
    4156:	2900      	cmp	r1, #0
    4158:	da07      	bge.n	416a <__swhatbuf_r+0x22>
    415a:	2300      	movs	r3, #0
    415c:	602b      	str	r3, [r5, #0]
    415e:	89b3      	ldrh	r3, [r6, #12]
    4160:	061b      	lsls	r3, r3, #24
    4162:	d411      	bmi.n	4188 <__swhatbuf_r+0x40>
    4164:	2380      	movs	r3, #128	; 0x80
    4166:	00db      	lsls	r3, r3, #3
    4168:	e00f      	b.n	418a <__swhatbuf_r+0x42>
    416a:	aa01      	add	r2, sp, #4
    416c:	f000 fc9a 	bl	4aa4 <_fstat_r>
    4170:	2800      	cmp	r0, #0
    4172:	dbf2      	blt.n	415a <__swhatbuf_r+0x12>
    4174:	22f0      	movs	r2, #240	; 0xf0
    4176:	9b02      	ldr	r3, [sp, #8]
    4178:	0212      	lsls	r2, r2, #8
    417a:	4013      	ands	r3, r2
    417c:	4a05      	ldr	r2, [pc, #20]	; (4194 <__swhatbuf_r+0x4c>)
    417e:	189b      	adds	r3, r3, r2
    4180:	425a      	negs	r2, r3
    4182:	4153      	adcs	r3, r2
    4184:	602b      	str	r3, [r5, #0]
    4186:	e7ed      	b.n	4164 <__swhatbuf_r+0x1c>
    4188:	2340      	movs	r3, #64	; 0x40
    418a:	2000      	movs	r0, #0
    418c:	6023      	str	r3, [r4, #0]
    418e:	b010      	add	sp, #64	; 0x40
    4190:	bd70      	pop	{r4, r5, r6, pc}
    4192:	46c0      	nop			; (mov r8, r8)
    4194:	ffffe000 	.word	0xffffe000

00004198 <__smakebuf_r>:
    4198:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    419a:	2602      	movs	r6, #2
    419c:	898b      	ldrh	r3, [r1, #12]
    419e:	0005      	movs	r5, r0
    41a0:	000c      	movs	r4, r1
    41a2:	4233      	tst	r3, r6
    41a4:	d006      	beq.n	41b4 <__smakebuf_r+0x1c>
    41a6:	0023      	movs	r3, r4
    41a8:	3347      	adds	r3, #71	; 0x47
    41aa:	6023      	str	r3, [r4, #0]
    41ac:	6123      	str	r3, [r4, #16]
    41ae:	2301      	movs	r3, #1
    41b0:	6163      	str	r3, [r4, #20]
    41b2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    41b4:	ab01      	add	r3, sp, #4
    41b6:	466a      	mov	r2, sp
    41b8:	f7ff ffc6 	bl	4148 <__swhatbuf_r>
    41bc:	9900      	ldr	r1, [sp, #0]
    41be:	0007      	movs	r7, r0
    41c0:	0028      	movs	r0, r5
    41c2:	f7ff fc6d 	bl	3aa0 <_malloc_r>
    41c6:	2800      	cmp	r0, #0
    41c8:	d108      	bne.n	41dc <__smakebuf_r+0x44>
    41ca:	220c      	movs	r2, #12
    41cc:	5ea3      	ldrsh	r3, [r4, r2]
    41ce:	059a      	lsls	r2, r3, #22
    41d0:	d4ef      	bmi.n	41b2 <__smakebuf_r+0x1a>
    41d2:	2203      	movs	r2, #3
    41d4:	4393      	bics	r3, r2
    41d6:	431e      	orrs	r6, r3
    41d8:	81a6      	strh	r6, [r4, #12]
    41da:	e7e4      	b.n	41a6 <__smakebuf_r+0xe>
    41dc:	4b0f      	ldr	r3, [pc, #60]	; (421c <__smakebuf_r+0x84>)
    41de:	62ab      	str	r3, [r5, #40]	; 0x28
    41e0:	2380      	movs	r3, #128	; 0x80
    41e2:	89a2      	ldrh	r2, [r4, #12]
    41e4:	6020      	str	r0, [r4, #0]
    41e6:	4313      	orrs	r3, r2
    41e8:	81a3      	strh	r3, [r4, #12]
    41ea:	9b00      	ldr	r3, [sp, #0]
    41ec:	6120      	str	r0, [r4, #16]
    41ee:	6163      	str	r3, [r4, #20]
    41f0:	9b01      	ldr	r3, [sp, #4]
    41f2:	2b00      	cmp	r3, #0
    41f4:	d00d      	beq.n	4212 <__smakebuf_r+0x7a>
    41f6:	230e      	movs	r3, #14
    41f8:	5ee1      	ldrsh	r1, [r4, r3]
    41fa:	0028      	movs	r0, r5
    41fc:	f000 fc64 	bl	4ac8 <_isatty_r>
    4200:	2800      	cmp	r0, #0
    4202:	d006      	beq.n	4212 <__smakebuf_r+0x7a>
    4204:	2203      	movs	r2, #3
    4206:	89a3      	ldrh	r3, [r4, #12]
    4208:	4393      	bics	r3, r2
    420a:	001a      	movs	r2, r3
    420c:	2301      	movs	r3, #1
    420e:	4313      	orrs	r3, r2
    4210:	81a3      	strh	r3, [r4, #12]
    4212:	89a0      	ldrh	r0, [r4, #12]
    4214:	4338      	orrs	r0, r7
    4216:	81a0      	strh	r0, [r4, #12]
    4218:	e7cb      	b.n	41b2 <__smakebuf_r+0x1a>
    421a:	46c0      	nop			; (mov r8, r8)
    421c:	00003f99 	.word	0x00003f99

00004220 <__malloc_lock>:
    4220:	4770      	bx	lr

00004222 <__malloc_unlock>:
    4222:	4770      	bx	lr

00004224 <__sfputc_r>:
    4224:	6893      	ldr	r3, [r2, #8]
    4226:	b510      	push	{r4, lr}
    4228:	3b01      	subs	r3, #1
    422a:	6093      	str	r3, [r2, #8]
    422c:	2b00      	cmp	r3, #0
    422e:	da05      	bge.n	423c <__sfputc_r+0x18>
    4230:	6994      	ldr	r4, [r2, #24]
    4232:	42a3      	cmp	r3, r4
    4234:	db08      	blt.n	4248 <__sfputc_r+0x24>
    4236:	b2cb      	uxtb	r3, r1
    4238:	2b0a      	cmp	r3, #10
    423a:	d005      	beq.n	4248 <__sfputc_r+0x24>
    423c:	6813      	ldr	r3, [r2, #0]
    423e:	1c58      	adds	r0, r3, #1
    4240:	6010      	str	r0, [r2, #0]
    4242:	7019      	strb	r1, [r3, #0]
    4244:	b2c8      	uxtb	r0, r1
    4246:	bd10      	pop	{r4, pc}
    4248:	f000 fb3a 	bl	48c0 <__swbuf_r>
    424c:	e7fb      	b.n	4246 <__sfputc_r+0x22>

0000424e <__sfputs_r>:
    424e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4250:	0006      	movs	r6, r0
    4252:	000f      	movs	r7, r1
    4254:	0014      	movs	r4, r2
    4256:	18d5      	adds	r5, r2, r3
    4258:	42ac      	cmp	r4, r5
    425a:	d101      	bne.n	4260 <__sfputs_r+0x12>
    425c:	2000      	movs	r0, #0
    425e:	e007      	b.n	4270 <__sfputs_r+0x22>
    4260:	7821      	ldrb	r1, [r4, #0]
    4262:	003a      	movs	r2, r7
    4264:	0030      	movs	r0, r6
    4266:	f7ff ffdd 	bl	4224 <__sfputc_r>
    426a:	3401      	adds	r4, #1
    426c:	1c43      	adds	r3, r0, #1
    426e:	d1f3      	bne.n	4258 <__sfputs_r+0xa>
    4270:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00004274 <_vfiprintf_r>:
    4274:	b5f0      	push	{r4, r5, r6, r7, lr}
    4276:	b09f      	sub	sp, #124	; 0x7c
    4278:	0006      	movs	r6, r0
    427a:	000f      	movs	r7, r1
    427c:	0014      	movs	r4, r2
    427e:	9305      	str	r3, [sp, #20]
    4280:	2800      	cmp	r0, #0
    4282:	d004      	beq.n	428e <_vfiprintf_r+0x1a>
    4284:	6983      	ldr	r3, [r0, #24]
    4286:	2b00      	cmp	r3, #0
    4288:	d101      	bne.n	428e <_vfiprintf_r+0x1a>
    428a:	f7ff fec7 	bl	401c <__sinit>
    428e:	4b7f      	ldr	r3, [pc, #508]	; (448c <_vfiprintf_r+0x218>)
    4290:	429f      	cmp	r7, r3
    4292:	d15c      	bne.n	434e <_vfiprintf_r+0xda>
    4294:	6877      	ldr	r7, [r6, #4]
    4296:	89bb      	ldrh	r3, [r7, #12]
    4298:	071b      	lsls	r3, r3, #28
    429a:	d562      	bpl.n	4362 <_vfiprintf_r+0xee>
    429c:	693b      	ldr	r3, [r7, #16]
    429e:	2b00      	cmp	r3, #0
    42a0:	d05f      	beq.n	4362 <_vfiprintf_r+0xee>
    42a2:	2300      	movs	r3, #0
    42a4:	ad06      	add	r5, sp, #24
    42a6:	616b      	str	r3, [r5, #20]
    42a8:	3320      	adds	r3, #32
    42aa:	766b      	strb	r3, [r5, #25]
    42ac:	3310      	adds	r3, #16
    42ae:	76ab      	strb	r3, [r5, #26]
    42b0:	9402      	str	r4, [sp, #8]
    42b2:	9c02      	ldr	r4, [sp, #8]
    42b4:	7823      	ldrb	r3, [r4, #0]
    42b6:	2b00      	cmp	r3, #0
    42b8:	d15d      	bne.n	4376 <_vfiprintf_r+0x102>
    42ba:	9b02      	ldr	r3, [sp, #8]
    42bc:	1ae3      	subs	r3, r4, r3
    42be:	9304      	str	r3, [sp, #16]
    42c0:	d00d      	beq.n	42de <_vfiprintf_r+0x6a>
    42c2:	9b04      	ldr	r3, [sp, #16]
    42c4:	9a02      	ldr	r2, [sp, #8]
    42c6:	0039      	movs	r1, r7
    42c8:	0030      	movs	r0, r6
    42ca:	f7ff ffc0 	bl	424e <__sfputs_r>
    42ce:	1c43      	adds	r3, r0, #1
    42d0:	d100      	bne.n	42d4 <_vfiprintf_r+0x60>
    42d2:	e0cc      	b.n	446e <_vfiprintf_r+0x1fa>
    42d4:	696a      	ldr	r2, [r5, #20]
    42d6:	9b04      	ldr	r3, [sp, #16]
    42d8:	4694      	mov	ip, r2
    42da:	4463      	add	r3, ip
    42dc:	616b      	str	r3, [r5, #20]
    42de:	7823      	ldrb	r3, [r4, #0]
    42e0:	2b00      	cmp	r3, #0
    42e2:	d100      	bne.n	42e6 <_vfiprintf_r+0x72>
    42e4:	e0c3      	b.n	446e <_vfiprintf_r+0x1fa>
    42e6:	2201      	movs	r2, #1
    42e8:	2300      	movs	r3, #0
    42ea:	4252      	negs	r2, r2
    42ec:	606a      	str	r2, [r5, #4]
    42ee:	a902      	add	r1, sp, #8
    42f0:	3254      	adds	r2, #84	; 0x54
    42f2:	1852      	adds	r2, r2, r1
    42f4:	3401      	adds	r4, #1
    42f6:	602b      	str	r3, [r5, #0]
    42f8:	60eb      	str	r3, [r5, #12]
    42fa:	60ab      	str	r3, [r5, #8]
    42fc:	7013      	strb	r3, [r2, #0]
    42fe:	65ab      	str	r3, [r5, #88]	; 0x58
    4300:	7821      	ldrb	r1, [r4, #0]
    4302:	2205      	movs	r2, #5
    4304:	4862      	ldr	r0, [pc, #392]	; (4490 <_vfiprintf_r+0x21c>)
    4306:	f000 fc05 	bl	4b14 <memchr>
    430a:	1c63      	adds	r3, r4, #1
    430c:	469c      	mov	ip, r3
    430e:	2800      	cmp	r0, #0
    4310:	d135      	bne.n	437e <_vfiprintf_r+0x10a>
    4312:	6829      	ldr	r1, [r5, #0]
    4314:	06cb      	lsls	r3, r1, #27
    4316:	d504      	bpl.n	4322 <_vfiprintf_r+0xae>
    4318:	2353      	movs	r3, #83	; 0x53
    431a:	aa02      	add	r2, sp, #8
    431c:	3020      	adds	r0, #32
    431e:	189b      	adds	r3, r3, r2
    4320:	7018      	strb	r0, [r3, #0]
    4322:	070b      	lsls	r3, r1, #28
    4324:	d504      	bpl.n	4330 <_vfiprintf_r+0xbc>
    4326:	2353      	movs	r3, #83	; 0x53
    4328:	202b      	movs	r0, #43	; 0x2b
    432a:	aa02      	add	r2, sp, #8
    432c:	189b      	adds	r3, r3, r2
    432e:	7018      	strb	r0, [r3, #0]
    4330:	7823      	ldrb	r3, [r4, #0]
    4332:	2b2a      	cmp	r3, #42	; 0x2a
    4334:	d02c      	beq.n	4390 <_vfiprintf_r+0x11c>
    4336:	2000      	movs	r0, #0
    4338:	210a      	movs	r1, #10
    433a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    433c:	7822      	ldrb	r2, [r4, #0]
    433e:	3a30      	subs	r2, #48	; 0x30
    4340:	2a09      	cmp	r2, #9
    4342:	d800      	bhi.n	4346 <_vfiprintf_r+0xd2>
    4344:	e06b      	b.n	441e <_vfiprintf_r+0x1aa>
    4346:	2800      	cmp	r0, #0
    4348:	d02a      	beq.n	43a0 <_vfiprintf_r+0x12c>
    434a:	9309      	str	r3, [sp, #36]	; 0x24
    434c:	e028      	b.n	43a0 <_vfiprintf_r+0x12c>
    434e:	4b51      	ldr	r3, [pc, #324]	; (4494 <_vfiprintf_r+0x220>)
    4350:	429f      	cmp	r7, r3
    4352:	d101      	bne.n	4358 <_vfiprintf_r+0xe4>
    4354:	68b7      	ldr	r7, [r6, #8]
    4356:	e79e      	b.n	4296 <_vfiprintf_r+0x22>
    4358:	4b4f      	ldr	r3, [pc, #316]	; (4498 <_vfiprintf_r+0x224>)
    435a:	429f      	cmp	r7, r3
    435c:	d19b      	bne.n	4296 <_vfiprintf_r+0x22>
    435e:	68f7      	ldr	r7, [r6, #12]
    4360:	e799      	b.n	4296 <_vfiprintf_r+0x22>
    4362:	0039      	movs	r1, r7
    4364:	0030      	movs	r0, r6
    4366:	f000 fb15 	bl	4994 <__swsetup_r>
    436a:	2800      	cmp	r0, #0
    436c:	d099      	beq.n	42a2 <_vfiprintf_r+0x2e>
    436e:	2001      	movs	r0, #1
    4370:	4240      	negs	r0, r0
    4372:	b01f      	add	sp, #124	; 0x7c
    4374:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4376:	2b25      	cmp	r3, #37	; 0x25
    4378:	d09f      	beq.n	42ba <_vfiprintf_r+0x46>
    437a:	3401      	adds	r4, #1
    437c:	e79a      	b.n	42b4 <_vfiprintf_r+0x40>
    437e:	4b44      	ldr	r3, [pc, #272]	; (4490 <_vfiprintf_r+0x21c>)
    4380:	6829      	ldr	r1, [r5, #0]
    4382:	1ac0      	subs	r0, r0, r3
    4384:	2301      	movs	r3, #1
    4386:	4083      	lsls	r3, r0
    4388:	430b      	orrs	r3, r1
    438a:	602b      	str	r3, [r5, #0]
    438c:	4664      	mov	r4, ip
    438e:	e7b7      	b.n	4300 <_vfiprintf_r+0x8c>
    4390:	9b05      	ldr	r3, [sp, #20]
    4392:	1d18      	adds	r0, r3, #4
    4394:	681b      	ldr	r3, [r3, #0]
    4396:	9005      	str	r0, [sp, #20]
    4398:	2b00      	cmp	r3, #0
    439a:	db3a      	blt.n	4412 <_vfiprintf_r+0x19e>
    439c:	9309      	str	r3, [sp, #36]	; 0x24
    439e:	4664      	mov	r4, ip
    43a0:	7823      	ldrb	r3, [r4, #0]
    43a2:	2b2e      	cmp	r3, #46	; 0x2e
    43a4:	d10b      	bne.n	43be <_vfiprintf_r+0x14a>
    43a6:	7863      	ldrb	r3, [r4, #1]
    43a8:	1c62      	adds	r2, r4, #1
    43aa:	2b2a      	cmp	r3, #42	; 0x2a
    43ac:	d13f      	bne.n	442e <_vfiprintf_r+0x1ba>
    43ae:	9b05      	ldr	r3, [sp, #20]
    43b0:	3402      	adds	r4, #2
    43b2:	1d1a      	adds	r2, r3, #4
    43b4:	681b      	ldr	r3, [r3, #0]
    43b6:	9205      	str	r2, [sp, #20]
    43b8:	2b00      	cmp	r3, #0
    43ba:	db35      	blt.n	4428 <_vfiprintf_r+0x1b4>
    43bc:	9307      	str	r3, [sp, #28]
    43be:	7821      	ldrb	r1, [r4, #0]
    43c0:	2203      	movs	r2, #3
    43c2:	4836      	ldr	r0, [pc, #216]	; (449c <_vfiprintf_r+0x228>)
    43c4:	f000 fba6 	bl	4b14 <memchr>
    43c8:	2800      	cmp	r0, #0
    43ca:	d007      	beq.n	43dc <_vfiprintf_r+0x168>
    43cc:	4b33      	ldr	r3, [pc, #204]	; (449c <_vfiprintf_r+0x228>)
    43ce:	682a      	ldr	r2, [r5, #0]
    43d0:	1ac0      	subs	r0, r0, r3
    43d2:	2340      	movs	r3, #64	; 0x40
    43d4:	4083      	lsls	r3, r0
    43d6:	4313      	orrs	r3, r2
    43d8:	602b      	str	r3, [r5, #0]
    43da:	3401      	adds	r4, #1
    43dc:	7821      	ldrb	r1, [r4, #0]
    43de:	1c63      	adds	r3, r4, #1
    43e0:	2206      	movs	r2, #6
    43e2:	482f      	ldr	r0, [pc, #188]	; (44a0 <_vfiprintf_r+0x22c>)
    43e4:	9302      	str	r3, [sp, #8]
    43e6:	7629      	strb	r1, [r5, #24]
    43e8:	f000 fb94 	bl	4b14 <memchr>
    43ec:	2800      	cmp	r0, #0
    43ee:	d044      	beq.n	447a <_vfiprintf_r+0x206>
    43f0:	4b2c      	ldr	r3, [pc, #176]	; (44a4 <_vfiprintf_r+0x230>)
    43f2:	2b00      	cmp	r3, #0
    43f4:	d12f      	bne.n	4456 <_vfiprintf_r+0x1e2>
    43f6:	6829      	ldr	r1, [r5, #0]
    43f8:	9b05      	ldr	r3, [sp, #20]
    43fa:	2207      	movs	r2, #7
    43fc:	05c9      	lsls	r1, r1, #23
    43fe:	d528      	bpl.n	4452 <_vfiprintf_r+0x1de>
    4400:	189b      	adds	r3, r3, r2
    4402:	4393      	bics	r3, r2
    4404:	3308      	adds	r3, #8
    4406:	9305      	str	r3, [sp, #20]
    4408:	696b      	ldr	r3, [r5, #20]
    440a:	9a03      	ldr	r2, [sp, #12]
    440c:	189b      	adds	r3, r3, r2
    440e:	616b      	str	r3, [r5, #20]
    4410:	e74f      	b.n	42b2 <_vfiprintf_r+0x3e>
    4412:	425b      	negs	r3, r3
    4414:	60eb      	str	r3, [r5, #12]
    4416:	2302      	movs	r3, #2
    4418:	430b      	orrs	r3, r1
    441a:	602b      	str	r3, [r5, #0]
    441c:	e7bf      	b.n	439e <_vfiprintf_r+0x12a>
    441e:	434b      	muls	r3, r1
    4420:	3401      	adds	r4, #1
    4422:	189b      	adds	r3, r3, r2
    4424:	2001      	movs	r0, #1
    4426:	e789      	b.n	433c <_vfiprintf_r+0xc8>
    4428:	2301      	movs	r3, #1
    442a:	425b      	negs	r3, r3
    442c:	e7c6      	b.n	43bc <_vfiprintf_r+0x148>
    442e:	2300      	movs	r3, #0
    4430:	0014      	movs	r4, r2
    4432:	200a      	movs	r0, #10
    4434:	001a      	movs	r2, r3
    4436:	606b      	str	r3, [r5, #4]
    4438:	7821      	ldrb	r1, [r4, #0]
    443a:	3930      	subs	r1, #48	; 0x30
    443c:	2909      	cmp	r1, #9
    443e:	d903      	bls.n	4448 <_vfiprintf_r+0x1d4>
    4440:	2b00      	cmp	r3, #0
    4442:	d0bc      	beq.n	43be <_vfiprintf_r+0x14a>
    4444:	9207      	str	r2, [sp, #28]
    4446:	e7ba      	b.n	43be <_vfiprintf_r+0x14a>
    4448:	4342      	muls	r2, r0
    444a:	3401      	adds	r4, #1
    444c:	1852      	adds	r2, r2, r1
    444e:	2301      	movs	r3, #1
    4450:	e7f2      	b.n	4438 <_vfiprintf_r+0x1c4>
    4452:	3307      	adds	r3, #7
    4454:	e7d5      	b.n	4402 <_vfiprintf_r+0x18e>
    4456:	ab05      	add	r3, sp, #20
    4458:	9300      	str	r3, [sp, #0]
    445a:	003a      	movs	r2, r7
    445c:	4b12      	ldr	r3, [pc, #72]	; (44a8 <_vfiprintf_r+0x234>)
    445e:	0029      	movs	r1, r5
    4460:	0030      	movs	r0, r6
    4462:	e000      	b.n	4466 <_vfiprintf_r+0x1f2>
    4464:	bf00      	nop
    4466:	9003      	str	r0, [sp, #12]
    4468:	9b03      	ldr	r3, [sp, #12]
    446a:	3301      	adds	r3, #1
    446c:	d1cc      	bne.n	4408 <_vfiprintf_r+0x194>
    446e:	89bb      	ldrh	r3, [r7, #12]
    4470:	065b      	lsls	r3, r3, #25
    4472:	d500      	bpl.n	4476 <_vfiprintf_r+0x202>
    4474:	e77b      	b.n	436e <_vfiprintf_r+0xfa>
    4476:	980b      	ldr	r0, [sp, #44]	; 0x2c
    4478:	e77b      	b.n	4372 <_vfiprintf_r+0xfe>
    447a:	ab05      	add	r3, sp, #20
    447c:	9300      	str	r3, [sp, #0]
    447e:	003a      	movs	r2, r7
    4480:	4b09      	ldr	r3, [pc, #36]	; (44a8 <_vfiprintf_r+0x234>)
    4482:	0029      	movs	r1, r5
    4484:	0030      	movs	r0, r6
    4486:	f000 f87f 	bl	4588 <_printf_i>
    448a:	e7ec      	b.n	4466 <_vfiprintf_r+0x1f2>
    448c:	00006e94 	.word	0x00006e94
    4490:	00006ed4 	.word	0x00006ed4
    4494:	00006eb4 	.word	0x00006eb4
    4498:	00006e74 	.word	0x00006e74
    449c:	00006eda 	.word	0x00006eda
    44a0:	00006ede 	.word	0x00006ede
    44a4:	00000000 	.word	0x00000000
    44a8:	0000424f 	.word	0x0000424f

000044ac <_printf_common>:
    44ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    44ae:	0015      	movs	r5, r2
    44b0:	9301      	str	r3, [sp, #4]
    44b2:	688a      	ldr	r2, [r1, #8]
    44b4:	690b      	ldr	r3, [r1, #16]
    44b6:	9000      	str	r0, [sp, #0]
    44b8:	000c      	movs	r4, r1
    44ba:	4293      	cmp	r3, r2
    44bc:	da00      	bge.n	44c0 <_printf_common+0x14>
    44be:	0013      	movs	r3, r2
    44c0:	0022      	movs	r2, r4
    44c2:	602b      	str	r3, [r5, #0]
    44c4:	3243      	adds	r2, #67	; 0x43
    44c6:	7812      	ldrb	r2, [r2, #0]
    44c8:	2a00      	cmp	r2, #0
    44ca:	d001      	beq.n	44d0 <_printf_common+0x24>
    44cc:	3301      	adds	r3, #1
    44ce:	602b      	str	r3, [r5, #0]
    44d0:	6823      	ldr	r3, [r4, #0]
    44d2:	069b      	lsls	r3, r3, #26
    44d4:	d502      	bpl.n	44dc <_printf_common+0x30>
    44d6:	682b      	ldr	r3, [r5, #0]
    44d8:	3302      	adds	r3, #2
    44da:	602b      	str	r3, [r5, #0]
    44dc:	2706      	movs	r7, #6
    44de:	6823      	ldr	r3, [r4, #0]
    44e0:	401f      	ands	r7, r3
    44e2:	d027      	beq.n	4534 <_printf_common+0x88>
    44e4:	0023      	movs	r3, r4
    44e6:	3343      	adds	r3, #67	; 0x43
    44e8:	781b      	ldrb	r3, [r3, #0]
    44ea:	1e5a      	subs	r2, r3, #1
    44ec:	4193      	sbcs	r3, r2
    44ee:	6822      	ldr	r2, [r4, #0]
    44f0:	0692      	lsls	r2, r2, #26
    44f2:	d430      	bmi.n	4556 <_printf_common+0xaa>
    44f4:	0022      	movs	r2, r4
    44f6:	9901      	ldr	r1, [sp, #4]
    44f8:	3243      	adds	r2, #67	; 0x43
    44fa:	9800      	ldr	r0, [sp, #0]
    44fc:	9e08      	ldr	r6, [sp, #32]
    44fe:	47b0      	blx	r6
    4500:	1c43      	adds	r3, r0, #1
    4502:	d025      	beq.n	4550 <_printf_common+0xa4>
    4504:	2306      	movs	r3, #6
    4506:	6820      	ldr	r0, [r4, #0]
    4508:	682a      	ldr	r2, [r5, #0]
    450a:	68e1      	ldr	r1, [r4, #12]
    450c:	4003      	ands	r3, r0
    450e:	2500      	movs	r5, #0
    4510:	2b04      	cmp	r3, #4
    4512:	d103      	bne.n	451c <_printf_common+0x70>
    4514:	1a8d      	subs	r5, r1, r2
    4516:	43eb      	mvns	r3, r5
    4518:	17db      	asrs	r3, r3, #31
    451a:	401d      	ands	r5, r3
    451c:	68a3      	ldr	r3, [r4, #8]
    451e:	6922      	ldr	r2, [r4, #16]
    4520:	4293      	cmp	r3, r2
    4522:	dd01      	ble.n	4528 <_printf_common+0x7c>
    4524:	1a9b      	subs	r3, r3, r2
    4526:	18ed      	adds	r5, r5, r3
    4528:	2700      	movs	r7, #0
    452a:	42bd      	cmp	r5, r7
    452c:	d120      	bne.n	4570 <_printf_common+0xc4>
    452e:	2000      	movs	r0, #0
    4530:	e010      	b.n	4554 <_printf_common+0xa8>
    4532:	3701      	adds	r7, #1
    4534:	68e3      	ldr	r3, [r4, #12]
    4536:	682a      	ldr	r2, [r5, #0]
    4538:	1a9b      	subs	r3, r3, r2
    453a:	429f      	cmp	r7, r3
    453c:	dad2      	bge.n	44e4 <_printf_common+0x38>
    453e:	0022      	movs	r2, r4
    4540:	2301      	movs	r3, #1
    4542:	3219      	adds	r2, #25
    4544:	9901      	ldr	r1, [sp, #4]
    4546:	9800      	ldr	r0, [sp, #0]
    4548:	9e08      	ldr	r6, [sp, #32]
    454a:	47b0      	blx	r6
    454c:	1c43      	adds	r3, r0, #1
    454e:	d1f0      	bne.n	4532 <_printf_common+0x86>
    4550:	2001      	movs	r0, #1
    4552:	4240      	negs	r0, r0
    4554:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4556:	2030      	movs	r0, #48	; 0x30
    4558:	18e1      	adds	r1, r4, r3
    455a:	3143      	adds	r1, #67	; 0x43
    455c:	7008      	strb	r0, [r1, #0]
    455e:	0021      	movs	r1, r4
    4560:	1c5a      	adds	r2, r3, #1
    4562:	3145      	adds	r1, #69	; 0x45
    4564:	7809      	ldrb	r1, [r1, #0]
    4566:	18a2      	adds	r2, r4, r2
    4568:	3243      	adds	r2, #67	; 0x43
    456a:	3302      	adds	r3, #2
    456c:	7011      	strb	r1, [r2, #0]
    456e:	e7c1      	b.n	44f4 <_printf_common+0x48>
    4570:	0022      	movs	r2, r4
    4572:	2301      	movs	r3, #1
    4574:	321a      	adds	r2, #26
    4576:	9901      	ldr	r1, [sp, #4]
    4578:	9800      	ldr	r0, [sp, #0]
    457a:	9e08      	ldr	r6, [sp, #32]
    457c:	47b0      	blx	r6
    457e:	1c43      	adds	r3, r0, #1
    4580:	d0e6      	beq.n	4550 <_printf_common+0xa4>
    4582:	3701      	adds	r7, #1
    4584:	e7d1      	b.n	452a <_printf_common+0x7e>
	...

00004588 <_printf_i>:
    4588:	b5f0      	push	{r4, r5, r6, r7, lr}
    458a:	b08b      	sub	sp, #44	; 0x2c
    458c:	9206      	str	r2, [sp, #24]
    458e:	000a      	movs	r2, r1
    4590:	3243      	adds	r2, #67	; 0x43
    4592:	9307      	str	r3, [sp, #28]
    4594:	9005      	str	r0, [sp, #20]
    4596:	9204      	str	r2, [sp, #16]
    4598:	7e0a      	ldrb	r2, [r1, #24]
    459a:	000c      	movs	r4, r1
    459c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    459e:	2a6e      	cmp	r2, #110	; 0x6e
    45a0:	d100      	bne.n	45a4 <_printf_i+0x1c>
    45a2:	e08f      	b.n	46c4 <_printf_i+0x13c>
    45a4:	d817      	bhi.n	45d6 <_printf_i+0x4e>
    45a6:	2a63      	cmp	r2, #99	; 0x63
    45a8:	d02c      	beq.n	4604 <_printf_i+0x7c>
    45aa:	d808      	bhi.n	45be <_printf_i+0x36>
    45ac:	2a00      	cmp	r2, #0
    45ae:	d100      	bne.n	45b2 <_printf_i+0x2a>
    45b0:	e099      	b.n	46e6 <_printf_i+0x15e>
    45b2:	2a58      	cmp	r2, #88	; 0x58
    45b4:	d054      	beq.n	4660 <_printf_i+0xd8>
    45b6:	0026      	movs	r6, r4
    45b8:	3642      	adds	r6, #66	; 0x42
    45ba:	7032      	strb	r2, [r6, #0]
    45bc:	e029      	b.n	4612 <_printf_i+0x8a>
    45be:	2a64      	cmp	r2, #100	; 0x64
    45c0:	d001      	beq.n	45c6 <_printf_i+0x3e>
    45c2:	2a69      	cmp	r2, #105	; 0x69
    45c4:	d1f7      	bne.n	45b6 <_printf_i+0x2e>
    45c6:	6821      	ldr	r1, [r4, #0]
    45c8:	681a      	ldr	r2, [r3, #0]
    45ca:	0608      	lsls	r0, r1, #24
    45cc:	d523      	bpl.n	4616 <_printf_i+0x8e>
    45ce:	1d11      	adds	r1, r2, #4
    45d0:	6019      	str	r1, [r3, #0]
    45d2:	6815      	ldr	r5, [r2, #0]
    45d4:	e025      	b.n	4622 <_printf_i+0x9a>
    45d6:	2a73      	cmp	r2, #115	; 0x73
    45d8:	d100      	bne.n	45dc <_printf_i+0x54>
    45da:	e088      	b.n	46ee <_printf_i+0x166>
    45dc:	d808      	bhi.n	45f0 <_printf_i+0x68>
    45de:	2a6f      	cmp	r2, #111	; 0x6f
    45e0:	d029      	beq.n	4636 <_printf_i+0xae>
    45e2:	2a70      	cmp	r2, #112	; 0x70
    45e4:	d1e7      	bne.n	45b6 <_printf_i+0x2e>
    45e6:	2220      	movs	r2, #32
    45e8:	6809      	ldr	r1, [r1, #0]
    45ea:	430a      	orrs	r2, r1
    45ec:	6022      	str	r2, [r4, #0]
    45ee:	e003      	b.n	45f8 <_printf_i+0x70>
    45f0:	2a75      	cmp	r2, #117	; 0x75
    45f2:	d020      	beq.n	4636 <_printf_i+0xae>
    45f4:	2a78      	cmp	r2, #120	; 0x78
    45f6:	d1de      	bne.n	45b6 <_printf_i+0x2e>
    45f8:	0022      	movs	r2, r4
    45fa:	2178      	movs	r1, #120	; 0x78
    45fc:	3245      	adds	r2, #69	; 0x45
    45fe:	7011      	strb	r1, [r2, #0]
    4600:	4a6c      	ldr	r2, [pc, #432]	; (47b4 <_printf_i+0x22c>)
    4602:	e030      	b.n	4666 <_printf_i+0xde>
    4604:	000e      	movs	r6, r1
    4606:	681a      	ldr	r2, [r3, #0]
    4608:	3642      	adds	r6, #66	; 0x42
    460a:	1d11      	adds	r1, r2, #4
    460c:	6019      	str	r1, [r3, #0]
    460e:	6813      	ldr	r3, [r2, #0]
    4610:	7033      	strb	r3, [r6, #0]
    4612:	2301      	movs	r3, #1
    4614:	e079      	b.n	470a <_printf_i+0x182>
    4616:	0649      	lsls	r1, r1, #25
    4618:	d5d9      	bpl.n	45ce <_printf_i+0x46>
    461a:	1d11      	adds	r1, r2, #4
    461c:	6019      	str	r1, [r3, #0]
    461e:	2300      	movs	r3, #0
    4620:	5ed5      	ldrsh	r5, [r2, r3]
    4622:	2d00      	cmp	r5, #0
    4624:	da03      	bge.n	462e <_printf_i+0xa6>
    4626:	232d      	movs	r3, #45	; 0x2d
    4628:	9a04      	ldr	r2, [sp, #16]
    462a:	426d      	negs	r5, r5
    462c:	7013      	strb	r3, [r2, #0]
    462e:	4b62      	ldr	r3, [pc, #392]	; (47b8 <_printf_i+0x230>)
    4630:	270a      	movs	r7, #10
    4632:	9303      	str	r3, [sp, #12]
    4634:	e02f      	b.n	4696 <_printf_i+0x10e>
    4636:	6820      	ldr	r0, [r4, #0]
    4638:	6819      	ldr	r1, [r3, #0]
    463a:	0605      	lsls	r5, r0, #24
    463c:	d503      	bpl.n	4646 <_printf_i+0xbe>
    463e:	1d08      	adds	r0, r1, #4
    4640:	6018      	str	r0, [r3, #0]
    4642:	680d      	ldr	r5, [r1, #0]
    4644:	e005      	b.n	4652 <_printf_i+0xca>
    4646:	0640      	lsls	r0, r0, #25
    4648:	d5f9      	bpl.n	463e <_printf_i+0xb6>
    464a:	680d      	ldr	r5, [r1, #0]
    464c:	1d08      	adds	r0, r1, #4
    464e:	6018      	str	r0, [r3, #0]
    4650:	b2ad      	uxth	r5, r5
    4652:	4b59      	ldr	r3, [pc, #356]	; (47b8 <_printf_i+0x230>)
    4654:	2708      	movs	r7, #8
    4656:	9303      	str	r3, [sp, #12]
    4658:	2a6f      	cmp	r2, #111	; 0x6f
    465a:	d018      	beq.n	468e <_printf_i+0x106>
    465c:	270a      	movs	r7, #10
    465e:	e016      	b.n	468e <_printf_i+0x106>
    4660:	3145      	adds	r1, #69	; 0x45
    4662:	700a      	strb	r2, [r1, #0]
    4664:	4a54      	ldr	r2, [pc, #336]	; (47b8 <_printf_i+0x230>)
    4666:	9203      	str	r2, [sp, #12]
    4668:	681a      	ldr	r2, [r3, #0]
    466a:	6821      	ldr	r1, [r4, #0]
    466c:	1d10      	adds	r0, r2, #4
    466e:	6018      	str	r0, [r3, #0]
    4670:	6815      	ldr	r5, [r2, #0]
    4672:	0608      	lsls	r0, r1, #24
    4674:	d522      	bpl.n	46bc <_printf_i+0x134>
    4676:	07cb      	lsls	r3, r1, #31
    4678:	d502      	bpl.n	4680 <_printf_i+0xf8>
    467a:	2320      	movs	r3, #32
    467c:	4319      	orrs	r1, r3
    467e:	6021      	str	r1, [r4, #0]
    4680:	2710      	movs	r7, #16
    4682:	2d00      	cmp	r5, #0
    4684:	d103      	bne.n	468e <_printf_i+0x106>
    4686:	2320      	movs	r3, #32
    4688:	6822      	ldr	r2, [r4, #0]
    468a:	439a      	bics	r2, r3
    468c:	6022      	str	r2, [r4, #0]
    468e:	0023      	movs	r3, r4
    4690:	2200      	movs	r2, #0
    4692:	3343      	adds	r3, #67	; 0x43
    4694:	701a      	strb	r2, [r3, #0]
    4696:	6863      	ldr	r3, [r4, #4]
    4698:	60a3      	str	r3, [r4, #8]
    469a:	2b00      	cmp	r3, #0
    469c:	db5c      	blt.n	4758 <_printf_i+0x1d0>
    469e:	2204      	movs	r2, #4
    46a0:	6821      	ldr	r1, [r4, #0]
    46a2:	4391      	bics	r1, r2
    46a4:	6021      	str	r1, [r4, #0]
    46a6:	2d00      	cmp	r5, #0
    46a8:	d158      	bne.n	475c <_printf_i+0x1d4>
    46aa:	9e04      	ldr	r6, [sp, #16]
    46ac:	2b00      	cmp	r3, #0
    46ae:	d064      	beq.n	477a <_printf_i+0x1f2>
    46b0:	0026      	movs	r6, r4
    46b2:	9b03      	ldr	r3, [sp, #12]
    46b4:	3642      	adds	r6, #66	; 0x42
    46b6:	781b      	ldrb	r3, [r3, #0]
    46b8:	7033      	strb	r3, [r6, #0]
    46ba:	e05e      	b.n	477a <_printf_i+0x1f2>
    46bc:	0648      	lsls	r0, r1, #25
    46be:	d5da      	bpl.n	4676 <_printf_i+0xee>
    46c0:	b2ad      	uxth	r5, r5
    46c2:	e7d8      	b.n	4676 <_printf_i+0xee>
    46c4:	6809      	ldr	r1, [r1, #0]
    46c6:	681a      	ldr	r2, [r3, #0]
    46c8:	0608      	lsls	r0, r1, #24
    46ca:	d505      	bpl.n	46d8 <_printf_i+0x150>
    46cc:	1d11      	adds	r1, r2, #4
    46ce:	6019      	str	r1, [r3, #0]
    46d0:	6813      	ldr	r3, [r2, #0]
    46d2:	6962      	ldr	r2, [r4, #20]
    46d4:	601a      	str	r2, [r3, #0]
    46d6:	e006      	b.n	46e6 <_printf_i+0x15e>
    46d8:	0649      	lsls	r1, r1, #25
    46da:	d5f7      	bpl.n	46cc <_printf_i+0x144>
    46dc:	1d11      	adds	r1, r2, #4
    46de:	6019      	str	r1, [r3, #0]
    46e0:	6813      	ldr	r3, [r2, #0]
    46e2:	8aa2      	ldrh	r2, [r4, #20]
    46e4:	801a      	strh	r2, [r3, #0]
    46e6:	2300      	movs	r3, #0
    46e8:	9e04      	ldr	r6, [sp, #16]
    46ea:	6123      	str	r3, [r4, #16]
    46ec:	e054      	b.n	4798 <_printf_i+0x210>
    46ee:	681a      	ldr	r2, [r3, #0]
    46f0:	1d11      	adds	r1, r2, #4
    46f2:	6019      	str	r1, [r3, #0]
    46f4:	6816      	ldr	r6, [r2, #0]
    46f6:	2100      	movs	r1, #0
    46f8:	6862      	ldr	r2, [r4, #4]
    46fa:	0030      	movs	r0, r6
    46fc:	f000 fa0a 	bl	4b14 <memchr>
    4700:	2800      	cmp	r0, #0
    4702:	d001      	beq.n	4708 <_printf_i+0x180>
    4704:	1b80      	subs	r0, r0, r6
    4706:	6060      	str	r0, [r4, #4]
    4708:	6863      	ldr	r3, [r4, #4]
    470a:	6123      	str	r3, [r4, #16]
    470c:	2300      	movs	r3, #0
    470e:	9a04      	ldr	r2, [sp, #16]
    4710:	7013      	strb	r3, [r2, #0]
    4712:	e041      	b.n	4798 <_printf_i+0x210>
    4714:	6923      	ldr	r3, [r4, #16]
    4716:	0032      	movs	r2, r6
    4718:	9906      	ldr	r1, [sp, #24]
    471a:	9805      	ldr	r0, [sp, #20]
    471c:	9d07      	ldr	r5, [sp, #28]
    471e:	47a8      	blx	r5
    4720:	1c43      	adds	r3, r0, #1
    4722:	d043      	beq.n	47ac <_printf_i+0x224>
    4724:	6823      	ldr	r3, [r4, #0]
    4726:	2500      	movs	r5, #0
    4728:	079b      	lsls	r3, r3, #30
    472a:	d40f      	bmi.n	474c <_printf_i+0x1c4>
    472c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    472e:	68e0      	ldr	r0, [r4, #12]
    4730:	4298      	cmp	r0, r3
    4732:	da3d      	bge.n	47b0 <_printf_i+0x228>
    4734:	0018      	movs	r0, r3
    4736:	e03b      	b.n	47b0 <_printf_i+0x228>
    4738:	0022      	movs	r2, r4
    473a:	2301      	movs	r3, #1
    473c:	3219      	adds	r2, #25
    473e:	9906      	ldr	r1, [sp, #24]
    4740:	9805      	ldr	r0, [sp, #20]
    4742:	9e07      	ldr	r6, [sp, #28]
    4744:	47b0      	blx	r6
    4746:	1c43      	adds	r3, r0, #1
    4748:	d030      	beq.n	47ac <_printf_i+0x224>
    474a:	3501      	adds	r5, #1
    474c:	68e3      	ldr	r3, [r4, #12]
    474e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    4750:	1a9b      	subs	r3, r3, r2
    4752:	429d      	cmp	r5, r3
    4754:	dbf0      	blt.n	4738 <_printf_i+0x1b0>
    4756:	e7e9      	b.n	472c <_printf_i+0x1a4>
    4758:	2d00      	cmp	r5, #0
    475a:	d0a9      	beq.n	46b0 <_printf_i+0x128>
    475c:	9e04      	ldr	r6, [sp, #16]
    475e:	0028      	movs	r0, r5
    4760:	0039      	movs	r1, r7
    4762:	f7fe fff9 	bl	3758 <__aeabi_uidivmod>
    4766:	9b03      	ldr	r3, [sp, #12]
    4768:	3e01      	subs	r6, #1
    476a:	5c5b      	ldrb	r3, [r3, r1]
    476c:	0028      	movs	r0, r5
    476e:	7033      	strb	r3, [r6, #0]
    4770:	0039      	movs	r1, r7
    4772:	f7fe ff6b 	bl	364c <__udivsi3>
    4776:	1e05      	subs	r5, r0, #0
    4778:	d1f1      	bne.n	475e <_printf_i+0x1d6>
    477a:	2f08      	cmp	r7, #8
    477c:	d109      	bne.n	4792 <_printf_i+0x20a>
    477e:	6823      	ldr	r3, [r4, #0]
    4780:	07db      	lsls	r3, r3, #31
    4782:	d506      	bpl.n	4792 <_printf_i+0x20a>
    4784:	6863      	ldr	r3, [r4, #4]
    4786:	6922      	ldr	r2, [r4, #16]
    4788:	4293      	cmp	r3, r2
    478a:	dc02      	bgt.n	4792 <_printf_i+0x20a>
    478c:	2330      	movs	r3, #48	; 0x30
    478e:	3e01      	subs	r6, #1
    4790:	7033      	strb	r3, [r6, #0]
    4792:	9b04      	ldr	r3, [sp, #16]
    4794:	1b9b      	subs	r3, r3, r6
    4796:	6123      	str	r3, [r4, #16]
    4798:	9b07      	ldr	r3, [sp, #28]
    479a:	aa09      	add	r2, sp, #36	; 0x24
    479c:	9300      	str	r3, [sp, #0]
    479e:	0021      	movs	r1, r4
    47a0:	9b06      	ldr	r3, [sp, #24]
    47a2:	9805      	ldr	r0, [sp, #20]
    47a4:	f7ff fe82 	bl	44ac <_printf_common>
    47a8:	1c43      	adds	r3, r0, #1
    47aa:	d1b3      	bne.n	4714 <_printf_i+0x18c>
    47ac:	2001      	movs	r0, #1
    47ae:	4240      	negs	r0, r0
    47b0:	b00b      	add	sp, #44	; 0x2c
    47b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    47b4:	00006ef6 	.word	0x00006ef6
    47b8:	00006ee5 	.word	0x00006ee5

000047bc <_putc_r>:
    47bc:	b570      	push	{r4, r5, r6, lr}
    47be:	0006      	movs	r6, r0
    47c0:	000d      	movs	r5, r1
    47c2:	0014      	movs	r4, r2
    47c4:	2800      	cmp	r0, #0
    47c6:	d004      	beq.n	47d2 <_putc_r+0x16>
    47c8:	6983      	ldr	r3, [r0, #24]
    47ca:	2b00      	cmp	r3, #0
    47cc:	d101      	bne.n	47d2 <_putc_r+0x16>
    47ce:	f7ff fc25 	bl	401c <__sinit>
    47d2:	4b12      	ldr	r3, [pc, #72]	; (481c <_putc_r+0x60>)
    47d4:	429c      	cmp	r4, r3
    47d6:	d111      	bne.n	47fc <_putc_r+0x40>
    47d8:	6874      	ldr	r4, [r6, #4]
    47da:	68a3      	ldr	r3, [r4, #8]
    47dc:	3b01      	subs	r3, #1
    47de:	60a3      	str	r3, [r4, #8]
    47e0:	2b00      	cmp	r3, #0
    47e2:	da05      	bge.n	47f0 <_putc_r+0x34>
    47e4:	69a2      	ldr	r2, [r4, #24]
    47e6:	4293      	cmp	r3, r2
    47e8:	db12      	blt.n	4810 <_putc_r+0x54>
    47ea:	b2eb      	uxtb	r3, r5
    47ec:	2b0a      	cmp	r3, #10
    47ee:	d00f      	beq.n	4810 <_putc_r+0x54>
    47f0:	6823      	ldr	r3, [r4, #0]
    47f2:	b2e8      	uxtb	r0, r5
    47f4:	1c5a      	adds	r2, r3, #1
    47f6:	6022      	str	r2, [r4, #0]
    47f8:	701d      	strb	r5, [r3, #0]
    47fa:	bd70      	pop	{r4, r5, r6, pc}
    47fc:	4b08      	ldr	r3, [pc, #32]	; (4820 <_putc_r+0x64>)
    47fe:	429c      	cmp	r4, r3
    4800:	d101      	bne.n	4806 <_putc_r+0x4a>
    4802:	68b4      	ldr	r4, [r6, #8]
    4804:	e7e9      	b.n	47da <_putc_r+0x1e>
    4806:	4b07      	ldr	r3, [pc, #28]	; (4824 <_putc_r+0x68>)
    4808:	429c      	cmp	r4, r3
    480a:	d1e6      	bne.n	47da <_putc_r+0x1e>
    480c:	68f4      	ldr	r4, [r6, #12]
    480e:	e7e4      	b.n	47da <_putc_r+0x1e>
    4810:	0022      	movs	r2, r4
    4812:	0029      	movs	r1, r5
    4814:	0030      	movs	r0, r6
    4816:	f000 f853 	bl	48c0 <__swbuf_r>
    481a:	e7ee      	b.n	47fa <_putc_r+0x3e>
    481c:	00006e94 	.word	0x00006e94
    4820:	00006eb4 	.word	0x00006eb4
    4824:	00006e74 	.word	0x00006e74

00004828 <__sread>:
    4828:	b570      	push	{r4, r5, r6, lr}
    482a:	000c      	movs	r4, r1
    482c:	250e      	movs	r5, #14
    482e:	5f49      	ldrsh	r1, [r1, r5]
    4830:	f000 f97c 	bl	4b2c <_read_r>
    4834:	2800      	cmp	r0, #0
    4836:	db03      	blt.n	4840 <__sread+0x18>
    4838:	6d63      	ldr	r3, [r4, #84]	; 0x54
    483a:	181b      	adds	r3, r3, r0
    483c:	6563      	str	r3, [r4, #84]	; 0x54
    483e:	bd70      	pop	{r4, r5, r6, pc}
    4840:	89a3      	ldrh	r3, [r4, #12]
    4842:	4a02      	ldr	r2, [pc, #8]	; (484c <__sread+0x24>)
    4844:	4013      	ands	r3, r2
    4846:	81a3      	strh	r3, [r4, #12]
    4848:	e7f9      	b.n	483e <__sread+0x16>
    484a:	46c0      	nop			; (mov r8, r8)
    484c:	ffffefff 	.word	0xffffefff

00004850 <__swrite>:
    4850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4852:	001f      	movs	r7, r3
    4854:	898b      	ldrh	r3, [r1, #12]
    4856:	0005      	movs	r5, r0
    4858:	000c      	movs	r4, r1
    485a:	0016      	movs	r6, r2
    485c:	05db      	lsls	r3, r3, #23
    485e:	d505      	bpl.n	486c <__swrite+0x1c>
    4860:	230e      	movs	r3, #14
    4862:	5ec9      	ldrsh	r1, [r1, r3]
    4864:	2200      	movs	r2, #0
    4866:	2302      	movs	r3, #2
    4868:	f000 f940 	bl	4aec <_lseek_r>
    486c:	89a3      	ldrh	r3, [r4, #12]
    486e:	4a05      	ldr	r2, [pc, #20]	; (4884 <__swrite+0x34>)
    4870:	0028      	movs	r0, r5
    4872:	4013      	ands	r3, r2
    4874:	81a3      	strh	r3, [r4, #12]
    4876:	0032      	movs	r2, r6
    4878:	230e      	movs	r3, #14
    487a:	5ee1      	ldrsh	r1, [r4, r3]
    487c:	003b      	movs	r3, r7
    487e:	f000 f875 	bl	496c <_write_r>
    4882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4884:	ffffefff 	.word	0xffffefff

00004888 <__sseek>:
    4888:	b570      	push	{r4, r5, r6, lr}
    488a:	000c      	movs	r4, r1
    488c:	250e      	movs	r5, #14
    488e:	5f49      	ldrsh	r1, [r1, r5]
    4890:	f000 f92c 	bl	4aec <_lseek_r>
    4894:	89a3      	ldrh	r3, [r4, #12]
    4896:	1c42      	adds	r2, r0, #1
    4898:	d103      	bne.n	48a2 <__sseek+0x1a>
    489a:	4a05      	ldr	r2, [pc, #20]	; (48b0 <__sseek+0x28>)
    489c:	4013      	ands	r3, r2
    489e:	81a3      	strh	r3, [r4, #12]
    48a0:	bd70      	pop	{r4, r5, r6, pc}
    48a2:	2280      	movs	r2, #128	; 0x80
    48a4:	0152      	lsls	r2, r2, #5
    48a6:	4313      	orrs	r3, r2
    48a8:	81a3      	strh	r3, [r4, #12]
    48aa:	6560      	str	r0, [r4, #84]	; 0x54
    48ac:	e7f8      	b.n	48a0 <__sseek+0x18>
    48ae:	46c0      	nop			; (mov r8, r8)
    48b0:	ffffefff 	.word	0xffffefff

000048b4 <__sclose>:
    48b4:	b510      	push	{r4, lr}
    48b6:	230e      	movs	r3, #14
    48b8:	5ec9      	ldrsh	r1, [r1, r3]
    48ba:	f000 f8e1 	bl	4a80 <_close_r>
    48be:	bd10      	pop	{r4, pc}

000048c0 <__swbuf_r>:
    48c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    48c2:	0005      	movs	r5, r0
    48c4:	000e      	movs	r6, r1
    48c6:	0014      	movs	r4, r2
    48c8:	2800      	cmp	r0, #0
    48ca:	d004      	beq.n	48d6 <__swbuf_r+0x16>
    48cc:	6983      	ldr	r3, [r0, #24]
    48ce:	2b00      	cmp	r3, #0
    48d0:	d101      	bne.n	48d6 <__swbuf_r+0x16>
    48d2:	f7ff fba3 	bl	401c <__sinit>
    48d6:	4b22      	ldr	r3, [pc, #136]	; (4960 <__swbuf_r+0xa0>)
    48d8:	429c      	cmp	r4, r3
    48da:	d12d      	bne.n	4938 <__swbuf_r+0x78>
    48dc:	686c      	ldr	r4, [r5, #4]
    48de:	69a3      	ldr	r3, [r4, #24]
    48e0:	60a3      	str	r3, [r4, #8]
    48e2:	89a3      	ldrh	r3, [r4, #12]
    48e4:	071b      	lsls	r3, r3, #28
    48e6:	d531      	bpl.n	494c <__swbuf_r+0x8c>
    48e8:	6923      	ldr	r3, [r4, #16]
    48ea:	2b00      	cmp	r3, #0
    48ec:	d02e      	beq.n	494c <__swbuf_r+0x8c>
    48ee:	6823      	ldr	r3, [r4, #0]
    48f0:	6922      	ldr	r2, [r4, #16]
    48f2:	b2f7      	uxtb	r7, r6
    48f4:	1a98      	subs	r0, r3, r2
    48f6:	6963      	ldr	r3, [r4, #20]
    48f8:	b2f6      	uxtb	r6, r6
    48fa:	4298      	cmp	r0, r3
    48fc:	db05      	blt.n	490a <__swbuf_r+0x4a>
    48fe:	0021      	movs	r1, r4
    4900:	0028      	movs	r0, r5
    4902:	f7ff fb1d 	bl	3f40 <_fflush_r>
    4906:	2800      	cmp	r0, #0
    4908:	d126      	bne.n	4958 <__swbuf_r+0x98>
    490a:	68a3      	ldr	r3, [r4, #8]
    490c:	3001      	adds	r0, #1
    490e:	3b01      	subs	r3, #1
    4910:	60a3      	str	r3, [r4, #8]
    4912:	6823      	ldr	r3, [r4, #0]
    4914:	1c5a      	adds	r2, r3, #1
    4916:	6022      	str	r2, [r4, #0]
    4918:	701f      	strb	r7, [r3, #0]
    491a:	6963      	ldr	r3, [r4, #20]
    491c:	4298      	cmp	r0, r3
    491e:	d004      	beq.n	492a <__swbuf_r+0x6a>
    4920:	89a3      	ldrh	r3, [r4, #12]
    4922:	07db      	lsls	r3, r3, #31
    4924:	d51a      	bpl.n	495c <__swbuf_r+0x9c>
    4926:	2e0a      	cmp	r6, #10
    4928:	d118      	bne.n	495c <__swbuf_r+0x9c>
    492a:	0021      	movs	r1, r4
    492c:	0028      	movs	r0, r5
    492e:	f7ff fb07 	bl	3f40 <_fflush_r>
    4932:	2800      	cmp	r0, #0
    4934:	d012      	beq.n	495c <__swbuf_r+0x9c>
    4936:	e00f      	b.n	4958 <__swbuf_r+0x98>
    4938:	4b0a      	ldr	r3, [pc, #40]	; (4964 <__swbuf_r+0xa4>)
    493a:	429c      	cmp	r4, r3
    493c:	d101      	bne.n	4942 <__swbuf_r+0x82>
    493e:	68ac      	ldr	r4, [r5, #8]
    4940:	e7cd      	b.n	48de <__swbuf_r+0x1e>
    4942:	4b09      	ldr	r3, [pc, #36]	; (4968 <__swbuf_r+0xa8>)
    4944:	429c      	cmp	r4, r3
    4946:	d1ca      	bne.n	48de <__swbuf_r+0x1e>
    4948:	68ec      	ldr	r4, [r5, #12]
    494a:	e7c8      	b.n	48de <__swbuf_r+0x1e>
    494c:	0021      	movs	r1, r4
    494e:	0028      	movs	r0, r5
    4950:	f000 f820 	bl	4994 <__swsetup_r>
    4954:	2800      	cmp	r0, #0
    4956:	d0ca      	beq.n	48ee <__swbuf_r+0x2e>
    4958:	2601      	movs	r6, #1
    495a:	4276      	negs	r6, r6
    495c:	0030      	movs	r0, r6
    495e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4960:	00006e94 	.word	0x00006e94
    4964:	00006eb4 	.word	0x00006eb4
    4968:	00006e74 	.word	0x00006e74

0000496c <_write_r>:
    496c:	b570      	push	{r4, r5, r6, lr}
    496e:	0005      	movs	r5, r0
    4970:	0008      	movs	r0, r1
    4972:	0011      	movs	r1, r2
    4974:	2200      	movs	r2, #0
    4976:	4c06      	ldr	r4, [pc, #24]	; (4990 <_write_r+0x24>)
    4978:	6022      	str	r2, [r4, #0]
    497a:	001a      	movs	r2, r3
    497c:	f7fd fbce 	bl	211c <_write>
    4980:	1c43      	adds	r3, r0, #1
    4982:	d103      	bne.n	498c <_write_r+0x20>
    4984:	6823      	ldr	r3, [r4, #0]
    4986:	2b00      	cmp	r3, #0
    4988:	d000      	beq.n	498c <_write_r+0x20>
    498a:	602b      	str	r3, [r5, #0]
    498c:	bd70      	pop	{r4, r5, r6, pc}
    498e:	46c0      	nop			; (mov r8, r8)
    4990:	20000acc 	.word	0x20000acc

00004994 <__swsetup_r>:
    4994:	4b36      	ldr	r3, [pc, #216]	; (4a70 <__swsetup_r+0xdc>)
    4996:	b570      	push	{r4, r5, r6, lr}
    4998:	681d      	ldr	r5, [r3, #0]
    499a:	0006      	movs	r6, r0
    499c:	000c      	movs	r4, r1
    499e:	2d00      	cmp	r5, #0
    49a0:	d005      	beq.n	49ae <__swsetup_r+0x1a>
    49a2:	69ab      	ldr	r3, [r5, #24]
    49a4:	2b00      	cmp	r3, #0
    49a6:	d102      	bne.n	49ae <__swsetup_r+0x1a>
    49a8:	0028      	movs	r0, r5
    49aa:	f7ff fb37 	bl	401c <__sinit>
    49ae:	4b31      	ldr	r3, [pc, #196]	; (4a74 <__swsetup_r+0xe0>)
    49b0:	429c      	cmp	r4, r3
    49b2:	d10f      	bne.n	49d4 <__swsetup_r+0x40>
    49b4:	686c      	ldr	r4, [r5, #4]
    49b6:	230c      	movs	r3, #12
    49b8:	5ee2      	ldrsh	r2, [r4, r3]
    49ba:	b293      	uxth	r3, r2
    49bc:	0719      	lsls	r1, r3, #28
    49be:	d42d      	bmi.n	4a1c <__swsetup_r+0x88>
    49c0:	06d9      	lsls	r1, r3, #27
    49c2:	d411      	bmi.n	49e8 <__swsetup_r+0x54>
    49c4:	2309      	movs	r3, #9
    49c6:	2001      	movs	r0, #1
    49c8:	6033      	str	r3, [r6, #0]
    49ca:	3337      	adds	r3, #55	; 0x37
    49cc:	4313      	orrs	r3, r2
    49ce:	81a3      	strh	r3, [r4, #12]
    49d0:	4240      	negs	r0, r0
    49d2:	bd70      	pop	{r4, r5, r6, pc}
    49d4:	4b28      	ldr	r3, [pc, #160]	; (4a78 <__swsetup_r+0xe4>)
    49d6:	429c      	cmp	r4, r3
    49d8:	d101      	bne.n	49de <__swsetup_r+0x4a>
    49da:	68ac      	ldr	r4, [r5, #8]
    49dc:	e7eb      	b.n	49b6 <__swsetup_r+0x22>
    49de:	4b27      	ldr	r3, [pc, #156]	; (4a7c <__swsetup_r+0xe8>)
    49e0:	429c      	cmp	r4, r3
    49e2:	d1e8      	bne.n	49b6 <__swsetup_r+0x22>
    49e4:	68ec      	ldr	r4, [r5, #12]
    49e6:	e7e6      	b.n	49b6 <__swsetup_r+0x22>
    49e8:	075b      	lsls	r3, r3, #29
    49ea:	d513      	bpl.n	4a14 <__swsetup_r+0x80>
    49ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
    49ee:	2900      	cmp	r1, #0
    49f0:	d008      	beq.n	4a04 <__swsetup_r+0x70>
    49f2:	0023      	movs	r3, r4
    49f4:	3344      	adds	r3, #68	; 0x44
    49f6:	4299      	cmp	r1, r3
    49f8:	d002      	beq.n	4a00 <__swsetup_r+0x6c>
    49fa:	0030      	movs	r0, r6
    49fc:	f7ff f806 	bl	3a0c <_free_r>
    4a00:	2300      	movs	r3, #0
    4a02:	6363      	str	r3, [r4, #52]	; 0x34
    4a04:	2224      	movs	r2, #36	; 0x24
    4a06:	89a3      	ldrh	r3, [r4, #12]
    4a08:	4393      	bics	r3, r2
    4a0a:	81a3      	strh	r3, [r4, #12]
    4a0c:	2300      	movs	r3, #0
    4a0e:	6063      	str	r3, [r4, #4]
    4a10:	6923      	ldr	r3, [r4, #16]
    4a12:	6023      	str	r3, [r4, #0]
    4a14:	2308      	movs	r3, #8
    4a16:	89a2      	ldrh	r2, [r4, #12]
    4a18:	4313      	orrs	r3, r2
    4a1a:	81a3      	strh	r3, [r4, #12]
    4a1c:	6923      	ldr	r3, [r4, #16]
    4a1e:	2b00      	cmp	r3, #0
    4a20:	d10b      	bne.n	4a3a <__swsetup_r+0xa6>
    4a22:	21a0      	movs	r1, #160	; 0xa0
    4a24:	2280      	movs	r2, #128	; 0x80
    4a26:	89a3      	ldrh	r3, [r4, #12]
    4a28:	0089      	lsls	r1, r1, #2
    4a2a:	0092      	lsls	r2, r2, #2
    4a2c:	400b      	ands	r3, r1
    4a2e:	4293      	cmp	r3, r2
    4a30:	d003      	beq.n	4a3a <__swsetup_r+0xa6>
    4a32:	0021      	movs	r1, r4
    4a34:	0030      	movs	r0, r6
    4a36:	f7ff fbaf 	bl	4198 <__smakebuf_r>
    4a3a:	2301      	movs	r3, #1
    4a3c:	89a2      	ldrh	r2, [r4, #12]
    4a3e:	4013      	ands	r3, r2
    4a40:	d011      	beq.n	4a66 <__swsetup_r+0xd2>
    4a42:	2300      	movs	r3, #0
    4a44:	60a3      	str	r3, [r4, #8]
    4a46:	6963      	ldr	r3, [r4, #20]
    4a48:	425b      	negs	r3, r3
    4a4a:	61a3      	str	r3, [r4, #24]
    4a4c:	2000      	movs	r0, #0
    4a4e:	6923      	ldr	r3, [r4, #16]
    4a50:	4283      	cmp	r3, r0
    4a52:	d1be      	bne.n	49d2 <__swsetup_r+0x3e>
    4a54:	230c      	movs	r3, #12
    4a56:	5ee2      	ldrsh	r2, [r4, r3]
    4a58:	0613      	lsls	r3, r2, #24
    4a5a:	d5ba      	bpl.n	49d2 <__swsetup_r+0x3e>
    4a5c:	2340      	movs	r3, #64	; 0x40
    4a5e:	4313      	orrs	r3, r2
    4a60:	81a3      	strh	r3, [r4, #12]
    4a62:	3801      	subs	r0, #1
    4a64:	e7b5      	b.n	49d2 <__swsetup_r+0x3e>
    4a66:	0792      	lsls	r2, r2, #30
    4a68:	d400      	bmi.n	4a6c <__swsetup_r+0xd8>
    4a6a:	6963      	ldr	r3, [r4, #20]
    4a6c:	60a3      	str	r3, [r4, #8]
    4a6e:	e7ed      	b.n	4a4c <__swsetup_r+0xb8>
    4a70:	20000164 	.word	0x20000164
    4a74:	00006e94 	.word	0x00006e94
    4a78:	00006eb4 	.word	0x00006eb4
    4a7c:	00006e74 	.word	0x00006e74

00004a80 <_close_r>:
    4a80:	2300      	movs	r3, #0
    4a82:	b570      	push	{r4, r5, r6, lr}
    4a84:	4c06      	ldr	r4, [pc, #24]	; (4aa0 <_close_r+0x20>)
    4a86:	0005      	movs	r5, r0
    4a88:	0008      	movs	r0, r1
    4a8a:	6023      	str	r3, [r4, #0]
    4a8c:	f7fd fb80 	bl	2190 <_close>
    4a90:	1c43      	adds	r3, r0, #1
    4a92:	d103      	bne.n	4a9c <_close_r+0x1c>
    4a94:	6823      	ldr	r3, [r4, #0]
    4a96:	2b00      	cmp	r3, #0
    4a98:	d000      	beq.n	4a9c <_close_r+0x1c>
    4a9a:	602b      	str	r3, [r5, #0]
    4a9c:	bd70      	pop	{r4, r5, r6, pc}
    4a9e:	46c0      	nop			; (mov r8, r8)
    4aa0:	20000acc 	.word	0x20000acc

00004aa4 <_fstat_r>:
    4aa4:	2300      	movs	r3, #0
    4aa6:	b570      	push	{r4, r5, r6, lr}
    4aa8:	4c06      	ldr	r4, [pc, #24]	; (4ac4 <_fstat_r+0x20>)
    4aaa:	0005      	movs	r5, r0
    4aac:	0008      	movs	r0, r1
    4aae:	0011      	movs	r1, r2
    4ab0:	6023      	str	r3, [r4, #0]
    4ab2:	f7fd fb70 	bl	2196 <_fstat>
    4ab6:	1c43      	adds	r3, r0, #1
    4ab8:	d103      	bne.n	4ac2 <_fstat_r+0x1e>
    4aba:	6823      	ldr	r3, [r4, #0]
    4abc:	2b00      	cmp	r3, #0
    4abe:	d000      	beq.n	4ac2 <_fstat_r+0x1e>
    4ac0:	602b      	str	r3, [r5, #0]
    4ac2:	bd70      	pop	{r4, r5, r6, pc}
    4ac4:	20000acc 	.word	0x20000acc

00004ac8 <_isatty_r>:
    4ac8:	2300      	movs	r3, #0
    4aca:	b570      	push	{r4, r5, r6, lr}
    4acc:	4c06      	ldr	r4, [pc, #24]	; (4ae8 <_isatty_r+0x20>)
    4ace:	0005      	movs	r5, r0
    4ad0:	0008      	movs	r0, r1
    4ad2:	6023      	str	r3, [r4, #0]
    4ad4:	f7fd fb64 	bl	21a0 <_isatty>
    4ad8:	1c43      	adds	r3, r0, #1
    4ada:	d103      	bne.n	4ae4 <_isatty_r+0x1c>
    4adc:	6823      	ldr	r3, [r4, #0]
    4ade:	2b00      	cmp	r3, #0
    4ae0:	d000      	beq.n	4ae4 <_isatty_r+0x1c>
    4ae2:	602b      	str	r3, [r5, #0]
    4ae4:	bd70      	pop	{r4, r5, r6, pc}
    4ae6:	46c0      	nop			; (mov r8, r8)
    4ae8:	20000acc 	.word	0x20000acc

00004aec <_lseek_r>:
    4aec:	b570      	push	{r4, r5, r6, lr}
    4aee:	0005      	movs	r5, r0
    4af0:	0008      	movs	r0, r1
    4af2:	0011      	movs	r1, r2
    4af4:	2200      	movs	r2, #0
    4af6:	4c06      	ldr	r4, [pc, #24]	; (4b10 <_lseek_r+0x24>)
    4af8:	6022      	str	r2, [r4, #0]
    4afa:	001a      	movs	r2, r3
    4afc:	f7fd fb52 	bl	21a4 <_lseek>
    4b00:	1c43      	adds	r3, r0, #1
    4b02:	d103      	bne.n	4b0c <_lseek_r+0x20>
    4b04:	6823      	ldr	r3, [r4, #0]
    4b06:	2b00      	cmp	r3, #0
    4b08:	d000      	beq.n	4b0c <_lseek_r+0x20>
    4b0a:	602b      	str	r3, [r5, #0]
    4b0c:	bd70      	pop	{r4, r5, r6, pc}
    4b0e:	46c0      	nop			; (mov r8, r8)
    4b10:	20000acc 	.word	0x20000acc

00004b14 <memchr>:
    4b14:	b2c9      	uxtb	r1, r1
    4b16:	1882      	adds	r2, r0, r2
    4b18:	4290      	cmp	r0, r2
    4b1a:	d101      	bne.n	4b20 <memchr+0xc>
    4b1c:	2000      	movs	r0, #0
    4b1e:	4770      	bx	lr
    4b20:	7803      	ldrb	r3, [r0, #0]
    4b22:	428b      	cmp	r3, r1
    4b24:	d0fb      	beq.n	4b1e <memchr+0xa>
    4b26:	3001      	adds	r0, #1
    4b28:	e7f6      	b.n	4b18 <memchr+0x4>
	...

00004b2c <_read_r>:
    4b2c:	b570      	push	{r4, r5, r6, lr}
    4b2e:	0005      	movs	r5, r0
    4b30:	0008      	movs	r0, r1
    4b32:	0011      	movs	r1, r2
    4b34:	2200      	movs	r2, #0
    4b36:	4c06      	ldr	r4, [pc, #24]	; (4b50 <_read_r+0x24>)
    4b38:	6022      	str	r2, [r4, #0]
    4b3a:	001a      	movs	r2, r3
    4b3c:	f7fd facc 	bl	20d8 <_read>
    4b40:	1c43      	adds	r3, r0, #1
    4b42:	d103      	bne.n	4b4c <_read_r+0x20>
    4b44:	6823      	ldr	r3, [r4, #0]
    4b46:	2b00      	cmp	r3, #0
    4b48:	d000      	beq.n	4b4c <_read_r+0x20>
    4b4a:	602b      	str	r3, [r5, #0]
    4b4c:	bd70      	pop	{r4, r5, r6, pc}
    4b4e:	46c0      	nop			; (mov r8, r8)
    4b50:	20000acc 	.word	0x20000acc
    4b54:	00000008 	.word	0x00000008
    4b58:	00000008 	.word	0x00000008
    4b5c:	00000008 	.word	0x00000008
    4b60:	00000008 	.word	0x00000008
    4b64:	00000008 	.word	0x00000008
    4b68:	00000008 	.word	0x00000008
    4b6c:	00000008 	.word	0x00000008
    4b70:	00000008 	.word	0x00000008
    4b74:	00000010 	.word	0x00000010
    4b78:	00000010 	.word	0x00000010
    4b7c:	00000010 	.word	0x00000010
    4b80:	00000010 	.word	0x00000010
    4b84:	00000010 	.word	0x00000010
    4b88:	00000010 	.word	0x00000010
    4b8c:	00000010 	.word	0x00000010
    4b90:	00000010 	.word	0x00000010
    4b94:	00000018 	.word	0x00000018
    4b98:	00000018 	.word	0x00000018
    4b9c:	00000018 	.word	0x00000018
    4ba0:	00000018 	.word	0x00000018
    4ba4:	00000018 	.word	0x00000018
    4ba8:	00000018 	.word	0x00000018
    4bac:	00000018 	.word	0x00000018
    4bb0:	00000018 	.word	0x00000018
    4bb4:	00000020 	.word	0x00000020
    4bb8:	00000020 	.word	0x00000020
    4bbc:	00000020 	.word	0x00000020
    4bc0:	00000020 	.word	0x00000020
    4bc4:	00000020 	.word	0x00000020
    4bc8:	00000020 	.word	0x00000020
    4bcc:	00000020 	.word	0x00000020
    4bd0:	00000020 	.word	0x00000020
    4bd4:	00000028 	.word	0x00000028
    4bd8:	00000028 	.word	0x00000028
    4bdc:	00000028 	.word	0x00000028
    4be0:	00000028 	.word	0x00000028
    4be4:	00000028 	.word	0x00000028
    4be8:	00000028 	.word	0x00000028
    4bec:	00000028 	.word	0x00000028
    4bf0:	00000028 	.word	0x00000028
    4bf4:	00000030 	.word	0x00000030
    4bf8:	00000030 	.word	0x00000030
    4bfc:	00000030 	.word	0x00000030
    4c00:	00000030 	.word	0x00000030
    4c04:	00000030 	.word	0x00000030
    4c08:	00000030 	.word	0x00000030
    4c0c:	00000030 	.word	0x00000030
    4c10:	00000030 	.word	0x00000030
    4c14:	00000038 	.word	0x00000038
    4c18:	00000038 	.word	0x00000038
    4c1c:	00000038 	.word	0x00000038
    4c20:	00000038 	.word	0x00000038
    4c24:	00000038 	.word	0x00000038
    4c28:	00000038 	.word	0x00000038
    4c2c:	00000038 	.word	0x00000038
    4c30:	00000038 	.word	0x00000038
    4c34:	00000040 	.word	0x00000040
    4c38:	00000040 	.word	0x00000040
    4c3c:	00000040 	.word	0x00000040
    4c40:	00000040 	.word	0x00000040
    4c44:	00000040 	.word	0x00000040
    4c48:	00000040 	.word	0x00000040
    4c4c:	00000040 	.word	0x00000040
    4c50:	00000040 	.word	0x00000040
    4c54:	00000048 	.word	0x00000048
    4c58:	00000048 	.word	0x00000048
    4c5c:	00000048 	.word	0x00000048
    4c60:	00000048 	.word	0x00000048
    4c64:	00000048 	.word	0x00000048
    4c68:	00000048 	.word	0x00000048
    4c6c:	00000048 	.word	0x00000048
    4c70:	00000048 	.word	0x00000048
    4c74:	0000004f 	.word	0x0000004f
    4c78:	0000004f 	.word	0x0000004f
    4c7c:	0000004f 	.word	0x0000004f
    4c80:	0000004f 	.word	0x0000004f
    4c84:	0000004f 	.word	0x0000004f
    4c88:	0000004f 	.word	0x0000004f
    4c8c:	0000004f 	.word	0x0000004f
    4c90:	0000004f 	.word	0x0000004f
    4c94:	000a000a 	.word	0x000a000a
    4c98:	00140014 	.word	0x00140014
    4c9c:	00000014 	.word	0x00000014
    4ca0:	000a017c 	.word	0x000a017c
    4ca4:	000a017c 	.word	0x000a017c
    4ca8:	00140186 	.word	0x00140186
    4cac:	00140000 	.word	0x00140000
    4cb0:	0122000a 	.word	0x0122000a
    4cb4:	00140186 	.word	0x00140186
    4cb8:	01220190 	.word	0x01220190
    4cbc:	0122000a 	.word	0x0122000a
    4cc0:	012c0014 	.word	0x012c0014
    4cc4:	0122017c 	.word	0x0122017c
    4cc8:	012c0186 	.word	0x012c0186
    4ccc:	012c0014 	.word	0x012c0014
    4cd0:	0136017c 	.word	0x0136017c
    4cd4:	001e0000 	.word	0x001e0000
    4cd8:	00280032 	.word	0x00280032
    4cdc:	00320000 	.word	0x00320000
    4ce0:	003c0032 	.word	0x003c0032
    4ce4:	001e0050 	.word	0x001e0050
    4ce8:	00280118 	.word	0x00280118
    4cec:	00280046 	.word	0x00280046
    4cf0:	00be0050 	.word	0x00be0050
    4cf4:	00be0050 	.word	0x00be0050
    4cf8:	00c80118 	.word	0x00c80118
    4cfc:	00280118 	.word	0x00280118
    4d00:	00be0122 	.word	0x00be0122
    4d04:	00460000 	.word	0x00460000
    4d08:	00500032 	.word	0x00500032
    4d0c:	005a0000 	.word	0x005a0000
    4d10:	00640032 	.word	0x00640032
    4d14:	006e0000 	.word	0x006e0000
    4d18:	00780032 	.word	0x00780032
    4d1c:	00820000 	.word	0x00820000
    4d20:	008c0032 	.word	0x008c0032
    4d24:	00960000 	.word	0x00960000
    4d28:	00a00032 	.word	0x00a00032
    4d2c:	00aa0000 	.word	0x00aa0000
    4d30:	00b40032 	.word	0x00b40032
    4d34:	00be0000 	.word	0x00be0000
    4d38:	00c80032 	.word	0x00c80032
    4d3c:	00c8012c 	.word	0x00c8012c
    4d40:	00d20172 	.word	0x00d20172
    4d44:	00dc001e 	.word	0x00dc001e
    4d48:	00e60172 	.word	0x00e60172
    4d4c:	00f0001e 	.word	0x00f0001e
    4d50:	00fa0172 	.word	0x00fa0172
    4d54:	0104001e 	.word	0x0104001e
    4d58:	010e0172 	.word	0x010e0172
    4d5c:	0118005a 	.word	0x0118005a
    4d60:	0122012c 	.word	0x0122012c
    4d64:	82be50b4 	.word	0x82be50b4
    4d68:	8cbe82aa 	.word	0x8cbe82aa
    4d6c:	64963c8c 	.word	0x64963c8c
    4d70:	64dc3cd2 	.word	0x64dc3cd2
    4d74:	a08c9682 	.word	0xa08c9682
    4d78:	aadca08c 	.word	0xaadca08c
    4d7c:	a0e696dc 	.word	0xa0e696dc
    4d80:	50f03c78 	.word	0x50f03c78
    4d84:	5a78466e 	.word	0x5a78466e
    4d88:	aaaa3c96 	.word	0xaaaa3c96
    4d8c:	a0dc3cc8 	.word	0xa0dc3cc8
    4d90:	aae6a0d2 	.word	0xaae6a0d2
    4d94:	6e617254 	.word	0x6e617254
    4d98:	69722073 	.word	0x69722073
    4d9c:	73746867 	.word	0x73746867
    4da0:	65726120 	.word	0x65726120
    4da4:	6d756820 	.word	0x6d756820
    4da8:	72206e61 	.word	0x72206e61
    4dac:	74686769 	.word	0x74686769
    4db0:	00000073 	.word	0x00000073
    4db4:	355e3331 	.word	0x355e3331
    4db8:	31202b20 	.word	0x31202b20
    4dbc:	20355e36 	.word	0x20355e36
    4dc0:	3731203d 	.word	0x3731203d
    4dc4:	0000355e 	.word	0x0000355e
    4dc8:	69746552 	.word	0x69746552
    4dcc:	616c7563 	.word	0x616c7563
    4dd0:	676e6974 	.word	0x676e6974
    4dd4:	6c705320 	.word	0x6c705320
    4dd8:	73656e69 	.word	0x73656e69
    4ddc:	00000000 	.word	0x00000000
    4de0:	6c6f6976 	.word	0x6c6f6976
    4de4:	65636e65 	.word	0x65636e65
    4de8:	726f772e 	.word	0x726f772e
    4dec:	0000736b 	.word	0x0000736b
    4df0:	73626154 	.word	0x73626154
    4df4:	00000021 	.word	0x00000021
    4df8:	6c6c694b 	.word	0x6c6c694b
    4dfc:	6c694220 	.word	0x6c694220
    4e00:	6e6f696c 	.word	0x6e6f696c
    4e04:	65726961 	.word	0x65726961
    4e08:	61282073 	.word	0x61282073
    4e0c:	5420646e 	.word	0x5420646e
    4e10:	6c6c6972 	.word	0x6c6c6972
    4e14:	616e6f69 	.word	0x616e6f69
    4e18:	29657269 	.word	0x29657269
    4e1c:	00000000 	.word	0x00000000
    4e20:	65746e49 	.word	0x65746e49
    4e24:	74736572 	.word	0x74736572
    4e28:	206e6920 	.word	0x206e6920
    4e2c:	68636574 	.word	0x68636574
    4e30:	6f6c6f6e 	.word	0x6f6c6f6e
    4e34:	69207967 	.word	0x69207967
    4e38:	6f6e2073 	.word	0x6f6e2073
    4e3c:	20612074 	.word	0x20612074
    4e40:	73726570 	.word	0x73726570
    4e44:	6c616e6f 	.word	0x6c616e6f
    4e48:	00797469 	.word	0x00797469
    4e4c:	50203031 	.word	0x50203031
    4e50:	544e4952 	.word	0x544e4952
    4e54:	52484320 	.word	0x52484320
    4e58:	30322824 	.word	0x30322824
    4e5c:	2b352e35 	.word	0x2b352e35
    4e60:	28444e52 	.word	0x28444e52
    4e64:	3b292931 	.word	0x3b292931
    4e68:	47203a20 	.word	0x47203a20
    4e6c:	204f544f 	.word	0x204f544f
    4e70:	00003031 	.word	0x00003031
    4e74:	67206f4e 	.word	0x67206f4e
    4e78:	2e73646f 	.word	0x2e73646f
    4e7c:	206f4e20 	.word	0x206f4e20
    4e80:	7473616d 	.word	0x7473616d
    4e84:	2e737265 	.word	0x2e737265
    4e88:	206f4e20 	.word	0x206f4e20
    4e8c:	65747865 	.word	0x65747865
    4e90:	6c616e72 	.word	0x6c616e72
    4e94:	62696c20 	.word	0x62696c20
    4e98:	69726172 	.word	0x69726172
    4e9c:	002e7365 	.word	0x002e7365
    4ea0:	6c6c694b 	.word	0x6c6c694b
    4ea4:	7a614e20 	.word	0x7a614e20
    4ea8:	00007369 	.word	0x00007369
    4eac:	6e616954 	.word	0x6e616954
    4eb0:	656d6e61 	.word	0x656d6e61
    4eb4:	7153206e 	.word	0x7153206e
    4eb8:	65726175 	.word	0x65726175
    4ebc:	38393120 	.word	0x38393120
    4ec0:	00000039 	.word	0x00000039
    4ec4:	72656d41 	.word	0x72656d41
    4ec8:	20616369 	.word	0x20616369
    4ecc:	20736177 	.word	0x20736177
    4ed0:	6e756f66 	.word	0x6e756f66
    4ed4:	20646564 	.word	0x20646564
    4ed8:	73206e6f 	.word	0x73206e6f
    4edc:	6576616c 	.word	0x6576616c
    4ee0:	00007972 	.word	0x00007972
    4ee4:	72656854 	.word	0x72656854
    4ee8:	73692065 	.word	0x73692065
    4eec:	6c6e6f20 	.word	0x6c6e6f20
    4ef0:	61632079 	.word	0x61632079
    4ef4:	61746970 	.word	0x61746970
    4ef8:	6e61206c 	.word	0x6e61206c
    4efc:	616c2064 	.word	0x616c2064
    4f00:	00726f62 	.word	0x00726f62
    4f04:	6f636e45 	.word	0x6f636e45
    4f08:	67617275 	.word	0x67617275
    4f0c:	735f2065 	.word	0x735f2065
    4f10:	656d6d79 	.word	0x656d6d79
    4f14:	63697274 	.word	0x63697274
    4f18:	6c63205f 	.word	0x6c63205f
    4f1c:	20737361 	.word	0x20737361
    4f20:	66726177 	.word	0x66726177
    4f24:	00657261 	.word	0x00657261
    4f28:	52554324 	.word	0x52554324
    4f2c:	544e4552 	.word	0x544e4552
    4f30:	4d454d5f 	.word	0x4d454d5f
    4f34:	00000045 	.word	0x00000045
    4f38:	694e2041 	.word	0x694e2041
    4f3c:	54206563 	.word	0x54206563
    4f40:	00005954 	.word	0x00005954
    4f44:	78696e55 	.word	0x78696e55
    4f48:	6f706520 	.word	0x6f706520
    4f4c:	6d206863 	.word	0x6d206863
    4f50:	73756e69 	.word	0x73756e69
    4f54:	46783020 	.word	0x46783020
    4f58:	61642046 	.word	0x61642046
    4f5c:	00007379 	.word	0x00007379
    4f60:	3d202069 	.word	0x3d202069
    4f64:	35783020 	.word	0x35783020
    4f68:	35373366 	.word	0x35373366
    4f6c:	20666439 	.word	0x20666439
    4f70:	2028202d 	.word	0x2028202d
    4f74:	3e3e2069 	.word	0x3e3e2069
    4f78:	29203120 	.word	0x29203120
    4f7c:	0000003b 	.word	0x0000003b
    4f80:	42414341 	.word	0x42414341
    4f84:	00000000 	.word	0x00000000
    4f88:	63666544 	.word	0x63666544
    4f8c:	73276e6f 	.word	0x73276e6f
    4f90:	6e616320 	.word	0x6e616320
    4f94:	656c6563 	.word	0x656c6563
    4f98:	00002e64 	.word	0x00002e64
    4f9c:	73746152 	.word	0x73746152
    4fa0:	7473656e 	.word	0x7473656e
    4fa4:	6f4e203a 	.word	0x6f4e203a
    4fa8:	6e696874 	.word	0x6e696874
    4fac:	6f542067 	.word	0x6f542067
    4fb0:	216f4420 	.word	0x216f4420
    4fb4:	00000000 	.word	0x00000000
    4fb8:	68207449 	.word	0x68207449
    4fbc:	36207361 	.word	0x36207361
    4fc0:	656b2039 	.word	0x656b2039
    4fc4:	002e7379 	.word	0x002e7379
    4fc8:	61636542 	.word	0x61636542
    4fcc:	20657375 	.word	0x20657375
    4fd0:	342d5456 	.word	0x342d5456
    4fd4:	77203032 	.word	0x77203032
    4fd8:	61207361 	.word	0x61207361
    4fdc:	6165726c 	.word	0x6165726c
    4fe0:	74207964 	.word	0x74207964
    4fe4:	6e656b61 	.word	0x6e656b61
    4fe8:	00000000 	.word	0x00000000
    4fec:	706d6f43 	.word	0x706d6f43
    4ff0:	73736572 	.word	0x73736572
    4ff4:	206e6f69 	.word	0x206e6f69
    4ff8:	6f676c61 	.word	0x6f676c61
    4ffc:	68746972 	.word	0x68746972
    5000:	6162206d 	.word	0x6162206d
    5004:	20646573 	.word	0x20646573
    5008:	42206e6f 	.word	0x42206e6f
    500c:	28205042 	.word	0x28205042
    5010:	37393931 	.word	0x37393931
    5014:	00000029 	.word	0x00000029
    5018:	63616554 	.word	0x63616554
    501c:	65682068 	.word	0x65682068
    5020:	68746c61 	.word	0x68746c61
    5024:	736e6920 	.word	0x736e6920
    5028:	6e617275 	.word	0x6e617275
    502c:	70206563 	.word	0x70206563
    5030:	69766f72 	.word	0x69766f72
    5034:	73726564 	.word	0x73726564
    5038:	206f7420 	.word	0x206f7420
    503c:	65646f63 	.word	0x65646f63
    5040:	0000002e 	.word	0x0000002e
    5044:	6566664f 	.word	0x6566664f
    5048:	7669736e 	.word	0x7669736e
    504c:	61682065 	.word	0x61682065
    5050:	61776472 	.word	0x61776472
    5054:	00006572 	.word	0x00006572
    5058:	69466957 	.word	0x69466957
    505c:	20736920 	.word	0x20736920
    5060:	20746f6e 	.word	0x20746f6e
    5064:	65726977 	.word	0x65726977
    5068:	7373656c 	.word	0x7373656c
    506c:	68744520 	.word	0x68744520
    5070:	656e7265 	.word	0x656e7265
    5074:	00002174 	.word	0x00002174
    5078:	6d6d7544 	.word	0x6d6d7544
    507c:	68742079 	.word	0x68742079
    5080:	20636369 	.word	0x20636369
    5084:	65696c63 	.word	0x65696c63
    5088:	0000746e 	.word	0x0000746e
    508c:	694e2041 	.word	0x694e2041
    5090:	54206563 	.word	0x54206563
    5094:	202e5954 	.word	0x202e5954
    5098:	4f206e41 	.word	0x4f206e41
    509c:	6f43204b 	.word	0x6f43204b
    50a0:	7475706d 	.word	0x7475706d
    50a4:	002e7265 	.word	0x002e7265
    50a8:	65545355 	.word	0x65545355
    50ac:	6964656c 	.word	0x6964656c
    50b0:	6e6f646c 	.word	0x6e6f646c
    50b4:	00736369 	.word	0x00736369
    50b8:	696c6f53 	.word	0x696c6f53
    50bc:	69726164 	.word	0x69726164
    50c0:	69207974 	.word	0x69207974
    50c4:	6f6e2073 	.word	0x6f6e2073
    50c8:	20612074 	.word	0x20612074
    50cc:	2077656e 	.word	0x2077656e
    50d0:	6d617266 	.word	0x6d617266
    50d4:	726f7765 	.word	0x726f7765
    50d8:	0000006b 	.word	0x0000006b
    50dc:	61657242 	.word	0x61657242
    50e0:	616f6264 	.word	0x616f6264
    50e4:	6e696472 	.word	0x6e696472
    50e8:	73492067 	.word	0x73492067
    50ec:	746f4e20 	.word	0x746f4e20
    50f0:	43204120 	.word	0x43204120
    50f4:	656d6972 	.word	0x656d6972
    50f8:	00000000 	.word	0x00000000
    50fc:	2066664f 	.word	0x2066664f
    5100:	6f207962 	.word	0x6f207962
    5104:	6520656e 	.word	0x6520656e
    5108:	726f7272 	.word	0x726f7272
    510c:	72612073 	.word	0x72612073
    5110:	6f632065 	.word	0x6f632065
    5114:	6e6f6d6d 	.word	0x6e6f6d6d
    5118:	00000000 	.word	0x00000000
    511c:	00000ae2 	.word	0x00000ae2
    5120:	00000d2e 	.word	0x00000d2e
    5124:	00000d2e 	.word	0x00000d2e
    5128:	00000d2e 	.word	0x00000d2e
    512c:	00000d2e 	.word	0x00000d2e
    5130:	00000d2e 	.word	0x00000d2e
    5134:	00000d2e 	.word	0x00000d2e
    5138:	00000d2e 	.word	0x00000d2e
    513c:	00000d2e 	.word	0x00000d2e
    5140:	00000d2e 	.word	0x00000d2e
    5144:	00000d2e 	.word	0x00000d2e
    5148:	00000d2e 	.word	0x00000d2e
    514c:	00000d2e 	.word	0x00000d2e
    5150:	00000d2e 	.word	0x00000d2e
    5154:	00000d2e 	.word	0x00000d2e
    5158:	00000d2e 	.word	0x00000d2e
    515c:	00000aca 	.word	0x00000aca
    5160:	00000d2e 	.word	0x00000d2e
    5164:	00000d2e 	.word	0x00000d2e
    5168:	00000d2e 	.word	0x00000d2e
    516c:	00000d2e 	.word	0x00000d2e
    5170:	00000d2e 	.word	0x00000d2e
    5174:	00000d2e 	.word	0x00000d2e
    5178:	00000d2e 	.word	0x00000d2e
    517c:	00000d2e 	.word	0x00000d2e
    5180:	00000d2e 	.word	0x00000d2e
    5184:	00000d2e 	.word	0x00000d2e
    5188:	00000d2e 	.word	0x00000d2e
    518c:	00000d2e 	.word	0x00000d2e
    5190:	00000d2e 	.word	0x00000d2e
    5194:	00000d2e 	.word	0x00000d2e
    5198:	00000d2e 	.word	0x00000d2e
    519c:	00000ada 	.word	0x00000ada
    51a0:	00000d2e 	.word	0x00000d2e
    51a4:	00000d2e 	.word	0x00000d2e
    51a8:	00000d2e 	.word	0x00000d2e
    51ac:	00000d2e 	.word	0x00000d2e
    51b0:	00000d2e 	.word	0x00000d2e
    51b4:	00000d2e 	.word	0x00000d2e
    51b8:	00000d2e 	.word	0x00000d2e
    51bc:	00000d2e 	.word	0x00000d2e
    51c0:	00000d2e 	.word	0x00000d2e
    51c4:	00000d2e 	.word	0x00000d2e
    51c8:	00000d2e 	.word	0x00000d2e
    51cc:	00000d2e 	.word	0x00000d2e
    51d0:	00000d2e 	.word	0x00000d2e
    51d4:	00000d2e 	.word	0x00000d2e
    51d8:	00000d2e 	.word	0x00000d2e
    51dc:	00000ad2 	.word	0x00000ad2
    51e0:	00000aea 	.word	0x00000aea
    51e4:	00000ab2 	.word	0x00000ab2
    51e8:	00000ac2 	.word	0x00000ac2
    51ec:	00000aba 	.word	0x00000aba
    51f0:	00000002 	.word	0x00000002
    51f4:	00000003 	.word	0x00000003
    51f8:	00000028 	.word	0x00000028
    51fc:	00000029 	.word	0x00000029
    5200:	00000004 	.word	0x00000004
    5204:	00000005 	.word	0x00000005
    5208:	00000006 	.word	0x00000006
    520c:	00000007 	.word	0x00000007
    5210:	00000020 	.word	0x00000020
    5214:	00000021 	.word	0x00000021
    5218:	00000022 	.word	0x00000022
    521c:	00000023 	.word	0x00000023
    5220:	00000024 	.word	0x00000024
    5224:	00000025 	.word	0x00000025
    5228:	00000026 	.word	0x00000026
    522c:	00000027 	.word	0x00000027
    5230:	00000008 	.word	0x00000008
    5234:	00000009 	.word	0x00000009
    5238:	0000000a 	.word	0x0000000a
    523c:	0000000b 	.word	0x0000000b
    5240:	42000800 	.word	0x42000800
    5244:	42000c00 	.word	0x42000c00
    5248:	42001000 	.word	0x42001000
    524c:	42001400 	.word	0x42001400
    5250:	42001800 	.word	0x42001800
    5254:	42001c00 	.word	0x42001c00
    5258:	00001866 	.word	0x00001866
    525c:	00001862 	.word	0x00001862
    5260:	00001862 	.word	0x00001862
    5264:	000018c8 	.word	0x000018c8
    5268:	000018c8 	.word	0x000018c8
    526c:	0000187a 	.word	0x0000187a
    5270:	0000186c 	.word	0x0000186c
    5274:	00001880 	.word	0x00001880
    5278:	000018b6 	.word	0x000018b6
    527c:	00001a88 	.word	0x00001a88
    5280:	00001a68 	.word	0x00001a68
    5284:	00001a68 	.word	0x00001a68
    5288:	00001af4 	.word	0x00001af4
    528c:	00001a7a 	.word	0x00001a7a
    5290:	00001a96 	.word	0x00001a96
    5294:	00001a6c 	.word	0x00001a6c
    5298:	00001aa4 	.word	0x00001aa4
    529c:	00001ae4 	.word	0x00001ae4

000052a0 <CodePage437>:
	...
    55d8:	01000000 06186080 18608001 60800106     .....`....`....`
    55e8:	80010000 00000060 00000000 66986106     ....`........a.f
    55f8:	98618619 00000000 00000000 00000000     ..a.............
    5608:	00000000 98610600 fb8f1966 8f1966fe     ......a.f....f..
    5618:	1966fefb 00986186 00000000 80010000     ..f..a..........
    5628:	891f7e60 1f7e6082 7e649081 6080811f     `~...`~...d~...`
    5638:	00000000 04000000 29a60823 1820c106     ........#..).. .
    5648:	98200304 324c1165 00000008 00000000     .. .e.L2........
    5658:	84e08107 10420821 5a081e78 87208216     ....!.B.x..Z.. .
    5668:	0000f6d9 00000000 30c00000 00030618     ...........0....
    5678:	000000c0 00000000 00000000 00000000     ................
    5688:	40000000 03020810 0c30c000 08c00003     ...@......0.....
    5698:	10400002 00000000 01000000 02084000     ..@..........@..
    56a8:	06186000 18608001 00010208 00000040     .`....`.....@...
    56b8:	00000000 42000000 90408210 40c23fff     .......B..@..?.@
    56c8:	80104290 00000000 00000000 00000000     .B..............
    56d8:	80000208 e0bfff20 02082080 00000000     .... .... ......
	...
    56f8:	18000000 c0000306 00001040 00000000     ........@.......
    5708:	00000000 ff000000 0000e0bf 00000000     ................
	...
    572c:	030e3800 0000e080 00000000 08200000     .8............ .
    573c:	80000104 02041020 10408000 00000208     .... .....@.....
    574c:	00000000 e0030000 cc1863f8 b0c1061b     .........c......
    575c:	63061b6c f8e0c318 00000000 00000000     l..c............
    576c:	1b3c70c0 0c30c004 30c00003 e107030c     .p<...0....0....
    577c:	000000f8 00000000 c1f8e107 061860b0     .............`..
    578c:	0187030e 0f30c0c0 0000fefb 00000000     ......0.........
    579c:	fefb0f00 60c00003 80030e30 b0810618     .......`0.......
    57ac:	00f8e167 00000000 40000000 03070c30     g..........@0...
    57bc:	31649040 04fefb0f 10400001 00000000     @.d1......@.....
    57cc:	0f000000 30c0fefb c1f8e30f 061860b0     .......0.....`..
    57dc:	e167a081 000000f8 00000000 60f8e003     ..g............`
    57ec:	00030c18 1b8c3ffe 67b0c106 0000f8e1     .....?.....g....
    57fc:	00000000 fefb0f00 20608001 00010408     ..........` ....
    580c:	0c302080 00c00003 00000000 e0030000     . 0.............
    581c:	6cb0c1f8 0f3e061b c1061b8c f8e063b0     ...l..>......c..
    582c:	00000000 07000000 b0c1f8e1 7d0e3b6c     ............l;.}
    583c:	0618609f e1c70003 000000f0 00000000     .`..............
    584c:	38000000 e080030e 00000000 030e3800     ...8.........8..
    585c:	0000e080 00000000 00000000 80030e38     ............8...
    586c:	000000e0 0e380000 40c00003 00000010     ......8....@....
    587c:	30000000 03030c0c 30c0c000 0cc00003     ...0.......0....
    588c:	0c300003 00000000 00000000 00000000     ..0.............
    589c:	00fefb0f fefb0f00 00000000 00000000     ................
    58ac:	00000000 3000030c 30c0000c c0c00003     .......0...0....
    58bc:	0c0c3030 00000003 00000000 f8e10700     00..............
    58cc:	6060b0c1 01061818 00006080 00608001     ..``.....`....`.
    58dc:	00000000 e1070000 6cb0c1f8 b4d33edb     ...........l.>..
    58ec:	c036fbec f8e10730 00000000 00000000     ..6.0...........
    58fc:	0d367080 c18c3186 fefb6fb0 1b6cb0c1     .p6..1...o....l.
    590c:	00000006 00000000 61f8e30f 86196698     ...........a.f..
    591c:	19861f7e 6f986186 0000f8e3 00000000     ~....a.o........
    592c:	f8e00300 036c9861 0c30c000 98610003     ....a.l...0...a.
    593c:	00f8e063 00000000 c30f0000 861966f0     c............f..
    594c:	98618631 668c1966 f0c38f19 00000000     1.a.f..f........
    595c:	0f000000 30c0fefb fc00030c 00030c3f     .......0....?...
    596c:	fb0f30c0 000000fe 00000000 c0fefb0f     .0..............
    597c:	00030c30 030c3ffc 0c30c000 00000003     0....?....0.....
    598c:	00000000 f8e00300 036c9861 0c30c000     ........a.l...0.
    599c:	98611e7b 00f8e063 00000000 1b0c0000     {.a.c...........
    59ac:	6cb0c106 bfff061b c1061bec 061b6cb0     ...l.........l..
    59bc:	00000000 07000000 0618f8e1 18608001     ..............`.
    59cc:	60800106 e1070618 000000f8 00000000     ...`............
    59dc:	067ef801 18608001 60800106 8731c618     ..~...`....`..1.
    59ec:	0000f0c1 00000000 061b0c00 838d31c6     .............1..
    59fc:	0d38e060 31c66083 00061b8c 00000000     `.8..`.1........
    5a0c:	030c0000 0c30c000 30c00003 c000030c     ......0....0....
    5a1c:	fefb0f30 00000000 0c000000 bde38e1b     0...............
    5a2c:	c976dbed 061b6cb2 1b6cb0c1 00000006     ..v..l....l.....
    5a3c:	00000000 e1861b0c 661b6dbc 5b6cb3c9     .........m.f..l[
    5a4c:	ecb0c31e 0000061b 00000000 f8e00300     ................
    5a5c:	1b6cb0e3 6cb0c106 b8c1061b 00f8e0e3     ..l....l........
    5a6c:	00000000 e30f0000 6cb0c1f8 3ffe061b     ...........l...?
    5a7c:	c000038c 00030c30 00000000 07000000     ....0...........
    5a8c:	b0c1f8e1 c1061b6c 36db6cb0 d98731c6     ....l....l.6.1..
    5a9c:	000000f6 00000000 c1f8e30f 061b6cb0     .............l..
    5aac:	638c3ffe cc30c318 0000061b 00000000     .?.c..0.........
    5abc:	f8e10700 036cb0c1 801f7e00 b0c10618     ......l..~......
    5acc:	00f8e167 00000000 fb0f0000 000208fe     g...............
    5adc:	02082080 08208000 20800002 00000000     . .... .... ....
    5aec:	0c000000 b0c1061b c1061b6c 061b6cb0     ........l....l..
    5afc:	e063b0c1 000000f8 00000000 c1061b0c     ..c.............
    5b0c:	8c3166b0 60c31863 810d36d8 000020c0     .f1.c..`.6... ..
    5b1c:	00000000 061b0c00 1b6cb0c1 6db2c906     ..........l....m
    5b2c:	b5d576db 008c796f 00000000 1b0c0000     .v..oy..........
    5b3c:	c3186306 060cf860 63d8e003 061bcc18     .c..`......c....
    5b4c:	00000000 0c000000 1863061b 1cd860c3     ..........c..`..
    5b5c:	20c00107 80000208 00000020 00000000     ... .... .......
    5b6c:	03fefb0f 1060c000 0103060c 0f30c0c0     ......`.......0.
    5b7c:	0000fefb 00000000 f8e00300 00030c30     ............0...
    5b8c:	030c30c0 0c30c000 00f8e003 00000000     .0....0.........
    5b9c:	01060000 010c3080 030c6080 03186000     .....0...`...`..
    5bac:	0618c000 00000000 07000000 030cf0c1     ................
    5bbc:	0c30c000 30c00003 c107030c 000000f0     ..0....0........
    5bcc:	00000000 36708000 8c31860d 0060b0c1     ......p6..1...`.
	...
    5bf8:	00fefb0f 00000000 80030000 00030ce0     ................
    5c08:	00001860 00000000 00000000 00000000     `...............
	...
    5c20:	01fcf003 fef86380 f823b0c0 000000fe     .....c....#.....
    5c30:	00000000 c000030c fcf30d30 0b6cb8e1     ........0.....l.
    5c40:	6fb8e102 00007cf3 00000000 00000000     ...o.|..........
    5c50:	e1070000 6cb0c1f8 30c00003 00fef907     .......l...0....
    5c60:	00000000 18000000 67800106 b0c3f6d9     ...........g....
    5c70:	c3061bec f6d9e7b0 00000000 00000000     ................
    5c80:	00000000 c1f8e107 fefb6fb0 f10730c0     .........o...0..
    5c90:	000000fc 00000000 3138e000 c000638c     ..........81.c..
    5ca0:	00033ffc 030c30c0 0000c000 00000000     .?...0..........
    5cb0:	00000000 d9070000 8731c6f6 30c0f0c1     ..........1....0
    5cc0:	c3f8e107 f8e1e7b0 030c0000 0d30c000     ..............0.
    5cd0:	b8e178e3 c1061b6c 061b6cb0 00000000     .x..l....l......
    5ce0:	01000000 00006080 18e08003 60800106     .....`.........`
    5cf0:	e1070618 000000f8 00000000 00186000     .............`..
    5d00:	18600000 60800106 8c010618 31c61863     ..`....`....c..1
    5d10:	00f0c187 00030c00 638c30c0 0f36cc30     .........0.c0.6.
    5d20:	33ccc083 000c330c 00000000 c0030000     ...3.3..........
    5d30:	00030cf0 030c30c0 0c30c000 f8e00303     .....0....0.....
	...
    5d4c:	e70c330c 669b6dbf 1b6cb0c1 00000006     .3...m.f..l.....
	...
    5d64:	f8e20b00 1b6cb8e1 6cb0c106 0000061b     ......l....l....
	...
    5d7c:	e1070000 cc30c3f8 30c30c33 00f8e1c7     ......0.3..0....
	...
    5d94:	0b000000 b0c1f8e2 be061b6c 0002882f     ........l.../...
    5da4:	02082080 00000000 00000000 c1fae803     . ..............
    5db4:	061b6cb0 08a08f3e 20800002 00000208     .l..>...... ....
    5dc4:	00000000 7ce20800 036cbcf1 0c30c000     .......|..l...0.
    5dd4:	00000003 00000000 00000000 e1070000     ................
    5de4:	0730c0f8 8001f8e1 00f8e36f 00000000     ..0.....o.......
    5df4:	00030000 0f0c30c0 0c30f8e3 33c00003     .....0....0....3
    5e04:	30c0c00c 00000000 00000000 00000000     ...0............
    5e14:	c30c330c 0c33cc30 d9c730c3 000000f6     .3..0.3..0......
	...
    5e2c:	02020000 30e6b8c1 01073ed8 000020c0     .......0.>... ..
	...
    5e44:	1b0c0000 6cb0c106 b5d5769b 008c3166     .......l.v..f1..
	...
    5e5c:	08000000 1b441823 6ce08003 08620c11     ....#.D....l..b.
	...
    5e78:	c618630c 18638c31 60801f7e 873bc618     .c..1.c.~..`..;.
    5e88:	0000f0c1 00000000 fefb0f00 c0c00003     ................
    5e98:	0f0c3030 0000fefb 00000000 1e780000     00............x.
    5ea8:	40000208 000e3810 02081040 001e7800     ...@.8..@....x..
    5eb8:	00000000 80010000 01061860 06186080     ........`....`..
    5ec8:	18608001 60800106 00000000 0f000000     ..`....`........
    5ed8:	0208c003 0cc00003 c0000303 030f0208     ................
    5ee8:	000000c0 00000000 d9c61907 1c736cb3     .............ls.
	...
    5f20:	e0030000 6c9861f8 30c00003 6100030c     .....a.l...0...a
    5f30:	f8e06398 00000608 00000000 00669801     .c............f.
    5f40:	c30c330c 0c33cc30 d9c730c3 000000f6     .3..0.3..0......
    5f50:	00000000 0c180000 f8e10700 fb6fb0c1     ..............o.
    5f60:	0730c0fe 0000fcf1 00000000 10000000     ..0.............
    5f70:	f003000a 638001fc b0c0fef8 00fef823     .......c....#...
	...
    5f88:	030033cc 8001fcf0 c0fef863 fef823b0     .3......c....#..
	...
    5fa0:	000c6000 01fcf003 fef86380 f823b0c0     .`.......c....#.
    5fb0:	000000fe 03000000 0c482001 fcf00300     ......... H.....
    5fc0:	f8638001 23b0c0fe 0000fef8 00000000     ..c....#........
    5fd0:	00000000 e1070000 6cb0c1f8 30c00003     ...........l...0
    5fe0:	04fef907 00000003 00000000 07001420     ............ ...
    5ff0:	b0c1f8e1 c0fefb6f fcf10730 00000000     ....o...0.......
    6000:	00000000 00669801 c1f8e107 fefb6fb0     ......f......o..
    6010:	f10730c0 000000fc 00000000 18c00000     .0..............
    6020:	f8e10700 fb6fb0c1 0730c0fe 0000fcf1     ......o...0.....
    6030:	00000000 98610600 80030000 010618e0     ......a.........
    6040:	06186080 00f8e107 00000000 00000000     .`..............
    6050:	03002840 0618e080 18608001 f8e10706     @(........`.....
	...
    6068:	0018c000 18e08003 60800106 e1070618     ...........`....
    6078:	000000f8 18630000 367080c0 8c31860d     ......c...p6..1.
    6088:	fb6fb0c1 6cb0c1fe 0000061b 1c000000     ..o....l........
    6098:	70c08108 31860d36 6fb0c18c b0c1fefb     ...p6..1...o....
    60a8:	00061b6c 00000000 fb0f0606 0c30c0fe     l.............0.
    60b8:	3ffc0003 c000030c fefb0f30 00000000     ...?....0.......
	...
    60d0:	1dfe7907 fedb2786 f90733cc 000000ee     .y...'...3......
    60e0:	00000000 367ef800 9861860d e3efb1c7     ......~6..a.....
    60f0:	8c31c6f8 00001e7b 00000000 20000000     ..1.{.......... 
    6100:	e1070014 cc30c3f8 30c30c33 00f8e1c7     ......0.3..0....
    6110:	00000000 01000000 07006698 30c3f8e1     .........f.....0
    6120:	c30c33cc f8e1c730 00000000 00000000     .3..0...........
    6130:	0018c000 c3f8e107 0c33cc30 e1c730c3     ........0.3..0..
    6140:	000000f8 00000000 14200000 0c330c00     .......... ...3.
    6150:	33cc30c3 c730c30c 0000f6d9 00000000     .0.3..0.........
    6160:	60000000 330c000c cc30c30c 30c30c33     ...`...3..0.3..0
    6170:	00f6d9c7 00000000 01000000 0c006698     .............f..
    6180:	31c61863 7e18638c 1860801f c1873bc6     c..1.c.~..`..;..
    6190:	800d36f0 383ef800 c1061bec 061b6cb0     .6....>8.....l..
    61a0:	e0e3b8c1 000000f8 0c330000 c10603c0     ..........3.....
    61b0:	061b6cb0 1b6cb0c1 63b0c106 0000f8e0     .l....l....c....
    61c0:	00000000 20800002 1b8c1f7e 0c32c826     ....... ~...&.2.
    61d0:	1f7e069b 08208080 00000000 c0010000     ..~... .........
    61e0:	461873f8 3e608001 6080810f fefb0f18     .s.F..`>...`....
    61f0:	00000000 0c000000 08630419 1c506083     ..........c..`P.
    6200:	20e00302 80800f08 00000020 00000000     ... .... .......
    6210:	c1f8e30f f81b6cb0 830d30fe 0d36d878     .....l...0..x.6.
    6220:	000038e3 00000000 3ce00000 98638e3f     .8.........<?.c.
    6230:	833ffee0 1c70c000 60800106 00000018     ..?...p....`....
    6240:	00000000 03000c18 8001fcf0 c0fef863     ............c...
    6250:	fef823b0 00000000 00000000 000060c0     .#...........`..
    6260:	18e08003 60800106 e1070618 000000f8     .......`........
    6270:	00000000 18300000 f8e10700 33cc30c3     ......0......0.3
    6280:	c730c30c 0000f8e1 00000000 30000000     ..0............0
    6290:	330c0018 cc30c30c 30c30c33 00f6d9c7     ...3..0.3..0....
	...
    62a8:	0b001998 b8e1f8e2 c1061b6c 061b6cb0     ........l....l..
    62b8:	00000000 8c0c4c00 b8e1061b c9461b6d     .....L......m.F.
    62c8:	165b6cb2 1becb0c3 00000006 00000000     .l[.............
    62d8:	1e08c003 00e08308 000080ff 00000000     ................
	...
    62f0:	d8c00100 c0810d22 0080ff00 00000000     ...."...........
	...
    630c:	00030c00 030c0000 3030c000 061b0c0c     ..........00....
    631c:	00c00f3f 00000000 00000000 ff000000     ?...............
    632c:	0003ecbf 00000000 00000000 00000000     ................
	...
    6344:	18e0bfff 00000006 00000000 00000000     ................
    6354:	30c00003 c000030c e0bfff00 0c1f3800     ...0.........8..
    6364:	183060c0 0000c00f c0000300 00030c30     .`0.........0...
    6374:	bfff00c0 668001e0 fc618619 60800106     .......f..a....`
    6384:	00000000 06180000 18000000 60800106     ...............`
    6394:	80010618 00061860 00000000 00000000     ....`...........
    63a4:	90200100 80042448 00001290 00000000     .. .H$..........
	...
    63bc:	40020000 20010948 00244890 00000000     ...@H.. .H$.....
    63cc:	00000000 48024092 09004900 80240024     .....@.H.I..$.$.
    63dc:	92009004 00480240 24090049 42529200     ....@.H.I..$..RB
    63ec:	0949494a 24242529 929094a4 4a425292     JII.)%$$.....RBJ
    63fc:	29094949 ad6d2425 b6b6b5bd dbdad6f6     II.)%$m.........
    640c:	6f6b5bdb bdad6d6d f6b6b6b5 08dbdad6     .[komm..........
    641c:	20800002 80000208 00020820 02082080     ... .... .... ..
    642c:	08208000 20800002 80000208 00020820     .. .... .... ...
    643c:	3e082080 08208000 20800002 80000208     . .>.. .... ....
    644c:	00020820 02082080 f8208000 20800f02      .... .... .... 
    645c:	80000208 00020820 05142080 14504001     .... .... ...@P.
    646c:	50400105 40013d14 01051450 05145040     ..@P.=.@P...@P..
    647c:	00504001 00000000 00000000 013f0000     .@P...........?.
    648c:	05145040 14504001 50400105 00000000     @P...@P...@P....
    649c:	00000000 02f80000 0820800f 20800002     .......... .... 
    64ac:	80000208 01051420 05145040 f4504001     .... ...@P...@P.
    64bc:	50400f01 40010514 01051450 05145040     ..@P...@P...@P..
    64cc:	14504001 50400105 40010514 01051450     .@P...@P...@P...
    64dc:	05145040 00504001 00000000 00000000     @P...@P.........
    64ec:	0f01fc00 05145040 14504001 50400105     ....@P...@P...@P
    64fc:	40010514 01051450 01f45040 0000c00f     ...@P...@P......
	...
    6514:	01051400 05145040 14504001 0000003f     ....@P...@P.?...
	...
    652c:	02080000 08208000 20800002 800f02f8     ...... .... ....
	...
    6550:	003e0000 02082080 08208000 20800002     ..>.. .... .... 
    6560:	80000208 00020820 03082080 000000f0     .... .... ......
	...
    6578:	00020800 02082080 08208000 0000f03f     ..... .... .?...
	...
    659c:	80f03f00 00020820 02082080 08208000     .?.. .... .... .
    65ac:	20800002 80000208 f0030820 02082080     ... .... .... ..
    65bc:	08208000 20800002 00000000 00000000     .. .... ........
    65cc:	3f000000 000000f0 00000000 00000000     ...?............
    65dc:	00020800 02082080 08208000 2080f03f     ..... .... .?.. 
    65ec:	80000208 00020820 02082080 08208000     .... .... .... .
    65fc:	20800002 fc00c20f 00020820 02082080     ... .... .... ..
    660c:	14208000 50400105 40010514 f1051450     .. ...@P...@P...
    661c:	05145040 14504001 50400105 40010514     @P...@P...@P...@
    662c:	01051450 c4175040 0000fc01 00000000     P...@P..........
	...
    6648:	1f000000 507c01c4 40010514 01051450     ......|P...@P...
    6658:	05145040 14504001 50400105 fc0fc0f7     @P...@P...@P....
	...
    667c:	0fc0ff00 0514507c 14504001 50400105     ....|P...@P...@P
    668c:	40010514 01051450 c4175040 14507c01     ...@P...@P...|P.
    669c:	50400105 40010514 00000050 00000000     ..@P...@P.......
    66ac:	ff000000 00fc0fc0 00000000 00000000     ................
    66bc:	05140000 14504001 50400105 7c0fc0f7     .....@P...@P...|
    66cc:	01051450 05145040 08504001 20800002     P...@P...@P.... 
    66dc:	80000208 0fc0ff20 000000fc 00000000     .... ...........
    66ec:	00000000 40010514 01051450 3f145040     .......@P...@P.?
    66fc:	000000f0 00000000 00000000 00000000     ................
    670c:	00000000 ff000000 20fc0fc0 80000208     ........... ....
    671c:	00020820 00002080 00000000 00000000      .... ..........
    672c:	40f13f00 01051450 05145040 14504001     .?.@P...@P...@P.
    673c:	50400105 40010514 f0071450 00000000     ..@P...@P.......
	...
    6754:	80000208 00020820 c20f2080 0000fc00     .... .... ......
	...
    6774:	0f000000 20fc00c2 80000208 00020820     ....... .... ...
    6784:	00002080 00000000 00000000 40f10700     . .............@
    6794:	01051450 05145040 14504001 50400105     P...@P...@P...@P
    67a4:	40010514 f13f1450 05145040 14504001     ...@P.?.@P...@P.
    67b4:	50400105 80000208 00020820 c2ff2080     ..@P.... .... ..
    67c4:	0820fc0f 20800002 80000208 00020820     .. .... .... ...
    67d4:	02082080 08208000 0000003e 00000000     . .... .>.......
	...
    67f4:	80f00300 00020820 02082080 ff208000     .... .... .... .
    6804:	ffffffff ffffffff ffffffff ffffffff     ................
    6814:	ffffffff ffffffff 00000000 00000000     ................
    6824:	3f000000 ffffffff ffffffff ffffffff     ...?............
    6834:	0f3ef8ff 3ef8e083 f8e0830f e0830f3e     ..>....>....>...
    6844:	830f3ef8 0f3ef8e0 c30fe083 0f3ffcf0     .>....>.......?.
    6854:	3ffcf0c3 fcf0c30f f0c30f3f c30f3ffc     ...?....?....?..
    6864:	ff3ffcf0 ffffffff ffffffff f0ffffff     ..?.............
	...
    6888:	8f380000 c208234c e2d08330 00000000     ..8.L#..0.......
    6898:	00000000 193c0000 7c982186 8c61061f     ......<..!.|..a.
    68a8:	63c61861 000000f8 00000000 ff000000     a..c............
    68b8:	8c31c61f 01061863 06186080 0000c003     ..1.c....`......
	...
    68d4:	c69fff00 18638c31 008e33c6 00000000     ....1.c..3......
    68e4:	fb0f0000 06b080fe 0618c000 c0800103     ................
    68f4:	fefb2f20 00000000 00000000 00000000      /..............
    6904:	c3fef907 0c33cc30 e1c730c3 000000f8     ....0.3..0......
	...
    691c:	0c330c00 33cc30c3 cf30c30c 30c0f6db     ..3..0.3..0....0
    692c:	0000000c 00000000 e30c0000 618e7bbc     .............{.a
    693c:	06186080 00608001 00000000 00000000     .`....`.........
    694c:	c33f0000 30c3f8c1 c30c33cc f0e0c730     ..?....0.3..0...
    695c:	000000ff 03000000 1863f8e0 ff061bcc     ..........c.....
    696c:	061becbf e0c31863 000000f8 00000000     ....c...........
    697c:	e3fce103 061b6cb0 1b6cb0c1 c698e38e     .....l....l.....
    698c:	00008e33 00000000 fef80300 e1070318     3...............
    699c:	cc30c3f8 30c30c33 00f8e1c7 00000000     ..0.3..0........
    69ac:	00000000 02000000 a2885421 88228a28     ........!T..(.".
    69bc:	00204295 00000000 00000000 07000000     .B .............
    69cc:	860e7367 628a28a3 7367b8b0 00000070     gs...(.b..gsp...
    69dc:	00000000 60f8e003 00030c18 030c3ffc     .......`.....?..
    69ec:	03186000 0000f8e0 00000000 00000000     .`..............
    69fc:	1b8c0f3e 6cb0c106 b0c1061b c1061b6c     >......l....l...
    6a0c:	000060b0 00000000 0f000000 0000fefb     .`..............
    6a1c:	00fefb0f fefb0f00 00000000 00000000     ................
    6a2c:	02080000 ff208000 2080e0bf 03000208     ...... .... ....
    6a3c:	000000fe 00000000 3000030c 30c0000c     ...........0...0
    6a4c:	c0c00003 0c0c3030 3f000003 0000f0cf     ....00.....?....
    6a5c:	0c300000 0003030c 0330c0c0 030cc000     ..0.......0.....
    6a6c:	000c3000 00f0cf3f 88600307 00020820     .0..?.....`. ...
    6a7c:	02082080 08208000 20800002 80000208     . .... .... ....
    6a8c:	00020820 02082080 08208000 20800002      .... .... .... 
    6a9c:	80000208 09240820 00008001 18000000     .... .$.........
    6aac:	00000006 00e0bfff 00061800 00000000     ................
	...
    6ac4:	8a0f1c00 0f1c073e 00073e8a 00000000     ....>....>......
	...
    6adc:	01092460 00000080 00000000 00000000     `$..............
	...
    6b00:	80030e38 00000000 00000000 00000000     8...............
	...
    6b18:	01000000 00006080 00000000 0f000000     .....`..........
    6b28:	40000104 0d020820 0c504001 00800002     ...@ ....@P.....
    6b38:	00000000 f0c30b00 638c31c6 00000018     .........1.c....
	...
    6b54:	83070000 03070cf0 3fe0c081 00000000     ...........?....
	...
    6b78:	c30f3ffc 0f3ffcf0 0000f0c3 00000000     .?....?.........
	...
    6ba0:	0009001b 67753700 71312c6a 38000000     .....7ugj,1q...8
    6bb0:	006b6869 7a007732 6f303900 65332e6c     ihk.2w.z.90ol.3e
    6bc0:	00007861 2f3b702d 63737234 5b3d0020     ax..-p;/4rsc .=[
    6bd0:	74350027 006e7664 5c0d5d27 62667936     '.5tdvn.'].\6yfb
    6be0:	0008006d 00000a7f 0009001b 47552600     m............&UG
    6bf0:	51213c4a 2a000000 004b4849 5a005740     J<!Q...*IHK.@W.Z
    6c00:	4f292800 45233e4c 00005841 3f3a505f     .()OL>#EAX.._P:?
    6c10:	43535224 7b2b0020 54250022 004e5644     $RSC .+{".%TDVN.
    6c20:	7c0d7d7e 4246595e 0008004d 00000a7f     ~}.|^YFBM.......
    6c30:	0009001b 47553700 51312c4a 38000000     .....7UGJ,1Q...8
    6c40:	004b4849 5a005732 4f303900 45332e4c     IHK.2W.Z.90OL.3E
    6c50:	00005841 2f3b502d 43535234 5b3d0020     AX..-P;/4RSC .=[
    6c60:	54350027 004e5644 5c0d5d27 42465936     '.5TDVN.'].\6YFB
    6c70:	0008004d 00000a7f 0009001b 07150000     M...............
    6c80:	1100000a 00000000 000b0809 1a001700     ................
    6c90:	0f000000 0500000a 00001801 1f001000     ................
    6ca0:	03131200 1b000000 14000000 000e1604     ................
    6cb0:	1c001d1e 02061900 0008000d 00000a00     ................

00006cc0 <kb_col>:
    6cc0:	00010000 00020000 00040000 00080000     ................
    6cd0:	00100000 00200000 08000000              ...... .....

00006cdc <kb_col_index>:
    6cdc:	00000010 00000011 00000012 00000013     ................
    6cec:	00000014 00000015 0000001b              ............

00006cf8 <kb_row>:
    6cf8:	00000004 00000008 00000010 00000020     ............ ...
    6d08:	00000040 00000080 00000400 00000800     @...............
    6d18:	00001000 00002000                       ..... ..

00006d20 <kb_row_index>:
    6d20:	00000002 00000003 00000004 00000005     ................
    6d30:	00000006 00000007 0000000a 0000000b     ................
    6d40:	0000000c 0000000d                       ........

00006d48 <beelzebub.12955>:
    6d48:	2e002d00 44003200 88005300 f300b600     .-...2.D.S......
    6d58:	64012201 d4019201 08020702 5f023402     .".d.........4._
    6d68:	94027802 bb02a602 db02ca02 f902e802     .x..............
    6d78:	7f031f03                                ....

00006d7c <belial.12952>:
    6d7c:	f0f0f0f0 b0b0b0f0 b1b6b6b6 b7b7b1b1     ................
    6d8c:	b2b2b2b7 bfb8b8b8 b9b3b3b3 b5b5b9b9     ................
    6d9c:	babac2b5 bcbcbcba bebdbdbd f0f0f0be     ................
    6dac:	b1b1f0f0 b8b7b7b6 bcb8b8b8 c9c9bcbc     ................
    6dbc:	35c9c9c9 0000363a                       ...5:6..

00006dc4 <lucifer.12954>:
    6dc4:	0852aa55 0d0d0d01 0d343434 34340d0d     U.R.....444...44
    6dd4:	00000034 01242424 340f0f0f 08083434     4...$$$....444..
    6de4:	24240308 00780024 00007800 52aa5589     ..$$$.x..x...U.R
    6df4:	00cc0008 01707005 02030303 02d00000     .....pp.........
    6e04:	00505050 00000055                       PPP.U...

00006e0c <mulciber.12953>:
    6e0c:	03020100 02010004 00020100 01000201     ................
    6e1c:	02010002 00020100 01000201 01000002     ................
    6e2c:	02010000 00020100 01000201 03020100     ................
    6e3c:	00000004 01000100 01000302 02010002     ................
    6e4c:	00000403 00000000 000a6925 65530d0a     ........%i....Se
    6e5c:	6c616972 204b4f20 30303639 314e3820     rial OK 9600 8N1
    6e6c:	00000d0a                                ....

00006e70 <_global_impure_ptr>:
    6e70:	20000168                                h.. 

00006e74 <__sf_fake_stderr>:
	...

00006e94 <__sf_fake_stdin>:
	...

00006eb4 <__sf_fake_stdout>:
	...
    6ed4:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    6ee4:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    6ef4:	31300046 35343332 39383736 64636261     F.0123456789abcd
    6f04:	00006665                                ef..

00006f08 <_init>:
    6f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6f0a:	46c0      	nop			; (mov r8, r8)
    6f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    6f0e:	bc08      	pop	{r3}
    6f10:	469e      	mov	lr, r3
    6f12:	4770      	bx	lr

00006f14 <__init_array_start>:
    6f14:	000000dd 	.word	0x000000dd

00006f18 <_fini>:
    6f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6f1a:	46c0      	nop			; (mov r8, r8)
    6f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    6f1e:	bc08      	pop	{r3}
    6f20:	469e      	mov	lr, r3
    6f22:	4770      	bx	lr

00006f24 <__fini_array_start>:
    6f24:	000000b5 	.word	0x000000b5
