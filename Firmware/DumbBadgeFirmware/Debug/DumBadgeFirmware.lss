
DumBadgeFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000069cc  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001bc  20000000  000069cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000008fc  200001bc  00006b88  000201bc  2**2
                  ALLOC
  3 .stack        00002000  20000ab8  00007484  000201bc  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000201bc  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
  6 .debug_info   0003930d  00000000  00000000  0002023d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000533b  00000000  00000000  0005954a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000660b  00000000  00000000  0005e885  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000708  00000000  00000000  00064e90  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000860  00000000  00000000  00065598  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001ee37  00000000  00000000  00065df8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001367e  00000000  00000000  00084c2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00090127  00000000  00000000  000982ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000199c  00000000  00000000  001283d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
	// Keep the default device state after reset
	SystemCoreClock = __SYSTEM_CLOCK;
       0:	b8 2a 00 20 8d 1d 00 00 89 1d 00 00 89 1d 00 00     .*. ............
	...
	config->stopbits         = USART_STOPBITS_1;
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
	config->baudrate         = 9600;
	config->receiver_enable  = true;
	config->transmitter_enable = true;
	config->clock_polarity_inverted = false;
      2c:	89 1d 00 00 00 00 00 00 00 00 00 00 89 1d 00 00     ................
	config->use_external_clock = false;
	config->ext_clock_freq   = 0;
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
	config->generator_source = GCLK_GENERATOR_0;
      3c:	e1 2f 00 00 89 1d 00 00 89 1d 00 00 89 1d 00 00     ./..............
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
	config->receive_pulse_length                    = 19;
      4c:	89 1d 00 00 89 1d 00 00 89 1d 00 00 89 1d 00 00     ................
	usart_get_config_defaults(&config_usart);

	config_usart.baudrate    = SERCOMBAUD;
	config_usart.mux_setting = SERCOMMUX;
	config_usart.pinmux_pad0 = SERCOMPAD0;
	config_usart.pinmux_pad1 = SERCOMPAD1;
      5c:	89 1d 00 00 89 1d 00 00 a5 0f 00 00 b5 0f 00 00     ................
	config_usart.pinmux_pad2 = SERCOMPAD2;
	config_usart.pinmux_pad3 = SERCOMPAD3;

	while (usart_init(&usart_instance,	 SERCOMMODULE, &config_usart) != STATUS_OK) { }
      6c:	c5 0f 00 00 d5 0f 00 00 e5 0f 00 00 f5 0f 00 00     ................
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
      7c:	89 1d 00 00 89 1d 00 00 89 1d 00 00 89 1d 00 00     ................
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	if (usart_init(module, hw, config) == STATUS_OK) {
      8c:	89 1d 00 00 89 1d 00 00 89 1d 00 00 89 1d 00 00     ................
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
      9c:	d9 0a 00 00 89 1d 00 00 89 1d 00 00 89 1d 00 00     ................
	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
      ac:	89 1d 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
      ba:	2b00      	cmp	r3, #0
	return (usart_hw->SYNCBUSY.reg);
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
	while (usart_is_syncing(module)) {
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop

	stdio_serial_init(&usart_instance, SERCOMMODULE, &config_usart);
	usart_enable(&usart_instance);
}
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200001bc 	.word	0x200001bc
      d4:	00000000 	.word	0x00000000
      d8:	000069cc 	.word	0x000069cc

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200001c0 	.word	0x200001c0
     108:	000069cc 	.word	0x000069cc
     10c:	000069cc 	.word	0x000069cc
     110:	00000000 	.word	0x00000000

00000114 <drawKare>:
//	graphic in the entire project. Please note this is the most
//	space efficient way to do this; a 40x31 bitmap is 930 bytes,
//	whereas	this is (104*2)+28+20, or 256 bytes.
/*********************************************************************/
void drawKare(int emotion)
{
     114:	b5f0      	push	{r4, r5, r6, r7, lr}
     116:	b0c1      	sub	sp, #260	; 0x104
     118:	0007      	movs	r7, r0
	uint16_t body[104] = {10,10,20,20,20,0,380,10,380,10,390,20,0,
     11a:	22d0      	movs	r2, #208	; 0xd0
     11c:	492d      	ldr	r1, [pc, #180]	; (1d4 <drawKare+0xc0>)
     11e:	a80c      	add	r0, sp, #48	; 0x30
     120:	4b2d      	ldr	r3, [pc, #180]	; (1d8 <drawKare+0xc4>)
     122:	4798      	blx	r3
		80,190,280,200,280,40,290,190,0,70,50,80,0,90,50,100,0,110,
		50,120,0,130,50,140,0,150,50,160,0,170,50,180,0,190,50,200,
		300,200,370,210,30,220,370,230,30,240,370,250,30,260,370,
		270,90,280,300,290};
	
	uint8_t happyTerm[28] = {180,80,190,130,170,130,190,140,140,
     124:	a805      	add	r0, sp, #20
     126:	4b2d      	ldr	r3, [pc, #180]	; (1dc <drawKare+0xc8>)
     128:	001a      	movs	r2, r3
     12a:	3250      	adds	r2, #80	; 0x50
     12c:	0001      	movs	r1, r0
     12e:	ca31      	ldmia	r2!, {r0, r4, r5}
     130:	c131      	stmia	r1!, {r0, r4, r5}
     132:	ca31      	ldmia	r2!, {r0, r4, r5}
     134:	c131      	stmia	r1!, {r0, r4, r5}
     136:	6812      	ldr	r2, [r2, #0]
     138:	600a      	str	r2, [r1, #0]
		60,150,100,210,60,220,100,130,150,140,160,140,160,220,170,
	220,150,230,160};
	
	uint8_t rPiBeret[20] = {120,60,240,80,110,70,120,90,150,
     13a:	336c      	adds	r3, #108	; 0x6c
     13c:	466a      	mov	r2, sp
     13e:	cb13      	ldmia	r3!, {r0, r1, r4}
     140:	c213      	stmia	r2!, {r0, r1, r4}
     142:	cb03      	ldmia	r3!, {r0, r1}
     144:	c203      	stmia	r2!, {r0, r1}
     146:	ac0c      	add	r4, sp, #48	; 0x30
     148:	ae40      	add	r6, sp, #256	; 0x100

	
	
	for(int i = 0; i < 104; i = i+4)
	{
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
     14a:	4d25      	ldr	r5, [pc, #148]	; (1e0 <drawKare+0xcc>)
		((body[i+1]/iSv)+(offsetGraphicY)),
		((body[i+2]/iSv)+(offsetGraphicX)),
		((body[i+3]/iSv)+(offsetGraphicY)));
     14c:	88e3      	ldrh	r3, [r4, #6]
     14e:	105b      	asrs	r3, r3, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
     150:	3396      	adds	r3, #150	; 0x96
		((body[i+2]/iSv)+(offsetGraphicX)),
     152:	88a2      	ldrh	r2, [r4, #4]
     154:	1052      	asrs	r2, r2, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
     156:	322d      	adds	r2, #45	; 0x2d
     158:	32ff      	adds	r2, #255	; 0xff
		((body[i+1]/iSv)+(offsetGraphicY)),
     15a:	8861      	ldrh	r1, [r4, #2]
     15c:	1049      	asrs	r1, r1, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
     15e:	3196      	adds	r1, #150	; 0x96
     160:	8820      	ldrh	r0, [r4, #0]
     162:	1040      	asrs	r0, r0, #1
     164:	302d      	adds	r0, #45	; 0x2d
     166:	30ff      	adds	r0, #255	; 0xff
     168:	47a8      	blx	r5
     16a:	3408      	adds	r4, #8
	for(int i = 0; i < 104; i = i+4)
     16c:	42b4      	cmp	r4, r6
     16e:	d1ed      	bne.n	14c <drawKare+0x38>
	}
	switch(emotion)
     170:	2f00      	cmp	r7, #0
     172:	d003      	beq.n	17c <drawKare+0x68>
     174:	2f01      	cmp	r7, #1
     176:	d017      	beq.n	1a8 <drawKare+0x94>
		break;
		case 2:
		//make a sad terminal thing go here
		break;
	}
}
     178:	b041      	add	sp, #260	; 0x104
     17a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     17c:	ac05      	add	r4, sp, #20
     17e:	ae0c      	add	r6, sp, #48	; 0x30
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
     180:	4d17      	ldr	r5, [pc, #92]	; (1e0 <drawKare+0xcc>)
			((happyTerm[i+3]/iSv)+(offsetGraphicY)));
     182:	78e3      	ldrb	r3, [r4, #3]
     184:	105b      	asrs	r3, r3, #1
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
     186:	3396      	adds	r3, #150	; 0x96
			((happyTerm[i+2]/iSv)+(offsetGraphicX)),
     188:	78a2      	ldrb	r2, [r4, #2]
     18a:	1052      	asrs	r2, r2, #1
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
     18c:	322d      	adds	r2, #45	; 0x2d
     18e:	32ff      	adds	r2, #255	; 0xff
			((happyTerm[i+1]/iSv)+(offsetGraphicY)),
     190:	7861      	ldrb	r1, [r4, #1]
     192:	1049      	asrs	r1, r1, #1
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
     194:	3196      	adds	r1, #150	; 0x96
     196:	7820      	ldrb	r0, [r4, #0]
     198:	1040      	asrs	r0, r0, #1
     19a:	302d      	adds	r0, #45	; 0x2d
     19c:	30ff      	adds	r0, #255	; 0xff
     19e:	47a8      	blx	r5
     1a0:	3404      	adds	r4, #4
		for(int i = 0; i < 28; i = i+4)
     1a2:	42a6      	cmp	r6, r4
     1a4:	d1ed      	bne.n	182 <drawKare+0x6e>
     1a6:	e7e7      	b.n	178 <drawKare+0x64>
     1a8:	466c      	mov	r4, sp
     1aa:	ae05      	add	r6, sp, #20
			fillRect((
     1ac:	4d0c      	ldr	r5, [pc, #48]	; (1e0 <drawKare+0xcc>)
			((rPiBeret[i+3]/iSv)+(offsetGraphicY)));
     1ae:	78e3      	ldrb	r3, [r4, #3]
     1b0:	105b      	asrs	r3, r3, #1
			fillRect((
     1b2:	3396      	adds	r3, #150	; 0x96
			((rPiBeret[i+2]/iSv)+(offsetGraphicX)),
     1b4:	78a2      	ldrb	r2, [r4, #2]
     1b6:	1052      	asrs	r2, r2, #1
			fillRect((
     1b8:	322d      	adds	r2, #45	; 0x2d
     1ba:	32ff      	adds	r2, #255	; 0xff
			((rPiBeret[i+1]/iSv)+(offsetGraphicY)),
     1bc:	7861      	ldrb	r1, [r4, #1]
     1be:	1049      	asrs	r1, r1, #1
			fillRect((
     1c0:	3196      	adds	r1, #150	; 0x96
			(rPiBeret[i]/iSv)+(offsetGraphicX)),
     1c2:	7820      	ldrb	r0, [r4, #0]
     1c4:	1040      	asrs	r0, r0, #1
			fillRect((
     1c6:	302d      	adds	r0, #45	; 0x2d
     1c8:	30ff      	adds	r0, #255	; 0xff
     1ca:	47a8      	blx	r5
     1cc:	3404      	adds	r4, #4
		for(int i = 0; i < 20; i = i+4)
     1ce:	42b4      	cmp	r4, r6
     1d0:	d1ed      	bne.n	1ae <drawKare+0x9a>
     1d2:	e7d1      	b.n	178 <drawKare+0x64>
     1d4:	0000475c 	.word	0x0000475c
     1d8:	00003569 	.word	0x00003569
     1dc:	000047dc 	.word	0x000047dc
     1e0:	00002b35 	.word	0x00002b35

000001e4 <splashScreen>:

void splashScreen(void)
{
     1e4:	b5f0      	push	{r4, r5, r6, r7, lr}
     1e6:	46c6      	mov	lr, r8
     1e8:	b500      	push	{lr}
     1ea:	b08a      	sub	sp, #40	; 0x28
	static const char *splashText[32];
	splashText[0] = "Trans rights are human rights";//
     1ec:	4c51      	ldr	r4, [pc, #324]	; (334 <splashScreen+0x150>)
     1ee:	4b52      	ldr	r3, [pc, #328]	; (338 <splashScreen+0x154>)
     1f0:	6023      	str	r3, [r4, #0]
	splashText[1] = "13^5 + 16^5 = 17^5";//
     1f2:	4b52      	ldr	r3, [pc, #328]	; (33c <splashScreen+0x158>)
     1f4:	6063      	str	r3, [r4, #4]
	splashText[2] = "Reticulating Splines";//
     1f6:	4b52      	ldr	r3, [pc, #328]	; (340 <splashScreen+0x15c>)
     1f8:	60a3      	str	r3, [r4, #8]
	splashText[3] = "violence.works";//
     1fa:	4b52      	ldr	r3, [pc, #328]	; (344 <splashScreen+0x160>)
     1fc:	60e3      	str	r3, [r4, #12]
	splashText[4] = "Tabs!";//
     1fe:	4b52      	ldr	r3, [pc, #328]	; (348 <splashScreen+0x164>)
     200:	6123      	str	r3, [r4, #16]
	splashText[5] = "Kill Billionaires (and Trillionaire)";//
     202:	4b52      	ldr	r3, [pc, #328]	; (34c <splashScreen+0x168>)
     204:	6163      	str	r3, [r4, #20]
	splashText[6] = "Interest in technology is not a personality";//
     206:	4b52      	ldr	r3, [pc, #328]	; (350 <splashScreen+0x16c>)
     208:	61a3      	str	r3, [r4, #24]
	splashText[7] = "10 PRINT CHR$(205.5+RND(1)); : GOTO 10";//
     20a:	4b52      	ldr	r3, [pc, #328]	; (354 <splashScreen+0x170>)
     20c:	61e3      	str	r3, [r4, #28]
	splashText[8] = "No gods. No masters. No external libraries.";//
     20e:	4b52      	ldr	r3, [pc, #328]	; (358 <splashScreen+0x174>)
     210:	6223      	str	r3, [r4, #32]
	splashText[9] = "Kill Nazis";//
     212:	4b52      	ldr	r3, [pc, #328]	; (35c <splashScreen+0x178>)
     214:	6263      	str	r3, [r4, #36]	; 0x24
	splashText[10] = "Tiananmen Square 1989";//
     216:	4b52      	ldr	r3, [pc, #328]	; (360 <splashScreen+0x17c>)
     218:	62a3      	str	r3, [r4, #40]	; 0x28
	splashText[11] = "America was founded on slavery";
     21a:	4b52      	ldr	r3, [pc, #328]	; (364 <splashScreen+0x180>)
     21c:	62e3      	str	r3, [r4, #44]	; 0x2c
	splashText[12] = "There is only capital and labor";//
     21e:	4b52      	ldr	r3, [pc, #328]	; (368 <splashScreen+0x184>)
     220:	6323      	str	r3, [r4, #48]	; 0x30
	splashText[13] = "Encourage _symmetric_ class warfare";//
     222:	4b52      	ldr	r3, [pc, #328]	; (36c <splashScreen+0x188>)
     224:	6363      	str	r3, [r4, #52]	; 0x34
	splashText[14] = "$CURRENT_MEME";//
     226:	4b52      	ldr	r3, [pc, #328]	; (370 <splashScreen+0x18c>)
     228:	63a3      	str	r3, [r4, #56]	; 0x38
	splashText[15] = "A Nice TTY";//
     22a:	4b52      	ldr	r3, [pc, #328]	; (374 <splashScreen+0x190>)
     22c:	63e3      	str	r3, [r4, #60]	; 0x3c
	splashText[16] = "Unix epoch minus 0xFF days";//
     22e:	4b52      	ldr	r3, [pc, #328]	; (378 <splashScreen+0x194>)
     230:	6423      	str	r3, [r4, #64]	; 0x40
	splashText[17] = "i  = 0x5f3759df - ( i >> 1 );";//
     232:	4b52      	ldr	r3, [pc, #328]	; (37c <splashScreen+0x198>)
     234:	6463      	str	r3, [r4, #68]	; 0x44
	splashText[18] = "ACAB";//
     236:	4b52      	ldr	r3, [pc, #328]	; (380 <splashScreen+0x19c>)
     238:	64a3      	str	r3, [r4, #72]	; 0x48
	splashText[19] = "Defcon's canceled.";//
     23a:	4b52      	ldr	r3, [pc, #328]	; (384 <splashScreen+0x1a0>)
     23c:	64e3      	str	r3, [r4, #76]	; 0x4c
	splashText[20] = "Ratsnest: Nothing To Do!";//
     23e:	4b52      	ldr	r3, [pc, #328]	; (388 <splashScreen+0x1a4>)
     240:	6523      	str	r3, [r4, #80]	; 0x50
	splashText[21] = "It has 69 keys.";//
     242:	4b52      	ldr	r3, [pc, #328]	; (38c <splashScreen+0x1a8>)
     244:	6563      	str	r3, [r4, #84]	; 0x54
	splashText[22] = "Because VT-420 was already taken";//
     246:	4b52      	ldr	r3, [pc, #328]	; (390 <splashScreen+0x1ac>)
     248:	65a3      	str	r3, [r4, #88]	; 0x58
	splashText[23] = "Compression algorithm based on BBP (1997)";//
     24a:	4b52      	ldr	r3, [pc, #328]	; (394 <splashScreen+0x1b0>)
     24c:	65e3      	str	r3, [r4, #92]	; 0x5c
	splashText[24] = "The source of the Mississippi river is in Pennsylvania.";
     24e:	4b52      	ldr	r3, [pc, #328]	; (398 <splashScreen+0x1b4>)
     250:	6623      	str	r3, [r4, #96]	; 0x60
	splashText[25] = "Offensive hardware";//
     252:	4b52      	ldr	r3, [pc, #328]	; (39c <splashScreen+0x1b8>)
     254:	6663      	str	r3, [r4, #100]	; 0x64
	splashText[26] = "Follow World Pog Federation    @WorldPog";//
     256:	4b52      	ldr	r3, [pc, #328]	; (3a0 <splashScreen+0x1bc>)
     258:	66a3      	str	r3, [r4, #104]	; 0x68
	splashText[27] = "Dummy thicc client";//
     25a:	4b52      	ldr	r3, [pc, #328]	; (3a4 <splashScreen+0x1c0>)
     25c:	66e3      	str	r3, [r4, #108]	; 0x6c
	splashText[28] = "A Nice TTY. An OK Computer.";//
     25e:	4b52      	ldr	r3, [pc, #328]	; (3a8 <splashScreen+0x1c4>)
     260:	6723      	str	r3, [r4, #112]	; 0x70
	splashText[29] = "Ceci n'est pas une Cyberdeck (because it's not a Pelican Case)";//
     262:	4b52      	ldr	r3, [pc, #328]	; (3ac <splashScreen+0x1c8>)
     264:	6763      	str	r3, [r4, #116]	; 0x74
	splashText[30] = "Solidarity is not a new framework";//
     266:	4b52      	ldr	r3, [pc, #328]	; (3b0 <splashScreen+0x1cc>)
     268:	67a3      	str	r3, [r4, #120]	; 0x78
	splashText[31] = "Breadboarding Is Not A Crime";//
     26a:	4b52      	ldr	r3, [pc, #328]	; (3b4 <splashScreen+0x1d0>)
     26c:	67e3      	str	r3, [r4, #124]	; 0x7c
	splashText[32] = "Off by one errors are common";
     26e:	4a52      	ldr	r2, [pc, #328]	; (3b8 <splashScreen+0x1d4>)
     270:	2380      	movs	r3, #128	; 0x80
     272:	50e2      	str	r2, [r4, r3]
	
	const char *textPhrase = splashText[((rand()%32))];
     274:	4b51      	ldr	r3, [pc, #324]	; (3bc <splashScreen+0x1d8>)
     276:	4798      	blx	r3
     278:	17c3      	asrs	r3, r0, #31
     27a:	0edb      	lsrs	r3, r3, #27
     27c:	18c2      	adds	r2, r0, r3
     27e:	201f      	movs	r0, #31
     280:	4010      	ands	r0, r2
     282:	1ac0      	subs	r0, r0, r3
     284:	0080      	lsls	r0, r0, #2
     286:	5904      	ldr	r4, [r0, r4]
	char bootString[40];
	const uint32_t megaHurtz = system_gclk_gen_get_hz(0);
     288:	2000      	movs	r0, #0
     28a:	4b4d      	ldr	r3, [pc, #308]	; (3c0 <splashScreen+0x1dc>)
     28c:	4798      	blx	r3
	itoa(megaHurtz,bootString,10);
     28e:	220a      	movs	r2, #10
     290:	4669      	mov	r1, sp
     292:	4b4c      	ldr	r3, [pc, #304]	; (3c4 <splashScreen+0x1e0>)
     294:	4798      	blx	r3
	//strcpy(bootString, " Hz");

	
	clearScreen();
     296:	4b4c      	ldr	r3, [pc, #304]	; (3c8 <splashScreen+0x1e4>)
     298:	4798      	blx	r3
	setColorRGB(255,255,255);
     29a:	22ff      	movs	r2, #255	; 0xff
     29c:	21ff      	movs	r1, #255	; 0xff
     29e:	20ff      	movs	r0, #255	; 0xff
     2a0:	4b4a      	ldr	r3, [pc, #296]	; (3cc <splashScreen+0x1e8>)
     2a2:	4798      	blx	r3
	
	REG_PORT_DIRTGL1 = PORT_PB31;
     2a4:	2280      	movs	r2, #128	; 0x80
     2a6:	0612      	lsls	r2, r2, #24
     2a8:	4b49      	ldr	r3, [pc, #292]	; (3d0 <splashScreen+0x1ec>)
     2aa:	601a      	str	r2, [r3, #0]
	PORT->Group[1].PINCFG[31].bit.PULLEN = 1;
     2ac:	4b49      	ldr	r3, [pc, #292]	; (3d4 <splashScreen+0x1f0>)
     2ae:	22df      	movs	r2, #223	; 0xdf
     2b0:	5c99      	ldrb	r1, [r3, r2]
     2b2:	2004      	movs	r0, #4
     2b4:	4301      	orrs	r1, r0
     2b6:	5499      	strb	r1, [r3, r2]
	PORT->Group[1].PINCFG[31].bit.INEN = 1;
     2b8:	5c99      	ldrb	r1, [r3, r2]
     2ba:	2002      	movs	r0, #2
     2bc:	4301      	orrs	r1, r0
     2be:	5499      	strb	r1, [r3, r2]
	if((PORT->Group[1].IN.reg & PORT_PB31) != 0)
     2c0:	3a3f      	subs	r2, #63	; 0x3f
     2c2:	589b      	ldr	r3, [r3, r2]
     2c4:	2b00      	cmp	r3, #0
     2c6:	db31      	blt.n	32c <splashScreen+0x148>
		//This is the 'pi' graphic; put some codes
		//here to handle setting up the uarts.
		drawKare(1);
	}
	else
	drawKare(0); //The normal graphic
     2c8:	2000      	movs	r0, #0
     2ca:	4b43      	ldr	r3, [pc, #268]	; (3d8 <splashScreen+0x1f4>)
     2cc:	4798      	blx	r3
	

	
	xCharPos = 40 - (strlen(textPhrase)/2);
     2ce:	0020      	movs	r0, r4
     2d0:	4b42      	ldr	r3, [pc, #264]	; (3dc <splashScreen+0x1f8>)
     2d2:	4698      	mov	r8, r3
     2d4:	4798      	blx	r3
     2d6:	4f42      	ldr	r7, [pc, #264]	; (3e0 <splashScreen+0x1fc>)
     2d8:	0840      	lsrs	r0, r0, #1
     2da:	2528      	movs	r5, #40	; 0x28
     2dc:	1a28      	subs	r0, r5, r0
     2de:	8038      	strh	r0, [r7, #0]
	yCharPos = 16;
     2e0:	4e40      	ldr	r6, [pc, #256]	; (3e4 <splashScreen+0x200>)
     2e2:	2310      	movs	r3, #16
     2e4:	8033      	strh	r3, [r6, #0]
	
	writeString(textPhrase);
     2e6:	0020      	movs	r0, r4
     2e8:	4c3f      	ldr	r4, [pc, #252]	; (3e8 <splashScreen+0x204>)
     2ea:	47a0      	blx	r4
	
	yCharPos = 17;
     2ec:	2311      	movs	r3, #17
     2ee:	8033      	strh	r3, [r6, #0]
	xCharPos = 40 - (strlen(bootString)/2);
     2f0:	4668      	mov	r0, sp
     2f2:	47c0      	blx	r8
     2f4:	0840      	lsrs	r0, r0, #1
     2f6:	1a2d      	subs	r5, r5, r0
     2f8:	803d      	strh	r5, [r7, #0]
	writeString(bootString);
     2fa:	4668      	mov	r0, sp
     2fc:	47a0      	blx	r4
	delay_ms(2000);
     2fe:	20fa      	movs	r0, #250	; 0xfa
     300:	00c0      	lsls	r0, r0, #3
     302:	4b3a      	ldr	r3, [pc, #232]	; (3ec <splashScreen+0x208>)
     304:	4798      	blx	r3
	clearScreen();
     306:	4b30      	ldr	r3, [pc, #192]	; (3c8 <splashScreen+0x1e4>)
     308:	4798      	blx	r3
	
	setColorRGB(0,255,0);
     30a:	2200      	movs	r2, #0
     30c:	21ff      	movs	r1, #255	; 0xff
     30e:	2000      	movs	r0, #0
     310:	4b2e      	ldr	r3, [pc, #184]	; (3cc <splashScreen+0x1e8>)
     312:	4798      	blx	r3
	setBackColorRGB(0,0,0);
     314:	2200      	movs	r2, #0
     316:	2100      	movs	r1, #0
     318:	2000      	movs	r0, #0
     31a:	4b35      	ldr	r3, [pc, #212]	; (3f0 <splashScreen+0x20c>)
     31c:	4798      	blx	r3
	
	//Setting the xChar and yChar position has to come
	//after splashScreen() and InitLCD();
	xCharPos = 0;
     31e:	2300      	movs	r3, #0
     320:	803b      	strh	r3, [r7, #0]
	yCharPos = 0;
     322:	8033      	strh	r3, [r6, #0]
	

     324:	b00a      	add	sp, #40	; 0x28
     326:	bc04      	pop	{r2}
     328:	4690      	mov	r8, r2
     32a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drawKare(1);
     32c:	2001      	movs	r0, #1
     32e:	4b2a      	ldr	r3, [pc, #168]	; (3d8 <splashScreen+0x1f4>)
     330:	4798      	blx	r3
     332:	e7cc      	b.n	2ce <splashScreen+0xea>
     334:	200001d8 	.word	0x200001d8
     338:	0000485c 	.word	0x0000485c
     33c:	0000487c 	.word	0x0000487c
     340:	00004890 	.word	0x00004890
     344:	000048a8 	.word	0x000048a8
     348:	000048b8 	.word	0x000048b8
     34c:	000048c0 	.word	0x000048c0
     350:	000048e8 	.word	0x000048e8
     354:	00004914 	.word	0x00004914
     358:	0000493c 	.word	0x0000493c
     35c:	00004968 	.word	0x00004968
     360:	00004974 	.word	0x00004974
     364:	0000498c 	.word	0x0000498c
     368:	000049ac 	.word	0x000049ac
     36c:	000049cc 	.word	0x000049cc
     370:	000049f0 	.word	0x000049f0
     374:	00004a00 	.word	0x00004a00
     378:	00004a0c 	.word	0x00004a0c
     37c:	00004a28 	.word	0x00004a28
     380:	00004a48 	.word	0x00004a48
     384:	00004a50 	.word	0x00004a50
     388:	00004a64 	.word	0x00004a64
     38c:	00004a80 	.word	0x00004a80
     390:	00004a90 	.word	0x00004a90
     394:	00004ab4 	.word	0x00004ab4
     398:	00004ae0 	.word	0x00004ae0
     39c:	00004b18 	.word	0x00004b18
     3a0:	00004b2c 	.word	0x00004b2c
     3a4:	00004b58 	.word	0x00004b58
     3a8:	00004b6c 	.word	0x00004b6c
     3ac:	00004b88 	.word	0x00004b88
     3b0:	00004bc8 	.word	0x00004bc8
     3b4:	00004bec 	.word	0x00004bec
     3b8:	00004c0c 	.word	0x00004c0c
     3bc:	00003645 	.word	0x00003645
     3c0:	00001b19 	.word	0x00001b19
     3c4:	00003561 	.word	0x00003561
     3c8:	00002c8d 	.word	0x00002c8d
     3cc:	000029f9 	.word	0x000029f9
     3d0:	4100448c 	.word	0x4100448c
     3d4:	41004400 	.word	0x41004400
     3d8:	00000115 	.word	0x00000115
     3dc:	00003829 	.word	0x00003829
     3e0:	20000298 	.word	0x20000298
     3e4:	2000029a 	.word	0x2000029a
     3e8:	00002335 	.word	0x00002335
     3ec:	00000599 	.word	0x00000599
     3f0:	00002a21 	.word	0x00002a21

000003f4 <parseRXBuffer>:

char rx_buf;
char tempCharacter;

void parseRXBuffer(void)
{
     3f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	if(rx_buf == 0x0D)  //Carriage Return  //this retorns to xcharpos = 0
     3f6:	4b50      	ldr	r3, [pc, #320]	; (538 <parseRXBuffer+0x144>)
     3f8:	7818      	ldrb	r0, [r3, #0]
     3fa:	280d      	cmp	r0, #13
     3fc:	d00a      	beq.n	414 <parseRXBuffer+0x20>
			xCharPos = 0;
			drawChar(consoleDisplay[xCharPos][yCharPos]);
			blinkCursor();
		}	
	}
	else if(rx_buf == 0x0A)	//Line Feed
     3fe:	280a      	cmp	r0, #10
     400:	d030      	beq.n	464 <parseRXBuffer+0x70>
			yCharPos++;
			drawChar(consoleDisplay[xCharPos][yCharPos]);
			blinkCursor();
		}
	}
	else if(rx_buf == 0x08)  //Backspace
     402:	2808      	cmp	r0, #8
     404:	d05c      	beq.n	4c0 <parseRXBuffer+0xcc>
		xCharPos--;
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
		drawChar(tempCharacter);
		blinkCursor();
	}
	else if(rx_buf != 0x00)
     406:	2800      	cmp	r0, #0
     408:	d000      	beq.n	40c <parseRXBuffer+0x18>
     40a:	e075      	b.n	4f8 <parseRXBuffer+0x104>
}

void clearRXBuffer(void)
{

	rx_buf = 0x00;
     40c:	2200      	movs	r2, #0
     40e:	4b4a      	ldr	r3, [pc, #296]	; (538 <parseRXBuffer+0x144>)
     410:	701a      	strb	r2, [r3, #0]
}
     412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if(yCharPos == 23)
     414:	4b49      	ldr	r3, [pc, #292]	; (53c <parseRXBuffer+0x148>)
     416:	881a      	ldrh	r2, [r3, #0]
     418:	2a17      	cmp	r2, #23
     41a:	d012      	beq.n	442 <parseRXBuffer+0x4e>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     41c:	4d48      	ldr	r5, [pc, #288]	; (540 <parseRXBuffer+0x14c>)
     41e:	4e49      	ldr	r6, [pc, #292]	; (544 <parseRXBuffer+0x150>)
     420:	8831      	ldrh	r1, [r6, #0]
     422:	004b      	lsls	r3, r1, #1
     424:	185b      	adds	r3, r3, r1
     426:	00db      	lsls	r3, r3, #3
     428:	18eb      	adds	r3, r5, r3
     42a:	5c98      	ldrb	r0, [r3, r2]
     42c:	4c46      	ldr	r4, [pc, #280]	; (548 <parseRXBuffer+0x154>)
     42e:	47a0      	blx	r4
			xCharPos = 0;
     430:	2300      	movs	r3, #0
     432:	8033      	strh	r3, [r6, #0]
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     434:	4b41      	ldr	r3, [pc, #260]	; (53c <parseRXBuffer+0x148>)
     436:	881b      	ldrh	r3, [r3, #0]
     438:	5ce8      	ldrb	r0, [r5, r3]
     43a:	47a0      	blx	r4
			blinkCursor();
     43c:	4b43      	ldr	r3, [pc, #268]	; (54c <parseRXBuffer+0x158>)
     43e:	4798      	blx	r3
     440:	e7e4      	b.n	40c <parseRXBuffer+0x18>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     442:	4d40      	ldr	r5, [pc, #256]	; (544 <parseRXBuffer+0x150>)
     444:	882a      	ldrh	r2, [r5, #0]
     446:	0053      	lsls	r3, r2, #1
     448:	189b      	adds	r3, r3, r2
     44a:	00db      	lsls	r3, r3, #3
     44c:	4a3c      	ldr	r2, [pc, #240]	; (540 <parseRXBuffer+0x14c>)
     44e:	18d3      	adds	r3, r2, r3
     450:	7dd8      	ldrb	r0, [r3, #23]
     452:	4c3d      	ldr	r4, [pc, #244]	; (548 <parseRXBuffer+0x154>)
     454:	47a0      	blx	r4
			xCharPos = 0;
     456:	2300      	movs	r3, #0
     458:	802b      	strh	r3, [r5, #0]
			drawChar(0x00);
     45a:	2000      	movs	r0, #0
     45c:	47a0      	blx	r4
			blinkCursor();
     45e:	4b3b      	ldr	r3, [pc, #236]	; (54c <parseRXBuffer+0x158>)
     460:	4798      	blx	r3
     462:	e7d3      	b.n	40c <parseRXBuffer+0x18>
		if(yCharPos == 23)
     464:	4b35      	ldr	r3, [pc, #212]	; (53c <parseRXBuffer+0x148>)
     466:	881a      	ldrh	r2, [r3, #0]
     468:	2a17      	cmp	r2, #23
     46a:	d018      	beq.n	49e <parseRXBuffer+0xaa>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     46c:	4c34      	ldr	r4, [pc, #208]	; (540 <parseRXBuffer+0x14c>)
     46e:	4d35      	ldr	r5, [pc, #212]	; (544 <parseRXBuffer+0x150>)
     470:	8829      	ldrh	r1, [r5, #0]
     472:	004b      	lsls	r3, r1, #1
     474:	185b      	adds	r3, r3, r1
     476:	00db      	lsls	r3, r3, #3
     478:	18e3      	adds	r3, r4, r3
     47a:	5c98      	ldrb	r0, [r3, r2]
     47c:	4e32      	ldr	r6, [pc, #200]	; (548 <parseRXBuffer+0x154>)
     47e:	47b0      	blx	r6
			yCharPos++;
     480:	4a2e      	ldr	r2, [pc, #184]	; (53c <parseRXBuffer+0x148>)
     482:	8813      	ldrh	r3, [r2, #0]
     484:	3301      	adds	r3, #1
     486:	b29b      	uxth	r3, r3
     488:	8013      	strh	r3, [r2, #0]
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     48a:	8829      	ldrh	r1, [r5, #0]
     48c:	004a      	lsls	r2, r1, #1
     48e:	1852      	adds	r2, r2, r1
     490:	00d2      	lsls	r2, r2, #3
     492:	18a4      	adds	r4, r4, r2
     494:	5ce0      	ldrb	r0, [r4, r3]
     496:	47b0      	blx	r6
			blinkCursor();
     498:	4b2c      	ldr	r3, [pc, #176]	; (54c <parseRXBuffer+0x158>)
     49a:	4798      	blx	r3
     49c:	e7b6      	b.n	40c <parseRXBuffer+0x18>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     49e:	4b29      	ldr	r3, [pc, #164]	; (544 <parseRXBuffer+0x150>)
     4a0:	881a      	ldrh	r2, [r3, #0]
     4a2:	0053      	lsls	r3, r2, #1
     4a4:	189b      	adds	r3, r3, r2
     4a6:	00db      	lsls	r3, r3, #3
     4a8:	4a25      	ldr	r2, [pc, #148]	; (540 <parseRXBuffer+0x14c>)
     4aa:	18d3      	adds	r3, r2, r3
     4ac:	7dd8      	ldrb	r0, [r3, #23]
     4ae:	4c26      	ldr	r4, [pc, #152]	; (548 <parseRXBuffer+0x154>)
     4b0:	47a0      	blx	r4
			newLine();
     4b2:	4b27      	ldr	r3, [pc, #156]	; (550 <parseRXBuffer+0x15c>)
     4b4:	4798      	blx	r3
			drawChar(0x00);
     4b6:	2000      	movs	r0, #0
     4b8:	47a0      	blx	r4
			blinkCursor();
     4ba:	4b24      	ldr	r3, [pc, #144]	; (54c <parseRXBuffer+0x158>)
     4bc:	4798      	blx	r3
     4be:	e7a5      	b.n	40c <parseRXBuffer+0x18>
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     4c0:	4c1f      	ldr	r4, [pc, #124]	; (540 <parseRXBuffer+0x14c>)
     4c2:	4d20      	ldr	r5, [pc, #128]	; (544 <parseRXBuffer+0x150>)
     4c4:	882a      	ldrh	r2, [r5, #0]
     4c6:	4e1d      	ldr	r6, [pc, #116]	; (53c <parseRXBuffer+0x148>)
     4c8:	8831      	ldrh	r1, [r6, #0]
     4ca:	0053      	lsls	r3, r2, #1
     4cc:	189b      	adds	r3, r3, r2
     4ce:	00db      	lsls	r3, r3, #3
     4d0:	18e3      	adds	r3, r4, r3
     4d2:	5c58      	ldrb	r0, [r3, r1]
     4d4:	4f1c      	ldr	r7, [pc, #112]	; (548 <parseRXBuffer+0x154>)
     4d6:	47b8      	blx	r7
		xCharPos--;
     4d8:	882b      	ldrh	r3, [r5, #0]
     4da:	3b01      	subs	r3, #1
     4dc:	b29b      	uxth	r3, r3
     4de:	802b      	strh	r3, [r5, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     4e0:	8831      	ldrh	r1, [r6, #0]
     4e2:	005a      	lsls	r2, r3, #1
     4e4:	18d3      	adds	r3, r2, r3
     4e6:	00db      	lsls	r3, r3, #3
     4e8:	18e3      	adds	r3, r4, r3
     4ea:	5c58      	ldrb	r0, [r3, r1]
     4ec:	4b19      	ldr	r3, [pc, #100]	; (554 <parseRXBuffer+0x160>)
     4ee:	7018      	strb	r0, [r3, #0]
		drawChar(tempCharacter);
     4f0:	47b8      	blx	r7
		blinkCursor();
     4f2:	4b16      	ldr	r3, [pc, #88]	; (54c <parseRXBuffer+0x158>)
     4f4:	4798      	blx	r3
     4f6:	e789      	b.n	40c <parseRXBuffer+0x18>
		consoleDisplay[xCharPos][yCharPos] = rx_buf;
     4f8:	4d11      	ldr	r5, [pc, #68]	; (540 <parseRXBuffer+0x14c>)
     4fa:	4c12      	ldr	r4, [pc, #72]	; (544 <parseRXBuffer+0x150>)
     4fc:	8823      	ldrh	r3, [r4, #0]
     4fe:	4e0f      	ldr	r6, [pc, #60]	; (53c <parseRXBuffer+0x148>)
     500:	8831      	ldrh	r1, [r6, #0]
     502:	005a      	lsls	r2, r3, #1
     504:	18d2      	adds	r2, r2, r3
     506:	00d2      	lsls	r2, r2, #3
     508:	18aa      	adds	r2, r5, r2
     50a:	5450      	strb	r0, [r2, r1]
		drawChar(rx_buf);
     50c:	4f0e      	ldr	r7, [pc, #56]	; (548 <parseRXBuffer+0x154>)
     50e:	47b8      	blx	r7
		xCharPos++;
     510:	8823      	ldrh	r3, [r4, #0]
     512:	3301      	adds	r3, #1
     514:	b29b      	uxth	r3, r3
     516:	8023      	strh	r3, [r4, #0]
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     518:	8831      	ldrh	r1, [r6, #0]
     51a:	005a      	lsls	r2, r3, #1
     51c:	18d3      	adds	r3, r2, r3
     51e:	00db      	lsls	r3, r3, #3
     520:	18eb      	adds	r3, r5, r3
     522:	5c58      	ldrb	r0, [r3, r1]
     524:	47b8      	blx	r7
		if(xCharPos > 79)		//END OF LINE
     526:	8823      	ldrh	r3, [r4, #0]
     528:	2b4f      	cmp	r3, #79	; 0x4f
     52a:	d800      	bhi.n	52e <parseRXBuffer+0x13a>
     52c:	e76e      	b.n	40c <parseRXBuffer+0x18>
			xCharPos--;
     52e:	3b01      	subs	r3, #1
     530:	4a04      	ldr	r2, [pc, #16]	; (544 <parseRXBuffer+0x150>)
     532:	8013      	strh	r3, [r2, #0]
     534:	e76a      	b.n	40c <parseRXBuffer+0x18>
     536:	46c0      	nop			; (mov r8, r8)
     538:	200002a9 	.word	0x200002a9
     53c:	2000029a 	.word	0x2000029a
     540:	2000030c 	.word	0x2000030c
     544:	20000298 	.word	0x20000298
     548:	00001f41 	.word	0x00001f41
     54c:	000021d9 	.word	0x000021d9
     550:	00002029 	.word	0x00002029
     554:	200002a8 	.word	0x200002a8

00000558 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     558:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     55a:	2000      	movs	r0, #0
     55c:	4b08      	ldr	r3, [pc, #32]	; (580 <delay_init+0x28>)
     55e:	4798      	blx	r3
     560:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     562:	4c08      	ldr	r4, [pc, #32]	; (584 <delay_init+0x2c>)
     564:	21fa      	movs	r1, #250	; 0xfa
     566:	0089      	lsls	r1, r1, #2
     568:	47a0      	blx	r4
     56a:	4b07      	ldr	r3, [pc, #28]	; (588 <delay_init+0x30>)
     56c:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     56e:	4907      	ldr	r1, [pc, #28]	; (58c <delay_init+0x34>)
     570:	0028      	movs	r0, r5
     572:	47a0      	blx	r4
     574:	4b06      	ldr	r3, [pc, #24]	; (590 <delay_init+0x38>)
     576:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     578:	2205      	movs	r2, #5
     57a:	4b06      	ldr	r3, [pc, #24]	; (594 <delay_init+0x3c>)
     57c:	601a      	str	r2, [r3, #0]
}
     57e:	bd70      	pop	{r4, r5, r6, pc}
     580:	00001b19 	.word	0x00001b19
     584:	0000337d 	.word	0x0000337d
     588:	20000000 	.word	0x20000000
     58c:	000f4240 	.word	0x000f4240
     590:	20000004 	.word	0x20000004
     594:	e000e010 	.word	0xe000e010

00000598 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     598:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     59a:	4b08      	ldr	r3, [pc, #32]	; (5bc <delay_cycles_ms+0x24>)
     59c:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     59e:	4a08      	ldr	r2, [pc, #32]	; (5c0 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     5a0:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     5a2:	2180      	movs	r1, #128	; 0x80
     5a4:	0249      	lsls	r1, r1, #9
	while (n--) {
     5a6:	3801      	subs	r0, #1
     5a8:	d307      	bcc.n	5ba <delay_cycles_ms+0x22>
	if (n > 0) {
     5aa:	2c00      	cmp	r4, #0
     5ac:	d0fb      	beq.n	5a6 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     5ae:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     5b0:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     5b2:	6813      	ldr	r3, [r2, #0]
     5b4:	420b      	tst	r3, r1
     5b6:	d0fc      	beq.n	5b2 <delay_cycles_ms+0x1a>
     5b8:	e7f5      	b.n	5a6 <delay_cycles_ms+0xe>
	}
}
     5ba:	bd30      	pop	{r4, r5, pc}
     5bc:	20000000 	.word	0x20000000
     5c0:	e000e010 	.word	0xe000e010

000005c4 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     5c4:	4b0c      	ldr	r3, [pc, #48]	; (5f8 <cpu_irq_enter_critical+0x34>)
     5c6:	681b      	ldr	r3, [r3, #0]
     5c8:	2b00      	cmp	r3, #0
     5ca:	d106      	bne.n	5da <cpu_irq_enter_critical+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     5cc:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     5d0:	2b00      	cmp	r3, #0
     5d2:	d007      	beq.n	5e4 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     5d4:	2200      	movs	r2, #0
     5d6:	4b09      	ldr	r3, [pc, #36]	; (5fc <cpu_irq_enter_critical+0x38>)
     5d8:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     5da:	4a07      	ldr	r2, [pc, #28]	; (5f8 <cpu_irq_enter_critical+0x34>)
     5dc:	6813      	ldr	r3, [r2, #0]
     5de:	3301      	adds	r3, #1
     5e0:	6013      	str	r3, [r2, #0]
}
     5e2:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     5e4:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     5e6:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     5ea:	2200      	movs	r2, #0
     5ec:	4b04      	ldr	r3, [pc, #16]	; (600 <cpu_irq_enter_critical+0x3c>)
     5ee:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     5f0:	3201      	adds	r2, #1
     5f2:	4b02      	ldr	r3, [pc, #8]	; (5fc <cpu_irq_enter_critical+0x38>)
     5f4:	701a      	strb	r2, [r3, #0]
     5f6:	e7f0      	b.n	5da <cpu_irq_enter_critical+0x16>
     5f8:	20000258 	.word	0x20000258
     5fc:	2000025c 	.word	0x2000025c
     600:	20000008 	.word	0x20000008

00000604 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     604:	4b08      	ldr	r3, [pc, #32]	; (628 <cpu_irq_leave_critical+0x24>)
     606:	681a      	ldr	r2, [r3, #0]
     608:	3a01      	subs	r2, #1
     60a:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     60c:	681b      	ldr	r3, [r3, #0]
     60e:	2b00      	cmp	r3, #0
     610:	d109      	bne.n	626 <cpu_irq_leave_critical+0x22>
     612:	4b06      	ldr	r3, [pc, #24]	; (62c <cpu_irq_leave_critical+0x28>)
     614:	781b      	ldrb	r3, [r3, #0]
     616:	2b00      	cmp	r3, #0
     618:	d005      	beq.n	626 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     61a:	2201      	movs	r2, #1
     61c:	4b04      	ldr	r3, [pc, #16]	; (630 <cpu_irq_leave_critical+0x2c>)
     61e:	701a      	strb	r2, [r3, #0]
     620:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     624:	b662      	cpsie	i
	}
}
     626:	4770      	bx	lr
     628:	20000258 	.word	0x20000258
     62c:	2000025c 	.word	0x2000025c
     630:	20000008 	.word	0x20000008

00000634 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     634:	b5f0      	push	{r4, r5, r6, r7, lr}
     636:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     638:	ac01      	add	r4, sp, #4
     63a:	2501      	movs	r5, #1
     63c:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     63e:	2700      	movs	r7, #0
     640:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     642:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     644:	0021      	movs	r1, r4
     646:	203e      	movs	r0, #62	; 0x3e
     648:	4e06      	ldr	r6, [pc, #24]	; (664 <system_board_init+0x30>)
     64a:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     64c:	2280      	movs	r2, #128	; 0x80
     64e:	05d2      	lsls	r2, r2, #23
     650:	4b05      	ldr	r3, [pc, #20]	; (668 <system_board_init+0x34>)
     652:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     654:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     656:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     658:	0021      	movs	r1, r4
     65a:	200f      	movs	r0, #15
     65c:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
     65e:	b003      	add	sp, #12
     660:	bdf0      	pop	{r4, r5, r6, r7, pc}
     662:	46c0      	nop			; (mov r8, r8)
     664:	00000b9d 	.word	0x00000b9d
     668:	41004480 	.word	0x41004480

0000066c <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     66c:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     66e:	2200      	movs	r2, #0
     670:	2300      	movs	r3, #0
     672:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
     674:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
     676:	2100      	movs	r1, #0
     678:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     67a:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     67c:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
     67e:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
     680:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
     682:	6082      	str	r2, [r0, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	//config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
     684:	24c0      	movs	r4, #192	; 0xc0
     686:	0164      	lsls	r4, r4, #5
     688:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     68a:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     68c:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
     68e:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
     690:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
     692:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     694:	242a      	movs	r4, #42	; 0x2a
     696:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
     698:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
     69a:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
     69c:	3c06      	subs	r4, #6
     69e:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     6a0:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     6a2:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
     6a4:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
     6a6:	232b      	movs	r3, #43	; 0x2b
     6a8:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
     6aa:	3301      	adds	r3, #1
     6ac:	54c1      	strb	r1, [r0, r3]
}
     6ae:	bd10      	pop	{r4, pc}

000006b0 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     6b0:	b5f0      	push	{r4, r5, r6, r7, lr}
     6b2:	46d6      	mov	lr, sl
     6b4:	464f      	mov	r7, r9
     6b6:	4646      	mov	r6, r8
     6b8:	b5c0      	push	{r6, r7, lr}
     6ba:	b096      	sub	sp, #88	; 0x58
     6bc:	0007      	movs	r7, r0
     6be:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     6c0:	6001      	str	r1, [r0, #0]
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     6c2:	4ac6      	ldr	r2, [pc, #792]	; (9dc <adc_init+0x32c>)
     6c4:	6a10      	ldr	r0, [r2, #32]
     6c6:	2380      	movs	r3, #128	; 0x80
     6c8:	025b      	lsls	r3, r3, #9
     6ca:	4303      	orrs	r3, r0
     6cc:	6213      	str	r3, [r2, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     6ce:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     6d0:	2005      	movs	r0, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     6d2:	07db      	lsls	r3, r3, #31
     6d4:	d505      	bpl.n	6e2 <adc_init+0x32>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
     6d6:	b016      	add	sp, #88	; 0x58
     6d8:	bc1c      	pop	{r2, r3, r4}
     6da:	4690      	mov	r8, r2
     6dc:	4699      	mov	r9, r3
     6de:	46a2      	mov	sl, r4
     6e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     6e2:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
     6e4:	3017      	adds	r0, #23
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     6e6:	079b      	lsls	r3, r3, #30
     6e8:	d4f5      	bmi.n	6d6 <adc_init+0x26>
	module_inst->reference = config->reference;
     6ea:	7873      	ldrb	r3, [r6, #1]
     6ec:	713b      	strb	r3, [r7, #4]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
     6ee:	2b00      	cmp	r3, #0
     6f0:	d104      	bne.n	6fc <adc_init+0x4c>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
     6f2:	4abb      	ldr	r2, [pc, #748]	; (9e0 <adc_init+0x330>)
     6f4:	6c13      	ldr	r3, [r2, #64]	; 0x40
     6f6:	2104      	movs	r1, #4
     6f8:	430b      	orrs	r3, r1
     6fa:	6413      	str	r3, [r2, #64]	; 0x40
		module_inst->callback[i] = NULL;
     6fc:	2300      	movs	r3, #0
     6fe:	60bb      	str	r3, [r7, #8]
     700:	60fb      	str	r3, [r7, #12]
     702:	613b      	str	r3, [r7, #16]
	module_inst->registered_callback_mask = 0;
     704:	76bb      	strb	r3, [r7, #26]
	module_inst->enabled_callback_mask = 0;
     706:	76fb      	strb	r3, [r7, #27]
	module_inst->remaining_conversions = 0;
     708:	833b      	strh	r3, [r7, #24]
	module_inst->job_status = STATUS_OK;
     70a:	773b      	strb	r3, [r7, #28]
	_adc_instances[0] = module_inst;
     70c:	4bb5      	ldr	r3, [pc, #724]	; (9e4 <adc_init+0x334>)
     70e:	601f      	str	r7, [r3, #0]
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
     710:	232a      	movs	r3, #42	; 0x2a
     712:	5cf3      	ldrb	r3, [r6, r3]
     714:	2b00      	cmp	r3, #0
     716:	d105      	bne.n	724 <adc_init+0x74>
     718:	7d33      	ldrb	r3, [r6, #20]
     71a:	2b00      	cmp	r3, #0
     71c:	d102      	bne.n	724 <adc_init+0x74>
		module_inst->software_trigger = true;
     71e:	3301      	adds	r3, #1
     720:	777b      	strb	r3, [r7, #29]
     722:	e001      	b.n	728 <adc_init+0x78>
		module_inst->software_trigger = false;
     724:	2300      	movs	r3, #0
     726:	777b      	strb	r3, [r7, #29]
	Adc *const adc_module = module_inst->hw;
     728:	683b      	ldr	r3, [r7, #0]
     72a:	4698      	mov	r8, r3
	gclk_chan_conf.source_generator = config->clock_source;
     72c:	7833      	ldrb	r3, [r6, #0]
     72e:	466a      	mov	r2, sp
     730:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
     732:	4669      	mov	r1, sp
     734:	201e      	movs	r0, #30
     736:	4bac      	ldr	r3, [pc, #688]	; (9e8 <adc_init+0x338>)
     738:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
     73a:	201e      	movs	r0, #30
     73c:	4bab      	ldr	r3, [pc, #684]	; (9ec <adc_init+0x33c>)
     73e:	4798      	blx	r3
	if (config->pin_scan.inputs_to_scan != 0) {
     740:	232c      	movs	r3, #44	; 0x2c
     742:	5cf2      	ldrb	r2, [r6, r3]
     744:	2a00      	cmp	r2, #0
     746:	d054      	beq.n	7f2 <adc_init+0x142>
		uint8_t offset = config->pin_scan.offset_start_scan;
     748:	3b01      	subs	r3, #1
     74a:	5cf5      	ldrb	r5, [r6, r3]
		uint8_t start_pin =
     74c:	7b33      	ldrb	r3, [r6, #12]
     74e:	18eb      	adds	r3, r5, r3
     750:	b2db      	uxtb	r3, r3
		uint8_t end_pin =
     752:	18d1      	adds	r1, r2, r3
		while (start_pin < end_pin) {
     754:	b2c9      	uxtb	r1, r1
     756:	428b      	cmp	r3, r1
     758:	d221      	bcs.n	79e <adc_init+0xee>
     75a:	1952      	adds	r2, r2, r5
     75c:	b2d3      	uxtb	r3, r2
     75e:	4699      	mov	r9, r3
	const uint32_t pinmapping[] = {
     760:	4ba3      	ldr	r3, [pc, #652]	; (9f0 <adc_init+0x340>)
     762:	469a      	mov	sl, r3
     764:	e003      	b.n	76e <adc_init+0xbe>
			offset++;
     766:	3501      	adds	r5, #1
     768:	b2ed      	uxtb	r5, r5
		while (start_pin < end_pin) {
     76a:	454d      	cmp	r5, r9
     76c:	d017      	beq.n	79e <adc_init+0xee>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
     76e:	240f      	movs	r4, #15
     770:	402c      	ands	r4, r5
     772:	7b33      	ldrb	r3, [r6, #12]
     774:	18e4      	adds	r4, r4, r3
	const uint32_t pinmapping[] = {
     776:	2250      	movs	r2, #80	; 0x50
     778:	499e      	ldr	r1, [pc, #632]	; (9f4 <adc_init+0x344>)
     77a:	a802      	add	r0, sp, #8
     77c:	47d0      	blx	sl
	if (pin <= ADC_EXTCHANNEL_MSB) {
     77e:	2c13      	cmp	r4, #19
     780:	d8f1      	bhi.n	766 <adc_init+0xb6>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     782:	00a4      	lsls	r4, r4, #2
     784:	ab02      	add	r3, sp, #8
     786:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     788:	a901      	add	r1, sp, #4
     78a:	2300      	movs	r3, #0
     78c:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     78e:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     790:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     792:	3301      	adds	r3, #1
     794:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     796:	b2c0      	uxtb	r0, r0
     798:	4b97      	ldr	r3, [pc, #604]	; (9f8 <adc_init+0x348>)
     79a:	4798      	blx	r3
     79c:	e7e3      	b.n	766 <adc_init+0xb6>
		_adc_configure_ain_pin(config->negative_input);
     79e:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     7a0:	2250      	movs	r2, #80	; 0x50
     7a2:	4994      	ldr	r1, [pc, #592]	; (9f4 <adc_init+0x344>)
     7a4:	a802      	add	r0, sp, #8
     7a6:	4b92      	ldr	r3, [pc, #584]	; (9f0 <adc_init+0x340>)
     7a8:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     7aa:	2c13      	cmp	r4, #19
     7ac:	d913      	bls.n	7d6 <adc_init+0x126>
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
     7ae:	7d73      	ldrb	r3, [r6, #21]
     7b0:	009b      	lsls	r3, r3, #2
     7b2:	b2db      	uxtb	r3, r3
     7b4:	4642      	mov	r2, r8
     7b6:	7013      	strb	r3, [r2, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     7b8:	7db3      	ldrb	r3, [r6, #22]
     7ba:	01db      	lsls	r3, r3, #7
     7bc:	7872      	ldrb	r2, [r6, #1]
     7be:	4313      	orrs	r3, r2
     7c0:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
     7c2:	4642      	mov	r2, r8
     7c4:	7053      	strb	r3, [r2, #1]
	switch (config->resolution) {
     7c6:	7933      	ldrb	r3, [r6, #4]
     7c8:	2b34      	cmp	r3, #52	; 0x34
     7ca:	d900      	bls.n	7ce <adc_init+0x11e>
     7cc:	e17b      	b.n	ac6 <adc_init+0x416>
     7ce:	009b      	lsls	r3, r3, #2
     7d0:	4a8a      	ldr	r2, [pc, #552]	; (9fc <adc_init+0x34c>)
     7d2:	58d3      	ldr	r3, [r2, r3]
     7d4:	469f      	mov	pc, r3
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     7d6:	00a4      	lsls	r4, r4, #2
     7d8:	ab02      	add	r3, sp, #8
     7da:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     7dc:	a901      	add	r1, sp, #4
     7de:	2300      	movs	r3, #0
     7e0:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     7e2:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     7e4:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     7e6:	3301      	adds	r3, #1
     7e8:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     7ea:	b2c0      	uxtb	r0, r0
     7ec:	4b82      	ldr	r3, [pc, #520]	; (9f8 <adc_init+0x348>)
     7ee:	4798      	blx	r3
     7f0:	e7dd      	b.n	7ae <adc_init+0xfe>
		_adc_configure_ain_pin(config->positive_input);
     7f2:	7b34      	ldrb	r4, [r6, #12]
	const uint32_t pinmapping[] = {
     7f4:	2250      	movs	r2, #80	; 0x50
     7f6:	497f      	ldr	r1, [pc, #508]	; (9f4 <adc_init+0x344>)
     7f8:	a802      	add	r0, sp, #8
     7fa:	4b7d      	ldr	r3, [pc, #500]	; (9f0 <adc_init+0x340>)
     7fc:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     7fe:	2c13      	cmp	r4, #19
     800:	d915      	bls.n	82e <adc_init+0x17e>
		_adc_configure_ain_pin(config->negative_input);
     802:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     804:	2250      	movs	r2, #80	; 0x50
     806:	497b      	ldr	r1, [pc, #492]	; (9f4 <adc_init+0x344>)
     808:	a802      	add	r0, sp, #8
     80a:	4b79      	ldr	r3, [pc, #484]	; (9f0 <adc_init+0x340>)
     80c:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     80e:	2c13      	cmp	r4, #19
     810:	d8cd      	bhi.n	7ae <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     812:	00a4      	lsls	r4, r4, #2
     814:	ab02      	add	r3, sp, #8
     816:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     818:	a901      	add	r1, sp, #4
     81a:	2300      	movs	r3, #0
     81c:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     81e:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     820:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     822:	3301      	adds	r3, #1
     824:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     826:	b2c0      	uxtb	r0, r0
     828:	4b73      	ldr	r3, [pc, #460]	; (9f8 <adc_init+0x348>)
     82a:	4798      	blx	r3
     82c:	e7bf      	b.n	7ae <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     82e:	00a4      	lsls	r4, r4, #2
     830:	ab02      	add	r3, sp, #8
     832:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     834:	a901      	add	r1, sp, #4
     836:	2300      	movs	r3, #0
     838:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     83a:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     83c:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     83e:	3301      	adds	r3, #1
     840:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     842:	b2c0      	uxtb	r0, r0
     844:	4b6c      	ldr	r3, [pc, #432]	; (9f8 <adc_init+0x348>)
     846:	4798      	blx	r3
     848:	e7db      	b.n	802 <adc_init+0x152>
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     84a:	2304      	movs	r3, #4
		resolution = ADC_RESOLUTION_16BIT;
     84c:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_4;
     84e:	2102      	movs	r1, #2
     850:	e01a      	b.n	888 <adc_init+0x1d8>
		adjres = config->divide_result;
     852:	7c71      	ldrb	r1, [r6, #17]
		accumulate = config->accumulate_samples;
     854:	7c33      	ldrb	r3, [r6, #16]
		resolution = ADC_RESOLUTION_16BIT;
     856:	2410      	movs	r4, #16
     858:	e016      	b.n	888 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     85a:	2306      	movs	r3, #6
		resolution = ADC_RESOLUTION_16BIT;
     85c:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     85e:	2101      	movs	r1, #1
     860:	e012      	b.n	888 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     862:	2308      	movs	r3, #8
		resolution = ADC_RESOLUTION_16BIT;
     864:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     866:	2100      	movs	r1, #0
     868:	e00e      	b.n	888 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     86a:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_8BIT;
     86c:	2430      	movs	r4, #48	; 0x30
	uint8_t adjres = 0;
     86e:	2100      	movs	r1, #0
     870:	e00a      	b.n	888 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     872:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_10BIT;
     874:	2420      	movs	r4, #32
	uint8_t adjres = 0;
     876:	2100      	movs	r1, #0
     878:	e006      	b.n	888 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     87a:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_12BIT;
     87c:	2400      	movs	r4, #0
	uint8_t adjres = 0;
     87e:	2100      	movs	r1, #0
     880:	e002      	b.n	888 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     882:	2302      	movs	r3, #2
		resolution = ADC_RESOLUTION_16BIT;
     884:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     886:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     888:	0109      	lsls	r1, r1, #4
     88a:	2270      	movs	r2, #112	; 0x70
     88c:	400a      	ands	r2, r1
     88e:	4313      	orrs	r3, r2
     890:	4642      	mov	r2, r8
     892:	7093      	strb	r3, [r2, #2]
	if (config->sample_length > 63) {
     894:	7df3      	ldrb	r3, [r6, #23]
		return STATUS_ERR_INVALID_ARG;
     896:	2017      	movs	r0, #23
	if (config->sample_length > 63) {
     898:	2b3f      	cmp	r3, #63	; 0x3f
     89a:	d900      	bls.n	89e <adc_init+0x1ee>
     89c:	e71b      	b.n	6d6 <adc_init+0x26>
		adc_module->SAMPCTRL.reg =
     89e:	70d3      	strb	r3, [r2, #3]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     8a0:	683a      	ldr	r2, [r7, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     8a2:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     8a4:	b25b      	sxtb	r3, r3
     8a6:	2b00      	cmp	r3, #0
     8a8:	dbfb      	blt.n	8a2 <adc_init+0x1f2>
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
     8aa:	7cf3      	ldrb	r3, [r6, #19]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     8ac:	8872      	ldrh	r2, [r6, #2]
     8ae:	4313      	orrs	r3, r2
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     8b0:	2224      	movs	r2, #36	; 0x24
     8b2:	5cb2      	ldrb	r2, [r6, r2]
     8b4:	00d2      	lsls	r2, r2, #3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     8b6:	4313      	orrs	r3, r2
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
     8b8:	7d32      	ldrb	r2, [r6, #20]
     8ba:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     8bc:	4313      	orrs	r3, r2
     8be:	7cb2      	ldrb	r2, [r6, #18]
     8c0:	0052      	lsls	r2, r2, #1
     8c2:	4313      	orrs	r3, r2
     8c4:	4323      	orrs	r3, r4
	adc_module->CTRLB.reg =
     8c6:	4642      	mov	r2, r8
     8c8:	8093      	strh	r3, [r2, #4]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     8ca:	7e33      	ldrb	r3, [r6, #24]
     8cc:	2b00      	cmp	r3, #0
     8ce:	d020      	beq.n	912 <adc_init+0x262>
		switch (resolution) {
     8d0:	2c10      	cmp	r4, #16
     8d2:	d100      	bne.n	8d6 <adc_init+0x226>
     8d4:	e0d9      	b.n	a8a <adc_init+0x3da>
     8d6:	d800      	bhi.n	8da <adc_init+0x22a>
     8d8:	e098      	b.n	a0c <adc_init+0x35c>
     8da:	2c20      	cmp	r4, #32
     8dc:	d100      	bne.n	8e0 <adc_init+0x230>
     8de:	e0b6      	b.n	a4e <adc_init+0x39e>
     8e0:	2c30      	cmp	r4, #48	; 0x30
     8e2:	d116      	bne.n	912 <adc_init+0x262>
			if (config->differential_mode &&
     8e4:	7cf2      	ldrb	r2, [r6, #19]
     8e6:	2a00      	cmp	r2, #0
     8e8:	d00a      	beq.n	900 <adc_init+0x250>
					(config->window.window_lower_value > 127 ||
     8ea:	69f2      	ldr	r2, [r6, #28]
     8ec:	3280      	adds	r2, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
     8ee:	2017      	movs	r0, #23
			if (config->differential_mode &&
     8f0:	2aff      	cmp	r2, #255	; 0xff
     8f2:	d900      	bls.n	8f6 <adc_init+0x246>
     8f4:	e6ef      	b.n	6d6 <adc_init+0x26>
					config->window.window_lower_value < -128 ||
     8f6:	6a32      	ldr	r2, [r6, #32]
     8f8:	3280      	adds	r2, #128	; 0x80
     8fa:	2aff      	cmp	r2, #255	; 0xff
     8fc:	d900      	bls.n	900 <adc_init+0x250>
     8fe:	e6ea      	b.n	6d6 <adc_init+0x26>
				return STATUS_ERR_INVALID_ARG;
     900:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 255 ||
     902:	69f2      	ldr	r2, [r6, #28]
     904:	2aff      	cmp	r2, #255	; 0xff
     906:	dd00      	ble.n	90a <adc_init+0x25a>
     908:	e6e5      	b.n	6d6 <adc_init+0x26>
     90a:	6a32      	ldr	r2, [r6, #32]
     90c:	2aff      	cmp	r2, #255	; 0xff
     90e:	dd00      	ble.n	912 <adc_init+0x262>
     910:	e6e1      	b.n	6d6 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     912:	6839      	ldr	r1, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     914:	7e4a      	ldrb	r2, [r1, #25]
	while (adc_is_syncing(module_inst)) {
     916:	b252      	sxtb	r2, r2
     918:	2a00      	cmp	r2, #0
     91a:	dbfb      	blt.n	914 <adc_init+0x264>
	adc_module->WINCTRL.reg = config->window.window_mode;
     91c:	4642      	mov	r2, r8
     91e:	7213      	strb	r3, [r2, #8]
	Adc *const adc_module = module_inst->hw;
     920:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     922:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     924:	b25b      	sxtb	r3, r3
     926:	2b00      	cmp	r3, #0
     928:	dbfb      	blt.n	922 <adc_init+0x272>
	adc_module->WINLT.reg =
     92a:	8bb3      	ldrh	r3, [r6, #28]
     92c:	4642      	mov	r2, r8
     92e:	8393      	strh	r3, [r2, #28]
	Adc *const adc_module = module_inst->hw;
     930:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     932:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     934:	b25b      	sxtb	r3, r3
     936:	2b00      	cmp	r3, #0
     938:	dbfb      	blt.n	932 <adc_init+0x282>
	adc_module->WINUT.reg = config->window.window_upper_value <<
     93a:	8c33      	ldrh	r3, [r6, #32]
     93c:	4642      	mov	r2, r8
     93e:	8413      	strh	r3, [r2, #32]
	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
     940:	232c      	movs	r3, #44	; 0x2c
     942:	5cf3      	ldrb	r3, [r6, r3]
	if (inputs_to_scan > 0) {
     944:	2b00      	cmp	r3, #0
     946:	d005      	beq.n	954 <adc_init+0x2a4>
		inputs_to_scan--;
     948:	3b01      	subs	r3, #1
     94a:	b2db      	uxtb	r3, r3
		return STATUS_ERR_INVALID_ARG;
     94c:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     94e:	2b0f      	cmp	r3, #15
     950:	d900      	bls.n	954 <adc_init+0x2a4>
     952:	e6c0      	b.n	6d6 <adc_init+0x26>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
     954:	222b      	movs	r2, #43	; 0x2b
     956:	5cb1      	ldrb	r1, [r6, r2]
		return STATUS_ERR_INVALID_ARG;
     958:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     95a:	290f      	cmp	r1, #15
     95c:	d900      	bls.n	960 <adc_init+0x2b0>
     95e:	e6ba      	b.n	6d6 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     960:	6838      	ldr	r0, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     962:	7e42      	ldrb	r2, [r0, #25]
	while (adc_is_syncing(module_inst)) {
     964:	b252      	sxtb	r2, r2
     966:	2a00      	cmp	r2, #0
     968:	dbfb      	blt.n	962 <adc_init+0x2b2>
			config->negative_input |
     96a:	89f2      	ldrh	r2, [r6, #14]
			config->positive_input;
     96c:	7b30      	ldrb	r0, [r6, #12]
			config->negative_input |
     96e:	4302      	orrs	r2, r0
     970:	68b0      	ldr	r0, [r6, #8]
     972:	4302      	orrs	r2, r0
			(config->pin_scan.offset_start_scan <<
     974:	0509      	lsls	r1, r1, #20
			config->negative_input |
     976:	430a      	orrs	r2, r1
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     978:	041b      	lsls	r3, r3, #16
			config->negative_input |
     97a:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
     97c:	4642      	mov	r2, r8
     97e:	6113      	str	r3, [r2, #16]
	adc_module->EVCTRL.reg = config->event_action;
     980:	232a      	movs	r3, #42	; 0x2a
     982:	5cf3      	ldrb	r3, [r6, r3]
     984:	7513      	strb	r3, [r2, #20]
	adc_module->INTENCLR.reg =
     986:	230f      	movs	r3, #15
     988:	7593      	strb	r3, [r2, #22]
	if (config->correction.correction_enable){
     98a:	3315      	adds	r3, #21
     98c:	5cf3      	ldrb	r3, [r6, r3]
     98e:	2b00      	cmp	r3, #0
     990:	d012      	beq.n	9b8 <adc_init+0x308>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     992:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
     994:	4a1a      	ldr	r2, [pc, #104]	; (a00 <adc_init+0x350>)
			return STATUS_ERR_INVALID_ARG;
     996:	2017      	movs	r0, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     998:	4293      	cmp	r3, r2
     99a:	d900      	bls.n	99e <adc_init+0x2ee>
     99c:	e69b      	b.n	6d6 <adc_init+0x26>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     99e:	4642      	mov	r2, r8
     9a0:	8493      	strh	r3, [r2, #36]	; 0x24
		if (config->correction.offset_correction > 2047 ||
     9a2:	8d32      	ldrh	r2, [r6, #40]	; 0x28
     9a4:	2380      	movs	r3, #128	; 0x80
     9a6:	011b      	lsls	r3, r3, #4
     9a8:	18d3      	adds	r3, r2, r3
     9aa:	4915      	ldr	r1, [pc, #84]	; (a00 <adc_init+0x350>)
     9ac:	b29b      	uxth	r3, r3
     9ae:	428b      	cmp	r3, r1
     9b0:	d900      	bls.n	9b4 <adc_init+0x304>
     9b2:	e690      	b.n	6d6 <adc_init+0x26>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     9b4:	4643      	mov	r3, r8
     9b6:	84da      	strh	r2, [r3, #38]	; 0x26
			ADC_CALIB_BIAS_CAL(
     9b8:	4b12      	ldr	r3, [pc, #72]	; (a04 <adc_init+0x354>)
     9ba:	681b      	ldr	r3, [r3, #0]
     9bc:	015b      	lsls	r3, r3, #5
     9be:	22e0      	movs	r2, #224	; 0xe0
     9c0:	00d2      	lsls	r2, r2, #3
     9c2:	4013      	ands	r3, r2
			ADC_CALIB_LINEARITY_CAL(
     9c4:	4a10      	ldr	r2, [pc, #64]	; (a08 <adc_init+0x358>)
     9c6:	6851      	ldr	r1, [r2, #4]
     9c8:	0149      	lsls	r1, r1, #5
     9ca:	6812      	ldr	r2, [r2, #0]
     9cc:	0ed2      	lsrs	r2, r2, #27
     9ce:	430a      	orrs	r2, r1
     9d0:	b2d2      	uxtb	r2, r2
			) |
     9d2:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
     9d4:	4642      	mov	r2, r8
     9d6:	8513      	strh	r3, [r2, #40]	; 0x28
	return STATUS_OK;
     9d8:	2000      	movs	r0, #0
     9da:	e67c      	b.n	6d6 <adc_init+0x26>
     9dc:	40000400 	.word	0x40000400
     9e0:	40000800 	.word	0x40000800
     9e4:	200002ac 	.word	0x200002ac
     9e8:	00001c31 	.word	0x00001c31
     9ec:	00001ba5 	.word	0x00001ba5
     9f0:	00003569 	.word	0x00003569
     9f4:	00004d00 	.word	0x00004d00
     9f8:	00001d29 	.word	0x00001d29
     9fc:	00004c2c 	.word	0x00004c2c
     a00:	00000fff 	.word	0x00000fff
     a04:	00806024 	.word	0x00806024
     a08:	00806020 	.word	0x00806020
		switch (resolution) {
     a0c:	2c00      	cmp	r4, #0
     a0e:	d000      	beq.n	a12 <adc_init+0x362>
     a10:	e77f      	b.n	912 <adc_init+0x262>
			if (config->differential_mode &&
     a12:	7cf2      	ldrb	r2, [r6, #19]
     a14:	2a00      	cmp	r2, #0
     a16:	d00f      	beq.n	a38 <adc_init+0x388>
					(config->window.window_lower_value > 2047 ||
     a18:	69f2      	ldr	r2, [r6, #28]
     a1a:	2180      	movs	r1, #128	; 0x80
     a1c:	0109      	lsls	r1, r1, #4
     a1e:	468c      	mov	ip, r1
     a20:	4462      	add	r2, ip
			if (config->differential_mode &&
     a22:	492a      	ldr	r1, [pc, #168]	; (acc <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
     a24:	2017      	movs	r0, #23
			if (config->differential_mode &&
     a26:	428a      	cmp	r2, r1
     a28:	d900      	bls.n	a2c <adc_init+0x37c>
     a2a:	e654      	b.n	6d6 <adc_init+0x26>
					config->window.window_lower_value < -2048 ||
     a2c:	6a32      	ldr	r2, [r6, #32]
     a2e:	4462      	add	r2, ip
     a30:	4926      	ldr	r1, [pc, #152]	; (acc <adc_init+0x41c>)
     a32:	428a      	cmp	r2, r1
     a34:	d900      	bls.n	a38 <adc_init+0x388>
     a36:	e64e      	b.n	6d6 <adc_init+0x26>
			} else if (config->window.window_lower_value > 4095 ||
     a38:	4a24      	ldr	r2, [pc, #144]	; (acc <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
     a3a:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
     a3c:	69f1      	ldr	r1, [r6, #28]
     a3e:	4291      	cmp	r1, r2
     a40:	dd00      	ble.n	a44 <adc_init+0x394>
     a42:	e648      	b.n	6d6 <adc_init+0x26>
     a44:	6a31      	ldr	r1, [r6, #32]
     a46:	4291      	cmp	r1, r2
     a48:	dd00      	ble.n	a4c <adc_init+0x39c>
     a4a:	e644      	b.n	6d6 <adc_init+0x26>
     a4c:	e761      	b.n	912 <adc_init+0x262>
			if (config->differential_mode &&
     a4e:	7cf2      	ldrb	r2, [r6, #19]
     a50:	2a00      	cmp	r2, #0
     a52:	d00f      	beq.n	a74 <adc_init+0x3c4>
					(config->window.window_lower_value > 511 ||
     a54:	69f2      	ldr	r2, [r6, #28]
     a56:	2180      	movs	r1, #128	; 0x80
     a58:	0089      	lsls	r1, r1, #2
     a5a:	468c      	mov	ip, r1
     a5c:	4462      	add	r2, ip
			if (config->differential_mode &&
     a5e:	491c      	ldr	r1, [pc, #112]	; (ad0 <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
     a60:	2017      	movs	r0, #23
			if (config->differential_mode &&
     a62:	428a      	cmp	r2, r1
     a64:	d900      	bls.n	a68 <adc_init+0x3b8>
     a66:	e636      	b.n	6d6 <adc_init+0x26>
					config->window.window_lower_value < -512 ||
     a68:	6a32      	ldr	r2, [r6, #32]
     a6a:	4462      	add	r2, ip
     a6c:	4918      	ldr	r1, [pc, #96]	; (ad0 <adc_init+0x420>)
     a6e:	428a      	cmp	r2, r1
     a70:	d900      	bls.n	a74 <adc_init+0x3c4>
     a72:	e630      	b.n	6d6 <adc_init+0x26>
			} else if (config->window.window_lower_value > 1023 ||
     a74:	4a16      	ldr	r2, [pc, #88]	; (ad0 <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
     a76:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
     a78:	69f1      	ldr	r1, [r6, #28]
     a7a:	4291      	cmp	r1, r2
     a7c:	dd00      	ble.n	a80 <adc_init+0x3d0>
     a7e:	e62a      	b.n	6d6 <adc_init+0x26>
     a80:	6a31      	ldr	r1, [r6, #32]
     a82:	4291      	cmp	r1, r2
     a84:	dd00      	ble.n	a88 <adc_init+0x3d8>
     a86:	e626      	b.n	6d6 <adc_init+0x26>
     a88:	e743      	b.n	912 <adc_init+0x262>
			if (config->differential_mode &&
     a8a:	7cf2      	ldrb	r2, [r6, #19]
     a8c:	2a00      	cmp	r2, #0
     a8e:	d00f      	beq.n	ab0 <adc_init+0x400>
					(config->window.window_lower_value > 32767 ||
     a90:	69f2      	ldr	r2, [r6, #28]
     a92:	2180      	movs	r1, #128	; 0x80
     a94:	0209      	lsls	r1, r1, #8
     a96:	468c      	mov	ip, r1
     a98:	4462      	add	r2, ip
			if (config->differential_mode &&
     a9a:	490e      	ldr	r1, [pc, #56]	; (ad4 <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
     a9c:	2017      	movs	r0, #23
			if (config->differential_mode &&
     a9e:	428a      	cmp	r2, r1
     aa0:	d900      	bls.n	aa4 <adc_init+0x3f4>
     aa2:	e618      	b.n	6d6 <adc_init+0x26>
					config->window.window_lower_value < -32768 ||
     aa4:	6a32      	ldr	r2, [r6, #32]
     aa6:	4462      	add	r2, ip
     aa8:	490a      	ldr	r1, [pc, #40]	; (ad4 <adc_init+0x424>)
     aaa:	428a      	cmp	r2, r1
     aac:	d900      	bls.n	ab0 <adc_init+0x400>
     aae:	e612      	b.n	6d6 <adc_init+0x26>
			} else if (config->window.window_lower_value > 65535 ||
     ab0:	4a08      	ldr	r2, [pc, #32]	; (ad4 <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
     ab2:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
     ab4:	69f1      	ldr	r1, [r6, #28]
     ab6:	4291      	cmp	r1, r2
     ab8:	dd00      	ble.n	abc <adc_init+0x40c>
     aba:	e60c      	b.n	6d6 <adc_init+0x26>
     abc:	6a31      	ldr	r1, [r6, #32]
     abe:	4291      	cmp	r1, r2
     ac0:	dd00      	ble.n	ac4 <adc_init+0x414>
     ac2:	e608      	b.n	6d6 <adc_init+0x26>
     ac4:	e725      	b.n	912 <adc_init+0x262>
		return STATUS_ERR_INVALID_ARG;
     ac6:	2017      	movs	r0, #23
     ac8:	e605      	b.n	6d6 <adc_init+0x26>
     aca:	46c0      	nop			; (mov r8, r8)
     acc:	00000fff 	.word	0x00000fff
     ad0:	000003ff 	.word	0x000003ff
     ad4:	0000ffff 	.word	0x0000ffff

00000ad8 <ADC_Handler>:
	}
}

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
     ad8:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
     ada:	4b2f      	ldr	r3, [pc, #188]	; (b98 <ADC_Handler+0xc0>)
     adc:	681d      	ldr	r5, [r3, #0]
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
     ade:	682b      	ldr	r3, [r5, #0]
     ae0:	7e1a      	ldrb	r2, [r3, #24]
     ae2:	7ddc      	ldrb	r4, [r3, #23]
     ae4:	4014      	ands	r4, r2
	if (flags & ADC_INTFLAG_RESRDY) {
     ae6:	07e2      	lsls	r2, r4, #31
     ae8:	d416      	bmi.n	b18 <ADC_Handler+0x40>
	if (flags & ADC_INTFLAG_WINMON) {
     aea:	0763      	lsls	r3, r4, #29
     aec:	d508      	bpl.n	b00 <ADC_Handler+0x28>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     aee:	2304      	movs	r3, #4
     af0:	682a      	ldr	r2, [r5, #0]
     af2:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     af4:	7eeb      	ldrb	r3, [r5, #27]
     af6:	079b      	lsls	r3, r3, #30
     af8:	d502      	bpl.n	b00 <ADC_Handler+0x28>
     afa:	7eab      	ldrb	r3, [r5, #26]
     afc:	079b      	lsls	r3, r3, #30
     afe:	d442      	bmi.n	b86 <ADC_Handler+0xae>
	if (flags & ADC_INTFLAG_OVERRUN) {
     b00:	07a3      	lsls	r3, r4, #30
     b02:	d508      	bpl.n	b16 <ADC_Handler+0x3e>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     b04:	2302      	movs	r3, #2
     b06:	682a      	ldr	r2, [r5, #0]
     b08:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     b0a:	7eeb      	ldrb	r3, [r5, #27]
     b0c:	075b      	lsls	r3, r3, #29
     b0e:	d502      	bpl.n	b16 <ADC_Handler+0x3e>
     b10:	7eab      	ldrb	r3, [r5, #26]
     b12:	075b      	lsls	r3, r3, #29
     b14:	d43b      	bmi.n	b8e <ADC_Handler+0xb6>
	_adc_interrupt_handler(0);
}
     b16:	bd70      	pop	{r4, r5, r6, pc}
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     b18:	2201      	movs	r2, #1
     b1a:	761a      	strb	r2, [r3, #24]
	Adc *const adc_module = module_inst->hw;
     b1c:	682a      	ldr	r2, [r5, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     b1e:	7e53      	ldrb	r3, [r2, #25]
		while (adc_is_syncing(module)) {
     b20:	b25b      	sxtb	r3, r3
     b22:	2b00      	cmp	r3, #0
     b24:	dbfb      	blt.n	b1e <ADC_Handler+0x46>
		*(module->job_buffer++) = module->hw->RESULT.reg;
     b26:	6969      	ldr	r1, [r5, #20]
     b28:	1c8b      	adds	r3, r1, #2
     b2a:	616b      	str	r3, [r5, #20]
     b2c:	8b53      	ldrh	r3, [r2, #26]
     b2e:	b29b      	uxth	r3, r3
     b30:	800b      	strh	r3, [r1, #0]
		if (--module->remaining_conversions > 0) {
     b32:	8b2b      	ldrh	r3, [r5, #24]
     b34:	3b01      	subs	r3, #1
     b36:	b29b      	uxth	r3, r3
     b38:	832b      	strh	r3, [r5, #24]
     b3a:	2b00      	cmp	r3, #0
     b3c:	d011      	beq.n	b62 <ADC_Handler+0x8a>
			if (module->software_trigger == true) {
     b3e:	7f6b      	ldrb	r3, [r5, #29]
     b40:	2b00      	cmp	r3, #0
     b42:	d0d2      	beq.n	aea <ADC_Handler+0x12>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     b44:	682a      	ldr	r2, [r5, #0]
     b46:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     b48:	b25b      	sxtb	r3, r3
     b4a:	2b00      	cmp	r3, #0
     b4c:	dbfb      	blt.n	b46 <ADC_Handler+0x6e>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     b4e:	7b13      	ldrb	r3, [r2, #12]
     b50:	2102      	movs	r1, #2
     b52:	430b      	orrs	r3, r1
     b54:	7313      	strb	r3, [r2, #12]
	Adc *const adc_module = module_inst->hw;
     b56:	682a      	ldr	r2, [r5, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     b58:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     b5a:	b25b      	sxtb	r3, r3
     b5c:	2b00      	cmp	r3, #0
     b5e:	dbfb      	blt.n	b58 <ADC_Handler+0x80>
     b60:	e7c3      	b.n	aea <ADC_Handler+0x12>
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     b62:	2301      	movs	r3, #1
     b64:	682a      	ldr	r2, [r5, #0]
     b66:	7593      	strb	r3, [r2, #22]
			if (module->job_status == STATUS_BUSY) {
     b68:	7f2b      	ldrb	r3, [r5, #28]
     b6a:	2b05      	cmp	r3, #5
     b6c:	d1bd      	bne.n	aea <ADC_Handler+0x12>
				module->job_status = STATUS_OK;
     b6e:	2300      	movs	r3, #0
     b70:	772b      	strb	r3, [r5, #28]
				if ((module->enabled_callback_mask &
     b72:	7eeb      	ldrb	r3, [r5, #27]
     b74:	07db      	lsls	r3, r3, #31
     b76:	d5b8      	bpl.n	aea <ADC_Handler+0x12>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
     b78:	7eab      	ldrb	r3, [r5, #26]
     b7a:	07db      	lsls	r3, r3, #31
     b7c:	d5b5      	bpl.n	aea <ADC_Handler+0x12>
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     b7e:	0028      	movs	r0, r5
     b80:	68ab      	ldr	r3, [r5, #8]
     b82:	4798      	blx	r3
     b84:	e7b1      	b.n	aea <ADC_Handler+0x12>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     b86:	0028      	movs	r0, r5
     b88:	68eb      	ldr	r3, [r5, #12]
     b8a:	4798      	blx	r3
     b8c:	e7b8      	b.n	b00 <ADC_Handler+0x28>
			(module->callback[ADC_CALLBACK_ERROR])(module);
     b8e:	692b      	ldr	r3, [r5, #16]
     b90:	0028      	movs	r0, r5
     b92:	4798      	blx	r3
}
     b94:	e7bf      	b.n	b16 <ADC_Handler+0x3e>
     b96:	46c0      	nop			; (mov r8, r8)
     b98:	200002ac 	.word	0x200002ac

00000b9c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     b9c:	b500      	push	{lr}
     b9e:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     ba0:	ab01      	add	r3, sp, #4
     ba2:	2280      	movs	r2, #128	; 0x80
     ba4:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     ba6:	780a      	ldrb	r2, [r1, #0]
     ba8:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     baa:	784a      	ldrb	r2, [r1, #1]
     bac:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     bae:	788a      	ldrb	r2, [r1, #2]
     bb0:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     bb2:	0019      	movs	r1, r3
     bb4:	4b01      	ldr	r3, [pc, #4]	; (bbc <port_pin_set_config+0x20>)
     bb6:	4798      	blx	r3
}
     bb8:	b003      	add	sp, #12
     bba:	bd00      	pop	{pc}
     bbc:	00001d29 	.word	0x00001d29

00000bc0 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
     bc2:	46de      	mov	lr, fp
     bc4:	4657      	mov	r7, sl
     bc6:	464e      	mov	r6, r9
     bc8:	4645      	mov	r5, r8
     bca:	b5e0      	push	{r5, r6, r7, lr}
     bcc:	b087      	sub	sp, #28
     bce:	4680      	mov	r8, r0
     bd0:	9104      	str	r1, [sp, #16]
     bd2:	0016      	movs	r6, r2
     bd4:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     bd6:	2200      	movs	r2, #0
     bd8:	2300      	movs	r3, #0
     bda:	2100      	movs	r1, #0
     bdc:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     bde:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     be0:	2001      	movs	r0, #1
     be2:	0021      	movs	r1, r4
     be4:	9600      	str	r6, [sp, #0]
     be6:	9701      	str	r7, [sp, #4]
     be8:	465c      	mov	r4, fp
     bea:	9403      	str	r4, [sp, #12]
     bec:	4644      	mov	r4, r8
     bee:	9405      	str	r4, [sp, #20]
     bf0:	e013      	b.n	c1a <long_division+0x5a>
     bf2:	2420      	movs	r4, #32
     bf4:	1a64      	subs	r4, r4, r1
     bf6:	0005      	movs	r5, r0
     bf8:	40e5      	lsrs	r5, r4
     bfa:	46a8      	mov	r8, r5
     bfc:	e014      	b.n	c28 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     bfe:	9c00      	ldr	r4, [sp, #0]
     c00:	9d01      	ldr	r5, [sp, #4]
     c02:	1b12      	subs	r2, r2, r4
     c04:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     c06:	465c      	mov	r4, fp
     c08:	464d      	mov	r5, r9
     c0a:	432c      	orrs	r4, r5
     c0c:	46a3      	mov	fp, r4
     c0e:	9c03      	ldr	r4, [sp, #12]
     c10:	4645      	mov	r5, r8
     c12:	432c      	orrs	r4, r5
     c14:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     c16:	3901      	subs	r1, #1
     c18:	d325      	bcc.n	c66 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     c1a:	2420      	movs	r4, #32
     c1c:	4264      	negs	r4, r4
     c1e:	190c      	adds	r4, r1, r4
     c20:	d4e7      	bmi.n	bf2 <long_division+0x32>
     c22:	0005      	movs	r5, r0
     c24:	40a5      	lsls	r5, r4
     c26:	46a8      	mov	r8, r5
     c28:	0004      	movs	r4, r0
     c2a:	408c      	lsls	r4, r1
     c2c:	46a1      	mov	r9, r4
		r = r << 1;
     c2e:	1892      	adds	r2, r2, r2
     c30:	415b      	adcs	r3, r3
     c32:	0014      	movs	r4, r2
     c34:	001d      	movs	r5, r3
		if (n & bit_shift) {
     c36:	9e05      	ldr	r6, [sp, #20]
     c38:	464f      	mov	r7, r9
     c3a:	403e      	ands	r6, r7
     c3c:	46b4      	mov	ip, r6
     c3e:	9e04      	ldr	r6, [sp, #16]
     c40:	4647      	mov	r7, r8
     c42:	403e      	ands	r6, r7
     c44:	46b2      	mov	sl, r6
     c46:	4666      	mov	r6, ip
     c48:	4657      	mov	r7, sl
     c4a:	433e      	orrs	r6, r7
     c4c:	d003      	beq.n	c56 <long_division+0x96>
			r |= 0x01;
     c4e:	0006      	movs	r6, r0
     c50:	4326      	orrs	r6, r4
     c52:	0032      	movs	r2, r6
     c54:	002b      	movs	r3, r5
		if (r >= d) {
     c56:	9c00      	ldr	r4, [sp, #0]
     c58:	9d01      	ldr	r5, [sp, #4]
     c5a:	429d      	cmp	r5, r3
     c5c:	d8db      	bhi.n	c16 <long_division+0x56>
     c5e:	d1ce      	bne.n	bfe <long_division+0x3e>
     c60:	4294      	cmp	r4, r2
     c62:	d8d8      	bhi.n	c16 <long_division+0x56>
     c64:	e7cb      	b.n	bfe <long_division+0x3e>
     c66:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     c68:	4658      	mov	r0, fp
     c6a:	0019      	movs	r1, r3
     c6c:	b007      	add	sp, #28
     c6e:	bc3c      	pop	{r2, r3, r4, r5}
     c70:	4690      	mov	r8, r2
     c72:	4699      	mov	r9, r3
     c74:	46a2      	mov	sl, r4
     c76:	46ab      	mov	fp, r5
     c78:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000c7a <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     c7a:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     c7c:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     c7e:	2340      	movs	r3, #64	; 0x40
     c80:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     c82:	4281      	cmp	r1, r0
     c84:	d202      	bcs.n	c8c <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     c86:	0018      	movs	r0, r3
     c88:	bd10      	pop	{r4, pc}
		baud_calculated++;
     c8a:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     c8c:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     c8e:	1c63      	adds	r3, r4, #1
     c90:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     c92:	4288      	cmp	r0, r1
     c94:	d9f9      	bls.n	c8a <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     c96:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     c98:	2cff      	cmp	r4, #255	; 0xff
     c9a:	d8f4      	bhi.n	c86 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     c9c:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     c9e:	2300      	movs	r3, #0
     ca0:	e7f1      	b.n	c86 <_sercom_get_sync_baud_val+0xc>
	...

00000ca4 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
     ca6:	b083      	sub	sp, #12
     ca8:	000f      	movs	r7, r1
     caa:	0016      	movs	r6, r2
     cac:	aa08      	add	r2, sp, #32
     cae:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     cb0:	0004      	movs	r4, r0
     cb2:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     cb4:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     cb6:	42bc      	cmp	r4, r7
     cb8:	d902      	bls.n	cc0 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     cba:	0010      	movs	r0, r2
     cbc:	b003      	add	sp, #12
     cbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     cc0:	2b00      	cmp	r3, #0
     cc2:	d114      	bne.n	cee <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     cc4:	0002      	movs	r2, r0
     cc6:	0008      	movs	r0, r1
     cc8:	2100      	movs	r1, #0
     cca:	4c19      	ldr	r4, [pc, #100]	; (d30 <_sercom_get_async_baud_val+0x8c>)
     ccc:	47a0      	blx	r4
     cce:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     cd0:	003a      	movs	r2, r7
     cd2:	2300      	movs	r3, #0
     cd4:	2000      	movs	r0, #0
     cd6:	4c17      	ldr	r4, [pc, #92]	; (d34 <_sercom_get_async_baud_val+0x90>)
     cd8:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     cda:	2200      	movs	r2, #0
     cdc:	2301      	movs	r3, #1
     cde:	1a12      	subs	r2, r2, r0
     ce0:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     ce2:	0c12      	lsrs	r2, r2, #16
     ce4:	041b      	lsls	r3, r3, #16
     ce6:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     ce8:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     cea:	2200      	movs	r2, #0
     cec:	e7e5      	b.n	cba <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     cee:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     cf0:	2b01      	cmp	r3, #1
     cf2:	d1f9      	bne.n	ce8 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     cf4:	000a      	movs	r2, r1
     cf6:	2300      	movs	r3, #0
     cf8:	2100      	movs	r1, #0
     cfa:	4c0d      	ldr	r4, [pc, #52]	; (d30 <_sercom_get_async_baud_val+0x8c>)
     cfc:	47a0      	blx	r4
     cfe:	0002      	movs	r2, r0
     d00:	000b      	movs	r3, r1
     d02:	9200      	str	r2, [sp, #0]
     d04:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     d06:	0038      	movs	r0, r7
     d08:	2100      	movs	r1, #0
     d0a:	4c0a      	ldr	r4, [pc, #40]	; (d34 <_sercom_get_async_baud_val+0x90>)
     d0c:	47a0      	blx	r4
     d0e:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     d10:	2380      	movs	r3, #128	; 0x80
     d12:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     d14:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     d16:	4298      	cmp	r0, r3
     d18:	d8cf      	bhi.n	cba <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     d1a:	0f79      	lsrs	r1, r7, #29
     d1c:	00f8      	lsls	r0, r7, #3
     d1e:	9a00      	ldr	r2, [sp, #0]
     d20:	9b01      	ldr	r3, [sp, #4]
     d22:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     d24:	00ea      	lsls	r2, r5, #3
     d26:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     d28:	b2d2      	uxtb	r2, r2
     d2a:	0352      	lsls	r2, r2, #13
     d2c:	432a      	orrs	r2, r5
     d2e:	e7db      	b.n	ce8 <_sercom_get_async_baud_val+0x44>
     d30:	00003495 	.word	0x00003495
     d34:	00000bc1 	.word	0x00000bc1

00000d38 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     d38:	b510      	push	{r4, lr}
     d3a:	b082      	sub	sp, #8
     d3c:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     d3e:	4b0e      	ldr	r3, [pc, #56]	; (d78 <sercom_set_gclk_generator+0x40>)
     d40:	781b      	ldrb	r3, [r3, #0]
     d42:	2b00      	cmp	r3, #0
     d44:	d007      	beq.n	d56 <sercom_set_gclk_generator+0x1e>
     d46:	2900      	cmp	r1, #0
     d48:	d105      	bne.n	d56 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     d4a:	4b0b      	ldr	r3, [pc, #44]	; (d78 <sercom_set_gclk_generator+0x40>)
     d4c:	785b      	ldrb	r3, [r3, #1]
     d4e:	4283      	cmp	r3, r0
     d50:	d010      	beq.n	d74 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     d52:	201d      	movs	r0, #29
     d54:	e00c      	b.n	d70 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     d56:	a901      	add	r1, sp, #4
     d58:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     d5a:	2013      	movs	r0, #19
     d5c:	4b07      	ldr	r3, [pc, #28]	; (d7c <sercom_set_gclk_generator+0x44>)
     d5e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     d60:	2013      	movs	r0, #19
     d62:	4b07      	ldr	r3, [pc, #28]	; (d80 <sercom_set_gclk_generator+0x48>)
     d64:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     d66:	4b04      	ldr	r3, [pc, #16]	; (d78 <sercom_set_gclk_generator+0x40>)
     d68:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     d6a:	2201      	movs	r2, #1
     d6c:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     d6e:	2000      	movs	r0, #0
}
     d70:	b002      	add	sp, #8
     d72:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     d74:	2000      	movs	r0, #0
     d76:	e7fb      	b.n	d70 <sercom_set_gclk_generator+0x38>
     d78:	20000260 	.word	0x20000260
     d7c:	00001c31 	.word	0x00001c31
     d80:	00001ba5 	.word	0x00001ba5

00000d84 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     d84:	4b40      	ldr	r3, [pc, #256]	; (e88 <_sercom_get_default_pad+0x104>)
     d86:	4298      	cmp	r0, r3
     d88:	d031      	beq.n	dee <_sercom_get_default_pad+0x6a>
     d8a:	d90a      	bls.n	da2 <_sercom_get_default_pad+0x1e>
     d8c:	4b3f      	ldr	r3, [pc, #252]	; (e8c <_sercom_get_default_pad+0x108>)
     d8e:	4298      	cmp	r0, r3
     d90:	d04d      	beq.n	e2e <_sercom_get_default_pad+0xaa>
     d92:	4b3f      	ldr	r3, [pc, #252]	; (e90 <_sercom_get_default_pad+0x10c>)
     d94:	4298      	cmp	r0, r3
     d96:	d05a      	beq.n	e4e <_sercom_get_default_pad+0xca>
     d98:	4b3e      	ldr	r3, [pc, #248]	; (e94 <_sercom_get_default_pad+0x110>)
     d9a:	4298      	cmp	r0, r3
     d9c:	d037      	beq.n	e0e <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     d9e:	2000      	movs	r0, #0
}
     da0:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     da2:	4b3d      	ldr	r3, [pc, #244]	; (e98 <_sercom_get_default_pad+0x114>)
     da4:	4298      	cmp	r0, r3
     da6:	d00c      	beq.n	dc2 <_sercom_get_default_pad+0x3e>
     da8:	4b3c      	ldr	r3, [pc, #240]	; (e9c <_sercom_get_default_pad+0x118>)
     daa:	4298      	cmp	r0, r3
     dac:	d1f7      	bne.n	d9e <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     dae:	2901      	cmp	r1, #1
     db0:	d017      	beq.n	de2 <_sercom_get_default_pad+0x5e>
     db2:	2900      	cmp	r1, #0
     db4:	d05d      	beq.n	e72 <_sercom_get_default_pad+0xee>
     db6:	2902      	cmp	r1, #2
     db8:	d015      	beq.n	de6 <_sercom_get_default_pad+0x62>
     dba:	2903      	cmp	r1, #3
     dbc:	d015      	beq.n	dea <_sercom_get_default_pad+0x66>
	return 0;
     dbe:	2000      	movs	r0, #0
     dc0:	e7ee      	b.n	da0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     dc2:	2901      	cmp	r1, #1
     dc4:	d007      	beq.n	dd6 <_sercom_get_default_pad+0x52>
     dc6:	2900      	cmp	r1, #0
     dc8:	d051      	beq.n	e6e <_sercom_get_default_pad+0xea>
     dca:	2902      	cmp	r1, #2
     dcc:	d005      	beq.n	dda <_sercom_get_default_pad+0x56>
     dce:	2903      	cmp	r1, #3
     dd0:	d005      	beq.n	dde <_sercom_get_default_pad+0x5a>
	return 0;
     dd2:	2000      	movs	r0, #0
     dd4:	e7e4      	b.n	da0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     dd6:	4832      	ldr	r0, [pc, #200]	; (ea0 <_sercom_get_default_pad+0x11c>)
     dd8:	e7e2      	b.n	da0 <_sercom_get_default_pad+0x1c>
     dda:	4832      	ldr	r0, [pc, #200]	; (ea4 <_sercom_get_default_pad+0x120>)
     ddc:	e7e0      	b.n	da0 <_sercom_get_default_pad+0x1c>
     dde:	4832      	ldr	r0, [pc, #200]	; (ea8 <_sercom_get_default_pad+0x124>)
     de0:	e7de      	b.n	da0 <_sercom_get_default_pad+0x1c>
     de2:	4832      	ldr	r0, [pc, #200]	; (eac <_sercom_get_default_pad+0x128>)
     de4:	e7dc      	b.n	da0 <_sercom_get_default_pad+0x1c>
     de6:	4832      	ldr	r0, [pc, #200]	; (eb0 <_sercom_get_default_pad+0x12c>)
     de8:	e7da      	b.n	da0 <_sercom_get_default_pad+0x1c>
     dea:	4832      	ldr	r0, [pc, #200]	; (eb4 <_sercom_get_default_pad+0x130>)
     dec:	e7d8      	b.n	da0 <_sercom_get_default_pad+0x1c>
     dee:	2901      	cmp	r1, #1
     df0:	d007      	beq.n	e02 <_sercom_get_default_pad+0x7e>
     df2:	2900      	cmp	r1, #0
     df4:	d03f      	beq.n	e76 <_sercom_get_default_pad+0xf2>
     df6:	2902      	cmp	r1, #2
     df8:	d005      	beq.n	e06 <_sercom_get_default_pad+0x82>
     dfa:	2903      	cmp	r1, #3
     dfc:	d005      	beq.n	e0a <_sercom_get_default_pad+0x86>
	return 0;
     dfe:	2000      	movs	r0, #0
     e00:	e7ce      	b.n	da0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     e02:	482d      	ldr	r0, [pc, #180]	; (eb8 <_sercom_get_default_pad+0x134>)
     e04:	e7cc      	b.n	da0 <_sercom_get_default_pad+0x1c>
     e06:	482d      	ldr	r0, [pc, #180]	; (ebc <_sercom_get_default_pad+0x138>)
     e08:	e7ca      	b.n	da0 <_sercom_get_default_pad+0x1c>
     e0a:	482d      	ldr	r0, [pc, #180]	; (ec0 <_sercom_get_default_pad+0x13c>)
     e0c:	e7c8      	b.n	da0 <_sercom_get_default_pad+0x1c>
     e0e:	2901      	cmp	r1, #1
     e10:	d007      	beq.n	e22 <_sercom_get_default_pad+0x9e>
     e12:	2900      	cmp	r1, #0
     e14:	d031      	beq.n	e7a <_sercom_get_default_pad+0xf6>
     e16:	2902      	cmp	r1, #2
     e18:	d005      	beq.n	e26 <_sercom_get_default_pad+0xa2>
     e1a:	2903      	cmp	r1, #3
     e1c:	d005      	beq.n	e2a <_sercom_get_default_pad+0xa6>
	return 0;
     e1e:	2000      	movs	r0, #0
     e20:	e7be      	b.n	da0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     e22:	4828      	ldr	r0, [pc, #160]	; (ec4 <_sercom_get_default_pad+0x140>)
     e24:	e7bc      	b.n	da0 <_sercom_get_default_pad+0x1c>
     e26:	4828      	ldr	r0, [pc, #160]	; (ec8 <_sercom_get_default_pad+0x144>)
     e28:	e7ba      	b.n	da0 <_sercom_get_default_pad+0x1c>
     e2a:	4828      	ldr	r0, [pc, #160]	; (ecc <_sercom_get_default_pad+0x148>)
     e2c:	e7b8      	b.n	da0 <_sercom_get_default_pad+0x1c>
     e2e:	2901      	cmp	r1, #1
     e30:	d007      	beq.n	e42 <_sercom_get_default_pad+0xbe>
     e32:	2900      	cmp	r1, #0
     e34:	d023      	beq.n	e7e <_sercom_get_default_pad+0xfa>
     e36:	2902      	cmp	r1, #2
     e38:	d005      	beq.n	e46 <_sercom_get_default_pad+0xc2>
     e3a:	2903      	cmp	r1, #3
     e3c:	d005      	beq.n	e4a <_sercom_get_default_pad+0xc6>
	return 0;
     e3e:	2000      	movs	r0, #0
     e40:	e7ae      	b.n	da0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     e42:	4823      	ldr	r0, [pc, #140]	; (ed0 <_sercom_get_default_pad+0x14c>)
     e44:	e7ac      	b.n	da0 <_sercom_get_default_pad+0x1c>
     e46:	4823      	ldr	r0, [pc, #140]	; (ed4 <_sercom_get_default_pad+0x150>)
     e48:	e7aa      	b.n	da0 <_sercom_get_default_pad+0x1c>
     e4a:	4823      	ldr	r0, [pc, #140]	; (ed8 <_sercom_get_default_pad+0x154>)
     e4c:	e7a8      	b.n	da0 <_sercom_get_default_pad+0x1c>
     e4e:	2901      	cmp	r1, #1
     e50:	d007      	beq.n	e62 <_sercom_get_default_pad+0xde>
     e52:	2900      	cmp	r1, #0
     e54:	d015      	beq.n	e82 <_sercom_get_default_pad+0xfe>
     e56:	2902      	cmp	r1, #2
     e58:	d005      	beq.n	e66 <_sercom_get_default_pad+0xe2>
     e5a:	2903      	cmp	r1, #3
     e5c:	d005      	beq.n	e6a <_sercom_get_default_pad+0xe6>
	return 0;
     e5e:	2000      	movs	r0, #0
     e60:	e79e      	b.n	da0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     e62:	481e      	ldr	r0, [pc, #120]	; (edc <_sercom_get_default_pad+0x158>)
     e64:	e79c      	b.n	da0 <_sercom_get_default_pad+0x1c>
     e66:	481e      	ldr	r0, [pc, #120]	; (ee0 <_sercom_get_default_pad+0x15c>)
     e68:	e79a      	b.n	da0 <_sercom_get_default_pad+0x1c>
     e6a:	481e      	ldr	r0, [pc, #120]	; (ee4 <_sercom_get_default_pad+0x160>)
     e6c:	e798      	b.n	da0 <_sercom_get_default_pad+0x1c>
     e6e:	481e      	ldr	r0, [pc, #120]	; (ee8 <_sercom_get_default_pad+0x164>)
     e70:	e796      	b.n	da0 <_sercom_get_default_pad+0x1c>
     e72:	2003      	movs	r0, #3
     e74:	e794      	b.n	da0 <_sercom_get_default_pad+0x1c>
     e76:	481d      	ldr	r0, [pc, #116]	; (eec <_sercom_get_default_pad+0x168>)
     e78:	e792      	b.n	da0 <_sercom_get_default_pad+0x1c>
     e7a:	481d      	ldr	r0, [pc, #116]	; (ef0 <_sercom_get_default_pad+0x16c>)
     e7c:	e790      	b.n	da0 <_sercom_get_default_pad+0x1c>
     e7e:	481d      	ldr	r0, [pc, #116]	; (ef4 <_sercom_get_default_pad+0x170>)
     e80:	e78e      	b.n	da0 <_sercom_get_default_pad+0x1c>
     e82:	481d      	ldr	r0, [pc, #116]	; (ef8 <_sercom_get_default_pad+0x174>)
     e84:	e78c      	b.n	da0 <_sercom_get_default_pad+0x1c>
     e86:	46c0      	nop			; (mov r8, r8)
     e88:	42001000 	.word	0x42001000
     e8c:	42001800 	.word	0x42001800
     e90:	42001c00 	.word	0x42001c00
     e94:	42001400 	.word	0x42001400
     e98:	42000800 	.word	0x42000800
     e9c:	42000c00 	.word	0x42000c00
     ea0:	00050003 	.word	0x00050003
     ea4:	00060003 	.word	0x00060003
     ea8:	00070003 	.word	0x00070003
     eac:	00010003 	.word	0x00010003
     eb0:	001e0003 	.word	0x001e0003
     eb4:	001f0003 	.word	0x001f0003
     eb8:	00090003 	.word	0x00090003
     ebc:	000a0003 	.word	0x000a0003
     ec0:	000b0003 	.word	0x000b0003
     ec4:	00110003 	.word	0x00110003
     ec8:	00120003 	.word	0x00120003
     ecc:	00130003 	.word	0x00130003
     ed0:	000d0003 	.word	0x000d0003
     ed4:	000e0003 	.word	0x000e0003
     ed8:	000f0003 	.word	0x000f0003
     edc:	00170003 	.word	0x00170003
     ee0:	00180003 	.word	0x00180003
     ee4:	00190003 	.word	0x00190003
     ee8:	00040003 	.word	0x00040003
     eec:	00080003 	.word	0x00080003
     ef0:	00100003 	.word	0x00100003
     ef4:	000c0003 	.word	0x000c0003
     ef8:	00160003 	.word	0x00160003

00000efc <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     efc:	b530      	push	{r4, r5, lr}
     efe:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     f00:	4b0b      	ldr	r3, [pc, #44]	; (f30 <_sercom_get_sercom_inst_index+0x34>)
     f02:	466a      	mov	r2, sp
     f04:	cb32      	ldmia	r3!, {r1, r4, r5}
     f06:	c232      	stmia	r2!, {r1, r4, r5}
     f08:	cb32      	ldmia	r3!, {r1, r4, r5}
     f0a:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     f0c:	9b00      	ldr	r3, [sp, #0]
     f0e:	4283      	cmp	r3, r0
     f10:	d00b      	beq.n	f2a <_sercom_get_sercom_inst_index+0x2e>
     f12:	2301      	movs	r3, #1
     f14:	009a      	lsls	r2, r3, #2
     f16:	4669      	mov	r1, sp
     f18:	5852      	ldr	r2, [r2, r1]
     f1a:	4282      	cmp	r2, r0
     f1c:	d006      	beq.n	f2c <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     f1e:	3301      	adds	r3, #1
     f20:	2b06      	cmp	r3, #6
     f22:	d1f7      	bne.n	f14 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     f24:	2000      	movs	r0, #0
}
     f26:	b007      	add	sp, #28
     f28:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     f2a:	2300      	movs	r3, #0
			return i;
     f2c:	b2d8      	uxtb	r0, r3
     f2e:	e7fa      	b.n	f26 <_sercom_get_sercom_inst_index+0x2a>
     f30:	00004d50 	.word	0x00004d50

00000f34 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     f34:	4770      	bx	lr
	...

00000f38 <_sercom_set_handler>:


void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     f38:	b5f0      	push	{r4, r5, r6, r7, lr}
	// Initialize handlers with default handler and device instances with 0 
	if (_handler_table_initialized == false) {
     f3a:	4b0a      	ldr	r3, [pc, #40]	; (f64 <_sercom_set_handler+0x2c>)
     f3c:	781b      	ldrb	r3, [r3, #0]
     f3e:	2b00      	cmp	r3, #0
     f40:	d10c      	bne.n	f5c <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     f42:	4f09      	ldr	r7, [pc, #36]	; (f68 <_sercom_set_handler+0x30>)
     f44:	4e09      	ldr	r6, [pc, #36]	; (f6c <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     f46:	4d0a      	ldr	r5, [pc, #40]	; (f70 <_sercom_set_handler+0x38>)
     f48:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     f4a:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     f4c:	195a      	adds	r2, r3, r5
     f4e:	6014      	str	r4, [r2, #0]
     f50:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     f52:	2b18      	cmp	r3, #24
     f54:	d1f9      	bne.n	f4a <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
     f56:	2201      	movs	r2, #1
     f58:	4b02      	ldr	r3, [pc, #8]	; (f64 <_sercom_set_handler+0x2c>)
     f5a:	701a      	strb	r2, [r3, #0]
	}

	// Save interrupt handler 
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     f5c:	0080      	lsls	r0, r0, #2
     f5e:	4b02      	ldr	r3, [pc, #8]	; (f68 <_sercom_set_handler+0x30>)
     f60:	50c1      	str	r1, [r0, r3]
}
     f62:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f64:	20000262 	.word	0x20000262
     f68:	20000264 	.word	0x20000264
     f6c:	00000f35 	.word	0x00000f35
     f70:	200002b0 	.word	0x200002b0

00000f74 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     f74:	b500      	push	{lr}
     f76:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     f78:	2309      	movs	r3, #9
     f7a:	466a      	mov	r2, sp
     f7c:	7013      	strb	r3, [r2, #0]
     f7e:	3301      	adds	r3, #1
     f80:	7053      	strb	r3, [r2, #1]
     f82:	3301      	adds	r3, #1
     f84:	7093      	strb	r3, [r2, #2]
     f86:	3301      	adds	r3, #1
     f88:	70d3      	strb	r3, [r2, #3]
     f8a:	3301      	adds	r3, #1
     f8c:	7113      	strb	r3, [r2, #4]
     f8e:	3301      	adds	r3, #1
     f90:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     f92:	4b03      	ldr	r3, [pc, #12]	; (fa0 <_sercom_get_interrupt_vector+0x2c>)
     f94:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     f96:	466b      	mov	r3, sp
     f98:	5618      	ldrsb	r0, [r3, r0]
}
     f9a:	b003      	add	sp, #12
     f9c:	bd00      	pop	{pc}
     f9e:	46c0      	nop			; (mov r8, r8)
     fa0:	00000efd 	.word	0x00000efd

00000fa4 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     fa4:	b510      	push	{r4, lr}
     fa6:	4b02      	ldr	r3, [pc, #8]	; (fb0 <SERCOM0_Handler+0xc>)
     fa8:	681b      	ldr	r3, [r3, #0]
     faa:	2000      	movs	r0, #0
     fac:	4798      	blx	r3
     fae:	bd10      	pop	{r4, pc}
     fb0:	20000264 	.word	0x20000264

00000fb4 <SERCOM1_Handler>:
     fb4:	b510      	push	{r4, lr}
     fb6:	4b02      	ldr	r3, [pc, #8]	; (fc0 <SERCOM1_Handler+0xc>)
     fb8:	685b      	ldr	r3, [r3, #4]
     fba:	2001      	movs	r0, #1
     fbc:	4798      	blx	r3
     fbe:	bd10      	pop	{r4, pc}
     fc0:	20000264 	.word	0x20000264

00000fc4 <SERCOM2_Handler>:
     fc4:	b510      	push	{r4, lr}
     fc6:	4b02      	ldr	r3, [pc, #8]	; (fd0 <SERCOM2_Handler+0xc>)
     fc8:	689b      	ldr	r3, [r3, #8]
     fca:	2002      	movs	r0, #2
     fcc:	4798      	blx	r3
     fce:	bd10      	pop	{r4, pc}
     fd0:	20000264 	.word	0x20000264

00000fd4 <SERCOM3_Handler>:
     fd4:	b510      	push	{r4, lr}
     fd6:	4b02      	ldr	r3, [pc, #8]	; (fe0 <SERCOM3_Handler+0xc>)
     fd8:	68db      	ldr	r3, [r3, #12]
     fda:	2003      	movs	r0, #3
     fdc:	4798      	blx	r3
     fde:	bd10      	pop	{r4, pc}
     fe0:	20000264 	.word	0x20000264

00000fe4 <SERCOM4_Handler>:
     fe4:	b510      	push	{r4, lr}
     fe6:	4b02      	ldr	r3, [pc, #8]	; (ff0 <SERCOM4_Handler+0xc>)
     fe8:	691b      	ldr	r3, [r3, #16]
     fea:	2004      	movs	r0, #4
     fec:	4798      	blx	r3
     fee:	bd10      	pop	{r4, pc}
     ff0:	20000264 	.word	0x20000264

00000ff4 <SERCOM5_Handler>:
     ff4:	b510      	push	{r4, lr}
     ff6:	4b02      	ldr	r3, [pc, #8]	; (1000 <SERCOM5_Handler+0xc>)
     ff8:	695b      	ldr	r3, [r3, #20]
     ffa:	2005      	movs	r0, #5
     ffc:	4798      	blx	r3
     ffe:	bd10      	pop	{r4, pc}
    1000:	20000264 	.word	0x20000264

00001004 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    1004:	b5f0      	push	{r4, r5, r6, r7, lr}
    1006:	46de      	mov	lr, fp
    1008:	4657      	mov	r7, sl
    100a:	464e      	mov	r6, r9
    100c:	4645      	mov	r5, r8
    100e:	b5e0      	push	{r5, r6, r7, lr}
    1010:	b091      	sub	sp, #68	; 0x44
    1012:	0005      	movs	r5, r0
    1014:	000c      	movs	r4, r1
    1016:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    1018:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    101a:	0008      	movs	r0, r1
    101c:	4bba      	ldr	r3, [pc, #744]	; (1308 <usart_init+0x304>)
    101e:	4798      	blx	r3
    1020:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1022:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    1024:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1026:	07db      	lsls	r3, r3, #31
    1028:	d506      	bpl.n	1038 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    102a:	b011      	add	sp, #68	; 0x44
    102c:	bc3c      	pop	{r2, r3, r4, r5}
    102e:	4690      	mov	r8, r2
    1030:	4699      	mov	r9, r3
    1032:	46a2      	mov	sl, r4
    1034:	46ab      	mov	fp, r5
    1036:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1038:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    103a:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    103c:	079b      	lsls	r3, r3, #30
    103e:	d4f4      	bmi.n	102a <usart_init+0x26>
    1040:	49b2      	ldr	r1, [pc, #712]	; (130c <usart_init+0x308>)
    1042:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    1044:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1046:	2301      	movs	r3, #1
    1048:	40bb      	lsls	r3, r7
    104a:	4303      	orrs	r3, r0
    104c:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    104e:	a90f      	add	r1, sp, #60	; 0x3c
    1050:	272d      	movs	r7, #45	; 0x2d
    1052:	5df3      	ldrb	r3, [r6, r7]
    1054:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1056:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1058:	b2d3      	uxtb	r3, r2
    105a:	9302      	str	r3, [sp, #8]
    105c:	0018      	movs	r0, r3
    105e:	4bac      	ldr	r3, [pc, #688]	; (1310 <usart_init+0x30c>)
    1060:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1062:	9802      	ldr	r0, [sp, #8]
    1064:	4bab      	ldr	r3, [pc, #684]	; (1314 <usart_init+0x310>)
    1066:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1068:	5df0      	ldrb	r0, [r6, r7]
    106a:	2100      	movs	r1, #0
    106c:	4baa      	ldr	r3, [pc, #680]	; (1318 <usart_init+0x314>)
    106e:	4798      	blx	r3
	module->character_size = config->character_size;
    1070:	7af3      	ldrb	r3, [r6, #11]
    1072:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    1074:	2324      	movs	r3, #36	; 0x24
    1076:	5cf3      	ldrb	r3, [r6, r3]
    1078:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    107a:	2325      	movs	r3, #37	; 0x25
    107c:	5cf3      	ldrb	r3, [r6, r3]
    107e:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    1080:	7ef3      	ldrb	r3, [r6, #27]
    1082:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    1084:	7f33      	ldrb	r3, [r6, #28]
    1086:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1088:	682b      	ldr	r3, [r5, #0]
    108a:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    108c:	0018      	movs	r0, r3
    108e:	4b9e      	ldr	r3, [pc, #632]	; (1308 <usart_init+0x304>)
    1090:	4798      	blx	r3
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1092:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    1094:	2200      	movs	r2, #0
    1096:	230e      	movs	r3, #14
    1098:	a906      	add	r1, sp, #24
    109a:	468c      	mov	ip, r1
    109c:	4463      	add	r3, ip
    109e:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    10a0:	8a32      	ldrh	r2, [r6, #16]
    10a2:	9202      	str	r2, [sp, #8]
    10a4:	2380      	movs	r3, #128	; 0x80
    10a6:	01db      	lsls	r3, r3, #7
    10a8:	429a      	cmp	r2, r3
    10aa:	d100      	bne.n	10ae <usart_init+0xaa>
    10ac:	e09a      	b.n	11e4 <usart_init+0x1e0>
    10ae:	d90f      	bls.n	10d0 <usart_init+0xcc>
    10b0:	23c0      	movs	r3, #192	; 0xc0
    10b2:	01db      	lsls	r3, r3, #7
    10b4:	9a02      	ldr	r2, [sp, #8]
    10b6:	429a      	cmp	r2, r3
    10b8:	d100      	bne.n	10bc <usart_init+0xb8>
    10ba:	e08e      	b.n	11da <usart_init+0x1d6>
    10bc:	2380      	movs	r3, #128	; 0x80
    10be:	021b      	lsls	r3, r3, #8
    10c0:	429a      	cmp	r2, r3
    10c2:	d000      	beq.n	10c6 <usart_init+0xc2>
    10c4:	e11b      	b.n	12fe <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    10c6:	2303      	movs	r3, #3
    10c8:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    10ca:	2300      	movs	r3, #0
    10cc:	9307      	str	r3, [sp, #28]
    10ce:	e008      	b.n	10e2 <usart_init+0xde>
	switch (config->sample_rate) {
    10d0:	2380      	movs	r3, #128	; 0x80
    10d2:	019b      	lsls	r3, r3, #6
    10d4:	429a      	cmp	r2, r3
    10d6:	d000      	beq.n	10da <usart_init+0xd6>
    10d8:	e111      	b.n	12fe <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    10da:	2310      	movs	r3, #16
    10dc:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    10de:	3b0f      	subs	r3, #15
    10e0:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    10e2:	6833      	ldr	r3, [r6, #0]
    10e4:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    10e6:	68f3      	ldr	r3, [r6, #12]
    10e8:	469b      	mov	fp, r3
		config->sample_adjustment |
    10ea:	6973      	ldr	r3, [r6, #20]
    10ec:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    10ee:	7e33      	ldrb	r3, [r6, #24]
    10f0:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    10f2:	2326      	movs	r3, #38	; 0x26
    10f4:	5cf3      	ldrb	r3, [r6, r3]
    10f6:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    10f8:	6873      	ldr	r3, [r6, #4]
    10fa:	4699      	mov	r9, r3
	switch (transfer_mode)
    10fc:	2b00      	cmp	r3, #0
    10fe:	d100      	bne.n	1102 <usart_init+0xfe>
    1100:	e09c      	b.n	123c <usart_init+0x238>
    1102:	2380      	movs	r3, #128	; 0x80
    1104:	055b      	lsls	r3, r3, #21
    1106:	4599      	cmp	r9, r3
    1108:	d100      	bne.n	110c <usart_init+0x108>
    110a:	e080      	b.n	120e <usart_init+0x20a>
	if(config->encoding_format_enable) {
    110c:	7e73      	ldrb	r3, [r6, #25]
    110e:	2b00      	cmp	r3, #0
    1110:	d002      	beq.n	1118 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    1112:	7eb3      	ldrb	r3, [r6, #26]
    1114:	4642      	mov	r2, r8
    1116:	7393      	strb	r3, [r2, #14]
	usart_hw->BAUD.reg = baud;
    1118:	230e      	movs	r3, #14
    111a:	aa06      	add	r2, sp, #24
    111c:	4694      	mov	ip, r2
    111e:	4463      	add	r3, ip
    1120:	881b      	ldrh	r3, [r3, #0]
    1122:	4642      	mov	r2, r8
    1124:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    1126:	9b05      	ldr	r3, [sp, #20]
    1128:	465a      	mov	r2, fp
    112a:	4313      	orrs	r3, r2
    112c:	9a03      	ldr	r2, [sp, #12]
    112e:	4313      	orrs	r3, r2
    1130:	464a      	mov	r2, r9
    1132:	4313      	orrs	r3, r2
    1134:	9f02      	ldr	r7, [sp, #8]
    1136:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1138:	9b04      	ldr	r3, [sp, #16]
    113a:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    113c:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    113e:	4653      	mov	r3, sl
    1140:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    1142:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    1144:	2327      	movs	r3, #39	; 0x27
    1146:	5cf3      	ldrb	r3, [r6, r3]
    1148:	2b00      	cmp	r3, #0
    114a:	d101      	bne.n	1150 <usart_init+0x14c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    114c:	3304      	adds	r3, #4
    114e:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1150:	7e73      	ldrb	r3, [r6, #25]
    1152:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1154:	7f32      	ldrb	r2, [r6, #28]
    1156:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1158:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    115a:	7f72      	ldrb	r2, [r6, #29]
    115c:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    115e:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1160:	2224      	movs	r2, #36	; 0x24
    1162:	5cb2      	ldrb	r2, [r6, r2]
    1164:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1166:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    1168:	2225      	movs	r2, #37	; 0x25
    116a:	5cb2      	ldrb	r2, [r6, r2]
    116c:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    116e:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    1170:	7ab1      	ldrb	r1, [r6, #10]
    1172:	7af2      	ldrb	r2, [r6, #11]
    1174:	4311      	orrs	r1, r2
    1176:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    1178:	8933      	ldrh	r3, [r6, #8]
    117a:	2bff      	cmp	r3, #255	; 0xff
    117c:	d100      	bne.n	1180 <usart_init+0x17c>
    117e:	e081      	b.n	1284 <usart_init+0x280>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    1180:	2280      	movs	r2, #128	; 0x80
    1182:	0452      	lsls	r2, r2, #17
    1184:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    1186:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    1188:	232c      	movs	r3, #44	; 0x2c
    118a:	5cf3      	ldrb	r3, [r6, r3]
    118c:	2b00      	cmp	r3, #0
    118e:	d103      	bne.n	1198 <usart_init+0x194>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    1190:	4b62      	ldr	r3, [pc, #392]	; (131c <usart_init+0x318>)
    1192:	789b      	ldrb	r3, [r3, #2]
    1194:	079b      	lsls	r3, r3, #30
    1196:	d501      	bpl.n	119c <usart_init+0x198>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    1198:	2380      	movs	r3, #128	; 0x80
    119a:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    119c:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    119e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    11a0:	2b00      	cmp	r3, #0
    11a2:	d1fc      	bne.n	119e <usart_init+0x19a>
	usart_hw->CTRLB.reg = ctrlb;
    11a4:	4643      	mov	r3, r8
    11a6:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    11a8:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    11aa:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    11ac:	2b00      	cmp	r3, #0
    11ae:	d1fc      	bne.n	11aa <usart_init+0x1a6>
	usart_hw->CTRLA.reg = ctrla;
    11b0:	4643      	mov	r3, r8
    11b2:	601f      	str	r7, [r3, #0]
    11b4:	ab0e      	add	r3, sp, #56	; 0x38
    11b6:	2280      	movs	r2, #128	; 0x80
    11b8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    11ba:	2200      	movs	r2, #0
    11bc:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    11be:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    11c0:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    11c2:	6b33      	ldr	r3, [r6, #48]	; 0x30
    11c4:	930a      	str	r3, [sp, #40]	; 0x28
    11c6:	6b73      	ldr	r3, [r6, #52]	; 0x34
    11c8:	930b      	str	r3, [sp, #44]	; 0x2c
    11ca:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    11cc:	930c      	str	r3, [sp, #48]	; 0x30
    11ce:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    11d0:	9302      	str	r3, [sp, #8]
    11d2:	930d      	str	r3, [sp, #52]	; 0x34
    11d4:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    11d6:	ae0a      	add	r6, sp, #40	; 0x28
    11d8:	e063      	b.n	12a2 <usart_init+0x29e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    11da:	2308      	movs	r3, #8
    11dc:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    11de:	3b07      	subs	r3, #7
    11e0:	9307      	str	r3, [sp, #28]
    11e2:	e77e      	b.n	10e2 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    11e4:	6833      	ldr	r3, [r6, #0]
    11e6:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    11e8:	68f3      	ldr	r3, [r6, #12]
    11ea:	469b      	mov	fp, r3
		config->sample_adjustment |
    11ec:	6973      	ldr	r3, [r6, #20]
    11ee:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    11f0:	7e33      	ldrb	r3, [r6, #24]
    11f2:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    11f4:	2326      	movs	r3, #38	; 0x26
    11f6:	5cf3      	ldrb	r3, [r6, r3]
    11f8:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    11fa:	6873      	ldr	r3, [r6, #4]
    11fc:	4699      	mov	r9, r3
	switch (transfer_mode)
    11fe:	2b00      	cmp	r3, #0
    1200:	d018      	beq.n	1234 <usart_init+0x230>
    1202:	2380      	movs	r3, #128	; 0x80
    1204:	055b      	lsls	r3, r3, #21
    1206:	4599      	cmp	r9, r3
    1208:	d001      	beq.n	120e <usart_init+0x20a>
	enum status_code status_code = STATUS_OK;
    120a:	2000      	movs	r0, #0
    120c:	e025      	b.n	125a <usart_init+0x256>
			if (!config->use_external_clock) {
    120e:	2327      	movs	r3, #39	; 0x27
    1210:	5cf3      	ldrb	r3, [r6, r3]
    1212:	2b00      	cmp	r3, #0
    1214:	d000      	beq.n	1218 <usart_init+0x214>
    1216:	e779      	b.n	110c <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    1218:	6a33      	ldr	r3, [r6, #32]
    121a:	001f      	movs	r7, r3
    121c:	b2c0      	uxtb	r0, r0
    121e:	4b40      	ldr	r3, [pc, #256]	; (1320 <usart_init+0x31c>)
    1220:	4798      	blx	r3
    1222:	0001      	movs	r1, r0
    1224:	220e      	movs	r2, #14
    1226:	ab06      	add	r3, sp, #24
    1228:	469c      	mov	ip, r3
    122a:	4462      	add	r2, ip
    122c:	0038      	movs	r0, r7
    122e:	4b3d      	ldr	r3, [pc, #244]	; (1324 <usart_init+0x320>)
    1230:	4798      	blx	r3
    1232:	e012      	b.n	125a <usart_init+0x256>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1234:	2308      	movs	r3, #8
    1236:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1238:	2300      	movs	r3, #0
    123a:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    123c:	2327      	movs	r3, #39	; 0x27
    123e:	5cf3      	ldrb	r3, [r6, r3]
    1240:	2b00      	cmp	r3, #0
    1242:	d00e      	beq.n	1262 <usart_init+0x25e>
				status_code =
    1244:	9b06      	ldr	r3, [sp, #24]
    1246:	9300      	str	r3, [sp, #0]
    1248:	9b07      	ldr	r3, [sp, #28]
    124a:	220e      	movs	r2, #14
    124c:	a906      	add	r1, sp, #24
    124e:	468c      	mov	ip, r1
    1250:	4462      	add	r2, ip
    1252:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    1254:	6a30      	ldr	r0, [r6, #32]
    1256:	4f34      	ldr	r7, [pc, #208]	; (1328 <usart_init+0x324>)
    1258:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    125a:	2800      	cmp	r0, #0
    125c:	d000      	beq.n	1260 <usart_init+0x25c>
    125e:	e6e4      	b.n	102a <usart_init+0x26>
    1260:	e754      	b.n	110c <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    1262:	6a33      	ldr	r3, [r6, #32]
    1264:	001f      	movs	r7, r3
    1266:	b2c0      	uxtb	r0, r0
    1268:	4b2d      	ldr	r3, [pc, #180]	; (1320 <usart_init+0x31c>)
    126a:	4798      	blx	r3
    126c:	0001      	movs	r1, r0
				status_code =
    126e:	9b06      	ldr	r3, [sp, #24]
    1270:	9300      	str	r3, [sp, #0]
    1272:	9b07      	ldr	r3, [sp, #28]
    1274:	220e      	movs	r2, #14
    1276:	a806      	add	r0, sp, #24
    1278:	4684      	mov	ip, r0
    127a:	4462      	add	r2, ip
    127c:	0038      	movs	r0, r7
    127e:	4f2a      	ldr	r7, [pc, #168]	; (1328 <usart_init+0x324>)
    1280:	47b8      	blx	r7
    1282:	e7ea      	b.n	125a <usart_init+0x256>
		if(config->lin_slave_enable) {
    1284:	7ef3      	ldrb	r3, [r6, #27]
    1286:	2b00      	cmp	r3, #0
    1288:	d100      	bne.n	128c <usart_init+0x288>
    128a:	e77d      	b.n	1188 <usart_init+0x184>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    128c:	2380      	movs	r3, #128	; 0x80
    128e:	04db      	lsls	r3, r3, #19
    1290:	431f      	orrs	r7, r3
    1292:	e779      	b.n	1188 <usart_init+0x184>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1294:	0020      	movs	r0, r4
    1296:	4b25      	ldr	r3, [pc, #148]	; (132c <usart_init+0x328>)
    1298:	4798      	blx	r3
    129a:	e007      	b.n	12ac <usart_init+0x2a8>
    129c:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    129e:	2f04      	cmp	r7, #4
    12a0:	d00d      	beq.n	12be <usart_init+0x2ba>
    12a2:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    12a4:	00bb      	lsls	r3, r7, #2
    12a6:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    12a8:	2800      	cmp	r0, #0
    12aa:	d0f3      	beq.n	1294 <usart_init+0x290>
		if (current_pinmux != PINMUX_UNUSED) {
    12ac:	1c43      	adds	r3, r0, #1
    12ae:	d0f5      	beq.n	129c <usart_init+0x298>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    12b0:	a90e      	add	r1, sp, #56	; 0x38
    12b2:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    12b4:	0c00      	lsrs	r0, r0, #16
    12b6:	b2c0      	uxtb	r0, r0
    12b8:	4b1d      	ldr	r3, [pc, #116]	; (1330 <usart_init+0x32c>)
    12ba:	4798      	blx	r3
    12bc:	e7ee      	b.n	129c <usart_init+0x298>
		module->callback[i]            = NULL;
    12be:	2300      	movs	r3, #0
    12c0:	60eb      	str	r3, [r5, #12]
    12c2:	612b      	str	r3, [r5, #16]
    12c4:	616b      	str	r3, [r5, #20]
    12c6:	61ab      	str	r3, [r5, #24]
    12c8:	61eb      	str	r3, [r5, #28]
    12ca:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    12cc:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    12ce:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    12d0:	2200      	movs	r2, #0
    12d2:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    12d4:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    12d6:	3330      	adds	r3, #48	; 0x30
    12d8:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    12da:	3301      	adds	r3, #1
    12dc:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    12de:	3301      	adds	r3, #1
    12e0:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    12e2:	3301      	adds	r3, #1
    12e4:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    12e6:	6828      	ldr	r0, [r5, #0]
    12e8:	4b07      	ldr	r3, [pc, #28]	; (1308 <usart_init+0x304>)
    12ea:	4798      	blx	r3
    12ec:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    12ee:	4911      	ldr	r1, [pc, #68]	; (1334 <usart_init+0x330>)
    12f0:	4b11      	ldr	r3, [pc, #68]	; (1338 <usart_init+0x334>)
    12f2:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    12f4:	00a4      	lsls	r4, r4, #2
    12f6:	4b11      	ldr	r3, [pc, #68]	; (133c <usart_init+0x338>)
    12f8:	50e5      	str	r5, [r4, r3]
	return status_code;
    12fa:	2000      	movs	r0, #0
    12fc:	e695      	b.n	102a <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    12fe:	2310      	movs	r3, #16
    1300:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1302:	2300      	movs	r3, #0
    1304:	9307      	str	r3, [sp, #28]
    1306:	e6ec      	b.n	10e2 <usart_init+0xde>
    1308:	00000efd 	.word	0x00000efd
    130c:	40000400 	.word	0x40000400
    1310:	00001c31 	.word	0x00001c31
    1314:	00001ba5 	.word	0x00001ba5
    1318:	00000d39 	.word	0x00000d39
    131c:	41002000 	.word	0x41002000
    1320:	00001c4d 	.word	0x00001c4d
    1324:	00000c7b 	.word	0x00000c7b
    1328:	00000ca5 	.word	0x00000ca5
    132c:	00000d85 	.word	0x00000d85
    1330:	00001d29 	.word	0x00001d29
    1334:	00001459 	.word	0x00001459
    1338:	00000f39 	.word	0x00000f39
    133c:	200002b0 	.word	0x200002b0

00001340 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1340:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    1342:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    1344:	2a00      	cmp	r2, #0
    1346:	d101      	bne.n	134c <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    1348:	0018      	movs	r0, r3
    134a:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    134c:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    134e:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    1350:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    1352:	2a00      	cmp	r2, #0
    1354:	d1f8      	bne.n	1348 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    1356:	6802      	ldr	r2, [r0, #0]
	usart_hw->DATA.reg = tx_data;
    1358:	8511      	strh	r1, [r2, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    135a:	2102      	movs	r1, #2
    135c:	7e13      	ldrb	r3, [r2, #24]
    135e:	420b      	tst	r3, r1
    1360:	d0fc      	beq.n	135c <usart_write_wait+0x1c>
	return STATUS_OK;
    1362:	2300      	movs	r3, #0
    1364:	e7f0      	b.n	1348 <usart_write_wait+0x8>

00001366 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    1366:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    1368:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    136a:	2a00      	cmp	r2, #0
    136c:	d101      	bne.n	1372 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    136e:	0018      	movs	r0, r3
    1370:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    1372:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    1374:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    1376:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    1378:	2a00      	cmp	r2, #0
    137a:	d1f8      	bne.n	136e <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    137c:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    137e:	7e10      	ldrb	r0, [r2, #24]
    1380:	0740      	lsls	r0, r0, #29
    1382:	d5f4      	bpl.n	136e <usart_read_wait+0x8>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1384:	8b53      	ldrh	r3, [r2, #26]
    1386:	b2db      	uxtb	r3, r3
	if (error_code) {
    1388:	0698      	lsls	r0, r3, #26
    138a:	d01d      	beq.n	13c8 <usart_read_wait+0x62>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    138c:	0798      	lsls	r0, r3, #30
    138e:	d503      	bpl.n	1398 <usart_read_wait+0x32>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1390:	2302      	movs	r3, #2
    1392:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    1394:	3318      	adds	r3, #24
    1396:	e7ea      	b.n	136e <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1398:	0758      	lsls	r0, r3, #29
    139a:	d503      	bpl.n	13a4 <usart_read_wait+0x3e>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    139c:	2304      	movs	r3, #4
    139e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    13a0:	331a      	adds	r3, #26
    13a2:	e7e4      	b.n	136e <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    13a4:	07d8      	lsls	r0, r3, #31
    13a6:	d503      	bpl.n	13b0 <usart_read_wait+0x4a>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    13a8:	2301      	movs	r3, #1
    13aa:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    13ac:	3312      	adds	r3, #18
    13ae:	e7de      	b.n	136e <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    13b0:	06d8      	lsls	r0, r3, #27
    13b2:	d503      	bpl.n	13bc <usart_read_wait+0x56>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    13b4:	2310      	movs	r3, #16
    13b6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    13b8:	3332      	adds	r3, #50	; 0x32
    13ba:	e7d8      	b.n	136e <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    13bc:	069b      	lsls	r3, r3, #26
    13be:	d503      	bpl.n	13c8 <usart_read_wait+0x62>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    13c0:	2320      	movs	r3, #32
    13c2:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    13c4:	3321      	adds	r3, #33	; 0x21
    13c6:	e7d2      	b.n	136e <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    13c8:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    13ca:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    13cc:	2300      	movs	r3, #0
    13ce:	e7ce      	b.n	136e <usart_read_wait+0x8>

000013d0 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    13d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    13d2:	0004      	movs	r4, r0
    13d4:	000d      	movs	r5, r1
    13d6:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    13d8:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    13da:	4b0f      	ldr	r3, [pc, #60]	; (1418 <_usart_read_buffer+0x48>)
    13dc:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    13de:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    13e0:	b29b      	uxth	r3, r3
    13e2:	2b00      	cmp	r3, #0
    13e4:	d003      	beq.n	13ee <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
    13e6:	4b0d      	ldr	r3, [pc, #52]	; (141c <_usart_read_buffer+0x4c>)
    13e8:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    13ea:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    13ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    13ee:	85a6      	strh	r6, [r4, #44]	; 0x2c
    13f0:	4b0a      	ldr	r3, [pc, #40]	; (141c <_usart_read_buffer+0x4c>)
    13f2:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    13f4:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    13f6:	2205      	movs	r2, #5
    13f8:	2332      	movs	r3, #50	; 0x32
    13fa:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    13fc:	3b2e      	subs	r3, #46	; 0x2e
    13fe:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
    1400:	7a23      	ldrb	r3, [r4, #8]
    1402:	2b00      	cmp	r3, #0
    1404:	d001      	beq.n	140a <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    1406:	2320      	movs	r3, #32
    1408:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
    140a:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
    140c:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
    140e:	2b00      	cmp	r3, #0
    1410:	d0ec      	beq.n	13ec <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    1412:	2308      	movs	r3, #8
    1414:	75bb      	strb	r3, [r7, #22]
    1416:	e7e9      	b.n	13ec <_usart_read_buffer+0x1c>
    1418:	000005c5 	.word	0x000005c5
    141c:	00000605 	.word	0x00000605

00001420 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    1420:	1c93      	adds	r3, r2, #2
    1422:	009b      	lsls	r3, r3, #2
    1424:	18c3      	adds	r3, r0, r3
    1426:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    1428:	2130      	movs	r1, #48	; 0x30
    142a:	2301      	movs	r3, #1
    142c:	4093      	lsls	r3, r2
    142e:	001a      	movs	r2, r3
    1430:	5c43      	ldrb	r3, [r0, r1]
    1432:	4313      	orrs	r3, r2
    1434:	5443      	strb	r3, [r0, r1]
}
    1436:	4770      	bx	lr

00001438 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    1438:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    143a:	2317      	movs	r3, #23
	if (length == 0) {
    143c:	2a00      	cmp	r2, #0
    143e:	d101      	bne.n	1444 <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
    1440:	0018      	movs	r0, r3
    1442:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
    1444:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
    1446:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
    1448:	2c00      	cmp	r4, #0
    144a:	d0f9      	beq.n	1440 <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
    144c:	4b01      	ldr	r3, [pc, #4]	; (1454 <usart_read_buffer_job+0x1c>)
    144e:	4798      	blx	r3
    1450:	0003      	movs	r3, r0
    1452:	e7f5      	b.n	1440 <usart_read_buffer_job+0x8>
    1454:	000013d1 	.word	0x000013d1

00001458 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    1458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    145a:	0080      	lsls	r0, r0, #2
    145c:	4b62      	ldr	r3, [pc, #392]	; (15e8 <_usart_interrupt_handler+0x190>)
    145e:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    1460:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1462:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    1464:	2b00      	cmp	r3, #0
    1466:	d1fc      	bne.n	1462 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    1468:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    146a:	7da6      	ldrb	r6, [r4, #22]
    146c:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    146e:	2330      	movs	r3, #48	; 0x30
    1470:	5ceb      	ldrb	r3, [r5, r3]
    1472:	2231      	movs	r2, #49	; 0x31
    1474:	5caf      	ldrb	r7, [r5, r2]
    1476:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    1478:	07f3      	lsls	r3, r6, #31
    147a:	d522      	bpl.n	14c2 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    147c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    147e:	b29b      	uxth	r3, r3
    1480:	2b00      	cmp	r3, #0
    1482:	d01c      	beq.n	14be <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1484:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    1486:	7813      	ldrb	r3, [r2, #0]
    1488:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    148a:	1c51      	adds	r1, r2, #1
    148c:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    148e:	7969      	ldrb	r1, [r5, #5]
    1490:	2901      	cmp	r1, #1
    1492:	d00e      	beq.n	14b2 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1494:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    1496:	05db      	lsls	r3, r3, #23
    1498:	0ddb      	lsrs	r3, r3, #23
    149a:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    149c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    149e:	3b01      	subs	r3, #1
    14a0:	b29b      	uxth	r3, r3
    14a2:	85eb      	strh	r3, [r5, #46]	; 0x2e
    14a4:	2b00      	cmp	r3, #0
    14a6:	d10c      	bne.n	14c2 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    14a8:	3301      	adds	r3, #1
    14aa:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    14ac:	3301      	adds	r3, #1
    14ae:	75a3      	strb	r3, [r4, #22]
    14b0:	e007      	b.n	14c2 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    14b2:	7851      	ldrb	r1, [r2, #1]
    14b4:	0209      	lsls	r1, r1, #8
    14b6:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    14b8:	3202      	adds	r2, #2
    14ba:	62aa      	str	r2, [r5, #40]	; 0x28
    14bc:	e7eb      	b.n	1496 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    14be:	2301      	movs	r3, #1
    14c0:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    14c2:	07b3      	lsls	r3, r6, #30
    14c4:	d506      	bpl.n	14d4 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    14c6:	2302      	movs	r3, #2
    14c8:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    14ca:	2200      	movs	r2, #0
    14cc:	3331      	adds	r3, #49	; 0x31
    14ce:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    14d0:	07fb      	lsls	r3, r7, #31
    14d2:	d41a      	bmi.n	150a <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    14d4:	0773      	lsls	r3, r6, #29
    14d6:	d565      	bpl.n	15a4 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    14d8:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    14da:	b29b      	uxth	r3, r3
    14dc:	2b00      	cmp	r3, #0
    14de:	d05f      	beq.n	15a0 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    14e0:	8b63      	ldrh	r3, [r4, #26]
    14e2:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    14e4:	071a      	lsls	r2, r3, #28
    14e6:	d414      	bmi.n	1512 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    14e8:	223f      	movs	r2, #63	; 0x3f
    14ea:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    14ec:	2b00      	cmp	r3, #0
    14ee:	d034      	beq.n	155a <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    14f0:	079a      	lsls	r2, r3, #30
    14f2:	d511      	bpl.n	1518 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    14f4:	221a      	movs	r2, #26
    14f6:	2332      	movs	r3, #50	; 0x32
    14f8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    14fa:	3b30      	subs	r3, #48	; 0x30
    14fc:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    14fe:	077b      	lsls	r3, r7, #29
    1500:	d550      	bpl.n	15a4 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    1502:	0028      	movs	r0, r5
    1504:	696b      	ldr	r3, [r5, #20]
    1506:	4798      	blx	r3
    1508:	e04c      	b.n	15a4 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    150a:	0028      	movs	r0, r5
    150c:	68eb      	ldr	r3, [r5, #12]
    150e:	4798      	blx	r3
    1510:	e7e0      	b.n	14d4 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    1512:	2237      	movs	r2, #55	; 0x37
    1514:	4013      	ands	r3, r2
    1516:	e7e9      	b.n	14ec <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1518:	075a      	lsls	r2, r3, #29
    151a:	d505      	bpl.n	1528 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    151c:	221e      	movs	r2, #30
    151e:	2332      	movs	r3, #50	; 0x32
    1520:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1522:	3b2e      	subs	r3, #46	; 0x2e
    1524:	8363      	strh	r3, [r4, #26]
    1526:	e7ea      	b.n	14fe <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1528:	07da      	lsls	r2, r3, #31
    152a:	d505      	bpl.n	1538 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    152c:	2213      	movs	r2, #19
    152e:	2332      	movs	r3, #50	; 0x32
    1530:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1532:	3b31      	subs	r3, #49	; 0x31
    1534:	8363      	strh	r3, [r4, #26]
    1536:	e7e2      	b.n	14fe <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    1538:	06da      	lsls	r2, r3, #27
    153a:	d505      	bpl.n	1548 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    153c:	2242      	movs	r2, #66	; 0x42
    153e:	2332      	movs	r3, #50	; 0x32
    1540:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1542:	3b22      	subs	r3, #34	; 0x22
    1544:	8363      	strh	r3, [r4, #26]
    1546:	e7da      	b.n	14fe <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    1548:	2220      	movs	r2, #32
    154a:	421a      	tst	r2, r3
    154c:	d0d7      	beq.n	14fe <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    154e:	3221      	adds	r2, #33	; 0x21
    1550:	2332      	movs	r3, #50	; 0x32
    1552:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1554:	3b12      	subs	r3, #18
    1556:	8363      	strh	r3, [r4, #26]
    1558:	e7d1      	b.n	14fe <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    155a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    155c:	05db      	lsls	r3, r3, #23
    155e:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    1560:	b2da      	uxtb	r2, r3
    1562:	6a69      	ldr	r1, [r5, #36]	; 0x24
    1564:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    1566:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    1568:	1c51      	adds	r1, r2, #1
    156a:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    156c:	7969      	ldrb	r1, [r5, #5]
    156e:	2901      	cmp	r1, #1
    1570:	d010      	beq.n	1594 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    1572:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1574:	3b01      	subs	r3, #1
    1576:	b29b      	uxth	r3, r3
    1578:	85ab      	strh	r3, [r5, #44]	; 0x2c
    157a:	2b00      	cmp	r3, #0
    157c:	d112      	bne.n	15a4 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    157e:	3304      	adds	r3, #4
    1580:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    1582:	2200      	movs	r2, #0
    1584:	332e      	adds	r3, #46	; 0x2e
    1586:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    1588:	07bb      	lsls	r3, r7, #30
    158a:	d50b      	bpl.n	15a4 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    158c:	0028      	movs	r0, r5
    158e:	692b      	ldr	r3, [r5, #16]
    1590:	4798      	blx	r3
    1592:	e007      	b.n	15a4 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    1594:	0a1b      	lsrs	r3, r3, #8
    1596:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    1598:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    159a:	3301      	adds	r3, #1
    159c:	626b      	str	r3, [r5, #36]	; 0x24
    159e:	e7e8      	b.n	1572 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    15a0:	2304      	movs	r3, #4
    15a2:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    15a4:	06f3      	lsls	r3, r6, #27
    15a6:	d504      	bpl.n	15b2 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    15a8:	2310      	movs	r3, #16
    15aa:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    15ac:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    15ae:	06fb      	lsls	r3, r7, #27
    15b0:	d40e      	bmi.n	15d0 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    15b2:	06b3      	lsls	r3, r6, #26
    15b4:	d504      	bpl.n	15c0 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    15b6:	2320      	movs	r3, #32
    15b8:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    15ba:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    15bc:	073b      	lsls	r3, r7, #28
    15be:	d40b      	bmi.n	15d8 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    15c0:	0733      	lsls	r3, r6, #28
    15c2:	d504      	bpl.n	15ce <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    15c4:	2308      	movs	r3, #8
    15c6:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    15c8:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    15ca:	06bb      	lsls	r3, r7, #26
    15cc:	d408      	bmi.n	15e0 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    15ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    15d0:	0028      	movs	r0, r5
    15d2:	69eb      	ldr	r3, [r5, #28]
    15d4:	4798      	blx	r3
    15d6:	e7ec      	b.n	15b2 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    15d8:	0028      	movs	r0, r5
    15da:	69ab      	ldr	r3, [r5, #24]
    15dc:	4798      	blx	r3
    15de:	e7ef      	b.n	15c0 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    15e0:	6a2b      	ldr	r3, [r5, #32]
    15e2:	0028      	movs	r0, r5
    15e4:	4798      	blx	r3
}
    15e6:	e7f2      	b.n	15ce <_usart_interrupt_handler+0x176>
    15e8:	200002b0 	.word	0x200002b0

000015ec <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    15ec:	b510      	push	{r4, lr}
	switch (clock_source) {
    15ee:	2808      	cmp	r0, #8
    15f0:	d803      	bhi.n	15fa <system_clock_source_get_hz+0xe>
    15f2:	0080      	lsls	r0, r0, #2
    15f4:	4b1c      	ldr	r3, [pc, #112]	; (1668 <system_clock_source_get_hz+0x7c>)
    15f6:	581b      	ldr	r3, [r3, r0]
    15f8:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    15fa:	2000      	movs	r0, #0
    15fc:	e032      	b.n	1664 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    15fe:	4b1b      	ldr	r3, [pc, #108]	; (166c <system_clock_source_get_hz+0x80>)
    1600:	6918      	ldr	r0, [r3, #16]
    1602:	e02f      	b.n	1664 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1604:	4b1a      	ldr	r3, [pc, #104]	; (1670 <system_clock_source_get_hz+0x84>)
    1606:	6a1b      	ldr	r3, [r3, #32]
    1608:	059b      	lsls	r3, r3, #22
    160a:	0f9b      	lsrs	r3, r3, #30
    160c:	4819      	ldr	r0, [pc, #100]	; (1674 <system_clock_source_get_hz+0x88>)
    160e:	40d8      	lsrs	r0, r3
    1610:	e028      	b.n	1664 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    1612:	4b16      	ldr	r3, [pc, #88]	; (166c <system_clock_source_get_hz+0x80>)
    1614:	6958      	ldr	r0, [r3, #20]
    1616:	e025      	b.n	1664 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1618:	4b14      	ldr	r3, [pc, #80]	; (166c <system_clock_source_get_hz+0x80>)
    161a:	681b      	ldr	r3, [r3, #0]
			return 0;
    161c:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    161e:	079b      	lsls	r3, r3, #30
    1620:	d520      	bpl.n	1664 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1622:	4913      	ldr	r1, [pc, #76]	; (1670 <system_clock_source_get_hz+0x84>)
    1624:	2210      	movs	r2, #16
    1626:	68cb      	ldr	r3, [r1, #12]
    1628:	421a      	tst	r2, r3
    162a:	d0fc      	beq.n	1626 <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    162c:	4b0f      	ldr	r3, [pc, #60]	; (166c <system_clock_source_get_hz+0x80>)
    162e:	681a      	ldr	r2, [r3, #0]
    1630:	2324      	movs	r3, #36	; 0x24
    1632:	4013      	ands	r3, r2
    1634:	2b04      	cmp	r3, #4
    1636:	d001      	beq.n	163c <system_clock_source_get_hz+0x50>
			return 48000000UL;
    1638:	480f      	ldr	r0, [pc, #60]	; (1678 <system_clock_source_get_hz+0x8c>)
    163a:	e013      	b.n	1664 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    163c:	2000      	movs	r0, #0
    163e:	4b0f      	ldr	r3, [pc, #60]	; (167c <system_clock_source_get_hz+0x90>)
    1640:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    1642:	4b0a      	ldr	r3, [pc, #40]	; (166c <system_clock_source_get_hz+0x80>)
    1644:	689b      	ldr	r3, [r3, #8]
    1646:	041b      	lsls	r3, r3, #16
    1648:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    164a:	4358      	muls	r0, r3
    164c:	e00a      	b.n	1664 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    164e:	2350      	movs	r3, #80	; 0x50
    1650:	4a07      	ldr	r2, [pc, #28]	; (1670 <system_clock_source_get_hz+0x84>)
    1652:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    1654:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1656:	075b      	lsls	r3, r3, #29
    1658:	d504      	bpl.n	1664 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    165a:	4b04      	ldr	r3, [pc, #16]	; (166c <system_clock_source_get_hz+0x80>)
    165c:	68d8      	ldr	r0, [r3, #12]
    165e:	e001      	b.n	1664 <system_clock_source_get_hz+0x78>
		return 32768UL;
    1660:	2080      	movs	r0, #128	; 0x80
    1662:	0200      	lsls	r0, r0, #8
	}
}
    1664:	bd10      	pop	{r4, pc}
    1666:	46c0      	nop			; (mov r8, r8)
    1668:	00004d68 	.word	0x00004d68
    166c:	2000027c 	.word	0x2000027c
    1670:	40000800 	.word	0x40000800
    1674:	007a1200 	.word	0x007a1200
    1678:	02dc6c00 	.word	0x02dc6c00
    167c:	00001c4d 	.word	0x00001c4d

00001680 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1680:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1682:	490c      	ldr	r1, [pc, #48]	; (16b4 <system_clock_source_osc8m_set_config+0x34>)
    1684:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    1686:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1688:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    168a:	7840      	ldrb	r0, [r0, #1]
    168c:	2201      	movs	r2, #1
    168e:	4010      	ands	r0, r2
    1690:	0180      	lsls	r0, r0, #6
    1692:	2640      	movs	r6, #64	; 0x40
    1694:	43b3      	bics	r3, r6
    1696:	4303      	orrs	r3, r0
    1698:	402a      	ands	r2, r5
    169a:	01d2      	lsls	r2, r2, #7
    169c:	2080      	movs	r0, #128	; 0x80
    169e:	4383      	bics	r3, r0
    16a0:	4313      	orrs	r3, r2
    16a2:	2203      	movs	r2, #3
    16a4:	4022      	ands	r2, r4
    16a6:	0212      	lsls	r2, r2, #8
    16a8:	4803      	ldr	r0, [pc, #12]	; (16b8 <system_clock_source_osc8m_set_config+0x38>)
    16aa:	4003      	ands	r3, r0
    16ac:	4313      	orrs	r3, r2
    16ae:	620b      	str	r3, [r1, #32]
}
    16b0:	bd70      	pop	{r4, r5, r6, pc}
    16b2:	46c0      	nop			; (mov r8, r8)
    16b4:	40000800 	.word	0x40000800
    16b8:	fffffcff 	.word	0xfffffcff

000016bc <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    16bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    16be:	46de      	mov	lr, fp
    16c0:	4657      	mov	r7, sl
    16c2:	464e      	mov	r6, r9
    16c4:	4645      	mov	r5, r8
    16c6:	b5e0      	push	{r5, r6, r7, lr}
    16c8:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    16ca:	4b26      	ldr	r3, [pc, #152]	; (1764 <system_clock_source_xosc32k_set_config+0xa8>)
    16cc:	469b      	mov	fp, r3
    16ce:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    16d0:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    16d2:	7800      	ldrb	r0, [r0, #0]
    16d4:	4242      	negs	r2, r0
    16d6:	4142      	adcs	r2, r0
    16d8:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    16da:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    16dc:	78ca      	ldrb	r2, [r1, #3]
    16de:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    16e0:	790a      	ldrb	r2, [r1, #4]
    16e2:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    16e4:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    16e6:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    16e8:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    16ea:	688a      	ldr	r2, [r1, #8]
    16ec:	491e      	ldr	r1, [pc, #120]	; (1768 <system_clock_source_xosc32k_set_config+0xac>)
    16ee:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    16f0:	2101      	movs	r1, #1
    16f2:	464a      	mov	r2, r9
    16f4:	0092      	lsls	r2, r2, #2
    16f6:	4691      	mov	r9, r2
    16f8:	2204      	movs	r2, #4
    16fa:	4393      	bics	r3, r2
    16fc:	464a      	mov	r2, r9
    16fe:	4313      	orrs	r3, r2
    1700:	4642      	mov	r2, r8
    1702:	400a      	ands	r2, r1
    1704:	00d2      	lsls	r2, r2, #3
    1706:	4690      	mov	r8, r2
    1708:	2208      	movs	r2, #8
    170a:	4393      	bics	r3, r2
    170c:	4642      	mov	r2, r8
    170e:	4313      	orrs	r3, r2
    1710:	4662      	mov	r2, ip
    1712:	400a      	ands	r2, r1
    1714:	0112      	lsls	r2, r2, #4
    1716:	4694      	mov	ip, r2
    1718:	2210      	movs	r2, #16
    171a:	4393      	bics	r3, r2
    171c:	4662      	mov	r2, ip
    171e:	4313      	orrs	r3, r2
    1720:	4008      	ands	r0, r1
    1722:	0140      	lsls	r0, r0, #5
    1724:	2220      	movs	r2, #32
    1726:	4393      	bics	r3, r2
    1728:	4303      	orrs	r3, r0
    172a:	400f      	ands	r7, r1
    172c:	01bf      	lsls	r7, r7, #6
    172e:	2040      	movs	r0, #64	; 0x40
    1730:	4383      	bics	r3, r0
    1732:	433b      	orrs	r3, r7
    1734:	400e      	ands	r6, r1
    1736:	01f6      	lsls	r6, r6, #7
    1738:	3040      	adds	r0, #64	; 0x40
    173a:	4383      	bics	r3, r0
    173c:	4333      	orrs	r3, r6
    173e:	3879      	subs	r0, #121	; 0x79
    1740:	4005      	ands	r5, r0
    1742:	022d      	lsls	r5, r5, #8
    1744:	4809      	ldr	r0, [pc, #36]	; (176c <system_clock_source_xosc32k_set_config+0xb0>)
    1746:	4003      	ands	r3, r0
    1748:	432b      	orrs	r3, r5
    174a:	4021      	ands	r1, r4
    174c:	0309      	lsls	r1, r1, #12
    174e:	4808      	ldr	r0, [pc, #32]	; (1770 <system_clock_source_xosc32k_set_config+0xb4>)
    1750:	4003      	ands	r3, r0
    1752:	430b      	orrs	r3, r1
    1754:	465a      	mov	r2, fp
    1756:	8293      	strh	r3, [r2, #20]
}
    1758:	bc3c      	pop	{r2, r3, r4, r5}
    175a:	4690      	mov	r8, r2
    175c:	4699      	mov	r9, r3
    175e:	46a2      	mov	sl, r4
    1760:	46ab      	mov	fp, r5
    1762:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1764:	40000800 	.word	0x40000800
    1768:	2000027c 	.word	0x2000027c
    176c:	fffff8ff 	.word	0xfffff8ff
    1770:	ffffefff 	.word	0xffffefff

00001774 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    1774:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1776:	7a03      	ldrb	r3, [r0, #8]
    1778:	069b      	lsls	r3, r3, #26
    177a:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    177c:	8942      	ldrh	r2, [r0, #10]
    177e:	0592      	lsls	r2, r2, #22
    1780:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1782:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    1784:	4918      	ldr	r1, [pc, #96]	; (17e8 <system_clock_source_dfll_set_config+0x74>)
    1786:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    1788:	7983      	ldrb	r3, [r0, #6]
    178a:	79c2      	ldrb	r2, [r0, #7]
    178c:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    178e:	8842      	ldrh	r2, [r0, #2]
    1790:	8884      	ldrh	r4, [r0, #4]
    1792:	4322      	orrs	r2, r4
    1794:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    1796:	7842      	ldrb	r2, [r0, #1]
    1798:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    179a:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    179c:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    179e:	7803      	ldrb	r3, [r0, #0]
    17a0:	2b04      	cmp	r3, #4
    17a2:	d011      	beq.n	17c8 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    17a4:	2b20      	cmp	r3, #32
    17a6:	d10e      	bne.n	17c6 <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    17a8:	7b03      	ldrb	r3, [r0, #12]
    17aa:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    17ac:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    17ae:	4313      	orrs	r3, r2
    17b0:	89c2      	ldrh	r2, [r0, #14]
    17b2:	0412      	lsls	r2, r2, #16
    17b4:	490d      	ldr	r1, [pc, #52]	; (17ec <system_clock_source_dfll_set_config+0x78>)
    17b6:	400a      	ands	r2, r1
    17b8:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    17ba:	4a0b      	ldr	r2, [pc, #44]	; (17e8 <system_clock_source_dfll_set_config+0x74>)
    17bc:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    17be:	6811      	ldr	r1, [r2, #0]
    17c0:	4b0b      	ldr	r3, [pc, #44]	; (17f0 <system_clock_source_dfll_set_config+0x7c>)
    17c2:	430b      	orrs	r3, r1
    17c4:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    17c6:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    17c8:	7b03      	ldrb	r3, [r0, #12]
    17ca:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    17cc:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    17ce:	4313      	orrs	r3, r2
    17d0:	89c2      	ldrh	r2, [r0, #14]
    17d2:	0412      	lsls	r2, r2, #16
    17d4:	4905      	ldr	r1, [pc, #20]	; (17ec <system_clock_source_dfll_set_config+0x78>)
    17d6:	400a      	ands	r2, r1
    17d8:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    17da:	4a03      	ldr	r2, [pc, #12]	; (17e8 <system_clock_source_dfll_set_config+0x74>)
    17dc:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    17de:	6813      	ldr	r3, [r2, #0]
    17e0:	2104      	movs	r1, #4
    17e2:	430b      	orrs	r3, r1
    17e4:	6013      	str	r3, [r2, #0]
    17e6:	e7ee      	b.n	17c6 <system_clock_source_dfll_set_config+0x52>
    17e8:	2000027c 	.word	0x2000027c
    17ec:	03ff0000 	.word	0x03ff0000
    17f0:	00000424 	.word	0x00000424

000017f4 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    17f4:	2808      	cmp	r0, #8
    17f6:	d803      	bhi.n	1800 <system_clock_source_enable+0xc>
    17f8:	0080      	lsls	r0, r0, #2
    17fa:	4b25      	ldr	r3, [pc, #148]	; (1890 <system_clock_source_enable+0x9c>)
    17fc:	581b      	ldr	r3, [r3, r0]
    17fe:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1800:	2017      	movs	r0, #23
    1802:	e044      	b.n	188e <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1804:	4a23      	ldr	r2, [pc, #140]	; (1894 <system_clock_source_enable+0xa0>)
    1806:	6a13      	ldr	r3, [r2, #32]
    1808:	2102      	movs	r1, #2
    180a:	430b      	orrs	r3, r1
    180c:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    180e:	2000      	movs	r0, #0
    1810:	e03d      	b.n	188e <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1812:	4a20      	ldr	r2, [pc, #128]	; (1894 <system_clock_source_enable+0xa0>)
    1814:	6993      	ldr	r3, [r2, #24]
    1816:	2102      	movs	r1, #2
    1818:	430b      	orrs	r3, r1
    181a:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    181c:	2000      	movs	r0, #0
		break;
    181e:	e036      	b.n	188e <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1820:	4a1c      	ldr	r2, [pc, #112]	; (1894 <system_clock_source_enable+0xa0>)
    1822:	8a13      	ldrh	r3, [r2, #16]
    1824:	2102      	movs	r1, #2
    1826:	430b      	orrs	r3, r1
    1828:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    182a:	2000      	movs	r0, #0
		break;
    182c:	e02f      	b.n	188e <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    182e:	4a19      	ldr	r2, [pc, #100]	; (1894 <system_clock_source_enable+0xa0>)
    1830:	8a93      	ldrh	r3, [r2, #20]
    1832:	2102      	movs	r1, #2
    1834:	430b      	orrs	r3, r1
    1836:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    1838:	2000      	movs	r0, #0
		break;
    183a:	e028      	b.n	188e <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    183c:	4916      	ldr	r1, [pc, #88]	; (1898 <system_clock_source_enable+0xa4>)
    183e:	680b      	ldr	r3, [r1, #0]
    1840:	2202      	movs	r2, #2
    1842:	4313      	orrs	r3, r2
    1844:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1846:	4b13      	ldr	r3, [pc, #76]	; (1894 <system_clock_source_enable+0xa0>)
    1848:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    184a:	0019      	movs	r1, r3
    184c:	320e      	adds	r2, #14
    184e:	68cb      	ldr	r3, [r1, #12]
    1850:	421a      	tst	r2, r3
    1852:	d0fc      	beq.n	184e <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1854:	4a10      	ldr	r2, [pc, #64]	; (1898 <system_clock_source_enable+0xa4>)
    1856:	6891      	ldr	r1, [r2, #8]
    1858:	4b0e      	ldr	r3, [pc, #56]	; (1894 <system_clock_source_enable+0xa0>)
    185a:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    185c:	6852      	ldr	r2, [r2, #4]
    185e:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    1860:	2200      	movs	r2, #0
    1862:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1864:	0019      	movs	r1, r3
    1866:	3210      	adds	r2, #16
    1868:	68cb      	ldr	r3, [r1, #12]
    186a:	421a      	tst	r2, r3
    186c:	d0fc      	beq.n	1868 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    186e:	4b0a      	ldr	r3, [pc, #40]	; (1898 <system_clock_source_enable+0xa4>)
    1870:	681b      	ldr	r3, [r3, #0]
    1872:	b29b      	uxth	r3, r3
    1874:	4a07      	ldr	r2, [pc, #28]	; (1894 <system_clock_source_enable+0xa0>)
    1876:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    1878:	2000      	movs	r0, #0
    187a:	e008      	b.n	188e <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    187c:	4905      	ldr	r1, [pc, #20]	; (1894 <system_clock_source_enable+0xa0>)
    187e:	2244      	movs	r2, #68	; 0x44
    1880:	5c8b      	ldrb	r3, [r1, r2]
    1882:	2002      	movs	r0, #2
    1884:	4303      	orrs	r3, r0
    1886:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    1888:	2000      	movs	r0, #0
		break;
    188a:	e000      	b.n	188e <system_clock_source_enable+0x9a>
		return STATUS_OK;
    188c:	2000      	movs	r0, #0
}
    188e:	4770      	bx	lr
    1890:	00004d8c 	.word	0x00004d8c
    1894:	40000800 	.word	0x40000800
    1898:	2000027c 	.word	0x2000027c

0000189c <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    189c:	b5f0      	push	{r4, r5, r6, r7, lr}
    189e:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    18a0:	22c2      	movs	r2, #194	; 0xc2
    18a2:	00d2      	lsls	r2, r2, #3
    18a4:	4b47      	ldr	r3, [pc, #284]	; (19c4 <system_clock_init+0x128>)
    18a6:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    18a8:	4947      	ldr	r1, [pc, #284]	; (19c8 <system_clock_init+0x12c>)
    18aa:	684b      	ldr	r3, [r1, #4]
    18ac:	221e      	movs	r2, #30
    18ae:	4393      	bics	r3, r2
    18b0:	3a1c      	subs	r2, #28
    18b2:	4313      	orrs	r3, r2
    18b4:	604b      	str	r3, [r1, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    18b6:	ab01      	add	r3, sp, #4
    18b8:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    18ba:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    18bc:	4d43      	ldr	r5, [pc, #268]	; (19cc <system_clock_init+0x130>)
    18be:	b2e0      	uxtb	r0, r4
    18c0:	a901      	add	r1, sp, #4
    18c2:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    18c4:	3401      	adds	r4, #1
    18c6:	2c25      	cmp	r4, #37	; 0x25
    18c8:	d1f9      	bne.n	18be <system_clock_init+0x22>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    18ca:	a80a      	add	r0, sp, #40	; 0x28
    18cc:	2300      	movs	r3, #0
    18ce:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    18d0:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    18d2:	2280      	movs	r2, #128	; 0x80
    18d4:	0212      	lsls	r2, r2, #8
    18d6:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    18d8:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    18da:	2201      	movs	r2, #1
    18dc:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    18de:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    18e0:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    18e2:	3205      	adds	r2, #5
    18e4:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    18e6:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    18e8:	4b39      	ldr	r3, [pc, #228]	; (19d0 <system_clock_init+0x134>)
    18ea:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    18ec:	2005      	movs	r0, #5
    18ee:	4b39      	ldr	r3, [pc, #228]	; (19d4 <system_clock_init+0x138>)
    18f0:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    18f2:	4934      	ldr	r1, [pc, #208]	; (19c4 <system_clock_init+0x128>)
    18f4:	2202      	movs	r2, #2
    18f6:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    18f8:	421a      	tst	r2, r3
    18fa:	d0fc      	beq.n	18f6 <system_clock_init+0x5a>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    18fc:	4a31      	ldr	r2, [pc, #196]	; (19c4 <system_clock_init+0x128>)
    18fe:	8a93      	ldrh	r3, [r2, #20]
    1900:	2180      	movs	r1, #128	; 0x80
    1902:	430b      	orrs	r3, r1
    1904:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    1906:	ab05      	add	r3, sp, #20
    1908:	2100      	movs	r1, #0
    190a:	2200      	movs	r2, #0
    190c:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    190e:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    1910:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    1912:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    1914:	313f      	adds	r1, #63	; 0x3f
    1916:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    1918:	393b      	subs	r1, #59	; 0x3b
    191a:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    191c:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    191e:	4b2e      	ldr	r3, [pc, #184]	; (19d8 <system_clock_init+0x13c>)
    1920:	681b      	ldr	r3, [r3, #0]
    1922:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    1924:	2b3f      	cmp	r3, #63	; 0x3f
    1926:	d04b      	beq.n	19c0 <system_clock_init+0x124>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    1928:	a805      	add	r0, sp, #20
    192a:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    192c:	23b7      	movs	r3, #183	; 0xb7
    192e:	00db      	lsls	r3, r3, #3
    1930:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    1932:	2307      	movs	r3, #7
    1934:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    1936:	3338      	adds	r3, #56	; 0x38
    1938:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    193a:	4b28      	ldr	r3, [pc, #160]	; (19dc <system_clock_init+0x140>)
    193c:	4798      	blx	r3
	config->run_in_standby  = false;
    193e:	a804      	add	r0, sp, #16
    1940:	2500      	movs	r5, #0
    1942:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    1944:	2601      	movs	r6, #1
    1946:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1948:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    194a:	4b25      	ldr	r3, [pc, #148]	; (19e0 <system_clock_init+0x144>)
    194c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    194e:	2006      	movs	r0, #6
    1950:	4f20      	ldr	r7, [pc, #128]	; (19d4 <system_clock_init+0x138>)
    1952:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1954:	4b23      	ldr	r3, [pc, #140]	; (19e4 <system_clock_init+0x148>)
    1956:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1958:	ac01      	add	r4, sp, #4
    195a:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    195c:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    195e:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    1960:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    1962:	2305      	movs	r3, #5
    1964:	7023      	strb	r3, [r4, #0]
    1966:	0021      	movs	r1, r4
    1968:	2001      	movs	r0, #1
    196a:	4b1f      	ldr	r3, [pc, #124]	; (19e8 <system_clock_init+0x14c>)
    196c:	4798      	blx	r3
    196e:	2001      	movs	r0, #1
    1970:	4b1e      	ldr	r3, [pc, #120]	; (19ec <system_clock_init+0x150>)
    1972:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    1974:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    1976:	0021      	movs	r1, r4
    1978:	2000      	movs	r0, #0
    197a:	4b14      	ldr	r3, [pc, #80]	; (19cc <system_clock_init+0x130>)
    197c:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    197e:	2000      	movs	r0, #0
    1980:	4b1b      	ldr	r3, [pc, #108]	; (19f0 <system_clock_init+0x154>)
    1982:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    1984:	2007      	movs	r0, #7
    1986:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1988:	490e      	ldr	r1, [pc, #56]	; (19c4 <system_clock_init+0x128>)
    198a:	22d0      	movs	r2, #208	; 0xd0
    198c:	68cb      	ldr	r3, [r1, #12]
    198e:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    1990:	2bd0      	cmp	r3, #208	; 0xd0
    1992:	d1fb      	bne.n	198c <system_clock_init+0xf0>
	PM->CPUSEL.reg = (uint32_t)divider;
    1994:	4a17      	ldr	r2, [pc, #92]	; (19f4 <system_clock_init+0x158>)
    1996:	2300      	movs	r3, #0
    1998:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    199a:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    199c:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    199e:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    19a0:	a901      	add	r1, sp, #4
    19a2:	2201      	movs	r2, #1
    19a4:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    19a6:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    19a8:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    19aa:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    19ac:	3307      	adds	r3, #7
    19ae:	700b      	strb	r3, [r1, #0]
    19b0:	2000      	movs	r0, #0
    19b2:	4b0d      	ldr	r3, [pc, #52]	; (19e8 <system_clock_init+0x14c>)
    19b4:	4798      	blx	r3
    19b6:	2000      	movs	r0, #0
    19b8:	4b0c      	ldr	r3, [pc, #48]	; (19ec <system_clock_init+0x150>)
    19ba:	4798      	blx	r3
#endif
}
    19bc:	b00f      	add	sp, #60	; 0x3c
    19be:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    19c0:	3b20      	subs	r3, #32
    19c2:	e7b1      	b.n	1928 <system_clock_init+0x8c>
    19c4:	40000800 	.word	0x40000800
    19c8:	41004000 	.word	0x41004000
    19cc:	00001c31 	.word	0x00001c31
    19d0:	000016bd 	.word	0x000016bd
    19d4:	000017f5 	.word	0x000017f5
    19d8:	00806024 	.word	0x00806024
    19dc:	00001775 	.word	0x00001775
    19e0:	00001681 	.word	0x00001681
    19e4:	000019f9 	.word	0x000019f9
    19e8:	00001a1d 	.word	0x00001a1d
    19ec:	00001ad5 	.word	0x00001ad5
    19f0:	00001ba5 	.word	0x00001ba5
    19f4:	40000400 	.word	0x40000400

000019f8 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    19f8:	4a06      	ldr	r2, [pc, #24]	; (1a14 <system_gclk_init+0x1c>)
    19fa:	6993      	ldr	r3, [r2, #24]
    19fc:	2108      	movs	r1, #8
    19fe:	430b      	orrs	r3, r1
    1a00:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1a02:	2201      	movs	r2, #1
    1a04:	4b04      	ldr	r3, [pc, #16]	; (1a18 <system_gclk_init+0x20>)
    1a06:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1a08:	0019      	movs	r1, r3
    1a0a:	780b      	ldrb	r3, [r1, #0]
    1a0c:	4213      	tst	r3, r2
    1a0e:	d1fc      	bne.n	1a0a <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1a10:	4770      	bx	lr
    1a12:	46c0      	nop			; (mov r8, r8)
    1a14:	40000400 	.word	0x40000400
    1a18:	40000c00 	.word	0x40000c00

00001a1c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1a1c:	b570      	push	{r4, r5, r6, lr}
    1a1e:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1a20:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1a22:	780d      	ldrb	r5, [r1, #0]
    1a24:	022d      	lsls	r5, r5, #8
    1a26:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1a28:	784b      	ldrb	r3, [r1, #1]
    1a2a:	2b00      	cmp	r3, #0
    1a2c:	d002      	beq.n	1a34 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1a2e:	2380      	movs	r3, #128	; 0x80
    1a30:	02db      	lsls	r3, r3, #11
    1a32:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1a34:	7a4b      	ldrb	r3, [r1, #9]
    1a36:	2b00      	cmp	r3, #0
    1a38:	d002      	beq.n	1a40 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1a3a:	2380      	movs	r3, #128	; 0x80
    1a3c:	031b      	lsls	r3, r3, #12
    1a3e:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1a40:	6848      	ldr	r0, [r1, #4]
    1a42:	2801      	cmp	r0, #1
    1a44:	d910      	bls.n	1a68 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1a46:	1e43      	subs	r3, r0, #1
    1a48:	4218      	tst	r0, r3
    1a4a:	d134      	bne.n	1ab6 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1a4c:	2802      	cmp	r0, #2
    1a4e:	d930      	bls.n	1ab2 <system_gclk_gen_set_config+0x96>
    1a50:	2302      	movs	r3, #2
    1a52:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1a54:	3201      	adds	r2, #1
						mask <<= 1) {
    1a56:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    1a58:	4298      	cmp	r0, r3
    1a5a:	d8fb      	bhi.n	1a54 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1a5c:	0212      	lsls	r2, r2, #8
    1a5e:	4332      	orrs	r2, r6
    1a60:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1a62:	2380      	movs	r3, #128	; 0x80
    1a64:	035b      	lsls	r3, r3, #13
    1a66:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1a68:	7a0b      	ldrb	r3, [r1, #8]
    1a6a:	2b00      	cmp	r3, #0
    1a6c:	d002      	beq.n	1a74 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1a6e:	2380      	movs	r3, #128	; 0x80
    1a70:	039b      	lsls	r3, r3, #14
    1a72:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1a74:	4a13      	ldr	r2, [pc, #76]	; (1ac4 <system_gclk_gen_set_config+0xa8>)
    1a76:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    1a78:	b25b      	sxtb	r3, r3
    1a7a:	2b00      	cmp	r3, #0
    1a7c:	dbfb      	blt.n	1a76 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    1a7e:	4b12      	ldr	r3, [pc, #72]	; (1ac8 <system_gclk_gen_set_config+0xac>)
    1a80:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1a82:	4b12      	ldr	r3, [pc, #72]	; (1acc <system_gclk_gen_set_config+0xb0>)
    1a84:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1a86:	4a0f      	ldr	r2, [pc, #60]	; (1ac4 <system_gclk_gen_set_config+0xa8>)
    1a88:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1a8a:	b25b      	sxtb	r3, r3
    1a8c:	2b00      	cmp	r3, #0
    1a8e:	dbfb      	blt.n	1a88 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1a90:	4b0c      	ldr	r3, [pc, #48]	; (1ac4 <system_gclk_gen_set_config+0xa8>)
    1a92:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1a94:	001a      	movs	r2, r3
    1a96:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    1a98:	b25b      	sxtb	r3, r3
    1a9a:	2b00      	cmp	r3, #0
    1a9c:	dbfb      	blt.n	1a96 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1a9e:	4a09      	ldr	r2, [pc, #36]	; (1ac4 <system_gclk_gen_set_config+0xa8>)
    1aa0:	6853      	ldr	r3, [r2, #4]
    1aa2:	2180      	movs	r1, #128	; 0x80
    1aa4:	0249      	lsls	r1, r1, #9
    1aa6:	400b      	ands	r3, r1
    1aa8:	431d      	orrs	r5, r3
    1aaa:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    1aac:	4b08      	ldr	r3, [pc, #32]	; (1ad0 <system_gclk_gen_set_config+0xb4>)
    1aae:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1ab0:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    1ab2:	2200      	movs	r2, #0
    1ab4:	e7d2      	b.n	1a5c <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1ab6:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    1ab8:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1aba:	2380      	movs	r3, #128	; 0x80
    1abc:	029b      	lsls	r3, r3, #10
    1abe:	431d      	orrs	r5, r3
    1ac0:	e7d2      	b.n	1a68 <system_gclk_gen_set_config+0x4c>
    1ac2:	46c0      	nop			; (mov r8, r8)
    1ac4:	40000c00 	.word	0x40000c00
    1ac8:	000005c5 	.word	0x000005c5
    1acc:	40000c08 	.word	0x40000c08
    1ad0:	00000605 	.word	0x00000605

00001ad4 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1ad4:	b510      	push	{r4, lr}
    1ad6:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1ad8:	4a0b      	ldr	r2, [pc, #44]	; (1b08 <system_gclk_gen_enable+0x34>)
    1ada:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1adc:	b25b      	sxtb	r3, r3
    1ade:	2b00      	cmp	r3, #0
    1ae0:	dbfb      	blt.n	1ada <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    1ae2:	4b0a      	ldr	r3, [pc, #40]	; (1b0c <system_gclk_gen_enable+0x38>)
    1ae4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1ae6:	4b0a      	ldr	r3, [pc, #40]	; (1b10 <system_gclk_gen_enable+0x3c>)
    1ae8:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1aea:	4a07      	ldr	r2, [pc, #28]	; (1b08 <system_gclk_gen_enable+0x34>)
    1aec:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1aee:	b25b      	sxtb	r3, r3
    1af0:	2b00      	cmp	r3, #0
    1af2:	dbfb      	blt.n	1aec <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1af4:	4a04      	ldr	r2, [pc, #16]	; (1b08 <system_gclk_gen_enable+0x34>)
    1af6:	6851      	ldr	r1, [r2, #4]
    1af8:	2380      	movs	r3, #128	; 0x80
    1afa:	025b      	lsls	r3, r3, #9
    1afc:	430b      	orrs	r3, r1
    1afe:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    1b00:	4b04      	ldr	r3, [pc, #16]	; (1b14 <system_gclk_gen_enable+0x40>)
    1b02:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1b04:	bd10      	pop	{r4, pc}
    1b06:	46c0      	nop			; (mov r8, r8)
    1b08:	40000c00 	.word	0x40000c00
    1b0c:	000005c5 	.word	0x000005c5
    1b10:	40000c04 	.word	0x40000c04
    1b14:	00000605 	.word	0x00000605

00001b18 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1b18:	b570      	push	{r4, r5, r6, lr}
    1b1a:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1b1c:	4a1a      	ldr	r2, [pc, #104]	; (1b88 <system_gclk_gen_get_hz+0x70>)
    1b1e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1b20:	b25b      	sxtb	r3, r3
    1b22:	2b00      	cmp	r3, #0
    1b24:	dbfb      	blt.n	1b1e <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    1b26:	4b19      	ldr	r3, [pc, #100]	; (1b8c <system_gclk_gen_get_hz+0x74>)
    1b28:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1b2a:	4b19      	ldr	r3, [pc, #100]	; (1b90 <system_gclk_gen_get_hz+0x78>)
    1b2c:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1b2e:	4a16      	ldr	r2, [pc, #88]	; (1b88 <system_gclk_gen_get_hz+0x70>)
    1b30:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1b32:	b25b      	sxtb	r3, r3
    1b34:	2b00      	cmp	r3, #0
    1b36:	dbfb      	blt.n	1b30 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1b38:	4e13      	ldr	r6, [pc, #76]	; (1b88 <system_gclk_gen_get_hz+0x70>)
    1b3a:	6870      	ldr	r0, [r6, #4]
    1b3c:	04c0      	lsls	r0, r0, #19
    1b3e:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1b40:	4b14      	ldr	r3, [pc, #80]	; (1b94 <system_gclk_gen_get_hz+0x7c>)
    1b42:	4798      	blx	r3
    1b44:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1b46:	4b12      	ldr	r3, [pc, #72]	; (1b90 <system_gclk_gen_get_hz+0x78>)
    1b48:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1b4a:	6876      	ldr	r6, [r6, #4]
    1b4c:	02f6      	lsls	r6, r6, #11
    1b4e:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1b50:	4b11      	ldr	r3, [pc, #68]	; (1b98 <system_gclk_gen_get_hz+0x80>)
    1b52:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1b54:	4a0c      	ldr	r2, [pc, #48]	; (1b88 <system_gclk_gen_get_hz+0x70>)
    1b56:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1b58:	b25b      	sxtb	r3, r3
    1b5a:	2b00      	cmp	r3, #0
    1b5c:	dbfb      	blt.n	1b56 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1b5e:	4b0a      	ldr	r3, [pc, #40]	; (1b88 <system_gclk_gen_get_hz+0x70>)
    1b60:	689c      	ldr	r4, [r3, #8]
    1b62:	0224      	lsls	r4, r4, #8
    1b64:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    1b66:	4b0d      	ldr	r3, [pc, #52]	; (1b9c <system_gclk_gen_get_hz+0x84>)
    1b68:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1b6a:	2e00      	cmp	r6, #0
    1b6c:	d107      	bne.n	1b7e <system_gclk_gen_get_hz+0x66>
    1b6e:	2c01      	cmp	r4, #1
    1b70:	d907      	bls.n	1b82 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    1b72:	0021      	movs	r1, r4
    1b74:	0028      	movs	r0, r5
    1b76:	4b0a      	ldr	r3, [pc, #40]	; (1ba0 <system_gclk_gen_get_hz+0x88>)
    1b78:	4798      	blx	r3
    1b7a:	0005      	movs	r5, r0
    1b7c:	e001      	b.n	1b82 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1b7e:	3401      	adds	r4, #1
    1b80:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    1b82:	0028      	movs	r0, r5
    1b84:	bd70      	pop	{r4, r5, r6, pc}
    1b86:	46c0      	nop			; (mov r8, r8)
    1b88:	40000c00 	.word	0x40000c00
    1b8c:	000005c5 	.word	0x000005c5
    1b90:	40000c04 	.word	0x40000c04
    1b94:	000015ed 	.word	0x000015ed
    1b98:	40000c08 	.word	0x40000c08
    1b9c:	00000605 	.word	0x00000605
    1ba0:	0000337d 	.word	0x0000337d

00001ba4 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1ba4:	b510      	push	{r4, lr}
    1ba6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1ba8:	4b06      	ldr	r3, [pc, #24]	; (1bc4 <system_gclk_chan_enable+0x20>)
    1baa:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1bac:	4b06      	ldr	r3, [pc, #24]	; (1bc8 <system_gclk_chan_enable+0x24>)
    1bae:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1bb0:	4a06      	ldr	r2, [pc, #24]	; (1bcc <system_gclk_chan_enable+0x28>)
    1bb2:	8853      	ldrh	r3, [r2, #2]
    1bb4:	2180      	movs	r1, #128	; 0x80
    1bb6:	01c9      	lsls	r1, r1, #7
    1bb8:	430b      	orrs	r3, r1
    1bba:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1bbc:	4b04      	ldr	r3, [pc, #16]	; (1bd0 <system_gclk_chan_enable+0x2c>)
    1bbe:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1bc0:	bd10      	pop	{r4, pc}
    1bc2:	46c0      	nop			; (mov r8, r8)
    1bc4:	000005c5 	.word	0x000005c5
    1bc8:	40000c02 	.word	0x40000c02
    1bcc:	40000c00 	.word	0x40000c00
    1bd0:	00000605 	.word	0x00000605

00001bd4 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1bd4:	b510      	push	{r4, lr}
    1bd6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1bd8:	4b0f      	ldr	r3, [pc, #60]	; (1c18 <system_gclk_chan_disable+0x44>)
    1bda:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1bdc:	4b0f      	ldr	r3, [pc, #60]	; (1c1c <system_gclk_chan_disable+0x48>)
    1bde:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1be0:	4a0f      	ldr	r2, [pc, #60]	; (1c20 <system_gclk_chan_disable+0x4c>)
    1be2:	8853      	ldrh	r3, [r2, #2]
    1be4:	051b      	lsls	r3, r3, #20
    1be6:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1be8:	8853      	ldrh	r3, [r2, #2]
    1bea:	490e      	ldr	r1, [pc, #56]	; (1c24 <system_gclk_chan_disable+0x50>)
    1bec:	400b      	ands	r3, r1
    1bee:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1bf0:	8853      	ldrh	r3, [r2, #2]
    1bf2:	490d      	ldr	r1, [pc, #52]	; (1c28 <system_gclk_chan_disable+0x54>)
    1bf4:	400b      	ands	r3, r1
    1bf6:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1bf8:	0011      	movs	r1, r2
    1bfa:	2280      	movs	r2, #128	; 0x80
    1bfc:	01d2      	lsls	r2, r2, #7
    1bfe:	884b      	ldrh	r3, [r1, #2]
    1c00:	4213      	tst	r3, r2
    1c02:	d1fc      	bne.n	1bfe <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1c04:	4906      	ldr	r1, [pc, #24]	; (1c20 <system_gclk_chan_disable+0x4c>)
    1c06:	884a      	ldrh	r2, [r1, #2]
    1c08:	0203      	lsls	r3, r0, #8
    1c0a:	4806      	ldr	r0, [pc, #24]	; (1c24 <system_gclk_chan_disable+0x50>)
    1c0c:	4002      	ands	r2, r0
    1c0e:	4313      	orrs	r3, r2
    1c10:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    1c12:	4b06      	ldr	r3, [pc, #24]	; (1c2c <system_gclk_chan_disable+0x58>)
    1c14:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1c16:	bd10      	pop	{r4, pc}
    1c18:	000005c5 	.word	0x000005c5
    1c1c:	40000c02 	.word	0x40000c02
    1c20:	40000c00 	.word	0x40000c00
    1c24:	fffff0ff 	.word	0xfffff0ff
    1c28:	ffffbfff 	.word	0xffffbfff
    1c2c:	00000605 	.word	0x00000605

00001c30 <system_gclk_chan_set_config>:
{
    1c30:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1c32:	780c      	ldrb	r4, [r1, #0]
    1c34:	0224      	lsls	r4, r4, #8
    1c36:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    1c38:	4b02      	ldr	r3, [pc, #8]	; (1c44 <system_gclk_chan_set_config+0x14>)
    1c3a:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1c3c:	b2a4      	uxth	r4, r4
    1c3e:	4b02      	ldr	r3, [pc, #8]	; (1c48 <system_gclk_chan_set_config+0x18>)
    1c40:	805c      	strh	r4, [r3, #2]
}
    1c42:	bd10      	pop	{r4, pc}
    1c44:	00001bd5 	.word	0x00001bd5
    1c48:	40000c00 	.word	0x40000c00

00001c4c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1c4c:	b510      	push	{r4, lr}
    1c4e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1c50:	4b06      	ldr	r3, [pc, #24]	; (1c6c <system_gclk_chan_get_hz+0x20>)
    1c52:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1c54:	4b06      	ldr	r3, [pc, #24]	; (1c70 <system_gclk_chan_get_hz+0x24>)
    1c56:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1c58:	4b06      	ldr	r3, [pc, #24]	; (1c74 <system_gclk_chan_get_hz+0x28>)
    1c5a:	885c      	ldrh	r4, [r3, #2]
    1c5c:	0524      	lsls	r4, r4, #20
    1c5e:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    1c60:	4b05      	ldr	r3, [pc, #20]	; (1c78 <system_gclk_chan_get_hz+0x2c>)
    1c62:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1c64:	0020      	movs	r0, r4
    1c66:	4b05      	ldr	r3, [pc, #20]	; (1c7c <system_gclk_chan_get_hz+0x30>)
    1c68:	4798      	blx	r3
}
    1c6a:	bd10      	pop	{r4, pc}
    1c6c:	000005c5 	.word	0x000005c5
    1c70:	40000c02 	.word	0x40000c02
    1c74:	40000c00 	.word	0x40000c00
    1c78:	00000605 	.word	0x00000605
    1c7c:	00001b19 	.word	0x00001b19

00001c80 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1c80:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1c82:	78d3      	ldrb	r3, [r2, #3]
    1c84:	2b00      	cmp	r3, #0
    1c86:	d135      	bne.n	1cf4 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1c88:	7813      	ldrb	r3, [r2, #0]
    1c8a:	2b80      	cmp	r3, #128	; 0x80
    1c8c:	d029      	beq.n	1ce2 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1c8e:	061b      	lsls	r3, r3, #24
    1c90:	2480      	movs	r4, #128	; 0x80
    1c92:	0264      	lsls	r4, r4, #9
    1c94:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1c96:	7854      	ldrb	r4, [r2, #1]
    1c98:	2502      	movs	r5, #2
    1c9a:	43ac      	bics	r4, r5
    1c9c:	d106      	bne.n	1cac <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1c9e:	7894      	ldrb	r4, [r2, #2]
    1ca0:	2c00      	cmp	r4, #0
    1ca2:	d120      	bne.n	1ce6 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    1ca4:	2480      	movs	r4, #128	; 0x80
    1ca6:	02a4      	lsls	r4, r4, #10
    1ca8:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1caa:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1cac:	7854      	ldrb	r4, [r2, #1]
    1cae:	3c01      	subs	r4, #1
    1cb0:	2c01      	cmp	r4, #1
    1cb2:	d91c      	bls.n	1cee <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1cb4:	040d      	lsls	r5, r1, #16
    1cb6:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1cb8:	24a0      	movs	r4, #160	; 0xa0
    1cba:	05e4      	lsls	r4, r4, #23
    1cbc:	432c      	orrs	r4, r5
    1cbe:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1cc0:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1cc2:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1cc4:	24d0      	movs	r4, #208	; 0xd0
    1cc6:	0624      	lsls	r4, r4, #24
    1cc8:	432c      	orrs	r4, r5
    1cca:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1ccc:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1cce:	78d4      	ldrb	r4, [r2, #3]
    1cd0:	2c00      	cmp	r4, #0
    1cd2:	d122      	bne.n	1d1a <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1cd4:	035b      	lsls	r3, r3, #13
    1cd6:	d51c      	bpl.n	1d12 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1cd8:	7893      	ldrb	r3, [r2, #2]
    1cda:	2b01      	cmp	r3, #1
    1cdc:	d01e      	beq.n	1d1c <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    1cde:	6141      	str	r1, [r0, #20]
    1ce0:	e017      	b.n	1d12 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    1ce2:	2300      	movs	r3, #0
    1ce4:	e7d7      	b.n	1c96 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1ce6:	24c0      	movs	r4, #192	; 0xc0
    1ce8:	02e4      	lsls	r4, r4, #11
    1cea:	4323      	orrs	r3, r4
    1cec:	e7dd      	b.n	1caa <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1cee:	4c0d      	ldr	r4, [pc, #52]	; (1d24 <_system_pinmux_config+0xa4>)
    1cf0:	4023      	ands	r3, r4
    1cf2:	e7df      	b.n	1cb4 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    1cf4:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1cf6:	040c      	lsls	r4, r1, #16
    1cf8:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1cfa:	23a0      	movs	r3, #160	; 0xa0
    1cfc:	05db      	lsls	r3, r3, #23
    1cfe:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1d00:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1d02:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1d04:	23d0      	movs	r3, #208	; 0xd0
    1d06:	061b      	lsls	r3, r3, #24
    1d08:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1d0a:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    1d0c:	78d3      	ldrb	r3, [r2, #3]
    1d0e:	2b00      	cmp	r3, #0
    1d10:	d103      	bne.n	1d1a <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1d12:	7853      	ldrb	r3, [r2, #1]
    1d14:	3b01      	subs	r3, #1
    1d16:	2b01      	cmp	r3, #1
    1d18:	d902      	bls.n	1d20 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    1d1a:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    1d1c:	6181      	str	r1, [r0, #24]
    1d1e:	e7f8      	b.n	1d12 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    1d20:	6081      	str	r1, [r0, #8]
}
    1d22:	e7fa      	b.n	1d1a <_system_pinmux_config+0x9a>
    1d24:	fffbffff 	.word	0xfffbffff

00001d28 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1d28:	b510      	push	{r4, lr}
    1d2a:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1d2c:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1d2e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1d30:	2900      	cmp	r1, #0
    1d32:	d104      	bne.n	1d3e <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1d34:	0943      	lsrs	r3, r0, #5
    1d36:	01db      	lsls	r3, r3, #7
    1d38:	4905      	ldr	r1, [pc, #20]	; (1d50 <system_pinmux_pin_set_config+0x28>)
    1d3a:	468c      	mov	ip, r1
    1d3c:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1d3e:	241f      	movs	r4, #31
    1d40:	4020      	ands	r0, r4
    1d42:	2101      	movs	r1, #1
    1d44:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    1d46:	0018      	movs	r0, r3
    1d48:	4b02      	ldr	r3, [pc, #8]	; (1d54 <system_pinmux_pin_set_config+0x2c>)
    1d4a:	4798      	blx	r3
}
    1d4c:	bd10      	pop	{r4, pc}
    1d4e:	46c0      	nop			; (mov r8, r8)
    1d50:	41004400 	.word	0x41004400
    1d54:	00001c81 	.word	0x00001c81

00001d58 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1d58:	4770      	bx	lr
	...

00001d5c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1d5c:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1d5e:	4b05      	ldr	r3, [pc, #20]	; (1d74 <system_init+0x18>)
    1d60:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1d62:	4b05      	ldr	r3, [pc, #20]	; (1d78 <system_init+0x1c>)
    1d64:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1d66:	4b05      	ldr	r3, [pc, #20]	; (1d7c <system_init+0x20>)
    1d68:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1d6a:	4b05      	ldr	r3, [pc, #20]	; (1d80 <system_init+0x24>)
    1d6c:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1d6e:	4b05      	ldr	r3, [pc, #20]	; (1d84 <system_init+0x28>)
    1d70:	4798      	blx	r3
}
    1d72:	bd10      	pop	{r4, pc}
    1d74:	0000189d 	.word	0x0000189d
    1d78:	00000635 	.word	0x00000635
    1d7c:	00001d59 	.word	0x00001d59
    1d80:	00001d59 	.word	0x00001d59
    1d84:	00001d59 	.word	0x00001d59

00001d88 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1d88:	e7fe      	b.n	1d88 <Dummy_Handler>
	...

00001d8c <Reset_Handler>:
{
    1d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    1d8e:	4a2a      	ldr	r2, [pc, #168]	; (1e38 <Reset_Handler+0xac>)
    1d90:	4b2a      	ldr	r3, [pc, #168]	; (1e3c <Reset_Handler+0xb0>)
    1d92:	429a      	cmp	r2, r3
    1d94:	d011      	beq.n	1dba <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    1d96:	001a      	movs	r2, r3
    1d98:	4b29      	ldr	r3, [pc, #164]	; (1e40 <Reset_Handler+0xb4>)
    1d9a:	429a      	cmp	r2, r3
    1d9c:	d20d      	bcs.n	1dba <Reset_Handler+0x2e>
    1d9e:	4a29      	ldr	r2, [pc, #164]	; (1e44 <Reset_Handler+0xb8>)
    1da0:	3303      	adds	r3, #3
    1da2:	1a9b      	subs	r3, r3, r2
    1da4:	089b      	lsrs	r3, r3, #2
    1da6:	3301      	adds	r3, #1
    1da8:	009b      	lsls	r3, r3, #2
    1daa:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1dac:	4823      	ldr	r0, [pc, #140]	; (1e3c <Reset_Handler+0xb0>)
    1dae:	4922      	ldr	r1, [pc, #136]	; (1e38 <Reset_Handler+0xac>)
    1db0:	588c      	ldr	r4, [r1, r2]
    1db2:	5084      	str	r4, [r0, r2]
    1db4:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    1db6:	429a      	cmp	r2, r3
    1db8:	d1fa      	bne.n	1db0 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    1dba:	4a23      	ldr	r2, [pc, #140]	; (1e48 <Reset_Handler+0xbc>)
    1dbc:	4b23      	ldr	r3, [pc, #140]	; (1e4c <Reset_Handler+0xc0>)
    1dbe:	429a      	cmp	r2, r3
    1dc0:	d20a      	bcs.n	1dd8 <Reset_Handler+0x4c>
    1dc2:	43d3      	mvns	r3, r2
    1dc4:	4921      	ldr	r1, [pc, #132]	; (1e4c <Reset_Handler+0xc0>)
    1dc6:	185b      	adds	r3, r3, r1
    1dc8:	2103      	movs	r1, #3
    1dca:	438b      	bics	r3, r1
    1dcc:	3304      	adds	r3, #4
    1dce:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    1dd0:	2100      	movs	r1, #0
    1dd2:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    1dd4:	4293      	cmp	r3, r2
    1dd6:	d1fc      	bne.n	1dd2 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1dd8:	4a1d      	ldr	r2, [pc, #116]	; (1e50 <Reset_Handler+0xc4>)
    1dda:	21ff      	movs	r1, #255	; 0xff
    1ddc:	4b1d      	ldr	r3, [pc, #116]	; (1e54 <Reset_Handler+0xc8>)
    1dde:	438b      	bics	r3, r1
    1de0:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1de2:	39fd      	subs	r1, #253	; 0xfd
    1de4:	2390      	movs	r3, #144	; 0x90
    1de6:	005b      	lsls	r3, r3, #1
    1de8:	4a1b      	ldr	r2, [pc, #108]	; (1e58 <Reset_Handler+0xcc>)
    1dea:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1dec:	4a1b      	ldr	r2, [pc, #108]	; (1e5c <Reset_Handler+0xd0>)
    1dee:	78d3      	ldrb	r3, [r2, #3]
    1df0:	2503      	movs	r5, #3
    1df2:	43ab      	bics	r3, r5
    1df4:	2402      	movs	r4, #2
    1df6:	4323      	orrs	r3, r4
    1df8:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1dfa:	78d3      	ldrb	r3, [r2, #3]
    1dfc:	270c      	movs	r7, #12
    1dfe:	43bb      	bics	r3, r7
    1e00:	2608      	movs	r6, #8
    1e02:	4333      	orrs	r3, r6
    1e04:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    1e06:	4b16      	ldr	r3, [pc, #88]	; (1e60 <Reset_Handler+0xd4>)
    1e08:	7b98      	ldrb	r0, [r3, #14]
    1e0a:	2230      	movs	r2, #48	; 0x30
    1e0c:	4390      	bics	r0, r2
    1e0e:	2220      	movs	r2, #32
    1e10:	4310      	orrs	r0, r2
    1e12:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1e14:	7b99      	ldrb	r1, [r3, #14]
    1e16:	43b9      	bics	r1, r7
    1e18:	4331      	orrs	r1, r6
    1e1a:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1e1c:	7b9a      	ldrb	r2, [r3, #14]
    1e1e:	43aa      	bics	r2, r5
    1e20:	4322      	orrs	r2, r4
    1e22:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    1e24:	4a0f      	ldr	r2, [pc, #60]	; (1e64 <Reset_Handler+0xd8>)
    1e26:	6853      	ldr	r3, [r2, #4]
    1e28:	2180      	movs	r1, #128	; 0x80
    1e2a:	430b      	orrs	r3, r1
    1e2c:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    1e2e:	4b0e      	ldr	r3, [pc, #56]	; (1e68 <Reset_Handler+0xdc>)
    1e30:	4798      	blx	r3
        main();
    1e32:	4b0e      	ldr	r3, [pc, #56]	; (1e6c <Reset_Handler+0xe0>)
    1e34:	4798      	blx	r3
    1e36:	e7fe      	b.n	1e36 <Reset_Handler+0xaa>
    1e38:	000069cc 	.word	0x000069cc
    1e3c:	20000000 	.word	0x20000000
    1e40:	200001bc 	.word	0x200001bc
    1e44:	20000004 	.word	0x20000004
    1e48:	200001bc 	.word	0x200001bc
    1e4c:	20000ab8 	.word	0x20000ab8
    1e50:	e000ed00 	.word	0xe000ed00
    1e54:	00000000 	.word	0x00000000
    1e58:	41007000 	.word	0x41007000
    1e5c:	41005000 	.word	0x41005000
    1e60:	41004800 	.word	0x41004800
    1e64:	41004000 	.word	0x41004000
    1e68:	000034e9 	.word	0x000034e9
    1e6c:	000032e5 	.word	0x000032e5

00001e70 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    1e70:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e72:	46c6      	mov	lr, r8
    1e74:	b500      	push	{lr}
    1e76:	000c      	movs	r4, r1
    1e78:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    1e7a:	2800      	cmp	r0, #0
    1e7c:	d10f      	bne.n	1e9e <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    1e7e:	2a00      	cmp	r2, #0
    1e80:	dd11      	ble.n	1ea6 <_read+0x36>
    1e82:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    1e84:	4e09      	ldr	r6, [pc, #36]	; (1eac <_read+0x3c>)
    1e86:	4d0a      	ldr	r5, [pc, #40]	; (1eb0 <_read+0x40>)
    1e88:	6830      	ldr	r0, [r6, #0]
    1e8a:	0021      	movs	r1, r4
    1e8c:	682b      	ldr	r3, [r5, #0]
    1e8e:	4798      	blx	r3
		ptr++;
    1e90:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    1e92:	42bc      	cmp	r4, r7
    1e94:	d1f8      	bne.n	1e88 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    1e96:	4640      	mov	r0, r8
    1e98:	bc04      	pop	{r2}
    1e9a:	4690      	mov	r8, r2
    1e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    1e9e:	2301      	movs	r3, #1
    1ea0:	425b      	negs	r3, r3
    1ea2:	4698      	mov	r8, r3
    1ea4:	e7f7      	b.n	1e96 <_read+0x26>
	for (; len > 0; --len) {
    1ea6:	4680      	mov	r8, r0
    1ea8:	e7f5      	b.n	1e96 <_read+0x26>
    1eaa:	46c0      	nop			; (mov r8, r8)
    1eac:	200002d0 	.word	0x200002d0
    1eb0:	200002c8 	.word	0x200002c8

00001eb4 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    1eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1eb6:	46c6      	mov	lr, r8
    1eb8:	b500      	push	{lr}
    1eba:	000e      	movs	r6, r1
    1ebc:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    1ebe:	3801      	subs	r0, #1
    1ec0:	2802      	cmp	r0, #2
    1ec2:	d810      	bhi.n	1ee6 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    1ec4:	2a00      	cmp	r2, #0
    1ec6:	d011      	beq.n	1eec <_write+0x38>
    1ec8:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    1eca:	4b0c      	ldr	r3, [pc, #48]	; (1efc <_write+0x48>)
    1ecc:	4698      	mov	r8, r3
    1ece:	4f0c      	ldr	r7, [pc, #48]	; (1f00 <_write+0x4c>)
    1ed0:	4643      	mov	r3, r8
    1ed2:	6818      	ldr	r0, [r3, #0]
    1ed4:	5d31      	ldrb	r1, [r6, r4]
    1ed6:	683b      	ldr	r3, [r7, #0]
    1ed8:	4798      	blx	r3
    1eda:	2800      	cmp	r0, #0
    1edc:	db08      	blt.n	1ef0 <_write+0x3c>
			return -1;
		}
		++nChars;
    1ede:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    1ee0:	42a5      	cmp	r5, r4
    1ee2:	d1f5      	bne.n	1ed0 <_write+0x1c>
    1ee4:	e006      	b.n	1ef4 <_write+0x40>
		return -1;
    1ee6:	2401      	movs	r4, #1
    1ee8:	4264      	negs	r4, r4
    1eea:	e003      	b.n	1ef4 <_write+0x40>
	for (; len != 0; --len) {
    1eec:	0014      	movs	r4, r2
    1eee:	e001      	b.n	1ef4 <_write+0x40>
			return -1;
    1ef0:	2401      	movs	r4, #1
    1ef2:	4264      	negs	r4, r4
	}
	return nChars;
}
    1ef4:	0020      	movs	r0, r4
    1ef6:	bc04      	pop	{r2}
    1ef8:	4690      	mov	r8, r2
    1efa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1efc:	200002d0 	.word	0x200002d0
    1f00:	200002cc 	.word	0x200002cc

00001f04 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    1f04:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    1f06:	4a06      	ldr	r2, [pc, #24]	; (1f20 <_sbrk+0x1c>)
    1f08:	6812      	ldr	r2, [r2, #0]
    1f0a:	2a00      	cmp	r2, #0
    1f0c:	d004      	beq.n	1f18 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    1f0e:	4a04      	ldr	r2, [pc, #16]	; (1f20 <_sbrk+0x1c>)
    1f10:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    1f12:	18c3      	adds	r3, r0, r3
    1f14:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    1f16:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    1f18:	4902      	ldr	r1, [pc, #8]	; (1f24 <_sbrk+0x20>)
    1f1a:	4a01      	ldr	r2, [pc, #4]	; (1f20 <_sbrk+0x1c>)
    1f1c:	6011      	str	r1, [r2, #0]
    1f1e:	e7f6      	b.n	1f0e <_sbrk+0xa>
    1f20:	20000294 	.word	0x20000294
    1f24:	20002ab8 	.word	0x20002ab8

00001f28 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    1f28:	2001      	movs	r0, #1
    1f2a:	4240      	negs	r0, r0
    1f2c:	4770      	bx	lr

00001f2e <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    1f2e:	2380      	movs	r3, #128	; 0x80
    1f30:	019b      	lsls	r3, r3, #6
    1f32:	604b      	str	r3, [r1, #4]

	return 0;
}
    1f34:	2000      	movs	r0, #0
    1f36:	4770      	bx	lr

00001f38 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    1f38:	2001      	movs	r0, #1
    1f3a:	4770      	bx	lr

00001f3c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    1f3c:	2000      	movs	r0, #0
    1f3e:	4770      	bx	lr

00001f40 <drawChar>:
uint16_t xCharPos = 0;
uint16_t yCharPos = 0;


void drawChar(uint8_t character)
{
    1f40:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f42:	46d6      	mov	lr, sl
    1f44:	464f      	mov	r7, r9
    1f46:	4646      	mov	r6, r8
    1f48:	b5c0      	push	{r6, r7, lr}
    1f4a:	0004      	movs	r4, r0
	uint16_t x = xCharPos;
    1f4c:	4b2a      	ldr	r3, [pc, #168]	; (1ff8 <drawChar+0xb8>)
    1f4e:	881b      	ldrh	r3, [r3, #0]
	uint16_t y = yCharPos;
    1f50:	4a2a      	ldr	r2, [pc, #168]	; (1ffc <drawChar+0xbc>)
    1f52:	8815      	ldrh	r5, [r2, #0]
	
	consoleDisplay[xCharPos][yCharPos] = character;
    1f54:	005a      	lsls	r2, r3, #1
    1f56:	18d2      	adds	r2, r2, r3
    1f58:	00d2      	lsls	r2, r2, #3
    1f5a:	4829      	ldr	r0, [pc, #164]	; (2000 <STACK_SIZE>)
    1f5c:	1882      	adds	r2, r0, r2
    1f5e:	5554      	strb	r4, [r2, r5]
	
	REG_PORT_OUTCLR1 = LCD_CS;
    1f60:	2180      	movs	r1, #128	; 0x80
    1f62:	03c9      	lsls	r1, r1, #15
    1f64:	4a27      	ldr	r2, [pc, #156]	; (2004 <STACK_SIZE+0x4>)
    1f66:	6011      	str	r1, [r2, #0]
	setXY(x*10,y*20,x*10+9,y*20+19);
    1f68:	0098      	lsls	r0, r3, #2
    1f6a:	181b      	adds	r3, r3, r0
    1f6c:	005b      	lsls	r3, r3, #1
    1f6e:	b298      	uxth	r0, r3
    1f70:	2114      	movs	r1, #20
    1f72:	4369      	muls	r1, r5
    1f74:	b289      	uxth	r1, r1
    1f76:	000b      	movs	r3, r1
    1f78:	3313      	adds	r3, #19
    1f7a:	b29b      	uxth	r3, r3
    1f7c:	0002      	movs	r2, r0
    1f7e:	3209      	adds	r2, #9
    1f80:	b292      	uxth	r2, r2
    1f82:	4d21      	ldr	r5, [pc, #132]	; (2008 <STACK_SIZE+0x8>)
    1f84:	47a8      	blx	r5
    1f86:	4a21      	ldr	r2, [pc, #132]	; (200c <STACK_SIZE+0xc>)
    1f88:	00a5      	lsls	r5, r4, #2
    1f8a:	192d      	adds	r5, r5, r4
    1f8c:	00ab      	lsls	r3, r5, #2
    1f8e:	18ed      	adds	r5, r5, r3
    1f90:	1955      	adds	r5, r2, r5
    1f92:	3401      	adds	r4, #1
    1f94:	00a3      	lsls	r3, r4, #2
    1f96:	191c      	adds	r4, r3, r4
    1f98:	00a3      	lsls	r3, r4, #2
    1f9a:	18e4      	adds	r4, r4, r3
    1f9c:	4692      	mov	sl, r2
    1f9e:	44a2      	add	sl, r4
			{
				setPixel((fore_Color_High<<8)|fore_Color_Low);	
			}
			else
			{
				setPixel((back_Color_High<<8)|back_Color_Low);
    1fa0:	4b1b      	ldr	r3, [pc, #108]	; (2010 <STACK_SIZE+0x10>)
    1fa2:	4699      	mov	r9, r3
    1fa4:	4b1b      	ldr	r3, [pc, #108]	; (2014 <STACK_SIZE+0x14>)
    1fa6:	4698      	mov	r8, r3
    1fa8:	4f1b      	ldr	r7, [pc, #108]	; (2018 <STACK_SIZE+0x18>)
				setPixel((fore_Color_High<<8)|fore_Color_Low);	
    1faa:	4e1c      	ldr	r6, [pc, #112]	; (201c <STACK_SIZE+0x1c>)
    1fac:	e019      	b.n	1fe2 <drawChar+0xa2>
				setPixel((back_Color_High<<8)|back_Color_Low);
    1fae:	464b      	mov	r3, r9
    1fb0:	8818      	ldrh	r0, [r3, #0]
    1fb2:	0200      	lsls	r0, r0, #8
    1fb4:	4643      	mov	r3, r8
    1fb6:	881b      	ldrh	r3, [r3, #0]
    1fb8:	4318      	orrs	r0, r3
    1fba:	b280      	uxth	r0, r0
    1fbc:	47b8      	blx	r7
		for(int j=0;j<8;j++)
    1fbe:	3c01      	subs	r4, #1
    1fc0:	d30c      	bcc.n	1fdc <drawChar+0x9c>
			if((CodePage437[character][i]&(1<<(7-j)))!=0)
    1fc2:	782b      	ldrb	r3, [r5, #0]
    1fc4:	4123      	asrs	r3, r4
    1fc6:	07db      	lsls	r3, r3, #31
    1fc8:	d5f1      	bpl.n	1fae <drawChar+0x6e>
				setPixel((fore_Color_High<<8)|fore_Color_Low);	
    1fca:	8830      	ldrh	r0, [r6, #0]
    1fcc:	0200      	lsls	r0, r0, #8
    1fce:	4b14      	ldr	r3, [pc, #80]	; (2020 <STACK_SIZE+0x20>)
    1fd0:	881b      	ldrh	r3, [r3, #0]
    1fd2:	4318      	orrs	r0, r3
    1fd4:	b280      	uxth	r0, r0
    1fd6:	4b10      	ldr	r3, [pc, #64]	; (2018 <STACK_SIZE+0x18>)
    1fd8:	4798      	blx	r3
    1fda:	e7f0      	b.n	1fbe <drawChar+0x7e>
    1fdc:	3501      	adds	r5, #1
	for(uint16_t i=0; i <= 24; i++)
    1fde:	4555      	cmp	r5, sl
    1fe0:	d001      	beq.n	1fe6 <drawChar+0xa6>
{
    1fe2:	2407      	movs	r4, #7
    1fe4:	e7ed      	b.n	1fc2 <drawChar+0x82>
			}

		}
	}
	REG_PORT_OUTSET1 = LCD_CS;
    1fe6:	2280      	movs	r2, #128	; 0x80
    1fe8:	03d2      	lsls	r2, r2, #15
    1fea:	4b0e      	ldr	r3, [pc, #56]	; (2024 <STACK_SIZE+0x24>)
    1fec:	601a      	str	r2, [r3, #0]
	
	//printf(consoleDisplay[xCharPos][yCharPos]);

}
    1fee:	bc1c      	pop	{r2, r3, r4}
    1ff0:	4690      	mov	r8, r2
    1ff2:	4699      	mov	r9, r3
    1ff4:	46a2      	mov	sl, r4
    1ff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ff8:	20000298 	.word	0x20000298
    1ffc:	2000029a 	.word	0x2000029a
    2000:	2000030c 	.word	0x2000030c
    2004:	41004494 	.word	0x41004494
    2008:	00002abd 	.word	0x00002abd
    200c:	00004db0 	.word	0x00004db0
    2010:	20000a92 	.word	0x20000a92
    2014:	20000a8c 	.word	0x20000a8c
    2018:	00002c7d 	.word	0x00002c7d
    201c:	20000a8e 	.word	0x20000a8e
    2020:	20000a90 	.word	0x20000a90
    2024:	41004498 	.word	0x41004498

00002028 <newLine>:

void newLine(void)
{
    2028:	b5f0      	push	{r4, r5, r6, r7, lr}
    202a:	46de      	mov	lr, fp
    202c:	4657      	mov	r7, sl
    202e:	464e      	mov	r6, r9
    2030:	4645      	mov	r5, r8
    2032:	b5e0      	push	{r5, r6, r7, lr}
    2034:	4c56      	ldr	r4, [pc, #344]	; (2190 <newLine+0x168>)
    2036:	44a5      	add	sp, r4
    2038:	4856      	ldr	r0, [pc, #344]	; (2194 <newLine+0x16c>)
    203a:	23f0      	movs	r3, #240	; 0xf0
    203c:	00db      	lsls	r3, r3, #3
    203e:	18c4      	adds	r4, r0, r3
    2040:	e002      	b.n	2048 <newLine+0x20>
    2042:	3018      	adds	r0, #24
	/*
	This is split into two parts; the first moves consoledisplay around
	so the first line is deleted and all other lines are moved up one line
	*/
	
	for(int i = 0 ; i < 80 ; i++)
    2044:	42a0      	cmp	r0, r4
    2046:	d008      	beq.n	205a <newLine+0x32>
    2048:	0001      	movs	r1, r0
    204a:	3117      	adds	r1, #23
{
    204c:	0003      	movs	r3, r0
	{
		for(int j = 1 ; j < 24 ; j++)
		{
			consoleDisplay[i][j-1] = consoleDisplay[i][j];
    204e:	785a      	ldrb	r2, [r3, #1]
    2050:	701a      	strb	r2, [r3, #0]
    2052:	3301      	adds	r3, #1
		for(int j = 1 ; j < 24 ; j++)
    2054:	428b      	cmp	r3, r1
    2056:	d1fa      	bne.n	204e <newLine+0x26>
    2058:	e7f3      	b.n	2042 <newLine+0x1a>
    205a:	4b4f      	ldr	r3, [pc, #316]	; (2198 <newLine+0x170>)
    205c:	22f0      	movs	r2, #240	; 0xf0
    205e:	00d2      	lsls	r2, r2, #3
    2060:	1899      	adds	r1, r3, r2
		}
	}
	
	for(int k = 0 ; k < 80 ; k ++)
	{
		consoleDisplay[k][23] = 0x00;
    2062:	2200      	movs	r2, #0
    2064:	701a      	strb	r2, [r3, #0]
    2066:	3318      	adds	r3, #24
	for(int k = 0 ; k < 80 ; k ++)
    2068:	428b      	cmp	r3, r1
    206a:	d1fb      	bne.n	2064 <newLine+0x3c>
    206c:	2300      	movs	r3, #0
    206e:	9300      	str	r3, [sp, #0]
			
	for(uint16_t row = 0 ; row < 460 ; row++)
	{
		//Per page 40 of datasheet (5.1.2.7, 16-bit
		//parallel interface for data ram read.
		REG_PORT_OUTCLR1 = LCD_CS;
    2070:	4b4a      	ldr	r3, [pc, #296]	; (219c <newLine+0x174>)
    2072:	4698      	mov	r8, r3
		setXY(0, row+20, 799, row+20);
		//Send'Memory read' command 0x2E00, no data bit
		LCD_Write_COM16(0x2E,0x00);
		REG_PORT_OUTSET1 = LCD_DC;
    2074:	4f4a      	ldr	r7, [pc, #296]	; (21a0 <newLine+0x178>)
		
		
		//Read pixel data into the display	
		for(uint16_t getpixel = 0 ; getpixel < 800 ; getpixel++)
		{
			REG_PORT_OUTCLR1 = LCD_RD;
    2076:	2680      	movs	r6, #128	; 0x80
    2078:	0276      	lsls	r6, r6, #9
    207a:	e046      	b.n	210a <newLine+0xe2>
			//This can be expanded with else if for the MSBs
			//of all the colors; see datasheet page 40.
			if((PORT->Group[1].IN.reg & PORT_PB07) != 0)
				rowPixel[getpixel] = 0xFF;
			else
				rowPixel[getpixel] = 0x00;
    207c:	4653      	mov	r3, sl
    207e:	7023      	strb	r3, [r4, #0]
			//dummy read, because pixel data broken up
			//per datasheet page 40. Everything after
			//the dummy write is BLUE pixels. Do we ever
			//need blue? IDK.
			
			REG_PORT_OUTCLR1 = LCD_RD;
    2080:	4643      	mov	r3, r8
    2082:	601e      	str	r6, [r3, #0]
			REG_PORT_OUTSET1 = LCD_RD;
    2084:	603e      	str	r6, [r7, #0]
    2086:	3401      	adds	r4, #1
		for(uint16_t getpixel = 0 ; getpixel < 800 ; getpixel++)
    2088:	4564      	cmp	r4, ip
    208a:	d008      	beq.n	209e <newLine+0x76>
			REG_PORT_OUTCLR1 = LCD_RD;
    208c:	4643      	mov	r3, r8
    208e:	601e      	str	r6, [r3, #0]
			REG_PORT_OUTSET1 = LCD_RD;
    2090:	603e      	str	r6, [r7, #0]
			if((PORT->Group[1].IN.reg & PORT_PB07) != 0)
    2092:	5843      	ldr	r3, [r0, r1]
    2094:	421a      	tst	r2, r3
    2096:	d0f1      	beq.n	207c <newLine+0x54>
				rowPixel[getpixel] = 0xFF;
    2098:	464b      	mov	r3, r9
    209a:	7023      	strb	r3, [r4, #0]
    209c:	e7f0      	b.n	2080 <newLine+0x58>
    209e:	9401      	str	r4, [sp, #4]
		}
		
		REG_PORT_OUTSET1 = LCD_DC;
    20a0:	2380      	movs	r3, #128	; 0x80
    20a2:	041b      	lsls	r3, r3, #16
    20a4:	603b      	str	r3, [r7, #0]
		REG_PORT_DIRSET1 = 0x0000FFFF;
    20a6:	4a3f      	ldr	r2, [pc, #252]	; (21a4 <newLine+0x17c>)
    20a8:	4b3f      	ldr	r3, [pc, #252]	; (21a8 <newLine+0x180>)
    20aa:	601a      	str	r2, [r3, #0]
		
		//now, read out that line of the display
		setXY(0, row, 799, row);	
    20ac:	9900      	ldr	r1, [sp, #0]
    20ae:	000b      	movs	r3, r1
    20b0:	4a3e      	ldr	r2, [pc, #248]	; (21ac <newLine+0x184>)
    20b2:	2000      	movs	r0, #0
    20b4:	4c3e      	ldr	r4, [pc, #248]	; (21b0 <newLine+0x188>)
    20b6:	47a0      	blx	r4
		for(uint16_t writepixel = 0 ; writepixel < 800 ; writepixel++)
		{
			if((rowPixel[writepixel] == 0xFF))
				setPixel((fore_Color_High<<8)|fore_Color_Low);
			else
				setPixel((back_Color_High<<8)|back_Color_Low);
    20b8:	4b3e      	ldr	r3, [pc, #248]	; (21b4 <newLine+0x18c>)
    20ba:	469b      	mov	fp, r3
    20bc:	4b3e      	ldr	r3, [pc, #248]	; (21b8 <newLine+0x190>)
    20be:	469a      	mov	sl, r3
    20c0:	4b3e      	ldr	r3, [pc, #248]	; (21bc <newLine+0x194>)
    20c2:	4699      	mov	r9, r3
    20c4:	9c01      	ldr	r4, [sp, #4]
    20c6:	e00b      	b.n	20e0 <newLine+0xb8>
				setPixel((fore_Color_High<<8)|fore_Color_Low);
    20c8:	4b3d      	ldr	r3, [pc, #244]	; (21c0 <newLine+0x198>)
    20ca:	8818      	ldrh	r0, [r3, #0]
    20cc:	0200      	lsls	r0, r0, #8
    20ce:	4b3d      	ldr	r3, [pc, #244]	; (21c4 <newLine+0x19c>)
    20d0:	881b      	ldrh	r3, [r3, #0]
    20d2:	4318      	orrs	r0, r3
    20d4:	b280      	uxth	r0, r0
    20d6:	4b39      	ldr	r3, [pc, #228]	; (21bc <newLine+0x194>)
    20d8:	4798      	blx	r3
    20da:	3501      	adds	r5, #1
		for(uint16_t writepixel = 0 ; writepixel < 800 ; writepixel++)
    20dc:	42a5      	cmp	r5, r4
    20de:	d00b      	beq.n	20f8 <newLine+0xd0>
			if((rowPixel[writepixel] == 0xFF))
    20e0:	782b      	ldrb	r3, [r5, #0]
    20e2:	2bff      	cmp	r3, #255	; 0xff
    20e4:	d0f0      	beq.n	20c8 <newLine+0xa0>
				setPixel((back_Color_High<<8)|back_Color_Low);
    20e6:	465b      	mov	r3, fp
    20e8:	8818      	ldrh	r0, [r3, #0]
    20ea:	0200      	lsls	r0, r0, #8
    20ec:	4653      	mov	r3, sl
    20ee:	881b      	ldrh	r3, [r3, #0]
    20f0:	4318      	orrs	r0, r3
    20f2:	b280      	uxth	r0, r0
    20f4:	47c8      	blx	r9
    20f6:	e7f0      	b.n	20da <newLine+0xb2>
	for(uint16_t row = 0 ; row < 460 ; row++)
    20f8:	9b00      	ldr	r3, [sp, #0]
    20fa:	3301      	adds	r3, #1
    20fc:	b29b      	uxth	r3, r3
    20fe:	001a      	movs	r2, r3
    2100:	9300      	str	r3, [sp, #0]
    2102:	23e6      	movs	r3, #230	; 0xe6
    2104:	005b      	lsls	r3, r3, #1
    2106:	429a      	cmp	r2, r3
    2108:	d031      	beq.n	216e <newLine+0x146>
		REG_PORT_OUTCLR1 = LCD_CS;
    210a:	4643      	mov	r3, r8
    210c:	2280      	movs	r2, #128	; 0x80
    210e:	03d2      	lsls	r2, r2, #15
    2110:	601a      	str	r2, [r3, #0]
		setXY(0, row+20, 799, row+20);
    2112:	9900      	ldr	r1, [sp, #0]
    2114:	3114      	adds	r1, #20
    2116:	b289      	uxth	r1, r1
    2118:	000b      	movs	r3, r1
    211a:	4a24      	ldr	r2, [pc, #144]	; (21ac <newLine+0x184>)
    211c:	2000      	movs	r0, #0
    211e:	4c24      	ldr	r4, [pc, #144]	; (21b0 <newLine+0x188>)
    2120:	47a0      	blx	r4
		LCD_Write_COM16(0x2E,0x00);
    2122:	2100      	movs	r1, #0
    2124:	202e      	movs	r0, #46	; 0x2e
    2126:	4b28      	ldr	r3, [pc, #160]	; (21c8 <newLine+0x1a0>)
    2128:	4798      	blx	r3
		REG_PORT_OUTSET1 = LCD_DC;
    212a:	2380      	movs	r3, #128	; 0x80
    212c:	041b      	lsls	r3, r3, #16
    212e:	603b      	str	r3, [r7, #0]
		REG_PORT_OUTCLR1 = LCD_RD;
    2130:	4643      	mov	r3, r8
    2132:	2280      	movs	r2, #128	; 0x80
    2134:	0252      	lsls	r2, r2, #9
    2136:	601a      	str	r2, [r3, #0]
		REG_PORT_OUTSET1 = LCD_RD;
    2138:	603a      	str	r2, [r7, #0]
		REG_PORT_DIRCLR1 = PORT_PB07;
    213a:	2280      	movs	r2, #128	; 0x80
    213c:	4b23      	ldr	r3, [pc, #140]	; (21cc <newLine+0x1a4>)
    213e:	601a      	str	r2, [r3, #0]
		PORT->Group[1].PINCFG[7].bit.INEN = 1;
    2140:	4a23      	ldr	r2, [pc, #140]	; (21d0 <newLine+0x1a8>)
    2142:	23c7      	movs	r3, #199	; 0xc7
    2144:	5cd1      	ldrb	r1, [r2, r3]
    2146:	2002      	movs	r0, #2
    2148:	4301      	orrs	r1, r0
    214a:	54d1      	strb	r1, [r2, r3]
		PORT->Group[1].PINCFG[7].bit.PULLEN = 1;
    214c:	5cd1      	ldrb	r1, [r2, r3]
    214e:	2004      	movs	r0, #4
    2150:	4301      	orrs	r1, r0
    2152:	54d1      	strb	r1, [r2, r3]
    2154:	ad02      	add	r5, sp, #8
    2156:	abca      	add	r3, sp, #808	; 0x328
    2158:	469c      	mov	ip, r3
    215a:	9501      	str	r5, [sp, #4]
			if((PORT->Group[1].IN.reg & PORT_PB07) != 0)
    215c:	0010      	movs	r0, r2
    215e:	21a0      	movs	r1, #160	; 0xa0
    2160:	2280      	movs	r2, #128	; 0x80
				rowPixel[getpixel] = 0x00;
    2162:	2300      	movs	r3, #0
    2164:	469a      	mov	sl, r3
				rowPixel[getpixel] = 0xFF;
    2166:	33ff      	adds	r3, #255	; 0xff
    2168:	4699      	mov	r9, r3
    216a:	002c      	movs	r4, r5
    216c:	e78e      	b.n	208c <newLine+0x64>
		}
	}
	
	//clear the last character line of the display
	//and fix the console text buffer
	fillRectBackColor(0, 460, 799, 480);
    216e:	3314      	adds	r3, #20
    2170:	4a0e      	ldr	r2, [pc, #56]	; (21ac <newLine+0x184>)
    2172:	21e6      	movs	r1, #230	; 0xe6
    2174:	0049      	lsls	r1, r1, #1
    2176:	2000      	movs	r0, #0
    2178:	4c16      	ldr	r4, [pc, #88]	; (21d4 <newLine+0x1ac>)
    217a:	47a0      	blx	r4
	
	
}
    217c:	23cb      	movs	r3, #203	; 0xcb
    217e:	009b      	lsls	r3, r3, #2
    2180:	449d      	add	sp, r3
    2182:	bc3c      	pop	{r2, r3, r4, r5}
    2184:	4690      	mov	r8, r2
    2186:	4699      	mov	r9, r3
    2188:	46a2      	mov	sl, r4
    218a:	46ab      	mov	fp, r5
    218c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    218e:	46c0      	nop			; (mov r8, r8)
    2190:	fffffcd4 	.word	0xfffffcd4
    2194:	2000030c 	.word	0x2000030c
    2198:	20000323 	.word	0x20000323
    219c:	41004494 	.word	0x41004494
    21a0:	41004498 	.word	0x41004498
    21a4:	0000ffff 	.word	0x0000ffff
    21a8:	41004488 	.word	0x41004488
    21ac:	0000031f 	.word	0x0000031f
    21b0:	00002abd 	.word	0x00002abd
    21b4:	20000a92 	.word	0x20000a92
    21b8:	20000a8c 	.word	0x20000a8c
    21bc:	00002c7d 	.word	0x00002c7d
    21c0:	20000a8e 	.word	0x20000a8e
    21c4:	20000a90 	.word	0x20000a90
    21c8:	00002ce9 	.word	0x00002ce9
    21cc:	41004484 	.word	0x41004484
    21d0:	41004400 	.word	0x41004400
    21d4:	00002bbd 	.word	0x00002bbd

000021d8 <blinkCursor>:

void blinkCursor(void)
{
    21d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    21da:	46d6      	mov	lr, sl
    21dc:	464f      	mov	r7, r9
    21de:	4646      	mov	r6, r8
    21e0:	b5c0      	push	{r6, r7, lr}
	uint16_t x = xCharPos;
    21e2:	4b47      	ldr	r3, [pc, #284]	; (2300 <blinkCursor+0x128>)
    21e4:	881b      	ldrh	r3, [r3, #0]
	uint16_t y = yCharPos;
    21e6:	4a47      	ldr	r2, [pc, #284]	; (2304 <blinkCursor+0x12c>)
    21e8:	8815      	ldrh	r5, [r2, #0]
	unsigned char character = consoleDisplay[x][y];
    21ea:	005a      	lsls	r2, r3, #1
    21ec:	18d2      	adds	r2, r2, r3
    21ee:	00d2      	lsls	r2, r2, #3
    21f0:	4845      	ldr	r0, [pc, #276]	; (2308 <blinkCursor+0x130>)
    21f2:	1882      	adds	r2, r0, r2
    21f4:	5d54      	ldrb	r4, [r2, r5]
	setXY(x*10,y*20,x*10+9,y*20+19);
    21f6:	0098      	lsls	r0, r3, #2
    21f8:	181b      	adds	r3, r3, r0
    21fa:	005b      	lsls	r3, r3, #1
    21fc:	b298      	uxth	r0, r3
    21fe:	2114      	movs	r1, #20
    2200:	4369      	muls	r1, r5
    2202:	b289      	uxth	r1, r1
    2204:	000b      	movs	r3, r1
    2206:	3313      	adds	r3, #19
    2208:	b29b      	uxth	r3, r3
    220a:	0002      	movs	r2, r0
    220c:	3209      	adds	r2, #9
    220e:	b292      	uxth	r2, r2
    2210:	4d3e      	ldr	r5, [pc, #248]	; (230c <blinkCursor+0x134>)
    2212:	47a8      	blx	r5
	REG_PORT_OUTCLR1 = LCD_CS;
    2214:	2280      	movs	r2, #128	; 0x80
    2216:	03d2      	lsls	r2, r2, #15
    2218:	4b3d      	ldr	r3, [pc, #244]	; (2310 <blinkCursor+0x138>)
    221a:	601a      	str	r2, [r3, #0]
	if(cursorBlinkState)
    221c:	4b3d      	ldr	r3, [pc, #244]	; (2314 <blinkCursor+0x13c>)
    221e:	781b      	ldrb	r3, [r3, #0]
    2220:	2b00      	cmp	r3, #0
    2222:	d113      	bne.n	224c <blinkCursor+0x74>
    2224:	4a3c      	ldr	r2, [pc, #240]	; (2318 <blinkCursor+0x140>)
    2226:	00a5      	lsls	r5, r4, #2
    2228:	192d      	adds	r5, r5, r4
    222a:	00ab      	lsls	r3, r5, #2
    222c:	18ed      	adds	r5, r5, r3
    222e:	1955      	adds	r5, r2, r5
    2230:	3401      	adds	r4, #1
    2232:	00a3      	lsls	r3, r4, #2
    2234:	191c      	adds	r4, r3, r4
    2236:	00a3      	lsls	r3, r4, #2
    2238:	18e4      	adds	r4, r4, r3
    223a:	4692      	mov	sl, r2
    223c:	44a2      	add	sl, r4
				{
					setPixel((fore_Color_High<<8)|fore_Color_Low);
				}
				else
				{
					setPixel((back_Color_High<<8)|back_Color_Low);
    223e:	4b37      	ldr	r3, [pc, #220]	; (231c <blinkCursor+0x144>)
    2240:	4699      	mov	r9, r3
    2242:	4b37      	ldr	r3, [pc, #220]	; (2320 <blinkCursor+0x148>)
    2244:	4698      	mov	r8, r3
    2246:	4f37      	ldr	r7, [pc, #220]	; (2324 <blinkCursor+0x14c>)
					setPixel((fore_Color_High<<8)|fore_Color_Low);
    2248:	4e37      	ldr	r6, [pc, #220]	; (2328 <blinkCursor+0x150>)
    224a:	e049      	b.n	22e0 <blinkCursor+0x108>
    224c:	4a32      	ldr	r2, [pc, #200]	; (2318 <blinkCursor+0x140>)
    224e:	00a5      	lsls	r5, r4, #2
    2250:	192d      	adds	r5, r5, r4
    2252:	00ab      	lsls	r3, r5, #2
    2254:	18ed      	adds	r5, r5, r3
    2256:	1955      	adds	r5, r2, r5
    2258:	3401      	adds	r4, #1
    225a:	00a3      	lsls	r3, r4, #2
    225c:	191c      	adds	r4, r3, r4
    225e:	00a3      	lsls	r3, r4, #2
    2260:	18e4      	adds	r4, r4, r3
    2262:	4692      	mov	sl, r2
    2264:	44a2      	add	sl, r4
					setPixel((fore_Color_High<<8)|fore_Color_Low);
    2266:	4b30      	ldr	r3, [pc, #192]	; (2328 <blinkCursor+0x150>)
    2268:	4699      	mov	r9, r3
    226a:	4b30      	ldr	r3, [pc, #192]	; (232c <blinkCursor+0x154>)
    226c:	4698      	mov	r8, r3
    226e:	4f2d      	ldr	r7, [pc, #180]	; (2324 <blinkCursor+0x14c>)
					setPixel((back_Color_High<<8)|back_Color_Low);
    2270:	4e2a      	ldr	r6, [pc, #168]	; (231c <blinkCursor+0x144>)
    2272:	e019      	b.n	22a8 <blinkCursor+0xd0>
					setPixel((fore_Color_High<<8)|fore_Color_Low);
    2274:	464b      	mov	r3, r9
    2276:	8818      	ldrh	r0, [r3, #0]
    2278:	0200      	lsls	r0, r0, #8
    227a:	4643      	mov	r3, r8
    227c:	881b      	ldrh	r3, [r3, #0]
    227e:	4318      	orrs	r0, r3
    2280:	b280      	uxth	r0, r0
    2282:	47b8      	blx	r7
			for(int j=0;j<8;j++)
    2284:	3c01      	subs	r4, #1
    2286:	d30c      	bcc.n	22a2 <blinkCursor+0xca>
				if((CodePage437[character][i]&(1<<(7-j)))!=0)
    2288:	782b      	ldrb	r3, [r5, #0]
    228a:	4123      	asrs	r3, r4
    228c:	07db      	lsls	r3, r3, #31
    228e:	d5f1      	bpl.n	2274 <blinkCursor+0x9c>
					setPixel((back_Color_High<<8)|back_Color_Low);
    2290:	8830      	ldrh	r0, [r6, #0]
    2292:	0200      	lsls	r0, r0, #8
    2294:	4b22      	ldr	r3, [pc, #136]	; (2320 <blinkCursor+0x148>)
    2296:	881b      	ldrh	r3, [r3, #0]
    2298:	4318      	orrs	r0, r3
    229a:	b280      	uxth	r0, r0
    229c:	4b21      	ldr	r3, [pc, #132]	; (2324 <blinkCursor+0x14c>)
    229e:	4798      	blx	r3
    22a0:	e7f0      	b.n	2284 <blinkCursor+0xac>
    22a2:	3501      	adds	r5, #1
		for(uint16_t i=0; i <= 24; i++)
    22a4:	4555      	cmp	r5, sl
    22a6:	d01d      	beq.n	22e4 <blinkCursor+0x10c>
{
    22a8:	2407      	movs	r4, #7
    22aa:	e7ed      	b.n	2288 <blinkCursor+0xb0>
					setPixel((back_Color_High<<8)|back_Color_Low);
    22ac:	464b      	mov	r3, r9
    22ae:	8818      	ldrh	r0, [r3, #0]
    22b0:	0200      	lsls	r0, r0, #8
    22b2:	4643      	mov	r3, r8
    22b4:	881b      	ldrh	r3, [r3, #0]
    22b6:	4318      	orrs	r0, r3
    22b8:	b280      	uxth	r0, r0
    22ba:	47b8      	blx	r7
			for(int j=0;j<8;j++)
    22bc:	3c01      	subs	r4, #1
    22be:	d30c      	bcc.n	22da <blinkCursor+0x102>
				if((CodePage437[character][i]&(1<<(7-j)))!=0)
    22c0:	782b      	ldrb	r3, [r5, #0]
    22c2:	4123      	asrs	r3, r4
    22c4:	07db      	lsls	r3, r3, #31
    22c6:	d5f1      	bpl.n	22ac <blinkCursor+0xd4>
					setPixel((fore_Color_High<<8)|fore_Color_Low);
    22c8:	8830      	ldrh	r0, [r6, #0]
    22ca:	0200      	lsls	r0, r0, #8
    22cc:	4b17      	ldr	r3, [pc, #92]	; (232c <blinkCursor+0x154>)
    22ce:	881b      	ldrh	r3, [r3, #0]
    22d0:	4318      	orrs	r0, r3
    22d2:	b280      	uxth	r0, r0
    22d4:	4b13      	ldr	r3, [pc, #76]	; (2324 <blinkCursor+0x14c>)
    22d6:	4798      	blx	r3
    22d8:	e7f0      	b.n	22bc <blinkCursor+0xe4>
    22da:	3501      	adds	r5, #1
		for(uint16_t i=0; i <= 24; i++)
    22dc:	4555      	cmp	r5, sl
    22de:	d001      	beq.n	22e4 <blinkCursor+0x10c>
{
    22e0:	2407      	movs	r4, #7
    22e2:	e7ed      	b.n	22c0 <blinkCursor+0xe8>
				}
			}
		}
	}

	REG_PORT_OUTSET1 = LCD_CS;
    22e4:	2280      	movs	r2, #128	; 0x80
    22e6:	03d2      	lsls	r2, r2, #15
    22e8:	4b11      	ldr	r3, [pc, #68]	; (2330 <blinkCursor+0x158>)
    22ea:	601a      	str	r2, [r3, #0]
	
	//invert cursorBlinkState
	cursorBlinkState = !cursorBlinkState;
    22ec:	4a09      	ldr	r2, [pc, #36]	; (2314 <blinkCursor+0x13c>)
    22ee:	7813      	ldrb	r3, [r2, #0]
    22f0:	2101      	movs	r1, #1
    22f2:	404b      	eors	r3, r1
    22f4:	7013      	strb	r3, [r2, #0]
	
}
    22f6:	bc1c      	pop	{r2, r3, r4}
    22f8:	4690      	mov	r8, r2
    22fa:	4699      	mov	r9, r3
    22fc:	46a2      	mov	sl, r4
    22fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2300:	20000298 	.word	0x20000298
    2304:	2000029a 	.word	0x2000029a
    2308:	2000030c 	.word	0x2000030c
    230c:	00002abd 	.word	0x00002abd
    2310:	41004494 	.word	0x41004494
    2314:	20000010 	.word	0x20000010
    2318:	00004db0 	.word	0x00004db0
    231c:	20000a92 	.word	0x20000a92
    2320:	20000a8c 	.word	0x20000a8c
    2324:	00002c7d 	.word	0x00002c7d
    2328:	20000a8e 	.word	0x20000a8e
    232c:	20000a90 	.word	0x20000a90
    2330:	41004498 	.word	0x41004498

00002334 <writeString>:

void writeString(const char str[])
{
    2334:	b5f0      	push	{r4, r5, r6, r7, lr}
    2336:	46c6      	mov	lr, r8
    2338:	b500      	push	{lr}
    233a:	0005      	movs	r5, r0
	int length = strlen(str);
    233c:	4b0c      	ldr	r3, [pc, #48]	; (2370 <writeString+0x3c>)
    233e:	4798      	blx	r3
	for(int i = 0; i < length; i++)
    2340:	2800      	cmp	r0, #0
    2342:	dd11      	ble.n	2368 <writeString+0x34>
    2344:	002c      	movs	r4, r5
    2346:	182d      	adds	r5, r5, r0
	{
		drawChar(str[i]);
    2348:	4f0a      	ldr	r7, [pc, #40]	; (2374 <writeString+0x40>)
		if(xCharPos <= 80)
    234a:	4e0b      	ldr	r6, [pc, #44]	; (2378 <writeString+0x44>)
		xCharPos++;
    234c:	46b0      	mov	r8, r6
    234e:	e002      	b.n	2356 <writeString+0x22>
    2350:	3401      	adds	r4, #1
	for(int i = 0; i < length; i++)
    2352:	42ac      	cmp	r4, r5
    2354:	d008      	beq.n	2368 <writeString+0x34>
		drawChar(str[i]);
    2356:	7820      	ldrb	r0, [r4, #0]
    2358:	47b8      	blx	r7
		if(xCharPos <= 80)
    235a:	8833      	ldrh	r3, [r6, #0]
    235c:	2b50      	cmp	r3, #80	; 0x50
    235e:	d8f7      	bhi.n	2350 <writeString+0x1c>
		xCharPos++;
    2360:	3301      	adds	r3, #1
    2362:	4642      	mov	r2, r8
    2364:	8013      	strh	r3, [r2, #0]
    2366:	e7f3      	b.n	2350 <writeString+0x1c>
	}
}
    2368:	bc04      	pop	{r2}
    236a:	4690      	mov	r8, r2
    236c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    236e:	46c0      	nop			; (mov r8, r8)
    2370:	00003829 	.word	0x00003829
    2374:	00001f41 	.word	0x00001f41
    2378:	20000298 	.word	0x20000298

0000237c <scanCodesContains>:

bool scanCodesContains(int scanCode)
{
	for(int i = 0 ; i < 70 ; i++)
	{
		if(scanCodes[i] == scanCode)
    237c:	4b09      	ldr	r3, [pc, #36]	; (23a4 <scanCodesContains+0x28>)
    237e:	681b      	ldr	r3, [r3, #0]
    2380:	4298      	cmp	r0, r3
    2382:	d00b      	beq.n	239c <scanCodesContains+0x20>
    2384:	4a07      	ldr	r2, [pc, #28]	; (23a4 <scanCodesContains+0x28>)
    2386:	1d13      	adds	r3, r2, #4
    2388:	3219      	adds	r2, #25
    238a:	32ff      	adds	r2, #255	; 0xff
    238c:	6819      	ldr	r1, [r3, #0]
    238e:	4281      	cmp	r1, r0
    2390:	d006      	beq.n	23a0 <scanCodesContains+0x24>
    2392:	3304      	adds	r3, #4
	for(int i = 0 ; i < 70 ; i++)
    2394:	4293      	cmp	r3, r2
    2396:	d1f9      	bne.n	238c <scanCodesContains+0x10>
		{
			return true;
		}
	}
	return false;
    2398:	2000      	movs	r0, #0
    239a:	e002      	b.n	23a2 <scanCodesContains+0x26>
			return true;
    239c:	2001      	movs	r0, #1
    239e:	e000      	b.n	23a2 <scanCodesContains+0x26>
    23a0:	2001      	movs	r0, #1
}
    23a2:	4770      	bx	lr
    23a4:	2000003c 	.word	0x2000003c

000023a8 <keyDown>:

bool keyDown(int scancode)
{
	for(int i = 0 ; i < 20 ; i++)
	{
		if(keyDownBuffer[i] == scancode)
    23a8:	4b09      	ldr	r3, [pc, #36]	; (23d0 <keyDown+0x28>)
    23aa:	781b      	ldrb	r3, [r3, #0]
    23ac:	4298      	cmp	r0, r3
    23ae:	d00a      	beq.n	23c6 <keyDown+0x1e>
    23b0:	4907      	ldr	r1, [pc, #28]	; (23d0 <keyDown+0x28>)
    23b2:	1c4b      	adds	r3, r1, #1
    23b4:	3114      	adds	r1, #20
    23b6:	781a      	ldrb	r2, [r3, #0]
    23b8:	4282      	cmp	r2, r0
    23ba:	d006      	beq.n	23ca <keyDown+0x22>
    23bc:	3301      	adds	r3, #1
	for(int i = 0 ; i < 20 ; i++)
    23be:	428b      	cmp	r3, r1
    23c0:	d1f9      	bne.n	23b6 <keyDown+0xe>
		{
			return true;
		}	
	}
	return false;
    23c2:	2000      	movs	r0, #0
}
    23c4:	4770      	bx	lr
			return true;
    23c6:	2001      	movs	r0, #1
    23c8:	e7fc      	b.n	23c4 <keyDown+0x1c>
    23ca:	2001      	movs	r0, #1
    23cc:	e7fa      	b.n	23c4 <keyDown+0x1c>
    23ce:	46c0      	nop			; (mov r8, r8)
    23d0:	20000014 	.word	0x20000014

000023d4 <printKeyboardBuffer>:
{
    23d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    23d6:	46de      	mov	lr, fp
    23d8:	4657      	mov	r7, sl
    23da:	464e      	mov	r6, r9
    23dc:	4645      	mov	r5, r8
    23de:	b5e0      	push	{r5, r6, r7, lr}
    23e0:	b0a7      	sub	sp, #156	; 0x9c
	unsigned char noCase[] =	  
    23e2:	4cc9      	ldr	r4, [pc, #804]	; (2708 <printKeyboardBuffer+0x334>)
    23e4:	2246      	movs	r2, #70	; 0x46
    23e6:	0021      	movs	r1, r4
    23e8:	a814      	add	r0, sp, #80	; 0x50
    23ea:	4dc8      	ldr	r5, [pc, #800]	; (270c <printKeyboardBuffer+0x338>)
    23ec:	47a8      	blx	r5
	unsigned char shiftCase[] = 
    23ee:	0021      	movs	r1, r4
    23f0:	3148      	adds	r1, #72	; 0x48
    23f2:	2246      	movs	r2, #70	; 0x46
    23f4:	a802      	add	r0, sp, #8
    23f6:	47a8      	blx	r5
    23f8:	4fc5      	ldr	r7, [pc, #788]	; (2710 <printKeyboardBuffer+0x33c>)
    23fa:	0038      	movs	r0, r7
    23fc:	3014      	adds	r0, #20
    23fe:	003d      	movs	r5, r7
	bool shifted = false;
    2400:	2300      	movs	r3, #0
    2402:	9301      	str	r3, [sp, #4]
    2404:	e002      	b.n	240c <printKeyboardBuffer+0x38>
    2406:	3501      	adds	r5, #1
	for(int i=0; i<20; i++)
    2408:	4285      	cmp	r5, r0
    240a:	d00b      	beq.n	2424 <printKeyboardBuffer+0x50>
		if((scanCodeBuffer[i] == 13) | (scanCodeBuffer[i] == 49))
    240c:	782b      	ldrb	r3, [r5, #0]
    240e:	001a      	movs	r2, r3
    2410:	3a0d      	subs	r2, #13
    2412:	4251      	negs	r1, r2
    2414:	414a      	adcs	r2, r1
    2416:	3b31      	subs	r3, #49	; 0x31
    2418:	4259      	negs	r1, r3
    241a:	414b      	adcs	r3, r1
    241c:	4313      	orrs	r3, r2
    241e:	d0f2      	beq.n	2406 <printKeyboardBuffer+0x32>
			shifted = true;
    2420:	9301      	str	r3, [sp, #4]
    2422:	e7f0      	b.n	2406 <printKeyboardBuffer+0x32>
    2424:	4ebb      	ldr	r6, [pc, #748]	; (2714 <printKeyboardBuffer+0x340>)
	for(int i=0; i<20; i++)
    2426:	003c      	movs	r4, r7
		if(!keyDown(scanCodeBuffer[i]))
    2428:	4bbb      	ldr	r3, [pc, #748]	; (2718 <printKeyboardBuffer+0x344>)
    242a:	469b      	mov	fp, r3
					consoleDisplay[xCharPos][yCharPos] = noCase[scanCodeBuffer[i]];
    242c:	46b9      	mov	r9, r7
    242e:	002f      	movs	r7, r5
    2430:	e008      	b.n	2444 <printKeyboardBuffer+0x70>
				if(xCharPos > 0) 
    2432:	4bba      	ldr	r3, [pc, #744]	; (271c <printKeyboardBuffer+0x348>)
    2434:	881b      	ldrh	r3, [r3, #0]
    2436:	2b00      	cmp	r3, #0
    2438:	d159      	bne.n	24ee <printKeyboardBuffer+0x11a>
    243a:	3401      	adds	r4, #1
    243c:	3601      	adds	r6, #1
	for(int i=0; i<20; i++)
    243e:	42bc      	cmp	r4, r7
    2440:	d100      	bne.n	2444 <printKeyboardBuffer+0x70>
    2442:	e1ad      	b.n	27a0 <printKeyboardBuffer+0x3cc>
    2444:	9400      	str	r4, [sp, #0]
		if(!keyDown(scanCodeBuffer[i]))
    2446:	7825      	ldrb	r5, [r4, #0]
    2448:	0028      	movs	r0, r5
    244a:	47d8      	blx	fp
    244c:	2800      	cmp	r0, #0
    244e:	d1f4      	bne.n	243a <printKeyboardBuffer+0x66>
			keyDownBuffer[i] = scanCodeBuffer[i];
    2450:	7035      	strb	r5, [r6, #0]
			if(scanCodeBuffer[i] == 0xFF)
    2452:	2dff      	cmp	r5, #255	; 0xff
    2454:	d0f1      	beq.n	243a <printKeyboardBuffer+0x66>
			else if(scanCodeBuffer[i] == 35) //left
    2456:	2d23      	cmp	r5, #35	; 0x23
    2458:	d0eb      	beq.n	2432 <printKeyboardBuffer+0x5e>
			else if(scanCodeBuffer[i] == 45)	//down
    245a:	2d2d      	cmp	r5, #45	; 0x2d
    245c:	d063      	beq.n	2526 <printKeyboardBuffer+0x152>
			else if(scanCodeBuffer[i] == 55)	//up
    245e:	2d37      	cmp	r5, #55	; 0x37
    2460:	d100      	bne.n	2464 <printKeyboardBuffer+0x90>
    2462:	e081      	b.n	2568 <printKeyboardBuffer+0x194>
			else if(scanCodeBuffer[i] == 65)	//right
    2464:	2d41      	cmp	r5, #65	; 0x41
    2466:	d100      	bne.n	246a <printKeyboardBuffer+0x96>
    2468:	e09f      	b.n	25aa <printKeyboardBuffer+0x1d6>
			else if((scanCodeBuffer[i] == 49) | (scanCodeBuffer[i] == 13))
    246a:	2d31      	cmp	r5, #49	; 0x31
    246c:	d0e5      	beq.n	243a <printKeyboardBuffer+0x66>
    246e:	2d0d      	cmp	r5, #13
    2470:	d0e3      	beq.n	243a <printKeyboardBuffer+0x66>
			else if(scanCodeBuffer[i] == 58) //Return
    2472:	2d3a      	cmp	r5, #58	; 0x3a
    2474:	d100      	bne.n	2478 <printKeyboardBuffer+0xa4>
    2476:	e0b9      	b.n	25ec <printKeyboardBuffer+0x218>
			else if(scanCodeBuffer[i] == 69) //Line
    2478:	2d45      	cmp	r5, #69	; 0x45
    247a:	d100      	bne.n	247e <printKeyboardBuffer+0xaa>
    247c:	e0ed      	b.n	265a <printKeyboardBuffer+0x286>
			else if(scanCodeBuffer[i] == 66) //Backspace
    247e:	2d42      	cmp	r5, #66	; 0x42
    2480:	d100      	bne.n	2484 <printKeyboardBuffer+0xb0>
    2482:	e121      	b.n	26c8 <printKeyboardBuffer+0x2f4>
				if(shifted)
    2484:	9b01      	ldr	r3, [sp, #4]
    2486:	2b00      	cmp	r3, #0
    2488:	d100      	bne.n	248c <printKeyboardBuffer+0xb8>
    248a:	e155      	b.n	2738 <printKeyboardBuffer+0x364>
					consoleDisplay[xCharPos][yCharPos] = shiftCase[scanCodeBuffer[i]];
    248c:	ab02      	add	r3, sp, #8
    248e:	5d58      	ldrb	r0, [r3, r5]
    2490:	4ba2      	ldr	r3, [pc, #648]	; (271c <printKeyboardBuffer+0x348>)
    2492:	4698      	mov	r8, r3
    2494:	8819      	ldrh	r1, [r3, #0]
    2496:	4ba2      	ldr	r3, [pc, #648]	; (2720 <printKeyboardBuffer+0x34c>)
    2498:	469a      	mov	sl, r3
    249a:	881a      	ldrh	r2, [r3, #0]
    249c:	004b      	lsls	r3, r1, #1
    249e:	185b      	adds	r3, r3, r1
    24a0:	00db      	lsls	r3, r3, #3
    24a2:	49a0      	ldr	r1, [pc, #640]	; (2724 <printKeyboardBuffer+0x350>)
    24a4:	468c      	mov	ip, r1
    24a6:	4463      	add	r3, ip
    24a8:	5498      	strb	r0, [r3, r2]
					printf("%c",consoleDisplay[xCharPos][yCharPos]);
    24aa:	4b9f      	ldr	r3, [pc, #636]	; (2728 <printKeyboardBuffer+0x354>)
    24ac:	4798      	blx	r3
					drawChar(shiftCase[scanCodeBuffer[i]]);
    24ae:	9b00      	ldr	r3, [sp, #0]
    24b0:	781b      	ldrb	r3, [r3, #0]
    24b2:	aa02      	add	r2, sp, #8
    24b4:	5cd0      	ldrb	r0, [r2, r3]
    24b6:	4d9d      	ldr	r5, [pc, #628]	; (272c <printKeyboardBuffer+0x358>)
    24b8:	47a8      	blx	r5
					xCharPos++;
    24ba:	4643      	mov	r3, r8
    24bc:	881b      	ldrh	r3, [r3, #0]
    24be:	3301      	adds	r3, #1
    24c0:	b29b      	uxth	r3, r3
    24c2:	4642      	mov	r2, r8
    24c4:	8013      	strh	r3, [r2, #0]
					drawChar(consoleDisplay[xCharPos][yCharPos]);
    24c6:	4652      	mov	r2, sl
    24c8:	8811      	ldrh	r1, [r2, #0]
    24ca:	005a      	lsls	r2, r3, #1
    24cc:	18d3      	adds	r3, r2, r3
    24ce:	00db      	lsls	r3, r3, #3
    24d0:	4a94      	ldr	r2, [pc, #592]	; (2724 <printKeyboardBuffer+0x350>)
    24d2:	4694      	mov	ip, r2
    24d4:	4463      	add	r3, ip
    24d6:	5c58      	ldrb	r0, [r3, r1]
    24d8:	47a8      	blx	r5
					if(xCharPos > 79)
    24da:	4643      	mov	r3, r8
    24dc:	881b      	ldrh	r3, [r3, #0]
    24de:	2b4f      	cmp	r3, #79	; 0x4f
    24e0:	d902      	bls.n	24e8 <printKeyboardBuffer+0x114>
						xCharPos--;
    24e2:	3b01      	subs	r3, #1
    24e4:	4a8d      	ldr	r2, [pc, #564]	; (271c <printKeyboardBuffer+0x348>)
    24e6:	8013      	strh	r3, [r2, #0]
					blinkCursor();
    24e8:	4b91      	ldr	r3, [pc, #580]	; (2730 <printKeyboardBuffer+0x35c>)
    24ea:	4798      	blx	r3
    24ec:	e7a5      	b.n	243a <printKeyboardBuffer+0x66>
					drawChar(consoleDisplay[xCharPos][yCharPos]);
    24ee:	4d8d      	ldr	r5, [pc, #564]	; (2724 <printKeyboardBuffer+0x350>)
    24f0:	4a8b      	ldr	r2, [pc, #556]	; (2720 <printKeyboardBuffer+0x34c>)
    24f2:	4690      	mov	r8, r2
    24f4:	8811      	ldrh	r1, [r2, #0]
    24f6:	005a      	lsls	r2, r3, #1
    24f8:	18d3      	adds	r3, r2, r3
    24fa:	00db      	lsls	r3, r3, #3
    24fc:	18eb      	adds	r3, r5, r3
    24fe:	5c58      	ldrb	r0, [r3, r1]
    2500:	4b8a      	ldr	r3, [pc, #552]	; (272c <printKeyboardBuffer+0x358>)
    2502:	469a      	mov	sl, r3
    2504:	4798      	blx	r3
					xCharPos--;
    2506:	4a85      	ldr	r2, [pc, #532]	; (271c <printKeyboardBuffer+0x348>)
    2508:	8813      	ldrh	r3, [r2, #0]
    250a:	3b01      	subs	r3, #1
    250c:	b29b      	uxth	r3, r3
    250e:	8013      	strh	r3, [r2, #0]
					tempCharacter = consoleDisplay[xCharPos][yCharPos];
    2510:	4642      	mov	r2, r8
    2512:	8811      	ldrh	r1, [r2, #0]
    2514:	005a      	lsls	r2, r3, #1
    2516:	18d3      	adds	r3, r2, r3
    2518:	00db      	lsls	r3, r3, #3
    251a:	18eb      	adds	r3, r5, r3
					drawChar(tempCharacter);
    251c:	5c58      	ldrb	r0, [r3, r1]
    251e:	47d0      	blx	sl
					blinkCursor();
    2520:	4b83      	ldr	r3, [pc, #524]	; (2730 <printKeyboardBuffer+0x35c>)
    2522:	4798      	blx	r3
    2524:	e789      	b.n	243a <printKeyboardBuffer+0x66>
				if(yCharPos < 23)
    2526:	4b7e      	ldr	r3, [pc, #504]	; (2720 <printKeyboardBuffer+0x34c>)
    2528:	881a      	ldrh	r2, [r3, #0]
    252a:	2a16      	cmp	r2, #22
    252c:	d900      	bls.n	2530 <printKeyboardBuffer+0x15c>
    252e:	e784      	b.n	243a <printKeyboardBuffer+0x66>
					drawChar(consoleDisplay[xCharPos][yCharPos]);
    2530:	4d7c      	ldr	r5, [pc, #496]	; (2724 <printKeyboardBuffer+0x350>)
    2532:	4b7a      	ldr	r3, [pc, #488]	; (271c <printKeyboardBuffer+0x348>)
    2534:	4698      	mov	r8, r3
    2536:	8819      	ldrh	r1, [r3, #0]
    2538:	004b      	lsls	r3, r1, #1
    253a:	185b      	adds	r3, r3, r1
    253c:	00db      	lsls	r3, r3, #3
    253e:	18eb      	adds	r3, r5, r3
    2540:	5c98      	ldrb	r0, [r3, r2]
    2542:	4b7a      	ldr	r3, [pc, #488]	; (272c <printKeyboardBuffer+0x358>)
    2544:	469a      	mov	sl, r3
    2546:	4798      	blx	r3
					yCharPos++;
    2548:	4a75      	ldr	r2, [pc, #468]	; (2720 <printKeyboardBuffer+0x34c>)
    254a:	8813      	ldrh	r3, [r2, #0]
    254c:	3301      	adds	r3, #1
    254e:	b29b      	uxth	r3, r3
    2550:	8013      	strh	r3, [r2, #0]
					tempCharacter = consoleDisplay[xCharPos][yCharPos];
    2552:	4642      	mov	r2, r8
    2554:	8811      	ldrh	r1, [r2, #0]
    2556:	004a      	lsls	r2, r1, #1
    2558:	1852      	adds	r2, r2, r1
    255a:	00d2      	lsls	r2, r2, #3
    255c:	18ad      	adds	r5, r5, r2
					drawChar(tempCharacter);
    255e:	5ce8      	ldrb	r0, [r5, r3]
    2560:	47d0      	blx	sl
					blinkCursor();
    2562:	4b73      	ldr	r3, [pc, #460]	; (2730 <printKeyboardBuffer+0x35c>)
    2564:	4798      	blx	r3
    2566:	e768      	b.n	243a <printKeyboardBuffer+0x66>
				if(yCharPos > 0)
    2568:	4b6d      	ldr	r3, [pc, #436]	; (2720 <printKeyboardBuffer+0x34c>)
    256a:	881b      	ldrh	r3, [r3, #0]
    256c:	2b00      	cmp	r3, #0
    256e:	d100      	bne.n	2572 <printKeyboardBuffer+0x19e>
    2570:	e763      	b.n	243a <printKeyboardBuffer+0x66>
					drawChar(consoleDisplay[xCharPos][yCharPos]);
    2572:	4d6c      	ldr	r5, [pc, #432]	; (2724 <printKeyboardBuffer+0x350>)
    2574:	4a69      	ldr	r2, [pc, #420]	; (271c <printKeyboardBuffer+0x348>)
    2576:	4690      	mov	r8, r2
    2578:	8811      	ldrh	r1, [r2, #0]
    257a:	004a      	lsls	r2, r1, #1
    257c:	1852      	adds	r2, r2, r1
    257e:	00d2      	lsls	r2, r2, #3
    2580:	18aa      	adds	r2, r5, r2
    2582:	5cd0      	ldrb	r0, [r2, r3]
    2584:	4b69      	ldr	r3, [pc, #420]	; (272c <printKeyboardBuffer+0x358>)
    2586:	469a      	mov	sl, r3
    2588:	4798      	blx	r3
					yCharPos--;
    258a:	4a65      	ldr	r2, [pc, #404]	; (2720 <printKeyboardBuffer+0x34c>)
    258c:	8813      	ldrh	r3, [r2, #0]
    258e:	3b01      	subs	r3, #1
    2590:	b29b      	uxth	r3, r3
    2592:	8013      	strh	r3, [r2, #0]
					tempCharacter = consoleDisplay[xCharPos][yCharPos];
    2594:	4642      	mov	r2, r8
    2596:	8811      	ldrh	r1, [r2, #0]
    2598:	004a      	lsls	r2, r1, #1
    259a:	1852      	adds	r2, r2, r1
    259c:	00d2      	lsls	r2, r2, #3
    259e:	18ad      	adds	r5, r5, r2
					drawChar(tempCharacter);
    25a0:	5ce8      	ldrb	r0, [r5, r3]
    25a2:	47d0      	blx	sl
					blinkCursor();				
    25a4:	4b62      	ldr	r3, [pc, #392]	; (2730 <printKeyboardBuffer+0x35c>)
    25a6:	4798      	blx	r3
    25a8:	e747      	b.n	243a <printKeyboardBuffer+0x66>
				if(xCharPos < 79)
    25aa:	4b5c      	ldr	r3, [pc, #368]	; (271c <printKeyboardBuffer+0x348>)
    25ac:	881b      	ldrh	r3, [r3, #0]
    25ae:	2b4e      	cmp	r3, #78	; 0x4e
    25b0:	d900      	bls.n	25b4 <printKeyboardBuffer+0x1e0>
    25b2:	e742      	b.n	243a <printKeyboardBuffer+0x66>
					drawChar(consoleDisplay[xCharPos][yCharPos]);
    25b4:	4d5b      	ldr	r5, [pc, #364]	; (2724 <printKeyboardBuffer+0x350>)
    25b6:	4a5a      	ldr	r2, [pc, #360]	; (2720 <printKeyboardBuffer+0x34c>)
    25b8:	4690      	mov	r8, r2
    25ba:	8811      	ldrh	r1, [r2, #0]
    25bc:	005a      	lsls	r2, r3, #1
    25be:	18d3      	adds	r3, r2, r3
    25c0:	00db      	lsls	r3, r3, #3
    25c2:	18eb      	adds	r3, r5, r3
    25c4:	5c58      	ldrb	r0, [r3, r1]
    25c6:	4b59      	ldr	r3, [pc, #356]	; (272c <printKeyboardBuffer+0x358>)
    25c8:	469a      	mov	sl, r3
    25ca:	4798      	blx	r3
					xCharPos++;
    25cc:	4a53      	ldr	r2, [pc, #332]	; (271c <printKeyboardBuffer+0x348>)
    25ce:	8813      	ldrh	r3, [r2, #0]
    25d0:	3301      	adds	r3, #1
    25d2:	b29b      	uxth	r3, r3
    25d4:	8013      	strh	r3, [r2, #0]
					tempCharacter = consoleDisplay[xCharPos][yCharPos];
    25d6:	4642      	mov	r2, r8
    25d8:	8811      	ldrh	r1, [r2, #0]
    25da:	005a      	lsls	r2, r3, #1
    25dc:	18d3      	adds	r3, r2, r3
    25de:	00db      	lsls	r3, r3, #3
    25e0:	18eb      	adds	r3, r5, r3
					drawChar(tempCharacter);
    25e2:	5c58      	ldrb	r0, [r3, r1]
    25e4:	47d0      	blx	sl
					blinkCursor();					
    25e6:	4b52      	ldr	r3, [pc, #328]	; (2730 <printKeyboardBuffer+0x35c>)
    25e8:	4798      	blx	r3
    25ea:	e726      	b.n	243a <printKeyboardBuffer+0x66>
				if(yCharPos == 23)
    25ec:	4b4c      	ldr	r3, [pc, #304]	; (2720 <printKeyboardBuffer+0x34c>)
    25ee:	881a      	ldrh	r2, [r3, #0]
    25f0:	2a17      	cmp	r2, #23
    25f2:	d01b      	beq.n	262c <printKeyboardBuffer+0x258>
					drawChar(consoleDisplay[xCharPos][yCharPos]);
    25f4:	4d4b      	ldr	r5, [pc, #300]	; (2724 <printKeyboardBuffer+0x350>)
    25f6:	4b49      	ldr	r3, [pc, #292]	; (271c <printKeyboardBuffer+0x348>)
    25f8:	4698      	mov	r8, r3
    25fa:	8819      	ldrh	r1, [r3, #0]
    25fc:	004b      	lsls	r3, r1, #1
    25fe:	185b      	adds	r3, r3, r1
    2600:	00db      	lsls	r3, r3, #3
    2602:	18eb      	adds	r3, r5, r3
    2604:	5c98      	ldrb	r0, [r3, r2]
    2606:	4b49      	ldr	r3, [pc, #292]	; (272c <printKeyboardBuffer+0x358>)
    2608:	469a      	mov	sl, r3
    260a:	4798      	blx	r3
					yCharPos++;
    260c:	4a44      	ldr	r2, [pc, #272]	; (2720 <printKeyboardBuffer+0x34c>)
    260e:	8813      	ldrh	r3, [r2, #0]
    2610:	3301      	adds	r3, #1
    2612:	b29b      	uxth	r3, r3
    2614:	8013      	strh	r3, [r2, #0]
					xCharPos = 0;
    2616:	2200      	movs	r2, #0
    2618:	4641      	mov	r1, r8
    261a:	800a      	strh	r2, [r1, #0]
					drawChar(consoleDisplay[xCharPos][yCharPos]);
    261c:	5ce8      	ldrb	r0, [r5, r3]
    261e:	47d0      	blx	sl
					blinkCursor();
    2620:	4b43      	ldr	r3, [pc, #268]	; (2730 <printKeyboardBuffer+0x35c>)
    2622:	4798      	blx	r3
					printf("\r");
    2624:	200d      	movs	r0, #13
    2626:	4b40      	ldr	r3, [pc, #256]	; (2728 <printKeyboardBuffer+0x354>)
    2628:	4798      	blx	r3
    262a:	e706      	b.n	243a <printKeyboardBuffer+0x66>
					drawChar(consoleDisplay[xCharPos][yCharPos]);
    262c:	4d3b      	ldr	r5, [pc, #236]	; (271c <printKeyboardBuffer+0x348>)
    262e:	882a      	ldrh	r2, [r5, #0]
    2630:	0053      	lsls	r3, r2, #1
    2632:	189b      	adds	r3, r3, r2
    2634:	00db      	lsls	r3, r3, #3
    2636:	4a3b      	ldr	r2, [pc, #236]	; (2724 <printKeyboardBuffer+0x350>)
    2638:	18d3      	adds	r3, r2, r3
    263a:	7dd8      	ldrb	r0, [r3, #23]
    263c:	4b3b      	ldr	r3, [pc, #236]	; (272c <printKeyboardBuffer+0x358>)
    263e:	4698      	mov	r8, r3
    2640:	4798      	blx	r3
					newLine();
    2642:	4b3c      	ldr	r3, [pc, #240]	; (2734 <printKeyboardBuffer+0x360>)
    2644:	4798      	blx	r3
					xCharPos = 0;
    2646:	2300      	movs	r3, #0
    2648:	802b      	strh	r3, [r5, #0]
					drawChar(0x00);
    264a:	2000      	movs	r0, #0
    264c:	47c0      	blx	r8
					blinkCursor();
    264e:	4b38      	ldr	r3, [pc, #224]	; (2730 <printKeyboardBuffer+0x35c>)
    2650:	4798      	blx	r3
					printf("\r");
    2652:	200d      	movs	r0, #13
    2654:	4b34      	ldr	r3, [pc, #208]	; (2728 <printKeyboardBuffer+0x354>)
    2656:	4798      	blx	r3
    2658:	e6ef      	b.n	243a <printKeyboardBuffer+0x66>
				if(yCharPos == 23)
    265a:	4b31      	ldr	r3, [pc, #196]	; (2720 <printKeyboardBuffer+0x34c>)
    265c:	881a      	ldrh	r2, [r3, #0]
    265e:	2a17      	cmp	r2, #23
    2660:	d01e      	beq.n	26a0 <printKeyboardBuffer+0x2cc>
					drawChar(consoleDisplay[xCharPos][yCharPos]);
    2662:	4d30      	ldr	r5, [pc, #192]	; (2724 <printKeyboardBuffer+0x350>)
    2664:	4b2d      	ldr	r3, [pc, #180]	; (271c <printKeyboardBuffer+0x348>)
    2666:	4698      	mov	r8, r3
    2668:	8819      	ldrh	r1, [r3, #0]
    266a:	004b      	lsls	r3, r1, #1
    266c:	185b      	adds	r3, r3, r1
    266e:	00db      	lsls	r3, r3, #3
    2670:	18eb      	adds	r3, r5, r3
    2672:	5c98      	ldrb	r0, [r3, r2]
    2674:	4b2d      	ldr	r3, [pc, #180]	; (272c <printKeyboardBuffer+0x358>)
    2676:	469a      	mov	sl, r3
    2678:	4798      	blx	r3
					yCharPos++;
    267a:	4a29      	ldr	r2, [pc, #164]	; (2720 <printKeyboardBuffer+0x34c>)
    267c:	8813      	ldrh	r3, [r2, #0]
    267e:	3301      	adds	r3, #1
    2680:	b29b      	uxth	r3, r3
    2682:	8013      	strh	r3, [r2, #0]
					drawChar(consoleDisplay[xCharPos][yCharPos]);
    2684:	4642      	mov	r2, r8
    2686:	8811      	ldrh	r1, [r2, #0]
    2688:	004a      	lsls	r2, r1, #1
    268a:	1852      	adds	r2, r2, r1
    268c:	00d2      	lsls	r2, r2, #3
    268e:	18ad      	adds	r5, r5, r2
    2690:	5ce8      	ldrb	r0, [r5, r3]
    2692:	47d0      	blx	sl
					blinkCursor();
    2694:	4b26      	ldr	r3, [pc, #152]	; (2730 <printKeyboardBuffer+0x35c>)
    2696:	4798      	blx	r3
					printf("\n");
    2698:	200a      	movs	r0, #10
    269a:	4b23      	ldr	r3, [pc, #140]	; (2728 <printKeyboardBuffer+0x354>)
    269c:	4798      	blx	r3
    269e:	e6cc      	b.n	243a <printKeyboardBuffer+0x66>
					drawChar(consoleDisplay[xCharPos][yCharPos]);
    26a0:	4b1e      	ldr	r3, [pc, #120]	; (271c <printKeyboardBuffer+0x348>)
    26a2:	881a      	ldrh	r2, [r3, #0]
    26a4:	0053      	lsls	r3, r2, #1
    26a6:	189b      	adds	r3, r3, r2
    26a8:	00db      	lsls	r3, r3, #3
    26aa:	4a1e      	ldr	r2, [pc, #120]	; (2724 <printKeyboardBuffer+0x350>)
    26ac:	18d3      	adds	r3, r2, r3
    26ae:	7dd8      	ldrb	r0, [r3, #23]
    26b0:	4d1e      	ldr	r5, [pc, #120]	; (272c <printKeyboardBuffer+0x358>)
    26b2:	47a8      	blx	r5
					newLine();
    26b4:	4b1f      	ldr	r3, [pc, #124]	; (2734 <printKeyboardBuffer+0x360>)
    26b6:	4798      	blx	r3
					drawChar(0x00);
    26b8:	2000      	movs	r0, #0
    26ba:	47a8      	blx	r5
					blinkCursor();
    26bc:	4b1c      	ldr	r3, [pc, #112]	; (2730 <printKeyboardBuffer+0x35c>)
    26be:	4798      	blx	r3
					printf("\n");
    26c0:	200a      	movs	r0, #10
    26c2:	4b19      	ldr	r3, [pc, #100]	; (2728 <printKeyboardBuffer+0x354>)
    26c4:	4798      	blx	r3
    26c6:	e6b8      	b.n	243a <printKeyboardBuffer+0x66>
				drawChar(consoleDisplay[xCharPos][yCharPos]);
    26c8:	4d16      	ldr	r5, [pc, #88]	; (2724 <printKeyboardBuffer+0x350>)
    26ca:	4b14      	ldr	r3, [pc, #80]	; (271c <printKeyboardBuffer+0x348>)
    26cc:	4698      	mov	r8, r3
    26ce:	8819      	ldrh	r1, [r3, #0]
    26d0:	4b13      	ldr	r3, [pc, #76]	; (2720 <printKeyboardBuffer+0x34c>)
    26d2:	469a      	mov	sl, r3
    26d4:	881a      	ldrh	r2, [r3, #0]
    26d6:	004b      	lsls	r3, r1, #1
    26d8:	185b      	adds	r3, r3, r1
    26da:	00db      	lsls	r3, r3, #3
    26dc:	18eb      	adds	r3, r5, r3
    26de:	5c98      	ldrb	r0, [r3, r2]
    26e0:	4b12      	ldr	r3, [pc, #72]	; (272c <printKeyboardBuffer+0x358>)
    26e2:	4798      	blx	r3
				xCharPos--;
    26e4:	4643      	mov	r3, r8
    26e6:	881b      	ldrh	r3, [r3, #0]
    26e8:	3b01      	subs	r3, #1
    26ea:	b29b      	uxth	r3, r3
    26ec:	4642      	mov	r2, r8
    26ee:	8013      	strh	r3, [r2, #0]
				tempCharacter = consoleDisplay[xCharPos][yCharPos];
    26f0:	4652      	mov	r2, sl
    26f2:	8811      	ldrh	r1, [r2, #0]
    26f4:	005a      	lsls	r2, r3, #1
    26f6:	18d3      	adds	r3, r2, r3
    26f8:	00db      	lsls	r3, r3, #3
    26fa:	18eb      	adds	r3, r5, r3
				drawChar(tempCharacter);
    26fc:	5c58      	ldrb	r0, [r3, r1]
    26fe:	4b0b      	ldr	r3, [pc, #44]	; (272c <printKeyboardBuffer+0x358>)
    2700:	4798      	blx	r3
				blinkCursor();
    2702:	4b0b      	ldr	r3, [pc, #44]	; (2730 <printKeyboardBuffer+0x35c>)
    2704:	4798      	blx	r3
    2706:	e698      	b.n	243a <printKeyboardBuffer+0x66>
    2708:	000066b0 	.word	0x000066b0
    270c:	00003569 	.word	0x00003569
    2710:	20000028 	.word	0x20000028
    2714:	20000014 	.word	0x20000014
    2718:	000023a9 	.word	0x000023a9
    271c:	20000298 	.word	0x20000298
    2720:	2000029a 	.word	0x2000029a
    2724:	2000030c 	.word	0x2000030c
    2728:	000035c1 	.word	0x000035c1
    272c:	00001f41 	.word	0x00001f41
    2730:	000021d9 	.word	0x000021d9
    2734:	00002029 	.word	0x00002029
					consoleDisplay[xCharPos][yCharPos] = noCase[scanCodeBuffer[i]];
    2738:	ab02      	add	r3, sp, #8
    273a:	2248      	movs	r2, #72	; 0x48
    273c:	189b      	adds	r3, r3, r2
    273e:	5d58      	ldrb	r0, [r3, r5]
    2740:	4b1e      	ldr	r3, [pc, #120]	; (27bc <printKeyboardBuffer+0x3e8>)
    2742:	8819      	ldrh	r1, [r3, #0]
    2744:	4b1e      	ldr	r3, [pc, #120]	; (27c0 <printKeyboardBuffer+0x3ec>)
    2746:	4698      	mov	r8, r3
    2748:	881a      	ldrh	r2, [r3, #0]
    274a:	004b      	lsls	r3, r1, #1
    274c:	185b      	adds	r3, r3, r1
    274e:	00db      	lsls	r3, r3, #3
    2750:	491c      	ldr	r1, [pc, #112]	; (27c4 <printKeyboardBuffer+0x3f0>)
    2752:	468c      	mov	ip, r1
    2754:	4463      	add	r3, ip
    2756:	5498      	strb	r0, [r3, r2]
					printf("%c",consoleDisplay[xCharPos][yCharPos]);
    2758:	4b1b      	ldr	r3, [pc, #108]	; (27c8 <printKeyboardBuffer+0x3f4>)
    275a:	4798      	blx	r3
					drawChar(noCase[scanCodeBuffer[i]]);
    275c:	9b00      	ldr	r3, [sp, #0]
    275e:	781b      	ldrb	r3, [r3, #0]
    2760:	aa02      	add	r2, sp, #8
    2762:	2148      	movs	r1, #72	; 0x48
    2764:	1852      	adds	r2, r2, r1
    2766:	5cd0      	ldrb	r0, [r2, r3]
    2768:	4d18      	ldr	r5, [pc, #96]	; (27cc <printKeyboardBuffer+0x3f8>)
    276a:	47a8      	blx	r5
					xCharPos++;
    276c:	4b13      	ldr	r3, [pc, #76]	; (27bc <printKeyboardBuffer+0x3e8>)
    276e:	881b      	ldrh	r3, [r3, #0]
    2770:	3301      	adds	r3, #1
    2772:	b29a      	uxth	r2, r3
    2774:	4b11      	ldr	r3, [pc, #68]	; (27bc <printKeyboardBuffer+0x3e8>)
    2776:	801a      	strh	r2, [r3, #0]
					drawChar(consoleDisplay[xCharPos][yCharPos]);
    2778:	4643      	mov	r3, r8
    277a:	8819      	ldrh	r1, [r3, #0]
    277c:	0053      	lsls	r3, r2, #1
    277e:	189b      	adds	r3, r3, r2
    2780:	00db      	lsls	r3, r3, #3
    2782:	4a10      	ldr	r2, [pc, #64]	; (27c4 <printKeyboardBuffer+0x3f0>)
    2784:	4694      	mov	ip, r2
    2786:	4463      	add	r3, ip
    2788:	5c58      	ldrb	r0, [r3, r1]
    278a:	47a8      	blx	r5
					if(xCharPos > 79)
    278c:	4b0b      	ldr	r3, [pc, #44]	; (27bc <printKeyboardBuffer+0x3e8>)
    278e:	881b      	ldrh	r3, [r3, #0]
    2790:	2b4f      	cmp	r3, #79	; 0x4f
    2792:	d902      	bls.n	279a <printKeyboardBuffer+0x3c6>
						xCharPos--;
    2794:	3b01      	subs	r3, #1
    2796:	4a09      	ldr	r2, [pc, #36]	; (27bc <printKeyboardBuffer+0x3e8>)
    2798:	8013      	strh	r3, [r2, #0]
					blinkCursor();
    279a:	4b0d      	ldr	r3, [pc, #52]	; (27d0 <printKeyboardBuffer+0x3fc>)
    279c:	4798      	blx	r3
    279e:	e64c      	b.n	243a <printKeyboardBuffer+0x66>
    27a0:	464f      	mov	r7, r9
		scanCodeBuffer[i] = 0xFF;
    27a2:	23ff      	movs	r3, #255	; 0xff
    27a4:	703b      	strb	r3, [r7, #0]
    27a6:	3701      	adds	r7, #1
	for(int i = 0 ; i < 20 ; i++)
    27a8:	42bc      	cmp	r4, r7
    27aa:	d1fb      	bne.n	27a4 <printKeyboardBuffer+0x3d0>
}
    27ac:	b027      	add	sp, #156	; 0x9c
    27ae:	bc3c      	pop	{r2, r3, r4, r5}
    27b0:	4690      	mov	r8, r2
    27b2:	4699      	mov	r9, r3
    27b4:	46a2      	mov	sl, r4
    27b6:	46ab      	mov	fp, r5
    27b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    27ba:	46c0      	nop			; (mov r8, r8)
    27bc:	20000298 	.word	0x20000298
    27c0:	2000029a 	.word	0x2000029a
    27c4:	2000030c 	.word	0x2000030c
    27c8:	000035c1 	.word	0x000035c1
    27cc:	00001f41 	.word	0x00001f41
    27d0:	000021d9 	.word	0x000021d9

000027d4 <removeFromKeyDown>:

void removeFromKeyDown(int scancode)
{
    27d4:	b510      	push	{r4, lr}
    27d6:	4b07      	ldr	r3, [pc, #28]	; (27f4 <removeFromKeyDown+0x20>)
    27d8:	0019      	movs	r1, r3
    27da:	3114      	adds	r1, #20
	for(int i = 0 ; i < 20 ; i++)
	{
		if(keyDownBuffer[i] == scancode)
		{
			keyDownBuffer[i] = 0xFF;
    27dc:	24ff      	movs	r4, #255	; 0xff
    27de:	e002      	b.n	27e6 <removeFromKeyDown+0x12>
    27e0:	3301      	adds	r3, #1
	for(int i = 0 ; i < 20 ; i++)
    27e2:	428b      	cmp	r3, r1
    27e4:	d004      	beq.n	27f0 <removeFromKeyDown+0x1c>
		if(keyDownBuffer[i] == scancode)
    27e6:	781a      	ldrb	r2, [r3, #0]
    27e8:	4282      	cmp	r2, r0
    27ea:	d1f9      	bne.n	27e0 <removeFromKeyDown+0xc>
			keyDownBuffer[i] = 0xFF;
    27ec:	701c      	strb	r4, [r3, #0]
    27ee:	e7f7      	b.n	27e0 <removeFromKeyDown+0xc>
		}
	}
    27f0:	bd10      	pop	{r4, pc}
    27f2:	46c0      	nop			; (mov r8, r8)
    27f4:	20000014 	.word	0x20000014

000027f8 <readKeyboard>:
{
    27f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    27fa:	46de      	mov	lr, fp
    27fc:	4657      	mov	r7, sl
    27fe:	464e      	mov	r6, r9
    2800:	4645      	mov	r5, r8
    2802:	b5e0      	push	{r5, r6, r7, lr}
    2804:	b083      	sub	sp, #12
    2806:	4e6d      	ldr	r6, [pc, #436]	; (29bc <readKeyboard+0x1c4>)
    2808:	0031      	movs	r1, r6
    280a:	3119      	adds	r1, #25
    280c:	31ff      	adds	r1, #255	; 0xff
    280e:	0033      	movs	r3, r6
		scanCodes[i] = 0xFF;
    2810:	22ff      	movs	r2, #255	; 0xff
    2812:	c304      	stmia	r3!, {r2}
	for(i = 0 ; i < 70 ; i++)
    2814:	428b      	cmp	r3, r1
    2816:	d1fc      	bne.n	2812 <readKeyboard+0x1a>
	PORT->Group[0].WRCONFIG.bit.DRVSTR = 1;
    2818:	4a69      	ldr	r2, [pc, #420]	; (29c0 <readKeyboard+0x1c8>)
    281a:	6a91      	ldr	r1, [r2, #40]	; 0x28
    281c:	2380      	movs	r3, #128	; 0x80
    281e:	03db      	lsls	r3, r3, #15
    2820:	430b      	orrs	r3, r1
    2822:	6293      	str	r3, [r2, #40]	; 0x28
    2824:	4c67      	ldr	r4, [pc, #412]	; (29c4 <readKeyboard+0x1cc>)
    2826:	341c      	adds	r4, #28
    2828:	4b66      	ldr	r3, [pc, #408]	; (29c4 <readKeyboard+0x1cc>)
		REG_PORT_DIRSET0 = kb_col[i];
    282a:	4867      	ldr	r0, [pc, #412]	; (29c8 <readKeyboard+0x1d0>)
		REG_PORT_OUTCLR0 = kb_col[i];
    282c:	4967      	ldr	r1, [pc, #412]	; (29cc <readKeyboard+0x1d4>)
		REG_PORT_DIRSET0 = kb_col[i];
    282e:	681a      	ldr	r2, [r3, #0]
    2830:	6002      	str	r2, [r0, #0]
		REG_PORT_OUTCLR0 = kb_col[i];
    2832:	cb04      	ldmia	r3!, {r2}
    2834:	600a      	str	r2, [r1, #0]
	for (i = 0; i < NUM_COL; i++) {
    2836:	42a3      	cmp	r3, r4
    2838:	d1f9      	bne.n	282e <readKeyboard+0x36>
    283a:	2200      	movs	r2, #0
		REG_PORT_DIRCLR0 = kb_row[i];
    283c:	4b64      	ldr	r3, [pc, #400]	; (29d0 <readKeyboard+0x1d8>)
    283e:	469c      	mov	ip, r3
    2840:	4f64      	ldr	r7, [pc, #400]	; (29d4 <readKeyboard+0x1dc>)
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.PULLEN = 1;
    2842:	4d65      	ldr	r5, [pc, #404]	; (29d8 <readKeyboard+0x1e0>)
    2844:	2404      	movs	r4, #4
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.INEN = 1;
    2846:	2002      	movs	r0, #2
		REG_PORT_DIRCLR0 = kb_row[i];
    2848:	4663      	mov	r3, ip
    284a:	58d3      	ldr	r3, [r2, r3]
    284c:	603b      	str	r3, [r7, #0]
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.PULLEN = 1;
    284e:	5953      	ldr	r3, [r2, r5]
    2850:	4962      	ldr	r1, [pc, #392]	; (29dc <readKeyboard+0x1e4>)
    2852:	4688      	mov	r8, r1
    2854:	4443      	add	r3, r8
    2856:	7819      	ldrb	r1, [r3, #0]
    2858:	4321      	orrs	r1, r4
    285a:	7019      	strb	r1, [r3, #0]
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.INEN = 1;
    285c:	7819      	ldrb	r1, [r3, #0]
    285e:	4301      	orrs	r1, r0
    2860:	7019      	strb	r1, [r3, #0]
    2862:	3204      	adds	r2, #4
	for (i = 0; i < NUM_ROW; i++) {
    2864:	2a28      	cmp	r2, #40	; 0x28
    2866:	d1ef      	bne.n	2848 <readKeyboard+0x50>
    2868:	4b56      	ldr	r3, [pc, #344]	; (29c4 <readKeyboard+0x1cc>)
    286a:	4699      	mov	r9, r3
    286c:	2300      	movs	r3, #0
    286e:	4698      	mov	r8, r3
    2870:	2200      	movs	r2, #0
		REG_PORT_OUTSET0 = kb_col[i];
    2872:	4b5b      	ldr	r3, [pc, #364]	; (29e0 <readKeyboard+0x1e8>)
    2874:	469b      	mov	fp, r3
			if((PORT->Group[0].IN.reg & kb_row[j]) != 0) {
    2876:	4d52      	ldr	r5, [pc, #328]	; (29c0 <readKeyboard+0x1c8>)
				scanCodes[scanCodeIndex] = (i * NUM_ROW) + j;
    2878:	4b50      	ldr	r3, [pc, #320]	; (29bc <readKeyboard+0x1c4>)
    287a:	469c      	mov	ip, r3
		REG_PORT_OUTCLR0 = kb_col[i];
    287c:	4b53      	ldr	r3, [pc, #332]	; (29cc <readKeyboard+0x1d4>)
    287e:	469a      	mov	sl, r3
    2880:	9601      	str	r6, [sp, #4]
    2882:	464e      	mov	r6, r9
    2884:	4647      	mov	r7, r8
    2886:	e015      	b.n	28b4 <readKeyboard+0xbc>
    2888:	3304      	adds	r3, #4
    288a:	3101      	adds	r1, #1
		for (j = 0; j < NUM_ROW; j++) {	
    288c:	42a3      	cmp	r3, r4
    288e:	d008      	beq.n	28a2 <readKeyboard+0xaa>
			if((PORT->Group[0].IN.reg & kb_row[j]) != 0) {
    2890:	6a28      	ldr	r0, [r5, #32]
    2892:	681e      	ldr	r6, [r3, #0]
    2894:	4206      	tst	r6, r0
    2896:	d0f7      	beq.n	2888 <readKeyboard+0x90>
				scanCodes[scanCodeIndex] = (i * NUM_ROW) + j;
    2898:	0090      	lsls	r0, r2, #2
    289a:	4666      	mov	r6, ip
    289c:	5181      	str	r1, [r0, r6]
				scanCodeIndex++;
    289e:	3201      	adds	r2, #1
    28a0:	e7f2      	b.n	2888 <readKeyboard+0x90>
    28a2:	9e00      	ldr	r6, [sp, #0]
		REG_PORT_OUTCLR0 = kb_col[i];
    28a4:	4649      	mov	r1, r9
    28a6:	6809      	ldr	r1, [r1, #0]
    28a8:	4650      	mov	r0, sl
    28aa:	6001      	str	r1, [r0, #0]
    28ac:	3604      	adds	r6, #4
    28ae:	370a      	adds	r7, #10
	for (i = 0; i < NUM_COL; i++) {
    28b0:	2f46      	cmp	r7, #70	; 0x46
    28b2:	d00a      	beq.n	28ca <readKeyboard+0xd2>
    28b4:	46b1      	mov	r9, r6
		REG_PORT_OUTSET0 = kb_col[i];
    28b6:	465b      	mov	r3, fp
    28b8:	6831      	ldr	r1, [r6, #0]
    28ba:	6019      	str	r1, [r3, #0]
    28bc:	4b44      	ldr	r3, [pc, #272]	; (29d0 <readKeyboard+0x1d8>)
    28be:	4698      	mov	r8, r3
    28c0:	001c      	movs	r4, r3
    28c2:	3428      	adds	r4, #40	; 0x28
    28c4:	0039      	movs	r1, r7
    28c6:	9600      	str	r6, [sp, #0]
    28c8:	e7e2      	b.n	2890 <readKeyboard+0x98>
    28ca:	4647      	mov	r7, r8
    28cc:	9e01      	ldr	r6, [sp, #4]
    28ce:	4641      	mov	r1, r8
		REG_PORT_DIRSET0 = kb_row[i];
    28d0:	4d3d      	ldr	r5, [pc, #244]	; (29c8 <readKeyboard+0x1d0>)
		REG_PORT_OUTCLR0 = kb_row[i];
    28d2:	4c3e      	ldr	r4, [pc, #248]	; (29cc <readKeyboard+0x1d4>)
		REG_PORT_DIRSET0 = kb_row[i];
    28d4:	6808      	ldr	r0, [r1, #0]
    28d6:	6028      	str	r0, [r5, #0]
		REG_PORT_OUTCLR0 = kb_row[i];
    28d8:	c901      	ldmia	r1!, {r0}
    28da:	6020      	str	r0, [r4, #0]
	for (i = 0; i < NUM_ROW; i++) {
    28dc:	4299      	cmp	r1, r3
    28de:	d1f9      	bne.n	28d4 <readKeyboard+0xdc>
    28e0:	2100      	movs	r1, #0
		REG_PORT_DIRCLR0 = kb_col[i];
    28e2:	4b38      	ldr	r3, [pc, #224]	; (29c4 <readKeyboard+0x1cc>)
    28e4:	4699      	mov	r9, r3
    28e6:	4b3b      	ldr	r3, [pc, #236]	; (29d4 <readKeyboard+0x1dc>)
    28e8:	4698      	mov	r8, r3
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.PULLEN = 1;
    28ea:	4b3e      	ldr	r3, [pc, #248]	; (29e4 <readKeyboard+0x1ec>)
    28ec:	469c      	mov	ip, r3
    28ee:	2504      	movs	r5, #4
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.INEN = 1;
    28f0:	2402      	movs	r4, #2
		REG_PORT_DIRCLR0 = kb_col[i];
    28f2:	4643      	mov	r3, r8
    28f4:	4648      	mov	r0, r9
    28f6:	5808      	ldr	r0, [r1, r0]
    28f8:	6018      	str	r0, [r3, #0]
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.PULLEN = 1;
    28fa:	4663      	mov	r3, ip
    28fc:	58cb      	ldr	r3, [r1, r3]
    28fe:	4837      	ldr	r0, [pc, #220]	; (29dc <readKeyboard+0x1e4>)
    2900:	4682      	mov	sl, r0
    2902:	4453      	add	r3, sl
    2904:	7818      	ldrb	r0, [r3, #0]
    2906:	4328      	orrs	r0, r5
    2908:	7018      	strb	r0, [r3, #0]
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.INEN = 1;
    290a:	7818      	ldrb	r0, [r3, #0]
    290c:	4320      	orrs	r0, r4
    290e:	7018      	strb	r0, [r3, #0]
    2910:	3104      	adds	r1, #4
	for (i = 0; i < NUM_COL; i++) {
    2912:	291c      	cmp	r1, #28
    2914:	d1ed      	bne.n	28f2 <readKeyboard+0xfa>
    2916:	2300      	movs	r3, #0
    2918:	469c      	mov	ip, r3
		REG_PORT_OUTSET0 = kb_row[i];
    291a:	4b31      	ldr	r3, [pc, #196]	; (29e0 <readKeyboard+0x1e8>)
    291c:	469b      	mov	fp, r3
			if((PORT->Group[0].IN.reg & kb_col[j]) != 0)
    291e:	4d28      	ldr	r5, [pc, #160]	; (29c0 <readKeyboard+0x1c8>)
				scanCodes[scanCodeIndex] = (j * NUM_ROW) + i;
    2920:	4b26      	ldr	r3, [pc, #152]	; (29bc <readKeyboard+0x1c4>)
    2922:	4698      	mov	r8, r3
		REG_PORT_OUTCLR0 = kb_row[i];
    2924:	4b29      	ldr	r3, [pc, #164]	; (29cc <readKeyboard+0x1d4>)
    2926:	469a      	mov	sl, r3
    2928:	46b1      	mov	r9, r6
    292a:	003e      	movs	r6, r7
    292c:	4667      	mov	r7, ip
    292e:	e015      	b.n	295c <readKeyboard+0x164>
    2930:	3104      	adds	r1, #4
    2932:	330a      	adds	r3, #10
		for (j = 0; j < NUM_COL; j++) {
    2934:	42a3      	cmp	r3, r4
    2936:	d008      	beq.n	294a <readKeyboard+0x152>
			if((PORT->Group[0].IN.reg & kb_col[j]) != 0)
    2938:	6a28      	ldr	r0, [r5, #32]
    293a:	680e      	ldr	r6, [r1, #0]
    293c:	4206      	tst	r6, r0
    293e:	d0f7      	beq.n	2930 <readKeyboard+0x138>
				scanCodes[scanCodeIndex] = (j * NUM_ROW) + i;
    2940:	0090      	lsls	r0, r2, #2
    2942:	4646      	mov	r6, r8
    2944:	5183      	str	r3, [r0, r6]
				scanCodeIndex++;
    2946:	3201      	adds	r2, #1
    2948:	e7f2      	b.n	2930 <readKeyboard+0x138>
    294a:	9e00      	ldr	r6, [sp, #0]
		REG_PORT_OUTCLR0 = kb_row[i];
    294c:	4663      	mov	r3, ip
    294e:	681b      	ldr	r3, [r3, #0]
    2950:	4651      	mov	r1, sl
    2952:	600b      	str	r3, [r1, #0]
	for (i = 0; i < NUM_ROW; i++) {
    2954:	3701      	adds	r7, #1
    2956:	3604      	adds	r6, #4
    2958:	2f0a      	cmp	r7, #10
    295a:	d009      	beq.n	2970 <readKeyboard+0x178>
    295c:	46b4      	mov	ip, r6
		REG_PORT_OUTSET0 = kb_row[i];
    295e:	465b      	mov	r3, fp
    2960:	6831      	ldr	r1, [r6, #0]
    2962:	6019      	str	r1, [r3, #0]
    2964:	003b      	movs	r3, r7
    2966:	003c      	movs	r4, r7
    2968:	3446      	adds	r4, #70	; 0x46
    296a:	4916      	ldr	r1, [pc, #88]	; (29c4 <readKeyboard+0x1cc>)
    296c:	9600      	str	r6, [sp, #0]
    296e:	e7e3      	b.n	2938 <readKeyboard+0x140>
    2970:	464e      	mov	r6, r9
	for(i = 0 ; i < scanCodeIndex ; i++)
    2972:	2a00      	cmp	r2, #0
    2974:	dd08      	ble.n	2988 <readKeyboard+0x190>
    2976:	4b1c      	ldr	r3, [pc, #112]	; (29e8 <readKeyboard+0x1f0>)
    2978:	0092      	lsls	r2, r2, #2
    297a:	4910      	ldr	r1, [pc, #64]	; (29bc <readKeyboard+0x1c4>)
    297c:	188a      	adds	r2, r1, r2
		scanCodeBuffer[i] = scanCodes[i];	
    297e:	ce02      	ldmia	r6!, {r1}
    2980:	7019      	strb	r1, [r3, #0]
    2982:	3301      	adds	r3, #1
	for(i = 0 ; i < scanCodeIndex ; i++)
    2984:	42b2      	cmp	r2, r6
    2986:	d1fa      	bne.n	297e <readKeyboard+0x186>
		REG_PORT_OUTSET0 = kb_row[i];
    2988:	2400      	movs	r4, #0
		if(keyDown(i) && !scanCodesContains(i))
    298a:	4d18      	ldr	r5, [pc, #96]	; (29ec <readKeyboard+0x1f4>)
    298c:	4e18      	ldr	r6, [pc, #96]	; (29f0 <readKeyboard+0x1f8>)
			removeFromKeyDown(i);
    298e:	4f19      	ldr	r7, [pc, #100]	; (29f4 <readKeyboard+0x1fc>)
    2990:	e002      	b.n	2998 <readKeyboard+0x1a0>
	for(i = 0; i < 70; i++)
    2992:	3401      	adds	r4, #1
    2994:	2c46      	cmp	r4, #70	; 0x46
    2996:	d00a      	beq.n	29ae <readKeyboard+0x1b6>
		if(keyDown(i) && !scanCodesContains(i))
    2998:	0020      	movs	r0, r4
    299a:	47a8      	blx	r5
    299c:	2800      	cmp	r0, #0
    299e:	d0f8      	beq.n	2992 <readKeyboard+0x19a>
    29a0:	0020      	movs	r0, r4
    29a2:	47b0      	blx	r6
    29a4:	2800      	cmp	r0, #0
    29a6:	d1f4      	bne.n	2992 <readKeyboard+0x19a>
			removeFromKeyDown(i);
    29a8:	0020      	movs	r0, r4
    29aa:	47b8      	blx	r7
    29ac:	e7f1      	b.n	2992 <readKeyboard+0x19a>
}
    29ae:	b003      	add	sp, #12
    29b0:	bc3c      	pop	{r2, r3, r4, r5}
    29b2:	4690      	mov	r8, r2
    29b4:	4699      	mov	r9, r3
    29b6:	46a2      	mov	sl, r4
    29b8:	46ab      	mov	fp, r5
    29ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    29bc:	2000003c 	.word	0x2000003c
    29c0:	41004400 	.word	0x41004400
    29c4:	00006740 	.word	0x00006740
    29c8:	41004408 	.word	0x41004408
    29cc:	41004414 	.word	0x41004414
    29d0:	00006778 	.word	0x00006778
    29d4:	41004404 	.word	0x41004404
    29d8:	000067a0 	.word	0x000067a0
    29dc:	41004440 	.word	0x41004440
    29e0:	41004418 	.word	0x41004418
    29e4:	0000675c 	.word	0x0000675c
    29e8:	20000028 	.word	0x20000028
    29ec:	000023a9 	.word	0x000023a9
    29f0:	0000237d 	.word	0x0000237d
    29f4:	000027d5 	.word	0x000027d5

000029f8 <setColorRGB>:

uint16_t fore_Color_High, fore_Color_Low;
uint16_t back_Color_High, back_Color_Low;

void setColorRGB(uint8_t r, uint8_t g, uint8_t b)
{
    29f8:	b510      	push	{r4, lr}
	fore_Color_High = ((r&248)|g>>5);
    29fa:	094b      	lsrs	r3, r1, #5
    29fc:	2407      	movs	r4, #7
    29fe:	43a0      	bics	r0, r4
    2a00:	4318      	orrs	r0, r3
    2a02:	4b05      	ldr	r3, [pc, #20]	; (2a18 <setColorRGB+0x20>)
    2a04:	8018      	strh	r0, [r3, #0]
	fore_Color_Low = ((g&28)<<3|b>>3);
    2a06:	00c9      	lsls	r1, r1, #3
    2a08:	23e0      	movs	r3, #224	; 0xe0
    2a0a:	4019      	ands	r1, r3
    2a0c:	08d2      	lsrs	r2, r2, #3
    2a0e:	430a      	orrs	r2, r1
    2a10:	4b02      	ldr	r3, [pc, #8]	; (2a1c <setColorRGB+0x24>)
    2a12:	801a      	strh	r2, [r3, #0]
}
    2a14:	bd10      	pop	{r4, pc}
    2a16:	46c0      	nop			; (mov r8, r8)
    2a18:	20000a8e 	.word	0x20000a8e
    2a1c:	20000a90 	.word	0x20000a90

00002a20 <setBackColorRGB>:
	fore_Color_Low = (color & 0xFF);
}

void setBackColorRGB(unsigned char r,
unsigned char g, unsigned char b)
{
    2a20:	b510      	push	{r4, lr}
	back_Color_High = ((r&248)|g>>5);
    2a22:	094b      	lsrs	r3, r1, #5
    2a24:	2407      	movs	r4, #7
    2a26:	43a0      	bics	r0, r4
    2a28:	4318      	orrs	r0, r3
    2a2a:	4b05      	ldr	r3, [pc, #20]	; (2a40 <setBackColorRGB+0x20>)
    2a2c:	8018      	strh	r0, [r3, #0]
	back_Color_Low = ((g&28)<<3|b>>3);
    2a2e:	00c9      	lsls	r1, r1, #3
    2a30:	23e0      	movs	r3, #224	; 0xe0
    2a32:	4019      	ands	r1, r3
    2a34:	08d2      	lsrs	r2, r2, #3
    2a36:	430a      	orrs	r2, r1
    2a38:	4b02      	ldr	r3, [pc, #8]	; (2a44 <setBackColorRGB+0x24>)
    2a3a:	801a      	strh	r2, [r3, #0]
}
    2a3c:	bd10      	pop	{r4, pc}
    2a3e:	46c0      	nop			; (mov r8, r8)
    2a40:	20000a92 	.word	0x20000a92
    2a44:	20000a8c 	.word	0x20000a8c

00002a48 <LCD_Fast_Fill>:
	(((long)(x2-x1)+1)*((long)(y2-y1)+1)));
	REG_PORT_OUTSET1 = LCD_CS;
}

void LCD_Fast_Fill(int ch, int cl, long pix)
{
    2a48:	b570      	push	{r4, r5, r6, lr}
	int blocks;
	
	
	REG_PORT_OUTCLR1 = 0x0000ffff;
    2a4a:	4c19      	ldr	r4, [pc, #100]	; (2ab0 <LCD_Fast_Fill+0x68>)
    2a4c:	4b19      	ldr	r3, [pc, #100]	; (2ab4 <LCD_Fast_Fill+0x6c>)
    2a4e:	601c      	str	r4, [r3, #0]
	REG_PORT_OUTSET1 = (ch << 8) | cl;
    2a50:	0200      	lsls	r0, r0, #8
    2a52:	4301      	orrs	r1, r0
    2a54:	4b18      	ldr	r3, [pc, #96]	; (2ab8 <LCD_Fast_Fill+0x70>)
    2a56:	6019      	str	r1, [r3, #0]

	blocks = pix/16;
    2a58:	17d3      	asrs	r3, r2, #31
    2a5a:	260f      	movs	r6, #15
    2a5c:	401e      	ands	r6, r3
    2a5e:	18b6      	adds	r6, r6, r2
    2a60:	1136      	asrs	r6, r6, #4
	for (int i=0; i<blocks; i++)
    2a62:	2500      	movs	r5, #0
    2a64:	2e00      	cmp	r6, #0
    2a66:	dd0c      	ble.n	2a82 <LCD_Fast_Fill+0x3a>
	{
		for (int j=0; j<16; j++)
		{
			REG_PORT_OUTCLR1 = LCD_WR;
    2a68:	4c12      	ldr	r4, [pc, #72]	; (2ab4 <LCD_Fast_Fill+0x6c>)
    2a6a:	2180      	movs	r1, #128	; 0x80
    2a6c:	0289      	lsls	r1, r1, #10
			REG_PORT_OUTSET1 = LCD_WR;
    2a6e:	4812      	ldr	r0, [pc, #72]	; (2ab8 <LCD_Fast_Fill+0x70>)
{
    2a70:	2310      	movs	r3, #16
			REG_PORT_OUTCLR1 = LCD_WR;
    2a72:	6021      	str	r1, [r4, #0]
			REG_PORT_OUTSET1 = LCD_WR;
    2a74:	6001      	str	r1, [r0, #0]
    2a76:	3b01      	subs	r3, #1
		for (int j=0; j<16; j++)
    2a78:	2b00      	cmp	r3, #0
    2a7a:	d1fa      	bne.n	2a72 <LCD_Fast_Fill+0x2a>
	for (int i=0; i<blocks; i++)
    2a7c:	3501      	adds	r5, #1
    2a7e:	42ae      	cmp	r6, r5
    2a80:	d1f6      	bne.n	2a70 <LCD_Fast_Fill+0x28>
		}
	}
	
	if ((pix % 16) != 0)
    2a82:	0713      	lsls	r3, r2, #28
    2a84:	d013      	beq.n	2aae <LCD_Fast_Fill+0x66>
	for (int i=0; i<(pix % 16)+1; i++)
    2a86:	17d3      	asrs	r3, r2, #31
    2a88:	0f1b      	lsrs	r3, r3, #28
    2a8a:	18d2      	adds	r2, r2, r3
    2a8c:	210f      	movs	r1, #15
    2a8e:	4011      	ands	r1, r2
    2a90:	1ac9      	subs	r1, r1, r3
    2a92:	1c4b      	adds	r3, r1, #1
    2a94:	2b00      	cmp	r3, #0
    2a96:	dd0a      	ble.n	2aae <LCD_Fast_Fill+0x66>
    2a98:	0019      	movs	r1, r3
    2a9a:	2300      	movs	r3, #0
	{
		REG_PORT_OUTCLR1 = LCD_WR;
    2a9c:	4c05      	ldr	r4, [pc, #20]	; (2ab4 <LCD_Fast_Fill+0x6c>)
    2a9e:	2280      	movs	r2, #128	; 0x80
    2aa0:	0292      	lsls	r2, r2, #10
		REG_PORT_OUTSET1 = LCD_WR;
    2aa2:	4805      	ldr	r0, [pc, #20]	; (2ab8 <LCD_Fast_Fill+0x70>)
		REG_PORT_OUTCLR1 = LCD_WR;
    2aa4:	6022      	str	r2, [r4, #0]
		REG_PORT_OUTSET1 = LCD_WR;
    2aa6:	6002      	str	r2, [r0, #0]
	for (int i=0; i<(pix % 16)+1; i++)
    2aa8:	3301      	adds	r3, #1
    2aaa:	4299      	cmp	r1, r3
    2aac:	d1fa      	bne.n	2aa4 <LCD_Fast_Fill+0x5c>
	}
}
    2aae:	bd70      	pop	{r4, r5, r6, pc}
    2ab0:	0000ffff 	.word	0x0000ffff
    2ab4:	41004494 	.word	0x41004494
    2ab8:	41004498 	.word	0x41004498

00002abc <setXY>:
{
	setXY(0,0,display_X_size,display_Y_size);
}

void setXY(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
    2abc:	b5f0      	push	{r4, r5, r6, r7, lr}
    2abe:	b083      	sub	sp, #12
    2ac0:	0007      	movs	r7, r0
    2ac2:	9100      	str	r1, [sp, #0]
    2ac4:	0016      	movs	r6, r2
    2ac6:	9301      	str	r3, [sp, #4]
	y1=display_Y_size-y1;
	y2=display_Y_size-y2;
	SwapUint16(y1, y2);
	*/
	
	LCD_Write_COM16(0x2a,0x00);
    2ac8:	2100      	movs	r1, #0
    2aca:	202a      	movs	r0, #42	; 0x2a
    2acc:	4c17      	ldr	r4, [pc, #92]	; (2b2c <setXY+0x70>)
    2ace:	47a0      	blx	r4
	LCD_Write_DATA8(x1>>8);
    2ad0:	0a38      	lsrs	r0, r7, #8
    2ad2:	4d17      	ldr	r5, [pc, #92]	; (2b30 <setXY+0x74>)
    2ad4:	47a8      	blx	r5
	LCD_Write_COM16(0x2a,0x01);
    2ad6:	2101      	movs	r1, #1
    2ad8:	202a      	movs	r0, #42	; 0x2a
    2ada:	47a0      	blx	r4
	LCD_Write_DATA8(x1);
    2adc:	b2f8      	uxtb	r0, r7
    2ade:	47a8      	blx	r5
	LCD_Write_COM16(0x2a,0x02);
    2ae0:	2102      	movs	r1, #2
    2ae2:	202a      	movs	r0, #42	; 0x2a
    2ae4:	47a0      	blx	r4
	LCD_Write_DATA8(x2>>8);
    2ae6:	0a30      	lsrs	r0, r6, #8
    2ae8:	47a8      	blx	r5
	LCD_Write_COM16(0x2a,0x03);
    2aea:	2103      	movs	r1, #3
    2aec:	202a      	movs	r0, #42	; 0x2a
    2aee:	47a0      	blx	r4
	LCD_Write_DATA8(x2);
    2af0:	b2f0      	uxtb	r0, r6
    2af2:	47a8      	blx	r5

	LCD_Write_COM16(0x2b,0x00);
    2af4:	2100      	movs	r1, #0
    2af6:	202b      	movs	r0, #43	; 0x2b
    2af8:	47a0      	blx	r4
	LCD_Write_DATA8(y1>>8);
    2afa:	9e00      	ldr	r6, [sp, #0]
    2afc:	0a30      	lsrs	r0, r6, #8
    2afe:	47a8      	blx	r5
	LCD_Write_COM16(0x2b,0x01);
    2b00:	2101      	movs	r1, #1
    2b02:	202b      	movs	r0, #43	; 0x2b
    2b04:	47a0      	blx	r4
	LCD_Write_DATA8(y1);
    2b06:	b2f0      	uxtb	r0, r6
    2b08:	47a8      	blx	r5
	LCD_Write_COM16(0x2b,0x02);
    2b0a:	2102      	movs	r1, #2
    2b0c:	202b      	movs	r0, #43	; 0x2b
    2b0e:	47a0      	blx	r4
	LCD_Write_DATA8(y2>>8);
    2b10:	9e01      	ldr	r6, [sp, #4]
    2b12:	0a30      	lsrs	r0, r6, #8
    2b14:	47a8      	blx	r5
	LCD_Write_COM16(0x2b,0x03);
    2b16:	2103      	movs	r1, #3
    2b18:	202b      	movs	r0, #43	; 0x2b
    2b1a:	47a0      	blx	r4
	LCD_Write_DATA8(y2);
    2b1c:	b2f0      	uxtb	r0, r6
    2b1e:	47a8      	blx	r5

	LCD_Write_COM16(0x2c,0x00);
    2b20:	2100      	movs	r1, #0
    2b22:	202c      	movs	r0, #44	; 0x2c
    2b24:	47a0      	blx	r4
}
    2b26:	b003      	add	sp, #12
    2b28:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2b2a:	46c0      	nop			; (mov r8, r8)
    2b2c:	00002ce9 	.word	0x00002ce9
    2b30:	00002d19 	.word	0x00002d19

00002b34 <fillRect>:
{
    2b34:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b36:	46ce      	mov	lr, r9
    2b38:	4647      	mov	r7, r8
    2b3a:	b580      	push	{r7, lr}
    2b3c:	b083      	sub	sp, #12
    2b3e:	0006      	movs	r6, r0
    2b40:	4689      	mov	r9, r1
    2b42:	0014      	movs	r4, r2
    2b44:	001d      	movs	r5, r3
	if (x1>x2)
    2b46:	4290      	cmp	r0, r2
    2b48:	dd01      	ble.n	2b4e <fillRect+0x1a>
		x1 = x2;
    2b4a:	0016      	movs	r6, r2
		x2 = temp;
    2b4c:	0004      	movs	r4, r0
	if (y1>y2)
    2b4e:	45a9      	cmp	r9, r5
    2b50:	dd02      	ble.n	2b58 <fillRect+0x24>
    2b52:	0033      	movs	r3, r6
		x1 = x2;
    2b54:	0026      	movs	r6, r4
		x2 = temp;
    2b56:	001c      	movs	r4, r3
	REG_PORT_OUTCLR1 = LCD_CS;
    2b58:	2380      	movs	r3, #128	; 0x80
    2b5a:	03db      	lsls	r3, r3, #15
    2b5c:	4698      	mov	r8, r3
    2b5e:	4b11      	ldr	r3, [pc, #68]	; (2ba4 <fillRect+0x70>)
    2b60:	4642      	mov	r2, r8
    2b62:	601a      	str	r2, [r3, #0]
	setXY(x1, y1, x2, y2);
    2b64:	b2ab      	uxth	r3, r5
    2b66:	b2a2      	uxth	r2, r4
    2b68:	4649      	mov	r1, r9
    2b6a:	4668      	mov	r0, sp
    2b6c:	80c1      	strh	r1, [r0, #6]
    2b6e:	88c1      	ldrh	r1, [r0, #6]
    2b70:	b2b0      	uxth	r0, r6
    2b72:	4f0d      	ldr	r7, [pc, #52]	; (2ba8 <fillRect+0x74>)
    2b74:	47b8      	blx	r7
	REG_PORT_OUTSET1 = LCD_DC;
    2b76:	4f0d      	ldr	r7, [pc, #52]	; (2bac <fillRect+0x78>)
    2b78:	2380      	movs	r3, #128	; 0x80
    2b7a:	041b      	lsls	r3, r3, #16
    2b7c:	603b      	str	r3, [r7, #0]
	(((long)(x2-x1)+1)*((long)(y2-y1)+1)));
    2b7e:	1ba4      	subs	r4, r4, r6
    2b80:	3401      	adds	r4, #1
    2b82:	464b      	mov	r3, r9
    2b84:	1aea      	subs	r2, r5, r3
    2b86:	3201      	adds	r2, #1
	LCD_Fast_Fill(fore_Color_High, fore_Color_Low,
    2b88:	4362      	muls	r2, r4
    2b8a:	4b09      	ldr	r3, [pc, #36]	; (2bb0 <fillRect+0x7c>)
    2b8c:	8819      	ldrh	r1, [r3, #0]
    2b8e:	4b09      	ldr	r3, [pc, #36]	; (2bb4 <fillRect+0x80>)
    2b90:	8818      	ldrh	r0, [r3, #0]
    2b92:	4b09      	ldr	r3, [pc, #36]	; (2bb8 <fillRect+0x84>)
    2b94:	4798      	blx	r3
	REG_PORT_OUTSET1 = LCD_CS;
    2b96:	4643      	mov	r3, r8
    2b98:	603b      	str	r3, [r7, #0]
}
    2b9a:	b003      	add	sp, #12
    2b9c:	bc0c      	pop	{r2, r3}
    2b9e:	4690      	mov	r8, r2
    2ba0:	4699      	mov	r9, r3
    2ba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2ba4:	41004494 	.word	0x41004494
    2ba8:	00002abd 	.word	0x00002abd
    2bac:	41004498 	.word	0x41004498
    2bb0:	20000a90 	.word	0x20000a90
    2bb4:	20000a8e 	.word	0x20000a8e
    2bb8:	00002a49 	.word	0x00002a49

00002bbc <fillRectBackColor>:
{
    2bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    2bbe:	46ce      	mov	lr, r9
    2bc0:	4647      	mov	r7, r8
    2bc2:	b580      	push	{r7, lr}
    2bc4:	b083      	sub	sp, #12
    2bc6:	0006      	movs	r6, r0
    2bc8:	4689      	mov	r9, r1
    2bca:	0014      	movs	r4, r2
    2bcc:	001d      	movs	r5, r3
	if (x1>x2)
    2bce:	4290      	cmp	r0, r2
    2bd0:	dd01      	ble.n	2bd6 <fillRectBackColor+0x1a>
		x1 = x2;
    2bd2:	0016      	movs	r6, r2
		x2 = temp;
    2bd4:	0004      	movs	r4, r0
	if (y1>y2)
    2bd6:	45a9      	cmp	r9, r5
    2bd8:	dd02      	ble.n	2be0 <fillRectBackColor+0x24>
    2bda:	0033      	movs	r3, r6
		x1 = x2;
    2bdc:	0026      	movs	r6, r4
		x2 = temp;
    2bde:	001c      	movs	r4, r3
	REG_PORT_OUTCLR1 = LCD_CS;
    2be0:	2380      	movs	r3, #128	; 0x80
    2be2:	03db      	lsls	r3, r3, #15
    2be4:	4698      	mov	r8, r3
    2be6:	4b11      	ldr	r3, [pc, #68]	; (2c2c <fillRectBackColor+0x70>)
    2be8:	4642      	mov	r2, r8
    2bea:	601a      	str	r2, [r3, #0]
	setXY(x1, y1, x2, y2);
    2bec:	b2ab      	uxth	r3, r5
    2bee:	b2a2      	uxth	r2, r4
    2bf0:	4649      	mov	r1, r9
    2bf2:	4668      	mov	r0, sp
    2bf4:	80c1      	strh	r1, [r0, #6]
    2bf6:	88c1      	ldrh	r1, [r0, #6]
    2bf8:	b2b0      	uxth	r0, r6
    2bfa:	4f0d      	ldr	r7, [pc, #52]	; (2c30 <fillRectBackColor+0x74>)
    2bfc:	47b8      	blx	r7
	REG_PORT_OUTSET1 = LCD_DC;
    2bfe:	4f0d      	ldr	r7, [pc, #52]	; (2c34 <fillRectBackColor+0x78>)
    2c00:	2380      	movs	r3, #128	; 0x80
    2c02:	041b      	lsls	r3, r3, #16
    2c04:	603b      	str	r3, [r7, #0]
	(((long)(x2-x1)+1)*((long)(y2-y1)+1)));
    2c06:	1ba4      	subs	r4, r4, r6
    2c08:	3401      	adds	r4, #1
    2c0a:	464b      	mov	r3, r9
    2c0c:	1aea      	subs	r2, r5, r3
    2c0e:	3201      	adds	r2, #1
	LCD_Fast_Fill(back_Color_High, back_Color_Low,
    2c10:	4362      	muls	r2, r4
    2c12:	4b09      	ldr	r3, [pc, #36]	; (2c38 <fillRectBackColor+0x7c>)
    2c14:	8819      	ldrh	r1, [r3, #0]
    2c16:	4b09      	ldr	r3, [pc, #36]	; (2c3c <fillRectBackColor+0x80>)
    2c18:	8818      	ldrh	r0, [r3, #0]
    2c1a:	4b09      	ldr	r3, [pc, #36]	; (2c40 <fillRectBackColor+0x84>)
    2c1c:	4798      	blx	r3
	REG_PORT_OUTSET1 = LCD_CS;
    2c1e:	4643      	mov	r3, r8
    2c20:	603b      	str	r3, [r7, #0]
}
    2c22:	b003      	add	sp, #12
    2c24:	bc0c      	pop	{r2, r3}
    2c26:	4690      	mov	r8, r2
    2c28:	4699      	mov	r9, r3
    2c2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c2c:	41004494 	.word	0x41004494
    2c30:	00002abd 	.word	0x00002abd
    2c34:	41004498 	.word	0x41004498
    2c38:	20000a8c 	.word	0x20000a8c
    2c3c:	20000a92 	.word	0x20000a92
    2c40:	00002a49 	.word	0x00002a49

00002c44 <clrXY>:
{
    2c44:	b510      	push	{r4, lr}
	setXY(0,0,display_X_size,display_Y_size);
    2c46:	4b04      	ldr	r3, [pc, #16]	; (2c58 <clrXY+0x14>)
    2c48:	881b      	ldrh	r3, [r3, #0]
    2c4a:	4a04      	ldr	r2, [pc, #16]	; (2c5c <clrXY+0x18>)
    2c4c:	8812      	ldrh	r2, [r2, #0]
    2c4e:	2100      	movs	r1, #0
    2c50:	2000      	movs	r0, #0
    2c52:	4c03      	ldr	r4, [pc, #12]	; (2c60 <clrXY+0x1c>)
    2c54:	47a0      	blx	r4
}
    2c56:	bd10      	pop	{r4, pc}
    2c58:	20000156 	.word	0x20000156
    2c5c:	20000154 	.word	0x20000154
    2c60:	00002abd 	.word	0x00002abd

00002c64 <clrScr>:
{
    2c64:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = LCD_CS;
    2c66:	2280      	movs	r2, #128	; 0x80
    2c68:	03d2      	lsls	r2, r2, #15
    2c6a:	4b02      	ldr	r3, [pc, #8]	; (2c74 <clrScr+0x10>)
    2c6c:	601a      	str	r2, [r3, #0]
	clrXY();
    2c6e:	4b02      	ldr	r3, [pc, #8]	; (2c78 <clrScr+0x14>)
    2c70:	4798      	blx	r3
}
    2c72:	bd10      	pop	{r4, pc}
    2c74:	41004494 	.word	0x41004494
    2c78:	00002c45 	.word	0x00002c45

00002c7c <setPixel>:

void setPixel(uint16_t color)
{
    2c7c:	b510      	push	{r4, lr}
	//it sets it to a 16-bit color.
	LCD_Write_DATA16((color>>8),(color&0xFF));
    2c7e:	b2c1      	uxtb	r1, r0
    2c80:	0a00      	lsrs	r0, r0, #8
    2c82:	4b01      	ldr	r3, [pc, #4]	; (2c88 <setPixel+0xc>)
    2c84:	4798      	blx	r3
}
    2c86:	bd10      	pop	{r4, pc}
    2c88:	00002d01 	.word	0x00002d01

00002c8c <clearScreen>:
	LCD_Write_DATA8(0x80);
	REG_PORT_OUTSET1 = LCD_CS;
}
*/
void clearScreen(void)
{
    2c8c:	b510      	push	{r4, lr}
	fore_Color_High = ((r&248)|g>>5);
    2c8e:	2300      	movs	r3, #0
    2c90:	4a06      	ldr	r2, [pc, #24]	; (2cac <clearScreen+0x20>)
    2c92:	8013      	strh	r3, [r2, #0]
	fore_Color_Low = ((g&28)<<3|b>>3);
    2c94:	4a06      	ldr	r2, [pc, #24]	; (2cb0 <clearScreen+0x24>)
    2c96:	8013      	strh	r3, [r2, #0]
	setColorRGB(0,0,0);
	fillRect(0,0,display_Y_size,display_X_size);
    2c98:	4b06      	ldr	r3, [pc, #24]	; (2cb4 <clearScreen+0x28>)
    2c9a:	881b      	ldrh	r3, [r3, #0]
    2c9c:	4a06      	ldr	r2, [pc, #24]	; (2cb8 <clearScreen+0x2c>)
    2c9e:	8812      	ldrh	r2, [r2, #0]
    2ca0:	2100      	movs	r1, #0
    2ca2:	2000      	movs	r0, #0
    2ca4:	4c05      	ldr	r4, [pc, #20]	; (2cbc <clearScreen+0x30>)
    2ca6:	47a0      	blx	r4
}
    2ca8:	bd10      	pop	{r4, pc}
    2caa:	46c0      	nop			; (mov r8, r8)
    2cac:	20000a8e 	.word	0x20000a8e
    2cb0:	20000a90 	.word	0x20000a90
    2cb4:	20000154 	.word	0x20000154
    2cb8:	20000156 	.word	0x20000156
    2cbc:	00002b35 	.word	0x00002b35

00002cc0 <LCD_Write_Bus>:
	fillRect(0,0,799,489);
		
}

void LCD_Write_Bus(char VH, char VL)
{
    2cc0:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = 0x0000ffff;
    2cc2:	4c06      	ldr	r4, [pc, #24]	; (2cdc <LCD_Write_Bus+0x1c>)
    2cc4:	4b06      	ldr	r3, [pc, #24]	; (2ce0 <LCD_Write_Bus+0x20>)
    2cc6:	6023      	str	r3, [r4, #0]
	REG_PORT_OUTSET1 = (VH << 8) | VL;
    2cc8:	0200      	lsls	r0, r0, #8
    2cca:	4301      	orrs	r1, r0
    2ccc:	4b05      	ldr	r3, [pc, #20]	; (2ce4 <LCD_Write_Bus+0x24>)
    2cce:	6019      	str	r1, [r3, #0]
	REG_PORT_OUTCLR1 = LCD_WR;
    2cd0:	2280      	movs	r2, #128	; 0x80
    2cd2:	0292      	lsls	r2, r2, #10
    2cd4:	6022      	str	r2, [r4, #0]
	REG_PORT_OUTSET1 = LCD_WR;
    2cd6:	601a      	str	r2, [r3, #0]
}
    2cd8:	bd10      	pop	{r4, pc}
    2cda:	46c0      	nop			; (mov r8, r8)
    2cdc:	41004494 	.word	0x41004494
    2ce0:	0000ffff 	.word	0x0000ffff
    2ce4:	41004498 	.word	0x41004498

00002ce8 <LCD_Write_COM16>:

void LCD_Write_COM16(char VH, char VL)
{
    2ce8:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = LCD_DC;
    2cea:	2280      	movs	r2, #128	; 0x80
    2cec:	0412      	lsls	r2, r2, #16
    2cee:	4b02      	ldr	r3, [pc, #8]	; (2cf8 <LCD_Write_COM16+0x10>)
    2cf0:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(VH,VL);
    2cf2:	4b02      	ldr	r3, [pc, #8]	; (2cfc <LCD_Write_COM16+0x14>)
    2cf4:	4798      	blx	r3
}
    2cf6:	bd10      	pop	{r4, pc}
    2cf8:	41004494 	.word	0x41004494
    2cfc:	00002cc1 	.word	0x00002cc1

00002d00 <LCD_Write_DATA16>:
	REG_PORT_OUTCLR1 = LCD_DC;
	LCD_Write_Bus(0x00, VL);
}

void LCD_Write_DATA16(char VH, char VL)
{
    2d00:	b510      	push	{r4, lr}
	REG_PORT_OUTSET1 = LCD_DC;
    2d02:	2280      	movs	r2, #128	; 0x80
    2d04:	0412      	lsls	r2, r2, #16
    2d06:	4b02      	ldr	r3, [pc, #8]	; (2d10 <LCD_Write_DATA16+0x10>)
    2d08:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(VH,VL);
    2d0a:	4b02      	ldr	r3, [pc, #8]	; (2d14 <LCD_Write_DATA16+0x14>)
    2d0c:	4798      	blx	r3
}
    2d0e:	bd10      	pop	{r4, pc}
    2d10:	41004498 	.word	0x41004498
    2d14:	00002cc1 	.word	0x00002cc1

00002d18 <LCD_Write_DATA8>:

void LCD_Write_DATA8(char VL)
{
    2d18:	b510      	push	{r4, lr}
    2d1a:	0001      	movs	r1, r0
	REG_PORT_OUTSET1 = LCD_DC;
    2d1c:	2280      	movs	r2, #128	; 0x80
    2d1e:	0412      	lsls	r2, r2, #16
    2d20:	4b02      	ldr	r3, [pc, #8]	; (2d2c <LCD_Write_DATA8+0x14>)
    2d22:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(0x00, VL);
    2d24:	2000      	movs	r0, #0
    2d26:	4b02      	ldr	r3, [pc, #8]	; (2d30 <LCD_Write_DATA8+0x18>)
    2d28:	4798      	blx	r3
}
    2d2a:	bd10      	pop	{r4, pc}
    2d2c:	41004498 	.word	0x41004498
    2d30:	00002cc1 	.word	0x00002cc1

00002d34 <InitLCD>:
{
    2d34:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d36:	46c6      	mov	lr, r8
    2d38:	b500      	push	{lr}
    2d3a:	b082      	sub	sp, #8
	REG_PORT_DIRSET1 = 0x0000ffff;		//LCD data bus, PB00 - PB15
    2d3c:	4b80      	ldr	r3, [pc, #512]	; (2f40 <InitLCD+0x20c>)
    2d3e:	4f81      	ldr	r7, [pc, #516]	; (2f44 <InitLCD+0x210>)
    2d40:	601f      	str	r7, [r3, #0]
	REG_PORT_DIRSET1 = LCD_Reset;
    2d42:	2580      	movs	r5, #128	; 0x80
    2d44:	05ed      	lsls	r5, r5, #23
    2d46:	601d      	str	r5, [r3, #0]
	REG_PORT_DIRSET1 = LCD_CS;
    2d48:	2680      	movs	r6, #128	; 0x80
    2d4a:	03f6      	lsls	r6, r6, #15
    2d4c:	601e      	str	r6, [r3, #0]
	REG_PORT_DIRSET1 = LCD_WR;
    2d4e:	2080      	movs	r0, #128	; 0x80
    2d50:	0280      	lsls	r0, r0, #10
    2d52:	6018      	str	r0, [r3, #0]
	REG_PORT_DIRSET1 = LCD_DC;
    2d54:	2180      	movs	r1, #128	; 0x80
    2d56:	0409      	lsls	r1, r1, #16
    2d58:	6019      	str	r1, [r3, #0]
	REG_PORT_DIRSET1 = LCD_RD;
    2d5a:	2280      	movs	r2, #128	; 0x80
    2d5c:	0252      	lsls	r2, r2, #9
    2d5e:	601a      	str	r2, [r3, #0]
	REG_PORT_OUTCLR1 = 0x0000ffff;
    2d60:	4c79      	ldr	r4, [pc, #484]	; (2f48 <InitLCD+0x214>)
    2d62:	6027      	str	r7, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_Reset;
    2d64:	6025      	str	r5, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_CS;
    2d66:	6026      	str	r6, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_WR;
    2d68:	6020      	str	r0, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_DC;
    2d6a:	6021      	str	r1, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_RD;
    2d6c:	6022      	str	r2, [r4, #0]
	REG_PORT_DIRSET1 = PORT_PB16;
    2d6e:	601a      	str	r2, [r3, #0]
	REG_PORT_OUTSET1 = PORT_PB16;
    2d70:	4f76      	ldr	r7, [pc, #472]	; (2f4c <InitLCD+0x218>)
    2d72:	603a      	str	r2, [r7, #0]
	REG_PORT_OUTSET1 = LCD_Reset;
    2d74:	603d      	str	r5, [r7, #0]
	delay_ms(5);
    2d76:	2005      	movs	r0, #5
    2d78:	4b75      	ldr	r3, [pc, #468]	; (2f50 <InitLCD+0x21c>)
    2d7a:	4698      	mov	r8, r3
    2d7c:	4798      	blx	r3
	REG_PORT_OUTCLR1 = LCD_Reset;
    2d7e:	6025      	str	r5, [r4, #0]
	delay_ms(5);
    2d80:	2005      	movs	r0, #5
    2d82:	47c0      	blx	r8
	REG_PORT_OUTSET1 = LCD_Reset;
    2d84:	603d      	str	r5, [r7, #0]
	REG_PORT_OUTCLR1 = LCD_CS;
    2d86:	6026      	str	r6, [r4, #0]
	for(int i = 0; i < 70; i++)
    2d88:	2400      	movs	r4, #0
		REG_PORT_OUTCLR1 = LCD_DC;
    2d8a:	4b6f      	ldr	r3, [pc, #444]	; (2f48 <InitLCD+0x214>)
    2d8c:	4698      	mov	r8, r3
    2d8e:	2580      	movs	r5, #128	; 0x80
    2d90:	042d      	lsls	r5, r5, #16
    2d92:	002f      	movs	r7, r5
		LCD_Write_COM16(belial[i],mulciber[i]);
    2d94:	4e6f      	ldr	r6, [pc, #444]	; (2f54 <InitLCD+0x220>)
		REG_PORT_OUTCLR1 = LCD_DC;
    2d96:	4643      	mov	r3, r8
    2d98:	601f      	str	r7, [r3, #0]
		LCD_Write_COM16(belial[i],mulciber[i]);
    2d9a:	5da1      	ldrb	r1, [r4, r6]
    2d9c:	4b6e      	ldr	r3, [pc, #440]	; (2f58 <InitLCD+0x224>)
    2d9e:	5ce0      	ldrb	r0, [r4, r3]
    2da0:	4b6e      	ldr	r3, [pc, #440]	; (2f5c <InitLCD+0x228>)
    2da2:	4798      	blx	r3
		REG_PORT_OUTSET1 = LCD_DC;
    2da4:	4b69      	ldr	r3, [pc, #420]	; (2f4c <InitLCD+0x218>)
    2da6:	601d      	str	r5, [r3, #0]
		LCD_Write_DATA8(lucifer[i]);
    2da8:	4b6d      	ldr	r3, [pc, #436]	; (2f60 <InitLCD+0x22c>)
    2daa:	5ce0      	ldrb	r0, [r4, r3]
    2dac:	4b6d      	ldr	r3, [pc, #436]	; (2f64 <InitLCD+0x230>)
    2dae:	4798      	blx	r3
	for(int i = 0; i < 70; i++)
    2db0:	3401      	adds	r4, #1
    2db2:	2c46      	cmp	r4, #70	; 0x46
    2db4:	d1ef      	bne.n	2d96 <InitLCD+0x62>
    2db6:	23d1      	movs	r3, #209	; 0xd1
    2db8:	9301      	str	r3, [sp, #4]
			LCD_Write_COM16(k,0x00);
    2dba:	4d68      	ldr	r5, [pc, #416]	; (2f5c <InitLCD+0x228>)
			LCD_Write_DATA8(beelzebub[l]);
    2dbc:	4f69      	ldr	r7, [pc, #420]	; (2f64 <InitLCD+0x230>)
    2dbe:	4c6a      	ldr	r4, [pc, #424]	; (2f68 <InitLCD+0x234>)
    2dc0:	0026      	movs	r6, r4
    2dc2:	3634      	adds	r6, #52	; 0x34
			LCD_Write_COM16(k,0x00);
    2dc4:	2100      	movs	r1, #0
    2dc6:	9801      	ldr	r0, [sp, #4]
    2dc8:	47a8      	blx	r5
			LCD_Write_DATA8(beelzebub[l]);
    2dca:	7820      	ldrb	r0, [r4, #0]
    2dcc:	47b8      	blx	r7
    2dce:	3401      	adds	r4, #1
		for(int l = 0; l < 52; l++)
    2dd0:	42a6      	cmp	r6, r4
    2dd2:	d1f7      	bne.n	2dc4 <InitLCD+0x90>
	for(char k = 0xD1; k < 0xD6; k++)
    2dd4:	9b01      	ldr	r3, [sp, #4]
    2dd6:	3301      	adds	r3, #1
    2dd8:	b2db      	uxtb	r3, r3
    2dda:	9301      	str	r3, [sp, #4]
    2ddc:	2bd6      	cmp	r3, #214	; 0xd6
    2dde:	d1ee      	bne.n	2dbe <InitLCD+0x8a>
	LCD_Write_COM16(0xF0, 0x00);LCD_Write_DATA8(0x55);
    2de0:	2100      	movs	r1, #0
    2de2:	20f0      	movs	r0, #240	; 0xf0
    2de4:	4c5d      	ldr	r4, [pc, #372]	; (2f5c <InitLCD+0x228>)
    2de6:	47a0      	blx	r4
    2de8:	2055      	movs	r0, #85	; 0x55
    2dea:	4d5e      	ldr	r5, [pc, #376]	; (2f64 <InitLCD+0x230>)
    2dec:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x01);LCD_Write_DATA8(0xAA);	
    2dee:	2101      	movs	r1, #1
    2df0:	20f0      	movs	r0, #240	; 0xf0
    2df2:	47a0      	blx	r4
    2df4:	20aa      	movs	r0, #170	; 0xaa
    2df6:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x02);LCD_Write_DATA8(0x52);	
    2df8:	2102      	movs	r1, #2
    2dfa:	20f0      	movs	r0, #240	; 0xf0
    2dfc:	47a0      	blx	r4
    2dfe:	2052      	movs	r0, #82	; 0x52
    2e00:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x03);LCD_Write_DATA8(0x08);	
    2e02:	2103      	movs	r1, #3
    2e04:	20f0      	movs	r0, #240	; 0xf0
    2e06:	47a0      	blx	r4
    2e08:	2008      	movs	r0, #8
    2e0a:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x04);LCD_Write_DATA8(0x00);	
    2e0c:	2104      	movs	r1, #4
    2e0e:	20f0      	movs	r0, #240	; 0xf0
    2e10:	47a0      	blx	r4
    2e12:	2000      	movs	r0, #0
    2e14:	47a8      	blx	r5
	LCD_Write_COM16(0xB1, 0x00);LCD_Write_DATA8(0xCC);
    2e16:	2100      	movs	r1, #0
    2e18:	20b1      	movs	r0, #177	; 0xb1
    2e1a:	47a0      	blx	r4
    2e1c:	20cc      	movs	r0, #204	; 0xcc
    2e1e:	47a8      	blx	r5
	LCD_Write_COM16(0xB1, 0x01);LCD_Write_DATA8(0x00);	
    2e20:	2101      	movs	r1, #1
    2e22:	20b1      	movs	r0, #177	; 0xb1
    2e24:	47a0      	blx	r4
    2e26:	2000      	movs	r0, #0
    2e28:	47a8      	blx	r5
	LCD_Write_COM16(0xB5, 0x00);LCD_Write_DATA8(0x50);	
    2e2a:	2100      	movs	r1, #0
    2e2c:	20b5      	movs	r0, #181	; 0xb5
    2e2e:	47a0      	blx	r4
    2e30:	2050      	movs	r0, #80	; 0x50
    2e32:	47a8      	blx	r5
	LCD_Write_COM16(0xB6, 0x00);LCD_Write_DATA8(0x05);
    2e34:	2100      	movs	r1, #0
    2e36:	20b6      	movs	r0, #182	; 0xb6
    2e38:	47a0      	blx	r4
    2e3a:	2005      	movs	r0, #5
    2e3c:	47a8      	blx	r5
	LCD_Write_COM16(0xB7, 0x00);LCD_Write_DATA8(0x70);
    2e3e:	2100      	movs	r1, #0
    2e40:	20b7      	movs	r0, #183	; 0xb7
    2e42:	47a0      	blx	r4
    2e44:	2070      	movs	r0, #112	; 0x70
    2e46:	47a8      	blx	r5
	LCD_Write_COM16(0xB7, 0x01);LCD_Write_DATA8(0x70);
    2e48:	2101      	movs	r1, #1
    2e4a:	20b7      	movs	r0, #183	; 0xb7
    2e4c:	47a0      	blx	r4
    2e4e:	2070      	movs	r0, #112	; 0x70
    2e50:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x00);LCD_Write_DATA8(0x01);
    2e52:	2100      	movs	r1, #0
    2e54:	20b8      	movs	r0, #184	; 0xb8
    2e56:	47a0      	blx	r4
    2e58:	2001      	movs	r0, #1
    2e5a:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x01);LCD_Write_DATA8(0x03);
    2e5c:	2101      	movs	r1, #1
    2e5e:	20b8      	movs	r0, #184	; 0xb8
    2e60:	47a0      	blx	r4
    2e62:	2003      	movs	r0, #3
    2e64:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x02);LCD_Write_DATA8(0x03);
    2e66:	2102      	movs	r1, #2
    2e68:	20b8      	movs	r0, #184	; 0xb8
    2e6a:	47a0      	blx	r4
    2e6c:	2003      	movs	r0, #3
    2e6e:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x03);LCD_Write_DATA8(0x03);	
    2e70:	2103      	movs	r1, #3
    2e72:	20b8      	movs	r0, #184	; 0xb8
    2e74:	47a0      	blx	r4
    2e76:	2003      	movs	r0, #3
    2e78:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x00);LCD_Write_DATA8(0x02);
    2e7a:	2100      	movs	r1, #0
    2e7c:	20bc      	movs	r0, #188	; 0xbc
    2e7e:	47a0      	blx	r4
    2e80:	2002      	movs	r0, #2
    2e82:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x01);LCD_Write_DATA8(0x00);
    2e84:	2101      	movs	r1, #1
    2e86:	20bc      	movs	r0, #188	; 0xbc
    2e88:	47a0      	blx	r4
    2e8a:	2000      	movs	r0, #0
    2e8c:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x02);LCD_Write_DATA8(0x00);
    2e8e:	2102      	movs	r1, #2
    2e90:	20bc      	movs	r0, #188	; 0xbc
    2e92:	47a0      	blx	r4
    2e94:	2000      	movs	r0, #0
    2e96:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x00);LCD_Write_DATA8(0xD0);
    2e98:	2100      	movs	r1, #0
    2e9a:	20c9      	movs	r0, #201	; 0xc9
    2e9c:	47a0      	blx	r4
    2e9e:	20d0      	movs	r0, #208	; 0xd0
    2ea0:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x01);LCD_Write_DATA8(0x02);
    2ea2:	2101      	movs	r1, #1
    2ea4:	20c9      	movs	r0, #201	; 0xc9
    2ea6:	47a0      	blx	r4
    2ea8:	2002      	movs	r0, #2
    2eaa:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x02);LCD_Write_DATA8(0x50);
    2eac:	2102      	movs	r1, #2
    2eae:	20c9      	movs	r0, #201	; 0xc9
    2eb0:	47a0      	blx	r4
    2eb2:	2050      	movs	r0, #80	; 0x50
    2eb4:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x03);LCD_Write_DATA8(0x50);
    2eb6:	2103      	movs	r1, #3
    2eb8:	20c9      	movs	r0, #201	; 0xc9
    2eba:	47a0      	blx	r4
    2ebc:	2050      	movs	r0, #80	; 0x50
    2ebe:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x04);LCD_Write_DATA8(0x50);
    2ec0:	2104      	movs	r1, #4
    2ec2:	20c9      	movs	r0, #201	; 0xc9
    2ec4:	47a0      	blx	r4
    2ec6:	2050      	movs	r0, #80	; 0x50
    2ec8:	47a8      	blx	r5
	LCD_Write_COM16(0x35, 0x00);LCD_Write_DATA8(0x00);
    2eca:	2100      	movs	r1, #0
    2ecc:	2035      	movs	r0, #53	; 0x35
    2ece:	47a0      	blx	r4
    2ed0:	2000      	movs	r0, #0
    2ed2:	47a8      	blx	r5
	LCD_Write_COM16(0x3A, 0x00);LCD_Write_DATA8(0x55);
    2ed4:	2100      	movs	r1, #0
    2ed6:	203a      	movs	r0, #58	; 0x3a
    2ed8:	47a0      	blx	r4
    2eda:	2055      	movs	r0, #85	; 0x55
    2edc:	47a8      	blx	r5
	LCD_Write_COM16(0x36, 0x00);LCD_Write_DATA8(0xE2);  //This is the MADCTL register
    2ede:	2100      	movs	r1, #0
    2ee0:	2036      	movs	r0, #54	; 0x36
    2ee2:	47a0      	blx	r4
    2ee4:	20e2      	movs	r0, #226	; 0xe2
    2ee6:	47a8      	blx	r5
  	LCD_Write_COM16(0x11,0x00);   //Start Up  
    2ee8:	2100      	movs	r1, #0
    2eea:	2011      	movs	r0, #17
    2eec:	47a0      	blx	r4
  	delay_ms(100);
    2eee:	2064      	movs	r0, #100	; 0x64
    2ef0:	4e17      	ldr	r6, [pc, #92]	; (2f50 <InitLCD+0x21c>)
    2ef2:	47b0      	blx	r6
  	LCD_Write_COM16(0x29,0x00);   //Display On  
    2ef4:	2100      	movs	r1, #0
    2ef6:	2029      	movs	r0, #41	; 0x29
    2ef8:	47a0      	blx	r4
   	delay_ms(100);
    2efa:	2064      	movs	r0, #100	; 0x64
    2efc:	47b0      	blx	r6
	LCD_Write_COM16(0x51,0x00);LCD_Write_DATA8(0xFF);
    2efe:	2100      	movs	r1, #0
    2f00:	2051      	movs	r0, #81	; 0x51
    2f02:	47a0      	blx	r4
    2f04:	20ff      	movs	r0, #255	; 0xff
    2f06:	47a8      	blx	r5
	REG_PORT_OUTSET1 = LCD_CS;
    2f08:	2280      	movs	r2, #128	; 0x80
    2f0a:	03d2      	lsls	r2, r2, #15
    2f0c:	4b0f      	ldr	r3, [pc, #60]	; (2f4c <InitLCD+0x218>)
    2f0e:	601a      	str	r2, [r3, #0]
	clrScr();
    2f10:	4b16      	ldr	r3, [pc, #88]	; (2f6c <InitLCD+0x238>)
    2f12:	4798      	blx	r3
	setColorRGB(0,0,0);
    2f14:	2200      	movs	r2, #0
    2f16:	2100      	movs	r1, #0
    2f18:	2000      	movs	r0, #0
    2f1a:	4b15      	ldr	r3, [pc, #84]	; (2f70 <InitLCD+0x23c>)
    2f1c:	4798      	blx	r3
	setBackColorRGB(0, 0, 0);
    2f1e:	2200      	movs	r2, #0
    2f20:	2100      	movs	r1, #0
    2f22:	2000      	movs	r0, #0
    2f24:	4b13      	ldr	r3, [pc, #76]	; (2f74 <InitLCD+0x240>)
    2f26:	4798      	blx	r3
	fillRect(0,0,799,489);
    2f28:	23ea      	movs	r3, #234	; 0xea
    2f2a:	33ff      	adds	r3, #255	; 0xff
    2f2c:	4a12      	ldr	r2, [pc, #72]	; (2f78 <InitLCD+0x244>)
    2f2e:	2100      	movs	r1, #0
    2f30:	2000      	movs	r0, #0
    2f32:	4c12      	ldr	r4, [pc, #72]	; (2f7c <InitLCD+0x248>)
    2f34:	47a0      	blx	r4
}
    2f36:	b002      	add	sp, #8
    2f38:	bc04      	pop	{r2}
    2f3a:	4690      	mov	r8, r2
    2f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2f3e:	46c0      	nop			; (mov r8, r8)
    2f40:	41004488 	.word	0x41004488
    2f44:	0000ffff 	.word	0x0000ffff
    2f48:	41004494 	.word	0x41004494
    2f4c:	41004498 	.word	0x41004498
    2f50:	00000599 	.word	0x00000599
    2f54:	0000688c 	.word	0x0000688c
    2f58:	000067fc 	.word	0x000067fc
    2f5c:	00002ce9 	.word	0x00002ce9
    2f60:	00006844 	.word	0x00006844
    2f64:	00002d19 	.word	0x00002d19
    2f68:	000067c8 	.word	0x000067c8
    2f6c:	00002c65 	.word	0x00002c65
    2f70:	000029f9 	.word	0x000029f9
    2f74:	00002a21 	.word	0x00002a21
    2f78:	0000031f 	.word	0x0000031f
    2f7c:	00002b35 	.word	0x00002b35

00002f80 <usart_read_callback>:
	SysTick_Config(SystemCoreClock/1000);
	system_interrupt_enable(SYSTEM_INTERRUPT_SYSTICK);
}

void usart_read_callback(struct usart_module *const usart_module)
{
    2f80:	b510      	push	{r4, lr}

	usart_read_buffer_job(&usart_instance, (char*)&rx_buf, 1);
    2f82:	2201      	movs	r2, #1
    2f84:	4902      	ldr	r1, [pc, #8]	; (2f90 <usart_read_callback+0x10>)
    2f86:	4803      	ldr	r0, [pc, #12]	; (2f94 <usart_read_callback+0x14>)
    2f88:	4b03      	ldr	r3, [pc, #12]	; (2f98 <usart_read_callback+0x18>)
    2f8a:	4798      	blx	r3
	
}
    2f8c:	bd10      	pop	{r4, pc}
    2f8e:	46c0      	nop			; (mov r8, r8)
    2f90:	200002a9 	.word	0x200002a9
    2f94:	200002d4 	.word	0x200002d4
    2f98:	00001439 	.word	0x00001439

00002f9c <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    2f9c:	b570      	push	{r4, r5, r6, lr}
    2f9e:	b082      	sub	sp, #8
    2fa0:	0005      	movs	r5, r0
    2fa2:	000e      	movs	r6, r1
	uint16_t temp = 0;
    2fa4:	2200      	movs	r2, #0
    2fa6:	466b      	mov	r3, sp
    2fa8:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    2faa:	4c06      	ldr	r4, [pc, #24]	; (2fc4 <usart_serial_getchar+0x28>)
    2fac:	466b      	mov	r3, sp
    2fae:	1d99      	adds	r1, r3, #6
    2fb0:	0028      	movs	r0, r5
    2fb2:	47a0      	blx	r4
    2fb4:	2800      	cmp	r0, #0
    2fb6:	d1f9      	bne.n	2fac <usart_serial_getchar+0x10>

	*c = temp;
    2fb8:	466b      	mov	r3, sp
    2fba:	3306      	adds	r3, #6
    2fbc:	881b      	ldrh	r3, [r3, #0]
    2fbe:	7033      	strb	r3, [r6, #0]
}
    2fc0:	b002      	add	sp, #8
    2fc2:	bd70      	pop	{r4, r5, r6, pc}
    2fc4:	00001367 	.word	0x00001367

00002fc8 <usart_serial_putchar>:
{
    2fc8:	b570      	push	{r4, r5, r6, lr}
    2fca:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    2fcc:	b28c      	uxth	r4, r1
    2fce:	4e03      	ldr	r6, [pc, #12]	; (2fdc <usart_serial_putchar+0x14>)
    2fd0:	0021      	movs	r1, r4
    2fd2:	0028      	movs	r0, r5
    2fd4:	47b0      	blx	r6
    2fd6:	2800      	cmp	r0, #0
    2fd8:	d1fa      	bne.n	2fd0 <usart_serial_putchar+0x8>
}
    2fda:	bd70      	pop	{r4, r5, r6, pc}
    2fdc:	00001341 	.word	0x00001341

00002fe0 <SysTick_Handler>:
	ul_tickcount++;
    2fe0:	4a02      	ldr	r2, [pc, #8]	; (2fec <SysTick_Handler+0xc>)
    2fe2:	8813      	ldrh	r3, [r2, #0]
    2fe4:	3301      	adds	r3, #1
    2fe6:	8013      	strh	r3, [r2, #0]
}
    2fe8:	4770      	bx	lr
    2fea:	46c0      	nop			; (mov r8, r8)
    2fec:	2000029e 	.word	0x2000029e

00002ff0 <conf_systick>:
{
    2ff0:	b510      	push	{r4, lr}
	SysTick_Config(SystemCoreClock/1000);
    2ff2:	4b0e      	ldr	r3, [pc, #56]	; (302c <conf_systick+0x3c>)
    2ff4:	6818      	ldr	r0, [r3, #0]
    2ff6:	21fa      	movs	r1, #250	; 0xfa
    2ff8:	0089      	lsls	r1, r1, #2
    2ffa:	4b0d      	ldr	r3, [pc, #52]	; (3030 <conf_systick+0x40>)
    2ffc:	4798      	blx	r3
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    2ffe:	3801      	subs	r0, #1
    3000:	4b0c      	ldr	r3, [pc, #48]	; (3034 <conf_systick+0x44>)
    3002:	4298      	cmp	r0, r3
    3004:	d80d      	bhi.n	3022 <conf_systick+0x32>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    3006:	4a0c      	ldr	r2, [pc, #48]	; (3038 <conf_systick+0x48>)
    3008:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    300a:	480c      	ldr	r0, [pc, #48]	; (303c <conf_systick+0x4c>)
    300c:	6a03      	ldr	r3, [r0, #32]
    300e:	021b      	lsls	r3, r3, #8
    3010:	0a1b      	lsrs	r3, r3, #8
    3012:	21c0      	movs	r1, #192	; 0xc0
    3014:	0609      	lsls	r1, r1, #24
    3016:	430b      	orrs	r3, r1
    3018:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    301a:	2300      	movs	r3, #0
    301c:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    301e:	3307      	adds	r3, #7
    3020:	6013      	str	r3, [r2, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3022:	2280      	movs	r2, #128	; 0x80
    3024:	0612      	lsls	r2, r2, #24
    3026:	4b06      	ldr	r3, [pc, #24]	; (3040 <conf_systick+0x50>)
    3028:	601a      	str	r2, [r3, #0]
}
    302a:	bd10      	pop	{r4, pc}
    302c:	2000000c 	.word	0x2000000c
    3030:	0000337d 	.word	0x0000337d
    3034:	00ffffff 	.word	0x00ffffff
    3038:	e000e010 	.word	0xe000e010
    303c:	e000ed00 	.word	0xe000ed00
    3040:	e000e100 	.word	0xe000e100

00003044 <configure_usart>:

/**************************SERCOM STUFF*******************************/


void configure_usart(void)
{
    3044:	b570      	push	{r4, r5, r6, lr}
    3046:	b090      	sub	sp, #64	; 0x40
	config->data_order       = USART_DATAORDER_LSB;
    3048:	2380      	movs	r3, #128	; 0x80
    304a:	05db      	lsls	r3, r3, #23
    304c:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    304e:	2300      	movs	r3, #0
    3050:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    3052:	22ff      	movs	r2, #255	; 0xff
    3054:	4669      	mov	r1, sp
    3056:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    3058:	2200      	movs	r2, #0
    305a:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    305c:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
    305e:	2196      	movs	r1, #150	; 0x96
    3060:	0189      	lsls	r1, r1, #6
    3062:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
    3064:	2101      	movs	r1, #1
    3066:	2024      	movs	r0, #36	; 0x24
    3068:	466c      	mov	r4, sp
    306a:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    306c:	3001      	adds	r0, #1
    306e:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    3070:	3125      	adds	r1, #37	; 0x25
    3072:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    3074:	3101      	adds	r1, #1
    3076:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    3078:	930a      	str	r3, [sp, #40]	; 0x28
	config->run_in_standby   = false;
    307a:	3105      	adds	r1, #5
    307c:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    307e:	3101      	adds	r1, #1
    3080:	5463      	strb	r3, [r4, r1]
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    3082:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    3084:	8223      	strh	r3, [r4, #16]
	config->lin_slave_enable      = false;
    3086:	76e3      	strb	r3, [r4, #27]
	config->immediate_buffer_overflow_notification  = false;
    3088:	7622      	strb	r2, [r4, #24]
	config->start_frame_detection_enable            = false;
    308a:	7722      	strb	r2, [r4, #28]
	config->encoding_format_enable                  = false;
    308c:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    308e:	2313      	movs	r3, #19
    3090:	76a3      	strb	r3, [r4, #26]
	config->collision_detection_enable              = false;
    3092:	7762      	strb	r2, [r4, #29]
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);

	config_usart.baudrate    = 9600;
	config_usart.mux_setting = USART_RX_1_TX_0_XCK_1;
    3094:	2380      	movs	r3, #128	; 0x80
    3096:	035b      	lsls	r3, r3, #13
    3098:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = PINMUX_PA08D_SERCOM2_PAD0;
    309a:	4b1e      	ldr	r3, [pc, #120]	; (3114 <configure_usart+0xd0>)
    309c:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = PINMUX_PA09D_SERCOM2_PAD1;
    309e:	4b1e      	ldr	r3, [pc, #120]	; (3118 <configure_usart+0xd4>)
    30a0:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = PINMUX_UNUSED;
    30a2:	2301      	movs	r3, #1
    30a4:	425b      	negs	r3, r3
    30a6:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = PINMUX_UNUSED;
    30a8:	930f      	str	r3, [sp, #60]	; 0x3c
	
	while (usart_init(&usart_instance, SERCOM2, &config_usart) != STATUS_OK) {
    30aa:	4d1c      	ldr	r5, [pc, #112]	; (311c <configure_usart+0xd8>)
    30ac:	4c1c      	ldr	r4, [pc, #112]	; (3120 <configure_usart+0xdc>)
    30ae:	466a      	mov	r2, sp
    30b0:	491c      	ldr	r1, [pc, #112]	; (3124 <configure_usart+0xe0>)
    30b2:	0028      	movs	r0, r5
    30b4:	47a0      	blx	r4
    30b6:	2800      	cmp	r0, #0
    30b8:	d1f9      	bne.n	30ae <configure_usart+0x6a>
	stdio_base = (void *)module;
    30ba:	4c18      	ldr	r4, [pc, #96]	; (311c <configure_usart+0xd8>)
    30bc:	4b1a      	ldr	r3, [pc, #104]	; (3128 <configure_usart+0xe4>)
    30be:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    30c0:	4a1a      	ldr	r2, [pc, #104]	; (312c <configure_usart+0xe8>)
    30c2:	4b1b      	ldr	r3, [pc, #108]	; (3130 <configure_usart+0xec>)
    30c4:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    30c6:	4a1b      	ldr	r2, [pc, #108]	; (3134 <configure_usart+0xf0>)
    30c8:	4b1b      	ldr	r3, [pc, #108]	; (3138 <configure_usart+0xf4>)
    30ca:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    30cc:	466a      	mov	r2, sp
    30ce:	4915      	ldr	r1, [pc, #84]	; (3124 <configure_usart+0xe0>)
    30d0:	0020      	movs	r0, r4
    30d2:	4b13      	ldr	r3, [pc, #76]	; (3120 <configure_usart+0xdc>)
    30d4:	4798      	blx	r3
	setbuf(stdout, NULL);
    30d6:	4e19      	ldr	r6, [pc, #100]	; (313c <configure_usart+0xf8>)
    30d8:	6833      	ldr	r3, [r6, #0]
    30da:	6898      	ldr	r0, [r3, #8]
    30dc:	2100      	movs	r1, #0
    30de:	4d18      	ldr	r5, [pc, #96]	; (3140 <configure_usart+0xfc>)
    30e0:	47a8      	blx	r5
	setbuf(stdin, NULL);
    30e2:	6833      	ldr	r3, [r6, #0]
    30e4:	6858      	ldr	r0, [r3, #4]
    30e6:	2100      	movs	r1, #0
    30e8:	47a8      	blx	r5
	SercomUsart *const usart_hw = &(module->hw->USART);
    30ea:	6825      	ldr	r5, [r4, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    30ec:	0028      	movs	r0, r5
    30ee:	4b15      	ldr	r3, [pc, #84]	; (3144 <configure_usart+0x100>)
    30f0:	4798      	blx	r3
    30f2:	231f      	movs	r3, #31
    30f4:	4018      	ands	r0, r3
    30f6:	3b1e      	subs	r3, #30
    30f8:	4083      	lsls	r3, r0
    30fa:	4a13      	ldr	r2, [pc, #76]	; (3148 <configure_usart+0x104>)
    30fc:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    30fe:	6822      	ldr	r2, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
    3100:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    3102:	2b00      	cmp	r3, #0
    3104:	d1fc      	bne.n	3100 <configure_usart+0xbc>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    3106:	682b      	ldr	r3, [r5, #0]
    3108:	2202      	movs	r2, #2
    310a:	4313      	orrs	r3, r2
    310c:	602b      	str	r3, [r5, #0]
	}
	stdio_serial_init(&usart_instance, SERCOM2, &config_usart);
	usart_enable(&usart_instance);
}
    310e:	b010      	add	sp, #64	; 0x40
    3110:	bd70      	pop	{r4, r5, r6, pc}
    3112:	46c0      	nop			; (mov r8, r8)
    3114:	00080003 	.word	0x00080003
    3118:	00090003 	.word	0x00090003
    311c:	200002d4 	.word	0x200002d4
    3120:	00001005 	.word	0x00001005
    3124:	42001000 	.word	0x42001000
    3128:	200002d0 	.word	0x200002d0
    312c:	00002fc9 	.word	0x00002fc9
    3130:	200002cc 	.word	0x200002cc
    3134:	00002f9d 	.word	0x00002f9d
    3138:	200002c8 	.word	0x200002c8
    313c:	20000158 	.word	0x20000158
    3140:	000036bd 	.word	0x000036bd
    3144:	00000f75 	.word	0x00000f75
    3148:	e000e100 	.word	0xe000e100

0000314c <configure_usart_callbacks>:

void configure_usart_callbacks(void)
{
    314c:	b510      	push	{r4, lr}
	usart_register_callback(&usart_instance,usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
    314e:	4c06      	ldr	r4, [pc, #24]	; (3168 <configure_usart_callbacks+0x1c>)
    3150:	2201      	movs	r2, #1
    3152:	4906      	ldr	r1, [pc, #24]	; (316c <configure_usart_callbacks+0x20>)
    3154:	0020      	movs	r0, r4
    3156:	4b06      	ldr	r3, [pc, #24]	; (3170 <configure_usart_callbacks+0x24>)
    3158:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    315a:	2231      	movs	r2, #49	; 0x31
    315c:	5ca3      	ldrb	r3, [r4, r2]
    315e:	2102      	movs	r1, #2
    3160:	430b      	orrs	r3, r1
    3162:	54a3      	strb	r3, [r4, r2]
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
}
    3164:	bd10      	pop	{r4, pc}
    3166:	46c0      	nop			; (mov r8, r8)
    3168:	200002d4 	.word	0x200002d4
    316c:	00002f81 	.word	0x00002f81
    3170:	00001421 	.word	0x00001421

00003174 <configure_adc>:
	usart_enable(&usart_USB);
}
*/

void configure_adc(void)
{
    3174:	b510      	push	{r4, lr}
    3176:	b08c      	sub	sp, #48	; 0x30
	struct adc_config config_adc;
	adc_get_config_defaults(&config_adc);
    3178:	4668      	mov	r0, sp
    317a:	4b11      	ldr	r3, [pc, #68]	; (31c0 <configure_adc+0x4c>)
    317c:	4798      	blx	r3
	config_adc.positive_input = ADC_POSITIVE_INPUT_DAC;
    317e:	231c      	movs	r3, #28
    3180:	466a      	mov	r2, sp
    3182:	7313      	strb	r3, [r2, #12]
	adc_init(&adc_instance, ADC, &config_adc);
    3184:	4c0f      	ldr	r4, [pc, #60]	; (31c4 <configure_adc+0x50>)
    3186:	4910      	ldr	r1, [pc, #64]	; (31c8 <configure_adc+0x54>)
    3188:	0020      	movs	r0, r4
    318a:	4b10      	ldr	r3, [pc, #64]	; (31cc <configure_adc+0x58>)
    318c:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    318e:	6822      	ldr	r2, [r4, #0]
    3190:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    3192:	b25b      	sxtb	r3, r3
    3194:	2b00      	cmp	r3, #0
    3196:	dbfb      	blt.n	3190 <configure_adc+0x1c>
    3198:	2180      	movs	r1, #128	; 0x80
    319a:	0409      	lsls	r1, r1, #16
    319c:	4b0c      	ldr	r3, [pc, #48]	; (31d0 <configure_adc+0x5c>)
    319e:	6019      	str	r1, [r3, #0]
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    31a0:	230f      	movs	r3, #15
    31a2:	7593      	strb	r3, [r2, #22]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    31a4:	7613      	strb	r3, [r2, #24]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    31a6:	7813      	ldrb	r3, [r2, #0]
    31a8:	2102      	movs	r1, #2
    31aa:	430b      	orrs	r3, r1
    31ac:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
    31ae:	4b05      	ldr	r3, [pc, #20]	; (31c4 <configure_adc+0x50>)
    31b0:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    31b2:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    31b4:	b25b      	sxtb	r3, r3
    31b6:	2b00      	cmp	r3, #0
    31b8:	dbfb      	blt.n	31b2 <configure_adc+0x3e>
	adc_enable(&adc_instance);
}
    31ba:	b00c      	add	sp, #48	; 0x30
    31bc:	bd10      	pop	{r4, pc}
    31be:	46c0      	nop			; (mov r8, r8)
    31c0:	0000066d 	.word	0x0000066d
    31c4:	20000a94 	.word	0x20000a94
    31c8:	42004000 	.word	0x42004000
    31cc:	000006b1 	.word	0x000006b1
    31d0:	e000e100 	.word	0xe000e100

000031d4 <setupBoard>:



void setupBoard(void)
{
    31d4:	b570      	push	{r4, r5, r6, lr}
	uint16_t adcResult;

	system_init();
    31d6:	4b30      	ldr	r3, [pc, #192]	; (3298 <setupBoard+0xc4>)
    31d8:	4798      	blx	r3
	
	configure_adc();
    31da:	4b30      	ldr	r3, [pc, #192]	; (329c <setupBoard+0xc8>)
    31dc:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    31de:	4b30      	ldr	r3, [pc, #192]	; (32a0 <setupBoard+0xcc>)
    31e0:	6819      	ldr	r1, [r3, #0]
    31e2:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    31e4:	b25b      	sxtb	r3, r3
    31e6:	2b00      	cmp	r3, #0
    31e8:	dbfb      	blt.n	31e2 <setupBoard+0xe>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    31ea:	7b0b      	ldrb	r3, [r1, #12]
    31ec:	2202      	movs	r2, #2
    31ee:	4313      	orrs	r3, r2
    31f0:	730b      	strb	r3, [r1, #12]
    31f2:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    31f4:	b25b      	sxtb	r3, r3
    31f6:	2b00      	cmp	r3, #0
    31f8:	dbfb      	blt.n	31f2 <setupBoard+0x1e>
	if (int_flags & ADC_INTFLAG_RESRDY) {
    31fa:	2001      	movs	r0, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
    31fc:	2504      	movs	r5, #4
		status_flags |= ADC_STATUS_WINDOW;
    31fe:	2402      	movs	r4, #2
    3200:	e001      	b.n	3206 <setupBoard+0x32>
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    3202:	4210      	tst	r0, r2
    3204:	d10a      	bne.n	321c <setupBoard+0x48>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    3206:	7e0b      	ldrb	r3, [r1, #24]
    3208:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
    320a:	0002      	movs	r2, r0
    320c:	401a      	ands	r2, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
    320e:	421d      	tst	r5, r3
    3210:	d000      	beq.n	3214 <setupBoard+0x40>
		status_flags |= ADC_STATUS_WINDOW;
    3212:	4322      	orrs	r2, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    3214:	421c      	tst	r4, r3
    3216:	d0f4      	beq.n	3202 <setupBoard+0x2e>
		status_flags |= ADC_STATUS_OVERRUN;
    3218:	432a      	orrs	r2, r5
    321a:	e7f2      	b.n	3202 <setupBoard+0x2e>
    321c:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    321e:	b25b      	sxtb	r3, r3
    3220:	2b00      	cmp	r3, #0
    3222:	dbfb      	blt.n	321c <setupBoard+0x48>
	*result = adc_module->RESULT.reg;
    3224:	8b4c      	ldrh	r4, [r1, #26]
    3226:	b2a4      	uxth	r4, r4
	adc_module->INTFLAG.reg = int_flags;
    3228:	2301      	movs	r3, #1
    322a:	760b      	strb	r3, [r1, #24]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    322c:	7e0a      	ldrb	r2, [r1, #24]
    322e:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    3230:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    3232:	0750      	lsls	r0, r2, #29
    3234:	d501      	bpl.n	323a <setupBoard+0x66>
		status_flags |= ADC_STATUS_WINDOW;
    3236:	2002      	movs	r0, #2
    3238:	4303      	orrs	r3, r0
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    323a:	0792      	lsls	r2, r2, #30
    323c:	d501      	bpl.n	3242 <setupBoard+0x6e>
		status_flags |= ADC_STATUS_OVERRUN;
    323e:	2204      	movs	r2, #4
    3240:	4313      	orrs	r3, r2
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    3242:	075b      	lsls	r3, r3, #29
    3244:	d501      	bpl.n	324a <setupBoard+0x76>
	adc_module->INTFLAG.reg = int_flags;
    3246:	2302      	movs	r3, #2
    3248:	760b      	strb	r3, [r1, #24]
	adc_start_conversion(&adc_instance);
	do {
		/* Wait for conversion to be done and read out result */
	} while (adc_read(&adc_instance, &adcResult) == STATUS_BUSY);
	
	delay_init();
    324a:	4b16      	ldr	r3, [pc, #88]	; (32a4 <setupBoard+0xd0>)
    324c:	4798      	blx	r3
	srand(adcResult);
    324e:	0020      	movs	r0, r4
    3250:	4b15      	ldr	r3, [pc, #84]	; (32a8 <setupBoard+0xd4>)
    3252:	4798      	blx	r3
	//configure_usart_USB();

	//configure_console();
	//printf("Serial OK 9600 8N1\n\r");
	configure_usart();
    3254:	4b15      	ldr	r3, [pc, #84]	; (32ac <setupBoard+0xd8>)
    3256:	4798      	blx	r3
	configure_usart_callbacks();
    3258:	4b15      	ldr	r3, [pc, #84]	; (32b0 <setupBoard+0xdc>)
    325a:	4798      	blx	r3
	cpu_irq_enable();
    325c:	2201      	movs	r2, #1
    325e:	4b15      	ldr	r3, [pc, #84]	; (32b4 <setupBoard+0xe0>)
    3260:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    3262:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3266:	b662      	cpsie	i
	system_interrupt_enable_global();
	printf("Serial OK 9600 8N1\n\r");
    3268:	4813      	ldr	r0, [pc, #76]	; (32b8 <setupBoard+0xe4>)
    326a:	4b14      	ldr	r3, [pc, #80]	; (32bc <setupBoard+0xe8>)
    326c:	4798      	blx	r3
	usart_read_buffer_job(&usart_instance, (uint8_t*)&rx_buf, 1);
    326e:	2201      	movs	r2, #1
    3270:	4913      	ldr	r1, [pc, #76]	; (32c0 <setupBoard+0xec>)
    3272:	4814      	ldr	r0, [pc, #80]	; (32c4 <setupBoard+0xf0>)
    3274:	4b14      	ldr	r3, [pc, #80]	; (32c8 <setupBoard+0xf4>)
    3276:	4798      	blx	r3
	
	InitLCD();
    3278:	4b14      	ldr	r3, [pc, #80]	; (32cc <setupBoard+0xf8>)
    327a:	4798      	blx	r3
	splashScreen();
    327c:	4b14      	ldr	r3, [pc, #80]	; (32d0 <setupBoard+0xfc>)
    327e:	4798      	blx	r3
			
	conf_systick();
    3280:	4b14      	ldr	r3, [pc, #80]	; (32d4 <setupBoard+0x100>)
    3282:	4798      	blx	r3

	xCharPos=0;
    3284:	2300      	movs	r3, #0
    3286:	4a14      	ldr	r2, [pc, #80]	; (32d8 <setupBoard+0x104>)
    3288:	8013      	strh	r3, [r2, #0]
	yCharPos=0;
    328a:	4a14      	ldr	r2, [pc, #80]	; (32dc <setupBoard+0x108>)
    328c:	8013      	strh	r3, [r2, #0]
	drawChar(0xFF);
    328e:	20ff      	movs	r0, #255	; 0xff
    3290:	4b13      	ldr	r3, [pc, #76]	; (32e0 <setupBoard+0x10c>)
    3292:	4798      	blx	r3
}
    3294:	bd70      	pop	{r4, r5, r6, pc}
    3296:	46c0      	nop			; (mov r8, r8)
    3298:	00001d5d 	.word	0x00001d5d
    329c:	00003175 	.word	0x00003175
    32a0:	20000a94 	.word	0x20000a94
    32a4:	00000559 	.word	0x00000559
    32a8:	000035e9 	.word	0x000035e9
    32ac:	00003045 	.word	0x00003045
    32b0:	0000314d 	.word	0x0000314d
    32b4:	20000008 	.word	0x20000008
    32b8:	000068d4 	.word	0x000068d4
    32bc:	0000358d 	.word	0x0000358d
    32c0:	200002a9 	.word	0x200002a9
    32c4:	200002d4 	.word	0x200002d4
    32c8:	00001439 	.word	0x00001439
    32cc:	00002d35 	.word	0x00002d35
    32d0:	000001e5 	.word	0x000001e5
    32d4:	00002ff1 	.word	0x00002ff1
    32d8:	20000298 	.word	0x20000298
    32dc:	2000029a 	.word	0x2000029a
    32e0:	00001f41 	.word	0x00001f41

000032e4 <main>:
{
    32e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	setupBoard();
    32e6:	4b1c      	ldr	r3, [pc, #112]	; (3358 <main+0x74>)
    32e8:	4798      	blx	r3
		if((ul_tickcount % (UINT16_MAX/4) == 0) && (funcLock == false))
    32ea:	4f1c      	ldr	r7, [pc, #112]	; (335c <main+0x78>)
    32ec:	4e1c      	ldr	r6, [pc, #112]	; (3360 <main+0x7c>)
    32ee:	4d1d      	ldr	r5, [pc, #116]	; (3364 <main+0x80>)
    32f0:	e015      	b.n	331e <main+0x3a>
		if((ul_tickcount % 200 == 0) && (funcLock == false))
    32f2:	21c8      	movs	r1, #200	; 0xc8
    32f4:	0020      	movs	r0, r4
    32f6:	4b1a      	ldr	r3, [pc, #104]	; (3360 <main+0x7c>)
    32f8:	4798      	blx	r3
    32fa:	b289      	uxth	r1, r1
    32fc:	2900      	cmp	r1, #0
    32fe:	d10e      	bne.n	331e <main+0x3a>
    3300:	4b19      	ldr	r3, [pc, #100]	; (3368 <main+0x84>)
    3302:	781b      	ldrb	r3, [r3, #0]
    3304:	2b00      	cmp	r3, #0
    3306:	d10a      	bne.n	331e <main+0x3a>
			funcLock = true;
    3308:	4c17      	ldr	r4, [pc, #92]	; (3368 <main+0x84>)
    330a:	2301      	movs	r3, #1
    330c:	7023      	strb	r3, [r4, #0]
			readKeyboard();
    330e:	4b17      	ldr	r3, [pc, #92]	; (336c <main+0x88>)
    3310:	4798      	blx	r3
			printKeyboardBuffer();
    3312:	4b17      	ldr	r3, [pc, #92]	; (3370 <main+0x8c>)
    3314:	4798      	blx	r3
			parseRXBuffer();
    3316:	4b17      	ldr	r3, [pc, #92]	; (3374 <main+0x90>)
    3318:	4798      	blx	r3
			funcLock = false;
    331a:	2300      	movs	r3, #0
    331c:	7023      	strb	r3, [r4, #0]
		__WFI();
    331e:	bf30      	wfi
		if((ul_tickcount % (UINT16_MAX/4) == 0) && (funcLock == false))
    3320:	883c      	ldrh	r4, [r7, #0]
    3322:	0029      	movs	r1, r5
    3324:	0020      	movs	r0, r4
    3326:	47b0      	blx	r6
    3328:	b289      	uxth	r1, r1
    332a:	2900      	cmp	r1, #0
    332c:	d1e1      	bne.n	32f2 <main+0xe>
    332e:	4b0e      	ldr	r3, [pc, #56]	; (3368 <main+0x84>)
    3330:	781b      	ldrb	r3, [r3, #0]
    3332:	2b00      	cmp	r3, #0
    3334:	d1f3      	bne.n	331e <main+0x3a>
			funcLock = true;
    3336:	4c0c      	ldr	r4, [pc, #48]	; (3368 <main+0x84>)
    3338:	3301      	adds	r3, #1
    333a:	7023      	strb	r3, [r4, #0]
			blinkCursor();
    333c:	4b0e      	ldr	r3, [pc, #56]	; (3378 <main+0x94>)
    333e:	4798      	blx	r3
			funcLock = false;
    3340:	2300      	movs	r3, #0
    3342:	7023      	strb	r3, [r4, #0]
		if((ul_tickcount % 200 == 0) && (funcLock == false))
    3344:	4b05      	ldr	r3, [pc, #20]	; (335c <main+0x78>)
    3346:	8818      	ldrh	r0, [r3, #0]
    3348:	21c8      	movs	r1, #200	; 0xc8
    334a:	4b05      	ldr	r3, [pc, #20]	; (3360 <main+0x7c>)
    334c:	4798      	blx	r3
    334e:	b289      	uxth	r1, r1
    3350:	2900      	cmp	r1, #0
    3352:	d0d9      	beq.n	3308 <main+0x24>
    3354:	e7e3      	b.n	331e <main+0x3a>
    3356:	46c0      	nop			; (mov r8, r8)
    3358:	000031d5 	.word	0x000031d5
    335c:	2000029e 	.word	0x2000029e
    3360:	00003489 	.word	0x00003489
    3364:	00003fff 	.word	0x00003fff
    3368:	2000029c 	.word	0x2000029c
    336c:	000027f9 	.word	0x000027f9
    3370:	000023d5 	.word	0x000023d5
    3374:	000003f5 	.word	0x000003f5
    3378:	000021d9 	.word	0x000021d9

0000337c <__udivsi3>:
    337c:	2200      	movs	r2, #0
    337e:	0843      	lsrs	r3, r0, #1
    3380:	428b      	cmp	r3, r1
    3382:	d374      	bcc.n	346e <__udivsi3+0xf2>
    3384:	0903      	lsrs	r3, r0, #4
    3386:	428b      	cmp	r3, r1
    3388:	d35f      	bcc.n	344a <__udivsi3+0xce>
    338a:	0a03      	lsrs	r3, r0, #8
    338c:	428b      	cmp	r3, r1
    338e:	d344      	bcc.n	341a <__udivsi3+0x9e>
    3390:	0b03      	lsrs	r3, r0, #12
    3392:	428b      	cmp	r3, r1
    3394:	d328      	bcc.n	33e8 <__udivsi3+0x6c>
    3396:	0c03      	lsrs	r3, r0, #16
    3398:	428b      	cmp	r3, r1
    339a:	d30d      	bcc.n	33b8 <__udivsi3+0x3c>
    339c:	22ff      	movs	r2, #255	; 0xff
    339e:	0209      	lsls	r1, r1, #8
    33a0:	ba12      	rev	r2, r2
    33a2:	0c03      	lsrs	r3, r0, #16
    33a4:	428b      	cmp	r3, r1
    33a6:	d302      	bcc.n	33ae <__udivsi3+0x32>
    33a8:	1212      	asrs	r2, r2, #8
    33aa:	0209      	lsls	r1, r1, #8
    33ac:	d065      	beq.n	347a <__udivsi3+0xfe>
    33ae:	0b03      	lsrs	r3, r0, #12
    33b0:	428b      	cmp	r3, r1
    33b2:	d319      	bcc.n	33e8 <__udivsi3+0x6c>
    33b4:	e000      	b.n	33b8 <__udivsi3+0x3c>
    33b6:	0a09      	lsrs	r1, r1, #8
    33b8:	0bc3      	lsrs	r3, r0, #15
    33ba:	428b      	cmp	r3, r1
    33bc:	d301      	bcc.n	33c2 <__udivsi3+0x46>
    33be:	03cb      	lsls	r3, r1, #15
    33c0:	1ac0      	subs	r0, r0, r3
    33c2:	4152      	adcs	r2, r2
    33c4:	0b83      	lsrs	r3, r0, #14
    33c6:	428b      	cmp	r3, r1
    33c8:	d301      	bcc.n	33ce <__udivsi3+0x52>
    33ca:	038b      	lsls	r3, r1, #14
    33cc:	1ac0      	subs	r0, r0, r3
    33ce:	4152      	adcs	r2, r2
    33d0:	0b43      	lsrs	r3, r0, #13
    33d2:	428b      	cmp	r3, r1
    33d4:	d301      	bcc.n	33da <__udivsi3+0x5e>
    33d6:	034b      	lsls	r3, r1, #13
    33d8:	1ac0      	subs	r0, r0, r3
    33da:	4152      	adcs	r2, r2
    33dc:	0b03      	lsrs	r3, r0, #12
    33de:	428b      	cmp	r3, r1
    33e0:	d301      	bcc.n	33e6 <__udivsi3+0x6a>
    33e2:	030b      	lsls	r3, r1, #12
    33e4:	1ac0      	subs	r0, r0, r3
    33e6:	4152      	adcs	r2, r2
    33e8:	0ac3      	lsrs	r3, r0, #11
    33ea:	428b      	cmp	r3, r1
    33ec:	d301      	bcc.n	33f2 <__udivsi3+0x76>
    33ee:	02cb      	lsls	r3, r1, #11
    33f0:	1ac0      	subs	r0, r0, r3
    33f2:	4152      	adcs	r2, r2
    33f4:	0a83      	lsrs	r3, r0, #10
    33f6:	428b      	cmp	r3, r1
    33f8:	d301      	bcc.n	33fe <__udivsi3+0x82>
    33fa:	028b      	lsls	r3, r1, #10
    33fc:	1ac0      	subs	r0, r0, r3
    33fe:	4152      	adcs	r2, r2
    3400:	0a43      	lsrs	r3, r0, #9
    3402:	428b      	cmp	r3, r1
    3404:	d301      	bcc.n	340a <__udivsi3+0x8e>
    3406:	024b      	lsls	r3, r1, #9
    3408:	1ac0      	subs	r0, r0, r3
    340a:	4152      	adcs	r2, r2
    340c:	0a03      	lsrs	r3, r0, #8
    340e:	428b      	cmp	r3, r1
    3410:	d301      	bcc.n	3416 <__udivsi3+0x9a>
    3412:	020b      	lsls	r3, r1, #8
    3414:	1ac0      	subs	r0, r0, r3
    3416:	4152      	adcs	r2, r2
    3418:	d2cd      	bcs.n	33b6 <__udivsi3+0x3a>
    341a:	09c3      	lsrs	r3, r0, #7
    341c:	428b      	cmp	r3, r1
    341e:	d301      	bcc.n	3424 <__udivsi3+0xa8>
    3420:	01cb      	lsls	r3, r1, #7
    3422:	1ac0      	subs	r0, r0, r3
    3424:	4152      	adcs	r2, r2
    3426:	0983      	lsrs	r3, r0, #6
    3428:	428b      	cmp	r3, r1
    342a:	d301      	bcc.n	3430 <__udivsi3+0xb4>
    342c:	018b      	lsls	r3, r1, #6
    342e:	1ac0      	subs	r0, r0, r3
    3430:	4152      	adcs	r2, r2
    3432:	0943      	lsrs	r3, r0, #5
    3434:	428b      	cmp	r3, r1
    3436:	d301      	bcc.n	343c <__udivsi3+0xc0>
    3438:	014b      	lsls	r3, r1, #5
    343a:	1ac0      	subs	r0, r0, r3
    343c:	4152      	adcs	r2, r2
    343e:	0903      	lsrs	r3, r0, #4
    3440:	428b      	cmp	r3, r1
    3442:	d301      	bcc.n	3448 <__udivsi3+0xcc>
    3444:	010b      	lsls	r3, r1, #4
    3446:	1ac0      	subs	r0, r0, r3
    3448:	4152      	adcs	r2, r2
    344a:	08c3      	lsrs	r3, r0, #3
    344c:	428b      	cmp	r3, r1
    344e:	d301      	bcc.n	3454 <__udivsi3+0xd8>
    3450:	00cb      	lsls	r3, r1, #3
    3452:	1ac0      	subs	r0, r0, r3
    3454:	4152      	adcs	r2, r2
    3456:	0883      	lsrs	r3, r0, #2
    3458:	428b      	cmp	r3, r1
    345a:	d301      	bcc.n	3460 <__udivsi3+0xe4>
    345c:	008b      	lsls	r3, r1, #2
    345e:	1ac0      	subs	r0, r0, r3
    3460:	4152      	adcs	r2, r2
    3462:	0843      	lsrs	r3, r0, #1
    3464:	428b      	cmp	r3, r1
    3466:	d301      	bcc.n	346c <__udivsi3+0xf0>
    3468:	004b      	lsls	r3, r1, #1
    346a:	1ac0      	subs	r0, r0, r3
    346c:	4152      	adcs	r2, r2
    346e:	1a41      	subs	r1, r0, r1
    3470:	d200      	bcs.n	3474 <__udivsi3+0xf8>
    3472:	4601      	mov	r1, r0
    3474:	4152      	adcs	r2, r2
    3476:	4610      	mov	r0, r2
    3478:	4770      	bx	lr
    347a:	e7ff      	b.n	347c <__udivsi3+0x100>
    347c:	b501      	push	{r0, lr}
    347e:	2000      	movs	r0, #0
    3480:	f000 f806 	bl	3490 <__aeabi_idiv0>
    3484:	bd02      	pop	{r1, pc}
    3486:	46c0      	nop			; (mov r8, r8)

00003488 <__aeabi_uidivmod>:
    3488:	2900      	cmp	r1, #0
    348a:	d0f7      	beq.n	347c <__udivsi3+0x100>
    348c:	e776      	b.n	337c <__udivsi3>
    348e:	4770      	bx	lr

00003490 <__aeabi_idiv0>:
    3490:	4770      	bx	lr
    3492:	46c0      	nop			; (mov r8, r8)

00003494 <__aeabi_lmul>:
    3494:	b5f0      	push	{r4, r5, r6, r7, lr}
    3496:	46ce      	mov	lr, r9
    3498:	4647      	mov	r7, r8
    349a:	0415      	lsls	r5, r2, #16
    349c:	0c2d      	lsrs	r5, r5, #16
    349e:	002e      	movs	r6, r5
    34a0:	b580      	push	{r7, lr}
    34a2:	0407      	lsls	r7, r0, #16
    34a4:	0c14      	lsrs	r4, r2, #16
    34a6:	0c3f      	lsrs	r7, r7, #16
    34a8:	4699      	mov	r9, r3
    34aa:	0c03      	lsrs	r3, r0, #16
    34ac:	437e      	muls	r6, r7
    34ae:	435d      	muls	r5, r3
    34b0:	4367      	muls	r7, r4
    34b2:	4363      	muls	r3, r4
    34b4:	197f      	adds	r7, r7, r5
    34b6:	0c34      	lsrs	r4, r6, #16
    34b8:	19e4      	adds	r4, r4, r7
    34ba:	469c      	mov	ip, r3
    34bc:	42a5      	cmp	r5, r4
    34be:	d903      	bls.n	34c8 <__aeabi_lmul+0x34>
    34c0:	2380      	movs	r3, #128	; 0x80
    34c2:	025b      	lsls	r3, r3, #9
    34c4:	4698      	mov	r8, r3
    34c6:	44c4      	add	ip, r8
    34c8:	464b      	mov	r3, r9
    34ca:	4351      	muls	r1, r2
    34cc:	4343      	muls	r3, r0
    34ce:	0436      	lsls	r6, r6, #16
    34d0:	0c36      	lsrs	r6, r6, #16
    34d2:	0c25      	lsrs	r5, r4, #16
    34d4:	0424      	lsls	r4, r4, #16
    34d6:	4465      	add	r5, ip
    34d8:	19a4      	adds	r4, r4, r6
    34da:	1859      	adds	r1, r3, r1
    34dc:	1949      	adds	r1, r1, r5
    34de:	0020      	movs	r0, r4
    34e0:	bc0c      	pop	{r2, r3}
    34e2:	4690      	mov	r8, r2
    34e4:	4699      	mov	r9, r3
    34e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000034e8 <__libc_init_array>:
    34e8:	b570      	push	{r4, r5, r6, lr}
    34ea:	2600      	movs	r6, #0
    34ec:	4d0c      	ldr	r5, [pc, #48]	; (3520 <__libc_init_array+0x38>)
    34ee:	4c0d      	ldr	r4, [pc, #52]	; (3524 <__libc_init_array+0x3c>)
    34f0:	1b64      	subs	r4, r4, r5
    34f2:	10a4      	asrs	r4, r4, #2
    34f4:	42a6      	cmp	r6, r4
    34f6:	d109      	bne.n	350c <__libc_init_array+0x24>
    34f8:	2600      	movs	r6, #0
    34fa:	f003 fa57 	bl	69ac <_init>
    34fe:	4d0a      	ldr	r5, [pc, #40]	; (3528 <__libc_init_array+0x40>)
    3500:	4c0a      	ldr	r4, [pc, #40]	; (352c <__libc_init_array+0x44>)
    3502:	1b64      	subs	r4, r4, r5
    3504:	10a4      	asrs	r4, r4, #2
    3506:	42a6      	cmp	r6, r4
    3508:	d105      	bne.n	3516 <__libc_init_array+0x2e>
    350a:	bd70      	pop	{r4, r5, r6, pc}
    350c:	00b3      	lsls	r3, r6, #2
    350e:	58eb      	ldr	r3, [r5, r3]
    3510:	4798      	blx	r3
    3512:	3601      	adds	r6, #1
    3514:	e7ee      	b.n	34f4 <__libc_init_array+0xc>
    3516:	00b3      	lsls	r3, r6, #2
    3518:	58eb      	ldr	r3, [r5, r3]
    351a:	4798      	blx	r3
    351c:	3601      	adds	r6, #1
    351e:	e7f2      	b.n	3506 <__libc_init_array+0x1e>
    3520:	000069b8 	.word	0x000069b8
    3524:	000069b8 	.word	0x000069b8
    3528:	000069b8 	.word	0x000069b8
    352c:	000069bc 	.word	0x000069bc

00003530 <__itoa>:
    3530:	1e93      	subs	r3, r2, #2
    3532:	b510      	push	{r4, lr}
    3534:	000c      	movs	r4, r1
    3536:	2b22      	cmp	r3, #34	; 0x22
    3538:	d904      	bls.n	3544 <__itoa+0x14>
    353a:	2300      	movs	r3, #0
    353c:	001c      	movs	r4, r3
    353e:	700b      	strb	r3, [r1, #0]
    3540:	0020      	movs	r0, r4
    3542:	bd10      	pop	{r4, pc}
    3544:	2a0a      	cmp	r2, #10
    3546:	d109      	bne.n	355c <__itoa+0x2c>
    3548:	2800      	cmp	r0, #0
    354a:	da07      	bge.n	355c <__itoa+0x2c>
    354c:	232d      	movs	r3, #45	; 0x2d
    354e:	700b      	strb	r3, [r1, #0]
    3550:	2101      	movs	r1, #1
    3552:	4240      	negs	r0, r0
    3554:	1861      	adds	r1, r4, r1
    3556:	f000 f96f 	bl	3838 <__utoa>
    355a:	e7f1      	b.n	3540 <__itoa+0x10>
    355c:	2100      	movs	r1, #0
    355e:	e7f9      	b.n	3554 <__itoa+0x24>

00003560 <itoa>:
    3560:	b510      	push	{r4, lr}
    3562:	f7ff ffe5 	bl	3530 <__itoa>
    3566:	bd10      	pop	{r4, pc}

00003568 <memcpy>:
    3568:	2300      	movs	r3, #0
    356a:	b510      	push	{r4, lr}
    356c:	429a      	cmp	r2, r3
    356e:	d100      	bne.n	3572 <memcpy+0xa>
    3570:	bd10      	pop	{r4, pc}
    3572:	5ccc      	ldrb	r4, [r1, r3]
    3574:	54c4      	strb	r4, [r0, r3]
    3576:	3301      	adds	r3, #1
    3578:	e7f8      	b.n	356c <memcpy+0x4>

0000357a <memset>:
    357a:	0003      	movs	r3, r0
    357c:	1882      	adds	r2, r0, r2
    357e:	4293      	cmp	r3, r2
    3580:	d100      	bne.n	3584 <memset+0xa>
    3582:	4770      	bx	lr
    3584:	7019      	strb	r1, [r3, #0]
    3586:	3301      	adds	r3, #1
    3588:	e7f9      	b.n	357e <memset+0x4>
	...

0000358c <iprintf>:
    358c:	b40f      	push	{r0, r1, r2, r3}
    358e:	4b0b      	ldr	r3, [pc, #44]	; (35bc <iprintf+0x30>)
    3590:	b513      	push	{r0, r1, r4, lr}
    3592:	681c      	ldr	r4, [r3, #0]
    3594:	2c00      	cmp	r4, #0
    3596:	d005      	beq.n	35a4 <iprintf+0x18>
    3598:	69a3      	ldr	r3, [r4, #24]
    359a:	2b00      	cmp	r3, #0
    359c:	d102      	bne.n	35a4 <iprintf+0x18>
    359e:	0020      	movs	r0, r4
    35a0:	f000 fa7c 	bl	3a9c <__sinit>
    35a4:	ab05      	add	r3, sp, #20
    35a6:	9a04      	ldr	r2, [sp, #16]
    35a8:	68a1      	ldr	r1, [r4, #8]
    35aa:	0020      	movs	r0, r4
    35ac:	9301      	str	r3, [sp, #4]
    35ae:	f000 fc51 	bl	3e54 <_vfiprintf_r>
    35b2:	bc16      	pop	{r1, r2, r4}
    35b4:	bc08      	pop	{r3}
    35b6:	b004      	add	sp, #16
    35b8:	4718      	bx	r3
    35ba:	46c0      	nop			; (mov r8, r8)
    35bc:	20000158 	.word	0x20000158

000035c0 <putchar>:
    35c0:	4b08      	ldr	r3, [pc, #32]	; (35e4 <putchar+0x24>)
    35c2:	b570      	push	{r4, r5, r6, lr}
    35c4:	681c      	ldr	r4, [r3, #0]
    35c6:	0005      	movs	r5, r0
    35c8:	2c00      	cmp	r4, #0
    35ca:	d005      	beq.n	35d8 <putchar+0x18>
    35cc:	69a3      	ldr	r3, [r4, #24]
    35ce:	2b00      	cmp	r3, #0
    35d0:	d102      	bne.n	35d8 <putchar+0x18>
    35d2:	0020      	movs	r0, r4
    35d4:	f000 fa62 	bl	3a9c <__sinit>
    35d8:	0029      	movs	r1, r5
    35da:	68a2      	ldr	r2, [r4, #8]
    35dc:	0020      	movs	r0, r4
    35de:	f000 fedd 	bl	439c <_putc_r>
    35e2:	bd70      	pop	{r4, r5, r6, pc}
    35e4:	20000158 	.word	0x20000158

000035e8 <srand>:
    35e8:	4b10      	ldr	r3, [pc, #64]	; (362c <srand+0x44>)
    35ea:	b570      	push	{r4, r5, r6, lr}
    35ec:	681c      	ldr	r4, [r3, #0]
    35ee:	0005      	movs	r5, r0
    35f0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    35f2:	2b00      	cmp	r3, #0
    35f4:	d115      	bne.n	3622 <srand+0x3a>
    35f6:	2018      	movs	r0, #24
    35f8:	f000 fb52 	bl	3ca0 <malloc>
    35fc:	4b0c      	ldr	r3, [pc, #48]	; (3630 <srand+0x48>)
    35fe:	63a0      	str	r0, [r4, #56]	; 0x38
    3600:	8003      	strh	r3, [r0, #0]
    3602:	4b0c      	ldr	r3, [pc, #48]	; (3634 <srand+0x4c>)
    3604:	2201      	movs	r2, #1
    3606:	8043      	strh	r3, [r0, #2]
    3608:	4b0b      	ldr	r3, [pc, #44]	; (3638 <srand+0x50>)
    360a:	8083      	strh	r3, [r0, #4]
    360c:	4b0b      	ldr	r3, [pc, #44]	; (363c <srand+0x54>)
    360e:	80c3      	strh	r3, [r0, #6]
    3610:	4b0b      	ldr	r3, [pc, #44]	; (3640 <srand+0x58>)
    3612:	8103      	strh	r3, [r0, #8]
    3614:	2305      	movs	r3, #5
    3616:	8143      	strh	r3, [r0, #10]
    3618:	3306      	adds	r3, #6
    361a:	8183      	strh	r3, [r0, #12]
    361c:	2300      	movs	r3, #0
    361e:	6102      	str	r2, [r0, #16]
    3620:	6143      	str	r3, [r0, #20]
    3622:	2200      	movs	r2, #0
    3624:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    3626:	611d      	str	r5, [r3, #16]
    3628:	615a      	str	r2, [r3, #20]
    362a:	bd70      	pop	{r4, r5, r6, pc}
    362c:	20000158 	.word	0x20000158
    3630:	0000330e 	.word	0x0000330e
    3634:	ffffabcd 	.word	0xffffabcd
    3638:	00001234 	.word	0x00001234
    363c:	ffffe66d 	.word	0xffffe66d
    3640:	ffffdeec 	.word	0xffffdeec

00003644 <rand>:
    3644:	4b15      	ldr	r3, [pc, #84]	; (369c <rand+0x58>)
    3646:	b510      	push	{r4, lr}
    3648:	681c      	ldr	r4, [r3, #0]
    364a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    364c:	2b00      	cmp	r3, #0
    364e:	d115      	bne.n	367c <rand+0x38>
    3650:	2018      	movs	r0, #24
    3652:	f000 fb25 	bl	3ca0 <malloc>
    3656:	4b12      	ldr	r3, [pc, #72]	; (36a0 <rand+0x5c>)
    3658:	63a0      	str	r0, [r4, #56]	; 0x38
    365a:	8003      	strh	r3, [r0, #0]
    365c:	4b11      	ldr	r3, [pc, #68]	; (36a4 <rand+0x60>)
    365e:	2201      	movs	r2, #1
    3660:	8043      	strh	r3, [r0, #2]
    3662:	4b11      	ldr	r3, [pc, #68]	; (36a8 <rand+0x64>)
    3664:	8083      	strh	r3, [r0, #4]
    3666:	4b11      	ldr	r3, [pc, #68]	; (36ac <rand+0x68>)
    3668:	80c3      	strh	r3, [r0, #6]
    366a:	4b11      	ldr	r3, [pc, #68]	; (36b0 <rand+0x6c>)
    366c:	8103      	strh	r3, [r0, #8]
    366e:	2305      	movs	r3, #5
    3670:	8143      	strh	r3, [r0, #10]
    3672:	3306      	adds	r3, #6
    3674:	8183      	strh	r3, [r0, #12]
    3676:	2300      	movs	r3, #0
    3678:	6102      	str	r2, [r0, #16]
    367a:	6143      	str	r3, [r0, #20]
    367c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
    367e:	4a0d      	ldr	r2, [pc, #52]	; (36b4 <rand+0x70>)
    3680:	6920      	ldr	r0, [r4, #16]
    3682:	6961      	ldr	r1, [r4, #20]
    3684:	4b0c      	ldr	r3, [pc, #48]	; (36b8 <rand+0x74>)
    3686:	f7ff ff05 	bl	3494 <__aeabi_lmul>
    368a:	2201      	movs	r2, #1
    368c:	2300      	movs	r3, #0
    368e:	1880      	adds	r0, r0, r2
    3690:	4159      	adcs	r1, r3
    3692:	6120      	str	r0, [r4, #16]
    3694:	6161      	str	r1, [r4, #20]
    3696:	0048      	lsls	r0, r1, #1
    3698:	0840      	lsrs	r0, r0, #1
    369a:	bd10      	pop	{r4, pc}
    369c:	20000158 	.word	0x20000158
    36a0:	0000330e 	.word	0x0000330e
    36a4:	ffffabcd 	.word	0xffffabcd
    36a8:	00001234 	.word	0x00001234
    36ac:	ffffe66d 	.word	0xffffe66d
    36b0:	ffffdeec 	.word	0xffffdeec
    36b4:	4c957f2d 	.word	0x4c957f2d
    36b8:	5851f42d 	.word	0x5851f42d

000036bc <setbuf>:
    36bc:	424a      	negs	r2, r1
    36be:	414a      	adcs	r2, r1
    36c0:	2380      	movs	r3, #128	; 0x80
    36c2:	b510      	push	{r4, lr}
    36c4:	0052      	lsls	r2, r2, #1
    36c6:	00db      	lsls	r3, r3, #3
    36c8:	f000 f802 	bl	36d0 <setvbuf>
    36cc:	bd10      	pop	{r4, pc}
	...

000036d0 <setvbuf>:
    36d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    36d2:	001d      	movs	r5, r3
    36d4:	4b4f      	ldr	r3, [pc, #316]	; (3814 <setvbuf+0x144>)
    36d6:	b085      	sub	sp, #20
    36d8:	681e      	ldr	r6, [r3, #0]
    36da:	0004      	movs	r4, r0
    36dc:	000f      	movs	r7, r1
    36de:	9200      	str	r2, [sp, #0]
    36e0:	2e00      	cmp	r6, #0
    36e2:	d005      	beq.n	36f0 <setvbuf+0x20>
    36e4:	69b3      	ldr	r3, [r6, #24]
    36e6:	2b00      	cmp	r3, #0
    36e8:	d102      	bne.n	36f0 <setvbuf+0x20>
    36ea:	0030      	movs	r0, r6
    36ec:	f000 f9d6 	bl	3a9c <__sinit>
    36f0:	4b49      	ldr	r3, [pc, #292]	; (3818 <setvbuf+0x148>)
    36f2:	429c      	cmp	r4, r3
    36f4:	d150      	bne.n	3798 <setvbuf+0xc8>
    36f6:	6874      	ldr	r4, [r6, #4]
    36f8:	9b00      	ldr	r3, [sp, #0]
    36fa:	2b02      	cmp	r3, #2
    36fc:	d005      	beq.n	370a <setvbuf+0x3a>
    36fe:	2b01      	cmp	r3, #1
    3700:	d900      	bls.n	3704 <setvbuf+0x34>
    3702:	e084      	b.n	380e <setvbuf+0x13e>
    3704:	2d00      	cmp	r5, #0
    3706:	da00      	bge.n	370a <setvbuf+0x3a>
    3708:	e081      	b.n	380e <setvbuf+0x13e>
    370a:	0021      	movs	r1, r4
    370c:	0030      	movs	r0, r6
    370e:	f000 f957 	bl	39c0 <_fflush_r>
    3712:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3714:	2900      	cmp	r1, #0
    3716:	d008      	beq.n	372a <setvbuf+0x5a>
    3718:	0023      	movs	r3, r4
    371a:	3344      	adds	r3, #68	; 0x44
    371c:	4299      	cmp	r1, r3
    371e:	d002      	beq.n	3726 <setvbuf+0x56>
    3720:	0030      	movs	r0, r6
    3722:	f000 fac7 	bl	3cb4 <_free_r>
    3726:	2300      	movs	r3, #0
    3728:	6363      	str	r3, [r4, #52]	; 0x34
    372a:	2300      	movs	r3, #0
    372c:	61a3      	str	r3, [r4, #24]
    372e:	6063      	str	r3, [r4, #4]
    3730:	89a3      	ldrh	r3, [r4, #12]
    3732:	061b      	lsls	r3, r3, #24
    3734:	d503      	bpl.n	373e <setvbuf+0x6e>
    3736:	6921      	ldr	r1, [r4, #16]
    3738:	0030      	movs	r0, r6
    373a:	f000 fabb 	bl	3cb4 <_free_r>
    373e:	89a3      	ldrh	r3, [r4, #12]
    3740:	4a36      	ldr	r2, [pc, #216]	; (381c <setvbuf+0x14c>)
    3742:	4013      	ands	r3, r2
    3744:	81a3      	strh	r3, [r4, #12]
    3746:	9b00      	ldr	r3, [sp, #0]
    3748:	2b02      	cmp	r3, #2
    374a:	d05a      	beq.n	3802 <setvbuf+0x132>
    374c:	ab03      	add	r3, sp, #12
    374e:	aa02      	add	r2, sp, #8
    3750:	0021      	movs	r1, r4
    3752:	0030      	movs	r0, r6
    3754:	f000 fa38 	bl	3bc8 <__swhatbuf_r>
    3758:	89a3      	ldrh	r3, [r4, #12]
    375a:	4318      	orrs	r0, r3
    375c:	81a0      	strh	r0, [r4, #12]
    375e:	2d00      	cmp	r5, #0
    3760:	d124      	bne.n	37ac <setvbuf+0xdc>
    3762:	9d02      	ldr	r5, [sp, #8]
    3764:	0028      	movs	r0, r5
    3766:	f000 fa9b 	bl	3ca0 <malloc>
    376a:	9501      	str	r5, [sp, #4]
    376c:	1e07      	subs	r7, r0, #0
    376e:	d142      	bne.n	37f6 <setvbuf+0x126>
    3770:	9b02      	ldr	r3, [sp, #8]
    3772:	9301      	str	r3, [sp, #4]
    3774:	42ab      	cmp	r3, r5
    3776:	d139      	bne.n	37ec <setvbuf+0x11c>
    3778:	2001      	movs	r0, #1
    377a:	4240      	negs	r0, r0
    377c:	2302      	movs	r3, #2
    377e:	89a2      	ldrh	r2, [r4, #12]
    3780:	4313      	orrs	r3, r2
    3782:	81a3      	strh	r3, [r4, #12]
    3784:	2300      	movs	r3, #0
    3786:	60a3      	str	r3, [r4, #8]
    3788:	0023      	movs	r3, r4
    378a:	3347      	adds	r3, #71	; 0x47
    378c:	6023      	str	r3, [r4, #0]
    378e:	6123      	str	r3, [r4, #16]
    3790:	2301      	movs	r3, #1
    3792:	6163      	str	r3, [r4, #20]
    3794:	b005      	add	sp, #20
    3796:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3798:	4b21      	ldr	r3, [pc, #132]	; (3820 <setvbuf+0x150>)
    379a:	429c      	cmp	r4, r3
    379c:	d101      	bne.n	37a2 <setvbuf+0xd2>
    379e:	68b4      	ldr	r4, [r6, #8]
    37a0:	e7aa      	b.n	36f8 <setvbuf+0x28>
    37a2:	4b20      	ldr	r3, [pc, #128]	; (3824 <setvbuf+0x154>)
    37a4:	429c      	cmp	r4, r3
    37a6:	d1a7      	bne.n	36f8 <setvbuf+0x28>
    37a8:	68f4      	ldr	r4, [r6, #12]
    37aa:	e7a5      	b.n	36f8 <setvbuf+0x28>
    37ac:	2f00      	cmp	r7, #0
    37ae:	d0d9      	beq.n	3764 <setvbuf+0x94>
    37b0:	69b3      	ldr	r3, [r6, #24]
    37b2:	2b00      	cmp	r3, #0
    37b4:	d102      	bne.n	37bc <setvbuf+0xec>
    37b6:	0030      	movs	r0, r6
    37b8:	f000 f970 	bl	3a9c <__sinit>
    37bc:	9b00      	ldr	r3, [sp, #0]
    37be:	2b01      	cmp	r3, #1
    37c0:	d103      	bne.n	37ca <setvbuf+0xfa>
    37c2:	89a3      	ldrh	r3, [r4, #12]
    37c4:	9a00      	ldr	r2, [sp, #0]
    37c6:	431a      	orrs	r2, r3
    37c8:	81a2      	strh	r2, [r4, #12]
    37ca:	2008      	movs	r0, #8
    37cc:	89a3      	ldrh	r3, [r4, #12]
    37ce:	6027      	str	r7, [r4, #0]
    37d0:	6127      	str	r7, [r4, #16]
    37d2:	6165      	str	r5, [r4, #20]
    37d4:	4018      	ands	r0, r3
    37d6:	d018      	beq.n	380a <setvbuf+0x13a>
    37d8:	2001      	movs	r0, #1
    37da:	4018      	ands	r0, r3
    37dc:	2300      	movs	r3, #0
    37de:	4298      	cmp	r0, r3
    37e0:	d011      	beq.n	3806 <setvbuf+0x136>
    37e2:	426d      	negs	r5, r5
    37e4:	60a3      	str	r3, [r4, #8]
    37e6:	61a5      	str	r5, [r4, #24]
    37e8:	0018      	movs	r0, r3
    37ea:	e7d3      	b.n	3794 <setvbuf+0xc4>
    37ec:	9801      	ldr	r0, [sp, #4]
    37ee:	f000 fa57 	bl	3ca0 <malloc>
    37f2:	1e07      	subs	r7, r0, #0
    37f4:	d0c0      	beq.n	3778 <setvbuf+0xa8>
    37f6:	2380      	movs	r3, #128	; 0x80
    37f8:	89a2      	ldrh	r2, [r4, #12]
    37fa:	9d01      	ldr	r5, [sp, #4]
    37fc:	4313      	orrs	r3, r2
    37fe:	81a3      	strh	r3, [r4, #12]
    3800:	e7d6      	b.n	37b0 <setvbuf+0xe0>
    3802:	2000      	movs	r0, #0
    3804:	e7ba      	b.n	377c <setvbuf+0xac>
    3806:	60a5      	str	r5, [r4, #8]
    3808:	e7c4      	b.n	3794 <setvbuf+0xc4>
    380a:	60a0      	str	r0, [r4, #8]
    380c:	e7c2      	b.n	3794 <setvbuf+0xc4>
    380e:	2001      	movs	r0, #1
    3810:	4240      	negs	r0, r0
    3812:	e7bf      	b.n	3794 <setvbuf+0xc4>
    3814:	20000158 	.word	0x20000158
    3818:	00006938 	.word	0x00006938
    381c:	fffff35c 	.word	0xfffff35c
    3820:	00006958 	.word	0x00006958
    3824:	00006918 	.word	0x00006918

00003828 <strlen>:
    3828:	2300      	movs	r3, #0
    382a:	5cc2      	ldrb	r2, [r0, r3]
    382c:	3301      	adds	r3, #1
    382e:	2a00      	cmp	r2, #0
    3830:	d1fb      	bne.n	382a <strlen+0x2>
    3832:	1e58      	subs	r0, r3, #1
    3834:	4770      	bx	lr
	...

00003838 <__utoa>:
    3838:	b5f0      	push	{r4, r5, r6, r7, lr}
    383a:	0017      	movs	r7, r2
    383c:	b08f      	sub	sp, #60	; 0x3c
    383e:	2225      	movs	r2, #37	; 0x25
    3840:	0006      	movs	r6, r0
    3842:	000d      	movs	r5, r1
    3844:	a804      	add	r0, sp, #16
    3846:	4918      	ldr	r1, [pc, #96]	; (38a8 <__utoa+0x70>)
    3848:	f7ff fe8e 	bl	3568 <memcpy>
    384c:	aa04      	add	r2, sp, #16
    384e:	1ebb      	subs	r3, r7, #2
    3850:	2400      	movs	r4, #0
    3852:	9203      	str	r2, [sp, #12]
    3854:	2b22      	cmp	r3, #34	; 0x22
    3856:	d905      	bls.n	3864 <__utoa+0x2c>
    3858:	702c      	strb	r4, [r5, #0]
    385a:	0025      	movs	r5, r4
    385c:	0028      	movs	r0, r5
    385e:	b00f      	add	sp, #60	; 0x3c
    3860:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3862:	9c01      	ldr	r4, [sp, #4]
    3864:	1c63      	adds	r3, r4, #1
    3866:	9301      	str	r3, [sp, #4]
    3868:	18eb      	adds	r3, r5, r3
    386a:	9300      	str	r3, [sp, #0]
    386c:	0030      	movs	r0, r6
    386e:	3b01      	subs	r3, #1
    3870:	0039      	movs	r1, r7
    3872:	9302      	str	r3, [sp, #8]
    3874:	f7ff fe08 	bl	3488 <__aeabi_uidivmod>
    3878:	9b03      	ldr	r3, [sp, #12]
    387a:	9a02      	ldr	r2, [sp, #8]
    387c:	5c5b      	ldrb	r3, [r3, r1]
    387e:	0030      	movs	r0, r6
    3880:	7013      	strb	r3, [r2, #0]
    3882:	0039      	movs	r1, r7
    3884:	f7ff fd7a 	bl	337c <__udivsi3>
    3888:	1e06      	subs	r6, r0, #0
    388a:	d1ea      	bne.n	3862 <__utoa+0x2a>
    388c:	9b00      	ldr	r3, [sp, #0]
    388e:	7018      	strb	r0, [r3, #0]
    3890:	002b      	movs	r3, r5
    3892:	1b5a      	subs	r2, r3, r5
    3894:	4294      	cmp	r4, r2
    3896:	dde1      	ble.n	385c <__utoa+0x24>
    3898:	781a      	ldrb	r2, [r3, #0]
    389a:	5d29      	ldrb	r1, [r5, r4]
    389c:	7019      	strb	r1, [r3, #0]
    389e:	552a      	strb	r2, [r5, r4]
    38a0:	3301      	adds	r3, #1
    38a2:	3c01      	subs	r4, #1
    38a4:	e7f5      	b.n	3892 <__utoa+0x5a>
    38a6:	46c0      	nop			; (mov r8, r8)
    38a8:	000068f0 	.word	0x000068f0

000038ac <__sflush_r>:
    38ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    38ae:	898a      	ldrh	r2, [r1, #12]
    38b0:	0005      	movs	r5, r0
    38b2:	000c      	movs	r4, r1
    38b4:	0713      	lsls	r3, r2, #28
    38b6:	d460      	bmi.n	397a <__sflush_r+0xce>
    38b8:	684b      	ldr	r3, [r1, #4]
    38ba:	2b00      	cmp	r3, #0
    38bc:	dc04      	bgt.n	38c8 <__sflush_r+0x1c>
    38be:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    38c0:	2b00      	cmp	r3, #0
    38c2:	dc01      	bgt.n	38c8 <__sflush_r+0x1c>
    38c4:	2000      	movs	r0, #0
    38c6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    38c8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    38ca:	2f00      	cmp	r7, #0
    38cc:	d0fa      	beq.n	38c4 <__sflush_r+0x18>
    38ce:	2300      	movs	r3, #0
    38d0:	682e      	ldr	r6, [r5, #0]
    38d2:	602b      	str	r3, [r5, #0]
    38d4:	2380      	movs	r3, #128	; 0x80
    38d6:	015b      	lsls	r3, r3, #5
    38d8:	401a      	ands	r2, r3
    38da:	d034      	beq.n	3946 <__sflush_r+0x9a>
    38dc:	6d60      	ldr	r0, [r4, #84]	; 0x54
    38de:	89a3      	ldrh	r3, [r4, #12]
    38e0:	075b      	lsls	r3, r3, #29
    38e2:	d506      	bpl.n	38f2 <__sflush_r+0x46>
    38e4:	6863      	ldr	r3, [r4, #4]
    38e6:	1ac0      	subs	r0, r0, r3
    38e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
    38ea:	2b00      	cmp	r3, #0
    38ec:	d001      	beq.n	38f2 <__sflush_r+0x46>
    38ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
    38f0:	1ac0      	subs	r0, r0, r3
    38f2:	0002      	movs	r2, r0
    38f4:	6a21      	ldr	r1, [r4, #32]
    38f6:	2300      	movs	r3, #0
    38f8:	0028      	movs	r0, r5
    38fa:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    38fc:	47b8      	blx	r7
    38fe:	89a1      	ldrh	r1, [r4, #12]
    3900:	1c43      	adds	r3, r0, #1
    3902:	d106      	bne.n	3912 <__sflush_r+0x66>
    3904:	682b      	ldr	r3, [r5, #0]
    3906:	2b1d      	cmp	r3, #29
    3908:	d831      	bhi.n	396e <__sflush_r+0xc2>
    390a:	4a2c      	ldr	r2, [pc, #176]	; (39bc <__sflush_r+0x110>)
    390c:	40da      	lsrs	r2, r3
    390e:	07d3      	lsls	r3, r2, #31
    3910:	d52d      	bpl.n	396e <__sflush_r+0xc2>
    3912:	2300      	movs	r3, #0
    3914:	6063      	str	r3, [r4, #4]
    3916:	6923      	ldr	r3, [r4, #16]
    3918:	6023      	str	r3, [r4, #0]
    391a:	04cb      	lsls	r3, r1, #19
    391c:	d505      	bpl.n	392a <__sflush_r+0x7e>
    391e:	1c43      	adds	r3, r0, #1
    3920:	d102      	bne.n	3928 <__sflush_r+0x7c>
    3922:	682b      	ldr	r3, [r5, #0]
    3924:	2b00      	cmp	r3, #0
    3926:	d100      	bne.n	392a <__sflush_r+0x7e>
    3928:	6560      	str	r0, [r4, #84]	; 0x54
    392a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    392c:	602e      	str	r6, [r5, #0]
    392e:	2900      	cmp	r1, #0
    3930:	d0c8      	beq.n	38c4 <__sflush_r+0x18>
    3932:	0023      	movs	r3, r4
    3934:	3344      	adds	r3, #68	; 0x44
    3936:	4299      	cmp	r1, r3
    3938:	d002      	beq.n	3940 <__sflush_r+0x94>
    393a:	0028      	movs	r0, r5
    393c:	f000 f9ba 	bl	3cb4 <_free_r>
    3940:	2000      	movs	r0, #0
    3942:	6360      	str	r0, [r4, #52]	; 0x34
    3944:	e7bf      	b.n	38c6 <__sflush_r+0x1a>
    3946:	2301      	movs	r3, #1
    3948:	6a21      	ldr	r1, [r4, #32]
    394a:	0028      	movs	r0, r5
    394c:	47b8      	blx	r7
    394e:	1c43      	adds	r3, r0, #1
    3950:	d1c5      	bne.n	38de <__sflush_r+0x32>
    3952:	682b      	ldr	r3, [r5, #0]
    3954:	2b00      	cmp	r3, #0
    3956:	d0c2      	beq.n	38de <__sflush_r+0x32>
    3958:	2b1d      	cmp	r3, #29
    395a:	d001      	beq.n	3960 <__sflush_r+0xb4>
    395c:	2b16      	cmp	r3, #22
    395e:	d101      	bne.n	3964 <__sflush_r+0xb8>
    3960:	602e      	str	r6, [r5, #0]
    3962:	e7af      	b.n	38c4 <__sflush_r+0x18>
    3964:	2340      	movs	r3, #64	; 0x40
    3966:	89a2      	ldrh	r2, [r4, #12]
    3968:	4313      	orrs	r3, r2
    396a:	81a3      	strh	r3, [r4, #12]
    396c:	e7ab      	b.n	38c6 <__sflush_r+0x1a>
    396e:	2340      	movs	r3, #64	; 0x40
    3970:	430b      	orrs	r3, r1
    3972:	2001      	movs	r0, #1
    3974:	81a3      	strh	r3, [r4, #12]
    3976:	4240      	negs	r0, r0
    3978:	e7a5      	b.n	38c6 <__sflush_r+0x1a>
    397a:	690f      	ldr	r7, [r1, #16]
    397c:	2f00      	cmp	r7, #0
    397e:	d0a1      	beq.n	38c4 <__sflush_r+0x18>
    3980:	680b      	ldr	r3, [r1, #0]
    3982:	600f      	str	r7, [r1, #0]
    3984:	1bdb      	subs	r3, r3, r7
    3986:	9301      	str	r3, [sp, #4]
    3988:	2300      	movs	r3, #0
    398a:	0792      	lsls	r2, r2, #30
    398c:	d100      	bne.n	3990 <__sflush_r+0xe4>
    398e:	694b      	ldr	r3, [r1, #20]
    3990:	60a3      	str	r3, [r4, #8]
    3992:	9b01      	ldr	r3, [sp, #4]
    3994:	2b00      	cmp	r3, #0
    3996:	dc00      	bgt.n	399a <__sflush_r+0xee>
    3998:	e794      	b.n	38c4 <__sflush_r+0x18>
    399a:	9b01      	ldr	r3, [sp, #4]
    399c:	003a      	movs	r2, r7
    399e:	6a21      	ldr	r1, [r4, #32]
    39a0:	0028      	movs	r0, r5
    39a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    39a4:	47b0      	blx	r6
    39a6:	2800      	cmp	r0, #0
    39a8:	dc03      	bgt.n	39b2 <__sflush_r+0x106>
    39aa:	2340      	movs	r3, #64	; 0x40
    39ac:	89a2      	ldrh	r2, [r4, #12]
    39ae:	4313      	orrs	r3, r2
    39b0:	e7df      	b.n	3972 <__sflush_r+0xc6>
    39b2:	9b01      	ldr	r3, [sp, #4]
    39b4:	183f      	adds	r7, r7, r0
    39b6:	1a1b      	subs	r3, r3, r0
    39b8:	9301      	str	r3, [sp, #4]
    39ba:	e7ea      	b.n	3992 <__sflush_r+0xe6>
    39bc:	20400001 	.word	0x20400001

000039c0 <_fflush_r>:
    39c0:	690b      	ldr	r3, [r1, #16]
    39c2:	b570      	push	{r4, r5, r6, lr}
    39c4:	0005      	movs	r5, r0
    39c6:	000c      	movs	r4, r1
    39c8:	2b00      	cmp	r3, #0
    39ca:	d101      	bne.n	39d0 <_fflush_r+0x10>
    39cc:	2000      	movs	r0, #0
    39ce:	bd70      	pop	{r4, r5, r6, pc}
    39d0:	2800      	cmp	r0, #0
    39d2:	d004      	beq.n	39de <_fflush_r+0x1e>
    39d4:	6983      	ldr	r3, [r0, #24]
    39d6:	2b00      	cmp	r3, #0
    39d8:	d101      	bne.n	39de <_fflush_r+0x1e>
    39da:	f000 f85f 	bl	3a9c <__sinit>
    39de:	4b0b      	ldr	r3, [pc, #44]	; (3a0c <_fflush_r+0x4c>)
    39e0:	429c      	cmp	r4, r3
    39e2:	d109      	bne.n	39f8 <_fflush_r+0x38>
    39e4:	686c      	ldr	r4, [r5, #4]
    39e6:	220c      	movs	r2, #12
    39e8:	5ea3      	ldrsh	r3, [r4, r2]
    39ea:	2b00      	cmp	r3, #0
    39ec:	d0ee      	beq.n	39cc <_fflush_r+0xc>
    39ee:	0021      	movs	r1, r4
    39f0:	0028      	movs	r0, r5
    39f2:	f7ff ff5b 	bl	38ac <__sflush_r>
    39f6:	e7ea      	b.n	39ce <_fflush_r+0xe>
    39f8:	4b05      	ldr	r3, [pc, #20]	; (3a10 <_fflush_r+0x50>)
    39fa:	429c      	cmp	r4, r3
    39fc:	d101      	bne.n	3a02 <_fflush_r+0x42>
    39fe:	68ac      	ldr	r4, [r5, #8]
    3a00:	e7f1      	b.n	39e6 <_fflush_r+0x26>
    3a02:	4b04      	ldr	r3, [pc, #16]	; (3a14 <_fflush_r+0x54>)
    3a04:	429c      	cmp	r4, r3
    3a06:	d1ee      	bne.n	39e6 <_fflush_r+0x26>
    3a08:	68ec      	ldr	r4, [r5, #12]
    3a0a:	e7ec      	b.n	39e6 <_fflush_r+0x26>
    3a0c:	00006938 	.word	0x00006938
    3a10:	00006958 	.word	0x00006958
    3a14:	00006918 	.word	0x00006918

00003a18 <_cleanup_r>:
    3a18:	b510      	push	{r4, lr}
    3a1a:	4902      	ldr	r1, [pc, #8]	; (3a24 <_cleanup_r+0xc>)
    3a1c:	f000 f8b2 	bl	3b84 <_fwalk_reent>
    3a20:	bd10      	pop	{r4, pc}
    3a22:	46c0      	nop			; (mov r8, r8)
    3a24:	000039c1 	.word	0x000039c1

00003a28 <std.isra.0>:
    3a28:	2300      	movs	r3, #0
    3a2a:	b510      	push	{r4, lr}
    3a2c:	0004      	movs	r4, r0
    3a2e:	6003      	str	r3, [r0, #0]
    3a30:	6043      	str	r3, [r0, #4]
    3a32:	6083      	str	r3, [r0, #8]
    3a34:	8181      	strh	r1, [r0, #12]
    3a36:	6643      	str	r3, [r0, #100]	; 0x64
    3a38:	81c2      	strh	r2, [r0, #14]
    3a3a:	6103      	str	r3, [r0, #16]
    3a3c:	6143      	str	r3, [r0, #20]
    3a3e:	6183      	str	r3, [r0, #24]
    3a40:	0019      	movs	r1, r3
    3a42:	2208      	movs	r2, #8
    3a44:	305c      	adds	r0, #92	; 0x5c
    3a46:	f7ff fd98 	bl	357a <memset>
    3a4a:	4b05      	ldr	r3, [pc, #20]	; (3a60 <std.isra.0+0x38>)
    3a4c:	6224      	str	r4, [r4, #32]
    3a4e:	6263      	str	r3, [r4, #36]	; 0x24
    3a50:	4b04      	ldr	r3, [pc, #16]	; (3a64 <std.isra.0+0x3c>)
    3a52:	62a3      	str	r3, [r4, #40]	; 0x28
    3a54:	4b04      	ldr	r3, [pc, #16]	; (3a68 <std.isra.0+0x40>)
    3a56:	62e3      	str	r3, [r4, #44]	; 0x2c
    3a58:	4b04      	ldr	r3, [pc, #16]	; (3a6c <std.isra.0+0x44>)
    3a5a:	6323      	str	r3, [r4, #48]	; 0x30
    3a5c:	bd10      	pop	{r4, pc}
    3a5e:	46c0      	nop			; (mov r8, r8)
    3a60:	0000442d 	.word	0x0000442d
    3a64:	00004455 	.word	0x00004455
    3a68:	0000448d 	.word	0x0000448d
    3a6c:	000044b9 	.word	0x000044b9

00003a70 <__sfmoreglue>:
    3a70:	b570      	push	{r4, r5, r6, lr}
    3a72:	2568      	movs	r5, #104	; 0x68
    3a74:	1e4a      	subs	r2, r1, #1
    3a76:	4355      	muls	r5, r2
    3a78:	000e      	movs	r6, r1
    3a7a:	0029      	movs	r1, r5
    3a7c:	3174      	adds	r1, #116	; 0x74
    3a7e:	f000 f963 	bl	3d48 <_malloc_r>
    3a82:	1e04      	subs	r4, r0, #0
    3a84:	d008      	beq.n	3a98 <__sfmoreglue+0x28>
    3a86:	2100      	movs	r1, #0
    3a88:	002a      	movs	r2, r5
    3a8a:	6001      	str	r1, [r0, #0]
    3a8c:	6046      	str	r6, [r0, #4]
    3a8e:	300c      	adds	r0, #12
    3a90:	60a0      	str	r0, [r4, #8]
    3a92:	3268      	adds	r2, #104	; 0x68
    3a94:	f7ff fd71 	bl	357a <memset>
    3a98:	0020      	movs	r0, r4
    3a9a:	bd70      	pop	{r4, r5, r6, pc}

00003a9c <__sinit>:
    3a9c:	6983      	ldr	r3, [r0, #24]
    3a9e:	b513      	push	{r0, r1, r4, lr}
    3aa0:	0004      	movs	r4, r0
    3aa2:	2b00      	cmp	r3, #0
    3aa4:	d128      	bne.n	3af8 <__sinit+0x5c>
    3aa6:	6483      	str	r3, [r0, #72]	; 0x48
    3aa8:	64c3      	str	r3, [r0, #76]	; 0x4c
    3aaa:	6503      	str	r3, [r0, #80]	; 0x50
    3aac:	4b13      	ldr	r3, [pc, #76]	; (3afc <__sinit+0x60>)
    3aae:	4a14      	ldr	r2, [pc, #80]	; (3b00 <__sinit+0x64>)
    3ab0:	681b      	ldr	r3, [r3, #0]
    3ab2:	6282      	str	r2, [r0, #40]	; 0x28
    3ab4:	9301      	str	r3, [sp, #4]
    3ab6:	4298      	cmp	r0, r3
    3ab8:	d101      	bne.n	3abe <__sinit+0x22>
    3aba:	2301      	movs	r3, #1
    3abc:	6183      	str	r3, [r0, #24]
    3abe:	0020      	movs	r0, r4
    3ac0:	f000 f820 	bl	3b04 <__sfp>
    3ac4:	6060      	str	r0, [r4, #4]
    3ac6:	0020      	movs	r0, r4
    3ac8:	f000 f81c 	bl	3b04 <__sfp>
    3acc:	60a0      	str	r0, [r4, #8]
    3ace:	0020      	movs	r0, r4
    3ad0:	f000 f818 	bl	3b04 <__sfp>
    3ad4:	2200      	movs	r2, #0
    3ad6:	60e0      	str	r0, [r4, #12]
    3ad8:	2104      	movs	r1, #4
    3ada:	6860      	ldr	r0, [r4, #4]
    3adc:	f7ff ffa4 	bl	3a28 <std.isra.0>
    3ae0:	2201      	movs	r2, #1
    3ae2:	2109      	movs	r1, #9
    3ae4:	68a0      	ldr	r0, [r4, #8]
    3ae6:	f7ff ff9f 	bl	3a28 <std.isra.0>
    3aea:	2202      	movs	r2, #2
    3aec:	2112      	movs	r1, #18
    3aee:	68e0      	ldr	r0, [r4, #12]
    3af0:	f7ff ff9a 	bl	3a28 <std.isra.0>
    3af4:	2301      	movs	r3, #1
    3af6:	61a3      	str	r3, [r4, #24]
    3af8:	bd13      	pop	{r0, r1, r4, pc}
    3afa:	46c0      	nop			; (mov r8, r8)
    3afc:	000068ec 	.word	0x000068ec
    3b00:	00003a19 	.word	0x00003a19

00003b04 <__sfp>:
    3b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3b06:	4b1e      	ldr	r3, [pc, #120]	; (3b80 <__sfp+0x7c>)
    3b08:	0007      	movs	r7, r0
    3b0a:	681e      	ldr	r6, [r3, #0]
    3b0c:	69b3      	ldr	r3, [r6, #24]
    3b0e:	2b00      	cmp	r3, #0
    3b10:	d102      	bne.n	3b18 <__sfp+0x14>
    3b12:	0030      	movs	r0, r6
    3b14:	f7ff ffc2 	bl	3a9c <__sinit>
    3b18:	3648      	adds	r6, #72	; 0x48
    3b1a:	68b4      	ldr	r4, [r6, #8]
    3b1c:	6873      	ldr	r3, [r6, #4]
    3b1e:	3b01      	subs	r3, #1
    3b20:	d504      	bpl.n	3b2c <__sfp+0x28>
    3b22:	6833      	ldr	r3, [r6, #0]
    3b24:	2b00      	cmp	r3, #0
    3b26:	d007      	beq.n	3b38 <__sfp+0x34>
    3b28:	6836      	ldr	r6, [r6, #0]
    3b2a:	e7f6      	b.n	3b1a <__sfp+0x16>
    3b2c:	220c      	movs	r2, #12
    3b2e:	5ea5      	ldrsh	r5, [r4, r2]
    3b30:	2d00      	cmp	r5, #0
    3b32:	d00d      	beq.n	3b50 <__sfp+0x4c>
    3b34:	3468      	adds	r4, #104	; 0x68
    3b36:	e7f2      	b.n	3b1e <__sfp+0x1a>
    3b38:	2104      	movs	r1, #4
    3b3a:	0038      	movs	r0, r7
    3b3c:	f7ff ff98 	bl	3a70 <__sfmoreglue>
    3b40:	6030      	str	r0, [r6, #0]
    3b42:	2800      	cmp	r0, #0
    3b44:	d1f0      	bne.n	3b28 <__sfp+0x24>
    3b46:	230c      	movs	r3, #12
    3b48:	0004      	movs	r4, r0
    3b4a:	603b      	str	r3, [r7, #0]
    3b4c:	0020      	movs	r0, r4
    3b4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3b50:	2301      	movs	r3, #1
    3b52:	0020      	movs	r0, r4
    3b54:	425b      	negs	r3, r3
    3b56:	81e3      	strh	r3, [r4, #14]
    3b58:	3302      	adds	r3, #2
    3b5a:	81a3      	strh	r3, [r4, #12]
    3b5c:	6665      	str	r5, [r4, #100]	; 0x64
    3b5e:	6025      	str	r5, [r4, #0]
    3b60:	60a5      	str	r5, [r4, #8]
    3b62:	6065      	str	r5, [r4, #4]
    3b64:	6125      	str	r5, [r4, #16]
    3b66:	6165      	str	r5, [r4, #20]
    3b68:	61a5      	str	r5, [r4, #24]
    3b6a:	2208      	movs	r2, #8
    3b6c:	0029      	movs	r1, r5
    3b6e:	305c      	adds	r0, #92	; 0x5c
    3b70:	f7ff fd03 	bl	357a <memset>
    3b74:	6365      	str	r5, [r4, #52]	; 0x34
    3b76:	63a5      	str	r5, [r4, #56]	; 0x38
    3b78:	64a5      	str	r5, [r4, #72]	; 0x48
    3b7a:	64e5      	str	r5, [r4, #76]	; 0x4c
    3b7c:	e7e6      	b.n	3b4c <__sfp+0x48>
    3b7e:	46c0      	nop			; (mov r8, r8)
    3b80:	000068ec 	.word	0x000068ec

00003b84 <_fwalk_reent>:
    3b84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3b86:	0004      	movs	r4, r0
    3b88:	0007      	movs	r7, r0
    3b8a:	2600      	movs	r6, #0
    3b8c:	9101      	str	r1, [sp, #4]
    3b8e:	3448      	adds	r4, #72	; 0x48
    3b90:	2c00      	cmp	r4, #0
    3b92:	d101      	bne.n	3b98 <_fwalk_reent+0x14>
    3b94:	0030      	movs	r0, r6
    3b96:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3b98:	6863      	ldr	r3, [r4, #4]
    3b9a:	68a5      	ldr	r5, [r4, #8]
    3b9c:	9300      	str	r3, [sp, #0]
    3b9e:	9b00      	ldr	r3, [sp, #0]
    3ba0:	3b01      	subs	r3, #1
    3ba2:	9300      	str	r3, [sp, #0]
    3ba4:	d501      	bpl.n	3baa <_fwalk_reent+0x26>
    3ba6:	6824      	ldr	r4, [r4, #0]
    3ba8:	e7f2      	b.n	3b90 <_fwalk_reent+0xc>
    3baa:	89ab      	ldrh	r3, [r5, #12]
    3bac:	2b01      	cmp	r3, #1
    3bae:	d908      	bls.n	3bc2 <_fwalk_reent+0x3e>
    3bb0:	220e      	movs	r2, #14
    3bb2:	5eab      	ldrsh	r3, [r5, r2]
    3bb4:	3301      	adds	r3, #1
    3bb6:	d004      	beq.n	3bc2 <_fwalk_reent+0x3e>
    3bb8:	0029      	movs	r1, r5
    3bba:	0038      	movs	r0, r7
    3bbc:	9b01      	ldr	r3, [sp, #4]
    3bbe:	4798      	blx	r3
    3bc0:	4306      	orrs	r6, r0
    3bc2:	3568      	adds	r5, #104	; 0x68
    3bc4:	e7eb      	b.n	3b9e <_fwalk_reent+0x1a>
	...

00003bc8 <__swhatbuf_r>:
    3bc8:	b570      	push	{r4, r5, r6, lr}
    3bca:	000e      	movs	r6, r1
    3bcc:	001d      	movs	r5, r3
    3bce:	230e      	movs	r3, #14
    3bd0:	5ec9      	ldrsh	r1, [r1, r3]
    3bd2:	b090      	sub	sp, #64	; 0x40
    3bd4:	0014      	movs	r4, r2
    3bd6:	2900      	cmp	r1, #0
    3bd8:	da07      	bge.n	3bea <__swhatbuf_r+0x22>
    3bda:	2300      	movs	r3, #0
    3bdc:	602b      	str	r3, [r5, #0]
    3bde:	89b3      	ldrh	r3, [r6, #12]
    3be0:	061b      	lsls	r3, r3, #24
    3be2:	d411      	bmi.n	3c08 <__swhatbuf_r+0x40>
    3be4:	2380      	movs	r3, #128	; 0x80
    3be6:	00db      	lsls	r3, r3, #3
    3be8:	e00f      	b.n	3c0a <__swhatbuf_r+0x42>
    3bea:	aa01      	add	r2, sp, #4
    3bec:	f000 fd5c 	bl	46a8 <_fstat_r>
    3bf0:	2800      	cmp	r0, #0
    3bf2:	dbf2      	blt.n	3bda <__swhatbuf_r+0x12>
    3bf4:	22f0      	movs	r2, #240	; 0xf0
    3bf6:	9b02      	ldr	r3, [sp, #8]
    3bf8:	0212      	lsls	r2, r2, #8
    3bfa:	4013      	ands	r3, r2
    3bfc:	4a05      	ldr	r2, [pc, #20]	; (3c14 <__swhatbuf_r+0x4c>)
    3bfe:	189b      	adds	r3, r3, r2
    3c00:	425a      	negs	r2, r3
    3c02:	4153      	adcs	r3, r2
    3c04:	602b      	str	r3, [r5, #0]
    3c06:	e7ed      	b.n	3be4 <__swhatbuf_r+0x1c>
    3c08:	2340      	movs	r3, #64	; 0x40
    3c0a:	2000      	movs	r0, #0
    3c0c:	6023      	str	r3, [r4, #0]
    3c0e:	b010      	add	sp, #64	; 0x40
    3c10:	bd70      	pop	{r4, r5, r6, pc}
    3c12:	46c0      	nop			; (mov r8, r8)
    3c14:	ffffe000 	.word	0xffffe000

00003c18 <__smakebuf_r>:
    3c18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3c1a:	2602      	movs	r6, #2
    3c1c:	898b      	ldrh	r3, [r1, #12]
    3c1e:	0005      	movs	r5, r0
    3c20:	000c      	movs	r4, r1
    3c22:	4233      	tst	r3, r6
    3c24:	d006      	beq.n	3c34 <__smakebuf_r+0x1c>
    3c26:	0023      	movs	r3, r4
    3c28:	3347      	adds	r3, #71	; 0x47
    3c2a:	6023      	str	r3, [r4, #0]
    3c2c:	6123      	str	r3, [r4, #16]
    3c2e:	2301      	movs	r3, #1
    3c30:	6163      	str	r3, [r4, #20]
    3c32:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    3c34:	ab01      	add	r3, sp, #4
    3c36:	466a      	mov	r2, sp
    3c38:	f7ff ffc6 	bl	3bc8 <__swhatbuf_r>
    3c3c:	9900      	ldr	r1, [sp, #0]
    3c3e:	0007      	movs	r7, r0
    3c40:	0028      	movs	r0, r5
    3c42:	f000 f881 	bl	3d48 <_malloc_r>
    3c46:	2800      	cmp	r0, #0
    3c48:	d108      	bne.n	3c5c <__smakebuf_r+0x44>
    3c4a:	220c      	movs	r2, #12
    3c4c:	5ea3      	ldrsh	r3, [r4, r2]
    3c4e:	059a      	lsls	r2, r3, #22
    3c50:	d4ef      	bmi.n	3c32 <__smakebuf_r+0x1a>
    3c52:	2203      	movs	r2, #3
    3c54:	4393      	bics	r3, r2
    3c56:	431e      	orrs	r6, r3
    3c58:	81a6      	strh	r6, [r4, #12]
    3c5a:	e7e4      	b.n	3c26 <__smakebuf_r+0xe>
    3c5c:	4b0f      	ldr	r3, [pc, #60]	; (3c9c <__smakebuf_r+0x84>)
    3c5e:	62ab      	str	r3, [r5, #40]	; 0x28
    3c60:	2380      	movs	r3, #128	; 0x80
    3c62:	89a2      	ldrh	r2, [r4, #12]
    3c64:	6020      	str	r0, [r4, #0]
    3c66:	4313      	orrs	r3, r2
    3c68:	81a3      	strh	r3, [r4, #12]
    3c6a:	9b00      	ldr	r3, [sp, #0]
    3c6c:	6120      	str	r0, [r4, #16]
    3c6e:	6163      	str	r3, [r4, #20]
    3c70:	9b01      	ldr	r3, [sp, #4]
    3c72:	2b00      	cmp	r3, #0
    3c74:	d00d      	beq.n	3c92 <__smakebuf_r+0x7a>
    3c76:	230e      	movs	r3, #14
    3c78:	5ee1      	ldrsh	r1, [r4, r3]
    3c7a:	0028      	movs	r0, r5
    3c7c:	f000 fd26 	bl	46cc <_isatty_r>
    3c80:	2800      	cmp	r0, #0
    3c82:	d006      	beq.n	3c92 <__smakebuf_r+0x7a>
    3c84:	2203      	movs	r2, #3
    3c86:	89a3      	ldrh	r3, [r4, #12]
    3c88:	4393      	bics	r3, r2
    3c8a:	001a      	movs	r2, r3
    3c8c:	2301      	movs	r3, #1
    3c8e:	4313      	orrs	r3, r2
    3c90:	81a3      	strh	r3, [r4, #12]
    3c92:	89a0      	ldrh	r0, [r4, #12]
    3c94:	4338      	orrs	r0, r7
    3c96:	81a0      	strh	r0, [r4, #12]
    3c98:	e7cb      	b.n	3c32 <__smakebuf_r+0x1a>
    3c9a:	46c0      	nop			; (mov r8, r8)
    3c9c:	00003a19 	.word	0x00003a19

00003ca0 <malloc>:
    3ca0:	b510      	push	{r4, lr}
    3ca2:	4b03      	ldr	r3, [pc, #12]	; (3cb0 <malloc+0x10>)
    3ca4:	0001      	movs	r1, r0
    3ca6:	6818      	ldr	r0, [r3, #0]
    3ca8:	f000 f84e 	bl	3d48 <_malloc_r>
    3cac:	bd10      	pop	{r4, pc}
    3cae:	46c0      	nop			; (mov r8, r8)
    3cb0:	20000158 	.word	0x20000158

00003cb4 <_free_r>:
    3cb4:	b570      	push	{r4, r5, r6, lr}
    3cb6:	0005      	movs	r5, r0
    3cb8:	2900      	cmp	r1, #0
    3cba:	d010      	beq.n	3cde <_free_r+0x2a>
    3cbc:	1f0c      	subs	r4, r1, #4
    3cbe:	6823      	ldr	r3, [r4, #0]
    3cc0:	2b00      	cmp	r3, #0
    3cc2:	da00      	bge.n	3cc6 <_free_r+0x12>
    3cc4:	18e4      	adds	r4, r4, r3
    3cc6:	0028      	movs	r0, r5
    3cc8:	f000 fd31 	bl	472e <__malloc_lock>
    3ccc:	4a1d      	ldr	r2, [pc, #116]	; (3d44 <_free_r+0x90>)
    3cce:	6813      	ldr	r3, [r2, #0]
    3cd0:	2b00      	cmp	r3, #0
    3cd2:	d105      	bne.n	3ce0 <_free_r+0x2c>
    3cd4:	6063      	str	r3, [r4, #4]
    3cd6:	6014      	str	r4, [r2, #0]
    3cd8:	0028      	movs	r0, r5
    3cda:	f000 fd29 	bl	4730 <__malloc_unlock>
    3cde:	bd70      	pop	{r4, r5, r6, pc}
    3ce0:	42a3      	cmp	r3, r4
    3ce2:	d909      	bls.n	3cf8 <_free_r+0x44>
    3ce4:	6821      	ldr	r1, [r4, #0]
    3ce6:	1860      	adds	r0, r4, r1
    3ce8:	4283      	cmp	r3, r0
    3cea:	d1f3      	bne.n	3cd4 <_free_r+0x20>
    3cec:	6818      	ldr	r0, [r3, #0]
    3cee:	685b      	ldr	r3, [r3, #4]
    3cf0:	1841      	adds	r1, r0, r1
    3cf2:	6021      	str	r1, [r4, #0]
    3cf4:	e7ee      	b.n	3cd4 <_free_r+0x20>
    3cf6:	0013      	movs	r3, r2
    3cf8:	685a      	ldr	r2, [r3, #4]
    3cfa:	2a00      	cmp	r2, #0
    3cfc:	d001      	beq.n	3d02 <_free_r+0x4e>
    3cfe:	42a2      	cmp	r2, r4
    3d00:	d9f9      	bls.n	3cf6 <_free_r+0x42>
    3d02:	6819      	ldr	r1, [r3, #0]
    3d04:	1858      	adds	r0, r3, r1
    3d06:	42a0      	cmp	r0, r4
    3d08:	d10b      	bne.n	3d22 <_free_r+0x6e>
    3d0a:	6820      	ldr	r0, [r4, #0]
    3d0c:	1809      	adds	r1, r1, r0
    3d0e:	1858      	adds	r0, r3, r1
    3d10:	6019      	str	r1, [r3, #0]
    3d12:	4282      	cmp	r2, r0
    3d14:	d1e0      	bne.n	3cd8 <_free_r+0x24>
    3d16:	6810      	ldr	r0, [r2, #0]
    3d18:	6852      	ldr	r2, [r2, #4]
    3d1a:	1841      	adds	r1, r0, r1
    3d1c:	6019      	str	r1, [r3, #0]
    3d1e:	605a      	str	r2, [r3, #4]
    3d20:	e7da      	b.n	3cd8 <_free_r+0x24>
    3d22:	42a0      	cmp	r0, r4
    3d24:	d902      	bls.n	3d2c <_free_r+0x78>
    3d26:	230c      	movs	r3, #12
    3d28:	602b      	str	r3, [r5, #0]
    3d2a:	e7d5      	b.n	3cd8 <_free_r+0x24>
    3d2c:	6821      	ldr	r1, [r4, #0]
    3d2e:	1860      	adds	r0, r4, r1
    3d30:	4282      	cmp	r2, r0
    3d32:	d103      	bne.n	3d3c <_free_r+0x88>
    3d34:	6810      	ldr	r0, [r2, #0]
    3d36:	6852      	ldr	r2, [r2, #4]
    3d38:	1841      	adds	r1, r0, r1
    3d3a:	6021      	str	r1, [r4, #0]
    3d3c:	6062      	str	r2, [r4, #4]
    3d3e:	605c      	str	r4, [r3, #4]
    3d40:	e7ca      	b.n	3cd8 <_free_r+0x24>
    3d42:	46c0      	nop			; (mov r8, r8)
    3d44:	200002a0 	.word	0x200002a0

00003d48 <_malloc_r>:
    3d48:	2303      	movs	r3, #3
    3d4a:	b570      	push	{r4, r5, r6, lr}
    3d4c:	1ccd      	adds	r5, r1, #3
    3d4e:	439d      	bics	r5, r3
    3d50:	3508      	adds	r5, #8
    3d52:	0006      	movs	r6, r0
    3d54:	2d0c      	cmp	r5, #12
    3d56:	d21e      	bcs.n	3d96 <_malloc_r+0x4e>
    3d58:	250c      	movs	r5, #12
    3d5a:	42a9      	cmp	r1, r5
    3d5c:	d81d      	bhi.n	3d9a <_malloc_r+0x52>
    3d5e:	0030      	movs	r0, r6
    3d60:	f000 fce5 	bl	472e <__malloc_lock>
    3d64:	4a25      	ldr	r2, [pc, #148]	; (3dfc <_malloc_r+0xb4>)
    3d66:	6814      	ldr	r4, [r2, #0]
    3d68:	0021      	movs	r1, r4
    3d6a:	2900      	cmp	r1, #0
    3d6c:	d119      	bne.n	3da2 <_malloc_r+0x5a>
    3d6e:	4c24      	ldr	r4, [pc, #144]	; (3e00 <_malloc_r+0xb8>)
    3d70:	6823      	ldr	r3, [r4, #0]
    3d72:	2b00      	cmp	r3, #0
    3d74:	d103      	bne.n	3d7e <_malloc_r+0x36>
    3d76:	0030      	movs	r0, r6
    3d78:	f000 fb46 	bl	4408 <_sbrk_r>
    3d7c:	6020      	str	r0, [r4, #0]
    3d7e:	0029      	movs	r1, r5
    3d80:	0030      	movs	r0, r6
    3d82:	f000 fb41 	bl	4408 <_sbrk_r>
    3d86:	1c43      	adds	r3, r0, #1
    3d88:	d12c      	bne.n	3de4 <_malloc_r+0x9c>
    3d8a:	230c      	movs	r3, #12
    3d8c:	0030      	movs	r0, r6
    3d8e:	6033      	str	r3, [r6, #0]
    3d90:	f000 fcce 	bl	4730 <__malloc_unlock>
    3d94:	e003      	b.n	3d9e <_malloc_r+0x56>
    3d96:	2d00      	cmp	r5, #0
    3d98:	dadf      	bge.n	3d5a <_malloc_r+0x12>
    3d9a:	230c      	movs	r3, #12
    3d9c:	6033      	str	r3, [r6, #0]
    3d9e:	2000      	movs	r0, #0
    3da0:	bd70      	pop	{r4, r5, r6, pc}
    3da2:	680b      	ldr	r3, [r1, #0]
    3da4:	1b5b      	subs	r3, r3, r5
    3da6:	d41a      	bmi.n	3dde <_malloc_r+0x96>
    3da8:	2b0b      	cmp	r3, #11
    3daa:	d903      	bls.n	3db4 <_malloc_r+0x6c>
    3dac:	600b      	str	r3, [r1, #0]
    3dae:	18cc      	adds	r4, r1, r3
    3db0:	6025      	str	r5, [r4, #0]
    3db2:	e003      	b.n	3dbc <_malloc_r+0x74>
    3db4:	428c      	cmp	r4, r1
    3db6:	d10e      	bne.n	3dd6 <_malloc_r+0x8e>
    3db8:	6863      	ldr	r3, [r4, #4]
    3dba:	6013      	str	r3, [r2, #0]
    3dbc:	0030      	movs	r0, r6
    3dbe:	f000 fcb7 	bl	4730 <__malloc_unlock>
    3dc2:	0020      	movs	r0, r4
    3dc4:	2207      	movs	r2, #7
    3dc6:	300b      	adds	r0, #11
    3dc8:	1d23      	adds	r3, r4, #4
    3dca:	4390      	bics	r0, r2
    3dcc:	1ac3      	subs	r3, r0, r3
    3dce:	d0e7      	beq.n	3da0 <_malloc_r+0x58>
    3dd0:	425a      	negs	r2, r3
    3dd2:	50e2      	str	r2, [r4, r3]
    3dd4:	e7e4      	b.n	3da0 <_malloc_r+0x58>
    3dd6:	684b      	ldr	r3, [r1, #4]
    3dd8:	6063      	str	r3, [r4, #4]
    3dda:	000c      	movs	r4, r1
    3ddc:	e7ee      	b.n	3dbc <_malloc_r+0x74>
    3dde:	000c      	movs	r4, r1
    3de0:	6849      	ldr	r1, [r1, #4]
    3de2:	e7c2      	b.n	3d6a <_malloc_r+0x22>
    3de4:	2303      	movs	r3, #3
    3de6:	1cc4      	adds	r4, r0, #3
    3de8:	439c      	bics	r4, r3
    3dea:	42a0      	cmp	r0, r4
    3dec:	d0e0      	beq.n	3db0 <_malloc_r+0x68>
    3dee:	1a21      	subs	r1, r4, r0
    3df0:	0030      	movs	r0, r6
    3df2:	f000 fb09 	bl	4408 <_sbrk_r>
    3df6:	1c43      	adds	r3, r0, #1
    3df8:	d1da      	bne.n	3db0 <_malloc_r+0x68>
    3dfa:	e7c6      	b.n	3d8a <_malloc_r+0x42>
    3dfc:	200002a0 	.word	0x200002a0
    3e00:	200002a4 	.word	0x200002a4

00003e04 <__sfputc_r>:
    3e04:	6893      	ldr	r3, [r2, #8]
    3e06:	b510      	push	{r4, lr}
    3e08:	3b01      	subs	r3, #1
    3e0a:	6093      	str	r3, [r2, #8]
    3e0c:	2b00      	cmp	r3, #0
    3e0e:	da05      	bge.n	3e1c <__sfputc_r+0x18>
    3e10:	6994      	ldr	r4, [r2, #24]
    3e12:	42a3      	cmp	r3, r4
    3e14:	db08      	blt.n	3e28 <__sfputc_r+0x24>
    3e16:	b2cb      	uxtb	r3, r1
    3e18:	2b0a      	cmp	r3, #10
    3e1a:	d005      	beq.n	3e28 <__sfputc_r+0x24>
    3e1c:	6813      	ldr	r3, [r2, #0]
    3e1e:	1c58      	adds	r0, r3, #1
    3e20:	6010      	str	r0, [r2, #0]
    3e22:	7019      	strb	r1, [r3, #0]
    3e24:	b2c8      	uxtb	r0, r1
    3e26:	bd10      	pop	{r4, pc}
    3e28:	f000 fb4c 	bl	44c4 <__swbuf_r>
    3e2c:	e7fb      	b.n	3e26 <__sfputc_r+0x22>

00003e2e <__sfputs_r>:
    3e2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3e30:	0006      	movs	r6, r0
    3e32:	000f      	movs	r7, r1
    3e34:	0014      	movs	r4, r2
    3e36:	18d5      	adds	r5, r2, r3
    3e38:	42ac      	cmp	r4, r5
    3e3a:	d101      	bne.n	3e40 <__sfputs_r+0x12>
    3e3c:	2000      	movs	r0, #0
    3e3e:	e007      	b.n	3e50 <__sfputs_r+0x22>
    3e40:	7821      	ldrb	r1, [r4, #0]
    3e42:	003a      	movs	r2, r7
    3e44:	0030      	movs	r0, r6
    3e46:	f7ff ffdd 	bl	3e04 <__sfputc_r>
    3e4a:	3401      	adds	r4, #1
    3e4c:	1c43      	adds	r3, r0, #1
    3e4e:	d1f3      	bne.n	3e38 <__sfputs_r+0xa>
    3e50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00003e54 <_vfiprintf_r>:
    3e54:	b5f0      	push	{r4, r5, r6, r7, lr}
    3e56:	b09f      	sub	sp, #124	; 0x7c
    3e58:	0006      	movs	r6, r0
    3e5a:	000f      	movs	r7, r1
    3e5c:	0014      	movs	r4, r2
    3e5e:	9305      	str	r3, [sp, #20]
    3e60:	2800      	cmp	r0, #0
    3e62:	d004      	beq.n	3e6e <_vfiprintf_r+0x1a>
    3e64:	6983      	ldr	r3, [r0, #24]
    3e66:	2b00      	cmp	r3, #0
    3e68:	d101      	bne.n	3e6e <_vfiprintf_r+0x1a>
    3e6a:	f7ff fe17 	bl	3a9c <__sinit>
    3e6e:	4b7f      	ldr	r3, [pc, #508]	; (406c <_vfiprintf_r+0x218>)
    3e70:	429f      	cmp	r7, r3
    3e72:	d15c      	bne.n	3f2e <_vfiprintf_r+0xda>
    3e74:	6877      	ldr	r7, [r6, #4]
    3e76:	89bb      	ldrh	r3, [r7, #12]
    3e78:	071b      	lsls	r3, r3, #28
    3e7a:	d562      	bpl.n	3f42 <_vfiprintf_r+0xee>
    3e7c:	693b      	ldr	r3, [r7, #16]
    3e7e:	2b00      	cmp	r3, #0
    3e80:	d05f      	beq.n	3f42 <_vfiprintf_r+0xee>
    3e82:	2300      	movs	r3, #0
    3e84:	ad06      	add	r5, sp, #24
    3e86:	616b      	str	r3, [r5, #20]
    3e88:	3320      	adds	r3, #32
    3e8a:	766b      	strb	r3, [r5, #25]
    3e8c:	3310      	adds	r3, #16
    3e8e:	76ab      	strb	r3, [r5, #26]
    3e90:	9402      	str	r4, [sp, #8]
    3e92:	9c02      	ldr	r4, [sp, #8]
    3e94:	7823      	ldrb	r3, [r4, #0]
    3e96:	2b00      	cmp	r3, #0
    3e98:	d15d      	bne.n	3f56 <_vfiprintf_r+0x102>
    3e9a:	9b02      	ldr	r3, [sp, #8]
    3e9c:	1ae3      	subs	r3, r4, r3
    3e9e:	9304      	str	r3, [sp, #16]
    3ea0:	d00d      	beq.n	3ebe <_vfiprintf_r+0x6a>
    3ea2:	9b04      	ldr	r3, [sp, #16]
    3ea4:	9a02      	ldr	r2, [sp, #8]
    3ea6:	0039      	movs	r1, r7
    3ea8:	0030      	movs	r0, r6
    3eaa:	f7ff ffc0 	bl	3e2e <__sfputs_r>
    3eae:	1c43      	adds	r3, r0, #1
    3eb0:	d100      	bne.n	3eb4 <_vfiprintf_r+0x60>
    3eb2:	e0cc      	b.n	404e <_vfiprintf_r+0x1fa>
    3eb4:	696a      	ldr	r2, [r5, #20]
    3eb6:	9b04      	ldr	r3, [sp, #16]
    3eb8:	4694      	mov	ip, r2
    3eba:	4463      	add	r3, ip
    3ebc:	616b      	str	r3, [r5, #20]
    3ebe:	7823      	ldrb	r3, [r4, #0]
    3ec0:	2b00      	cmp	r3, #0
    3ec2:	d100      	bne.n	3ec6 <_vfiprintf_r+0x72>
    3ec4:	e0c3      	b.n	404e <_vfiprintf_r+0x1fa>
    3ec6:	2201      	movs	r2, #1
    3ec8:	2300      	movs	r3, #0
    3eca:	4252      	negs	r2, r2
    3ecc:	606a      	str	r2, [r5, #4]
    3ece:	a902      	add	r1, sp, #8
    3ed0:	3254      	adds	r2, #84	; 0x54
    3ed2:	1852      	adds	r2, r2, r1
    3ed4:	3401      	adds	r4, #1
    3ed6:	602b      	str	r3, [r5, #0]
    3ed8:	60eb      	str	r3, [r5, #12]
    3eda:	60ab      	str	r3, [r5, #8]
    3edc:	7013      	strb	r3, [r2, #0]
    3ede:	65ab      	str	r3, [r5, #88]	; 0x58
    3ee0:	7821      	ldrb	r1, [r4, #0]
    3ee2:	2205      	movs	r2, #5
    3ee4:	4862      	ldr	r0, [pc, #392]	; (4070 <_vfiprintf_r+0x21c>)
    3ee6:	f000 fc17 	bl	4718 <memchr>
    3eea:	1c63      	adds	r3, r4, #1
    3eec:	469c      	mov	ip, r3
    3eee:	2800      	cmp	r0, #0
    3ef0:	d135      	bne.n	3f5e <_vfiprintf_r+0x10a>
    3ef2:	6829      	ldr	r1, [r5, #0]
    3ef4:	06cb      	lsls	r3, r1, #27
    3ef6:	d504      	bpl.n	3f02 <_vfiprintf_r+0xae>
    3ef8:	2353      	movs	r3, #83	; 0x53
    3efa:	aa02      	add	r2, sp, #8
    3efc:	3020      	adds	r0, #32
    3efe:	189b      	adds	r3, r3, r2
    3f00:	7018      	strb	r0, [r3, #0]
    3f02:	070b      	lsls	r3, r1, #28
    3f04:	d504      	bpl.n	3f10 <_vfiprintf_r+0xbc>
    3f06:	2353      	movs	r3, #83	; 0x53
    3f08:	202b      	movs	r0, #43	; 0x2b
    3f0a:	aa02      	add	r2, sp, #8
    3f0c:	189b      	adds	r3, r3, r2
    3f0e:	7018      	strb	r0, [r3, #0]
    3f10:	7823      	ldrb	r3, [r4, #0]
    3f12:	2b2a      	cmp	r3, #42	; 0x2a
    3f14:	d02c      	beq.n	3f70 <_vfiprintf_r+0x11c>
    3f16:	2000      	movs	r0, #0
    3f18:	210a      	movs	r1, #10
    3f1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3f1c:	7822      	ldrb	r2, [r4, #0]
    3f1e:	3a30      	subs	r2, #48	; 0x30
    3f20:	2a09      	cmp	r2, #9
    3f22:	d800      	bhi.n	3f26 <_vfiprintf_r+0xd2>
    3f24:	e06b      	b.n	3ffe <_vfiprintf_r+0x1aa>
    3f26:	2800      	cmp	r0, #0
    3f28:	d02a      	beq.n	3f80 <_vfiprintf_r+0x12c>
    3f2a:	9309      	str	r3, [sp, #36]	; 0x24
    3f2c:	e028      	b.n	3f80 <_vfiprintf_r+0x12c>
    3f2e:	4b51      	ldr	r3, [pc, #324]	; (4074 <_vfiprintf_r+0x220>)
    3f30:	429f      	cmp	r7, r3
    3f32:	d101      	bne.n	3f38 <_vfiprintf_r+0xe4>
    3f34:	68b7      	ldr	r7, [r6, #8]
    3f36:	e79e      	b.n	3e76 <_vfiprintf_r+0x22>
    3f38:	4b4f      	ldr	r3, [pc, #316]	; (4078 <_vfiprintf_r+0x224>)
    3f3a:	429f      	cmp	r7, r3
    3f3c:	d19b      	bne.n	3e76 <_vfiprintf_r+0x22>
    3f3e:	68f7      	ldr	r7, [r6, #12]
    3f40:	e799      	b.n	3e76 <_vfiprintf_r+0x22>
    3f42:	0039      	movs	r1, r7
    3f44:	0030      	movs	r0, r6
    3f46:	f000 fb27 	bl	4598 <__swsetup_r>
    3f4a:	2800      	cmp	r0, #0
    3f4c:	d099      	beq.n	3e82 <_vfiprintf_r+0x2e>
    3f4e:	2001      	movs	r0, #1
    3f50:	4240      	negs	r0, r0
    3f52:	b01f      	add	sp, #124	; 0x7c
    3f54:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3f56:	2b25      	cmp	r3, #37	; 0x25
    3f58:	d09f      	beq.n	3e9a <_vfiprintf_r+0x46>
    3f5a:	3401      	adds	r4, #1
    3f5c:	e79a      	b.n	3e94 <_vfiprintf_r+0x40>
    3f5e:	4b44      	ldr	r3, [pc, #272]	; (4070 <_vfiprintf_r+0x21c>)
    3f60:	6829      	ldr	r1, [r5, #0]
    3f62:	1ac0      	subs	r0, r0, r3
    3f64:	2301      	movs	r3, #1
    3f66:	4083      	lsls	r3, r0
    3f68:	430b      	orrs	r3, r1
    3f6a:	602b      	str	r3, [r5, #0]
    3f6c:	4664      	mov	r4, ip
    3f6e:	e7b7      	b.n	3ee0 <_vfiprintf_r+0x8c>
    3f70:	9b05      	ldr	r3, [sp, #20]
    3f72:	1d18      	adds	r0, r3, #4
    3f74:	681b      	ldr	r3, [r3, #0]
    3f76:	9005      	str	r0, [sp, #20]
    3f78:	2b00      	cmp	r3, #0
    3f7a:	db3a      	blt.n	3ff2 <_vfiprintf_r+0x19e>
    3f7c:	9309      	str	r3, [sp, #36]	; 0x24
    3f7e:	4664      	mov	r4, ip
    3f80:	7823      	ldrb	r3, [r4, #0]
    3f82:	2b2e      	cmp	r3, #46	; 0x2e
    3f84:	d10b      	bne.n	3f9e <_vfiprintf_r+0x14a>
    3f86:	7863      	ldrb	r3, [r4, #1]
    3f88:	1c62      	adds	r2, r4, #1
    3f8a:	2b2a      	cmp	r3, #42	; 0x2a
    3f8c:	d13f      	bne.n	400e <_vfiprintf_r+0x1ba>
    3f8e:	9b05      	ldr	r3, [sp, #20]
    3f90:	3402      	adds	r4, #2
    3f92:	1d1a      	adds	r2, r3, #4
    3f94:	681b      	ldr	r3, [r3, #0]
    3f96:	9205      	str	r2, [sp, #20]
    3f98:	2b00      	cmp	r3, #0
    3f9a:	db35      	blt.n	4008 <_vfiprintf_r+0x1b4>
    3f9c:	9307      	str	r3, [sp, #28]
    3f9e:	7821      	ldrb	r1, [r4, #0]
    3fa0:	2203      	movs	r2, #3
    3fa2:	4836      	ldr	r0, [pc, #216]	; (407c <_vfiprintf_r+0x228>)
    3fa4:	f000 fbb8 	bl	4718 <memchr>
    3fa8:	2800      	cmp	r0, #0
    3faa:	d007      	beq.n	3fbc <_vfiprintf_r+0x168>
    3fac:	4b33      	ldr	r3, [pc, #204]	; (407c <_vfiprintf_r+0x228>)
    3fae:	682a      	ldr	r2, [r5, #0]
    3fb0:	1ac0      	subs	r0, r0, r3
    3fb2:	2340      	movs	r3, #64	; 0x40
    3fb4:	4083      	lsls	r3, r0
    3fb6:	4313      	orrs	r3, r2
    3fb8:	602b      	str	r3, [r5, #0]
    3fba:	3401      	adds	r4, #1
    3fbc:	7821      	ldrb	r1, [r4, #0]
    3fbe:	1c63      	adds	r3, r4, #1
    3fc0:	2206      	movs	r2, #6
    3fc2:	482f      	ldr	r0, [pc, #188]	; (4080 <_vfiprintf_r+0x22c>)
    3fc4:	9302      	str	r3, [sp, #8]
    3fc6:	7629      	strb	r1, [r5, #24]
    3fc8:	f000 fba6 	bl	4718 <memchr>
    3fcc:	2800      	cmp	r0, #0
    3fce:	d044      	beq.n	405a <_vfiprintf_r+0x206>
    3fd0:	4b2c      	ldr	r3, [pc, #176]	; (4084 <_vfiprintf_r+0x230>)
    3fd2:	2b00      	cmp	r3, #0
    3fd4:	d12f      	bne.n	4036 <_vfiprintf_r+0x1e2>
    3fd6:	6829      	ldr	r1, [r5, #0]
    3fd8:	9b05      	ldr	r3, [sp, #20]
    3fda:	2207      	movs	r2, #7
    3fdc:	05c9      	lsls	r1, r1, #23
    3fde:	d528      	bpl.n	4032 <_vfiprintf_r+0x1de>
    3fe0:	189b      	adds	r3, r3, r2
    3fe2:	4393      	bics	r3, r2
    3fe4:	3308      	adds	r3, #8
    3fe6:	9305      	str	r3, [sp, #20]
    3fe8:	696b      	ldr	r3, [r5, #20]
    3fea:	9a03      	ldr	r2, [sp, #12]
    3fec:	189b      	adds	r3, r3, r2
    3fee:	616b      	str	r3, [r5, #20]
    3ff0:	e74f      	b.n	3e92 <_vfiprintf_r+0x3e>
    3ff2:	425b      	negs	r3, r3
    3ff4:	60eb      	str	r3, [r5, #12]
    3ff6:	2302      	movs	r3, #2
    3ff8:	430b      	orrs	r3, r1
    3ffa:	602b      	str	r3, [r5, #0]
    3ffc:	e7bf      	b.n	3f7e <_vfiprintf_r+0x12a>
    3ffe:	434b      	muls	r3, r1
    4000:	3401      	adds	r4, #1
    4002:	189b      	adds	r3, r3, r2
    4004:	2001      	movs	r0, #1
    4006:	e789      	b.n	3f1c <_vfiprintf_r+0xc8>
    4008:	2301      	movs	r3, #1
    400a:	425b      	negs	r3, r3
    400c:	e7c6      	b.n	3f9c <_vfiprintf_r+0x148>
    400e:	2300      	movs	r3, #0
    4010:	0014      	movs	r4, r2
    4012:	200a      	movs	r0, #10
    4014:	001a      	movs	r2, r3
    4016:	606b      	str	r3, [r5, #4]
    4018:	7821      	ldrb	r1, [r4, #0]
    401a:	3930      	subs	r1, #48	; 0x30
    401c:	2909      	cmp	r1, #9
    401e:	d903      	bls.n	4028 <_vfiprintf_r+0x1d4>
    4020:	2b00      	cmp	r3, #0
    4022:	d0bc      	beq.n	3f9e <_vfiprintf_r+0x14a>
    4024:	9207      	str	r2, [sp, #28]
    4026:	e7ba      	b.n	3f9e <_vfiprintf_r+0x14a>
    4028:	4342      	muls	r2, r0
    402a:	3401      	adds	r4, #1
    402c:	1852      	adds	r2, r2, r1
    402e:	2301      	movs	r3, #1
    4030:	e7f2      	b.n	4018 <_vfiprintf_r+0x1c4>
    4032:	3307      	adds	r3, #7
    4034:	e7d5      	b.n	3fe2 <_vfiprintf_r+0x18e>
    4036:	ab05      	add	r3, sp, #20
    4038:	9300      	str	r3, [sp, #0]
    403a:	003a      	movs	r2, r7
    403c:	4b12      	ldr	r3, [pc, #72]	; (4088 <_vfiprintf_r+0x234>)
    403e:	0029      	movs	r1, r5
    4040:	0030      	movs	r0, r6
    4042:	e000      	b.n	4046 <_vfiprintf_r+0x1f2>
    4044:	bf00      	nop
    4046:	9003      	str	r0, [sp, #12]
    4048:	9b03      	ldr	r3, [sp, #12]
    404a:	3301      	adds	r3, #1
    404c:	d1cc      	bne.n	3fe8 <_vfiprintf_r+0x194>
    404e:	89bb      	ldrh	r3, [r7, #12]
    4050:	065b      	lsls	r3, r3, #25
    4052:	d500      	bpl.n	4056 <_vfiprintf_r+0x202>
    4054:	e77b      	b.n	3f4e <_vfiprintf_r+0xfa>
    4056:	980b      	ldr	r0, [sp, #44]	; 0x2c
    4058:	e77b      	b.n	3f52 <_vfiprintf_r+0xfe>
    405a:	ab05      	add	r3, sp, #20
    405c:	9300      	str	r3, [sp, #0]
    405e:	003a      	movs	r2, r7
    4060:	4b09      	ldr	r3, [pc, #36]	; (4088 <_vfiprintf_r+0x234>)
    4062:	0029      	movs	r1, r5
    4064:	0030      	movs	r0, r6
    4066:	f000 f87f 	bl	4168 <_printf_i>
    406a:	e7ec      	b.n	4046 <_vfiprintf_r+0x1f2>
    406c:	00006938 	.word	0x00006938
    4070:	00006978 	.word	0x00006978
    4074:	00006958 	.word	0x00006958
    4078:	00006918 	.word	0x00006918
    407c:	0000697e 	.word	0x0000697e
    4080:	00006982 	.word	0x00006982
    4084:	00000000 	.word	0x00000000
    4088:	00003e2f 	.word	0x00003e2f

0000408c <_printf_common>:
    408c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    408e:	0015      	movs	r5, r2
    4090:	9301      	str	r3, [sp, #4]
    4092:	688a      	ldr	r2, [r1, #8]
    4094:	690b      	ldr	r3, [r1, #16]
    4096:	9000      	str	r0, [sp, #0]
    4098:	000c      	movs	r4, r1
    409a:	4293      	cmp	r3, r2
    409c:	da00      	bge.n	40a0 <_printf_common+0x14>
    409e:	0013      	movs	r3, r2
    40a0:	0022      	movs	r2, r4
    40a2:	602b      	str	r3, [r5, #0]
    40a4:	3243      	adds	r2, #67	; 0x43
    40a6:	7812      	ldrb	r2, [r2, #0]
    40a8:	2a00      	cmp	r2, #0
    40aa:	d001      	beq.n	40b0 <_printf_common+0x24>
    40ac:	3301      	adds	r3, #1
    40ae:	602b      	str	r3, [r5, #0]
    40b0:	6823      	ldr	r3, [r4, #0]
    40b2:	069b      	lsls	r3, r3, #26
    40b4:	d502      	bpl.n	40bc <_printf_common+0x30>
    40b6:	682b      	ldr	r3, [r5, #0]
    40b8:	3302      	adds	r3, #2
    40ba:	602b      	str	r3, [r5, #0]
    40bc:	2706      	movs	r7, #6
    40be:	6823      	ldr	r3, [r4, #0]
    40c0:	401f      	ands	r7, r3
    40c2:	d027      	beq.n	4114 <_printf_common+0x88>
    40c4:	0023      	movs	r3, r4
    40c6:	3343      	adds	r3, #67	; 0x43
    40c8:	781b      	ldrb	r3, [r3, #0]
    40ca:	1e5a      	subs	r2, r3, #1
    40cc:	4193      	sbcs	r3, r2
    40ce:	6822      	ldr	r2, [r4, #0]
    40d0:	0692      	lsls	r2, r2, #26
    40d2:	d430      	bmi.n	4136 <_printf_common+0xaa>
    40d4:	0022      	movs	r2, r4
    40d6:	9901      	ldr	r1, [sp, #4]
    40d8:	3243      	adds	r2, #67	; 0x43
    40da:	9800      	ldr	r0, [sp, #0]
    40dc:	9e08      	ldr	r6, [sp, #32]
    40de:	47b0      	blx	r6
    40e0:	1c43      	adds	r3, r0, #1
    40e2:	d025      	beq.n	4130 <_printf_common+0xa4>
    40e4:	2306      	movs	r3, #6
    40e6:	6820      	ldr	r0, [r4, #0]
    40e8:	682a      	ldr	r2, [r5, #0]
    40ea:	68e1      	ldr	r1, [r4, #12]
    40ec:	4003      	ands	r3, r0
    40ee:	2500      	movs	r5, #0
    40f0:	2b04      	cmp	r3, #4
    40f2:	d103      	bne.n	40fc <_printf_common+0x70>
    40f4:	1a8d      	subs	r5, r1, r2
    40f6:	43eb      	mvns	r3, r5
    40f8:	17db      	asrs	r3, r3, #31
    40fa:	401d      	ands	r5, r3
    40fc:	68a3      	ldr	r3, [r4, #8]
    40fe:	6922      	ldr	r2, [r4, #16]
    4100:	4293      	cmp	r3, r2
    4102:	dd01      	ble.n	4108 <_printf_common+0x7c>
    4104:	1a9b      	subs	r3, r3, r2
    4106:	18ed      	adds	r5, r5, r3
    4108:	2700      	movs	r7, #0
    410a:	42bd      	cmp	r5, r7
    410c:	d120      	bne.n	4150 <_printf_common+0xc4>
    410e:	2000      	movs	r0, #0
    4110:	e010      	b.n	4134 <_printf_common+0xa8>
    4112:	3701      	adds	r7, #1
    4114:	68e3      	ldr	r3, [r4, #12]
    4116:	682a      	ldr	r2, [r5, #0]
    4118:	1a9b      	subs	r3, r3, r2
    411a:	429f      	cmp	r7, r3
    411c:	dad2      	bge.n	40c4 <_printf_common+0x38>
    411e:	0022      	movs	r2, r4
    4120:	2301      	movs	r3, #1
    4122:	3219      	adds	r2, #25
    4124:	9901      	ldr	r1, [sp, #4]
    4126:	9800      	ldr	r0, [sp, #0]
    4128:	9e08      	ldr	r6, [sp, #32]
    412a:	47b0      	blx	r6
    412c:	1c43      	adds	r3, r0, #1
    412e:	d1f0      	bne.n	4112 <_printf_common+0x86>
    4130:	2001      	movs	r0, #1
    4132:	4240      	negs	r0, r0
    4134:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4136:	2030      	movs	r0, #48	; 0x30
    4138:	18e1      	adds	r1, r4, r3
    413a:	3143      	adds	r1, #67	; 0x43
    413c:	7008      	strb	r0, [r1, #0]
    413e:	0021      	movs	r1, r4
    4140:	1c5a      	adds	r2, r3, #1
    4142:	3145      	adds	r1, #69	; 0x45
    4144:	7809      	ldrb	r1, [r1, #0]
    4146:	18a2      	adds	r2, r4, r2
    4148:	3243      	adds	r2, #67	; 0x43
    414a:	3302      	adds	r3, #2
    414c:	7011      	strb	r1, [r2, #0]
    414e:	e7c1      	b.n	40d4 <_printf_common+0x48>
    4150:	0022      	movs	r2, r4
    4152:	2301      	movs	r3, #1
    4154:	321a      	adds	r2, #26
    4156:	9901      	ldr	r1, [sp, #4]
    4158:	9800      	ldr	r0, [sp, #0]
    415a:	9e08      	ldr	r6, [sp, #32]
    415c:	47b0      	blx	r6
    415e:	1c43      	adds	r3, r0, #1
    4160:	d0e6      	beq.n	4130 <_printf_common+0xa4>
    4162:	3701      	adds	r7, #1
    4164:	e7d1      	b.n	410a <_printf_common+0x7e>
	...

00004168 <_printf_i>:
    4168:	b5f0      	push	{r4, r5, r6, r7, lr}
    416a:	b08b      	sub	sp, #44	; 0x2c
    416c:	9206      	str	r2, [sp, #24]
    416e:	000a      	movs	r2, r1
    4170:	3243      	adds	r2, #67	; 0x43
    4172:	9307      	str	r3, [sp, #28]
    4174:	9005      	str	r0, [sp, #20]
    4176:	9204      	str	r2, [sp, #16]
    4178:	7e0a      	ldrb	r2, [r1, #24]
    417a:	000c      	movs	r4, r1
    417c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    417e:	2a6e      	cmp	r2, #110	; 0x6e
    4180:	d100      	bne.n	4184 <_printf_i+0x1c>
    4182:	e08f      	b.n	42a4 <_printf_i+0x13c>
    4184:	d817      	bhi.n	41b6 <_printf_i+0x4e>
    4186:	2a63      	cmp	r2, #99	; 0x63
    4188:	d02c      	beq.n	41e4 <_printf_i+0x7c>
    418a:	d808      	bhi.n	419e <_printf_i+0x36>
    418c:	2a00      	cmp	r2, #0
    418e:	d100      	bne.n	4192 <_printf_i+0x2a>
    4190:	e099      	b.n	42c6 <_printf_i+0x15e>
    4192:	2a58      	cmp	r2, #88	; 0x58
    4194:	d054      	beq.n	4240 <_printf_i+0xd8>
    4196:	0026      	movs	r6, r4
    4198:	3642      	adds	r6, #66	; 0x42
    419a:	7032      	strb	r2, [r6, #0]
    419c:	e029      	b.n	41f2 <_printf_i+0x8a>
    419e:	2a64      	cmp	r2, #100	; 0x64
    41a0:	d001      	beq.n	41a6 <_printf_i+0x3e>
    41a2:	2a69      	cmp	r2, #105	; 0x69
    41a4:	d1f7      	bne.n	4196 <_printf_i+0x2e>
    41a6:	6821      	ldr	r1, [r4, #0]
    41a8:	681a      	ldr	r2, [r3, #0]
    41aa:	0608      	lsls	r0, r1, #24
    41ac:	d523      	bpl.n	41f6 <_printf_i+0x8e>
    41ae:	1d11      	adds	r1, r2, #4
    41b0:	6019      	str	r1, [r3, #0]
    41b2:	6815      	ldr	r5, [r2, #0]
    41b4:	e025      	b.n	4202 <_printf_i+0x9a>
    41b6:	2a73      	cmp	r2, #115	; 0x73
    41b8:	d100      	bne.n	41bc <_printf_i+0x54>
    41ba:	e088      	b.n	42ce <_printf_i+0x166>
    41bc:	d808      	bhi.n	41d0 <_printf_i+0x68>
    41be:	2a6f      	cmp	r2, #111	; 0x6f
    41c0:	d029      	beq.n	4216 <_printf_i+0xae>
    41c2:	2a70      	cmp	r2, #112	; 0x70
    41c4:	d1e7      	bne.n	4196 <_printf_i+0x2e>
    41c6:	2220      	movs	r2, #32
    41c8:	6809      	ldr	r1, [r1, #0]
    41ca:	430a      	orrs	r2, r1
    41cc:	6022      	str	r2, [r4, #0]
    41ce:	e003      	b.n	41d8 <_printf_i+0x70>
    41d0:	2a75      	cmp	r2, #117	; 0x75
    41d2:	d020      	beq.n	4216 <_printf_i+0xae>
    41d4:	2a78      	cmp	r2, #120	; 0x78
    41d6:	d1de      	bne.n	4196 <_printf_i+0x2e>
    41d8:	0022      	movs	r2, r4
    41da:	2178      	movs	r1, #120	; 0x78
    41dc:	3245      	adds	r2, #69	; 0x45
    41de:	7011      	strb	r1, [r2, #0]
    41e0:	4a6c      	ldr	r2, [pc, #432]	; (4394 <_printf_i+0x22c>)
    41e2:	e030      	b.n	4246 <_printf_i+0xde>
    41e4:	000e      	movs	r6, r1
    41e6:	681a      	ldr	r2, [r3, #0]
    41e8:	3642      	adds	r6, #66	; 0x42
    41ea:	1d11      	adds	r1, r2, #4
    41ec:	6019      	str	r1, [r3, #0]
    41ee:	6813      	ldr	r3, [r2, #0]
    41f0:	7033      	strb	r3, [r6, #0]
    41f2:	2301      	movs	r3, #1
    41f4:	e079      	b.n	42ea <_printf_i+0x182>
    41f6:	0649      	lsls	r1, r1, #25
    41f8:	d5d9      	bpl.n	41ae <_printf_i+0x46>
    41fa:	1d11      	adds	r1, r2, #4
    41fc:	6019      	str	r1, [r3, #0]
    41fe:	2300      	movs	r3, #0
    4200:	5ed5      	ldrsh	r5, [r2, r3]
    4202:	2d00      	cmp	r5, #0
    4204:	da03      	bge.n	420e <_printf_i+0xa6>
    4206:	232d      	movs	r3, #45	; 0x2d
    4208:	9a04      	ldr	r2, [sp, #16]
    420a:	426d      	negs	r5, r5
    420c:	7013      	strb	r3, [r2, #0]
    420e:	4b62      	ldr	r3, [pc, #392]	; (4398 <_printf_i+0x230>)
    4210:	270a      	movs	r7, #10
    4212:	9303      	str	r3, [sp, #12]
    4214:	e02f      	b.n	4276 <_printf_i+0x10e>
    4216:	6820      	ldr	r0, [r4, #0]
    4218:	6819      	ldr	r1, [r3, #0]
    421a:	0605      	lsls	r5, r0, #24
    421c:	d503      	bpl.n	4226 <_printf_i+0xbe>
    421e:	1d08      	adds	r0, r1, #4
    4220:	6018      	str	r0, [r3, #0]
    4222:	680d      	ldr	r5, [r1, #0]
    4224:	e005      	b.n	4232 <_printf_i+0xca>
    4226:	0640      	lsls	r0, r0, #25
    4228:	d5f9      	bpl.n	421e <_printf_i+0xb6>
    422a:	680d      	ldr	r5, [r1, #0]
    422c:	1d08      	adds	r0, r1, #4
    422e:	6018      	str	r0, [r3, #0]
    4230:	b2ad      	uxth	r5, r5
    4232:	4b59      	ldr	r3, [pc, #356]	; (4398 <_printf_i+0x230>)
    4234:	2708      	movs	r7, #8
    4236:	9303      	str	r3, [sp, #12]
    4238:	2a6f      	cmp	r2, #111	; 0x6f
    423a:	d018      	beq.n	426e <_printf_i+0x106>
    423c:	270a      	movs	r7, #10
    423e:	e016      	b.n	426e <_printf_i+0x106>
    4240:	3145      	adds	r1, #69	; 0x45
    4242:	700a      	strb	r2, [r1, #0]
    4244:	4a54      	ldr	r2, [pc, #336]	; (4398 <_printf_i+0x230>)
    4246:	9203      	str	r2, [sp, #12]
    4248:	681a      	ldr	r2, [r3, #0]
    424a:	6821      	ldr	r1, [r4, #0]
    424c:	1d10      	adds	r0, r2, #4
    424e:	6018      	str	r0, [r3, #0]
    4250:	6815      	ldr	r5, [r2, #0]
    4252:	0608      	lsls	r0, r1, #24
    4254:	d522      	bpl.n	429c <_printf_i+0x134>
    4256:	07cb      	lsls	r3, r1, #31
    4258:	d502      	bpl.n	4260 <_printf_i+0xf8>
    425a:	2320      	movs	r3, #32
    425c:	4319      	orrs	r1, r3
    425e:	6021      	str	r1, [r4, #0]
    4260:	2710      	movs	r7, #16
    4262:	2d00      	cmp	r5, #0
    4264:	d103      	bne.n	426e <_printf_i+0x106>
    4266:	2320      	movs	r3, #32
    4268:	6822      	ldr	r2, [r4, #0]
    426a:	439a      	bics	r2, r3
    426c:	6022      	str	r2, [r4, #0]
    426e:	0023      	movs	r3, r4
    4270:	2200      	movs	r2, #0
    4272:	3343      	adds	r3, #67	; 0x43
    4274:	701a      	strb	r2, [r3, #0]
    4276:	6863      	ldr	r3, [r4, #4]
    4278:	60a3      	str	r3, [r4, #8]
    427a:	2b00      	cmp	r3, #0
    427c:	db5c      	blt.n	4338 <_printf_i+0x1d0>
    427e:	2204      	movs	r2, #4
    4280:	6821      	ldr	r1, [r4, #0]
    4282:	4391      	bics	r1, r2
    4284:	6021      	str	r1, [r4, #0]
    4286:	2d00      	cmp	r5, #0
    4288:	d158      	bne.n	433c <_printf_i+0x1d4>
    428a:	9e04      	ldr	r6, [sp, #16]
    428c:	2b00      	cmp	r3, #0
    428e:	d064      	beq.n	435a <_printf_i+0x1f2>
    4290:	0026      	movs	r6, r4
    4292:	9b03      	ldr	r3, [sp, #12]
    4294:	3642      	adds	r6, #66	; 0x42
    4296:	781b      	ldrb	r3, [r3, #0]
    4298:	7033      	strb	r3, [r6, #0]
    429a:	e05e      	b.n	435a <_printf_i+0x1f2>
    429c:	0648      	lsls	r0, r1, #25
    429e:	d5da      	bpl.n	4256 <_printf_i+0xee>
    42a0:	b2ad      	uxth	r5, r5
    42a2:	e7d8      	b.n	4256 <_printf_i+0xee>
    42a4:	6809      	ldr	r1, [r1, #0]
    42a6:	681a      	ldr	r2, [r3, #0]
    42a8:	0608      	lsls	r0, r1, #24
    42aa:	d505      	bpl.n	42b8 <_printf_i+0x150>
    42ac:	1d11      	adds	r1, r2, #4
    42ae:	6019      	str	r1, [r3, #0]
    42b0:	6813      	ldr	r3, [r2, #0]
    42b2:	6962      	ldr	r2, [r4, #20]
    42b4:	601a      	str	r2, [r3, #0]
    42b6:	e006      	b.n	42c6 <_printf_i+0x15e>
    42b8:	0649      	lsls	r1, r1, #25
    42ba:	d5f7      	bpl.n	42ac <_printf_i+0x144>
    42bc:	1d11      	adds	r1, r2, #4
    42be:	6019      	str	r1, [r3, #0]
    42c0:	6813      	ldr	r3, [r2, #0]
    42c2:	8aa2      	ldrh	r2, [r4, #20]
    42c4:	801a      	strh	r2, [r3, #0]
    42c6:	2300      	movs	r3, #0
    42c8:	9e04      	ldr	r6, [sp, #16]
    42ca:	6123      	str	r3, [r4, #16]
    42cc:	e054      	b.n	4378 <_printf_i+0x210>
    42ce:	681a      	ldr	r2, [r3, #0]
    42d0:	1d11      	adds	r1, r2, #4
    42d2:	6019      	str	r1, [r3, #0]
    42d4:	6816      	ldr	r6, [r2, #0]
    42d6:	2100      	movs	r1, #0
    42d8:	6862      	ldr	r2, [r4, #4]
    42da:	0030      	movs	r0, r6
    42dc:	f000 fa1c 	bl	4718 <memchr>
    42e0:	2800      	cmp	r0, #0
    42e2:	d001      	beq.n	42e8 <_printf_i+0x180>
    42e4:	1b80      	subs	r0, r0, r6
    42e6:	6060      	str	r0, [r4, #4]
    42e8:	6863      	ldr	r3, [r4, #4]
    42ea:	6123      	str	r3, [r4, #16]
    42ec:	2300      	movs	r3, #0
    42ee:	9a04      	ldr	r2, [sp, #16]
    42f0:	7013      	strb	r3, [r2, #0]
    42f2:	e041      	b.n	4378 <_printf_i+0x210>
    42f4:	6923      	ldr	r3, [r4, #16]
    42f6:	0032      	movs	r2, r6
    42f8:	9906      	ldr	r1, [sp, #24]
    42fa:	9805      	ldr	r0, [sp, #20]
    42fc:	9d07      	ldr	r5, [sp, #28]
    42fe:	47a8      	blx	r5
    4300:	1c43      	adds	r3, r0, #1
    4302:	d043      	beq.n	438c <_printf_i+0x224>
    4304:	6823      	ldr	r3, [r4, #0]
    4306:	2500      	movs	r5, #0
    4308:	079b      	lsls	r3, r3, #30
    430a:	d40f      	bmi.n	432c <_printf_i+0x1c4>
    430c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    430e:	68e0      	ldr	r0, [r4, #12]
    4310:	4298      	cmp	r0, r3
    4312:	da3d      	bge.n	4390 <_printf_i+0x228>
    4314:	0018      	movs	r0, r3
    4316:	e03b      	b.n	4390 <_printf_i+0x228>
    4318:	0022      	movs	r2, r4
    431a:	2301      	movs	r3, #1
    431c:	3219      	adds	r2, #25
    431e:	9906      	ldr	r1, [sp, #24]
    4320:	9805      	ldr	r0, [sp, #20]
    4322:	9e07      	ldr	r6, [sp, #28]
    4324:	47b0      	blx	r6
    4326:	1c43      	adds	r3, r0, #1
    4328:	d030      	beq.n	438c <_printf_i+0x224>
    432a:	3501      	adds	r5, #1
    432c:	68e3      	ldr	r3, [r4, #12]
    432e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    4330:	1a9b      	subs	r3, r3, r2
    4332:	429d      	cmp	r5, r3
    4334:	dbf0      	blt.n	4318 <_printf_i+0x1b0>
    4336:	e7e9      	b.n	430c <_printf_i+0x1a4>
    4338:	2d00      	cmp	r5, #0
    433a:	d0a9      	beq.n	4290 <_printf_i+0x128>
    433c:	9e04      	ldr	r6, [sp, #16]
    433e:	0028      	movs	r0, r5
    4340:	0039      	movs	r1, r7
    4342:	f7ff f8a1 	bl	3488 <__aeabi_uidivmod>
    4346:	9b03      	ldr	r3, [sp, #12]
    4348:	3e01      	subs	r6, #1
    434a:	5c5b      	ldrb	r3, [r3, r1]
    434c:	0028      	movs	r0, r5
    434e:	7033      	strb	r3, [r6, #0]
    4350:	0039      	movs	r1, r7
    4352:	f7ff f813 	bl	337c <__udivsi3>
    4356:	1e05      	subs	r5, r0, #0
    4358:	d1f1      	bne.n	433e <_printf_i+0x1d6>
    435a:	2f08      	cmp	r7, #8
    435c:	d109      	bne.n	4372 <_printf_i+0x20a>
    435e:	6823      	ldr	r3, [r4, #0]
    4360:	07db      	lsls	r3, r3, #31
    4362:	d506      	bpl.n	4372 <_printf_i+0x20a>
    4364:	6863      	ldr	r3, [r4, #4]
    4366:	6922      	ldr	r2, [r4, #16]
    4368:	4293      	cmp	r3, r2
    436a:	dc02      	bgt.n	4372 <_printf_i+0x20a>
    436c:	2330      	movs	r3, #48	; 0x30
    436e:	3e01      	subs	r6, #1
    4370:	7033      	strb	r3, [r6, #0]
    4372:	9b04      	ldr	r3, [sp, #16]
    4374:	1b9b      	subs	r3, r3, r6
    4376:	6123      	str	r3, [r4, #16]
    4378:	9b07      	ldr	r3, [sp, #28]
    437a:	aa09      	add	r2, sp, #36	; 0x24
    437c:	9300      	str	r3, [sp, #0]
    437e:	0021      	movs	r1, r4
    4380:	9b06      	ldr	r3, [sp, #24]
    4382:	9805      	ldr	r0, [sp, #20]
    4384:	f7ff fe82 	bl	408c <_printf_common>
    4388:	1c43      	adds	r3, r0, #1
    438a:	d1b3      	bne.n	42f4 <_printf_i+0x18c>
    438c:	2001      	movs	r0, #1
    438e:	4240      	negs	r0, r0
    4390:	b00b      	add	sp, #44	; 0x2c
    4392:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4394:	0000699a 	.word	0x0000699a
    4398:	00006989 	.word	0x00006989

0000439c <_putc_r>:
    439c:	b570      	push	{r4, r5, r6, lr}
    439e:	0006      	movs	r6, r0
    43a0:	000d      	movs	r5, r1
    43a2:	0014      	movs	r4, r2
    43a4:	2800      	cmp	r0, #0
    43a6:	d004      	beq.n	43b2 <_putc_r+0x16>
    43a8:	6983      	ldr	r3, [r0, #24]
    43aa:	2b00      	cmp	r3, #0
    43ac:	d101      	bne.n	43b2 <_putc_r+0x16>
    43ae:	f7ff fb75 	bl	3a9c <__sinit>
    43b2:	4b12      	ldr	r3, [pc, #72]	; (43fc <_putc_r+0x60>)
    43b4:	429c      	cmp	r4, r3
    43b6:	d111      	bne.n	43dc <_putc_r+0x40>
    43b8:	6874      	ldr	r4, [r6, #4]
    43ba:	68a3      	ldr	r3, [r4, #8]
    43bc:	3b01      	subs	r3, #1
    43be:	60a3      	str	r3, [r4, #8]
    43c0:	2b00      	cmp	r3, #0
    43c2:	da05      	bge.n	43d0 <_putc_r+0x34>
    43c4:	69a2      	ldr	r2, [r4, #24]
    43c6:	4293      	cmp	r3, r2
    43c8:	db12      	blt.n	43f0 <_putc_r+0x54>
    43ca:	b2eb      	uxtb	r3, r5
    43cc:	2b0a      	cmp	r3, #10
    43ce:	d00f      	beq.n	43f0 <_putc_r+0x54>
    43d0:	6823      	ldr	r3, [r4, #0]
    43d2:	b2e8      	uxtb	r0, r5
    43d4:	1c5a      	adds	r2, r3, #1
    43d6:	6022      	str	r2, [r4, #0]
    43d8:	701d      	strb	r5, [r3, #0]
    43da:	bd70      	pop	{r4, r5, r6, pc}
    43dc:	4b08      	ldr	r3, [pc, #32]	; (4400 <_putc_r+0x64>)
    43de:	429c      	cmp	r4, r3
    43e0:	d101      	bne.n	43e6 <_putc_r+0x4a>
    43e2:	68b4      	ldr	r4, [r6, #8]
    43e4:	e7e9      	b.n	43ba <_putc_r+0x1e>
    43e6:	4b07      	ldr	r3, [pc, #28]	; (4404 <_putc_r+0x68>)
    43e8:	429c      	cmp	r4, r3
    43ea:	d1e6      	bne.n	43ba <_putc_r+0x1e>
    43ec:	68f4      	ldr	r4, [r6, #12]
    43ee:	e7e4      	b.n	43ba <_putc_r+0x1e>
    43f0:	0022      	movs	r2, r4
    43f2:	0029      	movs	r1, r5
    43f4:	0030      	movs	r0, r6
    43f6:	f000 f865 	bl	44c4 <__swbuf_r>
    43fa:	e7ee      	b.n	43da <_putc_r+0x3e>
    43fc:	00006938 	.word	0x00006938
    4400:	00006958 	.word	0x00006958
    4404:	00006918 	.word	0x00006918

00004408 <_sbrk_r>:
    4408:	2300      	movs	r3, #0
    440a:	b570      	push	{r4, r5, r6, lr}
    440c:	4c06      	ldr	r4, [pc, #24]	; (4428 <_sbrk_r+0x20>)
    440e:	0005      	movs	r5, r0
    4410:	0008      	movs	r0, r1
    4412:	6023      	str	r3, [r4, #0]
    4414:	f7fd fd76 	bl	1f04 <_sbrk>
    4418:	1c43      	adds	r3, r0, #1
    441a:	d103      	bne.n	4424 <_sbrk_r+0x1c>
    441c:	6823      	ldr	r3, [r4, #0]
    441e:	2b00      	cmp	r3, #0
    4420:	d000      	beq.n	4424 <_sbrk_r+0x1c>
    4422:	602b      	str	r3, [r5, #0]
    4424:	bd70      	pop	{r4, r5, r6, pc}
    4426:	46c0      	nop			; (mov r8, r8)
    4428:	20000ab4 	.word	0x20000ab4

0000442c <__sread>:
    442c:	b570      	push	{r4, r5, r6, lr}
    442e:	000c      	movs	r4, r1
    4430:	250e      	movs	r5, #14
    4432:	5f49      	ldrsh	r1, [r1, r5]
    4434:	f000 f97e 	bl	4734 <_read_r>
    4438:	2800      	cmp	r0, #0
    443a:	db03      	blt.n	4444 <__sread+0x18>
    443c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    443e:	181b      	adds	r3, r3, r0
    4440:	6563      	str	r3, [r4, #84]	; 0x54
    4442:	bd70      	pop	{r4, r5, r6, pc}
    4444:	89a3      	ldrh	r3, [r4, #12]
    4446:	4a02      	ldr	r2, [pc, #8]	; (4450 <__sread+0x24>)
    4448:	4013      	ands	r3, r2
    444a:	81a3      	strh	r3, [r4, #12]
    444c:	e7f9      	b.n	4442 <__sread+0x16>
    444e:	46c0      	nop			; (mov r8, r8)
    4450:	ffffefff 	.word	0xffffefff

00004454 <__swrite>:
    4454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4456:	001f      	movs	r7, r3
    4458:	898b      	ldrh	r3, [r1, #12]
    445a:	0005      	movs	r5, r0
    445c:	000c      	movs	r4, r1
    445e:	0016      	movs	r6, r2
    4460:	05db      	lsls	r3, r3, #23
    4462:	d505      	bpl.n	4470 <__swrite+0x1c>
    4464:	230e      	movs	r3, #14
    4466:	5ec9      	ldrsh	r1, [r1, r3]
    4468:	2200      	movs	r2, #0
    446a:	2302      	movs	r3, #2
    446c:	f000 f940 	bl	46f0 <_lseek_r>
    4470:	89a3      	ldrh	r3, [r4, #12]
    4472:	4a05      	ldr	r2, [pc, #20]	; (4488 <__swrite+0x34>)
    4474:	0028      	movs	r0, r5
    4476:	4013      	ands	r3, r2
    4478:	81a3      	strh	r3, [r4, #12]
    447a:	0032      	movs	r2, r6
    447c:	230e      	movs	r3, #14
    447e:	5ee1      	ldrsh	r1, [r4, r3]
    4480:	003b      	movs	r3, r7
    4482:	f000 f875 	bl	4570 <_write_r>
    4486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4488:	ffffefff 	.word	0xffffefff

0000448c <__sseek>:
    448c:	b570      	push	{r4, r5, r6, lr}
    448e:	000c      	movs	r4, r1
    4490:	250e      	movs	r5, #14
    4492:	5f49      	ldrsh	r1, [r1, r5]
    4494:	f000 f92c 	bl	46f0 <_lseek_r>
    4498:	89a3      	ldrh	r3, [r4, #12]
    449a:	1c42      	adds	r2, r0, #1
    449c:	d103      	bne.n	44a6 <__sseek+0x1a>
    449e:	4a05      	ldr	r2, [pc, #20]	; (44b4 <__sseek+0x28>)
    44a0:	4013      	ands	r3, r2
    44a2:	81a3      	strh	r3, [r4, #12]
    44a4:	bd70      	pop	{r4, r5, r6, pc}
    44a6:	2280      	movs	r2, #128	; 0x80
    44a8:	0152      	lsls	r2, r2, #5
    44aa:	4313      	orrs	r3, r2
    44ac:	81a3      	strh	r3, [r4, #12]
    44ae:	6560      	str	r0, [r4, #84]	; 0x54
    44b0:	e7f8      	b.n	44a4 <__sseek+0x18>
    44b2:	46c0      	nop			; (mov r8, r8)
    44b4:	ffffefff 	.word	0xffffefff

000044b8 <__sclose>:
    44b8:	b510      	push	{r4, lr}
    44ba:	230e      	movs	r3, #14
    44bc:	5ec9      	ldrsh	r1, [r1, r3]
    44be:	f000 f8e1 	bl	4684 <_close_r>
    44c2:	bd10      	pop	{r4, pc}

000044c4 <__swbuf_r>:
    44c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    44c6:	0005      	movs	r5, r0
    44c8:	000e      	movs	r6, r1
    44ca:	0014      	movs	r4, r2
    44cc:	2800      	cmp	r0, #0
    44ce:	d004      	beq.n	44da <__swbuf_r+0x16>
    44d0:	6983      	ldr	r3, [r0, #24]
    44d2:	2b00      	cmp	r3, #0
    44d4:	d101      	bne.n	44da <__swbuf_r+0x16>
    44d6:	f7ff fae1 	bl	3a9c <__sinit>
    44da:	4b22      	ldr	r3, [pc, #136]	; (4564 <__swbuf_r+0xa0>)
    44dc:	429c      	cmp	r4, r3
    44de:	d12d      	bne.n	453c <__swbuf_r+0x78>
    44e0:	686c      	ldr	r4, [r5, #4]
    44e2:	69a3      	ldr	r3, [r4, #24]
    44e4:	60a3      	str	r3, [r4, #8]
    44e6:	89a3      	ldrh	r3, [r4, #12]
    44e8:	071b      	lsls	r3, r3, #28
    44ea:	d531      	bpl.n	4550 <__swbuf_r+0x8c>
    44ec:	6923      	ldr	r3, [r4, #16]
    44ee:	2b00      	cmp	r3, #0
    44f0:	d02e      	beq.n	4550 <__swbuf_r+0x8c>
    44f2:	6823      	ldr	r3, [r4, #0]
    44f4:	6922      	ldr	r2, [r4, #16]
    44f6:	b2f7      	uxtb	r7, r6
    44f8:	1a98      	subs	r0, r3, r2
    44fa:	6963      	ldr	r3, [r4, #20]
    44fc:	b2f6      	uxtb	r6, r6
    44fe:	4298      	cmp	r0, r3
    4500:	db05      	blt.n	450e <__swbuf_r+0x4a>
    4502:	0021      	movs	r1, r4
    4504:	0028      	movs	r0, r5
    4506:	f7ff fa5b 	bl	39c0 <_fflush_r>
    450a:	2800      	cmp	r0, #0
    450c:	d126      	bne.n	455c <__swbuf_r+0x98>
    450e:	68a3      	ldr	r3, [r4, #8]
    4510:	3001      	adds	r0, #1
    4512:	3b01      	subs	r3, #1
    4514:	60a3      	str	r3, [r4, #8]
    4516:	6823      	ldr	r3, [r4, #0]
    4518:	1c5a      	adds	r2, r3, #1
    451a:	6022      	str	r2, [r4, #0]
    451c:	701f      	strb	r7, [r3, #0]
    451e:	6963      	ldr	r3, [r4, #20]
    4520:	4298      	cmp	r0, r3
    4522:	d004      	beq.n	452e <__swbuf_r+0x6a>
    4524:	89a3      	ldrh	r3, [r4, #12]
    4526:	07db      	lsls	r3, r3, #31
    4528:	d51a      	bpl.n	4560 <__swbuf_r+0x9c>
    452a:	2e0a      	cmp	r6, #10
    452c:	d118      	bne.n	4560 <__swbuf_r+0x9c>
    452e:	0021      	movs	r1, r4
    4530:	0028      	movs	r0, r5
    4532:	f7ff fa45 	bl	39c0 <_fflush_r>
    4536:	2800      	cmp	r0, #0
    4538:	d012      	beq.n	4560 <__swbuf_r+0x9c>
    453a:	e00f      	b.n	455c <__swbuf_r+0x98>
    453c:	4b0a      	ldr	r3, [pc, #40]	; (4568 <__swbuf_r+0xa4>)
    453e:	429c      	cmp	r4, r3
    4540:	d101      	bne.n	4546 <__swbuf_r+0x82>
    4542:	68ac      	ldr	r4, [r5, #8]
    4544:	e7cd      	b.n	44e2 <__swbuf_r+0x1e>
    4546:	4b09      	ldr	r3, [pc, #36]	; (456c <__swbuf_r+0xa8>)
    4548:	429c      	cmp	r4, r3
    454a:	d1ca      	bne.n	44e2 <__swbuf_r+0x1e>
    454c:	68ec      	ldr	r4, [r5, #12]
    454e:	e7c8      	b.n	44e2 <__swbuf_r+0x1e>
    4550:	0021      	movs	r1, r4
    4552:	0028      	movs	r0, r5
    4554:	f000 f820 	bl	4598 <__swsetup_r>
    4558:	2800      	cmp	r0, #0
    455a:	d0ca      	beq.n	44f2 <__swbuf_r+0x2e>
    455c:	2601      	movs	r6, #1
    455e:	4276      	negs	r6, r6
    4560:	0030      	movs	r0, r6
    4562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4564:	00006938 	.word	0x00006938
    4568:	00006958 	.word	0x00006958
    456c:	00006918 	.word	0x00006918

00004570 <_write_r>:
    4570:	b570      	push	{r4, r5, r6, lr}
    4572:	0005      	movs	r5, r0
    4574:	0008      	movs	r0, r1
    4576:	0011      	movs	r1, r2
    4578:	2200      	movs	r2, #0
    457a:	4c06      	ldr	r4, [pc, #24]	; (4594 <_write_r+0x24>)
    457c:	6022      	str	r2, [r4, #0]
    457e:	001a      	movs	r2, r3
    4580:	f7fd fc98 	bl	1eb4 <_write>
    4584:	1c43      	adds	r3, r0, #1
    4586:	d103      	bne.n	4590 <_write_r+0x20>
    4588:	6823      	ldr	r3, [r4, #0]
    458a:	2b00      	cmp	r3, #0
    458c:	d000      	beq.n	4590 <_write_r+0x20>
    458e:	602b      	str	r3, [r5, #0]
    4590:	bd70      	pop	{r4, r5, r6, pc}
    4592:	46c0      	nop			; (mov r8, r8)
    4594:	20000ab4 	.word	0x20000ab4

00004598 <__swsetup_r>:
    4598:	4b36      	ldr	r3, [pc, #216]	; (4674 <__swsetup_r+0xdc>)
    459a:	b570      	push	{r4, r5, r6, lr}
    459c:	681d      	ldr	r5, [r3, #0]
    459e:	0006      	movs	r6, r0
    45a0:	000c      	movs	r4, r1
    45a2:	2d00      	cmp	r5, #0
    45a4:	d005      	beq.n	45b2 <__swsetup_r+0x1a>
    45a6:	69ab      	ldr	r3, [r5, #24]
    45a8:	2b00      	cmp	r3, #0
    45aa:	d102      	bne.n	45b2 <__swsetup_r+0x1a>
    45ac:	0028      	movs	r0, r5
    45ae:	f7ff fa75 	bl	3a9c <__sinit>
    45b2:	4b31      	ldr	r3, [pc, #196]	; (4678 <__swsetup_r+0xe0>)
    45b4:	429c      	cmp	r4, r3
    45b6:	d10f      	bne.n	45d8 <__swsetup_r+0x40>
    45b8:	686c      	ldr	r4, [r5, #4]
    45ba:	230c      	movs	r3, #12
    45bc:	5ee2      	ldrsh	r2, [r4, r3]
    45be:	b293      	uxth	r3, r2
    45c0:	0719      	lsls	r1, r3, #28
    45c2:	d42d      	bmi.n	4620 <__swsetup_r+0x88>
    45c4:	06d9      	lsls	r1, r3, #27
    45c6:	d411      	bmi.n	45ec <__swsetup_r+0x54>
    45c8:	2309      	movs	r3, #9
    45ca:	2001      	movs	r0, #1
    45cc:	6033      	str	r3, [r6, #0]
    45ce:	3337      	adds	r3, #55	; 0x37
    45d0:	4313      	orrs	r3, r2
    45d2:	81a3      	strh	r3, [r4, #12]
    45d4:	4240      	negs	r0, r0
    45d6:	bd70      	pop	{r4, r5, r6, pc}
    45d8:	4b28      	ldr	r3, [pc, #160]	; (467c <__swsetup_r+0xe4>)
    45da:	429c      	cmp	r4, r3
    45dc:	d101      	bne.n	45e2 <__swsetup_r+0x4a>
    45de:	68ac      	ldr	r4, [r5, #8]
    45e0:	e7eb      	b.n	45ba <__swsetup_r+0x22>
    45e2:	4b27      	ldr	r3, [pc, #156]	; (4680 <__swsetup_r+0xe8>)
    45e4:	429c      	cmp	r4, r3
    45e6:	d1e8      	bne.n	45ba <__swsetup_r+0x22>
    45e8:	68ec      	ldr	r4, [r5, #12]
    45ea:	e7e6      	b.n	45ba <__swsetup_r+0x22>
    45ec:	075b      	lsls	r3, r3, #29
    45ee:	d513      	bpl.n	4618 <__swsetup_r+0x80>
    45f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
    45f2:	2900      	cmp	r1, #0
    45f4:	d008      	beq.n	4608 <__swsetup_r+0x70>
    45f6:	0023      	movs	r3, r4
    45f8:	3344      	adds	r3, #68	; 0x44
    45fa:	4299      	cmp	r1, r3
    45fc:	d002      	beq.n	4604 <__swsetup_r+0x6c>
    45fe:	0030      	movs	r0, r6
    4600:	f7ff fb58 	bl	3cb4 <_free_r>
    4604:	2300      	movs	r3, #0
    4606:	6363      	str	r3, [r4, #52]	; 0x34
    4608:	2224      	movs	r2, #36	; 0x24
    460a:	89a3      	ldrh	r3, [r4, #12]
    460c:	4393      	bics	r3, r2
    460e:	81a3      	strh	r3, [r4, #12]
    4610:	2300      	movs	r3, #0
    4612:	6063      	str	r3, [r4, #4]
    4614:	6923      	ldr	r3, [r4, #16]
    4616:	6023      	str	r3, [r4, #0]
    4618:	2308      	movs	r3, #8
    461a:	89a2      	ldrh	r2, [r4, #12]
    461c:	4313      	orrs	r3, r2
    461e:	81a3      	strh	r3, [r4, #12]
    4620:	6923      	ldr	r3, [r4, #16]
    4622:	2b00      	cmp	r3, #0
    4624:	d10b      	bne.n	463e <__swsetup_r+0xa6>
    4626:	21a0      	movs	r1, #160	; 0xa0
    4628:	2280      	movs	r2, #128	; 0x80
    462a:	89a3      	ldrh	r3, [r4, #12]
    462c:	0089      	lsls	r1, r1, #2
    462e:	0092      	lsls	r2, r2, #2
    4630:	400b      	ands	r3, r1
    4632:	4293      	cmp	r3, r2
    4634:	d003      	beq.n	463e <__swsetup_r+0xa6>
    4636:	0021      	movs	r1, r4
    4638:	0030      	movs	r0, r6
    463a:	f7ff faed 	bl	3c18 <__smakebuf_r>
    463e:	2301      	movs	r3, #1
    4640:	89a2      	ldrh	r2, [r4, #12]
    4642:	4013      	ands	r3, r2
    4644:	d011      	beq.n	466a <__swsetup_r+0xd2>
    4646:	2300      	movs	r3, #0
    4648:	60a3      	str	r3, [r4, #8]
    464a:	6963      	ldr	r3, [r4, #20]
    464c:	425b      	negs	r3, r3
    464e:	61a3      	str	r3, [r4, #24]
    4650:	2000      	movs	r0, #0
    4652:	6923      	ldr	r3, [r4, #16]
    4654:	4283      	cmp	r3, r0
    4656:	d1be      	bne.n	45d6 <__swsetup_r+0x3e>
    4658:	230c      	movs	r3, #12
    465a:	5ee2      	ldrsh	r2, [r4, r3]
    465c:	0613      	lsls	r3, r2, #24
    465e:	d5ba      	bpl.n	45d6 <__swsetup_r+0x3e>
    4660:	2340      	movs	r3, #64	; 0x40
    4662:	4313      	orrs	r3, r2
    4664:	81a3      	strh	r3, [r4, #12]
    4666:	3801      	subs	r0, #1
    4668:	e7b5      	b.n	45d6 <__swsetup_r+0x3e>
    466a:	0792      	lsls	r2, r2, #30
    466c:	d400      	bmi.n	4670 <__swsetup_r+0xd8>
    466e:	6963      	ldr	r3, [r4, #20]
    4670:	60a3      	str	r3, [r4, #8]
    4672:	e7ed      	b.n	4650 <__swsetup_r+0xb8>
    4674:	20000158 	.word	0x20000158
    4678:	00006938 	.word	0x00006938
    467c:	00006958 	.word	0x00006958
    4680:	00006918 	.word	0x00006918

00004684 <_close_r>:
    4684:	2300      	movs	r3, #0
    4686:	b570      	push	{r4, r5, r6, lr}
    4688:	4c06      	ldr	r4, [pc, #24]	; (46a4 <_close_r+0x20>)
    468a:	0005      	movs	r5, r0
    468c:	0008      	movs	r0, r1
    468e:	6023      	str	r3, [r4, #0]
    4690:	f7fd fc4a 	bl	1f28 <_close>
    4694:	1c43      	adds	r3, r0, #1
    4696:	d103      	bne.n	46a0 <_close_r+0x1c>
    4698:	6823      	ldr	r3, [r4, #0]
    469a:	2b00      	cmp	r3, #0
    469c:	d000      	beq.n	46a0 <_close_r+0x1c>
    469e:	602b      	str	r3, [r5, #0]
    46a0:	bd70      	pop	{r4, r5, r6, pc}
    46a2:	46c0      	nop			; (mov r8, r8)
    46a4:	20000ab4 	.word	0x20000ab4

000046a8 <_fstat_r>:
    46a8:	2300      	movs	r3, #0
    46aa:	b570      	push	{r4, r5, r6, lr}
    46ac:	4c06      	ldr	r4, [pc, #24]	; (46c8 <_fstat_r+0x20>)
    46ae:	0005      	movs	r5, r0
    46b0:	0008      	movs	r0, r1
    46b2:	0011      	movs	r1, r2
    46b4:	6023      	str	r3, [r4, #0]
    46b6:	f7fd fc3a 	bl	1f2e <_fstat>
    46ba:	1c43      	adds	r3, r0, #1
    46bc:	d103      	bne.n	46c6 <_fstat_r+0x1e>
    46be:	6823      	ldr	r3, [r4, #0]
    46c0:	2b00      	cmp	r3, #0
    46c2:	d000      	beq.n	46c6 <_fstat_r+0x1e>
    46c4:	602b      	str	r3, [r5, #0]
    46c6:	bd70      	pop	{r4, r5, r6, pc}
    46c8:	20000ab4 	.word	0x20000ab4

000046cc <_isatty_r>:
    46cc:	2300      	movs	r3, #0
    46ce:	b570      	push	{r4, r5, r6, lr}
    46d0:	4c06      	ldr	r4, [pc, #24]	; (46ec <_isatty_r+0x20>)
    46d2:	0005      	movs	r5, r0
    46d4:	0008      	movs	r0, r1
    46d6:	6023      	str	r3, [r4, #0]
    46d8:	f7fd fc2e 	bl	1f38 <_isatty>
    46dc:	1c43      	adds	r3, r0, #1
    46de:	d103      	bne.n	46e8 <_isatty_r+0x1c>
    46e0:	6823      	ldr	r3, [r4, #0]
    46e2:	2b00      	cmp	r3, #0
    46e4:	d000      	beq.n	46e8 <_isatty_r+0x1c>
    46e6:	602b      	str	r3, [r5, #0]
    46e8:	bd70      	pop	{r4, r5, r6, pc}
    46ea:	46c0      	nop			; (mov r8, r8)
    46ec:	20000ab4 	.word	0x20000ab4

000046f0 <_lseek_r>:
    46f0:	b570      	push	{r4, r5, r6, lr}
    46f2:	0005      	movs	r5, r0
    46f4:	0008      	movs	r0, r1
    46f6:	0011      	movs	r1, r2
    46f8:	2200      	movs	r2, #0
    46fa:	4c06      	ldr	r4, [pc, #24]	; (4714 <_lseek_r+0x24>)
    46fc:	6022      	str	r2, [r4, #0]
    46fe:	001a      	movs	r2, r3
    4700:	f7fd fc1c 	bl	1f3c <_lseek>
    4704:	1c43      	adds	r3, r0, #1
    4706:	d103      	bne.n	4710 <_lseek_r+0x20>
    4708:	6823      	ldr	r3, [r4, #0]
    470a:	2b00      	cmp	r3, #0
    470c:	d000      	beq.n	4710 <_lseek_r+0x20>
    470e:	602b      	str	r3, [r5, #0]
    4710:	bd70      	pop	{r4, r5, r6, pc}
    4712:	46c0      	nop			; (mov r8, r8)
    4714:	20000ab4 	.word	0x20000ab4

00004718 <memchr>:
    4718:	b2c9      	uxtb	r1, r1
    471a:	1882      	adds	r2, r0, r2
    471c:	4290      	cmp	r0, r2
    471e:	d101      	bne.n	4724 <memchr+0xc>
    4720:	2000      	movs	r0, #0
    4722:	4770      	bx	lr
    4724:	7803      	ldrb	r3, [r0, #0]
    4726:	428b      	cmp	r3, r1
    4728:	d0fb      	beq.n	4722 <memchr+0xa>
    472a:	3001      	adds	r0, #1
    472c:	e7f6      	b.n	471c <memchr+0x4>

0000472e <__malloc_lock>:
    472e:	4770      	bx	lr

00004730 <__malloc_unlock>:
    4730:	4770      	bx	lr
	...

00004734 <_read_r>:
    4734:	b570      	push	{r4, r5, r6, lr}
    4736:	0005      	movs	r5, r0
    4738:	0008      	movs	r0, r1
    473a:	0011      	movs	r1, r2
    473c:	2200      	movs	r2, #0
    473e:	4c06      	ldr	r4, [pc, #24]	; (4758 <_read_r+0x24>)
    4740:	6022      	str	r2, [r4, #0]
    4742:	001a      	movs	r2, r3
    4744:	f7fd fb94 	bl	1e70 <_read>
    4748:	1c43      	adds	r3, r0, #1
    474a:	d103      	bne.n	4754 <_read_r+0x20>
    474c:	6823      	ldr	r3, [r4, #0]
    474e:	2b00      	cmp	r3, #0
    4750:	d000      	beq.n	4754 <_read_r+0x20>
    4752:	602b      	str	r3, [r5, #0]
    4754:	bd70      	pop	{r4, r5, r6, pc}
    4756:	46c0      	nop			; (mov r8, r8)
    4758:	20000ab4 	.word	0x20000ab4
    475c:	000a000a 	.word	0x000a000a
    4760:	00140014 	.word	0x00140014
    4764:	00000014 	.word	0x00000014
    4768:	000a017c 	.word	0x000a017c
    476c:	000a017c 	.word	0x000a017c
    4770:	00140186 	.word	0x00140186
    4774:	00140000 	.word	0x00140000
    4778:	0122000a 	.word	0x0122000a
    477c:	00140186 	.word	0x00140186
    4780:	01220190 	.word	0x01220190
    4784:	0122000a 	.word	0x0122000a
    4788:	012c0014 	.word	0x012c0014
    478c:	0122017c 	.word	0x0122017c
    4790:	012c0186 	.word	0x012c0186
    4794:	012c0014 	.word	0x012c0014
    4798:	0136017c 	.word	0x0136017c
    479c:	001e0000 	.word	0x001e0000
    47a0:	00280032 	.word	0x00280032
    47a4:	00320000 	.word	0x00320000
    47a8:	003c0032 	.word	0x003c0032
    47ac:	001e0050 	.word	0x001e0050
    47b0:	00280118 	.word	0x00280118
    47b4:	00280046 	.word	0x00280046
    47b8:	00be0050 	.word	0x00be0050
    47bc:	00be0050 	.word	0x00be0050
    47c0:	00c80118 	.word	0x00c80118
    47c4:	00280118 	.word	0x00280118
    47c8:	00be0122 	.word	0x00be0122
    47cc:	00460000 	.word	0x00460000
    47d0:	00500032 	.word	0x00500032
    47d4:	005a0000 	.word	0x005a0000
    47d8:	00640032 	.word	0x00640032
    47dc:	006e0000 	.word	0x006e0000
    47e0:	00780032 	.word	0x00780032
    47e4:	00820000 	.word	0x00820000
    47e8:	008c0032 	.word	0x008c0032
    47ec:	00960000 	.word	0x00960000
    47f0:	00a00032 	.word	0x00a00032
    47f4:	00aa0000 	.word	0x00aa0000
    47f8:	00b40032 	.word	0x00b40032
    47fc:	00be0000 	.word	0x00be0000
    4800:	00c80032 	.word	0x00c80032
    4804:	00c8012c 	.word	0x00c8012c
    4808:	00d20172 	.word	0x00d20172
    480c:	00dc001e 	.word	0x00dc001e
    4810:	00e60172 	.word	0x00e60172
    4814:	00f0001e 	.word	0x00f0001e
    4818:	00fa0172 	.word	0x00fa0172
    481c:	0104001e 	.word	0x0104001e
    4820:	010e0172 	.word	0x010e0172
    4824:	0118005a 	.word	0x0118005a
    4828:	0122012c 	.word	0x0122012c
    482c:	82be50b4 	.word	0x82be50b4
    4830:	8cbe82aa 	.word	0x8cbe82aa
    4834:	64963c8c 	.word	0x64963c8c
    4838:	64dc3cd2 	.word	0x64dc3cd2
    483c:	a08c9682 	.word	0xa08c9682
    4840:	aadca08c 	.word	0xaadca08c
    4844:	a0e696dc 	.word	0xa0e696dc
    4848:	50f03c78 	.word	0x50f03c78
    484c:	5a78466e 	.word	0x5a78466e
    4850:	aaaa3c96 	.word	0xaaaa3c96
    4854:	a0dc3cc8 	.word	0xa0dc3cc8
    4858:	aae6a0d2 	.word	0xaae6a0d2
    485c:	6e617254 	.word	0x6e617254
    4860:	69722073 	.word	0x69722073
    4864:	73746867 	.word	0x73746867
    4868:	65726120 	.word	0x65726120
    486c:	6d756820 	.word	0x6d756820
    4870:	72206e61 	.word	0x72206e61
    4874:	74686769 	.word	0x74686769
    4878:	00000073 	.word	0x00000073
    487c:	355e3331 	.word	0x355e3331
    4880:	31202b20 	.word	0x31202b20
    4884:	20355e36 	.word	0x20355e36
    4888:	3731203d 	.word	0x3731203d
    488c:	0000355e 	.word	0x0000355e
    4890:	69746552 	.word	0x69746552
    4894:	616c7563 	.word	0x616c7563
    4898:	676e6974 	.word	0x676e6974
    489c:	6c705320 	.word	0x6c705320
    48a0:	73656e69 	.word	0x73656e69
    48a4:	00000000 	.word	0x00000000
    48a8:	6c6f6976 	.word	0x6c6f6976
    48ac:	65636e65 	.word	0x65636e65
    48b0:	726f772e 	.word	0x726f772e
    48b4:	0000736b 	.word	0x0000736b
    48b8:	73626154 	.word	0x73626154
    48bc:	00000021 	.word	0x00000021
    48c0:	6c6c694b 	.word	0x6c6c694b
    48c4:	6c694220 	.word	0x6c694220
    48c8:	6e6f696c 	.word	0x6e6f696c
    48cc:	65726961 	.word	0x65726961
    48d0:	61282073 	.word	0x61282073
    48d4:	5420646e 	.word	0x5420646e
    48d8:	6c6c6972 	.word	0x6c6c6972
    48dc:	616e6f69 	.word	0x616e6f69
    48e0:	29657269 	.word	0x29657269
    48e4:	00000000 	.word	0x00000000
    48e8:	65746e49 	.word	0x65746e49
    48ec:	74736572 	.word	0x74736572
    48f0:	206e6920 	.word	0x206e6920
    48f4:	68636574 	.word	0x68636574
    48f8:	6f6c6f6e 	.word	0x6f6c6f6e
    48fc:	69207967 	.word	0x69207967
    4900:	6f6e2073 	.word	0x6f6e2073
    4904:	20612074 	.word	0x20612074
    4908:	73726570 	.word	0x73726570
    490c:	6c616e6f 	.word	0x6c616e6f
    4910:	00797469 	.word	0x00797469
    4914:	50203031 	.word	0x50203031
    4918:	544e4952 	.word	0x544e4952
    491c:	52484320 	.word	0x52484320
    4920:	30322824 	.word	0x30322824
    4924:	2b352e35 	.word	0x2b352e35
    4928:	28444e52 	.word	0x28444e52
    492c:	3b292931 	.word	0x3b292931
    4930:	47203a20 	.word	0x47203a20
    4934:	204f544f 	.word	0x204f544f
    4938:	00003031 	.word	0x00003031
    493c:	67206f4e 	.word	0x67206f4e
    4940:	2e73646f 	.word	0x2e73646f
    4944:	206f4e20 	.word	0x206f4e20
    4948:	7473616d 	.word	0x7473616d
    494c:	2e737265 	.word	0x2e737265
    4950:	206f4e20 	.word	0x206f4e20
    4954:	65747865 	.word	0x65747865
    4958:	6c616e72 	.word	0x6c616e72
    495c:	62696c20 	.word	0x62696c20
    4960:	69726172 	.word	0x69726172
    4964:	002e7365 	.word	0x002e7365
    4968:	6c6c694b 	.word	0x6c6c694b
    496c:	7a614e20 	.word	0x7a614e20
    4970:	00007369 	.word	0x00007369
    4974:	6e616954 	.word	0x6e616954
    4978:	656d6e61 	.word	0x656d6e61
    497c:	7153206e 	.word	0x7153206e
    4980:	65726175 	.word	0x65726175
    4984:	38393120 	.word	0x38393120
    4988:	00000039 	.word	0x00000039
    498c:	72656d41 	.word	0x72656d41
    4990:	20616369 	.word	0x20616369
    4994:	20736177 	.word	0x20736177
    4998:	6e756f66 	.word	0x6e756f66
    499c:	20646564 	.word	0x20646564
    49a0:	73206e6f 	.word	0x73206e6f
    49a4:	6576616c 	.word	0x6576616c
    49a8:	00007972 	.word	0x00007972
    49ac:	72656854 	.word	0x72656854
    49b0:	73692065 	.word	0x73692065
    49b4:	6c6e6f20 	.word	0x6c6e6f20
    49b8:	61632079 	.word	0x61632079
    49bc:	61746970 	.word	0x61746970
    49c0:	6e61206c 	.word	0x6e61206c
    49c4:	616c2064 	.word	0x616c2064
    49c8:	00726f62 	.word	0x00726f62
    49cc:	6f636e45 	.word	0x6f636e45
    49d0:	67617275 	.word	0x67617275
    49d4:	735f2065 	.word	0x735f2065
    49d8:	656d6d79 	.word	0x656d6d79
    49dc:	63697274 	.word	0x63697274
    49e0:	6c63205f 	.word	0x6c63205f
    49e4:	20737361 	.word	0x20737361
    49e8:	66726177 	.word	0x66726177
    49ec:	00657261 	.word	0x00657261
    49f0:	52554324 	.word	0x52554324
    49f4:	544e4552 	.word	0x544e4552
    49f8:	4d454d5f 	.word	0x4d454d5f
    49fc:	00000045 	.word	0x00000045
    4a00:	694e2041 	.word	0x694e2041
    4a04:	54206563 	.word	0x54206563
    4a08:	00005954 	.word	0x00005954
    4a0c:	78696e55 	.word	0x78696e55
    4a10:	6f706520 	.word	0x6f706520
    4a14:	6d206863 	.word	0x6d206863
    4a18:	73756e69 	.word	0x73756e69
    4a1c:	46783020 	.word	0x46783020
    4a20:	61642046 	.word	0x61642046
    4a24:	00007379 	.word	0x00007379
    4a28:	3d202069 	.word	0x3d202069
    4a2c:	35783020 	.word	0x35783020
    4a30:	35373366 	.word	0x35373366
    4a34:	20666439 	.word	0x20666439
    4a38:	2028202d 	.word	0x2028202d
    4a3c:	3e3e2069 	.word	0x3e3e2069
    4a40:	29203120 	.word	0x29203120
    4a44:	0000003b 	.word	0x0000003b
    4a48:	42414341 	.word	0x42414341
    4a4c:	00000000 	.word	0x00000000
    4a50:	63666544 	.word	0x63666544
    4a54:	73276e6f 	.word	0x73276e6f
    4a58:	6e616320 	.word	0x6e616320
    4a5c:	656c6563 	.word	0x656c6563
    4a60:	00002e64 	.word	0x00002e64
    4a64:	73746152 	.word	0x73746152
    4a68:	7473656e 	.word	0x7473656e
    4a6c:	6f4e203a 	.word	0x6f4e203a
    4a70:	6e696874 	.word	0x6e696874
    4a74:	6f542067 	.word	0x6f542067
    4a78:	216f4420 	.word	0x216f4420
    4a7c:	00000000 	.word	0x00000000
    4a80:	68207449 	.word	0x68207449
    4a84:	36207361 	.word	0x36207361
    4a88:	656b2039 	.word	0x656b2039
    4a8c:	002e7379 	.word	0x002e7379
    4a90:	61636542 	.word	0x61636542
    4a94:	20657375 	.word	0x20657375
    4a98:	342d5456 	.word	0x342d5456
    4a9c:	77203032 	.word	0x77203032
    4aa0:	61207361 	.word	0x61207361
    4aa4:	6165726c 	.word	0x6165726c
    4aa8:	74207964 	.word	0x74207964
    4aac:	6e656b61 	.word	0x6e656b61
    4ab0:	00000000 	.word	0x00000000
    4ab4:	706d6f43 	.word	0x706d6f43
    4ab8:	73736572 	.word	0x73736572
    4abc:	206e6f69 	.word	0x206e6f69
    4ac0:	6f676c61 	.word	0x6f676c61
    4ac4:	68746972 	.word	0x68746972
    4ac8:	6162206d 	.word	0x6162206d
    4acc:	20646573 	.word	0x20646573
    4ad0:	42206e6f 	.word	0x42206e6f
    4ad4:	28205042 	.word	0x28205042
    4ad8:	37393931 	.word	0x37393931
    4adc:	00000029 	.word	0x00000029
    4ae0:	20656854 	.word	0x20656854
    4ae4:	72756f73 	.word	0x72756f73
    4ae8:	6f206563 	.word	0x6f206563
    4aec:	68742066 	.word	0x68742066
    4af0:	694d2065 	.word	0x694d2065
    4af4:	73697373 	.word	0x73697373
    4af8:	70706973 	.word	0x70706973
    4afc:	69722069 	.word	0x69722069
    4b00:	20726576 	.word	0x20726576
    4b04:	69207369 	.word	0x69207369
    4b08:	6550206e 	.word	0x6550206e
    4b0c:	79736e6e 	.word	0x79736e6e
    4b10:	6e61766c 	.word	0x6e61766c
    4b14:	002e6169 	.word	0x002e6169
    4b18:	6566664f 	.word	0x6566664f
    4b1c:	7669736e 	.word	0x7669736e
    4b20:	61682065 	.word	0x61682065
    4b24:	61776472 	.word	0x61776472
    4b28:	00006572 	.word	0x00006572
    4b2c:	6c6c6f46 	.word	0x6c6c6f46
    4b30:	5720776f 	.word	0x5720776f
    4b34:	646c726f 	.word	0x646c726f
    4b38:	676f5020 	.word	0x676f5020
    4b3c:	64654620 	.word	0x64654620
    4b40:	74617265 	.word	0x74617265
    4b44:	206e6f69 	.word	0x206e6f69
    4b48:	40202020 	.word	0x40202020
    4b4c:	6c726f57 	.word	0x6c726f57
    4b50:	676f5064 	.word	0x676f5064
    4b54:	00000000 	.word	0x00000000
    4b58:	6d6d7544 	.word	0x6d6d7544
    4b5c:	68742079 	.word	0x68742079
    4b60:	20636369 	.word	0x20636369
    4b64:	65696c63 	.word	0x65696c63
    4b68:	0000746e 	.word	0x0000746e
    4b6c:	694e2041 	.word	0x694e2041
    4b70:	54206563 	.word	0x54206563
    4b74:	202e5954 	.word	0x202e5954
    4b78:	4f206e41 	.word	0x4f206e41
    4b7c:	6f43204b 	.word	0x6f43204b
    4b80:	7475706d 	.word	0x7475706d
    4b84:	002e7265 	.word	0x002e7265
    4b88:	69636543 	.word	0x69636543
    4b8c:	65276e20 	.word	0x65276e20
    4b90:	70207473 	.word	0x70207473
    4b94:	75207361 	.word	0x75207361
    4b98:	4320656e 	.word	0x4320656e
    4b9c:	72656279 	.word	0x72656279
    4ba0:	6b636564 	.word	0x6b636564
    4ba4:	65622820 	.word	0x65622820
    4ba8:	73756163 	.word	0x73756163
    4bac:	74692065 	.word	0x74692065
    4bb0:	6e207327 	.word	0x6e207327
    4bb4:	6120746f 	.word	0x6120746f
    4bb8:	6c655020 	.word	0x6c655020
    4bbc:	6e616369 	.word	0x6e616369
    4bc0:	73614320 	.word	0x73614320
    4bc4:	00002965 	.word	0x00002965
    4bc8:	696c6f53 	.word	0x696c6f53
    4bcc:	69726164 	.word	0x69726164
    4bd0:	69207974 	.word	0x69207974
    4bd4:	6f6e2073 	.word	0x6f6e2073
    4bd8:	20612074 	.word	0x20612074
    4bdc:	2077656e 	.word	0x2077656e
    4be0:	6d617266 	.word	0x6d617266
    4be4:	726f7765 	.word	0x726f7765
    4be8:	0000006b 	.word	0x0000006b
    4bec:	61657242 	.word	0x61657242
    4bf0:	616f6264 	.word	0x616f6264
    4bf4:	6e696472 	.word	0x6e696472
    4bf8:	73492067 	.word	0x73492067
    4bfc:	746f4e20 	.word	0x746f4e20
    4c00:	43204120 	.word	0x43204120
    4c04:	656d6972 	.word	0x656d6972
    4c08:	00000000 	.word	0x00000000
    4c0c:	2066664f 	.word	0x2066664f
    4c10:	6f207962 	.word	0x6f207962
    4c14:	6520656e 	.word	0x6520656e
    4c18:	726f7272 	.word	0x726f7272
    4c1c:	72612073 	.word	0x72612073
    4c20:	6f632065 	.word	0x6f632065
    4c24:	6e6f6d6d 	.word	0x6e6f6d6d
    4c28:	00000000 	.word	0x00000000
    4c2c:	0000087a 	.word	0x0000087a
    4c30:	00000ac6 	.word	0x00000ac6
    4c34:	00000ac6 	.word	0x00000ac6
    4c38:	00000ac6 	.word	0x00000ac6
    4c3c:	00000ac6 	.word	0x00000ac6
    4c40:	00000ac6 	.word	0x00000ac6
    4c44:	00000ac6 	.word	0x00000ac6
    4c48:	00000ac6 	.word	0x00000ac6
    4c4c:	00000ac6 	.word	0x00000ac6
    4c50:	00000ac6 	.word	0x00000ac6
    4c54:	00000ac6 	.word	0x00000ac6
    4c58:	00000ac6 	.word	0x00000ac6
    4c5c:	00000ac6 	.word	0x00000ac6
    4c60:	00000ac6 	.word	0x00000ac6
    4c64:	00000ac6 	.word	0x00000ac6
    4c68:	00000ac6 	.word	0x00000ac6
    4c6c:	00000862 	.word	0x00000862
    4c70:	00000ac6 	.word	0x00000ac6
    4c74:	00000ac6 	.word	0x00000ac6
    4c78:	00000ac6 	.word	0x00000ac6
    4c7c:	00000ac6 	.word	0x00000ac6
    4c80:	00000ac6 	.word	0x00000ac6
    4c84:	00000ac6 	.word	0x00000ac6
    4c88:	00000ac6 	.word	0x00000ac6
    4c8c:	00000ac6 	.word	0x00000ac6
    4c90:	00000ac6 	.word	0x00000ac6
    4c94:	00000ac6 	.word	0x00000ac6
    4c98:	00000ac6 	.word	0x00000ac6
    4c9c:	00000ac6 	.word	0x00000ac6
    4ca0:	00000ac6 	.word	0x00000ac6
    4ca4:	00000ac6 	.word	0x00000ac6
    4ca8:	00000ac6 	.word	0x00000ac6
    4cac:	00000872 	.word	0x00000872
    4cb0:	00000ac6 	.word	0x00000ac6
    4cb4:	00000ac6 	.word	0x00000ac6
    4cb8:	00000ac6 	.word	0x00000ac6
    4cbc:	00000ac6 	.word	0x00000ac6
    4cc0:	00000ac6 	.word	0x00000ac6
    4cc4:	00000ac6 	.word	0x00000ac6
    4cc8:	00000ac6 	.word	0x00000ac6
    4ccc:	00000ac6 	.word	0x00000ac6
    4cd0:	00000ac6 	.word	0x00000ac6
    4cd4:	00000ac6 	.word	0x00000ac6
    4cd8:	00000ac6 	.word	0x00000ac6
    4cdc:	00000ac6 	.word	0x00000ac6
    4ce0:	00000ac6 	.word	0x00000ac6
    4ce4:	00000ac6 	.word	0x00000ac6
    4ce8:	00000ac6 	.word	0x00000ac6
    4cec:	0000086a 	.word	0x0000086a
    4cf0:	00000882 	.word	0x00000882
    4cf4:	0000084a 	.word	0x0000084a
    4cf8:	0000085a 	.word	0x0000085a
    4cfc:	00000852 	.word	0x00000852
    4d00:	00000002 	.word	0x00000002
    4d04:	00000003 	.word	0x00000003
    4d08:	00000028 	.word	0x00000028
    4d0c:	00000029 	.word	0x00000029
    4d10:	00000004 	.word	0x00000004
    4d14:	00000005 	.word	0x00000005
    4d18:	00000006 	.word	0x00000006
    4d1c:	00000007 	.word	0x00000007
    4d20:	00000020 	.word	0x00000020
    4d24:	00000021 	.word	0x00000021
    4d28:	00000022 	.word	0x00000022
    4d2c:	00000023 	.word	0x00000023
    4d30:	00000024 	.word	0x00000024
    4d34:	00000025 	.word	0x00000025
    4d38:	00000026 	.word	0x00000026
    4d3c:	00000027 	.word	0x00000027
    4d40:	00000008 	.word	0x00000008
    4d44:	00000009 	.word	0x00000009
    4d48:	0000000a 	.word	0x0000000a
    4d4c:	0000000b 	.word	0x0000000b
    4d50:	42000800 	.word	0x42000800
    4d54:	42000c00 	.word	0x42000c00
    4d58:	42001000 	.word	0x42001000
    4d5c:	42001400 	.word	0x42001400
    4d60:	42001800 	.word	0x42001800
    4d64:	42001c00 	.word	0x42001c00
    4d68:	000015fe 	.word	0x000015fe
    4d6c:	000015fa 	.word	0x000015fa
    4d70:	000015fa 	.word	0x000015fa
    4d74:	00001660 	.word	0x00001660
    4d78:	00001660 	.word	0x00001660
    4d7c:	00001612 	.word	0x00001612
    4d80:	00001604 	.word	0x00001604
    4d84:	00001618 	.word	0x00001618
    4d88:	0000164e 	.word	0x0000164e
    4d8c:	00001820 	.word	0x00001820
    4d90:	00001800 	.word	0x00001800
    4d94:	00001800 	.word	0x00001800
    4d98:	0000188c 	.word	0x0000188c
    4d9c:	00001812 	.word	0x00001812
    4da0:	0000182e 	.word	0x0000182e
    4da4:	00001804 	.word	0x00001804
    4da8:	0000183c 	.word	0x0000183c
    4dac:	0000187c 	.word	0x0000187c

00004db0 <CodePage437>:
	...
    50e8:	01000000 06186080 18608001 60800106     .....`....`....`
    50f8:	80010000 00000060 00000000 66986106     ....`........a.f
    5108:	98618619 00000000 00000000 00000000     ..a.............
    5118:	00000000 98610600 fb8f1966 8f1966fe     ......a.f....f..
    5128:	1966fefb 00986186 00000000 80010000     ..f..a..........
    5138:	891f7e60 1f7e6082 7e649081 6080811f     `~...`~...d~...`
    5148:	00000000 04000000 29a60823 1820c106     ........#..).. .
    5158:	98200304 324c1165 00000008 00000000     .. .e.L2........
    5168:	84e08107 10420821 5a081e78 87208216     ....!.B.x..Z.. .
    5178:	0000f6d9 00000000 30c00000 00030618     ...........0....
    5188:	000000c0 00000000 00000000 00000000     ................
    5198:	40000000 03020810 0c30c000 08c00003     ...@......0.....
    51a8:	10400002 00000000 01000000 02084000     ..@..........@..
    51b8:	06186000 18608001 00010208 00000040     .`....`.....@...
    51c8:	00000000 42000000 90408210 40c23fff     .......B..@..?.@
    51d8:	80104290 00000000 00000000 00000000     .B..............
    51e8:	80000208 e0bfff20 02082080 00000000     .... .... ......
	...
    5208:	18000000 c0000306 00001040 00000000     ........@.......
    5218:	00000000 ff000000 0000e0bf 00000000     ................
	...
    523c:	030e3800 0000e080 00000000 08200000     .8............ .
    524c:	80000104 02041020 10408000 00000208     .... .....@.....
    525c:	00000000 e0030000 cc1863f8 b0c1061b     .........c......
    526c:	63061b6c f8e0c318 00000000 00000000     l..c............
    527c:	1b3c70c0 0c30c004 30c00003 e107030c     .p<...0....0....
    528c:	000000f8 00000000 c1f8e107 061860b0     .............`..
    529c:	0187030e 0f30c0c0 0000fefb 00000000     ......0.........
    52ac:	fefb0f00 60c00003 80030e30 b0810618     .......`0.......
    52bc:	00f8e167 00000000 40000000 03070c30     g..........@0...
    52cc:	31649040 04fefb0f 10400001 00000000     @.d1......@.....
    52dc:	0f000000 30c0fefb c1f8e30f 061860b0     .......0.....`..
    52ec:	e167a081 000000f8 00000000 60f8e003     ..g............`
    52fc:	00030c18 1b8c3ffe 67b0c106 0000f8e1     .....?.....g....
    530c:	00000000 fefb0f00 20608001 00010408     ..........` ....
    531c:	0c302080 00c00003 00000000 e0030000     . 0.............
    532c:	6cb0c1f8 0f3e061b c1061b8c f8e063b0     ...l..>......c..
    533c:	00000000 07000000 b0c1f8e1 7d0e3b6c     ............l;.}
    534c:	0618609f e1c70003 000000f0 00000000     .`..............
    535c:	38000000 e080030e 00000000 030e3800     ...8.........8..
    536c:	0000e080 00000000 00000000 80030e38     ............8...
    537c:	000000e0 0e380000 40c00003 00000010     ......8....@....
    538c:	30000000 03030c0c 30c0c000 0cc00003     ...0.......0....
    539c:	0c300003 00000000 00000000 00000000     ..0.............
    53ac:	00fefb0f fefb0f00 00000000 00000000     ................
    53bc:	00000000 3000030c 30c0000c c0c00003     .......0...0....
    53cc:	0c0c3030 00000003 00000000 f8e10700     00..............
    53dc:	6060b0c1 01061818 00006080 00608001     ..``.....`....`.
    53ec:	00000000 e1070000 6cb0c1f8 b4d33edb     ...........l.>..
    53fc:	c036fbec f8e10730 00000000 00000000     ..6.0...........
    540c:	0d367080 c18c3186 fefb6fb0 1b6cb0c1     .p6..1...o....l.
    541c:	00000006 00000000 61f8e30f 86196698     ...........a.f..
    542c:	19861f7e 6f986186 0000f8e3 00000000     ~....a.o........
    543c:	f8e00300 036c9861 0c30c000 98610003     ....a.l...0...a.
    544c:	00f8e063 00000000 c30f0000 861966f0     c............f..
    545c:	98618631 668c1966 f0c38f19 00000000     1.a.f..f........
    546c:	0f000000 30c0fefb fc00030c 00030c3f     .......0....?...
    547c:	fb0f30c0 000000fe 00000000 c0fefb0f     .0..............
    548c:	00030c30 030c3ffc 0c30c000 00000003     0....?....0.....
    549c:	00000000 f8e00300 036c9861 0c30c000     ........a.l...0.
    54ac:	98611e7b 00f8e063 00000000 1b0c0000     {.a.c...........
    54bc:	6cb0c106 bfff061b c1061bec 061b6cb0     ...l.........l..
    54cc:	00000000 07000000 0618f8e1 18608001     ..............`.
    54dc:	60800106 e1070618 000000f8 00000000     ...`............
    54ec:	067ef801 18608001 60800106 8731c618     ..~...`....`..1.
    54fc:	0000f0c1 00000000 061b0c00 838d31c6     .............1..
    550c:	0d38e060 31c66083 00061b8c 00000000     `.8..`.1........
    551c:	030c0000 0c30c000 30c00003 c000030c     ......0....0....
    552c:	fefb0f30 00000000 0c000000 bde38e1b     0...............
    553c:	c976dbed 061b6cb2 1b6cb0c1 00000006     ..v..l....l.....
    554c:	00000000 e1861b0c 661b6dbc 5b6cb3c9     .........m.f..l[
    555c:	ecb0c31e 0000061b 00000000 f8e00300     ................
    556c:	1b6cb0e3 6cb0c106 b8c1061b 00f8e0e3     ..l....l........
    557c:	00000000 e30f0000 6cb0c1f8 3ffe061b     ...........l...?
    558c:	c000038c 00030c30 00000000 07000000     ....0...........
    559c:	b0c1f8e1 c1061b6c 36db6cb0 d98731c6     ....l....l.6.1..
    55ac:	000000f6 00000000 c1f8e30f 061b6cb0     .............l..
    55bc:	638c3ffe cc30c318 0000061b 00000000     .?.c..0.........
    55cc:	f8e10700 036cb0c1 801f7e00 b0c10618     ......l..~......
    55dc:	00f8e167 00000000 fb0f0000 000208fe     g...............
    55ec:	02082080 08208000 20800002 00000000     . .... .... ....
    55fc:	0c000000 b0c1061b c1061b6c 061b6cb0     ........l....l..
    560c:	e063b0c1 000000f8 00000000 c1061b0c     ..c.............
    561c:	8c3166b0 60c31863 810d36d8 000020c0     .f1.c..`.6... ..
    562c:	00000000 061b0c00 1b6cb0c1 6db2c906     ..........l....m
    563c:	b5d576db 008c796f 00000000 1b0c0000     .v..oy..........
    564c:	c3186306 060cf860 63d8e003 061bcc18     .c..`......c....
    565c:	00000000 0c000000 1863061b 1cd860c3     ..........c..`..
    566c:	20c00107 80000208 00000020 00000000     ... .... .......
    567c:	03fefb0f 1060c000 0103060c 0f30c0c0     ......`.......0.
    568c:	0000fefb 00000000 f8e00300 00030c30     ............0...
    569c:	030c30c0 0c30c000 00f8e003 00000000     .0....0.........
    56ac:	01060000 010c3080 030c6080 03186000     .....0...`...`..
    56bc:	0618c000 00000000 07000000 030cf0c1     ................
    56cc:	0c30c000 30c00003 c107030c 000000f0     ..0....0........
    56dc:	00000000 36708000 8c31860d 0060b0c1     ......p6..1...`.
	...
    5708:	00fefb0f 00000000 80030000 00030ce0     ................
    5718:	00001860 00000000 00000000 00000000     `...............
	...
    5730:	01fcf003 fef86380 f823b0c0 000000fe     .....c....#.....
    5740:	00000000 c000030c fcf30d30 0b6cb8e1     ........0.....l.
    5750:	6fb8e102 00007cf3 00000000 00000000     ...o.|..........
    5760:	e1070000 6cb0c1f8 30c00003 00fef907     .......l...0....
    5770:	00000000 18000000 67800106 b0c3f6d9     ...........g....
    5780:	c3061bec f6d9e7b0 00000000 00000000     ................
    5790:	00000000 c1f8e107 fefb6fb0 f10730c0     .........o...0..
    57a0:	000000fc 00000000 3138e000 c000638c     ..........81.c..
    57b0:	00033ffc 030c30c0 0000c000 00000000     .?...0..........
    57c0:	00000000 d9070000 8731c6f6 30c0f0c1     ..........1....0
    57d0:	c3f8e107 f8e1e7b0 030c0000 0d30c000     ..............0.
    57e0:	b8e178e3 c1061b6c 061b6cb0 00000000     .x..l....l......
    57f0:	01000000 00006080 18e08003 60800106     .....`.........`
    5800:	e1070618 000000f8 00000000 00186000     .............`..
    5810:	18600000 60800106 8c010618 31c61863     ..`....`....c..1
    5820:	00f0c187 00030c00 638c30c0 0f36cc30     .........0.c0.6.
    5830:	33ccc083 000c330c 00000000 c0030000     ...3.3..........
    5840:	00030cf0 030c30c0 0c30c000 f8e00303     .....0....0.....
	...
    585c:	e70c330c 669b6dbf 1b6cb0c1 00000006     .3...m.f..l.....
	...
    5874:	f8e20b00 1b6cb8e1 6cb0c106 0000061b     ......l....l....
	...
    588c:	e1070000 cc30c3f8 30c30c33 00f8e1c7     ......0.3..0....
	...
    58a4:	0b000000 b0c1f8e2 be061b6c 0002882f     ........l.../...
    58b4:	02082080 00000000 00000000 c1fae803     . ..............
    58c4:	061b6cb0 08a08f3e 20800002 00000208     .l..>...... ....
    58d4:	00000000 7ce20800 036cbcf1 0c30c000     .......|..l...0.
    58e4:	00000003 00000000 00000000 e1070000     ................
    58f4:	0730c0f8 8001f8e1 00f8e36f 00000000     ..0.....o.......
    5904:	00030000 0f0c30c0 0c30f8e3 33c00003     .....0....0....3
    5914:	30c0c00c 00000000 00000000 00000000     ...0............
    5924:	c30c330c 0c33cc30 d9c730c3 000000f6     .3..0.3..0......
	...
    593c:	02020000 30e6b8c1 01073ed8 000020c0     .......0.>... ..
	...
    5954:	1b0c0000 6cb0c106 b5d5769b 008c3166     .......l.v..f1..
	...
    596c:	08000000 1b441823 6ce08003 08620c11     ....#.D....l..b.
	...
    5988:	c618630c 18638c31 60801f7e 873bc618     .c..1.c.~..`..;.
    5998:	0000f0c1 00000000 fefb0f00 c0c00003     ................
    59a8:	0f0c3030 0000fefb 00000000 1e780000     00............x.
    59b8:	40000208 000e3810 02081040 001e7800     ...@.8..@....x..
    59c8:	00000000 80010000 01061860 06186080     ........`....`..
    59d8:	18608001 60800106 00000000 0f000000     ..`....`........
    59e8:	0208c003 0cc00003 c0000303 030f0208     ................
    59f8:	000000c0 00000000 d9c61907 1c736cb3     .............ls.
	...
    5a30:	e0030000 6c9861f8 30c00003 6100030c     .....a.l...0...a
    5a40:	f8e06398 00000608 00000000 00669801     .c............f.
    5a50:	c30c330c 0c33cc30 d9c730c3 000000f6     .3..0.3..0......
    5a60:	00000000 0c180000 f8e10700 fb6fb0c1     ..............o.
    5a70:	0730c0fe 0000fcf1 00000000 10000000     ..0.............
    5a80:	f003000a 638001fc b0c0fef8 00fef823     .......c....#...
	...
    5a98:	030033cc 8001fcf0 c0fef863 fef823b0     .3......c....#..
	...
    5ab0:	000c6000 01fcf003 fef86380 f823b0c0     .`.......c....#.
    5ac0:	000000fe 03000000 0c482001 fcf00300     ......... H.....
    5ad0:	f8638001 23b0c0fe 0000fef8 00000000     ..c....#........
    5ae0:	00000000 e1070000 6cb0c1f8 30c00003     ...........l...0
    5af0:	04fef907 00000003 00000000 07001420     ............ ...
    5b00:	b0c1f8e1 c0fefb6f fcf10730 00000000     ....o...0.......
    5b10:	00000000 00669801 c1f8e107 fefb6fb0     ......f......o..
    5b20:	f10730c0 000000fc 00000000 18c00000     .0..............
    5b30:	f8e10700 fb6fb0c1 0730c0fe 0000fcf1     ......o...0.....
    5b40:	00000000 98610600 80030000 010618e0     ......a.........
    5b50:	06186080 00f8e107 00000000 00000000     .`..............
    5b60:	03002840 0618e080 18608001 f8e10706     @(........`.....
	...
    5b78:	0018c000 18e08003 60800106 e1070618     ...........`....
    5b88:	000000f8 18630000 367080c0 8c31860d     ......c...p6..1.
    5b98:	fb6fb0c1 6cb0c1fe 0000061b 1c000000     ..o....l........
    5ba8:	70c08108 31860d36 6fb0c18c b0c1fefb     ...p6..1...o....
    5bb8:	00061b6c 00000000 fb0f0606 0c30c0fe     l.............0.
    5bc8:	3ffc0003 c000030c fefb0f30 00000000     ...?....0.......
	...
    5be0:	1dfe7907 fedb2786 f90733cc 000000ee     .y...'...3......
    5bf0:	00000000 367ef800 9861860d e3efb1c7     ......~6..a.....
    5c00:	8c31c6f8 00001e7b 00000000 20000000     ..1.{.......... 
    5c10:	e1070014 cc30c3f8 30c30c33 00f8e1c7     ......0.3..0....
    5c20:	00000000 01000000 07006698 30c3f8e1     .........f.....0
    5c30:	c30c33cc f8e1c730 00000000 00000000     .3..0...........
    5c40:	0018c000 c3f8e107 0c33cc30 e1c730c3     ........0.3..0..
    5c50:	000000f8 00000000 14200000 0c330c00     .......... ...3.
    5c60:	33cc30c3 c730c30c 0000f6d9 00000000     .0.3..0.........
    5c70:	60000000 330c000c cc30c30c 30c30c33     ...`...3..0.3..0
    5c80:	00f6d9c7 00000000 01000000 0c006698     .............f..
    5c90:	31c61863 7e18638c 1860801f c1873bc6     c..1.c.~..`..;..
    5ca0:	800d36f0 383ef800 c1061bec 061b6cb0     .6....>8.....l..
    5cb0:	e0e3b8c1 000000f8 0c330000 c10603c0     ..........3.....
    5cc0:	061b6cb0 1b6cb0c1 63b0c106 0000f8e0     .l....l....c....
    5cd0:	00000000 20800002 1b8c1f7e 0c32c826     ....... ~...&.2.
    5ce0:	1f7e069b 08208080 00000000 c0010000     ..~... .........
    5cf0:	461873f8 3e608001 6080810f fefb0f18     .s.F..`>...`....
    5d00:	00000000 0c000000 08630419 1c506083     ..........c..`P.
    5d10:	20e00302 80800f08 00000020 00000000     ... .... .......
    5d20:	c1f8e30f f81b6cb0 830d30fe 0d36d878     .....l...0..x.6.
    5d30:	000038e3 00000000 3ce00000 98638e3f     .8.........<?.c.
    5d40:	833ffee0 1c70c000 60800106 00000018     ..?...p....`....
    5d50:	00000000 03000c18 8001fcf0 c0fef863     ............c...
    5d60:	fef823b0 00000000 00000000 000060c0     .#...........`..
    5d70:	18e08003 60800106 e1070618 000000f8     .......`........
    5d80:	00000000 18300000 f8e10700 33cc30c3     ......0......0.3
    5d90:	c730c30c 0000f8e1 00000000 30000000     ..0............0
    5da0:	330c0018 cc30c30c 30c30c33 00f6d9c7     ...3..0.3..0....
	...
    5db8:	0b001998 b8e1f8e2 c1061b6c 061b6cb0     ........l....l..
    5dc8:	00000000 8c0c4c00 b8e1061b c9461b6d     .....L......m.F.
    5dd8:	165b6cb2 1becb0c3 00000006 00000000     .l[.............
    5de8:	1e08c003 00e08308 000080ff 00000000     ................
	...
    5e00:	d8c00100 c0810d22 0080ff00 00000000     ...."...........
	...
    5e1c:	00030c00 030c0000 3030c000 061b0c0c     ..........00....
    5e2c:	00c00f3f 00000000 00000000 ff000000     ?...............
    5e3c:	0003ecbf 00000000 00000000 00000000     ................
	...
    5e54:	18e0bfff 00000006 00000000 00000000     ................
    5e64:	30c00003 c000030c e0bfff00 0c1f3800     ...0.........8..
    5e74:	183060c0 0000c00f c0000300 00030c30     .`0.........0...
    5e84:	bfff00c0 668001e0 fc618619 60800106     .......f..a....`
    5e94:	00000000 06180000 18000000 60800106     ...............`
    5ea4:	80010618 00061860 00000000 00000000     ....`...........
    5eb4:	90200100 80042448 00001290 00000000     .. .H$..........
	...
    5ecc:	40020000 20010948 00244890 00000000     ...@H.. .H$.....
    5edc:	00000000 48024092 09004900 80240024     .....@.H.I..$.$.
    5eec:	92009004 00480240 24090049 42529200     ....@.H.I..$..RB
    5efc:	0949494a 24242529 929094a4 4a425292     JII.)%$$.....RBJ
    5f0c:	29094949 ad6d2425 b6b6b5bd dbdad6f6     II.)%$m.........
    5f1c:	6f6b5bdb bdad6d6d f6b6b6b5 08dbdad6     .[komm..........
    5f2c:	20800002 80000208 00020820 02082080     ... .... .... ..
    5f3c:	08208000 20800002 80000208 00020820     .. .... .... ...
    5f4c:	3e082080 08208000 20800002 80000208     . .>.. .... ....
    5f5c:	00020820 02082080 f8208000 20800f02      .... .... .... 
    5f6c:	80000208 00020820 05142080 14504001     .... .... ...@P.
    5f7c:	50400105 40013d14 01051450 05145040     ..@P.=.@P...@P..
    5f8c:	00504001 00000000 00000000 013f0000     .@P...........?.
    5f9c:	05145040 14504001 50400105 00000000     @P...@P...@P....
    5fac:	00000000 02f80000 0820800f 20800002     .......... .... 
    5fbc:	80000208 01051420 05145040 f4504001     .... ...@P...@P.
    5fcc:	50400f01 40010514 01051450 05145040     ..@P...@P...@P..
    5fdc:	14504001 50400105 40010514 01051450     .@P...@P...@P...
    5fec:	05145040 00504001 00000000 00000000     @P...@P.........
    5ffc:	0f01fc00 05145040 14504001 50400105     ....@P...@P...@P
    600c:	40010514 01051450 01f45040 0000c00f     ...@P...@P......
	...
    6024:	01051400 05145040 14504001 0000003f     ....@P...@P.?...
	...
    603c:	02080000 08208000 20800002 800f02f8     ...... .... ....
	...
    6060:	003e0000 02082080 08208000 20800002     ..>.. .... .... 
    6070:	80000208 00020820 03082080 000000f0     .... .... ......
	...
    6088:	00020800 02082080 08208000 0000f03f     ..... .... .?...
	...
    60ac:	80f03f00 00020820 02082080 08208000     .?.. .... .... .
    60bc:	20800002 80000208 f0030820 02082080     ... .... .... ..
    60cc:	08208000 20800002 00000000 00000000     .. .... ........
    60dc:	3f000000 000000f0 00000000 00000000     ...?............
    60ec:	00020800 02082080 08208000 2080f03f     ..... .... .?.. 
    60fc:	80000208 00020820 02082080 08208000     .... .... .... .
    610c:	20800002 fc00c20f 00020820 02082080     ... .... .... ..
    611c:	14208000 50400105 40010514 f1051450     .. ...@P...@P...
    612c:	05145040 14504001 50400105 40010514     @P...@P...@P...@
    613c:	01051450 c4175040 0000fc01 00000000     P...@P..........
	...
    6158:	1f000000 507c01c4 40010514 01051450     ......|P...@P...
    6168:	05145040 14504001 50400105 fc0fc0f7     @P...@P...@P....
	...
    618c:	0fc0ff00 0514507c 14504001 50400105     ....|P...@P...@P
    619c:	40010514 01051450 c4175040 14507c01     ...@P...@P...|P.
    61ac:	50400105 40010514 00000050 00000000     ..@P...@P.......
    61bc:	ff000000 00fc0fc0 00000000 00000000     ................
    61cc:	05140000 14504001 50400105 7c0fc0f7     .....@P...@P...|
    61dc:	01051450 05145040 08504001 20800002     P...@P...@P.... 
    61ec:	80000208 0fc0ff20 000000fc 00000000     .... ...........
    61fc:	00000000 40010514 01051450 3f145040     .......@P...@P.?
    620c:	000000f0 00000000 00000000 00000000     ................
    621c:	00000000 ff000000 20fc0fc0 80000208     ........... ....
    622c:	00020820 00002080 00000000 00000000      .... ..........
    623c:	40f13f00 01051450 05145040 14504001     .?.@P...@P...@P.
    624c:	50400105 40010514 f0071450 00000000     ..@P...@P.......
	...
    6264:	80000208 00020820 c20f2080 0000fc00     .... .... ......
	...
    6284:	0f000000 20fc00c2 80000208 00020820     ....... .... ...
    6294:	00002080 00000000 00000000 40f10700     . .............@
    62a4:	01051450 05145040 14504001 50400105     P...@P...@P...@P
    62b4:	40010514 f13f1450 05145040 14504001     ...@P.?.@P...@P.
    62c4:	50400105 80000208 00020820 c2ff2080     ..@P.... .... ..
    62d4:	0820fc0f 20800002 80000208 00020820     .. .... .... ...
    62e4:	02082080 08208000 0000003e 00000000     . .... .>.......
	...
    6304:	80f00300 00020820 02082080 ff208000     .... .... .... .
    6314:	ffffffff ffffffff ffffffff ffffffff     ................
    6324:	ffffffff ffffffff 00000000 00000000     ................
    6334:	3f000000 ffffffff ffffffff ffffffff     ...?............
    6344:	0f3ef8ff 3ef8e083 f8e0830f e0830f3e     ..>....>....>...
    6354:	830f3ef8 0f3ef8e0 c30fe083 0f3ffcf0     .>....>.......?.
    6364:	3ffcf0c3 fcf0c30f f0c30f3f c30f3ffc     ...?....?....?..
    6374:	ff3ffcf0 ffffffff ffffffff f0ffffff     ..?.............
	...
    6398:	8f380000 c208234c e2d08330 00000000     ..8.L#..0.......
    63a8:	00000000 193c0000 7c982186 8c61061f     ......<..!.|..a.
    63b8:	63c61861 000000f8 00000000 ff000000     a..c............
    63c8:	8c31c61f 01061863 06186080 0000c003     ..1.c....`......
	...
    63e4:	c69fff00 18638c31 008e33c6 00000000     ....1.c..3......
    63f4:	fb0f0000 06b080fe 0618c000 c0800103     ................
    6404:	fefb2f20 00000000 00000000 00000000      /..............
    6414:	c3fef907 0c33cc30 e1c730c3 000000f8     ....0.3..0......
	...
    642c:	0c330c00 33cc30c3 cf30c30c 30c0f6db     ..3..0.3..0....0
    643c:	0000000c 00000000 e30c0000 618e7bbc     .............{.a
    644c:	06186080 00608001 00000000 00000000     .`....`.........
    645c:	c33f0000 30c3f8c1 c30c33cc f0e0c730     ..?....0.3..0...
    646c:	000000ff 03000000 1863f8e0 ff061bcc     ..........c.....
    647c:	061becbf e0c31863 000000f8 00000000     ....c...........
    648c:	e3fce103 061b6cb0 1b6cb0c1 c698e38e     .....l....l.....
    649c:	00008e33 00000000 fef80300 e1070318     3...............
    64ac:	cc30c3f8 30c30c33 00f8e1c7 00000000     ..0.3..0........
    64bc:	00000000 02000000 a2885421 88228a28     ........!T..(.".
    64cc:	00204295 00000000 00000000 07000000     .B .............
    64dc:	860e7367 628a28a3 7367b8b0 00000070     gs...(.b..gsp...
    64ec:	00000000 60f8e003 00030c18 030c3ffc     .......`.....?..
    64fc:	03186000 0000f8e0 00000000 00000000     .`..............
    650c:	1b8c0f3e 6cb0c106 b0c1061b c1061b6c     >......l....l...
    651c:	000060b0 00000000 0f000000 0000fefb     .`..............
    652c:	00fefb0f fefb0f00 00000000 00000000     ................
    653c:	02080000 ff208000 2080e0bf 03000208     ...... .... ....
    654c:	000000fe 00000000 3000030c 30c0000c     ...........0...0
    655c:	c0c00003 0c0c3030 3f000003 0000f0cf     ....00.....?....
    656c:	0c300000 0003030c 0330c0c0 030cc000     ..0.......0.....
    657c:	000c3000 00f0cf3f 88600307 00020820     .0..?.....`. ...
    658c:	02082080 08208000 20800002 80000208     . .... .... ....
    659c:	00020820 02082080 08208000 20800002      .... .... .... 
    65ac:	80000208 09240820 00008001 18000000     .... .$.........
    65bc:	00000006 00e0bfff 00061800 00000000     ................
	...
    65d4:	8a0f1c00 0f1c073e 00073e8a 00000000     ....>....>......
	...
    65ec:	01092460 00000080 00000000 00000000     `$..............
	...
    6610:	80030e38 00000000 00000000 00000000     8...............
	...
    6628:	01000000 00006080 00000000 0f000000     .....`..........
    6638:	40000104 0d020820 0c504001 00800002     ...@ ....@P.....
    6648:	00000000 f0c30b00 638c31c6 00000018     .........1.c....
	...
    6664:	83070000 03070cf0 3fe0c081 00000000     ...........?....
	...
    6688:	c30f3ffc 0f3ffcf0 0000f0c3 00000000     .?....?.........
	...
    66b0:	ffffffff 677537ff 71312c6a 38ffffff     .....7ugj,1q...8
    66c0:	ff6b6869 7aff7732 6f3039ff 65332e6c     ihk.2w.z.90ol.3e
    66d0:	ffff7861 2f3b702d 63737234 5b3dff20     ax..-p;/4rsc .=[
    66e0:	7435ff27 ff6e7664 5cff5d27 62667936     '.5tdvn.'].\6yfb
    66f0:	ffffff6d 0000ffff ffffffff 475526ff     m............&UG
    6700:	51213c4a 2affffff ff4b4849 5aff5740     J<!Q...*IHK.@W.Z
    6710:	4f2928ff 45233e4c ffff5841 3f3a505f     .()OL>#EAX.._P:?
    6720:	43535224 7b2bff20 5425ff22 ff4e5644     $RSC .+{".%TDVN.
    6730:	7cff7d7e 4246595e ffffff4d 0000ffff     ~}.|^YFBM.......

00006740 <kb_col>:
    6740:	00010000 00020000 00040000 00080000     ................
    6750:	00100000 00200000 08000000              ...... .....

0000675c <kb_col_index>:
    675c:	00000010 00000011 00000012 00000013     ................
    676c:	00000014 00000015 0000001b              ............

00006778 <kb_row>:
    6778:	00000004 00000008 00000010 00000020     ............ ...
    6788:	00000040 00000080 00000400 00000800     @...............
    6798:	00001000 00002000                       ..... ..

000067a0 <kb_row_index>:
    67a0:	00000002 00000003 00000004 00000005     ................
    67b0:	00000006 00000007 0000000a 0000000b     ................
    67c0:	0000000c 0000000d                       ........

000067c8 <beelzebub.12957>:
    67c8:	2e002d00 44003200 88005300 f300b600     .-...2.D.S......
    67d8:	64012201 d4019201 08020702 5f023402     .".d.........4._
    67e8:	94027802 bb02a602 db02ca02 f902e802     .x..............
    67f8:	7f031f03                                ....

000067fc <belial.12954>:
    67fc:	f0f0f0f0 b0b0b0f0 b1b6b6b6 b7b7b1b1     ................
    680c:	b2b2b2b7 bfb8b8b8 b9b3b3b3 b5b5b9b9     ................
    681c:	babac2b5 bcbcbcba bebdbdbd f0f0f0be     ................
    682c:	b1b1f0f0 b8b7b7b6 bcb8b8b8 c9c9bcbc     ................
    683c:	35c9c9c9 0000363a                       ...5:6..

00006844 <lucifer.12956>:
    6844:	0852aa55 0d0d0d01 0d343434 34340d0d     U.R.....444...44
    6854:	00000034 01242424 340f0f0f 08083434     4...$$$....444..
    6864:	24240308 00780024 00007800 52aa5589     ..$$$.x..x...U.R
    6874:	00cc0008 01707005 02030303 02d00000     .....pp.........
    6884:	00505050 00000055                       PPP.U...

0000688c <mulciber.12955>:
    688c:	03020100 02010004 00020100 01000201     ................
    689c:	02010002 00020100 01000201 01000002     ................
    68ac:	02010000 00020100 01000201 03020100     ................
    68bc:	00000004 01000100 01000302 02010002     ................
    68cc:	00000403 00000000 69726553 4f206c61     ........Serial O
    68dc:	3639204b 38203030 0d0a314e 00000000     K 9600 8N1......

000068ec <_global_impure_ptr>:
    68ec:	2000015c 33323130 37363534 62613938     \.. 0123456789ab
    68fc:	66656463 6a696867 6e6d6c6b 7271706f     cdefghijklmnopqr
    690c:	76757473 7a797877 00000000              stuvwxyz....

00006918 <__sf_fake_stderr>:
	...

00006938 <__sf_fake_stdin>:
	...

00006958 <__sf_fake_stdout>:
	...
    6978:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    6988:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    6998:	31300046 35343332 39383736 64636261     F.0123456789abcd
    69a8:	00006665                                ef..

000069ac <_init>:
    69ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    69ae:	46c0      	nop			; (mov r8, r8)
    69b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    69b2:	bc08      	pop	{r3}
    69b4:	469e      	mov	lr, r3
    69b6:	4770      	bx	lr

000069b8 <__init_array_start>:
    69b8:	000000dd 	.word	0x000000dd

000069bc <_fini>:
    69bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    69be:	46c0      	nop			; (mov r8, r8)
    69c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    69c2:	bc08      	pop	{r3}
    69c4:	469e      	mov	lr, r3
    69c6:	4770      	bx	lr

000069c8 <__fini_array_start>:
    69c8:	000000b5 	.word	0x000000b5
