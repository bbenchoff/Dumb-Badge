
DumBadgeFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007f24  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001bc  20000000  00007f24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000009f4  200001bc  000080e0  000201bc  2**2
                  ALLOC
  3 .stack        00002000  20000bb0  00008ad4  000201bc  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000201bc  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
  6 .debug_info   000375b0  00000000  00000000  0002023d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004fd7  00000000  00000000  000577ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000647c  00000000  00000000  0005c7c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000006f0  00000000  00000000  00062c40  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000858  00000000  00000000  00063330  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001e774  00000000  00000000  00063b88  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00012852  00000000  00000000  000822fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000900e5  00000000  00000000  00094b4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001850  00000000  00000000  00124c34  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
	// Keep the default device state after reset
	SystemCoreClock = __SYSTEM_CLOCK;
       0:	b0 2b 00 20 6d 1b 00 00 69 1b 00 00 69 1b 00 00     .+. m...i...i...
	...
      2c:	69 1b 00 00 00 00 00 00 00 00 00 00 69 1b 00 00     i...........i...
      3c:	39 2e 00 00 69 1b 00 00 69 1b 00 00 69 1b 00 00     9...i...i...i...
      4c:	69 1b 00 00 69 1b 00 00 69 1b 00 00 69 1b 00 00     i...i...i...i...
      5c:	69 1b 00 00 69 1b 00 00 0d 0e 00 00 1d 0e 00 00     i...i...........
      6c:	2d 0e 00 00 3d 0e 00 00 4d 0e 00 00 5d 0e 00 00     -...=...M...]...
      7c:	69 1b 00 00 69 1b 00 00 69 1b 00 00 69 1b 00 00     i...i...i...i...
      8c:	69 1b 00 00 69 1b 00 00 69 1b 00 00 69 1b 00 00     i...i...i...i...
      9c:	41 09 00 00 69 1b 00 00 69 1b 00 00 69 1b 00 00     A...i...i...i...
      ac:	69 1b 00 00 00 00 00 00                             i.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200001bc 	.word	0x200001bc
      d4:	00000000 	.word	0x00000000
      d8:	00007f24 	.word	0x00007f24

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200001c0 	.word	0x200001c0
     108:	00007f24 	.word	0x00007f24
     10c:	00007f24 	.word	0x00007f24
     110:	00000000 	.word	0x00000000

00000114 <drawKare>:
//	graphic in the entire project. Please note this is the most
//	space efficient way to do this; a 40x31 bitmap is 930 bytes,
//	whereas	this is (104*2)+28+20, or 256 bytes.
/*********************************************************************/
void drawKare(int emotion)
{
     114:	b5f0      	push	{r4, r5, r6, r7, lr}
     116:	b0c1      	sub	sp, #260	; 0x104
     118:	0007      	movs	r7, r0
	uint16_t body[104] = {10,10,20,20,20,0,380,10,380,10,390,20,0,
     11a:	22d0      	movs	r2, #208	; 0xd0
     11c:	492d      	ldr	r1, [pc, #180]	; (1d4 <drawKare+0xc0>)
     11e:	a80c      	add	r0, sp, #48	; 0x30
     120:	4b2d      	ldr	r3, [pc, #180]	; (1d8 <drawKare+0xc4>)
     122:	4798      	blx	r3
		80,190,280,200,280,40,290,190,0,70,50,80,0,90,50,100,0,110,
		50,120,0,130,50,140,0,150,50,160,0,170,50,180,0,190,50,200,
		300,200,370,210,30,220,370,230,30,240,370,250,30,260,370,
		270,90,280,300,290};
	
	uint8_t happyTerm[28] = {180,80,190,130,170,130,190,140,140,
     124:	a805      	add	r0, sp, #20
     126:	4b2d      	ldr	r3, [pc, #180]	; (1dc <drawKare+0xc8>)
     128:	001a      	movs	r2, r3
     12a:	3250      	adds	r2, #80	; 0x50
     12c:	0001      	movs	r1, r0
     12e:	ca31      	ldmia	r2!, {r0, r4, r5}
     130:	c131      	stmia	r1!, {r0, r4, r5}
     132:	ca31      	ldmia	r2!, {r0, r4, r5}
     134:	c131      	stmia	r1!, {r0, r4, r5}
     136:	6812      	ldr	r2, [r2, #0]
     138:	600a      	str	r2, [r1, #0]
		60,150,100,210,60,220,100,130,150,140,160,140,160,220,170,
	220,150,230,160};
	
	uint8_t rPiBeret[20] = {120,60,240,80,110,70,120,90,150,
     13a:	336c      	adds	r3, #108	; 0x6c
     13c:	466a      	mov	r2, sp
     13e:	cb13      	ldmia	r3!, {r0, r1, r4}
     140:	c213      	stmia	r2!, {r0, r1, r4}
     142:	cb03      	ldmia	r3!, {r0, r1}
     144:	c203      	stmia	r2!, {r0, r1}
     146:	ac0c      	add	r4, sp, #48	; 0x30
     148:	ae40      	add	r6, sp, #256	; 0x100

	
	
	for(int i = 0; i < 104; i = i+4)
	{
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
     14a:	4d25      	ldr	r5, [pc, #148]	; (1e0 <drawKare+0xcc>)
		((body[i+1]/iSv)+(offsetGraphicY)),
		((body[i+2]/iSv)+(offsetGraphicX)),
		((body[i+3]/iSv)+(offsetGraphicY)));
     14c:	88e3      	ldrh	r3, [r4, #6]
     14e:	105b      	asrs	r3, r3, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
     150:	3396      	adds	r3, #150	; 0x96
		((body[i+2]/iSv)+(offsetGraphicX)),
     152:	88a2      	ldrh	r2, [r4, #4]
     154:	1052      	asrs	r2, r2, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
     156:	322d      	adds	r2, #45	; 0x2d
     158:	32ff      	adds	r2, #255	; 0xff
		((body[i+1]/iSv)+(offsetGraphicY)),
     15a:	8861      	ldrh	r1, [r4, #2]
     15c:	1049      	asrs	r1, r1, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
     15e:	3196      	adds	r1, #150	; 0x96
     160:	8820      	ldrh	r0, [r4, #0]
     162:	1040      	asrs	r0, r0, #1
     164:	302d      	adds	r0, #45	; 0x2d
     166:	30ff      	adds	r0, #255	; 0xff
     168:	47a8      	blx	r5
     16a:	3408      	adds	r4, #8
	for(int i = 0; i < 104; i = i+4)
     16c:	42b4      	cmp	r4, r6
     16e:	d1ed      	bne.n	14c <drawKare+0x38>
	}
	switch(emotion)
     170:	2f00      	cmp	r7, #0
     172:	d003      	beq.n	17c <drawKare+0x68>
     174:	2f01      	cmp	r7, #1
     176:	d017      	beq.n	1a8 <drawKare+0x94>
		break;
		case 2:
		//make a sad terminal thing go here
		break;
	}
}
     178:	b041      	add	sp, #260	; 0x104
     17a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     17c:	ac05      	add	r4, sp, #20
     17e:	ae0c      	add	r6, sp, #48	; 0x30
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
     180:	4d17      	ldr	r5, [pc, #92]	; (1e0 <drawKare+0xcc>)
			((happyTerm[i+3]/iSv)+(offsetGraphicY)));
     182:	78e3      	ldrb	r3, [r4, #3]
     184:	105b      	asrs	r3, r3, #1
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
     186:	3396      	adds	r3, #150	; 0x96
			((happyTerm[i+2]/iSv)+(offsetGraphicX)),
     188:	78a2      	ldrb	r2, [r4, #2]
     18a:	1052      	asrs	r2, r2, #1
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
     18c:	322d      	adds	r2, #45	; 0x2d
     18e:	32ff      	adds	r2, #255	; 0xff
			((happyTerm[i+1]/iSv)+(offsetGraphicY)),
     190:	7861      	ldrb	r1, [r4, #1]
     192:	1049      	asrs	r1, r1, #1
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
     194:	3196      	adds	r1, #150	; 0x96
     196:	7820      	ldrb	r0, [r4, #0]
     198:	1040      	asrs	r0, r0, #1
     19a:	302d      	adds	r0, #45	; 0x2d
     19c:	30ff      	adds	r0, #255	; 0xff
     19e:	47a8      	blx	r5
     1a0:	3404      	adds	r4, #4
		for(int i = 0; i < 28; i = i+4)
     1a2:	42a6      	cmp	r6, r4
     1a4:	d1ed      	bne.n	182 <drawKare+0x6e>
     1a6:	e7e7      	b.n	178 <drawKare+0x64>
     1a8:	466c      	mov	r4, sp
     1aa:	ae05      	add	r6, sp, #20
			fillRect((
     1ac:	4d0c      	ldr	r5, [pc, #48]	; (1e0 <drawKare+0xcc>)
			((rPiBeret[i+3]/iSv)+(offsetGraphicY)));
     1ae:	78e3      	ldrb	r3, [r4, #3]
     1b0:	105b      	asrs	r3, r3, #1
			fillRect((
     1b2:	3396      	adds	r3, #150	; 0x96
			((rPiBeret[i+2]/iSv)+(offsetGraphicX)),
     1b4:	78a2      	ldrb	r2, [r4, #2]
     1b6:	1052      	asrs	r2, r2, #1
			fillRect((
     1b8:	322d      	adds	r2, #45	; 0x2d
     1ba:	32ff      	adds	r2, #255	; 0xff
			((rPiBeret[i+1]/iSv)+(offsetGraphicY)),
     1bc:	7861      	ldrb	r1, [r4, #1]
     1be:	1049      	asrs	r1, r1, #1
			fillRect((
     1c0:	3196      	adds	r1, #150	; 0x96
			(rPiBeret[i]/iSv)+(offsetGraphicX)),
     1c2:	7820      	ldrb	r0, [r4, #0]
     1c4:	1040      	asrs	r0, r0, #1
			fillRect((
     1c6:	302d      	adds	r0, #45	; 0x2d
     1c8:	30ff      	adds	r0, #255	; 0xff
     1ca:	47a8      	blx	r5
     1cc:	3404      	adds	r4, #4
		for(int i = 0; i < 20; i = i+4)
     1ce:	42b4      	cmp	r4, r6
     1d0:	d1ed      	bne.n	1ae <drawKare+0x9a>
     1d2:	e7d1      	b.n	178 <drawKare+0x64>
     1d4:	000043dc 	.word	0x000043dc
     1d8:	000032f1 	.word	0x000032f1
     1dc:	0000445c 	.word	0x0000445c
     1e0:	000029ed 	.word	0x000029ed

000001e4 <splashScreen>:

void splashScreen(void)
{
     1e4:	b570      	push	{r4, r5, r6, lr}
	static const char *splashText[32];
	splashText[0] = "Trans rights are human rights";//
     1e6:	4c48      	ldr	r4, [pc, #288]	; (308 <splashScreen+0x124>)
     1e8:	4b48      	ldr	r3, [pc, #288]	; (30c <splashScreen+0x128>)
     1ea:	6023      	str	r3, [r4, #0]
	splashText[1] = "13^5 + 16^5 = 17^5";//
     1ec:	4b48      	ldr	r3, [pc, #288]	; (310 <splashScreen+0x12c>)
     1ee:	6063      	str	r3, [r4, #4]
	splashText[2] = "Reticulating Splines";//
     1f0:	4b48      	ldr	r3, [pc, #288]	; (314 <splashScreen+0x130>)
     1f2:	60a3      	str	r3, [r4, #8]
	splashText[3] = "violence.works";//
     1f4:	4b48      	ldr	r3, [pc, #288]	; (318 <splashScreen+0x134>)
     1f6:	60e3      	str	r3, [r4, #12]
	splashText[4] = "Tabs!";//
     1f8:	4b48      	ldr	r3, [pc, #288]	; (31c <splashScreen+0x138>)
     1fa:	6123      	str	r3, [r4, #16]
	splashText[5] = "Kill Billionaires (and Trillionaire)";//
     1fc:	4b48      	ldr	r3, [pc, #288]	; (320 <splashScreen+0x13c>)
     1fe:	6163      	str	r3, [r4, #20]
	splashText[6] = "Interest in technology is not a personality";//
     200:	4b48      	ldr	r3, [pc, #288]	; (324 <splashScreen+0x140>)
     202:	61a3      	str	r3, [r4, #24]
	splashText[7] = "10 PRINT CHR$(205.5+RND(1)); : GOTO 10";//
     204:	4b48      	ldr	r3, [pc, #288]	; (328 <splashScreen+0x144>)
     206:	61e3      	str	r3, [r4, #28]
	splashText[8] = "No gods. No masters. No external libraries.";//
     208:	4b48      	ldr	r3, [pc, #288]	; (32c <splashScreen+0x148>)
     20a:	6223      	str	r3, [r4, #32]
	splashText[9] = "Kill Nazis";//
     20c:	4b48      	ldr	r3, [pc, #288]	; (330 <splashScreen+0x14c>)
     20e:	6263      	str	r3, [r4, #36]	; 0x24
	splashText[10] = "Tiananmen Square 1989";//
     210:	4b48      	ldr	r3, [pc, #288]	; (334 <splashScreen+0x150>)
     212:	62a3      	str	r3, [r4, #40]	; 0x28
	splashText[11] = "America was founded on slavery";
     214:	4b48      	ldr	r3, [pc, #288]	; (338 <splashScreen+0x154>)
     216:	62e3      	str	r3, [r4, #44]	; 0x2c
	splashText[12] = "There is only capital and labor";//
     218:	4b48      	ldr	r3, [pc, #288]	; (33c <splashScreen+0x158>)
     21a:	6323      	str	r3, [r4, #48]	; 0x30
	splashText[13] = "Encourage _symmetric_ class warfare";//
     21c:	4b48      	ldr	r3, [pc, #288]	; (340 <splashScreen+0x15c>)
     21e:	6363      	str	r3, [r4, #52]	; 0x34
	splashText[14] = "$CURRENT_MEME";//
     220:	4b48      	ldr	r3, [pc, #288]	; (344 <splashScreen+0x160>)
     222:	63a3      	str	r3, [r4, #56]	; 0x38
	splashText[15] = "A Nice TTY";//
     224:	4b48      	ldr	r3, [pc, #288]	; (348 <splashScreen+0x164>)
     226:	63e3      	str	r3, [r4, #60]	; 0x3c
	splashText[16] = "Unix epoch minus 0xFF days";//
     228:	4b48      	ldr	r3, [pc, #288]	; (34c <splashScreen+0x168>)
     22a:	6423      	str	r3, [r4, #64]	; 0x40
	splashText[17] = "i  = 0x5f3759df - ( i >> 1 );";//
     22c:	4b48      	ldr	r3, [pc, #288]	; (350 <splashScreen+0x16c>)
     22e:	6463      	str	r3, [r4, #68]	; 0x44
	splashText[18] = "ACAB";//
     230:	4b48      	ldr	r3, [pc, #288]	; (354 <splashScreen+0x170>)
     232:	64a3      	str	r3, [r4, #72]	; 0x48
	splashText[19] = "Defcon's canceled.";//
     234:	4b48      	ldr	r3, [pc, #288]	; (358 <splashScreen+0x174>)
     236:	64e3      	str	r3, [r4, #76]	; 0x4c
	splashText[20] = "Ratsnest: Nothing To Do!";//
     238:	4b48      	ldr	r3, [pc, #288]	; (35c <splashScreen+0x178>)
     23a:	6523      	str	r3, [r4, #80]	; 0x50
	splashText[21] = "It has 69 keys.";//
     23c:	4b48      	ldr	r3, [pc, #288]	; (360 <splashScreen+0x17c>)
     23e:	6563      	str	r3, [r4, #84]	; 0x54
	splashText[22] = "Because VT-420 was already taken";//
     240:	4b48      	ldr	r3, [pc, #288]	; (364 <splashScreen+0x180>)
     242:	65a3      	str	r3, [r4, #88]	; 0x58
	splashText[23] = "Compression algorithm based on BBP (1997)";//
     244:	4b48      	ldr	r3, [pc, #288]	; (368 <splashScreen+0x184>)
     246:	65e3      	str	r3, [r4, #92]	; 0x5c
	splashText[24] = "The source of the Mississippi river is in Pennsylvania.";
     248:	4b48      	ldr	r3, [pc, #288]	; (36c <splashScreen+0x188>)
     24a:	6623      	str	r3, [r4, #96]	; 0x60
	splashText[25] = "Offensive hardware";//
     24c:	4b48      	ldr	r3, [pc, #288]	; (370 <splashScreen+0x18c>)
     24e:	6663      	str	r3, [r4, #100]	; 0x64
	splashText[26] = "Follow World Pog Federation    @WorldPog";//
     250:	4b48      	ldr	r3, [pc, #288]	; (374 <splashScreen+0x190>)
     252:	66a3      	str	r3, [r4, #104]	; 0x68
	splashText[27] = "Dummy thicc client";//
     254:	4b48      	ldr	r3, [pc, #288]	; (378 <splashScreen+0x194>)
     256:	66e3      	str	r3, [r4, #108]	; 0x6c
	splashText[28] = "A Nice TTY. An OK Computer.";//
     258:	4b48      	ldr	r3, [pc, #288]	; (37c <splashScreen+0x198>)
     25a:	6723      	str	r3, [r4, #112]	; 0x70
	splashText[29] = "Ceci n'est pas une Cyberdeck (because it's not a Pelican Case)";//
     25c:	4b48      	ldr	r3, [pc, #288]	; (380 <splashScreen+0x19c>)
     25e:	6763      	str	r3, [r4, #116]	; 0x74
	splashText[30] = "Solidarity is not a new framework";//
     260:	4b48      	ldr	r3, [pc, #288]	; (384 <splashScreen+0x1a0>)
     262:	67a3      	str	r3, [r4, #120]	; 0x78
	splashText[31] = "Breadboarding Is Not A Crime";//
     264:	4b48      	ldr	r3, [pc, #288]	; (388 <splashScreen+0x1a4>)
     266:	67e3      	str	r3, [r4, #124]	; 0x7c
	splashText[32] = "Off by one errors are common";
     268:	4a48      	ldr	r2, [pc, #288]	; (38c <splashScreen+0x1a8>)
     26a:	2380      	movs	r3, #128	; 0x80
     26c:	50e2      	str	r2, [r4, r3]
	
	const char *textPhrase = splashText[((rand()%32))];
     26e:	4b48      	ldr	r3, [pc, #288]	; (390 <splashScreen+0x1ac>)
     270:	4798      	blx	r3
     272:	17c3      	asrs	r3, r0, #31
     274:	0edb      	lsrs	r3, r3, #27
     276:	18c2      	adds	r2, r0, r3
     278:	201f      	movs	r0, #31
     27a:	4010      	ands	r0, r2
     27c:	1ac0      	subs	r0, r0, r3
     27e:	0080      	lsls	r0, r0, #2
     280:	5904      	ldr	r4, [r0, r4]

	
	clearScreen();
     282:	4b44      	ldr	r3, [pc, #272]	; (394 <splashScreen+0x1b0>)
     284:	4798      	blx	r3
	setColorRGB(255,255,255);
     286:	22ff      	movs	r2, #255	; 0xff
     288:	21ff      	movs	r1, #255	; 0xff
     28a:	20ff      	movs	r0, #255	; 0xff
     28c:	4b42      	ldr	r3, [pc, #264]	; (398 <splashScreen+0x1b4>)
     28e:	4798      	blx	r3
	
	REG_PORT_DIRTGL1 = PORT_PB31;
     290:	2280      	movs	r2, #128	; 0x80
     292:	0612      	lsls	r2, r2, #24
     294:	4b41      	ldr	r3, [pc, #260]	; (39c <splashScreen+0x1b8>)
     296:	601a      	str	r2, [r3, #0]
	PORT->Group[1].PINCFG[31].bit.PULLEN = 1;
     298:	4b41      	ldr	r3, [pc, #260]	; (3a0 <splashScreen+0x1bc>)
     29a:	22df      	movs	r2, #223	; 0xdf
     29c:	5c99      	ldrb	r1, [r3, r2]
     29e:	2004      	movs	r0, #4
     2a0:	4301      	orrs	r1, r0
     2a2:	5499      	strb	r1, [r3, r2]
	PORT->Group[1].PINCFG[31].bit.INEN = 1;
     2a4:	5c99      	ldrb	r1, [r3, r2]
     2a6:	2002      	movs	r0, #2
     2a8:	4301      	orrs	r1, r0
     2aa:	5499      	strb	r1, [r3, r2]
	if((PORT->Group[1].IN.reg & PORT_PB31) != 0)
     2ac:	3a3f      	subs	r2, #63	; 0x3f
     2ae:	589b      	ldr	r3, [r3, r2]
     2b0:	2b00      	cmp	r3, #0
     2b2:	db24      	blt.n	2fe <splashScreen+0x11a>
		//This is the 'pi' graphic; put some codes
		//here to handle setting up the uarts.
		drawKare(1);
	}
	else
	drawKare(0); //The normal graphic
     2b4:	2000      	movs	r0, #0
     2b6:	4b3b      	ldr	r3, [pc, #236]	; (3a4 <splashScreen+0x1c0>)
     2b8:	4798      	blx	r3
	This is not used since I fixed the way fonts are rendered;
	Now, pixel(0,0) is in the top *right* corner of the screen.
	Trust me, this is easier.
	*/
	
	xCharPos = 40 - (strlen(textPhrase)/2);
     2ba:	0020      	movs	r0, r4
     2bc:	4b3a      	ldr	r3, [pc, #232]	; (3a8 <splashScreen+0x1c4>)
     2be:	4798      	blx	r3
     2c0:	4e3a      	ldr	r6, [pc, #232]	; (3ac <splashScreen+0x1c8>)
     2c2:	0840      	lsrs	r0, r0, #1
     2c4:	2328      	movs	r3, #40	; 0x28
     2c6:	1a18      	subs	r0, r3, r0
     2c8:	8030      	strh	r0, [r6, #0]
	yCharPos = 16;
     2ca:	4d39      	ldr	r5, [pc, #228]	; (3b0 <splashScreen+0x1cc>)
     2cc:	2310      	movs	r3, #16
     2ce:	802b      	strh	r3, [r5, #0]
	
	writeString(textPhrase);
     2d0:	0020      	movs	r0, r4
     2d2:	4b38      	ldr	r3, [pc, #224]	; (3b4 <splashScreen+0x1d0>)
     2d4:	4798      	blx	r3
	delay_ms(2000);
     2d6:	20fa      	movs	r0, #250	; 0xfa
     2d8:	00c0      	lsls	r0, r0, #3
     2da:	4b37      	ldr	r3, [pc, #220]	; (3b8 <splashScreen+0x1d4>)
     2dc:	4798      	blx	r3
	clearScreen();
     2de:	4b2d      	ldr	r3, [pc, #180]	; (394 <splashScreen+0x1b0>)
     2e0:	4798      	blx	r3
	
	setColorRGB(0,255,0);
     2e2:	2200      	movs	r2, #0
     2e4:	21ff      	movs	r1, #255	; 0xff
     2e6:	2000      	movs	r0, #0
     2e8:	4b2b      	ldr	r3, [pc, #172]	; (398 <splashScreen+0x1b4>)
     2ea:	4798      	blx	r3
	setBackColorRGB(0,0,0);
     2ec:	2200      	movs	r2, #0
     2ee:	2100      	movs	r1, #0
     2f0:	2000      	movs	r0, #0
     2f2:	4b32      	ldr	r3, [pc, #200]	; (3bc <splashScreen+0x1d8>)
     2f4:	4798      	blx	r3
	
	//Setting the xChar and yChar position has to come
	//after splashScreen() and InitLCD();
	xCharPos = 0;
     2f6:	2300      	movs	r3, #0
     2f8:	8033      	strh	r3, [r6, #0]
	yCharPos = 0;
     2fa:	802b      	strh	r3, [r5, #0]
	

     2fc:	bd70      	pop	{r4, r5, r6, pc}
		drawKare(1);
     2fe:	2001      	movs	r0, #1
     300:	4b28      	ldr	r3, [pc, #160]	; (3a4 <splashScreen+0x1c0>)
     302:	4798      	blx	r3
     304:	e7d9      	b.n	2ba <splashScreen+0xd6>
     306:	46c0      	nop			; (mov r8, r8)
     308:	200001d8 	.word	0x200001d8
     30c:	000044dc 	.word	0x000044dc
     310:	000044fc 	.word	0x000044fc
     314:	00004510 	.word	0x00004510
     318:	00004528 	.word	0x00004528
     31c:	00004538 	.word	0x00004538
     320:	00004540 	.word	0x00004540
     324:	00004568 	.word	0x00004568
     328:	00004594 	.word	0x00004594
     32c:	000045bc 	.word	0x000045bc
     330:	000045e8 	.word	0x000045e8
     334:	000045f4 	.word	0x000045f4
     338:	0000460c 	.word	0x0000460c
     33c:	0000462c 	.word	0x0000462c
     340:	0000464c 	.word	0x0000464c
     344:	00004670 	.word	0x00004670
     348:	00004680 	.word	0x00004680
     34c:	0000468c 	.word	0x0000468c
     350:	000046a8 	.word	0x000046a8
     354:	000046c8 	.word	0x000046c8
     358:	000046d0 	.word	0x000046d0
     35c:	000046e4 	.word	0x000046e4
     360:	00004700 	.word	0x00004700
     364:	00004710 	.word	0x00004710
     368:	00004734 	.word	0x00004734
     36c:	00004760 	.word	0x00004760
     370:	00004798 	.word	0x00004798
     374:	000047ac 	.word	0x000047ac
     378:	000047d8 	.word	0x000047d8
     37c:	000047ec 	.word	0x000047ec
     380:	00004808 	.word	0x00004808
     384:	00004848 	.word	0x00004848
     388:	0000486c 	.word	0x0000486c
     38c:	0000488c 	.word	0x0000488c
     390:	000033a5 	.word	0x000033a5
     394:	00002b45 	.word	0x00002b45
     398:	000028b1 	.word	0x000028b1
     39c:	4100448c 	.word	0x4100448c
     3a0:	41004400 	.word	0x41004400
     3a4:	00000115 	.word	0x00000115
     3a8:	00003589 	.word	0x00003589
     3ac:	20000298 	.word	0x20000298
     3b0:	2000029a 	.word	0x2000029a
     3b4:	00002101 	.word	0x00002101
     3b8:	00000401 	.word	0x00000401
     3bc:	000028d9 	.word	0x000028d9

000003c0 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     3c0:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     3c2:	2000      	movs	r0, #0
     3c4:	4b08      	ldr	r3, [pc, #32]	; (3e8 <delay_init+0x28>)
     3c6:	4798      	blx	r3
     3c8:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     3ca:	4c08      	ldr	r4, [pc, #32]	; (3ec <delay_init+0x2c>)
     3cc:	21fa      	movs	r1, #250	; 0xfa
     3ce:	0089      	lsls	r1, r1, #2
     3d0:	47a0      	blx	r4
     3d2:	4b07      	ldr	r3, [pc, #28]	; (3f0 <delay_init+0x30>)
     3d4:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     3d6:	4907      	ldr	r1, [pc, #28]	; (3f4 <delay_init+0x34>)
     3d8:	0028      	movs	r0, r5
     3da:	47a0      	blx	r4
     3dc:	4b06      	ldr	r3, [pc, #24]	; (3f8 <delay_init+0x38>)
     3de:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     3e0:	2205      	movs	r2, #5
     3e2:	4b06      	ldr	r3, [pc, #24]	; (3fc <delay_init+0x3c>)
     3e4:	601a      	str	r2, [r3, #0]
}
     3e6:	bd70      	pop	{r4, r5, r6, pc}
     3e8:	000018f9 	.word	0x000018f9
     3ec:	0000313d 	.word	0x0000313d
     3f0:	20000000 	.word	0x20000000
     3f4:	000f4240 	.word	0x000f4240
     3f8:	20000004 	.word	0x20000004
     3fc:	e000e010 	.word	0xe000e010

00000400 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     400:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     402:	4b08      	ldr	r3, [pc, #32]	; (424 <delay_cycles_ms+0x24>)
     404:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     406:	4a08      	ldr	r2, [pc, #32]	; (428 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     408:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     40a:	2180      	movs	r1, #128	; 0x80
     40c:	0249      	lsls	r1, r1, #9
	while (n--) {
     40e:	3801      	subs	r0, #1
     410:	d307      	bcc.n	422 <delay_cycles_ms+0x22>
	if (n > 0) {
     412:	2c00      	cmp	r4, #0
     414:	d0fb      	beq.n	40e <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     416:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     418:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     41a:	6813      	ldr	r3, [r2, #0]
     41c:	420b      	tst	r3, r1
     41e:	d0fc      	beq.n	41a <delay_cycles_ms+0x1a>
     420:	e7f5      	b.n	40e <delay_cycles_ms+0xe>
	}
}
     422:	bd30      	pop	{r4, r5, pc}
     424:	20000000 	.word	0x20000000
     428:	e000e010 	.word	0xe000e010

0000042c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     42c:	4b0c      	ldr	r3, [pc, #48]	; (460 <cpu_irq_enter_critical+0x34>)
     42e:	681b      	ldr	r3, [r3, #0]
     430:	2b00      	cmp	r3, #0
     432:	d106      	bne.n	442 <cpu_irq_enter_critical+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     434:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     438:	2b00      	cmp	r3, #0
     43a:	d007      	beq.n	44c <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     43c:	2200      	movs	r2, #0
     43e:	4b09      	ldr	r3, [pc, #36]	; (464 <cpu_irq_enter_critical+0x38>)
     440:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     442:	4a07      	ldr	r2, [pc, #28]	; (460 <cpu_irq_enter_critical+0x34>)
     444:	6813      	ldr	r3, [r2, #0]
     446:	3301      	adds	r3, #1
     448:	6013      	str	r3, [r2, #0]
}
     44a:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     44c:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     44e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     452:	2200      	movs	r2, #0
     454:	4b04      	ldr	r3, [pc, #16]	; (468 <cpu_irq_enter_critical+0x3c>)
     456:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     458:	3201      	adds	r2, #1
     45a:	4b02      	ldr	r3, [pc, #8]	; (464 <cpu_irq_enter_critical+0x38>)
     45c:	701a      	strb	r2, [r3, #0]
     45e:	e7f0      	b.n	442 <cpu_irq_enter_critical+0x16>
     460:	20000258 	.word	0x20000258
     464:	2000025c 	.word	0x2000025c
     468:	20000008 	.word	0x20000008

0000046c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     46c:	4b08      	ldr	r3, [pc, #32]	; (490 <cpu_irq_leave_critical+0x24>)
     46e:	681a      	ldr	r2, [r3, #0]
     470:	3a01      	subs	r2, #1
     472:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     474:	681b      	ldr	r3, [r3, #0]
     476:	2b00      	cmp	r3, #0
     478:	d109      	bne.n	48e <cpu_irq_leave_critical+0x22>
     47a:	4b06      	ldr	r3, [pc, #24]	; (494 <cpu_irq_leave_critical+0x28>)
     47c:	781b      	ldrb	r3, [r3, #0]
     47e:	2b00      	cmp	r3, #0
     480:	d005      	beq.n	48e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     482:	2201      	movs	r2, #1
     484:	4b04      	ldr	r3, [pc, #16]	; (498 <cpu_irq_leave_critical+0x2c>)
     486:	701a      	strb	r2, [r3, #0]
     488:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     48c:	b662      	cpsie	i
	}
}
     48e:	4770      	bx	lr
     490:	20000258 	.word	0x20000258
     494:	2000025c 	.word	0x2000025c
     498:	20000008 	.word	0x20000008

0000049c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     49c:	b5f0      	push	{r4, r5, r6, r7, lr}
     49e:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     4a0:	ac01      	add	r4, sp, #4
     4a2:	2501      	movs	r5, #1
     4a4:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     4a6:	2700      	movs	r7, #0
     4a8:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     4aa:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     4ac:	0021      	movs	r1, r4
     4ae:	203e      	movs	r0, #62	; 0x3e
     4b0:	4e06      	ldr	r6, [pc, #24]	; (4cc <system_board_init+0x30>)
     4b2:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     4b4:	2280      	movs	r2, #128	; 0x80
     4b6:	05d2      	lsls	r2, r2, #23
     4b8:	4b05      	ldr	r3, [pc, #20]	; (4d0 <system_board_init+0x34>)
     4ba:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     4bc:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     4be:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     4c0:	0021      	movs	r1, r4
     4c2:	200f      	movs	r0, #15
     4c4:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
     4c6:	b003      	add	sp, #12
     4c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     4ca:	46c0      	nop			; (mov r8, r8)
     4cc:	00000a05 	.word	0x00000a05
     4d0:	41004480 	.word	0x41004480

000004d4 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     4d4:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     4d6:	2200      	movs	r2, #0
     4d8:	2300      	movs	r3, #0
     4da:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
     4dc:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
     4de:	2100      	movs	r1, #0
     4e0:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     4e2:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     4e4:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
     4e6:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
     4e8:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
     4ea:	6082      	str	r2, [r0, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	//config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
     4ec:	24c0      	movs	r4, #192	; 0xc0
     4ee:	0164      	lsls	r4, r4, #5
     4f0:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     4f2:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     4f4:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
     4f6:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
     4f8:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
     4fa:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     4fc:	242a      	movs	r4, #42	; 0x2a
     4fe:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
     500:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
     502:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
     504:	3c06      	subs	r4, #6
     506:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     508:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     50a:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
     50c:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
     50e:	232b      	movs	r3, #43	; 0x2b
     510:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
     512:	3301      	adds	r3, #1
     514:	54c1      	strb	r1, [r0, r3]
}
     516:	bd10      	pop	{r4, pc}

00000518 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     518:	b5f0      	push	{r4, r5, r6, r7, lr}
     51a:	46d6      	mov	lr, sl
     51c:	464f      	mov	r7, r9
     51e:	4646      	mov	r6, r8
     520:	b5c0      	push	{r6, r7, lr}
     522:	b096      	sub	sp, #88	; 0x58
     524:	0007      	movs	r7, r0
     526:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     528:	6001      	str	r1, [r0, #0]
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     52a:	4ac6      	ldr	r2, [pc, #792]	; (844 <adc_init+0x32c>)
     52c:	6a10      	ldr	r0, [r2, #32]
     52e:	2380      	movs	r3, #128	; 0x80
     530:	025b      	lsls	r3, r3, #9
     532:	4303      	orrs	r3, r0
     534:	6213      	str	r3, [r2, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     536:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     538:	2005      	movs	r0, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     53a:	07db      	lsls	r3, r3, #31
     53c:	d505      	bpl.n	54a <adc_init+0x32>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
     53e:	b016      	add	sp, #88	; 0x58
     540:	bc1c      	pop	{r2, r3, r4}
     542:	4690      	mov	r8, r2
     544:	4699      	mov	r9, r3
     546:	46a2      	mov	sl, r4
     548:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     54a:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
     54c:	3017      	adds	r0, #23
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     54e:	079b      	lsls	r3, r3, #30
     550:	d4f5      	bmi.n	53e <adc_init+0x26>
	module_inst->reference = config->reference;
     552:	7873      	ldrb	r3, [r6, #1]
     554:	713b      	strb	r3, [r7, #4]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
     556:	2b00      	cmp	r3, #0
     558:	d104      	bne.n	564 <adc_init+0x4c>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
     55a:	4abb      	ldr	r2, [pc, #748]	; (848 <adc_init+0x330>)
     55c:	6c13      	ldr	r3, [r2, #64]	; 0x40
     55e:	2104      	movs	r1, #4
     560:	430b      	orrs	r3, r1
     562:	6413      	str	r3, [r2, #64]	; 0x40
		module_inst->callback[i] = NULL;
     564:	2300      	movs	r3, #0
     566:	60bb      	str	r3, [r7, #8]
     568:	60fb      	str	r3, [r7, #12]
     56a:	613b      	str	r3, [r7, #16]
	module_inst->registered_callback_mask = 0;
     56c:	76bb      	strb	r3, [r7, #26]
	module_inst->enabled_callback_mask = 0;
     56e:	76fb      	strb	r3, [r7, #27]
	module_inst->remaining_conversions = 0;
     570:	833b      	strh	r3, [r7, #24]
	module_inst->job_status = STATUS_OK;
     572:	773b      	strb	r3, [r7, #28]
	_adc_instances[0] = module_inst;
     574:	4bb5      	ldr	r3, [pc, #724]	; (84c <adc_init+0x334>)
     576:	601f      	str	r7, [r3, #0]
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
     578:	232a      	movs	r3, #42	; 0x2a
     57a:	5cf3      	ldrb	r3, [r6, r3]
     57c:	2b00      	cmp	r3, #0
     57e:	d105      	bne.n	58c <adc_init+0x74>
     580:	7d33      	ldrb	r3, [r6, #20]
     582:	2b00      	cmp	r3, #0
     584:	d102      	bne.n	58c <adc_init+0x74>
		module_inst->software_trigger = true;
     586:	3301      	adds	r3, #1
     588:	777b      	strb	r3, [r7, #29]
     58a:	e001      	b.n	590 <adc_init+0x78>
		module_inst->software_trigger = false;
     58c:	2300      	movs	r3, #0
     58e:	777b      	strb	r3, [r7, #29]
	Adc *const adc_module = module_inst->hw;
     590:	683b      	ldr	r3, [r7, #0]
     592:	4698      	mov	r8, r3
	gclk_chan_conf.source_generator = config->clock_source;
     594:	7833      	ldrb	r3, [r6, #0]
     596:	466a      	mov	r2, sp
     598:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
     59a:	4669      	mov	r1, sp
     59c:	201e      	movs	r0, #30
     59e:	4bac      	ldr	r3, [pc, #688]	; (850 <adc_init+0x338>)
     5a0:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
     5a2:	201e      	movs	r0, #30
     5a4:	4bab      	ldr	r3, [pc, #684]	; (854 <adc_init+0x33c>)
     5a6:	4798      	blx	r3
	if (config->pin_scan.inputs_to_scan != 0) {
     5a8:	232c      	movs	r3, #44	; 0x2c
     5aa:	5cf2      	ldrb	r2, [r6, r3]
     5ac:	2a00      	cmp	r2, #0
     5ae:	d054      	beq.n	65a <adc_init+0x142>
		uint8_t offset = config->pin_scan.offset_start_scan;
     5b0:	3b01      	subs	r3, #1
     5b2:	5cf5      	ldrb	r5, [r6, r3]
		uint8_t start_pin =
     5b4:	7b33      	ldrb	r3, [r6, #12]
     5b6:	18eb      	adds	r3, r5, r3
     5b8:	b2db      	uxtb	r3, r3
		uint8_t end_pin =
     5ba:	18d1      	adds	r1, r2, r3
		while (start_pin < end_pin) {
     5bc:	b2c9      	uxtb	r1, r1
     5be:	428b      	cmp	r3, r1
     5c0:	d221      	bcs.n	606 <adc_init+0xee>
     5c2:	1952      	adds	r2, r2, r5
     5c4:	b2d3      	uxtb	r3, r2
     5c6:	4699      	mov	r9, r3
	const uint32_t pinmapping[] = {
     5c8:	4ba3      	ldr	r3, [pc, #652]	; (858 <adc_init+0x340>)
     5ca:	469a      	mov	sl, r3
     5cc:	e003      	b.n	5d6 <adc_init+0xbe>
			offset++;
     5ce:	3501      	adds	r5, #1
     5d0:	b2ed      	uxtb	r5, r5
		while (start_pin < end_pin) {
     5d2:	454d      	cmp	r5, r9
     5d4:	d017      	beq.n	606 <adc_init+0xee>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
     5d6:	240f      	movs	r4, #15
     5d8:	402c      	ands	r4, r5
     5da:	7b33      	ldrb	r3, [r6, #12]
     5dc:	18e4      	adds	r4, r4, r3
	const uint32_t pinmapping[] = {
     5de:	2250      	movs	r2, #80	; 0x50
     5e0:	499e      	ldr	r1, [pc, #632]	; (85c <adc_init+0x344>)
     5e2:	a802      	add	r0, sp, #8
     5e4:	47d0      	blx	sl
	if (pin <= ADC_EXTCHANNEL_MSB) {
     5e6:	2c13      	cmp	r4, #19
     5e8:	d8f1      	bhi.n	5ce <adc_init+0xb6>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     5ea:	00a4      	lsls	r4, r4, #2
     5ec:	ab02      	add	r3, sp, #8
     5ee:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     5f0:	a901      	add	r1, sp, #4
     5f2:	2300      	movs	r3, #0
     5f4:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     5f6:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     5f8:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     5fa:	3301      	adds	r3, #1
     5fc:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     5fe:	b2c0      	uxtb	r0, r0
     600:	4b97      	ldr	r3, [pc, #604]	; (860 <adc_init+0x348>)
     602:	4798      	blx	r3
     604:	e7e3      	b.n	5ce <adc_init+0xb6>
		_adc_configure_ain_pin(config->negative_input);
     606:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     608:	2250      	movs	r2, #80	; 0x50
     60a:	4994      	ldr	r1, [pc, #592]	; (85c <adc_init+0x344>)
     60c:	a802      	add	r0, sp, #8
     60e:	4b92      	ldr	r3, [pc, #584]	; (858 <adc_init+0x340>)
     610:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     612:	2c13      	cmp	r4, #19
     614:	d913      	bls.n	63e <adc_init+0x126>
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
     616:	7d73      	ldrb	r3, [r6, #21]
     618:	009b      	lsls	r3, r3, #2
     61a:	b2db      	uxtb	r3, r3
     61c:	4642      	mov	r2, r8
     61e:	7013      	strb	r3, [r2, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     620:	7db3      	ldrb	r3, [r6, #22]
     622:	01db      	lsls	r3, r3, #7
     624:	7872      	ldrb	r2, [r6, #1]
     626:	4313      	orrs	r3, r2
     628:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
     62a:	4642      	mov	r2, r8
     62c:	7053      	strb	r3, [r2, #1]
	switch (config->resolution) {
     62e:	7933      	ldrb	r3, [r6, #4]
     630:	2b34      	cmp	r3, #52	; 0x34
     632:	d900      	bls.n	636 <adc_init+0x11e>
     634:	e17b      	b.n	92e <adc_init+0x416>
     636:	009b      	lsls	r3, r3, #2
     638:	4a8a      	ldr	r2, [pc, #552]	; (864 <adc_init+0x34c>)
     63a:	58d3      	ldr	r3, [r2, r3]
     63c:	469f      	mov	pc, r3
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     63e:	00a4      	lsls	r4, r4, #2
     640:	ab02      	add	r3, sp, #8
     642:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     644:	a901      	add	r1, sp, #4
     646:	2300      	movs	r3, #0
     648:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     64a:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     64c:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     64e:	3301      	adds	r3, #1
     650:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     652:	b2c0      	uxtb	r0, r0
     654:	4b82      	ldr	r3, [pc, #520]	; (860 <adc_init+0x348>)
     656:	4798      	blx	r3
     658:	e7dd      	b.n	616 <adc_init+0xfe>
		_adc_configure_ain_pin(config->positive_input);
     65a:	7b34      	ldrb	r4, [r6, #12]
	const uint32_t pinmapping[] = {
     65c:	2250      	movs	r2, #80	; 0x50
     65e:	497f      	ldr	r1, [pc, #508]	; (85c <adc_init+0x344>)
     660:	a802      	add	r0, sp, #8
     662:	4b7d      	ldr	r3, [pc, #500]	; (858 <adc_init+0x340>)
     664:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     666:	2c13      	cmp	r4, #19
     668:	d915      	bls.n	696 <adc_init+0x17e>
		_adc_configure_ain_pin(config->negative_input);
     66a:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     66c:	2250      	movs	r2, #80	; 0x50
     66e:	497b      	ldr	r1, [pc, #492]	; (85c <adc_init+0x344>)
     670:	a802      	add	r0, sp, #8
     672:	4b79      	ldr	r3, [pc, #484]	; (858 <adc_init+0x340>)
     674:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     676:	2c13      	cmp	r4, #19
     678:	d8cd      	bhi.n	616 <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     67a:	00a4      	lsls	r4, r4, #2
     67c:	ab02      	add	r3, sp, #8
     67e:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     680:	a901      	add	r1, sp, #4
     682:	2300      	movs	r3, #0
     684:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     686:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     688:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     68a:	3301      	adds	r3, #1
     68c:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     68e:	b2c0      	uxtb	r0, r0
     690:	4b73      	ldr	r3, [pc, #460]	; (860 <adc_init+0x348>)
     692:	4798      	blx	r3
     694:	e7bf      	b.n	616 <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     696:	00a4      	lsls	r4, r4, #2
     698:	ab02      	add	r3, sp, #8
     69a:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     69c:	a901      	add	r1, sp, #4
     69e:	2300      	movs	r3, #0
     6a0:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     6a2:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     6a4:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     6a6:	3301      	adds	r3, #1
     6a8:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     6aa:	b2c0      	uxtb	r0, r0
     6ac:	4b6c      	ldr	r3, [pc, #432]	; (860 <adc_init+0x348>)
     6ae:	4798      	blx	r3
     6b0:	e7db      	b.n	66a <adc_init+0x152>
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     6b2:	2304      	movs	r3, #4
		resolution = ADC_RESOLUTION_16BIT;
     6b4:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_4;
     6b6:	2102      	movs	r1, #2
     6b8:	e01a      	b.n	6f0 <adc_init+0x1d8>
		adjres = config->divide_result;
     6ba:	7c71      	ldrb	r1, [r6, #17]
		accumulate = config->accumulate_samples;
     6bc:	7c33      	ldrb	r3, [r6, #16]
		resolution = ADC_RESOLUTION_16BIT;
     6be:	2410      	movs	r4, #16
     6c0:	e016      	b.n	6f0 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     6c2:	2306      	movs	r3, #6
		resolution = ADC_RESOLUTION_16BIT;
     6c4:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     6c6:	2101      	movs	r1, #1
     6c8:	e012      	b.n	6f0 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     6ca:	2308      	movs	r3, #8
		resolution = ADC_RESOLUTION_16BIT;
     6cc:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     6ce:	2100      	movs	r1, #0
     6d0:	e00e      	b.n	6f0 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     6d2:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_8BIT;
     6d4:	2430      	movs	r4, #48	; 0x30
	uint8_t adjres = 0;
     6d6:	2100      	movs	r1, #0
     6d8:	e00a      	b.n	6f0 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     6da:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_10BIT;
     6dc:	2420      	movs	r4, #32
	uint8_t adjres = 0;
     6de:	2100      	movs	r1, #0
     6e0:	e006      	b.n	6f0 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     6e2:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_12BIT;
     6e4:	2400      	movs	r4, #0
	uint8_t adjres = 0;
     6e6:	2100      	movs	r1, #0
     6e8:	e002      	b.n	6f0 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     6ea:	2302      	movs	r3, #2
		resolution = ADC_RESOLUTION_16BIT;
     6ec:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     6ee:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     6f0:	0109      	lsls	r1, r1, #4
     6f2:	2270      	movs	r2, #112	; 0x70
     6f4:	400a      	ands	r2, r1
     6f6:	4313      	orrs	r3, r2
     6f8:	4642      	mov	r2, r8
     6fa:	7093      	strb	r3, [r2, #2]
	if (config->sample_length > 63) {
     6fc:	7df3      	ldrb	r3, [r6, #23]
		return STATUS_ERR_INVALID_ARG;
     6fe:	2017      	movs	r0, #23
	if (config->sample_length > 63) {
     700:	2b3f      	cmp	r3, #63	; 0x3f
     702:	d900      	bls.n	706 <adc_init+0x1ee>
     704:	e71b      	b.n	53e <adc_init+0x26>
		adc_module->SAMPCTRL.reg =
     706:	70d3      	strb	r3, [r2, #3]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     708:	683a      	ldr	r2, [r7, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     70a:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     70c:	b25b      	sxtb	r3, r3
     70e:	2b00      	cmp	r3, #0
     710:	dbfb      	blt.n	70a <adc_init+0x1f2>
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
     712:	7cf3      	ldrb	r3, [r6, #19]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     714:	8872      	ldrh	r2, [r6, #2]
     716:	4313      	orrs	r3, r2
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     718:	2224      	movs	r2, #36	; 0x24
     71a:	5cb2      	ldrb	r2, [r6, r2]
     71c:	00d2      	lsls	r2, r2, #3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     71e:	4313      	orrs	r3, r2
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
     720:	7d32      	ldrb	r2, [r6, #20]
     722:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     724:	4313      	orrs	r3, r2
     726:	7cb2      	ldrb	r2, [r6, #18]
     728:	0052      	lsls	r2, r2, #1
     72a:	4313      	orrs	r3, r2
     72c:	4323      	orrs	r3, r4
	adc_module->CTRLB.reg =
     72e:	4642      	mov	r2, r8
     730:	8093      	strh	r3, [r2, #4]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     732:	7e33      	ldrb	r3, [r6, #24]
     734:	2b00      	cmp	r3, #0
     736:	d020      	beq.n	77a <adc_init+0x262>
		switch (resolution) {
     738:	2c10      	cmp	r4, #16
     73a:	d100      	bne.n	73e <adc_init+0x226>
     73c:	e0d9      	b.n	8f2 <adc_init+0x3da>
     73e:	d800      	bhi.n	742 <adc_init+0x22a>
     740:	e098      	b.n	874 <adc_init+0x35c>
     742:	2c20      	cmp	r4, #32
     744:	d100      	bne.n	748 <adc_init+0x230>
     746:	e0b6      	b.n	8b6 <adc_init+0x39e>
     748:	2c30      	cmp	r4, #48	; 0x30
     74a:	d116      	bne.n	77a <adc_init+0x262>
			if (config->differential_mode &&
     74c:	7cf2      	ldrb	r2, [r6, #19]
     74e:	2a00      	cmp	r2, #0
     750:	d00a      	beq.n	768 <adc_init+0x250>
					(config->window.window_lower_value > 127 ||
     752:	69f2      	ldr	r2, [r6, #28]
     754:	3280      	adds	r2, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
     756:	2017      	movs	r0, #23
			if (config->differential_mode &&
     758:	2aff      	cmp	r2, #255	; 0xff
     75a:	d900      	bls.n	75e <adc_init+0x246>
     75c:	e6ef      	b.n	53e <adc_init+0x26>
					config->window.window_lower_value < -128 ||
     75e:	6a32      	ldr	r2, [r6, #32]
     760:	3280      	adds	r2, #128	; 0x80
     762:	2aff      	cmp	r2, #255	; 0xff
     764:	d900      	bls.n	768 <adc_init+0x250>
     766:	e6ea      	b.n	53e <adc_init+0x26>
				return STATUS_ERR_INVALID_ARG;
     768:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 255 ||
     76a:	69f2      	ldr	r2, [r6, #28]
     76c:	2aff      	cmp	r2, #255	; 0xff
     76e:	dd00      	ble.n	772 <adc_init+0x25a>
     770:	e6e5      	b.n	53e <adc_init+0x26>
     772:	6a32      	ldr	r2, [r6, #32]
     774:	2aff      	cmp	r2, #255	; 0xff
     776:	dd00      	ble.n	77a <adc_init+0x262>
     778:	e6e1      	b.n	53e <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     77a:	6839      	ldr	r1, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     77c:	7e4a      	ldrb	r2, [r1, #25]
	while (adc_is_syncing(module_inst)) {
     77e:	b252      	sxtb	r2, r2
     780:	2a00      	cmp	r2, #0
     782:	dbfb      	blt.n	77c <adc_init+0x264>
	adc_module->WINCTRL.reg = config->window.window_mode;
     784:	4642      	mov	r2, r8
     786:	7213      	strb	r3, [r2, #8]
	Adc *const adc_module = module_inst->hw;
     788:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     78a:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     78c:	b25b      	sxtb	r3, r3
     78e:	2b00      	cmp	r3, #0
     790:	dbfb      	blt.n	78a <adc_init+0x272>
	adc_module->WINLT.reg =
     792:	8bb3      	ldrh	r3, [r6, #28]
     794:	4642      	mov	r2, r8
     796:	8393      	strh	r3, [r2, #28]
	Adc *const adc_module = module_inst->hw;
     798:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     79a:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     79c:	b25b      	sxtb	r3, r3
     79e:	2b00      	cmp	r3, #0
     7a0:	dbfb      	blt.n	79a <adc_init+0x282>
	adc_module->WINUT.reg = config->window.window_upper_value <<
     7a2:	8c33      	ldrh	r3, [r6, #32]
     7a4:	4642      	mov	r2, r8
     7a6:	8413      	strh	r3, [r2, #32]
	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
     7a8:	232c      	movs	r3, #44	; 0x2c
     7aa:	5cf3      	ldrb	r3, [r6, r3]
	if (inputs_to_scan > 0) {
     7ac:	2b00      	cmp	r3, #0
     7ae:	d005      	beq.n	7bc <adc_init+0x2a4>
		inputs_to_scan--;
     7b0:	3b01      	subs	r3, #1
     7b2:	b2db      	uxtb	r3, r3
		return STATUS_ERR_INVALID_ARG;
     7b4:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     7b6:	2b0f      	cmp	r3, #15
     7b8:	d900      	bls.n	7bc <adc_init+0x2a4>
     7ba:	e6c0      	b.n	53e <adc_init+0x26>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
     7bc:	222b      	movs	r2, #43	; 0x2b
     7be:	5cb1      	ldrb	r1, [r6, r2]
		return STATUS_ERR_INVALID_ARG;
     7c0:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     7c2:	290f      	cmp	r1, #15
     7c4:	d900      	bls.n	7c8 <adc_init+0x2b0>
     7c6:	e6ba      	b.n	53e <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     7c8:	6838      	ldr	r0, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     7ca:	7e42      	ldrb	r2, [r0, #25]
	while (adc_is_syncing(module_inst)) {
     7cc:	b252      	sxtb	r2, r2
     7ce:	2a00      	cmp	r2, #0
     7d0:	dbfb      	blt.n	7ca <adc_init+0x2b2>
			config->negative_input |
     7d2:	89f2      	ldrh	r2, [r6, #14]
			config->positive_input;
     7d4:	7b30      	ldrb	r0, [r6, #12]
			config->negative_input |
     7d6:	4302      	orrs	r2, r0
     7d8:	68b0      	ldr	r0, [r6, #8]
     7da:	4302      	orrs	r2, r0
			(config->pin_scan.offset_start_scan <<
     7dc:	0509      	lsls	r1, r1, #20
			config->negative_input |
     7de:	430a      	orrs	r2, r1
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     7e0:	041b      	lsls	r3, r3, #16
			config->negative_input |
     7e2:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
     7e4:	4642      	mov	r2, r8
     7e6:	6113      	str	r3, [r2, #16]
	adc_module->EVCTRL.reg = config->event_action;
     7e8:	232a      	movs	r3, #42	; 0x2a
     7ea:	5cf3      	ldrb	r3, [r6, r3]
     7ec:	7513      	strb	r3, [r2, #20]
	adc_module->INTENCLR.reg =
     7ee:	230f      	movs	r3, #15
     7f0:	7593      	strb	r3, [r2, #22]
	if (config->correction.correction_enable){
     7f2:	3315      	adds	r3, #21
     7f4:	5cf3      	ldrb	r3, [r6, r3]
     7f6:	2b00      	cmp	r3, #0
     7f8:	d012      	beq.n	820 <adc_init+0x308>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     7fa:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
     7fc:	4a1a      	ldr	r2, [pc, #104]	; (868 <adc_init+0x350>)
			return STATUS_ERR_INVALID_ARG;
     7fe:	2017      	movs	r0, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     800:	4293      	cmp	r3, r2
     802:	d900      	bls.n	806 <adc_init+0x2ee>
     804:	e69b      	b.n	53e <adc_init+0x26>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     806:	4642      	mov	r2, r8
     808:	8493      	strh	r3, [r2, #36]	; 0x24
		if (config->correction.offset_correction > 2047 ||
     80a:	8d32      	ldrh	r2, [r6, #40]	; 0x28
     80c:	2380      	movs	r3, #128	; 0x80
     80e:	011b      	lsls	r3, r3, #4
     810:	18d3      	adds	r3, r2, r3
     812:	4915      	ldr	r1, [pc, #84]	; (868 <adc_init+0x350>)
     814:	b29b      	uxth	r3, r3
     816:	428b      	cmp	r3, r1
     818:	d900      	bls.n	81c <adc_init+0x304>
     81a:	e690      	b.n	53e <adc_init+0x26>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     81c:	4643      	mov	r3, r8
     81e:	84da      	strh	r2, [r3, #38]	; 0x26
			ADC_CALIB_BIAS_CAL(
     820:	4b12      	ldr	r3, [pc, #72]	; (86c <adc_init+0x354>)
     822:	681b      	ldr	r3, [r3, #0]
     824:	015b      	lsls	r3, r3, #5
     826:	22e0      	movs	r2, #224	; 0xe0
     828:	00d2      	lsls	r2, r2, #3
     82a:	4013      	ands	r3, r2
			ADC_CALIB_LINEARITY_CAL(
     82c:	4a10      	ldr	r2, [pc, #64]	; (870 <adc_init+0x358>)
     82e:	6851      	ldr	r1, [r2, #4]
     830:	0149      	lsls	r1, r1, #5
     832:	6812      	ldr	r2, [r2, #0]
     834:	0ed2      	lsrs	r2, r2, #27
     836:	430a      	orrs	r2, r1
     838:	b2d2      	uxtb	r2, r2
			) |
     83a:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
     83c:	4642      	mov	r2, r8
     83e:	8513      	strh	r3, [r2, #40]	; 0x28
	return STATUS_OK;
     840:	2000      	movs	r0, #0
     842:	e67c      	b.n	53e <adc_init+0x26>
     844:	40000400 	.word	0x40000400
     848:	40000800 	.word	0x40000800
     84c:	20000370 	.word	0x20000370
     850:	00001a11 	.word	0x00001a11
     854:	00001985 	.word	0x00001985
     858:	000032f1 	.word	0x000032f1
     85c:	00004980 	.word	0x00004980
     860:	00001b09 	.word	0x00001b09
     864:	000048ac 	.word	0x000048ac
     868:	00000fff 	.word	0x00000fff
     86c:	00806024 	.word	0x00806024
     870:	00806020 	.word	0x00806020
		switch (resolution) {
     874:	2c00      	cmp	r4, #0
     876:	d000      	beq.n	87a <adc_init+0x362>
     878:	e77f      	b.n	77a <adc_init+0x262>
			if (config->differential_mode &&
     87a:	7cf2      	ldrb	r2, [r6, #19]
     87c:	2a00      	cmp	r2, #0
     87e:	d00f      	beq.n	8a0 <adc_init+0x388>
					(config->window.window_lower_value > 2047 ||
     880:	69f2      	ldr	r2, [r6, #28]
     882:	2180      	movs	r1, #128	; 0x80
     884:	0109      	lsls	r1, r1, #4
     886:	468c      	mov	ip, r1
     888:	4462      	add	r2, ip
			if (config->differential_mode &&
     88a:	492a      	ldr	r1, [pc, #168]	; (934 <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
     88c:	2017      	movs	r0, #23
			if (config->differential_mode &&
     88e:	428a      	cmp	r2, r1
     890:	d900      	bls.n	894 <adc_init+0x37c>
     892:	e654      	b.n	53e <adc_init+0x26>
					config->window.window_lower_value < -2048 ||
     894:	6a32      	ldr	r2, [r6, #32]
     896:	4462      	add	r2, ip
     898:	4926      	ldr	r1, [pc, #152]	; (934 <adc_init+0x41c>)
     89a:	428a      	cmp	r2, r1
     89c:	d900      	bls.n	8a0 <adc_init+0x388>
     89e:	e64e      	b.n	53e <adc_init+0x26>
			} else if (config->window.window_lower_value > 4095 ||
     8a0:	4a24      	ldr	r2, [pc, #144]	; (934 <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
     8a2:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
     8a4:	69f1      	ldr	r1, [r6, #28]
     8a6:	4291      	cmp	r1, r2
     8a8:	dd00      	ble.n	8ac <adc_init+0x394>
     8aa:	e648      	b.n	53e <adc_init+0x26>
     8ac:	6a31      	ldr	r1, [r6, #32]
     8ae:	4291      	cmp	r1, r2
     8b0:	dd00      	ble.n	8b4 <adc_init+0x39c>
     8b2:	e644      	b.n	53e <adc_init+0x26>
     8b4:	e761      	b.n	77a <adc_init+0x262>
			if (config->differential_mode &&
     8b6:	7cf2      	ldrb	r2, [r6, #19]
     8b8:	2a00      	cmp	r2, #0
     8ba:	d00f      	beq.n	8dc <adc_init+0x3c4>
					(config->window.window_lower_value > 511 ||
     8bc:	69f2      	ldr	r2, [r6, #28]
     8be:	2180      	movs	r1, #128	; 0x80
     8c0:	0089      	lsls	r1, r1, #2
     8c2:	468c      	mov	ip, r1
     8c4:	4462      	add	r2, ip
			if (config->differential_mode &&
     8c6:	491c      	ldr	r1, [pc, #112]	; (938 <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
     8c8:	2017      	movs	r0, #23
			if (config->differential_mode &&
     8ca:	428a      	cmp	r2, r1
     8cc:	d900      	bls.n	8d0 <adc_init+0x3b8>
     8ce:	e636      	b.n	53e <adc_init+0x26>
					config->window.window_lower_value < -512 ||
     8d0:	6a32      	ldr	r2, [r6, #32]
     8d2:	4462      	add	r2, ip
     8d4:	4918      	ldr	r1, [pc, #96]	; (938 <adc_init+0x420>)
     8d6:	428a      	cmp	r2, r1
     8d8:	d900      	bls.n	8dc <adc_init+0x3c4>
     8da:	e630      	b.n	53e <adc_init+0x26>
			} else if (config->window.window_lower_value > 1023 ||
     8dc:	4a16      	ldr	r2, [pc, #88]	; (938 <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
     8de:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
     8e0:	69f1      	ldr	r1, [r6, #28]
     8e2:	4291      	cmp	r1, r2
     8e4:	dd00      	ble.n	8e8 <adc_init+0x3d0>
     8e6:	e62a      	b.n	53e <adc_init+0x26>
     8e8:	6a31      	ldr	r1, [r6, #32]
     8ea:	4291      	cmp	r1, r2
     8ec:	dd00      	ble.n	8f0 <adc_init+0x3d8>
     8ee:	e626      	b.n	53e <adc_init+0x26>
     8f0:	e743      	b.n	77a <adc_init+0x262>
			if (config->differential_mode &&
     8f2:	7cf2      	ldrb	r2, [r6, #19]
     8f4:	2a00      	cmp	r2, #0
     8f6:	d00f      	beq.n	918 <adc_init+0x400>
					(config->window.window_lower_value > 32767 ||
     8f8:	69f2      	ldr	r2, [r6, #28]
     8fa:	2180      	movs	r1, #128	; 0x80
     8fc:	0209      	lsls	r1, r1, #8
     8fe:	468c      	mov	ip, r1
     900:	4462      	add	r2, ip
			if (config->differential_mode &&
     902:	490e      	ldr	r1, [pc, #56]	; (93c <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
     904:	2017      	movs	r0, #23
			if (config->differential_mode &&
     906:	428a      	cmp	r2, r1
     908:	d900      	bls.n	90c <adc_init+0x3f4>
     90a:	e618      	b.n	53e <adc_init+0x26>
					config->window.window_lower_value < -32768 ||
     90c:	6a32      	ldr	r2, [r6, #32]
     90e:	4462      	add	r2, ip
     910:	490a      	ldr	r1, [pc, #40]	; (93c <adc_init+0x424>)
     912:	428a      	cmp	r2, r1
     914:	d900      	bls.n	918 <adc_init+0x400>
     916:	e612      	b.n	53e <adc_init+0x26>
			} else if (config->window.window_lower_value > 65535 ||
     918:	4a08      	ldr	r2, [pc, #32]	; (93c <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
     91a:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
     91c:	69f1      	ldr	r1, [r6, #28]
     91e:	4291      	cmp	r1, r2
     920:	dd00      	ble.n	924 <adc_init+0x40c>
     922:	e60c      	b.n	53e <adc_init+0x26>
     924:	6a31      	ldr	r1, [r6, #32]
     926:	4291      	cmp	r1, r2
     928:	dd00      	ble.n	92c <adc_init+0x414>
     92a:	e608      	b.n	53e <adc_init+0x26>
     92c:	e725      	b.n	77a <adc_init+0x262>
		return STATUS_ERR_INVALID_ARG;
     92e:	2017      	movs	r0, #23
     930:	e605      	b.n	53e <adc_init+0x26>
     932:	46c0      	nop			; (mov r8, r8)
     934:	00000fff 	.word	0x00000fff
     938:	000003ff 	.word	0x000003ff
     93c:	0000ffff 	.word	0x0000ffff

00000940 <ADC_Handler>:
	}
}

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
     940:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
     942:	4b2f      	ldr	r3, [pc, #188]	; (a00 <ADC_Handler+0xc0>)
     944:	681d      	ldr	r5, [r3, #0]
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
     946:	682b      	ldr	r3, [r5, #0]
     948:	7e1a      	ldrb	r2, [r3, #24]
     94a:	7ddc      	ldrb	r4, [r3, #23]
     94c:	4014      	ands	r4, r2
	if (flags & ADC_INTFLAG_RESRDY) {
     94e:	07e2      	lsls	r2, r4, #31
     950:	d416      	bmi.n	980 <ADC_Handler+0x40>
	if (flags & ADC_INTFLAG_WINMON) {
     952:	0763      	lsls	r3, r4, #29
     954:	d508      	bpl.n	968 <ADC_Handler+0x28>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     956:	2304      	movs	r3, #4
     958:	682a      	ldr	r2, [r5, #0]
     95a:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     95c:	7eeb      	ldrb	r3, [r5, #27]
     95e:	079b      	lsls	r3, r3, #30
     960:	d502      	bpl.n	968 <ADC_Handler+0x28>
     962:	7eab      	ldrb	r3, [r5, #26]
     964:	079b      	lsls	r3, r3, #30
     966:	d442      	bmi.n	9ee <ADC_Handler+0xae>
	if (flags & ADC_INTFLAG_OVERRUN) {
     968:	07a3      	lsls	r3, r4, #30
     96a:	d508      	bpl.n	97e <ADC_Handler+0x3e>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     96c:	2302      	movs	r3, #2
     96e:	682a      	ldr	r2, [r5, #0]
     970:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     972:	7eeb      	ldrb	r3, [r5, #27]
     974:	075b      	lsls	r3, r3, #29
     976:	d502      	bpl.n	97e <ADC_Handler+0x3e>
     978:	7eab      	ldrb	r3, [r5, #26]
     97a:	075b      	lsls	r3, r3, #29
     97c:	d43b      	bmi.n	9f6 <ADC_Handler+0xb6>
	_adc_interrupt_handler(0);
}
     97e:	bd70      	pop	{r4, r5, r6, pc}
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     980:	2201      	movs	r2, #1
     982:	761a      	strb	r2, [r3, #24]
	Adc *const adc_module = module_inst->hw;
     984:	682a      	ldr	r2, [r5, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     986:	7e53      	ldrb	r3, [r2, #25]
		while (adc_is_syncing(module)) {
     988:	b25b      	sxtb	r3, r3
     98a:	2b00      	cmp	r3, #0
     98c:	dbfb      	blt.n	986 <ADC_Handler+0x46>
		*(module->job_buffer++) = module->hw->RESULT.reg;
     98e:	6969      	ldr	r1, [r5, #20]
     990:	1c8b      	adds	r3, r1, #2
     992:	616b      	str	r3, [r5, #20]
     994:	8b53      	ldrh	r3, [r2, #26]
     996:	b29b      	uxth	r3, r3
     998:	800b      	strh	r3, [r1, #0]
		if (--module->remaining_conversions > 0) {
     99a:	8b2b      	ldrh	r3, [r5, #24]
     99c:	3b01      	subs	r3, #1
     99e:	b29b      	uxth	r3, r3
     9a0:	832b      	strh	r3, [r5, #24]
     9a2:	2b00      	cmp	r3, #0
     9a4:	d011      	beq.n	9ca <ADC_Handler+0x8a>
			if (module->software_trigger == true) {
     9a6:	7f6b      	ldrb	r3, [r5, #29]
     9a8:	2b00      	cmp	r3, #0
     9aa:	d0d2      	beq.n	952 <ADC_Handler+0x12>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     9ac:	682a      	ldr	r2, [r5, #0]
     9ae:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     9b0:	b25b      	sxtb	r3, r3
     9b2:	2b00      	cmp	r3, #0
     9b4:	dbfb      	blt.n	9ae <ADC_Handler+0x6e>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     9b6:	7b13      	ldrb	r3, [r2, #12]
     9b8:	2102      	movs	r1, #2
     9ba:	430b      	orrs	r3, r1
     9bc:	7313      	strb	r3, [r2, #12]
	Adc *const adc_module = module_inst->hw;
     9be:	682a      	ldr	r2, [r5, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     9c0:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     9c2:	b25b      	sxtb	r3, r3
     9c4:	2b00      	cmp	r3, #0
     9c6:	dbfb      	blt.n	9c0 <ADC_Handler+0x80>
     9c8:	e7c3      	b.n	952 <ADC_Handler+0x12>
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     9ca:	2301      	movs	r3, #1
     9cc:	682a      	ldr	r2, [r5, #0]
     9ce:	7593      	strb	r3, [r2, #22]
			if (module->job_status == STATUS_BUSY) {
     9d0:	7f2b      	ldrb	r3, [r5, #28]
     9d2:	2b05      	cmp	r3, #5
     9d4:	d1bd      	bne.n	952 <ADC_Handler+0x12>
				module->job_status = STATUS_OK;
     9d6:	2300      	movs	r3, #0
     9d8:	772b      	strb	r3, [r5, #28]
				if ((module->enabled_callback_mask &
     9da:	7eeb      	ldrb	r3, [r5, #27]
     9dc:	07db      	lsls	r3, r3, #31
     9de:	d5b8      	bpl.n	952 <ADC_Handler+0x12>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
     9e0:	7eab      	ldrb	r3, [r5, #26]
     9e2:	07db      	lsls	r3, r3, #31
     9e4:	d5b5      	bpl.n	952 <ADC_Handler+0x12>
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     9e6:	0028      	movs	r0, r5
     9e8:	68ab      	ldr	r3, [r5, #8]
     9ea:	4798      	blx	r3
     9ec:	e7b1      	b.n	952 <ADC_Handler+0x12>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     9ee:	0028      	movs	r0, r5
     9f0:	68eb      	ldr	r3, [r5, #12]
     9f2:	4798      	blx	r3
     9f4:	e7b8      	b.n	968 <ADC_Handler+0x28>
			(module->callback[ADC_CALLBACK_ERROR])(module);
     9f6:	692b      	ldr	r3, [r5, #16]
     9f8:	0028      	movs	r0, r5
     9fa:	4798      	blx	r3
}
     9fc:	e7bf      	b.n	97e <ADC_Handler+0x3e>
     9fe:	46c0      	nop			; (mov r8, r8)
     a00:	20000370 	.word	0x20000370

00000a04 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     a04:	b500      	push	{lr}
     a06:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     a08:	ab01      	add	r3, sp, #4
     a0a:	2280      	movs	r2, #128	; 0x80
     a0c:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     a0e:	780a      	ldrb	r2, [r1, #0]
     a10:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     a12:	784a      	ldrb	r2, [r1, #1]
     a14:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     a16:	788a      	ldrb	r2, [r1, #2]
     a18:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     a1a:	0019      	movs	r1, r3
     a1c:	4b01      	ldr	r3, [pc, #4]	; (a24 <port_pin_set_config+0x20>)
     a1e:	4798      	blx	r3
}
     a20:	b003      	add	sp, #12
     a22:	bd00      	pop	{pc}
     a24:	00001b09 	.word	0x00001b09

00000a28 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     a28:	b5f0      	push	{r4, r5, r6, r7, lr}
     a2a:	46de      	mov	lr, fp
     a2c:	4657      	mov	r7, sl
     a2e:	464e      	mov	r6, r9
     a30:	4645      	mov	r5, r8
     a32:	b5e0      	push	{r5, r6, r7, lr}
     a34:	b087      	sub	sp, #28
     a36:	4680      	mov	r8, r0
     a38:	9104      	str	r1, [sp, #16]
     a3a:	0016      	movs	r6, r2
     a3c:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     a3e:	2200      	movs	r2, #0
     a40:	2300      	movs	r3, #0
     a42:	2100      	movs	r1, #0
     a44:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     a46:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     a48:	2001      	movs	r0, #1
     a4a:	0021      	movs	r1, r4
     a4c:	9600      	str	r6, [sp, #0]
     a4e:	9701      	str	r7, [sp, #4]
     a50:	465c      	mov	r4, fp
     a52:	9403      	str	r4, [sp, #12]
     a54:	4644      	mov	r4, r8
     a56:	9405      	str	r4, [sp, #20]
     a58:	e013      	b.n	a82 <long_division+0x5a>
     a5a:	2420      	movs	r4, #32
     a5c:	1a64      	subs	r4, r4, r1
     a5e:	0005      	movs	r5, r0
     a60:	40e5      	lsrs	r5, r4
     a62:	46a8      	mov	r8, r5
     a64:	e014      	b.n	a90 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     a66:	9c00      	ldr	r4, [sp, #0]
     a68:	9d01      	ldr	r5, [sp, #4]
     a6a:	1b12      	subs	r2, r2, r4
     a6c:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     a6e:	465c      	mov	r4, fp
     a70:	464d      	mov	r5, r9
     a72:	432c      	orrs	r4, r5
     a74:	46a3      	mov	fp, r4
     a76:	9c03      	ldr	r4, [sp, #12]
     a78:	4645      	mov	r5, r8
     a7a:	432c      	orrs	r4, r5
     a7c:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     a7e:	3901      	subs	r1, #1
     a80:	d325      	bcc.n	ace <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     a82:	2420      	movs	r4, #32
     a84:	4264      	negs	r4, r4
     a86:	190c      	adds	r4, r1, r4
     a88:	d4e7      	bmi.n	a5a <long_division+0x32>
     a8a:	0005      	movs	r5, r0
     a8c:	40a5      	lsls	r5, r4
     a8e:	46a8      	mov	r8, r5
     a90:	0004      	movs	r4, r0
     a92:	408c      	lsls	r4, r1
     a94:	46a1      	mov	r9, r4
		r = r << 1;
     a96:	1892      	adds	r2, r2, r2
     a98:	415b      	adcs	r3, r3
     a9a:	0014      	movs	r4, r2
     a9c:	001d      	movs	r5, r3
		if (n & bit_shift) {
     a9e:	9e05      	ldr	r6, [sp, #20]
     aa0:	464f      	mov	r7, r9
     aa2:	403e      	ands	r6, r7
     aa4:	46b4      	mov	ip, r6
     aa6:	9e04      	ldr	r6, [sp, #16]
     aa8:	4647      	mov	r7, r8
     aaa:	403e      	ands	r6, r7
     aac:	46b2      	mov	sl, r6
     aae:	4666      	mov	r6, ip
     ab0:	4657      	mov	r7, sl
     ab2:	433e      	orrs	r6, r7
     ab4:	d003      	beq.n	abe <long_division+0x96>
			r |= 0x01;
     ab6:	0006      	movs	r6, r0
     ab8:	4326      	orrs	r6, r4
     aba:	0032      	movs	r2, r6
     abc:	002b      	movs	r3, r5
		if (r >= d) {
     abe:	9c00      	ldr	r4, [sp, #0]
     ac0:	9d01      	ldr	r5, [sp, #4]
     ac2:	429d      	cmp	r5, r3
     ac4:	d8db      	bhi.n	a7e <long_division+0x56>
     ac6:	d1ce      	bne.n	a66 <long_division+0x3e>
     ac8:	4294      	cmp	r4, r2
     aca:	d8d8      	bhi.n	a7e <long_division+0x56>
     acc:	e7cb      	b.n	a66 <long_division+0x3e>
     ace:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     ad0:	4658      	mov	r0, fp
     ad2:	0019      	movs	r1, r3
     ad4:	b007      	add	sp, #28
     ad6:	bc3c      	pop	{r2, r3, r4, r5}
     ad8:	4690      	mov	r8, r2
     ada:	4699      	mov	r9, r3
     adc:	46a2      	mov	sl, r4
     ade:	46ab      	mov	fp, r5
     ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000ae2 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     ae2:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     ae4:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     ae6:	2340      	movs	r3, #64	; 0x40
     ae8:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     aea:	4281      	cmp	r1, r0
     aec:	d202      	bcs.n	af4 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     aee:	0018      	movs	r0, r3
     af0:	bd10      	pop	{r4, pc}
		baud_calculated++;
     af2:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     af4:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     af6:	1c63      	adds	r3, r4, #1
     af8:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     afa:	4288      	cmp	r0, r1
     afc:	d9f9      	bls.n	af2 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     afe:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     b00:	2cff      	cmp	r4, #255	; 0xff
     b02:	d8f4      	bhi.n	aee <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     b04:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     b06:	2300      	movs	r3, #0
     b08:	e7f1      	b.n	aee <_sercom_get_sync_baud_val+0xc>
	...

00000b0c <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
     b0e:	b083      	sub	sp, #12
     b10:	000f      	movs	r7, r1
     b12:	0016      	movs	r6, r2
     b14:	aa08      	add	r2, sp, #32
     b16:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     b18:	0004      	movs	r4, r0
     b1a:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     b1c:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     b1e:	42bc      	cmp	r4, r7
     b20:	d902      	bls.n	b28 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     b22:	0010      	movs	r0, r2
     b24:	b003      	add	sp, #12
     b26:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     b28:	2b00      	cmp	r3, #0
     b2a:	d114      	bne.n	b56 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     b2c:	0002      	movs	r2, r0
     b2e:	0008      	movs	r0, r1
     b30:	2100      	movs	r1, #0
     b32:	4c19      	ldr	r4, [pc, #100]	; (b98 <_sercom_get_async_baud_val+0x8c>)
     b34:	47a0      	blx	r4
     b36:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     b38:	003a      	movs	r2, r7
     b3a:	2300      	movs	r3, #0
     b3c:	2000      	movs	r0, #0
     b3e:	4c17      	ldr	r4, [pc, #92]	; (b9c <_sercom_get_async_baud_val+0x90>)
     b40:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     b42:	2200      	movs	r2, #0
     b44:	2301      	movs	r3, #1
     b46:	1a12      	subs	r2, r2, r0
     b48:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     b4a:	0c12      	lsrs	r2, r2, #16
     b4c:	041b      	lsls	r3, r3, #16
     b4e:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     b50:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     b52:	2200      	movs	r2, #0
     b54:	e7e5      	b.n	b22 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     b56:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     b58:	2b01      	cmp	r3, #1
     b5a:	d1f9      	bne.n	b50 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     b5c:	000a      	movs	r2, r1
     b5e:	2300      	movs	r3, #0
     b60:	2100      	movs	r1, #0
     b62:	4c0d      	ldr	r4, [pc, #52]	; (b98 <_sercom_get_async_baud_val+0x8c>)
     b64:	47a0      	blx	r4
     b66:	0002      	movs	r2, r0
     b68:	000b      	movs	r3, r1
     b6a:	9200      	str	r2, [sp, #0]
     b6c:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     b6e:	0038      	movs	r0, r7
     b70:	2100      	movs	r1, #0
     b72:	4c0a      	ldr	r4, [pc, #40]	; (b9c <_sercom_get_async_baud_val+0x90>)
     b74:	47a0      	blx	r4
     b76:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     b78:	2380      	movs	r3, #128	; 0x80
     b7a:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     b7c:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     b7e:	4298      	cmp	r0, r3
     b80:	d8cf      	bhi.n	b22 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     b82:	0f79      	lsrs	r1, r7, #29
     b84:	00f8      	lsls	r0, r7, #3
     b86:	9a00      	ldr	r2, [sp, #0]
     b88:	9b01      	ldr	r3, [sp, #4]
     b8a:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     b8c:	00ea      	lsls	r2, r5, #3
     b8e:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     b90:	b2d2      	uxtb	r2, r2
     b92:	0352      	lsls	r2, r2, #13
     b94:	432a      	orrs	r2, r5
     b96:	e7db      	b.n	b50 <_sercom_get_async_baud_val+0x44>
     b98:	00003255 	.word	0x00003255
     b9c:	00000a29 	.word	0x00000a29

00000ba0 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     ba0:	b510      	push	{r4, lr}
     ba2:	b082      	sub	sp, #8
     ba4:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     ba6:	4b0e      	ldr	r3, [pc, #56]	; (be0 <sercom_set_gclk_generator+0x40>)
     ba8:	781b      	ldrb	r3, [r3, #0]
     baa:	2b00      	cmp	r3, #0
     bac:	d007      	beq.n	bbe <sercom_set_gclk_generator+0x1e>
     bae:	2900      	cmp	r1, #0
     bb0:	d105      	bne.n	bbe <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     bb2:	4b0b      	ldr	r3, [pc, #44]	; (be0 <sercom_set_gclk_generator+0x40>)
     bb4:	785b      	ldrb	r3, [r3, #1]
     bb6:	4283      	cmp	r3, r0
     bb8:	d010      	beq.n	bdc <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     bba:	201d      	movs	r0, #29
     bbc:	e00c      	b.n	bd8 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     bbe:	a901      	add	r1, sp, #4
     bc0:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     bc2:	2013      	movs	r0, #19
     bc4:	4b07      	ldr	r3, [pc, #28]	; (be4 <sercom_set_gclk_generator+0x44>)
     bc6:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     bc8:	2013      	movs	r0, #19
     bca:	4b07      	ldr	r3, [pc, #28]	; (be8 <sercom_set_gclk_generator+0x48>)
     bcc:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     bce:	4b04      	ldr	r3, [pc, #16]	; (be0 <sercom_set_gclk_generator+0x40>)
     bd0:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     bd2:	2201      	movs	r2, #1
     bd4:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     bd6:	2000      	movs	r0, #0
}
     bd8:	b002      	add	sp, #8
     bda:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     bdc:	2000      	movs	r0, #0
     bde:	e7fb      	b.n	bd8 <sercom_set_gclk_generator+0x38>
     be0:	20000260 	.word	0x20000260
     be4:	00001a11 	.word	0x00001a11
     be8:	00001985 	.word	0x00001985

00000bec <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     bec:	4b40      	ldr	r3, [pc, #256]	; (cf0 <_sercom_get_default_pad+0x104>)
     bee:	4298      	cmp	r0, r3
     bf0:	d031      	beq.n	c56 <_sercom_get_default_pad+0x6a>
     bf2:	d90a      	bls.n	c0a <_sercom_get_default_pad+0x1e>
     bf4:	4b3f      	ldr	r3, [pc, #252]	; (cf4 <_sercom_get_default_pad+0x108>)
     bf6:	4298      	cmp	r0, r3
     bf8:	d04d      	beq.n	c96 <_sercom_get_default_pad+0xaa>
     bfa:	4b3f      	ldr	r3, [pc, #252]	; (cf8 <_sercom_get_default_pad+0x10c>)
     bfc:	4298      	cmp	r0, r3
     bfe:	d05a      	beq.n	cb6 <_sercom_get_default_pad+0xca>
     c00:	4b3e      	ldr	r3, [pc, #248]	; (cfc <_sercom_get_default_pad+0x110>)
     c02:	4298      	cmp	r0, r3
     c04:	d037      	beq.n	c76 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     c06:	2000      	movs	r0, #0
}
     c08:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     c0a:	4b3d      	ldr	r3, [pc, #244]	; (d00 <_sercom_get_default_pad+0x114>)
     c0c:	4298      	cmp	r0, r3
     c0e:	d00c      	beq.n	c2a <_sercom_get_default_pad+0x3e>
     c10:	4b3c      	ldr	r3, [pc, #240]	; (d04 <_sercom_get_default_pad+0x118>)
     c12:	4298      	cmp	r0, r3
     c14:	d1f7      	bne.n	c06 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     c16:	2901      	cmp	r1, #1
     c18:	d017      	beq.n	c4a <_sercom_get_default_pad+0x5e>
     c1a:	2900      	cmp	r1, #0
     c1c:	d05d      	beq.n	cda <_sercom_get_default_pad+0xee>
     c1e:	2902      	cmp	r1, #2
     c20:	d015      	beq.n	c4e <_sercom_get_default_pad+0x62>
     c22:	2903      	cmp	r1, #3
     c24:	d015      	beq.n	c52 <_sercom_get_default_pad+0x66>
	return 0;
     c26:	2000      	movs	r0, #0
     c28:	e7ee      	b.n	c08 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     c2a:	2901      	cmp	r1, #1
     c2c:	d007      	beq.n	c3e <_sercom_get_default_pad+0x52>
     c2e:	2900      	cmp	r1, #0
     c30:	d051      	beq.n	cd6 <_sercom_get_default_pad+0xea>
     c32:	2902      	cmp	r1, #2
     c34:	d005      	beq.n	c42 <_sercom_get_default_pad+0x56>
     c36:	2903      	cmp	r1, #3
     c38:	d005      	beq.n	c46 <_sercom_get_default_pad+0x5a>
	return 0;
     c3a:	2000      	movs	r0, #0
     c3c:	e7e4      	b.n	c08 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     c3e:	4832      	ldr	r0, [pc, #200]	; (d08 <_sercom_get_default_pad+0x11c>)
     c40:	e7e2      	b.n	c08 <_sercom_get_default_pad+0x1c>
     c42:	4832      	ldr	r0, [pc, #200]	; (d0c <_sercom_get_default_pad+0x120>)
     c44:	e7e0      	b.n	c08 <_sercom_get_default_pad+0x1c>
     c46:	4832      	ldr	r0, [pc, #200]	; (d10 <_sercom_get_default_pad+0x124>)
     c48:	e7de      	b.n	c08 <_sercom_get_default_pad+0x1c>
     c4a:	4832      	ldr	r0, [pc, #200]	; (d14 <_sercom_get_default_pad+0x128>)
     c4c:	e7dc      	b.n	c08 <_sercom_get_default_pad+0x1c>
     c4e:	4832      	ldr	r0, [pc, #200]	; (d18 <_sercom_get_default_pad+0x12c>)
     c50:	e7da      	b.n	c08 <_sercom_get_default_pad+0x1c>
     c52:	4832      	ldr	r0, [pc, #200]	; (d1c <_sercom_get_default_pad+0x130>)
     c54:	e7d8      	b.n	c08 <_sercom_get_default_pad+0x1c>
     c56:	2901      	cmp	r1, #1
     c58:	d007      	beq.n	c6a <_sercom_get_default_pad+0x7e>
     c5a:	2900      	cmp	r1, #0
     c5c:	d03f      	beq.n	cde <_sercom_get_default_pad+0xf2>
     c5e:	2902      	cmp	r1, #2
     c60:	d005      	beq.n	c6e <_sercom_get_default_pad+0x82>
     c62:	2903      	cmp	r1, #3
     c64:	d005      	beq.n	c72 <_sercom_get_default_pad+0x86>
	return 0;
     c66:	2000      	movs	r0, #0
     c68:	e7ce      	b.n	c08 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     c6a:	482d      	ldr	r0, [pc, #180]	; (d20 <_sercom_get_default_pad+0x134>)
     c6c:	e7cc      	b.n	c08 <_sercom_get_default_pad+0x1c>
     c6e:	482d      	ldr	r0, [pc, #180]	; (d24 <_sercom_get_default_pad+0x138>)
     c70:	e7ca      	b.n	c08 <_sercom_get_default_pad+0x1c>
     c72:	482d      	ldr	r0, [pc, #180]	; (d28 <_sercom_get_default_pad+0x13c>)
     c74:	e7c8      	b.n	c08 <_sercom_get_default_pad+0x1c>
     c76:	2901      	cmp	r1, #1
     c78:	d007      	beq.n	c8a <_sercom_get_default_pad+0x9e>
     c7a:	2900      	cmp	r1, #0
     c7c:	d031      	beq.n	ce2 <_sercom_get_default_pad+0xf6>
     c7e:	2902      	cmp	r1, #2
     c80:	d005      	beq.n	c8e <_sercom_get_default_pad+0xa2>
     c82:	2903      	cmp	r1, #3
     c84:	d005      	beq.n	c92 <_sercom_get_default_pad+0xa6>
	return 0;
     c86:	2000      	movs	r0, #0
     c88:	e7be      	b.n	c08 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     c8a:	4828      	ldr	r0, [pc, #160]	; (d2c <_sercom_get_default_pad+0x140>)
     c8c:	e7bc      	b.n	c08 <_sercom_get_default_pad+0x1c>
     c8e:	4828      	ldr	r0, [pc, #160]	; (d30 <_sercom_get_default_pad+0x144>)
     c90:	e7ba      	b.n	c08 <_sercom_get_default_pad+0x1c>
     c92:	4828      	ldr	r0, [pc, #160]	; (d34 <_sercom_get_default_pad+0x148>)
     c94:	e7b8      	b.n	c08 <_sercom_get_default_pad+0x1c>
     c96:	2901      	cmp	r1, #1
     c98:	d007      	beq.n	caa <_sercom_get_default_pad+0xbe>
     c9a:	2900      	cmp	r1, #0
     c9c:	d023      	beq.n	ce6 <_sercom_get_default_pad+0xfa>
     c9e:	2902      	cmp	r1, #2
     ca0:	d005      	beq.n	cae <_sercom_get_default_pad+0xc2>
     ca2:	2903      	cmp	r1, #3
     ca4:	d005      	beq.n	cb2 <_sercom_get_default_pad+0xc6>
	return 0;
     ca6:	2000      	movs	r0, #0
     ca8:	e7ae      	b.n	c08 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     caa:	4823      	ldr	r0, [pc, #140]	; (d38 <_sercom_get_default_pad+0x14c>)
     cac:	e7ac      	b.n	c08 <_sercom_get_default_pad+0x1c>
     cae:	4823      	ldr	r0, [pc, #140]	; (d3c <_sercom_get_default_pad+0x150>)
     cb0:	e7aa      	b.n	c08 <_sercom_get_default_pad+0x1c>
     cb2:	4823      	ldr	r0, [pc, #140]	; (d40 <_sercom_get_default_pad+0x154>)
     cb4:	e7a8      	b.n	c08 <_sercom_get_default_pad+0x1c>
     cb6:	2901      	cmp	r1, #1
     cb8:	d007      	beq.n	cca <_sercom_get_default_pad+0xde>
     cba:	2900      	cmp	r1, #0
     cbc:	d015      	beq.n	cea <_sercom_get_default_pad+0xfe>
     cbe:	2902      	cmp	r1, #2
     cc0:	d005      	beq.n	cce <_sercom_get_default_pad+0xe2>
     cc2:	2903      	cmp	r1, #3
     cc4:	d005      	beq.n	cd2 <_sercom_get_default_pad+0xe6>
	return 0;
     cc6:	2000      	movs	r0, #0
     cc8:	e79e      	b.n	c08 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     cca:	481e      	ldr	r0, [pc, #120]	; (d44 <_sercom_get_default_pad+0x158>)
     ccc:	e79c      	b.n	c08 <_sercom_get_default_pad+0x1c>
     cce:	481e      	ldr	r0, [pc, #120]	; (d48 <_sercom_get_default_pad+0x15c>)
     cd0:	e79a      	b.n	c08 <_sercom_get_default_pad+0x1c>
     cd2:	481e      	ldr	r0, [pc, #120]	; (d4c <_sercom_get_default_pad+0x160>)
     cd4:	e798      	b.n	c08 <_sercom_get_default_pad+0x1c>
     cd6:	481e      	ldr	r0, [pc, #120]	; (d50 <_sercom_get_default_pad+0x164>)
     cd8:	e796      	b.n	c08 <_sercom_get_default_pad+0x1c>
     cda:	2003      	movs	r0, #3
     cdc:	e794      	b.n	c08 <_sercom_get_default_pad+0x1c>
     cde:	481d      	ldr	r0, [pc, #116]	; (d54 <_sercom_get_default_pad+0x168>)
     ce0:	e792      	b.n	c08 <_sercom_get_default_pad+0x1c>
     ce2:	481d      	ldr	r0, [pc, #116]	; (d58 <_sercom_get_default_pad+0x16c>)
     ce4:	e790      	b.n	c08 <_sercom_get_default_pad+0x1c>
     ce6:	481d      	ldr	r0, [pc, #116]	; (d5c <_sercom_get_default_pad+0x170>)
     ce8:	e78e      	b.n	c08 <_sercom_get_default_pad+0x1c>
     cea:	481d      	ldr	r0, [pc, #116]	; (d60 <_sercom_get_default_pad+0x174>)
     cec:	e78c      	b.n	c08 <_sercom_get_default_pad+0x1c>
     cee:	46c0      	nop			; (mov r8, r8)
     cf0:	42001000 	.word	0x42001000
     cf4:	42001800 	.word	0x42001800
     cf8:	42001c00 	.word	0x42001c00
     cfc:	42001400 	.word	0x42001400
     d00:	42000800 	.word	0x42000800
     d04:	42000c00 	.word	0x42000c00
     d08:	00050003 	.word	0x00050003
     d0c:	00060003 	.word	0x00060003
     d10:	00070003 	.word	0x00070003
     d14:	00010003 	.word	0x00010003
     d18:	001e0003 	.word	0x001e0003
     d1c:	001f0003 	.word	0x001f0003
     d20:	00090003 	.word	0x00090003
     d24:	000a0003 	.word	0x000a0003
     d28:	000b0003 	.word	0x000b0003
     d2c:	00110003 	.word	0x00110003
     d30:	00120003 	.word	0x00120003
     d34:	00130003 	.word	0x00130003
     d38:	000d0003 	.word	0x000d0003
     d3c:	000e0003 	.word	0x000e0003
     d40:	000f0003 	.word	0x000f0003
     d44:	00170003 	.word	0x00170003
     d48:	00180003 	.word	0x00180003
     d4c:	00190003 	.word	0x00190003
     d50:	00040003 	.word	0x00040003
     d54:	00080003 	.word	0x00080003
     d58:	00100003 	.word	0x00100003
     d5c:	000c0003 	.word	0x000c0003
     d60:	00160003 	.word	0x00160003

00000d64 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     d64:	b530      	push	{r4, r5, lr}
     d66:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     d68:	4b0b      	ldr	r3, [pc, #44]	; (d98 <_sercom_get_sercom_inst_index+0x34>)
     d6a:	466a      	mov	r2, sp
     d6c:	cb32      	ldmia	r3!, {r1, r4, r5}
     d6e:	c232      	stmia	r2!, {r1, r4, r5}
     d70:	cb32      	ldmia	r3!, {r1, r4, r5}
     d72:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     d74:	9b00      	ldr	r3, [sp, #0]
     d76:	4283      	cmp	r3, r0
     d78:	d00b      	beq.n	d92 <_sercom_get_sercom_inst_index+0x2e>
     d7a:	2301      	movs	r3, #1
     d7c:	009a      	lsls	r2, r3, #2
     d7e:	4669      	mov	r1, sp
     d80:	5852      	ldr	r2, [r2, r1]
     d82:	4282      	cmp	r2, r0
     d84:	d006      	beq.n	d94 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     d86:	3301      	adds	r3, #1
     d88:	2b06      	cmp	r3, #6
     d8a:	d1f7      	bne.n	d7c <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     d8c:	2000      	movs	r0, #0
}
     d8e:	b007      	add	sp, #28
     d90:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     d92:	2300      	movs	r3, #0
			return i;
     d94:	b2d8      	uxtb	r0, r3
     d96:	e7fa      	b.n	d8e <_sercom_get_sercom_inst_index+0x2a>
     d98:	000049d0 	.word	0x000049d0

00000d9c <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     d9c:	4770      	bx	lr
	...

00000da0 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     da0:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     da2:	4b0a      	ldr	r3, [pc, #40]	; (dcc <_sercom_set_handler+0x2c>)
     da4:	781b      	ldrb	r3, [r3, #0]
     da6:	2b00      	cmp	r3, #0
     da8:	d10c      	bne.n	dc4 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     daa:	4f09      	ldr	r7, [pc, #36]	; (dd0 <_sercom_set_handler+0x30>)
     dac:	4e09      	ldr	r6, [pc, #36]	; (dd4 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     dae:	4d0a      	ldr	r5, [pc, #40]	; (dd8 <_sercom_set_handler+0x38>)
     db0:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     db2:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     db4:	195a      	adds	r2, r3, r5
     db6:	6014      	str	r4, [r2, #0]
     db8:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     dba:	2b18      	cmp	r3, #24
     dbc:	d1f9      	bne.n	db2 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
     dbe:	2201      	movs	r2, #1
     dc0:	4b02      	ldr	r3, [pc, #8]	; (dcc <_sercom_set_handler+0x2c>)
     dc2:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     dc4:	0080      	lsls	r0, r0, #2
     dc6:	4b02      	ldr	r3, [pc, #8]	; (dd0 <_sercom_set_handler+0x30>)
     dc8:	50c1      	str	r1, [r0, r3]
}
     dca:	bdf0      	pop	{r4, r5, r6, r7, pc}
     dcc:	20000262 	.word	0x20000262
     dd0:	20000264 	.word	0x20000264
     dd4:	00000d9d 	.word	0x00000d9d
     dd8:	20000374 	.word	0x20000374

00000ddc <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     ddc:	b500      	push	{lr}
     dde:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     de0:	2309      	movs	r3, #9
     de2:	466a      	mov	r2, sp
     de4:	7013      	strb	r3, [r2, #0]
     de6:	3301      	adds	r3, #1
     de8:	7053      	strb	r3, [r2, #1]
     dea:	3301      	adds	r3, #1
     dec:	7093      	strb	r3, [r2, #2]
     dee:	3301      	adds	r3, #1
     df0:	70d3      	strb	r3, [r2, #3]
     df2:	3301      	adds	r3, #1
     df4:	7113      	strb	r3, [r2, #4]
     df6:	3301      	adds	r3, #1
     df8:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     dfa:	4b03      	ldr	r3, [pc, #12]	; (e08 <_sercom_get_interrupt_vector+0x2c>)
     dfc:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     dfe:	466b      	mov	r3, sp
     e00:	5618      	ldrsb	r0, [r3, r0]
}
     e02:	b003      	add	sp, #12
     e04:	bd00      	pop	{pc}
     e06:	46c0      	nop			; (mov r8, r8)
     e08:	00000d65 	.word	0x00000d65

00000e0c <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     e0c:	b510      	push	{r4, lr}
     e0e:	4b02      	ldr	r3, [pc, #8]	; (e18 <SERCOM0_Handler+0xc>)
     e10:	681b      	ldr	r3, [r3, #0]
     e12:	2000      	movs	r0, #0
     e14:	4798      	blx	r3
     e16:	bd10      	pop	{r4, pc}
     e18:	20000264 	.word	0x20000264

00000e1c <SERCOM1_Handler>:
     e1c:	b510      	push	{r4, lr}
     e1e:	4b02      	ldr	r3, [pc, #8]	; (e28 <SERCOM1_Handler+0xc>)
     e20:	685b      	ldr	r3, [r3, #4]
     e22:	2001      	movs	r0, #1
     e24:	4798      	blx	r3
     e26:	bd10      	pop	{r4, pc}
     e28:	20000264 	.word	0x20000264

00000e2c <SERCOM2_Handler>:
     e2c:	b510      	push	{r4, lr}
     e2e:	4b02      	ldr	r3, [pc, #8]	; (e38 <SERCOM2_Handler+0xc>)
     e30:	689b      	ldr	r3, [r3, #8]
     e32:	2002      	movs	r0, #2
     e34:	4798      	blx	r3
     e36:	bd10      	pop	{r4, pc}
     e38:	20000264 	.word	0x20000264

00000e3c <SERCOM3_Handler>:
     e3c:	b510      	push	{r4, lr}
     e3e:	4b02      	ldr	r3, [pc, #8]	; (e48 <SERCOM3_Handler+0xc>)
     e40:	68db      	ldr	r3, [r3, #12]
     e42:	2003      	movs	r0, #3
     e44:	4798      	blx	r3
     e46:	bd10      	pop	{r4, pc}
     e48:	20000264 	.word	0x20000264

00000e4c <SERCOM4_Handler>:
     e4c:	b510      	push	{r4, lr}
     e4e:	4b02      	ldr	r3, [pc, #8]	; (e58 <SERCOM4_Handler+0xc>)
     e50:	691b      	ldr	r3, [r3, #16]
     e52:	2004      	movs	r0, #4
     e54:	4798      	blx	r3
     e56:	bd10      	pop	{r4, pc}
     e58:	20000264 	.word	0x20000264

00000e5c <SERCOM5_Handler>:
     e5c:	b510      	push	{r4, lr}
     e5e:	4b02      	ldr	r3, [pc, #8]	; (e68 <SERCOM5_Handler+0xc>)
     e60:	695b      	ldr	r3, [r3, #20]
     e62:	2005      	movs	r0, #5
     e64:	4798      	blx	r3
     e66:	bd10      	pop	{r4, pc}
     e68:	20000264 	.word	0x20000264

00000e6c <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
     e6e:	46de      	mov	lr, fp
     e70:	4657      	mov	r7, sl
     e72:	464e      	mov	r6, r9
     e74:	4645      	mov	r5, r8
     e76:	b5e0      	push	{r5, r6, r7, lr}
     e78:	b091      	sub	sp, #68	; 0x44
     e7a:	0005      	movs	r5, r0
     e7c:	000c      	movs	r4, r1
     e7e:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     e80:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     e82:	0008      	movs	r0, r1
     e84:	4bba      	ldr	r3, [pc, #744]	; (1170 <usart_init+0x304>)
     e86:	4798      	blx	r3
     e88:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     e8a:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     e8c:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     e8e:	07db      	lsls	r3, r3, #31
     e90:	d506      	bpl.n	ea0 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     e92:	b011      	add	sp, #68	; 0x44
     e94:	bc3c      	pop	{r2, r3, r4, r5}
     e96:	4690      	mov	r8, r2
     e98:	4699      	mov	r9, r3
     e9a:	46a2      	mov	sl, r4
     e9c:	46ab      	mov	fp, r5
     e9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     ea0:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
     ea2:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     ea4:	079b      	lsls	r3, r3, #30
     ea6:	d4f4      	bmi.n	e92 <usart_init+0x26>
     ea8:	49b2      	ldr	r1, [pc, #712]	; (1174 <usart_init+0x308>)
     eaa:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     eac:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     eae:	2301      	movs	r3, #1
     eb0:	40bb      	lsls	r3, r7
     eb2:	4303      	orrs	r3, r0
     eb4:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     eb6:	a90f      	add	r1, sp, #60	; 0x3c
     eb8:	272d      	movs	r7, #45	; 0x2d
     eba:	5df3      	ldrb	r3, [r6, r7]
     ebc:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     ebe:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     ec0:	b2d3      	uxtb	r3, r2
     ec2:	9302      	str	r3, [sp, #8]
     ec4:	0018      	movs	r0, r3
     ec6:	4bac      	ldr	r3, [pc, #688]	; (1178 <usart_init+0x30c>)
     ec8:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     eca:	9802      	ldr	r0, [sp, #8]
     ecc:	4bab      	ldr	r3, [pc, #684]	; (117c <usart_init+0x310>)
     ece:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     ed0:	5df0      	ldrb	r0, [r6, r7]
     ed2:	2100      	movs	r1, #0
     ed4:	4baa      	ldr	r3, [pc, #680]	; (1180 <usart_init+0x314>)
     ed6:	4798      	blx	r3
	module->character_size = config->character_size;
     ed8:	7af3      	ldrb	r3, [r6, #11]
     eda:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
     edc:	2324      	movs	r3, #36	; 0x24
     ede:	5cf3      	ldrb	r3, [r6, r3]
     ee0:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     ee2:	2325      	movs	r3, #37	; 0x25
     ee4:	5cf3      	ldrb	r3, [r6, r3]
     ee6:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
     ee8:	7ef3      	ldrb	r3, [r6, #27]
     eea:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     eec:	7f33      	ldrb	r3, [r6, #28]
     eee:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
     ef0:	682b      	ldr	r3, [r5, #0]
     ef2:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     ef4:	0018      	movs	r0, r3
     ef6:	4b9e      	ldr	r3, [pc, #632]	; (1170 <usart_init+0x304>)
     ef8:	4798      	blx	r3
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     efa:	3014      	adds	r0, #20
	uint16_t baud  = 0;
     efc:	2200      	movs	r2, #0
     efe:	230e      	movs	r3, #14
     f00:	a906      	add	r1, sp, #24
     f02:	468c      	mov	ip, r1
     f04:	4463      	add	r3, ip
     f06:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
     f08:	8a32      	ldrh	r2, [r6, #16]
     f0a:	9202      	str	r2, [sp, #8]
     f0c:	2380      	movs	r3, #128	; 0x80
     f0e:	01db      	lsls	r3, r3, #7
     f10:	429a      	cmp	r2, r3
     f12:	d100      	bne.n	f16 <usart_init+0xaa>
     f14:	e09a      	b.n	104c <usart_init+0x1e0>
     f16:	d90f      	bls.n	f38 <usart_init+0xcc>
     f18:	23c0      	movs	r3, #192	; 0xc0
     f1a:	01db      	lsls	r3, r3, #7
     f1c:	9a02      	ldr	r2, [sp, #8]
     f1e:	429a      	cmp	r2, r3
     f20:	d100      	bne.n	f24 <usart_init+0xb8>
     f22:	e08e      	b.n	1042 <usart_init+0x1d6>
     f24:	2380      	movs	r3, #128	; 0x80
     f26:	021b      	lsls	r3, r3, #8
     f28:	429a      	cmp	r2, r3
     f2a:	d000      	beq.n	f2e <usart_init+0xc2>
     f2c:	e11b      	b.n	1166 <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     f2e:	2303      	movs	r3, #3
     f30:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     f32:	2300      	movs	r3, #0
     f34:	9307      	str	r3, [sp, #28]
     f36:	e008      	b.n	f4a <usart_init+0xde>
	switch (config->sample_rate) {
     f38:	2380      	movs	r3, #128	; 0x80
     f3a:	019b      	lsls	r3, r3, #6
     f3c:	429a      	cmp	r2, r3
     f3e:	d000      	beq.n	f42 <usart_init+0xd6>
     f40:	e111      	b.n	1166 <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     f42:	2310      	movs	r3, #16
     f44:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     f46:	3b0f      	subs	r3, #15
     f48:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
     f4a:	6833      	ldr	r3, [r6, #0]
     f4c:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     f4e:	68f3      	ldr	r3, [r6, #12]
     f50:	469b      	mov	fp, r3
		config->sample_adjustment |
     f52:	6973      	ldr	r3, [r6, #20]
     f54:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     f56:	7e33      	ldrb	r3, [r6, #24]
     f58:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     f5a:	2326      	movs	r3, #38	; 0x26
     f5c:	5cf3      	ldrb	r3, [r6, r3]
     f5e:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     f60:	6873      	ldr	r3, [r6, #4]
     f62:	4699      	mov	r9, r3
	switch (transfer_mode)
     f64:	2b00      	cmp	r3, #0
     f66:	d100      	bne.n	f6a <usart_init+0xfe>
     f68:	e09c      	b.n	10a4 <usart_init+0x238>
     f6a:	2380      	movs	r3, #128	; 0x80
     f6c:	055b      	lsls	r3, r3, #21
     f6e:	4599      	cmp	r9, r3
     f70:	d100      	bne.n	f74 <usart_init+0x108>
     f72:	e080      	b.n	1076 <usart_init+0x20a>
	if(config->encoding_format_enable) {
     f74:	7e73      	ldrb	r3, [r6, #25]
     f76:	2b00      	cmp	r3, #0
     f78:	d002      	beq.n	f80 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     f7a:	7eb3      	ldrb	r3, [r6, #26]
     f7c:	4642      	mov	r2, r8
     f7e:	7393      	strb	r3, [r2, #14]
	usart_hw->BAUD.reg = baud;
     f80:	230e      	movs	r3, #14
     f82:	aa06      	add	r2, sp, #24
     f84:	4694      	mov	ip, r2
     f86:	4463      	add	r3, ip
     f88:	881b      	ldrh	r3, [r3, #0]
     f8a:	4642      	mov	r2, r8
     f8c:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
     f8e:	9b05      	ldr	r3, [sp, #20]
     f90:	465a      	mov	r2, fp
     f92:	4313      	orrs	r3, r2
     f94:	9a03      	ldr	r2, [sp, #12]
     f96:	4313      	orrs	r3, r2
     f98:	464a      	mov	r2, r9
     f9a:	4313      	orrs	r3, r2
     f9c:	9f02      	ldr	r7, [sp, #8]
     f9e:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     fa0:	9b04      	ldr	r3, [sp, #16]
     fa2:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
     fa4:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     fa6:	4653      	mov	r3, sl
     fa8:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
     faa:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
     fac:	2327      	movs	r3, #39	; 0x27
     fae:	5cf3      	ldrb	r3, [r6, r3]
     fb0:	2b00      	cmp	r3, #0
     fb2:	d101      	bne.n	fb8 <usart_init+0x14c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     fb4:	3304      	adds	r3, #4
     fb6:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     fb8:	7e73      	ldrb	r3, [r6, #25]
     fba:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     fbc:	7f32      	ldrb	r2, [r6, #28]
     fbe:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     fc0:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     fc2:	7f72      	ldrb	r2, [r6, #29]
     fc4:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     fc6:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     fc8:	2224      	movs	r2, #36	; 0x24
     fca:	5cb2      	ldrb	r2, [r6, r2]
     fcc:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     fce:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     fd0:	2225      	movs	r2, #37	; 0x25
     fd2:	5cb2      	ldrb	r2, [r6, r2]
     fd4:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     fd6:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
     fd8:	7ab1      	ldrb	r1, [r6, #10]
     fda:	7af2      	ldrb	r2, [r6, #11]
     fdc:	4311      	orrs	r1, r2
     fde:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
     fe0:	8933      	ldrh	r3, [r6, #8]
     fe2:	2bff      	cmp	r3, #255	; 0xff
     fe4:	d100      	bne.n	fe8 <usart_init+0x17c>
     fe6:	e081      	b.n	10ec <usart_init+0x280>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     fe8:	2280      	movs	r2, #128	; 0x80
     fea:	0452      	lsls	r2, r2, #17
     fec:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
     fee:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
     ff0:	232c      	movs	r3, #44	; 0x2c
     ff2:	5cf3      	ldrb	r3, [r6, r3]
     ff4:	2b00      	cmp	r3, #0
     ff6:	d103      	bne.n	1000 <usart_init+0x194>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     ff8:	4b62      	ldr	r3, [pc, #392]	; (1184 <usart_init+0x318>)
     ffa:	789b      	ldrb	r3, [r3, #2]
     ffc:	079b      	lsls	r3, r3, #30
     ffe:	d501      	bpl.n	1004 <usart_init+0x198>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    1000:	2380      	movs	r3, #128	; 0x80
    1002:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1004:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1006:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1008:	2b00      	cmp	r3, #0
    100a:	d1fc      	bne.n	1006 <usart_init+0x19a>
	usart_hw->CTRLB.reg = ctrlb;
    100c:	4643      	mov	r3, r8
    100e:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1010:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1012:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1014:	2b00      	cmp	r3, #0
    1016:	d1fc      	bne.n	1012 <usart_init+0x1a6>
	usart_hw->CTRLA.reg = ctrla;
    1018:	4643      	mov	r3, r8
    101a:	601f      	str	r7, [r3, #0]
    101c:	ab0e      	add	r3, sp, #56	; 0x38
    101e:	2280      	movs	r2, #128	; 0x80
    1020:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1022:	2200      	movs	r2, #0
    1024:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    1026:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1028:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    102a:	6b33      	ldr	r3, [r6, #48]	; 0x30
    102c:	930a      	str	r3, [sp, #40]	; 0x28
    102e:	6b73      	ldr	r3, [r6, #52]	; 0x34
    1030:	930b      	str	r3, [sp, #44]	; 0x2c
    1032:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    1034:	930c      	str	r3, [sp, #48]	; 0x30
    1036:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    1038:	9302      	str	r3, [sp, #8]
    103a:	930d      	str	r3, [sp, #52]	; 0x34
    103c:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    103e:	ae0a      	add	r6, sp, #40	; 0x28
    1040:	e063      	b.n	110a <usart_init+0x29e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1042:	2308      	movs	r3, #8
    1044:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1046:	3b07      	subs	r3, #7
    1048:	9307      	str	r3, [sp, #28]
    104a:	e77e      	b.n	f4a <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    104c:	6833      	ldr	r3, [r6, #0]
    104e:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    1050:	68f3      	ldr	r3, [r6, #12]
    1052:	469b      	mov	fp, r3
		config->sample_adjustment |
    1054:	6973      	ldr	r3, [r6, #20]
    1056:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1058:	7e33      	ldrb	r3, [r6, #24]
    105a:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    105c:	2326      	movs	r3, #38	; 0x26
    105e:	5cf3      	ldrb	r3, [r6, r3]
    1060:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    1062:	6873      	ldr	r3, [r6, #4]
    1064:	4699      	mov	r9, r3
	switch (transfer_mode)
    1066:	2b00      	cmp	r3, #0
    1068:	d018      	beq.n	109c <usart_init+0x230>
    106a:	2380      	movs	r3, #128	; 0x80
    106c:	055b      	lsls	r3, r3, #21
    106e:	4599      	cmp	r9, r3
    1070:	d001      	beq.n	1076 <usart_init+0x20a>
	enum status_code status_code = STATUS_OK;
    1072:	2000      	movs	r0, #0
    1074:	e025      	b.n	10c2 <usart_init+0x256>
			if (!config->use_external_clock) {
    1076:	2327      	movs	r3, #39	; 0x27
    1078:	5cf3      	ldrb	r3, [r6, r3]
    107a:	2b00      	cmp	r3, #0
    107c:	d000      	beq.n	1080 <usart_init+0x214>
    107e:	e779      	b.n	f74 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    1080:	6a33      	ldr	r3, [r6, #32]
    1082:	001f      	movs	r7, r3
    1084:	b2c0      	uxtb	r0, r0
    1086:	4b40      	ldr	r3, [pc, #256]	; (1188 <usart_init+0x31c>)
    1088:	4798      	blx	r3
    108a:	0001      	movs	r1, r0
    108c:	220e      	movs	r2, #14
    108e:	ab06      	add	r3, sp, #24
    1090:	469c      	mov	ip, r3
    1092:	4462      	add	r2, ip
    1094:	0038      	movs	r0, r7
    1096:	4b3d      	ldr	r3, [pc, #244]	; (118c <usart_init+0x320>)
    1098:	4798      	blx	r3
    109a:	e012      	b.n	10c2 <usart_init+0x256>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    109c:	2308      	movs	r3, #8
    109e:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    10a0:	2300      	movs	r3, #0
    10a2:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    10a4:	2327      	movs	r3, #39	; 0x27
    10a6:	5cf3      	ldrb	r3, [r6, r3]
    10a8:	2b00      	cmp	r3, #0
    10aa:	d00e      	beq.n	10ca <usart_init+0x25e>
				status_code =
    10ac:	9b06      	ldr	r3, [sp, #24]
    10ae:	9300      	str	r3, [sp, #0]
    10b0:	9b07      	ldr	r3, [sp, #28]
    10b2:	220e      	movs	r2, #14
    10b4:	a906      	add	r1, sp, #24
    10b6:	468c      	mov	ip, r1
    10b8:	4462      	add	r2, ip
    10ba:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    10bc:	6a30      	ldr	r0, [r6, #32]
    10be:	4f34      	ldr	r7, [pc, #208]	; (1190 <usart_init+0x324>)
    10c0:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    10c2:	2800      	cmp	r0, #0
    10c4:	d000      	beq.n	10c8 <usart_init+0x25c>
    10c6:	e6e4      	b.n	e92 <usart_init+0x26>
    10c8:	e754      	b.n	f74 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    10ca:	6a33      	ldr	r3, [r6, #32]
    10cc:	001f      	movs	r7, r3
    10ce:	b2c0      	uxtb	r0, r0
    10d0:	4b2d      	ldr	r3, [pc, #180]	; (1188 <usart_init+0x31c>)
    10d2:	4798      	blx	r3
    10d4:	0001      	movs	r1, r0
				status_code =
    10d6:	9b06      	ldr	r3, [sp, #24]
    10d8:	9300      	str	r3, [sp, #0]
    10da:	9b07      	ldr	r3, [sp, #28]
    10dc:	220e      	movs	r2, #14
    10de:	a806      	add	r0, sp, #24
    10e0:	4684      	mov	ip, r0
    10e2:	4462      	add	r2, ip
    10e4:	0038      	movs	r0, r7
    10e6:	4f2a      	ldr	r7, [pc, #168]	; (1190 <usart_init+0x324>)
    10e8:	47b8      	blx	r7
    10ea:	e7ea      	b.n	10c2 <usart_init+0x256>
		if(config->lin_slave_enable) {
    10ec:	7ef3      	ldrb	r3, [r6, #27]
    10ee:	2b00      	cmp	r3, #0
    10f0:	d100      	bne.n	10f4 <usart_init+0x288>
    10f2:	e77d      	b.n	ff0 <usart_init+0x184>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    10f4:	2380      	movs	r3, #128	; 0x80
    10f6:	04db      	lsls	r3, r3, #19
    10f8:	431f      	orrs	r7, r3
    10fa:	e779      	b.n	ff0 <usart_init+0x184>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    10fc:	0020      	movs	r0, r4
    10fe:	4b25      	ldr	r3, [pc, #148]	; (1194 <usart_init+0x328>)
    1100:	4798      	blx	r3
    1102:	e007      	b.n	1114 <usart_init+0x2a8>
    1104:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    1106:	2f04      	cmp	r7, #4
    1108:	d00d      	beq.n	1126 <usart_init+0x2ba>
    110a:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    110c:	00bb      	lsls	r3, r7, #2
    110e:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    1110:	2800      	cmp	r0, #0
    1112:	d0f3      	beq.n	10fc <usart_init+0x290>
		if (current_pinmux != PINMUX_UNUSED) {
    1114:	1c43      	adds	r3, r0, #1
    1116:	d0f5      	beq.n	1104 <usart_init+0x298>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1118:	a90e      	add	r1, sp, #56	; 0x38
    111a:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    111c:	0c00      	lsrs	r0, r0, #16
    111e:	b2c0      	uxtb	r0, r0
    1120:	4b1d      	ldr	r3, [pc, #116]	; (1198 <usart_init+0x32c>)
    1122:	4798      	blx	r3
    1124:	e7ee      	b.n	1104 <usart_init+0x298>
		module->callback[i]            = NULL;
    1126:	2300      	movs	r3, #0
    1128:	60eb      	str	r3, [r5, #12]
    112a:	612b      	str	r3, [r5, #16]
    112c:	616b      	str	r3, [r5, #20]
    112e:	61ab      	str	r3, [r5, #24]
    1130:	61eb      	str	r3, [r5, #28]
    1132:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    1134:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    1136:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    1138:	2200      	movs	r2, #0
    113a:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    113c:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    113e:	3330      	adds	r3, #48	; 0x30
    1140:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    1142:	3301      	adds	r3, #1
    1144:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    1146:	3301      	adds	r3, #1
    1148:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    114a:	3301      	adds	r3, #1
    114c:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    114e:	6828      	ldr	r0, [r5, #0]
    1150:	4b07      	ldr	r3, [pc, #28]	; (1170 <usart_init+0x304>)
    1152:	4798      	blx	r3
    1154:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    1156:	4911      	ldr	r1, [pc, #68]	; (119c <usart_init+0x330>)
    1158:	4b11      	ldr	r3, [pc, #68]	; (11a0 <usart_init+0x334>)
    115a:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    115c:	00a4      	lsls	r4, r4, #2
    115e:	4b11      	ldr	r3, [pc, #68]	; (11a4 <usart_init+0x338>)
    1160:	50e5      	str	r5, [r4, r3]
	return status_code;
    1162:	2000      	movs	r0, #0
    1164:	e695      	b.n	e92 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1166:	2310      	movs	r3, #16
    1168:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    116a:	2300      	movs	r3, #0
    116c:	9307      	str	r3, [sp, #28]
    116e:	e6ec      	b.n	f4a <usart_init+0xde>
    1170:	00000d65 	.word	0x00000d65
    1174:	40000400 	.word	0x40000400
    1178:	00001a11 	.word	0x00001a11
    117c:	00001985 	.word	0x00001985
    1180:	00000ba1 	.word	0x00000ba1
    1184:	41002000 	.word	0x41002000
    1188:	00001a2d 	.word	0x00001a2d
    118c:	00000ae3 	.word	0x00000ae3
    1190:	00000b0d 	.word	0x00000b0d
    1194:	00000bed 	.word	0x00000bed
    1198:	00001b09 	.word	0x00001b09
    119c:	00001239 	.word	0x00001239
    11a0:	00000da1 	.word	0x00000da1
    11a4:	20000374 	.word	0x20000374

000011a8 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    11a8:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    11aa:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    11ac:	2a00      	cmp	r2, #0
    11ae:	d101      	bne.n	11b4 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    11b0:	0018      	movs	r0, r3
    11b2:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    11b4:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    11b6:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    11b8:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    11ba:	2a00      	cmp	r2, #0
    11bc:	d1f8      	bne.n	11b0 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    11be:	6802      	ldr	r2, [r0, #0]
	usart_hw->DATA.reg = tx_data;
    11c0:	8511      	strh	r1, [r2, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    11c2:	2102      	movs	r1, #2
    11c4:	7e13      	ldrb	r3, [r2, #24]
    11c6:	420b      	tst	r3, r1
    11c8:	d0fc      	beq.n	11c4 <usart_write_wait+0x1c>
	return STATUS_OK;
    11ca:	2300      	movs	r3, #0
    11cc:	e7f0      	b.n	11b0 <usart_write_wait+0x8>

000011ce <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    11ce:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    11d0:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    11d2:	2a00      	cmp	r2, #0
    11d4:	d101      	bne.n	11da <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    11d6:	0018      	movs	r0, r3
    11d8:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    11da:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    11dc:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    11de:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    11e0:	2a00      	cmp	r2, #0
    11e2:	d1f8      	bne.n	11d6 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    11e4:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    11e6:	7e10      	ldrb	r0, [r2, #24]
    11e8:	0740      	lsls	r0, r0, #29
    11ea:	d5f4      	bpl.n	11d6 <usart_read_wait+0x8>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    11ec:	8b53      	ldrh	r3, [r2, #26]
    11ee:	b2db      	uxtb	r3, r3
	if (error_code) {
    11f0:	0698      	lsls	r0, r3, #26
    11f2:	d01d      	beq.n	1230 <usart_read_wait+0x62>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    11f4:	0798      	lsls	r0, r3, #30
    11f6:	d503      	bpl.n	1200 <usart_read_wait+0x32>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    11f8:	2302      	movs	r3, #2
    11fa:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    11fc:	3318      	adds	r3, #24
    11fe:	e7ea      	b.n	11d6 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1200:	0758      	lsls	r0, r3, #29
    1202:	d503      	bpl.n	120c <usart_read_wait+0x3e>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1204:	2304      	movs	r3, #4
    1206:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    1208:	331a      	adds	r3, #26
    120a:	e7e4      	b.n	11d6 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    120c:	07d8      	lsls	r0, r3, #31
    120e:	d503      	bpl.n	1218 <usart_read_wait+0x4a>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1210:	2301      	movs	r3, #1
    1212:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    1214:	3312      	adds	r3, #18
    1216:	e7de      	b.n	11d6 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    1218:	06d8      	lsls	r0, r3, #27
    121a:	d503      	bpl.n	1224 <usart_read_wait+0x56>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    121c:	2310      	movs	r3, #16
    121e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    1220:	3332      	adds	r3, #50	; 0x32
    1222:	e7d8      	b.n	11d6 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    1224:	069b      	lsls	r3, r3, #26
    1226:	d503      	bpl.n	1230 <usart_read_wait+0x62>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1228:	2320      	movs	r3, #32
    122a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    122c:	3321      	adds	r3, #33	; 0x21
    122e:	e7d2      	b.n	11d6 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    1230:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    1232:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    1234:	2300      	movs	r3, #0
    1236:	e7ce      	b.n	11d6 <usart_read_wait+0x8>

00001238 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    1238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    123a:	0080      	lsls	r0, r0, #2
    123c:	4b62      	ldr	r3, [pc, #392]	; (13c8 <_usart_interrupt_handler+0x190>)
    123e:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    1240:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1242:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    1244:	2b00      	cmp	r3, #0
    1246:	d1fc      	bne.n	1242 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    1248:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    124a:	7da6      	ldrb	r6, [r4, #22]
    124c:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    124e:	2330      	movs	r3, #48	; 0x30
    1250:	5ceb      	ldrb	r3, [r5, r3]
    1252:	2231      	movs	r2, #49	; 0x31
    1254:	5caf      	ldrb	r7, [r5, r2]
    1256:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    1258:	07f3      	lsls	r3, r6, #31
    125a:	d522      	bpl.n	12a2 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    125c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    125e:	b29b      	uxth	r3, r3
    1260:	2b00      	cmp	r3, #0
    1262:	d01c      	beq.n	129e <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1264:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    1266:	7813      	ldrb	r3, [r2, #0]
    1268:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    126a:	1c51      	adds	r1, r2, #1
    126c:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    126e:	7969      	ldrb	r1, [r5, #5]
    1270:	2901      	cmp	r1, #1
    1272:	d00e      	beq.n	1292 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1274:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    1276:	05db      	lsls	r3, r3, #23
    1278:	0ddb      	lsrs	r3, r3, #23
    127a:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    127c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    127e:	3b01      	subs	r3, #1
    1280:	b29b      	uxth	r3, r3
    1282:	85eb      	strh	r3, [r5, #46]	; 0x2e
    1284:	2b00      	cmp	r3, #0
    1286:	d10c      	bne.n	12a2 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1288:	3301      	adds	r3, #1
    128a:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    128c:	3301      	adds	r3, #1
    128e:	75a3      	strb	r3, [r4, #22]
    1290:	e007      	b.n	12a2 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    1292:	7851      	ldrb	r1, [r2, #1]
    1294:	0209      	lsls	r1, r1, #8
    1296:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    1298:	3202      	adds	r2, #2
    129a:	62aa      	str	r2, [r5, #40]	; 0x28
    129c:	e7eb      	b.n	1276 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    129e:	2301      	movs	r3, #1
    12a0:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    12a2:	07b3      	lsls	r3, r6, #30
    12a4:	d506      	bpl.n	12b4 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    12a6:	2302      	movs	r3, #2
    12a8:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    12aa:	2200      	movs	r2, #0
    12ac:	3331      	adds	r3, #49	; 0x31
    12ae:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    12b0:	07fb      	lsls	r3, r7, #31
    12b2:	d41a      	bmi.n	12ea <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    12b4:	0773      	lsls	r3, r6, #29
    12b6:	d565      	bpl.n	1384 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    12b8:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    12ba:	b29b      	uxth	r3, r3
    12bc:	2b00      	cmp	r3, #0
    12be:	d05f      	beq.n	1380 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    12c0:	8b63      	ldrh	r3, [r4, #26]
    12c2:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    12c4:	071a      	lsls	r2, r3, #28
    12c6:	d414      	bmi.n	12f2 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    12c8:	223f      	movs	r2, #63	; 0x3f
    12ca:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    12cc:	2b00      	cmp	r3, #0
    12ce:	d034      	beq.n	133a <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    12d0:	079a      	lsls	r2, r3, #30
    12d2:	d511      	bpl.n	12f8 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    12d4:	221a      	movs	r2, #26
    12d6:	2332      	movs	r3, #50	; 0x32
    12d8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    12da:	3b30      	subs	r3, #48	; 0x30
    12dc:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    12de:	077b      	lsls	r3, r7, #29
    12e0:	d550      	bpl.n	1384 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    12e2:	0028      	movs	r0, r5
    12e4:	696b      	ldr	r3, [r5, #20]
    12e6:	4798      	blx	r3
    12e8:	e04c      	b.n	1384 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    12ea:	0028      	movs	r0, r5
    12ec:	68eb      	ldr	r3, [r5, #12]
    12ee:	4798      	blx	r3
    12f0:	e7e0      	b.n	12b4 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    12f2:	2237      	movs	r2, #55	; 0x37
    12f4:	4013      	ands	r3, r2
    12f6:	e7e9      	b.n	12cc <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    12f8:	075a      	lsls	r2, r3, #29
    12fa:	d505      	bpl.n	1308 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    12fc:	221e      	movs	r2, #30
    12fe:	2332      	movs	r3, #50	; 0x32
    1300:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1302:	3b2e      	subs	r3, #46	; 0x2e
    1304:	8363      	strh	r3, [r4, #26]
    1306:	e7ea      	b.n	12de <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1308:	07da      	lsls	r2, r3, #31
    130a:	d505      	bpl.n	1318 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    130c:	2213      	movs	r2, #19
    130e:	2332      	movs	r3, #50	; 0x32
    1310:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1312:	3b31      	subs	r3, #49	; 0x31
    1314:	8363      	strh	r3, [r4, #26]
    1316:	e7e2      	b.n	12de <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    1318:	06da      	lsls	r2, r3, #27
    131a:	d505      	bpl.n	1328 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    131c:	2242      	movs	r2, #66	; 0x42
    131e:	2332      	movs	r3, #50	; 0x32
    1320:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1322:	3b22      	subs	r3, #34	; 0x22
    1324:	8363      	strh	r3, [r4, #26]
    1326:	e7da      	b.n	12de <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    1328:	2220      	movs	r2, #32
    132a:	421a      	tst	r2, r3
    132c:	d0d7      	beq.n	12de <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    132e:	3221      	adds	r2, #33	; 0x21
    1330:	2332      	movs	r3, #50	; 0x32
    1332:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1334:	3b12      	subs	r3, #18
    1336:	8363      	strh	r3, [r4, #26]
    1338:	e7d1      	b.n	12de <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    133a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    133c:	05db      	lsls	r3, r3, #23
    133e:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    1340:	b2da      	uxtb	r2, r3
    1342:	6a69      	ldr	r1, [r5, #36]	; 0x24
    1344:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    1346:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    1348:	1c51      	adds	r1, r2, #1
    134a:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    134c:	7969      	ldrb	r1, [r5, #5]
    134e:	2901      	cmp	r1, #1
    1350:	d010      	beq.n	1374 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    1352:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1354:	3b01      	subs	r3, #1
    1356:	b29b      	uxth	r3, r3
    1358:	85ab      	strh	r3, [r5, #44]	; 0x2c
    135a:	2b00      	cmp	r3, #0
    135c:	d112      	bne.n	1384 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    135e:	3304      	adds	r3, #4
    1360:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    1362:	2200      	movs	r2, #0
    1364:	332e      	adds	r3, #46	; 0x2e
    1366:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    1368:	07bb      	lsls	r3, r7, #30
    136a:	d50b      	bpl.n	1384 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    136c:	0028      	movs	r0, r5
    136e:	692b      	ldr	r3, [r5, #16]
    1370:	4798      	blx	r3
    1372:	e007      	b.n	1384 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    1374:	0a1b      	lsrs	r3, r3, #8
    1376:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    1378:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    137a:	3301      	adds	r3, #1
    137c:	626b      	str	r3, [r5, #36]	; 0x24
    137e:	e7e8      	b.n	1352 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1380:	2304      	movs	r3, #4
    1382:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    1384:	06f3      	lsls	r3, r6, #27
    1386:	d504      	bpl.n	1392 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    1388:	2310      	movs	r3, #16
    138a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    138c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    138e:	06fb      	lsls	r3, r7, #27
    1390:	d40e      	bmi.n	13b0 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    1392:	06b3      	lsls	r3, r6, #26
    1394:	d504      	bpl.n	13a0 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    1396:	2320      	movs	r3, #32
    1398:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    139a:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    139c:	073b      	lsls	r3, r7, #28
    139e:	d40b      	bmi.n	13b8 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    13a0:	0733      	lsls	r3, r6, #28
    13a2:	d504      	bpl.n	13ae <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    13a4:	2308      	movs	r3, #8
    13a6:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    13a8:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    13aa:	06bb      	lsls	r3, r7, #26
    13ac:	d408      	bmi.n	13c0 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    13ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    13b0:	0028      	movs	r0, r5
    13b2:	69eb      	ldr	r3, [r5, #28]
    13b4:	4798      	blx	r3
    13b6:	e7ec      	b.n	1392 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    13b8:	0028      	movs	r0, r5
    13ba:	69ab      	ldr	r3, [r5, #24]
    13bc:	4798      	blx	r3
    13be:	e7ef      	b.n	13a0 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    13c0:	6a2b      	ldr	r3, [r5, #32]
    13c2:	0028      	movs	r0, r5
    13c4:	4798      	blx	r3
}
    13c6:	e7f2      	b.n	13ae <_usart_interrupt_handler+0x176>
    13c8:	20000374 	.word	0x20000374

000013cc <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    13cc:	b510      	push	{r4, lr}
	switch (clock_source) {
    13ce:	2808      	cmp	r0, #8
    13d0:	d803      	bhi.n	13da <system_clock_source_get_hz+0xe>
    13d2:	0080      	lsls	r0, r0, #2
    13d4:	4b1c      	ldr	r3, [pc, #112]	; (1448 <system_clock_source_get_hz+0x7c>)
    13d6:	581b      	ldr	r3, [r3, r0]
    13d8:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    13da:	2000      	movs	r0, #0
    13dc:	e032      	b.n	1444 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    13de:	4b1b      	ldr	r3, [pc, #108]	; (144c <system_clock_source_get_hz+0x80>)
    13e0:	6918      	ldr	r0, [r3, #16]
    13e2:	e02f      	b.n	1444 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    13e4:	4b1a      	ldr	r3, [pc, #104]	; (1450 <system_clock_source_get_hz+0x84>)
    13e6:	6a1b      	ldr	r3, [r3, #32]
    13e8:	059b      	lsls	r3, r3, #22
    13ea:	0f9b      	lsrs	r3, r3, #30
    13ec:	4819      	ldr	r0, [pc, #100]	; (1454 <system_clock_source_get_hz+0x88>)
    13ee:	40d8      	lsrs	r0, r3
    13f0:	e028      	b.n	1444 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    13f2:	4b16      	ldr	r3, [pc, #88]	; (144c <system_clock_source_get_hz+0x80>)
    13f4:	6958      	ldr	r0, [r3, #20]
    13f6:	e025      	b.n	1444 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    13f8:	4b14      	ldr	r3, [pc, #80]	; (144c <system_clock_source_get_hz+0x80>)
    13fa:	681b      	ldr	r3, [r3, #0]
			return 0;
    13fc:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    13fe:	079b      	lsls	r3, r3, #30
    1400:	d520      	bpl.n	1444 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1402:	4913      	ldr	r1, [pc, #76]	; (1450 <system_clock_source_get_hz+0x84>)
    1404:	2210      	movs	r2, #16
    1406:	68cb      	ldr	r3, [r1, #12]
    1408:	421a      	tst	r2, r3
    140a:	d0fc      	beq.n	1406 <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    140c:	4b0f      	ldr	r3, [pc, #60]	; (144c <system_clock_source_get_hz+0x80>)
    140e:	681a      	ldr	r2, [r3, #0]
    1410:	2324      	movs	r3, #36	; 0x24
    1412:	4013      	ands	r3, r2
    1414:	2b04      	cmp	r3, #4
    1416:	d001      	beq.n	141c <system_clock_source_get_hz+0x50>
			return 48000000UL;
    1418:	480f      	ldr	r0, [pc, #60]	; (1458 <system_clock_source_get_hz+0x8c>)
    141a:	e013      	b.n	1444 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    141c:	2000      	movs	r0, #0
    141e:	4b0f      	ldr	r3, [pc, #60]	; (145c <system_clock_source_get_hz+0x90>)
    1420:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    1422:	4b0a      	ldr	r3, [pc, #40]	; (144c <system_clock_source_get_hz+0x80>)
    1424:	689b      	ldr	r3, [r3, #8]
    1426:	041b      	lsls	r3, r3, #16
    1428:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    142a:	4358      	muls	r0, r3
    142c:	e00a      	b.n	1444 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    142e:	2350      	movs	r3, #80	; 0x50
    1430:	4a07      	ldr	r2, [pc, #28]	; (1450 <system_clock_source_get_hz+0x84>)
    1432:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    1434:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1436:	075b      	lsls	r3, r3, #29
    1438:	d504      	bpl.n	1444 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    143a:	4b04      	ldr	r3, [pc, #16]	; (144c <system_clock_source_get_hz+0x80>)
    143c:	68d8      	ldr	r0, [r3, #12]
    143e:	e001      	b.n	1444 <system_clock_source_get_hz+0x78>
		return 32768UL;
    1440:	2080      	movs	r0, #128	; 0x80
    1442:	0200      	lsls	r0, r0, #8
	}
}
    1444:	bd10      	pop	{r4, pc}
    1446:	46c0      	nop			; (mov r8, r8)
    1448:	000049e8 	.word	0x000049e8
    144c:	2000027c 	.word	0x2000027c
    1450:	40000800 	.word	0x40000800
    1454:	007a1200 	.word	0x007a1200
    1458:	02dc6c00 	.word	0x02dc6c00
    145c:	00001a2d 	.word	0x00001a2d

00001460 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1460:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1462:	490c      	ldr	r1, [pc, #48]	; (1494 <system_clock_source_osc8m_set_config+0x34>)
    1464:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    1466:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1468:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    146a:	7840      	ldrb	r0, [r0, #1]
    146c:	2201      	movs	r2, #1
    146e:	4010      	ands	r0, r2
    1470:	0180      	lsls	r0, r0, #6
    1472:	2640      	movs	r6, #64	; 0x40
    1474:	43b3      	bics	r3, r6
    1476:	4303      	orrs	r3, r0
    1478:	402a      	ands	r2, r5
    147a:	01d2      	lsls	r2, r2, #7
    147c:	2080      	movs	r0, #128	; 0x80
    147e:	4383      	bics	r3, r0
    1480:	4313      	orrs	r3, r2
    1482:	2203      	movs	r2, #3
    1484:	4022      	ands	r2, r4
    1486:	0212      	lsls	r2, r2, #8
    1488:	4803      	ldr	r0, [pc, #12]	; (1498 <system_clock_source_osc8m_set_config+0x38>)
    148a:	4003      	ands	r3, r0
    148c:	4313      	orrs	r3, r2
    148e:	620b      	str	r3, [r1, #32]
}
    1490:	bd70      	pop	{r4, r5, r6, pc}
    1492:	46c0      	nop			; (mov r8, r8)
    1494:	40000800 	.word	0x40000800
    1498:	fffffcff 	.word	0xfffffcff

0000149c <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    149c:	b5f0      	push	{r4, r5, r6, r7, lr}
    149e:	46de      	mov	lr, fp
    14a0:	4657      	mov	r7, sl
    14a2:	464e      	mov	r6, r9
    14a4:	4645      	mov	r5, r8
    14a6:	b5e0      	push	{r5, r6, r7, lr}
    14a8:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    14aa:	4b26      	ldr	r3, [pc, #152]	; (1544 <system_clock_source_xosc32k_set_config+0xa8>)
    14ac:	469b      	mov	fp, r3
    14ae:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    14b0:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    14b2:	7800      	ldrb	r0, [r0, #0]
    14b4:	4242      	negs	r2, r0
    14b6:	4142      	adcs	r2, r0
    14b8:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    14ba:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    14bc:	78ca      	ldrb	r2, [r1, #3]
    14be:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    14c0:	790a      	ldrb	r2, [r1, #4]
    14c2:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    14c4:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    14c6:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    14c8:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    14ca:	688a      	ldr	r2, [r1, #8]
    14cc:	491e      	ldr	r1, [pc, #120]	; (1548 <system_clock_source_xosc32k_set_config+0xac>)
    14ce:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    14d0:	2101      	movs	r1, #1
    14d2:	464a      	mov	r2, r9
    14d4:	0092      	lsls	r2, r2, #2
    14d6:	4691      	mov	r9, r2
    14d8:	2204      	movs	r2, #4
    14da:	4393      	bics	r3, r2
    14dc:	464a      	mov	r2, r9
    14de:	4313      	orrs	r3, r2
    14e0:	4642      	mov	r2, r8
    14e2:	400a      	ands	r2, r1
    14e4:	00d2      	lsls	r2, r2, #3
    14e6:	4690      	mov	r8, r2
    14e8:	2208      	movs	r2, #8
    14ea:	4393      	bics	r3, r2
    14ec:	4642      	mov	r2, r8
    14ee:	4313      	orrs	r3, r2
    14f0:	4662      	mov	r2, ip
    14f2:	400a      	ands	r2, r1
    14f4:	0112      	lsls	r2, r2, #4
    14f6:	4694      	mov	ip, r2
    14f8:	2210      	movs	r2, #16
    14fa:	4393      	bics	r3, r2
    14fc:	4662      	mov	r2, ip
    14fe:	4313      	orrs	r3, r2
    1500:	4008      	ands	r0, r1
    1502:	0140      	lsls	r0, r0, #5
    1504:	2220      	movs	r2, #32
    1506:	4393      	bics	r3, r2
    1508:	4303      	orrs	r3, r0
    150a:	400f      	ands	r7, r1
    150c:	01bf      	lsls	r7, r7, #6
    150e:	2040      	movs	r0, #64	; 0x40
    1510:	4383      	bics	r3, r0
    1512:	433b      	orrs	r3, r7
    1514:	400e      	ands	r6, r1
    1516:	01f6      	lsls	r6, r6, #7
    1518:	3040      	adds	r0, #64	; 0x40
    151a:	4383      	bics	r3, r0
    151c:	4333      	orrs	r3, r6
    151e:	3879      	subs	r0, #121	; 0x79
    1520:	4005      	ands	r5, r0
    1522:	022d      	lsls	r5, r5, #8
    1524:	4809      	ldr	r0, [pc, #36]	; (154c <system_clock_source_xosc32k_set_config+0xb0>)
    1526:	4003      	ands	r3, r0
    1528:	432b      	orrs	r3, r5
    152a:	4021      	ands	r1, r4
    152c:	0309      	lsls	r1, r1, #12
    152e:	4808      	ldr	r0, [pc, #32]	; (1550 <system_clock_source_xosc32k_set_config+0xb4>)
    1530:	4003      	ands	r3, r0
    1532:	430b      	orrs	r3, r1
    1534:	465a      	mov	r2, fp
    1536:	8293      	strh	r3, [r2, #20]
}
    1538:	bc3c      	pop	{r2, r3, r4, r5}
    153a:	4690      	mov	r8, r2
    153c:	4699      	mov	r9, r3
    153e:	46a2      	mov	sl, r4
    1540:	46ab      	mov	fp, r5
    1542:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1544:	40000800 	.word	0x40000800
    1548:	2000027c 	.word	0x2000027c
    154c:	fffff8ff 	.word	0xfffff8ff
    1550:	ffffefff 	.word	0xffffefff

00001554 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    1554:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1556:	7a03      	ldrb	r3, [r0, #8]
    1558:	069b      	lsls	r3, r3, #26
    155a:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    155c:	8942      	ldrh	r2, [r0, #10]
    155e:	0592      	lsls	r2, r2, #22
    1560:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1562:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    1564:	4918      	ldr	r1, [pc, #96]	; (15c8 <system_clock_source_dfll_set_config+0x74>)
    1566:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    1568:	7983      	ldrb	r3, [r0, #6]
    156a:	79c2      	ldrb	r2, [r0, #7]
    156c:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    156e:	8842      	ldrh	r2, [r0, #2]
    1570:	8884      	ldrh	r4, [r0, #4]
    1572:	4322      	orrs	r2, r4
    1574:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    1576:	7842      	ldrb	r2, [r0, #1]
    1578:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    157a:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    157c:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    157e:	7803      	ldrb	r3, [r0, #0]
    1580:	2b04      	cmp	r3, #4
    1582:	d011      	beq.n	15a8 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    1584:	2b20      	cmp	r3, #32
    1586:	d10e      	bne.n	15a6 <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1588:	7b03      	ldrb	r3, [r0, #12]
    158a:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    158c:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    158e:	4313      	orrs	r3, r2
    1590:	89c2      	ldrh	r2, [r0, #14]
    1592:	0412      	lsls	r2, r2, #16
    1594:	490d      	ldr	r1, [pc, #52]	; (15cc <system_clock_source_dfll_set_config+0x78>)
    1596:	400a      	ands	r2, r1
    1598:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    159a:	4a0b      	ldr	r2, [pc, #44]	; (15c8 <system_clock_source_dfll_set_config+0x74>)
    159c:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    159e:	6811      	ldr	r1, [r2, #0]
    15a0:	4b0b      	ldr	r3, [pc, #44]	; (15d0 <system_clock_source_dfll_set_config+0x7c>)
    15a2:	430b      	orrs	r3, r1
    15a4:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    15a6:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    15a8:	7b03      	ldrb	r3, [r0, #12]
    15aa:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    15ac:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    15ae:	4313      	orrs	r3, r2
    15b0:	89c2      	ldrh	r2, [r0, #14]
    15b2:	0412      	lsls	r2, r2, #16
    15b4:	4905      	ldr	r1, [pc, #20]	; (15cc <system_clock_source_dfll_set_config+0x78>)
    15b6:	400a      	ands	r2, r1
    15b8:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    15ba:	4a03      	ldr	r2, [pc, #12]	; (15c8 <system_clock_source_dfll_set_config+0x74>)
    15bc:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    15be:	6813      	ldr	r3, [r2, #0]
    15c0:	2104      	movs	r1, #4
    15c2:	430b      	orrs	r3, r1
    15c4:	6013      	str	r3, [r2, #0]
    15c6:	e7ee      	b.n	15a6 <system_clock_source_dfll_set_config+0x52>
    15c8:	2000027c 	.word	0x2000027c
    15cc:	03ff0000 	.word	0x03ff0000
    15d0:	00000424 	.word	0x00000424

000015d4 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    15d4:	2808      	cmp	r0, #8
    15d6:	d803      	bhi.n	15e0 <system_clock_source_enable+0xc>
    15d8:	0080      	lsls	r0, r0, #2
    15da:	4b25      	ldr	r3, [pc, #148]	; (1670 <system_clock_source_enable+0x9c>)
    15dc:	581b      	ldr	r3, [r3, r0]
    15de:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    15e0:	2017      	movs	r0, #23
    15e2:	e044      	b.n	166e <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    15e4:	4a23      	ldr	r2, [pc, #140]	; (1674 <system_clock_source_enable+0xa0>)
    15e6:	6a13      	ldr	r3, [r2, #32]
    15e8:	2102      	movs	r1, #2
    15ea:	430b      	orrs	r3, r1
    15ec:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    15ee:	2000      	movs	r0, #0
    15f0:	e03d      	b.n	166e <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    15f2:	4a20      	ldr	r2, [pc, #128]	; (1674 <system_clock_source_enable+0xa0>)
    15f4:	6993      	ldr	r3, [r2, #24]
    15f6:	2102      	movs	r1, #2
    15f8:	430b      	orrs	r3, r1
    15fa:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    15fc:	2000      	movs	r0, #0
		break;
    15fe:	e036      	b.n	166e <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1600:	4a1c      	ldr	r2, [pc, #112]	; (1674 <system_clock_source_enable+0xa0>)
    1602:	8a13      	ldrh	r3, [r2, #16]
    1604:	2102      	movs	r1, #2
    1606:	430b      	orrs	r3, r1
    1608:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    160a:	2000      	movs	r0, #0
		break;
    160c:	e02f      	b.n	166e <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    160e:	4a19      	ldr	r2, [pc, #100]	; (1674 <system_clock_source_enable+0xa0>)
    1610:	8a93      	ldrh	r3, [r2, #20]
    1612:	2102      	movs	r1, #2
    1614:	430b      	orrs	r3, r1
    1616:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    1618:	2000      	movs	r0, #0
		break;
    161a:	e028      	b.n	166e <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    161c:	4916      	ldr	r1, [pc, #88]	; (1678 <system_clock_source_enable+0xa4>)
    161e:	680b      	ldr	r3, [r1, #0]
    1620:	2202      	movs	r2, #2
    1622:	4313      	orrs	r3, r2
    1624:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1626:	4b13      	ldr	r3, [pc, #76]	; (1674 <system_clock_source_enable+0xa0>)
    1628:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    162a:	0019      	movs	r1, r3
    162c:	320e      	adds	r2, #14
    162e:	68cb      	ldr	r3, [r1, #12]
    1630:	421a      	tst	r2, r3
    1632:	d0fc      	beq.n	162e <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1634:	4a10      	ldr	r2, [pc, #64]	; (1678 <system_clock_source_enable+0xa4>)
    1636:	6891      	ldr	r1, [r2, #8]
    1638:	4b0e      	ldr	r3, [pc, #56]	; (1674 <system_clock_source_enable+0xa0>)
    163a:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    163c:	6852      	ldr	r2, [r2, #4]
    163e:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    1640:	2200      	movs	r2, #0
    1642:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1644:	0019      	movs	r1, r3
    1646:	3210      	adds	r2, #16
    1648:	68cb      	ldr	r3, [r1, #12]
    164a:	421a      	tst	r2, r3
    164c:	d0fc      	beq.n	1648 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    164e:	4b0a      	ldr	r3, [pc, #40]	; (1678 <system_clock_source_enable+0xa4>)
    1650:	681b      	ldr	r3, [r3, #0]
    1652:	b29b      	uxth	r3, r3
    1654:	4a07      	ldr	r2, [pc, #28]	; (1674 <system_clock_source_enable+0xa0>)
    1656:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    1658:	2000      	movs	r0, #0
    165a:	e008      	b.n	166e <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    165c:	4905      	ldr	r1, [pc, #20]	; (1674 <system_clock_source_enable+0xa0>)
    165e:	2244      	movs	r2, #68	; 0x44
    1660:	5c8b      	ldrb	r3, [r1, r2]
    1662:	2002      	movs	r0, #2
    1664:	4303      	orrs	r3, r0
    1666:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    1668:	2000      	movs	r0, #0
		break;
    166a:	e000      	b.n	166e <system_clock_source_enable+0x9a>
		return STATUS_OK;
    166c:	2000      	movs	r0, #0
}
    166e:	4770      	bx	lr
    1670:	00004a0c 	.word	0x00004a0c
    1674:	40000800 	.word	0x40000800
    1678:	2000027c 	.word	0x2000027c

0000167c <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    167c:	b5f0      	push	{r4, r5, r6, r7, lr}
    167e:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1680:	22c2      	movs	r2, #194	; 0xc2
    1682:	00d2      	lsls	r2, r2, #3
    1684:	4b47      	ldr	r3, [pc, #284]	; (17a4 <system_clock_init+0x128>)
    1686:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1688:	4947      	ldr	r1, [pc, #284]	; (17a8 <system_clock_init+0x12c>)
    168a:	684b      	ldr	r3, [r1, #4]
    168c:	221e      	movs	r2, #30
    168e:	4393      	bics	r3, r2
    1690:	3a1c      	subs	r2, #28
    1692:	4313      	orrs	r3, r2
    1694:	604b      	str	r3, [r1, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    1696:	ab01      	add	r3, sp, #4
    1698:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    169a:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    169c:	4d43      	ldr	r5, [pc, #268]	; (17ac <system_clock_init+0x130>)
    169e:	b2e0      	uxtb	r0, r4
    16a0:	a901      	add	r1, sp, #4
    16a2:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    16a4:	3401      	adds	r4, #1
    16a6:	2c25      	cmp	r4, #37	; 0x25
    16a8:	d1f9      	bne.n	169e <system_clock_init+0x22>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    16aa:	a80a      	add	r0, sp, #40	; 0x28
    16ac:	2300      	movs	r3, #0
    16ae:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    16b0:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    16b2:	2280      	movs	r2, #128	; 0x80
    16b4:	0212      	lsls	r2, r2, #8
    16b6:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    16b8:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    16ba:	2201      	movs	r2, #1
    16bc:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    16be:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    16c0:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    16c2:	3205      	adds	r2, #5
    16c4:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    16c6:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    16c8:	4b39      	ldr	r3, [pc, #228]	; (17b0 <system_clock_init+0x134>)
    16ca:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    16cc:	2005      	movs	r0, #5
    16ce:	4b39      	ldr	r3, [pc, #228]	; (17b4 <system_clock_init+0x138>)
    16d0:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    16d2:	4934      	ldr	r1, [pc, #208]	; (17a4 <system_clock_init+0x128>)
    16d4:	2202      	movs	r2, #2
    16d6:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    16d8:	421a      	tst	r2, r3
    16da:	d0fc      	beq.n	16d6 <system_clock_init+0x5a>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    16dc:	4a31      	ldr	r2, [pc, #196]	; (17a4 <system_clock_init+0x128>)
    16de:	8a93      	ldrh	r3, [r2, #20]
    16e0:	2180      	movs	r1, #128	; 0x80
    16e2:	430b      	orrs	r3, r1
    16e4:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    16e6:	ab05      	add	r3, sp, #20
    16e8:	2100      	movs	r1, #0
    16ea:	2200      	movs	r2, #0
    16ec:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    16ee:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    16f0:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    16f2:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    16f4:	313f      	adds	r1, #63	; 0x3f
    16f6:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    16f8:	393b      	subs	r1, #59	; 0x3b
    16fa:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    16fc:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    16fe:	4b2e      	ldr	r3, [pc, #184]	; (17b8 <system_clock_init+0x13c>)
    1700:	681b      	ldr	r3, [r3, #0]
    1702:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    1704:	2b3f      	cmp	r3, #63	; 0x3f
    1706:	d04b      	beq.n	17a0 <system_clock_init+0x124>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    1708:	a805      	add	r0, sp, #20
    170a:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    170c:	23b7      	movs	r3, #183	; 0xb7
    170e:	00db      	lsls	r3, r3, #3
    1710:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    1712:	2307      	movs	r3, #7
    1714:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    1716:	3338      	adds	r3, #56	; 0x38
    1718:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    171a:	4b28      	ldr	r3, [pc, #160]	; (17bc <system_clock_init+0x140>)
    171c:	4798      	blx	r3
	config->run_in_standby  = false;
    171e:	a804      	add	r0, sp, #16
    1720:	2500      	movs	r5, #0
    1722:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    1724:	2601      	movs	r6, #1
    1726:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1728:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    172a:	4b25      	ldr	r3, [pc, #148]	; (17c0 <system_clock_init+0x144>)
    172c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    172e:	2006      	movs	r0, #6
    1730:	4f20      	ldr	r7, [pc, #128]	; (17b4 <system_clock_init+0x138>)
    1732:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1734:	4b23      	ldr	r3, [pc, #140]	; (17c4 <system_clock_init+0x148>)
    1736:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1738:	ac01      	add	r4, sp, #4
    173a:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    173c:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    173e:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    1740:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    1742:	2305      	movs	r3, #5
    1744:	7023      	strb	r3, [r4, #0]
    1746:	0021      	movs	r1, r4
    1748:	2001      	movs	r0, #1
    174a:	4b1f      	ldr	r3, [pc, #124]	; (17c8 <system_clock_init+0x14c>)
    174c:	4798      	blx	r3
    174e:	2001      	movs	r0, #1
    1750:	4b1e      	ldr	r3, [pc, #120]	; (17cc <system_clock_init+0x150>)
    1752:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    1754:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    1756:	0021      	movs	r1, r4
    1758:	2000      	movs	r0, #0
    175a:	4b14      	ldr	r3, [pc, #80]	; (17ac <system_clock_init+0x130>)
    175c:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    175e:	2000      	movs	r0, #0
    1760:	4b1b      	ldr	r3, [pc, #108]	; (17d0 <system_clock_init+0x154>)
    1762:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    1764:	2007      	movs	r0, #7
    1766:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1768:	490e      	ldr	r1, [pc, #56]	; (17a4 <system_clock_init+0x128>)
    176a:	22d0      	movs	r2, #208	; 0xd0
    176c:	68cb      	ldr	r3, [r1, #12]
    176e:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    1770:	2bd0      	cmp	r3, #208	; 0xd0
    1772:	d1fb      	bne.n	176c <system_clock_init+0xf0>
	PM->CPUSEL.reg = (uint32_t)divider;
    1774:	4a17      	ldr	r2, [pc, #92]	; (17d4 <system_clock_init+0x158>)
    1776:	2300      	movs	r3, #0
    1778:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    177a:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    177c:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    177e:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    1780:	a901      	add	r1, sp, #4
    1782:	2201      	movs	r2, #1
    1784:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    1786:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    1788:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    178a:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    178c:	3307      	adds	r3, #7
    178e:	700b      	strb	r3, [r1, #0]
    1790:	2000      	movs	r0, #0
    1792:	4b0d      	ldr	r3, [pc, #52]	; (17c8 <system_clock_init+0x14c>)
    1794:	4798      	blx	r3
    1796:	2000      	movs	r0, #0
    1798:	4b0c      	ldr	r3, [pc, #48]	; (17cc <system_clock_init+0x150>)
    179a:	4798      	blx	r3
#endif
}
    179c:	b00f      	add	sp, #60	; 0x3c
    179e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    17a0:	3b20      	subs	r3, #32
    17a2:	e7b1      	b.n	1708 <system_clock_init+0x8c>
    17a4:	40000800 	.word	0x40000800
    17a8:	41004000 	.word	0x41004000
    17ac:	00001a11 	.word	0x00001a11
    17b0:	0000149d 	.word	0x0000149d
    17b4:	000015d5 	.word	0x000015d5
    17b8:	00806024 	.word	0x00806024
    17bc:	00001555 	.word	0x00001555
    17c0:	00001461 	.word	0x00001461
    17c4:	000017d9 	.word	0x000017d9
    17c8:	000017fd 	.word	0x000017fd
    17cc:	000018b5 	.word	0x000018b5
    17d0:	00001985 	.word	0x00001985
    17d4:	40000400 	.word	0x40000400

000017d8 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    17d8:	4a06      	ldr	r2, [pc, #24]	; (17f4 <system_gclk_init+0x1c>)
    17da:	6993      	ldr	r3, [r2, #24]
    17dc:	2108      	movs	r1, #8
    17de:	430b      	orrs	r3, r1
    17e0:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    17e2:	2201      	movs	r2, #1
    17e4:	4b04      	ldr	r3, [pc, #16]	; (17f8 <system_gclk_init+0x20>)
    17e6:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    17e8:	0019      	movs	r1, r3
    17ea:	780b      	ldrb	r3, [r1, #0]
    17ec:	4213      	tst	r3, r2
    17ee:	d1fc      	bne.n	17ea <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    17f0:	4770      	bx	lr
    17f2:	46c0      	nop			; (mov r8, r8)
    17f4:	40000400 	.word	0x40000400
    17f8:	40000c00 	.word	0x40000c00

000017fc <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    17fc:	b570      	push	{r4, r5, r6, lr}
    17fe:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1800:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1802:	780d      	ldrb	r5, [r1, #0]
    1804:	022d      	lsls	r5, r5, #8
    1806:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1808:	784b      	ldrb	r3, [r1, #1]
    180a:	2b00      	cmp	r3, #0
    180c:	d002      	beq.n	1814 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    180e:	2380      	movs	r3, #128	; 0x80
    1810:	02db      	lsls	r3, r3, #11
    1812:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1814:	7a4b      	ldrb	r3, [r1, #9]
    1816:	2b00      	cmp	r3, #0
    1818:	d002      	beq.n	1820 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    181a:	2380      	movs	r3, #128	; 0x80
    181c:	031b      	lsls	r3, r3, #12
    181e:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1820:	6848      	ldr	r0, [r1, #4]
    1822:	2801      	cmp	r0, #1
    1824:	d910      	bls.n	1848 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1826:	1e43      	subs	r3, r0, #1
    1828:	4218      	tst	r0, r3
    182a:	d134      	bne.n	1896 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    182c:	2802      	cmp	r0, #2
    182e:	d930      	bls.n	1892 <system_gclk_gen_set_config+0x96>
    1830:	2302      	movs	r3, #2
    1832:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1834:	3201      	adds	r2, #1
						mask <<= 1) {
    1836:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    1838:	4298      	cmp	r0, r3
    183a:	d8fb      	bhi.n	1834 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    183c:	0212      	lsls	r2, r2, #8
    183e:	4332      	orrs	r2, r6
    1840:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1842:	2380      	movs	r3, #128	; 0x80
    1844:	035b      	lsls	r3, r3, #13
    1846:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1848:	7a0b      	ldrb	r3, [r1, #8]
    184a:	2b00      	cmp	r3, #0
    184c:	d002      	beq.n	1854 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    184e:	2380      	movs	r3, #128	; 0x80
    1850:	039b      	lsls	r3, r3, #14
    1852:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1854:	4a13      	ldr	r2, [pc, #76]	; (18a4 <system_gclk_gen_set_config+0xa8>)
    1856:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    1858:	b25b      	sxtb	r3, r3
    185a:	2b00      	cmp	r3, #0
    185c:	dbfb      	blt.n	1856 <system_gclk_gen_set_config+0x5a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    185e:	4b12      	ldr	r3, [pc, #72]	; (18a8 <system_gclk_gen_set_config+0xac>)
    1860:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1862:	4b12      	ldr	r3, [pc, #72]	; (18ac <system_gclk_gen_set_config+0xb0>)
    1864:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1866:	4a0f      	ldr	r2, [pc, #60]	; (18a4 <system_gclk_gen_set_config+0xa8>)
    1868:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    186a:	b25b      	sxtb	r3, r3
    186c:	2b00      	cmp	r3, #0
    186e:	dbfb      	blt.n	1868 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1870:	4b0c      	ldr	r3, [pc, #48]	; (18a4 <system_gclk_gen_set_config+0xa8>)
    1872:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1874:	001a      	movs	r2, r3
    1876:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    1878:	b25b      	sxtb	r3, r3
    187a:	2b00      	cmp	r3, #0
    187c:	dbfb      	blt.n	1876 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    187e:	4a09      	ldr	r2, [pc, #36]	; (18a4 <system_gclk_gen_set_config+0xa8>)
    1880:	6853      	ldr	r3, [r2, #4]
    1882:	2180      	movs	r1, #128	; 0x80
    1884:	0249      	lsls	r1, r1, #9
    1886:	400b      	ands	r3, r1
    1888:	431d      	orrs	r5, r3
    188a:	6055      	str	r5, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    188c:	4b08      	ldr	r3, [pc, #32]	; (18b0 <system_gclk_gen_set_config+0xb4>)
    188e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1890:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    1892:	2200      	movs	r2, #0
    1894:	e7d2      	b.n	183c <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1896:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    1898:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    189a:	2380      	movs	r3, #128	; 0x80
    189c:	029b      	lsls	r3, r3, #10
    189e:	431d      	orrs	r5, r3
    18a0:	e7d2      	b.n	1848 <system_gclk_gen_set_config+0x4c>
    18a2:	46c0      	nop			; (mov r8, r8)
    18a4:	40000c00 	.word	0x40000c00
    18a8:	0000042d 	.word	0x0000042d
    18ac:	40000c08 	.word	0x40000c08
    18b0:	0000046d 	.word	0x0000046d

000018b4 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    18b4:	b510      	push	{r4, lr}
    18b6:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    18b8:	4a0b      	ldr	r2, [pc, #44]	; (18e8 <system_gclk_gen_enable+0x34>)
    18ba:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    18bc:	b25b      	sxtb	r3, r3
    18be:	2b00      	cmp	r3, #0
    18c0:	dbfb      	blt.n	18ba <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    18c2:	4b0a      	ldr	r3, [pc, #40]	; (18ec <system_gclk_gen_enable+0x38>)
    18c4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    18c6:	4b0a      	ldr	r3, [pc, #40]	; (18f0 <system_gclk_gen_enable+0x3c>)
    18c8:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    18ca:	4a07      	ldr	r2, [pc, #28]	; (18e8 <system_gclk_gen_enable+0x34>)
    18cc:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    18ce:	b25b      	sxtb	r3, r3
    18d0:	2b00      	cmp	r3, #0
    18d2:	dbfb      	blt.n	18cc <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    18d4:	4a04      	ldr	r2, [pc, #16]	; (18e8 <system_gclk_gen_enable+0x34>)
    18d6:	6851      	ldr	r1, [r2, #4]
    18d8:	2380      	movs	r3, #128	; 0x80
    18da:	025b      	lsls	r3, r3, #9
    18dc:	430b      	orrs	r3, r1
    18de:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    18e0:	4b04      	ldr	r3, [pc, #16]	; (18f4 <system_gclk_gen_enable+0x40>)
    18e2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    18e4:	bd10      	pop	{r4, pc}
    18e6:	46c0      	nop			; (mov r8, r8)
    18e8:	40000c00 	.word	0x40000c00
    18ec:	0000042d 	.word	0x0000042d
    18f0:	40000c04 	.word	0x40000c04
    18f4:	0000046d 	.word	0x0000046d

000018f8 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    18f8:	b570      	push	{r4, r5, r6, lr}
    18fa:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    18fc:	4a1a      	ldr	r2, [pc, #104]	; (1968 <system_gclk_gen_get_hz+0x70>)
    18fe:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1900:	b25b      	sxtb	r3, r3
    1902:	2b00      	cmp	r3, #0
    1904:	dbfb      	blt.n	18fe <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    1906:	4b19      	ldr	r3, [pc, #100]	; (196c <system_gclk_gen_get_hz+0x74>)
    1908:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    190a:	4b19      	ldr	r3, [pc, #100]	; (1970 <system_gclk_gen_get_hz+0x78>)
    190c:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    190e:	4a16      	ldr	r2, [pc, #88]	; (1968 <system_gclk_gen_get_hz+0x70>)
    1910:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1912:	b25b      	sxtb	r3, r3
    1914:	2b00      	cmp	r3, #0
    1916:	dbfb      	blt.n	1910 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1918:	4e13      	ldr	r6, [pc, #76]	; (1968 <system_gclk_gen_get_hz+0x70>)
    191a:	6870      	ldr	r0, [r6, #4]
    191c:	04c0      	lsls	r0, r0, #19
    191e:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1920:	4b14      	ldr	r3, [pc, #80]	; (1974 <system_gclk_gen_get_hz+0x7c>)
    1922:	4798      	blx	r3
    1924:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1926:	4b12      	ldr	r3, [pc, #72]	; (1970 <system_gclk_gen_get_hz+0x78>)
    1928:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    192a:	6876      	ldr	r6, [r6, #4]
    192c:	02f6      	lsls	r6, r6, #11
    192e:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1930:	4b11      	ldr	r3, [pc, #68]	; (1978 <system_gclk_gen_get_hz+0x80>)
    1932:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1934:	4a0c      	ldr	r2, [pc, #48]	; (1968 <system_gclk_gen_get_hz+0x70>)
    1936:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1938:	b25b      	sxtb	r3, r3
    193a:	2b00      	cmp	r3, #0
    193c:	dbfb      	blt.n	1936 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    193e:	4b0a      	ldr	r3, [pc, #40]	; (1968 <system_gclk_gen_get_hz+0x70>)
    1940:	689c      	ldr	r4, [r3, #8]
    1942:	0224      	lsls	r4, r4, #8
    1944:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    1946:	4b0d      	ldr	r3, [pc, #52]	; (197c <system_gclk_gen_get_hz+0x84>)
    1948:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    194a:	2e00      	cmp	r6, #0
    194c:	d107      	bne.n	195e <system_gclk_gen_get_hz+0x66>
    194e:	2c01      	cmp	r4, #1
    1950:	d907      	bls.n	1962 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    1952:	0021      	movs	r1, r4
    1954:	0028      	movs	r0, r5
    1956:	4b0a      	ldr	r3, [pc, #40]	; (1980 <system_gclk_gen_get_hz+0x88>)
    1958:	4798      	blx	r3
    195a:	0005      	movs	r5, r0
    195c:	e001      	b.n	1962 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    195e:	3401      	adds	r4, #1
    1960:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    1962:	0028      	movs	r0, r5
    1964:	bd70      	pop	{r4, r5, r6, pc}
    1966:	46c0      	nop			; (mov r8, r8)
    1968:	40000c00 	.word	0x40000c00
    196c:	0000042d 	.word	0x0000042d
    1970:	40000c04 	.word	0x40000c04
    1974:	000013cd 	.word	0x000013cd
    1978:	40000c08 	.word	0x40000c08
    197c:	0000046d 	.word	0x0000046d
    1980:	0000313d 	.word	0x0000313d

00001984 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1984:	b510      	push	{r4, lr}
    1986:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1988:	4b06      	ldr	r3, [pc, #24]	; (19a4 <system_gclk_chan_enable+0x20>)
    198a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    198c:	4b06      	ldr	r3, [pc, #24]	; (19a8 <system_gclk_chan_enable+0x24>)
    198e:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1990:	4a06      	ldr	r2, [pc, #24]	; (19ac <system_gclk_chan_enable+0x28>)
    1992:	8853      	ldrh	r3, [r2, #2]
    1994:	2180      	movs	r1, #128	; 0x80
    1996:	01c9      	lsls	r1, r1, #7
    1998:	430b      	orrs	r3, r1
    199a:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    199c:	4b04      	ldr	r3, [pc, #16]	; (19b0 <system_gclk_chan_enable+0x2c>)
    199e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    19a0:	bd10      	pop	{r4, pc}
    19a2:	46c0      	nop			; (mov r8, r8)
    19a4:	0000042d 	.word	0x0000042d
    19a8:	40000c02 	.word	0x40000c02
    19ac:	40000c00 	.word	0x40000c00
    19b0:	0000046d 	.word	0x0000046d

000019b4 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    19b4:	b510      	push	{r4, lr}
    19b6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    19b8:	4b0f      	ldr	r3, [pc, #60]	; (19f8 <system_gclk_chan_disable+0x44>)
    19ba:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    19bc:	4b0f      	ldr	r3, [pc, #60]	; (19fc <system_gclk_chan_disable+0x48>)
    19be:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    19c0:	4a0f      	ldr	r2, [pc, #60]	; (1a00 <system_gclk_chan_disable+0x4c>)
    19c2:	8853      	ldrh	r3, [r2, #2]
    19c4:	051b      	lsls	r3, r3, #20
    19c6:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    19c8:	8853      	ldrh	r3, [r2, #2]
    19ca:	490e      	ldr	r1, [pc, #56]	; (1a04 <system_gclk_chan_disable+0x50>)
    19cc:	400b      	ands	r3, r1
    19ce:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    19d0:	8853      	ldrh	r3, [r2, #2]
    19d2:	490d      	ldr	r1, [pc, #52]	; (1a08 <system_gclk_chan_disable+0x54>)
    19d4:	400b      	ands	r3, r1
    19d6:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    19d8:	0011      	movs	r1, r2
    19da:	2280      	movs	r2, #128	; 0x80
    19dc:	01d2      	lsls	r2, r2, #7
    19de:	884b      	ldrh	r3, [r1, #2]
    19e0:	4213      	tst	r3, r2
    19e2:	d1fc      	bne.n	19de <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    19e4:	4906      	ldr	r1, [pc, #24]	; (1a00 <system_gclk_chan_disable+0x4c>)
    19e6:	884a      	ldrh	r2, [r1, #2]
    19e8:	0203      	lsls	r3, r0, #8
    19ea:	4806      	ldr	r0, [pc, #24]	; (1a04 <system_gclk_chan_disable+0x50>)
    19ec:	4002      	ands	r2, r0
    19ee:	4313      	orrs	r3, r2
    19f0:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    19f2:	4b06      	ldr	r3, [pc, #24]	; (1a0c <system_gclk_chan_disable+0x58>)
    19f4:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    19f6:	bd10      	pop	{r4, pc}
    19f8:	0000042d 	.word	0x0000042d
    19fc:	40000c02 	.word	0x40000c02
    1a00:	40000c00 	.word	0x40000c00
    1a04:	fffff0ff 	.word	0xfffff0ff
    1a08:	ffffbfff 	.word	0xffffbfff
    1a0c:	0000046d 	.word	0x0000046d

00001a10 <system_gclk_chan_set_config>:
{
    1a10:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1a12:	780c      	ldrb	r4, [r1, #0]
    1a14:	0224      	lsls	r4, r4, #8
    1a16:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    1a18:	4b02      	ldr	r3, [pc, #8]	; (1a24 <system_gclk_chan_set_config+0x14>)
    1a1a:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1a1c:	b2a4      	uxth	r4, r4
    1a1e:	4b02      	ldr	r3, [pc, #8]	; (1a28 <system_gclk_chan_set_config+0x18>)
    1a20:	805c      	strh	r4, [r3, #2]
}
    1a22:	bd10      	pop	{r4, pc}
    1a24:	000019b5 	.word	0x000019b5
    1a28:	40000c00 	.word	0x40000c00

00001a2c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1a2c:	b510      	push	{r4, lr}
    1a2e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1a30:	4b06      	ldr	r3, [pc, #24]	; (1a4c <system_gclk_chan_get_hz+0x20>)
    1a32:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1a34:	4b06      	ldr	r3, [pc, #24]	; (1a50 <system_gclk_chan_get_hz+0x24>)
    1a36:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1a38:	4b06      	ldr	r3, [pc, #24]	; (1a54 <system_gclk_chan_get_hz+0x28>)
    1a3a:	885c      	ldrh	r4, [r3, #2]
    1a3c:	0524      	lsls	r4, r4, #20
    1a3e:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    1a40:	4b05      	ldr	r3, [pc, #20]	; (1a58 <system_gclk_chan_get_hz+0x2c>)
    1a42:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1a44:	0020      	movs	r0, r4
    1a46:	4b05      	ldr	r3, [pc, #20]	; (1a5c <system_gclk_chan_get_hz+0x30>)
    1a48:	4798      	blx	r3
}
    1a4a:	bd10      	pop	{r4, pc}
    1a4c:	0000042d 	.word	0x0000042d
    1a50:	40000c02 	.word	0x40000c02
    1a54:	40000c00 	.word	0x40000c00
    1a58:	0000046d 	.word	0x0000046d
    1a5c:	000018f9 	.word	0x000018f9

00001a60 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1a60:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1a62:	78d3      	ldrb	r3, [r2, #3]
    1a64:	2b00      	cmp	r3, #0
    1a66:	d135      	bne.n	1ad4 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1a68:	7813      	ldrb	r3, [r2, #0]
    1a6a:	2b80      	cmp	r3, #128	; 0x80
    1a6c:	d029      	beq.n	1ac2 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1a6e:	061b      	lsls	r3, r3, #24
    1a70:	2480      	movs	r4, #128	; 0x80
    1a72:	0264      	lsls	r4, r4, #9
    1a74:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1a76:	7854      	ldrb	r4, [r2, #1]
    1a78:	2502      	movs	r5, #2
    1a7a:	43ac      	bics	r4, r5
    1a7c:	d106      	bne.n	1a8c <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1a7e:	7894      	ldrb	r4, [r2, #2]
    1a80:	2c00      	cmp	r4, #0
    1a82:	d120      	bne.n	1ac6 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    1a84:	2480      	movs	r4, #128	; 0x80
    1a86:	02a4      	lsls	r4, r4, #10
    1a88:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1a8a:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1a8c:	7854      	ldrb	r4, [r2, #1]
    1a8e:	3c01      	subs	r4, #1
    1a90:	2c01      	cmp	r4, #1
    1a92:	d91c      	bls.n	1ace <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1a94:	040d      	lsls	r5, r1, #16
    1a96:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1a98:	24a0      	movs	r4, #160	; 0xa0
    1a9a:	05e4      	lsls	r4, r4, #23
    1a9c:	432c      	orrs	r4, r5
    1a9e:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1aa0:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1aa2:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1aa4:	24d0      	movs	r4, #208	; 0xd0
    1aa6:	0624      	lsls	r4, r4, #24
    1aa8:	432c      	orrs	r4, r5
    1aaa:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1aac:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1aae:	78d4      	ldrb	r4, [r2, #3]
    1ab0:	2c00      	cmp	r4, #0
    1ab2:	d122      	bne.n	1afa <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1ab4:	035b      	lsls	r3, r3, #13
    1ab6:	d51c      	bpl.n	1af2 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1ab8:	7893      	ldrb	r3, [r2, #2]
    1aba:	2b01      	cmp	r3, #1
    1abc:	d01e      	beq.n	1afc <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    1abe:	6141      	str	r1, [r0, #20]
    1ac0:	e017      	b.n	1af2 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    1ac2:	2300      	movs	r3, #0
    1ac4:	e7d7      	b.n	1a76 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1ac6:	24c0      	movs	r4, #192	; 0xc0
    1ac8:	02e4      	lsls	r4, r4, #11
    1aca:	4323      	orrs	r3, r4
    1acc:	e7dd      	b.n	1a8a <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1ace:	4c0d      	ldr	r4, [pc, #52]	; (1b04 <_system_pinmux_config+0xa4>)
    1ad0:	4023      	ands	r3, r4
    1ad2:	e7df      	b.n	1a94 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    1ad4:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1ad6:	040c      	lsls	r4, r1, #16
    1ad8:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1ada:	23a0      	movs	r3, #160	; 0xa0
    1adc:	05db      	lsls	r3, r3, #23
    1ade:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1ae0:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1ae2:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1ae4:	23d0      	movs	r3, #208	; 0xd0
    1ae6:	061b      	lsls	r3, r3, #24
    1ae8:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1aea:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    1aec:	78d3      	ldrb	r3, [r2, #3]
    1aee:	2b00      	cmp	r3, #0
    1af0:	d103      	bne.n	1afa <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1af2:	7853      	ldrb	r3, [r2, #1]
    1af4:	3b01      	subs	r3, #1
    1af6:	2b01      	cmp	r3, #1
    1af8:	d902      	bls.n	1b00 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    1afa:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    1afc:	6181      	str	r1, [r0, #24]
    1afe:	e7f8      	b.n	1af2 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    1b00:	6081      	str	r1, [r0, #8]
}
    1b02:	e7fa      	b.n	1afa <_system_pinmux_config+0x9a>
    1b04:	fffbffff 	.word	0xfffbffff

00001b08 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1b08:	b510      	push	{r4, lr}
    1b0a:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1b0c:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1b0e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1b10:	2900      	cmp	r1, #0
    1b12:	d104      	bne.n	1b1e <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1b14:	0943      	lsrs	r3, r0, #5
    1b16:	01db      	lsls	r3, r3, #7
    1b18:	4905      	ldr	r1, [pc, #20]	; (1b30 <system_pinmux_pin_set_config+0x28>)
    1b1a:	468c      	mov	ip, r1
    1b1c:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1b1e:	241f      	movs	r4, #31
    1b20:	4020      	ands	r0, r4
    1b22:	2101      	movs	r1, #1
    1b24:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    1b26:	0018      	movs	r0, r3
    1b28:	4b02      	ldr	r3, [pc, #8]	; (1b34 <system_pinmux_pin_set_config+0x2c>)
    1b2a:	4798      	blx	r3
}
    1b2c:	bd10      	pop	{r4, pc}
    1b2e:	46c0      	nop			; (mov r8, r8)
    1b30:	41004400 	.word	0x41004400
    1b34:	00001a61 	.word	0x00001a61

00001b38 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1b38:	4770      	bx	lr
	...

00001b3c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1b3c:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1b3e:	4b05      	ldr	r3, [pc, #20]	; (1b54 <system_init+0x18>)
    1b40:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1b42:	4b05      	ldr	r3, [pc, #20]	; (1b58 <system_init+0x1c>)
    1b44:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1b46:	4b05      	ldr	r3, [pc, #20]	; (1b5c <system_init+0x20>)
    1b48:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1b4a:	4b05      	ldr	r3, [pc, #20]	; (1b60 <system_init+0x24>)
    1b4c:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1b4e:	4b05      	ldr	r3, [pc, #20]	; (1b64 <system_init+0x28>)
    1b50:	4798      	blx	r3
}
    1b52:	bd10      	pop	{r4, pc}
    1b54:	0000167d 	.word	0x0000167d
    1b58:	0000049d 	.word	0x0000049d
    1b5c:	00001b39 	.word	0x00001b39
    1b60:	00001b39 	.word	0x00001b39
    1b64:	00001b39 	.word	0x00001b39

00001b68 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1b68:	e7fe      	b.n	1b68 <Dummy_Handler>
	...

00001b6c <Reset_Handler>:
{
    1b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    1b6e:	4a2a      	ldr	r2, [pc, #168]	; (1c18 <Reset_Handler+0xac>)
    1b70:	4b2a      	ldr	r3, [pc, #168]	; (1c1c <Reset_Handler+0xb0>)
    1b72:	429a      	cmp	r2, r3
    1b74:	d011      	beq.n	1b9a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    1b76:	001a      	movs	r2, r3
    1b78:	4b29      	ldr	r3, [pc, #164]	; (1c20 <Reset_Handler+0xb4>)
    1b7a:	429a      	cmp	r2, r3
    1b7c:	d20d      	bcs.n	1b9a <Reset_Handler+0x2e>
    1b7e:	4a29      	ldr	r2, [pc, #164]	; (1c24 <Reset_Handler+0xb8>)
    1b80:	3303      	adds	r3, #3
    1b82:	1a9b      	subs	r3, r3, r2
    1b84:	089b      	lsrs	r3, r3, #2
    1b86:	3301      	adds	r3, #1
    1b88:	009b      	lsls	r3, r3, #2
    1b8a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1b8c:	4823      	ldr	r0, [pc, #140]	; (1c1c <Reset_Handler+0xb0>)
    1b8e:	4922      	ldr	r1, [pc, #136]	; (1c18 <Reset_Handler+0xac>)
    1b90:	588c      	ldr	r4, [r1, r2]
    1b92:	5084      	str	r4, [r0, r2]
    1b94:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    1b96:	429a      	cmp	r2, r3
    1b98:	d1fa      	bne.n	1b90 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    1b9a:	4a23      	ldr	r2, [pc, #140]	; (1c28 <Reset_Handler+0xbc>)
    1b9c:	4b23      	ldr	r3, [pc, #140]	; (1c2c <Reset_Handler+0xc0>)
    1b9e:	429a      	cmp	r2, r3
    1ba0:	d20a      	bcs.n	1bb8 <Reset_Handler+0x4c>
    1ba2:	43d3      	mvns	r3, r2
    1ba4:	4921      	ldr	r1, [pc, #132]	; (1c2c <Reset_Handler+0xc0>)
    1ba6:	185b      	adds	r3, r3, r1
    1ba8:	2103      	movs	r1, #3
    1baa:	438b      	bics	r3, r1
    1bac:	3304      	adds	r3, #4
    1bae:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    1bb0:	2100      	movs	r1, #0
    1bb2:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    1bb4:	4293      	cmp	r3, r2
    1bb6:	d1fc      	bne.n	1bb2 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1bb8:	4a1d      	ldr	r2, [pc, #116]	; (1c30 <Reset_Handler+0xc4>)
    1bba:	21ff      	movs	r1, #255	; 0xff
    1bbc:	4b1d      	ldr	r3, [pc, #116]	; (1c34 <Reset_Handler+0xc8>)
    1bbe:	438b      	bics	r3, r1
    1bc0:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1bc2:	39fd      	subs	r1, #253	; 0xfd
    1bc4:	2390      	movs	r3, #144	; 0x90
    1bc6:	005b      	lsls	r3, r3, #1
    1bc8:	4a1b      	ldr	r2, [pc, #108]	; (1c38 <Reset_Handler+0xcc>)
    1bca:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1bcc:	4a1b      	ldr	r2, [pc, #108]	; (1c3c <Reset_Handler+0xd0>)
    1bce:	78d3      	ldrb	r3, [r2, #3]
    1bd0:	2503      	movs	r5, #3
    1bd2:	43ab      	bics	r3, r5
    1bd4:	2402      	movs	r4, #2
    1bd6:	4323      	orrs	r3, r4
    1bd8:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1bda:	78d3      	ldrb	r3, [r2, #3]
    1bdc:	270c      	movs	r7, #12
    1bde:	43bb      	bics	r3, r7
    1be0:	2608      	movs	r6, #8
    1be2:	4333      	orrs	r3, r6
    1be4:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    1be6:	4b16      	ldr	r3, [pc, #88]	; (1c40 <Reset_Handler+0xd4>)
    1be8:	7b98      	ldrb	r0, [r3, #14]
    1bea:	2230      	movs	r2, #48	; 0x30
    1bec:	4390      	bics	r0, r2
    1bee:	2220      	movs	r2, #32
    1bf0:	4310      	orrs	r0, r2
    1bf2:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1bf4:	7b99      	ldrb	r1, [r3, #14]
    1bf6:	43b9      	bics	r1, r7
    1bf8:	4331      	orrs	r1, r6
    1bfa:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1bfc:	7b9a      	ldrb	r2, [r3, #14]
    1bfe:	43aa      	bics	r2, r5
    1c00:	4322      	orrs	r2, r4
    1c02:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    1c04:	4a0f      	ldr	r2, [pc, #60]	; (1c44 <Reset_Handler+0xd8>)
    1c06:	6853      	ldr	r3, [r2, #4]
    1c08:	2180      	movs	r1, #128	; 0x80
    1c0a:	430b      	orrs	r3, r1
    1c0c:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    1c0e:	4b0e      	ldr	r3, [pc, #56]	; (1c48 <Reset_Handler+0xdc>)
    1c10:	4798      	blx	r3
        main();
    1c12:	4b0e      	ldr	r3, [pc, #56]	; (1c4c <Reset_Handler+0xe0>)
    1c14:	4798      	blx	r3
    1c16:	e7fe      	b.n	1c16 <Reset_Handler+0xaa>
    1c18:	00007f24 	.word	0x00007f24
    1c1c:	20000000 	.word	0x20000000
    1c20:	200001bc 	.word	0x200001bc
    1c24:	20000004 	.word	0x20000004
    1c28:	200001bc 	.word	0x200001bc
    1c2c:	20000bb0 	.word	0x20000bb0
    1c30:	e000ed00 	.word	0xe000ed00
    1c34:	00000000 	.word	0x00000000
    1c38:	41007000 	.word	0x41007000
    1c3c:	41005000 	.word	0x41005000
    1c40:	41004800 	.word	0x41004800
    1c44:	41004000 	.word	0x41004000
    1c48:	000032a9 	.word	0x000032a9
    1c4c:	000030ad 	.word	0x000030ad

00001c50 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    1c50:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c52:	46c6      	mov	lr, r8
    1c54:	b500      	push	{lr}
    1c56:	000c      	movs	r4, r1
    1c58:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    1c5a:	2800      	cmp	r0, #0
    1c5c:	d10f      	bne.n	1c7e <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    1c5e:	2a00      	cmp	r2, #0
    1c60:	dd11      	ble.n	1c86 <_read+0x36>
    1c62:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    1c64:	4e09      	ldr	r6, [pc, #36]	; (1c8c <_read+0x3c>)
    1c66:	4d0a      	ldr	r5, [pc, #40]	; (1c90 <_read+0x40>)
    1c68:	6830      	ldr	r0, [r6, #0]
    1c6a:	0021      	movs	r1, r4
    1c6c:	682b      	ldr	r3, [r5, #0]
    1c6e:	4798      	blx	r3
		ptr++;
    1c70:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    1c72:	42bc      	cmp	r4, r7
    1c74:	d1f8      	bne.n	1c68 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    1c76:	4640      	mov	r0, r8
    1c78:	bc04      	pop	{r2}
    1c7a:	4690      	mov	r8, r2
    1c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    1c7e:	2301      	movs	r3, #1
    1c80:	425b      	negs	r3, r3
    1c82:	4698      	mov	r8, r3
    1c84:	e7f7      	b.n	1c76 <_read+0x26>
	for (; len > 0; --len) {
    1c86:	4680      	mov	r8, r0
    1c88:	e7f5      	b.n	1c76 <_read+0x26>
    1c8a:	46c0      	nop			; (mov r8, r8)
    1c8c:	20000394 	.word	0x20000394
    1c90:	2000038c 	.word	0x2000038c

00001c94 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    1c94:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c96:	46c6      	mov	lr, r8
    1c98:	b500      	push	{lr}
    1c9a:	000e      	movs	r6, r1
    1c9c:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    1c9e:	3801      	subs	r0, #1
    1ca0:	2802      	cmp	r0, #2
    1ca2:	d810      	bhi.n	1cc6 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    1ca4:	2a00      	cmp	r2, #0
    1ca6:	d011      	beq.n	1ccc <_write+0x38>
    1ca8:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    1caa:	4b0c      	ldr	r3, [pc, #48]	; (1cdc <_write+0x48>)
    1cac:	4698      	mov	r8, r3
    1cae:	4f0c      	ldr	r7, [pc, #48]	; (1ce0 <_write+0x4c>)
    1cb0:	4643      	mov	r3, r8
    1cb2:	6818      	ldr	r0, [r3, #0]
    1cb4:	5d31      	ldrb	r1, [r6, r4]
    1cb6:	683b      	ldr	r3, [r7, #0]
    1cb8:	4798      	blx	r3
    1cba:	2800      	cmp	r0, #0
    1cbc:	db08      	blt.n	1cd0 <_write+0x3c>
			return -1;
		}
		++nChars;
    1cbe:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    1cc0:	42a5      	cmp	r5, r4
    1cc2:	d1f5      	bne.n	1cb0 <_write+0x1c>
    1cc4:	e006      	b.n	1cd4 <_write+0x40>
		return -1;
    1cc6:	2401      	movs	r4, #1
    1cc8:	4264      	negs	r4, r4
    1cca:	e003      	b.n	1cd4 <_write+0x40>
	for (; len != 0; --len) {
    1ccc:	0014      	movs	r4, r2
    1cce:	e001      	b.n	1cd4 <_write+0x40>
			return -1;
    1cd0:	2401      	movs	r4, #1
    1cd2:	4264      	negs	r4, r4
	}
	return nChars;
}
    1cd4:	0020      	movs	r0, r4
    1cd6:	bc04      	pop	{r2}
    1cd8:	4690      	mov	r8, r2
    1cda:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1cdc:	20000394 	.word	0x20000394
    1ce0:	20000390 	.word	0x20000390

00001ce4 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    1ce4:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    1ce6:	4a06      	ldr	r2, [pc, #24]	; (1d00 <_sbrk+0x1c>)
    1ce8:	6812      	ldr	r2, [r2, #0]
    1cea:	2a00      	cmp	r2, #0
    1cec:	d004      	beq.n	1cf8 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    1cee:	4a04      	ldr	r2, [pc, #16]	; (1d00 <_sbrk+0x1c>)
    1cf0:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    1cf2:	18c3      	adds	r3, r0, r3
    1cf4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    1cf6:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    1cf8:	4902      	ldr	r1, [pc, #8]	; (1d04 <_sbrk+0x20>)
    1cfa:	4a01      	ldr	r2, [pc, #4]	; (1d00 <_sbrk+0x1c>)
    1cfc:	6011      	str	r1, [r2, #0]
    1cfe:	e7f6      	b.n	1cee <_sbrk+0xa>
    1d00:	20000294 	.word	0x20000294
    1d04:	20002bb0 	.word	0x20002bb0

00001d08 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    1d08:	2001      	movs	r0, #1
    1d0a:	4240      	negs	r0, r0
    1d0c:	4770      	bx	lr

00001d0e <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    1d0e:	2380      	movs	r3, #128	; 0x80
    1d10:	019b      	lsls	r3, r3, #6
    1d12:	604b      	str	r3, [r1, #4]

	return 0;
}
    1d14:	2000      	movs	r0, #0
    1d16:	4770      	bx	lr

00001d18 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    1d18:	2001      	movs	r0, #1
    1d1a:	4770      	bx	lr

00001d1c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    1d1c:	2000      	movs	r0, #0
    1d1e:	4770      	bx	lr

00001d20 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    1d20:	b570      	push	{r4, r5, r6, lr}
    1d22:	b082      	sub	sp, #8
    1d24:	0005      	movs	r5, r0
    1d26:	000e      	movs	r6, r1
	uint16_t temp = 0;
    1d28:	2200      	movs	r2, #0
    1d2a:	466b      	mov	r3, sp
    1d2c:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    1d2e:	4c06      	ldr	r4, [pc, #24]	; (1d48 <usart_serial_getchar+0x28>)
    1d30:	466b      	mov	r3, sp
    1d32:	1d99      	adds	r1, r3, #6
    1d34:	0028      	movs	r0, r5
    1d36:	47a0      	blx	r4
    1d38:	2800      	cmp	r0, #0
    1d3a:	d1f9      	bne.n	1d30 <usart_serial_getchar+0x10>

	*c = temp;
    1d3c:	466b      	mov	r3, sp
    1d3e:	3306      	adds	r3, #6
    1d40:	881b      	ldrh	r3, [r3, #0]
    1d42:	7033      	strb	r3, [r6, #0]
}
    1d44:	b002      	add	sp, #8
    1d46:	bd70      	pop	{r4, r5, r6, pc}
    1d48:	000011cf 	.word	0x000011cf

00001d4c <usart_serial_putchar>:
{
    1d4c:	b570      	push	{r4, r5, r6, lr}
    1d4e:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    1d50:	b28c      	uxth	r4, r1
    1d52:	4e03      	ldr	r6, [pc, #12]	; (1d60 <usart_serial_putchar+0x14>)
    1d54:	0021      	movs	r1, r4
    1d56:	0028      	movs	r0, r5
    1d58:	47b0      	blx	r6
    1d5a:	2800      	cmp	r0, #0
    1d5c:	d1fa      	bne.n	1d54 <usart_serial_putchar+0x8>
}
    1d5e:	bd70      	pop	{r4, r5, r6, pc}
    1d60:	000011a9 	.word	0x000011a9

00001d64 <configure_console>:
#include "config_usart.h"

void configure_console(void)
{
    1d64:	b570      	push	{r4, r5, r6, lr}
    1d66:	b090      	sub	sp, #64	; 0x40
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    1d68:	2380      	movs	r3, #128	; 0x80
    1d6a:	05db      	lsls	r3, r3, #23
    1d6c:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    1d6e:	2300      	movs	r3, #0
    1d70:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    1d72:	22ff      	movs	r2, #255	; 0xff
    1d74:	4669      	mov	r1, sp
    1d76:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    1d78:	2200      	movs	r2, #0
    1d7a:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    1d7c:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
    1d7e:	2196      	movs	r1, #150	; 0x96
    1d80:	0189      	lsls	r1, r1, #6
    1d82:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
    1d84:	2101      	movs	r1, #1
    1d86:	2024      	movs	r0, #36	; 0x24
    1d88:	466c      	mov	r4, sp
    1d8a:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    1d8c:	3001      	adds	r0, #1
    1d8e:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    1d90:	3125      	adds	r1, #37	; 0x25
    1d92:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    1d94:	3101      	adds	r1, #1
    1d96:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    1d98:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    1d9a:	3105      	adds	r1, #5
    1d9c:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    1d9e:	3101      	adds	r1, #1
    1da0:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    1da2:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    1da4:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    1da6:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    1da8:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    1daa:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    1dac:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    1dae:	2313      	movs	r3, #19
    1db0:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    1db2:	7762      	strb	r2, [r4, #29]
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);

	config_usart.baudrate    = SERCOMBAUD;
	config_usart.mux_setting = SERCOMMUX;
    1db4:	2380      	movs	r3, #128	; 0x80
    1db6:	035b      	lsls	r3, r3, #13
    1db8:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = SERCOMPAD0;
    1dba:	4b1e      	ldr	r3, [pc, #120]	; (1e34 <configure_console+0xd0>)
    1dbc:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = SERCOMPAD1;
    1dbe:	4b1e      	ldr	r3, [pc, #120]	; (1e38 <configure_console+0xd4>)
    1dc0:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = SERCOMPAD2;
    1dc2:	2301      	movs	r3, #1
    1dc4:	425b      	negs	r3, r3
    1dc6:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = SERCOMPAD3;
    1dc8:	930f      	str	r3, [sp, #60]	; 0x3c

	while (usart_init(&usart_instance,	 SERCOMMODULE, &config_usart) != STATUS_OK) { }
    1dca:	4d1c      	ldr	r5, [pc, #112]	; (1e3c <configure_console+0xd8>)
    1dcc:	4c1c      	ldr	r4, [pc, #112]	; (1e40 <configure_console+0xdc>)
    1dce:	466a      	mov	r2, sp
    1dd0:	491c      	ldr	r1, [pc, #112]	; (1e44 <configure_console+0xe0>)
    1dd2:	0028      	movs	r0, r5
    1dd4:	47a0      	blx	r4
    1dd6:	2800      	cmp	r0, #0
    1dd8:	d1f9      	bne.n	1dce <configure_console+0x6a>
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    1dda:	4c18      	ldr	r4, [pc, #96]	; (1e3c <configure_console+0xd8>)
    1ddc:	4b1a      	ldr	r3, [pc, #104]	; (1e48 <configure_console+0xe4>)
    1dde:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    1de0:	4a1a      	ldr	r2, [pc, #104]	; (1e4c <configure_console+0xe8>)
    1de2:	4b1b      	ldr	r3, [pc, #108]	; (1e50 <configure_console+0xec>)
    1de4:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    1de6:	4a1b      	ldr	r2, [pc, #108]	; (1e54 <configure_console+0xf0>)
    1de8:	4b1b      	ldr	r3, [pc, #108]	; (1e58 <configure_console+0xf4>)
    1dea:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    1dec:	466a      	mov	r2, sp
    1dee:	4915      	ldr	r1, [pc, #84]	; (1e44 <configure_console+0xe0>)
    1df0:	0020      	movs	r0, r4
    1df2:	4b13      	ldr	r3, [pc, #76]	; (1e40 <configure_console+0xdc>)
    1df4:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    1df6:	4e19      	ldr	r6, [pc, #100]	; (1e5c <configure_console+0xf8>)
    1df8:	6833      	ldr	r3, [r6, #0]
    1dfa:	6898      	ldr	r0, [r3, #8]
    1dfc:	2100      	movs	r1, #0
    1dfe:	4d18      	ldr	r5, [pc, #96]	; (1e60 <configure_console+0xfc>)
    1e00:	47a8      	blx	r5
	setbuf(stdin, NULL);
    1e02:	6833      	ldr	r3, [r6, #0]
    1e04:	6858      	ldr	r0, [r3, #4]
    1e06:	2100      	movs	r1, #0
    1e08:	47a8      	blx	r5
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1e0a:	6825      	ldr	r5, [r4, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1e0c:	0028      	movs	r0, r5
    1e0e:	4b15      	ldr	r3, [pc, #84]	; (1e64 <configure_console+0x100>)
    1e10:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1e12:	231f      	movs	r3, #31
    1e14:	4018      	ands	r0, r3
    1e16:	3b1e      	subs	r3, #30
    1e18:	4083      	lsls	r3, r0
    1e1a:	4a13      	ldr	r2, [pc, #76]	; (1e68 <configure_console+0x104>)
    1e1c:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1e1e:	6822      	ldr	r2, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
    1e20:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1e22:	2b00      	cmp	r3, #0
    1e24:	d1fc      	bne.n	1e20 <configure_console+0xbc>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1e26:	682b      	ldr	r3, [r5, #0]
    1e28:	2202      	movs	r2, #2
    1e2a:	4313      	orrs	r3, r2
    1e2c:	602b      	str	r3, [r5, #0]

	stdio_serial_init(&usart_instance, SERCOMMODULE, &config_usart);
	usart_enable(&usart_instance);
}
    1e2e:	b010      	add	sp, #64	; 0x40
    1e30:	bd70      	pop	{r4, r5, r6, pc}
    1e32:	46c0      	nop			; (mov r8, r8)
    1e34:	00080003 	.word	0x00080003
    1e38:	00090003 	.word	0x00090003
    1e3c:	20000398 	.word	0x20000398
    1e40:	00000e6d 	.word	0x00000e6d
    1e44:	42001000 	.word	0x42001000
    1e48:	20000394 	.word	0x20000394
    1e4c:	00001d4d 	.word	0x00001d4d
    1e50:	20000390 	.word	0x20000390
    1e54:	00001d21 	.word	0x00001d21
    1e58:	2000038c 	.word	0x2000038c
    1e5c:	20000158 	.word	0x20000158
    1e60:	0000341d 	.word	0x0000341d
    1e64:	00000ddd 	.word	0x00000ddd
    1e68:	e000e100 	.word	0xe000e100

00001e6c <drawChar>:
uint16_t xCharPos = 0;
uint16_t yCharPos = 0;


void drawChar(uint8_t character)
{
    1e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e6e:	46d6      	mov	lr, sl
    1e70:	464f      	mov	r7, r9
    1e72:	4646      	mov	r6, r8
    1e74:	b5c0      	push	{r6, r7, lr}
    1e76:	0004      	movs	r4, r0
	uint16_t x = xCharPos;
    1e78:	4b2a      	ldr	r3, [pc, #168]	; (1f24 <drawChar+0xb8>)
    1e7a:	881b      	ldrh	r3, [r3, #0]
	uint16_t y = yCharPos;
    1e7c:	4a2a      	ldr	r2, [pc, #168]	; (1f28 <drawChar+0xbc>)
    1e7e:	8815      	ldrh	r5, [r2, #0]
	
	consoleDisplay[xCharPos][yCharPos] = character;
    1e80:	005a      	lsls	r2, r3, #1
    1e82:	18d2      	adds	r2, r2, r3
    1e84:	00d2      	lsls	r2, r2, #3
    1e86:	4829      	ldr	r0, [pc, #164]	; (1f2c <drawChar+0xc0>)
    1e88:	1882      	adds	r2, r0, r2
    1e8a:	5554      	strb	r4, [r2, r5]
	
	REG_PORT_OUTCLR1 = LCD_CS;
    1e8c:	2180      	movs	r1, #128	; 0x80
    1e8e:	03c9      	lsls	r1, r1, #15
    1e90:	4a27      	ldr	r2, [pc, #156]	; (1f30 <drawChar+0xc4>)
    1e92:	6011      	str	r1, [r2, #0]
	setXY(x*10,y*20,x*10+9,y*20+19);
    1e94:	0098      	lsls	r0, r3, #2
    1e96:	181b      	adds	r3, r3, r0
    1e98:	005b      	lsls	r3, r3, #1
    1e9a:	b298      	uxth	r0, r3
    1e9c:	2114      	movs	r1, #20
    1e9e:	4369      	muls	r1, r5
    1ea0:	b289      	uxth	r1, r1
    1ea2:	000b      	movs	r3, r1
    1ea4:	3313      	adds	r3, #19
    1ea6:	b29b      	uxth	r3, r3
    1ea8:	0002      	movs	r2, r0
    1eaa:	3209      	adds	r2, #9
    1eac:	b292      	uxth	r2, r2
    1eae:	4d21      	ldr	r5, [pc, #132]	; (1f34 <drawChar+0xc8>)
    1eb0:	47a8      	blx	r5
    1eb2:	4a21      	ldr	r2, [pc, #132]	; (1f38 <drawChar+0xcc>)
    1eb4:	00a5      	lsls	r5, r4, #2
    1eb6:	192d      	adds	r5, r5, r4
    1eb8:	00ab      	lsls	r3, r5, #2
    1eba:	18ed      	adds	r5, r5, r3
    1ebc:	1955      	adds	r5, r2, r5
    1ebe:	3401      	adds	r4, #1
    1ec0:	00a3      	lsls	r3, r4, #2
    1ec2:	191c      	adds	r4, r3, r4
    1ec4:	00a3      	lsls	r3, r4, #2
    1ec6:	18e4      	adds	r4, r4, r3
    1ec8:	4692      	mov	sl, r2
    1eca:	44a2      	add	sl, r4
			{
				setPixel((fore_Color_High<<8)|fore_Color_Low);	
			}
			else
			{
				setPixel((back_Color_High<<8)|back_Color_Low);
    1ecc:	4b1b      	ldr	r3, [pc, #108]	; (1f3c <drawChar+0xd0>)
    1ece:	4699      	mov	r9, r3
    1ed0:	4b1b      	ldr	r3, [pc, #108]	; (1f40 <drawChar+0xd4>)
    1ed2:	4698      	mov	r8, r3
    1ed4:	4f1b      	ldr	r7, [pc, #108]	; (1f44 <drawChar+0xd8>)
				setPixel((fore_Color_High<<8)|fore_Color_Low);	
    1ed6:	4e1c      	ldr	r6, [pc, #112]	; (1f48 <drawChar+0xdc>)
    1ed8:	e019      	b.n	1f0e <drawChar+0xa2>
				setPixel((back_Color_High<<8)|back_Color_Low);
    1eda:	464b      	mov	r3, r9
    1edc:	8818      	ldrh	r0, [r3, #0]
    1ede:	0200      	lsls	r0, r0, #8
    1ee0:	4643      	mov	r3, r8
    1ee2:	881b      	ldrh	r3, [r3, #0]
    1ee4:	4318      	orrs	r0, r3
    1ee6:	b280      	uxth	r0, r0
    1ee8:	47b8      	blx	r7
		for(int j=0;j<8;j++)
    1eea:	3c01      	subs	r4, #1
    1eec:	d30c      	bcc.n	1f08 <drawChar+0x9c>
			if((CodePage437[character][i]&(1<<(7-j)))!=0)
    1eee:	782b      	ldrb	r3, [r5, #0]
    1ef0:	4123      	asrs	r3, r4
    1ef2:	07db      	lsls	r3, r3, #31
    1ef4:	d5f1      	bpl.n	1eda <drawChar+0x6e>
				setPixel((fore_Color_High<<8)|fore_Color_Low);	
    1ef6:	8830      	ldrh	r0, [r6, #0]
    1ef8:	0200      	lsls	r0, r0, #8
    1efa:	4b14      	ldr	r3, [pc, #80]	; (1f4c <drawChar+0xe0>)
    1efc:	881b      	ldrh	r3, [r3, #0]
    1efe:	4318      	orrs	r0, r3
    1f00:	b280      	uxth	r0, r0
    1f02:	4b10      	ldr	r3, [pc, #64]	; (1f44 <drawChar+0xd8>)
    1f04:	4798      	blx	r3
    1f06:	e7f0      	b.n	1eea <drawChar+0x7e>
    1f08:	3501      	adds	r5, #1
	for(uint16_t i=0; i <= 24; i++)
    1f0a:	4555      	cmp	r5, sl
    1f0c:	d001      	beq.n	1f12 <drawChar+0xa6>
{
    1f0e:	2407      	movs	r4, #7
    1f10:	e7ed      	b.n	1eee <drawChar+0x82>
			}

		}
	}
	REG_PORT_OUTSET1 = LCD_CS;
    1f12:	2280      	movs	r2, #128	; 0x80
    1f14:	03d2      	lsls	r2, r2, #15
    1f16:	4b0e      	ldr	r3, [pc, #56]	; (1f50 <drawChar+0xe4>)
    1f18:	601a      	str	r2, [r3, #0]

}
    1f1a:	bc1c      	pop	{r2, r3, r4}
    1f1c:	4690      	mov	r8, r2
    1f1e:	4699      	mov	r9, r3
    1f20:	46a2      	mov	sl, r4
    1f22:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f24:	20000298 	.word	0x20000298
    1f28:	2000029a 	.word	0x2000029a
    1f2c:	200003d0 	.word	0x200003d0
    1f30:	41004494 	.word	0x41004494
    1f34:	00002975 	.word	0x00002975
    1f38:	00004a30 	.word	0x00004a30
    1f3c:	20000b56 	.word	0x20000b56
    1f40:	20000b50 	.word	0x20000b50
    1f44:	00002b35 	.word	0x00002b35
    1f48:	20000b52 	.word	0x20000b52
    1f4c:	20000b54 	.word	0x20000b54
    1f50:	41004498 	.word	0x41004498

00001f54 <newLine>:

void newLine(void)
{
    1f54:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f56:	46de      	mov	lr, fp
    1f58:	4657      	mov	r7, sl
    1f5a:	464e      	mov	r6, r9
    1f5c:	4645      	mov	r5, r8
    1f5e:	b5e0      	push	{r5, r6, r7, lr}
    1f60:	4c55      	ldr	r4, [pc, #340]	; (20b8 <STACK_SIZE+0xb8>)
    1f62:	44a5      	add	sp, r4
    1f64:	4855      	ldr	r0, [pc, #340]	; (20bc <STACK_SIZE+0xbc>)
    1f66:	23f0      	movs	r3, #240	; 0xf0
    1f68:	00db      	lsls	r3, r3, #3
    1f6a:	18c4      	adds	r4, r0, r3
    1f6c:	e002      	b.n	1f74 <newLine+0x20>
    1f6e:	3018      	adds	r0, #24
	/*
	This is split into two parts; the first moves consoledisplay around
	so the first line is deleted and all other lines are moved up one line
	*/
	
	for(int i = 0 ; i < 80 ; i++)
    1f70:	42a0      	cmp	r0, r4
    1f72:	d008      	beq.n	1f86 <newLine+0x32>
    1f74:	0001      	movs	r1, r0
    1f76:	3117      	adds	r1, #23
{
    1f78:	0003      	movs	r3, r0
	{
		for(int j = 1 ; j < 24 ; j++)
		{
			consoleDisplay[i][j-1] = consoleDisplay[i][j];
    1f7a:	785a      	ldrb	r2, [r3, #1]
    1f7c:	701a      	strb	r2, [r3, #0]
    1f7e:	3301      	adds	r3, #1
		for(int j = 1 ; j < 24 ; j++)
    1f80:	428b      	cmp	r3, r1
    1f82:	d1fa      	bne.n	1f7a <newLine+0x26>
    1f84:	e7f3      	b.n	1f6e <newLine+0x1a>
    1f86:	4b4e      	ldr	r3, [pc, #312]	; (20c0 <STACK_SIZE+0xc0>)
    1f88:	0019      	movs	r1, r3
    1f8a:	3150      	adds	r1, #80	; 0x50
		}
	}
	
	for(int k = 0 ; k < 80 ; k ++)
	{
		consoleDisplay[23][k] = 0x00;
    1f8c:	2200      	movs	r2, #0
    1f8e:	701a      	strb	r2, [r3, #0]
    1f90:	3301      	adds	r3, #1
	for(int k = 0 ; k < 80 ; k ++)
    1f92:	428b      	cmp	r3, r1
    1f94:	d1fb      	bne.n	1f8e <newLine+0x3a>
    1f96:	2300      	movs	r3, #0
    1f98:	9300      	str	r3, [sp, #0]
			
	for(uint16_t row = 0 ; row < 460 ; row++)
	{
		//Per page 40 of datasheet (5.1.2.7, 16-bit
		//parallel interface for data ram read.
		REG_PORT_OUTCLR1 = LCD_CS;
    1f9a:	4b4a      	ldr	r3, [pc, #296]	; (20c4 <STACK_SIZE+0xc4>)
    1f9c:	4698      	mov	r8, r3
		setXY(0, row+20, 799, row+20);
		//Send'Memory read' command 0x2E00, no data bit
		LCD_Write_COM16(0x2E,0x00);
		REG_PORT_OUTSET1 = LCD_DC;
    1f9e:	4f4a      	ldr	r7, [pc, #296]	; (20c8 <STACK_SIZE+0xc8>)
		
		
		//Read pixel data into the display	
		for(uint16_t getpixel = 0 ; getpixel < 800 ; getpixel++)
		{
			REG_PORT_OUTCLR1 = LCD_RD;
    1fa0:	2680      	movs	r6, #128	; 0x80
    1fa2:	0276      	lsls	r6, r6, #9
    1fa4:	e046      	b.n	2034 <STACK_SIZE+0x34>
			//This can be expanded with else if for the MSBs
			//of all the colors; see datasheet page 40.
			if((PORT->Group[1].IN.reg & PORT_PB07) != 0)
				rowPixel[getpixel] = 0xFF;
			else
				rowPixel[getpixel] = 0x00;
    1fa6:	4653      	mov	r3, sl
    1fa8:	7023      	strb	r3, [r4, #0]
			//dummy read, because pixel data broken up
			//per datasheet page 40. Everything after
			//the dummy write is BLUE pixels. Do we ever
			//need blue? IDK.
			
			REG_PORT_OUTCLR1 = LCD_RD;
    1faa:	4643      	mov	r3, r8
    1fac:	601e      	str	r6, [r3, #0]
			REG_PORT_OUTSET1 = LCD_RD;
    1fae:	603e      	str	r6, [r7, #0]
    1fb0:	3401      	adds	r4, #1
		for(uint16_t getpixel = 0 ; getpixel < 800 ; getpixel++)
    1fb2:	4564      	cmp	r4, ip
    1fb4:	d008      	beq.n	1fc8 <newLine+0x74>
			REG_PORT_OUTCLR1 = LCD_RD;
    1fb6:	4643      	mov	r3, r8
    1fb8:	601e      	str	r6, [r3, #0]
			REG_PORT_OUTSET1 = LCD_RD;
    1fba:	603e      	str	r6, [r7, #0]
			if((PORT->Group[1].IN.reg & PORT_PB07) != 0)
    1fbc:	5843      	ldr	r3, [r0, r1]
    1fbe:	421a      	tst	r2, r3
    1fc0:	d0f1      	beq.n	1fa6 <newLine+0x52>
				rowPixel[getpixel] = 0xFF;
    1fc2:	464b      	mov	r3, r9
    1fc4:	7023      	strb	r3, [r4, #0]
    1fc6:	e7f0      	b.n	1faa <newLine+0x56>
    1fc8:	9401      	str	r4, [sp, #4]
		}
		
		REG_PORT_OUTSET1 = LCD_DC;
    1fca:	2380      	movs	r3, #128	; 0x80
    1fcc:	041b      	lsls	r3, r3, #16
    1fce:	603b      	str	r3, [r7, #0]
		REG_PORT_DIRSET1 = 0x0000FFFF;
    1fd0:	4a3e      	ldr	r2, [pc, #248]	; (20cc <STACK_SIZE+0xcc>)
    1fd2:	4b3f      	ldr	r3, [pc, #252]	; (20d0 <STACK_SIZE+0xd0>)
    1fd4:	601a      	str	r2, [r3, #0]
		
		//now, read out that line of the display
		setXY(0, row, 799, row);	
    1fd6:	9900      	ldr	r1, [sp, #0]
    1fd8:	000b      	movs	r3, r1
    1fda:	4a3e      	ldr	r2, [pc, #248]	; (20d4 <STACK_SIZE+0xd4>)
    1fdc:	2000      	movs	r0, #0
    1fde:	4c3e      	ldr	r4, [pc, #248]	; (20d8 <STACK_SIZE+0xd8>)
    1fe0:	47a0      	blx	r4
		for(uint16_t writepixel = 0 ; writepixel < 800 ; writepixel++)
		{
			if((rowPixel[writepixel] == 0xFF))
				setPixel((fore_Color_High<<8)|fore_Color_Low);
			else
				setPixel((back_Color_High<<8)|back_Color_Low);
    1fe2:	4b3e      	ldr	r3, [pc, #248]	; (20dc <STACK_SIZE+0xdc>)
    1fe4:	469b      	mov	fp, r3
    1fe6:	4b3e      	ldr	r3, [pc, #248]	; (20e0 <STACK_SIZE+0xe0>)
    1fe8:	469a      	mov	sl, r3
    1fea:	4b3e      	ldr	r3, [pc, #248]	; (20e4 <STACK_SIZE+0xe4>)
    1fec:	4699      	mov	r9, r3
    1fee:	9c01      	ldr	r4, [sp, #4]
    1ff0:	e00b      	b.n	200a <STACK_SIZE+0xa>
				setPixel((fore_Color_High<<8)|fore_Color_Low);
    1ff2:	4b3d      	ldr	r3, [pc, #244]	; (20e8 <STACK_SIZE+0xe8>)
    1ff4:	8818      	ldrh	r0, [r3, #0]
    1ff6:	0200      	lsls	r0, r0, #8
    1ff8:	4b3c      	ldr	r3, [pc, #240]	; (20ec <STACK_SIZE+0xec>)
    1ffa:	881b      	ldrh	r3, [r3, #0]
    1ffc:	4318      	orrs	r0, r3
    1ffe:	b280      	uxth	r0, r0
    2000:	4b38      	ldr	r3, [pc, #224]	; (20e4 <STACK_SIZE+0xe4>)
    2002:	4798      	blx	r3
    2004:	3501      	adds	r5, #1
		for(uint16_t writepixel = 0 ; writepixel < 800 ; writepixel++)
    2006:	42a5      	cmp	r5, r4
    2008:	d00b      	beq.n	2022 <STACK_SIZE+0x22>
			if((rowPixel[writepixel] == 0xFF))
    200a:	782b      	ldrb	r3, [r5, #0]
    200c:	2bff      	cmp	r3, #255	; 0xff
    200e:	d0f0      	beq.n	1ff2 <newLine+0x9e>
				setPixel((back_Color_High<<8)|back_Color_Low);
    2010:	465b      	mov	r3, fp
    2012:	8818      	ldrh	r0, [r3, #0]
    2014:	0200      	lsls	r0, r0, #8
    2016:	4653      	mov	r3, sl
    2018:	881b      	ldrh	r3, [r3, #0]
    201a:	4318      	orrs	r0, r3
    201c:	b280      	uxth	r0, r0
    201e:	47c8      	blx	r9
    2020:	e7f0      	b.n	2004 <STACK_SIZE+0x4>
	for(uint16_t row = 0 ; row < 460 ; row++)
    2022:	9b00      	ldr	r3, [sp, #0]
    2024:	3301      	adds	r3, #1
    2026:	b29b      	uxth	r3, r3
    2028:	001a      	movs	r2, r3
    202a:	9300      	str	r3, [sp, #0]
    202c:	23e6      	movs	r3, #230	; 0xe6
    202e:	005b      	lsls	r3, r3, #1
    2030:	429a      	cmp	r2, r3
    2032:	d031      	beq.n	2098 <STACK_SIZE+0x98>
		REG_PORT_OUTCLR1 = LCD_CS;
    2034:	4643      	mov	r3, r8
    2036:	2280      	movs	r2, #128	; 0x80
    2038:	03d2      	lsls	r2, r2, #15
    203a:	601a      	str	r2, [r3, #0]
		setXY(0, row+20, 799, row+20);
    203c:	9900      	ldr	r1, [sp, #0]
    203e:	3114      	adds	r1, #20
    2040:	b289      	uxth	r1, r1
    2042:	000b      	movs	r3, r1
    2044:	4a23      	ldr	r2, [pc, #140]	; (20d4 <STACK_SIZE+0xd4>)
    2046:	2000      	movs	r0, #0
    2048:	4c23      	ldr	r4, [pc, #140]	; (20d8 <STACK_SIZE+0xd8>)
    204a:	47a0      	blx	r4
		LCD_Write_COM16(0x2E,0x00);
    204c:	2100      	movs	r1, #0
    204e:	202e      	movs	r0, #46	; 0x2e
    2050:	4b27      	ldr	r3, [pc, #156]	; (20f0 <STACK_SIZE+0xf0>)
    2052:	4798      	blx	r3
		REG_PORT_OUTSET1 = LCD_DC;
    2054:	2380      	movs	r3, #128	; 0x80
    2056:	041b      	lsls	r3, r3, #16
    2058:	603b      	str	r3, [r7, #0]
		REG_PORT_OUTCLR1 = LCD_RD;
    205a:	4643      	mov	r3, r8
    205c:	2280      	movs	r2, #128	; 0x80
    205e:	0252      	lsls	r2, r2, #9
    2060:	601a      	str	r2, [r3, #0]
		REG_PORT_OUTSET1 = LCD_RD;
    2062:	603a      	str	r2, [r7, #0]
		REG_PORT_DIRCLR1 = PORT_PB07;
    2064:	2280      	movs	r2, #128	; 0x80
    2066:	4b23      	ldr	r3, [pc, #140]	; (20f4 <STACK_SIZE+0xf4>)
    2068:	601a      	str	r2, [r3, #0]
		PORT->Group[1].PINCFG[7].bit.INEN = 1;
    206a:	4a23      	ldr	r2, [pc, #140]	; (20f8 <STACK_SIZE+0xf8>)
    206c:	23c7      	movs	r3, #199	; 0xc7
    206e:	5cd1      	ldrb	r1, [r2, r3]
    2070:	2002      	movs	r0, #2
    2072:	4301      	orrs	r1, r0
    2074:	54d1      	strb	r1, [r2, r3]
		PORT->Group[1].PINCFG[7].bit.PULLEN = 1;
    2076:	5cd1      	ldrb	r1, [r2, r3]
    2078:	2004      	movs	r0, #4
    207a:	4301      	orrs	r1, r0
    207c:	54d1      	strb	r1, [r2, r3]
    207e:	ad02      	add	r5, sp, #8
    2080:	abca      	add	r3, sp, #808	; 0x328
    2082:	469c      	mov	ip, r3
    2084:	9501      	str	r5, [sp, #4]
			if((PORT->Group[1].IN.reg & PORT_PB07) != 0)
    2086:	0010      	movs	r0, r2
    2088:	21a0      	movs	r1, #160	; 0xa0
    208a:	2280      	movs	r2, #128	; 0x80
				rowPixel[getpixel] = 0x00;
    208c:	2300      	movs	r3, #0
    208e:	469a      	mov	sl, r3
				rowPixel[getpixel] = 0xFF;
    2090:	33ff      	adds	r3, #255	; 0xff
    2092:	4699      	mov	r9, r3
    2094:	002c      	movs	r4, r5
    2096:	e78e      	b.n	1fb6 <newLine+0x62>
		}
	}
	
	//clear the last character line of the display
	//and fix the console text buffer
	fillRectBackColor(0, 460, 799, 480);
    2098:	3314      	adds	r3, #20
    209a:	4a0e      	ldr	r2, [pc, #56]	; (20d4 <STACK_SIZE+0xd4>)
    209c:	21e6      	movs	r1, #230	; 0xe6
    209e:	0049      	lsls	r1, r1, #1
    20a0:	2000      	movs	r0, #0
    20a2:	4c16      	ldr	r4, [pc, #88]	; (20fc <STACK_SIZE+0xfc>)
    20a4:	47a0      	blx	r4
	
	
	
}
    20a6:	23cb      	movs	r3, #203	; 0xcb
    20a8:	009b      	lsls	r3, r3, #2
    20aa:	449d      	add	sp, r3
    20ac:	bc3c      	pop	{r2, r3, r4, r5}
    20ae:	4690      	mov	r8, r2
    20b0:	4699      	mov	r9, r3
    20b2:	46a2      	mov	sl, r4
    20b4:	46ab      	mov	fp, r5
    20b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    20b8:	fffffcd4 	.word	0xfffffcd4
    20bc:	200003d0 	.word	0x200003d0
    20c0:	200005f8 	.word	0x200005f8
    20c4:	41004494 	.word	0x41004494
    20c8:	41004498 	.word	0x41004498
    20cc:	0000ffff 	.word	0x0000ffff
    20d0:	41004488 	.word	0x41004488
    20d4:	0000031f 	.word	0x0000031f
    20d8:	00002975 	.word	0x00002975
    20dc:	20000b56 	.word	0x20000b56
    20e0:	20000b50 	.word	0x20000b50
    20e4:	00002b35 	.word	0x00002b35
    20e8:	20000b52 	.word	0x20000b52
    20ec:	20000b54 	.word	0x20000b54
    20f0:	00002ba1 	.word	0x00002ba1
    20f4:	41004484 	.word	0x41004484
    20f8:	41004400 	.word	0x41004400
    20fc:	00002a75 	.word	0x00002a75

00002100 <writeString>:

void writeString(const char str[])
{
    2100:	b5f0      	push	{r4, r5, r6, r7, lr}
    2102:	46c6      	mov	lr, r8
    2104:	b500      	push	{lr}
    2106:	0005      	movs	r5, r0
	int length = strlen(str);
    2108:	4b0c      	ldr	r3, [pc, #48]	; (213c <writeString+0x3c>)
    210a:	4798      	blx	r3
	for(int i = 0; i < length; i++)
    210c:	2800      	cmp	r0, #0
    210e:	dd11      	ble.n	2134 <writeString+0x34>
    2110:	002c      	movs	r4, r5
    2112:	182d      	adds	r5, r5, r0
	{
		drawChar(str[i]);
    2114:	4f0a      	ldr	r7, [pc, #40]	; (2140 <writeString+0x40>)
		if(xCharPos <= 80)
    2116:	4e0b      	ldr	r6, [pc, #44]	; (2144 <writeString+0x44>)
		xCharPos++;
    2118:	46b0      	mov	r8, r6
    211a:	e002      	b.n	2122 <writeString+0x22>
    211c:	3401      	adds	r4, #1
	for(int i = 0; i < length; i++)
    211e:	42ac      	cmp	r4, r5
    2120:	d008      	beq.n	2134 <writeString+0x34>
		drawChar(str[i]);
    2122:	7820      	ldrb	r0, [r4, #0]
    2124:	47b8      	blx	r7
		if(xCharPos <= 80)
    2126:	8833      	ldrh	r3, [r6, #0]
    2128:	2b50      	cmp	r3, #80	; 0x50
    212a:	d8f7      	bhi.n	211c <writeString+0x1c>
		xCharPos++;
    212c:	3301      	adds	r3, #1
    212e:	4642      	mov	r2, r8
    2130:	8013      	strh	r3, [r2, #0]
    2132:	e7f3      	b.n	211c <writeString+0x1c>
	}
}
    2134:	bc04      	pop	{r2}
    2136:	4690      	mov	r8, r2
    2138:	bdf0      	pop	{r4, r5, r6, r7, pc}
    213a:	46c0      	nop			; (mov r8, r8)
    213c:	00003589 	.word	0x00003589
    2140:	00001e6d 	.word	0x00001e6d
    2144:	20000298 	.word	0x20000298

00002148 <scanCodesContains>:

bool scanCodesContains(int scanCode)
{
	for(int i = 0 ; i < 70 ; i++)
	{
		if(scanCodes[i] == scanCode)
    2148:	4b09      	ldr	r3, [pc, #36]	; (2170 <scanCodesContains+0x28>)
    214a:	681b      	ldr	r3, [r3, #0]
    214c:	4298      	cmp	r0, r3
    214e:	d00b      	beq.n	2168 <scanCodesContains+0x20>
    2150:	4a07      	ldr	r2, [pc, #28]	; (2170 <scanCodesContains+0x28>)
    2152:	1d13      	adds	r3, r2, #4
    2154:	3219      	adds	r2, #25
    2156:	32ff      	adds	r2, #255	; 0xff
    2158:	6819      	ldr	r1, [r3, #0]
    215a:	4281      	cmp	r1, r0
    215c:	d006      	beq.n	216c <scanCodesContains+0x24>
    215e:	3304      	adds	r3, #4
	for(int i = 0 ; i < 70 ; i++)
    2160:	4293      	cmp	r3, r2
    2162:	d1f9      	bne.n	2158 <scanCodesContains+0x10>
		{
			return true;
		}
	}
	return false;
    2164:	2000      	movs	r0, #0
    2166:	e002      	b.n	216e <scanCodesContains+0x26>
			return true;
    2168:	2001      	movs	r0, #1
    216a:	e000      	b.n	216e <scanCodesContains+0x26>
    216c:	2001      	movs	r0, #1
}
    216e:	4770      	bx	lr
    2170:	2000003c 	.word	0x2000003c

00002174 <keyDown>:

bool keyDown(int scancode)
{
	for(int i = 0 ; i < 20 ; i++)
	{
		if(keyDownBuffer[i] == scancode)
    2174:	4b09      	ldr	r3, [pc, #36]	; (219c <keyDown+0x28>)
    2176:	781b      	ldrb	r3, [r3, #0]
    2178:	4298      	cmp	r0, r3
    217a:	d00a      	beq.n	2192 <keyDown+0x1e>
    217c:	4907      	ldr	r1, [pc, #28]	; (219c <keyDown+0x28>)
    217e:	1c4b      	adds	r3, r1, #1
    2180:	3114      	adds	r1, #20
    2182:	781a      	ldrb	r2, [r3, #0]
    2184:	4282      	cmp	r2, r0
    2186:	d006      	beq.n	2196 <keyDown+0x22>
    2188:	3301      	adds	r3, #1
	for(int i = 0 ; i < 20 ; i++)
    218a:	428b      	cmp	r3, r1
    218c:	d1f9      	bne.n	2182 <keyDown+0xe>
		{
			return true;
		}	
	}
	return false;
    218e:	2000      	movs	r0, #0
}
    2190:	4770      	bx	lr
			return true;
    2192:	2001      	movs	r0, #1
    2194:	e7fc      	b.n	2190 <keyDown+0x1c>
    2196:	2001      	movs	r0, #1
    2198:	e7fa      	b.n	2190 <keyDown+0x1c>
    219a:	46c0      	nop			; (mov r8, r8)
    219c:	20000014 	.word	0x20000014

000021a0 <removeFromKeyDown>:

void removeFromKeyDown(int scancode)
{
    21a0:	b510      	push	{r4, lr}
    21a2:	4b07      	ldr	r3, [pc, #28]	; (21c0 <removeFromKeyDown+0x20>)
    21a4:	0019      	movs	r1, r3
    21a6:	3114      	adds	r1, #20
	for(int i = 0 ; i < 20 ; i++)
	{
		if(keyDownBuffer[i] == scancode)
		{
			keyDownBuffer[i] = 0xFF;
    21a8:	24ff      	movs	r4, #255	; 0xff
    21aa:	e002      	b.n	21b2 <removeFromKeyDown+0x12>
    21ac:	3301      	adds	r3, #1
	for(int i = 0 ; i < 20 ; i++)
    21ae:	428b      	cmp	r3, r1
    21b0:	d004      	beq.n	21bc <removeFromKeyDown+0x1c>
		if(keyDownBuffer[i] == scancode)
    21b2:	781a      	ldrb	r2, [r3, #0]
    21b4:	4282      	cmp	r2, r0
    21b6:	d1f9      	bne.n	21ac <removeFromKeyDown+0xc>
			keyDownBuffer[i] = 0xFF;
    21b8:	701c      	strb	r4, [r3, #0]
    21ba:	e7f7      	b.n	21ac <removeFromKeyDown+0xc>
		}
	}
}
    21bc:	bd10      	pop	{r4, pc}
    21be:	46c0      	nop			; (mov r8, r8)
    21c0:	20000014 	.word	0x20000014

000021c4 <readKeyboard>:
{
    21c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    21c6:	46de      	mov	lr, fp
    21c8:	4657      	mov	r7, sl
    21ca:	464e      	mov	r6, r9
    21cc:	4645      	mov	r5, r8
    21ce:	b5e0      	push	{r5, r6, r7, lr}
    21d0:	b083      	sub	sp, #12
    21d2:	4e6d      	ldr	r6, [pc, #436]	; (2388 <readKeyboard+0x1c4>)
    21d4:	0031      	movs	r1, r6
    21d6:	3119      	adds	r1, #25
    21d8:	31ff      	adds	r1, #255	; 0xff
    21da:	0033      	movs	r3, r6
		scanCodes[i] = 0xFF;
    21dc:	22ff      	movs	r2, #255	; 0xff
    21de:	c304      	stmia	r3!, {r2}
	for(i = 0 ; i < 70 ; i++)
    21e0:	428b      	cmp	r3, r1
    21e2:	d1fc      	bne.n	21de <readKeyboard+0x1a>
	PORT->Group[0].WRCONFIG.bit.DRVSTR = 1;
    21e4:	4a69      	ldr	r2, [pc, #420]	; (238c <readKeyboard+0x1c8>)
    21e6:	6a91      	ldr	r1, [r2, #40]	; 0x28
    21e8:	2380      	movs	r3, #128	; 0x80
    21ea:	03db      	lsls	r3, r3, #15
    21ec:	430b      	orrs	r3, r1
    21ee:	6293      	str	r3, [r2, #40]	; 0x28
    21f0:	4c67      	ldr	r4, [pc, #412]	; (2390 <readKeyboard+0x1cc>)
    21f2:	341c      	adds	r4, #28
    21f4:	4b66      	ldr	r3, [pc, #408]	; (2390 <readKeyboard+0x1cc>)
		REG_PORT_DIRSET0 = kb_col[i];
    21f6:	4867      	ldr	r0, [pc, #412]	; (2394 <readKeyboard+0x1d0>)
		REG_PORT_OUTCLR0 = kb_col[i];
    21f8:	4967      	ldr	r1, [pc, #412]	; (2398 <readKeyboard+0x1d4>)
		REG_PORT_DIRSET0 = kb_col[i];
    21fa:	681a      	ldr	r2, [r3, #0]
    21fc:	6002      	str	r2, [r0, #0]
		REG_PORT_OUTCLR0 = kb_col[i];
    21fe:	cb04      	ldmia	r3!, {r2}
    2200:	600a      	str	r2, [r1, #0]
	for (i = 0; i < NUM_COL; i++) {
    2202:	42a3      	cmp	r3, r4
    2204:	d1f9      	bne.n	21fa <readKeyboard+0x36>
    2206:	2200      	movs	r2, #0
		REG_PORT_DIRCLR0 = kb_row[i];
    2208:	4b64      	ldr	r3, [pc, #400]	; (239c <readKeyboard+0x1d8>)
    220a:	469c      	mov	ip, r3
    220c:	4f64      	ldr	r7, [pc, #400]	; (23a0 <readKeyboard+0x1dc>)
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.PULLEN = 1;
    220e:	4d65      	ldr	r5, [pc, #404]	; (23a4 <readKeyboard+0x1e0>)
    2210:	2404      	movs	r4, #4
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.INEN = 1;
    2212:	2002      	movs	r0, #2
		REG_PORT_DIRCLR0 = kb_row[i];
    2214:	4663      	mov	r3, ip
    2216:	58d3      	ldr	r3, [r2, r3]
    2218:	603b      	str	r3, [r7, #0]
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.PULLEN = 1;
    221a:	5953      	ldr	r3, [r2, r5]
    221c:	4962      	ldr	r1, [pc, #392]	; (23a8 <readKeyboard+0x1e4>)
    221e:	4688      	mov	r8, r1
    2220:	4443      	add	r3, r8
    2222:	7819      	ldrb	r1, [r3, #0]
    2224:	4321      	orrs	r1, r4
    2226:	7019      	strb	r1, [r3, #0]
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.INEN = 1;
    2228:	7819      	ldrb	r1, [r3, #0]
    222a:	4301      	orrs	r1, r0
    222c:	7019      	strb	r1, [r3, #0]
    222e:	3204      	adds	r2, #4
	for (i = 0; i < NUM_ROW; i++) {
    2230:	2a28      	cmp	r2, #40	; 0x28
    2232:	d1ef      	bne.n	2214 <readKeyboard+0x50>
    2234:	4b56      	ldr	r3, [pc, #344]	; (2390 <readKeyboard+0x1cc>)
    2236:	4699      	mov	r9, r3
    2238:	2300      	movs	r3, #0
    223a:	4698      	mov	r8, r3
    223c:	2200      	movs	r2, #0
		REG_PORT_OUTSET0 = kb_col[i];
    223e:	4b5b      	ldr	r3, [pc, #364]	; (23ac <readKeyboard+0x1e8>)
    2240:	469b      	mov	fp, r3
			if((PORT->Group[0].IN.reg & kb_row[j]) != 0) {
    2242:	4d52      	ldr	r5, [pc, #328]	; (238c <readKeyboard+0x1c8>)
				scanCodes[scanCodeIndex] = (i * NUM_ROW) + j;
    2244:	4b50      	ldr	r3, [pc, #320]	; (2388 <readKeyboard+0x1c4>)
    2246:	469c      	mov	ip, r3
		REG_PORT_OUTCLR0 = kb_col[i];
    2248:	4b53      	ldr	r3, [pc, #332]	; (2398 <readKeyboard+0x1d4>)
    224a:	469a      	mov	sl, r3
    224c:	9601      	str	r6, [sp, #4]
    224e:	464e      	mov	r6, r9
    2250:	4647      	mov	r7, r8
    2252:	e015      	b.n	2280 <readKeyboard+0xbc>
    2254:	3304      	adds	r3, #4
    2256:	3101      	adds	r1, #1
		for (j = 0; j < NUM_ROW; j++) {	
    2258:	42a3      	cmp	r3, r4
    225a:	d008      	beq.n	226e <readKeyboard+0xaa>
			if((PORT->Group[0].IN.reg & kb_row[j]) != 0) {
    225c:	6a28      	ldr	r0, [r5, #32]
    225e:	681e      	ldr	r6, [r3, #0]
    2260:	4206      	tst	r6, r0
    2262:	d0f7      	beq.n	2254 <readKeyboard+0x90>
				scanCodes[scanCodeIndex] = (i * NUM_ROW) + j;
    2264:	0090      	lsls	r0, r2, #2
    2266:	4666      	mov	r6, ip
    2268:	5181      	str	r1, [r0, r6]
				scanCodeIndex++;
    226a:	3201      	adds	r2, #1
    226c:	e7f2      	b.n	2254 <readKeyboard+0x90>
    226e:	9e00      	ldr	r6, [sp, #0]
		REG_PORT_OUTCLR0 = kb_col[i];
    2270:	4649      	mov	r1, r9
    2272:	6809      	ldr	r1, [r1, #0]
    2274:	4650      	mov	r0, sl
    2276:	6001      	str	r1, [r0, #0]
    2278:	3604      	adds	r6, #4
    227a:	370a      	adds	r7, #10
	for (i = 0; i < NUM_COL; i++) {
    227c:	2f46      	cmp	r7, #70	; 0x46
    227e:	d00a      	beq.n	2296 <readKeyboard+0xd2>
    2280:	46b1      	mov	r9, r6
		REG_PORT_OUTSET0 = kb_col[i];
    2282:	465b      	mov	r3, fp
    2284:	6831      	ldr	r1, [r6, #0]
    2286:	6019      	str	r1, [r3, #0]
    2288:	4b44      	ldr	r3, [pc, #272]	; (239c <readKeyboard+0x1d8>)
    228a:	4698      	mov	r8, r3
    228c:	001c      	movs	r4, r3
    228e:	3428      	adds	r4, #40	; 0x28
    2290:	0039      	movs	r1, r7
    2292:	9600      	str	r6, [sp, #0]
    2294:	e7e2      	b.n	225c <readKeyboard+0x98>
    2296:	4647      	mov	r7, r8
    2298:	9e01      	ldr	r6, [sp, #4]
    229a:	4641      	mov	r1, r8
		REG_PORT_DIRSET0 = kb_row[i];
    229c:	4d3d      	ldr	r5, [pc, #244]	; (2394 <readKeyboard+0x1d0>)
		REG_PORT_OUTCLR0 = kb_row[i];
    229e:	4c3e      	ldr	r4, [pc, #248]	; (2398 <readKeyboard+0x1d4>)
		REG_PORT_DIRSET0 = kb_row[i];
    22a0:	6808      	ldr	r0, [r1, #0]
    22a2:	6028      	str	r0, [r5, #0]
		REG_PORT_OUTCLR0 = kb_row[i];
    22a4:	c901      	ldmia	r1!, {r0}
    22a6:	6020      	str	r0, [r4, #0]
	for (i = 0; i < NUM_ROW; i++) {
    22a8:	4299      	cmp	r1, r3
    22aa:	d1f9      	bne.n	22a0 <readKeyboard+0xdc>
    22ac:	2100      	movs	r1, #0
		REG_PORT_DIRCLR0 = kb_col[i];
    22ae:	4b38      	ldr	r3, [pc, #224]	; (2390 <readKeyboard+0x1cc>)
    22b0:	4699      	mov	r9, r3
    22b2:	4b3b      	ldr	r3, [pc, #236]	; (23a0 <readKeyboard+0x1dc>)
    22b4:	4698      	mov	r8, r3
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.PULLEN = 1;
    22b6:	4b3e      	ldr	r3, [pc, #248]	; (23b0 <readKeyboard+0x1ec>)
    22b8:	469c      	mov	ip, r3
    22ba:	2504      	movs	r5, #4
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.INEN = 1;
    22bc:	2402      	movs	r4, #2
		REG_PORT_DIRCLR0 = kb_col[i];
    22be:	4643      	mov	r3, r8
    22c0:	4648      	mov	r0, r9
    22c2:	5808      	ldr	r0, [r1, r0]
    22c4:	6018      	str	r0, [r3, #0]
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.PULLEN = 1;
    22c6:	4663      	mov	r3, ip
    22c8:	58cb      	ldr	r3, [r1, r3]
    22ca:	4837      	ldr	r0, [pc, #220]	; (23a8 <readKeyboard+0x1e4>)
    22cc:	4682      	mov	sl, r0
    22ce:	4453      	add	r3, sl
    22d0:	7818      	ldrb	r0, [r3, #0]
    22d2:	4328      	orrs	r0, r5
    22d4:	7018      	strb	r0, [r3, #0]
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.INEN = 1;
    22d6:	7818      	ldrb	r0, [r3, #0]
    22d8:	4320      	orrs	r0, r4
    22da:	7018      	strb	r0, [r3, #0]
    22dc:	3104      	adds	r1, #4
	for (i = 0; i < NUM_COL; i++) {
    22de:	291c      	cmp	r1, #28
    22e0:	d1ed      	bne.n	22be <readKeyboard+0xfa>
    22e2:	2300      	movs	r3, #0
    22e4:	469c      	mov	ip, r3
		REG_PORT_OUTSET0 = kb_row[i];
    22e6:	4b31      	ldr	r3, [pc, #196]	; (23ac <readKeyboard+0x1e8>)
    22e8:	469b      	mov	fp, r3
			if((PORT->Group[0].IN.reg & kb_col[j]) != 0)
    22ea:	4d28      	ldr	r5, [pc, #160]	; (238c <readKeyboard+0x1c8>)
				scanCodes[scanCodeIndex] = (j * NUM_ROW) + i;
    22ec:	4b26      	ldr	r3, [pc, #152]	; (2388 <readKeyboard+0x1c4>)
    22ee:	4698      	mov	r8, r3
		REG_PORT_OUTCLR0 = kb_row[i];
    22f0:	4b29      	ldr	r3, [pc, #164]	; (2398 <readKeyboard+0x1d4>)
    22f2:	469a      	mov	sl, r3
    22f4:	46b1      	mov	r9, r6
    22f6:	003e      	movs	r6, r7
    22f8:	4667      	mov	r7, ip
    22fa:	e015      	b.n	2328 <readKeyboard+0x164>
    22fc:	3104      	adds	r1, #4
    22fe:	330a      	adds	r3, #10
		for (j = 0; j < NUM_COL; j++) {
    2300:	42a3      	cmp	r3, r4
    2302:	d008      	beq.n	2316 <readKeyboard+0x152>
			if((PORT->Group[0].IN.reg & kb_col[j]) != 0)
    2304:	6a28      	ldr	r0, [r5, #32]
    2306:	680e      	ldr	r6, [r1, #0]
    2308:	4206      	tst	r6, r0
    230a:	d0f7      	beq.n	22fc <readKeyboard+0x138>
				scanCodes[scanCodeIndex] = (j * NUM_ROW) + i;
    230c:	0090      	lsls	r0, r2, #2
    230e:	4646      	mov	r6, r8
    2310:	5183      	str	r3, [r0, r6]
				scanCodeIndex++;
    2312:	3201      	adds	r2, #1
    2314:	e7f2      	b.n	22fc <readKeyboard+0x138>
    2316:	9e00      	ldr	r6, [sp, #0]
		REG_PORT_OUTCLR0 = kb_row[i];
    2318:	4663      	mov	r3, ip
    231a:	681b      	ldr	r3, [r3, #0]
    231c:	4651      	mov	r1, sl
    231e:	600b      	str	r3, [r1, #0]
	for (i = 0; i < NUM_ROW; i++) {
    2320:	3701      	adds	r7, #1
    2322:	3604      	adds	r6, #4
    2324:	2f0a      	cmp	r7, #10
    2326:	d009      	beq.n	233c <readKeyboard+0x178>
    2328:	46b4      	mov	ip, r6
		REG_PORT_OUTSET0 = kb_row[i];
    232a:	465b      	mov	r3, fp
    232c:	6831      	ldr	r1, [r6, #0]
    232e:	6019      	str	r1, [r3, #0]
    2330:	003b      	movs	r3, r7
    2332:	003c      	movs	r4, r7
    2334:	3446      	adds	r4, #70	; 0x46
    2336:	4916      	ldr	r1, [pc, #88]	; (2390 <readKeyboard+0x1cc>)
    2338:	9600      	str	r6, [sp, #0]
    233a:	e7e3      	b.n	2304 <readKeyboard+0x140>
    233c:	464e      	mov	r6, r9
	for(i = 0 ; i < scanCodeIndex ; i++)
    233e:	2a00      	cmp	r2, #0
    2340:	dd08      	ble.n	2354 <readKeyboard+0x190>
    2342:	4b1c      	ldr	r3, [pc, #112]	; (23b4 <readKeyboard+0x1f0>)
    2344:	0092      	lsls	r2, r2, #2
    2346:	4910      	ldr	r1, [pc, #64]	; (2388 <readKeyboard+0x1c4>)
    2348:	188a      	adds	r2, r1, r2
		scanCodeBuffer[i] = scanCodes[i];	
    234a:	ce02      	ldmia	r6!, {r1}
    234c:	7019      	strb	r1, [r3, #0]
    234e:	3301      	adds	r3, #1
	for(i = 0 ; i < scanCodeIndex ; i++)
    2350:	42b2      	cmp	r2, r6
    2352:	d1fa      	bne.n	234a <readKeyboard+0x186>
		REG_PORT_OUTSET0 = kb_row[i];
    2354:	2400      	movs	r4, #0
		if(keyDown(i) && !scanCodesContains(i))
    2356:	4d18      	ldr	r5, [pc, #96]	; (23b8 <readKeyboard+0x1f4>)
    2358:	4e18      	ldr	r6, [pc, #96]	; (23bc <readKeyboard+0x1f8>)
			removeFromKeyDown(i);
    235a:	4f19      	ldr	r7, [pc, #100]	; (23c0 <readKeyboard+0x1fc>)
    235c:	e002      	b.n	2364 <readKeyboard+0x1a0>
	for(i = 0; i < 70; i++)
    235e:	3401      	adds	r4, #1
    2360:	2c46      	cmp	r4, #70	; 0x46
    2362:	d00a      	beq.n	237a <readKeyboard+0x1b6>
		if(keyDown(i) && !scanCodesContains(i))
    2364:	0020      	movs	r0, r4
    2366:	47a8      	blx	r5
    2368:	2800      	cmp	r0, #0
    236a:	d0f8      	beq.n	235e <readKeyboard+0x19a>
    236c:	0020      	movs	r0, r4
    236e:	47b0      	blx	r6
    2370:	2800      	cmp	r0, #0
    2372:	d1f4      	bne.n	235e <readKeyboard+0x19a>
			removeFromKeyDown(i);
    2374:	0020      	movs	r0, r4
    2376:	47b8      	blx	r7
    2378:	e7f1      	b.n	235e <readKeyboard+0x19a>
}
    237a:	b003      	add	sp, #12
    237c:	bc3c      	pop	{r2, r3, r4, r5}
    237e:	4690      	mov	r8, r2
    2380:	4699      	mov	r9, r3
    2382:	46a2      	mov	sl, r4
    2384:	46ab      	mov	fp, r5
    2386:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2388:	2000003c 	.word	0x2000003c
    238c:	41004400 	.word	0x41004400
    2390:	00007cc0 	.word	0x00007cc0
    2394:	41004408 	.word	0x41004408
    2398:	41004414 	.word	0x41004414
    239c:	00007cf8 	.word	0x00007cf8
    23a0:	41004404 	.word	0x41004404
    23a4:	00007d20 	.word	0x00007d20
    23a8:	41004440 	.word	0x41004440
    23ac:	41004418 	.word	0x41004418
    23b0:	00007cdc 	.word	0x00007cdc
    23b4:	20000028 	.word	0x20000028
    23b8:	00002175 	.word	0x00002175
    23bc:	00002149 	.word	0x00002149
    23c0:	000021a1 	.word	0x000021a1

000023c4 <clearCursorBuffer>:

void clearCursorBuffer(void)
{
    23c4:	4b04      	ldr	r3, [pc, #16]	; (23d8 <clearCursorBuffer+0x14>)
    23c6:	0019      	movs	r1, r3
    23c8:	31c8      	adds	r1, #200	; 0xc8
	for(uint16_t i = 0 ; i < 200 ; i++)
	{
		cursorBuffer[i] = 0x00;
    23ca:	2200      	movs	r2, #0
    23cc:	701a      	strb	r2, [r3, #0]
    23ce:	3301      	adds	r3, #1
	for(uint16_t i = 0 ; i < 200 ; i++)
    23d0:	428b      	cmp	r3, r1
    23d2:	d1fb      	bne.n	23cc <clearCursorBuffer+0x8>
	}
}
    23d4:	4770      	bx	lr
    23d6:	46c0      	nop			; (mov r8, r8)
    23d8:	2000029c 	.word	0x2000029c

000023dc <blinkCursor>:
	}
	return sum;
}

void blinkCursor(void)
{
    23dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    23de:	46d6      	mov	lr, sl
    23e0:	464f      	mov	r7, r9
    23e2:	4646      	mov	r6, r8
    23e4:	b5c0      	push	{r6, r7, lr}
	uint16_t x = xCharPos;
    23e6:	4b47      	ldr	r3, [pc, #284]	; (2504 <blinkCursor+0x128>)
    23e8:	881b      	ldrh	r3, [r3, #0]
	uint16_t y = yCharPos;
    23ea:	4a47      	ldr	r2, [pc, #284]	; (2508 <blinkCursor+0x12c>)
    23ec:	8815      	ldrh	r5, [r2, #0]
	unsigned char character = consoleDisplay[x][y];
    23ee:	005a      	lsls	r2, r3, #1
    23f0:	18d2      	adds	r2, r2, r3
    23f2:	00d2      	lsls	r2, r2, #3
    23f4:	4845      	ldr	r0, [pc, #276]	; (250c <blinkCursor+0x130>)
    23f6:	1882      	adds	r2, r0, r2
    23f8:	5d54      	ldrb	r4, [r2, r5]
	setXY(x*10,y*20,x*10+9,y*20+19);
    23fa:	0098      	lsls	r0, r3, #2
    23fc:	181b      	adds	r3, r3, r0
    23fe:	005b      	lsls	r3, r3, #1
    2400:	b298      	uxth	r0, r3
    2402:	2114      	movs	r1, #20
    2404:	4369      	muls	r1, r5
    2406:	b289      	uxth	r1, r1
    2408:	000b      	movs	r3, r1
    240a:	3313      	adds	r3, #19
    240c:	b29b      	uxth	r3, r3
    240e:	0002      	movs	r2, r0
    2410:	3209      	adds	r2, #9
    2412:	b292      	uxth	r2, r2
    2414:	4d3e      	ldr	r5, [pc, #248]	; (2510 <blinkCursor+0x134>)
    2416:	47a8      	blx	r5
	REG_PORT_OUTCLR1 = LCD_CS;
    2418:	2280      	movs	r2, #128	; 0x80
    241a:	03d2      	lsls	r2, r2, #15
    241c:	4b3d      	ldr	r3, [pc, #244]	; (2514 <blinkCursor+0x138>)
    241e:	601a      	str	r2, [r3, #0]
	if(cursorBlinkState)
    2420:	4b3d      	ldr	r3, [pc, #244]	; (2518 <blinkCursor+0x13c>)
    2422:	781b      	ldrb	r3, [r3, #0]
    2424:	2b00      	cmp	r3, #0
    2426:	d113      	bne.n	2450 <blinkCursor+0x74>
    2428:	4a3c      	ldr	r2, [pc, #240]	; (251c <blinkCursor+0x140>)
    242a:	00a5      	lsls	r5, r4, #2
    242c:	192d      	adds	r5, r5, r4
    242e:	00ab      	lsls	r3, r5, #2
    2430:	18ed      	adds	r5, r5, r3
    2432:	1955      	adds	r5, r2, r5
    2434:	3401      	adds	r4, #1
    2436:	00a3      	lsls	r3, r4, #2
    2438:	191c      	adds	r4, r3, r4
    243a:	00a3      	lsls	r3, r4, #2
    243c:	18e4      	adds	r4, r4, r3
    243e:	4692      	mov	sl, r2
    2440:	44a2      	add	sl, r4
				{
					setPixel((fore_Color_High<<8)|fore_Color_Low);
				}
				else
				{
					setPixel((back_Color_High<<8)|back_Color_Low);
    2442:	4b37      	ldr	r3, [pc, #220]	; (2520 <blinkCursor+0x144>)
    2444:	4699      	mov	r9, r3
    2446:	4b37      	ldr	r3, [pc, #220]	; (2524 <blinkCursor+0x148>)
    2448:	4698      	mov	r8, r3
    244a:	4f37      	ldr	r7, [pc, #220]	; (2528 <blinkCursor+0x14c>)
					setPixel((fore_Color_High<<8)|fore_Color_Low);
    244c:	4e37      	ldr	r6, [pc, #220]	; (252c <blinkCursor+0x150>)
    244e:	e049      	b.n	24e4 <blinkCursor+0x108>
    2450:	4a32      	ldr	r2, [pc, #200]	; (251c <blinkCursor+0x140>)
    2452:	00a5      	lsls	r5, r4, #2
    2454:	192d      	adds	r5, r5, r4
    2456:	00ab      	lsls	r3, r5, #2
    2458:	18ed      	adds	r5, r5, r3
    245a:	1955      	adds	r5, r2, r5
    245c:	3401      	adds	r4, #1
    245e:	00a3      	lsls	r3, r4, #2
    2460:	191c      	adds	r4, r3, r4
    2462:	00a3      	lsls	r3, r4, #2
    2464:	18e4      	adds	r4, r4, r3
    2466:	4692      	mov	sl, r2
    2468:	44a2      	add	sl, r4
					setPixel((fore_Color_High<<8)|fore_Color_Low);
    246a:	4b30      	ldr	r3, [pc, #192]	; (252c <blinkCursor+0x150>)
    246c:	4699      	mov	r9, r3
    246e:	4b30      	ldr	r3, [pc, #192]	; (2530 <blinkCursor+0x154>)
    2470:	4698      	mov	r8, r3
    2472:	4f2d      	ldr	r7, [pc, #180]	; (2528 <blinkCursor+0x14c>)
					setPixel((back_Color_High<<8)|back_Color_Low);
    2474:	4e2a      	ldr	r6, [pc, #168]	; (2520 <blinkCursor+0x144>)
    2476:	e019      	b.n	24ac <blinkCursor+0xd0>
					setPixel((fore_Color_High<<8)|fore_Color_Low);
    2478:	464b      	mov	r3, r9
    247a:	8818      	ldrh	r0, [r3, #0]
    247c:	0200      	lsls	r0, r0, #8
    247e:	4643      	mov	r3, r8
    2480:	881b      	ldrh	r3, [r3, #0]
    2482:	4318      	orrs	r0, r3
    2484:	b280      	uxth	r0, r0
    2486:	47b8      	blx	r7
			for(int j=0;j<8;j++)
    2488:	3c01      	subs	r4, #1
    248a:	d30c      	bcc.n	24a6 <blinkCursor+0xca>
				if((CodePage437[character][i]&(1<<(7-j)))!=0)
    248c:	782b      	ldrb	r3, [r5, #0]
    248e:	4123      	asrs	r3, r4
    2490:	07db      	lsls	r3, r3, #31
    2492:	d5f1      	bpl.n	2478 <blinkCursor+0x9c>
					setPixel((back_Color_High<<8)|back_Color_Low);
    2494:	8830      	ldrh	r0, [r6, #0]
    2496:	0200      	lsls	r0, r0, #8
    2498:	4b22      	ldr	r3, [pc, #136]	; (2524 <blinkCursor+0x148>)
    249a:	881b      	ldrh	r3, [r3, #0]
    249c:	4318      	orrs	r0, r3
    249e:	b280      	uxth	r0, r0
    24a0:	4b21      	ldr	r3, [pc, #132]	; (2528 <blinkCursor+0x14c>)
    24a2:	4798      	blx	r3
    24a4:	e7f0      	b.n	2488 <blinkCursor+0xac>
    24a6:	3501      	adds	r5, #1
		for(uint16_t i=0; i <= 24; i++)
    24a8:	4555      	cmp	r5, sl
    24aa:	d01d      	beq.n	24e8 <blinkCursor+0x10c>
{
    24ac:	2407      	movs	r4, #7
    24ae:	e7ed      	b.n	248c <blinkCursor+0xb0>
					setPixel((back_Color_High<<8)|back_Color_Low);
    24b0:	464b      	mov	r3, r9
    24b2:	8818      	ldrh	r0, [r3, #0]
    24b4:	0200      	lsls	r0, r0, #8
    24b6:	4643      	mov	r3, r8
    24b8:	881b      	ldrh	r3, [r3, #0]
    24ba:	4318      	orrs	r0, r3
    24bc:	b280      	uxth	r0, r0
    24be:	47b8      	blx	r7
			for(int j=0;j<8;j++)
    24c0:	3c01      	subs	r4, #1
    24c2:	d30c      	bcc.n	24de <blinkCursor+0x102>
				if((CodePage437[character][i]&(1<<(7-j)))!=0)
    24c4:	782b      	ldrb	r3, [r5, #0]
    24c6:	4123      	asrs	r3, r4
    24c8:	07db      	lsls	r3, r3, #31
    24ca:	d5f1      	bpl.n	24b0 <blinkCursor+0xd4>
					setPixel((fore_Color_High<<8)|fore_Color_Low);
    24cc:	8830      	ldrh	r0, [r6, #0]
    24ce:	0200      	lsls	r0, r0, #8
    24d0:	4b17      	ldr	r3, [pc, #92]	; (2530 <blinkCursor+0x154>)
    24d2:	881b      	ldrh	r3, [r3, #0]
    24d4:	4318      	orrs	r0, r3
    24d6:	b280      	uxth	r0, r0
    24d8:	4b13      	ldr	r3, [pc, #76]	; (2528 <blinkCursor+0x14c>)
    24da:	4798      	blx	r3
    24dc:	e7f0      	b.n	24c0 <blinkCursor+0xe4>
    24de:	3501      	adds	r5, #1
		for(uint16_t i=0; i <= 24; i++)
    24e0:	4555      	cmp	r5, sl
    24e2:	d001      	beq.n	24e8 <blinkCursor+0x10c>
{
    24e4:	2407      	movs	r4, #7
    24e6:	e7ed      	b.n	24c4 <blinkCursor+0xe8>
				}
			}
		}	
	}

	REG_PORT_OUTSET1 = LCD_CS;
    24e8:	2280      	movs	r2, #128	; 0x80
    24ea:	03d2      	lsls	r2, r2, #15
    24ec:	4b11      	ldr	r3, [pc, #68]	; (2534 <blinkCursor+0x158>)
    24ee:	601a      	str	r2, [r3, #0]
	
	//invert cursorBlinkState
	cursorBlinkState = !cursorBlinkState;
    24f0:	4a09      	ldr	r2, [pc, #36]	; (2518 <blinkCursor+0x13c>)
    24f2:	7813      	ldrb	r3, [r2, #0]
    24f4:	2101      	movs	r1, #1
    24f6:	404b      	eors	r3, r1
    24f8:	7013      	strb	r3, [r2, #0]
	
}
    24fa:	bc1c      	pop	{r2, r3, r4}
    24fc:	4690      	mov	r8, r2
    24fe:	4699      	mov	r9, r3
    2500:	46a2      	mov	sl, r4
    2502:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2504:	20000298 	.word	0x20000298
    2508:	2000029a 	.word	0x2000029a
    250c:	200003d0 	.word	0x200003d0
    2510:	00002975 	.word	0x00002975
    2514:	41004494 	.word	0x41004494
    2518:	20000010 	.word	0x20000010
    251c:	000063c0 	.word	0x000063c0
    2520:	20000b56 	.word	0x20000b56
    2524:	20000b50 	.word	0x20000b50
    2528:	00002b35 	.word	0x00002b35
    252c:	20000b52 	.word	0x20000b52
    2530:	20000b54 	.word	0x20000b54
    2534:	41004498 	.word	0x41004498

00002538 <printKeyboardBuffer>:
{
    2538:	b5f0      	push	{r4, r5, r6, r7, lr}
    253a:	46de      	mov	lr, fp
    253c:	4657      	mov	r7, sl
    253e:	464e      	mov	r6, r9
    2540:	4645      	mov	r5, r8
    2542:	b5e0      	push	{r5, r6, r7, lr}
    2544:	b0a7      	sub	sp, #156	; 0x9c
	unsigned char noCase[] =	  
    2546:	4cc9      	ldr	r4, [pc, #804]	; (286c <printKeyboardBuffer+0x334>)
    2548:	2246      	movs	r2, #70	; 0x46
    254a:	0021      	movs	r1, r4
    254c:	a814      	add	r0, sp, #80	; 0x50
    254e:	4dc8      	ldr	r5, [pc, #800]	; (2870 <printKeyboardBuffer+0x338>)
    2550:	47a8      	blx	r5
	unsigned char shiftCase[] = 
    2552:	0021      	movs	r1, r4
    2554:	3148      	adds	r1, #72	; 0x48
    2556:	2246      	movs	r2, #70	; 0x46
    2558:	a802      	add	r0, sp, #8
    255a:	47a8      	blx	r5
    255c:	4ec5      	ldr	r6, [pc, #788]	; (2874 <printKeyboardBuffer+0x33c>)
    255e:	0030      	movs	r0, r6
    2560:	3014      	adds	r0, #20
    2562:	0034      	movs	r4, r6
	bool shifted = false;
    2564:	2300      	movs	r3, #0
    2566:	9301      	str	r3, [sp, #4]
    2568:	e002      	b.n	2570 <printKeyboardBuffer+0x38>
    256a:	3401      	adds	r4, #1
	for(int i=0; i<20; i++)
    256c:	4284      	cmp	r4, r0
    256e:	d00b      	beq.n	2588 <printKeyboardBuffer+0x50>
		if((scanCodeBuffer[i] == 13) | (scanCodeBuffer[i] == 49))
    2570:	7823      	ldrb	r3, [r4, #0]
    2572:	001a      	movs	r2, r3
    2574:	3a0d      	subs	r2, #13
    2576:	4251      	negs	r1, r2
    2578:	414a      	adcs	r2, r1
    257a:	3b31      	subs	r3, #49	; 0x31
    257c:	4259      	negs	r1, r3
    257e:	414b      	adcs	r3, r1
    2580:	4313      	orrs	r3, r2
    2582:	d0f2      	beq.n	256a <printKeyboardBuffer+0x32>
			shifted = true;
    2584:	9301      	str	r3, [sp, #4]
    2586:	e7f0      	b.n	256a <printKeyboardBuffer+0x32>
    2588:	2500      	movs	r5, #0
		if(!keyDown(scanCodeBuffer[i]))
    258a:	4bba      	ldr	r3, [pc, #744]	; (2874 <printKeyboardBuffer+0x33c>)
    258c:	4698      	mov	r8, r3
    258e:	e007      	b.n	25a0 <printKeyboardBuffer+0x68>
				if(xCharPos > 0) 
    2590:	4bb9      	ldr	r3, [pc, #740]	; (2878 <printKeyboardBuffer+0x340>)
    2592:	881b      	ldrh	r3, [r3, #0]
    2594:	2b00      	cmp	r3, #0
    2596:	d14f      	bne.n	2638 <printKeyboardBuffer+0x100>
	for(int i=0; i<20; i++)
    2598:	3501      	adds	r5, #1
    259a:	2d14      	cmp	r5, #20
    259c:	d100      	bne.n	25a0 <printKeyboardBuffer+0x68>
    259e:	e17b      	b.n	2898 <printKeyboardBuffer+0x360>
		if(!keyDown(scanCodeBuffer[i]))
    25a0:	4643      	mov	r3, r8
    25a2:	5cef      	ldrb	r7, [r5, r3]
    25a4:	0038      	movs	r0, r7
    25a6:	4bb5      	ldr	r3, [pc, #724]	; (287c <printKeyboardBuffer+0x344>)
    25a8:	4798      	blx	r3
    25aa:	2800      	cmp	r0, #0
    25ac:	d1f4      	bne.n	2598 <printKeyboardBuffer+0x60>
			keyDownBuffer[i] = scanCodeBuffer[i];
    25ae:	4bb4      	ldr	r3, [pc, #720]	; (2880 <printKeyboardBuffer+0x348>)
    25b0:	555f      	strb	r7, [r3, r5]
			if(scanCodeBuffer[i] == 0xFF)
    25b2:	2fff      	cmp	r7, #255	; 0xff
    25b4:	d0f0      	beq.n	2598 <printKeyboardBuffer+0x60>
			else if(scanCodeBuffer[i] == 35) //left
    25b6:	2f23      	cmp	r7, #35	; 0x23
    25b8:	d0ea      	beq.n	2590 <printKeyboardBuffer+0x58>
			else if(scanCodeBuffer[i] == 45)	//down
    25ba:	2f2d      	cmp	r7, #45	; 0x2d
    25bc:	d058      	beq.n	2670 <printKeyboardBuffer+0x138>
			else if(scanCodeBuffer[i] == 55)	//up
    25be:	2f37      	cmp	r7, #55	; 0x37
    25c0:	d100      	bne.n	25c4 <printKeyboardBuffer+0x8c>
    25c2:	e075      	b.n	26b0 <printKeyboardBuffer+0x178>
			else if(scanCodeBuffer[i] == 65)	//right
    25c4:	2f41      	cmp	r7, #65	; 0x41
    25c6:	d100      	bne.n	25ca <printKeyboardBuffer+0x92>
    25c8:	e093      	b.n	26f2 <printKeyboardBuffer+0x1ba>
			else if((scanCodeBuffer[i] == 49) | (scanCodeBuffer[i] == 13))
    25ca:	2f31      	cmp	r7, #49	; 0x31
    25cc:	d0e4      	beq.n	2598 <printKeyboardBuffer+0x60>
    25ce:	2f0d      	cmp	r7, #13
    25d0:	d0e2      	beq.n	2598 <printKeyboardBuffer+0x60>
			else if(scanCodeBuffer[i] == 58) //Return
    25d2:	2f3a      	cmp	r7, #58	; 0x3a
    25d4:	d100      	bne.n	25d8 <printKeyboardBuffer+0xa0>
    25d6:	e0ad      	b.n	2734 <printKeyboardBuffer+0x1fc>
			else if(scanCodeBuffer[i] == 69) //Line
    25d8:	2f45      	cmp	r7, #69	; 0x45
    25da:	d100      	bne.n	25de <printKeyboardBuffer+0xa6>
    25dc:	e0db      	b.n	2796 <printKeyboardBuffer+0x25e>
			else if(scanCodeBuffer[i] == 66) //Backspace
    25de:	2f42      	cmp	r7, #66	; 0x42
    25e0:	d100      	bne.n	25e4 <printKeyboardBuffer+0xac>
    25e2:	e109      	b.n	27f8 <printKeyboardBuffer+0x2c0>
				if(shifted)
    25e4:	9b01      	ldr	r3, [sp, #4]
    25e6:	2b00      	cmp	r3, #0
    25e8:	d100      	bne.n	25ec <printKeyboardBuffer+0xb4>
    25ea:	e118      	b.n	281e <printKeyboardBuffer+0x2e6>
					consoleDisplay[xCharPos][yCharPos] = shiftCase[scanCodeBuffer[i]];
    25ec:	ab02      	add	r3, sp, #8
    25ee:	5dd8      	ldrb	r0, [r3, r7]
    25f0:	4ba4      	ldr	r3, [pc, #656]	; (2884 <printKeyboardBuffer+0x34c>)
    25f2:	4699      	mov	r9, r3
    25f4:	4fa0      	ldr	r7, [pc, #640]	; (2878 <printKeyboardBuffer+0x340>)
    25f6:	8839      	ldrh	r1, [r7, #0]
    25f8:	4ba3      	ldr	r3, [pc, #652]	; (2888 <printKeyboardBuffer+0x350>)
    25fa:	469b      	mov	fp, r3
    25fc:	881a      	ldrh	r2, [r3, #0]
    25fe:	004b      	lsls	r3, r1, #1
    2600:	185b      	adds	r3, r3, r1
    2602:	00db      	lsls	r3, r3, #3
    2604:	444b      	add	r3, r9
    2606:	5498      	strb	r0, [r3, r2]
					drawChar(shiftCase[scanCodeBuffer[i]]);
    2608:	4ba0      	ldr	r3, [pc, #640]	; (288c <printKeyboardBuffer+0x354>)
    260a:	469a      	mov	sl, r3
    260c:	4798      	blx	r3
					xCharPos++;
    260e:	883b      	ldrh	r3, [r7, #0]
    2610:	3301      	adds	r3, #1
    2612:	b29b      	uxth	r3, r3
    2614:	803b      	strh	r3, [r7, #0]
					drawChar(consoleDisplay[xCharPos][yCharPos]);
    2616:	465a      	mov	r2, fp
    2618:	8811      	ldrh	r1, [r2, #0]
    261a:	005a      	lsls	r2, r3, #1
    261c:	18d3      	adds	r3, r2, r3
    261e:	00db      	lsls	r3, r3, #3
    2620:	444b      	add	r3, r9
    2622:	5c58      	ldrb	r0, [r3, r1]
    2624:	47d0      	blx	sl
					if(xCharPos > 79)
    2626:	883b      	ldrh	r3, [r7, #0]
    2628:	2b4f      	cmp	r3, #79	; 0x4f
    262a:	d902      	bls.n	2632 <printKeyboardBuffer+0xfa>
						xCharPos--;
    262c:	3b01      	subs	r3, #1
    262e:	4a92      	ldr	r2, [pc, #584]	; (2878 <printKeyboardBuffer+0x340>)
    2630:	8013      	strh	r3, [r2, #0]
					blinkCursor();
    2632:	4b97      	ldr	r3, [pc, #604]	; (2890 <printKeyboardBuffer+0x358>)
    2634:	4798      	blx	r3
    2636:	e7af      	b.n	2598 <printKeyboardBuffer+0x60>
					drawChar(consoleDisplay[xCharPos][yCharPos]);
    2638:	4f92      	ldr	r7, [pc, #584]	; (2884 <printKeyboardBuffer+0x34c>)
    263a:	4a93      	ldr	r2, [pc, #588]	; (2888 <printKeyboardBuffer+0x350>)
    263c:	4691      	mov	r9, r2
    263e:	8811      	ldrh	r1, [r2, #0]
    2640:	005a      	lsls	r2, r3, #1
    2642:	18d3      	adds	r3, r2, r3
    2644:	00db      	lsls	r3, r3, #3
    2646:	18fb      	adds	r3, r7, r3
    2648:	5c58      	ldrb	r0, [r3, r1]
    264a:	4b90      	ldr	r3, [pc, #576]	; (288c <printKeyboardBuffer+0x354>)
    264c:	469a      	mov	sl, r3
    264e:	4798      	blx	r3
					xCharPos--;
    2650:	4a89      	ldr	r2, [pc, #548]	; (2878 <printKeyboardBuffer+0x340>)
    2652:	8813      	ldrh	r3, [r2, #0]
    2654:	3b01      	subs	r3, #1
    2656:	b29b      	uxth	r3, r3
    2658:	8013      	strh	r3, [r2, #0]
					tempCharacter = consoleDisplay[xCharPos][yCharPos];
    265a:	464a      	mov	r2, r9
    265c:	8811      	ldrh	r1, [r2, #0]
    265e:	005a      	lsls	r2, r3, #1
    2660:	18d3      	adds	r3, r2, r3
    2662:	00db      	lsls	r3, r3, #3
    2664:	18fb      	adds	r3, r7, r3
					drawChar(tempCharacter);
    2666:	5c58      	ldrb	r0, [r3, r1]
    2668:	47d0      	blx	sl
					blinkCursor();
    266a:	4b89      	ldr	r3, [pc, #548]	; (2890 <printKeyboardBuffer+0x358>)
    266c:	4798      	blx	r3
    266e:	e793      	b.n	2598 <printKeyboardBuffer+0x60>
				if(yCharPos < 23)
    2670:	4b85      	ldr	r3, [pc, #532]	; (2888 <printKeyboardBuffer+0x350>)
    2672:	881a      	ldrh	r2, [r3, #0]
    2674:	2a16      	cmp	r2, #22
    2676:	d88f      	bhi.n	2598 <printKeyboardBuffer+0x60>
					drawChar(consoleDisplay[xCharPos][yCharPos]);
    2678:	4f82      	ldr	r7, [pc, #520]	; (2884 <printKeyboardBuffer+0x34c>)
    267a:	4b7f      	ldr	r3, [pc, #508]	; (2878 <printKeyboardBuffer+0x340>)
    267c:	4699      	mov	r9, r3
    267e:	8819      	ldrh	r1, [r3, #0]
    2680:	004b      	lsls	r3, r1, #1
    2682:	185b      	adds	r3, r3, r1
    2684:	00db      	lsls	r3, r3, #3
    2686:	18fb      	adds	r3, r7, r3
    2688:	5c98      	ldrb	r0, [r3, r2]
    268a:	4b80      	ldr	r3, [pc, #512]	; (288c <printKeyboardBuffer+0x354>)
    268c:	469a      	mov	sl, r3
    268e:	4798      	blx	r3
					yCharPos++;
    2690:	4a7d      	ldr	r2, [pc, #500]	; (2888 <printKeyboardBuffer+0x350>)
    2692:	8813      	ldrh	r3, [r2, #0]
    2694:	3301      	adds	r3, #1
    2696:	b29b      	uxth	r3, r3
    2698:	8013      	strh	r3, [r2, #0]
					tempCharacter = consoleDisplay[xCharPos][yCharPos];
    269a:	464a      	mov	r2, r9
    269c:	8811      	ldrh	r1, [r2, #0]
    269e:	004a      	lsls	r2, r1, #1
    26a0:	1852      	adds	r2, r2, r1
    26a2:	00d2      	lsls	r2, r2, #3
    26a4:	18bf      	adds	r7, r7, r2
					drawChar(tempCharacter);
    26a6:	5cf8      	ldrb	r0, [r7, r3]
    26a8:	47d0      	blx	sl
					blinkCursor();
    26aa:	4b79      	ldr	r3, [pc, #484]	; (2890 <printKeyboardBuffer+0x358>)
    26ac:	4798      	blx	r3
    26ae:	e773      	b.n	2598 <printKeyboardBuffer+0x60>
				if(yCharPos > 0)
    26b0:	4b75      	ldr	r3, [pc, #468]	; (2888 <printKeyboardBuffer+0x350>)
    26b2:	881b      	ldrh	r3, [r3, #0]
    26b4:	2b00      	cmp	r3, #0
    26b6:	d100      	bne.n	26ba <printKeyboardBuffer+0x182>
    26b8:	e76e      	b.n	2598 <printKeyboardBuffer+0x60>
					drawChar(consoleDisplay[xCharPos][yCharPos]);
    26ba:	4f72      	ldr	r7, [pc, #456]	; (2884 <printKeyboardBuffer+0x34c>)
    26bc:	4a6e      	ldr	r2, [pc, #440]	; (2878 <printKeyboardBuffer+0x340>)
    26be:	4691      	mov	r9, r2
    26c0:	8811      	ldrh	r1, [r2, #0]
    26c2:	004a      	lsls	r2, r1, #1
    26c4:	1852      	adds	r2, r2, r1
    26c6:	00d2      	lsls	r2, r2, #3
    26c8:	18ba      	adds	r2, r7, r2
    26ca:	5cd0      	ldrb	r0, [r2, r3]
    26cc:	4b6f      	ldr	r3, [pc, #444]	; (288c <printKeyboardBuffer+0x354>)
    26ce:	469a      	mov	sl, r3
    26d0:	4798      	blx	r3
					yCharPos--;
    26d2:	4a6d      	ldr	r2, [pc, #436]	; (2888 <printKeyboardBuffer+0x350>)
    26d4:	8813      	ldrh	r3, [r2, #0]
    26d6:	3b01      	subs	r3, #1
    26d8:	b29b      	uxth	r3, r3
    26da:	8013      	strh	r3, [r2, #0]
					tempCharacter = consoleDisplay[xCharPos][yCharPos];
    26dc:	464a      	mov	r2, r9
    26de:	8811      	ldrh	r1, [r2, #0]
    26e0:	004a      	lsls	r2, r1, #1
    26e2:	1852      	adds	r2, r2, r1
    26e4:	00d2      	lsls	r2, r2, #3
    26e6:	18bf      	adds	r7, r7, r2
					drawChar(tempCharacter);
    26e8:	5cf8      	ldrb	r0, [r7, r3]
    26ea:	47d0      	blx	sl
					blinkCursor();				
    26ec:	4b68      	ldr	r3, [pc, #416]	; (2890 <printKeyboardBuffer+0x358>)
    26ee:	4798      	blx	r3
    26f0:	e752      	b.n	2598 <printKeyboardBuffer+0x60>
				if(xCharPos < 79)
    26f2:	4b61      	ldr	r3, [pc, #388]	; (2878 <printKeyboardBuffer+0x340>)
    26f4:	881b      	ldrh	r3, [r3, #0]
    26f6:	2b4e      	cmp	r3, #78	; 0x4e
    26f8:	d900      	bls.n	26fc <printKeyboardBuffer+0x1c4>
    26fa:	e74d      	b.n	2598 <printKeyboardBuffer+0x60>
					drawChar(consoleDisplay[xCharPos][yCharPos]);
    26fc:	4f61      	ldr	r7, [pc, #388]	; (2884 <printKeyboardBuffer+0x34c>)
    26fe:	4a62      	ldr	r2, [pc, #392]	; (2888 <printKeyboardBuffer+0x350>)
    2700:	4691      	mov	r9, r2
    2702:	8811      	ldrh	r1, [r2, #0]
    2704:	005a      	lsls	r2, r3, #1
    2706:	18d3      	adds	r3, r2, r3
    2708:	00db      	lsls	r3, r3, #3
    270a:	18fb      	adds	r3, r7, r3
    270c:	5c58      	ldrb	r0, [r3, r1]
    270e:	4b5f      	ldr	r3, [pc, #380]	; (288c <printKeyboardBuffer+0x354>)
    2710:	469a      	mov	sl, r3
    2712:	4798      	blx	r3
					xCharPos++;
    2714:	4a58      	ldr	r2, [pc, #352]	; (2878 <printKeyboardBuffer+0x340>)
    2716:	8813      	ldrh	r3, [r2, #0]
    2718:	3301      	adds	r3, #1
    271a:	b29b      	uxth	r3, r3
    271c:	8013      	strh	r3, [r2, #0]
					tempCharacter = consoleDisplay[xCharPos][yCharPos];
    271e:	464a      	mov	r2, r9
    2720:	8811      	ldrh	r1, [r2, #0]
    2722:	005a      	lsls	r2, r3, #1
    2724:	18d3      	adds	r3, r2, r3
    2726:	00db      	lsls	r3, r3, #3
    2728:	18fb      	adds	r3, r7, r3
					drawChar(tempCharacter);
    272a:	5c58      	ldrb	r0, [r3, r1]
    272c:	47d0      	blx	sl
					blinkCursor();					
    272e:	4b58      	ldr	r3, [pc, #352]	; (2890 <printKeyboardBuffer+0x358>)
    2730:	4798      	blx	r3
    2732:	e731      	b.n	2598 <printKeyboardBuffer+0x60>
				if(yCharPos == 23)
    2734:	4b54      	ldr	r3, [pc, #336]	; (2888 <printKeyboardBuffer+0x350>)
    2736:	881a      	ldrh	r2, [r3, #0]
    2738:	2a17      	cmp	r2, #23
    273a:	d018      	beq.n	276e <printKeyboardBuffer+0x236>
					drawChar(consoleDisplay[xCharPos][yCharPos]);
    273c:	4f51      	ldr	r7, [pc, #324]	; (2884 <printKeyboardBuffer+0x34c>)
    273e:	4b4e      	ldr	r3, [pc, #312]	; (2878 <printKeyboardBuffer+0x340>)
    2740:	4699      	mov	r9, r3
    2742:	8819      	ldrh	r1, [r3, #0]
    2744:	004b      	lsls	r3, r1, #1
    2746:	185b      	adds	r3, r3, r1
    2748:	00db      	lsls	r3, r3, #3
    274a:	18fb      	adds	r3, r7, r3
    274c:	5c98      	ldrb	r0, [r3, r2]
    274e:	4b4f      	ldr	r3, [pc, #316]	; (288c <printKeyboardBuffer+0x354>)
    2750:	469a      	mov	sl, r3
    2752:	4798      	blx	r3
					yCharPos++;
    2754:	4a4c      	ldr	r2, [pc, #304]	; (2888 <printKeyboardBuffer+0x350>)
    2756:	8813      	ldrh	r3, [r2, #0]
    2758:	3301      	adds	r3, #1
    275a:	b29b      	uxth	r3, r3
    275c:	8013      	strh	r3, [r2, #0]
					xCharPos = 0;
    275e:	2200      	movs	r2, #0
    2760:	4649      	mov	r1, r9
    2762:	800a      	strh	r2, [r1, #0]
					drawChar(consoleDisplay[xCharPos][yCharPos]);
    2764:	5cf8      	ldrb	r0, [r7, r3]
    2766:	47d0      	blx	sl
					blinkCursor();
    2768:	4b49      	ldr	r3, [pc, #292]	; (2890 <printKeyboardBuffer+0x358>)
    276a:	4798      	blx	r3
    276c:	e714      	b.n	2598 <printKeyboardBuffer+0x60>
					drawChar(consoleDisplay[xCharPos][yCharPos]);
    276e:	4f42      	ldr	r7, [pc, #264]	; (2878 <printKeyboardBuffer+0x340>)
    2770:	883a      	ldrh	r2, [r7, #0]
    2772:	0053      	lsls	r3, r2, #1
    2774:	189b      	adds	r3, r3, r2
    2776:	00db      	lsls	r3, r3, #3
    2778:	4a42      	ldr	r2, [pc, #264]	; (2884 <printKeyboardBuffer+0x34c>)
    277a:	18d3      	adds	r3, r2, r3
    277c:	7dd8      	ldrb	r0, [r3, #23]
    277e:	4b43      	ldr	r3, [pc, #268]	; (288c <printKeyboardBuffer+0x354>)
    2780:	4699      	mov	r9, r3
    2782:	4798      	blx	r3
					newLine();
    2784:	4b43      	ldr	r3, [pc, #268]	; (2894 <printKeyboardBuffer+0x35c>)
    2786:	4798      	blx	r3
					xCharPos = 0;
    2788:	2300      	movs	r3, #0
    278a:	803b      	strh	r3, [r7, #0]
					drawChar(0x00);
    278c:	2000      	movs	r0, #0
    278e:	47c8      	blx	r9
					blinkCursor();
    2790:	4b3f      	ldr	r3, [pc, #252]	; (2890 <printKeyboardBuffer+0x358>)
    2792:	4798      	blx	r3
    2794:	e700      	b.n	2598 <printKeyboardBuffer+0x60>
				if(yCharPos == 23)
    2796:	4b3c      	ldr	r3, [pc, #240]	; (2888 <printKeyboardBuffer+0x350>)
    2798:	881a      	ldrh	r2, [r3, #0]
    279a:	2a17      	cmp	r2, #23
    279c:	d01b      	beq.n	27d6 <printKeyboardBuffer+0x29e>
					drawChar(consoleDisplay[xCharPos][yCharPos]);
    279e:	4f39      	ldr	r7, [pc, #228]	; (2884 <printKeyboardBuffer+0x34c>)
    27a0:	4b35      	ldr	r3, [pc, #212]	; (2878 <printKeyboardBuffer+0x340>)
    27a2:	4699      	mov	r9, r3
    27a4:	8819      	ldrh	r1, [r3, #0]
    27a6:	004b      	lsls	r3, r1, #1
    27a8:	185b      	adds	r3, r3, r1
    27aa:	00db      	lsls	r3, r3, #3
    27ac:	18fb      	adds	r3, r7, r3
    27ae:	5c98      	ldrb	r0, [r3, r2]
    27b0:	4b36      	ldr	r3, [pc, #216]	; (288c <printKeyboardBuffer+0x354>)
    27b2:	469a      	mov	sl, r3
    27b4:	4798      	blx	r3
					yCharPos++;
    27b6:	4a34      	ldr	r2, [pc, #208]	; (2888 <printKeyboardBuffer+0x350>)
    27b8:	8813      	ldrh	r3, [r2, #0]
    27ba:	3301      	adds	r3, #1
    27bc:	b29b      	uxth	r3, r3
    27be:	8013      	strh	r3, [r2, #0]
					drawChar(consoleDisplay[xCharPos][yCharPos]);
    27c0:	464a      	mov	r2, r9
    27c2:	8811      	ldrh	r1, [r2, #0]
    27c4:	004a      	lsls	r2, r1, #1
    27c6:	1852      	adds	r2, r2, r1
    27c8:	00d2      	lsls	r2, r2, #3
    27ca:	18bf      	adds	r7, r7, r2
    27cc:	5cf8      	ldrb	r0, [r7, r3]
    27ce:	47d0      	blx	sl
					blinkCursor();
    27d0:	4b2f      	ldr	r3, [pc, #188]	; (2890 <printKeyboardBuffer+0x358>)
    27d2:	4798      	blx	r3
    27d4:	e6e0      	b.n	2598 <printKeyboardBuffer+0x60>
					drawChar(consoleDisplay[xCharPos][yCharPos]);
    27d6:	4b28      	ldr	r3, [pc, #160]	; (2878 <printKeyboardBuffer+0x340>)
    27d8:	881a      	ldrh	r2, [r3, #0]
    27da:	0053      	lsls	r3, r2, #1
    27dc:	189b      	adds	r3, r3, r2
    27de:	00db      	lsls	r3, r3, #3
    27e0:	4a28      	ldr	r2, [pc, #160]	; (2884 <printKeyboardBuffer+0x34c>)
    27e2:	18d3      	adds	r3, r2, r3
    27e4:	7dd8      	ldrb	r0, [r3, #23]
    27e6:	4f29      	ldr	r7, [pc, #164]	; (288c <printKeyboardBuffer+0x354>)
    27e8:	47b8      	blx	r7
					newLine();
    27ea:	4b2a      	ldr	r3, [pc, #168]	; (2894 <printKeyboardBuffer+0x35c>)
    27ec:	4798      	blx	r3
					drawChar(0x00);
    27ee:	2000      	movs	r0, #0
    27f0:	47b8      	blx	r7
					blinkCursor();
    27f2:	4b27      	ldr	r3, [pc, #156]	; (2890 <printKeyboardBuffer+0x358>)
    27f4:	4798      	blx	r3
    27f6:	e6cf      	b.n	2598 <printKeyboardBuffer+0x60>
				drawChar(consoleDisplay[xCharPos][yCharPos]);
    27f8:	4f1f      	ldr	r7, [pc, #124]	; (2878 <printKeyboardBuffer+0x340>)
    27fa:	883a      	ldrh	r2, [r7, #0]
    27fc:	4b22      	ldr	r3, [pc, #136]	; (2888 <printKeyboardBuffer+0x350>)
    27fe:	8819      	ldrh	r1, [r3, #0]
    2800:	0053      	lsls	r3, r2, #1
    2802:	189b      	adds	r3, r3, r2
    2804:	00db      	lsls	r3, r3, #3
    2806:	4a1f      	ldr	r2, [pc, #124]	; (2884 <printKeyboardBuffer+0x34c>)
    2808:	18d3      	adds	r3, r2, r3
    280a:	5c58      	ldrb	r0, [r3, r1]
    280c:	4b1f      	ldr	r3, [pc, #124]	; (288c <printKeyboardBuffer+0x354>)
    280e:	4699      	mov	r9, r3
    2810:	4798      	blx	r3
				xCharPos--;
    2812:	883b      	ldrh	r3, [r7, #0]
    2814:	3b01      	subs	r3, #1
    2816:	803b      	strh	r3, [r7, #0]
				drawChar(0x20);
    2818:	2020      	movs	r0, #32
    281a:	47c8      	blx	r9
    281c:	e6bc      	b.n	2598 <printKeyboardBuffer+0x60>
					consoleDisplay[xCharPos][yCharPos] = noCase[scanCodeBuffer[i]];
    281e:	ab14      	add	r3, sp, #80	; 0x50
    2820:	5dd8      	ldrb	r0, [r3, r7]
    2822:	4b18      	ldr	r3, [pc, #96]	; (2884 <printKeyboardBuffer+0x34c>)
    2824:	4699      	mov	r9, r3
    2826:	4f14      	ldr	r7, [pc, #80]	; (2878 <printKeyboardBuffer+0x340>)
    2828:	8839      	ldrh	r1, [r7, #0]
    282a:	4b17      	ldr	r3, [pc, #92]	; (2888 <printKeyboardBuffer+0x350>)
    282c:	469b      	mov	fp, r3
    282e:	881a      	ldrh	r2, [r3, #0]
    2830:	004b      	lsls	r3, r1, #1
    2832:	185b      	adds	r3, r3, r1
    2834:	00db      	lsls	r3, r3, #3
    2836:	444b      	add	r3, r9
    2838:	5498      	strb	r0, [r3, r2]
					drawChar(noCase[scanCodeBuffer[i]]);
    283a:	4b14      	ldr	r3, [pc, #80]	; (288c <printKeyboardBuffer+0x354>)
    283c:	469a      	mov	sl, r3
    283e:	4798      	blx	r3
					xCharPos++;
    2840:	883b      	ldrh	r3, [r7, #0]
    2842:	3301      	adds	r3, #1
    2844:	b29b      	uxth	r3, r3
    2846:	803b      	strh	r3, [r7, #0]
					drawChar(consoleDisplay[xCharPos][yCharPos]);
    2848:	465a      	mov	r2, fp
    284a:	8811      	ldrh	r1, [r2, #0]
    284c:	005a      	lsls	r2, r3, #1
    284e:	18d3      	adds	r3, r2, r3
    2850:	00db      	lsls	r3, r3, #3
    2852:	444b      	add	r3, r9
    2854:	5c58      	ldrb	r0, [r3, r1]
    2856:	47d0      	blx	sl
					if(xCharPos > 79)
    2858:	883b      	ldrh	r3, [r7, #0]
    285a:	2b4f      	cmp	r3, #79	; 0x4f
    285c:	d902      	bls.n	2864 <printKeyboardBuffer+0x32c>
						xCharPos--;
    285e:	3b01      	subs	r3, #1
    2860:	4a05      	ldr	r2, [pc, #20]	; (2878 <printKeyboardBuffer+0x340>)
    2862:	8013      	strh	r3, [r2, #0]
					blinkCursor();
    2864:	4b0a      	ldr	r3, [pc, #40]	; (2890 <printKeyboardBuffer+0x358>)
    2866:	4798      	blx	r3
    2868:	e696      	b.n	2598 <printKeyboardBuffer+0x60>
    286a:	46c0      	nop			; (mov r8, r8)
    286c:	00006330 	.word	0x00006330
    2870:	000032f1 	.word	0x000032f1
    2874:	20000028 	.word	0x20000028
    2878:	20000298 	.word	0x20000298
    287c:	00002175 	.word	0x00002175
    2880:	20000014 	.word	0x20000014
    2884:	200003d0 	.word	0x200003d0
    2888:	2000029a 	.word	0x2000029a
    288c:	00001e6d 	.word	0x00001e6d
    2890:	000023dd 	.word	0x000023dd
    2894:	00001f55 	.word	0x00001f55
		scanCodeBuffer[i] = 0xFF;
    2898:	23ff      	movs	r3, #255	; 0xff
    289a:	7033      	strb	r3, [r6, #0]
    289c:	3601      	adds	r6, #1
	for(int i = 0 ; i < 20 ; i++)
    289e:	42b4      	cmp	r4, r6
    28a0:	d1fb      	bne.n	289a <printKeyboardBuffer+0x362>
}
    28a2:	b027      	add	sp, #156	; 0x9c
    28a4:	bc3c      	pop	{r2, r3, r4, r5}
    28a6:	4690      	mov	r8, r2
    28a8:	4699      	mov	r9, r3
    28aa:	46a2      	mov	sl, r4
    28ac:	46ab      	mov	fp, r5
    28ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

000028b0 <setColorRGB>:

uint16_t fore_Color_High, fore_Color_Low;
uint16_t back_Color_High, back_Color_Low;

void setColorRGB(uint8_t r, uint8_t g, uint8_t b)
{
    28b0:	b510      	push	{r4, lr}
	fore_Color_High = ((r&248)|g>>5);
    28b2:	094b      	lsrs	r3, r1, #5
    28b4:	2407      	movs	r4, #7
    28b6:	43a0      	bics	r0, r4
    28b8:	4318      	orrs	r0, r3
    28ba:	4b05      	ldr	r3, [pc, #20]	; (28d0 <setColorRGB+0x20>)
    28bc:	8018      	strh	r0, [r3, #0]
	fore_Color_Low = ((g&28)<<3|b>>3);
    28be:	00c9      	lsls	r1, r1, #3
    28c0:	23e0      	movs	r3, #224	; 0xe0
    28c2:	4019      	ands	r1, r3
    28c4:	08d2      	lsrs	r2, r2, #3
    28c6:	430a      	orrs	r2, r1
    28c8:	4b02      	ldr	r3, [pc, #8]	; (28d4 <setColorRGB+0x24>)
    28ca:	801a      	strh	r2, [r3, #0]
}
    28cc:	bd10      	pop	{r4, pc}
    28ce:	46c0      	nop			; (mov r8, r8)
    28d0:	20000b52 	.word	0x20000b52
    28d4:	20000b54 	.word	0x20000b54

000028d8 <setBackColorRGB>:
	fore_Color_Low = (color & 0xFF);
}

void setBackColorRGB(unsigned char r,
unsigned char g, unsigned char b)
{
    28d8:	b510      	push	{r4, lr}
	back_Color_High = ((r&248)|g>>5);
    28da:	094b      	lsrs	r3, r1, #5
    28dc:	2407      	movs	r4, #7
    28de:	43a0      	bics	r0, r4
    28e0:	4318      	orrs	r0, r3
    28e2:	4b05      	ldr	r3, [pc, #20]	; (28f8 <setBackColorRGB+0x20>)
    28e4:	8018      	strh	r0, [r3, #0]
	back_Color_Low = ((g&28)<<3|b>>3);
    28e6:	00c9      	lsls	r1, r1, #3
    28e8:	23e0      	movs	r3, #224	; 0xe0
    28ea:	4019      	ands	r1, r3
    28ec:	08d2      	lsrs	r2, r2, #3
    28ee:	430a      	orrs	r2, r1
    28f0:	4b02      	ldr	r3, [pc, #8]	; (28fc <setBackColorRGB+0x24>)
    28f2:	801a      	strh	r2, [r3, #0]
}
    28f4:	bd10      	pop	{r4, pc}
    28f6:	46c0      	nop			; (mov r8, r8)
    28f8:	20000b56 	.word	0x20000b56
    28fc:	20000b50 	.word	0x20000b50

00002900 <LCD_Fast_Fill>:
	(((long)(x2-x1)+1)*((long)(y2-y1)+1)));
	REG_PORT_OUTSET1 = LCD_CS;
}

void LCD_Fast_Fill(int ch, int cl, long pix)
{
    2900:	b570      	push	{r4, r5, r6, lr}
	int blocks;
	
	
	REG_PORT_OUTCLR1 = 0x0000ffff;
    2902:	4c19      	ldr	r4, [pc, #100]	; (2968 <LCD_Fast_Fill+0x68>)
    2904:	4b19      	ldr	r3, [pc, #100]	; (296c <LCD_Fast_Fill+0x6c>)
    2906:	601c      	str	r4, [r3, #0]
	REG_PORT_OUTSET1 = (ch << 8) | cl;
    2908:	0200      	lsls	r0, r0, #8
    290a:	4301      	orrs	r1, r0
    290c:	4b18      	ldr	r3, [pc, #96]	; (2970 <LCD_Fast_Fill+0x70>)
    290e:	6019      	str	r1, [r3, #0]

	blocks = pix/16;
    2910:	17d3      	asrs	r3, r2, #31
    2912:	260f      	movs	r6, #15
    2914:	401e      	ands	r6, r3
    2916:	18b6      	adds	r6, r6, r2
    2918:	1136      	asrs	r6, r6, #4
	for (int i=0; i<blocks; i++)
    291a:	2500      	movs	r5, #0
    291c:	2e00      	cmp	r6, #0
    291e:	dd0c      	ble.n	293a <LCD_Fast_Fill+0x3a>
	{
		for (int j=0; j<16; j++)
		{
			REG_PORT_OUTCLR1 = LCD_WR;
    2920:	4c12      	ldr	r4, [pc, #72]	; (296c <LCD_Fast_Fill+0x6c>)
    2922:	2180      	movs	r1, #128	; 0x80
    2924:	0289      	lsls	r1, r1, #10
			REG_PORT_OUTSET1 = LCD_WR;
    2926:	4812      	ldr	r0, [pc, #72]	; (2970 <LCD_Fast_Fill+0x70>)
{
    2928:	2310      	movs	r3, #16
			REG_PORT_OUTCLR1 = LCD_WR;
    292a:	6021      	str	r1, [r4, #0]
			REG_PORT_OUTSET1 = LCD_WR;
    292c:	6001      	str	r1, [r0, #0]
    292e:	3b01      	subs	r3, #1
		for (int j=0; j<16; j++)
    2930:	2b00      	cmp	r3, #0
    2932:	d1fa      	bne.n	292a <LCD_Fast_Fill+0x2a>
	for (int i=0; i<blocks; i++)
    2934:	3501      	adds	r5, #1
    2936:	42ae      	cmp	r6, r5
    2938:	d1f6      	bne.n	2928 <LCD_Fast_Fill+0x28>
		}
	}
	
	if ((pix % 16) != 0)
    293a:	0713      	lsls	r3, r2, #28
    293c:	d013      	beq.n	2966 <LCD_Fast_Fill+0x66>
	for (int i=0; i<(pix % 16)+1; i++)
    293e:	17d3      	asrs	r3, r2, #31
    2940:	0f1b      	lsrs	r3, r3, #28
    2942:	18d2      	adds	r2, r2, r3
    2944:	210f      	movs	r1, #15
    2946:	4011      	ands	r1, r2
    2948:	1ac9      	subs	r1, r1, r3
    294a:	1c4b      	adds	r3, r1, #1
    294c:	2b00      	cmp	r3, #0
    294e:	dd0a      	ble.n	2966 <LCD_Fast_Fill+0x66>
    2950:	0019      	movs	r1, r3
    2952:	2300      	movs	r3, #0
	{
		REG_PORT_OUTCLR1 = LCD_WR;
    2954:	4c05      	ldr	r4, [pc, #20]	; (296c <LCD_Fast_Fill+0x6c>)
    2956:	2280      	movs	r2, #128	; 0x80
    2958:	0292      	lsls	r2, r2, #10
		REG_PORT_OUTSET1 = LCD_WR;
    295a:	4805      	ldr	r0, [pc, #20]	; (2970 <LCD_Fast_Fill+0x70>)
		REG_PORT_OUTCLR1 = LCD_WR;
    295c:	6022      	str	r2, [r4, #0]
		REG_PORT_OUTSET1 = LCD_WR;
    295e:	6002      	str	r2, [r0, #0]
	for (int i=0; i<(pix % 16)+1; i++)
    2960:	3301      	adds	r3, #1
    2962:	4299      	cmp	r1, r3
    2964:	d1fa      	bne.n	295c <LCD_Fast_Fill+0x5c>
	}
}
    2966:	bd70      	pop	{r4, r5, r6, pc}
    2968:	0000ffff 	.word	0x0000ffff
    296c:	41004494 	.word	0x41004494
    2970:	41004498 	.word	0x41004498

00002974 <setXY>:
{
	setXY(0,0,display_X_size,display_Y_size);
}

void setXY(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
    2974:	b5f0      	push	{r4, r5, r6, r7, lr}
    2976:	b083      	sub	sp, #12
    2978:	0007      	movs	r7, r0
    297a:	9100      	str	r1, [sp, #0]
    297c:	0016      	movs	r6, r2
    297e:	9301      	str	r3, [sp, #4]
	y1=display_Y_size-y1;
	y2=display_Y_size-y2;
	SwapUint16(y1, y2);
	*/
	
	LCD_Write_COM16(0x2a,0x00);
    2980:	2100      	movs	r1, #0
    2982:	202a      	movs	r0, #42	; 0x2a
    2984:	4c17      	ldr	r4, [pc, #92]	; (29e4 <setXY+0x70>)
    2986:	47a0      	blx	r4
	LCD_Write_DATA8(x1>>8);
    2988:	0a38      	lsrs	r0, r7, #8
    298a:	4d17      	ldr	r5, [pc, #92]	; (29e8 <setXY+0x74>)
    298c:	47a8      	blx	r5
	LCD_Write_COM16(0x2a,0x01);
    298e:	2101      	movs	r1, #1
    2990:	202a      	movs	r0, #42	; 0x2a
    2992:	47a0      	blx	r4
	LCD_Write_DATA8(x1);
    2994:	b2f8      	uxtb	r0, r7
    2996:	47a8      	blx	r5
	LCD_Write_COM16(0x2a,0x02);
    2998:	2102      	movs	r1, #2
    299a:	202a      	movs	r0, #42	; 0x2a
    299c:	47a0      	blx	r4
	LCD_Write_DATA8(x2>>8);
    299e:	0a30      	lsrs	r0, r6, #8
    29a0:	47a8      	blx	r5
	LCD_Write_COM16(0x2a,0x03);
    29a2:	2103      	movs	r1, #3
    29a4:	202a      	movs	r0, #42	; 0x2a
    29a6:	47a0      	blx	r4
	LCD_Write_DATA8(x2);
    29a8:	b2f0      	uxtb	r0, r6
    29aa:	47a8      	blx	r5

	LCD_Write_COM16(0x2b,0x00);
    29ac:	2100      	movs	r1, #0
    29ae:	202b      	movs	r0, #43	; 0x2b
    29b0:	47a0      	blx	r4
	LCD_Write_DATA8(y1>>8);
    29b2:	9e00      	ldr	r6, [sp, #0]
    29b4:	0a30      	lsrs	r0, r6, #8
    29b6:	47a8      	blx	r5
	LCD_Write_COM16(0x2b,0x01);
    29b8:	2101      	movs	r1, #1
    29ba:	202b      	movs	r0, #43	; 0x2b
    29bc:	47a0      	blx	r4
	LCD_Write_DATA8(y1);
    29be:	b2f0      	uxtb	r0, r6
    29c0:	47a8      	blx	r5
	LCD_Write_COM16(0x2b,0x02);
    29c2:	2102      	movs	r1, #2
    29c4:	202b      	movs	r0, #43	; 0x2b
    29c6:	47a0      	blx	r4
	LCD_Write_DATA8(y2>>8);
    29c8:	9e01      	ldr	r6, [sp, #4]
    29ca:	0a30      	lsrs	r0, r6, #8
    29cc:	47a8      	blx	r5
	LCD_Write_COM16(0x2b,0x03);
    29ce:	2103      	movs	r1, #3
    29d0:	202b      	movs	r0, #43	; 0x2b
    29d2:	47a0      	blx	r4
	LCD_Write_DATA8(y2);
    29d4:	b2f0      	uxtb	r0, r6
    29d6:	47a8      	blx	r5

	LCD_Write_COM16(0x2c,0x00);
    29d8:	2100      	movs	r1, #0
    29da:	202c      	movs	r0, #44	; 0x2c
    29dc:	47a0      	blx	r4
}
    29de:	b003      	add	sp, #12
    29e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    29e2:	46c0      	nop			; (mov r8, r8)
    29e4:	00002ba1 	.word	0x00002ba1
    29e8:	00002bd1 	.word	0x00002bd1

000029ec <fillRect>:
{
    29ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    29ee:	46ce      	mov	lr, r9
    29f0:	4647      	mov	r7, r8
    29f2:	b580      	push	{r7, lr}
    29f4:	b083      	sub	sp, #12
    29f6:	0006      	movs	r6, r0
    29f8:	4689      	mov	r9, r1
    29fa:	0014      	movs	r4, r2
    29fc:	001d      	movs	r5, r3
	if (x1>x2)
    29fe:	4290      	cmp	r0, r2
    2a00:	dd01      	ble.n	2a06 <fillRect+0x1a>
		x1 = x2;
    2a02:	0016      	movs	r6, r2
		x2 = temp;
    2a04:	0004      	movs	r4, r0
	if (y1>y2)
    2a06:	45a9      	cmp	r9, r5
    2a08:	dd02      	ble.n	2a10 <fillRect+0x24>
    2a0a:	0033      	movs	r3, r6
		x1 = x2;
    2a0c:	0026      	movs	r6, r4
		x2 = temp;
    2a0e:	001c      	movs	r4, r3
	REG_PORT_OUTCLR1 = LCD_CS;
    2a10:	2380      	movs	r3, #128	; 0x80
    2a12:	03db      	lsls	r3, r3, #15
    2a14:	4698      	mov	r8, r3
    2a16:	4b11      	ldr	r3, [pc, #68]	; (2a5c <fillRect+0x70>)
    2a18:	4642      	mov	r2, r8
    2a1a:	601a      	str	r2, [r3, #0]
	setXY(x1, y1, x2, y2);
    2a1c:	b2ab      	uxth	r3, r5
    2a1e:	b2a2      	uxth	r2, r4
    2a20:	4649      	mov	r1, r9
    2a22:	4668      	mov	r0, sp
    2a24:	80c1      	strh	r1, [r0, #6]
    2a26:	88c1      	ldrh	r1, [r0, #6]
    2a28:	b2b0      	uxth	r0, r6
    2a2a:	4f0d      	ldr	r7, [pc, #52]	; (2a60 <fillRect+0x74>)
    2a2c:	47b8      	blx	r7
	REG_PORT_OUTSET1 = LCD_DC;
    2a2e:	4f0d      	ldr	r7, [pc, #52]	; (2a64 <fillRect+0x78>)
    2a30:	2380      	movs	r3, #128	; 0x80
    2a32:	041b      	lsls	r3, r3, #16
    2a34:	603b      	str	r3, [r7, #0]
	(((long)(x2-x1)+1)*((long)(y2-y1)+1)));
    2a36:	1ba4      	subs	r4, r4, r6
    2a38:	3401      	adds	r4, #1
    2a3a:	464b      	mov	r3, r9
    2a3c:	1aea      	subs	r2, r5, r3
    2a3e:	3201      	adds	r2, #1
	LCD_Fast_Fill(fore_Color_High, fore_Color_Low,
    2a40:	4362      	muls	r2, r4
    2a42:	4b09      	ldr	r3, [pc, #36]	; (2a68 <fillRect+0x7c>)
    2a44:	8819      	ldrh	r1, [r3, #0]
    2a46:	4b09      	ldr	r3, [pc, #36]	; (2a6c <fillRect+0x80>)
    2a48:	8818      	ldrh	r0, [r3, #0]
    2a4a:	4b09      	ldr	r3, [pc, #36]	; (2a70 <fillRect+0x84>)
    2a4c:	4798      	blx	r3
	REG_PORT_OUTSET1 = LCD_CS;
    2a4e:	4643      	mov	r3, r8
    2a50:	603b      	str	r3, [r7, #0]
}
    2a52:	b003      	add	sp, #12
    2a54:	bc0c      	pop	{r2, r3}
    2a56:	4690      	mov	r8, r2
    2a58:	4699      	mov	r9, r3
    2a5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a5c:	41004494 	.word	0x41004494
    2a60:	00002975 	.word	0x00002975
    2a64:	41004498 	.word	0x41004498
    2a68:	20000b54 	.word	0x20000b54
    2a6c:	20000b52 	.word	0x20000b52
    2a70:	00002901 	.word	0x00002901

00002a74 <fillRectBackColor>:
{
    2a74:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a76:	46ce      	mov	lr, r9
    2a78:	4647      	mov	r7, r8
    2a7a:	b580      	push	{r7, lr}
    2a7c:	b083      	sub	sp, #12
    2a7e:	0006      	movs	r6, r0
    2a80:	4689      	mov	r9, r1
    2a82:	0014      	movs	r4, r2
    2a84:	001d      	movs	r5, r3
	if (x1>x2)
    2a86:	4290      	cmp	r0, r2
    2a88:	dd01      	ble.n	2a8e <fillRectBackColor+0x1a>
		x1 = x2;
    2a8a:	0016      	movs	r6, r2
		x2 = temp;
    2a8c:	0004      	movs	r4, r0
	if (y1>y2)
    2a8e:	45a9      	cmp	r9, r5
    2a90:	dd02      	ble.n	2a98 <fillRectBackColor+0x24>
    2a92:	0033      	movs	r3, r6
		x1 = x2;
    2a94:	0026      	movs	r6, r4
		x2 = temp;
    2a96:	001c      	movs	r4, r3
	REG_PORT_OUTCLR1 = LCD_CS;
    2a98:	2380      	movs	r3, #128	; 0x80
    2a9a:	03db      	lsls	r3, r3, #15
    2a9c:	4698      	mov	r8, r3
    2a9e:	4b11      	ldr	r3, [pc, #68]	; (2ae4 <fillRectBackColor+0x70>)
    2aa0:	4642      	mov	r2, r8
    2aa2:	601a      	str	r2, [r3, #0]
	setXY(x1, y1, x2, y2);
    2aa4:	b2ab      	uxth	r3, r5
    2aa6:	b2a2      	uxth	r2, r4
    2aa8:	4649      	mov	r1, r9
    2aaa:	4668      	mov	r0, sp
    2aac:	80c1      	strh	r1, [r0, #6]
    2aae:	88c1      	ldrh	r1, [r0, #6]
    2ab0:	b2b0      	uxth	r0, r6
    2ab2:	4f0d      	ldr	r7, [pc, #52]	; (2ae8 <fillRectBackColor+0x74>)
    2ab4:	47b8      	blx	r7
	REG_PORT_OUTSET1 = LCD_DC;
    2ab6:	4f0d      	ldr	r7, [pc, #52]	; (2aec <fillRectBackColor+0x78>)
    2ab8:	2380      	movs	r3, #128	; 0x80
    2aba:	041b      	lsls	r3, r3, #16
    2abc:	603b      	str	r3, [r7, #0]
	(((long)(x2-x1)+1)*((long)(y2-y1)+1)));
    2abe:	1ba4      	subs	r4, r4, r6
    2ac0:	3401      	adds	r4, #1
    2ac2:	464b      	mov	r3, r9
    2ac4:	1aea      	subs	r2, r5, r3
    2ac6:	3201      	adds	r2, #1
	LCD_Fast_Fill(back_Color_High, back_Color_Low,
    2ac8:	4362      	muls	r2, r4
    2aca:	4b09      	ldr	r3, [pc, #36]	; (2af0 <fillRectBackColor+0x7c>)
    2acc:	8819      	ldrh	r1, [r3, #0]
    2ace:	4b09      	ldr	r3, [pc, #36]	; (2af4 <fillRectBackColor+0x80>)
    2ad0:	8818      	ldrh	r0, [r3, #0]
    2ad2:	4b09      	ldr	r3, [pc, #36]	; (2af8 <fillRectBackColor+0x84>)
    2ad4:	4798      	blx	r3
	REG_PORT_OUTSET1 = LCD_CS;
    2ad6:	4643      	mov	r3, r8
    2ad8:	603b      	str	r3, [r7, #0]
}
    2ada:	b003      	add	sp, #12
    2adc:	bc0c      	pop	{r2, r3}
    2ade:	4690      	mov	r8, r2
    2ae0:	4699      	mov	r9, r3
    2ae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2ae4:	41004494 	.word	0x41004494
    2ae8:	00002975 	.word	0x00002975
    2aec:	41004498 	.word	0x41004498
    2af0:	20000b50 	.word	0x20000b50
    2af4:	20000b56 	.word	0x20000b56
    2af8:	00002901 	.word	0x00002901

00002afc <clrXY>:
{
    2afc:	b510      	push	{r4, lr}
	setXY(0,0,display_X_size,display_Y_size);
    2afe:	4b04      	ldr	r3, [pc, #16]	; (2b10 <clrXY+0x14>)
    2b00:	881b      	ldrh	r3, [r3, #0]
    2b02:	4a04      	ldr	r2, [pc, #16]	; (2b14 <clrXY+0x18>)
    2b04:	8812      	ldrh	r2, [r2, #0]
    2b06:	2100      	movs	r1, #0
    2b08:	2000      	movs	r0, #0
    2b0a:	4c03      	ldr	r4, [pc, #12]	; (2b18 <clrXY+0x1c>)
    2b0c:	47a0      	blx	r4
}
    2b0e:	bd10      	pop	{r4, pc}
    2b10:	20000156 	.word	0x20000156
    2b14:	20000154 	.word	0x20000154
    2b18:	00002975 	.word	0x00002975

00002b1c <clrScr>:
{
    2b1c:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = LCD_CS;
    2b1e:	2280      	movs	r2, #128	; 0x80
    2b20:	03d2      	lsls	r2, r2, #15
    2b22:	4b02      	ldr	r3, [pc, #8]	; (2b2c <clrScr+0x10>)
    2b24:	601a      	str	r2, [r3, #0]
	clrXY();
    2b26:	4b02      	ldr	r3, [pc, #8]	; (2b30 <clrScr+0x14>)
    2b28:	4798      	blx	r3
}
    2b2a:	bd10      	pop	{r4, pc}
    2b2c:	41004494 	.word	0x41004494
    2b30:	00002afd 	.word	0x00002afd

00002b34 <setPixel>:

void setPixel(uint16_t color)
{
    2b34:	b510      	push	{r4, lr}
	//it sets it to a 16-bit color.
	LCD_Write_DATA16((color>>8),(color&0xFF));
    2b36:	b2c1      	uxtb	r1, r0
    2b38:	0a00      	lsrs	r0, r0, #8
    2b3a:	4b01      	ldr	r3, [pc, #4]	; (2b40 <setPixel+0xc>)
    2b3c:	4798      	blx	r3
}
    2b3e:	bd10      	pop	{r4, pc}
    2b40:	00002bb9 	.word	0x00002bb9

00002b44 <clearScreen>:
	LCD_Write_DATA8(0x80);
	REG_PORT_OUTSET1 = LCD_CS;
}
*/
void clearScreen(void)
{
    2b44:	b510      	push	{r4, lr}
	fore_Color_High = ((r&248)|g>>5);
    2b46:	2300      	movs	r3, #0
    2b48:	4a06      	ldr	r2, [pc, #24]	; (2b64 <clearScreen+0x20>)
    2b4a:	8013      	strh	r3, [r2, #0]
	fore_Color_Low = ((g&28)<<3|b>>3);
    2b4c:	4a06      	ldr	r2, [pc, #24]	; (2b68 <clearScreen+0x24>)
    2b4e:	8013      	strh	r3, [r2, #0]
	setColorRGB(0,0,0);
	fillRect(0,0,display_Y_size,display_X_size);
    2b50:	4b06      	ldr	r3, [pc, #24]	; (2b6c <clearScreen+0x28>)
    2b52:	881b      	ldrh	r3, [r3, #0]
    2b54:	4a06      	ldr	r2, [pc, #24]	; (2b70 <clearScreen+0x2c>)
    2b56:	8812      	ldrh	r2, [r2, #0]
    2b58:	2100      	movs	r1, #0
    2b5a:	2000      	movs	r0, #0
    2b5c:	4c05      	ldr	r4, [pc, #20]	; (2b74 <clearScreen+0x30>)
    2b5e:	47a0      	blx	r4
}
    2b60:	bd10      	pop	{r4, pc}
    2b62:	46c0      	nop			; (mov r8, r8)
    2b64:	20000b52 	.word	0x20000b52
    2b68:	20000b54 	.word	0x20000b54
    2b6c:	20000154 	.word	0x20000154
    2b70:	20000156 	.word	0x20000156
    2b74:	000029ed 	.word	0x000029ed

00002b78 <LCD_Write_Bus>:
	fillRect(0,0,799,489);
		
}

void LCD_Write_Bus(char VH, char VL)
{
    2b78:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = 0x0000ffff;
    2b7a:	4c06      	ldr	r4, [pc, #24]	; (2b94 <LCD_Write_Bus+0x1c>)
    2b7c:	4b06      	ldr	r3, [pc, #24]	; (2b98 <LCD_Write_Bus+0x20>)
    2b7e:	6023      	str	r3, [r4, #0]
	REG_PORT_OUTSET1 = (VH << 8) | VL;
    2b80:	0200      	lsls	r0, r0, #8
    2b82:	4301      	orrs	r1, r0
    2b84:	4b05      	ldr	r3, [pc, #20]	; (2b9c <LCD_Write_Bus+0x24>)
    2b86:	6019      	str	r1, [r3, #0]
	REG_PORT_OUTCLR1 = LCD_WR;
    2b88:	2280      	movs	r2, #128	; 0x80
    2b8a:	0292      	lsls	r2, r2, #10
    2b8c:	6022      	str	r2, [r4, #0]
	REG_PORT_OUTSET1 = LCD_WR;
    2b8e:	601a      	str	r2, [r3, #0]
}
    2b90:	bd10      	pop	{r4, pc}
    2b92:	46c0      	nop			; (mov r8, r8)
    2b94:	41004494 	.word	0x41004494
    2b98:	0000ffff 	.word	0x0000ffff
    2b9c:	41004498 	.word	0x41004498

00002ba0 <LCD_Write_COM16>:

void LCD_Write_COM16(char VH, char VL)
{
    2ba0:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = LCD_DC;
    2ba2:	2280      	movs	r2, #128	; 0x80
    2ba4:	0412      	lsls	r2, r2, #16
    2ba6:	4b02      	ldr	r3, [pc, #8]	; (2bb0 <LCD_Write_COM16+0x10>)
    2ba8:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(VH,VL);
    2baa:	4b02      	ldr	r3, [pc, #8]	; (2bb4 <LCD_Write_COM16+0x14>)
    2bac:	4798      	blx	r3
}
    2bae:	bd10      	pop	{r4, pc}
    2bb0:	41004494 	.word	0x41004494
    2bb4:	00002b79 	.word	0x00002b79

00002bb8 <LCD_Write_DATA16>:
	REG_PORT_OUTCLR1 = LCD_DC;
	LCD_Write_Bus(0x00, VL);
}

void LCD_Write_DATA16(char VH, char VL)
{
    2bb8:	b510      	push	{r4, lr}
	REG_PORT_OUTSET1 = LCD_DC;
    2bba:	2280      	movs	r2, #128	; 0x80
    2bbc:	0412      	lsls	r2, r2, #16
    2bbe:	4b02      	ldr	r3, [pc, #8]	; (2bc8 <LCD_Write_DATA16+0x10>)
    2bc0:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(VH,VL);
    2bc2:	4b02      	ldr	r3, [pc, #8]	; (2bcc <LCD_Write_DATA16+0x14>)
    2bc4:	4798      	blx	r3
}
    2bc6:	bd10      	pop	{r4, pc}
    2bc8:	41004498 	.word	0x41004498
    2bcc:	00002b79 	.word	0x00002b79

00002bd0 <LCD_Write_DATA8>:

void LCD_Write_DATA8(char VL)
{
    2bd0:	b510      	push	{r4, lr}
    2bd2:	0001      	movs	r1, r0
	REG_PORT_OUTSET1 = LCD_DC;
    2bd4:	2280      	movs	r2, #128	; 0x80
    2bd6:	0412      	lsls	r2, r2, #16
    2bd8:	4b02      	ldr	r3, [pc, #8]	; (2be4 <LCD_Write_DATA8+0x14>)
    2bda:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(0x00, VL);
    2bdc:	2000      	movs	r0, #0
    2bde:	4b02      	ldr	r3, [pc, #8]	; (2be8 <LCD_Write_DATA8+0x18>)
    2be0:	4798      	blx	r3
}
    2be2:	bd10      	pop	{r4, pc}
    2be4:	41004498 	.word	0x41004498
    2be8:	00002b79 	.word	0x00002b79

00002bec <InitLCD>:
{
    2bec:	b5f0      	push	{r4, r5, r6, r7, lr}
    2bee:	46c6      	mov	lr, r8
    2bf0:	b500      	push	{lr}
    2bf2:	b082      	sub	sp, #8
	REG_PORT_DIRSET1 = 0x0000ffff;		//LCD data bus, PB00 - PB15
    2bf4:	4b80      	ldr	r3, [pc, #512]	; (2df8 <InitLCD+0x20c>)
    2bf6:	4f81      	ldr	r7, [pc, #516]	; (2dfc <InitLCD+0x210>)
    2bf8:	601f      	str	r7, [r3, #0]
	REG_PORT_DIRSET1 = LCD_Reset;
    2bfa:	2580      	movs	r5, #128	; 0x80
    2bfc:	05ed      	lsls	r5, r5, #23
    2bfe:	601d      	str	r5, [r3, #0]
	REG_PORT_DIRSET1 = LCD_CS;
    2c00:	2680      	movs	r6, #128	; 0x80
    2c02:	03f6      	lsls	r6, r6, #15
    2c04:	601e      	str	r6, [r3, #0]
	REG_PORT_DIRSET1 = LCD_WR;
    2c06:	2080      	movs	r0, #128	; 0x80
    2c08:	0280      	lsls	r0, r0, #10
    2c0a:	6018      	str	r0, [r3, #0]
	REG_PORT_DIRSET1 = LCD_DC;
    2c0c:	2180      	movs	r1, #128	; 0x80
    2c0e:	0409      	lsls	r1, r1, #16
    2c10:	6019      	str	r1, [r3, #0]
	REG_PORT_DIRSET1 = LCD_RD;
    2c12:	2280      	movs	r2, #128	; 0x80
    2c14:	0252      	lsls	r2, r2, #9
    2c16:	601a      	str	r2, [r3, #0]
	REG_PORT_OUTCLR1 = 0x0000ffff;
    2c18:	4c79      	ldr	r4, [pc, #484]	; (2e00 <InitLCD+0x214>)
    2c1a:	6027      	str	r7, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_Reset;
    2c1c:	6025      	str	r5, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_CS;
    2c1e:	6026      	str	r6, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_WR;
    2c20:	6020      	str	r0, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_DC;
    2c22:	6021      	str	r1, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_RD;
    2c24:	6022      	str	r2, [r4, #0]
	REG_PORT_DIRSET1 = PORT_PB16;
    2c26:	601a      	str	r2, [r3, #0]
	REG_PORT_OUTSET1 = PORT_PB16;
    2c28:	4f76      	ldr	r7, [pc, #472]	; (2e04 <InitLCD+0x218>)
    2c2a:	603a      	str	r2, [r7, #0]
	REG_PORT_OUTSET1 = LCD_Reset;
    2c2c:	603d      	str	r5, [r7, #0]
	delay_ms(5);
    2c2e:	2005      	movs	r0, #5
    2c30:	4b75      	ldr	r3, [pc, #468]	; (2e08 <InitLCD+0x21c>)
    2c32:	4698      	mov	r8, r3
    2c34:	4798      	blx	r3
	REG_PORT_OUTCLR1 = LCD_Reset;
    2c36:	6025      	str	r5, [r4, #0]
	delay_ms(5);
    2c38:	2005      	movs	r0, #5
    2c3a:	47c0      	blx	r8
	REG_PORT_OUTSET1 = LCD_Reset;
    2c3c:	603d      	str	r5, [r7, #0]
	REG_PORT_OUTCLR1 = LCD_CS;
    2c3e:	6026      	str	r6, [r4, #0]
	for(int i = 0; i < 70; i++)
    2c40:	2400      	movs	r4, #0
		REG_PORT_OUTCLR1 = LCD_DC;
    2c42:	4b6f      	ldr	r3, [pc, #444]	; (2e00 <InitLCD+0x214>)
    2c44:	4698      	mov	r8, r3
    2c46:	2580      	movs	r5, #128	; 0x80
    2c48:	042d      	lsls	r5, r5, #16
    2c4a:	002f      	movs	r7, r5
		LCD_Write_COM16(belial[i],mulciber[i]);
    2c4c:	4e6f      	ldr	r6, [pc, #444]	; (2e0c <InitLCD+0x220>)
		REG_PORT_OUTCLR1 = LCD_DC;
    2c4e:	4643      	mov	r3, r8
    2c50:	601f      	str	r7, [r3, #0]
		LCD_Write_COM16(belial[i],mulciber[i]);
    2c52:	5da1      	ldrb	r1, [r4, r6]
    2c54:	4b6e      	ldr	r3, [pc, #440]	; (2e10 <InitLCD+0x224>)
    2c56:	5ce0      	ldrb	r0, [r4, r3]
    2c58:	4b6e      	ldr	r3, [pc, #440]	; (2e14 <InitLCD+0x228>)
    2c5a:	4798      	blx	r3
		REG_PORT_OUTSET1 = LCD_DC;
    2c5c:	4b69      	ldr	r3, [pc, #420]	; (2e04 <InitLCD+0x218>)
    2c5e:	601d      	str	r5, [r3, #0]
		LCD_Write_DATA8(lucifer[i]);
    2c60:	4b6d      	ldr	r3, [pc, #436]	; (2e18 <InitLCD+0x22c>)
    2c62:	5ce0      	ldrb	r0, [r4, r3]
    2c64:	4b6d      	ldr	r3, [pc, #436]	; (2e1c <InitLCD+0x230>)
    2c66:	4798      	blx	r3
	for(int i = 0; i < 70; i++)
    2c68:	3401      	adds	r4, #1
    2c6a:	2c46      	cmp	r4, #70	; 0x46
    2c6c:	d1ef      	bne.n	2c4e <InitLCD+0x62>
    2c6e:	23d1      	movs	r3, #209	; 0xd1
    2c70:	9301      	str	r3, [sp, #4]
			LCD_Write_COM16(k,0x00);
    2c72:	4d68      	ldr	r5, [pc, #416]	; (2e14 <InitLCD+0x228>)
			LCD_Write_DATA8(beelzebub[l]);
    2c74:	4f69      	ldr	r7, [pc, #420]	; (2e1c <InitLCD+0x230>)
    2c76:	4c6a      	ldr	r4, [pc, #424]	; (2e20 <InitLCD+0x234>)
    2c78:	0026      	movs	r6, r4
    2c7a:	3634      	adds	r6, #52	; 0x34
			LCD_Write_COM16(k,0x00);
    2c7c:	2100      	movs	r1, #0
    2c7e:	9801      	ldr	r0, [sp, #4]
    2c80:	47a8      	blx	r5
			LCD_Write_DATA8(beelzebub[l]);
    2c82:	7820      	ldrb	r0, [r4, #0]
    2c84:	47b8      	blx	r7
    2c86:	3401      	adds	r4, #1
		for(int l = 0; l < 52; l++)
    2c88:	42a6      	cmp	r6, r4
    2c8a:	d1f7      	bne.n	2c7c <InitLCD+0x90>
	for(char k = 0xD1; k < 0xD6; k++)
    2c8c:	9b01      	ldr	r3, [sp, #4]
    2c8e:	3301      	adds	r3, #1
    2c90:	b2db      	uxtb	r3, r3
    2c92:	9301      	str	r3, [sp, #4]
    2c94:	2bd6      	cmp	r3, #214	; 0xd6
    2c96:	d1ee      	bne.n	2c76 <InitLCD+0x8a>
	LCD_Write_COM16(0xF0, 0x00);LCD_Write_DATA8(0x55);
    2c98:	2100      	movs	r1, #0
    2c9a:	20f0      	movs	r0, #240	; 0xf0
    2c9c:	4c5d      	ldr	r4, [pc, #372]	; (2e14 <InitLCD+0x228>)
    2c9e:	47a0      	blx	r4
    2ca0:	2055      	movs	r0, #85	; 0x55
    2ca2:	4d5e      	ldr	r5, [pc, #376]	; (2e1c <InitLCD+0x230>)
    2ca4:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x01);LCD_Write_DATA8(0xAA);	
    2ca6:	2101      	movs	r1, #1
    2ca8:	20f0      	movs	r0, #240	; 0xf0
    2caa:	47a0      	blx	r4
    2cac:	20aa      	movs	r0, #170	; 0xaa
    2cae:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x02);LCD_Write_DATA8(0x52);	
    2cb0:	2102      	movs	r1, #2
    2cb2:	20f0      	movs	r0, #240	; 0xf0
    2cb4:	47a0      	blx	r4
    2cb6:	2052      	movs	r0, #82	; 0x52
    2cb8:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x03);LCD_Write_DATA8(0x08);	
    2cba:	2103      	movs	r1, #3
    2cbc:	20f0      	movs	r0, #240	; 0xf0
    2cbe:	47a0      	blx	r4
    2cc0:	2008      	movs	r0, #8
    2cc2:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x04);LCD_Write_DATA8(0x00);	
    2cc4:	2104      	movs	r1, #4
    2cc6:	20f0      	movs	r0, #240	; 0xf0
    2cc8:	47a0      	blx	r4
    2cca:	2000      	movs	r0, #0
    2ccc:	47a8      	blx	r5
	LCD_Write_COM16(0xB1, 0x00);LCD_Write_DATA8(0xCC);
    2cce:	2100      	movs	r1, #0
    2cd0:	20b1      	movs	r0, #177	; 0xb1
    2cd2:	47a0      	blx	r4
    2cd4:	20cc      	movs	r0, #204	; 0xcc
    2cd6:	47a8      	blx	r5
	LCD_Write_COM16(0xB1, 0x01);LCD_Write_DATA8(0x00);	
    2cd8:	2101      	movs	r1, #1
    2cda:	20b1      	movs	r0, #177	; 0xb1
    2cdc:	47a0      	blx	r4
    2cde:	2000      	movs	r0, #0
    2ce0:	47a8      	blx	r5
	LCD_Write_COM16(0xB5, 0x00);LCD_Write_DATA8(0x50);	
    2ce2:	2100      	movs	r1, #0
    2ce4:	20b5      	movs	r0, #181	; 0xb5
    2ce6:	47a0      	blx	r4
    2ce8:	2050      	movs	r0, #80	; 0x50
    2cea:	47a8      	blx	r5
	LCD_Write_COM16(0xB6, 0x00);LCD_Write_DATA8(0x05);
    2cec:	2100      	movs	r1, #0
    2cee:	20b6      	movs	r0, #182	; 0xb6
    2cf0:	47a0      	blx	r4
    2cf2:	2005      	movs	r0, #5
    2cf4:	47a8      	blx	r5
	LCD_Write_COM16(0xB7, 0x00);LCD_Write_DATA8(0x70);
    2cf6:	2100      	movs	r1, #0
    2cf8:	20b7      	movs	r0, #183	; 0xb7
    2cfa:	47a0      	blx	r4
    2cfc:	2070      	movs	r0, #112	; 0x70
    2cfe:	47a8      	blx	r5
	LCD_Write_COM16(0xB7, 0x01);LCD_Write_DATA8(0x70);
    2d00:	2101      	movs	r1, #1
    2d02:	20b7      	movs	r0, #183	; 0xb7
    2d04:	47a0      	blx	r4
    2d06:	2070      	movs	r0, #112	; 0x70
    2d08:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x00);LCD_Write_DATA8(0x01);
    2d0a:	2100      	movs	r1, #0
    2d0c:	20b8      	movs	r0, #184	; 0xb8
    2d0e:	47a0      	blx	r4
    2d10:	2001      	movs	r0, #1
    2d12:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x01);LCD_Write_DATA8(0x03);
    2d14:	2101      	movs	r1, #1
    2d16:	20b8      	movs	r0, #184	; 0xb8
    2d18:	47a0      	blx	r4
    2d1a:	2003      	movs	r0, #3
    2d1c:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x02);LCD_Write_DATA8(0x03);
    2d1e:	2102      	movs	r1, #2
    2d20:	20b8      	movs	r0, #184	; 0xb8
    2d22:	47a0      	blx	r4
    2d24:	2003      	movs	r0, #3
    2d26:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x03);LCD_Write_DATA8(0x03);	
    2d28:	2103      	movs	r1, #3
    2d2a:	20b8      	movs	r0, #184	; 0xb8
    2d2c:	47a0      	blx	r4
    2d2e:	2003      	movs	r0, #3
    2d30:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x00);LCD_Write_DATA8(0x02);
    2d32:	2100      	movs	r1, #0
    2d34:	20bc      	movs	r0, #188	; 0xbc
    2d36:	47a0      	blx	r4
    2d38:	2002      	movs	r0, #2
    2d3a:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x01);LCD_Write_DATA8(0x00);
    2d3c:	2101      	movs	r1, #1
    2d3e:	20bc      	movs	r0, #188	; 0xbc
    2d40:	47a0      	blx	r4
    2d42:	2000      	movs	r0, #0
    2d44:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x02);LCD_Write_DATA8(0x00);
    2d46:	2102      	movs	r1, #2
    2d48:	20bc      	movs	r0, #188	; 0xbc
    2d4a:	47a0      	blx	r4
    2d4c:	2000      	movs	r0, #0
    2d4e:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x00);LCD_Write_DATA8(0xD0);
    2d50:	2100      	movs	r1, #0
    2d52:	20c9      	movs	r0, #201	; 0xc9
    2d54:	47a0      	blx	r4
    2d56:	20d0      	movs	r0, #208	; 0xd0
    2d58:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x01);LCD_Write_DATA8(0x02);
    2d5a:	2101      	movs	r1, #1
    2d5c:	20c9      	movs	r0, #201	; 0xc9
    2d5e:	47a0      	blx	r4
    2d60:	2002      	movs	r0, #2
    2d62:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x02);LCD_Write_DATA8(0x50);
    2d64:	2102      	movs	r1, #2
    2d66:	20c9      	movs	r0, #201	; 0xc9
    2d68:	47a0      	blx	r4
    2d6a:	2050      	movs	r0, #80	; 0x50
    2d6c:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x03);LCD_Write_DATA8(0x50);
    2d6e:	2103      	movs	r1, #3
    2d70:	20c9      	movs	r0, #201	; 0xc9
    2d72:	47a0      	blx	r4
    2d74:	2050      	movs	r0, #80	; 0x50
    2d76:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x04);LCD_Write_DATA8(0x50);
    2d78:	2104      	movs	r1, #4
    2d7a:	20c9      	movs	r0, #201	; 0xc9
    2d7c:	47a0      	blx	r4
    2d7e:	2050      	movs	r0, #80	; 0x50
    2d80:	47a8      	blx	r5
	LCD_Write_COM16(0x35, 0x00);LCD_Write_DATA8(0x00);
    2d82:	2100      	movs	r1, #0
    2d84:	2035      	movs	r0, #53	; 0x35
    2d86:	47a0      	blx	r4
    2d88:	2000      	movs	r0, #0
    2d8a:	47a8      	blx	r5
	LCD_Write_COM16(0x3A, 0x00);LCD_Write_DATA8(0x55);
    2d8c:	2100      	movs	r1, #0
    2d8e:	203a      	movs	r0, #58	; 0x3a
    2d90:	47a0      	blx	r4
    2d92:	2055      	movs	r0, #85	; 0x55
    2d94:	47a8      	blx	r5
	LCD_Write_COM16(0x36, 0x00);LCD_Write_DATA8(0xE2);  //This is the MADCTL register
    2d96:	2100      	movs	r1, #0
    2d98:	2036      	movs	r0, #54	; 0x36
    2d9a:	47a0      	blx	r4
    2d9c:	20e2      	movs	r0, #226	; 0xe2
    2d9e:	47a8      	blx	r5
  	LCD_Write_COM16(0x11,0x00);   //Start Up  
    2da0:	2100      	movs	r1, #0
    2da2:	2011      	movs	r0, #17
    2da4:	47a0      	blx	r4
  	delay_ms(100);
    2da6:	2064      	movs	r0, #100	; 0x64
    2da8:	4e17      	ldr	r6, [pc, #92]	; (2e08 <InitLCD+0x21c>)
    2daa:	47b0      	blx	r6
  	LCD_Write_COM16(0x29,0x00);   //Display On  
    2dac:	2100      	movs	r1, #0
    2dae:	2029      	movs	r0, #41	; 0x29
    2db0:	47a0      	blx	r4
   	delay_ms(100);
    2db2:	2064      	movs	r0, #100	; 0x64
    2db4:	47b0      	blx	r6
	LCD_Write_COM16(0x51,0x00);LCD_Write_DATA8(0xFF);
    2db6:	2100      	movs	r1, #0
    2db8:	2051      	movs	r0, #81	; 0x51
    2dba:	47a0      	blx	r4
    2dbc:	20ff      	movs	r0, #255	; 0xff
    2dbe:	47a8      	blx	r5
	REG_PORT_OUTSET1 = LCD_CS;
    2dc0:	2280      	movs	r2, #128	; 0x80
    2dc2:	03d2      	lsls	r2, r2, #15
    2dc4:	4b0f      	ldr	r3, [pc, #60]	; (2e04 <InitLCD+0x218>)
    2dc6:	601a      	str	r2, [r3, #0]
	clrScr();
    2dc8:	4b16      	ldr	r3, [pc, #88]	; (2e24 <InitLCD+0x238>)
    2dca:	4798      	blx	r3
	setColorRGB(0,0,0);
    2dcc:	2200      	movs	r2, #0
    2dce:	2100      	movs	r1, #0
    2dd0:	2000      	movs	r0, #0
    2dd2:	4b15      	ldr	r3, [pc, #84]	; (2e28 <InitLCD+0x23c>)
    2dd4:	4798      	blx	r3
	setBackColorRGB(0, 0, 0);
    2dd6:	2200      	movs	r2, #0
    2dd8:	2100      	movs	r1, #0
    2dda:	2000      	movs	r0, #0
    2ddc:	4b13      	ldr	r3, [pc, #76]	; (2e2c <InitLCD+0x240>)
    2dde:	4798      	blx	r3
	fillRect(0,0,799,489);
    2de0:	23ea      	movs	r3, #234	; 0xea
    2de2:	33ff      	adds	r3, #255	; 0xff
    2de4:	4a12      	ldr	r2, [pc, #72]	; (2e30 <InitLCD+0x244>)
    2de6:	2100      	movs	r1, #0
    2de8:	2000      	movs	r0, #0
    2dea:	4c12      	ldr	r4, [pc, #72]	; (2e34 <InitLCD+0x248>)
    2dec:	47a0      	blx	r4
}
    2dee:	b002      	add	sp, #8
    2df0:	bc04      	pop	{r2}
    2df2:	4690      	mov	r8, r2
    2df4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2df6:	46c0      	nop			; (mov r8, r8)
    2df8:	41004488 	.word	0x41004488
    2dfc:	0000ffff 	.word	0x0000ffff
    2e00:	41004494 	.word	0x41004494
    2e04:	41004498 	.word	0x41004498
    2e08:	00000401 	.word	0x00000401
    2e0c:	00007e0c 	.word	0x00007e0c
    2e10:	00007d7c 	.word	0x00007d7c
    2e14:	00002ba1 	.word	0x00002ba1
    2e18:	00007dc4 	.word	0x00007dc4
    2e1c:	00002bd1 	.word	0x00002bd1
    2e20:	00007d48 	.word	0x00007d48
    2e24:	00002b1d 	.word	0x00002b1d
    2e28:	000028b1 	.word	0x000028b1
    2e2c:	000028d9 	.word	0x000028d9
    2e30:	0000031f 	.word	0x0000031f
    2e34:	000029ed 	.word	0x000029ed

00002e38 <SysTick_Handler>:

/**************************INTERRUPT STUFF****************************/

void SysTick_Handler(void)
{
	ul_tickcount++;
    2e38:	4a02      	ldr	r2, [pc, #8]	; (2e44 <SysTick_Handler+0xc>)
    2e3a:	8813      	ldrh	r3, [r2, #0]
    2e3c:	3301      	adds	r3, #1
    2e3e:	8013      	strh	r3, [r2, #0]
}
    2e40:	4770      	bx	lr
    2e42:	46c0      	nop			; (mov r8, r8)
    2e44:	20000366 	.word	0x20000366

00002e48 <conf_systick>:

void conf_systick(void)
{
    2e48:	b510      	push	{r4, lr}
	//system_core_clk=48Mhz / 1000=48kHz systic clk if 48Mhz  is used
	SysTick_Config(SystemCoreClock/1000);
    2e4a:	4b0e      	ldr	r3, [pc, #56]	; (2e84 <conf_systick+0x3c>)
    2e4c:	6818      	ldr	r0, [r3, #0]
    2e4e:	21fa      	movs	r1, #250	; 0xfa
    2e50:	0089      	lsls	r1, r1, #2
    2e52:	4b0d      	ldr	r3, [pc, #52]	; (2e88 <conf_systick+0x40>)
    2e54:	4798      	blx	r3
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    2e56:	3801      	subs	r0, #1
    2e58:	4b0c      	ldr	r3, [pc, #48]	; (2e8c <conf_systick+0x44>)
    2e5a:	4298      	cmp	r0, r3
    2e5c:	d80d      	bhi.n	2e7a <conf_systick+0x32>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    2e5e:	4a0c      	ldr	r2, [pc, #48]	; (2e90 <conf_systick+0x48>)
    2e60:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    2e62:	480c      	ldr	r0, [pc, #48]	; (2e94 <conf_systick+0x4c>)
    2e64:	6a03      	ldr	r3, [r0, #32]
    2e66:	021b      	lsls	r3, r3, #8
    2e68:	0a1b      	lsrs	r3, r3, #8
    2e6a:	21c0      	movs	r1, #192	; 0xc0
    2e6c:	0609      	lsls	r1, r1, #24
    2e6e:	430b      	orrs	r3, r1
    2e70:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    2e72:	2300      	movs	r3, #0
    2e74:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    2e76:	3307      	adds	r3, #7
    2e78:	6013      	str	r3, [r2, #0]
    2e7a:	2280      	movs	r2, #128	; 0x80
    2e7c:	0612      	lsls	r2, r2, #24
    2e7e:	4b06      	ldr	r3, [pc, #24]	; (2e98 <conf_systick+0x50>)
    2e80:	601a      	str	r2, [r3, #0]
	system_interrupt_enable(SYSTEM_INTERRUPT_SYSTICK);
}
    2e82:	bd10      	pop	{r4, pc}
    2e84:	2000000c 	.word	0x2000000c
    2e88:	0000313d 	.word	0x0000313d
    2e8c:	00ffffff 	.word	0x00ffffff
    2e90:	e000e010 	.word	0xe000e010
    2e94:	e000ed00 	.word	0xe000ed00
    2e98:	e000e100 	.word	0xe000e100

00002e9c <configure_usart_USB>:

/**************************SERCOM STUFF*******************************/
void configure_usart_USB(void)
{
    2e9c:	b530      	push	{r4, r5, lr}
    2e9e:	b091      	sub	sp, #68	; 0x44
	config->data_order       = USART_DATAORDER_LSB;
    2ea0:	2380      	movs	r3, #128	; 0x80
    2ea2:	05db      	lsls	r3, r3, #23
    2ea4:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    2ea6:	2300      	movs	r3, #0
    2ea8:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    2eaa:	22ff      	movs	r2, #255	; 0xff
    2eac:	4669      	mov	r1, sp
    2eae:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    2eb0:	2200      	movs	r2, #0
    2eb2:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    2eb4:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
    2eb6:	2196      	movs	r1, #150	; 0x96
    2eb8:	0189      	lsls	r1, r1, #6
    2eba:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
    2ebc:	2101      	movs	r1, #1
    2ebe:	2024      	movs	r0, #36	; 0x24
    2ec0:	466c      	mov	r4, sp
    2ec2:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    2ec4:	3001      	adds	r0, #1
    2ec6:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    2ec8:	3125      	adds	r1, #37	; 0x25
    2eca:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    2ecc:	3101      	adds	r1, #1
    2ece:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    2ed0:	930a      	str	r3, [sp, #40]	; 0x28
	config->run_in_standby   = false;
    2ed2:	3105      	adds	r1, #5
    2ed4:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    2ed6:	3101      	adds	r1, #1
    2ed8:	5463      	strb	r3, [r4, r1]
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    2eda:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    2edc:	8223      	strh	r3, [r4, #16]
	config->lin_slave_enable      = false;
    2ede:	76e3      	strb	r3, [r4, #27]
	config->immediate_buffer_overflow_notification  = false;
    2ee0:	7622      	strb	r2, [r4, #24]
	config->start_frame_detection_enable            = false;
    2ee2:	7722      	strb	r2, [r4, #28]
	config->encoding_format_enable                  = false;
    2ee4:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    2ee6:	2313      	movs	r3, #19
    2ee8:	76a3      	strb	r3, [r4, #26]
	config->collision_detection_enable              = false;
    2eea:	7762      	strb	r2, [r4, #29]
	struct usart_config config_usart_USB;
	usart_get_config_defaults(&config_usart_USB);

		config_usart_USB.baudrate    = 9600;
		config_usart_USB.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    2eec:	2380      	movs	r3, #128	; 0x80
    2eee:	035b      	lsls	r3, r3, #13
    2ef0:	9303      	str	r3, [sp, #12]
		config_usart_USB.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    2ef2:	4b12      	ldr	r3, [pc, #72]	; (2f3c <configure_usart_USB+0xa0>)
    2ef4:	930c      	str	r3, [sp, #48]	; 0x30
		config_usart_USB.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    2ef6:	4b12      	ldr	r3, [pc, #72]	; (2f40 <configure_usart_USB+0xa4>)
    2ef8:	930d      	str	r3, [sp, #52]	; 0x34
		config_usart_USB.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    2efa:	2301      	movs	r3, #1
    2efc:	425b      	negs	r3, r3
    2efe:	930e      	str	r3, [sp, #56]	; 0x38
		config_usart_USB.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    2f00:	930f      	str	r3, [sp, #60]	; 0x3c
		while (usart_init(&usart_USB,
    2f02:	4d10      	ldr	r5, [pc, #64]	; (2f44 <configure_usart_USB+0xa8>)
    2f04:	4c10      	ldr	r4, [pc, #64]	; (2f48 <configure_usart_USB+0xac>)
    2f06:	466a      	mov	r2, sp
    2f08:	4910      	ldr	r1, [pc, #64]	; (2f4c <configure_usart_USB+0xb0>)
    2f0a:	0028      	movs	r0, r5
    2f0c:	47a0      	blx	r4
    2f0e:	2800      	cmp	r0, #0
    2f10:	d1f9      	bne.n	2f06 <configure_usart_USB+0x6a>
	SercomUsart *const usart_hw = &(module->hw->USART);
    2f12:	4d0c      	ldr	r5, [pc, #48]	; (2f44 <configure_usart_USB+0xa8>)
    2f14:	682c      	ldr	r4, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    2f16:	0020      	movs	r0, r4
    2f18:	4b0d      	ldr	r3, [pc, #52]	; (2f50 <configure_usart_USB+0xb4>)
    2f1a:	4798      	blx	r3
    2f1c:	231f      	movs	r3, #31
    2f1e:	4018      	ands	r0, r3
    2f20:	3b1e      	subs	r3, #30
    2f22:	4083      	lsls	r3, r0
    2f24:	4a0b      	ldr	r2, [pc, #44]	; (2f54 <configure_usart_USB+0xb8>)
    2f26:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2f28:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2f2a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2f2c:	2b00      	cmp	r3, #0
    2f2e:	d1fc      	bne.n	2f2a <configure_usart_USB+0x8e>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    2f30:	6823      	ldr	r3, [r4, #0]
    2f32:	2202      	movs	r2, #2
    2f34:	4313      	orrs	r3, r2
    2f36:	6023      	str	r3, [r4, #0]
		EDBG_CDC_MODULE, &config_usart_USB) != STATUS_OK) {
		}

	usart_enable(&usart_USB);
}
    2f38:	b011      	add	sp, #68	; 0x44
    2f3a:	bd30      	pop	{r4, r5, pc}
    2f3c:	00160002 	.word	0x00160002
    2f40:	00170002 	.word	0x00170002
    2f44:	20000b58 	.word	0x20000b58
    2f48:	00000e6d 	.word	0x00000e6d
    2f4c:	42001400 	.word	0x42001400
    2f50:	00000ddd 	.word	0x00000ddd
    2f54:	e000e100 	.word	0xe000e100

00002f58 <configure_adc>:

void configure_adc(void)
{
    2f58:	b510      	push	{r4, lr}
    2f5a:	b08c      	sub	sp, #48	; 0x30
	struct adc_config config_adc;
	adc_get_config_defaults(&config_adc);
    2f5c:	4668      	mov	r0, sp
    2f5e:	4b11      	ldr	r3, [pc, #68]	; (2fa4 <configure_adc+0x4c>)
    2f60:	4798      	blx	r3
	config_adc.positive_input = ADC_POSITIVE_INPUT_DAC;
    2f62:	231c      	movs	r3, #28
    2f64:	466a      	mov	r2, sp
    2f66:	7313      	strb	r3, [r2, #12]
	adc_init(&adc_instance, ADC, &config_adc);
    2f68:	4c0f      	ldr	r4, [pc, #60]	; (2fa8 <configure_adc+0x50>)
    2f6a:	4910      	ldr	r1, [pc, #64]	; (2fac <configure_adc+0x54>)
    2f6c:	0020      	movs	r0, r4
    2f6e:	4b10      	ldr	r3, [pc, #64]	; (2fb0 <configure_adc+0x58>)
    2f70:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    2f72:	6822      	ldr	r2, [r4, #0]
    2f74:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    2f76:	b25b      	sxtb	r3, r3
    2f78:	2b00      	cmp	r3, #0
    2f7a:	dbfb      	blt.n	2f74 <configure_adc+0x1c>
    2f7c:	2180      	movs	r1, #128	; 0x80
    2f7e:	0409      	lsls	r1, r1, #16
    2f80:	4b0c      	ldr	r3, [pc, #48]	; (2fb4 <configure_adc+0x5c>)
    2f82:	6019      	str	r1, [r3, #0]
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    2f84:	230f      	movs	r3, #15
    2f86:	7593      	strb	r3, [r2, #22]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    2f88:	7613      	strb	r3, [r2, #24]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    2f8a:	7813      	ldrb	r3, [r2, #0]
    2f8c:	2102      	movs	r1, #2
    2f8e:	430b      	orrs	r3, r1
    2f90:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
    2f92:	4b05      	ldr	r3, [pc, #20]	; (2fa8 <configure_adc+0x50>)
    2f94:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    2f96:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    2f98:	b25b      	sxtb	r3, r3
    2f9a:	2b00      	cmp	r3, #0
    2f9c:	dbfb      	blt.n	2f96 <configure_adc+0x3e>
	adc_enable(&adc_instance);
}
    2f9e:	b00c      	add	sp, #48	; 0x30
    2fa0:	bd10      	pop	{r4, pc}
    2fa2:	46c0      	nop			; (mov r8, r8)
    2fa4:	000004d5 	.word	0x000004d5
    2fa8:	20000b8c 	.word	0x20000b8c
    2fac:	42004000 	.word	0x42004000
    2fb0:	00000519 	.word	0x00000519
    2fb4:	e000e100 	.word	0xe000e100

00002fb8 <setupBoard>:


void setupBoard(void)
{
    2fb8:	b570      	push	{r4, r5, r6, lr}
	uint16_t adcResult;

	system_init();
    2fba:	4b2c      	ldr	r3, [pc, #176]	; (306c <setupBoard+0xb4>)
    2fbc:	4798      	blx	r3
	
	configure_adc();
    2fbe:	4b2c      	ldr	r3, [pc, #176]	; (3070 <setupBoard+0xb8>)
    2fc0:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    2fc2:	4b2c      	ldr	r3, [pc, #176]	; (3074 <setupBoard+0xbc>)
    2fc4:	6819      	ldr	r1, [r3, #0]
    2fc6:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    2fc8:	b25b      	sxtb	r3, r3
    2fca:	2b00      	cmp	r3, #0
    2fcc:	dbfb      	blt.n	2fc6 <setupBoard+0xe>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    2fce:	7b0b      	ldrb	r3, [r1, #12]
    2fd0:	2202      	movs	r2, #2
    2fd2:	4313      	orrs	r3, r2
    2fd4:	730b      	strb	r3, [r1, #12]
    2fd6:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    2fd8:	b25b      	sxtb	r3, r3
    2fda:	2b00      	cmp	r3, #0
    2fdc:	dbfb      	blt.n	2fd6 <setupBoard+0x1e>
	if (int_flags & ADC_INTFLAG_RESRDY) {
    2fde:	2001      	movs	r0, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
    2fe0:	2504      	movs	r5, #4
		status_flags |= ADC_STATUS_WINDOW;
    2fe2:	2402      	movs	r4, #2
    2fe4:	e001      	b.n	2fea <setupBoard+0x32>
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    2fe6:	4210      	tst	r0, r2
    2fe8:	d10a      	bne.n	3000 <setupBoard+0x48>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    2fea:	7e0b      	ldrb	r3, [r1, #24]
    2fec:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
    2fee:	0002      	movs	r2, r0
    2ff0:	401a      	ands	r2, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
    2ff2:	421d      	tst	r5, r3
    2ff4:	d000      	beq.n	2ff8 <setupBoard+0x40>
		status_flags |= ADC_STATUS_WINDOW;
    2ff6:	4322      	orrs	r2, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    2ff8:	421c      	tst	r4, r3
    2ffa:	d0f4      	beq.n	2fe6 <setupBoard+0x2e>
		status_flags |= ADC_STATUS_OVERRUN;
    2ffc:	432a      	orrs	r2, r5
    2ffe:	e7f2      	b.n	2fe6 <setupBoard+0x2e>
    3000:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    3002:	b25b      	sxtb	r3, r3
    3004:	2b00      	cmp	r3, #0
    3006:	dbfb      	blt.n	3000 <setupBoard+0x48>
	*result = adc_module->RESULT.reg;
    3008:	8b4c      	ldrh	r4, [r1, #26]
    300a:	b2a4      	uxth	r4, r4
	adc_module->INTFLAG.reg = int_flags;
    300c:	2301      	movs	r3, #1
    300e:	760b      	strb	r3, [r1, #24]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    3010:	7e0a      	ldrb	r2, [r1, #24]
    3012:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    3014:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    3016:	0750      	lsls	r0, r2, #29
    3018:	d501      	bpl.n	301e <setupBoard+0x66>
		status_flags |= ADC_STATUS_WINDOW;
    301a:	2002      	movs	r0, #2
    301c:	4303      	orrs	r3, r0
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    301e:	0792      	lsls	r2, r2, #30
    3020:	d501      	bpl.n	3026 <setupBoard+0x6e>
		status_flags |= ADC_STATUS_OVERRUN;
    3022:	2204      	movs	r2, #4
    3024:	4313      	orrs	r3, r2
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    3026:	075b      	lsls	r3, r3, #29
    3028:	d501      	bpl.n	302e <setupBoard+0x76>
	adc_module->INTFLAG.reg = int_flags;
    302a:	2302      	movs	r3, #2
    302c:	760b      	strb	r3, [r1, #24]
	adc_start_conversion(&adc_instance);
	do {
		/* Wait for conversion to be done and read out result */
	} while (adc_read(&adc_instance, &adcResult) == STATUS_BUSY);
	
	system_init();
    302e:	4b0f      	ldr	r3, [pc, #60]	; (306c <setupBoard+0xb4>)
    3030:	4798      	blx	r3
	
	delay_init();
    3032:	4b11      	ldr	r3, [pc, #68]	; (3078 <setupBoard+0xc0>)
    3034:	4798      	blx	r3
	srand(adcResult);
    3036:	0020      	movs	r0, r4
    3038:	4b10      	ldr	r3, [pc, #64]	; (307c <setupBoard+0xc4>)
    303a:	4798      	blx	r3
	configure_usart_USB();
    303c:	4b10      	ldr	r3, [pc, #64]	; (3080 <setupBoard+0xc8>)
    303e:	4798      	blx	r3
	configure_console();
    3040:	4b10      	ldr	r3, [pc, #64]	; (3084 <setupBoard+0xcc>)
    3042:	4798      	blx	r3
	
	InitLCD();
    3044:	4b10      	ldr	r3, [pc, #64]	; (3088 <setupBoard+0xd0>)
    3046:	4798      	blx	r3
	splashScreen();
    3048:	4b10      	ldr	r3, [pc, #64]	; (308c <setupBoard+0xd4>)
    304a:	4798      	blx	r3
		
	printf("Serial OK 9600 8N1\n\r");
    304c:	4810      	ldr	r0, [pc, #64]	; (3090 <setupBoard+0xd8>)
    304e:	4b11      	ldr	r3, [pc, #68]	; (3094 <setupBoard+0xdc>)
    3050:	4798      	blx	r3
	
	conf_systick();
    3052:	4b11      	ldr	r3, [pc, #68]	; (3098 <setupBoard+0xe0>)
    3054:	4798      	blx	r3
	clearCursorBuffer();
    3056:	4b11      	ldr	r3, [pc, #68]	; (309c <setupBoard+0xe4>)
    3058:	4798      	blx	r3
	
	
	//readCursor(0,0);
	xCharPos=0;
    305a:	2300      	movs	r3, #0
    305c:	4a10      	ldr	r2, [pc, #64]	; (30a0 <setupBoard+0xe8>)
    305e:	8013      	strh	r3, [r2, #0]
	yCharPos=0;
    3060:	4a10      	ldr	r2, [pc, #64]	; (30a4 <setupBoard+0xec>)
    3062:	8013      	strh	r3, [r2, #0]
	drawChar(0xFF);
    3064:	20ff      	movs	r0, #255	; 0xff
    3066:	4b10      	ldr	r3, [pc, #64]	; (30a8 <setupBoard+0xf0>)
    3068:	4798      	blx	r3
}
    306a:	bd70      	pop	{r4, r5, r6, pc}
    306c:	00001b3d 	.word	0x00001b3d
    3070:	00002f59 	.word	0x00002f59
    3074:	20000b8c 	.word	0x20000b8c
    3078:	000003c1 	.word	0x000003c1
    307c:	00003349 	.word	0x00003349
    3080:	00002e9d 	.word	0x00002e9d
    3084:	00001d65 	.word	0x00001d65
    3088:	00002bed 	.word	0x00002bed
    308c:	000001e5 	.word	0x000001e5
    3090:	00007e54 	.word	0x00007e54
    3094:	00003315 	.word	0x00003315
    3098:	00002e49 	.word	0x00002e49
    309c:	000023c5 	.word	0x000023c5
    30a0:	20000298 	.word	0x20000298
    30a4:	2000029a 	.word	0x2000029a
    30a8:	00001e6d 	.word	0x00001e6d

000030ac <main>:
{
    30ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	setupBoard();
    30ae:	4b1b      	ldr	r3, [pc, #108]	; (311c <main+0x70>)
    30b0:	4798      	blx	r3
		if((ul_tickcount % (UINT16_MAX/4) == 0) && (funcLock == false))
    30b2:	4f1b      	ldr	r7, [pc, #108]	; (3120 <main+0x74>)
    30b4:	4e1b      	ldr	r6, [pc, #108]	; (3124 <main+0x78>)
    30b6:	4d1c      	ldr	r5, [pc, #112]	; (3128 <main+0x7c>)
    30b8:	e013      	b.n	30e2 <main+0x36>
		if((ul_tickcount % 200 == 0) && (funcLock == false))
    30ba:	21c8      	movs	r1, #200	; 0xc8
    30bc:	0020      	movs	r0, r4
    30be:	4b19      	ldr	r3, [pc, #100]	; (3124 <main+0x78>)
    30c0:	4798      	blx	r3
    30c2:	b289      	uxth	r1, r1
    30c4:	2900      	cmp	r1, #0
    30c6:	d10c      	bne.n	30e2 <main+0x36>
    30c8:	4b18      	ldr	r3, [pc, #96]	; (312c <main+0x80>)
    30ca:	781b      	ldrb	r3, [r3, #0]
    30cc:	2b00      	cmp	r3, #0
    30ce:	d108      	bne.n	30e2 <main+0x36>
			funcLock = true;
    30d0:	4c16      	ldr	r4, [pc, #88]	; (312c <main+0x80>)
    30d2:	2301      	movs	r3, #1
    30d4:	7023      	strb	r3, [r4, #0]
			readKeyboard();
    30d6:	4b16      	ldr	r3, [pc, #88]	; (3130 <main+0x84>)
    30d8:	4798      	blx	r3
			printKeyboardBuffer();
    30da:	4b16      	ldr	r3, [pc, #88]	; (3134 <main+0x88>)
    30dc:	4798      	blx	r3
			funcLock = false;
    30de:	2300      	movs	r3, #0
    30e0:	7023      	strb	r3, [r4, #0]
		__WFI();
    30e2:	bf30      	wfi
		if((ul_tickcount % (UINT16_MAX/4) == 0) && (funcLock == false))
    30e4:	883c      	ldrh	r4, [r7, #0]
    30e6:	0029      	movs	r1, r5
    30e8:	0020      	movs	r0, r4
    30ea:	47b0      	blx	r6
    30ec:	b289      	uxth	r1, r1
    30ee:	2900      	cmp	r1, #0
    30f0:	d1e3      	bne.n	30ba <main+0xe>
    30f2:	4b0e      	ldr	r3, [pc, #56]	; (312c <main+0x80>)
    30f4:	781b      	ldrb	r3, [r3, #0]
    30f6:	2b00      	cmp	r3, #0
    30f8:	d1f3      	bne.n	30e2 <main+0x36>
			funcLock = true;
    30fa:	4c0c      	ldr	r4, [pc, #48]	; (312c <main+0x80>)
    30fc:	3301      	adds	r3, #1
    30fe:	7023      	strb	r3, [r4, #0]
			blinkCursor();
    3100:	4b0d      	ldr	r3, [pc, #52]	; (3138 <main+0x8c>)
    3102:	4798      	blx	r3
			funcLock = false;
    3104:	2300      	movs	r3, #0
    3106:	7023      	strb	r3, [r4, #0]
		if((ul_tickcount % 200 == 0) && (funcLock == false))
    3108:	4b05      	ldr	r3, [pc, #20]	; (3120 <main+0x74>)
    310a:	8818      	ldrh	r0, [r3, #0]
    310c:	21c8      	movs	r1, #200	; 0xc8
    310e:	4b05      	ldr	r3, [pc, #20]	; (3124 <main+0x78>)
    3110:	4798      	blx	r3
    3112:	b289      	uxth	r1, r1
    3114:	2900      	cmp	r1, #0
    3116:	d0db      	beq.n	30d0 <main+0x24>
    3118:	e7e3      	b.n	30e2 <main+0x36>
    311a:	46c0      	nop			; (mov r8, r8)
    311c:	00002fb9 	.word	0x00002fb9
    3120:	20000366 	.word	0x20000366
    3124:	00003249 	.word	0x00003249
    3128:	00003fff 	.word	0x00003fff
    312c:	20000364 	.word	0x20000364
    3130:	000021c5 	.word	0x000021c5
    3134:	00002539 	.word	0x00002539
    3138:	000023dd 	.word	0x000023dd

0000313c <__udivsi3>:
    313c:	2200      	movs	r2, #0
    313e:	0843      	lsrs	r3, r0, #1
    3140:	428b      	cmp	r3, r1
    3142:	d374      	bcc.n	322e <__udivsi3+0xf2>
    3144:	0903      	lsrs	r3, r0, #4
    3146:	428b      	cmp	r3, r1
    3148:	d35f      	bcc.n	320a <__udivsi3+0xce>
    314a:	0a03      	lsrs	r3, r0, #8
    314c:	428b      	cmp	r3, r1
    314e:	d344      	bcc.n	31da <__udivsi3+0x9e>
    3150:	0b03      	lsrs	r3, r0, #12
    3152:	428b      	cmp	r3, r1
    3154:	d328      	bcc.n	31a8 <__udivsi3+0x6c>
    3156:	0c03      	lsrs	r3, r0, #16
    3158:	428b      	cmp	r3, r1
    315a:	d30d      	bcc.n	3178 <__udivsi3+0x3c>
    315c:	22ff      	movs	r2, #255	; 0xff
    315e:	0209      	lsls	r1, r1, #8
    3160:	ba12      	rev	r2, r2
    3162:	0c03      	lsrs	r3, r0, #16
    3164:	428b      	cmp	r3, r1
    3166:	d302      	bcc.n	316e <__udivsi3+0x32>
    3168:	1212      	asrs	r2, r2, #8
    316a:	0209      	lsls	r1, r1, #8
    316c:	d065      	beq.n	323a <__udivsi3+0xfe>
    316e:	0b03      	lsrs	r3, r0, #12
    3170:	428b      	cmp	r3, r1
    3172:	d319      	bcc.n	31a8 <__udivsi3+0x6c>
    3174:	e000      	b.n	3178 <__udivsi3+0x3c>
    3176:	0a09      	lsrs	r1, r1, #8
    3178:	0bc3      	lsrs	r3, r0, #15
    317a:	428b      	cmp	r3, r1
    317c:	d301      	bcc.n	3182 <__udivsi3+0x46>
    317e:	03cb      	lsls	r3, r1, #15
    3180:	1ac0      	subs	r0, r0, r3
    3182:	4152      	adcs	r2, r2
    3184:	0b83      	lsrs	r3, r0, #14
    3186:	428b      	cmp	r3, r1
    3188:	d301      	bcc.n	318e <__udivsi3+0x52>
    318a:	038b      	lsls	r3, r1, #14
    318c:	1ac0      	subs	r0, r0, r3
    318e:	4152      	adcs	r2, r2
    3190:	0b43      	lsrs	r3, r0, #13
    3192:	428b      	cmp	r3, r1
    3194:	d301      	bcc.n	319a <__udivsi3+0x5e>
    3196:	034b      	lsls	r3, r1, #13
    3198:	1ac0      	subs	r0, r0, r3
    319a:	4152      	adcs	r2, r2
    319c:	0b03      	lsrs	r3, r0, #12
    319e:	428b      	cmp	r3, r1
    31a0:	d301      	bcc.n	31a6 <__udivsi3+0x6a>
    31a2:	030b      	lsls	r3, r1, #12
    31a4:	1ac0      	subs	r0, r0, r3
    31a6:	4152      	adcs	r2, r2
    31a8:	0ac3      	lsrs	r3, r0, #11
    31aa:	428b      	cmp	r3, r1
    31ac:	d301      	bcc.n	31b2 <__udivsi3+0x76>
    31ae:	02cb      	lsls	r3, r1, #11
    31b0:	1ac0      	subs	r0, r0, r3
    31b2:	4152      	adcs	r2, r2
    31b4:	0a83      	lsrs	r3, r0, #10
    31b6:	428b      	cmp	r3, r1
    31b8:	d301      	bcc.n	31be <__udivsi3+0x82>
    31ba:	028b      	lsls	r3, r1, #10
    31bc:	1ac0      	subs	r0, r0, r3
    31be:	4152      	adcs	r2, r2
    31c0:	0a43      	lsrs	r3, r0, #9
    31c2:	428b      	cmp	r3, r1
    31c4:	d301      	bcc.n	31ca <__udivsi3+0x8e>
    31c6:	024b      	lsls	r3, r1, #9
    31c8:	1ac0      	subs	r0, r0, r3
    31ca:	4152      	adcs	r2, r2
    31cc:	0a03      	lsrs	r3, r0, #8
    31ce:	428b      	cmp	r3, r1
    31d0:	d301      	bcc.n	31d6 <__udivsi3+0x9a>
    31d2:	020b      	lsls	r3, r1, #8
    31d4:	1ac0      	subs	r0, r0, r3
    31d6:	4152      	adcs	r2, r2
    31d8:	d2cd      	bcs.n	3176 <__udivsi3+0x3a>
    31da:	09c3      	lsrs	r3, r0, #7
    31dc:	428b      	cmp	r3, r1
    31de:	d301      	bcc.n	31e4 <__udivsi3+0xa8>
    31e0:	01cb      	lsls	r3, r1, #7
    31e2:	1ac0      	subs	r0, r0, r3
    31e4:	4152      	adcs	r2, r2
    31e6:	0983      	lsrs	r3, r0, #6
    31e8:	428b      	cmp	r3, r1
    31ea:	d301      	bcc.n	31f0 <__udivsi3+0xb4>
    31ec:	018b      	lsls	r3, r1, #6
    31ee:	1ac0      	subs	r0, r0, r3
    31f0:	4152      	adcs	r2, r2
    31f2:	0943      	lsrs	r3, r0, #5
    31f4:	428b      	cmp	r3, r1
    31f6:	d301      	bcc.n	31fc <__udivsi3+0xc0>
    31f8:	014b      	lsls	r3, r1, #5
    31fa:	1ac0      	subs	r0, r0, r3
    31fc:	4152      	adcs	r2, r2
    31fe:	0903      	lsrs	r3, r0, #4
    3200:	428b      	cmp	r3, r1
    3202:	d301      	bcc.n	3208 <__udivsi3+0xcc>
    3204:	010b      	lsls	r3, r1, #4
    3206:	1ac0      	subs	r0, r0, r3
    3208:	4152      	adcs	r2, r2
    320a:	08c3      	lsrs	r3, r0, #3
    320c:	428b      	cmp	r3, r1
    320e:	d301      	bcc.n	3214 <__udivsi3+0xd8>
    3210:	00cb      	lsls	r3, r1, #3
    3212:	1ac0      	subs	r0, r0, r3
    3214:	4152      	adcs	r2, r2
    3216:	0883      	lsrs	r3, r0, #2
    3218:	428b      	cmp	r3, r1
    321a:	d301      	bcc.n	3220 <__udivsi3+0xe4>
    321c:	008b      	lsls	r3, r1, #2
    321e:	1ac0      	subs	r0, r0, r3
    3220:	4152      	adcs	r2, r2
    3222:	0843      	lsrs	r3, r0, #1
    3224:	428b      	cmp	r3, r1
    3226:	d301      	bcc.n	322c <__udivsi3+0xf0>
    3228:	004b      	lsls	r3, r1, #1
    322a:	1ac0      	subs	r0, r0, r3
    322c:	4152      	adcs	r2, r2
    322e:	1a41      	subs	r1, r0, r1
    3230:	d200      	bcs.n	3234 <__udivsi3+0xf8>
    3232:	4601      	mov	r1, r0
    3234:	4152      	adcs	r2, r2
    3236:	4610      	mov	r0, r2
    3238:	4770      	bx	lr
    323a:	e7ff      	b.n	323c <__udivsi3+0x100>
    323c:	b501      	push	{r0, lr}
    323e:	2000      	movs	r0, #0
    3240:	f000 f806 	bl	3250 <__aeabi_idiv0>
    3244:	bd02      	pop	{r1, pc}
    3246:	46c0      	nop			; (mov r8, r8)

00003248 <__aeabi_uidivmod>:
    3248:	2900      	cmp	r1, #0
    324a:	d0f7      	beq.n	323c <__udivsi3+0x100>
    324c:	e776      	b.n	313c <__udivsi3>
    324e:	4770      	bx	lr

00003250 <__aeabi_idiv0>:
    3250:	4770      	bx	lr
    3252:	46c0      	nop			; (mov r8, r8)

00003254 <__aeabi_lmul>:
    3254:	b5f0      	push	{r4, r5, r6, r7, lr}
    3256:	46ce      	mov	lr, r9
    3258:	4647      	mov	r7, r8
    325a:	0415      	lsls	r5, r2, #16
    325c:	0c2d      	lsrs	r5, r5, #16
    325e:	002e      	movs	r6, r5
    3260:	b580      	push	{r7, lr}
    3262:	0407      	lsls	r7, r0, #16
    3264:	0c14      	lsrs	r4, r2, #16
    3266:	0c3f      	lsrs	r7, r7, #16
    3268:	4699      	mov	r9, r3
    326a:	0c03      	lsrs	r3, r0, #16
    326c:	437e      	muls	r6, r7
    326e:	435d      	muls	r5, r3
    3270:	4367      	muls	r7, r4
    3272:	4363      	muls	r3, r4
    3274:	197f      	adds	r7, r7, r5
    3276:	0c34      	lsrs	r4, r6, #16
    3278:	19e4      	adds	r4, r4, r7
    327a:	469c      	mov	ip, r3
    327c:	42a5      	cmp	r5, r4
    327e:	d903      	bls.n	3288 <__aeabi_lmul+0x34>
    3280:	2380      	movs	r3, #128	; 0x80
    3282:	025b      	lsls	r3, r3, #9
    3284:	4698      	mov	r8, r3
    3286:	44c4      	add	ip, r8
    3288:	464b      	mov	r3, r9
    328a:	4351      	muls	r1, r2
    328c:	4343      	muls	r3, r0
    328e:	0436      	lsls	r6, r6, #16
    3290:	0c36      	lsrs	r6, r6, #16
    3292:	0c25      	lsrs	r5, r4, #16
    3294:	0424      	lsls	r4, r4, #16
    3296:	4465      	add	r5, ip
    3298:	19a4      	adds	r4, r4, r6
    329a:	1859      	adds	r1, r3, r1
    329c:	1949      	adds	r1, r1, r5
    329e:	0020      	movs	r0, r4
    32a0:	bc0c      	pop	{r2, r3}
    32a2:	4690      	mov	r8, r2
    32a4:	4699      	mov	r9, r3
    32a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000032a8 <__libc_init_array>:
    32a8:	b570      	push	{r4, r5, r6, lr}
    32aa:	2600      	movs	r6, #0
    32ac:	4d0c      	ldr	r5, [pc, #48]	; (32e0 <__libc_init_array+0x38>)
    32ae:	4c0d      	ldr	r4, [pc, #52]	; (32e4 <__libc_init_array+0x3c>)
    32b0:	1b64      	subs	r4, r4, r5
    32b2:	10a4      	asrs	r4, r4, #2
    32b4:	42a6      	cmp	r6, r4
    32b6:	d109      	bne.n	32cc <__libc_init_array+0x24>
    32b8:	2600      	movs	r6, #0
    32ba:	f004 fe23 	bl	7f04 <_init>
    32be:	4d0a      	ldr	r5, [pc, #40]	; (32e8 <__libc_init_array+0x40>)
    32c0:	4c0a      	ldr	r4, [pc, #40]	; (32ec <__libc_init_array+0x44>)
    32c2:	1b64      	subs	r4, r4, r5
    32c4:	10a4      	asrs	r4, r4, #2
    32c6:	42a6      	cmp	r6, r4
    32c8:	d105      	bne.n	32d6 <__libc_init_array+0x2e>
    32ca:	bd70      	pop	{r4, r5, r6, pc}
    32cc:	00b3      	lsls	r3, r6, #2
    32ce:	58eb      	ldr	r3, [r5, r3]
    32d0:	4798      	blx	r3
    32d2:	3601      	adds	r6, #1
    32d4:	e7ee      	b.n	32b4 <__libc_init_array+0xc>
    32d6:	00b3      	lsls	r3, r6, #2
    32d8:	58eb      	ldr	r3, [r5, r3]
    32da:	4798      	blx	r3
    32dc:	3601      	adds	r6, #1
    32de:	e7f2      	b.n	32c6 <__libc_init_array+0x1e>
    32e0:	00007f10 	.word	0x00007f10
    32e4:	00007f10 	.word	0x00007f10
    32e8:	00007f10 	.word	0x00007f10
    32ec:	00007f14 	.word	0x00007f14

000032f0 <memcpy>:
    32f0:	2300      	movs	r3, #0
    32f2:	b510      	push	{r4, lr}
    32f4:	429a      	cmp	r2, r3
    32f6:	d100      	bne.n	32fa <memcpy+0xa>
    32f8:	bd10      	pop	{r4, pc}
    32fa:	5ccc      	ldrb	r4, [r1, r3]
    32fc:	54c4      	strb	r4, [r0, r3]
    32fe:	3301      	adds	r3, #1
    3300:	e7f8      	b.n	32f4 <memcpy+0x4>

00003302 <memset>:
    3302:	0003      	movs	r3, r0
    3304:	1882      	adds	r2, r0, r2
    3306:	4293      	cmp	r3, r2
    3308:	d100      	bne.n	330c <memset+0xa>
    330a:	4770      	bx	lr
    330c:	7019      	strb	r1, [r3, #0]
    330e:	3301      	adds	r3, #1
    3310:	e7f9      	b.n	3306 <memset+0x4>
	...

00003314 <iprintf>:
    3314:	b40f      	push	{r0, r1, r2, r3}
    3316:	4b0b      	ldr	r3, [pc, #44]	; (3344 <iprintf+0x30>)
    3318:	b513      	push	{r0, r1, r4, lr}
    331a:	681c      	ldr	r4, [r3, #0]
    331c:	2c00      	cmp	r4, #0
    331e:	d005      	beq.n	332c <iprintf+0x18>
    3320:	69a3      	ldr	r3, [r4, #24]
    3322:	2b00      	cmp	r3, #0
    3324:	d102      	bne.n	332c <iprintf+0x18>
    3326:	0020      	movs	r0, r4
    3328:	f000 fa2e 	bl	3788 <__sinit>
    332c:	ab05      	add	r3, sp, #20
    332e:	9a04      	ldr	r2, [sp, #16]
    3330:	68a1      	ldr	r1, [r4, #8]
    3332:	0020      	movs	r0, r4
    3334:	9301      	str	r3, [sp, #4]
    3336:	f000 fc03 	bl	3b40 <_vfiprintf_r>
    333a:	bc16      	pop	{r1, r2, r4}
    333c:	bc08      	pop	{r3}
    333e:	b004      	add	sp, #16
    3340:	4718      	bx	r3
    3342:	46c0      	nop			; (mov r8, r8)
    3344:	20000158 	.word	0x20000158

00003348 <srand>:
    3348:	4b10      	ldr	r3, [pc, #64]	; (338c <srand+0x44>)
    334a:	b570      	push	{r4, r5, r6, lr}
    334c:	681c      	ldr	r4, [r3, #0]
    334e:	0005      	movs	r5, r0
    3350:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    3352:	2b00      	cmp	r3, #0
    3354:	d115      	bne.n	3382 <srand+0x3a>
    3356:	2018      	movs	r0, #24
    3358:	f000 fb18 	bl	398c <malloc>
    335c:	4b0c      	ldr	r3, [pc, #48]	; (3390 <srand+0x48>)
    335e:	63a0      	str	r0, [r4, #56]	; 0x38
    3360:	8003      	strh	r3, [r0, #0]
    3362:	4b0c      	ldr	r3, [pc, #48]	; (3394 <srand+0x4c>)
    3364:	2201      	movs	r2, #1
    3366:	8043      	strh	r3, [r0, #2]
    3368:	4b0b      	ldr	r3, [pc, #44]	; (3398 <srand+0x50>)
    336a:	8083      	strh	r3, [r0, #4]
    336c:	4b0b      	ldr	r3, [pc, #44]	; (339c <srand+0x54>)
    336e:	80c3      	strh	r3, [r0, #6]
    3370:	4b0b      	ldr	r3, [pc, #44]	; (33a0 <srand+0x58>)
    3372:	8103      	strh	r3, [r0, #8]
    3374:	2305      	movs	r3, #5
    3376:	8143      	strh	r3, [r0, #10]
    3378:	3306      	adds	r3, #6
    337a:	8183      	strh	r3, [r0, #12]
    337c:	2300      	movs	r3, #0
    337e:	6102      	str	r2, [r0, #16]
    3380:	6143      	str	r3, [r0, #20]
    3382:	2200      	movs	r2, #0
    3384:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    3386:	611d      	str	r5, [r3, #16]
    3388:	615a      	str	r2, [r3, #20]
    338a:	bd70      	pop	{r4, r5, r6, pc}
    338c:	20000158 	.word	0x20000158
    3390:	0000330e 	.word	0x0000330e
    3394:	ffffabcd 	.word	0xffffabcd
    3398:	00001234 	.word	0x00001234
    339c:	ffffe66d 	.word	0xffffe66d
    33a0:	ffffdeec 	.word	0xffffdeec

000033a4 <rand>:
    33a4:	4b15      	ldr	r3, [pc, #84]	; (33fc <rand+0x58>)
    33a6:	b510      	push	{r4, lr}
    33a8:	681c      	ldr	r4, [r3, #0]
    33aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    33ac:	2b00      	cmp	r3, #0
    33ae:	d115      	bne.n	33dc <rand+0x38>
    33b0:	2018      	movs	r0, #24
    33b2:	f000 faeb 	bl	398c <malloc>
    33b6:	4b12      	ldr	r3, [pc, #72]	; (3400 <rand+0x5c>)
    33b8:	63a0      	str	r0, [r4, #56]	; 0x38
    33ba:	8003      	strh	r3, [r0, #0]
    33bc:	4b11      	ldr	r3, [pc, #68]	; (3404 <rand+0x60>)
    33be:	2201      	movs	r2, #1
    33c0:	8043      	strh	r3, [r0, #2]
    33c2:	4b11      	ldr	r3, [pc, #68]	; (3408 <rand+0x64>)
    33c4:	8083      	strh	r3, [r0, #4]
    33c6:	4b11      	ldr	r3, [pc, #68]	; (340c <rand+0x68>)
    33c8:	80c3      	strh	r3, [r0, #6]
    33ca:	4b11      	ldr	r3, [pc, #68]	; (3410 <rand+0x6c>)
    33cc:	8103      	strh	r3, [r0, #8]
    33ce:	2305      	movs	r3, #5
    33d0:	8143      	strh	r3, [r0, #10]
    33d2:	3306      	adds	r3, #6
    33d4:	8183      	strh	r3, [r0, #12]
    33d6:	2300      	movs	r3, #0
    33d8:	6102      	str	r2, [r0, #16]
    33da:	6143      	str	r3, [r0, #20]
    33dc:	6ba4      	ldr	r4, [r4, #56]	; 0x38
    33de:	4a0d      	ldr	r2, [pc, #52]	; (3414 <rand+0x70>)
    33e0:	6920      	ldr	r0, [r4, #16]
    33e2:	6961      	ldr	r1, [r4, #20]
    33e4:	4b0c      	ldr	r3, [pc, #48]	; (3418 <rand+0x74>)
    33e6:	f7ff ff35 	bl	3254 <__aeabi_lmul>
    33ea:	2201      	movs	r2, #1
    33ec:	2300      	movs	r3, #0
    33ee:	1880      	adds	r0, r0, r2
    33f0:	4159      	adcs	r1, r3
    33f2:	6120      	str	r0, [r4, #16]
    33f4:	6161      	str	r1, [r4, #20]
    33f6:	0048      	lsls	r0, r1, #1
    33f8:	0840      	lsrs	r0, r0, #1
    33fa:	bd10      	pop	{r4, pc}
    33fc:	20000158 	.word	0x20000158
    3400:	0000330e 	.word	0x0000330e
    3404:	ffffabcd 	.word	0xffffabcd
    3408:	00001234 	.word	0x00001234
    340c:	ffffe66d 	.word	0xffffe66d
    3410:	ffffdeec 	.word	0xffffdeec
    3414:	4c957f2d 	.word	0x4c957f2d
    3418:	5851f42d 	.word	0x5851f42d

0000341c <setbuf>:
    341c:	424a      	negs	r2, r1
    341e:	414a      	adcs	r2, r1
    3420:	2380      	movs	r3, #128	; 0x80
    3422:	b510      	push	{r4, lr}
    3424:	0052      	lsls	r2, r2, #1
    3426:	00db      	lsls	r3, r3, #3
    3428:	f000 f802 	bl	3430 <setvbuf>
    342c:	bd10      	pop	{r4, pc}
	...

00003430 <setvbuf>:
    3430:	b5f0      	push	{r4, r5, r6, r7, lr}
    3432:	001d      	movs	r5, r3
    3434:	4b4f      	ldr	r3, [pc, #316]	; (3574 <setvbuf+0x144>)
    3436:	b085      	sub	sp, #20
    3438:	681e      	ldr	r6, [r3, #0]
    343a:	0004      	movs	r4, r0
    343c:	000f      	movs	r7, r1
    343e:	9200      	str	r2, [sp, #0]
    3440:	2e00      	cmp	r6, #0
    3442:	d005      	beq.n	3450 <setvbuf+0x20>
    3444:	69b3      	ldr	r3, [r6, #24]
    3446:	2b00      	cmp	r3, #0
    3448:	d102      	bne.n	3450 <setvbuf+0x20>
    344a:	0030      	movs	r0, r6
    344c:	f000 f99c 	bl	3788 <__sinit>
    3450:	4b49      	ldr	r3, [pc, #292]	; (3578 <setvbuf+0x148>)
    3452:	429c      	cmp	r4, r3
    3454:	d150      	bne.n	34f8 <setvbuf+0xc8>
    3456:	6874      	ldr	r4, [r6, #4]
    3458:	9b00      	ldr	r3, [sp, #0]
    345a:	2b02      	cmp	r3, #2
    345c:	d005      	beq.n	346a <setvbuf+0x3a>
    345e:	2b01      	cmp	r3, #1
    3460:	d900      	bls.n	3464 <setvbuf+0x34>
    3462:	e084      	b.n	356e <setvbuf+0x13e>
    3464:	2d00      	cmp	r5, #0
    3466:	da00      	bge.n	346a <setvbuf+0x3a>
    3468:	e081      	b.n	356e <setvbuf+0x13e>
    346a:	0021      	movs	r1, r4
    346c:	0030      	movs	r0, r6
    346e:	f000 f91d 	bl	36ac <_fflush_r>
    3472:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3474:	2900      	cmp	r1, #0
    3476:	d008      	beq.n	348a <setvbuf+0x5a>
    3478:	0023      	movs	r3, r4
    347a:	3344      	adds	r3, #68	; 0x44
    347c:	4299      	cmp	r1, r3
    347e:	d002      	beq.n	3486 <setvbuf+0x56>
    3480:	0030      	movs	r0, r6
    3482:	f000 fa8d 	bl	39a0 <_free_r>
    3486:	2300      	movs	r3, #0
    3488:	6363      	str	r3, [r4, #52]	; 0x34
    348a:	2300      	movs	r3, #0
    348c:	61a3      	str	r3, [r4, #24]
    348e:	6063      	str	r3, [r4, #4]
    3490:	89a3      	ldrh	r3, [r4, #12]
    3492:	061b      	lsls	r3, r3, #24
    3494:	d503      	bpl.n	349e <setvbuf+0x6e>
    3496:	6921      	ldr	r1, [r4, #16]
    3498:	0030      	movs	r0, r6
    349a:	f000 fa81 	bl	39a0 <_free_r>
    349e:	89a3      	ldrh	r3, [r4, #12]
    34a0:	4a36      	ldr	r2, [pc, #216]	; (357c <setvbuf+0x14c>)
    34a2:	4013      	ands	r3, r2
    34a4:	81a3      	strh	r3, [r4, #12]
    34a6:	9b00      	ldr	r3, [sp, #0]
    34a8:	2b02      	cmp	r3, #2
    34aa:	d05a      	beq.n	3562 <setvbuf+0x132>
    34ac:	ab03      	add	r3, sp, #12
    34ae:	aa02      	add	r2, sp, #8
    34b0:	0021      	movs	r1, r4
    34b2:	0030      	movs	r0, r6
    34b4:	f000 f9fe 	bl	38b4 <__swhatbuf_r>
    34b8:	89a3      	ldrh	r3, [r4, #12]
    34ba:	4318      	orrs	r0, r3
    34bc:	81a0      	strh	r0, [r4, #12]
    34be:	2d00      	cmp	r5, #0
    34c0:	d124      	bne.n	350c <setvbuf+0xdc>
    34c2:	9d02      	ldr	r5, [sp, #8]
    34c4:	0028      	movs	r0, r5
    34c6:	f000 fa61 	bl	398c <malloc>
    34ca:	9501      	str	r5, [sp, #4]
    34cc:	1e07      	subs	r7, r0, #0
    34ce:	d142      	bne.n	3556 <setvbuf+0x126>
    34d0:	9b02      	ldr	r3, [sp, #8]
    34d2:	9301      	str	r3, [sp, #4]
    34d4:	42ab      	cmp	r3, r5
    34d6:	d139      	bne.n	354c <setvbuf+0x11c>
    34d8:	2001      	movs	r0, #1
    34da:	4240      	negs	r0, r0
    34dc:	2302      	movs	r3, #2
    34de:	89a2      	ldrh	r2, [r4, #12]
    34e0:	4313      	orrs	r3, r2
    34e2:	81a3      	strh	r3, [r4, #12]
    34e4:	2300      	movs	r3, #0
    34e6:	60a3      	str	r3, [r4, #8]
    34e8:	0023      	movs	r3, r4
    34ea:	3347      	adds	r3, #71	; 0x47
    34ec:	6023      	str	r3, [r4, #0]
    34ee:	6123      	str	r3, [r4, #16]
    34f0:	2301      	movs	r3, #1
    34f2:	6163      	str	r3, [r4, #20]
    34f4:	b005      	add	sp, #20
    34f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    34f8:	4b21      	ldr	r3, [pc, #132]	; (3580 <setvbuf+0x150>)
    34fa:	429c      	cmp	r4, r3
    34fc:	d101      	bne.n	3502 <setvbuf+0xd2>
    34fe:	68b4      	ldr	r4, [r6, #8]
    3500:	e7aa      	b.n	3458 <setvbuf+0x28>
    3502:	4b20      	ldr	r3, [pc, #128]	; (3584 <setvbuf+0x154>)
    3504:	429c      	cmp	r4, r3
    3506:	d1a7      	bne.n	3458 <setvbuf+0x28>
    3508:	68f4      	ldr	r4, [r6, #12]
    350a:	e7a5      	b.n	3458 <setvbuf+0x28>
    350c:	2f00      	cmp	r7, #0
    350e:	d0d9      	beq.n	34c4 <setvbuf+0x94>
    3510:	69b3      	ldr	r3, [r6, #24]
    3512:	2b00      	cmp	r3, #0
    3514:	d102      	bne.n	351c <setvbuf+0xec>
    3516:	0030      	movs	r0, r6
    3518:	f000 f936 	bl	3788 <__sinit>
    351c:	9b00      	ldr	r3, [sp, #0]
    351e:	2b01      	cmp	r3, #1
    3520:	d103      	bne.n	352a <setvbuf+0xfa>
    3522:	89a3      	ldrh	r3, [r4, #12]
    3524:	9a00      	ldr	r2, [sp, #0]
    3526:	431a      	orrs	r2, r3
    3528:	81a2      	strh	r2, [r4, #12]
    352a:	2008      	movs	r0, #8
    352c:	89a3      	ldrh	r3, [r4, #12]
    352e:	6027      	str	r7, [r4, #0]
    3530:	6127      	str	r7, [r4, #16]
    3532:	6165      	str	r5, [r4, #20]
    3534:	4018      	ands	r0, r3
    3536:	d018      	beq.n	356a <setvbuf+0x13a>
    3538:	2001      	movs	r0, #1
    353a:	4018      	ands	r0, r3
    353c:	2300      	movs	r3, #0
    353e:	4298      	cmp	r0, r3
    3540:	d011      	beq.n	3566 <setvbuf+0x136>
    3542:	426d      	negs	r5, r5
    3544:	60a3      	str	r3, [r4, #8]
    3546:	61a5      	str	r5, [r4, #24]
    3548:	0018      	movs	r0, r3
    354a:	e7d3      	b.n	34f4 <setvbuf+0xc4>
    354c:	9801      	ldr	r0, [sp, #4]
    354e:	f000 fa1d 	bl	398c <malloc>
    3552:	1e07      	subs	r7, r0, #0
    3554:	d0c0      	beq.n	34d8 <setvbuf+0xa8>
    3556:	2380      	movs	r3, #128	; 0x80
    3558:	89a2      	ldrh	r2, [r4, #12]
    355a:	9d01      	ldr	r5, [sp, #4]
    355c:	4313      	orrs	r3, r2
    355e:	81a3      	strh	r3, [r4, #12]
    3560:	e7d6      	b.n	3510 <setvbuf+0xe0>
    3562:	2000      	movs	r0, #0
    3564:	e7ba      	b.n	34dc <setvbuf+0xac>
    3566:	60a5      	str	r5, [r4, #8]
    3568:	e7c4      	b.n	34f4 <setvbuf+0xc4>
    356a:	60a0      	str	r0, [r4, #8]
    356c:	e7c2      	b.n	34f4 <setvbuf+0xc4>
    356e:	2001      	movs	r0, #1
    3570:	4240      	negs	r0, r0
    3572:	e7bf      	b.n	34f4 <setvbuf+0xc4>
    3574:	20000158 	.word	0x20000158
    3578:	00007e90 	.word	0x00007e90
    357c:	fffff35c 	.word	0xfffff35c
    3580:	00007eb0 	.word	0x00007eb0
    3584:	00007e70 	.word	0x00007e70

00003588 <strlen>:
    3588:	2300      	movs	r3, #0
    358a:	5cc2      	ldrb	r2, [r0, r3]
    358c:	3301      	adds	r3, #1
    358e:	2a00      	cmp	r2, #0
    3590:	d1fb      	bne.n	358a <strlen+0x2>
    3592:	1e58      	subs	r0, r3, #1
    3594:	4770      	bx	lr
	...

00003598 <__sflush_r>:
    3598:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    359a:	898a      	ldrh	r2, [r1, #12]
    359c:	0005      	movs	r5, r0
    359e:	000c      	movs	r4, r1
    35a0:	0713      	lsls	r3, r2, #28
    35a2:	d460      	bmi.n	3666 <__sflush_r+0xce>
    35a4:	684b      	ldr	r3, [r1, #4]
    35a6:	2b00      	cmp	r3, #0
    35a8:	dc04      	bgt.n	35b4 <__sflush_r+0x1c>
    35aa:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    35ac:	2b00      	cmp	r3, #0
    35ae:	dc01      	bgt.n	35b4 <__sflush_r+0x1c>
    35b0:	2000      	movs	r0, #0
    35b2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    35b4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    35b6:	2f00      	cmp	r7, #0
    35b8:	d0fa      	beq.n	35b0 <__sflush_r+0x18>
    35ba:	2300      	movs	r3, #0
    35bc:	682e      	ldr	r6, [r5, #0]
    35be:	602b      	str	r3, [r5, #0]
    35c0:	2380      	movs	r3, #128	; 0x80
    35c2:	015b      	lsls	r3, r3, #5
    35c4:	401a      	ands	r2, r3
    35c6:	d034      	beq.n	3632 <__sflush_r+0x9a>
    35c8:	6d60      	ldr	r0, [r4, #84]	; 0x54
    35ca:	89a3      	ldrh	r3, [r4, #12]
    35cc:	075b      	lsls	r3, r3, #29
    35ce:	d506      	bpl.n	35de <__sflush_r+0x46>
    35d0:	6863      	ldr	r3, [r4, #4]
    35d2:	1ac0      	subs	r0, r0, r3
    35d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
    35d6:	2b00      	cmp	r3, #0
    35d8:	d001      	beq.n	35de <__sflush_r+0x46>
    35da:	6c23      	ldr	r3, [r4, #64]	; 0x40
    35dc:	1ac0      	subs	r0, r0, r3
    35de:	0002      	movs	r2, r0
    35e0:	6a21      	ldr	r1, [r4, #32]
    35e2:	2300      	movs	r3, #0
    35e4:	0028      	movs	r0, r5
    35e6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    35e8:	47b8      	blx	r7
    35ea:	89a1      	ldrh	r1, [r4, #12]
    35ec:	1c43      	adds	r3, r0, #1
    35ee:	d106      	bne.n	35fe <__sflush_r+0x66>
    35f0:	682b      	ldr	r3, [r5, #0]
    35f2:	2b1d      	cmp	r3, #29
    35f4:	d831      	bhi.n	365a <__sflush_r+0xc2>
    35f6:	4a2c      	ldr	r2, [pc, #176]	; (36a8 <__sflush_r+0x110>)
    35f8:	40da      	lsrs	r2, r3
    35fa:	07d3      	lsls	r3, r2, #31
    35fc:	d52d      	bpl.n	365a <__sflush_r+0xc2>
    35fe:	2300      	movs	r3, #0
    3600:	6063      	str	r3, [r4, #4]
    3602:	6923      	ldr	r3, [r4, #16]
    3604:	6023      	str	r3, [r4, #0]
    3606:	04cb      	lsls	r3, r1, #19
    3608:	d505      	bpl.n	3616 <__sflush_r+0x7e>
    360a:	1c43      	adds	r3, r0, #1
    360c:	d102      	bne.n	3614 <__sflush_r+0x7c>
    360e:	682b      	ldr	r3, [r5, #0]
    3610:	2b00      	cmp	r3, #0
    3612:	d100      	bne.n	3616 <__sflush_r+0x7e>
    3614:	6560      	str	r0, [r4, #84]	; 0x54
    3616:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3618:	602e      	str	r6, [r5, #0]
    361a:	2900      	cmp	r1, #0
    361c:	d0c8      	beq.n	35b0 <__sflush_r+0x18>
    361e:	0023      	movs	r3, r4
    3620:	3344      	adds	r3, #68	; 0x44
    3622:	4299      	cmp	r1, r3
    3624:	d002      	beq.n	362c <__sflush_r+0x94>
    3626:	0028      	movs	r0, r5
    3628:	f000 f9ba 	bl	39a0 <_free_r>
    362c:	2000      	movs	r0, #0
    362e:	6360      	str	r0, [r4, #52]	; 0x34
    3630:	e7bf      	b.n	35b2 <__sflush_r+0x1a>
    3632:	2301      	movs	r3, #1
    3634:	6a21      	ldr	r1, [r4, #32]
    3636:	0028      	movs	r0, r5
    3638:	47b8      	blx	r7
    363a:	1c43      	adds	r3, r0, #1
    363c:	d1c5      	bne.n	35ca <__sflush_r+0x32>
    363e:	682b      	ldr	r3, [r5, #0]
    3640:	2b00      	cmp	r3, #0
    3642:	d0c2      	beq.n	35ca <__sflush_r+0x32>
    3644:	2b1d      	cmp	r3, #29
    3646:	d001      	beq.n	364c <__sflush_r+0xb4>
    3648:	2b16      	cmp	r3, #22
    364a:	d101      	bne.n	3650 <__sflush_r+0xb8>
    364c:	602e      	str	r6, [r5, #0]
    364e:	e7af      	b.n	35b0 <__sflush_r+0x18>
    3650:	2340      	movs	r3, #64	; 0x40
    3652:	89a2      	ldrh	r2, [r4, #12]
    3654:	4313      	orrs	r3, r2
    3656:	81a3      	strh	r3, [r4, #12]
    3658:	e7ab      	b.n	35b2 <__sflush_r+0x1a>
    365a:	2340      	movs	r3, #64	; 0x40
    365c:	430b      	orrs	r3, r1
    365e:	2001      	movs	r0, #1
    3660:	81a3      	strh	r3, [r4, #12]
    3662:	4240      	negs	r0, r0
    3664:	e7a5      	b.n	35b2 <__sflush_r+0x1a>
    3666:	690f      	ldr	r7, [r1, #16]
    3668:	2f00      	cmp	r7, #0
    366a:	d0a1      	beq.n	35b0 <__sflush_r+0x18>
    366c:	680b      	ldr	r3, [r1, #0]
    366e:	600f      	str	r7, [r1, #0]
    3670:	1bdb      	subs	r3, r3, r7
    3672:	9301      	str	r3, [sp, #4]
    3674:	2300      	movs	r3, #0
    3676:	0792      	lsls	r2, r2, #30
    3678:	d100      	bne.n	367c <__sflush_r+0xe4>
    367a:	694b      	ldr	r3, [r1, #20]
    367c:	60a3      	str	r3, [r4, #8]
    367e:	9b01      	ldr	r3, [sp, #4]
    3680:	2b00      	cmp	r3, #0
    3682:	dc00      	bgt.n	3686 <__sflush_r+0xee>
    3684:	e794      	b.n	35b0 <__sflush_r+0x18>
    3686:	9b01      	ldr	r3, [sp, #4]
    3688:	003a      	movs	r2, r7
    368a:	6a21      	ldr	r1, [r4, #32]
    368c:	0028      	movs	r0, r5
    368e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    3690:	47b0      	blx	r6
    3692:	2800      	cmp	r0, #0
    3694:	dc03      	bgt.n	369e <__sflush_r+0x106>
    3696:	2340      	movs	r3, #64	; 0x40
    3698:	89a2      	ldrh	r2, [r4, #12]
    369a:	4313      	orrs	r3, r2
    369c:	e7df      	b.n	365e <__sflush_r+0xc6>
    369e:	9b01      	ldr	r3, [sp, #4]
    36a0:	183f      	adds	r7, r7, r0
    36a2:	1a1b      	subs	r3, r3, r0
    36a4:	9301      	str	r3, [sp, #4]
    36a6:	e7ea      	b.n	367e <__sflush_r+0xe6>
    36a8:	20400001 	.word	0x20400001

000036ac <_fflush_r>:
    36ac:	690b      	ldr	r3, [r1, #16]
    36ae:	b570      	push	{r4, r5, r6, lr}
    36b0:	0005      	movs	r5, r0
    36b2:	000c      	movs	r4, r1
    36b4:	2b00      	cmp	r3, #0
    36b6:	d101      	bne.n	36bc <_fflush_r+0x10>
    36b8:	2000      	movs	r0, #0
    36ba:	bd70      	pop	{r4, r5, r6, pc}
    36bc:	2800      	cmp	r0, #0
    36be:	d004      	beq.n	36ca <_fflush_r+0x1e>
    36c0:	6983      	ldr	r3, [r0, #24]
    36c2:	2b00      	cmp	r3, #0
    36c4:	d101      	bne.n	36ca <_fflush_r+0x1e>
    36c6:	f000 f85f 	bl	3788 <__sinit>
    36ca:	4b0b      	ldr	r3, [pc, #44]	; (36f8 <_fflush_r+0x4c>)
    36cc:	429c      	cmp	r4, r3
    36ce:	d109      	bne.n	36e4 <_fflush_r+0x38>
    36d0:	686c      	ldr	r4, [r5, #4]
    36d2:	220c      	movs	r2, #12
    36d4:	5ea3      	ldrsh	r3, [r4, r2]
    36d6:	2b00      	cmp	r3, #0
    36d8:	d0ee      	beq.n	36b8 <_fflush_r+0xc>
    36da:	0021      	movs	r1, r4
    36dc:	0028      	movs	r0, r5
    36de:	f7ff ff5b 	bl	3598 <__sflush_r>
    36e2:	e7ea      	b.n	36ba <_fflush_r+0xe>
    36e4:	4b05      	ldr	r3, [pc, #20]	; (36fc <_fflush_r+0x50>)
    36e6:	429c      	cmp	r4, r3
    36e8:	d101      	bne.n	36ee <_fflush_r+0x42>
    36ea:	68ac      	ldr	r4, [r5, #8]
    36ec:	e7f1      	b.n	36d2 <_fflush_r+0x26>
    36ee:	4b04      	ldr	r3, [pc, #16]	; (3700 <_fflush_r+0x54>)
    36f0:	429c      	cmp	r4, r3
    36f2:	d1ee      	bne.n	36d2 <_fflush_r+0x26>
    36f4:	68ec      	ldr	r4, [r5, #12]
    36f6:	e7ec      	b.n	36d2 <_fflush_r+0x26>
    36f8:	00007e90 	.word	0x00007e90
    36fc:	00007eb0 	.word	0x00007eb0
    3700:	00007e70 	.word	0x00007e70

00003704 <_cleanup_r>:
    3704:	b510      	push	{r4, lr}
    3706:	4902      	ldr	r1, [pc, #8]	; (3710 <_cleanup_r+0xc>)
    3708:	f000 f8b2 	bl	3870 <_fwalk_reent>
    370c:	bd10      	pop	{r4, pc}
    370e:	46c0      	nop			; (mov r8, r8)
    3710:	000036ad 	.word	0x000036ad

00003714 <std.isra.0>:
    3714:	2300      	movs	r3, #0
    3716:	b510      	push	{r4, lr}
    3718:	0004      	movs	r4, r0
    371a:	6003      	str	r3, [r0, #0]
    371c:	6043      	str	r3, [r0, #4]
    371e:	6083      	str	r3, [r0, #8]
    3720:	8181      	strh	r1, [r0, #12]
    3722:	6643      	str	r3, [r0, #100]	; 0x64
    3724:	81c2      	strh	r2, [r0, #14]
    3726:	6103      	str	r3, [r0, #16]
    3728:	6143      	str	r3, [r0, #20]
    372a:	6183      	str	r3, [r0, #24]
    372c:	0019      	movs	r1, r3
    372e:	2208      	movs	r2, #8
    3730:	305c      	adds	r0, #92	; 0x5c
    3732:	f7ff fde6 	bl	3302 <memset>
    3736:	4b05      	ldr	r3, [pc, #20]	; (374c <std.isra.0+0x38>)
    3738:	6224      	str	r4, [r4, #32]
    373a:	6263      	str	r3, [r4, #36]	; 0x24
    373c:	4b04      	ldr	r3, [pc, #16]	; (3750 <std.isra.0+0x3c>)
    373e:	62a3      	str	r3, [r4, #40]	; 0x28
    3740:	4b04      	ldr	r3, [pc, #16]	; (3754 <std.isra.0+0x40>)
    3742:	62e3      	str	r3, [r4, #44]	; 0x2c
    3744:	4b04      	ldr	r3, [pc, #16]	; (3758 <std.isra.0+0x44>)
    3746:	6323      	str	r3, [r4, #48]	; 0x30
    3748:	bd10      	pop	{r4, pc}
    374a:	46c0      	nop			; (mov r8, r8)
    374c:	000040ad 	.word	0x000040ad
    3750:	000040d5 	.word	0x000040d5
    3754:	0000410d 	.word	0x0000410d
    3758:	00004139 	.word	0x00004139

0000375c <__sfmoreglue>:
    375c:	b570      	push	{r4, r5, r6, lr}
    375e:	2568      	movs	r5, #104	; 0x68
    3760:	1e4a      	subs	r2, r1, #1
    3762:	4355      	muls	r5, r2
    3764:	000e      	movs	r6, r1
    3766:	0029      	movs	r1, r5
    3768:	3174      	adds	r1, #116	; 0x74
    376a:	f000 f963 	bl	3a34 <_malloc_r>
    376e:	1e04      	subs	r4, r0, #0
    3770:	d008      	beq.n	3784 <__sfmoreglue+0x28>
    3772:	2100      	movs	r1, #0
    3774:	002a      	movs	r2, r5
    3776:	6001      	str	r1, [r0, #0]
    3778:	6046      	str	r6, [r0, #4]
    377a:	300c      	adds	r0, #12
    377c:	60a0      	str	r0, [r4, #8]
    377e:	3268      	adds	r2, #104	; 0x68
    3780:	f7ff fdbf 	bl	3302 <memset>
    3784:	0020      	movs	r0, r4
    3786:	bd70      	pop	{r4, r5, r6, pc}

00003788 <__sinit>:
    3788:	6983      	ldr	r3, [r0, #24]
    378a:	b513      	push	{r0, r1, r4, lr}
    378c:	0004      	movs	r4, r0
    378e:	2b00      	cmp	r3, #0
    3790:	d128      	bne.n	37e4 <__sinit+0x5c>
    3792:	6483      	str	r3, [r0, #72]	; 0x48
    3794:	64c3      	str	r3, [r0, #76]	; 0x4c
    3796:	6503      	str	r3, [r0, #80]	; 0x50
    3798:	4b13      	ldr	r3, [pc, #76]	; (37e8 <__sinit+0x60>)
    379a:	4a14      	ldr	r2, [pc, #80]	; (37ec <__sinit+0x64>)
    379c:	681b      	ldr	r3, [r3, #0]
    379e:	6282      	str	r2, [r0, #40]	; 0x28
    37a0:	9301      	str	r3, [sp, #4]
    37a2:	4298      	cmp	r0, r3
    37a4:	d101      	bne.n	37aa <__sinit+0x22>
    37a6:	2301      	movs	r3, #1
    37a8:	6183      	str	r3, [r0, #24]
    37aa:	0020      	movs	r0, r4
    37ac:	f000 f820 	bl	37f0 <__sfp>
    37b0:	6060      	str	r0, [r4, #4]
    37b2:	0020      	movs	r0, r4
    37b4:	f000 f81c 	bl	37f0 <__sfp>
    37b8:	60a0      	str	r0, [r4, #8]
    37ba:	0020      	movs	r0, r4
    37bc:	f000 f818 	bl	37f0 <__sfp>
    37c0:	2200      	movs	r2, #0
    37c2:	60e0      	str	r0, [r4, #12]
    37c4:	2104      	movs	r1, #4
    37c6:	6860      	ldr	r0, [r4, #4]
    37c8:	f7ff ffa4 	bl	3714 <std.isra.0>
    37cc:	2201      	movs	r2, #1
    37ce:	2109      	movs	r1, #9
    37d0:	68a0      	ldr	r0, [r4, #8]
    37d2:	f7ff ff9f 	bl	3714 <std.isra.0>
    37d6:	2202      	movs	r2, #2
    37d8:	2112      	movs	r1, #18
    37da:	68e0      	ldr	r0, [r4, #12]
    37dc:	f7ff ff9a 	bl	3714 <std.isra.0>
    37e0:	2301      	movs	r3, #1
    37e2:	61a3      	str	r3, [r4, #24]
    37e4:	bd13      	pop	{r0, r1, r4, pc}
    37e6:	46c0      	nop			; (mov r8, r8)
    37e8:	00007e6c 	.word	0x00007e6c
    37ec:	00003705 	.word	0x00003705

000037f0 <__sfp>:
    37f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    37f2:	4b1e      	ldr	r3, [pc, #120]	; (386c <__sfp+0x7c>)
    37f4:	0007      	movs	r7, r0
    37f6:	681e      	ldr	r6, [r3, #0]
    37f8:	69b3      	ldr	r3, [r6, #24]
    37fa:	2b00      	cmp	r3, #0
    37fc:	d102      	bne.n	3804 <__sfp+0x14>
    37fe:	0030      	movs	r0, r6
    3800:	f7ff ffc2 	bl	3788 <__sinit>
    3804:	3648      	adds	r6, #72	; 0x48
    3806:	68b4      	ldr	r4, [r6, #8]
    3808:	6873      	ldr	r3, [r6, #4]
    380a:	3b01      	subs	r3, #1
    380c:	d504      	bpl.n	3818 <__sfp+0x28>
    380e:	6833      	ldr	r3, [r6, #0]
    3810:	2b00      	cmp	r3, #0
    3812:	d007      	beq.n	3824 <__sfp+0x34>
    3814:	6836      	ldr	r6, [r6, #0]
    3816:	e7f6      	b.n	3806 <__sfp+0x16>
    3818:	220c      	movs	r2, #12
    381a:	5ea5      	ldrsh	r5, [r4, r2]
    381c:	2d00      	cmp	r5, #0
    381e:	d00d      	beq.n	383c <__sfp+0x4c>
    3820:	3468      	adds	r4, #104	; 0x68
    3822:	e7f2      	b.n	380a <__sfp+0x1a>
    3824:	2104      	movs	r1, #4
    3826:	0038      	movs	r0, r7
    3828:	f7ff ff98 	bl	375c <__sfmoreglue>
    382c:	6030      	str	r0, [r6, #0]
    382e:	2800      	cmp	r0, #0
    3830:	d1f0      	bne.n	3814 <__sfp+0x24>
    3832:	230c      	movs	r3, #12
    3834:	0004      	movs	r4, r0
    3836:	603b      	str	r3, [r7, #0]
    3838:	0020      	movs	r0, r4
    383a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    383c:	2301      	movs	r3, #1
    383e:	0020      	movs	r0, r4
    3840:	425b      	negs	r3, r3
    3842:	81e3      	strh	r3, [r4, #14]
    3844:	3302      	adds	r3, #2
    3846:	81a3      	strh	r3, [r4, #12]
    3848:	6665      	str	r5, [r4, #100]	; 0x64
    384a:	6025      	str	r5, [r4, #0]
    384c:	60a5      	str	r5, [r4, #8]
    384e:	6065      	str	r5, [r4, #4]
    3850:	6125      	str	r5, [r4, #16]
    3852:	6165      	str	r5, [r4, #20]
    3854:	61a5      	str	r5, [r4, #24]
    3856:	2208      	movs	r2, #8
    3858:	0029      	movs	r1, r5
    385a:	305c      	adds	r0, #92	; 0x5c
    385c:	f7ff fd51 	bl	3302 <memset>
    3860:	6365      	str	r5, [r4, #52]	; 0x34
    3862:	63a5      	str	r5, [r4, #56]	; 0x38
    3864:	64a5      	str	r5, [r4, #72]	; 0x48
    3866:	64e5      	str	r5, [r4, #76]	; 0x4c
    3868:	e7e6      	b.n	3838 <__sfp+0x48>
    386a:	46c0      	nop			; (mov r8, r8)
    386c:	00007e6c 	.word	0x00007e6c

00003870 <_fwalk_reent>:
    3870:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3872:	0004      	movs	r4, r0
    3874:	0007      	movs	r7, r0
    3876:	2600      	movs	r6, #0
    3878:	9101      	str	r1, [sp, #4]
    387a:	3448      	adds	r4, #72	; 0x48
    387c:	2c00      	cmp	r4, #0
    387e:	d101      	bne.n	3884 <_fwalk_reent+0x14>
    3880:	0030      	movs	r0, r6
    3882:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3884:	6863      	ldr	r3, [r4, #4]
    3886:	68a5      	ldr	r5, [r4, #8]
    3888:	9300      	str	r3, [sp, #0]
    388a:	9b00      	ldr	r3, [sp, #0]
    388c:	3b01      	subs	r3, #1
    388e:	9300      	str	r3, [sp, #0]
    3890:	d501      	bpl.n	3896 <_fwalk_reent+0x26>
    3892:	6824      	ldr	r4, [r4, #0]
    3894:	e7f2      	b.n	387c <_fwalk_reent+0xc>
    3896:	89ab      	ldrh	r3, [r5, #12]
    3898:	2b01      	cmp	r3, #1
    389a:	d908      	bls.n	38ae <_fwalk_reent+0x3e>
    389c:	220e      	movs	r2, #14
    389e:	5eab      	ldrsh	r3, [r5, r2]
    38a0:	3301      	adds	r3, #1
    38a2:	d004      	beq.n	38ae <_fwalk_reent+0x3e>
    38a4:	0029      	movs	r1, r5
    38a6:	0038      	movs	r0, r7
    38a8:	9b01      	ldr	r3, [sp, #4]
    38aa:	4798      	blx	r3
    38ac:	4306      	orrs	r6, r0
    38ae:	3568      	adds	r5, #104	; 0x68
    38b0:	e7eb      	b.n	388a <_fwalk_reent+0x1a>
	...

000038b4 <__swhatbuf_r>:
    38b4:	b570      	push	{r4, r5, r6, lr}
    38b6:	000e      	movs	r6, r1
    38b8:	001d      	movs	r5, r3
    38ba:	230e      	movs	r3, #14
    38bc:	5ec9      	ldrsh	r1, [r1, r3]
    38be:	b090      	sub	sp, #64	; 0x40
    38c0:	0014      	movs	r4, r2
    38c2:	2900      	cmp	r1, #0
    38c4:	da07      	bge.n	38d6 <__swhatbuf_r+0x22>
    38c6:	2300      	movs	r3, #0
    38c8:	602b      	str	r3, [r5, #0]
    38ca:	89b3      	ldrh	r3, [r6, #12]
    38cc:	061b      	lsls	r3, r3, #24
    38ce:	d411      	bmi.n	38f4 <__swhatbuf_r+0x40>
    38d0:	2380      	movs	r3, #128	; 0x80
    38d2:	00db      	lsls	r3, r3, #3
    38d4:	e00f      	b.n	38f6 <__swhatbuf_r+0x42>
    38d6:	aa01      	add	r2, sp, #4
    38d8:	f000 fd26 	bl	4328 <_fstat_r>
    38dc:	2800      	cmp	r0, #0
    38de:	dbf2      	blt.n	38c6 <__swhatbuf_r+0x12>
    38e0:	22f0      	movs	r2, #240	; 0xf0
    38e2:	9b02      	ldr	r3, [sp, #8]
    38e4:	0212      	lsls	r2, r2, #8
    38e6:	4013      	ands	r3, r2
    38e8:	4a05      	ldr	r2, [pc, #20]	; (3900 <__swhatbuf_r+0x4c>)
    38ea:	189b      	adds	r3, r3, r2
    38ec:	425a      	negs	r2, r3
    38ee:	4153      	adcs	r3, r2
    38f0:	602b      	str	r3, [r5, #0]
    38f2:	e7ed      	b.n	38d0 <__swhatbuf_r+0x1c>
    38f4:	2340      	movs	r3, #64	; 0x40
    38f6:	2000      	movs	r0, #0
    38f8:	6023      	str	r3, [r4, #0]
    38fa:	b010      	add	sp, #64	; 0x40
    38fc:	bd70      	pop	{r4, r5, r6, pc}
    38fe:	46c0      	nop			; (mov r8, r8)
    3900:	ffffe000 	.word	0xffffe000

00003904 <__smakebuf_r>:
    3904:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3906:	2602      	movs	r6, #2
    3908:	898b      	ldrh	r3, [r1, #12]
    390a:	0005      	movs	r5, r0
    390c:	000c      	movs	r4, r1
    390e:	4233      	tst	r3, r6
    3910:	d006      	beq.n	3920 <__smakebuf_r+0x1c>
    3912:	0023      	movs	r3, r4
    3914:	3347      	adds	r3, #71	; 0x47
    3916:	6023      	str	r3, [r4, #0]
    3918:	6123      	str	r3, [r4, #16]
    391a:	2301      	movs	r3, #1
    391c:	6163      	str	r3, [r4, #20]
    391e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    3920:	ab01      	add	r3, sp, #4
    3922:	466a      	mov	r2, sp
    3924:	f7ff ffc6 	bl	38b4 <__swhatbuf_r>
    3928:	9900      	ldr	r1, [sp, #0]
    392a:	0007      	movs	r7, r0
    392c:	0028      	movs	r0, r5
    392e:	f000 f881 	bl	3a34 <_malloc_r>
    3932:	2800      	cmp	r0, #0
    3934:	d108      	bne.n	3948 <__smakebuf_r+0x44>
    3936:	220c      	movs	r2, #12
    3938:	5ea3      	ldrsh	r3, [r4, r2]
    393a:	059a      	lsls	r2, r3, #22
    393c:	d4ef      	bmi.n	391e <__smakebuf_r+0x1a>
    393e:	2203      	movs	r2, #3
    3940:	4393      	bics	r3, r2
    3942:	431e      	orrs	r6, r3
    3944:	81a6      	strh	r6, [r4, #12]
    3946:	e7e4      	b.n	3912 <__smakebuf_r+0xe>
    3948:	4b0f      	ldr	r3, [pc, #60]	; (3988 <__smakebuf_r+0x84>)
    394a:	62ab      	str	r3, [r5, #40]	; 0x28
    394c:	2380      	movs	r3, #128	; 0x80
    394e:	89a2      	ldrh	r2, [r4, #12]
    3950:	6020      	str	r0, [r4, #0]
    3952:	4313      	orrs	r3, r2
    3954:	81a3      	strh	r3, [r4, #12]
    3956:	9b00      	ldr	r3, [sp, #0]
    3958:	6120      	str	r0, [r4, #16]
    395a:	6163      	str	r3, [r4, #20]
    395c:	9b01      	ldr	r3, [sp, #4]
    395e:	2b00      	cmp	r3, #0
    3960:	d00d      	beq.n	397e <__smakebuf_r+0x7a>
    3962:	230e      	movs	r3, #14
    3964:	5ee1      	ldrsh	r1, [r4, r3]
    3966:	0028      	movs	r0, r5
    3968:	f000 fcf0 	bl	434c <_isatty_r>
    396c:	2800      	cmp	r0, #0
    396e:	d006      	beq.n	397e <__smakebuf_r+0x7a>
    3970:	2203      	movs	r2, #3
    3972:	89a3      	ldrh	r3, [r4, #12]
    3974:	4393      	bics	r3, r2
    3976:	001a      	movs	r2, r3
    3978:	2301      	movs	r3, #1
    397a:	4313      	orrs	r3, r2
    397c:	81a3      	strh	r3, [r4, #12]
    397e:	89a0      	ldrh	r0, [r4, #12]
    3980:	4338      	orrs	r0, r7
    3982:	81a0      	strh	r0, [r4, #12]
    3984:	e7cb      	b.n	391e <__smakebuf_r+0x1a>
    3986:	46c0      	nop			; (mov r8, r8)
    3988:	00003705 	.word	0x00003705

0000398c <malloc>:
    398c:	b510      	push	{r4, lr}
    398e:	4b03      	ldr	r3, [pc, #12]	; (399c <malloc+0x10>)
    3990:	0001      	movs	r1, r0
    3992:	6818      	ldr	r0, [r3, #0]
    3994:	f000 f84e 	bl	3a34 <_malloc_r>
    3998:	bd10      	pop	{r4, pc}
    399a:	46c0      	nop			; (mov r8, r8)
    399c:	20000158 	.word	0x20000158

000039a0 <_free_r>:
    39a0:	b570      	push	{r4, r5, r6, lr}
    39a2:	0005      	movs	r5, r0
    39a4:	2900      	cmp	r1, #0
    39a6:	d010      	beq.n	39ca <_free_r+0x2a>
    39a8:	1f0c      	subs	r4, r1, #4
    39aa:	6823      	ldr	r3, [r4, #0]
    39ac:	2b00      	cmp	r3, #0
    39ae:	da00      	bge.n	39b2 <_free_r+0x12>
    39b0:	18e4      	adds	r4, r4, r3
    39b2:	0028      	movs	r0, r5
    39b4:	f000 fcfb 	bl	43ae <__malloc_lock>
    39b8:	4a1d      	ldr	r2, [pc, #116]	; (3a30 <_free_r+0x90>)
    39ba:	6813      	ldr	r3, [r2, #0]
    39bc:	2b00      	cmp	r3, #0
    39be:	d105      	bne.n	39cc <_free_r+0x2c>
    39c0:	6063      	str	r3, [r4, #4]
    39c2:	6014      	str	r4, [r2, #0]
    39c4:	0028      	movs	r0, r5
    39c6:	f000 fcf3 	bl	43b0 <__malloc_unlock>
    39ca:	bd70      	pop	{r4, r5, r6, pc}
    39cc:	42a3      	cmp	r3, r4
    39ce:	d909      	bls.n	39e4 <_free_r+0x44>
    39d0:	6821      	ldr	r1, [r4, #0]
    39d2:	1860      	adds	r0, r4, r1
    39d4:	4283      	cmp	r3, r0
    39d6:	d1f3      	bne.n	39c0 <_free_r+0x20>
    39d8:	6818      	ldr	r0, [r3, #0]
    39da:	685b      	ldr	r3, [r3, #4]
    39dc:	1841      	adds	r1, r0, r1
    39de:	6021      	str	r1, [r4, #0]
    39e0:	e7ee      	b.n	39c0 <_free_r+0x20>
    39e2:	0013      	movs	r3, r2
    39e4:	685a      	ldr	r2, [r3, #4]
    39e6:	2a00      	cmp	r2, #0
    39e8:	d001      	beq.n	39ee <_free_r+0x4e>
    39ea:	42a2      	cmp	r2, r4
    39ec:	d9f9      	bls.n	39e2 <_free_r+0x42>
    39ee:	6819      	ldr	r1, [r3, #0]
    39f0:	1858      	adds	r0, r3, r1
    39f2:	42a0      	cmp	r0, r4
    39f4:	d10b      	bne.n	3a0e <_free_r+0x6e>
    39f6:	6820      	ldr	r0, [r4, #0]
    39f8:	1809      	adds	r1, r1, r0
    39fa:	1858      	adds	r0, r3, r1
    39fc:	6019      	str	r1, [r3, #0]
    39fe:	4282      	cmp	r2, r0
    3a00:	d1e0      	bne.n	39c4 <_free_r+0x24>
    3a02:	6810      	ldr	r0, [r2, #0]
    3a04:	6852      	ldr	r2, [r2, #4]
    3a06:	1841      	adds	r1, r0, r1
    3a08:	6019      	str	r1, [r3, #0]
    3a0a:	605a      	str	r2, [r3, #4]
    3a0c:	e7da      	b.n	39c4 <_free_r+0x24>
    3a0e:	42a0      	cmp	r0, r4
    3a10:	d902      	bls.n	3a18 <_free_r+0x78>
    3a12:	230c      	movs	r3, #12
    3a14:	602b      	str	r3, [r5, #0]
    3a16:	e7d5      	b.n	39c4 <_free_r+0x24>
    3a18:	6821      	ldr	r1, [r4, #0]
    3a1a:	1860      	adds	r0, r4, r1
    3a1c:	4282      	cmp	r2, r0
    3a1e:	d103      	bne.n	3a28 <_free_r+0x88>
    3a20:	6810      	ldr	r0, [r2, #0]
    3a22:	6852      	ldr	r2, [r2, #4]
    3a24:	1841      	adds	r1, r0, r1
    3a26:	6021      	str	r1, [r4, #0]
    3a28:	6062      	str	r2, [r4, #4]
    3a2a:	605c      	str	r4, [r3, #4]
    3a2c:	e7ca      	b.n	39c4 <_free_r+0x24>
    3a2e:	46c0      	nop			; (mov r8, r8)
    3a30:	20000368 	.word	0x20000368

00003a34 <_malloc_r>:
    3a34:	2303      	movs	r3, #3
    3a36:	b570      	push	{r4, r5, r6, lr}
    3a38:	1ccd      	adds	r5, r1, #3
    3a3a:	439d      	bics	r5, r3
    3a3c:	3508      	adds	r5, #8
    3a3e:	0006      	movs	r6, r0
    3a40:	2d0c      	cmp	r5, #12
    3a42:	d21e      	bcs.n	3a82 <_malloc_r+0x4e>
    3a44:	250c      	movs	r5, #12
    3a46:	42a9      	cmp	r1, r5
    3a48:	d81d      	bhi.n	3a86 <_malloc_r+0x52>
    3a4a:	0030      	movs	r0, r6
    3a4c:	f000 fcaf 	bl	43ae <__malloc_lock>
    3a50:	4a25      	ldr	r2, [pc, #148]	; (3ae8 <_malloc_r+0xb4>)
    3a52:	6814      	ldr	r4, [r2, #0]
    3a54:	0021      	movs	r1, r4
    3a56:	2900      	cmp	r1, #0
    3a58:	d119      	bne.n	3a8e <_malloc_r+0x5a>
    3a5a:	4c24      	ldr	r4, [pc, #144]	; (3aec <_malloc_r+0xb8>)
    3a5c:	6823      	ldr	r3, [r4, #0]
    3a5e:	2b00      	cmp	r3, #0
    3a60:	d103      	bne.n	3a6a <_malloc_r+0x36>
    3a62:	0030      	movs	r0, r6
    3a64:	f000 fb10 	bl	4088 <_sbrk_r>
    3a68:	6020      	str	r0, [r4, #0]
    3a6a:	0029      	movs	r1, r5
    3a6c:	0030      	movs	r0, r6
    3a6e:	f000 fb0b 	bl	4088 <_sbrk_r>
    3a72:	1c43      	adds	r3, r0, #1
    3a74:	d12c      	bne.n	3ad0 <_malloc_r+0x9c>
    3a76:	230c      	movs	r3, #12
    3a78:	0030      	movs	r0, r6
    3a7a:	6033      	str	r3, [r6, #0]
    3a7c:	f000 fc98 	bl	43b0 <__malloc_unlock>
    3a80:	e003      	b.n	3a8a <_malloc_r+0x56>
    3a82:	2d00      	cmp	r5, #0
    3a84:	dadf      	bge.n	3a46 <_malloc_r+0x12>
    3a86:	230c      	movs	r3, #12
    3a88:	6033      	str	r3, [r6, #0]
    3a8a:	2000      	movs	r0, #0
    3a8c:	bd70      	pop	{r4, r5, r6, pc}
    3a8e:	680b      	ldr	r3, [r1, #0]
    3a90:	1b5b      	subs	r3, r3, r5
    3a92:	d41a      	bmi.n	3aca <_malloc_r+0x96>
    3a94:	2b0b      	cmp	r3, #11
    3a96:	d903      	bls.n	3aa0 <_malloc_r+0x6c>
    3a98:	600b      	str	r3, [r1, #0]
    3a9a:	18cc      	adds	r4, r1, r3
    3a9c:	6025      	str	r5, [r4, #0]
    3a9e:	e003      	b.n	3aa8 <_malloc_r+0x74>
    3aa0:	428c      	cmp	r4, r1
    3aa2:	d10e      	bne.n	3ac2 <_malloc_r+0x8e>
    3aa4:	6863      	ldr	r3, [r4, #4]
    3aa6:	6013      	str	r3, [r2, #0]
    3aa8:	0030      	movs	r0, r6
    3aaa:	f000 fc81 	bl	43b0 <__malloc_unlock>
    3aae:	0020      	movs	r0, r4
    3ab0:	2207      	movs	r2, #7
    3ab2:	300b      	adds	r0, #11
    3ab4:	1d23      	adds	r3, r4, #4
    3ab6:	4390      	bics	r0, r2
    3ab8:	1ac3      	subs	r3, r0, r3
    3aba:	d0e7      	beq.n	3a8c <_malloc_r+0x58>
    3abc:	425a      	negs	r2, r3
    3abe:	50e2      	str	r2, [r4, r3]
    3ac0:	e7e4      	b.n	3a8c <_malloc_r+0x58>
    3ac2:	684b      	ldr	r3, [r1, #4]
    3ac4:	6063      	str	r3, [r4, #4]
    3ac6:	000c      	movs	r4, r1
    3ac8:	e7ee      	b.n	3aa8 <_malloc_r+0x74>
    3aca:	000c      	movs	r4, r1
    3acc:	6849      	ldr	r1, [r1, #4]
    3ace:	e7c2      	b.n	3a56 <_malloc_r+0x22>
    3ad0:	2303      	movs	r3, #3
    3ad2:	1cc4      	adds	r4, r0, #3
    3ad4:	439c      	bics	r4, r3
    3ad6:	42a0      	cmp	r0, r4
    3ad8:	d0e0      	beq.n	3a9c <_malloc_r+0x68>
    3ada:	1a21      	subs	r1, r4, r0
    3adc:	0030      	movs	r0, r6
    3ade:	f000 fad3 	bl	4088 <_sbrk_r>
    3ae2:	1c43      	adds	r3, r0, #1
    3ae4:	d1da      	bne.n	3a9c <_malloc_r+0x68>
    3ae6:	e7c6      	b.n	3a76 <_malloc_r+0x42>
    3ae8:	20000368 	.word	0x20000368
    3aec:	2000036c 	.word	0x2000036c

00003af0 <__sfputc_r>:
    3af0:	6893      	ldr	r3, [r2, #8]
    3af2:	b510      	push	{r4, lr}
    3af4:	3b01      	subs	r3, #1
    3af6:	6093      	str	r3, [r2, #8]
    3af8:	2b00      	cmp	r3, #0
    3afa:	da05      	bge.n	3b08 <__sfputc_r+0x18>
    3afc:	6994      	ldr	r4, [r2, #24]
    3afe:	42a3      	cmp	r3, r4
    3b00:	db08      	blt.n	3b14 <__sfputc_r+0x24>
    3b02:	b2cb      	uxtb	r3, r1
    3b04:	2b0a      	cmp	r3, #10
    3b06:	d005      	beq.n	3b14 <__sfputc_r+0x24>
    3b08:	6813      	ldr	r3, [r2, #0]
    3b0a:	1c58      	adds	r0, r3, #1
    3b0c:	6010      	str	r0, [r2, #0]
    3b0e:	7019      	strb	r1, [r3, #0]
    3b10:	b2c8      	uxtb	r0, r1
    3b12:	bd10      	pop	{r4, pc}
    3b14:	f000 fb16 	bl	4144 <__swbuf_r>
    3b18:	e7fb      	b.n	3b12 <__sfputc_r+0x22>

00003b1a <__sfputs_r>:
    3b1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3b1c:	0006      	movs	r6, r0
    3b1e:	000f      	movs	r7, r1
    3b20:	0014      	movs	r4, r2
    3b22:	18d5      	adds	r5, r2, r3
    3b24:	42ac      	cmp	r4, r5
    3b26:	d101      	bne.n	3b2c <__sfputs_r+0x12>
    3b28:	2000      	movs	r0, #0
    3b2a:	e007      	b.n	3b3c <__sfputs_r+0x22>
    3b2c:	7821      	ldrb	r1, [r4, #0]
    3b2e:	003a      	movs	r2, r7
    3b30:	0030      	movs	r0, r6
    3b32:	f7ff ffdd 	bl	3af0 <__sfputc_r>
    3b36:	3401      	adds	r4, #1
    3b38:	1c43      	adds	r3, r0, #1
    3b3a:	d1f3      	bne.n	3b24 <__sfputs_r+0xa>
    3b3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00003b40 <_vfiprintf_r>:
    3b40:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b42:	b09f      	sub	sp, #124	; 0x7c
    3b44:	0006      	movs	r6, r0
    3b46:	000f      	movs	r7, r1
    3b48:	0014      	movs	r4, r2
    3b4a:	9305      	str	r3, [sp, #20]
    3b4c:	2800      	cmp	r0, #0
    3b4e:	d004      	beq.n	3b5a <_vfiprintf_r+0x1a>
    3b50:	6983      	ldr	r3, [r0, #24]
    3b52:	2b00      	cmp	r3, #0
    3b54:	d101      	bne.n	3b5a <_vfiprintf_r+0x1a>
    3b56:	f7ff fe17 	bl	3788 <__sinit>
    3b5a:	4b7f      	ldr	r3, [pc, #508]	; (3d58 <_vfiprintf_r+0x218>)
    3b5c:	429f      	cmp	r7, r3
    3b5e:	d15c      	bne.n	3c1a <_vfiprintf_r+0xda>
    3b60:	6877      	ldr	r7, [r6, #4]
    3b62:	89bb      	ldrh	r3, [r7, #12]
    3b64:	071b      	lsls	r3, r3, #28
    3b66:	d562      	bpl.n	3c2e <_vfiprintf_r+0xee>
    3b68:	693b      	ldr	r3, [r7, #16]
    3b6a:	2b00      	cmp	r3, #0
    3b6c:	d05f      	beq.n	3c2e <_vfiprintf_r+0xee>
    3b6e:	2300      	movs	r3, #0
    3b70:	ad06      	add	r5, sp, #24
    3b72:	616b      	str	r3, [r5, #20]
    3b74:	3320      	adds	r3, #32
    3b76:	766b      	strb	r3, [r5, #25]
    3b78:	3310      	adds	r3, #16
    3b7a:	76ab      	strb	r3, [r5, #26]
    3b7c:	9402      	str	r4, [sp, #8]
    3b7e:	9c02      	ldr	r4, [sp, #8]
    3b80:	7823      	ldrb	r3, [r4, #0]
    3b82:	2b00      	cmp	r3, #0
    3b84:	d15d      	bne.n	3c42 <_vfiprintf_r+0x102>
    3b86:	9b02      	ldr	r3, [sp, #8]
    3b88:	1ae3      	subs	r3, r4, r3
    3b8a:	9304      	str	r3, [sp, #16]
    3b8c:	d00d      	beq.n	3baa <_vfiprintf_r+0x6a>
    3b8e:	9b04      	ldr	r3, [sp, #16]
    3b90:	9a02      	ldr	r2, [sp, #8]
    3b92:	0039      	movs	r1, r7
    3b94:	0030      	movs	r0, r6
    3b96:	f7ff ffc0 	bl	3b1a <__sfputs_r>
    3b9a:	1c43      	adds	r3, r0, #1
    3b9c:	d100      	bne.n	3ba0 <_vfiprintf_r+0x60>
    3b9e:	e0cc      	b.n	3d3a <_vfiprintf_r+0x1fa>
    3ba0:	696a      	ldr	r2, [r5, #20]
    3ba2:	9b04      	ldr	r3, [sp, #16]
    3ba4:	4694      	mov	ip, r2
    3ba6:	4463      	add	r3, ip
    3ba8:	616b      	str	r3, [r5, #20]
    3baa:	7823      	ldrb	r3, [r4, #0]
    3bac:	2b00      	cmp	r3, #0
    3bae:	d100      	bne.n	3bb2 <_vfiprintf_r+0x72>
    3bb0:	e0c3      	b.n	3d3a <_vfiprintf_r+0x1fa>
    3bb2:	2201      	movs	r2, #1
    3bb4:	2300      	movs	r3, #0
    3bb6:	4252      	negs	r2, r2
    3bb8:	606a      	str	r2, [r5, #4]
    3bba:	a902      	add	r1, sp, #8
    3bbc:	3254      	adds	r2, #84	; 0x54
    3bbe:	1852      	adds	r2, r2, r1
    3bc0:	3401      	adds	r4, #1
    3bc2:	602b      	str	r3, [r5, #0]
    3bc4:	60eb      	str	r3, [r5, #12]
    3bc6:	60ab      	str	r3, [r5, #8]
    3bc8:	7013      	strb	r3, [r2, #0]
    3bca:	65ab      	str	r3, [r5, #88]	; 0x58
    3bcc:	7821      	ldrb	r1, [r4, #0]
    3bce:	2205      	movs	r2, #5
    3bd0:	4862      	ldr	r0, [pc, #392]	; (3d5c <_vfiprintf_r+0x21c>)
    3bd2:	f000 fbe1 	bl	4398 <memchr>
    3bd6:	1c63      	adds	r3, r4, #1
    3bd8:	469c      	mov	ip, r3
    3bda:	2800      	cmp	r0, #0
    3bdc:	d135      	bne.n	3c4a <_vfiprintf_r+0x10a>
    3bde:	6829      	ldr	r1, [r5, #0]
    3be0:	06cb      	lsls	r3, r1, #27
    3be2:	d504      	bpl.n	3bee <_vfiprintf_r+0xae>
    3be4:	2353      	movs	r3, #83	; 0x53
    3be6:	aa02      	add	r2, sp, #8
    3be8:	3020      	adds	r0, #32
    3bea:	189b      	adds	r3, r3, r2
    3bec:	7018      	strb	r0, [r3, #0]
    3bee:	070b      	lsls	r3, r1, #28
    3bf0:	d504      	bpl.n	3bfc <_vfiprintf_r+0xbc>
    3bf2:	2353      	movs	r3, #83	; 0x53
    3bf4:	202b      	movs	r0, #43	; 0x2b
    3bf6:	aa02      	add	r2, sp, #8
    3bf8:	189b      	adds	r3, r3, r2
    3bfa:	7018      	strb	r0, [r3, #0]
    3bfc:	7823      	ldrb	r3, [r4, #0]
    3bfe:	2b2a      	cmp	r3, #42	; 0x2a
    3c00:	d02c      	beq.n	3c5c <_vfiprintf_r+0x11c>
    3c02:	2000      	movs	r0, #0
    3c04:	210a      	movs	r1, #10
    3c06:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3c08:	7822      	ldrb	r2, [r4, #0]
    3c0a:	3a30      	subs	r2, #48	; 0x30
    3c0c:	2a09      	cmp	r2, #9
    3c0e:	d800      	bhi.n	3c12 <_vfiprintf_r+0xd2>
    3c10:	e06b      	b.n	3cea <_vfiprintf_r+0x1aa>
    3c12:	2800      	cmp	r0, #0
    3c14:	d02a      	beq.n	3c6c <_vfiprintf_r+0x12c>
    3c16:	9309      	str	r3, [sp, #36]	; 0x24
    3c18:	e028      	b.n	3c6c <_vfiprintf_r+0x12c>
    3c1a:	4b51      	ldr	r3, [pc, #324]	; (3d60 <_vfiprintf_r+0x220>)
    3c1c:	429f      	cmp	r7, r3
    3c1e:	d101      	bne.n	3c24 <_vfiprintf_r+0xe4>
    3c20:	68b7      	ldr	r7, [r6, #8]
    3c22:	e79e      	b.n	3b62 <_vfiprintf_r+0x22>
    3c24:	4b4f      	ldr	r3, [pc, #316]	; (3d64 <_vfiprintf_r+0x224>)
    3c26:	429f      	cmp	r7, r3
    3c28:	d19b      	bne.n	3b62 <_vfiprintf_r+0x22>
    3c2a:	68f7      	ldr	r7, [r6, #12]
    3c2c:	e799      	b.n	3b62 <_vfiprintf_r+0x22>
    3c2e:	0039      	movs	r1, r7
    3c30:	0030      	movs	r0, r6
    3c32:	f000 faf1 	bl	4218 <__swsetup_r>
    3c36:	2800      	cmp	r0, #0
    3c38:	d099      	beq.n	3b6e <_vfiprintf_r+0x2e>
    3c3a:	2001      	movs	r0, #1
    3c3c:	4240      	negs	r0, r0
    3c3e:	b01f      	add	sp, #124	; 0x7c
    3c40:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3c42:	2b25      	cmp	r3, #37	; 0x25
    3c44:	d09f      	beq.n	3b86 <_vfiprintf_r+0x46>
    3c46:	3401      	adds	r4, #1
    3c48:	e79a      	b.n	3b80 <_vfiprintf_r+0x40>
    3c4a:	4b44      	ldr	r3, [pc, #272]	; (3d5c <_vfiprintf_r+0x21c>)
    3c4c:	6829      	ldr	r1, [r5, #0]
    3c4e:	1ac0      	subs	r0, r0, r3
    3c50:	2301      	movs	r3, #1
    3c52:	4083      	lsls	r3, r0
    3c54:	430b      	orrs	r3, r1
    3c56:	602b      	str	r3, [r5, #0]
    3c58:	4664      	mov	r4, ip
    3c5a:	e7b7      	b.n	3bcc <_vfiprintf_r+0x8c>
    3c5c:	9b05      	ldr	r3, [sp, #20]
    3c5e:	1d18      	adds	r0, r3, #4
    3c60:	681b      	ldr	r3, [r3, #0]
    3c62:	9005      	str	r0, [sp, #20]
    3c64:	2b00      	cmp	r3, #0
    3c66:	db3a      	blt.n	3cde <_vfiprintf_r+0x19e>
    3c68:	9309      	str	r3, [sp, #36]	; 0x24
    3c6a:	4664      	mov	r4, ip
    3c6c:	7823      	ldrb	r3, [r4, #0]
    3c6e:	2b2e      	cmp	r3, #46	; 0x2e
    3c70:	d10b      	bne.n	3c8a <_vfiprintf_r+0x14a>
    3c72:	7863      	ldrb	r3, [r4, #1]
    3c74:	1c62      	adds	r2, r4, #1
    3c76:	2b2a      	cmp	r3, #42	; 0x2a
    3c78:	d13f      	bne.n	3cfa <_vfiprintf_r+0x1ba>
    3c7a:	9b05      	ldr	r3, [sp, #20]
    3c7c:	3402      	adds	r4, #2
    3c7e:	1d1a      	adds	r2, r3, #4
    3c80:	681b      	ldr	r3, [r3, #0]
    3c82:	9205      	str	r2, [sp, #20]
    3c84:	2b00      	cmp	r3, #0
    3c86:	db35      	blt.n	3cf4 <_vfiprintf_r+0x1b4>
    3c88:	9307      	str	r3, [sp, #28]
    3c8a:	7821      	ldrb	r1, [r4, #0]
    3c8c:	2203      	movs	r2, #3
    3c8e:	4836      	ldr	r0, [pc, #216]	; (3d68 <_vfiprintf_r+0x228>)
    3c90:	f000 fb82 	bl	4398 <memchr>
    3c94:	2800      	cmp	r0, #0
    3c96:	d007      	beq.n	3ca8 <_vfiprintf_r+0x168>
    3c98:	4b33      	ldr	r3, [pc, #204]	; (3d68 <_vfiprintf_r+0x228>)
    3c9a:	682a      	ldr	r2, [r5, #0]
    3c9c:	1ac0      	subs	r0, r0, r3
    3c9e:	2340      	movs	r3, #64	; 0x40
    3ca0:	4083      	lsls	r3, r0
    3ca2:	4313      	orrs	r3, r2
    3ca4:	602b      	str	r3, [r5, #0]
    3ca6:	3401      	adds	r4, #1
    3ca8:	7821      	ldrb	r1, [r4, #0]
    3caa:	1c63      	adds	r3, r4, #1
    3cac:	2206      	movs	r2, #6
    3cae:	482f      	ldr	r0, [pc, #188]	; (3d6c <_vfiprintf_r+0x22c>)
    3cb0:	9302      	str	r3, [sp, #8]
    3cb2:	7629      	strb	r1, [r5, #24]
    3cb4:	f000 fb70 	bl	4398 <memchr>
    3cb8:	2800      	cmp	r0, #0
    3cba:	d044      	beq.n	3d46 <_vfiprintf_r+0x206>
    3cbc:	4b2c      	ldr	r3, [pc, #176]	; (3d70 <_vfiprintf_r+0x230>)
    3cbe:	2b00      	cmp	r3, #0
    3cc0:	d12f      	bne.n	3d22 <_vfiprintf_r+0x1e2>
    3cc2:	6829      	ldr	r1, [r5, #0]
    3cc4:	9b05      	ldr	r3, [sp, #20]
    3cc6:	2207      	movs	r2, #7
    3cc8:	05c9      	lsls	r1, r1, #23
    3cca:	d528      	bpl.n	3d1e <_vfiprintf_r+0x1de>
    3ccc:	189b      	adds	r3, r3, r2
    3cce:	4393      	bics	r3, r2
    3cd0:	3308      	adds	r3, #8
    3cd2:	9305      	str	r3, [sp, #20]
    3cd4:	696b      	ldr	r3, [r5, #20]
    3cd6:	9a03      	ldr	r2, [sp, #12]
    3cd8:	189b      	adds	r3, r3, r2
    3cda:	616b      	str	r3, [r5, #20]
    3cdc:	e74f      	b.n	3b7e <_vfiprintf_r+0x3e>
    3cde:	425b      	negs	r3, r3
    3ce0:	60eb      	str	r3, [r5, #12]
    3ce2:	2302      	movs	r3, #2
    3ce4:	430b      	orrs	r3, r1
    3ce6:	602b      	str	r3, [r5, #0]
    3ce8:	e7bf      	b.n	3c6a <_vfiprintf_r+0x12a>
    3cea:	434b      	muls	r3, r1
    3cec:	3401      	adds	r4, #1
    3cee:	189b      	adds	r3, r3, r2
    3cf0:	2001      	movs	r0, #1
    3cf2:	e789      	b.n	3c08 <_vfiprintf_r+0xc8>
    3cf4:	2301      	movs	r3, #1
    3cf6:	425b      	negs	r3, r3
    3cf8:	e7c6      	b.n	3c88 <_vfiprintf_r+0x148>
    3cfa:	2300      	movs	r3, #0
    3cfc:	0014      	movs	r4, r2
    3cfe:	200a      	movs	r0, #10
    3d00:	001a      	movs	r2, r3
    3d02:	606b      	str	r3, [r5, #4]
    3d04:	7821      	ldrb	r1, [r4, #0]
    3d06:	3930      	subs	r1, #48	; 0x30
    3d08:	2909      	cmp	r1, #9
    3d0a:	d903      	bls.n	3d14 <_vfiprintf_r+0x1d4>
    3d0c:	2b00      	cmp	r3, #0
    3d0e:	d0bc      	beq.n	3c8a <_vfiprintf_r+0x14a>
    3d10:	9207      	str	r2, [sp, #28]
    3d12:	e7ba      	b.n	3c8a <_vfiprintf_r+0x14a>
    3d14:	4342      	muls	r2, r0
    3d16:	3401      	adds	r4, #1
    3d18:	1852      	adds	r2, r2, r1
    3d1a:	2301      	movs	r3, #1
    3d1c:	e7f2      	b.n	3d04 <_vfiprintf_r+0x1c4>
    3d1e:	3307      	adds	r3, #7
    3d20:	e7d5      	b.n	3cce <_vfiprintf_r+0x18e>
    3d22:	ab05      	add	r3, sp, #20
    3d24:	9300      	str	r3, [sp, #0]
    3d26:	003a      	movs	r2, r7
    3d28:	4b12      	ldr	r3, [pc, #72]	; (3d74 <_vfiprintf_r+0x234>)
    3d2a:	0029      	movs	r1, r5
    3d2c:	0030      	movs	r0, r6
    3d2e:	e000      	b.n	3d32 <_vfiprintf_r+0x1f2>
    3d30:	bf00      	nop
    3d32:	9003      	str	r0, [sp, #12]
    3d34:	9b03      	ldr	r3, [sp, #12]
    3d36:	3301      	adds	r3, #1
    3d38:	d1cc      	bne.n	3cd4 <_vfiprintf_r+0x194>
    3d3a:	89bb      	ldrh	r3, [r7, #12]
    3d3c:	065b      	lsls	r3, r3, #25
    3d3e:	d500      	bpl.n	3d42 <_vfiprintf_r+0x202>
    3d40:	e77b      	b.n	3c3a <_vfiprintf_r+0xfa>
    3d42:	980b      	ldr	r0, [sp, #44]	; 0x2c
    3d44:	e77b      	b.n	3c3e <_vfiprintf_r+0xfe>
    3d46:	ab05      	add	r3, sp, #20
    3d48:	9300      	str	r3, [sp, #0]
    3d4a:	003a      	movs	r2, r7
    3d4c:	4b09      	ldr	r3, [pc, #36]	; (3d74 <_vfiprintf_r+0x234>)
    3d4e:	0029      	movs	r1, r5
    3d50:	0030      	movs	r0, r6
    3d52:	f000 f87f 	bl	3e54 <_printf_i>
    3d56:	e7ec      	b.n	3d32 <_vfiprintf_r+0x1f2>
    3d58:	00007e90 	.word	0x00007e90
    3d5c:	00007ed0 	.word	0x00007ed0
    3d60:	00007eb0 	.word	0x00007eb0
    3d64:	00007e70 	.word	0x00007e70
    3d68:	00007ed6 	.word	0x00007ed6
    3d6c:	00007eda 	.word	0x00007eda
    3d70:	00000000 	.word	0x00000000
    3d74:	00003b1b 	.word	0x00003b1b

00003d78 <_printf_common>:
    3d78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3d7a:	0015      	movs	r5, r2
    3d7c:	9301      	str	r3, [sp, #4]
    3d7e:	688a      	ldr	r2, [r1, #8]
    3d80:	690b      	ldr	r3, [r1, #16]
    3d82:	9000      	str	r0, [sp, #0]
    3d84:	000c      	movs	r4, r1
    3d86:	4293      	cmp	r3, r2
    3d88:	da00      	bge.n	3d8c <_printf_common+0x14>
    3d8a:	0013      	movs	r3, r2
    3d8c:	0022      	movs	r2, r4
    3d8e:	602b      	str	r3, [r5, #0]
    3d90:	3243      	adds	r2, #67	; 0x43
    3d92:	7812      	ldrb	r2, [r2, #0]
    3d94:	2a00      	cmp	r2, #0
    3d96:	d001      	beq.n	3d9c <_printf_common+0x24>
    3d98:	3301      	adds	r3, #1
    3d9a:	602b      	str	r3, [r5, #0]
    3d9c:	6823      	ldr	r3, [r4, #0]
    3d9e:	069b      	lsls	r3, r3, #26
    3da0:	d502      	bpl.n	3da8 <_printf_common+0x30>
    3da2:	682b      	ldr	r3, [r5, #0]
    3da4:	3302      	adds	r3, #2
    3da6:	602b      	str	r3, [r5, #0]
    3da8:	2706      	movs	r7, #6
    3daa:	6823      	ldr	r3, [r4, #0]
    3dac:	401f      	ands	r7, r3
    3dae:	d027      	beq.n	3e00 <_printf_common+0x88>
    3db0:	0023      	movs	r3, r4
    3db2:	3343      	adds	r3, #67	; 0x43
    3db4:	781b      	ldrb	r3, [r3, #0]
    3db6:	1e5a      	subs	r2, r3, #1
    3db8:	4193      	sbcs	r3, r2
    3dba:	6822      	ldr	r2, [r4, #0]
    3dbc:	0692      	lsls	r2, r2, #26
    3dbe:	d430      	bmi.n	3e22 <_printf_common+0xaa>
    3dc0:	0022      	movs	r2, r4
    3dc2:	9901      	ldr	r1, [sp, #4]
    3dc4:	3243      	adds	r2, #67	; 0x43
    3dc6:	9800      	ldr	r0, [sp, #0]
    3dc8:	9e08      	ldr	r6, [sp, #32]
    3dca:	47b0      	blx	r6
    3dcc:	1c43      	adds	r3, r0, #1
    3dce:	d025      	beq.n	3e1c <_printf_common+0xa4>
    3dd0:	2306      	movs	r3, #6
    3dd2:	6820      	ldr	r0, [r4, #0]
    3dd4:	682a      	ldr	r2, [r5, #0]
    3dd6:	68e1      	ldr	r1, [r4, #12]
    3dd8:	4003      	ands	r3, r0
    3dda:	2500      	movs	r5, #0
    3ddc:	2b04      	cmp	r3, #4
    3dde:	d103      	bne.n	3de8 <_printf_common+0x70>
    3de0:	1a8d      	subs	r5, r1, r2
    3de2:	43eb      	mvns	r3, r5
    3de4:	17db      	asrs	r3, r3, #31
    3de6:	401d      	ands	r5, r3
    3de8:	68a3      	ldr	r3, [r4, #8]
    3dea:	6922      	ldr	r2, [r4, #16]
    3dec:	4293      	cmp	r3, r2
    3dee:	dd01      	ble.n	3df4 <_printf_common+0x7c>
    3df0:	1a9b      	subs	r3, r3, r2
    3df2:	18ed      	adds	r5, r5, r3
    3df4:	2700      	movs	r7, #0
    3df6:	42bd      	cmp	r5, r7
    3df8:	d120      	bne.n	3e3c <_printf_common+0xc4>
    3dfa:	2000      	movs	r0, #0
    3dfc:	e010      	b.n	3e20 <_printf_common+0xa8>
    3dfe:	3701      	adds	r7, #1
    3e00:	68e3      	ldr	r3, [r4, #12]
    3e02:	682a      	ldr	r2, [r5, #0]
    3e04:	1a9b      	subs	r3, r3, r2
    3e06:	429f      	cmp	r7, r3
    3e08:	dad2      	bge.n	3db0 <_printf_common+0x38>
    3e0a:	0022      	movs	r2, r4
    3e0c:	2301      	movs	r3, #1
    3e0e:	3219      	adds	r2, #25
    3e10:	9901      	ldr	r1, [sp, #4]
    3e12:	9800      	ldr	r0, [sp, #0]
    3e14:	9e08      	ldr	r6, [sp, #32]
    3e16:	47b0      	blx	r6
    3e18:	1c43      	adds	r3, r0, #1
    3e1a:	d1f0      	bne.n	3dfe <_printf_common+0x86>
    3e1c:	2001      	movs	r0, #1
    3e1e:	4240      	negs	r0, r0
    3e20:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3e22:	2030      	movs	r0, #48	; 0x30
    3e24:	18e1      	adds	r1, r4, r3
    3e26:	3143      	adds	r1, #67	; 0x43
    3e28:	7008      	strb	r0, [r1, #0]
    3e2a:	0021      	movs	r1, r4
    3e2c:	1c5a      	adds	r2, r3, #1
    3e2e:	3145      	adds	r1, #69	; 0x45
    3e30:	7809      	ldrb	r1, [r1, #0]
    3e32:	18a2      	adds	r2, r4, r2
    3e34:	3243      	adds	r2, #67	; 0x43
    3e36:	3302      	adds	r3, #2
    3e38:	7011      	strb	r1, [r2, #0]
    3e3a:	e7c1      	b.n	3dc0 <_printf_common+0x48>
    3e3c:	0022      	movs	r2, r4
    3e3e:	2301      	movs	r3, #1
    3e40:	321a      	adds	r2, #26
    3e42:	9901      	ldr	r1, [sp, #4]
    3e44:	9800      	ldr	r0, [sp, #0]
    3e46:	9e08      	ldr	r6, [sp, #32]
    3e48:	47b0      	blx	r6
    3e4a:	1c43      	adds	r3, r0, #1
    3e4c:	d0e6      	beq.n	3e1c <_printf_common+0xa4>
    3e4e:	3701      	adds	r7, #1
    3e50:	e7d1      	b.n	3df6 <_printf_common+0x7e>
	...

00003e54 <_printf_i>:
    3e54:	b5f0      	push	{r4, r5, r6, r7, lr}
    3e56:	b08b      	sub	sp, #44	; 0x2c
    3e58:	9206      	str	r2, [sp, #24]
    3e5a:	000a      	movs	r2, r1
    3e5c:	3243      	adds	r2, #67	; 0x43
    3e5e:	9307      	str	r3, [sp, #28]
    3e60:	9005      	str	r0, [sp, #20]
    3e62:	9204      	str	r2, [sp, #16]
    3e64:	7e0a      	ldrb	r2, [r1, #24]
    3e66:	000c      	movs	r4, r1
    3e68:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3e6a:	2a6e      	cmp	r2, #110	; 0x6e
    3e6c:	d100      	bne.n	3e70 <_printf_i+0x1c>
    3e6e:	e08f      	b.n	3f90 <_printf_i+0x13c>
    3e70:	d817      	bhi.n	3ea2 <_printf_i+0x4e>
    3e72:	2a63      	cmp	r2, #99	; 0x63
    3e74:	d02c      	beq.n	3ed0 <_printf_i+0x7c>
    3e76:	d808      	bhi.n	3e8a <_printf_i+0x36>
    3e78:	2a00      	cmp	r2, #0
    3e7a:	d100      	bne.n	3e7e <_printf_i+0x2a>
    3e7c:	e099      	b.n	3fb2 <_printf_i+0x15e>
    3e7e:	2a58      	cmp	r2, #88	; 0x58
    3e80:	d054      	beq.n	3f2c <_printf_i+0xd8>
    3e82:	0026      	movs	r6, r4
    3e84:	3642      	adds	r6, #66	; 0x42
    3e86:	7032      	strb	r2, [r6, #0]
    3e88:	e029      	b.n	3ede <_printf_i+0x8a>
    3e8a:	2a64      	cmp	r2, #100	; 0x64
    3e8c:	d001      	beq.n	3e92 <_printf_i+0x3e>
    3e8e:	2a69      	cmp	r2, #105	; 0x69
    3e90:	d1f7      	bne.n	3e82 <_printf_i+0x2e>
    3e92:	6821      	ldr	r1, [r4, #0]
    3e94:	681a      	ldr	r2, [r3, #0]
    3e96:	0608      	lsls	r0, r1, #24
    3e98:	d523      	bpl.n	3ee2 <_printf_i+0x8e>
    3e9a:	1d11      	adds	r1, r2, #4
    3e9c:	6019      	str	r1, [r3, #0]
    3e9e:	6815      	ldr	r5, [r2, #0]
    3ea0:	e025      	b.n	3eee <_printf_i+0x9a>
    3ea2:	2a73      	cmp	r2, #115	; 0x73
    3ea4:	d100      	bne.n	3ea8 <_printf_i+0x54>
    3ea6:	e088      	b.n	3fba <_printf_i+0x166>
    3ea8:	d808      	bhi.n	3ebc <_printf_i+0x68>
    3eaa:	2a6f      	cmp	r2, #111	; 0x6f
    3eac:	d029      	beq.n	3f02 <_printf_i+0xae>
    3eae:	2a70      	cmp	r2, #112	; 0x70
    3eb0:	d1e7      	bne.n	3e82 <_printf_i+0x2e>
    3eb2:	2220      	movs	r2, #32
    3eb4:	6809      	ldr	r1, [r1, #0]
    3eb6:	430a      	orrs	r2, r1
    3eb8:	6022      	str	r2, [r4, #0]
    3eba:	e003      	b.n	3ec4 <_printf_i+0x70>
    3ebc:	2a75      	cmp	r2, #117	; 0x75
    3ebe:	d020      	beq.n	3f02 <_printf_i+0xae>
    3ec0:	2a78      	cmp	r2, #120	; 0x78
    3ec2:	d1de      	bne.n	3e82 <_printf_i+0x2e>
    3ec4:	0022      	movs	r2, r4
    3ec6:	2178      	movs	r1, #120	; 0x78
    3ec8:	3245      	adds	r2, #69	; 0x45
    3eca:	7011      	strb	r1, [r2, #0]
    3ecc:	4a6c      	ldr	r2, [pc, #432]	; (4080 <_printf_i+0x22c>)
    3ece:	e030      	b.n	3f32 <_printf_i+0xde>
    3ed0:	000e      	movs	r6, r1
    3ed2:	681a      	ldr	r2, [r3, #0]
    3ed4:	3642      	adds	r6, #66	; 0x42
    3ed6:	1d11      	adds	r1, r2, #4
    3ed8:	6019      	str	r1, [r3, #0]
    3eda:	6813      	ldr	r3, [r2, #0]
    3edc:	7033      	strb	r3, [r6, #0]
    3ede:	2301      	movs	r3, #1
    3ee0:	e079      	b.n	3fd6 <_printf_i+0x182>
    3ee2:	0649      	lsls	r1, r1, #25
    3ee4:	d5d9      	bpl.n	3e9a <_printf_i+0x46>
    3ee6:	1d11      	adds	r1, r2, #4
    3ee8:	6019      	str	r1, [r3, #0]
    3eea:	2300      	movs	r3, #0
    3eec:	5ed5      	ldrsh	r5, [r2, r3]
    3eee:	2d00      	cmp	r5, #0
    3ef0:	da03      	bge.n	3efa <_printf_i+0xa6>
    3ef2:	232d      	movs	r3, #45	; 0x2d
    3ef4:	9a04      	ldr	r2, [sp, #16]
    3ef6:	426d      	negs	r5, r5
    3ef8:	7013      	strb	r3, [r2, #0]
    3efa:	4b62      	ldr	r3, [pc, #392]	; (4084 <_printf_i+0x230>)
    3efc:	270a      	movs	r7, #10
    3efe:	9303      	str	r3, [sp, #12]
    3f00:	e02f      	b.n	3f62 <_printf_i+0x10e>
    3f02:	6820      	ldr	r0, [r4, #0]
    3f04:	6819      	ldr	r1, [r3, #0]
    3f06:	0605      	lsls	r5, r0, #24
    3f08:	d503      	bpl.n	3f12 <_printf_i+0xbe>
    3f0a:	1d08      	adds	r0, r1, #4
    3f0c:	6018      	str	r0, [r3, #0]
    3f0e:	680d      	ldr	r5, [r1, #0]
    3f10:	e005      	b.n	3f1e <_printf_i+0xca>
    3f12:	0640      	lsls	r0, r0, #25
    3f14:	d5f9      	bpl.n	3f0a <_printf_i+0xb6>
    3f16:	680d      	ldr	r5, [r1, #0]
    3f18:	1d08      	adds	r0, r1, #4
    3f1a:	6018      	str	r0, [r3, #0]
    3f1c:	b2ad      	uxth	r5, r5
    3f1e:	4b59      	ldr	r3, [pc, #356]	; (4084 <_printf_i+0x230>)
    3f20:	2708      	movs	r7, #8
    3f22:	9303      	str	r3, [sp, #12]
    3f24:	2a6f      	cmp	r2, #111	; 0x6f
    3f26:	d018      	beq.n	3f5a <_printf_i+0x106>
    3f28:	270a      	movs	r7, #10
    3f2a:	e016      	b.n	3f5a <_printf_i+0x106>
    3f2c:	3145      	adds	r1, #69	; 0x45
    3f2e:	700a      	strb	r2, [r1, #0]
    3f30:	4a54      	ldr	r2, [pc, #336]	; (4084 <_printf_i+0x230>)
    3f32:	9203      	str	r2, [sp, #12]
    3f34:	681a      	ldr	r2, [r3, #0]
    3f36:	6821      	ldr	r1, [r4, #0]
    3f38:	1d10      	adds	r0, r2, #4
    3f3a:	6018      	str	r0, [r3, #0]
    3f3c:	6815      	ldr	r5, [r2, #0]
    3f3e:	0608      	lsls	r0, r1, #24
    3f40:	d522      	bpl.n	3f88 <_printf_i+0x134>
    3f42:	07cb      	lsls	r3, r1, #31
    3f44:	d502      	bpl.n	3f4c <_printf_i+0xf8>
    3f46:	2320      	movs	r3, #32
    3f48:	4319      	orrs	r1, r3
    3f4a:	6021      	str	r1, [r4, #0]
    3f4c:	2710      	movs	r7, #16
    3f4e:	2d00      	cmp	r5, #0
    3f50:	d103      	bne.n	3f5a <_printf_i+0x106>
    3f52:	2320      	movs	r3, #32
    3f54:	6822      	ldr	r2, [r4, #0]
    3f56:	439a      	bics	r2, r3
    3f58:	6022      	str	r2, [r4, #0]
    3f5a:	0023      	movs	r3, r4
    3f5c:	2200      	movs	r2, #0
    3f5e:	3343      	adds	r3, #67	; 0x43
    3f60:	701a      	strb	r2, [r3, #0]
    3f62:	6863      	ldr	r3, [r4, #4]
    3f64:	60a3      	str	r3, [r4, #8]
    3f66:	2b00      	cmp	r3, #0
    3f68:	db5c      	blt.n	4024 <_printf_i+0x1d0>
    3f6a:	2204      	movs	r2, #4
    3f6c:	6821      	ldr	r1, [r4, #0]
    3f6e:	4391      	bics	r1, r2
    3f70:	6021      	str	r1, [r4, #0]
    3f72:	2d00      	cmp	r5, #0
    3f74:	d158      	bne.n	4028 <_printf_i+0x1d4>
    3f76:	9e04      	ldr	r6, [sp, #16]
    3f78:	2b00      	cmp	r3, #0
    3f7a:	d064      	beq.n	4046 <_printf_i+0x1f2>
    3f7c:	0026      	movs	r6, r4
    3f7e:	9b03      	ldr	r3, [sp, #12]
    3f80:	3642      	adds	r6, #66	; 0x42
    3f82:	781b      	ldrb	r3, [r3, #0]
    3f84:	7033      	strb	r3, [r6, #0]
    3f86:	e05e      	b.n	4046 <_printf_i+0x1f2>
    3f88:	0648      	lsls	r0, r1, #25
    3f8a:	d5da      	bpl.n	3f42 <_printf_i+0xee>
    3f8c:	b2ad      	uxth	r5, r5
    3f8e:	e7d8      	b.n	3f42 <_printf_i+0xee>
    3f90:	6809      	ldr	r1, [r1, #0]
    3f92:	681a      	ldr	r2, [r3, #0]
    3f94:	0608      	lsls	r0, r1, #24
    3f96:	d505      	bpl.n	3fa4 <_printf_i+0x150>
    3f98:	1d11      	adds	r1, r2, #4
    3f9a:	6019      	str	r1, [r3, #0]
    3f9c:	6813      	ldr	r3, [r2, #0]
    3f9e:	6962      	ldr	r2, [r4, #20]
    3fa0:	601a      	str	r2, [r3, #0]
    3fa2:	e006      	b.n	3fb2 <_printf_i+0x15e>
    3fa4:	0649      	lsls	r1, r1, #25
    3fa6:	d5f7      	bpl.n	3f98 <_printf_i+0x144>
    3fa8:	1d11      	adds	r1, r2, #4
    3faa:	6019      	str	r1, [r3, #0]
    3fac:	6813      	ldr	r3, [r2, #0]
    3fae:	8aa2      	ldrh	r2, [r4, #20]
    3fb0:	801a      	strh	r2, [r3, #0]
    3fb2:	2300      	movs	r3, #0
    3fb4:	9e04      	ldr	r6, [sp, #16]
    3fb6:	6123      	str	r3, [r4, #16]
    3fb8:	e054      	b.n	4064 <_printf_i+0x210>
    3fba:	681a      	ldr	r2, [r3, #0]
    3fbc:	1d11      	adds	r1, r2, #4
    3fbe:	6019      	str	r1, [r3, #0]
    3fc0:	6816      	ldr	r6, [r2, #0]
    3fc2:	2100      	movs	r1, #0
    3fc4:	6862      	ldr	r2, [r4, #4]
    3fc6:	0030      	movs	r0, r6
    3fc8:	f000 f9e6 	bl	4398 <memchr>
    3fcc:	2800      	cmp	r0, #0
    3fce:	d001      	beq.n	3fd4 <_printf_i+0x180>
    3fd0:	1b80      	subs	r0, r0, r6
    3fd2:	6060      	str	r0, [r4, #4]
    3fd4:	6863      	ldr	r3, [r4, #4]
    3fd6:	6123      	str	r3, [r4, #16]
    3fd8:	2300      	movs	r3, #0
    3fda:	9a04      	ldr	r2, [sp, #16]
    3fdc:	7013      	strb	r3, [r2, #0]
    3fde:	e041      	b.n	4064 <_printf_i+0x210>
    3fe0:	6923      	ldr	r3, [r4, #16]
    3fe2:	0032      	movs	r2, r6
    3fe4:	9906      	ldr	r1, [sp, #24]
    3fe6:	9805      	ldr	r0, [sp, #20]
    3fe8:	9d07      	ldr	r5, [sp, #28]
    3fea:	47a8      	blx	r5
    3fec:	1c43      	adds	r3, r0, #1
    3fee:	d043      	beq.n	4078 <_printf_i+0x224>
    3ff0:	6823      	ldr	r3, [r4, #0]
    3ff2:	2500      	movs	r5, #0
    3ff4:	079b      	lsls	r3, r3, #30
    3ff6:	d40f      	bmi.n	4018 <_printf_i+0x1c4>
    3ff8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3ffa:	68e0      	ldr	r0, [r4, #12]
    3ffc:	4298      	cmp	r0, r3
    3ffe:	da3d      	bge.n	407c <_printf_i+0x228>
    4000:	0018      	movs	r0, r3
    4002:	e03b      	b.n	407c <_printf_i+0x228>
    4004:	0022      	movs	r2, r4
    4006:	2301      	movs	r3, #1
    4008:	3219      	adds	r2, #25
    400a:	9906      	ldr	r1, [sp, #24]
    400c:	9805      	ldr	r0, [sp, #20]
    400e:	9e07      	ldr	r6, [sp, #28]
    4010:	47b0      	blx	r6
    4012:	1c43      	adds	r3, r0, #1
    4014:	d030      	beq.n	4078 <_printf_i+0x224>
    4016:	3501      	adds	r5, #1
    4018:	68e3      	ldr	r3, [r4, #12]
    401a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    401c:	1a9b      	subs	r3, r3, r2
    401e:	429d      	cmp	r5, r3
    4020:	dbf0      	blt.n	4004 <_printf_i+0x1b0>
    4022:	e7e9      	b.n	3ff8 <_printf_i+0x1a4>
    4024:	2d00      	cmp	r5, #0
    4026:	d0a9      	beq.n	3f7c <_printf_i+0x128>
    4028:	9e04      	ldr	r6, [sp, #16]
    402a:	0028      	movs	r0, r5
    402c:	0039      	movs	r1, r7
    402e:	f7ff f90b 	bl	3248 <__aeabi_uidivmod>
    4032:	9b03      	ldr	r3, [sp, #12]
    4034:	3e01      	subs	r6, #1
    4036:	5c5b      	ldrb	r3, [r3, r1]
    4038:	0028      	movs	r0, r5
    403a:	7033      	strb	r3, [r6, #0]
    403c:	0039      	movs	r1, r7
    403e:	f7ff f87d 	bl	313c <__udivsi3>
    4042:	1e05      	subs	r5, r0, #0
    4044:	d1f1      	bne.n	402a <_printf_i+0x1d6>
    4046:	2f08      	cmp	r7, #8
    4048:	d109      	bne.n	405e <_printf_i+0x20a>
    404a:	6823      	ldr	r3, [r4, #0]
    404c:	07db      	lsls	r3, r3, #31
    404e:	d506      	bpl.n	405e <_printf_i+0x20a>
    4050:	6863      	ldr	r3, [r4, #4]
    4052:	6922      	ldr	r2, [r4, #16]
    4054:	4293      	cmp	r3, r2
    4056:	dc02      	bgt.n	405e <_printf_i+0x20a>
    4058:	2330      	movs	r3, #48	; 0x30
    405a:	3e01      	subs	r6, #1
    405c:	7033      	strb	r3, [r6, #0]
    405e:	9b04      	ldr	r3, [sp, #16]
    4060:	1b9b      	subs	r3, r3, r6
    4062:	6123      	str	r3, [r4, #16]
    4064:	9b07      	ldr	r3, [sp, #28]
    4066:	aa09      	add	r2, sp, #36	; 0x24
    4068:	9300      	str	r3, [sp, #0]
    406a:	0021      	movs	r1, r4
    406c:	9b06      	ldr	r3, [sp, #24]
    406e:	9805      	ldr	r0, [sp, #20]
    4070:	f7ff fe82 	bl	3d78 <_printf_common>
    4074:	1c43      	adds	r3, r0, #1
    4076:	d1b3      	bne.n	3fe0 <_printf_i+0x18c>
    4078:	2001      	movs	r0, #1
    407a:	4240      	negs	r0, r0
    407c:	b00b      	add	sp, #44	; 0x2c
    407e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4080:	00007ef2 	.word	0x00007ef2
    4084:	00007ee1 	.word	0x00007ee1

00004088 <_sbrk_r>:
    4088:	2300      	movs	r3, #0
    408a:	b570      	push	{r4, r5, r6, lr}
    408c:	4c06      	ldr	r4, [pc, #24]	; (40a8 <_sbrk_r+0x20>)
    408e:	0005      	movs	r5, r0
    4090:	0008      	movs	r0, r1
    4092:	6023      	str	r3, [r4, #0]
    4094:	f7fd fe26 	bl	1ce4 <_sbrk>
    4098:	1c43      	adds	r3, r0, #1
    409a:	d103      	bne.n	40a4 <_sbrk_r+0x1c>
    409c:	6823      	ldr	r3, [r4, #0]
    409e:	2b00      	cmp	r3, #0
    40a0:	d000      	beq.n	40a4 <_sbrk_r+0x1c>
    40a2:	602b      	str	r3, [r5, #0]
    40a4:	bd70      	pop	{r4, r5, r6, pc}
    40a6:	46c0      	nop			; (mov r8, r8)
    40a8:	20000bac 	.word	0x20000bac

000040ac <__sread>:
    40ac:	b570      	push	{r4, r5, r6, lr}
    40ae:	000c      	movs	r4, r1
    40b0:	250e      	movs	r5, #14
    40b2:	5f49      	ldrsh	r1, [r1, r5]
    40b4:	f000 f97e 	bl	43b4 <_read_r>
    40b8:	2800      	cmp	r0, #0
    40ba:	db03      	blt.n	40c4 <__sread+0x18>
    40bc:	6d63      	ldr	r3, [r4, #84]	; 0x54
    40be:	181b      	adds	r3, r3, r0
    40c0:	6563      	str	r3, [r4, #84]	; 0x54
    40c2:	bd70      	pop	{r4, r5, r6, pc}
    40c4:	89a3      	ldrh	r3, [r4, #12]
    40c6:	4a02      	ldr	r2, [pc, #8]	; (40d0 <__sread+0x24>)
    40c8:	4013      	ands	r3, r2
    40ca:	81a3      	strh	r3, [r4, #12]
    40cc:	e7f9      	b.n	40c2 <__sread+0x16>
    40ce:	46c0      	nop			; (mov r8, r8)
    40d0:	ffffefff 	.word	0xffffefff

000040d4 <__swrite>:
    40d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    40d6:	001f      	movs	r7, r3
    40d8:	898b      	ldrh	r3, [r1, #12]
    40da:	0005      	movs	r5, r0
    40dc:	000c      	movs	r4, r1
    40de:	0016      	movs	r6, r2
    40e0:	05db      	lsls	r3, r3, #23
    40e2:	d505      	bpl.n	40f0 <__swrite+0x1c>
    40e4:	230e      	movs	r3, #14
    40e6:	5ec9      	ldrsh	r1, [r1, r3]
    40e8:	2200      	movs	r2, #0
    40ea:	2302      	movs	r3, #2
    40ec:	f000 f940 	bl	4370 <_lseek_r>
    40f0:	89a3      	ldrh	r3, [r4, #12]
    40f2:	4a05      	ldr	r2, [pc, #20]	; (4108 <__swrite+0x34>)
    40f4:	0028      	movs	r0, r5
    40f6:	4013      	ands	r3, r2
    40f8:	81a3      	strh	r3, [r4, #12]
    40fa:	0032      	movs	r2, r6
    40fc:	230e      	movs	r3, #14
    40fe:	5ee1      	ldrsh	r1, [r4, r3]
    4100:	003b      	movs	r3, r7
    4102:	f000 f875 	bl	41f0 <_write_r>
    4106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4108:	ffffefff 	.word	0xffffefff

0000410c <__sseek>:
    410c:	b570      	push	{r4, r5, r6, lr}
    410e:	000c      	movs	r4, r1
    4110:	250e      	movs	r5, #14
    4112:	5f49      	ldrsh	r1, [r1, r5]
    4114:	f000 f92c 	bl	4370 <_lseek_r>
    4118:	89a3      	ldrh	r3, [r4, #12]
    411a:	1c42      	adds	r2, r0, #1
    411c:	d103      	bne.n	4126 <__sseek+0x1a>
    411e:	4a05      	ldr	r2, [pc, #20]	; (4134 <__sseek+0x28>)
    4120:	4013      	ands	r3, r2
    4122:	81a3      	strh	r3, [r4, #12]
    4124:	bd70      	pop	{r4, r5, r6, pc}
    4126:	2280      	movs	r2, #128	; 0x80
    4128:	0152      	lsls	r2, r2, #5
    412a:	4313      	orrs	r3, r2
    412c:	81a3      	strh	r3, [r4, #12]
    412e:	6560      	str	r0, [r4, #84]	; 0x54
    4130:	e7f8      	b.n	4124 <__sseek+0x18>
    4132:	46c0      	nop			; (mov r8, r8)
    4134:	ffffefff 	.word	0xffffefff

00004138 <__sclose>:
    4138:	b510      	push	{r4, lr}
    413a:	230e      	movs	r3, #14
    413c:	5ec9      	ldrsh	r1, [r1, r3]
    413e:	f000 f8e1 	bl	4304 <_close_r>
    4142:	bd10      	pop	{r4, pc}

00004144 <__swbuf_r>:
    4144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4146:	0005      	movs	r5, r0
    4148:	000e      	movs	r6, r1
    414a:	0014      	movs	r4, r2
    414c:	2800      	cmp	r0, #0
    414e:	d004      	beq.n	415a <__swbuf_r+0x16>
    4150:	6983      	ldr	r3, [r0, #24]
    4152:	2b00      	cmp	r3, #0
    4154:	d101      	bne.n	415a <__swbuf_r+0x16>
    4156:	f7ff fb17 	bl	3788 <__sinit>
    415a:	4b22      	ldr	r3, [pc, #136]	; (41e4 <__swbuf_r+0xa0>)
    415c:	429c      	cmp	r4, r3
    415e:	d12d      	bne.n	41bc <__swbuf_r+0x78>
    4160:	686c      	ldr	r4, [r5, #4]
    4162:	69a3      	ldr	r3, [r4, #24]
    4164:	60a3      	str	r3, [r4, #8]
    4166:	89a3      	ldrh	r3, [r4, #12]
    4168:	071b      	lsls	r3, r3, #28
    416a:	d531      	bpl.n	41d0 <__swbuf_r+0x8c>
    416c:	6923      	ldr	r3, [r4, #16]
    416e:	2b00      	cmp	r3, #0
    4170:	d02e      	beq.n	41d0 <__swbuf_r+0x8c>
    4172:	6823      	ldr	r3, [r4, #0]
    4174:	6922      	ldr	r2, [r4, #16]
    4176:	b2f7      	uxtb	r7, r6
    4178:	1a98      	subs	r0, r3, r2
    417a:	6963      	ldr	r3, [r4, #20]
    417c:	b2f6      	uxtb	r6, r6
    417e:	4298      	cmp	r0, r3
    4180:	db05      	blt.n	418e <__swbuf_r+0x4a>
    4182:	0021      	movs	r1, r4
    4184:	0028      	movs	r0, r5
    4186:	f7ff fa91 	bl	36ac <_fflush_r>
    418a:	2800      	cmp	r0, #0
    418c:	d126      	bne.n	41dc <__swbuf_r+0x98>
    418e:	68a3      	ldr	r3, [r4, #8]
    4190:	3001      	adds	r0, #1
    4192:	3b01      	subs	r3, #1
    4194:	60a3      	str	r3, [r4, #8]
    4196:	6823      	ldr	r3, [r4, #0]
    4198:	1c5a      	adds	r2, r3, #1
    419a:	6022      	str	r2, [r4, #0]
    419c:	701f      	strb	r7, [r3, #0]
    419e:	6963      	ldr	r3, [r4, #20]
    41a0:	4298      	cmp	r0, r3
    41a2:	d004      	beq.n	41ae <__swbuf_r+0x6a>
    41a4:	89a3      	ldrh	r3, [r4, #12]
    41a6:	07db      	lsls	r3, r3, #31
    41a8:	d51a      	bpl.n	41e0 <__swbuf_r+0x9c>
    41aa:	2e0a      	cmp	r6, #10
    41ac:	d118      	bne.n	41e0 <__swbuf_r+0x9c>
    41ae:	0021      	movs	r1, r4
    41b0:	0028      	movs	r0, r5
    41b2:	f7ff fa7b 	bl	36ac <_fflush_r>
    41b6:	2800      	cmp	r0, #0
    41b8:	d012      	beq.n	41e0 <__swbuf_r+0x9c>
    41ba:	e00f      	b.n	41dc <__swbuf_r+0x98>
    41bc:	4b0a      	ldr	r3, [pc, #40]	; (41e8 <__swbuf_r+0xa4>)
    41be:	429c      	cmp	r4, r3
    41c0:	d101      	bne.n	41c6 <__swbuf_r+0x82>
    41c2:	68ac      	ldr	r4, [r5, #8]
    41c4:	e7cd      	b.n	4162 <__swbuf_r+0x1e>
    41c6:	4b09      	ldr	r3, [pc, #36]	; (41ec <__swbuf_r+0xa8>)
    41c8:	429c      	cmp	r4, r3
    41ca:	d1ca      	bne.n	4162 <__swbuf_r+0x1e>
    41cc:	68ec      	ldr	r4, [r5, #12]
    41ce:	e7c8      	b.n	4162 <__swbuf_r+0x1e>
    41d0:	0021      	movs	r1, r4
    41d2:	0028      	movs	r0, r5
    41d4:	f000 f820 	bl	4218 <__swsetup_r>
    41d8:	2800      	cmp	r0, #0
    41da:	d0ca      	beq.n	4172 <__swbuf_r+0x2e>
    41dc:	2601      	movs	r6, #1
    41de:	4276      	negs	r6, r6
    41e0:	0030      	movs	r0, r6
    41e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    41e4:	00007e90 	.word	0x00007e90
    41e8:	00007eb0 	.word	0x00007eb0
    41ec:	00007e70 	.word	0x00007e70

000041f0 <_write_r>:
    41f0:	b570      	push	{r4, r5, r6, lr}
    41f2:	0005      	movs	r5, r0
    41f4:	0008      	movs	r0, r1
    41f6:	0011      	movs	r1, r2
    41f8:	2200      	movs	r2, #0
    41fa:	4c06      	ldr	r4, [pc, #24]	; (4214 <_write_r+0x24>)
    41fc:	6022      	str	r2, [r4, #0]
    41fe:	001a      	movs	r2, r3
    4200:	f7fd fd48 	bl	1c94 <_write>
    4204:	1c43      	adds	r3, r0, #1
    4206:	d103      	bne.n	4210 <_write_r+0x20>
    4208:	6823      	ldr	r3, [r4, #0]
    420a:	2b00      	cmp	r3, #0
    420c:	d000      	beq.n	4210 <_write_r+0x20>
    420e:	602b      	str	r3, [r5, #0]
    4210:	bd70      	pop	{r4, r5, r6, pc}
    4212:	46c0      	nop			; (mov r8, r8)
    4214:	20000bac 	.word	0x20000bac

00004218 <__swsetup_r>:
    4218:	4b36      	ldr	r3, [pc, #216]	; (42f4 <__swsetup_r+0xdc>)
    421a:	b570      	push	{r4, r5, r6, lr}
    421c:	681d      	ldr	r5, [r3, #0]
    421e:	0006      	movs	r6, r0
    4220:	000c      	movs	r4, r1
    4222:	2d00      	cmp	r5, #0
    4224:	d005      	beq.n	4232 <__swsetup_r+0x1a>
    4226:	69ab      	ldr	r3, [r5, #24]
    4228:	2b00      	cmp	r3, #0
    422a:	d102      	bne.n	4232 <__swsetup_r+0x1a>
    422c:	0028      	movs	r0, r5
    422e:	f7ff faab 	bl	3788 <__sinit>
    4232:	4b31      	ldr	r3, [pc, #196]	; (42f8 <__swsetup_r+0xe0>)
    4234:	429c      	cmp	r4, r3
    4236:	d10f      	bne.n	4258 <__swsetup_r+0x40>
    4238:	686c      	ldr	r4, [r5, #4]
    423a:	230c      	movs	r3, #12
    423c:	5ee2      	ldrsh	r2, [r4, r3]
    423e:	b293      	uxth	r3, r2
    4240:	0719      	lsls	r1, r3, #28
    4242:	d42d      	bmi.n	42a0 <__swsetup_r+0x88>
    4244:	06d9      	lsls	r1, r3, #27
    4246:	d411      	bmi.n	426c <__swsetup_r+0x54>
    4248:	2309      	movs	r3, #9
    424a:	2001      	movs	r0, #1
    424c:	6033      	str	r3, [r6, #0]
    424e:	3337      	adds	r3, #55	; 0x37
    4250:	4313      	orrs	r3, r2
    4252:	81a3      	strh	r3, [r4, #12]
    4254:	4240      	negs	r0, r0
    4256:	bd70      	pop	{r4, r5, r6, pc}
    4258:	4b28      	ldr	r3, [pc, #160]	; (42fc <__swsetup_r+0xe4>)
    425a:	429c      	cmp	r4, r3
    425c:	d101      	bne.n	4262 <__swsetup_r+0x4a>
    425e:	68ac      	ldr	r4, [r5, #8]
    4260:	e7eb      	b.n	423a <__swsetup_r+0x22>
    4262:	4b27      	ldr	r3, [pc, #156]	; (4300 <__swsetup_r+0xe8>)
    4264:	429c      	cmp	r4, r3
    4266:	d1e8      	bne.n	423a <__swsetup_r+0x22>
    4268:	68ec      	ldr	r4, [r5, #12]
    426a:	e7e6      	b.n	423a <__swsetup_r+0x22>
    426c:	075b      	lsls	r3, r3, #29
    426e:	d513      	bpl.n	4298 <__swsetup_r+0x80>
    4270:	6b61      	ldr	r1, [r4, #52]	; 0x34
    4272:	2900      	cmp	r1, #0
    4274:	d008      	beq.n	4288 <__swsetup_r+0x70>
    4276:	0023      	movs	r3, r4
    4278:	3344      	adds	r3, #68	; 0x44
    427a:	4299      	cmp	r1, r3
    427c:	d002      	beq.n	4284 <__swsetup_r+0x6c>
    427e:	0030      	movs	r0, r6
    4280:	f7ff fb8e 	bl	39a0 <_free_r>
    4284:	2300      	movs	r3, #0
    4286:	6363      	str	r3, [r4, #52]	; 0x34
    4288:	2224      	movs	r2, #36	; 0x24
    428a:	89a3      	ldrh	r3, [r4, #12]
    428c:	4393      	bics	r3, r2
    428e:	81a3      	strh	r3, [r4, #12]
    4290:	2300      	movs	r3, #0
    4292:	6063      	str	r3, [r4, #4]
    4294:	6923      	ldr	r3, [r4, #16]
    4296:	6023      	str	r3, [r4, #0]
    4298:	2308      	movs	r3, #8
    429a:	89a2      	ldrh	r2, [r4, #12]
    429c:	4313      	orrs	r3, r2
    429e:	81a3      	strh	r3, [r4, #12]
    42a0:	6923      	ldr	r3, [r4, #16]
    42a2:	2b00      	cmp	r3, #0
    42a4:	d10b      	bne.n	42be <__swsetup_r+0xa6>
    42a6:	21a0      	movs	r1, #160	; 0xa0
    42a8:	2280      	movs	r2, #128	; 0x80
    42aa:	89a3      	ldrh	r3, [r4, #12]
    42ac:	0089      	lsls	r1, r1, #2
    42ae:	0092      	lsls	r2, r2, #2
    42b0:	400b      	ands	r3, r1
    42b2:	4293      	cmp	r3, r2
    42b4:	d003      	beq.n	42be <__swsetup_r+0xa6>
    42b6:	0021      	movs	r1, r4
    42b8:	0030      	movs	r0, r6
    42ba:	f7ff fb23 	bl	3904 <__smakebuf_r>
    42be:	2301      	movs	r3, #1
    42c0:	89a2      	ldrh	r2, [r4, #12]
    42c2:	4013      	ands	r3, r2
    42c4:	d011      	beq.n	42ea <__swsetup_r+0xd2>
    42c6:	2300      	movs	r3, #0
    42c8:	60a3      	str	r3, [r4, #8]
    42ca:	6963      	ldr	r3, [r4, #20]
    42cc:	425b      	negs	r3, r3
    42ce:	61a3      	str	r3, [r4, #24]
    42d0:	2000      	movs	r0, #0
    42d2:	6923      	ldr	r3, [r4, #16]
    42d4:	4283      	cmp	r3, r0
    42d6:	d1be      	bne.n	4256 <__swsetup_r+0x3e>
    42d8:	230c      	movs	r3, #12
    42da:	5ee2      	ldrsh	r2, [r4, r3]
    42dc:	0613      	lsls	r3, r2, #24
    42de:	d5ba      	bpl.n	4256 <__swsetup_r+0x3e>
    42e0:	2340      	movs	r3, #64	; 0x40
    42e2:	4313      	orrs	r3, r2
    42e4:	81a3      	strh	r3, [r4, #12]
    42e6:	3801      	subs	r0, #1
    42e8:	e7b5      	b.n	4256 <__swsetup_r+0x3e>
    42ea:	0792      	lsls	r2, r2, #30
    42ec:	d400      	bmi.n	42f0 <__swsetup_r+0xd8>
    42ee:	6963      	ldr	r3, [r4, #20]
    42f0:	60a3      	str	r3, [r4, #8]
    42f2:	e7ed      	b.n	42d0 <__swsetup_r+0xb8>
    42f4:	20000158 	.word	0x20000158
    42f8:	00007e90 	.word	0x00007e90
    42fc:	00007eb0 	.word	0x00007eb0
    4300:	00007e70 	.word	0x00007e70

00004304 <_close_r>:
    4304:	2300      	movs	r3, #0
    4306:	b570      	push	{r4, r5, r6, lr}
    4308:	4c06      	ldr	r4, [pc, #24]	; (4324 <_close_r+0x20>)
    430a:	0005      	movs	r5, r0
    430c:	0008      	movs	r0, r1
    430e:	6023      	str	r3, [r4, #0]
    4310:	f7fd fcfa 	bl	1d08 <_close>
    4314:	1c43      	adds	r3, r0, #1
    4316:	d103      	bne.n	4320 <_close_r+0x1c>
    4318:	6823      	ldr	r3, [r4, #0]
    431a:	2b00      	cmp	r3, #0
    431c:	d000      	beq.n	4320 <_close_r+0x1c>
    431e:	602b      	str	r3, [r5, #0]
    4320:	bd70      	pop	{r4, r5, r6, pc}
    4322:	46c0      	nop			; (mov r8, r8)
    4324:	20000bac 	.word	0x20000bac

00004328 <_fstat_r>:
    4328:	2300      	movs	r3, #0
    432a:	b570      	push	{r4, r5, r6, lr}
    432c:	4c06      	ldr	r4, [pc, #24]	; (4348 <_fstat_r+0x20>)
    432e:	0005      	movs	r5, r0
    4330:	0008      	movs	r0, r1
    4332:	0011      	movs	r1, r2
    4334:	6023      	str	r3, [r4, #0]
    4336:	f7fd fcea 	bl	1d0e <_fstat>
    433a:	1c43      	adds	r3, r0, #1
    433c:	d103      	bne.n	4346 <_fstat_r+0x1e>
    433e:	6823      	ldr	r3, [r4, #0]
    4340:	2b00      	cmp	r3, #0
    4342:	d000      	beq.n	4346 <_fstat_r+0x1e>
    4344:	602b      	str	r3, [r5, #0]
    4346:	bd70      	pop	{r4, r5, r6, pc}
    4348:	20000bac 	.word	0x20000bac

0000434c <_isatty_r>:
    434c:	2300      	movs	r3, #0
    434e:	b570      	push	{r4, r5, r6, lr}
    4350:	4c06      	ldr	r4, [pc, #24]	; (436c <_isatty_r+0x20>)
    4352:	0005      	movs	r5, r0
    4354:	0008      	movs	r0, r1
    4356:	6023      	str	r3, [r4, #0]
    4358:	f7fd fcde 	bl	1d18 <_isatty>
    435c:	1c43      	adds	r3, r0, #1
    435e:	d103      	bne.n	4368 <_isatty_r+0x1c>
    4360:	6823      	ldr	r3, [r4, #0]
    4362:	2b00      	cmp	r3, #0
    4364:	d000      	beq.n	4368 <_isatty_r+0x1c>
    4366:	602b      	str	r3, [r5, #0]
    4368:	bd70      	pop	{r4, r5, r6, pc}
    436a:	46c0      	nop			; (mov r8, r8)
    436c:	20000bac 	.word	0x20000bac

00004370 <_lseek_r>:
    4370:	b570      	push	{r4, r5, r6, lr}
    4372:	0005      	movs	r5, r0
    4374:	0008      	movs	r0, r1
    4376:	0011      	movs	r1, r2
    4378:	2200      	movs	r2, #0
    437a:	4c06      	ldr	r4, [pc, #24]	; (4394 <_lseek_r+0x24>)
    437c:	6022      	str	r2, [r4, #0]
    437e:	001a      	movs	r2, r3
    4380:	f7fd fccc 	bl	1d1c <_lseek>
    4384:	1c43      	adds	r3, r0, #1
    4386:	d103      	bne.n	4390 <_lseek_r+0x20>
    4388:	6823      	ldr	r3, [r4, #0]
    438a:	2b00      	cmp	r3, #0
    438c:	d000      	beq.n	4390 <_lseek_r+0x20>
    438e:	602b      	str	r3, [r5, #0]
    4390:	bd70      	pop	{r4, r5, r6, pc}
    4392:	46c0      	nop			; (mov r8, r8)
    4394:	20000bac 	.word	0x20000bac

00004398 <memchr>:
    4398:	b2c9      	uxtb	r1, r1
    439a:	1882      	adds	r2, r0, r2
    439c:	4290      	cmp	r0, r2
    439e:	d101      	bne.n	43a4 <memchr+0xc>
    43a0:	2000      	movs	r0, #0
    43a2:	4770      	bx	lr
    43a4:	7803      	ldrb	r3, [r0, #0]
    43a6:	428b      	cmp	r3, r1
    43a8:	d0fb      	beq.n	43a2 <memchr+0xa>
    43aa:	3001      	adds	r0, #1
    43ac:	e7f6      	b.n	439c <memchr+0x4>

000043ae <__malloc_lock>:
    43ae:	4770      	bx	lr

000043b0 <__malloc_unlock>:
    43b0:	4770      	bx	lr
	...

000043b4 <_read_r>:
    43b4:	b570      	push	{r4, r5, r6, lr}
    43b6:	0005      	movs	r5, r0
    43b8:	0008      	movs	r0, r1
    43ba:	0011      	movs	r1, r2
    43bc:	2200      	movs	r2, #0
    43be:	4c06      	ldr	r4, [pc, #24]	; (43d8 <_read_r+0x24>)
    43c0:	6022      	str	r2, [r4, #0]
    43c2:	001a      	movs	r2, r3
    43c4:	f7fd fc44 	bl	1c50 <_read>
    43c8:	1c43      	adds	r3, r0, #1
    43ca:	d103      	bne.n	43d4 <_read_r+0x20>
    43cc:	6823      	ldr	r3, [r4, #0]
    43ce:	2b00      	cmp	r3, #0
    43d0:	d000      	beq.n	43d4 <_read_r+0x20>
    43d2:	602b      	str	r3, [r5, #0]
    43d4:	bd70      	pop	{r4, r5, r6, pc}
    43d6:	46c0      	nop			; (mov r8, r8)
    43d8:	20000bac 	.word	0x20000bac
    43dc:	000a000a 	.word	0x000a000a
    43e0:	00140014 	.word	0x00140014
    43e4:	00000014 	.word	0x00000014
    43e8:	000a017c 	.word	0x000a017c
    43ec:	000a017c 	.word	0x000a017c
    43f0:	00140186 	.word	0x00140186
    43f4:	00140000 	.word	0x00140000
    43f8:	0122000a 	.word	0x0122000a
    43fc:	00140186 	.word	0x00140186
    4400:	01220190 	.word	0x01220190
    4404:	0122000a 	.word	0x0122000a
    4408:	012c0014 	.word	0x012c0014
    440c:	0122017c 	.word	0x0122017c
    4410:	012c0186 	.word	0x012c0186
    4414:	012c0014 	.word	0x012c0014
    4418:	0136017c 	.word	0x0136017c
    441c:	001e0000 	.word	0x001e0000
    4420:	00280032 	.word	0x00280032
    4424:	00320000 	.word	0x00320000
    4428:	003c0032 	.word	0x003c0032
    442c:	001e0050 	.word	0x001e0050
    4430:	00280118 	.word	0x00280118
    4434:	00280046 	.word	0x00280046
    4438:	00be0050 	.word	0x00be0050
    443c:	00be0050 	.word	0x00be0050
    4440:	00c80118 	.word	0x00c80118
    4444:	00280118 	.word	0x00280118
    4448:	00be0122 	.word	0x00be0122
    444c:	00460000 	.word	0x00460000
    4450:	00500032 	.word	0x00500032
    4454:	005a0000 	.word	0x005a0000
    4458:	00640032 	.word	0x00640032
    445c:	006e0000 	.word	0x006e0000
    4460:	00780032 	.word	0x00780032
    4464:	00820000 	.word	0x00820000
    4468:	008c0032 	.word	0x008c0032
    446c:	00960000 	.word	0x00960000
    4470:	00a00032 	.word	0x00a00032
    4474:	00aa0000 	.word	0x00aa0000
    4478:	00b40032 	.word	0x00b40032
    447c:	00be0000 	.word	0x00be0000
    4480:	00c80032 	.word	0x00c80032
    4484:	00c8012c 	.word	0x00c8012c
    4488:	00d20172 	.word	0x00d20172
    448c:	00dc001e 	.word	0x00dc001e
    4490:	00e60172 	.word	0x00e60172
    4494:	00f0001e 	.word	0x00f0001e
    4498:	00fa0172 	.word	0x00fa0172
    449c:	0104001e 	.word	0x0104001e
    44a0:	010e0172 	.word	0x010e0172
    44a4:	0118005a 	.word	0x0118005a
    44a8:	0122012c 	.word	0x0122012c
    44ac:	82be50b4 	.word	0x82be50b4
    44b0:	8cbe82aa 	.word	0x8cbe82aa
    44b4:	64963c8c 	.word	0x64963c8c
    44b8:	64dc3cd2 	.word	0x64dc3cd2
    44bc:	a08c9682 	.word	0xa08c9682
    44c0:	aadca08c 	.word	0xaadca08c
    44c4:	a0e696dc 	.word	0xa0e696dc
    44c8:	50f03c78 	.word	0x50f03c78
    44cc:	5a78466e 	.word	0x5a78466e
    44d0:	aaaa3c96 	.word	0xaaaa3c96
    44d4:	a0dc3cc8 	.word	0xa0dc3cc8
    44d8:	aae6a0d2 	.word	0xaae6a0d2
    44dc:	6e617254 	.word	0x6e617254
    44e0:	69722073 	.word	0x69722073
    44e4:	73746867 	.word	0x73746867
    44e8:	65726120 	.word	0x65726120
    44ec:	6d756820 	.word	0x6d756820
    44f0:	72206e61 	.word	0x72206e61
    44f4:	74686769 	.word	0x74686769
    44f8:	00000073 	.word	0x00000073
    44fc:	355e3331 	.word	0x355e3331
    4500:	31202b20 	.word	0x31202b20
    4504:	20355e36 	.word	0x20355e36
    4508:	3731203d 	.word	0x3731203d
    450c:	0000355e 	.word	0x0000355e
    4510:	69746552 	.word	0x69746552
    4514:	616c7563 	.word	0x616c7563
    4518:	676e6974 	.word	0x676e6974
    451c:	6c705320 	.word	0x6c705320
    4520:	73656e69 	.word	0x73656e69
    4524:	00000000 	.word	0x00000000
    4528:	6c6f6976 	.word	0x6c6f6976
    452c:	65636e65 	.word	0x65636e65
    4530:	726f772e 	.word	0x726f772e
    4534:	0000736b 	.word	0x0000736b
    4538:	73626154 	.word	0x73626154
    453c:	00000021 	.word	0x00000021
    4540:	6c6c694b 	.word	0x6c6c694b
    4544:	6c694220 	.word	0x6c694220
    4548:	6e6f696c 	.word	0x6e6f696c
    454c:	65726961 	.word	0x65726961
    4550:	61282073 	.word	0x61282073
    4554:	5420646e 	.word	0x5420646e
    4558:	6c6c6972 	.word	0x6c6c6972
    455c:	616e6f69 	.word	0x616e6f69
    4560:	29657269 	.word	0x29657269
    4564:	00000000 	.word	0x00000000
    4568:	65746e49 	.word	0x65746e49
    456c:	74736572 	.word	0x74736572
    4570:	206e6920 	.word	0x206e6920
    4574:	68636574 	.word	0x68636574
    4578:	6f6c6f6e 	.word	0x6f6c6f6e
    457c:	69207967 	.word	0x69207967
    4580:	6f6e2073 	.word	0x6f6e2073
    4584:	20612074 	.word	0x20612074
    4588:	73726570 	.word	0x73726570
    458c:	6c616e6f 	.word	0x6c616e6f
    4590:	00797469 	.word	0x00797469
    4594:	50203031 	.word	0x50203031
    4598:	544e4952 	.word	0x544e4952
    459c:	52484320 	.word	0x52484320
    45a0:	30322824 	.word	0x30322824
    45a4:	2b352e35 	.word	0x2b352e35
    45a8:	28444e52 	.word	0x28444e52
    45ac:	3b292931 	.word	0x3b292931
    45b0:	47203a20 	.word	0x47203a20
    45b4:	204f544f 	.word	0x204f544f
    45b8:	00003031 	.word	0x00003031
    45bc:	67206f4e 	.word	0x67206f4e
    45c0:	2e73646f 	.word	0x2e73646f
    45c4:	206f4e20 	.word	0x206f4e20
    45c8:	7473616d 	.word	0x7473616d
    45cc:	2e737265 	.word	0x2e737265
    45d0:	206f4e20 	.word	0x206f4e20
    45d4:	65747865 	.word	0x65747865
    45d8:	6c616e72 	.word	0x6c616e72
    45dc:	62696c20 	.word	0x62696c20
    45e0:	69726172 	.word	0x69726172
    45e4:	002e7365 	.word	0x002e7365
    45e8:	6c6c694b 	.word	0x6c6c694b
    45ec:	7a614e20 	.word	0x7a614e20
    45f0:	00007369 	.word	0x00007369
    45f4:	6e616954 	.word	0x6e616954
    45f8:	656d6e61 	.word	0x656d6e61
    45fc:	7153206e 	.word	0x7153206e
    4600:	65726175 	.word	0x65726175
    4604:	38393120 	.word	0x38393120
    4608:	00000039 	.word	0x00000039
    460c:	72656d41 	.word	0x72656d41
    4610:	20616369 	.word	0x20616369
    4614:	20736177 	.word	0x20736177
    4618:	6e756f66 	.word	0x6e756f66
    461c:	20646564 	.word	0x20646564
    4620:	73206e6f 	.word	0x73206e6f
    4624:	6576616c 	.word	0x6576616c
    4628:	00007972 	.word	0x00007972
    462c:	72656854 	.word	0x72656854
    4630:	73692065 	.word	0x73692065
    4634:	6c6e6f20 	.word	0x6c6e6f20
    4638:	61632079 	.word	0x61632079
    463c:	61746970 	.word	0x61746970
    4640:	6e61206c 	.word	0x6e61206c
    4644:	616c2064 	.word	0x616c2064
    4648:	00726f62 	.word	0x00726f62
    464c:	6f636e45 	.word	0x6f636e45
    4650:	67617275 	.word	0x67617275
    4654:	735f2065 	.word	0x735f2065
    4658:	656d6d79 	.word	0x656d6d79
    465c:	63697274 	.word	0x63697274
    4660:	6c63205f 	.word	0x6c63205f
    4664:	20737361 	.word	0x20737361
    4668:	66726177 	.word	0x66726177
    466c:	00657261 	.word	0x00657261
    4670:	52554324 	.word	0x52554324
    4674:	544e4552 	.word	0x544e4552
    4678:	4d454d5f 	.word	0x4d454d5f
    467c:	00000045 	.word	0x00000045
    4680:	694e2041 	.word	0x694e2041
    4684:	54206563 	.word	0x54206563
    4688:	00005954 	.word	0x00005954
    468c:	78696e55 	.word	0x78696e55
    4690:	6f706520 	.word	0x6f706520
    4694:	6d206863 	.word	0x6d206863
    4698:	73756e69 	.word	0x73756e69
    469c:	46783020 	.word	0x46783020
    46a0:	61642046 	.word	0x61642046
    46a4:	00007379 	.word	0x00007379
    46a8:	3d202069 	.word	0x3d202069
    46ac:	35783020 	.word	0x35783020
    46b0:	35373366 	.word	0x35373366
    46b4:	20666439 	.word	0x20666439
    46b8:	2028202d 	.word	0x2028202d
    46bc:	3e3e2069 	.word	0x3e3e2069
    46c0:	29203120 	.word	0x29203120
    46c4:	0000003b 	.word	0x0000003b
    46c8:	42414341 	.word	0x42414341
    46cc:	00000000 	.word	0x00000000
    46d0:	63666544 	.word	0x63666544
    46d4:	73276e6f 	.word	0x73276e6f
    46d8:	6e616320 	.word	0x6e616320
    46dc:	656c6563 	.word	0x656c6563
    46e0:	00002e64 	.word	0x00002e64
    46e4:	73746152 	.word	0x73746152
    46e8:	7473656e 	.word	0x7473656e
    46ec:	6f4e203a 	.word	0x6f4e203a
    46f0:	6e696874 	.word	0x6e696874
    46f4:	6f542067 	.word	0x6f542067
    46f8:	216f4420 	.word	0x216f4420
    46fc:	00000000 	.word	0x00000000
    4700:	68207449 	.word	0x68207449
    4704:	36207361 	.word	0x36207361
    4708:	656b2039 	.word	0x656b2039
    470c:	002e7379 	.word	0x002e7379
    4710:	61636542 	.word	0x61636542
    4714:	20657375 	.word	0x20657375
    4718:	342d5456 	.word	0x342d5456
    471c:	77203032 	.word	0x77203032
    4720:	61207361 	.word	0x61207361
    4724:	6165726c 	.word	0x6165726c
    4728:	74207964 	.word	0x74207964
    472c:	6e656b61 	.word	0x6e656b61
    4730:	00000000 	.word	0x00000000
    4734:	706d6f43 	.word	0x706d6f43
    4738:	73736572 	.word	0x73736572
    473c:	206e6f69 	.word	0x206e6f69
    4740:	6f676c61 	.word	0x6f676c61
    4744:	68746972 	.word	0x68746972
    4748:	6162206d 	.word	0x6162206d
    474c:	20646573 	.word	0x20646573
    4750:	42206e6f 	.word	0x42206e6f
    4754:	28205042 	.word	0x28205042
    4758:	37393931 	.word	0x37393931
    475c:	00000029 	.word	0x00000029
    4760:	20656854 	.word	0x20656854
    4764:	72756f73 	.word	0x72756f73
    4768:	6f206563 	.word	0x6f206563
    476c:	68742066 	.word	0x68742066
    4770:	694d2065 	.word	0x694d2065
    4774:	73697373 	.word	0x73697373
    4778:	70706973 	.word	0x70706973
    477c:	69722069 	.word	0x69722069
    4780:	20726576 	.word	0x20726576
    4784:	69207369 	.word	0x69207369
    4788:	6550206e 	.word	0x6550206e
    478c:	79736e6e 	.word	0x79736e6e
    4790:	6e61766c 	.word	0x6e61766c
    4794:	002e6169 	.word	0x002e6169
    4798:	6566664f 	.word	0x6566664f
    479c:	7669736e 	.word	0x7669736e
    47a0:	61682065 	.word	0x61682065
    47a4:	61776472 	.word	0x61776472
    47a8:	00006572 	.word	0x00006572
    47ac:	6c6c6f46 	.word	0x6c6c6f46
    47b0:	5720776f 	.word	0x5720776f
    47b4:	646c726f 	.word	0x646c726f
    47b8:	676f5020 	.word	0x676f5020
    47bc:	64654620 	.word	0x64654620
    47c0:	74617265 	.word	0x74617265
    47c4:	206e6f69 	.word	0x206e6f69
    47c8:	40202020 	.word	0x40202020
    47cc:	6c726f57 	.word	0x6c726f57
    47d0:	676f5064 	.word	0x676f5064
    47d4:	00000000 	.word	0x00000000
    47d8:	6d6d7544 	.word	0x6d6d7544
    47dc:	68742079 	.word	0x68742079
    47e0:	20636369 	.word	0x20636369
    47e4:	65696c63 	.word	0x65696c63
    47e8:	0000746e 	.word	0x0000746e
    47ec:	694e2041 	.word	0x694e2041
    47f0:	54206563 	.word	0x54206563
    47f4:	202e5954 	.word	0x202e5954
    47f8:	4f206e41 	.word	0x4f206e41
    47fc:	6f43204b 	.word	0x6f43204b
    4800:	7475706d 	.word	0x7475706d
    4804:	002e7265 	.word	0x002e7265
    4808:	69636543 	.word	0x69636543
    480c:	65276e20 	.word	0x65276e20
    4810:	70207473 	.word	0x70207473
    4814:	75207361 	.word	0x75207361
    4818:	4320656e 	.word	0x4320656e
    481c:	72656279 	.word	0x72656279
    4820:	6b636564 	.word	0x6b636564
    4824:	65622820 	.word	0x65622820
    4828:	73756163 	.word	0x73756163
    482c:	74692065 	.word	0x74692065
    4830:	6e207327 	.word	0x6e207327
    4834:	6120746f 	.word	0x6120746f
    4838:	6c655020 	.word	0x6c655020
    483c:	6e616369 	.word	0x6e616369
    4840:	73614320 	.word	0x73614320
    4844:	00002965 	.word	0x00002965
    4848:	696c6f53 	.word	0x696c6f53
    484c:	69726164 	.word	0x69726164
    4850:	69207974 	.word	0x69207974
    4854:	6f6e2073 	.word	0x6f6e2073
    4858:	20612074 	.word	0x20612074
    485c:	2077656e 	.word	0x2077656e
    4860:	6d617266 	.word	0x6d617266
    4864:	726f7765 	.word	0x726f7765
    4868:	0000006b 	.word	0x0000006b
    486c:	61657242 	.word	0x61657242
    4870:	616f6264 	.word	0x616f6264
    4874:	6e696472 	.word	0x6e696472
    4878:	73492067 	.word	0x73492067
    487c:	746f4e20 	.word	0x746f4e20
    4880:	43204120 	.word	0x43204120
    4884:	656d6972 	.word	0x656d6972
    4888:	00000000 	.word	0x00000000
    488c:	2066664f 	.word	0x2066664f
    4890:	6f207962 	.word	0x6f207962
    4894:	6520656e 	.word	0x6520656e
    4898:	726f7272 	.word	0x726f7272
    489c:	72612073 	.word	0x72612073
    48a0:	6f632065 	.word	0x6f632065
    48a4:	6e6f6d6d 	.word	0x6e6f6d6d
    48a8:	00000000 	.word	0x00000000
    48ac:	000006e2 	.word	0x000006e2
    48b0:	0000092e 	.word	0x0000092e
    48b4:	0000092e 	.word	0x0000092e
    48b8:	0000092e 	.word	0x0000092e
    48bc:	0000092e 	.word	0x0000092e
    48c0:	0000092e 	.word	0x0000092e
    48c4:	0000092e 	.word	0x0000092e
    48c8:	0000092e 	.word	0x0000092e
    48cc:	0000092e 	.word	0x0000092e
    48d0:	0000092e 	.word	0x0000092e
    48d4:	0000092e 	.word	0x0000092e
    48d8:	0000092e 	.word	0x0000092e
    48dc:	0000092e 	.word	0x0000092e
    48e0:	0000092e 	.word	0x0000092e
    48e4:	0000092e 	.word	0x0000092e
    48e8:	0000092e 	.word	0x0000092e
    48ec:	000006ca 	.word	0x000006ca
    48f0:	0000092e 	.word	0x0000092e
    48f4:	0000092e 	.word	0x0000092e
    48f8:	0000092e 	.word	0x0000092e
    48fc:	0000092e 	.word	0x0000092e
    4900:	0000092e 	.word	0x0000092e
    4904:	0000092e 	.word	0x0000092e
    4908:	0000092e 	.word	0x0000092e
    490c:	0000092e 	.word	0x0000092e
    4910:	0000092e 	.word	0x0000092e
    4914:	0000092e 	.word	0x0000092e
    4918:	0000092e 	.word	0x0000092e
    491c:	0000092e 	.word	0x0000092e
    4920:	0000092e 	.word	0x0000092e
    4924:	0000092e 	.word	0x0000092e
    4928:	0000092e 	.word	0x0000092e
    492c:	000006da 	.word	0x000006da
    4930:	0000092e 	.word	0x0000092e
    4934:	0000092e 	.word	0x0000092e
    4938:	0000092e 	.word	0x0000092e
    493c:	0000092e 	.word	0x0000092e
    4940:	0000092e 	.word	0x0000092e
    4944:	0000092e 	.word	0x0000092e
    4948:	0000092e 	.word	0x0000092e
    494c:	0000092e 	.word	0x0000092e
    4950:	0000092e 	.word	0x0000092e
    4954:	0000092e 	.word	0x0000092e
    4958:	0000092e 	.word	0x0000092e
    495c:	0000092e 	.word	0x0000092e
    4960:	0000092e 	.word	0x0000092e
    4964:	0000092e 	.word	0x0000092e
    4968:	0000092e 	.word	0x0000092e
    496c:	000006d2 	.word	0x000006d2
    4970:	000006ea 	.word	0x000006ea
    4974:	000006b2 	.word	0x000006b2
    4978:	000006c2 	.word	0x000006c2
    497c:	000006ba 	.word	0x000006ba
    4980:	00000002 	.word	0x00000002
    4984:	00000003 	.word	0x00000003
    4988:	00000028 	.word	0x00000028
    498c:	00000029 	.word	0x00000029
    4990:	00000004 	.word	0x00000004
    4994:	00000005 	.word	0x00000005
    4998:	00000006 	.word	0x00000006
    499c:	00000007 	.word	0x00000007
    49a0:	00000020 	.word	0x00000020
    49a4:	00000021 	.word	0x00000021
    49a8:	00000022 	.word	0x00000022
    49ac:	00000023 	.word	0x00000023
    49b0:	00000024 	.word	0x00000024
    49b4:	00000025 	.word	0x00000025
    49b8:	00000026 	.word	0x00000026
    49bc:	00000027 	.word	0x00000027
    49c0:	00000008 	.word	0x00000008
    49c4:	00000009 	.word	0x00000009
    49c8:	0000000a 	.word	0x0000000a
    49cc:	0000000b 	.word	0x0000000b
    49d0:	42000800 	.word	0x42000800
    49d4:	42000c00 	.word	0x42000c00
    49d8:	42001000 	.word	0x42001000
    49dc:	42001400 	.word	0x42001400
    49e0:	42001800 	.word	0x42001800
    49e4:	42001c00 	.word	0x42001c00
    49e8:	000013de 	.word	0x000013de
    49ec:	000013da 	.word	0x000013da
    49f0:	000013da 	.word	0x000013da
    49f4:	00001440 	.word	0x00001440
    49f8:	00001440 	.word	0x00001440
    49fc:	000013f2 	.word	0x000013f2
    4a00:	000013e4 	.word	0x000013e4
    4a04:	000013f8 	.word	0x000013f8
    4a08:	0000142e 	.word	0x0000142e
    4a0c:	00001600 	.word	0x00001600
    4a10:	000015e0 	.word	0x000015e0
    4a14:	000015e0 	.word	0x000015e0
    4a18:	0000166c 	.word	0x0000166c
    4a1c:	000015f2 	.word	0x000015f2
    4a20:	0000160e 	.word	0x0000160e
    4a24:	000015e4 	.word	0x000015e4
    4a28:	0000161c 	.word	0x0000161c
    4a2c:	0000165c 	.word	0x0000165c

00004a30 <CodePage437>:
	...
    4d68:	01000000 06186080 18608001 60800106     .....`....`....`
    4d78:	80010000 00000060 00000000 66986106     ....`........a.f
    4d88:	98618619 00000000 00000000 00000000     ..a.............
    4d98:	00000000 98610600 fb8f1966 8f1966fe     ......a.f....f..
    4da8:	1966fefb 00986186 00000000 80010000     ..f..a..........
    4db8:	891f7e60 1f7e6082 7e649081 6080811f     `~...`~...d~...`
    4dc8:	00000000 04000000 29a60823 1820c106     ........#..).. .
    4dd8:	98200304 324c1165 00000008 00000000     .. .e.L2........
    4de8:	84e08107 10420821 5a081e78 87208216     ....!.B.x..Z.. .
    4df8:	0000f6d9 00000000 30c00000 00030618     ...........0....
    4e08:	000000c0 00000000 00000000 00000000     ................
    4e18:	40000000 03020810 0c30c000 08c00003     ...@......0.....
    4e28:	10400002 00000000 01000000 02084000     ..@..........@..
    4e38:	06186000 18608001 00010208 00000040     .`....`.....@...
    4e48:	00000000 42000000 90408210 40c23fff     .......B..@..?.@
    4e58:	80104290 00000000 00000000 00000000     .B..............
    4e68:	80000208 e0bfff20 02082080 00000000     .... .... ......
	...
    4e88:	18000000 c0000306 00001040 00000000     ........@.......
    4e98:	00000000 ff000000 0000e0bf 00000000     ................
	...
    4ebc:	030e3800 0000e080 00000000 08200000     .8............ .
    4ecc:	80000104 02041020 10408000 00000208     .... .....@.....
    4edc:	00000000 e0030000 cc1863f8 b0c1061b     .........c......
    4eec:	63061b6c f8e0c318 00000000 00000000     l..c............
    4efc:	1b3c70c0 0c30c004 30c00003 e107030c     .p<...0....0....
    4f0c:	000000f8 00000000 c1f8e107 061860b0     .............`..
    4f1c:	0187030e 0f30c0c0 0000fefb 00000000     ......0.........
    4f2c:	fefb0f00 60c00003 80030e30 b0810618     .......`0.......
    4f3c:	00f8e167 00000000 40000000 03070c30     g..........@0...
    4f4c:	31649040 04fefb0f 10400001 00000000     @.d1......@.....
    4f5c:	0f000000 30c0fefb c1f8e30f 061860b0     .......0.....`..
    4f6c:	e167a081 000000f8 00000000 60f8e003     ..g............`
    4f7c:	00030c18 1b8c3ffe 67b0c106 0000f8e1     .....?.....g....
    4f8c:	00000000 fefb0f00 20608001 00010408     ..........` ....
    4f9c:	0c302080 00c00003 00000000 e0030000     . 0.............
    4fac:	6cb0c1f8 0f3e061b c1061b8c f8e063b0     ...l..>......c..
    4fbc:	00000000 07000000 b0c1f8e1 7d0e3b6c     ............l;.}
    4fcc:	0618609f e1c70003 000000f0 00000000     .`..............
    4fdc:	38000000 e080030e 00000000 030e3800     ...8.........8..
    4fec:	0000e080 00000000 00000000 80030e38     ............8...
    4ffc:	000000e0 0e380000 40c00003 00000010     ......8....@....
    500c:	30000000 03030c0c 30c0c000 0cc00003     ...0.......0....
    501c:	0c300003 00000000 00000000 00000000     ..0.............
    502c:	00fefb0f fefb0f00 00000000 00000000     ................
    503c:	00000000 3000030c 30c0000c c0c00003     .......0...0....
    504c:	0c0c3030 00000003 00000000 f8e10700     00..............
    505c:	6060b0c1 01061818 00006080 00608001     ..``.....`....`.
    506c:	00000000 e1070000 6cb0c1f8 b4d33edb     ...........l.>..
    507c:	c036fbec f8e10730 00000000 00000000     ..6.0...........
    508c:	0d367080 c18c3186 fefb6fb0 1b6cb0c1     .p6..1...o....l.
    509c:	00000006 00000000 61f8e30f 86196698     ...........a.f..
    50ac:	19861f7e 6f986186 0000f8e3 00000000     ~....a.o........
    50bc:	f8e00300 036c9861 0c30c000 98610003     ....a.l...0...a.
    50cc:	00f8e063 00000000 c30f0000 861966f0     c............f..
    50dc:	98618631 668c1966 f0c38f19 00000000     1.a.f..f........
    50ec:	0f000000 30c0fefb fc00030c 00030c3f     .......0....?...
    50fc:	fb0f30c0 000000fe 00000000 c0fefb0f     .0..............
    510c:	00030c30 030c3ffc 0c30c000 00000003     0....?....0.....
    511c:	00000000 f8e00300 036c9861 0c30c000     ........a.l...0.
    512c:	98611e7b 00f8e063 00000000 1b0c0000     {.a.c...........
    513c:	6cb0c106 bfff061b c1061bec 061b6cb0     ...l.........l..
    514c:	00000000 07000000 0618f8e1 18608001     ..............`.
    515c:	60800106 e1070618 000000f8 00000000     ...`............
    516c:	067ef801 18608001 60800106 8731c618     ..~...`....`..1.
    517c:	0000f0c1 00000000 061b0c00 838d31c6     .............1..
    518c:	0d38e060 31c66083 00061b8c 00000000     `.8..`.1........
    519c:	030c0000 0c30c000 30c00003 c000030c     ......0....0....
    51ac:	fefb0f30 00000000 0c000000 bde38e1b     0...............
    51bc:	c976dbed 061b6cb2 1b6cb0c1 00000006     ..v..l....l.....
    51cc:	00000000 e1861b0c 661b6dbc 5b6cb3c9     .........m.f..l[
    51dc:	ecb0c31e 0000061b 00000000 f8e00300     ................
    51ec:	1b6cb0e3 6cb0c106 b8c1061b 00f8e0e3     ..l....l........
    51fc:	00000000 e30f0000 6cb0c1f8 3ffe061b     ...........l...?
    520c:	c000038c 00030c30 00000000 07000000     ....0...........
    521c:	b0c1f8e1 c1061b6c 36db6cb0 d98731c6     ....l....l.6.1..
    522c:	000000f6 00000000 c1f8e30f 061b6cb0     .............l..
    523c:	638c3ffe cc30c318 0000061b 00000000     .?.c..0.........
    524c:	f8e10700 036cb0c1 801f7e00 b0c10618     ......l..~......
    525c:	00f8e167 00000000 fb0f0000 000208fe     g...............
    526c:	02082080 08208000 20800002 00000000     . .... .... ....
    527c:	0c000000 b0c1061b c1061b6c 061b6cb0     ........l....l..
    528c:	e063b0c1 000000f8 00000000 c1061b0c     ..c.............
    529c:	8c3166b0 60c31863 810d36d8 000020c0     .f1.c..`.6... ..
    52ac:	00000000 061b0c00 1b6cb0c1 6db2c906     ..........l....m
    52bc:	b5d576db 008c796f 00000000 1b0c0000     .v..oy..........
    52cc:	c3186306 060cf860 63d8e003 061bcc18     .c..`......c....
    52dc:	00000000 0c000000 1863061b 1cd860c3     ..........c..`..
    52ec:	20c00107 80000208 00000020 00000000     ... .... .......
    52fc:	03fefb0f 1060c000 0103060c 0f30c0c0     ......`.......0.
    530c:	0000fefb 00000000 f8e00300 00030c30     ............0...
    531c:	030c30c0 0c30c000 00f8e003 00000000     .0....0.........
    532c:	01060000 010c3080 030c6080 03186000     .....0...`...`..
    533c:	0618c000 00000000 07000000 030cf0c1     ................
    534c:	0c30c000 30c00003 c107030c 000000f0     ..0....0........
    535c:	00000000 36708000 8c31860d 0060b0c1     ......p6..1...`.
	...
    5388:	00fefb0f 00000000 80030000 00030ce0     ................
    5398:	00001860 00000000 00000000 00000000     `...............
	...
    53b0:	01fcf003 fef86380 f823b0c0 000000fe     .....c....#.....
    53c0:	00000000 c000030c fcf30d30 0b6cb8e1     ........0.....l.
    53d0:	6fb8e102 00007cf3 00000000 00000000     ...o.|..........
    53e0:	e1070000 6cb0c1f8 30c00003 00fef907     .......l...0....
    53f0:	00000000 18000000 67800106 b0c3f6d9     ...........g....
    5400:	c3061bec f6d9e7b0 00000000 00000000     ................
    5410:	00000000 c1f8e107 fefb6fb0 f10730c0     .........o...0..
    5420:	000000fc 00000000 3138e000 c000638c     ..........81.c..
    5430:	00033ffc 030c30c0 0000c000 00000000     .?...0..........
    5440:	00000000 d9070000 8731c6f6 30c0f0c1     ..........1....0
    5450:	c3f8e107 f8e1e7b0 030c0000 0d30c000     ..............0.
    5460:	b8e178e3 c1061b6c 061b6cb0 00000000     .x..l....l......
    5470:	01000000 00006080 18e08003 60800106     .....`.........`
    5480:	e1070618 000000f8 00000000 00186000     .............`..
    5490:	18600000 60800106 8c010618 31c61863     ..`....`....c..1
    54a0:	00f0c187 00030c00 638c30c0 0f36cc30     .........0.c0.6.
    54b0:	33ccc083 000c330c 00000000 c0030000     ...3.3..........
    54c0:	00030cf0 030c30c0 0c30c000 f8e00303     .....0....0.....
	...
    54dc:	e70c330c 669b6dbf 1b6cb0c1 00000006     .3...m.f..l.....
	...
    54f4:	f8e20b00 1b6cb8e1 6cb0c106 0000061b     ......l....l....
	...
    550c:	e1070000 cc30c3f8 30c30c33 00f8e1c7     ......0.3..0....
	...
    5524:	0b000000 b0c1f8e2 be061b6c 0002882f     ........l.../...
    5534:	02082080 00000000 00000000 c1fae803     . ..............
    5544:	061b6cb0 08a08f3e 20800002 00000208     .l..>...... ....
    5554:	00000000 7ce20800 036cbcf1 0c30c000     .......|..l...0.
    5564:	00000003 00000000 00000000 e1070000     ................
    5574:	0730c0f8 8001f8e1 00f8e36f 00000000     ..0.....o.......
    5584:	00030000 0f0c30c0 0c30f8e3 33c00003     .....0....0....3
    5594:	30c0c00c 00000000 00000000 00000000     ...0............
    55a4:	c30c330c 0c33cc30 d9c730c3 000000f6     .3..0.3..0......
	...
    55bc:	02020000 30e6b8c1 01073ed8 000020c0     .......0.>... ..
	...
    55d4:	1b0c0000 6cb0c106 b5d5769b 008c3166     .......l.v..f1..
	...
    55ec:	08000000 1b441823 6ce08003 08620c11     ....#.D....l..b.
	...
    5608:	c618630c 18638c31 60801f7e 873bc618     .c..1.c.~..`..;.
    5618:	0000f0c1 00000000 fefb0f00 c0c00003     ................
    5628:	0f0c3030 0000fefb 00000000 1e780000     00............x.
    5638:	40000208 000e3810 02081040 001e7800     ...@.8..@....x..
    5648:	00000000 80010000 01061860 06186080     ........`....`..
    5658:	18608001 60800106 00000000 0f000000     ..`....`........
    5668:	0208c003 0cc00003 c0000303 030f0208     ................
    5678:	000000c0 00000000 d9c61907 1c736cb3     .............ls.
	...
    56b0:	e0030000 6c9861f8 30c00003 6100030c     .....a.l...0...a
    56c0:	f8e06398 00000608 00000000 00669801     .c............f.
    56d0:	c30c330c 0c33cc30 d9c730c3 000000f6     .3..0.3..0......
    56e0:	00000000 0c180000 f8e10700 fb6fb0c1     ..............o.
    56f0:	0730c0fe 0000fcf1 00000000 10000000     ..0.............
    5700:	f003000a 638001fc b0c0fef8 00fef823     .......c....#...
	...
    5718:	030033cc 8001fcf0 c0fef863 fef823b0     .3......c....#..
	...
    5730:	000c6000 01fcf003 fef86380 f823b0c0     .`.......c....#.
    5740:	000000fe 03000000 0c482001 fcf00300     ......... H.....
    5750:	f8638001 23b0c0fe 0000fef8 00000000     ..c....#........
    5760:	00000000 e1070000 6cb0c1f8 30c00003     ...........l...0
    5770:	04fef907 00000003 00000000 07001420     ............ ...
    5780:	b0c1f8e1 c0fefb6f fcf10730 00000000     ....o...0.......
    5790:	00000000 00669801 c1f8e107 fefb6fb0     ......f......o..
    57a0:	f10730c0 000000fc 00000000 18c00000     .0..............
    57b0:	f8e10700 fb6fb0c1 0730c0fe 0000fcf1     ......o...0.....
    57c0:	00000000 98610600 80030000 010618e0     ......a.........
    57d0:	06186080 00f8e107 00000000 00000000     .`..............
    57e0:	03002840 0618e080 18608001 f8e10706     @(........`.....
	...
    57f8:	0018c000 18e08003 60800106 e1070618     ...........`....
    5808:	000000f8 18630000 367080c0 8c31860d     ......c...p6..1.
    5818:	fb6fb0c1 6cb0c1fe 0000061b 1c000000     ..o....l........
    5828:	70c08108 31860d36 6fb0c18c b0c1fefb     ...p6..1...o....
    5838:	00061b6c 00000000 fb0f0606 0c30c0fe     l.............0.
    5848:	3ffc0003 c000030c fefb0f30 00000000     ...?....0.......
	...
    5860:	1dfe7907 fedb2786 f90733cc 000000ee     .y...'...3......
    5870:	00000000 367ef800 9861860d e3efb1c7     ......~6..a.....
    5880:	8c31c6f8 00001e7b 00000000 20000000     ..1.{.......... 
    5890:	e1070014 cc30c3f8 30c30c33 00f8e1c7     ......0.3..0....
    58a0:	00000000 01000000 07006698 30c3f8e1     .........f.....0
    58b0:	c30c33cc f8e1c730 00000000 00000000     .3..0...........
    58c0:	0018c000 c3f8e107 0c33cc30 e1c730c3     ........0.3..0..
    58d0:	000000f8 00000000 14200000 0c330c00     .......... ...3.
    58e0:	33cc30c3 c730c30c 0000f6d9 00000000     .0.3..0.........
    58f0:	60000000 330c000c cc30c30c 30c30c33     ...`...3..0.3..0
    5900:	00f6d9c7 00000000 01000000 0c006698     .............f..
    5910:	31c61863 7e18638c 1860801f c1873bc6     c..1.c.~..`..;..
    5920:	800d36f0 383ef800 c1061bec 061b6cb0     .6....>8.....l..
    5930:	e0e3b8c1 000000f8 0c330000 c10603c0     ..........3.....
    5940:	061b6cb0 1b6cb0c1 63b0c106 0000f8e0     .l....l....c....
    5950:	00000000 20800002 1b8c1f7e 0c32c826     ....... ~...&.2.
    5960:	1f7e069b 08208080 00000000 c0010000     ..~... .........
    5970:	461873f8 3e608001 6080810f fefb0f18     .s.F..`>...`....
    5980:	00000000 0c000000 08630419 1c506083     ..........c..`P.
    5990:	20e00302 80800f08 00000020 00000000     ... .... .......
    59a0:	c1f8e30f f81b6cb0 830d30fe 0d36d878     .....l...0..x.6.
    59b0:	000038e3 00000000 3ce00000 98638e3f     .8.........<?.c.
    59c0:	833ffee0 1c70c000 60800106 00000018     ..?...p....`....
    59d0:	00000000 03000c18 8001fcf0 c0fef863     ............c...
    59e0:	fef823b0 00000000 00000000 000060c0     .#...........`..
    59f0:	18e08003 60800106 e1070618 000000f8     .......`........
    5a00:	00000000 18300000 f8e10700 33cc30c3     ......0......0.3
    5a10:	c730c30c 0000f8e1 00000000 30000000     ..0............0
    5a20:	330c0018 cc30c30c 30c30c33 00f6d9c7     ...3..0.3..0....
	...
    5a38:	0b001998 b8e1f8e2 c1061b6c 061b6cb0     ........l....l..
    5a48:	00000000 8c0c4c00 b8e1061b c9461b6d     .....L......m.F.
    5a58:	165b6cb2 1becb0c3 00000006 00000000     .l[.............
    5a68:	1e08c003 00e08308 000080ff 00000000     ................
	...
    5a80:	d8c00100 c0810d22 0080ff00 00000000     ...."...........
	...
    5a9c:	00030c00 030c0000 3030c000 061b0c0c     ..........00....
    5aac:	00c00f3f 00000000 00000000 ff000000     ?...............
    5abc:	0003ecbf 00000000 00000000 00000000     ................
	...
    5ad4:	18e0bfff 00000006 00000000 00000000     ................
    5ae4:	30c00003 c000030c e0bfff00 0c1f3800     ...0.........8..
    5af4:	183060c0 0000c00f c0000300 00030c30     .`0.........0...
    5b04:	bfff00c0 668001e0 fc618619 60800106     .......f..a....`
    5b14:	00000000 06180000 18000000 60800106     ...............`
    5b24:	80010618 00061860 00000000 00000000     ....`...........
    5b34:	90200100 80042448 00001290 00000000     .. .H$..........
	...
    5b4c:	40020000 20010948 00244890 00000000     ...@H.. .H$.....
    5b5c:	00000000 48024092 09004900 80240024     .....@.H.I..$.$.
    5b6c:	92009004 00480240 24090049 42529200     ....@.H.I..$..RB
    5b7c:	0949494a 24242529 929094a4 4a425292     JII.)%$$.....RBJ
    5b8c:	29094949 ad6d2425 b6b6b5bd dbdad6f6     II.)%$m.........
    5b9c:	6f6b5bdb bdad6d6d f6b6b6b5 08dbdad6     .[komm..........
    5bac:	20800002 80000208 00020820 02082080     ... .... .... ..
    5bbc:	08208000 20800002 80000208 00020820     .. .... .... ...
    5bcc:	3e082080 08208000 20800002 80000208     . .>.. .... ....
    5bdc:	00020820 02082080 f8208000 20800f02      .... .... .... 
    5bec:	80000208 00020820 05142080 14504001     .... .... ...@P.
    5bfc:	50400105 40013d14 01051450 05145040     ..@P.=.@P...@P..
    5c0c:	00504001 00000000 00000000 013f0000     .@P...........?.
    5c1c:	05145040 14504001 50400105 00000000     @P...@P...@P....
    5c2c:	00000000 02f80000 0820800f 20800002     .......... .... 
    5c3c:	80000208 01051420 05145040 f4504001     .... ...@P...@P.
    5c4c:	50400f01 40010514 01051450 05145040     ..@P...@P...@P..
    5c5c:	14504001 50400105 40010514 01051450     .@P...@P...@P...
    5c6c:	05145040 00504001 00000000 00000000     @P...@P.........
    5c7c:	0f01fc00 05145040 14504001 50400105     ....@P...@P...@P
    5c8c:	40010514 01051450 01f45040 0000c00f     ...@P...@P......
	...
    5ca4:	01051400 05145040 14504001 0000003f     ....@P...@P.?...
	...
    5cbc:	02080000 08208000 20800002 800f02f8     ...... .... ....
	...
    5ce0:	003e0000 02082080 08208000 20800002     ..>.. .... .... 
    5cf0:	80000208 00020820 03082080 000000f0     .... .... ......
	...
    5d08:	00020800 02082080 08208000 0000f03f     ..... .... .?...
	...
    5d2c:	80f03f00 00020820 02082080 08208000     .?.. .... .... .
    5d3c:	20800002 80000208 f0030820 02082080     ... .... .... ..
    5d4c:	08208000 20800002 00000000 00000000     .. .... ........
    5d5c:	3f000000 000000f0 00000000 00000000     ...?............
    5d6c:	00020800 02082080 08208000 2080f03f     ..... .... .?.. 
    5d7c:	80000208 00020820 02082080 08208000     .... .... .... .
    5d8c:	20800002 fc00c20f 00020820 02082080     ... .... .... ..
    5d9c:	14208000 50400105 40010514 f1051450     .. ...@P...@P...
    5dac:	05145040 14504001 50400105 40010514     @P...@P...@P...@
    5dbc:	01051450 c4175040 0000fc01 00000000     P...@P..........
	...
    5dd8:	1f000000 507c01c4 40010514 01051450     ......|P...@P...
    5de8:	05145040 14504001 50400105 fc0fc0f7     @P...@P...@P....
	...
    5e0c:	0fc0ff00 0514507c 14504001 50400105     ....|P...@P...@P
    5e1c:	40010514 01051450 c4175040 14507c01     ...@P...@P...|P.
    5e2c:	50400105 40010514 00000050 00000000     ..@P...@P.......
    5e3c:	ff000000 00fc0fc0 00000000 00000000     ................
    5e4c:	05140000 14504001 50400105 7c0fc0f7     .....@P...@P...|
    5e5c:	01051450 05145040 08504001 20800002     P...@P...@P.... 
    5e6c:	80000208 0fc0ff20 000000fc 00000000     .... ...........
    5e7c:	00000000 40010514 01051450 3f145040     .......@P...@P.?
    5e8c:	000000f0 00000000 00000000 00000000     ................
    5e9c:	00000000 ff000000 20fc0fc0 80000208     ........... ....
    5eac:	00020820 00002080 00000000 00000000      .... ..........
    5ebc:	40f13f00 01051450 05145040 14504001     .?.@P...@P...@P.
    5ecc:	50400105 40010514 f0071450 00000000     ..@P...@P.......
	...
    5ee4:	80000208 00020820 c20f2080 0000fc00     .... .... ......
	...
    5f04:	0f000000 20fc00c2 80000208 00020820     ....... .... ...
    5f14:	00002080 00000000 00000000 40f10700     . .............@
    5f24:	01051450 05145040 14504001 50400105     P...@P...@P...@P
    5f34:	40010514 f13f1450 05145040 14504001     ...@P.?.@P...@P.
    5f44:	50400105 80000208 00020820 c2ff2080     ..@P.... .... ..
    5f54:	0820fc0f 20800002 80000208 00020820     .. .... .... ...
    5f64:	02082080 08208000 0000003e 00000000     . .... .>.......
	...
    5f84:	80f00300 00020820 02082080 ff208000     .... .... .... .
    5f94:	ffffffff ffffffff ffffffff ffffffff     ................
    5fa4:	ffffffff ffffffff 00000000 00000000     ................
    5fb4:	3f000000 ffffffff ffffffff ffffffff     ...?............
    5fc4:	0f3ef8ff 3ef8e083 f8e0830f e0830f3e     ..>....>....>...
    5fd4:	830f3ef8 0f3ef8e0 c30fe083 0f3ffcf0     .>....>.......?.
    5fe4:	3ffcf0c3 fcf0c30f f0c30f3f c30f3ffc     ...?....?....?..
    5ff4:	ff3ffcf0 ffffffff ffffffff f0ffffff     ..?.............
	...
    6018:	8f380000 c208234c e2d08330 00000000     ..8.L#..0.......
    6028:	00000000 193c0000 7c982186 8c61061f     ......<..!.|..a.
    6038:	63c61861 000000f8 00000000 ff000000     a..c............
    6048:	8c31c61f 01061863 06186080 0000c003     ..1.c....`......
	...
    6064:	c69fff00 18638c31 008e33c6 00000000     ....1.c..3......
    6074:	fb0f0000 06b080fe 0618c000 c0800103     ................
    6084:	fefb2f20 00000000 00000000 00000000      /..............
    6094:	c3fef907 0c33cc30 e1c730c3 000000f8     ....0.3..0......
	...
    60ac:	0c330c00 33cc30c3 cf30c30c 30c0f6db     ..3..0.3..0....0
    60bc:	0000000c 00000000 e30c0000 618e7bbc     .............{.a
    60cc:	06186080 00608001 00000000 00000000     .`....`.........
    60dc:	c33f0000 30c3f8c1 c30c33cc f0e0c730     ..?....0.3..0...
    60ec:	000000ff 03000000 1863f8e0 ff061bcc     ..........c.....
    60fc:	061becbf e0c31863 000000f8 00000000     ....c...........
    610c:	e3fce103 061b6cb0 1b6cb0c1 c698e38e     .....l....l.....
    611c:	00008e33 00000000 fef80300 e1070318     3...............
    612c:	cc30c3f8 30c30c33 00f8e1c7 00000000     ..0.3..0........
    613c:	00000000 02000000 a2885421 88228a28     ........!T..(.".
    614c:	00204295 00000000 00000000 07000000     .B .............
    615c:	860e7367 628a28a3 7367b8b0 00000070     gs...(.b..gsp...
    616c:	00000000 60f8e003 00030c18 030c3ffc     .......`.....?..
    617c:	03186000 0000f8e0 00000000 00000000     .`..............
    618c:	1b8c0f3e 6cb0c106 b0c1061b c1061b6c     >......l....l...
    619c:	000060b0 00000000 0f000000 0000fefb     .`..............
    61ac:	00fefb0f fefb0f00 00000000 00000000     ................
    61bc:	02080000 ff208000 2080e0bf 03000208     ...... .... ....
    61cc:	000000fe 00000000 3000030c 30c0000c     ...........0...0
    61dc:	c0c00003 0c0c3030 3f000003 0000f0cf     ....00.....?....
    61ec:	0c300000 0003030c 0330c0c0 030cc000     ..0.......0.....
    61fc:	000c3000 00f0cf3f 88600307 00020820     .0..?.....`. ...
    620c:	02082080 08208000 20800002 80000208     . .... .... ....
    621c:	00020820 02082080 08208000 20800002      .... .... .... 
    622c:	80000208 09240820 00008001 18000000     .... .$.........
    623c:	00000006 00e0bfff 00061800 00000000     ................
	...
    6254:	8a0f1c00 0f1c073e 00073e8a 00000000     ....>....>......
	...
    626c:	01092460 00000080 00000000 00000000     `$..............
	...
    6290:	80030e38 00000000 00000000 00000000     8...............
	...
    62a8:	01000000 00006080 00000000 0f000000     .....`..........
    62b8:	40000104 0d020820 0c504001 00800002     ...@ ....@P.....
    62c8:	00000000 f0c30b00 638c31c6 00000018     .........1.c....
	...
    62e4:	83070000 03070cf0 3fe0c081 00000000     ...........?....
	...
    6308:	c30f3ffc 0f3ffcf0 0000f0c3 00000000     .?....?.........
	...
    6330:	ffffffff 677537ff 71312c6a 38ffffff     .....7ugj,1q...8
    6340:	ff6b6869 7aff7732 6f3039ff 65332e6c     ihk.2w.z.90ol.3e
    6350:	ffff7861 2f3b702d 63737234 5b3dff20     ax..-p;/4rsc .=[
    6360:	7435ff27 ff6e7664 5cff5d27 62667936     '.5tdvn.'].\6yfb
    6370:	ffffff6d 0000ffff ffffffff 475526ff     m............&UG
    6380:	51213c4a 2affffff ff4b4849 5aff5740     J<!Q...*IHK.@W.Z
    6390:	4f2928ff 45233e4c ffff5841 3f3a505f     .()OL>#EAX.._P:?
    63a0:	43535224 7b2bff20 5425ff22 ff4e5644     $RSC .+{".%TDVN.
    63b0:	7cff7d7e 4246595e ffffff4d 0000ffff     ~}.|^YFBM.......

000063c0 <CodePage437>:
	...
    66f8:	01000000 06186080 18608001 60800106     .....`....`....`
    6708:	80010000 00000060 00000000 66986106     ....`........a.f
    6718:	98618619 00000000 00000000 00000000     ..a.............
    6728:	00000000 98610600 fb8f1966 8f1966fe     ......a.f....f..
    6738:	1966fefb 00986186 00000000 80010000     ..f..a..........
    6748:	891f7e60 1f7e6082 7e649081 6080811f     `~...`~...d~...`
    6758:	00000000 04000000 29a60823 1820c106     ........#..).. .
    6768:	98200304 324c1165 00000008 00000000     .. .e.L2........
    6778:	84e08107 10420821 5a081e78 87208216     ....!.B.x..Z.. .
    6788:	0000f6d9 00000000 30c00000 00030618     ...........0....
    6798:	000000c0 00000000 00000000 00000000     ................
    67a8:	40000000 03020810 0c30c000 08c00003     ...@......0.....
    67b8:	10400002 00000000 01000000 02084000     ..@..........@..
    67c8:	06186000 18608001 00010208 00000040     .`....`.....@...
    67d8:	00000000 42000000 90408210 40c23fff     .......B..@..?.@
    67e8:	80104290 00000000 00000000 00000000     .B..............
    67f8:	80000208 e0bfff20 02082080 00000000     .... .... ......
	...
    6818:	18000000 c0000306 00001040 00000000     ........@.......
    6828:	00000000 ff000000 0000e0bf 00000000     ................
	...
    684c:	030e3800 0000e080 00000000 08200000     .8............ .
    685c:	80000104 02041020 10408000 00000208     .... .....@.....
    686c:	00000000 e0030000 cc1863f8 b0c1061b     .........c......
    687c:	63061b6c f8e0c318 00000000 00000000     l..c............
    688c:	1b3c70c0 0c30c004 30c00003 e107030c     .p<...0....0....
    689c:	000000f8 00000000 c1f8e107 061860b0     .............`..
    68ac:	0187030e 0f30c0c0 0000fefb 00000000     ......0.........
    68bc:	fefb0f00 60c00003 80030e30 b0810618     .......`0.......
    68cc:	00f8e167 00000000 40000000 03070c30     g..........@0...
    68dc:	31649040 04fefb0f 10400001 00000000     @.d1......@.....
    68ec:	0f000000 30c0fefb c1f8e30f 061860b0     .......0.....`..
    68fc:	e167a081 000000f8 00000000 60f8e003     ..g............`
    690c:	00030c18 1b8c3ffe 67b0c106 0000f8e1     .....?.....g....
    691c:	00000000 fefb0f00 20608001 00010408     ..........` ....
    692c:	0c302080 00c00003 00000000 e0030000     . 0.............
    693c:	6cb0c1f8 0f3e061b c1061b8c f8e063b0     ...l..>......c..
    694c:	00000000 07000000 b0c1f8e1 7d0e3b6c     ............l;.}
    695c:	0618609f e1c70003 000000f0 00000000     .`..............
    696c:	38000000 e080030e 00000000 030e3800     ...8.........8..
    697c:	0000e080 00000000 00000000 80030e38     ............8...
    698c:	000000e0 0e380000 40c00003 00000010     ......8....@....
    699c:	30000000 03030c0c 30c0c000 0cc00003     ...0.......0....
    69ac:	0c300003 00000000 00000000 00000000     ..0.............
    69bc:	00fefb0f fefb0f00 00000000 00000000     ................
    69cc:	00000000 3000030c 30c0000c c0c00003     .......0...0....
    69dc:	0c0c3030 00000003 00000000 f8e10700     00..............
    69ec:	6060b0c1 01061818 00006080 00608001     ..``.....`....`.
    69fc:	00000000 e1070000 6cb0c1f8 b4d33edb     ...........l.>..
    6a0c:	c036fbec f8e10730 00000000 00000000     ..6.0...........
    6a1c:	0d367080 c18c3186 fefb6fb0 1b6cb0c1     .p6..1...o....l.
    6a2c:	00000006 00000000 61f8e30f 86196698     ...........a.f..
    6a3c:	19861f7e 6f986186 0000f8e3 00000000     ~....a.o........
    6a4c:	f8e00300 036c9861 0c30c000 98610003     ....a.l...0...a.
    6a5c:	00f8e063 00000000 c30f0000 861966f0     c............f..
    6a6c:	98618631 668c1966 f0c38f19 00000000     1.a.f..f........
    6a7c:	0f000000 30c0fefb fc00030c 00030c3f     .......0....?...
    6a8c:	fb0f30c0 000000fe 00000000 c0fefb0f     .0..............
    6a9c:	00030c30 030c3ffc 0c30c000 00000003     0....?....0.....
    6aac:	00000000 f8e00300 036c9861 0c30c000     ........a.l...0.
    6abc:	98611e7b 00f8e063 00000000 1b0c0000     {.a.c...........
    6acc:	6cb0c106 bfff061b c1061bec 061b6cb0     ...l.........l..
    6adc:	00000000 07000000 0618f8e1 18608001     ..............`.
    6aec:	60800106 e1070618 000000f8 00000000     ...`............
    6afc:	067ef801 18608001 60800106 8731c618     ..~...`....`..1.
    6b0c:	0000f0c1 00000000 061b0c00 838d31c6     .............1..
    6b1c:	0d38e060 31c66083 00061b8c 00000000     `.8..`.1........
    6b2c:	030c0000 0c30c000 30c00003 c000030c     ......0....0....
    6b3c:	fefb0f30 00000000 0c000000 bde38e1b     0...............
    6b4c:	c976dbed 061b6cb2 1b6cb0c1 00000006     ..v..l....l.....
    6b5c:	00000000 e1861b0c 661b6dbc 5b6cb3c9     .........m.f..l[
    6b6c:	ecb0c31e 0000061b 00000000 f8e00300     ................
    6b7c:	1b6cb0e3 6cb0c106 b8c1061b 00f8e0e3     ..l....l........
    6b8c:	00000000 e30f0000 6cb0c1f8 3ffe061b     ...........l...?
    6b9c:	c000038c 00030c30 00000000 07000000     ....0...........
    6bac:	b0c1f8e1 c1061b6c 36db6cb0 d98731c6     ....l....l.6.1..
    6bbc:	000000f6 00000000 c1f8e30f 061b6cb0     .............l..
    6bcc:	638c3ffe cc30c318 0000061b 00000000     .?.c..0.........
    6bdc:	f8e10700 036cb0c1 801f7e00 b0c10618     ......l..~......
    6bec:	00f8e167 00000000 fb0f0000 000208fe     g...............
    6bfc:	02082080 08208000 20800002 00000000     . .... .... ....
    6c0c:	0c000000 b0c1061b c1061b6c 061b6cb0     ........l....l..
    6c1c:	e063b0c1 000000f8 00000000 c1061b0c     ..c.............
    6c2c:	8c3166b0 60c31863 810d36d8 000020c0     .f1.c..`.6... ..
    6c3c:	00000000 061b0c00 1b6cb0c1 6db2c906     ..........l....m
    6c4c:	b5d576db 008c796f 00000000 1b0c0000     .v..oy..........
    6c5c:	c3186306 060cf860 63d8e003 061bcc18     .c..`......c....
    6c6c:	00000000 0c000000 1863061b 1cd860c3     ..........c..`..
    6c7c:	20c00107 80000208 00000020 00000000     ... .... .......
    6c8c:	03fefb0f 1060c000 0103060c 0f30c0c0     ......`.......0.
    6c9c:	0000fefb 00000000 f8e00300 00030c30     ............0...
    6cac:	030c30c0 0c30c000 00f8e003 00000000     .0....0.........
    6cbc:	01060000 010c3080 030c6080 03186000     .....0...`...`..
    6ccc:	0618c000 00000000 07000000 030cf0c1     ................
    6cdc:	0c30c000 30c00003 c107030c 000000f0     ..0....0........
    6cec:	00000000 36708000 8c31860d 0060b0c1     ......p6..1...`.
	...
    6d18:	00fefb0f 00000000 80030000 00030ce0     ................
    6d28:	00001860 00000000 00000000 00000000     `...............
	...
    6d40:	01fcf003 fef86380 f823b0c0 000000fe     .....c....#.....
    6d50:	00000000 c000030c fcf30d30 0b6cb8e1     ........0.....l.
    6d60:	6fb8e102 00007cf3 00000000 00000000     ...o.|..........
    6d70:	e1070000 6cb0c1f8 30c00003 00fef907     .......l...0....
    6d80:	00000000 18000000 67800106 b0c3f6d9     ...........g....
    6d90:	c3061bec f6d9e7b0 00000000 00000000     ................
    6da0:	00000000 c1f8e107 fefb6fb0 f10730c0     .........o...0..
    6db0:	000000fc 00000000 3138e000 c000638c     ..........81.c..
    6dc0:	00033ffc 030c30c0 0000c000 00000000     .?...0..........
    6dd0:	00000000 d9070000 8731c6f6 30c0f0c1     ..........1....0
    6de0:	c3f8e107 f8e1e7b0 030c0000 0d30c000     ..............0.
    6df0:	b8e178e3 c1061b6c 061b6cb0 00000000     .x..l....l......
    6e00:	01000000 00006080 18e08003 60800106     .....`.........`
    6e10:	e1070618 000000f8 00000000 00186000     .............`..
    6e20:	18600000 60800106 8c010618 31c61863     ..`....`....c..1
    6e30:	00f0c187 00030c00 638c30c0 0f36cc30     .........0.c0.6.
    6e40:	33ccc083 000c330c 00000000 c0030000     ...3.3..........
    6e50:	00030cf0 030c30c0 0c30c000 f8e00303     .....0....0.....
	...
    6e6c:	e70c330c 669b6dbf 1b6cb0c1 00000006     .3...m.f..l.....
	...
    6e84:	f8e20b00 1b6cb8e1 6cb0c106 0000061b     ......l....l....
	...
    6e9c:	e1070000 cc30c3f8 30c30c33 00f8e1c7     ......0.3..0....
	...
    6eb4:	0b000000 b0c1f8e2 be061b6c 0002882f     ........l.../...
    6ec4:	02082080 00000000 00000000 c1fae803     . ..............
    6ed4:	061b6cb0 08a08f3e 20800002 00000208     .l..>...... ....
    6ee4:	00000000 7ce20800 036cbcf1 0c30c000     .......|..l...0.
    6ef4:	00000003 00000000 00000000 e1070000     ................
    6f04:	0730c0f8 8001f8e1 00f8e36f 00000000     ..0.....o.......
    6f14:	00030000 0f0c30c0 0c30f8e3 33c00003     .....0....0....3
    6f24:	30c0c00c 00000000 00000000 00000000     ...0............
    6f34:	c30c330c 0c33cc30 d9c730c3 000000f6     .3..0.3..0......
	...
    6f4c:	02020000 30e6b8c1 01073ed8 000020c0     .......0.>... ..
	...
    6f64:	1b0c0000 6cb0c106 b5d5769b 008c3166     .......l.v..f1..
	...
    6f7c:	08000000 1b441823 6ce08003 08620c11     ....#.D....l..b.
	...
    6f98:	c618630c 18638c31 60801f7e 873bc618     .c..1.c.~..`..;.
    6fa8:	0000f0c1 00000000 fefb0f00 c0c00003     ................
    6fb8:	0f0c3030 0000fefb 00000000 1e780000     00............x.
    6fc8:	40000208 000e3810 02081040 001e7800     ...@.8..@....x..
    6fd8:	00000000 80010000 01061860 06186080     ........`....`..
    6fe8:	18608001 60800106 00000000 0f000000     ..`....`........
    6ff8:	0208c003 0cc00003 c0000303 030f0208     ................
    7008:	000000c0 00000000 d9c61907 1c736cb3     .............ls.
	...
    7040:	e0030000 6c9861f8 30c00003 6100030c     .....a.l...0...a
    7050:	f8e06398 00000608 00000000 00669801     .c............f.
    7060:	c30c330c 0c33cc30 d9c730c3 000000f6     .3..0.3..0......
    7070:	00000000 0c180000 f8e10700 fb6fb0c1     ..............o.
    7080:	0730c0fe 0000fcf1 00000000 10000000     ..0.............
    7090:	f003000a 638001fc b0c0fef8 00fef823     .......c....#...
	...
    70a8:	030033cc 8001fcf0 c0fef863 fef823b0     .3......c....#..
	...
    70c0:	000c6000 01fcf003 fef86380 f823b0c0     .`.......c....#.
    70d0:	000000fe 03000000 0c482001 fcf00300     ......... H.....
    70e0:	f8638001 23b0c0fe 0000fef8 00000000     ..c....#........
    70f0:	00000000 e1070000 6cb0c1f8 30c00003     ...........l...0
    7100:	04fef907 00000003 00000000 07001420     ............ ...
    7110:	b0c1f8e1 c0fefb6f fcf10730 00000000     ....o...0.......
    7120:	00000000 00669801 c1f8e107 fefb6fb0     ......f......o..
    7130:	f10730c0 000000fc 00000000 18c00000     .0..............
    7140:	f8e10700 fb6fb0c1 0730c0fe 0000fcf1     ......o...0.....
    7150:	00000000 98610600 80030000 010618e0     ......a.........
    7160:	06186080 00f8e107 00000000 00000000     .`..............
    7170:	03002840 0618e080 18608001 f8e10706     @(........`.....
	...
    7188:	0018c000 18e08003 60800106 e1070618     ...........`....
    7198:	000000f8 18630000 367080c0 8c31860d     ......c...p6..1.
    71a8:	fb6fb0c1 6cb0c1fe 0000061b 1c000000     ..o....l........
    71b8:	70c08108 31860d36 6fb0c18c b0c1fefb     ...p6..1...o....
    71c8:	00061b6c 00000000 fb0f0606 0c30c0fe     l.............0.
    71d8:	3ffc0003 c000030c fefb0f30 00000000     ...?....0.......
	...
    71f0:	1dfe7907 fedb2786 f90733cc 000000ee     .y...'...3......
    7200:	00000000 367ef800 9861860d e3efb1c7     ......~6..a.....
    7210:	8c31c6f8 00001e7b 00000000 20000000     ..1.{.......... 
    7220:	e1070014 cc30c3f8 30c30c33 00f8e1c7     ......0.3..0....
    7230:	00000000 01000000 07006698 30c3f8e1     .........f.....0
    7240:	c30c33cc f8e1c730 00000000 00000000     .3..0...........
    7250:	0018c000 c3f8e107 0c33cc30 e1c730c3     ........0.3..0..
    7260:	000000f8 00000000 14200000 0c330c00     .......... ...3.
    7270:	33cc30c3 c730c30c 0000f6d9 00000000     .0.3..0.........
    7280:	60000000 330c000c cc30c30c 30c30c33     ...`...3..0.3..0
    7290:	00f6d9c7 00000000 01000000 0c006698     .............f..
    72a0:	31c61863 7e18638c 1860801f c1873bc6     c..1.c.~..`..;..
    72b0:	800d36f0 383ef800 c1061bec 061b6cb0     .6....>8.....l..
    72c0:	e0e3b8c1 000000f8 0c330000 c10603c0     ..........3.....
    72d0:	061b6cb0 1b6cb0c1 63b0c106 0000f8e0     .l....l....c....
    72e0:	00000000 20800002 1b8c1f7e 0c32c826     ....... ~...&.2.
    72f0:	1f7e069b 08208080 00000000 c0010000     ..~... .........
    7300:	461873f8 3e608001 6080810f fefb0f18     .s.F..`>...`....
    7310:	00000000 0c000000 08630419 1c506083     ..........c..`P.
    7320:	20e00302 80800f08 00000020 00000000     ... .... .......
    7330:	c1f8e30f f81b6cb0 830d30fe 0d36d878     .....l...0..x.6.
    7340:	000038e3 00000000 3ce00000 98638e3f     .8.........<?.c.
    7350:	833ffee0 1c70c000 60800106 00000018     ..?...p....`....
    7360:	00000000 03000c18 8001fcf0 c0fef863     ............c...
    7370:	fef823b0 00000000 00000000 000060c0     .#...........`..
    7380:	18e08003 60800106 e1070618 000000f8     .......`........
    7390:	00000000 18300000 f8e10700 33cc30c3     ......0......0.3
    73a0:	c730c30c 0000f8e1 00000000 30000000     ..0............0
    73b0:	330c0018 cc30c30c 30c30c33 00f6d9c7     ...3..0.3..0....
	...
    73c8:	0b001998 b8e1f8e2 c1061b6c 061b6cb0     ........l....l..
    73d8:	00000000 8c0c4c00 b8e1061b c9461b6d     .....L......m.F.
    73e8:	165b6cb2 1becb0c3 00000006 00000000     .l[.............
    73f8:	1e08c003 00e08308 000080ff 00000000     ................
	...
    7410:	d8c00100 c0810d22 0080ff00 00000000     ...."...........
	...
    742c:	00030c00 030c0000 3030c000 061b0c0c     ..........00....
    743c:	00c00f3f 00000000 00000000 ff000000     ?...............
    744c:	0003ecbf 00000000 00000000 00000000     ................
	...
    7464:	18e0bfff 00000006 00000000 00000000     ................
    7474:	30c00003 c000030c e0bfff00 0c1f3800     ...0.........8..
    7484:	183060c0 0000c00f c0000300 00030c30     .`0.........0...
    7494:	bfff00c0 668001e0 fc618619 60800106     .......f..a....`
    74a4:	00000000 06180000 18000000 60800106     ...............`
    74b4:	80010618 00061860 00000000 00000000     ....`...........
    74c4:	90200100 80042448 00001290 00000000     .. .H$..........
	...
    74dc:	40020000 20010948 00244890 00000000     ...@H.. .H$.....
    74ec:	00000000 48024092 09004900 80240024     .....@.H.I..$.$.
    74fc:	92009004 00480240 24090049 42529200     ....@.H.I..$..RB
    750c:	0949494a 24242529 929094a4 4a425292     JII.)%$$.....RBJ
    751c:	29094949 ad6d2425 b6b6b5bd dbdad6f6     II.)%$m.........
    752c:	6f6b5bdb bdad6d6d f6b6b6b5 08dbdad6     .[komm..........
    753c:	20800002 80000208 00020820 02082080     ... .... .... ..
    754c:	08208000 20800002 80000208 00020820     .. .... .... ...
    755c:	3e082080 08208000 20800002 80000208     . .>.. .... ....
    756c:	00020820 02082080 f8208000 20800f02      .... .... .... 
    757c:	80000208 00020820 05142080 14504001     .... .... ...@P.
    758c:	50400105 40013d14 01051450 05145040     ..@P.=.@P...@P..
    759c:	00504001 00000000 00000000 013f0000     .@P...........?.
    75ac:	05145040 14504001 50400105 00000000     @P...@P...@P....
    75bc:	00000000 02f80000 0820800f 20800002     .......... .... 
    75cc:	80000208 01051420 05145040 f4504001     .... ...@P...@P.
    75dc:	50400f01 40010514 01051450 05145040     ..@P...@P...@P..
    75ec:	14504001 50400105 40010514 01051450     .@P...@P...@P...
    75fc:	05145040 00504001 00000000 00000000     @P...@P.........
    760c:	0f01fc00 05145040 14504001 50400105     ....@P...@P...@P
    761c:	40010514 01051450 01f45040 0000c00f     ...@P...@P......
	...
    7634:	01051400 05145040 14504001 0000003f     ....@P...@P.?...
	...
    764c:	02080000 08208000 20800002 800f02f8     ...... .... ....
	...
    7670:	003e0000 02082080 08208000 20800002     ..>.. .... .... 
    7680:	80000208 00020820 03082080 000000f0     .... .... ......
	...
    7698:	00020800 02082080 08208000 0000f03f     ..... .... .?...
	...
    76bc:	80f03f00 00020820 02082080 08208000     .?.. .... .... .
    76cc:	20800002 80000208 f0030820 02082080     ... .... .... ..
    76dc:	08208000 20800002 00000000 00000000     .. .... ........
    76ec:	3f000000 000000f0 00000000 00000000     ...?............
    76fc:	00020800 02082080 08208000 2080f03f     ..... .... .?.. 
    770c:	80000208 00020820 02082080 08208000     .... .... .... .
    771c:	20800002 fc00c20f 00020820 02082080     ... .... .... ..
    772c:	14208000 50400105 40010514 f1051450     .. ...@P...@P...
    773c:	05145040 14504001 50400105 40010514     @P...@P...@P...@
    774c:	01051450 c4175040 0000fc01 00000000     P...@P..........
	...
    7768:	1f000000 507c01c4 40010514 01051450     ......|P...@P...
    7778:	05145040 14504001 50400105 fc0fc0f7     @P...@P...@P....
	...
    779c:	0fc0ff00 0514507c 14504001 50400105     ....|P...@P...@P
    77ac:	40010514 01051450 c4175040 14507c01     ...@P...@P...|P.
    77bc:	50400105 40010514 00000050 00000000     ..@P...@P.......
    77cc:	ff000000 00fc0fc0 00000000 00000000     ................
    77dc:	05140000 14504001 50400105 7c0fc0f7     .....@P...@P...|
    77ec:	01051450 05145040 08504001 20800002     P...@P...@P.... 
    77fc:	80000208 0fc0ff20 000000fc 00000000     .... ...........
    780c:	00000000 40010514 01051450 3f145040     .......@P...@P.?
    781c:	000000f0 00000000 00000000 00000000     ................
    782c:	00000000 ff000000 20fc0fc0 80000208     ........... ....
    783c:	00020820 00002080 00000000 00000000      .... ..........
    784c:	40f13f00 01051450 05145040 14504001     .?.@P...@P...@P.
    785c:	50400105 40010514 f0071450 00000000     ..@P...@P.......
	...
    7874:	80000208 00020820 c20f2080 0000fc00     .... .... ......
	...
    7894:	0f000000 20fc00c2 80000208 00020820     ....... .... ...
    78a4:	00002080 00000000 00000000 40f10700     . .............@
    78b4:	01051450 05145040 14504001 50400105     P...@P...@P...@P
    78c4:	40010514 f13f1450 05145040 14504001     ...@P.?.@P...@P.
    78d4:	50400105 80000208 00020820 c2ff2080     ..@P.... .... ..
    78e4:	0820fc0f 20800002 80000208 00020820     .. .... .... ...
    78f4:	02082080 08208000 0000003e 00000000     . .... .>.......
	...
    7914:	80f00300 00020820 02082080 ff208000     .... .... .... .
    7924:	ffffffff ffffffff ffffffff ffffffff     ................
    7934:	ffffffff ffffffff 00000000 00000000     ................
    7944:	3f000000 ffffffff ffffffff ffffffff     ...?............
    7954:	0f3ef8ff 3ef8e083 f8e0830f e0830f3e     ..>....>....>...
    7964:	830f3ef8 0f3ef8e0 c30fe083 0f3ffcf0     .>....>.......?.
    7974:	3ffcf0c3 fcf0c30f f0c30f3f c30f3ffc     ...?....?....?..
    7984:	ff3ffcf0 ffffffff ffffffff f0ffffff     ..?.............
	...
    79a8:	8f380000 c208234c e2d08330 00000000     ..8.L#..0.......
    79b8:	00000000 193c0000 7c982186 8c61061f     ......<..!.|..a.
    79c8:	63c61861 000000f8 00000000 ff000000     a..c............
    79d8:	8c31c61f 01061863 06186080 0000c003     ..1.c....`......
	...
    79f4:	c69fff00 18638c31 008e33c6 00000000     ....1.c..3......
    7a04:	fb0f0000 06b080fe 0618c000 c0800103     ................
    7a14:	fefb2f20 00000000 00000000 00000000      /..............
    7a24:	c3fef907 0c33cc30 e1c730c3 000000f8     ....0.3..0......
	...
    7a3c:	0c330c00 33cc30c3 cf30c30c 30c0f6db     ..3..0.3..0....0
    7a4c:	0000000c 00000000 e30c0000 618e7bbc     .............{.a
    7a5c:	06186080 00608001 00000000 00000000     .`....`.........
    7a6c:	c33f0000 30c3f8c1 c30c33cc f0e0c730     ..?....0.3..0...
    7a7c:	000000ff 03000000 1863f8e0 ff061bcc     ..........c.....
    7a8c:	061becbf e0c31863 000000f8 00000000     ....c...........
    7a9c:	e3fce103 061b6cb0 1b6cb0c1 c698e38e     .....l....l.....
    7aac:	00008e33 00000000 fef80300 e1070318     3...............
    7abc:	cc30c3f8 30c30c33 00f8e1c7 00000000     ..0.3..0........
    7acc:	00000000 02000000 a2885421 88228a28     ........!T..(.".
    7adc:	00204295 00000000 00000000 07000000     .B .............
    7aec:	860e7367 628a28a3 7367b8b0 00000070     gs...(.b..gsp...
    7afc:	00000000 60f8e003 00030c18 030c3ffc     .......`.....?..
    7b0c:	03186000 0000f8e0 00000000 00000000     .`..............
    7b1c:	1b8c0f3e 6cb0c106 b0c1061b c1061b6c     >......l....l...
    7b2c:	000060b0 00000000 0f000000 0000fefb     .`..............
    7b3c:	00fefb0f fefb0f00 00000000 00000000     ................
    7b4c:	02080000 ff208000 2080e0bf 03000208     ...... .... ....
    7b5c:	000000fe 00000000 3000030c 30c0000c     ...........0...0
    7b6c:	c0c00003 0c0c3030 3f000003 0000f0cf     ....00.....?....
    7b7c:	0c300000 0003030c 0330c0c0 030cc000     ..0.......0.....
    7b8c:	000c3000 00f0cf3f 88600307 00020820     .0..?.....`. ...
    7b9c:	02082080 08208000 20800002 80000208     . .... .... ....
    7bac:	00020820 02082080 08208000 20800002      .... .... .... 
    7bbc:	80000208 09240820 00008001 18000000     .... .$.........
    7bcc:	00000006 00e0bfff 00061800 00000000     ................
	...
    7be4:	8a0f1c00 0f1c073e 00073e8a 00000000     ....>....>......
	...
    7bfc:	01092460 00000080 00000000 00000000     `$..............
	...
    7c20:	80030e38 00000000 00000000 00000000     8...............
	...
    7c38:	01000000 00006080 00000000 0f000000     .....`..........
    7c48:	40000104 0d020820 0c504001 00800002     ...@ ....@P.....
    7c58:	00000000 f0c30b00 638c31c6 00000018     .........1.c....
	...
    7c74:	83070000 03070cf0 3fe0c081 00000000     ...........?....
	...
    7c98:	c30f3ffc 0f3ffcf0 0000f0c3 00000000     .?....?.........
	...

00007cc0 <kb_col>:
    7cc0:	00010000 00020000 00040000 00080000     ................
    7cd0:	00100000 00200000 08000000              ...... .....

00007cdc <kb_col_index>:
    7cdc:	00000010 00000011 00000012 00000013     ................
    7cec:	00000014 00000015 0000001b              ............

00007cf8 <kb_row>:
    7cf8:	00000004 00000008 00000010 00000020     ............ ...
    7d08:	00000040 00000080 00000400 00000800     @...............
    7d18:	00001000 00002000                       ..... ..

00007d20 <kb_row_index>:
    7d20:	00000002 00000003 00000004 00000005     ................
    7d30:	00000006 00000007 0000000a 0000000b     ................
    7d40:	0000000c 0000000d                       ........

00007d48 <beelzebub.12956>:
    7d48:	2e002d00 44003200 88005300 f300b600     .-...2.D.S......
    7d58:	64012201 d4019201 08020702 5f023402     .".d.........4._
    7d68:	94027802 bb02a602 db02ca02 f902e802     .x..............
    7d78:	7f031f03                                ....

00007d7c <belial.12953>:
    7d7c:	f0f0f0f0 b0b0b0f0 b1b6b6b6 b7b7b1b1     ................
    7d8c:	b2b2b2b7 bfb8b8b8 b9b3b3b3 b5b5b9b9     ................
    7d9c:	babac2b5 bcbcbcba bebdbdbd f0f0f0be     ................
    7dac:	b1b1f0f0 b8b7b7b6 bcb8b8b8 c9c9bcbc     ................
    7dbc:	35c9c9c9 0000363a                       ...5:6..

00007dc4 <lucifer.12955>:
    7dc4:	0852aa55 0d0d0d01 0d343434 34340d0d     U.R.....444...44
    7dd4:	00000034 01242424 340f0f0f 08083434     4...$$$....444..
    7de4:	24240308 00780024 00007800 52aa5589     ..$$$.x..x...U.R
    7df4:	00cc0008 01707005 02030303 02d00000     .....pp.........
    7e04:	00505050 00000055                       PPP.U...

00007e0c <mulciber.12954>:
    7e0c:	03020100 02010004 00020100 01000201     ................
    7e1c:	02010002 00020100 01000201 01000002     ................
    7e2c:	02010000 00020100 01000201 03020100     ................
    7e3c:	00000004 01000100 01000302 02010002     ................
    7e4c:	00000403 00000000 69726553 4f206c61     ........Serial O
    7e5c:	3639204b 38203030 0d0a314e 00000000     K 9600 8N1......

00007e6c <_global_impure_ptr>:
    7e6c:	2000015c                                \.. 

00007e70 <__sf_fake_stderr>:
	...

00007e90 <__sf_fake_stdin>:
	...

00007eb0 <__sf_fake_stdout>:
	...
    7ed0:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    7ee0:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    7ef0:	31300046 35343332 39383736 64636261     F.0123456789abcd
    7f00:	00006665                                ef..

00007f04 <_init>:
    7f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7f06:	46c0      	nop			; (mov r8, r8)
    7f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
    7f0a:	bc08      	pop	{r3}
    7f0c:	469e      	mov	lr, r3
    7f0e:	4770      	bx	lr

00007f10 <__init_array_start>:
    7f10:	000000dd 	.word	0x000000dd

00007f14 <_fini>:
    7f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7f16:	46c0      	nop			; (mov r8, r8)
    7f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
    7f1a:	bc08      	pop	{r3}
    7f1c:	469e      	mov	lr, r3
    7f1e:	4770      	bx	lr

00007f20 <__fini_array_start>:
    7f20:	000000b5 	.word	0x000000b5
