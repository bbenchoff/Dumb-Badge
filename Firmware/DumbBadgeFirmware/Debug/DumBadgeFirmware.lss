
DumBadgeFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006ea8  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001c8  20000000  00006ea8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000090c  200001c8  00007070  000201c8  2**2
                  ALLOC
  3 .stack        00002004  20000ad4  0000797c  000201c8  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000201c8  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
  6 .debug_info   0003ab58  00000000  00000000  00020249  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005875  00000000  00000000  0005ada1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00006a4c  00000000  00000000  00060616  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000790  00000000  00000000  00067062  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000008e0  00000000  00000000  000677f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001f468  00000000  00000000  000680d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00013f74  00000000  00000000  0008753a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000903cf  00000000  00000000  0009b4ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001a64  00000000  00000000  0012b880  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
	// Keep the default device state after reset
	SystemCoreClock = __SYSTEM_CLOCK;
       0:	d8 2a 00 20 b5 20 00 00 b1 20 00 00 b1 20 00 00     .*. . ... ... ..
	...
	config->stopbits         = USART_STOPBITS_1;
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
	config->baudrate         = 9600;
	config->receiver_enable  = true;
	config->transmitter_enable = true;
	config->clock_polarity_inverted = false;
      2c:	b1 20 00 00 00 00 00 00 00 00 00 00 b1 20 00 00     . ........... ..
	config->use_external_clock = false;
	config->ext_clock_freq   = 0;
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
	config->generator_source = GCLK_GENERATOR_0;
      3c:	f9 31 00 00 b1 20 00 00 b1 20 00 00 b1 20 00 00     .1... ... ... ..
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
	config->receive_pulse_length                    = 19;
      4c:	b1 20 00 00 b1 20 00 00 b1 20 00 00 b1 20 00 00     . ... ... ... ..
	usart_get_config_defaults(&config_usart);

	config_usart.baudrate    = SERCOMBAUD;
	config_usart.mux_setting = SERCOMMUX;
	config_usart.pinmux_pad0 = SERCOMPAD0;
	config_usart.pinmux_pad1 = SERCOMPAD1;
      5c:	b1 20 00 00 b1 20 00 00 cd 12 00 00 dd 12 00 00     . ... ..........
	config_usart.pinmux_pad2 = SERCOMPAD2;
	config_usart.pinmux_pad3 = SERCOMPAD3;

	while (usart_init(&usart_instance,	 SERCOMMODULE, &config_usart) != STATUS_OK) { }
      6c:	ed 12 00 00 fd 12 00 00 0d 13 00 00 1d 13 00 00     ................
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
      7c:	b1 20 00 00 b1 20 00 00 b1 20 00 00 b1 20 00 00     . ... ... ... ..
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	if (usart_init(module, hw, config) == STATUS_OK) {
      8c:	b1 20 00 00 b1 20 00 00 b1 20 00 00 b1 20 00 00     . ... ... ... ..
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
      9c:	01 0e 00 00 b1 20 00 00 b1 20 00 00 b1 20 00 00     ..... ... ... ..
	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
      ac:	b1 20 00 00 00 00 00 00                             . ......

000000b4 <__do_global_dtors_aux>:
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
      ba:	2b00      	cmp	r3, #0
	return (usart_hw->SYNCBUSY.reg);
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
	while (usart_is_syncing(module)) {
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop

	stdio_serial_init(&usart_instance, SERCOMMODULE, &config_usart);
	usart_enable(&usart_instance);
}
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200001c8 	.word	0x200001c8
      d4:	00000000 	.word	0x00000000
      d8:	00006ea8 	.word	0x00006ea8

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200001cc 	.word	0x200001cc
     108:	00006ea8 	.word	0x00006ea8
     10c:	00006ea8 	.word	0x00006ea8
     110:	00000000 	.word	0x00000000

00000114 <ring_init>:
	cbuf->full = false;
	cbuf->tail = (cbuf->tail + 1) % cbuf->max;
}

cbuf_handle_t ring_init(uint8_t* buffer, uint16_t size)
{
     114:	b570      	push	{r4, r5, r6, lr}
     116:	0005      	movs	r5, r0
     118:	000c      	movs	r4, r1
	cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
     11a:	200c      	movs	r0, #12
     11c:	4b04      	ldr	r3, [pc, #16]	; (130 <ring_init+0x1c>)
     11e:	4798      	blx	r3

	cbuf->buffer = buffer;
     120:	6005      	str	r5, [r0, #0]
	cbuf->max = size;
     122:	8104      	strh	r4, [r0, #8]
	return cbuf;
}

void ring_reset(cbuf_handle_t cbuf)
{
	cbuf->head = 0;
     124:	2300      	movs	r3, #0
     126:	8083      	strh	r3, [r0, #4]
	cbuf->tail = 0;
     128:	80c3      	strh	r3, [r0, #6]
	cbuf->full = false;
     12a:	7283      	strb	r3, [r0, #10]
}
     12c:	bd70      	pop	{r4, r5, r6, pc}
     12e:	46c0      	nop			; (mov r8, r8)
     130:	00003959 	.word	0x00003959

00000134 <ring_reset>:
	cbuf->head = 0;
     134:	2300      	movs	r3, #0
     136:	8083      	strh	r3, [r0, #4]
	cbuf->tail = 0;
     138:	80c3      	strh	r3, [r0, #6]
	cbuf->full = false;
     13a:	7283      	strb	r3, [r0, #10]
}
     13c:	4770      	bx	lr
	...

00000140 <ring_put>:

void ring_put(cbuf_handle_t cbuf, uint8_t data)
{
     140:	b510      	push	{r4, lr}
     142:	0004      	movs	r4, r0
	cbuf->buffer[cbuf->head] = data;
     144:	8883      	ldrh	r3, [r0, #4]
     146:	005b      	lsls	r3, r3, #1
     148:	6802      	ldr	r2, [r0, #0]
     14a:	5299      	strh	r1, [r3, r2]
	if(cbuf->full)
     14c:	7a83      	ldrb	r3, [r0, #10]
     14e:	2b00      	cmp	r3, #0
     150:	d005      	beq.n	15e <ring_put+0x1e>
		cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     152:	88c0      	ldrh	r0, [r0, #6]
     154:	3001      	adds	r0, #1
     156:	8921      	ldrh	r1, [r4, #8]
     158:	4b07      	ldr	r3, [pc, #28]	; (178 <ring_put+0x38>)
     15a:	4798      	blx	r3
     15c:	80e1      	strh	r1, [r4, #6]
	cbuf->head = (cbuf->head + 1) % cbuf->max;
     15e:	88a0      	ldrh	r0, [r4, #4]
     160:	3001      	adds	r0, #1
     162:	8921      	ldrh	r1, [r4, #8]
     164:	4b04      	ldr	r3, [pc, #16]	; (178 <ring_put+0x38>)
     166:	4798      	blx	r3
     168:	b28b      	uxth	r3, r1
     16a:	80a3      	strh	r3, [r4, #4]
	cbuf->full = (cbuf->head == cbuf->tail);
     16c:	88e1      	ldrh	r1, [r4, #6]
     16e:	1ac9      	subs	r1, r1, r3
     170:	424a      	negs	r2, r1
     172:	414a      	adcs	r2, r1
     174:	72a2      	strb	r2, [r4, #10]

	advance_pointer(cbuf);
}
     176:	bd10      	pop	{r4, pc}
     178:	000038b1 	.word	0x000038b1

0000017c <ring_empty>:
	return r;
}

bool ring_empty(cbuf_handle_t cbuf)
{
	return (!cbuf->full && (cbuf->head == cbuf->tail));
     17c:	7a82      	ldrb	r2, [r0, #10]
     17e:	2300      	movs	r3, #0
     180:	2a00      	cmp	r2, #0
     182:	d105      	bne.n	190 <ring_empty+0x14>
     184:	8883      	ldrh	r3, [r0, #4]
     186:	88c0      	ldrh	r0, [r0, #6]
     188:	1a1b      	subs	r3, r3, r0
     18a:	4258      	negs	r0, r3
     18c:	4143      	adcs	r3, r0
     18e:	b2db      	uxtb	r3, r3
     190:	0018      	movs	r0, r3
}
     192:	4770      	bx	lr

00000194 <ring_get>:
{
     194:	b570      	push	{r4, r5, r6, lr}
     196:	0004      	movs	r4, r0
     198:	000d      	movs	r5, r1
	if(!ring_empty(cbuf))
     19a:	4b0b      	ldr	r3, [pc, #44]	; (1c8 <ring_get+0x34>)
     19c:	4798      	blx	r3
     19e:	2800      	cmp	r0, #0
     1a0:	d10e      	bne.n	1c0 <ring_get+0x2c>
		*data = cbuf->buffer[cbuf->tail];
     1a2:	88e3      	ldrh	r3, [r4, #6]
     1a4:	005b      	lsls	r3, r3, #1
     1a6:	6822      	ldr	r2, [r4, #0]
     1a8:	5a9b      	ldrh	r3, [r3, r2]
     1aa:	702b      	strb	r3, [r5, #0]
	cbuf->full = false;
     1ac:	2300      	movs	r3, #0
     1ae:	72a3      	strb	r3, [r4, #10]
	cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     1b0:	88e0      	ldrh	r0, [r4, #6]
     1b2:	3001      	adds	r0, #1
     1b4:	8921      	ldrh	r1, [r4, #8]
     1b6:	4b05      	ldr	r3, [pc, #20]	; (1cc <ring_get+0x38>)
     1b8:	4798      	blx	r3
     1ba:	80e1      	strh	r1, [r4, #6]
		r = 0;
     1bc:	2000      	movs	r0, #0
}
     1be:	bd70      	pop	{r4, r5, r6, pc}
	int r = -1;
     1c0:	2001      	movs	r0, #1
     1c2:	4240      	negs	r0, r0
	return r;
     1c4:	e7fb      	b.n	1be <ring_get+0x2a>
     1c6:	46c0      	nop			; (mov r8, r8)
     1c8:	0000017d 	.word	0x0000017d
     1cc:	000038b1 	.word	0x000038b1

000001d0 <escState>:
	}
	
}

void escState(uint8_t character)
{
     1d0:	b570      	push	{r4, r5, r6, lr}
	char tempCharacter;
	int xTemp = 0;
	
	if(character == 0x44)		//ESC + D - (IND) - 
     1d2:	2844      	cmp	r0, #68	; 0x44
     1d4:	d000      	beq.n	1d8 <escState+0x8>
		{

		}		
	}
	
}
     1d6:	bd70      	pop	{r4, r5, r6, pc}
		if(yCharPos < 23)
     1d8:	4b18      	ldr	r3, [pc, #96]	; (23c <escState+0x6c>)
     1da:	881a      	ldrh	r2, [r3, #0]
     1dc:	2a16      	cmp	r2, #22
     1de:	d81b      	bhi.n	218 <escState+0x48>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     1e0:	4c17      	ldr	r4, [pc, #92]	; (240 <escState+0x70>)
     1e2:	4d18      	ldr	r5, [pc, #96]	; (244 <escState+0x74>)
     1e4:	8829      	ldrh	r1, [r5, #0]
     1e6:	004b      	lsls	r3, r1, #1
     1e8:	185b      	adds	r3, r3, r1
     1ea:	00db      	lsls	r3, r3, #3
     1ec:	18e3      	adds	r3, r4, r3
     1ee:	5c98      	ldrb	r0, [r3, r2]
     1f0:	4e15      	ldr	r6, [pc, #84]	; (248 <escState+0x78>)
     1f2:	47b0      	blx	r6
			yCharPos++;
     1f4:	4a11      	ldr	r2, [pc, #68]	; (23c <escState+0x6c>)
     1f6:	8813      	ldrh	r3, [r2, #0]
     1f8:	3301      	adds	r3, #1
     1fa:	b29b      	uxth	r3, r3
     1fc:	8013      	strh	r3, [r2, #0]
			tempCharacter = consoleDisplay[xCharPos][yCharPos];
     1fe:	8829      	ldrh	r1, [r5, #0]
     200:	004a      	lsls	r2, r1, #1
     202:	1852      	adds	r2, r2, r1
     204:	00d2      	lsls	r2, r2, #3
     206:	18a4      	adds	r4, r4, r2
			drawChar(tempCharacter);
     208:	5ce0      	ldrb	r0, [r4, r3]
     20a:	47b0      	blx	r6
			blinkCursor();
     20c:	4b0f      	ldr	r3, [pc, #60]	; (24c <escState+0x7c>)
     20e:	4798      	blx	r3
		currentState = stateGround;	
     210:	2200      	movs	r2, #0
     212:	4b0f      	ldr	r3, [pc, #60]	; (250 <escState+0x80>)
     214:	701a      	strb	r2, [r3, #0]
}
     216:	e7de      	b.n	1d6 <escState+0x6>
			xTemp = xCharPos;
     218:	4d0a      	ldr	r5, [pc, #40]	; (244 <escState+0x74>)
     21a:	882c      	ldrh	r4, [r5, #0]
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     21c:	0063      	lsls	r3, r4, #1
     21e:	191b      	adds	r3, r3, r4
     220:	00db      	lsls	r3, r3, #3
     222:	4907      	ldr	r1, [pc, #28]	; (240 <escState+0x70>)
     224:	18cb      	adds	r3, r1, r3
     226:	5c98      	ldrb	r0, [r3, r2]
     228:	4e07      	ldr	r6, [pc, #28]	; (248 <escState+0x78>)
     22a:	47b0      	blx	r6
			newLine();
     22c:	4b09      	ldr	r3, [pc, #36]	; (254 <escState+0x84>)
     22e:	4798      	blx	r3
			drawChar(0x00);
     230:	2000      	movs	r0, #0
     232:	47b0      	blx	r6
			xCharPos = xTemp;
     234:	802c      	strh	r4, [r5, #0]
			blinkCursor();
     236:	4b05      	ldr	r3, [pc, #20]	; (24c <escState+0x7c>)
     238:	4798      	blx	r3
     23a:	e7e9      	b.n	210 <escState+0x40>
     23c:	200002a6 	.word	0x200002a6
     240:	20000324 	.word	0x20000324
     244:	200002a4 	.word	0x200002a4
     248:	00002269 	.word	0x00002269
     24c:	00002351 	.word	0x00002351
     250:	200002a9 	.word	0x200002a9
     254:	000024ad 	.word	0x000024ad

00000258 <nextTab>:
		}
	}
}

int nextTab(int a) 
{
     258:	b510      	push	{r4, lr}
     25a:	b0d0      	sub	sp, #320	; 0x140
     25c:	0004      	movs	r4, r0
	int tabArray[] =
     25e:	22a0      	movs	r2, #160	; 0xa0
     260:	0052      	lsls	r2, r2, #1
     262:	4904      	ldr	r1, [pc, #16]	; (274 <nextTab+0x1c>)
     264:	4668      	mov	r0, sp
     266:	4b04      	ldr	r3, [pc, #16]	; (278 <nextTab+0x20>)
     268:	4798      	blx	r3
		 64,64,64,64,64,64,64,64,
		 72,72,72,72,72,72,72,72,
		 79,79,79,79,79,79,79,79
		};
	
	return tabArray[a];
     26a:	00a4      	lsls	r4, r4, #2
     26c:	466b      	mov	r3, sp
     26e:	58e0      	ldr	r0, [r4, r3]
}
     270:	b050      	add	sp, #320	; 0x140
     272:	bd10      	pop	{r4, pc}
     274:	00004ad8 	.word	0x00004ad8
     278:	0000396d 	.word	0x0000396d

0000027c <groundState>:
{
     27c:	b5f0      	push	{r4, r5, r6, r7, lr}
     27e:	46c6      	mov	lr, r8
     280:	b500      	push	{lr}
	if(character == 0x00)							//NUL 0x00 DO NOTHING
     282:	2807      	cmp	r0, #7
     284:	d93b      	bls.n	2fe <groundState+0x82>
	else if(character == 0x08)						//BS 0x08 Backspace
     286:	2808      	cmp	r0, #8
     288:	d035      	beq.n	2f6 <groundState+0x7a>
	else if(character == 0x09)						//TAB 0x09 Horizontal Tab
     28a:	2809      	cmp	r0, #9
     28c:	d053      	beq.n	336 <groundState+0xba>
	else if(character == 0x0A)						//LF 0x0A Line Feed
     28e:	280a      	cmp	r0, #10
     290:	d100      	bne.n	294 <groundState+0x18>
     292:	e072      	b.n	37a <groundState+0xfe>
	else if(character == 0x0B)						//VT 0x0B Vertical Tab
     294:	280b      	cmp	r0, #11
     296:	d100      	bne.n	29a <groundState+0x1e>
     298:	e0c6      	b.n	428 <groundState+0x1ac>
	else if(character == 0x0C)						//FF 0x0C Form Feed
     29a:	280c      	cmp	r0, #12
     29c:	d02f      	beq.n	2fe <groundState+0x82>
	else if(character == 0x0D)						//CR 0x0D Carriage Return
     29e:	280d      	cmp	r0, #13
     2a0:	d100      	bne.n	2a4 <groundState+0x28>
     2a2:	e119      	b.n	4d8 <groundState+0x25c>
	else if(character == 0x0E)						//SO 0x0E Shift Out
     2a4:	0003      	movs	r3, r0
     2a6:	3b0e      	subs	r3, #14
     2a8:	2b0c      	cmp	r3, #12
     2aa:	d928      	bls.n	2fe <groundState+0x82>
	else if(character == 0x1B)						//ESC 0x1B Escape
     2ac:	281b      	cmp	r0, #27
     2ae:	d100      	bne.n	2b2 <groundState+0x36>
     2b0:	e138      	b.n	524 <groundState+0x2a8>
	else if(character == 0x1C)						//FS 0x1C File Separator
     2b2:	0003      	movs	r3, r0
     2b4:	3b1c      	subs	r3, #28
     2b6:	2b03      	cmp	r3, #3
     2b8:	d921      	bls.n	2fe <groundState+0x82>
	else if(character == 0x7F)						//DEL 0x7F Delete
     2ba:	287f      	cmp	r0, #127	; 0x7f
     2bc:	d01f      	beq.n	2fe <groundState+0x82>
		consoleDisplay[xCharPos][yCharPos] = character;
     2be:	4d9b      	ldr	r5, [pc, #620]	; (52c <groundState+0x2b0>)
     2c0:	4c9b      	ldr	r4, [pc, #620]	; (530 <groundState+0x2b4>)
     2c2:	8823      	ldrh	r3, [r4, #0]
     2c4:	4f9b      	ldr	r7, [pc, #620]	; (534 <groundState+0x2b8>)
     2c6:	883a      	ldrh	r2, [r7, #0]
     2c8:	2618      	movs	r6, #24
     2ca:	4373      	muls	r3, r6
     2cc:	18eb      	adds	r3, r5, r3
     2ce:	5498      	strb	r0, [r3, r2]
		drawChar(character);
     2d0:	4b99      	ldr	r3, [pc, #612]	; (538 <groundState+0x2bc>)
     2d2:	4698      	mov	r8, r3
     2d4:	4798      	blx	r3
		xCharPos++;
     2d6:	8823      	ldrh	r3, [r4, #0]
     2d8:	3301      	adds	r3, #1
     2da:	b29b      	uxth	r3, r3
     2dc:	8023      	strh	r3, [r4, #0]
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     2de:	883a      	ldrh	r2, [r7, #0]
     2e0:	4373      	muls	r3, r6
     2e2:	18ed      	adds	r5, r5, r3
     2e4:	5ca8      	ldrb	r0, [r5, r2]
     2e6:	47c0      	blx	r8
		if(xCharPos > 79)		//END OF LINE
     2e8:	8823      	ldrh	r3, [r4, #0]
     2ea:	2b4f      	cmp	r3, #79	; 0x4f
     2ec:	d907      	bls.n	2fe <groundState+0x82>
			xCharPos--;
     2ee:	3b01      	subs	r3, #1
     2f0:	4a8f      	ldr	r2, [pc, #572]	; (530 <groundState+0x2b4>)
     2f2:	8013      	strh	r3, [r2, #0]
}
     2f4:	e003      	b.n	2fe <groundState+0x82>
		if(xCharPos > 0)
     2f6:	4b8e      	ldr	r3, [pc, #568]	; (530 <groundState+0x2b4>)
     2f8:	881b      	ldrh	r3, [r3, #0]
     2fa:	2b00      	cmp	r3, #0
     2fc:	d102      	bne.n	304 <groundState+0x88>
}
     2fe:	bc04      	pop	{r2}
     300:	4690      	mov	r8, r2
     302:	bdf0      	pop	{r4, r5, r6, r7, pc}
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     304:	4c89      	ldr	r4, [pc, #548]	; (52c <groundState+0x2b0>)
     306:	4d8b      	ldr	r5, [pc, #556]	; (534 <groundState+0x2b8>)
     308:	8829      	ldrh	r1, [r5, #0]
     30a:	005a      	lsls	r2, r3, #1
     30c:	18d3      	adds	r3, r2, r3
     30e:	00db      	lsls	r3, r3, #3
     310:	18e3      	adds	r3, r4, r3
     312:	5c58      	ldrb	r0, [r3, r1]
     314:	4e88      	ldr	r6, [pc, #544]	; (538 <groundState+0x2bc>)
     316:	47b0      	blx	r6
			xCharPos--;
     318:	4a85      	ldr	r2, [pc, #532]	; (530 <groundState+0x2b4>)
     31a:	8813      	ldrh	r3, [r2, #0]
     31c:	3b01      	subs	r3, #1
     31e:	b29b      	uxth	r3, r3
     320:	8013      	strh	r3, [r2, #0]
			tempCharacter = consoleDisplay[xCharPos][yCharPos];
     322:	8829      	ldrh	r1, [r5, #0]
     324:	005a      	lsls	r2, r3, #1
     326:	18d3      	adds	r3, r2, r3
     328:	00db      	lsls	r3, r3, #3
     32a:	18e3      	adds	r3, r4, r3
			drawChar(tempCharacter);
     32c:	5c58      	ldrb	r0, [r3, r1]
     32e:	47b0      	blx	r6
			blinkCursor();
     330:	4b82      	ldr	r3, [pc, #520]	; (53c <groundState+0x2c0>)
     332:	4798      	blx	r3
     334:	e7e3      	b.n	2fe <groundState+0x82>
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     336:	4c7e      	ldr	r4, [pc, #504]	; (530 <groundState+0x2b4>)
     338:	8822      	ldrh	r2, [r4, #0]
     33a:	4b7e      	ldr	r3, [pc, #504]	; (534 <groundState+0x2b8>)
     33c:	8819      	ldrh	r1, [r3, #0]
     33e:	0053      	lsls	r3, r2, #1
     340:	189b      	adds	r3, r3, r2
     342:	00db      	lsls	r3, r3, #3
     344:	4a79      	ldr	r2, [pc, #484]	; (52c <groundState+0x2b0>)
     346:	18d3      	adds	r3, r2, r3
     348:	5c58      	ldrb	r0, [r3, r1]
     34a:	4b7b      	ldr	r3, [pc, #492]	; (538 <groundState+0x2bc>)
     34c:	4798      	blx	r3
		if(xCharPos <= 79)
     34e:	8820      	ldrh	r0, [r4, #0]
     350:	284f      	cmp	r0, #79	; 0x4f
     352:	d803      	bhi.n	35c <groundState+0xe0>
			xCharPos = nextTab(xCharPos);
     354:	4b7a      	ldr	r3, [pc, #488]	; (540 <groundState+0x2c4>)
     356:	4798      	blx	r3
     358:	4b75      	ldr	r3, [pc, #468]	; (530 <groundState+0x2b4>)
     35a:	8018      	strh	r0, [r3, #0]
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     35c:	4b74      	ldr	r3, [pc, #464]	; (530 <groundState+0x2b4>)
     35e:	881a      	ldrh	r2, [r3, #0]
     360:	4b74      	ldr	r3, [pc, #464]	; (534 <groundState+0x2b8>)
     362:	8819      	ldrh	r1, [r3, #0]
     364:	0053      	lsls	r3, r2, #1
     366:	189b      	adds	r3, r3, r2
     368:	00db      	lsls	r3, r3, #3
     36a:	4a70      	ldr	r2, [pc, #448]	; (52c <groundState+0x2b0>)
     36c:	18d3      	adds	r3, r2, r3
     36e:	5c58      	ldrb	r0, [r3, r1]
     370:	4b71      	ldr	r3, [pc, #452]	; (538 <groundState+0x2bc>)
     372:	4798      	blx	r3
		blinkCursor();
     374:	4b71      	ldr	r3, [pc, #452]	; (53c <groundState+0x2c0>)
     376:	4798      	blx	r3
     378:	e7c1      	b.n	2fe <groundState+0x82>
		if(yCharPos == 23)
     37a:	4b6e      	ldr	r3, [pc, #440]	; (534 <groundState+0x2b8>)
     37c:	881a      	ldrh	r2, [r3, #0]
     37e:	2a17      	cmp	r2, #23
     380:	d032      	beq.n	3e8 <groundState+0x16c>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     382:	4c6a      	ldr	r4, [pc, #424]	; (52c <groundState+0x2b0>)
     384:	4d6a      	ldr	r5, [pc, #424]	; (530 <groundState+0x2b4>)
     386:	8829      	ldrh	r1, [r5, #0]
     388:	004b      	lsls	r3, r1, #1
     38a:	185b      	adds	r3, r3, r1
     38c:	00db      	lsls	r3, r3, #3
     38e:	18e3      	adds	r3, r4, r3
     390:	5c98      	ldrb	r0, [r3, r2]
     392:	4e69      	ldr	r6, [pc, #420]	; (538 <groundState+0x2bc>)
     394:	47b0      	blx	r6
			yCharPos++;
     396:	4a67      	ldr	r2, [pc, #412]	; (534 <groundState+0x2b8>)
     398:	8813      	ldrh	r3, [r2, #0]
     39a:	3301      	adds	r3, #1
     39c:	b29b      	uxth	r3, r3
     39e:	8013      	strh	r3, [r2, #0]
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     3a0:	8829      	ldrh	r1, [r5, #0]
     3a2:	004a      	lsls	r2, r1, #1
     3a4:	1852      	adds	r2, r2, r1
     3a6:	00d2      	lsls	r2, r2, #3
     3a8:	18a4      	adds	r4, r4, r2
     3aa:	5ce0      	ldrb	r0, [r4, r3]
     3ac:	47b0      	blx	r6
			blinkCursor();
     3ae:	4b63      	ldr	r3, [pc, #396]	; (53c <groundState+0x2c0>)
     3b0:	4798      	blx	r3
		if(lineFeed)
     3b2:	4b64      	ldr	r3, [pc, #400]	; (544 <groundState+0x2c8>)
     3b4:	781b      	ldrb	r3, [r3, #0]
     3b6:	2b00      	cmp	r3, #0
     3b8:	d0a1      	beq.n	2fe <groundState+0x82>
			if(yCharPos == 23)
     3ba:	4b5e      	ldr	r3, [pc, #376]	; (534 <groundState+0x2b8>)
     3bc:	881a      	ldrh	r2, [r3, #0]
     3be:	2a17      	cmp	r2, #23
     3c0:	d021      	beq.n	406 <groundState+0x18a>
				drawChar(consoleDisplay[xCharPos][yCharPos]);
     3c2:	4d5a      	ldr	r5, [pc, #360]	; (52c <groundState+0x2b0>)
     3c4:	4e5a      	ldr	r6, [pc, #360]	; (530 <groundState+0x2b4>)
     3c6:	8831      	ldrh	r1, [r6, #0]
     3c8:	004b      	lsls	r3, r1, #1
     3ca:	185b      	adds	r3, r3, r1
     3cc:	00db      	lsls	r3, r3, #3
     3ce:	18eb      	adds	r3, r5, r3
     3d0:	5c98      	ldrb	r0, [r3, r2]
     3d2:	4c59      	ldr	r4, [pc, #356]	; (538 <groundState+0x2bc>)
     3d4:	47a0      	blx	r4
				xCharPos = 0;
     3d6:	2300      	movs	r3, #0
     3d8:	8033      	strh	r3, [r6, #0]
				drawChar(consoleDisplay[xCharPos][yCharPos]);
     3da:	4b56      	ldr	r3, [pc, #344]	; (534 <groundState+0x2b8>)
     3dc:	881b      	ldrh	r3, [r3, #0]
     3de:	5ce8      	ldrb	r0, [r5, r3]
     3e0:	47a0      	blx	r4
				blinkCursor();
     3e2:	4b56      	ldr	r3, [pc, #344]	; (53c <groundState+0x2c0>)
     3e4:	4798      	blx	r3
     3e6:	e78a      	b.n	2fe <groundState+0x82>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     3e8:	4b51      	ldr	r3, [pc, #324]	; (530 <groundState+0x2b4>)
     3ea:	881a      	ldrh	r2, [r3, #0]
     3ec:	0053      	lsls	r3, r2, #1
     3ee:	189b      	adds	r3, r3, r2
     3f0:	00db      	lsls	r3, r3, #3
     3f2:	4a4e      	ldr	r2, [pc, #312]	; (52c <groundState+0x2b0>)
     3f4:	18d3      	adds	r3, r2, r3
     3f6:	7dd8      	ldrb	r0, [r3, #23]
     3f8:	4b4f      	ldr	r3, [pc, #316]	; (538 <groundState+0x2bc>)
     3fa:	4798      	blx	r3
			newLine();
     3fc:	4b52      	ldr	r3, [pc, #328]	; (548 <groundState+0x2cc>)
     3fe:	4798      	blx	r3
			blinkCursor();
     400:	4b4e      	ldr	r3, [pc, #312]	; (53c <groundState+0x2c0>)
     402:	4798      	blx	r3
     404:	e7d5      	b.n	3b2 <groundState+0x136>
				drawChar(consoleDisplay[xCharPos][yCharPos]);
     406:	4d4a      	ldr	r5, [pc, #296]	; (530 <groundState+0x2b4>)
     408:	882a      	ldrh	r2, [r5, #0]
     40a:	0053      	lsls	r3, r2, #1
     40c:	189b      	adds	r3, r3, r2
     40e:	00db      	lsls	r3, r3, #3
     410:	4a46      	ldr	r2, [pc, #280]	; (52c <groundState+0x2b0>)
     412:	18d3      	adds	r3, r2, r3
     414:	7dd8      	ldrb	r0, [r3, #23]
     416:	4c48      	ldr	r4, [pc, #288]	; (538 <groundState+0x2bc>)
     418:	47a0      	blx	r4
				xCharPos = 0;
     41a:	2300      	movs	r3, #0
     41c:	802b      	strh	r3, [r5, #0]
				drawChar(0x00);
     41e:	2000      	movs	r0, #0
     420:	47a0      	blx	r4
				blinkCursor();
     422:	4b46      	ldr	r3, [pc, #280]	; (53c <groundState+0x2c0>)
     424:	4798      	blx	r3
     426:	e76a      	b.n	2fe <groundState+0x82>
		if(yCharPos == 23)
     428:	4b42      	ldr	r3, [pc, #264]	; (534 <groundState+0x2b8>)
     42a:	881a      	ldrh	r2, [r3, #0]
     42c:	2a17      	cmp	r2, #23
     42e:	d033      	beq.n	498 <groundState+0x21c>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     430:	4c3e      	ldr	r4, [pc, #248]	; (52c <groundState+0x2b0>)
     432:	4d3f      	ldr	r5, [pc, #252]	; (530 <groundState+0x2b4>)
     434:	8829      	ldrh	r1, [r5, #0]
     436:	004b      	lsls	r3, r1, #1
     438:	185b      	adds	r3, r3, r1
     43a:	00db      	lsls	r3, r3, #3
     43c:	18e3      	adds	r3, r4, r3
     43e:	5c98      	ldrb	r0, [r3, r2]
     440:	4e3d      	ldr	r6, [pc, #244]	; (538 <groundState+0x2bc>)
     442:	47b0      	blx	r6
			yCharPos++;
     444:	4a3b      	ldr	r2, [pc, #236]	; (534 <groundState+0x2b8>)
     446:	8813      	ldrh	r3, [r2, #0]
     448:	3301      	adds	r3, #1
     44a:	b29b      	uxth	r3, r3
     44c:	8013      	strh	r3, [r2, #0]
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     44e:	8829      	ldrh	r1, [r5, #0]
     450:	004a      	lsls	r2, r1, #1
     452:	1852      	adds	r2, r2, r1
     454:	00d2      	lsls	r2, r2, #3
     456:	18a4      	adds	r4, r4, r2
     458:	5ce0      	ldrb	r0, [r4, r3]
     45a:	47b0      	blx	r6
			blinkCursor();
     45c:	4b37      	ldr	r3, [pc, #220]	; (53c <groundState+0x2c0>)
     45e:	4798      	blx	r3
		if(lineFeed)
     460:	4b38      	ldr	r3, [pc, #224]	; (544 <groundState+0x2c8>)
     462:	781b      	ldrb	r3, [r3, #0]
     464:	2b00      	cmp	r3, #0
     466:	d100      	bne.n	46a <groundState+0x1ee>
     468:	e749      	b.n	2fe <groundState+0x82>
			if(yCharPos == 23)
     46a:	4b32      	ldr	r3, [pc, #200]	; (534 <groundState+0x2b8>)
     46c:	881a      	ldrh	r2, [r3, #0]
     46e:	2a17      	cmp	r2, #23
     470:	d021      	beq.n	4b6 <groundState+0x23a>
				drawChar(consoleDisplay[xCharPos][yCharPos]);
     472:	4d2e      	ldr	r5, [pc, #184]	; (52c <groundState+0x2b0>)
     474:	4e2e      	ldr	r6, [pc, #184]	; (530 <groundState+0x2b4>)
     476:	8831      	ldrh	r1, [r6, #0]
     478:	004b      	lsls	r3, r1, #1
     47a:	185b      	adds	r3, r3, r1
     47c:	00db      	lsls	r3, r3, #3
     47e:	18eb      	adds	r3, r5, r3
     480:	5c98      	ldrb	r0, [r3, r2]
     482:	4c2d      	ldr	r4, [pc, #180]	; (538 <groundState+0x2bc>)
     484:	47a0      	blx	r4
				xCharPos = 0;
     486:	2300      	movs	r3, #0
     488:	8033      	strh	r3, [r6, #0]
				drawChar(consoleDisplay[xCharPos][yCharPos]);
     48a:	4b2a      	ldr	r3, [pc, #168]	; (534 <groundState+0x2b8>)
     48c:	881b      	ldrh	r3, [r3, #0]
     48e:	5ce8      	ldrb	r0, [r5, r3]
     490:	47a0      	blx	r4
				blinkCursor();
     492:	4b2a      	ldr	r3, [pc, #168]	; (53c <groundState+0x2c0>)
     494:	4798      	blx	r3
     496:	e732      	b.n	2fe <groundState+0x82>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     498:	4b25      	ldr	r3, [pc, #148]	; (530 <groundState+0x2b4>)
     49a:	881a      	ldrh	r2, [r3, #0]
     49c:	0053      	lsls	r3, r2, #1
     49e:	189b      	adds	r3, r3, r2
     4a0:	00db      	lsls	r3, r3, #3
     4a2:	4a22      	ldr	r2, [pc, #136]	; (52c <groundState+0x2b0>)
     4a4:	18d3      	adds	r3, r2, r3
     4a6:	7dd8      	ldrb	r0, [r3, #23]
     4a8:	4b23      	ldr	r3, [pc, #140]	; (538 <groundState+0x2bc>)
     4aa:	4798      	blx	r3
			newLine();
     4ac:	4b26      	ldr	r3, [pc, #152]	; (548 <groundState+0x2cc>)
     4ae:	4798      	blx	r3
			blinkCursor();
     4b0:	4b22      	ldr	r3, [pc, #136]	; (53c <groundState+0x2c0>)
     4b2:	4798      	blx	r3
     4b4:	e7d4      	b.n	460 <groundState+0x1e4>
				drawChar(consoleDisplay[xCharPos][yCharPos]);
     4b6:	4d1e      	ldr	r5, [pc, #120]	; (530 <groundState+0x2b4>)
     4b8:	882a      	ldrh	r2, [r5, #0]
     4ba:	0053      	lsls	r3, r2, #1
     4bc:	189b      	adds	r3, r3, r2
     4be:	00db      	lsls	r3, r3, #3
     4c0:	4a1a      	ldr	r2, [pc, #104]	; (52c <groundState+0x2b0>)
     4c2:	18d3      	adds	r3, r2, r3
     4c4:	7dd8      	ldrb	r0, [r3, #23]
     4c6:	4c1c      	ldr	r4, [pc, #112]	; (538 <groundState+0x2bc>)
     4c8:	47a0      	blx	r4
				xCharPos = 0;
     4ca:	2300      	movs	r3, #0
     4cc:	802b      	strh	r3, [r5, #0]
				drawChar(0x00);
     4ce:	2000      	movs	r0, #0
     4d0:	47a0      	blx	r4
				blinkCursor();
     4d2:	4b1a      	ldr	r3, [pc, #104]	; (53c <groundState+0x2c0>)
     4d4:	4798      	blx	r3
     4d6:	e712      	b.n	2fe <groundState+0x82>
		if(yCharPos == 23)
     4d8:	4b16      	ldr	r3, [pc, #88]	; (534 <groundState+0x2b8>)
     4da:	881a      	ldrh	r2, [r3, #0]
     4dc:	2a17      	cmp	r2, #23
     4de:	d012      	beq.n	506 <groundState+0x28a>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     4e0:	4d12      	ldr	r5, [pc, #72]	; (52c <groundState+0x2b0>)
     4e2:	4e13      	ldr	r6, [pc, #76]	; (530 <groundState+0x2b4>)
     4e4:	8831      	ldrh	r1, [r6, #0]
     4e6:	004b      	lsls	r3, r1, #1
     4e8:	185b      	adds	r3, r3, r1
     4ea:	00db      	lsls	r3, r3, #3
     4ec:	18eb      	adds	r3, r5, r3
     4ee:	5c98      	ldrb	r0, [r3, r2]
     4f0:	4c11      	ldr	r4, [pc, #68]	; (538 <groundState+0x2bc>)
     4f2:	47a0      	blx	r4
			xCharPos = 0;
     4f4:	2300      	movs	r3, #0
     4f6:	8033      	strh	r3, [r6, #0]
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     4f8:	4b0e      	ldr	r3, [pc, #56]	; (534 <groundState+0x2b8>)
     4fa:	881b      	ldrh	r3, [r3, #0]
     4fc:	5ce8      	ldrb	r0, [r5, r3]
     4fe:	47a0      	blx	r4
			blinkCursor();
     500:	4b0e      	ldr	r3, [pc, #56]	; (53c <groundState+0x2c0>)
     502:	4798      	blx	r3
     504:	e6fb      	b.n	2fe <groundState+0x82>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     506:	4c0a      	ldr	r4, [pc, #40]	; (530 <groundState+0x2b4>)
     508:	8822      	ldrh	r2, [r4, #0]
     50a:	0053      	lsls	r3, r2, #1
     50c:	189b      	adds	r3, r3, r2
     50e:	00db      	lsls	r3, r3, #3
     510:	4a06      	ldr	r2, [pc, #24]	; (52c <groundState+0x2b0>)
     512:	18d3      	adds	r3, r2, r3
     514:	7dd8      	ldrb	r0, [r3, #23]
     516:	4b08      	ldr	r3, [pc, #32]	; (538 <groundState+0x2bc>)
     518:	4798      	blx	r3
			xCharPos = 0;
     51a:	2300      	movs	r3, #0
     51c:	8023      	strh	r3, [r4, #0]
			blinkCursor();
     51e:	4b07      	ldr	r3, [pc, #28]	; (53c <groundState+0x2c0>)
     520:	4798      	blx	r3
     522:	e6ec      	b.n	2fe <groundState+0x82>
		currentState = stateESC;
     524:	2201      	movs	r2, #1
     526:	4b09      	ldr	r3, [pc, #36]	; (54c <groundState+0x2d0>)
     528:	701a      	strb	r2, [r3, #0]
     52a:	e6e8      	b.n	2fe <groundState+0x82>
     52c:	20000324 	.word	0x20000324
     530:	200002a4 	.word	0x200002a4
     534:	200002a6 	.word	0x200002a6
     538:	00002269 	.word	0x00002269
     53c:	00002351 	.word	0x00002351
     540:	00000259 	.word	0x00000259
     544:	20000158 	.word	0x20000158
     548:	000024ad 	.word	0x000024ad
     54c:	200002a9 	.word	0x200002a9

00000550 <parseChar>:
{
     550:	b510      	push	{r4, lr}
	parserState state = currentState;
     552:	4b06      	ldr	r3, [pc, #24]	; (56c <parseChar+0x1c>)
	switch(state)
     554:	781b      	ldrb	r3, [r3, #0]
     556:	2b00      	cmp	r3, #0
     558:	d002      	beq.n	560 <parseChar+0x10>
     55a:	2b01      	cmp	r3, #1
     55c:	d003      	beq.n	566 <parseChar+0x16>
}
     55e:	bd10      	pop	{r4, pc}
			groundState(character);
     560:	4b03      	ldr	r3, [pc, #12]	; (570 <parseChar+0x20>)
     562:	4798      	blx	r3
		break;
     564:	e7fb      	b.n	55e <parseChar+0xe>
			escState(character);
     566:	4b03      	ldr	r3, [pc, #12]	; (574 <parseChar+0x24>)
     568:	4798      	blx	r3
}
     56a:	e7f8      	b.n	55e <parseChar+0xe>
     56c:	200002a9 	.word	0x200002a9
     570:	0000027d 	.word	0x0000027d
     574:	000001d1 	.word	0x000001d1

00000578 <drawKare>:
//	graphic in the entire project. Please note this is the most
//	space efficient way to do this; a 40x31 bitmap is 930 bytes,
//	whereas	this is (104*2)+28+20, or 256 bytes.
/*********************************************************************/
void drawKare(int emotion)
{
     578:	b5f0      	push	{r4, r5, r6, r7, lr}
     57a:	b0c1      	sub	sp, #260	; 0x104
     57c:	0007      	movs	r7, r0
	uint16_t body[104] = {10,10,20,20,20,0,380,10,380,10,390,20,0,
     57e:	22d0      	movs	r2, #208	; 0xd0
     580:	492d      	ldr	r1, [pc, #180]	; (638 <drawKare+0xc0>)
     582:	a80c      	add	r0, sp, #48	; 0x30
     584:	4b2d      	ldr	r3, [pc, #180]	; (63c <drawKare+0xc4>)
     586:	4798      	blx	r3
		80,190,280,200,280,40,290,190,0,70,50,80,0,90,50,100,0,110,
		50,120,0,130,50,140,0,150,50,160,0,170,50,180,0,190,50,200,
		300,200,370,210,30,220,370,230,30,240,370,250,30,260,370,
		270,90,280,300,290};
	
	uint8_t happyTerm[28] = {180,80,190,130,170,130,190,140,140,
     588:	a805      	add	r0, sp, #20
     58a:	4b2d      	ldr	r3, [pc, #180]	; (640 <drawKare+0xc8>)
     58c:	001a      	movs	r2, r3
     58e:	3250      	adds	r2, #80	; 0x50
     590:	0001      	movs	r1, r0
     592:	ca31      	ldmia	r2!, {r0, r4, r5}
     594:	c131      	stmia	r1!, {r0, r4, r5}
     596:	ca31      	ldmia	r2!, {r0, r4, r5}
     598:	c131      	stmia	r1!, {r0, r4, r5}
     59a:	6812      	ldr	r2, [r2, #0]
     59c:	600a      	str	r2, [r1, #0]
		60,150,100,210,60,220,100,130,150,140,160,140,160,220,170,
	220,150,230,160};
	
	uint8_t rPiBeret[20] = {120,60,240,80,110,70,120,90,150,
     59e:	336c      	adds	r3, #108	; 0x6c
     5a0:	466a      	mov	r2, sp
     5a2:	cb13      	ldmia	r3!, {r0, r1, r4}
     5a4:	c213      	stmia	r2!, {r0, r1, r4}
     5a6:	cb03      	ldmia	r3!, {r0, r1}
     5a8:	c203      	stmia	r2!, {r0, r1}
     5aa:	ac0c      	add	r4, sp, #48	; 0x30
     5ac:	ae40      	add	r6, sp, #256	; 0x100

	
	
	for(int i = 0; i < 104; i = i+4)
	{
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
     5ae:	4d25      	ldr	r5, [pc, #148]	; (644 <drawKare+0xcc>)
		((body[i+1]/iSv)+(offsetGraphicY)),
		((body[i+2]/iSv)+(offsetGraphicX)),
		((body[i+3]/iSv)+(offsetGraphicY)));
     5b0:	88e3      	ldrh	r3, [r4, #6]
     5b2:	105b      	asrs	r3, r3, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
     5b4:	3396      	adds	r3, #150	; 0x96
		((body[i+2]/iSv)+(offsetGraphicX)),
     5b6:	88a2      	ldrh	r2, [r4, #4]
     5b8:	1052      	asrs	r2, r2, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
     5ba:	322d      	adds	r2, #45	; 0x2d
     5bc:	32ff      	adds	r2, #255	; 0xff
		((body[i+1]/iSv)+(offsetGraphicY)),
     5be:	8861      	ldrh	r1, [r4, #2]
     5c0:	1049      	asrs	r1, r1, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
     5c2:	3196      	adds	r1, #150	; 0x96
     5c4:	8820      	ldrh	r0, [r4, #0]
     5c6:	1040      	asrs	r0, r0, #1
     5c8:	302d      	adds	r0, #45	; 0x2d
     5ca:	30ff      	adds	r0, #255	; 0xff
     5cc:	47a8      	blx	r5
     5ce:	3408      	adds	r4, #8
	for(int i = 0; i < 104; i = i+4)
     5d0:	42b4      	cmp	r4, r6
     5d2:	d1ed      	bne.n	5b0 <drawKare+0x38>
	}
	switch(emotion)
     5d4:	2f00      	cmp	r7, #0
     5d6:	d003      	beq.n	5e0 <drawKare+0x68>
     5d8:	2f01      	cmp	r7, #1
     5da:	d017      	beq.n	60c <drawKare+0x94>
		break;
		case 2:
		//make a sad terminal thing go here
		break;
	}
}
     5dc:	b041      	add	sp, #260	; 0x104
     5de:	bdf0      	pop	{r4, r5, r6, r7, pc}
     5e0:	ac05      	add	r4, sp, #20
     5e2:	ae0c      	add	r6, sp, #48	; 0x30
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
     5e4:	4d17      	ldr	r5, [pc, #92]	; (644 <drawKare+0xcc>)
			((happyTerm[i+3]/iSv)+(offsetGraphicY)));
     5e6:	78e3      	ldrb	r3, [r4, #3]
     5e8:	105b      	asrs	r3, r3, #1
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
     5ea:	3396      	adds	r3, #150	; 0x96
			((happyTerm[i+2]/iSv)+(offsetGraphicX)),
     5ec:	78a2      	ldrb	r2, [r4, #2]
     5ee:	1052      	asrs	r2, r2, #1
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
     5f0:	322d      	adds	r2, #45	; 0x2d
     5f2:	32ff      	adds	r2, #255	; 0xff
			((happyTerm[i+1]/iSv)+(offsetGraphicY)),
     5f4:	7861      	ldrb	r1, [r4, #1]
     5f6:	1049      	asrs	r1, r1, #1
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
     5f8:	3196      	adds	r1, #150	; 0x96
     5fa:	7820      	ldrb	r0, [r4, #0]
     5fc:	1040      	asrs	r0, r0, #1
     5fe:	302d      	adds	r0, #45	; 0x2d
     600:	30ff      	adds	r0, #255	; 0xff
     602:	47a8      	blx	r5
     604:	3404      	adds	r4, #4
		for(int i = 0; i < 28; i = i+4)
     606:	42a6      	cmp	r6, r4
     608:	d1ed      	bne.n	5e6 <drawKare+0x6e>
     60a:	e7e7      	b.n	5dc <drawKare+0x64>
     60c:	466c      	mov	r4, sp
     60e:	ae05      	add	r6, sp, #20
			fillRect((
     610:	4d0c      	ldr	r5, [pc, #48]	; (644 <drawKare+0xcc>)
			((rPiBeret[i+3]/iSv)+(offsetGraphicY)));
     612:	78e3      	ldrb	r3, [r4, #3]
     614:	105b      	asrs	r3, r3, #1
			fillRect((
     616:	3396      	adds	r3, #150	; 0x96
			((rPiBeret[i+2]/iSv)+(offsetGraphicX)),
     618:	78a2      	ldrb	r2, [r4, #2]
     61a:	1052      	asrs	r2, r2, #1
			fillRect((
     61c:	322d      	adds	r2, #45	; 0x2d
     61e:	32ff      	adds	r2, #255	; 0xff
			((rPiBeret[i+1]/iSv)+(offsetGraphicY)),
     620:	7861      	ldrb	r1, [r4, #1]
     622:	1049      	asrs	r1, r1, #1
			fillRect((
     624:	3196      	adds	r1, #150	; 0x96
			(rPiBeret[i]/iSv)+(offsetGraphicX)),
     626:	7820      	ldrb	r0, [r4, #0]
     628:	1040      	asrs	r0, r0, #1
			fillRect((
     62a:	302d      	adds	r0, #45	; 0x2d
     62c:	30ff      	adds	r0, #255	; 0xff
     62e:	47a8      	blx	r5
     630:	3404      	adds	r4, #4
		for(int i = 0; i < 20; i = i+4)
     632:	42b4      	cmp	r4, r6
     634:	d1ed      	bne.n	612 <drawKare+0x9a>
     636:	e7d1      	b.n	5dc <drawKare+0x64>
     638:	00004c18 	.word	0x00004c18
     63c:	0000396d 	.word	0x0000396d
     640:	00004c98 	.word	0x00004c98
     644:	00002dc1 	.word	0x00002dc1

00000648 <splashScreen>:

void splashScreen(void)
{
     648:	b570      	push	{r4, r5, r6, lr}
	static const char *splashText[32];
	splashText[0]  = "Trans rights are human rights";//
     64a:	4c49      	ldr	r4, [pc, #292]	; (770 <splashScreen+0x128>)
     64c:	4b49      	ldr	r3, [pc, #292]	; (774 <splashScreen+0x12c>)
     64e:	6023      	str	r3, [r4, #0]
	splashText[1]  = "13^5 + 16^5 = 17^5";//
     650:	4b49      	ldr	r3, [pc, #292]	; (778 <splashScreen+0x130>)
     652:	6063      	str	r3, [r4, #4]
	splashText[2]  = "Reticulating Splines";//
     654:	4b49      	ldr	r3, [pc, #292]	; (77c <splashScreen+0x134>)
     656:	60a3      	str	r3, [r4, #8]
	splashText[3]  = "violence.works";//
     658:	4b49      	ldr	r3, [pc, #292]	; (780 <splashScreen+0x138>)
     65a:	60e3      	str	r3, [r4, #12]
	splashText[4]  = "Tabs!";//
     65c:	4b49      	ldr	r3, [pc, #292]	; (784 <splashScreen+0x13c>)
     65e:	6123      	str	r3, [r4, #16]
	splashText[5]  = "Kill Billionaires (and Trillionaire)";//
     660:	4b49      	ldr	r3, [pc, #292]	; (788 <splashScreen+0x140>)
     662:	6163      	str	r3, [r4, #20]
	splashText[6]  = "Interest in technology is not a personality";//
     664:	4b49      	ldr	r3, [pc, #292]	; (78c <splashScreen+0x144>)
     666:	61a3      	str	r3, [r4, #24]
	splashText[7]  = "10 PRINT CHR$(205.5+RND(1)); : GOTO 10";//
     668:	4b49      	ldr	r3, [pc, #292]	; (790 <splashScreen+0x148>)
     66a:	61e3      	str	r3, [r4, #28]
	splashText[8]  = "No gods. No masters. No external libraries.";//
     66c:	4b49      	ldr	r3, [pc, #292]	; (794 <splashScreen+0x14c>)
     66e:	6223      	str	r3, [r4, #32]
	splashText[9]  = "Kill Nazis";//
     670:	4b49      	ldr	r3, [pc, #292]	; (798 <splashScreen+0x150>)
     672:	6263      	str	r3, [r4, #36]	; 0x24
	splashText[10] = "Tiananmen Square 1989";//
     674:	4b49      	ldr	r3, [pc, #292]	; (79c <splashScreen+0x154>)
     676:	62a3      	str	r3, [r4, #40]	; 0x28
	splashText[11] = "America was founded on slavery";
     678:	4b49      	ldr	r3, [pc, #292]	; (7a0 <splashScreen+0x158>)
     67a:	62e3      	str	r3, [r4, #44]	; 0x2c
	splashText[12] = "There is only capital and labor";//
     67c:	4b49      	ldr	r3, [pc, #292]	; (7a4 <splashScreen+0x15c>)
     67e:	6323      	str	r3, [r4, #48]	; 0x30
	splashText[13] = "Encourage SYMMETRIC class warfare";//
     680:	4b49      	ldr	r3, [pc, #292]	; (7a8 <splashScreen+0x160>)
     682:	6363      	str	r3, [r4, #52]	; 0x34
	splashText[14] = "$CURRENT_MEME";//
     684:	4b49      	ldr	r3, [pc, #292]	; (7ac <splashScreen+0x164>)
     686:	63a3      	str	r3, [r4, #56]	; 0x38
	splashText[15] = "A Nice TTY";//
     688:	4b49      	ldr	r3, [pc, #292]	; (7b0 <splashScreen+0x168>)
     68a:	63e3      	str	r3, [r4, #60]	; 0x3c
	splashText[16] = "Unix epoch minus 0xFF days";//
     68c:	4b49      	ldr	r3, [pc, #292]	; (7b4 <splashScreen+0x16c>)
     68e:	6423      	str	r3, [r4, #64]	; 0x40
	splashText[17] = "i  = 0x5f3759df - ( i >> 1 );";//
     690:	4b49      	ldr	r3, [pc, #292]	; (7b8 <splashScreen+0x170>)
     692:	6463      	str	r3, [r4, #68]	; 0x44
	splashText[18] = "ACAB";//
     694:	4b49      	ldr	r3, [pc, #292]	; (7bc <splashScreen+0x174>)
     696:	64a3      	str	r3, [r4, #72]	; 0x48
	splashText[19] = "Defcon's canceled.";//
     698:	4b49      	ldr	r3, [pc, #292]	; (7c0 <splashScreen+0x178>)
     69a:	64e3      	str	r3, [r4, #76]	; 0x4c
	splashText[20] = "Ratsnest: Nothing To Do!";//
     69c:	4b49      	ldr	r3, [pc, #292]	; (7c4 <splashScreen+0x17c>)
     69e:	6523      	str	r3, [r4, #80]	; 0x50
	splashText[21] = "It has 69 keys.";//
     6a0:	4b49      	ldr	r3, [pc, #292]	; (7c8 <splashScreen+0x180>)
     6a2:	6563      	str	r3, [r4, #84]	; 0x54
	splashText[22] = "Because VT-420 was already taken";//
     6a4:	4b49      	ldr	r3, [pc, #292]	; (7cc <splashScreen+0x184>)
     6a6:	65a3      	str	r3, [r4, #88]	; 0x58
	splashText[23] = "Compression algorithm based on BBP (1997)";//
     6a8:	4b49      	ldr	r3, [pc, #292]	; (7d0 <splashScreen+0x188>)
     6aa:	65e3      	str	r3, [r4, #92]	; 0x5c
	splashText[24] = "Teach health insurance providers to code.";
     6ac:	4b49      	ldr	r3, [pc, #292]	; (7d4 <splashScreen+0x18c>)
     6ae:	6623      	str	r3, [r4, #96]	; 0x60
	splashText[25] = "Offensive hardware";//
     6b0:	4b49      	ldr	r3, [pc, #292]	; (7d8 <splashScreen+0x190>)
     6b2:	6663      	str	r3, [r4, #100]	; 0x64
	splashText[26] = "WiFi is not wireless Ethernet!";//
     6b4:	4b49      	ldr	r3, [pc, #292]	; (7dc <splashScreen+0x194>)
     6b6:	66a3      	str	r3, [r4, #104]	; 0x68
	splashText[27] = "Dummy thicc client";//
     6b8:	4b49      	ldr	r3, [pc, #292]	; (7e0 <splashScreen+0x198>)
     6ba:	66e3      	str	r3, [r4, #108]	; 0x6c
	splashText[28] = "A Nice TTY. An OK Computer.";//
     6bc:	4b49      	ldr	r3, [pc, #292]	; (7e4 <splashScreen+0x19c>)
     6be:	6723      	str	r3, [r4, #112]	; 0x70
	splashText[29] = "USTeledildonics";//
     6c0:	4b49      	ldr	r3, [pc, #292]	; (7e8 <splashScreen+0x1a0>)
     6c2:	6763      	str	r3, [r4, #116]	; 0x74
	splashText[30] = "Solidarity is not a new framework";//
     6c4:	4b49      	ldr	r3, [pc, #292]	; (7ec <splashScreen+0x1a4>)
     6c6:	67a3      	str	r3, [r4, #120]	; 0x78
	splashText[31] = "Breadboarding Is Not A Crime";//
     6c8:	4b49      	ldr	r3, [pc, #292]	; (7f0 <splashScreen+0x1a8>)
     6ca:	67e3      	str	r3, [r4, #124]	; 0x7c
	splashText[32] = "Off by one errors are common";
     6cc:	4a49      	ldr	r2, [pc, #292]	; (7f4 <splashScreen+0x1ac>)
     6ce:	2380      	movs	r3, #128	; 0x80
     6d0:	50e2      	str	r2, [r4, r3]
	
	const char *textPhrase = splashText[(((rand())%32))];
     6d2:	4b49      	ldr	r3, [pc, #292]	; (7f8 <splashScreen+0x1b0>)
     6d4:	4798      	blx	r3
     6d6:	17c3      	asrs	r3, r0, #31
     6d8:	0edb      	lsrs	r3, r3, #27
     6da:	18c2      	adds	r2, r0, r3
     6dc:	201f      	movs	r0, #31
     6de:	4010      	ands	r0, r2
     6e0:	1ac0      	subs	r0, r0, r3
     6e2:	0080      	lsls	r0, r0, #2
     6e4:	5904      	ldr	r4, [r0, r4]


	
	clearScreen();
     6e6:	4b45      	ldr	r3, [pc, #276]	; (7fc <splashScreen+0x1b4>)
     6e8:	4798      	blx	r3
	setColorRGB(255,255,255);
     6ea:	22ff      	movs	r2, #255	; 0xff
     6ec:	21ff      	movs	r1, #255	; 0xff
     6ee:	20ff      	movs	r0, #255	; 0xff
     6f0:	4b43      	ldr	r3, [pc, #268]	; (800 <splashScreen+0x1b8>)
     6f2:	4798      	blx	r3
	
	REG_PORT_DIRTGL1 = PORT_PB31;
     6f4:	2280      	movs	r2, #128	; 0x80
     6f6:	0612      	lsls	r2, r2, #24
     6f8:	4b42      	ldr	r3, [pc, #264]	; (804 <splashScreen+0x1bc>)
     6fa:	601a      	str	r2, [r3, #0]
	PORT->Group[1].PINCFG[31].bit.PULLEN = 1;
     6fc:	4b42      	ldr	r3, [pc, #264]	; (808 <splashScreen+0x1c0>)
     6fe:	22df      	movs	r2, #223	; 0xdf
     700:	5c99      	ldrb	r1, [r3, r2]
     702:	2004      	movs	r0, #4
     704:	4301      	orrs	r1, r0
     706:	5499      	strb	r1, [r3, r2]
	PORT->Group[1].PINCFG[31].bit.INEN = 1;
     708:	5c99      	ldrb	r1, [r3, r2]
     70a:	2002      	movs	r0, #2
     70c:	4301      	orrs	r1, r0
     70e:	5499      	strb	r1, [r3, r2]
	if((PORT->Group[1].IN.reg & PORT_PB31) != 0)
     710:	3a3f      	subs	r2, #63	; 0x3f
     712:	589b      	ldr	r3, [r3, r2]
     714:	2b00      	cmp	r3, #0
     716:	db26      	blt.n	766 <splashScreen+0x11e>
		//This is the 'pi' graphic; put some codes
		//here to handle setting up the uarts.
		drawKare(1);
	}
	else
	drawKare(0); //The normal graphic
     718:	2000      	movs	r0, #0
     71a:	4b3c      	ldr	r3, [pc, #240]	; (80c <splashScreen+0x1c4>)
     71c:	4798      	blx	r3
	

	
	xCharPos = 40 - (strlen(textPhrase)/2);
     71e:	0020      	movs	r0, r4
     720:	4b3b      	ldr	r3, [pc, #236]	; (810 <splashScreen+0x1c8>)
     722:	4798      	blx	r3
     724:	4e3b      	ldr	r6, [pc, #236]	; (814 <splashScreen+0x1cc>)
     726:	0840      	lsrs	r0, r0, #1
     728:	2328      	movs	r3, #40	; 0x28
     72a:	1a18      	subs	r0, r3, r0
     72c:	8030      	strh	r0, [r6, #0]
	yCharPos = 16;
     72e:	4d3a      	ldr	r5, [pc, #232]	; (818 <splashScreen+0x1d0>)
     730:	2310      	movs	r3, #16
     732:	802b      	strh	r3, [r5, #0]
	
	writeString(textPhrase);
     734:	0020      	movs	r0, r4
     736:	4b39      	ldr	r3, [pc, #228]	; (81c <splashScreen+0x1d4>)
     738:	4798      	blx	r3
	xCharPos = 40 - (strlen(versionLabel)/2);
	yCharPos = 18;
	
	writeString(versionLabel);
	*/
	delay_ms(2000);
     73a:	20fa      	movs	r0, #250	; 0xfa
     73c:	00c0      	lsls	r0, r0, #3
     73e:	4b38      	ldr	r3, [pc, #224]	; (820 <splashScreen+0x1d8>)
     740:	4798      	blx	r3
		
	clearScreen();
     742:	4b2e      	ldr	r3, [pc, #184]	; (7fc <splashScreen+0x1b4>)
     744:	4798      	blx	r3
	nullifyConsole();
     746:	4b37      	ldr	r3, [pc, #220]	; (824 <splashScreen+0x1dc>)
     748:	4798      	blx	r3
	
	setColorRGB(0,255,0);
     74a:	2200      	movs	r2, #0
     74c:	21ff      	movs	r1, #255	; 0xff
     74e:	2000      	movs	r0, #0
     750:	4b2b      	ldr	r3, [pc, #172]	; (800 <splashScreen+0x1b8>)
     752:	4798      	blx	r3
	setBackColorRGB(0,0,0);
     754:	2200      	movs	r2, #0
     756:	2100      	movs	r1, #0
     758:	2000      	movs	r0, #0
     75a:	4b33      	ldr	r3, [pc, #204]	; (828 <splashScreen+0x1e0>)
     75c:	4798      	blx	r3
	
	//Setting the xChar and yChar position has to come
	//after splashScreen() and InitLCD();
	xCharPos = 0;
     75e:	2300      	movs	r3, #0
     760:	8033      	strh	r3, [r6, #0]
	yCharPos = 0;
     762:	802b      	strh	r3, [r5, #0]
	

     764:	bd70      	pop	{r4, r5, r6, pc}
		drawKare(1);
     766:	2001      	movs	r0, #1
     768:	4b28      	ldr	r3, [pc, #160]	; (80c <splashScreen+0x1c4>)
     76a:	4798      	blx	r3
     76c:	e7d7      	b.n	71e <splashScreen+0xd6>
     76e:	46c0      	nop			; (mov r8, r8)
     770:	200001e4 	.word	0x200001e4
     774:	00004d18 	.word	0x00004d18
     778:	00004d38 	.word	0x00004d38
     77c:	00004d4c 	.word	0x00004d4c
     780:	00004d64 	.word	0x00004d64
     784:	00004d74 	.word	0x00004d74
     788:	00004d7c 	.word	0x00004d7c
     78c:	00004da4 	.word	0x00004da4
     790:	00004dd0 	.word	0x00004dd0
     794:	00004df8 	.word	0x00004df8
     798:	00004e24 	.word	0x00004e24
     79c:	00004e30 	.word	0x00004e30
     7a0:	00004e48 	.word	0x00004e48
     7a4:	00004e68 	.word	0x00004e68
     7a8:	00004e88 	.word	0x00004e88
     7ac:	00004eac 	.word	0x00004eac
     7b0:	00004ebc 	.word	0x00004ebc
     7b4:	00004ec8 	.word	0x00004ec8
     7b8:	00004ee4 	.word	0x00004ee4
     7bc:	00004f04 	.word	0x00004f04
     7c0:	00004f0c 	.word	0x00004f0c
     7c4:	00004f20 	.word	0x00004f20
     7c8:	00004f3c 	.word	0x00004f3c
     7cc:	00004f4c 	.word	0x00004f4c
     7d0:	00004f70 	.word	0x00004f70
     7d4:	00004f9c 	.word	0x00004f9c
     7d8:	00004fc8 	.word	0x00004fc8
     7dc:	00004fdc 	.word	0x00004fdc
     7e0:	00004ffc 	.word	0x00004ffc
     7e4:	00005010 	.word	0x00005010
     7e8:	0000502c 	.word	0x0000502c
     7ec:	0000503c 	.word	0x0000503c
     7f0:	00005060 	.word	0x00005060
     7f4:	00005080 	.word	0x00005080
     7f8:	00003b99 	.word	0x00003b99
     7fc:	00002e91 	.word	0x00002e91
     800:	00002c85 	.word	0x00002c85
     804:	4100448c 	.word	0x4100448c
     808:	41004400 	.word	0x41004400
     80c:	00000579 	.word	0x00000579
     810:	00003da1 	.word	0x00003da1
     814:	200002a4 	.word	0x200002a4
     818:	200002a6 	.word	0x200002a6
     81c:	00002569 	.word	0x00002569
     820:	000008c1 	.word	0x000008c1
     824:	000025b1 	.word	0x000025b1
     828:	00002cad 	.word	0x00002cad

0000082c <parseRXBuffer>:
char tempCharacter;

cbuf_handle_t ouroboros;	

void parseRXBuffer(void)
{
     82c:	b5f0      	push	{r4, r5, r6, r7, lr}
     82e:	b083      	sub	sp, #12
		while(!ring_empty(ouroboros))
     830:	4e0b      	ldr	r6, [pc, #44]	; (860 <parseRXBuffer+0x34>)
     832:	4d0c      	ldr	r5, [pc, #48]	; (864 <parseRXBuffer+0x38>)
		{
			uint8_t characterFromRingBuffer;
			ring_get(ouroboros, &characterFromRingBuffer);
     834:	0037      	movs	r7, r6
		while(!ring_empty(ouroboros))
     836:	e008      	b.n	84a <parseRXBuffer+0x1e>
			ring_get(ouroboros, &characterFromRingBuffer);
     838:	466b      	mov	r3, sp
     83a:	1ddc      	adds	r4, r3, #7
     83c:	0021      	movs	r1, r4
     83e:	6838      	ldr	r0, [r7, #0]
     840:	4b09      	ldr	r3, [pc, #36]	; (868 <parseRXBuffer+0x3c>)
     842:	4798      	blx	r3
			parseChar(characterFromRingBuffer);
     844:	7820      	ldrb	r0, [r4, #0]
     846:	4b09      	ldr	r3, [pc, #36]	; (86c <parseRXBuffer+0x40>)
     848:	4798      	blx	r3
		while(!ring_empty(ouroboros))
     84a:	6830      	ldr	r0, [r6, #0]
     84c:	47a8      	blx	r5
     84e:	2800      	cmp	r0, #0
     850:	d0f2      	beq.n	838 <parseRXBuffer+0xc>
		
		}
		ring_reset(ouroboros);
     852:	4b03      	ldr	r3, [pc, #12]	; (860 <parseRXBuffer+0x34>)
     854:	6818      	ldr	r0, [r3, #0]
     856:	4b06      	ldr	r3, [pc, #24]	; (870 <parseRXBuffer+0x44>)
     858:	4798      	blx	r3
}
     85a:	b003      	add	sp, #12
     85c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     85e:	46c0      	nop			; (mov r8, r8)
     860:	200002c0 	.word	0x200002c0
     864:	0000017d 	.word	0x0000017d
     868:	00000195 	.word	0x00000195
     86c:	00000551 	.word	0x00000551
     870:	00000135 	.word	0x00000135

00000874 <sendChar>:

void sendChar(char character)
{
     874:	b510      	push	{r4, lr}
	printf("%c", character);
     876:	4b01      	ldr	r3, [pc, #4]	; (87c <sendChar+0x8>)
     878:	4798      	blx	r3
     87a:	bd10      	pop	{r4, pc}
     87c:	00003b15 	.word	0x00003b15

00000880 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     880:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     882:	2000      	movs	r0, #0
     884:	4b08      	ldr	r3, [pc, #32]	; (8a8 <delay_init+0x28>)
     886:	4798      	blx	r3
     888:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     88a:	4c08      	ldr	r4, [pc, #32]	; (8ac <delay_init+0x2c>)
     88c:	21fa      	movs	r1, #250	; 0xfa
     88e:	0089      	lsls	r1, r1, #2
     890:	47a0      	blx	r4
     892:	4b07      	ldr	r3, [pc, #28]	; (8b0 <delay_init+0x30>)
     894:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     896:	4907      	ldr	r1, [pc, #28]	; (8b4 <delay_init+0x34>)
     898:	0028      	movs	r0, r5
     89a:	47a0      	blx	r4
     89c:	4b06      	ldr	r3, [pc, #24]	; (8b8 <delay_init+0x38>)
     89e:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     8a0:	2205      	movs	r2, #5
     8a2:	4b06      	ldr	r3, [pc, #24]	; (8bc <delay_init+0x3c>)
     8a4:	601a      	str	r2, [r3, #0]
}
     8a6:	bd70      	pop	{r4, r5, r6, pc}
     8a8:	00001e41 	.word	0x00001e41
     8ac:	000035d1 	.word	0x000035d1
     8b0:	20000000 	.word	0x20000000
     8b4:	000f4240 	.word	0x000f4240
     8b8:	20000004 	.word	0x20000004
     8bc:	e000e010 	.word	0xe000e010

000008c0 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     8c0:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     8c2:	4b08      	ldr	r3, [pc, #32]	; (8e4 <delay_cycles_ms+0x24>)
     8c4:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     8c6:	4a08      	ldr	r2, [pc, #32]	; (8e8 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     8c8:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     8ca:	2180      	movs	r1, #128	; 0x80
     8cc:	0249      	lsls	r1, r1, #9
	while (n--) {
     8ce:	3801      	subs	r0, #1
     8d0:	d307      	bcc.n	8e2 <delay_cycles_ms+0x22>
	if (n > 0) {
     8d2:	2c00      	cmp	r4, #0
     8d4:	d0fb      	beq.n	8ce <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     8d6:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     8d8:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     8da:	6813      	ldr	r3, [r2, #0]
     8dc:	420b      	tst	r3, r1
     8de:	d0fc      	beq.n	8da <delay_cycles_ms+0x1a>
     8e0:	e7f5      	b.n	8ce <delay_cycles_ms+0xe>
	}
}
     8e2:	bd30      	pop	{r4, r5, pc}
     8e4:	20000000 	.word	0x20000000
     8e8:	e000e010 	.word	0xe000e010

000008ec <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     8ec:	4b0c      	ldr	r3, [pc, #48]	; (920 <cpu_irq_enter_critical+0x34>)
     8ee:	681b      	ldr	r3, [r3, #0]
     8f0:	2b00      	cmp	r3, #0
     8f2:	d106      	bne.n	902 <cpu_irq_enter_critical+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     8f4:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     8f8:	2b00      	cmp	r3, #0
     8fa:	d007      	beq.n	90c <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     8fc:	2200      	movs	r2, #0
     8fe:	4b09      	ldr	r3, [pc, #36]	; (924 <cpu_irq_enter_critical+0x38>)
     900:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     902:	4a07      	ldr	r2, [pc, #28]	; (920 <cpu_irq_enter_critical+0x34>)
     904:	6813      	ldr	r3, [r2, #0]
     906:	3301      	adds	r3, #1
     908:	6013      	str	r3, [r2, #0]
}
     90a:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     90c:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     90e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     912:	2200      	movs	r2, #0
     914:	4b04      	ldr	r3, [pc, #16]	; (928 <cpu_irq_enter_critical+0x3c>)
     916:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     918:	3201      	adds	r2, #1
     91a:	4b02      	ldr	r3, [pc, #8]	; (924 <cpu_irq_enter_critical+0x38>)
     91c:	701a      	strb	r2, [r3, #0]
     91e:	e7f0      	b.n	902 <cpu_irq_enter_critical+0x16>
     920:	20000264 	.word	0x20000264
     924:	20000268 	.word	0x20000268
     928:	20000008 	.word	0x20000008

0000092c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     92c:	4b08      	ldr	r3, [pc, #32]	; (950 <cpu_irq_leave_critical+0x24>)
     92e:	681a      	ldr	r2, [r3, #0]
     930:	3a01      	subs	r2, #1
     932:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     934:	681b      	ldr	r3, [r3, #0]
     936:	2b00      	cmp	r3, #0
     938:	d109      	bne.n	94e <cpu_irq_leave_critical+0x22>
     93a:	4b06      	ldr	r3, [pc, #24]	; (954 <cpu_irq_leave_critical+0x28>)
     93c:	781b      	ldrb	r3, [r3, #0]
     93e:	2b00      	cmp	r3, #0
     940:	d005      	beq.n	94e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     942:	2201      	movs	r2, #1
     944:	4b04      	ldr	r3, [pc, #16]	; (958 <cpu_irq_leave_critical+0x2c>)
     946:	701a      	strb	r2, [r3, #0]
     948:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     94c:	b662      	cpsie	i
	}
}
     94e:	4770      	bx	lr
     950:	20000264 	.word	0x20000264
     954:	20000268 	.word	0x20000268
     958:	20000008 	.word	0x20000008

0000095c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     95c:	b5f0      	push	{r4, r5, r6, r7, lr}
     95e:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     960:	ac01      	add	r4, sp, #4
     962:	2501      	movs	r5, #1
     964:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     966:	2700      	movs	r7, #0
     968:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     96a:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     96c:	0021      	movs	r1, r4
     96e:	203e      	movs	r0, #62	; 0x3e
     970:	4e06      	ldr	r6, [pc, #24]	; (98c <system_board_init+0x30>)
     972:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     974:	2280      	movs	r2, #128	; 0x80
     976:	05d2      	lsls	r2, r2, #23
     978:	4b05      	ldr	r3, [pc, #20]	; (990 <system_board_init+0x34>)
     97a:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     97c:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     97e:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     980:	0021      	movs	r1, r4
     982:	200f      	movs	r0, #15
     984:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
     986:	b003      	add	sp, #12
     988:	bdf0      	pop	{r4, r5, r6, r7, pc}
     98a:	46c0      	nop			; (mov r8, r8)
     98c:	00000ec5 	.word	0x00000ec5
     990:	41004480 	.word	0x41004480

00000994 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     994:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     996:	2200      	movs	r2, #0
     998:	2300      	movs	r3, #0
     99a:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
     99c:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
     99e:	2100      	movs	r1, #0
     9a0:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     9a2:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     9a4:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
     9a6:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
     9a8:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
     9aa:	6082      	str	r2, [r0, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	//config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
     9ac:	24c0      	movs	r4, #192	; 0xc0
     9ae:	0164      	lsls	r4, r4, #5
     9b0:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     9b2:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     9b4:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
     9b6:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
     9b8:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
     9ba:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     9bc:	242a      	movs	r4, #42	; 0x2a
     9be:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
     9c0:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
     9c2:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
     9c4:	3c06      	subs	r4, #6
     9c6:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     9c8:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     9ca:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
     9cc:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
     9ce:	232b      	movs	r3, #43	; 0x2b
     9d0:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
     9d2:	3301      	adds	r3, #1
     9d4:	54c1      	strb	r1, [r0, r3]
}
     9d6:	bd10      	pop	{r4, pc}

000009d8 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     9d8:	b5f0      	push	{r4, r5, r6, r7, lr}
     9da:	46d6      	mov	lr, sl
     9dc:	464f      	mov	r7, r9
     9de:	4646      	mov	r6, r8
     9e0:	b5c0      	push	{r6, r7, lr}
     9e2:	b096      	sub	sp, #88	; 0x58
     9e4:	0007      	movs	r7, r0
     9e6:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     9e8:	6001      	str	r1, [r0, #0]
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     9ea:	4ac6      	ldr	r2, [pc, #792]	; (d04 <adc_init+0x32c>)
     9ec:	6a10      	ldr	r0, [r2, #32]
     9ee:	2380      	movs	r3, #128	; 0x80
     9f0:	025b      	lsls	r3, r3, #9
     9f2:	4303      	orrs	r3, r0
     9f4:	6213      	str	r3, [r2, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     9f6:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     9f8:	2005      	movs	r0, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     9fa:	07db      	lsls	r3, r3, #31
     9fc:	d505      	bpl.n	a0a <adc_init+0x32>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
     9fe:	b016      	add	sp, #88	; 0x58
     a00:	bc1c      	pop	{r2, r3, r4}
     a02:	4690      	mov	r8, r2
     a04:	4699      	mov	r9, r3
     a06:	46a2      	mov	sl, r4
     a08:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     a0a:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
     a0c:	3017      	adds	r0, #23
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     a0e:	079b      	lsls	r3, r3, #30
     a10:	d4f5      	bmi.n	9fe <adc_init+0x26>
	module_inst->reference = config->reference;
     a12:	7873      	ldrb	r3, [r6, #1]
     a14:	713b      	strb	r3, [r7, #4]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
     a16:	2b00      	cmp	r3, #0
     a18:	d104      	bne.n	a24 <adc_init+0x4c>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
     a1a:	4abb      	ldr	r2, [pc, #748]	; (d08 <adc_init+0x330>)
     a1c:	6c13      	ldr	r3, [r2, #64]	; 0x40
     a1e:	2104      	movs	r1, #4
     a20:	430b      	orrs	r3, r1
     a22:	6413      	str	r3, [r2, #64]	; 0x40
		module_inst->callback[i] = NULL;
     a24:	2300      	movs	r3, #0
     a26:	60bb      	str	r3, [r7, #8]
     a28:	60fb      	str	r3, [r7, #12]
     a2a:	613b      	str	r3, [r7, #16]
	module_inst->registered_callback_mask = 0;
     a2c:	76bb      	strb	r3, [r7, #26]
	module_inst->enabled_callback_mask = 0;
     a2e:	76fb      	strb	r3, [r7, #27]
	module_inst->remaining_conversions = 0;
     a30:	833b      	strh	r3, [r7, #24]
	module_inst->job_status = STATUS_OK;
     a32:	773b      	strb	r3, [r7, #28]
	_adc_instances[0] = module_inst;
     a34:	4bb5      	ldr	r3, [pc, #724]	; (d0c <adc_init+0x334>)
     a36:	601f      	str	r7, [r3, #0]
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
     a38:	232a      	movs	r3, #42	; 0x2a
     a3a:	5cf3      	ldrb	r3, [r6, r3]
     a3c:	2b00      	cmp	r3, #0
     a3e:	d105      	bne.n	a4c <adc_init+0x74>
     a40:	7d33      	ldrb	r3, [r6, #20]
     a42:	2b00      	cmp	r3, #0
     a44:	d102      	bne.n	a4c <adc_init+0x74>
		module_inst->software_trigger = true;
     a46:	3301      	adds	r3, #1
     a48:	777b      	strb	r3, [r7, #29]
     a4a:	e001      	b.n	a50 <adc_init+0x78>
		module_inst->software_trigger = false;
     a4c:	2300      	movs	r3, #0
     a4e:	777b      	strb	r3, [r7, #29]
	Adc *const adc_module = module_inst->hw;
     a50:	683b      	ldr	r3, [r7, #0]
     a52:	4698      	mov	r8, r3
	gclk_chan_conf.source_generator = config->clock_source;
     a54:	7833      	ldrb	r3, [r6, #0]
     a56:	466a      	mov	r2, sp
     a58:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
     a5a:	4669      	mov	r1, sp
     a5c:	201e      	movs	r0, #30
     a5e:	4bac      	ldr	r3, [pc, #688]	; (d10 <adc_init+0x338>)
     a60:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
     a62:	201e      	movs	r0, #30
     a64:	4bab      	ldr	r3, [pc, #684]	; (d14 <adc_init+0x33c>)
     a66:	4798      	blx	r3
	if (config->pin_scan.inputs_to_scan != 0) {
     a68:	232c      	movs	r3, #44	; 0x2c
     a6a:	5cf2      	ldrb	r2, [r6, r3]
     a6c:	2a00      	cmp	r2, #0
     a6e:	d054      	beq.n	b1a <adc_init+0x142>
		uint8_t offset = config->pin_scan.offset_start_scan;
     a70:	3b01      	subs	r3, #1
     a72:	5cf5      	ldrb	r5, [r6, r3]
		uint8_t start_pin =
     a74:	7b33      	ldrb	r3, [r6, #12]
     a76:	18eb      	adds	r3, r5, r3
     a78:	b2db      	uxtb	r3, r3
		uint8_t end_pin =
     a7a:	18d1      	adds	r1, r2, r3
		while (start_pin < end_pin) {
     a7c:	b2c9      	uxtb	r1, r1
     a7e:	428b      	cmp	r3, r1
     a80:	d221      	bcs.n	ac6 <adc_init+0xee>
     a82:	1952      	adds	r2, r2, r5
     a84:	b2d3      	uxtb	r3, r2
     a86:	4699      	mov	r9, r3
	const uint32_t pinmapping[] = {
     a88:	4ba3      	ldr	r3, [pc, #652]	; (d18 <adc_init+0x340>)
     a8a:	469a      	mov	sl, r3
     a8c:	e003      	b.n	a96 <adc_init+0xbe>
			offset++;
     a8e:	3501      	adds	r5, #1
     a90:	b2ed      	uxtb	r5, r5
		while (start_pin < end_pin) {
     a92:	454d      	cmp	r5, r9
     a94:	d017      	beq.n	ac6 <adc_init+0xee>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
     a96:	240f      	movs	r4, #15
     a98:	402c      	ands	r4, r5
     a9a:	7b33      	ldrb	r3, [r6, #12]
     a9c:	18e4      	adds	r4, r4, r3
	const uint32_t pinmapping[] = {
     a9e:	2250      	movs	r2, #80	; 0x50
     aa0:	499e      	ldr	r1, [pc, #632]	; (d1c <adc_init+0x344>)
     aa2:	a802      	add	r0, sp, #8
     aa4:	47d0      	blx	sl
	if (pin <= ADC_EXTCHANNEL_MSB) {
     aa6:	2c13      	cmp	r4, #19
     aa8:	d8f1      	bhi.n	a8e <adc_init+0xb6>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     aaa:	00a4      	lsls	r4, r4, #2
     aac:	ab02      	add	r3, sp, #8
     aae:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     ab0:	a901      	add	r1, sp, #4
     ab2:	2300      	movs	r3, #0
     ab4:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     ab6:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     ab8:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     aba:	3301      	adds	r3, #1
     abc:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     abe:	b2c0      	uxtb	r0, r0
     ac0:	4b97      	ldr	r3, [pc, #604]	; (d20 <adc_init+0x348>)
     ac2:	4798      	blx	r3
     ac4:	e7e3      	b.n	a8e <adc_init+0xb6>
		_adc_configure_ain_pin(config->negative_input);
     ac6:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     ac8:	2250      	movs	r2, #80	; 0x50
     aca:	4994      	ldr	r1, [pc, #592]	; (d1c <adc_init+0x344>)
     acc:	a802      	add	r0, sp, #8
     ace:	4b92      	ldr	r3, [pc, #584]	; (d18 <adc_init+0x340>)
     ad0:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     ad2:	2c13      	cmp	r4, #19
     ad4:	d913      	bls.n	afe <adc_init+0x126>
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
     ad6:	7d73      	ldrb	r3, [r6, #21]
     ad8:	009b      	lsls	r3, r3, #2
     ada:	b2db      	uxtb	r3, r3
     adc:	4642      	mov	r2, r8
     ade:	7013      	strb	r3, [r2, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     ae0:	7db3      	ldrb	r3, [r6, #22]
     ae2:	01db      	lsls	r3, r3, #7
     ae4:	7872      	ldrb	r2, [r6, #1]
     ae6:	4313      	orrs	r3, r2
     ae8:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
     aea:	4642      	mov	r2, r8
     aec:	7053      	strb	r3, [r2, #1]
	switch (config->resolution) {
     aee:	7933      	ldrb	r3, [r6, #4]
     af0:	2b34      	cmp	r3, #52	; 0x34
     af2:	d900      	bls.n	af6 <adc_init+0x11e>
     af4:	e17b      	b.n	dee <adc_init+0x416>
     af6:	009b      	lsls	r3, r3, #2
     af8:	4a8a      	ldr	r2, [pc, #552]	; (d24 <adc_init+0x34c>)
     afa:	58d3      	ldr	r3, [r2, r3]
     afc:	469f      	mov	pc, r3
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     afe:	00a4      	lsls	r4, r4, #2
     b00:	ab02      	add	r3, sp, #8
     b02:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     b04:	a901      	add	r1, sp, #4
     b06:	2300      	movs	r3, #0
     b08:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     b0a:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     b0c:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     b0e:	3301      	adds	r3, #1
     b10:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     b12:	b2c0      	uxtb	r0, r0
     b14:	4b82      	ldr	r3, [pc, #520]	; (d20 <adc_init+0x348>)
     b16:	4798      	blx	r3
     b18:	e7dd      	b.n	ad6 <adc_init+0xfe>
		_adc_configure_ain_pin(config->positive_input);
     b1a:	7b34      	ldrb	r4, [r6, #12]
	const uint32_t pinmapping[] = {
     b1c:	2250      	movs	r2, #80	; 0x50
     b1e:	497f      	ldr	r1, [pc, #508]	; (d1c <adc_init+0x344>)
     b20:	a802      	add	r0, sp, #8
     b22:	4b7d      	ldr	r3, [pc, #500]	; (d18 <adc_init+0x340>)
     b24:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     b26:	2c13      	cmp	r4, #19
     b28:	d915      	bls.n	b56 <adc_init+0x17e>
		_adc_configure_ain_pin(config->negative_input);
     b2a:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     b2c:	2250      	movs	r2, #80	; 0x50
     b2e:	497b      	ldr	r1, [pc, #492]	; (d1c <adc_init+0x344>)
     b30:	a802      	add	r0, sp, #8
     b32:	4b79      	ldr	r3, [pc, #484]	; (d18 <adc_init+0x340>)
     b34:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     b36:	2c13      	cmp	r4, #19
     b38:	d8cd      	bhi.n	ad6 <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     b3a:	00a4      	lsls	r4, r4, #2
     b3c:	ab02      	add	r3, sp, #8
     b3e:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     b40:	a901      	add	r1, sp, #4
     b42:	2300      	movs	r3, #0
     b44:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     b46:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     b48:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     b4a:	3301      	adds	r3, #1
     b4c:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     b4e:	b2c0      	uxtb	r0, r0
     b50:	4b73      	ldr	r3, [pc, #460]	; (d20 <adc_init+0x348>)
     b52:	4798      	blx	r3
     b54:	e7bf      	b.n	ad6 <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     b56:	00a4      	lsls	r4, r4, #2
     b58:	ab02      	add	r3, sp, #8
     b5a:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     b5c:	a901      	add	r1, sp, #4
     b5e:	2300      	movs	r3, #0
     b60:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     b62:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     b64:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     b66:	3301      	adds	r3, #1
     b68:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     b6a:	b2c0      	uxtb	r0, r0
     b6c:	4b6c      	ldr	r3, [pc, #432]	; (d20 <adc_init+0x348>)
     b6e:	4798      	blx	r3
     b70:	e7db      	b.n	b2a <adc_init+0x152>
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     b72:	2304      	movs	r3, #4
		resolution = ADC_RESOLUTION_16BIT;
     b74:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_4;
     b76:	2102      	movs	r1, #2
     b78:	e01a      	b.n	bb0 <adc_init+0x1d8>
		adjres = config->divide_result;
     b7a:	7c71      	ldrb	r1, [r6, #17]
		accumulate = config->accumulate_samples;
     b7c:	7c33      	ldrb	r3, [r6, #16]
		resolution = ADC_RESOLUTION_16BIT;
     b7e:	2410      	movs	r4, #16
     b80:	e016      	b.n	bb0 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     b82:	2306      	movs	r3, #6
		resolution = ADC_RESOLUTION_16BIT;
     b84:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     b86:	2101      	movs	r1, #1
     b88:	e012      	b.n	bb0 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     b8a:	2308      	movs	r3, #8
		resolution = ADC_RESOLUTION_16BIT;
     b8c:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     b8e:	2100      	movs	r1, #0
     b90:	e00e      	b.n	bb0 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     b92:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_8BIT;
     b94:	2430      	movs	r4, #48	; 0x30
	uint8_t adjres = 0;
     b96:	2100      	movs	r1, #0
     b98:	e00a      	b.n	bb0 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     b9a:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_10BIT;
     b9c:	2420      	movs	r4, #32
	uint8_t adjres = 0;
     b9e:	2100      	movs	r1, #0
     ba0:	e006      	b.n	bb0 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     ba2:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_12BIT;
     ba4:	2400      	movs	r4, #0
	uint8_t adjres = 0;
     ba6:	2100      	movs	r1, #0
     ba8:	e002      	b.n	bb0 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     baa:	2302      	movs	r3, #2
		resolution = ADC_RESOLUTION_16BIT;
     bac:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     bae:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     bb0:	0109      	lsls	r1, r1, #4
     bb2:	2270      	movs	r2, #112	; 0x70
     bb4:	400a      	ands	r2, r1
     bb6:	4313      	orrs	r3, r2
     bb8:	4642      	mov	r2, r8
     bba:	7093      	strb	r3, [r2, #2]
	if (config->sample_length > 63) {
     bbc:	7df3      	ldrb	r3, [r6, #23]
		return STATUS_ERR_INVALID_ARG;
     bbe:	2017      	movs	r0, #23
	if (config->sample_length > 63) {
     bc0:	2b3f      	cmp	r3, #63	; 0x3f
     bc2:	d900      	bls.n	bc6 <adc_init+0x1ee>
     bc4:	e71b      	b.n	9fe <adc_init+0x26>
		adc_module->SAMPCTRL.reg =
     bc6:	70d3      	strb	r3, [r2, #3]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     bc8:	683a      	ldr	r2, [r7, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     bca:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     bcc:	b25b      	sxtb	r3, r3
     bce:	2b00      	cmp	r3, #0
     bd0:	dbfb      	blt.n	bca <adc_init+0x1f2>
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
     bd2:	7cf3      	ldrb	r3, [r6, #19]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     bd4:	8872      	ldrh	r2, [r6, #2]
     bd6:	4313      	orrs	r3, r2
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     bd8:	2224      	movs	r2, #36	; 0x24
     bda:	5cb2      	ldrb	r2, [r6, r2]
     bdc:	00d2      	lsls	r2, r2, #3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     bde:	4313      	orrs	r3, r2
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
     be0:	7d32      	ldrb	r2, [r6, #20]
     be2:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     be4:	4313      	orrs	r3, r2
     be6:	7cb2      	ldrb	r2, [r6, #18]
     be8:	0052      	lsls	r2, r2, #1
     bea:	4313      	orrs	r3, r2
     bec:	4323      	orrs	r3, r4
	adc_module->CTRLB.reg =
     bee:	4642      	mov	r2, r8
     bf0:	8093      	strh	r3, [r2, #4]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     bf2:	7e33      	ldrb	r3, [r6, #24]
     bf4:	2b00      	cmp	r3, #0
     bf6:	d020      	beq.n	c3a <adc_init+0x262>
		switch (resolution) {
     bf8:	2c10      	cmp	r4, #16
     bfa:	d100      	bne.n	bfe <adc_init+0x226>
     bfc:	e0d9      	b.n	db2 <adc_init+0x3da>
     bfe:	d800      	bhi.n	c02 <adc_init+0x22a>
     c00:	e098      	b.n	d34 <adc_init+0x35c>
     c02:	2c20      	cmp	r4, #32
     c04:	d100      	bne.n	c08 <adc_init+0x230>
     c06:	e0b6      	b.n	d76 <adc_init+0x39e>
     c08:	2c30      	cmp	r4, #48	; 0x30
     c0a:	d116      	bne.n	c3a <adc_init+0x262>
			if (config->differential_mode &&
     c0c:	7cf2      	ldrb	r2, [r6, #19]
     c0e:	2a00      	cmp	r2, #0
     c10:	d00a      	beq.n	c28 <adc_init+0x250>
					(config->window.window_lower_value > 127 ||
     c12:	69f2      	ldr	r2, [r6, #28]
     c14:	3280      	adds	r2, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
     c16:	2017      	movs	r0, #23
			if (config->differential_mode &&
     c18:	2aff      	cmp	r2, #255	; 0xff
     c1a:	d900      	bls.n	c1e <adc_init+0x246>
     c1c:	e6ef      	b.n	9fe <adc_init+0x26>
					config->window.window_lower_value < -128 ||
     c1e:	6a32      	ldr	r2, [r6, #32]
     c20:	3280      	adds	r2, #128	; 0x80
     c22:	2aff      	cmp	r2, #255	; 0xff
     c24:	d900      	bls.n	c28 <adc_init+0x250>
     c26:	e6ea      	b.n	9fe <adc_init+0x26>
				return STATUS_ERR_INVALID_ARG;
     c28:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 255 ||
     c2a:	69f2      	ldr	r2, [r6, #28]
     c2c:	2aff      	cmp	r2, #255	; 0xff
     c2e:	dd00      	ble.n	c32 <adc_init+0x25a>
     c30:	e6e5      	b.n	9fe <adc_init+0x26>
     c32:	6a32      	ldr	r2, [r6, #32]
     c34:	2aff      	cmp	r2, #255	; 0xff
     c36:	dd00      	ble.n	c3a <adc_init+0x262>
     c38:	e6e1      	b.n	9fe <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     c3a:	6839      	ldr	r1, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     c3c:	7e4a      	ldrb	r2, [r1, #25]
	while (adc_is_syncing(module_inst)) {
     c3e:	b252      	sxtb	r2, r2
     c40:	2a00      	cmp	r2, #0
     c42:	dbfb      	blt.n	c3c <adc_init+0x264>
	adc_module->WINCTRL.reg = config->window.window_mode;
     c44:	4642      	mov	r2, r8
     c46:	7213      	strb	r3, [r2, #8]
	Adc *const adc_module = module_inst->hw;
     c48:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     c4a:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     c4c:	b25b      	sxtb	r3, r3
     c4e:	2b00      	cmp	r3, #0
     c50:	dbfb      	blt.n	c4a <adc_init+0x272>
	adc_module->WINLT.reg =
     c52:	8bb3      	ldrh	r3, [r6, #28]
     c54:	4642      	mov	r2, r8
     c56:	8393      	strh	r3, [r2, #28]
	Adc *const adc_module = module_inst->hw;
     c58:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     c5a:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     c5c:	b25b      	sxtb	r3, r3
     c5e:	2b00      	cmp	r3, #0
     c60:	dbfb      	blt.n	c5a <adc_init+0x282>
	adc_module->WINUT.reg = config->window.window_upper_value <<
     c62:	8c33      	ldrh	r3, [r6, #32]
     c64:	4642      	mov	r2, r8
     c66:	8413      	strh	r3, [r2, #32]
	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
     c68:	232c      	movs	r3, #44	; 0x2c
     c6a:	5cf3      	ldrb	r3, [r6, r3]
	if (inputs_to_scan > 0) {
     c6c:	2b00      	cmp	r3, #0
     c6e:	d005      	beq.n	c7c <adc_init+0x2a4>
		inputs_to_scan--;
     c70:	3b01      	subs	r3, #1
     c72:	b2db      	uxtb	r3, r3
		return STATUS_ERR_INVALID_ARG;
     c74:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     c76:	2b0f      	cmp	r3, #15
     c78:	d900      	bls.n	c7c <adc_init+0x2a4>
     c7a:	e6c0      	b.n	9fe <adc_init+0x26>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
     c7c:	222b      	movs	r2, #43	; 0x2b
     c7e:	5cb1      	ldrb	r1, [r6, r2]
		return STATUS_ERR_INVALID_ARG;
     c80:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     c82:	290f      	cmp	r1, #15
     c84:	d900      	bls.n	c88 <adc_init+0x2b0>
     c86:	e6ba      	b.n	9fe <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     c88:	6838      	ldr	r0, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     c8a:	7e42      	ldrb	r2, [r0, #25]
	while (adc_is_syncing(module_inst)) {
     c8c:	b252      	sxtb	r2, r2
     c8e:	2a00      	cmp	r2, #0
     c90:	dbfb      	blt.n	c8a <adc_init+0x2b2>
			config->negative_input |
     c92:	89f2      	ldrh	r2, [r6, #14]
			config->positive_input;
     c94:	7b30      	ldrb	r0, [r6, #12]
			config->negative_input |
     c96:	4302      	orrs	r2, r0
     c98:	68b0      	ldr	r0, [r6, #8]
     c9a:	4302      	orrs	r2, r0
			(config->pin_scan.offset_start_scan <<
     c9c:	0509      	lsls	r1, r1, #20
			config->negative_input |
     c9e:	430a      	orrs	r2, r1
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     ca0:	041b      	lsls	r3, r3, #16
			config->negative_input |
     ca2:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
     ca4:	4642      	mov	r2, r8
     ca6:	6113      	str	r3, [r2, #16]
	adc_module->EVCTRL.reg = config->event_action;
     ca8:	232a      	movs	r3, #42	; 0x2a
     caa:	5cf3      	ldrb	r3, [r6, r3]
     cac:	7513      	strb	r3, [r2, #20]
	adc_module->INTENCLR.reg =
     cae:	230f      	movs	r3, #15
     cb0:	7593      	strb	r3, [r2, #22]
	if (config->correction.correction_enable){
     cb2:	3315      	adds	r3, #21
     cb4:	5cf3      	ldrb	r3, [r6, r3]
     cb6:	2b00      	cmp	r3, #0
     cb8:	d012      	beq.n	ce0 <adc_init+0x308>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     cba:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
     cbc:	4a1a      	ldr	r2, [pc, #104]	; (d28 <adc_init+0x350>)
			return STATUS_ERR_INVALID_ARG;
     cbe:	2017      	movs	r0, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     cc0:	4293      	cmp	r3, r2
     cc2:	d900      	bls.n	cc6 <adc_init+0x2ee>
     cc4:	e69b      	b.n	9fe <adc_init+0x26>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     cc6:	4642      	mov	r2, r8
     cc8:	8493      	strh	r3, [r2, #36]	; 0x24
		if (config->correction.offset_correction > 2047 ||
     cca:	8d32      	ldrh	r2, [r6, #40]	; 0x28
     ccc:	2380      	movs	r3, #128	; 0x80
     cce:	011b      	lsls	r3, r3, #4
     cd0:	18d3      	adds	r3, r2, r3
     cd2:	4915      	ldr	r1, [pc, #84]	; (d28 <adc_init+0x350>)
     cd4:	b29b      	uxth	r3, r3
     cd6:	428b      	cmp	r3, r1
     cd8:	d900      	bls.n	cdc <adc_init+0x304>
     cda:	e690      	b.n	9fe <adc_init+0x26>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     cdc:	4643      	mov	r3, r8
     cde:	84da      	strh	r2, [r3, #38]	; 0x26
			ADC_CALIB_BIAS_CAL(
     ce0:	4b12      	ldr	r3, [pc, #72]	; (d2c <adc_init+0x354>)
     ce2:	681b      	ldr	r3, [r3, #0]
     ce4:	015b      	lsls	r3, r3, #5
     ce6:	22e0      	movs	r2, #224	; 0xe0
     ce8:	00d2      	lsls	r2, r2, #3
     cea:	4013      	ands	r3, r2
			ADC_CALIB_LINEARITY_CAL(
     cec:	4a10      	ldr	r2, [pc, #64]	; (d30 <adc_init+0x358>)
     cee:	6851      	ldr	r1, [r2, #4]
     cf0:	0149      	lsls	r1, r1, #5
     cf2:	6812      	ldr	r2, [r2, #0]
     cf4:	0ed2      	lsrs	r2, r2, #27
     cf6:	430a      	orrs	r2, r1
     cf8:	b2d2      	uxtb	r2, r2
			) |
     cfa:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
     cfc:	4642      	mov	r2, r8
     cfe:	8513      	strh	r3, [r2, #40]	; 0x28
	return STATUS_OK;
     d00:	2000      	movs	r0, #0
     d02:	e67c      	b.n	9fe <adc_init+0x26>
     d04:	40000400 	.word	0x40000400
     d08:	40000800 	.word	0x40000800
     d0c:	200002c4 	.word	0x200002c4
     d10:	00001f59 	.word	0x00001f59
     d14:	00001ecd 	.word	0x00001ecd
     d18:	0000396d 	.word	0x0000396d
     d1c:	00005174 	.word	0x00005174
     d20:	00002051 	.word	0x00002051
     d24:	000050a0 	.word	0x000050a0
     d28:	00000fff 	.word	0x00000fff
     d2c:	00806024 	.word	0x00806024
     d30:	00806020 	.word	0x00806020
		switch (resolution) {
     d34:	2c00      	cmp	r4, #0
     d36:	d000      	beq.n	d3a <adc_init+0x362>
     d38:	e77f      	b.n	c3a <adc_init+0x262>
			if (config->differential_mode &&
     d3a:	7cf2      	ldrb	r2, [r6, #19]
     d3c:	2a00      	cmp	r2, #0
     d3e:	d00f      	beq.n	d60 <adc_init+0x388>
					(config->window.window_lower_value > 2047 ||
     d40:	69f2      	ldr	r2, [r6, #28]
     d42:	2180      	movs	r1, #128	; 0x80
     d44:	0109      	lsls	r1, r1, #4
     d46:	468c      	mov	ip, r1
     d48:	4462      	add	r2, ip
			if (config->differential_mode &&
     d4a:	492a      	ldr	r1, [pc, #168]	; (df4 <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
     d4c:	2017      	movs	r0, #23
			if (config->differential_mode &&
     d4e:	428a      	cmp	r2, r1
     d50:	d900      	bls.n	d54 <adc_init+0x37c>
     d52:	e654      	b.n	9fe <adc_init+0x26>
					config->window.window_lower_value < -2048 ||
     d54:	6a32      	ldr	r2, [r6, #32]
     d56:	4462      	add	r2, ip
     d58:	4926      	ldr	r1, [pc, #152]	; (df4 <adc_init+0x41c>)
     d5a:	428a      	cmp	r2, r1
     d5c:	d900      	bls.n	d60 <adc_init+0x388>
     d5e:	e64e      	b.n	9fe <adc_init+0x26>
			} else if (config->window.window_lower_value > 4095 ||
     d60:	4a24      	ldr	r2, [pc, #144]	; (df4 <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
     d62:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
     d64:	69f1      	ldr	r1, [r6, #28]
     d66:	4291      	cmp	r1, r2
     d68:	dd00      	ble.n	d6c <adc_init+0x394>
     d6a:	e648      	b.n	9fe <adc_init+0x26>
     d6c:	6a31      	ldr	r1, [r6, #32]
     d6e:	4291      	cmp	r1, r2
     d70:	dd00      	ble.n	d74 <adc_init+0x39c>
     d72:	e644      	b.n	9fe <adc_init+0x26>
     d74:	e761      	b.n	c3a <adc_init+0x262>
			if (config->differential_mode &&
     d76:	7cf2      	ldrb	r2, [r6, #19]
     d78:	2a00      	cmp	r2, #0
     d7a:	d00f      	beq.n	d9c <adc_init+0x3c4>
					(config->window.window_lower_value > 511 ||
     d7c:	69f2      	ldr	r2, [r6, #28]
     d7e:	2180      	movs	r1, #128	; 0x80
     d80:	0089      	lsls	r1, r1, #2
     d82:	468c      	mov	ip, r1
     d84:	4462      	add	r2, ip
			if (config->differential_mode &&
     d86:	491c      	ldr	r1, [pc, #112]	; (df8 <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
     d88:	2017      	movs	r0, #23
			if (config->differential_mode &&
     d8a:	428a      	cmp	r2, r1
     d8c:	d900      	bls.n	d90 <adc_init+0x3b8>
     d8e:	e636      	b.n	9fe <adc_init+0x26>
					config->window.window_lower_value < -512 ||
     d90:	6a32      	ldr	r2, [r6, #32]
     d92:	4462      	add	r2, ip
     d94:	4918      	ldr	r1, [pc, #96]	; (df8 <adc_init+0x420>)
     d96:	428a      	cmp	r2, r1
     d98:	d900      	bls.n	d9c <adc_init+0x3c4>
     d9a:	e630      	b.n	9fe <adc_init+0x26>
			} else if (config->window.window_lower_value > 1023 ||
     d9c:	4a16      	ldr	r2, [pc, #88]	; (df8 <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
     d9e:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
     da0:	69f1      	ldr	r1, [r6, #28]
     da2:	4291      	cmp	r1, r2
     da4:	dd00      	ble.n	da8 <adc_init+0x3d0>
     da6:	e62a      	b.n	9fe <adc_init+0x26>
     da8:	6a31      	ldr	r1, [r6, #32]
     daa:	4291      	cmp	r1, r2
     dac:	dd00      	ble.n	db0 <adc_init+0x3d8>
     dae:	e626      	b.n	9fe <adc_init+0x26>
     db0:	e743      	b.n	c3a <adc_init+0x262>
			if (config->differential_mode &&
     db2:	7cf2      	ldrb	r2, [r6, #19]
     db4:	2a00      	cmp	r2, #0
     db6:	d00f      	beq.n	dd8 <adc_init+0x400>
					(config->window.window_lower_value > 32767 ||
     db8:	69f2      	ldr	r2, [r6, #28]
     dba:	2180      	movs	r1, #128	; 0x80
     dbc:	0209      	lsls	r1, r1, #8
     dbe:	468c      	mov	ip, r1
     dc0:	4462      	add	r2, ip
			if (config->differential_mode &&
     dc2:	490e      	ldr	r1, [pc, #56]	; (dfc <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
     dc4:	2017      	movs	r0, #23
			if (config->differential_mode &&
     dc6:	428a      	cmp	r2, r1
     dc8:	d900      	bls.n	dcc <adc_init+0x3f4>
     dca:	e618      	b.n	9fe <adc_init+0x26>
					config->window.window_lower_value < -32768 ||
     dcc:	6a32      	ldr	r2, [r6, #32]
     dce:	4462      	add	r2, ip
     dd0:	490a      	ldr	r1, [pc, #40]	; (dfc <adc_init+0x424>)
     dd2:	428a      	cmp	r2, r1
     dd4:	d900      	bls.n	dd8 <adc_init+0x400>
     dd6:	e612      	b.n	9fe <adc_init+0x26>
			} else if (config->window.window_lower_value > 65535 ||
     dd8:	4a08      	ldr	r2, [pc, #32]	; (dfc <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
     dda:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
     ddc:	69f1      	ldr	r1, [r6, #28]
     dde:	4291      	cmp	r1, r2
     de0:	dd00      	ble.n	de4 <adc_init+0x40c>
     de2:	e60c      	b.n	9fe <adc_init+0x26>
     de4:	6a31      	ldr	r1, [r6, #32]
     de6:	4291      	cmp	r1, r2
     de8:	dd00      	ble.n	dec <adc_init+0x414>
     dea:	e608      	b.n	9fe <adc_init+0x26>
     dec:	e725      	b.n	c3a <adc_init+0x262>
		return STATUS_ERR_INVALID_ARG;
     dee:	2017      	movs	r0, #23
     df0:	e605      	b.n	9fe <adc_init+0x26>
     df2:	46c0      	nop			; (mov r8, r8)
     df4:	00000fff 	.word	0x00000fff
     df8:	000003ff 	.word	0x000003ff
     dfc:	0000ffff 	.word	0x0000ffff

00000e00 <ADC_Handler>:
	}
}

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
     e00:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
     e02:	4b2f      	ldr	r3, [pc, #188]	; (ec0 <ADC_Handler+0xc0>)
     e04:	681d      	ldr	r5, [r3, #0]
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
     e06:	682b      	ldr	r3, [r5, #0]
     e08:	7e1a      	ldrb	r2, [r3, #24]
     e0a:	7ddc      	ldrb	r4, [r3, #23]
     e0c:	4014      	ands	r4, r2
	if (flags & ADC_INTFLAG_RESRDY) {
     e0e:	07e2      	lsls	r2, r4, #31
     e10:	d416      	bmi.n	e40 <ADC_Handler+0x40>
	if (flags & ADC_INTFLAG_WINMON) {
     e12:	0763      	lsls	r3, r4, #29
     e14:	d508      	bpl.n	e28 <ADC_Handler+0x28>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     e16:	2304      	movs	r3, #4
     e18:	682a      	ldr	r2, [r5, #0]
     e1a:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     e1c:	7eeb      	ldrb	r3, [r5, #27]
     e1e:	079b      	lsls	r3, r3, #30
     e20:	d502      	bpl.n	e28 <ADC_Handler+0x28>
     e22:	7eab      	ldrb	r3, [r5, #26]
     e24:	079b      	lsls	r3, r3, #30
     e26:	d442      	bmi.n	eae <ADC_Handler+0xae>
	if (flags & ADC_INTFLAG_OVERRUN) {
     e28:	07a3      	lsls	r3, r4, #30
     e2a:	d508      	bpl.n	e3e <ADC_Handler+0x3e>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     e2c:	2302      	movs	r3, #2
     e2e:	682a      	ldr	r2, [r5, #0]
     e30:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     e32:	7eeb      	ldrb	r3, [r5, #27]
     e34:	075b      	lsls	r3, r3, #29
     e36:	d502      	bpl.n	e3e <ADC_Handler+0x3e>
     e38:	7eab      	ldrb	r3, [r5, #26]
     e3a:	075b      	lsls	r3, r3, #29
     e3c:	d43b      	bmi.n	eb6 <ADC_Handler+0xb6>
	_adc_interrupt_handler(0);
}
     e3e:	bd70      	pop	{r4, r5, r6, pc}
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     e40:	2201      	movs	r2, #1
     e42:	761a      	strb	r2, [r3, #24]
	Adc *const adc_module = module_inst->hw;
     e44:	682a      	ldr	r2, [r5, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     e46:	7e53      	ldrb	r3, [r2, #25]
		while (adc_is_syncing(module)) {
     e48:	b25b      	sxtb	r3, r3
     e4a:	2b00      	cmp	r3, #0
     e4c:	dbfb      	blt.n	e46 <ADC_Handler+0x46>
		*(module->job_buffer++) = module->hw->RESULT.reg;
     e4e:	6969      	ldr	r1, [r5, #20]
     e50:	1c8b      	adds	r3, r1, #2
     e52:	616b      	str	r3, [r5, #20]
     e54:	8b53      	ldrh	r3, [r2, #26]
     e56:	b29b      	uxth	r3, r3
     e58:	800b      	strh	r3, [r1, #0]
		if (--module->remaining_conversions > 0) {
     e5a:	8b2b      	ldrh	r3, [r5, #24]
     e5c:	3b01      	subs	r3, #1
     e5e:	b29b      	uxth	r3, r3
     e60:	832b      	strh	r3, [r5, #24]
     e62:	2b00      	cmp	r3, #0
     e64:	d011      	beq.n	e8a <ADC_Handler+0x8a>
			if (module->software_trigger == true) {
     e66:	7f6b      	ldrb	r3, [r5, #29]
     e68:	2b00      	cmp	r3, #0
     e6a:	d0d2      	beq.n	e12 <ADC_Handler+0x12>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     e6c:	682a      	ldr	r2, [r5, #0]
     e6e:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     e70:	b25b      	sxtb	r3, r3
     e72:	2b00      	cmp	r3, #0
     e74:	dbfb      	blt.n	e6e <ADC_Handler+0x6e>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     e76:	7b13      	ldrb	r3, [r2, #12]
     e78:	2102      	movs	r1, #2
     e7a:	430b      	orrs	r3, r1
     e7c:	7313      	strb	r3, [r2, #12]
	Adc *const adc_module = module_inst->hw;
     e7e:	682a      	ldr	r2, [r5, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     e80:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     e82:	b25b      	sxtb	r3, r3
     e84:	2b00      	cmp	r3, #0
     e86:	dbfb      	blt.n	e80 <ADC_Handler+0x80>
     e88:	e7c3      	b.n	e12 <ADC_Handler+0x12>
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     e8a:	2301      	movs	r3, #1
     e8c:	682a      	ldr	r2, [r5, #0]
     e8e:	7593      	strb	r3, [r2, #22]
			if (module->job_status == STATUS_BUSY) {
     e90:	7f2b      	ldrb	r3, [r5, #28]
     e92:	2b05      	cmp	r3, #5
     e94:	d1bd      	bne.n	e12 <ADC_Handler+0x12>
				module->job_status = STATUS_OK;
     e96:	2300      	movs	r3, #0
     e98:	772b      	strb	r3, [r5, #28]
				if ((module->enabled_callback_mask &
     e9a:	7eeb      	ldrb	r3, [r5, #27]
     e9c:	07db      	lsls	r3, r3, #31
     e9e:	d5b8      	bpl.n	e12 <ADC_Handler+0x12>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
     ea0:	7eab      	ldrb	r3, [r5, #26]
     ea2:	07db      	lsls	r3, r3, #31
     ea4:	d5b5      	bpl.n	e12 <ADC_Handler+0x12>
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     ea6:	0028      	movs	r0, r5
     ea8:	68ab      	ldr	r3, [r5, #8]
     eaa:	4798      	blx	r3
     eac:	e7b1      	b.n	e12 <ADC_Handler+0x12>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     eae:	0028      	movs	r0, r5
     eb0:	68eb      	ldr	r3, [r5, #12]
     eb2:	4798      	blx	r3
     eb4:	e7b8      	b.n	e28 <ADC_Handler+0x28>
			(module->callback[ADC_CALLBACK_ERROR])(module);
     eb6:	692b      	ldr	r3, [r5, #16]
     eb8:	0028      	movs	r0, r5
     eba:	4798      	blx	r3
}
     ebc:	e7bf      	b.n	e3e <ADC_Handler+0x3e>
     ebe:	46c0      	nop			; (mov r8, r8)
     ec0:	200002c4 	.word	0x200002c4

00000ec4 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     ec4:	b500      	push	{lr}
     ec6:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     ec8:	ab01      	add	r3, sp, #4
     eca:	2280      	movs	r2, #128	; 0x80
     ecc:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     ece:	780a      	ldrb	r2, [r1, #0]
     ed0:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     ed2:	784a      	ldrb	r2, [r1, #1]
     ed4:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     ed6:	788a      	ldrb	r2, [r1, #2]
     ed8:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     eda:	0019      	movs	r1, r3
     edc:	4b01      	ldr	r3, [pc, #4]	; (ee4 <port_pin_set_config+0x20>)
     ede:	4798      	blx	r3
}
     ee0:	b003      	add	sp, #12
     ee2:	bd00      	pop	{pc}
     ee4:	00002051 	.word	0x00002051

00000ee8 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
     eea:	46de      	mov	lr, fp
     eec:	4657      	mov	r7, sl
     eee:	464e      	mov	r6, r9
     ef0:	4645      	mov	r5, r8
     ef2:	b5e0      	push	{r5, r6, r7, lr}
     ef4:	b087      	sub	sp, #28
     ef6:	4680      	mov	r8, r0
     ef8:	9104      	str	r1, [sp, #16]
     efa:	0016      	movs	r6, r2
     efc:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     efe:	2200      	movs	r2, #0
     f00:	2300      	movs	r3, #0
     f02:	2100      	movs	r1, #0
     f04:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     f06:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     f08:	2001      	movs	r0, #1
     f0a:	0021      	movs	r1, r4
     f0c:	9600      	str	r6, [sp, #0]
     f0e:	9701      	str	r7, [sp, #4]
     f10:	465c      	mov	r4, fp
     f12:	9403      	str	r4, [sp, #12]
     f14:	4644      	mov	r4, r8
     f16:	9405      	str	r4, [sp, #20]
     f18:	e013      	b.n	f42 <long_division+0x5a>
     f1a:	2420      	movs	r4, #32
     f1c:	1a64      	subs	r4, r4, r1
     f1e:	0005      	movs	r5, r0
     f20:	40e5      	lsrs	r5, r4
     f22:	46a8      	mov	r8, r5
     f24:	e014      	b.n	f50 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     f26:	9c00      	ldr	r4, [sp, #0]
     f28:	9d01      	ldr	r5, [sp, #4]
     f2a:	1b12      	subs	r2, r2, r4
     f2c:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     f2e:	465c      	mov	r4, fp
     f30:	464d      	mov	r5, r9
     f32:	432c      	orrs	r4, r5
     f34:	46a3      	mov	fp, r4
     f36:	9c03      	ldr	r4, [sp, #12]
     f38:	4645      	mov	r5, r8
     f3a:	432c      	orrs	r4, r5
     f3c:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     f3e:	3901      	subs	r1, #1
     f40:	d325      	bcc.n	f8e <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     f42:	2420      	movs	r4, #32
     f44:	4264      	negs	r4, r4
     f46:	190c      	adds	r4, r1, r4
     f48:	d4e7      	bmi.n	f1a <long_division+0x32>
     f4a:	0005      	movs	r5, r0
     f4c:	40a5      	lsls	r5, r4
     f4e:	46a8      	mov	r8, r5
     f50:	0004      	movs	r4, r0
     f52:	408c      	lsls	r4, r1
     f54:	46a1      	mov	r9, r4
		r = r << 1;
     f56:	1892      	adds	r2, r2, r2
     f58:	415b      	adcs	r3, r3
     f5a:	0014      	movs	r4, r2
     f5c:	001d      	movs	r5, r3
		if (n & bit_shift) {
     f5e:	9e05      	ldr	r6, [sp, #20]
     f60:	464f      	mov	r7, r9
     f62:	403e      	ands	r6, r7
     f64:	46b4      	mov	ip, r6
     f66:	9e04      	ldr	r6, [sp, #16]
     f68:	4647      	mov	r7, r8
     f6a:	403e      	ands	r6, r7
     f6c:	46b2      	mov	sl, r6
     f6e:	4666      	mov	r6, ip
     f70:	4657      	mov	r7, sl
     f72:	433e      	orrs	r6, r7
     f74:	d003      	beq.n	f7e <long_division+0x96>
			r |= 0x01;
     f76:	0006      	movs	r6, r0
     f78:	4326      	orrs	r6, r4
     f7a:	0032      	movs	r2, r6
     f7c:	002b      	movs	r3, r5
		if (r >= d) {
     f7e:	9c00      	ldr	r4, [sp, #0]
     f80:	9d01      	ldr	r5, [sp, #4]
     f82:	429d      	cmp	r5, r3
     f84:	d8db      	bhi.n	f3e <long_division+0x56>
     f86:	d1ce      	bne.n	f26 <long_division+0x3e>
     f88:	4294      	cmp	r4, r2
     f8a:	d8d8      	bhi.n	f3e <long_division+0x56>
     f8c:	e7cb      	b.n	f26 <long_division+0x3e>
     f8e:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     f90:	4658      	mov	r0, fp
     f92:	0019      	movs	r1, r3
     f94:	b007      	add	sp, #28
     f96:	bc3c      	pop	{r2, r3, r4, r5}
     f98:	4690      	mov	r8, r2
     f9a:	4699      	mov	r9, r3
     f9c:	46a2      	mov	sl, r4
     f9e:	46ab      	mov	fp, r5
     fa0:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000fa2 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     fa2:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     fa4:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     fa6:	2340      	movs	r3, #64	; 0x40
     fa8:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     faa:	4281      	cmp	r1, r0
     fac:	d202      	bcs.n	fb4 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     fae:	0018      	movs	r0, r3
     fb0:	bd10      	pop	{r4, pc}
		baud_calculated++;
     fb2:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     fb4:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     fb6:	1c63      	adds	r3, r4, #1
     fb8:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     fba:	4288      	cmp	r0, r1
     fbc:	d9f9      	bls.n	fb2 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     fbe:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     fc0:	2cff      	cmp	r4, #255	; 0xff
     fc2:	d8f4      	bhi.n	fae <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     fc4:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     fc6:	2300      	movs	r3, #0
     fc8:	e7f1      	b.n	fae <_sercom_get_sync_baud_val+0xc>
	...

00000fcc <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
     fce:	b083      	sub	sp, #12
     fd0:	000f      	movs	r7, r1
     fd2:	0016      	movs	r6, r2
     fd4:	aa08      	add	r2, sp, #32
     fd6:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     fd8:	0004      	movs	r4, r0
     fda:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     fdc:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     fde:	42bc      	cmp	r4, r7
     fe0:	d902      	bls.n	fe8 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     fe2:	0010      	movs	r0, r2
     fe4:	b003      	add	sp, #12
     fe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     fe8:	2b00      	cmp	r3, #0
     fea:	d114      	bne.n	1016 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     fec:	0002      	movs	r2, r0
     fee:	0008      	movs	r0, r1
     ff0:	2100      	movs	r1, #0
     ff2:	4c19      	ldr	r4, [pc, #100]	; (1058 <_sercom_get_async_baud_val+0x8c>)
     ff4:	47a0      	blx	r4
     ff6:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     ff8:	003a      	movs	r2, r7
     ffa:	2300      	movs	r3, #0
     ffc:	2000      	movs	r0, #0
     ffe:	4c17      	ldr	r4, [pc, #92]	; (105c <_sercom_get_async_baud_val+0x90>)
    1000:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    1002:	2200      	movs	r2, #0
    1004:	2301      	movs	r3, #1
    1006:	1a12      	subs	r2, r2, r0
    1008:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    100a:	0c12      	lsrs	r2, r2, #16
    100c:	041b      	lsls	r3, r3, #16
    100e:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    1010:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    1012:	2200      	movs	r2, #0
    1014:	e7e5      	b.n	fe2 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    1016:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    1018:	2b01      	cmp	r3, #1
    101a:	d1f9      	bne.n	1010 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    101c:	000a      	movs	r2, r1
    101e:	2300      	movs	r3, #0
    1020:	2100      	movs	r1, #0
    1022:	4c0d      	ldr	r4, [pc, #52]	; (1058 <_sercom_get_async_baud_val+0x8c>)
    1024:	47a0      	blx	r4
    1026:	0002      	movs	r2, r0
    1028:	000b      	movs	r3, r1
    102a:	9200      	str	r2, [sp, #0]
    102c:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    102e:	0038      	movs	r0, r7
    1030:	2100      	movs	r1, #0
    1032:	4c0a      	ldr	r4, [pc, #40]	; (105c <_sercom_get_async_baud_val+0x90>)
    1034:	47a0      	blx	r4
    1036:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    1038:	2380      	movs	r3, #128	; 0x80
    103a:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    103c:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    103e:	4298      	cmp	r0, r3
    1040:	d8cf      	bhi.n	fe2 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    1042:	0f79      	lsrs	r1, r7, #29
    1044:	00f8      	lsls	r0, r7, #3
    1046:	9a00      	ldr	r2, [sp, #0]
    1048:	9b01      	ldr	r3, [sp, #4]
    104a:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    104c:	00ea      	lsls	r2, r5, #3
    104e:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    1050:	b2d2      	uxtb	r2, r2
    1052:	0352      	lsls	r2, r2, #13
    1054:	432a      	orrs	r2, r5
    1056:	e7db      	b.n	1010 <_sercom_get_async_baud_val+0x44>
    1058:	000038bd 	.word	0x000038bd
    105c:	00000ee9 	.word	0x00000ee9

00001060 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    1060:	b510      	push	{r4, lr}
    1062:	b082      	sub	sp, #8
    1064:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    1066:	4b0e      	ldr	r3, [pc, #56]	; (10a0 <sercom_set_gclk_generator+0x40>)
    1068:	781b      	ldrb	r3, [r3, #0]
    106a:	2b00      	cmp	r3, #0
    106c:	d007      	beq.n	107e <sercom_set_gclk_generator+0x1e>
    106e:	2900      	cmp	r1, #0
    1070:	d105      	bne.n	107e <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    1072:	4b0b      	ldr	r3, [pc, #44]	; (10a0 <sercom_set_gclk_generator+0x40>)
    1074:	785b      	ldrb	r3, [r3, #1]
    1076:	4283      	cmp	r3, r0
    1078:	d010      	beq.n	109c <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    107a:	201d      	movs	r0, #29
    107c:	e00c      	b.n	1098 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    107e:	a901      	add	r1, sp, #4
    1080:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    1082:	2013      	movs	r0, #19
    1084:	4b07      	ldr	r3, [pc, #28]	; (10a4 <sercom_set_gclk_generator+0x44>)
    1086:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    1088:	2013      	movs	r0, #19
    108a:	4b07      	ldr	r3, [pc, #28]	; (10a8 <sercom_set_gclk_generator+0x48>)
    108c:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    108e:	4b04      	ldr	r3, [pc, #16]	; (10a0 <sercom_set_gclk_generator+0x40>)
    1090:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    1092:	2201      	movs	r2, #1
    1094:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    1096:	2000      	movs	r0, #0
}
    1098:	b002      	add	sp, #8
    109a:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    109c:	2000      	movs	r0, #0
    109e:	e7fb      	b.n	1098 <sercom_set_gclk_generator+0x38>
    10a0:	2000026c 	.word	0x2000026c
    10a4:	00001f59 	.word	0x00001f59
    10a8:	00001ecd 	.word	0x00001ecd

000010ac <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    10ac:	4b40      	ldr	r3, [pc, #256]	; (11b0 <_sercom_get_default_pad+0x104>)
    10ae:	4298      	cmp	r0, r3
    10b0:	d031      	beq.n	1116 <_sercom_get_default_pad+0x6a>
    10b2:	d90a      	bls.n	10ca <_sercom_get_default_pad+0x1e>
    10b4:	4b3f      	ldr	r3, [pc, #252]	; (11b4 <_sercom_get_default_pad+0x108>)
    10b6:	4298      	cmp	r0, r3
    10b8:	d04d      	beq.n	1156 <_sercom_get_default_pad+0xaa>
    10ba:	4b3f      	ldr	r3, [pc, #252]	; (11b8 <_sercom_get_default_pad+0x10c>)
    10bc:	4298      	cmp	r0, r3
    10be:	d05a      	beq.n	1176 <_sercom_get_default_pad+0xca>
    10c0:	4b3e      	ldr	r3, [pc, #248]	; (11bc <_sercom_get_default_pad+0x110>)
    10c2:	4298      	cmp	r0, r3
    10c4:	d037      	beq.n	1136 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    10c6:	2000      	movs	r0, #0
}
    10c8:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    10ca:	4b3d      	ldr	r3, [pc, #244]	; (11c0 <_sercom_get_default_pad+0x114>)
    10cc:	4298      	cmp	r0, r3
    10ce:	d00c      	beq.n	10ea <_sercom_get_default_pad+0x3e>
    10d0:	4b3c      	ldr	r3, [pc, #240]	; (11c4 <_sercom_get_default_pad+0x118>)
    10d2:	4298      	cmp	r0, r3
    10d4:	d1f7      	bne.n	10c6 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    10d6:	2901      	cmp	r1, #1
    10d8:	d017      	beq.n	110a <_sercom_get_default_pad+0x5e>
    10da:	2900      	cmp	r1, #0
    10dc:	d05d      	beq.n	119a <_sercom_get_default_pad+0xee>
    10de:	2902      	cmp	r1, #2
    10e0:	d015      	beq.n	110e <_sercom_get_default_pad+0x62>
    10e2:	2903      	cmp	r1, #3
    10e4:	d015      	beq.n	1112 <_sercom_get_default_pad+0x66>
	return 0;
    10e6:	2000      	movs	r0, #0
    10e8:	e7ee      	b.n	10c8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    10ea:	2901      	cmp	r1, #1
    10ec:	d007      	beq.n	10fe <_sercom_get_default_pad+0x52>
    10ee:	2900      	cmp	r1, #0
    10f0:	d051      	beq.n	1196 <_sercom_get_default_pad+0xea>
    10f2:	2902      	cmp	r1, #2
    10f4:	d005      	beq.n	1102 <_sercom_get_default_pad+0x56>
    10f6:	2903      	cmp	r1, #3
    10f8:	d005      	beq.n	1106 <_sercom_get_default_pad+0x5a>
	return 0;
    10fa:	2000      	movs	r0, #0
    10fc:	e7e4      	b.n	10c8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    10fe:	4832      	ldr	r0, [pc, #200]	; (11c8 <_sercom_get_default_pad+0x11c>)
    1100:	e7e2      	b.n	10c8 <_sercom_get_default_pad+0x1c>
    1102:	4832      	ldr	r0, [pc, #200]	; (11cc <_sercom_get_default_pad+0x120>)
    1104:	e7e0      	b.n	10c8 <_sercom_get_default_pad+0x1c>
    1106:	4832      	ldr	r0, [pc, #200]	; (11d0 <_sercom_get_default_pad+0x124>)
    1108:	e7de      	b.n	10c8 <_sercom_get_default_pad+0x1c>
    110a:	4832      	ldr	r0, [pc, #200]	; (11d4 <_sercom_get_default_pad+0x128>)
    110c:	e7dc      	b.n	10c8 <_sercom_get_default_pad+0x1c>
    110e:	4832      	ldr	r0, [pc, #200]	; (11d8 <_sercom_get_default_pad+0x12c>)
    1110:	e7da      	b.n	10c8 <_sercom_get_default_pad+0x1c>
    1112:	4832      	ldr	r0, [pc, #200]	; (11dc <_sercom_get_default_pad+0x130>)
    1114:	e7d8      	b.n	10c8 <_sercom_get_default_pad+0x1c>
    1116:	2901      	cmp	r1, #1
    1118:	d007      	beq.n	112a <_sercom_get_default_pad+0x7e>
    111a:	2900      	cmp	r1, #0
    111c:	d03f      	beq.n	119e <_sercom_get_default_pad+0xf2>
    111e:	2902      	cmp	r1, #2
    1120:	d005      	beq.n	112e <_sercom_get_default_pad+0x82>
    1122:	2903      	cmp	r1, #3
    1124:	d005      	beq.n	1132 <_sercom_get_default_pad+0x86>
	return 0;
    1126:	2000      	movs	r0, #0
    1128:	e7ce      	b.n	10c8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    112a:	482d      	ldr	r0, [pc, #180]	; (11e0 <_sercom_get_default_pad+0x134>)
    112c:	e7cc      	b.n	10c8 <_sercom_get_default_pad+0x1c>
    112e:	482d      	ldr	r0, [pc, #180]	; (11e4 <_sercom_get_default_pad+0x138>)
    1130:	e7ca      	b.n	10c8 <_sercom_get_default_pad+0x1c>
    1132:	482d      	ldr	r0, [pc, #180]	; (11e8 <_sercom_get_default_pad+0x13c>)
    1134:	e7c8      	b.n	10c8 <_sercom_get_default_pad+0x1c>
    1136:	2901      	cmp	r1, #1
    1138:	d007      	beq.n	114a <_sercom_get_default_pad+0x9e>
    113a:	2900      	cmp	r1, #0
    113c:	d031      	beq.n	11a2 <_sercom_get_default_pad+0xf6>
    113e:	2902      	cmp	r1, #2
    1140:	d005      	beq.n	114e <_sercom_get_default_pad+0xa2>
    1142:	2903      	cmp	r1, #3
    1144:	d005      	beq.n	1152 <_sercom_get_default_pad+0xa6>
	return 0;
    1146:	2000      	movs	r0, #0
    1148:	e7be      	b.n	10c8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    114a:	4828      	ldr	r0, [pc, #160]	; (11ec <_sercom_get_default_pad+0x140>)
    114c:	e7bc      	b.n	10c8 <_sercom_get_default_pad+0x1c>
    114e:	4828      	ldr	r0, [pc, #160]	; (11f0 <_sercom_get_default_pad+0x144>)
    1150:	e7ba      	b.n	10c8 <_sercom_get_default_pad+0x1c>
    1152:	4828      	ldr	r0, [pc, #160]	; (11f4 <_sercom_get_default_pad+0x148>)
    1154:	e7b8      	b.n	10c8 <_sercom_get_default_pad+0x1c>
    1156:	2901      	cmp	r1, #1
    1158:	d007      	beq.n	116a <_sercom_get_default_pad+0xbe>
    115a:	2900      	cmp	r1, #0
    115c:	d023      	beq.n	11a6 <_sercom_get_default_pad+0xfa>
    115e:	2902      	cmp	r1, #2
    1160:	d005      	beq.n	116e <_sercom_get_default_pad+0xc2>
    1162:	2903      	cmp	r1, #3
    1164:	d005      	beq.n	1172 <_sercom_get_default_pad+0xc6>
	return 0;
    1166:	2000      	movs	r0, #0
    1168:	e7ae      	b.n	10c8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    116a:	4823      	ldr	r0, [pc, #140]	; (11f8 <_sercom_get_default_pad+0x14c>)
    116c:	e7ac      	b.n	10c8 <_sercom_get_default_pad+0x1c>
    116e:	4823      	ldr	r0, [pc, #140]	; (11fc <_sercom_get_default_pad+0x150>)
    1170:	e7aa      	b.n	10c8 <_sercom_get_default_pad+0x1c>
    1172:	4823      	ldr	r0, [pc, #140]	; (1200 <_sercom_get_default_pad+0x154>)
    1174:	e7a8      	b.n	10c8 <_sercom_get_default_pad+0x1c>
    1176:	2901      	cmp	r1, #1
    1178:	d007      	beq.n	118a <_sercom_get_default_pad+0xde>
    117a:	2900      	cmp	r1, #0
    117c:	d015      	beq.n	11aa <_sercom_get_default_pad+0xfe>
    117e:	2902      	cmp	r1, #2
    1180:	d005      	beq.n	118e <_sercom_get_default_pad+0xe2>
    1182:	2903      	cmp	r1, #3
    1184:	d005      	beq.n	1192 <_sercom_get_default_pad+0xe6>
	return 0;
    1186:	2000      	movs	r0, #0
    1188:	e79e      	b.n	10c8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    118a:	481e      	ldr	r0, [pc, #120]	; (1204 <_sercom_get_default_pad+0x158>)
    118c:	e79c      	b.n	10c8 <_sercom_get_default_pad+0x1c>
    118e:	481e      	ldr	r0, [pc, #120]	; (1208 <_sercom_get_default_pad+0x15c>)
    1190:	e79a      	b.n	10c8 <_sercom_get_default_pad+0x1c>
    1192:	481e      	ldr	r0, [pc, #120]	; (120c <_sercom_get_default_pad+0x160>)
    1194:	e798      	b.n	10c8 <_sercom_get_default_pad+0x1c>
    1196:	481e      	ldr	r0, [pc, #120]	; (1210 <_sercom_get_default_pad+0x164>)
    1198:	e796      	b.n	10c8 <_sercom_get_default_pad+0x1c>
    119a:	2003      	movs	r0, #3
    119c:	e794      	b.n	10c8 <_sercom_get_default_pad+0x1c>
    119e:	481d      	ldr	r0, [pc, #116]	; (1214 <_sercom_get_default_pad+0x168>)
    11a0:	e792      	b.n	10c8 <_sercom_get_default_pad+0x1c>
    11a2:	481d      	ldr	r0, [pc, #116]	; (1218 <_sercom_get_default_pad+0x16c>)
    11a4:	e790      	b.n	10c8 <_sercom_get_default_pad+0x1c>
    11a6:	481d      	ldr	r0, [pc, #116]	; (121c <_sercom_get_default_pad+0x170>)
    11a8:	e78e      	b.n	10c8 <_sercom_get_default_pad+0x1c>
    11aa:	481d      	ldr	r0, [pc, #116]	; (1220 <_sercom_get_default_pad+0x174>)
    11ac:	e78c      	b.n	10c8 <_sercom_get_default_pad+0x1c>
    11ae:	46c0      	nop			; (mov r8, r8)
    11b0:	42001000 	.word	0x42001000
    11b4:	42001800 	.word	0x42001800
    11b8:	42001c00 	.word	0x42001c00
    11bc:	42001400 	.word	0x42001400
    11c0:	42000800 	.word	0x42000800
    11c4:	42000c00 	.word	0x42000c00
    11c8:	00050003 	.word	0x00050003
    11cc:	00060003 	.word	0x00060003
    11d0:	00070003 	.word	0x00070003
    11d4:	00010003 	.word	0x00010003
    11d8:	001e0003 	.word	0x001e0003
    11dc:	001f0003 	.word	0x001f0003
    11e0:	00090003 	.word	0x00090003
    11e4:	000a0003 	.word	0x000a0003
    11e8:	000b0003 	.word	0x000b0003
    11ec:	00110003 	.word	0x00110003
    11f0:	00120003 	.word	0x00120003
    11f4:	00130003 	.word	0x00130003
    11f8:	000d0003 	.word	0x000d0003
    11fc:	000e0003 	.word	0x000e0003
    1200:	000f0003 	.word	0x000f0003
    1204:	00170003 	.word	0x00170003
    1208:	00180003 	.word	0x00180003
    120c:	00190003 	.word	0x00190003
    1210:	00040003 	.word	0x00040003
    1214:	00080003 	.word	0x00080003
    1218:	00100003 	.word	0x00100003
    121c:	000c0003 	.word	0x000c0003
    1220:	00160003 	.word	0x00160003

00001224 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    1224:	b530      	push	{r4, r5, lr}
    1226:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    1228:	4b0b      	ldr	r3, [pc, #44]	; (1258 <_sercom_get_sercom_inst_index+0x34>)
    122a:	466a      	mov	r2, sp
    122c:	cb32      	ldmia	r3!, {r1, r4, r5}
    122e:	c232      	stmia	r2!, {r1, r4, r5}
    1230:	cb32      	ldmia	r3!, {r1, r4, r5}
    1232:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    1234:	9b00      	ldr	r3, [sp, #0]
    1236:	4283      	cmp	r3, r0
    1238:	d00b      	beq.n	1252 <_sercom_get_sercom_inst_index+0x2e>
    123a:	2301      	movs	r3, #1
    123c:	009a      	lsls	r2, r3, #2
    123e:	4669      	mov	r1, sp
    1240:	5852      	ldr	r2, [r2, r1]
    1242:	4282      	cmp	r2, r0
    1244:	d006      	beq.n	1254 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1246:	3301      	adds	r3, #1
    1248:	2b06      	cmp	r3, #6
    124a:	d1f7      	bne.n	123c <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    124c:	2000      	movs	r0, #0
}
    124e:	b007      	add	sp, #28
    1250:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1252:	2300      	movs	r3, #0
			return i;
    1254:	b2d8      	uxtb	r0, r3
    1256:	e7fa      	b.n	124e <_sercom_get_sercom_inst_index+0x2a>
    1258:	000051c4 	.word	0x000051c4

0000125c <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    125c:	4770      	bx	lr
	...

00001260 <_sercom_set_handler>:


void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    1260:	b5f0      	push	{r4, r5, r6, r7, lr}
	// Initialize handlers with default handler and device instances with 0 
	if (_handler_table_initialized == false) {
    1262:	4b0a      	ldr	r3, [pc, #40]	; (128c <_sercom_set_handler+0x2c>)
    1264:	781b      	ldrb	r3, [r3, #0]
    1266:	2b00      	cmp	r3, #0
    1268:	d10c      	bne.n	1284 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    126a:	4f09      	ldr	r7, [pc, #36]	; (1290 <_sercom_set_handler+0x30>)
    126c:	4e09      	ldr	r6, [pc, #36]	; (1294 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    126e:	4d0a      	ldr	r5, [pc, #40]	; (1298 <_sercom_set_handler+0x38>)
    1270:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1272:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    1274:	195a      	adds	r2, r3, r5
    1276:	6014      	str	r4, [r2, #0]
    1278:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    127a:	2b18      	cmp	r3, #24
    127c:	d1f9      	bne.n	1272 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    127e:	2201      	movs	r2, #1
    1280:	4b02      	ldr	r3, [pc, #8]	; (128c <_sercom_set_handler+0x2c>)
    1282:	701a      	strb	r2, [r3, #0]
	}

	// Save interrupt handler 
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1284:	0080      	lsls	r0, r0, #2
    1286:	4b02      	ldr	r3, [pc, #8]	; (1290 <_sercom_set_handler+0x30>)
    1288:	50c1      	str	r1, [r0, r3]
}
    128a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    128c:	2000026e 	.word	0x2000026e
    1290:	20000270 	.word	0x20000270
    1294:	0000125d 	.word	0x0000125d
    1298:	200002c8 	.word	0x200002c8

0000129c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    129c:	b500      	push	{lr}
    129e:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    12a0:	2309      	movs	r3, #9
    12a2:	466a      	mov	r2, sp
    12a4:	7013      	strb	r3, [r2, #0]
    12a6:	3301      	adds	r3, #1
    12a8:	7053      	strb	r3, [r2, #1]
    12aa:	3301      	adds	r3, #1
    12ac:	7093      	strb	r3, [r2, #2]
    12ae:	3301      	adds	r3, #1
    12b0:	70d3      	strb	r3, [r2, #3]
    12b2:	3301      	adds	r3, #1
    12b4:	7113      	strb	r3, [r2, #4]
    12b6:	3301      	adds	r3, #1
    12b8:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    12ba:	4b03      	ldr	r3, [pc, #12]	; (12c8 <_sercom_get_interrupt_vector+0x2c>)
    12bc:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    12be:	466b      	mov	r3, sp
    12c0:	5618      	ldrsb	r0, [r3, r0]
}
    12c2:	b003      	add	sp, #12
    12c4:	bd00      	pop	{pc}
    12c6:	46c0      	nop			; (mov r8, r8)
    12c8:	00001225 	.word	0x00001225

000012cc <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    12cc:	b510      	push	{r4, lr}
    12ce:	4b02      	ldr	r3, [pc, #8]	; (12d8 <SERCOM0_Handler+0xc>)
    12d0:	681b      	ldr	r3, [r3, #0]
    12d2:	2000      	movs	r0, #0
    12d4:	4798      	blx	r3
    12d6:	bd10      	pop	{r4, pc}
    12d8:	20000270 	.word	0x20000270

000012dc <SERCOM1_Handler>:
    12dc:	b510      	push	{r4, lr}
    12de:	4b02      	ldr	r3, [pc, #8]	; (12e8 <SERCOM1_Handler+0xc>)
    12e0:	685b      	ldr	r3, [r3, #4]
    12e2:	2001      	movs	r0, #1
    12e4:	4798      	blx	r3
    12e6:	bd10      	pop	{r4, pc}
    12e8:	20000270 	.word	0x20000270

000012ec <SERCOM2_Handler>:
    12ec:	b510      	push	{r4, lr}
    12ee:	4b02      	ldr	r3, [pc, #8]	; (12f8 <SERCOM2_Handler+0xc>)
    12f0:	689b      	ldr	r3, [r3, #8]
    12f2:	2002      	movs	r0, #2
    12f4:	4798      	blx	r3
    12f6:	bd10      	pop	{r4, pc}
    12f8:	20000270 	.word	0x20000270

000012fc <SERCOM3_Handler>:
    12fc:	b510      	push	{r4, lr}
    12fe:	4b02      	ldr	r3, [pc, #8]	; (1308 <SERCOM3_Handler+0xc>)
    1300:	68db      	ldr	r3, [r3, #12]
    1302:	2003      	movs	r0, #3
    1304:	4798      	blx	r3
    1306:	bd10      	pop	{r4, pc}
    1308:	20000270 	.word	0x20000270

0000130c <SERCOM4_Handler>:
    130c:	b510      	push	{r4, lr}
    130e:	4b02      	ldr	r3, [pc, #8]	; (1318 <SERCOM4_Handler+0xc>)
    1310:	691b      	ldr	r3, [r3, #16]
    1312:	2004      	movs	r0, #4
    1314:	4798      	blx	r3
    1316:	bd10      	pop	{r4, pc}
    1318:	20000270 	.word	0x20000270

0000131c <SERCOM5_Handler>:
    131c:	b510      	push	{r4, lr}
    131e:	4b02      	ldr	r3, [pc, #8]	; (1328 <SERCOM5_Handler+0xc>)
    1320:	695b      	ldr	r3, [r3, #20]
    1322:	2005      	movs	r0, #5
    1324:	4798      	blx	r3
    1326:	bd10      	pop	{r4, pc}
    1328:	20000270 	.word	0x20000270

0000132c <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    132c:	b5f0      	push	{r4, r5, r6, r7, lr}
    132e:	46de      	mov	lr, fp
    1330:	4657      	mov	r7, sl
    1332:	464e      	mov	r6, r9
    1334:	4645      	mov	r5, r8
    1336:	b5e0      	push	{r5, r6, r7, lr}
    1338:	b091      	sub	sp, #68	; 0x44
    133a:	0005      	movs	r5, r0
    133c:	000c      	movs	r4, r1
    133e:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    1340:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1342:	0008      	movs	r0, r1
    1344:	4bba      	ldr	r3, [pc, #744]	; (1630 <usart_init+0x304>)
    1346:	4798      	blx	r3
    1348:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    134a:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    134c:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    134e:	07db      	lsls	r3, r3, #31
    1350:	d506      	bpl.n	1360 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    1352:	b011      	add	sp, #68	; 0x44
    1354:	bc3c      	pop	{r2, r3, r4, r5}
    1356:	4690      	mov	r8, r2
    1358:	4699      	mov	r9, r3
    135a:	46a2      	mov	sl, r4
    135c:	46ab      	mov	fp, r5
    135e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1360:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    1362:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1364:	079b      	lsls	r3, r3, #30
    1366:	d4f4      	bmi.n	1352 <usart_init+0x26>
    1368:	49b2      	ldr	r1, [pc, #712]	; (1634 <usart_init+0x308>)
    136a:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    136c:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    136e:	2301      	movs	r3, #1
    1370:	40bb      	lsls	r3, r7
    1372:	4303      	orrs	r3, r0
    1374:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    1376:	a90f      	add	r1, sp, #60	; 0x3c
    1378:	272d      	movs	r7, #45	; 0x2d
    137a:	5df3      	ldrb	r3, [r6, r7]
    137c:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    137e:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1380:	b2d3      	uxtb	r3, r2
    1382:	9302      	str	r3, [sp, #8]
    1384:	0018      	movs	r0, r3
    1386:	4bac      	ldr	r3, [pc, #688]	; (1638 <usart_init+0x30c>)
    1388:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    138a:	9802      	ldr	r0, [sp, #8]
    138c:	4bab      	ldr	r3, [pc, #684]	; (163c <usart_init+0x310>)
    138e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1390:	5df0      	ldrb	r0, [r6, r7]
    1392:	2100      	movs	r1, #0
    1394:	4baa      	ldr	r3, [pc, #680]	; (1640 <usart_init+0x314>)
    1396:	4798      	blx	r3
	module->character_size = config->character_size;
    1398:	7af3      	ldrb	r3, [r6, #11]
    139a:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    139c:	2324      	movs	r3, #36	; 0x24
    139e:	5cf3      	ldrb	r3, [r6, r3]
    13a0:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    13a2:	2325      	movs	r3, #37	; 0x25
    13a4:	5cf3      	ldrb	r3, [r6, r3]
    13a6:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    13a8:	7ef3      	ldrb	r3, [r6, #27]
    13aa:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    13ac:	7f33      	ldrb	r3, [r6, #28]
    13ae:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    13b0:	682b      	ldr	r3, [r5, #0]
    13b2:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    13b4:	0018      	movs	r0, r3
    13b6:	4b9e      	ldr	r3, [pc, #632]	; (1630 <usart_init+0x304>)
    13b8:	4798      	blx	r3
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    13ba:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    13bc:	2200      	movs	r2, #0
    13be:	230e      	movs	r3, #14
    13c0:	a906      	add	r1, sp, #24
    13c2:	468c      	mov	ip, r1
    13c4:	4463      	add	r3, ip
    13c6:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    13c8:	8a32      	ldrh	r2, [r6, #16]
    13ca:	9202      	str	r2, [sp, #8]
    13cc:	2380      	movs	r3, #128	; 0x80
    13ce:	01db      	lsls	r3, r3, #7
    13d0:	429a      	cmp	r2, r3
    13d2:	d100      	bne.n	13d6 <usart_init+0xaa>
    13d4:	e09a      	b.n	150c <usart_init+0x1e0>
    13d6:	d90f      	bls.n	13f8 <usart_init+0xcc>
    13d8:	23c0      	movs	r3, #192	; 0xc0
    13da:	01db      	lsls	r3, r3, #7
    13dc:	9a02      	ldr	r2, [sp, #8]
    13de:	429a      	cmp	r2, r3
    13e0:	d100      	bne.n	13e4 <usart_init+0xb8>
    13e2:	e08e      	b.n	1502 <usart_init+0x1d6>
    13e4:	2380      	movs	r3, #128	; 0x80
    13e6:	021b      	lsls	r3, r3, #8
    13e8:	429a      	cmp	r2, r3
    13ea:	d000      	beq.n	13ee <usart_init+0xc2>
    13ec:	e11b      	b.n	1626 <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    13ee:	2303      	movs	r3, #3
    13f0:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    13f2:	2300      	movs	r3, #0
    13f4:	9307      	str	r3, [sp, #28]
    13f6:	e008      	b.n	140a <usart_init+0xde>
	switch (config->sample_rate) {
    13f8:	2380      	movs	r3, #128	; 0x80
    13fa:	019b      	lsls	r3, r3, #6
    13fc:	429a      	cmp	r2, r3
    13fe:	d000      	beq.n	1402 <usart_init+0xd6>
    1400:	e111      	b.n	1626 <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1402:	2310      	movs	r3, #16
    1404:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1406:	3b0f      	subs	r3, #15
    1408:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    140a:	6833      	ldr	r3, [r6, #0]
    140c:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    140e:	68f3      	ldr	r3, [r6, #12]
    1410:	469b      	mov	fp, r3
		config->sample_adjustment |
    1412:	6973      	ldr	r3, [r6, #20]
    1414:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1416:	7e33      	ldrb	r3, [r6, #24]
    1418:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    141a:	2326      	movs	r3, #38	; 0x26
    141c:	5cf3      	ldrb	r3, [r6, r3]
    141e:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    1420:	6873      	ldr	r3, [r6, #4]
    1422:	4699      	mov	r9, r3
	switch (transfer_mode)
    1424:	2b00      	cmp	r3, #0
    1426:	d100      	bne.n	142a <usart_init+0xfe>
    1428:	e09c      	b.n	1564 <usart_init+0x238>
    142a:	2380      	movs	r3, #128	; 0x80
    142c:	055b      	lsls	r3, r3, #21
    142e:	4599      	cmp	r9, r3
    1430:	d100      	bne.n	1434 <usart_init+0x108>
    1432:	e080      	b.n	1536 <usart_init+0x20a>
	if(config->encoding_format_enable) {
    1434:	7e73      	ldrb	r3, [r6, #25]
    1436:	2b00      	cmp	r3, #0
    1438:	d002      	beq.n	1440 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    143a:	7eb3      	ldrb	r3, [r6, #26]
    143c:	4642      	mov	r2, r8
    143e:	7393      	strb	r3, [r2, #14]
	usart_hw->BAUD.reg = baud;
    1440:	230e      	movs	r3, #14
    1442:	aa06      	add	r2, sp, #24
    1444:	4694      	mov	ip, r2
    1446:	4463      	add	r3, ip
    1448:	881b      	ldrh	r3, [r3, #0]
    144a:	4642      	mov	r2, r8
    144c:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    144e:	9b05      	ldr	r3, [sp, #20]
    1450:	465a      	mov	r2, fp
    1452:	4313      	orrs	r3, r2
    1454:	9a03      	ldr	r2, [sp, #12]
    1456:	4313      	orrs	r3, r2
    1458:	464a      	mov	r2, r9
    145a:	4313      	orrs	r3, r2
    145c:	9f02      	ldr	r7, [sp, #8]
    145e:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1460:	9b04      	ldr	r3, [sp, #16]
    1462:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    1464:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1466:	4653      	mov	r3, sl
    1468:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    146a:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    146c:	2327      	movs	r3, #39	; 0x27
    146e:	5cf3      	ldrb	r3, [r6, r3]
    1470:	2b00      	cmp	r3, #0
    1472:	d101      	bne.n	1478 <usart_init+0x14c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    1474:	3304      	adds	r3, #4
    1476:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1478:	7e73      	ldrb	r3, [r6, #25]
    147a:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    147c:	7f32      	ldrb	r2, [r6, #28]
    147e:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1480:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1482:	7f72      	ldrb	r2, [r6, #29]
    1484:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1486:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1488:	2224      	movs	r2, #36	; 0x24
    148a:	5cb2      	ldrb	r2, [r6, r2]
    148c:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    148e:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    1490:	2225      	movs	r2, #37	; 0x25
    1492:	5cb2      	ldrb	r2, [r6, r2]
    1494:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1496:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    1498:	7ab1      	ldrb	r1, [r6, #10]
    149a:	7af2      	ldrb	r2, [r6, #11]
    149c:	4311      	orrs	r1, r2
    149e:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    14a0:	8933      	ldrh	r3, [r6, #8]
    14a2:	2bff      	cmp	r3, #255	; 0xff
    14a4:	d100      	bne.n	14a8 <usart_init+0x17c>
    14a6:	e081      	b.n	15ac <usart_init+0x280>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    14a8:	2280      	movs	r2, #128	; 0x80
    14aa:	0452      	lsls	r2, r2, #17
    14ac:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    14ae:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    14b0:	232c      	movs	r3, #44	; 0x2c
    14b2:	5cf3      	ldrb	r3, [r6, r3]
    14b4:	2b00      	cmp	r3, #0
    14b6:	d103      	bne.n	14c0 <usart_init+0x194>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    14b8:	4b62      	ldr	r3, [pc, #392]	; (1644 <usart_init+0x318>)
    14ba:	789b      	ldrb	r3, [r3, #2]
    14bc:	079b      	lsls	r3, r3, #30
    14be:	d501      	bpl.n	14c4 <usart_init+0x198>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    14c0:	2380      	movs	r3, #128	; 0x80
    14c2:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    14c4:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    14c6:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    14c8:	2b00      	cmp	r3, #0
    14ca:	d1fc      	bne.n	14c6 <usart_init+0x19a>
	usart_hw->CTRLB.reg = ctrlb;
    14cc:	4643      	mov	r3, r8
    14ce:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    14d0:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    14d2:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    14d4:	2b00      	cmp	r3, #0
    14d6:	d1fc      	bne.n	14d2 <usart_init+0x1a6>
	usart_hw->CTRLA.reg = ctrla;
    14d8:	4643      	mov	r3, r8
    14da:	601f      	str	r7, [r3, #0]
    14dc:	ab0e      	add	r3, sp, #56	; 0x38
    14de:	2280      	movs	r2, #128	; 0x80
    14e0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    14e2:	2200      	movs	r2, #0
    14e4:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    14e6:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    14e8:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    14ea:	6b33      	ldr	r3, [r6, #48]	; 0x30
    14ec:	930a      	str	r3, [sp, #40]	; 0x28
    14ee:	6b73      	ldr	r3, [r6, #52]	; 0x34
    14f0:	930b      	str	r3, [sp, #44]	; 0x2c
    14f2:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    14f4:	930c      	str	r3, [sp, #48]	; 0x30
    14f6:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    14f8:	9302      	str	r3, [sp, #8]
    14fa:	930d      	str	r3, [sp, #52]	; 0x34
    14fc:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    14fe:	ae0a      	add	r6, sp, #40	; 0x28
    1500:	e063      	b.n	15ca <usart_init+0x29e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1502:	2308      	movs	r3, #8
    1504:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1506:	3b07      	subs	r3, #7
    1508:	9307      	str	r3, [sp, #28]
    150a:	e77e      	b.n	140a <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    150c:	6833      	ldr	r3, [r6, #0]
    150e:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    1510:	68f3      	ldr	r3, [r6, #12]
    1512:	469b      	mov	fp, r3
		config->sample_adjustment |
    1514:	6973      	ldr	r3, [r6, #20]
    1516:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1518:	7e33      	ldrb	r3, [r6, #24]
    151a:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    151c:	2326      	movs	r3, #38	; 0x26
    151e:	5cf3      	ldrb	r3, [r6, r3]
    1520:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    1522:	6873      	ldr	r3, [r6, #4]
    1524:	4699      	mov	r9, r3
	switch (transfer_mode)
    1526:	2b00      	cmp	r3, #0
    1528:	d018      	beq.n	155c <usart_init+0x230>
    152a:	2380      	movs	r3, #128	; 0x80
    152c:	055b      	lsls	r3, r3, #21
    152e:	4599      	cmp	r9, r3
    1530:	d001      	beq.n	1536 <usart_init+0x20a>
	enum status_code status_code = STATUS_OK;
    1532:	2000      	movs	r0, #0
    1534:	e025      	b.n	1582 <usart_init+0x256>
			if (!config->use_external_clock) {
    1536:	2327      	movs	r3, #39	; 0x27
    1538:	5cf3      	ldrb	r3, [r6, r3]
    153a:	2b00      	cmp	r3, #0
    153c:	d000      	beq.n	1540 <usart_init+0x214>
    153e:	e779      	b.n	1434 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    1540:	6a33      	ldr	r3, [r6, #32]
    1542:	001f      	movs	r7, r3
    1544:	b2c0      	uxtb	r0, r0
    1546:	4b40      	ldr	r3, [pc, #256]	; (1648 <usart_init+0x31c>)
    1548:	4798      	blx	r3
    154a:	0001      	movs	r1, r0
    154c:	220e      	movs	r2, #14
    154e:	ab06      	add	r3, sp, #24
    1550:	469c      	mov	ip, r3
    1552:	4462      	add	r2, ip
    1554:	0038      	movs	r0, r7
    1556:	4b3d      	ldr	r3, [pc, #244]	; (164c <usart_init+0x320>)
    1558:	4798      	blx	r3
    155a:	e012      	b.n	1582 <usart_init+0x256>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    155c:	2308      	movs	r3, #8
    155e:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1560:	2300      	movs	r3, #0
    1562:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    1564:	2327      	movs	r3, #39	; 0x27
    1566:	5cf3      	ldrb	r3, [r6, r3]
    1568:	2b00      	cmp	r3, #0
    156a:	d00e      	beq.n	158a <usart_init+0x25e>
				status_code =
    156c:	9b06      	ldr	r3, [sp, #24]
    156e:	9300      	str	r3, [sp, #0]
    1570:	9b07      	ldr	r3, [sp, #28]
    1572:	220e      	movs	r2, #14
    1574:	a906      	add	r1, sp, #24
    1576:	468c      	mov	ip, r1
    1578:	4462      	add	r2, ip
    157a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    157c:	6a30      	ldr	r0, [r6, #32]
    157e:	4f34      	ldr	r7, [pc, #208]	; (1650 <usart_init+0x324>)
    1580:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    1582:	2800      	cmp	r0, #0
    1584:	d000      	beq.n	1588 <usart_init+0x25c>
    1586:	e6e4      	b.n	1352 <usart_init+0x26>
    1588:	e754      	b.n	1434 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    158a:	6a33      	ldr	r3, [r6, #32]
    158c:	001f      	movs	r7, r3
    158e:	b2c0      	uxtb	r0, r0
    1590:	4b2d      	ldr	r3, [pc, #180]	; (1648 <usart_init+0x31c>)
    1592:	4798      	blx	r3
    1594:	0001      	movs	r1, r0
				status_code =
    1596:	9b06      	ldr	r3, [sp, #24]
    1598:	9300      	str	r3, [sp, #0]
    159a:	9b07      	ldr	r3, [sp, #28]
    159c:	220e      	movs	r2, #14
    159e:	a806      	add	r0, sp, #24
    15a0:	4684      	mov	ip, r0
    15a2:	4462      	add	r2, ip
    15a4:	0038      	movs	r0, r7
    15a6:	4f2a      	ldr	r7, [pc, #168]	; (1650 <usart_init+0x324>)
    15a8:	47b8      	blx	r7
    15aa:	e7ea      	b.n	1582 <usart_init+0x256>
		if(config->lin_slave_enable) {
    15ac:	7ef3      	ldrb	r3, [r6, #27]
    15ae:	2b00      	cmp	r3, #0
    15b0:	d100      	bne.n	15b4 <usart_init+0x288>
    15b2:	e77d      	b.n	14b0 <usart_init+0x184>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    15b4:	2380      	movs	r3, #128	; 0x80
    15b6:	04db      	lsls	r3, r3, #19
    15b8:	431f      	orrs	r7, r3
    15ba:	e779      	b.n	14b0 <usart_init+0x184>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    15bc:	0020      	movs	r0, r4
    15be:	4b25      	ldr	r3, [pc, #148]	; (1654 <usart_init+0x328>)
    15c0:	4798      	blx	r3
    15c2:	e007      	b.n	15d4 <usart_init+0x2a8>
    15c4:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    15c6:	2f04      	cmp	r7, #4
    15c8:	d00d      	beq.n	15e6 <usart_init+0x2ba>
    15ca:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    15cc:	00bb      	lsls	r3, r7, #2
    15ce:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    15d0:	2800      	cmp	r0, #0
    15d2:	d0f3      	beq.n	15bc <usart_init+0x290>
		if (current_pinmux != PINMUX_UNUSED) {
    15d4:	1c43      	adds	r3, r0, #1
    15d6:	d0f5      	beq.n	15c4 <usart_init+0x298>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    15d8:	a90e      	add	r1, sp, #56	; 0x38
    15da:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    15dc:	0c00      	lsrs	r0, r0, #16
    15de:	b2c0      	uxtb	r0, r0
    15e0:	4b1d      	ldr	r3, [pc, #116]	; (1658 <usart_init+0x32c>)
    15e2:	4798      	blx	r3
    15e4:	e7ee      	b.n	15c4 <usart_init+0x298>
		module->callback[i]            = NULL;
    15e6:	2300      	movs	r3, #0
    15e8:	60eb      	str	r3, [r5, #12]
    15ea:	612b      	str	r3, [r5, #16]
    15ec:	616b      	str	r3, [r5, #20]
    15ee:	61ab      	str	r3, [r5, #24]
    15f0:	61eb      	str	r3, [r5, #28]
    15f2:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    15f4:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    15f6:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    15f8:	2200      	movs	r2, #0
    15fa:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    15fc:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    15fe:	3330      	adds	r3, #48	; 0x30
    1600:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    1602:	3301      	adds	r3, #1
    1604:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    1606:	3301      	adds	r3, #1
    1608:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    160a:	3301      	adds	r3, #1
    160c:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    160e:	6828      	ldr	r0, [r5, #0]
    1610:	4b07      	ldr	r3, [pc, #28]	; (1630 <usart_init+0x304>)
    1612:	4798      	blx	r3
    1614:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    1616:	4911      	ldr	r1, [pc, #68]	; (165c <usart_init+0x330>)
    1618:	4b11      	ldr	r3, [pc, #68]	; (1660 <usart_init+0x334>)
    161a:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    161c:	00a4      	lsls	r4, r4, #2
    161e:	4b11      	ldr	r3, [pc, #68]	; (1664 <usart_init+0x338>)
    1620:	50e5      	str	r5, [r4, r3]
	return status_code;
    1622:	2000      	movs	r0, #0
    1624:	e695      	b.n	1352 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1626:	2310      	movs	r3, #16
    1628:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    162a:	2300      	movs	r3, #0
    162c:	9307      	str	r3, [sp, #28]
    162e:	e6ec      	b.n	140a <usart_init+0xde>
    1630:	00001225 	.word	0x00001225
    1634:	40000400 	.word	0x40000400
    1638:	00001f59 	.word	0x00001f59
    163c:	00001ecd 	.word	0x00001ecd
    1640:	00001061 	.word	0x00001061
    1644:	41002000 	.word	0x41002000
    1648:	00001f75 	.word	0x00001f75
    164c:	00000fa3 	.word	0x00000fa3
    1650:	00000fcd 	.word	0x00000fcd
    1654:	000010ad 	.word	0x000010ad
    1658:	00002051 	.word	0x00002051
    165c:	00001781 	.word	0x00001781
    1660:	00001261 	.word	0x00001261
    1664:	200002c8 	.word	0x200002c8

00001668 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1668:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    166a:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    166c:	2a00      	cmp	r2, #0
    166e:	d101      	bne.n	1674 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    1670:	0018      	movs	r0, r3
    1672:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    1674:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    1676:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    1678:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    167a:	2a00      	cmp	r2, #0
    167c:	d1f8      	bne.n	1670 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    167e:	6802      	ldr	r2, [r0, #0]
	usart_hw->DATA.reg = tx_data;
    1680:	8511      	strh	r1, [r2, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    1682:	2102      	movs	r1, #2
    1684:	7e13      	ldrb	r3, [r2, #24]
    1686:	420b      	tst	r3, r1
    1688:	d0fc      	beq.n	1684 <usart_write_wait+0x1c>
	return STATUS_OK;
    168a:	2300      	movs	r3, #0
    168c:	e7f0      	b.n	1670 <usart_write_wait+0x8>

0000168e <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    168e:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    1690:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    1692:	2a00      	cmp	r2, #0
    1694:	d101      	bne.n	169a <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    1696:	0018      	movs	r0, r3
    1698:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    169a:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    169c:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    169e:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    16a0:	2a00      	cmp	r2, #0
    16a2:	d1f8      	bne.n	1696 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    16a4:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    16a6:	7e10      	ldrb	r0, [r2, #24]
    16a8:	0740      	lsls	r0, r0, #29
    16aa:	d5f4      	bpl.n	1696 <usart_read_wait+0x8>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    16ac:	8b53      	ldrh	r3, [r2, #26]
    16ae:	b2db      	uxtb	r3, r3
	if (error_code) {
    16b0:	0698      	lsls	r0, r3, #26
    16b2:	d01d      	beq.n	16f0 <usart_read_wait+0x62>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    16b4:	0798      	lsls	r0, r3, #30
    16b6:	d503      	bpl.n	16c0 <usart_read_wait+0x32>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    16b8:	2302      	movs	r3, #2
    16ba:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    16bc:	3318      	adds	r3, #24
    16be:	e7ea      	b.n	1696 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    16c0:	0758      	lsls	r0, r3, #29
    16c2:	d503      	bpl.n	16cc <usart_read_wait+0x3e>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    16c4:	2304      	movs	r3, #4
    16c6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    16c8:	331a      	adds	r3, #26
    16ca:	e7e4      	b.n	1696 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    16cc:	07d8      	lsls	r0, r3, #31
    16ce:	d503      	bpl.n	16d8 <usart_read_wait+0x4a>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    16d0:	2301      	movs	r3, #1
    16d2:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    16d4:	3312      	adds	r3, #18
    16d6:	e7de      	b.n	1696 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    16d8:	06d8      	lsls	r0, r3, #27
    16da:	d503      	bpl.n	16e4 <usart_read_wait+0x56>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    16dc:	2310      	movs	r3, #16
    16de:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    16e0:	3332      	adds	r3, #50	; 0x32
    16e2:	e7d8      	b.n	1696 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    16e4:	069b      	lsls	r3, r3, #26
    16e6:	d503      	bpl.n	16f0 <usart_read_wait+0x62>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    16e8:	2320      	movs	r3, #32
    16ea:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    16ec:	3321      	adds	r3, #33	; 0x21
    16ee:	e7d2      	b.n	1696 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    16f0:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    16f2:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    16f4:	2300      	movs	r3, #0
    16f6:	e7ce      	b.n	1696 <usart_read_wait+0x8>

000016f8 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    16f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    16fa:	0004      	movs	r4, r0
    16fc:	000d      	movs	r5, r1
    16fe:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1700:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    1702:	4b0f      	ldr	r3, [pc, #60]	; (1740 <_usart_read_buffer+0x48>)
    1704:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    1706:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    1708:	b29b      	uxth	r3, r3
    170a:	2b00      	cmp	r3, #0
    170c:	d003      	beq.n	1716 <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
    170e:	4b0d      	ldr	r3, [pc, #52]	; (1744 <_usart_read_buffer+0x4c>)
    1710:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    1712:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    1714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    1716:	85a6      	strh	r6, [r4, #44]	; 0x2c
    1718:	4b0a      	ldr	r3, [pc, #40]	; (1744 <_usart_read_buffer+0x4c>)
    171a:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    171c:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    171e:	2205      	movs	r2, #5
    1720:	2332      	movs	r3, #50	; 0x32
    1722:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    1724:	3b2e      	subs	r3, #46	; 0x2e
    1726:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
    1728:	7a23      	ldrb	r3, [r4, #8]
    172a:	2b00      	cmp	r3, #0
    172c:	d001      	beq.n	1732 <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    172e:	2320      	movs	r3, #32
    1730:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
    1732:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
    1734:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
    1736:	2b00      	cmp	r3, #0
    1738:	d0ec      	beq.n	1714 <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    173a:	2308      	movs	r3, #8
    173c:	75bb      	strb	r3, [r7, #22]
    173e:	e7e9      	b.n	1714 <_usart_read_buffer+0x1c>
    1740:	000008ed 	.word	0x000008ed
    1744:	0000092d 	.word	0x0000092d

00001748 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    1748:	1c93      	adds	r3, r2, #2
    174a:	009b      	lsls	r3, r3, #2
    174c:	18c3      	adds	r3, r0, r3
    174e:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    1750:	2130      	movs	r1, #48	; 0x30
    1752:	2301      	movs	r3, #1
    1754:	4093      	lsls	r3, r2
    1756:	001a      	movs	r2, r3
    1758:	5c43      	ldrb	r3, [r0, r1]
    175a:	4313      	orrs	r3, r2
    175c:	5443      	strb	r3, [r0, r1]
}
    175e:	4770      	bx	lr

00001760 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    1760:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    1762:	2317      	movs	r3, #23
	if (length == 0) {
    1764:	2a00      	cmp	r2, #0
    1766:	d101      	bne.n	176c <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
    1768:	0018      	movs	r0, r3
    176a:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
    176c:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
    176e:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
    1770:	2c00      	cmp	r4, #0
    1772:	d0f9      	beq.n	1768 <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
    1774:	4b01      	ldr	r3, [pc, #4]	; (177c <usart_read_buffer_job+0x1c>)
    1776:	4798      	blx	r3
    1778:	0003      	movs	r3, r0
    177a:	e7f5      	b.n	1768 <usart_read_buffer_job+0x8>
    177c:	000016f9 	.word	0x000016f9

00001780 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    1780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    1782:	0080      	lsls	r0, r0, #2
    1784:	4b62      	ldr	r3, [pc, #392]	; (1910 <_usart_interrupt_handler+0x190>)
    1786:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    1788:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    178a:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    178c:	2b00      	cmp	r3, #0
    178e:	d1fc      	bne.n	178a <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    1790:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    1792:	7da6      	ldrb	r6, [r4, #22]
    1794:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    1796:	2330      	movs	r3, #48	; 0x30
    1798:	5ceb      	ldrb	r3, [r5, r3]
    179a:	2231      	movs	r2, #49	; 0x31
    179c:	5caf      	ldrb	r7, [r5, r2]
    179e:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    17a0:	07f3      	lsls	r3, r6, #31
    17a2:	d522      	bpl.n	17ea <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    17a4:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    17a6:	b29b      	uxth	r3, r3
    17a8:	2b00      	cmp	r3, #0
    17aa:	d01c      	beq.n	17e6 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    17ac:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    17ae:	7813      	ldrb	r3, [r2, #0]
    17b0:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    17b2:	1c51      	adds	r1, r2, #1
    17b4:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    17b6:	7969      	ldrb	r1, [r5, #5]
    17b8:	2901      	cmp	r1, #1
    17ba:	d00e      	beq.n	17da <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    17bc:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    17be:	05db      	lsls	r3, r3, #23
    17c0:	0ddb      	lsrs	r3, r3, #23
    17c2:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    17c4:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    17c6:	3b01      	subs	r3, #1
    17c8:	b29b      	uxth	r3, r3
    17ca:	85eb      	strh	r3, [r5, #46]	; 0x2e
    17cc:	2b00      	cmp	r3, #0
    17ce:	d10c      	bne.n	17ea <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    17d0:	3301      	adds	r3, #1
    17d2:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    17d4:	3301      	adds	r3, #1
    17d6:	75a3      	strb	r3, [r4, #22]
    17d8:	e007      	b.n	17ea <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    17da:	7851      	ldrb	r1, [r2, #1]
    17dc:	0209      	lsls	r1, r1, #8
    17de:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    17e0:	3202      	adds	r2, #2
    17e2:	62aa      	str	r2, [r5, #40]	; 0x28
    17e4:	e7eb      	b.n	17be <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    17e6:	2301      	movs	r3, #1
    17e8:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    17ea:	07b3      	lsls	r3, r6, #30
    17ec:	d506      	bpl.n	17fc <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    17ee:	2302      	movs	r3, #2
    17f0:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    17f2:	2200      	movs	r2, #0
    17f4:	3331      	adds	r3, #49	; 0x31
    17f6:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    17f8:	07fb      	lsls	r3, r7, #31
    17fa:	d41a      	bmi.n	1832 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    17fc:	0773      	lsls	r3, r6, #29
    17fe:	d565      	bpl.n	18cc <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    1800:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1802:	b29b      	uxth	r3, r3
    1804:	2b00      	cmp	r3, #0
    1806:	d05f      	beq.n	18c8 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1808:	8b63      	ldrh	r3, [r4, #26]
    180a:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    180c:	071a      	lsls	r2, r3, #28
    180e:	d414      	bmi.n	183a <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1810:	223f      	movs	r2, #63	; 0x3f
    1812:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    1814:	2b00      	cmp	r3, #0
    1816:	d034      	beq.n	1882 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    1818:	079a      	lsls	r2, r3, #30
    181a:	d511      	bpl.n	1840 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    181c:	221a      	movs	r2, #26
    181e:	2332      	movs	r3, #50	; 0x32
    1820:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1822:	3b30      	subs	r3, #48	; 0x30
    1824:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    1826:	077b      	lsls	r3, r7, #29
    1828:	d550      	bpl.n	18cc <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    182a:	0028      	movs	r0, r5
    182c:	696b      	ldr	r3, [r5, #20]
    182e:	4798      	blx	r3
    1830:	e04c      	b.n	18cc <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    1832:	0028      	movs	r0, r5
    1834:	68eb      	ldr	r3, [r5, #12]
    1836:	4798      	blx	r3
    1838:	e7e0      	b.n	17fc <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    183a:	2237      	movs	r2, #55	; 0x37
    183c:	4013      	ands	r3, r2
    183e:	e7e9      	b.n	1814 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1840:	075a      	lsls	r2, r3, #29
    1842:	d505      	bpl.n	1850 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    1844:	221e      	movs	r2, #30
    1846:	2332      	movs	r3, #50	; 0x32
    1848:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    184a:	3b2e      	subs	r3, #46	; 0x2e
    184c:	8363      	strh	r3, [r4, #26]
    184e:	e7ea      	b.n	1826 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1850:	07da      	lsls	r2, r3, #31
    1852:	d505      	bpl.n	1860 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    1854:	2213      	movs	r2, #19
    1856:	2332      	movs	r3, #50	; 0x32
    1858:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    185a:	3b31      	subs	r3, #49	; 0x31
    185c:	8363      	strh	r3, [r4, #26]
    185e:	e7e2      	b.n	1826 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    1860:	06da      	lsls	r2, r3, #27
    1862:	d505      	bpl.n	1870 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    1864:	2242      	movs	r2, #66	; 0x42
    1866:	2332      	movs	r3, #50	; 0x32
    1868:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    186a:	3b22      	subs	r3, #34	; 0x22
    186c:	8363      	strh	r3, [r4, #26]
    186e:	e7da      	b.n	1826 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    1870:	2220      	movs	r2, #32
    1872:	421a      	tst	r2, r3
    1874:	d0d7      	beq.n	1826 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    1876:	3221      	adds	r2, #33	; 0x21
    1878:	2332      	movs	r3, #50	; 0x32
    187a:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    187c:	3b12      	subs	r3, #18
    187e:	8363      	strh	r3, [r4, #26]
    1880:	e7d1      	b.n	1826 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    1882:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    1884:	05db      	lsls	r3, r3, #23
    1886:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    1888:	b2da      	uxtb	r2, r3
    188a:	6a69      	ldr	r1, [r5, #36]	; 0x24
    188c:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    188e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    1890:	1c51      	adds	r1, r2, #1
    1892:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1894:	7969      	ldrb	r1, [r5, #5]
    1896:	2901      	cmp	r1, #1
    1898:	d010      	beq.n	18bc <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    189a:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    189c:	3b01      	subs	r3, #1
    189e:	b29b      	uxth	r3, r3
    18a0:	85ab      	strh	r3, [r5, #44]	; 0x2c
    18a2:	2b00      	cmp	r3, #0
    18a4:	d112      	bne.n	18cc <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    18a6:	3304      	adds	r3, #4
    18a8:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    18aa:	2200      	movs	r2, #0
    18ac:	332e      	adds	r3, #46	; 0x2e
    18ae:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    18b0:	07bb      	lsls	r3, r7, #30
    18b2:	d50b      	bpl.n	18cc <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    18b4:	0028      	movs	r0, r5
    18b6:	692b      	ldr	r3, [r5, #16]
    18b8:	4798      	blx	r3
    18ba:	e007      	b.n	18cc <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    18bc:	0a1b      	lsrs	r3, r3, #8
    18be:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    18c0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    18c2:	3301      	adds	r3, #1
    18c4:	626b      	str	r3, [r5, #36]	; 0x24
    18c6:	e7e8      	b.n	189a <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    18c8:	2304      	movs	r3, #4
    18ca:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    18cc:	06f3      	lsls	r3, r6, #27
    18ce:	d504      	bpl.n	18da <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    18d0:	2310      	movs	r3, #16
    18d2:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    18d4:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    18d6:	06fb      	lsls	r3, r7, #27
    18d8:	d40e      	bmi.n	18f8 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    18da:	06b3      	lsls	r3, r6, #26
    18dc:	d504      	bpl.n	18e8 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    18de:	2320      	movs	r3, #32
    18e0:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    18e2:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    18e4:	073b      	lsls	r3, r7, #28
    18e6:	d40b      	bmi.n	1900 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    18e8:	0733      	lsls	r3, r6, #28
    18ea:	d504      	bpl.n	18f6 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    18ec:	2308      	movs	r3, #8
    18ee:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    18f0:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    18f2:	06bb      	lsls	r3, r7, #26
    18f4:	d408      	bmi.n	1908 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    18f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    18f8:	0028      	movs	r0, r5
    18fa:	69eb      	ldr	r3, [r5, #28]
    18fc:	4798      	blx	r3
    18fe:	e7ec      	b.n	18da <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    1900:	0028      	movs	r0, r5
    1902:	69ab      	ldr	r3, [r5, #24]
    1904:	4798      	blx	r3
    1906:	e7ef      	b.n	18e8 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    1908:	6a2b      	ldr	r3, [r5, #32]
    190a:	0028      	movs	r0, r5
    190c:	4798      	blx	r3
}
    190e:	e7f2      	b.n	18f6 <_usart_interrupt_handler+0x176>
    1910:	200002c8 	.word	0x200002c8

00001914 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1914:	b510      	push	{r4, lr}
	switch (clock_source) {
    1916:	2808      	cmp	r0, #8
    1918:	d803      	bhi.n	1922 <system_clock_source_get_hz+0xe>
    191a:	0080      	lsls	r0, r0, #2
    191c:	4b1c      	ldr	r3, [pc, #112]	; (1990 <system_clock_source_get_hz+0x7c>)
    191e:	581b      	ldr	r3, [r3, r0]
    1920:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    1922:	2000      	movs	r0, #0
    1924:	e032      	b.n	198c <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    1926:	4b1b      	ldr	r3, [pc, #108]	; (1994 <system_clock_source_get_hz+0x80>)
    1928:	6918      	ldr	r0, [r3, #16]
    192a:	e02f      	b.n	198c <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    192c:	4b1a      	ldr	r3, [pc, #104]	; (1998 <system_clock_source_get_hz+0x84>)
    192e:	6a1b      	ldr	r3, [r3, #32]
    1930:	059b      	lsls	r3, r3, #22
    1932:	0f9b      	lsrs	r3, r3, #30
    1934:	4819      	ldr	r0, [pc, #100]	; (199c <system_clock_source_get_hz+0x88>)
    1936:	40d8      	lsrs	r0, r3
    1938:	e028      	b.n	198c <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    193a:	4b16      	ldr	r3, [pc, #88]	; (1994 <system_clock_source_get_hz+0x80>)
    193c:	6958      	ldr	r0, [r3, #20]
    193e:	e025      	b.n	198c <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1940:	4b14      	ldr	r3, [pc, #80]	; (1994 <system_clock_source_get_hz+0x80>)
    1942:	681b      	ldr	r3, [r3, #0]
			return 0;
    1944:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1946:	079b      	lsls	r3, r3, #30
    1948:	d520      	bpl.n	198c <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    194a:	4913      	ldr	r1, [pc, #76]	; (1998 <system_clock_source_get_hz+0x84>)
    194c:	2210      	movs	r2, #16
    194e:	68cb      	ldr	r3, [r1, #12]
    1950:	421a      	tst	r2, r3
    1952:	d0fc      	beq.n	194e <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    1954:	4b0f      	ldr	r3, [pc, #60]	; (1994 <system_clock_source_get_hz+0x80>)
    1956:	681a      	ldr	r2, [r3, #0]
    1958:	2324      	movs	r3, #36	; 0x24
    195a:	4013      	ands	r3, r2
    195c:	2b04      	cmp	r3, #4
    195e:	d001      	beq.n	1964 <system_clock_source_get_hz+0x50>
			return 48000000UL;
    1960:	480f      	ldr	r0, [pc, #60]	; (19a0 <system_clock_source_get_hz+0x8c>)
    1962:	e013      	b.n	198c <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1964:	2000      	movs	r0, #0
    1966:	4b0f      	ldr	r3, [pc, #60]	; (19a4 <system_clock_source_get_hz+0x90>)
    1968:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    196a:	4b0a      	ldr	r3, [pc, #40]	; (1994 <system_clock_source_get_hz+0x80>)
    196c:	689b      	ldr	r3, [r3, #8]
    196e:	041b      	lsls	r3, r3, #16
    1970:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1972:	4358      	muls	r0, r3
    1974:	e00a      	b.n	198c <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1976:	2350      	movs	r3, #80	; 0x50
    1978:	4a07      	ldr	r2, [pc, #28]	; (1998 <system_clock_source_get_hz+0x84>)
    197a:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    197c:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    197e:	075b      	lsls	r3, r3, #29
    1980:	d504      	bpl.n	198c <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    1982:	4b04      	ldr	r3, [pc, #16]	; (1994 <system_clock_source_get_hz+0x80>)
    1984:	68d8      	ldr	r0, [r3, #12]
    1986:	e001      	b.n	198c <system_clock_source_get_hz+0x78>
		return 32768UL;
    1988:	2080      	movs	r0, #128	; 0x80
    198a:	0200      	lsls	r0, r0, #8
	}
}
    198c:	bd10      	pop	{r4, pc}
    198e:	46c0      	nop			; (mov r8, r8)
    1990:	000051dc 	.word	0x000051dc
    1994:	20000288 	.word	0x20000288
    1998:	40000800 	.word	0x40000800
    199c:	007a1200 	.word	0x007a1200
    19a0:	02dc6c00 	.word	0x02dc6c00
    19a4:	00001f75 	.word	0x00001f75

000019a8 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    19a8:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    19aa:	490c      	ldr	r1, [pc, #48]	; (19dc <system_clock_source_osc8m_set_config+0x34>)
    19ac:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    19ae:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    19b0:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    19b2:	7840      	ldrb	r0, [r0, #1]
    19b4:	2201      	movs	r2, #1
    19b6:	4010      	ands	r0, r2
    19b8:	0180      	lsls	r0, r0, #6
    19ba:	2640      	movs	r6, #64	; 0x40
    19bc:	43b3      	bics	r3, r6
    19be:	4303      	orrs	r3, r0
    19c0:	402a      	ands	r2, r5
    19c2:	01d2      	lsls	r2, r2, #7
    19c4:	2080      	movs	r0, #128	; 0x80
    19c6:	4383      	bics	r3, r0
    19c8:	4313      	orrs	r3, r2
    19ca:	2203      	movs	r2, #3
    19cc:	4022      	ands	r2, r4
    19ce:	0212      	lsls	r2, r2, #8
    19d0:	4803      	ldr	r0, [pc, #12]	; (19e0 <system_clock_source_osc8m_set_config+0x38>)
    19d2:	4003      	ands	r3, r0
    19d4:	4313      	orrs	r3, r2
    19d6:	620b      	str	r3, [r1, #32]
}
    19d8:	bd70      	pop	{r4, r5, r6, pc}
    19da:	46c0      	nop			; (mov r8, r8)
    19dc:	40000800 	.word	0x40000800
    19e0:	fffffcff 	.word	0xfffffcff

000019e4 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    19e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    19e6:	46de      	mov	lr, fp
    19e8:	4657      	mov	r7, sl
    19ea:	464e      	mov	r6, r9
    19ec:	4645      	mov	r5, r8
    19ee:	b5e0      	push	{r5, r6, r7, lr}
    19f0:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    19f2:	4b26      	ldr	r3, [pc, #152]	; (1a8c <system_clock_source_xosc32k_set_config+0xa8>)
    19f4:	469b      	mov	fp, r3
    19f6:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    19f8:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    19fa:	7800      	ldrb	r0, [r0, #0]
    19fc:	4242      	negs	r2, r0
    19fe:	4142      	adcs	r2, r0
    1a00:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    1a02:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    1a04:	78ca      	ldrb	r2, [r1, #3]
    1a06:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    1a08:	790a      	ldrb	r2, [r1, #4]
    1a0a:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    1a0c:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1a0e:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    1a10:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    1a12:	688a      	ldr	r2, [r1, #8]
    1a14:	491e      	ldr	r1, [pc, #120]	; (1a90 <system_clock_source_xosc32k_set_config+0xac>)
    1a16:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    1a18:	2101      	movs	r1, #1
    1a1a:	464a      	mov	r2, r9
    1a1c:	0092      	lsls	r2, r2, #2
    1a1e:	4691      	mov	r9, r2
    1a20:	2204      	movs	r2, #4
    1a22:	4393      	bics	r3, r2
    1a24:	464a      	mov	r2, r9
    1a26:	4313      	orrs	r3, r2
    1a28:	4642      	mov	r2, r8
    1a2a:	400a      	ands	r2, r1
    1a2c:	00d2      	lsls	r2, r2, #3
    1a2e:	4690      	mov	r8, r2
    1a30:	2208      	movs	r2, #8
    1a32:	4393      	bics	r3, r2
    1a34:	4642      	mov	r2, r8
    1a36:	4313      	orrs	r3, r2
    1a38:	4662      	mov	r2, ip
    1a3a:	400a      	ands	r2, r1
    1a3c:	0112      	lsls	r2, r2, #4
    1a3e:	4694      	mov	ip, r2
    1a40:	2210      	movs	r2, #16
    1a42:	4393      	bics	r3, r2
    1a44:	4662      	mov	r2, ip
    1a46:	4313      	orrs	r3, r2
    1a48:	4008      	ands	r0, r1
    1a4a:	0140      	lsls	r0, r0, #5
    1a4c:	2220      	movs	r2, #32
    1a4e:	4393      	bics	r3, r2
    1a50:	4303      	orrs	r3, r0
    1a52:	400f      	ands	r7, r1
    1a54:	01bf      	lsls	r7, r7, #6
    1a56:	2040      	movs	r0, #64	; 0x40
    1a58:	4383      	bics	r3, r0
    1a5a:	433b      	orrs	r3, r7
    1a5c:	400e      	ands	r6, r1
    1a5e:	01f6      	lsls	r6, r6, #7
    1a60:	3040      	adds	r0, #64	; 0x40
    1a62:	4383      	bics	r3, r0
    1a64:	4333      	orrs	r3, r6
    1a66:	3879      	subs	r0, #121	; 0x79
    1a68:	4005      	ands	r5, r0
    1a6a:	022d      	lsls	r5, r5, #8
    1a6c:	4809      	ldr	r0, [pc, #36]	; (1a94 <system_clock_source_xosc32k_set_config+0xb0>)
    1a6e:	4003      	ands	r3, r0
    1a70:	432b      	orrs	r3, r5
    1a72:	4021      	ands	r1, r4
    1a74:	0309      	lsls	r1, r1, #12
    1a76:	4808      	ldr	r0, [pc, #32]	; (1a98 <system_clock_source_xosc32k_set_config+0xb4>)
    1a78:	4003      	ands	r3, r0
    1a7a:	430b      	orrs	r3, r1
    1a7c:	465a      	mov	r2, fp
    1a7e:	8293      	strh	r3, [r2, #20]
}
    1a80:	bc3c      	pop	{r2, r3, r4, r5}
    1a82:	4690      	mov	r8, r2
    1a84:	4699      	mov	r9, r3
    1a86:	46a2      	mov	sl, r4
    1a88:	46ab      	mov	fp, r5
    1a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1a8c:	40000800 	.word	0x40000800
    1a90:	20000288 	.word	0x20000288
    1a94:	fffff8ff 	.word	0xfffff8ff
    1a98:	ffffefff 	.word	0xffffefff

00001a9c <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    1a9c:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1a9e:	7a03      	ldrb	r3, [r0, #8]
    1aa0:	069b      	lsls	r3, r3, #26
    1aa2:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    1aa4:	8942      	ldrh	r2, [r0, #10]
    1aa6:	0592      	lsls	r2, r2, #22
    1aa8:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1aaa:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    1aac:	4918      	ldr	r1, [pc, #96]	; (1b10 <system_clock_source_dfll_set_config+0x74>)
    1aae:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    1ab0:	7983      	ldrb	r3, [r0, #6]
    1ab2:	79c2      	ldrb	r2, [r0, #7]
    1ab4:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    1ab6:	8842      	ldrh	r2, [r0, #2]
    1ab8:	8884      	ldrh	r4, [r0, #4]
    1aba:	4322      	orrs	r2, r4
    1abc:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    1abe:	7842      	ldrb	r2, [r0, #1]
    1ac0:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    1ac2:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    1ac4:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    1ac6:	7803      	ldrb	r3, [r0, #0]
    1ac8:	2b04      	cmp	r3, #4
    1aca:	d011      	beq.n	1af0 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    1acc:	2b20      	cmp	r3, #32
    1ace:	d10e      	bne.n	1aee <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1ad0:	7b03      	ldrb	r3, [r0, #12]
    1ad2:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1ad4:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1ad6:	4313      	orrs	r3, r2
    1ad8:	89c2      	ldrh	r2, [r0, #14]
    1ada:	0412      	lsls	r2, r2, #16
    1adc:	490d      	ldr	r1, [pc, #52]	; (1b14 <system_clock_source_dfll_set_config+0x78>)
    1ade:	400a      	ands	r2, r1
    1ae0:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    1ae2:	4a0b      	ldr	r2, [pc, #44]	; (1b10 <system_clock_source_dfll_set_config+0x74>)
    1ae4:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    1ae6:	6811      	ldr	r1, [r2, #0]
    1ae8:	4b0b      	ldr	r3, [pc, #44]	; (1b18 <system_clock_source_dfll_set_config+0x7c>)
    1aea:	430b      	orrs	r3, r1
    1aec:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    1aee:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1af0:	7b03      	ldrb	r3, [r0, #12]
    1af2:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1af4:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1af6:	4313      	orrs	r3, r2
    1af8:	89c2      	ldrh	r2, [r0, #14]
    1afa:	0412      	lsls	r2, r2, #16
    1afc:	4905      	ldr	r1, [pc, #20]	; (1b14 <system_clock_source_dfll_set_config+0x78>)
    1afe:	400a      	ands	r2, r1
    1b00:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    1b02:	4a03      	ldr	r2, [pc, #12]	; (1b10 <system_clock_source_dfll_set_config+0x74>)
    1b04:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    1b06:	6813      	ldr	r3, [r2, #0]
    1b08:	2104      	movs	r1, #4
    1b0a:	430b      	orrs	r3, r1
    1b0c:	6013      	str	r3, [r2, #0]
    1b0e:	e7ee      	b.n	1aee <system_clock_source_dfll_set_config+0x52>
    1b10:	20000288 	.word	0x20000288
    1b14:	03ff0000 	.word	0x03ff0000
    1b18:	00000424 	.word	0x00000424

00001b1c <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1b1c:	2808      	cmp	r0, #8
    1b1e:	d803      	bhi.n	1b28 <system_clock_source_enable+0xc>
    1b20:	0080      	lsls	r0, r0, #2
    1b22:	4b25      	ldr	r3, [pc, #148]	; (1bb8 <system_clock_source_enable+0x9c>)
    1b24:	581b      	ldr	r3, [r3, r0]
    1b26:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1b28:	2017      	movs	r0, #23
    1b2a:	e044      	b.n	1bb6 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1b2c:	4a23      	ldr	r2, [pc, #140]	; (1bbc <system_clock_source_enable+0xa0>)
    1b2e:	6a13      	ldr	r3, [r2, #32]
    1b30:	2102      	movs	r1, #2
    1b32:	430b      	orrs	r3, r1
    1b34:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    1b36:	2000      	movs	r0, #0
    1b38:	e03d      	b.n	1bb6 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1b3a:	4a20      	ldr	r2, [pc, #128]	; (1bbc <system_clock_source_enable+0xa0>)
    1b3c:	6993      	ldr	r3, [r2, #24]
    1b3e:	2102      	movs	r1, #2
    1b40:	430b      	orrs	r3, r1
    1b42:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    1b44:	2000      	movs	r0, #0
		break;
    1b46:	e036      	b.n	1bb6 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1b48:	4a1c      	ldr	r2, [pc, #112]	; (1bbc <system_clock_source_enable+0xa0>)
    1b4a:	8a13      	ldrh	r3, [r2, #16]
    1b4c:	2102      	movs	r1, #2
    1b4e:	430b      	orrs	r3, r1
    1b50:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    1b52:	2000      	movs	r0, #0
		break;
    1b54:	e02f      	b.n	1bb6 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1b56:	4a19      	ldr	r2, [pc, #100]	; (1bbc <system_clock_source_enable+0xa0>)
    1b58:	8a93      	ldrh	r3, [r2, #20]
    1b5a:	2102      	movs	r1, #2
    1b5c:	430b      	orrs	r3, r1
    1b5e:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    1b60:	2000      	movs	r0, #0
		break;
    1b62:	e028      	b.n	1bb6 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1b64:	4916      	ldr	r1, [pc, #88]	; (1bc0 <system_clock_source_enable+0xa4>)
    1b66:	680b      	ldr	r3, [r1, #0]
    1b68:	2202      	movs	r2, #2
    1b6a:	4313      	orrs	r3, r2
    1b6c:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1b6e:	4b13      	ldr	r3, [pc, #76]	; (1bbc <system_clock_source_enable+0xa0>)
    1b70:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1b72:	0019      	movs	r1, r3
    1b74:	320e      	adds	r2, #14
    1b76:	68cb      	ldr	r3, [r1, #12]
    1b78:	421a      	tst	r2, r3
    1b7a:	d0fc      	beq.n	1b76 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1b7c:	4a10      	ldr	r2, [pc, #64]	; (1bc0 <system_clock_source_enable+0xa4>)
    1b7e:	6891      	ldr	r1, [r2, #8]
    1b80:	4b0e      	ldr	r3, [pc, #56]	; (1bbc <system_clock_source_enable+0xa0>)
    1b82:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1b84:	6852      	ldr	r2, [r2, #4]
    1b86:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    1b88:	2200      	movs	r2, #0
    1b8a:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1b8c:	0019      	movs	r1, r3
    1b8e:	3210      	adds	r2, #16
    1b90:	68cb      	ldr	r3, [r1, #12]
    1b92:	421a      	tst	r2, r3
    1b94:	d0fc      	beq.n	1b90 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1b96:	4b0a      	ldr	r3, [pc, #40]	; (1bc0 <system_clock_source_enable+0xa4>)
    1b98:	681b      	ldr	r3, [r3, #0]
    1b9a:	b29b      	uxth	r3, r3
    1b9c:	4a07      	ldr	r2, [pc, #28]	; (1bbc <system_clock_source_enable+0xa0>)
    1b9e:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    1ba0:	2000      	movs	r0, #0
    1ba2:	e008      	b.n	1bb6 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1ba4:	4905      	ldr	r1, [pc, #20]	; (1bbc <system_clock_source_enable+0xa0>)
    1ba6:	2244      	movs	r2, #68	; 0x44
    1ba8:	5c8b      	ldrb	r3, [r1, r2]
    1baa:	2002      	movs	r0, #2
    1bac:	4303      	orrs	r3, r0
    1bae:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    1bb0:	2000      	movs	r0, #0
		break;
    1bb2:	e000      	b.n	1bb6 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    1bb4:	2000      	movs	r0, #0
}
    1bb6:	4770      	bx	lr
    1bb8:	00005200 	.word	0x00005200
    1bbc:	40000800 	.word	0x40000800
    1bc0:	20000288 	.word	0x20000288

00001bc4 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1bc6:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1bc8:	22c2      	movs	r2, #194	; 0xc2
    1bca:	00d2      	lsls	r2, r2, #3
    1bcc:	4b47      	ldr	r3, [pc, #284]	; (1cec <system_clock_init+0x128>)
    1bce:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1bd0:	4947      	ldr	r1, [pc, #284]	; (1cf0 <system_clock_init+0x12c>)
    1bd2:	684b      	ldr	r3, [r1, #4]
    1bd4:	221e      	movs	r2, #30
    1bd6:	4393      	bics	r3, r2
    1bd8:	3a1c      	subs	r2, #28
    1bda:	4313      	orrs	r3, r2
    1bdc:	604b      	str	r3, [r1, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    1bde:	ab01      	add	r3, sp, #4
    1be0:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1be2:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1be4:	4d43      	ldr	r5, [pc, #268]	; (1cf4 <system_clock_init+0x130>)
    1be6:	b2e0      	uxtb	r0, r4
    1be8:	a901      	add	r1, sp, #4
    1bea:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1bec:	3401      	adds	r4, #1
    1bee:	2c25      	cmp	r4, #37	; 0x25
    1bf0:	d1f9      	bne.n	1be6 <system_clock_init+0x22>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    1bf2:	a80a      	add	r0, sp, #40	; 0x28
    1bf4:	2300      	movs	r3, #0
    1bf6:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    1bf8:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    1bfa:	2280      	movs	r2, #128	; 0x80
    1bfc:	0212      	lsls	r2, r2, #8
    1bfe:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    1c00:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    1c02:	2201      	movs	r2, #1
    1c04:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    1c06:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    1c08:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    1c0a:	3205      	adds	r2, #5
    1c0c:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    1c0e:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    1c10:	4b39      	ldr	r3, [pc, #228]	; (1cf8 <system_clock_init+0x134>)
    1c12:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    1c14:	2005      	movs	r0, #5
    1c16:	4b39      	ldr	r3, [pc, #228]	; (1cfc <system_clock_init+0x138>)
    1c18:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1c1a:	4934      	ldr	r1, [pc, #208]	; (1cec <system_clock_init+0x128>)
    1c1c:	2202      	movs	r2, #2
    1c1e:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    1c20:	421a      	tst	r2, r3
    1c22:	d0fc      	beq.n	1c1e <system_clock_init+0x5a>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    1c24:	4a31      	ldr	r2, [pc, #196]	; (1cec <system_clock_init+0x128>)
    1c26:	8a93      	ldrh	r3, [r2, #20]
    1c28:	2180      	movs	r1, #128	; 0x80
    1c2a:	430b      	orrs	r3, r1
    1c2c:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    1c2e:	ab05      	add	r3, sp, #20
    1c30:	2100      	movs	r1, #0
    1c32:	2200      	movs	r2, #0
    1c34:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    1c36:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    1c38:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    1c3a:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    1c3c:	313f      	adds	r1, #63	; 0x3f
    1c3e:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    1c40:	393b      	subs	r1, #59	; 0x3b
    1c42:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    1c44:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    1c46:	4b2e      	ldr	r3, [pc, #184]	; (1d00 <system_clock_init+0x13c>)
    1c48:	681b      	ldr	r3, [r3, #0]
    1c4a:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    1c4c:	2b3f      	cmp	r3, #63	; 0x3f
    1c4e:	d04b      	beq.n	1ce8 <system_clock_init+0x124>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    1c50:	a805      	add	r0, sp, #20
    1c52:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    1c54:	23b7      	movs	r3, #183	; 0xb7
    1c56:	00db      	lsls	r3, r3, #3
    1c58:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    1c5a:	2307      	movs	r3, #7
    1c5c:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    1c5e:	3338      	adds	r3, #56	; 0x38
    1c60:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    1c62:	4b28      	ldr	r3, [pc, #160]	; (1d04 <system_clock_init+0x140>)
    1c64:	4798      	blx	r3
	config->run_in_standby  = false;
    1c66:	a804      	add	r0, sp, #16
    1c68:	2500      	movs	r5, #0
    1c6a:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    1c6c:	2601      	movs	r6, #1
    1c6e:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1c70:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1c72:	4b25      	ldr	r3, [pc, #148]	; (1d08 <system_clock_init+0x144>)
    1c74:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1c76:	2006      	movs	r0, #6
    1c78:	4f20      	ldr	r7, [pc, #128]	; (1cfc <system_clock_init+0x138>)
    1c7a:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1c7c:	4b23      	ldr	r3, [pc, #140]	; (1d0c <system_clock_init+0x148>)
    1c7e:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1c80:	ac01      	add	r4, sp, #4
    1c82:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    1c84:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    1c86:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    1c88:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    1c8a:	2305      	movs	r3, #5
    1c8c:	7023      	strb	r3, [r4, #0]
    1c8e:	0021      	movs	r1, r4
    1c90:	2001      	movs	r0, #1
    1c92:	4b1f      	ldr	r3, [pc, #124]	; (1d10 <system_clock_init+0x14c>)
    1c94:	4798      	blx	r3
    1c96:	2001      	movs	r0, #1
    1c98:	4b1e      	ldr	r3, [pc, #120]	; (1d14 <system_clock_init+0x150>)
    1c9a:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    1c9c:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    1c9e:	0021      	movs	r1, r4
    1ca0:	2000      	movs	r0, #0
    1ca2:	4b14      	ldr	r3, [pc, #80]	; (1cf4 <system_clock_init+0x130>)
    1ca4:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    1ca6:	2000      	movs	r0, #0
    1ca8:	4b1b      	ldr	r3, [pc, #108]	; (1d18 <system_clock_init+0x154>)
    1caa:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    1cac:	2007      	movs	r0, #7
    1cae:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1cb0:	490e      	ldr	r1, [pc, #56]	; (1cec <system_clock_init+0x128>)
    1cb2:	22d0      	movs	r2, #208	; 0xd0
    1cb4:	68cb      	ldr	r3, [r1, #12]
    1cb6:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    1cb8:	2bd0      	cmp	r3, #208	; 0xd0
    1cba:	d1fb      	bne.n	1cb4 <system_clock_init+0xf0>
	PM->CPUSEL.reg = (uint32_t)divider;
    1cbc:	4a17      	ldr	r2, [pc, #92]	; (1d1c <system_clock_init+0x158>)
    1cbe:	2300      	movs	r3, #0
    1cc0:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    1cc2:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    1cc4:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    1cc6:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    1cc8:	a901      	add	r1, sp, #4
    1cca:	2201      	movs	r2, #1
    1ccc:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    1cce:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    1cd0:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    1cd2:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1cd4:	3307      	adds	r3, #7
    1cd6:	700b      	strb	r3, [r1, #0]
    1cd8:	2000      	movs	r0, #0
    1cda:	4b0d      	ldr	r3, [pc, #52]	; (1d10 <system_clock_init+0x14c>)
    1cdc:	4798      	blx	r3
    1cde:	2000      	movs	r0, #0
    1ce0:	4b0c      	ldr	r3, [pc, #48]	; (1d14 <system_clock_init+0x150>)
    1ce2:	4798      	blx	r3
#endif
}
    1ce4:	b00f      	add	sp, #60	; 0x3c
    1ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    1ce8:	3b20      	subs	r3, #32
    1cea:	e7b1      	b.n	1c50 <system_clock_init+0x8c>
    1cec:	40000800 	.word	0x40000800
    1cf0:	41004000 	.word	0x41004000
    1cf4:	00001f59 	.word	0x00001f59
    1cf8:	000019e5 	.word	0x000019e5
    1cfc:	00001b1d 	.word	0x00001b1d
    1d00:	00806024 	.word	0x00806024
    1d04:	00001a9d 	.word	0x00001a9d
    1d08:	000019a9 	.word	0x000019a9
    1d0c:	00001d21 	.word	0x00001d21
    1d10:	00001d45 	.word	0x00001d45
    1d14:	00001dfd 	.word	0x00001dfd
    1d18:	00001ecd 	.word	0x00001ecd
    1d1c:	40000400 	.word	0x40000400

00001d20 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    1d20:	4a06      	ldr	r2, [pc, #24]	; (1d3c <system_gclk_init+0x1c>)
    1d22:	6993      	ldr	r3, [r2, #24]
    1d24:	2108      	movs	r1, #8
    1d26:	430b      	orrs	r3, r1
    1d28:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1d2a:	2201      	movs	r2, #1
    1d2c:	4b04      	ldr	r3, [pc, #16]	; (1d40 <system_gclk_init+0x20>)
    1d2e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1d30:	0019      	movs	r1, r3
    1d32:	780b      	ldrb	r3, [r1, #0]
    1d34:	4213      	tst	r3, r2
    1d36:	d1fc      	bne.n	1d32 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1d38:	4770      	bx	lr
    1d3a:	46c0      	nop			; (mov r8, r8)
    1d3c:	40000400 	.word	0x40000400
    1d40:	40000c00 	.word	0x40000c00

00001d44 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1d44:	b570      	push	{r4, r5, r6, lr}
    1d46:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1d48:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1d4a:	780d      	ldrb	r5, [r1, #0]
    1d4c:	022d      	lsls	r5, r5, #8
    1d4e:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1d50:	784b      	ldrb	r3, [r1, #1]
    1d52:	2b00      	cmp	r3, #0
    1d54:	d002      	beq.n	1d5c <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1d56:	2380      	movs	r3, #128	; 0x80
    1d58:	02db      	lsls	r3, r3, #11
    1d5a:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1d5c:	7a4b      	ldrb	r3, [r1, #9]
    1d5e:	2b00      	cmp	r3, #0
    1d60:	d002      	beq.n	1d68 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1d62:	2380      	movs	r3, #128	; 0x80
    1d64:	031b      	lsls	r3, r3, #12
    1d66:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1d68:	6848      	ldr	r0, [r1, #4]
    1d6a:	2801      	cmp	r0, #1
    1d6c:	d910      	bls.n	1d90 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1d6e:	1e43      	subs	r3, r0, #1
    1d70:	4218      	tst	r0, r3
    1d72:	d134      	bne.n	1dde <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1d74:	2802      	cmp	r0, #2
    1d76:	d930      	bls.n	1dda <system_gclk_gen_set_config+0x96>
    1d78:	2302      	movs	r3, #2
    1d7a:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1d7c:	3201      	adds	r2, #1
						mask <<= 1) {
    1d7e:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    1d80:	4298      	cmp	r0, r3
    1d82:	d8fb      	bhi.n	1d7c <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1d84:	0212      	lsls	r2, r2, #8
    1d86:	4332      	orrs	r2, r6
    1d88:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1d8a:	2380      	movs	r3, #128	; 0x80
    1d8c:	035b      	lsls	r3, r3, #13
    1d8e:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1d90:	7a0b      	ldrb	r3, [r1, #8]
    1d92:	2b00      	cmp	r3, #0
    1d94:	d002      	beq.n	1d9c <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1d96:	2380      	movs	r3, #128	; 0x80
    1d98:	039b      	lsls	r3, r3, #14
    1d9a:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1d9c:	4a13      	ldr	r2, [pc, #76]	; (1dec <system_gclk_gen_set_config+0xa8>)
    1d9e:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    1da0:	b25b      	sxtb	r3, r3
    1da2:	2b00      	cmp	r3, #0
    1da4:	dbfb      	blt.n	1d9e <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    1da6:	4b12      	ldr	r3, [pc, #72]	; (1df0 <system_gclk_gen_set_config+0xac>)
    1da8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1daa:	4b12      	ldr	r3, [pc, #72]	; (1df4 <system_gclk_gen_set_config+0xb0>)
    1dac:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1dae:	4a0f      	ldr	r2, [pc, #60]	; (1dec <system_gclk_gen_set_config+0xa8>)
    1db0:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1db2:	b25b      	sxtb	r3, r3
    1db4:	2b00      	cmp	r3, #0
    1db6:	dbfb      	blt.n	1db0 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1db8:	4b0c      	ldr	r3, [pc, #48]	; (1dec <system_gclk_gen_set_config+0xa8>)
    1dba:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1dbc:	001a      	movs	r2, r3
    1dbe:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    1dc0:	b25b      	sxtb	r3, r3
    1dc2:	2b00      	cmp	r3, #0
    1dc4:	dbfb      	blt.n	1dbe <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1dc6:	4a09      	ldr	r2, [pc, #36]	; (1dec <system_gclk_gen_set_config+0xa8>)
    1dc8:	6853      	ldr	r3, [r2, #4]
    1dca:	2180      	movs	r1, #128	; 0x80
    1dcc:	0249      	lsls	r1, r1, #9
    1dce:	400b      	ands	r3, r1
    1dd0:	431d      	orrs	r5, r3
    1dd2:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    1dd4:	4b08      	ldr	r3, [pc, #32]	; (1df8 <system_gclk_gen_set_config+0xb4>)
    1dd6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1dd8:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    1dda:	2200      	movs	r2, #0
    1ddc:	e7d2      	b.n	1d84 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1dde:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    1de0:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1de2:	2380      	movs	r3, #128	; 0x80
    1de4:	029b      	lsls	r3, r3, #10
    1de6:	431d      	orrs	r5, r3
    1de8:	e7d2      	b.n	1d90 <system_gclk_gen_set_config+0x4c>
    1dea:	46c0      	nop			; (mov r8, r8)
    1dec:	40000c00 	.word	0x40000c00
    1df0:	000008ed 	.word	0x000008ed
    1df4:	40000c08 	.word	0x40000c08
    1df8:	0000092d 	.word	0x0000092d

00001dfc <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1dfc:	b510      	push	{r4, lr}
    1dfe:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1e00:	4a0b      	ldr	r2, [pc, #44]	; (1e30 <system_gclk_gen_enable+0x34>)
    1e02:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1e04:	b25b      	sxtb	r3, r3
    1e06:	2b00      	cmp	r3, #0
    1e08:	dbfb      	blt.n	1e02 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    1e0a:	4b0a      	ldr	r3, [pc, #40]	; (1e34 <system_gclk_gen_enable+0x38>)
    1e0c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1e0e:	4b0a      	ldr	r3, [pc, #40]	; (1e38 <system_gclk_gen_enable+0x3c>)
    1e10:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1e12:	4a07      	ldr	r2, [pc, #28]	; (1e30 <system_gclk_gen_enable+0x34>)
    1e14:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1e16:	b25b      	sxtb	r3, r3
    1e18:	2b00      	cmp	r3, #0
    1e1a:	dbfb      	blt.n	1e14 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1e1c:	4a04      	ldr	r2, [pc, #16]	; (1e30 <system_gclk_gen_enable+0x34>)
    1e1e:	6851      	ldr	r1, [r2, #4]
    1e20:	2380      	movs	r3, #128	; 0x80
    1e22:	025b      	lsls	r3, r3, #9
    1e24:	430b      	orrs	r3, r1
    1e26:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    1e28:	4b04      	ldr	r3, [pc, #16]	; (1e3c <system_gclk_gen_enable+0x40>)
    1e2a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1e2c:	bd10      	pop	{r4, pc}
    1e2e:	46c0      	nop			; (mov r8, r8)
    1e30:	40000c00 	.word	0x40000c00
    1e34:	000008ed 	.word	0x000008ed
    1e38:	40000c04 	.word	0x40000c04
    1e3c:	0000092d 	.word	0x0000092d

00001e40 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1e40:	b570      	push	{r4, r5, r6, lr}
    1e42:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1e44:	4a1a      	ldr	r2, [pc, #104]	; (1eb0 <system_gclk_gen_get_hz+0x70>)
    1e46:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1e48:	b25b      	sxtb	r3, r3
    1e4a:	2b00      	cmp	r3, #0
    1e4c:	dbfb      	blt.n	1e46 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    1e4e:	4b19      	ldr	r3, [pc, #100]	; (1eb4 <system_gclk_gen_get_hz+0x74>)
    1e50:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1e52:	4b19      	ldr	r3, [pc, #100]	; (1eb8 <system_gclk_gen_get_hz+0x78>)
    1e54:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1e56:	4a16      	ldr	r2, [pc, #88]	; (1eb0 <system_gclk_gen_get_hz+0x70>)
    1e58:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1e5a:	b25b      	sxtb	r3, r3
    1e5c:	2b00      	cmp	r3, #0
    1e5e:	dbfb      	blt.n	1e58 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1e60:	4e13      	ldr	r6, [pc, #76]	; (1eb0 <system_gclk_gen_get_hz+0x70>)
    1e62:	6870      	ldr	r0, [r6, #4]
    1e64:	04c0      	lsls	r0, r0, #19
    1e66:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1e68:	4b14      	ldr	r3, [pc, #80]	; (1ebc <system_gclk_gen_get_hz+0x7c>)
    1e6a:	4798      	blx	r3
    1e6c:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1e6e:	4b12      	ldr	r3, [pc, #72]	; (1eb8 <system_gclk_gen_get_hz+0x78>)
    1e70:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1e72:	6876      	ldr	r6, [r6, #4]
    1e74:	02f6      	lsls	r6, r6, #11
    1e76:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1e78:	4b11      	ldr	r3, [pc, #68]	; (1ec0 <system_gclk_gen_get_hz+0x80>)
    1e7a:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1e7c:	4a0c      	ldr	r2, [pc, #48]	; (1eb0 <system_gclk_gen_get_hz+0x70>)
    1e7e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1e80:	b25b      	sxtb	r3, r3
    1e82:	2b00      	cmp	r3, #0
    1e84:	dbfb      	blt.n	1e7e <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1e86:	4b0a      	ldr	r3, [pc, #40]	; (1eb0 <system_gclk_gen_get_hz+0x70>)
    1e88:	689c      	ldr	r4, [r3, #8]
    1e8a:	0224      	lsls	r4, r4, #8
    1e8c:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    1e8e:	4b0d      	ldr	r3, [pc, #52]	; (1ec4 <system_gclk_gen_get_hz+0x84>)
    1e90:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1e92:	2e00      	cmp	r6, #0
    1e94:	d107      	bne.n	1ea6 <system_gclk_gen_get_hz+0x66>
    1e96:	2c01      	cmp	r4, #1
    1e98:	d907      	bls.n	1eaa <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    1e9a:	0021      	movs	r1, r4
    1e9c:	0028      	movs	r0, r5
    1e9e:	4b0a      	ldr	r3, [pc, #40]	; (1ec8 <system_gclk_gen_get_hz+0x88>)
    1ea0:	4798      	blx	r3
    1ea2:	0005      	movs	r5, r0
    1ea4:	e001      	b.n	1eaa <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1ea6:	3401      	adds	r4, #1
    1ea8:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    1eaa:	0028      	movs	r0, r5
    1eac:	bd70      	pop	{r4, r5, r6, pc}
    1eae:	46c0      	nop			; (mov r8, r8)
    1eb0:	40000c00 	.word	0x40000c00
    1eb4:	000008ed 	.word	0x000008ed
    1eb8:	40000c04 	.word	0x40000c04
    1ebc:	00001915 	.word	0x00001915
    1ec0:	40000c08 	.word	0x40000c08
    1ec4:	0000092d 	.word	0x0000092d
    1ec8:	000035d1 	.word	0x000035d1

00001ecc <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1ecc:	b510      	push	{r4, lr}
    1ece:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1ed0:	4b06      	ldr	r3, [pc, #24]	; (1eec <system_gclk_chan_enable+0x20>)
    1ed2:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1ed4:	4b06      	ldr	r3, [pc, #24]	; (1ef0 <system_gclk_chan_enable+0x24>)
    1ed6:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1ed8:	4a06      	ldr	r2, [pc, #24]	; (1ef4 <system_gclk_chan_enable+0x28>)
    1eda:	8853      	ldrh	r3, [r2, #2]
    1edc:	2180      	movs	r1, #128	; 0x80
    1ede:	01c9      	lsls	r1, r1, #7
    1ee0:	430b      	orrs	r3, r1
    1ee2:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1ee4:	4b04      	ldr	r3, [pc, #16]	; (1ef8 <system_gclk_chan_enable+0x2c>)
    1ee6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1ee8:	bd10      	pop	{r4, pc}
    1eea:	46c0      	nop			; (mov r8, r8)
    1eec:	000008ed 	.word	0x000008ed
    1ef0:	40000c02 	.word	0x40000c02
    1ef4:	40000c00 	.word	0x40000c00
    1ef8:	0000092d 	.word	0x0000092d

00001efc <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1efc:	b510      	push	{r4, lr}
    1efe:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1f00:	4b0f      	ldr	r3, [pc, #60]	; (1f40 <system_gclk_chan_disable+0x44>)
    1f02:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1f04:	4b0f      	ldr	r3, [pc, #60]	; (1f44 <system_gclk_chan_disable+0x48>)
    1f06:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1f08:	4a0f      	ldr	r2, [pc, #60]	; (1f48 <system_gclk_chan_disable+0x4c>)
    1f0a:	8853      	ldrh	r3, [r2, #2]
    1f0c:	051b      	lsls	r3, r3, #20
    1f0e:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1f10:	8853      	ldrh	r3, [r2, #2]
    1f12:	490e      	ldr	r1, [pc, #56]	; (1f4c <system_gclk_chan_disable+0x50>)
    1f14:	400b      	ands	r3, r1
    1f16:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1f18:	8853      	ldrh	r3, [r2, #2]
    1f1a:	490d      	ldr	r1, [pc, #52]	; (1f50 <system_gclk_chan_disable+0x54>)
    1f1c:	400b      	ands	r3, r1
    1f1e:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1f20:	0011      	movs	r1, r2
    1f22:	2280      	movs	r2, #128	; 0x80
    1f24:	01d2      	lsls	r2, r2, #7
    1f26:	884b      	ldrh	r3, [r1, #2]
    1f28:	4213      	tst	r3, r2
    1f2a:	d1fc      	bne.n	1f26 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1f2c:	4906      	ldr	r1, [pc, #24]	; (1f48 <system_gclk_chan_disable+0x4c>)
    1f2e:	884a      	ldrh	r2, [r1, #2]
    1f30:	0203      	lsls	r3, r0, #8
    1f32:	4806      	ldr	r0, [pc, #24]	; (1f4c <system_gclk_chan_disable+0x50>)
    1f34:	4002      	ands	r2, r0
    1f36:	4313      	orrs	r3, r2
    1f38:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    1f3a:	4b06      	ldr	r3, [pc, #24]	; (1f54 <system_gclk_chan_disable+0x58>)
    1f3c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1f3e:	bd10      	pop	{r4, pc}
    1f40:	000008ed 	.word	0x000008ed
    1f44:	40000c02 	.word	0x40000c02
    1f48:	40000c00 	.word	0x40000c00
    1f4c:	fffff0ff 	.word	0xfffff0ff
    1f50:	ffffbfff 	.word	0xffffbfff
    1f54:	0000092d 	.word	0x0000092d

00001f58 <system_gclk_chan_set_config>:
{
    1f58:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1f5a:	780c      	ldrb	r4, [r1, #0]
    1f5c:	0224      	lsls	r4, r4, #8
    1f5e:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    1f60:	4b02      	ldr	r3, [pc, #8]	; (1f6c <system_gclk_chan_set_config+0x14>)
    1f62:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1f64:	b2a4      	uxth	r4, r4
    1f66:	4b02      	ldr	r3, [pc, #8]	; (1f70 <system_gclk_chan_set_config+0x18>)
    1f68:	805c      	strh	r4, [r3, #2]
}
    1f6a:	bd10      	pop	{r4, pc}
    1f6c:	00001efd 	.word	0x00001efd
    1f70:	40000c00 	.word	0x40000c00

00001f74 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1f74:	b510      	push	{r4, lr}
    1f76:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1f78:	4b06      	ldr	r3, [pc, #24]	; (1f94 <system_gclk_chan_get_hz+0x20>)
    1f7a:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1f7c:	4b06      	ldr	r3, [pc, #24]	; (1f98 <system_gclk_chan_get_hz+0x24>)
    1f7e:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1f80:	4b06      	ldr	r3, [pc, #24]	; (1f9c <system_gclk_chan_get_hz+0x28>)
    1f82:	885c      	ldrh	r4, [r3, #2]
    1f84:	0524      	lsls	r4, r4, #20
    1f86:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    1f88:	4b05      	ldr	r3, [pc, #20]	; (1fa0 <system_gclk_chan_get_hz+0x2c>)
    1f8a:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1f8c:	0020      	movs	r0, r4
    1f8e:	4b05      	ldr	r3, [pc, #20]	; (1fa4 <system_gclk_chan_get_hz+0x30>)
    1f90:	4798      	blx	r3
}
    1f92:	bd10      	pop	{r4, pc}
    1f94:	000008ed 	.word	0x000008ed
    1f98:	40000c02 	.word	0x40000c02
    1f9c:	40000c00 	.word	0x40000c00
    1fa0:	0000092d 	.word	0x0000092d
    1fa4:	00001e41 	.word	0x00001e41

00001fa8 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1fa8:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1faa:	78d3      	ldrb	r3, [r2, #3]
    1fac:	2b00      	cmp	r3, #0
    1fae:	d135      	bne.n	201c <STACK_SIZE+0x1c>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1fb0:	7813      	ldrb	r3, [r2, #0]
    1fb2:	2b80      	cmp	r3, #128	; 0x80
    1fb4:	d029      	beq.n	200a <STACK_SIZE+0xa>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1fb6:	061b      	lsls	r3, r3, #24
    1fb8:	2480      	movs	r4, #128	; 0x80
    1fba:	0264      	lsls	r4, r4, #9
    1fbc:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1fbe:	7854      	ldrb	r4, [r2, #1]
    1fc0:	2502      	movs	r5, #2
    1fc2:	43ac      	bics	r4, r5
    1fc4:	d106      	bne.n	1fd4 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1fc6:	7894      	ldrb	r4, [r2, #2]
    1fc8:	2c00      	cmp	r4, #0
    1fca:	d120      	bne.n	200e <STACK_SIZE+0xe>
			pin_cfg |= PORT_WRCONFIG_INEN;
    1fcc:	2480      	movs	r4, #128	; 0x80
    1fce:	02a4      	lsls	r4, r4, #10
    1fd0:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1fd2:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1fd4:	7854      	ldrb	r4, [r2, #1]
    1fd6:	3c01      	subs	r4, #1
    1fd8:	2c01      	cmp	r4, #1
    1fda:	d91c      	bls.n	2016 <STACK_SIZE+0x16>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1fdc:	040d      	lsls	r5, r1, #16
    1fde:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1fe0:	24a0      	movs	r4, #160	; 0xa0
    1fe2:	05e4      	lsls	r4, r4, #23
    1fe4:	432c      	orrs	r4, r5
    1fe6:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1fe8:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1fea:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1fec:	24d0      	movs	r4, #208	; 0xd0
    1fee:	0624      	lsls	r4, r4, #24
    1ff0:	432c      	orrs	r4, r5
    1ff2:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1ff4:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1ff6:	78d4      	ldrb	r4, [r2, #3]
    1ff8:	2c00      	cmp	r4, #0
    1ffa:	d122      	bne.n	2042 <STACK_SIZE+0x42>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1ffc:	035b      	lsls	r3, r3, #13
    1ffe:	d51c      	bpl.n	203a <STACK_SIZE+0x3a>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    2000:	7893      	ldrb	r3, [r2, #2]
    2002:	2b01      	cmp	r3, #1
    2004:	d01e      	beq.n	2044 <STACK_SIZE+0x44>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    2006:	6141      	str	r1, [r0, #20]
    2008:	e017      	b.n	203a <STACK_SIZE+0x3a>
	uint32_t pin_cfg = 0;
    200a:	2300      	movs	r3, #0
    200c:	e7d7      	b.n	1fbe <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    200e:	24c0      	movs	r4, #192	; 0xc0
    2010:	02e4      	lsls	r4, r4, #11
    2012:	4323      	orrs	r3, r4
    2014:	e7dd      	b.n	1fd2 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    2016:	4c0d      	ldr	r4, [pc, #52]	; (204c <STACK_SIZE+0x4c>)
    2018:	4023      	ands	r3, r4
    201a:	e7df      	b.n	1fdc <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    201c:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    201e:	040c      	lsls	r4, r1, #16
    2020:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2022:	23a0      	movs	r3, #160	; 0xa0
    2024:	05db      	lsls	r3, r3, #23
    2026:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2028:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    202a:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    202c:	23d0      	movs	r3, #208	; 0xd0
    202e:	061b      	lsls	r3, r3, #24
    2030:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2032:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    2034:	78d3      	ldrb	r3, [r2, #3]
    2036:	2b00      	cmp	r3, #0
    2038:	d103      	bne.n	2042 <STACK_SIZE+0x42>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    203a:	7853      	ldrb	r3, [r2, #1]
    203c:	3b01      	subs	r3, #1
    203e:	2b01      	cmp	r3, #1
    2040:	d902      	bls.n	2048 <STACK_SIZE+0x48>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    2042:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    2044:	6181      	str	r1, [r0, #24]
    2046:	e7f8      	b.n	203a <STACK_SIZE+0x3a>
			port->DIRSET.reg = pin_mask;
    2048:	6081      	str	r1, [r0, #8]
}
    204a:	e7fa      	b.n	2042 <STACK_SIZE+0x42>
    204c:	fffbffff 	.word	0xfffbffff

00002050 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    2050:	b510      	push	{r4, lr}
    2052:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    2054:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    2056:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    2058:	2900      	cmp	r1, #0
    205a:	d104      	bne.n	2066 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    205c:	0943      	lsrs	r3, r0, #5
    205e:	01db      	lsls	r3, r3, #7
    2060:	4905      	ldr	r1, [pc, #20]	; (2078 <system_pinmux_pin_set_config+0x28>)
    2062:	468c      	mov	ip, r1
    2064:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    2066:	241f      	movs	r4, #31
    2068:	4020      	ands	r0, r4
    206a:	2101      	movs	r1, #1
    206c:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    206e:	0018      	movs	r0, r3
    2070:	4b02      	ldr	r3, [pc, #8]	; (207c <system_pinmux_pin_set_config+0x2c>)
    2072:	4798      	blx	r3
}
    2074:	bd10      	pop	{r4, pc}
    2076:	46c0      	nop			; (mov r8, r8)
    2078:	41004400 	.word	0x41004400
    207c:	00001fa9 	.word	0x00001fa9

00002080 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    2080:	4770      	bx	lr
	...

00002084 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    2084:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    2086:	4b05      	ldr	r3, [pc, #20]	; (209c <system_init+0x18>)
    2088:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    208a:	4b05      	ldr	r3, [pc, #20]	; (20a0 <system_init+0x1c>)
    208c:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    208e:	4b05      	ldr	r3, [pc, #20]	; (20a4 <system_init+0x20>)
    2090:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    2092:	4b05      	ldr	r3, [pc, #20]	; (20a8 <system_init+0x24>)
    2094:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    2096:	4b05      	ldr	r3, [pc, #20]	; (20ac <system_init+0x28>)
    2098:	4798      	blx	r3
}
    209a:	bd10      	pop	{r4, pc}
    209c:	00001bc5 	.word	0x00001bc5
    20a0:	0000095d 	.word	0x0000095d
    20a4:	00002081 	.word	0x00002081
    20a8:	00002081 	.word	0x00002081
    20ac:	00002081 	.word	0x00002081

000020b0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    20b0:	e7fe      	b.n	20b0 <Dummy_Handler>
	...

000020b4 <Reset_Handler>:
{
    20b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    20b6:	4a2a      	ldr	r2, [pc, #168]	; (2160 <Reset_Handler+0xac>)
    20b8:	4b2a      	ldr	r3, [pc, #168]	; (2164 <Reset_Handler+0xb0>)
    20ba:	429a      	cmp	r2, r3
    20bc:	d011      	beq.n	20e2 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    20be:	001a      	movs	r2, r3
    20c0:	4b29      	ldr	r3, [pc, #164]	; (2168 <Reset_Handler+0xb4>)
    20c2:	429a      	cmp	r2, r3
    20c4:	d20d      	bcs.n	20e2 <Reset_Handler+0x2e>
    20c6:	4a29      	ldr	r2, [pc, #164]	; (216c <Reset_Handler+0xb8>)
    20c8:	3303      	adds	r3, #3
    20ca:	1a9b      	subs	r3, r3, r2
    20cc:	089b      	lsrs	r3, r3, #2
    20ce:	3301      	adds	r3, #1
    20d0:	009b      	lsls	r3, r3, #2
    20d2:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    20d4:	4823      	ldr	r0, [pc, #140]	; (2164 <Reset_Handler+0xb0>)
    20d6:	4922      	ldr	r1, [pc, #136]	; (2160 <Reset_Handler+0xac>)
    20d8:	588c      	ldr	r4, [r1, r2]
    20da:	5084      	str	r4, [r0, r2]
    20dc:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    20de:	429a      	cmp	r2, r3
    20e0:	d1fa      	bne.n	20d8 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    20e2:	4a23      	ldr	r2, [pc, #140]	; (2170 <Reset_Handler+0xbc>)
    20e4:	4b23      	ldr	r3, [pc, #140]	; (2174 <Reset_Handler+0xc0>)
    20e6:	429a      	cmp	r2, r3
    20e8:	d20a      	bcs.n	2100 <Reset_Handler+0x4c>
    20ea:	43d3      	mvns	r3, r2
    20ec:	4921      	ldr	r1, [pc, #132]	; (2174 <Reset_Handler+0xc0>)
    20ee:	185b      	adds	r3, r3, r1
    20f0:	2103      	movs	r1, #3
    20f2:	438b      	bics	r3, r1
    20f4:	3304      	adds	r3, #4
    20f6:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    20f8:	2100      	movs	r1, #0
    20fa:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    20fc:	4293      	cmp	r3, r2
    20fe:	d1fc      	bne.n	20fa <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2100:	4a1d      	ldr	r2, [pc, #116]	; (2178 <Reset_Handler+0xc4>)
    2102:	21ff      	movs	r1, #255	; 0xff
    2104:	4b1d      	ldr	r3, [pc, #116]	; (217c <Reset_Handler+0xc8>)
    2106:	438b      	bics	r3, r1
    2108:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    210a:	39fd      	subs	r1, #253	; 0xfd
    210c:	2390      	movs	r3, #144	; 0x90
    210e:	005b      	lsls	r3, r3, #1
    2110:	4a1b      	ldr	r2, [pc, #108]	; (2180 <Reset_Handler+0xcc>)
    2112:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    2114:	4a1b      	ldr	r2, [pc, #108]	; (2184 <Reset_Handler+0xd0>)
    2116:	78d3      	ldrb	r3, [r2, #3]
    2118:	2503      	movs	r5, #3
    211a:	43ab      	bics	r3, r5
    211c:	2402      	movs	r4, #2
    211e:	4323      	orrs	r3, r4
    2120:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    2122:	78d3      	ldrb	r3, [r2, #3]
    2124:	270c      	movs	r7, #12
    2126:	43bb      	bics	r3, r7
    2128:	2608      	movs	r6, #8
    212a:	4333      	orrs	r3, r6
    212c:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    212e:	4b16      	ldr	r3, [pc, #88]	; (2188 <Reset_Handler+0xd4>)
    2130:	7b98      	ldrb	r0, [r3, #14]
    2132:	2230      	movs	r2, #48	; 0x30
    2134:	4390      	bics	r0, r2
    2136:	2220      	movs	r2, #32
    2138:	4310      	orrs	r0, r2
    213a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    213c:	7b99      	ldrb	r1, [r3, #14]
    213e:	43b9      	bics	r1, r7
    2140:	4331      	orrs	r1, r6
    2142:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    2144:	7b9a      	ldrb	r2, [r3, #14]
    2146:	43aa      	bics	r2, r5
    2148:	4322      	orrs	r2, r4
    214a:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    214c:	4a0f      	ldr	r2, [pc, #60]	; (218c <Reset_Handler+0xd8>)
    214e:	6853      	ldr	r3, [r2, #4]
    2150:	2180      	movs	r1, #128	; 0x80
    2152:	430b      	orrs	r3, r1
    2154:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    2156:	4b0e      	ldr	r3, [pc, #56]	; (2190 <Reset_Handler+0xdc>)
    2158:	4798      	blx	r3
        main();
    215a:	4b0e      	ldr	r3, [pc, #56]	; (2194 <Reset_Handler+0xe0>)
    215c:	4798      	blx	r3
    215e:	e7fe      	b.n	215e <Reset_Handler+0xaa>
    2160:	00006ea8 	.word	0x00006ea8
    2164:	20000000 	.word	0x20000000
    2168:	200001c8 	.word	0x200001c8
    216c:	20000004 	.word	0x20000004
    2170:	200001c8 	.word	0x200001c8
    2174:	20000ad4 	.word	0x20000ad4
    2178:	e000ed00 	.word	0xe000ed00
    217c:	00000000 	.word	0x00000000
    2180:	41007000 	.word	0x41007000
    2184:	41005000 	.word	0x41005000
    2188:	41004800 	.word	0x41004800
    218c:	41004000 	.word	0x41004000
    2190:	00003911 	.word	0x00003911
    2194:	0000351d 	.word	0x0000351d

00002198 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    2198:	b5f0      	push	{r4, r5, r6, r7, lr}
    219a:	46c6      	mov	lr, r8
    219c:	b500      	push	{lr}
    219e:	000c      	movs	r4, r1
    21a0:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    21a2:	2800      	cmp	r0, #0
    21a4:	d10f      	bne.n	21c6 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    21a6:	2a00      	cmp	r2, #0
    21a8:	dd11      	ble.n	21ce <_read+0x36>
    21aa:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    21ac:	4e09      	ldr	r6, [pc, #36]	; (21d4 <_read+0x3c>)
    21ae:	4d0a      	ldr	r5, [pc, #40]	; (21d8 <_read+0x40>)
    21b0:	6830      	ldr	r0, [r6, #0]
    21b2:	0021      	movs	r1, r4
    21b4:	682b      	ldr	r3, [r5, #0]
    21b6:	4798      	blx	r3
		ptr++;
    21b8:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    21ba:	42bc      	cmp	r4, r7
    21bc:	d1f8      	bne.n	21b0 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    21be:	4640      	mov	r0, r8
    21c0:	bc04      	pop	{r2}
    21c2:	4690      	mov	r8, r2
    21c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    21c6:	2301      	movs	r3, #1
    21c8:	425b      	negs	r3, r3
    21ca:	4698      	mov	r8, r3
    21cc:	e7f7      	b.n	21be <_read+0x26>
	for (; len > 0; --len) {
    21ce:	4680      	mov	r8, r0
    21d0:	e7f5      	b.n	21be <_read+0x26>
    21d2:	46c0      	nop			; (mov r8, r8)
    21d4:	200002e8 	.word	0x200002e8
    21d8:	200002e0 	.word	0x200002e0

000021dc <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    21dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    21de:	46c6      	mov	lr, r8
    21e0:	b500      	push	{lr}
    21e2:	000e      	movs	r6, r1
    21e4:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    21e6:	3801      	subs	r0, #1
    21e8:	2802      	cmp	r0, #2
    21ea:	d810      	bhi.n	220e <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    21ec:	2a00      	cmp	r2, #0
    21ee:	d011      	beq.n	2214 <_write+0x38>
    21f0:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    21f2:	4b0c      	ldr	r3, [pc, #48]	; (2224 <_write+0x48>)
    21f4:	4698      	mov	r8, r3
    21f6:	4f0c      	ldr	r7, [pc, #48]	; (2228 <_write+0x4c>)
    21f8:	4643      	mov	r3, r8
    21fa:	6818      	ldr	r0, [r3, #0]
    21fc:	5d31      	ldrb	r1, [r6, r4]
    21fe:	683b      	ldr	r3, [r7, #0]
    2200:	4798      	blx	r3
    2202:	2800      	cmp	r0, #0
    2204:	db08      	blt.n	2218 <_write+0x3c>
			return -1;
		}
		++nChars;
    2206:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    2208:	42a5      	cmp	r5, r4
    220a:	d1f5      	bne.n	21f8 <_write+0x1c>
    220c:	e006      	b.n	221c <_write+0x40>
		return -1;
    220e:	2401      	movs	r4, #1
    2210:	4264      	negs	r4, r4
    2212:	e003      	b.n	221c <_write+0x40>
	for (; len != 0; --len) {
    2214:	0014      	movs	r4, r2
    2216:	e001      	b.n	221c <_write+0x40>
			return -1;
    2218:	2401      	movs	r4, #1
    221a:	4264      	negs	r4, r4
	}
	return nChars;
}
    221c:	0020      	movs	r0, r4
    221e:	bc04      	pop	{r2}
    2220:	4690      	mov	r8, r2
    2222:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2224:	200002e8 	.word	0x200002e8
    2228:	200002e4 	.word	0x200002e4

0000222c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    222c:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    222e:	4a06      	ldr	r2, [pc, #24]	; (2248 <_sbrk+0x1c>)
    2230:	6812      	ldr	r2, [r2, #0]
    2232:	2a00      	cmp	r2, #0
    2234:	d004      	beq.n	2240 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    2236:	4a04      	ldr	r2, [pc, #16]	; (2248 <_sbrk+0x1c>)
    2238:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    223a:	18c3      	adds	r3, r0, r3
    223c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    223e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    2240:	4902      	ldr	r1, [pc, #8]	; (224c <_sbrk+0x20>)
    2242:	4a01      	ldr	r2, [pc, #4]	; (2248 <_sbrk+0x1c>)
    2244:	6011      	str	r1, [r2, #0]
    2246:	e7f6      	b.n	2236 <_sbrk+0xa>
    2248:	200002a0 	.word	0x200002a0
    224c:	20002ad8 	.word	0x20002ad8

00002250 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    2250:	2001      	movs	r0, #1
    2252:	4240      	negs	r0, r0
    2254:	4770      	bx	lr

00002256 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    2256:	2380      	movs	r3, #128	; 0x80
    2258:	019b      	lsls	r3, r3, #6
    225a:	604b      	str	r3, [r1, #4]

	return 0;
}
    225c:	2000      	movs	r0, #0
    225e:	4770      	bx	lr

00002260 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    2260:	2001      	movs	r0, #1
    2262:	4770      	bx	lr

00002264 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    2264:	2000      	movs	r0, #0
    2266:	4770      	bx	lr

00002268 <drawChar>:
uint16_t xCharPos = 0;
uint16_t yCharPos = 0;


void drawChar(uint8_t character)
{
    2268:	b5f0      	push	{r4, r5, r6, r7, lr}
    226a:	46d6      	mov	lr, sl
    226c:	464f      	mov	r7, r9
    226e:	4646      	mov	r6, r8
    2270:	b5c0      	push	{r6, r7, lr}
    2272:	0004      	movs	r4, r0
	uint16_t x = xCharPos;
    2274:	4b2a      	ldr	r3, [pc, #168]	; (2320 <drawChar+0xb8>)
    2276:	881b      	ldrh	r3, [r3, #0]
	uint16_t y = yCharPos;
    2278:	4a2a      	ldr	r2, [pc, #168]	; (2324 <drawChar+0xbc>)
    227a:	8815      	ldrh	r5, [r2, #0]
	
	consoleDisplay[xCharPos][yCharPos] = character;
    227c:	005a      	lsls	r2, r3, #1
    227e:	18d2      	adds	r2, r2, r3
    2280:	00d2      	lsls	r2, r2, #3
    2282:	4829      	ldr	r0, [pc, #164]	; (2328 <drawChar+0xc0>)
    2284:	1882      	adds	r2, r0, r2
    2286:	5554      	strb	r4, [r2, r5]
	
	REG_PORT_OUTCLR1 = LCD_CS;
    2288:	2180      	movs	r1, #128	; 0x80
    228a:	03c9      	lsls	r1, r1, #15
    228c:	4a27      	ldr	r2, [pc, #156]	; (232c <drawChar+0xc4>)
    228e:	6011      	str	r1, [r2, #0]
	setXY(x*10,y*20,x*10+9,y*20+19);
    2290:	0098      	lsls	r0, r3, #2
    2292:	181b      	adds	r3, r3, r0
    2294:	005b      	lsls	r3, r3, #1
    2296:	b298      	uxth	r0, r3
    2298:	2114      	movs	r1, #20
    229a:	4369      	muls	r1, r5
    229c:	b289      	uxth	r1, r1
    229e:	000b      	movs	r3, r1
    22a0:	3313      	adds	r3, #19
    22a2:	b29b      	uxth	r3, r3
    22a4:	0002      	movs	r2, r0
    22a6:	3209      	adds	r2, #9
    22a8:	b292      	uxth	r2, r2
    22aa:	4d21      	ldr	r5, [pc, #132]	; (2330 <drawChar+0xc8>)
    22ac:	47a8      	blx	r5
    22ae:	4a21      	ldr	r2, [pc, #132]	; (2334 <drawChar+0xcc>)
    22b0:	00a5      	lsls	r5, r4, #2
    22b2:	192d      	adds	r5, r5, r4
    22b4:	00ab      	lsls	r3, r5, #2
    22b6:	18ed      	adds	r5, r5, r3
    22b8:	1955      	adds	r5, r2, r5
    22ba:	3401      	adds	r4, #1
    22bc:	00a3      	lsls	r3, r4, #2
    22be:	191c      	adds	r4, r3, r4
    22c0:	00a3      	lsls	r3, r4, #2
    22c2:	18e4      	adds	r4, r4, r3
    22c4:	4692      	mov	sl, r2
    22c6:	44a2      	add	sl, r4
			{
				setPixel((fore_Color_High<<8)|fore_Color_Low);	
			}
			else
			{
				setPixel((back_Color_High<<8)|back_Color_Low);
    22c8:	4b1b      	ldr	r3, [pc, #108]	; (2338 <drawChar+0xd0>)
    22ca:	4699      	mov	r9, r3
    22cc:	4b1b      	ldr	r3, [pc, #108]	; (233c <drawChar+0xd4>)
    22ce:	4698      	mov	r8, r3
    22d0:	4f1b      	ldr	r7, [pc, #108]	; (2340 <drawChar+0xd8>)
				setPixel((fore_Color_High<<8)|fore_Color_Low);	
    22d2:	4e1c      	ldr	r6, [pc, #112]	; (2344 <drawChar+0xdc>)
    22d4:	e019      	b.n	230a <drawChar+0xa2>
				setPixel((back_Color_High<<8)|back_Color_Low);
    22d6:	464b      	mov	r3, r9
    22d8:	8818      	ldrh	r0, [r3, #0]
    22da:	0200      	lsls	r0, r0, #8
    22dc:	4643      	mov	r3, r8
    22de:	881b      	ldrh	r3, [r3, #0]
    22e0:	4318      	orrs	r0, r3
    22e2:	b280      	uxth	r0, r0
    22e4:	47b8      	blx	r7
		for(int j=0;j<8;j++)
    22e6:	3c01      	subs	r4, #1
    22e8:	d30c      	bcc.n	2304 <drawChar+0x9c>
			if((CodePage437[character][i]&(1<<(7-j)))!=0)
    22ea:	782b      	ldrb	r3, [r5, #0]
    22ec:	4123      	asrs	r3, r4
    22ee:	07db      	lsls	r3, r3, #31
    22f0:	d5f1      	bpl.n	22d6 <drawChar+0x6e>
				setPixel((fore_Color_High<<8)|fore_Color_Low);	
    22f2:	8830      	ldrh	r0, [r6, #0]
    22f4:	0200      	lsls	r0, r0, #8
    22f6:	4b14      	ldr	r3, [pc, #80]	; (2348 <drawChar+0xe0>)
    22f8:	881b      	ldrh	r3, [r3, #0]
    22fa:	4318      	orrs	r0, r3
    22fc:	b280      	uxth	r0, r0
    22fe:	4b10      	ldr	r3, [pc, #64]	; (2340 <drawChar+0xd8>)
    2300:	4798      	blx	r3
    2302:	e7f0      	b.n	22e6 <drawChar+0x7e>
    2304:	3501      	adds	r5, #1
	for(uint16_t i=0; i <= 24; i++)
    2306:	4555      	cmp	r5, sl
    2308:	d001      	beq.n	230e <drawChar+0xa6>
{
    230a:	2407      	movs	r4, #7
    230c:	e7ed      	b.n	22ea <drawChar+0x82>
			}

		}
	}
	REG_PORT_OUTSET1 = LCD_CS;
    230e:	2280      	movs	r2, #128	; 0x80
    2310:	03d2      	lsls	r2, r2, #15
    2312:	4b0e      	ldr	r3, [pc, #56]	; (234c <drawChar+0xe4>)
    2314:	601a      	str	r2, [r3, #0]
	

}
    2316:	bc1c      	pop	{r2, r3, r4}
    2318:	4690      	mov	r8, r2
    231a:	4699      	mov	r9, r3
    231c:	46a2      	mov	sl, r4
    231e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2320:	200002a4 	.word	0x200002a4
    2324:	200002a6 	.word	0x200002a6
    2328:	20000324 	.word	0x20000324
    232c:	41004494 	.word	0x41004494
    2330:	00002d49 	.word	0x00002d49
    2334:	00005224 	.word	0x00005224
    2338:	20000aaa 	.word	0x20000aaa
    233c:	20000aa4 	.word	0x20000aa4
    2340:	00002e81 	.word	0x00002e81
    2344:	20000aa6 	.word	0x20000aa6
    2348:	20000aa8 	.word	0x20000aa8
    234c:	41004498 	.word	0x41004498

00002350 <blinkCursor>:
	*/
	
}

void blinkCursor(void)
{
    2350:	b5f0      	push	{r4, r5, r6, r7, lr}
    2352:	46d6      	mov	lr, sl
    2354:	464f      	mov	r7, r9
    2356:	4646      	mov	r6, r8
    2358:	b5c0      	push	{r6, r7, lr}
	uint16_t x = xCharPos;
    235a:	4b47      	ldr	r3, [pc, #284]	; (2478 <blinkCursor+0x128>)
    235c:	881b      	ldrh	r3, [r3, #0]
	uint16_t y = yCharPos;
    235e:	4a47      	ldr	r2, [pc, #284]	; (247c <blinkCursor+0x12c>)
    2360:	8815      	ldrh	r5, [r2, #0]
	unsigned char character = consoleDisplay[x][y];
    2362:	005a      	lsls	r2, r3, #1
    2364:	18d2      	adds	r2, r2, r3
    2366:	00d2      	lsls	r2, r2, #3
    2368:	4845      	ldr	r0, [pc, #276]	; (2480 <blinkCursor+0x130>)
    236a:	1882      	adds	r2, r0, r2
    236c:	5d54      	ldrb	r4, [r2, r5]
	setXY(x*10,y*20,x*10+9,y*20+19);
    236e:	0098      	lsls	r0, r3, #2
    2370:	181b      	adds	r3, r3, r0
    2372:	005b      	lsls	r3, r3, #1
    2374:	b298      	uxth	r0, r3
    2376:	2114      	movs	r1, #20
    2378:	4369      	muls	r1, r5
    237a:	b289      	uxth	r1, r1
    237c:	000b      	movs	r3, r1
    237e:	3313      	adds	r3, #19
    2380:	b29b      	uxth	r3, r3
    2382:	0002      	movs	r2, r0
    2384:	3209      	adds	r2, #9
    2386:	b292      	uxth	r2, r2
    2388:	4d3e      	ldr	r5, [pc, #248]	; (2484 <blinkCursor+0x134>)
    238a:	47a8      	blx	r5
	REG_PORT_OUTCLR1 = LCD_CS;
    238c:	2280      	movs	r2, #128	; 0x80
    238e:	03d2      	lsls	r2, r2, #15
    2390:	4b3d      	ldr	r3, [pc, #244]	; (2488 <blinkCursor+0x138>)
    2392:	601a      	str	r2, [r3, #0]
	if(cursorBlinkState)
    2394:	4b3d      	ldr	r3, [pc, #244]	; (248c <blinkCursor+0x13c>)
    2396:	781b      	ldrb	r3, [r3, #0]
    2398:	2b00      	cmp	r3, #0
    239a:	d113      	bne.n	23c4 <blinkCursor+0x74>
    239c:	4a3c      	ldr	r2, [pc, #240]	; (2490 <blinkCursor+0x140>)
    239e:	00a5      	lsls	r5, r4, #2
    23a0:	192d      	adds	r5, r5, r4
    23a2:	00ab      	lsls	r3, r5, #2
    23a4:	18ed      	adds	r5, r5, r3
    23a6:	1955      	adds	r5, r2, r5
    23a8:	3401      	adds	r4, #1
    23aa:	00a3      	lsls	r3, r4, #2
    23ac:	191c      	adds	r4, r3, r4
    23ae:	00a3      	lsls	r3, r4, #2
    23b0:	18e4      	adds	r4, r4, r3
    23b2:	4692      	mov	sl, r2
    23b4:	44a2      	add	sl, r4
				{
					setPixel((fore_Color_High<<8)|fore_Color_Low);
				}
				else
				{
					setPixel((back_Color_High<<8)|back_Color_Low);
    23b6:	4b37      	ldr	r3, [pc, #220]	; (2494 <blinkCursor+0x144>)
    23b8:	4699      	mov	r9, r3
    23ba:	4b37      	ldr	r3, [pc, #220]	; (2498 <blinkCursor+0x148>)
    23bc:	4698      	mov	r8, r3
    23be:	4f37      	ldr	r7, [pc, #220]	; (249c <blinkCursor+0x14c>)
					setPixel((fore_Color_High<<8)|fore_Color_Low);
    23c0:	4e37      	ldr	r6, [pc, #220]	; (24a0 <blinkCursor+0x150>)
    23c2:	e049      	b.n	2458 <blinkCursor+0x108>
    23c4:	4a32      	ldr	r2, [pc, #200]	; (2490 <blinkCursor+0x140>)
    23c6:	00a5      	lsls	r5, r4, #2
    23c8:	192d      	adds	r5, r5, r4
    23ca:	00ab      	lsls	r3, r5, #2
    23cc:	18ed      	adds	r5, r5, r3
    23ce:	1955      	adds	r5, r2, r5
    23d0:	3401      	adds	r4, #1
    23d2:	00a3      	lsls	r3, r4, #2
    23d4:	191c      	adds	r4, r3, r4
    23d6:	00a3      	lsls	r3, r4, #2
    23d8:	18e4      	adds	r4, r4, r3
    23da:	4692      	mov	sl, r2
    23dc:	44a2      	add	sl, r4
					setPixel((fore_Color_High<<8)|fore_Color_Low);
    23de:	4b30      	ldr	r3, [pc, #192]	; (24a0 <blinkCursor+0x150>)
    23e0:	4699      	mov	r9, r3
    23e2:	4b30      	ldr	r3, [pc, #192]	; (24a4 <blinkCursor+0x154>)
    23e4:	4698      	mov	r8, r3
    23e6:	4f2d      	ldr	r7, [pc, #180]	; (249c <blinkCursor+0x14c>)
					setPixel((back_Color_High<<8)|back_Color_Low);
    23e8:	4e2a      	ldr	r6, [pc, #168]	; (2494 <blinkCursor+0x144>)
    23ea:	e019      	b.n	2420 <blinkCursor+0xd0>
					setPixel((fore_Color_High<<8)|fore_Color_Low);
    23ec:	464b      	mov	r3, r9
    23ee:	8818      	ldrh	r0, [r3, #0]
    23f0:	0200      	lsls	r0, r0, #8
    23f2:	4643      	mov	r3, r8
    23f4:	881b      	ldrh	r3, [r3, #0]
    23f6:	4318      	orrs	r0, r3
    23f8:	b280      	uxth	r0, r0
    23fa:	47b8      	blx	r7
			for(int j=0;j<8;j++)
    23fc:	3c01      	subs	r4, #1
    23fe:	d30c      	bcc.n	241a <blinkCursor+0xca>
				if((CodePage437[character][i]&(1<<(7-j)))!=0)
    2400:	782b      	ldrb	r3, [r5, #0]
    2402:	4123      	asrs	r3, r4
    2404:	07db      	lsls	r3, r3, #31
    2406:	d5f1      	bpl.n	23ec <blinkCursor+0x9c>
					setPixel((back_Color_High<<8)|back_Color_Low);
    2408:	8830      	ldrh	r0, [r6, #0]
    240a:	0200      	lsls	r0, r0, #8
    240c:	4b22      	ldr	r3, [pc, #136]	; (2498 <blinkCursor+0x148>)
    240e:	881b      	ldrh	r3, [r3, #0]
    2410:	4318      	orrs	r0, r3
    2412:	b280      	uxth	r0, r0
    2414:	4b21      	ldr	r3, [pc, #132]	; (249c <blinkCursor+0x14c>)
    2416:	4798      	blx	r3
    2418:	e7f0      	b.n	23fc <blinkCursor+0xac>
    241a:	3501      	adds	r5, #1
		for(uint16_t i=0; i <= 24; i++)
    241c:	4555      	cmp	r5, sl
    241e:	d01d      	beq.n	245c <blinkCursor+0x10c>
{
    2420:	2407      	movs	r4, #7
    2422:	e7ed      	b.n	2400 <blinkCursor+0xb0>
					setPixel((back_Color_High<<8)|back_Color_Low);
    2424:	464b      	mov	r3, r9
    2426:	8818      	ldrh	r0, [r3, #0]
    2428:	0200      	lsls	r0, r0, #8
    242a:	4643      	mov	r3, r8
    242c:	881b      	ldrh	r3, [r3, #0]
    242e:	4318      	orrs	r0, r3
    2430:	b280      	uxth	r0, r0
    2432:	47b8      	blx	r7
			for(int j=0;j<8;j++)
    2434:	3c01      	subs	r4, #1
    2436:	d30c      	bcc.n	2452 <blinkCursor+0x102>
				if((CodePage437[character][i]&(1<<(7-j)))!=0)
    2438:	782b      	ldrb	r3, [r5, #0]
    243a:	4123      	asrs	r3, r4
    243c:	07db      	lsls	r3, r3, #31
    243e:	d5f1      	bpl.n	2424 <blinkCursor+0xd4>
					setPixel((fore_Color_High<<8)|fore_Color_Low);
    2440:	8830      	ldrh	r0, [r6, #0]
    2442:	0200      	lsls	r0, r0, #8
    2444:	4b17      	ldr	r3, [pc, #92]	; (24a4 <blinkCursor+0x154>)
    2446:	881b      	ldrh	r3, [r3, #0]
    2448:	4318      	orrs	r0, r3
    244a:	b280      	uxth	r0, r0
    244c:	4b13      	ldr	r3, [pc, #76]	; (249c <blinkCursor+0x14c>)
    244e:	4798      	blx	r3
    2450:	e7f0      	b.n	2434 <blinkCursor+0xe4>
    2452:	3501      	adds	r5, #1
		for(uint16_t i=0; i <= 24; i++)
    2454:	4555      	cmp	r5, sl
    2456:	d001      	beq.n	245c <blinkCursor+0x10c>
{
    2458:	2407      	movs	r4, #7
    245a:	e7ed      	b.n	2438 <blinkCursor+0xe8>
				}
			}
		}
	}

	REG_PORT_OUTSET1 = LCD_CS;
    245c:	2280      	movs	r2, #128	; 0x80
    245e:	03d2      	lsls	r2, r2, #15
    2460:	4b11      	ldr	r3, [pc, #68]	; (24a8 <blinkCursor+0x158>)
    2462:	601a      	str	r2, [r3, #0]
	
	//invert cursorBlinkState
	cursorBlinkState = !cursorBlinkState;
    2464:	4a09      	ldr	r2, [pc, #36]	; (248c <blinkCursor+0x13c>)
    2466:	7813      	ldrb	r3, [r2, #0]
    2468:	2101      	movs	r1, #1
    246a:	404b      	eors	r3, r1
    246c:	7013      	strb	r3, [r2, #0]
	
}
    246e:	bc1c      	pop	{r2, r3, r4}
    2470:	4690      	mov	r8, r2
    2472:	4699      	mov	r9, r3
    2474:	46a2      	mov	sl, r4
    2476:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2478:	200002a4 	.word	0x200002a4
    247c:	200002a6 	.word	0x200002a6
    2480:	20000324 	.word	0x20000324
    2484:	00002d49 	.word	0x00002d49
    2488:	41004494 	.word	0x41004494
    248c:	20000010 	.word	0x20000010
    2490:	00005224 	.word	0x00005224
    2494:	20000aaa 	.word	0x20000aaa
    2498:	20000aa4 	.word	0x20000aa4
    249c:	00002e81 	.word	0x00002e81
    24a0:	20000aa6 	.word	0x20000aa6
    24a4:	20000aa8 	.word	0x20000aa8
    24a8:	41004498 	.word	0x41004498

000024ac <newLine>:
{
    24ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    24ae:	46de      	mov	lr, fp
    24b0:	4657      	mov	r7, sl
    24b2:	464e      	mov	r6, r9
    24b4:	4645      	mov	r5, r8
    24b6:	b5e0      	push	{r5, r6, r7, lr}
    24b8:	b083      	sub	sp, #12
	int tempCursorx = xCharPos;
    24ba:	4b24      	ldr	r3, [pc, #144]	; (254c <newLine+0xa0>)
    24bc:	881b      	ldrh	r3, [r3, #0]
    24be:	469b      	mov	fp, r3
	int tempCursory = yCharPos;
    24c0:	4b23      	ldr	r3, [pc, #140]	; (2550 <newLine+0xa4>)
    24c2:	881b      	ldrh	r3, [r3, #0]
    24c4:	9301      	str	r3, [sp, #4]
	cursorBlinkState = true;
    24c6:	2201      	movs	r2, #1
    24c8:	4b22      	ldr	r3, [pc, #136]	; (2554 <newLine+0xa8>)
    24ca:	701a      	strb	r2, [r3, #0]
	blinkCursor();
    24cc:	4b22      	ldr	r3, [pc, #136]	; (2558 <newLine+0xac>)
    24ce:	4798      	blx	r3
    24d0:	4822      	ldr	r0, [pc, #136]	; (255c <newLine+0xb0>)
    24d2:	0004      	movs	r4, r0
    24d4:	3418      	adds	r4, #24
    24d6:	23f0      	movs	r3, #240	; 0xf0
    24d8:	00db      	lsls	r3, r3, #3
    24da:	18c1      	adds	r1, r0, r3
{
    24dc:	0003      	movs	r3, r0
			consoleDisplay[i][j-1] = consoleDisplay[i][j];
    24de:	785a      	ldrb	r2, [r3, #1]
    24e0:	701a      	strb	r2, [r3, #0]
    24e2:	3318      	adds	r3, #24
		for(int i = 0 ; i < 80 ; i++)
    24e4:	428b      	cmp	r3, r1
    24e6:	d1fa      	bne.n	24de <newLine+0x32>
    24e8:	3001      	adds	r0, #1
	for(int j = 1 ; j <= 24 ; j++)
    24ea:	42a0      	cmp	r0, r4
    24ec:	d1f3      	bne.n	24d6 <newLine+0x2a>
    24ee:	4b1c      	ldr	r3, [pc, #112]	; (2560 <newLine+0xb4>)
    24f0:	22f0      	movs	r2, #240	; 0xf0
    24f2:	00d2      	lsls	r2, r2, #3
    24f4:	1899      	adds	r1, r3, r2
		consoleDisplay[k][23] = 0x20;
    24f6:	2220      	movs	r2, #32
    24f8:	701a      	strb	r2, [r3, #0]
    24fa:	3318      	adds	r3, #24
	for(int k = 0 ; k < 80 ; k ++)
    24fc:	428b      	cmp	r3, r1
    24fe:	d1fb      	bne.n	24f8 <newLine+0x4c>
    2500:	2600      	movs	r6, #0
    2502:	4b16      	ldr	r3, [pc, #88]	; (255c <newLine+0xb0>)
    2504:	469a      	mov	sl, r3
			xCharPos = i;
    2506:	4b11      	ldr	r3, [pc, #68]	; (254c <newLine+0xa0>)
    2508:	4699      	mov	r9, r3
			yCharPos = j;
    250a:	4b11      	ldr	r3, [pc, #68]	; (2550 <newLine+0xa4>)
    250c:	4698      	mov	r8, r3
    250e:	4653      	mov	r3, sl
    2510:	18f5      	adds	r5, r6, r3
{
    2512:	2400      	movs	r4, #0
			drawChar(consoleDisplay[i][j]);
    2514:	4f13      	ldr	r7, [pc, #76]	; (2564 <newLine+0xb8>)
			xCharPos = i;
    2516:	464b      	mov	r3, r9
    2518:	801c      	strh	r4, [r3, #0]
			yCharPos = j;
    251a:	4643      	mov	r3, r8
    251c:	801e      	strh	r6, [r3, #0]
			drawChar(consoleDisplay[i][j]);
    251e:	7828      	ldrb	r0, [r5, #0]
    2520:	47b8      	blx	r7
		for(int i = 0 ; i < 80 ; i++)
    2522:	3401      	adds	r4, #1
    2524:	3518      	adds	r5, #24
    2526:	2c50      	cmp	r4, #80	; 0x50
    2528:	d1f5      	bne.n	2516 <newLine+0x6a>
	for(int j = 0 ; j < 24 ; j++)
    252a:	3601      	adds	r6, #1
    252c:	2e18      	cmp	r6, #24
    252e:	d1ee      	bne.n	250e <newLine+0x62>
	xCharPos = tempCursorx;
    2530:	4b06      	ldr	r3, [pc, #24]	; (254c <newLine+0xa0>)
    2532:	465a      	mov	r2, fp
    2534:	801a      	strh	r2, [r3, #0]
	yCharPos = tempCursory;
    2536:	4b06      	ldr	r3, [pc, #24]	; (2550 <newLine+0xa4>)
    2538:	466a      	mov	r2, sp
    253a:	8892      	ldrh	r2, [r2, #4]
    253c:	801a      	strh	r2, [r3, #0]
}
    253e:	b003      	add	sp, #12
    2540:	bc3c      	pop	{r2, r3, r4, r5}
    2542:	4690      	mov	r8, r2
    2544:	4699      	mov	r9, r3
    2546:	46a2      	mov	sl, r4
    2548:	46ab      	mov	fp, r5
    254a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    254c:	200002a4 	.word	0x200002a4
    2550:	200002a6 	.word	0x200002a6
    2554:	20000010 	.word	0x20000010
    2558:	00002351 	.word	0x00002351
    255c:	20000324 	.word	0x20000324
    2560:	2000033b 	.word	0x2000033b
    2564:	00002269 	.word	0x00002269

00002568 <writeString>:

void writeString(const char str[])
{
    2568:	b5f0      	push	{r4, r5, r6, r7, lr}
    256a:	46c6      	mov	lr, r8
    256c:	b500      	push	{lr}
    256e:	0005      	movs	r5, r0
	int length = strlen(str);
    2570:	4b0c      	ldr	r3, [pc, #48]	; (25a4 <writeString+0x3c>)
    2572:	4798      	blx	r3
	for(int i = 0; i < length; i++)
    2574:	2800      	cmp	r0, #0
    2576:	dd11      	ble.n	259c <writeString+0x34>
    2578:	002c      	movs	r4, r5
    257a:	182d      	adds	r5, r5, r0
	{
		drawChar(str[i]);
    257c:	4f0a      	ldr	r7, [pc, #40]	; (25a8 <writeString+0x40>)
		if(xCharPos <= 80)
    257e:	4e0b      	ldr	r6, [pc, #44]	; (25ac <writeString+0x44>)
		xCharPos++;
    2580:	46b0      	mov	r8, r6
    2582:	e002      	b.n	258a <writeString+0x22>
    2584:	3401      	adds	r4, #1
	for(int i = 0; i < length; i++)
    2586:	42ac      	cmp	r4, r5
    2588:	d008      	beq.n	259c <writeString+0x34>
		drawChar(str[i]);
    258a:	7820      	ldrb	r0, [r4, #0]
    258c:	47b8      	blx	r7
		if(xCharPos <= 80)
    258e:	8833      	ldrh	r3, [r6, #0]
    2590:	2b50      	cmp	r3, #80	; 0x50
    2592:	d8f7      	bhi.n	2584 <writeString+0x1c>
		xCharPos++;
    2594:	3301      	adds	r3, #1
    2596:	4642      	mov	r2, r8
    2598:	8013      	strh	r3, [r2, #0]
    259a:	e7f3      	b.n	2584 <writeString+0x1c>
	}
}
    259c:	bc04      	pop	{r2}
    259e:	4690      	mov	r8, r2
    25a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    25a2:	46c0      	nop			; (mov r8, r8)
    25a4:	00003da1 	.word	0x00003da1
    25a8:	00002269 	.word	0x00002269
    25ac:	200002a4 	.word	0x200002a4

000025b0 <nullifyConsole>:

void nullifyConsole(void)
{
    25b0:	4b08      	ldr	r3, [pc, #32]	; (25d4 <nullifyConsole+0x24>)
    25b2:	22f0      	movs	r2, #240	; 0xf0
    25b4:	00d2      	lsls	r2, r2, #3
    25b6:	1898      	adds	r0, r3, r2
	for(int i = 0 ; i < 80 ; i++)
	{
		for(int j = 0 ; j < 24 ; j++)
		{
			consoleDisplay[i][j] = 0x00;
    25b8:	2100      	movs	r1, #0
    25ba:	e002      	b.n	25c2 <nullifyConsole+0x12>
    25bc:	0013      	movs	r3, r2
	for(int i = 0 ; i < 80 ; i++)
    25be:	4290      	cmp	r0, r2
    25c0:	d006      	beq.n	25d0 <nullifyConsole+0x20>
    25c2:	001a      	movs	r2, r3
    25c4:	3218      	adds	r2, #24
			consoleDisplay[i][j] = 0x00;
    25c6:	7019      	strb	r1, [r3, #0]
    25c8:	3301      	adds	r3, #1
		for(int j = 0 ; j < 24 ; j++)
    25ca:	4293      	cmp	r3, r2
    25cc:	d1fb      	bne.n	25c6 <nullifyConsole+0x16>
    25ce:	e7f5      	b.n	25bc <nullifyConsole+0xc>
		}
	}
}
    25d0:	4770      	bx	lr
    25d2:	46c0      	nop			; (mov r8, r8)
    25d4:	20000324 	.word	0x20000324

000025d8 <arrowKey>:

void arrowKey(int scancode)
{
    25d8:	b570      	push	{r4, r5, r6, lr}
	unsigned char tempCharacter;
	//Arrow key handling
	if(scancode == 35) //left
    25da:	2823      	cmp	r0, #35	; 0x23
    25dc:	d006      	beq.n	25ec <arrowKey+0x14>
			tempCharacter = consoleDisplay[xCharPos][yCharPos];
			drawChar(tempCharacter);
			blinkCursor();
		}
	}
	else if(scancode  == 45)	//down
    25de:	282d      	cmp	r0, #45	; 0x2d
    25e0:	d021      	beq.n	2626 <arrowKey+0x4e>
			tempCharacter = consoleDisplay[xCharPos][yCharPos];
			drawChar(tempCharacter);
			blinkCursor();
		}
	}
	else if(scancode  == 55)	//up
    25e2:	2837      	cmp	r0, #55	; 0x37
    25e4:	d03c      	beq.n	2660 <arrowKey+0x88>
			tempCharacter = consoleDisplay[xCharPos][yCharPos];
			drawChar(tempCharacter);
			blinkCursor();
		}
	}
	else if(scancode  == 65)	//right
    25e6:	2841      	cmp	r0, #65	; 0x41
    25e8:	d057      	beq.n	269a <arrowKey+0xc2>
			tempCharacter = consoleDisplay[xCharPos][yCharPos];
			drawChar(tempCharacter);
			blinkCursor();
		}
	}
    25ea:	bd70      	pop	{r4, r5, r6, pc}
		if(xCharPos > 0)
    25ec:	4b39      	ldr	r3, [pc, #228]	; (26d4 <arrowKey+0xfc>)
    25ee:	881b      	ldrh	r3, [r3, #0]
    25f0:	2b00      	cmp	r3, #0
    25f2:	d0fa      	beq.n	25ea <arrowKey+0x12>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    25f4:	4c38      	ldr	r4, [pc, #224]	; (26d8 <arrowKey+0x100>)
    25f6:	4d39      	ldr	r5, [pc, #228]	; (26dc <arrowKey+0x104>)
    25f8:	8829      	ldrh	r1, [r5, #0]
    25fa:	005a      	lsls	r2, r3, #1
    25fc:	18d3      	adds	r3, r2, r3
    25fe:	00db      	lsls	r3, r3, #3
    2600:	18e3      	adds	r3, r4, r3
    2602:	5c58      	ldrb	r0, [r3, r1]
    2604:	4e36      	ldr	r6, [pc, #216]	; (26e0 <arrowKey+0x108>)
    2606:	47b0      	blx	r6
			xCharPos--;
    2608:	4a32      	ldr	r2, [pc, #200]	; (26d4 <arrowKey+0xfc>)
    260a:	8813      	ldrh	r3, [r2, #0]
    260c:	3b01      	subs	r3, #1
    260e:	b29b      	uxth	r3, r3
    2610:	8013      	strh	r3, [r2, #0]
			tempCharacter = consoleDisplay[xCharPos][yCharPos];
    2612:	8829      	ldrh	r1, [r5, #0]
    2614:	005a      	lsls	r2, r3, #1
    2616:	18d3      	adds	r3, r2, r3
    2618:	00db      	lsls	r3, r3, #3
    261a:	18e3      	adds	r3, r4, r3
			drawChar(tempCharacter);
    261c:	5c58      	ldrb	r0, [r3, r1]
    261e:	47b0      	blx	r6
			blinkCursor();
    2620:	4b30      	ldr	r3, [pc, #192]	; (26e4 <arrowKey+0x10c>)
    2622:	4798      	blx	r3
    2624:	e7e1      	b.n	25ea <arrowKey+0x12>
		if(yCharPos < 23)
    2626:	4b2d      	ldr	r3, [pc, #180]	; (26dc <arrowKey+0x104>)
    2628:	881a      	ldrh	r2, [r3, #0]
    262a:	2a16      	cmp	r2, #22
    262c:	d8dd      	bhi.n	25ea <arrowKey+0x12>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    262e:	4c2a      	ldr	r4, [pc, #168]	; (26d8 <arrowKey+0x100>)
    2630:	4d28      	ldr	r5, [pc, #160]	; (26d4 <arrowKey+0xfc>)
    2632:	8829      	ldrh	r1, [r5, #0]
    2634:	004b      	lsls	r3, r1, #1
    2636:	185b      	adds	r3, r3, r1
    2638:	00db      	lsls	r3, r3, #3
    263a:	18e3      	adds	r3, r4, r3
    263c:	5c98      	ldrb	r0, [r3, r2]
    263e:	4e28      	ldr	r6, [pc, #160]	; (26e0 <arrowKey+0x108>)
    2640:	47b0      	blx	r6
			yCharPos++;
    2642:	4a26      	ldr	r2, [pc, #152]	; (26dc <arrowKey+0x104>)
    2644:	8813      	ldrh	r3, [r2, #0]
    2646:	3301      	adds	r3, #1
    2648:	b29b      	uxth	r3, r3
    264a:	8013      	strh	r3, [r2, #0]
			tempCharacter = consoleDisplay[xCharPos][yCharPos];
    264c:	8829      	ldrh	r1, [r5, #0]
    264e:	004a      	lsls	r2, r1, #1
    2650:	1852      	adds	r2, r2, r1
    2652:	00d2      	lsls	r2, r2, #3
    2654:	18a4      	adds	r4, r4, r2
			drawChar(tempCharacter);
    2656:	5ce0      	ldrb	r0, [r4, r3]
    2658:	47b0      	blx	r6
			blinkCursor();
    265a:	4b22      	ldr	r3, [pc, #136]	; (26e4 <arrowKey+0x10c>)
    265c:	4798      	blx	r3
    265e:	e7c4      	b.n	25ea <arrowKey+0x12>
		if(yCharPos > 0)
    2660:	4b1e      	ldr	r3, [pc, #120]	; (26dc <arrowKey+0x104>)
    2662:	881a      	ldrh	r2, [r3, #0]
    2664:	2a00      	cmp	r2, #0
    2666:	d0c0      	beq.n	25ea <arrowKey+0x12>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    2668:	4c1b      	ldr	r4, [pc, #108]	; (26d8 <arrowKey+0x100>)
    266a:	4d1a      	ldr	r5, [pc, #104]	; (26d4 <arrowKey+0xfc>)
    266c:	8829      	ldrh	r1, [r5, #0]
    266e:	004b      	lsls	r3, r1, #1
    2670:	185b      	adds	r3, r3, r1
    2672:	00db      	lsls	r3, r3, #3
    2674:	18e3      	adds	r3, r4, r3
    2676:	5c98      	ldrb	r0, [r3, r2]
    2678:	4e19      	ldr	r6, [pc, #100]	; (26e0 <arrowKey+0x108>)
    267a:	47b0      	blx	r6
			yCharPos--;
    267c:	4a17      	ldr	r2, [pc, #92]	; (26dc <arrowKey+0x104>)
    267e:	8813      	ldrh	r3, [r2, #0]
    2680:	3b01      	subs	r3, #1
    2682:	b29b      	uxth	r3, r3
    2684:	8013      	strh	r3, [r2, #0]
			tempCharacter = consoleDisplay[xCharPos][yCharPos];
    2686:	8829      	ldrh	r1, [r5, #0]
    2688:	004a      	lsls	r2, r1, #1
    268a:	1852      	adds	r2, r2, r1
    268c:	00d2      	lsls	r2, r2, #3
    268e:	18a4      	adds	r4, r4, r2
			drawChar(tempCharacter);
    2690:	5ce0      	ldrb	r0, [r4, r3]
    2692:	47b0      	blx	r6
			blinkCursor();
    2694:	4b13      	ldr	r3, [pc, #76]	; (26e4 <arrowKey+0x10c>)
    2696:	4798      	blx	r3
    2698:	e7a7      	b.n	25ea <arrowKey+0x12>
		if(xCharPos < 79)
    269a:	4b0e      	ldr	r3, [pc, #56]	; (26d4 <arrowKey+0xfc>)
    269c:	881a      	ldrh	r2, [r3, #0]
    269e:	2a4e      	cmp	r2, #78	; 0x4e
    26a0:	d8a3      	bhi.n	25ea <arrowKey+0x12>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    26a2:	4c0d      	ldr	r4, [pc, #52]	; (26d8 <arrowKey+0x100>)
    26a4:	4d0d      	ldr	r5, [pc, #52]	; (26dc <arrowKey+0x104>)
    26a6:	8829      	ldrh	r1, [r5, #0]
    26a8:	0053      	lsls	r3, r2, #1
    26aa:	189b      	adds	r3, r3, r2
    26ac:	00db      	lsls	r3, r3, #3
    26ae:	18e3      	adds	r3, r4, r3
    26b0:	5c58      	ldrb	r0, [r3, r1]
    26b2:	4e0b      	ldr	r6, [pc, #44]	; (26e0 <arrowKey+0x108>)
    26b4:	47b0      	blx	r6
			xCharPos++;
    26b6:	4a07      	ldr	r2, [pc, #28]	; (26d4 <arrowKey+0xfc>)
    26b8:	8813      	ldrh	r3, [r2, #0]
    26ba:	3301      	adds	r3, #1
    26bc:	b29b      	uxth	r3, r3
    26be:	8013      	strh	r3, [r2, #0]
			tempCharacter = consoleDisplay[xCharPos][yCharPos];
    26c0:	8829      	ldrh	r1, [r5, #0]
    26c2:	005a      	lsls	r2, r3, #1
    26c4:	18d3      	adds	r3, r2, r3
    26c6:	00db      	lsls	r3, r3, #3
    26c8:	18e3      	adds	r3, r4, r3
			drawChar(tempCharacter);
    26ca:	5c58      	ldrb	r0, [r3, r1]
    26cc:	47b0      	blx	r6
			blinkCursor();
    26ce:	4b05      	ldr	r3, [pc, #20]	; (26e4 <arrowKey+0x10c>)
    26d0:	4798      	blx	r3
    26d2:	e78a      	b.n	25ea <arrowKey+0x12>
    26d4:	200002a4 	.word	0x200002a4
    26d8:	20000324 	.word	0x20000324
    26dc:	200002a6 	.word	0x200002a6
    26e0:	00002269 	.word	0x00002269
    26e4:	00002351 	.word	0x00002351

000026e8 <scanCodesContains>:

bool scanCodesContains(int scanCode)
{
	for(int i = 0 ; i < 70 ; i++)
	{
		if(scanCodes[i] == scanCode)
    26e8:	4b09      	ldr	r3, [pc, #36]	; (2710 <scanCodesContains+0x28>)
    26ea:	681b      	ldr	r3, [r3, #0]
    26ec:	4298      	cmp	r0, r3
    26ee:	d00b      	beq.n	2708 <scanCodesContains+0x20>
    26f0:	4a07      	ldr	r2, [pc, #28]	; (2710 <scanCodesContains+0x28>)
    26f2:	1d13      	adds	r3, r2, #4
    26f4:	3219      	adds	r2, #25
    26f6:	32ff      	adds	r2, #255	; 0xff
    26f8:	6819      	ldr	r1, [r3, #0]
    26fa:	4281      	cmp	r1, r0
    26fc:	d006      	beq.n	270c <scanCodesContains+0x24>
    26fe:	3304      	adds	r3, #4
	for(int i = 0 ; i < 70 ; i++)
    2700:	4293      	cmp	r3, r2
    2702:	d1f9      	bne.n	26f8 <scanCodesContains+0x10>
		{
			return true;
		}
	}
	return false;
    2704:	2000      	movs	r0, #0
    2706:	e002      	b.n	270e <scanCodesContains+0x26>
			return true;
    2708:	2001      	movs	r0, #1
    270a:	e000      	b.n	270e <scanCodesContains+0x26>
    270c:	2001      	movs	r0, #1
}
    270e:	4770      	bx	lr
    2710:	2000003c 	.word	0x2000003c

00002714 <keyDown>:

bool keyDown(int scancode)
{
	for(int i = 0 ; i < 20 ; i++)
	{
		if(keyDownBuffer[i] == scancode)
    2714:	4b09      	ldr	r3, [pc, #36]	; (273c <keyDown+0x28>)
    2716:	781b      	ldrb	r3, [r3, #0]
    2718:	4298      	cmp	r0, r3
    271a:	d00a      	beq.n	2732 <keyDown+0x1e>
    271c:	4907      	ldr	r1, [pc, #28]	; (273c <keyDown+0x28>)
    271e:	1c4b      	adds	r3, r1, #1
    2720:	3114      	adds	r1, #20
    2722:	781a      	ldrb	r2, [r3, #0]
    2724:	4282      	cmp	r2, r0
    2726:	d006      	beq.n	2736 <keyDown+0x22>
    2728:	3301      	adds	r3, #1
	for(int i = 0 ; i < 20 ; i++)
    272a:	428b      	cmp	r3, r1
    272c:	d1f9      	bne.n	2722 <keyDown+0xe>
		{
			return true;
		}	
	}
	return false;
    272e:	2000      	movs	r0, #0
}
    2730:	4770      	bx	lr
			return true;
    2732:	2001      	movs	r0, #1
    2734:	e7fc      	b.n	2730 <keyDown+0x1c>
    2736:	2001      	movs	r0, #1
    2738:	e7fa      	b.n	2730 <keyDown+0x1c>
    273a:	46c0      	nop			; (mov r8, r8)
    273c:	20000014 	.word	0x20000014

00002740 <printKeyboardBuffer>:
{
    2740:	b5f0      	push	{r4, r5, r6, r7, lr}
    2742:	46d6      	mov	lr, sl
    2744:	464f      	mov	r7, r9
    2746:	4646      	mov	r6, r8
    2748:	b5c0      	push	{r6, r7, lr}
    274a:	b0cc      	sub	sp, #304	; 0x130
	unsigned char noCase[] =
    274c:	4db4      	ldr	r5, [pc, #720]	; (2a20 <printKeyboardBuffer+0x2e0>)
    274e:	2246      	movs	r2, #70	; 0x46
    2750:	0029      	movs	r1, r5
    2752:	a83a      	add	r0, sp, #232	; 0xe8
    2754:	4cb3      	ldr	r4, [pc, #716]	; (2a24 <printKeyboardBuffer+0x2e4>)
    2756:	47a0      	blx	r4
	unsigned char shiftCase[] =
    2758:	0029      	movs	r1, r5
    275a:	3148      	adds	r1, #72	; 0x48
    275c:	2246      	movs	r2, #70	; 0x46
    275e:	a828      	add	r0, sp, #160	; 0xa0
    2760:	47a0      	blx	r4
	unsigned char capsLockCase[] =
    2762:	4db1      	ldr	r5, [pc, #708]	; (2a28 <printKeyboardBuffer+0x2e8>)
    2764:	0029      	movs	r1, r5
    2766:	3110      	adds	r1, #16
    2768:	2246      	movs	r2, #70	; 0x46
    276a:	a816      	add	r0, sp, #88	; 0x58
    276c:	47a0      	blx	r4
	unsigned char controlCase[] =
    276e:	0029      	movs	r1, r5
    2770:	3158      	adds	r1, #88	; 0x58
    2772:	2246      	movs	r2, #70	; 0x46
    2774:	a804      	add	r0, sp, #16
    2776:	47a0      	blx	r4
    2778:	4fac      	ldr	r7, [pc, #688]	; (2a2c <printKeyboardBuffer+0x2ec>)
    277a:	003c      	movs	r4, r7
    277c:	3414      	adds	r4, #20
    277e:	003d      	movs	r5, r7
	bool controled = false;
    2780:	2300      	movs	r3, #0
    2782:	9303      	str	r3, [sp, #12]
	bool shifted = false;
    2784:	9302      	str	r3, [sp, #8]
			controled = true;
    2786:	2201      	movs	r2, #1
    2788:	e004      	b.n	2794 <printKeyboardBuffer+0x54>
		if(scanCodeBuffer[i] == 22)
    278a:	2916      	cmp	r1, #22
    278c:	d011      	beq.n	27b2 <printKeyboardBuffer+0x72>
    278e:	3501      	adds	r5, #1
	for(int i=0; i<20; i++)
    2790:	42a5      	cmp	r5, r4
    2792:	d010      	beq.n	27b6 <printKeyboardBuffer+0x76>
		if((scanCodeBuffer[i] == 13) | (scanCodeBuffer[i] == 49))
    2794:	7829      	ldrb	r1, [r5, #0]
    2796:	000b      	movs	r3, r1
    2798:	3b0d      	subs	r3, #13
    279a:	425e      	negs	r6, r3
    279c:	415e      	adcs	r6, r3
    279e:	46b4      	mov	ip, r6
    27a0:	0008      	movs	r0, r1
    27a2:	3831      	subs	r0, #49	; 0x31
    27a4:	4243      	negs	r3, r0
    27a6:	4143      	adcs	r3, r0
    27a8:	4660      	mov	r0, ip
    27aa:	4318      	orrs	r0, r3
    27ac:	d0ed      	beq.n	278a <printKeyboardBuffer+0x4a>
			shifted = true;
    27ae:	9002      	str	r0, [sp, #8]
    27b0:	e7eb      	b.n	278a <printKeyboardBuffer+0x4a>
			controled = true;
    27b2:	9203      	str	r2, [sp, #12]
    27b4:	e7eb      	b.n	278e <printKeyboardBuffer+0x4e>
    27b6:	4e9e      	ldr	r6, [pc, #632]	; (2a30 <printKeyboardBuffer+0x2f0>)
	for(int i=0; i<20; i++)
    27b8:	003c      	movs	r4, r7
		if(!keyDown(scanCodeBuffer[i]))
    27ba:	4b9e      	ldr	r3, [pc, #632]	; (2a34 <printKeyboardBuffer+0x2f4>)
    27bc:	469a      	mov	sl, r3
    27be:	e00b      	b.n	27d8 <printKeyboardBuffer+0x98>
				sendChar(0x1B);
    27c0:	301b      	adds	r0, #27
    27c2:	4b9d      	ldr	r3, [pc, #628]	; (2a38 <printKeyboardBuffer+0x2f8>)
    27c4:	4798      	blx	r3
				if(localEcho)
    27c6:	4b9d      	ldr	r3, [pc, #628]	; (2a3c <printKeyboardBuffer+0x2fc>)
    27c8:	781b      	ldrb	r3, [r3, #0]
    27ca:	2b00      	cmp	r3, #0
    27cc:	d14a      	bne.n	2864 <printKeyboardBuffer+0x124>
    27ce:	3401      	adds	r4, #1
    27d0:	3601      	adds	r6, #1
	for(int i = 0 ; i < 20 ; i++)
    27d2:	42ac      	cmp	r4, r5
    27d4:	d100      	bne.n	27d8 <printKeyboardBuffer+0x98>
    27d6:	e118      	b.n	2a0a <printKeyboardBuffer+0x2ca>
    27d8:	9401      	str	r4, [sp, #4]
		if(!keyDown(scanCodeBuffer[i]))
    27da:	7823      	ldrb	r3, [r4, #0]
    27dc:	4698      	mov	r8, r3
    27de:	0018      	movs	r0, r3
    27e0:	47d0      	blx	sl
    27e2:	2800      	cmp	r0, #0
    27e4:	d1f3      	bne.n	27ce <printKeyboardBuffer+0x8e>
			keyDownBuffer[i] = scanCodeBuffer[i];
    27e6:	4643      	mov	r3, r8
    27e8:	7033      	strb	r3, [r6, #0]
			if(scanCodeBuffer[i] == 0x00)  //this is escape
    27ea:	4643      	mov	r3, r8
    27ec:	2b00      	cmp	r3, #0
    27ee:	d0e7      	beq.n	27c0 <printKeyboardBuffer+0x80>
			else if(scanCodeBuffer[i] == 0x01)	//setup button, do something weird here
    27f0:	4643      	mov	r3, r8
    27f2:	2b01      	cmp	r3, #1
    27f4:	d0eb      	beq.n	27ce <printKeyboardBuffer+0x8e>
			else if(scanCodeBuffer[i] == 67)		//Break key, set by break enable in settings
    27f6:	2b43      	cmp	r3, #67	; 0x43
    27f8:	d03a      	beq.n	2870 <printKeyboardBuffer+0x130>
			else if(scanCodeBuffer[i] == 58)   //Return key
    27fa:	4643      	mov	r3, r8
    27fc:	2b3a      	cmp	r3, #58	; 0x3a
    27fe:	d03f      	beq.n	2880 <printKeyboardBuffer+0x140>
			else if(scanCodeBuffer[i] == 12)		//caps lock
    2800:	4643      	mov	r3, r8
    2802:	2b0c      	cmp	r3, #12
    2804:	d078      	beq.n	28f8 <printKeyboardBuffer+0x1b8>
			else if(scanCodeBuffer[i] == 3)			//scroll lock
    2806:	4643      	mov	r3, r8
    2808:	2b03      	cmp	r3, #3
    280a:	d07b      	beq.n	2904 <printKeyboardBuffer+0x1c4>
			else if(scanCodeBuffer[i] == 35) //left
    280c:	4643      	mov	r3, r8
    280e:	2b23      	cmp	r3, #35	; 0x23
    2810:	d07e      	beq.n	2910 <printKeyboardBuffer+0x1d0>
			else if(scanCodeBuffer[i]  == 45)	//down
    2812:	4643      	mov	r3, r8
    2814:	2b2d      	cmp	r3, #45	; 0x2d
    2816:	d100      	bne.n	281a <printKeyboardBuffer+0xda>
    2818:	e08c      	b.n	2934 <printKeyboardBuffer+0x1f4>
			else if(scanCodeBuffer[i]  == 55)	//up
    281a:	4643      	mov	r3, r8
    281c:	2b37      	cmp	r3, #55	; 0x37
    281e:	d100      	bne.n	2822 <printKeyboardBuffer+0xe2>
    2820:	e09a      	b.n	2958 <printKeyboardBuffer+0x218>
			else if(scanCodeBuffer[i]  == 65)	//right
    2822:	4643      	mov	r3, r8
    2824:	2b41      	cmp	r3, #65	; 0x41
    2826:	d100      	bne.n	282a <printKeyboardBuffer+0xea>
    2828:	e0a8      	b.n	297c <printKeyboardBuffer+0x23c>
				if(controled)
    282a:	9b03      	ldr	r3, [sp, #12]
    282c:	2b00      	cmp	r3, #0
    282e:	d000      	beq.n	2832 <printKeyboardBuffer+0xf2>
    2830:	e0b6      	b.n	29a0 <printKeyboardBuffer+0x260>
				else if(capsLock)
    2832:	4b83      	ldr	r3, [pc, #524]	; (2a40 <printKeyboardBuffer+0x300>)
    2834:	781b      	ldrb	r3, [r3, #0]
    2836:	2b00      	cmp	r3, #0
    2838:	d000      	beq.n	283c <printKeyboardBuffer+0xfc>
    283a:	e0c4      	b.n	29c6 <printKeyboardBuffer+0x286>
				else if(shifted)
    283c:	9b02      	ldr	r3, [sp, #8]
    283e:	2b00      	cmp	r3, #0
    2840:	d100      	bne.n	2844 <printKeyboardBuffer+0x104>
    2842:	e0d1      	b.n	29e8 <printKeyboardBuffer+0x2a8>
					sendChar(shiftCase[scanCodeBuffer[i]]);
    2844:	ab28      	add	r3, sp, #160	; 0xa0
    2846:	4642      	mov	r2, r8
    2848:	5c98      	ldrb	r0, [r3, r2]
    284a:	4b7b      	ldr	r3, [pc, #492]	; (2a38 <printKeyboardBuffer+0x2f8>)
    284c:	4798      	blx	r3
					if(localEcho)
    284e:	4b7b      	ldr	r3, [pc, #492]	; (2a3c <printKeyboardBuffer+0x2fc>)
    2850:	781b      	ldrb	r3, [r3, #0]
    2852:	2b00      	cmp	r3, #0
    2854:	d0bb      	beq.n	27ce <printKeyboardBuffer+0x8e>
						parseChar(shiftCase[scanCodeBuffer[i]]);
    2856:	9b01      	ldr	r3, [sp, #4]
    2858:	781b      	ldrb	r3, [r3, #0]
    285a:	aa28      	add	r2, sp, #160	; 0xa0
    285c:	5cd0      	ldrb	r0, [r2, r3]
    285e:	4b79      	ldr	r3, [pc, #484]	; (2a44 <printKeyboardBuffer+0x304>)
    2860:	4798      	blx	r3
    2862:	e7b4      	b.n	27ce <printKeyboardBuffer+0x8e>
					ring_put(ouroboros,0x1B);
    2864:	4b78      	ldr	r3, [pc, #480]	; (2a48 <printKeyboardBuffer+0x308>)
    2866:	6818      	ldr	r0, [r3, #0]
    2868:	211b      	movs	r1, #27
    286a:	4b78      	ldr	r3, [pc, #480]	; (2a4c <printKeyboardBuffer+0x30c>)
    286c:	4798      	blx	r3
    286e:	e7ae      	b.n	27ce <printKeyboardBuffer+0x8e>
				if(breakEnable)
    2870:	4b77      	ldr	r3, [pc, #476]	; (2a50 <printKeyboardBuffer+0x310>)
    2872:	781b      	ldrb	r3, [r3, #0]
    2874:	2b00      	cmp	r3, #0
    2876:	d0aa      	beq.n	27ce <printKeyboardBuffer+0x8e>
					sendChar(0x00);
    2878:	2000      	movs	r0, #0
    287a:	4b6f      	ldr	r3, [pc, #444]	; (2a38 <printKeyboardBuffer+0x2f8>)
    287c:	4798      	blx	r3
    287e:	e7a6      	b.n	27ce <printKeyboardBuffer+0x8e>
				if(lineFeedNewLine == 1)  //This is Windows; CRLF
    2880:	4b74      	ldr	r3, [pc, #464]	; (2a54 <printKeyboardBuffer+0x314>)
    2882:	681b      	ldr	r3, [r3, #0]
    2884:	2b01      	cmp	r3, #1
    2886:	d014      	beq.n	28b2 <printKeyboardBuffer+0x172>
				if(lineFeedNewLine == 2)  //This is Unix, sends LF
    2888:	4b72      	ldr	r3, [pc, #456]	; (2a54 <printKeyboardBuffer+0x314>)
    288a:	681b      	ldr	r3, [r3, #0]
    288c:	2b02      	cmp	r3, #2
    288e:	d026      	beq.n	28de <printKeyboardBuffer+0x19e>
				if(lineFeedNewLine == 3)  //This is classic mac, sends CR
    2890:	4b70      	ldr	r3, [pc, #448]	; (2a54 <printKeyboardBuffer+0x314>)
    2892:	681b      	ldr	r3, [r3, #0]
    2894:	2b03      	cmp	r3, #3
    2896:	d19a      	bne.n	27ce <printKeyboardBuffer+0x8e>
					sendChar(0x0D);
    2898:	200d      	movs	r0, #13
    289a:	4b67      	ldr	r3, [pc, #412]	; (2a38 <printKeyboardBuffer+0x2f8>)
    289c:	4798      	blx	r3
					if(localEcho)
    289e:	4b67      	ldr	r3, [pc, #412]	; (2a3c <printKeyboardBuffer+0x2fc>)
    28a0:	781b      	ldrb	r3, [r3, #0]
    28a2:	2b00      	cmp	r3, #0
    28a4:	d093      	beq.n	27ce <printKeyboardBuffer+0x8e>
						ring_put(ouroboros, 0x0D);
    28a6:	4b68      	ldr	r3, [pc, #416]	; (2a48 <printKeyboardBuffer+0x308>)
    28a8:	6818      	ldr	r0, [r3, #0]
    28aa:	210d      	movs	r1, #13
    28ac:	4b67      	ldr	r3, [pc, #412]	; (2a4c <printKeyboardBuffer+0x30c>)
    28ae:	4798      	blx	r3
    28b0:	e78d      	b.n	27ce <printKeyboardBuffer+0x8e>
					sendChar(0x0D);
    28b2:	200d      	movs	r0, #13
    28b4:	4b60      	ldr	r3, [pc, #384]	; (2a38 <printKeyboardBuffer+0x2f8>)
    28b6:	4698      	mov	r8, r3
    28b8:	4798      	blx	r3
					sendChar(0x0A);
    28ba:	200a      	movs	r0, #10
    28bc:	47c0      	blx	r8
					if(localEcho)
    28be:	4b5f      	ldr	r3, [pc, #380]	; (2a3c <printKeyboardBuffer+0x2fc>)
    28c0:	781b      	ldrb	r3, [r3, #0]
    28c2:	2b00      	cmp	r3, #0
    28c4:	d0e0      	beq.n	2888 <printKeyboardBuffer+0x148>
						ring_put(ouroboros, 0x0D);
    28c6:	4b60      	ldr	r3, [pc, #384]	; (2a48 <printKeyboardBuffer+0x308>)
    28c8:	4699      	mov	r9, r3
    28ca:	210d      	movs	r1, #13
    28cc:	6818      	ldr	r0, [r3, #0]
    28ce:	4b5f      	ldr	r3, [pc, #380]	; (2a4c <printKeyboardBuffer+0x30c>)
    28d0:	4698      	mov	r8, r3
    28d2:	4798      	blx	r3
						ring_put(ouroboros, 0x0A);
    28d4:	464b      	mov	r3, r9
    28d6:	6818      	ldr	r0, [r3, #0]
    28d8:	210a      	movs	r1, #10
    28da:	47c0      	blx	r8
    28dc:	e7d4      	b.n	2888 <printKeyboardBuffer+0x148>
					sendChar(0x0A);
    28de:	200a      	movs	r0, #10
    28e0:	4b55      	ldr	r3, [pc, #340]	; (2a38 <printKeyboardBuffer+0x2f8>)
    28e2:	4798      	blx	r3
					if(localEcho)
    28e4:	4b55      	ldr	r3, [pc, #340]	; (2a3c <printKeyboardBuffer+0x2fc>)
    28e6:	781b      	ldrb	r3, [r3, #0]
    28e8:	2b00      	cmp	r3, #0
    28ea:	d0d1      	beq.n	2890 <printKeyboardBuffer+0x150>
						ring_put(ouroboros, 0x0A);
    28ec:	4b56      	ldr	r3, [pc, #344]	; (2a48 <printKeyboardBuffer+0x308>)
    28ee:	6818      	ldr	r0, [r3, #0]
    28f0:	210a      	movs	r1, #10
    28f2:	4b56      	ldr	r3, [pc, #344]	; (2a4c <printKeyboardBuffer+0x30c>)
    28f4:	4798      	blx	r3
    28f6:	e7cb      	b.n	2890 <printKeyboardBuffer+0x150>
				capsLock = !capsLock;
    28f8:	4a51      	ldr	r2, [pc, #324]	; (2a40 <printKeyboardBuffer+0x300>)
    28fa:	7813      	ldrb	r3, [r2, #0]
    28fc:	2101      	movs	r1, #1
    28fe:	404b      	eors	r3, r1
    2900:	7013      	strb	r3, [r2, #0]
    2902:	e764      	b.n	27ce <printKeyboardBuffer+0x8e>
				scrollLock = !scrollLock;
    2904:	4a54      	ldr	r2, [pc, #336]	; (2a58 <printKeyboardBuffer+0x318>)
    2906:	7813      	ldrb	r3, [r2, #0]
    2908:	2101      	movs	r1, #1
    290a:	404b      	eors	r3, r1
    290c:	7013      	strb	r3, [r2, #0]
    290e:	e75e      	b.n	27ce <printKeyboardBuffer+0x8e>
				sendChar(0x1B);
    2910:	201b      	movs	r0, #27
    2912:	4b49      	ldr	r3, [pc, #292]	; (2a38 <printKeyboardBuffer+0x2f8>)
    2914:	4698      	mov	r8, r3
    2916:	4798      	blx	r3
				sendChar(0x5B);
    2918:	205b      	movs	r0, #91	; 0x5b
    291a:	47c0      	blx	r8
				sendChar(0x44);
    291c:	2044      	movs	r0, #68	; 0x44
    291e:	47c0      	blx	r8
				if(localEcho)
    2920:	4b46      	ldr	r3, [pc, #280]	; (2a3c <printKeyboardBuffer+0x2fc>)
    2922:	781b      	ldrb	r3, [r3, #0]
    2924:	2b00      	cmp	r3, #0
    2926:	d100      	bne.n	292a <printKeyboardBuffer+0x1ea>
    2928:	e751      	b.n	27ce <printKeyboardBuffer+0x8e>
					arrowKey(scanCodeBuffer[i]);
    292a:	9b01      	ldr	r3, [sp, #4]
    292c:	7818      	ldrb	r0, [r3, #0]
    292e:	4b4b      	ldr	r3, [pc, #300]	; (2a5c <printKeyboardBuffer+0x31c>)
    2930:	4798      	blx	r3
    2932:	e74c      	b.n	27ce <printKeyboardBuffer+0x8e>
				sendChar(0x1B);
    2934:	201b      	movs	r0, #27
    2936:	4b40      	ldr	r3, [pc, #256]	; (2a38 <printKeyboardBuffer+0x2f8>)
    2938:	4698      	mov	r8, r3
    293a:	4798      	blx	r3
				sendChar(0x5B);
    293c:	205b      	movs	r0, #91	; 0x5b
    293e:	47c0      	blx	r8
				sendChar(0x42);
    2940:	2042      	movs	r0, #66	; 0x42
    2942:	47c0      	blx	r8
				if(localEcho)
    2944:	4b3d      	ldr	r3, [pc, #244]	; (2a3c <printKeyboardBuffer+0x2fc>)
    2946:	781b      	ldrb	r3, [r3, #0]
    2948:	2b00      	cmp	r3, #0
    294a:	d100      	bne.n	294e <printKeyboardBuffer+0x20e>
    294c:	e73f      	b.n	27ce <printKeyboardBuffer+0x8e>
					arrowKey(scanCodeBuffer[i]);
    294e:	9b01      	ldr	r3, [sp, #4]
    2950:	7818      	ldrb	r0, [r3, #0]
    2952:	4b42      	ldr	r3, [pc, #264]	; (2a5c <printKeyboardBuffer+0x31c>)
    2954:	4798      	blx	r3
    2956:	e73a      	b.n	27ce <printKeyboardBuffer+0x8e>
				sendChar(0x1B);
    2958:	201b      	movs	r0, #27
    295a:	4b37      	ldr	r3, [pc, #220]	; (2a38 <printKeyboardBuffer+0x2f8>)
    295c:	4698      	mov	r8, r3
    295e:	4798      	blx	r3
				sendChar(0x5B);
    2960:	205b      	movs	r0, #91	; 0x5b
    2962:	47c0      	blx	r8
				sendChar(0x41);
    2964:	2041      	movs	r0, #65	; 0x41
    2966:	47c0      	blx	r8
				if(localEcho)
    2968:	4b34      	ldr	r3, [pc, #208]	; (2a3c <printKeyboardBuffer+0x2fc>)
    296a:	781b      	ldrb	r3, [r3, #0]
    296c:	2b00      	cmp	r3, #0
    296e:	d100      	bne.n	2972 <printKeyboardBuffer+0x232>
    2970:	e72d      	b.n	27ce <printKeyboardBuffer+0x8e>
					arrowKey(scanCodeBuffer[i]);
    2972:	9b01      	ldr	r3, [sp, #4]
    2974:	7818      	ldrb	r0, [r3, #0]
    2976:	4b39      	ldr	r3, [pc, #228]	; (2a5c <printKeyboardBuffer+0x31c>)
    2978:	4798      	blx	r3
    297a:	e728      	b.n	27ce <printKeyboardBuffer+0x8e>
				sendChar(0x1B);
    297c:	201b      	movs	r0, #27
    297e:	4b2e      	ldr	r3, [pc, #184]	; (2a38 <printKeyboardBuffer+0x2f8>)
    2980:	4698      	mov	r8, r3
    2982:	4798      	blx	r3
				sendChar(0x5B);
    2984:	205b      	movs	r0, #91	; 0x5b
    2986:	47c0      	blx	r8
				sendChar(0x43);
    2988:	2043      	movs	r0, #67	; 0x43
    298a:	47c0      	blx	r8
				if(localEcho)
    298c:	4b2b      	ldr	r3, [pc, #172]	; (2a3c <printKeyboardBuffer+0x2fc>)
    298e:	781b      	ldrb	r3, [r3, #0]
    2990:	2b00      	cmp	r3, #0
    2992:	d100      	bne.n	2996 <printKeyboardBuffer+0x256>
    2994:	e71b      	b.n	27ce <printKeyboardBuffer+0x8e>
					arrowKey(scanCodeBuffer[i]);
    2996:	9b01      	ldr	r3, [sp, #4]
    2998:	7818      	ldrb	r0, [r3, #0]
    299a:	4b30      	ldr	r3, [pc, #192]	; (2a5c <printKeyboardBuffer+0x31c>)
    299c:	4798      	blx	r3
    299e:	e716      	b.n	27ce <printKeyboardBuffer+0x8e>
					sendChar(controlCase[scanCodeBuffer[i]]);
    29a0:	ab04      	add	r3, sp, #16
    29a2:	4642      	mov	r2, r8
    29a4:	5c98      	ldrb	r0, [r3, r2]
    29a6:	4b24      	ldr	r3, [pc, #144]	; (2a38 <printKeyboardBuffer+0x2f8>)
    29a8:	4798      	blx	r3
					if(localEcho)
    29aa:	4b24      	ldr	r3, [pc, #144]	; (2a3c <printKeyboardBuffer+0x2fc>)
    29ac:	781b      	ldrb	r3, [r3, #0]
    29ae:	2b00      	cmp	r3, #0
    29b0:	d100      	bne.n	29b4 <printKeyboardBuffer+0x274>
    29b2:	e70c      	b.n	27ce <printKeyboardBuffer+0x8e>
						ring_put(ouroboros, controlCase[scanCodeBuffer[i]]);
    29b4:	9b01      	ldr	r3, [sp, #4]
    29b6:	781b      	ldrb	r3, [r3, #0]
    29b8:	aa04      	add	r2, sp, #16
    29ba:	5cd1      	ldrb	r1, [r2, r3]
    29bc:	4b22      	ldr	r3, [pc, #136]	; (2a48 <printKeyboardBuffer+0x308>)
    29be:	6818      	ldr	r0, [r3, #0]
    29c0:	4b22      	ldr	r3, [pc, #136]	; (2a4c <printKeyboardBuffer+0x30c>)
    29c2:	4798      	blx	r3
    29c4:	e703      	b.n	27ce <printKeyboardBuffer+0x8e>
					sendChar(capsLockCase[scanCodeBuffer[i]]);
    29c6:	ab16      	add	r3, sp, #88	; 0x58
    29c8:	4642      	mov	r2, r8
    29ca:	5c98      	ldrb	r0, [r3, r2]
    29cc:	4b1a      	ldr	r3, [pc, #104]	; (2a38 <printKeyboardBuffer+0x2f8>)
    29ce:	4798      	blx	r3
					if(localEcho)
    29d0:	4b1a      	ldr	r3, [pc, #104]	; (2a3c <printKeyboardBuffer+0x2fc>)
    29d2:	781b      	ldrb	r3, [r3, #0]
    29d4:	2b00      	cmp	r3, #0
    29d6:	d100      	bne.n	29da <printKeyboardBuffer+0x29a>
    29d8:	e6f9      	b.n	27ce <printKeyboardBuffer+0x8e>
						parseChar(capsLockCase[scanCodeBuffer[i]]);
    29da:	9b01      	ldr	r3, [sp, #4]
    29dc:	781b      	ldrb	r3, [r3, #0]
    29de:	aa16      	add	r2, sp, #88	; 0x58
    29e0:	5cd0      	ldrb	r0, [r2, r3]
    29e2:	4b18      	ldr	r3, [pc, #96]	; (2a44 <printKeyboardBuffer+0x304>)
    29e4:	4798      	blx	r3
    29e6:	e6f2      	b.n	27ce <printKeyboardBuffer+0x8e>
					sendChar(noCase[scanCodeBuffer[i]]);
    29e8:	ab3a      	add	r3, sp, #232	; 0xe8
    29ea:	4642      	mov	r2, r8
    29ec:	5c98      	ldrb	r0, [r3, r2]
    29ee:	4b12      	ldr	r3, [pc, #72]	; (2a38 <printKeyboardBuffer+0x2f8>)
    29f0:	4798      	blx	r3
					if(localEcho)
    29f2:	4b12      	ldr	r3, [pc, #72]	; (2a3c <printKeyboardBuffer+0x2fc>)
    29f4:	781b      	ldrb	r3, [r3, #0]
    29f6:	2b00      	cmp	r3, #0
    29f8:	d100      	bne.n	29fc <printKeyboardBuffer+0x2bc>
    29fa:	e6e8      	b.n	27ce <printKeyboardBuffer+0x8e>
						parseChar(noCase[scanCodeBuffer[i]]);
    29fc:	9b01      	ldr	r3, [sp, #4]
    29fe:	781b      	ldrb	r3, [r3, #0]
    2a00:	aa3a      	add	r2, sp, #232	; 0xe8
    2a02:	5cd0      	ldrb	r0, [r2, r3]
    2a04:	4b0f      	ldr	r3, [pc, #60]	; (2a44 <printKeyboardBuffer+0x304>)
    2a06:	4798      	blx	r3
    2a08:	e6e1      	b.n	27ce <printKeyboardBuffer+0x8e>
		scanCodeBuffer[i] = 0xFF;
    2a0a:	23ff      	movs	r3, #255	; 0xff
    2a0c:	703b      	strb	r3, [r7, #0]
    2a0e:	3701      	adds	r7, #1
	for(int i = 0 ; i < 20 ; i++)
    2a10:	42bc      	cmp	r4, r7
    2a12:	d1fb      	bne.n	2a0c <printKeyboardBuffer+0x2cc>
}
    2a14:	b04c      	add	sp, #304	; 0x130
    2a16:	bc1c      	pop	{r2, r3, r4}
    2a18:	4690      	mov	r8, r2
    2a1a:	4699      	mov	r9, r3
    2a1c:	46a2      	mov	sl, r4
    2a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a20:	00006b24 	.word	0x00006b24
    2a24:	0000396d 	.word	0x0000396d
    2a28:	00006ba4 	.word	0x00006ba4
    2a2c:	20000028 	.word	0x20000028
    2a30:	20000014 	.word	0x20000014
    2a34:	00002715 	.word	0x00002715
    2a38:	00000875 	.word	0x00000875
    2a3c:	20000160 	.word	0x20000160
    2a40:	200002b8 	.word	0x200002b8
    2a44:	00000551 	.word	0x00000551
    2a48:	200002c0 	.word	0x200002c0
    2a4c:	00000141 	.word	0x00000141
    2a50:	200002a8 	.word	0x200002a8
    2a54:	2000015c 	.word	0x2000015c
    2a58:	200002ba 	.word	0x200002ba
    2a5c:	000025d9 	.word	0x000025d9

00002a60 <removeFromKeyDown>:

void removeFromKeyDown(int scancode)
{
    2a60:	b510      	push	{r4, lr}
    2a62:	4b07      	ldr	r3, [pc, #28]	; (2a80 <removeFromKeyDown+0x20>)
    2a64:	0019      	movs	r1, r3
    2a66:	3114      	adds	r1, #20
	for(int i = 0 ; i < 20 ; i++)
	{
		if(keyDownBuffer[i] == scancode)
		{
			keyDownBuffer[i] = 0xFF;
    2a68:	24ff      	movs	r4, #255	; 0xff
    2a6a:	e002      	b.n	2a72 <removeFromKeyDown+0x12>
    2a6c:	3301      	adds	r3, #1
	for(int i = 0 ; i < 20 ; i++)
    2a6e:	428b      	cmp	r3, r1
    2a70:	d004      	beq.n	2a7c <removeFromKeyDown+0x1c>
		if(keyDownBuffer[i] == scancode)
    2a72:	781a      	ldrb	r2, [r3, #0]
    2a74:	4282      	cmp	r2, r0
    2a76:	d1f9      	bne.n	2a6c <removeFromKeyDown+0xc>
			keyDownBuffer[i] = 0xFF;
    2a78:	701c      	strb	r4, [r3, #0]
    2a7a:	e7f7      	b.n	2a6c <removeFromKeyDown+0xc>
		}
	}
}
    2a7c:	bd10      	pop	{r4, pc}
    2a7e:	46c0      	nop			; (mov r8, r8)
    2a80:	20000014 	.word	0x20000014

00002a84 <readKeyboard>:
{
    2a84:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a86:	46de      	mov	lr, fp
    2a88:	4657      	mov	r7, sl
    2a8a:	464e      	mov	r6, r9
    2a8c:	4645      	mov	r5, r8
    2a8e:	b5e0      	push	{r5, r6, r7, lr}
    2a90:	b083      	sub	sp, #12
    2a92:	4e6d      	ldr	r6, [pc, #436]	; (2c48 <readKeyboard+0x1c4>)
    2a94:	0031      	movs	r1, r6
    2a96:	3119      	adds	r1, #25
    2a98:	31ff      	adds	r1, #255	; 0xff
    2a9a:	0033      	movs	r3, r6
		scanCodes[i] = 0xFF;
    2a9c:	22ff      	movs	r2, #255	; 0xff
    2a9e:	c304      	stmia	r3!, {r2}
	for(i = 0 ; i < 70 ; i++)
    2aa0:	428b      	cmp	r3, r1
    2aa2:	d1fc      	bne.n	2a9e <readKeyboard+0x1a>
	PORT->Group[0].WRCONFIG.bit.DRVSTR = 1;
    2aa4:	4a69      	ldr	r2, [pc, #420]	; (2c4c <readKeyboard+0x1c8>)
    2aa6:	6a91      	ldr	r1, [r2, #40]	; 0x28
    2aa8:	2380      	movs	r3, #128	; 0x80
    2aaa:	03db      	lsls	r3, r3, #15
    2aac:	430b      	orrs	r3, r1
    2aae:	6293      	str	r3, [r2, #40]	; 0x28
    2ab0:	4c67      	ldr	r4, [pc, #412]	; (2c50 <readKeyboard+0x1cc>)
    2ab2:	341c      	adds	r4, #28
    2ab4:	4b66      	ldr	r3, [pc, #408]	; (2c50 <readKeyboard+0x1cc>)
		REG_PORT_DIRSET0 = kb_col[i];
    2ab6:	4867      	ldr	r0, [pc, #412]	; (2c54 <readKeyboard+0x1d0>)
		REG_PORT_OUTCLR0 = kb_col[i];
    2ab8:	4967      	ldr	r1, [pc, #412]	; (2c58 <readKeyboard+0x1d4>)
		REG_PORT_DIRSET0 = kb_col[i];
    2aba:	681a      	ldr	r2, [r3, #0]
    2abc:	6002      	str	r2, [r0, #0]
		REG_PORT_OUTCLR0 = kb_col[i];
    2abe:	cb04      	ldmia	r3!, {r2}
    2ac0:	600a      	str	r2, [r1, #0]
	for (i = 0; i < NUM_COL; i++) {
    2ac2:	42a3      	cmp	r3, r4
    2ac4:	d1f9      	bne.n	2aba <readKeyboard+0x36>
    2ac6:	2200      	movs	r2, #0
		REG_PORT_DIRCLR0 = kb_row[i];
    2ac8:	4b64      	ldr	r3, [pc, #400]	; (2c5c <readKeyboard+0x1d8>)
    2aca:	469c      	mov	ip, r3
    2acc:	4f64      	ldr	r7, [pc, #400]	; (2c60 <readKeyboard+0x1dc>)
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.PULLEN = 1;
    2ace:	4d65      	ldr	r5, [pc, #404]	; (2c64 <readKeyboard+0x1e0>)
    2ad0:	2404      	movs	r4, #4
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.INEN = 1;
    2ad2:	2002      	movs	r0, #2
		REG_PORT_DIRCLR0 = kb_row[i];
    2ad4:	4663      	mov	r3, ip
    2ad6:	58d3      	ldr	r3, [r2, r3]
    2ad8:	603b      	str	r3, [r7, #0]
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.PULLEN = 1;
    2ada:	5953      	ldr	r3, [r2, r5]
    2adc:	4962      	ldr	r1, [pc, #392]	; (2c68 <readKeyboard+0x1e4>)
    2ade:	4688      	mov	r8, r1
    2ae0:	4443      	add	r3, r8
    2ae2:	7819      	ldrb	r1, [r3, #0]
    2ae4:	4321      	orrs	r1, r4
    2ae6:	7019      	strb	r1, [r3, #0]
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.INEN = 1;
    2ae8:	7819      	ldrb	r1, [r3, #0]
    2aea:	4301      	orrs	r1, r0
    2aec:	7019      	strb	r1, [r3, #0]
    2aee:	3204      	adds	r2, #4
	for (i = 0; i < NUM_ROW; i++) {
    2af0:	2a28      	cmp	r2, #40	; 0x28
    2af2:	d1ef      	bne.n	2ad4 <readKeyboard+0x50>
    2af4:	4b56      	ldr	r3, [pc, #344]	; (2c50 <readKeyboard+0x1cc>)
    2af6:	4699      	mov	r9, r3
    2af8:	2300      	movs	r3, #0
    2afa:	4698      	mov	r8, r3
    2afc:	2200      	movs	r2, #0
		REG_PORT_OUTSET0 = kb_col[i];
    2afe:	4b5b      	ldr	r3, [pc, #364]	; (2c6c <readKeyboard+0x1e8>)
    2b00:	469b      	mov	fp, r3
			if((PORT->Group[0].IN.reg & kb_row[j]) != 0) {
    2b02:	4d52      	ldr	r5, [pc, #328]	; (2c4c <readKeyboard+0x1c8>)
				scanCodes[scanCodeIndex] = (i * NUM_ROW) + j;
    2b04:	4b50      	ldr	r3, [pc, #320]	; (2c48 <readKeyboard+0x1c4>)
    2b06:	469c      	mov	ip, r3
		REG_PORT_OUTCLR0 = kb_col[i];
    2b08:	4b53      	ldr	r3, [pc, #332]	; (2c58 <readKeyboard+0x1d4>)
    2b0a:	469a      	mov	sl, r3
    2b0c:	9601      	str	r6, [sp, #4]
    2b0e:	464e      	mov	r6, r9
    2b10:	4647      	mov	r7, r8
    2b12:	e015      	b.n	2b40 <readKeyboard+0xbc>
    2b14:	3304      	adds	r3, #4
    2b16:	3101      	adds	r1, #1
		for (j = 0; j < NUM_ROW; j++) {	
    2b18:	42a3      	cmp	r3, r4
    2b1a:	d008      	beq.n	2b2e <readKeyboard+0xaa>
			if((PORT->Group[0].IN.reg & kb_row[j]) != 0) {
    2b1c:	6a28      	ldr	r0, [r5, #32]
    2b1e:	681e      	ldr	r6, [r3, #0]
    2b20:	4206      	tst	r6, r0
    2b22:	d0f7      	beq.n	2b14 <readKeyboard+0x90>
				scanCodes[scanCodeIndex] = (i * NUM_ROW) + j;
    2b24:	0090      	lsls	r0, r2, #2
    2b26:	4666      	mov	r6, ip
    2b28:	5181      	str	r1, [r0, r6]
				scanCodeIndex++;
    2b2a:	3201      	adds	r2, #1
    2b2c:	e7f2      	b.n	2b14 <readKeyboard+0x90>
    2b2e:	9e00      	ldr	r6, [sp, #0]
		REG_PORT_OUTCLR0 = kb_col[i];
    2b30:	4649      	mov	r1, r9
    2b32:	6809      	ldr	r1, [r1, #0]
    2b34:	4650      	mov	r0, sl
    2b36:	6001      	str	r1, [r0, #0]
    2b38:	3604      	adds	r6, #4
    2b3a:	370a      	adds	r7, #10
	for (i = 0; i < NUM_COL; i++) {
    2b3c:	2f46      	cmp	r7, #70	; 0x46
    2b3e:	d00a      	beq.n	2b56 <readKeyboard+0xd2>
    2b40:	46b1      	mov	r9, r6
		REG_PORT_OUTSET0 = kb_col[i];
    2b42:	465b      	mov	r3, fp
    2b44:	6831      	ldr	r1, [r6, #0]
    2b46:	6019      	str	r1, [r3, #0]
    2b48:	4b44      	ldr	r3, [pc, #272]	; (2c5c <readKeyboard+0x1d8>)
    2b4a:	4698      	mov	r8, r3
    2b4c:	001c      	movs	r4, r3
    2b4e:	3428      	adds	r4, #40	; 0x28
    2b50:	0039      	movs	r1, r7
    2b52:	9600      	str	r6, [sp, #0]
    2b54:	e7e2      	b.n	2b1c <readKeyboard+0x98>
    2b56:	4647      	mov	r7, r8
    2b58:	9e01      	ldr	r6, [sp, #4]
    2b5a:	4641      	mov	r1, r8
		REG_PORT_DIRSET0 = kb_row[i];
    2b5c:	4d3d      	ldr	r5, [pc, #244]	; (2c54 <readKeyboard+0x1d0>)
		REG_PORT_OUTCLR0 = kb_row[i];
    2b5e:	4c3e      	ldr	r4, [pc, #248]	; (2c58 <readKeyboard+0x1d4>)
		REG_PORT_DIRSET0 = kb_row[i];
    2b60:	6808      	ldr	r0, [r1, #0]
    2b62:	6028      	str	r0, [r5, #0]
		REG_PORT_OUTCLR0 = kb_row[i];
    2b64:	c901      	ldmia	r1!, {r0}
    2b66:	6020      	str	r0, [r4, #0]
	for (i = 0; i < NUM_ROW; i++) {
    2b68:	4299      	cmp	r1, r3
    2b6a:	d1f9      	bne.n	2b60 <readKeyboard+0xdc>
    2b6c:	2100      	movs	r1, #0
		REG_PORT_DIRCLR0 = kb_col[i];
    2b6e:	4b38      	ldr	r3, [pc, #224]	; (2c50 <readKeyboard+0x1cc>)
    2b70:	4699      	mov	r9, r3
    2b72:	4b3b      	ldr	r3, [pc, #236]	; (2c60 <readKeyboard+0x1dc>)
    2b74:	4698      	mov	r8, r3
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.PULLEN = 1;
    2b76:	4b3e      	ldr	r3, [pc, #248]	; (2c70 <readKeyboard+0x1ec>)
    2b78:	469c      	mov	ip, r3
    2b7a:	2504      	movs	r5, #4
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.INEN = 1;
    2b7c:	2402      	movs	r4, #2
		REG_PORT_DIRCLR0 = kb_col[i];
    2b7e:	4643      	mov	r3, r8
    2b80:	4648      	mov	r0, r9
    2b82:	5808      	ldr	r0, [r1, r0]
    2b84:	6018      	str	r0, [r3, #0]
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.PULLEN = 1;
    2b86:	4663      	mov	r3, ip
    2b88:	58cb      	ldr	r3, [r1, r3]
    2b8a:	4837      	ldr	r0, [pc, #220]	; (2c68 <readKeyboard+0x1e4>)
    2b8c:	4682      	mov	sl, r0
    2b8e:	4453      	add	r3, sl
    2b90:	7818      	ldrb	r0, [r3, #0]
    2b92:	4328      	orrs	r0, r5
    2b94:	7018      	strb	r0, [r3, #0]
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.INEN = 1;
    2b96:	7818      	ldrb	r0, [r3, #0]
    2b98:	4320      	orrs	r0, r4
    2b9a:	7018      	strb	r0, [r3, #0]
    2b9c:	3104      	adds	r1, #4
	for (i = 0; i < NUM_COL; i++) {
    2b9e:	291c      	cmp	r1, #28
    2ba0:	d1ed      	bne.n	2b7e <readKeyboard+0xfa>
    2ba2:	2300      	movs	r3, #0
    2ba4:	469c      	mov	ip, r3
		REG_PORT_OUTSET0 = kb_row[i];
    2ba6:	4b31      	ldr	r3, [pc, #196]	; (2c6c <readKeyboard+0x1e8>)
    2ba8:	469b      	mov	fp, r3
			if((PORT->Group[0].IN.reg & kb_col[j]) != 0)
    2baa:	4d28      	ldr	r5, [pc, #160]	; (2c4c <readKeyboard+0x1c8>)
				scanCodes[scanCodeIndex] = (j * NUM_ROW) + i;
    2bac:	4b26      	ldr	r3, [pc, #152]	; (2c48 <readKeyboard+0x1c4>)
    2bae:	4698      	mov	r8, r3
		REG_PORT_OUTCLR0 = kb_row[i];
    2bb0:	4b29      	ldr	r3, [pc, #164]	; (2c58 <readKeyboard+0x1d4>)
    2bb2:	469a      	mov	sl, r3
    2bb4:	46b1      	mov	r9, r6
    2bb6:	003e      	movs	r6, r7
    2bb8:	4667      	mov	r7, ip
    2bba:	e015      	b.n	2be8 <readKeyboard+0x164>
    2bbc:	3104      	adds	r1, #4
    2bbe:	330a      	adds	r3, #10
		for (j = 0; j < NUM_COL; j++) {
    2bc0:	42a3      	cmp	r3, r4
    2bc2:	d008      	beq.n	2bd6 <readKeyboard+0x152>
			if((PORT->Group[0].IN.reg & kb_col[j]) != 0)
    2bc4:	6a28      	ldr	r0, [r5, #32]
    2bc6:	680e      	ldr	r6, [r1, #0]
    2bc8:	4206      	tst	r6, r0
    2bca:	d0f7      	beq.n	2bbc <readKeyboard+0x138>
				scanCodes[scanCodeIndex] = (j * NUM_ROW) + i;
    2bcc:	0090      	lsls	r0, r2, #2
    2bce:	4646      	mov	r6, r8
    2bd0:	5183      	str	r3, [r0, r6]
				scanCodeIndex++;
    2bd2:	3201      	adds	r2, #1
    2bd4:	e7f2      	b.n	2bbc <readKeyboard+0x138>
    2bd6:	9e00      	ldr	r6, [sp, #0]
		REG_PORT_OUTCLR0 = kb_row[i];
    2bd8:	4663      	mov	r3, ip
    2bda:	681b      	ldr	r3, [r3, #0]
    2bdc:	4651      	mov	r1, sl
    2bde:	600b      	str	r3, [r1, #0]
	for (i = 0; i < NUM_ROW; i++) {
    2be0:	3701      	adds	r7, #1
    2be2:	3604      	adds	r6, #4
    2be4:	2f0a      	cmp	r7, #10
    2be6:	d009      	beq.n	2bfc <readKeyboard+0x178>
    2be8:	46b4      	mov	ip, r6
		REG_PORT_OUTSET0 = kb_row[i];
    2bea:	465b      	mov	r3, fp
    2bec:	6831      	ldr	r1, [r6, #0]
    2bee:	6019      	str	r1, [r3, #0]
    2bf0:	003b      	movs	r3, r7
    2bf2:	003c      	movs	r4, r7
    2bf4:	3446      	adds	r4, #70	; 0x46
    2bf6:	4916      	ldr	r1, [pc, #88]	; (2c50 <readKeyboard+0x1cc>)
    2bf8:	9600      	str	r6, [sp, #0]
    2bfa:	e7e3      	b.n	2bc4 <readKeyboard+0x140>
    2bfc:	464e      	mov	r6, r9
	for(i = 0 ; i < scanCodeIndex ; i++)
    2bfe:	2a00      	cmp	r2, #0
    2c00:	dd08      	ble.n	2c14 <readKeyboard+0x190>
    2c02:	4b1c      	ldr	r3, [pc, #112]	; (2c74 <readKeyboard+0x1f0>)
    2c04:	0092      	lsls	r2, r2, #2
    2c06:	4910      	ldr	r1, [pc, #64]	; (2c48 <readKeyboard+0x1c4>)
    2c08:	188a      	adds	r2, r1, r2
		scanCodeBuffer[i] = scanCodes[i];	
    2c0a:	ce02      	ldmia	r6!, {r1}
    2c0c:	7019      	strb	r1, [r3, #0]
    2c0e:	3301      	adds	r3, #1
	for(i = 0 ; i < scanCodeIndex ; i++)
    2c10:	42b2      	cmp	r2, r6
    2c12:	d1fa      	bne.n	2c0a <readKeyboard+0x186>
		REG_PORT_OUTSET0 = kb_row[i];
    2c14:	2400      	movs	r4, #0
		if(keyDown(i) && !scanCodesContains(i))
    2c16:	4d18      	ldr	r5, [pc, #96]	; (2c78 <readKeyboard+0x1f4>)
    2c18:	4e18      	ldr	r6, [pc, #96]	; (2c7c <readKeyboard+0x1f8>)
			removeFromKeyDown(i);
    2c1a:	4f19      	ldr	r7, [pc, #100]	; (2c80 <readKeyboard+0x1fc>)
    2c1c:	e002      	b.n	2c24 <readKeyboard+0x1a0>
	for(i = 0; i < 70; i++)
    2c1e:	3401      	adds	r4, #1
    2c20:	2c46      	cmp	r4, #70	; 0x46
    2c22:	d00a      	beq.n	2c3a <readKeyboard+0x1b6>
		if(keyDown(i) && !scanCodesContains(i))
    2c24:	0020      	movs	r0, r4
    2c26:	47a8      	blx	r5
    2c28:	2800      	cmp	r0, #0
    2c2a:	d0f8      	beq.n	2c1e <readKeyboard+0x19a>
    2c2c:	0020      	movs	r0, r4
    2c2e:	47b0      	blx	r6
    2c30:	2800      	cmp	r0, #0
    2c32:	d1f4      	bne.n	2c1e <readKeyboard+0x19a>
			removeFromKeyDown(i);
    2c34:	0020      	movs	r0, r4
    2c36:	47b8      	blx	r7
    2c38:	e7f1      	b.n	2c1e <readKeyboard+0x19a>
}
    2c3a:	b003      	add	sp, #12
    2c3c:	bc3c      	pop	{r2, r3, r4, r5}
    2c3e:	4690      	mov	r8, r2
    2c40:	4699      	mov	r9, r3
    2c42:	46a2      	mov	sl, r4
    2c44:	46ab      	mov	fp, r5
    2c46:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c48:	2000003c 	.word	0x2000003c
    2c4c:	41004400 	.word	0x41004400
    2c50:	00006c44 	.word	0x00006c44
    2c54:	41004408 	.word	0x41004408
    2c58:	41004414 	.word	0x41004414
    2c5c:	00006c7c 	.word	0x00006c7c
    2c60:	41004404 	.word	0x41004404
    2c64:	00006ca4 	.word	0x00006ca4
    2c68:	41004440 	.word	0x41004440
    2c6c:	41004418 	.word	0x41004418
    2c70:	00006c60 	.word	0x00006c60
    2c74:	20000028 	.word	0x20000028
    2c78:	00002715 	.word	0x00002715
    2c7c:	000026e9 	.word	0x000026e9
    2c80:	00002a61 	.word	0x00002a61

00002c84 <setColorRGB>:

uint16_t fore_Color_High, fore_Color_Low;
uint16_t back_Color_High, back_Color_Low;

void setColorRGB(uint8_t r, uint8_t g, uint8_t b)
{
    2c84:	b510      	push	{r4, lr}
	fore_Color_High = ((r&248)|g>>5);
    2c86:	094b      	lsrs	r3, r1, #5
    2c88:	2407      	movs	r4, #7
    2c8a:	43a0      	bics	r0, r4
    2c8c:	4318      	orrs	r0, r3
    2c8e:	4b05      	ldr	r3, [pc, #20]	; (2ca4 <setColorRGB+0x20>)
    2c90:	8018      	strh	r0, [r3, #0]
	fore_Color_Low = ((g&28)<<3|b>>3);
    2c92:	00c9      	lsls	r1, r1, #3
    2c94:	23e0      	movs	r3, #224	; 0xe0
    2c96:	4019      	ands	r1, r3
    2c98:	08d2      	lsrs	r2, r2, #3
    2c9a:	430a      	orrs	r2, r1
    2c9c:	4b02      	ldr	r3, [pc, #8]	; (2ca8 <setColorRGB+0x24>)
    2c9e:	801a      	strh	r2, [r3, #0]
}
    2ca0:	bd10      	pop	{r4, pc}
    2ca2:	46c0      	nop			; (mov r8, r8)
    2ca4:	20000aa6 	.word	0x20000aa6
    2ca8:	20000aa8 	.word	0x20000aa8

00002cac <setBackColorRGB>:
	fore_Color_Low = (color & 0xFF);
}

void setBackColorRGB(unsigned char r,
unsigned char g, unsigned char b)
{
    2cac:	b510      	push	{r4, lr}
	back_Color_High = ((r&248)|g>>5);
    2cae:	094b      	lsrs	r3, r1, #5
    2cb0:	2407      	movs	r4, #7
    2cb2:	43a0      	bics	r0, r4
    2cb4:	4318      	orrs	r0, r3
    2cb6:	4b05      	ldr	r3, [pc, #20]	; (2ccc <setBackColorRGB+0x20>)
    2cb8:	8018      	strh	r0, [r3, #0]
	back_Color_Low = ((g&28)<<3|b>>3);
    2cba:	00c9      	lsls	r1, r1, #3
    2cbc:	23e0      	movs	r3, #224	; 0xe0
    2cbe:	4019      	ands	r1, r3
    2cc0:	08d2      	lsrs	r2, r2, #3
    2cc2:	430a      	orrs	r2, r1
    2cc4:	4b02      	ldr	r3, [pc, #8]	; (2cd0 <setBackColorRGB+0x24>)
    2cc6:	801a      	strh	r2, [r3, #0]
}
    2cc8:	bd10      	pop	{r4, pc}
    2cca:	46c0      	nop			; (mov r8, r8)
    2ccc:	20000aaa 	.word	0x20000aaa
    2cd0:	20000aa4 	.word	0x20000aa4

00002cd4 <LCD_Fast_Fill>:
	(((long)(x2-x1)+1)*((long)(y2-y1)+1)));
	REG_PORT_OUTSET1 = LCD_CS;
}

void LCD_Fast_Fill(int ch, int cl, long pix)
{
    2cd4:	b570      	push	{r4, r5, r6, lr}
	int blocks;
	
	
	REG_PORT_OUTCLR1 = 0x0000ffff;
    2cd6:	4c19      	ldr	r4, [pc, #100]	; (2d3c <LCD_Fast_Fill+0x68>)
    2cd8:	4b19      	ldr	r3, [pc, #100]	; (2d40 <LCD_Fast_Fill+0x6c>)
    2cda:	601c      	str	r4, [r3, #0]
	REG_PORT_OUTSET1 = (ch << 8) | cl;
    2cdc:	0200      	lsls	r0, r0, #8
    2cde:	4301      	orrs	r1, r0
    2ce0:	4b18      	ldr	r3, [pc, #96]	; (2d44 <LCD_Fast_Fill+0x70>)
    2ce2:	6019      	str	r1, [r3, #0]

	blocks = pix/16;
    2ce4:	17d3      	asrs	r3, r2, #31
    2ce6:	260f      	movs	r6, #15
    2ce8:	401e      	ands	r6, r3
    2cea:	18b6      	adds	r6, r6, r2
    2cec:	1136      	asrs	r6, r6, #4
	for (int i=0; i<blocks; i++)
    2cee:	2500      	movs	r5, #0
    2cf0:	2e00      	cmp	r6, #0
    2cf2:	dd0c      	ble.n	2d0e <LCD_Fast_Fill+0x3a>
	{
		for (int j=0; j<16; j++)
		{
			REG_PORT_OUTCLR1 = LCD_WR;
    2cf4:	4c12      	ldr	r4, [pc, #72]	; (2d40 <LCD_Fast_Fill+0x6c>)
    2cf6:	2180      	movs	r1, #128	; 0x80
    2cf8:	0289      	lsls	r1, r1, #10
			REG_PORT_OUTSET1 = LCD_WR;
    2cfa:	4812      	ldr	r0, [pc, #72]	; (2d44 <LCD_Fast_Fill+0x70>)
{
    2cfc:	2310      	movs	r3, #16
			REG_PORT_OUTCLR1 = LCD_WR;
    2cfe:	6021      	str	r1, [r4, #0]
			REG_PORT_OUTSET1 = LCD_WR;
    2d00:	6001      	str	r1, [r0, #0]
    2d02:	3b01      	subs	r3, #1
		for (int j=0; j<16; j++)
    2d04:	2b00      	cmp	r3, #0
    2d06:	d1fa      	bne.n	2cfe <LCD_Fast_Fill+0x2a>
	for (int i=0; i<blocks; i++)
    2d08:	3501      	adds	r5, #1
    2d0a:	42ae      	cmp	r6, r5
    2d0c:	d1f6      	bne.n	2cfc <LCD_Fast_Fill+0x28>
		}
	}
	
	if ((pix % 16) != 0)
    2d0e:	0713      	lsls	r3, r2, #28
    2d10:	d013      	beq.n	2d3a <LCD_Fast_Fill+0x66>
	for (int i=0; i<(pix % 16)+1; i++)
    2d12:	17d3      	asrs	r3, r2, #31
    2d14:	0f1b      	lsrs	r3, r3, #28
    2d16:	18d2      	adds	r2, r2, r3
    2d18:	210f      	movs	r1, #15
    2d1a:	4011      	ands	r1, r2
    2d1c:	1ac9      	subs	r1, r1, r3
    2d1e:	1c4b      	adds	r3, r1, #1
    2d20:	2b00      	cmp	r3, #0
    2d22:	dd0a      	ble.n	2d3a <LCD_Fast_Fill+0x66>
    2d24:	0019      	movs	r1, r3
    2d26:	2300      	movs	r3, #0
	{
		REG_PORT_OUTCLR1 = LCD_WR;
    2d28:	4c05      	ldr	r4, [pc, #20]	; (2d40 <LCD_Fast_Fill+0x6c>)
    2d2a:	2280      	movs	r2, #128	; 0x80
    2d2c:	0292      	lsls	r2, r2, #10
		REG_PORT_OUTSET1 = LCD_WR;
    2d2e:	4805      	ldr	r0, [pc, #20]	; (2d44 <LCD_Fast_Fill+0x70>)
		REG_PORT_OUTCLR1 = LCD_WR;
    2d30:	6022      	str	r2, [r4, #0]
		REG_PORT_OUTSET1 = LCD_WR;
    2d32:	6002      	str	r2, [r0, #0]
	for (int i=0; i<(pix % 16)+1; i++)
    2d34:	3301      	adds	r3, #1
    2d36:	4299      	cmp	r1, r3
    2d38:	d1fa      	bne.n	2d30 <LCD_Fast_Fill+0x5c>
	}
}
    2d3a:	bd70      	pop	{r4, r5, r6, pc}
    2d3c:	0000ffff 	.word	0x0000ffff
    2d40:	41004494 	.word	0x41004494
    2d44:	41004498 	.word	0x41004498

00002d48 <setXY>:
{
	setXY(0,0,display_X_size,display_Y_size);
}

void setXY(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
    2d48:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d4a:	b083      	sub	sp, #12
    2d4c:	0007      	movs	r7, r0
    2d4e:	9100      	str	r1, [sp, #0]
    2d50:	0016      	movs	r6, r2
    2d52:	9301      	str	r3, [sp, #4]
	y1=display_Y_size-y1;
	y2=display_Y_size-y2;
	SwapUint16(y1, y2);
	*/
	
	LCD_Write_COM16(0x2a,0x00);
    2d54:	2100      	movs	r1, #0
    2d56:	202a      	movs	r0, #42	; 0x2a
    2d58:	4c17      	ldr	r4, [pc, #92]	; (2db8 <setXY+0x70>)
    2d5a:	47a0      	blx	r4
	LCD_Write_DATA8(x1>>8);
    2d5c:	0a38      	lsrs	r0, r7, #8
    2d5e:	4d17      	ldr	r5, [pc, #92]	; (2dbc <setXY+0x74>)
    2d60:	47a8      	blx	r5
	LCD_Write_COM16(0x2a,0x01);
    2d62:	2101      	movs	r1, #1
    2d64:	202a      	movs	r0, #42	; 0x2a
    2d66:	47a0      	blx	r4
	LCD_Write_DATA8(x1);
    2d68:	b2f8      	uxtb	r0, r7
    2d6a:	47a8      	blx	r5
	LCD_Write_COM16(0x2a,0x02);
    2d6c:	2102      	movs	r1, #2
    2d6e:	202a      	movs	r0, #42	; 0x2a
    2d70:	47a0      	blx	r4
	LCD_Write_DATA8(x2>>8);
    2d72:	0a30      	lsrs	r0, r6, #8
    2d74:	47a8      	blx	r5
	LCD_Write_COM16(0x2a,0x03);
    2d76:	2103      	movs	r1, #3
    2d78:	202a      	movs	r0, #42	; 0x2a
    2d7a:	47a0      	blx	r4
	LCD_Write_DATA8(x2);
    2d7c:	b2f0      	uxtb	r0, r6
    2d7e:	47a8      	blx	r5

	LCD_Write_COM16(0x2b,0x00);
    2d80:	2100      	movs	r1, #0
    2d82:	202b      	movs	r0, #43	; 0x2b
    2d84:	47a0      	blx	r4
	LCD_Write_DATA8(y1>>8);
    2d86:	9e00      	ldr	r6, [sp, #0]
    2d88:	0a30      	lsrs	r0, r6, #8
    2d8a:	47a8      	blx	r5
	LCD_Write_COM16(0x2b,0x01);
    2d8c:	2101      	movs	r1, #1
    2d8e:	202b      	movs	r0, #43	; 0x2b
    2d90:	47a0      	blx	r4
	LCD_Write_DATA8(y1);
    2d92:	b2f0      	uxtb	r0, r6
    2d94:	47a8      	blx	r5
	LCD_Write_COM16(0x2b,0x02);
    2d96:	2102      	movs	r1, #2
    2d98:	202b      	movs	r0, #43	; 0x2b
    2d9a:	47a0      	blx	r4
	LCD_Write_DATA8(y2>>8);
    2d9c:	9e01      	ldr	r6, [sp, #4]
    2d9e:	0a30      	lsrs	r0, r6, #8
    2da0:	47a8      	blx	r5
	LCD_Write_COM16(0x2b,0x03);
    2da2:	2103      	movs	r1, #3
    2da4:	202b      	movs	r0, #43	; 0x2b
    2da6:	47a0      	blx	r4
	LCD_Write_DATA8(y2);
    2da8:	b2f0      	uxtb	r0, r6
    2daa:	47a8      	blx	r5

	LCD_Write_COM16(0x2c,0x00);
    2dac:	2100      	movs	r1, #0
    2dae:	202c      	movs	r0, #44	; 0x2c
    2db0:	47a0      	blx	r4
}
    2db2:	b003      	add	sp, #12
    2db4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2db6:	46c0      	nop			; (mov r8, r8)
    2db8:	00002eed 	.word	0x00002eed
    2dbc:	00002f1d 	.word	0x00002f1d

00002dc0 <fillRect>:
{
    2dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2dc2:	46ce      	mov	lr, r9
    2dc4:	4647      	mov	r7, r8
    2dc6:	b580      	push	{r7, lr}
    2dc8:	b083      	sub	sp, #12
    2dca:	0006      	movs	r6, r0
    2dcc:	4689      	mov	r9, r1
    2dce:	0014      	movs	r4, r2
    2dd0:	001d      	movs	r5, r3
	if (x1>x2)
    2dd2:	4290      	cmp	r0, r2
    2dd4:	dd01      	ble.n	2dda <fillRect+0x1a>
		x1 = x2;
    2dd6:	0016      	movs	r6, r2
		x2 = temp;
    2dd8:	0004      	movs	r4, r0
	if (y1>y2)
    2dda:	45a9      	cmp	r9, r5
    2ddc:	dd02      	ble.n	2de4 <fillRect+0x24>
    2dde:	0033      	movs	r3, r6
		x1 = x2;
    2de0:	0026      	movs	r6, r4
		x2 = temp;
    2de2:	001c      	movs	r4, r3
	REG_PORT_OUTCLR1 = LCD_CS;
    2de4:	2380      	movs	r3, #128	; 0x80
    2de6:	03db      	lsls	r3, r3, #15
    2de8:	4698      	mov	r8, r3
    2dea:	4b11      	ldr	r3, [pc, #68]	; (2e30 <fillRect+0x70>)
    2dec:	4642      	mov	r2, r8
    2dee:	601a      	str	r2, [r3, #0]
	setXY(x1, y1, x2, y2);
    2df0:	b2ab      	uxth	r3, r5
    2df2:	b2a2      	uxth	r2, r4
    2df4:	4649      	mov	r1, r9
    2df6:	4668      	mov	r0, sp
    2df8:	80c1      	strh	r1, [r0, #6]
    2dfa:	88c1      	ldrh	r1, [r0, #6]
    2dfc:	b2b0      	uxth	r0, r6
    2dfe:	4f0d      	ldr	r7, [pc, #52]	; (2e34 <fillRect+0x74>)
    2e00:	47b8      	blx	r7
	REG_PORT_OUTSET1 = LCD_DC;
    2e02:	4f0d      	ldr	r7, [pc, #52]	; (2e38 <fillRect+0x78>)
    2e04:	2380      	movs	r3, #128	; 0x80
    2e06:	041b      	lsls	r3, r3, #16
    2e08:	603b      	str	r3, [r7, #0]
	(((long)(x2-x1)+1)*((long)(y2-y1)+1)));
    2e0a:	1ba4      	subs	r4, r4, r6
    2e0c:	3401      	adds	r4, #1
    2e0e:	464b      	mov	r3, r9
    2e10:	1aea      	subs	r2, r5, r3
    2e12:	3201      	adds	r2, #1
	LCD_Fast_Fill(fore_Color_High, fore_Color_Low,
    2e14:	4362      	muls	r2, r4
    2e16:	4b09      	ldr	r3, [pc, #36]	; (2e3c <fillRect+0x7c>)
    2e18:	8819      	ldrh	r1, [r3, #0]
    2e1a:	4b09      	ldr	r3, [pc, #36]	; (2e40 <fillRect+0x80>)
    2e1c:	8818      	ldrh	r0, [r3, #0]
    2e1e:	4b09      	ldr	r3, [pc, #36]	; (2e44 <fillRect+0x84>)
    2e20:	4798      	blx	r3
	REG_PORT_OUTSET1 = LCD_CS;
    2e22:	4643      	mov	r3, r8
    2e24:	603b      	str	r3, [r7, #0]
}
    2e26:	b003      	add	sp, #12
    2e28:	bc0c      	pop	{r2, r3}
    2e2a:	4690      	mov	r8, r2
    2e2c:	4699      	mov	r9, r3
    2e2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2e30:	41004494 	.word	0x41004494
    2e34:	00002d49 	.word	0x00002d49
    2e38:	41004498 	.word	0x41004498
    2e3c:	20000aa8 	.word	0x20000aa8
    2e40:	20000aa6 	.word	0x20000aa6
    2e44:	00002cd5 	.word	0x00002cd5

00002e48 <clrXY>:
{
    2e48:	b510      	push	{r4, lr}
	setXY(0,0,display_X_size,display_Y_size);
    2e4a:	4b04      	ldr	r3, [pc, #16]	; (2e5c <clrXY+0x14>)
    2e4c:	881b      	ldrh	r3, [r3, #0]
    2e4e:	4a04      	ldr	r2, [pc, #16]	; (2e60 <clrXY+0x18>)
    2e50:	8812      	ldrh	r2, [r2, #0]
    2e52:	2100      	movs	r1, #0
    2e54:	2000      	movs	r0, #0
    2e56:	4c03      	ldr	r4, [pc, #12]	; (2e64 <clrXY+0x1c>)
    2e58:	47a0      	blx	r4
}
    2e5a:	bd10      	pop	{r4, pc}
    2e5c:	20000156 	.word	0x20000156
    2e60:	20000154 	.word	0x20000154
    2e64:	00002d49 	.word	0x00002d49

00002e68 <clrScr>:
{
    2e68:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = LCD_CS;
    2e6a:	2280      	movs	r2, #128	; 0x80
    2e6c:	03d2      	lsls	r2, r2, #15
    2e6e:	4b02      	ldr	r3, [pc, #8]	; (2e78 <clrScr+0x10>)
    2e70:	601a      	str	r2, [r3, #0]
	clrXY();
    2e72:	4b02      	ldr	r3, [pc, #8]	; (2e7c <clrScr+0x14>)
    2e74:	4798      	blx	r3
}
    2e76:	bd10      	pop	{r4, pc}
    2e78:	41004494 	.word	0x41004494
    2e7c:	00002e49 	.word	0x00002e49

00002e80 <setPixel>:

void setPixel(uint16_t color)
{
    2e80:	b510      	push	{r4, lr}
	//it sets it to a 16-bit color.
	LCD_Write_DATA16((color>>8),(color&0xFF));
    2e82:	b2c1      	uxtb	r1, r0
    2e84:	0a00      	lsrs	r0, r0, #8
    2e86:	4b01      	ldr	r3, [pc, #4]	; (2e8c <setPixel+0xc>)
    2e88:	4798      	blx	r3
}
    2e8a:	bd10      	pop	{r4, pc}
    2e8c:	00002f05 	.word	0x00002f05

00002e90 <clearScreen>:
	LCD_Write_DATA8(0x80);
	REG_PORT_OUTSET1 = LCD_CS;
}
*/
void clearScreen(void)
{
    2e90:	b510      	push	{r4, lr}
	fore_Color_High = ((r&248)|g>>5);
    2e92:	2300      	movs	r3, #0
    2e94:	4a06      	ldr	r2, [pc, #24]	; (2eb0 <clearScreen+0x20>)
    2e96:	8013      	strh	r3, [r2, #0]
	fore_Color_Low = ((g&28)<<3|b>>3);
    2e98:	4a06      	ldr	r2, [pc, #24]	; (2eb4 <clearScreen+0x24>)
    2e9a:	8013      	strh	r3, [r2, #0]
	setColorRGB(0,0,0);
	fillRect(0,0,display_Y_size,display_X_size);
    2e9c:	4b06      	ldr	r3, [pc, #24]	; (2eb8 <clearScreen+0x28>)
    2e9e:	881b      	ldrh	r3, [r3, #0]
    2ea0:	4a06      	ldr	r2, [pc, #24]	; (2ebc <clearScreen+0x2c>)
    2ea2:	8812      	ldrh	r2, [r2, #0]
    2ea4:	2100      	movs	r1, #0
    2ea6:	2000      	movs	r0, #0
    2ea8:	4c05      	ldr	r4, [pc, #20]	; (2ec0 <clearScreen+0x30>)
    2eaa:	47a0      	blx	r4
}
    2eac:	bd10      	pop	{r4, pc}
    2eae:	46c0      	nop			; (mov r8, r8)
    2eb0:	20000aa6 	.word	0x20000aa6
    2eb4:	20000aa8 	.word	0x20000aa8
    2eb8:	20000154 	.word	0x20000154
    2ebc:	20000156 	.word	0x20000156
    2ec0:	00002dc1 	.word	0x00002dc1

00002ec4 <LCD_Write_Bus>:
	fillRect(0,0,799,489);
		
}

void LCD_Write_Bus(char VH, char VL)
{
    2ec4:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = 0x0000ffff;
    2ec6:	4c06      	ldr	r4, [pc, #24]	; (2ee0 <LCD_Write_Bus+0x1c>)
    2ec8:	4b06      	ldr	r3, [pc, #24]	; (2ee4 <LCD_Write_Bus+0x20>)
    2eca:	6023      	str	r3, [r4, #0]
	REG_PORT_OUTSET1 = (VH << 8) | VL;
    2ecc:	0200      	lsls	r0, r0, #8
    2ece:	4301      	orrs	r1, r0
    2ed0:	4b05      	ldr	r3, [pc, #20]	; (2ee8 <LCD_Write_Bus+0x24>)
    2ed2:	6019      	str	r1, [r3, #0]
	REG_PORT_OUTCLR1 = LCD_WR;
    2ed4:	2280      	movs	r2, #128	; 0x80
    2ed6:	0292      	lsls	r2, r2, #10
    2ed8:	6022      	str	r2, [r4, #0]
	REG_PORT_OUTSET1 = LCD_WR;
    2eda:	601a      	str	r2, [r3, #0]
}
    2edc:	bd10      	pop	{r4, pc}
    2ede:	46c0      	nop			; (mov r8, r8)
    2ee0:	41004494 	.word	0x41004494
    2ee4:	0000ffff 	.word	0x0000ffff
    2ee8:	41004498 	.word	0x41004498

00002eec <LCD_Write_COM16>:

void LCD_Write_COM16(char VH, char VL)
{
    2eec:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = LCD_DC;
    2eee:	2280      	movs	r2, #128	; 0x80
    2ef0:	0412      	lsls	r2, r2, #16
    2ef2:	4b02      	ldr	r3, [pc, #8]	; (2efc <LCD_Write_COM16+0x10>)
    2ef4:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(VH,VL);
    2ef6:	4b02      	ldr	r3, [pc, #8]	; (2f00 <LCD_Write_COM16+0x14>)
    2ef8:	4798      	blx	r3
}
    2efa:	bd10      	pop	{r4, pc}
    2efc:	41004494 	.word	0x41004494
    2f00:	00002ec5 	.word	0x00002ec5

00002f04 <LCD_Write_DATA16>:
	REG_PORT_OUTCLR1 = LCD_DC;
	LCD_Write_Bus(0x00, VL);
}

void LCD_Write_DATA16(char VH, char VL)
{
    2f04:	b510      	push	{r4, lr}
	REG_PORT_OUTSET1 = LCD_DC;
    2f06:	2280      	movs	r2, #128	; 0x80
    2f08:	0412      	lsls	r2, r2, #16
    2f0a:	4b02      	ldr	r3, [pc, #8]	; (2f14 <LCD_Write_DATA16+0x10>)
    2f0c:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(VH,VL);
    2f0e:	4b02      	ldr	r3, [pc, #8]	; (2f18 <LCD_Write_DATA16+0x14>)
    2f10:	4798      	blx	r3
}
    2f12:	bd10      	pop	{r4, pc}
    2f14:	41004498 	.word	0x41004498
    2f18:	00002ec5 	.word	0x00002ec5

00002f1c <LCD_Write_DATA8>:

void LCD_Write_DATA8(char VL)
{
    2f1c:	b510      	push	{r4, lr}
    2f1e:	0001      	movs	r1, r0
	REG_PORT_OUTSET1 = LCD_DC;
    2f20:	2280      	movs	r2, #128	; 0x80
    2f22:	0412      	lsls	r2, r2, #16
    2f24:	4b02      	ldr	r3, [pc, #8]	; (2f30 <LCD_Write_DATA8+0x14>)
    2f26:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(0x00, VL);
    2f28:	2000      	movs	r0, #0
    2f2a:	4b02      	ldr	r3, [pc, #8]	; (2f34 <LCD_Write_DATA8+0x18>)
    2f2c:	4798      	blx	r3
}
    2f2e:	bd10      	pop	{r4, pc}
    2f30:	41004498 	.word	0x41004498
    2f34:	00002ec5 	.word	0x00002ec5

00002f38 <InitLCD>:
{
    2f38:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f3a:	46c6      	mov	lr, r8
    2f3c:	b500      	push	{lr}
    2f3e:	b082      	sub	sp, #8
	REG_PORT_DIRSET1 = 0x0000ffff;		//LCD data bus, PB00 - PB15
    2f40:	4b80      	ldr	r3, [pc, #512]	; (3144 <InitLCD+0x20c>)
    2f42:	4f81      	ldr	r7, [pc, #516]	; (3148 <InitLCD+0x210>)
    2f44:	601f      	str	r7, [r3, #0]
	REG_PORT_DIRSET1 = LCD_Reset;
    2f46:	2580      	movs	r5, #128	; 0x80
    2f48:	05ed      	lsls	r5, r5, #23
    2f4a:	601d      	str	r5, [r3, #0]
	REG_PORT_DIRSET1 = LCD_CS;
    2f4c:	2680      	movs	r6, #128	; 0x80
    2f4e:	03f6      	lsls	r6, r6, #15
    2f50:	601e      	str	r6, [r3, #0]
	REG_PORT_DIRSET1 = LCD_WR;
    2f52:	2080      	movs	r0, #128	; 0x80
    2f54:	0280      	lsls	r0, r0, #10
    2f56:	6018      	str	r0, [r3, #0]
	REG_PORT_DIRSET1 = LCD_DC;
    2f58:	2180      	movs	r1, #128	; 0x80
    2f5a:	0409      	lsls	r1, r1, #16
    2f5c:	6019      	str	r1, [r3, #0]
	REG_PORT_DIRSET1 = LCD_RD;
    2f5e:	2280      	movs	r2, #128	; 0x80
    2f60:	0252      	lsls	r2, r2, #9
    2f62:	601a      	str	r2, [r3, #0]
	REG_PORT_OUTCLR1 = 0x0000ffff;
    2f64:	4c79      	ldr	r4, [pc, #484]	; (314c <InitLCD+0x214>)
    2f66:	6027      	str	r7, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_Reset;
    2f68:	6025      	str	r5, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_CS;
    2f6a:	6026      	str	r6, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_WR;
    2f6c:	6020      	str	r0, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_DC;
    2f6e:	6021      	str	r1, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_RD;
    2f70:	6022      	str	r2, [r4, #0]
	REG_PORT_DIRSET1 = PORT_PB16;
    2f72:	601a      	str	r2, [r3, #0]
	REG_PORT_OUTSET1 = PORT_PB16;
    2f74:	4f76      	ldr	r7, [pc, #472]	; (3150 <InitLCD+0x218>)
    2f76:	603a      	str	r2, [r7, #0]
	REG_PORT_OUTSET1 = LCD_Reset;
    2f78:	603d      	str	r5, [r7, #0]
	delay_ms(5);
    2f7a:	2005      	movs	r0, #5
    2f7c:	4b75      	ldr	r3, [pc, #468]	; (3154 <InitLCD+0x21c>)
    2f7e:	4698      	mov	r8, r3
    2f80:	4798      	blx	r3
	REG_PORT_OUTCLR1 = LCD_Reset;
    2f82:	6025      	str	r5, [r4, #0]
	delay_ms(5);
    2f84:	2005      	movs	r0, #5
    2f86:	47c0      	blx	r8
	REG_PORT_OUTSET1 = LCD_Reset;
    2f88:	603d      	str	r5, [r7, #0]
	REG_PORT_OUTCLR1 = LCD_CS;
    2f8a:	6026      	str	r6, [r4, #0]
	for(int i = 0; i < 70; i++)
    2f8c:	2400      	movs	r4, #0
		REG_PORT_OUTCLR1 = LCD_DC;
    2f8e:	4b6f      	ldr	r3, [pc, #444]	; (314c <InitLCD+0x214>)
    2f90:	4698      	mov	r8, r3
    2f92:	2580      	movs	r5, #128	; 0x80
    2f94:	042d      	lsls	r5, r5, #16
    2f96:	002f      	movs	r7, r5
		LCD_Write_COM16(belial[i],mulciber[i]);
    2f98:	4e6f      	ldr	r6, [pc, #444]	; (3158 <InitLCD+0x220>)
		REG_PORT_OUTCLR1 = LCD_DC;
    2f9a:	4643      	mov	r3, r8
    2f9c:	601f      	str	r7, [r3, #0]
		LCD_Write_COM16(belial[i],mulciber[i]);
    2f9e:	5da1      	ldrb	r1, [r4, r6]
    2fa0:	4b6e      	ldr	r3, [pc, #440]	; (315c <InitLCD+0x224>)
    2fa2:	5ce0      	ldrb	r0, [r4, r3]
    2fa4:	4b6e      	ldr	r3, [pc, #440]	; (3160 <InitLCD+0x228>)
    2fa6:	4798      	blx	r3
		REG_PORT_OUTSET1 = LCD_DC;
    2fa8:	4b69      	ldr	r3, [pc, #420]	; (3150 <InitLCD+0x218>)
    2faa:	601d      	str	r5, [r3, #0]
		LCD_Write_DATA8(lucifer[i]);
    2fac:	4b6d      	ldr	r3, [pc, #436]	; (3164 <InitLCD+0x22c>)
    2fae:	5ce0      	ldrb	r0, [r4, r3]
    2fb0:	4b6d      	ldr	r3, [pc, #436]	; (3168 <InitLCD+0x230>)
    2fb2:	4798      	blx	r3
	for(int i = 0; i < 70; i++)
    2fb4:	3401      	adds	r4, #1
    2fb6:	2c46      	cmp	r4, #70	; 0x46
    2fb8:	d1ef      	bne.n	2f9a <InitLCD+0x62>
    2fba:	23d1      	movs	r3, #209	; 0xd1
    2fbc:	9301      	str	r3, [sp, #4]
			LCD_Write_COM16(k,0x00);
    2fbe:	4d68      	ldr	r5, [pc, #416]	; (3160 <InitLCD+0x228>)
			LCD_Write_DATA8(beelzebub[l]);
    2fc0:	4f69      	ldr	r7, [pc, #420]	; (3168 <InitLCD+0x230>)
    2fc2:	4c6a      	ldr	r4, [pc, #424]	; (316c <InitLCD+0x234>)
    2fc4:	0026      	movs	r6, r4
    2fc6:	3634      	adds	r6, #52	; 0x34
			LCD_Write_COM16(k,0x00);
    2fc8:	2100      	movs	r1, #0
    2fca:	9801      	ldr	r0, [sp, #4]
    2fcc:	47a8      	blx	r5
			LCD_Write_DATA8(beelzebub[l]);
    2fce:	7820      	ldrb	r0, [r4, #0]
    2fd0:	47b8      	blx	r7
    2fd2:	3401      	adds	r4, #1
		for(int l = 0; l < 52; l++)
    2fd4:	42a6      	cmp	r6, r4
    2fd6:	d1f7      	bne.n	2fc8 <InitLCD+0x90>
	for(char k = 0xD1; k < 0xD6; k++)
    2fd8:	9b01      	ldr	r3, [sp, #4]
    2fda:	3301      	adds	r3, #1
    2fdc:	b2db      	uxtb	r3, r3
    2fde:	9301      	str	r3, [sp, #4]
    2fe0:	2bd6      	cmp	r3, #214	; 0xd6
    2fe2:	d1ee      	bne.n	2fc2 <InitLCD+0x8a>
	LCD_Write_COM16(0xF0, 0x00);LCD_Write_DATA8(0x55);
    2fe4:	2100      	movs	r1, #0
    2fe6:	20f0      	movs	r0, #240	; 0xf0
    2fe8:	4c5d      	ldr	r4, [pc, #372]	; (3160 <InitLCD+0x228>)
    2fea:	47a0      	blx	r4
    2fec:	2055      	movs	r0, #85	; 0x55
    2fee:	4d5e      	ldr	r5, [pc, #376]	; (3168 <InitLCD+0x230>)
    2ff0:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x01);LCD_Write_DATA8(0xAA);	
    2ff2:	2101      	movs	r1, #1
    2ff4:	20f0      	movs	r0, #240	; 0xf0
    2ff6:	47a0      	blx	r4
    2ff8:	20aa      	movs	r0, #170	; 0xaa
    2ffa:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x02);LCD_Write_DATA8(0x52);	
    2ffc:	2102      	movs	r1, #2
    2ffe:	20f0      	movs	r0, #240	; 0xf0
    3000:	47a0      	blx	r4
    3002:	2052      	movs	r0, #82	; 0x52
    3004:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x03);LCD_Write_DATA8(0x08);	
    3006:	2103      	movs	r1, #3
    3008:	20f0      	movs	r0, #240	; 0xf0
    300a:	47a0      	blx	r4
    300c:	2008      	movs	r0, #8
    300e:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x04);LCD_Write_DATA8(0x00);	
    3010:	2104      	movs	r1, #4
    3012:	20f0      	movs	r0, #240	; 0xf0
    3014:	47a0      	blx	r4
    3016:	2000      	movs	r0, #0
    3018:	47a8      	blx	r5
	LCD_Write_COM16(0xB1, 0x00);LCD_Write_DATA8(0xCC);
    301a:	2100      	movs	r1, #0
    301c:	20b1      	movs	r0, #177	; 0xb1
    301e:	47a0      	blx	r4
    3020:	20cc      	movs	r0, #204	; 0xcc
    3022:	47a8      	blx	r5
	LCD_Write_COM16(0xB1, 0x01);LCD_Write_DATA8(0x00);	
    3024:	2101      	movs	r1, #1
    3026:	20b1      	movs	r0, #177	; 0xb1
    3028:	47a0      	blx	r4
    302a:	2000      	movs	r0, #0
    302c:	47a8      	blx	r5
	LCD_Write_COM16(0xB5, 0x00);LCD_Write_DATA8(0x50);	
    302e:	2100      	movs	r1, #0
    3030:	20b5      	movs	r0, #181	; 0xb5
    3032:	47a0      	blx	r4
    3034:	2050      	movs	r0, #80	; 0x50
    3036:	47a8      	blx	r5
	LCD_Write_COM16(0xB6, 0x00);LCD_Write_DATA8(0x05);
    3038:	2100      	movs	r1, #0
    303a:	20b6      	movs	r0, #182	; 0xb6
    303c:	47a0      	blx	r4
    303e:	2005      	movs	r0, #5
    3040:	47a8      	blx	r5
	LCD_Write_COM16(0xB7, 0x00);LCD_Write_DATA8(0x70);
    3042:	2100      	movs	r1, #0
    3044:	20b7      	movs	r0, #183	; 0xb7
    3046:	47a0      	blx	r4
    3048:	2070      	movs	r0, #112	; 0x70
    304a:	47a8      	blx	r5
	LCD_Write_COM16(0xB7, 0x01);LCD_Write_DATA8(0x70);
    304c:	2101      	movs	r1, #1
    304e:	20b7      	movs	r0, #183	; 0xb7
    3050:	47a0      	blx	r4
    3052:	2070      	movs	r0, #112	; 0x70
    3054:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x00);LCD_Write_DATA8(0x01);
    3056:	2100      	movs	r1, #0
    3058:	20b8      	movs	r0, #184	; 0xb8
    305a:	47a0      	blx	r4
    305c:	2001      	movs	r0, #1
    305e:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x01);LCD_Write_DATA8(0x03);
    3060:	2101      	movs	r1, #1
    3062:	20b8      	movs	r0, #184	; 0xb8
    3064:	47a0      	blx	r4
    3066:	2003      	movs	r0, #3
    3068:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x02);LCD_Write_DATA8(0x03);
    306a:	2102      	movs	r1, #2
    306c:	20b8      	movs	r0, #184	; 0xb8
    306e:	47a0      	blx	r4
    3070:	2003      	movs	r0, #3
    3072:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x03);LCD_Write_DATA8(0x03);	
    3074:	2103      	movs	r1, #3
    3076:	20b8      	movs	r0, #184	; 0xb8
    3078:	47a0      	blx	r4
    307a:	2003      	movs	r0, #3
    307c:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x00);LCD_Write_DATA8(0x02);
    307e:	2100      	movs	r1, #0
    3080:	20bc      	movs	r0, #188	; 0xbc
    3082:	47a0      	blx	r4
    3084:	2002      	movs	r0, #2
    3086:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x01);LCD_Write_DATA8(0x00);
    3088:	2101      	movs	r1, #1
    308a:	20bc      	movs	r0, #188	; 0xbc
    308c:	47a0      	blx	r4
    308e:	2000      	movs	r0, #0
    3090:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x02);LCD_Write_DATA8(0x00);
    3092:	2102      	movs	r1, #2
    3094:	20bc      	movs	r0, #188	; 0xbc
    3096:	47a0      	blx	r4
    3098:	2000      	movs	r0, #0
    309a:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x00);LCD_Write_DATA8(0xD0);
    309c:	2100      	movs	r1, #0
    309e:	20c9      	movs	r0, #201	; 0xc9
    30a0:	47a0      	blx	r4
    30a2:	20d0      	movs	r0, #208	; 0xd0
    30a4:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x01);LCD_Write_DATA8(0x02);
    30a6:	2101      	movs	r1, #1
    30a8:	20c9      	movs	r0, #201	; 0xc9
    30aa:	47a0      	blx	r4
    30ac:	2002      	movs	r0, #2
    30ae:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x02);LCD_Write_DATA8(0x50);
    30b0:	2102      	movs	r1, #2
    30b2:	20c9      	movs	r0, #201	; 0xc9
    30b4:	47a0      	blx	r4
    30b6:	2050      	movs	r0, #80	; 0x50
    30b8:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x03);LCD_Write_DATA8(0x50);
    30ba:	2103      	movs	r1, #3
    30bc:	20c9      	movs	r0, #201	; 0xc9
    30be:	47a0      	blx	r4
    30c0:	2050      	movs	r0, #80	; 0x50
    30c2:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x04);LCD_Write_DATA8(0x50);
    30c4:	2104      	movs	r1, #4
    30c6:	20c9      	movs	r0, #201	; 0xc9
    30c8:	47a0      	blx	r4
    30ca:	2050      	movs	r0, #80	; 0x50
    30cc:	47a8      	blx	r5
	LCD_Write_COM16(0x35, 0x00);LCD_Write_DATA8(0x00);
    30ce:	2100      	movs	r1, #0
    30d0:	2035      	movs	r0, #53	; 0x35
    30d2:	47a0      	blx	r4
    30d4:	2000      	movs	r0, #0
    30d6:	47a8      	blx	r5
	LCD_Write_COM16(0x3A, 0x00);LCD_Write_DATA8(0x55);
    30d8:	2100      	movs	r1, #0
    30da:	203a      	movs	r0, #58	; 0x3a
    30dc:	47a0      	blx	r4
    30de:	2055      	movs	r0, #85	; 0x55
    30e0:	47a8      	blx	r5
	LCD_Write_COM16(0x36, 0x00);LCD_Write_DATA8(0xE2);  //This is the MADCTL register
    30e2:	2100      	movs	r1, #0
    30e4:	2036      	movs	r0, #54	; 0x36
    30e6:	47a0      	blx	r4
    30e8:	20e2      	movs	r0, #226	; 0xe2
    30ea:	47a8      	blx	r5
  	LCD_Write_COM16(0x11,0x00);   //Start Up  
    30ec:	2100      	movs	r1, #0
    30ee:	2011      	movs	r0, #17
    30f0:	47a0      	blx	r4
  	delay_ms(100);
    30f2:	2064      	movs	r0, #100	; 0x64
    30f4:	4e17      	ldr	r6, [pc, #92]	; (3154 <InitLCD+0x21c>)
    30f6:	47b0      	blx	r6
  	LCD_Write_COM16(0x29,0x00);   //Display On  
    30f8:	2100      	movs	r1, #0
    30fa:	2029      	movs	r0, #41	; 0x29
    30fc:	47a0      	blx	r4
   	delay_ms(100);
    30fe:	2064      	movs	r0, #100	; 0x64
    3100:	47b0      	blx	r6
	LCD_Write_COM16(0x51,0x00);LCD_Write_DATA8(0xFF);
    3102:	2100      	movs	r1, #0
    3104:	2051      	movs	r0, #81	; 0x51
    3106:	47a0      	blx	r4
    3108:	20ff      	movs	r0, #255	; 0xff
    310a:	47a8      	blx	r5
	REG_PORT_OUTSET1 = LCD_CS;
    310c:	2280      	movs	r2, #128	; 0x80
    310e:	03d2      	lsls	r2, r2, #15
    3110:	4b0f      	ldr	r3, [pc, #60]	; (3150 <InitLCD+0x218>)
    3112:	601a      	str	r2, [r3, #0]
	clrScr();
    3114:	4b16      	ldr	r3, [pc, #88]	; (3170 <InitLCD+0x238>)
    3116:	4798      	blx	r3
	setColorRGB(0,0,0);
    3118:	2200      	movs	r2, #0
    311a:	2100      	movs	r1, #0
    311c:	2000      	movs	r0, #0
    311e:	4b15      	ldr	r3, [pc, #84]	; (3174 <InitLCD+0x23c>)
    3120:	4798      	blx	r3
	setBackColorRGB(0, 0, 0);
    3122:	2200      	movs	r2, #0
    3124:	2100      	movs	r1, #0
    3126:	2000      	movs	r0, #0
    3128:	4b13      	ldr	r3, [pc, #76]	; (3178 <InitLCD+0x240>)
    312a:	4798      	blx	r3
	fillRect(0,0,799,489);
    312c:	23ea      	movs	r3, #234	; 0xea
    312e:	33ff      	adds	r3, #255	; 0xff
    3130:	4a12      	ldr	r2, [pc, #72]	; (317c <InitLCD+0x244>)
    3132:	2100      	movs	r1, #0
    3134:	2000      	movs	r0, #0
    3136:	4c12      	ldr	r4, [pc, #72]	; (3180 <InitLCD+0x248>)
    3138:	47a0      	blx	r4
}
    313a:	b002      	add	sp, #8
    313c:	bc04      	pop	{r2}
    313e:	4690      	mov	r8, r2
    3140:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3142:	46c0      	nop			; (mov r8, r8)
    3144:	41004488 	.word	0x41004488
    3148:	0000ffff 	.word	0x0000ffff
    314c:	41004494 	.word	0x41004494
    3150:	41004498 	.word	0x41004498
    3154:	000008c1 	.word	0x000008c1
    3158:	00006d90 	.word	0x00006d90
    315c:	00006d00 	.word	0x00006d00
    3160:	00002eed 	.word	0x00002eed
    3164:	00006d48 	.word	0x00006d48
    3168:	00002f1d 	.word	0x00002f1d
    316c:	00006ccc 	.word	0x00006ccc
    3170:	00002e69 	.word	0x00002e69
    3174:	00002c85 	.word	0x00002c85
    3178:	00002cad 	.word	0x00002cad
    317c:	0000031f 	.word	0x0000031f
    3180:	00002dc1 	.word	0x00002dc1

00003184 <usart_read_callback>:
	SysTick_Config(SystemCoreClock/1000);
	system_interrupt_enable(SYSTEM_INTERRUPT_SYSTICK);
}

void usart_read_callback(struct usart_module *const usart_module)
{
    3184:	b510      	push	{r4, lr}
	// Read one character from the UART.
	//We can only use this function because it's non-blocking
	//and we can only read one character because reading > 1 means
	//it doesn't complete until _all_ characters are read.
	
	usart_read_buffer_job(&usart_instance, (uint8_t*)&rx_buf, 1);
    3186:	4c06      	ldr	r4, [pc, #24]	; (31a0 <usart_read_callback+0x1c>)
    3188:	2201      	movs	r2, #1
    318a:	0021      	movs	r1, r4
    318c:	4805      	ldr	r0, [pc, #20]	; (31a4 <usart_read_callback+0x20>)
    318e:	4b06      	ldr	r3, [pc, #24]	; (31a8 <usart_read_callback+0x24>)
    3190:	4798      	blx	r3
	
	//stuff that ONE CHARACTER into the circular FIFO buffer
	ring_put(ouroboros, rx_buf);
    3192:	7821      	ldrb	r1, [r4, #0]
    3194:	4b05      	ldr	r3, [pc, #20]	; (31ac <usart_read_callback+0x28>)
    3196:	6818      	ldr	r0, [r3, #0]
    3198:	4b05      	ldr	r3, [pc, #20]	; (31b0 <usart_read_callback+0x2c>)
    319a:	4798      	blx	r3
}
    319c:	bd10      	pop	{r4, pc}
    319e:	46c0      	nop			; (mov r8, r8)
    31a0:	20000aac 	.word	0x20000aac
    31a4:	200002ec 	.word	0x200002ec
    31a8:	00001761 	.word	0x00001761
    31ac:	200002c0 	.word	0x200002c0
    31b0:	00000141 	.word	0x00000141

000031b4 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    31b4:	b570      	push	{r4, r5, r6, lr}
    31b6:	b082      	sub	sp, #8
    31b8:	0005      	movs	r5, r0
    31ba:	000e      	movs	r6, r1
	uint16_t temp = 0;
    31bc:	2200      	movs	r2, #0
    31be:	466b      	mov	r3, sp
    31c0:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    31c2:	4c06      	ldr	r4, [pc, #24]	; (31dc <usart_serial_getchar+0x28>)
    31c4:	466b      	mov	r3, sp
    31c6:	1d99      	adds	r1, r3, #6
    31c8:	0028      	movs	r0, r5
    31ca:	47a0      	blx	r4
    31cc:	2800      	cmp	r0, #0
    31ce:	d1f9      	bne.n	31c4 <usart_serial_getchar+0x10>

	*c = temp;
    31d0:	466b      	mov	r3, sp
    31d2:	3306      	adds	r3, #6
    31d4:	881b      	ldrh	r3, [r3, #0]
    31d6:	7033      	strb	r3, [r6, #0]
}
    31d8:	b002      	add	sp, #8
    31da:	bd70      	pop	{r4, r5, r6, pc}
    31dc:	0000168f 	.word	0x0000168f

000031e0 <usart_serial_putchar>:
{
    31e0:	b570      	push	{r4, r5, r6, lr}
    31e2:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    31e4:	b28c      	uxth	r4, r1
    31e6:	4e03      	ldr	r6, [pc, #12]	; (31f4 <usart_serial_putchar+0x14>)
    31e8:	0021      	movs	r1, r4
    31ea:	0028      	movs	r0, r5
    31ec:	47b0      	blx	r6
    31ee:	2800      	cmp	r0, #0
    31f0:	d1fa      	bne.n	31e8 <usart_serial_putchar+0x8>
}
    31f2:	bd70      	pop	{r4, r5, r6, pc}
    31f4:	00001669 	.word	0x00001669

000031f8 <SysTick_Handler>:
	ul_tickcount++;
    31f8:	4a02      	ldr	r2, [pc, #8]	; (3204 <SysTick_Handler+0xc>)
    31fa:	8813      	ldrh	r3, [r2, #0]
    31fc:	3301      	adds	r3, #1
    31fe:	8013      	strh	r3, [r2, #0]
}
    3200:	4770      	bx	lr
    3202:	46c0      	nop			; (mov r8, r8)
    3204:	200002ac 	.word	0x200002ac

00003208 <conf_systick>:
{
    3208:	b510      	push	{r4, lr}
	SysTick_Config(SystemCoreClock/1000);
    320a:	4b0e      	ldr	r3, [pc, #56]	; (3244 <conf_systick+0x3c>)
    320c:	6818      	ldr	r0, [r3, #0]
    320e:	21fa      	movs	r1, #250	; 0xfa
    3210:	0089      	lsls	r1, r1, #2
    3212:	4b0d      	ldr	r3, [pc, #52]	; (3248 <conf_systick+0x40>)
    3214:	4798      	blx	r3
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    3216:	3801      	subs	r0, #1
    3218:	4b0c      	ldr	r3, [pc, #48]	; (324c <conf_systick+0x44>)
    321a:	4298      	cmp	r0, r3
    321c:	d80d      	bhi.n	323a <conf_systick+0x32>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    321e:	4a0c      	ldr	r2, [pc, #48]	; (3250 <conf_systick+0x48>)
    3220:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    3222:	480c      	ldr	r0, [pc, #48]	; (3254 <conf_systick+0x4c>)
    3224:	6a03      	ldr	r3, [r0, #32]
    3226:	021b      	lsls	r3, r3, #8
    3228:	0a1b      	lsrs	r3, r3, #8
    322a:	21c0      	movs	r1, #192	; 0xc0
    322c:	0609      	lsls	r1, r1, #24
    322e:	430b      	orrs	r3, r1
    3230:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    3232:	2300      	movs	r3, #0
    3234:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    3236:	3307      	adds	r3, #7
    3238:	6013      	str	r3, [r2, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    323a:	2280      	movs	r2, #128	; 0x80
    323c:	0612      	lsls	r2, r2, #24
    323e:	4b06      	ldr	r3, [pc, #24]	; (3258 <conf_systick+0x50>)
    3240:	601a      	str	r2, [r3, #0]
}
    3242:	bd10      	pop	{r4, pc}
    3244:	2000000c 	.word	0x2000000c
    3248:	000035d1 	.word	0x000035d1
    324c:	00ffffff 	.word	0x00ffffff
    3250:	e000e010 	.word	0xe000e010
    3254:	e000ed00 	.word	0xe000ed00
    3258:	e000e100 	.word	0xe000e100

0000325c <configure_usart>:

/**************************SERCOM STUFF*******************************/


void configure_usart(void)
{
    325c:	b570      	push	{r4, r5, r6, lr}
    325e:	b090      	sub	sp, #64	; 0x40
	config->data_order       = USART_DATAORDER_LSB;
    3260:	2380      	movs	r3, #128	; 0x80
    3262:	05db      	lsls	r3, r3, #23
    3264:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    3266:	2300      	movs	r3, #0
    3268:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    326a:	22ff      	movs	r2, #255	; 0xff
    326c:	4669      	mov	r1, sp
    326e:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    3270:	2200      	movs	r2, #0
    3272:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    3274:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
    3276:	2196      	movs	r1, #150	; 0x96
    3278:	0189      	lsls	r1, r1, #6
    327a:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
    327c:	2101      	movs	r1, #1
    327e:	2024      	movs	r0, #36	; 0x24
    3280:	466c      	mov	r4, sp
    3282:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    3284:	3001      	adds	r0, #1
    3286:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    3288:	3125      	adds	r1, #37	; 0x25
    328a:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    328c:	3101      	adds	r1, #1
    328e:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    3290:	930a      	str	r3, [sp, #40]	; 0x28
	config->run_in_standby   = false;
    3292:	3105      	adds	r1, #5
    3294:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    3296:	3101      	adds	r1, #1
    3298:	5463      	strb	r3, [r4, r1]
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    329a:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    329c:	8223      	strh	r3, [r4, #16]
	config->lin_slave_enable      = false;
    329e:	76e3      	strb	r3, [r4, #27]
	config->immediate_buffer_overflow_notification  = false;
    32a0:	7622      	strb	r2, [r4, #24]
	config->start_frame_detection_enable            = false;
    32a2:	7722      	strb	r2, [r4, #28]
	config->encoding_format_enable                  = false;
    32a4:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    32a6:	2313      	movs	r3, #19
    32a8:	76a3      	strb	r3, [r4, #26]
	config->collision_detection_enable              = false;
    32aa:	7762      	strb	r2, [r4, #29]
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);

	config_usart.baudrate    = 9600;
	config_usart.mux_setting = USART_RX_1_TX_0_XCK_1;
    32ac:	2380      	movs	r3, #128	; 0x80
    32ae:	035b      	lsls	r3, r3, #13
    32b0:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = PINMUX_PA08D_SERCOM2_PAD0;
    32b2:	4b1e      	ldr	r3, [pc, #120]	; (332c <configure_usart+0xd0>)
    32b4:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = PINMUX_PA09D_SERCOM2_PAD1;
    32b6:	4b1e      	ldr	r3, [pc, #120]	; (3330 <configure_usart+0xd4>)
    32b8:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = PINMUX_UNUSED;
    32ba:	2301      	movs	r3, #1
    32bc:	425b      	negs	r3, r3
    32be:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = PINMUX_UNUSED;
    32c0:	930f      	str	r3, [sp, #60]	; 0x3c
	
	
	
	while (usart_init(&usart_instance, SERCOM2, &config_usart) != STATUS_OK) {
    32c2:	4d1c      	ldr	r5, [pc, #112]	; (3334 <configure_usart+0xd8>)
    32c4:	4c1c      	ldr	r4, [pc, #112]	; (3338 <configure_usart+0xdc>)
    32c6:	466a      	mov	r2, sp
    32c8:	491c      	ldr	r1, [pc, #112]	; (333c <configure_usart+0xe0>)
    32ca:	0028      	movs	r0, r5
    32cc:	47a0      	blx	r4
    32ce:	2800      	cmp	r0, #0
    32d0:	d1f9      	bne.n	32c6 <configure_usart+0x6a>
	stdio_base = (void *)module;
    32d2:	4c18      	ldr	r4, [pc, #96]	; (3334 <configure_usart+0xd8>)
    32d4:	4b1a      	ldr	r3, [pc, #104]	; (3340 <configure_usart+0xe4>)
    32d6:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    32d8:	4a1a      	ldr	r2, [pc, #104]	; (3344 <configure_usart+0xe8>)
    32da:	4b1b      	ldr	r3, [pc, #108]	; (3348 <configure_usart+0xec>)
    32dc:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    32de:	4a1b      	ldr	r2, [pc, #108]	; (334c <configure_usart+0xf0>)
    32e0:	4b1b      	ldr	r3, [pc, #108]	; (3350 <configure_usart+0xf4>)
    32e2:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    32e4:	466a      	mov	r2, sp
    32e6:	4915      	ldr	r1, [pc, #84]	; (333c <configure_usart+0xe0>)
    32e8:	0020      	movs	r0, r4
    32ea:	4b13      	ldr	r3, [pc, #76]	; (3338 <configure_usart+0xdc>)
    32ec:	4798      	blx	r3
	setbuf(stdout, NULL);
    32ee:	4e19      	ldr	r6, [pc, #100]	; (3354 <configure_usart+0xf8>)
    32f0:	6833      	ldr	r3, [r6, #0]
    32f2:	6898      	ldr	r0, [r3, #8]
    32f4:	2100      	movs	r1, #0
    32f6:	4d18      	ldr	r5, [pc, #96]	; (3358 <configure_usart+0xfc>)
    32f8:	47a8      	blx	r5
	setbuf(stdin, NULL);
    32fa:	6833      	ldr	r3, [r6, #0]
    32fc:	6858      	ldr	r0, [r3, #4]
    32fe:	2100      	movs	r1, #0
    3300:	47a8      	blx	r5
	SercomUsart *const usart_hw = &(module->hw->USART);
    3302:	6825      	ldr	r5, [r4, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    3304:	0028      	movs	r0, r5
    3306:	4b15      	ldr	r3, [pc, #84]	; (335c <configure_usart+0x100>)
    3308:	4798      	blx	r3
    330a:	231f      	movs	r3, #31
    330c:	4018      	ands	r0, r3
    330e:	3b1e      	subs	r3, #30
    3310:	4083      	lsls	r3, r0
    3312:	4a13      	ldr	r2, [pc, #76]	; (3360 <configure_usart+0x104>)
    3314:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    3316:	6822      	ldr	r2, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
    3318:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    331a:	2b00      	cmp	r3, #0
    331c:	d1fc      	bne.n	3318 <configure_usart+0xbc>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    331e:	682b      	ldr	r3, [r5, #0]
    3320:	2202      	movs	r2, #2
    3322:	4313      	orrs	r3, r2
    3324:	602b      	str	r3, [r5, #0]
	}
	stdio_serial_init(&usart_instance, SERCOM2, &config_usart);
	usart_enable(&usart_instance);
}
    3326:	b010      	add	sp, #64	; 0x40
    3328:	bd70      	pop	{r4, r5, r6, pc}
    332a:	46c0      	nop			; (mov r8, r8)
    332c:	00080003 	.word	0x00080003
    3330:	00090003 	.word	0x00090003
    3334:	200002ec 	.word	0x200002ec
    3338:	0000132d 	.word	0x0000132d
    333c:	42001000 	.word	0x42001000
    3340:	200002e8 	.word	0x200002e8
    3344:	000031e1 	.word	0x000031e1
    3348:	200002e4 	.word	0x200002e4
    334c:	000031b5 	.word	0x000031b5
    3350:	200002e0 	.word	0x200002e0
    3354:	20000164 	.word	0x20000164
    3358:	00003c35 	.word	0x00003c35
    335c:	0000129d 	.word	0x0000129d
    3360:	e000e100 	.word	0xe000e100

00003364 <configure_usart_callbacks>:

void configure_usart_callbacks(void)
{
    3364:	b510      	push	{r4, lr}
	usart_register_callback(&usart_instance,usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
    3366:	4c06      	ldr	r4, [pc, #24]	; (3380 <configure_usart_callbacks+0x1c>)
    3368:	2201      	movs	r2, #1
    336a:	4906      	ldr	r1, [pc, #24]	; (3384 <configure_usart_callbacks+0x20>)
    336c:	0020      	movs	r0, r4
    336e:	4b06      	ldr	r3, [pc, #24]	; (3388 <configure_usart_callbacks+0x24>)
    3370:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    3372:	2231      	movs	r2, #49	; 0x31
    3374:	5ca3      	ldrb	r3, [r4, r2]
    3376:	2102      	movs	r1, #2
    3378:	430b      	orrs	r3, r1
    337a:	54a3      	strb	r3, [r4, r2]
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
}
    337c:	bd10      	pop	{r4, pc}
    337e:	46c0      	nop			; (mov r8, r8)
    3380:	200002ec 	.word	0x200002ec
    3384:	00003185 	.word	0x00003185
    3388:	00001749 	.word	0x00001749

0000338c <configure_adc>:
	usart_enable(&usart_USB);
}
*/

void configure_adc(void)
{
    338c:	b510      	push	{r4, lr}
    338e:	b08c      	sub	sp, #48	; 0x30
	struct adc_config config_adc;
	adc_get_config_defaults(&config_adc);
    3390:	4668      	mov	r0, sp
    3392:	4b16      	ldr	r3, [pc, #88]	; (33ec <configure_adc+0x60>)
    3394:	4798      	blx	r3
	config_adc.clock_source = GCLK_GENERATOR_1;
    3396:	2301      	movs	r3, #1
    3398:	466a      	mov	r2, sp
    339a:	7013      	strb	r3, [r2, #0]
	config_adc.clock_prescaler = ADC_CLOCK_PRESCALER_DIV16;
    339c:	2380      	movs	r3, #128	; 0x80
    339e:	009b      	lsls	r3, r3, #2
    33a0:	8053      	strh	r3, [r2, #2]
	config_adc.reference = ADC_REFERENCE_INT1V;
    33a2:	2300      	movs	r3, #0
    33a4:	7053      	strb	r3, [r2, #1]
	config_adc.positive_input = ADC_POSITIVE_INPUT_TEMP;
    33a6:	3318      	adds	r3, #24
    33a8:	7313      	strb	r3, [r2, #12]
	config_adc.negative_input = ADC_NEGATIVE_INPUT_GND;
    33aa:	23c0      	movs	r3, #192	; 0xc0
    33ac:	015b      	lsls	r3, r3, #5
    33ae:	81d3      	strh	r3, [r2, #14]
	adc_init(&adc_instance, ADC, &config_adc);
    33b0:	4c0f      	ldr	r4, [pc, #60]	; (33f0 <configure_adc+0x64>)
    33b2:	4910      	ldr	r1, [pc, #64]	; (33f4 <configure_adc+0x68>)
    33b4:	0020      	movs	r0, r4
    33b6:	4b10      	ldr	r3, [pc, #64]	; (33f8 <configure_adc+0x6c>)
    33b8:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    33ba:	6822      	ldr	r2, [r4, #0]
    33bc:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    33be:	b25b      	sxtb	r3, r3
    33c0:	2b00      	cmp	r3, #0
    33c2:	dbfb      	blt.n	33bc <configure_adc+0x30>
    33c4:	2180      	movs	r1, #128	; 0x80
    33c6:	0409      	lsls	r1, r1, #16
    33c8:	4b0c      	ldr	r3, [pc, #48]	; (33fc <configure_adc+0x70>)
    33ca:	6019      	str	r1, [r3, #0]
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    33cc:	230f      	movs	r3, #15
    33ce:	7593      	strb	r3, [r2, #22]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    33d0:	7613      	strb	r3, [r2, #24]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    33d2:	7813      	ldrb	r3, [r2, #0]
    33d4:	2102      	movs	r1, #2
    33d6:	430b      	orrs	r3, r1
    33d8:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
    33da:	4b05      	ldr	r3, [pc, #20]	; (33f0 <configure_adc+0x64>)
    33dc:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    33de:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    33e0:	b25b      	sxtb	r3, r3
    33e2:	2b00      	cmp	r3, #0
    33e4:	dbfb      	blt.n	33de <configure_adc+0x52>
	adc_enable(&adc_instance);
}
    33e6:	b00c      	add	sp, #48	; 0x30
    33e8:	bd10      	pop	{r4, pc}
    33ea:	46c0      	nop			; (mov r8, r8)
    33ec:	00000995 	.word	0x00000995
    33f0:	20000ab0 	.word	0x20000ab0
    33f4:	42004000 	.word	0x42004000
    33f8:	000009d9 	.word	0x000009d9
    33fc:	e000e100 	.word	0xe000e100

00003400 <setupBoard>:


void setupBoard(void)
{
    3400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t adcResult;
	uint16_t megaHurtz = (uint16_t)system_gclk_gen_get_hz(0);
    3402:	2000      	movs	r0, #0
    3404:	4b31      	ldr	r3, [pc, #196]	; (34cc <setupBoard+0xcc>)
    3406:	4798      	blx	r3
    3408:	b287      	uxth	r7, r0
	

	system_init();
    340a:	4b31      	ldr	r3, [pc, #196]	; (34d0 <setupBoard+0xd0>)
    340c:	4798      	blx	r3
	
	configure_adc();
    340e:	4b31      	ldr	r3, [pc, #196]	; (34d4 <setupBoard+0xd4>)
    3410:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    3412:	4b31      	ldr	r3, [pc, #196]	; (34d8 <setupBoard+0xd8>)
    3414:	6819      	ldr	r1, [r3, #0]
    3416:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    3418:	b25b      	sxtb	r3, r3
    341a:	2b00      	cmp	r3, #0
    341c:	dbfb      	blt.n	3416 <setupBoard+0x16>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    341e:	7b0b      	ldrb	r3, [r1, #12]
    3420:	2202      	movs	r2, #2
    3422:	4313      	orrs	r3, r2
    3424:	730b      	strb	r3, [r1, #12]
    3426:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    3428:	b25b      	sxtb	r3, r3
    342a:	2b00      	cmp	r3, #0
    342c:	dbfb      	blt.n	3426 <setupBoard+0x26>
	if (int_flags & ADC_INTFLAG_RESRDY) {
    342e:	2401      	movs	r4, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
    3430:	2604      	movs	r6, #4
		status_flags |= ADC_STATUS_WINDOW;
    3432:	2502      	movs	r5, #2
    3434:	e001      	b.n	343a <setupBoard+0x3a>
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    3436:	4214      	tst	r4, r2
    3438:	d10a      	bne.n	3450 <setupBoard+0x50>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    343a:	7e0b      	ldrb	r3, [r1, #24]
    343c:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
    343e:	0022      	movs	r2, r4
    3440:	401a      	ands	r2, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
    3442:	421e      	tst	r6, r3
    3444:	d000      	beq.n	3448 <setupBoard+0x48>
		status_flags |= ADC_STATUS_WINDOW;
    3446:	432a      	orrs	r2, r5
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    3448:	421d      	tst	r5, r3
    344a:	d0f4      	beq.n	3436 <setupBoard+0x36>
		status_flags |= ADC_STATUS_OVERRUN;
    344c:	4332      	orrs	r2, r6
    344e:	e7f2      	b.n	3436 <setupBoard+0x36>
    3450:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    3452:	b25b      	sxtb	r3, r3
    3454:	2b00      	cmp	r3, #0
    3456:	dbfb      	blt.n	3450 <setupBoard+0x50>
	*result = adc_module->RESULT.reg;
    3458:	8b48      	ldrh	r0, [r1, #26]
    345a:	b280      	uxth	r0, r0
	adc_module->INTFLAG.reg = int_flags;
    345c:	2301      	movs	r3, #1
    345e:	760b      	strb	r3, [r1, #24]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    3460:	7e0a      	ldrb	r2, [r1, #24]
    3462:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    3464:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    3466:	0754      	lsls	r4, r2, #29
    3468:	d501      	bpl.n	346e <setupBoard+0x6e>
		status_flags |= ADC_STATUS_WINDOW;
    346a:	2402      	movs	r4, #2
    346c:	4323      	orrs	r3, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    346e:	0792      	lsls	r2, r2, #30
    3470:	d501      	bpl.n	3476 <setupBoard+0x76>
		status_flags |= ADC_STATUS_OVERRUN;
    3472:	2204      	movs	r2, #4
    3474:	4313      	orrs	r3, r2
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    3476:	075b      	lsls	r3, r3, #29
    3478:	d501      	bpl.n	347e <setupBoard+0x7e>
	adc_module->INTFLAG.reg = int_flags;
    347a:	2302      	movs	r3, #2
    347c:	760b      	strb	r3, [r1, #24]
	do {
	/* Wait for conversion to be done and read out result */
	} while (adc_read(&adc_instance, &adcResult) == STATUS_BUSY);
	
	
	srand((adcResult ^ megaHurtz));
    347e:	4078      	eors	r0, r7
    3480:	4b16      	ldr	r3, [pc, #88]	; (34dc <setupBoard+0xdc>)
    3482:	4798      	blx	r3
	
	delay_init();
    3484:	4b16      	ldr	r3, [pc, #88]	; (34e0 <setupBoard+0xe0>)
    3486:	4798      	blx	r3
	
	conf_systick();
    3488:	4c16      	ldr	r4, [pc, #88]	; (34e4 <setupBoard+0xe4>)
    348a:	47a0      	blx	r4

	//configure_usart_USB();
	
	configure_usart();
    348c:	4b16      	ldr	r3, [pc, #88]	; (34e8 <setupBoard+0xe8>)
    348e:	4798      	blx	r3
	configure_usart_callbacks();
    3490:	4b16      	ldr	r3, [pc, #88]	; (34ec <setupBoard+0xec>)
    3492:	4798      	blx	r3
	cpu_irq_enable();
    3494:	2201      	movs	r2, #1
    3496:	4b16      	ldr	r3, [pc, #88]	; (34f0 <setupBoard+0xf0>)
    3498:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    349a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    349e:	b662      	cpsie	i
	system_interrupt_enable_global();
	
	//I have no idea why I need to call this; it's in the callback and it
	//doesn't work without this line here. Remove this at your own peril.
	usart_read_buffer_job(&usart_instance, (uint8_t*)&rx_buf, 1);
    34a0:	4914      	ldr	r1, [pc, #80]	; (34f4 <setupBoard+0xf4>)
    34a2:	4815      	ldr	r0, [pc, #84]	; (34f8 <setupBoard+0xf8>)
    34a4:	4b15      	ldr	r3, [pc, #84]	; (34fc <setupBoard+0xfc>)
    34a6:	4798      	blx	r3

	printf("\n\rSerial OK 9600 8N1\n\r");
    34a8:	4815      	ldr	r0, [pc, #84]	; (3500 <setupBoard+0x100>)
    34aa:	4b16      	ldr	r3, [pc, #88]	; (3504 <setupBoard+0x104>)
    34ac:	4798      	blx	r3

	
	InitLCD();
    34ae:	4b16      	ldr	r3, [pc, #88]	; (3508 <setupBoard+0x108>)
    34b0:	4798      	blx	r3
	splashScreen();
    34b2:	4b16      	ldr	r3, [pc, #88]	; (350c <setupBoard+0x10c>)
    34b4:	4798      	blx	r3
			
	conf_systick();
    34b6:	47a0      	blx	r4

	xCharPos=0;
    34b8:	2300      	movs	r3, #0
    34ba:	4a15      	ldr	r2, [pc, #84]	; (3510 <setupBoard+0x110>)
    34bc:	8013      	strh	r3, [r2, #0]
	yCharPos=0;
    34be:	4a15      	ldr	r2, [pc, #84]	; (3514 <setupBoard+0x114>)
    34c0:	8013      	strh	r3, [r2, #0]
	drawChar(0xFF);
    34c2:	20ff      	movs	r0, #255	; 0xff
    34c4:	4b14      	ldr	r3, [pc, #80]	; (3518 <setupBoard+0x118>)
    34c6:	4798      	blx	r3
}
    34c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    34ca:	46c0      	nop			; (mov r8, r8)
    34cc:	00001e41 	.word	0x00001e41
    34d0:	00002085 	.word	0x00002085
    34d4:	0000338d 	.word	0x0000338d
    34d8:	20000ab0 	.word	0x20000ab0
    34dc:	00003b3d 	.word	0x00003b3d
    34e0:	00000881 	.word	0x00000881
    34e4:	00003209 	.word	0x00003209
    34e8:	0000325d 	.word	0x0000325d
    34ec:	00003365 	.word	0x00003365
    34f0:	20000008 	.word	0x20000008
    34f4:	20000aac 	.word	0x20000aac
    34f8:	200002ec 	.word	0x200002ec
    34fc:	00001761 	.word	0x00001761
    3500:	00006dd8 	.word	0x00006dd8
    3504:	00003ae1 	.word	0x00003ae1
    3508:	00002f39 	.word	0x00002f39
    350c:	00000649 	.word	0x00000649
    3510:	200002a4 	.word	0x200002a4
    3514:	200002a6 	.word	0x200002a6
    3518:	00002269 	.word	0x00002269

0000351c <main>:
{
    351c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	setupBoard();
    351e:	4b20      	ldr	r3, [pc, #128]	; (35a0 <main+0x84>)
    3520:	4798      	blx	r3
	uint8_t * buffer  = malloc(UART_BUFFER_SIZE * sizeof(uint8_t));
    3522:	200a      	movs	r0, #10
    3524:	4b1f      	ldr	r3, [pc, #124]	; (35a4 <main+0x88>)
    3526:	4798      	blx	r3
	ouroboros = ring_init(buffer, UART_BUFFER_SIZE);
    3528:	210a      	movs	r1, #10
    352a:	4b1f      	ldr	r3, [pc, #124]	; (35a8 <main+0x8c>)
    352c:	4798      	blx	r3
    352e:	4b1f      	ldr	r3, [pc, #124]	; (35ac <main+0x90>)
    3530:	6018      	str	r0, [r3, #0]
		if((ul_tickcount % (UINT16_MAX/4) == 0) && (funcLock == false))
    3532:	4f1f      	ldr	r7, [pc, #124]	; (35b0 <main+0x94>)
    3534:	4e1f      	ldr	r6, [pc, #124]	; (35b4 <main+0x98>)
    3536:	4d20      	ldr	r5, [pc, #128]	; (35b8 <main+0x9c>)
    3538:	e015      	b.n	3566 <main+0x4a>
		if((ul_tickcount % 200 == 0) && (funcLock == false))
    353a:	21c8      	movs	r1, #200	; 0xc8
    353c:	0020      	movs	r0, r4
    353e:	4b1d      	ldr	r3, [pc, #116]	; (35b4 <main+0x98>)
    3540:	4798      	blx	r3
    3542:	b289      	uxth	r1, r1
    3544:	2900      	cmp	r1, #0
    3546:	d10e      	bne.n	3566 <main+0x4a>
    3548:	4b1c      	ldr	r3, [pc, #112]	; (35bc <main+0xa0>)
    354a:	781b      	ldrb	r3, [r3, #0]
    354c:	2b00      	cmp	r3, #0
    354e:	d10a      	bne.n	3566 <main+0x4a>
			funcLock = true;
    3550:	4c1a      	ldr	r4, [pc, #104]	; (35bc <main+0xa0>)
    3552:	2301      	movs	r3, #1
    3554:	7023      	strb	r3, [r4, #0]
			readKeyboard();
    3556:	4b1a      	ldr	r3, [pc, #104]	; (35c0 <main+0xa4>)
    3558:	4798      	blx	r3
			printKeyboardBuffer();
    355a:	4b1a      	ldr	r3, [pc, #104]	; (35c4 <main+0xa8>)
    355c:	4798      	blx	r3
			parseRXBuffer();
    355e:	4b1a      	ldr	r3, [pc, #104]	; (35c8 <main+0xac>)
    3560:	4798      	blx	r3
			funcLock = false;
    3562:	2300      	movs	r3, #0
    3564:	7023      	strb	r3, [r4, #0]
		__WFI();
    3566:	bf30      	wfi
		if((ul_tickcount % (UINT16_MAX/4) == 0) && (funcLock == false))
    3568:	883c      	ldrh	r4, [r7, #0]
    356a:	0029      	movs	r1, r5
    356c:	0020      	movs	r0, r4
    356e:	47b0      	blx	r6
    3570:	b289      	uxth	r1, r1
    3572:	2900      	cmp	r1, #0
    3574:	d1e1      	bne.n	353a <main+0x1e>
    3576:	4b11      	ldr	r3, [pc, #68]	; (35bc <main+0xa0>)
    3578:	781b      	ldrb	r3, [r3, #0]
    357a:	2b00      	cmp	r3, #0
    357c:	d1f3      	bne.n	3566 <main+0x4a>
			funcLock = true;
    357e:	4c0f      	ldr	r4, [pc, #60]	; (35bc <main+0xa0>)
    3580:	3301      	adds	r3, #1
    3582:	7023      	strb	r3, [r4, #0]
			blinkCursor();
    3584:	4b11      	ldr	r3, [pc, #68]	; (35cc <main+0xb0>)
    3586:	4798      	blx	r3
			funcLock = false;
    3588:	2300      	movs	r3, #0
    358a:	7023      	strb	r3, [r4, #0]
		if((ul_tickcount % 200 == 0) && (funcLock == false))
    358c:	4b08      	ldr	r3, [pc, #32]	; (35b0 <main+0x94>)
    358e:	8818      	ldrh	r0, [r3, #0]
    3590:	21c8      	movs	r1, #200	; 0xc8
    3592:	4b08      	ldr	r3, [pc, #32]	; (35b4 <main+0x98>)
    3594:	4798      	blx	r3
    3596:	b289      	uxth	r1, r1
    3598:	2900      	cmp	r1, #0
    359a:	d0d9      	beq.n	3550 <main+0x34>
    359c:	e7e3      	b.n	3566 <main+0x4a>
    359e:	46c0      	nop			; (mov r8, r8)
    35a0:	00003401 	.word	0x00003401
    35a4:	00003959 	.word	0x00003959
    35a8:	00000115 	.word	0x00000115
    35ac:	200002c0 	.word	0x200002c0
    35b0:	200002ac 	.word	0x200002ac
    35b4:	000036dd 	.word	0x000036dd
    35b8:	00003fff 	.word	0x00003fff
    35bc:	200002aa 	.word	0x200002aa
    35c0:	00002a85 	.word	0x00002a85
    35c4:	00002741 	.word	0x00002741
    35c8:	0000082d 	.word	0x0000082d
    35cc:	00002351 	.word	0x00002351

000035d0 <__udivsi3>:
    35d0:	2200      	movs	r2, #0
    35d2:	0843      	lsrs	r3, r0, #1
    35d4:	428b      	cmp	r3, r1
    35d6:	d374      	bcc.n	36c2 <__udivsi3+0xf2>
    35d8:	0903      	lsrs	r3, r0, #4
    35da:	428b      	cmp	r3, r1
    35dc:	d35f      	bcc.n	369e <__udivsi3+0xce>
    35de:	0a03      	lsrs	r3, r0, #8
    35e0:	428b      	cmp	r3, r1
    35e2:	d344      	bcc.n	366e <__udivsi3+0x9e>
    35e4:	0b03      	lsrs	r3, r0, #12
    35e6:	428b      	cmp	r3, r1
    35e8:	d328      	bcc.n	363c <__udivsi3+0x6c>
    35ea:	0c03      	lsrs	r3, r0, #16
    35ec:	428b      	cmp	r3, r1
    35ee:	d30d      	bcc.n	360c <__udivsi3+0x3c>
    35f0:	22ff      	movs	r2, #255	; 0xff
    35f2:	0209      	lsls	r1, r1, #8
    35f4:	ba12      	rev	r2, r2
    35f6:	0c03      	lsrs	r3, r0, #16
    35f8:	428b      	cmp	r3, r1
    35fa:	d302      	bcc.n	3602 <__udivsi3+0x32>
    35fc:	1212      	asrs	r2, r2, #8
    35fe:	0209      	lsls	r1, r1, #8
    3600:	d065      	beq.n	36ce <__udivsi3+0xfe>
    3602:	0b03      	lsrs	r3, r0, #12
    3604:	428b      	cmp	r3, r1
    3606:	d319      	bcc.n	363c <__udivsi3+0x6c>
    3608:	e000      	b.n	360c <__udivsi3+0x3c>
    360a:	0a09      	lsrs	r1, r1, #8
    360c:	0bc3      	lsrs	r3, r0, #15
    360e:	428b      	cmp	r3, r1
    3610:	d301      	bcc.n	3616 <__udivsi3+0x46>
    3612:	03cb      	lsls	r3, r1, #15
    3614:	1ac0      	subs	r0, r0, r3
    3616:	4152      	adcs	r2, r2
    3618:	0b83      	lsrs	r3, r0, #14
    361a:	428b      	cmp	r3, r1
    361c:	d301      	bcc.n	3622 <__udivsi3+0x52>
    361e:	038b      	lsls	r3, r1, #14
    3620:	1ac0      	subs	r0, r0, r3
    3622:	4152      	adcs	r2, r2
    3624:	0b43      	lsrs	r3, r0, #13
    3626:	428b      	cmp	r3, r1
    3628:	d301      	bcc.n	362e <__udivsi3+0x5e>
    362a:	034b      	lsls	r3, r1, #13
    362c:	1ac0      	subs	r0, r0, r3
    362e:	4152      	adcs	r2, r2
    3630:	0b03      	lsrs	r3, r0, #12
    3632:	428b      	cmp	r3, r1
    3634:	d301      	bcc.n	363a <__udivsi3+0x6a>
    3636:	030b      	lsls	r3, r1, #12
    3638:	1ac0      	subs	r0, r0, r3
    363a:	4152      	adcs	r2, r2
    363c:	0ac3      	lsrs	r3, r0, #11
    363e:	428b      	cmp	r3, r1
    3640:	d301      	bcc.n	3646 <__udivsi3+0x76>
    3642:	02cb      	lsls	r3, r1, #11
    3644:	1ac0      	subs	r0, r0, r3
    3646:	4152      	adcs	r2, r2
    3648:	0a83      	lsrs	r3, r0, #10
    364a:	428b      	cmp	r3, r1
    364c:	d301      	bcc.n	3652 <__udivsi3+0x82>
    364e:	028b      	lsls	r3, r1, #10
    3650:	1ac0      	subs	r0, r0, r3
    3652:	4152      	adcs	r2, r2
    3654:	0a43      	lsrs	r3, r0, #9
    3656:	428b      	cmp	r3, r1
    3658:	d301      	bcc.n	365e <__udivsi3+0x8e>
    365a:	024b      	lsls	r3, r1, #9
    365c:	1ac0      	subs	r0, r0, r3
    365e:	4152      	adcs	r2, r2
    3660:	0a03      	lsrs	r3, r0, #8
    3662:	428b      	cmp	r3, r1
    3664:	d301      	bcc.n	366a <__udivsi3+0x9a>
    3666:	020b      	lsls	r3, r1, #8
    3668:	1ac0      	subs	r0, r0, r3
    366a:	4152      	adcs	r2, r2
    366c:	d2cd      	bcs.n	360a <__udivsi3+0x3a>
    366e:	09c3      	lsrs	r3, r0, #7
    3670:	428b      	cmp	r3, r1
    3672:	d301      	bcc.n	3678 <__udivsi3+0xa8>
    3674:	01cb      	lsls	r3, r1, #7
    3676:	1ac0      	subs	r0, r0, r3
    3678:	4152      	adcs	r2, r2
    367a:	0983      	lsrs	r3, r0, #6
    367c:	428b      	cmp	r3, r1
    367e:	d301      	bcc.n	3684 <__udivsi3+0xb4>
    3680:	018b      	lsls	r3, r1, #6
    3682:	1ac0      	subs	r0, r0, r3
    3684:	4152      	adcs	r2, r2
    3686:	0943      	lsrs	r3, r0, #5
    3688:	428b      	cmp	r3, r1
    368a:	d301      	bcc.n	3690 <__udivsi3+0xc0>
    368c:	014b      	lsls	r3, r1, #5
    368e:	1ac0      	subs	r0, r0, r3
    3690:	4152      	adcs	r2, r2
    3692:	0903      	lsrs	r3, r0, #4
    3694:	428b      	cmp	r3, r1
    3696:	d301      	bcc.n	369c <__udivsi3+0xcc>
    3698:	010b      	lsls	r3, r1, #4
    369a:	1ac0      	subs	r0, r0, r3
    369c:	4152      	adcs	r2, r2
    369e:	08c3      	lsrs	r3, r0, #3
    36a0:	428b      	cmp	r3, r1
    36a2:	d301      	bcc.n	36a8 <__udivsi3+0xd8>
    36a4:	00cb      	lsls	r3, r1, #3
    36a6:	1ac0      	subs	r0, r0, r3
    36a8:	4152      	adcs	r2, r2
    36aa:	0883      	lsrs	r3, r0, #2
    36ac:	428b      	cmp	r3, r1
    36ae:	d301      	bcc.n	36b4 <__udivsi3+0xe4>
    36b0:	008b      	lsls	r3, r1, #2
    36b2:	1ac0      	subs	r0, r0, r3
    36b4:	4152      	adcs	r2, r2
    36b6:	0843      	lsrs	r3, r0, #1
    36b8:	428b      	cmp	r3, r1
    36ba:	d301      	bcc.n	36c0 <__udivsi3+0xf0>
    36bc:	004b      	lsls	r3, r1, #1
    36be:	1ac0      	subs	r0, r0, r3
    36c0:	4152      	adcs	r2, r2
    36c2:	1a41      	subs	r1, r0, r1
    36c4:	d200      	bcs.n	36c8 <__udivsi3+0xf8>
    36c6:	4601      	mov	r1, r0
    36c8:	4152      	adcs	r2, r2
    36ca:	4610      	mov	r0, r2
    36cc:	4770      	bx	lr
    36ce:	e7ff      	b.n	36d0 <__udivsi3+0x100>
    36d0:	b501      	push	{r0, lr}
    36d2:	2000      	movs	r0, #0
    36d4:	f000 f8f0 	bl	38b8 <__aeabi_idiv0>
    36d8:	bd02      	pop	{r1, pc}
    36da:	46c0      	nop			; (mov r8, r8)

000036dc <__aeabi_uidivmod>:
    36dc:	2900      	cmp	r1, #0
    36de:	d0f7      	beq.n	36d0 <__udivsi3+0x100>
    36e0:	e776      	b.n	35d0 <__udivsi3>
    36e2:	4770      	bx	lr

000036e4 <__divsi3>:
    36e4:	4603      	mov	r3, r0
    36e6:	430b      	orrs	r3, r1
    36e8:	d47f      	bmi.n	37ea <__divsi3+0x106>
    36ea:	2200      	movs	r2, #0
    36ec:	0843      	lsrs	r3, r0, #1
    36ee:	428b      	cmp	r3, r1
    36f0:	d374      	bcc.n	37dc <__divsi3+0xf8>
    36f2:	0903      	lsrs	r3, r0, #4
    36f4:	428b      	cmp	r3, r1
    36f6:	d35f      	bcc.n	37b8 <__divsi3+0xd4>
    36f8:	0a03      	lsrs	r3, r0, #8
    36fa:	428b      	cmp	r3, r1
    36fc:	d344      	bcc.n	3788 <__divsi3+0xa4>
    36fe:	0b03      	lsrs	r3, r0, #12
    3700:	428b      	cmp	r3, r1
    3702:	d328      	bcc.n	3756 <__divsi3+0x72>
    3704:	0c03      	lsrs	r3, r0, #16
    3706:	428b      	cmp	r3, r1
    3708:	d30d      	bcc.n	3726 <__divsi3+0x42>
    370a:	22ff      	movs	r2, #255	; 0xff
    370c:	0209      	lsls	r1, r1, #8
    370e:	ba12      	rev	r2, r2
    3710:	0c03      	lsrs	r3, r0, #16
    3712:	428b      	cmp	r3, r1
    3714:	d302      	bcc.n	371c <__divsi3+0x38>
    3716:	1212      	asrs	r2, r2, #8
    3718:	0209      	lsls	r1, r1, #8
    371a:	d065      	beq.n	37e8 <__divsi3+0x104>
    371c:	0b03      	lsrs	r3, r0, #12
    371e:	428b      	cmp	r3, r1
    3720:	d319      	bcc.n	3756 <__divsi3+0x72>
    3722:	e000      	b.n	3726 <__divsi3+0x42>
    3724:	0a09      	lsrs	r1, r1, #8
    3726:	0bc3      	lsrs	r3, r0, #15
    3728:	428b      	cmp	r3, r1
    372a:	d301      	bcc.n	3730 <__divsi3+0x4c>
    372c:	03cb      	lsls	r3, r1, #15
    372e:	1ac0      	subs	r0, r0, r3
    3730:	4152      	adcs	r2, r2
    3732:	0b83      	lsrs	r3, r0, #14
    3734:	428b      	cmp	r3, r1
    3736:	d301      	bcc.n	373c <__divsi3+0x58>
    3738:	038b      	lsls	r3, r1, #14
    373a:	1ac0      	subs	r0, r0, r3
    373c:	4152      	adcs	r2, r2
    373e:	0b43      	lsrs	r3, r0, #13
    3740:	428b      	cmp	r3, r1
    3742:	d301      	bcc.n	3748 <__divsi3+0x64>
    3744:	034b      	lsls	r3, r1, #13
    3746:	1ac0      	subs	r0, r0, r3
    3748:	4152      	adcs	r2, r2
    374a:	0b03      	lsrs	r3, r0, #12
    374c:	428b      	cmp	r3, r1
    374e:	d301      	bcc.n	3754 <__divsi3+0x70>
    3750:	030b      	lsls	r3, r1, #12
    3752:	1ac0      	subs	r0, r0, r3
    3754:	4152      	adcs	r2, r2
    3756:	0ac3      	lsrs	r3, r0, #11
    3758:	428b      	cmp	r3, r1
    375a:	d301      	bcc.n	3760 <__divsi3+0x7c>
    375c:	02cb      	lsls	r3, r1, #11
    375e:	1ac0      	subs	r0, r0, r3
    3760:	4152      	adcs	r2, r2
    3762:	0a83      	lsrs	r3, r0, #10
    3764:	428b      	cmp	r3, r1
    3766:	d301      	bcc.n	376c <__divsi3+0x88>
    3768:	028b      	lsls	r3, r1, #10
    376a:	1ac0      	subs	r0, r0, r3
    376c:	4152      	adcs	r2, r2
    376e:	0a43      	lsrs	r3, r0, #9
    3770:	428b      	cmp	r3, r1
    3772:	d301      	bcc.n	3778 <__divsi3+0x94>
    3774:	024b      	lsls	r3, r1, #9
    3776:	1ac0      	subs	r0, r0, r3
    3778:	4152      	adcs	r2, r2
    377a:	0a03      	lsrs	r3, r0, #8
    377c:	428b      	cmp	r3, r1
    377e:	d301      	bcc.n	3784 <__divsi3+0xa0>
    3780:	020b      	lsls	r3, r1, #8
    3782:	1ac0      	subs	r0, r0, r3
    3784:	4152      	adcs	r2, r2
    3786:	d2cd      	bcs.n	3724 <__divsi3+0x40>
    3788:	09c3      	lsrs	r3, r0, #7
    378a:	428b      	cmp	r3, r1
    378c:	d301      	bcc.n	3792 <__divsi3+0xae>
    378e:	01cb      	lsls	r3, r1, #7
    3790:	1ac0      	subs	r0, r0, r3
    3792:	4152      	adcs	r2, r2
    3794:	0983      	lsrs	r3, r0, #6
    3796:	428b      	cmp	r3, r1
    3798:	d301      	bcc.n	379e <__divsi3+0xba>
    379a:	018b      	lsls	r3, r1, #6
    379c:	1ac0      	subs	r0, r0, r3
    379e:	4152      	adcs	r2, r2
    37a0:	0943      	lsrs	r3, r0, #5
    37a2:	428b      	cmp	r3, r1
    37a4:	d301      	bcc.n	37aa <__divsi3+0xc6>
    37a6:	014b      	lsls	r3, r1, #5
    37a8:	1ac0      	subs	r0, r0, r3
    37aa:	4152      	adcs	r2, r2
    37ac:	0903      	lsrs	r3, r0, #4
    37ae:	428b      	cmp	r3, r1
    37b0:	d301      	bcc.n	37b6 <__divsi3+0xd2>
    37b2:	010b      	lsls	r3, r1, #4
    37b4:	1ac0      	subs	r0, r0, r3
    37b6:	4152      	adcs	r2, r2
    37b8:	08c3      	lsrs	r3, r0, #3
    37ba:	428b      	cmp	r3, r1
    37bc:	d301      	bcc.n	37c2 <__divsi3+0xde>
    37be:	00cb      	lsls	r3, r1, #3
    37c0:	1ac0      	subs	r0, r0, r3
    37c2:	4152      	adcs	r2, r2
    37c4:	0883      	lsrs	r3, r0, #2
    37c6:	428b      	cmp	r3, r1
    37c8:	d301      	bcc.n	37ce <__divsi3+0xea>
    37ca:	008b      	lsls	r3, r1, #2
    37cc:	1ac0      	subs	r0, r0, r3
    37ce:	4152      	adcs	r2, r2
    37d0:	0843      	lsrs	r3, r0, #1
    37d2:	428b      	cmp	r3, r1
    37d4:	d301      	bcc.n	37da <__divsi3+0xf6>
    37d6:	004b      	lsls	r3, r1, #1
    37d8:	1ac0      	subs	r0, r0, r3
    37da:	4152      	adcs	r2, r2
    37dc:	1a41      	subs	r1, r0, r1
    37de:	d200      	bcs.n	37e2 <__divsi3+0xfe>
    37e0:	4601      	mov	r1, r0
    37e2:	4152      	adcs	r2, r2
    37e4:	4610      	mov	r0, r2
    37e6:	4770      	bx	lr
    37e8:	e05d      	b.n	38a6 <__divsi3+0x1c2>
    37ea:	0fca      	lsrs	r2, r1, #31
    37ec:	d000      	beq.n	37f0 <__divsi3+0x10c>
    37ee:	4249      	negs	r1, r1
    37f0:	1003      	asrs	r3, r0, #32
    37f2:	d300      	bcc.n	37f6 <__divsi3+0x112>
    37f4:	4240      	negs	r0, r0
    37f6:	4053      	eors	r3, r2
    37f8:	2200      	movs	r2, #0
    37fa:	469c      	mov	ip, r3
    37fc:	0903      	lsrs	r3, r0, #4
    37fe:	428b      	cmp	r3, r1
    3800:	d32d      	bcc.n	385e <__divsi3+0x17a>
    3802:	0a03      	lsrs	r3, r0, #8
    3804:	428b      	cmp	r3, r1
    3806:	d312      	bcc.n	382e <__divsi3+0x14a>
    3808:	22fc      	movs	r2, #252	; 0xfc
    380a:	0189      	lsls	r1, r1, #6
    380c:	ba12      	rev	r2, r2
    380e:	0a03      	lsrs	r3, r0, #8
    3810:	428b      	cmp	r3, r1
    3812:	d30c      	bcc.n	382e <__divsi3+0x14a>
    3814:	0189      	lsls	r1, r1, #6
    3816:	1192      	asrs	r2, r2, #6
    3818:	428b      	cmp	r3, r1
    381a:	d308      	bcc.n	382e <__divsi3+0x14a>
    381c:	0189      	lsls	r1, r1, #6
    381e:	1192      	asrs	r2, r2, #6
    3820:	428b      	cmp	r3, r1
    3822:	d304      	bcc.n	382e <__divsi3+0x14a>
    3824:	0189      	lsls	r1, r1, #6
    3826:	d03a      	beq.n	389e <__divsi3+0x1ba>
    3828:	1192      	asrs	r2, r2, #6
    382a:	e000      	b.n	382e <__divsi3+0x14a>
    382c:	0989      	lsrs	r1, r1, #6
    382e:	09c3      	lsrs	r3, r0, #7
    3830:	428b      	cmp	r3, r1
    3832:	d301      	bcc.n	3838 <__divsi3+0x154>
    3834:	01cb      	lsls	r3, r1, #7
    3836:	1ac0      	subs	r0, r0, r3
    3838:	4152      	adcs	r2, r2
    383a:	0983      	lsrs	r3, r0, #6
    383c:	428b      	cmp	r3, r1
    383e:	d301      	bcc.n	3844 <__divsi3+0x160>
    3840:	018b      	lsls	r3, r1, #6
    3842:	1ac0      	subs	r0, r0, r3
    3844:	4152      	adcs	r2, r2
    3846:	0943      	lsrs	r3, r0, #5
    3848:	428b      	cmp	r3, r1
    384a:	d301      	bcc.n	3850 <__divsi3+0x16c>
    384c:	014b      	lsls	r3, r1, #5
    384e:	1ac0      	subs	r0, r0, r3
    3850:	4152      	adcs	r2, r2
    3852:	0903      	lsrs	r3, r0, #4
    3854:	428b      	cmp	r3, r1
    3856:	d301      	bcc.n	385c <__divsi3+0x178>
    3858:	010b      	lsls	r3, r1, #4
    385a:	1ac0      	subs	r0, r0, r3
    385c:	4152      	adcs	r2, r2
    385e:	08c3      	lsrs	r3, r0, #3
    3860:	428b      	cmp	r3, r1
    3862:	d301      	bcc.n	3868 <__divsi3+0x184>
    3864:	00cb      	lsls	r3, r1, #3
    3866:	1ac0      	subs	r0, r0, r3
    3868:	4152      	adcs	r2, r2
    386a:	0883      	lsrs	r3, r0, #2
    386c:	428b      	cmp	r3, r1
    386e:	d301      	bcc.n	3874 <__divsi3+0x190>
    3870:	008b      	lsls	r3, r1, #2
    3872:	1ac0      	subs	r0, r0, r3
    3874:	4152      	adcs	r2, r2
    3876:	d2d9      	bcs.n	382c <__divsi3+0x148>
    3878:	0843      	lsrs	r3, r0, #1
    387a:	428b      	cmp	r3, r1
    387c:	d301      	bcc.n	3882 <__divsi3+0x19e>
    387e:	004b      	lsls	r3, r1, #1
    3880:	1ac0      	subs	r0, r0, r3
    3882:	4152      	adcs	r2, r2
    3884:	1a41      	subs	r1, r0, r1
    3886:	d200      	bcs.n	388a <__divsi3+0x1a6>
    3888:	4601      	mov	r1, r0
    388a:	4663      	mov	r3, ip
    388c:	4152      	adcs	r2, r2
    388e:	105b      	asrs	r3, r3, #1
    3890:	4610      	mov	r0, r2
    3892:	d301      	bcc.n	3898 <__divsi3+0x1b4>
    3894:	4240      	negs	r0, r0
    3896:	2b00      	cmp	r3, #0
    3898:	d500      	bpl.n	389c <__divsi3+0x1b8>
    389a:	4249      	negs	r1, r1
    389c:	4770      	bx	lr
    389e:	4663      	mov	r3, ip
    38a0:	105b      	asrs	r3, r3, #1
    38a2:	d300      	bcc.n	38a6 <__divsi3+0x1c2>
    38a4:	4240      	negs	r0, r0
    38a6:	b501      	push	{r0, lr}
    38a8:	2000      	movs	r0, #0
    38aa:	f000 f805 	bl	38b8 <__aeabi_idiv0>
    38ae:	bd02      	pop	{r1, pc}

000038b0 <__aeabi_idivmod>:
    38b0:	2900      	cmp	r1, #0
    38b2:	d0f8      	beq.n	38a6 <__divsi3+0x1c2>
    38b4:	e716      	b.n	36e4 <__divsi3>
    38b6:	4770      	bx	lr

000038b8 <__aeabi_idiv0>:
    38b8:	4770      	bx	lr
    38ba:	46c0      	nop			; (mov r8, r8)

000038bc <__aeabi_lmul>:
    38bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    38be:	46ce      	mov	lr, r9
    38c0:	4647      	mov	r7, r8
    38c2:	0415      	lsls	r5, r2, #16
    38c4:	0c2d      	lsrs	r5, r5, #16
    38c6:	002e      	movs	r6, r5
    38c8:	b580      	push	{r7, lr}
    38ca:	0407      	lsls	r7, r0, #16
    38cc:	0c14      	lsrs	r4, r2, #16
    38ce:	0c3f      	lsrs	r7, r7, #16
    38d0:	4699      	mov	r9, r3
    38d2:	0c03      	lsrs	r3, r0, #16
    38d4:	437e      	muls	r6, r7
    38d6:	435d      	muls	r5, r3
    38d8:	4367      	muls	r7, r4
    38da:	4363      	muls	r3, r4
    38dc:	197f      	adds	r7, r7, r5
    38de:	0c34      	lsrs	r4, r6, #16
    38e0:	19e4      	adds	r4, r4, r7
    38e2:	469c      	mov	ip, r3
    38e4:	42a5      	cmp	r5, r4
    38e6:	d903      	bls.n	38f0 <__aeabi_lmul+0x34>
    38e8:	2380      	movs	r3, #128	; 0x80
    38ea:	025b      	lsls	r3, r3, #9
    38ec:	4698      	mov	r8, r3
    38ee:	44c4      	add	ip, r8
    38f0:	464b      	mov	r3, r9
    38f2:	4351      	muls	r1, r2
    38f4:	4343      	muls	r3, r0
    38f6:	0436      	lsls	r6, r6, #16
    38f8:	0c36      	lsrs	r6, r6, #16
    38fa:	0c25      	lsrs	r5, r4, #16
    38fc:	0424      	lsls	r4, r4, #16
    38fe:	4465      	add	r5, ip
    3900:	19a4      	adds	r4, r4, r6
    3902:	1859      	adds	r1, r3, r1
    3904:	1949      	adds	r1, r1, r5
    3906:	0020      	movs	r0, r4
    3908:	bc0c      	pop	{r2, r3}
    390a:	4690      	mov	r8, r2
    390c:	4699      	mov	r9, r3
    390e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003910 <__libc_init_array>:
    3910:	b570      	push	{r4, r5, r6, lr}
    3912:	2600      	movs	r6, #0
    3914:	4d0c      	ldr	r5, [pc, #48]	; (3948 <__libc_init_array+0x38>)
    3916:	4c0d      	ldr	r4, [pc, #52]	; (394c <__libc_init_array+0x3c>)
    3918:	1b64      	subs	r4, r4, r5
    391a:	10a4      	asrs	r4, r4, #2
    391c:	42a6      	cmp	r6, r4
    391e:	d109      	bne.n	3934 <__libc_init_array+0x24>
    3920:	2600      	movs	r6, #0
    3922:	f003 fab1 	bl	6e88 <_init>
    3926:	4d0a      	ldr	r5, [pc, #40]	; (3950 <__libc_init_array+0x40>)
    3928:	4c0a      	ldr	r4, [pc, #40]	; (3954 <__libc_init_array+0x44>)
    392a:	1b64      	subs	r4, r4, r5
    392c:	10a4      	asrs	r4, r4, #2
    392e:	42a6      	cmp	r6, r4
    3930:	d105      	bne.n	393e <__libc_init_array+0x2e>
    3932:	bd70      	pop	{r4, r5, r6, pc}
    3934:	00b3      	lsls	r3, r6, #2
    3936:	58eb      	ldr	r3, [r5, r3]
    3938:	4798      	blx	r3
    393a:	3601      	adds	r6, #1
    393c:	e7ee      	b.n	391c <__libc_init_array+0xc>
    393e:	00b3      	lsls	r3, r6, #2
    3940:	58eb      	ldr	r3, [r5, r3]
    3942:	4798      	blx	r3
    3944:	3601      	adds	r6, #1
    3946:	e7f2      	b.n	392e <__libc_init_array+0x1e>
    3948:	00006e94 	.word	0x00006e94
    394c:	00006e94 	.word	0x00006e94
    3950:	00006e94 	.word	0x00006e94
    3954:	00006e98 	.word	0x00006e98

00003958 <malloc>:
    3958:	b510      	push	{r4, lr}
    395a:	4b03      	ldr	r3, [pc, #12]	; (3968 <malloc+0x10>)
    395c:	0001      	movs	r1, r0
    395e:	6818      	ldr	r0, [r3, #0]
    3960:	f000 f860 	bl	3a24 <_malloc_r>
    3964:	bd10      	pop	{r4, pc}
    3966:	46c0      	nop			; (mov r8, r8)
    3968:	20000164 	.word	0x20000164

0000396c <memcpy>:
    396c:	2300      	movs	r3, #0
    396e:	b510      	push	{r4, lr}
    3970:	429a      	cmp	r2, r3
    3972:	d100      	bne.n	3976 <memcpy+0xa>
    3974:	bd10      	pop	{r4, pc}
    3976:	5ccc      	ldrb	r4, [r1, r3]
    3978:	54c4      	strb	r4, [r0, r3]
    397a:	3301      	adds	r3, #1
    397c:	e7f8      	b.n	3970 <memcpy+0x4>

0000397e <memset>:
    397e:	0003      	movs	r3, r0
    3980:	1882      	adds	r2, r0, r2
    3982:	4293      	cmp	r3, r2
    3984:	d100      	bne.n	3988 <memset+0xa>
    3986:	4770      	bx	lr
    3988:	7019      	strb	r1, [r3, #0]
    398a:	3301      	adds	r3, #1
    398c:	e7f9      	b.n	3982 <memset+0x4>
	...

00003990 <_free_r>:
    3990:	b570      	push	{r4, r5, r6, lr}
    3992:	0005      	movs	r5, r0
    3994:	2900      	cmp	r1, #0
    3996:	d010      	beq.n	39ba <_free_r+0x2a>
    3998:	1f0c      	subs	r4, r1, #4
    399a:	6823      	ldr	r3, [r4, #0]
    399c:	2b00      	cmp	r3, #0
    399e:	da00      	bge.n	39a2 <_free_r+0x12>
    39a0:	18e4      	adds	r4, r4, r3
    39a2:	0028      	movs	r0, r5
    39a4:	f000 fbfe 	bl	41a4 <__malloc_lock>
    39a8:	4a1d      	ldr	r2, [pc, #116]	; (3a20 <_free_r+0x90>)
    39aa:	6813      	ldr	r3, [r2, #0]
    39ac:	2b00      	cmp	r3, #0
    39ae:	d105      	bne.n	39bc <_free_r+0x2c>
    39b0:	6063      	str	r3, [r4, #4]
    39b2:	6014      	str	r4, [r2, #0]
    39b4:	0028      	movs	r0, r5
    39b6:	f000 fbf6 	bl	41a6 <__malloc_unlock>
    39ba:	bd70      	pop	{r4, r5, r6, pc}
    39bc:	42a3      	cmp	r3, r4
    39be:	d909      	bls.n	39d4 <_free_r+0x44>
    39c0:	6821      	ldr	r1, [r4, #0]
    39c2:	1860      	adds	r0, r4, r1
    39c4:	4283      	cmp	r3, r0
    39c6:	d1f3      	bne.n	39b0 <_free_r+0x20>
    39c8:	6818      	ldr	r0, [r3, #0]
    39ca:	685b      	ldr	r3, [r3, #4]
    39cc:	1841      	adds	r1, r0, r1
    39ce:	6021      	str	r1, [r4, #0]
    39d0:	e7ee      	b.n	39b0 <_free_r+0x20>
    39d2:	0013      	movs	r3, r2
    39d4:	685a      	ldr	r2, [r3, #4]
    39d6:	2a00      	cmp	r2, #0
    39d8:	d001      	beq.n	39de <_free_r+0x4e>
    39da:	42a2      	cmp	r2, r4
    39dc:	d9f9      	bls.n	39d2 <_free_r+0x42>
    39de:	6819      	ldr	r1, [r3, #0]
    39e0:	1858      	adds	r0, r3, r1
    39e2:	42a0      	cmp	r0, r4
    39e4:	d10b      	bne.n	39fe <_free_r+0x6e>
    39e6:	6820      	ldr	r0, [r4, #0]
    39e8:	1809      	adds	r1, r1, r0
    39ea:	1858      	adds	r0, r3, r1
    39ec:	6019      	str	r1, [r3, #0]
    39ee:	4282      	cmp	r2, r0
    39f0:	d1e0      	bne.n	39b4 <_free_r+0x24>
    39f2:	6810      	ldr	r0, [r2, #0]
    39f4:	6852      	ldr	r2, [r2, #4]
    39f6:	1841      	adds	r1, r0, r1
    39f8:	6019      	str	r1, [r3, #0]
    39fa:	605a      	str	r2, [r3, #4]
    39fc:	e7da      	b.n	39b4 <_free_r+0x24>
    39fe:	42a0      	cmp	r0, r4
    3a00:	d902      	bls.n	3a08 <_free_r+0x78>
    3a02:	230c      	movs	r3, #12
    3a04:	602b      	str	r3, [r5, #0]
    3a06:	e7d5      	b.n	39b4 <_free_r+0x24>
    3a08:	6821      	ldr	r1, [r4, #0]
    3a0a:	1860      	adds	r0, r4, r1
    3a0c:	4282      	cmp	r2, r0
    3a0e:	d103      	bne.n	3a18 <_free_r+0x88>
    3a10:	6810      	ldr	r0, [r2, #0]
    3a12:	6852      	ldr	r2, [r2, #4]
    3a14:	1841      	adds	r1, r0, r1
    3a16:	6021      	str	r1, [r4, #0]
    3a18:	6062      	str	r2, [r4, #4]
    3a1a:	605c      	str	r4, [r3, #4]
    3a1c:	e7ca      	b.n	39b4 <_free_r+0x24>
    3a1e:	46c0      	nop			; (mov r8, r8)
    3a20:	200002b0 	.word	0x200002b0

00003a24 <_malloc_r>:
    3a24:	2303      	movs	r3, #3
    3a26:	b570      	push	{r4, r5, r6, lr}
    3a28:	1ccd      	adds	r5, r1, #3
    3a2a:	439d      	bics	r5, r3
    3a2c:	3508      	adds	r5, #8
    3a2e:	0006      	movs	r6, r0
    3a30:	2d0c      	cmp	r5, #12
    3a32:	d21e      	bcs.n	3a72 <_malloc_r+0x4e>
    3a34:	250c      	movs	r5, #12
    3a36:	42a9      	cmp	r1, r5
    3a38:	d81d      	bhi.n	3a76 <_malloc_r+0x52>
    3a3a:	0030      	movs	r0, r6
    3a3c:	f000 fbb2 	bl	41a4 <__malloc_lock>
    3a40:	4a25      	ldr	r2, [pc, #148]	; (3ad8 <_malloc_r+0xb4>)
    3a42:	6814      	ldr	r4, [r2, #0]
    3a44:	0021      	movs	r1, r4
    3a46:	2900      	cmp	r1, #0
    3a48:	d119      	bne.n	3a7e <_malloc_r+0x5a>
    3a4a:	4c24      	ldr	r4, [pc, #144]	; (3adc <_malloc_r+0xb8>)
    3a4c:	6823      	ldr	r3, [r4, #0]
    3a4e:	2b00      	cmp	r3, #0
    3a50:	d103      	bne.n	3a5a <_malloc_r+0x36>
    3a52:	0030      	movs	r0, r6
    3a54:	f000 f8dc 	bl	3c10 <_sbrk_r>
    3a58:	6020      	str	r0, [r4, #0]
    3a5a:	0029      	movs	r1, r5
    3a5c:	0030      	movs	r0, r6
    3a5e:	f000 f8d7 	bl	3c10 <_sbrk_r>
    3a62:	1c43      	adds	r3, r0, #1
    3a64:	d12c      	bne.n	3ac0 <_malloc_r+0x9c>
    3a66:	230c      	movs	r3, #12
    3a68:	0030      	movs	r0, r6
    3a6a:	6033      	str	r3, [r6, #0]
    3a6c:	f000 fb9b 	bl	41a6 <__malloc_unlock>
    3a70:	e003      	b.n	3a7a <_malloc_r+0x56>
    3a72:	2d00      	cmp	r5, #0
    3a74:	dadf      	bge.n	3a36 <_malloc_r+0x12>
    3a76:	230c      	movs	r3, #12
    3a78:	6033      	str	r3, [r6, #0]
    3a7a:	2000      	movs	r0, #0
    3a7c:	bd70      	pop	{r4, r5, r6, pc}
    3a7e:	680b      	ldr	r3, [r1, #0]
    3a80:	1b5b      	subs	r3, r3, r5
    3a82:	d41a      	bmi.n	3aba <_malloc_r+0x96>
    3a84:	2b0b      	cmp	r3, #11
    3a86:	d903      	bls.n	3a90 <_malloc_r+0x6c>
    3a88:	600b      	str	r3, [r1, #0]
    3a8a:	18cc      	adds	r4, r1, r3
    3a8c:	6025      	str	r5, [r4, #0]
    3a8e:	e003      	b.n	3a98 <_malloc_r+0x74>
    3a90:	428c      	cmp	r4, r1
    3a92:	d10e      	bne.n	3ab2 <_malloc_r+0x8e>
    3a94:	6863      	ldr	r3, [r4, #4]
    3a96:	6013      	str	r3, [r2, #0]
    3a98:	0030      	movs	r0, r6
    3a9a:	f000 fb84 	bl	41a6 <__malloc_unlock>
    3a9e:	0020      	movs	r0, r4
    3aa0:	2207      	movs	r2, #7
    3aa2:	300b      	adds	r0, #11
    3aa4:	1d23      	adds	r3, r4, #4
    3aa6:	4390      	bics	r0, r2
    3aa8:	1ac3      	subs	r3, r0, r3
    3aaa:	d0e7      	beq.n	3a7c <_malloc_r+0x58>
    3aac:	425a      	negs	r2, r3
    3aae:	50e2      	str	r2, [r4, r3]
    3ab0:	e7e4      	b.n	3a7c <_malloc_r+0x58>
    3ab2:	684b      	ldr	r3, [r1, #4]
    3ab4:	6063      	str	r3, [r4, #4]
    3ab6:	000c      	movs	r4, r1
    3ab8:	e7ee      	b.n	3a98 <_malloc_r+0x74>
    3aba:	000c      	movs	r4, r1
    3abc:	6849      	ldr	r1, [r1, #4]
    3abe:	e7c2      	b.n	3a46 <_malloc_r+0x22>
    3ac0:	2303      	movs	r3, #3
    3ac2:	1cc4      	adds	r4, r0, #3
    3ac4:	439c      	bics	r4, r3
    3ac6:	42a0      	cmp	r0, r4
    3ac8:	d0e0      	beq.n	3a8c <_malloc_r+0x68>
    3aca:	1a21      	subs	r1, r4, r0
    3acc:	0030      	movs	r0, r6
    3ace:	f000 f89f 	bl	3c10 <_sbrk_r>
    3ad2:	1c43      	adds	r3, r0, #1
    3ad4:	d1da      	bne.n	3a8c <_malloc_r+0x68>
    3ad6:	e7c6      	b.n	3a66 <_malloc_r+0x42>
    3ad8:	200002b0 	.word	0x200002b0
    3adc:	200002b4 	.word	0x200002b4

00003ae0 <iprintf>:
    3ae0:	b40f      	push	{r0, r1, r2, r3}
    3ae2:	4b0b      	ldr	r3, [pc, #44]	; (3b10 <iprintf+0x30>)
    3ae4:	b513      	push	{r0, r1, r4, lr}
    3ae6:	681c      	ldr	r4, [r3, #0]
    3ae8:	2c00      	cmp	r4, #0
    3aea:	d005      	beq.n	3af8 <iprintf+0x18>
    3aec:	69a3      	ldr	r3, [r4, #24]
    3aee:	2b00      	cmp	r3, #0
    3af0:	d102      	bne.n	3af8 <iprintf+0x18>
    3af2:	0020      	movs	r0, r4
    3af4:	f000 fa54 	bl	3fa0 <__sinit>
    3af8:	ab05      	add	r3, sp, #20
    3afa:	9a04      	ldr	r2, [sp, #16]
    3afc:	68a1      	ldr	r1, [r4, #8]
    3afe:	0020      	movs	r0, r4
    3b00:	9301      	str	r3, [sp, #4]
    3b02:	f000 fb79 	bl	41f8 <_vfiprintf_r>
    3b06:	bc16      	pop	{r1, r2, r4}
    3b08:	bc08      	pop	{r3}
    3b0a:	b004      	add	sp, #16
    3b0c:	4718      	bx	r3
    3b0e:	46c0      	nop			; (mov r8, r8)
    3b10:	20000164 	.word	0x20000164

00003b14 <putchar>:
    3b14:	4b08      	ldr	r3, [pc, #32]	; (3b38 <putchar+0x24>)
    3b16:	b570      	push	{r4, r5, r6, lr}
    3b18:	681c      	ldr	r4, [r3, #0]
    3b1a:	0005      	movs	r5, r0
    3b1c:	2c00      	cmp	r4, #0
    3b1e:	d005      	beq.n	3b2c <putchar+0x18>
    3b20:	69a3      	ldr	r3, [r4, #24]
    3b22:	2b00      	cmp	r3, #0
    3b24:	d102      	bne.n	3b2c <putchar+0x18>
    3b26:	0020      	movs	r0, r4
    3b28:	f000 fa3a 	bl	3fa0 <__sinit>
    3b2c:	0029      	movs	r1, r5
    3b2e:	68a2      	ldr	r2, [r4, #8]
    3b30:	0020      	movs	r0, r4
    3b32:	f000 fe05 	bl	4740 <_putc_r>
    3b36:	bd70      	pop	{r4, r5, r6, pc}
    3b38:	20000164 	.word	0x20000164

00003b3c <srand>:
    3b3c:	4b10      	ldr	r3, [pc, #64]	; (3b80 <srand+0x44>)
    3b3e:	b570      	push	{r4, r5, r6, lr}
    3b40:	681c      	ldr	r4, [r3, #0]
    3b42:	0005      	movs	r5, r0
    3b44:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    3b46:	2b00      	cmp	r3, #0
    3b48:	d115      	bne.n	3b76 <srand+0x3a>
    3b4a:	2018      	movs	r0, #24
    3b4c:	f7ff ff04 	bl	3958 <malloc>
    3b50:	4b0c      	ldr	r3, [pc, #48]	; (3b84 <srand+0x48>)
    3b52:	63a0      	str	r0, [r4, #56]	; 0x38
    3b54:	8003      	strh	r3, [r0, #0]
    3b56:	4b0c      	ldr	r3, [pc, #48]	; (3b88 <srand+0x4c>)
    3b58:	2201      	movs	r2, #1
    3b5a:	8043      	strh	r3, [r0, #2]
    3b5c:	4b0b      	ldr	r3, [pc, #44]	; (3b8c <srand+0x50>)
    3b5e:	8083      	strh	r3, [r0, #4]
    3b60:	4b0b      	ldr	r3, [pc, #44]	; (3b90 <srand+0x54>)
    3b62:	80c3      	strh	r3, [r0, #6]
    3b64:	4b0b      	ldr	r3, [pc, #44]	; (3b94 <srand+0x58>)
    3b66:	8103      	strh	r3, [r0, #8]
    3b68:	2305      	movs	r3, #5
    3b6a:	8143      	strh	r3, [r0, #10]
    3b6c:	3306      	adds	r3, #6
    3b6e:	8183      	strh	r3, [r0, #12]
    3b70:	2300      	movs	r3, #0
    3b72:	6102      	str	r2, [r0, #16]
    3b74:	6143      	str	r3, [r0, #20]
    3b76:	2200      	movs	r2, #0
    3b78:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    3b7a:	611d      	str	r5, [r3, #16]
    3b7c:	615a      	str	r2, [r3, #20]
    3b7e:	bd70      	pop	{r4, r5, r6, pc}
    3b80:	20000164 	.word	0x20000164
    3b84:	0000330e 	.word	0x0000330e
    3b88:	ffffabcd 	.word	0xffffabcd
    3b8c:	00001234 	.word	0x00001234
    3b90:	ffffe66d 	.word	0xffffe66d
    3b94:	ffffdeec 	.word	0xffffdeec

00003b98 <rand>:
    3b98:	4b15      	ldr	r3, [pc, #84]	; (3bf0 <rand+0x58>)
    3b9a:	b510      	push	{r4, lr}
    3b9c:	681c      	ldr	r4, [r3, #0]
    3b9e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    3ba0:	2b00      	cmp	r3, #0
    3ba2:	d115      	bne.n	3bd0 <rand+0x38>
    3ba4:	2018      	movs	r0, #24
    3ba6:	f7ff fed7 	bl	3958 <malloc>
    3baa:	4b12      	ldr	r3, [pc, #72]	; (3bf4 <rand+0x5c>)
    3bac:	63a0      	str	r0, [r4, #56]	; 0x38
    3bae:	8003      	strh	r3, [r0, #0]
    3bb0:	4b11      	ldr	r3, [pc, #68]	; (3bf8 <rand+0x60>)
    3bb2:	2201      	movs	r2, #1
    3bb4:	8043      	strh	r3, [r0, #2]
    3bb6:	4b11      	ldr	r3, [pc, #68]	; (3bfc <rand+0x64>)
    3bb8:	8083      	strh	r3, [r0, #4]
    3bba:	4b11      	ldr	r3, [pc, #68]	; (3c00 <rand+0x68>)
    3bbc:	80c3      	strh	r3, [r0, #6]
    3bbe:	4b11      	ldr	r3, [pc, #68]	; (3c04 <rand+0x6c>)
    3bc0:	8103      	strh	r3, [r0, #8]
    3bc2:	2305      	movs	r3, #5
    3bc4:	8143      	strh	r3, [r0, #10]
    3bc6:	3306      	adds	r3, #6
    3bc8:	8183      	strh	r3, [r0, #12]
    3bca:	2300      	movs	r3, #0
    3bcc:	6102      	str	r2, [r0, #16]
    3bce:	6143      	str	r3, [r0, #20]
    3bd0:	6ba4      	ldr	r4, [r4, #56]	; 0x38
    3bd2:	4a0d      	ldr	r2, [pc, #52]	; (3c08 <rand+0x70>)
    3bd4:	6920      	ldr	r0, [r4, #16]
    3bd6:	6961      	ldr	r1, [r4, #20]
    3bd8:	4b0c      	ldr	r3, [pc, #48]	; (3c0c <rand+0x74>)
    3bda:	f7ff fe6f 	bl	38bc <__aeabi_lmul>
    3bde:	2201      	movs	r2, #1
    3be0:	2300      	movs	r3, #0
    3be2:	1880      	adds	r0, r0, r2
    3be4:	4159      	adcs	r1, r3
    3be6:	6120      	str	r0, [r4, #16]
    3be8:	6161      	str	r1, [r4, #20]
    3bea:	0048      	lsls	r0, r1, #1
    3bec:	0840      	lsrs	r0, r0, #1
    3bee:	bd10      	pop	{r4, pc}
    3bf0:	20000164 	.word	0x20000164
    3bf4:	0000330e 	.word	0x0000330e
    3bf8:	ffffabcd 	.word	0xffffabcd
    3bfc:	00001234 	.word	0x00001234
    3c00:	ffffe66d 	.word	0xffffe66d
    3c04:	ffffdeec 	.word	0xffffdeec
    3c08:	4c957f2d 	.word	0x4c957f2d
    3c0c:	5851f42d 	.word	0x5851f42d

00003c10 <_sbrk_r>:
    3c10:	2300      	movs	r3, #0
    3c12:	b570      	push	{r4, r5, r6, lr}
    3c14:	4c06      	ldr	r4, [pc, #24]	; (3c30 <_sbrk_r+0x20>)
    3c16:	0005      	movs	r5, r0
    3c18:	0008      	movs	r0, r1
    3c1a:	6023      	str	r3, [r4, #0]
    3c1c:	f7fe fb06 	bl	222c <_sbrk>
    3c20:	1c43      	adds	r3, r0, #1
    3c22:	d103      	bne.n	3c2c <_sbrk_r+0x1c>
    3c24:	6823      	ldr	r3, [r4, #0]
    3c26:	2b00      	cmp	r3, #0
    3c28:	d000      	beq.n	3c2c <_sbrk_r+0x1c>
    3c2a:	602b      	str	r3, [r5, #0]
    3c2c:	bd70      	pop	{r4, r5, r6, pc}
    3c2e:	46c0      	nop			; (mov r8, r8)
    3c30:	20000ad0 	.word	0x20000ad0

00003c34 <setbuf>:
    3c34:	424a      	negs	r2, r1
    3c36:	414a      	adcs	r2, r1
    3c38:	2380      	movs	r3, #128	; 0x80
    3c3a:	b510      	push	{r4, lr}
    3c3c:	0052      	lsls	r2, r2, #1
    3c3e:	00db      	lsls	r3, r3, #3
    3c40:	f000 f802 	bl	3c48 <setvbuf>
    3c44:	bd10      	pop	{r4, pc}
	...

00003c48 <setvbuf>:
    3c48:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c4a:	001d      	movs	r5, r3
    3c4c:	4b4f      	ldr	r3, [pc, #316]	; (3d8c <setvbuf+0x144>)
    3c4e:	b085      	sub	sp, #20
    3c50:	681e      	ldr	r6, [r3, #0]
    3c52:	0004      	movs	r4, r0
    3c54:	000f      	movs	r7, r1
    3c56:	9200      	str	r2, [sp, #0]
    3c58:	2e00      	cmp	r6, #0
    3c5a:	d005      	beq.n	3c68 <setvbuf+0x20>
    3c5c:	69b3      	ldr	r3, [r6, #24]
    3c5e:	2b00      	cmp	r3, #0
    3c60:	d102      	bne.n	3c68 <setvbuf+0x20>
    3c62:	0030      	movs	r0, r6
    3c64:	f000 f99c 	bl	3fa0 <__sinit>
    3c68:	4b49      	ldr	r3, [pc, #292]	; (3d90 <setvbuf+0x148>)
    3c6a:	429c      	cmp	r4, r3
    3c6c:	d150      	bne.n	3d10 <setvbuf+0xc8>
    3c6e:	6874      	ldr	r4, [r6, #4]
    3c70:	9b00      	ldr	r3, [sp, #0]
    3c72:	2b02      	cmp	r3, #2
    3c74:	d005      	beq.n	3c82 <setvbuf+0x3a>
    3c76:	2b01      	cmp	r3, #1
    3c78:	d900      	bls.n	3c7c <setvbuf+0x34>
    3c7a:	e084      	b.n	3d86 <setvbuf+0x13e>
    3c7c:	2d00      	cmp	r5, #0
    3c7e:	da00      	bge.n	3c82 <setvbuf+0x3a>
    3c80:	e081      	b.n	3d86 <setvbuf+0x13e>
    3c82:	0021      	movs	r1, r4
    3c84:	0030      	movs	r0, r6
    3c86:	f000 f91d 	bl	3ec4 <_fflush_r>
    3c8a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3c8c:	2900      	cmp	r1, #0
    3c8e:	d008      	beq.n	3ca2 <setvbuf+0x5a>
    3c90:	0023      	movs	r3, r4
    3c92:	3344      	adds	r3, #68	; 0x44
    3c94:	4299      	cmp	r1, r3
    3c96:	d002      	beq.n	3c9e <setvbuf+0x56>
    3c98:	0030      	movs	r0, r6
    3c9a:	f7ff fe79 	bl	3990 <_free_r>
    3c9e:	2300      	movs	r3, #0
    3ca0:	6363      	str	r3, [r4, #52]	; 0x34
    3ca2:	2300      	movs	r3, #0
    3ca4:	61a3      	str	r3, [r4, #24]
    3ca6:	6063      	str	r3, [r4, #4]
    3ca8:	89a3      	ldrh	r3, [r4, #12]
    3caa:	061b      	lsls	r3, r3, #24
    3cac:	d503      	bpl.n	3cb6 <setvbuf+0x6e>
    3cae:	6921      	ldr	r1, [r4, #16]
    3cb0:	0030      	movs	r0, r6
    3cb2:	f7ff fe6d 	bl	3990 <_free_r>
    3cb6:	89a3      	ldrh	r3, [r4, #12]
    3cb8:	4a36      	ldr	r2, [pc, #216]	; (3d94 <setvbuf+0x14c>)
    3cba:	4013      	ands	r3, r2
    3cbc:	81a3      	strh	r3, [r4, #12]
    3cbe:	9b00      	ldr	r3, [sp, #0]
    3cc0:	2b02      	cmp	r3, #2
    3cc2:	d05a      	beq.n	3d7a <setvbuf+0x132>
    3cc4:	ab03      	add	r3, sp, #12
    3cc6:	aa02      	add	r2, sp, #8
    3cc8:	0021      	movs	r1, r4
    3cca:	0030      	movs	r0, r6
    3ccc:	f000 f9fe 	bl	40cc <__swhatbuf_r>
    3cd0:	89a3      	ldrh	r3, [r4, #12]
    3cd2:	4318      	orrs	r0, r3
    3cd4:	81a0      	strh	r0, [r4, #12]
    3cd6:	2d00      	cmp	r5, #0
    3cd8:	d124      	bne.n	3d24 <setvbuf+0xdc>
    3cda:	9d02      	ldr	r5, [sp, #8]
    3cdc:	0028      	movs	r0, r5
    3cde:	f7ff fe3b 	bl	3958 <malloc>
    3ce2:	9501      	str	r5, [sp, #4]
    3ce4:	1e07      	subs	r7, r0, #0
    3ce6:	d142      	bne.n	3d6e <setvbuf+0x126>
    3ce8:	9b02      	ldr	r3, [sp, #8]
    3cea:	9301      	str	r3, [sp, #4]
    3cec:	42ab      	cmp	r3, r5
    3cee:	d139      	bne.n	3d64 <setvbuf+0x11c>
    3cf0:	2001      	movs	r0, #1
    3cf2:	4240      	negs	r0, r0
    3cf4:	2302      	movs	r3, #2
    3cf6:	89a2      	ldrh	r2, [r4, #12]
    3cf8:	4313      	orrs	r3, r2
    3cfa:	81a3      	strh	r3, [r4, #12]
    3cfc:	2300      	movs	r3, #0
    3cfe:	60a3      	str	r3, [r4, #8]
    3d00:	0023      	movs	r3, r4
    3d02:	3347      	adds	r3, #71	; 0x47
    3d04:	6023      	str	r3, [r4, #0]
    3d06:	6123      	str	r3, [r4, #16]
    3d08:	2301      	movs	r3, #1
    3d0a:	6163      	str	r3, [r4, #20]
    3d0c:	b005      	add	sp, #20
    3d0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3d10:	4b21      	ldr	r3, [pc, #132]	; (3d98 <setvbuf+0x150>)
    3d12:	429c      	cmp	r4, r3
    3d14:	d101      	bne.n	3d1a <setvbuf+0xd2>
    3d16:	68b4      	ldr	r4, [r6, #8]
    3d18:	e7aa      	b.n	3c70 <setvbuf+0x28>
    3d1a:	4b20      	ldr	r3, [pc, #128]	; (3d9c <setvbuf+0x154>)
    3d1c:	429c      	cmp	r4, r3
    3d1e:	d1a7      	bne.n	3c70 <setvbuf+0x28>
    3d20:	68f4      	ldr	r4, [r6, #12]
    3d22:	e7a5      	b.n	3c70 <setvbuf+0x28>
    3d24:	2f00      	cmp	r7, #0
    3d26:	d0d9      	beq.n	3cdc <setvbuf+0x94>
    3d28:	69b3      	ldr	r3, [r6, #24]
    3d2a:	2b00      	cmp	r3, #0
    3d2c:	d102      	bne.n	3d34 <setvbuf+0xec>
    3d2e:	0030      	movs	r0, r6
    3d30:	f000 f936 	bl	3fa0 <__sinit>
    3d34:	9b00      	ldr	r3, [sp, #0]
    3d36:	2b01      	cmp	r3, #1
    3d38:	d103      	bne.n	3d42 <setvbuf+0xfa>
    3d3a:	89a3      	ldrh	r3, [r4, #12]
    3d3c:	9a00      	ldr	r2, [sp, #0]
    3d3e:	431a      	orrs	r2, r3
    3d40:	81a2      	strh	r2, [r4, #12]
    3d42:	2008      	movs	r0, #8
    3d44:	89a3      	ldrh	r3, [r4, #12]
    3d46:	6027      	str	r7, [r4, #0]
    3d48:	6127      	str	r7, [r4, #16]
    3d4a:	6165      	str	r5, [r4, #20]
    3d4c:	4018      	ands	r0, r3
    3d4e:	d018      	beq.n	3d82 <setvbuf+0x13a>
    3d50:	2001      	movs	r0, #1
    3d52:	4018      	ands	r0, r3
    3d54:	2300      	movs	r3, #0
    3d56:	4298      	cmp	r0, r3
    3d58:	d011      	beq.n	3d7e <setvbuf+0x136>
    3d5a:	426d      	negs	r5, r5
    3d5c:	60a3      	str	r3, [r4, #8]
    3d5e:	61a5      	str	r5, [r4, #24]
    3d60:	0018      	movs	r0, r3
    3d62:	e7d3      	b.n	3d0c <setvbuf+0xc4>
    3d64:	9801      	ldr	r0, [sp, #4]
    3d66:	f7ff fdf7 	bl	3958 <malloc>
    3d6a:	1e07      	subs	r7, r0, #0
    3d6c:	d0c0      	beq.n	3cf0 <setvbuf+0xa8>
    3d6e:	2380      	movs	r3, #128	; 0x80
    3d70:	89a2      	ldrh	r2, [r4, #12]
    3d72:	9d01      	ldr	r5, [sp, #4]
    3d74:	4313      	orrs	r3, r2
    3d76:	81a3      	strh	r3, [r4, #12]
    3d78:	e7d6      	b.n	3d28 <setvbuf+0xe0>
    3d7a:	2000      	movs	r0, #0
    3d7c:	e7ba      	b.n	3cf4 <setvbuf+0xac>
    3d7e:	60a5      	str	r5, [r4, #8]
    3d80:	e7c4      	b.n	3d0c <setvbuf+0xc4>
    3d82:	60a0      	str	r0, [r4, #8]
    3d84:	e7c2      	b.n	3d0c <setvbuf+0xc4>
    3d86:	2001      	movs	r0, #1
    3d88:	4240      	negs	r0, r0
    3d8a:	e7bf      	b.n	3d0c <setvbuf+0xc4>
    3d8c:	20000164 	.word	0x20000164
    3d90:	00006e14 	.word	0x00006e14
    3d94:	fffff35c 	.word	0xfffff35c
    3d98:	00006e34 	.word	0x00006e34
    3d9c:	00006df4 	.word	0x00006df4

00003da0 <strlen>:
    3da0:	2300      	movs	r3, #0
    3da2:	5cc2      	ldrb	r2, [r0, r3]
    3da4:	3301      	adds	r3, #1
    3da6:	2a00      	cmp	r2, #0
    3da8:	d1fb      	bne.n	3da2 <strlen+0x2>
    3daa:	1e58      	subs	r0, r3, #1
    3dac:	4770      	bx	lr
	...

00003db0 <__sflush_r>:
    3db0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3db2:	898a      	ldrh	r2, [r1, #12]
    3db4:	0005      	movs	r5, r0
    3db6:	000c      	movs	r4, r1
    3db8:	0713      	lsls	r3, r2, #28
    3dba:	d460      	bmi.n	3e7e <__sflush_r+0xce>
    3dbc:	684b      	ldr	r3, [r1, #4]
    3dbe:	2b00      	cmp	r3, #0
    3dc0:	dc04      	bgt.n	3dcc <__sflush_r+0x1c>
    3dc2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    3dc4:	2b00      	cmp	r3, #0
    3dc6:	dc01      	bgt.n	3dcc <__sflush_r+0x1c>
    3dc8:	2000      	movs	r0, #0
    3dca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3dcc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    3dce:	2f00      	cmp	r7, #0
    3dd0:	d0fa      	beq.n	3dc8 <__sflush_r+0x18>
    3dd2:	2300      	movs	r3, #0
    3dd4:	682e      	ldr	r6, [r5, #0]
    3dd6:	602b      	str	r3, [r5, #0]
    3dd8:	2380      	movs	r3, #128	; 0x80
    3dda:	015b      	lsls	r3, r3, #5
    3ddc:	401a      	ands	r2, r3
    3dde:	d034      	beq.n	3e4a <__sflush_r+0x9a>
    3de0:	6d60      	ldr	r0, [r4, #84]	; 0x54
    3de2:	89a3      	ldrh	r3, [r4, #12]
    3de4:	075b      	lsls	r3, r3, #29
    3de6:	d506      	bpl.n	3df6 <__sflush_r+0x46>
    3de8:	6863      	ldr	r3, [r4, #4]
    3dea:	1ac0      	subs	r0, r0, r3
    3dec:	6b63      	ldr	r3, [r4, #52]	; 0x34
    3dee:	2b00      	cmp	r3, #0
    3df0:	d001      	beq.n	3df6 <__sflush_r+0x46>
    3df2:	6c23      	ldr	r3, [r4, #64]	; 0x40
    3df4:	1ac0      	subs	r0, r0, r3
    3df6:	0002      	movs	r2, r0
    3df8:	6a21      	ldr	r1, [r4, #32]
    3dfa:	2300      	movs	r3, #0
    3dfc:	0028      	movs	r0, r5
    3dfe:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    3e00:	47b8      	blx	r7
    3e02:	89a1      	ldrh	r1, [r4, #12]
    3e04:	1c43      	adds	r3, r0, #1
    3e06:	d106      	bne.n	3e16 <__sflush_r+0x66>
    3e08:	682b      	ldr	r3, [r5, #0]
    3e0a:	2b1d      	cmp	r3, #29
    3e0c:	d831      	bhi.n	3e72 <__sflush_r+0xc2>
    3e0e:	4a2c      	ldr	r2, [pc, #176]	; (3ec0 <__sflush_r+0x110>)
    3e10:	40da      	lsrs	r2, r3
    3e12:	07d3      	lsls	r3, r2, #31
    3e14:	d52d      	bpl.n	3e72 <__sflush_r+0xc2>
    3e16:	2300      	movs	r3, #0
    3e18:	6063      	str	r3, [r4, #4]
    3e1a:	6923      	ldr	r3, [r4, #16]
    3e1c:	6023      	str	r3, [r4, #0]
    3e1e:	04cb      	lsls	r3, r1, #19
    3e20:	d505      	bpl.n	3e2e <__sflush_r+0x7e>
    3e22:	1c43      	adds	r3, r0, #1
    3e24:	d102      	bne.n	3e2c <__sflush_r+0x7c>
    3e26:	682b      	ldr	r3, [r5, #0]
    3e28:	2b00      	cmp	r3, #0
    3e2a:	d100      	bne.n	3e2e <__sflush_r+0x7e>
    3e2c:	6560      	str	r0, [r4, #84]	; 0x54
    3e2e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3e30:	602e      	str	r6, [r5, #0]
    3e32:	2900      	cmp	r1, #0
    3e34:	d0c8      	beq.n	3dc8 <__sflush_r+0x18>
    3e36:	0023      	movs	r3, r4
    3e38:	3344      	adds	r3, #68	; 0x44
    3e3a:	4299      	cmp	r1, r3
    3e3c:	d002      	beq.n	3e44 <__sflush_r+0x94>
    3e3e:	0028      	movs	r0, r5
    3e40:	f7ff fda6 	bl	3990 <_free_r>
    3e44:	2000      	movs	r0, #0
    3e46:	6360      	str	r0, [r4, #52]	; 0x34
    3e48:	e7bf      	b.n	3dca <__sflush_r+0x1a>
    3e4a:	2301      	movs	r3, #1
    3e4c:	6a21      	ldr	r1, [r4, #32]
    3e4e:	0028      	movs	r0, r5
    3e50:	47b8      	blx	r7
    3e52:	1c43      	adds	r3, r0, #1
    3e54:	d1c5      	bne.n	3de2 <__sflush_r+0x32>
    3e56:	682b      	ldr	r3, [r5, #0]
    3e58:	2b00      	cmp	r3, #0
    3e5a:	d0c2      	beq.n	3de2 <__sflush_r+0x32>
    3e5c:	2b1d      	cmp	r3, #29
    3e5e:	d001      	beq.n	3e64 <__sflush_r+0xb4>
    3e60:	2b16      	cmp	r3, #22
    3e62:	d101      	bne.n	3e68 <__sflush_r+0xb8>
    3e64:	602e      	str	r6, [r5, #0]
    3e66:	e7af      	b.n	3dc8 <__sflush_r+0x18>
    3e68:	2340      	movs	r3, #64	; 0x40
    3e6a:	89a2      	ldrh	r2, [r4, #12]
    3e6c:	4313      	orrs	r3, r2
    3e6e:	81a3      	strh	r3, [r4, #12]
    3e70:	e7ab      	b.n	3dca <__sflush_r+0x1a>
    3e72:	2340      	movs	r3, #64	; 0x40
    3e74:	430b      	orrs	r3, r1
    3e76:	2001      	movs	r0, #1
    3e78:	81a3      	strh	r3, [r4, #12]
    3e7a:	4240      	negs	r0, r0
    3e7c:	e7a5      	b.n	3dca <__sflush_r+0x1a>
    3e7e:	690f      	ldr	r7, [r1, #16]
    3e80:	2f00      	cmp	r7, #0
    3e82:	d0a1      	beq.n	3dc8 <__sflush_r+0x18>
    3e84:	680b      	ldr	r3, [r1, #0]
    3e86:	600f      	str	r7, [r1, #0]
    3e88:	1bdb      	subs	r3, r3, r7
    3e8a:	9301      	str	r3, [sp, #4]
    3e8c:	2300      	movs	r3, #0
    3e8e:	0792      	lsls	r2, r2, #30
    3e90:	d100      	bne.n	3e94 <__sflush_r+0xe4>
    3e92:	694b      	ldr	r3, [r1, #20]
    3e94:	60a3      	str	r3, [r4, #8]
    3e96:	9b01      	ldr	r3, [sp, #4]
    3e98:	2b00      	cmp	r3, #0
    3e9a:	dc00      	bgt.n	3e9e <__sflush_r+0xee>
    3e9c:	e794      	b.n	3dc8 <__sflush_r+0x18>
    3e9e:	9b01      	ldr	r3, [sp, #4]
    3ea0:	003a      	movs	r2, r7
    3ea2:	6a21      	ldr	r1, [r4, #32]
    3ea4:	0028      	movs	r0, r5
    3ea6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    3ea8:	47b0      	blx	r6
    3eaa:	2800      	cmp	r0, #0
    3eac:	dc03      	bgt.n	3eb6 <__sflush_r+0x106>
    3eae:	2340      	movs	r3, #64	; 0x40
    3eb0:	89a2      	ldrh	r2, [r4, #12]
    3eb2:	4313      	orrs	r3, r2
    3eb4:	e7df      	b.n	3e76 <__sflush_r+0xc6>
    3eb6:	9b01      	ldr	r3, [sp, #4]
    3eb8:	183f      	adds	r7, r7, r0
    3eba:	1a1b      	subs	r3, r3, r0
    3ebc:	9301      	str	r3, [sp, #4]
    3ebe:	e7ea      	b.n	3e96 <__sflush_r+0xe6>
    3ec0:	20400001 	.word	0x20400001

00003ec4 <_fflush_r>:
    3ec4:	690b      	ldr	r3, [r1, #16]
    3ec6:	b570      	push	{r4, r5, r6, lr}
    3ec8:	0005      	movs	r5, r0
    3eca:	000c      	movs	r4, r1
    3ecc:	2b00      	cmp	r3, #0
    3ece:	d101      	bne.n	3ed4 <_fflush_r+0x10>
    3ed0:	2000      	movs	r0, #0
    3ed2:	bd70      	pop	{r4, r5, r6, pc}
    3ed4:	2800      	cmp	r0, #0
    3ed6:	d004      	beq.n	3ee2 <_fflush_r+0x1e>
    3ed8:	6983      	ldr	r3, [r0, #24]
    3eda:	2b00      	cmp	r3, #0
    3edc:	d101      	bne.n	3ee2 <_fflush_r+0x1e>
    3ede:	f000 f85f 	bl	3fa0 <__sinit>
    3ee2:	4b0b      	ldr	r3, [pc, #44]	; (3f10 <_fflush_r+0x4c>)
    3ee4:	429c      	cmp	r4, r3
    3ee6:	d109      	bne.n	3efc <_fflush_r+0x38>
    3ee8:	686c      	ldr	r4, [r5, #4]
    3eea:	220c      	movs	r2, #12
    3eec:	5ea3      	ldrsh	r3, [r4, r2]
    3eee:	2b00      	cmp	r3, #0
    3ef0:	d0ee      	beq.n	3ed0 <_fflush_r+0xc>
    3ef2:	0021      	movs	r1, r4
    3ef4:	0028      	movs	r0, r5
    3ef6:	f7ff ff5b 	bl	3db0 <__sflush_r>
    3efa:	e7ea      	b.n	3ed2 <_fflush_r+0xe>
    3efc:	4b05      	ldr	r3, [pc, #20]	; (3f14 <_fflush_r+0x50>)
    3efe:	429c      	cmp	r4, r3
    3f00:	d101      	bne.n	3f06 <_fflush_r+0x42>
    3f02:	68ac      	ldr	r4, [r5, #8]
    3f04:	e7f1      	b.n	3eea <_fflush_r+0x26>
    3f06:	4b04      	ldr	r3, [pc, #16]	; (3f18 <_fflush_r+0x54>)
    3f08:	429c      	cmp	r4, r3
    3f0a:	d1ee      	bne.n	3eea <_fflush_r+0x26>
    3f0c:	68ec      	ldr	r4, [r5, #12]
    3f0e:	e7ec      	b.n	3eea <_fflush_r+0x26>
    3f10:	00006e14 	.word	0x00006e14
    3f14:	00006e34 	.word	0x00006e34
    3f18:	00006df4 	.word	0x00006df4

00003f1c <_cleanup_r>:
    3f1c:	b510      	push	{r4, lr}
    3f1e:	4902      	ldr	r1, [pc, #8]	; (3f28 <_cleanup_r+0xc>)
    3f20:	f000 f8b2 	bl	4088 <_fwalk_reent>
    3f24:	bd10      	pop	{r4, pc}
    3f26:	46c0      	nop			; (mov r8, r8)
    3f28:	00003ec5 	.word	0x00003ec5

00003f2c <std.isra.0>:
    3f2c:	2300      	movs	r3, #0
    3f2e:	b510      	push	{r4, lr}
    3f30:	0004      	movs	r4, r0
    3f32:	6003      	str	r3, [r0, #0]
    3f34:	6043      	str	r3, [r0, #4]
    3f36:	6083      	str	r3, [r0, #8]
    3f38:	8181      	strh	r1, [r0, #12]
    3f3a:	6643      	str	r3, [r0, #100]	; 0x64
    3f3c:	81c2      	strh	r2, [r0, #14]
    3f3e:	6103      	str	r3, [r0, #16]
    3f40:	6143      	str	r3, [r0, #20]
    3f42:	6183      	str	r3, [r0, #24]
    3f44:	0019      	movs	r1, r3
    3f46:	2208      	movs	r2, #8
    3f48:	305c      	adds	r0, #92	; 0x5c
    3f4a:	f7ff fd18 	bl	397e <memset>
    3f4e:	4b05      	ldr	r3, [pc, #20]	; (3f64 <std.isra.0+0x38>)
    3f50:	6224      	str	r4, [r4, #32]
    3f52:	6263      	str	r3, [r4, #36]	; 0x24
    3f54:	4b04      	ldr	r3, [pc, #16]	; (3f68 <std.isra.0+0x3c>)
    3f56:	62a3      	str	r3, [r4, #40]	; 0x28
    3f58:	4b04      	ldr	r3, [pc, #16]	; (3f6c <std.isra.0+0x40>)
    3f5a:	62e3      	str	r3, [r4, #44]	; 0x2c
    3f5c:	4b04      	ldr	r3, [pc, #16]	; (3f70 <std.isra.0+0x44>)
    3f5e:	6323      	str	r3, [r4, #48]	; 0x30
    3f60:	bd10      	pop	{r4, pc}
    3f62:	46c0      	nop			; (mov r8, r8)
    3f64:	000047ad 	.word	0x000047ad
    3f68:	000047d5 	.word	0x000047d5
    3f6c:	0000480d 	.word	0x0000480d
    3f70:	00004839 	.word	0x00004839

00003f74 <__sfmoreglue>:
    3f74:	b570      	push	{r4, r5, r6, lr}
    3f76:	2568      	movs	r5, #104	; 0x68
    3f78:	1e4a      	subs	r2, r1, #1
    3f7a:	4355      	muls	r5, r2
    3f7c:	000e      	movs	r6, r1
    3f7e:	0029      	movs	r1, r5
    3f80:	3174      	adds	r1, #116	; 0x74
    3f82:	f7ff fd4f 	bl	3a24 <_malloc_r>
    3f86:	1e04      	subs	r4, r0, #0
    3f88:	d008      	beq.n	3f9c <__sfmoreglue+0x28>
    3f8a:	2100      	movs	r1, #0
    3f8c:	002a      	movs	r2, r5
    3f8e:	6001      	str	r1, [r0, #0]
    3f90:	6046      	str	r6, [r0, #4]
    3f92:	300c      	adds	r0, #12
    3f94:	60a0      	str	r0, [r4, #8]
    3f96:	3268      	adds	r2, #104	; 0x68
    3f98:	f7ff fcf1 	bl	397e <memset>
    3f9c:	0020      	movs	r0, r4
    3f9e:	bd70      	pop	{r4, r5, r6, pc}

00003fa0 <__sinit>:
    3fa0:	6983      	ldr	r3, [r0, #24]
    3fa2:	b513      	push	{r0, r1, r4, lr}
    3fa4:	0004      	movs	r4, r0
    3fa6:	2b00      	cmp	r3, #0
    3fa8:	d128      	bne.n	3ffc <__sinit+0x5c>
    3faa:	6483      	str	r3, [r0, #72]	; 0x48
    3fac:	64c3      	str	r3, [r0, #76]	; 0x4c
    3fae:	6503      	str	r3, [r0, #80]	; 0x50
    3fb0:	4b13      	ldr	r3, [pc, #76]	; (4000 <__sinit+0x60>)
    3fb2:	4a14      	ldr	r2, [pc, #80]	; (4004 <__sinit+0x64>)
    3fb4:	681b      	ldr	r3, [r3, #0]
    3fb6:	6282      	str	r2, [r0, #40]	; 0x28
    3fb8:	9301      	str	r3, [sp, #4]
    3fba:	4298      	cmp	r0, r3
    3fbc:	d101      	bne.n	3fc2 <__sinit+0x22>
    3fbe:	2301      	movs	r3, #1
    3fc0:	6183      	str	r3, [r0, #24]
    3fc2:	0020      	movs	r0, r4
    3fc4:	f000 f820 	bl	4008 <__sfp>
    3fc8:	6060      	str	r0, [r4, #4]
    3fca:	0020      	movs	r0, r4
    3fcc:	f000 f81c 	bl	4008 <__sfp>
    3fd0:	60a0      	str	r0, [r4, #8]
    3fd2:	0020      	movs	r0, r4
    3fd4:	f000 f818 	bl	4008 <__sfp>
    3fd8:	2200      	movs	r2, #0
    3fda:	60e0      	str	r0, [r4, #12]
    3fdc:	2104      	movs	r1, #4
    3fde:	6860      	ldr	r0, [r4, #4]
    3fe0:	f7ff ffa4 	bl	3f2c <std.isra.0>
    3fe4:	2201      	movs	r2, #1
    3fe6:	2109      	movs	r1, #9
    3fe8:	68a0      	ldr	r0, [r4, #8]
    3fea:	f7ff ff9f 	bl	3f2c <std.isra.0>
    3fee:	2202      	movs	r2, #2
    3ff0:	2112      	movs	r1, #18
    3ff2:	68e0      	ldr	r0, [r4, #12]
    3ff4:	f7ff ff9a 	bl	3f2c <std.isra.0>
    3ff8:	2301      	movs	r3, #1
    3ffa:	61a3      	str	r3, [r4, #24]
    3ffc:	bd13      	pop	{r0, r1, r4, pc}
    3ffe:	46c0      	nop			; (mov r8, r8)
    4000:	00006df0 	.word	0x00006df0
    4004:	00003f1d 	.word	0x00003f1d

00004008 <__sfp>:
    4008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    400a:	4b1e      	ldr	r3, [pc, #120]	; (4084 <__sfp+0x7c>)
    400c:	0007      	movs	r7, r0
    400e:	681e      	ldr	r6, [r3, #0]
    4010:	69b3      	ldr	r3, [r6, #24]
    4012:	2b00      	cmp	r3, #0
    4014:	d102      	bne.n	401c <__sfp+0x14>
    4016:	0030      	movs	r0, r6
    4018:	f7ff ffc2 	bl	3fa0 <__sinit>
    401c:	3648      	adds	r6, #72	; 0x48
    401e:	68b4      	ldr	r4, [r6, #8]
    4020:	6873      	ldr	r3, [r6, #4]
    4022:	3b01      	subs	r3, #1
    4024:	d504      	bpl.n	4030 <__sfp+0x28>
    4026:	6833      	ldr	r3, [r6, #0]
    4028:	2b00      	cmp	r3, #0
    402a:	d007      	beq.n	403c <__sfp+0x34>
    402c:	6836      	ldr	r6, [r6, #0]
    402e:	e7f6      	b.n	401e <__sfp+0x16>
    4030:	220c      	movs	r2, #12
    4032:	5ea5      	ldrsh	r5, [r4, r2]
    4034:	2d00      	cmp	r5, #0
    4036:	d00d      	beq.n	4054 <__sfp+0x4c>
    4038:	3468      	adds	r4, #104	; 0x68
    403a:	e7f2      	b.n	4022 <__sfp+0x1a>
    403c:	2104      	movs	r1, #4
    403e:	0038      	movs	r0, r7
    4040:	f7ff ff98 	bl	3f74 <__sfmoreglue>
    4044:	6030      	str	r0, [r6, #0]
    4046:	2800      	cmp	r0, #0
    4048:	d1f0      	bne.n	402c <__sfp+0x24>
    404a:	230c      	movs	r3, #12
    404c:	0004      	movs	r4, r0
    404e:	603b      	str	r3, [r7, #0]
    4050:	0020      	movs	r0, r4
    4052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4054:	2301      	movs	r3, #1
    4056:	0020      	movs	r0, r4
    4058:	425b      	negs	r3, r3
    405a:	81e3      	strh	r3, [r4, #14]
    405c:	3302      	adds	r3, #2
    405e:	81a3      	strh	r3, [r4, #12]
    4060:	6665      	str	r5, [r4, #100]	; 0x64
    4062:	6025      	str	r5, [r4, #0]
    4064:	60a5      	str	r5, [r4, #8]
    4066:	6065      	str	r5, [r4, #4]
    4068:	6125      	str	r5, [r4, #16]
    406a:	6165      	str	r5, [r4, #20]
    406c:	61a5      	str	r5, [r4, #24]
    406e:	2208      	movs	r2, #8
    4070:	0029      	movs	r1, r5
    4072:	305c      	adds	r0, #92	; 0x5c
    4074:	f7ff fc83 	bl	397e <memset>
    4078:	6365      	str	r5, [r4, #52]	; 0x34
    407a:	63a5      	str	r5, [r4, #56]	; 0x38
    407c:	64a5      	str	r5, [r4, #72]	; 0x48
    407e:	64e5      	str	r5, [r4, #76]	; 0x4c
    4080:	e7e6      	b.n	4050 <__sfp+0x48>
    4082:	46c0      	nop			; (mov r8, r8)
    4084:	00006df0 	.word	0x00006df0

00004088 <_fwalk_reent>:
    4088:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    408a:	0004      	movs	r4, r0
    408c:	0007      	movs	r7, r0
    408e:	2600      	movs	r6, #0
    4090:	9101      	str	r1, [sp, #4]
    4092:	3448      	adds	r4, #72	; 0x48
    4094:	2c00      	cmp	r4, #0
    4096:	d101      	bne.n	409c <_fwalk_reent+0x14>
    4098:	0030      	movs	r0, r6
    409a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    409c:	6863      	ldr	r3, [r4, #4]
    409e:	68a5      	ldr	r5, [r4, #8]
    40a0:	9300      	str	r3, [sp, #0]
    40a2:	9b00      	ldr	r3, [sp, #0]
    40a4:	3b01      	subs	r3, #1
    40a6:	9300      	str	r3, [sp, #0]
    40a8:	d501      	bpl.n	40ae <_fwalk_reent+0x26>
    40aa:	6824      	ldr	r4, [r4, #0]
    40ac:	e7f2      	b.n	4094 <_fwalk_reent+0xc>
    40ae:	89ab      	ldrh	r3, [r5, #12]
    40b0:	2b01      	cmp	r3, #1
    40b2:	d908      	bls.n	40c6 <_fwalk_reent+0x3e>
    40b4:	220e      	movs	r2, #14
    40b6:	5eab      	ldrsh	r3, [r5, r2]
    40b8:	3301      	adds	r3, #1
    40ba:	d004      	beq.n	40c6 <_fwalk_reent+0x3e>
    40bc:	0029      	movs	r1, r5
    40be:	0038      	movs	r0, r7
    40c0:	9b01      	ldr	r3, [sp, #4]
    40c2:	4798      	blx	r3
    40c4:	4306      	orrs	r6, r0
    40c6:	3568      	adds	r5, #104	; 0x68
    40c8:	e7eb      	b.n	40a2 <_fwalk_reent+0x1a>
	...

000040cc <__swhatbuf_r>:
    40cc:	b570      	push	{r4, r5, r6, lr}
    40ce:	000e      	movs	r6, r1
    40d0:	001d      	movs	r5, r3
    40d2:	230e      	movs	r3, #14
    40d4:	5ec9      	ldrsh	r1, [r1, r3]
    40d6:	b090      	sub	sp, #64	; 0x40
    40d8:	0014      	movs	r4, r2
    40da:	2900      	cmp	r1, #0
    40dc:	da07      	bge.n	40ee <__swhatbuf_r+0x22>
    40de:	2300      	movs	r3, #0
    40e0:	602b      	str	r3, [r5, #0]
    40e2:	89b3      	ldrh	r3, [r6, #12]
    40e4:	061b      	lsls	r3, r3, #24
    40e6:	d411      	bmi.n	410c <__swhatbuf_r+0x40>
    40e8:	2380      	movs	r3, #128	; 0x80
    40ea:	00db      	lsls	r3, r3, #3
    40ec:	e00f      	b.n	410e <__swhatbuf_r+0x42>
    40ee:	aa01      	add	r2, sp, #4
    40f0:	f000 fc9a 	bl	4a28 <_fstat_r>
    40f4:	2800      	cmp	r0, #0
    40f6:	dbf2      	blt.n	40de <__swhatbuf_r+0x12>
    40f8:	22f0      	movs	r2, #240	; 0xf0
    40fa:	9b02      	ldr	r3, [sp, #8]
    40fc:	0212      	lsls	r2, r2, #8
    40fe:	4013      	ands	r3, r2
    4100:	4a05      	ldr	r2, [pc, #20]	; (4118 <__swhatbuf_r+0x4c>)
    4102:	189b      	adds	r3, r3, r2
    4104:	425a      	negs	r2, r3
    4106:	4153      	adcs	r3, r2
    4108:	602b      	str	r3, [r5, #0]
    410a:	e7ed      	b.n	40e8 <__swhatbuf_r+0x1c>
    410c:	2340      	movs	r3, #64	; 0x40
    410e:	2000      	movs	r0, #0
    4110:	6023      	str	r3, [r4, #0]
    4112:	b010      	add	sp, #64	; 0x40
    4114:	bd70      	pop	{r4, r5, r6, pc}
    4116:	46c0      	nop			; (mov r8, r8)
    4118:	ffffe000 	.word	0xffffe000

0000411c <__smakebuf_r>:
    411c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    411e:	2602      	movs	r6, #2
    4120:	898b      	ldrh	r3, [r1, #12]
    4122:	0005      	movs	r5, r0
    4124:	000c      	movs	r4, r1
    4126:	4233      	tst	r3, r6
    4128:	d006      	beq.n	4138 <__smakebuf_r+0x1c>
    412a:	0023      	movs	r3, r4
    412c:	3347      	adds	r3, #71	; 0x47
    412e:	6023      	str	r3, [r4, #0]
    4130:	6123      	str	r3, [r4, #16]
    4132:	2301      	movs	r3, #1
    4134:	6163      	str	r3, [r4, #20]
    4136:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    4138:	ab01      	add	r3, sp, #4
    413a:	466a      	mov	r2, sp
    413c:	f7ff ffc6 	bl	40cc <__swhatbuf_r>
    4140:	9900      	ldr	r1, [sp, #0]
    4142:	0007      	movs	r7, r0
    4144:	0028      	movs	r0, r5
    4146:	f7ff fc6d 	bl	3a24 <_malloc_r>
    414a:	2800      	cmp	r0, #0
    414c:	d108      	bne.n	4160 <__smakebuf_r+0x44>
    414e:	220c      	movs	r2, #12
    4150:	5ea3      	ldrsh	r3, [r4, r2]
    4152:	059a      	lsls	r2, r3, #22
    4154:	d4ef      	bmi.n	4136 <__smakebuf_r+0x1a>
    4156:	2203      	movs	r2, #3
    4158:	4393      	bics	r3, r2
    415a:	431e      	orrs	r6, r3
    415c:	81a6      	strh	r6, [r4, #12]
    415e:	e7e4      	b.n	412a <__smakebuf_r+0xe>
    4160:	4b0f      	ldr	r3, [pc, #60]	; (41a0 <__smakebuf_r+0x84>)
    4162:	62ab      	str	r3, [r5, #40]	; 0x28
    4164:	2380      	movs	r3, #128	; 0x80
    4166:	89a2      	ldrh	r2, [r4, #12]
    4168:	6020      	str	r0, [r4, #0]
    416a:	4313      	orrs	r3, r2
    416c:	81a3      	strh	r3, [r4, #12]
    416e:	9b00      	ldr	r3, [sp, #0]
    4170:	6120      	str	r0, [r4, #16]
    4172:	6163      	str	r3, [r4, #20]
    4174:	9b01      	ldr	r3, [sp, #4]
    4176:	2b00      	cmp	r3, #0
    4178:	d00d      	beq.n	4196 <__smakebuf_r+0x7a>
    417a:	230e      	movs	r3, #14
    417c:	5ee1      	ldrsh	r1, [r4, r3]
    417e:	0028      	movs	r0, r5
    4180:	f000 fc64 	bl	4a4c <_isatty_r>
    4184:	2800      	cmp	r0, #0
    4186:	d006      	beq.n	4196 <__smakebuf_r+0x7a>
    4188:	2203      	movs	r2, #3
    418a:	89a3      	ldrh	r3, [r4, #12]
    418c:	4393      	bics	r3, r2
    418e:	001a      	movs	r2, r3
    4190:	2301      	movs	r3, #1
    4192:	4313      	orrs	r3, r2
    4194:	81a3      	strh	r3, [r4, #12]
    4196:	89a0      	ldrh	r0, [r4, #12]
    4198:	4338      	orrs	r0, r7
    419a:	81a0      	strh	r0, [r4, #12]
    419c:	e7cb      	b.n	4136 <__smakebuf_r+0x1a>
    419e:	46c0      	nop			; (mov r8, r8)
    41a0:	00003f1d 	.word	0x00003f1d

000041a4 <__malloc_lock>:
    41a4:	4770      	bx	lr

000041a6 <__malloc_unlock>:
    41a6:	4770      	bx	lr

000041a8 <__sfputc_r>:
    41a8:	6893      	ldr	r3, [r2, #8]
    41aa:	b510      	push	{r4, lr}
    41ac:	3b01      	subs	r3, #1
    41ae:	6093      	str	r3, [r2, #8]
    41b0:	2b00      	cmp	r3, #0
    41b2:	da05      	bge.n	41c0 <__sfputc_r+0x18>
    41b4:	6994      	ldr	r4, [r2, #24]
    41b6:	42a3      	cmp	r3, r4
    41b8:	db08      	blt.n	41cc <__sfputc_r+0x24>
    41ba:	b2cb      	uxtb	r3, r1
    41bc:	2b0a      	cmp	r3, #10
    41be:	d005      	beq.n	41cc <__sfputc_r+0x24>
    41c0:	6813      	ldr	r3, [r2, #0]
    41c2:	1c58      	adds	r0, r3, #1
    41c4:	6010      	str	r0, [r2, #0]
    41c6:	7019      	strb	r1, [r3, #0]
    41c8:	b2c8      	uxtb	r0, r1
    41ca:	bd10      	pop	{r4, pc}
    41cc:	f000 fb3a 	bl	4844 <__swbuf_r>
    41d0:	e7fb      	b.n	41ca <__sfputc_r+0x22>

000041d2 <__sfputs_r>:
    41d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    41d4:	0006      	movs	r6, r0
    41d6:	000f      	movs	r7, r1
    41d8:	0014      	movs	r4, r2
    41da:	18d5      	adds	r5, r2, r3
    41dc:	42ac      	cmp	r4, r5
    41de:	d101      	bne.n	41e4 <__sfputs_r+0x12>
    41e0:	2000      	movs	r0, #0
    41e2:	e007      	b.n	41f4 <__sfputs_r+0x22>
    41e4:	7821      	ldrb	r1, [r4, #0]
    41e6:	003a      	movs	r2, r7
    41e8:	0030      	movs	r0, r6
    41ea:	f7ff ffdd 	bl	41a8 <__sfputc_r>
    41ee:	3401      	adds	r4, #1
    41f0:	1c43      	adds	r3, r0, #1
    41f2:	d1f3      	bne.n	41dc <__sfputs_r+0xa>
    41f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000041f8 <_vfiprintf_r>:
    41f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    41fa:	b09f      	sub	sp, #124	; 0x7c
    41fc:	0006      	movs	r6, r0
    41fe:	000f      	movs	r7, r1
    4200:	0014      	movs	r4, r2
    4202:	9305      	str	r3, [sp, #20]
    4204:	2800      	cmp	r0, #0
    4206:	d004      	beq.n	4212 <_vfiprintf_r+0x1a>
    4208:	6983      	ldr	r3, [r0, #24]
    420a:	2b00      	cmp	r3, #0
    420c:	d101      	bne.n	4212 <_vfiprintf_r+0x1a>
    420e:	f7ff fec7 	bl	3fa0 <__sinit>
    4212:	4b7f      	ldr	r3, [pc, #508]	; (4410 <_vfiprintf_r+0x218>)
    4214:	429f      	cmp	r7, r3
    4216:	d15c      	bne.n	42d2 <_vfiprintf_r+0xda>
    4218:	6877      	ldr	r7, [r6, #4]
    421a:	89bb      	ldrh	r3, [r7, #12]
    421c:	071b      	lsls	r3, r3, #28
    421e:	d562      	bpl.n	42e6 <_vfiprintf_r+0xee>
    4220:	693b      	ldr	r3, [r7, #16]
    4222:	2b00      	cmp	r3, #0
    4224:	d05f      	beq.n	42e6 <_vfiprintf_r+0xee>
    4226:	2300      	movs	r3, #0
    4228:	ad06      	add	r5, sp, #24
    422a:	616b      	str	r3, [r5, #20]
    422c:	3320      	adds	r3, #32
    422e:	766b      	strb	r3, [r5, #25]
    4230:	3310      	adds	r3, #16
    4232:	76ab      	strb	r3, [r5, #26]
    4234:	9402      	str	r4, [sp, #8]
    4236:	9c02      	ldr	r4, [sp, #8]
    4238:	7823      	ldrb	r3, [r4, #0]
    423a:	2b00      	cmp	r3, #0
    423c:	d15d      	bne.n	42fa <_vfiprintf_r+0x102>
    423e:	9b02      	ldr	r3, [sp, #8]
    4240:	1ae3      	subs	r3, r4, r3
    4242:	9304      	str	r3, [sp, #16]
    4244:	d00d      	beq.n	4262 <_vfiprintf_r+0x6a>
    4246:	9b04      	ldr	r3, [sp, #16]
    4248:	9a02      	ldr	r2, [sp, #8]
    424a:	0039      	movs	r1, r7
    424c:	0030      	movs	r0, r6
    424e:	f7ff ffc0 	bl	41d2 <__sfputs_r>
    4252:	1c43      	adds	r3, r0, #1
    4254:	d100      	bne.n	4258 <_vfiprintf_r+0x60>
    4256:	e0cc      	b.n	43f2 <_vfiprintf_r+0x1fa>
    4258:	696a      	ldr	r2, [r5, #20]
    425a:	9b04      	ldr	r3, [sp, #16]
    425c:	4694      	mov	ip, r2
    425e:	4463      	add	r3, ip
    4260:	616b      	str	r3, [r5, #20]
    4262:	7823      	ldrb	r3, [r4, #0]
    4264:	2b00      	cmp	r3, #0
    4266:	d100      	bne.n	426a <_vfiprintf_r+0x72>
    4268:	e0c3      	b.n	43f2 <_vfiprintf_r+0x1fa>
    426a:	2201      	movs	r2, #1
    426c:	2300      	movs	r3, #0
    426e:	4252      	negs	r2, r2
    4270:	606a      	str	r2, [r5, #4]
    4272:	a902      	add	r1, sp, #8
    4274:	3254      	adds	r2, #84	; 0x54
    4276:	1852      	adds	r2, r2, r1
    4278:	3401      	adds	r4, #1
    427a:	602b      	str	r3, [r5, #0]
    427c:	60eb      	str	r3, [r5, #12]
    427e:	60ab      	str	r3, [r5, #8]
    4280:	7013      	strb	r3, [r2, #0]
    4282:	65ab      	str	r3, [r5, #88]	; 0x58
    4284:	7821      	ldrb	r1, [r4, #0]
    4286:	2205      	movs	r2, #5
    4288:	4862      	ldr	r0, [pc, #392]	; (4414 <_vfiprintf_r+0x21c>)
    428a:	f000 fc05 	bl	4a98 <memchr>
    428e:	1c63      	adds	r3, r4, #1
    4290:	469c      	mov	ip, r3
    4292:	2800      	cmp	r0, #0
    4294:	d135      	bne.n	4302 <_vfiprintf_r+0x10a>
    4296:	6829      	ldr	r1, [r5, #0]
    4298:	06cb      	lsls	r3, r1, #27
    429a:	d504      	bpl.n	42a6 <_vfiprintf_r+0xae>
    429c:	2353      	movs	r3, #83	; 0x53
    429e:	aa02      	add	r2, sp, #8
    42a0:	3020      	adds	r0, #32
    42a2:	189b      	adds	r3, r3, r2
    42a4:	7018      	strb	r0, [r3, #0]
    42a6:	070b      	lsls	r3, r1, #28
    42a8:	d504      	bpl.n	42b4 <_vfiprintf_r+0xbc>
    42aa:	2353      	movs	r3, #83	; 0x53
    42ac:	202b      	movs	r0, #43	; 0x2b
    42ae:	aa02      	add	r2, sp, #8
    42b0:	189b      	adds	r3, r3, r2
    42b2:	7018      	strb	r0, [r3, #0]
    42b4:	7823      	ldrb	r3, [r4, #0]
    42b6:	2b2a      	cmp	r3, #42	; 0x2a
    42b8:	d02c      	beq.n	4314 <_vfiprintf_r+0x11c>
    42ba:	2000      	movs	r0, #0
    42bc:	210a      	movs	r1, #10
    42be:	9b09      	ldr	r3, [sp, #36]	; 0x24
    42c0:	7822      	ldrb	r2, [r4, #0]
    42c2:	3a30      	subs	r2, #48	; 0x30
    42c4:	2a09      	cmp	r2, #9
    42c6:	d800      	bhi.n	42ca <_vfiprintf_r+0xd2>
    42c8:	e06b      	b.n	43a2 <_vfiprintf_r+0x1aa>
    42ca:	2800      	cmp	r0, #0
    42cc:	d02a      	beq.n	4324 <_vfiprintf_r+0x12c>
    42ce:	9309      	str	r3, [sp, #36]	; 0x24
    42d0:	e028      	b.n	4324 <_vfiprintf_r+0x12c>
    42d2:	4b51      	ldr	r3, [pc, #324]	; (4418 <_vfiprintf_r+0x220>)
    42d4:	429f      	cmp	r7, r3
    42d6:	d101      	bne.n	42dc <_vfiprintf_r+0xe4>
    42d8:	68b7      	ldr	r7, [r6, #8]
    42da:	e79e      	b.n	421a <_vfiprintf_r+0x22>
    42dc:	4b4f      	ldr	r3, [pc, #316]	; (441c <_vfiprintf_r+0x224>)
    42de:	429f      	cmp	r7, r3
    42e0:	d19b      	bne.n	421a <_vfiprintf_r+0x22>
    42e2:	68f7      	ldr	r7, [r6, #12]
    42e4:	e799      	b.n	421a <_vfiprintf_r+0x22>
    42e6:	0039      	movs	r1, r7
    42e8:	0030      	movs	r0, r6
    42ea:	f000 fb15 	bl	4918 <__swsetup_r>
    42ee:	2800      	cmp	r0, #0
    42f0:	d099      	beq.n	4226 <_vfiprintf_r+0x2e>
    42f2:	2001      	movs	r0, #1
    42f4:	4240      	negs	r0, r0
    42f6:	b01f      	add	sp, #124	; 0x7c
    42f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    42fa:	2b25      	cmp	r3, #37	; 0x25
    42fc:	d09f      	beq.n	423e <_vfiprintf_r+0x46>
    42fe:	3401      	adds	r4, #1
    4300:	e79a      	b.n	4238 <_vfiprintf_r+0x40>
    4302:	4b44      	ldr	r3, [pc, #272]	; (4414 <_vfiprintf_r+0x21c>)
    4304:	6829      	ldr	r1, [r5, #0]
    4306:	1ac0      	subs	r0, r0, r3
    4308:	2301      	movs	r3, #1
    430a:	4083      	lsls	r3, r0
    430c:	430b      	orrs	r3, r1
    430e:	602b      	str	r3, [r5, #0]
    4310:	4664      	mov	r4, ip
    4312:	e7b7      	b.n	4284 <_vfiprintf_r+0x8c>
    4314:	9b05      	ldr	r3, [sp, #20]
    4316:	1d18      	adds	r0, r3, #4
    4318:	681b      	ldr	r3, [r3, #0]
    431a:	9005      	str	r0, [sp, #20]
    431c:	2b00      	cmp	r3, #0
    431e:	db3a      	blt.n	4396 <_vfiprintf_r+0x19e>
    4320:	9309      	str	r3, [sp, #36]	; 0x24
    4322:	4664      	mov	r4, ip
    4324:	7823      	ldrb	r3, [r4, #0]
    4326:	2b2e      	cmp	r3, #46	; 0x2e
    4328:	d10b      	bne.n	4342 <_vfiprintf_r+0x14a>
    432a:	7863      	ldrb	r3, [r4, #1]
    432c:	1c62      	adds	r2, r4, #1
    432e:	2b2a      	cmp	r3, #42	; 0x2a
    4330:	d13f      	bne.n	43b2 <_vfiprintf_r+0x1ba>
    4332:	9b05      	ldr	r3, [sp, #20]
    4334:	3402      	adds	r4, #2
    4336:	1d1a      	adds	r2, r3, #4
    4338:	681b      	ldr	r3, [r3, #0]
    433a:	9205      	str	r2, [sp, #20]
    433c:	2b00      	cmp	r3, #0
    433e:	db35      	blt.n	43ac <_vfiprintf_r+0x1b4>
    4340:	9307      	str	r3, [sp, #28]
    4342:	7821      	ldrb	r1, [r4, #0]
    4344:	2203      	movs	r2, #3
    4346:	4836      	ldr	r0, [pc, #216]	; (4420 <_vfiprintf_r+0x228>)
    4348:	f000 fba6 	bl	4a98 <memchr>
    434c:	2800      	cmp	r0, #0
    434e:	d007      	beq.n	4360 <_vfiprintf_r+0x168>
    4350:	4b33      	ldr	r3, [pc, #204]	; (4420 <_vfiprintf_r+0x228>)
    4352:	682a      	ldr	r2, [r5, #0]
    4354:	1ac0      	subs	r0, r0, r3
    4356:	2340      	movs	r3, #64	; 0x40
    4358:	4083      	lsls	r3, r0
    435a:	4313      	orrs	r3, r2
    435c:	602b      	str	r3, [r5, #0]
    435e:	3401      	adds	r4, #1
    4360:	7821      	ldrb	r1, [r4, #0]
    4362:	1c63      	adds	r3, r4, #1
    4364:	2206      	movs	r2, #6
    4366:	482f      	ldr	r0, [pc, #188]	; (4424 <_vfiprintf_r+0x22c>)
    4368:	9302      	str	r3, [sp, #8]
    436a:	7629      	strb	r1, [r5, #24]
    436c:	f000 fb94 	bl	4a98 <memchr>
    4370:	2800      	cmp	r0, #0
    4372:	d044      	beq.n	43fe <_vfiprintf_r+0x206>
    4374:	4b2c      	ldr	r3, [pc, #176]	; (4428 <_vfiprintf_r+0x230>)
    4376:	2b00      	cmp	r3, #0
    4378:	d12f      	bne.n	43da <_vfiprintf_r+0x1e2>
    437a:	6829      	ldr	r1, [r5, #0]
    437c:	9b05      	ldr	r3, [sp, #20]
    437e:	2207      	movs	r2, #7
    4380:	05c9      	lsls	r1, r1, #23
    4382:	d528      	bpl.n	43d6 <_vfiprintf_r+0x1de>
    4384:	189b      	adds	r3, r3, r2
    4386:	4393      	bics	r3, r2
    4388:	3308      	adds	r3, #8
    438a:	9305      	str	r3, [sp, #20]
    438c:	696b      	ldr	r3, [r5, #20]
    438e:	9a03      	ldr	r2, [sp, #12]
    4390:	189b      	adds	r3, r3, r2
    4392:	616b      	str	r3, [r5, #20]
    4394:	e74f      	b.n	4236 <_vfiprintf_r+0x3e>
    4396:	425b      	negs	r3, r3
    4398:	60eb      	str	r3, [r5, #12]
    439a:	2302      	movs	r3, #2
    439c:	430b      	orrs	r3, r1
    439e:	602b      	str	r3, [r5, #0]
    43a0:	e7bf      	b.n	4322 <_vfiprintf_r+0x12a>
    43a2:	434b      	muls	r3, r1
    43a4:	3401      	adds	r4, #1
    43a6:	189b      	adds	r3, r3, r2
    43a8:	2001      	movs	r0, #1
    43aa:	e789      	b.n	42c0 <_vfiprintf_r+0xc8>
    43ac:	2301      	movs	r3, #1
    43ae:	425b      	negs	r3, r3
    43b0:	e7c6      	b.n	4340 <_vfiprintf_r+0x148>
    43b2:	2300      	movs	r3, #0
    43b4:	0014      	movs	r4, r2
    43b6:	200a      	movs	r0, #10
    43b8:	001a      	movs	r2, r3
    43ba:	606b      	str	r3, [r5, #4]
    43bc:	7821      	ldrb	r1, [r4, #0]
    43be:	3930      	subs	r1, #48	; 0x30
    43c0:	2909      	cmp	r1, #9
    43c2:	d903      	bls.n	43cc <_vfiprintf_r+0x1d4>
    43c4:	2b00      	cmp	r3, #0
    43c6:	d0bc      	beq.n	4342 <_vfiprintf_r+0x14a>
    43c8:	9207      	str	r2, [sp, #28]
    43ca:	e7ba      	b.n	4342 <_vfiprintf_r+0x14a>
    43cc:	4342      	muls	r2, r0
    43ce:	3401      	adds	r4, #1
    43d0:	1852      	adds	r2, r2, r1
    43d2:	2301      	movs	r3, #1
    43d4:	e7f2      	b.n	43bc <_vfiprintf_r+0x1c4>
    43d6:	3307      	adds	r3, #7
    43d8:	e7d5      	b.n	4386 <_vfiprintf_r+0x18e>
    43da:	ab05      	add	r3, sp, #20
    43dc:	9300      	str	r3, [sp, #0]
    43de:	003a      	movs	r2, r7
    43e0:	4b12      	ldr	r3, [pc, #72]	; (442c <_vfiprintf_r+0x234>)
    43e2:	0029      	movs	r1, r5
    43e4:	0030      	movs	r0, r6
    43e6:	e000      	b.n	43ea <_vfiprintf_r+0x1f2>
    43e8:	bf00      	nop
    43ea:	9003      	str	r0, [sp, #12]
    43ec:	9b03      	ldr	r3, [sp, #12]
    43ee:	3301      	adds	r3, #1
    43f0:	d1cc      	bne.n	438c <_vfiprintf_r+0x194>
    43f2:	89bb      	ldrh	r3, [r7, #12]
    43f4:	065b      	lsls	r3, r3, #25
    43f6:	d500      	bpl.n	43fa <_vfiprintf_r+0x202>
    43f8:	e77b      	b.n	42f2 <_vfiprintf_r+0xfa>
    43fa:	980b      	ldr	r0, [sp, #44]	; 0x2c
    43fc:	e77b      	b.n	42f6 <_vfiprintf_r+0xfe>
    43fe:	ab05      	add	r3, sp, #20
    4400:	9300      	str	r3, [sp, #0]
    4402:	003a      	movs	r2, r7
    4404:	4b09      	ldr	r3, [pc, #36]	; (442c <_vfiprintf_r+0x234>)
    4406:	0029      	movs	r1, r5
    4408:	0030      	movs	r0, r6
    440a:	f000 f87f 	bl	450c <_printf_i>
    440e:	e7ec      	b.n	43ea <_vfiprintf_r+0x1f2>
    4410:	00006e14 	.word	0x00006e14
    4414:	00006e54 	.word	0x00006e54
    4418:	00006e34 	.word	0x00006e34
    441c:	00006df4 	.word	0x00006df4
    4420:	00006e5a 	.word	0x00006e5a
    4424:	00006e5e 	.word	0x00006e5e
    4428:	00000000 	.word	0x00000000
    442c:	000041d3 	.word	0x000041d3

00004430 <_printf_common>:
    4430:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4432:	0015      	movs	r5, r2
    4434:	9301      	str	r3, [sp, #4]
    4436:	688a      	ldr	r2, [r1, #8]
    4438:	690b      	ldr	r3, [r1, #16]
    443a:	9000      	str	r0, [sp, #0]
    443c:	000c      	movs	r4, r1
    443e:	4293      	cmp	r3, r2
    4440:	da00      	bge.n	4444 <_printf_common+0x14>
    4442:	0013      	movs	r3, r2
    4444:	0022      	movs	r2, r4
    4446:	602b      	str	r3, [r5, #0]
    4448:	3243      	adds	r2, #67	; 0x43
    444a:	7812      	ldrb	r2, [r2, #0]
    444c:	2a00      	cmp	r2, #0
    444e:	d001      	beq.n	4454 <_printf_common+0x24>
    4450:	3301      	adds	r3, #1
    4452:	602b      	str	r3, [r5, #0]
    4454:	6823      	ldr	r3, [r4, #0]
    4456:	069b      	lsls	r3, r3, #26
    4458:	d502      	bpl.n	4460 <_printf_common+0x30>
    445a:	682b      	ldr	r3, [r5, #0]
    445c:	3302      	adds	r3, #2
    445e:	602b      	str	r3, [r5, #0]
    4460:	2706      	movs	r7, #6
    4462:	6823      	ldr	r3, [r4, #0]
    4464:	401f      	ands	r7, r3
    4466:	d027      	beq.n	44b8 <_printf_common+0x88>
    4468:	0023      	movs	r3, r4
    446a:	3343      	adds	r3, #67	; 0x43
    446c:	781b      	ldrb	r3, [r3, #0]
    446e:	1e5a      	subs	r2, r3, #1
    4470:	4193      	sbcs	r3, r2
    4472:	6822      	ldr	r2, [r4, #0]
    4474:	0692      	lsls	r2, r2, #26
    4476:	d430      	bmi.n	44da <_printf_common+0xaa>
    4478:	0022      	movs	r2, r4
    447a:	9901      	ldr	r1, [sp, #4]
    447c:	3243      	adds	r2, #67	; 0x43
    447e:	9800      	ldr	r0, [sp, #0]
    4480:	9e08      	ldr	r6, [sp, #32]
    4482:	47b0      	blx	r6
    4484:	1c43      	adds	r3, r0, #1
    4486:	d025      	beq.n	44d4 <_printf_common+0xa4>
    4488:	2306      	movs	r3, #6
    448a:	6820      	ldr	r0, [r4, #0]
    448c:	682a      	ldr	r2, [r5, #0]
    448e:	68e1      	ldr	r1, [r4, #12]
    4490:	4003      	ands	r3, r0
    4492:	2500      	movs	r5, #0
    4494:	2b04      	cmp	r3, #4
    4496:	d103      	bne.n	44a0 <_printf_common+0x70>
    4498:	1a8d      	subs	r5, r1, r2
    449a:	43eb      	mvns	r3, r5
    449c:	17db      	asrs	r3, r3, #31
    449e:	401d      	ands	r5, r3
    44a0:	68a3      	ldr	r3, [r4, #8]
    44a2:	6922      	ldr	r2, [r4, #16]
    44a4:	4293      	cmp	r3, r2
    44a6:	dd01      	ble.n	44ac <_printf_common+0x7c>
    44a8:	1a9b      	subs	r3, r3, r2
    44aa:	18ed      	adds	r5, r5, r3
    44ac:	2700      	movs	r7, #0
    44ae:	42bd      	cmp	r5, r7
    44b0:	d120      	bne.n	44f4 <_printf_common+0xc4>
    44b2:	2000      	movs	r0, #0
    44b4:	e010      	b.n	44d8 <_printf_common+0xa8>
    44b6:	3701      	adds	r7, #1
    44b8:	68e3      	ldr	r3, [r4, #12]
    44ba:	682a      	ldr	r2, [r5, #0]
    44bc:	1a9b      	subs	r3, r3, r2
    44be:	429f      	cmp	r7, r3
    44c0:	dad2      	bge.n	4468 <_printf_common+0x38>
    44c2:	0022      	movs	r2, r4
    44c4:	2301      	movs	r3, #1
    44c6:	3219      	adds	r2, #25
    44c8:	9901      	ldr	r1, [sp, #4]
    44ca:	9800      	ldr	r0, [sp, #0]
    44cc:	9e08      	ldr	r6, [sp, #32]
    44ce:	47b0      	blx	r6
    44d0:	1c43      	adds	r3, r0, #1
    44d2:	d1f0      	bne.n	44b6 <_printf_common+0x86>
    44d4:	2001      	movs	r0, #1
    44d6:	4240      	negs	r0, r0
    44d8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    44da:	2030      	movs	r0, #48	; 0x30
    44dc:	18e1      	adds	r1, r4, r3
    44de:	3143      	adds	r1, #67	; 0x43
    44e0:	7008      	strb	r0, [r1, #0]
    44e2:	0021      	movs	r1, r4
    44e4:	1c5a      	adds	r2, r3, #1
    44e6:	3145      	adds	r1, #69	; 0x45
    44e8:	7809      	ldrb	r1, [r1, #0]
    44ea:	18a2      	adds	r2, r4, r2
    44ec:	3243      	adds	r2, #67	; 0x43
    44ee:	3302      	adds	r3, #2
    44f0:	7011      	strb	r1, [r2, #0]
    44f2:	e7c1      	b.n	4478 <_printf_common+0x48>
    44f4:	0022      	movs	r2, r4
    44f6:	2301      	movs	r3, #1
    44f8:	321a      	adds	r2, #26
    44fa:	9901      	ldr	r1, [sp, #4]
    44fc:	9800      	ldr	r0, [sp, #0]
    44fe:	9e08      	ldr	r6, [sp, #32]
    4500:	47b0      	blx	r6
    4502:	1c43      	adds	r3, r0, #1
    4504:	d0e6      	beq.n	44d4 <_printf_common+0xa4>
    4506:	3701      	adds	r7, #1
    4508:	e7d1      	b.n	44ae <_printf_common+0x7e>
	...

0000450c <_printf_i>:
    450c:	b5f0      	push	{r4, r5, r6, r7, lr}
    450e:	b08b      	sub	sp, #44	; 0x2c
    4510:	9206      	str	r2, [sp, #24]
    4512:	000a      	movs	r2, r1
    4514:	3243      	adds	r2, #67	; 0x43
    4516:	9307      	str	r3, [sp, #28]
    4518:	9005      	str	r0, [sp, #20]
    451a:	9204      	str	r2, [sp, #16]
    451c:	7e0a      	ldrb	r2, [r1, #24]
    451e:	000c      	movs	r4, r1
    4520:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4522:	2a6e      	cmp	r2, #110	; 0x6e
    4524:	d100      	bne.n	4528 <_printf_i+0x1c>
    4526:	e08f      	b.n	4648 <_printf_i+0x13c>
    4528:	d817      	bhi.n	455a <_printf_i+0x4e>
    452a:	2a63      	cmp	r2, #99	; 0x63
    452c:	d02c      	beq.n	4588 <_printf_i+0x7c>
    452e:	d808      	bhi.n	4542 <_printf_i+0x36>
    4530:	2a00      	cmp	r2, #0
    4532:	d100      	bne.n	4536 <_printf_i+0x2a>
    4534:	e099      	b.n	466a <_printf_i+0x15e>
    4536:	2a58      	cmp	r2, #88	; 0x58
    4538:	d054      	beq.n	45e4 <_printf_i+0xd8>
    453a:	0026      	movs	r6, r4
    453c:	3642      	adds	r6, #66	; 0x42
    453e:	7032      	strb	r2, [r6, #0]
    4540:	e029      	b.n	4596 <_printf_i+0x8a>
    4542:	2a64      	cmp	r2, #100	; 0x64
    4544:	d001      	beq.n	454a <_printf_i+0x3e>
    4546:	2a69      	cmp	r2, #105	; 0x69
    4548:	d1f7      	bne.n	453a <_printf_i+0x2e>
    454a:	6821      	ldr	r1, [r4, #0]
    454c:	681a      	ldr	r2, [r3, #0]
    454e:	0608      	lsls	r0, r1, #24
    4550:	d523      	bpl.n	459a <_printf_i+0x8e>
    4552:	1d11      	adds	r1, r2, #4
    4554:	6019      	str	r1, [r3, #0]
    4556:	6815      	ldr	r5, [r2, #0]
    4558:	e025      	b.n	45a6 <_printf_i+0x9a>
    455a:	2a73      	cmp	r2, #115	; 0x73
    455c:	d100      	bne.n	4560 <_printf_i+0x54>
    455e:	e088      	b.n	4672 <_printf_i+0x166>
    4560:	d808      	bhi.n	4574 <_printf_i+0x68>
    4562:	2a6f      	cmp	r2, #111	; 0x6f
    4564:	d029      	beq.n	45ba <_printf_i+0xae>
    4566:	2a70      	cmp	r2, #112	; 0x70
    4568:	d1e7      	bne.n	453a <_printf_i+0x2e>
    456a:	2220      	movs	r2, #32
    456c:	6809      	ldr	r1, [r1, #0]
    456e:	430a      	orrs	r2, r1
    4570:	6022      	str	r2, [r4, #0]
    4572:	e003      	b.n	457c <_printf_i+0x70>
    4574:	2a75      	cmp	r2, #117	; 0x75
    4576:	d020      	beq.n	45ba <_printf_i+0xae>
    4578:	2a78      	cmp	r2, #120	; 0x78
    457a:	d1de      	bne.n	453a <_printf_i+0x2e>
    457c:	0022      	movs	r2, r4
    457e:	2178      	movs	r1, #120	; 0x78
    4580:	3245      	adds	r2, #69	; 0x45
    4582:	7011      	strb	r1, [r2, #0]
    4584:	4a6c      	ldr	r2, [pc, #432]	; (4738 <_printf_i+0x22c>)
    4586:	e030      	b.n	45ea <_printf_i+0xde>
    4588:	000e      	movs	r6, r1
    458a:	681a      	ldr	r2, [r3, #0]
    458c:	3642      	adds	r6, #66	; 0x42
    458e:	1d11      	adds	r1, r2, #4
    4590:	6019      	str	r1, [r3, #0]
    4592:	6813      	ldr	r3, [r2, #0]
    4594:	7033      	strb	r3, [r6, #0]
    4596:	2301      	movs	r3, #1
    4598:	e079      	b.n	468e <_printf_i+0x182>
    459a:	0649      	lsls	r1, r1, #25
    459c:	d5d9      	bpl.n	4552 <_printf_i+0x46>
    459e:	1d11      	adds	r1, r2, #4
    45a0:	6019      	str	r1, [r3, #0]
    45a2:	2300      	movs	r3, #0
    45a4:	5ed5      	ldrsh	r5, [r2, r3]
    45a6:	2d00      	cmp	r5, #0
    45a8:	da03      	bge.n	45b2 <_printf_i+0xa6>
    45aa:	232d      	movs	r3, #45	; 0x2d
    45ac:	9a04      	ldr	r2, [sp, #16]
    45ae:	426d      	negs	r5, r5
    45b0:	7013      	strb	r3, [r2, #0]
    45b2:	4b62      	ldr	r3, [pc, #392]	; (473c <_printf_i+0x230>)
    45b4:	270a      	movs	r7, #10
    45b6:	9303      	str	r3, [sp, #12]
    45b8:	e02f      	b.n	461a <_printf_i+0x10e>
    45ba:	6820      	ldr	r0, [r4, #0]
    45bc:	6819      	ldr	r1, [r3, #0]
    45be:	0605      	lsls	r5, r0, #24
    45c0:	d503      	bpl.n	45ca <_printf_i+0xbe>
    45c2:	1d08      	adds	r0, r1, #4
    45c4:	6018      	str	r0, [r3, #0]
    45c6:	680d      	ldr	r5, [r1, #0]
    45c8:	e005      	b.n	45d6 <_printf_i+0xca>
    45ca:	0640      	lsls	r0, r0, #25
    45cc:	d5f9      	bpl.n	45c2 <_printf_i+0xb6>
    45ce:	680d      	ldr	r5, [r1, #0]
    45d0:	1d08      	adds	r0, r1, #4
    45d2:	6018      	str	r0, [r3, #0]
    45d4:	b2ad      	uxth	r5, r5
    45d6:	4b59      	ldr	r3, [pc, #356]	; (473c <_printf_i+0x230>)
    45d8:	2708      	movs	r7, #8
    45da:	9303      	str	r3, [sp, #12]
    45dc:	2a6f      	cmp	r2, #111	; 0x6f
    45de:	d018      	beq.n	4612 <_printf_i+0x106>
    45e0:	270a      	movs	r7, #10
    45e2:	e016      	b.n	4612 <_printf_i+0x106>
    45e4:	3145      	adds	r1, #69	; 0x45
    45e6:	700a      	strb	r2, [r1, #0]
    45e8:	4a54      	ldr	r2, [pc, #336]	; (473c <_printf_i+0x230>)
    45ea:	9203      	str	r2, [sp, #12]
    45ec:	681a      	ldr	r2, [r3, #0]
    45ee:	6821      	ldr	r1, [r4, #0]
    45f0:	1d10      	adds	r0, r2, #4
    45f2:	6018      	str	r0, [r3, #0]
    45f4:	6815      	ldr	r5, [r2, #0]
    45f6:	0608      	lsls	r0, r1, #24
    45f8:	d522      	bpl.n	4640 <_printf_i+0x134>
    45fa:	07cb      	lsls	r3, r1, #31
    45fc:	d502      	bpl.n	4604 <_printf_i+0xf8>
    45fe:	2320      	movs	r3, #32
    4600:	4319      	orrs	r1, r3
    4602:	6021      	str	r1, [r4, #0]
    4604:	2710      	movs	r7, #16
    4606:	2d00      	cmp	r5, #0
    4608:	d103      	bne.n	4612 <_printf_i+0x106>
    460a:	2320      	movs	r3, #32
    460c:	6822      	ldr	r2, [r4, #0]
    460e:	439a      	bics	r2, r3
    4610:	6022      	str	r2, [r4, #0]
    4612:	0023      	movs	r3, r4
    4614:	2200      	movs	r2, #0
    4616:	3343      	adds	r3, #67	; 0x43
    4618:	701a      	strb	r2, [r3, #0]
    461a:	6863      	ldr	r3, [r4, #4]
    461c:	60a3      	str	r3, [r4, #8]
    461e:	2b00      	cmp	r3, #0
    4620:	db5c      	blt.n	46dc <_printf_i+0x1d0>
    4622:	2204      	movs	r2, #4
    4624:	6821      	ldr	r1, [r4, #0]
    4626:	4391      	bics	r1, r2
    4628:	6021      	str	r1, [r4, #0]
    462a:	2d00      	cmp	r5, #0
    462c:	d158      	bne.n	46e0 <_printf_i+0x1d4>
    462e:	9e04      	ldr	r6, [sp, #16]
    4630:	2b00      	cmp	r3, #0
    4632:	d064      	beq.n	46fe <_printf_i+0x1f2>
    4634:	0026      	movs	r6, r4
    4636:	9b03      	ldr	r3, [sp, #12]
    4638:	3642      	adds	r6, #66	; 0x42
    463a:	781b      	ldrb	r3, [r3, #0]
    463c:	7033      	strb	r3, [r6, #0]
    463e:	e05e      	b.n	46fe <_printf_i+0x1f2>
    4640:	0648      	lsls	r0, r1, #25
    4642:	d5da      	bpl.n	45fa <_printf_i+0xee>
    4644:	b2ad      	uxth	r5, r5
    4646:	e7d8      	b.n	45fa <_printf_i+0xee>
    4648:	6809      	ldr	r1, [r1, #0]
    464a:	681a      	ldr	r2, [r3, #0]
    464c:	0608      	lsls	r0, r1, #24
    464e:	d505      	bpl.n	465c <_printf_i+0x150>
    4650:	1d11      	adds	r1, r2, #4
    4652:	6019      	str	r1, [r3, #0]
    4654:	6813      	ldr	r3, [r2, #0]
    4656:	6962      	ldr	r2, [r4, #20]
    4658:	601a      	str	r2, [r3, #0]
    465a:	e006      	b.n	466a <_printf_i+0x15e>
    465c:	0649      	lsls	r1, r1, #25
    465e:	d5f7      	bpl.n	4650 <_printf_i+0x144>
    4660:	1d11      	adds	r1, r2, #4
    4662:	6019      	str	r1, [r3, #0]
    4664:	6813      	ldr	r3, [r2, #0]
    4666:	8aa2      	ldrh	r2, [r4, #20]
    4668:	801a      	strh	r2, [r3, #0]
    466a:	2300      	movs	r3, #0
    466c:	9e04      	ldr	r6, [sp, #16]
    466e:	6123      	str	r3, [r4, #16]
    4670:	e054      	b.n	471c <_printf_i+0x210>
    4672:	681a      	ldr	r2, [r3, #0]
    4674:	1d11      	adds	r1, r2, #4
    4676:	6019      	str	r1, [r3, #0]
    4678:	6816      	ldr	r6, [r2, #0]
    467a:	2100      	movs	r1, #0
    467c:	6862      	ldr	r2, [r4, #4]
    467e:	0030      	movs	r0, r6
    4680:	f000 fa0a 	bl	4a98 <memchr>
    4684:	2800      	cmp	r0, #0
    4686:	d001      	beq.n	468c <_printf_i+0x180>
    4688:	1b80      	subs	r0, r0, r6
    468a:	6060      	str	r0, [r4, #4]
    468c:	6863      	ldr	r3, [r4, #4]
    468e:	6123      	str	r3, [r4, #16]
    4690:	2300      	movs	r3, #0
    4692:	9a04      	ldr	r2, [sp, #16]
    4694:	7013      	strb	r3, [r2, #0]
    4696:	e041      	b.n	471c <_printf_i+0x210>
    4698:	6923      	ldr	r3, [r4, #16]
    469a:	0032      	movs	r2, r6
    469c:	9906      	ldr	r1, [sp, #24]
    469e:	9805      	ldr	r0, [sp, #20]
    46a0:	9d07      	ldr	r5, [sp, #28]
    46a2:	47a8      	blx	r5
    46a4:	1c43      	adds	r3, r0, #1
    46a6:	d043      	beq.n	4730 <_printf_i+0x224>
    46a8:	6823      	ldr	r3, [r4, #0]
    46aa:	2500      	movs	r5, #0
    46ac:	079b      	lsls	r3, r3, #30
    46ae:	d40f      	bmi.n	46d0 <_printf_i+0x1c4>
    46b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    46b2:	68e0      	ldr	r0, [r4, #12]
    46b4:	4298      	cmp	r0, r3
    46b6:	da3d      	bge.n	4734 <_printf_i+0x228>
    46b8:	0018      	movs	r0, r3
    46ba:	e03b      	b.n	4734 <_printf_i+0x228>
    46bc:	0022      	movs	r2, r4
    46be:	2301      	movs	r3, #1
    46c0:	3219      	adds	r2, #25
    46c2:	9906      	ldr	r1, [sp, #24]
    46c4:	9805      	ldr	r0, [sp, #20]
    46c6:	9e07      	ldr	r6, [sp, #28]
    46c8:	47b0      	blx	r6
    46ca:	1c43      	adds	r3, r0, #1
    46cc:	d030      	beq.n	4730 <_printf_i+0x224>
    46ce:	3501      	adds	r5, #1
    46d0:	68e3      	ldr	r3, [r4, #12]
    46d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    46d4:	1a9b      	subs	r3, r3, r2
    46d6:	429d      	cmp	r5, r3
    46d8:	dbf0      	blt.n	46bc <_printf_i+0x1b0>
    46da:	e7e9      	b.n	46b0 <_printf_i+0x1a4>
    46dc:	2d00      	cmp	r5, #0
    46de:	d0a9      	beq.n	4634 <_printf_i+0x128>
    46e0:	9e04      	ldr	r6, [sp, #16]
    46e2:	0028      	movs	r0, r5
    46e4:	0039      	movs	r1, r7
    46e6:	f7fe fff9 	bl	36dc <__aeabi_uidivmod>
    46ea:	9b03      	ldr	r3, [sp, #12]
    46ec:	3e01      	subs	r6, #1
    46ee:	5c5b      	ldrb	r3, [r3, r1]
    46f0:	0028      	movs	r0, r5
    46f2:	7033      	strb	r3, [r6, #0]
    46f4:	0039      	movs	r1, r7
    46f6:	f7fe ff6b 	bl	35d0 <__udivsi3>
    46fa:	1e05      	subs	r5, r0, #0
    46fc:	d1f1      	bne.n	46e2 <_printf_i+0x1d6>
    46fe:	2f08      	cmp	r7, #8
    4700:	d109      	bne.n	4716 <_printf_i+0x20a>
    4702:	6823      	ldr	r3, [r4, #0]
    4704:	07db      	lsls	r3, r3, #31
    4706:	d506      	bpl.n	4716 <_printf_i+0x20a>
    4708:	6863      	ldr	r3, [r4, #4]
    470a:	6922      	ldr	r2, [r4, #16]
    470c:	4293      	cmp	r3, r2
    470e:	dc02      	bgt.n	4716 <_printf_i+0x20a>
    4710:	2330      	movs	r3, #48	; 0x30
    4712:	3e01      	subs	r6, #1
    4714:	7033      	strb	r3, [r6, #0]
    4716:	9b04      	ldr	r3, [sp, #16]
    4718:	1b9b      	subs	r3, r3, r6
    471a:	6123      	str	r3, [r4, #16]
    471c:	9b07      	ldr	r3, [sp, #28]
    471e:	aa09      	add	r2, sp, #36	; 0x24
    4720:	9300      	str	r3, [sp, #0]
    4722:	0021      	movs	r1, r4
    4724:	9b06      	ldr	r3, [sp, #24]
    4726:	9805      	ldr	r0, [sp, #20]
    4728:	f7ff fe82 	bl	4430 <_printf_common>
    472c:	1c43      	adds	r3, r0, #1
    472e:	d1b3      	bne.n	4698 <_printf_i+0x18c>
    4730:	2001      	movs	r0, #1
    4732:	4240      	negs	r0, r0
    4734:	b00b      	add	sp, #44	; 0x2c
    4736:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4738:	00006e76 	.word	0x00006e76
    473c:	00006e65 	.word	0x00006e65

00004740 <_putc_r>:
    4740:	b570      	push	{r4, r5, r6, lr}
    4742:	0006      	movs	r6, r0
    4744:	000d      	movs	r5, r1
    4746:	0014      	movs	r4, r2
    4748:	2800      	cmp	r0, #0
    474a:	d004      	beq.n	4756 <_putc_r+0x16>
    474c:	6983      	ldr	r3, [r0, #24]
    474e:	2b00      	cmp	r3, #0
    4750:	d101      	bne.n	4756 <_putc_r+0x16>
    4752:	f7ff fc25 	bl	3fa0 <__sinit>
    4756:	4b12      	ldr	r3, [pc, #72]	; (47a0 <_putc_r+0x60>)
    4758:	429c      	cmp	r4, r3
    475a:	d111      	bne.n	4780 <_putc_r+0x40>
    475c:	6874      	ldr	r4, [r6, #4]
    475e:	68a3      	ldr	r3, [r4, #8]
    4760:	3b01      	subs	r3, #1
    4762:	60a3      	str	r3, [r4, #8]
    4764:	2b00      	cmp	r3, #0
    4766:	da05      	bge.n	4774 <_putc_r+0x34>
    4768:	69a2      	ldr	r2, [r4, #24]
    476a:	4293      	cmp	r3, r2
    476c:	db12      	blt.n	4794 <_putc_r+0x54>
    476e:	b2eb      	uxtb	r3, r5
    4770:	2b0a      	cmp	r3, #10
    4772:	d00f      	beq.n	4794 <_putc_r+0x54>
    4774:	6823      	ldr	r3, [r4, #0]
    4776:	b2e8      	uxtb	r0, r5
    4778:	1c5a      	adds	r2, r3, #1
    477a:	6022      	str	r2, [r4, #0]
    477c:	701d      	strb	r5, [r3, #0]
    477e:	bd70      	pop	{r4, r5, r6, pc}
    4780:	4b08      	ldr	r3, [pc, #32]	; (47a4 <_putc_r+0x64>)
    4782:	429c      	cmp	r4, r3
    4784:	d101      	bne.n	478a <_putc_r+0x4a>
    4786:	68b4      	ldr	r4, [r6, #8]
    4788:	e7e9      	b.n	475e <_putc_r+0x1e>
    478a:	4b07      	ldr	r3, [pc, #28]	; (47a8 <_putc_r+0x68>)
    478c:	429c      	cmp	r4, r3
    478e:	d1e6      	bne.n	475e <_putc_r+0x1e>
    4790:	68f4      	ldr	r4, [r6, #12]
    4792:	e7e4      	b.n	475e <_putc_r+0x1e>
    4794:	0022      	movs	r2, r4
    4796:	0029      	movs	r1, r5
    4798:	0030      	movs	r0, r6
    479a:	f000 f853 	bl	4844 <__swbuf_r>
    479e:	e7ee      	b.n	477e <_putc_r+0x3e>
    47a0:	00006e14 	.word	0x00006e14
    47a4:	00006e34 	.word	0x00006e34
    47a8:	00006df4 	.word	0x00006df4

000047ac <__sread>:
    47ac:	b570      	push	{r4, r5, r6, lr}
    47ae:	000c      	movs	r4, r1
    47b0:	250e      	movs	r5, #14
    47b2:	5f49      	ldrsh	r1, [r1, r5]
    47b4:	f000 f97c 	bl	4ab0 <_read_r>
    47b8:	2800      	cmp	r0, #0
    47ba:	db03      	blt.n	47c4 <__sread+0x18>
    47bc:	6d63      	ldr	r3, [r4, #84]	; 0x54
    47be:	181b      	adds	r3, r3, r0
    47c0:	6563      	str	r3, [r4, #84]	; 0x54
    47c2:	bd70      	pop	{r4, r5, r6, pc}
    47c4:	89a3      	ldrh	r3, [r4, #12]
    47c6:	4a02      	ldr	r2, [pc, #8]	; (47d0 <__sread+0x24>)
    47c8:	4013      	ands	r3, r2
    47ca:	81a3      	strh	r3, [r4, #12]
    47cc:	e7f9      	b.n	47c2 <__sread+0x16>
    47ce:	46c0      	nop			; (mov r8, r8)
    47d0:	ffffefff 	.word	0xffffefff

000047d4 <__swrite>:
    47d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    47d6:	001f      	movs	r7, r3
    47d8:	898b      	ldrh	r3, [r1, #12]
    47da:	0005      	movs	r5, r0
    47dc:	000c      	movs	r4, r1
    47de:	0016      	movs	r6, r2
    47e0:	05db      	lsls	r3, r3, #23
    47e2:	d505      	bpl.n	47f0 <__swrite+0x1c>
    47e4:	230e      	movs	r3, #14
    47e6:	5ec9      	ldrsh	r1, [r1, r3]
    47e8:	2200      	movs	r2, #0
    47ea:	2302      	movs	r3, #2
    47ec:	f000 f940 	bl	4a70 <_lseek_r>
    47f0:	89a3      	ldrh	r3, [r4, #12]
    47f2:	4a05      	ldr	r2, [pc, #20]	; (4808 <__swrite+0x34>)
    47f4:	0028      	movs	r0, r5
    47f6:	4013      	ands	r3, r2
    47f8:	81a3      	strh	r3, [r4, #12]
    47fa:	0032      	movs	r2, r6
    47fc:	230e      	movs	r3, #14
    47fe:	5ee1      	ldrsh	r1, [r4, r3]
    4800:	003b      	movs	r3, r7
    4802:	f000 f875 	bl	48f0 <_write_r>
    4806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4808:	ffffefff 	.word	0xffffefff

0000480c <__sseek>:
    480c:	b570      	push	{r4, r5, r6, lr}
    480e:	000c      	movs	r4, r1
    4810:	250e      	movs	r5, #14
    4812:	5f49      	ldrsh	r1, [r1, r5]
    4814:	f000 f92c 	bl	4a70 <_lseek_r>
    4818:	89a3      	ldrh	r3, [r4, #12]
    481a:	1c42      	adds	r2, r0, #1
    481c:	d103      	bne.n	4826 <__sseek+0x1a>
    481e:	4a05      	ldr	r2, [pc, #20]	; (4834 <__sseek+0x28>)
    4820:	4013      	ands	r3, r2
    4822:	81a3      	strh	r3, [r4, #12]
    4824:	bd70      	pop	{r4, r5, r6, pc}
    4826:	2280      	movs	r2, #128	; 0x80
    4828:	0152      	lsls	r2, r2, #5
    482a:	4313      	orrs	r3, r2
    482c:	81a3      	strh	r3, [r4, #12]
    482e:	6560      	str	r0, [r4, #84]	; 0x54
    4830:	e7f8      	b.n	4824 <__sseek+0x18>
    4832:	46c0      	nop			; (mov r8, r8)
    4834:	ffffefff 	.word	0xffffefff

00004838 <__sclose>:
    4838:	b510      	push	{r4, lr}
    483a:	230e      	movs	r3, #14
    483c:	5ec9      	ldrsh	r1, [r1, r3]
    483e:	f000 f8e1 	bl	4a04 <_close_r>
    4842:	bd10      	pop	{r4, pc}

00004844 <__swbuf_r>:
    4844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4846:	0005      	movs	r5, r0
    4848:	000e      	movs	r6, r1
    484a:	0014      	movs	r4, r2
    484c:	2800      	cmp	r0, #0
    484e:	d004      	beq.n	485a <__swbuf_r+0x16>
    4850:	6983      	ldr	r3, [r0, #24]
    4852:	2b00      	cmp	r3, #0
    4854:	d101      	bne.n	485a <__swbuf_r+0x16>
    4856:	f7ff fba3 	bl	3fa0 <__sinit>
    485a:	4b22      	ldr	r3, [pc, #136]	; (48e4 <__swbuf_r+0xa0>)
    485c:	429c      	cmp	r4, r3
    485e:	d12d      	bne.n	48bc <__swbuf_r+0x78>
    4860:	686c      	ldr	r4, [r5, #4]
    4862:	69a3      	ldr	r3, [r4, #24]
    4864:	60a3      	str	r3, [r4, #8]
    4866:	89a3      	ldrh	r3, [r4, #12]
    4868:	071b      	lsls	r3, r3, #28
    486a:	d531      	bpl.n	48d0 <__swbuf_r+0x8c>
    486c:	6923      	ldr	r3, [r4, #16]
    486e:	2b00      	cmp	r3, #0
    4870:	d02e      	beq.n	48d0 <__swbuf_r+0x8c>
    4872:	6823      	ldr	r3, [r4, #0]
    4874:	6922      	ldr	r2, [r4, #16]
    4876:	b2f7      	uxtb	r7, r6
    4878:	1a98      	subs	r0, r3, r2
    487a:	6963      	ldr	r3, [r4, #20]
    487c:	b2f6      	uxtb	r6, r6
    487e:	4298      	cmp	r0, r3
    4880:	db05      	blt.n	488e <__swbuf_r+0x4a>
    4882:	0021      	movs	r1, r4
    4884:	0028      	movs	r0, r5
    4886:	f7ff fb1d 	bl	3ec4 <_fflush_r>
    488a:	2800      	cmp	r0, #0
    488c:	d126      	bne.n	48dc <__swbuf_r+0x98>
    488e:	68a3      	ldr	r3, [r4, #8]
    4890:	3001      	adds	r0, #1
    4892:	3b01      	subs	r3, #1
    4894:	60a3      	str	r3, [r4, #8]
    4896:	6823      	ldr	r3, [r4, #0]
    4898:	1c5a      	adds	r2, r3, #1
    489a:	6022      	str	r2, [r4, #0]
    489c:	701f      	strb	r7, [r3, #0]
    489e:	6963      	ldr	r3, [r4, #20]
    48a0:	4298      	cmp	r0, r3
    48a2:	d004      	beq.n	48ae <__swbuf_r+0x6a>
    48a4:	89a3      	ldrh	r3, [r4, #12]
    48a6:	07db      	lsls	r3, r3, #31
    48a8:	d51a      	bpl.n	48e0 <__swbuf_r+0x9c>
    48aa:	2e0a      	cmp	r6, #10
    48ac:	d118      	bne.n	48e0 <__swbuf_r+0x9c>
    48ae:	0021      	movs	r1, r4
    48b0:	0028      	movs	r0, r5
    48b2:	f7ff fb07 	bl	3ec4 <_fflush_r>
    48b6:	2800      	cmp	r0, #0
    48b8:	d012      	beq.n	48e0 <__swbuf_r+0x9c>
    48ba:	e00f      	b.n	48dc <__swbuf_r+0x98>
    48bc:	4b0a      	ldr	r3, [pc, #40]	; (48e8 <__swbuf_r+0xa4>)
    48be:	429c      	cmp	r4, r3
    48c0:	d101      	bne.n	48c6 <__swbuf_r+0x82>
    48c2:	68ac      	ldr	r4, [r5, #8]
    48c4:	e7cd      	b.n	4862 <__swbuf_r+0x1e>
    48c6:	4b09      	ldr	r3, [pc, #36]	; (48ec <__swbuf_r+0xa8>)
    48c8:	429c      	cmp	r4, r3
    48ca:	d1ca      	bne.n	4862 <__swbuf_r+0x1e>
    48cc:	68ec      	ldr	r4, [r5, #12]
    48ce:	e7c8      	b.n	4862 <__swbuf_r+0x1e>
    48d0:	0021      	movs	r1, r4
    48d2:	0028      	movs	r0, r5
    48d4:	f000 f820 	bl	4918 <__swsetup_r>
    48d8:	2800      	cmp	r0, #0
    48da:	d0ca      	beq.n	4872 <__swbuf_r+0x2e>
    48dc:	2601      	movs	r6, #1
    48de:	4276      	negs	r6, r6
    48e0:	0030      	movs	r0, r6
    48e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    48e4:	00006e14 	.word	0x00006e14
    48e8:	00006e34 	.word	0x00006e34
    48ec:	00006df4 	.word	0x00006df4

000048f0 <_write_r>:
    48f0:	b570      	push	{r4, r5, r6, lr}
    48f2:	0005      	movs	r5, r0
    48f4:	0008      	movs	r0, r1
    48f6:	0011      	movs	r1, r2
    48f8:	2200      	movs	r2, #0
    48fa:	4c06      	ldr	r4, [pc, #24]	; (4914 <_write_r+0x24>)
    48fc:	6022      	str	r2, [r4, #0]
    48fe:	001a      	movs	r2, r3
    4900:	f7fd fc6c 	bl	21dc <_write>
    4904:	1c43      	adds	r3, r0, #1
    4906:	d103      	bne.n	4910 <_write_r+0x20>
    4908:	6823      	ldr	r3, [r4, #0]
    490a:	2b00      	cmp	r3, #0
    490c:	d000      	beq.n	4910 <_write_r+0x20>
    490e:	602b      	str	r3, [r5, #0]
    4910:	bd70      	pop	{r4, r5, r6, pc}
    4912:	46c0      	nop			; (mov r8, r8)
    4914:	20000ad0 	.word	0x20000ad0

00004918 <__swsetup_r>:
    4918:	4b36      	ldr	r3, [pc, #216]	; (49f4 <__swsetup_r+0xdc>)
    491a:	b570      	push	{r4, r5, r6, lr}
    491c:	681d      	ldr	r5, [r3, #0]
    491e:	0006      	movs	r6, r0
    4920:	000c      	movs	r4, r1
    4922:	2d00      	cmp	r5, #0
    4924:	d005      	beq.n	4932 <__swsetup_r+0x1a>
    4926:	69ab      	ldr	r3, [r5, #24]
    4928:	2b00      	cmp	r3, #0
    492a:	d102      	bne.n	4932 <__swsetup_r+0x1a>
    492c:	0028      	movs	r0, r5
    492e:	f7ff fb37 	bl	3fa0 <__sinit>
    4932:	4b31      	ldr	r3, [pc, #196]	; (49f8 <__swsetup_r+0xe0>)
    4934:	429c      	cmp	r4, r3
    4936:	d10f      	bne.n	4958 <__swsetup_r+0x40>
    4938:	686c      	ldr	r4, [r5, #4]
    493a:	230c      	movs	r3, #12
    493c:	5ee2      	ldrsh	r2, [r4, r3]
    493e:	b293      	uxth	r3, r2
    4940:	0719      	lsls	r1, r3, #28
    4942:	d42d      	bmi.n	49a0 <__swsetup_r+0x88>
    4944:	06d9      	lsls	r1, r3, #27
    4946:	d411      	bmi.n	496c <__swsetup_r+0x54>
    4948:	2309      	movs	r3, #9
    494a:	2001      	movs	r0, #1
    494c:	6033      	str	r3, [r6, #0]
    494e:	3337      	adds	r3, #55	; 0x37
    4950:	4313      	orrs	r3, r2
    4952:	81a3      	strh	r3, [r4, #12]
    4954:	4240      	negs	r0, r0
    4956:	bd70      	pop	{r4, r5, r6, pc}
    4958:	4b28      	ldr	r3, [pc, #160]	; (49fc <__swsetup_r+0xe4>)
    495a:	429c      	cmp	r4, r3
    495c:	d101      	bne.n	4962 <__swsetup_r+0x4a>
    495e:	68ac      	ldr	r4, [r5, #8]
    4960:	e7eb      	b.n	493a <__swsetup_r+0x22>
    4962:	4b27      	ldr	r3, [pc, #156]	; (4a00 <__swsetup_r+0xe8>)
    4964:	429c      	cmp	r4, r3
    4966:	d1e8      	bne.n	493a <__swsetup_r+0x22>
    4968:	68ec      	ldr	r4, [r5, #12]
    496a:	e7e6      	b.n	493a <__swsetup_r+0x22>
    496c:	075b      	lsls	r3, r3, #29
    496e:	d513      	bpl.n	4998 <__swsetup_r+0x80>
    4970:	6b61      	ldr	r1, [r4, #52]	; 0x34
    4972:	2900      	cmp	r1, #0
    4974:	d008      	beq.n	4988 <__swsetup_r+0x70>
    4976:	0023      	movs	r3, r4
    4978:	3344      	adds	r3, #68	; 0x44
    497a:	4299      	cmp	r1, r3
    497c:	d002      	beq.n	4984 <__swsetup_r+0x6c>
    497e:	0030      	movs	r0, r6
    4980:	f7ff f806 	bl	3990 <_free_r>
    4984:	2300      	movs	r3, #0
    4986:	6363      	str	r3, [r4, #52]	; 0x34
    4988:	2224      	movs	r2, #36	; 0x24
    498a:	89a3      	ldrh	r3, [r4, #12]
    498c:	4393      	bics	r3, r2
    498e:	81a3      	strh	r3, [r4, #12]
    4990:	2300      	movs	r3, #0
    4992:	6063      	str	r3, [r4, #4]
    4994:	6923      	ldr	r3, [r4, #16]
    4996:	6023      	str	r3, [r4, #0]
    4998:	2308      	movs	r3, #8
    499a:	89a2      	ldrh	r2, [r4, #12]
    499c:	4313      	orrs	r3, r2
    499e:	81a3      	strh	r3, [r4, #12]
    49a0:	6923      	ldr	r3, [r4, #16]
    49a2:	2b00      	cmp	r3, #0
    49a4:	d10b      	bne.n	49be <__swsetup_r+0xa6>
    49a6:	21a0      	movs	r1, #160	; 0xa0
    49a8:	2280      	movs	r2, #128	; 0x80
    49aa:	89a3      	ldrh	r3, [r4, #12]
    49ac:	0089      	lsls	r1, r1, #2
    49ae:	0092      	lsls	r2, r2, #2
    49b0:	400b      	ands	r3, r1
    49b2:	4293      	cmp	r3, r2
    49b4:	d003      	beq.n	49be <__swsetup_r+0xa6>
    49b6:	0021      	movs	r1, r4
    49b8:	0030      	movs	r0, r6
    49ba:	f7ff fbaf 	bl	411c <__smakebuf_r>
    49be:	2301      	movs	r3, #1
    49c0:	89a2      	ldrh	r2, [r4, #12]
    49c2:	4013      	ands	r3, r2
    49c4:	d011      	beq.n	49ea <__swsetup_r+0xd2>
    49c6:	2300      	movs	r3, #0
    49c8:	60a3      	str	r3, [r4, #8]
    49ca:	6963      	ldr	r3, [r4, #20]
    49cc:	425b      	negs	r3, r3
    49ce:	61a3      	str	r3, [r4, #24]
    49d0:	2000      	movs	r0, #0
    49d2:	6923      	ldr	r3, [r4, #16]
    49d4:	4283      	cmp	r3, r0
    49d6:	d1be      	bne.n	4956 <__swsetup_r+0x3e>
    49d8:	230c      	movs	r3, #12
    49da:	5ee2      	ldrsh	r2, [r4, r3]
    49dc:	0613      	lsls	r3, r2, #24
    49de:	d5ba      	bpl.n	4956 <__swsetup_r+0x3e>
    49e0:	2340      	movs	r3, #64	; 0x40
    49e2:	4313      	orrs	r3, r2
    49e4:	81a3      	strh	r3, [r4, #12]
    49e6:	3801      	subs	r0, #1
    49e8:	e7b5      	b.n	4956 <__swsetup_r+0x3e>
    49ea:	0792      	lsls	r2, r2, #30
    49ec:	d400      	bmi.n	49f0 <__swsetup_r+0xd8>
    49ee:	6963      	ldr	r3, [r4, #20]
    49f0:	60a3      	str	r3, [r4, #8]
    49f2:	e7ed      	b.n	49d0 <__swsetup_r+0xb8>
    49f4:	20000164 	.word	0x20000164
    49f8:	00006e14 	.word	0x00006e14
    49fc:	00006e34 	.word	0x00006e34
    4a00:	00006df4 	.word	0x00006df4

00004a04 <_close_r>:
    4a04:	2300      	movs	r3, #0
    4a06:	b570      	push	{r4, r5, r6, lr}
    4a08:	4c06      	ldr	r4, [pc, #24]	; (4a24 <_close_r+0x20>)
    4a0a:	0005      	movs	r5, r0
    4a0c:	0008      	movs	r0, r1
    4a0e:	6023      	str	r3, [r4, #0]
    4a10:	f7fd fc1e 	bl	2250 <_close>
    4a14:	1c43      	adds	r3, r0, #1
    4a16:	d103      	bne.n	4a20 <_close_r+0x1c>
    4a18:	6823      	ldr	r3, [r4, #0]
    4a1a:	2b00      	cmp	r3, #0
    4a1c:	d000      	beq.n	4a20 <_close_r+0x1c>
    4a1e:	602b      	str	r3, [r5, #0]
    4a20:	bd70      	pop	{r4, r5, r6, pc}
    4a22:	46c0      	nop			; (mov r8, r8)
    4a24:	20000ad0 	.word	0x20000ad0

00004a28 <_fstat_r>:
    4a28:	2300      	movs	r3, #0
    4a2a:	b570      	push	{r4, r5, r6, lr}
    4a2c:	4c06      	ldr	r4, [pc, #24]	; (4a48 <_fstat_r+0x20>)
    4a2e:	0005      	movs	r5, r0
    4a30:	0008      	movs	r0, r1
    4a32:	0011      	movs	r1, r2
    4a34:	6023      	str	r3, [r4, #0]
    4a36:	f7fd fc0e 	bl	2256 <_fstat>
    4a3a:	1c43      	adds	r3, r0, #1
    4a3c:	d103      	bne.n	4a46 <_fstat_r+0x1e>
    4a3e:	6823      	ldr	r3, [r4, #0]
    4a40:	2b00      	cmp	r3, #0
    4a42:	d000      	beq.n	4a46 <_fstat_r+0x1e>
    4a44:	602b      	str	r3, [r5, #0]
    4a46:	bd70      	pop	{r4, r5, r6, pc}
    4a48:	20000ad0 	.word	0x20000ad0

00004a4c <_isatty_r>:
    4a4c:	2300      	movs	r3, #0
    4a4e:	b570      	push	{r4, r5, r6, lr}
    4a50:	4c06      	ldr	r4, [pc, #24]	; (4a6c <_isatty_r+0x20>)
    4a52:	0005      	movs	r5, r0
    4a54:	0008      	movs	r0, r1
    4a56:	6023      	str	r3, [r4, #0]
    4a58:	f7fd fc02 	bl	2260 <_isatty>
    4a5c:	1c43      	adds	r3, r0, #1
    4a5e:	d103      	bne.n	4a68 <_isatty_r+0x1c>
    4a60:	6823      	ldr	r3, [r4, #0]
    4a62:	2b00      	cmp	r3, #0
    4a64:	d000      	beq.n	4a68 <_isatty_r+0x1c>
    4a66:	602b      	str	r3, [r5, #0]
    4a68:	bd70      	pop	{r4, r5, r6, pc}
    4a6a:	46c0      	nop			; (mov r8, r8)
    4a6c:	20000ad0 	.word	0x20000ad0

00004a70 <_lseek_r>:
    4a70:	b570      	push	{r4, r5, r6, lr}
    4a72:	0005      	movs	r5, r0
    4a74:	0008      	movs	r0, r1
    4a76:	0011      	movs	r1, r2
    4a78:	2200      	movs	r2, #0
    4a7a:	4c06      	ldr	r4, [pc, #24]	; (4a94 <_lseek_r+0x24>)
    4a7c:	6022      	str	r2, [r4, #0]
    4a7e:	001a      	movs	r2, r3
    4a80:	f7fd fbf0 	bl	2264 <_lseek>
    4a84:	1c43      	adds	r3, r0, #1
    4a86:	d103      	bne.n	4a90 <_lseek_r+0x20>
    4a88:	6823      	ldr	r3, [r4, #0]
    4a8a:	2b00      	cmp	r3, #0
    4a8c:	d000      	beq.n	4a90 <_lseek_r+0x20>
    4a8e:	602b      	str	r3, [r5, #0]
    4a90:	bd70      	pop	{r4, r5, r6, pc}
    4a92:	46c0      	nop			; (mov r8, r8)
    4a94:	20000ad0 	.word	0x20000ad0

00004a98 <memchr>:
    4a98:	b2c9      	uxtb	r1, r1
    4a9a:	1882      	adds	r2, r0, r2
    4a9c:	4290      	cmp	r0, r2
    4a9e:	d101      	bne.n	4aa4 <memchr+0xc>
    4aa0:	2000      	movs	r0, #0
    4aa2:	4770      	bx	lr
    4aa4:	7803      	ldrb	r3, [r0, #0]
    4aa6:	428b      	cmp	r3, r1
    4aa8:	d0fb      	beq.n	4aa2 <memchr+0xa>
    4aaa:	3001      	adds	r0, #1
    4aac:	e7f6      	b.n	4a9c <memchr+0x4>
	...

00004ab0 <_read_r>:
    4ab0:	b570      	push	{r4, r5, r6, lr}
    4ab2:	0005      	movs	r5, r0
    4ab4:	0008      	movs	r0, r1
    4ab6:	0011      	movs	r1, r2
    4ab8:	2200      	movs	r2, #0
    4aba:	4c06      	ldr	r4, [pc, #24]	; (4ad4 <_read_r+0x24>)
    4abc:	6022      	str	r2, [r4, #0]
    4abe:	001a      	movs	r2, r3
    4ac0:	f7fd fb6a 	bl	2198 <_read>
    4ac4:	1c43      	adds	r3, r0, #1
    4ac6:	d103      	bne.n	4ad0 <_read_r+0x20>
    4ac8:	6823      	ldr	r3, [r4, #0]
    4aca:	2b00      	cmp	r3, #0
    4acc:	d000      	beq.n	4ad0 <_read_r+0x20>
    4ace:	602b      	str	r3, [r5, #0]
    4ad0:	bd70      	pop	{r4, r5, r6, pc}
    4ad2:	46c0      	nop			; (mov r8, r8)
    4ad4:	20000ad0 	.word	0x20000ad0
    4ad8:	00000008 	.word	0x00000008
    4adc:	00000008 	.word	0x00000008
    4ae0:	00000008 	.word	0x00000008
    4ae4:	00000008 	.word	0x00000008
    4ae8:	00000008 	.word	0x00000008
    4aec:	00000008 	.word	0x00000008
    4af0:	00000008 	.word	0x00000008
    4af4:	00000008 	.word	0x00000008
    4af8:	00000010 	.word	0x00000010
    4afc:	00000010 	.word	0x00000010
    4b00:	00000010 	.word	0x00000010
    4b04:	00000010 	.word	0x00000010
    4b08:	00000010 	.word	0x00000010
    4b0c:	00000010 	.word	0x00000010
    4b10:	00000010 	.word	0x00000010
    4b14:	00000010 	.word	0x00000010
    4b18:	00000018 	.word	0x00000018
    4b1c:	00000018 	.word	0x00000018
    4b20:	00000018 	.word	0x00000018
    4b24:	00000018 	.word	0x00000018
    4b28:	00000018 	.word	0x00000018
    4b2c:	00000018 	.word	0x00000018
    4b30:	00000018 	.word	0x00000018
    4b34:	00000018 	.word	0x00000018
    4b38:	00000020 	.word	0x00000020
    4b3c:	00000020 	.word	0x00000020
    4b40:	00000020 	.word	0x00000020
    4b44:	00000020 	.word	0x00000020
    4b48:	00000020 	.word	0x00000020
    4b4c:	00000020 	.word	0x00000020
    4b50:	00000020 	.word	0x00000020
    4b54:	00000020 	.word	0x00000020
    4b58:	00000028 	.word	0x00000028
    4b5c:	00000028 	.word	0x00000028
    4b60:	00000028 	.word	0x00000028
    4b64:	00000028 	.word	0x00000028
    4b68:	00000028 	.word	0x00000028
    4b6c:	00000028 	.word	0x00000028
    4b70:	00000028 	.word	0x00000028
    4b74:	00000028 	.word	0x00000028
    4b78:	00000030 	.word	0x00000030
    4b7c:	00000030 	.word	0x00000030
    4b80:	00000030 	.word	0x00000030
    4b84:	00000030 	.word	0x00000030
    4b88:	00000030 	.word	0x00000030
    4b8c:	00000030 	.word	0x00000030
    4b90:	00000030 	.word	0x00000030
    4b94:	00000030 	.word	0x00000030
    4b98:	00000038 	.word	0x00000038
    4b9c:	00000038 	.word	0x00000038
    4ba0:	00000038 	.word	0x00000038
    4ba4:	00000038 	.word	0x00000038
    4ba8:	00000038 	.word	0x00000038
    4bac:	00000038 	.word	0x00000038
    4bb0:	00000038 	.word	0x00000038
    4bb4:	00000038 	.word	0x00000038
    4bb8:	00000040 	.word	0x00000040
    4bbc:	00000040 	.word	0x00000040
    4bc0:	00000040 	.word	0x00000040
    4bc4:	00000040 	.word	0x00000040
    4bc8:	00000040 	.word	0x00000040
    4bcc:	00000040 	.word	0x00000040
    4bd0:	00000040 	.word	0x00000040
    4bd4:	00000040 	.word	0x00000040
    4bd8:	00000048 	.word	0x00000048
    4bdc:	00000048 	.word	0x00000048
    4be0:	00000048 	.word	0x00000048
    4be4:	00000048 	.word	0x00000048
    4be8:	00000048 	.word	0x00000048
    4bec:	00000048 	.word	0x00000048
    4bf0:	00000048 	.word	0x00000048
    4bf4:	00000048 	.word	0x00000048
    4bf8:	0000004f 	.word	0x0000004f
    4bfc:	0000004f 	.word	0x0000004f
    4c00:	0000004f 	.word	0x0000004f
    4c04:	0000004f 	.word	0x0000004f
    4c08:	0000004f 	.word	0x0000004f
    4c0c:	0000004f 	.word	0x0000004f
    4c10:	0000004f 	.word	0x0000004f
    4c14:	0000004f 	.word	0x0000004f
    4c18:	000a000a 	.word	0x000a000a
    4c1c:	00140014 	.word	0x00140014
    4c20:	00000014 	.word	0x00000014
    4c24:	000a017c 	.word	0x000a017c
    4c28:	000a017c 	.word	0x000a017c
    4c2c:	00140186 	.word	0x00140186
    4c30:	00140000 	.word	0x00140000
    4c34:	0122000a 	.word	0x0122000a
    4c38:	00140186 	.word	0x00140186
    4c3c:	01220190 	.word	0x01220190
    4c40:	0122000a 	.word	0x0122000a
    4c44:	012c0014 	.word	0x012c0014
    4c48:	0122017c 	.word	0x0122017c
    4c4c:	012c0186 	.word	0x012c0186
    4c50:	012c0014 	.word	0x012c0014
    4c54:	0136017c 	.word	0x0136017c
    4c58:	001e0000 	.word	0x001e0000
    4c5c:	00280032 	.word	0x00280032
    4c60:	00320000 	.word	0x00320000
    4c64:	003c0032 	.word	0x003c0032
    4c68:	001e0050 	.word	0x001e0050
    4c6c:	00280118 	.word	0x00280118
    4c70:	00280046 	.word	0x00280046
    4c74:	00be0050 	.word	0x00be0050
    4c78:	00be0050 	.word	0x00be0050
    4c7c:	00c80118 	.word	0x00c80118
    4c80:	00280118 	.word	0x00280118
    4c84:	00be0122 	.word	0x00be0122
    4c88:	00460000 	.word	0x00460000
    4c8c:	00500032 	.word	0x00500032
    4c90:	005a0000 	.word	0x005a0000
    4c94:	00640032 	.word	0x00640032
    4c98:	006e0000 	.word	0x006e0000
    4c9c:	00780032 	.word	0x00780032
    4ca0:	00820000 	.word	0x00820000
    4ca4:	008c0032 	.word	0x008c0032
    4ca8:	00960000 	.word	0x00960000
    4cac:	00a00032 	.word	0x00a00032
    4cb0:	00aa0000 	.word	0x00aa0000
    4cb4:	00b40032 	.word	0x00b40032
    4cb8:	00be0000 	.word	0x00be0000
    4cbc:	00c80032 	.word	0x00c80032
    4cc0:	00c8012c 	.word	0x00c8012c
    4cc4:	00d20172 	.word	0x00d20172
    4cc8:	00dc001e 	.word	0x00dc001e
    4ccc:	00e60172 	.word	0x00e60172
    4cd0:	00f0001e 	.word	0x00f0001e
    4cd4:	00fa0172 	.word	0x00fa0172
    4cd8:	0104001e 	.word	0x0104001e
    4cdc:	010e0172 	.word	0x010e0172
    4ce0:	0118005a 	.word	0x0118005a
    4ce4:	0122012c 	.word	0x0122012c
    4ce8:	82be50b4 	.word	0x82be50b4
    4cec:	8cbe82aa 	.word	0x8cbe82aa
    4cf0:	64963c8c 	.word	0x64963c8c
    4cf4:	64dc3cd2 	.word	0x64dc3cd2
    4cf8:	a08c9682 	.word	0xa08c9682
    4cfc:	aadca08c 	.word	0xaadca08c
    4d00:	a0e696dc 	.word	0xa0e696dc
    4d04:	50f03c78 	.word	0x50f03c78
    4d08:	5a78466e 	.word	0x5a78466e
    4d0c:	aaaa3c96 	.word	0xaaaa3c96
    4d10:	a0dc3cc8 	.word	0xa0dc3cc8
    4d14:	aae6a0d2 	.word	0xaae6a0d2
    4d18:	6e617254 	.word	0x6e617254
    4d1c:	69722073 	.word	0x69722073
    4d20:	73746867 	.word	0x73746867
    4d24:	65726120 	.word	0x65726120
    4d28:	6d756820 	.word	0x6d756820
    4d2c:	72206e61 	.word	0x72206e61
    4d30:	74686769 	.word	0x74686769
    4d34:	00000073 	.word	0x00000073
    4d38:	355e3331 	.word	0x355e3331
    4d3c:	31202b20 	.word	0x31202b20
    4d40:	20355e36 	.word	0x20355e36
    4d44:	3731203d 	.word	0x3731203d
    4d48:	0000355e 	.word	0x0000355e
    4d4c:	69746552 	.word	0x69746552
    4d50:	616c7563 	.word	0x616c7563
    4d54:	676e6974 	.word	0x676e6974
    4d58:	6c705320 	.word	0x6c705320
    4d5c:	73656e69 	.word	0x73656e69
    4d60:	00000000 	.word	0x00000000
    4d64:	6c6f6976 	.word	0x6c6f6976
    4d68:	65636e65 	.word	0x65636e65
    4d6c:	726f772e 	.word	0x726f772e
    4d70:	0000736b 	.word	0x0000736b
    4d74:	73626154 	.word	0x73626154
    4d78:	00000021 	.word	0x00000021
    4d7c:	6c6c694b 	.word	0x6c6c694b
    4d80:	6c694220 	.word	0x6c694220
    4d84:	6e6f696c 	.word	0x6e6f696c
    4d88:	65726961 	.word	0x65726961
    4d8c:	61282073 	.word	0x61282073
    4d90:	5420646e 	.word	0x5420646e
    4d94:	6c6c6972 	.word	0x6c6c6972
    4d98:	616e6f69 	.word	0x616e6f69
    4d9c:	29657269 	.word	0x29657269
    4da0:	00000000 	.word	0x00000000
    4da4:	65746e49 	.word	0x65746e49
    4da8:	74736572 	.word	0x74736572
    4dac:	206e6920 	.word	0x206e6920
    4db0:	68636574 	.word	0x68636574
    4db4:	6f6c6f6e 	.word	0x6f6c6f6e
    4db8:	69207967 	.word	0x69207967
    4dbc:	6f6e2073 	.word	0x6f6e2073
    4dc0:	20612074 	.word	0x20612074
    4dc4:	73726570 	.word	0x73726570
    4dc8:	6c616e6f 	.word	0x6c616e6f
    4dcc:	00797469 	.word	0x00797469
    4dd0:	50203031 	.word	0x50203031
    4dd4:	544e4952 	.word	0x544e4952
    4dd8:	52484320 	.word	0x52484320
    4ddc:	30322824 	.word	0x30322824
    4de0:	2b352e35 	.word	0x2b352e35
    4de4:	28444e52 	.word	0x28444e52
    4de8:	3b292931 	.word	0x3b292931
    4dec:	47203a20 	.word	0x47203a20
    4df0:	204f544f 	.word	0x204f544f
    4df4:	00003031 	.word	0x00003031
    4df8:	67206f4e 	.word	0x67206f4e
    4dfc:	2e73646f 	.word	0x2e73646f
    4e00:	206f4e20 	.word	0x206f4e20
    4e04:	7473616d 	.word	0x7473616d
    4e08:	2e737265 	.word	0x2e737265
    4e0c:	206f4e20 	.word	0x206f4e20
    4e10:	65747865 	.word	0x65747865
    4e14:	6c616e72 	.word	0x6c616e72
    4e18:	62696c20 	.word	0x62696c20
    4e1c:	69726172 	.word	0x69726172
    4e20:	002e7365 	.word	0x002e7365
    4e24:	6c6c694b 	.word	0x6c6c694b
    4e28:	7a614e20 	.word	0x7a614e20
    4e2c:	00007369 	.word	0x00007369
    4e30:	6e616954 	.word	0x6e616954
    4e34:	656d6e61 	.word	0x656d6e61
    4e38:	7153206e 	.word	0x7153206e
    4e3c:	65726175 	.word	0x65726175
    4e40:	38393120 	.word	0x38393120
    4e44:	00000039 	.word	0x00000039
    4e48:	72656d41 	.word	0x72656d41
    4e4c:	20616369 	.word	0x20616369
    4e50:	20736177 	.word	0x20736177
    4e54:	6e756f66 	.word	0x6e756f66
    4e58:	20646564 	.word	0x20646564
    4e5c:	73206e6f 	.word	0x73206e6f
    4e60:	6576616c 	.word	0x6576616c
    4e64:	00007972 	.word	0x00007972
    4e68:	72656854 	.word	0x72656854
    4e6c:	73692065 	.word	0x73692065
    4e70:	6c6e6f20 	.word	0x6c6e6f20
    4e74:	61632079 	.word	0x61632079
    4e78:	61746970 	.word	0x61746970
    4e7c:	6e61206c 	.word	0x6e61206c
    4e80:	616c2064 	.word	0x616c2064
    4e84:	00726f62 	.word	0x00726f62
    4e88:	6f636e45 	.word	0x6f636e45
    4e8c:	67617275 	.word	0x67617275
    4e90:	59532065 	.word	0x59532065
    4e94:	54454d4d 	.word	0x54454d4d
    4e98:	20434952 	.word	0x20434952
    4e9c:	73616c63 	.word	0x73616c63
    4ea0:	61772073 	.word	0x61772073
    4ea4:	72616672 	.word	0x72616672
    4ea8:	00000065 	.word	0x00000065
    4eac:	52554324 	.word	0x52554324
    4eb0:	544e4552 	.word	0x544e4552
    4eb4:	4d454d5f 	.word	0x4d454d5f
    4eb8:	00000045 	.word	0x00000045
    4ebc:	694e2041 	.word	0x694e2041
    4ec0:	54206563 	.word	0x54206563
    4ec4:	00005954 	.word	0x00005954
    4ec8:	78696e55 	.word	0x78696e55
    4ecc:	6f706520 	.word	0x6f706520
    4ed0:	6d206863 	.word	0x6d206863
    4ed4:	73756e69 	.word	0x73756e69
    4ed8:	46783020 	.word	0x46783020
    4edc:	61642046 	.word	0x61642046
    4ee0:	00007379 	.word	0x00007379
    4ee4:	3d202069 	.word	0x3d202069
    4ee8:	35783020 	.word	0x35783020
    4eec:	35373366 	.word	0x35373366
    4ef0:	20666439 	.word	0x20666439
    4ef4:	2028202d 	.word	0x2028202d
    4ef8:	3e3e2069 	.word	0x3e3e2069
    4efc:	29203120 	.word	0x29203120
    4f00:	0000003b 	.word	0x0000003b
    4f04:	42414341 	.word	0x42414341
    4f08:	00000000 	.word	0x00000000
    4f0c:	63666544 	.word	0x63666544
    4f10:	73276e6f 	.word	0x73276e6f
    4f14:	6e616320 	.word	0x6e616320
    4f18:	656c6563 	.word	0x656c6563
    4f1c:	00002e64 	.word	0x00002e64
    4f20:	73746152 	.word	0x73746152
    4f24:	7473656e 	.word	0x7473656e
    4f28:	6f4e203a 	.word	0x6f4e203a
    4f2c:	6e696874 	.word	0x6e696874
    4f30:	6f542067 	.word	0x6f542067
    4f34:	216f4420 	.word	0x216f4420
    4f38:	00000000 	.word	0x00000000
    4f3c:	68207449 	.word	0x68207449
    4f40:	36207361 	.word	0x36207361
    4f44:	656b2039 	.word	0x656b2039
    4f48:	002e7379 	.word	0x002e7379
    4f4c:	61636542 	.word	0x61636542
    4f50:	20657375 	.word	0x20657375
    4f54:	342d5456 	.word	0x342d5456
    4f58:	77203032 	.word	0x77203032
    4f5c:	61207361 	.word	0x61207361
    4f60:	6165726c 	.word	0x6165726c
    4f64:	74207964 	.word	0x74207964
    4f68:	6e656b61 	.word	0x6e656b61
    4f6c:	00000000 	.word	0x00000000
    4f70:	706d6f43 	.word	0x706d6f43
    4f74:	73736572 	.word	0x73736572
    4f78:	206e6f69 	.word	0x206e6f69
    4f7c:	6f676c61 	.word	0x6f676c61
    4f80:	68746972 	.word	0x68746972
    4f84:	6162206d 	.word	0x6162206d
    4f88:	20646573 	.word	0x20646573
    4f8c:	42206e6f 	.word	0x42206e6f
    4f90:	28205042 	.word	0x28205042
    4f94:	37393931 	.word	0x37393931
    4f98:	00000029 	.word	0x00000029
    4f9c:	63616554 	.word	0x63616554
    4fa0:	65682068 	.word	0x65682068
    4fa4:	68746c61 	.word	0x68746c61
    4fa8:	736e6920 	.word	0x736e6920
    4fac:	6e617275 	.word	0x6e617275
    4fb0:	70206563 	.word	0x70206563
    4fb4:	69766f72 	.word	0x69766f72
    4fb8:	73726564 	.word	0x73726564
    4fbc:	206f7420 	.word	0x206f7420
    4fc0:	65646f63 	.word	0x65646f63
    4fc4:	0000002e 	.word	0x0000002e
    4fc8:	6566664f 	.word	0x6566664f
    4fcc:	7669736e 	.word	0x7669736e
    4fd0:	61682065 	.word	0x61682065
    4fd4:	61776472 	.word	0x61776472
    4fd8:	00006572 	.word	0x00006572
    4fdc:	69466957 	.word	0x69466957
    4fe0:	20736920 	.word	0x20736920
    4fe4:	20746f6e 	.word	0x20746f6e
    4fe8:	65726977 	.word	0x65726977
    4fec:	7373656c 	.word	0x7373656c
    4ff0:	68744520 	.word	0x68744520
    4ff4:	656e7265 	.word	0x656e7265
    4ff8:	00002174 	.word	0x00002174
    4ffc:	6d6d7544 	.word	0x6d6d7544
    5000:	68742079 	.word	0x68742079
    5004:	20636369 	.word	0x20636369
    5008:	65696c63 	.word	0x65696c63
    500c:	0000746e 	.word	0x0000746e
    5010:	694e2041 	.word	0x694e2041
    5014:	54206563 	.word	0x54206563
    5018:	202e5954 	.word	0x202e5954
    501c:	4f206e41 	.word	0x4f206e41
    5020:	6f43204b 	.word	0x6f43204b
    5024:	7475706d 	.word	0x7475706d
    5028:	002e7265 	.word	0x002e7265
    502c:	65545355 	.word	0x65545355
    5030:	6964656c 	.word	0x6964656c
    5034:	6e6f646c 	.word	0x6e6f646c
    5038:	00736369 	.word	0x00736369
    503c:	696c6f53 	.word	0x696c6f53
    5040:	69726164 	.word	0x69726164
    5044:	69207974 	.word	0x69207974
    5048:	6f6e2073 	.word	0x6f6e2073
    504c:	20612074 	.word	0x20612074
    5050:	2077656e 	.word	0x2077656e
    5054:	6d617266 	.word	0x6d617266
    5058:	726f7765 	.word	0x726f7765
    505c:	0000006b 	.word	0x0000006b
    5060:	61657242 	.word	0x61657242
    5064:	616f6264 	.word	0x616f6264
    5068:	6e696472 	.word	0x6e696472
    506c:	73492067 	.word	0x73492067
    5070:	746f4e20 	.word	0x746f4e20
    5074:	43204120 	.word	0x43204120
    5078:	656d6972 	.word	0x656d6972
    507c:	00000000 	.word	0x00000000
    5080:	2066664f 	.word	0x2066664f
    5084:	6f207962 	.word	0x6f207962
    5088:	6520656e 	.word	0x6520656e
    508c:	726f7272 	.word	0x726f7272
    5090:	72612073 	.word	0x72612073
    5094:	6f632065 	.word	0x6f632065
    5098:	6e6f6d6d 	.word	0x6e6f6d6d
    509c:	00000000 	.word	0x00000000
    50a0:	00000ba2 	.word	0x00000ba2
    50a4:	00000dee 	.word	0x00000dee
    50a8:	00000dee 	.word	0x00000dee
    50ac:	00000dee 	.word	0x00000dee
    50b0:	00000dee 	.word	0x00000dee
    50b4:	00000dee 	.word	0x00000dee
    50b8:	00000dee 	.word	0x00000dee
    50bc:	00000dee 	.word	0x00000dee
    50c0:	00000dee 	.word	0x00000dee
    50c4:	00000dee 	.word	0x00000dee
    50c8:	00000dee 	.word	0x00000dee
    50cc:	00000dee 	.word	0x00000dee
    50d0:	00000dee 	.word	0x00000dee
    50d4:	00000dee 	.word	0x00000dee
    50d8:	00000dee 	.word	0x00000dee
    50dc:	00000dee 	.word	0x00000dee
    50e0:	00000b8a 	.word	0x00000b8a
    50e4:	00000dee 	.word	0x00000dee
    50e8:	00000dee 	.word	0x00000dee
    50ec:	00000dee 	.word	0x00000dee
    50f0:	00000dee 	.word	0x00000dee
    50f4:	00000dee 	.word	0x00000dee
    50f8:	00000dee 	.word	0x00000dee
    50fc:	00000dee 	.word	0x00000dee
    5100:	00000dee 	.word	0x00000dee
    5104:	00000dee 	.word	0x00000dee
    5108:	00000dee 	.word	0x00000dee
    510c:	00000dee 	.word	0x00000dee
    5110:	00000dee 	.word	0x00000dee
    5114:	00000dee 	.word	0x00000dee
    5118:	00000dee 	.word	0x00000dee
    511c:	00000dee 	.word	0x00000dee
    5120:	00000b9a 	.word	0x00000b9a
    5124:	00000dee 	.word	0x00000dee
    5128:	00000dee 	.word	0x00000dee
    512c:	00000dee 	.word	0x00000dee
    5130:	00000dee 	.word	0x00000dee
    5134:	00000dee 	.word	0x00000dee
    5138:	00000dee 	.word	0x00000dee
    513c:	00000dee 	.word	0x00000dee
    5140:	00000dee 	.word	0x00000dee
    5144:	00000dee 	.word	0x00000dee
    5148:	00000dee 	.word	0x00000dee
    514c:	00000dee 	.word	0x00000dee
    5150:	00000dee 	.word	0x00000dee
    5154:	00000dee 	.word	0x00000dee
    5158:	00000dee 	.word	0x00000dee
    515c:	00000dee 	.word	0x00000dee
    5160:	00000b92 	.word	0x00000b92
    5164:	00000baa 	.word	0x00000baa
    5168:	00000b72 	.word	0x00000b72
    516c:	00000b82 	.word	0x00000b82
    5170:	00000b7a 	.word	0x00000b7a
    5174:	00000002 	.word	0x00000002
    5178:	00000003 	.word	0x00000003
    517c:	00000028 	.word	0x00000028
    5180:	00000029 	.word	0x00000029
    5184:	00000004 	.word	0x00000004
    5188:	00000005 	.word	0x00000005
    518c:	00000006 	.word	0x00000006
    5190:	00000007 	.word	0x00000007
    5194:	00000020 	.word	0x00000020
    5198:	00000021 	.word	0x00000021
    519c:	00000022 	.word	0x00000022
    51a0:	00000023 	.word	0x00000023
    51a4:	00000024 	.word	0x00000024
    51a8:	00000025 	.word	0x00000025
    51ac:	00000026 	.word	0x00000026
    51b0:	00000027 	.word	0x00000027
    51b4:	00000008 	.word	0x00000008
    51b8:	00000009 	.word	0x00000009
    51bc:	0000000a 	.word	0x0000000a
    51c0:	0000000b 	.word	0x0000000b
    51c4:	42000800 	.word	0x42000800
    51c8:	42000c00 	.word	0x42000c00
    51cc:	42001000 	.word	0x42001000
    51d0:	42001400 	.word	0x42001400
    51d4:	42001800 	.word	0x42001800
    51d8:	42001c00 	.word	0x42001c00
    51dc:	00001926 	.word	0x00001926
    51e0:	00001922 	.word	0x00001922
    51e4:	00001922 	.word	0x00001922
    51e8:	00001988 	.word	0x00001988
    51ec:	00001988 	.word	0x00001988
    51f0:	0000193a 	.word	0x0000193a
    51f4:	0000192c 	.word	0x0000192c
    51f8:	00001940 	.word	0x00001940
    51fc:	00001976 	.word	0x00001976
    5200:	00001b48 	.word	0x00001b48
    5204:	00001b28 	.word	0x00001b28
    5208:	00001b28 	.word	0x00001b28
    520c:	00001bb4 	.word	0x00001bb4
    5210:	00001b3a 	.word	0x00001b3a
    5214:	00001b56 	.word	0x00001b56
    5218:	00001b2c 	.word	0x00001b2c
    521c:	00001b64 	.word	0x00001b64
    5220:	00001ba4 	.word	0x00001ba4

00005224 <CodePage437>:
	...
    555c:	01000000 06186080 18608001 60800106     .....`....`....`
    556c:	80010000 00000060 00000000 66986106     ....`........a.f
    557c:	98618619 00000000 00000000 00000000     ..a.............
    558c:	00000000 98610600 fb8f1966 8f1966fe     ......a.f....f..
    559c:	1966fefb 00986186 00000000 80010000     ..f..a..........
    55ac:	891f7e60 1f7e6082 7e649081 6080811f     `~...`~...d~...`
    55bc:	00000000 04000000 29a60823 1820c106     ........#..).. .
    55cc:	98200304 324c1165 00000008 00000000     .. .e.L2........
    55dc:	84e08107 10420821 5a081e78 87208216     ....!.B.x..Z.. .
    55ec:	0000f6d9 00000000 30c00000 00030618     ...........0....
    55fc:	000000c0 00000000 00000000 00000000     ................
    560c:	40000000 03020810 0c30c000 08c00003     ...@......0.....
    561c:	10400002 00000000 01000000 02084000     ..@..........@..
    562c:	06186000 18608001 00010208 00000040     .`....`.....@...
    563c:	00000000 42000000 90408210 40c23fff     .......B..@..?.@
    564c:	80104290 00000000 00000000 00000000     .B..............
    565c:	80000208 e0bfff20 02082080 00000000     .... .... ......
	...
    567c:	18000000 c0000306 00001040 00000000     ........@.......
    568c:	00000000 ff000000 0000e0bf 00000000     ................
	...
    56b0:	030e3800 0000e080 00000000 08200000     .8............ .
    56c0:	80000104 02041020 10408000 00000208     .... .....@.....
    56d0:	00000000 e0030000 cc1863f8 b0c1061b     .........c......
    56e0:	63061b6c f8e0c318 00000000 00000000     l..c............
    56f0:	1b3c70c0 0c30c004 30c00003 e107030c     .p<...0....0....
    5700:	000000f8 00000000 c1f8e107 061860b0     .............`..
    5710:	0187030e 0f30c0c0 0000fefb 00000000     ......0.........
    5720:	fefb0f00 60c00003 80030e30 b0810618     .......`0.......
    5730:	00f8e167 00000000 40000000 03070c30     g..........@0...
    5740:	31649040 04fefb0f 10400001 00000000     @.d1......@.....
    5750:	0f000000 30c0fefb c1f8e30f 061860b0     .......0.....`..
    5760:	e167a081 000000f8 00000000 60f8e003     ..g............`
    5770:	00030c18 1b8c3ffe 67b0c106 0000f8e1     .....?.....g....
    5780:	00000000 fefb0f00 20608001 00010408     ..........` ....
    5790:	0c302080 00c00003 00000000 e0030000     . 0.............
    57a0:	6cb0c1f8 0f3e061b c1061b8c f8e063b0     ...l..>......c..
    57b0:	00000000 07000000 b0c1f8e1 7d0e3b6c     ............l;.}
    57c0:	0618609f e1c70003 000000f0 00000000     .`..............
    57d0:	38000000 e080030e 00000000 030e3800     ...8.........8..
    57e0:	0000e080 00000000 00000000 80030e38     ............8...
    57f0:	000000e0 0e380000 40c00003 00000010     ......8....@....
    5800:	30000000 03030c0c 30c0c000 0cc00003     ...0.......0....
    5810:	0c300003 00000000 00000000 00000000     ..0.............
    5820:	00fefb0f fefb0f00 00000000 00000000     ................
    5830:	00000000 3000030c 30c0000c c0c00003     .......0...0....
    5840:	0c0c3030 00000003 00000000 f8e10700     00..............
    5850:	6060b0c1 01061818 00006080 00608001     ..``.....`....`.
    5860:	00000000 e1070000 6cb0c1f8 b4d33edb     ...........l.>..
    5870:	c036fbec f8e10730 00000000 00000000     ..6.0...........
    5880:	0d367080 c18c3186 fefb6fb0 1b6cb0c1     .p6..1...o....l.
    5890:	00000006 00000000 61f8e30f 86196698     ...........a.f..
    58a0:	19861f7e 6f986186 0000f8e3 00000000     ~....a.o........
    58b0:	f8e00300 036c9861 0c30c000 98610003     ....a.l...0...a.
    58c0:	00f8e063 00000000 c30f0000 861966f0     c............f..
    58d0:	98618631 668c1966 f0c38f19 00000000     1.a.f..f........
    58e0:	0f000000 30c0fefb fc00030c 00030c3f     .......0....?...
    58f0:	fb0f30c0 000000fe 00000000 c0fefb0f     .0..............
    5900:	00030c30 030c3ffc 0c30c000 00000003     0....?....0.....
    5910:	00000000 f8e00300 036c9861 0c30c000     ........a.l...0.
    5920:	98611e7b 00f8e063 00000000 1b0c0000     {.a.c...........
    5930:	6cb0c106 bfff061b c1061bec 061b6cb0     ...l.........l..
    5940:	00000000 07000000 0618f8e1 18608001     ..............`.
    5950:	60800106 e1070618 000000f8 00000000     ...`............
    5960:	067ef801 18608001 60800106 8731c618     ..~...`....`..1.
    5970:	0000f0c1 00000000 061b0c00 838d31c6     .............1..
    5980:	0d38e060 31c66083 00061b8c 00000000     `.8..`.1........
    5990:	030c0000 0c30c000 30c00003 c000030c     ......0....0....
    59a0:	fefb0f30 00000000 0c000000 bde38e1b     0...............
    59b0:	c976dbed 061b6cb2 1b6cb0c1 00000006     ..v..l....l.....
    59c0:	00000000 e1861b0c 661b6dbc 5b6cb3c9     .........m.f..l[
    59d0:	ecb0c31e 0000061b 00000000 f8e00300     ................
    59e0:	1b6cb0e3 6cb0c106 b8c1061b 00f8e0e3     ..l....l........
    59f0:	00000000 e30f0000 6cb0c1f8 3ffe061b     ...........l...?
    5a00:	c000038c 00030c30 00000000 07000000     ....0...........
    5a10:	b0c1f8e1 c1061b6c 36db6cb0 d98731c6     ....l....l.6.1..
    5a20:	000000f6 00000000 c1f8e30f 061b6cb0     .............l..
    5a30:	638c3ffe cc30c318 0000061b 00000000     .?.c..0.........
    5a40:	f8e10700 036cb0c1 801f7e00 b0c10618     ......l..~......
    5a50:	00f8e167 00000000 fb0f0000 000208fe     g...............
    5a60:	02082080 08208000 20800002 00000000     . .... .... ....
    5a70:	0c000000 b0c1061b c1061b6c 061b6cb0     ........l....l..
    5a80:	e063b0c1 000000f8 00000000 c1061b0c     ..c.............
    5a90:	8c3166b0 60c31863 810d36d8 000020c0     .f1.c..`.6... ..
    5aa0:	00000000 061b0c00 1b6cb0c1 6db2c906     ..........l....m
    5ab0:	b5d576db 008c796f 00000000 1b0c0000     .v..oy..........
    5ac0:	c3186306 060cf860 63d8e003 061bcc18     .c..`......c....
    5ad0:	00000000 0c000000 1863061b 1cd860c3     ..........c..`..
    5ae0:	20c00107 80000208 00000020 00000000     ... .... .......
    5af0:	03fefb0f 1060c000 0103060c 0f30c0c0     ......`.......0.
    5b00:	0000fefb 00000000 f8e00300 00030c30     ............0...
    5b10:	030c30c0 0c30c000 00f8e003 00000000     .0....0.........
    5b20:	01060000 010c3080 030c6080 03186000     .....0...`...`..
    5b30:	0618c000 00000000 07000000 030cf0c1     ................
    5b40:	0c30c000 30c00003 c107030c 000000f0     ..0....0........
    5b50:	00000000 36708000 8c31860d 0060b0c1     ......p6..1...`.
	...
    5b7c:	00fefb0f 00000000 80030000 00030ce0     ................
    5b8c:	00001860 00000000 00000000 00000000     `...............
	...
    5ba4:	01fcf003 fef86380 f823b0c0 000000fe     .....c....#.....
    5bb4:	00000000 c000030c fcf30d30 0b6cb8e1     ........0.....l.
    5bc4:	6fb8e102 00007cf3 00000000 00000000     ...o.|..........
    5bd4:	e1070000 6cb0c1f8 30c00003 00fef907     .......l...0....
    5be4:	00000000 18000000 67800106 b0c3f6d9     ...........g....
    5bf4:	c3061bec f6d9e7b0 00000000 00000000     ................
    5c04:	00000000 c1f8e107 fefb6fb0 f10730c0     .........o...0..
    5c14:	000000fc 00000000 3138e000 c000638c     ..........81.c..
    5c24:	00033ffc 030c30c0 0000c000 00000000     .?...0..........
    5c34:	00000000 d9070000 8731c6f6 30c0f0c1     ..........1....0
    5c44:	c3f8e107 f8e1e7b0 030c0000 0d30c000     ..............0.
    5c54:	b8e178e3 c1061b6c 061b6cb0 00000000     .x..l....l......
    5c64:	01000000 00006080 18e08003 60800106     .....`.........`
    5c74:	e1070618 000000f8 00000000 00186000     .............`..
    5c84:	18600000 60800106 8c010618 31c61863     ..`....`....c..1
    5c94:	00f0c187 00030c00 638c30c0 0f36cc30     .........0.c0.6.
    5ca4:	33ccc083 000c330c 00000000 c0030000     ...3.3..........
    5cb4:	00030cf0 030c30c0 0c30c000 f8e00303     .....0....0.....
	...
    5cd0:	e70c330c 669b6dbf 1b6cb0c1 00000006     .3...m.f..l.....
	...
    5ce8:	f8e20b00 1b6cb8e1 6cb0c106 0000061b     ......l....l....
	...
    5d00:	e1070000 cc30c3f8 30c30c33 00f8e1c7     ......0.3..0....
	...
    5d18:	0b000000 b0c1f8e2 be061b6c 0002882f     ........l.../...
    5d28:	02082080 00000000 00000000 c1fae803     . ..............
    5d38:	061b6cb0 08a08f3e 20800002 00000208     .l..>...... ....
    5d48:	00000000 7ce20800 036cbcf1 0c30c000     .......|..l...0.
    5d58:	00000003 00000000 00000000 e1070000     ................
    5d68:	0730c0f8 8001f8e1 00f8e36f 00000000     ..0.....o.......
    5d78:	00030000 0f0c30c0 0c30f8e3 33c00003     .....0....0....3
    5d88:	30c0c00c 00000000 00000000 00000000     ...0............
    5d98:	c30c330c 0c33cc30 d9c730c3 000000f6     .3..0.3..0......
	...
    5db0:	02020000 30e6b8c1 01073ed8 000020c0     .......0.>... ..
	...
    5dc8:	1b0c0000 6cb0c106 b5d5769b 008c3166     .......l.v..f1..
	...
    5de0:	08000000 1b441823 6ce08003 08620c11     ....#.D....l..b.
	...
    5dfc:	c618630c 18638c31 60801f7e 873bc618     .c..1.c.~..`..;.
    5e0c:	0000f0c1 00000000 fefb0f00 c0c00003     ................
    5e1c:	0f0c3030 0000fefb 00000000 1e780000     00............x.
    5e2c:	40000208 000e3810 02081040 001e7800     ...@.8..@....x..
    5e3c:	00000000 80010000 01061860 06186080     ........`....`..
    5e4c:	18608001 60800106 00000000 0f000000     ..`....`........
    5e5c:	0208c003 0cc00003 c0000303 030f0208     ................
    5e6c:	000000c0 00000000 d9c61907 1c736cb3     .............ls.
	...
    5ea4:	e0030000 6c9861f8 30c00003 6100030c     .....a.l...0...a
    5eb4:	f8e06398 00000608 00000000 00669801     .c............f.
    5ec4:	c30c330c 0c33cc30 d9c730c3 000000f6     .3..0.3..0......
    5ed4:	00000000 0c180000 f8e10700 fb6fb0c1     ..............o.
    5ee4:	0730c0fe 0000fcf1 00000000 10000000     ..0.............
    5ef4:	f003000a 638001fc b0c0fef8 00fef823     .......c....#...
	...
    5f0c:	030033cc 8001fcf0 c0fef863 fef823b0     .3......c....#..
	...
    5f24:	000c6000 01fcf003 fef86380 f823b0c0     .`.......c....#.
    5f34:	000000fe 03000000 0c482001 fcf00300     ......... H.....
    5f44:	f8638001 23b0c0fe 0000fef8 00000000     ..c....#........
    5f54:	00000000 e1070000 6cb0c1f8 30c00003     ...........l...0
    5f64:	04fef907 00000003 00000000 07001420     ............ ...
    5f74:	b0c1f8e1 c0fefb6f fcf10730 00000000     ....o...0.......
    5f84:	00000000 00669801 c1f8e107 fefb6fb0     ......f......o..
    5f94:	f10730c0 000000fc 00000000 18c00000     .0..............
    5fa4:	f8e10700 fb6fb0c1 0730c0fe 0000fcf1     ......o...0.....
    5fb4:	00000000 98610600 80030000 010618e0     ......a.........
    5fc4:	06186080 00f8e107 00000000 00000000     .`..............
    5fd4:	03002840 0618e080 18608001 f8e10706     @(........`.....
	...
    5fec:	0018c000 18e08003 60800106 e1070618     ...........`....
    5ffc:	000000f8 18630000 367080c0 8c31860d     ......c...p6..1.
    600c:	fb6fb0c1 6cb0c1fe 0000061b 1c000000     ..o....l........
    601c:	70c08108 31860d36 6fb0c18c b0c1fefb     ...p6..1...o....
    602c:	00061b6c 00000000 fb0f0606 0c30c0fe     l.............0.
    603c:	3ffc0003 c000030c fefb0f30 00000000     ...?....0.......
	...
    6054:	1dfe7907 fedb2786 f90733cc 000000ee     .y...'...3......
    6064:	00000000 367ef800 9861860d e3efb1c7     ......~6..a.....
    6074:	8c31c6f8 00001e7b 00000000 20000000     ..1.{.......... 
    6084:	e1070014 cc30c3f8 30c30c33 00f8e1c7     ......0.3..0....
    6094:	00000000 01000000 07006698 30c3f8e1     .........f.....0
    60a4:	c30c33cc f8e1c730 00000000 00000000     .3..0...........
    60b4:	0018c000 c3f8e107 0c33cc30 e1c730c3     ........0.3..0..
    60c4:	000000f8 00000000 14200000 0c330c00     .......... ...3.
    60d4:	33cc30c3 c730c30c 0000f6d9 00000000     .0.3..0.........
    60e4:	60000000 330c000c cc30c30c 30c30c33     ...`...3..0.3..0
    60f4:	00f6d9c7 00000000 01000000 0c006698     .............f..
    6104:	31c61863 7e18638c 1860801f c1873bc6     c..1.c.~..`..;..
    6114:	800d36f0 383ef800 c1061bec 061b6cb0     .6....>8.....l..
    6124:	e0e3b8c1 000000f8 0c330000 c10603c0     ..........3.....
    6134:	061b6cb0 1b6cb0c1 63b0c106 0000f8e0     .l....l....c....
    6144:	00000000 20800002 1b8c1f7e 0c32c826     ....... ~...&.2.
    6154:	1f7e069b 08208080 00000000 c0010000     ..~... .........
    6164:	461873f8 3e608001 6080810f fefb0f18     .s.F..`>...`....
    6174:	00000000 0c000000 08630419 1c506083     ..........c..`P.
    6184:	20e00302 80800f08 00000020 00000000     ... .... .......
    6194:	c1f8e30f f81b6cb0 830d30fe 0d36d878     .....l...0..x.6.
    61a4:	000038e3 00000000 3ce00000 98638e3f     .8.........<?.c.
    61b4:	833ffee0 1c70c000 60800106 00000018     ..?...p....`....
    61c4:	00000000 03000c18 8001fcf0 c0fef863     ............c...
    61d4:	fef823b0 00000000 00000000 000060c0     .#...........`..
    61e4:	18e08003 60800106 e1070618 000000f8     .......`........
    61f4:	00000000 18300000 f8e10700 33cc30c3     ......0......0.3
    6204:	c730c30c 0000f8e1 00000000 30000000     ..0............0
    6214:	330c0018 cc30c30c 30c30c33 00f6d9c7     ...3..0.3..0....
	...
    622c:	0b001998 b8e1f8e2 c1061b6c 061b6cb0     ........l....l..
    623c:	00000000 8c0c4c00 b8e1061b c9461b6d     .....L......m.F.
    624c:	165b6cb2 1becb0c3 00000006 00000000     .l[.............
    625c:	1e08c003 00e08308 000080ff 00000000     ................
	...
    6274:	d8c00100 c0810d22 0080ff00 00000000     ...."...........
	...
    6290:	00030c00 030c0000 3030c000 061b0c0c     ..........00....
    62a0:	00c00f3f 00000000 00000000 ff000000     ?...............
    62b0:	0003ecbf 00000000 00000000 00000000     ................
	...
    62c8:	18e0bfff 00000006 00000000 00000000     ................
    62d8:	30c00003 c000030c e0bfff00 0c1f3800     ...0.........8..
    62e8:	183060c0 0000c00f c0000300 00030c30     .`0.........0...
    62f8:	bfff00c0 668001e0 fc618619 60800106     .......f..a....`
    6308:	00000000 06180000 18000000 60800106     ...............`
    6318:	80010618 00061860 00000000 00000000     ....`...........
    6328:	90200100 80042448 00001290 00000000     .. .H$..........
	...
    6340:	40020000 20010948 00244890 00000000     ...@H.. .H$.....
    6350:	00000000 48024092 09004900 80240024     .....@.H.I..$.$.
    6360:	92009004 00480240 24090049 42529200     ....@.H.I..$..RB
    6370:	0949494a 24242529 929094a4 4a425292     JII.)%$$.....RBJ
    6380:	29094949 ad6d2425 b6b6b5bd dbdad6f6     II.)%$m.........
    6390:	6f6b5bdb bdad6d6d f6b6b6b5 08dbdad6     .[komm..........
    63a0:	20800002 80000208 00020820 02082080     ... .... .... ..
    63b0:	08208000 20800002 80000208 00020820     .. .... .... ...
    63c0:	3e082080 08208000 20800002 80000208     . .>.. .... ....
    63d0:	00020820 02082080 f8208000 20800f02      .... .... .... 
    63e0:	80000208 00020820 05142080 14504001     .... .... ...@P.
    63f0:	50400105 40013d14 01051450 05145040     ..@P.=.@P...@P..
    6400:	00504001 00000000 00000000 013f0000     .@P...........?.
    6410:	05145040 14504001 50400105 00000000     @P...@P...@P....
    6420:	00000000 02f80000 0820800f 20800002     .......... .... 
    6430:	80000208 01051420 05145040 f4504001     .... ...@P...@P.
    6440:	50400f01 40010514 01051450 05145040     ..@P...@P...@P..
    6450:	14504001 50400105 40010514 01051450     .@P...@P...@P...
    6460:	05145040 00504001 00000000 00000000     @P...@P.........
    6470:	0f01fc00 05145040 14504001 50400105     ....@P...@P...@P
    6480:	40010514 01051450 01f45040 0000c00f     ...@P...@P......
	...
    6498:	01051400 05145040 14504001 0000003f     ....@P...@P.?...
	...
    64b0:	02080000 08208000 20800002 800f02f8     ...... .... ....
	...
    64d4:	003e0000 02082080 08208000 20800002     ..>.. .... .... 
    64e4:	80000208 00020820 03082080 000000f0     .... .... ......
	...
    64fc:	00020800 02082080 08208000 0000f03f     ..... .... .?...
	...
    6520:	80f03f00 00020820 02082080 08208000     .?.. .... .... .
    6530:	20800002 80000208 f0030820 02082080     ... .... .... ..
    6540:	08208000 20800002 00000000 00000000     .. .... ........
    6550:	3f000000 000000f0 00000000 00000000     ...?............
    6560:	00020800 02082080 08208000 2080f03f     ..... .... .?.. 
    6570:	80000208 00020820 02082080 08208000     .... .... .... .
    6580:	20800002 fc00c20f 00020820 02082080     ... .... .... ..
    6590:	14208000 50400105 40010514 f1051450     .. ...@P...@P...
    65a0:	05145040 14504001 50400105 40010514     @P...@P...@P...@
    65b0:	01051450 c4175040 0000fc01 00000000     P...@P..........
	...
    65cc:	1f000000 507c01c4 40010514 01051450     ......|P...@P...
    65dc:	05145040 14504001 50400105 fc0fc0f7     @P...@P...@P....
	...
    6600:	0fc0ff00 0514507c 14504001 50400105     ....|P...@P...@P
    6610:	40010514 01051450 c4175040 14507c01     ...@P...@P...|P.
    6620:	50400105 40010514 00000050 00000000     ..@P...@P.......
    6630:	ff000000 00fc0fc0 00000000 00000000     ................
    6640:	05140000 14504001 50400105 7c0fc0f7     .....@P...@P...|
    6650:	01051450 05145040 08504001 20800002     P...@P...@P.... 
    6660:	80000208 0fc0ff20 000000fc 00000000     .... ...........
    6670:	00000000 40010514 01051450 3f145040     .......@P...@P.?
    6680:	000000f0 00000000 00000000 00000000     ................
    6690:	00000000 ff000000 20fc0fc0 80000208     ........... ....
    66a0:	00020820 00002080 00000000 00000000      .... ..........
    66b0:	40f13f00 01051450 05145040 14504001     .?.@P...@P...@P.
    66c0:	50400105 40010514 f0071450 00000000     ..@P...@P.......
	...
    66d8:	80000208 00020820 c20f2080 0000fc00     .... .... ......
	...
    66f8:	0f000000 20fc00c2 80000208 00020820     ....... .... ...
    6708:	00002080 00000000 00000000 40f10700     . .............@
    6718:	01051450 05145040 14504001 50400105     P...@P...@P...@P
    6728:	40010514 f13f1450 05145040 14504001     ...@P.?.@P...@P.
    6738:	50400105 80000208 00020820 c2ff2080     ..@P.... .... ..
    6748:	0820fc0f 20800002 80000208 00020820     .. .... .... ...
    6758:	02082080 08208000 0000003e 00000000     . .... .>.......
	...
    6778:	80f00300 00020820 02082080 ff208000     .... .... .... .
    6788:	ffffffff ffffffff ffffffff ffffffff     ................
    6798:	ffffffff ffffffff 00000000 00000000     ................
    67a8:	3f000000 ffffffff ffffffff ffffffff     ...?............
    67b8:	0f3ef8ff 3ef8e083 f8e0830f e0830f3e     ..>....>....>...
    67c8:	830f3ef8 0f3ef8e0 c30fe083 0f3ffcf0     .>....>.......?.
    67d8:	3ffcf0c3 fcf0c30f f0c30f3f c30f3ffc     ...?....?....?..
    67e8:	ff3ffcf0 ffffffff ffffffff f0ffffff     ..?.............
	...
    680c:	8f380000 c208234c e2d08330 00000000     ..8.L#..0.......
    681c:	00000000 193c0000 7c982186 8c61061f     ......<..!.|..a.
    682c:	63c61861 000000f8 00000000 ff000000     a..c............
    683c:	8c31c61f 01061863 06186080 0000c003     ..1.c....`......
	...
    6858:	c69fff00 18638c31 008e33c6 00000000     ....1.c..3......
    6868:	fb0f0000 06b080fe 0618c000 c0800103     ................
    6878:	fefb2f20 00000000 00000000 00000000      /..............
    6888:	c3fef907 0c33cc30 e1c730c3 000000f8     ....0.3..0......
	...
    68a0:	0c330c00 33cc30c3 cf30c30c 30c0f6db     ..3..0.3..0....0
    68b0:	0000000c 00000000 e30c0000 618e7bbc     .............{.a
    68c0:	06186080 00608001 00000000 00000000     .`....`.........
    68d0:	c33f0000 30c3f8c1 c30c33cc f0e0c730     ..?....0.3..0...
    68e0:	000000ff 03000000 1863f8e0 ff061bcc     ..........c.....
    68f0:	061becbf e0c31863 000000f8 00000000     ....c...........
    6900:	e3fce103 061b6cb0 1b6cb0c1 c698e38e     .....l....l.....
    6910:	00008e33 00000000 fef80300 e1070318     3...............
    6920:	cc30c3f8 30c30c33 00f8e1c7 00000000     ..0.3..0........
    6930:	00000000 02000000 a2885421 88228a28     ........!T..(.".
    6940:	00204295 00000000 00000000 07000000     .B .............
    6950:	860e7367 628a28a3 7367b8b0 00000070     gs...(.b..gsp...
    6960:	00000000 60f8e003 00030c18 030c3ffc     .......`.....?..
    6970:	03186000 0000f8e0 00000000 00000000     .`..............
    6980:	1b8c0f3e 6cb0c106 b0c1061b c1061b6c     >......l....l...
    6990:	000060b0 00000000 0f000000 0000fefb     .`..............
    69a0:	00fefb0f fefb0f00 00000000 00000000     ................
    69b0:	02080000 ff208000 2080e0bf 03000208     ...... .... ....
    69c0:	000000fe 00000000 3000030c 30c0000c     ...........0...0
    69d0:	c0c00003 0c0c3030 3f000003 0000f0cf     ....00.....?....
    69e0:	0c300000 0003030c 0330c0c0 030cc000     ..0.......0.....
    69f0:	000c3000 00f0cf3f 88600307 00020820     .0..?.....`. ...
    6a00:	02082080 08208000 20800002 80000208     . .... .... ....
    6a10:	00020820 02082080 08208000 20800002      .... .... .... 
    6a20:	80000208 09240820 00008001 18000000     .... .$.........
    6a30:	00000006 00e0bfff 00061800 00000000     ................
	...
    6a48:	8a0f1c00 0f1c073e 00073e8a 00000000     ....>....>......
	...
    6a60:	01092460 00000080 00000000 00000000     `$..............
	...
    6a84:	80030e38 00000000 00000000 00000000     8...............
	...
    6a9c:	01000000 00006080 00000000 0f000000     .....`..........
    6aac:	40000104 0d020820 0c504001 00800002     ...@ ....@P.....
    6abc:	00000000 f0c30b00 638c31c6 00000018     .........1.c....
	...
    6ad8:	83070000 03070cf0 3fe0c081 00000000     ...........?....
	...
    6afc:	c30f3ffc 0f3ffcf0 0000f0c3 00000000     .?....?.........
	...
    6b24:	0009001b 67753700 71312c6a 38000000     .....7ugj,1q...8
    6b34:	006b6869 7a007732 6f303900 65332e6c     ihk.2w.z.90ol.3e
    6b44:	00007861 2f3b702d 63737234 5b3d0020     ax..-p;/4rsc .=[
    6b54:	74350027 006e7664 5c0d5d27 62667936     '.5tdvn.'].\6yfb
    6b64:	0008006d 00000a7f 0009001b 47552600     m............&UG
    6b74:	51213c4a 2a000000 004b4849 5a005740     J<!Q...*IHK.@W.Z
    6b84:	4f292800 45233e4c 00005841 3f3a505f     .()OL>#EAX.._P:?
    6b94:	43535224 7b2b0020 54250022 004e5644     $RSC .+{".%TDVN.
    6ba4:	7c0d7d7e 4246595e 0008004d 00000a7f     ~}.|^YFBM.......
    6bb4:	0009001b 47553700 51312c4a 38000000     .....7UGJ,1Q...8
    6bc4:	004b4849 5a005732 4f303900 45332e4c     IHK.2W.Z.90OL.3E
    6bd4:	00005841 2f3b502d 43535234 5b3d0020     AX..-P;/4RSC .=[
    6be4:	54350027 004e5644 5c0d5d27 42465936     '.5TDVN.'].\6YFB
    6bf4:	0008004d 00000a7f 0009001b 07150000     M...............
    6c04:	1100000a 00000000 000b0809 1a001700     ................
    6c14:	0f000000 0500000a 00001801 1f001000     ................
    6c24:	03131200 1b000000 14000000 000e1604     ................
    6c34:	1c001d1e 02061900 0008000d 00000a00     ................

00006c44 <kb_col>:
    6c44:	00010000 00020000 00040000 00080000     ................
    6c54:	00100000 00200000 08000000              ...... .....

00006c60 <kb_col_index>:
    6c60:	00000010 00000011 00000012 00000013     ................
    6c70:	00000014 00000015 0000001b              ............

00006c7c <kb_row>:
    6c7c:	00000004 00000008 00000010 00000020     ............ ...
    6c8c:	00000040 00000080 00000400 00000800     @...............
    6c9c:	00001000 00002000                       ..... ..

00006ca4 <kb_row_index>:
    6ca4:	00000002 00000003 00000004 00000005     ................
    6cb4:	00000006 00000007 0000000a 0000000b     ................
    6cc4:	0000000c 0000000d                       ........

00006ccc <beelzebub.12955>:
    6ccc:	2e002d00 44003200 88005300 f300b600     .-...2.D.S......
    6cdc:	64012201 d4019201 08020702 5f023402     .".d.........4._
    6cec:	94027802 bb02a602 db02ca02 f902e802     .x..............
    6cfc:	7f031f03                                ....

00006d00 <belial.12952>:
    6d00:	f0f0f0f0 b0b0b0f0 b1b6b6b6 b7b7b1b1     ................
    6d10:	b2b2b2b7 bfb8b8b8 b9b3b3b3 b5b5b9b9     ................
    6d20:	babac2b5 bcbcbcba bebdbdbd f0f0f0be     ................
    6d30:	b1b1f0f0 b8b7b7b6 bcb8b8b8 c9c9bcbc     ................
    6d40:	35c9c9c9 0000363a                       ...5:6..

00006d48 <lucifer.12954>:
    6d48:	0852aa55 0d0d0d01 0d343434 34340d0d     U.R.....444...44
    6d58:	00000034 01242424 340f0f0f 08083434     4...$$$....444..
    6d68:	24240308 00780024 00007800 52aa5589     ..$$$.x..x...U.R
    6d78:	00cc0008 01707005 02030303 02d00000     .....pp.........
    6d88:	00505050 00000055                       PPP.U...

00006d90 <mulciber.12953>:
    6d90:	03020100 02010004 00020100 01000201     ................
    6da0:	02010002 00020100 01000201 01000002     ................
    6db0:	02010000 00020100 01000201 03020100     ................
    6dc0:	00000004 01000100 01000302 02010002     ................
    6dd0:	00000403 00000000 65530d0a 6c616972     ..........Serial
    6de0:	204b4f20 30303639 314e3820 00000d0a      OK 9600 8N1....

00006df0 <_global_impure_ptr>:
    6df0:	20000168                                h.. 

00006df4 <__sf_fake_stderr>:
	...

00006e14 <__sf_fake_stdin>:
	...

00006e34 <__sf_fake_stdout>:
	...
    6e54:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    6e64:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    6e74:	31300046 35343332 39383736 64636261     F.0123456789abcd
    6e84:	00006665                                ef..

00006e88 <_init>:
    6e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6e8a:	46c0      	nop			; (mov r8, r8)
    6e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    6e8e:	bc08      	pop	{r3}
    6e90:	469e      	mov	lr, r3
    6e92:	4770      	bx	lr

00006e94 <__init_array_start>:
    6e94:	000000dd 	.word	0x000000dd

00006e98 <_fini>:
    6e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6e9a:	46c0      	nop			; (mov r8, r8)
    6e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    6e9e:	bc08      	pop	{r3}
    6ea0:	469e      	mov	lr, r3
    6ea2:	4770      	bx	lr

00006ea4 <__fini_array_start>:
    6ea4:	000000b5 	.word	0x000000b5
