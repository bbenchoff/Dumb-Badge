
DumBadgeFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000034a8  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000074  20000000  000034a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000104  20000074  0000351c  00020074  2**2
                  ALLOC
  3 .stack        00002000  20000178  00003620  00020074  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
  6 .debug_info   00025a72  00000000  00000000  000200f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003824  00000000  00000000  00045b67  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00004c47  00000000  00000000  0004938b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000518  00000000  00000000  0004dfd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000610  00000000  00000000  0004e4ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001b72d  00000000  00000000  0004eafa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000be45  00000000  00000000  0006a227  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008eb70  00000000  00000000  0007606c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001434  00000000  00000000  00104bdc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	78 21 00 20 91 13 00 00 8d 13 00 00 8d 13 00 00     x!. ............
	...
      2c:	8d 13 00 00 00 00 00 00 00 00 00 00 8d 13 00 00     ................
      3c:	8d 13 00 00 8d 13 00 00 8d 13 00 00 8d 13 00 00     ................
      4c:	8d 13 00 00 8d 13 00 00 8d 13 00 00 8d 13 00 00     ................
      5c:	8d 13 00 00 8d 13 00 00 31 06 00 00 41 06 00 00     ........1...A...
      6c:	51 06 00 00 61 06 00 00 71 06 00 00 81 06 00 00     Q...a...q.......
      7c:	8d 13 00 00 8d 13 00 00 8d 13 00 00 8d 13 00 00     ................
      8c:	8d 13 00 00 8d 13 00 00 8d 13 00 00 8d 13 00 00     ................
      9c:	8d 13 00 00 8d 13 00 00 8d 13 00 00 8d 13 00 00     ................
      ac:	8d 13 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000074 	.word	0x20000074
      d4:	00000000 	.word	0x00000000
      d8:	000034a8 	.word	0x000034a8

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000078 	.word	0x20000078
     108:	000034a8 	.word	0x000034a8
     10c:	000034a8 	.word	0x000034a8
     110:	00000000 	.word	0x00000000

00000114 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     114:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     116:	2000      	movs	r0, #0
     118:	4b08      	ldr	r3, [pc, #32]	; (13c <delay_init+0x28>)
     11a:	4798      	blx	r3
     11c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     11e:	4c08      	ldr	r4, [pc, #32]	; (140 <delay_init+0x2c>)
     120:	21fa      	movs	r1, #250	; 0xfa
     122:	0089      	lsls	r1, r1, #2
     124:	47a0      	blx	r4
     126:	4b07      	ldr	r3, [pc, #28]	; (144 <delay_init+0x30>)
     128:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     12a:	4907      	ldr	r1, [pc, #28]	; (148 <delay_init+0x34>)
     12c:	0028      	movs	r0, r5
     12e:	47a0      	blx	r4
     130:	4b06      	ldr	r3, [pc, #24]	; (14c <delay_init+0x38>)
     132:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     134:	2205      	movs	r2, #5
     136:	4b06      	ldr	r3, [pc, #24]	; (150 <delay_init+0x3c>)
     138:	601a      	str	r2, [r3, #0]
}
     13a:	bd70      	pop	{r4, r5, r6, pc}
     13c:	0000111d 	.word	0x0000111d
     140:	00001dcd 	.word	0x00001dcd
     144:	20000000 	.word	0x20000000
     148:	000f4240 	.word	0x000f4240
     14c:	20000004 	.word	0x20000004
     150:	e000e010 	.word	0xe000e010

00000154 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     154:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     156:	4b08      	ldr	r3, [pc, #32]	; (178 <delay_cycles_ms+0x24>)
     158:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     15a:	4a08      	ldr	r2, [pc, #32]	; (17c <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     15c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     15e:	2180      	movs	r1, #128	; 0x80
     160:	0249      	lsls	r1, r1, #9
	while (n--) {
     162:	3801      	subs	r0, #1
     164:	d307      	bcc.n	176 <delay_cycles_ms+0x22>
	if (n > 0) {
     166:	2c00      	cmp	r4, #0
     168:	d0fb      	beq.n	162 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     16a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     16c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     16e:	6813      	ldr	r3, [r2, #0]
     170:	420b      	tst	r3, r1
     172:	d0fc      	beq.n	16e <delay_cycles_ms+0x1a>
     174:	e7f5      	b.n	162 <delay_cycles_ms+0xe>
	}
}
     176:	bd30      	pop	{r4, r5, pc}
     178:	20000000 	.word	0x20000000
     17c:	e000e010 	.word	0xe000e010

00000180 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     180:	4b0c      	ldr	r3, [pc, #48]	; (1b4 <cpu_irq_enter_critical+0x34>)
     182:	681b      	ldr	r3, [r3, #0]
     184:	2b00      	cmp	r3, #0
     186:	d106      	bne.n	196 <cpu_irq_enter_critical+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     188:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     18c:	2b00      	cmp	r3, #0
     18e:	d007      	beq.n	1a0 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     190:	2200      	movs	r2, #0
     192:	4b09      	ldr	r3, [pc, #36]	; (1b8 <cpu_irq_enter_critical+0x38>)
     194:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     196:	4a07      	ldr	r2, [pc, #28]	; (1b4 <cpu_irq_enter_critical+0x34>)
     198:	6813      	ldr	r3, [r2, #0]
     19a:	3301      	adds	r3, #1
     19c:	6013      	str	r3, [r2, #0]
}
     19e:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     1a0:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     1a2:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     1a6:	2200      	movs	r2, #0
     1a8:	4b04      	ldr	r3, [pc, #16]	; (1bc <cpu_irq_enter_critical+0x3c>)
     1aa:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     1ac:	3201      	adds	r2, #1
     1ae:	4b02      	ldr	r3, [pc, #8]	; (1b8 <cpu_irq_enter_critical+0x38>)
     1b0:	701a      	strb	r2, [r3, #0]
     1b2:	e7f0      	b.n	196 <cpu_irq_enter_critical+0x16>
     1b4:	20000090 	.word	0x20000090
     1b8:	20000094 	.word	0x20000094
     1bc:	20000008 	.word	0x20000008

000001c0 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     1c0:	4b08      	ldr	r3, [pc, #32]	; (1e4 <cpu_irq_leave_critical+0x24>)
     1c2:	681a      	ldr	r2, [r3, #0]
     1c4:	3a01      	subs	r2, #1
     1c6:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     1c8:	681b      	ldr	r3, [r3, #0]
     1ca:	2b00      	cmp	r3, #0
     1cc:	d109      	bne.n	1e2 <cpu_irq_leave_critical+0x22>
     1ce:	4b06      	ldr	r3, [pc, #24]	; (1e8 <cpu_irq_leave_critical+0x28>)
     1d0:	781b      	ldrb	r3, [r3, #0]
     1d2:	2b00      	cmp	r3, #0
     1d4:	d005      	beq.n	1e2 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     1d6:	2201      	movs	r2, #1
     1d8:	4b04      	ldr	r3, [pc, #16]	; (1ec <cpu_irq_leave_critical+0x2c>)
     1da:	701a      	strb	r2, [r3, #0]
     1dc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     1e0:	b662      	cpsie	i
	}
}
     1e2:	4770      	bx	lr
     1e4:	20000090 	.word	0x20000090
     1e8:	20000094 	.word	0x20000094
     1ec:	20000008 	.word	0x20000008

000001f0 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     1f0:	b5f0      	push	{r4, r5, r6, r7, lr}
     1f2:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     1f4:	ac01      	add	r4, sp, #4
     1f6:	2501      	movs	r5, #1
     1f8:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     1fa:	2700      	movs	r7, #0
     1fc:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     1fe:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     200:	0021      	movs	r1, r4
     202:	203e      	movs	r0, #62	; 0x3e
     204:	4e06      	ldr	r6, [pc, #24]	; (220 <system_board_init+0x30>)
     206:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     208:	2280      	movs	r2, #128	; 0x80
     20a:	05d2      	lsls	r2, r2, #23
     20c:	4b05      	ldr	r3, [pc, #20]	; (224 <system_board_init+0x34>)
     20e:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     210:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     212:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     214:	0021      	movs	r1, r4
     216:	200f      	movs	r0, #15
     218:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
     21a:	b003      	add	sp, #12
     21c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     21e:	46c0      	nop			; (mov r8, r8)
     220:	00000229 	.word	0x00000229
     224:	41004480 	.word	0x41004480

00000228 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     228:	b500      	push	{lr}
     22a:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     22c:	ab01      	add	r3, sp, #4
     22e:	2280      	movs	r2, #128	; 0x80
     230:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     232:	780a      	ldrb	r2, [r1, #0]
     234:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     236:	784a      	ldrb	r2, [r1, #1]
     238:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     23a:	788a      	ldrb	r2, [r1, #2]
     23c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     23e:	0019      	movs	r1, r3
     240:	4b01      	ldr	r3, [pc, #4]	; (248 <port_pin_set_config+0x20>)
     242:	4798      	blx	r3
}
     244:	b003      	add	sp, #12
     246:	bd00      	pop	{pc}
     248:	0000132d 	.word	0x0000132d

0000024c <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     24c:	b5f0      	push	{r4, r5, r6, r7, lr}
     24e:	46de      	mov	lr, fp
     250:	4657      	mov	r7, sl
     252:	464e      	mov	r6, r9
     254:	4645      	mov	r5, r8
     256:	b5e0      	push	{r5, r6, r7, lr}
     258:	b087      	sub	sp, #28
     25a:	4680      	mov	r8, r0
     25c:	9104      	str	r1, [sp, #16]
     25e:	0016      	movs	r6, r2
     260:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     262:	2200      	movs	r2, #0
     264:	2300      	movs	r3, #0
     266:	2100      	movs	r1, #0
     268:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     26a:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     26c:	2001      	movs	r0, #1
     26e:	0021      	movs	r1, r4
     270:	9600      	str	r6, [sp, #0]
     272:	9701      	str	r7, [sp, #4]
     274:	465c      	mov	r4, fp
     276:	9403      	str	r4, [sp, #12]
     278:	4644      	mov	r4, r8
     27a:	9405      	str	r4, [sp, #20]
     27c:	e013      	b.n	2a6 <long_division+0x5a>
     27e:	2420      	movs	r4, #32
     280:	1a64      	subs	r4, r4, r1
     282:	0005      	movs	r5, r0
     284:	40e5      	lsrs	r5, r4
     286:	46a8      	mov	r8, r5
     288:	e014      	b.n	2b4 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     28a:	9c00      	ldr	r4, [sp, #0]
     28c:	9d01      	ldr	r5, [sp, #4]
     28e:	1b12      	subs	r2, r2, r4
     290:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     292:	465c      	mov	r4, fp
     294:	464d      	mov	r5, r9
     296:	432c      	orrs	r4, r5
     298:	46a3      	mov	fp, r4
     29a:	9c03      	ldr	r4, [sp, #12]
     29c:	4645      	mov	r5, r8
     29e:	432c      	orrs	r4, r5
     2a0:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     2a2:	3901      	subs	r1, #1
     2a4:	d325      	bcc.n	2f2 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     2a6:	2420      	movs	r4, #32
     2a8:	4264      	negs	r4, r4
     2aa:	190c      	adds	r4, r1, r4
     2ac:	d4e7      	bmi.n	27e <long_division+0x32>
     2ae:	0005      	movs	r5, r0
     2b0:	40a5      	lsls	r5, r4
     2b2:	46a8      	mov	r8, r5
     2b4:	0004      	movs	r4, r0
     2b6:	408c      	lsls	r4, r1
     2b8:	46a1      	mov	r9, r4
		r = r << 1;
     2ba:	1892      	adds	r2, r2, r2
     2bc:	415b      	adcs	r3, r3
     2be:	0014      	movs	r4, r2
     2c0:	001d      	movs	r5, r3
		if (n & bit_shift) {
     2c2:	9e05      	ldr	r6, [sp, #20]
     2c4:	464f      	mov	r7, r9
     2c6:	403e      	ands	r6, r7
     2c8:	46b4      	mov	ip, r6
     2ca:	9e04      	ldr	r6, [sp, #16]
     2cc:	4647      	mov	r7, r8
     2ce:	403e      	ands	r6, r7
     2d0:	46b2      	mov	sl, r6
     2d2:	4666      	mov	r6, ip
     2d4:	4657      	mov	r7, sl
     2d6:	433e      	orrs	r6, r7
     2d8:	d003      	beq.n	2e2 <long_division+0x96>
			r |= 0x01;
     2da:	0006      	movs	r6, r0
     2dc:	4326      	orrs	r6, r4
     2de:	0032      	movs	r2, r6
     2e0:	002b      	movs	r3, r5
		if (r >= d) {
     2e2:	9c00      	ldr	r4, [sp, #0]
     2e4:	9d01      	ldr	r5, [sp, #4]
     2e6:	429d      	cmp	r5, r3
     2e8:	d8db      	bhi.n	2a2 <long_division+0x56>
     2ea:	d1ce      	bne.n	28a <long_division+0x3e>
     2ec:	4294      	cmp	r4, r2
     2ee:	d8d8      	bhi.n	2a2 <long_division+0x56>
     2f0:	e7cb      	b.n	28a <long_division+0x3e>
     2f2:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     2f4:	4658      	mov	r0, fp
     2f6:	0019      	movs	r1, r3
     2f8:	b007      	add	sp, #28
     2fa:	bc3c      	pop	{r2, r3, r4, r5}
     2fc:	4690      	mov	r8, r2
     2fe:	4699      	mov	r9, r3
     300:	46a2      	mov	sl, r4
     302:	46ab      	mov	fp, r5
     304:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000306 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     306:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     308:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     30a:	2340      	movs	r3, #64	; 0x40
     30c:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     30e:	4281      	cmp	r1, r0
     310:	d202      	bcs.n	318 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     312:	0018      	movs	r0, r3
     314:	bd10      	pop	{r4, pc}
		baud_calculated++;
     316:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     318:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     31a:	1c63      	adds	r3, r4, #1
     31c:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     31e:	4288      	cmp	r0, r1
     320:	d9f9      	bls.n	316 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     322:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     324:	2cff      	cmp	r4, #255	; 0xff
     326:	d8f4      	bhi.n	312 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     328:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     32a:	2300      	movs	r3, #0
     32c:	e7f1      	b.n	312 <_sercom_get_sync_baud_val+0xc>
	...

00000330 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     330:	b5f0      	push	{r4, r5, r6, r7, lr}
     332:	b083      	sub	sp, #12
     334:	000f      	movs	r7, r1
     336:	0016      	movs	r6, r2
     338:	aa08      	add	r2, sp, #32
     33a:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     33c:	0004      	movs	r4, r0
     33e:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     340:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     342:	42bc      	cmp	r4, r7
     344:	d902      	bls.n	34c <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     346:	0010      	movs	r0, r2
     348:	b003      	add	sp, #12
     34a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     34c:	2b00      	cmp	r3, #0
     34e:	d114      	bne.n	37a <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     350:	0002      	movs	r2, r0
     352:	0008      	movs	r0, r1
     354:	2100      	movs	r1, #0
     356:	4c19      	ldr	r4, [pc, #100]	; (3bc <_sercom_get_async_baud_val+0x8c>)
     358:	47a0      	blx	r4
     35a:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     35c:	003a      	movs	r2, r7
     35e:	2300      	movs	r3, #0
     360:	2000      	movs	r0, #0
     362:	4c17      	ldr	r4, [pc, #92]	; (3c0 <_sercom_get_async_baud_val+0x90>)
     364:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     366:	2200      	movs	r2, #0
     368:	2301      	movs	r3, #1
     36a:	1a12      	subs	r2, r2, r0
     36c:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     36e:	0c12      	lsrs	r2, r2, #16
     370:	041b      	lsls	r3, r3, #16
     372:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     374:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     376:	2200      	movs	r2, #0
     378:	e7e5      	b.n	346 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     37a:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     37c:	2b01      	cmp	r3, #1
     37e:	d1f9      	bne.n	374 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     380:	000a      	movs	r2, r1
     382:	2300      	movs	r3, #0
     384:	2100      	movs	r1, #0
     386:	4c0d      	ldr	r4, [pc, #52]	; (3bc <_sercom_get_async_baud_val+0x8c>)
     388:	47a0      	blx	r4
     38a:	0002      	movs	r2, r0
     38c:	000b      	movs	r3, r1
     38e:	9200      	str	r2, [sp, #0]
     390:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     392:	0038      	movs	r0, r7
     394:	2100      	movs	r1, #0
     396:	4c0a      	ldr	r4, [pc, #40]	; (3c0 <_sercom_get_async_baud_val+0x90>)
     398:	47a0      	blx	r4
     39a:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     39c:	2380      	movs	r3, #128	; 0x80
     39e:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     3a0:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     3a2:	4298      	cmp	r0, r3
     3a4:	d8cf      	bhi.n	346 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     3a6:	0f79      	lsrs	r1, r7, #29
     3a8:	00f8      	lsls	r0, r7, #3
     3aa:	9a00      	ldr	r2, [sp, #0]
     3ac:	9b01      	ldr	r3, [sp, #4]
     3ae:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     3b0:	00ea      	lsls	r2, r5, #3
     3b2:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     3b4:	b2d2      	uxtb	r2, r2
     3b6:	0352      	lsls	r2, r2, #13
     3b8:	432a      	orrs	r2, r5
     3ba:	e7db      	b.n	374 <_sercom_get_async_baud_val+0x44>
     3bc:	000020b9 	.word	0x000020b9
     3c0:	0000024d 	.word	0x0000024d

000003c4 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     3c4:	b510      	push	{r4, lr}
     3c6:	b082      	sub	sp, #8
     3c8:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     3ca:	4b0e      	ldr	r3, [pc, #56]	; (404 <sercom_set_gclk_generator+0x40>)
     3cc:	781b      	ldrb	r3, [r3, #0]
     3ce:	2b00      	cmp	r3, #0
     3d0:	d007      	beq.n	3e2 <sercom_set_gclk_generator+0x1e>
     3d2:	2900      	cmp	r1, #0
     3d4:	d105      	bne.n	3e2 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     3d6:	4b0b      	ldr	r3, [pc, #44]	; (404 <sercom_set_gclk_generator+0x40>)
     3d8:	785b      	ldrb	r3, [r3, #1]
     3da:	4283      	cmp	r3, r0
     3dc:	d010      	beq.n	400 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     3de:	201d      	movs	r0, #29
     3e0:	e00c      	b.n	3fc <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     3e2:	a901      	add	r1, sp, #4
     3e4:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     3e6:	2013      	movs	r0, #19
     3e8:	4b07      	ldr	r3, [pc, #28]	; (408 <sercom_set_gclk_generator+0x44>)
     3ea:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     3ec:	2013      	movs	r0, #19
     3ee:	4b07      	ldr	r3, [pc, #28]	; (40c <sercom_set_gclk_generator+0x48>)
     3f0:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     3f2:	4b04      	ldr	r3, [pc, #16]	; (404 <sercom_set_gclk_generator+0x40>)
     3f4:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     3f6:	2201      	movs	r2, #1
     3f8:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     3fa:	2000      	movs	r0, #0
}
     3fc:	b002      	add	sp, #8
     3fe:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     400:	2000      	movs	r0, #0
     402:	e7fb      	b.n	3fc <sercom_set_gclk_generator+0x38>
     404:	20000098 	.word	0x20000098
     408:	00001235 	.word	0x00001235
     40c:	000011a9 	.word	0x000011a9

00000410 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     410:	4b40      	ldr	r3, [pc, #256]	; (514 <_sercom_get_default_pad+0x104>)
     412:	4298      	cmp	r0, r3
     414:	d031      	beq.n	47a <_sercom_get_default_pad+0x6a>
     416:	d90a      	bls.n	42e <_sercom_get_default_pad+0x1e>
     418:	4b3f      	ldr	r3, [pc, #252]	; (518 <_sercom_get_default_pad+0x108>)
     41a:	4298      	cmp	r0, r3
     41c:	d04d      	beq.n	4ba <_sercom_get_default_pad+0xaa>
     41e:	4b3f      	ldr	r3, [pc, #252]	; (51c <_sercom_get_default_pad+0x10c>)
     420:	4298      	cmp	r0, r3
     422:	d05a      	beq.n	4da <_sercom_get_default_pad+0xca>
     424:	4b3e      	ldr	r3, [pc, #248]	; (520 <_sercom_get_default_pad+0x110>)
     426:	4298      	cmp	r0, r3
     428:	d037      	beq.n	49a <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     42a:	2000      	movs	r0, #0
}
     42c:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     42e:	4b3d      	ldr	r3, [pc, #244]	; (524 <_sercom_get_default_pad+0x114>)
     430:	4298      	cmp	r0, r3
     432:	d00c      	beq.n	44e <_sercom_get_default_pad+0x3e>
     434:	4b3c      	ldr	r3, [pc, #240]	; (528 <_sercom_get_default_pad+0x118>)
     436:	4298      	cmp	r0, r3
     438:	d1f7      	bne.n	42a <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     43a:	2901      	cmp	r1, #1
     43c:	d017      	beq.n	46e <_sercom_get_default_pad+0x5e>
     43e:	2900      	cmp	r1, #0
     440:	d05d      	beq.n	4fe <_sercom_get_default_pad+0xee>
     442:	2902      	cmp	r1, #2
     444:	d015      	beq.n	472 <_sercom_get_default_pad+0x62>
     446:	2903      	cmp	r1, #3
     448:	d015      	beq.n	476 <_sercom_get_default_pad+0x66>
	return 0;
     44a:	2000      	movs	r0, #0
     44c:	e7ee      	b.n	42c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     44e:	2901      	cmp	r1, #1
     450:	d007      	beq.n	462 <_sercom_get_default_pad+0x52>
     452:	2900      	cmp	r1, #0
     454:	d051      	beq.n	4fa <_sercom_get_default_pad+0xea>
     456:	2902      	cmp	r1, #2
     458:	d005      	beq.n	466 <_sercom_get_default_pad+0x56>
     45a:	2903      	cmp	r1, #3
     45c:	d005      	beq.n	46a <_sercom_get_default_pad+0x5a>
	return 0;
     45e:	2000      	movs	r0, #0
     460:	e7e4      	b.n	42c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     462:	4832      	ldr	r0, [pc, #200]	; (52c <_sercom_get_default_pad+0x11c>)
     464:	e7e2      	b.n	42c <_sercom_get_default_pad+0x1c>
     466:	4832      	ldr	r0, [pc, #200]	; (530 <_sercom_get_default_pad+0x120>)
     468:	e7e0      	b.n	42c <_sercom_get_default_pad+0x1c>
     46a:	4832      	ldr	r0, [pc, #200]	; (534 <_sercom_get_default_pad+0x124>)
     46c:	e7de      	b.n	42c <_sercom_get_default_pad+0x1c>
     46e:	4832      	ldr	r0, [pc, #200]	; (538 <_sercom_get_default_pad+0x128>)
     470:	e7dc      	b.n	42c <_sercom_get_default_pad+0x1c>
     472:	4832      	ldr	r0, [pc, #200]	; (53c <_sercom_get_default_pad+0x12c>)
     474:	e7da      	b.n	42c <_sercom_get_default_pad+0x1c>
     476:	4832      	ldr	r0, [pc, #200]	; (540 <_sercom_get_default_pad+0x130>)
     478:	e7d8      	b.n	42c <_sercom_get_default_pad+0x1c>
     47a:	2901      	cmp	r1, #1
     47c:	d007      	beq.n	48e <_sercom_get_default_pad+0x7e>
     47e:	2900      	cmp	r1, #0
     480:	d03f      	beq.n	502 <_sercom_get_default_pad+0xf2>
     482:	2902      	cmp	r1, #2
     484:	d005      	beq.n	492 <_sercom_get_default_pad+0x82>
     486:	2903      	cmp	r1, #3
     488:	d005      	beq.n	496 <_sercom_get_default_pad+0x86>
	return 0;
     48a:	2000      	movs	r0, #0
     48c:	e7ce      	b.n	42c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     48e:	482d      	ldr	r0, [pc, #180]	; (544 <_sercom_get_default_pad+0x134>)
     490:	e7cc      	b.n	42c <_sercom_get_default_pad+0x1c>
     492:	482d      	ldr	r0, [pc, #180]	; (548 <_sercom_get_default_pad+0x138>)
     494:	e7ca      	b.n	42c <_sercom_get_default_pad+0x1c>
     496:	482d      	ldr	r0, [pc, #180]	; (54c <_sercom_get_default_pad+0x13c>)
     498:	e7c8      	b.n	42c <_sercom_get_default_pad+0x1c>
     49a:	2901      	cmp	r1, #1
     49c:	d007      	beq.n	4ae <_sercom_get_default_pad+0x9e>
     49e:	2900      	cmp	r1, #0
     4a0:	d031      	beq.n	506 <_sercom_get_default_pad+0xf6>
     4a2:	2902      	cmp	r1, #2
     4a4:	d005      	beq.n	4b2 <_sercom_get_default_pad+0xa2>
     4a6:	2903      	cmp	r1, #3
     4a8:	d005      	beq.n	4b6 <_sercom_get_default_pad+0xa6>
	return 0;
     4aa:	2000      	movs	r0, #0
     4ac:	e7be      	b.n	42c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     4ae:	4828      	ldr	r0, [pc, #160]	; (550 <_sercom_get_default_pad+0x140>)
     4b0:	e7bc      	b.n	42c <_sercom_get_default_pad+0x1c>
     4b2:	4828      	ldr	r0, [pc, #160]	; (554 <_sercom_get_default_pad+0x144>)
     4b4:	e7ba      	b.n	42c <_sercom_get_default_pad+0x1c>
     4b6:	4828      	ldr	r0, [pc, #160]	; (558 <_sercom_get_default_pad+0x148>)
     4b8:	e7b8      	b.n	42c <_sercom_get_default_pad+0x1c>
     4ba:	2901      	cmp	r1, #1
     4bc:	d007      	beq.n	4ce <_sercom_get_default_pad+0xbe>
     4be:	2900      	cmp	r1, #0
     4c0:	d023      	beq.n	50a <_sercom_get_default_pad+0xfa>
     4c2:	2902      	cmp	r1, #2
     4c4:	d005      	beq.n	4d2 <_sercom_get_default_pad+0xc2>
     4c6:	2903      	cmp	r1, #3
     4c8:	d005      	beq.n	4d6 <_sercom_get_default_pad+0xc6>
	return 0;
     4ca:	2000      	movs	r0, #0
     4cc:	e7ae      	b.n	42c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     4ce:	4823      	ldr	r0, [pc, #140]	; (55c <_sercom_get_default_pad+0x14c>)
     4d0:	e7ac      	b.n	42c <_sercom_get_default_pad+0x1c>
     4d2:	4823      	ldr	r0, [pc, #140]	; (560 <_sercom_get_default_pad+0x150>)
     4d4:	e7aa      	b.n	42c <_sercom_get_default_pad+0x1c>
     4d6:	4823      	ldr	r0, [pc, #140]	; (564 <_sercom_get_default_pad+0x154>)
     4d8:	e7a8      	b.n	42c <_sercom_get_default_pad+0x1c>
     4da:	2901      	cmp	r1, #1
     4dc:	d007      	beq.n	4ee <_sercom_get_default_pad+0xde>
     4de:	2900      	cmp	r1, #0
     4e0:	d015      	beq.n	50e <_sercom_get_default_pad+0xfe>
     4e2:	2902      	cmp	r1, #2
     4e4:	d005      	beq.n	4f2 <_sercom_get_default_pad+0xe2>
     4e6:	2903      	cmp	r1, #3
     4e8:	d005      	beq.n	4f6 <_sercom_get_default_pad+0xe6>
	return 0;
     4ea:	2000      	movs	r0, #0
     4ec:	e79e      	b.n	42c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     4ee:	481e      	ldr	r0, [pc, #120]	; (568 <_sercom_get_default_pad+0x158>)
     4f0:	e79c      	b.n	42c <_sercom_get_default_pad+0x1c>
     4f2:	481e      	ldr	r0, [pc, #120]	; (56c <_sercom_get_default_pad+0x15c>)
     4f4:	e79a      	b.n	42c <_sercom_get_default_pad+0x1c>
     4f6:	481e      	ldr	r0, [pc, #120]	; (570 <_sercom_get_default_pad+0x160>)
     4f8:	e798      	b.n	42c <_sercom_get_default_pad+0x1c>
     4fa:	481e      	ldr	r0, [pc, #120]	; (574 <_sercom_get_default_pad+0x164>)
     4fc:	e796      	b.n	42c <_sercom_get_default_pad+0x1c>
     4fe:	2003      	movs	r0, #3
     500:	e794      	b.n	42c <_sercom_get_default_pad+0x1c>
     502:	481d      	ldr	r0, [pc, #116]	; (578 <_sercom_get_default_pad+0x168>)
     504:	e792      	b.n	42c <_sercom_get_default_pad+0x1c>
     506:	481d      	ldr	r0, [pc, #116]	; (57c <_sercom_get_default_pad+0x16c>)
     508:	e790      	b.n	42c <_sercom_get_default_pad+0x1c>
     50a:	481d      	ldr	r0, [pc, #116]	; (580 <_sercom_get_default_pad+0x170>)
     50c:	e78e      	b.n	42c <_sercom_get_default_pad+0x1c>
     50e:	481d      	ldr	r0, [pc, #116]	; (584 <_sercom_get_default_pad+0x174>)
     510:	e78c      	b.n	42c <_sercom_get_default_pad+0x1c>
     512:	46c0      	nop			; (mov r8, r8)
     514:	42001000 	.word	0x42001000
     518:	42001800 	.word	0x42001800
     51c:	42001c00 	.word	0x42001c00
     520:	42001400 	.word	0x42001400
     524:	42000800 	.word	0x42000800
     528:	42000c00 	.word	0x42000c00
     52c:	00050003 	.word	0x00050003
     530:	00060003 	.word	0x00060003
     534:	00070003 	.word	0x00070003
     538:	00010003 	.word	0x00010003
     53c:	001e0003 	.word	0x001e0003
     540:	001f0003 	.word	0x001f0003
     544:	00090003 	.word	0x00090003
     548:	000a0003 	.word	0x000a0003
     54c:	000b0003 	.word	0x000b0003
     550:	00110003 	.word	0x00110003
     554:	00120003 	.word	0x00120003
     558:	00130003 	.word	0x00130003
     55c:	000d0003 	.word	0x000d0003
     560:	000e0003 	.word	0x000e0003
     564:	000f0003 	.word	0x000f0003
     568:	00170003 	.word	0x00170003
     56c:	00180003 	.word	0x00180003
     570:	00190003 	.word	0x00190003
     574:	00040003 	.word	0x00040003
     578:	00080003 	.word	0x00080003
     57c:	00100003 	.word	0x00100003
     580:	000c0003 	.word	0x000c0003
     584:	00160003 	.word	0x00160003

00000588 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     588:	b530      	push	{r4, r5, lr}
     58a:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     58c:	4b0b      	ldr	r3, [pc, #44]	; (5bc <_sercom_get_sercom_inst_index+0x34>)
     58e:	466a      	mov	r2, sp
     590:	cb32      	ldmia	r3!, {r1, r4, r5}
     592:	c232      	stmia	r2!, {r1, r4, r5}
     594:	cb32      	ldmia	r3!, {r1, r4, r5}
     596:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     598:	9b00      	ldr	r3, [sp, #0]
     59a:	4283      	cmp	r3, r0
     59c:	d00b      	beq.n	5b6 <_sercom_get_sercom_inst_index+0x2e>
     59e:	2301      	movs	r3, #1
     5a0:	009a      	lsls	r2, r3, #2
     5a2:	4669      	mov	r1, sp
     5a4:	5852      	ldr	r2, [r2, r1]
     5a6:	4282      	cmp	r2, r0
     5a8:	d006      	beq.n	5b8 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     5aa:	3301      	adds	r3, #1
     5ac:	2b06      	cmp	r3, #6
     5ae:	d1f7      	bne.n	5a0 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     5b0:	2000      	movs	r0, #0
}
     5b2:	b007      	add	sp, #28
     5b4:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     5b6:	2300      	movs	r3, #0
			return i;
     5b8:	b2d8      	uxtb	r0, r3
     5ba:	e7fa      	b.n	5b2 <_sercom_get_sercom_inst_index+0x2a>
     5bc:	0000315c 	.word	0x0000315c

000005c0 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     5c0:	4770      	bx	lr
	...

000005c4 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     5c4:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     5c6:	4b0a      	ldr	r3, [pc, #40]	; (5f0 <_sercom_set_handler+0x2c>)
     5c8:	781b      	ldrb	r3, [r3, #0]
     5ca:	2b00      	cmp	r3, #0
     5cc:	d10c      	bne.n	5e8 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     5ce:	4f09      	ldr	r7, [pc, #36]	; (5f4 <_sercom_set_handler+0x30>)
     5d0:	4e09      	ldr	r6, [pc, #36]	; (5f8 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     5d2:	4d0a      	ldr	r5, [pc, #40]	; (5fc <_sercom_set_handler+0x38>)
     5d4:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     5d6:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     5d8:	195a      	adds	r2, r3, r5
     5da:	6014      	str	r4, [r2, #0]
     5dc:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     5de:	2b18      	cmp	r3, #24
     5e0:	d1f9      	bne.n	5d6 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
     5e2:	2201      	movs	r2, #1
     5e4:	4b02      	ldr	r3, [pc, #8]	; (5f0 <_sercom_set_handler+0x2c>)
     5e6:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     5e8:	0080      	lsls	r0, r0, #2
     5ea:	4b02      	ldr	r3, [pc, #8]	; (5f4 <_sercom_set_handler+0x30>)
     5ec:	50c1      	str	r1, [r0, r3]
}
     5ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
     5f0:	2000009a 	.word	0x2000009a
     5f4:	2000009c 	.word	0x2000009c
     5f8:	000005c1 	.word	0x000005c1
     5fc:	200000dc 	.word	0x200000dc

00000600 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     600:	b500      	push	{lr}
     602:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     604:	2309      	movs	r3, #9
     606:	466a      	mov	r2, sp
     608:	7013      	strb	r3, [r2, #0]
     60a:	3301      	adds	r3, #1
     60c:	7053      	strb	r3, [r2, #1]
     60e:	3301      	adds	r3, #1
     610:	7093      	strb	r3, [r2, #2]
     612:	3301      	adds	r3, #1
     614:	70d3      	strb	r3, [r2, #3]
     616:	3301      	adds	r3, #1
     618:	7113      	strb	r3, [r2, #4]
     61a:	3301      	adds	r3, #1
     61c:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     61e:	4b03      	ldr	r3, [pc, #12]	; (62c <_sercom_get_interrupt_vector+0x2c>)
     620:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     622:	466b      	mov	r3, sp
     624:	5618      	ldrsb	r0, [r3, r0]
}
     626:	b003      	add	sp, #12
     628:	bd00      	pop	{pc}
     62a:	46c0      	nop			; (mov r8, r8)
     62c:	00000589 	.word	0x00000589

00000630 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     630:	b510      	push	{r4, lr}
     632:	4b02      	ldr	r3, [pc, #8]	; (63c <SERCOM0_Handler+0xc>)
     634:	681b      	ldr	r3, [r3, #0]
     636:	2000      	movs	r0, #0
     638:	4798      	blx	r3
     63a:	bd10      	pop	{r4, pc}
     63c:	2000009c 	.word	0x2000009c

00000640 <SERCOM1_Handler>:
     640:	b510      	push	{r4, lr}
     642:	4b02      	ldr	r3, [pc, #8]	; (64c <SERCOM1_Handler+0xc>)
     644:	685b      	ldr	r3, [r3, #4]
     646:	2001      	movs	r0, #1
     648:	4798      	blx	r3
     64a:	bd10      	pop	{r4, pc}
     64c:	2000009c 	.word	0x2000009c

00000650 <SERCOM2_Handler>:
     650:	b510      	push	{r4, lr}
     652:	4b02      	ldr	r3, [pc, #8]	; (65c <SERCOM2_Handler+0xc>)
     654:	689b      	ldr	r3, [r3, #8]
     656:	2002      	movs	r0, #2
     658:	4798      	blx	r3
     65a:	bd10      	pop	{r4, pc}
     65c:	2000009c 	.word	0x2000009c

00000660 <SERCOM3_Handler>:
     660:	b510      	push	{r4, lr}
     662:	4b02      	ldr	r3, [pc, #8]	; (66c <SERCOM3_Handler+0xc>)
     664:	68db      	ldr	r3, [r3, #12]
     666:	2003      	movs	r0, #3
     668:	4798      	blx	r3
     66a:	bd10      	pop	{r4, pc}
     66c:	2000009c 	.word	0x2000009c

00000670 <SERCOM4_Handler>:
     670:	b510      	push	{r4, lr}
     672:	4b02      	ldr	r3, [pc, #8]	; (67c <SERCOM4_Handler+0xc>)
     674:	691b      	ldr	r3, [r3, #16]
     676:	2004      	movs	r0, #4
     678:	4798      	blx	r3
     67a:	bd10      	pop	{r4, pc}
     67c:	2000009c 	.word	0x2000009c

00000680 <SERCOM5_Handler>:
     680:	b510      	push	{r4, lr}
     682:	4b02      	ldr	r3, [pc, #8]	; (68c <SERCOM5_Handler+0xc>)
     684:	695b      	ldr	r3, [r3, #20]
     686:	2005      	movs	r0, #5
     688:	4798      	blx	r3
     68a:	bd10      	pop	{r4, pc}
     68c:	2000009c 	.word	0x2000009c

00000690 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     690:	b5f0      	push	{r4, r5, r6, r7, lr}
     692:	46de      	mov	lr, fp
     694:	4657      	mov	r7, sl
     696:	464e      	mov	r6, r9
     698:	4645      	mov	r5, r8
     69a:	b5e0      	push	{r5, r6, r7, lr}
     69c:	b091      	sub	sp, #68	; 0x44
     69e:	0005      	movs	r5, r0
     6a0:	000c      	movs	r4, r1
     6a2:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     6a4:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     6a6:	0008      	movs	r0, r1
     6a8:	4bba      	ldr	r3, [pc, #744]	; (994 <usart_init+0x304>)
     6aa:	4798      	blx	r3
     6ac:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     6ae:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     6b0:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     6b2:	07db      	lsls	r3, r3, #31
     6b4:	d506      	bpl.n	6c4 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     6b6:	b011      	add	sp, #68	; 0x44
     6b8:	bc3c      	pop	{r2, r3, r4, r5}
     6ba:	4690      	mov	r8, r2
     6bc:	4699      	mov	r9, r3
     6be:	46a2      	mov	sl, r4
     6c0:	46ab      	mov	fp, r5
     6c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     6c4:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
     6c6:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     6c8:	079b      	lsls	r3, r3, #30
     6ca:	d4f4      	bmi.n	6b6 <usart_init+0x26>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     6cc:	49b2      	ldr	r1, [pc, #712]	; (998 <usart_init+0x308>)
     6ce:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     6d0:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     6d2:	2301      	movs	r3, #1
     6d4:	40bb      	lsls	r3, r7
     6d6:	4303      	orrs	r3, r0
     6d8:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     6da:	a90f      	add	r1, sp, #60	; 0x3c
     6dc:	272d      	movs	r7, #45	; 0x2d
     6de:	5df3      	ldrb	r3, [r6, r7]
     6e0:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     6e2:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     6e4:	b2d3      	uxtb	r3, r2
     6e6:	9302      	str	r3, [sp, #8]
     6e8:	0018      	movs	r0, r3
     6ea:	4bac      	ldr	r3, [pc, #688]	; (99c <usart_init+0x30c>)
     6ec:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     6ee:	9802      	ldr	r0, [sp, #8]
     6f0:	4bab      	ldr	r3, [pc, #684]	; (9a0 <usart_init+0x310>)
     6f2:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     6f4:	5df0      	ldrb	r0, [r6, r7]
     6f6:	2100      	movs	r1, #0
     6f8:	4baa      	ldr	r3, [pc, #680]	; (9a4 <usart_init+0x314>)
     6fa:	4798      	blx	r3
	module->character_size = config->character_size;
     6fc:	7af3      	ldrb	r3, [r6, #11]
     6fe:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
     700:	2324      	movs	r3, #36	; 0x24
     702:	5cf3      	ldrb	r3, [r6, r3]
     704:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     706:	2325      	movs	r3, #37	; 0x25
     708:	5cf3      	ldrb	r3, [r6, r3]
     70a:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
     70c:	7ef3      	ldrb	r3, [r6, #27]
     70e:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     710:	7f33      	ldrb	r3, [r6, #28]
     712:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
     714:	682b      	ldr	r3, [r5, #0]
     716:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     718:	0018      	movs	r0, r3
     71a:	4b9e      	ldr	r3, [pc, #632]	; (994 <usart_init+0x304>)
     71c:	4798      	blx	r3
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     71e:	3014      	adds	r0, #20
	uint16_t baud  = 0;
     720:	2200      	movs	r2, #0
     722:	230e      	movs	r3, #14
     724:	a906      	add	r1, sp, #24
     726:	468c      	mov	ip, r1
     728:	4463      	add	r3, ip
     72a:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
     72c:	8a32      	ldrh	r2, [r6, #16]
     72e:	9202      	str	r2, [sp, #8]
     730:	2380      	movs	r3, #128	; 0x80
     732:	01db      	lsls	r3, r3, #7
     734:	429a      	cmp	r2, r3
     736:	d100      	bne.n	73a <usart_init+0xaa>
     738:	e09a      	b.n	870 <usart_init+0x1e0>
     73a:	d90f      	bls.n	75c <usart_init+0xcc>
     73c:	23c0      	movs	r3, #192	; 0xc0
     73e:	01db      	lsls	r3, r3, #7
     740:	9a02      	ldr	r2, [sp, #8]
     742:	429a      	cmp	r2, r3
     744:	d100      	bne.n	748 <usart_init+0xb8>
     746:	e08e      	b.n	866 <usart_init+0x1d6>
     748:	2380      	movs	r3, #128	; 0x80
     74a:	021b      	lsls	r3, r3, #8
     74c:	429a      	cmp	r2, r3
     74e:	d000      	beq.n	752 <usart_init+0xc2>
     750:	e11b      	b.n	98a <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     752:	2303      	movs	r3, #3
     754:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     756:	2300      	movs	r3, #0
     758:	9307      	str	r3, [sp, #28]
     75a:	e008      	b.n	76e <usart_init+0xde>
	switch (config->sample_rate) {
     75c:	2380      	movs	r3, #128	; 0x80
     75e:	019b      	lsls	r3, r3, #6
     760:	429a      	cmp	r2, r3
     762:	d000      	beq.n	766 <usart_init+0xd6>
     764:	e111      	b.n	98a <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     766:	2310      	movs	r3, #16
     768:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     76a:	3b0f      	subs	r3, #15
     76c:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
     76e:	6833      	ldr	r3, [r6, #0]
     770:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     772:	68f3      	ldr	r3, [r6, #12]
     774:	469b      	mov	fp, r3
		config->sample_adjustment |
     776:	6973      	ldr	r3, [r6, #20]
     778:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     77a:	7e33      	ldrb	r3, [r6, #24]
     77c:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     77e:	2326      	movs	r3, #38	; 0x26
     780:	5cf3      	ldrb	r3, [r6, r3]
     782:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     784:	6873      	ldr	r3, [r6, #4]
     786:	4699      	mov	r9, r3
	switch (transfer_mode)
     788:	2b00      	cmp	r3, #0
     78a:	d100      	bne.n	78e <usart_init+0xfe>
     78c:	e09c      	b.n	8c8 <usart_init+0x238>
     78e:	2380      	movs	r3, #128	; 0x80
     790:	055b      	lsls	r3, r3, #21
     792:	4599      	cmp	r9, r3
     794:	d100      	bne.n	798 <usart_init+0x108>
     796:	e080      	b.n	89a <usart_init+0x20a>
	if(config->encoding_format_enable) {
     798:	7e73      	ldrb	r3, [r6, #25]
     79a:	2b00      	cmp	r3, #0
     79c:	d002      	beq.n	7a4 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     79e:	7eb3      	ldrb	r3, [r6, #26]
     7a0:	4642      	mov	r2, r8
     7a2:	7393      	strb	r3, [r2, #14]
	usart_hw->BAUD.reg = baud;
     7a4:	230e      	movs	r3, #14
     7a6:	aa06      	add	r2, sp, #24
     7a8:	4694      	mov	ip, r2
     7aa:	4463      	add	r3, ip
     7ac:	881b      	ldrh	r3, [r3, #0]
     7ae:	4642      	mov	r2, r8
     7b0:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
     7b2:	9b05      	ldr	r3, [sp, #20]
     7b4:	465a      	mov	r2, fp
     7b6:	4313      	orrs	r3, r2
     7b8:	9a03      	ldr	r2, [sp, #12]
     7ba:	4313      	orrs	r3, r2
     7bc:	464a      	mov	r2, r9
     7be:	4313      	orrs	r3, r2
     7c0:	9f02      	ldr	r7, [sp, #8]
     7c2:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     7c4:	9b04      	ldr	r3, [sp, #16]
     7c6:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
     7c8:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     7ca:	4653      	mov	r3, sl
     7cc:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
     7ce:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
     7d0:	2327      	movs	r3, #39	; 0x27
     7d2:	5cf3      	ldrb	r3, [r6, r3]
     7d4:	2b00      	cmp	r3, #0
     7d6:	d101      	bne.n	7dc <usart_init+0x14c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     7d8:	3304      	adds	r3, #4
     7da:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     7dc:	7e73      	ldrb	r3, [r6, #25]
     7de:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     7e0:	7f32      	ldrb	r2, [r6, #28]
     7e2:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     7e4:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     7e6:	7f72      	ldrb	r2, [r6, #29]
     7e8:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     7ea:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     7ec:	2224      	movs	r2, #36	; 0x24
     7ee:	5cb2      	ldrb	r2, [r6, r2]
     7f0:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     7f2:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     7f4:	2225      	movs	r2, #37	; 0x25
     7f6:	5cb2      	ldrb	r2, [r6, r2]
     7f8:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     7fa:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
     7fc:	7ab1      	ldrb	r1, [r6, #10]
     7fe:	7af2      	ldrb	r2, [r6, #11]
     800:	4311      	orrs	r1, r2
     802:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
     804:	8933      	ldrh	r3, [r6, #8]
     806:	2bff      	cmp	r3, #255	; 0xff
     808:	d100      	bne.n	80c <usart_init+0x17c>
     80a:	e081      	b.n	910 <usart_init+0x280>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     80c:	2280      	movs	r2, #128	; 0x80
     80e:	0452      	lsls	r2, r2, #17
     810:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
     812:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
     814:	232c      	movs	r3, #44	; 0x2c
     816:	5cf3      	ldrb	r3, [r6, r3]
     818:	2b00      	cmp	r3, #0
     81a:	d103      	bne.n	824 <usart_init+0x194>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     81c:	4b62      	ldr	r3, [pc, #392]	; (9a8 <usart_init+0x318>)
     81e:	789b      	ldrb	r3, [r3, #2]
     820:	079b      	lsls	r3, r3, #30
     822:	d501      	bpl.n	828 <usart_init+0x198>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     824:	2380      	movs	r3, #128	; 0x80
     826:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     828:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     82a:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     82c:	2b00      	cmp	r3, #0
     82e:	d1fc      	bne.n	82a <usart_init+0x19a>
	usart_hw->CTRLB.reg = ctrlb;
     830:	4643      	mov	r3, r8
     832:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
     834:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     836:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     838:	2b00      	cmp	r3, #0
     83a:	d1fc      	bne.n	836 <usart_init+0x1a6>
	usart_hw->CTRLA.reg = ctrla;
     83c:	4643      	mov	r3, r8
     83e:	601f      	str	r7, [r3, #0]
     840:	ab0e      	add	r3, sp, #56	; 0x38
     842:	2280      	movs	r2, #128	; 0x80
     844:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     846:	2200      	movs	r2, #0
     848:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     84a:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     84c:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     84e:	6b33      	ldr	r3, [r6, #48]	; 0x30
     850:	930a      	str	r3, [sp, #40]	; 0x28
     852:	6b73      	ldr	r3, [r6, #52]	; 0x34
     854:	930b      	str	r3, [sp, #44]	; 0x2c
     856:	6bb3      	ldr	r3, [r6, #56]	; 0x38
     858:	930c      	str	r3, [sp, #48]	; 0x30
     85a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
     85c:	9302      	str	r3, [sp, #8]
     85e:	930d      	str	r3, [sp, #52]	; 0x34
     860:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     862:	ae0a      	add	r6, sp, #40	; 0x28
     864:	e063      	b.n	92e <usart_init+0x29e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     866:	2308      	movs	r3, #8
     868:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     86a:	3b07      	subs	r3, #7
     86c:	9307      	str	r3, [sp, #28]
     86e:	e77e      	b.n	76e <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
     870:	6833      	ldr	r3, [r6, #0]
     872:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     874:	68f3      	ldr	r3, [r6, #12]
     876:	469b      	mov	fp, r3
		config->sample_adjustment |
     878:	6973      	ldr	r3, [r6, #20]
     87a:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     87c:	7e33      	ldrb	r3, [r6, #24]
     87e:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     880:	2326      	movs	r3, #38	; 0x26
     882:	5cf3      	ldrb	r3, [r6, r3]
     884:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     886:	6873      	ldr	r3, [r6, #4]
     888:	4699      	mov	r9, r3
	switch (transfer_mode)
     88a:	2b00      	cmp	r3, #0
     88c:	d018      	beq.n	8c0 <usart_init+0x230>
     88e:	2380      	movs	r3, #128	; 0x80
     890:	055b      	lsls	r3, r3, #21
     892:	4599      	cmp	r9, r3
     894:	d001      	beq.n	89a <usart_init+0x20a>
	enum status_code status_code = STATUS_OK;
     896:	2000      	movs	r0, #0
     898:	e025      	b.n	8e6 <usart_init+0x256>
			if (!config->use_external_clock) {
     89a:	2327      	movs	r3, #39	; 0x27
     89c:	5cf3      	ldrb	r3, [r6, r3]
     89e:	2b00      	cmp	r3, #0
     8a0:	d000      	beq.n	8a4 <usart_init+0x214>
     8a2:	e779      	b.n	798 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     8a4:	6a33      	ldr	r3, [r6, #32]
     8a6:	001f      	movs	r7, r3
     8a8:	b2c0      	uxtb	r0, r0
     8aa:	4b40      	ldr	r3, [pc, #256]	; (9ac <usart_init+0x31c>)
     8ac:	4798      	blx	r3
     8ae:	0001      	movs	r1, r0
     8b0:	220e      	movs	r2, #14
     8b2:	ab06      	add	r3, sp, #24
     8b4:	469c      	mov	ip, r3
     8b6:	4462      	add	r2, ip
     8b8:	0038      	movs	r0, r7
     8ba:	4b3d      	ldr	r3, [pc, #244]	; (9b0 <usart_init+0x320>)
     8bc:	4798      	blx	r3
     8be:	e012      	b.n	8e6 <usart_init+0x256>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     8c0:	2308      	movs	r3, #8
     8c2:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     8c4:	2300      	movs	r3, #0
     8c6:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
     8c8:	2327      	movs	r3, #39	; 0x27
     8ca:	5cf3      	ldrb	r3, [r6, r3]
     8cc:	2b00      	cmp	r3, #0
     8ce:	d00e      	beq.n	8ee <usart_init+0x25e>
				status_code =
     8d0:	9b06      	ldr	r3, [sp, #24]
     8d2:	9300      	str	r3, [sp, #0]
     8d4:	9b07      	ldr	r3, [sp, #28]
     8d6:	220e      	movs	r2, #14
     8d8:	a906      	add	r1, sp, #24
     8da:	468c      	mov	ip, r1
     8dc:	4462      	add	r2, ip
     8de:	6ab1      	ldr	r1, [r6, #40]	; 0x28
     8e0:	6a30      	ldr	r0, [r6, #32]
     8e2:	4f34      	ldr	r7, [pc, #208]	; (9b4 <usart_init+0x324>)
     8e4:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
     8e6:	2800      	cmp	r0, #0
     8e8:	d000      	beq.n	8ec <usart_init+0x25c>
     8ea:	e6e4      	b.n	6b6 <usart_init+0x26>
     8ec:	e754      	b.n	798 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
     8ee:	6a33      	ldr	r3, [r6, #32]
     8f0:	001f      	movs	r7, r3
     8f2:	b2c0      	uxtb	r0, r0
     8f4:	4b2d      	ldr	r3, [pc, #180]	; (9ac <usart_init+0x31c>)
     8f6:	4798      	blx	r3
     8f8:	0001      	movs	r1, r0
				status_code =
     8fa:	9b06      	ldr	r3, [sp, #24]
     8fc:	9300      	str	r3, [sp, #0]
     8fe:	9b07      	ldr	r3, [sp, #28]
     900:	220e      	movs	r2, #14
     902:	a806      	add	r0, sp, #24
     904:	4684      	mov	ip, r0
     906:	4462      	add	r2, ip
     908:	0038      	movs	r0, r7
     90a:	4f2a      	ldr	r7, [pc, #168]	; (9b4 <usart_init+0x324>)
     90c:	47b8      	blx	r7
     90e:	e7ea      	b.n	8e6 <usart_init+0x256>
		if(config->lin_slave_enable) {
     910:	7ef3      	ldrb	r3, [r6, #27]
     912:	2b00      	cmp	r3, #0
     914:	d100      	bne.n	918 <usart_init+0x288>
     916:	e77d      	b.n	814 <usart_init+0x184>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     918:	2380      	movs	r3, #128	; 0x80
     91a:	04db      	lsls	r3, r3, #19
     91c:	431f      	orrs	r7, r3
     91e:	e779      	b.n	814 <usart_init+0x184>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     920:	0020      	movs	r0, r4
     922:	4b25      	ldr	r3, [pc, #148]	; (9b8 <usart_init+0x328>)
     924:	4798      	blx	r3
     926:	e007      	b.n	938 <usart_init+0x2a8>
     928:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     92a:	2f04      	cmp	r7, #4
     92c:	d00d      	beq.n	94a <usart_init+0x2ba>
     92e:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
     930:	00bb      	lsls	r3, r7, #2
     932:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
     934:	2800      	cmp	r0, #0
     936:	d0f3      	beq.n	920 <usart_init+0x290>
		if (current_pinmux != PINMUX_UNUSED) {
     938:	1c43      	adds	r3, r0, #1
     93a:	d0f5      	beq.n	928 <usart_init+0x298>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     93c:	a90e      	add	r1, sp, #56	; 0x38
     93e:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     940:	0c00      	lsrs	r0, r0, #16
     942:	b2c0      	uxtb	r0, r0
     944:	4b1d      	ldr	r3, [pc, #116]	; (9bc <usart_init+0x32c>)
     946:	4798      	blx	r3
     948:	e7ee      	b.n	928 <usart_init+0x298>
		module->callback[i]            = NULL;
     94a:	2300      	movs	r3, #0
     94c:	60eb      	str	r3, [r5, #12]
     94e:	612b      	str	r3, [r5, #16]
     950:	616b      	str	r3, [r5, #20]
     952:	61ab      	str	r3, [r5, #24]
     954:	61eb      	str	r3, [r5, #28]
     956:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
     958:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     95a:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     95c:	2200      	movs	r2, #0
     95e:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     960:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     962:	3330      	adds	r3, #48	; 0x30
     964:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     966:	3301      	adds	r3, #1
     968:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     96a:	3301      	adds	r3, #1
     96c:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     96e:	3301      	adds	r3, #1
     970:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     972:	6828      	ldr	r0, [r5, #0]
     974:	4b07      	ldr	r3, [pc, #28]	; (994 <usart_init+0x304>)
     976:	4798      	blx	r3
     978:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     97a:	4911      	ldr	r1, [pc, #68]	; (9c0 <usart_init+0x330>)
     97c:	4b11      	ldr	r3, [pc, #68]	; (9c4 <usart_init+0x334>)
     97e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     980:	00a4      	lsls	r4, r4, #2
     982:	4b11      	ldr	r3, [pc, #68]	; (9c8 <usart_init+0x338>)
     984:	50e5      	str	r5, [r4, r3]
	return status_code;
     986:	2000      	movs	r0, #0
     988:	e695      	b.n	6b6 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     98a:	2310      	movs	r3, #16
     98c:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     98e:	2300      	movs	r3, #0
     990:	9307      	str	r3, [sp, #28]
     992:	e6ec      	b.n	76e <usart_init+0xde>
     994:	00000589 	.word	0x00000589
     998:	40000400 	.word	0x40000400
     99c:	00001235 	.word	0x00001235
     9a0:	000011a9 	.word	0x000011a9
     9a4:	000003c5 	.word	0x000003c5
     9a8:	41002000 	.word	0x41002000
     9ac:	00001251 	.word	0x00001251
     9b0:	00000307 	.word	0x00000307
     9b4:	00000331 	.word	0x00000331
     9b8:	00000411 	.word	0x00000411
     9bc:	0000132d 	.word	0x0000132d
     9c0:	00000a5d 	.word	0x00000a5d
     9c4:	000005c5 	.word	0x000005c5
     9c8:	200000dc 	.word	0x200000dc

000009cc <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     9cc:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
     9ce:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
     9d0:	2a00      	cmp	r2, #0
     9d2:	d101      	bne.n	9d8 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
     9d4:	0018      	movs	r0, r3
     9d6:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
     9d8:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
     9da:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     9dc:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
     9de:	2a00      	cmp	r2, #0
     9e0:	d1f8      	bne.n	9d4 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
     9e2:	6802      	ldr	r2, [r0, #0]
	usart_hw->DATA.reg = tx_data;
     9e4:	8511      	strh	r1, [r2, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     9e6:	2102      	movs	r1, #2
     9e8:	7e13      	ldrb	r3, [r2, #24]
     9ea:	420b      	tst	r3, r1
     9ec:	d0fc      	beq.n	9e8 <usart_write_wait+0x1c>
	return STATUS_OK;
     9ee:	2300      	movs	r3, #0
     9f0:	e7f0      	b.n	9d4 <usart_write_wait+0x8>

000009f2 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     9f2:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
     9f4:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
     9f6:	2a00      	cmp	r2, #0
     9f8:	d101      	bne.n	9fe <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
     9fa:	0018      	movs	r0, r3
     9fc:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
     9fe:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
     a00:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     a02:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
     a04:	2a00      	cmp	r2, #0
     a06:	d1f8      	bne.n	9fa <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
     a08:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
     a0a:	7e10      	ldrb	r0, [r2, #24]
     a0c:	0740      	lsls	r0, r0, #29
     a0e:	d5f4      	bpl.n	9fa <usart_read_wait+0x8>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     a10:	8b53      	ldrh	r3, [r2, #26]
     a12:	b2db      	uxtb	r3, r3
	if (error_code) {
     a14:	0698      	lsls	r0, r3, #26
     a16:	d01d      	beq.n	a54 <usart_read_wait+0x62>
		if (error_code & SERCOM_USART_STATUS_FERR) {
     a18:	0798      	lsls	r0, r3, #30
     a1a:	d503      	bpl.n	a24 <usart_read_wait+0x32>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     a1c:	2302      	movs	r3, #2
     a1e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
     a20:	3318      	adds	r3, #24
     a22:	e7ea      	b.n	9fa <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     a24:	0758      	lsls	r0, r3, #29
     a26:	d503      	bpl.n	a30 <usart_read_wait+0x3e>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     a28:	2304      	movs	r3, #4
     a2a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
     a2c:	331a      	adds	r3, #26
     a2e:	e7e4      	b.n	9fa <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
     a30:	07d8      	lsls	r0, r3, #31
     a32:	d503      	bpl.n	a3c <usart_read_wait+0x4a>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     a34:	2301      	movs	r3, #1
     a36:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
     a38:	3312      	adds	r3, #18
     a3a:	e7de      	b.n	9fa <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
     a3c:	06d8      	lsls	r0, r3, #27
     a3e:	d503      	bpl.n	a48 <usart_read_wait+0x56>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     a40:	2310      	movs	r3, #16
     a42:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
     a44:	3332      	adds	r3, #50	; 0x32
     a46:	e7d8      	b.n	9fa <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
     a48:	069b      	lsls	r3, r3, #26
     a4a:	d503      	bpl.n	a54 <usart_read_wait+0x62>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     a4c:	2320      	movs	r3, #32
     a4e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
     a50:	3321      	adds	r3, #33	; 0x21
     a52:	e7d2      	b.n	9fa <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
     a54:	8d13      	ldrh	r3, [r2, #40]	; 0x28
     a56:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
     a58:	2300      	movs	r3, #0
     a5a:	e7ce      	b.n	9fa <usart_read_wait+0x8>

00000a5c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     a5e:	0080      	lsls	r0, r0, #2
     a60:	4b62      	ldr	r3, [pc, #392]	; (bec <_usart_interrupt_handler+0x190>)
     a62:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     a64:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     a66:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
     a68:	2b00      	cmp	r3, #0
     a6a:	d1fc      	bne.n	a66 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     a6c:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
     a6e:	7da6      	ldrb	r6, [r4, #22]
     a70:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
     a72:	2330      	movs	r3, #48	; 0x30
     a74:	5ceb      	ldrb	r3, [r5, r3]
     a76:	2231      	movs	r2, #49	; 0x31
     a78:	5caf      	ldrb	r7, [r5, r2]
     a7a:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     a7c:	07f3      	lsls	r3, r6, #31
     a7e:	d522      	bpl.n	ac6 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
     a80:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     a82:	b29b      	uxth	r3, r3
     a84:	2b00      	cmp	r3, #0
     a86:	d01c      	beq.n	ac2 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     a88:	6aaa      	ldr	r2, [r5, #40]	; 0x28
     a8a:	7813      	ldrb	r3, [r2, #0]
     a8c:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     a8e:	1c51      	adds	r1, r2, #1
     a90:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     a92:	7969      	ldrb	r1, [r5, #5]
     a94:	2901      	cmp	r1, #1
     a96:	d00e      	beq.n	ab6 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     a98:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     a9a:	05db      	lsls	r3, r3, #23
     a9c:	0ddb      	lsrs	r3, r3, #23
     a9e:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
     aa0:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     aa2:	3b01      	subs	r3, #1
     aa4:	b29b      	uxth	r3, r3
     aa6:	85eb      	strh	r3, [r5, #46]	; 0x2e
     aa8:	2b00      	cmp	r3, #0
     aaa:	d10c      	bne.n	ac6 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     aac:	3301      	adds	r3, #1
     aae:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     ab0:	3301      	adds	r3, #1
     ab2:	75a3      	strb	r3, [r4, #22]
     ab4:	e007      	b.n	ac6 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     ab6:	7851      	ldrb	r1, [r2, #1]
     ab8:	0209      	lsls	r1, r1, #8
     aba:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
     abc:	3202      	adds	r2, #2
     abe:	62aa      	str	r2, [r5, #40]	; 0x28
     ac0:	e7eb      	b.n	a9a <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     ac2:	2301      	movs	r3, #1
     ac4:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     ac6:	07b3      	lsls	r3, r6, #30
     ac8:	d506      	bpl.n	ad8 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     aca:	2302      	movs	r3, #2
     acc:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
     ace:	2200      	movs	r2, #0
     ad0:	3331      	adds	r3, #49	; 0x31
     ad2:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     ad4:	07fb      	lsls	r3, r7, #31
     ad6:	d41a      	bmi.n	b0e <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     ad8:	0773      	lsls	r3, r6, #29
     ada:	d565      	bpl.n	ba8 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
     adc:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     ade:	b29b      	uxth	r3, r3
     ae0:	2b00      	cmp	r3, #0
     ae2:	d05f      	beq.n	ba4 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     ae4:	8b63      	ldrh	r3, [r4, #26]
     ae6:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
     ae8:	071a      	lsls	r2, r3, #28
     aea:	d414      	bmi.n	b16 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     aec:	223f      	movs	r2, #63	; 0x3f
     aee:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
     af0:	2b00      	cmp	r3, #0
     af2:	d034      	beq.n	b5e <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     af4:	079a      	lsls	r2, r3, #30
     af6:	d511      	bpl.n	b1c <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     af8:	221a      	movs	r2, #26
     afa:	2332      	movs	r3, #50	; 0x32
     afc:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     afe:	3b30      	subs	r3, #48	; 0x30
     b00:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
     b02:	077b      	lsls	r3, r7, #29
     b04:	d550      	bpl.n	ba8 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
     b06:	0028      	movs	r0, r5
     b08:	696b      	ldr	r3, [r5, #20]
     b0a:	4798      	blx	r3
     b0c:	e04c      	b.n	ba8 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     b0e:	0028      	movs	r0, r5
     b10:	68eb      	ldr	r3, [r5, #12]
     b12:	4798      	blx	r3
     b14:	e7e0      	b.n	ad8 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
     b16:	2237      	movs	r2, #55	; 0x37
     b18:	4013      	ands	r3, r2
     b1a:	e7e9      	b.n	af0 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     b1c:	075a      	lsls	r2, r3, #29
     b1e:	d505      	bpl.n	b2c <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
     b20:	221e      	movs	r2, #30
     b22:	2332      	movs	r3, #50	; 0x32
     b24:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     b26:	3b2e      	subs	r3, #46	; 0x2e
     b28:	8363      	strh	r3, [r4, #26]
     b2a:	e7ea      	b.n	b02 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     b2c:	07da      	lsls	r2, r3, #31
     b2e:	d505      	bpl.n	b3c <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
     b30:	2213      	movs	r2, #19
     b32:	2332      	movs	r3, #50	; 0x32
     b34:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     b36:	3b31      	subs	r3, #49	; 0x31
     b38:	8363      	strh	r3, [r4, #26]
     b3a:	e7e2      	b.n	b02 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
     b3c:	06da      	lsls	r2, r3, #27
     b3e:	d505      	bpl.n	b4c <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
     b40:	2242      	movs	r2, #66	; 0x42
     b42:	2332      	movs	r3, #50	; 0x32
     b44:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     b46:	3b22      	subs	r3, #34	; 0x22
     b48:	8363      	strh	r3, [r4, #26]
     b4a:	e7da      	b.n	b02 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
     b4c:	2220      	movs	r2, #32
     b4e:	421a      	tst	r2, r3
     b50:	d0d7      	beq.n	b02 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
     b52:	3221      	adds	r2, #33	; 0x21
     b54:	2332      	movs	r3, #50	; 0x32
     b56:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     b58:	3b12      	subs	r3, #18
     b5a:	8363      	strh	r3, [r4, #26]
     b5c:	e7d1      	b.n	b02 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     b5e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     b60:	05db      	lsls	r3, r3, #23
     b62:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
     b64:	b2da      	uxtb	r2, r3
     b66:	6a69      	ldr	r1, [r5, #36]	; 0x24
     b68:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
     b6a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
     b6c:	1c51      	adds	r1, r2, #1
     b6e:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     b70:	7969      	ldrb	r1, [r5, #5]
     b72:	2901      	cmp	r1, #1
     b74:	d010      	beq.n	b98 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
     b76:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     b78:	3b01      	subs	r3, #1
     b7a:	b29b      	uxth	r3, r3
     b7c:	85ab      	strh	r3, [r5, #44]	; 0x2c
     b7e:	2b00      	cmp	r3, #0
     b80:	d112      	bne.n	ba8 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     b82:	3304      	adds	r3, #4
     b84:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
     b86:	2200      	movs	r2, #0
     b88:	332e      	adds	r3, #46	; 0x2e
     b8a:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
     b8c:	07bb      	lsls	r3, r7, #30
     b8e:	d50b      	bpl.n	ba8 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
     b90:	0028      	movs	r0, r5
     b92:	692b      	ldr	r3, [r5, #16]
     b94:	4798      	blx	r3
     b96:	e007      	b.n	ba8 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
     b98:	0a1b      	lsrs	r3, r3, #8
     b9a:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
     b9c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     b9e:	3301      	adds	r3, #1
     ba0:	626b      	str	r3, [r5, #36]	; 0x24
     ba2:	e7e8      	b.n	b76 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     ba4:	2304      	movs	r3, #4
     ba6:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
     ba8:	06f3      	lsls	r3, r6, #27
     baa:	d504      	bpl.n	bb6 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
     bac:	2310      	movs	r3, #16
     bae:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
     bb0:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
     bb2:	06fb      	lsls	r3, r7, #27
     bb4:	d40e      	bmi.n	bd4 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
     bb6:	06b3      	lsls	r3, r6, #26
     bb8:	d504      	bpl.n	bc4 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
     bba:	2320      	movs	r3, #32
     bbc:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
     bbe:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
     bc0:	073b      	lsls	r3, r7, #28
     bc2:	d40b      	bmi.n	bdc <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
     bc4:	0733      	lsls	r3, r6, #28
     bc6:	d504      	bpl.n	bd2 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
     bc8:	2308      	movs	r3, #8
     bca:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
     bcc:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
     bce:	06bb      	lsls	r3, r7, #26
     bd0:	d408      	bmi.n	be4 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
     bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
     bd4:	0028      	movs	r0, r5
     bd6:	69eb      	ldr	r3, [r5, #28]
     bd8:	4798      	blx	r3
     bda:	e7ec      	b.n	bb6 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
     bdc:	0028      	movs	r0, r5
     bde:	69ab      	ldr	r3, [r5, #24]
     be0:	4798      	blx	r3
     be2:	e7ef      	b.n	bc4 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
     be4:	6a2b      	ldr	r3, [r5, #32]
     be6:	0028      	movs	r0, r5
     be8:	4798      	blx	r3
}
     bea:	e7f2      	b.n	bd2 <_usart_interrupt_handler+0x176>
     bec:	200000dc 	.word	0x200000dc

00000bf0 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     bf0:	b510      	push	{r4, lr}
	switch (clock_source) {
     bf2:	2808      	cmp	r0, #8
     bf4:	d803      	bhi.n	bfe <system_clock_source_get_hz+0xe>
     bf6:	0080      	lsls	r0, r0, #2
     bf8:	4b1c      	ldr	r3, [pc, #112]	; (c6c <system_clock_source_get_hz+0x7c>)
     bfa:	581b      	ldr	r3, [r3, r0]
     bfc:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
     bfe:	2000      	movs	r0, #0
     c00:	e032      	b.n	c68 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
     c02:	4b1b      	ldr	r3, [pc, #108]	; (c70 <system_clock_source_get_hz+0x80>)
     c04:	6918      	ldr	r0, [r3, #16]
     c06:	e02f      	b.n	c68 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
     c08:	4b1a      	ldr	r3, [pc, #104]	; (c74 <system_clock_source_get_hz+0x84>)
     c0a:	6a1b      	ldr	r3, [r3, #32]
     c0c:	059b      	lsls	r3, r3, #22
     c0e:	0f9b      	lsrs	r3, r3, #30
     c10:	4819      	ldr	r0, [pc, #100]	; (c78 <system_clock_source_get_hz+0x88>)
     c12:	40d8      	lsrs	r0, r3
     c14:	e028      	b.n	c68 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
     c16:	4b16      	ldr	r3, [pc, #88]	; (c70 <system_clock_source_get_hz+0x80>)
     c18:	6958      	ldr	r0, [r3, #20]
     c1a:	e025      	b.n	c68 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     c1c:	4b14      	ldr	r3, [pc, #80]	; (c70 <system_clock_source_get_hz+0x80>)
     c1e:	681b      	ldr	r3, [r3, #0]
			return 0;
     c20:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     c22:	079b      	lsls	r3, r3, #30
     c24:	d520      	bpl.n	c68 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     c26:	4913      	ldr	r1, [pc, #76]	; (c74 <system_clock_source_get_hz+0x84>)
     c28:	2210      	movs	r2, #16
     c2a:	68cb      	ldr	r3, [r1, #12]
     c2c:	421a      	tst	r2, r3
     c2e:	d0fc      	beq.n	c2a <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
     c30:	4b0f      	ldr	r3, [pc, #60]	; (c70 <system_clock_source_get_hz+0x80>)
     c32:	681a      	ldr	r2, [r3, #0]
     c34:	2324      	movs	r3, #36	; 0x24
     c36:	4013      	ands	r3, r2
     c38:	2b04      	cmp	r3, #4
     c3a:	d001      	beq.n	c40 <system_clock_source_get_hz+0x50>
			return 48000000UL;
     c3c:	480f      	ldr	r0, [pc, #60]	; (c7c <system_clock_source_get_hz+0x8c>)
     c3e:	e013      	b.n	c68 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     c40:	2000      	movs	r0, #0
     c42:	4b0f      	ldr	r3, [pc, #60]	; (c80 <system_clock_source_get_hz+0x90>)
     c44:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     c46:	4b0a      	ldr	r3, [pc, #40]	; (c70 <system_clock_source_get_hz+0x80>)
     c48:	689b      	ldr	r3, [r3, #8]
     c4a:	041b      	lsls	r3, r3, #16
     c4c:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     c4e:	4358      	muls	r0, r3
     c50:	e00a      	b.n	c68 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     c52:	2350      	movs	r3, #80	; 0x50
     c54:	4a07      	ldr	r2, [pc, #28]	; (c74 <system_clock_source_get_hz+0x84>)
     c56:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
     c58:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     c5a:	075b      	lsls	r3, r3, #29
     c5c:	d504      	bpl.n	c68 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
     c5e:	4b04      	ldr	r3, [pc, #16]	; (c70 <system_clock_source_get_hz+0x80>)
     c60:	68d8      	ldr	r0, [r3, #12]
     c62:	e001      	b.n	c68 <system_clock_source_get_hz+0x78>
		return 32768UL;
     c64:	2080      	movs	r0, #128	; 0x80
     c66:	0200      	lsls	r0, r0, #8
	}
}
     c68:	bd10      	pop	{r4, pc}
     c6a:	46c0      	nop			; (mov r8, r8)
     c6c:	00003174 	.word	0x00003174
     c70:	200000b4 	.word	0x200000b4
     c74:	40000800 	.word	0x40000800
     c78:	007a1200 	.word	0x007a1200
     c7c:	02dc6c00 	.word	0x02dc6c00
     c80:	00001251 	.word	0x00001251

00000c84 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
     c84:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     c86:	490c      	ldr	r1, [pc, #48]	; (cb8 <system_clock_source_osc8m_set_config+0x34>)
     c88:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
     c8a:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
     c8c:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
     c8e:	7840      	ldrb	r0, [r0, #1]
     c90:	2201      	movs	r2, #1
     c92:	4010      	ands	r0, r2
     c94:	0180      	lsls	r0, r0, #6
     c96:	2640      	movs	r6, #64	; 0x40
     c98:	43b3      	bics	r3, r6
     c9a:	4303      	orrs	r3, r0
     c9c:	402a      	ands	r2, r5
     c9e:	01d2      	lsls	r2, r2, #7
     ca0:	2080      	movs	r0, #128	; 0x80
     ca2:	4383      	bics	r3, r0
     ca4:	4313      	orrs	r3, r2
     ca6:	2203      	movs	r2, #3
     ca8:	4022      	ands	r2, r4
     caa:	0212      	lsls	r2, r2, #8
     cac:	4803      	ldr	r0, [pc, #12]	; (cbc <system_clock_source_osc8m_set_config+0x38>)
     cae:	4003      	ands	r3, r0
     cb0:	4313      	orrs	r3, r2
     cb2:	620b      	str	r3, [r1, #32]
}
     cb4:	bd70      	pop	{r4, r5, r6, pc}
     cb6:	46c0      	nop			; (mov r8, r8)
     cb8:	40000800 	.word	0x40000800
     cbc:	fffffcff 	.word	0xfffffcff

00000cc0 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
     cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
     cc2:	46de      	mov	lr, fp
     cc4:	4657      	mov	r7, sl
     cc6:	464e      	mov	r6, r9
     cc8:	4645      	mov	r5, r8
     cca:	b5e0      	push	{r5, r6, r7, lr}
     ccc:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
     cce:	4b26      	ldr	r3, [pc, #152]	; (d68 <system_clock_source_xosc32k_set_config+0xa8>)
     cd0:	469b      	mov	fp, r3
     cd2:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
     cd4:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
     cd6:	7800      	ldrb	r0, [r0, #0]
     cd8:	4242      	negs	r2, r0
     cda:	4142      	adcs	r2, r0
     cdc:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
     cde:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
     ce0:	78ca      	ldrb	r2, [r1, #3]
     ce2:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
     ce4:	790a      	ldrb	r2, [r1, #4]
     ce6:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
     ce8:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
     cea:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
     cec:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
     cee:	688a      	ldr	r2, [r1, #8]
     cf0:	491e      	ldr	r1, [pc, #120]	; (d6c <system_clock_source_xosc32k_set_config+0xac>)
     cf2:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
     cf4:	2101      	movs	r1, #1
     cf6:	464a      	mov	r2, r9
     cf8:	0092      	lsls	r2, r2, #2
     cfa:	4691      	mov	r9, r2
     cfc:	2204      	movs	r2, #4
     cfe:	4393      	bics	r3, r2
     d00:	464a      	mov	r2, r9
     d02:	4313      	orrs	r3, r2
     d04:	4642      	mov	r2, r8
     d06:	400a      	ands	r2, r1
     d08:	00d2      	lsls	r2, r2, #3
     d0a:	4690      	mov	r8, r2
     d0c:	2208      	movs	r2, #8
     d0e:	4393      	bics	r3, r2
     d10:	4642      	mov	r2, r8
     d12:	4313      	orrs	r3, r2
     d14:	4662      	mov	r2, ip
     d16:	400a      	ands	r2, r1
     d18:	0112      	lsls	r2, r2, #4
     d1a:	4694      	mov	ip, r2
     d1c:	2210      	movs	r2, #16
     d1e:	4393      	bics	r3, r2
     d20:	4662      	mov	r2, ip
     d22:	4313      	orrs	r3, r2
     d24:	4008      	ands	r0, r1
     d26:	0140      	lsls	r0, r0, #5
     d28:	2220      	movs	r2, #32
     d2a:	4393      	bics	r3, r2
     d2c:	4303      	orrs	r3, r0
     d2e:	400f      	ands	r7, r1
     d30:	01bf      	lsls	r7, r7, #6
     d32:	2040      	movs	r0, #64	; 0x40
     d34:	4383      	bics	r3, r0
     d36:	433b      	orrs	r3, r7
     d38:	400e      	ands	r6, r1
     d3a:	01f6      	lsls	r6, r6, #7
     d3c:	3040      	adds	r0, #64	; 0x40
     d3e:	4383      	bics	r3, r0
     d40:	4333      	orrs	r3, r6
     d42:	3879      	subs	r0, #121	; 0x79
     d44:	4005      	ands	r5, r0
     d46:	022d      	lsls	r5, r5, #8
     d48:	4809      	ldr	r0, [pc, #36]	; (d70 <system_clock_source_xosc32k_set_config+0xb0>)
     d4a:	4003      	ands	r3, r0
     d4c:	432b      	orrs	r3, r5
     d4e:	4021      	ands	r1, r4
     d50:	0309      	lsls	r1, r1, #12
     d52:	4808      	ldr	r0, [pc, #32]	; (d74 <system_clock_source_xosc32k_set_config+0xb4>)
     d54:	4003      	ands	r3, r0
     d56:	430b      	orrs	r3, r1
     d58:	465a      	mov	r2, fp
     d5a:	8293      	strh	r3, [r2, #20]
}
     d5c:	bc3c      	pop	{r2, r3, r4, r5}
     d5e:	4690      	mov	r8, r2
     d60:	4699      	mov	r9, r3
     d62:	46a2      	mov	sl, r4
     d64:	46ab      	mov	fp, r5
     d66:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d68:	40000800 	.word	0x40000800
     d6c:	200000b4 	.word	0x200000b4
     d70:	fffff8ff 	.word	0xfffff8ff
     d74:	ffffefff 	.word	0xffffefff

00000d78 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
     d78:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
     d7a:	7a03      	ldrb	r3, [r0, #8]
     d7c:	069b      	lsls	r3, r3, #26
     d7e:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
     d80:	8942      	ldrh	r2, [r0, #10]
     d82:	0592      	lsls	r2, r2, #22
     d84:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
     d86:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
     d88:	4918      	ldr	r1, [pc, #96]	; (dec <system_clock_source_dfll_set_config+0x74>)
     d8a:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
     d8c:	7983      	ldrb	r3, [r0, #6]
     d8e:	79c2      	ldrb	r2, [r0, #7]
     d90:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
     d92:	8842      	ldrh	r2, [r0, #2]
     d94:	8884      	ldrh	r4, [r0, #4]
     d96:	4322      	orrs	r2, r4
     d98:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
     d9a:	7842      	ldrb	r2, [r0, #1]
     d9c:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
     d9e:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
     da0:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
     da2:	7803      	ldrb	r3, [r0, #0]
     da4:	2b04      	cmp	r3, #4
     da6:	d011      	beq.n	dcc <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
     da8:	2b20      	cmp	r3, #32
     daa:	d10e      	bne.n	dca <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
     dac:	7b03      	ldrb	r3, [r0, #12]
     dae:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
     db0:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
     db2:	4313      	orrs	r3, r2
     db4:	89c2      	ldrh	r2, [r0, #14]
     db6:	0412      	lsls	r2, r2, #16
     db8:	490d      	ldr	r1, [pc, #52]	; (df0 <system_clock_source_dfll_set_config+0x78>)
     dba:	400a      	ands	r2, r1
     dbc:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
     dbe:	4a0b      	ldr	r2, [pc, #44]	; (dec <system_clock_source_dfll_set_config+0x74>)
     dc0:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
     dc2:	6811      	ldr	r1, [r2, #0]
     dc4:	4b0b      	ldr	r3, [pc, #44]	; (df4 <system_clock_source_dfll_set_config+0x7c>)
     dc6:	430b      	orrs	r3, r1
     dc8:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
     dca:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
     dcc:	7b03      	ldrb	r3, [r0, #12]
     dce:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
     dd0:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
     dd2:	4313      	orrs	r3, r2
     dd4:	89c2      	ldrh	r2, [r0, #14]
     dd6:	0412      	lsls	r2, r2, #16
     dd8:	4905      	ldr	r1, [pc, #20]	; (df0 <system_clock_source_dfll_set_config+0x78>)
     dda:	400a      	ands	r2, r1
     ddc:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
     dde:	4a03      	ldr	r2, [pc, #12]	; (dec <system_clock_source_dfll_set_config+0x74>)
     de0:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
     de2:	6813      	ldr	r3, [r2, #0]
     de4:	2104      	movs	r1, #4
     de6:	430b      	orrs	r3, r1
     de8:	6013      	str	r3, [r2, #0]
     dea:	e7ee      	b.n	dca <system_clock_source_dfll_set_config+0x52>
     dec:	200000b4 	.word	0x200000b4
     df0:	03ff0000 	.word	0x03ff0000
     df4:	00000424 	.word	0x00000424

00000df8 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
     df8:	2808      	cmp	r0, #8
     dfa:	d803      	bhi.n	e04 <system_clock_source_enable+0xc>
     dfc:	0080      	lsls	r0, r0, #2
     dfe:	4b25      	ldr	r3, [pc, #148]	; (e94 <system_clock_source_enable+0x9c>)
     e00:	581b      	ldr	r3, [r3, r0]
     e02:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     e04:	2017      	movs	r0, #23
     e06:	e044      	b.n	e92 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
     e08:	4a23      	ldr	r2, [pc, #140]	; (e98 <system_clock_source_enable+0xa0>)
     e0a:	6a13      	ldr	r3, [r2, #32]
     e0c:	2102      	movs	r1, #2
     e0e:	430b      	orrs	r3, r1
     e10:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
     e12:	2000      	movs	r0, #0
     e14:	e03d      	b.n	e92 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     e16:	4a20      	ldr	r2, [pc, #128]	; (e98 <system_clock_source_enable+0xa0>)
     e18:	6993      	ldr	r3, [r2, #24]
     e1a:	2102      	movs	r1, #2
     e1c:	430b      	orrs	r3, r1
     e1e:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
     e20:	2000      	movs	r0, #0
		break;
     e22:	e036      	b.n	e92 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
     e24:	4a1c      	ldr	r2, [pc, #112]	; (e98 <system_clock_source_enable+0xa0>)
     e26:	8a13      	ldrh	r3, [r2, #16]
     e28:	2102      	movs	r1, #2
     e2a:	430b      	orrs	r3, r1
     e2c:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
     e2e:	2000      	movs	r0, #0
		break;
     e30:	e02f      	b.n	e92 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
     e32:	4a19      	ldr	r2, [pc, #100]	; (e98 <system_clock_source_enable+0xa0>)
     e34:	8a93      	ldrh	r3, [r2, #20]
     e36:	2102      	movs	r1, #2
     e38:	430b      	orrs	r3, r1
     e3a:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
     e3c:	2000      	movs	r0, #0
		break;
     e3e:	e028      	b.n	e92 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     e40:	4916      	ldr	r1, [pc, #88]	; (e9c <system_clock_source_enable+0xa4>)
     e42:	680b      	ldr	r3, [r1, #0]
     e44:	2202      	movs	r2, #2
     e46:	4313      	orrs	r3, r2
     e48:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
     e4a:	4b13      	ldr	r3, [pc, #76]	; (e98 <system_clock_source_enable+0xa0>)
     e4c:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     e4e:	0019      	movs	r1, r3
     e50:	320e      	adds	r2, #14
     e52:	68cb      	ldr	r3, [r1, #12]
     e54:	421a      	tst	r2, r3
     e56:	d0fc      	beq.n	e52 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
     e58:	4a10      	ldr	r2, [pc, #64]	; (e9c <system_clock_source_enable+0xa4>)
     e5a:	6891      	ldr	r1, [r2, #8]
     e5c:	4b0e      	ldr	r3, [pc, #56]	; (e98 <system_clock_source_enable+0xa0>)
     e5e:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
     e60:	6852      	ldr	r2, [r2, #4]
     e62:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
     e64:	2200      	movs	r2, #0
     e66:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     e68:	0019      	movs	r1, r3
     e6a:	3210      	adds	r2, #16
     e6c:	68cb      	ldr	r3, [r1, #12]
     e6e:	421a      	tst	r2, r3
     e70:	d0fc      	beq.n	e6c <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
     e72:	4b0a      	ldr	r3, [pc, #40]	; (e9c <system_clock_source_enable+0xa4>)
     e74:	681b      	ldr	r3, [r3, #0]
     e76:	b29b      	uxth	r3, r3
     e78:	4a07      	ldr	r2, [pc, #28]	; (e98 <system_clock_source_enable+0xa0>)
     e7a:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
     e7c:	2000      	movs	r0, #0
     e7e:	e008      	b.n	e92 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
     e80:	4905      	ldr	r1, [pc, #20]	; (e98 <system_clock_source_enable+0xa0>)
     e82:	2244      	movs	r2, #68	; 0x44
     e84:	5c8b      	ldrb	r3, [r1, r2]
     e86:	2002      	movs	r0, #2
     e88:	4303      	orrs	r3, r0
     e8a:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
     e8c:	2000      	movs	r0, #0
		break;
     e8e:	e000      	b.n	e92 <system_clock_source_enable+0x9a>
		return STATUS_OK;
     e90:	2000      	movs	r0, #0
}
     e92:	4770      	bx	lr
     e94:	00003198 	.word	0x00003198
     e98:	40000800 	.word	0x40000800
     e9c:	200000b4 	.word	0x200000b4

00000ea0 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
     ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
     ea2:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     ea4:	22c2      	movs	r2, #194	; 0xc2
     ea6:	00d2      	lsls	r2, r2, #3
     ea8:	4b47      	ldr	r3, [pc, #284]	; (fc8 <system_clock_init+0x128>)
     eaa:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
     eac:	4947      	ldr	r1, [pc, #284]	; (fcc <system_clock_init+0x12c>)
     eae:	684b      	ldr	r3, [r1, #4]
     eb0:	221e      	movs	r2, #30
     eb2:	4393      	bics	r3, r2
     eb4:	3a1c      	subs	r2, #28
     eb6:	4313      	orrs	r3, r2
     eb8:	604b      	str	r3, [r1, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
     eba:	ab01      	add	r3, sp, #4
     ebc:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     ebe:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
     ec0:	4d43      	ldr	r5, [pc, #268]	; (fd0 <system_clock_init+0x130>)
     ec2:	b2e0      	uxtb	r0, r4
     ec4:	a901      	add	r1, sp, #4
     ec6:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     ec8:	3401      	adds	r4, #1
     eca:	2c25      	cmp	r4, #37	; 0x25
     ecc:	d1f9      	bne.n	ec2 <system_clock_init+0x22>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
     ece:	a80a      	add	r0, sp, #40	; 0x28
     ed0:	2300      	movs	r3, #0
     ed2:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
     ed4:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
     ed6:	2280      	movs	r2, #128	; 0x80
     ed8:	0212      	lsls	r2, r2, #8
     eda:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
     edc:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
     ede:	2201      	movs	r2, #1
     ee0:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
     ee2:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
     ee4:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
     ee6:	3205      	adds	r2, #5
     ee8:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
     eea:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
     eec:	4b39      	ldr	r3, [pc, #228]	; (fd4 <system_clock_init+0x134>)
     eee:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
     ef0:	2005      	movs	r0, #5
     ef2:	4b39      	ldr	r3, [pc, #228]	; (fd8 <system_clock_init+0x138>)
     ef4:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
     ef6:	4934      	ldr	r1, [pc, #208]	; (fc8 <system_clock_init+0x128>)
     ef8:	2202      	movs	r2, #2
     efa:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
     efc:	421a      	tst	r2, r3
     efe:	d0fc      	beq.n	efa <system_clock_init+0x5a>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
     f00:	4a31      	ldr	r2, [pc, #196]	; (fc8 <system_clock_init+0x128>)
     f02:	8a93      	ldrh	r3, [r2, #20]
     f04:	2180      	movs	r1, #128	; 0x80
     f06:	430b      	orrs	r3, r1
     f08:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
     f0a:	ab05      	add	r3, sp, #20
     f0c:	2100      	movs	r1, #0
     f0e:	2200      	movs	r2, #0
     f10:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
     f12:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
     f14:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
     f16:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
     f18:	313f      	adds	r1, #63	; 0x3f
     f1a:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
     f1c:	393b      	subs	r1, #59	; 0x3b
     f1e:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
     f20:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
     f22:	4b2e      	ldr	r3, [pc, #184]	; (fdc <system_clock_init+0x13c>)
     f24:	681b      	ldr	r3, [r3, #0]
     f26:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
     f28:	2b3f      	cmp	r3, #63	; 0x3f
     f2a:	d04b      	beq.n	fc4 <system_clock_init+0x124>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
     f2c:	a805      	add	r0, sp, #20
     f2e:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
     f30:	23b7      	movs	r3, #183	; 0xb7
     f32:	00db      	lsls	r3, r3, #3
     f34:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
     f36:	2307      	movs	r3, #7
     f38:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
     f3a:	3338      	adds	r3, #56	; 0x38
     f3c:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
     f3e:	4b28      	ldr	r3, [pc, #160]	; (fe0 <system_clock_init+0x140>)
     f40:	4798      	blx	r3
	config->run_in_standby  = false;
     f42:	a804      	add	r0, sp, #16
     f44:	2500      	movs	r5, #0
     f46:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
     f48:	2601      	movs	r6, #1
     f4a:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
     f4c:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
     f4e:	4b25      	ldr	r3, [pc, #148]	; (fe4 <system_clock_init+0x144>)
     f50:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
     f52:	2006      	movs	r0, #6
     f54:	4f20      	ldr	r7, [pc, #128]	; (fd8 <system_clock_init+0x138>)
     f56:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
     f58:	4b23      	ldr	r3, [pc, #140]	; (fe8 <system_clock_init+0x148>)
     f5a:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
     f5c:	ac01      	add	r4, sp, #4
     f5e:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
     f60:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
     f62:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
     f64:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
     f66:	2305      	movs	r3, #5
     f68:	7023      	strb	r3, [r4, #0]
     f6a:	0021      	movs	r1, r4
     f6c:	2001      	movs	r0, #1
     f6e:	4b1f      	ldr	r3, [pc, #124]	; (fec <system_clock_init+0x14c>)
     f70:	4798      	blx	r3
     f72:	2001      	movs	r0, #1
     f74:	4b1e      	ldr	r3, [pc, #120]	; (ff0 <system_clock_init+0x150>)
     f76:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
     f78:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
     f7a:	0021      	movs	r1, r4
     f7c:	2000      	movs	r0, #0
     f7e:	4b14      	ldr	r3, [pc, #80]	; (fd0 <system_clock_init+0x130>)
     f80:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
     f82:	2000      	movs	r0, #0
     f84:	4b1b      	ldr	r3, [pc, #108]	; (ff4 <system_clock_init+0x154>)
     f86:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
     f88:	2007      	movs	r0, #7
     f8a:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
     f8c:	490e      	ldr	r1, [pc, #56]	; (fc8 <system_clock_init+0x128>)
     f8e:	22d0      	movs	r2, #208	; 0xd0
     f90:	68cb      	ldr	r3, [r1, #12]
     f92:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
     f94:	2bd0      	cmp	r3, #208	; 0xd0
     f96:	d1fb      	bne.n	f90 <system_clock_init+0xf0>
	PM->CPUSEL.reg = (uint32_t)divider;
     f98:	4a17      	ldr	r2, [pc, #92]	; (ff8 <system_clock_init+0x158>)
     f9a:	2300      	movs	r3, #0
     f9c:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
     f9e:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
     fa0:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
     fa2:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
     fa4:	a901      	add	r1, sp, #4
     fa6:	2201      	movs	r2, #1
     fa8:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
     faa:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
     fac:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
     fae:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
     fb0:	3307      	adds	r3, #7
     fb2:	700b      	strb	r3, [r1, #0]
     fb4:	2000      	movs	r0, #0
     fb6:	4b0d      	ldr	r3, [pc, #52]	; (fec <system_clock_init+0x14c>)
     fb8:	4798      	blx	r3
     fba:	2000      	movs	r0, #0
     fbc:	4b0c      	ldr	r3, [pc, #48]	; (ff0 <system_clock_init+0x150>)
     fbe:	4798      	blx	r3
#endif
}
     fc0:	b00f      	add	sp, #60	; 0x3c
     fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
     fc4:	3b20      	subs	r3, #32
     fc6:	e7b1      	b.n	f2c <system_clock_init+0x8c>
     fc8:	40000800 	.word	0x40000800
     fcc:	41004000 	.word	0x41004000
     fd0:	00001235 	.word	0x00001235
     fd4:	00000cc1 	.word	0x00000cc1
     fd8:	00000df9 	.word	0x00000df9
     fdc:	00806024 	.word	0x00806024
     fe0:	00000d79 	.word	0x00000d79
     fe4:	00000c85 	.word	0x00000c85
     fe8:	00000ffd 	.word	0x00000ffd
     fec:	00001021 	.word	0x00001021
     ff0:	000010d9 	.word	0x000010d9
     ff4:	000011a9 	.word	0x000011a9
     ff8:	40000400 	.word	0x40000400

00000ffc <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
     ffc:	4a06      	ldr	r2, [pc, #24]	; (1018 <system_gclk_init+0x1c>)
     ffe:	6993      	ldr	r3, [r2, #24]
    1000:	2108      	movs	r1, #8
    1002:	430b      	orrs	r3, r1
    1004:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1006:	2201      	movs	r2, #1
    1008:	4b04      	ldr	r3, [pc, #16]	; (101c <system_gclk_init+0x20>)
    100a:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    100c:	0019      	movs	r1, r3
    100e:	780b      	ldrb	r3, [r1, #0]
    1010:	4213      	tst	r3, r2
    1012:	d1fc      	bne.n	100e <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1014:	4770      	bx	lr
    1016:	46c0      	nop			; (mov r8, r8)
    1018:	40000400 	.word	0x40000400
    101c:	40000c00 	.word	0x40000c00

00001020 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1020:	b570      	push	{r4, r5, r6, lr}
    1022:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1024:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1026:	780d      	ldrb	r5, [r1, #0]
    1028:	022d      	lsls	r5, r5, #8
    102a:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    102c:	784b      	ldrb	r3, [r1, #1]
    102e:	2b00      	cmp	r3, #0
    1030:	d002      	beq.n	1038 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1032:	2380      	movs	r3, #128	; 0x80
    1034:	02db      	lsls	r3, r3, #11
    1036:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1038:	7a4b      	ldrb	r3, [r1, #9]
    103a:	2b00      	cmp	r3, #0
    103c:	d002      	beq.n	1044 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    103e:	2380      	movs	r3, #128	; 0x80
    1040:	031b      	lsls	r3, r3, #12
    1042:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1044:	6848      	ldr	r0, [r1, #4]
    1046:	2801      	cmp	r0, #1
    1048:	d910      	bls.n	106c <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    104a:	1e43      	subs	r3, r0, #1
    104c:	4218      	tst	r0, r3
    104e:	d134      	bne.n	10ba <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1050:	2802      	cmp	r0, #2
    1052:	d930      	bls.n	10b6 <system_gclk_gen_set_config+0x96>
    1054:	2302      	movs	r3, #2
    1056:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1058:	3201      	adds	r2, #1
						mask <<= 1) {
    105a:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    105c:	4298      	cmp	r0, r3
    105e:	d8fb      	bhi.n	1058 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1060:	0212      	lsls	r2, r2, #8
    1062:	4332      	orrs	r2, r6
    1064:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1066:	2380      	movs	r3, #128	; 0x80
    1068:	035b      	lsls	r3, r3, #13
    106a:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    106c:	7a0b      	ldrb	r3, [r1, #8]
    106e:	2b00      	cmp	r3, #0
    1070:	d002      	beq.n	1078 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1072:	2380      	movs	r3, #128	; 0x80
    1074:	039b      	lsls	r3, r3, #14
    1076:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1078:	4a13      	ldr	r2, [pc, #76]	; (10c8 <system_gclk_gen_set_config+0xa8>)
    107a:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    107c:	b25b      	sxtb	r3, r3
    107e:	2b00      	cmp	r3, #0
    1080:	dbfb      	blt.n	107a <system_gclk_gen_set_config+0x5a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1082:	4b12      	ldr	r3, [pc, #72]	; (10cc <system_gclk_gen_set_config+0xac>)
    1084:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1086:	4b12      	ldr	r3, [pc, #72]	; (10d0 <system_gclk_gen_set_config+0xb0>)
    1088:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    108a:	4a0f      	ldr	r2, [pc, #60]	; (10c8 <system_gclk_gen_set_config+0xa8>)
    108c:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    108e:	b25b      	sxtb	r3, r3
    1090:	2b00      	cmp	r3, #0
    1092:	dbfb      	blt.n	108c <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1094:	4b0c      	ldr	r3, [pc, #48]	; (10c8 <system_gclk_gen_set_config+0xa8>)
    1096:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1098:	001a      	movs	r2, r3
    109a:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    109c:	b25b      	sxtb	r3, r3
    109e:	2b00      	cmp	r3, #0
    10a0:	dbfb      	blt.n	109a <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    10a2:	4a09      	ldr	r2, [pc, #36]	; (10c8 <system_gclk_gen_set_config+0xa8>)
    10a4:	6853      	ldr	r3, [r2, #4]
    10a6:	2180      	movs	r1, #128	; 0x80
    10a8:	0249      	lsls	r1, r1, #9
    10aa:	400b      	ands	r3, r1
    10ac:	431d      	orrs	r5, r3
    10ae:	6055      	str	r5, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    10b0:	4b08      	ldr	r3, [pc, #32]	; (10d4 <system_gclk_gen_set_config+0xb4>)
    10b2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    10b4:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    10b6:	2200      	movs	r2, #0
    10b8:	e7d2      	b.n	1060 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    10ba:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    10bc:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    10be:	2380      	movs	r3, #128	; 0x80
    10c0:	029b      	lsls	r3, r3, #10
    10c2:	431d      	orrs	r5, r3
    10c4:	e7d2      	b.n	106c <system_gclk_gen_set_config+0x4c>
    10c6:	46c0      	nop			; (mov r8, r8)
    10c8:	40000c00 	.word	0x40000c00
    10cc:	00000181 	.word	0x00000181
    10d0:	40000c08 	.word	0x40000c08
    10d4:	000001c1 	.word	0x000001c1

000010d8 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    10d8:	b510      	push	{r4, lr}
    10da:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    10dc:	4a0b      	ldr	r2, [pc, #44]	; (110c <system_gclk_gen_enable+0x34>)
    10de:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    10e0:	b25b      	sxtb	r3, r3
    10e2:	2b00      	cmp	r3, #0
    10e4:	dbfb      	blt.n	10de <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    10e6:	4b0a      	ldr	r3, [pc, #40]	; (1110 <system_gclk_gen_enable+0x38>)
    10e8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    10ea:	4b0a      	ldr	r3, [pc, #40]	; (1114 <system_gclk_gen_enable+0x3c>)
    10ec:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    10ee:	4a07      	ldr	r2, [pc, #28]	; (110c <system_gclk_gen_enable+0x34>)
    10f0:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    10f2:	b25b      	sxtb	r3, r3
    10f4:	2b00      	cmp	r3, #0
    10f6:	dbfb      	blt.n	10f0 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    10f8:	4a04      	ldr	r2, [pc, #16]	; (110c <system_gclk_gen_enable+0x34>)
    10fa:	6851      	ldr	r1, [r2, #4]
    10fc:	2380      	movs	r3, #128	; 0x80
    10fe:	025b      	lsls	r3, r3, #9
    1100:	430b      	orrs	r3, r1
    1102:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    1104:	4b04      	ldr	r3, [pc, #16]	; (1118 <system_gclk_gen_enable+0x40>)
    1106:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1108:	bd10      	pop	{r4, pc}
    110a:	46c0      	nop			; (mov r8, r8)
    110c:	40000c00 	.word	0x40000c00
    1110:	00000181 	.word	0x00000181
    1114:	40000c04 	.word	0x40000c04
    1118:	000001c1 	.word	0x000001c1

0000111c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    111c:	b570      	push	{r4, r5, r6, lr}
    111e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1120:	4a1a      	ldr	r2, [pc, #104]	; (118c <system_gclk_gen_get_hz+0x70>)
    1122:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1124:	b25b      	sxtb	r3, r3
    1126:	2b00      	cmp	r3, #0
    1128:	dbfb      	blt.n	1122 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    112a:	4b19      	ldr	r3, [pc, #100]	; (1190 <system_gclk_gen_get_hz+0x74>)
    112c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    112e:	4b19      	ldr	r3, [pc, #100]	; (1194 <system_gclk_gen_get_hz+0x78>)
    1130:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1132:	4a16      	ldr	r2, [pc, #88]	; (118c <system_gclk_gen_get_hz+0x70>)
    1134:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1136:	b25b      	sxtb	r3, r3
    1138:	2b00      	cmp	r3, #0
    113a:	dbfb      	blt.n	1134 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    113c:	4e13      	ldr	r6, [pc, #76]	; (118c <system_gclk_gen_get_hz+0x70>)
    113e:	6870      	ldr	r0, [r6, #4]
    1140:	04c0      	lsls	r0, r0, #19
    1142:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1144:	4b14      	ldr	r3, [pc, #80]	; (1198 <system_gclk_gen_get_hz+0x7c>)
    1146:	4798      	blx	r3
    1148:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    114a:	4b12      	ldr	r3, [pc, #72]	; (1194 <system_gclk_gen_get_hz+0x78>)
    114c:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    114e:	6876      	ldr	r6, [r6, #4]
    1150:	02f6      	lsls	r6, r6, #11
    1152:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1154:	4b11      	ldr	r3, [pc, #68]	; (119c <system_gclk_gen_get_hz+0x80>)
    1156:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1158:	4a0c      	ldr	r2, [pc, #48]	; (118c <system_gclk_gen_get_hz+0x70>)
    115a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    115c:	b25b      	sxtb	r3, r3
    115e:	2b00      	cmp	r3, #0
    1160:	dbfb      	blt.n	115a <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1162:	4b0a      	ldr	r3, [pc, #40]	; (118c <system_gclk_gen_get_hz+0x70>)
    1164:	689c      	ldr	r4, [r3, #8]
    1166:	0224      	lsls	r4, r4, #8
    1168:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    116a:	4b0d      	ldr	r3, [pc, #52]	; (11a0 <system_gclk_gen_get_hz+0x84>)
    116c:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    116e:	2e00      	cmp	r6, #0
    1170:	d107      	bne.n	1182 <system_gclk_gen_get_hz+0x66>
    1172:	2c01      	cmp	r4, #1
    1174:	d907      	bls.n	1186 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    1176:	0021      	movs	r1, r4
    1178:	0028      	movs	r0, r5
    117a:	4b0a      	ldr	r3, [pc, #40]	; (11a4 <system_gclk_gen_get_hz+0x88>)
    117c:	4798      	blx	r3
    117e:	0005      	movs	r5, r0
    1180:	e001      	b.n	1186 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1182:	3401      	adds	r4, #1
    1184:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    1186:	0028      	movs	r0, r5
    1188:	bd70      	pop	{r4, r5, r6, pc}
    118a:	46c0      	nop			; (mov r8, r8)
    118c:	40000c00 	.word	0x40000c00
    1190:	00000181 	.word	0x00000181
    1194:	40000c04 	.word	0x40000c04
    1198:	00000bf1 	.word	0x00000bf1
    119c:	40000c08 	.word	0x40000c08
    11a0:	000001c1 	.word	0x000001c1
    11a4:	00001dcd 	.word	0x00001dcd

000011a8 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    11a8:	b510      	push	{r4, lr}
    11aa:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    11ac:	4b06      	ldr	r3, [pc, #24]	; (11c8 <system_gclk_chan_enable+0x20>)
    11ae:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    11b0:	4b06      	ldr	r3, [pc, #24]	; (11cc <system_gclk_chan_enable+0x24>)
    11b2:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    11b4:	4a06      	ldr	r2, [pc, #24]	; (11d0 <system_gclk_chan_enable+0x28>)
    11b6:	8853      	ldrh	r3, [r2, #2]
    11b8:	2180      	movs	r1, #128	; 0x80
    11ba:	01c9      	lsls	r1, r1, #7
    11bc:	430b      	orrs	r3, r1
    11be:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    11c0:	4b04      	ldr	r3, [pc, #16]	; (11d4 <system_gclk_chan_enable+0x2c>)
    11c2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    11c4:	bd10      	pop	{r4, pc}
    11c6:	46c0      	nop			; (mov r8, r8)
    11c8:	00000181 	.word	0x00000181
    11cc:	40000c02 	.word	0x40000c02
    11d0:	40000c00 	.word	0x40000c00
    11d4:	000001c1 	.word	0x000001c1

000011d8 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    11d8:	b510      	push	{r4, lr}
    11da:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    11dc:	4b0f      	ldr	r3, [pc, #60]	; (121c <system_gclk_chan_disable+0x44>)
    11de:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    11e0:	4b0f      	ldr	r3, [pc, #60]	; (1220 <system_gclk_chan_disable+0x48>)
    11e2:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    11e4:	4a0f      	ldr	r2, [pc, #60]	; (1224 <system_gclk_chan_disable+0x4c>)
    11e6:	8853      	ldrh	r3, [r2, #2]
    11e8:	051b      	lsls	r3, r3, #20
    11ea:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    11ec:	8853      	ldrh	r3, [r2, #2]
    11ee:	490e      	ldr	r1, [pc, #56]	; (1228 <system_gclk_chan_disable+0x50>)
    11f0:	400b      	ands	r3, r1
    11f2:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    11f4:	8853      	ldrh	r3, [r2, #2]
    11f6:	490d      	ldr	r1, [pc, #52]	; (122c <system_gclk_chan_disable+0x54>)
    11f8:	400b      	ands	r3, r1
    11fa:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    11fc:	0011      	movs	r1, r2
    11fe:	2280      	movs	r2, #128	; 0x80
    1200:	01d2      	lsls	r2, r2, #7
    1202:	884b      	ldrh	r3, [r1, #2]
    1204:	4213      	tst	r3, r2
    1206:	d1fc      	bne.n	1202 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1208:	4906      	ldr	r1, [pc, #24]	; (1224 <system_gclk_chan_disable+0x4c>)
    120a:	884a      	ldrh	r2, [r1, #2]
    120c:	0203      	lsls	r3, r0, #8
    120e:	4806      	ldr	r0, [pc, #24]	; (1228 <system_gclk_chan_disable+0x50>)
    1210:	4002      	ands	r2, r0
    1212:	4313      	orrs	r3, r2
    1214:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    1216:	4b06      	ldr	r3, [pc, #24]	; (1230 <system_gclk_chan_disable+0x58>)
    1218:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    121a:	bd10      	pop	{r4, pc}
    121c:	00000181 	.word	0x00000181
    1220:	40000c02 	.word	0x40000c02
    1224:	40000c00 	.word	0x40000c00
    1228:	fffff0ff 	.word	0xfffff0ff
    122c:	ffffbfff 	.word	0xffffbfff
    1230:	000001c1 	.word	0x000001c1

00001234 <system_gclk_chan_set_config>:
{
    1234:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1236:	780c      	ldrb	r4, [r1, #0]
    1238:	0224      	lsls	r4, r4, #8
    123a:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    123c:	4b02      	ldr	r3, [pc, #8]	; (1248 <system_gclk_chan_set_config+0x14>)
    123e:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1240:	b2a4      	uxth	r4, r4
    1242:	4b02      	ldr	r3, [pc, #8]	; (124c <system_gclk_chan_set_config+0x18>)
    1244:	805c      	strh	r4, [r3, #2]
}
    1246:	bd10      	pop	{r4, pc}
    1248:	000011d9 	.word	0x000011d9
    124c:	40000c00 	.word	0x40000c00

00001250 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1250:	b510      	push	{r4, lr}
    1252:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1254:	4b06      	ldr	r3, [pc, #24]	; (1270 <system_gclk_chan_get_hz+0x20>)
    1256:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1258:	4b06      	ldr	r3, [pc, #24]	; (1274 <system_gclk_chan_get_hz+0x24>)
    125a:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    125c:	4b06      	ldr	r3, [pc, #24]	; (1278 <system_gclk_chan_get_hz+0x28>)
    125e:	885c      	ldrh	r4, [r3, #2]
    1260:	0524      	lsls	r4, r4, #20
    1262:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    1264:	4b05      	ldr	r3, [pc, #20]	; (127c <system_gclk_chan_get_hz+0x2c>)
    1266:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1268:	0020      	movs	r0, r4
    126a:	4b05      	ldr	r3, [pc, #20]	; (1280 <system_gclk_chan_get_hz+0x30>)
    126c:	4798      	blx	r3
}
    126e:	bd10      	pop	{r4, pc}
    1270:	00000181 	.word	0x00000181
    1274:	40000c02 	.word	0x40000c02
    1278:	40000c00 	.word	0x40000c00
    127c:	000001c1 	.word	0x000001c1
    1280:	0000111d 	.word	0x0000111d

00001284 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1284:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1286:	78d3      	ldrb	r3, [r2, #3]
    1288:	2b00      	cmp	r3, #0
    128a:	d135      	bne.n	12f8 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    128c:	7813      	ldrb	r3, [r2, #0]
    128e:	2b80      	cmp	r3, #128	; 0x80
    1290:	d029      	beq.n	12e6 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1292:	061b      	lsls	r3, r3, #24
    1294:	2480      	movs	r4, #128	; 0x80
    1296:	0264      	lsls	r4, r4, #9
    1298:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    129a:	7854      	ldrb	r4, [r2, #1]
    129c:	2502      	movs	r5, #2
    129e:	43ac      	bics	r4, r5
    12a0:	d106      	bne.n	12b0 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    12a2:	7894      	ldrb	r4, [r2, #2]
    12a4:	2c00      	cmp	r4, #0
    12a6:	d120      	bne.n	12ea <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    12a8:	2480      	movs	r4, #128	; 0x80
    12aa:	02a4      	lsls	r4, r4, #10
    12ac:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    12ae:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    12b0:	7854      	ldrb	r4, [r2, #1]
    12b2:	3c01      	subs	r4, #1
    12b4:	2c01      	cmp	r4, #1
    12b6:	d91c      	bls.n	12f2 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    12b8:	040d      	lsls	r5, r1, #16
    12ba:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    12bc:	24a0      	movs	r4, #160	; 0xa0
    12be:	05e4      	lsls	r4, r4, #23
    12c0:	432c      	orrs	r4, r5
    12c2:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    12c4:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    12c6:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    12c8:	24d0      	movs	r4, #208	; 0xd0
    12ca:	0624      	lsls	r4, r4, #24
    12cc:	432c      	orrs	r4, r5
    12ce:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    12d0:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    12d2:	78d4      	ldrb	r4, [r2, #3]
    12d4:	2c00      	cmp	r4, #0
    12d6:	d122      	bne.n	131e <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    12d8:	035b      	lsls	r3, r3, #13
    12da:	d51c      	bpl.n	1316 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    12dc:	7893      	ldrb	r3, [r2, #2]
    12de:	2b01      	cmp	r3, #1
    12e0:	d01e      	beq.n	1320 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    12e2:	6141      	str	r1, [r0, #20]
    12e4:	e017      	b.n	1316 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    12e6:	2300      	movs	r3, #0
    12e8:	e7d7      	b.n	129a <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    12ea:	24c0      	movs	r4, #192	; 0xc0
    12ec:	02e4      	lsls	r4, r4, #11
    12ee:	4323      	orrs	r3, r4
    12f0:	e7dd      	b.n	12ae <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    12f2:	4c0d      	ldr	r4, [pc, #52]	; (1328 <_system_pinmux_config+0xa4>)
    12f4:	4023      	ands	r3, r4
    12f6:	e7df      	b.n	12b8 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    12f8:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    12fa:	040c      	lsls	r4, r1, #16
    12fc:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    12fe:	23a0      	movs	r3, #160	; 0xa0
    1300:	05db      	lsls	r3, r3, #23
    1302:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1304:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1306:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1308:	23d0      	movs	r3, #208	; 0xd0
    130a:	061b      	lsls	r3, r3, #24
    130c:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    130e:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    1310:	78d3      	ldrb	r3, [r2, #3]
    1312:	2b00      	cmp	r3, #0
    1314:	d103      	bne.n	131e <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1316:	7853      	ldrb	r3, [r2, #1]
    1318:	3b01      	subs	r3, #1
    131a:	2b01      	cmp	r3, #1
    131c:	d902      	bls.n	1324 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    131e:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    1320:	6181      	str	r1, [r0, #24]
    1322:	e7f8      	b.n	1316 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    1324:	6081      	str	r1, [r0, #8]
}
    1326:	e7fa      	b.n	131e <_system_pinmux_config+0x9a>
    1328:	fffbffff 	.word	0xfffbffff

0000132c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    132c:	b510      	push	{r4, lr}
    132e:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1330:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1332:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1334:	2900      	cmp	r1, #0
    1336:	d104      	bne.n	1342 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1338:	0943      	lsrs	r3, r0, #5
    133a:	01db      	lsls	r3, r3, #7
    133c:	4905      	ldr	r1, [pc, #20]	; (1354 <system_pinmux_pin_set_config+0x28>)
    133e:	468c      	mov	ip, r1
    1340:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1342:	241f      	movs	r4, #31
    1344:	4020      	ands	r0, r4
    1346:	2101      	movs	r1, #1
    1348:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    134a:	0018      	movs	r0, r3
    134c:	4b02      	ldr	r3, [pc, #8]	; (1358 <system_pinmux_pin_set_config+0x2c>)
    134e:	4798      	blx	r3
}
    1350:	bd10      	pop	{r4, pc}
    1352:	46c0      	nop			; (mov r8, r8)
    1354:	41004400 	.word	0x41004400
    1358:	00001285 	.word	0x00001285

0000135c <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    135c:	4770      	bx	lr
	...

00001360 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1360:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1362:	4b05      	ldr	r3, [pc, #20]	; (1378 <system_init+0x18>)
    1364:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1366:	4b05      	ldr	r3, [pc, #20]	; (137c <system_init+0x1c>)
    1368:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    136a:	4b05      	ldr	r3, [pc, #20]	; (1380 <system_init+0x20>)
    136c:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    136e:	4b05      	ldr	r3, [pc, #20]	; (1384 <system_init+0x24>)
    1370:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1372:	4b05      	ldr	r3, [pc, #20]	; (1388 <system_init+0x28>)
    1374:	4798      	blx	r3
}
    1376:	bd10      	pop	{r4, pc}
    1378:	00000ea1 	.word	0x00000ea1
    137c:	000001f1 	.word	0x000001f1
    1380:	0000135d 	.word	0x0000135d
    1384:	0000135d 	.word	0x0000135d
    1388:	0000135d 	.word	0x0000135d

0000138c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    138c:	e7fe      	b.n	138c <Dummy_Handler>
	...

00001390 <Reset_Handler>:
{
    1390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    1392:	4a2a      	ldr	r2, [pc, #168]	; (143c <Reset_Handler+0xac>)
    1394:	4b2a      	ldr	r3, [pc, #168]	; (1440 <Reset_Handler+0xb0>)
    1396:	429a      	cmp	r2, r3
    1398:	d011      	beq.n	13be <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    139a:	001a      	movs	r2, r3
    139c:	4b29      	ldr	r3, [pc, #164]	; (1444 <Reset_Handler+0xb4>)
    139e:	429a      	cmp	r2, r3
    13a0:	d20d      	bcs.n	13be <Reset_Handler+0x2e>
    13a2:	4a29      	ldr	r2, [pc, #164]	; (1448 <Reset_Handler+0xb8>)
    13a4:	3303      	adds	r3, #3
    13a6:	1a9b      	subs	r3, r3, r2
    13a8:	089b      	lsrs	r3, r3, #2
    13aa:	3301      	adds	r3, #1
    13ac:	009b      	lsls	r3, r3, #2
    13ae:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    13b0:	4823      	ldr	r0, [pc, #140]	; (1440 <Reset_Handler+0xb0>)
    13b2:	4922      	ldr	r1, [pc, #136]	; (143c <Reset_Handler+0xac>)
    13b4:	588c      	ldr	r4, [r1, r2]
    13b6:	5084      	str	r4, [r0, r2]
    13b8:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    13ba:	429a      	cmp	r2, r3
    13bc:	d1fa      	bne.n	13b4 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    13be:	4a23      	ldr	r2, [pc, #140]	; (144c <Reset_Handler+0xbc>)
    13c0:	4b23      	ldr	r3, [pc, #140]	; (1450 <Reset_Handler+0xc0>)
    13c2:	429a      	cmp	r2, r3
    13c4:	d20a      	bcs.n	13dc <Reset_Handler+0x4c>
    13c6:	43d3      	mvns	r3, r2
    13c8:	4921      	ldr	r1, [pc, #132]	; (1450 <Reset_Handler+0xc0>)
    13ca:	185b      	adds	r3, r3, r1
    13cc:	2103      	movs	r1, #3
    13ce:	438b      	bics	r3, r1
    13d0:	3304      	adds	r3, #4
    13d2:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    13d4:	2100      	movs	r1, #0
    13d6:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    13d8:	4293      	cmp	r3, r2
    13da:	d1fc      	bne.n	13d6 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    13dc:	4a1d      	ldr	r2, [pc, #116]	; (1454 <Reset_Handler+0xc4>)
    13de:	21ff      	movs	r1, #255	; 0xff
    13e0:	4b1d      	ldr	r3, [pc, #116]	; (1458 <Reset_Handler+0xc8>)
    13e2:	438b      	bics	r3, r1
    13e4:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    13e6:	39fd      	subs	r1, #253	; 0xfd
    13e8:	2390      	movs	r3, #144	; 0x90
    13ea:	005b      	lsls	r3, r3, #1
    13ec:	4a1b      	ldr	r2, [pc, #108]	; (145c <Reset_Handler+0xcc>)
    13ee:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    13f0:	4a1b      	ldr	r2, [pc, #108]	; (1460 <Reset_Handler+0xd0>)
    13f2:	78d3      	ldrb	r3, [r2, #3]
    13f4:	2503      	movs	r5, #3
    13f6:	43ab      	bics	r3, r5
    13f8:	2402      	movs	r4, #2
    13fa:	4323      	orrs	r3, r4
    13fc:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    13fe:	78d3      	ldrb	r3, [r2, #3]
    1400:	270c      	movs	r7, #12
    1402:	43bb      	bics	r3, r7
    1404:	2608      	movs	r6, #8
    1406:	4333      	orrs	r3, r6
    1408:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    140a:	4b16      	ldr	r3, [pc, #88]	; (1464 <Reset_Handler+0xd4>)
    140c:	7b98      	ldrb	r0, [r3, #14]
    140e:	2230      	movs	r2, #48	; 0x30
    1410:	4390      	bics	r0, r2
    1412:	2220      	movs	r2, #32
    1414:	4310      	orrs	r0, r2
    1416:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1418:	7b99      	ldrb	r1, [r3, #14]
    141a:	43b9      	bics	r1, r7
    141c:	4331      	orrs	r1, r6
    141e:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1420:	7b9a      	ldrb	r2, [r3, #14]
    1422:	43aa      	bics	r2, r5
    1424:	4322      	orrs	r2, r4
    1426:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    1428:	4a0f      	ldr	r2, [pc, #60]	; (1468 <Reset_Handler+0xd8>)
    142a:	6853      	ldr	r3, [r2, #4]
    142c:	2180      	movs	r1, #128	; 0x80
    142e:	430b      	orrs	r3, r1
    1430:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    1432:	4b0e      	ldr	r3, [pc, #56]	; (146c <Reset_Handler+0xdc>)
    1434:	4798      	blx	r3
        main();
    1436:	4b0e      	ldr	r3, [pc, #56]	; (1470 <Reset_Handler+0xe0>)
    1438:	4798      	blx	r3
    143a:	e7fe      	b.n	143a <Reset_Handler+0xaa>
    143c:	000034a8 	.word	0x000034a8
    1440:	20000000 	.word	0x20000000
    1444:	20000074 	.word	0x20000074
    1448:	20000004 	.word	0x20000004
    144c:	20000074 	.word	0x20000074
    1450:	20000178 	.word	0x20000178
    1454:	e000ed00 	.word	0xe000ed00
    1458:	00000000 	.word	0x00000000
    145c:	41007000 	.word	0x41007000
    1460:	41005000 	.word	0x41005000
    1464:	41004800 	.word	0x41004800
    1468:	41004000 	.word	0x41004000
    146c:	0000210d 	.word	0x0000210d
    1470:	00001ca1 	.word	0x00001ca1

00001474 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    1474:	b5f0      	push	{r4, r5, r6, r7, lr}
    1476:	46c6      	mov	lr, r8
    1478:	b500      	push	{lr}
    147a:	000c      	movs	r4, r1
    147c:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    147e:	2800      	cmp	r0, #0
    1480:	d10f      	bne.n	14a2 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    1482:	2a00      	cmp	r2, #0
    1484:	dd11      	ble.n	14aa <_read+0x36>
    1486:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    1488:	4e09      	ldr	r6, [pc, #36]	; (14b0 <_read+0x3c>)
    148a:	4d0a      	ldr	r5, [pc, #40]	; (14b4 <_read+0x40>)
    148c:	6830      	ldr	r0, [r6, #0]
    148e:	0021      	movs	r1, r4
    1490:	682b      	ldr	r3, [r5, #0]
    1492:	4798      	blx	r3
		ptr++;
    1494:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    1496:	42bc      	cmp	r4, r7
    1498:	d1f8      	bne.n	148c <_read+0x18>
		nChars++;
	}
	return nChars;
}
    149a:	4640      	mov	r0, r8
    149c:	bc04      	pop	{r2}
    149e:	4690      	mov	r8, r2
    14a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    14a2:	2301      	movs	r3, #1
    14a4:	425b      	negs	r3, r3
    14a6:	4698      	mov	r8, r3
    14a8:	e7f7      	b.n	149a <_read+0x26>
	for (; len > 0; --len) {
    14aa:	4680      	mov	r8, r0
    14ac:	e7f5      	b.n	149a <_read+0x26>
    14ae:	46c0      	nop			; (mov r8, r8)
    14b0:	200000fc 	.word	0x200000fc
    14b4:	200000f4 	.word	0x200000f4

000014b8 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    14b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    14ba:	46c6      	mov	lr, r8
    14bc:	b500      	push	{lr}
    14be:	000e      	movs	r6, r1
    14c0:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    14c2:	3801      	subs	r0, #1
    14c4:	2802      	cmp	r0, #2
    14c6:	d810      	bhi.n	14ea <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    14c8:	2a00      	cmp	r2, #0
    14ca:	d011      	beq.n	14f0 <_write+0x38>
    14cc:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    14ce:	4b0c      	ldr	r3, [pc, #48]	; (1500 <_write+0x48>)
    14d0:	4698      	mov	r8, r3
    14d2:	4f0c      	ldr	r7, [pc, #48]	; (1504 <_write+0x4c>)
    14d4:	4643      	mov	r3, r8
    14d6:	6818      	ldr	r0, [r3, #0]
    14d8:	5d31      	ldrb	r1, [r6, r4]
    14da:	683b      	ldr	r3, [r7, #0]
    14dc:	4798      	blx	r3
    14de:	2800      	cmp	r0, #0
    14e0:	db08      	blt.n	14f4 <_write+0x3c>
			return -1;
		}
		++nChars;
    14e2:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    14e4:	42a5      	cmp	r5, r4
    14e6:	d1f5      	bne.n	14d4 <_write+0x1c>
    14e8:	e006      	b.n	14f8 <_write+0x40>
		return -1;
    14ea:	2401      	movs	r4, #1
    14ec:	4264      	negs	r4, r4
    14ee:	e003      	b.n	14f8 <_write+0x40>
	for (; len != 0; --len) {
    14f0:	0014      	movs	r4, r2
    14f2:	e001      	b.n	14f8 <_write+0x40>
			return -1;
    14f4:	2401      	movs	r4, #1
    14f6:	4264      	negs	r4, r4
	}
	return nChars;
}
    14f8:	0020      	movs	r0, r4
    14fa:	bc04      	pop	{r2}
    14fc:	4690      	mov	r8, r2
    14fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1500:	200000fc 	.word	0x200000fc
    1504:	200000f8 	.word	0x200000f8

00001508 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    1508:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    150a:	4a06      	ldr	r2, [pc, #24]	; (1524 <_sbrk+0x1c>)
    150c:	6812      	ldr	r2, [r2, #0]
    150e:	2a00      	cmp	r2, #0
    1510:	d004      	beq.n	151c <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    1512:	4a04      	ldr	r2, [pc, #16]	; (1524 <_sbrk+0x1c>)
    1514:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    1516:	18c3      	adds	r3, r0, r3
    1518:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    151a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    151c:	4902      	ldr	r1, [pc, #8]	; (1528 <_sbrk+0x20>)
    151e:	4a01      	ldr	r2, [pc, #4]	; (1524 <_sbrk+0x1c>)
    1520:	6011      	str	r1, [r2, #0]
    1522:	e7f6      	b.n	1512 <_sbrk+0xa>
    1524:	200000cc 	.word	0x200000cc
    1528:	20002178 	.word	0x20002178

0000152c <_close>:
}

extern int _close(int file)
{
	return -1;
}
    152c:	2001      	movs	r0, #1
    152e:	4240      	negs	r0, r0
    1530:	4770      	bx	lr

00001532 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    1532:	2380      	movs	r3, #128	; 0x80
    1534:	019b      	lsls	r3, r3, #6
    1536:	604b      	str	r3, [r1, #4]

	return 0;
}
    1538:	2000      	movs	r0, #0
    153a:	4770      	bx	lr

0000153c <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    153c:	2001      	movs	r0, #1
    153e:	4770      	bx	lr

00001540 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    1540:	2000      	movs	r0, #0
    1542:	4770      	bx	lr

00001544 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    1544:	b570      	push	{r4, r5, r6, lr}
    1546:	b082      	sub	sp, #8
    1548:	0005      	movs	r5, r0
    154a:	000e      	movs	r6, r1
	uint16_t temp = 0;
    154c:	2200      	movs	r2, #0
    154e:	466b      	mov	r3, sp
    1550:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    1552:	4c06      	ldr	r4, [pc, #24]	; (156c <usart_serial_getchar+0x28>)
    1554:	466b      	mov	r3, sp
    1556:	1d99      	adds	r1, r3, #6
    1558:	0028      	movs	r0, r5
    155a:	47a0      	blx	r4
    155c:	2800      	cmp	r0, #0
    155e:	d1f9      	bne.n	1554 <usart_serial_getchar+0x10>

	*c = temp;
    1560:	466b      	mov	r3, sp
    1562:	3306      	adds	r3, #6
    1564:	881b      	ldrh	r3, [r3, #0]
    1566:	7033      	strb	r3, [r6, #0]
}
    1568:	b002      	add	sp, #8
    156a:	bd70      	pop	{r4, r5, r6, pc}
    156c:	000009f3 	.word	0x000009f3

00001570 <usart_serial_putchar>:
{
    1570:	b570      	push	{r4, r5, r6, lr}
    1572:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    1574:	b28c      	uxth	r4, r1
    1576:	4e03      	ldr	r6, [pc, #12]	; (1584 <usart_serial_putchar+0x14>)
    1578:	0021      	movs	r1, r4
    157a:	0028      	movs	r0, r5
    157c:	47b0      	blx	r6
    157e:	2800      	cmp	r0, #0
    1580:	d1fa      	bne.n	1578 <usart_serial_putchar+0x8>
}
    1582:	bd70      	pop	{r4, r5, r6, pc}
    1584:	000009cd 	.word	0x000009cd

00001588 <configure_console>:
#include "config_usart.h"

void configure_console(void)
{
    1588:	b570      	push	{r4, r5, r6, lr}
    158a:	b090      	sub	sp, #64	; 0x40
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    158c:	2380      	movs	r3, #128	; 0x80
    158e:	05db      	lsls	r3, r3, #23
    1590:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    1592:	2300      	movs	r3, #0
    1594:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    1596:	22ff      	movs	r2, #255	; 0xff
    1598:	4669      	mov	r1, sp
    159a:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    159c:	2200      	movs	r2, #0
    159e:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    15a0:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
    15a2:	2196      	movs	r1, #150	; 0x96
    15a4:	0189      	lsls	r1, r1, #6
    15a6:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
    15a8:	2101      	movs	r1, #1
    15aa:	2024      	movs	r0, #36	; 0x24
    15ac:	466c      	mov	r4, sp
    15ae:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    15b0:	3001      	adds	r0, #1
    15b2:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    15b4:	3125      	adds	r1, #37	; 0x25
    15b6:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    15b8:	3101      	adds	r1, #1
    15ba:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    15bc:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    15be:	3105      	adds	r1, #5
    15c0:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    15c2:	3101      	adds	r1, #1
    15c4:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    15c6:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    15c8:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    15ca:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    15cc:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    15ce:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    15d0:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    15d2:	2313      	movs	r3, #19
    15d4:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    15d6:	7762      	strb	r2, [r4, #29]
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);

	config_usart.baudrate    = SERCOMBAUD;
	config_usart.mux_setting = SERCOMMUX;
    15d8:	2380      	movs	r3, #128	; 0x80
    15da:	035b      	lsls	r3, r3, #13
    15dc:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = SERCOMPAD0;
    15de:	4b1e      	ldr	r3, [pc, #120]	; (1658 <configure_console+0xd0>)
    15e0:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = SERCOMPAD1;
    15e2:	4b1e      	ldr	r3, [pc, #120]	; (165c <configure_console+0xd4>)
    15e4:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = SERCOMPAD2;
    15e6:	2301      	movs	r3, #1
    15e8:	425b      	negs	r3, r3
    15ea:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = SERCOMPAD3;
    15ec:	930f      	str	r3, [sp, #60]	; 0x3c

	while (usart_init(&usart_instance,	 SERCOMMODULE, &config_usart) != STATUS_OK) { }
    15ee:	4d1c      	ldr	r5, [pc, #112]	; (1660 <configure_console+0xd8>)
    15f0:	4c1c      	ldr	r4, [pc, #112]	; (1664 <configure_console+0xdc>)
    15f2:	466a      	mov	r2, sp
    15f4:	491c      	ldr	r1, [pc, #112]	; (1668 <configure_console+0xe0>)
    15f6:	0028      	movs	r0, r5
    15f8:	47a0      	blx	r4
    15fa:	2800      	cmp	r0, #0
    15fc:	d1f9      	bne.n	15f2 <configure_console+0x6a>
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    15fe:	4c18      	ldr	r4, [pc, #96]	; (1660 <configure_console+0xd8>)
    1600:	4b1a      	ldr	r3, [pc, #104]	; (166c <configure_console+0xe4>)
    1602:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    1604:	4a1a      	ldr	r2, [pc, #104]	; (1670 <configure_console+0xe8>)
    1606:	4b1b      	ldr	r3, [pc, #108]	; (1674 <configure_console+0xec>)
    1608:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    160a:	4a1b      	ldr	r2, [pc, #108]	; (1678 <configure_console+0xf0>)
    160c:	4b1b      	ldr	r3, [pc, #108]	; (167c <configure_console+0xf4>)
    160e:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    1610:	466a      	mov	r2, sp
    1612:	4915      	ldr	r1, [pc, #84]	; (1668 <configure_console+0xe0>)
    1614:	0020      	movs	r0, r4
    1616:	4b13      	ldr	r3, [pc, #76]	; (1664 <configure_console+0xdc>)
    1618:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    161a:	4e19      	ldr	r6, [pc, #100]	; (1680 <configure_console+0xf8>)
    161c:	6833      	ldr	r3, [r6, #0]
    161e:	6898      	ldr	r0, [r3, #8]
    1620:	2100      	movs	r1, #0
    1622:	4d18      	ldr	r5, [pc, #96]	; (1684 <configure_console+0xfc>)
    1624:	47a8      	blx	r5
	setbuf(stdin, NULL);
    1626:	6833      	ldr	r3, [r6, #0]
    1628:	6858      	ldr	r0, [r3, #4]
    162a:	2100      	movs	r1, #0
    162c:	47a8      	blx	r5
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    162e:	6825      	ldr	r5, [r4, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1630:	0028      	movs	r0, r5
    1632:	4b15      	ldr	r3, [pc, #84]	; (1688 <configure_console+0x100>)
    1634:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1636:	231f      	movs	r3, #31
    1638:	4018      	ands	r0, r3
    163a:	3b1e      	subs	r3, #30
    163c:	4083      	lsls	r3, r0
    163e:	4a13      	ldr	r2, [pc, #76]	; (168c <configure_console+0x104>)
    1640:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1642:	6822      	ldr	r2, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
    1644:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1646:	2b00      	cmp	r3, #0
    1648:	d1fc      	bne.n	1644 <configure_console+0xbc>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    164a:	682b      	ldr	r3, [r5, #0]
    164c:	2202      	movs	r2, #2
    164e:	4313      	orrs	r3, r2
    1650:	602b      	str	r3, [r5, #0]

	stdio_serial_init(&usart_instance, SERCOMMODULE, &config_usart);
	usart_enable(&usart_instance);
}
    1652:	b010      	add	sp, #64	; 0x40
    1654:	bd70      	pop	{r4, r5, r6, pc}
    1656:	46c0      	nop			; (mov r8, r8)
    1658:	00080003 	.word	0x00080003
    165c:	00090003 	.word	0x00090003
    1660:	20000100 	.word	0x20000100
    1664:	00000691 	.word	0x00000691
    1668:	42001000 	.word	0x42001000
    166c:	200000fc 	.word	0x200000fc
    1670:	00001571 	.word	0x00001571
    1674:	200000f8 	.word	0x200000f8
    1678:	00001545 	.word	0x00001545
    167c:	200000f4 	.word	0x200000f4
    1680:	20000010 	.word	0x20000010
    1684:	000021ad 	.word	0x000021ad
    1688:	00000601 	.word	0x00000601
    168c:	e000e100 	.word	0xe000e100

00001690 <configure_usart_USB>:
}


/**************************SERCOM STUFF*******************************/
void configure_usart_USB(void)
{
    1690:	b530      	push	{r4, r5, lr}
    1692:	b091      	sub	sp, #68	; 0x44
	config->data_order       = USART_DATAORDER_LSB;
    1694:	2380      	movs	r3, #128	; 0x80
    1696:	05db      	lsls	r3, r3, #23
    1698:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    169a:	2300      	movs	r3, #0
    169c:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    169e:	22ff      	movs	r2, #255	; 0xff
    16a0:	4669      	mov	r1, sp
    16a2:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    16a4:	2200      	movs	r2, #0
    16a6:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    16a8:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
    16aa:	2196      	movs	r1, #150	; 0x96
    16ac:	0189      	lsls	r1, r1, #6
    16ae:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
    16b0:	2101      	movs	r1, #1
    16b2:	2024      	movs	r0, #36	; 0x24
    16b4:	466c      	mov	r4, sp
    16b6:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    16b8:	3001      	adds	r0, #1
    16ba:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    16bc:	3125      	adds	r1, #37	; 0x25
    16be:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    16c0:	3101      	adds	r1, #1
    16c2:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    16c4:	930a      	str	r3, [sp, #40]	; 0x28
	config->run_in_standby   = false;
    16c6:	3105      	adds	r1, #5
    16c8:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    16ca:	3101      	adds	r1, #1
    16cc:	5463      	strb	r3, [r4, r1]
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    16ce:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    16d0:	8223      	strh	r3, [r4, #16]
	config->lin_slave_enable      = false;
    16d2:	76e3      	strb	r3, [r4, #27]
	config->immediate_buffer_overflow_notification  = false;
    16d4:	7622      	strb	r2, [r4, #24]
	config->start_frame_detection_enable            = false;
    16d6:	7722      	strb	r2, [r4, #28]
	config->encoding_format_enable                  = false;
    16d8:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    16da:	2313      	movs	r3, #19
    16dc:	76a3      	strb	r3, [r4, #26]
	config->collision_detection_enable              = false;
    16de:	7762      	strb	r2, [r4, #29]
	struct usart_config config_usart_USB;
	usart_get_config_defaults(&config_usart_USB);

		config_usart_USB.baudrate    = 9600;
		config_usart_USB.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    16e0:	2380      	movs	r3, #128	; 0x80
    16e2:	035b      	lsls	r3, r3, #13
    16e4:	9303      	str	r3, [sp, #12]
		config_usart_USB.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    16e6:	4b12      	ldr	r3, [pc, #72]	; (1730 <configure_usart_USB+0xa0>)
    16e8:	930c      	str	r3, [sp, #48]	; 0x30
		config_usart_USB.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    16ea:	4b12      	ldr	r3, [pc, #72]	; (1734 <configure_usart_USB+0xa4>)
    16ec:	930d      	str	r3, [sp, #52]	; 0x34
		config_usart_USB.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    16ee:	2301      	movs	r3, #1
    16f0:	425b      	negs	r3, r3
    16f2:	930e      	str	r3, [sp, #56]	; 0x38
		config_usart_USB.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    16f4:	930f      	str	r3, [sp, #60]	; 0x3c
		while (usart_init(&usart_USB,
    16f6:	4d10      	ldr	r5, [pc, #64]	; (1738 <configure_usart_USB+0xa8>)
    16f8:	4c10      	ldr	r4, [pc, #64]	; (173c <configure_usart_USB+0xac>)
    16fa:	466a      	mov	r2, sp
    16fc:	4910      	ldr	r1, [pc, #64]	; (1740 <configure_usart_USB+0xb0>)
    16fe:	0028      	movs	r0, r5
    1700:	47a0      	blx	r4
    1702:	2800      	cmp	r0, #0
    1704:	d1f9      	bne.n	16fa <configure_usart_USB+0x6a>
	SercomUsart *const usart_hw = &(module->hw->USART);
    1706:	4d0c      	ldr	r5, [pc, #48]	; (1738 <configure_usart_USB+0xa8>)
    1708:	682c      	ldr	r4, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    170a:	0020      	movs	r0, r4
    170c:	4b0d      	ldr	r3, [pc, #52]	; (1744 <configure_usart_USB+0xb4>)
    170e:	4798      	blx	r3
    1710:	231f      	movs	r3, #31
    1712:	4018      	ands	r0, r3
    1714:	3b1e      	subs	r3, #30
    1716:	4083      	lsls	r3, r0
    1718:	4a0b      	ldr	r2, [pc, #44]	; (1748 <configure_usart_USB+0xb8>)
    171a:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    171c:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    171e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1720:	2b00      	cmp	r3, #0
    1722:	d1fc      	bne.n	171e <configure_usart_USB+0x8e>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1724:	6823      	ldr	r3, [r4, #0]
    1726:	2202      	movs	r2, #2
    1728:	4313      	orrs	r3, r2
    172a:	6023      	str	r3, [r4, #0]
		EDBG_CDC_MODULE, &config_usart_USB) != STATUS_OK) {
		}

	usart_enable(&usart_USB);
}
    172c:	b011      	add	sp, #68	; 0x44
    172e:	bd30      	pop	{r4, r5, pc}
    1730:	00160002 	.word	0x00160002
    1734:	00170002 	.word	0x00170002
    1738:	20000138 	.word	0x20000138
    173c:	00000691 	.word	0x00000691
    1740:	42001400 	.word	0x42001400
    1744:	00000601 	.word	0x00000601
    1748:	e000e100 	.word	0xe000e100

0000174c <LCD_Fast_Fill>:
		(((long)(x2-x1)+1)*((long)(y2-y1)+1)));
	REG_PORT_OUTSET1 = LCD_CS;
}

void LCD_Fast_Fill(int ch, int cl, long pix)
{
    174c:	b570      	push	{r4, r5, r6, lr}
	int blocks;

	REG_PORT_OUTCLR1 = 0x0000ffff;
    174e:	4c19      	ldr	r4, [pc, #100]	; (17b4 <LCD_Fast_Fill+0x68>)
    1750:	4b19      	ldr	r3, [pc, #100]	; (17b8 <LCD_Fast_Fill+0x6c>)
    1752:	601c      	str	r4, [r3, #0]
	REG_PORT_OUTSET1 = (ch << 8) | cl;
    1754:	0200      	lsls	r0, r0, #8
    1756:	4301      	orrs	r1, r0
    1758:	4b18      	ldr	r3, [pc, #96]	; (17bc <LCD_Fast_Fill+0x70>)
    175a:	6019      	str	r1, [r3, #0]

	blocks = pix/16;
    175c:	17d3      	asrs	r3, r2, #31
    175e:	260f      	movs	r6, #15
    1760:	401e      	ands	r6, r3
    1762:	18b6      	adds	r6, r6, r2
    1764:	1136      	asrs	r6, r6, #4
	for (int i=0; i<blocks; i++)
    1766:	2500      	movs	r5, #0
    1768:	2e00      	cmp	r6, #0
    176a:	dd0c      	ble.n	1786 <LCD_Fast_Fill+0x3a>
	{
		for (int j=0; j<16; j++)
		{
			REG_PORT_OUTCLR1 = LCD_WR;
    176c:	4c12      	ldr	r4, [pc, #72]	; (17b8 <LCD_Fast_Fill+0x6c>)
    176e:	2180      	movs	r1, #128	; 0x80
    1770:	0289      	lsls	r1, r1, #10
			REG_PORT_OUTSET1 = LCD_WR;
    1772:	4812      	ldr	r0, [pc, #72]	; (17bc <LCD_Fast_Fill+0x70>)
{
    1774:	2310      	movs	r3, #16
			REG_PORT_OUTCLR1 = LCD_WR;
    1776:	6021      	str	r1, [r4, #0]
			REG_PORT_OUTSET1 = LCD_WR;
    1778:	6001      	str	r1, [r0, #0]
    177a:	3b01      	subs	r3, #1
		for (int j=0; j<16; j++)
    177c:	2b00      	cmp	r3, #0
    177e:	d1fa      	bne.n	1776 <LCD_Fast_Fill+0x2a>
	for (int i=0; i<blocks; i++)
    1780:	3501      	adds	r5, #1
    1782:	42ae      	cmp	r6, r5
    1784:	d1f6      	bne.n	1774 <LCD_Fast_Fill+0x28>
		}
	}
	
	if ((pix % 16) != 0)
    1786:	0713      	lsls	r3, r2, #28
    1788:	d013      	beq.n	17b2 <LCD_Fast_Fill+0x66>
		for (int i=0; i<(pix % 16)+1; i++)
    178a:	17d3      	asrs	r3, r2, #31
    178c:	0f1b      	lsrs	r3, r3, #28
    178e:	18d2      	adds	r2, r2, r3
    1790:	210f      	movs	r1, #15
    1792:	4011      	ands	r1, r2
    1794:	1ac9      	subs	r1, r1, r3
    1796:	1c4b      	adds	r3, r1, #1
    1798:	2b00      	cmp	r3, #0
    179a:	dd0a      	ble.n	17b2 <LCD_Fast_Fill+0x66>
    179c:	0019      	movs	r1, r3
    179e:	2300      	movs	r3, #0
		{
			REG_PORT_OUTCLR1 = LCD_WR;
    17a0:	4c05      	ldr	r4, [pc, #20]	; (17b8 <LCD_Fast_Fill+0x6c>)
    17a2:	2280      	movs	r2, #128	; 0x80
    17a4:	0292      	lsls	r2, r2, #10
			REG_PORT_OUTSET1 = LCD_WR;
    17a6:	4805      	ldr	r0, [pc, #20]	; (17bc <LCD_Fast_Fill+0x70>)
			REG_PORT_OUTCLR1 = LCD_WR;
    17a8:	6022      	str	r2, [r4, #0]
			REG_PORT_OUTSET1 = LCD_WR;
    17aa:	6002      	str	r2, [r0, #0]
		for (int i=0; i<(pix % 16)+1; i++)
    17ac:	3301      	adds	r3, #1
    17ae:	4299      	cmp	r1, r3
    17b0:	d1fa      	bne.n	17a8 <LCD_Fast_Fill+0x5c>
		}
}
    17b2:	bd70      	pop	{r4, r5, r6, pc}
    17b4:	0000ffff 	.word	0x0000ffff
    17b8:	41004494 	.word	0x41004494
    17bc:	41004498 	.word	0x41004498

000017c0 <LCD_Write_Bus>:
	LCD_Write_COM16(0x2c,0x00);
}


void LCD_Write_Bus(char VH, char VL)
{
    17c0:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = 0x0000ffff;
    17c2:	4c06      	ldr	r4, [pc, #24]	; (17dc <LCD_Write_Bus+0x1c>)
    17c4:	4b06      	ldr	r3, [pc, #24]	; (17e0 <LCD_Write_Bus+0x20>)
    17c6:	6023      	str	r3, [r4, #0]
	REG_PORT_OUTSET1 = (VH << 8) | VL;
    17c8:	0200      	lsls	r0, r0, #8
    17ca:	4301      	orrs	r1, r0
    17cc:	4b05      	ldr	r3, [pc, #20]	; (17e4 <LCD_Write_Bus+0x24>)
    17ce:	6019      	str	r1, [r3, #0]
	REG_PORT_OUTCLR1 = LCD_WR;
    17d0:	2280      	movs	r2, #128	; 0x80
    17d2:	0292      	lsls	r2, r2, #10
    17d4:	6022      	str	r2, [r4, #0]
	REG_PORT_OUTSET1 = LCD_WR;
    17d6:	601a      	str	r2, [r3, #0]
}
    17d8:	bd10      	pop	{r4, pc}
    17da:	46c0      	nop			; (mov r8, r8)
    17dc:	41004494 	.word	0x41004494
    17e0:	0000ffff 	.word	0x0000ffff
    17e4:	41004498 	.word	0x41004498

000017e8 <LCD_Write_COM16>:

void LCD_Write_COM16(char VH, char VL)
{
    17e8:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = LCD_DC;
    17ea:	2280      	movs	r2, #128	; 0x80
    17ec:	0412      	lsls	r2, r2, #16
    17ee:	4b02      	ldr	r3, [pc, #8]	; (17f8 <LCD_Write_COM16+0x10>)
    17f0:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(VH,VL);
    17f2:	4b02      	ldr	r3, [pc, #8]	; (17fc <LCD_Write_COM16+0x14>)
    17f4:	4798      	blx	r3
}
    17f6:	bd10      	pop	{r4, pc}
    17f8:	41004494 	.word	0x41004494
    17fc:	000017c1 	.word	0x000017c1

00001800 <LCD_Write_DATA16>:
	REG_PORT_OUTCLR1 = LCD_DC;
	LCD_Write_Bus(0x00, VL);
}

void LCD_Write_DATA16(char VH, char VL)
{
    1800:	b510      	push	{r4, lr}
	REG_PORT_OUTSET1 = LCD_DC;
    1802:	2280      	movs	r2, #128	; 0x80
    1804:	0412      	lsls	r2, r2, #16
    1806:	4b02      	ldr	r3, [pc, #8]	; (1810 <LCD_Write_DATA16+0x10>)
    1808:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(VH,VL);
    180a:	4b02      	ldr	r3, [pc, #8]	; (1814 <LCD_Write_DATA16+0x14>)
    180c:	4798      	blx	r3
}
    180e:	bd10      	pop	{r4, pc}
    1810:	41004498 	.word	0x41004498
    1814:	000017c1 	.word	0x000017c1

00001818 <setPixel>:
{
    1818:	b510      	push	{r4, lr}
	LCD_Write_DATA16((color>>8),(color&0xFF)); 
    181a:	b2c1      	uxtb	r1, r0
    181c:	0a00      	lsrs	r0, r0, #8
    181e:	4b01      	ldr	r3, [pc, #4]	; (1824 <setPixel+0xc>)
    1820:	4798      	blx	r3
}
    1822:	bd10      	pop	{r4, pc}
    1824:	00001801 	.word	0x00001801

00001828 <LCD_Write_DATA8>:

void LCD_Write_DATA8(char VL)
{
    1828:	b510      	push	{r4, lr}
    182a:	0001      	movs	r1, r0
	REG_PORT_OUTSET1 = LCD_DC;
    182c:	2280      	movs	r2, #128	; 0x80
    182e:	0412      	lsls	r2, r2, #16
    1830:	4b02      	ldr	r3, [pc, #8]	; (183c <LCD_Write_DATA8+0x14>)
    1832:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(0x00, VL);
    1834:	2000      	movs	r0, #0
    1836:	4b02      	ldr	r3, [pc, #8]	; (1840 <LCD_Write_DATA8+0x18>)
    1838:	4798      	blx	r3
}
    183a:	bd10      	pop	{r4, pc}
    183c:	41004498 	.word	0x41004498
    1840:	000017c1 	.word	0x000017c1

00001844 <setXY>:
{
    1844:	b5f0      	push	{r4, r5, r6, r7, lr}
    1846:	b083      	sub	sp, #12
    1848:	000e      	movs	r6, r1
    184a:	9300      	str	r3, [sp, #0]
	y1=display_Y_size-y1;
    184c:	4b1c      	ldr	r3, [pc, #112]	; (18c0 <setXY+0x7c>)
    184e:	881d      	ldrh	r5, [r3, #0]
    1850:	1a28      	subs	r0, r5, r0
    1852:	b287      	uxth	r7, r0
	y2=display_Y_size-y2;
    1854:	1aad      	subs	r5, r5, r2
    1856:	b2ad      	uxth	r5, r5
	LCD_Write_COM16(0x2a,0x00);
    1858:	2100      	movs	r1, #0
    185a:	202a      	movs	r0, #42	; 0x2a
    185c:	4c19      	ldr	r4, [pc, #100]	; (18c4 <setXY+0x80>)
    185e:	47a0      	blx	r4
	LCD_Write_DATA8(x1>>8);
    1860:	9601      	str	r6, [sp, #4]
    1862:	0a30      	lsrs	r0, r6, #8
    1864:	4e18      	ldr	r6, [pc, #96]	; (18c8 <setXY+0x84>)
    1866:	47b0      	blx	r6
	LCD_Write_COM16(0x2a,0x01);
    1868:	2101      	movs	r1, #1
    186a:	202a      	movs	r0, #42	; 0x2a
    186c:	47a0      	blx	r4
	LCD_Write_DATA8(x1);
    186e:	466b      	mov	r3, sp
    1870:	7918      	ldrb	r0, [r3, #4]
    1872:	47b0      	blx	r6
	LCD_Write_COM16(0x2a,0x02);
    1874:	2102      	movs	r1, #2
    1876:	202a      	movs	r0, #42	; 0x2a
    1878:	47a0      	blx	r4
	LCD_Write_DATA8(x2>>8);
    187a:	9b00      	ldr	r3, [sp, #0]
    187c:	0a18      	lsrs	r0, r3, #8
    187e:	47b0      	blx	r6
	LCD_Write_COM16(0x2a,0x03);
    1880:	2103      	movs	r1, #3
    1882:	202a      	movs	r0, #42	; 0x2a
    1884:	47a0      	blx	r4
	LCD_Write_DATA8(x2);
    1886:	466b      	mov	r3, sp
    1888:	7818      	ldrb	r0, [r3, #0]
    188a:	47b0      	blx	r6
	LCD_Write_COM16(0x2b,0x00);
    188c:	2100      	movs	r1, #0
    188e:	202b      	movs	r0, #43	; 0x2b
    1890:	47a0      	blx	r4
	LCD_Write_DATA8(y1>>8);
    1892:	0a28      	lsrs	r0, r5, #8
    1894:	47b0      	blx	r6
	LCD_Write_COM16(0x2b,0x01);
    1896:	2101      	movs	r1, #1
    1898:	202b      	movs	r0, #43	; 0x2b
    189a:	47a0      	blx	r4
	LCD_Write_DATA8(y1);
    189c:	b2e8      	uxtb	r0, r5
    189e:	47b0      	blx	r6
	LCD_Write_COM16(0x2b,0x02);
    18a0:	2102      	movs	r1, #2
    18a2:	202b      	movs	r0, #43	; 0x2b
    18a4:	47a0      	blx	r4
	LCD_Write_DATA8(y2>>8);
    18a6:	0a38      	lsrs	r0, r7, #8
    18a8:	47b0      	blx	r6
	LCD_Write_COM16(0x2b,0x03);
    18aa:	2103      	movs	r1, #3
    18ac:	202b      	movs	r0, #43	; 0x2b
    18ae:	47a0      	blx	r4
	LCD_Write_DATA8(y2);
    18b0:	b2f8      	uxtb	r0, r7
    18b2:	47b0      	blx	r6
	LCD_Write_COM16(0x2c,0x00);
    18b4:	2100      	movs	r1, #0
    18b6:	202c      	movs	r0, #44	; 0x2c
    18b8:	47a0      	blx	r4
}
    18ba:	b003      	add	sp, #12
    18bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    18be:	46c0      	nop			; (mov r8, r8)
    18c0:	2000000c 	.word	0x2000000c
    18c4:	000017e9 	.word	0x000017e9
    18c8:	00001829 	.word	0x00001829

000018cc <drawChar>:
{
    18cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    18ce:	46de      	mov	lr, fp
    18d0:	4657      	mov	r7, sl
    18d2:	464e      	mov	r6, r9
    18d4:	4645      	mov	r5, r8
    18d6:	b5e0      	push	{r5, r6, r7, lr}
    18d8:	b08b      	sub	sp, #44	; 0x2c
	uint8_t letter[25] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    18da:	a903      	add	r1, sp, #12
    18dc:	4b31      	ldr	r3, [pc, #196]	; (19a4 <drawChar+0xd8>)
    18de:	000a      	movs	r2, r1
    18e0:	cb31      	ldmia	r3!, {r0, r4, r5}
    18e2:	c231      	stmia	r2!, {r0, r4, r5}
    18e4:	cb31      	ldmia	r3!, {r0, r4, r5}
    18e6:	c231      	stmia	r2!, {r0, r4, r5}
    18e8:	781b      	ldrb	r3, [r3, #0]
    18ea:	7013      	strb	r3, [r2, #0]
	REG_PORT_OUTCLR1 = LCD_CS;
    18ec:	2280      	movs	r2, #128	; 0x80
    18ee:	03d2      	lsls	r2, r2, #15
    18f0:	4b2d      	ldr	r3, [pc, #180]	; (19a8 <drawChar+0xdc>)
    18f2:	601a      	str	r2, [r3, #0]
    18f4:	4688      	mov	r8, r1
	int count = 0;
    18f6:	2300      	movs	r3, #0
    18f8:	4699      	mov	r9, r3
	int y = 0;
    18fa:	2500      	movs	r5, #0
	int x = 0;
    18fc:	2400      	movs	r4, #0
				setXY(x,y,x,y);
    18fe:	4b2b      	ldr	r3, [pc, #172]	; (19ac <drawChar+0xe0>)
    1900:	469b      	mov	fp, r3
				setPixel((fore_Color_High<<8)|fore_Color_Low);
    1902:	4b2b      	ldr	r3, [pc, #172]	; (19b0 <drawChar+0xe4>)
    1904:	469a      	mov	sl, r3
    1906:	e03b      	b.n	1980 <drawChar+0xb4>
			count++;
    1908:	3601      	adds	r6, #1
			y=(count/10)+(yCharPos*20)-1;
    190a:	4b2a      	ldr	r3, [pc, #168]	; (19b4 <drawChar+0xe8>)
    190c:	7818      	ldrb	r0, [r3, #0]
    190e:	0084      	lsls	r4, r0, #2
    1910:	1824      	adds	r4, r4, r0
    1912:	00a4      	lsls	r4, r4, #2
    1914:	210a      	movs	r1, #10
    1916:	0030      	movs	r0, r6
    1918:	4b27      	ldr	r3, [pc, #156]	; (19b8 <drawChar+0xec>)
    191a:	4798      	blx	r3
    191c:	1824      	adds	r4, r4, r0
    191e:	1e63      	subs	r3, r4, #1
    1920:	4698      	mov	r8, r3
			x=(count%10)+(xCharPos*10)-1;
    1922:	4b26      	ldr	r3, [pc, #152]	; (19bc <drawChar+0xf0>)
    1924:	7819      	ldrb	r1, [r3, #0]
    1926:	008c      	lsls	r4, r1, #2
    1928:	1864      	adds	r4, r4, r1
    192a:	0064      	lsls	r4, r4, #1
    192c:	210a      	movs	r1, #10
    192e:	0030      	movs	r0, r6
    1930:	4b23      	ldr	r3, [pc, #140]	; (19c0 <drawChar+0xf4>)
    1932:	4798      	blx	r3
    1934:	1864      	adds	r4, r4, r1
    1936:	3c01      	subs	r4, #1
		for(int j=0;j<8;j++)
    1938:	3f01      	subs	r7, #1
    193a:	d315      	bcc.n	1968 <drawChar+0x9c>
			if((letter[i]&(1<<(7-j)))!=0)
    193c:	782b      	ldrb	r3, [r5, #0]
    193e:	413b      	asrs	r3, r7
    1940:	07db      	lsls	r3, r3, #31
    1942:	d5e1      	bpl.n	1908 <drawChar+0x3c>
				setXY(x,y,x,y);
    1944:	b2a0      	uxth	r0, r4
    1946:	4643      	mov	r3, r8
    1948:	466a      	mov	r2, sp
    194a:	80d3      	strh	r3, [r2, #6]
    194c:	88d1      	ldrh	r1, [r2, #6]
    194e:	000b      	movs	r3, r1
    1950:	0002      	movs	r2, r0
    1952:	47d8      	blx	fp
				setPixel((fore_Color_High<<8)|fore_Color_Low);
    1954:	4653      	mov	r3, sl
    1956:	8818      	ldrh	r0, [r3, #0]
    1958:	0200      	lsls	r0, r0, #8
    195a:	4b1a      	ldr	r3, [pc, #104]	; (19c4 <drawChar+0xf8>)
    195c:	881b      	ldrh	r3, [r3, #0]
    195e:	4318      	orrs	r0, r3
    1960:	b280      	uxth	r0, r0
    1962:	4b19      	ldr	r3, [pc, #100]	; (19c8 <drawChar+0xfc>)
    1964:	4798      	blx	r3
    1966:	e7cf      	b.n	1908 <drawChar+0x3c>
    1968:	4643      	mov	r3, r8
    196a:	46a8      	mov	r8, r5
    196c:	001d      	movs	r5, r3
    196e:	2308      	movs	r3, #8
    1970:	469c      	mov	ip, r3
    1972:	44e1      	add	r9, ip
    1974:	3b07      	subs	r3, #7
    1976:	469c      	mov	ip, r3
    1978:	44e0      	add	r8, ip
	for(uint8_t i=0; i < (sizeof(letter)/sizeof(letter[0])); i++)
    197a:	464b      	mov	r3, r9
    197c:	2bc8      	cmp	r3, #200	; 0xc8
    197e:	d005      	beq.n	198c <drawChar+0xc0>
{
    1980:	464e      	mov	r6, r9
    1982:	2707      	movs	r7, #7
    1984:	002b      	movs	r3, r5
    1986:	4645      	mov	r5, r8
    1988:	4698      	mov	r8, r3
    198a:	e7d7      	b.n	193c <drawChar+0x70>
	REG_PORT_OUTSET1 = LCD_CS;
    198c:	2280      	movs	r2, #128	; 0x80
    198e:	03d2      	lsls	r2, r2, #15
    1990:	4b0e      	ldr	r3, [pc, #56]	; (19cc <drawChar+0x100>)
    1992:	601a      	str	r2, [r3, #0]
}
    1994:	b00b      	add	sp, #44	; 0x2c
    1996:	bc3c      	pop	{r2, r3, r4, r5}
    1998:	4690      	mov	r8, r2
    199a:	4699      	mov	r9, r3
    199c:	46a2      	mov	sl, r4
    199e:	46ab      	mov	fp, r5
    19a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    19a2:	46c0      	nop			; (mov r8, r8)
    19a4:	000031bc 	.word	0x000031bc
    19a8:	41004494 	.word	0x41004494
    19ac:	00001845 	.word	0x00001845
    19b0:	2000016e 	.word	0x2000016e
    19b4:	200000d1 	.word	0x200000d1
    19b8:	00001ee1 	.word	0x00001ee1
    19bc:	200000d0 	.word	0x200000d0
    19c0:	000020ad 	.word	0x000020ad
    19c4:	20000170 	.word	0x20000170
    19c8:	00001819 	.word	0x00001819
    19cc:	41004498 	.word	0x41004498

000019d0 <fillRect>:
{
    19d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    19d2:	46ce      	mov	lr, r9
    19d4:	4647      	mov	r7, r8
    19d6:	b580      	push	{r7, lr}
    19d8:	b083      	sub	sp, #12
    19da:	4681      	mov	r9, r0
    19dc:	4688      	mov	r8, r1
    19de:	0015      	movs	r5, r2
    19e0:	001c      	movs	r4, r3
	if (x1>x2)
    19e2:	4290      	cmp	r0, r2
    19e4:	dd02      	ble.n	19ec <fillRect+0x1c>
    19e6:	0403      	lsls	r3, r0, #16
		SwapUint16(x1, x2);
    19e8:	4691      	mov	r9, r2
    19ea:	0c1d      	lsrs	r5, r3, #16
	if (y1>y2)
    19ec:	45a0      	cmp	r8, r4
    19ee:	dd03      	ble.n	19f8 <fillRect+0x28>
    19f0:	4643      	mov	r3, r8
    19f2:	041b      	lsls	r3, r3, #16
		SwapUint16(y1, y2);
    19f4:	46a0      	mov	r8, r4
    19f6:	0c1c      	lsrs	r4, r3, #16
	REG_PORT_OUTCLR1 = LCD_CS;
    19f8:	2780      	movs	r7, #128	; 0x80
    19fa:	03ff      	lsls	r7, r7, #15
    19fc:	4b12      	ldr	r3, [pc, #72]	; (1a48 <fillRect+0x78>)
    19fe:	601f      	str	r7, [r3, #0]
	setXY(x1, y1, x2, y2);
    1a00:	b2a3      	uxth	r3, r4
    1a02:	b2aa      	uxth	r2, r5
    1a04:	4641      	mov	r1, r8
    1a06:	4668      	mov	r0, sp
    1a08:	80c1      	strh	r1, [r0, #6]
    1a0a:	88c1      	ldrh	r1, [r0, #6]
    1a0c:	4648      	mov	r0, r9
    1a0e:	466e      	mov	r6, sp
    1a10:	80f0      	strh	r0, [r6, #6]
    1a12:	88f0      	ldrh	r0, [r6, #6]
    1a14:	4e0d      	ldr	r6, [pc, #52]	; (1a4c <fillRect+0x7c>)
    1a16:	47b0      	blx	r6
	REG_PORT_OUTSET1 = LCD_DC;
    1a18:	4e0d      	ldr	r6, [pc, #52]	; (1a50 <fillRect+0x80>)
    1a1a:	2380      	movs	r3, #128	; 0x80
    1a1c:	041b      	lsls	r3, r3, #16
    1a1e:	6033      	str	r3, [r6, #0]
		(((long)(x2-x1)+1)*((long)(y2-y1)+1)));
    1a20:	464b      	mov	r3, r9
    1a22:	1aed      	subs	r5, r5, r3
    1a24:	3501      	adds	r5, #1
    1a26:	4643      	mov	r3, r8
    1a28:	1ae2      	subs	r2, r4, r3
    1a2a:	3201      	adds	r2, #1
	LCD_Fast_Fill(fore_Color_High, fore_Color_Low, 
    1a2c:	436a      	muls	r2, r5
    1a2e:	4b09      	ldr	r3, [pc, #36]	; (1a54 <fillRect+0x84>)
    1a30:	8819      	ldrh	r1, [r3, #0]
    1a32:	4b09      	ldr	r3, [pc, #36]	; (1a58 <fillRect+0x88>)
    1a34:	8818      	ldrh	r0, [r3, #0]
    1a36:	4b09      	ldr	r3, [pc, #36]	; (1a5c <fillRect+0x8c>)
    1a38:	4798      	blx	r3
	REG_PORT_OUTSET1 = LCD_CS;
    1a3a:	6037      	str	r7, [r6, #0]
}
    1a3c:	b003      	add	sp, #12
    1a3e:	bc0c      	pop	{r2, r3}
    1a40:	4690      	mov	r8, r2
    1a42:	4699      	mov	r9, r3
    1a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1a46:	46c0      	nop			; (mov r8, r8)
    1a48:	41004494 	.word	0x41004494
    1a4c:	00001845 	.word	0x00001845
    1a50:	41004498 	.word	0x41004498
    1a54:	20000170 	.word	0x20000170
    1a58:	2000016e 	.word	0x2000016e
    1a5c:	0000174d 	.word	0x0000174d

00001a60 <clrXY>:
{
    1a60:	b510      	push	{r4, lr}
	setXY(0,0,display_X_size,display_Y_size);
    1a62:	4b04      	ldr	r3, [pc, #16]	; (1a74 <clrXY+0x14>)
    1a64:	881b      	ldrh	r3, [r3, #0]
    1a66:	4a04      	ldr	r2, [pc, #16]	; (1a78 <clrXY+0x18>)
    1a68:	8812      	ldrh	r2, [r2, #0]
    1a6a:	2100      	movs	r1, #0
    1a6c:	2000      	movs	r0, #0
    1a6e:	4c03      	ldr	r4, [pc, #12]	; (1a7c <clrXY+0x1c>)
    1a70:	47a0      	blx	r4
}
    1a72:	bd10      	pop	{r4, pc}
    1a74:	2000000c 	.word	0x2000000c
    1a78:	2000000a 	.word	0x2000000a
    1a7c:	00001845 	.word	0x00001845

00001a80 <clrScr>:
{
    1a80:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = LCD_CS;
    1a82:	2280      	movs	r2, #128	; 0x80
    1a84:	03d2      	lsls	r2, r2, #15
    1a86:	4b02      	ldr	r3, [pc, #8]	; (1a90 <clrScr+0x10>)
    1a88:	601a      	str	r2, [r3, #0]
	clrXY();
    1a8a:	4b02      	ldr	r3, [pc, #8]	; (1a94 <clrScr+0x14>)
    1a8c:	4798      	blx	r3
}
    1a8e:	bd10      	pop	{r4, pc}
    1a90:	41004494 	.word	0x41004494
    1a94:	00001a61 	.word	0x00001a61

00001a98 <drawKare>:
//	graphic in the entire project. Please note this is the most
//	space efficient way to do this; a 40x31 bitmap is 930 bytes, 
//	whereas	this is (104*2)+28+20, or 256 bytes.
/*********************************************************************/
void drawKare(int emotion)
{
    1a98:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a9a:	b0c1      	sub	sp, #260	; 0x104
    1a9c:	0007      	movs	r7, r0
	uint16_t body[104] = {10,10,20,20,20,0,380,10,380,10,390,20,0,
    1a9e:	22d0      	movs	r2, #208	; 0xd0
    1aa0:	4930      	ldr	r1, [pc, #192]	; (1b64 <drawKare+0xcc>)
    1aa2:	311c      	adds	r1, #28
    1aa4:	a80c      	add	r0, sp, #48	; 0x30
    1aa6:	4b30      	ldr	r3, [pc, #192]	; (1b68 <drawKare+0xd0>)
    1aa8:	4798      	blx	r3
		80,190,280,200,280,40,290,190,0,70,50,80,0,90,50,100,0,110,
		50,120,0,130,50,140,0,150,50,160,0,170,50,180,0,190,50,200,
		300,200,370,210,30,220,370,230,30,240,370,250,30,260,370,
		270,90,280,300,290};
			
	uint8_t happyTerm[28] = {180,80,190,130,170,130,190,140,140,
    1aaa:	a905      	add	r1, sp, #20
    1aac:	4b2f      	ldr	r3, [pc, #188]	; (1b6c <drawKare+0xd4>)
    1aae:	336c      	adds	r3, #108	; 0x6c
    1ab0:	000a      	movs	r2, r1
    1ab2:	cb13      	ldmia	r3!, {r0, r1, r4}
    1ab4:	c213      	stmia	r2!, {r0, r1, r4}
    1ab6:	cb13      	ldmia	r3!, {r0, r1, r4}
    1ab8:	c213      	stmia	r2!, {r0, r1, r4}
    1aba:	681b      	ldr	r3, [r3, #0]
    1abc:	6013      	str	r3, [r2, #0]
		60,150,100,210,60,220,100,130,150,140,160,140,160,220,170,
		220,150,230,160};
		
	uint8_t rPiBeret[20] = {120,60,240,80,110,70,120,90,150,
    1abe:	4b2c      	ldr	r3, [pc, #176]	; (1b70 <drawKare+0xd8>)
    1ac0:	3308      	adds	r3, #8
    1ac2:	466a      	mov	r2, sp
    1ac4:	cb13      	ldmia	r3!, {r0, r1, r4}
    1ac6:	c213      	stmia	r2!, {r0, r1, r4}
    1ac8:	cb03      	ldmia	r3!, {r0, r1}
    1aca:	c203      	stmia	r2!, {r0, r1}
	back_Color_High = ((r&248)|g>>5);
    1acc:	2300      	movs	r3, #0
    1ace:	4a29      	ldr	r2, [pc, #164]	; (1b74 <drawKare+0xdc>)
    1ad0:	8013      	strh	r3, [r2, #0]
	back_Color_Low = ((g&28)<<3|b>>3);
    1ad2:	4a29      	ldr	r2, [pc, #164]	; (1b78 <drawKare+0xe0>)
    1ad4:	8013      	strh	r3, [r2, #0]
    1ad6:	ac0c      	add	r4, sp, #48	; 0x30
    1ad8:	ae40      	add	r6, sp, #256	; 0x100

	setBackColorRGB(0,0,0);
		
	for(int i = 0; i < 104; i = i+4)
	{
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
    1ada:	4d28      	ldr	r5, [pc, #160]	; (1b7c <drawKare+0xe4>)
		((body[i+1]/iSv)+(offsetGraphicY)),
		((body[i+2]/iSv)+(offsetGraphicX)),
		((body[i+3]/iSv)+(offsetGraphicY)));
    1adc:	88e3      	ldrh	r3, [r4, #6]
    1ade:	105b      	asrs	r3, r3, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
    1ae0:	3396      	adds	r3, #150	; 0x96
		((body[i+2]/iSv)+(offsetGraphicX)),
    1ae2:	88a2      	ldrh	r2, [r4, #4]
    1ae4:	1052      	asrs	r2, r2, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
    1ae6:	322d      	adds	r2, #45	; 0x2d
    1ae8:	32ff      	adds	r2, #255	; 0xff
		((body[i+1]/iSv)+(offsetGraphicY)),
    1aea:	8861      	ldrh	r1, [r4, #2]
    1aec:	1049      	asrs	r1, r1, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
    1aee:	3196      	adds	r1, #150	; 0x96
    1af0:	8820      	ldrh	r0, [r4, #0]
    1af2:	1040      	asrs	r0, r0, #1
    1af4:	302d      	adds	r0, #45	; 0x2d
    1af6:	30ff      	adds	r0, #255	; 0xff
    1af8:	47a8      	blx	r5
    1afa:	3408      	adds	r4, #8
	for(int i = 0; i < 104; i = i+4)
    1afc:	42b4      	cmp	r4, r6
    1afe:	d1ed      	bne.n	1adc <drawKare+0x44>
	}
	switch(emotion)
    1b00:	2f00      	cmp	r7, #0
    1b02:	d003      	beq.n	1b0c <drawKare+0x74>
    1b04:	2f01      	cmp	r7, #1
    1b06:	d017      	beq.n	1b38 <drawKare+0xa0>
				break;
			case 2:
				//make a sad terminal thing go here
				break;
	}
}
    1b08:	b041      	add	sp, #260	; 0x104
    1b0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1b0c:	ac05      	add	r4, sp, #20
    1b0e:	ae0c      	add	r6, sp, #48	; 0x30
					fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
    1b10:	4d1a      	ldr	r5, [pc, #104]	; (1b7c <drawKare+0xe4>)
					((happyTerm[i+3]/iSv)+(offsetGraphicY)));
    1b12:	78e3      	ldrb	r3, [r4, #3]
    1b14:	105b      	asrs	r3, r3, #1
					fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
    1b16:	3396      	adds	r3, #150	; 0x96
					((happyTerm[i+2]/iSv)+(offsetGraphicX)),
    1b18:	78a2      	ldrb	r2, [r4, #2]
    1b1a:	1052      	asrs	r2, r2, #1
					fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
    1b1c:	322d      	adds	r2, #45	; 0x2d
    1b1e:	32ff      	adds	r2, #255	; 0xff
					((happyTerm[i+1]/iSv)+(offsetGraphicY)),
    1b20:	7861      	ldrb	r1, [r4, #1]
    1b22:	1049      	asrs	r1, r1, #1
					fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
    1b24:	3196      	adds	r1, #150	; 0x96
    1b26:	7820      	ldrb	r0, [r4, #0]
    1b28:	1040      	asrs	r0, r0, #1
    1b2a:	302d      	adds	r0, #45	; 0x2d
    1b2c:	30ff      	adds	r0, #255	; 0xff
    1b2e:	47a8      	blx	r5
    1b30:	3404      	adds	r4, #4
				for(int i = 0; i < 28; i = i+4)
    1b32:	42a6      	cmp	r6, r4
    1b34:	d1ed      	bne.n	1b12 <drawKare+0x7a>
    1b36:	e7e7      	b.n	1b08 <drawKare+0x70>
    1b38:	466c      	mov	r4, sp
    1b3a:	ae05      	add	r6, sp, #20
					fillRect((
    1b3c:	4d0f      	ldr	r5, [pc, #60]	; (1b7c <drawKare+0xe4>)
					((rPiBeret[i+3]/iSv)+(offsetGraphicY)));
    1b3e:	78e3      	ldrb	r3, [r4, #3]
    1b40:	105b      	asrs	r3, r3, #1
					fillRect((
    1b42:	3396      	adds	r3, #150	; 0x96
					((rPiBeret[i+2]/iSv)+(offsetGraphicX)),
    1b44:	78a2      	ldrb	r2, [r4, #2]
    1b46:	1052      	asrs	r2, r2, #1
					fillRect((
    1b48:	322d      	adds	r2, #45	; 0x2d
    1b4a:	32ff      	adds	r2, #255	; 0xff
					((rPiBeret[i+1]/iSv)+(offsetGraphicY)),
    1b4c:	7861      	ldrb	r1, [r4, #1]
    1b4e:	1049      	asrs	r1, r1, #1
					fillRect((
    1b50:	3196      	adds	r1, #150	; 0x96
					(rPiBeret[i]/iSv)+(offsetGraphicX)),
    1b52:	7820      	ldrb	r0, [r4, #0]
    1b54:	1040      	asrs	r0, r0, #1
					fillRect((
    1b56:	302d      	adds	r0, #45	; 0x2d
    1b58:	30ff      	adds	r0, #255	; 0xff
    1b5a:	47a8      	blx	r5
    1b5c:	3404      	adds	r4, #4
				for(int i = 0; i < 20; i = i+4)
    1b5e:	42b4      	cmp	r4, r6
    1b60:	d1ed      	bne.n	1b3e <drawKare+0xa6>
    1b62:	e7d1      	b.n	1b08 <drawKare+0x70>
    1b64:	000031bc 	.word	0x000031bc
    1b68:	00002155 	.word	0x00002155
    1b6c:	0000323c 	.word	0x0000323c
    1b70:	000032bc 	.word	0x000032bc
    1b74:	20000172 	.word	0x20000172
    1b78:	2000016c 	.word	0x2000016c
    1b7c:	000019d1 	.word	0x000019d1

00001b80 <InitLCD>:

/**************************InitLCD()**********************************/
void InitLCD(void)
{
    1b80:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b82:	46d6      	mov	lr, sl
    1b84:	464f      	mov	r7, r9
    1b86:	4646      	mov	r6, r8
    1b88:	b5c0      	push	{r6, r7, lr}
    1b8a:	b082      	sub	sp, #8
		0x32,0x00,0x44,0x00,0x53,0x00,0x88,0x00,0xB6,0x00,0xF3,0x01,
		0x22,0x01,0x64,0x01,0x92,0x01,0xD4,0x02,0x07,0x02,0x08,0x02,
		0x34,0x02,0x5F,0x02,0x78,0x02,0x94,0x02,0xA6,0x02,0xBB,0x02,
		0xDB,0x02,0xF9,0x03,0x1F,0x03,0x7F};
		
	REG_PORT_DIRSET1 = 0x00010000;
    1b8c:	2380      	movs	r3, #128	; 0x80
    1b8e:	025b      	lsls	r3, r3, #9
    1b90:	4a32      	ldr	r2, [pc, #200]	; (1c5c <InitLCD+0xdc>)
    1b92:	6013      	str	r3, [r2, #0]
	REG_PORT_OUTSET1 = PORT_PB16;
    1b94:	4c32      	ldr	r4, [pc, #200]	; (1c60 <InitLCD+0xe0>)
    1b96:	6023      	str	r3, [r4, #0]
	
	REG_PORT_OUTSET1 = LCD_Reset;
    1b98:	2580      	movs	r5, #128	; 0x80
    1b9a:	05ed      	lsls	r5, r5, #23
    1b9c:	6025      	str	r5, [r4, #0]
	delay_ms(5);
    1b9e:	2005      	movs	r0, #5
    1ba0:	4f30      	ldr	r7, [pc, #192]	; (1c64 <InitLCD+0xe4>)
    1ba2:	47b8      	blx	r7
	REG_PORT_OUTCLR1 = LCD_Reset;
    1ba4:	4e30      	ldr	r6, [pc, #192]	; (1c68 <InitLCD+0xe8>)
    1ba6:	6035      	str	r5, [r6, #0]
	delay_ms(15);
    1ba8:	200f      	movs	r0, #15
    1baa:	47b8      	blx	r7
	REG_PORT_OUTSET1 = LCD_Reset;
    1bac:	6025      	str	r5, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_CS;
    1bae:	2380      	movs	r3, #128	; 0x80
    1bb0:	03db      	lsls	r3, r3, #15
    1bb2:	6033      	str	r3, [r6, #0]

	for(int i = 0; i < 70; i++)
    1bb4:	2400      	movs	r4, #0
	{
		LCD_Write_COM16(belial[i],mulciber[i]);
    1bb6:	4f2d      	ldr	r7, [pc, #180]	; (1c6c <InitLCD+0xec>)
    1bb8:	4e2d      	ldr	r6, [pc, #180]	; (1c70 <InitLCD+0xf0>)
    1bba:	4d2e      	ldr	r5, [pc, #184]	; (1c74 <InitLCD+0xf4>)
    1bbc:	5de1      	ldrb	r1, [r4, r7]
    1bbe:	5da0      	ldrb	r0, [r4, r6]
    1bc0:	47a8      	blx	r5
		LCD_Write_DATA8(lucifer[i]);
    1bc2:	4b2d      	ldr	r3, [pc, #180]	; (1c78 <InitLCD+0xf8>)
    1bc4:	5ce0      	ldrb	r0, [r4, r3]
    1bc6:	4b2d      	ldr	r3, [pc, #180]	; (1c7c <InitLCD+0xfc>)
    1bc8:	4798      	blx	r3
	for(int i = 0; i < 70; i++)
    1bca:	3401      	adds	r4, #1
    1bcc:	2c46      	cmp	r4, #70	; 0x46
    1bce:	d1f5      	bne.n	1bbc <InitLCD+0x3c>
    1bd0:	23d1      	movs	r3, #209	; 0xd1
    1bd2:	9301      	str	r3, [sp, #4]
	}
	
	for(char k = 0xD1; k < 0xD6; k++)
		for(int l = 0; l < 48; l++)
		{
			LCD_Write_COM16(k,l);
    1bd4:	4d27      	ldr	r5, [pc, #156]	; (1c74 <InitLCD+0xf4>)
			LCD_Write_DATA8(beelzebub[l]);
    1bd6:	4f2a      	ldr	r7, [pc, #168]	; (1c80 <InitLCD+0x100>)
    1bd8:	4e28      	ldr	r6, [pc, #160]	; (1c7c <InitLCD+0xfc>)
	for(int i = 0; i < 70; i++)
    1bda:	2400      	movs	r4, #0
			LCD_Write_COM16(k,l);
    1bdc:	b2e1      	uxtb	r1, r4
    1bde:	9801      	ldr	r0, [sp, #4]
    1be0:	47a8      	blx	r5
			LCD_Write_DATA8(beelzebub[l]);
    1be2:	5de0      	ldrb	r0, [r4, r7]
    1be4:	47b0      	blx	r6
		for(int l = 0; l < 48; l++)
    1be6:	3401      	adds	r4, #1
    1be8:	2c30      	cmp	r4, #48	; 0x30
    1bea:	d1f7      	bne.n	1bdc <InitLCD+0x5c>
	for(char k = 0xD1; k < 0xD6; k++)
    1bec:	9b01      	ldr	r3, [sp, #4]
    1bee:	3301      	adds	r3, #1
    1bf0:	b2db      	uxtb	r3, r3
    1bf2:	9301      	str	r3, [sp, #4]
    1bf4:	2bd6      	cmp	r3, #214	; 0xd6
    1bf6:	d1f0      	bne.n	1bda <InitLCD+0x5a>
		}
		
  	LCD_Write_COM16(0x11,0x00);   //Start Up  
    1bf8:	2100      	movs	r1, #0
    1bfa:	2011      	movs	r0, #17
    1bfc:	4d1d      	ldr	r5, [pc, #116]	; (1c74 <InitLCD+0xf4>)
    1bfe:	47a8      	blx	r5
  	delay_ms(5);
    1c00:	2005      	movs	r0, #5
    1c02:	4c18      	ldr	r4, [pc, #96]	; (1c64 <InitLCD+0xe4>)
    1c04:	47a0      	blx	r4
  	LCD_Write_COM16(0x29,0x00);   //Display On  
    1c06:	2100      	movs	r1, #0
    1c08:	2029      	movs	r0, #41	; 0x29
    1c0a:	47a8      	blx	r5
   	delay_ms(5);
    1c0c:	2005      	movs	r0, #5
    1c0e:	47a0      	blx	r4
	REG_PORT_OUTSET1 = LCD_CS;
    1c10:	2280      	movs	r2, #128	; 0x80
    1c12:	03d2      	lsls	r2, r2, #15
    1c14:	4b12      	ldr	r3, [pc, #72]	; (1c60 <InitLCD+0xe0>)
    1c16:	601a      	str	r2, [r3, #0]
	
	clrScr();
    1c18:	4b1a      	ldr	r3, [pc, #104]	; (1c84 <InitLCD+0x104>)
    1c1a:	4798      	blx	r3
	fore_Color_High = ((r&248)|g>>5);
    1c1c:	4b1a      	ldr	r3, [pc, #104]	; (1c88 <InitLCD+0x108>)
    1c1e:	4698      	mov	r8, r3
    1c20:	2400      	movs	r4, #0
    1c22:	801c      	strh	r4, [r3, #0]
	fore_Color_Low = ((g&28)<<3|b>>3);
    1c24:	4f19      	ldr	r7, [pc, #100]	; (1c8c <InitLCD+0x10c>)
    1c26:	803c      	strh	r4, [r7, #0]
	back_Color_High = ((r&248)|g>>5);
    1c28:	4e19      	ldr	r6, [pc, #100]	; (1c90 <InitLCD+0x110>)
    1c2a:	8034      	strh	r4, [r6, #0]
	back_Color_Low = ((g&28)<<3|b>>3);
    1c2c:	4b19      	ldr	r3, [pc, #100]	; (1c94 <InitLCD+0x114>)
    1c2e:	469a      	mov	sl, r3
    1c30:	801c      	strh	r4, [r3, #0]
	setColorRGB(0,0,0);
	setBackColorRGB(0, 0, 0);
	fillRect(0,0,799,489);
    1c32:	23ea      	movs	r3, #234	; 0xea
    1c34:	33ff      	adds	r3, #255	; 0xff
    1c36:	4a18      	ldr	r2, [pc, #96]	; (1c98 <InitLCD+0x118>)
    1c38:	2100      	movs	r1, #0
    1c3a:	2000      	movs	r0, #0
    1c3c:	4d17      	ldr	r5, [pc, #92]	; (1c9c <InitLCD+0x11c>)
    1c3e:	47a8      	blx	r5
	fore_Color_High = ((r&248)|g>>5);
    1c40:	23ff      	movs	r3, #255	; 0xff
    1c42:	4642      	mov	r2, r8
    1c44:	8013      	strh	r3, [r2, #0]
	fore_Color_Low = ((g&28)<<3|b>>3);
    1c46:	803b      	strh	r3, [r7, #0]
	back_Color_High = ((r&248)|g>>5);
    1c48:	8034      	strh	r4, [r6, #0]
	back_Color_Low = ((g&28)<<3|b>>3);
    1c4a:	4653      	mov	r3, sl
    1c4c:	801c      	strh	r4, [r3, #0]
		
	setColorRGB(255,255,255);
	setBackColorRGB(0,0,0);
}
    1c4e:	b002      	add	sp, #8
    1c50:	bc1c      	pop	{r2, r3, r4}
    1c52:	4690      	mov	r8, r2
    1c54:	4699      	mov	r9, r3
    1c56:	46a2      	mov	sl, r4
    1c58:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1c5a:	46c0      	nop			; (mov r8, r8)
    1c5c:	41004488 	.word	0x41004488
    1c60:	41004498 	.word	0x41004498
    1c64:	00000155 	.word	0x00000155
    1c68:	41004494 	.word	0x41004494
    1c6c:	000033a8 	.word	0x000033a8
    1c70:	00003308 	.word	0x00003308
    1c74:	000017e9 	.word	0x000017e9
    1c78:	00003350 	.word	0x00003350
    1c7c:	00001829 	.word	0x00001829
    1c80:	000032d8 	.word	0x000032d8
    1c84:	00001a81 	.word	0x00001a81
    1c88:	2000016e 	.word	0x2000016e
    1c8c:	20000170 	.word	0x20000170
    1c90:	20000172 	.word	0x20000172
    1c94:	2000016c 	.word	0x2000016c
    1c98:	0000031f 	.word	0x0000031f
    1c9c:	000019d1 	.word	0x000019d1

00001ca0 <main>:
{
    1ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ca2:	46c6      	mov	lr, r8
    1ca4:	b500      	push	{lr}
	REG_PORT_DIRSET1 = 0x0000ffff;		//LCD data bus, PB00 - PB15
    1ca6:	4b33      	ldr	r3, [pc, #204]	; (1d74 <main+0xd4>)
    1ca8:	4e33      	ldr	r6, [pc, #204]	; (1d78 <main+0xd8>)
    1caa:	601e      	str	r6, [r3, #0]
	REG_PORT_DIRSET1 = LCD_Reset;
    1cac:	2580      	movs	r5, #128	; 0x80
    1cae:	05ed      	lsls	r5, r5, #23
    1cb0:	601d      	str	r5, [r3, #0]
	REG_PORT_DIRSET1 = LCD_CS;
    1cb2:	2480      	movs	r4, #128	; 0x80
    1cb4:	03e4      	lsls	r4, r4, #15
    1cb6:	601c      	str	r4, [r3, #0]
	REG_PORT_DIRSET1 = LCD_WR;
    1cb8:	2080      	movs	r0, #128	; 0x80
    1cba:	0280      	lsls	r0, r0, #10
    1cbc:	6018      	str	r0, [r3, #0]
	REG_PORT_DIRSET1 = LCD_DC;
    1cbe:	2180      	movs	r1, #128	; 0x80
    1cc0:	0409      	lsls	r1, r1, #16
    1cc2:	6019      	str	r1, [r3, #0]
	REG_PORT_DIRSET1 = LCD_RD;
    1cc4:	2280      	movs	r2, #128	; 0x80
    1cc6:	0252      	lsls	r2, r2, #9
    1cc8:	601a      	str	r2, [r3, #0]
	REG_PORT_OUTCLR1 = 0x0000ffff;
    1cca:	4b2c      	ldr	r3, [pc, #176]	; (1d7c <main+0xdc>)
    1ccc:	601e      	str	r6, [r3, #0]
	REG_PORT_OUTCLR1 = LCD_Reset;
    1cce:	601d      	str	r5, [r3, #0]
	REG_PORT_OUTCLR1 = LCD_CS;
    1cd0:	601c      	str	r4, [r3, #0]
	REG_PORT_OUTCLR1 = LCD_WR;
    1cd2:	6018      	str	r0, [r3, #0]
	REG_PORT_OUTCLR1 = LCD_DC;
    1cd4:	6019      	str	r1, [r3, #0]
	REG_PORT_OUTCLR1 = LCD_RD;
    1cd6:	601a      	str	r2, [r3, #0]
	system_init();
    1cd8:	4b29      	ldr	r3, [pc, #164]	; (1d80 <main+0xe0>)
    1cda:	4798      	blx	r3
	delay_init();
    1cdc:	4b29      	ldr	r3, [pc, #164]	; (1d84 <main+0xe4>)
    1cde:	4798      	blx	r3
	configure_usart_USB();
    1ce0:	4b29      	ldr	r3, [pc, #164]	; (1d88 <main+0xe8>)
    1ce2:	4798      	blx	r3
	configure_console();
    1ce4:	4b29      	ldr	r3, [pc, #164]	; (1d8c <main+0xec>)
    1ce6:	4798      	blx	r3
	printf("Hello World\n\r");
    1ce8:	4829      	ldr	r0, [pc, #164]	; (1d90 <main+0xf0>)
    1cea:	4b2a      	ldr	r3, [pc, #168]	; (1d94 <main+0xf4>)
    1cec:	4798      	blx	r3
	InitLCD();
    1cee:	4b2a      	ldr	r3, [pc, #168]	; (1d98 <main+0xf8>)
    1cf0:	4798      	blx	r3
	drawKare(0);
    1cf2:	2000      	movs	r0, #0
    1cf4:	4b29      	ldr	r3, [pc, #164]	; (1d9c <main+0xfc>)
    1cf6:	4798      	blx	r3
	delay_ms(1000);
    1cf8:	20fa      	movs	r0, #250	; 0xfa
    1cfa:	0080      	lsls	r0, r0, #2
    1cfc:	4b28      	ldr	r3, [pc, #160]	; (1da0 <main+0x100>)
    1cfe:	4798      	blx	r3
	fore_Color_High = ((r&248)|g>>5);
    1d00:	4e28      	ldr	r6, [pc, #160]	; (1da4 <main+0x104>)
    1d02:	2400      	movs	r4, #0
    1d04:	8034      	strh	r4, [r6, #0]
	fore_Color_Low = ((g&28)<<3|b>>3);
    1d06:	4d28      	ldr	r5, [pc, #160]	; (1da8 <main+0x108>)
    1d08:	802c      	strh	r4, [r5, #0]
	fillRect(0,0,display_Y_size,display_X_size);
    1d0a:	4b28      	ldr	r3, [pc, #160]	; (1dac <main+0x10c>)
    1d0c:	881b      	ldrh	r3, [r3, #0]
    1d0e:	4a28      	ldr	r2, [pc, #160]	; (1db0 <main+0x110>)
    1d10:	8812      	ldrh	r2, [r2, #0]
    1d12:	2100      	movs	r1, #0
    1d14:	2000      	movs	r0, #0
    1d16:	4f27      	ldr	r7, [pc, #156]	; (1db4 <main+0x114>)
    1d18:	47b8      	blx	r7
	fore_Color_High = ((r&248)|g>>5);
    1d1a:	2304      	movs	r3, #4
    1d1c:	8033      	strh	r3, [r6, #0]
	fore_Color_Low = ((g&28)<<3|b>>3);
    1d1e:	802c      	strh	r4, [r5, #0]
	back_Color_High = ((r&248)|g>>5);
    1d20:	4b25      	ldr	r3, [pc, #148]	; (1db8 <main+0x118>)
    1d22:	801c      	strh	r4, [r3, #0]
	back_Color_Low = ((g&28)<<3|b>>3);
    1d24:	4b25      	ldr	r3, [pc, #148]	; (1dbc <main+0x11c>)
    1d26:	801c      	strh	r4, [r3, #0]
    1d28:	2318      	movs	r3, #24
    1d2a:	4698      	mov	r8, r3
			drawChar(0x61);
    1d2c:	4e24      	ldr	r6, [pc, #144]	; (1dc0 <main+0x120>)
				xCharPos = 0;
    1d2e:	4f25      	ldr	r7, [pc, #148]	; (1dc4 <main+0x124>)
    1d30:	e019      	b.n	1d66 <main+0xc6>
    1d32:	2300      	movs	r3, #0
    1d34:	703b      	strb	r3, [r7, #0]
    1d36:	3c01      	subs	r4, #1
		for(int i = 0; i<80; i++)
    1d38:	2c00      	cmp	r4, #0
    1d3a:	d009      	beq.n	1d50 <main+0xb0>
			drawChar(0x61);
    1d3c:	2061      	movs	r0, #97	; 0x61
    1d3e:	47b0      	blx	r6
			xCharPos++;
    1d40:	782b      	ldrb	r3, [r5, #0]
    1d42:	3301      	adds	r3, #1
    1d44:	b2db      	uxtb	r3, r3
			if(xCharPos>=80)
    1d46:	2b4f      	cmp	r3, #79	; 0x4f
    1d48:	d8f3      	bhi.n	1d32 <main+0x92>
			xCharPos++;
    1d4a:	4a1e      	ldr	r2, [pc, #120]	; (1dc4 <main+0x124>)
    1d4c:	7013      	strb	r3, [r2, #0]
    1d4e:	e7f2      	b.n	1d36 <main+0x96>
		yCharPos++;
    1d50:	4a1d      	ldr	r2, [pc, #116]	; (1dc8 <main+0x128>)
    1d52:	7813      	ldrb	r3, [r2, #0]
    1d54:	3301      	adds	r3, #1
    1d56:	7013      	strb	r3, [r2, #0]
    1d58:	2301      	movs	r3, #1
    1d5a:	425b      	negs	r3, r3
    1d5c:	469c      	mov	ip, r3
    1d5e:	44e0      	add	r8, ip
	for(int j = 0; j<24; j++)
    1d60:	4643      	mov	r3, r8
    1d62:	2b00      	cmp	r3, #0
    1d64:	d002      	beq.n	1d6c <main+0xcc>
{
    1d66:	2450      	movs	r4, #80	; 0x50
			xCharPos++;
    1d68:	4d16      	ldr	r5, [pc, #88]	; (1dc4 <main+0x124>)
    1d6a:	e7e7      	b.n	1d3c <main+0x9c>
}
    1d6c:	2000      	movs	r0, #0
    1d6e:	bc04      	pop	{r2}
    1d70:	4690      	mov	r8, r2
    1d72:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d74:	41004488 	.word	0x41004488
    1d78:	0000ffff 	.word	0x0000ffff
    1d7c:	41004494 	.word	0x41004494
    1d80:	00001361 	.word	0x00001361
    1d84:	00000115 	.word	0x00000115
    1d88:	00001691 	.word	0x00001691
    1d8c:	00001589 	.word	0x00001589
    1d90:	00003398 	.word	0x00003398
    1d94:	00002179 	.word	0x00002179
    1d98:	00001b81 	.word	0x00001b81
    1d9c:	00001a99 	.word	0x00001a99
    1da0:	00000155 	.word	0x00000155
    1da4:	2000016e 	.word	0x2000016e
    1da8:	20000170 	.word	0x20000170
    1dac:	2000000a 	.word	0x2000000a
    1db0:	2000000c 	.word	0x2000000c
    1db4:	000019d1 	.word	0x000019d1
    1db8:	20000172 	.word	0x20000172
    1dbc:	2000016c 	.word	0x2000016c
    1dc0:	000018cd 	.word	0x000018cd
    1dc4:	200000d0 	.word	0x200000d0
    1dc8:	200000d1 	.word	0x200000d1

00001dcc <__udivsi3>:
    1dcc:	2200      	movs	r2, #0
    1dce:	0843      	lsrs	r3, r0, #1
    1dd0:	428b      	cmp	r3, r1
    1dd2:	d374      	bcc.n	1ebe <__udivsi3+0xf2>
    1dd4:	0903      	lsrs	r3, r0, #4
    1dd6:	428b      	cmp	r3, r1
    1dd8:	d35f      	bcc.n	1e9a <__udivsi3+0xce>
    1dda:	0a03      	lsrs	r3, r0, #8
    1ddc:	428b      	cmp	r3, r1
    1dde:	d344      	bcc.n	1e6a <__udivsi3+0x9e>
    1de0:	0b03      	lsrs	r3, r0, #12
    1de2:	428b      	cmp	r3, r1
    1de4:	d328      	bcc.n	1e38 <__udivsi3+0x6c>
    1de6:	0c03      	lsrs	r3, r0, #16
    1de8:	428b      	cmp	r3, r1
    1dea:	d30d      	bcc.n	1e08 <__udivsi3+0x3c>
    1dec:	22ff      	movs	r2, #255	; 0xff
    1dee:	0209      	lsls	r1, r1, #8
    1df0:	ba12      	rev	r2, r2
    1df2:	0c03      	lsrs	r3, r0, #16
    1df4:	428b      	cmp	r3, r1
    1df6:	d302      	bcc.n	1dfe <__udivsi3+0x32>
    1df8:	1212      	asrs	r2, r2, #8
    1dfa:	0209      	lsls	r1, r1, #8
    1dfc:	d065      	beq.n	1eca <__udivsi3+0xfe>
    1dfe:	0b03      	lsrs	r3, r0, #12
    1e00:	428b      	cmp	r3, r1
    1e02:	d319      	bcc.n	1e38 <__udivsi3+0x6c>
    1e04:	e000      	b.n	1e08 <__udivsi3+0x3c>
    1e06:	0a09      	lsrs	r1, r1, #8
    1e08:	0bc3      	lsrs	r3, r0, #15
    1e0a:	428b      	cmp	r3, r1
    1e0c:	d301      	bcc.n	1e12 <__udivsi3+0x46>
    1e0e:	03cb      	lsls	r3, r1, #15
    1e10:	1ac0      	subs	r0, r0, r3
    1e12:	4152      	adcs	r2, r2
    1e14:	0b83      	lsrs	r3, r0, #14
    1e16:	428b      	cmp	r3, r1
    1e18:	d301      	bcc.n	1e1e <__udivsi3+0x52>
    1e1a:	038b      	lsls	r3, r1, #14
    1e1c:	1ac0      	subs	r0, r0, r3
    1e1e:	4152      	adcs	r2, r2
    1e20:	0b43      	lsrs	r3, r0, #13
    1e22:	428b      	cmp	r3, r1
    1e24:	d301      	bcc.n	1e2a <__udivsi3+0x5e>
    1e26:	034b      	lsls	r3, r1, #13
    1e28:	1ac0      	subs	r0, r0, r3
    1e2a:	4152      	adcs	r2, r2
    1e2c:	0b03      	lsrs	r3, r0, #12
    1e2e:	428b      	cmp	r3, r1
    1e30:	d301      	bcc.n	1e36 <__udivsi3+0x6a>
    1e32:	030b      	lsls	r3, r1, #12
    1e34:	1ac0      	subs	r0, r0, r3
    1e36:	4152      	adcs	r2, r2
    1e38:	0ac3      	lsrs	r3, r0, #11
    1e3a:	428b      	cmp	r3, r1
    1e3c:	d301      	bcc.n	1e42 <__udivsi3+0x76>
    1e3e:	02cb      	lsls	r3, r1, #11
    1e40:	1ac0      	subs	r0, r0, r3
    1e42:	4152      	adcs	r2, r2
    1e44:	0a83      	lsrs	r3, r0, #10
    1e46:	428b      	cmp	r3, r1
    1e48:	d301      	bcc.n	1e4e <__udivsi3+0x82>
    1e4a:	028b      	lsls	r3, r1, #10
    1e4c:	1ac0      	subs	r0, r0, r3
    1e4e:	4152      	adcs	r2, r2
    1e50:	0a43      	lsrs	r3, r0, #9
    1e52:	428b      	cmp	r3, r1
    1e54:	d301      	bcc.n	1e5a <__udivsi3+0x8e>
    1e56:	024b      	lsls	r3, r1, #9
    1e58:	1ac0      	subs	r0, r0, r3
    1e5a:	4152      	adcs	r2, r2
    1e5c:	0a03      	lsrs	r3, r0, #8
    1e5e:	428b      	cmp	r3, r1
    1e60:	d301      	bcc.n	1e66 <__udivsi3+0x9a>
    1e62:	020b      	lsls	r3, r1, #8
    1e64:	1ac0      	subs	r0, r0, r3
    1e66:	4152      	adcs	r2, r2
    1e68:	d2cd      	bcs.n	1e06 <__udivsi3+0x3a>
    1e6a:	09c3      	lsrs	r3, r0, #7
    1e6c:	428b      	cmp	r3, r1
    1e6e:	d301      	bcc.n	1e74 <__udivsi3+0xa8>
    1e70:	01cb      	lsls	r3, r1, #7
    1e72:	1ac0      	subs	r0, r0, r3
    1e74:	4152      	adcs	r2, r2
    1e76:	0983      	lsrs	r3, r0, #6
    1e78:	428b      	cmp	r3, r1
    1e7a:	d301      	bcc.n	1e80 <__udivsi3+0xb4>
    1e7c:	018b      	lsls	r3, r1, #6
    1e7e:	1ac0      	subs	r0, r0, r3
    1e80:	4152      	adcs	r2, r2
    1e82:	0943      	lsrs	r3, r0, #5
    1e84:	428b      	cmp	r3, r1
    1e86:	d301      	bcc.n	1e8c <__udivsi3+0xc0>
    1e88:	014b      	lsls	r3, r1, #5
    1e8a:	1ac0      	subs	r0, r0, r3
    1e8c:	4152      	adcs	r2, r2
    1e8e:	0903      	lsrs	r3, r0, #4
    1e90:	428b      	cmp	r3, r1
    1e92:	d301      	bcc.n	1e98 <__udivsi3+0xcc>
    1e94:	010b      	lsls	r3, r1, #4
    1e96:	1ac0      	subs	r0, r0, r3
    1e98:	4152      	adcs	r2, r2
    1e9a:	08c3      	lsrs	r3, r0, #3
    1e9c:	428b      	cmp	r3, r1
    1e9e:	d301      	bcc.n	1ea4 <__udivsi3+0xd8>
    1ea0:	00cb      	lsls	r3, r1, #3
    1ea2:	1ac0      	subs	r0, r0, r3
    1ea4:	4152      	adcs	r2, r2
    1ea6:	0883      	lsrs	r3, r0, #2
    1ea8:	428b      	cmp	r3, r1
    1eaa:	d301      	bcc.n	1eb0 <__udivsi3+0xe4>
    1eac:	008b      	lsls	r3, r1, #2
    1eae:	1ac0      	subs	r0, r0, r3
    1eb0:	4152      	adcs	r2, r2
    1eb2:	0843      	lsrs	r3, r0, #1
    1eb4:	428b      	cmp	r3, r1
    1eb6:	d301      	bcc.n	1ebc <__udivsi3+0xf0>
    1eb8:	004b      	lsls	r3, r1, #1
    1eba:	1ac0      	subs	r0, r0, r3
    1ebc:	4152      	adcs	r2, r2
    1ebe:	1a41      	subs	r1, r0, r1
    1ec0:	d200      	bcs.n	1ec4 <__udivsi3+0xf8>
    1ec2:	4601      	mov	r1, r0
    1ec4:	4152      	adcs	r2, r2
    1ec6:	4610      	mov	r0, r2
    1ec8:	4770      	bx	lr
    1eca:	e7ff      	b.n	1ecc <__udivsi3+0x100>
    1ecc:	b501      	push	{r0, lr}
    1ece:	2000      	movs	r0, #0
    1ed0:	f000 f8f0 	bl	20b4 <__aeabi_idiv0>
    1ed4:	bd02      	pop	{r1, pc}
    1ed6:	46c0      	nop			; (mov r8, r8)

00001ed8 <__aeabi_uidivmod>:
    1ed8:	2900      	cmp	r1, #0
    1eda:	d0f7      	beq.n	1ecc <__udivsi3+0x100>
    1edc:	e776      	b.n	1dcc <__udivsi3>
    1ede:	4770      	bx	lr

00001ee0 <__divsi3>:
    1ee0:	4603      	mov	r3, r0
    1ee2:	430b      	orrs	r3, r1
    1ee4:	d47f      	bmi.n	1fe6 <__divsi3+0x106>
    1ee6:	2200      	movs	r2, #0
    1ee8:	0843      	lsrs	r3, r0, #1
    1eea:	428b      	cmp	r3, r1
    1eec:	d374      	bcc.n	1fd8 <__divsi3+0xf8>
    1eee:	0903      	lsrs	r3, r0, #4
    1ef0:	428b      	cmp	r3, r1
    1ef2:	d35f      	bcc.n	1fb4 <__divsi3+0xd4>
    1ef4:	0a03      	lsrs	r3, r0, #8
    1ef6:	428b      	cmp	r3, r1
    1ef8:	d344      	bcc.n	1f84 <__divsi3+0xa4>
    1efa:	0b03      	lsrs	r3, r0, #12
    1efc:	428b      	cmp	r3, r1
    1efe:	d328      	bcc.n	1f52 <__divsi3+0x72>
    1f00:	0c03      	lsrs	r3, r0, #16
    1f02:	428b      	cmp	r3, r1
    1f04:	d30d      	bcc.n	1f22 <__divsi3+0x42>
    1f06:	22ff      	movs	r2, #255	; 0xff
    1f08:	0209      	lsls	r1, r1, #8
    1f0a:	ba12      	rev	r2, r2
    1f0c:	0c03      	lsrs	r3, r0, #16
    1f0e:	428b      	cmp	r3, r1
    1f10:	d302      	bcc.n	1f18 <__divsi3+0x38>
    1f12:	1212      	asrs	r2, r2, #8
    1f14:	0209      	lsls	r1, r1, #8
    1f16:	d065      	beq.n	1fe4 <__divsi3+0x104>
    1f18:	0b03      	lsrs	r3, r0, #12
    1f1a:	428b      	cmp	r3, r1
    1f1c:	d319      	bcc.n	1f52 <__divsi3+0x72>
    1f1e:	e000      	b.n	1f22 <__divsi3+0x42>
    1f20:	0a09      	lsrs	r1, r1, #8
    1f22:	0bc3      	lsrs	r3, r0, #15
    1f24:	428b      	cmp	r3, r1
    1f26:	d301      	bcc.n	1f2c <__divsi3+0x4c>
    1f28:	03cb      	lsls	r3, r1, #15
    1f2a:	1ac0      	subs	r0, r0, r3
    1f2c:	4152      	adcs	r2, r2
    1f2e:	0b83      	lsrs	r3, r0, #14
    1f30:	428b      	cmp	r3, r1
    1f32:	d301      	bcc.n	1f38 <__divsi3+0x58>
    1f34:	038b      	lsls	r3, r1, #14
    1f36:	1ac0      	subs	r0, r0, r3
    1f38:	4152      	adcs	r2, r2
    1f3a:	0b43      	lsrs	r3, r0, #13
    1f3c:	428b      	cmp	r3, r1
    1f3e:	d301      	bcc.n	1f44 <__divsi3+0x64>
    1f40:	034b      	lsls	r3, r1, #13
    1f42:	1ac0      	subs	r0, r0, r3
    1f44:	4152      	adcs	r2, r2
    1f46:	0b03      	lsrs	r3, r0, #12
    1f48:	428b      	cmp	r3, r1
    1f4a:	d301      	bcc.n	1f50 <__divsi3+0x70>
    1f4c:	030b      	lsls	r3, r1, #12
    1f4e:	1ac0      	subs	r0, r0, r3
    1f50:	4152      	adcs	r2, r2
    1f52:	0ac3      	lsrs	r3, r0, #11
    1f54:	428b      	cmp	r3, r1
    1f56:	d301      	bcc.n	1f5c <__divsi3+0x7c>
    1f58:	02cb      	lsls	r3, r1, #11
    1f5a:	1ac0      	subs	r0, r0, r3
    1f5c:	4152      	adcs	r2, r2
    1f5e:	0a83      	lsrs	r3, r0, #10
    1f60:	428b      	cmp	r3, r1
    1f62:	d301      	bcc.n	1f68 <__divsi3+0x88>
    1f64:	028b      	lsls	r3, r1, #10
    1f66:	1ac0      	subs	r0, r0, r3
    1f68:	4152      	adcs	r2, r2
    1f6a:	0a43      	lsrs	r3, r0, #9
    1f6c:	428b      	cmp	r3, r1
    1f6e:	d301      	bcc.n	1f74 <__divsi3+0x94>
    1f70:	024b      	lsls	r3, r1, #9
    1f72:	1ac0      	subs	r0, r0, r3
    1f74:	4152      	adcs	r2, r2
    1f76:	0a03      	lsrs	r3, r0, #8
    1f78:	428b      	cmp	r3, r1
    1f7a:	d301      	bcc.n	1f80 <__divsi3+0xa0>
    1f7c:	020b      	lsls	r3, r1, #8
    1f7e:	1ac0      	subs	r0, r0, r3
    1f80:	4152      	adcs	r2, r2
    1f82:	d2cd      	bcs.n	1f20 <__divsi3+0x40>
    1f84:	09c3      	lsrs	r3, r0, #7
    1f86:	428b      	cmp	r3, r1
    1f88:	d301      	bcc.n	1f8e <__divsi3+0xae>
    1f8a:	01cb      	lsls	r3, r1, #7
    1f8c:	1ac0      	subs	r0, r0, r3
    1f8e:	4152      	adcs	r2, r2
    1f90:	0983      	lsrs	r3, r0, #6
    1f92:	428b      	cmp	r3, r1
    1f94:	d301      	bcc.n	1f9a <__divsi3+0xba>
    1f96:	018b      	lsls	r3, r1, #6
    1f98:	1ac0      	subs	r0, r0, r3
    1f9a:	4152      	adcs	r2, r2
    1f9c:	0943      	lsrs	r3, r0, #5
    1f9e:	428b      	cmp	r3, r1
    1fa0:	d301      	bcc.n	1fa6 <__divsi3+0xc6>
    1fa2:	014b      	lsls	r3, r1, #5
    1fa4:	1ac0      	subs	r0, r0, r3
    1fa6:	4152      	adcs	r2, r2
    1fa8:	0903      	lsrs	r3, r0, #4
    1faa:	428b      	cmp	r3, r1
    1fac:	d301      	bcc.n	1fb2 <__divsi3+0xd2>
    1fae:	010b      	lsls	r3, r1, #4
    1fb0:	1ac0      	subs	r0, r0, r3
    1fb2:	4152      	adcs	r2, r2
    1fb4:	08c3      	lsrs	r3, r0, #3
    1fb6:	428b      	cmp	r3, r1
    1fb8:	d301      	bcc.n	1fbe <__divsi3+0xde>
    1fba:	00cb      	lsls	r3, r1, #3
    1fbc:	1ac0      	subs	r0, r0, r3
    1fbe:	4152      	adcs	r2, r2
    1fc0:	0883      	lsrs	r3, r0, #2
    1fc2:	428b      	cmp	r3, r1
    1fc4:	d301      	bcc.n	1fca <__divsi3+0xea>
    1fc6:	008b      	lsls	r3, r1, #2
    1fc8:	1ac0      	subs	r0, r0, r3
    1fca:	4152      	adcs	r2, r2
    1fcc:	0843      	lsrs	r3, r0, #1
    1fce:	428b      	cmp	r3, r1
    1fd0:	d301      	bcc.n	1fd6 <__divsi3+0xf6>
    1fd2:	004b      	lsls	r3, r1, #1
    1fd4:	1ac0      	subs	r0, r0, r3
    1fd6:	4152      	adcs	r2, r2
    1fd8:	1a41      	subs	r1, r0, r1
    1fda:	d200      	bcs.n	1fde <__divsi3+0xfe>
    1fdc:	4601      	mov	r1, r0
    1fde:	4152      	adcs	r2, r2
    1fe0:	4610      	mov	r0, r2
    1fe2:	4770      	bx	lr
    1fe4:	e05d      	b.n	20a2 <STACK_SIZE+0xa2>
    1fe6:	0fca      	lsrs	r2, r1, #31
    1fe8:	d000      	beq.n	1fec <__divsi3+0x10c>
    1fea:	4249      	negs	r1, r1
    1fec:	1003      	asrs	r3, r0, #32
    1fee:	d300      	bcc.n	1ff2 <__divsi3+0x112>
    1ff0:	4240      	negs	r0, r0
    1ff2:	4053      	eors	r3, r2
    1ff4:	2200      	movs	r2, #0
    1ff6:	469c      	mov	ip, r3
    1ff8:	0903      	lsrs	r3, r0, #4
    1ffa:	428b      	cmp	r3, r1
    1ffc:	d32d      	bcc.n	205a <STACK_SIZE+0x5a>
    1ffe:	0a03      	lsrs	r3, r0, #8
    2000:	428b      	cmp	r3, r1
    2002:	d312      	bcc.n	202a <STACK_SIZE+0x2a>
    2004:	22fc      	movs	r2, #252	; 0xfc
    2006:	0189      	lsls	r1, r1, #6
    2008:	ba12      	rev	r2, r2
    200a:	0a03      	lsrs	r3, r0, #8
    200c:	428b      	cmp	r3, r1
    200e:	d30c      	bcc.n	202a <STACK_SIZE+0x2a>
    2010:	0189      	lsls	r1, r1, #6
    2012:	1192      	asrs	r2, r2, #6
    2014:	428b      	cmp	r3, r1
    2016:	d308      	bcc.n	202a <STACK_SIZE+0x2a>
    2018:	0189      	lsls	r1, r1, #6
    201a:	1192      	asrs	r2, r2, #6
    201c:	428b      	cmp	r3, r1
    201e:	d304      	bcc.n	202a <STACK_SIZE+0x2a>
    2020:	0189      	lsls	r1, r1, #6
    2022:	d03a      	beq.n	209a <STACK_SIZE+0x9a>
    2024:	1192      	asrs	r2, r2, #6
    2026:	e000      	b.n	202a <STACK_SIZE+0x2a>
    2028:	0989      	lsrs	r1, r1, #6
    202a:	09c3      	lsrs	r3, r0, #7
    202c:	428b      	cmp	r3, r1
    202e:	d301      	bcc.n	2034 <STACK_SIZE+0x34>
    2030:	01cb      	lsls	r3, r1, #7
    2032:	1ac0      	subs	r0, r0, r3
    2034:	4152      	adcs	r2, r2
    2036:	0983      	lsrs	r3, r0, #6
    2038:	428b      	cmp	r3, r1
    203a:	d301      	bcc.n	2040 <STACK_SIZE+0x40>
    203c:	018b      	lsls	r3, r1, #6
    203e:	1ac0      	subs	r0, r0, r3
    2040:	4152      	adcs	r2, r2
    2042:	0943      	lsrs	r3, r0, #5
    2044:	428b      	cmp	r3, r1
    2046:	d301      	bcc.n	204c <STACK_SIZE+0x4c>
    2048:	014b      	lsls	r3, r1, #5
    204a:	1ac0      	subs	r0, r0, r3
    204c:	4152      	adcs	r2, r2
    204e:	0903      	lsrs	r3, r0, #4
    2050:	428b      	cmp	r3, r1
    2052:	d301      	bcc.n	2058 <STACK_SIZE+0x58>
    2054:	010b      	lsls	r3, r1, #4
    2056:	1ac0      	subs	r0, r0, r3
    2058:	4152      	adcs	r2, r2
    205a:	08c3      	lsrs	r3, r0, #3
    205c:	428b      	cmp	r3, r1
    205e:	d301      	bcc.n	2064 <STACK_SIZE+0x64>
    2060:	00cb      	lsls	r3, r1, #3
    2062:	1ac0      	subs	r0, r0, r3
    2064:	4152      	adcs	r2, r2
    2066:	0883      	lsrs	r3, r0, #2
    2068:	428b      	cmp	r3, r1
    206a:	d301      	bcc.n	2070 <STACK_SIZE+0x70>
    206c:	008b      	lsls	r3, r1, #2
    206e:	1ac0      	subs	r0, r0, r3
    2070:	4152      	adcs	r2, r2
    2072:	d2d9      	bcs.n	2028 <STACK_SIZE+0x28>
    2074:	0843      	lsrs	r3, r0, #1
    2076:	428b      	cmp	r3, r1
    2078:	d301      	bcc.n	207e <STACK_SIZE+0x7e>
    207a:	004b      	lsls	r3, r1, #1
    207c:	1ac0      	subs	r0, r0, r3
    207e:	4152      	adcs	r2, r2
    2080:	1a41      	subs	r1, r0, r1
    2082:	d200      	bcs.n	2086 <STACK_SIZE+0x86>
    2084:	4601      	mov	r1, r0
    2086:	4663      	mov	r3, ip
    2088:	4152      	adcs	r2, r2
    208a:	105b      	asrs	r3, r3, #1
    208c:	4610      	mov	r0, r2
    208e:	d301      	bcc.n	2094 <STACK_SIZE+0x94>
    2090:	4240      	negs	r0, r0
    2092:	2b00      	cmp	r3, #0
    2094:	d500      	bpl.n	2098 <STACK_SIZE+0x98>
    2096:	4249      	negs	r1, r1
    2098:	4770      	bx	lr
    209a:	4663      	mov	r3, ip
    209c:	105b      	asrs	r3, r3, #1
    209e:	d300      	bcc.n	20a2 <STACK_SIZE+0xa2>
    20a0:	4240      	negs	r0, r0
    20a2:	b501      	push	{r0, lr}
    20a4:	2000      	movs	r0, #0
    20a6:	f000 f805 	bl	20b4 <__aeabi_idiv0>
    20aa:	bd02      	pop	{r1, pc}

000020ac <__aeabi_idivmod>:
    20ac:	2900      	cmp	r1, #0
    20ae:	d0f8      	beq.n	20a2 <STACK_SIZE+0xa2>
    20b0:	e716      	b.n	1ee0 <__divsi3>
    20b2:	4770      	bx	lr

000020b4 <__aeabi_idiv0>:
    20b4:	4770      	bx	lr
    20b6:	46c0      	nop			; (mov r8, r8)

000020b8 <__aeabi_lmul>:
    20b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    20ba:	46ce      	mov	lr, r9
    20bc:	4647      	mov	r7, r8
    20be:	0415      	lsls	r5, r2, #16
    20c0:	0c2d      	lsrs	r5, r5, #16
    20c2:	002e      	movs	r6, r5
    20c4:	b580      	push	{r7, lr}
    20c6:	0407      	lsls	r7, r0, #16
    20c8:	0c14      	lsrs	r4, r2, #16
    20ca:	0c3f      	lsrs	r7, r7, #16
    20cc:	4699      	mov	r9, r3
    20ce:	0c03      	lsrs	r3, r0, #16
    20d0:	437e      	muls	r6, r7
    20d2:	435d      	muls	r5, r3
    20d4:	4367      	muls	r7, r4
    20d6:	4363      	muls	r3, r4
    20d8:	197f      	adds	r7, r7, r5
    20da:	0c34      	lsrs	r4, r6, #16
    20dc:	19e4      	adds	r4, r4, r7
    20de:	469c      	mov	ip, r3
    20e0:	42a5      	cmp	r5, r4
    20e2:	d903      	bls.n	20ec <__aeabi_lmul+0x34>
    20e4:	2380      	movs	r3, #128	; 0x80
    20e6:	025b      	lsls	r3, r3, #9
    20e8:	4698      	mov	r8, r3
    20ea:	44c4      	add	ip, r8
    20ec:	464b      	mov	r3, r9
    20ee:	4351      	muls	r1, r2
    20f0:	4343      	muls	r3, r0
    20f2:	0436      	lsls	r6, r6, #16
    20f4:	0c36      	lsrs	r6, r6, #16
    20f6:	0c25      	lsrs	r5, r4, #16
    20f8:	0424      	lsls	r4, r4, #16
    20fa:	4465      	add	r5, ip
    20fc:	19a4      	adds	r4, r4, r6
    20fe:	1859      	adds	r1, r3, r1
    2100:	1949      	adds	r1, r1, r5
    2102:	0020      	movs	r0, r4
    2104:	bc0c      	pop	{r2, r3}
    2106:	4690      	mov	r8, r2
    2108:	4699      	mov	r9, r3
    210a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000210c <__libc_init_array>:
    210c:	b570      	push	{r4, r5, r6, lr}
    210e:	2600      	movs	r6, #0
    2110:	4d0c      	ldr	r5, [pc, #48]	; (2144 <__libc_init_array+0x38>)
    2112:	4c0d      	ldr	r4, [pc, #52]	; (2148 <__libc_init_array+0x3c>)
    2114:	1b64      	subs	r4, r4, r5
    2116:	10a4      	asrs	r4, r4, #2
    2118:	42a6      	cmp	r6, r4
    211a:	d109      	bne.n	2130 <__libc_init_array+0x24>
    211c:	2600      	movs	r6, #0
    211e:	f001 f9b3 	bl	3488 <_init>
    2122:	4d0a      	ldr	r5, [pc, #40]	; (214c <__libc_init_array+0x40>)
    2124:	4c0a      	ldr	r4, [pc, #40]	; (2150 <__libc_init_array+0x44>)
    2126:	1b64      	subs	r4, r4, r5
    2128:	10a4      	asrs	r4, r4, #2
    212a:	42a6      	cmp	r6, r4
    212c:	d105      	bne.n	213a <__libc_init_array+0x2e>
    212e:	bd70      	pop	{r4, r5, r6, pc}
    2130:	00b3      	lsls	r3, r6, #2
    2132:	58eb      	ldr	r3, [r5, r3]
    2134:	4798      	blx	r3
    2136:	3601      	adds	r6, #1
    2138:	e7ee      	b.n	2118 <__libc_init_array+0xc>
    213a:	00b3      	lsls	r3, r6, #2
    213c:	58eb      	ldr	r3, [r5, r3]
    213e:	4798      	blx	r3
    2140:	3601      	adds	r6, #1
    2142:	e7f2      	b.n	212a <__libc_init_array+0x1e>
    2144:	00003494 	.word	0x00003494
    2148:	00003494 	.word	0x00003494
    214c:	00003494 	.word	0x00003494
    2150:	00003498 	.word	0x00003498

00002154 <memcpy>:
    2154:	2300      	movs	r3, #0
    2156:	b510      	push	{r4, lr}
    2158:	429a      	cmp	r2, r3
    215a:	d100      	bne.n	215e <memcpy+0xa>
    215c:	bd10      	pop	{r4, pc}
    215e:	5ccc      	ldrb	r4, [r1, r3]
    2160:	54c4      	strb	r4, [r0, r3]
    2162:	3301      	adds	r3, #1
    2164:	e7f8      	b.n	2158 <memcpy+0x4>

00002166 <memset>:
    2166:	0003      	movs	r3, r0
    2168:	1882      	adds	r2, r0, r2
    216a:	4293      	cmp	r3, r2
    216c:	d100      	bne.n	2170 <memset+0xa>
    216e:	4770      	bx	lr
    2170:	7019      	strb	r1, [r3, #0]
    2172:	3301      	adds	r3, #1
    2174:	e7f9      	b.n	216a <memset+0x4>
	...

00002178 <iprintf>:
    2178:	b40f      	push	{r0, r1, r2, r3}
    217a:	4b0b      	ldr	r3, [pc, #44]	; (21a8 <iprintf+0x30>)
    217c:	b513      	push	{r0, r1, r4, lr}
    217e:	681c      	ldr	r4, [r3, #0]
    2180:	2c00      	cmp	r4, #0
    2182:	d005      	beq.n	2190 <iprintf+0x18>
    2184:	69a3      	ldr	r3, [r4, #24]
    2186:	2b00      	cmp	r3, #0
    2188:	d102      	bne.n	2190 <iprintf+0x18>
    218a:	0020      	movs	r0, r4
    218c:	f000 f9bc 	bl	2508 <__sinit>
    2190:	ab05      	add	r3, sp, #20
    2192:	9a04      	ldr	r2, [sp, #16]
    2194:	68a1      	ldr	r1, [r4, #8]
    2196:	0020      	movs	r0, r4
    2198:	9301      	str	r3, [sp, #4]
    219a:	f000 fb91 	bl	28c0 <_vfiprintf_r>
    219e:	bc16      	pop	{r1, r2, r4}
    21a0:	bc08      	pop	{r3}
    21a2:	b004      	add	sp, #16
    21a4:	4718      	bx	r3
    21a6:	46c0      	nop			; (mov r8, r8)
    21a8:	20000010 	.word	0x20000010

000021ac <setbuf>:
    21ac:	424a      	negs	r2, r1
    21ae:	414a      	adcs	r2, r1
    21b0:	2380      	movs	r3, #128	; 0x80
    21b2:	b510      	push	{r4, lr}
    21b4:	0052      	lsls	r2, r2, #1
    21b6:	00db      	lsls	r3, r3, #3
    21b8:	f000 f802 	bl	21c0 <setvbuf>
    21bc:	bd10      	pop	{r4, pc}
	...

000021c0 <setvbuf>:
    21c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    21c2:	001d      	movs	r5, r3
    21c4:	4b4f      	ldr	r3, [pc, #316]	; (2304 <setvbuf+0x144>)
    21c6:	b085      	sub	sp, #20
    21c8:	681e      	ldr	r6, [r3, #0]
    21ca:	0004      	movs	r4, r0
    21cc:	000f      	movs	r7, r1
    21ce:	9200      	str	r2, [sp, #0]
    21d0:	2e00      	cmp	r6, #0
    21d2:	d005      	beq.n	21e0 <setvbuf+0x20>
    21d4:	69b3      	ldr	r3, [r6, #24]
    21d6:	2b00      	cmp	r3, #0
    21d8:	d102      	bne.n	21e0 <setvbuf+0x20>
    21da:	0030      	movs	r0, r6
    21dc:	f000 f994 	bl	2508 <__sinit>
    21e0:	4b49      	ldr	r3, [pc, #292]	; (2308 <setvbuf+0x148>)
    21e2:	429c      	cmp	r4, r3
    21e4:	d150      	bne.n	2288 <setvbuf+0xc8>
    21e6:	6874      	ldr	r4, [r6, #4]
    21e8:	9b00      	ldr	r3, [sp, #0]
    21ea:	2b02      	cmp	r3, #2
    21ec:	d005      	beq.n	21fa <setvbuf+0x3a>
    21ee:	2b01      	cmp	r3, #1
    21f0:	d900      	bls.n	21f4 <setvbuf+0x34>
    21f2:	e084      	b.n	22fe <setvbuf+0x13e>
    21f4:	2d00      	cmp	r5, #0
    21f6:	da00      	bge.n	21fa <setvbuf+0x3a>
    21f8:	e081      	b.n	22fe <setvbuf+0x13e>
    21fa:	0021      	movs	r1, r4
    21fc:	0030      	movs	r0, r6
    21fe:	f000 f915 	bl	242c <_fflush_r>
    2202:	6b61      	ldr	r1, [r4, #52]	; 0x34
    2204:	2900      	cmp	r1, #0
    2206:	d008      	beq.n	221a <setvbuf+0x5a>
    2208:	0023      	movs	r3, r4
    220a:	3344      	adds	r3, #68	; 0x44
    220c:	4299      	cmp	r1, r3
    220e:	d002      	beq.n	2216 <setvbuf+0x56>
    2210:	0030      	movs	r0, r6
    2212:	f000 fa85 	bl	2720 <_free_r>
    2216:	2300      	movs	r3, #0
    2218:	6363      	str	r3, [r4, #52]	; 0x34
    221a:	2300      	movs	r3, #0
    221c:	61a3      	str	r3, [r4, #24]
    221e:	6063      	str	r3, [r4, #4]
    2220:	89a3      	ldrh	r3, [r4, #12]
    2222:	061b      	lsls	r3, r3, #24
    2224:	d503      	bpl.n	222e <setvbuf+0x6e>
    2226:	6921      	ldr	r1, [r4, #16]
    2228:	0030      	movs	r0, r6
    222a:	f000 fa79 	bl	2720 <_free_r>
    222e:	89a3      	ldrh	r3, [r4, #12]
    2230:	4a36      	ldr	r2, [pc, #216]	; (230c <setvbuf+0x14c>)
    2232:	4013      	ands	r3, r2
    2234:	81a3      	strh	r3, [r4, #12]
    2236:	9b00      	ldr	r3, [sp, #0]
    2238:	2b02      	cmp	r3, #2
    223a:	d05a      	beq.n	22f2 <setvbuf+0x132>
    223c:	ab03      	add	r3, sp, #12
    223e:	aa02      	add	r2, sp, #8
    2240:	0021      	movs	r1, r4
    2242:	0030      	movs	r0, r6
    2244:	f000 f9f6 	bl	2634 <__swhatbuf_r>
    2248:	89a3      	ldrh	r3, [r4, #12]
    224a:	4318      	orrs	r0, r3
    224c:	81a0      	strh	r0, [r4, #12]
    224e:	2d00      	cmp	r5, #0
    2250:	d124      	bne.n	229c <setvbuf+0xdc>
    2252:	9d02      	ldr	r5, [sp, #8]
    2254:	0028      	movs	r0, r5
    2256:	f000 fa59 	bl	270c <malloc>
    225a:	9501      	str	r5, [sp, #4]
    225c:	1e07      	subs	r7, r0, #0
    225e:	d142      	bne.n	22e6 <setvbuf+0x126>
    2260:	9b02      	ldr	r3, [sp, #8]
    2262:	9301      	str	r3, [sp, #4]
    2264:	42ab      	cmp	r3, r5
    2266:	d139      	bne.n	22dc <setvbuf+0x11c>
    2268:	2001      	movs	r0, #1
    226a:	4240      	negs	r0, r0
    226c:	2302      	movs	r3, #2
    226e:	89a2      	ldrh	r2, [r4, #12]
    2270:	4313      	orrs	r3, r2
    2272:	81a3      	strh	r3, [r4, #12]
    2274:	2300      	movs	r3, #0
    2276:	60a3      	str	r3, [r4, #8]
    2278:	0023      	movs	r3, r4
    227a:	3347      	adds	r3, #71	; 0x47
    227c:	6023      	str	r3, [r4, #0]
    227e:	6123      	str	r3, [r4, #16]
    2280:	2301      	movs	r3, #1
    2282:	6163      	str	r3, [r4, #20]
    2284:	b005      	add	sp, #20
    2286:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2288:	4b21      	ldr	r3, [pc, #132]	; (2310 <setvbuf+0x150>)
    228a:	429c      	cmp	r4, r3
    228c:	d101      	bne.n	2292 <setvbuf+0xd2>
    228e:	68b4      	ldr	r4, [r6, #8]
    2290:	e7aa      	b.n	21e8 <setvbuf+0x28>
    2292:	4b20      	ldr	r3, [pc, #128]	; (2314 <setvbuf+0x154>)
    2294:	429c      	cmp	r4, r3
    2296:	d1a7      	bne.n	21e8 <setvbuf+0x28>
    2298:	68f4      	ldr	r4, [r6, #12]
    229a:	e7a5      	b.n	21e8 <setvbuf+0x28>
    229c:	2f00      	cmp	r7, #0
    229e:	d0d9      	beq.n	2254 <setvbuf+0x94>
    22a0:	69b3      	ldr	r3, [r6, #24]
    22a2:	2b00      	cmp	r3, #0
    22a4:	d102      	bne.n	22ac <setvbuf+0xec>
    22a6:	0030      	movs	r0, r6
    22a8:	f000 f92e 	bl	2508 <__sinit>
    22ac:	9b00      	ldr	r3, [sp, #0]
    22ae:	2b01      	cmp	r3, #1
    22b0:	d103      	bne.n	22ba <setvbuf+0xfa>
    22b2:	89a3      	ldrh	r3, [r4, #12]
    22b4:	9a00      	ldr	r2, [sp, #0]
    22b6:	431a      	orrs	r2, r3
    22b8:	81a2      	strh	r2, [r4, #12]
    22ba:	2008      	movs	r0, #8
    22bc:	89a3      	ldrh	r3, [r4, #12]
    22be:	6027      	str	r7, [r4, #0]
    22c0:	6127      	str	r7, [r4, #16]
    22c2:	6165      	str	r5, [r4, #20]
    22c4:	4018      	ands	r0, r3
    22c6:	d018      	beq.n	22fa <setvbuf+0x13a>
    22c8:	2001      	movs	r0, #1
    22ca:	4018      	ands	r0, r3
    22cc:	2300      	movs	r3, #0
    22ce:	4298      	cmp	r0, r3
    22d0:	d011      	beq.n	22f6 <setvbuf+0x136>
    22d2:	426d      	negs	r5, r5
    22d4:	60a3      	str	r3, [r4, #8]
    22d6:	61a5      	str	r5, [r4, #24]
    22d8:	0018      	movs	r0, r3
    22da:	e7d3      	b.n	2284 <setvbuf+0xc4>
    22dc:	9801      	ldr	r0, [sp, #4]
    22de:	f000 fa15 	bl	270c <malloc>
    22e2:	1e07      	subs	r7, r0, #0
    22e4:	d0c0      	beq.n	2268 <setvbuf+0xa8>
    22e6:	2380      	movs	r3, #128	; 0x80
    22e8:	89a2      	ldrh	r2, [r4, #12]
    22ea:	9d01      	ldr	r5, [sp, #4]
    22ec:	4313      	orrs	r3, r2
    22ee:	81a3      	strh	r3, [r4, #12]
    22f0:	e7d6      	b.n	22a0 <setvbuf+0xe0>
    22f2:	2000      	movs	r0, #0
    22f4:	e7ba      	b.n	226c <setvbuf+0xac>
    22f6:	60a5      	str	r5, [r4, #8]
    22f8:	e7c4      	b.n	2284 <setvbuf+0xc4>
    22fa:	60a0      	str	r0, [r4, #8]
    22fc:	e7c2      	b.n	2284 <setvbuf+0xc4>
    22fe:	2001      	movs	r0, #1
    2300:	4240      	negs	r0, r0
    2302:	e7bf      	b.n	2284 <setvbuf+0xc4>
    2304:	20000010 	.word	0x20000010
    2308:	00003414 	.word	0x00003414
    230c:	fffff35c 	.word	0xfffff35c
    2310:	00003434 	.word	0x00003434
    2314:	000033f4 	.word	0x000033f4

00002318 <__sflush_r>:
    2318:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    231a:	898a      	ldrh	r2, [r1, #12]
    231c:	0005      	movs	r5, r0
    231e:	000c      	movs	r4, r1
    2320:	0713      	lsls	r3, r2, #28
    2322:	d460      	bmi.n	23e6 <__sflush_r+0xce>
    2324:	684b      	ldr	r3, [r1, #4]
    2326:	2b00      	cmp	r3, #0
    2328:	dc04      	bgt.n	2334 <__sflush_r+0x1c>
    232a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    232c:	2b00      	cmp	r3, #0
    232e:	dc01      	bgt.n	2334 <__sflush_r+0x1c>
    2330:	2000      	movs	r0, #0
    2332:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2334:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    2336:	2f00      	cmp	r7, #0
    2338:	d0fa      	beq.n	2330 <__sflush_r+0x18>
    233a:	2300      	movs	r3, #0
    233c:	682e      	ldr	r6, [r5, #0]
    233e:	602b      	str	r3, [r5, #0]
    2340:	2380      	movs	r3, #128	; 0x80
    2342:	015b      	lsls	r3, r3, #5
    2344:	401a      	ands	r2, r3
    2346:	d034      	beq.n	23b2 <__sflush_r+0x9a>
    2348:	6d60      	ldr	r0, [r4, #84]	; 0x54
    234a:	89a3      	ldrh	r3, [r4, #12]
    234c:	075b      	lsls	r3, r3, #29
    234e:	d506      	bpl.n	235e <__sflush_r+0x46>
    2350:	6863      	ldr	r3, [r4, #4]
    2352:	1ac0      	subs	r0, r0, r3
    2354:	6b63      	ldr	r3, [r4, #52]	; 0x34
    2356:	2b00      	cmp	r3, #0
    2358:	d001      	beq.n	235e <__sflush_r+0x46>
    235a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    235c:	1ac0      	subs	r0, r0, r3
    235e:	0002      	movs	r2, r0
    2360:	6a21      	ldr	r1, [r4, #32]
    2362:	2300      	movs	r3, #0
    2364:	0028      	movs	r0, r5
    2366:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    2368:	47b8      	blx	r7
    236a:	89a1      	ldrh	r1, [r4, #12]
    236c:	1c43      	adds	r3, r0, #1
    236e:	d106      	bne.n	237e <__sflush_r+0x66>
    2370:	682b      	ldr	r3, [r5, #0]
    2372:	2b1d      	cmp	r3, #29
    2374:	d831      	bhi.n	23da <__sflush_r+0xc2>
    2376:	4a2c      	ldr	r2, [pc, #176]	; (2428 <__sflush_r+0x110>)
    2378:	40da      	lsrs	r2, r3
    237a:	07d3      	lsls	r3, r2, #31
    237c:	d52d      	bpl.n	23da <__sflush_r+0xc2>
    237e:	2300      	movs	r3, #0
    2380:	6063      	str	r3, [r4, #4]
    2382:	6923      	ldr	r3, [r4, #16]
    2384:	6023      	str	r3, [r4, #0]
    2386:	04cb      	lsls	r3, r1, #19
    2388:	d505      	bpl.n	2396 <__sflush_r+0x7e>
    238a:	1c43      	adds	r3, r0, #1
    238c:	d102      	bne.n	2394 <__sflush_r+0x7c>
    238e:	682b      	ldr	r3, [r5, #0]
    2390:	2b00      	cmp	r3, #0
    2392:	d100      	bne.n	2396 <__sflush_r+0x7e>
    2394:	6560      	str	r0, [r4, #84]	; 0x54
    2396:	6b61      	ldr	r1, [r4, #52]	; 0x34
    2398:	602e      	str	r6, [r5, #0]
    239a:	2900      	cmp	r1, #0
    239c:	d0c8      	beq.n	2330 <__sflush_r+0x18>
    239e:	0023      	movs	r3, r4
    23a0:	3344      	adds	r3, #68	; 0x44
    23a2:	4299      	cmp	r1, r3
    23a4:	d002      	beq.n	23ac <__sflush_r+0x94>
    23a6:	0028      	movs	r0, r5
    23a8:	f000 f9ba 	bl	2720 <_free_r>
    23ac:	2000      	movs	r0, #0
    23ae:	6360      	str	r0, [r4, #52]	; 0x34
    23b0:	e7bf      	b.n	2332 <__sflush_r+0x1a>
    23b2:	2301      	movs	r3, #1
    23b4:	6a21      	ldr	r1, [r4, #32]
    23b6:	0028      	movs	r0, r5
    23b8:	47b8      	blx	r7
    23ba:	1c43      	adds	r3, r0, #1
    23bc:	d1c5      	bne.n	234a <__sflush_r+0x32>
    23be:	682b      	ldr	r3, [r5, #0]
    23c0:	2b00      	cmp	r3, #0
    23c2:	d0c2      	beq.n	234a <__sflush_r+0x32>
    23c4:	2b1d      	cmp	r3, #29
    23c6:	d001      	beq.n	23cc <__sflush_r+0xb4>
    23c8:	2b16      	cmp	r3, #22
    23ca:	d101      	bne.n	23d0 <__sflush_r+0xb8>
    23cc:	602e      	str	r6, [r5, #0]
    23ce:	e7af      	b.n	2330 <__sflush_r+0x18>
    23d0:	2340      	movs	r3, #64	; 0x40
    23d2:	89a2      	ldrh	r2, [r4, #12]
    23d4:	4313      	orrs	r3, r2
    23d6:	81a3      	strh	r3, [r4, #12]
    23d8:	e7ab      	b.n	2332 <__sflush_r+0x1a>
    23da:	2340      	movs	r3, #64	; 0x40
    23dc:	430b      	orrs	r3, r1
    23de:	2001      	movs	r0, #1
    23e0:	81a3      	strh	r3, [r4, #12]
    23e2:	4240      	negs	r0, r0
    23e4:	e7a5      	b.n	2332 <__sflush_r+0x1a>
    23e6:	690f      	ldr	r7, [r1, #16]
    23e8:	2f00      	cmp	r7, #0
    23ea:	d0a1      	beq.n	2330 <__sflush_r+0x18>
    23ec:	680b      	ldr	r3, [r1, #0]
    23ee:	600f      	str	r7, [r1, #0]
    23f0:	1bdb      	subs	r3, r3, r7
    23f2:	9301      	str	r3, [sp, #4]
    23f4:	2300      	movs	r3, #0
    23f6:	0792      	lsls	r2, r2, #30
    23f8:	d100      	bne.n	23fc <__sflush_r+0xe4>
    23fa:	694b      	ldr	r3, [r1, #20]
    23fc:	60a3      	str	r3, [r4, #8]
    23fe:	9b01      	ldr	r3, [sp, #4]
    2400:	2b00      	cmp	r3, #0
    2402:	dc00      	bgt.n	2406 <__sflush_r+0xee>
    2404:	e794      	b.n	2330 <__sflush_r+0x18>
    2406:	9b01      	ldr	r3, [sp, #4]
    2408:	003a      	movs	r2, r7
    240a:	6a21      	ldr	r1, [r4, #32]
    240c:	0028      	movs	r0, r5
    240e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    2410:	47b0      	blx	r6
    2412:	2800      	cmp	r0, #0
    2414:	dc03      	bgt.n	241e <__sflush_r+0x106>
    2416:	2340      	movs	r3, #64	; 0x40
    2418:	89a2      	ldrh	r2, [r4, #12]
    241a:	4313      	orrs	r3, r2
    241c:	e7df      	b.n	23de <__sflush_r+0xc6>
    241e:	9b01      	ldr	r3, [sp, #4]
    2420:	183f      	adds	r7, r7, r0
    2422:	1a1b      	subs	r3, r3, r0
    2424:	9301      	str	r3, [sp, #4]
    2426:	e7ea      	b.n	23fe <__sflush_r+0xe6>
    2428:	20400001 	.word	0x20400001

0000242c <_fflush_r>:
    242c:	690b      	ldr	r3, [r1, #16]
    242e:	b570      	push	{r4, r5, r6, lr}
    2430:	0005      	movs	r5, r0
    2432:	000c      	movs	r4, r1
    2434:	2b00      	cmp	r3, #0
    2436:	d101      	bne.n	243c <_fflush_r+0x10>
    2438:	2000      	movs	r0, #0
    243a:	bd70      	pop	{r4, r5, r6, pc}
    243c:	2800      	cmp	r0, #0
    243e:	d004      	beq.n	244a <_fflush_r+0x1e>
    2440:	6983      	ldr	r3, [r0, #24]
    2442:	2b00      	cmp	r3, #0
    2444:	d101      	bne.n	244a <_fflush_r+0x1e>
    2446:	f000 f85f 	bl	2508 <__sinit>
    244a:	4b0b      	ldr	r3, [pc, #44]	; (2478 <_fflush_r+0x4c>)
    244c:	429c      	cmp	r4, r3
    244e:	d109      	bne.n	2464 <_fflush_r+0x38>
    2450:	686c      	ldr	r4, [r5, #4]
    2452:	220c      	movs	r2, #12
    2454:	5ea3      	ldrsh	r3, [r4, r2]
    2456:	2b00      	cmp	r3, #0
    2458:	d0ee      	beq.n	2438 <_fflush_r+0xc>
    245a:	0021      	movs	r1, r4
    245c:	0028      	movs	r0, r5
    245e:	f7ff ff5b 	bl	2318 <__sflush_r>
    2462:	e7ea      	b.n	243a <_fflush_r+0xe>
    2464:	4b05      	ldr	r3, [pc, #20]	; (247c <_fflush_r+0x50>)
    2466:	429c      	cmp	r4, r3
    2468:	d101      	bne.n	246e <_fflush_r+0x42>
    246a:	68ac      	ldr	r4, [r5, #8]
    246c:	e7f1      	b.n	2452 <_fflush_r+0x26>
    246e:	4b04      	ldr	r3, [pc, #16]	; (2480 <_fflush_r+0x54>)
    2470:	429c      	cmp	r4, r3
    2472:	d1ee      	bne.n	2452 <_fflush_r+0x26>
    2474:	68ec      	ldr	r4, [r5, #12]
    2476:	e7ec      	b.n	2452 <_fflush_r+0x26>
    2478:	00003414 	.word	0x00003414
    247c:	00003434 	.word	0x00003434
    2480:	000033f4 	.word	0x000033f4

00002484 <_cleanup_r>:
    2484:	b510      	push	{r4, lr}
    2486:	4902      	ldr	r1, [pc, #8]	; (2490 <_cleanup_r+0xc>)
    2488:	f000 f8b2 	bl	25f0 <_fwalk_reent>
    248c:	bd10      	pop	{r4, pc}
    248e:	46c0      	nop			; (mov r8, r8)
    2490:	0000242d 	.word	0x0000242d

00002494 <std.isra.0>:
    2494:	2300      	movs	r3, #0
    2496:	b510      	push	{r4, lr}
    2498:	0004      	movs	r4, r0
    249a:	6003      	str	r3, [r0, #0]
    249c:	6043      	str	r3, [r0, #4]
    249e:	6083      	str	r3, [r0, #8]
    24a0:	8181      	strh	r1, [r0, #12]
    24a2:	6643      	str	r3, [r0, #100]	; 0x64
    24a4:	81c2      	strh	r2, [r0, #14]
    24a6:	6103      	str	r3, [r0, #16]
    24a8:	6143      	str	r3, [r0, #20]
    24aa:	6183      	str	r3, [r0, #24]
    24ac:	0019      	movs	r1, r3
    24ae:	2208      	movs	r2, #8
    24b0:	305c      	adds	r0, #92	; 0x5c
    24b2:	f7ff fe58 	bl	2166 <memset>
    24b6:	4b05      	ldr	r3, [pc, #20]	; (24cc <std.isra.0+0x38>)
    24b8:	6224      	str	r4, [r4, #32]
    24ba:	6263      	str	r3, [r4, #36]	; 0x24
    24bc:	4b04      	ldr	r3, [pc, #16]	; (24d0 <std.isra.0+0x3c>)
    24be:	62a3      	str	r3, [r4, #40]	; 0x28
    24c0:	4b04      	ldr	r3, [pc, #16]	; (24d4 <std.isra.0+0x40>)
    24c2:	62e3      	str	r3, [r4, #44]	; 0x2c
    24c4:	4b04      	ldr	r3, [pc, #16]	; (24d8 <std.isra.0+0x44>)
    24c6:	6323      	str	r3, [r4, #48]	; 0x30
    24c8:	bd10      	pop	{r4, pc}
    24ca:	46c0      	nop			; (mov r8, r8)
    24cc:	00002e2d 	.word	0x00002e2d
    24d0:	00002e55 	.word	0x00002e55
    24d4:	00002e8d 	.word	0x00002e8d
    24d8:	00002eb9 	.word	0x00002eb9

000024dc <__sfmoreglue>:
    24dc:	b570      	push	{r4, r5, r6, lr}
    24de:	2568      	movs	r5, #104	; 0x68
    24e0:	1e4a      	subs	r2, r1, #1
    24e2:	4355      	muls	r5, r2
    24e4:	000e      	movs	r6, r1
    24e6:	0029      	movs	r1, r5
    24e8:	3174      	adds	r1, #116	; 0x74
    24ea:	f000 f963 	bl	27b4 <_malloc_r>
    24ee:	1e04      	subs	r4, r0, #0
    24f0:	d008      	beq.n	2504 <__sfmoreglue+0x28>
    24f2:	2100      	movs	r1, #0
    24f4:	002a      	movs	r2, r5
    24f6:	6001      	str	r1, [r0, #0]
    24f8:	6046      	str	r6, [r0, #4]
    24fa:	300c      	adds	r0, #12
    24fc:	60a0      	str	r0, [r4, #8]
    24fe:	3268      	adds	r2, #104	; 0x68
    2500:	f7ff fe31 	bl	2166 <memset>
    2504:	0020      	movs	r0, r4
    2506:	bd70      	pop	{r4, r5, r6, pc}

00002508 <__sinit>:
    2508:	6983      	ldr	r3, [r0, #24]
    250a:	b513      	push	{r0, r1, r4, lr}
    250c:	0004      	movs	r4, r0
    250e:	2b00      	cmp	r3, #0
    2510:	d128      	bne.n	2564 <__sinit+0x5c>
    2512:	6483      	str	r3, [r0, #72]	; 0x48
    2514:	64c3      	str	r3, [r0, #76]	; 0x4c
    2516:	6503      	str	r3, [r0, #80]	; 0x50
    2518:	4b13      	ldr	r3, [pc, #76]	; (2568 <__sinit+0x60>)
    251a:	4a14      	ldr	r2, [pc, #80]	; (256c <__sinit+0x64>)
    251c:	681b      	ldr	r3, [r3, #0]
    251e:	6282      	str	r2, [r0, #40]	; 0x28
    2520:	9301      	str	r3, [sp, #4]
    2522:	4298      	cmp	r0, r3
    2524:	d101      	bne.n	252a <__sinit+0x22>
    2526:	2301      	movs	r3, #1
    2528:	6183      	str	r3, [r0, #24]
    252a:	0020      	movs	r0, r4
    252c:	f000 f820 	bl	2570 <__sfp>
    2530:	6060      	str	r0, [r4, #4]
    2532:	0020      	movs	r0, r4
    2534:	f000 f81c 	bl	2570 <__sfp>
    2538:	60a0      	str	r0, [r4, #8]
    253a:	0020      	movs	r0, r4
    253c:	f000 f818 	bl	2570 <__sfp>
    2540:	2200      	movs	r2, #0
    2542:	60e0      	str	r0, [r4, #12]
    2544:	2104      	movs	r1, #4
    2546:	6860      	ldr	r0, [r4, #4]
    2548:	f7ff ffa4 	bl	2494 <std.isra.0>
    254c:	2201      	movs	r2, #1
    254e:	2109      	movs	r1, #9
    2550:	68a0      	ldr	r0, [r4, #8]
    2552:	f7ff ff9f 	bl	2494 <std.isra.0>
    2556:	2202      	movs	r2, #2
    2558:	2112      	movs	r1, #18
    255a:	68e0      	ldr	r0, [r4, #12]
    255c:	f7ff ff9a 	bl	2494 <std.isra.0>
    2560:	2301      	movs	r3, #1
    2562:	61a3      	str	r3, [r4, #24]
    2564:	bd13      	pop	{r0, r1, r4, pc}
    2566:	46c0      	nop			; (mov r8, r8)
    2568:	000033f0 	.word	0x000033f0
    256c:	00002485 	.word	0x00002485

00002570 <__sfp>:
    2570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2572:	4b1e      	ldr	r3, [pc, #120]	; (25ec <__sfp+0x7c>)
    2574:	0007      	movs	r7, r0
    2576:	681e      	ldr	r6, [r3, #0]
    2578:	69b3      	ldr	r3, [r6, #24]
    257a:	2b00      	cmp	r3, #0
    257c:	d102      	bne.n	2584 <__sfp+0x14>
    257e:	0030      	movs	r0, r6
    2580:	f7ff ffc2 	bl	2508 <__sinit>
    2584:	3648      	adds	r6, #72	; 0x48
    2586:	68b4      	ldr	r4, [r6, #8]
    2588:	6873      	ldr	r3, [r6, #4]
    258a:	3b01      	subs	r3, #1
    258c:	d504      	bpl.n	2598 <__sfp+0x28>
    258e:	6833      	ldr	r3, [r6, #0]
    2590:	2b00      	cmp	r3, #0
    2592:	d007      	beq.n	25a4 <__sfp+0x34>
    2594:	6836      	ldr	r6, [r6, #0]
    2596:	e7f6      	b.n	2586 <__sfp+0x16>
    2598:	220c      	movs	r2, #12
    259a:	5ea5      	ldrsh	r5, [r4, r2]
    259c:	2d00      	cmp	r5, #0
    259e:	d00d      	beq.n	25bc <__sfp+0x4c>
    25a0:	3468      	adds	r4, #104	; 0x68
    25a2:	e7f2      	b.n	258a <__sfp+0x1a>
    25a4:	2104      	movs	r1, #4
    25a6:	0038      	movs	r0, r7
    25a8:	f7ff ff98 	bl	24dc <__sfmoreglue>
    25ac:	6030      	str	r0, [r6, #0]
    25ae:	2800      	cmp	r0, #0
    25b0:	d1f0      	bne.n	2594 <__sfp+0x24>
    25b2:	230c      	movs	r3, #12
    25b4:	0004      	movs	r4, r0
    25b6:	603b      	str	r3, [r7, #0]
    25b8:	0020      	movs	r0, r4
    25ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    25bc:	2301      	movs	r3, #1
    25be:	0020      	movs	r0, r4
    25c0:	425b      	negs	r3, r3
    25c2:	81e3      	strh	r3, [r4, #14]
    25c4:	3302      	adds	r3, #2
    25c6:	81a3      	strh	r3, [r4, #12]
    25c8:	6665      	str	r5, [r4, #100]	; 0x64
    25ca:	6025      	str	r5, [r4, #0]
    25cc:	60a5      	str	r5, [r4, #8]
    25ce:	6065      	str	r5, [r4, #4]
    25d0:	6125      	str	r5, [r4, #16]
    25d2:	6165      	str	r5, [r4, #20]
    25d4:	61a5      	str	r5, [r4, #24]
    25d6:	2208      	movs	r2, #8
    25d8:	0029      	movs	r1, r5
    25da:	305c      	adds	r0, #92	; 0x5c
    25dc:	f7ff fdc3 	bl	2166 <memset>
    25e0:	6365      	str	r5, [r4, #52]	; 0x34
    25e2:	63a5      	str	r5, [r4, #56]	; 0x38
    25e4:	64a5      	str	r5, [r4, #72]	; 0x48
    25e6:	64e5      	str	r5, [r4, #76]	; 0x4c
    25e8:	e7e6      	b.n	25b8 <__sfp+0x48>
    25ea:	46c0      	nop			; (mov r8, r8)
    25ec:	000033f0 	.word	0x000033f0

000025f0 <_fwalk_reent>:
    25f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    25f2:	0004      	movs	r4, r0
    25f4:	0007      	movs	r7, r0
    25f6:	2600      	movs	r6, #0
    25f8:	9101      	str	r1, [sp, #4]
    25fa:	3448      	adds	r4, #72	; 0x48
    25fc:	2c00      	cmp	r4, #0
    25fe:	d101      	bne.n	2604 <_fwalk_reent+0x14>
    2600:	0030      	movs	r0, r6
    2602:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2604:	6863      	ldr	r3, [r4, #4]
    2606:	68a5      	ldr	r5, [r4, #8]
    2608:	9300      	str	r3, [sp, #0]
    260a:	9b00      	ldr	r3, [sp, #0]
    260c:	3b01      	subs	r3, #1
    260e:	9300      	str	r3, [sp, #0]
    2610:	d501      	bpl.n	2616 <_fwalk_reent+0x26>
    2612:	6824      	ldr	r4, [r4, #0]
    2614:	e7f2      	b.n	25fc <_fwalk_reent+0xc>
    2616:	89ab      	ldrh	r3, [r5, #12]
    2618:	2b01      	cmp	r3, #1
    261a:	d908      	bls.n	262e <_fwalk_reent+0x3e>
    261c:	220e      	movs	r2, #14
    261e:	5eab      	ldrsh	r3, [r5, r2]
    2620:	3301      	adds	r3, #1
    2622:	d004      	beq.n	262e <_fwalk_reent+0x3e>
    2624:	0029      	movs	r1, r5
    2626:	0038      	movs	r0, r7
    2628:	9b01      	ldr	r3, [sp, #4]
    262a:	4798      	blx	r3
    262c:	4306      	orrs	r6, r0
    262e:	3568      	adds	r5, #104	; 0x68
    2630:	e7eb      	b.n	260a <_fwalk_reent+0x1a>
	...

00002634 <__swhatbuf_r>:
    2634:	b570      	push	{r4, r5, r6, lr}
    2636:	000e      	movs	r6, r1
    2638:	001d      	movs	r5, r3
    263a:	230e      	movs	r3, #14
    263c:	5ec9      	ldrsh	r1, [r1, r3]
    263e:	b090      	sub	sp, #64	; 0x40
    2640:	0014      	movs	r4, r2
    2642:	2900      	cmp	r1, #0
    2644:	da07      	bge.n	2656 <__swhatbuf_r+0x22>
    2646:	2300      	movs	r3, #0
    2648:	602b      	str	r3, [r5, #0]
    264a:	89b3      	ldrh	r3, [r6, #12]
    264c:	061b      	lsls	r3, r3, #24
    264e:	d411      	bmi.n	2674 <__swhatbuf_r+0x40>
    2650:	2380      	movs	r3, #128	; 0x80
    2652:	00db      	lsls	r3, r3, #3
    2654:	e00f      	b.n	2676 <__swhatbuf_r+0x42>
    2656:	aa01      	add	r2, sp, #4
    2658:	f000 fd26 	bl	30a8 <_fstat_r>
    265c:	2800      	cmp	r0, #0
    265e:	dbf2      	blt.n	2646 <__swhatbuf_r+0x12>
    2660:	22f0      	movs	r2, #240	; 0xf0
    2662:	9b02      	ldr	r3, [sp, #8]
    2664:	0212      	lsls	r2, r2, #8
    2666:	4013      	ands	r3, r2
    2668:	4a05      	ldr	r2, [pc, #20]	; (2680 <__swhatbuf_r+0x4c>)
    266a:	189b      	adds	r3, r3, r2
    266c:	425a      	negs	r2, r3
    266e:	4153      	adcs	r3, r2
    2670:	602b      	str	r3, [r5, #0]
    2672:	e7ed      	b.n	2650 <__swhatbuf_r+0x1c>
    2674:	2340      	movs	r3, #64	; 0x40
    2676:	2000      	movs	r0, #0
    2678:	6023      	str	r3, [r4, #0]
    267a:	b010      	add	sp, #64	; 0x40
    267c:	bd70      	pop	{r4, r5, r6, pc}
    267e:	46c0      	nop			; (mov r8, r8)
    2680:	ffffe000 	.word	0xffffe000

00002684 <__smakebuf_r>:
    2684:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2686:	2602      	movs	r6, #2
    2688:	898b      	ldrh	r3, [r1, #12]
    268a:	0005      	movs	r5, r0
    268c:	000c      	movs	r4, r1
    268e:	4233      	tst	r3, r6
    2690:	d006      	beq.n	26a0 <__smakebuf_r+0x1c>
    2692:	0023      	movs	r3, r4
    2694:	3347      	adds	r3, #71	; 0x47
    2696:	6023      	str	r3, [r4, #0]
    2698:	6123      	str	r3, [r4, #16]
    269a:	2301      	movs	r3, #1
    269c:	6163      	str	r3, [r4, #20]
    269e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    26a0:	ab01      	add	r3, sp, #4
    26a2:	466a      	mov	r2, sp
    26a4:	f7ff ffc6 	bl	2634 <__swhatbuf_r>
    26a8:	9900      	ldr	r1, [sp, #0]
    26aa:	0007      	movs	r7, r0
    26ac:	0028      	movs	r0, r5
    26ae:	f000 f881 	bl	27b4 <_malloc_r>
    26b2:	2800      	cmp	r0, #0
    26b4:	d108      	bne.n	26c8 <__smakebuf_r+0x44>
    26b6:	220c      	movs	r2, #12
    26b8:	5ea3      	ldrsh	r3, [r4, r2]
    26ba:	059a      	lsls	r2, r3, #22
    26bc:	d4ef      	bmi.n	269e <__smakebuf_r+0x1a>
    26be:	2203      	movs	r2, #3
    26c0:	4393      	bics	r3, r2
    26c2:	431e      	orrs	r6, r3
    26c4:	81a6      	strh	r6, [r4, #12]
    26c6:	e7e4      	b.n	2692 <__smakebuf_r+0xe>
    26c8:	4b0f      	ldr	r3, [pc, #60]	; (2708 <__smakebuf_r+0x84>)
    26ca:	62ab      	str	r3, [r5, #40]	; 0x28
    26cc:	2380      	movs	r3, #128	; 0x80
    26ce:	89a2      	ldrh	r2, [r4, #12]
    26d0:	6020      	str	r0, [r4, #0]
    26d2:	4313      	orrs	r3, r2
    26d4:	81a3      	strh	r3, [r4, #12]
    26d6:	9b00      	ldr	r3, [sp, #0]
    26d8:	6120      	str	r0, [r4, #16]
    26da:	6163      	str	r3, [r4, #20]
    26dc:	9b01      	ldr	r3, [sp, #4]
    26de:	2b00      	cmp	r3, #0
    26e0:	d00d      	beq.n	26fe <__smakebuf_r+0x7a>
    26e2:	230e      	movs	r3, #14
    26e4:	5ee1      	ldrsh	r1, [r4, r3]
    26e6:	0028      	movs	r0, r5
    26e8:	f000 fcf0 	bl	30cc <_isatty_r>
    26ec:	2800      	cmp	r0, #0
    26ee:	d006      	beq.n	26fe <__smakebuf_r+0x7a>
    26f0:	2203      	movs	r2, #3
    26f2:	89a3      	ldrh	r3, [r4, #12]
    26f4:	4393      	bics	r3, r2
    26f6:	001a      	movs	r2, r3
    26f8:	2301      	movs	r3, #1
    26fa:	4313      	orrs	r3, r2
    26fc:	81a3      	strh	r3, [r4, #12]
    26fe:	89a0      	ldrh	r0, [r4, #12]
    2700:	4338      	orrs	r0, r7
    2702:	81a0      	strh	r0, [r4, #12]
    2704:	e7cb      	b.n	269e <__smakebuf_r+0x1a>
    2706:	46c0      	nop			; (mov r8, r8)
    2708:	00002485 	.word	0x00002485

0000270c <malloc>:
    270c:	b510      	push	{r4, lr}
    270e:	4b03      	ldr	r3, [pc, #12]	; (271c <malloc+0x10>)
    2710:	0001      	movs	r1, r0
    2712:	6818      	ldr	r0, [r3, #0]
    2714:	f000 f84e 	bl	27b4 <_malloc_r>
    2718:	bd10      	pop	{r4, pc}
    271a:	46c0      	nop			; (mov r8, r8)
    271c:	20000010 	.word	0x20000010

00002720 <_free_r>:
    2720:	b570      	push	{r4, r5, r6, lr}
    2722:	0005      	movs	r5, r0
    2724:	2900      	cmp	r1, #0
    2726:	d010      	beq.n	274a <_free_r+0x2a>
    2728:	1f0c      	subs	r4, r1, #4
    272a:	6823      	ldr	r3, [r4, #0]
    272c:	2b00      	cmp	r3, #0
    272e:	da00      	bge.n	2732 <_free_r+0x12>
    2730:	18e4      	adds	r4, r4, r3
    2732:	0028      	movs	r0, r5
    2734:	f000 fcfb 	bl	312e <__malloc_lock>
    2738:	4a1d      	ldr	r2, [pc, #116]	; (27b0 <_free_r+0x90>)
    273a:	6813      	ldr	r3, [r2, #0]
    273c:	2b00      	cmp	r3, #0
    273e:	d105      	bne.n	274c <_free_r+0x2c>
    2740:	6063      	str	r3, [r4, #4]
    2742:	6014      	str	r4, [r2, #0]
    2744:	0028      	movs	r0, r5
    2746:	f000 fcf3 	bl	3130 <__malloc_unlock>
    274a:	bd70      	pop	{r4, r5, r6, pc}
    274c:	42a3      	cmp	r3, r4
    274e:	d909      	bls.n	2764 <_free_r+0x44>
    2750:	6821      	ldr	r1, [r4, #0]
    2752:	1860      	adds	r0, r4, r1
    2754:	4283      	cmp	r3, r0
    2756:	d1f3      	bne.n	2740 <_free_r+0x20>
    2758:	6818      	ldr	r0, [r3, #0]
    275a:	685b      	ldr	r3, [r3, #4]
    275c:	1841      	adds	r1, r0, r1
    275e:	6021      	str	r1, [r4, #0]
    2760:	e7ee      	b.n	2740 <_free_r+0x20>
    2762:	0013      	movs	r3, r2
    2764:	685a      	ldr	r2, [r3, #4]
    2766:	2a00      	cmp	r2, #0
    2768:	d001      	beq.n	276e <_free_r+0x4e>
    276a:	42a2      	cmp	r2, r4
    276c:	d9f9      	bls.n	2762 <_free_r+0x42>
    276e:	6819      	ldr	r1, [r3, #0]
    2770:	1858      	adds	r0, r3, r1
    2772:	42a0      	cmp	r0, r4
    2774:	d10b      	bne.n	278e <_free_r+0x6e>
    2776:	6820      	ldr	r0, [r4, #0]
    2778:	1809      	adds	r1, r1, r0
    277a:	1858      	adds	r0, r3, r1
    277c:	6019      	str	r1, [r3, #0]
    277e:	4282      	cmp	r2, r0
    2780:	d1e0      	bne.n	2744 <_free_r+0x24>
    2782:	6810      	ldr	r0, [r2, #0]
    2784:	6852      	ldr	r2, [r2, #4]
    2786:	1841      	adds	r1, r0, r1
    2788:	6019      	str	r1, [r3, #0]
    278a:	605a      	str	r2, [r3, #4]
    278c:	e7da      	b.n	2744 <_free_r+0x24>
    278e:	42a0      	cmp	r0, r4
    2790:	d902      	bls.n	2798 <_free_r+0x78>
    2792:	230c      	movs	r3, #12
    2794:	602b      	str	r3, [r5, #0]
    2796:	e7d5      	b.n	2744 <_free_r+0x24>
    2798:	6821      	ldr	r1, [r4, #0]
    279a:	1860      	adds	r0, r4, r1
    279c:	4282      	cmp	r2, r0
    279e:	d103      	bne.n	27a8 <_free_r+0x88>
    27a0:	6810      	ldr	r0, [r2, #0]
    27a2:	6852      	ldr	r2, [r2, #4]
    27a4:	1841      	adds	r1, r0, r1
    27a6:	6021      	str	r1, [r4, #0]
    27a8:	6062      	str	r2, [r4, #4]
    27aa:	605c      	str	r4, [r3, #4]
    27ac:	e7ca      	b.n	2744 <_free_r+0x24>
    27ae:	46c0      	nop			; (mov r8, r8)
    27b0:	200000d4 	.word	0x200000d4

000027b4 <_malloc_r>:
    27b4:	2303      	movs	r3, #3
    27b6:	b570      	push	{r4, r5, r6, lr}
    27b8:	1ccd      	adds	r5, r1, #3
    27ba:	439d      	bics	r5, r3
    27bc:	3508      	adds	r5, #8
    27be:	0006      	movs	r6, r0
    27c0:	2d0c      	cmp	r5, #12
    27c2:	d21e      	bcs.n	2802 <_malloc_r+0x4e>
    27c4:	250c      	movs	r5, #12
    27c6:	42a9      	cmp	r1, r5
    27c8:	d81d      	bhi.n	2806 <_malloc_r+0x52>
    27ca:	0030      	movs	r0, r6
    27cc:	f000 fcaf 	bl	312e <__malloc_lock>
    27d0:	4a25      	ldr	r2, [pc, #148]	; (2868 <_malloc_r+0xb4>)
    27d2:	6814      	ldr	r4, [r2, #0]
    27d4:	0021      	movs	r1, r4
    27d6:	2900      	cmp	r1, #0
    27d8:	d119      	bne.n	280e <_malloc_r+0x5a>
    27da:	4c24      	ldr	r4, [pc, #144]	; (286c <_malloc_r+0xb8>)
    27dc:	6823      	ldr	r3, [r4, #0]
    27de:	2b00      	cmp	r3, #0
    27e0:	d103      	bne.n	27ea <_malloc_r+0x36>
    27e2:	0030      	movs	r0, r6
    27e4:	f000 fb10 	bl	2e08 <_sbrk_r>
    27e8:	6020      	str	r0, [r4, #0]
    27ea:	0029      	movs	r1, r5
    27ec:	0030      	movs	r0, r6
    27ee:	f000 fb0b 	bl	2e08 <_sbrk_r>
    27f2:	1c43      	adds	r3, r0, #1
    27f4:	d12c      	bne.n	2850 <_malloc_r+0x9c>
    27f6:	230c      	movs	r3, #12
    27f8:	0030      	movs	r0, r6
    27fa:	6033      	str	r3, [r6, #0]
    27fc:	f000 fc98 	bl	3130 <__malloc_unlock>
    2800:	e003      	b.n	280a <_malloc_r+0x56>
    2802:	2d00      	cmp	r5, #0
    2804:	dadf      	bge.n	27c6 <_malloc_r+0x12>
    2806:	230c      	movs	r3, #12
    2808:	6033      	str	r3, [r6, #0]
    280a:	2000      	movs	r0, #0
    280c:	bd70      	pop	{r4, r5, r6, pc}
    280e:	680b      	ldr	r3, [r1, #0]
    2810:	1b5b      	subs	r3, r3, r5
    2812:	d41a      	bmi.n	284a <_malloc_r+0x96>
    2814:	2b0b      	cmp	r3, #11
    2816:	d903      	bls.n	2820 <_malloc_r+0x6c>
    2818:	600b      	str	r3, [r1, #0]
    281a:	18cc      	adds	r4, r1, r3
    281c:	6025      	str	r5, [r4, #0]
    281e:	e003      	b.n	2828 <_malloc_r+0x74>
    2820:	428c      	cmp	r4, r1
    2822:	d10e      	bne.n	2842 <_malloc_r+0x8e>
    2824:	6863      	ldr	r3, [r4, #4]
    2826:	6013      	str	r3, [r2, #0]
    2828:	0030      	movs	r0, r6
    282a:	f000 fc81 	bl	3130 <__malloc_unlock>
    282e:	0020      	movs	r0, r4
    2830:	2207      	movs	r2, #7
    2832:	300b      	adds	r0, #11
    2834:	1d23      	adds	r3, r4, #4
    2836:	4390      	bics	r0, r2
    2838:	1ac3      	subs	r3, r0, r3
    283a:	d0e7      	beq.n	280c <_malloc_r+0x58>
    283c:	425a      	negs	r2, r3
    283e:	50e2      	str	r2, [r4, r3]
    2840:	e7e4      	b.n	280c <_malloc_r+0x58>
    2842:	684b      	ldr	r3, [r1, #4]
    2844:	6063      	str	r3, [r4, #4]
    2846:	000c      	movs	r4, r1
    2848:	e7ee      	b.n	2828 <_malloc_r+0x74>
    284a:	000c      	movs	r4, r1
    284c:	6849      	ldr	r1, [r1, #4]
    284e:	e7c2      	b.n	27d6 <_malloc_r+0x22>
    2850:	2303      	movs	r3, #3
    2852:	1cc4      	adds	r4, r0, #3
    2854:	439c      	bics	r4, r3
    2856:	42a0      	cmp	r0, r4
    2858:	d0e0      	beq.n	281c <_malloc_r+0x68>
    285a:	1a21      	subs	r1, r4, r0
    285c:	0030      	movs	r0, r6
    285e:	f000 fad3 	bl	2e08 <_sbrk_r>
    2862:	1c43      	adds	r3, r0, #1
    2864:	d1da      	bne.n	281c <_malloc_r+0x68>
    2866:	e7c6      	b.n	27f6 <_malloc_r+0x42>
    2868:	200000d4 	.word	0x200000d4
    286c:	200000d8 	.word	0x200000d8

00002870 <__sfputc_r>:
    2870:	6893      	ldr	r3, [r2, #8]
    2872:	b510      	push	{r4, lr}
    2874:	3b01      	subs	r3, #1
    2876:	6093      	str	r3, [r2, #8]
    2878:	2b00      	cmp	r3, #0
    287a:	da05      	bge.n	2888 <__sfputc_r+0x18>
    287c:	6994      	ldr	r4, [r2, #24]
    287e:	42a3      	cmp	r3, r4
    2880:	db08      	blt.n	2894 <__sfputc_r+0x24>
    2882:	b2cb      	uxtb	r3, r1
    2884:	2b0a      	cmp	r3, #10
    2886:	d005      	beq.n	2894 <__sfputc_r+0x24>
    2888:	6813      	ldr	r3, [r2, #0]
    288a:	1c58      	adds	r0, r3, #1
    288c:	6010      	str	r0, [r2, #0]
    288e:	7019      	strb	r1, [r3, #0]
    2890:	b2c8      	uxtb	r0, r1
    2892:	bd10      	pop	{r4, pc}
    2894:	f000 fb16 	bl	2ec4 <__swbuf_r>
    2898:	e7fb      	b.n	2892 <__sfputc_r+0x22>

0000289a <__sfputs_r>:
    289a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    289c:	0006      	movs	r6, r0
    289e:	000f      	movs	r7, r1
    28a0:	0014      	movs	r4, r2
    28a2:	18d5      	adds	r5, r2, r3
    28a4:	42ac      	cmp	r4, r5
    28a6:	d101      	bne.n	28ac <__sfputs_r+0x12>
    28a8:	2000      	movs	r0, #0
    28aa:	e007      	b.n	28bc <__sfputs_r+0x22>
    28ac:	7821      	ldrb	r1, [r4, #0]
    28ae:	003a      	movs	r2, r7
    28b0:	0030      	movs	r0, r6
    28b2:	f7ff ffdd 	bl	2870 <__sfputc_r>
    28b6:	3401      	adds	r4, #1
    28b8:	1c43      	adds	r3, r0, #1
    28ba:	d1f3      	bne.n	28a4 <__sfputs_r+0xa>
    28bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000028c0 <_vfiprintf_r>:
    28c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    28c2:	b09f      	sub	sp, #124	; 0x7c
    28c4:	0006      	movs	r6, r0
    28c6:	000f      	movs	r7, r1
    28c8:	0014      	movs	r4, r2
    28ca:	9305      	str	r3, [sp, #20]
    28cc:	2800      	cmp	r0, #0
    28ce:	d004      	beq.n	28da <_vfiprintf_r+0x1a>
    28d0:	6983      	ldr	r3, [r0, #24]
    28d2:	2b00      	cmp	r3, #0
    28d4:	d101      	bne.n	28da <_vfiprintf_r+0x1a>
    28d6:	f7ff fe17 	bl	2508 <__sinit>
    28da:	4b7f      	ldr	r3, [pc, #508]	; (2ad8 <_vfiprintf_r+0x218>)
    28dc:	429f      	cmp	r7, r3
    28de:	d15c      	bne.n	299a <_vfiprintf_r+0xda>
    28e0:	6877      	ldr	r7, [r6, #4]
    28e2:	89bb      	ldrh	r3, [r7, #12]
    28e4:	071b      	lsls	r3, r3, #28
    28e6:	d562      	bpl.n	29ae <_vfiprintf_r+0xee>
    28e8:	693b      	ldr	r3, [r7, #16]
    28ea:	2b00      	cmp	r3, #0
    28ec:	d05f      	beq.n	29ae <_vfiprintf_r+0xee>
    28ee:	2300      	movs	r3, #0
    28f0:	ad06      	add	r5, sp, #24
    28f2:	616b      	str	r3, [r5, #20]
    28f4:	3320      	adds	r3, #32
    28f6:	766b      	strb	r3, [r5, #25]
    28f8:	3310      	adds	r3, #16
    28fa:	76ab      	strb	r3, [r5, #26]
    28fc:	9402      	str	r4, [sp, #8]
    28fe:	9c02      	ldr	r4, [sp, #8]
    2900:	7823      	ldrb	r3, [r4, #0]
    2902:	2b00      	cmp	r3, #0
    2904:	d15d      	bne.n	29c2 <_vfiprintf_r+0x102>
    2906:	9b02      	ldr	r3, [sp, #8]
    2908:	1ae3      	subs	r3, r4, r3
    290a:	9304      	str	r3, [sp, #16]
    290c:	d00d      	beq.n	292a <_vfiprintf_r+0x6a>
    290e:	9b04      	ldr	r3, [sp, #16]
    2910:	9a02      	ldr	r2, [sp, #8]
    2912:	0039      	movs	r1, r7
    2914:	0030      	movs	r0, r6
    2916:	f7ff ffc0 	bl	289a <__sfputs_r>
    291a:	1c43      	adds	r3, r0, #1
    291c:	d100      	bne.n	2920 <_vfiprintf_r+0x60>
    291e:	e0cc      	b.n	2aba <_vfiprintf_r+0x1fa>
    2920:	696a      	ldr	r2, [r5, #20]
    2922:	9b04      	ldr	r3, [sp, #16]
    2924:	4694      	mov	ip, r2
    2926:	4463      	add	r3, ip
    2928:	616b      	str	r3, [r5, #20]
    292a:	7823      	ldrb	r3, [r4, #0]
    292c:	2b00      	cmp	r3, #0
    292e:	d100      	bne.n	2932 <_vfiprintf_r+0x72>
    2930:	e0c3      	b.n	2aba <_vfiprintf_r+0x1fa>
    2932:	2201      	movs	r2, #1
    2934:	2300      	movs	r3, #0
    2936:	4252      	negs	r2, r2
    2938:	606a      	str	r2, [r5, #4]
    293a:	a902      	add	r1, sp, #8
    293c:	3254      	adds	r2, #84	; 0x54
    293e:	1852      	adds	r2, r2, r1
    2940:	3401      	adds	r4, #1
    2942:	602b      	str	r3, [r5, #0]
    2944:	60eb      	str	r3, [r5, #12]
    2946:	60ab      	str	r3, [r5, #8]
    2948:	7013      	strb	r3, [r2, #0]
    294a:	65ab      	str	r3, [r5, #88]	; 0x58
    294c:	7821      	ldrb	r1, [r4, #0]
    294e:	2205      	movs	r2, #5
    2950:	4862      	ldr	r0, [pc, #392]	; (2adc <_vfiprintf_r+0x21c>)
    2952:	f000 fbe1 	bl	3118 <memchr>
    2956:	1c63      	adds	r3, r4, #1
    2958:	469c      	mov	ip, r3
    295a:	2800      	cmp	r0, #0
    295c:	d135      	bne.n	29ca <_vfiprintf_r+0x10a>
    295e:	6829      	ldr	r1, [r5, #0]
    2960:	06cb      	lsls	r3, r1, #27
    2962:	d504      	bpl.n	296e <_vfiprintf_r+0xae>
    2964:	2353      	movs	r3, #83	; 0x53
    2966:	aa02      	add	r2, sp, #8
    2968:	3020      	adds	r0, #32
    296a:	189b      	adds	r3, r3, r2
    296c:	7018      	strb	r0, [r3, #0]
    296e:	070b      	lsls	r3, r1, #28
    2970:	d504      	bpl.n	297c <_vfiprintf_r+0xbc>
    2972:	2353      	movs	r3, #83	; 0x53
    2974:	202b      	movs	r0, #43	; 0x2b
    2976:	aa02      	add	r2, sp, #8
    2978:	189b      	adds	r3, r3, r2
    297a:	7018      	strb	r0, [r3, #0]
    297c:	7823      	ldrb	r3, [r4, #0]
    297e:	2b2a      	cmp	r3, #42	; 0x2a
    2980:	d02c      	beq.n	29dc <_vfiprintf_r+0x11c>
    2982:	2000      	movs	r0, #0
    2984:	210a      	movs	r1, #10
    2986:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2988:	7822      	ldrb	r2, [r4, #0]
    298a:	3a30      	subs	r2, #48	; 0x30
    298c:	2a09      	cmp	r2, #9
    298e:	d800      	bhi.n	2992 <_vfiprintf_r+0xd2>
    2990:	e06b      	b.n	2a6a <_vfiprintf_r+0x1aa>
    2992:	2800      	cmp	r0, #0
    2994:	d02a      	beq.n	29ec <_vfiprintf_r+0x12c>
    2996:	9309      	str	r3, [sp, #36]	; 0x24
    2998:	e028      	b.n	29ec <_vfiprintf_r+0x12c>
    299a:	4b51      	ldr	r3, [pc, #324]	; (2ae0 <_vfiprintf_r+0x220>)
    299c:	429f      	cmp	r7, r3
    299e:	d101      	bne.n	29a4 <_vfiprintf_r+0xe4>
    29a0:	68b7      	ldr	r7, [r6, #8]
    29a2:	e79e      	b.n	28e2 <_vfiprintf_r+0x22>
    29a4:	4b4f      	ldr	r3, [pc, #316]	; (2ae4 <_vfiprintf_r+0x224>)
    29a6:	429f      	cmp	r7, r3
    29a8:	d19b      	bne.n	28e2 <_vfiprintf_r+0x22>
    29aa:	68f7      	ldr	r7, [r6, #12]
    29ac:	e799      	b.n	28e2 <_vfiprintf_r+0x22>
    29ae:	0039      	movs	r1, r7
    29b0:	0030      	movs	r0, r6
    29b2:	f000 faf1 	bl	2f98 <__swsetup_r>
    29b6:	2800      	cmp	r0, #0
    29b8:	d099      	beq.n	28ee <_vfiprintf_r+0x2e>
    29ba:	2001      	movs	r0, #1
    29bc:	4240      	negs	r0, r0
    29be:	b01f      	add	sp, #124	; 0x7c
    29c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    29c2:	2b25      	cmp	r3, #37	; 0x25
    29c4:	d09f      	beq.n	2906 <_vfiprintf_r+0x46>
    29c6:	3401      	adds	r4, #1
    29c8:	e79a      	b.n	2900 <_vfiprintf_r+0x40>
    29ca:	4b44      	ldr	r3, [pc, #272]	; (2adc <_vfiprintf_r+0x21c>)
    29cc:	6829      	ldr	r1, [r5, #0]
    29ce:	1ac0      	subs	r0, r0, r3
    29d0:	2301      	movs	r3, #1
    29d2:	4083      	lsls	r3, r0
    29d4:	430b      	orrs	r3, r1
    29d6:	602b      	str	r3, [r5, #0]
    29d8:	4664      	mov	r4, ip
    29da:	e7b7      	b.n	294c <_vfiprintf_r+0x8c>
    29dc:	9b05      	ldr	r3, [sp, #20]
    29de:	1d18      	adds	r0, r3, #4
    29e0:	681b      	ldr	r3, [r3, #0]
    29e2:	9005      	str	r0, [sp, #20]
    29e4:	2b00      	cmp	r3, #0
    29e6:	db3a      	blt.n	2a5e <_vfiprintf_r+0x19e>
    29e8:	9309      	str	r3, [sp, #36]	; 0x24
    29ea:	4664      	mov	r4, ip
    29ec:	7823      	ldrb	r3, [r4, #0]
    29ee:	2b2e      	cmp	r3, #46	; 0x2e
    29f0:	d10b      	bne.n	2a0a <_vfiprintf_r+0x14a>
    29f2:	7863      	ldrb	r3, [r4, #1]
    29f4:	1c62      	adds	r2, r4, #1
    29f6:	2b2a      	cmp	r3, #42	; 0x2a
    29f8:	d13f      	bne.n	2a7a <_vfiprintf_r+0x1ba>
    29fa:	9b05      	ldr	r3, [sp, #20]
    29fc:	3402      	adds	r4, #2
    29fe:	1d1a      	adds	r2, r3, #4
    2a00:	681b      	ldr	r3, [r3, #0]
    2a02:	9205      	str	r2, [sp, #20]
    2a04:	2b00      	cmp	r3, #0
    2a06:	db35      	blt.n	2a74 <_vfiprintf_r+0x1b4>
    2a08:	9307      	str	r3, [sp, #28]
    2a0a:	7821      	ldrb	r1, [r4, #0]
    2a0c:	2203      	movs	r2, #3
    2a0e:	4836      	ldr	r0, [pc, #216]	; (2ae8 <_vfiprintf_r+0x228>)
    2a10:	f000 fb82 	bl	3118 <memchr>
    2a14:	2800      	cmp	r0, #0
    2a16:	d007      	beq.n	2a28 <_vfiprintf_r+0x168>
    2a18:	4b33      	ldr	r3, [pc, #204]	; (2ae8 <_vfiprintf_r+0x228>)
    2a1a:	682a      	ldr	r2, [r5, #0]
    2a1c:	1ac0      	subs	r0, r0, r3
    2a1e:	2340      	movs	r3, #64	; 0x40
    2a20:	4083      	lsls	r3, r0
    2a22:	4313      	orrs	r3, r2
    2a24:	602b      	str	r3, [r5, #0]
    2a26:	3401      	adds	r4, #1
    2a28:	7821      	ldrb	r1, [r4, #0]
    2a2a:	1c63      	adds	r3, r4, #1
    2a2c:	2206      	movs	r2, #6
    2a2e:	482f      	ldr	r0, [pc, #188]	; (2aec <_vfiprintf_r+0x22c>)
    2a30:	9302      	str	r3, [sp, #8]
    2a32:	7629      	strb	r1, [r5, #24]
    2a34:	f000 fb70 	bl	3118 <memchr>
    2a38:	2800      	cmp	r0, #0
    2a3a:	d044      	beq.n	2ac6 <_vfiprintf_r+0x206>
    2a3c:	4b2c      	ldr	r3, [pc, #176]	; (2af0 <_vfiprintf_r+0x230>)
    2a3e:	2b00      	cmp	r3, #0
    2a40:	d12f      	bne.n	2aa2 <_vfiprintf_r+0x1e2>
    2a42:	6829      	ldr	r1, [r5, #0]
    2a44:	9b05      	ldr	r3, [sp, #20]
    2a46:	2207      	movs	r2, #7
    2a48:	05c9      	lsls	r1, r1, #23
    2a4a:	d528      	bpl.n	2a9e <_vfiprintf_r+0x1de>
    2a4c:	189b      	adds	r3, r3, r2
    2a4e:	4393      	bics	r3, r2
    2a50:	3308      	adds	r3, #8
    2a52:	9305      	str	r3, [sp, #20]
    2a54:	696b      	ldr	r3, [r5, #20]
    2a56:	9a03      	ldr	r2, [sp, #12]
    2a58:	189b      	adds	r3, r3, r2
    2a5a:	616b      	str	r3, [r5, #20]
    2a5c:	e74f      	b.n	28fe <_vfiprintf_r+0x3e>
    2a5e:	425b      	negs	r3, r3
    2a60:	60eb      	str	r3, [r5, #12]
    2a62:	2302      	movs	r3, #2
    2a64:	430b      	orrs	r3, r1
    2a66:	602b      	str	r3, [r5, #0]
    2a68:	e7bf      	b.n	29ea <_vfiprintf_r+0x12a>
    2a6a:	434b      	muls	r3, r1
    2a6c:	3401      	adds	r4, #1
    2a6e:	189b      	adds	r3, r3, r2
    2a70:	2001      	movs	r0, #1
    2a72:	e789      	b.n	2988 <_vfiprintf_r+0xc8>
    2a74:	2301      	movs	r3, #1
    2a76:	425b      	negs	r3, r3
    2a78:	e7c6      	b.n	2a08 <_vfiprintf_r+0x148>
    2a7a:	2300      	movs	r3, #0
    2a7c:	0014      	movs	r4, r2
    2a7e:	200a      	movs	r0, #10
    2a80:	001a      	movs	r2, r3
    2a82:	606b      	str	r3, [r5, #4]
    2a84:	7821      	ldrb	r1, [r4, #0]
    2a86:	3930      	subs	r1, #48	; 0x30
    2a88:	2909      	cmp	r1, #9
    2a8a:	d903      	bls.n	2a94 <_vfiprintf_r+0x1d4>
    2a8c:	2b00      	cmp	r3, #0
    2a8e:	d0bc      	beq.n	2a0a <_vfiprintf_r+0x14a>
    2a90:	9207      	str	r2, [sp, #28]
    2a92:	e7ba      	b.n	2a0a <_vfiprintf_r+0x14a>
    2a94:	4342      	muls	r2, r0
    2a96:	3401      	adds	r4, #1
    2a98:	1852      	adds	r2, r2, r1
    2a9a:	2301      	movs	r3, #1
    2a9c:	e7f2      	b.n	2a84 <_vfiprintf_r+0x1c4>
    2a9e:	3307      	adds	r3, #7
    2aa0:	e7d5      	b.n	2a4e <_vfiprintf_r+0x18e>
    2aa2:	ab05      	add	r3, sp, #20
    2aa4:	9300      	str	r3, [sp, #0]
    2aa6:	003a      	movs	r2, r7
    2aa8:	4b12      	ldr	r3, [pc, #72]	; (2af4 <_vfiprintf_r+0x234>)
    2aaa:	0029      	movs	r1, r5
    2aac:	0030      	movs	r0, r6
    2aae:	e000      	b.n	2ab2 <_vfiprintf_r+0x1f2>
    2ab0:	bf00      	nop
    2ab2:	9003      	str	r0, [sp, #12]
    2ab4:	9b03      	ldr	r3, [sp, #12]
    2ab6:	3301      	adds	r3, #1
    2ab8:	d1cc      	bne.n	2a54 <_vfiprintf_r+0x194>
    2aba:	89bb      	ldrh	r3, [r7, #12]
    2abc:	065b      	lsls	r3, r3, #25
    2abe:	d500      	bpl.n	2ac2 <_vfiprintf_r+0x202>
    2ac0:	e77b      	b.n	29ba <_vfiprintf_r+0xfa>
    2ac2:	980b      	ldr	r0, [sp, #44]	; 0x2c
    2ac4:	e77b      	b.n	29be <_vfiprintf_r+0xfe>
    2ac6:	ab05      	add	r3, sp, #20
    2ac8:	9300      	str	r3, [sp, #0]
    2aca:	003a      	movs	r2, r7
    2acc:	4b09      	ldr	r3, [pc, #36]	; (2af4 <_vfiprintf_r+0x234>)
    2ace:	0029      	movs	r1, r5
    2ad0:	0030      	movs	r0, r6
    2ad2:	f000 f87f 	bl	2bd4 <_printf_i>
    2ad6:	e7ec      	b.n	2ab2 <_vfiprintf_r+0x1f2>
    2ad8:	00003414 	.word	0x00003414
    2adc:	00003454 	.word	0x00003454
    2ae0:	00003434 	.word	0x00003434
    2ae4:	000033f4 	.word	0x000033f4
    2ae8:	0000345a 	.word	0x0000345a
    2aec:	0000345e 	.word	0x0000345e
    2af0:	00000000 	.word	0x00000000
    2af4:	0000289b 	.word	0x0000289b

00002af8 <_printf_common>:
    2af8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2afa:	0015      	movs	r5, r2
    2afc:	9301      	str	r3, [sp, #4]
    2afe:	688a      	ldr	r2, [r1, #8]
    2b00:	690b      	ldr	r3, [r1, #16]
    2b02:	9000      	str	r0, [sp, #0]
    2b04:	000c      	movs	r4, r1
    2b06:	4293      	cmp	r3, r2
    2b08:	da00      	bge.n	2b0c <_printf_common+0x14>
    2b0a:	0013      	movs	r3, r2
    2b0c:	0022      	movs	r2, r4
    2b0e:	602b      	str	r3, [r5, #0]
    2b10:	3243      	adds	r2, #67	; 0x43
    2b12:	7812      	ldrb	r2, [r2, #0]
    2b14:	2a00      	cmp	r2, #0
    2b16:	d001      	beq.n	2b1c <_printf_common+0x24>
    2b18:	3301      	adds	r3, #1
    2b1a:	602b      	str	r3, [r5, #0]
    2b1c:	6823      	ldr	r3, [r4, #0]
    2b1e:	069b      	lsls	r3, r3, #26
    2b20:	d502      	bpl.n	2b28 <_printf_common+0x30>
    2b22:	682b      	ldr	r3, [r5, #0]
    2b24:	3302      	adds	r3, #2
    2b26:	602b      	str	r3, [r5, #0]
    2b28:	2706      	movs	r7, #6
    2b2a:	6823      	ldr	r3, [r4, #0]
    2b2c:	401f      	ands	r7, r3
    2b2e:	d027      	beq.n	2b80 <_printf_common+0x88>
    2b30:	0023      	movs	r3, r4
    2b32:	3343      	adds	r3, #67	; 0x43
    2b34:	781b      	ldrb	r3, [r3, #0]
    2b36:	1e5a      	subs	r2, r3, #1
    2b38:	4193      	sbcs	r3, r2
    2b3a:	6822      	ldr	r2, [r4, #0]
    2b3c:	0692      	lsls	r2, r2, #26
    2b3e:	d430      	bmi.n	2ba2 <_printf_common+0xaa>
    2b40:	0022      	movs	r2, r4
    2b42:	9901      	ldr	r1, [sp, #4]
    2b44:	3243      	adds	r2, #67	; 0x43
    2b46:	9800      	ldr	r0, [sp, #0]
    2b48:	9e08      	ldr	r6, [sp, #32]
    2b4a:	47b0      	blx	r6
    2b4c:	1c43      	adds	r3, r0, #1
    2b4e:	d025      	beq.n	2b9c <_printf_common+0xa4>
    2b50:	2306      	movs	r3, #6
    2b52:	6820      	ldr	r0, [r4, #0]
    2b54:	682a      	ldr	r2, [r5, #0]
    2b56:	68e1      	ldr	r1, [r4, #12]
    2b58:	4003      	ands	r3, r0
    2b5a:	2500      	movs	r5, #0
    2b5c:	2b04      	cmp	r3, #4
    2b5e:	d103      	bne.n	2b68 <_printf_common+0x70>
    2b60:	1a8d      	subs	r5, r1, r2
    2b62:	43eb      	mvns	r3, r5
    2b64:	17db      	asrs	r3, r3, #31
    2b66:	401d      	ands	r5, r3
    2b68:	68a3      	ldr	r3, [r4, #8]
    2b6a:	6922      	ldr	r2, [r4, #16]
    2b6c:	4293      	cmp	r3, r2
    2b6e:	dd01      	ble.n	2b74 <_printf_common+0x7c>
    2b70:	1a9b      	subs	r3, r3, r2
    2b72:	18ed      	adds	r5, r5, r3
    2b74:	2700      	movs	r7, #0
    2b76:	42bd      	cmp	r5, r7
    2b78:	d120      	bne.n	2bbc <_printf_common+0xc4>
    2b7a:	2000      	movs	r0, #0
    2b7c:	e010      	b.n	2ba0 <_printf_common+0xa8>
    2b7e:	3701      	adds	r7, #1
    2b80:	68e3      	ldr	r3, [r4, #12]
    2b82:	682a      	ldr	r2, [r5, #0]
    2b84:	1a9b      	subs	r3, r3, r2
    2b86:	429f      	cmp	r7, r3
    2b88:	dad2      	bge.n	2b30 <_printf_common+0x38>
    2b8a:	0022      	movs	r2, r4
    2b8c:	2301      	movs	r3, #1
    2b8e:	3219      	adds	r2, #25
    2b90:	9901      	ldr	r1, [sp, #4]
    2b92:	9800      	ldr	r0, [sp, #0]
    2b94:	9e08      	ldr	r6, [sp, #32]
    2b96:	47b0      	blx	r6
    2b98:	1c43      	adds	r3, r0, #1
    2b9a:	d1f0      	bne.n	2b7e <_printf_common+0x86>
    2b9c:	2001      	movs	r0, #1
    2b9e:	4240      	negs	r0, r0
    2ba0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2ba2:	2030      	movs	r0, #48	; 0x30
    2ba4:	18e1      	adds	r1, r4, r3
    2ba6:	3143      	adds	r1, #67	; 0x43
    2ba8:	7008      	strb	r0, [r1, #0]
    2baa:	0021      	movs	r1, r4
    2bac:	1c5a      	adds	r2, r3, #1
    2bae:	3145      	adds	r1, #69	; 0x45
    2bb0:	7809      	ldrb	r1, [r1, #0]
    2bb2:	18a2      	adds	r2, r4, r2
    2bb4:	3243      	adds	r2, #67	; 0x43
    2bb6:	3302      	adds	r3, #2
    2bb8:	7011      	strb	r1, [r2, #0]
    2bba:	e7c1      	b.n	2b40 <_printf_common+0x48>
    2bbc:	0022      	movs	r2, r4
    2bbe:	2301      	movs	r3, #1
    2bc0:	321a      	adds	r2, #26
    2bc2:	9901      	ldr	r1, [sp, #4]
    2bc4:	9800      	ldr	r0, [sp, #0]
    2bc6:	9e08      	ldr	r6, [sp, #32]
    2bc8:	47b0      	blx	r6
    2bca:	1c43      	adds	r3, r0, #1
    2bcc:	d0e6      	beq.n	2b9c <_printf_common+0xa4>
    2bce:	3701      	adds	r7, #1
    2bd0:	e7d1      	b.n	2b76 <_printf_common+0x7e>
	...

00002bd4 <_printf_i>:
    2bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2bd6:	b08b      	sub	sp, #44	; 0x2c
    2bd8:	9206      	str	r2, [sp, #24]
    2bda:	000a      	movs	r2, r1
    2bdc:	3243      	adds	r2, #67	; 0x43
    2bde:	9307      	str	r3, [sp, #28]
    2be0:	9005      	str	r0, [sp, #20]
    2be2:	9204      	str	r2, [sp, #16]
    2be4:	7e0a      	ldrb	r2, [r1, #24]
    2be6:	000c      	movs	r4, r1
    2be8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    2bea:	2a6e      	cmp	r2, #110	; 0x6e
    2bec:	d100      	bne.n	2bf0 <_printf_i+0x1c>
    2bee:	e08f      	b.n	2d10 <_printf_i+0x13c>
    2bf0:	d817      	bhi.n	2c22 <_printf_i+0x4e>
    2bf2:	2a63      	cmp	r2, #99	; 0x63
    2bf4:	d02c      	beq.n	2c50 <_printf_i+0x7c>
    2bf6:	d808      	bhi.n	2c0a <_printf_i+0x36>
    2bf8:	2a00      	cmp	r2, #0
    2bfa:	d100      	bne.n	2bfe <_printf_i+0x2a>
    2bfc:	e099      	b.n	2d32 <_printf_i+0x15e>
    2bfe:	2a58      	cmp	r2, #88	; 0x58
    2c00:	d054      	beq.n	2cac <_printf_i+0xd8>
    2c02:	0026      	movs	r6, r4
    2c04:	3642      	adds	r6, #66	; 0x42
    2c06:	7032      	strb	r2, [r6, #0]
    2c08:	e029      	b.n	2c5e <_printf_i+0x8a>
    2c0a:	2a64      	cmp	r2, #100	; 0x64
    2c0c:	d001      	beq.n	2c12 <_printf_i+0x3e>
    2c0e:	2a69      	cmp	r2, #105	; 0x69
    2c10:	d1f7      	bne.n	2c02 <_printf_i+0x2e>
    2c12:	6821      	ldr	r1, [r4, #0]
    2c14:	681a      	ldr	r2, [r3, #0]
    2c16:	0608      	lsls	r0, r1, #24
    2c18:	d523      	bpl.n	2c62 <_printf_i+0x8e>
    2c1a:	1d11      	adds	r1, r2, #4
    2c1c:	6019      	str	r1, [r3, #0]
    2c1e:	6815      	ldr	r5, [r2, #0]
    2c20:	e025      	b.n	2c6e <_printf_i+0x9a>
    2c22:	2a73      	cmp	r2, #115	; 0x73
    2c24:	d100      	bne.n	2c28 <_printf_i+0x54>
    2c26:	e088      	b.n	2d3a <_printf_i+0x166>
    2c28:	d808      	bhi.n	2c3c <_printf_i+0x68>
    2c2a:	2a6f      	cmp	r2, #111	; 0x6f
    2c2c:	d029      	beq.n	2c82 <_printf_i+0xae>
    2c2e:	2a70      	cmp	r2, #112	; 0x70
    2c30:	d1e7      	bne.n	2c02 <_printf_i+0x2e>
    2c32:	2220      	movs	r2, #32
    2c34:	6809      	ldr	r1, [r1, #0]
    2c36:	430a      	orrs	r2, r1
    2c38:	6022      	str	r2, [r4, #0]
    2c3a:	e003      	b.n	2c44 <_printf_i+0x70>
    2c3c:	2a75      	cmp	r2, #117	; 0x75
    2c3e:	d020      	beq.n	2c82 <_printf_i+0xae>
    2c40:	2a78      	cmp	r2, #120	; 0x78
    2c42:	d1de      	bne.n	2c02 <_printf_i+0x2e>
    2c44:	0022      	movs	r2, r4
    2c46:	2178      	movs	r1, #120	; 0x78
    2c48:	3245      	adds	r2, #69	; 0x45
    2c4a:	7011      	strb	r1, [r2, #0]
    2c4c:	4a6c      	ldr	r2, [pc, #432]	; (2e00 <_printf_i+0x22c>)
    2c4e:	e030      	b.n	2cb2 <_printf_i+0xde>
    2c50:	000e      	movs	r6, r1
    2c52:	681a      	ldr	r2, [r3, #0]
    2c54:	3642      	adds	r6, #66	; 0x42
    2c56:	1d11      	adds	r1, r2, #4
    2c58:	6019      	str	r1, [r3, #0]
    2c5a:	6813      	ldr	r3, [r2, #0]
    2c5c:	7033      	strb	r3, [r6, #0]
    2c5e:	2301      	movs	r3, #1
    2c60:	e079      	b.n	2d56 <_printf_i+0x182>
    2c62:	0649      	lsls	r1, r1, #25
    2c64:	d5d9      	bpl.n	2c1a <_printf_i+0x46>
    2c66:	1d11      	adds	r1, r2, #4
    2c68:	6019      	str	r1, [r3, #0]
    2c6a:	2300      	movs	r3, #0
    2c6c:	5ed5      	ldrsh	r5, [r2, r3]
    2c6e:	2d00      	cmp	r5, #0
    2c70:	da03      	bge.n	2c7a <_printf_i+0xa6>
    2c72:	232d      	movs	r3, #45	; 0x2d
    2c74:	9a04      	ldr	r2, [sp, #16]
    2c76:	426d      	negs	r5, r5
    2c78:	7013      	strb	r3, [r2, #0]
    2c7a:	4b62      	ldr	r3, [pc, #392]	; (2e04 <_printf_i+0x230>)
    2c7c:	270a      	movs	r7, #10
    2c7e:	9303      	str	r3, [sp, #12]
    2c80:	e02f      	b.n	2ce2 <_printf_i+0x10e>
    2c82:	6820      	ldr	r0, [r4, #0]
    2c84:	6819      	ldr	r1, [r3, #0]
    2c86:	0605      	lsls	r5, r0, #24
    2c88:	d503      	bpl.n	2c92 <_printf_i+0xbe>
    2c8a:	1d08      	adds	r0, r1, #4
    2c8c:	6018      	str	r0, [r3, #0]
    2c8e:	680d      	ldr	r5, [r1, #0]
    2c90:	e005      	b.n	2c9e <_printf_i+0xca>
    2c92:	0640      	lsls	r0, r0, #25
    2c94:	d5f9      	bpl.n	2c8a <_printf_i+0xb6>
    2c96:	680d      	ldr	r5, [r1, #0]
    2c98:	1d08      	adds	r0, r1, #4
    2c9a:	6018      	str	r0, [r3, #0]
    2c9c:	b2ad      	uxth	r5, r5
    2c9e:	4b59      	ldr	r3, [pc, #356]	; (2e04 <_printf_i+0x230>)
    2ca0:	2708      	movs	r7, #8
    2ca2:	9303      	str	r3, [sp, #12]
    2ca4:	2a6f      	cmp	r2, #111	; 0x6f
    2ca6:	d018      	beq.n	2cda <_printf_i+0x106>
    2ca8:	270a      	movs	r7, #10
    2caa:	e016      	b.n	2cda <_printf_i+0x106>
    2cac:	3145      	adds	r1, #69	; 0x45
    2cae:	700a      	strb	r2, [r1, #0]
    2cb0:	4a54      	ldr	r2, [pc, #336]	; (2e04 <_printf_i+0x230>)
    2cb2:	9203      	str	r2, [sp, #12]
    2cb4:	681a      	ldr	r2, [r3, #0]
    2cb6:	6821      	ldr	r1, [r4, #0]
    2cb8:	1d10      	adds	r0, r2, #4
    2cba:	6018      	str	r0, [r3, #0]
    2cbc:	6815      	ldr	r5, [r2, #0]
    2cbe:	0608      	lsls	r0, r1, #24
    2cc0:	d522      	bpl.n	2d08 <_printf_i+0x134>
    2cc2:	07cb      	lsls	r3, r1, #31
    2cc4:	d502      	bpl.n	2ccc <_printf_i+0xf8>
    2cc6:	2320      	movs	r3, #32
    2cc8:	4319      	orrs	r1, r3
    2cca:	6021      	str	r1, [r4, #0]
    2ccc:	2710      	movs	r7, #16
    2cce:	2d00      	cmp	r5, #0
    2cd0:	d103      	bne.n	2cda <_printf_i+0x106>
    2cd2:	2320      	movs	r3, #32
    2cd4:	6822      	ldr	r2, [r4, #0]
    2cd6:	439a      	bics	r2, r3
    2cd8:	6022      	str	r2, [r4, #0]
    2cda:	0023      	movs	r3, r4
    2cdc:	2200      	movs	r2, #0
    2cde:	3343      	adds	r3, #67	; 0x43
    2ce0:	701a      	strb	r2, [r3, #0]
    2ce2:	6863      	ldr	r3, [r4, #4]
    2ce4:	60a3      	str	r3, [r4, #8]
    2ce6:	2b00      	cmp	r3, #0
    2ce8:	db5c      	blt.n	2da4 <_printf_i+0x1d0>
    2cea:	2204      	movs	r2, #4
    2cec:	6821      	ldr	r1, [r4, #0]
    2cee:	4391      	bics	r1, r2
    2cf0:	6021      	str	r1, [r4, #0]
    2cf2:	2d00      	cmp	r5, #0
    2cf4:	d158      	bne.n	2da8 <_printf_i+0x1d4>
    2cf6:	9e04      	ldr	r6, [sp, #16]
    2cf8:	2b00      	cmp	r3, #0
    2cfa:	d064      	beq.n	2dc6 <_printf_i+0x1f2>
    2cfc:	0026      	movs	r6, r4
    2cfe:	9b03      	ldr	r3, [sp, #12]
    2d00:	3642      	adds	r6, #66	; 0x42
    2d02:	781b      	ldrb	r3, [r3, #0]
    2d04:	7033      	strb	r3, [r6, #0]
    2d06:	e05e      	b.n	2dc6 <_printf_i+0x1f2>
    2d08:	0648      	lsls	r0, r1, #25
    2d0a:	d5da      	bpl.n	2cc2 <_printf_i+0xee>
    2d0c:	b2ad      	uxth	r5, r5
    2d0e:	e7d8      	b.n	2cc2 <_printf_i+0xee>
    2d10:	6809      	ldr	r1, [r1, #0]
    2d12:	681a      	ldr	r2, [r3, #0]
    2d14:	0608      	lsls	r0, r1, #24
    2d16:	d505      	bpl.n	2d24 <_printf_i+0x150>
    2d18:	1d11      	adds	r1, r2, #4
    2d1a:	6019      	str	r1, [r3, #0]
    2d1c:	6813      	ldr	r3, [r2, #0]
    2d1e:	6962      	ldr	r2, [r4, #20]
    2d20:	601a      	str	r2, [r3, #0]
    2d22:	e006      	b.n	2d32 <_printf_i+0x15e>
    2d24:	0649      	lsls	r1, r1, #25
    2d26:	d5f7      	bpl.n	2d18 <_printf_i+0x144>
    2d28:	1d11      	adds	r1, r2, #4
    2d2a:	6019      	str	r1, [r3, #0]
    2d2c:	6813      	ldr	r3, [r2, #0]
    2d2e:	8aa2      	ldrh	r2, [r4, #20]
    2d30:	801a      	strh	r2, [r3, #0]
    2d32:	2300      	movs	r3, #0
    2d34:	9e04      	ldr	r6, [sp, #16]
    2d36:	6123      	str	r3, [r4, #16]
    2d38:	e054      	b.n	2de4 <_printf_i+0x210>
    2d3a:	681a      	ldr	r2, [r3, #0]
    2d3c:	1d11      	adds	r1, r2, #4
    2d3e:	6019      	str	r1, [r3, #0]
    2d40:	6816      	ldr	r6, [r2, #0]
    2d42:	2100      	movs	r1, #0
    2d44:	6862      	ldr	r2, [r4, #4]
    2d46:	0030      	movs	r0, r6
    2d48:	f000 f9e6 	bl	3118 <memchr>
    2d4c:	2800      	cmp	r0, #0
    2d4e:	d001      	beq.n	2d54 <_printf_i+0x180>
    2d50:	1b80      	subs	r0, r0, r6
    2d52:	6060      	str	r0, [r4, #4]
    2d54:	6863      	ldr	r3, [r4, #4]
    2d56:	6123      	str	r3, [r4, #16]
    2d58:	2300      	movs	r3, #0
    2d5a:	9a04      	ldr	r2, [sp, #16]
    2d5c:	7013      	strb	r3, [r2, #0]
    2d5e:	e041      	b.n	2de4 <_printf_i+0x210>
    2d60:	6923      	ldr	r3, [r4, #16]
    2d62:	0032      	movs	r2, r6
    2d64:	9906      	ldr	r1, [sp, #24]
    2d66:	9805      	ldr	r0, [sp, #20]
    2d68:	9d07      	ldr	r5, [sp, #28]
    2d6a:	47a8      	blx	r5
    2d6c:	1c43      	adds	r3, r0, #1
    2d6e:	d043      	beq.n	2df8 <_printf_i+0x224>
    2d70:	6823      	ldr	r3, [r4, #0]
    2d72:	2500      	movs	r5, #0
    2d74:	079b      	lsls	r3, r3, #30
    2d76:	d40f      	bmi.n	2d98 <_printf_i+0x1c4>
    2d78:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2d7a:	68e0      	ldr	r0, [r4, #12]
    2d7c:	4298      	cmp	r0, r3
    2d7e:	da3d      	bge.n	2dfc <_printf_i+0x228>
    2d80:	0018      	movs	r0, r3
    2d82:	e03b      	b.n	2dfc <_printf_i+0x228>
    2d84:	0022      	movs	r2, r4
    2d86:	2301      	movs	r3, #1
    2d88:	3219      	adds	r2, #25
    2d8a:	9906      	ldr	r1, [sp, #24]
    2d8c:	9805      	ldr	r0, [sp, #20]
    2d8e:	9e07      	ldr	r6, [sp, #28]
    2d90:	47b0      	blx	r6
    2d92:	1c43      	adds	r3, r0, #1
    2d94:	d030      	beq.n	2df8 <_printf_i+0x224>
    2d96:	3501      	adds	r5, #1
    2d98:	68e3      	ldr	r3, [r4, #12]
    2d9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    2d9c:	1a9b      	subs	r3, r3, r2
    2d9e:	429d      	cmp	r5, r3
    2da0:	dbf0      	blt.n	2d84 <_printf_i+0x1b0>
    2da2:	e7e9      	b.n	2d78 <_printf_i+0x1a4>
    2da4:	2d00      	cmp	r5, #0
    2da6:	d0a9      	beq.n	2cfc <_printf_i+0x128>
    2da8:	9e04      	ldr	r6, [sp, #16]
    2daa:	0028      	movs	r0, r5
    2dac:	0039      	movs	r1, r7
    2dae:	f7ff f893 	bl	1ed8 <__aeabi_uidivmod>
    2db2:	9b03      	ldr	r3, [sp, #12]
    2db4:	3e01      	subs	r6, #1
    2db6:	5c5b      	ldrb	r3, [r3, r1]
    2db8:	0028      	movs	r0, r5
    2dba:	7033      	strb	r3, [r6, #0]
    2dbc:	0039      	movs	r1, r7
    2dbe:	f7ff f805 	bl	1dcc <__udivsi3>
    2dc2:	1e05      	subs	r5, r0, #0
    2dc4:	d1f1      	bne.n	2daa <_printf_i+0x1d6>
    2dc6:	2f08      	cmp	r7, #8
    2dc8:	d109      	bne.n	2dde <_printf_i+0x20a>
    2dca:	6823      	ldr	r3, [r4, #0]
    2dcc:	07db      	lsls	r3, r3, #31
    2dce:	d506      	bpl.n	2dde <_printf_i+0x20a>
    2dd0:	6863      	ldr	r3, [r4, #4]
    2dd2:	6922      	ldr	r2, [r4, #16]
    2dd4:	4293      	cmp	r3, r2
    2dd6:	dc02      	bgt.n	2dde <_printf_i+0x20a>
    2dd8:	2330      	movs	r3, #48	; 0x30
    2dda:	3e01      	subs	r6, #1
    2ddc:	7033      	strb	r3, [r6, #0]
    2dde:	9b04      	ldr	r3, [sp, #16]
    2de0:	1b9b      	subs	r3, r3, r6
    2de2:	6123      	str	r3, [r4, #16]
    2de4:	9b07      	ldr	r3, [sp, #28]
    2de6:	aa09      	add	r2, sp, #36	; 0x24
    2de8:	9300      	str	r3, [sp, #0]
    2dea:	0021      	movs	r1, r4
    2dec:	9b06      	ldr	r3, [sp, #24]
    2dee:	9805      	ldr	r0, [sp, #20]
    2df0:	f7ff fe82 	bl	2af8 <_printf_common>
    2df4:	1c43      	adds	r3, r0, #1
    2df6:	d1b3      	bne.n	2d60 <_printf_i+0x18c>
    2df8:	2001      	movs	r0, #1
    2dfa:	4240      	negs	r0, r0
    2dfc:	b00b      	add	sp, #44	; 0x2c
    2dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2e00:	00003476 	.word	0x00003476
    2e04:	00003465 	.word	0x00003465

00002e08 <_sbrk_r>:
    2e08:	2300      	movs	r3, #0
    2e0a:	b570      	push	{r4, r5, r6, lr}
    2e0c:	4c06      	ldr	r4, [pc, #24]	; (2e28 <_sbrk_r+0x20>)
    2e0e:	0005      	movs	r5, r0
    2e10:	0008      	movs	r0, r1
    2e12:	6023      	str	r3, [r4, #0]
    2e14:	f7fe fb78 	bl	1508 <_sbrk>
    2e18:	1c43      	adds	r3, r0, #1
    2e1a:	d103      	bne.n	2e24 <_sbrk_r+0x1c>
    2e1c:	6823      	ldr	r3, [r4, #0]
    2e1e:	2b00      	cmp	r3, #0
    2e20:	d000      	beq.n	2e24 <_sbrk_r+0x1c>
    2e22:	602b      	str	r3, [r5, #0]
    2e24:	bd70      	pop	{r4, r5, r6, pc}
    2e26:	46c0      	nop			; (mov r8, r8)
    2e28:	20000174 	.word	0x20000174

00002e2c <__sread>:
    2e2c:	b570      	push	{r4, r5, r6, lr}
    2e2e:	000c      	movs	r4, r1
    2e30:	250e      	movs	r5, #14
    2e32:	5f49      	ldrsh	r1, [r1, r5]
    2e34:	f000 f97e 	bl	3134 <_read_r>
    2e38:	2800      	cmp	r0, #0
    2e3a:	db03      	blt.n	2e44 <__sread+0x18>
    2e3c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    2e3e:	181b      	adds	r3, r3, r0
    2e40:	6563      	str	r3, [r4, #84]	; 0x54
    2e42:	bd70      	pop	{r4, r5, r6, pc}
    2e44:	89a3      	ldrh	r3, [r4, #12]
    2e46:	4a02      	ldr	r2, [pc, #8]	; (2e50 <__sread+0x24>)
    2e48:	4013      	ands	r3, r2
    2e4a:	81a3      	strh	r3, [r4, #12]
    2e4c:	e7f9      	b.n	2e42 <__sread+0x16>
    2e4e:	46c0      	nop			; (mov r8, r8)
    2e50:	ffffefff 	.word	0xffffefff

00002e54 <__swrite>:
    2e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2e56:	001f      	movs	r7, r3
    2e58:	898b      	ldrh	r3, [r1, #12]
    2e5a:	0005      	movs	r5, r0
    2e5c:	000c      	movs	r4, r1
    2e5e:	0016      	movs	r6, r2
    2e60:	05db      	lsls	r3, r3, #23
    2e62:	d505      	bpl.n	2e70 <__swrite+0x1c>
    2e64:	230e      	movs	r3, #14
    2e66:	5ec9      	ldrsh	r1, [r1, r3]
    2e68:	2200      	movs	r2, #0
    2e6a:	2302      	movs	r3, #2
    2e6c:	f000 f940 	bl	30f0 <_lseek_r>
    2e70:	89a3      	ldrh	r3, [r4, #12]
    2e72:	4a05      	ldr	r2, [pc, #20]	; (2e88 <__swrite+0x34>)
    2e74:	0028      	movs	r0, r5
    2e76:	4013      	ands	r3, r2
    2e78:	81a3      	strh	r3, [r4, #12]
    2e7a:	0032      	movs	r2, r6
    2e7c:	230e      	movs	r3, #14
    2e7e:	5ee1      	ldrsh	r1, [r4, r3]
    2e80:	003b      	movs	r3, r7
    2e82:	f000 f875 	bl	2f70 <_write_r>
    2e86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2e88:	ffffefff 	.word	0xffffefff

00002e8c <__sseek>:
    2e8c:	b570      	push	{r4, r5, r6, lr}
    2e8e:	000c      	movs	r4, r1
    2e90:	250e      	movs	r5, #14
    2e92:	5f49      	ldrsh	r1, [r1, r5]
    2e94:	f000 f92c 	bl	30f0 <_lseek_r>
    2e98:	89a3      	ldrh	r3, [r4, #12]
    2e9a:	1c42      	adds	r2, r0, #1
    2e9c:	d103      	bne.n	2ea6 <__sseek+0x1a>
    2e9e:	4a05      	ldr	r2, [pc, #20]	; (2eb4 <__sseek+0x28>)
    2ea0:	4013      	ands	r3, r2
    2ea2:	81a3      	strh	r3, [r4, #12]
    2ea4:	bd70      	pop	{r4, r5, r6, pc}
    2ea6:	2280      	movs	r2, #128	; 0x80
    2ea8:	0152      	lsls	r2, r2, #5
    2eaa:	4313      	orrs	r3, r2
    2eac:	81a3      	strh	r3, [r4, #12]
    2eae:	6560      	str	r0, [r4, #84]	; 0x54
    2eb0:	e7f8      	b.n	2ea4 <__sseek+0x18>
    2eb2:	46c0      	nop			; (mov r8, r8)
    2eb4:	ffffefff 	.word	0xffffefff

00002eb8 <__sclose>:
    2eb8:	b510      	push	{r4, lr}
    2eba:	230e      	movs	r3, #14
    2ebc:	5ec9      	ldrsh	r1, [r1, r3]
    2ebe:	f000 f8e1 	bl	3084 <_close_r>
    2ec2:	bd10      	pop	{r4, pc}

00002ec4 <__swbuf_r>:
    2ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2ec6:	0005      	movs	r5, r0
    2ec8:	000e      	movs	r6, r1
    2eca:	0014      	movs	r4, r2
    2ecc:	2800      	cmp	r0, #0
    2ece:	d004      	beq.n	2eda <__swbuf_r+0x16>
    2ed0:	6983      	ldr	r3, [r0, #24]
    2ed2:	2b00      	cmp	r3, #0
    2ed4:	d101      	bne.n	2eda <__swbuf_r+0x16>
    2ed6:	f7ff fb17 	bl	2508 <__sinit>
    2eda:	4b22      	ldr	r3, [pc, #136]	; (2f64 <__swbuf_r+0xa0>)
    2edc:	429c      	cmp	r4, r3
    2ede:	d12d      	bne.n	2f3c <__swbuf_r+0x78>
    2ee0:	686c      	ldr	r4, [r5, #4]
    2ee2:	69a3      	ldr	r3, [r4, #24]
    2ee4:	60a3      	str	r3, [r4, #8]
    2ee6:	89a3      	ldrh	r3, [r4, #12]
    2ee8:	071b      	lsls	r3, r3, #28
    2eea:	d531      	bpl.n	2f50 <__swbuf_r+0x8c>
    2eec:	6923      	ldr	r3, [r4, #16]
    2eee:	2b00      	cmp	r3, #0
    2ef0:	d02e      	beq.n	2f50 <__swbuf_r+0x8c>
    2ef2:	6823      	ldr	r3, [r4, #0]
    2ef4:	6922      	ldr	r2, [r4, #16]
    2ef6:	b2f7      	uxtb	r7, r6
    2ef8:	1a98      	subs	r0, r3, r2
    2efa:	6963      	ldr	r3, [r4, #20]
    2efc:	b2f6      	uxtb	r6, r6
    2efe:	4298      	cmp	r0, r3
    2f00:	db05      	blt.n	2f0e <__swbuf_r+0x4a>
    2f02:	0021      	movs	r1, r4
    2f04:	0028      	movs	r0, r5
    2f06:	f7ff fa91 	bl	242c <_fflush_r>
    2f0a:	2800      	cmp	r0, #0
    2f0c:	d126      	bne.n	2f5c <__swbuf_r+0x98>
    2f0e:	68a3      	ldr	r3, [r4, #8]
    2f10:	3001      	adds	r0, #1
    2f12:	3b01      	subs	r3, #1
    2f14:	60a3      	str	r3, [r4, #8]
    2f16:	6823      	ldr	r3, [r4, #0]
    2f18:	1c5a      	adds	r2, r3, #1
    2f1a:	6022      	str	r2, [r4, #0]
    2f1c:	701f      	strb	r7, [r3, #0]
    2f1e:	6963      	ldr	r3, [r4, #20]
    2f20:	4298      	cmp	r0, r3
    2f22:	d004      	beq.n	2f2e <__swbuf_r+0x6a>
    2f24:	89a3      	ldrh	r3, [r4, #12]
    2f26:	07db      	lsls	r3, r3, #31
    2f28:	d51a      	bpl.n	2f60 <__swbuf_r+0x9c>
    2f2a:	2e0a      	cmp	r6, #10
    2f2c:	d118      	bne.n	2f60 <__swbuf_r+0x9c>
    2f2e:	0021      	movs	r1, r4
    2f30:	0028      	movs	r0, r5
    2f32:	f7ff fa7b 	bl	242c <_fflush_r>
    2f36:	2800      	cmp	r0, #0
    2f38:	d012      	beq.n	2f60 <__swbuf_r+0x9c>
    2f3a:	e00f      	b.n	2f5c <__swbuf_r+0x98>
    2f3c:	4b0a      	ldr	r3, [pc, #40]	; (2f68 <__swbuf_r+0xa4>)
    2f3e:	429c      	cmp	r4, r3
    2f40:	d101      	bne.n	2f46 <__swbuf_r+0x82>
    2f42:	68ac      	ldr	r4, [r5, #8]
    2f44:	e7cd      	b.n	2ee2 <__swbuf_r+0x1e>
    2f46:	4b09      	ldr	r3, [pc, #36]	; (2f6c <__swbuf_r+0xa8>)
    2f48:	429c      	cmp	r4, r3
    2f4a:	d1ca      	bne.n	2ee2 <__swbuf_r+0x1e>
    2f4c:	68ec      	ldr	r4, [r5, #12]
    2f4e:	e7c8      	b.n	2ee2 <__swbuf_r+0x1e>
    2f50:	0021      	movs	r1, r4
    2f52:	0028      	movs	r0, r5
    2f54:	f000 f820 	bl	2f98 <__swsetup_r>
    2f58:	2800      	cmp	r0, #0
    2f5a:	d0ca      	beq.n	2ef2 <__swbuf_r+0x2e>
    2f5c:	2601      	movs	r6, #1
    2f5e:	4276      	negs	r6, r6
    2f60:	0030      	movs	r0, r6
    2f62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2f64:	00003414 	.word	0x00003414
    2f68:	00003434 	.word	0x00003434
    2f6c:	000033f4 	.word	0x000033f4

00002f70 <_write_r>:
    2f70:	b570      	push	{r4, r5, r6, lr}
    2f72:	0005      	movs	r5, r0
    2f74:	0008      	movs	r0, r1
    2f76:	0011      	movs	r1, r2
    2f78:	2200      	movs	r2, #0
    2f7a:	4c06      	ldr	r4, [pc, #24]	; (2f94 <_write_r+0x24>)
    2f7c:	6022      	str	r2, [r4, #0]
    2f7e:	001a      	movs	r2, r3
    2f80:	f7fe fa9a 	bl	14b8 <_write>
    2f84:	1c43      	adds	r3, r0, #1
    2f86:	d103      	bne.n	2f90 <_write_r+0x20>
    2f88:	6823      	ldr	r3, [r4, #0]
    2f8a:	2b00      	cmp	r3, #0
    2f8c:	d000      	beq.n	2f90 <_write_r+0x20>
    2f8e:	602b      	str	r3, [r5, #0]
    2f90:	bd70      	pop	{r4, r5, r6, pc}
    2f92:	46c0      	nop			; (mov r8, r8)
    2f94:	20000174 	.word	0x20000174

00002f98 <__swsetup_r>:
    2f98:	4b36      	ldr	r3, [pc, #216]	; (3074 <__swsetup_r+0xdc>)
    2f9a:	b570      	push	{r4, r5, r6, lr}
    2f9c:	681d      	ldr	r5, [r3, #0]
    2f9e:	0006      	movs	r6, r0
    2fa0:	000c      	movs	r4, r1
    2fa2:	2d00      	cmp	r5, #0
    2fa4:	d005      	beq.n	2fb2 <__swsetup_r+0x1a>
    2fa6:	69ab      	ldr	r3, [r5, #24]
    2fa8:	2b00      	cmp	r3, #0
    2faa:	d102      	bne.n	2fb2 <__swsetup_r+0x1a>
    2fac:	0028      	movs	r0, r5
    2fae:	f7ff faab 	bl	2508 <__sinit>
    2fb2:	4b31      	ldr	r3, [pc, #196]	; (3078 <__swsetup_r+0xe0>)
    2fb4:	429c      	cmp	r4, r3
    2fb6:	d10f      	bne.n	2fd8 <__swsetup_r+0x40>
    2fb8:	686c      	ldr	r4, [r5, #4]
    2fba:	230c      	movs	r3, #12
    2fbc:	5ee2      	ldrsh	r2, [r4, r3]
    2fbe:	b293      	uxth	r3, r2
    2fc0:	0719      	lsls	r1, r3, #28
    2fc2:	d42d      	bmi.n	3020 <__swsetup_r+0x88>
    2fc4:	06d9      	lsls	r1, r3, #27
    2fc6:	d411      	bmi.n	2fec <__swsetup_r+0x54>
    2fc8:	2309      	movs	r3, #9
    2fca:	2001      	movs	r0, #1
    2fcc:	6033      	str	r3, [r6, #0]
    2fce:	3337      	adds	r3, #55	; 0x37
    2fd0:	4313      	orrs	r3, r2
    2fd2:	81a3      	strh	r3, [r4, #12]
    2fd4:	4240      	negs	r0, r0
    2fd6:	bd70      	pop	{r4, r5, r6, pc}
    2fd8:	4b28      	ldr	r3, [pc, #160]	; (307c <__swsetup_r+0xe4>)
    2fda:	429c      	cmp	r4, r3
    2fdc:	d101      	bne.n	2fe2 <__swsetup_r+0x4a>
    2fde:	68ac      	ldr	r4, [r5, #8]
    2fe0:	e7eb      	b.n	2fba <__swsetup_r+0x22>
    2fe2:	4b27      	ldr	r3, [pc, #156]	; (3080 <__swsetup_r+0xe8>)
    2fe4:	429c      	cmp	r4, r3
    2fe6:	d1e8      	bne.n	2fba <__swsetup_r+0x22>
    2fe8:	68ec      	ldr	r4, [r5, #12]
    2fea:	e7e6      	b.n	2fba <__swsetup_r+0x22>
    2fec:	075b      	lsls	r3, r3, #29
    2fee:	d513      	bpl.n	3018 <__swsetup_r+0x80>
    2ff0:	6b61      	ldr	r1, [r4, #52]	; 0x34
    2ff2:	2900      	cmp	r1, #0
    2ff4:	d008      	beq.n	3008 <__swsetup_r+0x70>
    2ff6:	0023      	movs	r3, r4
    2ff8:	3344      	adds	r3, #68	; 0x44
    2ffa:	4299      	cmp	r1, r3
    2ffc:	d002      	beq.n	3004 <__swsetup_r+0x6c>
    2ffe:	0030      	movs	r0, r6
    3000:	f7ff fb8e 	bl	2720 <_free_r>
    3004:	2300      	movs	r3, #0
    3006:	6363      	str	r3, [r4, #52]	; 0x34
    3008:	2224      	movs	r2, #36	; 0x24
    300a:	89a3      	ldrh	r3, [r4, #12]
    300c:	4393      	bics	r3, r2
    300e:	81a3      	strh	r3, [r4, #12]
    3010:	2300      	movs	r3, #0
    3012:	6063      	str	r3, [r4, #4]
    3014:	6923      	ldr	r3, [r4, #16]
    3016:	6023      	str	r3, [r4, #0]
    3018:	2308      	movs	r3, #8
    301a:	89a2      	ldrh	r2, [r4, #12]
    301c:	4313      	orrs	r3, r2
    301e:	81a3      	strh	r3, [r4, #12]
    3020:	6923      	ldr	r3, [r4, #16]
    3022:	2b00      	cmp	r3, #0
    3024:	d10b      	bne.n	303e <__swsetup_r+0xa6>
    3026:	21a0      	movs	r1, #160	; 0xa0
    3028:	2280      	movs	r2, #128	; 0x80
    302a:	89a3      	ldrh	r3, [r4, #12]
    302c:	0089      	lsls	r1, r1, #2
    302e:	0092      	lsls	r2, r2, #2
    3030:	400b      	ands	r3, r1
    3032:	4293      	cmp	r3, r2
    3034:	d003      	beq.n	303e <__swsetup_r+0xa6>
    3036:	0021      	movs	r1, r4
    3038:	0030      	movs	r0, r6
    303a:	f7ff fb23 	bl	2684 <__smakebuf_r>
    303e:	2301      	movs	r3, #1
    3040:	89a2      	ldrh	r2, [r4, #12]
    3042:	4013      	ands	r3, r2
    3044:	d011      	beq.n	306a <__swsetup_r+0xd2>
    3046:	2300      	movs	r3, #0
    3048:	60a3      	str	r3, [r4, #8]
    304a:	6963      	ldr	r3, [r4, #20]
    304c:	425b      	negs	r3, r3
    304e:	61a3      	str	r3, [r4, #24]
    3050:	2000      	movs	r0, #0
    3052:	6923      	ldr	r3, [r4, #16]
    3054:	4283      	cmp	r3, r0
    3056:	d1be      	bne.n	2fd6 <__swsetup_r+0x3e>
    3058:	230c      	movs	r3, #12
    305a:	5ee2      	ldrsh	r2, [r4, r3]
    305c:	0613      	lsls	r3, r2, #24
    305e:	d5ba      	bpl.n	2fd6 <__swsetup_r+0x3e>
    3060:	2340      	movs	r3, #64	; 0x40
    3062:	4313      	orrs	r3, r2
    3064:	81a3      	strh	r3, [r4, #12]
    3066:	3801      	subs	r0, #1
    3068:	e7b5      	b.n	2fd6 <__swsetup_r+0x3e>
    306a:	0792      	lsls	r2, r2, #30
    306c:	d400      	bmi.n	3070 <__swsetup_r+0xd8>
    306e:	6963      	ldr	r3, [r4, #20]
    3070:	60a3      	str	r3, [r4, #8]
    3072:	e7ed      	b.n	3050 <__swsetup_r+0xb8>
    3074:	20000010 	.word	0x20000010
    3078:	00003414 	.word	0x00003414
    307c:	00003434 	.word	0x00003434
    3080:	000033f4 	.word	0x000033f4

00003084 <_close_r>:
    3084:	2300      	movs	r3, #0
    3086:	b570      	push	{r4, r5, r6, lr}
    3088:	4c06      	ldr	r4, [pc, #24]	; (30a4 <_close_r+0x20>)
    308a:	0005      	movs	r5, r0
    308c:	0008      	movs	r0, r1
    308e:	6023      	str	r3, [r4, #0]
    3090:	f7fe fa4c 	bl	152c <_close>
    3094:	1c43      	adds	r3, r0, #1
    3096:	d103      	bne.n	30a0 <_close_r+0x1c>
    3098:	6823      	ldr	r3, [r4, #0]
    309a:	2b00      	cmp	r3, #0
    309c:	d000      	beq.n	30a0 <_close_r+0x1c>
    309e:	602b      	str	r3, [r5, #0]
    30a0:	bd70      	pop	{r4, r5, r6, pc}
    30a2:	46c0      	nop			; (mov r8, r8)
    30a4:	20000174 	.word	0x20000174

000030a8 <_fstat_r>:
    30a8:	2300      	movs	r3, #0
    30aa:	b570      	push	{r4, r5, r6, lr}
    30ac:	4c06      	ldr	r4, [pc, #24]	; (30c8 <_fstat_r+0x20>)
    30ae:	0005      	movs	r5, r0
    30b0:	0008      	movs	r0, r1
    30b2:	0011      	movs	r1, r2
    30b4:	6023      	str	r3, [r4, #0]
    30b6:	f7fe fa3c 	bl	1532 <_fstat>
    30ba:	1c43      	adds	r3, r0, #1
    30bc:	d103      	bne.n	30c6 <_fstat_r+0x1e>
    30be:	6823      	ldr	r3, [r4, #0]
    30c0:	2b00      	cmp	r3, #0
    30c2:	d000      	beq.n	30c6 <_fstat_r+0x1e>
    30c4:	602b      	str	r3, [r5, #0]
    30c6:	bd70      	pop	{r4, r5, r6, pc}
    30c8:	20000174 	.word	0x20000174

000030cc <_isatty_r>:
    30cc:	2300      	movs	r3, #0
    30ce:	b570      	push	{r4, r5, r6, lr}
    30d0:	4c06      	ldr	r4, [pc, #24]	; (30ec <_isatty_r+0x20>)
    30d2:	0005      	movs	r5, r0
    30d4:	0008      	movs	r0, r1
    30d6:	6023      	str	r3, [r4, #0]
    30d8:	f7fe fa30 	bl	153c <_isatty>
    30dc:	1c43      	adds	r3, r0, #1
    30de:	d103      	bne.n	30e8 <_isatty_r+0x1c>
    30e0:	6823      	ldr	r3, [r4, #0]
    30e2:	2b00      	cmp	r3, #0
    30e4:	d000      	beq.n	30e8 <_isatty_r+0x1c>
    30e6:	602b      	str	r3, [r5, #0]
    30e8:	bd70      	pop	{r4, r5, r6, pc}
    30ea:	46c0      	nop			; (mov r8, r8)
    30ec:	20000174 	.word	0x20000174

000030f0 <_lseek_r>:
    30f0:	b570      	push	{r4, r5, r6, lr}
    30f2:	0005      	movs	r5, r0
    30f4:	0008      	movs	r0, r1
    30f6:	0011      	movs	r1, r2
    30f8:	2200      	movs	r2, #0
    30fa:	4c06      	ldr	r4, [pc, #24]	; (3114 <_lseek_r+0x24>)
    30fc:	6022      	str	r2, [r4, #0]
    30fe:	001a      	movs	r2, r3
    3100:	f7fe fa1e 	bl	1540 <_lseek>
    3104:	1c43      	adds	r3, r0, #1
    3106:	d103      	bne.n	3110 <_lseek_r+0x20>
    3108:	6823      	ldr	r3, [r4, #0]
    310a:	2b00      	cmp	r3, #0
    310c:	d000      	beq.n	3110 <_lseek_r+0x20>
    310e:	602b      	str	r3, [r5, #0]
    3110:	bd70      	pop	{r4, r5, r6, pc}
    3112:	46c0      	nop			; (mov r8, r8)
    3114:	20000174 	.word	0x20000174

00003118 <memchr>:
    3118:	b2c9      	uxtb	r1, r1
    311a:	1882      	adds	r2, r0, r2
    311c:	4290      	cmp	r0, r2
    311e:	d101      	bne.n	3124 <memchr+0xc>
    3120:	2000      	movs	r0, #0
    3122:	4770      	bx	lr
    3124:	7803      	ldrb	r3, [r0, #0]
    3126:	428b      	cmp	r3, r1
    3128:	d0fb      	beq.n	3122 <memchr+0xa>
    312a:	3001      	adds	r0, #1
    312c:	e7f6      	b.n	311c <memchr+0x4>

0000312e <__malloc_lock>:
    312e:	4770      	bx	lr

00003130 <__malloc_unlock>:
    3130:	4770      	bx	lr
	...

00003134 <_read_r>:
    3134:	b570      	push	{r4, r5, r6, lr}
    3136:	0005      	movs	r5, r0
    3138:	0008      	movs	r0, r1
    313a:	0011      	movs	r1, r2
    313c:	2200      	movs	r2, #0
    313e:	4c06      	ldr	r4, [pc, #24]	; (3158 <_read_r+0x24>)
    3140:	6022      	str	r2, [r4, #0]
    3142:	001a      	movs	r2, r3
    3144:	f7fe f996 	bl	1474 <_read>
    3148:	1c43      	adds	r3, r0, #1
    314a:	d103      	bne.n	3154 <_read_r+0x20>
    314c:	6823      	ldr	r3, [r4, #0]
    314e:	2b00      	cmp	r3, #0
    3150:	d000      	beq.n	3154 <_read_r+0x20>
    3152:	602b      	str	r3, [r5, #0]
    3154:	bd70      	pop	{r4, r5, r6, pc}
    3156:	46c0      	nop			; (mov r8, r8)
    3158:	20000174 	.word	0x20000174
    315c:	42000800 	.word	0x42000800
    3160:	42000c00 	.word	0x42000c00
    3164:	42001000 	.word	0x42001000
    3168:	42001400 	.word	0x42001400
    316c:	42001800 	.word	0x42001800
    3170:	42001c00 	.word	0x42001c00
    3174:	00000c02 	.word	0x00000c02
    3178:	00000bfe 	.word	0x00000bfe
    317c:	00000bfe 	.word	0x00000bfe
    3180:	00000c64 	.word	0x00000c64
    3184:	00000c64 	.word	0x00000c64
    3188:	00000c16 	.word	0x00000c16
    318c:	00000c08 	.word	0x00000c08
    3190:	00000c1c 	.word	0x00000c1c
    3194:	00000c52 	.word	0x00000c52
    3198:	00000e24 	.word	0x00000e24
    319c:	00000e04 	.word	0x00000e04
    31a0:	00000e04 	.word	0x00000e04
    31a4:	00000e90 	.word	0x00000e90
    31a8:	00000e16 	.word	0x00000e16
    31ac:	00000e32 	.word	0x00000e32
    31b0:	00000e08 	.word	0x00000e08
    31b4:	00000e40 	.word	0x00000e40
    31b8:	00000e80 	.word	0x00000e80
    31bc:	00000000 	.word	0x00000000
    31c0:	03000000 	.word	0x03000000
    31c4:	8001fcf0 	.word	0x8001fcf0
    31c8:	c0fef863 	.word	0xc0fef863
    31cc:	fef823b0 	.word	0xfef823b0
	...
    31d8:	000a000a 	.word	0x000a000a
    31dc:	00140014 	.word	0x00140014
    31e0:	00000014 	.word	0x00000014
    31e4:	000a017c 	.word	0x000a017c
    31e8:	000a017c 	.word	0x000a017c
    31ec:	00140186 	.word	0x00140186
    31f0:	00140000 	.word	0x00140000
    31f4:	0122000a 	.word	0x0122000a
    31f8:	00140186 	.word	0x00140186
    31fc:	01220190 	.word	0x01220190
    3200:	0122000a 	.word	0x0122000a
    3204:	012c0014 	.word	0x012c0014
    3208:	0122017c 	.word	0x0122017c
    320c:	012c0186 	.word	0x012c0186
    3210:	012c0014 	.word	0x012c0014
    3214:	0136017c 	.word	0x0136017c
    3218:	001e0000 	.word	0x001e0000
    321c:	00280032 	.word	0x00280032
    3220:	00320000 	.word	0x00320000
    3224:	003c0032 	.word	0x003c0032
    3228:	001e0050 	.word	0x001e0050
    322c:	00280118 	.word	0x00280118
    3230:	00280046 	.word	0x00280046
    3234:	00be0050 	.word	0x00be0050
    3238:	00be0050 	.word	0x00be0050
    323c:	00c80118 	.word	0x00c80118
    3240:	00280118 	.word	0x00280118
    3244:	00be0122 	.word	0x00be0122
    3248:	00460000 	.word	0x00460000
    324c:	00500032 	.word	0x00500032
    3250:	005a0000 	.word	0x005a0000
    3254:	00640032 	.word	0x00640032
    3258:	006e0000 	.word	0x006e0000
    325c:	00780032 	.word	0x00780032
    3260:	00820000 	.word	0x00820000
    3264:	008c0032 	.word	0x008c0032
    3268:	00960000 	.word	0x00960000
    326c:	00a00032 	.word	0x00a00032
    3270:	00aa0000 	.word	0x00aa0000
    3274:	00b40032 	.word	0x00b40032
    3278:	00be0000 	.word	0x00be0000
    327c:	00c80032 	.word	0x00c80032
    3280:	00c8012c 	.word	0x00c8012c
    3284:	00d20172 	.word	0x00d20172
    3288:	00dc001e 	.word	0x00dc001e
    328c:	00e60172 	.word	0x00e60172
    3290:	00f0001e 	.word	0x00f0001e
    3294:	00fa0172 	.word	0x00fa0172
    3298:	0104001e 	.word	0x0104001e
    329c:	010e0172 	.word	0x010e0172
    32a0:	0118005a 	.word	0x0118005a
    32a4:	0122012c 	.word	0x0122012c
    32a8:	82be50b4 	.word	0x82be50b4
    32ac:	8cbe82aa 	.word	0x8cbe82aa
    32b0:	64963c8c 	.word	0x64963c8c
    32b4:	64dc3cd2 	.word	0x64dc3cd2
    32b8:	a08c9682 	.word	0xa08c9682
    32bc:	aadca08c 	.word	0xaadca08c
    32c0:	a0e696dc 	.word	0xa0e696dc
    32c4:	50f03c78 	.word	0x50f03c78
    32c8:	5a78466e 	.word	0x5a78466e
    32cc:	aaaa3c96 	.word	0xaaaa3c96
    32d0:	a0dc3cc8 	.word	0xa0dc3cc8
    32d4:	aae6a0d2 	.word	0xaae6a0d2

000032d8 <beelzebub.12753>:
    32d8:	2e002d00 44003200 88005300 f300b600     .-...2.D.S......
    32e8:	64012201 d4019201 08020702 5f023402     .".d.........4._
    32f8:	94027802 bb02a602 f902db02 7f031f03     .x..............

00003308 <belial.12750>:
    3308:	f0f0f0f0 b0b0b0f0 b1b6b6b6 b7b7b1b1     ................
    3318:	b2b2b2b7 bfb8b8b8 b9b3b3b3 b5b5b9b9     ................
    3328:	babac2b5 bcbcbcba bebdbdbd f0f0f0be     ................
    3338:	b1b1f0f0 b8b7b7b6 bcb8b8b8 c9c9bcbc     ................
    3348:	35c9c9c9 0000363a                       ...5:6..

00003350 <lucifer.12752>:
    3350:	0852aa55 0d0d0d01 0d343434 34340d0d     U.R.....444...44
    3360:	00000034 01242424 340f0f0f 08083434     4...$$$....444..
    3370:	24240308 00780024 00007800 52aa5589     ..$$$.x..x...U.R
    3380:	00cc0008 01707005 02030303 02d00000     .....pp.........
    3390:	00505050 00000055 6c6c6548 6f57206f     PPP.U...Hello Wo
    33a0:	0a646c72 0000000d                       rld.....

000033a8 <mulciber.12751>:
    33a8:	03020100 02010004 00020100 01000201     ................
    33b8:	02010002 00020100 01000201 01000002     ................
    33c8:	02010000 00020100 01000201 03020100     ................
    33d8:	00000004 01000100 01000302 02010002     ................
    33e8:	00000403 00000000                       ........

000033f0 <_global_impure_ptr>:
    33f0:	20000014                                ... 

000033f4 <__sf_fake_stderr>:
	...

00003414 <__sf_fake_stdin>:
	...

00003434 <__sf_fake_stdout>:
	...
    3454:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    3464:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    3474:	31300046 35343332 39383736 64636261     F.0123456789abcd
    3484:	00006665                                ef..

00003488 <_init>:
    3488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    348a:	46c0      	nop			; (mov r8, r8)
    348c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    348e:	bc08      	pop	{r3}
    3490:	469e      	mov	lr, r3
    3492:	4770      	bx	lr

00003494 <__init_array_start>:
    3494:	000000dd 	.word	0x000000dd

00003498 <_fini>:
    3498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    349a:	46c0      	nop			; (mov r8, r8)
    349c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    349e:	bc08      	pop	{r3}
    34a0:	469e      	mov	lr, r3
    34a2:	4770      	bx	lr

000034a4 <__fini_array_start>:
    34a4:	000000b5 	.word	0x000000b5
