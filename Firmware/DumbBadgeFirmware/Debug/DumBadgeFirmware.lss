
DumBadgeFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006350  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000074  20000000  00006350  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000128  20000074  000063c4  00020074  2**2
                  ALLOC
  3 .stack        00002004  2000019c  000064ec  00020074  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002fa8b  00000000  00000000  000200f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000410a  00000000  00000000  0004fb80  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00006dc0  00000000  00000000  00053c8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000005f8  00000000  00000000  0005aa4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000718  00000000  00000000  0005b042  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001c456  00000000  00000000  0005b75a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000db75  00000000  00000000  00077bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0009065a  00000000  00000000  00085725  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000016dc  00000000  00000000  00115d80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	a0 21 00 20 c5 18 00 00 c1 18 00 00 c1 18 00 00     .!. ............
	...
      2c:	c1 18 00 00 00 00 00 00 00 00 00 00 c1 18 00 00     ................
      3c:	c1 18 00 00 c1 18 00 00 c1 18 00 00 c1 18 00 00     ................
      4c:	c1 18 00 00 c1 18 00 00 c1 18 00 00 c1 18 00 00     ................
      5c:	c1 18 00 00 c1 18 00 00 65 0b 00 00 75 0b 00 00     ........e...u...
      6c:	85 0b 00 00 95 0b 00 00 a5 0b 00 00 b5 0b 00 00     ................
      7c:	c1 18 00 00 c1 18 00 00 c1 18 00 00 c1 18 00 00     ................
      8c:	c1 18 00 00 c1 18 00 00 c1 18 00 00 c1 18 00 00     ................
      9c:	99 06 00 00 c1 18 00 00 c1 18 00 00 c1 18 00 00     ................
      ac:	c1 18 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000074 	.word	0x20000074
      d4:	00000000 	.word	0x00000000
      d8:	00006350 	.word	0x00006350

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000078 	.word	0x20000078
     108:	00006350 	.word	0x00006350
     10c:	00006350 	.word	0x00006350
     110:	00000000 	.word	0x00000000

00000114 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     114:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     116:	2000      	movs	r0, #0
     118:	4b08      	ldr	r3, [pc, #32]	; (13c <delay_init+0x28>)
     11a:	4798      	blx	r3
     11c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     11e:	4c08      	ldr	r4, [pc, #32]	; (140 <delay_init+0x2c>)
     120:	21fa      	movs	r1, #250	; 0xfa
     122:	0089      	lsls	r1, r1, #2
     124:	47a0      	blx	r4
     126:	4b07      	ldr	r3, [pc, #28]	; (144 <delay_init+0x30>)
     128:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     12a:	4907      	ldr	r1, [pc, #28]	; (148 <delay_init+0x34>)
     12c:	0028      	movs	r0, r5
     12e:	47a0      	blx	r4
     130:	4b06      	ldr	r3, [pc, #24]	; (14c <delay_init+0x38>)
     132:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     134:	2205      	movs	r2, #5
     136:	4b06      	ldr	r3, [pc, #24]	; (150 <delay_init+0x3c>)
     138:	601a      	str	r2, [r3, #0]
}
     13a:	bd70      	pop	{r4, r5, r6, pc}
     13c:	00001651 	.word	0x00001651
     140:	00002f3d 	.word	0x00002f3d
     144:	20000000 	.word	0x20000000
     148:	000f4240 	.word	0x000f4240
     14c:	20000004 	.word	0x20000004
     150:	e000e010 	.word	0xe000e010

00000154 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     154:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     156:	4b08      	ldr	r3, [pc, #32]	; (178 <delay_cycles_ms+0x24>)
     158:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     15a:	4a08      	ldr	r2, [pc, #32]	; (17c <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     15c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     15e:	2180      	movs	r1, #128	; 0x80
     160:	0249      	lsls	r1, r1, #9
	while (n--) {
     162:	3801      	subs	r0, #1
     164:	d307      	bcc.n	176 <delay_cycles_ms+0x22>
	if (n > 0) {
     166:	2c00      	cmp	r4, #0
     168:	d0fb      	beq.n	162 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     16a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     16c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     16e:	6813      	ldr	r3, [r2, #0]
     170:	420b      	tst	r3, r1
     172:	d0fc      	beq.n	16e <delay_cycles_ms+0x1a>
     174:	e7f5      	b.n	162 <delay_cycles_ms+0xe>
	}
}
     176:	bd30      	pop	{r4, r5, pc}
     178:	20000000 	.word	0x20000000
     17c:	e000e010 	.word	0xe000e010

00000180 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     180:	4b0c      	ldr	r3, [pc, #48]	; (1b4 <cpu_irq_enter_critical+0x34>)
     182:	681b      	ldr	r3, [r3, #0]
     184:	2b00      	cmp	r3, #0
     186:	d106      	bne.n	196 <cpu_irq_enter_critical+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     188:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     18c:	2b00      	cmp	r3, #0
     18e:	d007      	beq.n	1a0 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     190:	2200      	movs	r2, #0
     192:	4b09      	ldr	r3, [pc, #36]	; (1b8 <cpu_irq_enter_critical+0x38>)
     194:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     196:	4a07      	ldr	r2, [pc, #28]	; (1b4 <cpu_irq_enter_critical+0x34>)
     198:	6813      	ldr	r3, [r2, #0]
     19a:	3301      	adds	r3, #1
     19c:	6013      	str	r3, [r2, #0]
}
     19e:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     1a0:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     1a2:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     1a6:	2200      	movs	r2, #0
     1a8:	4b04      	ldr	r3, [pc, #16]	; (1bc <cpu_irq_enter_critical+0x3c>)
     1aa:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     1ac:	3201      	adds	r2, #1
     1ae:	4b02      	ldr	r3, [pc, #8]	; (1b8 <cpu_irq_enter_critical+0x38>)
     1b0:	701a      	strb	r2, [r3, #0]
     1b2:	e7f0      	b.n	196 <cpu_irq_enter_critical+0x16>
     1b4:	20000090 	.word	0x20000090
     1b8:	20000094 	.word	0x20000094
     1bc:	20000008 	.word	0x20000008

000001c0 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     1c0:	4b08      	ldr	r3, [pc, #32]	; (1e4 <cpu_irq_leave_critical+0x24>)
     1c2:	681a      	ldr	r2, [r3, #0]
     1c4:	3a01      	subs	r2, #1
     1c6:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     1c8:	681b      	ldr	r3, [r3, #0]
     1ca:	2b00      	cmp	r3, #0
     1cc:	d109      	bne.n	1e2 <cpu_irq_leave_critical+0x22>
     1ce:	4b06      	ldr	r3, [pc, #24]	; (1e8 <cpu_irq_leave_critical+0x28>)
     1d0:	781b      	ldrb	r3, [r3, #0]
     1d2:	2b00      	cmp	r3, #0
     1d4:	d005      	beq.n	1e2 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     1d6:	2201      	movs	r2, #1
     1d8:	4b04      	ldr	r3, [pc, #16]	; (1ec <cpu_irq_leave_critical+0x2c>)
     1da:	701a      	strb	r2, [r3, #0]
     1dc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     1e0:	b662      	cpsie	i
	}
}
     1e2:	4770      	bx	lr
     1e4:	20000090 	.word	0x20000090
     1e8:	20000094 	.word	0x20000094
     1ec:	20000008 	.word	0x20000008

000001f0 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     1f0:	b5f0      	push	{r4, r5, r6, r7, lr}
     1f2:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     1f4:	ac01      	add	r4, sp, #4
     1f6:	2501      	movs	r5, #1
     1f8:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     1fa:	2700      	movs	r7, #0
     1fc:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     1fe:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     200:	0021      	movs	r1, r4
     202:	203e      	movs	r0, #62	; 0x3e
     204:	4e06      	ldr	r6, [pc, #24]	; (220 <system_board_init+0x30>)
     206:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     208:	2280      	movs	r2, #128	; 0x80
     20a:	05d2      	lsls	r2, r2, #23
     20c:	4b05      	ldr	r3, [pc, #20]	; (224 <system_board_init+0x34>)
     20e:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     210:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     212:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     214:	0021      	movs	r1, r4
     216:	200f      	movs	r0, #15
     218:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
     21a:	b003      	add	sp, #12
     21c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     21e:	46c0      	nop			; (mov r8, r8)
     220:	0000075d 	.word	0x0000075d
     224:	41004480 	.word	0x41004480

00000228 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     228:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     22a:	2200      	movs	r2, #0
     22c:	2300      	movs	r3, #0
     22e:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
     230:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
     232:	2100      	movs	r1, #0
     234:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     236:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     238:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
     23a:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
     23c:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
     23e:	6082      	str	r2, [r0, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
     240:	7303      	strb	r3, [r0, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
     242:	24c0      	movs	r4, #192	; 0xc0
     244:	0164      	lsls	r4, r4, #5
     246:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     248:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     24a:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
     24c:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
     24e:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
     250:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     252:	242a      	movs	r4, #42	; 0x2a
     254:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
     256:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
     258:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
     25a:	3c06      	subs	r4, #6
     25c:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     25e:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     260:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
     262:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
     264:	232b      	movs	r3, #43	; 0x2b
     266:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
     268:	3301      	adds	r3, #1
     26a:	54c1      	strb	r1, [r0, r3]
}
     26c:	bd10      	pop	{r4, pc}
	...

00000270 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     270:	b5f0      	push	{r4, r5, r6, r7, lr}
     272:	46d6      	mov	lr, sl
     274:	464f      	mov	r7, r9
     276:	4646      	mov	r6, r8
     278:	b5c0      	push	{r6, r7, lr}
     27a:	b096      	sub	sp, #88	; 0x58
     27c:	0007      	movs	r7, r0
     27e:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     280:	6001      	str	r1, [r0, #0]
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     282:	4ac6      	ldr	r2, [pc, #792]	; (59c <adc_init+0x32c>)
     284:	6a10      	ldr	r0, [r2, #32]
     286:	2380      	movs	r3, #128	; 0x80
     288:	025b      	lsls	r3, r3, #9
     28a:	4303      	orrs	r3, r0
     28c:	6213      	str	r3, [r2, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     28e:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     290:	2005      	movs	r0, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     292:	07db      	lsls	r3, r3, #31
     294:	d505      	bpl.n	2a2 <adc_init+0x32>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
     296:	b016      	add	sp, #88	; 0x58
     298:	bc1c      	pop	{r2, r3, r4}
     29a:	4690      	mov	r8, r2
     29c:	4699      	mov	r9, r3
     29e:	46a2      	mov	sl, r4
     2a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     2a2:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
     2a4:	3017      	adds	r0, #23
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     2a6:	079b      	lsls	r3, r3, #30
     2a8:	d4f5      	bmi.n	296 <adc_init+0x26>
	module_inst->reference = config->reference;
     2aa:	7873      	ldrb	r3, [r6, #1]
     2ac:	713b      	strb	r3, [r7, #4]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
     2ae:	2b00      	cmp	r3, #0
     2b0:	d104      	bne.n	2bc <adc_init+0x4c>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
     2b2:	4abb      	ldr	r2, [pc, #748]	; (5a0 <adc_init+0x330>)
     2b4:	6c13      	ldr	r3, [r2, #64]	; 0x40
     2b6:	2104      	movs	r1, #4
     2b8:	430b      	orrs	r3, r1
     2ba:	6413      	str	r3, [r2, #64]	; 0x40
		module_inst->callback[i] = NULL;
     2bc:	2300      	movs	r3, #0
     2be:	60bb      	str	r3, [r7, #8]
     2c0:	60fb      	str	r3, [r7, #12]
     2c2:	613b      	str	r3, [r7, #16]
	module_inst->registered_callback_mask = 0;
     2c4:	76bb      	strb	r3, [r7, #26]
	module_inst->enabled_callback_mask = 0;
     2c6:	76fb      	strb	r3, [r7, #27]
	module_inst->remaining_conversions = 0;
     2c8:	833b      	strh	r3, [r7, #24]
	module_inst->job_status = STATUS_OK;
     2ca:	773b      	strb	r3, [r7, #28]
	_adc_instances[0] = module_inst;
     2cc:	4bb5      	ldr	r3, [pc, #724]	; (5a4 <adc_init+0x334>)
     2ce:	601f      	str	r7, [r3, #0]
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
     2d0:	232a      	movs	r3, #42	; 0x2a
     2d2:	5cf3      	ldrb	r3, [r6, r3]
     2d4:	2b00      	cmp	r3, #0
     2d6:	d105      	bne.n	2e4 <adc_init+0x74>
     2d8:	7d33      	ldrb	r3, [r6, #20]
     2da:	2b00      	cmp	r3, #0
     2dc:	d102      	bne.n	2e4 <adc_init+0x74>
		module_inst->software_trigger = true;
     2de:	3301      	adds	r3, #1
     2e0:	777b      	strb	r3, [r7, #29]
     2e2:	e001      	b.n	2e8 <adc_init+0x78>
		module_inst->software_trigger = false;
     2e4:	2300      	movs	r3, #0
     2e6:	777b      	strb	r3, [r7, #29]
	Adc *const adc_module = module_inst->hw;
     2e8:	683b      	ldr	r3, [r7, #0]
     2ea:	4698      	mov	r8, r3
	gclk_chan_conf.source_generator = config->clock_source;
     2ec:	7833      	ldrb	r3, [r6, #0]
     2ee:	466a      	mov	r2, sp
     2f0:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
     2f2:	4669      	mov	r1, sp
     2f4:	201e      	movs	r0, #30
     2f6:	4bac      	ldr	r3, [pc, #688]	; (5a8 <adc_init+0x338>)
     2f8:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
     2fa:	201e      	movs	r0, #30
     2fc:	4bab      	ldr	r3, [pc, #684]	; (5ac <adc_init+0x33c>)
     2fe:	4798      	blx	r3
	if (config->pin_scan.inputs_to_scan != 0) {
     300:	232c      	movs	r3, #44	; 0x2c
     302:	5cf2      	ldrb	r2, [r6, r3]
     304:	2a00      	cmp	r2, #0
     306:	d054      	beq.n	3b2 <adc_init+0x142>
		uint8_t offset = config->pin_scan.offset_start_scan;
     308:	3b01      	subs	r3, #1
     30a:	5cf5      	ldrb	r5, [r6, r3]
		uint8_t start_pin =
     30c:	7b33      	ldrb	r3, [r6, #12]
     30e:	18eb      	adds	r3, r5, r3
     310:	b2db      	uxtb	r3, r3
		uint8_t end_pin =
     312:	18d1      	adds	r1, r2, r3
		while (start_pin < end_pin) {
     314:	b2c9      	uxtb	r1, r1
     316:	428b      	cmp	r3, r1
     318:	d221      	bcs.n	35e <adc_init+0xee>
     31a:	1952      	adds	r2, r2, r5
     31c:	b2d3      	uxtb	r3, r2
     31e:	4699      	mov	r9, r3
	const uint32_t pinmapping[] = {
     320:	4ba3      	ldr	r3, [pc, #652]	; (5b0 <adc_init+0x340>)
     322:	469a      	mov	sl, r3
     324:	e003      	b.n	32e <adc_init+0xbe>
			offset++;
     326:	3501      	adds	r5, #1
     328:	b2ed      	uxtb	r5, r5
		while (start_pin < end_pin) {
     32a:	454d      	cmp	r5, r9
     32c:	d017      	beq.n	35e <adc_init+0xee>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
     32e:	240f      	movs	r4, #15
     330:	402c      	ands	r4, r5
     332:	7b33      	ldrb	r3, [r6, #12]
     334:	18e4      	adds	r4, r4, r3
	const uint32_t pinmapping[] = {
     336:	2250      	movs	r2, #80	; 0x50
     338:	499e      	ldr	r1, [pc, #632]	; (5b4 <adc_init+0x344>)
     33a:	a802      	add	r0, sp, #8
     33c:	47d0      	blx	sl
	if (pin <= ADC_EXTCHANNEL_MSB) {
     33e:	2c13      	cmp	r4, #19
     340:	d8f1      	bhi.n	326 <adc_init+0xb6>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     342:	00a4      	lsls	r4, r4, #2
     344:	ab02      	add	r3, sp, #8
     346:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     348:	a901      	add	r1, sp, #4
     34a:	2300      	movs	r3, #0
     34c:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     34e:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     350:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     352:	3301      	adds	r3, #1
     354:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     356:	b2c0      	uxtb	r0, r0
     358:	4b97      	ldr	r3, [pc, #604]	; (5b8 <adc_init+0x348>)
     35a:	4798      	blx	r3
     35c:	e7e3      	b.n	326 <adc_init+0xb6>
		_adc_configure_ain_pin(config->negative_input);
     35e:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     360:	2250      	movs	r2, #80	; 0x50
     362:	4994      	ldr	r1, [pc, #592]	; (5b4 <adc_init+0x344>)
     364:	a802      	add	r0, sp, #8
     366:	4b92      	ldr	r3, [pc, #584]	; (5b0 <adc_init+0x340>)
     368:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     36a:	2c13      	cmp	r4, #19
     36c:	d913      	bls.n	396 <adc_init+0x126>
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
     36e:	7d73      	ldrb	r3, [r6, #21]
     370:	009b      	lsls	r3, r3, #2
     372:	b2db      	uxtb	r3, r3
     374:	4642      	mov	r2, r8
     376:	7013      	strb	r3, [r2, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     378:	7db3      	ldrb	r3, [r6, #22]
     37a:	01db      	lsls	r3, r3, #7
     37c:	7872      	ldrb	r2, [r6, #1]
     37e:	4313      	orrs	r3, r2
     380:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
     382:	4642      	mov	r2, r8
     384:	7053      	strb	r3, [r2, #1]
	switch (config->resolution) {
     386:	7933      	ldrb	r3, [r6, #4]
     388:	2b34      	cmp	r3, #52	; 0x34
     38a:	d900      	bls.n	38e <adc_init+0x11e>
     38c:	e17b      	b.n	686 <adc_init+0x416>
     38e:	009b      	lsls	r3, r3, #2
     390:	4a8a      	ldr	r2, [pc, #552]	; (5bc <adc_init+0x34c>)
     392:	58d3      	ldr	r3, [r2, r3]
     394:	469f      	mov	pc, r3
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     396:	00a4      	lsls	r4, r4, #2
     398:	ab02      	add	r3, sp, #8
     39a:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     39c:	a901      	add	r1, sp, #4
     39e:	2300      	movs	r3, #0
     3a0:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     3a2:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     3a4:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     3a6:	3301      	adds	r3, #1
     3a8:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     3aa:	b2c0      	uxtb	r0, r0
     3ac:	4b82      	ldr	r3, [pc, #520]	; (5b8 <adc_init+0x348>)
     3ae:	4798      	blx	r3
     3b0:	e7dd      	b.n	36e <adc_init+0xfe>
		_adc_configure_ain_pin(config->positive_input);
     3b2:	7b34      	ldrb	r4, [r6, #12]
	const uint32_t pinmapping[] = {
     3b4:	2250      	movs	r2, #80	; 0x50
     3b6:	497f      	ldr	r1, [pc, #508]	; (5b4 <adc_init+0x344>)
     3b8:	a802      	add	r0, sp, #8
     3ba:	4b7d      	ldr	r3, [pc, #500]	; (5b0 <adc_init+0x340>)
     3bc:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     3be:	2c13      	cmp	r4, #19
     3c0:	d915      	bls.n	3ee <adc_init+0x17e>
		_adc_configure_ain_pin(config->negative_input);
     3c2:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     3c4:	2250      	movs	r2, #80	; 0x50
     3c6:	497b      	ldr	r1, [pc, #492]	; (5b4 <adc_init+0x344>)
     3c8:	a802      	add	r0, sp, #8
     3ca:	4b79      	ldr	r3, [pc, #484]	; (5b0 <adc_init+0x340>)
     3cc:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     3ce:	2c13      	cmp	r4, #19
     3d0:	d8cd      	bhi.n	36e <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     3d2:	00a4      	lsls	r4, r4, #2
     3d4:	ab02      	add	r3, sp, #8
     3d6:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     3d8:	a901      	add	r1, sp, #4
     3da:	2300      	movs	r3, #0
     3dc:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     3de:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     3e0:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     3e2:	3301      	adds	r3, #1
     3e4:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     3e6:	b2c0      	uxtb	r0, r0
     3e8:	4b73      	ldr	r3, [pc, #460]	; (5b8 <adc_init+0x348>)
     3ea:	4798      	blx	r3
     3ec:	e7bf      	b.n	36e <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     3ee:	00a4      	lsls	r4, r4, #2
     3f0:	ab02      	add	r3, sp, #8
     3f2:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     3f4:	a901      	add	r1, sp, #4
     3f6:	2300      	movs	r3, #0
     3f8:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     3fa:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     3fc:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     3fe:	3301      	adds	r3, #1
     400:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     402:	b2c0      	uxtb	r0, r0
     404:	4b6c      	ldr	r3, [pc, #432]	; (5b8 <adc_init+0x348>)
     406:	4798      	blx	r3
     408:	e7db      	b.n	3c2 <adc_init+0x152>
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     40a:	2304      	movs	r3, #4
		resolution = ADC_RESOLUTION_16BIT;
     40c:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_4;
     40e:	2102      	movs	r1, #2
     410:	e01a      	b.n	448 <adc_init+0x1d8>
		adjres = config->divide_result;
     412:	7c71      	ldrb	r1, [r6, #17]
		accumulate = config->accumulate_samples;
     414:	7c33      	ldrb	r3, [r6, #16]
		resolution = ADC_RESOLUTION_16BIT;
     416:	2410      	movs	r4, #16
     418:	e016      	b.n	448 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     41a:	2306      	movs	r3, #6
		resolution = ADC_RESOLUTION_16BIT;
     41c:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     41e:	2101      	movs	r1, #1
     420:	e012      	b.n	448 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     422:	2308      	movs	r3, #8
		resolution = ADC_RESOLUTION_16BIT;
     424:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     426:	2100      	movs	r1, #0
     428:	e00e      	b.n	448 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     42a:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_8BIT;
     42c:	2430      	movs	r4, #48	; 0x30
	uint8_t adjres = 0;
     42e:	2100      	movs	r1, #0
     430:	e00a      	b.n	448 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     432:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_10BIT;
     434:	2420      	movs	r4, #32
	uint8_t adjres = 0;
     436:	2100      	movs	r1, #0
     438:	e006      	b.n	448 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     43a:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_12BIT;
     43c:	2400      	movs	r4, #0
	uint8_t adjres = 0;
     43e:	2100      	movs	r1, #0
     440:	e002      	b.n	448 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     442:	2302      	movs	r3, #2
		resolution = ADC_RESOLUTION_16BIT;
     444:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     446:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     448:	0109      	lsls	r1, r1, #4
     44a:	2270      	movs	r2, #112	; 0x70
     44c:	400a      	ands	r2, r1
     44e:	4313      	orrs	r3, r2
     450:	4642      	mov	r2, r8
     452:	7093      	strb	r3, [r2, #2]
	if (config->sample_length > 63) {
     454:	7df3      	ldrb	r3, [r6, #23]
		return STATUS_ERR_INVALID_ARG;
     456:	2017      	movs	r0, #23
	if (config->sample_length > 63) {
     458:	2b3f      	cmp	r3, #63	; 0x3f
     45a:	d900      	bls.n	45e <adc_init+0x1ee>
     45c:	e71b      	b.n	296 <adc_init+0x26>
		adc_module->SAMPCTRL.reg =
     45e:	70d3      	strb	r3, [r2, #3]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     460:	683a      	ldr	r2, [r7, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     462:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     464:	b25b      	sxtb	r3, r3
     466:	2b00      	cmp	r3, #0
     468:	dbfb      	blt.n	462 <adc_init+0x1f2>
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
     46a:	7cf3      	ldrb	r3, [r6, #19]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     46c:	8872      	ldrh	r2, [r6, #2]
     46e:	4313      	orrs	r3, r2
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     470:	2224      	movs	r2, #36	; 0x24
     472:	5cb2      	ldrb	r2, [r6, r2]
     474:	00d2      	lsls	r2, r2, #3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     476:	4313      	orrs	r3, r2
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
     478:	7d32      	ldrb	r2, [r6, #20]
     47a:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     47c:	4313      	orrs	r3, r2
     47e:	7cb2      	ldrb	r2, [r6, #18]
     480:	0052      	lsls	r2, r2, #1
     482:	4313      	orrs	r3, r2
     484:	4323      	orrs	r3, r4
	adc_module->CTRLB.reg =
     486:	4642      	mov	r2, r8
     488:	8093      	strh	r3, [r2, #4]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     48a:	7e33      	ldrb	r3, [r6, #24]
     48c:	2b00      	cmp	r3, #0
     48e:	d020      	beq.n	4d2 <adc_init+0x262>
		switch (resolution) {
     490:	2c10      	cmp	r4, #16
     492:	d100      	bne.n	496 <adc_init+0x226>
     494:	e0d9      	b.n	64a <adc_init+0x3da>
     496:	d800      	bhi.n	49a <adc_init+0x22a>
     498:	e098      	b.n	5cc <adc_init+0x35c>
     49a:	2c20      	cmp	r4, #32
     49c:	d100      	bne.n	4a0 <adc_init+0x230>
     49e:	e0b6      	b.n	60e <adc_init+0x39e>
     4a0:	2c30      	cmp	r4, #48	; 0x30
     4a2:	d116      	bne.n	4d2 <adc_init+0x262>
			if (config->differential_mode &&
     4a4:	7cf2      	ldrb	r2, [r6, #19]
     4a6:	2a00      	cmp	r2, #0
     4a8:	d00a      	beq.n	4c0 <adc_init+0x250>
					(config->window.window_lower_value > 127 ||
     4aa:	69f2      	ldr	r2, [r6, #28]
     4ac:	3280      	adds	r2, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
     4ae:	2017      	movs	r0, #23
			if (config->differential_mode &&
     4b0:	2aff      	cmp	r2, #255	; 0xff
     4b2:	d900      	bls.n	4b6 <adc_init+0x246>
     4b4:	e6ef      	b.n	296 <adc_init+0x26>
					config->window.window_lower_value < -128 ||
     4b6:	6a32      	ldr	r2, [r6, #32]
     4b8:	3280      	adds	r2, #128	; 0x80
     4ba:	2aff      	cmp	r2, #255	; 0xff
     4bc:	d900      	bls.n	4c0 <adc_init+0x250>
     4be:	e6ea      	b.n	296 <adc_init+0x26>
				return STATUS_ERR_INVALID_ARG;
     4c0:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 255 ||
     4c2:	69f2      	ldr	r2, [r6, #28]
     4c4:	2aff      	cmp	r2, #255	; 0xff
     4c6:	dd00      	ble.n	4ca <adc_init+0x25a>
     4c8:	e6e5      	b.n	296 <adc_init+0x26>
     4ca:	6a32      	ldr	r2, [r6, #32]
     4cc:	2aff      	cmp	r2, #255	; 0xff
     4ce:	dd00      	ble.n	4d2 <adc_init+0x262>
     4d0:	e6e1      	b.n	296 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     4d2:	6839      	ldr	r1, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     4d4:	7e4a      	ldrb	r2, [r1, #25]
	while (adc_is_syncing(module_inst)) {
     4d6:	b252      	sxtb	r2, r2
     4d8:	2a00      	cmp	r2, #0
     4da:	dbfb      	blt.n	4d4 <adc_init+0x264>
	adc_module->WINCTRL.reg = config->window.window_mode;
     4dc:	4642      	mov	r2, r8
     4de:	7213      	strb	r3, [r2, #8]
	Adc *const adc_module = module_inst->hw;
     4e0:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     4e2:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     4e4:	b25b      	sxtb	r3, r3
     4e6:	2b00      	cmp	r3, #0
     4e8:	dbfb      	blt.n	4e2 <adc_init+0x272>
	adc_module->WINLT.reg =
     4ea:	8bb3      	ldrh	r3, [r6, #28]
     4ec:	4642      	mov	r2, r8
     4ee:	8393      	strh	r3, [r2, #28]
	Adc *const adc_module = module_inst->hw;
     4f0:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     4f2:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     4f4:	b25b      	sxtb	r3, r3
     4f6:	2b00      	cmp	r3, #0
     4f8:	dbfb      	blt.n	4f2 <adc_init+0x282>
	adc_module->WINUT.reg = config->window.window_upper_value <<
     4fa:	8c33      	ldrh	r3, [r6, #32]
     4fc:	4642      	mov	r2, r8
     4fe:	8413      	strh	r3, [r2, #32]
	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
     500:	232c      	movs	r3, #44	; 0x2c
     502:	5cf3      	ldrb	r3, [r6, r3]
	if (inputs_to_scan > 0) {
     504:	2b00      	cmp	r3, #0
     506:	d005      	beq.n	514 <adc_init+0x2a4>
		inputs_to_scan--;
     508:	3b01      	subs	r3, #1
     50a:	b2db      	uxtb	r3, r3
		return STATUS_ERR_INVALID_ARG;
     50c:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     50e:	2b0f      	cmp	r3, #15
     510:	d900      	bls.n	514 <adc_init+0x2a4>
     512:	e6c0      	b.n	296 <adc_init+0x26>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
     514:	222b      	movs	r2, #43	; 0x2b
     516:	5cb1      	ldrb	r1, [r6, r2]
		return STATUS_ERR_INVALID_ARG;
     518:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     51a:	290f      	cmp	r1, #15
     51c:	d900      	bls.n	520 <adc_init+0x2b0>
     51e:	e6ba      	b.n	296 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     520:	6838      	ldr	r0, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     522:	7e42      	ldrb	r2, [r0, #25]
	while (adc_is_syncing(module_inst)) {
     524:	b252      	sxtb	r2, r2
     526:	2a00      	cmp	r2, #0
     528:	dbfb      	blt.n	522 <adc_init+0x2b2>
			config->negative_input |
     52a:	89f2      	ldrh	r2, [r6, #14]
			config->positive_input;
     52c:	7b30      	ldrb	r0, [r6, #12]
			config->negative_input |
     52e:	4302      	orrs	r2, r0
     530:	68b0      	ldr	r0, [r6, #8]
     532:	4302      	orrs	r2, r0
			(config->pin_scan.offset_start_scan <<
     534:	0509      	lsls	r1, r1, #20
			config->negative_input |
     536:	430a      	orrs	r2, r1
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     538:	041b      	lsls	r3, r3, #16
			config->negative_input |
     53a:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
     53c:	4642      	mov	r2, r8
     53e:	6113      	str	r3, [r2, #16]
	adc_module->EVCTRL.reg = config->event_action;
     540:	232a      	movs	r3, #42	; 0x2a
     542:	5cf3      	ldrb	r3, [r6, r3]
     544:	7513      	strb	r3, [r2, #20]
	adc_module->INTENCLR.reg =
     546:	230f      	movs	r3, #15
     548:	7593      	strb	r3, [r2, #22]
	if (config->correction.correction_enable){
     54a:	3315      	adds	r3, #21
     54c:	5cf3      	ldrb	r3, [r6, r3]
     54e:	2b00      	cmp	r3, #0
     550:	d012      	beq.n	578 <adc_init+0x308>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     552:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
     554:	4a1a      	ldr	r2, [pc, #104]	; (5c0 <adc_init+0x350>)
			return STATUS_ERR_INVALID_ARG;
     556:	2017      	movs	r0, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     558:	4293      	cmp	r3, r2
     55a:	d900      	bls.n	55e <adc_init+0x2ee>
     55c:	e69b      	b.n	296 <adc_init+0x26>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     55e:	4642      	mov	r2, r8
     560:	8493      	strh	r3, [r2, #36]	; 0x24
		if (config->correction.offset_correction > 2047 ||
     562:	8d32      	ldrh	r2, [r6, #40]	; 0x28
     564:	2380      	movs	r3, #128	; 0x80
     566:	011b      	lsls	r3, r3, #4
     568:	18d3      	adds	r3, r2, r3
     56a:	4915      	ldr	r1, [pc, #84]	; (5c0 <adc_init+0x350>)
     56c:	b29b      	uxth	r3, r3
     56e:	428b      	cmp	r3, r1
     570:	d900      	bls.n	574 <adc_init+0x304>
     572:	e690      	b.n	296 <adc_init+0x26>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     574:	4643      	mov	r3, r8
     576:	84da      	strh	r2, [r3, #38]	; 0x26
			ADC_CALIB_BIAS_CAL(
     578:	4b12      	ldr	r3, [pc, #72]	; (5c4 <adc_init+0x354>)
     57a:	681b      	ldr	r3, [r3, #0]
     57c:	015b      	lsls	r3, r3, #5
     57e:	22e0      	movs	r2, #224	; 0xe0
     580:	00d2      	lsls	r2, r2, #3
     582:	4013      	ands	r3, r2
			ADC_CALIB_LINEARITY_CAL(
     584:	4a10      	ldr	r2, [pc, #64]	; (5c8 <adc_init+0x358>)
     586:	6851      	ldr	r1, [r2, #4]
     588:	0149      	lsls	r1, r1, #5
     58a:	6812      	ldr	r2, [r2, #0]
     58c:	0ed2      	lsrs	r2, r2, #27
     58e:	430a      	orrs	r2, r1
     590:	b2d2      	uxtb	r2, r2
			) |
     592:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
     594:	4642      	mov	r2, r8
     596:	8513      	strh	r3, [r2, #40]	; 0x28
	return STATUS_OK;
     598:	2000      	movs	r0, #0
     59a:	e67c      	b.n	296 <adc_init+0x26>
     59c:	40000400 	.word	0x40000400
     5a0:	40000800 	.word	0x40000800
     5a4:	200000dc 	.word	0x200000dc
     5a8:	00001769 	.word	0x00001769
     5ac:	000016dd 	.word	0x000016dd
     5b0:	00003119 	.word	0x00003119
     5b4:	000042c4 	.word	0x000042c4
     5b8:	00001861 	.word	0x00001861
     5bc:	000041f0 	.word	0x000041f0
     5c0:	00000fff 	.word	0x00000fff
     5c4:	00806024 	.word	0x00806024
     5c8:	00806020 	.word	0x00806020
		switch (resolution) {
     5cc:	2c00      	cmp	r4, #0
     5ce:	d000      	beq.n	5d2 <adc_init+0x362>
     5d0:	e77f      	b.n	4d2 <adc_init+0x262>
			if (config->differential_mode &&
     5d2:	7cf2      	ldrb	r2, [r6, #19]
     5d4:	2a00      	cmp	r2, #0
     5d6:	d00f      	beq.n	5f8 <adc_init+0x388>
					(config->window.window_lower_value > 2047 ||
     5d8:	69f2      	ldr	r2, [r6, #28]
     5da:	2180      	movs	r1, #128	; 0x80
     5dc:	0109      	lsls	r1, r1, #4
     5de:	468c      	mov	ip, r1
     5e0:	4462      	add	r2, ip
			if (config->differential_mode &&
     5e2:	492a      	ldr	r1, [pc, #168]	; (68c <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
     5e4:	2017      	movs	r0, #23
			if (config->differential_mode &&
     5e6:	428a      	cmp	r2, r1
     5e8:	d900      	bls.n	5ec <adc_init+0x37c>
     5ea:	e654      	b.n	296 <adc_init+0x26>
					config->window.window_lower_value < -2048 ||
     5ec:	6a32      	ldr	r2, [r6, #32]
     5ee:	4462      	add	r2, ip
     5f0:	4926      	ldr	r1, [pc, #152]	; (68c <adc_init+0x41c>)
     5f2:	428a      	cmp	r2, r1
     5f4:	d900      	bls.n	5f8 <adc_init+0x388>
     5f6:	e64e      	b.n	296 <adc_init+0x26>
			} else if (config->window.window_lower_value > 4095 ||
     5f8:	4a24      	ldr	r2, [pc, #144]	; (68c <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
     5fa:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
     5fc:	69f1      	ldr	r1, [r6, #28]
     5fe:	4291      	cmp	r1, r2
     600:	dd00      	ble.n	604 <adc_init+0x394>
     602:	e648      	b.n	296 <adc_init+0x26>
     604:	6a31      	ldr	r1, [r6, #32]
     606:	4291      	cmp	r1, r2
     608:	dd00      	ble.n	60c <adc_init+0x39c>
     60a:	e644      	b.n	296 <adc_init+0x26>
     60c:	e761      	b.n	4d2 <adc_init+0x262>
			if (config->differential_mode &&
     60e:	7cf2      	ldrb	r2, [r6, #19]
     610:	2a00      	cmp	r2, #0
     612:	d00f      	beq.n	634 <adc_init+0x3c4>
					(config->window.window_lower_value > 511 ||
     614:	69f2      	ldr	r2, [r6, #28]
     616:	2180      	movs	r1, #128	; 0x80
     618:	0089      	lsls	r1, r1, #2
     61a:	468c      	mov	ip, r1
     61c:	4462      	add	r2, ip
			if (config->differential_mode &&
     61e:	491c      	ldr	r1, [pc, #112]	; (690 <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
     620:	2017      	movs	r0, #23
			if (config->differential_mode &&
     622:	428a      	cmp	r2, r1
     624:	d900      	bls.n	628 <adc_init+0x3b8>
     626:	e636      	b.n	296 <adc_init+0x26>
					config->window.window_lower_value < -512 ||
     628:	6a32      	ldr	r2, [r6, #32]
     62a:	4462      	add	r2, ip
     62c:	4918      	ldr	r1, [pc, #96]	; (690 <adc_init+0x420>)
     62e:	428a      	cmp	r2, r1
     630:	d900      	bls.n	634 <adc_init+0x3c4>
     632:	e630      	b.n	296 <adc_init+0x26>
			} else if (config->window.window_lower_value > 1023 ||
     634:	4a16      	ldr	r2, [pc, #88]	; (690 <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
     636:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
     638:	69f1      	ldr	r1, [r6, #28]
     63a:	4291      	cmp	r1, r2
     63c:	dd00      	ble.n	640 <adc_init+0x3d0>
     63e:	e62a      	b.n	296 <adc_init+0x26>
     640:	6a31      	ldr	r1, [r6, #32]
     642:	4291      	cmp	r1, r2
     644:	dd00      	ble.n	648 <adc_init+0x3d8>
     646:	e626      	b.n	296 <adc_init+0x26>
     648:	e743      	b.n	4d2 <adc_init+0x262>
			if (config->differential_mode &&
     64a:	7cf2      	ldrb	r2, [r6, #19]
     64c:	2a00      	cmp	r2, #0
     64e:	d00f      	beq.n	670 <adc_init+0x400>
					(config->window.window_lower_value > 32767 ||
     650:	69f2      	ldr	r2, [r6, #28]
     652:	2180      	movs	r1, #128	; 0x80
     654:	0209      	lsls	r1, r1, #8
     656:	468c      	mov	ip, r1
     658:	4462      	add	r2, ip
			if (config->differential_mode &&
     65a:	490e      	ldr	r1, [pc, #56]	; (694 <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
     65c:	2017      	movs	r0, #23
			if (config->differential_mode &&
     65e:	428a      	cmp	r2, r1
     660:	d900      	bls.n	664 <adc_init+0x3f4>
     662:	e618      	b.n	296 <adc_init+0x26>
					config->window.window_lower_value < -32768 ||
     664:	6a32      	ldr	r2, [r6, #32]
     666:	4462      	add	r2, ip
     668:	490a      	ldr	r1, [pc, #40]	; (694 <adc_init+0x424>)
     66a:	428a      	cmp	r2, r1
     66c:	d900      	bls.n	670 <adc_init+0x400>
     66e:	e612      	b.n	296 <adc_init+0x26>
			} else if (config->window.window_lower_value > 65535 ||
     670:	4a08      	ldr	r2, [pc, #32]	; (694 <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
     672:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
     674:	69f1      	ldr	r1, [r6, #28]
     676:	4291      	cmp	r1, r2
     678:	dd00      	ble.n	67c <adc_init+0x40c>
     67a:	e60c      	b.n	296 <adc_init+0x26>
     67c:	6a31      	ldr	r1, [r6, #32]
     67e:	4291      	cmp	r1, r2
     680:	dd00      	ble.n	684 <adc_init+0x414>
     682:	e608      	b.n	296 <adc_init+0x26>
     684:	e725      	b.n	4d2 <adc_init+0x262>
		return STATUS_ERR_INVALID_ARG;
     686:	2017      	movs	r0, #23
     688:	e605      	b.n	296 <adc_init+0x26>
     68a:	46c0      	nop			; (mov r8, r8)
     68c:	00000fff 	.word	0x00000fff
     690:	000003ff 	.word	0x000003ff
     694:	0000ffff 	.word	0x0000ffff

00000698 <ADC_Handler>:
	}
}

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
     698:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
     69a:	4b2f      	ldr	r3, [pc, #188]	; (758 <ADC_Handler+0xc0>)
     69c:	681d      	ldr	r5, [r3, #0]
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
     69e:	682b      	ldr	r3, [r5, #0]
     6a0:	7e1a      	ldrb	r2, [r3, #24]
     6a2:	7ddc      	ldrb	r4, [r3, #23]
     6a4:	4014      	ands	r4, r2
	if (flags & ADC_INTFLAG_RESRDY) {
     6a6:	07e2      	lsls	r2, r4, #31
     6a8:	d416      	bmi.n	6d8 <ADC_Handler+0x40>
	if (flags & ADC_INTFLAG_WINMON) {
     6aa:	0763      	lsls	r3, r4, #29
     6ac:	d508      	bpl.n	6c0 <ADC_Handler+0x28>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     6ae:	2304      	movs	r3, #4
     6b0:	682a      	ldr	r2, [r5, #0]
     6b2:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     6b4:	7eeb      	ldrb	r3, [r5, #27]
     6b6:	079b      	lsls	r3, r3, #30
     6b8:	d502      	bpl.n	6c0 <ADC_Handler+0x28>
     6ba:	7eab      	ldrb	r3, [r5, #26]
     6bc:	079b      	lsls	r3, r3, #30
     6be:	d442      	bmi.n	746 <ADC_Handler+0xae>
	if (flags & ADC_INTFLAG_OVERRUN) {
     6c0:	07a3      	lsls	r3, r4, #30
     6c2:	d508      	bpl.n	6d6 <ADC_Handler+0x3e>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     6c4:	2302      	movs	r3, #2
     6c6:	682a      	ldr	r2, [r5, #0]
     6c8:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     6ca:	7eeb      	ldrb	r3, [r5, #27]
     6cc:	075b      	lsls	r3, r3, #29
     6ce:	d502      	bpl.n	6d6 <ADC_Handler+0x3e>
     6d0:	7eab      	ldrb	r3, [r5, #26]
     6d2:	075b      	lsls	r3, r3, #29
     6d4:	d43b      	bmi.n	74e <ADC_Handler+0xb6>
	_adc_interrupt_handler(0);
}
     6d6:	bd70      	pop	{r4, r5, r6, pc}
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     6d8:	2201      	movs	r2, #1
     6da:	761a      	strb	r2, [r3, #24]
	Adc *const adc_module = module_inst->hw;
     6dc:	682a      	ldr	r2, [r5, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     6de:	7e53      	ldrb	r3, [r2, #25]
		while (adc_is_syncing(module)) {
     6e0:	b25b      	sxtb	r3, r3
     6e2:	2b00      	cmp	r3, #0
     6e4:	dbfb      	blt.n	6de <ADC_Handler+0x46>
		*(module->job_buffer++) = module->hw->RESULT.reg;
     6e6:	6969      	ldr	r1, [r5, #20]
     6e8:	1c8b      	adds	r3, r1, #2
     6ea:	616b      	str	r3, [r5, #20]
     6ec:	8b53      	ldrh	r3, [r2, #26]
     6ee:	b29b      	uxth	r3, r3
     6f0:	800b      	strh	r3, [r1, #0]
		if (--module->remaining_conversions > 0) {
     6f2:	8b2b      	ldrh	r3, [r5, #24]
     6f4:	3b01      	subs	r3, #1
     6f6:	b29b      	uxth	r3, r3
     6f8:	832b      	strh	r3, [r5, #24]
     6fa:	2b00      	cmp	r3, #0
     6fc:	d011      	beq.n	722 <ADC_Handler+0x8a>
			if (module->software_trigger == true) {
     6fe:	7f6b      	ldrb	r3, [r5, #29]
     700:	2b00      	cmp	r3, #0
     702:	d0d2      	beq.n	6aa <ADC_Handler+0x12>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     704:	682a      	ldr	r2, [r5, #0]
     706:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     708:	b25b      	sxtb	r3, r3
     70a:	2b00      	cmp	r3, #0
     70c:	dbfb      	blt.n	706 <ADC_Handler+0x6e>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     70e:	7b13      	ldrb	r3, [r2, #12]
     710:	2102      	movs	r1, #2
     712:	430b      	orrs	r3, r1
     714:	7313      	strb	r3, [r2, #12]
	Adc *const adc_module = module_inst->hw;
     716:	682a      	ldr	r2, [r5, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     718:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     71a:	b25b      	sxtb	r3, r3
     71c:	2b00      	cmp	r3, #0
     71e:	dbfb      	blt.n	718 <ADC_Handler+0x80>
     720:	e7c3      	b.n	6aa <ADC_Handler+0x12>
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     722:	2301      	movs	r3, #1
     724:	682a      	ldr	r2, [r5, #0]
     726:	7593      	strb	r3, [r2, #22]
			if (module->job_status == STATUS_BUSY) {
     728:	7f2b      	ldrb	r3, [r5, #28]
     72a:	2b05      	cmp	r3, #5
     72c:	d1bd      	bne.n	6aa <ADC_Handler+0x12>
				module->job_status = STATUS_OK;
     72e:	2300      	movs	r3, #0
     730:	772b      	strb	r3, [r5, #28]
				if ((module->enabled_callback_mask &
     732:	7eeb      	ldrb	r3, [r5, #27]
     734:	07db      	lsls	r3, r3, #31
     736:	d5b8      	bpl.n	6aa <ADC_Handler+0x12>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
     738:	7eab      	ldrb	r3, [r5, #26]
     73a:	07db      	lsls	r3, r3, #31
     73c:	d5b5      	bpl.n	6aa <ADC_Handler+0x12>
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     73e:	0028      	movs	r0, r5
     740:	68ab      	ldr	r3, [r5, #8]
     742:	4798      	blx	r3
     744:	e7b1      	b.n	6aa <ADC_Handler+0x12>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     746:	0028      	movs	r0, r5
     748:	68eb      	ldr	r3, [r5, #12]
     74a:	4798      	blx	r3
     74c:	e7b8      	b.n	6c0 <ADC_Handler+0x28>
			(module->callback[ADC_CALLBACK_ERROR])(module);
     74e:	692b      	ldr	r3, [r5, #16]
     750:	0028      	movs	r0, r5
     752:	4798      	blx	r3
}
     754:	e7bf      	b.n	6d6 <ADC_Handler+0x3e>
     756:	46c0      	nop			; (mov r8, r8)
     758:	200000dc 	.word	0x200000dc

0000075c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     75c:	b500      	push	{lr}
     75e:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     760:	ab01      	add	r3, sp, #4
     762:	2280      	movs	r2, #128	; 0x80
     764:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     766:	780a      	ldrb	r2, [r1, #0]
     768:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     76a:	784a      	ldrb	r2, [r1, #1]
     76c:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     76e:	788a      	ldrb	r2, [r1, #2]
     770:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     772:	0019      	movs	r1, r3
     774:	4b01      	ldr	r3, [pc, #4]	; (77c <port_pin_set_config+0x20>)
     776:	4798      	blx	r3
}
     778:	b003      	add	sp, #12
     77a:	bd00      	pop	{pc}
     77c:	00001861 	.word	0x00001861

00000780 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     780:	b5f0      	push	{r4, r5, r6, r7, lr}
     782:	46de      	mov	lr, fp
     784:	4657      	mov	r7, sl
     786:	464e      	mov	r6, r9
     788:	4645      	mov	r5, r8
     78a:	b5e0      	push	{r5, r6, r7, lr}
     78c:	b087      	sub	sp, #28
     78e:	4680      	mov	r8, r0
     790:	9104      	str	r1, [sp, #16]
     792:	0016      	movs	r6, r2
     794:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     796:	2200      	movs	r2, #0
     798:	2300      	movs	r3, #0
     79a:	2100      	movs	r1, #0
     79c:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     79e:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     7a0:	2001      	movs	r0, #1
     7a2:	0021      	movs	r1, r4
     7a4:	9600      	str	r6, [sp, #0]
     7a6:	9701      	str	r7, [sp, #4]
     7a8:	465c      	mov	r4, fp
     7aa:	9403      	str	r4, [sp, #12]
     7ac:	4644      	mov	r4, r8
     7ae:	9405      	str	r4, [sp, #20]
     7b0:	e013      	b.n	7da <long_division+0x5a>
     7b2:	2420      	movs	r4, #32
     7b4:	1a64      	subs	r4, r4, r1
     7b6:	0005      	movs	r5, r0
     7b8:	40e5      	lsrs	r5, r4
     7ba:	46a8      	mov	r8, r5
     7bc:	e014      	b.n	7e8 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     7be:	9c00      	ldr	r4, [sp, #0]
     7c0:	9d01      	ldr	r5, [sp, #4]
     7c2:	1b12      	subs	r2, r2, r4
     7c4:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     7c6:	465c      	mov	r4, fp
     7c8:	464d      	mov	r5, r9
     7ca:	432c      	orrs	r4, r5
     7cc:	46a3      	mov	fp, r4
     7ce:	9c03      	ldr	r4, [sp, #12]
     7d0:	4645      	mov	r5, r8
     7d2:	432c      	orrs	r4, r5
     7d4:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     7d6:	3901      	subs	r1, #1
     7d8:	d325      	bcc.n	826 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     7da:	2420      	movs	r4, #32
     7dc:	4264      	negs	r4, r4
     7de:	190c      	adds	r4, r1, r4
     7e0:	d4e7      	bmi.n	7b2 <long_division+0x32>
     7e2:	0005      	movs	r5, r0
     7e4:	40a5      	lsls	r5, r4
     7e6:	46a8      	mov	r8, r5
     7e8:	0004      	movs	r4, r0
     7ea:	408c      	lsls	r4, r1
     7ec:	46a1      	mov	r9, r4
		r = r << 1;
     7ee:	1892      	adds	r2, r2, r2
     7f0:	415b      	adcs	r3, r3
     7f2:	0014      	movs	r4, r2
     7f4:	001d      	movs	r5, r3
		if (n & bit_shift) {
     7f6:	9e05      	ldr	r6, [sp, #20]
     7f8:	464f      	mov	r7, r9
     7fa:	403e      	ands	r6, r7
     7fc:	46b4      	mov	ip, r6
     7fe:	9e04      	ldr	r6, [sp, #16]
     800:	4647      	mov	r7, r8
     802:	403e      	ands	r6, r7
     804:	46b2      	mov	sl, r6
     806:	4666      	mov	r6, ip
     808:	4657      	mov	r7, sl
     80a:	433e      	orrs	r6, r7
     80c:	d003      	beq.n	816 <long_division+0x96>
			r |= 0x01;
     80e:	0006      	movs	r6, r0
     810:	4326      	orrs	r6, r4
     812:	0032      	movs	r2, r6
     814:	002b      	movs	r3, r5
		if (r >= d) {
     816:	9c00      	ldr	r4, [sp, #0]
     818:	9d01      	ldr	r5, [sp, #4]
     81a:	429d      	cmp	r5, r3
     81c:	d8db      	bhi.n	7d6 <long_division+0x56>
     81e:	d1ce      	bne.n	7be <long_division+0x3e>
     820:	4294      	cmp	r4, r2
     822:	d8d8      	bhi.n	7d6 <long_division+0x56>
     824:	e7cb      	b.n	7be <long_division+0x3e>
     826:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     828:	4658      	mov	r0, fp
     82a:	0019      	movs	r1, r3
     82c:	b007      	add	sp, #28
     82e:	bc3c      	pop	{r2, r3, r4, r5}
     830:	4690      	mov	r8, r2
     832:	4699      	mov	r9, r3
     834:	46a2      	mov	sl, r4
     836:	46ab      	mov	fp, r5
     838:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000083a <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     83a:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     83c:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     83e:	2340      	movs	r3, #64	; 0x40
     840:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     842:	4281      	cmp	r1, r0
     844:	d202      	bcs.n	84c <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     846:	0018      	movs	r0, r3
     848:	bd10      	pop	{r4, pc}
		baud_calculated++;
     84a:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     84c:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     84e:	1c63      	adds	r3, r4, #1
     850:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     852:	4288      	cmp	r0, r1
     854:	d9f9      	bls.n	84a <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     856:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     858:	2cff      	cmp	r4, #255	; 0xff
     85a:	d8f4      	bhi.n	846 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     85c:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     85e:	2300      	movs	r3, #0
     860:	e7f1      	b.n	846 <_sercom_get_sync_baud_val+0xc>
	...

00000864 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     864:	b5f0      	push	{r4, r5, r6, r7, lr}
     866:	b083      	sub	sp, #12
     868:	000f      	movs	r7, r1
     86a:	0016      	movs	r6, r2
     86c:	aa08      	add	r2, sp, #32
     86e:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     870:	0004      	movs	r4, r0
     872:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     874:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     876:	42bc      	cmp	r4, r7
     878:	d902      	bls.n	880 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     87a:	0010      	movs	r0, r2
     87c:	b003      	add	sp, #12
     87e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     880:	2b00      	cmp	r3, #0
     882:	d114      	bne.n	8ae <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     884:	0002      	movs	r2, r0
     886:	0008      	movs	r0, r1
     888:	2100      	movs	r1, #0
     88a:	4c19      	ldr	r4, [pc, #100]	; (8f0 <_sercom_get_async_baud_val+0x8c>)
     88c:	47a0      	blx	r4
     88e:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     890:	003a      	movs	r2, r7
     892:	2300      	movs	r3, #0
     894:	2000      	movs	r0, #0
     896:	4c17      	ldr	r4, [pc, #92]	; (8f4 <_sercom_get_async_baud_val+0x90>)
     898:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     89a:	2200      	movs	r2, #0
     89c:	2301      	movs	r3, #1
     89e:	1a12      	subs	r2, r2, r0
     8a0:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     8a2:	0c12      	lsrs	r2, r2, #16
     8a4:	041b      	lsls	r3, r3, #16
     8a6:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     8a8:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     8aa:	2200      	movs	r2, #0
     8ac:	e7e5      	b.n	87a <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     8ae:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     8b0:	2b01      	cmp	r3, #1
     8b2:	d1f9      	bne.n	8a8 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     8b4:	000a      	movs	r2, r1
     8b6:	2300      	movs	r3, #0
     8b8:	2100      	movs	r1, #0
     8ba:	4c0d      	ldr	r4, [pc, #52]	; (8f0 <_sercom_get_async_baud_val+0x8c>)
     8bc:	47a0      	blx	r4
     8be:	0002      	movs	r2, r0
     8c0:	000b      	movs	r3, r1
     8c2:	9200      	str	r2, [sp, #0]
     8c4:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     8c6:	0038      	movs	r0, r7
     8c8:	2100      	movs	r1, #0
     8ca:	4c0a      	ldr	r4, [pc, #40]	; (8f4 <_sercom_get_async_baud_val+0x90>)
     8cc:	47a0      	blx	r4
     8ce:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     8d0:	2380      	movs	r3, #128	; 0x80
     8d2:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     8d4:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     8d6:	4298      	cmp	r0, r3
     8d8:	d8cf      	bhi.n	87a <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     8da:	0f79      	lsrs	r1, r7, #29
     8dc:	00f8      	lsls	r0, r7, #3
     8de:	9a00      	ldr	r2, [sp, #0]
     8e0:	9b01      	ldr	r3, [sp, #4]
     8e2:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     8e4:	00ea      	lsls	r2, r5, #3
     8e6:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     8e8:	b2d2      	uxtb	r2, r2
     8ea:	0352      	lsls	r2, r2, #13
     8ec:	432a      	orrs	r2, r5
     8ee:	e7db      	b.n	8a8 <_sercom_get_async_baud_val+0x44>
     8f0:	00003055 	.word	0x00003055
     8f4:	00000781 	.word	0x00000781

000008f8 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     8f8:	b510      	push	{r4, lr}
     8fa:	b082      	sub	sp, #8
     8fc:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     8fe:	4b0e      	ldr	r3, [pc, #56]	; (938 <sercom_set_gclk_generator+0x40>)
     900:	781b      	ldrb	r3, [r3, #0]
     902:	2b00      	cmp	r3, #0
     904:	d007      	beq.n	916 <sercom_set_gclk_generator+0x1e>
     906:	2900      	cmp	r1, #0
     908:	d105      	bne.n	916 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     90a:	4b0b      	ldr	r3, [pc, #44]	; (938 <sercom_set_gclk_generator+0x40>)
     90c:	785b      	ldrb	r3, [r3, #1]
     90e:	4283      	cmp	r3, r0
     910:	d010      	beq.n	934 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     912:	201d      	movs	r0, #29
     914:	e00c      	b.n	930 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     916:	a901      	add	r1, sp, #4
     918:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     91a:	2013      	movs	r0, #19
     91c:	4b07      	ldr	r3, [pc, #28]	; (93c <sercom_set_gclk_generator+0x44>)
     91e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     920:	2013      	movs	r0, #19
     922:	4b07      	ldr	r3, [pc, #28]	; (940 <sercom_set_gclk_generator+0x48>)
     924:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     926:	4b04      	ldr	r3, [pc, #16]	; (938 <sercom_set_gclk_generator+0x40>)
     928:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     92a:	2201      	movs	r2, #1
     92c:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     92e:	2000      	movs	r0, #0
}
     930:	b002      	add	sp, #8
     932:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     934:	2000      	movs	r0, #0
     936:	e7fb      	b.n	930 <sercom_set_gclk_generator+0x38>
     938:	20000098 	.word	0x20000098
     93c:	00001769 	.word	0x00001769
     940:	000016dd 	.word	0x000016dd

00000944 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     944:	4b40      	ldr	r3, [pc, #256]	; (a48 <_sercom_get_default_pad+0x104>)
     946:	4298      	cmp	r0, r3
     948:	d031      	beq.n	9ae <_sercom_get_default_pad+0x6a>
     94a:	d90a      	bls.n	962 <_sercom_get_default_pad+0x1e>
     94c:	4b3f      	ldr	r3, [pc, #252]	; (a4c <_sercom_get_default_pad+0x108>)
     94e:	4298      	cmp	r0, r3
     950:	d04d      	beq.n	9ee <_sercom_get_default_pad+0xaa>
     952:	4b3f      	ldr	r3, [pc, #252]	; (a50 <_sercom_get_default_pad+0x10c>)
     954:	4298      	cmp	r0, r3
     956:	d05a      	beq.n	a0e <_sercom_get_default_pad+0xca>
     958:	4b3e      	ldr	r3, [pc, #248]	; (a54 <_sercom_get_default_pad+0x110>)
     95a:	4298      	cmp	r0, r3
     95c:	d037      	beq.n	9ce <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     95e:	2000      	movs	r0, #0
}
     960:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     962:	4b3d      	ldr	r3, [pc, #244]	; (a58 <_sercom_get_default_pad+0x114>)
     964:	4298      	cmp	r0, r3
     966:	d00c      	beq.n	982 <_sercom_get_default_pad+0x3e>
     968:	4b3c      	ldr	r3, [pc, #240]	; (a5c <_sercom_get_default_pad+0x118>)
     96a:	4298      	cmp	r0, r3
     96c:	d1f7      	bne.n	95e <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     96e:	2901      	cmp	r1, #1
     970:	d017      	beq.n	9a2 <_sercom_get_default_pad+0x5e>
     972:	2900      	cmp	r1, #0
     974:	d05d      	beq.n	a32 <_sercom_get_default_pad+0xee>
     976:	2902      	cmp	r1, #2
     978:	d015      	beq.n	9a6 <_sercom_get_default_pad+0x62>
     97a:	2903      	cmp	r1, #3
     97c:	d015      	beq.n	9aa <_sercom_get_default_pad+0x66>
	return 0;
     97e:	2000      	movs	r0, #0
     980:	e7ee      	b.n	960 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     982:	2901      	cmp	r1, #1
     984:	d007      	beq.n	996 <_sercom_get_default_pad+0x52>
     986:	2900      	cmp	r1, #0
     988:	d051      	beq.n	a2e <_sercom_get_default_pad+0xea>
     98a:	2902      	cmp	r1, #2
     98c:	d005      	beq.n	99a <_sercom_get_default_pad+0x56>
     98e:	2903      	cmp	r1, #3
     990:	d005      	beq.n	99e <_sercom_get_default_pad+0x5a>
	return 0;
     992:	2000      	movs	r0, #0
     994:	e7e4      	b.n	960 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     996:	4832      	ldr	r0, [pc, #200]	; (a60 <_sercom_get_default_pad+0x11c>)
     998:	e7e2      	b.n	960 <_sercom_get_default_pad+0x1c>
     99a:	4832      	ldr	r0, [pc, #200]	; (a64 <_sercom_get_default_pad+0x120>)
     99c:	e7e0      	b.n	960 <_sercom_get_default_pad+0x1c>
     99e:	4832      	ldr	r0, [pc, #200]	; (a68 <_sercom_get_default_pad+0x124>)
     9a0:	e7de      	b.n	960 <_sercom_get_default_pad+0x1c>
     9a2:	4832      	ldr	r0, [pc, #200]	; (a6c <_sercom_get_default_pad+0x128>)
     9a4:	e7dc      	b.n	960 <_sercom_get_default_pad+0x1c>
     9a6:	4832      	ldr	r0, [pc, #200]	; (a70 <_sercom_get_default_pad+0x12c>)
     9a8:	e7da      	b.n	960 <_sercom_get_default_pad+0x1c>
     9aa:	4832      	ldr	r0, [pc, #200]	; (a74 <_sercom_get_default_pad+0x130>)
     9ac:	e7d8      	b.n	960 <_sercom_get_default_pad+0x1c>
     9ae:	2901      	cmp	r1, #1
     9b0:	d007      	beq.n	9c2 <_sercom_get_default_pad+0x7e>
     9b2:	2900      	cmp	r1, #0
     9b4:	d03f      	beq.n	a36 <_sercom_get_default_pad+0xf2>
     9b6:	2902      	cmp	r1, #2
     9b8:	d005      	beq.n	9c6 <_sercom_get_default_pad+0x82>
     9ba:	2903      	cmp	r1, #3
     9bc:	d005      	beq.n	9ca <_sercom_get_default_pad+0x86>
	return 0;
     9be:	2000      	movs	r0, #0
     9c0:	e7ce      	b.n	960 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     9c2:	482d      	ldr	r0, [pc, #180]	; (a78 <_sercom_get_default_pad+0x134>)
     9c4:	e7cc      	b.n	960 <_sercom_get_default_pad+0x1c>
     9c6:	482d      	ldr	r0, [pc, #180]	; (a7c <_sercom_get_default_pad+0x138>)
     9c8:	e7ca      	b.n	960 <_sercom_get_default_pad+0x1c>
     9ca:	482d      	ldr	r0, [pc, #180]	; (a80 <_sercom_get_default_pad+0x13c>)
     9cc:	e7c8      	b.n	960 <_sercom_get_default_pad+0x1c>
     9ce:	2901      	cmp	r1, #1
     9d0:	d007      	beq.n	9e2 <_sercom_get_default_pad+0x9e>
     9d2:	2900      	cmp	r1, #0
     9d4:	d031      	beq.n	a3a <_sercom_get_default_pad+0xf6>
     9d6:	2902      	cmp	r1, #2
     9d8:	d005      	beq.n	9e6 <_sercom_get_default_pad+0xa2>
     9da:	2903      	cmp	r1, #3
     9dc:	d005      	beq.n	9ea <_sercom_get_default_pad+0xa6>
	return 0;
     9de:	2000      	movs	r0, #0
     9e0:	e7be      	b.n	960 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     9e2:	4828      	ldr	r0, [pc, #160]	; (a84 <_sercom_get_default_pad+0x140>)
     9e4:	e7bc      	b.n	960 <_sercom_get_default_pad+0x1c>
     9e6:	4828      	ldr	r0, [pc, #160]	; (a88 <_sercom_get_default_pad+0x144>)
     9e8:	e7ba      	b.n	960 <_sercom_get_default_pad+0x1c>
     9ea:	4828      	ldr	r0, [pc, #160]	; (a8c <_sercom_get_default_pad+0x148>)
     9ec:	e7b8      	b.n	960 <_sercom_get_default_pad+0x1c>
     9ee:	2901      	cmp	r1, #1
     9f0:	d007      	beq.n	a02 <_sercom_get_default_pad+0xbe>
     9f2:	2900      	cmp	r1, #0
     9f4:	d023      	beq.n	a3e <_sercom_get_default_pad+0xfa>
     9f6:	2902      	cmp	r1, #2
     9f8:	d005      	beq.n	a06 <_sercom_get_default_pad+0xc2>
     9fa:	2903      	cmp	r1, #3
     9fc:	d005      	beq.n	a0a <_sercom_get_default_pad+0xc6>
	return 0;
     9fe:	2000      	movs	r0, #0
     a00:	e7ae      	b.n	960 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     a02:	4823      	ldr	r0, [pc, #140]	; (a90 <_sercom_get_default_pad+0x14c>)
     a04:	e7ac      	b.n	960 <_sercom_get_default_pad+0x1c>
     a06:	4823      	ldr	r0, [pc, #140]	; (a94 <_sercom_get_default_pad+0x150>)
     a08:	e7aa      	b.n	960 <_sercom_get_default_pad+0x1c>
     a0a:	4823      	ldr	r0, [pc, #140]	; (a98 <_sercom_get_default_pad+0x154>)
     a0c:	e7a8      	b.n	960 <_sercom_get_default_pad+0x1c>
     a0e:	2901      	cmp	r1, #1
     a10:	d007      	beq.n	a22 <_sercom_get_default_pad+0xde>
     a12:	2900      	cmp	r1, #0
     a14:	d015      	beq.n	a42 <_sercom_get_default_pad+0xfe>
     a16:	2902      	cmp	r1, #2
     a18:	d005      	beq.n	a26 <_sercom_get_default_pad+0xe2>
     a1a:	2903      	cmp	r1, #3
     a1c:	d005      	beq.n	a2a <_sercom_get_default_pad+0xe6>
	return 0;
     a1e:	2000      	movs	r0, #0
     a20:	e79e      	b.n	960 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     a22:	481e      	ldr	r0, [pc, #120]	; (a9c <_sercom_get_default_pad+0x158>)
     a24:	e79c      	b.n	960 <_sercom_get_default_pad+0x1c>
     a26:	481e      	ldr	r0, [pc, #120]	; (aa0 <_sercom_get_default_pad+0x15c>)
     a28:	e79a      	b.n	960 <_sercom_get_default_pad+0x1c>
     a2a:	481e      	ldr	r0, [pc, #120]	; (aa4 <_sercom_get_default_pad+0x160>)
     a2c:	e798      	b.n	960 <_sercom_get_default_pad+0x1c>
     a2e:	481e      	ldr	r0, [pc, #120]	; (aa8 <_sercom_get_default_pad+0x164>)
     a30:	e796      	b.n	960 <_sercom_get_default_pad+0x1c>
     a32:	2003      	movs	r0, #3
     a34:	e794      	b.n	960 <_sercom_get_default_pad+0x1c>
     a36:	481d      	ldr	r0, [pc, #116]	; (aac <_sercom_get_default_pad+0x168>)
     a38:	e792      	b.n	960 <_sercom_get_default_pad+0x1c>
     a3a:	481d      	ldr	r0, [pc, #116]	; (ab0 <_sercom_get_default_pad+0x16c>)
     a3c:	e790      	b.n	960 <_sercom_get_default_pad+0x1c>
     a3e:	481d      	ldr	r0, [pc, #116]	; (ab4 <_sercom_get_default_pad+0x170>)
     a40:	e78e      	b.n	960 <_sercom_get_default_pad+0x1c>
     a42:	481d      	ldr	r0, [pc, #116]	; (ab8 <_sercom_get_default_pad+0x174>)
     a44:	e78c      	b.n	960 <_sercom_get_default_pad+0x1c>
     a46:	46c0      	nop			; (mov r8, r8)
     a48:	42001000 	.word	0x42001000
     a4c:	42001800 	.word	0x42001800
     a50:	42001c00 	.word	0x42001c00
     a54:	42001400 	.word	0x42001400
     a58:	42000800 	.word	0x42000800
     a5c:	42000c00 	.word	0x42000c00
     a60:	00050003 	.word	0x00050003
     a64:	00060003 	.word	0x00060003
     a68:	00070003 	.word	0x00070003
     a6c:	00010003 	.word	0x00010003
     a70:	001e0003 	.word	0x001e0003
     a74:	001f0003 	.word	0x001f0003
     a78:	00090003 	.word	0x00090003
     a7c:	000a0003 	.word	0x000a0003
     a80:	000b0003 	.word	0x000b0003
     a84:	00110003 	.word	0x00110003
     a88:	00120003 	.word	0x00120003
     a8c:	00130003 	.word	0x00130003
     a90:	000d0003 	.word	0x000d0003
     a94:	000e0003 	.word	0x000e0003
     a98:	000f0003 	.word	0x000f0003
     a9c:	00170003 	.word	0x00170003
     aa0:	00180003 	.word	0x00180003
     aa4:	00190003 	.word	0x00190003
     aa8:	00040003 	.word	0x00040003
     aac:	00080003 	.word	0x00080003
     ab0:	00100003 	.word	0x00100003
     ab4:	000c0003 	.word	0x000c0003
     ab8:	00160003 	.word	0x00160003

00000abc <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     abc:	b530      	push	{r4, r5, lr}
     abe:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     ac0:	4b0b      	ldr	r3, [pc, #44]	; (af0 <_sercom_get_sercom_inst_index+0x34>)
     ac2:	466a      	mov	r2, sp
     ac4:	cb32      	ldmia	r3!, {r1, r4, r5}
     ac6:	c232      	stmia	r2!, {r1, r4, r5}
     ac8:	cb32      	ldmia	r3!, {r1, r4, r5}
     aca:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     acc:	9b00      	ldr	r3, [sp, #0]
     ace:	4283      	cmp	r3, r0
     ad0:	d00b      	beq.n	aea <_sercom_get_sercom_inst_index+0x2e>
     ad2:	2301      	movs	r3, #1
     ad4:	009a      	lsls	r2, r3, #2
     ad6:	4669      	mov	r1, sp
     ad8:	5852      	ldr	r2, [r2, r1]
     ada:	4282      	cmp	r2, r0
     adc:	d006      	beq.n	aec <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     ade:	3301      	adds	r3, #1
     ae0:	2b06      	cmp	r3, #6
     ae2:	d1f7      	bne.n	ad4 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     ae4:	2000      	movs	r0, #0
}
     ae6:	b007      	add	sp, #28
     ae8:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     aea:	2300      	movs	r3, #0
			return i;
     aec:	b2d8      	uxtb	r0, r3
     aee:	e7fa      	b.n	ae6 <_sercom_get_sercom_inst_index+0x2a>
     af0:	00004314 	.word	0x00004314

00000af4 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     af4:	4770      	bx	lr
	...

00000af8 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     af8:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     afa:	4b0a      	ldr	r3, [pc, #40]	; (b24 <_sercom_set_handler+0x2c>)
     afc:	781b      	ldrb	r3, [r3, #0]
     afe:	2b00      	cmp	r3, #0
     b00:	d10c      	bne.n	b1c <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     b02:	4f09      	ldr	r7, [pc, #36]	; (b28 <_sercom_set_handler+0x30>)
     b04:	4e09      	ldr	r6, [pc, #36]	; (b2c <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     b06:	4d0a      	ldr	r5, [pc, #40]	; (b30 <_sercom_set_handler+0x38>)
     b08:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     b0a:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     b0c:	195a      	adds	r2, r3, r5
     b0e:	6014      	str	r4, [r2, #0]
     b10:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     b12:	2b18      	cmp	r3, #24
     b14:	d1f9      	bne.n	b0a <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
     b16:	2201      	movs	r2, #1
     b18:	4b02      	ldr	r3, [pc, #8]	; (b24 <_sercom_set_handler+0x2c>)
     b1a:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     b1c:	0080      	lsls	r0, r0, #2
     b1e:	4b02      	ldr	r3, [pc, #8]	; (b28 <_sercom_set_handler+0x30>)
     b20:	50c1      	str	r1, [r0, r3]
}
     b22:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b24:	2000009a 	.word	0x2000009a
     b28:	2000009c 	.word	0x2000009c
     b2c:	00000af5 	.word	0x00000af5
     b30:	200000e0 	.word	0x200000e0

00000b34 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     b34:	b500      	push	{lr}
     b36:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     b38:	2309      	movs	r3, #9
     b3a:	466a      	mov	r2, sp
     b3c:	7013      	strb	r3, [r2, #0]
     b3e:	3301      	adds	r3, #1
     b40:	7053      	strb	r3, [r2, #1]
     b42:	3301      	adds	r3, #1
     b44:	7093      	strb	r3, [r2, #2]
     b46:	3301      	adds	r3, #1
     b48:	70d3      	strb	r3, [r2, #3]
     b4a:	3301      	adds	r3, #1
     b4c:	7113      	strb	r3, [r2, #4]
     b4e:	3301      	adds	r3, #1
     b50:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     b52:	4b03      	ldr	r3, [pc, #12]	; (b60 <_sercom_get_interrupt_vector+0x2c>)
     b54:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     b56:	466b      	mov	r3, sp
     b58:	5618      	ldrsb	r0, [r3, r0]
}
     b5a:	b003      	add	sp, #12
     b5c:	bd00      	pop	{pc}
     b5e:	46c0      	nop			; (mov r8, r8)
     b60:	00000abd 	.word	0x00000abd

00000b64 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     b64:	b510      	push	{r4, lr}
     b66:	4b02      	ldr	r3, [pc, #8]	; (b70 <SERCOM0_Handler+0xc>)
     b68:	681b      	ldr	r3, [r3, #0]
     b6a:	2000      	movs	r0, #0
     b6c:	4798      	blx	r3
     b6e:	bd10      	pop	{r4, pc}
     b70:	2000009c 	.word	0x2000009c

00000b74 <SERCOM1_Handler>:
     b74:	b510      	push	{r4, lr}
     b76:	4b02      	ldr	r3, [pc, #8]	; (b80 <SERCOM1_Handler+0xc>)
     b78:	685b      	ldr	r3, [r3, #4]
     b7a:	2001      	movs	r0, #1
     b7c:	4798      	blx	r3
     b7e:	bd10      	pop	{r4, pc}
     b80:	2000009c 	.word	0x2000009c

00000b84 <SERCOM2_Handler>:
     b84:	b510      	push	{r4, lr}
     b86:	4b02      	ldr	r3, [pc, #8]	; (b90 <SERCOM2_Handler+0xc>)
     b88:	689b      	ldr	r3, [r3, #8]
     b8a:	2002      	movs	r0, #2
     b8c:	4798      	blx	r3
     b8e:	bd10      	pop	{r4, pc}
     b90:	2000009c 	.word	0x2000009c

00000b94 <SERCOM3_Handler>:
     b94:	b510      	push	{r4, lr}
     b96:	4b02      	ldr	r3, [pc, #8]	; (ba0 <SERCOM3_Handler+0xc>)
     b98:	68db      	ldr	r3, [r3, #12]
     b9a:	2003      	movs	r0, #3
     b9c:	4798      	blx	r3
     b9e:	bd10      	pop	{r4, pc}
     ba0:	2000009c 	.word	0x2000009c

00000ba4 <SERCOM4_Handler>:
     ba4:	b510      	push	{r4, lr}
     ba6:	4b02      	ldr	r3, [pc, #8]	; (bb0 <SERCOM4_Handler+0xc>)
     ba8:	691b      	ldr	r3, [r3, #16]
     baa:	2004      	movs	r0, #4
     bac:	4798      	blx	r3
     bae:	bd10      	pop	{r4, pc}
     bb0:	2000009c 	.word	0x2000009c

00000bb4 <SERCOM5_Handler>:
     bb4:	b510      	push	{r4, lr}
     bb6:	4b02      	ldr	r3, [pc, #8]	; (bc0 <SERCOM5_Handler+0xc>)
     bb8:	695b      	ldr	r3, [r3, #20]
     bba:	2005      	movs	r0, #5
     bbc:	4798      	blx	r3
     bbe:	bd10      	pop	{r4, pc}
     bc0:	2000009c 	.word	0x2000009c

00000bc4 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
     bc6:	46de      	mov	lr, fp
     bc8:	4657      	mov	r7, sl
     bca:	464e      	mov	r6, r9
     bcc:	4645      	mov	r5, r8
     bce:	b5e0      	push	{r5, r6, r7, lr}
     bd0:	b091      	sub	sp, #68	; 0x44
     bd2:	0005      	movs	r5, r0
     bd4:	000c      	movs	r4, r1
     bd6:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     bd8:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     bda:	0008      	movs	r0, r1
     bdc:	4bba      	ldr	r3, [pc, #744]	; (ec8 <usart_init+0x304>)
     bde:	4798      	blx	r3
     be0:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     be2:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     be4:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     be6:	07db      	lsls	r3, r3, #31
     be8:	d506      	bpl.n	bf8 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     bea:	b011      	add	sp, #68	; 0x44
     bec:	bc3c      	pop	{r2, r3, r4, r5}
     bee:	4690      	mov	r8, r2
     bf0:	4699      	mov	r9, r3
     bf2:	46a2      	mov	sl, r4
     bf4:	46ab      	mov	fp, r5
     bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     bf8:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
     bfa:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     bfc:	079b      	lsls	r3, r3, #30
     bfe:	d4f4      	bmi.n	bea <usart_init+0x26>
     c00:	49b2      	ldr	r1, [pc, #712]	; (ecc <usart_init+0x308>)
     c02:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     c04:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     c06:	2301      	movs	r3, #1
     c08:	40bb      	lsls	r3, r7
     c0a:	4303      	orrs	r3, r0
     c0c:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     c0e:	a90f      	add	r1, sp, #60	; 0x3c
     c10:	272d      	movs	r7, #45	; 0x2d
     c12:	5df3      	ldrb	r3, [r6, r7]
     c14:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     c16:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     c18:	b2d3      	uxtb	r3, r2
     c1a:	9302      	str	r3, [sp, #8]
     c1c:	0018      	movs	r0, r3
     c1e:	4bac      	ldr	r3, [pc, #688]	; (ed0 <usart_init+0x30c>)
     c20:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     c22:	9802      	ldr	r0, [sp, #8]
     c24:	4bab      	ldr	r3, [pc, #684]	; (ed4 <usart_init+0x310>)
     c26:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     c28:	5df0      	ldrb	r0, [r6, r7]
     c2a:	2100      	movs	r1, #0
     c2c:	4baa      	ldr	r3, [pc, #680]	; (ed8 <usart_init+0x314>)
     c2e:	4798      	blx	r3
	module->character_size = config->character_size;
     c30:	7af3      	ldrb	r3, [r6, #11]
     c32:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
     c34:	2324      	movs	r3, #36	; 0x24
     c36:	5cf3      	ldrb	r3, [r6, r3]
     c38:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     c3a:	2325      	movs	r3, #37	; 0x25
     c3c:	5cf3      	ldrb	r3, [r6, r3]
     c3e:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
     c40:	7ef3      	ldrb	r3, [r6, #27]
     c42:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     c44:	7f33      	ldrb	r3, [r6, #28]
     c46:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
     c48:	682b      	ldr	r3, [r5, #0]
     c4a:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     c4c:	0018      	movs	r0, r3
     c4e:	4b9e      	ldr	r3, [pc, #632]	; (ec8 <usart_init+0x304>)
     c50:	4798      	blx	r3
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     c52:	3014      	adds	r0, #20
	uint16_t baud  = 0;
     c54:	2200      	movs	r2, #0
     c56:	230e      	movs	r3, #14
     c58:	a906      	add	r1, sp, #24
     c5a:	468c      	mov	ip, r1
     c5c:	4463      	add	r3, ip
     c5e:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
     c60:	8a32      	ldrh	r2, [r6, #16]
     c62:	9202      	str	r2, [sp, #8]
     c64:	2380      	movs	r3, #128	; 0x80
     c66:	01db      	lsls	r3, r3, #7
     c68:	429a      	cmp	r2, r3
     c6a:	d100      	bne.n	c6e <usart_init+0xaa>
     c6c:	e09a      	b.n	da4 <usart_init+0x1e0>
     c6e:	d90f      	bls.n	c90 <usart_init+0xcc>
     c70:	23c0      	movs	r3, #192	; 0xc0
     c72:	01db      	lsls	r3, r3, #7
     c74:	9a02      	ldr	r2, [sp, #8]
     c76:	429a      	cmp	r2, r3
     c78:	d100      	bne.n	c7c <usart_init+0xb8>
     c7a:	e08e      	b.n	d9a <usart_init+0x1d6>
     c7c:	2380      	movs	r3, #128	; 0x80
     c7e:	021b      	lsls	r3, r3, #8
     c80:	429a      	cmp	r2, r3
     c82:	d000      	beq.n	c86 <usart_init+0xc2>
     c84:	e11b      	b.n	ebe <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     c86:	2303      	movs	r3, #3
     c88:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     c8a:	2300      	movs	r3, #0
     c8c:	9307      	str	r3, [sp, #28]
     c8e:	e008      	b.n	ca2 <usart_init+0xde>
	switch (config->sample_rate) {
     c90:	2380      	movs	r3, #128	; 0x80
     c92:	019b      	lsls	r3, r3, #6
     c94:	429a      	cmp	r2, r3
     c96:	d000      	beq.n	c9a <usart_init+0xd6>
     c98:	e111      	b.n	ebe <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     c9a:	2310      	movs	r3, #16
     c9c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     c9e:	3b0f      	subs	r3, #15
     ca0:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
     ca2:	6833      	ldr	r3, [r6, #0]
     ca4:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     ca6:	68f3      	ldr	r3, [r6, #12]
     ca8:	469b      	mov	fp, r3
		config->sample_adjustment |
     caa:	6973      	ldr	r3, [r6, #20]
     cac:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     cae:	7e33      	ldrb	r3, [r6, #24]
     cb0:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     cb2:	2326      	movs	r3, #38	; 0x26
     cb4:	5cf3      	ldrb	r3, [r6, r3]
     cb6:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     cb8:	6873      	ldr	r3, [r6, #4]
     cba:	4699      	mov	r9, r3
	switch (transfer_mode)
     cbc:	2b00      	cmp	r3, #0
     cbe:	d100      	bne.n	cc2 <usart_init+0xfe>
     cc0:	e09c      	b.n	dfc <usart_init+0x238>
     cc2:	2380      	movs	r3, #128	; 0x80
     cc4:	055b      	lsls	r3, r3, #21
     cc6:	4599      	cmp	r9, r3
     cc8:	d100      	bne.n	ccc <usart_init+0x108>
     cca:	e080      	b.n	dce <usart_init+0x20a>
	if(config->encoding_format_enable) {
     ccc:	7e73      	ldrb	r3, [r6, #25]
     cce:	2b00      	cmp	r3, #0
     cd0:	d002      	beq.n	cd8 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     cd2:	7eb3      	ldrb	r3, [r6, #26]
     cd4:	4642      	mov	r2, r8
     cd6:	7393      	strb	r3, [r2, #14]
	usart_hw->BAUD.reg = baud;
     cd8:	230e      	movs	r3, #14
     cda:	aa06      	add	r2, sp, #24
     cdc:	4694      	mov	ip, r2
     cde:	4463      	add	r3, ip
     ce0:	881b      	ldrh	r3, [r3, #0]
     ce2:	4642      	mov	r2, r8
     ce4:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
     ce6:	9b05      	ldr	r3, [sp, #20]
     ce8:	465a      	mov	r2, fp
     cea:	4313      	orrs	r3, r2
     cec:	9a03      	ldr	r2, [sp, #12]
     cee:	4313      	orrs	r3, r2
     cf0:	464a      	mov	r2, r9
     cf2:	4313      	orrs	r3, r2
     cf4:	9f02      	ldr	r7, [sp, #8]
     cf6:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     cf8:	9b04      	ldr	r3, [sp, #16]
     cfa:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
     cfc:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     cfe:	4653      	mov	r3, sl
     d00:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
     d02:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
     d04:	2327      	movs	r3, #39	; 0x27
     d06:	5cf3      	ldrb	r3, [r6, r3]
     d08:	2b00      	cmp	r3, #0
     d0a:	d101      	bne.n	d10 <usart_init+0x14c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     d0c:	3304      	adds	r3, #4
     d0e:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     d10:	7e73      	ldrb	r3, [r6, #25]
     d12:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     d14:	7f32      	ldrb	r2, [r6, #28]
     d16:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     d18:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     d1a:	7f72      	ldrb	r2, [r6, #29]
     d1c:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     d1e:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     d20:	2224      	movs	r2, #36	; 0x24
     d22:	5cb2      	ldrb	r2, [r6, r2]
     d24:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     d26:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     d28:	2225      	movs	r2, #37	; 0x25
     d2a:	5cb2      	ldrb	r2, [r6, r2]
     d2c:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     d2e:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
     d30:	7ab1      	ldrb	r1, [r6, #10]
     d32:	7af2      	ldrb	r2, [r6, #11]
     d34:	4311      	orrs	r1, r2
     d36:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
     d38:	8933      	ldrh	r3, [r6, #8]
     d3a:	2bff      	cmp	r3, #255	; 0xff
     d3c:	d100      	bne.n	d40 <usart_init+0x17c>
     d3e:	e081      	b.n	e44 <usart_init+0x280>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     d40:	2280      	movs	r2, #128	; 0x80
     d42:	0452      	lsls	r2, r2, #17
     d44:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
     d46:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
     d48:	232c      	movs	r3, #44	; 0x2c
     d4a:	5cf3      	ldrb	r3, [r6, r3]
     d4c:	2b00      	cmp	r3, #0
     d4e:	d103      	bne.n	d58 <usart_init+0x194>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     d50:	4b62      	ldr	r3, [pc, #392]	; (edc <usart_init+0x318>)
     d52:	789b      	ldrb	r3, [r3, #2]
     d54:	079b      	lsls	r3, r3, #30
     d56:	d501      	bpl.n	d5c <usart_init+0x198>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     d58:	2380      	movs	r3, #128	; 0x80
     d5a:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     d5c:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     d5e:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     d60:	2b00      	cmp	r3, #0
     d62:	d1fc      	bne.n	d5e <usart_init+0x19a>
	usart_hw->CTRLB.reg = ctrlb;
     d64:	4643      	mov	r3, r8
     d66:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
     d68:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     d6a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     d6c:	2b00      	cmp	r3, #0
     d6e:	d1fc      	bne.n	d6a <usart_init+0x1a6>
	usart_hw->CTRLA.reg = ctrla;
     d70:	4643      	mov	r3, r8
     d72:	601f      	str	r7, [r3, #0]
     d74:	ab0e      	add	r3, sp, #56	; 0x38
     d76:	2280      	movs	r2, #128	; 0x80
     d78:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     d7a:	2200      	movs	r2, #0
     d7c:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
     d7e:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     d80:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     d82:	6b33      	ldr	r3, [r6, #48]	; 0x30
     d84:	930a      	str	r3, [sp, #40]	; 0x28
     d86:	6b73      	ldr	r3, [r6, #52]	; 0x34
     d88:	930b      	str	r3, [sp, #44]	; 0x2c
     d8a:	6bb3      	ldr	r3, [r6, #56]	; 0x38
     d8c:	930c      	str	r3, [sp, #48]	; 0x30
     d8e:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
     d90:	9302      	str	r3, [sp, #8]
     d92:	930d      	str	r3, [sp, #52]	; 0x34
     d94:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     d96:	ae0a      	add	r6, sp, #40	; 0x28
     d98:	e063      	b.n	e62 <usart_init+0x29e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     d9a:	2308      	movs	r3, #8
     d9c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     d9e:	3b07      	subs	r3, #7
     da0:	9307      	str	r3, [sp, #28]
     da2:	e77e      	b.n	ca2 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
     da4:	6833      	ldr	r3, [r6, #0]
     da6:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     da8:	68f3      	ldr	r3, [r6, #12]
     daa:	469b      	mov	fp, r3
		config->sample_adjustment |
     dac:	6973      	ldr	r3, [r6, #20]
     dae:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     db0:	7e33      	ldrb	r3, [r6, #24]
     db2:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     db4:	2326      	movs	r3, #38	; 0x26
     db6:	5cf3      	ldrb	r3, [r6, r3]
     db8:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     dba:	6873      	ldr	r3, [r6, #4]
     dbc:	4699      	mov	r9, r3
	switch (transfer_mode)
     dbe:	2b00      	cmp	r3, #0
     dc0:	d018      	beq.n	df4 <usart_init+0x230>
     dc2:	2380      	movs	r3, #128	; 0x80
     dc4:	055b      	lsls	r3, r3, #21
     dc6:	4599      	cmp	r9, r3
     dc8:	d001      	beq.n	dce <usart_init+0x20a>
	enum status_code status_code = STATUS_OK;
     dca:	2000      	movs	r0, #0
     dcc:	e025      	b.n	e1a <usart_init+0x256>
			if (!config->use_external_clock) {
     dce:	2327      	movs	r3, #39	; 0x27
     dd0:	5cf3      	ldrb	r3, [r6, r3]
     dd2:	2b00      	cmp	r3, #0
     dd4:	d000      	beq.n	dd8 <usart_init+0x214>
     dd6:	e779      	b.n	ccc <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     dd8:	6a33      	ldr	r3, [r6, #32]
     dda:	001f      	movs	r7, r3
     ddc:	b2c0      	uxtb	r0, r0
     dde:	4b40      	ldr	r3, [pc, #256]	; (ee0 <usart_init+0x31c>)
     de0:	4798      	blx	r3
     de2:	0001      	movs	r1, r0
     de4:	220e      	movs	r2, #14
     de6:	ab06      	add	r3, sp, #24
     de8:	469c      	mov	ip, r3
     dea:	4462      	add	r2, ip
     dec:	0038      	movs	r0, r7
     dee:	4b3d      	ldr	r3, [pc, #244]	; (ee4 <usart_init+0x320>)
     df0:	4798      	blx	r3
     df2:	e012      	b.n	e1a <usart_init+0x256>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     df4:	2308      	movs	r3, #8
     df6:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     df8:	2300      	movs	r3, #0
     dfa:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
     dfc:	2327      	movs	r3, #39	; 0x27
     dfe:	5cf3      	ldrb	r3, [r6, r3]
     e00:	2b00      	cmp	r3, #0
     e02:	d00e      	beq.n	e22 <usart_init+0x25e>
				status_code =
     e04:	9b06      	ldr	r3, [sp, #24]
     e06:	9300      	str	r3, [sp, #0]
     e08:	9b07      	ldr	r3, [sp, #28]
     e0a:	220e      	movs	r2, #14
     e0c:	a906      	add	r1, sp, #24
     e0e:	468c      	mov	ip, r1
     e10:	4462      	add	r2, ip
     e12:	6ab1      	ldr	r1, [r6, #40]	; 0x28
     e14:	6a30      	ldr	r0, [r6, #32]
     e16:	4f34      	ldr	r7, [pc, #208]	; (ee8 <usart_init+0x324>)
     e18:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
     e1a:	2800      	cmp	r0, #0
     e1c:	d000      	beq.n	e20 <usart_init+0x25c>
     e1e:	e6e4      	b.n	bea <usart_init+0x26>
     e20:	e754      	b.n	ccc <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
     e22:	6a33      	ldr	r3, [r6, #32]
     e24:	001f      	movs	r7, r3
     e26:	b2c0      	uxtb	r0, r0
     e28:	4b2d      	ldr	r3, [pc, #180]	; (ee0 <usart_init+0x31c>)
     e2a:	4798      	blx	r3
     e2c:	0001      	movs	r1, r0
				status_code =
     e2e:	9b06      	ldr	r3, [sp, #24]
     e30:	9300      	str	r3, [sp, #0]
     e32:	9b07      	ldr	r3, [sp, #28]
     e34:	220e      	movs	r2, #14
     e36:	a806      	add	r0, sp, #24
     e38:	4684      	mov	ip, r0
     e3a:	4462      	add	r2, ip
     e3c:	0038      	movs	r0, r7
     e3e:	4f2a      	ldr	r7, [pc, #168]	; (ee8 <usart_init+0x324>)
     e40:	47b8      	blx	r7
     e42:	e7ea      	b.n	e1a <usart_init+0x256>
		if(config->lin_slave_enable) {
     e44:	7ef3      	ldrb	r3, [r6, #27]
     e46:	2b00      	cmp	r3, #0
     e48:	d100      	bne.n	e4c <usart_init+0x288>
     e4a:	e77d      	b.n	d48 <usart_init+0x184>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     e4c:	2380      	movs	r3, #128	; 0x80
     e4e:	04db      	lsls	r3, r3, #19
     e50:	431f      	orrs	r7, r3
     e52:	e779      	b.n	d48 <usart_init+0x184>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     e54:	0020      	movs	r0, r4
     e56:	4b25      	ldr	r3, [pc, #148]	; (eec <usart_init+0x328>)
     e58:	4798      	blx	r3
     e5a:	e007      	b.n	e6c <usart_init+0x2a8>
     e5c:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     e5e:	2f04      	cmp	r7, #4
     e60:	d00d      	beq.n	e7e <usart_init+0x2ba>
     e62:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
     e64:	00bb      	lsls	r3, r7, #2
     e66:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
     e68:	2800      	cmp	r0, #0
     e6a:	d0f3      	beq.n	e54 <usart_init+0x290>
		if (current_pinmux != PINMUX_UNUSED) {
     e6c:	1c43      	adds	r3, r0, #1
     e6e:	d0f5      	beq.n	e5c <usart_init+0x298>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     e70:	a90e      	add	r1, sp, #56	; 0x38
     e72:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     e74:	0c00      	lsrs	r0, r0, #16
     e76:	b2c0      	uxtb	r0, r0
     e78:	4b1d      	ldr	r3, [pc, #116]	; (ef0 <usart_init+0x32c>)
     e7a:	4798      	blx	r3
     e7c:	e7ee      	b.n	e5c <usart_init+0x298>
		module->callback[i]            = NULL;
     e7e:	2300      	movs	r3, #0
     e80:	60eb      	str	r3, [r5, #12]
     e82:	612b      	str	r3, [r5, #16]
     e84:	616b      	str	r3, [r5, #20]
     e86:	61ab      	str	r3, [r5, #24]
     e88:	61eb      	str	r3, [r5, #28]
     e8a:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
     e8c:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     e8e:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     e90:	2200      	movs	r2, #0
     e92:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     e94:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     e96:	3330      	adds	r3, #48	; 0x30
     e98:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     e9a:	3301      	adds	r3, #1
     e9c:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     e9e:	3301      	adds	r3, #1
     ea0:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     ea2:	3301      	adds	r3, #1
     ea4:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     ea6:	6828      	ldr	r0, [r5, #0]
     ea8:	4b07      	ldr	r3, [pc, #28]	; (ec8 <usart_init+0x304>)
     eaa:	4798      	blx	r3
     eac:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     eae:	4911      	ldr	r1, [pc, #68]	; (ef4 <usart_init+0x330>)
     eb0:	4b11      	ldr	r3, [pc, #68]	; (ef8 <usart_init+0x334>)
     eb2:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     eb4:	00a4      	lsls	r4, r4, #2
     eb6:	4b11      	ldr	r3, [pc, #68]	; (efc <usart_init+0x338>)
     eb8:	50e5      	str	r5, [r4, r3]
	return status_code;
     eba:	2000      	movs	r0, #0
     ebc:	e695      	b.n	bea <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     ebe:	2310      	movs	r3, #16
     ec0:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     ec2:	2300      	movs	r3, #0
     ec4:	9307      	str	r3, [sp, #28]
     ec6:	e6ec      	b.n	ca2 <usart_init+0xde>
     ec8:	00000abd 	.word	0x00000abd
     ecc:	40000400 	.word	0x40000400
     ed0:	00001769 	.word	0x00001769
     ed4:	000016dd 	.word	0x000016dd
     ed8:	000008f9 	.word	0x000008f9
     edc:	41002000 	.word	0x41002000
     ee0:	00001785 	.word	0x00001785
     ee4:	0000083b 	.word	0x0000083b
     ee8:	00000865 	.word	0x00000865
     eec:	00000945 	.word	0x00000945
     ef0:	00001861 	.word	0x00001861
     ef4:	00000f91 	.word	0x00000f91
     ef8:	00000af9 	.word	0x00000af9
     efc:	200000e0 	.word	0x200000e0

00000f00 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     f00:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
     f02:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
     f04:	2a00      	cmp	r2, #0
     f06:	d101      	bne.n	f0c <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
     f08:	0018      	movs	r0, r3
     f0a:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
     f0c:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
     f0e:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     f10:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
     f12:	2a00      	cmp	r2, #0
     f14:	d1f8      	bne.n	f08 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
     f16:	6802      	ldr	r2, [r0, #0]
	usart_hw->DATA.reg = tx_data;
     f18:	8511      	strh	r1, [r2, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     f1a:	2102      	movs	r1, #2
     f1c:	7e13      	ldrb	r3, [r2, #24]
     f1e:	420b      	tst	r3, r1
     f20:	d0fc      	beq.n	f1c <usart_write_wait+0x1c>
	return STATUS_OK;
     f22:	2300      	movs	r3, #0
     f24:	e7f0      	b.n	f08 <usart_write_wait+0x8>

00000f26 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     f26:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
     f28:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
     f2a:	2a00      	cmp	r2, #0
     f2c:	d101      	bne.n	f32 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
     f2e:	0018      	movs	r0, r3
     f30:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
     f32:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
     f34:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     f36:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
     f38:	2a00      	cmp	r2, #0
     f3a:	d1f8      	bne.n	f2e <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
     f3c:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
     f3e:	7e10      	ldrb	r0, [r2, #24]
     f40:	0740      	lsls	r0, r0, #29
     f42:	d5f4      	bpl.n	f2e <usart_read_wait+0x8>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     f44:	8b53      	ldrh	r3, [r2, #26]
     f46:	b2db      	uxtb	r3, r3
	if (error_code) {
     f48:	0698      	lsls	r0, r3, #26
     f4a:	d01d      	beq.n	f88 <usart_read_wait+0x62>
		if (error_code & SERCOM_USART_STATUS_FERR) {
     f4c:	0798      	lsls	r0, r3, #30
     f4e:	d503      	bpl.n	f58 <usart_read_wait+0x32>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     f50:	2302      	movs	r3, #2
     f52:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
     f54:	3318      	adds	r3, #24
     f56:	e7ea      	b.n	f2e <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     f58:	0758      	lsls	r0, r3, #29
     f5a:	d503      	bpl.n	f64 <usart_read_wait+0x3e>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     f5c:	2304      	movs	r3, #4
     f5e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
     f60:	331a      	adds	r3, #26
     f62:	e7e4      	b.n	f2e <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
     f64:	07d8      	lsls	r0, r3, #31
     f66:	d503      	bpl.n	f70 <usart_read_wait+0x4a>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     f68:	2301      	movs	r3, #1
     f6a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
     f6c:	3312      	adds	r3, #18
     f6e:	e7de      	b.n	f2e <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
     f70:	06d8      	lsls	r0, r3, #27
     f72:	d503      	bpl.n	f7c <usart_read_wait+0x56>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     f74:	2310      	movs	r3, #16
     f76:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
     f78:	3332      	adds	r3, #50	; 0x32
     f7a:	e7d8      	b.n	f2e <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
     f7c:	069b      	lsls	r3, r3, #26
     f7e:	d503      	bpl.n	f88 <usart_read_wait+0x62>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     f80:	2320      	movs	r3, #32
     f82:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
     f84:	3321      	adds	r3, #33	; 0x21
     f86:	e7d2      	b.n	f2e <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
     f88:	8d13      	ldrh	r3, [r2, #40]	; 0x28
     f8a:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
     f8c:	2300      	movs	r3, #0
     f8e:	e7ce      	b.n	f2e <usart_read_wait+0x8>

00000f90 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     f92:	0080      	lsls	r0, r0, #2
     f94:	4b62      	ldr	r3, [pc, #392]	; (1120 <_usart_interrupt_handler+0x190>)
     f96:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     f98:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     f9a:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
     f9c:	2b00      	cmp	r3, #0
     f9e:	d1fc      	bne.n	f9a <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     fa0:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
     fa2:	7da6      	ldrb	r6, [r4, #22]
     fa4:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
     fa6:	2330      	movs	r3, #48	; 0x30
     fa8:	5ceb      	ldrb	r3, [r5, r3]
     faa:	2231      	movs	r2, #49	; 0x31
     fac:	5caf      	ldrb	r7, [r5, r2]
     fae:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     fb0:	07f3      	lsls	r3, r6, #31
     fb2:	d522      	bpl.n	ffa <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
     fb4:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     fb6:	b29b      	uxth	r3, r3
     fb8:	2b00      	cmp	r3, #0
     fba:	d01c      	beq.n	ff6 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     fbc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
     fbe:	7813      	ldrb	r3, [r2, #0]
     fc0:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     fc2:	1c51      	adds	r1, r2, #1
     fc4:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     fc6:	7969      	ldrb	r1, [r5, #5]
     fc8:	2901      	cmp	r1, #1
     fca:	d00e      	beq.n	fea <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     fcc:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     fce:	05db      	lsls	r3, r3, #23
     fd0:	0ddb      	lsrs	r3, r3, #23
     fd2:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
     fd4:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     fd6:	3b01      	subs	r3, #1
     fd8:	b29b      	uxth	r3, r3
     fda:	85eb      	strh	r3, [r5, #46]	; 0x2e
     fdc:	2b00      	cmp	r3, #0
     fde:	d10c      	bne.n	ffa <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     fe0:	3301      	adds	r3, #1
     fe2:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     fe4:	3301      	adds	r3, #1
     fe6:	75a3      	strb	r3, [r4, #22]
     fe8:	e007      	b.n	ffa <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     fea:	7851      	ldrb	r1, [r2, #1]
     fec:	0209      	lsls	r1, r1, #8
     fee:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
     ff0:	3202      	adds	r2, #2
     ff2:	62aa      	str	r2, [r5, #40]	; 0x28
     ff4:	e7eb      	b.n	fce <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     ff6:	2301      	movs	r3, #1
     ff8:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     ffa:	07b3      	lsls	r3, r6, #30
     ffc:	d506      	bpl.n	100c <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     ffe:	2302      	movs	r3, #2
    1000:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    1002:	2200      	movs	r2, #0
    1004:	3331      	adds	r3, #49	; 0x31
    1006:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    1008:	07fb      	lsls	r3, r7, #31
    100a:	d41a      	bmi.n	1042 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    100c:	0773      	lsls	r3, r6, #29
    100e:	d565      	bpl.n	10dc <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    1010:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1012:	b29b      	uxth	r3, r3
    1014:	2b00      	cmp	r3, #0
    1016:	d05f      	beq.n	10d8 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1018:	8b63      	ldrh	r3, [r4, #26]
    101a:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    101c:	071a      	lsls	r2, r3, #28
    101e:	d414      	bmi.n	104a <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1020:	223f      	movs	r2, #63	; 0x3f
    1022:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    1024:	2b00      	cmp	r3, #0
    1026:	d034      	beq.n	1092 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    1028:	079a      	lsls	r2, r3, #30
    102a:	d511      	bpl.n	1050 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    102c:	221a      	movs	r2, #26
    102e:	2332      	movs	r3, #50	; 0x32
    1030:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1032:	3b30      	subs	r3, #48	; 0x30
    1034:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    1036:	077b      	lsls	r3, r7, #29
    1038:	d550      	bpl.n	10dc <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    103a:	0028      	movs	r0, r5
    103c:	696b      	ldr	r3, [r5, #20]
    103e:	4798      	blx	r3
    1040:	e04c      	b.n	10dc <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    1042:	0028      	movs	r0, r5
    1044:	68eb      	ldr	r3, [r5, #12]
    1046:	4798      	blx	r3
    1048:	e7e0      	b.n	100c <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    104a:	2237      	movs	r2, #55	; 0x37
    104c:	4013      	ands	r3, r2
    104e:	e7e9      	b.n	1024 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1050:	075a      	lsls	r2, r3, #29
    1052:	d505      	bpl.n	1060 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    1054:	221e      	movs	r2, #30
    1056:	2332      	movs	r3, #50	; 0x32
    1058:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    105a:	3b2e      	subs	r3, #46	; 0x2e
    105c:	8363      	strh	r3, [r4, #26]
    105e:	e7ea      	b.n	1036 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1060:	07da      	lsls	r2, r3, #31
    1062:	d505      	bpl.n	1070 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    1064:	2213      	movs	r2, #19
    1066:	2332      	movs	r3, #50	; 0x32
    1068:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    106a:	3b31      	subs	r3, #49	; 0x31
    106c:	8363      	strh	r3, [r4, #26]
    106e:	e7e2      	b.n	1036 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    1070:	06da      	lsls	r2, r3, #27
    1072:	d505      	bpl.n	1080 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    1074:	2242      	movs	r2, #66	; 0x42
    1076:	2332      	movs	r3, #50	; 0x32
    1078:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    107a:	3b22      	subs	r3, #34	; 0x22
    107c:	8363      	strh	r3, [r4, #26]
    107e:	e7da      	b.n	1036 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    1080:	2220      	movs	r2, #32
    1082:	421a      	tst	r2, r3
    1084:	d0d7      	beq.n	1036 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    1086:	3221      	adds	r2, #33	; 0x21
    1088:	2332      	movs	r3, #50	; 0x32
    108a:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    108c:	3b12      	subs	r3, #18
    108e:	8363      	strh	r3, [r4, #26]
    1090:	e7d1      	b.n	1036 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    1092:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    1094:	05db      	lsls	r3, r3, #23
    1096:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    1098:	b2da      	uxtb	r2, r3
    109a:	6a69      	ldr	r1, [r5, #36]	; 0x24
    109c:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    109e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    10a0:	1c51      	adds	r1, r2, #1
    10a2:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    10a4:	7969      	ldrb	r1, [r5, #5]
    10a6:	2901      	cmp	r1, #1
    10a8:	d010      	beq.n	10cc <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    10aa:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    10ac:	3b01      	subs	r3, #1
    10ae:	b29b      	uxth	r3, r3
    10b0:	85ab      	strh	r3, [r5, #44]	; 0x2c
    10b2:	2b00      	cmp	r3, #0
    10b4:	d112      	bne.n	10dc <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    10b6:	3304      	adds	r3, #4
    10b8:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    10ba:	2200      	movs	r2, #0
    10bc:	332e      	adds	r3, #46	; 0x2e
    10be:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    10c0:	07bb      	lsls	r3, r7, #30
    10c2:	d50b      	bpl.n	10dc <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    10c4:	0028      	movs	r0, r5
    10c6:	692b      	ldr	r3, [r5, #16]
    10c8:	4798      	blx	r3
    10ca:	e007      	b.n	10dc <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    10cc:	0a1b      	lsrs	r3, r3, #8
    10ce:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    10d0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    10d2:	3301      	adds	r3, #1
    10d4:	626b      	str	r3, [r5, #36]	; 0x24
    10d6:	e7e8      	b.n	10aa <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    10d8:	2304      	movs	r3, #4
    10da:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    10dc:	06f3      	lsls	r3, r6, #27
    10de:	d504      	bpl.n	10ea <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    10e0:	2310      	movs	r3, #16
    10e2:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    10e4:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    10e6:	06fb      	lsls	r3, r7, #27
    10e8:	d40e      	bmi.n	1108 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    10ea:	06b3      	lsls	r3, r6, #26
    10ec:	d504      	bpl.n	10f8 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    10ee:	2320      	movs	r3, #32
    10f0:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    10f2:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    10f4:	073b      	lsls	r3, r7, #28
    10f6:	d40b      	bmi.n	1110 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    10f8:	0733      	lsls	r3, r6, #28
    10fa:	d504      	bpl.n	1106 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    10fc:	2308      	movs	r3, #8
    10fe:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    1100:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    1102:	06bb      	lsls	r3, r7, #26
    1104:	d408      	bmi.n	1118 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    1106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    1108:	0028      	movs	r0, r5
    110a:	69eb      	ldr	r3, [r5, #28]
    110c:	4798      	blx	r3
    110e:	e7ec      	b.n	10ea <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    1110:	0028      	movs	r0, r5
    1112:	69ab      	ldr	r3, [r5, #24]
    1114:	4798      	blx	r3
    1116:	e7ef      	b.n	10f8 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    1118:	6a2b      	ldr	r3, [r5, #32]
    111a:	0028      	movs	r0, r5
    111c:	4798      	blx	r3
}
    111e:	e7f2      	b.n	1106 <_usart_interrupt_handler+0x176>
    1120:	200000e0 	.word	0x200000e0

00001124 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1124:	b510      	push	{r4, lr}
	switch (clock_source) {
    1126:	2808      	cmp	r0, #8
    1128:	d803      	bhi.n	1132 <system_clock_source_get_hz+0xe>
    112a:	0080      	lsls	r0, r0, #2
    112c:	4b1c      	ldr	r3, [pc, #112]	; (11a0 <system_clock_source_get_hz+0x7c>)
    112e:	581b      	ldr	r3, [r3, r0]
    1130:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    1132:	2000      	movs	r0, #0
    1134:	e032      	b.n	119c <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    1136:	4b1b      	ldr	r3, [pc, #108]	; (11a4 <system_clock_source_get_hz+0x80>)
    1138:	6918      	ldr	r0, [r3, #16]
    113a:	e02f      	b.n	119c <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    113c:	4b1a      	ldr	r3, [pc, #104]	; (11a8 <system_clock_source_get_hz+0x84>)
    113e:	6a1b      	ldr	r3, [r3, #32]
    1140:	059b      	lsls	r3, r3, #22
    1142:	0f9b      	lsrs	r3, r3, #30
    1144:	4819      	ldr	r0, [pc, #100]	; (11ac <system_clock_source_get_hz+0x88>)
    1146:	40d8      	lsrs	r0, r3
    1148:	e028      	b.n	119c <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    114a:	4b16      	ldr	r3, [pc, #88]	; (11a4 <system_clock_source_get_hz+0x80>)
    114c:	6958      	ldr	r0, [r3, #20]
    114e:	e025      	b.n	119c <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1150:	4b14      	ldr	r3, [pc, #80]	; (11a4 <system_clock_source_get_hz+0x80>)
    1152:	681b      	ldr	r3, [r3, #0]
			return 0;
    1154:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1156:	079b      	lsls	r3, r3, #30
    1158:	d520      	bpl.n	119c <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    115a:	4913      	ldr	r1, [pc, #76]	; (11a8 <system_clock_source_get_hz+0x84>)
    115c:	2210      	movs	r2, #16
    115e:	68cb      	ldr	r3, [r1, #12]
    1160:	421a      	tst	r2, r3
    1162:	d0fc      	beq.n	115e <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    1164:	4b0f      	ldr	r3, [pc, #60]	; (11a4 <system_clock_source_get_hz+0x80>)
    1166:	681a      	ldr	r2, [r3, #0]
    1168:	2324      	movs	r3, #36	; 0x24
    116a:	4013      	ands	r3, r2
    116c:	2b04      	cmp	r3, #4
    116e:	d001      	beq.n	1174 <system_clock_source_get_hz+0x50>
			return 48000000UL;
    1170:	480f      	ldr	r0, [pc, #60]	; (11b0 <system_clock_source_get_hz+0x8c>)
    1172:	e013      	b.n	119c <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1174:	2000      	movs	r0, #0
    1176:	4b0f      	ldr	r3, [pc, #60]	; (11b4 <system_clock_source_get_hz+0x90>)
    1178:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    117a:	4b0a      	ldr	r3, [pc, #40]	; (11a4 <system_clock_source_get_hz+0x80>)
    117c:	689b      	ldr	r3, [r3, #8]
    117e:	041b      	lsls	r3, r3, #16
    1180:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1182:	4358      	muls	r0, r3
    1184:	e00a      	b.n	119c <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1186:	2350      	movs	r3, #80	; 0x50
    1188:	4a07      	ldr	r2, [pc, #28]	; (11a8 <system_clock_source_get_hz+0x84>)
    118a:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    118c:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    118e:	075b      	lsls	r3, r3, #29
    1190:	d504      	bpl.n	119c <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    1192:	4b04      	ldr	r3, [pc, #16]	; (11a4 <system_clock_source_get_hz+0x80>)
    1194:	68d8      	ldr	r0, [r3, #12]
    1196:	e001      	b.n	119c <system_clock_source_get_hz+0x78>
		return 32768UL;
    1198:	2080      	movs	r0, #128	; 0x80
    119a:	0200      	lsls	r0, r0, #8
	}
}
    119c:	bd10      	pop	{r4, pc}
    119e:	46c0      	nop			; (mov r8, r8)
    11a0:	0000432c 	.word	0x0000432c
    11a4:	200000b4 	.word	0x200000b4
    11a8:	40000800 	.word	0x40000800
    11ac:	007a1200 	.word	0x007a1200
    11b0:	02dc6c00 	.word	0x02dc6c00
    11b4:	00001785 	.word	0x00001785

000011b8 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    11b8:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    11ba:	490c      	ldr	r1, [pc, #48]	; (11ec <system_clock_source_osc8m_set_config+0x34>)
    11bc:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    11be:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    11c0:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    11c2:	7840      	ldrb	r0, [r0, #1]
    11c4:	2201      	movs	r2, #1
    11c6:	4010      	ands	r0, r2
    11c8:	0180      	lsls	r0, r0, #6
    11ca:	2640      	movs	r6, #64	; 0x40
    11cc:	43b3      	bics	r3, r6
    11ce:	4303      	orrs	r3, r0
    11d0:	402a      	ands	r2, r5
    11d2:	01d2      	lsls	r2, r2, #7
    11d4:	2080      	movs	r0, #128	; 0x80
    11d6:	4383      	bics	r3, r0
    11d8:	4313      	orrs	r3, r2
    11da:	2203      	movs	r2, #3
    11dc:	4022      	ands	r2, r4
    11de:	0212      	lsls	r2, r2, #8
    11e0:	4803      	ldr	r0, [pc, #12]	; (11f0 <system_clock_source_osc8m_set_config+0x38>)
    11e2:	4003      	ands	r3, r0
    11e4:	4313      	orrs	r3, r2
    11e6:	620b      	str	r3, [r1, #32]
}
    11e8:	bd70      	pop	{r4, r5, r6, pc}
    11ea:	46c0      	nop			; (mov r8, r8)
    11ec:	40000800 	.word	0x40000800
    11f0:	fffffcff 	.word	0xfffffcff

000011f4 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    11f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    11f6:	46de      	mov	lr, fp
    11f8:	4657      	mov	r7, sl
    11fa:	464e      	mov	r6, r9
    11fc:	4645      	mov	r5, r8
    11fe:	b5e0      	push	{r5, r6, r7, lr}
    1200:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    1202:	4b26      	ldr	r3, [pc, #152]	; (129c <system_clock_source_xosc32k_set_config+0xa8>)
    1204:	469b      	mov	fp, r3
    1206:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    1208:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    120a:	7800      	ldrb	r0, [r0, #0]
    120c:	4242      	negs	r2, r0
    120e:	4142      	adcs	r2, r0
    1210:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    1212:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    1214:	78ca      	ldrb	r2, [r1, #3]
    1216:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    1218:	790a      	ldrb	r2, [r1, #4]
    121a:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    121c:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    121e:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    1220:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    1222:	688a      	ldr	r2, [r1, #8]
    1224:	491e      	ldr	r1, [pc, #120]	; (12a0 <system_clock_source_xosc32k_set_config+0xac>)
    1226:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    1228:	2101      	movs	r1, #1
    122a:	464a      	mov	r2, r9
    122c:	0092      	lsls	r2, r2, #2
    122e:	4691      	mov	r9, r2
    1230:	2204      	movs	r2, #4
    1232:	4393      	bics	r3, r2
    1234:	464a      	mov	r2, r9
    1236:	4313      	orrs	r3, r2
    1238:	4642      	mov	r2, r8
    123a:	400a      	ands	r2, r1
    123c:	00d2      	lsls	r2, r2, #3
    123e:	4690      	mov	r8, r2
    1240:	2208      	movs	r2, #8
    1242:	4393      	bics	r3, r2
    1244:	4642      	mov	r2, r8
    1246:	4313      	orrs	r3, r2
    1248:	4662      	mov	r2, ip
    124a:	400a      	ands	r2, r1
    124c:	0112      	lsls	r2, r2, #4
    124e:	4694      	mov	ip, r2
    1250:	2210      	movs	r2, #16
    1252:	4393      	bics	r3, r2
    1254:	4662      	mov	r2, ip
    1256:	4313      	orrs	r3, r2
    1258:	4008      	ands	r0, r1
    125a:	0140      	lsls	r0, r0, #5
    125c:	2220      	movs	r2, #32
    125e:	4393      	bics	r3, r2
    1260:	4303      	orrs	r3, r0
    1262:	400f      	ands	r7, r1
    1264:	01bf      	lsls	r7, r7, #6
    1266:	2040      	movs	r0, #64	; 0x40
    1268:	4383      	bics	r3, r0
    126a:	433b      	orrs	r3, r7
    126c:	400e      	ands	r6, r1
    126e:	01f6      	lsls	r6, r6, #7
    1270:	3040      	adds	r0, #64	; 0x40
    1272:	4383      	bics	r3, r0
    1274:	4333      	orrs	r3, r6
    1276:	3879      	subs	r0, #121	; 0x79
    1278:	4005      	ands	r5, r0
    127a:	022d      	lsls	r5, r5, #8
    127c:	4809      	ldr	r0, [pc, #36]	; (12a4 <system_clock_source_xosc32k_set_config+0xb0>)
    127e:	4003      	ands	r3, r0
    1280:	432b      	orrs	r3, r5
    1282:	4021      	ands	r1, r4
    1284:	0309      	lsls	r1, r1, #12
    1286:	4808      	ldr	r0, [pc, #32]	; (12a8 <system_clock_source_xosc32k_set_config+0xb4>)
    1288:	4003      	ands	r3, r0
    128a:	430b      	orrs	r3, r1
    128c:	465a      	mov	r2, fp
    128e:	8293      	strh	r3, [r2, #20]
}
    1290:	bc3c      	pop	{r2, r3, r4, r5}
    1292:	4690      	mov	r8, r2
    1294:	4699      	mov	r9, r3
    1296:	46a2      	mov	sl, r4
    1298:	46ab      	mov	fp, r5
    129a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    129c:	40000800 	.word	0x40000800
    12a0:	200000b4 	.word	0x200000b4
    12a4:	fffff8ff 	.word	0xfffff8ff
    12a8:	ffffefff 	.word	0xffffefff

000012ac <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    12ac:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    12ae:	7a03      	ldrb	r3, [r0, #8]
    12b0:	069b      	lsls	r3, r3, #26
    12b2:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    12b4:	8942      	ldrh	r2, [r0, #10]
    12b6:	0592      	lsls	r2, r2, #22
    12b8:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    12ba:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    12bc:	4918      	ldr	r1, [pc, #96]	; (1320 <system_clock_source_dfll_set_config+0x74>)
    12be:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    12c0:	7983      	ldrb	r3, [r0, #6]
    12c2:	79c2      	ldrb	r2, [r0, #7]
    12c4:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    12c6:	8842      	ldrh	r2, [r0, #2]
    12c8:	8884      	ldrh	r4, [r0, #4]
    12ca:	4322      	orrs	r2, r4
    12cc:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    12ce:	7842      	ldrb	r2, [r0, #1]
    12d0:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    12d2:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    12d4:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    12d6:	7803      	ldrb	r3, [r0, #0]
    12d8:	2b04      	cmp	r3, #4
    12da:	d011      	beq.n	1300 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    12dc:	2b20      	cmp	r3, #32
    12de:	d10e      	bne.n	12fe <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    12e0:	7b03      	ldrb	r3, [r0, #12]
    12e2:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    12e4:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    12e6:	4313      	orrs	r3, r2
    12e8:	89c2      	ldrh	r2, [r0, #14]
    12ea:	0412      	lsls	r2, r2, #16
    12ec:	490d      	ldr	r1, [pc, #52]	; (1324 <system_clock_source_dfll_set_config+0x78>)
    12ee:	400a      	ands	r2, r1
    12f0:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    12f2:	4a0b      	ldr	r2, [pc, #44]	; (1320 <system_clock_source_dfll_set_config+0x74>)
    12f4:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    12f6:	6811      	ldr	r1, [r2, #0]
    12f8:	4b0b      	ldr	r3, [pc, #44]	; (1328 <system_clock_source_dfll_set_config+0x7c>)
    12fa:	430b      	orrs	r3, r1
    12fc:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    12fe:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1300:	7b03      	ldrb	r3, [r0, #12]
    1302:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1304:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1306:	4313      	orrs	r3, r2
    1308:	89c2      	ldrh	r2, [r0, #14]
    130a:	0412      	lsls	r2, r2, #16
    130c:	4905      	ldr	r1, [pc, #20]	; (1324 <system_clock_source_dfll_set_config+0x78>)
    130e:	400a      	ands	r2, r1
    1310:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    1312:	4a03      	ldr	r2, [pc, #12]	; (1320 <system_clock_source_dfll_set_config+0x74>)
    1314:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    1316:	6813      	ldr	r3, [r2, #0]
    1318:	2104      	movs	r1, #4
    131a:	430b      	orrs	r3, r1
    131c:	6013      	str	r3, [r2, #0]
    131e:	e7ee      	b.n	12fe <system_clock_source_dfll_set_config+0x52>
    1320:	200000b4 	.word	0x200000b4
    1324:	03ff0000 	.word	0x03ff0000
    1328:	00000424 	.word	0x00000424

0000132c <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    132c:	2808      	cmp	r0, #8
    132e:	d803      	bhi.n	1338 <system_clock_source_enable+0xc>
    1330:	0080      	lsls	r0, r0, #2
    1332:	4b25      	ldr	r3, [pc, #148]	; (13c8 <system_clock_source_enable+0x9c>)
    1334:	581b      	ldr	r3, [r3, r0]
    1336:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1338:	2017      	movs	r0, #23
    133a:	e044      	b.n	13c6 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    133c:	4a23      	ldr	r2, [pc, #140]	; (13cc <system_clock_source_enable+0xa0>)
    133e:	6a13      	ldr	r3, [r2, #32]
    1340:	2102      	movs	r1, #2
    1342:	430b      	orrs	r3, r1
    1344:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    1346:	2000      	movs	r0, #0
    1348:	e03d      	b.n	13c6 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    134a:	4a20      	ldr	r2, [pc, #128]	; (13cc <system_clock_source_enable+0xa0>)
    134c:	6993      	ldr	r3, [r2, #24]
    134e:	2102      	movs	r1, #2
    1350:	430b      	orrs	r3, r1
    1352:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    1354:	2000      	movs	r0, #0
		break;
    1356:	e036      	b.n	13c6 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1358:	4a1c      	ldr	r2, [pc, #112]	; (13cc <system_clock_source_enable+0xa0>)
    135a:	8a13      	ldrh	r3, [r2, #16]
    135c:	2102      	movs	r1, #2
    135e:	430b      	orrs	r3, r1
    1360:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    1362:	2000      	movs	r0, #0
		break;
    1364:	e02f      	b.n	13c6 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1366:	4a19      	ldr	r2, [pc, #100]	; (13cc <system_clock_source_enable+0xa0>)
    1368:	8a93      	ldrh	r3, [r2, #20]
    136a:	2102      	movs	r1, #2
    136c:	430b      	orrs	r3, r1
    136e:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    1370:	2000      	movs	r0, #0
		break;
    1372:	e028      	b.n	13c6 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1374:	4916      	ldr	r1, [pc, #88]	; (13d0 <system_clock_source_enable+0xa4>)
    1376:	680b      	ldr	r3, [r1, #0]
    1378:	2202      	movs	r2, #2
    137a:	4313      	orrs	r3, r2
    137c:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    137e:	4b13      	ldr	r3, [pc, #76]	; (13cc <system_clock_source_enable+0xa0>)
    1380:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1382:	0019      	movs	r1, r3
    1384:	320e      	adds	r2, #14
    1386:	68cb      	ldr	r3, [r1, #12]
    1388:	421a      	tst	r2, r3
    138a:	d0fc      	beq.n	1386 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    138c:	4a10      	ldr	r2, [pc, #64]	; (13d0 <system_clock_source_enable+0xa4>)
    138e:	6891      	ldr	r1, [r2, #8]
    1390:	4b0e      	ldr	r3, [pc, #56]	; (13cc <system_clock_source_enable+0xa0>)
    1392:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1394:	6852      	ldr	r2, [r2, #4]
    1396:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    1398:	2200      	movs	r2, #0
    139a:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    139c:	0019      	movs	r1, r3
    139e:	3210      	adds	r2, #16
    13a0:	68cb      	ldr	r3, [r1, #12]
    13a2:	421a      	tst	r2, r3
    13a4:	d0fc      	beq.n	13a0 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    13a6:	4b0a      	ldr	r3, [pc, #40]	; (13d0 <system_clock_source_enable+0xa4>)
    13a8:	681b      	ldr	r3, [r3, #0]
    13aa:	b29b      	uxth	r3, r3
    13ac:	4a07      	ldr	r2, [pc, #28]	; (13cc <system_clock_source_enable+0xa0>)
    13ae:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    13b0:	2000      	movs	r0, #0
    13b2:	e008      	b.n	13c6 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    13b4:	4905      	ldr	r1, [pc, #20]	; (13cc <system_clock_source_enable+0xa0>)
    13b6:	2244      	movs	r2, #68	; 0x44
    13b8:	5c8b      	ldrb	r3, [r1, r2]
    13ba:	2002      	movs	r0, #2
    13bc:	4303      	orrs	r3, r0
    13be:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    13c0:	2000      	movs	r0, #0
		break;
    13c2:	e000      	b.n	13c6 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    13c4:	2000      	movs	r0, #0
}
    13c6:	4770      	bx	lr
    13c8:	00004350 	.word	0x00004350
    13cc:	40000800 	.word	0x40000800
    13d0:	200000b4 	.word	0x200000b4

000013d4 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    13d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    13d6:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    13d8:	22c2      	movs	r2, #194	; 0xc2
    13da:	00d2      	lsls	r2, r2, #3
    13dc:	4b47      	ldr	r3, [pc, #284]	; (14fc <system_clock_init+0x128>)
    13de:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    13e0:	4947      	ldr	r1, [pc, #284]	; (1500 <system_clock_init+0x12c>)
    13e2:	684b      	ldr	r3, [r1, #4]
    13e4:	221e      	movs	r2, #30
    13e6:	4393      	bics	r3, r2
    13e8:	3a1c      	subs	r2, #28
    13ea:	4313      	orrs	r3, r2
    13ec:	604b      	str	r3, [r1, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    13ee:	ab01      	add	r3, sp, #4
    13f0:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    13f2:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    13f4:	4d43      	ldr	r5, [pc, #268]	; (1504 <system_clock_init+0x130>)
    13f6:	b2e0      	uxtb	r0, r4
    13f8:	a901      	add	r1, sp, #4
    13fa:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    13fc:	3401      	adds	r4, #1
    13fe:	2c25      	cmp	r4, #37	; 0x25
    1400:	d1f9      	bne.n	13f6 <system_clock_init+0x22>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    1402:	a80a      	add	r0, sp, #40	; 0x28
    1404:	2300      	movs	r3, #0
    1406:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    1408:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    140a:	2280      	movs	r2, #128	; 0x80
    140c:	0212      	lsls	r2, r2, #8
    140e:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    1410:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    1412:	2201      	movs	r2, #1
    1414:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    1416:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    1418:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    141a:	3205      	adds	r2, #5
    141c:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    141e:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    1420:	4b39      	ldr	r3, [pc, #228]	; (1508 <system_clock_init+0x134>)
    1422:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    1424:	2005      	movs	r0, #5
    1426:	4b39      	ldr	r3, [pc, #228]	; (150c <system_clock_init+0x138>)
    1428:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    142a:	4934      	ldr	r1, [pc, #208]	; (14fc <system_clock_init+0x128>)
    142c:	2202      	movs	r2, #2
    142e:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    1430:	421a      	tst	r2, r3
    1432:	d0fc      	beq.n	142e <system_clock_init+0x5a>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    1434:	4a31      	ldr	r2, [pc, #196]	; (14fc <system_clock_init+0x128>)
    1436:	8a93      	ldrh	r3, [r2, #20]
    1438:	2180      	movs	r1, #128	; 0x80
    143a:	430b      	orrs	r3, r1
    143c:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    143e:	ab05      	add	r3, sp, #20
    1440:	2100      	movs	r1, #0
    1442:	2200      	movs	r2, #0
    1444:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    1446:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    1448:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    144a:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    144c:	313f      	adds	r1, #63	; 0x3f
    144e:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    1450:	393b      	subs	r1, #59	; 0x3b
    1452:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    1454:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    1456:	4b2e      	ldr	r3, [pc, #184]	; (1510 <system_clock_init+0x13c>)
    1458:	681b      	ldr	r3, [r3, #0]
    145a:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    145c:	2b3f      	cmp	r3, #63	; 0x3f
    145e:	d04b      	beq.n	14f8 <system_clock_init+0x124>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    1460:	a805      	add	r0, sp, #20
    1462:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    1464:	23b7      	movs	r3, #183	; 0xb7
    1466:	00db      	lsls	r3, r3, #3
    1468:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    146a:	2307      	movs	r3, #7
    146c:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    146e:	3338      	adds	r3, #56	; 0x38
    1470:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    1472:	4b28      	ldr	r3, [pc, #160]	; (1514 <system_clock_init+0x140>)
    1474:	4798      	blx	r3
	config->run_in_standby  = false;
    1476:	a804      	add	r0, sp, #16
    1478:	2500      	movs	r5, #0
    147a:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    147c:	2601      	movs	r6, #1
    147e:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1480:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1482:	4b25      	ldr	r3, [pc, #148]	; (1518 <system_clock_init+0x144>)
    1484:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1486:	2006      	movs	r0, #6
    1488:	4f20      	ldr	r7, [pc, #128]	; (150c <system_clock_init+0x138>)
    148a:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    148c:	4b23      	ldr	r3, [pc, #140]	; (151c <system_clock_init+0x148>)
    148e:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1490:	ac01      	add	r4, sp, #4
    1492:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    1494:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    1496:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    1498:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    149a:	2305      	movs	r3, #5
    149c:	7023      	strb	r3, [r4, #0]
    149e:	0021      	movs	r1, r4
    14a0:	2001      	movs	r0, #1
    14a2:	4b1f      	ldr	r3, [pc, #124]	; (1520 <system_clock_init+0x14c>)
    14a4:	4798      	blx	r3
    14a6:	2001      	movs	r0, #1
    14a8:	4b1e      	ldr	r3, [pc, #120]	; (1524 <system_clock_init+0x150>)
    14aa:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    14ac:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    14ae:	0021      	movs	r1, r4
    14b0:	2000      	movs	r0, #0
    14b2:	4b14      	ldr	r3, [pc, #80]	; (1504 <system_clock_init+0x130>)
    14b4:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    14b6:	2000      	movs	r0, #0
    14b8:	4b1b      	ldr	r3, [pc, #108]	; (1528 <system_clock_init+0x154>)
    14ba:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    14bc:	2007      	movs	r0, #7
    14be:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    14c0:	490e      	ldr	r1, [pc, #56]	; (14fc <system_clock_init+0x128>)
    14c2:	22d0      	movs	r2, #208	; 0xd0
    14c4:	68cb      	ldr	r3, [r1, #12]
    14c6:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    14c8:	2bd0      	cmp	r3, #208	; 0xd0
    14ca:	d1fb      	bne.n	14c4 <system_clock_init+0xf0>
	PM->CPUSEL.reg = (uint32_t)divider;
    14cc:	4a17      	ldr	r2, [pc, #92]	; (152c <system_clock_init+0x158>)
    14ce:	2300      	movs	r3, #0
    14d0:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    14d2:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    14d4:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    14d6:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    14d8:	a901      	add	r1, sp, #4
    14da:	2201      	movs	r2, #1
    14dc:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    14de:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    14e0:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    14e2:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    14e4:	3307      	adds	r3, #7
    14e6:	700b      	strb	r3, [r1, #0]
    14e8:	2000      	movs	r0, #0
    14ea:	4b0d      	ldr	r3, [pc, #52]	; (1520 <system_clock_init+0x14c>)
    14ec:	4798      	blx	r3
    14ee:	2000      	movs	r0, #0
    14f0:	4b0c      	ldr	r3, [pc, #48]	; (1524 <system_clock_init+0x150>)
    14f2:	4798      	blx	r3
#endif
}
    14f4:	b00f      	add	sp, #60	; 0x3c
    14f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    14f8:	3b20      	subs	r3, #32
    14fa:	e7b1      	b.n	1460 <system_clock_init+0x8c>
    14fc:	40000800 	.word	0x40000800
    1500:	41004000 	.word	0x41004000
    1504:	00001769 	.word	0x00001769
    1508:	000011f5 	.word	0x000011f5
    150c:	0000132d 	.word	0x0000132d
    1510:	00806024 	.word	0x00806024
    1514:	000012ad 	.word	0x000012ad
    1518:	000011b9 	.word	0x000011b9
    151c:	00001531 	.word	0x00001531
    1520:	00001555 	.word	0x00001555
    1524:	0000160d 	.word	0x0000160d
    1528:	000016dd 	.word	0x000016dd
    152c:	40000400 	.word	0x40000400

00001530 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    1530:	4a06      	ldr	r2, [pc, #24]	; (154c <system_gclk_init+0x1c>)
    1532:	6993      	ldr	r3, [r2, #24]
    1534:	2108      	movs	r1, #8
    1536:	430b      	orrs	r3, r1
    1538:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    153a:	2201      	movs	r2, #1
    153c:	4b04      	ldr	r3, [pc, #16]	; (1550 <system_gclk_init+0x20>)
    153e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1540:	0019      	movs	r1, r3
    1542:	780b      	ldrb	r3, [r1, #0]
    1544:	4213      	tst	r3, r2
    1546:	d1fc      	bne.n	1542 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1548:	4770      	bx	lr
    154a:	46c0      	nop			; (mov r8, r8)
    154c:	40000400 	.word	0x40000400
    1550:	40000c00 	.word	0x40000c00

00001554 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1554:	b570      	push	{r4, r5, r6, lr}
    1556:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1558:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    155a:	780d      	ldrb	r5, [r1, #0]
    155c:	022d      	lsls	r5, r5, #8
    155e:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1560:	784b      	ldrb	r3, [r1, #1]
    1562:	2b00      	cmp	r3, #0
    1564:	d002      	beq.n	156c <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1566:	2380      	movs	r3, #128	; 0x80
    1568:	02db      	lsls	r3, r3, #11
    156a:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    156c:	7a4b      	ldrb	r3, [r1, #9]
    156e:	2b00      	cmp	r3, #0
    1570:	d002      	beq.n	1578 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1572:	2380      	movs	r3, #128	; 0x80
    1574:	031b      	lsls	r3, r3, #12
    1576:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1578:	6848      	ldr	r0, [r1, #4]
    157a:	2801      	cmp	r0, #1
    157c:	d910      	bls.n	15a0 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    157e:	1e43      	subs	r3, r0, #1
    1580:	4218      	tst	r0, r3
    1582:	d134      	bne.n	15ee <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1584:	2802      	cmp	r0, #2
    1586:	d930      	bls.n	15ea <system_gclk_gen_set_config+0x96>
    1588:	2302      	movs	r3, #2
    158a:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    158c:	3201      	adds	r2, #1
						mask <<= 1) {
    158e:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    1590:	4298      	cmp	r0, r3
    1592:	d8fb      	bhi.n	158c <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1594:	0212      	lsls	r2, r2, #8
    1596:	4332      	orrs	r2, r6
    1598:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    159a:	2380      	movs	r3, #128	; 0x80
    159c:	035b      	lsls	r3, r3, #13
    159e:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    15a0:	7a0b      	ldrb	r3, [r1, #8]
    15a2:	2b00      	cmp	r3, #0
    15a4:	d002      	beq.n	15ac <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    15a6:	2380      	movs	r3, #128	; 0x80
    15a8:	039b      	lsls	r3, r3, #14
    15aa:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    15ac:	4a13      	ldr	r2, [pc, #76]	; (15fc <system_gclk_gen_set_config+0xa8>)
    15ae:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    15b0:	b25b      	sxtb	r3, r3
    15b2:	2b00      	cmp	r3, #0
    15b4:	dbfb      	blt.n	15ae <system_gclk_gen_set_config+0x5a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    15b6:	4b12      	ldr	r3, [pc, #72]	; (1600 <system_gclk_gen_set_config+0xac>)
    15b8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    15ba:	4b12      	ldr	r3, [pc, #72]	; (1604 <system_gclk_gen_set_config+0xb0>)
    15bc:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    15be:	4a0f      	ldr	r2, [pc, #60]	; (15fc <system_gclk_gen_set_config+0xa8>)
    15c0:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    15c2:	b25b      	sxtb	r3, r3
    15c4:	2b00      	cmp	r3, #0
    15c6:	dbfb      	blt.n	15c0 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    15c8:	4b0c      	ldr	r3, [pc, #48]	; (15fc <system_gclk_gen_set_config+0xa8>)
    15ca:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    15cc:	001a      	movs	r2, r3
    15ce:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    15d0:	b25b      	sxtb	r3, r3
    15d2:	2b00      	cmp	r3, #0
    15d4:	dbfb      	blt.n	15ce <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    15d6:	4a09      	ldr	r2, [pc, #36]	; (15fc <system_gclk_gen_set_config+0xa8>)
    15d8:	6853      	ldr	r3, [r2, #4]
    15da:	2180      	movs	r1, #128	; 0x80
    15dc:	0249      	lsls	r1, r1, #9
    15de:	400b      	ands	r3, r1
    15e0:	431d      	orrs	r5, r3
    15e2:	6055      	str	r5, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    15e4:	4b08      	ldr	r3, [pc, #32]	; (1608 <system_gclk_gen_set_config+0xb4>)
    15e6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    15e8:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    15ea:	2200      	movs	r2, #0
    15ec:	e7d2      	b.n	1594 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    15ee:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    15f0:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    15f2:	2380      	movs	r3, #128	; 0x80
    15f4:	029b      	lsls	r3, r3, #10
    15f6:	431d      	orrs	r5, r3
    15f8:	e7d2      	b.n	15a0 <system_gclk_gen_set_config+0x4c>
    15fa:	46c0      	nop			; (mov r8, r8)
    15fc:	40000c00 	.word	0x40000c00
    1600:	00000181 	.word	0x00000181
    1604:	40000c08 	.word	0x40000c08
    1608:	000001c1 	.word	0x000001c1

0000160c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    160c:	b510      	push	{r4, lr}
    160e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1610:	4a0b      	ldr	r2, [pc, #44]	; (1640 <system_gclk_gen_enable+0x34>)
    1612:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1614:	b25b      	sxtb	r3, r3
    1616:	2b00      	cmp	r3, #0
    1618:	dbfb      	blt.n	1612 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    161a:	4b0a      	ldr	r3, [pc, #40]	; (1644 <system_gclk_gen_enable+0x38>)
    161c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    161e:	4b0a      	ldr	r3, [pc, #40]	; (1648 <system_gclk_gen_enable+0x3c>)
    1620:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1622:	4a07      	ldr	r2, [pc, #28]	; (1640 <system_gclk_gen_enable+0x34>)
    1624:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1626:	b25b      	sxtb	r3, r3
    1628:	2b00      	cmp	r3, #0
    162a:	dbfb      	blt.n	1624 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    162c:	4a04      	ldr	r2, [pc, #16]	; (1640 <system_gclk_gen_enable+0x34>)
    162e:	6851      	ldr	r1, [r2, #4]
    1630:	2380      	movs	r3, #128	; 0x80
    1632:	025b      	lsls	r3, r3, #9
    1634:	430b      	orrs	r3, r1
    1636:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    1638:	4b04      	ldr	r3, [pc, #16]	; (164c <system_gclk_gen_enable+0x40>)
    163a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    163c:	bd10      	pop	{r4, pc}
    163e:	46c0      	nop			; (mov r8, r8)
    1640:	40000c00 	.word	0x40000c00
    1644:	00000181 	.word	0x00000181
    1648:	40000c04 	.word	0x40000c04
    164c:	000001c1 	.word	0x000001c1

00001650 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1650:	b570      	push	{r4, r5, r6, lr}
    1652:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1654:	4a1a      	ldr	r2, [pc, #104]	; (16c0 <system_gclk_gen_get_hz+0x70>)
    1656:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1658:	b25b      	sxtb	r3, r3
    165a:	2b00      	cmp	r3, #0
    165c:	dbfb      	blt.n	1656 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    165e:	4b19      	ldr	r3, [pc, #100]	; (16c4 <system_gclk_gen_get_hz+0x74>)
    1660:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1662:	4b19      	ldr	r3, [pc, #100]	; (16c8 <system_gclk_gen_get_hz+0x78>)
    1664:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1666:	4a16      	ldr	r2, [pc, #88]	; (16c0 <system_gclk_gen_get_hz+0x70>)
    1668:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    166a:	b25b      	sxtb	r3, r3
    166c:	2b00      	cmp	r3, #0
    166e:	dbfb      	blt.n	1668 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1670:	4e13      	ldr	r6, [pc, #76]	; (16c0 <system_gclk_gen_get_hz+0x70>)
    1672:	6870      	ldr	r0, [r6, #4]
    1674:	04c0      	lsls	r0, r0, #19
    1676:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1678:	4b14      	ldr	r3, [pc, #80]	; (16cc <system_gclk_gen_get_hz+0x7c>)
    167a:	4798      	blx	r3
    167c:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    167e:	4b12      	ldr	r3, [pc, #72]	; (16c8 <system_gclk_gen_get_hz+0x78>)
    1680:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1682:	6876      	ldr	r6, [r6, #4]
    1684:	02f6      	lsls	r6, r6, #11
    1686:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1688:	4b11      	ldr	r3, [pc, #68]	; (16d0 <system_gclk_gen_get_hz+0x80>)
    168a:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    168c:	4a0c      	ldr	r2, [pc, #48]	; (16c0 <system_gclk_gen_get_hz+0x70>)
    168e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1690:	b25b      	sxtb	r3, r3
    1692:	2b00      	cmp	r3, #0
    1694:	dbfb      	blt.n	168e <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1696:	4b0a      	ldr	r3, [pc, #40]	; (16c0 <system_gclk_gen_get_hz+0x70>)
    1698:	689c      	ldr	r4, [r3, #8]
    169a:	0224      	lsls	r4, r4, #8
    169c:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    169e:	4b0d      	ldr	r3, [pc, #52]	; (16d4 <system_gclk_gen_get_hz+0x84>)
    16a0:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    16a2:	2e00      	cmp	r6, #0
    16a4:	d107      	bne.n	16b6 <system_gclk_gen_get_hz+0x66>
    16a6:	2c01      	cmp	r4, #1
    16a8:	d907      	bls.n	16ba <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    16aa:	0021      	movs	r1, r4
    16ac:	0028      	movs	r0, r5
    16ae:	4b0a      	ldr	r3, [pc, #40]	; (16d8 <system_gclk_gen_get_hz+0x88>)
    16b0:	4798      	blx	r3
    16b2:	0005      	movs	r5, r0
    16b4:	e001      	b.n	16ba <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    16b6:	3401      	adds	r4, #1
    16b8:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    16ba:	0028      	movs	r0, r5
    16bc:	bd70      	pop	{r4, r5, r6, pc}
    16be:	46c0      	nop			; (mov r8, r8)
    16c0:	40000c00 	.word	0x40000c00
    16c4:	00000181 	.word	0x00000181
    16c8:	40000c04 	.word	0x40000c04
    16cc:	00001125 	.word	0x00001125
    16d0:	40000c08 	.word	0x40000c08
    16d4:	000001c1 	.word	0x000001c1
    16d8:	00002f3d 	.word	0x00002f3d

000016dc <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    16dc:	b510      	push	{r4, lr}
    16de:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    16e0:	4b06      	ldr	r3, [pc, #24]	; (16fc <system_gclk_chan_enable+0x20>)
    16e2:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    16e4:	4b06      	ldr	r3, [pc, #24]	; (1700 <system_gclk_chan_enable+0x24>)
    16e6:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    16e8:	4a06      	ldr	r2, [pc, #24]	; (1704 <system_gclk_chan_enable+0x28>)
    16ea:	8853      	ldrh	r3, [r2, #2]
    16ec:	2180      	movs	r1, #128	; 0x80
    16ee:	01c9      	lsls	r1, r1, #7
    16f0:	430b      	orrs	r3, r1
    16f2:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    16f4:	4b04      	ldr	r3, [pc, #16]	; (1708 <system_gclk_chan_enable+0x2c>)
    16f6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    16f8:	bd10      	pop	{r4, pc}
    16fa:	46c0      	nop			; (mov r8, r8)
    16fc:	00000181 	.word	0x00000181
    1700:	40000c02 	.word	0x40000c02
    1704:	40000c00 	.word	0x40000c00
    1708:	000001c1 	.word	0x000001c1

0000170c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    170c:	b510      	push	{r4, lr}
    170e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1710:	4b0f      	ldr	r3, [pc, #60]	; (1750 <system_gclk_chan_disable+0x44>)
    1712:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1714:	4b0f      	ldr	r3, [pc, #60]	; (1754 <system_gclk_chan_disable+0x48>)
    1716:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1718:	4a0f      	ldr	r2, [pc, #60]	; (1758 <system_gclk_chan_disable+0x4c>)
    171a:	8853      	ldrh	r3, [r2, #2]
    171c:	051b      	lsls	r3, r3, #20
    171e:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1720:	8853      	ldrh	r3, [r2, #2]
    1722:	490e      	ldr	r1, [pc, #56]	; (175c <system_gclk_chan_disable+0x50>)
    1724:	400b      	ands	r3, r1
    1726:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1728:	8853      	ldrh	r3, [r2, #2]
    172a:	490d      	ldr	r1, [pc, #52]	; (1760 <system_gclk_chan_disable+0x54>)
    172c:	400b      	ands	r3, r1
    172e:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1730:	0011      	movs	r1, r2
    1732:	2280      	movs	r2, #128	; 0x80
    1734:	01d2      	lsls	r2, r2, #7
    1736:	884b      	ldrh	r3, [r1, #2]
    1738:	4213      	tst	r3, r2
    173a:	d1fc      	bne.n	1736 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    173c:	4906      	ldr	r1, [pc, #24]	; (1758 <system_gclk_chan_disable+0x4c>)
    173e:	884a      	ldrh	r2, [r1, #2]
    1740:	0203      	lsls	r3, r0, #8
    1742:	4806      	ldr	r0, [pc, #24]	; (175c <system_gclk_chan_disable+0x50>)
    1744:	4002      	ands	r2, r0
    1746:	4313      	orrs	r3, r2
    1748:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    174a:	4b06      	ldr	r3, [pc, #24]	; (1764 <system_gclk_chan_disable+0x58>)
    174c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    174e:	bd10      	pop	{r4, pc}
    1750:	00000181 	.word	0x00000181
    1754:	40000c02 	.word	0x40000c02
    1758:	40000c00 	.word	0x40000c00
    175c:	fffff0ff 	.word	0xfffff0ff
    1760:	ffffbfff 	.word	0xffffbfff
    1764:	000001c1 	.word	0x000001c1

00001768 <system_gclk_chan_set_config>:
{
    1768:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    176a:	780c      	ldrb	r4, [r1, #0]
    176c:	0224      	lsls	r4, r4, #8
    176e:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    1770:	4b02      	ldr	r3, [pc, #8]	; (177c <system_gclk_chan_set_config+0x14>)
    1772:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1774:	b2a4      	uxth	r4, r4
    1776:	4b02      	ldr	r3, [pc, #8]	; (1780 <system_gclk_chan_set_config+0x18>)
    1778:	805c      	strh	r4, [r3, #2]
}
    177a:	bd10      	pop	{r4, pc}
    177c:	0000170d 	.word	0x0000170d
    1780:	40000c00 	.word	0x40000c00

00001784 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1784:	b510      	push	{r4, lr}
    1786:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1788:	4b06      	ldr	r3, [pc, #24]	; (17a4 <system_gclk_chan_get_hz+0x20>)
    178a:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    178c:	4b06      	ldr	r3, [pc, #24]	; (17a8 <system_gclk_chan_get_hz+0x24>)
    178e:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1790:	4b06      	ldr	r3, [pc, #24]	; (17ac <system_gclk_chan_get_hz+0x28>)
    1792:	885c      	ldrh	r4, [r3, #2]
    1794:	0524      	lsls	r4, r4, #20
    1796:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    1798:	4b05      	ldr	r3, [pc, #20]	; (17b0 <system_gclk_chan_get_hz+0x2c>)
    179a:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    179c:	0020      	movs	r0, r4
    179e:	4b05      	ldr	r3, [pc, #20]	; (17b4 <system_gclk_chan_get_hz+0x30>)
    17a0:	4798      	blx	r3
}
    17a2:	bd10      	pop	{r4, pc}
    17a4:	00000181 	.word	0x00000181
    17a8:	40000c02 	.word	0x40000c02
    17ac:	40000c00 	.word	0x40000c00
    17b0:	000001c1 	.word	0x000001c1
    17b4:	00001651 	.word	0x00001651

000017b8 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    17b8:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    17ba:	78d3      	ldrb	r3, [r2, #3]
    17bc:	2b00      	cmp	r3, #0
    17be:	d135      	bne.n	182c <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    17c0:	7813      	ldrb	r3, [r2, #0]
    17c2:	2b80      	cmp	r3, #128	; 0x80
    17c4:	d029      	beq.n	181a <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    17c6:	061b      	lsls	r3, r3, #24
    17c8:	2480      	movs	r4, #128	; 0x80
    17ca:	0264      	lsls	r4, r4, #9
    17cc:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    17ce:	7854      	ldrb	r4, [r2, #1]
    17d0:	2502      	movs	r5, #2
    17d2:	43ac      	bics	r4, r5
    17d4:	d106      	bne.n	17e4 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    17d6:	7894      	ldrb	r4, [r2, #2]
    17d8:	2c00      	cmp	r4, #0
    17da:	d120      	bne.n	181e <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    17dc:	2480      	movs	r4, #128	; 0x80
    17de:	02a4      	lsls	r4, r4, #10
    17e0:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    17e2:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    17e4:	7854      	ldrb	r4, [r2, #1]
    17e6:	3c01      	subs	r4, #1
    17e8:	2c01      	cmp	r4, #1
    17ea:	d91c      	bls.n	1826 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    17ec:	040d      	lsls	r5, r1, #16
    17ee:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    17f0:	24a0      	movs	r4, #160	; 0xa0
    17f2:	05e4      	lsls	r4, r4, #23
    17f4:	432c      	orrs	r4, r5
    17f6:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    17f8:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    17fa:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    17fc:	24d0      	movs	r4, #208	; 0xd0
    17fe:	0624      	lsls	r4, r4, #24
    1800:	432c      	orrs	r4, r5
    1802:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1804:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1806:	78d4      	ldrb	r4, [r2, #3]
    1808:	2c00      	cmp	r4, #0
    180a:	d122      	bne.n	1852 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    180c:	035b      	lsls	r3, r3, #13
    180e:	d51c      	bpl.n	184a <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1810:	7893      	ldrb	r3, [r2, #2]
    1812:	2b01      	cmp	r3, #1
    1814:	d01e      	beq.n	1854 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    1816:	6141      	str	r1, [r0, #20]
    1818:	e017      	b.n	184a <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    181a:	2300      	movs	r3, #0
    181c:	e7d7      	b.n	17ce <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    181e:	24c0      	movs	r4, #192	; 0xc0
    1820:	02e4      	lsls	r4, r4, #11
    1822:	4323      	orrs	r3, r4
    1824:	e7dd      	b.n	17e2 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1826:	4c0d      	ldr	r4, [pc, #52]	; (185c <_system_pinmux_config+0xa4>)
    1828:	4023      	ands	r3, r4
    182a:	e7df      	b.n	17ec <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    182c:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    182e:	040c      	lsls	r4, r1, #16
    1830:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1832:	23a0      	movs	r3, #160	; 0xa0
    1834:	05db      	lsls	r3, r3, #23
    1836:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1838:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    183a:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    183c:	23d0      	movs	r3, #208	; 0xd0
    183e:	061b      	lsls	r3, r3, #24
    1840:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1842:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    1844:	78d3      	ldrb	r3, [r2, #3]
    1846:	2b00      	cmp	r3, #0
    1848:	d103      	bne.n	1852 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    184a:	7853      	ldrb	r3, [r2, #1]
    184c:	3b01      	subs	r3, #1
    184e:	2b01      	cmp	r3, #1
    1850:	d902      	bls.n	1858 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    1852:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    1854:	6181      	str	r1, [r0, #24]
    1856:	e7f8      	b.n	184a <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    1858:	6081      	str	r1, [r0, #8]
}
    185a:	e7fa      	b.n	1852 <_system_pinmux_config+0x9a>
    185c:	fffbffff 	.word	0xfffbffff

00001860 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1860:	b510      	push	{r4, lr}
    1862:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1864:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1866:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1868:	2900      	cmp	r1, #0
    186a:	d104      	bne.n	1876 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    186c:	0943      	lsrs	r3, r0, #5
    186e:	01db      	lsls	r3, r3, #7
    1870:	4905      	ldr	r1, [pc, #20]	; (1888 <system_pinmux_pin_set_config+0x28>)
    1872:	468c      	mov	ip, r1
    1874:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1876:	241f      	movs	r4, #31
    1878:	4020      	ands	r0, r4
    187a:	2101      	movs	r1, #1
    187c:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    187e:	0018      	movs	r0, r3
    1880:	4b02      	ldr	r3, [pc, #8]	; (188c <system_pinmux_pin_set_config+0x2c>)
    1882:	4798      	blx	r3
}
    1884:	bd10      	pop	{r4, pc}
    1886:	46c0      	nop			; (mov r8, r8)
    1888:	41004400 	.word	0x41004400
    188c:	000017b9 	.word	0x000017b9

00001890 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1890:	4770      	bx	lr
	...

00001894 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1894:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1896:	4b05      	ldr	r3, [pc, #20]	; (18ac <system_init+0x18>)
    1898:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    189a:	4b05      	ldr	r3, [pc, #20]	; (18b0 <system_init+0x1c>)
    189c:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    189e:	4b05      	ldr	r3, [pc, #20]	; (18b4 <system_init+0x20>)
    18a0:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    18a2:	4b05      	ldr	r3, [pc, #20]	; (18b8 <system_init+0x24>)
    18a4:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    18a6:	4b05      	ldr	r3, [pc, #20]	; (18bc <system_init+0x28>)
    18a8:	4798      	blx	r3
}
    18aa:	bd10      	pop	{r4, pc}
    18ac:	000013d5 	.word	0x000013d5
    18b0:	000001f1 	.word	0x000001f1
    18b4:	00001891 	.word	0x00001891
    18b8:	00001891 	.word	0x00001891
    18bc:	00001891 	.word	0x00001891

000018c0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    18c0:	e7fe      	b.n	18c0 <Dummy_Handler>
	...

000018c4 <Reset_Handler>:
{
    18c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    18c6:	4a2a      	ldr	r2, [pc, #168]	; (1970 <Reset_Handler+0xac>)
    18c8:	4b2a      	ldr	r3, [pc, #168]	; (1974 <Reset_Handler+0xb0>)
    18ca:	429a      	cmp	r2, r3
    18cc:	d011      	beq.n	18f2 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    18ce:	001a      	movs	r2, r3
    18d0:	4b29      	ldr	r3, [pc, #164]	; (1978 <Reset_Handler+0xb4>)
    18d2:	429a      	cmp	r2, r3
    18d4:	d20d      	bcs.n	18f2 <Reset_Handler+0x2e>
    18d6:	4a29      	ldr	r2, [pc, #164]	; (197c <Reset_Handler+0xb8>)
    18d8:	3303      	adds	r3, #3
    18da:	1a9b      	subs	r3, r3, r2
    18dc:	089b      	lsrs	r3, r3, #2
    18de:	3301      	adds	r3, #1
    18e0:	009b      	lsls	r3, r3, #2
    18e2:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    18e4:	4823      	ldr	r0, [pc, #140]	; (1974 <Reset_Handler+0xb0>)
    18e6:	4922      	ldr	r1, [pc, #136]	; (1970 <Reset_Handler+0xac>)
    18e8:	588c      	ldr	r4, [r1, r2]
    18ea:	5084      	str	r4, [r0, r2]
    18ec:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    18ee:	429a      	cmp	r2, r3
    18f0:	d1fa      	bne.n	18e8 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    18f2:	4a23      	ldr	r2, [pc, #140]	; (1980 <Reset_Handler+0xbc>)
    18f4:	4b23      	ldr	r3, [pc, #140]	; (1984 <Reset_Handler+0xc0>)
    18f6:	429a      	cmp	r2, r3
    18f8:	d20a      	bcs.n	1910 <Reset_Handler+0x4c>
    18fa:	43d3      	mvns	r3, r2
    18fc:	4921      	ldr	r1, [pc, #132]	; (1984 <Reset_Handler+0xc0>)
    18fe:	185b      	adds	r3, r3, r1
    1900:	2103      	movs	r1, #3
    1902:	438b      	bics	r3, r1
    1904:	3304      	adds	r3, #4
    1906:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    1908:	2100      	movs	r1, #0
    190a:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    190c:	4293      	cmp	r3, r2
    190e:	d1fc      	bne.n	190a <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1910:	4a1d      	ldr	r2, [pc, #116]	; (1988 <Reset_Handler+0xc4>)
    1912:	21ff      	movs	r1, #255	; 0xff
    1914:	4b1d      	ldr	r3, [pc, #116]	; (198c <Reset_Handler+0xc8>)
    1916:	438b      	bics	r3, r1
    1918:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    191a:	39fd      	subs	r1, #253	; 0xfd
    191c:	2390      	movs	r3, #144	; 0x90
    191e:	005b      	lsls	r3, r3, #1
    1920:	4a1b      	ldr	r2, [pc, #108]	; (1990 <Reset_Handler+0xcc>)
    1922:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1924:	4a1b      	ldr	r2, [pc, #108]	; (1994 <Reset_Handler+0xd0>)
    1926:	78d3      	ldrb	r3, [r2, #3]
    1928:	2503      	movs	r5, #3
    192a:	43ab      	bics	r3, r5
    192c:	2402      	movs	r4, #2
    192e:	4323      	orrs	r3, r4
    1930:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1932:	78d3      	ldrb	r3, [r2, #3]
    1934:	270c      	movs	r7, #12
    1936:	43bb      	bics	r3, r7
    1938:	2608      	movs	r6, #8
    193a:	4333      	orrs	r3, r6
    193c:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    193e:	4b16      	ldr	r3, [pc, #88]	; (1998 <Reset_Handler+0xd4>)
    1940:	7b98      	ldrb	r0, [r3, #14]
    1942:	2230      	movs	r2, #48	; 0x30
    1944:	4390      	bics	r0, r2
    1946:	2220      	movs	r2, #32
    1948:	4310      	orrs	r0, r2
    194a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    194c:	7b99      	ldrb	r1, [r3, #14]
    194e:	43b9      	bics	r1, r7
    1950:	4331      	orrs	r1, r6
    1952:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1954:	7b9a      	ldrb	r2, [r3, #14]
    1956:	43aa      	bics	r2, r5
    1958:	4322      	orrs	r2, r4
    195a:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    195c:	4a0f      	ldr	r2, [pc, #60]	; (199c <Reset_Handler+0xd8>)
    195e:	6853      	ldr	r3, [r2, #4]
    1960:	2180      	movs	r1, #128	; 0x80
    1962:	430b      	orrs	r3, r1
    1964:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    1966:	4b0e      	ldr	r3, [pc, #56]	; (19a0 <Reset_Handler+0xdc>)
    1968:	4798      	blx	r3
        main();
    196a:	4b0e      	ldr	r3, [pc, #56]	; (19a4 <Reset_Handler+0xe0>)
    196c:	4798      	blx	r3
    196e:	e7fe      	b.n	196e <Reset_Handler+0xaa>
    1970:	00006350 	.word	0x00006350
    1974:	20000000 	.word	0x20000000
    1978:	20000074 	.word	0x20000074
    197c:	20000004 	.word	0x20000004
    1980:	20000074 	.word	0x20000074
    1984:	2000019c 	.word	0x2000019c
    1988:	e000ed00 	.word	0xe000ed00
    198c:	00000000 	.word	0x00000000
    1990:	41007000 	.word	0x41007000
    1994:	41005000 	.word	0x41005000
    1998:	41004800 	.word	0x41004800
    199c:	41004000 	.word	0x41004000
    19a0:	000030a9 	.word	0x000030a9
    19a4:	00002e01 	.word	0x00002e01

000019a8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    19a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    19aa:	46c6      	mov	lr, r8
    19ac:	b500      	push	{lr}
    19ae:	000c      	movs	r4, r1
    19b0:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    19b2:	2800      	cmp	r0, #0
    19b4:	d10f      	bne.n	19d6 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    19b6:	2a00      	cmp	r2, #0
    19b8:	dd11      	ble.n	19de <_read+0x36>
    19ba:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    19bc:	4e09      	ldr	r6, [pc, #36]	; (19e4 <_read+0x3c>)
    19be:	4d0a      	ldr	r5, [pc, #40]	; (19e8 <_read+0x40>)
    19c0:	6830      	ldr	r0, [r6, #0]
    19c2:	0021      	movs	r1, r4
    19c4:	682b      	ldr	r3, [r5, #0]
    19c6:	4798      	blx	r3
		ptr++;
    19c8:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    19ca:	42bc      	cmp	r4, r7
    19cc:	d1f8      	bne.n	19c0 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    19ce:	4640      	mov	r0, r8
    19d0:	bc04      	pop	{r2}
    19d2:	4690      	mov	r8, r2
    19d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    19d6:	2301      	movs	r3, #1
    19d8:	425b      	negs	r3, r3
    19da:	4698      	mov	r8, r3
    19dc:	e7f7      	b.n	19ce <_read+0x26>
	for (; len > 0; --len) {
    19de:	4680      	mov	r8, r0
    19e0:	e7f5      	b.n	19ce <_read+0x26>
    19e2:	46c0      	nop			; (mov r8, r8)
    19e4:	20000100 	.word	0x20000100
    19e8:	200000f8 	.word	0x200000f8

000019ec <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    19ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    19ee:	46c6      	mov	lr, r8
    19f0:	b500      	push	{lr}
    19f2:	000e      	movs	r6, r1
    19f4:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    19f6:	3801      	subs	r0, #1
    19f8:	2802      	cmp	r0, #2
    19fa:	d810      	bhi.n	1a1e <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    19fc:	2a00      	cmp	r2, #0
    19fe:	d011      	beq.n	1a24 <_write+0x38>
    1a00:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    1a02:	4b0c      	ldr	r3, [pc, #48]	; (1a34 <_write+0x48>)
    1a04:	4698      	mov	r8, r3
    1a06:	4f0c      	ldr	r7, [pc, #48]	; (1a38 <_write+0x4c>)
    1a08:	4643      	mov	r3, r8
    1a0a:	6818      	ldr	r0, [r3, #0]
    1a0c:	5d31      	ldrb	r1, [r6, r4]
    1a0e:	683b      	ldr	r3, [r7, #0]
    1a10:	4798      	blx	r3
    1a12:	2800      	cmp	r0, #0
    1a14:	db08      	blt.n	1a28 <_write+0x3c>
			return -1;
		}
		++nChars;
    1a16:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    1a18:	42a5      	cmp	r5, r4
    1a1a:	d1f5      	bne.n	1a08 <_write+0x1c>
    1a1c:	e006      	b.n	1a2c <_write+0x40>
		return -1;
    1a1e:	2401      	movs	r4, #1
    1a20:	4264      	negs	r4, r4
    1a22:	e003      	b.n	1a2c <_write+0x40>
	for (; len != 0; --len) {
    1a24:	0014      	movs	r4, r2
    1a26:	e001      	b.n	1a2c <_write+0x40>
			return -1;
    1a28:	2401      	movs	r4, #1
    1a2a:	4264      	negs	r4, r4
	}
	return nChars;
}
    1a2c:	0020      	movs	r0, r4
    1a2e:	bc04      	pop	{r2}
    1a30:	4690      	mov	r8, r2
    1a32:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1a34:	20000100 	.word	0x20000100
    1a38:	200000fc 	.word	0x200000fc

00001a3c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    1a3c:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    1a3e:	4a06      	ldr	r2, [pc, #24]	; (1a58 <_sbrk+0x1c>)
    1a40:	6812      	ldr	r2, [r2, #0]
    1a42:	2a00      	cmp	r2, #0
    1a44:	d004      	beq.n	1a50 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    1a46:	4a04      	ldr	r2, [pc, #16]	; (1a58 <_sbrk+0x1c>)
    1a48:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    1a4a:	18c3      	adds	r3, r0, r3
    1a4c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    1a4e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    1a50:	4902      	ldr	r1, [pc, #8]	; (1a5c <_sbrk+0x20>)
    1a52:	4a01      	ldr	r2, [pc, #4]	; (1a58 <_sbrk+0x1c>)
    1a54:	6011      	str	r1, [r2, #0]
    1a56:	e7f6      	b.n	1a46 <_sbrk+0xa>
    1a58:	200000cc 	.word	0x200000cc
    1a5c:	200021a0 	.word	0x200021a0

00001a60 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    1a60:	2001      	movs	r0, #1
    1a62:	4240      	negs	r0, r0
    1a64:	4770      	bx	lr

00001a66 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    1a66:	2380      	movs	r3, #128	; 0x80
    1a68:	019b      	lsls	r3, r3, #6
    1a6a:	604b      	str	r3, [r1, #4]

	return 0;
}
    1a6c:	2000      	movs	r0, #0
    1a6e:	4770      	bx	lr

00001a70 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    1a70:	2001      	movs	r0, #1
    1a72:	4770      	bx	lr

00001a74 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    1a74:	2000      	movs	r0, #0
    1a76:	4770      	bx	lr

00001a78 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    1a78:	b570      	push	{r4, r5, r6, lr}
    1a7a:	b082      	sub	sp, #8
    1a7c:	0005      	movs	r5, r0
    1a7e:	000e      	movs	r6, r1
	uint16_t temp = 0;
    1a80:	2200      	movs	r2, #0
    1a82:	466b      	mov	r3, sp
    1a84:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    1a86:	4c06      	ldr	r4, [pc, #24]	; (1aa0 <usart_serial_getchar+0x28>)
    1a88:	466b      	mov	r3, sp
    1a8a:	1d99      	adds	r1, r3, #6
    1a8c:	0028      	movs	r0, r5
    1a8e:	47a0      	blx	r4
    1a90:	2800      	cmp	r0, #0
    1a92:	d1f9      	bne.n	1a88 <usart_serial_getchar+0x10>

	*c = temp;
    1a94:	466b      	mov	r3, sp
    1a96:	3306      	adds	r3, #6
    1a98:	881b      	ldrh	r3, [r3, #0]
    1a9a:	7033      	strb	r3, [r6, #0]
}
    1a9c:	b002      	add	sp, #8
    1a9e:	bd70      	pop	{r4, r5, r6, pc}
    1aa0:	00000f27 	.word	0x00000f27

00001aa4 <usart_serial_putchar>:
{
    1aa4:	b570      	push	{r4, r5, r6, lr}
    1aa6:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    1aa8:	b28c      	uxth	r4, r1
    1aaa:	4e03      	ldr	r6, [pc, #12]	; (1ab8 <usart_serial_putchar+0x14>)
    1aac:	0021      	movs	r1, r4
    1aae:	0028      	movs	r0, r5
    1ab0:	47b0      	blx	r6
    1ab2:	2800      	cmp	r0, #0
    1ab4:	d1fa      	bne.n	1aac <usart_serial_putchar+0x8>
}
    1ab6:	bd70      	pop	{r4, r5, r6, pc}
    1ab8:	00000f01 	.word	0x00000f01

00001abc <configure_console>:
#include "config_usart.h"

void configure_console(void)
{
    1abc:	b570      	push	{r4, r5, r6, lr}
    1abe:	b090      	sub	sp, #64	; 0x40
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    1ac0:	2380      	movs	r3, #128	; 0x80
    1ac2:	05db      	lsls	r3, r3, #23
    1ac4:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    1ac6:	2300      	movs	r3, #0
    1ac8:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    1aca:	22ff      	movs	r2, #255	; 0xff
    1acc:	4669      	mov	r1, sp
    1ace:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    1ad0:	2200      	movs	r2, #0
    1ad2:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    1ad4:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
    1ad6:	2196      	movs	r1, #150	; 0x96
    1ad8:	0189      	lsls	r1, r1, #6
    1ada:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
    1adc:	2101      	movs	r1, #1
    1ade:	2024      	movs	r0, #36	; 0x24
    1ae0:	466c      	mov	r4, sp
    1ae2:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    1ae4:	3001      	adds	r0, #1
    1ae6:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    1ae8:	3125      	adds	r1, #37	; 0x25
    1aea:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    1aec:	3101      	adds	r1, #1
    1aee:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    1af0:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    1af2:	3105      	adds	r1, #5
    1af4:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    1af6:	3101      	adds	r1, #1
    1af8:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    1afa:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    1afc:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    1afe:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    1b00:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    1b02:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    1b04:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    1b06:	2313      	movs	r3, #19
    1b08:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    1b0a:	7762      	strb	r2, [r4, #29]
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);

	config_usart.baudrate    = SERCOMBAUD;
	config_usart.mux_setting = SERCOMMUX;
    1b0c:	2380      	movs	r3, #128	; 0x80
    1b0e:	035b      	lsls	r3, r3, #13
    1b10:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = SERCOMPAD0;
    1b12:	4b1e      	ldr	r3, [pc, #120]	; (1b8c <configure_console+0xd0>)
    1b14:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = SERCOMPAD1;
    1b16:	4b1e      	ldr	r3, [pc, #120]	; (1b90 <configure_console+0xd4>)
    1b18:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = SERCOMPAD2;
    1b1a:	2301      	movs	r3, #1
    1b1c:	425b      	negs	r3, r3
    1b1e:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = SERCOMPAD3;
    1b20:	930f      	str	r3, [sp, #60]	; 0x3c

	while (usart_init(&usart_instance,	 SERCOMMODULE, &config_usart) != STATUS_OK) { }
    1b22:	4d1c      	ldr	r5, [pc, #112]	; (1b94 <configure_console+0xd8>)
    1b24:	4c1c      	ldr	r4, [pc, #112]	; (1b98 <configure_console+0xdc>)
    1b26:	466a      	mov	r2, sp
    1b28:	491c      	ldr	r1, [pc, #112]	; (1b9c <configure_console+0xe0>)
    1b2a:	0028      	movs	r0, r5
    1b2c:	47a0      	blx	r4
    1b2e:	2800      	cmp	r0, #0
    1b30:	d1f9      	bne.n	1b26 <configure_console+0x6a>
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    1b32:	4c18      	ldr	r4, [pc, #96]	; (1b94 <configure_console+0xd8>)
    1b34:	4b1a      	ldr	r3, [pc, #104]	; (1ba0 <configure_console+0xe4>)
    1b36:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    1b38:	4a1a      	ldr	r2, [pc, #104]	; (1ba4 <configure_console+0xe8>)
    1b3a:	4b1b      	ldr	r3, [pc, #108]	; (1ba8 <configure_console+0xec>)
    1b3c:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    1b3e:	4a1b      	ldr	r2, [pc, #108]	; (1bac <configure_console+0xf0>)
    1b40:	4b1b      	ldr	r3, [pc, #108]	; (1bb0 <configure_console+0xf4>)
    1b42:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    1b44:	466a      	mov	r2, sp
    1b46:	4915      	ldr	r1, [pc, #84]	; (1b9c <configure_console+0xe0>)
    1b48:	0020      	movs	r0, r4
    1b4a:	4b13      	ldr	r3, [pc, #76]	; (1b98 <configure_console+0xdc>)
    1b4c:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    1b4e:	4e19      	ldr	r6, [pc, #100]	; (1bb4 <configure_console+0xf8>)
    1b50:	6833      	ldr	r3, [r6, #0]
    1b52:	6898      	ldr	r0, [r3, #8]
    1b54:	2100      	movs	r1, #0
    1b56:	4d18      	ldr	r5, [pc, #96]	; (1bb8 <configure_console+0xfc>)
    1b58:	47a8      	blx	r5
	setbuf(stdin, NULL);
    1b5a:	6833      	ldr	r3, [r6, #0]
    1b5c:	6858      	ldr	r0, [r3, #4]
    1b5e:	2100      	movs	r1, #0
    1b60:	47a8      	blx	r5
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1b62:	6825      	ldr	r5, [r4, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1b64:	0028      	movs	r0, r5
    1b66:	4b15      	ldr	r3, [pc, #84]	; (1bbc <configure_console+0x100>)
    1b68:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1b6a:	231f      	movs	r3, #31
    1b6c:	4018      	ands	r0, r3
    1b6e:	3b1e      	subs	r3, #30
    1b70:	4083      	lsls	r3, r0
    1b72:	4a13      	ldr	r2, [pc, #76]	; (1bc0 <configure_console+0x104>)
    1b74:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1b76:	6822      	ldr	r2, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
    1b78:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1b7a:	2b00      	cmp	r3, #0
    1b7c:	d1fc      	bne.n	1b78 <configure_console+0xbc>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1b7e:	682b      	ldr	r3, [r5, #0]
    1b80:	2202      	movs	r2, #2
    1b82:	4313      	orrs	r3, r2
    1b84:	602b      	str	r3, [r5, #0]

	stdio_serial_init(&usart_instance, SERCOMMODULE, &config_usart);
	usart_enable(&usart_instance);
}
    1b86:	b010      	add	sp, #64	; 0x40
    1b88:	bd70      	pop	{r4, r5, r6, pc}
    1b8a:	46c0      	nop			; (mov r8, r8)
    1b8c:	00080003 	.word	0x00080003
    1b90:	00090003 	.word	0x00090003
    1b94:	20000104 	.word	0x20000104
    1b98:	00000bc5 	.word	0x00000bc5
    1b9c:	42001000 	.word	0x42001000
    1ba0:	20000100 	.word	0x20000100
    1ba4:	00001aa5 	.word	0x00001aa5
    1ba8:	200000fc 	.word	0x200000fc
    1bac:	00001a79 	.word	0x00001a79
    1bb0:	200000f8 	.word	0x200000f8
    1bb4:	20000010 	.word	0x20000010
    1bb8:	000033b9 	.word	0x000033b9
    1bbc:	00000b35 	.word	0x00000b35
    1bc0:	e000e100 	.word	0xe000e100

00001bc4 <configure_usart_USB>:
*/


/**************************SERCOM STUFF*******************************/
void configure_usart_USB(void)
{
    1bc4:	b530      	push	{r4, r5, lr}
    1bc6:	b091      	sub	sp, #68	; 0x44
	config->data_order       = USART_DATAORDER_LSB;
    1bc8:	2380      	movs	r3, #128	; 0x80
    1bca:	05db      	lsls	r3, r3, #23
    1bcc:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    1bce:	2300      	movs	r3, #0
    1bd0:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    1bd2:	22ff      	movs	r2, #255	; 0xff
    1bd4:	4669      	mov	r1, sp
    1bd6:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    1bd8:	2200      	movs	r2, #0
    1bda:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    1bdc:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
    1bde:	2196      	movs	r1, #150	; 0x96
    1be0:	0189      	lsls	r1, r1, #6
    1be2:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
    1be4:	2101      	movs	r1, #1
    1be6:	2024      	movs	r0, #36	; 0x24
    1be8:	466c      	mov	r4, sp
    1bea:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    1bec:	3001      	adds	r0, #1
    1bee:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    1bf0:	3125      	adds	r1, #37	; 0x25
    1bf2:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    1bf4:	3101      	adds	r1, #1
    1bf6:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    1bf8:	930a      	str	r3, [sp, #40]	; 0x28
	config->run_in_standby   = false;
    1bfa:	3105      	adds	r1, #5
    1bfc:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    1bfe:	3101      	adds	r1, #1
    1c00:	5463      	strb	r3, [r4, r1]
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    1c02:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    1c04:	8223      	strh	r3, [r4, #16]
	config->lin_slave_enable      = false;
    1c06:	76e3      	strb	r3, [r4, #27]
	config->immediate_buffer_overflow_notification  = false;
    1c08:	7622      	strb	r2, [r4, #24]
	config->start_frame_detection_enable            = false;
    1c0a:	7722      	strb	r2, [r4, #28]
	config->encoding_format_enable                  = false;
    1c0c:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    1c0e:	2313      	movs	r3, #19
    1c10:	76a3      	strb	r3, [r4, #26]
	config->collision_detection_enable              = false;
    1c12:	7762      	strb	r2, [r4, #29]
	struct usart_config config_usart_USB;
	usart_get_config_defaults(&config_usart_USB);

		config_usart_USB.baudrate    = 9600;
		config_usart_USB.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    1c14:	2380      	movs	r3, #128	; 0x80
    1c16:	035b      	lsls	r3, r3, #13
    1c18:	9303      	str	r3, [sp, #12]
		config_usart_USB.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    1c1a:	4b12      	ldr	r3, [pc, #72]	; (1c64 <configure_usart_USB+0xa0>)
    1c1c:	930c      	str	r3, [sp, #48]	; 0x30
		config_usart_USB.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    1c1e:	4b12      	ldr	r3, [pc, #72]	; (1c68 <configure_usart_USB+0xa4>)
    1c20:	930d      	str	r3, [sp, #52]	; 0x34
		config_usart_USB.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    1c22:	2301      	movs	r3, #1
    1c24:	425b      	negs	r3, r3
    1c26:	930e      	str	r3, [sp, #56]	; 0x38
		config_usart_USB.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    1c28:	930f      	str	r3, [sp, #60]	; 0x3c
		while (usart_init(&usart_USB,
    1c2a:	4d10      	ldr	r5, [pc, #64]	; (1c6c <configure_usart_USB+0xa8>)
    1c2c:	4c10      	ldr	r4, [pc, #64]	; (1c70 <configure_usart_USB+0xac>)
    1c2e:	466a      	mov	r2, sp
    1c30:	4910      	ldr	r1, [pc, #64]	; (1c74 <configure_usart_USB+0xb0>)
    1c32:	0028      	movs	r0, r5
    1c34:	47a0      	blx	r4
    1c36:	2800      	cmp	r0, #0
    1c38:	d1f9      	bne.n	1c2e <configure_usart_USB+0x6a>
	SercomUsart *const usart_hw = &(module->hw->USART);
    1c3a:	4d0c      	ldr	r5, [pc, #48]	; (1c6c <configure_usart_USB+0xa8>)
    1c3c:	682c      	ldr	r4, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1c3e:	0020      	movs	r0, r4
    1c40:	4b0d      	ldr	r3, [pc, #52]	; (1c78 <configure_usart_USB+0xb4>)
    1c42:	4798      	blx	r3
    1c44:	231f      	movs	r3, #31
    1c46:	4018      	ands	r0, r3
    1c48:	3b1e      	subs	r3, #30
    1c4a:	4083      	lsls	r3, r0
    1c4c:	4a0b      	ldr	r2, [pc, #44]	; (1c7c <configure_usart_USB+0xb8>)
    1c4e:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1c50:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1c52:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1c54:	2b00      	cmp	r3, #0
    1c56:	d1fc      	bne.n	1c52 <configure_usart_USB+0x8e>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1c58:	6823      	ldr	r3, [r4, #0]
    1c5a:	2202      	movs	r2, #2
    1c5c:	4313      	orrs	r3, r2
    1c5e:	6023      	str	r3, [r4, #0]
		EDBG_CDC_MODULE, &config_usart_USB) != STATUS_OK) {
		}

	usart_enable(&usart_USB);
}
    1c60:	b011      	add	sp, #68	; 0x44
    1c62:	bd30      	pop	{r4, r5, pc}
    1c64:	00160002 	.word	0x00160002
    1c68:	00170002 	.word	0x00170002
    1c6c:	2000013c 	.word	0x2000013c
    1c70:	00000bc5 	.word	0x00000bc5
    1c74:	42001400 	.word	0x42001400
    1c78:	00000b35 	.word	0x00000b35
    1c7c:	e000e100 	.word	0xe000e100

00001c80 <configure_adc>:

void configure_adc(void)
{
    1c80:	b510      	push	{r4, lr}
    1c82:	b08c      	sub	sp, #48	; 0x30
	struct adc_config config_adc;
	adc_get_config_defaults(&config_adc);
    1c84:	4668      	mov	r0, sp
    1c86:	4b10      	ldr	r3, [pc, #64]	; (1cc8 <configure_adc+0x48>)
    1c88:	4798      	blx	r3
	adc_init(&adc_instance, ADC, &config_adc);
    1c8a:	4c10      	ldr	r4, [pc, #64]	; (1ccc <configure_adc+0x4c>)
    1c8c:	466a      	mov	r2, sp
    1c8e:	4910      	ldr	r1, [pc, #64]	; (1cd0 <configure_adc+0x50>)
    1c90:	0020      	movs	r0, r4
    1c92:	4b10      	ldr	r3, [pc, #64]	; (1cd4 <configure_adc+0x54>)
    1c94:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    1c96:	6822      	ldr	r2, [r4, #0]
    1c98:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    1c9a:	b25b      	sxtb	r3, r3
    1c9c:	2b00      	cmp	r3, #0
    1c9e:	dbfb      	blt.n	1c98 <configure_adc+0x18>
    1ca0:	2180      	movs	r1, #128	; 0x80
    1ca2:	0409      	lsls	r1, r1, #16
    1ca4:	4b0c      	ldr	r3, [pc, #48]	; (1cd8 <configure_adc+0x58>)
    1ca6:	6019      	str	r1, [r3, #0]
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    1ca8:	230f      	movs	r3, #15
    1caa:	7593      	strb	r3, [r2, #22]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    1cac:	7613      	strb	r3, [r2, #24]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    1cae:	7813      	ldrb	r3, [r2, #0]
    1cb0:	2102      	movs	r1, #2
    1cb2:	430b      	orrs	r3, r1
    1cb4:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
    1cb6:	4b05      	ldr	r3, [pc, #20]	; (1ccc <configure_adc+0x4c>)
    1cb8:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1cba:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    1cbc:	b25b      	sxtb	r3, r3
    1cbe:	2b00      	cmp	r3, #0
    1cc0:	dbfb      	blt.n	1cba <configure_adc+0x3a>
	adc_enable(&adc_instance);
}
    1cc2:	b00c      	add	sp, #48	; 0x30
    1cc4:	bd10      	pop	{r4, pc}
    1cc6:	46c0      	nop			; (mov r8, r8)
    1cc8:	00000229 	.word	0x00000229
    1ccc:	20000174 	.word	0x20000174
    1cd0:	42004000 	.word	0x42004000
    1cd4:	00000271 	.word	0x00000271
    1cd8:	e000e100 	.word	0xe000e100

00001cdc <create>:

node* create(int data,node* next)
{
    1cdc:	b570      	push	{r4, r5, r6, lr}
    1cde:	0005      	movs	r5, r0
    1ce0:	000c      	movs	r4, r1
	node* new_node = (node*)malloc(sizeof(node));
    1ce2:	2008      	movs	r0, #8
    1ce4:	4b02      	ldr	r3, [pc, #8]	; (1cf0 <create+0x14>)
    1ce6:	4798      	blx	r3
	new_node->data = data;
    1ce8:	6005      	str	r5, [r0, #0]
	new_node->next = next;
    1cea:	6044      	str	r4, [r0, #4]
	return new_node;
}
    1cec:	bd70      	pop	{r4, r5, r6, pc}
    1cee:	46c0      	nop			; (mov r8, r8)
    1cf0:	000030f1 	.word	0x000030f1

00001cf4 <dispose>:
	return head;
}


void dispose(node *head)
{
    1cf4:	b570      	push	{r4, r5, r6, lr}
    1cf6:	1e03      	subs	r3, r0, #0
	node *cursor, *tmp;
	
	if(head != NULL)
    1cf8:	d009      	beq.n	1d0e <dispose+0x1a>
	{
		cursor = head->next;
    1cfa:	6840      	ldr	r0, [r0, #4]
		head->next = NULL;
    1cfc:	2200      	movs	r2, #0
    1cfe:	605a      	str	r2, [r3, #4]
		while(cursor != NULL)
    1d00:	2800      	cmp	r0, #0
    1d02:	d004      	beq.n	1d0e <dispose+0x1a>
		{
			tmp = cursor->next;
			free(cursor);
    1d04:	4d02      	ldr	r5, [pc, #8]	; (1d10 <dispose+0x1c>)
			tmp = cursor->next;
    1d06:	6844      	ldr	r4, [r0, #4]
			free(cursor);
    1d08:	47a8      	blx	r5
			cursor = tmp;
    1d0a:	1e20      	subs	r0, r4, #0
		while(cursor != NULL)
    1d0c:	d1fb      	bne.n	1d06 <dispose+0x12>
		}
		free(tmp);
	}
}
    1d0e:	bd70      	pop	{r4, r5, r6, pc}
    1d10:	00003105 	.word	0x00003105

00001d14 <count>:

int count(node *head)
{
    1d14:	1e03      	subs	r3, r0, #0
	node *cursor = head;
	int c = 0;
	while(cursor != NULL)
    1d16:	d005      	beq.n	1d24 <count+0x10>
    1d18:	2000      	movs	r0, #0
	{
		c++;
    1d1a:	3001      	adds	r0, #1
		cursor = cursor->next;
    1d1c:	685b      	ldr	r3, [r3, #4]
	while(cursor != NULL)
    1d1e:	2b00      	cmp	r3, #0
    1d20:	d1fb      	bne.n	1d1a <count+0x6>
	}
	return c;
}
    1d22:	4770      	bx	lr
	int c = 0;
    1d24:	2000      	movs	r0, #0
	return c;
    1d26:	e7fc      	b.n	1d22 <count+0xe>

00001d28 <getScanCode>:

int * getScanCode(void)
{
    1d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1d2a:	46de      	mov	lr, fp
    1d2c:	4657      	mov	r7, sl
    1d2e:	464e      	mov	r6, r9
    1d30:	4645      	mov	r5, r8
    1d32:	b5e0      	push	{r5, r6, r7, lr}
    1d34:	af00      	add	r7, sp, #0
	
	//Oh fuckin awesome a list built out of pointers!
	node* list = NULL;
	
	//Set strong drive on column
	PORT->Group[0].WRCONFIG.bit.DRVSTR = 1;
    1d36:	4be3      	ldr	r3, [pc, #908]	; (20c4 <STACK_SIZE+0xc4>)
    1d38:	6a99      	ldr	r1, [r3, #40]	; 0x28
    1d3a:	2280      	movs	r2, #128	; 0x80
    1d3c:	03d2      	lsls	r2, r2, #15
    1d3e:	430a      	orrs	r2, r1
    1d40:	629a      	str	r2, [r3, #40]	; 0x28
	
	//Set all columns as output, low
	REG_PORT_DIRSET0 = KB_COL0;
    1d42:	4ae1      	ldr	r2, [pc, #900]	; (20c8 <STACK_SIZE+0xc8>)
    1d44:	2180      	movs	r1, #128	; 0x80
    1d46:	0249      	lsls	r1, r1, #9
    1d48:	6011      	str	r1, [r2, #0]
	REG_PORT_DIRSET0 = KB_COL1;
    1d4a:	2180      	movs	r1, #128	; 0x80
    1d4c:	0289      	lsls	r1, r1, #10
    1d4e:	468c      	mov	ip, r1
    1d50:	6011      	str	r1, [r2, #0]
	REG_PORT_DIRSET0 = KB_COL2;
    1d52:	2680      	movs	r6, #128	; 0x80
    1d54:	02f6      	lsls	r6, r6, #11
    1d56:	6016      	str	r6, [r2, #0]
	REG_PORT_DIRSET0 = KB_COL3;
    1d58:	2580      	movs	r5, #128	; 0x80
    1d5a:	032d      	lsls	r5, r5, #12
    1d5c:	6015      	str	r5, [r2, #0]
	REG_PORT_DIRSET0 = KB_COL4;
    1d5e:	2480      	movs	r4, #128	; 0x80
    1d60:	0364      	lsls	r4, r4, #13
    1d62:	6014      	str	r4, [r2, #0]
	REG_PORT_DIRSET0 = KB_COL5;
    1d64:	2080      	movs	r0, #128	; 0x80
    1d66:	0380      	lsls	r0, r0, #14
    1d68:	6010      	str	r0, [r2, #0]
	REG_PORT_DIRSET0 = KB_COL6;
    1d6a:	2180      	movs	r1, #128	; 0x80
    1d6c:	0509      	lsls	r1, r1, #20
    1d6e:	4688      	mov	r8, r1
    1d70:	6011      	str	r1, [r2, #0]

	REG_PORT_OUTCLR0 = KB_COL0;
    1d72:	4ad6      	ldr	r2, [pc, #856]	; (20cc <STACK_SIZE+0xcc>)
    1d74:	2180      	movs	r1, #128	; 0x80
    1d76:	0249      	lsls	r1, r1, #9
    1d78:	6011      	str	r1, [r2, #0]
	REG_PORT_OUTCLR0 = KB_COL1;
    1d7a:	4661      	mov	r1, ip
    1d7c:	6011      	str	r1, [r2, #0]
	REG_PORT_OUTCLR0 = KB_COL2;
    1d7e:	6016      	str	r6, [r2, #0]
	REG_PORT_OUTCLR0 = KB_COL3;
    1d80:	6015      	str	r5, [r2, #0]
	REG_PORT_OUTCLR0 = KB_COL4;
    1d82:	6014      	str	r4, [r2, #0]
	REG_PORT_OUTCLR0 = KB_COL5;
    1d84:	6010      	str	r0, [r2, #0]
	REG_PORT_OUTCLR0 = KB_COL6;
    1d86:	4641      	mov	r1, r8
    1d88:	6011      	str	r1, [r2, #0]
	
	//set columns to input
	PORT->Group[0].PINCFG[02].bit.PULLEN = 1;
    1d8a:	2242      	movs	r2, #66	; 0x42
    1d8c:	4692      	mov	sl, r2
    1d8e:	5c99      	ldrb	r1, [r3, r2]
    1d90:	2204      	movs	r2, #4
    1d92:	4311      	orrs	r1, r2
    1d94:	4650      	mov	r0, sl
    1d96:	5419      	strb	r1, [r3, r0]
	PORT->Group[0].PINCFG[03].bit.PULLEN = 1;
    1d98:	2143      	movs	r1, #67	; 0x43
    1d9a:	4689      	mov	r9, r1
    1d9c:	5c59      	ldrb	r1, [r3, r1]
    1d9e:	4311      	orrs	r1, r2
    1da0:	4648      	mov	r0, r9
    1da2:	5419      	strb	r1, [r3, r0]
	PORT->Group[0].PINCFG[04].bit.PULLEN = 1;
    1da4:	2144      	movs	r1, #68	; 0x44
    1da6:	4688      	mov	r8, r1
    1da8:	5c59      	ldrb	r1, [r3, r1]
    1daa:	4311      	orrs	r1, r2
    1dac:	4640      	mov	r0, r8
    1dae:	5419      	strb	r1, [r3, r0]
	PORT->Group[0].PINCFG[05].bit.PULLEN = 1;
    1db0:	2145      	movs	r1, #69	; 0x45
    1db2:	468c      	mov	ip, r1
    1db4:	5c59      	ldrb	r1, [r3, r1]
    1db6:	4311      	orrs	r1, r2
    1db8:	4660      	mov	r0, ip
    1dba:	5419      	strb	r1, [r3, r0]
	PORT->Group[0].PINCFG[06].bit.PULLEN = 1;
    1dbc:	2646      	movs	r6, #70	; 0x46
    1dbe:	5d99      	ldrb	r1, [r3, r6]
    1dc0:	4311      	orrs	r1, r2
    1dc2:	5599      	strb	r1, [r3, r6]
	PORT->Group[0].PINCFG[07].bit.PULLEN = 1;
    1dc4:	2547      	movs	r5, #71	; 0x47
    1dc6:	5d59      	ldrb	r1, [r3, r5]
    1dc8:	4311      	orrs	r1, r2
    1dca:	5559      	strb	r1, [r3, r5]
	PORT->Group[0].PINCFG[10].bit.PULLEN = 1;
    1dcc:	244a      	movs	r4, #74	; 0x4a
    1dce:	5d19      	ldrb	r1, [r3, r4]
    1dd0:	4311      	orrs	r1, r2
    1dd2:	5519      	strb	r1, [r3, r4]
	PORT->Group[0].PINCFG[11].bit.PULLEN = 1;
    1dd4:	214b      	movs	r1, #75	; 0x4b
    1dd6:	5c59      	ldrb	r1, [r3, r1]
    1dd8:	4311      	orrs	r1, r2
    1dda:	3006      	adds	r0, #6
    1ddc:	5419      	strb	r1, [r3, r0]
	PORT->Group[0].PINCFG[12].bit.PULLEN = 1;
    1dde:	214c      	movs	r1, #76	; 0x4c
    1de0:	5c59      	ldrb	r1, [r3, r1]
    1de2:	4311      	orrs	r1, r2
    1de4:	3001      	adds	r0, #1
    1de6:	5419      	strb	r1, [r3, r0]
	PORT->Group[0].PINCFG[13].bit.PULLEN = 1;
    1de8:	214d      	movs	r1, #77	; 0x4d
    1dea:	5c59      	ldrb	r1, [r3, r1]
    1dec:	430a      	orrs	r2, r1
    1dee:	214d      	movs	r1, #77	; 0x4d
    1df0:	545a      	strb	r2, [r3, r1]
	
	PORT->Group[0].PINCFG[02].bit.INEN = 1;
    1df2:	4652      	mov	r2, sl
    1df4:	5c9a      	ldrb	r2, [r3, r2]
    1df6:	4693      	mov	fp, r2
    1df8:	2202      	movs	r2, #2
    1dfa:	4659      	mov	r1, fp
    1dfc:	4311      	orrs	r1, r2
    1dfe:	468b      	mov	fp, r1
    1e00:	4651      	mov	r1, sl
    1e02:	4658      	mov	r0, fp
    1e04:	5458      	strb	r0, [r3, r1]
	PORT->Group[0].PINCFG[03].bit.INEN = 1;
    1e06:	4649      	mov	r1, r9
    1e08:	5c59      	ldrb	r1, [r3, r1]
    1e0a:	4311      	orrs	r1, r2
    1e0c:	468a      	mov	sl, r1
    1e0e:	4649      	mov	r1, r9
    1e10:	4650      	mov	r0, sl
    1e12:	5458      	strb	r0, [r3, r1]
	PORT->Group[0].PINCFG[04].bit.INEN = 1;
    1e14:	4641      	mov	r1, r8
    1e16:	5c59      	ldrb	r1, [r3, r1]
    1e18:	4311      	orrs	r1, r2
    1e1a:	4689      	mov	r9, r1
    1e1c:	4641      	mov	r1, r8
    1e1e:	4648      	mov	r0, r9
    1e20:	5458      	strb	r0, [r3, r1]
	PORT->Group[0].PINCFG[05].bit.INEN = 1;
    1e22:	4661      	mov	r1, ip
    1e24:	5c59      	ldrb	r1, [r3, r1]
    1e26:	4311      	orrs	r1, r2
    1e28:	4688      	mov	r8, r1
    1e2a:	4661      	mov	r1, ip
    1e2c:	4640      	mov	r0, r8
    1e2e:	5458      	strb	r0, [r3, r1]
	PORT->Group[0].PINCFG[06].bit.INEN = 1;
    1e30:	5d99      	ldrb	r1, [r3, r6]
    1e32:	4311      	orrs	r1, r2
    1e34:	5599      	strb	r1, [r3, r6]
	PORT->Group[0].PINCFG[07].bit.INEN = 1;
    1e36:	5d5e      	ldrb	r6, [r3, r5]
    1e38:	4316      	orrs	r6, r2
    1e3a:	555e      	strb	r6, [r3, r5]
	PORT->Group[0].PINCFG[10].bit.INEN = 1;
    1e3c:	5d1d      	ldrb	r5, [r3, r4]
    1e3e:	4315      	orrs	r5, r2
    1e40:	551d      	strb	r5, [r3, r4]
	PORT->Group[0].PINCFG[11].bit.INEN = 1;
    1e42:	214b      	movs	r1, #75	; 0x4b
    1e44:	5c5c      	ldrb	r4, [r3, r1]
    1e46:	4314      	orrs	r4, r2
    1e48:	545c      	strb	r4, [r3, r1]
	PORT->Group[0].PINCFG[12].bit.INEN = 1;
    1e4a:	3101      	adds	r1, #1
    1e4c:	5c58      	ldrb	r0, [r3, r1]
    1e4e:	4310      	orrs	r0, r2
    1e50:	5458      	strb	r0, [r3, r1]
	PORT->Group[0].PINCFG[13].bit.INEN = 1;
    1e52:	3101      	adds	r1, #1
    1e54:	5c59      	ldrb	r1, [r3, r1]
    1e56:	430a      	orrs	r2, r1
    1e58:	214d      	movs	r1, #77	; 0x4d
    1e5a:	545a      	strb	r2, [r3, r1]
	
		
	//Step through columns, if high, save that column.
	//This is column 0
	REG_PORT_OUTSET0 = KB_COL0;
    1e5c:	4a9c      	ldr	r2, [pc, #624]	; (20d0 <STACK_SIZE+0xd0>)
    1e5e:	2180      	movs	r1, #128	; 0x80
    1e60:	0249      	lsls	r1, r1, #9
    1e62:	6011      	str	r1, [r2, #0]
	if((PORT->Group[0].IN.reg & KB_ROW0) != 0)
    1e64:	6a1b      	ldr	r3, [r3, #32]
	node* list = NULL;
    1e66:	2400      	movs	r4, #0
	if((PORT->Group[0].IN.reg & KB_ROW0) != 0)
    1e68:	075b      	lsls	r3, r3, #29
    1e6a:	d500      	bpl.n	1e6e <getScanCode+0x146>
    1e6c:	e1c9      	b.n	2202 <STACK_SIZE+0x202>
	{
		list = append(list,0);
	}
	if((PORT->Group[0].IN.reg & KB_ROW1) != 0)
    1e6e:	4b95      	ldr	r3, [pc, #596]	; (20c4 <STACK_SIZE+0xc4>)
    1e70:	6a1b      	ldr	r3, [r3, #32]
    1e72:	071b      	lsls	r3, r3, #28
    1e74:	d500      	bpl.n	1e78 <getScanCode+0x150>
    1e76:	e1ca      	b.n	220e <STACK_SIZE+0x20e>
	{
		list = append(list,1);
	}
	if((PORT->Group[0].IN.reg & KB_ROW2) != 0)
    1e78:	4b92      	ldr	r3, [pc, #584]	; (20c4 <STACK_SIZE+0xc4>)
    1e7a:	6a1b      	ldr	r3, [r3, #32]
    1e7c:	06db      	lsls	r3, r3, #27
    1e7e:	d500      	bpl.n	1e82 <getScanCode+0x15a>
    1e80:	e1cb      	b.n	221a <STACK_SIZE+0x21a>
	{
		list = append(list,2);
	}
	if((PORT->Group[0].IN.reg & KB_ROW3) != 0)
    1e82:	4b90      	ldr	r3, [pc, #576]	; (20c4 <STACK_SIZE+0xc4>)
    1e84:	6a1b      	ldr	r3, [r3, #32]
    1e86:	069b      	lsls	r3, r3, #26
    1e88:	d500      	bpl.n	1e8c <getScanCode+0x164>
    1e8a:	e1cc      	b.n	2226 <STACK_SIZE+0x226>
	{
		list = append(list,3);
	}
	if((PORT->Group[0].IN.reg & KB_ROW4) != 0)
    1e8c:	4b8d      	ldr	r3, [pc, #564]	; (20c4 <STACK_SIZE+0xc4>)
    1e8e:	6a1b      	ldr	r3, [r3, #32]
    1e90:	065b      	lsls	r3, r3, #25
    1e92:	d500      	bpl.n	1e96 <getScanCode+0x16e>
    1e94:	e1cd      	b.n	2232 <STACK_SIZE+0x232>
	{
		list = append(list,4);
	}
	if((PORT->Group[0].IN.reg & KB_ROW5) != 0)
    1e96:	4b8b      	ldr	r3, [pc, #556]	; (20c4 <STACK_SIZE+0xc4>)
    1e98:	6a1b      	ldr	r3, [r3, #32]
    1e9a:	061b      	lsls	r3, r3, #24
    1e9c:	d500      	bpl.n	1ea0 <getScanCode+0x178>
    1e9e:	e1ce      	b.n	223e <STACK_SIZE+0x23e>
	{
		list = append(list,5);
	}
	if((PORT->Group[0].IN.reg & KB_ROW6) != 0)
    1ea0:	4b88      	ldr	r3, [pc, #544]	; (20c4 <STACK_SIZE+0xc4>)
    1ea2:	6a1b      	ldr	r3, [r3, #32]
    1ea4:	055b      	lsls	r3, r3, #21
    1ea6:	d500      	bpl.n	1eaa <getScanCode+0x182>
    1ea8:	e1cf      	b.n	224a <STACK_SIZE+0x24a>
	{
		list = append(list,6);
	}
	if((PORT->Group[0].IN.reg & KB_ROW7) != 0)
    1eaa:	4b86      	ldr	r3, [pc, #536]	; (20c4 <STACK_SIZE+0xc4>)
    1eac:	6a1b      	ldr	r3, [r3, #32]
    1eae:	051b      	lsls	r3, r3, #20
    1eb0:	d500      	bpl.n	1eb4 <getScanCode+0x18c>
    1eb2:	e1d0      	b.n	2256 <STACK_SIZE+0x256>
	{
		list = append(list,7);
	}
	if((PORT->Group[0].IN.reg & KB_ROW8) != 0)
    1eb4:	4b83      	ldr	r3, [pc, #524]	; (20c4 <STACK_SIZE+0xc4>)
    1eb6:	6a1b      	ldr	r3, [r3, #32]
    1eb8:	04db      	lsls	r3, r3, #19
    1eba:	d500      	bpl.n	1ebe <getScanCode+0x196>
    1ebc:	e1d1      	b.n	2262 <STACK_SIZE+0x262>
	{
		list = append(list,8);
	}
	if((PORT->Group[0].IN.reg & KB_ROW9) != 0)
    1ebe:	4b81      	ldr	r3, [pc, #516]	; (20c4 <STACK_SIZE+0xc4>)
    1ec0:	6a1b      	ldr	r3, [r3, #32]
    1ec2:	049b      	lsls	r3, r3, #18
    1ec4:	d500      	bpl.n	1ec8 <getScanCode+0x1a0>
    1ec6:	e1d2      	b.n	226e <STACK_SIZE+0x26e>
	{
		list = append(list,9);
	}
	REG_PORT_OUTCLR0 = KB_COL0;
    1ec8:	2280      	movs	r2, #128	; 0x80
    1eca:	0252      	lsls	r2, r2, #9
    1ecc:	4b7f      	ldr	r3, [pc, #508]	; (20cc <STACK_SIZE+0xcc>)
    1ece:	601a      	str	r2, [r3, #0]
	
	//This is column 1
	REG_PORT_OUTSET0 = KB_COL1;
    1ed0:	2280      	movs	r2, #128	; 0x80
    1ed2:	0292      	lsls	r2, r2, #10
    1ed4:	4b7e      	ldr	r3, [pc, #504]	; (20d0 <STACK_SIZE+0xd0>)
    1ed6:	601a      	str	r2, [r3, #0]
	if((PORT->Group[0].IN.reg & KB_ROW0) != 0)
    1ed8:	4b7a      	ldr	r3, [pc, #488]	; (20c4 <STACK_SIZE+0xc4>)
    1eda:	6a1b      	ldr	r3, [r3, #32]
    1edc:	075b      	lsls	r3, r3, #29
    1ede:	d500      	bpl.n	1ee2 <getScanCode+0x1ba>
    1ee0:	e1cb      	b.n	227a <STACK_SIZE+0x27a>
	{
		list = append(list,10);
	}
	if((PORT->Group[0].IN.reg & KB_ROW1) != 0)
    1ee2:	4b78      	ldr	r3, [pc, #480]	; (20c4 <STACK_SIZE+0xc4>)
    1ee4:	6a1b      	ldr	r3, [r3, #32]
    1ee6:	071b      	lsls	r3, r3, #28
    1ee8:	d500      	bpl.n	1eec <getScanCode+0x1c4>
    1eea:	e1cc      	b.n	2286 <STACK_SIZE+0x286>
	{
		list = append(list,11);
	}
	if((PORT->Group[0].IN.reg & KB_ROW2) != 0)
    1eec:	4b75      	ldr	r3, [pc, #468]	; (20c4 <STACK_SIZE+0xc4>)
    1eee:	6a1b      	ldr	r3, [r3, #32]
    1ef0:	06db      	lsls	r3, r3, #27
    1ef2:	d500      	bpl.n	1ef6 <getScanCode+0x1ce>
    1ef4:	e1cd      	b.n	2292 <STACK_SIZE+0x292>
	{
		list = append(list,12);
	}
	if((PORT->Group[0].IN.reg & KB_ROW3) != 0)
    1ef6:	4b73      	ldr	r3, [pc, #460]	; (20c4 <STACK_SIZE+0xc4>)
    1ef8:	6a1b      	ldr	r3, [r3, #32]
    1efa:	069b      	lsls	r3, r3, #26
    1efc:	d500      	bpl.n	1f00 <getScanCode+0x1d8>
    1efe:	e1ce      	b.n	229e <STACK_SIZE+0x29e>
	{
		list = append(list,13);
	}
	if((PORT->Group[0].IN.reg & KB_ROW4) != 0)
    1f00:	4b70      	ldr	r3, [pc, #448]	; (20c4 <STACK_SIZE+0xc4>)
    1f02:	6a1b      	ldr	r3, [r3, #32]
    1f04:	065b      	lsls	r3, r3, #25
    1f06:	d500      	bpl.n	1f0a <getScanCode+0x1e2>
    1f08:	e1cf      	b.n	22aa <STACK_SIZE+0x2aa>
	{
		list = append(list,14);
	}
	if((PORT->Group[0].IN.reg & KB_ROW5) != 0)
    1f0a:	4b6e      	ldr	r3, [pc, #440]	; (20c4 <STACK_SIZE+0xc4>)
    1f0c:	6a1b      	ldr	r3, [r3, #32]
    1f0e:	061b      	lsls	r3, r3, #24
    1f10:	d500      	bpl.n	1f14 <getScanCode+0x1ec>
    1f12:	e1d0      	b.n	22b6 <STACK_SIZE+0x2b6>
	{
		list = append(list,15);
	}
	if((PORT->Group[0].IN.reg & KB_ROW6) != 0)
    1f14:	4b6b      	ldr	r3, [pc, #428]	; (20c4 <STACK_SIZE+0xc4>)
    1f16:	6a1b      	ldr	r3, [r3, #32]
    1f18:	055b      	lsls	r3, r3, #21
    1f1a:	d500      	bpl.n	1f1e <getScanCode+0x1f6>
    1f1c:	e1d1      	b.n	22c2 <STACK_SIZE+0x2c2>
	{
		list = append(list,16);
	}
	if((PORT->Group[0].IN.reg & KB_ROW7) != 0)
    1f1e:	4b69      	ldr	r3, [pc, #420]	; (20c4 <STACK_SIZE+0xc4>)
    1f20:	6a1b      	ldr	r3, [r3, #32]
    1f22:	051b      	lsls	r3, r3, #20
    1f24:	d500      	bpl.n	1f28 <getScanCode+0x200>
    1f26:	e1d2      	b.n	22ce <STACK_SIZE+0x2ce>
	{
		list = append(list,17);
	}
	if((PORT->Group[0].IN.reg & KB_ROW8) != 0)
    1f28:	4b66      	ldr	r3, [pc, #408]	; (20c4 <STACK_SIZE+0xc4>)
    1f2a:	6a1b      	ldr	r3, [r3, #32]
    1f2c:	04db      	lsls	r3, r3, #19
    1f2e:	d500      	bpl.n	1f32 <getScanCode+0x20a>
    1f30:	e1d3      	b.n	22da <STACK_SIZE+0x2da>
	{
		list = append(list,18);
	}
	if((PORT->Group[0].IN.reg & KB_ROW9) != 0)
    1f32:	4b64      	ldr	r3, [pc, #400]	; (20c4 <STACK_SIZE+0xc4>)
    1f34:	6a1b      	ldr	r3, [r3, #32]
    1f36:	049b      	lsls	r3, r3, #18
    1f38:	d500      	bpl.n	1f3c <getScanCode+0x214>
    1f3a:	e1d4      	b.n	22e6 <STACK_SIZE+0x2e6>
	{
		list = append(list,19);
	}
	REG_PORT_OUTCLR0 = KB_COL1;
    1f3c:	2280      	movs	r2, #128	; 0x80
    1f3e:	0292      	lsls	r2, r2, #10
    1f40:	4b62      	ldr	r3, [pc, #392]	; (20cc <STACK_SIZE+0xcc>)
    1f42:	601a      	str	r2, [r3, #0]
	
	//This is column 2
	REG_PORT_OUTSET0 = KB_COL2;
    1f44:	2280      	movs	r2, #128	; 0x80
    1f46:	02d2      	lsls	r2, r2, #11
    1f48:	4b61      	ldr	r3, [pc, #388]	; (20d0 <STACK_SIZE+0xd0>)
    1f4a:	601a      	str	r2, [r3, #0]
	if((PORT->Group[0].IN.reg & KB_ROW0) != 0)
    1f4c:	4b5d      	ldr	r3, [pc, #372]	; (20c4 <STACK_SIZE+0xc4>)
    1f4e:	6a1b      	ldr	r3, [r3, #32]
    1f50:	075b      	lsls	r3, r3, #29
    1f52:	d500      	bpl.n	1f56 <getScanCode+0x22e>
    1f54:	e1cd      	b.n	22f2 <STACK_SIZE+0x2f2>
	{
		list = append(list,20);
	}
	if((PORT->Group[0].IN.reg & KB_ROW1) != 0)
    1f56:	4b5b      	ldr	r3, [pc, #364]	; (20c4 <STACK_SIZE+0xc4>)
    1f58:	6a1b      	ldr	r3, [r3, #32]
    1f5a:	071b      	lsls	r3, r3, #28
    1f5c:	d500      	bpl.n	1f60 <getScanCode+0x238>
    1f5e:	e1ce      	b.n	22fe <STACK_SIZE+0x2fe>
	{
		list = append(list,21);
	}
	if((PORT->Group[0].IN.reg & KB_ROW2) != 0)
    1f60:	4b58      	ldr	r3, [pc, #352]	; (20c4 <STACK_SIZE+0xc4>)
    1f62:	6a1b      	ldr	r3, [r3, #32]
    1f64:	06db      	lsls	r3, r3, #27
    1f66:	d500      	bpl.n	1f6a <getScanCode+0x242>
    1f68:	e1cf      	b.n	230a <STACK_SIZE+0x30a>
	{
		list = append(list,22);
	}
	if((PORT->Group[0].IN.reg & KB_ROW3) != 0)
    1f6a:	4b56      	ldr	r3, [pc, #344]	; (20c4 <STACK_SIZE+0xc4>)
    1f6c:	6a1b      	ldr	r3, [r3, #32]
    1f6e:	069b      	lsls	r3, r3, #26
    1f70:	d500      	bpl.n	1f74 <getScanCode+0x24c>
    1f72:	e1d0      	b.n	2316 <STACK_SIZE+0x316>
	{
		list = append(list,23);
	}
	if((PORT->Group[0].IN.reg & KB_ROW4) != 0)
    1f74:	4b53      	ldr	r3, [pc, #332]	; (20c4 <STACK_SIZE+0xc4>)
    1f76:	6a1b      	ldr	r3, [r3, #32]
    1f78:	065b      	lsls	r3, r3, #25
    1f7a:	d500      	bpl.n	1f7e <getScanCode+0x256>
    1f7c:	e1d1      	b.n	2322 <STACK_SIZE+0x322>
	{
		list = append(list,24);
	}
	if((PORT->Group[0].IN.reg & KB_ROW5) != 0)
    1f7e:	4b51      	ldr	r3, [pc, #324]	; (20c4 <STACK_SIZE+0xc4>)
    1f80:	6a1b      	ldr	r3, [r3, #32]
    1f82:	061b      	lsls	r3, r3, #24
    1f84:	d500      	bpl.n	1f88 <getScanCode+0x260>
    1f86:	e1d2      	b.n	232e <STACK_SIZE+0x32e>
	{
		list = append(list,25);
	}
	if((PORT->Group[0].IN.reg & KB_ROW6) != 0)
    1f88:	4b4e      	ldr	r3, [pc, #312]	; (20c4 <STACK_SIZE+0xc4>)
    1f8a:	6a1b      	ldr	r3, [r3, #32]
    1f8c:	055b      	lsls	r3, r3, #21
    1f8e:	d500      	bpl.n	1f92 <getScanCode+0x26a>
    1f90:	e1d3      	b.n	233a <STACK_SIZE+0x33a>
	{
		list = append(list,26);
	}
	if((PORT->Group[0].IN.reg & KB_ROW7) != 0)
    1f92:	4b4c      	ldr	r3, [pc, #304]	; (20c4 <STACK_SIZE+0xc4>)
    1f94:	6a1b      	ldr	r3, [r3, #32]
    1f96:	051b      	lsls	r3, r3, #20
    1f98:	d500      	bpl.n	1f9c <getScanCode+0x274>
    1f9a:	e1d4      	b.n	2346 <STACK_SIZE+0x346>
	{
		list = append(list,27);
	}
	if((PORT->Group[0].IN.reg & KB_ROW8) != 0)
    1f9c:	4b49      	ldr	r3, [pc, #292]	; (20c4 <STACK_SIZE+0xc4>)
    1f9e:	6a1b      	ldr	r3, [r3, #32]
    1fa0:	04db      	lsls	r3, r3, #19
    1fa2:	d500      	bpl.n	1fa6 <getScanCode+0x27e>
    1fa4:	e1d5      	b.n	2352 <STACK_SIZE+0x352>
	{
		list = append(list,28);
	}
	if((PORT->Group[0].IN.reg & KB_ROW9) != 0)
    1fa6:	4b47      	ldr	r3, [pc, #284]	; (20c4 <STACK_SIZE+0xc4>)
    1fa8:	6a1b      	ldr	r3, [r3, #32]
    1faa:	049b      	lsls	r3, r3, #18
    1fac:	d500      	bpl.n	1fb0 <getScanCode+0x288>
    1fae:	e1d6      	b.n	235e <STACK_SIZE+0x35e>
	{
		list = append(list,29);
	}			
	REG_PORT_OUTCLR0 = KB_COL2;
    1fb0:	2280      	movs	r2, #128	; 0x80
    1fb2:	02d2      	lsls	r2, r2, #11
    1fb4:	4b45      	ldr	r3, [pc, #276]	; (20cc <STACK_SIZE+0xcc>)
    1fb6:	601a      	str	r2, [r3, #0]
	
	//This is column 3
	REG_PORT_OUTSET0 = KB_COL3;
    1fb8:	2280      	movs	r2, #128	; 0x80
    1fba:	0312      	lsls	r2, r2, #12
    1fbc:	4b44      	ldr	r3, [pc, #272]	; (20d0 <STACK_SIZE+0xd0>)
    1fbe:	601a      	str	r2, [r3, #0]
	if((PORT->Group[0].IN.reg & KB_ROW0) != 0)
    1fc0:	4b40      	ldr	r3, [pc, #256]	; (20c4 <STACK_SIZE+0xc4>)
    1fc2:	6a1b      	ldr	r3, [r3, #32]
    1fc4:	075b      	lsls	r3, r3, #29
    1fc6:	d500      	bpl.n	1fca <getScanCode+0x2a2>
    1fc8:	e1cf      	b.n	236a <STACK_SIZE+0x36a>
	{
		list = append(list,30);
	}
	if((PORT->Group[0].IN.reg & KB_ROW1) != 0)
    1fca:	4b3e      	ldr	r3, [pc, #248]	; (20c4 <STACK_SIZE+0xc4>)
    1fcc:	6a1b      	ldr	r3, [r3, #32]
    1fce:	071b      	lsls	r3, r3, #28
    1fd0:	d500      	bpl.n	1fd4 <getScanCode+0x2ac>
    1fd2:	e1d0      	b.n	2376 <STACK_SIZE+0x376>
	{
		list = append(list,31);
	}
	if((PORT->Group[0].IN.reg & KB_ROW2) != 0)
    1fd4:	4b3b      	ldr	r3, [pc, #236]	; (20c4 <STACK_SIZE+0xc4>)
    1fd6:	6a1b      	ldr	r3, [r3, #32]
    1fd8:	06db      	lsls	r3, r3, #27
    1fda:	d500      	bpl.n	1fde <getScanCode+0x2b6>
    1fdc:	e1d1      	b.n	2382 <STACK_SIZE+0x382>
	{
		list = append(list,32);
	}
	if((PORT->Group[0].IN.reg & KB_ROW3) != 0)
    1fde:	4b39      	ldr	r3, [pc, #228]	; (20c4 <STACK_SIZE+0xc4>)
    1fe0:	6a1b      	ldr	r3, [r3, #32]
    1fe2:	069b      	lsls	r3, r3, #26
    1fe4:	d500      	bpl.n	1fe8 <getScanCode+0x2c0>
    1fe6:	e1d2      	b.n	238e <STACK_SIZE+0x38e>
	{
		list = append(list,33);
	}
	if((PORT->Group[0].IN.reg & KB_ROW4) != 0)
    1fe8:	4b36      	ldr	r3, [pc, #216]	; (20c4 <STACK_SIZE+0xc4>)
    1fea:	6a1b      	ldr	r3, [r3, #32]
    1fec:	065b      	lsls	r3, r3, #25
    1fee:	d500      	bpl.n	1ff2 <getScanCode+0x2ca>
    1ff0:	e1d3      	b.n	239a <STACK_SIZE+0x39a>
	{
		list = append(list,34);
	}
	if((PORT->Group[0].IN.reg & KB_ROW5) != 0)
    1ff2:	4b34      	ldr	r3, [pc, #208]	; (20c4 <STACK_SIZE+0xc4>)
    1ff4:	6a1b      	ldr	r3, [r3, #32]
    1ff6:	061b      	lsls	r3, r3, #24
    1ff8:	d500      	bpl.n	1ffc <getScanCode+0x2d4>
    1ffa:	e1d4      	b.n	23a6 <STACK_SIZE+0x3a6>
	{
		list = append(list,35);
	}
	if((PORT->Group[0].IN.reg & KB_ROW6) != 0)
    1ffc:	4b31      	ldr	r3, [pc, #196]	; (20c4 <STACK_SIZE+0xc4>)
    1ffe:	6a1b      	ldr	r3, [r3, #32]
    2000:	055b      	lsls	r3, r3, #21
    2002:	d500      	bpl.n	2006 <STACK_SIZE+0x6>
    2004:	e1d5      	b.n	23b2 <STACK_SIZE+0x3b2>
	{
		list = append(list,36);
	}
	if((PORT->Group[0].IN.reg & KB_ROW7) != 0)
    2006:	4b2f      	ldr	r3, [pc, #188]	; (20c4 <STACK_SIZE+0xc4>)
    2008:	6a1b      	ldr	r3, [r3, #32]
    200a:	051b      	lsls	r3, r3, #20
    200c:	d500      	bpl.n	2010 <STACK_SIZE+0x10>
    200e:	e1d6      	b.n	23be <STACK_SIZE+0x3be>
	{
		list = append(list,37);
	}
	if((PORT->Group[0].IN.reg & KB_ROW8) != 0)
    2010:	4b2c      	ldr	r3, [pc, #176]	; (20c4 <STACK_SIZE+0xc4>)
    2012:	6a1b      	ldr	r3, [r3, #32]
    2014:	04db      	lsls	r3, r3, #19
    2016:	d500      	bpl.n	201a <STACK_SIZE+0x1a>
    2018:	e1d7      	b.n	23ca <STACK_SIZE+0x3ca>
	{
		list = append(list,38);
	}
	if((PORT->Group[0].IN.reg & KB_ROW9) != 0)
    201a:	4b2a      	ldr	r3, [pc, #168]	; (20c4 <STACK_SIZE+0xc4>)
    201c:	6a1b      	ldr	r3, [r3, #32]
    201e:	049b      	lsls	r3, r3, #18
    2020:	d500      	bpl.n	2024 <STACK_SIZE+0x24>
    2022:	e1d8      	b.n	23d6 <STACK_SIZE+0x3d6>
	{
		list = append(list,39);
	}
	REG_PORT_OUTCLR0 = KB_COL3;
    2024:	2280      	movs	r2, #128	; 0x80
    2026:	0312      	lsls	r2, r2, #12
    2028:	4b28      	ldr	r3, [pc, #160]	; (20cc <STACK_SIZE+0xcc>)
    202a:	601a      	str	r2, [r3, #0]
	
	//This is column 4
	REG_PORT_OUTSET0 = KB_COL4;
    202c:	2280      	movs	r2, #128	; 0x80
    202e:	0352      	lsls	r2, r2, #13
    2030:	4b27      	ldr	r3, [pc, #156]	; (20d0 <STACK_SIZE+0xd0>)
    2032:	601a      	str	r2, [r3, #0]
	if((PORT->Group[0].IN.reg & KB_ROW0) != 0)
    2034:	4b23      	ldr	r3, [pc, #140]	; (20c4 <STACK_SIZE+0xc4>)
    2036:	6a1b      	ldr	r3, [r3, #32]
    2038:	075b      	lsls	r3, r3, #29
    203a:	d500      	bpl.n	203e <STACK_SIZE+0x3e>
    203c:	e1d1      	b.n	23e2 <STACK_SIZE+0x3e2>
	{
		list = append(list,40);
	}
	if((PORT->Group[0].IN.reg & KB_ROW1) != 0)
    203e:	4b21      	ldr	r3, [pc, #132]	; (20c4 <STACK_SIZE+0xc4>)
    2040:	6a1b      	ldr	r3, [r3, #32]
    2042:	071b      	lsls	r3, r3, #28
    2044:	d500      	bpl.n	2048 <STACK_SIZE+0x48>
    2046:	e1d2      	b.n	23ee <STACK_SIZE+0x3ee>
	{
		list = append(list,41);
	}
	if((PORT->Group[0].IN.reg & KB_ROW2) != 0)
    2048:	4b1e      	ldr	r3, [pc, #120]	; (20c4 <STACK_SIZE+0xc4>)
    204a:	6a1b      	ldr	r3, [r3, #32]
    204c:	06db      	lsls	r3, r3, #27
    204e:	d500      	bpl.n	2052 <STACK_SIZE+0x52>
    2050:	e1d3      	b.n	23fa <STACK_SIZE+0x3fa>
	{
		list = append(list,42);
	}
	if((PORT->Group[0].IN.reg & KB_ROW3) != 0)
    2052:	4b1c      	ldr	r3, [pc, #112]	; (20c4 <STACK_SIZE+0xc4>)
    2054:	6a1b      	ldr	r3, [r3, #32]
    2056:	069b      	lsls	r3, r3, #26
    2058:	d500      	bpl.n	205c <STACK_SIZE+0x5c>
    205a:	e1d4      	b.n	2406 <STACK_SIZE+0x406>
	{
		list = append(list,43);
	}
	if((PORT->Group[0].IN.reg & KB_ROW4) != 0)
    205c:	4b19      	ldr	r3, [pc, #100]	; (20c4 <STACK_SIZE+0xc4>)
    205e:	6a1b      	ldr	r3, [r3, #32]
    2060:	065b      	lsls	r3, r3, #25
    2062:	d500      	bpl.n	2066 <STACK_SIZE+0x66>
    2064:	e1d5      	b.n	2412 <STACK_SIZE+0x412>
	{
		list = append(list,44);
	}
	if((PORT->Group[0].IN.reg & KB_ROW5) != 0)
    2066:	4b17      	ldr	r3, [pc, #92]	; (20c4 <STACK_SIZE+0xc4>)
    2068:	6a1b      	ldr	r3, [r3, #32]
    206a:	061b      	lsls	r3, r3, #24
    206c:	d500      	bpl.n	2070 <STACK_SIZE+0x70>
    206e:	e1d6      	b.n	241e <STACK_SIZE+0x41e>
	{
		list = append(list,45);
	}
	if((PORT->Group[0].IN.reg & KB_ROW6) != 0)
    2070:	4b14      	ldr	r3, [pc, #80]	; (20c4 <STACK_SIZE+0xc4>)
    2072:	6a1b      	ldr	r3, [r3, #32]
    2074:	055b      	lsls	r3, r3, #21
    2076:	d500      	bpl.n	207a <STACK_SIZE+0x7a>
    2078:	e1ee      	b.n	2458 <STACK_SIZE+0x458>
	{
		list = append(list,46);
	}
	if((PORT->Group[0].IN.reg & KB_ROW7) != 0)
    207a:	4b12      	ldr	r3, [pc, #72]	; (20c4 <STACK_SIZE+0xc4>)
    207c:	6a1b      	ldr	r3, [r3, #32]
    207e:	051b      	lsls	r3, r3, #20
    2080:	d500      	bpl.n	2084 <STACK_SIZE+0x84>
    2082:	e1ef      	b.n	2464 <STACK_SIZE+0x464>
	{
		list = append(list,47);
	}
	if((PORT->Group[0].IN.reg & KB_ROW8) != 0)
    2084:	4b0f      	ldr	r3, [pc, #60]	; (20c4 <STACK_SIZE+0xc4>)
    2086:	6a1b      	ldr	r3, [r3, #32]
    2088:	04db      	lsls	r3, r3, #19
    208a:	d500      	bpl.n	208e <STACK_SIZE+0x8e>
    208c:	e1f0      	b.n	2470 <STACK_SIZE+0x470>
	{
		list = append(list,48);
	}
	if((PORT->Group[0].IN.reg & KB_ROW9) != 0)
    208e:	4b0d      	ldr	r3, [pc, #52]	; (20c4 <STACK_SIZE+0xc4>)
    2090:	6a1b      	ldr	r3, [r3, #32]
    2092:	049b      	lsls	r3, r3, #18
    2094:	d500      	bpl.n	2098 <STACK_SIZE+0x98>
    2096:	e1f1      	b.n	247c <STACK_SIZE+0x47c>
	{
		list = append(list,49);
	}
	REG_PORT_OUTCLR0 = KB_COL4;
    2098:	2280      	movs	r2, #128	; 0x80
    209a:	0352      	lsls	r2, r2, #13
    209c:	4b0b      	ldr	r3, [pc, #44]	; (20cc <STACK_SIZE+0xcc>)
    209e:	601a      	str	r2, [r3, #0]
	
	//This is column 5
	REG_PORT_OUTSET0 = KB_COL5;
    20a0:	2280      	movs	r2, #128	; 0x80
    20a2:	0392      	lsls	r2, r2, #14
    20a4:	4b0a      	ldr	r3, [pc, #40]	; (20d0 <STACK_SIZE+0xd0>)
    20a6:	601a      	str	r2, [r3, #0]
	if((PORT->Group[0].IN.reg & KB_ROW0) != 0)
    20a8:	4b06      	ldr	r3, [pc, #24]	; (20c4 <STACK_SIZE+0xc4>)
    20aa:	6a1b      	ldr	r3, [r3, #32]
    20ac:	075b      	lsls	r3, r3, #29
    20ae:	d500      	bpl.n	20b2 <STACK_SIZE+0xb2>
    20b0:	e1ea      	b.n	2488 <STACK_SIZE+0x488>
	{
		list = append(list,50);
	}
	if((PORT->Group[0].IN.reg & KB_ROW1) != 0)
    20b2:	4b04      	ldr	r3, [pc, #16]	; (20c4 <STACK_SIZE+0xc4>)
    20b4:	6a1b      	ldr	r3, [r3, #32]
    20b6:	071b      	lsls	r3, r3, #28
    20b8:	d500      	bpl.n	20bc <STACK_SIZE+0xbc>
    20ba:	e1eb      	b.n	2494 <STACK_SIZE+0x494>
	{
		list = append(list,51);
	}
	if((PORT->Group[0].IN.reg & KB_ROW2) != 0)
    20bc:	4b01      	ldr	r3, [pc, #4]	; (20c4 <STACK_SIZE+0xc4>)
    20be:	6a1b      	ldr	r3, [r3, #32]
    20c0:	e008      	b.n	20d4 <STACK_SIZE+0xd4>
    20c2:	46c0      	nop			; (mov r8, r8)
    20c4:	41004400 	.word	0x41004400
    20c8:	41004408 	.word	0x41004408
    20cc:	41004414 	.word	0x41004414
    20d0:	41004418 	.word	0x41004418
    20d4:	06db      	lsls	r3, r3, #27
    20d6:	d500      	bpl.n	20da <STACK_SIZE+0xda>
    20d8:	e1e2      	b.n	24a0 <STACK_SIZE+0x4a0>
	{
		list = append(list,52);
	}
	if((PORT->Group[0].IN.reg & KB_ROW3) != 0)
    20da:	4bd4      	ldr	r3, [pc, #848]	; (242c <STACK_SIZE+0x42c>)
    20dc:	6a1b      	ldr	r3, [r3, #32]
    20de:	069b      	lsls	r3, r3, #26
    20e0:	d500      	bpl.n	20e4 <STACK_SIZE+0xe4>
    20e2:	e1e3      	b.n	24ac <STACK_SIZE+0x4ac>
	{
		list = append(list,53);
	}
	if((PORT->Group[0].IN.reg & KB_ROW4) != 0)
    20e4:	4bd1      	ldr	r3, [pc, #836]	; (242c <STACK_SIZE+0x42c>)
    20e6:	6a1b      	ldr	r3, [r3, #32]
    20e8:	065b      	lsls	r3, r3, #25
    20ea:	d500      	bpl.n	20ee <STACK_SIZE+0xee>
    20ec:	e1e4      	b.n	24b8 <STACK_SIZE+0x4b8>
	{
		list = append(list,54);
	}
	if((PORT->Group[0].IN.reg & KB_ROW5) != 0)
    20ee:	4bcf      	ldr	r3, [pc, #828]	; (242c <STACK_SIZE+0x42c>)
    20f0:	6a1b      	ldr	r3, [r3, #32]
    20f2:	061b      	lsls	r3, r3, #24
    20f4:	d500      	bpl.n	20f8 <STACK_SIZE+0xf8>
    20f6:	e1e5      	b.n	24c4 <STACK_SIZE+0x4c4>
	{
		list = append(list,55);
	}
	if((PORT->Group[0].IN.reg & KB_ROW6) != 0)
    20f8:	4bcc      	ldr	r3, [pc, #816]	; (242c <STACK_SIZE+0x42c>)
    20fa:	6a1b      	ldr	r3, [r3, #32]
    20fc:	055b      	lsls	r3, r3, #21
    20fe:	d500      	bpl.n	2102 <STACK_SIZE+0x102>
    2100:	e1e6      	b.n	24d0 <STACK_SIZE+0x4d0>
	{
		list = append(list,56);
	}
	if((PORT->Group[0].IN.reg & KB_ROW7) != 0)
    2102:	4bca      	ldr	r3, [pc, #808]	; (242c <STACK_SIZE+0x42c>)
    2104:	6a1b      	ldr	r3, [r3, #32]
    2106:	051b      	lsls	r3, r3, #20
    2108:	d500      	bpl.n	210c <STACK_SIZE+0x10c>
    210a:	e1e7      	b.n	24dc <STACK_SIZE+0x4dc>
	{
		list = append(list,57);
	}
	if((PORT->Group[0].IN.reg & KB_ROW8) != 0)
    210c:	4bc7      	ldr	r3, [pc, #796]	; (242c <STACK_SIZE+0x42c>)
    210e:	6a1b      	ldr	r3, [r3, #32]
    2110:	04db      	lsls	r3, r3, #19
    2112:	d500      	bpl.n	2116 <STACK_SIZE+0x116>
    2114:	e1e8      	b.n	24e8 <STACK_SIZE+0x4e8>
	{
		list = append(list,58);
	}
	if((PORT->Group[0].IN.reg & KB_ROW9) != 0)
    2116:	4bc5      	ldr	r3, [pc, #788]	; (242c <STACK_SIZE+0x42c>)
    2118:	6a1b      	ldr	r3, [r3, #32]
    211a:	049b      	lsls	r3, r3, #18
    211c:	d500      	bpl.n	2120 <STACK_SIZE+0x120>
    211e:	e1e9      	b.n	24f4 <STACK_SIZE+0x4f4>
	{
		list = append(list,59);
	}
	REG_PORT_OUTCLR0 = KB_COL5;
    2120:	2280      	movs	r2, #128	; 0x80
    2122:	0392      	lsls	r2, r2, #14
    2124:	4bc2      	ldr	r3, [pc, #776]	; (2430 <STACK_SIZE+0x430>)
    2126:	601a      	str	r2, [r3, #0]
	
	//This is column 6
	REG_PORT_OUTSET0 = KB_COL6;
    2128:	2280      	movs	r2, #128	; 0x80
    212a:	0512      	lsls	r2, r2, #20
    212c:	4bc1      	ldr	r3, [pc, #772]	; (2434 <STACK_SIZE+0x434>)
    212e:	601a      	str	r2, [r3, #0]
	if((PORT->Group[0].IN.reg & KB_ROW0) != 0)
    2130:	4bbe      	ldr	r3, [pc, #760]	; (242c <STACK_SIZE+0x42c>)
    2132:	6a1b      	ldr	r3, [r3, #32]
    2134:	075b      	lsls	r3, r3, #29
    2136:	d500      	bpl.n	213a <STACK_SIZE+0x13a>
    2138:	e1e2      	b.n	2500 <STACK_SIZE+0x500>
	{
		list = append(list,60);
	}
	if((PORT->Group[0].IN.reg & KB_ROW1) != 0)
    213a:	4bbc      	ldr	r3, [pc, #752]	; (242c <STACK_SIZE+0x42c>)
    213c:	6a1b      	ldr	r3, [r3, #32]
    213e:	071b      	lsls	r3, r3, #28
    2140:	d500      	bpl.n	2144 <STACK_SIZE+0x144>
    2142:	e1e3      	b.n	250c <STACK_SIZE+0x50c>
	{
		list = append(list,61);
	}
	if((PORT->Group[0].IN.reg & KB_ROW2) != 0)
    2144:	4bb9      	ldr	r3, [pc, #740]	; (242c <STACK_SIZE+0x42c>)
    2146:	6a1b      	ldr	r3, [r3, #32]
    2148:	06db      	lsls	r3, r3, #27
    214a:	d500      	bpl.n	214e <STACK_SIZE+0x14e>
    214c:	e1e4      	b.n	2518 <STACK_SIZE+0x518>
	{
		list = append(list,62);
	}
	if((PORT->Group[0].IN.reg & KB_ROW3) != 0)
    214e:	4bb7      	ldr	r3, [pc, #732]	; (242c <STACK_SIZE+0x42c>)
    2150:	6a1b      	ldr	r3, [r3, #32]
    2152:	069b      	lsls	r3, r3, #26
    2154:	d500      	bpl.n	2158 <STACK_SIZE+0x158>
    2156:	e1e5      	b.n	2524 <STACK_SIZE+0x524>
	{
		list = append(list,63);
	}
	if((PORT->Group[0].IN.reg & KB_ROW4) != 0)
    2158:	4bb4      	ldr	r3, [pc, #720]	; (242c <STACK_SIZE+0x42c>)
    215a:	6a1b      	ldr	r3, [r3, #32]
    215c:	065b      	lsls	r3, r3, #25
    215e:	d500      	bpl.n	2162 <STACK_SIZE+0x162>
    2160:	e1e6      	b.n	2530 <STACK_SIZE+0x530>
	{
		list = append(list,64);
	}
	if((PORT->Group[0].IN.reg & KB_ROW5) != 0)
    2162:	4bb2      	ldr	r3, [pc, #712]	; (242c <STACK_SIZE+0x42c>)
    2164:	6a1b      	ldr	r3, [r3, #32]
    2166:	061b      	lsls	r3, r3, #24
    2168:	d500      	bpl.n	216c <STACK_SIZE+0x16c>
    216a:	e1e7      	b.n	253c <STACK_SIZE+0x53c>
	{
		list = append(list,65);
	}
	if((PORT->Group[0].IN.reg & KB_ROW6) != 0)
    216c:	4baf      	ldr	r3, [pc, #700]	; (242c <STACK_SIZE+0x42c>)
    216e:	6a1b      	ldr	r3, [r3, #32]
    2170:	055b      	lsls	r3, r3, #21
    2172:	d500      	bpl.n	2176 <STACK_SIZE+0x176>
    2174:	e1e8      	b.n	2548 <STACK_SIZE+0x548>
	{
		list = append(list,66);
	}
	if((PORT->Group[0].IN.reg & KB_ROW7) != 0)
    2176:	4bad      	ldr	r3, [pc, #692]	; (242c <STACK_SIZE+0x42c>)
    2178:	6a1b      	ldr	r3, [r3, #32]
    217a:	051b      	lsls	r3, r3, #20
    217c:	d500      	bpl.n	2180 <STACK_SIZE+0x180>
    217e:	e1e9      	b.n	2554 <STACK_SIZE+0x554>
	{
		list = append(list,67);
	}
	if((PORT->Group[0].IN.reg & KB_ROW8) != 0)
    2180:	4baa      	ldr	r3, [pc, #680]	; (242c <STACK_SIZE+0x42c>)
    2182:	6a1b      	ldr	r3, [r3, #32]
    2184:	04db      	lsls	r3, r3, #19
    2186:	d500      	bpl.n	218a <STACK_SIZE+0x18a>
    2188:	e1ea      	b.n	2560 <STACK_SIZE+0x560>
	{
		list = append(list,68);
	}
	if((PORT->Group[0].IN.reg & KB_ROW9) != 0)
    218a:	4ba8      	ldr	r3, [pc, #672]	; (242c <STACK_SIZE+0x42c>)
    218c:	6a1b      	ldr	r3, [r3, #32]
    218e:	049b      	lsls	r3, r3, #18
    2190:	d500      	bpl.n	2194 <STACK_SIZE+0x194>
    2192:	e1eb      	b.n	256c <STACK_SIZE+0x56c>
	{
		list = append(list,69);
	}
	REG_PORT_OUTCLR0 = KB_COL6;
    2194:	4ba6      	ldr	r3, [pc, #664]	; (2430 <STACK_SIZE+0x430>)
    2196:	2280      	movs	r2, #128	; 0x80
    2198:	0512      	lsls	r2, r2, #20
    219a:	601a      	str	r2, [r3, #0]
	//The list is now populated with all of the pressed keys
	//Now, we do some cleanup work and stuff all of the nodes
	//into an integer array which is then returned.
	
	//Clean up the pins.
	REG_PORT_OUTCLR0 = 0xF380CFC3;
    219c:	4aa6      	ldr	r2, [pc, #664]	; (2438 <STACK_SIZE+0x438>)
    219e:	601a      	str	r2, [r3, #0]
	
	//Initialize the int array of scan codes
	int scanCodes[(count(list))];
    21a0:	0020      	movs	r0, r4
    21a2:	4ba6      	ldr	r3, [pc, #664]	; (243c <STACK_SIZE+0x43c>)
    21a4:	4798      	blx	r3
    21a6:	0080      	lsls	r0, r0, #2
    21a8:	300a      	adds	r0, #10
    21aa:	08c0      	lsrs	r0, r0, #3
    21ac:	00c0      	lsls	r0, r0, #3
    21ae:	466b      	mov	r3, sp
    21b0:	1a1b      	subs	r3, r3, r0
    21b2:	469d      	mov	sp, r3
    21b4:	466a      	mov	r2, sp
	int i = 0;
	
	//Traverse the list, stuffing each item into the
	//scan code array.
	node* cursor = list;
	while(cursor != NULL)
    21b6:	2c00      	cmp	r4, #0
    21b8:	d100      	bne.n	21bc <STACK_SIZE+0x1bc>
    21ba:	e1dd      	b.n	2578 <STACK_SIZE+0x578>
    21bc:	0023      	movs	r3, r4
	{
		scanCodes[i] = cursor->data;
    21be:	6819      	ldr	r1, [r3, #0]
    21c0:	c202      	stmia	r2!, {r1}
		cursor = cursor->next;
    21c2:	685b      	ldr	r3, [r3, #4]
	while(cursor != NULL)
    21c4:	2b00      	cmp	r3, #0
    21c6:	d1fa      	bne.n	21be <STACK_SIZE+0x1be>
		i++;
	}
	
	//Traverse and print the node for debugging
	printf("Keys pressed: %i \t",count(list));
    21c8:	0020      	movs	r0, r4
    21ca:	4b9c      	ldr	r3, [pc, #624]	; (243c <STACK_SIZE+0x43c>)
    21cc:	4798      	blx	r3
    21ce:	0001      	movs	r1, r0
    21d0:	489b      	ldr	r0, [pc, #620]	; (2440 <STACK_SIZE+0x440>)
    21d2:	4b9c      	ldr	r3, [pc, #624]	; (2444 <STACK_SIZE+0x444>)
    21d4:	4798      	blx	r3
    21d6:	0025      	movs	r5, r4
	cursor = list;
	while(cursor != NULL)
	{
		printf("%i, ", cursor->data);
    21d8:	4e9a      	ldr	r6, [pc, #616]	; (2444 <STACK_SIZE+0x444>)
    21da:	6829      	ldr	r1, [r5, #0]
    21dc:	489a      	ldr	r0, [pc, #616]	; (2448 <STACK_SIZE+0x448>)
    21de:	47b0      	blx	r6
		cursor = cursor->next;
    21e0:	686d      	ldr	r5, [r5, #4]
	while(cursor != NULL)
    21e2:	2d00      	cmp	r5, #0
    21e4:	d1f9      	bne.n	21da <STACK_SIZE+0x1da>
	}
	printf("\n\r");
    21e6:	4899      	ldr	r0, [pc, #612]	; (244c <STACK_SIZE+0x44c>)
    21e8:	4b96      	ldr	r3, [pc, #600]	; (2444 <STACK_SIZE+0x444>)
    21ea:	4798      	blx	r3
	//Finally, after all of that, we dispose of the list
	//and return the scan codes
	dispose(list);
    21ec:	0020      	movs	r0, r4
    21ee:	4b98      	ldr	r3, [pc, #608]	; (2450 <STACK_SIZE+0x450>)
    21f0:	4798      	blx	r3
	free(cursor);
	return scanCodes;
	
}
    21f2:	2000      	movs	r0, #0
    21f4:	46bd      	mov	sp, r7
    21f6:	bc3c      	pop	{r2, r3, r4, r5}
    21f8:	4690      	mov	r8, r2
    21fa:	4699      	mov	r9, r3
    21fc:	46a2      	mov	sl, r4
    21fe:	46ab      	mov	fp, r5
    2200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	node* new_node = create(data,head);
    2202:	2100      	movs	r1, #0
    2204:	2000      	movs	r0, #0
    2206:	4b93      	ldr	r3, [pc, #588]	; (2454 <STACK_SIZE+0x454>)
    2208:	4798      	blx	r3
    220a:	0004      	movs	r4, r0
    220c:	e62f      	b.n	1e6e <getScanCode+0x146>
    220e:	0021      	movs	r1, r4
    2210:	2001      	movs	r0, #1
    2212:	4b90      	ldr	r3, [pc, #576]	; (2454 <STACK_SIZE+0x454>)
    2214:	4798      	blx	r3
    2216:	0004      	movs	r4, r0
    2218:	e62e      	b.n	1e78 <getScanCode+0x150>
    221a:	0021      	movs	r1, r4
    221c:	2002      	movs	r0, #2
    221e:	4b8d      	ldr	r3, [pc, #564]	; (2454 <STACK_SIZE+0x454>)
    2220:	4798      	blx	r3
    2222:	0004      	movs	r4, r0
    2224:	e62d      	b.n	1e82 <getScanCode+0x15a>
    2226:	0021      	movs	r1, r4
    2228:	2003      	movs	r0, #3
    222a:	4b8a      	ldr	r3, [pc, #552]	; (2454 <STACK_SIZE+0x454>)
    222c:	4798      	blx	r3
    222e:	0004      	movs	r4, r0
    2230:	e62c      	b.n	1e8c <getScanCode+0x164>
    2232:	0021      	movs	r1, r4
    2234:	2004      	movs	r0, #4
    2236:	4b87      	ldr	r3, [pc, #540]	; (2454 <STACK_SIZE+0x454>)
    2238:	4798      	blx	r3
    223a:	0004      	movs	r4, r0
    223c:	e62b      	b.n	1e96 <getScanCode+0x16e>
    223e:	0021      	movs	r1, r4
    2240:	2005      	movs	r0, #5
    2242:	4b84      	ldr	r3, [pc, #528]	; (2454 <STACK_SIZE+0x454>)
    2244:	4798      	blx	r3
    2246:	0004      	movs	r4, r0
    2248:	e62a      	b.n	1ea0 <getScanCode+0x178>
    224a:	0021      	movs	r1, r4
    224c:	2006      	movs	r0, #6
    224e:	4b81      	ldr	r3, [pc, #516]	; (2454 <STACK_SIZE+0x454>)
    2250:	4798      	blx	r3
    2252:	0004      	movs	r4, r0
    2254:	e629      	b.n	1eaa <getScanCode+0x182>
    2256:	0021      	movs	r1, r4
    2258:	2007      	movs	r0, #7
    225a:	4b7e      	ldr	r3, [pc, #504]	; (2454 <STACK_SIZE+0x454>)
    225c:	4798      	blx	r3
    225e:	0004      	movs	r4, r0
    2260:	e628      	b.n	1eb4 <getScanCode+0x18c>
    2262:	0021      	movs	r1, r4
    2264:	2008      	movs	r0, #8
    2266:	4b7b      	ldr	r3, [pc, #492]	; (2454 <STACK_SIZE+0x454>)
    2268:	4798      	blx	r3
    226a:	0004      	movs	r4, r0
    226c:	e627      	b.n	1ebe <getScanCode+0x196>
    226e:	0021      	movs	r1, r4
    2270:	2009      	movs	r0, #9
    2272:	4b78      	ldr	r3, [pc, #480]	; (2454 <STACK_SIZE+0x454>)
    2274:	4798      	blx	r3
    2276:	0004      	movs	r4, r0
    2278:	e626      	b.n	1ec8 <getScanCode+0x1a0>
    227a:	0021      	movs	r1, r4
    227c:	200a      	movs	r0, #10
    227e:	4b75      	ldr	r3, [pc, #468]	; (2454 <STACK_SIZE+0x454>)
    2280:	4798      	blx	r3
    2282:	0004      	movs	r4, r0
    2284:	e62d      	b.n	1ee2 <getScanCode+0x1ba>
    2286:	0021      	movs	r1, r4
    2288:	200b      	movs	r0, #11
    228a:	4b72      	ldr	r3, [pc, #456]	; (2454 <STACK_SIZE+0x454>)
    228c:	4798      	blx	r3
    228e:	0004      	movs	r4, r0
    2290:	e62c      	b.n	1eec <getScanCode+0x1c4>
    2292:	0021      	movs	r1, r4
    2294:	200c      	movs	r0, #12
    2296:	4b6f      	ldr	r3, [pc, #444]	; (2454 <STACK_SIZE+0x454>)
    2298:	4798      	blx	r3
    229a:	0004      	movs	r4, r0
    229c:	e62b      	b.n	1ef6 <getScanCode+0x1ce>
    229e:	0021      	movs	r1, r4
    22a0:	200d      	movs	r0, #13
    22a2:	4b6c      	ldr	r3, [pc, #432]	; (2454 <STACK_SIZE+0x454>)
    22a4:	4798      	blx	r3
    22a6:	0004      	movs	r4, r0
    22a8:	e62a      	b.n	1f00 <getScanCode+0x1d8>
    22aa:	0021      	movs	r1, r4
    22ac:	200e      	movs	r0, #14
    22ae:	4b69      	ldr	r3, [pc, #420]	; (2454 <STACK_SIZE+0x454>)
    22b0:	4798      	blx	r3
    22b2:	0004      	movs	r4, r0
    22b4:	e629      	b.n	1f0a <getScanCode+0x1e2>
    22b6:	0021      	movs	r1, r4
    22b8:	200f      	movs	r0, #15
    22ba:	4b66      	ldr	r3, [pc, #408]	; (2454 <STACK_SIZE+0x454>)
    22bc:	4798      	blx	r3
    22be:	0004      	movs	r4, r0
    22c0:	e628      	b.n	1f14 <getScanCode+0x1ec>
    22c2:	0021      	movs	r1, r4
    22c4:	2010      	movs	r0, #16
    22c6:	4b63      	ldr	r3, [pc, #396]	; (2454 <STACK_SIZE+0x454>)
    22c8:	4798      	blx	r3
    22ca:	0004      	movs	r4, r0
    22cc:	e627      	b.n	1f1e <getScanCode+0x1f6>
    22ce:	0021      	movs	r1, r4
    22d0:	2011      	movs	r0, #17
    22d2:	4b60      	ldr	r3, [pc, #384]	; (2454 <STACK_SIZE+0x454>)
    22d4:	4798      	blx	r3
    22d6:	0004      	movs	r4, r0
    22d8:	e626      	b.n	1f28 <getScanCode+0x200>
    22da:	0021      	movs	r1, r4
    22dc:	2012      	movs	r0, #18
    22de:	4b5d      	ldr	r3, [pc, #372]	; (2454 <STACK_SIZE+0x454>)
    22e0:	4798      	blx	r3
    22e2:	0004      	movs	r4, r0
    22e4:	e625      	b.n	1f32 <getScanCode+0x20a>
    22e6:	0021      	movs	r1, r4
    22e8:	2013      	movs	r0, #19
    22ea:	4b5a      	ldr	r3, [pc, #360]	; (2454 <STACK_SIZE+0x454>)
    22ec:	4798      	blx	r3
    22ee:	0004      	movs	r4, r0
    22f0:	e624      	b.n	1f3c <getScanCode+0x214>
    22f2:	0021      	movs	r1, r4
    22f4:	2014      	movs	r0, #20
    22f6:	4b57      	ldr	r3, [pc, #348]	; (2454 <STACK_SIZE+0x454>)
    22f8:	4798      	blx	r3
    22fa:	0004      	movs	r4, r0
    22fc:	e62b      	b.n	1f56 <getScanCode+0x22e>
    22fe:	0021      	movs	r1, r4
    2300:	2015      	movs	r0, #21
    2302:	4b54      	ldr	r3, [pc, #336]	; (2454 <STACK_SIZE+0x454>)
    2304:	4798      	blx	r3
    2306:	0004      	movs	r4, r0
    2308:	e62a      	b.n	1f60 <getScanCode+0x238>
    230a:	0021      	movs	r1, r4
    230c:	2016      	movs	r0, #22
    230e:	4b51      	ldr	r3, [pc, #324]	; (2454 <STACK_SIZE+0x454>)
    2310:	4798      	blx	r3
    2312:	0004      	movs	r4, r0
    2314:	e629      	b.n	1f6a <getScanCode+0x242>
    2316:	0021      	movs	r1, r4
    2318:	2017      	movs	r0, #23
    231a:	4b4e      	ldr	r3, [pc, #312]	; (2454 <STACK_SIZE+0x454>)
    231c:	4798      	blx	r3
    231e:	0004      	movs	r4, r0
    2320:	e628      	b.n	1f74 <getScanCode+0x24c>
    2322:	0021      	movs	r1, r4
    2324:	2018      	movs	r0, #24
    2326:	4b4b      	ldr	r3, [pc, #300]	; (2454 <STACK_SIZE+0x454>)
    2328:	4798      	blx	r3
    232a:	0004      	movs	r4, r0
    232c:	e627      	b.n	1f7e <getScanCode+0x256>
    232e:	0021      	movs	r1, r4
    2330:	2019      	movs	r0, #25
    2332:	4b48      	ldr	r3, [pc, #288]	; (2454 <STACK_SIZE+0x454>)
    2334:	4798      	blx	r3
    2336:	0004      	movs	r4, r0
    2338:	e626      	b.n	1f88 <getScanCode+0x260>
    233a:	0021      	movs	r1, r4
    233c:	201a      	movs	r0, #26
    233e:	4b45      	ldr	r3, [pc, #276]	; (2454 <STACK_SIZE+0x454>)
    2340:	4798      	blx	r3
    2342:	0004      	movs	r4, r0
    2344:	e625      	b.n	1f92 <getScanCode+0x26a>
    2346:	0021      	movs	r1, r4
    2348:	201b      	movs	r0, #27
    234a:	4b42      	ldr	r3, [pc, #264]	; (2454 <STACK_SIZE+0x454>)
    234c:	4798      	blx	r3
    234e:	0004      	movs	r4, r0
    2350:	e624      	b.n	1f9c <getScanCode+0x274>
    2352:	0021      	movs	r1, r4
    2354:	201c      	movs	r0, #28
    2356:	4b3f      	ldr	r3, [pc, #252]	; (2454 <STACK_SIZE+0x454>)
    2358:	4798      	blx	r3
    235a:	0004      	movs	r4, r0
    235c:	e623      	b.n	1fa6 <getScanCode+0x27e>
    235e:	0021      	movs	r1, r4
    2360:	201d      	movs	r0, #29
    2362:	4b3c      	ldr	r3, [pc, #240]	; (2454 <STACK_SIZE+0x454>)
    2364:	4798      	blx	r3
    2366:	0004      	movs	r4, r0
    2368:	e622      	b.n	1fb0 <getScanCode+0x288>
    236a:	0021      	movs	r1, r4
    236c:	201e      	movs	r0, #30
    236e:	4b39      	ldr	r3, [pc, #228]	; (2454 <STACK_SIZE+0x454>)
    2370:	4798      	blx	r3
    2372:	0004      	movs	r4, r0
    2374:	e629      	b.n	1fca <getScanCode+0x2a2>
    2376:	0021      	movs	r1, r4
    2378:	201f      	movs	r0, #31
    237a:	4b36      	ldr	r3, [pc, #216]	; (2454 <STACK_SIZE+0x454>)
    237c:	4798      	blx	r3
    237e:	0004      	movs	r4, r0
    2380:	e628      	b.n	1fd4 <getScanCode+0x2ac>
    2382:	0021      	movs	r1, r4
    2384:	2020      	movs	r0, #32
    2386:	4b33      	ldr	r3, [pc, #204]	; (2454 <STACK_SIZE+0x454>)
    2388:	4798      	blx	r3
    238a:	0004      	movs	r4, r0
    238c:	e627      	b.n	1fde <getScanCode+0x2b6>
    238e:	0021      	movs	r1, r4
    2390:	2021      	movs	r0, #33	; 0x21
    2392:	4b30      	ldr	r3, [pc, #192]	; (2454 <STACK_SIZE+0x454>)
    2394:	4798      	blx	r3
    2396:	0004      	movs	r4, r0
    2398:	e626      	b.n	1fe8 <getScanCode+0x2c0>
    239a:	0021      	movs	r1, r4
    239c:	2022      	movs	r0, #34	; 0x22
    239e:	4b2d      	ldr	r3, [pc, #180]	; (2454 <STACK_SIZE+0x454>)
    23a0:	4798      	blx	r3
    23a2:	0004      	movs	r4, r0
    23a4:	e625      	b.n	1ff2 <getScanCode+0x2ca>
    23a6:	0021      	movs	r1, r4
    23a8:	2023      	movs	r0, #35	; 0x23
    23aa:	4b2a      	ldr	r3, [pc, #168]	; (2454 <STACK_SIZE+0x454>)
    23ac:	4798      	blx	r3
    23ae:	0004      	movs	r4, r0
    23b0:	e624      	b.n	1ffc <getScanCode+0x2d4>
    23b2:	0021      	movs	r1, r4
    23b4:	2024      	movs	r0, #36	; 0x24
    23b6:	4b27      	ldr	r3, [pc, #156]	; (2454 <STACK_SIZE+0x454>)
    23b8:	4798      	blx	r3
    23ba:	0004      	movs	r4, r0
    23bc:	e623      	b.n	2006 <STACK_SIZE+0x6>
    23be:	0021      	movs	r1, r4
    23c0:	2025      	movs	r0, #37	; 0x25
    23c2:	4b24      	ldr	r3, [pc, #144]	; (2454 <STACK_SIZE+0x454>)
    23c4:	4798      	blx	r3
    23c6:	0004      	movs	r4, r0
    23c8:	e622      	b.n	2010 <STACK_SIZE+0x10>
    23ca:	0021      	movs	r1, r4
    23cc:	2026      	movs	r0, #38	; 0x26
    23ce:	4b21      	ldr	r3, [pc, #132]	; (2454 <STACK_SIZE+0x454>)
    23d0:	4798      	blx	r3
    23d2:	0004      	movs	r4, r0
    23d4:	e621      	b.n	201a <STACK_SIZE+0x1a>
    23d6:	0021      	movs	r1, r4
    23d8:	2027      	movs	r0, #39	; 0x27
    23da:	4b1e      	ldr	r3, [pc, #120]	; (2454 <STACK_SIZE+0x454>)
    23dc:	4798      	blx	r3
    23de:	0004      	movs	r4, r0
    23e0:	e620      	b.n	2024 <STACK_SIZE+0x24>
    23e2:	0021      	movs	r1, r4
    23e4:	2028      	movs	r0, #40	; 0x28
    23e6:	4b1b      	ldr	r3, [pc, #108]	; (2454 <STACK_SIZE+0x454>)
    23e8:	4798      	blx	r3
    23ea:	0004      	movs	r4, r0
    23ec:	e627      	b.n	203e <STACK_SIZE+0x3e>
    23ee:	0021      	movs	r1, r4
    23f0:	2029      	movs	r0, #41	; 0x29
    23f2:	4b18      	ldr	r3, [pc, #96]	; (2454 <STACK_SIZE+0x454>)
    23f4:	4798      	blx	r3
    23f6:	0004      	movs	r4, r0
    23f8:	e626      	b.n	2048 <STACK_SIZE+0x48>
    23fa:	0021      	movs	r1, r4
    23fc:	202a      	movs	r0, #42	; 0x2a
    23fe:	4b15      	ldr	r3, [pc, #84]	; (2454 <STACK_SIZE+0x454>)
    2400:	4798      	blx	r3
    2402:	0004      	movs	r4, r0
    2404:	e625      	b.n	2052 <STACK_SIZE+0x52>
    2406:	0021      	movs	r1, r4
    2408:	202b      	movs	r0, #43	; 0x2b
    240a:	4b12      	ldr	r3, [pc, #72]	; (2454 <STACK_SIZE+0x454>)
    240c:	4798      	blx	r3
    240e:	0004      	movs	r4, r0
    2410:	e624      	b.n	205c <STACK_SIZE+0x5c>
    2412:	0021      	movs	r1, r4
    2414:	202c      	movs	r0, #44	; 0x2c
    2416:	4b0f      	ldr	r3, [pc, #60]	; (2454 <STACK_SIZE+0x454>)
    2418:	4798      	blx	r3
    241a:	0004      	movs	r4, r0
    241c:	e623      	b.n	2066 <STACK_SIZE+0x66>
    241e:	0021      	movs	r1, r4
    2420:	202d      	movs	r0, #45	; 0x2d
    2422:	4b0c      	ldr	r3, [pc, #48]	; (2454 <STACK_SIZE+0x454>)
    2424:	4798      	blx	r3
    2426:	0004      	movs	r4, r0
    2428:	e622      	b.n	2070 <STACK_SIZE+0x70>
    242a:	46c0      	nop			; (mov r8, r8)
    242c:	41004400 	.word	0x41004400
    2430:	41004414 	.word	0x41004414
    2434:	41004418 	.word	0x41004418
    2438:	f380cfc3 	.word	0xf380cfc3
    243c:	00001d15 	.word	0x00001d15
    2440:	00005dfc 	.word	0x00005dfc
    2444:	0000328d 	.word	0x0000328d
    2448:	00005df0 	.word	0x00005df0
    244c:	00005df8 	.word	0x00005df8
    2450:	00001cf5 	.word	0x00001cf5
    2454:	00001cdd 	.word	0x00001cdd
    2458:	0021      	movs	r1, r4
    245a:	202e      	movs	r0, #46	; 0x2e
    245c:	4b4a      	ldr	r3, [pc, #296]	; (2588 <STACK_SIZE+0x588>)
    245e:	4798      	blx	r3
    2460:	0004      	movs	r4, r0
    2462:	e60a      	b.n	207a <STACK_SIZE+0x7a>
    2464:	0021      	movs	r1, r4
    2466:	202f      	movs	r0, #47	; 0x2f
    2468:	4b47      	ldr	r3, [pc, #284]	; (2588 <STACK_SIZE+0x588>)
    246a:	4798      	blx	r3
    246c:	0004      	movs	r4, r0
    246e:	e609      	b.n	2084 <STACK_SIZE+0x84>
    2470:	0021      	movs	r1, r4
    2472:	2030      	movs	r0, #48	; 0x30
    2474:	4b44      	ldr	r3, [pc, #272]	; (2588 <STACK_SIZE+0x588>)
    2476:	4798      	blx	r3
    2478:	0004      	movs	r4, r0
    247a:	e608      	b.n	208e <STACK_SIZE+0x8e>
    247c:	0021      	movs	r1, r4
    247e:	2031      	movs	r0, #49	; 0x31
    2480:	4b41      	ldr	r3, [pc, #260]	; (2588 <STACK_SIZE+0x588>)
    2482:	4798      	blx	r3
    2484:	0004      	movs	r4, r0
    2486:	e607      	b.n	2098 <STACK_SIZE+0x98>
    2488:	0021      	movs	r1, r4
    248a:	2032      	movs	r0, #50	; 0x32
    248c:	4b3e      	ldr	r3, [pc, #248]	; (2588 <STACK_SIZE+0x588>)
    248e:	4798      	blx	r3
    2490:	0004      	movs	r4, r0
    2492:	e60e      	b.n	20b2 <STACK_SIZE+0xb2>
    2494:	0021      	movs	r1, r4
    2496:	2033      	movs	r0, #51	; 0x33
    2498:	4b3b      	ldr	r3, [pc, #236]	; (2588 <STACK_SIZE+0x588>)
    249a:	4798      	blx	r3
    249c:	0004      	movs	r4, r0
    249e:	e60d      	b.n	20bc <STACK_SIZE+0xbc>
    24a0:	0021      	movs	r1, r4
    24a2:	2034      	movs	r0, #52	; 0x34
    24a4:	4b38      	ldr	r3, [pc, #224]	; (2588 <STACK_SIZE+0x588>)
    24a6:	4798      	blx	r3
    24a8:	0004      	movs	r4, r0
    24aa:	e616      	b.n	20da <STACK_SIZE+0xda>
    24ac:	0021      	movs	r1, r4
    24ae:	2035      	movs	r0, #53	; 0x35
    24b0:	4b35      	ldr	r3, [pc, #212]	; (2588 <STACK_SIZE+0x588>)
    24b2:	4798      	blx	r3
    24b4:	0004      	movs	r4, r0
    24b6:	e615      	b.n	20e4 <STACK_SIZE+0xe4>
    24b8:	0021      	movs	r1, r4
    24ba:	2036      	movs	r0, #54	; 0x36
    24bc:	4b32      	ldr	r3, [pc, #200]	; (2588 <STACK_SIZE+0x588>)
    24be:	4798      	blx	r3
    24c0:	0004      	movs	r4, r0
    24c2:	e614      	b.n	20ee <STACK_SIZE+0xee>
    24c4:	0021      	movs	r1, r4
    24c6:	2037      	movs	r0, #55	; 0x37
    24c8:	4b2f      	ldr	r3, [pc, #188]	; (2588 <STACK_SIZE+0x588>)
    24ca:	4798      	blx	r3
    24cc:	0004      	movs	r4, r0
    24ce:	e613      	b.n	20f8 <STACK_SIZE+0xf8>
    24d0:	0021      	movs	r1, r4
    24d2:	2038      	movs	r0, #56	; 0x38
    24d4:	4b2c      	ldr	r3, [pc, #176]	; (2588 <STACK_SIZE+0x588>)
    24d6:	4798      	blx	r3
    24d8:	0004      	movs	r4, r0
    24da:	e612      	b.n	2102 <STACK_SIZE+0x102>
    24dc:	0021      	movs	r1, r4
    24de:	2039      	movs	r0, #57	; 0x39
    24e0:	4b29      	ldr	r3, [pc, #164]	; (2588 <STACK_SIZE+0x588>)
    24e2:	4798      	blx	r3
    24e4:	0004      	movs	r4, r0
    24e6:	e611      	b.n	210c <STACK_SIZE+0x10c>
    24e8:	0021      	movs	r1, r4
    24ea:	203a      	movs	r0, #58	; 0x3a
    24ec:	4b26      	ldr	r3, [pc, #152]	; (2588 <STACK_SIZE+0x588>)
    24ee:	4798      	blx	r3
    24f0:	0004      	movs	r4, r0
    24f2:	e610      	b.n	2116 <STACK_SIZE+0x116>
    24f4:	0021      	movs	r1, r4
    24f6:	203b      	movs	r0, #59	; 0x3b
    24f8:	4b23      	ldr	r3, [pc, #140]	; (2588 <STACK_SIZE+0x588>)
    24fa:	4798      	blx	r3
    24fc:	0004      	movs	r4, r0
    24fe:	e60f      	b.n	2120 <STACK_SIZE+0x120>
    2500:	0021      	movs	r1, r4
    2502:	203c      	movs	r0, #60	; 0x3c
    2504:	4b20      	ldr	r3, [pc, #128]	; (2588 <STACK_SIZE+0x588>)
    2506:	4798      	blx	r3
    2508:	0004      	movs	r4, r0
    250a:	e616      	b.n	213a <STACK_SIZE+0x13a>
    250c:	0021      	movs	r1, r4
    250e:	203d      	movs	r0, #61	; 0x3d
    2510:	4b1d      	ldr	r3, [pc, #116]	; (2588 <STACK_SIZE+0x588>)
    2512:	4798      	blx	r3
    2514:	0004      	movs	r4, r0
    2516:	e615      	b.n	2144 <STACK_SIZE+0x144>
    2518:	0021      	movs	r1, r4
    251a:	203e      	movs	r0, #62	; 0x3e
    251c:	4b1a      	ldr	r3, [pc, #104]	; (2588 <STACK_SIZE+0x588>)
    251e:	4798      	blx	r3
    2520:	0004      	movs	r4, r0
    2522:	e614      	b.n	214e <STACK_SIZE+0x14e>
    2524:	0021      	movs	r1, r4
    2526:	203f      	movs	r0, #63	; 0x3f
    2528:	4b17      	ldr	r3, [pc, #92]	; (2588 <STACK_SIZE+0x588>)
    252a:	4798      	blx	r3
    252c:	0004      	movs	r4, r0
    252e:	e613      	b.n	2158 <STACK_SIZE+0x158>
    2530:	0021      	movs	r1, r4
    2532:	2040      	movs	r0, #64	; 0x40
    2534:	4b14      	ldr	r3, [pc, #80]	; (2588 <STACK_SIZE+0x588>)
    2536:	4798      	blx	r3
    2538:	0004      	movs	r4, r0
    253a:	e612      	b.n	2162 <STACK_SIZE+0x162>
    253c:	0021      	movs	r1, r4
    253e:	2041      	movs	r0, #65	; 0x41
    2540:	4b11      	ldr	r3, [pc, #68]	; (2588 <STACK_SIZE+0x588>)
    2542:	4798      	blx	r3
    2544:	0004      	movs	r4, r0
    2546:	e611      	b.n	216c <STACK_SIZE+0x16c>
    2548:	0021      	movs	r1, r4
    254a:	2042      	movs	r0, #66	; 0x42
    254c:	4b0e      	ldr	r3, [pc, #56]	; (2588 <STACK_SIZE+0x588>)
    254e:	4798      	blx	r3
    2550:	0004      	movs	r4, r0
    2552:	e610      	b.n	2176 <STACK_SIZE+0x176>
    2554:	0021      	movs	r1, r4
    2556:	2043      	movs	r0, #67	; 0x43
    2558:	4b0b      	ldr	r3, [pc, #44]	; (2588 <STACK_SIZE+0x588>)
    255a:	4798      	blx	r3
    255c:	0004      	movs	r4, r0
    255e:	e60f      	b.n	2180 <STACK_SIZE+0x180>
    2560:	0021      	movs	r1, r4
    2562:	2044      	movs	r0, #68	; 0x44
    2564:	4b08      	ldr	r3, [pc, #32]	; (2588 <STACK_SIZE+0x588>)
    2566:	4798      	blx	r3
    2568:	0004      	movs	r4, r0
    256a:	e60e      	b.n	218a <STACK_SIZE+0x18a>
    256c:	0021      	movs	r1, r4
    256e:	2045      	movs	r0, #69	; 0x45
    2570:	4b05      	ldr	r3, [pc, #20]	; (2588 <STACK_SIZE+0x588>)
    2572:	4798      	blx	r3
    2574:	0004      	movs	r4, r0
    2576:	e60d      	b.n	2194 <STACK_SIZE+0x194>
	printf("Keys pressed: %i \t",count(list));
    2578:	2000      	movs	r0, #0
    257a:	4b04      	ldr	r3, [pc, #16]	; (258c <STACK_SIZE+0x58c>)
    257c:	4798      	blx	r3
    257e:	0001      	movs	r1, r0
    2580:	4803      	ldr	r0, [pc, #12]	; (2590 <STACK_SIZE+0x590>)
    2582:	4b04      	ldr	r3, [pc, #16]	; (2594 <STACK_SIZE+0x594>)
    2584:	4798      	blx	r3
    2586:	e62e      	b.n	21e6 <STACK_SIZE+0x1e6>
    2588:	00001cdd 	.word	0x00001cdd
    258c:	00001d15 	.word	0x00001d15
    2590:	00005dfc 	.word	0x00005dfc
    2594:	0000328d 	.word	0x0000328d

00002598 <LCD_Write_Bus>:
	LCD_Write_DATA8(0x80);
	REG_PORT_OUTSET1 = LCD_CS;
}

void LCD_Write_Bus(char VH, char VL)
{
    2598:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = 0x0000ffff;
    259a:	4c06      	ldr	r4, [pc, #24]	; (25b4 <LCD_Write_Bus+0x1c>)
    259c:	4b06      	ldr	r3, [pc, #24]	; (25b8 <LCD_Write_Bus+0x20>)
    259e:	6023      	str	r3, [r4, #0]
	REG_PORT_OUTSET1 = (VH << 8) | VL;
    25a0:	0200      	lsls	r0, r0, #8
    25a2:	4301      	orrs	r1, r0
    25a4:	4b05      	ldr	r3, [pc, #20]	; (25bc <LCD_Write_Bus+0x24>)
    25a6:	6019      	str	r1, [r3, #0]
	REG_PORT_OUTCLR1 = LCD_WR;
    25a8:	2280      	movs	r2, #128	; 0x80
    25aa:	0292      	lsls	r2, r2, #10
    25ac:	6022      	str	r2, [r4, #0]
	REG_PORT_OUTSET1 = LCD_WR;
    25ae:	601a      	str	r2, [r3, #0]
}
    25b0:	bd10      	pop	{r4, pc}
    25b2:	46c0      	nop			; (mov r8, r8)
    25b4:	41004494 	.word	0x41004494
    25b8:	0000ffff 	.word	0x0000ffff
    25bc:	41004498 	.word	0x41004498

000025c0 <LCD_Write_COM16>:

void LCD_Write_COM16(char VH, char VL)
{
    25c0:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = LCD_DC;
    25c2:	2280      	movs	r2, #128	; 0x80
    25c4:	0412      	lsls	r2, r2, #16
    25c6:	4b02      	ldr	r3, [pc, #8]	; (25d0 <LCD_Write_COM16+0x10>)
    25c8:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(VH,VL);
    25ca:	4b02      	ldr	r3, [pc, #8]	; (25d4 <LCD_Write_COM16+0x14>)
    25cc:	4798      	blx	r3
}
    25ce:	bd10      	pop	{r4, pc}
    25d0:	41004494 	.word	0x41004494
    25d4:	00002599 	.word	0x00002599

000025d8 <LCD_Write_DATA16>:
	REG_PORT_OUTCLR1 = LCD_DC;
	LCD_Write_Bus(0x00, VL);
}

void LCD_Write_DATA16(char VH, char VL)
{
    25d8:	b510      	push	{r4, lr}
	REG_PORT_OUTSET1 = LCD_DC;
    25da:	2280      	movs	r2, #128	; 0x80
    25dc:	0412      	lsls	r2, r2, #16
    25de:	4b02      	ldr	r3, [pc, #8]	; (25e8 <LCD_Write_DATA16+0x10>)
    25e0:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(VH,VL);
    25e2:	4b02      	ldr	r3, [pc, #8]	; (25ec <LCD_Write_DATA16+0x14>)
    25e4:	4798      	blx	r3
}
    25e6:	bd10      	pop	{r4, pc}
    25e8:	41004498 	.word	0x41004498
    25ec:	00002599 	.word	0x00002599

000025f0 <LCD_Write_DATA8>:

void LCD_Write_DATA8(char VL)
{
    25f0:	b510      	push	{r4, lr}
    25f2:	0001      	movs	r1, r0
	REG_PORT_OUTSET1 = LCD_DC;
    25f4:	2280      	movs	r2, #128	; 0x80
    25f6:	0412      	lsls	r2, r2, #16
    25f8:	4b02      	ldr	r3, [pc, #8]	; (2604 <LCD_Write_DATA8+0x14>)
    25fa:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(0x00, VL);
    25fc:	2000      	movs	r0, #0
    25fe:	4b02      	ldr	r3, [pc, #8]	; (2608 <LCD_Write_DATA8+0x18>)
    2600:	4798      	blx	r3
}
    2602:	bd10      	pop	{r4, pc}
    2604:	41004498 	.word	0x41004498
    2608:	00002599 	.word	0x00002599

0000260c <setDrawDirection>:
{
    260c:	b570      	push	{r4, r5, r6, lr}
	REG_PORT_OUTCLR1 = LCD_CS;
    260e:	4b09      	ldr	r3, [pc, #36]	; (2634 <setDrawDirection+0x28>)
    2610:	2580      	movs	r5, #128	; 0x80
    2612:	03ed      	lsls	r5, r5, #15
    2614:	601d      	str	r5, [r3, #0]
	REG_PORT_OUTCLR1 = LCD_DC;
    2616:	2680      	movs	r6, #128	; 0x80
    2618:	0436      	lsls	r6, r6, #16
    261a:	601e      	str	r6, [r3, #0]
	LCD_Write_COM16(0x36, 0x00);
    261c:	2100      	movs	r1, #0
    261e:	2036      	movs	r0, #54	; 0x36
    2620:	4b05      	ldr	r3, [pc, #20]	; (2638 <setDrawDirection+0x2c>)
    2622:	4798      	blx	r3
	REG_PORT_OUTSET1 = LCD_DC;
    2624:	4c05      	ldr	r4, [pc, #20]	; (263c <setDrawDirection+0x30>)
    2626:	6026      	str	r6, [r4, #0]
	LCD_Write_DATA8(0x80);
    2628:	2080      	movs	r0, #128	; 0x80
    262a:	4b05      	ldr	r3, [pc, #20]	; (2640 <setDrawDirection+0x34>)
    262c:	4798      	blx	r3
	REG_PORT_OUTSET1 = LCD_CS;
    262e:	6025      	str	r5, [r4, #0]
}
    2630:	bd70      	pop	{r4, r5, r6, pc}
    2632:	46c0      	nop			; (mov r8, r8)
    2634:	41004494 	.word	0x41004494
    2638:	000025c1 	.word	0x000025c1
    263c:	41004498 	.word	0x41004498
    2640:	000025f1 	.word	0x000025f1

00002644 <setPixel>:

void setPixel(uint16_t color)
{
    2644:	b510      	push	{r4, lr}
	//it sets it to a 16-bit color.
	LCD_Write_DATA16((color>>8),(color&0xFF));
    2646:	b2c1      	uxtb	r1, r0
    2648:	0a00      	lsrs	r0, r0, #8
    264a:	4b01      	ldr	r3, [pc, #4]	; (2650 <setPixel+0xc>)
    264c:	4798      	blx	r3
}
    264e:	bd10      	pop	{r4, pc}
    2650:	000025d9 	.word	0x000025d9

00002654 <LCD_Fast_Fill>:
	(((long)(x2-x1)+1)*((long)(y2-y1)+1)));
	REG_PORT_OUTSET1 = LCD_CS;
}

void LCD_Fast_Fill(int ch, int cl, long pix)
{
    2654:	b570      	push	{r4, r5, r6, lr}
	int blocks;
	
		
	REG_PORT_OUTCLR1 = 0x0000ffff;
    2656:	4c19      	ldr	r4, [pc, #100]	; (26bc <LCD_Fast_Fill+0x68>)
    2658:	4b19      	ldr	r3, [pc, #100]	; (26c0 <LCD_Fast_Fill+0x6c>)
    265a:	601c      	str	r4, [r3, #0]
	REG_PORT_OUTSET1 = (ch << 8) | cl;
    265c:	0200      	lsls	r0, r0, #8
    265e:	4301      	orrs	r1, r0
    2660:	4b18      	ldr	r3, [pc, #96]	; (26c4 <LCD_Fast_Fill+0x70>)
    2662:	6019      	str	r1, [r3, #0]

	blocks = pix/16;
    2664:	17d3      	asrs	r3, r2, #31
    2666:	260f      	movs	r6, #15
    2668:	401e      	ands	r6, r3
    266a:	18b6      	adds	r6, r6, r2
    266c:	1136      	asrs	r6, r6, #4
	for (int i=0; i<blocks; i++)
    266e:	2500      	movs	r5, #0
    2670:	2e00      	cmp	r6, #0
    2672:	dd0c      	ble.n	268e <LCD_Fast_Fill+0x3a>
	{
		for (int j=0; j<16; j++)
		{
			REG_PORT_OUTCLR1 = LCD_WR;
    2674:	4c12      	ldr	r4, [pc, #72]	; (26c0 <LCD_Fast_Fill+0x6c>)
    2676:	2180      	movs	r1, #128	; 0x80
    2678:	0289      	lsls	r1, r1, #10
			REG_PORT_OUTSET1 = LCD_WR;
    267a:	4812      	ldr	r0, [pc, #72]	; (26c4 <LCD_Fast_Fill+0x70>)
{
    267c:	2310      	movs	r3, #16
			REG_PORT_OUTCLR1 = LCD_WR;
    267e:	6021      	str	r1, [r4, #0]
			REG_PORT_OUTSET1 = LCD_WR;
    2680:	6001      	str	r1, [r0, #0]
    2682:	3b01      	subs	r3, #1
		for (int j=0; j<16; j++)
    2684:	2b00      	cmp	r3, #0
    2686:	d1fa      	bne.n	267e <LCD_Fast_Fill+0x2a>
	for (int i=0; i<blocks; i++)
    2688:	3501      	adds	r5, #1
    268a:	42ae      	cmp	r6, r5
    268c:	d1f6      	bne.n	267c <LCD_Fast_Fill+0x28>
		}
	}
	
	if ((pix % 16) != 0)
    268e:	0713      	lsls	r3, r2, #28
    2690:	d013      	beq.n	26ba <LCD_Fast_Fill+0x66>
	for (int i=0; i<(pix % 16)+1; i++)
    2692:	17d3      	asrs	r3, r2, #31
    2694:	0f1b      	lsrs	r3, r3, #28
    2696:	18d2      	adds	r2, r2, r3
    2698:	210f      	movs	r1, #15
    269a:	4011      	ands	r1, r2
    269c:	1ac9      	subs	r1, r1, r3
    269e:	1c4b      	adds	r3, r1, #1
    26a0:	2b00      	cmp	r3, #0
    26a2:	dd0a      	ble.n	26ba <LCD_Fast_Fill+0x66>
    26a4:	0019      	movs	r1, r3
    26a6:	2300      	movs	r3, #0
	{
		REG_PORT_OUTCLR1 = LCD_WR;
    26a8:	4c05      	ldr	r4, [pc, #20]	; (26c0 <LCD_Fast_Fill+0x6c>)
    26aa:	2280      	movs	r2, #128	; 0x80
    26ac:	0292      	lsls	r2, r2, #10
		REG_PORT_OUTSET1 = LCD_WR;
    26ae:	4805      	ldr	r0, [pc, #20]	; (26c4 <LCD_Fast_Fill+0x70>)
		REG_PORT_OUTCLR1 = LCD_WR;
    26b0:	6022      	str	r2, [r4, #0]
		REG_PORT_OUTSET1 = LCD_WR;
    26b2:	6002      	str	r2, [r0, #0]
	for (int i=0; i<(pix % 16)+1; i++)
    26b4:	3301      	adds	r3, #1
    26b6:	4299      	cmp	r1, r3
    26b8:	d1fa      	bne.n	26b0 <LCD_Fast_Fill+0x5c>
	}
}
    26ba:	bd70      	pop	{r4, r5, r6, pc}
    26bc:	0000ffff 	.word	0x0000ffff
    26c0:	41004494 	.word	0x41004494
    26c4:	41004498 	.word	0x41004498

000026c8 <setXY>:
	back_Color_High = (color >> 8);
	back_Color_Low = (color & 0xFF);
}

void setXY(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
    26c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    26ca:	b083      	sub	sp, #12
    26cc:	000e      	movs	r6, r1
    26ce:	9300      	str	r3, [sp, #0]
	
	SwapUint16(x1, y1);
	SwapUint16(x2, y2);
	y1=display_Y_size-y1;
    26d0:	4b1c      	ldr	r3, [pc, #112]	; (2744 <setXY+0x7c>)
    26d2:	881d      	ldrh	r5, [r3, #0]
    26d4:	1a28      	subs	r0, r5, r0
    26d6:	b287      	uxth	r7, r0
	y2=display_Y_size-y2;
    26d8:	1aad      	subs	r5, r5, r2
    26da:	b2ad      	uxth	r5, r5
	SwapUint16(y1, y2);
	
	
	LCD_Write_COM16(0x2a,0x00);
    26dc:	2100      	movs	r1, #0
    26de:	202a      	movs	r0, #42	; 0x2a
    26e0:	4c19      	ldr	r4, [pc, #100]	; (2748 <setXY+0x80>)
    26e2:	47a0      	blx	r4
	LCD_Write_DATA8(x1>>8);
    26e4:	9601      	str	r6, [sp, #4]
    26e6:	0a30      	lsrs	r0, r6, #8
    26e8:	4e18      	ldr	r6, [pc, #96]	; (274c <setXY+0x84>)
    26ea:	47b0      	blx	r6
	LCD_Write_COM16(0x2a,0x01);
    26ec:	2101      	movs	r1, #1
    26ee:	202a      	movs	r0, #42	; 0x2a
    26f0:	47a0      	blx	r4
	LCD_Write_DATA8(x1);
    26f2:	466b      	mov	r3, sp
    26f4:	7918      	ldrb	r0, [r3, #4]
    26f6:	47b0      	blx	r6
	LCD_Write_COM16(0x2a,0x02);
    26f8:	2102      	movs	r1, #2
    26fa:	202a      	movs	r0, #42	; 0x2a
    26fc:	47a0      	blx	r4
	LCD_Write_DATA8(x2>>8);
    26fe:	9b00      	ldr	r3, [sp, #0]
    2700:	0a18      	lsrs	r0, r3, #8
    2702:	47b0      	blx	r6
	LCD_Write_COM16(0x2a,0x03);
    2704:	2103      	movs	r1, #3
    2706:	202a      	movs	r0, #42	; 0x2a
    2708:	47a0      	blx	r4
	LCD_Write_DATA8(x2);
    270a:	466b      	mov	r3, sp
    270c:	7818      	ldrb	r0, [r3, #0]
    270e:	47b0      	blx	r6

	LCD_Write_COM16(0x2b,0x00);
    2710:	2100      	movs	r1, #0
    2712:	202b      	movs	r0, #43	; 0x2b
    2714:	47a0      	blx	r4
	LCD_Write_DATA8(y1>>8);
    2716:	0a28      	lsrs	r0, r5, #8
    2718:	47b0      	blx	r6
	LCD_Write_COM16(0x2b,0x01);
    271a:	2101      	movs	r1, #1
    271c:	202b      	movs	r0, #43	; 0x2b
    271e:	47a0      	blx	r4
	LCD_Write_DATA8(y1);
    2720:	b2e8      	uxtb	r0, r5
    2722:	47b0      	blx	r6
	LCD_Write_COM16(0x2b,0x02);
    2724:	2102      	movs	r1, #2
    2726:	202b      	movs	r0, #43	; 0x2b
    2728:	47a0      	blx	r4
	LCD_Write_DATA8(y2>>8);
    272a:	0a38      	lsrs	r0, r7, #8
    272c:	47b0      	blx	r6
	LCD_Write_COM16(0x2b,0x03);
    272e:	2103      	movs	r1, #3
    2730:	202b      	movs	r0, #43	; 0x2b
    2732:	47a0      	blx	r4
	LCD_Write_DATA8(y2);
    2734:	b2f8      	uxtb	r0, r7
    2736:	47b0      	blx	r6

	LCD_Write_COM16(0x2c,0x00);
    2738:	2100      	movs	r1, #0
    273a:	202c      	movs	r0, #44	; 0x2c
    273c:	47a0      	blx	r4
}
    273e:	b003      	add	sp, #12
    2740:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2742:	46c0      	nop			; (mov r8, r8)
    2744:	2000000c 	.word	0x2000000c
    2748:	000025c1 	.word	0x000025c1
    274c:	000025f1 	.word	0x000025f1

00002750 <drawChar>:
{
    2750:	b5f0      	push	{r4, r5, r6, r7, lr}
    2752:	46d6      	mov	lr, sl
    2754:	464f      	mov	r7, r9
    2756:	4646      	mov	r6, r8
    2758:	b5c0      	push	{r6, r7, lr}
    275a:	4c2f      	ldr	r4, [pc, #188]	; (2818 <drawChar+0xc8>)
    275c:	44a5      	add	sp, r4
    275e:	0004      	movs	r4, r0
	const uint8_t TermFont[256][25] = {
    2760:	22c8      	movs	r2, #200	; 0xc8
    2762:	0152      	lsls	r2, r2, #5
    2764:	492d      	ldr	r1, [pc, #180]	; (281c <drawChar+0xcc>)
    2766:	4668      	mov	r0, sp
    2768:	4b2d      	ldr	r3, [pc, #180]	; (2820 <drawChar+0xd0>)
    276a:	4798      	blx	r3
	int x = abs(xCharPos-79);
    276c:	4b2d      	ldr	r3, [pc, #180]	; (2824 <drawChar+0xd4>)
    276e:	7818      	ldrb	r0, [r3, #0]
    2770:	384f      	subs	r0, #79	; 0x4f
    2772:	17c3      	asrs	r3, r0, #31
    2774:	18c0      	adds	r0, r0, r3
    2776:	4058      	eors	r0, r3
	int y = yCharPos;
    2778:	4b2b      	ldr	r3, [pc, #172]	; (2828 <drawChar+0xd8>)
    277a:	7819      	ldrb	r1, [r3, #0]
	REG_PORT_OUTCLR1 = LCD_CS;
    277c:	2280      	movs	r2, #128	; 0x80
    277e:	03d2      	lsls	r2, r2, #15
    2780:	4b2a      	ldr	r3, [pc, #168]	; (282c <drawChar+0xdc>)
    2782:	601a      	str	r2, [r3, #0]
	setXY(x*10,y*20,x*10+9,y*20+19);
    2784:	0083      	lsls	r3, r0, #2
    2786:	18c0      	adds	r0, r0, r3
    2788:	0040      	lsls	r0, r0, #1
    278a:	b280      	uxth	r0, r0
    278c:	2314      	movs	r3, #20
    278e:	4359      	muls	r1, r3
    2790:	000b      	movs	r3, r1
    2792:	3313      	adds	r3, #19
    2794:	b29b      	uxth	r3, r3
    2796:	0002      	movs	r2, r0
    2798:	3209      	adds	r2, #9
    279a:	b292      	uxth	r2, r2
    279c:	4d24      	ldr	r5, [pc, #144]	; (2830 <drawChar+0xe0>)
    279e:	47a8      	blx	r5
    27a0:	00a5      	lsls	r5, r4, #2
    27a2:	192d      	adds	r5, r5, r4
    27a4:	00ab      	lsls	r3, r5, #2
    27a6:	18ed      	adds	r5, r5, r3
    27a8:	446d      	add	r5, sp
    27aa:	3401      	adds	r4, #1
    27ac:	00a3      	lsls	r3, r4, #2
    27ae:	191b      	adds	r3, r3, r4
    27b0:	009a      	lsls	r2, r3, #2
    27b2:	189b      	adds	r3, r3, r2
    27b4:	446b      	add	r3, sp
    27b6:	469a      	mov	sl, r3
				setPixel((back_Color_High<<8)|back_Color_Low);
    27b8:	4b1e      	ldr	r3, [pc, #120]	; (2834 <drawChar+0xe4>)
    27ba:	4699      	mov	r9, r3
    27bc:	4b1e      	ldr	r3, [pc, #120]	; (2838 <drawChar+0xe8>)
    27be:	4698      	mov	r8, r3
    27c0:	4f1e      	ldr	r7, [pc, #120]	; (283c <drawChar+0xec>)
				setPixel((fore_Color_High<<8)|fore_Color_Low);
    27c2:	4e1f      	ldr	r6, [pc, #124]	; (2840 <drawChar+0xf0>)
    27c4:	e019      	b.n	27fa <drawChar+0xaa>
				setPixel((back_Color_High<<8)|back_Color_Low);
    27c6:	464b      	mov	r3, r9
    27c8:	8818      	ldrh	r0, [r3, #0]
    27ca:	0200      	lsls	r0, r0, #8
    27cc:	4643      	mov	r3, r8
    27ce:	881b      	ldrh	r3, [r3, #0]
    27d0:	4318      	orrs	r0, r3
    27d2:	b280      	uxth	r0, r0
    27d4:	47b8      	blx	r7
		for(int j=0;j<8;j++)
    27d6:	3c01      	subs	r4, #1
    27d8:	d30c      	bcc.n	27f4 <drawChar+0xa4>
			if((TermFont[character][i]&(1<<(7-j)))!=0)
    27da:	782b      	ldrb	r3, [r5, #0]
    27dc:	4123      	asrs	r3, r4
    27de:	07db      	lsls	r3, r3, #31
    27e0:	d5f1      	bpl.n	27c6 <drawChar+0x76>
				setPixel((fore_Color_High<<8)|fore_Color_Low);
    27e2:	8830      	ldrh	r0, [r6, #0]
    27e4:	0200      	lsls	r0, r0, #8
    27e6:	4b17      	ldr	r3, [pc, #92]	; (2844 <drawChar+0xf4>)
    27e8:	881b      	ldrh	r3, [r3, #0]
    27ea:	4318      	orrs	r0, r3
    27ec:	b280      	uxth	r0, r0
    27ee:	4b13      	ldr	r3, [pc, #76]	; (283c <drawChar+0xec>)
    27f0:	4798      	blx	r3
    27f2:	e7f0      	b.n	27d6 <drawChar+0x86>
    27f4:	3501      	adds	r5, #1
	for(uint8_t i=0; i <= 24; i++)
    27f6:	4555      	cmp	r5, sl
    27f8:	d001      	beq.n	27fe <drawChar+0xae>
{
    27fa:	2407      	movs	r4, #7
    27fc:	e7ed      	b.n	27da <drawChar+0x8a>
	REG_PORT_OUTSET1 = LCD_CS;
    27fe:	2280      	movs	r2, #128	; 0x80
    2800:	03d2      	lsls	r2, r2, #15
    2802:	4b11      	ldr	r3, [pc, #68]	; (2848 <drawChar+0xf8>)
    2804:	601a      	str	r2, [r3, #0]
}
    2806:	23c8      	movs	r3, #200	; 0xc8
    2808:	015b      	lsls	r3, r3, #5
    280a:	449d      	add	sp, r3
    280c:	bc1c      	pop	{r2, r3, r4}
    280e:	4690      	mov	r8, r2
    2810:	4699      	mov	r9, r3
    2812:	46a2      	mov	sl, r4
    2814:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2816:	46c0      	nop			; (mov r8, r8)
    2818:	ffffe700 	.word	0xffffe700
    281c:	00004374 	.word	0x00004374
    2820:	00003119 	.word	0x00003119
    2824:	200000d0 	.word	0x200000d0
    2828:	200000d1 	.word	0x200000d1
    282c:	41004494 	.word	0x41004494
    2830:	000026c9 	.word	0x000026c9
    2834:	20000196 	.word	0x20000196
    2838:	20000170 	.word	0x20000170
    283c:	00002645 	.word	0x00002645
    2840:	20000172 	.word	0x20000172
    2844:	20000194 	.word	0x20000194
    2848:	41004498 	.word	0x41004498

0000284c <writeString>:
{
    284c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    284e:	0006      	movs	r6, r0
	int length = strlen(str);
    2850:	4b08      	ldr	r3, [pc, #32]	; (2874 <writeString+0x28>)
    2852:	4798      	blx	r3
	for(int i = 0; i < length; i++)
    2854:	2800      	cmp	r0, #0
    2856:	dd0b      	ble.n	2870 <writeString+0x24>
    2858:	0034      	movs	r4, r6
    285a:	1836      	adds	r6, r6, r0
		drawChar(str[i]);
    285c:	4f06      	ldr	r7, [pc, #24]	; (2878 <writeString+0x2c>)
		xCharPos++;
    285e:	4d07      	ldr	r5, [pc, #28]	; (287c <writeString+0x30>)
		drawChar(str[i]);
    2860:	7820      	ldrb	r0, [r4, #0]
    2862:	47b8      	blx	r7
		xCharPos++;
    2864:	782b      	ldrb	r3, [r5, #0]
    2866:	3301      	adds	r3, #1
    2868:	702b      	strb	r3, [r5, #0]
    286a:	3401      	adds	r4, #1
	for(int i = 0; i < length; i++)
    286c:	42b4      	cmp	r4, r6
    286e:	d1f7      	bne.n	2860 <writeString+0x14>
}
    2870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2872:	46c0      	nop			; (mov r8, r8)
    2874:	00003525 	.word	0x00003525
    2878:	00002751 	.word	0x00002751
    287c:	200000d0 	.word	0x200000d0

00002880 <fillRect>:
{
    2880:	b5f0      	push	{r4, r5, r6, r7, lr}
    2882:	46ce      	mov	lr, r9
    2884:	4647      	mov	r7, r8
    2886:	b580      	push	{r7, lr}
    2888:	b083      	sub	sp, #12
    288a:	4681      	mov	r9, r0
    288c:	4688      	mov	r8, r1
    288e:	0015      	movs	r5, r2
    2890:	001c      	movs	r4, r3
	if (x1>x2)
    2892:	4290      	cmp	r0, r2
    2894:	dd02      	ble.n	289c <fillRect+0x1c>
    2896:	0403      	lsls	r3, r0, #16
	SwapUint16(x1, x2);
    2898:	4691      	mov	r9, r2
    289a:	0c1d      	lsrs	r5, r3, #16
	if (y1>y2)
    289c:	45a0      	cmp	r8, r4
    289e:	dd03      	ble.n	28a8 <fillRect+0x28>
    28a0:	4643      	mov	r3, r8
    28a2:	041b      	lsls	r3, r3, #16
	SwapUint16(y1, y2);
    28a4:	46a0      	mov	r8, r4
    28a6:	0c1c      	lsrs	r4, r3, #16
	REG_PORT_OUTCLR1 = LCD_CS;
    28a8:	2780      	movs	r7, #128	; 0x80
    28aa:	03ff      	lsls	r7, r7, #15
    28ac:	4b12      	ldr	r3, [pc, #72]	; (28f8 <fillRect+0x78>)
    28ae:	601f      	str	r7, [r3, #0]
	setXY(x1, y1, x2, y2);
    28b0:	b2a3      	uxth	r3, r4
    28b2:	b2aa      	uxth	r2, r5
    28b4:	4641      	mov	r1, r8
    28b6:	4668      	mov	r0, sp
    28b8:	80c1      	strh	r1, [r0, #6]
    28ba:	88c1      	ldrh	r1, [r0, #6]
    28bc:	4648      	mov	r0, r9
    28be:	466e      	mov	r6, sp
    28c0:	80f0      	strh	r0, [r6, #6]
    28c2:	88f0      	ldrh	r0, [r6, #6]
    28c4:	4e0d      	ldr	r6, [pc, #52]	; (28fc <fillRect+0x7c>)
    28c6:	47b0      	blx	r6
	REG_PORT_OUTSET1 = LCD_DC;
    28c8:	4e0d      	ldr	r6, [pc, #52]	; (2900 <fillRect+0x80>)
    28ca:	2380      	movs	r3, #128	; 0x80
    28cc:	041b      	lsls	r3, r3, #16
    28ce:	6033      	str	r3, [r6, #0]
	(((long)(x2-x1)+1)*((long)(y2-y1)+1)));
    28d0:	464b      	mov	r3, r9
    28d2:	1aed      	subs	r5, r5, r3
    28d4:	3501      	adds	r5, #1
    28d6:	4643      	mov	r3, r8
    28d8:	1ae2      	subs	r2, r4, r3
    28da:	3201      	adds	r2, #1
	LCD_Fast_Fill(fore_Color_High, fore_Color_Low,
    28dc:	436a      	muls	r2, r5
    28de:	4b09      	ldr	r3, [pc, #36]	; (2904 <fillRect+0x84>)
    28e0:	8819      	ldrh	r1, [r3, #0]
    28e2:	4b09      	ldr	r3, [pc, #36]	; (2908 <fillRect+0x88>)
    28e4:	8818      	ldrh	r0, [r3, #0]
    28e6:	4b09      	ldr	r3, [pc, #36]	; (290c <fillRect+0x8c>)
    28e8:	4798      	blx	r3
	REG_PORT_OUTSET1 = LCD_CS;
    28ea:	6037      	str	r7, [r6, #0]
}
    28ec:	b003      	add	sp, #12
    28ee:	bc0c      	pop	{r2, r3}
    28f0:	4690      	mov	r8, r2
    28f2:	4699      	mov	r9, r3
    28f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    28f6:	46c0      	nop			; (mov r8, r8)
    28f8:	41004494 	.word	0x41004494
    28fc:	000026c9 	.word	0x000026c9
    2900:	41004498 	.word	0x41004498
    2904:	20000194 	.word	0x20000194
    2908:	20000172 	.word	0x20000172
    290c:	00002655 	.word	0x00002655

00002910 <clearScreen>:
{
    2910:	b510      	push	{r4, lr}
	fore_Color_High = ((r&248)|g>>5);
    2912:	2300      	movs	r3, #0
    2914:	4a06      	ldr	r2, [pc, #24]	; (2930 <clearScreen+0x20>)
    2916:	8013      	strh	r3, [r2, #0]
	fore_Color_Low = ((g&28)<<3|b>>3);
    2918:	4a06      	ldr	r2, [pc, #24]	; (2934 <clearScreen+0x24>)
    291a:	8013      	strh	r3, [r2, #0]
	fillRect(0,0,display_Y_size,display_X_size);
    291c:	4b06      	ldr	r3, [pc, #24]	; (2938 <clearScreen+0x28>)
    291e:	881b      	ldrh	r3, [r3, #0]
    2920:	4a06      	ldr	r2, [pc, #24]	; (293c <clearScreen+0x2c>)
    2922:	8812      	ldrh	r2, [r2, #0]
    2924:	2100      	movs	r1, #0
    2926:	2000      	movs	r0, #0
    2928:	4c05      	ldr	r4, [pc, #20]	; (2940 <clearScreen+0x30>)
    292a:	47a0      	blx	r4
}
    292c:	bd10      	pop	{r4, pc}
    292e:	46c0      	nop			; (mov r8, r8)
    2930:	20000172 	.word	0x20000172
    2934:	20000194 	.word	0x20000194
    2938:	2000000a 	.word	0x2000000a
    293c:	2000000c 	.word	0x2000000c
    2940:	00002881 	.word	0x00002881

00002944 <drawKare>:
{
    2944:	b5f0      	push	{r4, r5, r6, r7, lr}
    2946:	b0c1      	sub	sp, #260	; 0x104
    2948:	0007      	movs	r7, r0
	uint16_t body[104] = {10,10,20,20,20,0,380,10,380,10,390,20,0,
    294a:	22d0      	movs	r2, #208	; 0xd0
    294c:	492d      	ldr	r1, [pc, #180]	; (2a04 <drawKare+0xc0>)
    294e:	a80c      	add	r0, sp, #48	; 0x30
    2950:	4b2d      	ldr	r3, [pc, #180]	; (2a08 <drawKare+0xc4>)
    2952:	4798      	blx	r3
	uint8_t happyTerm[28] = {180,80,190,130,170,130,190,140,140,
    2954:	a805      	add	r0, sp, #20
    2956:	4b2d      	ldr	r3, [pc, #180]	; (2a0c <drawKare+0xc8>)
    2958:	001a      	movs	r2, r3
    295a:	3250      	adds	r2, #80	; 0x50
    295c:	0001      	movs	r1, r0
    295e:	ca31      	ldmia	r2!, {r0, r4, r5}
    2960:	c131      	stmia	r1!, {r0, r4, r5}
    2962:	ca31      	ldmia	r2!, {r0, r4, r5}
    2964:	c131      	stmia	r1!, {r0, r4, r5}
    2966:	6812      	ldr	r2, [r2, #0]
    2968:	600a      	str	r2, [r1, #0]
	uint8_t rPiBeret[20] = {120,60,240,80,110,70,120,90,150,
    296a:	336c      	adds	r3, #108	; 0x6c
    296c:	466a      	mov	r2, sp
    296e:	cb13      	ldmia	r3!, {r0, r1, r4}
    2970:	c213      	stmia	r2!, {r0, r1, r4}
    2972:	cb03      	ldmia	r3!, {r0, r1}
    2974:	c203      	stmia	r2!, {r0, r1}
    2976:	ac0c      	add	r4, sp, #48	; 0x30
    2978:	ae40      	add	r6, sp, #256	; 0x100
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
    297a:	4d25      	ldr	r5, [pc, #148]	; (2a10 <drawKare+0xcc>)
		((body[i+3]/iSv)+(offsetGraphicY)));
    297c:	88e3      	ldrh	r3, [r4, #6]
    297e:	105b      	asrs	r3, r3, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
    2980:	3396      	adds	r3, #150	; 0x96
		((body[i+2]/iSv)+(offsetGraphicX)),
    2982:	88a2      	ldrh	r2, [r4, #4]
    2984:	1052      	asrs	r2, r2, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
    2986:	322d      	adds	r2, #45	; 0x2d
    2988:	32ff      	adds	r2, #255	; 0xff
		((body[i+1]/iSv)+(offsetGraphicY)),
    298a:	8861      	ldrh	r1, [r4, #2]
    298c:	1049      	asrs	r1, r1, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
    298e:	3196      	adds	r1, #150	; 0x96
    2990:	8820      	ldrh	r0, [r4, #0]
    2992:	1040      	asrs	r0, r0, #1
    2994:	302d      	adds	r0, #45	; 0x2d
    2996:	30ff      	adds	r0, #255	; 0xff
    2998:	47a8      	blx	r5
    299a:	3408      	adds	r4, #8
	for(int i = 0; i < 104; i = i+4)
    299c:	42b4      	cmp	r4, r6
    299e:	d1ed      	bne.n	297c <drawKare+0x38>
	switch(emotion)
    29a0:	2f00      	cmp	r7, #0
    29a2:	d003      	beq.n	29ac <drawKare+0x68>
    29a4:	2f01      	cmp	r7, #1
    29a6:	d017      	beq.n	29d8 <drawKare+0x94>
}
    29a8:	b041      	add	sp, #260	; 0x104
    29aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    29ac:	ac05      	add	r4, sp, #20
    29ae:	ae0c      	add	r6, sp, #48	; 0x30
					fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
    29b0:	4d17      	ldr	r5, [pc, #92]	; (2a10 <drawKare+0xcc>)
					((happyTerm[i+3]/iSv)+(offsetGraphicY)));
    29b2:	78e3      	ldrb	r3, [r4, #3]
    29b4:	105b      	asrs	r3, r3, #1
					fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
    29b6:	3396      	adds	r3, #150	; 0x96
					((happyTerm[i+2]/iSv)+(offsetGraphicX)),
    29b8:	78a2      	ldrb	r2, [r4, #2]
    29ba:	1052      	asrs	r2, r2, #1
					fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
    29bc:	322d      	adds	r2, #45	; 0x2d
    29be:	32ff      	adds	r2, #255	; 0xff
					((happyTerm[i+1]/iSv)+(offsetGraphicY)),
    29c0:	7861      	ldrb	r1, [r4, #1]
    29c2:	1049      	asrs	r1, r1, #1
					fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
    29c4:	3196      	adds	r1, #150	; 0x96
    29c6:	7820      	ldrb	r0, [r4, #0]
    29c8:	1040      	asrs	r0, r0, #1
    29ca:	302d      	adds	r0, #45	; 0x2d
    29cc:	30ff      	adds	r0, #255	; 0xff
    29ce:	47a8      	blx	r5
    29d0:	3404      	adds	r4, #4
				for(int i = 0; i < 28; i = i+4)
    29d2:	42a6      	cmp	r6, r4
    29d4:	d1ed      	bne.n	29b2 <drawKare+0x6e>
    29d6:	e7e7      	b.n	29a8 <drawKare+0x64>
    29d8:	466c      	mov	r4, sp
    29da:	ae05      	add	r6, sp, #20
					fillRect((
    29dc:	4d0c      	ldr	r5, [pc, #48]	; (2a10 <drawKare+0xcc>)
					((rPiBeret[i+3]/iSv)+(offsetGraphicY)));
    29de:	78e3      	ldrb	r3, [r4, #3]
    29e0:	105b      	asrs	r3, r3, #1
					fillRect((
    29e2:	3396      	adds	r3, #150	; 0x96
					((rPiBeret[i+2]/iSv)+(offsetGraphicX)),
    29e4:	78a2      	ldrb	r2, [r4, #2]
    29e6:	1052      	asrs	r2, r2, #1
					fillRect((
    29e8:	322d      	adds	r2, #45	; 0x2d
    29ea:	32ff      	adds	r2, #255	; 0xff
					((rPiBeret[i+1]/iSv)+(offsetGraphicY)),
    29ec:	7861      	ldrb	r1, [r4, #1]
    29ee:	1049      	asrs	r1, r1, #1
					fillRect((
    29f0:	3196      	adds	r1, #150	; 0x96
					(rPiBeret[i]/iSv)+(offsetGraphicX)),
    29f2:	7820      	ldrb	r0, [r4, #0]
    29f4:	1040      	asrs	r0, r0, #1
					fillRect((
    29f6:	302d      	adds	r0, #45	; 0x2d
    29f8:	30ff      	adds	r0, #255	; 0xff
    29fa:	47a8      	blx	r5
    29fc:	3404      	adds	r4, #4
				for(int i = 0; i < 20; i = i+4)
    29fe:	42b4      	cmp	r4, r6
    2a00:	d1ed      	bne.n	29de <drawKare+0x9a>
    2a02:	e7d1      	b.n	29a8 <drawKare+0x64>
    2a04:	00005c74 	.word	0x00005c74
    2a08:	00003119 	.word	0x00003119
    2a0c:	00005cf4 	.word	0x00005cf4
    2a10:	00002881 	.word	0x00002881

00002a14 <splashScreen>:
{	
    2a14:	b530      	push	{r4, r5, lr}
    2a16:	b0a1      	sub	sp, #132	; 0x84
		splashText[0] = "Unix epoch minus 0xFF days";
    2a18:	ac01      	add	r4, sp, #4
    2a1a:	4b37      	ldr	r3, [pc, #220]	; (2af8 <splashScreen+0xe4>)
    2a1c:	9301      	str	r3, [sp, #4]
		splashText[1] = "3987^12 + 4365^12 = 4472^12";
    2a1e:	4b37      	ldr	r3, [pc, #220]	; (2afc <splashScreen+0xe8>)
    2a20:	6063      	str	r3, [r4, #4]
		splashText[2] = "Reticulating Splines";
    2a22:	4b37      	ldr	r3, [pc, #220]	; (2b00 <splashScreen+0xec>)
    2a24:	60a3      	str	r3, [r4, #8]
		splashText[3] = "Violence works";
    2a26:	4b37      	ldr	r3, [pc, #220]	; (2b04 <splashScreen+0xf0>)
    2a28:	60e3      	str	r3, [r4, #12]
		splashText[4] = "Tabs!";
    2a2a:	4b37      	ldr	r3, [pc, #220]	; (2b08 <splashScreen+0xf4>)
    2a2c:	6123      	str	r3, [r4, #16]
		splashText[5] = "Kill Billionaires (and Trillionaire)";
    2a2e:	4b37      	ldr	r3, [pc, #220]	; (2b0c <splashScreen+0xf8>)
    2a30:	6163      	str	r3, [r4, #20]
		splashText[6] = "Interest in technology is not a personality";
    2a32:	4b37      	ldr	r3, [pc, #220]	; (2b10 <splashScreen+0xfc>)
    2a34:	61a3      	str	r3, [r4, #24]
		splashText[7] = "10 PRINT CHR$(205.5+RND(1)); : GOTO 10";
    2a36:	4b37      	ldr	r3, [pc, #220]	; (2b14 <splashScreen+0x100>)
    2a38:	61e3      	str	r3, [r4, #28]
		splashText[8] = "No gods. No masters. No external libraries.";
    2a3a:	4b37      	ldr	r3, [pc, #220]	; (2b18 <splashScreen+0x104>)
    2a3c:	6223      	str	r3, [r4, #32]
		splashText[9] = "Spaces!";
    2a3e:	4b37      	ldr	r3, [pc, #220]	; (2b1c <splashScreen+0x108>)
    2a40:	6263      	str	r3, [r4, #36]	; 0x24
		splashText[10] = "Tiananmen Square 1989";
    2a42:	4b37      	ldr	r3, [pc, #220]	; (2b20 <splashScreen+0x10c>)
    2a44:	62a3      	str	r3, [r4, #40]	; 0x28
		splashText[11] = "America was founded on slavery";
    2a46:	4b37      	ldr	r3, [pc, #220]	; (2b24 <splashScreen+0x110>)
    2a48:	62e3      	str	r3, [r4, #44]	; 0x2c
		splashText[12] = "There is only capital and labor";
    2a4a:	4b37      	ldr	r3, [pc, #220]	; (2b28 <splashScreen+0x114>)
    2a4c:	6323      	str	r3, [r4, #48]	; 0x30
		splashText[13] = "Encourage symmetric class warfare";
    2a4e:	4b37      	ldr	r3, [pc, #220]	; (2b2c <splashScreen+0x118>)
    2a50:	6363      	str	r3, [r4, #52]	; 0x34
		splashText[14] = "$CURRENT_MEME";
    2a52:	4b37      	ldr	r3, [pc, #220]	; (2b30 <splashScreen+0x11c>)
    2a54:	63a3      	str	r3, [r4, #56]	; 0x38
		splashText[15] = "A Nice TTY";
    2a56:	4b37      	ldr	r3, [pc, #220]	; (2b34 <splashScreen+0x120>)
    2a58:	63e3      	str	r3, [r4, #60]	; 0x3c
		splashText[16] = "Trans rights are human rights";
    2a5a:	4b37      	ldr	r3, [pc, #220]	; (2b38 <splashScreen+0x124>)
    2a5c:	6423      	str	r3, [r4, #64]	; 0x40
		splashText[17] = "John Carpenter's Escape From San Francisco";
    2a5e:	4b37      	ldr	r3, [pc, #220]	; (2b3c <splashScreen+0x128>)
    2a60:	6463      	str	r3, [r4, #68]	; 0x44
		splashText[18] = "Thinking: What you do when you can't just put it into an AWS bucket.";
    2a62:	4b37      	ldr	r3, [pc, #220]	; (2b40 <splashScreen+0x12c>)
    2a64:	64a3      	str	r3, [r4, #72]	; 0x48
		splashText[19] = "Defcon's canceled.";
    2a66:	4b37      	ldr	r3, [pc, #220]	; (2b44 <splashScreen+0x130>)
    2a68:	64e3      	str	r3, [r4, #76]	; 0x4c
		splashText[20] = "Ratsnest: Nothing To Do!";
    2a6a:	4b37      	ldr	r3, [pc, #220]	; (2b48 <splashScreen+0x134>)
    2a6c:	6523      	str	r3, [r4, #80]	; 0x50
		splashText[21] = "It has 69 keys.";
    2a6e:	4b37      	ldr	r3, [pc, #220]	; (2b4c <splashScreen+0x138>)
    2a70:	6563      	str	r3, [r4, #84]	; 0x54
		splashText[22] = "Because VT-420 was already taken";
    2a72:	4b37      	ldr	r3, [pc, #220]	; (2b50 <splashScreen+0x13c>)
    2a74:	65a3      	str	r3, [r4, #88]	; 0x58
		splashText[23] = "Kids that knocked down stacks of blocks grew up to be security researchers.";
    2a76:	4b37      	ldr	r3, [pc, #220]	; (2b54 <splashScreen+0x140>)
    2a78:	65e3      	str	r3, [r4, #92]	; 0x5c
		splashText[24] = "Time travel in Star Trek is common yet always accidental";
    2a7a:	4b37      	ldr	r3, [pc, #220]	; (2b58 <splashScreen+0x144>)
    2a7c:	6623      	str	r3, [r4, #96]	; 0x60
		splashText[25] = "Offensive hardware";
    2a7e:	4b37      	ldr	r3, [pc, #220]	; (2b5c <splashScreen+0x148>)
    2a80:	6663      	str	r3, [r4, #100]	; 0x64
		splashText[26] = "Follow World Pog Federation    @WorldPog";
    2a82:	4b37      	ldr	r3, [pc, #220]	; (2b60 <splashScreen+0x14c>)
    2a84:	66a3      	str	r3, [r4, #104]	; 0x68
		splashText[27] = "Dummy thicc client";
    2a86:	4b37      	ldr	r3, [pc, #220]	; (2b64 <splashScreen+0x150>)
    2a88:	66e3      	str	r3, [r4, #108]	; 0x6c
		splashText[28] = "A Nice TTY. An OK Computer.";
    2a8a:	4b37      	ldr	r3, [pc, #220]	; (2b68 <splashScreen+0x154>)
    2a8c:	6723      	str	r3, [r4, #112]	; 0x70
		splashText[29] = "I cAn OpEn A LoCk WiTh A sOdA cAn";
    2a8e:	4b37      	ldr	r3, [pc, #220]	; (2b6c <splashScreen+0x158>)
    2a90:	6763      	str	r3, [r4, #116]	; 0x74
		splashText[30] = "Solidarity is not a new framework";
    2a92:	4b37      	ldr	r3, [pc, #220]	; (2b70 <splashScreen+0x15c>)
    2a94:	67a3      	str	r3, [r4, #120]	; 0x78
	const char *textPhrase = splashText[((rand()%128)/4)];
    2a96:	4b37      	ldr	r3, [pc, #220]	; (2b74 <splashScreen+0x160>)
    2a98:	4798      	blx	r3
    2a9a:	17c2      	asrs	r2, r0, #31
    2a9c:	0e52      	lsrs	r2, r2, #25
    2a9e:	1883      	adds	r3, r0, r2
    2aa0:	207f      	movs	r0, #127	; 0x7f
    2aa2:	4018      	ands	r0, r3
    2aa4:	1a80      	subs	r0, r0, r2
    2aa6:	17c2      	asrs	r2, r0, #31
    2aa8:	2303      	movs	r3, #3
    2aaa:	4013      	ands	r3, r2
    2aac:	181b      	adds	r3, r3, r0
    2aae:	109b      	asrs	r3, r3, #2
    2ab0:	009b      	lsls	r3, r3, #2
    2ab2:	591c      	ldr	r4, [r3, r4]
	clearScreen();
    2ab4:	4d30      	ldr	r5, [pc, #192]	; (2b78 <splashScreen+0x164>)
    2ab6:	47a8      	blx	r5
	fore_Color_High = ((r&248)|g>>5);
    2ab8:	23ff      	movs	r3, #255	; 0xff
    2aba:	4a30      	ldr	r2, [pc, #192]	; (2b7c <splashScreen+0x168>)
    2abc:	8013      	strh	r3, [r2, #0]
	fore_Color_Low = ((g&28)<<3|b>>3);
    2abe:	4a30      	ldr	r2, [pc, #192]	; (2b80 <splashScreen+0x16c>)
    2ac0:	8013      	strh	r3, [r2, #0]
	drawKare(0);	
    2ac2:	2000      	movs	r0, #0
    2ac4:	4b2f      	ldr	r3, [pc, #188]	; (2b84 <splashScreen+0x170>)
    2ac6:	4798      	blx	r3
	setDrawDirection();
    2ac8:	4b2f      	ldr	r3, [pc, #188]	; (2b88 <splashScreen+0x174>)
    2aca:	4798      	blx	r3
	xCharPos = 40 - (strlen(textPhrase)/2);
    2acc:	0020      	movs	r0, r4
    2ace:	4b2f      	ldr	r3, [pc, #188]	; (2b8c <splashScreen+0x178>)
    2ad0:	4798      	blx	r3
    2ad2:	0840      	lsrs	r0, r0, #1
    2ad4:	2328      	movs	r3, #40	; 0x28
    2ad6:	1a18      	subs	r0, r3, r0
    2ad8:	4b2d      	ldr	r3, [pc, #180]	; (2b90 <splashScreen+0x17c>)
    2ada:	7018      	strb	r0, [r3, #0]
	yCharPos = 16;
    2adc:	2210      	movs	r2, #16
    2ade:	4b2d      	ldr	r3, [pc, #180]	; (2b94 <splashScreen+0x180>)
    2ae0:	701a      	strb	r2, [r3, #0]
	writeString(textPhrase);
    2ae2:	0020      	movs	r0, r4
    2ae4:	4b2c      	ldr	r3, [pc, #176]	; (2b98 <splashScreen+0x184>)
    2ae6:	4798      	blx	r3
	delay_ms(2000);
    2ae8:	20fa      	movs	r0, #250	; 0xfa
    2aea:	00c0      	lsls	r0, r0, #3
    2aec:	4b2b      	ldr	r3, [pc, #172]	; (2b9c <splashScreen+0x188>)
    2aee:	4798      	blx	r3
	clearScreen();
    2af0:	47a8      	blx	r5
}
    2af2:	b021      	add	sp, #132	; 0x84
    2af4:	bd30      	pop	{r4, r5, pc}
    2af6:	46c0      	nop			; (mov r8, r8)
    2af8:	00005eb0 	.word	0x00005eb0
    2afc:	00005ecc 	.word	0x00005ecc
    2b00:	00005ee8 	.word	0x00005ee8
    2b04:	00005f00 	.word	0x00005f00
    2b08:	00005f10 	.word	0x00005f10
    2b0c:	00005f18 	.word	0x00005f18
    2b10:	00005f40 	.word	0x00005f40
    2b14:	00005f6c 	.word	0x00005f6c
    2b18:	00005f94 	.word	0x00005f94
    2b1c:	00005fc0 	.word	0x00005fc0
    2b20:	00005fc8 	.word	0x00005fc8
    2b24:	00005fe0 	.word	0x00005fe0
    2b28:	00006000 	.word	0x00006000
    2b2c:	00006020 	.word	0x00006020
    2b30:	00006044 	.word	0x00006044
    2b34:	00006054 	.word	0x00006054
    2b38:	00006060 	.word	0x00006060
    2b3c:	00006080 	.word	0x00006080
    2b40:	000060ac 	.word	0x000060ac
    2b44:	000060f4 	.word	0x000060f4
    2b48:	00006108 	.word	0x00006108
    2b4c:	00006124 	.word	0x00006124
    2b50:	00006134 	.word	0x00006134
    2b54:	00006158 	.word	0x00006158
    2b58:	000061a4 	.word	0x000061a4
    2b5c:	000061e0 	.word	0x000061e0
    2b60:	000061f4 	.word	0x000061f4
    2b64:	00006220 	.word	0x00006220
    2b68:	00006234 	.word	0x00006234
    2b6c:	00006250 	.word	0x00006250
    2b70:	00006274 	.word	0x00006274
    2b74:	0000331d 	.word	0x0000331d
    2b78:	00002911 	.word	0x00002911
    2b7c:	20000172 	.word	0x20000172
    2b80:	20000194 	.word	0x20000194
    2b84:	00002945 	.word	0x00002945
    2b88:	0000260d 	.word	0x0000260d
    2b8c:	00003525 	.word	0x00003525
    2b90:	200000d0 	.word	0x200000d0
    2b94:	200000d1 	.word	0x200000d1
    2b98:	0000284d 	.word	0x0000284d
    2b9c:	00000155 	.word	0x00000155

00002ba0 <clrXY>:
{
    2ba0:	b510      	push	{r4, lr}
	setXY(0,0,display_X_size,display_Y_size);
    2ba2:	4b04      	ldr	r3, [pc, #16]	; (2bb4 <clrXY+0x14>)
    2ba4:	881b      	ldrh	r3, [r3, #0]
    2ba6:	4a04      	ldr	r2, [pc, #16]	; (2bb8 <clrXY+0x18>)
    2ba8:	8812      	ldrh	r2, [r2, #0]
    2baa:	2100      	movs	r1, #0
    2bac:	2000      	movs	r0, #0
    2bae:	4c03      	ldr	r4, [pc, #12]	; (2bbc <clrXY+0x1c>)
    2bb0:	47a0      	blx	r4
}
    2bb2:	bd10      	pop	{r4, pc}
    2bb4:	2000000c 	.word	0x2000000c
    2bb8:	2000000a 	.word	0x2000000a
    2bbc:	000026c9 	.word	0x000026c9

00002bc0 <clrScr>:
{
    2bc0:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = LCD_CS;
    2bc2:	2280      	movs	r2, #128	; 0x80
    2bc4:	03d2      	lsls	r2, r2, #15
    2bc6:	4b02      	ldr	r3, [pc, #8]	; (2bd0 <clrScr+0x10>)
    2bc8:	601a      	str	r2, [r3, #0]
	clrXY();
    2bca:	4b02      	ldr	r3, [pc, #8]	; (2bd4 <clrScr+0x14>)
    2bcc:	4798      	blx	r3
}
    2bce:	bd10      	pop	{r4, pc}
    2bd0:	41004494 	.word	0x41004494
    2bd4:	00002ba1 	.word	0x00002ba1

00002bd8 <InitLCD>:
 {
    2bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2bda:	46c6      	mov	lr, r8
    2bdc:	b500      	push	{lr}
    2bde:	b082      	sub	sp, #8
	REG_PORT_DIRSET1 = PORT_PB16;
    2be0:	2380      	movs	r3, #128	; 0x80
    2be2:	025b      	lsls	r3, r3, #9
    2be4:	4a75      	ldr	r2, [pc, #468]	; (2dbc <InitLCD+0x1e4>)
    2be6:	6013      	str	r3, [r2, #0]
	REG_PORT_OUTSET1 = PORT_PB16;
    2be8:	4c75      	ldr	r4, [pc, #468]	; (2dc0 <InitLCD+0x1e8>)
    2bea:	6023      	str	r3, [r4, #0]
	REG_PORT_OUTSET1 = LCD_Reset;
    2bec:	2580      	movs	r5, #128	; 0x80
    2bee:	05ed      	lsls	r5, r5, #23
    2bf0:	6025      	str	r5, [r4, #0]
	delay_ms(5);
    2bf2:	2005      	movs	r0, #5
    2bf4:	4f73      	ldr	r7, [pc, #460]	; (2dc4 <InitLCD+0x1ec>)
    2bf6:	47b8      	blx	r7
	REG_PORT_OUTCLR1 = LCD_Reset;
    2bf8:	4e73      	ldr	r6, [pc, #460]	; (2dc8 <InitLCD+0x1f0>)
    2bfa:	6035      	str	r5, [r6, #0]
	delay_ms(5);
    2bfc:	2005      	movs	r0, #5
    2bfe:	47b8      	blx	r7
	REG_PORT_OUTSET1 = LCD_Reset;
    2c00:	6025      	str	r5, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_CS;
    2c02:	2380      	movs	r3, #128	; 0x80
    2c04:	03db      	lsls	r3, r3, #15
    2c06:	6033      	str	r3, [r6, #0]
	for(int i = 0; i < 70; i++)
    2c08:	2400      	movs	r4, #0
		REG_PORT_OUTCLR1 = LCD_DC;
    2c0a:	46b0      	mov	r8, r6
    2c0c:	2580      	movs	r5, #128	; 0x80
    2c0e:	042d      	lsls	r5, r5, #16
    2c10:	002f      	movs	r7, r5
		LCD_Write_COM16(belial[i],mulciber[i]);
    2c12:	4e6e      	ldr	r6, [pc, #440]	; (2dcc <InitLCD+0x1f4>)
		REG_PORT_OUTCLR1 = LCD_DC;
    2c14:	4643      	mov	r3, r8
    2c16:	601f      	str	r7, [r3, #0]
		LCD_Write_COM16(belial[i],mulciber[i]);
    2c18:	5da1      	ldrb	r1, [r4, r6]
    2c1a:	4b6d      	ldr	r3, [pc, #436]	; (2dd0 <InitLCD+0x1f8>)
    2c1c:	5ce0      	ldrb	r0, [r4, r3]
    2c1e:	4b6d      	ldr	r3, [pc, #436]	; (2dd4 <InitLCD+0x1fc>)
    2c20:	4798      	blx	r3
		REG_PORT_OUTSET1 = LCD_DC;
    2c22:	4b67      	ldr	r3, [pc, #412]	; (2dc0 <InitLCD+0x1e8>)
    2c24:	601d      	str	r5, [r3, #0]
		LCD_Write_DATA8(lucifer[i]);
    2c26:	4b6c      	ldr	r3, [pc, #432]	; (2dd8 <InitLCD+0x200>)
    2c28:	5ce0      	ldrb	r0, [r4, r3]
    2c2a:	4b6c      	ldr	r3, [pc, #432]	; (2ddc <InitLCD+0x204>)
    2c2c:	4798      	blx	r3
	for(int i = 0; i < 70; i++)
    2c2e:	3401      	adds	r4, #1
    2c30:	2c46      	cmp	r4, #70	; 0x46
    2c32:	d1ef      	bne.n	2c14 <InitLCD+0x3c>
    2c34:	23d1      	movs	r3, #209	; 0xd1
    2c36:	9301      	str	r3, [sp, #4]
			LCD_Write_COM16(k,0x00);
    2c38:	4d66      	ldr	r5, [pc, #408]	; (2dd4 <InitLCD+0x1fc>)
			LCD_Write_DATA8(beelzebub[l]);
    2c3a:	4f68      	ldr	r7, [pc, #416]	; (2ddc <InitLCD+0x204>)
    2c3c:	4c68      	ldr	r4, [pc, #416]	; (2de0 <InitLCD+0x208>)
    2c3e:	0026      	movs	r6, r4
    2c40:	3634      	adds	r6, #52	; 0x34
			LCD_Write_COM16(k,0x00);
    2c42:	2100      	movs	r1, #0
    2c44:	9801      	ldr	r0, [sp, #4]
    2c46:	47a8      	blx	r5
			LCD_Write_DATA8(beelzebub[l]);
    2c48:	7820      	ldrb	r0, [r4, #0]
    2c4a:	47b8      	blx	r7
    2c4c:	3401      	adds	r4, #1
		for(int l = 0; l < 52; l++)
    2c4e:	42a6      	cmp	r6, r4
    2c50:	d1f7      	bne.n	2c42 <InitLCD+0x6a>
	for(char k = 0xD1; k < 0xD6; k++)
    2c52:	9b01      	ldr	r3, [sp, #4]
    2c54:	3301      	adds	r3, #1
    2c56:	b2db      	uxtb	r3, r3
    2c58:	9301      	str	r3, [sp, #4]
    2c5a:	2bd6      	cmp	r3, #214	; 0xd6
    2c5c:	d1ee      	bne.n	2c3c <InitLCD+0x64>
	LCD_Write_COM16(0xF0, 0x00);LCD_Write_DATA8(0x55);
    2c5e:	2100      	movs	r1, #0
    2c60:	20f0      	movs	r0, #240	; 0xf0
    2c62:	4c5c      	ldr	r4, [pc, #368]	; (2dd4 <InitLCD+0x1fc>)
    2c64:	47a0      	blx	r4
    2c66:	2055      	movs	r0, #85	; 0x55
    2c68:	4d5c      	ldr	r5, [pc, #368]	; (2ddc <InitLCD+0x204>)
    2c6a:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x01);LCD_Write_DATA8(0xAA);	
    2c6c:	2101      	movs	r1, #1
    2c6e:	20f0      	movs	r0, #240	; 0xf0
    2c70:	47a0      	blx	r4
    2c72:	20aa      	movs	r0, #170	; 0xaa
    2c74:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x02);LCD_Write_DATA8(0x52);	
    2c76:	2102      	movs	r1, #2
    2c78:	20f0      	movs	r0, #240	; 0xf0
    2c7a:	47a0      	blx	r4
    2c7c:	2052      	movs	r0, #82	; 0x52
    2c7e:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x03);LCD_Write_DATA8(0x08);	
    2c80:	2103      	movs	r1, #3
    2c82:	20f0      	movs	r0, #240	; 0xf0
    2c84:	47a0      	blx	r4
    2c86:	2008      	movs	r0, #8
    2c88:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x04);LCD_Write_DATA8(0x00);	
    2c8a:	2104      	movs	r1, #4
    2c8c:	20f0      	movs	r0, #240	; 0xf0
    2c8e:	47a0      	blx	r4
    2c90:	2000      	movs	r0, #0
    2c92:	47a8      	blx	r5
	LCD_Write_COM16(0xB1, 0x00);LCD_Write_DATA8(0xCC);
    2c94:	2100      	movs	r1, #0
    2c96:	20b1      	movs	r0, #177	; 0xb1
    2c98:	47a0      	blx	r4
    2c9a:	20cc      	movs	r0, #204	; 0xcc
    2c9c:	47a8      	blx	r5
	LCD_Write_COM16(0xB1, 0x01);LCD_Write_DATA8(0x00);	
    2c9e:	2101      	movs	r1, #1
    2ca0:	20b1      	movs	r0, #177	; 0xb1
    2ca2:	47a0      	blx	r4
    2ca4:	2000      	movs	r0, #0
    2ca6:	47a8      	blx	r5
	LCD_Write_COM16(0xB5, 0x00);LCD_Write_DATA8(0x50);	
    2ca8:	2100      	movs	r1, #0
    2caa:	20b5      	movs	r0, #181	; 0xb5
    2cac:	47a0      	blx	r4
    2cae:	2050      	movs	r0, #80	; 0x50
    2cb0:	47a8      	blx	r5
	LCD_Write_COM16(0xB6, 0x00);LCD_Write_DATA8(0x05);
    2cb2:	2100      	movs	r1, #0
    2cb4:	20b6      	movs	r0, #182	; 0xb6
    2cb6:	47a0      	blx	r4
    2cb8:	2005      	movs	r0, #5
    2cba:	47a8      	blx	r5
	LCD_Write_COM16(0xB7, 0x00);LCD_Write_DATA8(0x70);
    2cbc:	2100      	movs	r1, #0
    2cbe:	20b7      	movs	r0, #183	; 0xb7
    2cc0:	47a0      	blx	r4
    2cc2:	2070      	movs	r0, #112	; 0x70
    2cc4:	47a8      	blx	r5
	LCD_Write_COM16(0xB7, 0x01);LCD_Write_DATA8(0x70);
    2cc6:	2101      	movs	r1, #1
    2cc8:	20b7      	movs	r0, #183	; 0xb7
    2cca:	47a0      	blx	r4
    2ccc:	2070      	movs	r0, #112	; 0x70
    2cce:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x00);LCD_Write_DATA8(0x01);
    2cd0:	2100      	movs	r1, #0
    2cd2:	20b8      	movs	r0, #184	; 0xb8
    2cd4:	47a0      	blx	r4
    2cd6:	2001      	movs	r0, #1
    2cd8:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x01);LCD_Write_DATA8(0x03);
    2cda:	2101      	movs	r1, #1
    2cdc:	20b8      	movs	r0, #184	; 0xb8
    2cde:	47a0      	blx	r4
    2ce0:	2003      	movs	r0, #3
    2ce2:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x02);LCD_Write_DATA8(0x03);
    2ce4:	2102      	movs	r1, #2
    2ce6:	20b8      	movs	r0, #184	; 0xb8
    2ce8:	47a0      	blx	r4
    2cea:	2003      	movs	r0, #3
    2cec:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x03);LCD_Write_DATA8(0x03);	
    2cee:	2103      	movs	r1, #3
    2cf0:	20b8      	movs	r0, #184	; 0xb8
    2cf2:	47a0      	blx	r4
    2cf4:	2003      	movs	r0, #3
    2cf6:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x00);LCD_Write_DATA8(0x02);
    2cf8:	2100      	movs	r1, #0
    2cfa:	20bc      	movs	r0, #188	; 0xbc
    2cfc:	47a0      	blx	r4
    2cfe:	2002      	movs	r0, #2
    2d00:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x01);LCD_Write_DATA8(0x00);
    2d02:	2101      	movs	r1, #1
    2d04:	20bc      	movs	r0, #188	; 0xbc
    2d06:	47a0      	blx	r4
    2d08:	2000      	movs	r0, #0
    2d0a:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x02);LCD_Write_DATA8(0x00);
    2d0c:	2102      	movs	r1, #2
    2d0e:	20bc      	movs	r0, #188	; 0xbc
    2d10:	47a0      	blx	r4
    2d12:	2000      	movs	r0, #0
    2d14:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x00);LCD_Write_DATA8(0xD0);
    2d16:	2100      	movs	r1, #0
    2d18:	20c9      	movs	r0, #201	; 0xc9
    2d1a:	47a0      	blx	r4
    2d1c:	20d0      	movs	r0, #208	; 0xd0
    2d1e:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x01);LCD_Write_DATA8(0x02);
    2d20:	2101      	movs	r1, #1
    2d22:	20c9      	movs	r0, #201	; 0xc9
    2d24:	47a0      	blx	r4
    2d26:	2002      	movs	r0, #2
    2d28:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x02);LCD_Write_DATA8(0x50);
    2d2a:	2102      	movs	r1, #2
    2d2c:	20c9      	movs	r0, #201	; 0xc9
    2d2e:	47a0      	blx	r4
    2d30:	2050      	movs	r0, #80	; 0x50
    2d32:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x03);LCD_Write_DATA8(0x50);
    2d34:	2103      	movs	r1, #3
    2d36:	20c9      	movs	r0, #201	; 0xc9
    2d38:	47a0      	blx	r4
    2d3a:	2050      	movs	r0, #80	; 0x50
    2d3c:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x04);LCD_Write_DATA8(0x50);
    2d3e:	2104      	movs	r1, #4
    2d40:	20c9      	movs	r0, #201	; 0xc9
    2d42:	47a0      	blx	r4
    2d44:	2050      	movs	r0, #80	; 0x50
    2d46:	47a8      	blx	r5
	LCD_Write_COM16(0x35, 0x00);LCD_Write_DATA8(0x00);
    2d48:	2100      	movs	r1, #0
    2d4a:	2035      	movs	r0, #53	; 0x35
    2d4c:	47a0      	blx	r4
    2d4e:	2000      	movs	r0, #0
    2d50:	47a8      	blx	r5
	LCD_Write_COM16(0x3A, 0x00);LCD_Write_DATA8(0x55);
    2d52:	2100      	movs	r1, #0
    2d54:	203a      	movs	r0, #58	; 0x3a
    2d56:	47a0      	blx	r4
    2d58:	2055      	movs	r0, #85	; 0x55
    2d5a:	47a8      	blx	r5
	LCD_Write_COM16(0x36, 0x00);LCD_Write_DATA8(0x00);
    2d5c:	2100      	movs	r1, #0
    2d5e:	2036      	movs	r0, #54	; 0x36
    2d60:	47a0      	blx	r4
    2d62:	2000      	movs	r0, #0
    2d64:	47a8      	blx	r5
  	LCD_Write_COM16(0x11,0x00);   //Start Up  
    2d66:	2100      	movs	r1, #0
    2d68:	2011      	movs	r0, #17
    2d6a:	47a0      	blx	r4
  	delay_ms(100);
    2d6c:	2064      	movs	r0, #100	; 0x64
    2d6e:	4e15      	ldr	r6, [pc, #84]	; (2dc4 <InitLCD+0x1ec>)
    2d70:	47b0      	blx	r6
  	LCD_Write_COM16(0x29,0x00);   //Display On  
    2d72:	2100      	movs	r1, #0
    2d74:	2029      	movs	r0, #41	; 0x29
    2d76:	47a0      	blx	r4
   	delay_ms(100);
    2d78:	2064      	movs	r0, #100	; 0x64
    2d7a:	47b0      	blx	r6
	LCD_Write_COM16(0x51,0x00);LCD_Write_DATA8(0xFF);
    2d7c:	2100      	movs	r1, #0
    2d7e:	2051      	movs	r0, #81	; 0x51
    2d80:	47a0      	blx	r4
    2d82:	20ff      	movs	r0, #255	; 0xff
    2d84:	47a8      	blx	r5
	REG_PORT_OUTSET1 = LCD_CS;
    2d86:	2280      	movs	r2, #128	; 0x80
    2d88:	03d2      	lsls	r2, r2, #15
    2d8a:	4b0d      	ldr	r3, [pc, #52]	; (2dc0 <InitLCD+0x1e8>)
    2d8c:	601a      	str	r2, [r3, #0]
	clrScr();
    2d8e:	4b15      	ldr	r3, [pc, #84]	; (2de4 <InitLCD+0x20c>)
    2d90:	4798      	blx	r3
	fore_Color_High = ((r&248)|g>>5);
    2d92:	2300      	movs	r3, #0
    2d94:	4a14      	ldr	r2, [pc, #80]	; (2de8 <InitLCD+0x210>)
    2d96:	8013      	strh	r3, [r2, #0]
	fore_Color_Low = ((g&28)<<3|b>>3);
    2d98:	4a14      	ldr	r2, [pc, #80]	; (2dec <InitLCD+0x214>)
    2d9a:	8013      	strh	r3, [r2, #0]
	back_Color_High = ((r&248)|g>>5);
    2d9c:	4a14      	ldr	r2, [pc, #80]	; (2df0 <InitLCD+0x218>)
    2d9e:	8013      	strh	r3, [r2, #0]
	back_Color_Low = ((g&28)<<3|b>>3);
    2da0:	4a14      	ldr	r2, [pc, #80]	; (2df4 <InitLCD+0x21c>)
    2da2:	8013      	strh	r3, [r2, #0]
	fillRect(0,0,799,489);
    2da4:	23ea      	movs	r3, #234	; 0xea
    2da6:	33ff      	adds	r3, #255	; 0xff
    2da8:	4a13      	ldr	r2, [pc, #76]	; (2df8 <InitLCD+0x220>)
    2daa:	2100      	movs	r1, #0
    2dac:	2000      	movs	r0, #0
    2dae:	4c13      	ldr	r4, [pc, #76]	; (2dfc <InitLCD+0x224>)
    2db0:	47a0      	blx	r4
}
    2db2:	b002      	add	sp, #8
    2db4:	bc04      	pop	{r2}
    2db6:	4690      	mov	r8, r2
    2db8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2dba:	46c0      	nop			; (mov r8, r8)
    2dbc:	41004488 	.word	0x41004488
    2dc0:	41004498 	.word	0x41004498
    2dc4:	00000155 	.word	0x00000155
    2dc8:	41004494 	.word	0x41004494
    2dcc:	00005e68 	.word	0x00005e68
    2dd0:	00005da8 	.word	0x00005da8
    2dd4:	000025c1 	.word	0x000025c1
    2dd8:	00005e10 	.word	0x00005e10
    2ddc:	000025f1 	.word	0x000025f1
    2de0:	00005d74 	.word	0x00005d74
    2de4:	00002bc1 	.word	0x00002bc1
    2de8:	20000172 	.word	0x20000172
    2dec:	20000194 	.word	0x20000194
    2df0:	20000196 	.word	0x20000196
    2df4:	20000170 	.word	0x20000170
    2df8:	0000031f 	.word	0x0000031f
    2dfc:	00002881 	.word	0x00002881

00002e00 <main>:
{
    2e00:	b570      	push	{r4, r5, r6, lr}
	REG_PORT_DIRSET1 = 0x0000ffff;		//LCD data bus, PB00 - PB15
    2e02:	4b3a      	ldr	r3, [pc, #232]	; (2eec <main+0xec>)
    2e04:	4e3a      	ldr	r6, [pc, #232]	; (2ef0 <main+0xf0>)
    2e06:	601e      	str	r6, [r3, #0]
	REG_PORT_DIRSET1 = LCD_Reset;
    2e08:	2580      	movs	r5, #128	; 0x80
    2e0a:	05ed      	lsls	r5, r5, #23
    2e0c:	601d      	str	r5, [r3, #0]
	REG_PORT_DIRSET1 = LCD_CS;
    2e0e:	2480      	movs	r4, #128	; 0x80
    2e10:	03e4      	lsls	r4, r4, #15
    2e12:	601c      	str	r4, [r3, #0]
	REG_PORT_DIRSET1 = LCD_WR;
    2e14:	2080      	movs	r0, #128	; 0x80
    2e16:	0280      	lsls	r0, r0, #10
    2e18:	6018      	str	r0, [r3, #0]
	REG_PORT_DIRSET1 = LCD_DC;
    2e1a:	2180      	movs	r1, #128	; 0x80
    2e1c:	0409      	lsls	r1, r1, #16
    2e1e:	6019      	str	r1, [r3, #0]
	REG_PORT_DIRSET1 = LCD_RD;
    2e20:	2280      	movs	r2, #128	; 0x80
    2e22:	0252      	lsls	r2, r2, #9
    2e24:	601a      	str	r2, [r3, #0]
	REG_PORT_OUTCLR1 = 0x0000ffff;
    2e26:	4b33      	ldr	r3, [pc, #204]	; (2ef4 <main+0xf4>)
    2e28:	601e      	str	r6, [r3, #0]
	REG_PORT_OUTCLR1 = LCD_Reset;
    2e2a:	601d      	str	r5, [r3, #0]
	REG_PORT_OUTCLR1 = LCD_CS;
    2e2c:	601c      	str	r4, [r3, #0]
	REG_PORT_OUTCLR1 = LCD_WR;
    2e2e:	6018      	str	r0, [r3, #0]
	REG_PORT_OUTCLR1 = LCD_DC;
    2e30:	6019      	str	r1, [r3, #0]
	REG_PORT_OUTCLR1 = LCD_RD;
    2e32:	601a      	str	r2, [r3, #0]
	configure_adc();
    2e34:	4b30      	ldr	r3, [pc, #192]	; (2ef8 <main+0xf8>)
    2e36:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    2e38:	4b30      	ldr	r3, [pc, #192]	; (2efc <main+0xfc>)
    2e3a:	681b      	ldr	r3, [r3, #0]
    2e3c:	7e5a      	ldrb	r2, [r3, #25]
	while (adc_is_syncing(module_inst)) {
    2e3e:	b252      	sxtb	r2, r2
    2e40:	2a00      	cmp	r2, #0
    2e42:	dbfb      	blt.n	2e3c <main+0x3c>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    2e44:	7b1a      	ldrb	r2, [r3, #12]
    2e46:	2102      	movs	r1, #2
    2e48:	430a      	orrs	r2, r1
    2e4a:	731a      	strb	r2, [r3, #12]
    2e4c:	7e5a      	ldrb	r2, [r3, #25]
	while (adc_is_syncing(module_inst)) {
    2e4e:	b252      	sxtb	r2, r2
    2e50:	2a00      	cmp	r2, #0
    2e52:	dbfb      	blt.n	2e4c <main+0x4c>
	if (int_flags & ADC_INTFLAG_RESRDY) {
    2e54:	2501      	movs	r5, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
    2e56:	2404      	movs	r4, #4
		status_flags |= ADC_STATUS_WINDOW;
    2e58:	2002      	movs	r0, #2
    2e5a:	e001      	b.n	2e60 <main+0x60>
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    2e5c:	4215      	tst	r5, r2
    2e5e:	d10a      	bne.n	2e76 <main+0x76>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    2e60:	7e19      	ldrb	r1, [r3, #24]
    2e62:	b2c9      	uxtb	r1, r1
	if (int_flags & ADC_INTFLAG_RESRDY) {
    2e64:	002a      	movs	r2, r5
    2e66:	400a      	ands	r2, r1
	if (int_flags & ADC_INTFLAG_WINMON) {
    2e68:	420c      	tst	r4, r1
    2e6a:	d000      	beq.n	2e6e <main+0x6e>
		status_flags |= ADC_STATUS_WINDOW;
    2e6c:	4302      	orrs	r2, r0
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    2e6e:	4208      	tst	r0, r1
    2e70:	d0f4      	beq.n	2e5c <main+0x5c>
		status_flags |= ADC_STATUS_OVERRUN;
    2e72:	4322      	orrs	r2, r4
    2e74:	e7f2      	b.n	2e5c <main+0x5c>
    2e76:	7e5a      	ldrb	r2, [r3, #25]
	while (adc_is_syncing(module_inst)) {
    2e78:	b252      	sxtb	r2, r2
    2e7a:	2a00      	cmp	r2, #0
    2e7c:	dbfb      	blt.n	2e76 <main+0x76>
	*result = adc_module->RESULT.reg;
    2e7e:	8b5c      	ldrh	r4, [r3, #26]
    2e80:	b2a4      	uxth	r4, r4
	adc_module->INTFLAG.reg = int_flags;
    2e82:	2201      	movs	r2, #1
    2e84:	761a      	strb	r2, [r3, #24]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    2e86:	7e19      	ldrb	r1, [r3, #24]
    2e88:	b2c9      	uxtb	r1, r1
	if (int_flags & ADC_INTFLAG_RESRDY) {
    2e8a:	400a      	ands	r2, r1
	if (int_flags & ADC_INTFLAG_WINMON) {
    2e8c:	0748      	lsls	r0, r1, #29
    2e8e:	d501      	bpl.n	2e94 <main+0x94>
		status_flags |= ADC_STATUS_WINDOW;
    2e90:	2002      	movs	r0, #2
    2e92:	4302      	orrs	r2, r0
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    2e94:	0789      	lsls	r1, r1, #30
    2e96:	d501      	bpl.n	2e9c <main+0x9c>
		status_flags |= ADC_STATUS_OVERRUN;
    2e98:	2104      	movs	r1, #4
    2e9a:	430a      	orrs	r2, r1
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    2e9c:	0752      	lsls	r2, r2, #29
    2e9e:	d501      	bpl.n	2ea4 <main+0xa4>
	adc_module->INTFLAG.reg = int_flags;
    2ea0:	2202      	movs	r2, #2
    2ea2:	761a      	strb	r2, [r3, #24]
	system_init();
    2ea4:	4b16      	ldr	r3, [pc, #88]	; (2f00 <main+0x100>)
    2ea6:	4798      	blx	r3
	delay_init();
    2ea8:	4b16      	ldr	r3, [pc, #88]	; (2f04 <main+0x104>)
    2eaa:	4798      	blx	r3
	srand(adcResult);
    2eac:	0020      	movs	r0, r4
    2eae:	4b16      	ldr	r3, [pc, #88]	; (2f08 <main+0x108>)
    2eb0:	4798      	blx	r3
	configure_usart_USB();
    2eb2:	4b16      	ldr	r3, [pc, #88]	; (2f0c <main+0x10c>)
    2eb4:	4798      	blx	r3
	configure_console();
    2eb6:	4b16      	ldr	r3, [pc, #88]	; (2f10 <main+0x110>)
    2eb8:	4798      	blx	r3
	printf("Hello World\n\r");
    2eba:	4816      	ldr	r0, [pc, #88]	; (2f14 <main+0x114>)
    2ebc:	4b16      	ldr	r3, [pc, #88]	; (2f18 <main+0x118>)
    2ebe:	4798      	blx	r3
	InitLCD();
    2ec0:	4b16      	ldr	r3, [pc, #88]	; (2f1c <main+0x11c>)
    2ec2:	4798      	blx	r3
	splashScreen();
    2ec4:	4b16      	ldr	r3, [pc, #88]	; (2f20 <main+0x120>)
    2ec6:	4798      	blx	r3
	fore_Color_High = ((r&248)|g>>5);
    2ec8:	2207      	movs	r2, #7
    2eca:	4b16      	ldr	r3, [pc, #88]	; (2f24 <main+0x124>)
    2ecc:	801a      	strh	r2, [r3, #0]
	fore_Color_Low = ((g&28)<<3|b>>3);
    2ece:	32d9      	adds	r2, #217	; 0xd9
    2ed0:	4b15      	ldr	r3, [pc, #84]	; (2f28 <main+0x128>)
    2ed2:	801a      	strh	r2, [r3, #0]
	xCharPos = 0;
    2ed4:	2300      	movs	r3, #0
    2ed6:	4a15      	ldr	r2, [pc, #84]	; (2f2c <main+0x12c>)
    2ed8:	7013      	strb	r3, [r2, #0]
	yCharPos = 0;
    2eda:	4a15      	ldr	r2, [pc, #84]	; (2f30 <main+0x130>)
    2edc:	7013      	strb	r3, [r2, #0]
		memcpy(scanCodes, getScanCode(), sizeof(getScanCode()));
    2ede:	4d15      	ldr	r5, [pc, #84]	; (2f34 <main+0x134>)
		*/delay_ms(1);
    2ee0:	4c15      	ldr	r4, [pc, #84]	; (2f38 <main+0x138>)
		memcpy(scanCodes, getScanCode(), sizeof(getScanCode()));
    2ee2:	47a8      	blx	r5
		*/delay_ms(1);
    2ee4:	2001      	movs	r0, #1
    2ee6:	47a0      	blx	r4
    2ee8:	e7fb      	b.n	2ee2 <main+0xe2>
    2eea:	46c0      	nop			; (mov r8, r8)
    2eec:	41004488 	.word	0x41004488
    2ef0:	0000ffff 	.word	0x0000ffff
    2ef4:	41004494 	.word	0x41004494
    2ef8:	00001c81 	.word	0x00001c81
    2efc:	20000174 	.word	0x20000174
    2f00:	00001895 	.word	0x00001895
    2f04:	00000115 	.word	0x00000115
    2f08:	000032c1 	.word	0x000032c1
    2f0c:	00001bc5 	.word	0x00001bc5
    2f10:	00001abd 	.word	0x00001abd
    2f14:	00005e58 	.word	0x00005e58
    2f18:	0000328d 	.word	0x0000328d
    2f1c:	00002bd9 	.word	0x00002bd9
    2f20:	00002a15 	.word	0x00002a15
    2f24:	20000172 	.word	0x20000172
    2f28:	20000194 	.word	0x20000194
    2f2c:	200000d0 	.word	0x200000d0
    2f30:	200000d1 	.word	0x200000d1
    2f34:	00001d29 	.word	0x00001d29
    2f38:	00000155 	.word	0x00000155

00002f3c <__udivsi3>:
    2f3c:	2200      	movs	r2, #0
    2f3e:	0843      	lsrs	r3, r0, #1
    2f40:	428b      	cmp	r3, r1
    2f42:	d374      	bcc.n	302e <__udivsi3+0xf2>
    2f44:	0903      	lsrs	r3, r0, #4
    2f46:	428b      	cmp	r3, r1
    2f48:	d35f      	bcc.n	300a <__udivsi3+0xce>
    2f4a:	0a03      	lsrs	r3, r0, #8
    2f4c:	428b      	cmp	r3, r1
    2f4e:	d344      	bcc.n	2fda <__udivsi3+0x9e>
    2f50:	0b03      	lsrs	r3, r0, #12
    2f52:	428b      	cmp	r3, r1
    2f54:	d328      	bcc.n	2fa8 <__udivsi3+0x6c>
    2f56:	0c03      	lsrs	r3, r0, #16
    2f58:	428b      	cmp	r3, r1
    2f5a:	d30d      	bcc.n	2f78 <__udivsi3+0x3c>
    2f5c:	22ff      	movs	r2, #255	; 0xff
    2f5e:	0209      	lsls	r1, r1, #8
    2f60:	ba12      	rev	r2, r2
    2f62:	0c03      	lsrs	r3, r0, #16
    2f64:	428b      	cmp	r3, r1
    2f66:	d302      	bcc.n	2f6e <__udivsi3+0x32>
    2f68:	1212      	asrs	r2, r2, #8
    2f6a:	0209      	lsls	r1, r1, #8
    2f6c:	d065      	beq.n	303a <__udivsi3+0xfe>
    2f6e:	0b03      	lsrs	r3, r0, #12
    2f70:	428b      	cmp	r3, r1
    2f72:	d319      	bcc.n	2fa8 <__udivsi3+0x6c>
    2f74:	e000      	b.n	2f78 <__udivsi3+0x3c>
    2f76:	0a09      	lsrs	r1, r1, #8
    2f78:	0bc3      	lsrs	r3, r0, #15
    2f7a:	428b      	cmp	r3, r1
    2f7c:	d301      	bcc.n	2f82 <__udivsi3+0x46>
    2f7e:	03cb      	lsls	r3, r1, #15
    2f80:	1ac0      	subs	r0, r0, r3
    2f82:	4152      	adcs	r2, r2
    2f84:	0b83      	lsrs	r3, r0, #14
    2f86:	428b      	cmp	r3, r1
    2f88:	d301      	bcc.n	2f8e <__udivsi3+0x52>
    2f8a:	038b      	lsls	r3, r1, #14
    2f8c:	1ac0      	subs	r0, r0, r3
    2f8e:	4152      	adcs	r2, r2
    2f90:	0b43      	lsrs	r3, r0, #13
    2f92:	428b      	cmp	r3, r1
    2f94:	d301      	bcc.n	2f9a <__udivsi3+0x5e>
    2f96:	034b      	lsls	r3, r1, #13
    2f98:	1ac0      	subs	r0, r0, r3
    2f9a:	4152      	adcs	r2, r2
    2f9c:	0b03      	lsrs	r3, r0, #12
    2f9e:	428b      	cmp	r3, r1
    2fa0:	d301      	bcc.n	2fa6 <__udivsi3+0x6a>
    2fa2:	030b      	lsls	r3, r1, #12
    2fa4:	1ac0      	subs	r0, r0, r3
    2fa6:	4152      	adcs	r2, r2
    2fa8:	0ac3      	lsrs	r3, r0, #11
    2faa:	428b      	cmp	r3, r1
    2fac:	d301      	bcc.n	2fb2 <__udivsi3+0x76>
    2fae:	02cb      	lsls	r3, r1, #11
    2fb0:	1ac0      	subs	r0, r0, r3
    2fb2:	4152      	adcs	r2, r2
    2fb4:	0a83      	lsrs	r3, r0, #10
    2fb6:	428b      	cmp	r3, r1
    2fb8:	d301      	bcc.n	2fbe <__udivsi3+0x82>
    2fba:	028b      	lsls	r3, r1, #10
    2fbc:	1ac0      	subs	r0, r0, r3
    2fbe:	4152      	adcs	r2, r2
    2fc0:	0a43      	lsrs	r3, r0, #9
    2fc2:	428b      	cmp	r3, r1
    2fc4:	d301      	bcc.n	2fca <__udivsi3+0x8e>
    2fc6:	024b      	lsls	r3, r1, #9
    2fc8:	1ac0      	subs	r0, r0, r3
    2fca:	4152      	adcs	r2, r2
    2fcc:	0a03      	lsrs	r3, r0, #8
    2fce:	428b      	cmp	r3, r1
    2fd0:	d301      	bcc.n	2fd6 <__udivsi3+0x9a>
    2fd2:	020b      	lsls	r3, r1, #8
    2fd4:	1ac0      	subs	r0, r0, r3
    2fd6:	4152      	adcs	r2, r2
    2fd8:	d2cd      	bcs.n	2f76 <__udivsi3+0x3a>
    2fda:	09c3      	lsrs	r3, r0, #7
    2fdc:	428b      	cmp	r3, r1
    2fde:	d301      	bcc.n	2fe4 <__udivsi3+0xa8>
    2fe0:	01cb      	lsls	r3, r1, #7
    2fe2:	1ac0      	subs	r0, r0, r3
    2fe4:	4152      	adcs	r2, r2
    2fe6:	0983      	lsrs	r3, r0, #6
    2fe8:	428b      	cmp	r3, r1
    2fea:	d301      	bcc.n	2ff0 <__udivsi3+0xb4>
    2fec:	018b      	lsls	r3, r1, #6
    2fee:	1ac0      	subs	r0, r0, r3
    2ff0:	4152      	adcs	r2, r2
    2ff2:	0943      	lsrs	r3, r0, #5
    2ff4:	428b      	cmp	r3, r1
    2ff6:	d301      	bcc.n	2ffc <__udivsi3+0xc0>
    2ff8:	014b      	lsls	r3, r1, #5
    2ffa:	1ac0      	subs	r0, r0, r3
    2ffc:	4152      	adcs	r2, r2
    2ffe:	0903      	lsrs	r3, r0, #4
    3000:	428b      	cmp	r3, r1
    3002:	d301      	bcc.n	3008 <__udivsi3+0xcc>
    3004:	010b      	lsls	r3, r1, #4
    3006:	1ac0      	subs	r0, r0, r3
    3008:	4152      	adcs	r2, r2
    300a:	08c3      	lsrs	r3, r0, #3
    300c:	428b      	cmp	r3, r1
    300e:	d301      	bcc.n	3014 <__udivsi3+0xd8>
    3010:	00cb      	lsls	r3, r1, #3
    3012:	1ac0      	subs	r0, r0, r3
    3014:	4152      	adcs	r2, r2
    3016:	0883      	lsrs	r3, r0, #2
    3018:	428b      	cmp	r3, r1
    301a:	d301      	bcc.n	3020 <__udivsi3+0xe4>
    301c:	008b      	lsls	r3, r1, #2
    301e:	1ac0      	subs	r0, r0, r3
    3020:	4152      	adcs	r2, r2
    3022:	0843      	lsrs	r3, r0, #1
    3024:	428b      	cmp	r3, r1
    3026:	d301      	bcc.n	302c <__udivsi3+0xf0>
    3028:	004b      	lsls	r3, r1, #1
    302a:	1ac0      	subs	r0, r0, r3
    302c:	4152      	adcs	r2, r2
    302e:	1a41      	subs	r1, r0, r1
    3030:	d200      	bcs.n	3034 <__udivsi3+0xf8>
    3032:	4601      	mov	r1, r0
    3034:	4152      	adcs	r2, r2
    3036:	4610      	mov	r0, r2
    3038:	4770      	bx	lr
    303a:	e7ff      	b.n	303c <__udivsi3+0x100>
    303c:	b501      	push	{r0, lr}
    303e:	2000      	movs	r0, #0
    3040:	f000 f806 	bl	3050 <__aeabi_idiv0>
    3044:	bd02      	pop	{r1, pc}
    3046:	46c0      	nop			; (mov r8, r8)

00003048 <__aeabi_uidivmod>:
    3048:	2900      	cmp	r1, #0
    304a:	d0f7      	beq.n	303c <__udivsi3+0x100>
    304c:	e776      	b.n	2f3c <__udivsi3>
    304e:	4770      	bx	lr

00003050 <__aeabi_idiv0>:
    3050:	4770      	bx	lr
    3052:	46c0      	nop			; (mov r8, r8)

00003054 <__aeabi_lmul>:
    3054:	b5f0      	push	{r4, r5, r6, r7, lr}
    3056:	46ce      	mov	lr, r9
    3058:	4647      	mov	r7, r8
    305a:	0415      	lsls	r5, r2, #16
    305c:	0c2d      	lsrs	r5, r5, #16
    305e:	002e      	movs	r6, r5
    3060:	b580      	push	{r7, lr}
    3062:	0407      	lsls	r7, r0, #16
    3064:	0c14      	lsrs	r4, r2, #16
    3066:	0c3f      	lsrs	r7, r7, #16
    3068:	4699      	mov	r9, r3
    306a:	0c03      	lsrs	r3, r0, #16
    306c:	437e      	muls	r6, r7
    306e:	435d      	muls	r5, r3
    3070:	4367      	muls	r7, r4
    3072:	4363      	muls	r3, r4
    3074:	197f      	adds	r7, r7, r5
    3076:	0c34      	lsrs	r4, r6, #16
    3078:	19e4      	adds	r4, r4, r7
    307a:	469c      	mov	ip, r3
    307c:	42a5      	cmp	r5, r4
    307e:	d903      	bls.n	3088 <__aeabi_lmul+0x34>
    3080:	2380      	movs	r3, #128	; 0x80
    3082:	025b      	lsls	r3, r3, #9
    3084:	4698      	mov	r8, r3
    3086:	44c4      	add	ip, r8
    3088:	464b      	mov	r3, r9
    308a:	4351      	muls	r1, r2
    308c:	4343      	muls	r3, r0
    308e:	0436      	lsls	r6, r6, #16
    3090:	0c36      	lsrs	r6, r6, #16
    3092:	0c25      	lsrs	r5, r4, #16
    3094:	0424      	lsls	r4, r4, #16
    3096:	4465      	add	r5, ip
    3098:	19a4      	adds	r4, r4, r6
    309a:	1859      	adds	r1, r3, r1
    309c:	1949      	adds	r1, r1, r5
    309e:	0020      	movs	r0, r4
    30a0:	bc0c      	pop	{r2, r3}
    30a2:	4690      	mov	r8, r2
    30a4:	4699      	mov	r9, r3
    30a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000030a8 <__libc_init_array>:
    30a8:	b570      	push	{r4, r5, r6, lr}
    30aa:	2600      	movs	r6, #0
    30ac:	4d0c      	ldr	r5, [pc, #48]	; (30e0 <__libc_init_array+0x38>)
    30ae:	4c0d      	ldr	r4, [pc, #52]	; (30e4 <__libc_init_array+0x3c>)
    30b0:	1b64      	subs	r4, r4, r5
    30b2:	10a4      	asrs	r4, r4, #2
    30b4:	42a6      	cmp	r6, r4
    30b6:	d109      	bne.n	30cc <__libc_init_array+0x24>
    30b8:	2600      	movs	r6, #0
    30ba:	f003 f939 	bl	6330 <_init>
    30be:	4d0a      	ldr	r5, [pc, #40]	; (30e8 <__libc_init_array+0x40>)
    30c0:	4c0a      	ldr	r4, [pc, #40]	; (30ec <__libc_init_array+0x44>)
    30c2:	1b64      	subs	r4, r4, r5
    30c4:	10a4      	asrs	r4, r4, #2
    30c6:	42a6      	cmp	r6, r4
    30c8:	d105      	bne.n	30d6 <__libc_init_array+0x2e>
    30ca:	bd70      	pop	{r4, r5, r6, pc}
    30cc:	00b3      	lsls	r3, r6, #2
    30ce:	58eb      	ldr	r3, [r5, r3]
    30d0:	4798      	blx	r3
    30d2:	3601      	adds	r6, #1
    30d4:	e7ee      	b.n	30b4 <__libc_init_array+0xc>
    30d6:	00b3      	lsls	r3, r6, #2
    30d8:	58eb      	ldr	r3, [r5, r3]
    30da:	4798      	blx	r3
    30dc:	3601      	adds	r6, #1
    30de:	e7f2      	b.n	30c6 <__libc_init_array+0x1e>
    30e0:	0000633c 	.word	0x0000633c
    30e4:	0000633c 	.word	0x0000633c
    30e8:	0000633c 	.word	0x0000633c
    30ec:	00006340 	.word	0x00006340

000030f0 <malloc>:
    30f0:	b510      	push	{r4, lr}
    30f2:	4b03      	ldr	r3, [pc, #12]	; (3100 <malloc+0x10>)
    30f4:	0001      	movs	r1, r0
    30f6:	6818      	ldr	r0, [r3, #0]
    30f8:	f000 f86a 	bl	31d0 <_malloc_r>
    30fc:	bd10      	pop	{r4, pc}
    30fe:	46c0      	nop			; (mov r8, r8)
    3100:	20000010 	.word	0x20000010

00003104 <free>:
    3104:	b510      	push	{r4, lr}
    3106:	4b03      	ldr	r3, [pc, #12]	; (3114 <free+0x10>)
    3108:	0001      	movs	r1, r0
    310a:	6818      	ldr	r0, [r3, #0]
    310c:	f000 f816 	bl	313c <_free_r>
    3110:	bd10      	pop	{r4, pc}
    3112:	46c0      	nop			; (mov r8, r8)
    3114:	20000010 	.word	0x20000010

00003118 <memcpy>:
    3118:	2300      	movs	r3, #0
    311a:	b510      	push	{r4, lr}
    311c:	429a      	cmp	r2, r3
    311e:	d100      	bne.n	3122 <memcpy+0xa>
    3120:	bd10      	pop	{r4, pc}
    3122:	5ccc      	ldrb	r4, [r1, r3]
    3124:	54c4      	strb	r4, [r0, r3]
    3126:	3301      	adds	r3, #1
    3128:	e7f8      	b.n	311c <memcpy+0x4>

0000312a <memset>:
    312a:	0003      	movs	r3, r0
    312c:	1882      	adds	r2, r0, r2
    312e:	4293      	cmp	r3, r2
    3130:	d100      	bne.n	3134 <memset+0xa>
    3132:	4770      	bx	lr
    3134:	7019      	strb	r1, [r3, #0]
    3136:	3301      	adds	r3, #1
    3138:	e7f9      	b.n	312e <memset+0x4>
	...

0000313c <_free_r>:
    313c:	b570      	push	{r4, r5, r6, lr}
    313e:	0005      	movs	r5, r0
    3140:	2900      	cmp	r1, #0
    3142:	d010      	beq.n	3166 <_free_r+0x2a>
    3144:	1f0c      	subs	r4, r1, #4
    3146:	6823      	ldr	r3, [r4, #0]
    3148:	2b00      	cmp	r3, #0
    314a:	da00      	bge.n	314e <_free_r+0x12>
    314c:	18e4      	adds	r4, r4, r3
    314e:	0028      	movs	r0, r5
    3150:	f000 fbea 	bl	3928 <__malloc_lock>
    3154:	4a1d      	ldr	r2, [pc, #116]	; (31cc <_free_r+0x90>)
    3156:	6813      	ldr	r3, [r2, #0]
    3158:	2b00      	cmp	r3, #0
    315a:	d105      	bne.n	3168 <_free_r+0x2c>
    315c:	6063      	str	r3, [r4, #4]
    315e:	6014      	str	r4, [r2, #0]
    3160:	0028      	movs	r0, r5
    3162:	f000 fbe2 	bl	392a <__malloc_unlock>
    3166:	bd70      	pop	{r4, r5, r6, pc}
    3168:	42a3      	cmp	r3, r4
    316a:	d909      	bls.n	3180 <_free_r+0x44>
    316c:	6821      	ldr	r1, [r4, #0]
    316e:	1860      	adds	r0, r4, r1
    3170:	4283      	cmp	r3, r0
    3172:	d1f3      	bne.n	315c <_free_r+0x20>
    3174:	6818      	ldr	r0, [r3, #0]
    3176:	685b      	ldr	r3, [r3, #4]
    3178:	1841      	adds	r1, r0, r1
    317a:	6021      	str	r1, [r4, #0]
    317c:	e7ee      	b.n	315c <_free_r+0x20>
    317e:	0013      	movs	r3, r2
    3180:	685a      	ldr	r2, [r3, #4]
    3182:	2a00      	cmp	r2, #0
    3184:	d001      	beq.n	318a <_free_r+0x4e>
    3186:	42a2      	cmp	r2, r4
    3188:	d9f9      	bls.n	317e <_free_r+0x42>
    318a:	6819      	ldr	r1, [r3, #0]
    318c:	1858      	adds	r0, r3, r1
    318e:	42a0      	cmp	r0, r4
    3190:	d10b      	bne.n	31aa <_free_r+0x6e>
    3192:	6820      	ldr	r0, [r4, #0]
    3194:	1809      	adds	r1, r1, r0
    3196:	1858      	adds	r0, r3, r1
    3198:	6019      	str	r1, [r3, #0]
    319a:	4282      	cmp	r2, r0
    319c:	d1e0      	bne.n	3160 <_free_r+0x24>
    319e:	6810      	ldr	r0, [r2, #0]
    31a0:	6852      	ldr	r2, [r2, #4]
    31a2:	1841      	adds	r1, r0, r1
    31a4:	6019      	str	r1, [r3, #0]
    31a6:	605a      	str	r2, [r3, #4]
    31a8:	e7da      	b.n	3160 <_free_r+0x24>
    31aa:	42a0      	cmp	r0, r4
    31ac:	d902      	bls.n	31b4 <_free_r+0x78>
    31ae:	230c      	movs	r3, #12
    31b0:	602b      	str	r3, [r5, #0]
    31b2:	e7d5      	b.n	3160 <_free_r+0x24>
    31b4:	6821      	ldr	r1, [r4, #0]
    31b6:	1860      	adds	r0, r4, r1
    31b8:	4282      	cmp	r2, r0
    31ba:	d103      	bne.n	31c4 <_free_r+0x88>
    31bc:	6810      	ldr	r0, [r2, #0]
    31be:	6852      	ldr	r2, [r2, #4]
    31c0:	1841      	adds	r1, r0, r1
    31c2:	6021      	str	r1, [r4, #0]
    31c4:	6062      	str	r2, [r4, #4]
    31c6:	605c      	str	r4, [r3, #4]
    31c8:	e7ca      	b.n	3160 <_free_r+0x24>
    31ca:	46c0      	nop			; (mov r8, r8)
    31cc:	200000d4 	.word	0x200000d4

000031d0 <_malloc_r>:
    31d0:	2303      	movs	r3, #3
    31d2:	b570      	push	{r4, r5, r6, lr}
    31d4:	1ccd      	adds	r5, r1, #3
    31d6:	439d      	bics	r5, r3
    31d8:	3508      	adds	r5, #8
    31da:	0006      	movs	r6, r0
    31dc:	2d0c      	cmp	r5, #12
    31de:	d21e      	bcs.n	321e <_malloc_r+0x4e>
    31e0:	250c      	movs	r5, #12
    31e2:	42a9      	cmp	r1, r5
    31e4:	d81d      	bhi.n	3222 <_malloc_r+0x52>
    31e6:	0030      	movs	r0, r6
    31e8:	f000 fb9e 	bl	3928 <__malloc_lock>
    31ec:	4a25      	ldr	r2, [pc, #148]	; (3284 <_malloc_r+0xb4>)
    31ee:	6814      	ldr	r4, [r2, #0]
    31f0:	0021      	movs	r1, r4
    31f2:	2900      	cmp	r1, #0
    31f4:	d119      	bne.n	322a <_malloc_r+0x5a>
    31f6:	4c24      	ldr	r4, [pc, #144]	; (3288 <_malloc_r+0xb8>)
    31f8:	6823      	ldr	r3, [r4, #0]
    31fa:	2b00      	cmp	r3, #0
    31fc:	d103      	bne.n	3206 <_malloc_r+0x36>
    31fe:	0030      	movs	r0, r6
    3200:	f000 f8c8 	bl	3394 <_sbrk_r>
    3204:	6020      	str	r0, [r4, #0]
    3206:	0029      	movs	r1, r5
    3208:	0030      	movs	r0, r6
    320a:	f000 f8c3 	bl	3394 <_sbrk_r>
    320e:	1c43      	adds	r3, r0, #1
    3210:	d12c      	bne.n	326c <_malloc_r+0x9c>
    3212:	230c      	movs	r3, #12
    3214:	0030      	movs	r0, r6
    3216:	6033      	str	r3, [r6, #0]
    3218:	f000 fb87 	bl	392a <__malloc_unlock>
    321c:	e003      	b.n	3226 <_malloc_r+0x56>
    321e:	2d00      	cmp	r5, #0
    3220:	dadf      	bge.n	31e2 <_malloc_r+0x12>
    3222:	230c      	movs	r3, #12
    3224:	6033      	str	r3, [r6, #0]
    3226:	2000      	movs	r0, #0
    3228:	bd70      	pop	{r4, r5, r6, pc}
    322a:	680b      	ldr	r3, [r1, #0]
    322c:	1b5b      	subs	r3, r3, r5
    322e:	d41a      	bmi.n	3266 <_malloc_r+0x96>
    3230:	2b0b      	cmp	r3, #11
    3232:	d903      	bls.n	323c <_malloc_r+0x6c>
    3234:	600b      	str	r3, [r1, #0]
    3236:	18cc      	adds	r4, r1, r3
    3238:	6025      	str	r5, [r4, #0]
    323a:	e003      	b.n	3244 <_malloc_r+0x74>
    323c:	428c      	cmp	r4, r1
    323e:	d10e      	bne.n	325e <_malloc_r+0x8e>
    3240:	6863      	ldr	r3, [r4, #4]
    3242:	6013      	str	r3, [r2, #0]
    3244:	0030      	movs	r0, r6
    3246:	f000 fb70 	bl	392a <__malloc_unlock>
    324a:	0020      	movs	r0, r4
    324c:	2207      	movs	r2, #7
    324e:	300b      	adds	r0, #11
    3250:	1d23      	adds	r3, r4, #4
    3252:	4390      	bics	r0, r2
    3254:	1ac3      	subs	r3, r0, r3
    3256:	d0e7      	beq.n	3228 <_malloc_r+0x58>
    3258:	425a      	negs	r2, r3
    325a:	50e2      	str	r2, [r4, r3]
    325c:	e7e4      	b.n	3228 <_malloc_r+0x58>
    325e:	684b      	ldr	r3, [r1, #4]
    3260:	6063      	str	r3, [r4, #4]
    3262:	000c      	movs	r4, r1
    3264:	e7ee      	b.n	3244 <_malloc_r+0x74>
    3266:	000c      	movs	r4, r1
    3268:	6849      	ldr	r1, [r1, #4]
    326a:	e7c2      	b.n	31f2 <_malloc_r+0x22>
    326c:	2303      	movs	r3, #3
    326e:	1cc4      	adds	r4, r0, #3
    3270:	439c      	bics	r4, r3
    3272:	42a0      	cmp	r0, r4
    3274:	d0e0      	beq.n	3238 <_malloc_r+0x68>
    3276:	1a21      	subs	r1, r4, r0
    3278:	0030      	movs	r0, r6
    327a:	f000 f88b 	bl	3394 <_sbrk_r>
    327e:	1c43      	adds	r3, r0, #1
    3280:	d1da      	bne.n	3238 <_malloc_r+0x68>
    3282:	e7c6      	b.n	3212 <_malloc_r+0x42>
    3284:	200000d4 	.word	0x200000d4
    3288:	200000d8 	.word	0x200000d8

0000328c <iprintf>:
    328c:	b40f      	push	{r0, r1, r2, r3}
    328e:	4b0b      	ldr	r3, [pc, #44]	; (32bc <iprintf+0x30>)
    3290:	b513      	push	{r0, r1, r4, lr}
    3292:	681c      	ldr	r4, [r3, #0]
    3294:	2c00      	cmp	r4, #0
    3296:	d005      	beq.n	32a4 <iprintf+0x18>
    3298:	69a3      	ldr	r3, [r4, #24]
    329a:	2b00      	cmp	r3, #0
    329c:	d102      	bne.n	32a4 <iprintf+0x18>
    329e:	0020      	movs	r0, r4
    32a0:	f000 fa40 	bl	3724 <__sinit>
    32a4:	ab05      	add	r3, sp, #20
    32a6:	9a04      	ldr	r2, [sp, #16]
    32a8:	68a1      	ldr	r1, [r4, #8]
    32aa:	0020      	movs	r0, r4
    32ac:	9301      	str	r3, [sp, #4]
    32ae:	f000 fb65 	bl	397c <_vfiprintf_r>
    32b2:	bc16      	pop	{r1, r2, r4}
    32b4:	bc08      	pop	{r3}
    32b6:	b004      	add	sp, #16
    32b8:	4718      	bx	r3
    32ba:	46c0      	nop			; (mov r8, r8)
    32bc:	20000010 	.word	0x20000010

000032c0 <srand>:
    32c0:	4b10      	ldr	r3, [pc, #64]	; (3304 <srand+0x44>)
    32c2:	b570      	push	{r4, r5, r6, lr}
    32c4:	681c      	ldr	r4, [r3, #0]
    32c6:	0005      	movs	r5, r0
    32c8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    32ca:	2b00      	cmp	r3, #0
    32cc:	d115      	bne.n	32fa <srand+0x3a>
    32ce:	2018      	movs	r0, #24
    32d0:	f7ff ff0e 	bl	30f0 <malloc>
    32d4:	4b0c      	ldr	r3, [pc, #48]	; (3308 <srand+0x48>)
    32d6:	63a0      	str	r0, [r4, #56]	; 0x38
    32d8:	8003      	strh	r3, [r0, #0]
    32da:	4b0c      	ldr	r3, [pc, #48]	; (330c <srand+0x4c>)
    32dc:	2201      	movs	r2, #1
    32de:	8043      	strh	r3, [r0, #2]
    32e0:	4b0b      	ldr	r3, [pc, #44]	; (3310 <srand+0x50>)
    32e2:	8083      	strh	r3, [r0, #4]
    32e4:	4b0b      	ldr	r3, [pc, #44]	; (3314 <srand+0x54>)
    32e6:	80c3      	strh	r3, [r0, #6]
    32e8:	4b0b      	ldr	r3, [pc, #44]	; (3318 <srand+0x58>)
    32ea:	8103      	strh	r3, [r0, #8]
    32ec:	2305      	movs	r3, #5
    32ee:	8143      	strh	r3, [r0, #10]
    32f0:	3306      	adds	r3, #6
    32f2:	8183      	strh	r3, [r0, #12]
    32f4:	2300      	movs	r3, #0
    32f6:	6102      	str	r2, [r0, #16]
    32f8:	6143      	str	r3, [r0, #20]
    32fa:	2200      	movs	r2, #0
    32fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    32fe:	611d      	str	r5, [r3, #16]
    3300:	615a      	str	r2, [r3, #20]
    3302:	bd70      	pop	{r4, r5, r6, pc}
    3304:	20000010 	.word	0x20000010
    3308:	0000330e 	.word	0x0000330e
    330c:	ffffabcd 	.word	0xffffabcd
    3310:	00001234 	.word	0x00001234
    3314:	ffffe66d 	.word	0xffffe66d
    3318:	ffffdeec 	.word	0xffffdeec

0000331c <rand>:
    331c:	4b15      	ldr	r3, [pc, #84]	; (3374 <rand+0x58>)
    331e:	b510      	push	{r4, lr}
    3320:	681c      	ldr	r4, [r3, #0]
    3322:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    3324:	2b00      	cmp	r3, #0
    3326:	d115      	bne.n	3354 <rand+0x38>
    3328:	2018      	movs	r0, #24
    332a:	f7ff fee1 	bl	30f0 <malloc>
    332e:	4b12      	ldr	r3, [pc, #72]	; (3378 <rand+0x5c>)
    3330:	63a0      	str	r0, [r4, #56]	; 0x38
    3332:	8003      	strh	r3, [r0, #0]
    3334:	4b11      	ldr	r3, [pc, #68]	; (337c <rand+0x60>)
    3336:	2201      	movs	r2, #1
    3338:	8043      	strh	r3, [r0, #2]
    333a:	4b11      	ldr	r3, [pc, #68]	; (3380 <rand+0x64>)
    333c:	8083      	strh	r3, [r0, #4]
    333e:	4b11      	ldr	r3, [pc, #68]	; (3384 <rand+0x68>)
    3340:	80c3      	strh	r3, [r0, #6]
    3342:	4b11      	ldr	r3, [pc, #68]	; (3388 <rand+0x6c>)
    3344:	8103      	strh	r3, [r0, #8]
    3346:	2305      	movs	r3, #5
    3348:	8143      	strh	r3, [r0, #10]
    334a:	3306      	adds	r3, #6
    334c:	8183      	strh	r3, [r0, #12]
    334e:	2300      	movs	r3, #0
    3350:	6102      	str	r2, [r0, #16]
    3352:	6143      	str	r3, [r0, #20]
    3354:	6ba4      	ldr	r4, [r4, #56]	; 0x38
    3356:	4a0d      	ldr	r2, [pc, #52]	; (338c <rand+0x70>)
    3358:	6920      	ldr	r0, [r4, #16]
    335a:	6961      	ldr	r1, [r4, #20]
    335c:	4b0c      	ldr	r3, [pc, #48]	; (3390 <rand+0x74>)
    335e:	f7ff fe79 	bl	3054 <__aeabi_lmul>
    3362:	2201      	movs	r2, #1
    3364:	2300      	movs	r3, #0
    3366:	1880      	adds	r0, r0, r2
    3368:	4159      	adcs	r1, r3
    336a:	6120      	str	r0, [r4, #16]
    336c:	6161      	str	r1, [r4, #20]
    336e:	0048      	lsls	r0, r1, #1
    3370:	0840      	lsrs	r0, r0, #1
    3372:	bd10      	pop	{r4, pc}
    3374:	20000010 	.word	0x20000010
    3378:	0000330e 	.word	0x0000330e
    337c:	ffffabcd 	.word	0xffffabcd
    3380:	00001234 	.word	0x00001234
    3384:	ffffe66d 	.word	0xffffe66d
    3388:	ffffdeec 	.word	0xffffdeec
    338c:	4c957f2d 	.word	0x4c957f2d
    3390:	5851f42d 	.word	0x5851f42d

00003394 <_sbrk_r>:
    3394:	2300      	movs	r3, #0
    3396:	b570      	push	{r4, r5, r6, lr}
    3398:	4c06      	ldr	r4, [pc, #24]	; (33b4 <_sbrk_r+0x20>)
    339a:	0005      	movs	r5, r0
    339c:	0008      	movs	r0, r1
    339e:	6023      	str	r3, [r4, #0]
    33a0:	f7fe fb4c 	bl	1a3c <_sbrk>
    33a4:	1c43      	adds	r3, r0, #1
    33a6:	d103      	bne.n	33b0 <_sbrk_r+0x1c>
    33a8:	6823      	ldr	r3, [r4, #0]
    33aa:	2b00      	cmp	r3, #0
    33ac:	d000      	beq.n	33b0 <_sbrk_r+0x1c>
    33ae:	602b      	str	r3, [r5, #0]
    33b0:	bd70      	pop	{r4, r5, r6, pc}
    33b2:	46c0      	nop			; (mov r8, r8)
    33b4:	20000198 	.word	0x20000198

000033b8 <setbuf>:
    33b8:	424a      	negs	r2, r1
    33ba:	414a      	adcs	r2, r1
    33bc:	2380      	movs	r3, #128	; 0x80
    33be:	b510      	push	{r4, lr}
    33c0:	0052      	lsls	r2, r2, #1
    33c2:	00db      	lsls	r3, r3, #3
    33c4:	f000 f802 	bl	33cc <setvbuf>
    33c8:	bd10      	pop	{r4, pc}
	...

000033cc <setvbuf>:
    33cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    33ce:	001d      	movs	r5, r3
    33d0:	4b4f      	ldr	r3, [pc, #316]	; (3510 <setvbuf+0x144>)
    33d2:	b085      	sub	sp, #20
    33d4:	681e      	ldr	r6, [r3, #0]
    33d6:	0004      	movs	r4, r0
    33d8:	000f      	movs	r7, r1
    33da:	9200      	str	r2, [sp, #0]
    33dc:	2e00      	cmp	r6, #0
    33de:	d005      	beq.n	33ec <setvbuf+0x20>
    33e0:	69b3      	ldr	r3, [r6, #24]
    33e2:	2b00      	cmp	r3, #0
    33e4:	d102      	bne.n	33ec <setvbuf+0x20>
    33e6:	0030      	movs	r0, r6
    33e8:	f000 f99c 	bl	3724 <__sinit>
    33ec:	4b49      	ldr	r3, [pc, #292]	; (3514 <setvbuf+0x148>)
    33ee:	429c      	cmp	r4, r3
    33f0:	d150      	bne.n	3494 <setvbuf+0xc8>
    33f2:	6874      	ldr	r4, [r6, #4]
    33f4:	9b00      	ldr	r3, [sp, #0]
    33f6:	2b02      	cmp	r3, #2
    33f8:	d005      	beq.n	3406 <setvbuf+0x3a>
    33fa:	2b01      	cmp	r3, #1
    33fc:	d900      	bls.n	3400 <setvbuf+0x34>
    33fe:	e084      	b.n	350a <setvbuf+0x13e>
    3400:	2d00      	cmp	r5, #0
    3402:	da00      	bge.n	3406 <setvbuf+0x3a>
    3404:	e081      	b.n	350a <setvbuf+0x13e>
    3406:	0021      	movs	r1, r4
    3408:	0030      	movs	r0, r6
    340a:	f000 f91d 	bl	3648 <_fflush_r>
    340e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3410:	2900      	cmp	r1, #0
    3412:	d008      	beq.n	3426 <setvbuf+0x5a>
    3414:	0023      	movs	r3, r4
    3416:	3344      	adds	r3, #68	; 0x44
    3418:	4299      	cmp	r1, r3
    341a:	d002      	beq.n	3422 <setvbuf+0x56>
    341c:	0030      	movs	r0, r6
    341e:	f7ff fe8d 	bl	313c <_free_r>
    3422:	2300      	movs	r3, #0
    3424:	6363      	str	r3, [r4, #52]	; 0x34
    3426:	2300      	movs	r3, #0
    3428:	61a3      	str	r3, [r4, #24]
    342a:	6063      	str	r3, [r4, #4]
    342c:	89a3      	ldrh	r3, [r4, #12]
    342e:	061b      	lsls	r3, r3, #24
    3430:	d503      	bpl.n	343a <setvbuf+0x6e>
    3432:	6921      	ldr	r1, [r4, #16]
    3434:	0030      	movs	r0, r6
    3436:	f7ff fe81 	bl	313c <_free_r>
    343a:	89a3      	ldrh	r3, [r4, #12]
    343c:	4a36      	ldr	r2, [pc, #216]	; (3518 <setvbuf+0x14c>)
    343e:	4013      	ands	r3, r2
    3440:	81a3      	strh	r3, [r4, #12]
    3442:	9b00      	ldr	r3, [sp, #0]
    3444:	2b02      	cmp	r3, #2
    3446:	d05a      	beq.n	34fe <setvbuf+0x132>
    3448:	ab03      	add	r3, sp, #12
    344a:	aa02      	add	r2, sp, #8
    344c:	0021      	movs	r1, r4
    344e:	0030      	movs	r0, r6
    3450:	f000 f9fe 	bl	3850 <__swhatbuf_r>
    3454:	89a3      	ldrh	r3, [r4, #12]
    3456:	4318      	orrs	r0, r3
    3458:	81a0      	strh	r0, [r4, #12]
    345a:	2d00      	cmp	r5, #0
    345c:	d124      	bne.n	34a8 <setvbuf+0xdc>
    345e:	9d02      	ldr	r5, [sp, #8]
    3460:	0028      	movs	r0, r5
    3462:	f7ff fe45 	bl	30f0 <malloc>
    3466:	9501      	str	r5, [sp, #4]
    3468:	1e07      	subs	r7, r0, #0
    346a:	d142      	bne.n	34f2 <setvbuf+0x126>
    346c:	9b02      	ldr	r3, [sp, #8]
    346e:	9301      	str	r3, [sp, #4]
    3470:	42ab      	cmp	r3, r5
    3472:	d139      	bne.n	34e8 <setvbuf+0x11c>
    3474:	2001      	movs	r0, #1
    3476:	4240      	negs	r0, r0
    3478:	2302      	movs	r3, #2
    347a:	89a2      	ldrh	r2, [r4, #12]
    347c:	4313      	orrs	r3, r2
    347e:	81a3      	strh	r3, [r4, #12]
    3480:	2300      	movs	r3, #0
    3482:	60a3      	str	r3, [r4, #8]
    3484:	0023      	movs	r3, r4
    3486:	3347      	adds	r3, #71	; 0x47
    3488:	6023      	str	r3, [r4, #0]
    348a:	6123      	str	r3, [r4, #16]
    348c:	2301      	movs	r3, #1
    348e:	6163      	str	r3, [r4, #20]
    3490:	b005      	add	sp, #20
    3492:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3494:	4b21      	ldr	r3, [pc, #132]	; (351c <setvbuf+0x150>)
    3496:	429c      	cmp	r4, r3
    3498:	d101      	bne.n	349e <setvbuf+0xd2>
    349a:	68b4      	ldr	r4, [r6, #8]
    349c:	e7aa      	b.n	33f4 <setvbuf+0x28>
    349e:	4b20      	ldr	r3, [pc, #128]	; (3520 <setvbuf+0x154>)
    34a0:	429c      	cmp	r4, r3
    34a2:	d1a7      	bne.n	33f4 <setvbuf+0x28>
    34a4:	68f4      	ldr	r4, [r6, #12]
    34a6:	e7a5      	b.n	33f4 <setvbuf+0x28>
    34a8:	2f00      	cmp	r7, #0
    34aa:	d0d9      	beq.n	3460 <setvbuf+0x94>
    34ac:	69b3      	ldr	r3, [r6, #24]
    34ae:	2b00      	cmp	r3, #0
    34b0:	d102      	bne.n	34b8 <setvbuf+0xec>
    34b2:	0030      	movs	r0, r6
    34b4:	f000 f936 	bl	3724 <__sinit>
    34b8:	9b00      	ldr	r3, [sp, #0]
    34ba:	2b01      	cmp	r3, #1
    34bc:	d103      	bne.n	34c6 <setvbuf+0xfa>
    34be:	89a3      	ldrh	r3, [r4, #12]
    34c0:	9a00      	ldr	r2, [sp, #0]
    34c2:	431a      	orrs	r2, r3
    34c4:	81a2      	strh	r2, [r4, #12]
    34c6:	2008      	movs	r0, #8
    34c8:	89a3      	ldrh	r3, [r4, #12]
    34ca:	6027      	str	r7, [r4, #0]
    34cc:	6127      	str	r7, [r4, #16]
    34ce:	6165      	str	r5, [r4, #20]
    34d0:	4018      	ands	r0, r3
    34d2:	d018      	beq.n	3506 <setvbuf+0x13a>
    34d4:	2001      	movs	r0, #1
    34d6:	4018      	ands	r0, r3
    34d8:	2300      	movs	r3, #0
    34da:	4298      	cmp	r0, r3
    34dc:	d011      	beq.n	3502 <setvbuf+0x136>
    34de:	426d      	negs	r5, r5
    34e0:	60a3      	str	r3, [r4, #8]
    34e2:	61a5      	str	r5, [r4, #24]
    34e4:	0018      	movs	r0, r3
    34e6:	e7d3      	b.n	3490 <setvbuf+0xc4>
    34e8:	9801      	ldr	r0, [sp, #4]
    34ea:	f7ff fe01 	bl	30f0 <malloc>
    34ee:	1e07      	subs	r7, r0, #0
    34f0:	d0c0      	beq.n	3474 <setvbuf+0xa8>
    34f2:	2380      	movs	r3, #128	; 0x80
    34f4:	89a2      	ldrh	r2, [r4, #12]
    34f6:	9d01      	ldr	r5, [sp, #4]
    34f8:	4313      	orrs	r3, r2
    34fa:	81a3      	strh	r3, [r4, #12]
    34fc:	e7d6      	b.n	34ac <setvbuf+0xe0>
    34fe:	2000      	movs	r0, #0
    3500:	e7ba      	b.n	3478 <setvbuf+0xac>
    3502:	60a5      	str	r5, [r4, #8]
    3504:	e7c4      	b.n	3490 <setvbuf+0xc4>
    3506:	60a0      	str	r0, [r4, #8]
    3508:	e7c2      	b.n	3490 <setvbuf+0xc4>
    350a:	2001      	movs	r0, #1
    350c:	4240      	negs	r0, r0
    350e:	e7bf      	b.n	3490 <setvbuf+0xc4>
    3510:	20000010 	.word	0x20000010
    3514:	000062bc 	.word	0x000062bc
    3518:	fffff35c 	.word	0xfffff35c
    351c:	000062dc 	.word	0x000062dc
    3520:	0000629c 	.word	0x0000629c

00003524 <strlen>:
    3524:	2300      	movs	r3, #0
    3526:	5cc2      	ldrb	r2, [r0, r3]
    3528:	3301      	adds	r3, #1
    352a:	2a00      	cmp	r2, #0
    352c:	d1fb      	bne.n	3526 <strlen+0x2>
    352e:	1e58      	subs	r0, r3, #1
    3530:	4770      	bx	lr
	...

00003534 <__sflush_r>:
    3534:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3536:	898a      	ldrh	r2, [r1, #12]
    3538:	0005      	movs	r5, r0
    353a:	000c      	movs	r4, r1
    353c:	0713      	lsls	r3, r2, #28
    353e:	d460      	bmi.n	3602 <__sflush_r+0xce>
    3540:	684b      	ldr	r3, [r1, #4]
    3542:	2b00      	cmp	r3, #0
    3544:	dc04      	bgt.n	3550 <__sflush_r+0x1c>
    3546:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    3548:	2b00      	cmp	r3, #0
    354a:	dc01      	bgt.n	3550 <__sflush_r+0x1c>
    354c:	2000      	movs	r0, #0
    354e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3550:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    3552:	2f00      	cmp	r7, #0
    3554:	d0fa      	beq.n	354c <__sflush_r+0x18>
    3556:	2300      	movs	r3, #0
    3558:	682e      	ldr	r6, [r5, #0]
    355a:	602b      	str	r3, [r5, #0]
    355c:	2380      	movs	r3, #128	; 0x80
    355e:	015b      	lsls	r3, r3, #5
    3560:	401a      	ands	r2, r3
    3562:	d034      	beq.n	35ce <__sflush_r+0x9a>
    3564:	6d60      	ldr	r0, [r4, #84]	; 0x54
    3566:	89a3      	ldrh	r3, [r4, #12]
    3568:	075b      	lsls	r3, r3, #29
    356a:	d506      	bpl.n	357a <__sflush_r+0x46>
    356c:	6863      	ldr	r3, [r4, #4]
    356e:	1ac0      	subs	r0, r0, r3
    3570:	6b63      	ldr	r3, [r4, #52]	; 0x34
    3572:	2b00      	cmp	r3, #0
    3574:	d001      	beq.n	357a <__sflush_r+0x46>
    3576:	6c23      	ldr	r3, [r4, #64]	; 0x40
    3578:	1ac0      	subs	r0, r0, r3
    357a:	0002      	movs	r2, r0
    357c:	6a21      	ldr	r1, [r4, #32]
    357e:	2300      	movs	r3, #0
    3580:	0028      	movs	r0, r5
    3582:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    3584:	47b8      	blx	r7
    3586:	89a1      	ldrh	r1, [r4, #12]
    3588:	1c43      	adds	r3, r0, #1
    358a:	d106      	bne.n	359a <__sflush_r+0x66>
    358c:	682b      	ldr	r3, [r5, #0]
    358e:	2b1d      	cmp	r3, #29
    3590:	d831      	bhi.n	35f6 <__sflush_r+0xc2>
    3592:	4a2c      	ldr	r2, [pc, #176]	; (3644 <__sflush_r+0x110>)
    3594:	40da      	lsrs	r2, r3
    3596:	07d3      	lsls	r3, r2, #31
    3598:	d52d      	bpl.n	35f6 <__sflush_r+0xc2>
    359a:	2300      	movs	r3, #0
    359c:	6063      	str	r3, [r4, #4]
    359e:	6923      	ldr	r3, [r4, #16]
    35a0:	6023      	str	r3, [r4, #0]
    35a2:	04cb      	lsls	r3, r1, #19
    35a4:	d505      	bpl.n	35b2 <__sflush_r+0x7e>
    35a6:	1c43      	adds	r3, r0, #1
    35a8:	d102      	bne.n	35b0 <__sflush_r+0x7c>
    35aa:	682b      	ldr	r3, [r5, #0]
    35ac:	2b00      	cmp	r3, #0
    35ae:	d100      	bne.n	35b2 <__sflush_r+0x7e>
    35b0:	6560      	str	r0, [r4, #84]	; 0x54
    35b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
    35b4:	602e      	str	r6, [r5, #0]
    35b6:	2900      	cmp	r1, #0
    35b8:	d0c8      	beq.n	354c <__sflush_r+0x18>
    35ba:	0023      	movs	r3, r4
    35bc:	3344      	adds	r3, #68	; 0x44
    35be:	4299      	cmp	r1, r3
    35c0:	d002      	beq.n	35c8 <__sflush_r+0x94>
    35c2:	0028      	movs	r0, r5
    35c4:	f7ff fdba 	bl	313c <_free_r>
    35c8:	2000      	movs	r0, #0
    35ca:	6360      	str	r0, [r4, #52]	; 0x34
    35cc:	e7bf      	b.n	354e <__sflush_r+0x1a>
    35ce:	2301      	movs	r3, #1
    35d0:	6a21      	ldr	r1, [r4, #32]
    35d2:	0028      	movs	r0, r5
    35d4:	47b8      	blx	r7
    35d6:	1c43      	adds	r3, r0, #1
    35d8:	d1c5      	bne.n	3566 <__sflush_r+0x32>
    35da:	682b      	ldr	r3, [r5, #0]
    35dc:	2b00      	cmp	r3, #0
    35de:	d0c2      	beq.n	3566 <__sflush_r+0x32>
    35e0:	2b1d      	cmp	r3, #29
    35e2:	d001      	beq.n	35e8 <__sflush_r+0xb4>
    35e4:	2b16      	cmp	r3, #22
    35e6:	d101      	bne.n	35ec <__sflush_r+0xb8>
    35e8:	602e      	str	r6, [r5, #0]
    35ea:	e7af      	b.n	354c <__sflush_r+0x18>
    35ec:	2340      	movs	r3, #64	; 0x40
    35ee:	89a2      	ldrh	r2, [r4, #12]
    35f0:	4313      	orrs	r3, r2
    35f2:	81a3      	strh	r3, [r4, #12]
    35f4:	e7ab      	b.n	354e <__sflush_r+0x1a>
    35f6:	2340      	movs	r3, #64	; 0x40
    35f8:	430b      	orrs	r3, r1
    35fa:	2001      	movs	r0, #1
    35fc:	81a3      	strh	r3, [r4, #12]
    35fe:	4240      	negs	r0, r0
    3600:	e7a5      	b.n	354e <__sflush_r+0x1a>
    3602:	690f      	ldr	r7, [r1, #16]
    3604:	2f00      	cmp	r7, #0
    3606:	d0a1      	beq.n	354c <__sflush_r+0x18>
    3608:	680b      	ldr	r3, [r1, #0]
    360a:	600f      	str	r7, [r1, #0]
    360c:	1bdb      	subs	r3, r3, r7
    360e:	9301      	str	r3, [sp, #4]
    3610:	2300      	movs	r3, #0
    3612:	0792      	lsls	r2, r2, #30
    3614:	d100      	bne.n	3618 <__sflush_r+0xe4>
    3616:	694b      	ldr	r3, [r1, #20]
    3618:	60a3      	str	r3, [r4, #8]
    361a:	9b01      	ldr	r3, [sp, #4]
    361c:	2b00      	cmp	r3, #0
    361e:	dc00      	bgt.n	3622 <__sflush_r+0xee>
    3620:	e794      	b.n	354c <__sflush_r+0x18>
    3622:	9b01      	ldr	r3, [sp, #4]
    3624:	003a      	movs	r2, r7
    3626:	6a21      	ldr	r1, [r4, #32]
    3628:	0028      	movs	r0, r5
    362a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    362c:	47b0      	blx	r6
    362e:	2800      	cmp	r0, #0
    3630:	dc03      	bgt.n	363a <__sflush_r+0x106>
    3632:	2340      	movs	r3, #64	; 0x40
    3634:	89a2      	ldrh	r2, [r4, #12]
    3636:	4313      	orrs	r3, r2
    3638:	e7df      	b.n	35fa <__sflush_r+0xc6>
    363a:	9b01      	ldr	r3, [sp, #4]
    363c:	183f      	adds	r7, r7, r0
    363e:	1a1b      	subs	r3, r3, r0
    3640:	9301      	str	r3, [sp, #4]
    3642:	e7ea      	b.n	361a <__sflush_r+0xe6>
    3644:	20400001 	.word	0x20400001

00003648 <_fflush_r>:
    3648:	690b      	ldr	r3, [r1, #16]
    364a:	b570      	push	{r4, r5, r6, lr}
    364c:	0005      	movs	r5, r0
    364e:	000c      	movs	r4, r1
    3650:	2b00      	cmp	r3, #0
    3652:	d101      	bne.n	3658 <_fflush_r+0x10>
    3654:	2000      	movs	r0, #0
    3656:	bd70      	pop	{r4, r5, r6, pc}
    3658:	2800      	cmp	r0, #0
    365a:	d004      	beq.n	3666 <_fflush_r+0x1e>
    365c:	6983      	ldr	r3, [r0, #24]
    365e:	2b00      	cmp	r3, #0
    3660:	d101      	bne.n	3666 <_fflush_r+0x1e>
    3662:	f000 f85f 	bl	3724 <__sinit>
    3666:	4b0b      	ldr	r3, [pc, #44]	; (3694 <_fflush_r+0x4c>)
    3668:	429c      	cmp	r4, r3
    366a:	d109      	bne.n	3680 <_fflush_r+0x38>
    366c:	686c      	ldr	r4, [r5, #4]
    366e:	220c      	movs	r2, #12
    3670:	5ea3      	ldrsh	r3, [r4, r2]
    3672:	2b00      	cmp	r3, #0
    3674:	d0ee      	beq.n	3654 <_fflush_r+0xc>
    3676:	0021      	movs	r1, r4
    3678:	0028      	movs	r0, r5
    367a:	f7ff ff5b 	bl	3534 <__sflush_r>
    367e:	e7ea      	b.n	3656 <_fflush_r+0xe>
    3680:	4b05      	ldr	r3, [pc, #20]	; (3698 <_fflush_r+0x50>)
    3682:	429c      	cmp	r4, r3
    3684:	d101      	bne.n	368a <_fflush_r+0x42>
    3686:	68ac      	ldr	r4, [r5, #8]
    3688:	e7f1      	b.n	366e <_fflush_r+0x26>
    368a:	4b04      	ldr	r3, [pc, #16]	; (369c <_fflush_r+0x54>)
    368c:	429c      	cmp	r4, r3
    368e:	d1ee      	bne.n	366e <_fflush_r+0x26>
    3690:	68ec      	ldr	r4, [r5, #12]
    3692:	e7ec      	b.n	366e <_fflush_r+0x26>
    3694:	000062bc 	.word	0x000062bc
    3698:	000062dc 	.word	0x000062dc
    369c:	0000629c 	.word	0x0000629c

000036a0 <_cleanup_r>:
    36a0:	b510      	push	{r4, lr}
    36a2:	4902      	ldr	r1, [pc, #8]	; (36ac <_cleanup_r+0xc>)
    36a4:	f000 f8b2 	bl	380c <_fwalk_reent>
    36a8:	bd10      	pop	{r4, pc}
    36aa:	46c0      	nop			; (mov r8, r8)
    36ac:	00003649 	.word	0x00003649

000036b0 <std.isra.0>:
    36b0:	2300      	movs	r3, #0
    36b2:	b510      	push	{r4, lr}
    36b4:	0004      	movs	r4, r0
    36b6:	6003      	str	r3, [r0, #0]
    36b8:	6043      	str	r3, [r0, #4]
    36ba:	6083      	str	r3, [r0, #8]
    36bc:	8181      	strh	r1, [r0, #12]
    36be:	6643      	str	r3, [r0, #100]	; 0x64
    36c0:	81c2      	strh	r2, [r0, #14]
    36c2:	6103      	str	r3, [r0, #16]
    36c4:	6143      	str	r3, [r0, #20]
    36c6:	6183      	str	r3, [r0, #24]
    36c8:	0019      	movs	r1, r3
    36ca:	2208      	movs	r2, #8
    36cc:	305c      	adds	r0, #92	; 0x5c
    36ce:	f7ff fd2c 	bl	312a <memset>
    36d2:	4b05      	ldr	r3, [pc, #20]	; (36e8 <std.isra.0+0x38>)
    36d4:	6224      	str	r4, [r4, #32]
    36d6:	6263      	str	r3, [r4, #36]	; 0x24
    36d8:	4b04      	ldr	r3, [pc, #16]	; (36ec <std.isra.0+0x3c>)
    36da:	62a3      	str	r3, [r4, #40]	; 0x28
    36dc:	4b04      	ldr	r3, [pc, #16]	; (36f0 <std.isra.0+0x40>)
    36de:	62e3      	str	r3, [r4, #44]	; 0x2c
    36e0:	4b04      	ldr	r3, [pc, #16]	; (36f4 <std.isra.0+0x44>)
    36e2:	6323      	str	r3, [r4, #48]	; 0x30
    36e4:	bd10      	pop	{r4, pc}
    36e6:	46c0      	nop			; (mov r8, r8)
    36e8:	00003ec5 	.word	0x00003ec5
    36ec:	00003eed 	.word	0x00003eed
    36f0:	00003f25 	.word	0x00003f25
    36f4:	00003f51 	.word	0x00003f51

000036f8 <__sfmoreglue>:
    36f8:	b570      	push	{r4, r5, r6, lr}
    36fa:	2568      	movs	r5, #104	; 0x68
    36fc:	1e4a      	subs	r2, r1, #1
    36fe:	4355      	muls	r5, r2
    3700:	000e      	movs	r6, r1
    3702:	0029      	movs	r1, r5
    3704:	3174      	adds	r1, #116	; 0x74
    3706:	f7ff fd63 	bl	31d0 <_malloc_r>
    370a:	1e04      	subs	r4, r0, #0
    370c:	d008      	beq.n	3720 <__sfmoreglue+0x28>
    370e:	2100      	movs	r1, #0
    3710:	002a      	movs	r2, r5
    3712:	6001      	str	r1, [r0, #0]
    3714:	6046      	str	r6, [r0, #4]
    3716:	300c      	adds	r0, #12
    3718:	60a0      	str	r0, [r4, #8]
    371a:	3268      	adds	r2, #104	; 0x68
    371c:	f7ff fd05 	bl	312a <memset>
    3720:	0020      	movs	r0, r4
    3722:	bd70      	pop	{r4, r5, r6, pc}

00003724 <__sinit>:
    3724:	6983      	ldr	r3, [r0, #24]
    3726:	b513      	push	{r0, r1, r4, lr}
    3728:	0004      	movs	r4, r0
    372a:	2b00      	cmp	r3, #0
    372c:	d128      	bne.n	3780 <__sinit+0x5c>
    372e:	6483      	str	r3, [r0, #72]	; 0x48
    3730:	64c3      	str	r3, [r0, #76]	; 0x4c
    3732:	6503      	str	r3, [r0, #80]	; 0x50
    3734:	4b13      	ldr	r3, [pc, #76]	; (3784 <__sinit+0x60>)
    3736:	4a14      	ldr	r2, [pc, #80]	; (3788 <__sinit+0x64>)
    3738:	681b      	ldr	r3, [r3, #0]
    373a:	6282      	str	r2, [r0, #40]	; 0x28
    373c:	9301      	str	r3, [sp, #4]
    373e:	4298      	cmp	r0, r3
    3740:	d101      	bne.n	3746 <__sinit+0x22>
    3742:	2301      	movs	r3, #1
    3744:	6183      	str	r3, [r0, #24]
    3746:	0020      	movs	r0, r4
    3748:	f000 f820 	bl	378c <__sfp>
    374c:	6060      	str	r0, [r4, #4]
    374e:	0020      	movs	r0, r4
    3750:	f000 f81c 	bl	378c <__sfp>
    3754:	60a0      	str	r0, [r4, #8]
    3756:	0020      	movs	r0, r4
    3758:	f000 f818 	bl	378c <__sfp>
    375c:	2200      	movs	r2, #0
    375e:	60e0      	str	r0, [r4, #12]
    3760:	2104      	movs	r1, #4
    3762:	6860      	ldr	r0, [r4, #4]
    3764:	f7ff ffa4 	bl	36b0 <std.isra.0>
    3768:	2201      	movs	r2, #1
    376a:	2109      	movs	r1, #9
    376c:	68a0      	ldr	r0, [r4, #8]
    376e:	f7ff ff9f 	bl	36b0 <std.isra.0>
    3772:	2202      	movs	r2, #2
    3774:	2112      	movs	r1, #18
    3776:	68e0      	ldr	r0, [r4, #12]
    3778:	f7ff ff9a 	bl	36b0 <std.isra.0>
    377c:	2301      	movs	r3, #1
    377e:	61a3      	str	r3, [r4, #24]
    3780:	bd13      	pop	{r0, r1, r4, pc}
    3782:	46c0      	nop			; (mov r8, r8)
    3784:	00006298 	.word	0x00006298
    3788:	000036a1 	.word	0x000036a1

0000378c <__sfp>:
    378c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    378e:	4b1e      	ldr	r3, [pc, #120]	; (3808 <__sfp+0x7c>)
    3790:	0007      	movs	r7, r0
    3792:	681e      	ldr	r6, [r3, #0]
    3794:	69b3      	ldr	r3, [r6, #24]
    3796:	2b00      	cmp	r3, #0
    3798:	d102      	bne.n	37a0 <__sfp+0x14>
    379a:	0030      	movs	r0, r6
    379c:	f7ff ffc2 	bl	3724 <__sinit>
    37a0:	3648      	adds	r6, #72	; 0x48
    37a2:	68b4      	ldr	r4, [r6, #8]
    37a4:	6873      	ldr	r3, [r6, #4]
    37a6:	3b01      	subs	r3, #1
    37a8:	d504      	bpl.n	37b4 <__sfp+0x28>
    37aa:	6833      	ldr	r3, [r6, #0]
    37ac:	2b00      	cmp	r3, #0
    37ae:	d007      	beq.n	37c0 <__sfp+0x34>
    37b0:	6836      	ldr	r6, [r6, #0]
    37b2:	e7f6      	b.n	37a2 <__sfp+0x16>
    37b4:	220c      	movs	r2, #12
    37b6:	5ea5      	ldrsh	r5, [r4, r2]
    37b8:	2d00      	cmp	r5, #0
    37ba:	d00d      	beq.n	37d8 <__sfp+0x4c>
    37bc:	3468      	adds	r4, #104	; 0x68
    37be:	e7f2      	b.n	37a6 <__sfp+0x1a>
    37c0:	2104      	movs	r1, #4
    37c2:	0038      	movs	r0, r7
    37c4:	f7ff ff98 	bl	36f8 <__sfmoreglue>
    37c8:	6030      	str	r0, [r6, #0]
    37ca:	2800      	cmp	r0, #0
    37cc:	d1f0      	bne.n	37b0 <__sfp+0x24>
    37ce:	230c      	movs	r3, #12
    37d0:	0004      	movs	r4, r0
    37d2:	603b      	str	r3, [r7, #0]
    37d4:	0020      	movs	r0, r4
    37d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    37d8:	2301      	movs	r3, #1
    37da:	0020      	movs	r0, r4
    37dc:	425b      	negs	r3, r3
    37de:	81e3      	strh	r3, [r4, #14]
    37e0:	3302      	adds	r3, #2
    37e2:	81a3      	strh	r3, [r4, #12]
    37e4:	6665      	str	r5, [r4, #100]	; 0x64
    37e6:	6025      	str	r5, [r4, #0]
    37e8:	60a5      	str	r5, [r4, #8]
    37ea:	6065      	str	r5, [r4, #4]
    37ec:	6125      	str	r5, [r4, #16]
    37ee:	6165      	str	r5, [r4, #20]
    37f0:	61a5      	str	r5, [r4, #24]
    37f2:	2208      	movs	r2, #8
    37f4:	0029      	movs	r1, r5
    37f6:	305c      	adds	r0, #92	; 0x5c
    37f8:	f7ff fc97 	bl	312a <memset>
    37fc:	6365      	str	r5, [r4, #52]	; 0x34
    37fe:	63a5      	str	r5, [r4, #56]	; 0x38
    3800:	64a5      	str	r5, [r4, #72]	; 0x48
    3802:	64e5      	str	r5, [r4, #76]	; 0x4c
    3804:	e7e6      	b.n	37d4 <__sfp+0x48>
    3806:	46c0      	nop			; (mov r8, r8)
    3808:	00006298 	.word	0x00006298

0000380c <_fwalk_reent>:
    380c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    380e:	0004      	movs	r4, r0
    3810:	0007      	movs	r7, r0
    3812:	2600      	movs	r6, #0
    3814:	9101      	str	r1, [sp, #4]
    3816:	3448      	adds	r4, #72	; 0x48
    3818:	2c00      	cmp	r4, #0
    381a:	d101      	bne.n	3820 <_fwalk_reent+0x14>
    381c:	0030      	movs	r0, r6
    381e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3820:	6863      	ldr	r3, [r4, #4]
    3822:	68a5      	ldr	r5, [r4, #8]
    3824:	9300      	str	r3, [sp, #0]
    3826:	9b00      	ldr	r3, [sp, #0]
    3828:	3b01      	subs	r3, #1
    382a:	9300      	str	r3, [sp, #0]
    382c:	d501      	bpl.n	3832 <_fwalk_reent+0x26>
    382e:	6824      	ldr	r4, [r4, #0]
    3830:	e7f2      	b.n	3818 <_fwalk_reent+0xc>
    3832:	89ab      	ldrh	r3, [r5, #12]
    3834:	2b01      	cmp	r3, #1
    3836:	d908      	bls.n	384a <_fwalk_reent+0x3e>
    3838:	220e      	movs	r2, #14
    383a:	5eab      	ldrsh	r3, [r5, r2]
    383c:	3301      	adds	r3, #1
    383e:	d004      	beq.n	384a <_fwalk_reent+0x3e>
    3840:	0029      	movs	r1, r5
    3842:	0038      	movs	r0, r7
    3844:	9b01      	ldr	r3, [sp, #4]
    3846:	4798      	blx	r3
    3848:	4306      	orrs	r6, r0
    384a:	3568      	adds	r5, #104	; 0x68
    384c:	e7eb      	b.n	3826 <_fwalk_reent+0x1a>
	...

00003850 <__swhatbuf_r>:
    3850:	b570      	push	{r4, r5, r6, lr}
    3852:	000e      	movs	r6, r1
    3854:	001d      	movs	r5, r3
    3856:	230e      	movs	r3, #14
    3858:	5ec9      	ldrsh	r1, [r1, r3]
    385a:	b090      	sub	sp, #64	; 0x40
    385c:	0014      	movs	r4, r2
    385e:	2900      	cmp	r1, #0
    3860:	da07      	bge.n	3872 <__swhatbuf_r+0x22>
    3862:	2300      	movs	r3, #0
    3864:	602b      	str	r3, [r5, #0]
    3866:	89b3      	ldrh	r3, [r6, #12]
    3868:	061b      	lsls	r3, r3, #24
    386a:	d411      	bmi.n	3890 <__swhatbuf_r+0x40>
    386c:	2380      	movs	r3, #128	; 0x80
    386e:	00db      	lsls	r3, r3, #3
    3870:	e00f      	b.n	3892 <__swhatbuf_r+0x42>
    3872:	aa01      	add	r2, sp, #4
    3874:	f000 fc64 	bl	4140 <_fstat_r>
    3878:	2800      	cmp	r0, #0
    387a:	dbf2      	blt.n	3862 <__swhatbuf_r+0x12>
    387c:	22f0      	movs	r2, #240	; 0xf0
    387e:	9b02      	ldr	r3, [sp, #8]
    3880:	0212      	lsls	r2, r2, #8
    3882:	4013      	ands	r3, r2
    3884:	4a05      	ldr	r2, [pc, #20]	; (389c <__swhatbuf_r+0x4c>)
    3886:	189b      	adds	r3, r3, r2
    3888:	425a      	negs	r2, r3
    388a:	4153      	adcs	r3, r2
    388c:	602b      	str	r3, [r5, #0]
    388e:	e7ed      	b.n	386c <__swhatbuf_r+0x1c>
    3890:	2340      	movs	r3, #64	; 0x40
    3892:	2000      	movs	r0, #0
    3894:	6023      	str	r3, [r4, #0]
    3896:	b010      	add	sp, #64	; 0x40
    3898:	bd70      	pop	{r4, r5, r6, pc}
    389a:	46c0      	nop			; (mov r8, r8)
    389c:	ffffe000 	.word	0xffffe000

000038a0 <__smakebuf_r>:
    38a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    38a2:	2602      	movs	r6, #2
    38a4:	898b      	ldrh	r3, [r1, #12]
    38a6:	0005      	movs	r5, r0
    38a8:	000c      	movs	r4, r1
    38aa:	4233      	tst	r3, r6
    38ac:	d006      	beq.n	38bc <__smakebuf_r+0x1c>
    38ae:	0023      	movs	r3, r4
    38b0:	3347      	adds	r3, #71	; 0x47
    38b2:	6023      	str	r3, [r4, #0]
    38b4:	6123      	str	r3, [r4, #16]
    38b6:	2301      	movs	r3, #1
    38b8:	6163      	str	r3, [r4, #20]
    38ba:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    38bc:	ab01      	add	r3, sp, #4
    38be:	466a      	mov	r2, sp
    38c0:	f7ff ffc6 	bl	3850 <__swhatbuf_r>
    38c4:	9900      	ldr	r1, [sp, #0]
    38c6:	0007      	movs	r7, r0
    38c8:	0028      	movs	r0, r5
    38ca:	f7ff fc81 	bl	31d0 <_malloc_r>
    38ce:	2800      	cmp	r0, #0
    38d0:	d108      	bne.n	38e4 <__smakebuf_r+0x44>
    38d2:	220c      	movs	r2, #12
    38d4:	5ea3      	ldrsh	r3, [r4, r2]
    38d6:	059a      	lsls	r2, r3, #22
    38d8:	d4ef      	bmi.n	38ba <__smakebuf_r+0x1a>
    38da:	2203      	movs	r2, #3
    38dc:	4393      	bics	r3, r2
    38de:	431e      	orrs	r6, r3
    38e0:	81a6      	strh	r6, [r4, #12]
    38e2:	e7e4      	b.n	38ae <__smakebuf_r+0xe>
    38e4:	4b0f      	ldr	r3, [pc, #60]	; (3924 <__smakebuf_r+0x84>)
    38e6:	62ab      	str	r3, [r5, #40]	; 0x28
    38e8:	2380      	movs	r3, #128	; 0x80
    38ea:	89a2      	ldrh	r2, [r4, #12]
    38ec:	6020      	str	r0, [r4, #0]
    38ee:	4313      	orrs	r3, r2
    38f0:	81a3      	strh	r3, [r4, #12]
    38f2:	9b00      	ldr	r3, [sp, #0]
    38f4:	6120      	str	r0, [r4, #16]
    38f6:	6163      	str	r3, [r4, #20]
    38f8:	9b01      	ldr	r3, [sp, #4]
    38fa:	2b00      	cmp	r3, #0
    38fc:	d00d      	beq.n	391a <__smakebuf_r+0x7a>
    38fe:	230e      	movs	r3, #14
    3900:	5ee1      	ldrsh	r1, [r4, r3]
    3902:	0028      	movs	r0, r5
    3904:	f000 fc2e 	bl	4164 <_isatty_r>
    3908:	2800      	cmp	r0, #0
    390a:	d006      	beq.n	391a <__smakebuf_r+0x7a>
    390c:	2203      	movs	r2, #3
    390e:	89a3      	ldrh	r3, [r4, #12]
    3910:	4393      	bics	r3, r2
    3912:	001a      	movs	r2, r3
    3914:	2301      	movs	r3, #1
    3916:	4313      	orrs	r3, r2
    3918:	81a3      	strh	r3, [r4, #12]
    391a:	89a0      	ldrh	r0, [r4, #12]
    391c:	4338      	orrs	r0, r7
    391e:	81a0      	strh	r0, [r4, #12]
    3920:	e7cb      	b.n	38ba <__smakebuf_r+0x1a>
    3922:	46c0      	nop			; (mov r8, r8)
    3924:	000036a1 	.word	0x000036a1

00003928 <__malloc_lock>:
    3928:	4770      	bx	lr

0000392a <__malloc_unlock>:
    392a:	4770      	bx	lr

0000392c <__sfputc_r>:
    392c:	6893      	ldr	r3, [r2, #8]
    392e:	b510      	push	{r4, lr}
    3930:	3b01      	subs	r3, #1
    3932:	6093      	str	r3, [r2, #8]
    3934:	2b00      	cmp	r3, #0
    3936:	da05      	bge.n	3944 <__sfputc_r+0x18>
    3938:	6994      	ldr	r4, [r2, #24]
    393a:	42a3      	cmp	r3, r4
    393c:	db08      	blt.n	3950 <__sfputc_r+0x24>
    393e:	b2cb      	uxtb	r3, r1
    3940:	2b0a      	cmp	r3, #10
    3942:	d005      	beq.n	3950 <__sfputc_r+0x24>
    3944:	6813      	ldr	r3, [r2, #0]
    3946:	1c58      	adds	r0, r3, #1
    3948:	6010      	str	r0, [r2, #0]
    394a:	7019      	strb	r1, [r3, #0]
    394c:	b2c8      	uxtb	r0, r1
    394e:	bd10      	pop	{r4, pc}
    3950:	f000 fb04 	bl	3f5c <__swbuf_r>
    3954:	e7fb      	b.n	394e <__sfputc_r+0x22>

00003956 <__sfputs_r>:
    3956:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3958:	0006      	movs	r6, r0
    395a:	000f      	movs	r7, r1
    395c:	0014      	movs	r4, r2
    395e:	18d5      	adds	r5, r2, r3
    3960:	42ac      	cmp	r4, r5
    3962:	d101      	bne.n	3968 <__sfputs_r+0x12>
    3964:	2000      	movs	r0, #0
    3966:	e007      	b.n	3978 <__sfputs_r+0x22>
    3968:	7821      	ldrb	r1, [r4, #0]
    396a:	003a      	movs	r2, r7
    396c:	0030      	movs	r0, r6
    396e:	f7ff ffdd 	bl	392c <__sfputc_r>
    3972:	3401      	adds	r4, #1
    3974:	1c43      	adds	r3, r0, #1
    3976:	d1f3      	bne.n	3960 <__sfputs_r+0xa>
    3978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000397c <_vfiprintf_r>:
    397c:	b5f0      	push	{r4, r5, r6, r7, lr}
    397e:	b09f      	sub	sp, #124	; 0x7c
    3980:	0006      	movs	r6, r0
    3982:	000f      	movs	r7, r1
    3984:	0014      	movs	r4, r2
    3986:	9305      	str	r3, [sp, #20]
    3988:	2800      	cmp	r0, #0
    398a:	d004      	beq.n	3996 <_vfiprintf_r+0x1a>
    398c:	6983      	ldr	r3, [r0, #24]
    398e:	2b00      	cmp	r3, #0
    3990:	d101      	bne.n	3996 <_vfiprintf_r+0x1a>
    3992:	f7ff fec7 	bl	3724 <__sinit>
    3996:	4b7f      	ldr	r3, [pc, #508]	; (3b94 <_vfiprintf_r+0x218>)
    3998:	429f      	cmp	r7, r3
    399a:	d15c      	bne.n	3a56 <_vfiprintf_r+0xda>
    399c:	6877      	ldr	r7, [r6, #4]
    399e:	89bb      	ldrh	r3, [r7, #12]
    39a0:	071b      	lsls	r3, r3, #28
    39a2:	d562      	bpl.n	3a6a <_vfiprintf_r+0xee>
    39a4:	693b      	ldr	r3, [r7, #16]
    39a6:	2b00      	cmp	r3, #0
    39a8:	d05f      	beq.n	3a6a <_vfiprintf_r+0xee>
    39aa:	2300      	movs	r3, #0
    39ac:	ad06      	add	r5, sp, #24
    39ae:	616b      	str	r3, [r5, #20]
    39b0:	3320      	adds	r3, #32
    39b2:	766b      	strb	r3, [r5, #25]
    39b4:	3310      	adds	r3, #16
    39b6:	76ab      	strb	r3, [r5, #26]
    39b8:	9402      	str	r4, [sp, #8]
    39ba:	9c02      	ldr	r4, [sp, #8]
    39bc:	7823      	ldrb	r3, [r4, #0]
    39be:	2b00      	cmp	r3, #0
    39c0:	d15d      	bne.n	3a7e <_vfiprintf_r+0x102>
    39c2:	9b02      	ldr	r3, [sp, #8]
    39c4:	1ae3      	subs	r3, r4, r3
    39c6:	9304      	str	r3, [sp, #16]
    39c8:	d00d      	beq.n	39e6 <_vfiprintf_r+0x6a>
    39ca:	9b04      	ldr	r3, [sp, #16]
    39cc:	9a02      	ldr	r2, [sp, #8]
    39ce:	0039      	movs	r1, r7
    39d0:	0030      	movs	r0, r6
    39d2:	f7ff ffc0 	bl	3956 <__sfputs_r>
    39d6:	1c43      	adds	r3, r0, #1
    39d8:	d100      	bne.n	39dc <_vfiprintf_r+0x60>
    39da:	e0cc      	b.n	3b76 <_vfiprintf_r+0x1fa>
    39dc:	696a      	ldr	r2, [r5, #20]
    39de:	9b04      	ldr	r3, [sp, #16]
    39e0:	4694      	mov	ip, r2
    39e2:	4463      	add	r3, ip
    39e4:	616b      	str	r3, [r5, #20]
    39e6:	7823      	ldrb	r3, [r4, #0]
    39e8:	2b00      	cmp	r3, #0
    39ea:	d100      	bne.n	39ee <_vfiprintf_r+0x72>
    39ec:	e0c3      	b.n	3b76 <_vfiprintf_r+0x1fa>
    39ee:	2201      	movs	r2, #1
    39f0:	2300      	movs	r3, #0
    39f2:	4252      	negs	r2, r2
    39f4:	606a      	str	r2, [r5, #4]
    39f6:	a902      	add	r1, sp, #8
    39f8:	3254      	adds	r2, #84	; 0x54
    39fa:	1852      	adds	r2, r2, r1
    39fc:	3401      	adds	r4, #1
    39fe:	602b      	str	r3, [r5, #0]
    3a00:	60eb      	str	r3, [r5, #12]
    3a02:	60ab      	str	r3, [r5, #8]
    3a04:	7013      	strb	r3, [r2, #0]
    3a06:	65ab      	str	r3, [r5, #88]	; 0x58
    3a08:	7821      	ldrb	r1, [r4, #0]
    3a0a:	2205      	movs	r2, #5
    3a0c:	4862      	ldr	r0, [pc, #392]	; (3b98 <_vfiprintf_r+0x21c>)
    3a0e:	f000 fbcf 	bl	41b0 <memchr>
    3a12:	1c63      	adds	r3, r4, #1
    3a14:	469c      	mov	ip, r3
    3a16:	2800      	cmp	r0, #0
    3a18:	d135      	bne.n	3a86 <_vfiprintf_r+0x10a>
    3a1a:	6829      	ldr	r1, [r5, #0]
    3a1c:	06cb      	lsls	r3, r1, #27
    3a1e:	d504      	bpl.n	3a2a <_vfiprintf_r+0xae>
    3a20:	2353      	movs	r3, #83	; 0x53
    3a22:	aa02      	add	r2, sp, #8
    3a24:	3020      	adds	r0, #32
    3a26:	189b      	adds	r3, r3, r2
    3a28:	7018      	strb	r0, [r3, #0]
    3a2a:	070b      	lsls	r3, r1, #28
    3a2c:	d504      	bpl.n	3a38 <_vfiprintf_r+0xbc>
    3a2e:	2353      	movs	r3, #83	; 0x53
    3a30:	202b      	movs	r0, #43	; 0x2b
    3a32:	aa02      	add	r2, sp, #8
    3a34:	189b      	adds	r3, r3, r2
    3a36:	7018      	strb	r0, [r3, #0]
    3a38:	7823      	ldrb	r3, [r4, #0]
    3a3a:	2b2a      	cmp	r3, #42	; 0x2a
    3a3c:	d02c      	beq.n	3a98 <_vfiprintf_r+0x11c>
    3a3e:	2000      	movs	r0, #0
    3a40:	210a      	movs	r1, #10
    3a42:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3a44:	7822      	ldrb	r2, [r4, #0]
    3a46:	3a30      	subs	r2, #48	; 0x30
    3a48:	2a09      	cmp	r2, #9
    3a4a:	d800      	bhi.n	3a4e <_vfiprintf_r+0xd2>
    3a4c:	e06b      	b.n	3b26 <_vfiprintf_r+0x1aa>
    3a4e:	2800      	cmp	r0, #0
    3a50:	d02a      	beq.n	3aa8 <_vfiprintf_r+0x12c>
    3a52:	9309      	str	r3, [sp, #36]	; 0x24
    3a54:	e028      	b.n	3aa8 <_vfiprintf_r+0x12c>
    3a56:	4b51      	ldr	r3, [pc, #324]	; (3b9c <_vfiprintf_r+0x220>)
    3a58:	429f      	cmp	r7, r3
    3a5a:	d101      	bne.n	3a60 <_vfiprintf_r+0xe4>
    3a5c:	68b7      	ldr	r7, [r6, #8]
    3a5e:	e79e      	b.n	399e <_vfiprintf_r+0x22>
    3a60:	4b4f      	ldr	r3, [pc, #316]	; (3ba0 <_vfiprintf_r+0x224>)
    3a62:	429f      	cmp	r7, r3
    3a64:	d19b      	bne.n	399e <_vfiprintf_r+0x22>
    3a66:	68f7      	ldr	r7, [r6, #12]
    3a68:	e799      	b.n	399e <_vfiprintf_r+0x22>
    3a6a:	0039      	movs	r1, r7
    3a6c:	0030      	movs	r0, r6
    3a6e:	f000 fadf 	bl	4030 <__swsetup_r>
    3a72:	2800      	cmp	r0, #0
    3a74:	d099      	beq.n	39aa <_vfiprintf_r+0x2e>
    3a76:	2001      	movs	r0, #1
    3a78:	4240      	negs	r0, r0
    3a7a:	b01f      	add	sp, #124	; 0x7c
    3a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3a7e:	2b25      	cmp	r3, #37	; 0x25
    3a80:	d09f      	beq.n	39c2 <_vfiprintf_r+0x46>
    3a82:	3401      	adds	r4, #1
    3a84:	e79a      	b.n	39bc <_vfiprintf_r+0x40>
    3a86:	4b44      	ldr	r3, [pc, #272]	; (3b98 <_vfiprintf_r+0x21c>)
    3a88:	6829      	ldr	r1, [r5, #0]
    3a8a:	1ac0      	subs	r0, r0, r3
    3a8c:	2301      	movs	r3, #1
    3a8e:	4083      	lsls	r3, r0
    3a90:	430b      	orrs	r3, r1
    3a92:	602b      	str	r3, [r5, #0]
    3a94:	4664      	mov	r4, ip
    3a96:	e7b7      	b.n	3a08 <_vfiprintf_r+0x8c>
    3a98:	9b05      	ldr	r3, [sp, #20]
    3a9a:	1d18      	adds	r0, r3, #4
    3a9c:	681b      	ldr	r3, [r3, #0]
    3a9e:	9005      	str	r0, [sp, #20]
    3aa0:	2b00      	cmp	r3, #0
    3aa2:	db3a      	blt.n	3b1a <_vfiprintf_r+0x19e>
    3aa4:	9309      	str	r3, [sp, #36]	; 0x24
    3aa6:	4664      	mov	r4, ip
    3aa8:	7823      	ldrb	r3, [r4, #0]
    3aaa:	2b2e      	cmp	r3, #46	; 0x2e
    3aac:	d10b      	bne.n	3ac6 <_vfiprintf_r+0x14a>
    3aae:	7863      	ldrb	r3, [r4, #1]
    3ab0:	1c62      	adds	r2, r4, #1
    3ab2:	2b2a      	cmp	r3, #42	; 0x2a
    3ab4:	d13f      	bne.n	3b36 <_vfiprintf_r+0x1ba>
    3ab6:	9b05      	ldr	r3, [sp, #20]
    3ab8:	3402      	adds	r4, #2
    3aba:	1d1a      	adds	r2, r3, #4
    3abc:	681b      	ldr	r3, [r3, #0]
    3abe:	9205      	str	r2, [sp, #20]
    3ac0:	2b00      	cmp	r3, #0
    3ac2:	db35      	blt.n	3b30 <_vfiprintf_r+0x1b4>
    3ac4:	9307      	str	r3, [sp, #28]
    3ac6:	7821      	ldrb	r1, [r4, #0]
    3ac8:	2203      	movs	r2, #3
    3aca:	4836      	ldr	r0, [pc, #216]	; (3ba4 <_vfiprintf_r+0x228>)
    3acc:	f000 fb70 	bl	41b0 <memchr>
    3ad0:	2800      	cmp	r0, #0
    3ad2:	d007      	beq.n	3ae4 <_vfiprintf_r+0x168>
    3ad4:	4b33      	ldr	r3, [pc, #204]	; (3ba4 <_vfiprintf_r+0x228>)
    3ad6:	682a      	ldr	r2, [r5, #0]
    3ad8:	1ac0      	subs	r0, r0, r3
    3ada:	2340      	movs	r3, #64	; 0x40
    3adc:	4083      	lsls	r3, r0
    3ade:	4313      	orrs	r3, r2
    3ae0:	602b      	str	r3, [r5, #0]
    3ae2:	3401      	adds	r4, #1
    3ae4:	7821      	ldrb	r1, [r4, #0]
    3ae6:	1c63      	adds	r3, r4, #1
    3ae8:	2206      	movs	r2, #6
    3aea:	482f      	ldr	r0, [pc, #188]	; (3ba8 <_vfiprintf_r+0x22c>)
    3aec:	9302      	str	r3, [sp, #8]
    3aee:	7629      	strb	r1, [r5, #24]
    3af0:	f000 fb5e 	bl	41b0 <memchr>
    3af4:	2800      	cmp	r0, #0
    3af6:	d044      	beq.n	3b82 <_vfiprintf_r+0x206>
    3af8:	4b2c      	ldr	r3, [pc, #176]	; (3bac <_vfiprintf_r+0x230>)
    3afa:	2b00      	cmp	r3, #0
    3afc:	d12f      	bne.n	3b5e <_vfiprintf_r+0x1e2>
    3afe:	6829      	ldr	r1, [r5, #0]
    3b00:	9b05      	ldr	r3, [sp, #20]
    3b02:	2207      	movs	r2, #7
    3b04:	05c9      	lsls	r1, r1, #23
    3b06:	d528      	bpl.n	3b5a <_vfiprintf_r+0x1de>
    3b08:	189b      	adds	r3, r3, r2
    3b0a:	4393      	bics	r3, r2
    3b0c:	3308      	adds	r3, #8
    3b0e:	9305      	str	r3, [sp, #20]
    3b10:	696b      	ldr	r3, [r5, #20]
    3b12:	9a03      	ldr	r2, [sp, #12]
    3b14:	189b      	adds	r3, r3, r2
    3b16:	616b      	str	r3, [r5, #20]
    3b18:	e74f      	b.n	39ba <_vfiprintf_r+0x3e>
    3b1a:	425b      	negs	r3, r3
    3b1c:	60eb      	str	r3, [r5, #12]
    3b1e:	2302      	movs	r3, #2
    3b20:	430b      	orrs	r3, r1
    3b22:	602b      	str	r3, [r5, #0]
    3b24:	e7bf      	b.n	3aa6 <_vfiprintf_r+0x12a>
    3b26:	434b      	muls	r3, r1
    3b28:	3401      	adds	r4, #1
    3b2a:	189b      	adds	r3, r3, r2
    3b2c:	2001      	movs	r0, #1
    3b2e:	e789      	b.n	3a44 <_vfiprintf_r+0xc8>
    3b30:	2301      	movs	r3, #1
    3b32:	425b      	negs	r3, r3
    3b34:	e7c6      	b.n	3ac4 <_vfiprintf_r+0x148>
    3b36:	2300      	movs	r3, #0
    3b38:	0014      	movs	r4, r2
    3b3a:	200a      	movs	r0, #10
    3b3c:	001a      	movs	r2, r3
    3b3e:	606b      	str	r3, [r5, #4]
    3b40:	7821      	ldrb	r1, [r4, #0]
    3b42:	3930      	subs	r1, #48	; 0x30
    3b44:	2909      	cmp	r1, #9
    3b46:	d903      	bls.n	3b50 <_vfiprintf_r+0x1d4>
    3b48:	2b00      	cmp	r3, #0
    3b4a:	d0bc      	beq.n	3ac6 <_vfiprintf_r+0x14a>
    3b4c:	9207      	str	r2, [sp, #28]
    3b4e:	e7ba      	b.n	3ac6 <_vfiprintf_r+0x14a>
    3b50:	4342      	muls	r2, r0
    3b52:	3401      	adds	r4, #1
    3b54:	1852      	adds	r2, r2, r1
    3b56:	2301      	movs	r3, #1
    3b58:	e7f2      	b.n	3b40 <_vfiprintf_r+0x1c4>
    3b5a:	3307      	adds	r3, #7
    3b5c:	e7d5      	b.n	3b0a <_vfiprintf_r+0x18e>
    3b5e:	ab05      	add	r3, sp, #20
    3b60:	9300      	str	r3, [sp, #0]
    3b62:	003a      	movs	r2, r7
    3b64:	4b12      	ldr	r3, [pc, #72]	; (3bb0 <_vfiprintf_r+0x234>)
    3b66:	0029      	movs	r1, r5
    3b68:	0030      	movs	r0, r6
    3b6a:	e000      	b.n	3b6e <_vfiprintf_r+0x1f2>
    3b6c:	bf00      	nop
    3b6e:	9003      	str	r0, [sp, #12]
    3b70:	9b03      	ldr	r3, [sp, #12]
    3b72:	3301      	adds	r3, #1
    3b74:	d1cc      	bne.n	3b10 <_vfiprintf_r+0x194>
    3b76:	89bb      	ldrh	r3, [r7, #12]
    3b78:	065b      	lsls	r3, r3, #25
    3b7a:	d500      	bpl.n	3b7e <_vfiprintf_r+0x202>
    3b7c:	e77b      	b.n	3a76 <_vfiprintf_r+0xfa>
    3b7e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    3b80:	e77b      	b.n	3a7a <_vfiprintf_r+0xfe>
    3b82:	ab05      	add	r3, sp, #20
    3b84:	9300      	str	r3, [sp, #0]
    3b86:	003a      	movs	r2, r7
    3b88:	4b09      	ldr	r3, [pc, #36]	; (3bb0 <_vfiprintf_r+0x234>)
    3b8a:	0029      	movs	r1, r5
    3b8c:	0030      	movs	r0, r6
    3b8e:	f000 f87f 	bl	3c90 <_printf_i>
    3b92:	e7ec      	b.n	3b6e <_vfiprintf_r+0x1f2>
    3b94:	000062bc 	.word	0x000062bc
    3b98:	000062fc 	.word	0x000062fc
    3b9c:	000062dc 	.word	0x000062dc
    3ba0:	0000629c 	.word	0x0000629c
    3ba4:	00006302 	.word	0x00006302
    3ba8:	00006306 	.word	0x00006306
    3bac:	00000000 	.word	0x00000000
    3bb0:	00003957 	.word	0x00003957

00003bb4 <_printf_common>:
    3bb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3bb6:	0015      	movs	r5, r2
    3bb8:	9301      	str	r3, [sp, #4]
    3bba:	688a      	ldr	r2, [r1, #8]
    3bbc:	690b      	ldr	r3, [r1, #16]
    3bbe:	9000      	str	r0, [sp, #0]
    3bc0:	000c      	movs	r4, r1
    3bc2:	4293      	cmp	r3, r2
    3bc4:	da00      	bge.n	3bc8 <_printf_common+0x14>
    3bc6:	0013      	movs	r3, r2
    3bc8:	0022      	movs	r2, r4
    3bca:	602b      	str	r3, [r5, #0]
    3bcc:	3243      	adds	r2, #67	; 0x43
    3bce:	7812      	ldrb	r2, [r2, #0]
    3bd0:	2a00      	cmp	r2, #0
    3bd2:	d001      	beq.n	3bd8 <_printf_common+0x24>
    3bd4:	3301      	adds	r3, #1
    3bd6:	602b      	str	r3, [r5, #0]
    3bd8:	6823      	ldr	r3, [r4, #0]
    3bda:	069b      	lsls	r3, r3, #26
    3bdc:	d502      	bpl.n	3be4 <_printf_common+0x30>
    3bde:	682b      	ldr	r3, [r5, #0]
    3be0:	3302      	adds	r3, #2
    3be2:	602b      	str	r3, [r5, #0]
    3be4:	2706      	movs	r7, #6
    3be6:	6823      	ldr	r3, [r4, #0]
    3be8:	401f      	ands	r7, r3
    3bea:	d027      	beq.n	3c3c <_printf_common+0x88>
    3bec:	0023      	movs	r3, r4
    3bee:	3343      	adds	r3, #67	; 0x43
    3bf0:	781b      	ldrb	r3, [r3, #0]
    3bf2:	1e5a      	subs	r2, r3, #1
    3bf4:	4193      	sbcs	r3, r2
    3bf6:	6822      	ldr	r2, [r4, #0]
    3bf8:	0692      	lsls	r2, r2, #26
    3bfa:	d430      	bmi.n	3c5e <_printf_common+0xaa>
    3bfc:	0022      	movs	r2, r4
    3bfe:	9901      	ldr	r1, [sp, #4]
    3c00:	3243      	adds	r2, #67	; 0x43
    3c02:	9800      	ldr	r0, [sp, #0]
    3c04:	9e08      	ldr	r6, [sp, #32]
    3c06:	47b0      	blx	r6
    3c08:	1c43      	adds	r3, r0, #1
    3c0a:	d025      	beq.n	3c58 <_printf_common+0xa4>
    3c0c:	2306      	movs	r3, #6
    3c0e:	6820      	ldr	r0, [r4, #0]
    3c10:	682a      	ldr	r2, [r5, #0]
    3c12:	68e1      	ldr	r1, [r4, #12]
    3c14:	4003      	ands	r3, r0
    3c16:	2500      	movs	r5, #0
    3c18:	2b04      	cmp	r3, #4
    3c1a:	d103      	bne.n	3c24 <_printf_common+0x70>
    3c1c:	1a8d      	subs	r5, r1, r2
    3c1e:	43eb      	mvns	r3, r5
    3c20:	17db      	asrs	r3, r3, #31
    3c22:	401d      	ands	r5, r3
    3c24:	68a3      	ldr	r3, [r4, #8]
    3c26:	6922      	ldr	r2, [r4, #16]
    3c28:	4293      	cmp	r3, r2
    3c2a:	dd01      	ble.n	3c30 <_printf_common+0x7c>
    3c2c:	1a9b      	subs	r3, r3, r2
    3c2e:	18ed      	adds	r5, r5, r3
    3c30:	2700      	movs	r7, #0
    3c32:	42bd      	cmp	r5, r7
    3c34:	d120      	bne.n	3c78 <_printf_common+0xc4>
    3c36:	2000      	movs	r0, #0
    3c38:	e010      	b.n	3c5c <_printf_common+0xa8>
    3c3a:	3701      	adds	r7, #1
    3c3c:	68e3      	ldr	r3, [r4, #12]
    3c3e:	682a      	ldr	r2, [r5, #0]
    3c40:	1a9b      	subs	r3, r3, r2
    3c42:	429f      	cmp	r7, r3
    3c44:	dad2      	bge.n	3bec <_printf_common+0x38>
    3c46:	0022      	movs	r2, r4
    3c48:	2301      	movs	r3, #1
    3c4a:	3219      	adds	r2, #25
    3c4c:	9901      	ldr	r1, [sp, #4]
    3c4e:	9800      	ldr	r0, [sp, #0]
    3c50:	9e08      	ldr	r6, [sp, #32]
    3c52:	47b0      	blx	r6
    3c54:	1c43      	adds	r3, r0, #1
    3c56:	d1f0      	bne.n	3c3a <_printf_common+0x86>
    3c58:	2001      	movs	r0, #1
    3c5a:	4240      	negs	r0, r0
    3c5c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3c5e:	2030      	movs	r0, #48	; 0x30
    3c60:	18e1      	adds	r1, r4, r3
    3c62:	3143      	adds	r1, #67	; 0x43
    3c64:	7008      	strb	r0, [r1, #0]
    3c66:	0021      	movs	r1, r4
    3c68:	1c5a      	adds	r2, r3, #1
    3c6a:	3145      	adds	r1, #69	; 0x45
    3c6c:	7809      	ldrb	r1, [r1, #0]
    3c6e:	18a2      	adds	r2, r4, r2
    3c70:	3243      	adds	r2, #67	; 0x43
    3c72:	3302      	adds	r3, #2
    3c74:	7011      	strb	r1, [r2, #0]
    3c76:	e7c1      	b.n	3bfc <_printf_common+0x48>
    3c78:	0022      	movs	r2, r4
    3c7a:	2301      	movs	r3, #1
    3c7c:	321a      	adds	r2, #26
    3c7e:	9901      	ldr	r1, [sp, #4]
    3c80:	9800      	ldr	r0, [sp, #0]
    3c82:	9e08      	ldr	r6, [sp, #32]
    3c84:	47b0      	blx	r6
    3c86:	1c43      	adds	r3, r0, #1
    3c88:	d0e6      	beq.n	3c58 <_printf_common+0xa4>
    3c8a:	3701      	adds	r7, #1
    3c8c:	e7d1      	b.n	3c32 <_printf_common+0x7e>
	...

00003c90 <_printf_i>:
    3c90:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c92:	b08b      	sub	sp, #44	; 0x2c
    3c94:	9206      	str	r2, [sp, #24]
    3c96:	000a      	movs	r2, r1
    3c98:	3243      	adds	r2, #67	; 0x43
    3c9a:	9307      	str	r3, [sp, #28]
    3c9c:	9005      	str	r0, [sp, #20]
    3c9e:	9204      	str	r2, [sp, #16]
    3ca0:	7e0a      	ldrb	r2, [r1, #24]
    3ca2:	000c      	movs	r4, r1
    3ca4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3ca6:	2a6e      	cmp	r2, #110	; 0x6e
    3ca8:	d100      	bne.n	3cac <_printf_i+0x1c>
    3caa:	e08f      	b.n	3dcc <_printf_i+0x13c>
    3cac:	d817      	bhi.n	3cde <_printf_i+0x4e>
    3cae:	2a63      	cmp	r2, #99	; 0x63
    3cb0:	d02c      	beq.n	3d0c <_printf_i+0x7c>
    3cb2:	d808      	bhi.n	3cc6 <_printf_i+0x36>
    3cb4:	2a00      	cmp	r2, #0
    3cb6:	d100      	bne.n	3cba <_printf_i+0x2a>
    3cb8:	e099      	b.n	3dee <_printf_i+0x15e>
    3cba:	2a58      	cmp	r2, #88	; 0x58
    3cbc:	d054      	beq.n	3d68 <_printf_i+0xd8>
    3cbe:	0026      	movs	r6, r4
    3cc0:	3642      	adds	r6, #66	; 0x42
    3cc2:	7032      	strb	r2, [r6, #0]
    3cc4:	e029      	b.n	3d1a <_printf_i+0x8a>
    3cc6:	2a64      	cmp	r2, #100	; 0x64
    3cc8:	d001      	beq.n	3cce <_printf_i+0x3e>
    3cca:	2a69      	cmp	r2, #105	; 0x69
    3ccc:	d1f7      	bne.n	3cbe <_printf_i+0x2e>
    3cce:	6821      	ldr	r1, [r4, #0]
    3cd0:	681a      	ldr	r2, [r3, #0]
    3cd2:	0608      	lsls	r0, r1, #24
    3cd4:	d523      	bpl.n	3d1e <_printf_i+0x8e>
    3cd6:	1d11      	adds	r1, r2, #4
    3cd8:	6019      	str	r1, [r3, #0]
    3cda:	6815      	ldr	r5, [r2, #0]
    3cdc:	e025      	b.n	3d2a <_printf_i+0x9a>
    3cde:	2a73      	cmp	r2, #115	; 0x73
    3ce0:	d100      	bne.n	3ce4 <_printf_i+0x54>
    3ce2:	e088      	b.n	3df6 <_printf_i+0x166>
    3ce4:	d808      	bhi.n	3cf8 <_printf_i+0x68>
    3ce6:	2a6f      	cmp	r2, #111	; 0x6f
    3ce8:	d029      	beq.n	3d3e <_printf_i+0xae>
    3cea:	2a70      	cmp	r2, #112	; 0x70
    3cec:	d1e7      	bne.n	3cbe <_printf_i+0x2e>
    3cee:	2220      	movs	r2, #32
    3cf0:	6809      	ldr	r1, [r1, #0]
    3cf2:	430a      	orrs	r2, r1
    3cf4:	6022      	str	r2, [r4, #0]
    3cf6:	e003      	b.n	3d00 <_printf_i+0x70>
    3cf8:	2a75      	cmp	r2, #117	; 0x75
    3cfa:	d020      	beq.n	3d3e <_printf_i+0xae>
    3cfc:	2a78      	cmp	r2, #120	; 0x78
    3cfe:	d1de      	bne.n	3cbe <_printf_i+0x2e>
    3d00:	0022      	movs	r2, r4
    3d02:	2178      	movs	r1, #120	; 0x78
    3d04:	3245      	adds	r2, #69	; 0x45
    3d06:	7011      	strb	r1, [r2, #0]
    3d08:	4a6c      	ldr	r2, [pc, #432]	; (3ebc <_printf_i+0x22c>)
    3d0a:	e030      	b.n	3d6e <_printf_i+0xde>
    3d0c:	000e      	movs	r6, r1
    3d0e:	681a      	ldr	r2, [r3, #0]
    3d10:	3642      	adds	r6, #66	; 0x42
    3d12:	1d11      	adds	r1, r2, #4
    3d14:	6019      	str	r1, [r3, #0]
    3d16:	6813      	ldr	r3, [r2, #0]
    3d18:	7033      	strb	r3, [r6, #0]
    3d1a:	2301      	movs	r3, #1
    3d1c:	e079      	b.n	3e12 <_printf_i+0x182>
    3d1e:	0649      	lsls	r1, r1, #25
    3d20:	d5d9      	bpl.n	3cd6 <_printf_i+0x46>
    3d22:	1d11      	adds	r1, r2, #4
    3d24:	6019      	str	r1, [r3, #0]
    3d26:	2300      	movs	r3, #0
    3d28:	5ed5      	ldrsh	r5, [r2, r3]
    3d2a:	2d00      	cmp	r5, #0
    3d2c:	da03      	bge.n	3d36 <_printf_i+0xa6>
    3d2e:	232d      	movs	r3, #45	; 0x2d
    3d30:	9a04      	ldr	r2, [sp, #16]
    3d32:	426d      	negs	r5, r5
    3d34:	7013      	strb	r3, [r2, #0]
    3d36:	4b62      	ldr	r3, [pc, #392]	; (3ec0 <_printf_i+0x230>)
    3d38:	270a      	movs	r7, #10
    3d3a:	9303      	str	r3, [sp, #12]
    3d3c:	e02f      	b.n	3d9e <_printf_i+0x10e>
    3d3e:	6820      	ldr	r0, [r4, #0]
    3d40:	6819      	ldr	r1, [r3, #0]
    3d42:	0605      	lsls	r5, r0, #24
    3d44:	d503      	bpl.n	3d4e <_printf_i+0xbe>
    3d46:	1d08      	adds	r0, r1, #4
    3d48:	6018      	str	r0, [r3, #0]
    3d4a:	680d      	ldr	r5, [r1, #0]
    3d4c:	e005      	b.n	3d5a <_printf_i+0xca>
    3d4e:	0640      	lsls	r0, r0, #25
    3d50:	d5f9      	bpl.n	3d46 <_printf_i+0xb6>
    3d52:	680d      	ldr	r5, [r1, #0]
    3d54:	1d08      	adds	r0, r1, #4
    3d56:	6018      	str	r0, [r3, #0]
    3d58:	b2ad      	uxth	r5, r5
    3d5a:	4b59      	ldr	r3, [pc, #356]	; (3ec0 <_printf_i+0x230>)
    3d5c:	2708      	movs	r7, #8
    3d5e:	9303      	str	r3, [sp, #12]
    3d60:	2a6f      	cmp	r2, #111	; 0x6f
    3d62:	d018      	beq.n	3d96 <_printf_i+0x106>
    3d64:	270a      	movs	r7, #10
    3d66:	e016      	b.n	3d96 <_printf_i+0x106>
    3d68:	3145      	adds	r1, #69	; 0x45
    3d6a:	700a      	strb	r2, [r1, #0]
    3d6c:	4a54      	ldr	r2, [pc, #336]	; (3ec0 <_printf_i+0x230>)
    3d6e:	9203      	str	r2, [sp, #12]
    3d70:	681a      	ldr	r2, [r3, #0]
    3d72:	6821      	ldr	r1, [r4, #0]
    3d74:	1d10      	adds	r0, r2, #4
    3d76:	6018      	str	r0, [r3, #0]
    3d78:	6815      	ldr	r5, [r2, #0]
    3d7a:	0608      	lsls	r0, r1, #24
    3d7c:	d522      	bpl.n	3dc4 <_printf_i+0x134>
    3d7e:	07cb      	lsls	r3, r1, #31
    3d80:	d502      	bpl.n	3d88 <_printf_i+0xf8>
    3d82:	2320      	movs	r3, #32
    3d84:	4319      	orrs	r1, r3
    3d86:	6021      	str	r1, [r4, #0]
    3d88:	2710      	movs	r7, #16
    3d8a:	2d00      	cmp	r5, #0
    3d8c:	d103      	bne.n	3d96 <_printf_i+0x106>
    3d8e:	2320      	movs	r3, #32
    3d90:	6822      	ldr	r2, [r4, #0]
    3d92:	439a      	bics	r2, r3
    3d94:	6022      	str	r2, [r4, #0]
    3d96:	0023      	movs	r3, r4
    3d98:	2200      	movs	r2, #0
    3d9a:	3343      	adds	r3, #67	; 0x43
    3d9c:	701a      	strb	r2, [r3, #0]
    3d9e:	6863      	ldr	r3, [r4, #4]
    3da0:	60a3      	str	r3, [r4, #8]
    3da2:	2b00      	cmp	r3, #0
    3da4:	db5c      	blt.n	3e60 <_printf_i+0x1d0>
    3da6:	2204      	movs	r2, #4
    3da8:	6821      	ldr	r1, [r4, #0]
    3daa:	4391      	bics	r1, r2
    3dac:	6021      	str	r1, [r4, #0]
    3dae:	2d00      	cmp	r5, #0
    3db0:	d158      	bne.n	3e64 <_printf_i+0x1d4>
    3db2:	9e04      	ldr	r6, [sp, #16]
    3db4:	2b00      	cmp	r3, #0
    3db6:	d064      	beq.n	3e82 <_printf_i+0x1f2>
    3db8:	0026      	movs	r6, r4
    3dba:	9b03      	ldr	r3, [sp, #12]
    3dbc:	3642      	adds	r6, #66	; 0x42
    3dbe:	781b      	ldrb	r3, [r3, #0]
    3dc0:	7033      	strb	r3, [r6, #0]
    3dc2:	e05e      	b.n	3e82 <_printf_i+0x1f2>
    3dc4:	0648      	lsls	r0, r1, #25
    3dc6:	d5da      	bpl.n	3d7e <_printf_i+0xee>
    3dc8:	b2ad      	uxth	r5, r5
    3dca:	e7d8      	b.n	3d7e <_printf_i+0xee>
    3dcc:	6809      	ldr	r1, [r1, #0]
    3dce:	681a      	ldr	r2, [r3, #0]
    3dd0:	0608      	lsls	r0, r1, #24
    3dd2:	d505      	bpl.n	3de0 <_printf_i+0x150>
    3dd4:	1d11      	adds	r1, r2, #4
    3dd6:	6019      	str	r1, [r3, #0]
    3dd8:	6813      	ldr	r3, [r2, #0]
    3dda:	6962      	ldr	r2, [r4, #20]
    3ddc:	601a      	str	r2, [r3, #0]
    3dde:	e006      	b.n	3dee <_printf_i+0x15e>
    3de0:	0649      	lsls	r1, r1, #25
    3de2:	d5f7      	bpl.n	3dd4 <_printf_i+0x144>
    3de4:	1d11      	adds	r1, r2, #4
    3de6:	6019      	str	r1, [r3, #0]
    3de8:	6813      	ldr	r3, [r2, #0]
    3dea:	8aa2      	ldrh	r2, [r4, #20]
    3dec:	801a      	strh	r2, [r3, #0]
    3dee:	2300      	movs	r3, #0
    3df0:	9e04      	ldr	r6, [sp, #16]
    3df2:	6123      	str	r3, [r4, #16]
    3df4:	e054      	b.n	3ea0 <_printf_i+0x210>
    3df6:	681a      	ldr	r2, [r3, #0]
    3df8:	1d11      	adds	r1, r2, #4
    3dfa:	6019      	str	r1, [r3, #0]
    3dfc:	6816      	ldr	r6, [r2, #0]
    3dfe:	2100      	movs	r1, #0
    3e00:	6862      	ldr	r2, [r4, #4]
    3e02:	0030      	movs	r0, r6
    3e04:	f000 f9d4 	bl	41b0 <memchr>
    3e08:	2800      	cmp	r0, #0
    3e0a:	d001      	beq.n	3e10 <_printf_i+0x180>
    3e0c:	1b80      	subs	r0, r0, r6
    3e0e:	6060      	str	r0, [r4, #4]
    3e10:	6863      	ldr	r3, [r4, #4]
    3e12:	6123      	str	r3, [r4, #16]
    3e14:	2300      	movs	r3, #0
    3e16:	9a04      	ldr	r2, [sp, #16]
    3e18:	7013      	strb	r3, [r2, #0]
    3e1a:	e041      	b.n	3ea0 <_printf_i+0x210>
    3e1c:	6923      	ldr	r3, [r4, #16]
    3e1e:	0032      	movs	r2, r6
    3e20:	9906      	ldr	r1, [sp, #24]
    3e22:	9805      	ldr	r0, [sp, #20]
    3e24:	9d07      	ldr	r5, [sp, #28]
    3e26:	47a8      	blx	r5
    3e28:	1c43      	adds	r3, r0, #1
    3e2a:	d043      	beq.n	3eb4 <_printf_i+0x224>
    3e2c:	6823      	ldr	r3, [r4, #0]
    3e2e:	2500      	movs	r5, #0
    3e30:	079b      	lsls	r3, r3, #30
    3e32:	d40f      	bmi.n	3e54 <_printf_i+0x1c4>
    3e34:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3e36:	68e0      	ldr	r0, [r4, #12]
    3e38:	4298      	cmp	r0, r3
    3e3a:	da3d      	bge.n	3eb8 <_printf_i+0x228>
    3e3c:	0018      	movs	r0, r3
    3e3e:	e03b      	b.n	3eb8 <_printf_i+0x228>
    3e40:	0022      	movs	r2, r4
    3e42:	2301      	movs	r3, #1
    3e44:	3219      	adds	r2, #25
    3e46:	9906      	ldr	r1, [sp, #24]
    3e48:	9805      	ldr	r0, [sp, #20]
    3e4a:	9e07      	ldr	r6, [sp, #28]
    3e4c:	47b0      	blx	r6
    3e4e:	1c43      	adds	r3, r0, #1
    3e50:	d030      	beq.n	3eb4 <_printf_i+0x224>
    3e52:	3501      	adds	r5, #1
    3e54:	68e3      	ldr	r3, [r4, #12]
    3e56:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3e58:	1a9b      	subs	r3, r3, r2
    3e5a:	429d      	cmp	r5, r3
    3e5c:	dbf0      	blt.n	3e40 <_printf_i+0x1b0>
    3e5e:	e7e9      	b.n	3e34 <_printf_i+0x1a4>
    3e60:	2d00      	cmp	r5, #0
    3e62:	d0a9      	beq.n	3db8 <_printf_i+0x128>
    3e64:	9e04      	ldr	r6, [sp, #16]
    3e66:	0028      	movs	r0, r5
    3e68:	0039      	movs	r1, r7
    3e6a:	f7ff f8ed 	bl	3048 <__aeabi_uidivmod>
    3e6e:	9b03      	ldr	r3, [sp, #12]
    3e70:	3e01      	subs	r6, #1
    3e72:	5c5b      	ldrb	r3, [r3, r1]
    3e74:	0028      	movs	r0, r5
    3e76:	7033      	strb	r3, [r6, #0]
    3e78:	0039      	movs	r1, r7
    3e7a:	f7ff f85f 	bl	2f3c <__udivsi3>
    3e7e:	1e05      	subs	r5, r0, #0
    3e80:	d1f1      	bne.n	3e66 <_printf_i+0x1d6>
    3e82:	2f08      	cmp	r7, #8
    3e84:	d109      	bne.n	3e9a <_printf_i+0x20a>
    3e86:	6823      	ldr	r3, [r4, #0]
    3e88:	07db      	lsls	r3, r3, #31
    3e8a:	d506      	bpl.n	3e9a <_printf_i+0x20a>
    3e8c:	6863      	ldr	r3, [r4, #4]
    3e8e:	6922      	ldr	r2, [r4, #16]
    3e90:	4293      	cmp	r3, r2
    3e92:	dc02      	bgt.n	3e9a <_printf_i+0x20a>
    3e94:	2330      	movs	r3, #48	; 0x30
    3e96:	3e01      	subs	r6, #1
    3e98:	7033      	strb	r3, [r6, #0]
    3e9a:	9b04      	ldr	r3, [sp, #16]
    3e9c:	1b9b      	subs	r3, r3, r6
    3e9e:	6123      	str	r3, [r4, #16]
    3ea0:	9b07      	ldr	r3, [sp, #28]
    3ea2:	aa09      	add	r2, sp, #36	; 0x24
    3ea4:	9300      	str	r3, [sp, #0]
    3ea6:	0021      	movs	r1, r4
    3ea8:	9b06      	ldr	r3, [sp, #24]
    3eaa:	9805      	ldr	r0, [sp, #20]
    3eac:	f7ff fe82 	bl	3bb4 <_printf_common>
    3eb0:	1c43      	adds	r3, r0, #1
    3eb2:	d1b3      	bne.n	3e1c <_printf_i+0x18c>
    3eb4:	2001      	movs	r0, #1
    3eb6:	4240      	negs	r0, r0
    3eb8:	b00b      	add	sp, #44	; 0x2c
    3eba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3ebc:	0000631e 	.word	0x0000631e
    3ec0:	0000630d 	.word	0x0000630d

00003ec4 <__sread>:
    3ec4:	b570      	push	{r4, r5, r6, lr}
    3ec6:	000c      	movs	r4, r1
    3ec8:	250e      	movs	r5, #14
    3eca:	5f49      	ldrsh	r1, [r1, r5]
    3ecc:	f000 f97c 	bl	41c8 <_read_r>
    3ed0:	2800      	cmp	r0, #0
    3ed2:	db03      	blt.n	3edc <__sread+0x18>
    3ed4:	6d63      	ldr	r3, [r4, #84]	; 0x54
    3ed6:	181b      	adds	r3, r3, r0
    3ed8:	6563      	str	r3, [r4, #84]	; 0x54
    3eda:	bd70      	pop	{r4, r5, r6, pc}
    3edc:	89a3      	ldrh	r3, [r4, #12]
    3ede:	4a02      	ldr	r2, [pc, #8]	; (3ee8 <__sread+0x24>)
    3ee0:	4013      	ands	r3, r2
    3ee2:	81a3      	strh	r3, [r4, #12]
    3ee4:	e7f9      	b.n	3eda <__sread+0x16>
    3ee6:	46c0      	nop			; (mov r8, r8)
    3ee8:	ffffefff 	.word	0xffffefff

00003eec <__swrite>:
    3eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3eee:	001f      	movs	r7, r3
    3ef0:	898b      	ldrh	r3, [r1, #12]
    3ef2:	0005      	movs	r5, r0
    3ef4:	000c      	movs	r4, r1
    3ef6:	0016      	movs	r6, r2
    3ef8:	05db      	lsls	r3, r3, #23
    3efa:	d505      	bpl.n	3f08 <__swrite+0x1c>
    3efc:	230e      	movs	r3, #14
    3efe:	5ec9      	ldrsh	r1, [r1, r3]
    3f00:	2200      	movs	r2, #0
    3f02:	2302      	movs	r3, #2
    3f04:	f000 f940 	bl	4188 <_lseek_r>
    3f08:	89a3      	ldrh	r3, [r4, #12]
    3f0a:	4a05      	ldr	r2, [pc, #20]	; (3f20 <__swrite+0x34>)
    3f0c:	0028      	movs	r0, r5
    3f0e:	4013      	ands	r3, r2
    3f10:	81a3      	strh	r3, [r4, #12]
    3f12:	0032      	movs	r2, r6
    3f14:	230e      	movs	r3, #14
    3f16:	5ee1      	ldrsh	r1, [r4, r3]
    3f18:	003b      	movs	r3, r7
    3f1a:	f000 f875 	bl	4008 <_write_r>
    3f1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3f20:	ffffefff 	.word	0xffffefff

00003f24 <__sseek>:
    3f24:	b570      	push	{r4, r5, r6, lr}
    3f26:	000c      	movs	r4, r1
    3f28:	250e      	movs	r5, #14
    3f2a:	5f49      	ldrsh	r1, [r1, r5]
    3f2c:	f000 f92c 	bl	4188 <_lseek_r>
    3f30:	89a3      	ldrh	r3, [r4, #12]
    3f32:	1c42      	adds	r2, r0, #1
    3f34:	d103      	bne.n	3f3e <__sseek+0x1a>
    3f36:	4a05      	ldr	r2, [pc, #20]	; (3f4c <__sseek+0x28>)
    3f38:	4013      	ands	r3, r2
    3f3a:	81a3      	strh	r3, [r4, #12]
    3f3c:	bd70      	pop	{r4, r5, r6, pc}
    3f3e:	2280      	movs	r2, #128	; 0x80
    3f40:	0152      	lsls	r2, r2, #5
    3f42:	4313      	orrs	r3, r2
    3f44:	81a3      	strh	r3, [r4, #12]
    3f46:	6560      	str	r0, [r4, #84]	; 0x54
    3f48:	e7f8      	b.n	3f3c <__sseek+0x18>
    3f4a:	46c0      	nop			; (mov r8, r8)
    3f4c:	ffffefff 	.word	0xffffefff

00003f50 <__sclose>:
    3f50:	b510      	push	{r4, lr}
    3f52:	230e      	movs	r3, #14
    3f54:	5ec9      	ldrsh	r1, [r1, r3]
    3f56:	f000 f8e1 	bl	411c <_close_r>
    3f5a:	bd10      	pop	{r4, pc}

00003f5c <__swbuf_r>:
    3f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3f5e:	0005      	movs	r5, r0
    3f60:	000e      	movs	r6, r1
    3f62:	0014      	movs	r4, r2
    3f64:	2800      	cmp	r0, #0
    3f66:	d004      	beq.n	3f72 <__swbuf_r+0x16>
    3f68:	6983      	ldr	r3, [r0, #24]
    3f6a:	2b00      	cmp	r3, #0
    3f6c:	d101      	bne.n	3f72 <__swbuf_r+0x16>
    3f6e:	f7ff fbd9 	bl	3724 <__sinit>
    3f72:	4b22      	ldr	r3, [pc, #136]	; (3ffc <__swbuf_r+0xa0>)
    3f74:	429c      	cmp	r4, r3
    3f76:	d12d      	bne.n	3fd4 <__swbuf_r+0x78>
    3f78:	686c      	ldr	r4, [r5, #4]
    3f7a:	69a3      	ldr	r3, [r4, #24]
    3f7c:	60a3      	str	r3, [r4, #8]
    3f7e:	89a3      	ldrh	r3, [r4, #12]
    3f80:	071b      	lsls	r3, r3, #28
    3f82:	d531      	bpl.n	3fe8 <__swbuf_r+0x8c>
    3f84:	6923      	ldr	r3, [r4, #16]
    3f86:	2b00      	cmp	r3, #0
    3f88:	d02e      	beq.n	3fe8 <__swbuf_r+0x8c>
    3f8a:	6823      	ldr	r3, [r4, #0]
    3f8c:	6922      	ldr	r2, [r4, #16]
    3f8e:	b2f7      	uxtb	r7, r6
    3f90:	1a98      	subs	r0, r3, r2
    3f92:	6963      	ldr	r3, [r4, #20]
    3f94:	b2f6      	uxtb	r6, r6
    3f96:	4298      	cmp	r0, r3
    3f98:	db05      	blt.n	3fa6 <__swbuf_r+0x4a>
    3f9a:	0021      	movs	r1, r4
    3f9c:	0028      	movs	r0, r5
    3f9e:	f7ff fb53 	bl	3648 <_fflush_r>
    3fa2:	2800      	cmp	r0, #0
    3fa4:	d126      	bne.n	3ff4 <__swbuf_r+0x98>
    3fa6:	68a3      	ldr	r3, [r4, #8]
    3fa8:	3001      	adds	r0, #1
    3faa:	3b01      	subs	r3, #1
    3fac:	60a3      	str	r3, [r4, #8]
    3fae:	6823      	ldr	r3, [r4, #0]
    3fb0:	1c5a      	adds	r2, r3, #1
    3fb2:	6022      	str	r2, [r4, #0]
    3fb4:	701f      	strb	r7, [r3, #0]
    3fb6:	6963      	ldr	r3, [r4, #20]
    3fb8:	4298      	cmp	r0, r3
    3fba:	d004      	beq.n	3fc6 <__swbuf_r+0x6a>
    3fbc:	89a3      	ldrh	r3, [r4, #12]
    3fbe:	07db      	lsls	r3, r3, #31
    3fc0:	d51a      	bpl.n	3ff8 <__swbuf_r+0x9c>
    3fc2:	2e0a      	cmp	r6, #10
    3fc4:	d118      	bne.n	3ff8 <__swbuf_r+0x9c>
    3fc6:	0021      	movs	r1, r4
    3fc8:	0028      	movs	r0, r5
    3fca:	f7ff fb3d 	bl	3648 <_fflush_r>
    3fce:	2800      	cmp	r0, #0
    3fd0:	d012      	beq.n	3ff8 <__swbuf_r+0x9c>
    3fd2:	e00f      	b.n	3ff4 <__swbuf_r+0x98>
    3fd4:	4b0a      	ldr	r3, [pc, #40]	; (4000 <__swbuf_r+0xa4>)
    3fd6:	429c      	cmp	r4, r3
    3fd8:	d101      	bne.n	3fde <__swbuf_r+0x82>
    3fda:	68ac      	ldr	r4, [r5, #8]
    3fdc:	e7cd      	b.n	3f7a <__swbuf_r+0x1e>
    3fde:	4b09      	ldr	r3, [pc, #36]	; (4004 <__swbuf_r+0xa8>)
    3fe0:	429c      	cmp	r4, r3
    3fe2:	d1ca      	bne.n	3f7a <__swbuf_r+0x1e>
    3fe4:	68ec      	ldr	r4, [r5, #12]
    3fe6:	e7c8      	b.n	3f7a <__swbuf_r+0x1e>
    3fe8:	0021      	movs	r1, r4
    3fea:	0028      	movs	r0, r5
    3fec:	f000 f820 	bl	4030 <__swsetup_r>
    3ff0:	2800      	cmp	r0, #0
    3ff2:	d0ca      	beq.n	3f8a <__swbuf_r+0x2e>
    3ff4:	2601      	movs	r6, #1
    3ff6:	4276      	negs	r6, r6
    3ff8:	0030      	movs	r0, r6
    3ffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3ffc:	000062bc 	.word	0x000062bc
    4000:	000062dc 	.word	0x000062dc
    4004:	0000629c 	.word	0x0000629c

00004008 <_write_r>:
    4008:	b570      	push	{r4, r5, r6, lr}
    400a:	0005      	movs	r5, r0
    400c:	0008      	movs	r0, r1
    400e:	0011      	movs	r1, r2
    4010:	2200      	movs	r2, #0
    4012:	4c06      	ldr	r4, [pc, #24]	; (402c <_write_r+0x24>)
    4014:	6022      	str	r2, [r4, #0]
    4016:	001a      	movs	r2, r3
    4018:	f7fd fce8 	bl	19ec <_write>
    401c:	1c43      	adds	r3, r0, #1
    401e:	d103      	bne.n	4028 <_write_r+0x20>
    4020:	6823      	ldr	r3, [r4, #0]
    4022:	2b00      	cmp	r3, #0
    4024:	d000      	beq.n	4028 <_write_r+0x20>
    4026:	602b      	str	r3, [r5, #0]
    4028:	bd70      	pop	{r4, r5, r6, pc}
    402a:	46c0      	nop			; (mov r8, r8)
    402c:	20000198 	.word	0x20000198

00004030 <__swsetup_r>:
    4030:	4b36      	ldr	r3, [pc, #216]	; (410c <__swsetup_r+0xdc>)
    4032:	b570      	push	{r4, r5, r6, lr}
    4034:	681d      	ldr	r5, [r3, #0]
    4036:	0006      	movs	r6, r0
    4038:	000c      	movs	r4, r1
    403a:	2d00      	cmp	r5, #0
    403c:	d005      	beq.n	404a <__swsetup_r+0x1a>
    403e:	69ab      	ldr	r3, [r5, #24]
    4040:	2b00      	cmp	r3, #0
    4042:	d102      	bne.n	404a <__swsetup_r+0x1a>
    4044:	0028      	movs	r0, r5
    4046:	f7ff fb6d 	bl	3724 <__sinit>
    404a:	4b31      	ldr	r3, [pc, #196]	; (4110 <__swsetup_r+0xe0>)
    404c:	429c      	cmp	r4, r3
    404e:	d10f      	bne.n	4070 <__swsetup_r+0x40>
    4050:	686c      	ldr	r4, [r5, #4]
    4052:	230c      	movs	r3, #12
    4054:	5ee2      	ldrsh	r2, [r4, r3]
    4056:	b293      	uxth	r3, r2
    4058:	0719      	lsls	r1, r3, #28
    405a:	d42d      	bmi.n	40b8 <__swsetup_r+0x88>
    405c:	06d9      	lsls	r1, r3, #27
    405e:	d411      	bmi.n	4084 <__swsetup_r+0x54>
    4060:	2309      	movs	r3, #9
    4062:	2001      	movs	r0, #1
    4064:	6033      	str	r3, [r6, #0]
    4066:	3337      	adds	r3, #55	; 0x37
    4068:	4313      	orrs	r3, r2
    406a:	81a3      	strh	r3, [r4, #12]
    406c:	4240      	negs	r0, r0
    406e:	bd70      	pop	{r4, r5, r6, pc}
    4070:	4b28      	ldr	r3, [pc, #160]	; (4114 <__swsetup_r+0xe4>)
    4072:	429c      	cmp	r4, r3
    4074:	d101      	bne.n	407a <__swsetup_r+0x4a>
    4076:	68ac      	ldr	r4, [r5, #8]
    4078:	e7eb      	b.n	4052 <__swsetup_r+0x22>
    407a:	4b27      	ldr	r3, [pc, #156]	; (4118 <__swsetup_r+0xe8>)
    407c:	429c      	cmp	r4, r3
    407e:	d1e8      	bne.n	4052 <__swsetup_r+0x22>
    4080:	68ec      	ldr	r4, [r5, #12]
    4082:	e7e6      	b.n	4052 <__swsetup_r+0x22>
    4084:	075b      	lsls	r3, r3, #29
    4086:	d513      	bpl.n	40b0 <__swsetup_r+0x80>
    4088:	6b61      	ldr	r1, [r4, #52]	; 0x34
    408a:	2900      	cmp	r1, #0
    408c:	d008      	beq.n	40a0 <__swsetup_r+0x70>
    408e:	0023      	movs	r3, r4
    4090:	3344      	adds	r3, #68	; 0x44
    4092:	4299      	cmp	r1, r3
    4094:	d002      	beq.n	409c <__swsetup_r+0x6c>
    4096:	0030      	movs	r0, r6
    4098:	f7ff f850 	bl	313c <_free_r>
    409c:	2300      	movs	r3, #0
    409e:	6363      	str	r3, [r4, #52]	; 0x34
    40a0:	2224      	movs	r2, #36	; 0x24
    40a2:	89a3      	ldrh	r3, [r4, #12]
    40a4:	4393      	bics	r3, r2
    40a6:	81a3      	strh	r3, [r4, #12]
    40a8:	2300      	movs	r3, #0
    40aa:	6063      	str	r3, [r4, #4]
    40ac:	6923      	ldr	r3, [r4, #16]
    40ae:	6023      	str	r3, [r4, #0]
    40b0:	2308      	movs	r3, #8
    40b2:	89a2      	ldrh	r2, [r4, #12]
    40b4:	4313      	orrs	r3, r2
    40b6:	81a3      	strh	r3, [r4, #12]
    40b8:	6923      	ldr	r3, [r4, #16]
    40ba:	2b00      	cmp	r3, #0
    40bc:	d10b      	bne.n	40d6 <__swsetup_r+0xa6>
    40be:	21a0      	movs	r1, #160	; 0xa0
    40c0:	2280      	movs	r2, #128	; 0x80
    40c2:	89a3      	ldrh	r3, [r4, #12]
    40c4:	0089      	lsls	r1, r1, #2
    40c6:	0092      	lsls	r2, r2, #2
    40c8:	400b      	ands	r3, r1
    40ca:	4293      	cmp	r3, r2
    40cc:	d003      	beq.n	40d6 <__swsetup_r+0xa6>
    40ce:	0021      	movs	r1, r4
    40d0:	0030      	movs	r0, r6
    40d2:	f7ff fbe5 	bl	38a0 <__smakebuf_r>
    40d6:	2301      	movs	r3, #1
    40d8:	89a2      	ldrh	r2, [r4, #12]
    40da:	4013      	ands	r3, r2
    40dc:	d011      	beq.n	4102 <__swsetup_r+0xd2>
    40de:	2300      	movs	r3, #0
    40e0:	60a3      	str	r3, [r4, #8]
    40e2:	6963      	ldr	r3, [r4, #20]
    40e4:	425b      	negs	r3, r3
    40e6:	61a3      	str	r3, [r4, #24]
    40e8:	2000      	movs	r0, #0
    40ea:	6923      	ldr	r3, [r4, #16]
    40ec:	4283      	cmp	r3, r0
    40ee:	d1be      	bne.n	406e <__swsetup_r+0x3e>
    40f0:	230c      	movs	r3, #12
    40f2:	5ee2      	ldrsh	r2, [r4, r3]
    40f4:	0613      	lsls	r3, r2, #24
    40f6:	d5ba      	bpl.n	406e <__swsetup_r+0x3e>
    40f8:	2340      	movs	r3, #64	; 0x40
    40fa:	4313      	orrs	r3, r2
    40fc:	81a3      	strh	r3, [r4, #12]
    40fe:	3801      	subs	r0, #1
    4100:	e7b5      	b.n	406e <__swsetup_r+0x3e>
    4102:	0792      	lsls	r2, r2, #30
    4104:	d400      	bmi.n	4108 <__swsetup_r+0xd8>
    4106:	6963      	ldr	r3, [r4, #20]
    4108:	60a3      	str	r3, [r4, #8]
    410a:	e7ed      	b.n	40e8 <__swsetup_r+0xb8>
    410c:	20000010 	.word	0x20000010
    4110:	000062bc 	.word	0x000062bc
    4114:	000062dc 	.word	0x000062dc
    4118:	0000629c 	.word	0x0000629c

0000411c <_close_r>:
    411c:	2300      	movs	r3, #0
    411e:	b570      	push	{r4, r5, r6, lr}
    4120:	4c06      	ldr	r4, [pc, #24]	; (413c <_close_r+0x20>)
    4122:	0005      	movs	r5, r0
    4124:	0008      	movs	r0, r1
    4126:	6023      	str	r3, [r4, #0]
    4128:	f7fd fc9a 	bl	1a60 <_close>
    412c:	1c43      	adds	r3, r0, #1
    412e:	d103      	bne.n	4138 <_close_r+0x1c>
    4130:	6823      	ldr	r3, [r4, #0]
    4132:	2b00      	cmp	r3, #0
    4134:	d000      	beq.n	4138 <_close_r+0x1c>
    4136:	602b      	str	r3, [r5, #0]
    4138:	bd70      	pop	{r4, r5, r6, pc}
    413a:	46c0      	nop			; (mov r8, r8)
    413c:	20000198 	.word	0x20000198

00004140 <_fstat_r>:
    4140:	2300      	movs	r3, #0
    4142:	b570      	push	{r4, r5, r6, lr}
    4144:	4c06      	ldr	r4, [pc, #24]	; (4160 <_fstat_r+0x20>)
    4146:	0005      	movs	r5, r0
    4148:	0008      	movs	r0, r1
    414a:	0011      	movs	r1, r2
    414c:	6023      	str	r3, [r4, #0]
    414e:	f7fd fc8a 	bl	1a66 <_fstat>
    4152:	1c43      	adds	r3, r0, #1
    4154:	d103      	bne.n	415e <_fstat_r+0x1e>
    4156:	6823      	ldr	r3, [r4, #0]
    4158:	2b00      	cmp	r3, #0
    415a:	d000      	beq.n	415e <_fstat_r+0x1e>
    415c:	602b      	str	r3, [r5, #0]
    415e:	bd70      	pop	{r4, r5, r6, pc}
    4160:	20000198 	.word	0x20000198

00004164 <_isatty_r>:
    4164:	2300      	movs	r3, #0
    4166:	b570      	push	{r4, r5, r6, lr}
    4168:	4c06      	ldr	r4, [pc, #24]	; (4184 <_isatty_r+0x20>)
    416a:	0005      	movs	r5, r0
    416c:	0008      	movs	r0, r1
    416e:	6023      	str	r3, [r4, #0]
    4170:	f7fd fc7e 	bl	1a70 <_isatty>
    4174:	1c43      	adds	r3, r0, #1
    4176:	d103      	bne.n	4180 <_isatty_r+0x1c>
    4178:	6823      	ldr	r3, [r4, #0]
    417a:	2b00      	cmp	r3, #0
    417c:	d000      	beq.n	4180 <_isatty_r+0x1c>
    417e:	602b      	str	r3, [r5, #0]
    4180:	bd70      	pop	{r4, r5, r6, pc}
    4182:	46c0      	nop			; (mov r8, r8)
    4184:	20000198 	.word	0x20000198

00004188 <_lseek_r>:
    4188:	b570      	push	{r4, r5, r6, lr}
    418a:	0005      	movs	r5, r0
    418c:	0008      	movs	r0, r1
    418e:	0011      	movs	r1, r2
    4190:	2200      	movs	r2, #0
    4192:	4c06      	ldr	r4, [pc, #24]	; (41ac <_lseek_r+0x24>)
    4194:	6022      	str	r2, [r4, #0]
    4196:	001a      	movs	r2, r3
    4198:	f7fd fc6c 	bl	1a74 <_lseek>
    419c:	1c43      	adds	r3, r0, #1
    419e:	d103      	bne.n	41a8 <_lseek_r+0x20>
    41a0:	6823      	ldr	r3, [r4, #0]
    41a2:	2b00      	cmp	r3, #0
    41a4:	d000      	beq.n	41a8 <_lseek_r+0x20>
    41a6:	602b      	str	r3, [r5, #0]
    41a8:	bd70      	pop	{r4, r5, r6, pc}
    41aa:	46c0      	nop			; (mov r8, r8)
    41ac:	20000198 	.word	0x20000198

000041b0 <memchr>:
    41b0:	b2c9      	uxtb	r1, r1
    41b2:	1882      	adds	r2, r0, r2
    41b4:	4290      	cmp	r0, r2
    41b6:	d101      	bne.n	41bc <memchr+0xc>
    41b8:	2000      	movs	r0, #0
    41ba:	4770      	bx	lr
    41bc:	7803      	ldrb	r3, [r0, #0]
    41be:	428b      	cmp	r3, r1
    41c0:	d0fb      	beq.n	41ba <memchr+0xa>
    41c2:	3001      	adds	r0, #1
    41c4:	e7f6      	b.n	41b4 <memchr+0x4>
	...

000041c8 <_read_r>:
    41c8:	b570      	push	{r4, r5, r6, lr}
    41ca:	0005      	movs	r5, r0
    41cc:	0008      	movs	r0, r1
    41ce:	0011      	movs	r1, r2
    41d0:	2200      	movs	r2, #0
    41d2:	4c06      	ldr	r4, [pc, #24]	; (41ec <_read_r+0x24>)
    41d4:	6022      	str	r2, [r4, #0]
    41d6:	001a      	movs	r2, r3
    41d8:	f7fd fbe6 	bl	19a8 <_read>
    41dc:	1c43      	adds	r3, r0, #1
    41de:	d103      	bne.n	41e8 <_read_r+0x20>
    41e0:	6823      	ldr	r3, [r4, #0]
    41e2:	2b00      	cmp	r3, #0
    41e4:	d000      	beq.n	41e8 <_read_r+0x20>
    41e6:	602b      	str	r3, [r5, #0]
    41e8:	bd70      	pop	{r4, r5, r6, pc}
    41ea:	46c0      	nop			; (mov r8, r8)
    41ec:	20000198 	.word	0x20000198
    41f0:	0000043a 	.word	0x0000043a
    41f4:	00000686 	.word	0x00000686
    41f8:	00000686 	.word	0x00000686
    41fc:	00000686 	.word	0x00000686
    4200:	00000686 	.word	0x00000686
    4204:	00000686 	.word	0x00000686
    4208:	00000686 	.word	0x00000686
    420c:	00000686 	.word	0x00000686
    4210:	00000686 	.word	0x00000686
    4214:	00000686 	.word	0x00000686
    4218:	00000686 	.word	0x00000686
    421c:	00000686 	.word	0x00000686
    4220:	00000686 	.word	0x00000686
    4224:	00000686 	.word	0x00000686
    4228:	00000686 	.word	0x00000686
    422c:	00000686 	.word	0x00000686
    4230:	00000422 	.word	0x00000422
    4234:	00000686 	.word	0x00000686
    4238:	00000686 	.word	0x00000686
    423c:	00000686 	.word	0x00000686
    4240:	00000686 	.word	0x00000686
    4244:	00000686 	.word	0x00000686
    4248:	00000686 	.word	0x00000686
    424c:	00000686 	.word	0x00000686
    4250:	00000686 	.word	0x00000686
    4254:	00000686 	.word	0x00000686
    4258:	00000686 	.word	0x00000686
    425c:	00000686 	.word	0x00000686
    4260:	00000686 	.word	0x00000686
    4264:	00000686 	.word	0x00000686
    4268:	00000686 	.word	0x00000686
    426c:	00000686 	.word	0x00000686
    4270:	00000432 	.word	0x00000432
    4274:	00000686 	.word	0x00000686
    4278:	00000686 	.word	0x00000686
    427c:	00000686 	.word	0x00000686
    4280:	00000686 	.word	0x00000686
    4284:	00000686 	.word	0x00000686
    4288:	00000686 	.word	0x00000686
    428c:	00000686 	.word	0x00000686
    4290:	00000686 	.word	0x00000686
    4294:	00000686 	.word	0x00000686
    4298:	00000686 	.word	0x00000686
    429c:	00000686 	.word	0x00000686
    42a0:	00000686 	.word	0x00000686
    42a4:	00000686 	.word	0x00000686
    42a8:	00000686 	.word	0x00000686
    42ac:	00000686 	.word	0x00000686
    42b0:	0000042a 	.word	0x0000042a
    42b4:	00000442 	.word	0x00000442
    42b8:	0000040a 	.word	0x0000040a
    42bc:	0000041a 	.word	0x0000041a
    42c0:	00000412 	.word	0x00000412
    42c4:	00000002 	.word	0x00000002
    42c8:	00000003 	.word	0x00000003
    42cc:	00000028 	.word	0x00000028
    42d0:	00000029 	.word	0x00000029
    42d4:	00000004 	.word	0x00000004
    42d8:	00000005 	.word	0x00000005
    42dc:	00000006 	.word	0x00000006
    42e0:	00000007 	.word	0x00000007
    42e4:	00000020 	.word	0x00000020
    42e8:	00000021 	.word	0x00000021
    42ec:	00000022 	.word	0x00000022
    42f0:	00000023 	.word	0x00000023
    42f4:	00000024 	.word	0x00000024
    42f8:	00000025 	.word	0x00000025
    42fc:	00000026 	.word	0x00000026
    4300:	00000027 	.word	0x00000027
    4304:	00000008 	.word	0x00000008
    4308:	00000009 	.word	0x00000009
    430c:	0000000a 	.word	0x0000000a
    4310:	0000000b 	.word	0x0000000b
    4314:	42000800 	.word	0x42000800
    4318:	42000c00 	.word	0x42000c00
    431c:	42001000 	.word	0x42001000
    4320:	42001400 	.word	0x42001400
    4324:	42001800 	.word	0x42001800
    4328:	42001c00 	.word	0x42001c00
    432c:	00001136 	.word	0x00001136
    4330:	00001132 	.word	0x00001132
    4334:	00001132 	.word	0x00001132
    4338:	00001198 	.word	0x00001198
    433c:	00001198 	.word	0x00001198
    4340:	0000114a 	.word	0x0000114a
    4344:	0000113c 	.word	0x0000113c
    4348:	00001150 	.word	0x00001150
    434c:	00001186 	.word	0x00001186
    4350:	00001358 	.word	0x00001358
    4354:	00001338 	.word	0x00001338
    4358:	00001338 	.word	0x00001338
    435c:	000013c4 	.word	0x000013c4
    4360:	0000134a 	.word	0x0000134a
    4364:	00001366 	.word	0x00001366
    4368:	0000133c 	.word	0x0000133c
    436c:	00001374 	.word	0x00001374
    4370:	000013b4 	.word	0x000013b4
	...
    46b4:	3f30ff03 	.word	0x3f30ff03
    46b8:	000000f3 	.word	0x000000f3
	...
    46c8:	3f00f003 	.word	0x3f00f003
    46cc:	00000000 	.word	0x00000000
    46d0:	f0030000 	.word	0xf0030000
    46d4:	00003f00 	.word	0x00003f00
    46d8:	00000000 	.word	0x00000000
    46dc:	03000000 	.word	0x03000000
    46e0:	f0ff0330 	.word	0xf0ff0330
    46e4:	3300ff3f 	.word	0x3300ff3f
    46e8:	03300300 	.word	0x03300300
    46ec:	ff3ff0ff 	.word	0xff3ff0ff
    46f0:	03003300 	.word	0x03003300
    46f4:	00000030 	.word	0x00000030
    46f8:	cc000003 	.word	0xcc000003
    46fc:	03cc0cc0 	.word	0x03cc0cc0
    4700:	ff3ff0ff 	.word	0xff3ff0ff
    4704:	0cc0cc00 	.word	0x0cc0cc00
    4708:	000300cc 	.word	0x000300cc
    470c:	00000000 	.word	0x00000000
    4710:	03031c00 	.word	0x03031c00
    4714:	380ee030 	.word	0x380ee030
    4718:	03000e00 	.word	0x03000e00
    471c:	c0e10080 	.word	0xc0e10080
    4720:	00003338 	.word	0x00003338
    4724:	000000e0 	.word	0x000000e0
    4728:	3c0f0000 	.word	0x3c0f0000
    472c:	30300c03 	.word	0x30300c03
    4730:	300c03c3 	.word	0x300c03c3
    4734:	f300c330 	.word	0xf300c330
    4738:	000c0030 	.word	0x000c0030
    473c:	33003003 	.word	0x33003003
	...
    4748:	f0000003 	.word	0xf0000003
    474c:	03003c00 	.word	0x03003c00
	...
    4760:	00f00300 	.word	0x00f00300
    4764:	0c0c003f 	.word	0x0c0c003f
    4768:	00300003 	.word	0x00300003
	...
    477c:	0c300003 	.word	0x0c300003
    4780:	003f000c 	.word	0x003f000c
    4784:	0000f003 	.word	0x0000f003
    4788:	00000000 	.word	0x00000000
    478c:	c0000000 	.word	0xc0000000
    4790:	03c0cc00 	.word	0x03c0cc00
    4794:	000c00f0 	.word	0x000c00f0
    4798:	3f00c000 	.word	0x3f00c000
    479c:	00cc0c00 	.word	0x00cc0c00
    47a0:	0000000c 	.word	0x0000000c
    47a4:	00000000 	.word	0x00000000
    47a8:	000c00c0 	.word	0x000c00c0
    47ac:	0c00c000 	.word	0x0c00c000
    47b0:	00fc0f00 	.word	0x00fc0f00
    47b4:	c000000c 	.word	0xc000000c
    47b8:	00000c00 	.word	0x00000c00
    47bc:	000000c0 	.word	0x000000c0
    47c0:	00000000 	.word	0x00000000
    47c4:	0003000c 	.word	0x0003000c
    47c8:	0c00f000 	.word	0x0c00f000
	...
    47d8:	00c00000 	.word	0x00c00000
    47dc:	c000000c 	.word	0xc000000c
    47e0:	00000c00 	.word	0x00000c00
    47e4:	000c00c0 	.word	0x000c00c0
    47e8:	0c00c000 	.word	0x0c00c000
    47ec:	00c00000 	.word	0x00c00000
	...
    47f8:	f000000f 	.word	0xf000000f
    47fc:	00000f00 	.word	0x00000f00
	...
    480c:	c0000003 	.word	0xc0000003
    4810:	0c003000 	.word	0x0c003000
    4814:	00000300 	.word	0x00000300
    4818:	003000c0 	.word	0x003000c0
	...
    4824:	ff00f003 	.word	0xff00f003
    4828:	030f3cc0 	.word	0x030f3cc0
    482c:	03303000 	.word	0x03303000
    4830:	3c300003 	.word	0x3c300003
    4834:	c0ff000f 	.word	0xc0ff000f
    4838:	0000f003 	.word	0x0000f003
    483c:	00000000 	.word	0x00000000
    4840:	030c3060 	.word	0x030c3060
    4844:	3f308001 	.word	0x3f308001
    4848:	f0ff03ff 	.word	0xf0ff03ff
    484c:	00000300 	.word	0x00000300
    4850:	00000000 	.word	0x00000000
    4854:	0f0c0000 	.word	0x0f0c0000
    4858:	30f0c303 	.word	0x30f0c303
    485c:	30030333 	.word	0x30030333
    4860:	0c03c330 	.word	0x0c03c330
    4864:	00c33030 	.word	0x00c33030
    4868:	030f30f0 	.word	0x030f30f0
    486c:	30000000 	.word	0x30000000
    4870:	7000030c 	.word	0x7000030c
    4874:	00030330 	.word	0x00030330
    4878:	03c33130 	.word	0x03c33130
    487c:	c33e303c 	.word	0xc33e303c
    4880:	30c0c303 	.word	0x30c0c303
    4884:	0000003c 	.word	0x0000003c
    4888:	0f007000 	.word	0x0f007000
    488c:	00b00300 	.word	0x00b00300
    4890:	301c0063 	.word	0x301c0063
    4894:	00f0ff03 	.word	0x00f0ff03
    4898:	00030030 	.word	0x00030030
    489c:	00003000 	.word	0x00003000
    48a0:	03cc3f00 	.word	0x03cc3f00
    48a4:	033330fc 	.word	0x033330fc
    48a8:	33303003 	.word	0x33303003
    48ac:	30300303 	.word	0x30300303
    48b0:	0f030333 	.word	0x0f030333
    48b4:	00fc30c0 	.word	0x00fc30c0
    48b8:	fc030000 	.word	0xfc030000
    48bc:	3cf0ff00 	.word	0x3cf0ff00
    48c0:	300c03c3 	.word	0x300c03c3
    48c4:	0c03c330 	.word	0x0c03c330
    48c8:	00c33030 	.word	0x00c33030
    48cc:	3c00c003 	.word	0x3c00c003
    48d0:	30000000 	.word	0x30000000
    48d4:	00000300 	.word	0x00000300
    48d8:	00030f30 	.word	0x00030f30
    48dc:	033030f0 	.word	0x033030f0
    48e0:	0033000c 	.word	0x0033000c
    48e4:	3c00c003 	.word	0x3c00c003
    48e8:	00000000 	.word	0x00000000
    48ec:	f3003c0f 	.word	0xf3003c0f
    48f0:	03c330c0 	.word	0x03c330c0
    48f4:	c330300c 	.word	0xc330300c
    48f8:	30300c03 	.word	0x30300c03
    48fc:	c0f300c3 	.word	0xc0f300c3
    4900:	00003c0f 	.word	0x00003c0f
    4904:	03000f00 	.word	0x03000f00
    4908:	c33030fc 	.word	0xc33030fc
    490c:	30300c03 	.word	0x30300c03
    4910:	300c03c3 	.word	0x300c03c3
    4914:	ff000e33 	.word	0xff000e33
    4918:	00f00fc0 	.word	0x00f00fc0
    491c:	00000000 	.word	0x00000000
    4920:	0f000000 	.word	0x0f000000
    4924:	f0f0000f 	.word	0xf0f0000f
    4928:	00000f0f 	.word	0x00000f0f
	...
    4938:	0c000000 	.word	0x0c000000
    493c:	f0000f0f 	.word	0xf0000f0f
    4940:	000c0ff0 	.word	0x000c0ff0
	...
    4950:	0c00c000 	.word	0x0c00c000
    4954:	00300300 	.word	0x00300300
    4958:	0c0c0033 	.word	0x0c0c0033
    495c:	30c0c000 	.word	0x30c0c000
    4960:	30000303 	.word	0x30000303
    4964:	00000000 	.word	0x00000000
    4968:	00300300 	.word	0x00300300
    496c:	30030033 	.word	0x30030033
    4970:	03003300 	.word	0x03003300
    4974:	00330030 	.word	0x00330030
    4978:	33003003 	.word	0x33003003
    497c:	00300300 	.word	0x00300300
    4980:	03300000 	.word	0x03300000
    4984:	0c300003 	.word	0x0c300003
    4988:	c0c0000c 	.word	0xc0c0000c
    498c:	33003003 	.word	0x33003003
    4990:	00c00000 	.word	0x00c00000
    4994:	0000000c 	.word	0x0000000c
    4998:	0c000000 	.word	0x0c000000
    499c:	00c00300 	.word	0x00c00300
    49a0:	0f030030 	.word	0x0f030030
    49a4:	03f33030 	.word	0x03f33030
    49a8:	00330030 	.word	0x00330030
    49ac:	0c00c000 	.word	0x0c00c000
    49b0:	00000000 	.word	0x00000000
    49b4:	ff03fc0f 	.word	0xff03fc0f
    49b8:	030330f0 	.word	0x030330f0
    49bc:	3333300c 	.word	0x3333300c
    49c0:	31303303 	.word	0x31303303
    49c4:	00ff00e3 	.word	0x00ff00e3
    49c8:	0000f00f 	.word	0x0000f00f
    49cc:	00ff0000 	.word	0x00ff0000
    49d0:	300ff03f 	.word	0x300ff03f
    49d4:	3000c301 	.word	0x3000c301
    49d8:	00c30130 	.word	0x00c30130
    49dc:	3f00300f 	.word	0x3f00300f
    49e0:	00ff00f0 	.word	0x00ff00f0
    49e4:	03300000 	.word	0x03300000
    49e8:	3ff0ff03 	.word	0x3ff0ff03
    49ec:	300c03ff 	.word	0x300c03ff
    49f0:	0c03c330 	.word	0x0c03c330
    49f4:	00c33030 	.word	0x00c33030
    49f8:	3c0fc0f3 	.word	0x3c0fc0f3
    49fc:	03000000 	.word	0x03000000
    4a00:	c0ff00f0 	.word	0xc0ff00f0
    4a04:	00030f3c 	.word	0x00030f3c
    4a08:	03033030 	.word	0x03033030
    4a0c:	03303000 	.word	0x03303000
    4a10:	0cc0c000 	.word	0x0cc0c000
    4a14:	0000000c 	.word	0x0000000c
    4a18:	ff030330 	.word	0xff030330
    4a1c:	03ff3ff0 	.word	0x03ff3ff0
    4a20:	03303000 	.word	0x03303000
    4a24:	0ef0c003 	.word	0x0ef0c003
    4a28:	003f001c 	.word	0x003f001c
    4a2c:	0000e001 	.word	0x0000e001
    4a30:	03ff3f00 	.word	0x03ff3f00
    4a34:	c330f0ff 	.word	0xc330f0ff
    4a38:	30300c03 	.word	0x30300c03
    4a3c:	300c03c3 	.word	0x300c03c3
    4a40:	00030330 	.word	0x00030330
    4a44:	00033030 	.word	0x00033030
    4a48:	ff3f0000 	.word	0xff3f0000
    4a4c:	30f0ff03 	.word	0x30f0ff03
    4a50:	000c03c0 	.word	0x000c03c0
    4a54:	0c03c030 	.word	0x0c03c030
    4a58:	03003000 	.word	0x03003000
    4a5c:	00300000 	.word	0x00300000
    4a60:	03000000 	.word	0x03000000
    4a64:	c0ff00f0 	.word	0xc0ff00f0
    4a68:	00030f3c 	.word	0x00030f3c
    4a6c:	03033030 	.word	0x03033030
    4a70:	33303003 	.word	0x33303003
    4a74:	0cc0c300 	.word	0x0cc0c300
    4a78:	0000003c 	.word	0x0000003c
    4a7c:	ff03ff3f 	.word	0xff03ff3f
    4a80:	00c000f0 	.word	0x00c000f0
    4a84:	c000000c 	.word	0xc000000c
    4a88:	00000c00 	.word	0x00000c00
    4a8c:	f0ff03c0 	.word	0xf0ff03c0
    4a90:	0000ff3f 	.word	0x0000ff3f
    4a94:	03000000 	.word	0x03000000
    4a98:	03303000 	.word	0x03303000
    4a9c:	3ff0ff03 	.word	0x3ff0ff03
    4aa0:	300003ff 	.word	0x300003ff
    4aa4:	00000330 	.word	0x00000330
    4aa8:	00000000 	.word	0x00000000
    4aac:	0c000000 	.word	0x0c000000
    4ab0:	00f00000 	.word	0x00f00000
    4ab4:	30000303 	.word	0x30000303
    4ab8:	ff030330 	.word	0xff030330
    4abc:	03fc3ff0 	.word	0x03fc3ff0
    4ac0:	00300000 	.word	0x00300000
    4ac4:	3f000000 	.word	0x3f000000
    4ac8:	f0ff03ff 	.word	0xf0ff03ff
    4acc:	3300c000 	.word	0x3300c000
    4ad0:	00300300 	.word	0x00300300
    4ad4:	0c0cc0c0 	.word	0x0c0cc0c0
    4ad8:	30300003 	.word	0x30300003
    4adc:	00000003 	.word	0x00000003
    4ae0:	ff03ff3f 	.word	0xff03ff3f
    4ae4:	000300f0 	.word	0x000300f0
    4ae8:	03003000 	.word	0x03003000
    4aec:	00300000 	.word	0x00300000
    4af0:	30000003 	.word	0x30000003
    4af4:	00000300 	.word	0x00000300
    4af8:	03ff3f00 	.word	0x03ff3f00
    4afc:	001cf0ff 	.word	0x001cf0ff
    4b00:	03007000 	.word	0x03007000
    4b04:	007000c0 	.word	0x007000c0
    4b08:	ff03001c 	.word	0xff03001c
    4b0c:	00ff3ff0 	.word	0x00ff3ff0
    4b10:	ff3f0000 	.word	0xff3f0000
    4b14:	1cf0ff03 	.word	0x1cf0ff03
    4b18:	00700000 	.word	0x00700000
    4b1c:	0700c001 	.word	0x0700c001
    4b20:	031c0000 	.word	0x031c0000
    4b24:	ff3ff0ff 	.word	0xff3ff0ff
    4b28:	0f000000 	.word	0x0f000000
    4b2c:	c0ff00fc 	.word	0xc0ff00fc
    4b30:	00030738 	.word	0x00030738
    4b34:	03033030 	.word	0x03033030
    4b38:	07383000 	.word	0x07383000
    4b3c:	0fc0ff00 	.word	0x0fc0ff00
    4b40:	000000fc 	.word	0x000000fc
    4b44:	ff03ff3f 	.word	0xff03ff3f
    4b48:	03c030f0 	.word	0x03c030f0
    4b4c:	c030000c 	.word	0xc030000c
    4b50:	30000c03 	.word	0x30000c03
    4b54:	00f000c0 	.word	0x00f000c0
    4b58:	0000000f 	.word	0x0000000f
    4b5c:	03fc0f00 	.word	0x03fc0f00
    4b60:	0330f0ff 	.word	0x0330f0ff
    4b64:	30300003 	.word	0x30300003
    4b68:	f0030333 	.word	0xf0030333
    4b6c:	ff000c30 	.word	0xff000c30
    4b70:	00f30f30 	.word	0x00f30f30
    4b74:	ff3f0000 	.word	0xff3f0000
    4b78:	30f0ff03 	.word	0x30f0ff03
    4b7c:	000c03c0 	.word	0x000c03c0
    4b80:	0f03c030 	.word	0x0f03c030
    4b84:	00fc3000 	.word	0x00fc3000
    4b88:	030ff0f0 	.word	0x030ff0f0
    4b8c:	0f000000 	.word	0x0f000000
    4b90:	f0fc030c 	.word	0xf0fc030c
    4b94:	0c03c330 	.word	0x0c03c330
    4b98:	03c33030 	.word	0x03c33030
    4b9c:	c330300c 	.word	0xc330300c
    4ba0:	0cc0c300 	.word	0x0cc0c300
    4ba4:	0000003c 	.word	0x0000003c
    4ba8:	00030030 	.word	0x00030030
    4bac:	03003000 	.word	0x03003000
    4bb0:	ff3f0000 	.word	0xff3f0000
    4bb4:	30000003 	.word	0x30000003
    4bb8:	00000300 	.word	0x00000300
    4bbc:	00000030 	.word	0x00000030
    4bc0:	03fc3f00 	.word	0x03fc3f00
    4bc4:	0300c0ff 	.word	0x0300c0ff
    4bc8:	00300000 	.word	0x00300000
    4bcc:	30000003 	.word	0x30000003
    4bd0:	ff030300 	.word	0xff030300
    4bd4:	00fc3fc0 	.word	0x00fc3fc0
    4bd8:	003c0000 	.word	0x003c0000
    4bdc:	0300fc03 	.word	0x0300fc03
    4be0:	e00300fc 	.word	0xe00300fc
    4be4:	03000300 	.word	0x03000300
    4be8:	03fc03e0 	.word	0x03fc03e0
    4bec:	003c00fc 	.word	0x003c00fc
    4bf0:	3f000000 	.word	0x3f000000
    4bf4:	f0ff03fe 	.word	0xf0ff03fe
    4bf8:	03000300 	.word	0x03000300
    4bfc:	00f000e0 	.word	0x00f000e0
    4c00:	0300e003 	.word	0x0300e003
    4c04:	3ff0ff03 	.word	0x3ff0ff03
    4c08:	000000fe 	.word	0x000000fe
    4c0c:	c0030330 	.word	0xc0030330
    4c10:	003c0ff0 	.word	0x003c0ff0
    4c14:	e0010037 	.word	0xe0010037
    4c18:	0f003b00 	.word	0x0f003b00
    4c1c:	f0c0033c 	.word	0xf0c0033c
    4c20:	00000330 	.word	0x00000330
    4c24:	03003000 	.word	0x03003000
    4c28:	000f00c0 	.word	0x000f00c0
    4c2c:	00003e00 	.word	0x00003e00
    4c30:	003e00ff 	.word	0x003e00ff
    4c34:	c003000f 	.word	0xc003000f
    4c38:	00003000 	.word	0x00003000
    4c3c:	0f300000 	.word	0x0f300000
    4c40:	30f00103 	.word	0x30f00103
    4c44:	30070333 	.word	0x30070333
    4c48:	3803c330 	.word	0x3803c330
    4c4c:	03033e30 	.word	0x03033e30
    4c50:	033030c0 	.word	0x033030c0
	...
    4c5c:	ff03ff3f 	.word	0xff03ff3f
    4c60:	030330f0 	.word	0x030330f0
    4c64:	03303000 	.word	0x03303000
	...
    4c70:	00030000 	.word	0x00030000
    4c74:	00003c00 	.word	0x00003c00
    4c78:	c00300f0 	.word	0xc00300f0
    4c7c:	00000f00 	.word	0x00000f00
    4c80:	f000003c 	.word	0xf000003c
    4c84:	00000300 	.word	0x00000300
    4c88:	03000000 	.word	0x03000000
    4c8c:	03303000 	.word	0x03303000
    4c90:	3f300003 	.word	0x3f300003
    4c94:	f0ff03ff 	.word	0xf0ff03ff
	...
    4ca0:	c0000000 	.word	0xc0000000
    4ca4:	0f003c00 	.word	0x0f003c00
    4ca8:	00c00100 	.word	0x00c00100
    4cac:	c0010030 	.word	0xc0010030
    4cb0:	00000f00 	.word	0x00000f00
    4cb4:	c000003c 	.word	0xc000003c
    4cb8:	00000000 	.word	0x00000000
    4cbc:	30000003 	.word	0x30000003
    4cc0:	00000300 	.word	0x00000300
    4cc4:	00030030 	.word	0x00030030
    4cc8:	03003000 	.word	0x03003000
    4ccc:	00300000 	.word	0x00300000
    4cd0:	00000003 	.word	0x00000003
    4cd4:	00000000 	.word	0x00000000
    4cd8:	03003000 	.word	0x03003000
    4cdc:	003c0000 	.word	0x003c0000
    4ce0:	0300f000 	.word	0x0300f000
	...
    4cec:	000c0000 	.word	0x000c0000
    4cf0:	3303c000 	.word	0x3303c000
    4cf4:	03303300 	.word	0x03303300
    4cf8:	30330033 	.word	0x30330033
    4cfc:	3f003303 	.word	0x3f003303
    4d00:	00ff0030 	.word	0x00ff0030
    4d04:	ff3f0000 	.word	0xff3f0000
    4d08:	01f0ff03 	.word	0x01f0ff03
    4d0c:	303000ce 	.word	0x303000ce
    4d10:	30000303 	.word	0x30000303
    4d14:	00030330 	.word	0x00030330
    4d18:	fc00f03c 	.word	0xfc00f03c
    4d1c:	00000000 	.word	0x00000000
    4d20:	f03f00fc 	.word	0xf03f00fc
    4d24:	30000303 	.word	0x30000303
    4d28:	00030330 	.word	0x00030330
    4d2c:	03033030 	.word	0x03033030
    4d30:	00300c00 	.word	0x00300c00
    4d34:	000000c3 	.word	0x000000c3
    4d38:	3f00fc00 	.word	0x3f00fc00
    4d3c:	000303f0 	.word	0x000303f0
    4d40:	03033030 	.word	0x03033030
    4d44:	00303000 	.word	0x00303000
    4d48:	f0ff03cc 	.word	0xf0ff03cc
    4d4c:	0000ff3f 	.word	0x0000ff3f
    4d50:	00fc0000 	.word	0x00fc0000
    4d54:	3303f03f 	.word	0x3303f03f
    4d58:	03303300 	.word	0x03303300
    4d5c:	30330033 	.word	0x30330033
    4d60:	0f003303 	.word	0x0f003303
    4d64:	00f00030 	.word	0x00f00030
    4d68:	c0000000 	.word	0xc0000000
    4d6c:	0f000c00 	.word	0x0f000c00
    4d70:	f0ff00ff 	.word	0xf0ff00ff
    4d74:	0c03c030 	.word	0x0c03c030
    4d78:	00003000 	.word	0x00003000
    4d7c:	000c00c0 	.word	0x000c00c0
    4d80:	00000000 	.word	0x00000000
    4d84:	ff3fc0cc 	.word	0xff3fc0cc
    4d88:	33303303 	.word	0x33303303
    4d8c:	30330333 	.word	0x30330333
    4d90:	c300333f 	.word	0xc300333f
    4d94:	030c30f0 	.word	0x030c30f0
    4d98:	0000c000 	.word	0x0000c000
    4d9c:	ff03ff3f 	.word	0xff03ff3f
    4da0:	00c000f0 	.word	0x00c000f0
    4da4:	00030030 	.word	0x00030030
    4da8:	03003000 	.word	0x03003000
    4dac:	f00f0000 	.word	0xf00f0000
    4db0:	0000ff00 	.word	0x0000ff00
    4db4:	00000000 	.word	0x00000000
    4db8:	03033000 	.word	0x03033000
    4dbc:	33f03f03 	.word	0x33f03f03
    4dc0:	300000ff 	.word	0x300000ff
    4dc4:	00000300 	.word	0x00000300
    4dc8:	00000000 	.word	0x00000000
    4dcc:	03000000 	.word	0x03000000
    4dd0:	003f00c0 	.word	0x003f00c0
    4dd4:	03003000 	.word	0x03003000
    4dd8:	3f330000 	.word	0x3f330000
    4ddc:	c0ff33ff 	.word	0xc0ff33ff
    4de0:	00000000 	.word	0x00000000
    4de4:	3f000000 	.word	0x3f000000
    4de8:	f0ff03ff 	.word	0xf0ff03ff
    4dec:	07003000 	.word	0x07003000
    4df0:	00ec0100 	.word	0x00ec0100
    4df4:	0306c038 	.word	0x0306c038
    4df8:	00300000 	.word	0x00300000
	...
    4e04:	03033000 	.word	0x03033000
    4e08:	ff3f3000 	.word	0xff3f3000
    4e0c:	00f0ff03 	.word	0x00f0ff03
    4e10:	00000003 	.word	0x00000003
    4e14:	00000000 	.word	0x00000000
    4e18:	00ff0300 	.word	0x00ff0300
    4e1c:	c000f03f 	.word	0xc000f03f
    4e20:	00000700 	.word	0x00000700
    4e24:	000c0070 	.word	0x000c0070
    4e28:	3f008003 	.word	0x3f008003
    4e2c:	00ff00f0 	.word	0x00ff00f0
    4e30:	ff030000 	.word	0xff030000
    4e34:	03f00f00 	.word	0x03f00f00
    4e38:	003000c0 	.word	0x003000c0
    4e3c:	30000003 	.word	0x30000003
    4e40:	00000300 	.word	0x00000300
    4e44:	ff00f00f 	.word	0xff00f00f
    4e48:	00000000 	.word	0x00000000
    4e4c:	f03f00fc 	.word	0xf03f00fc
    4e50:	30000303 	.word	0x30000303
    4e54:	00030330 	.word	0x00030330
    4e58:	ff033030 	.word	0xff033030
    4e5c:	00c00f00 	.word	0x00c00f00
    4e60:	00000000 	.word	0x00000000
    4e64:	0ff0ff03 	.word	0x0ff0ff03
    4e68:	000c0300 	.word	0x000c0300
    4e6c:	0c03c030 	.word	0x0c03c030
    4e70:	03c03000 	.word	0x03c03000
    4e74:	000f000c 	.word	0x000f000c
    4e78:	0000f000 	.word	0x0000f000
    4e7c:	00f00000 	.word	0x00f00000
    4e80:	0c03000f 	.word	0x0c03000f
    4e84:	03c03000 	.word	0x03c03000
    4e88:	c030000c 	.word	0xc030000c
    4e8c:	0f000c03 	.word	0x0f000c03
    4e90:	f0ff0300 	.word	0xf0ff0300
    4e94:	ff030000 	.word	0xff030000
    4e98:	00f00f00 	.word	0x00f00f00
    4e9c:	001c00c0 	.word	0x001c00c0
    4ea0:	30000003 	.word	0x30000003
    4ea4:	00000300 	.word	0x00000300
    4ea8:	c000001c 	.word	0xc000001c
    4eac:	00000000 	.word	0x00000000
    4eb0:	303f00c3 	.word	0x303f00c3
    4eb4:	33003303 	.word	0x33003303
    4eb8:	00330330 	.word	0x00330330
    4ebc:	33033033 	.word	0x33033033
    4ec0:	00c00000 	.word	0x00c00000
    4ec4:	0000000c 	.word	0x0000000c
    4ec8:	30000003 	.word	0x30000003
    4ecc:	03fc3f00 	.word	0x03fc3f00
    4ed0:	0303c0ff 	.word	0x0303c0ff
    4ed4:	03303000 	.word	0x03303000
    4ed8:	c000000c 	.word	0xc000000c
    4edc:	00000000 	.word	0x00000000
    4ee0:	00fc0300 	.word	0x00fc0300
    4ee4:	0300f03f 	.word	0x0300f03f
    4ee8:	00300000 	.word	0x00300000
    4eec:	30000003 	.word	0x30000003
    4ef0:	3f00fc03 	.word	0x3f00fc03
    4ef4:	000300f0 	.word	0x000300f0
    4ef8:	c0010000 	.word	0xc0010000
    4efc:	00000e00 	.word	0x00000e00
    4f00:	e0010078 	.word	0xe0010078
    4f04:	01000f00 	.word	0x01000f00
    4f08:	007800e0 	.word	0x007800e0
    4f0c:	c001000e 	.word	0xc001000e
    4f10:	03000000 	.word	0x03000000
    4f14:	f03f00fc 	.word	0xf03f00fc
    4f18:	01000300 	.word	0x01000300
    4f1c:	003000c0 	.word	0x003000c0
    4f20:	0300c001 	.word	0x0300c001
    4f24:	03f03f00 	.word	0x03f03f00
    4f28:	000000fc 	.word	0x000000fc
    4f2c:	1c000303 	.word	0x1c000303
    4f30:	007800e0 	.word	0x007800e0
    4f34:	78000003 	.word	0x78000003
    4f38:	03e01c00 	.word	0x03e01c00
    4f3c:	00000003 	.word	0x00000003
    4f40:	00000000 	.word	0x00000000
    4f44:	c0f00300 	.word	0xc0f00300
    4f48:	0c00cf3f 	.word	0x0c00cf3f
    4f4c:	00c30070 	.word	0x00c30070
    4f50:	ff3f700c 	.word	0xff3f700c
    4f54:	00c0ff03 	.word	0x00c0ff03
    4f58:	00000000 	.word	0x00000000
    4f5c:	03030000 	.word	0x03030000
    4f60:	03303000 	.word	0x03303000
    4f64:	f030000f 	.word	0xf030000f
    4f68:	33003303 	.word	0x33003303
    4f6c:	00c30330 	.word	0x00c30330
    4f70:	0303303c 	.word	0x0303303c
	...
    4f7c:	0c00c000 	.word	0x0c00c000
    4f80:	03cc0c00 	.word	0x03cc0c00
    4f84:	03303033 	.word	0x03303033
    4f88:	30300003 	.word	0x30300003
    4f8c:	00000003 	.word	0x00000003
    4f90:	00000000 	.word	0x00000000
    4f94:	03000000 	.word	0x03000000
    4f98:	ff3ff0ff 	.word	0xff3ff0ff
	...
    4fa8:	03033000 	.word	0x03033000
    4fac:	33333000 	.word	0x33333000
    4fb0:	0c303303 	.word	0x0c303303
    4fb4:	000c00cc 	.word	0x000c00cc
	...
    4fc0:	000f0000 	.word	0x000f0000
    4fc4:	3000f003 	.word	0x3000f003
    4fc8:	00800300 	.word	0x00800300
    4fcc:	7000000c 	.word	0x7000000c
    4fd0:	03000300 	.word	0x03000300
    4fd4:	003c00f0 	.word	0x003c00f0
	...
    4ff4:	ff00f003 	.word	0xff00f003
    4ff8:	030f3cc0 	.word	0x030f3cc0
    4ffc:	03303400 	.word	0x03303400
    5000:	303000c3 	.word	0x303000c3
    5004:	c0c00003 	.word	0xc0c00003
    5008:	00000c0c 	.word	0x00000c0c
    500c:	01fc0300 	.word	0x01fc0300
    5010:	0318f0bf 	.word	0x0318f0bf
    5014:	00300000 	.word	0x00300000
    5018:	30800103 	.word	0x30800103
    501c:	3f00fc1b 	.word	0x3f00fc1b
    5020:	000300f0 	.word	0x000300f0
    5024:	fc000000 	.word	0xfc000000
    5028:	03f03f00 	.word	0x03f03f00
    502c:	30330033 	.word	0x30330033
    5030:	b301330b 	.word	0xb301330b
    5034:	00331330 	.word	0x00331330
    5038:	f000300f 	.word	0xf000300f
    503c:	00000000 	.word	0x00000000
    5040:	c000000c 	.word	0xc000000c
    5044:	33003303 	.word	0x33003303
    5048:	01330b30 	.word	0x01330b30
    504c:	330b3033 	.word	0x330b3033
    5050:	00303f00 	.word	0x00303f00
    5054:	000000ff 	.word	0x000000ff
    5058:	00000c00 	.word	0x00000c00
    505c:	01331bc0 	.word	0x01331bc0
    5060:	330330b3 	.word	0x330330b3
    5064:	1b303300 	.word	0x1b303300
    5068:	30bf0133 	.word	0x30bf0133
    506c:	0000ff00 	.word	0x0000ff00
    5070:	000c0000 	.word	0x000c0000
    5074:	3303c000 	.word	0x3303c000
    5078:	1b303301 	.word	0x1b303301
    507c:	30b30033 	.word	0x30b30033
    5080:	3f003303 	.word	0x3f003303
    5084:	00ff0030 	.word	0x00ff0030
    5088:	0c000000 	.word	0x0c000000
    508c:	03c00000 	.word	0x03c00000
    5090:	30330333 	.word	0x30330333
    5094:	b304334b 	.word	0xb304334b
    5098:	00333330 	.word	0x00333330
    509c:	ff00303f 	.word	0xff00303f
    50a0:	00000000 	.word	0x00000000
    50a4:	f03f00fc 	.word	0xf03f00fc
    50a8:	30000303 	.word	0x30000303
    50ac:	40030330 	.word	0x40030330
    50b0:	03033c30 	.word	0x03033c30
    50b4:	00300c00 	.word	0x00300c00
    50b8:	000000c3 	.word	0x000000c3
    50bc:	3f00fc00 	.word	0x3f00fc00
    50c0:	003303f0 	.word	0x003303f0
    50c4:	331330b3 	.word	0x331330b3
    50c8:	0330b300 	.word	0x0330b300
    50cc:	300f0033 	.word	0x300f0033
    50d0:	0000f000 	.word	0x0000f000
    50d4:	01fc0000 	.word	0x01fc0000
    50d8:	331bf0bf 	.word	0x331bf0bf
    50dc:	03303300 	.word	0x03303300
    50e0:	30b30133 	.word	0x30b30133
    50e4:	0f00331b 	.word	0x0f00331b
    50e8:	00f00030 	.word	0x00f00030
    50ec:	fc000000 	.word	0xfc000000
    50f0:	13f03f00 	.word	0x13f03f00
    50f4:	30b30133 	.word	0x30b30133
    50f8:	3300330b 	.word	0x3300330b
    50fc:	00330330 	.word	0x00330330
    5100:	f000300f 	.word	0xf000300f
    5104:	00000000 	.word	0x00000000
    5108:	30000300 	.word	0x30000300
    510c:	3f000333 	.word	0x3f000333
    5110:	03ff03f0 	.word	0x03ff03f0
    5114:	03303000 	.word	0x03303000
	...
    5124:	01030b30 	.word	0x01030b30
    5128:	ff0bf03f 	.word	0xff0bf03f
    512c:	00300000 	.word	0x00300000
    5130:	00000003 	.word	0x00000003
	...
    513c:	03133000 	.word	0x03133000
    5140:	0bf0bf01 	.word	0x0bf0bf01
    5144:	300000ff 	.word	0x300000ff
    5148:	00000300 	.word	0x00000300
    514c:	00000000 	.word	0x00000000
    5150:	ff000000 	.word	0xff000000
    5154:	cff03f0c 	.word	0xcff03f0c
    5158:	00c30130 	.word	0x00c30130
    515c:	c3013030 	.word	0xc3013030
    5160:	0c30cf00 	.word	0x0c30cf00
    5164:	ff00f03f 	.word	0xff00f03f
    5168:	00000000 	.word	0x00000000
    516c:	f03f00ff 	.word	0xf03f00ff
    5170:	c30b304f 	.word	0xc30b304f
    5174:	0b30b000 	.word	0x0b30b000
    5178:	304f00c3 	.word	0x304f00c3
    517c:	00f03f00 	.word	0x00f03f00
    5180:	000000ff 	.word	0x000000ff
    5184:	ff03ff3f 	.word	0xff03ff3f
    5188:	07c330f0 	.word	0x07c330f0
    518c:	c370300c 	.word	0xc370300c
    5190:	b0300c0b 	.word	0xb0300c0b
    5194:	30000303 	.word	0x30000303
    5198:	00000330 	.word	0x00000330
    519c:	001c0000 	.word	0x001c0000
    51a0:	3303f033 	.word	0x3303f033
    51a4:	01303f00 	.word	0x01303f00
    51a8:	e03b00ff 	.word	0xe03b00ff
    51ac:	3b001303 	.word	0x3b001303
    51b0:	00f30330 	.word	0x00f30330
    51b4:	ff000000 	.word	0xff000000
    51b8:	0ff03f00 	.word	0x0ff03f00
    51bc:	00c30130 	.word	0x00c30130
    51c0:	ff033030 	.word	0xff033030
    51c4:	03ff3ff0 	.word	0x03ff3ff0
    51c8:	c330300c 	.word	0xc330300c
    51cc:	00000000 	.word	0x00000000
    51d0:	f03f00fc 	.word	0xf03f00fc
    51d4:	b0000303 	.word	0xb0000303
    51d8:	00031330 	.word	0x00031330
    51dc:	ff0330b0 	.word	0xff0330b0
    51e0:	00c00f00 	.word	0x00c00f00
    51e4:	00000000 	.word	0x00000000
    51e8:	bf01fc00 	.word	0xbf01fc00
    51ec:	00031bf0 	.word	0x00031bf0
    51f0:	03033030 	.word	0x03033030
    51f4:	1b30b001 	.word	0x1b30b001
    51f8:	c00f00ff 	.word	0xc00f00ff
    51fc:	00000000 	.word	0x00000000
    5200:	00fc0000 	.word	0x00fc0000
    5204:	0313f03f 	.word	0x0313f03f
    5208:	0b30b001 	.word	0x0b30b001
    520c:	30300003 	.word	0x30300003
    5210:	0f00ff03 	.word	0x0f00ff03
    5214:	000000c0 	.word	0x000000c0
    5218:	fc030000 	.word	0xfc030000
    521c:	00f03f00 	.word	0x00f03f00
    5220:	30800003 	.word	0x30800003
    5224:	80000310 	.word	0x80000310
    5228:	00fc0330 	.word	0x00fc0330
    522c:	0300f03f 	.word	0x0300f03f
    5230:	03000000 	.word	0x03000000
    5234:	f03f00fc 	.word	0xf03f00fc
    5238:	00010300 	.word	0x00010300
    523c:	00031830 	.word	0x00031830
    5240:	fc033080 	.word	0xfc033080
    5244:	00f03f00 	.word	0x00f03f00
    5248:	00000003 	.word	0x00000003
    524c:	bfc1f003 	.word	0xbfc1f003
    5250:	700c18cf 	.word	0x700c18cf
    5254:	0c00c300 	.word	0x0c00c300
    5258:	1bffbf71 	.word	0x1bffbf71
    525c:	0000c0ff 	.word	0x0000c0ff
    5260:	00000000 	.word	0x00000000
    5264:	00fc0700 	.word	0x00fc0700
    5268:	07dcc07f 	.word	0x07dcc07f
    526c:	1830800d 	.word	0x1830800d
    5270:	30800d03 	.word	0x30800d03
    5274:	7f0007dc 	.word	0x7f0007dc
    5278:	00fc07c0 	.word	0x00fc07c0
    527c:	fc1f0000 	.word	0xfc1f0000
    5280:	c0c0ff01 	.word	0xc0c0ff01
    5284:	30000c03 	.word	0x30000c03
    5288:	00000300 	.word	0x00000300
    528c:	0d03c030 	.word	0x0d03c030
    5290:	fc1fc0ff 	.word	0xfc1fc0ff
    5294:	03000000 	.word	0x03000000
    5298:	c0ff00f0 	.word	0xc0ff00f0
    529c:	c0000c0c 	.word	0xc0000c0c
    52a0:	80ef7dc0 	.word	0x80ef7dc0
    52a4:	0c0cc0c0 	.word	0x0c0cc0c0
    52a8:	03003300 	.word	0x03003300
    52ac:	00000030 	.word	0x00000030
    52b0:	ff006300 	.word	0xff006300
    52b4:	03ff1ff0 	.word	0x03ff1ff0
    52b8:	63303086 	.word	0x63303086
    52bc:	18300003 	.word	0x18300003
    52c0:	30c00003 	.word	0x30c00003
    52c4:	00000300 	.word	0x00000300
    52c8:	03002000 	.word	0x03002000
    52cc:	240e0080 	.word	0x240e0080
    52d0:	00403a00 	.word	0x00403a00
    52d4:	403a00ff 	.word	0x403a00ff
    52d8:	8003240e 	.word	0x8003240e
    52dc:	00002000 	.word	0x00002000
    52e0:	ff3f0000 	.word	0xff3f0000
    52e4:	31f0ff03 	.word	0x31f0ff03
    52e8:	e01b0380 	.word	0xe01b0380
    52ec:	1903bf31 	.word	0x1903bf31
    52f0:	00933130 	.word	0x00933130
    52f4:	000e00e0 	.word	0x000e00e0
    52f8:	00000000 	.word	0x00000000
    52fc:	fc0c00c0 	.word	0xfc0c00c0
    5300:	ffc0ff0f 	.word	0xffc0ff0f
    5304:	03c03fc0 	.word	0x03c03fc0
    5308:	c038008c 	.word	0xc038008c
    530c:	0e00e001 	.word	0x0e00e001
    5310:	00000000 	.word	0x00000000
    5314:	00000c00 	.word	0x00000c00
    5318:	003303c0 	.word	0x003303c0
    531c:	330b3033 	.word	0x330b3033
    5320:	1330b301 	.word	0x1330b301
    5324:	303f0033 	.word	0x303f0033
    5328:	0000ff00 	.word	0x0000ff00
    532c:	00000000 	.word	0x00000000
    5330:	03033000 	.word	0x03033000
    5334:	33f03f01 	.word	0x33f03f01
    5338:	300002ff 	.word	0x300002ff
    533c:	00000300 	.word	0x00000300
    5340:	00000000 	.word	0x00000000
    5344:	fc000000 	.word	0xfc000000
    5348:	03f03f00 	.word	0x03f03f00
    534c:	30b00003 	.word	0x30b00003
    5350:	3001031b 	.word	0x3001031b
    5354:	00ff0330 	.word	0x00ff0330
    5358:	0000c00f 	.word	0x0000c00f
    535c:	03000000 	.word	0x03000000
    5360:	f03f00fc 	.word	0xf03f00fc
    5364:	80000300 	.word	0x80000300
    5368:	01031830 	.word	0x01031830
    536c:	fc033000 	.word	0xfc033000
    5370:	00f03f00 	.word	0x00f03f00
    5374:	00000003 	.word	0x00000003
    5378:	0f00ff03 	.word	0x0f00ff03
    537c:	00c013f0 	.word	0x00c013f0
    5380:	000b00b0 	.word	0x000b00b0
    5384:	13003001 	.word	0x13003001
    5388:	f08f0000 	.word	0xf08f0000
    538c:	0000ff00 	.word	0x0000ff00
    5390:	0bff3f00 	.word	0x0bff3f00
    5394:	004cf0ff 	.word	0x004cf0ff
    5398:	80003004 	.word	0x80003004
    539c:	000308c0 	.word	0x000308c0
    53a0:	ff030c40 	.word	0xff030c40
    53a4:	00ff3ff0 	.word	0x00ff3ff0
    53a8:	80000000 	.word	0x80000000
    53ac:	26000800 	.word	0x26000800
    53b0:	00a80280 	.word	0x00a80280
    53b4:	a802802a 	.word	0xa802802a
    53b8:	00801e00 	.word	0x00801e00
    53bc:	80000008 	.word	0x80000008
    53c0:	00000000 	.word	0x00000000
    53c4:	00080080 	.word	0x00080080
    53c8:	6803801c 	.word	0x6803801c
    53cc:	03802200 	.word	0x03802200
    53d0:	801c0068 	.word	0x801c0068
    53d4:	00000800 	.word	0x00000800
    53d8:	00000080 	.word	0x00000080
    53dc:	00000300 	.word	0x00000300
    53e0:	c00c0030 	.word	0xc00c0030
    53e4:	f00ccc00 	.word	0xf00ccc00
    53e8:	000ccfc0 	.word	0x000ccfc0
    53ec:	3c00c000 	.word	0x3c00c000
    53f0:	00000300 	.word	0x00000300
    53f4:	00f00000 	.word	0x00f00000
    53f8:	c000000f 	.word	0xc000000f
    53fc:	00000c00 	.word	0x00000c00
    5400:	000c00c0 	.word	0x000c00c0
    5404:	0c00c000 	.word	0x0c00c000
    5408:	00c00000 	.word	0x00c00000
    540c:	c0000000 	.word	0xc0000000
    5410:	00000c00 	.word	0x00000c00
    5414:	000c00c0 	.word	0x000c00c0
    5418:	0c00c000 	.word	0x0c00c000
    541c:	00c00000 	.word	0x00c00000
    5420:	f000000f 	.word	0xf000000f
    5424:	00000000 	.word	0x00000000
    5428:	000c00c0 	.word	0x000c00c0
    542c:	0c40c400 	.word	0x0c40c400
    5430:	c7d97ecc 	.word	0xc7d97ecc
    5434:	de00b4ed 	.word	0xde00b4ed
    5438:	00c40c40 	.word	0x00c40c40
    543c:	000000c0 	.word	0x000000c0
    5440:	0d00c000 	.word	0x0d00c000
    5444:	00df00f0 	.word	0x00df00f0
    5448:	c17e100c 	.word	0xc17e100c
    544c:	00feec07 	.word	0x00feec07
    5450:	100ce0cf 	.word	0x100ce0cf
    5454:	0000c000 	.word	0x0000c000
	...
    5460:	0cfccf00 	.word	0x0cfccf00
    5464:	0000c0ff 	.word	0x0000c0ff
	...
    5470:	40000000 	.word	0x40000000
    5474:	01000a00 	.word	0x01000a00
    5478:	80240010 	.word	0x80240010
    547c:	1100a000 	.word	0x1100a000
    5480:	00080200 	.word	0x00080200
	...
    5490:	11000802 	.word	0x11000802
    5494:	00a00000 	.word	0x00a00000
    5498:	10018024 	.word	0x10018024
    549c:	00000a00 	.word	0x00000a00
    54a0:	00000040 	.word	0x00000040
    54a4:	82200882 	.word	0x82200882
    54a8:	08822008 	.word	0x08822008
    54ac:	20088220 	.word	0x20088220
    54b0:	82200882 	.word	0x82200882
    54b4:	08822008 	.word	0x08822008
    54b8:	20088220 	.word	0x20088220
    54bc:	24499282 	.word	0x24499282
    54c0:	92244992 	.word	0x92244992
    54c4:	49922449 	.word	0x49922449
    54c8:	24499224 	.word	0x24499224
    54cc:	92244992 	.word	0x92244992
    54d0:	49922449 	.word	0x49922449
    54d4:	b66d9224 	.word	0xb66d9224
    54d8:	dbb66ddb 	.word	0xdbb66ddb
    54dc:	6ddbb66d 	.word	0x6ddbb66d
    54e0:	b66ddbb6 	.word	0xb66ddbb6
    54e4:	dbb66ddb 	.word	0xdbb66ddb
    54e8:	6ddbb66d 	.word	0x6ddbb66d
    54ec:	006ddbb6 	.word	0x006ddbb6
	...
    54f8:	f0ffff00 	.word	0xf0ffff00
	...
    5508:	04004000 	.word	0x04004000
    550c:	00400000 	.word	0x00400000
    5510:	ffff0004 	.word	0xffff0004
    5514:	000000f0 	.word	0x000000f0
	...
    5520:	00a00000 	.word	0x00a00000
    5524:	a000000a 	.word	0xa000000a
    5528:	ff000a00 	.word	0xff000a00
    552c:	0000f0ff 	.word	0x0000f0ff
	...
    5538:	40000000 	.word	0x40000000
    553c:	00000400 	.word	0x00000400
    5540:	ffff0f40 	.word	0xffff0f40
    5544:	ff0f0000 	.word	0xff0f0000
    5548:	000000ff 	.word	0x000000ff
	...
    5554:	00040040 	.word	0x00040040
    5558:	07004000 	.word	0x07004000
    555c:	004000ff 	.word	0x004000ff
    5560:	0000ff07 	.word	0x0000ff07
	...
    556c:	0a00a000 	.word	0x0a00a000
    5570:	00a00000 	.word	0x00a00000
    5574:	ff00000a 	.word	0xff00000a
    5578:	000000f0 	.word	0x000000f0
	...
    5584:	00a00000 	.word	0x00a00000
    5588:	a000000a 	.word	0xa000000a
    558c:	00fffb0f 	.word	0x00fffb0f
    5590:	ffff0f00 	.word	0xffff0f00
	...
    55a4:	ffff0f00 	.word	0xffff0f00
    55a8:	ff0f0000 	.word	0xff0f0000
    55ac:	000000ff 	.word	0x000000ff
	...
    55b8:	000a00a0 	.word	0x000a00a0
    55bc:	0b00a000 	.word	0x0b00a000
    55c0:	008000ff 	.word	0x008000ff
    55c4:	0000ff0f 	.word	0x0000ff0f
	...
    55d0:	0a00a000 	.word	0x0a00a000
    55d4:	0fa00000 	.word	0x0fa00000
    55d8:	200000fa 	.word	0x200000fa
    55dc:	0000fe0f 	.word	0x0000fe0f
	...
    55e8:	00400000 	.word	0x00400000
    55ec:	40000004 	.word	0x40000004
    55f0:	0000fc0f 	.word	0x0000fc0f
    55f4:	00fc0f40 	.word	0x00fc0f40
	...
    5600:	a0000000 	.word	0xa0000000
    5604:	00000a00 	.word	0x00000a00
    5608:	000a00a0 	.word	0x000a00a0
    560c:	0000e0ff 	.word	0x0000e0ff
	...
    561c:	00040040 	.word	0x00040040
    5620:	04004000 	.word	0x04004000
    5624:	f07f0000 	.word	0xf07f0000
	...
    563c:	c0ff0000 	.word	0xc0ff0000
    5640:	00000400 	.word	0x00000400
    5644:	00040040 	.word	0x00040040
    5648:	04004000 	.word	0x04004000
    564c:	00400000 	.word	0x00400000
    5650:	40000004 	.word	0x40000004
    5654:	ff000400 	.word	0xff000400
    5658:	000400c0 	.word	0x000400c0
    565c:	04004000 	.word	0x04004000
    5660:	00400000 	.word	0x00400000
    5664:	40000004 	.word	0x40000004
    5668:	00000400 	.word	0x00000400
    566c:	00040040 	.word	0x00040040
    5670:	04f07f00 	.word	0x04f07f00
    5674:	00400000 	.word	0x00400000
    5678:	40000004 	.word	0x40000004
    567c:	00000400 	.word	0x00000400
	...
    5688:	f0ffff00 	.word	0xf0ffff00
    568c:	40000004 	.word	0x40000004
    5690:	00000400 	.word	0x00000400
    5694:	00040040 	.word	0x00040040
    5698:	04004000 	.word	0x04004000
    569c:	00400000 	.word	0x00400000
    56a0:	40000004 	.word	0x40000004
    56a4:	00000400 	.word	0x00000400
    56a8:	00040040 	.word	0x00040040
    56ac:	04004000 	.word	0x04004000
    56b0:	00400000 	.word	0x00400000
    56b4:	40000004 	.word	0x40000004
    56b8:	ff000400 	.word	0xff000400
    56bc:	0004f0ff 	.word	0x0004f0ff
    56c0:	04004000 	.word	0x04004000
    56c4:	00400000 	.word	0x00400000
    56c8:	00000004 	.word	0x00000004
	...
    56d4:	0af0ffff 	.word	0x0af0ffff
    56d8:	00a00000 	.word	0x00a00000
    56dc:	a000000a 	.word	0xa000000a
    56e0:	00000a00 	.word	0x00000a00
    56e4:	00000000 	.word	0x00000000
    56e8:	ff0f0000 	.word	0xff0f0000
    56ec:	0f0000ff 	.word	0x0f0000ff
    56f0:	4000ffff 	.word	0x4000ffff
    56f4:	00000400 	.word	0x00000400
    56f8:	00040040 	.word	0x00040040
    56fc:	00000000 	.word	0x00000000
    5700:	0f000000 	.word	0x0f000000
    5704:	200000fe 	.word	0x200000fe
    5708:	0000fa0f 	.word	0x0000fa0f
    570c:	000a00a0 	.word	0x000a00a0
    5710:	0a00a000 	.word	0x0a00a000
	...
    571c:	00ff0f00 	.word	0x00ff0f00
    5720:	ff0b0080 	.word	0xff0b0080
    5724:	0a00a000 	.word	0x0a00a000
    5728:	00a00000 	.word	0x00a00000
    572c:	a000000a 	.word	0xa000000a
    5730:	00000a00 	.word	0x00000a00
    5734:	00fa0fa0 	.word	0x00fa0fa0
    5738:	fa0f2000 	.word	0xfa0f2000
    573c:	00a00000 	.word	0x00a00000
    5740:	a000000a 	.word	0xa000000a
    5744:	00000a00 	.word	0x00000a00
    5748:	000a00a0 	.word	0x000a00a0
    574c:	0b00a000 	.word	0x0b00a000
    5750:	008000ff 	.word	0x008000ff
    5754:	a000ff0b 	.word	0xa000ff0b
    5758:	00000a00 	.word	0x00000a00
    575c:	000a00a0 	.word	0x000a00a0
    5760:	00000000 	.word	0x00000000
    5764:	0f000000 	.word	0x0f000000
    5768:	0000ffff 	.word	0x0000ffff
    576c:	00fffb0f 	.word	0x00fffb0f
    5770:	000a00a0 	.word	0x000a00a0
    5774:	0a00a000 	.word	0x0a00a000
    5778:	00a00000 	.word	0x00a00000
    577c:	a000000a 	.word	0xa000000a
    5780:	00000a00 	.word	0x00000a00
    5784:	000a00a0 	.word	0x000a00a0
    5788:	0a00a000 	.word	0x0a00a000
    578c:	00a00000 	.word	0x00a00000
    5790:	a000000a 	.word	0xa000000a
    5794:	00000a00 	.word	0x00000a00
    5798:	fffb0fa0 	.word	0xfffb0fa0
    579c:	fb0f0000 	.word	0xfb0f0000
    57a0:	00a000ff 	.word	0x00a000ff
    57a4:	a000000a 	.word	0xa000000a
    57a8:	00000a00 	.word	0x00000a00
    57ac:	000a00a0 	.word	0x000a00a0
    57b0:	0a00a000 	.word	0x0a00a000
    57b4:	00a0ff00 	.word	0x00a0ff00
    57b8:	a000000a 	.word	0xa000000a
    57bc:	00000a00 	.word	0x00000a00
    57c0:	000a00a0 	.word	0x000a00a0
    57c4:	04004000 	.word	0x04004000
    57c8:	0f400000 	.word	0x0f400000
    57cc:	400000fc 	.word	0x400000fc
    57d0:	0000fc0f 	.word	0x0000fc0f
    57d4:	00040040 	.word	0x00040040
    57d8:	04004000 	.word	0x04004000
    57dc:	00a00000 	.word	0x00a00000
    57e0:	a000000a 	.word	0xa000000a
    57e4:	00000a00 	.word	0x00000a00
    57e8:	000af0bf 	.word	0x000af0bf
    57ec:	0a00a000 	.word	0x0a00a000
    57f0:	00a00000 	.word	0x00a00000
    57f4:	4000000a 	.word	0x4000000a
    57f8:	00000400 	.word	0x00000400
    57fc:	ff070040 	.word	0xff070040
    5800:	07004000 	.word	0x07004000
    5804:	004000ff 	.word	0x004000ff
    5808:	40000004 	.word	0x40000004
    580c:	00000400 	.word	0x00000400
    5810:	00000000 	.word	0x00000000
    5814:	fc0f0000 	.word	0xfc0f0000
    5818:	0f400000 	.word	0x0f400000
    581c:	400000fc 	.word	0x400000fc
    5820:	00000400 	.word	0x00000400
    5824:	00040040 	.word	0x00040040
	...
    5830:	e0ff0000 	.word	0xe0ff0000
    5834:	00000a00 	.word	0x00000a00
    5838:	000a00a0 	.word	0x000a00a0
    583c:	0a00a000 	.word	0x0a00a000
	...
    584c:	000af0ff 	.word	0x000af0ff
    5850:	0a00a000 	.word	0x0a00a000
    5854:	00a00000 	.word	0x00a00000
    5858:	0000000a 	.word	0x0000000a
    585c:	00000000 	.word	0x00000000
    5860:	ff070000 	.word	0xff070000
    5864:	07004000 	.word	0x07004000
    5868:	004000ff 	.word	0x004000ff
    586c:	40000004 	.word	0x40000004
    5870:	00000400 	.word	0x00000400
    5874:	00040040 	.word	0x00040040
    5878:	ff0f4000 	.word	0xff0f4000
    587c:	0f4000ff 	.word	0x0f4000ff
    5880:	4000ffff 	.word	0x4000ffff
    5884:	00000400 	.word	0x00000400
    5888:	00040040 	.word	0x00040040
    588c:	0a00a000 	.word	0x0a00a000
    5890:	00a00000 	.word	0x00a00000
    5894:	ffff000a 	.word	0xffff000a
    5898:	00000af0 	.word	0x00000af0
    589c:	000a00a0 	.word	0x000a00a0
    58a0:	0a00a000 	.word	0x0a00a000
    58a4:	00400000 	.word	0x00400000
    58a8:	40000004 	.word	0x40000004
    58ac:	ff000400 	.word	0xff000400
    58b0:	000000c0 	.word	0x000000c0
	...
    58c8:	04f07f00 	.word	0x04f07f00
    58cc:	00400000 	.word	0x00400000
    58d0:	40000004 	.word	0x40000004
    58d4:	ff000400 	.word	0xff000400
    58d8:	ffffffff 	.word	0xffffffff
    58dc:	ffffffff 	.word	0xffffffff
    58e0:	ffffffff 	.word	0xffffffff
    58e4:	ffffffff 	.word	0xffffffff
    58e8:	ffffffff 	.word	0xffffffff
    58ec:	ffffffff 	.word	0xffffffff
    58f0:	07f07f00 	.word	0x07f07f00
    58f4:	f07f00ff 	.word	0xf07f00ff
    58f8:	7f00ff07 	.word	0x7f00ff07
    58fc:	00ff07f0 	.word	0x00ff07f0
    5900:	ff07f07f 	.word	0xff07f07f
    5904:	07f07f00 	.word	0x07f07f00
    5908:	ffffffff 	.word	0xffffffff
    590c:	ffffffff 	.word	0xffffffff
    5910:	ffffffff 	.word	0xffffffff
    5914:	0000f0ff 	.word	0x0000f0ff
	...
    592c:	ffffffff 	.word	0xffffffff
    5930:	ffffffff 	.word	0xffffffff
    5934:	ffffffff 	.word	0xffffffff
    5938:	ffffffff 	.word	0xffffffff
    593c:	00fc0fc0 	.word	0x00fc0fc0
    5940:	fc0fc0ff 	.word	0xfc0fc0ff
    5944:	0fc0ff00 	.word	0x0fc0ff00
    5948:	c0ff00fc 	.word	0xc0ff00fc
    594c:	ff00fc0f 	.word	0xff00fc0f
    5950:	00fc0fc0 	.word	0x00fc0fc0
    5954:	03003c00 	.word	0x03003c00
    5958:	00c300c0 	.word	0x00c300c0
    595c:	c300300c 	.word	0xc300300c
    5960:	00200400 	.word	0x00200400
    5964:	2004003c 	.word	0x2004003c
    5968:	00008100 	.word	0x00008100
    596c:	00010000 	.word	0x00010000
    5970:	ff0ff07f 	.word	0xff0ff07f
    5974:	08108c00 	.word	0x08108c00
    5978:	30de00c1 	.word	0x30de00c1
    597c:	01003707 	.word	0x01003707
    5980:	000000c0 	.word	0x000000c0
    5984:	01080000 	.word	0x01080000
    5988:	0ff0ff00 	.word	0x0ff0ff00
    598c:	10c000ff 	.word	0x10c000ff
    5990:	c000000c 	.word	0xc000000c
    5994:	00800f00 	.word	0x00800f00
    5998:	000000f8 	.word	0x000000f8
    599c:	00000000 	.word	0x00000000
    59a0:	f00f0081 	.word	0xf00f0081
    59a4:	0c00ff00 	.word	0x0c00ff00
    59a8:	00c00000 	.word	0x00c00000
    59ac:	ff00000c 	.word	0xff00000c
    59b0:	00f00f00 	.word	0x00f00f00
    59b4:	00000081 	.word	0x00000081
    59b8:	61030f3c 	.word	0x61030f3c
    59bc:	033333b0 	.word	0x033333b0
    59c0:	c330301e 	.word	0xc330301e
    59c4:	30300003 	.word	0x30300003
    59c8:	30000303 	.word	0x30000303
    59cc:	00000738 	.word	0x00000738
    59d0:	00fc0000 	.word	0x00fc0000
    59d4:	0303f03f 	.word	0x0303f03f
    59d8:	03303000 	.word	0x03303000
    59dc:	30300003 	.word	0x30300003
    59e0:	3f00ff03 	.word	0x3f00ff03
    59e4:	000003c0 	.word	0x000003c0
    59e8:	ff030000 	.word	0xff030000
    59ec:	00fe3fe0 	.word	0x00fe3fe0
    59f0:	30000003 	.word	0x30000003
    59f4:	00000300 	.word	0x00000300
    59f8:	00fc0330 	.word	0x00fc0330
    59fc:	0300f03f 	.word	0x0300f03f
    5a00:	03000000 	.word	0x03000000
    5a04:	00380000 	.word	0x00380000
    5a08:	0f00c001 	.word	0x0f00c001
    5a0c:	00ff03f0 	.word	0x00ff03f0
    5a10:	80030030 	.word	0x80030030
    5a14:	00001c00 	.word	0x00001c00
    5a18:	000000c0 	.word	0x000000c0
    5a1c:	5f80fc04 	.word	0x5f80fc04
    5a20:	800307e8 	.word	0x800307e8
    5a24:	03073870 	.word	0x03073870
    5a28:	05387080 	.word	0x05387080
    5a2c:	c84f80fe 	.word	0xc84f80fe
    5a30:	00000000 	.word	0x00000000
    5a34:	00f00300 	.word	0x00f00300
    5a38:	cf3cc0ff 	.word	0xcf3cc0ff
    5a3c:	30300c03 	.word	0x30300c03
    5a40:	300c03c3 	.word	0x300c03c3
    5a44:	ff00cf3c 	.word	0xff00cf3c
    5a48:	00f003c0 	.word	0x00f003c0
    5a4c:	f90f0000 	.word	0xf90f0000
    5a50:	38f0ff01 	.word	0x38f0ff01
    5a54:	0000031f 	.word	0x0000031f
    5a58:	00030030 	.word	0x00030030
    5a5c:	011f3800 	.word	0x011f3800
    5a60:	f90ff0ff 	.word	0xf90ff0ff
    5a64:	00000000 	.word	0x00000000
    5a68:	f03f00fc 	.word	0xf03f00fc
    5a6c:	b0030333 	.word	0xb0030333
    5a70:	03033f30 	.word	0x03033f30
    5a74:	ff333070 	.word	0xff333070
    5a78:	30c00f03 	.word	0x30c00f03
    5a7c:	00000000 	.word	0x00000000
    5a80:	1000f800 	.word	0x1000f800
    5a84:	00020240 	.word	0x00020240
    5a88:	f8004010 	.word	0xf8004010
    5a8c:	02401000 	.word	0x02401000
    5a90:	40100002 	.word	0x40100002
    5a94:	0000f800 	.word	0x0000f800
    5a98:	00fd0100 	.word	0x00fd0100
    5a9c:	0e027030 	.word	0x0e027030
    5aa0:	04b06100 	.word	0x04b06100
    5aa4:	306c0071 	.word	0x306c0071
    5aa8:	70008203 	.word	0x70008203
    5aac:	00fc0560 	.word	0x00fc0560
    5ab0:	f0030000 	.word	0xf0030000
    5ab4:	3cc0ff00 	.word	0x3cc0ff00
    5ab8:	300c03cf 	.word	0x300c03cf
    5abc:	0c03c330 	.word	0x0c03c330
    5ac0:	00033030 	.word	0x00033030
    5ac4:	00000000 	.word	0x00000000
    5ac8:	03000000 	.word	0x03000000
    5acc:	fc3fc0ff 	.word	0xfc3fc0ff
    5ad0:	c000000c 	.word	0xc000000c
    5ad4:	00000c00 	.word	0x00000c00
    5ad8:	000c00c0 	.word	0x000c00c0
    5adc:	03fc3f00 	.word	0x03fc3f00
    5ae0:	0000c0ff 	.word	0x0000c0ff
    5ae4:	33003303 	.word	0x33003303
    5ae8:	00330330 	.word	0x00330330
    5aec:	33033033 	.word	0x33033033
    5af0:	03303300 	.word	0x03303300
    5af4:	30330033 	.word	0x30330033
    5af8:	00003303 	.word	0x00003303
    5afc:	00c10000 	.word	0x00c10000
    5b00:	c100100c 	.word	0xc100100c
    5b04:	0f100c00 	.word	0x0f100c00
    5b08:	100c00fd 	.word	0x100c00fd
    5b0c:	0c00c100 	.word	0x0c00c100
    5b10:	00c10010 	.word	0x00c10010
    5b14:	03300000 	.word	0x03300000
    5b18:	0c360063 	.word	0x0c360063
    5b1c:	c6c0600c 	.word	0xc6c0600c
    5b20:	33603003 	.word	0x33603003
    5b24:	60c00006 	.word	0x60c00006
    5b28:	0000060c 	.word	0x0000060c
    5b2c:	00000000 	.word	0x00000000
    5b30:	060c60c0 	.word	0x060c60c0
    5b34:	33603003 	.word	0x33603003
    5b38:	600c0c06 	.word	0x600c0c06
    5b3c:	0330c6c0 	.word	0x0330c6c0
    5b40:	00360063 	.word	0x00360063
	...
    5b50:	ff7f0000 	.word	0xff7f0000
    5b54:	800000fc 	.word	0x800000fc
    5b58:	00000c00 	.word	0x00000c00
    5b5c:	00000060 	.word	0x00000060
    5b60:	60000000 	.word	0x60000000
    5b64:	00000100 	.word	0x00000100
    5b68:	ff060010 	.word	0xff060010
    5b6c:	000080ff 	.word	0x000080ff
	...
    5b78:	c0000000 	.word	0xc0000000
    5b7c:	00000c00 	.word	0x00000c00
    5b80:	c0cc00c0 	.word	0xc0cc00c0
    5b84:	0c00cc0c 	.word	0x0c00cc0c
    5b88:	00c00000 	.word	0x00c00000
    5b8c:	c000000c 	.word	0xc000000c
    5b90:	03000000 	.word	0x03000000
    5b94:	00660030 	.word	0x00660030
    5b98:	66006006 	.word	0x66006006
    5b9c:	00300300 	.word	0x00300300
    5ba0:	98018019 	.word	0x98018019
    5ba4:	03801900 	.word	0x03801900
    5ba8:	00000030 	.word	0x00000030
    5bac:	00000000 	.word	0x00000000
    5bb0:	01000c00 	.word	0x01000c00
    5bb4:	00120020 	.word	0x00120020
    5bb8:	0000c000 	.word	0x0000c000
	...
    5bc8:	0e000000 	.word	0x0e000000
    5bcc:	00e00000 	.word	0x00e00000
    5bd0:	0000000e 	.word	0x0000000e
	...
    5be4:	30000000 	.word	0x30000000
    5be8:	00000300 	.word	0x00000300
	...
    5bf8:	80030020 	.word	0x80030020
    5bfc:	03000700 	.word	0x03000700
    5c00:	00c001c0 	.word	0x00c001c0
    5c04:	001000e0 	.word	0x001000e0
    5c08:	10000001 	.word	0x10000001
    5c0c:	00000100 	.word	0x00000100
    5c10:	00000000 	.word	0x00000000
    5c14:	03007e00 	.word	0x03007e00
    5c18:	006000e0 	.word	0x006000e0
    5c1c:	60000006 	.word	0x60000006
    5c20:	00e00700 	.word	0x00e00700
    5c24:	0000001e 	.word	0x0000001e
    5c28:	00000000 	.word	0x00000000
    5c2c:	80210000 	.word	0x80210000
    5c30:	67003806 	.word	0x67003806
    5c34:	00e80680 	.word	0x00e80680
    5c38:	8803807c 	.word	0x8803807c
    5c3c:	00000000 	.word	0x00000000
    5c40:	ff000000 	.word	0xff000000
    5c44:	00f00f00 	.word	0x00f00f00
    5c48:	f00f00ff 	.word	0xf00f00ff
    5c4c:	0f00ff00 	.word	0x0f00ff00
    5c50:	000000f0 	.word	0x000000f0
	...
    5c74:	000a000a 	.word	0x000a000a
    5c78:	00140014 	.word	0x00140014
    5c7c:	00000014 	.word	0x00000014
    5c80:	000a017c 	.word	0x000a017c
    5c84:	000a017c 	.word	0x000a017c
    5c88:	00140186 	.word	0x00140186
    5c8c:	00140000 	.word	0x00140000
    5c90:	0122000a 	.word	0x0122000a
    5c94:	00140186 	.word	0x00140186
    5c98:	01220190 	.word	0x01220190
    5c9c:	0122000a 	.word	0x0122000a
    5ca0:	012c0014 	.word	0x012c0014
    5ca4:	0122017c 	.word	0x0122017c
    5ca8:	012c0186 	.word	0x012c0186
    5cac:	012c0014 	.word	0x012c0014
    5cb0:	0136017c 	.word	0x0136017c
    5cb4:	001e0000 	.word	0x001e0000
    5cb8:	00280032 	.word	0x00280032
    5cbc:	00320000 	.word	0x00320000
    5cc0:	003c0032 	.word	0x003c0032
    5cc4:	001e0050 	.word	0x001e0050
    5cc8:	00280118 	.word	0x00280118
    5ccc:	00280046 	.word	0x00280046
    5cd0:	00be0050 	.word	0x00be0050
    5cd4:	00be0050 	.word	0x00be0050
    5cd8:	00c80118 	.word	0x00c80118
    5cdc:	00280118 	.word	0x00280118
    5ce0:	00be0122 	.word	0x00be0122
    5ce4:	00460000 	.word	0x00460000
    5ce8:	00500032 	.word	0x00500032
    5cec:	005a0000 	.word	0x005a0000
    5cf0:	00640032 	.word	0x00640032
    5cf4:	006e0000 	.word	0x006e0000
    5cf8:	00780032 	.word	0x00780032
    5cfc:	00820000 	.word	0x00820000
    5d00:	008c0032 	.word	0x008c0032
    5d04:	00960000 	.word	0x00960000
    5d08:	00a00032 	.word	0x00a00032
    5d0c:	00aa0000 	.word	0x00aa0000
    5d10:	00b40032 	.word	0x00b40032
    5d14:	00be0000 	.word	0x00be0000
    5d18:	00c80032 	.word	0x00c80032
    5d1c:	00c8012c 	.word	0x00c8012c
    5d20:	00d20172 	.word	0x00d20172
    5d24:	00dc001e 	.word	0x00dc001e
    5d28:	00e60172 	.word	0x00e60172
    5d2c:	00f0001e 	.word	0x00f0001e
    5d30:	00fa0172 	.word	0x00fa0172
    5d34:	0104001e 	.word	0x0104001e
    5d38:	010e0172 	.word	0x010e0172
    5d3c:	0118005a 	.word	0x0118005a
    5d40:	0122012c 	.word	0x0122012c
    5d44:	82be50b4 	.word	0x82be50b4
    5d48:	8cbe82aa 	.word	0x8cbe82aa
    5d4c:	64963c8c 	.word	0x64963c8c
    5d50:	64dc3cd2 	.word	0x64dc3cd2
    5d54:	a08c9682 	.word	0xa08c9682
    5d58:	aadca08c 	.word	0xaadca08c
    5d5c:	a0e696dc 	.word	0xa0e696dc
    5d60:	50f03c78 	.word	0x50f03c78
    5d64:	5a78466e 	.word	0x5a78466e
    5d68:	aaaa3c96 	.word	0xaaaa3c96
    5d6c:	a0dc3cc8 	.word	0xa0dc3cc8
    5d70:	aae6a0d2 	.word	0xaae6a0d2

00005d74 <beelzebub.13385>:
    5d74:	2e002d00 44003200 88005300 f300b600     .-...2.D.S......
    5d84:	64012201 d4019201 08020702 5f023402     .".d.........4._
    5d94:	94027802 bb02a602 db02ca02 f902e802     .x..............
    5da4:	7f031f03                                ....

00005da8 <belial.13382>:
    5da8:	f0f0f0f0 b0b0b0f0 b1b6b6b6 b7b7b1b1     ................
    5db8:	b2b2b2b7 bfb8b8b8 b9b3b3b3 b5b5b9b9     ................
    5dc8:	babac2b5 bcbcbcba bebdbdbd f0f0f0be     ................
    5dd8:	b1b1f0f0 b8b7b7b6 bcb8b8b8 c9c9bcbc     ................
    5de8:	35c9c9c9 0000363a 202c6925 00000000     ...5:6..%i, ....
    5df8:	00000d0a 7379654b 65727020 64657373     ....Keys pressed
    5e08:	6925203a 00000920                       : %i ...

00005e10 <lucifer.13384>:
    5e10:	0852aa55 0d0d0d01 0d343434 34340d0d     U.R.....444...44
    5e20:	00000034 01242424 340f0f0f 08083434     4...$$$....444..
    5e30:	24240308 00780024 00007800 52aa5589     ..$$$.x..x...U.R
    5e40:	00cc0008 01707005 02030303 02d00000     .....pp.........
    5e50:	00505050 00000055 6c6c6548 6f57206f     PPP.U...Hello Wo
    5e60:	0a646c72 0000000d                       rld.....

00005e68 <mulciber.13383>:
    5e68:	03020100 02010004 00020100 01000201     ................
    5e78:	02010002 00020100 01000201 01000002     ................
    5e88:	02010000 00020100 01000201 03020100     ................
    5e98:	00000004 01000100 01000302 02010002     ................
    5ea8:	00000403 00000000 78696e55 6f706520     ........Unix epo
    5eb8:	6d206863 73756e69 46783020 61642046     ch minus 0xFF da
    5ec8:	00007379 37383933 2032315e 3334202b     ys..3987^12 + 43
    5ed8:	315e3536 203d2032 32373434 0032315e     65^12 = 4472^12.
    5ee8:	69746552 616c7563 676e6974 6c705320     Reticulating Spl
    5ef8:	73656e69 00000000 6c6f6956 65636e65     ines....Violence
    5f08:	726f7720 0000736b 73626154 00000021      works..Tabs!...
    5f18:	6c6c694b 6c694220 6e6f696c 65726961     Kill Billionaire
    5f28:	61282073 5420646e 6c6c6972 616e6f69     s (and Trilliona
    5f38:	29657269 00000000 65746e49 74736572     ire)....Interest
    5f48:	206e6920 68636574 6f6c6f6e 69207967      in technology i
    5f58:	6f6e2073 20612074 73726570 6c616e6f     s not a personal
    5f68:	00797469 50203031 544e4952 52484320     ity.10 PRINT CHR
    5f78:	30322824 2b352e35 28444e52 3b292931     $(205.5+RND(1));
    5f88:	47203a20 204f544f 00003031 67206f4e      : GOTO 10..No g
    5f98:	2e73646f 206f4e20 7473616d 2e737265     ods. No masters.
    5fa8:	206f4e20 65747865 6c616e72 62696c20      No external lib
    5fb8:	69726172 002e7365 63617053 00217365     raries..Spaces!.
    5fc8:	6e616954 656d6e61 7153206e 65726175     Tiananmen Square
    5fd8:	38393120 00000039 72656d41 20616369      1989...America 
    5fe8:	20736177 6e756f66 20646564 73206e6f     was founded on s
    5ff8:	6576616c 00007972 72656854 73692065     lavery..There is
    6008:	6c6e6f20 61632079 61746970 6e61206c      only capital an
    6018:	616c2064 00726f62 6f636e45 67617275     d labor.Encourag
    6028:	79732065 74656d6d 20636972 73616c63     e symmetric clas
    6038:	61772073 72616672 00000065 52554324     s warfare...$CUR
    6048:	544e4552 4d454d5f 00000045 694e2041     RENT_MEME...A Ni
    6058:	54206563 00005954 6e617254 69722073     ce TTY..Trans ri
    6068:	73746867 65726120 6d756820 72206e61     ghts are human r
    6078:	74686769 00000073 6e686f4a 72614320     ights...John Car
    6088:	746e6570 73277265 63734520 20657061     penter's Escape 
    6098:	6d6f7246 6e615320 61724620 7369636e     From San Francis
    60a8:	00006f63 6e696854 676e696b 6857203a     co..Thinking: Wh
    60b8:	79207461 6420756f 6877206f 79206e65     at you do when y
    60c8:	6320756f 74276e61 73756a20 75702074     ou can't just pu
    60d8:	74692074 746e6920 6e61206f 53574120     t it into an AWS
    60e8:	63756220 2e74656b 00000000 63666544      bucket.....Defc
    60f8:	73276e6f 6e616320 656c6563 00002e64     on's canceled...
    6108:	73746152 7473656e 6f4e203a 6e696874     Ratsnest: Nothin
    6118:	6f542067 216f4420 00000000 68207449     g To Do!....It h
    6128:	36207361 656b2039 002e7379 61636542     as 69 keys..Beca
    6138:	20657375 342d5456 77203032 61207361     use VT-420 was a
    6148:	6165726c 74207964 6e656b61 00000000     lready taken....
    6158:	7364694b 61687420 6e6b2074 656b636f     Kids that knocke
    6168:	6f642064 73206e77 6b636174 666f2073     d down stacks of
    6178:	6f6c6220 20736b63 77657267 20707520      blocks grew up 
    6188:	62206f74 65732065 69727563 72207974     to be security r
    6198:	61657365 65686372 002e7372 656d6954     esearchers..Time
    61a8:	61727420 206c6576 53206e69 20726174      travel in Star 
    61b8:	6b657254 20736920 6d6d6f63 79206e6f     Trek is common y
    61c8:	61207465 7961776c 63612073 65646963     et always accide
    61d8:	6c61746e 00000000 6566664f 7669736e     ntal....Offensiv
    61e8:	61682065 61776472 00006572 6c6c6f46     e hardware..Foll
    61f8:	5720776f 646c726f 676f5020 64654620     ow World Pog Fed
    6208:	74617265 206e6f69 40202020 6c726f57     eration    @Worl
    6218:	676f5064 00000000 6d6d7544 68742079     dPog....Dummy th
    6228:	20636369 65696c63 0000746e 694e2041     icc client..A Ni
    6238:	54206563 202e5954 4f206e41 6f43204b     ce TTY. An OK Co
    6248:	7475706d 002e7265 41632049 704f206e     mputer..I cAn Op
    6258:	41206e45 436f4c20 6957206b 41206854     En A LoCk WiTh A
    6268:	644f7320 41632041 0000006e 696c6f53      sOdA cAn...Soli
    6278:	69726164 69207974 6f6e2073 20612074     darity is not a 
    6288:	2077656e 6d617266 726f7765 0000006b     new framework...

00006298 <_global_impure_ptr>:
    6298:	20000014                                ... 

0000629c <__sf_fake_stderr>:
	...

000062bc <__sf_fake_stdin>:
	...

000062dc <__sf_fake_stdout>:
	...
    62fc:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    630c:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    631c:	31300046 35343332 39383736 64636261     F.0123456789abcd
    632c:	00006665                                ef..

00006330 <_init>:
    6330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6332:	46c0      	nop			; (mov r8, r8)
    6334:	bcf8      	pop	{r3, r4, r5, r6, r7}
    6336:	bc08      	pop	{r3}
    6338:	469e      	mov	lr, r3
    633a:	4770      	bx	lr

0000633c <__init_array_start>:
    633c:	000000dd 	.word	0x000000dd

00006340 <_fini>:
    6340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6342:	46c0      	nop			; (mov r8, r8)
    6344:	bcf8      	pop	{r3, r4, r5, r6, r7}
    6346:	bc08      	pop	{r3}
    6348:	469e      	mov	lr, r3
    634a:	4770      	bx	lr

0000634c <__fini_array_start>:
    634c:	000000b5 	.word	0x000000b5
