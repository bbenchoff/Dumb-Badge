
DumBadgeFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000087e4  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000020c  20000000  000087e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00002f18  2000020c  000089f0  0002020c  2**2
                  ALLOC
  3 .stack        00002004  20003124  0000b908  0002020c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY
  6 .debug_info   0003e298  00000000  00000000  0002028d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005d8b  00000000  00000000  0005e525  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00007a57  00000000  00000000  000642b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000008f0  00000000  00000000  0006bd07  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000ba8  00000000  00000000  0006c5f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001fb99  00000000  00000000  0006d19f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00015519  00000000  00000000  0008cd38  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0009073c  00000000  00000000  000a2251  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001f10  00000000  00000000  00132990  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
	// Keep the default device state after reset
	SystemCoreClock = __SYSTEM_CLOCK;
       0:	28 51 00 20 b1 34 00 00 ad 34 00 00 ad 34 00 00     (Q. .4...4...4..
	...
	config->stopbits         = USART_STOPBITS_1;
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
	config->baudrate         = 9600;
	config->receiver_enable  = true;
	config->transmitter_enable = true;
	config->clock_polarity_inverted = false;
      2c:	ad 34 00 00 00 00 00 00 00 00 00 00 ad 34 00 00     .4...........4..
	config->use_external_clock = false;
	config->ext_clock_freq   = 0;
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
	config->generator_source = GCLK_GENERATOR_0;
      3c:	e5 46 00 00 ad 34 00 00 ad 34 00 00 ad 34 00 00     .F...4...4...4..
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
	config->receive_pulse_length                    = 19;
      4c:	ad 34 00 00 ad 34 00 00 ad 34 00 00 ad 34 00 00     .4...4...4...4..
	usart_get_config_defaults(&config_usart);

	config_usart.baudrate    = SERCOMBAUD;
	config_usart.mux_setting = SERCOMMUX;
	config_usart.pinmux_pad0 = SERCOMPAD0;
	config_usart.pinmux_pad1 = SERCOMPAD1;
      5c:	ad 34 00 00 ad 34 00 00 c9 26 00 00 d9 26 00 00     .4...4...&...&..
	config_usart.pinmux_pad2 = SERCOMPAD2;
	config_usart.pinmux_pad3 = SERCOMPAD3;

	while (usart_init(&usart_instance,	 SERCOMMODULE, &config_usart) != STATUS_OK) { }
      6c:	e9 26 00 00 f9 26 00 00 09 27 00 00 19 27 00 00     .&...&...'...'..
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
      7c:	ad 34 00 00 ad 34 00 00 ad 34 00 00 ad 34 00 00     .4...4...4...4..
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	if (usart_init(module, hw, config) == STATUS_OK) {
      8c:	ad 34 00 00 ad 34 00 00 ad 34 00 00 ad 34 00 00     .4...4...4...4..
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
      9c:	fd 21 00 00 ad 34 00 00 ad 34 00 00 ad 34 00 00     .!...4...4...4..
	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
      ac:	ad 34 00 00 00 00 00 00                             .4......

000000b4 <__do_global_dtors_aux>:
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
      ba:	2b00      	cmp	r3, #0
	return (usart_hw->SYNCBUSY.reg);
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
	while (usart_is_syncing(module)) {
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop

	stdio_serial_init(&usart_instance, SERCOMMODULE, &config_usart);
	usart_enable(&usart_instance);
}
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	2000020c 	.word	0x2000020c
      d4:	00000000 	.word	0x00000000
      d8:	000087e4 	.word	0x000087e4

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000210 	.word	0x20000210
     108:	000087e4 	.word	0x000087e4
     10c:	000087e4 	.word	0x000087e4
     110:	00000000 	.word	0x00000000

00000114 <ring_init>:
	cbuf->full = false;
	cbuf->tail = (cbuf->tail + 1) % cbuf->max;
}

cbuf_handle_t ring_init(uint8_t* buffer, uint16_t size)
{
     114:	b570      	push	{r4, r5, r6, lr}
     116:	0005      	movs	r5, r0
     118:	000c      	movs	r4, r1
	cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
     11a:	200c      	movs	r0, #12
     11c:	4b04      	ldr	r3, [pc, #16]	; (130 <ring_init+0x1c>)
     11e:	4798      	blx	r3

	cbuf->buffer = buffer;
     120:	6005      	str	r5, [r0, #0]
	cbuf->max = size;
     122:	8104      	strh	r4, [r0, #8]
	return cbuf;
}

void ring_reset(cbuf_handle_t cbuf)
{
	cbuf->head = 0;
     124:	2300      	movs	r3, #0
     126:	8083      	strh	r3, [r0, #4]
	cbuf->tail = 0;
     128:	80c3      	strh	r3, [r0, #6]
	cbuf->full = false;
     12a:	7283      	strb	r3, [r0, #10]
}
     12c:	bd70      	pop	{r4, r5, r6, pc}
     12e:	46c0      	nop			; (mov r8, r8)
     130:	00004e7d 	.word	0x00004e7d

00000134 <ring_reset>:
	cbuf->head = 0;
     134:	2300      	movs	r3, #0
     136:	8083      	strh	r3, [r0, #4]
	cbuf->tail = 0;
     138:	80c3      	strh	r3, [r0, #6]
	cbuf->full = false;
     13a:	7283      	strb	r3, [r0, #10]
}
     13c:	4770      	bx	lr
	...

00000140 <ring_put>:

void ring_put(cbuf_handle_t cbuf, uint8_t data)
{
     140:	b510      	push	{r4, lr}
     142:	0004      	movs	r4, r0
	cbuf->buffer[cbuf->head] = data;
     144:	8883      	ldrh	r3, [r0, #4]
     146:	005b      	lsls	r3, r3, #1
     148:	6802      	ldr	r2, [r0, #0]
     14a:	5299      	strh	r1, [r3, r2]
	if(cbuf->full)
     14c:	7a83      	ldrb	r3, [r0, #10]
     14e:	2b00      	cmp	r3, #0
     150:	d005      	beq.n	15e <ring_put+0x1e>
		cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     152:	88c0      	ldrh	r0, [r0, #6]
     154:	3001      	adds	r0, #1
     156:	8921      	ldrh	r1, [r4, #8]
     158:	4b07      	ldr	r3, [pc, #28]	; (178 <ring_put+0x38>)
     15a:	4798      	blx	r3
     15c:	80e1      	strh	r1, [r4, #6]
	cbuf->head = (cbuf->head + 1) % cbuf->max;
     15e:	88a0      	ldrh	r0, [r4, #4]
     160:	3001      	adds	r0, #1
     162:	8921      	ldrh	r1, [r4, #8]
     164:	4b04      	ldr	r3, [pc, #16]	; (178 <ring_put+0x38>)
     166:	4798      	blx	r3
     168:	b28b      	uxth	r3, r1
     16a:	80a3      	strh	r3, [r4, #4]
	cbuf->full = (cbuf->head == cbuf->tail);
     16c:	88e1      	ldrh	r1, [r4, #6]
     16e:	1ac9      	subs	r1, r1, r3
     170:	424a      	negs	r2, r1
     172:	414a      	adcs	r2, r1
     174:	72a2      	strb	r2, [r4, #10]

	advance_pointer(cbuf);
}
     176:	bd10      	pop	{r4, pc}
     178:	00004d9d 	.word	0x00004d9d

0000017c <ring_empty>:
	return r;
}

bool ring_empty(cbuf_handle_t cbuf)
{
	return (!cbuf->full && (cbuf->head == cbuf->tail));
     17c:	7a82      	ldrb	r2, [r0, #10]
     17e:	2300      	movs	r3, #0
     180:	2a00      	cmp	r2, #0
     182:	d105      	bne.n	190 <ring_empty+0x14>
     184:	8883      	ldrh	r3, [r0, #4]
     186:	88c0      	ldrh	r0, [r0, #6]
     188:	1a1b      	subs	r3, r3, r0
     18a:	4258      	negs	r0, r3
     18c:	4143      	adcs	r3, r0
     18e:	b2db      	uxtb	r3, r3
     190:	0018      	movs	r0, r3
}
     192:	4770      	bx	lr

00000194 <ring_get>:
{
     194:	b570      	push	{r4, r5, r6, lr}
     196:	0004      	movs	r4, r0
     198:	000d      	movs	r5, r1
	if(!ring_empty(cbuf))
     19a:	4b0b      	ldr	r3, [pc, #44]	; (1c8 <ring_get+0x34>)
     19c:	4798      	blx	r3
     19e:	2800      	cmp	r0, #0
     1a0:	d10e      	bne.n	1c0 <ring_get+0x2c>
		*data = cbuf->buffer[cbuf->tail];
     1a2:	88e3      	ldrh	r3, [r4, #6]
     1a4:	005b      	lsls	r3, r3, #1
     1a6:	6822      	ldr	r2, [r4, #0]
     1a8:	5a9b      	ldrh	r3, [r3, r2]
     1aa:	702b      	strb	r3, [r5, #0]
	cbuf->full = false;
     1ac:	2300      	movs	r3, #0
     1ae:	72a3      	strb	r3, [r4, #10]
	cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     1b0:	88e0      	ldrh	r0, [r4, #6]
     1b2:	3001      	adds	r0, #1
     1b4:	8921      	ldrh	r1, [r4, #8]
     1b6:	4b05      	ldr	r3, [pc, #20]	; (1cc <ring_get+0x38>)
     1b8:	4798      	blx	r3
     1ba:	80e1      	strh	r1, [r4, #6]
		r = 0;
     1bc:	2000      	movs	r0, #0
}
     1be:	bd70      	pop	{r4, r5, r6, pc}
	int r = -1;
     1c0:	2001      	movs	r0, #1
     1c2:	4240      	negs	r0, r0
	return r;
     1c4:	e7fb      	b.n	1be <ring_get+0x2a>
     1c6:	46c0      	nop			; (mov r8, r8)
     1c8:	0000017d 	.word	0x0000017d
     1cc:	00004d9d 	.word	0x00004d9d

000001d0 <isEmptyParser>:
int rearParam = -1;
int rearParser = -1;

bool isEmptyParser(void)
{
	if(frontParser == -1)
     1d0:	4b03      	ldr	r3, [pc, #12]	; (1e0 <isEmptyParser+0x10>)
     1d2:	6818      	ldr	r0, [r3, #0]
     1d4:	3001      	adds	r0, #1
     1d6:	4243      	negs	r3, r0
     1d8:	4158      	adcs	r0, r3
     1da:	b2c0      	uxtb	r0, r0
	{
		return true;
	}
	return false;
}
     1dc:	4770      	bx	lr
     1de:	46c0      	nop			; (mov r8, r8)
     1e0:	20000008 	.word	0x20000008

000001e4 <dequeueParser>:
}
char dequeueParser(void)
{
	char temp;
	
	temp = queueParser[frontParser];
     1e4:	4a08      	ldr	r2, [pc, #32]	; (208 <dequeueParser+0x24>)
     1e6:	6813      	ldr	r3, [r2, #0]
     1e8:	4908      	ldr	r1, [pc, #32]	; (20c <dequeueParser+0x28>)
     1ea:	5cc8      	ldrb	r0, [r1, r3]
	frontParser++;
     1ec:	3301      	adds	r3, #1
     1ee:	6013      	str	r3, [r2, #0]
	if(frontParser > rearParser)
     1f0:	4a07      	ldr	r2, [pc, #28]	; (210 <dequeueParser+0x2c>)
     1f2:	6812      	ldr	r2, [r2, #0]
     1f4:	4293      	cmp	r3, r2
     1f6:	dd05      	ble.n	204 <dequeueParser+0x20>
	{
		frontParser = rearParser = -1;
     1f8:	2301      	movs	r3, #1
     1fa:	425b      	negs	r3, r3
     1fc:	4a04      	ldr	r2, [pc, #16]	; (210 <dequeueParser+0x2c>)
     1fe:	6013      	str	r3, [r2, #0]
     200:	4a01      	ldr	r2, [pc, #4]	; (208 <dequeueParser+0x24>)
     202:	6013      	str	r3, [r2, #0]
	}
	return temp;
}
     204:	4770      	bx	lr
     206:	46c0      	nop			; (mov r8, r8)
     208:	20000008 	.word	0x20000008
     20c:	20000300 	.word	0x20000300
     210:	20000010 	.word	0x20000010

00000214 <enqueueParser>:
void enqueueParser(char data)
{
	if(frontParser == -1)
     214:	4b07      	ldr	r3, [pc, #28]	; (234 <enqueueParser+0x20>)
     216:	681b      	ldr	r3, [r3, #0]
     218:	3301      	adds	r3, #1
     21a:	d006      	beq.n	22a <enqueueParser+0x16>
	{
		frontParser = 0;
	}
	rearParser++;
     21c:	4a06      	ldr	r2, [pc, #24]	; (238 <enqueueParser+0x24>)
     21e:	6813      	ldr	r3, [r2, #0]
     220:	3301      	adds	r3, #1
     222:	6013      	str	r3, [r2, #0]
	queueParser[rearParser] = data;
     224:	4a05      	ldr	r2, [pc, #20]	; (23c <enqueueParser+0x28>)
     226:	54d0      	strb	r0, [r2, r3]
}
     228:	4770      	bx	lr
		frontParser = 0;
     22a:	2200      	movs	r2, #0
     22c:	4b01      	ldr	r3, [pc, #4]	; (234 <enqueueParser+0x20>)
     22e:	601a      	str	r2, [r3, #0]
     230:	e7f4      	b.n	21c <enqueueParser+0x8>
     232:	46c0      	nop			; (mov r8, r8)
     234:	20000008 	.word	0x20000008
     238:	20000010 	.word	0x20000010
     23c:	20000300 	.word	0x20000300

00000240 <isEmptyParam>:
bool isEmptyParam(void)
{
	if(frontParam == -1)
     240:	4b03      	ldr	r3, [pc, #12]	; (250 <isEmptyParam+0x10>)
     242:	6818      	ldr	r0, [r3, #0]
     244:	3001      	adds	r0, #1
     246:	4243      	negs	r3, r0
     248:	4158      	adcs	r0, r3
     24a:	b2c0      	uxtb	r0, r0
	{
		return true;
	}
	return false;
}
     24c:	4770      	bx	lr
     24e:	46c0      	nop			; (mov r8, r8)
     250:	20000004 	.word	0x20000004

00000254 <dequeueParam>:
}
uint8_t dequeueParam(void)
{
	uint8_t temp;
	
	temp = queueParam[frontParam];
     254:	4a08      	ldr	r2, [pc, #32]	; (278 <dequeueParam+0x24>)
     256:	6813      	ldr	r3, [r2, #0]
     258:	4908      	ldr	r1, [pc, #32]	; (27c <dequeueParam+0x28>)
     25a:	5cc8      	ldrb	r0, [r1, r3]
	frontParam++;
     25c:	3301      	adds	r3, #1
     25e:	6013      	str	r3, [r2, #0]
	if(frontParam > rearParam)
     260:	4a07      	ldr	r2, [pc, #28]	; (280 <dequeueParam+0x2c>)
     262:	6812      	ldr	r2, [r2, #0]
     264:	4293      	cmp	r3, r2
     266:	dd05      	ble.n	274 <dequeueParam+0x20>
	{
		frontParam = rearParam = -1;
     268:	2301      	movs	r3, #1
     26a:	425b      	negs	r3, r3
     26c:	4a04      	ldr	r2, [pc, #16]	; (280 <dequeueParam+0x2c>)
     26e:	6013      	str	r3, [r2, #0]
     270:	4a01      	ldr	r2, [pc, #4]	; (278 <dequeueParam+0x24>)
     272:	6013      	str	r3, [r2, #0]
	}

	return temp;
}
     274:	4770      	bx	lr
     276:	46c0      	nop			; (mov r8, r8)
     278:	20000004 	.word	0x20000004
     27c:	20000334 	.word	0x20000334
     280:	2000000c 	.word	0x2000000c

00000284 <enqueueParam>:
void enqueueParam(uint8_t data)
{

	if(frontParam == -1)
     284:	4b07      	ldr	r3, [pc, #28]	; (2a4 <enqueueParam+0x20>)
     286:	681b      	ldr	r3, [r3, #0]
     288:	3301      	adds	r3, #1
     28a:	d006      	beq.n	29a <enqueueParam+0x16>
	{
		frontParam = 0;
	}
	rearParam++;
     28c:	4a06      	ldr	r2, [pc, #24]	; (2a8 <enqueueParam+0x24>)
     28e:	6813      	ldr	r3, [r2, #0]
     290:	3301      	adds	r3, #1
     292:	6013      	str	r3, [r2, #0]
	queueParam[rearParam] = data;
     294:	4a05      	ldr	r2, [pc, #20]	; (2ac <enqueueParam+0x28>)
     296:	54d0      	strb	r0, [r2, r3]
}
     298:	4770      	bx	lr
		frontParam = 0;
     29a:	2200      	movs	r2, #0
     29c:	4b01      	ldr	r3, [pc, #4]	; (2a4 <enqueueParam+0x20>)
     29e:	601a      	str	r2, [r3, #0]
     2a0:	e7f4      	b.n	28c <enqueueParam+0x8>
     2a2:	46c0      	nop			; (mov r8, r8)
     2a4:	20000004 	.word	0x20000004
     2a8:	2000000c 	.word	0x2000000c
     2ac:	20000334 	.word	0x20000334

000002b0 <clearQueues>:
void clearQueues(void)
{
     2b0:	b530      	push	{r4, r5, lr}

	for(int i = 0 ; i < (MAXSIZE - 1) ; i++)
     2b2:	4b0e      	ldr	r3, [pc, #56]	; (2ec <clearQueues+0x3c>)
     2b4:	6818      	ldr	r0, [r3, #0]
     2b6:	1e43      	subs	r3, r0, #1
     2b8:	2b00      	cmp	r3, #0
     2ba:	dd0b      	ble.n	2d4 <clearQueues+0x24>
     2bc:	0018      	movs	r0, r3
     2be:	2300      	movs	r3, #0
	{
		queueParam[i] = 0;
     2c0:	4d0b      	ldr	r5, [pc, #44]	; (2f0 <clearQueues+0x40>)
     2c2:	2200      	movs	r2, #0
		queueParser[i] = 0;
     2c4:	4c0b      	ldr	r4, [pc, #44]	; (2f4 <clearQueues+0x44>)
		queueParam[i] = 0;
     2c6:	1959      	adds	r1, r3, r5
     2c8:	700a      	strb	r2, [r1, #0]
		queueParser[i] = 0;
     2ca:	1919      	adds	r1, r3, r4
     2cc:	700a      	strb	r2, [r1, #0]
	for(int i = 0 ; i < (MAXSIZE - 1) ; i++)
     2ce:	3301      	adds	r3, #1
     2d0:	4283      	cmp	r3, r0
     2d2:	d1f8      	bne.n	2c6 <clearQueues+0x16>
	}
	
	frontParser = -1;
     2d4:	2301      	movs	r3, #1
     2d6:	425b      	negs	r3, r3
     2d8:	4a07      	ldr	r2, [pc, #28]	; (2f8 <clearQueues+0x48>)
     2da:	6013      	str	r3, [r2, #0]
	frontParam = -1;
     2dc:	4a07      	ldr	r2, [pc, #28]	; (2fc <clearQueues+0x4c>)
     2de:	6013      	str	r3, [r2, #0]
	rearParam = -1;
     2e0:	4a07      	ldr	r2, [pc, #28]	; (300 <clearQueues+0x50>)
     2e2:	6013      	str	r3, [r2, #0]
	rearParser = -1;
     2e4:	4a07      	ldr	r2, [pc, #28]	; (304 <clearQueues+0x54>)
     2e6:	6013      	str	r3, [r2, #0]
}
     2e8:	bd30      	pop	{r4, r5, pc}
     2ea:	46c0      	nop			; (mov r8, r8)
     2ec:	20000000 	.word	0x20000000
     2f0:	20000334 	.word	0x20000334
     2f4:	20000300 	.word	0x20000300
     2f8:	20000008 	.word	0x20000008
     2fc:	20000004 	.word	0x20000004
     300:	2000000c 	.word	0x2000000c
     304:	20000010 	.word	0x20000010

00000308 <queueTransmogrifier>:
void queueTransmogrifier(void)
{
     308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	[24],[80]
	
	It's like reimplementing atoi() but it's not an interview question.
	*/
	
	int param = 0;
     30a:	2500      	movs	r5, #0
	char currentByte;
	
	while(!isEmptyParser())
     30c:	4e0c      	ldr	r6, [pc, #48]	; (340 <queueTransmogrifier+0x38>)
	{
		
		currentByte = dequeueParser();		//deque from parser
     30e:	4f0d      	ldr	r7, [pc, #52]	; (344 <queueTransmogrifier+0x3c>)

		if(currentByte == 0x3B || currentByte == 0x3F) //if it's ';' or '?'
		{
			enqueueParam(param);
     310:	4c0d      	ldr	r4, [pc, #52]	; (348 <queueTransmogrifier+0x40>)
	while(!isEmptyParser())
     312:	e002      	b.n	31a <queueTransmogrifier+0x12>
			enqueueParam(param);
     314:	b2e8      	uxtb	r0, r5
     316:	47a0      	blx	r4
			param = 0;
     318:	2500      	movs	r5, #0
	while(!isEmptyParser())
     31a:	47b0      	blx	r6
     31c:	2800      	cmp	r0, #0
     31e:	d10a      	bne.n	336 <queueTransmogrifier+0x2e>
		currentByte = dequeueParser();		//deque from parser
     320:	47b8      	blx	r7
		if(currentByte == 0x3B || currentByte == 0x3F) //if it's ';' or '?'
     322:	23fb      	movs	r3, #251	; 0xfb
     324:	4003      	ands	r3, r0
     326:	2b3b      	cmp	r3, #59	; 0x3b
     328:	d0f4      	beq.n	314 <queueTransmogrifier+0xc>
		}
		else
		{
			param = (10 * param) + (int)(currentByte-48);
     32a:	00ab      	lsls	r3, r5, #2
     32c:	195d      	adds	r5, r3, r5
     32e:	006d      	lsls	r5, r5, #1
     330:	3830      	subs	r0, #48	; 0x30
     332:	1945      	adds	r5, r0, r5
     334:	e7f1      	b.n	31a <queueTransmogrifier+0x12>
		}
	}
	enqueueParam(param);
     336:	b2e8      	uxtb	r0, r5
     338:	4b03      	ldr	r3, [pc, #12]	; (348 <queueTransmogrifier+0x40>)
     33a:	4798      	blx	r3
}
     33c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     33e:	46c0      	nop			; (mov r8, r8)
     340:	000001d1 	.word	0x000001d1
     344:	000001e5 	.word	0x000001e5
     348:	00000285 	.word	0x00000285

0000034c <CSIignoreState>:
	}
}

void CSIignoreState(uint8_t character)
{
	if(character == 0x1B)
     34c:	281b      	cmp	r0, #27
     34e:	d006      	beq.n	35e <CSIignoreState+0x12>
	{
		currentState = stateESC;
	}
	else if(character >= 0x40 && character <= 0x7E)
     350:	3840      	subs	r0, #64	; 0x40
     352:	283e      	cmp	r0, #62	; 0x3e
     354:	d802      	bhi.n	35c <CSIignoreState+0x10>
	{
		currentState = stateGround;
     356:	2200      	movs	r2, #0
     358:	4b03      	ldr	r3, [pc, #12]	; (368 <CSIignoreState+0x1c>)
     35a:	701a      	strb	r2, [r3, #0]
	}
}
     35c:	4770      	bx	lr
		currentState = stateESC;
     35e:	2201      	movs	r2, #1
     360:	4b01      	ldr	r3, [pc, #4]	; (368 <CSIignoreState+0x1c>)
     362:	701a      	strb	r2, [r3, #0]
     364:	e7fa      	b.n	35c <CSIignoreState+0x10>
     366:	46c0      	nop			; (mov r8, r8)
     368:	200002f1 	.word	0x200002f1

0000036c <SC>:
/************************************************************************/

void SC()
{
	//Save cursor position
	DECSCX = xCharPos;
     36c:	4b05      	ldr	r3, [pc, #20]	; (384 <SC+0x18>)
     36e:	881a      	ldrh	r2, [r3, #0]
     370:	4b05      	ldr	r3, [pc, #20]	; (388 <SC+0x1c>)
     372:	701a      	strb	r2, [r3, #0]
	DECSCY = yCharPos;
     374:	4b05      	ldr	r3, [pc, #20]	; (38c <SC+0x20>)
     376:	881a      	ldrh	r2, [r3, #0]
     378:	4b05      	ldr	r3, [pc, #20]	; (390 <SC+0x24>)
     37a:	701a      	strb	r2, [r3, #0]
	currentState = stateGround;
     37c:	2200      	movs	r2, #0
     37e:	4b05      	ldr	r3, [pc, #20]	; (394 <SC+0x28>)
     380:	701a      	strb	r2, [r3, #0]
}
     382:	4770      	bx	lr
     384:	200002ec 	.word	0x200002ec
     388:	20000228 	.word	0x20000228
     38c:	200002ee 	.word	0x200002ee
     390:	20000229 	.word	0x20000229
     394:	200002f1 	.word	0x200002f1

00000398 <RC>:

void RC()
{
     398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//Restore cursor to saved position
	
	char tempCharacter;
	
	drawChar(consoleDisplay[xCharPos][yCharPos]);
     39a:	4c0f      	ldr	r4, [pc, #60]	; (3d8 <RC+0x40>)
     39c:	4f0f      	ldr	r7, [pc, #60]	; (3dc <RC+0x44>)
     39e:	883a      	ldrh	r2, [r7, #0]
     3a0:	4e0f      	ldr	r6, [pc, #60]	; (3e0 <RC+0x48>)
     3a2:	8831      	ldrh	r1, [r6, #0]
     3a4:	0053      	lsls	r3, r2, #1
     3a6:	189b      	adds	r3, r3, r2
     3a8:	00db      	lsls	r3, r3, #3
     3aa:	18e3      	adds	r3, r4, r3
     3ac:	5c58      	ldrb	r0, [r3, r1]
     3ae:	4d0d      	ldr	r5, [pc, #52]	; (3e4 <RC+0x4c>)
     3b0:	47a8      	blx	r5
	xCharPos = DECSCX;
     3b2:	4b0d      	ldr	r3, [pc, #52]	; (3e8 <RC+0x50>)
     3b4:	781a      	ldrb	r2, [r3, #0]
     3b6:	803a      	strh	r2, [r7, #0]
	yCharPos = DECSCY;
     3b8:	4b0c      	ldr	r3, [pc, #48]	; (3ec <RC+0x54>)
     3ba:	7819      	ldrb	r1, [r3, #0]
     3bc:	8031      	strh	r1, [r6, #0]
	tempCharacter = consoleDisplay[xCharPos][yCharPos];
     3be:	0053      	lsls	r3, r2, #1
     3c0:	189b      	adds	r3, r3, r2
     3c2:	00db      	lsls	r3, r3, #3
     3c4:	18e3      	adds	r3, r4, r3
	drawChar(tempCharacter);
     3c6:	5c58      	ldrb	r0, [r3, r1]
     3c8:	47a8      	blx	r5
	blinkCursor();
     3ca:	4b09      	ldr	r3, [pc, #36]	; (3f0 <RC+0x58>)
     3cc:	4798      	blx	r3
	currentState = stateGround;
     3ce:	2200      	movs	r2, #0
     3d0:	4b08      	ldr	r3, [pc, #32]	; (3f4 <RC+0x5c>)
     3d2:	701a      	strb	r2, [r3, #0]
}
     3d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     3d6:	46c0      	nop			; (mov r8, r8)
     3d8:	200003f4 	.word	0x200003f4
     3dc:	200002ec 	.word	0x200002ec
     3e0:	200002ee 	.word	0x200002ee
     3e4:	00003665 	.word	0x00003665
     3e8:	20000228 	.word	0x20000228
     3ec:	20000229 	.word	0x20000229
     3f0:	0000382d 	.word	0x0000382d
     3f4:	200002f1 	.word	0x200002f1

000003f8 <IND>:

void IND()
{
     3f8:	b570      	push	{r4, r5, r6, lr}
	//performs newline() if row = 24
	
	char tempCharacter;
	int xTemp = 0;
	
	if(yCharPos < 23)
     3fa:	4b19      	ldr	r3, [pc, #100]	; (460 <IND+0x68>)
     3fc:	881a      	ldrh	r2, [r3, #0]
     3fe:	2a16      	cmp	r2, #22
     400:	d914      	bls.n	42c <IND+0x34>
		drawChar(tempCharacter);
		blinkCursor();
	}
	else
	{
		xTemp = xCharPos;
     402:	4d18      	ldr	r5, [pc, #96]	; (464 <IND+0x6c>)
     404:	882c      	ldrh	r4, [r5, #0]
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     406:	0063      	lsls	r3, r4, #1
     408:	191b      	adds	r3, r3, r4
     40a:	00db      	lsls	r3, r3, #3
     40c:	4916      	ldr	r1, [pc, #88]	; (468 <IND+0x70>)
     40e:	18cb      	adds	r3, r1, r3
     410:	5c98      	ldrb	r0, [r3, r2]
     412:	4e16      	ldr	r6, [pc, #88]	; (46c <IND+0x74>)
     414:	47b0      	blx	r6
		newLine();
     416:	4b16      	ldr	r3, [pc, #88]	; (470 <IND+0x78>)
     418:	4798      	blx	r3
		drawChar(0x00);
     41a:	2000      	movs	r0, #0
     41c:	47b0      	blx	r6
		xCharPos = xTemp;
     41e:	802c      	strh	r4, [r5, #0]
		blinkCursor();
     420:	4b14      	ldr	r3, [pc, #80]	; (474 <IND+0x7c>)
     422:	4798      	blx	r3
	}
		
		currentState = stateGround;	
     424:	2200      	movs	r2, #0
     426:	4b14      	ldr	r3, [pc, #80]	; (478 <IND+0x80>)
     428:	701a      	strb	r2, [r3, #0]
}
     42a:	bd70      	pop	{r4, r5, r6, pc}
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     42c:	4c0e      	ldr	r4, [pc, #56]	; (468 <IND+0x70>)
     42e:	4d0d      	ldr	r5, [pc, #52]	; (464 <IND+0x6c>)
     430:	8829      	ldrh	r1, [r5, #0]
     432:	004b      	lsls	r3, r1, #1
     434:	185b      	adds	r3, r3, r1
     436:	00db      	lsls	r3, r3, #3
     438:	18e3      	adds	r3, r4, r3
     43a:	5c98      	ldrb	r0, [r3, r2]
     43c:	4e0b      	ldr	r6, [pc, #44]	; (46c <IND+0x74>)
     43e:	47b0      	blx	r6
		yCharPos++;
     440:	4a07      	ldr	r2, [pc, #28]	; (460 <IND+0x68>)
     442:	8813      	ldrh	r3, [r2, #0]
     444:	3301      	adds	r3, #1
     446:	b29b      	uxth	r3, r3
     448:	8013      	strh	r3, [r2, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     44a:	8829      	ldrh	r1, [r5, #0]
     44c:	004a      	lsls	r2, r1, #1
     44e:	1852      	adds	r2, r2, r1
     450:	00d2      	lsls	r2, r2, #3
     452:	18a4      	adds	r4, r4, r2
		drawChar(tempCharacter);
     454:	5ce0      	ldrb	r0, [r4, r3]
     456:	47b0      	blx	r6
		blinkCursor();
     458:	4b06      	ldr	r3, [pc, #24]	; (474 <IND+0x7c>)
     45a:	4798      	blx	r3
     45c:	e7e2      	b.n	424 <IND+0x2c>
     45e:	46c0      	nop			; (mov r8, r8)
     460:	200002ee 	.word	0x200002ee
     464:	200002ec 	.word	0x200002ec
     468:	200003f4 	.word	0x200003f4
     46c:	00003665 	.word	0x00003665
     470:	00003a05 	.word	0x00003a05
     474:	0000382d 	.word	0x0000382d
     478:	200002f1 	.word	0x200002f1

0000047c <NEL>:

void NEL()
{
     47c:	b570      	push	{r4, r5, r6, lr}
	//new line, moves down one line and to the
	//first column (CR,LF) scrolls if row = 24
	
	char tempCharacter;
	
	if(yCharPos < 23)
     47e:	4b18      	ldr	r3, [pc, #96]	; (4e0 <NEL+0x64>)
     480:	881a      	ldrh	r2, [r3, #0]
     482:	2a16      	cmp	r2, #22
     484:	d915      	bls.n	4b2 <NEL+0x36>
		drawChar(tempCharacter);
		blinkCursor();
	}
	else
	{
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     486:	4c17      	ldr	r4, [pc, #92]	; (4e4 <NEL+0x68>)
     488:	8821      	ldrh	r1, [r4, #0]
     48a:	004b      	lsls	r3, r1, #1
     48c:	185b      	adds	r3, r3, r1
     48e:	00db      	lsls	r3, r3, #3
     490:	4915      	ldr	r1, [pc, #84]	; (4e8 <NEL+0x6c>)
     492:	18cb      	adds	r3, r1, r3
     494:	5c98      	ldrb	r0, [r3, r2]
     496:	4d15      	ldr	r5, [pc, #84]	; (4ec <NEL+0x70>)
     498:	47a8      	blx	r5
		newLine();
     49a:	4b15      	ldr	r3, [pc, #84]	; (4f0 <NEL+0x74>)
     49c:	4798      	blx	r3
		drawChar(0x00);
     49e:	2000      	movs	r0, #0
     4a0:	47a8      	blx	r5
		xCharPos = 0;
     4a2:	2300      	movs	r3, #0
     4a4:	8023      	strh	r3, [r4, #0]
		blinkCursor();
     4a6:	4b13      	ldr	r3, [pc, #76]	; (4f4 <NEL+0x78>)
     4a8:	4798      	blx	r3
	}
		
	currentState = stateGround;
     4aa:	2200      	movs	r2, #0
     4ac:	4b12      	ldr	r3, [pc, #72]	; (4f8 <NEL+0x7c>)
     4ae:	701a      	strb	r2, [r3, #0]
}
     4b0:	bd70      	pop	{r4, r5, r6, pc}
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     4b2:	4c0d      	ldr	r4, [pc, #52]	; (4e8 <NEL+0x6c>)
     4b4:	4d0b      	ldr	r5, [pc, #44]	; (4e4 <NEL+0x68>)
     4b6:	8829      	ldrh	r1, [r5, #0]
     4b8:	004b      	lsls	r3, r1, #1
     4ba:	185b      	adds	r3, r3, r1
     4bc:	00db      	lsls	r3, r3, #3
     4be:	18e3      	adds	r3, r4, r3
     4c0:	5c98      	ldrb	r0, [r3, r2]
     4c2:	4e0a      	ldr	r6, [pc, #40]	; (4ec <NEL+0x70>)
     4c4:	47b0      	blx	r6
		yCharPos++;
     4c6:	4a06      	ldr	r2, [pc, #24]	; (4e0 <NEL+0x64>)
     4c8:	8813      	ldrh	r3, [r2, #0]
     4ca:	3301      	adds	r3, #1
     4cc:	b29b      	uxth	r3, r3
     4ce:	8013      	strh	r3, [r2, #0]
		xCharPos = 0;
     4d0:	2200      	movs	r2, #0
     4d2:	802a      	strh	r2, [r5, #0]
		drawChar(tempCharacter);
     4d4:	5ce0      	ldrb	r0, [r4, r3]
     4d6:	47b0      	blx	r6
		blinkCursor();
     4d8:	4b06      	ldr	r3, [pc, #24]	; (4f4 <NEL+0x78>)
     4da:	4798      	blx	r3
     4dc:	e7e5      	b.n	4aa <NEL+0x2e>
     4de:	46c0      	nop			; (mov r8, r8)
     4e0:	200002ee 	.word	0x200002ee
     4e4:	200002ec 	.word	0x200002ec
     4e8:	200003f4 	.word	0x200003f4
     4ec:	00003665 	.word	0x00003665
     4f0:	00003a05 	.word	0x00003a05
     4f4:	0000382d 	.word	0x0000382d
     4f8:	200002f1 	.word	0x200002f1

000004fc <RI>:

void RI()
{
     4fc:	b570      	push	{r4, r5, r6, lr}
	//Reverse Index
	//Moves the cursor to the same horizontal position on the preceding line
	
	char tempCharacter;
	
	if(yCharPos == 0)
     4fe:	4b10      	ldr	r3, [pc, #64]	; (540 <RI+0x44>)
     500:	881a      	ldrh	r2, [r3, #0]
     502:	2a00      	cmp	r2, #0
     504:	d103      	bne.n	50e <RI+0x12>
		yCharPos--;
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
		drawChar(tempCharacter);
		blinkCursor();
	}
	currentState = stateGround;
     506:	2200      	movs	r2, #0
     508:	4b0e      	ldr	r3, [pc, #56]	; (544 <RI+0x48>)
     50a:	701a      	strb	r2, [r3, #0]
}
     50c:	bd70      	pop	{r4, r5, r6, pc}
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     50e:	4c0e      	ldr	r4, [pc, #56]	; (548 <RI+0x4c>)
     510:	4d0e      	ldr	r5, [pc, #56]	; (54c <RI+0x50>)
     512:	8829      	ldrh	r1, [r5, #0]
     514:	004b      	lsls	r3, r1, #1
     516:	185b      	adds	r3, r3, r1
     518:	00db      	lsls	r3, r3, #3
     51a:	18e3      	adds	r3, r4, r3
     51c:	5c98      	ldrb	r0, [r3, r2]
     51e:	4e0c      	ldr	r6, [pc, #48]	; (550 <RI+0x54>)
     520:	47b0      	blx	r6
		yCharPos--;
     522:	4a07      	ldr	r2, [pc, #28]	; (540 <RI+0x44>)
     524:	8813      	ldrh	r3, [r2, #0]
     526:	3b01      	subs	r3, #1
     528:	b29b      	uxth	r3, r3
     52a:	8013      	strh	r3, [r2, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     52c:	8829      	ldrh	r1, [r5, #0]
     52e:	004a      	lsls	r2, r1, #1
     530:	1852      	adds	r2, r2, r1
     532:	00d2      	lsls	r2, r2, #3
     534:	18a4      	adds	r4, r4, r2
		drawChar(tempCharacter);
     536:	5ce0      	ldrb	r0, [r4, r3]
     538:	47b0      	blx	r6
		blinkCursor();
     53a:	4b06      	ldr	r3, [pc, #24]	; (554 <RI+0x58>)
     53c:	4798      	blx	r3
     53e:	e7e2      	b.n	506 <RI+0xa>
     540:	200002ee 	.word	0x200002ee
     544:	200002f1 	.word	0x200002f1
     548:	200003f4 	.word	0x200003f4
     54c:	200002ec 	.word	0x200002ec
     550:	00003665 	.word	0x00003665
     554:	0000382d 	.word	0x0000382d

00000558 <RIS>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     558:	f3bf 8f4f 	dsb	sy
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
     55c:	4a03      	ldr	r2, [pc, #12]	; (56c <RIS+0x14>)
     55e:	4b04      	ldr	r3, [pc, #16]	; (570 <RIS+0x18>)
     560:	60da      	str	r2, [r3, #12]
     562:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     566:	46c0      	nop			; (mov r8, r8)
     568:	e7fd      	b.n	566 <RIS+0xe>
     56a:	46c0      	nop			; (mov r8, r8)
     56c:	05fa0004 	.word	0x05fa0004
     570:	e000ed00 	.word	0xe000ed00

00000574 <escState>:
{
     574:	b510      	push	{r4, lr}
	if(character == 0x37)		//ESC + 7 - (DECSC) -
     576:	2837      	cmp	r0, #55	; 0x37
     578:	d021      	beq.n	5be <escState+0x4a>
	else if(character == 0x38)		//ESC + 8 - (DECRC) -
     57a:	2838      	cmp	r0, #56	; 0x38
     57c:	d022      	beq.n	5c4 <escState+0x50>
	else if(character == 0x44)		//ESC + D - (IND) - 
     57e:	2844      	cmp	r0, #68	; 0x44
     580:	d023      	beq.n	5ca <escState+0x56>
	else if(character == 0x45)		//ESC + E - (NEL) -
     582:	2845      	cmp	r0, #69	; 0x45
     584:	d024      	beq.n	5d0 <escState+0x5c>
	else if(character == 0x48)		//ESC + H - (HTS) - 
     586:	2848      	cmp	r0, #72	; 0x48
     588:	d025      	beq.n	5d6 <escState+0x62>
	else if(character == 0x4D)		//ESC + M - (RI)
     58a:	284d      	cmp	r0, #77	; 0x4d
     58c:	d027      	beq.n	5de <escState+0x6a>
	else if(character == 0x59)		//ESC + Z (DECID)
     58e:	2859      	cmp	r0, #89	; 0x59
     590:	d028      	beq.n	5e4 <escState+0x70>
	else if(character == 0x63)		//ESC + c - (RIS)
     592:	2863      	cmp	r0, #99	; 0x63
     594:	d02e      	beq.n	5f4 <escState+0x80>
	else if(character == 0x3E)		//ESC >
     596:	283e      	cmp	r0, #62	; 0x3e
     598:	d02e      	beq.n	5f8 <escState+0x84>
	else if(character == 0x3D)		//ESC =
     59a:	283d      	cmp	r0, #61	; 0x3d
     59c:	d030      	beq.n	600 <escState+0x8c>
	else if(character == 0x5D)		//ESC ]
     59e:	285d      	cmp	r0, #93	; 0x5d
     5a0:	d032      	beq.n	608 <escState+0x94>
	else if(character == 0x23 || character == 0x25 || character == 0x28 ||
     5a2:	22fd      	movs	r2, #253	; 0xfd
     5a4:	0003      	movs	r3, r0
     5a6:	3b23      	subs	r3, #35	; 0x23
     5a8:	4213      	tst	r3, r2
     5aa:	d031      	beq.n	610 <escState+0x9c>
     5ac:	3b05      	subs	r3, #5
     5ae:	2b01      	cmp	r3, #1
     5b0:	d92e      	bls.n	610 <escState+0x9c>
	else if(character == 0x5B)
     5b2:	285b      	cmp	r0, #91	; 0x5b
     5b4:	d032      	beq.n	61c <escState+0xa8>
		currentState = stateGround;
     5b6:	2200      	movs	r2, #0
     5b8:	4b1a      	ldr	r3, [pc, #104]	; (624 <escState+0xb0>)
     5ba:	701a      	strb	r2, [r3, #0]
}
     5bc:	e02d      	b.n	61a <escState+0xa6>
		SC();
     5be:	4b1a      	ldr	r3, [pc, #104]	; (628 <escState+0xb4>)
     5c0:	4798      	blx	r3
     5c2:	e02a      	b.n	61a <escState+0xa6>
		RC();
     5c4:	4b19      	ldr	r3, [pc, #100]	; (62c <escState+0xb8>)
     5c6:	4798      	blx	r3
     5c8:	e027      	b.n	61a <escState+0xa6>
		IND();			
     5ca:	4b19      	ldr	r3, [pc, #100]	; (630 <escState+0xbc>)
     5cc:	4798      	blx	r3
     5ce:	e024      	b.n	61a <escState+0xa6>
		NEL();
     5d0:	4b18      	ldr	r3, [pc, #96]	; (634 <escState+0xc0>)
     5d2:	4798      	blx	r3
     5d4:	e021      	b.n	61a <escState+0xa6>
}

void HTS()
{
	//set tab stop at current column, unsupported now
	currentState = stateGround;
     5d6:	2200      	movs	r2, #0
     5d8:	4b12      	ldr	r3, [pc, #72]	; (624 <escState+0xb0>)
     5da:	701a      	strb	r2, [r3, #0]
     5dc:	e01d      	b.n	61a <escState+0xa6>
		RI();
     5de:	4b16      	ldr	r3, [pc, #88]	; (638 <escState+0xc4>)
     5e0:	4798      	blx	r3
     5e2:	e01a      	b.n	61a <escState+0xa6>
		printf("%s",DECIDreturn);
     5e4:	4915      	ldr	r1, [pc, #84]	; (63c <escState+0xc8>)
     5e6:	4816      	ldr	r0, [pc, #88]	; (640 <escState+0xcc>)
     5e8:	4b16      	ldr	r3, [pc, #88]	; (644 <escState+0xd0>)
     5ea:	4798      	blx	r3
		currentState = stateGround;
     5ec:	2200      	movs	r2, #0
     5ee:	4b0d      	ldr	r3, [pc, #52]	; (624 <escState+0xb0>)
     5f0:	701a      	strb	r2, [r3, #0]
     5f2:	e012      	b.n	61a <escState+0xa6>
		RIS();
     5f4:	4b14      	ldr	r3, [pc, #80]	; (648 <escState+0xd4>)
     5f6:	4798      	blx	r3
		currentState = stateGround;
     5f8:	2200      	movs	r2, #0
     5fa:	4b0a      	ldr	r3, [pc, #40]	; (624 <escState+0xb0>)
     5fc:	701a      	strb	r2, [r3, #0]
     5fe:	e00c      	b.n	61a <escState+0xa6>
		currentState = stateGround;
     600:	2200      	movs	r2, #0
     602:	4b08      	ldr	r3, [pc, #32]	; (624 <escState+0xb0>)
     604:	701a      	strb	r2, [r3, #0]
     606:	e008      	b.n	61a <escState+0xa6>
		currentState = stateGround;
     608:	2200      	movs	r2, #0
     60a:	4b06      	ldr	r3, [pc, #24]	; (624 <escState+0xb0>)
     60c:	701a      	strb	r2, [r3, #0]
     60e:	e004      	b.n	61a <escState+0xa6>
		stateEnterBuffer = character;
     610:	4b0e      	ldr	r3, [pc, #56]	; (64c <escState+0xd8>)
     612:	7018      	strb	r0, [r3, #0]
		currentState = stateESCinter;
     614:	2202      	movs	r2, #2
     616:	4b03      	ldr	r3, [pc, #12]	; (624 <escState+0xb0>)
     618:	701a      	strb	r2, [r3, #0]
}
     61a:	bd10      	pop	{r4, pc}
		currentState = stateCSIentry;
     61c:	2203      	movs	r2, #3
     61e:	4b01      	ldr	r3, [pc, #4]	; (624 <escState+0xb0>)
     620:	701a      	strb	r2, [r3, #0]
     622:	e7fa      	b.n	61a <escState+0xa6>
     624:	200002f1 	.word	0x200002f1
     628:	0000036d 	.word	0x0000036d
     62c:	00000399 	.word	0x00000399
     630:	000003f9 	.word	0x000003f9
     634:	0000047d 	.word	0x0000047d
     638:	000004fd 	.word	0x000004fd
     63c:	000064ac 	.word	0x000064ac
     640:	000064e0 	.word	0x000064e0
     644:	00005005 	.word	0x00005005
     648:	00000559 	.word	0x00000559
     64c:	20000376 	.word	0x20000376

00000650 <CUU>:

/************************************************************************/
/*    CSI mnemonic functions                                            */
/************************************************************************/
void CUU() // Cursor Up
{
     650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	unsigned char tempCharacter;
	uint8_t parameter = 0;
	
	if(isEmptyParam())
     652:	4b20      	ldr	r3, [pc, #128]	; (6d4 <CUU+0x84>)
     654:	4798      	blx	r3
	{
		parameter = 1;
     656:	2401      	movs	r4, #1
	if(isEmptyParam())
     658:	2800      	cmp	r0, #0
     65a:	d01d      	beq.n	698 <CUU+0x48>
		{
			parameter = 1;
		}
	}
	
	if((yCharPos - parameter) >= 0 && (yCharPos - parameter) <= 24)
     65c:	4b1e      	ldr	r3, [pc, #120]	; (6d8 <CUU+0x88>)
     65e:	881a      	ldrh	r2, [r3, #0]
     660:	1b13      	subs	r3, r2, r4
     662:	2b18      	cmp	r3, #24
     664:	d91e      	bls.n	6a4 <CUU+0x54>
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
		drawChar(tempCharacter);
	}
	else
	{
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     666:	4c1d      	ldr	r4, [pc, #116]	; (6dc <CUU+0x8c>)
     668:	4e1d      	ldr	r6, [pc, #116]	; (6e0 <CUU+0x90>)
     66a:	8831      	ldrh	r1, [r6, #0]
     66c:	004b      	lsls	r3, r1, #1
     66e:	185b      	adds	r3, r3, r1
     670:	00db      	lsls	r3, r3, #3
     672:	18e3      	adds	r3, r4, r3
     674:	5c98      	ldrb	r0, [r3, r2]
     676:	4d1b      	ldr	r5, [pc, #108]	; (6e4 <CUU+0x94>)
     678:	47a8      	blx	r5
		yCharPos = 0;
     67a:	2200      	movs	r2, #0
     67c:	4b16      	ldr	r3, [pc, #88]	; (6d8 <CUU+0x88>)
     67e:	801a      	strh	r2, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     680:	8832      	ldrh	r2, [r6, #0]
     682:	0053      	lsls	r3, r2, #1
     684:	189b      	adds	r3, r3, r2
     686:	00db      	lsls	r3, r3, #3
		drawChar(tempCharacter);
     688:	5d18      	ldrb	r0, [r3, r4]
     68a:	47a8      	blx	r5
	}
	
	blinkCursor();
     68c:	4b16      	ldr	r3, [pc, #88]	; (6e8 <CUU+0x98>)
     68e:	4798      	blx	r3
	currentState = stateGround;
     690:	2200      	movs	r2, #0
     692:	4b16      	ldr	r3, [pc, #88]	; (6ec <CUU+0x9c>)
     694:	701a      	strb	r2, [r3, #0]
}
     696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		parameter = dequeueParam();
     698:	4b15      	ldr	r3, [pc, #84]	; (6f0 <CUU+0xa0>)
     69a:	4798      	blx	r3
     69c:	1e04      	subs	r4, r0, #0
		if(parameter == 0)
     69e:	d1dd      	bne.n	65c <CUU+0xc>
			parameter = 1;
     6a0:	3401      	adds	r4, #1
     6a2:	e7db      	b.n	65c <CUU+0xc>
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     6a4:	4d0d      	ldr	r5, [pc, #52]	; (6dc <CUU+0x8c>)
     6a6:	4e0e      	ldr	r6, [pc, #56]	; (6e0 <CUU+0x90>)
     6a8:	8831      	ldrh	r1, [r6, #0]
     6aa:	004b      	lsls	r3, r1, #1
     6ac:	185b      	adds	r3, r3, r1
     6ae:	00db      	lsls	r3, r3, #3
     6b0:	18eb      	adds	r3, r5, r3
     6b2:	5c98      	ldrb	r0, [r3, r2]
     6b4:	4f0b      	ldr	r7, [pc, #44]	; (6e4 <CUU+0x94>)
     6b6:	47b8      	blx	r7
		yCharPos = yCharPos - parameter;
     6b8:	4b07      	ldr	r3, [pc, #28]	; (6d8 <CUU+0x88>)
     6ba:	8818      	ldrh	r0, [r3, #0]
     6bc:	1b04      	subs	r4, r0, r4
     6be:	b2a4      	uxth	r4, r4
     6c0:	801c      	strh	r4, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     6c2:	8832      	ldrh	r2, [r6, #0]
     6c4:	0053      	lsls	r3, r2, #1
     6c6:	189b      	adds	r3, r3, r2
     6c8:	00db      	lsls	r3, r3, #3
     6ca:	18ed      	adds	r5, r5, r3
		drawChar(tempCharacter);
     6cc:	5d28      	ldrb	r0, [r5, r4]
     6ce:	47b8      	blx	r7
     6d0:	e7dc      	b.n	68c <CUU+0x3c>
     6d2:	46c0      	nop			; (mov r8, r8)
     6d4:	00000241 	.word	0x00000241
     6d8:	200002ee 	.word	0x200002ee
     6dc:	200003f4 	.word	0x200003f4
     6e0:	200002ec 	.word	0x200002ec
     6e4:	00003665 	.word	0x00003665
     6e8:	0000382d 	.word	0x0000382d
     6ec:	200002f1 	.word	0x200002f1
     6f0:	00000255 	.word	0x00000255

000006f4 <CUD>:

void CUD() //Cursor Down
{
     6f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	unsigned char tempCharacter;
	uint8_t parameter = 0;
	
	if(isEmptyParam())
     6f6:	4b20      	ldr	r3, [pc, #128]	; (778 <CUD+0x84>)
     6f8:	4798      	blx	r3
	{
		parameter = 1;
     6fa:	2401      	movs	r4, #1
	if(isEmptyParam())
     6fc:	2800      	cmp	r0, #0
     6fe:	d01e      	beq.n	73e <CUD+0x4a>
		if(parameter == 0)
		{
			parameter = 1;
		}
	}
	if((yCharPos + parameter) <= 23)
     700:	4b1e      	ldr	r3, [pc, #120]	; (77c <CUD+0x88>)
     702:	881a      	ldrh	r2, [r3, #0]
     704:	18a3      	adds	r3, r4, r2
     706:	2b17      	cmp	r3, #23
     708:	dd1f      	ble.n	74a <CUD+0x56>
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
		drawChar(tempCharacter);
	}
	else
	{
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     70a:	4c1d      	ldr	r4, [pc, #116]	; (780 <CUD+0x8c>)
     70c:	4e1d      	ldr	r6, [pc, #116]	; (784 <CUD+0x90>)
     70e:	8831      	ldrh	r1, [r6, #0]
     710:	004b      	lsls	r3, r1, #1
     712:	185b      	adds	r3, r3, r1
     714:	00db      	lsls	r3, r3, #3
     716:	18e3      	adds	r3, r4, r3
     718:	5c98      	ldrb	r0, [r3, r2]
     71a:	4d1b      	ldr	r5, [pc, #108]	; (788 <CUD+0x94>)
     71c:	47a8      	blx	r5
		yCharPos = 23;
     71e:	2217      	movs	r2, #23
     720:	4b16      	ldr	r3, [pc, #88]	; (77c <CUD+0x88>)
     722:	801a      	strh	r2, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     724:	8832      	ldrh	r2, [r6, #0]
     726:	0053      	lsls	r3, r2, #1
     728:	189b      	adds	r3, r3, r2
     72a:	00db      	lsls	r3, r3, #3
     72c:	18e3      	adds	r3, r4, r3
		drawChar(tempCharacter);
     72e:	7dd8      	ldrb	r0, [r3, #23]
     730:	47a8      	blx	r5
	}

	blinkCursor();
     732:	4b16      	ldr	r3, [pc, #88]	; (78c <CUD+0x98>)
     734:	4798      	blx	r3
	currentState = stateGround;
     736:	2200      	movs	r2, #0
     738:	4b15      	ldr	r3, [pc, #84]	; (790 <CUD+0x9c>)
     73a:	701a      	strb	r2, [r3, #0]
}
     73c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		parameter = dequeueParam();
     73e:	4b15      	ldr	r3, [pc, #84]	; (794 <CUD+0xa0>)
     740:	4798      	blx	r3
     742:	1e04      	subs	r4, r0, #0
		if(parameter == 0)
     744:	d1dc      	bne.n	700 <CUD+0xc>
			parameter = 1;
     746:	3401      	adds	r4, #1
     748:	e7da      	b.n	700 <CUD+0xc>
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     74a:	4d0d      	ldr	r5, [pc, #52]	; (780 <CUD+0x8c>)
     74c:	4e0d      	ldr	r6, [pc, #52]	; (784 <CUD+0x90>)
     74e:	8831      	ldrh	r1, [r6, #0]
     750:	004b      	lsls	r3, r1, #1
     752:	185b      	adds	r3, r3, r1
     754:	00db      	lsls	r3, r3, #3
     756:	18eb      	adds	r3, r5, r3
     758:	5c98      	ldrb	r0, [r3, r2]
     75a:	4f0b      	ldr	r7, [pc, #44]	; (788 <CUD+0x94>)
     75c:	47b8      	blx	r7
		yCharPos = yCharPos + parameter;
     75e:	4b07      	ldr	r3, [pc, #28]	; (77c <CUD+0x88>)
     760:	8818      	ldrh	r0, [r3, #0]
     762:	1904      	adds	r4, r0, r4
     764:	b2a4      	uxth	r4, r4
     766:	801c      	strh	r4, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     768:	8832      	ldrh	r2, [r6, #0]
     76a:	0053      	lsls	r3, r2, #1
     76c:	189b      	adds	r3, r3, r2
     76e:	00db      	lsls	r3, r3, #3
     770:	18ed      	adds	r5, r5, r3
		drawChar(tempCharacter);
     772:	5d28      	ldrb	r0, [r5, r4]
     774:	47b8      	blx	r7
     776:	e7dc      	b.n	732 <CUD+0x3e>
     778:	00000241 	.word	0x00000241
     77c:	200002ee 	.word	0x200002ee
     780:	200003f4 	.word	0x200003f4
     784:	200002ec 	.word	0x200002ec
     788:	00003665 	.word	0x00003665
     78c:	0000382d 	.word	0x0000382d
     790:	200002f1 	.word	0x200002f1
     794:	00000255 	.word	0x00000255

00000798 <CUF>:

void CUF() //Cursor Forward
{
     798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	unsigned char tempCharacter;
	uint8_t parameter = 0;
	
	if(isEmptyParam())
     79a:	4b21      	ldr	r3, [pc, #132]	; (820 <CUF+0x88>)
     79c:	4798      	blx	r3
	{
		parameter = 1;
     79e:	2401      	movs	r4, #1
	if(isEmptyParam())
     7a0:	2800      	cmp	r0, #0
     7a2:	d01f      	beq.n	7e4 <CUF+0x4c>
		{
			parameter = 1;
		}
	}
	
	if(xCharPos + parameter <= 79)
     7a4:	4b1f      	ldr	r3, [pc, #124]	; (824 <CUF+0x8c>)
     7a6:	881a      	ldrh	r2, [r3, #0]
     7a8:	18a3      	adds	r3, r4, r2
     7aa:	2b4f      	cmp	r3, #79	; 0x4f
     7ac:	dd20      	ble.n	7f0 <CUF+0x58>
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
		drawChar(tempCharacter);
	}
	else
	{
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     7ae:	4c1e      	ldr	r4, [pc, #120]	; (828 <CUF+0x90>)
     7b0:	4e1e      	ldr	r6, [pc, #120]	; (82c <CUF+0x94>)
     7b2:	8831      	ldrh	r1, [r6, #0]
     7b4:	0053      	lsls	r3, r2, #1
     7b6:	189b      	adds	r3, r3, r2
     7b8:	00db      	lsls	r3, r3, #3
     7ba:	18e3      	adds	r3, r4, r3
     7bc:	5c58      	ldrb	r0, [r3, r1]
     7be:	4d1c      	ldr	r5, [pc, #112]	; (830 <CUF+0x98>)
     7c0:	47a8      	blx	r5
		xCharPos = 79;
     7c2:	224f      	movs	r2, #79	; 0x4f
     7c4:	4b17      	ldr	r3, [pc, #92]	; (824 <CUF+0x8c>)
     7c6:	801a      	strh	r2, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     7c8:	8833      	ldrh	r3, [r6, #0]
     7ca:	18e4      	adds	r4, r4, r3
     7cc:	23ed      	movs	r3, #237	; 0xed
     7ce:	00db      	lsls	r3, r3, #3
     7d0:	469c      	mov	ip, r3
     7d2:	4464      	add	r4, ip
		drawChar(tempCharacter);	
     7d4:	7820      	ldrb	r0, [r4, #0]
     7d6:	47a8      	blx	r5
	}
	blinkCursor();
     7d8:	4b16      	ldr	r3, [pc, #88]	; (834 <CUF+0x9c>)
     7da:	4798      	blx	r3
	currentState = stateGround;
     7dc:	2200      	movs	r2, #0
     7de:	4b16      	ldr	r3, [pc, #88]	; (838 <CUF+0xa0>)
     7e0:	701a      	strb	r2, [r3, #0]
}
     7e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		parameter = dequeueParam();
     7e4:	4b15      	ldr	r3, [pc, #84]	; (83c <CUF+0xa4>)
     7e6:	4798      	blx	r3
     7e8:	1e04      	subs	r4, r0, #0
		if(parameter == 0)
     7ea:	d1db      	bne.n	7a4 <CUF+0xc>
			parameter = 1;
     7ec:	3401      	adds	r4, #1
     7ee:	e7d9      	b.n	7a4 <CUF+0xc>
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     7f0:	4d0d      	ldr	r5, [pc, #52]	; (828 <CUF+0x90>)
     7f2:	4e0e      	ldr	r6, [pc, #56]	; (82c <CUF+0x94>)
     7f4:	8831      	ldrh	r1, [r6, #0]
     7f6:	0053      	lsls	r3, r2, #1
     7f8:	189b      	adds	r3, r3, r2
     7fa:	00db      	lsls	r3, r3, #3
     7fc:	18eb      	adds	r3, r5, r3
     7fe:	5c58      	ldrb	r0, [r3, r1]
     800:	4f0b      	ldr	r7, [pc, #44]	; (830 <CUF+0x98>)
     802:	47b8      	blx	r7
		xCharPos = xCharPos + parameter;
     804:	4b07      	ldr	r3, [pc, #28]	; (824 <CUF+0x8c>)
     806:	8818      	ldrh	r0, [r3, #0]
     808:	1904      	adds	r4, r0, r4
     80a:	b2a4      	uxth	r4, r4
     80c:	801c      	strh	r4, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     80e:	8833      	ldrh	r3, [r6, #0]
     810:	0060      	lsls	r0, r4, #1
     812:	1904      	adds	r4, r0, r4
     814:	00e4      	lsls	r4, r4, #3
     816:	192c      	adds	r4, r5, r4
		drawChar(tempCharacter);
     818:	5ce0      	ldrb	r0, [r4, r3]
     81a:	47b8      	blx	r7
     81c:	e7dc      	b.n	7d8 <CUF+0x40>
     81e:	46c0      	nop			; (mov r8, r8)
     820:	00000241 	.word	0x00000241
     824:	200002ec 	.word	0x200002ec
     828:	200003f4 	.word	0x200003f4
     82c:	200002ee 	.word	0x200002ee
     830:	00003665 	.word	0x00003665
     834:	0000382d 	.word	0x0000382d
     838:	200002f1 	.word	0x200002f1
     83c:	00000255 	.word	0x00000255

00000840 <CUB>:

void CUB() //Cursor Backward
{
     840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	unsigned char tempCharacter;
	uint8_t parameter = 0;
	
	if(isEmptyParam())
     842:	4b1e      	ldr	r3, [pc, #120]	; (8bc <CUB+0x7c>)
     844:	4798      	blx	r3
	{
		parameter = 1;
     846:	2601      	movs	r6, #1
	if(isEmptyParam())
     848:	2800      	cmp	r0, #0
     84a:	d01f      	beq.n	88c <CUB+0x4c>
		{
			parameter = 1;
		}
	}
	
	if(xCharPos - parameter >= 0)
     84c:	4b1c      	ldr	r3, [pc, #112]	; (8c0 <CUB+0x80>)
     84e:	881a      	ldrh	r2, [r3, #0]
     850:	1b93      	subs	r3, r2, r6
     852:	d421      	bmi.n	898 <CUB+0x58>
	{
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     854:	4c1b      	ldr	r4, [pc, #108]	; (8c4 <CUB+0x84>)
     856:	4d1c      	ldr	r5, [pc, #112]	; (8c8 <CUB+0x88>)
     858:	8829      	ldrh	r1, [r5, #0]
     85a:	0053      	lsls	r3, r2, #1
     85c:	189b      	adds	r3, r3, r2
     85e:	00db      	lsls	r3, r3, #3
     860:	18e3      	adds	r3, r4, r3
     862:	5c58      	ldrb	r0, [r3, r1]
     864:	4f19      	ldr	r7, [pc, #100]	; (8cc <CUB+0x8c>)
     866:	47b8      	blx	r7
		xCharPos = xCharPos - parameter;
     868:	4b15      	ldr	r3, [pc, #84]	; (8c0 <CUB+0x80>)
     86a:	8818      	ldrh	r0, [r3, #0]
     86c:	1b80      	subs	r0, r0, r6
     86e:	b280      	uxth	r0, r0
     870:	8018      	strh	r0, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     872:	882a      	ldrh	r2, [r5, #0]
     874:	0043      	lsls	r3, r0, #1
     876:	1818      	adds	r0, r3, r0
     878:	00c0      	lsls	r0, r0, #3
     87a:	1820      	adds	r0, r4, r0
		drawChar(tempCharacter);
     87c:	5c80      	ldrb	r0, [r0, r2]
     87e:	47b8      	blx	r7
		drawChar(consoleDisplay[xCharPos][yCharPos]);
		xCharPos = 0;
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
		drawChar(tempCharacter);
	}
	blinkCursor();
     880:	4b13      	ldr	r3, [pc, #76]	; (8d0 <CUB+0x90>)
     882:	4798      	blx	r3
	currentState = stateGround;
     884:	2200      	movs	r2, #0
     886:	4b13      	ldr	r3, [pc, #76]	; (8d4 <CUB+0x94>)
     888:	701a      	strb	r2, [r3, #0]
}
     88a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		parameter = dequeueParam();
     88c:	4b12      	ldr	r3, [pc, #72]	; (8d8 <CUB+0x98>)
     88e:	4798      	blx	r3
     890:	1e06      	subs	r6, r0, #0
		if(parameter == 0)
     892:	d1db      	bne.n	84c <CUB+0xc>
			parameter = 1;
     894:	3601      	adds	r6, #1
     896:	e7d9      	b.n	84c <CUB+0xc>
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     898:	4d0a      	ldr	r5, [pc, #40]	; (8c4 <CUB+0x84>)
     89a:	4e0b      	ldr	r6, [pc, #44]	; (8c8 <CUB+0x88>)
     89c:	8831      	ldrh	r1, [r6, #0]
     89e:	0053      	lsls	r3, r2, #1
     8a0:	189b      	adds	r3, r3, r2
     8a2:	00db      	lsls	r3, r3, #3
     8a4:	18eb      	adds	r3, r5, r3
     8a6:	5c58      	ldrb	r0, [r3, r1]
     8a8:	4c08      	ldr	r4, [pc, #32]	; (8cc <CUB+0x8c>)
     8aa:	47a0      	blx	r4
		xCharPos = 0;
     8ac:	2200      	movs	r2, #0
     8ae:	4b04      	ldr	r3, [pc, #16]	; (8c0 <CUB+0x80>)
     8b0:	801a      	strh	r2, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     8b2:	8833      	ldrh	r3, [r6, #0]
		drawChar(tempCharacter);
     8b4:	5ce8      	ldrb	r0, [r5, r3]
     8b6:	47a0      	blx	r4
     8b8:	e7e2      	b.n	880 <CUB+0x40>
     8ba:	46c0      	nop			; (mov r8, r8)
     8bc:	00000241 	.word	0x00000241
     8c0:	200002ec 	.word	0x200002ec
     8c4:	200003f4 	.word	0x200003f4
     8c8:	200002ee 	.word	0x200002ee
     8cc:	00003665 	.word	0x00003665
     8d0:	0000382d 	.word	0x0000382d
     8d4:	200002f1 	.word	0x200002f1
     8d8:	00000255 	.word	0x00000255

000008dc <CNL>:

void CNL() //Cursor Next Line
{
     8dc:	b570      	push	{r4, r5, r6, lr}
	unsigned char tempCharacter;
	uint8_t parameter = 0;
	
	if(isEmptyParam())
     8de:	4b1d      	ldr	r3, [pc, #116]	; (954 <CNL+0x78>)
     8e0:	4798      	blx	r3
	{
		parameter = 1;
     8e2:	2401      	movs	r4, #1
	if(isEmptyParam())
     8e4:	2800      	cmp	r0, #0
     8e6:	d01c      	beq.n	922 <CNL+0x46>
		{
			parameter = 1;
		}
	}
	
	xCharPos = 0;
     8e8:	2200      	movs	r2, #0
     8ea:	4b1b      	ldr	r3, [pc, #108]	; (958 <CNL+0x7c>)
     8ec:	801a      	strh	r2, [r3, #0]
	
	if((yCharPos + parameter) <= 23)
     8ee:	4b1b      	ldr	r3, [pc, #108]	; (95c <CNL+0x80>)
     8f0:	881b      	ldrh	r3, [r3, #0]
     8f2:	18e2      	adds	r2, r4, r3
     8f4:	2a17      	cmp	r2, #23
     8f6:	dd1a      	ble.n	92e <CNL+0x52>
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
		drawChar(tempCharacter);
	}
	else
	{
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     8f8:	4c19      	ldr	r4, [pc, #100]	; (960 <CNL+0x84>)
     8fa:	5ce0      	ldrb	r0, [r4, r3]
     8fc:	4d19      	ldr	r5, [pc, #100]	; (964 <CNL+0x88>)
     8fe:	47a8      	blx	r5
		yCharPos = 23;
     900:	2217      	movs	r2, #23
     902:	4b16      	ldr	r3, [pc, #88]	; (95c <CNL+0x80>)
     904:	801a      	strh	r2, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     906:	4b14      	ldr	r3, [pc, #80]	; (958 <CNL+0x7c>)
     908:	881a      	ldrh	r2, [r3, #0]
     90a:	0053      	lsls	r3, r2, #1
     90c:	189b      	adds	r3, r3, r2
     90e:	00db      	lsls	r3, r3, #3
     910:	18e3      	adds	r3, r4, r3
		drawChar(tempCharacter);
     912:	7dd8      	ldrb	r0, [r3, #23]
     914:	47a8      	blx	r5
	}

	blinkCursor();
     916:	4b14      	ldr	r3, [pc, #80]	; (968 <CNL+0x8c>)
     918:	4798      	blx	r3
	currentState = stateGround;	
     91a:	2200      	movs	r2, #0
     91c:	4b13      	ldr	r3, [pc, #76]	; (96c <CNL+0x90>)
     91e:	701a      	strb	r2, [r3, #0]
}
     920:	bd70      	pop	{r4, r5, r6, pc}
		parameter = dequeueParam();
     922:	4b13      	ldr	r3, [pc, #76]	; (970 <CNL+0x94>)
     924:	4798      	blx	r3
     926:	1e04      	subs	r4, r0, #0
		if(parameter == 0)
     928:	d1de      	bne.n	8e8 <CNL+0xc>
			parameter = 1;
     92a:	3401      	adds	r4, #1
     92c:	e7dc      	b.n	8e8 <CNL+0xc>
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     92e:	4d0c      	ldr	r5, [pc, #48]	; (960 <CNL+0x84>)
     930:	5ce8      	ldrb	r0, [r5, r3]
     932:	4e0c      	ldr	r6, [pc, #48]	; (964 <CNL+0x88>)
     934:	47b0      	blx	r6
		yCharPos = yCharPos + parameter;
     936:	4b09      	ldr	r3, [pc, #36]	; (95c <CNL+0x80>)
     938:	8818      	ldrh	r0, [r3, #0]
     93a:	1904      	adds	r4, r0, r4
     93c:	b2a4      	uxth	r4, r4
     93e:	801c      	strh	r4, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     940:	4b05      	ldr	r3, [pc, #20]	; (958 <CNL+0x7c>)
     942:	881a      	ldrh	r2, [r3, #0]
     944:	0053      	lsls	r3, r2, #1
     946:	189b      	adds	r3, r3, r2
     948:	00db      	lsls	r3, r3, #3
     94a:	18eb      	adds	r3, r5, r3
		drawChar(tempCharacter);
     94c:	5d18      	ldrb	r0, [r3, r4]
     94e:	47b0      	blx	r6
     950:	e7e1      	b.n	916 <CNL+0x3a>
     952:	46c0      	nop			; (mov r8, r8)
     954:	00000241 	.word	0x00000241
     958:	200002ec 	.word	0x200002ec
     95c:	200002ee 	.word	0x200002ee
     960:	200003f4 	.word	0x200003f4
     964:	00003665 	.word	0x00003665
     968:	0000382d 	.word	0x0000382d
     96c:	200002f1 	.word	0x200002f1
     970:	00000255 	.word	0x00000255

00000974 <CPL>:

void CPL() //Cursor Preceding Line
{
     974:	b570      	push	{r4, r5, r6, lr}
	unsigned char tempCharacter;
	uint8_t parameter = 0;
	
	if(isEmptyParam())
     976:	4b1c      	ldr	r3, [pc, #112]	; (9e8 <CPL+0x74>)
     978:	4798      	blx	r3
	{
		parameter = 1;
     97a:	2401      	movs	r4, #1
	if(isEmptyParam())
     97c:	2800      	cmp	r0, #0
     97e:	d01b      	beq.n	9b8 <CPL+0x44>
		{
			parameter = 1;
		}
	}
	
	xCharPos = 0;
     980:	2200      	movs	r2, #0
     982:	4b1a      	ldr	r3, [pc, #104]	; (9ec <CPL+0x78>)
     984:	801a      	strh	r2, [r3, #0]
	
	if((yCharPos - parameter) >= 0 && (yCharPos - parameter) <= 24)
     986:	4b1a      	ldr	r3, [pc, #104]	; (9f0 <CPL+0x7c>)
     988:	881b      	ldrh	r3, [r3, #0]
     98a:	1b1a      	subs	r2, r3, r4
     98c:	2a18      	cmp	r2, #24
     98e:	d919      	bls.n	9c4 <CPL+0x50>
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
		drawChar(tempCharacter);
	}
	else
	{
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     990:	4d18      	ldr	r5, [pc, #96]	; (9f4 <CPL+0x80>)
     992:	5ce8      	ldrb	r0, [r5, r3]
     994:	4c18      	ldr	r4, [pc, #96]	; (9f8 <CPL+0x84>)
     996:	47a0      	blx	r4
		yCharPos = 0;
     998:	2200      	movs	r2, #0
     99a:	4b15      	ldr	r3, [pc, #84]	; (9f0 <CPL+0x7c>)
     99c:	801a      	strh	r2, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     99e:	4b13      	ldr	r3, [pc, #76]	; (9ec <CPL+0x78>)
     9a0:	881a      	ldrh	r2, [r3, #0]
     9a2:	0053      	lsls	r3, r2, #1
     9a4:	189b      	adds	r3, r3, r2
     9a6:	00db      	lsls	r3, r3, #3
		drawChar(tempCharacter);
     9a8:	5d58      	ldrb	r0, [r3, r5]
     9aa:	47a0      	blx	r4
	}
	
	blinkCursor();
     9ac:	4b13      	ldr	r3, [pc, #76]	; (9fc <CPL+0x88>)
     9ae:	4798      	blx	r3
	currentState = stateGround;
     9b0:	2200      	movs	r2, #0
     9b2:	4b13      	ldr	r3, [pc, #76]	; (a00 <CPL+0x8c>)
     9b4:	701a      	strb	r2, [r3, #0]
	
}
     9b6:	bd70      	pop	{r4, r5, r6, pc}
		parameter = dequeueParam();
     9b8:	4b12      	ldr	r3, [pc, #72]	; (a04 <CPL+0x90>)
     9ba:	4798      	blx	r3
     9bc:	1e04      	subs	r4, r0, #0
		if(parameter == 0)
     9be:	d1df      	bne.n	980 <CPL+0xc>
			parameter = 1;
     9c0:	3401      	adds	r4, #1
     9c2:	e7dd      	b.n	980 <CPL+0xc>
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     9c4:	4d0b      	ldr	r5, [pc, #44]	; (9f4 <CPL+0x80>)
     9c6:	5ce8      	ldrb	r0, [r5, r3]
     9c8:	4e0b      	ldr	r6, [pc, #44]	; (9f8 <CPL+0x84>)
     9ca:	47b0      	blx	r6
		yCharPos = yCharPos - parameter;
     9cc:	4b08      	ldr	r3, [pc, #32]	; (9f0 <CPL+0x7c>)
     9ce:	8818      	ldrh	r0, [r3, #0]
     9d0:	1b04      	subs	r4, r0, r4
     9d2:	b2a4      	uxth	r4, r4
     9d4:	801c      	strh	r4, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     9d6:	4b05      	ldr	r3, [pc, #20]	; (9ec <CPL+0x78>)
     9d8:	881a      	ldrh	r2, [r3, #0]
     9da:	0053      	lsls	r3, r2, #1
     9dc:	189b      	adds	r3, r3, r2
     9de:	00db      	lsls	r3, r3, #3
     9e0:	18eb      	adds	r3, r5, r3
		drawChar(tempCharacter);
     9e2:	5d18      	ldrb	r0, [r3, r4]
     9e4:	47b0      	blx	r6
     9e6:	e7e1      	b.n	9ac <CPL+0x38>
     9e8:	00000241 	.word	0x00000241
     9ec:	200002ec 	.word	0x200002ec
     9f0:	200002ee 	.word	0x200002ee
     9f4:	200003f4 	.word	0x200003f4
     9f8:	00003665 	.word	0x00003665
     9fc:	0000382d 	.word	0x0000382d
     a00:	200002f1 	.word	0x200002f1
     a04:	00000255 	.word	0x00000255

00000a08 <CHA>:

void CHA() //Cursor Horizontal Absolute
{
     a08:	b5f0      	push	{r4, r5, r6, r7, lr}
     a0a:	46c6      	mov	lr, r8
     a0c:	b500      	push	{lr}
	unsigned char tempCharacter;
	uint8_t parameter = 0;
	
	if(isEmptyParam())
     a0e:	4b17      	ldr	r3, [pc, #92]	; (a6c <CHA+0x64>)
     a10:	4798      	blx	r3
	{
		parameter = 1;
     a12:	2501      	movs	r5, #1
	if(isEmptyParam())
     a14:	2800      	cmp	r0, #0
     a16:	d01c      	beq.n	a52 <CHA+0x4a>
		{
			parameter = 79;
		}
	}
	
	drawChar(consoleDisplay[xCharPos][yCharPos]);
     a18:	4c15      	ldr	r4, [pc, #84]	; (a70 <CHA+0x68>)
     a1a:	4f16      	ldr	r7, [pc, #88]	; (a74 <CHA+0x6c>)
     a1c:	883a      	ldrh	r2, [r7, #0]
     a1e:	4e16      	ldr	r6, [pc, #88]	; (a78 <CHA+0x70>)
     a20:	8831      	ldrh	r1, [r6, #0]
     a22:	0053      	lsls	r3, r2, #1
     a24:	189b      	adds	r3, r3, r2
     a26:	00db      	lsls	r3, r3, #3
     a28:	18e3      	adds	r3, r4, r3
     a2a:	5c58      	ldrb	r0, [r3, r1]
     a2c:	4b13      	ldr	r3, [pc, #76]	; (a7c <CHA+0x74>)
     a2e:	4698      	mov	r8, r3
     a30:	4798      	blx	r3
	xCharPos = parameter;
     a32:	803d      	strh	r5, [r7, #0]
	tempCharacter = consoleDisplay[xCharPos][yCharPos];
     a34:	8832      	ldrh	r2, [r6, #0]
     a36:	006b      	lsls	r3, r5, #1
     a38:	195b      	adds	r3, r3, r5
     a3a:	00db      	lsls	r3, r3, #3
     a3c:	18e3      	adds	r3, r4, r3
	drawChar(tempCharacter);
     a3e:	5c98      	ldrb	r0, [r3, r2]
     a40:	47c0      	blx	r8
	
	blinkCursor();
     a42:	4b0f      	ldr	r3, [pc, #60]	; (a80 <CHA+0x78>)
     a44:	4798      	blx	r3
	currentState = stateGround;
     a46:	2200      	movs	r2, #0
     a48:	4b0e      	ldr	r3, [pc, #56]	; (a84 <CHA+0x7c>)
     a4a:	701a      	strb	r2, [r3, #0]
}
     a4c:	bc04      	pop	{r2}
     a4e:	4690      	mov	r8, r2
     a50:	bdf0      	pop	{r4, r5, r6, r7, pc}
		parameter = dequeueParam();
     a52:	4b0d      	ldr	r3, [pc, #52]	; (a88 <CHA+0x80>)
     a54:	4798      	blx	r3
     a56:	1e02      	subs	r2, r0, #0
		if(parameter > 0)
     a58:	d001      	beq.n	a5e <CHA+0x56>
			parameter--;  //need to decrement, because display is indexed at 0,0.
     a5a:	3801      	subs	r0, #1
     a5c:	b2c2      	uxtb	r2, r0
     a5e:	1c13      	adds	r3, r2, #0
     a60:	2a4f      	cmp	r2, #79	; 0x4f
     a62:	d900      	bls.n	a66 <CHA+0x5e>
     a64:	234f      	movs	r3, #79	; 0x4f
     a66:	b2dd      	uxtb	r5, r3
     a68:	e7d6      	b.n	a18 <CHA+0x10>
     a6a:	46c0      	nop			; (mov r8, r8)
     a6c:	00000241 	.word	0x00000241
     a70:	200003f4 	.word	0x200003f4
     a74:	200002ec 	.word	0x200002ec
     a78:	200002ee 	.word	0x200002ee
     a7c:	00003665 	.word	0x00003665
     a80:	0000382d 	.word	0x0000382d
     a84:	200002f1 	.word	0x200002f1
     a88:	00000255 	.word	0x00000255

00000a8c <CUP>:

void CUP() //Cursor Position
{
     a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     a8e:	46ce      	mov	lr, r9
     a90:	4647      	mov	r7, r8
     a92:	b580      	push	{r7, lr}
	unsigned char tempCharacter;
	uint8_t parameter = 0;
	uint8_t xTemp = 0;
	uint8_t yTemp = 0;
	
	if(isEmptyParam())
     a94:	4b20      	ldr	r3, [pc, #128]	; (b18 <CUP+0x8c>)
     a96:	4798      	blx	r3
	{
		parameter = 0;
     a98:	2400      	movs	r4, #0
	if(isEmptyParam())
     a9a:	2800      	cmp	r0, #0
     a9c:	d024      	beq.n	ae8 <CUP+0x5c>
		}
	}
	
	xTemp = parameter;

	if(isEmptyParam())
     a9e:	4b1e      	ldr	r3, [pc, #120]	; (b18 <CUP+0x8c>)
     aa0:	4798      	blx	r3
	{
		parameter = 0;
     aa2:	2600      	movs	r6, #0
	if(isEmptyParam())
     aa4:	2800      	cmp	r0, #0
     aa6:	d02b      	beq.n	b00 <CUP+0x74>
		}
	}
	
	yTemp = parameter;
	
	drawChar(consoleDisplay[xCharPos][yCharPos]);
     aa8:	4d1c      	ldr	r5, [pc, #112]	; (b1c <CUP+0x90>)
     aaa:	4b1d      	ldr	r3, [pc, #116]	; (b20 <CUP+0x94>)
     aac:	4698      	mov	r8, r3
     aae:	881a      	ldrh	r2, [r3, #0]
     ab0:	4f1c      	ldr	r7, [pc, #112]	; (b24 <CUP+0x98>)
     ab2:	8839      	ldrh	r1, [r7, #0]
     ab4:	0053      	lsls	r3, r2, #1
     ab6:	189b      	adds	r3, r3, r2
     ab8:	00db      	lsls	r3, r3, #3
     aba:	18eb      	adds	r3, r5, r3
     abc:	5c58      	ldrb	r0, [r3, r1]
     abe:	4b1a      	ldr	r3, [pc, #104]	; (b28 <CUP+0x9c>)
     ac0:	4699      	mov	r9, r3
     ac2:	4798      	blx	r3
	xCharPos = xTemp;
     ac4:	4643      	mov	r3, r8
     ac6:	801c      	strh	r4, [r3, #0]
	yCharPos = yTemp;
     ac8:	803e      	strh	r6, [r7, #0]
	tempCharacter = consoleDisplay[xCharPos][yCharPos];
     aca:	0063      	lsls	r3, r4, #1
     acc:	191c      	adds	r4, r3, r4
     ace:	00e4      	lsls	r4, r4, #3
     ad0:	192c      	adds	r4, r5, r4
	drawChar(tempCharacter);
     ad2:	5da0      	ldrb	r0, [r4, r6]
     ad4:	47c8      	blx	r9
	
	blinkCursor();
     ad6:	4b15      	ldr	r3, [pc, #84]	; (b2c <CUP+0xa0>)
     ad8:	4798      	blx	r3
	currentState = stateGround;
     ada:	2200      	movs	r2, #0
     adc:	4b14      	ldr	r3, [pc, #80]	; (b30 <CUP+0xa4>)
     ade:	701a      	strb	r2, [r3, #0]
}
     ae0:	bc0c      	pop	{r2, r3}
     ae2:	4690      	mov	r8, r2
     ae4:	4699      	mov	r9, r3
     ae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		parameter = dequeueParam();
     ae8:	4b12      	ldr	r3, [pc, #72]	; (b34 <CUP+0xa8>)
     aea:	4798      	blx	r3
     aec:	1e03      	subs	r3, r0, #0
		if(parameter > 0)
     aee:	d001      	beq.n	af4 <CUP+0x68>
			parameter--;  //need to decrement, because display is indexed at 0,0.
     af0:	3801      	subs	r0, #1
     af2:	b2c3      	uxtb	r3, r0
     af4:	1c1c      	adds	r4, r3, #0
     af6:	2b4f      	cmp	r3, #79	; 0x4f
     af8:	d900      	bls.n	afc <CUP+0x70>
     afa:	244f      	movs	r4, #79	; 0x4f
     afc:	b2e4      	uxtb	r4, r4
     afe:	e7ce      	b.n	a9e <CUP+0x12>
		parameter = dequeueParam();
     b00:	4b0c      	ldr	r3, [pc, #48]	; (b34 <CUP+0xa8>)
     b02:	4798      	blx	r3
     b04:	1e03      	subs	r3, r0, #0
		if(parameter > 0)
     b06:	d001      	beq.n	b0c <CUP+0x80>
			parameter--;  //need to decrement, because display is indexed at 0,0.
     b08:	3801      	subs	r0, #1
     b0a:	b2c3      	uxtb	r3, r0
     b0c:	1c1e      	adds	r6, r3, #0
     b0e:	2b17      	cmp	r3, #23
     b10:	d900      	bls.n	b14 <CUP+0x88>
     b12:	2617      	movs	r6, #23
     b14:	b2f6      	uxtb	r6, r6
     b16:	e7c7      	b.n	aa8 <CUP+0x1c>
     b18:	00000241 	.word	0x00000241
     b1c:	200003f4 	.word	0x200003f4
     b20:	200002ec 	.word	0x200002ec
     b24:	200002ee 	.word	0x200002ee
     b28:	00003665 	.word	0x00003665
     b2c:	0000382d 	.word	0x0000382d
     b30:	200002f1 	.word	0x200002f1
     b34:	00000255 	.word	0x00000255

00000b38 <ED>:
	//do this later
	currentState = stateGround;
}

void ED() //Edit In Display
{
     b38:	b5f0      	push	{r4, r5, r6, r7, lr}
     b3a:	46de      	mov	lr, fp
     b3c:	4657      	mov	r7, sl
     b3e:	464e      	mov	r6, r9
     b40:	4645      	mov	r5, r8
     b42:	b5e0      	push	{r5, r6, r7, lr}
     b44:	b083      	sub	sp, #12
	uint8_t parameter;
	
	uint8_t xTemp = xCharPos;
     b46:	4b43      	ldr	r3, [pc, #268]	; (c54 <ED+0x11c>)
     b48:	881b      	ldrh	r3, [r3, #0]
     b4a:	4698      	mov	r8, r3
	uint8_t yTemp = yCharPos;
     b4c:	4b42      	ldr	r3, [pc, #264]	; (c58 <ED+0x120>)
     b4e:	881b      	ldrh	r3, [r3, #0]
     b50:	4699      	mov	r9, r3
	
	cursorBlinkState = false;  //need to turn the blinking off; ugly kludge
     b52:	2200      	movs	r2, #0
     b54:	4b41      	ldr	r3, [pc, #260]	; (c5c <ED+0x124>)
     b56:	701a      	strb	r2, [r3, #0]
	
	if(isEmptyParam())
     b58:	4b41      	ldr	r3, [pc, #260]	; (c60 <ED+0x128>)
     b5a:	4798      	blx	r3
     b5c:	2800      	cmp	r0, #0
     b5e:	d011      	beq.n	b84 <ED+0x4c>
			{
				xCharPos = i;
				drawChar(0x00);
			}
			//second step, erase previous lines
			for(int j = 0 ; j < yTemp ; j++)
     b60:	2500      	movs	r5, #0
		case 2:			//Erases entire display
			for(int j = 0 ; j < 24 ; j++)
			{
				for(int i = 0 ; i < 80 ; i++)
				{
					xCharPos = i;
     b62:	4b3c      	ldr	r3, [pc, #240]	; (c54 <ED+0x11c>)
     b64:	469a      	mov	sl, r3
					yCharPos = j;
     b66:	4f3c      	ldr	r7, [pc, #240]	; (c58 <ED+0x120>)
					drawChar(0x00);
     b68:	4e3e      	ldr	r6, [pc, #248]	; (c64 <ED+0x12c>)
			for(int j = 0 ; j < yTemp ; j++)
     b6a:	2400      	movs	r4, #0
					xCharPos = i;
     b6c:	4653      	mov	r3, sl
     b6e:	801c      	strh	r4, [r3, #0]
					yCharPos = j;
     b70:	803d      	strh	r5, [r7, #0]
					drawChar(0x00);
     b72:	2000      	movs	r0, #0
     b74:	47b0      	blx	r6
				for(int i = 0 ; i < 80 ; i++)
     b76:	3401      	adds	r4, #1
     b78:	2c50      	cmp	r4, #80	; 0x50
     b7a:	d1f7      	bne.n	b6c <ED+0x34>
			for(int j = 0 ; j < 24 ; j++)
     b7c:	3501      	adds	r5, #1
     b7e:	2d18      	cmp	r5, #24
     b80:	d1f3      	bne.n	b6a <ED+0x32>
     b82:	e04e      	b.n	c22 <ED+0xea>
	uint8_t xTemp = xCharPos;
     b84:	4643      	mov	r3, r8
     b86:	466a      	mov	r2, sp
     b88:	71d3      	strb	r3, [r2, #7]
     b8a:	79d4      	ldrb	r4, [r2, #7]
	uint8_t yTemp = yCharPos;
     b8c:	464b      	mov	r3, r9
     b8e:	71d3      	strb	r3, [r2, #7]
     b90:	79d3      	ldrb	r3, [r2, #7]
     b92:	469a      	mov	sl, r3
		parameter = dequeueParam();
     b94:	4b34      	ldr	r3, [pc, #208]	; (c68 <ED+0x130>)
     b96:	4798      	blx	r3
	switch(parameter)
     b98:	2801      	cmp	r0, #1
     b9a:	d004      	beq.n	ba6 <ED+0x6e>
     b9c:	2800      	cmp	r0, #0
     b9e:	d022      	beq.n	be6 <ED+0xae>
     ba0:	2802      	cmp	r0, #2
     ba2:	d13e      	bne.n	c22 <ED+0xea>
     ba4:	e7dc      	b.n	b60 <ED+0x28>
			for(int i = 0 ;  i <= xTemp ;  i++)
     ba6:	0025      	movs	r5, r4
     ba8:	2600      	movs	r6, #0
				xCharPos = i;
     baa:	4c2a      	ldr	r4, [pc, #168]	; (c54 <ED+0x11c>)
				drawChar(0x00);
     bac:	4f2d      	ldr	r7, [pc, #180]	; (c64 <ED+0x12c>)
				xCharPos = i;
     bae:	8026      	strh	r6, [r4, #0]
				drawChar(0x00);
     bb0:	2000      	movs	r0, #0
     bb2:	47b8      	blx	r7
			for(int i = 0 ;  i <= xTemp ;  i++)
     bb4:	3601      	adds	r6, #1
     bb6:	42ae      	cmp	r6, r5
     bb8:	ddf9      	ble.n	bae <ED+0x76>
			for(int j = 0 ; j < yTemp ; j++)
     bba:	46d3      	mov	fp, sl
     bbc:	2600      	movs	r6, #0
     bbe:	4653      	mov	r3, sl
     bc0:	2b00      	cmp	r3, #0
     bc2:	dd2e      	ble.n	c22 <ED+0xea>
					xCharPos = i;
     bc4:	4b23      	ldr	r3, [pc, #140]	; (c54 <ED+0x11c>)
     bc6:	469a      	mov	sl, r3
					yCharPos = j;
     bc8:	4d23      	ldr	r5, [pc, #140]	; (c58 <ED+0x120>)
					drawChar(0x00);
     bca:	4f26      	ldr	r7, [pc, #152]	; (c64 <ED+0x12c>)
			for(int i = 0 ;  i <= xTemp ;  i++)
     bcc:	2400      	movs	r4, #0
					xCharPos = i;
     bce:	4653      	mov	r3, sl
     bd0:	801c      	strh	r4, [r3, #0]
					yCharPos = j;
     bd2:	802e      	strh	r6, [r5, #0]
					drawChar(0x00);
     bd4:	2000      	movs	r0, #0
     bd6:	47b8      	blx	r7
				for(int i = 0 ; i < 80 ; i++)
     bd8:	3401      	adds	r4, #1
     bda:	2c50      	cmp	r4, #80	; 0x50
     bdc:	d1f7      	bne.n	bce <ED+0x96>
			for(int j = 0 ; j < yTemp ; j++)
     bde:	3601      	adds	r6, #1
     be0:	455e      	cmp	r6, fp
     be2:	dbf3      	blt.n	bcc <ED+0x94>
     be4:	e01d      	b.n	c22 <ED+0xea>
			for(int i = xTemp ;  i <= 78 ;  i++)
     be6:	2c4e      	cmp	r4, #78	; 0x4e
     be8:	dc07      	bgt.n	bfa <ED+0xc2>
				xCharPos = i;
     bea:	4f1a      	ldr	r7, [pc, #104]	; (c54 <ED+0x11c>)
				drawChar(0x00);
     bec:	4e1d      	ldr	r6, [pc, #116]	; (c64 <ED+0x12c>)
				xCharPos = i;
     bee:	803c      	strh	r4, [r7, #0]
				drawChar(0x00);
     bf0:	2000      	movs	r0, #0
     bf2:	47b0      	blx	r6
			for(int i = xTemp ;  i <= 78 ;  i++)
     bf4:	3401      	adds	r4, #1
     bf6:	2c4f      	cmp	r4, #79	; 0x4f
     bf8:	d1f9      	bne.n	bee <ED+0xb6>
			for(int j = yTemp+1 ; j < 24 ; j++)
     bfa:	4655      	mov	r5, sl
     bfc:	3501      	adds	r5, #1
     bfe:	2d17      	cmp	r5, #23
     c00:	dc0f      	bgt.n	c22 <ED+0xea>
					xCharPos = i;
     c02:	4b14      	ldr	r3, [pc, #80]	; (c54 <ED+0x11c>)
     c04:	469a      	mov	sl, r3
					yCharPos = j;
     c06:	4f14      	ldr	r7, [pc, #80]	; (c58 <ED+0x120>)
					drawChar(0x00);
     c08:	4e16      	ldr	r6, [pc, #88]	; (c64 <ED+0x12c>)
{
     c0a:	2400      	movs	r4, #0
					xCharPos = i;
     c0c:	4653      	mov	r3, sl
     c0e:	801c      	strh	r4, [r3, #0]
					yCharPos = j;
     c10:	803d      	strh	r5, [r7, #0]
					drawChar(0x00);
     c12:	2000      	movs	r0, #0
     c14:	47b0      	blx	r6
				for(int i = 0 ; i < 80 ; i++)
     c16:	3401      	adds	r4, #1
     c18:	2c50      	cmp	r4, #80	; 0x50
     c1a:	d1f7      	bne.n	c0c <ED+0xd4>
			for(int j = yTemp+1 ; j < 24 ; j++)
     c1c:	3501      	adds	r5, #1
     c1e:	2d18      	cmp	r5, #24
     c20:	d1f3      	bne.n	c0a <ED+0xd2>
				}
			}
		break;
	}
	
	blinkCursor();
     c22:	4b12      	ldr	r3, [pc, #72]	; (c6c <ED+0x134>)
     c24:	4798      	blx	r3
	xCharPos = xTemp;
     c26:	23ff      	movs	r3, #255	; 0xff
     c28:	4642      	mov	r2, r8
     c2a:	401a      	ands	r2, r3
     c2c:	4909      	ldr	r1, [pc, #36]	; (c54 <ED+0x11c>)
     c2e:	800a      	strh	r2, [r1, #0]
	yCharPos = yTemp;
     c30:	464a      	mov	r2, r9
     c32:	4013      	ands	r3, r2
     c34:	4a08      	ldr	r2, [pc, #32]	; (c58 <ED+0x120>)
     c36:	8013      	strh	r3, [r2, #0]
	drawChar(0x00);
     c38:	2000      	movs	r0, #0
     c3a:	4b0a      	ldr	r3, [pc, #40]	; (c64 <ED+0x12c>)
     c3c:	4798      	blx	r3
	
	currentState = stateGround;	
     c3e:	2200      	movs	r2, #0
     c40:	4b0b      	ldr	r3, [pc, #44]	; (c70 <ED+0x138>)
     c42:	701a      	strb	r2, [r3, #0]


}
     c44:	b003      	add	sp, #12
     c46:	bc3c      	pop	{r2, r3, r4, r5}
     c48:	4690      	mov	r8, r2
     c4a:	4699      	mov	r9, r3
     c4c:	46a2      	mov	sl, r4
     c4e:	46ab      	mov	fp, r5
     c50:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c52:	46c0      	nop			; (mov r8, r8)
     c54:	200002ec 	.word	0x200002ec
     c58:	200002ee 	.word	0x200002ee
     c5c:	20000028 	.word	0x20000028
     c60:	00000241 	.word	0x00000241
     c64:	00003665 	.word	0x00003665
     c68:	00000255 	.word	0x00000255
     c6c:	0000382d 	.word	0x0000382d
     c70:	200002f1 	.word	0x200002f1

00000c74 <EL>:

void EL() //Edit In Line
{
     c74:	b5f0      	push	{r4, r5, r6, r7, lr}
     c76:	46d6      	mov	lr, sl
     c78:	464f      	mov	r7, r9
     c7a:	4646      	mov	r6, r8
     c7c:	b5c0      	push	{r6, r7, lr}
	unsigned char tempCharacter;
	uint8_t parameter;
	
	uint8_t xTemp = xCharPos;
     c7e:	4b31      	ldr	r3, [pc, #196]	; (d44 <EL+0xd0>)
     c80:	881f      	ldrh	r7, [r3, #0]
     c82:	b2fc      	uxtb	r4, r7
	uint8_t yTemp = yCharPos;
     c84:	4b30      	ldr	r3, [pc, #192]	; (d48 <EL+0xd4>)
     c86:	881b      	ldrh	r3, [r3, #0]
     c88:	4698      	mov	r8, r3
	
	cursorBlinkState = false;  //need to turn the blinking off; ugly kludge
     c8a:	2200      	movs	r2, #0
     c8c:	4b2f      	ldr	r3, [pc, #188]	; (d4c <EL+0xd8>)
     c8e:	701a      	strb	r2, [r3, #0]
	
	if(isEmptyParam())
     c90:	4b2f      	ldr	r3, [pc, #188]	; (d50 <EL+0xdc>)
     c92:	4798      	blx	r3
     c94:	2800      	cmp	r0, #0
     c96:	d015      	beq.n	cc4 <EL+0x50>
	else
	{
		parameter = dequeueParam();
	}
	
	tempCharacter = consoleDisplay[xCharPos][yCharPos];
     c98:	4b2a      	ldr	r3, [pc, #168]	; (d44 <EL+0xd0>)
     c9a:	881a      	ldrh	r2, [r3, #0]
     c9c:	4b2a      	ldr	r3, [pc, #168]	; (d48 <EL+0xd4>)
     c9e:	8819      	ldrh	r1, [r3, #0]
     ca0:	0053      	lsls	r3, r2, #1
     ca2:	189b      	adds	r3, r3, r2
     ca4:	00db      	lsls	r3, r3, #3
     ca6:	4a2b      	ldr	r2, [pc, #172]	; (d54 <EL+0xe0>)
     ca8:	18d3      	adds	r3, r2, r3
     caa:	5c5b      	ldrb	r3, [r3, r1]
     cac:	4699      	mov	r9, r3
	
	switch(parameter)
	{
		case 0:			//Erases from cursor to end of line
			for(int i = xTemp ;  i <= 79 ;  i++)
     cae:	2c4f      	cmp	r4, #79	; 0x4f
     cb0:	dc24      	bgt.n	cfc <EL+0x88>
			{
				xCharPos = i;
     cb2:	4e24      	ldr	r6, [pc, #144]	; (d44 <EL+0xd0>)
				drawChar(0x00);
     cb4:	4d28      	ldr	r5, [pc, #160]	; (d58 <EL+0xe4>)
				xCharPos = i;
     cb6:	8034      	strh	r4, [r6, #0]
				drawChar(0x00);
     cb8:	2000      	movs	r0, #0
     cba:	47a8      	blx	r5
			for(int i = xTemp ;  i <= 79 ;  i++)
     cbc:	3401      	adds	r4, #1
     cbe:	2c50      	cmp	r4, #80	; 0x50
     cc0:	d1f9      	bne.n	cb6 <EL+0x42>
     cc2:	e01b      	b.n	cfc <EL+0x88>
		parameter = dequeueParam();
     cc4:	4b25      	ldr	r3, [pc, #148]	; (d5c <EL+0xe8>)
     cc6:	4798      	blx	r3
	tempCharacter = consoleDisplay[xCharPos][yCharPos];
     cc8:	4b1e      	ldr	r3, [pc, #120]	; (d44 <EL+0xd0>)
     cca:	881a      	ldrh	r2, [r3, #0]
     ccc:	4b1e      	ldr	r3, [pc, #120]	; (d48 <EL+0xd4>)
     cce:	8819      	ldrh	r1, [r3, #0]
     cd0:	0053      	lsls	r3, r2, #1
     cd2:	189b      	adds	r3, r3, r2
     cd4:	00db      	lsls	r3, r3, #3
     cd6:	4a1f      	ldr	r2, [pc, #124]	; (d54 <EL+0xe0>)
     cd8:	18d3      	adds	r3, r2, r3
     cda:	5c5b      	ldrb	r3, [r3, r1]
     cdc:	4699      	mov	r9, r3
	switch(parameter)
     cde:	2801      	cmp	r0, #1
     ce0:	d021      	beq.n	d26 <EL+0xb2>
     ce2:	2800      	cmp	r0, #0
     ce4:	d0e3      	beq.n	cae <EL+0x3a>
     ce6:	2802      	cmp	r0, #2
     ce8:	d108      	bne.n	cfc <EL+0x88>
     cea:	2400      	movs	r4, #0
			break;
		
		case 2:			//Erases entire line containing cursor
			for(int i = 0 ;  i <= 78 ;  i++)
			{
				xCharPos = i;
     cec:	4e15      	ldr	r6, [pc, #84]	; (d44 <EL+0xd0>)
				drawChar(0x00);
     cee:	4d1a      	ldr	r5, [pc, #104]	; (d58 <EL+0xe4>)
				xCharPos = i;
     cf0:	8034      	strh	r4, [r6, #0]
				drawChar(0x00);
     cf2:	2000      	movs	r0, #0
     cf4:	47a8      	blx	r5
			for(int i = 0 ;  i <= 78 ;  i++)
     cf6:	3401      	adds	r4, #1
     cf8:	2c4f      	cmp	r4, #79	; 0x4f
     cfa:	d1f9      	bne.n	cf0 <EL+0x7c>
			}
			break;
	}
	
	blinkCursor();
     cfc:	4b18      	ldr	r3, [pc, #96]	; (d60 <EL+0xec>)
     cfe:	4798      	blx	r3
	xCharPos = xTemp;
     d00:	23ff      	movs	r3, #255	; 0xff
     d02:	401f      	ands	r7, r3
     d04:	4a0f      	ldr	r2, [pc, #60]	; (d44 <EL+0xd0>)
     d06:	8017      	strh	r7, [r2, #0]
	yCharPos = yTemp;
     d08:	4642      	mov	r2, r8
     d0a:	4013      	ands	r3, r2
     d0c:	4a0e      	ldr	r2, [pc, #56]	; (d48 <EL+0xd4>)
     d0e:	8013      	strh	r3, [r2, #0]
	drawChar(tempCharacter);
     d10:	4648      	mov	r0, r9
     d12:	4b11      	ldr	r3, [pc, #68]	; (d58 <EL+0xe4>)
     d14:	4798      	blx	r3
	
	currentState = stateGround;	
     d16:	2200      	movs	r2, #0
     d18:	4b12      	ldr	r3, [pc, #72]	; (d64 <EL+0xf0>)
     d1a:	701a      	strb	r2, [r3, #0]
}
     d1c:	bc1c      	pop	{r2, r3, r4}
     d1e:	4690      	mov	r8, r2
     d20:	4699      	mov	r9, r3
     d22:	46a2      	mov	sl, r4
     d24:	bdf0      	pop	{r4, r5, r6, r7, pc}
			for(int i = 0 ;  i <= xTemp+1 ;  i++)
     d26:	3401      	adds	r4, #1
     d28:	2500      	movs	r5, #0
     d2a:	2c00      	cmp	r4, #0
     d2c:	dbe6      	blt.n	cfc <EL+0x88>
				xCharPos = i;
     d2e:	4b05      	ldr	r3, [pc, #20]	; (d44 <EL+0xd0>)
     d30:	469a      	mov	sl, r3
				drawChar(0x00);
     d32:	4e09      	ldr	r6, [pc, #36]	; (d58 <EL+0xe4>)
				xCharPos = i;
     d34:	4653      	mov	r3, sl
     d36:	801d      	strh	r5, [r3, #0]
				drawChar(0x00);
     d38:	2000      	movs	r0, #0
     d3a:	47b0      	blx	r6
			for(int i = 0 ;  i <= xTemp+1 ;  i++)
     d3c:	3501      	adds	r5, #1
     d3e:	42a5      	cmp	r5, r4
     d40:	ddf8      	ble.n	d34 <EL+0xc0>
     d42:	e7db      	b.n	cfc <EL+0x88>
     d44:	200002ec 	.word	0x200002ec
     d48:	200002ee 	.word	0x200002ee
     d4c:	20000028 	.word	0x20000028
     d50:	00000241 	.word	0x00000241
     d54:	200003f4 	.word	0x200003f4
     d58:	00003665 	.word	0x00003665
     d5c:	00000255 	.word	0x00000255
     d60:	0000382d 	.word	0x0000382d
     d64:	200002f1 	.word	0x200002f1

00000d68 <SGR>:

void SGR() //Select Graphic Rendition
{
     d68:	b5f0      	push	{r4, r5, r6, r7, lr}
     d6a:	46d6      	mov	lr, sl
     d6c:	464f      	mov	r7, r9
     d6e:	4646      	mov	r6, r8
     d70:	b5c0      	push	{r6, r7, lr}
     d72:	4c8a      	ldr	r4, [pc, #552]	; (f9c <SGR+0x234>)
     d74:	44a5      	add	sp, r4
	
	uint16_t eightBitColor[256] = 
     d76:	2280      	movs	r2, #128	; 0x80
     d78:	0092      	lsls	r2, r2, #2
     d7a:	4989      	ldr	r1, [pc, #548]	; (fa0 <SGR+0x238>)
     d7c:	4668      	mov	r0, sp
     d7e:	4b89      	ldr	r3, [pc, #548]	; (fa4 <SGR+0x23c>)
     d80:	4798      	blx	r3
		0x5ACB,0x630C,0x632C,0x73AE,0x8410,0x8C51,0x94B2,0x9CF3,0xAD55,0xB596,
		0xBDF7,0xC638,0xD69A,0xDEDB,0xE73C,0xEF7D
	};
	
	uint8_t parameter;	
	cursorBlinkState = false;  //need to turn the blinking off; ugly kludge
     d82:	2200      	movs	r2, #0
     d84:	4b88      	ldr	r3, [pc, #544]	; (fa8 <SGR+0x240>)
     d86:	701a      	strb	r2, [r3, #0]
	uint8_t r = 0;
	uint8_t g = 0;
	uint8_t b = 0;	
	
	if(isEmptyParam())
     d88:	4b88      	ldr	r3, [pc, #544]	; (fac <SGR+0x244>)
     d8a:	4798      	blx	r3
     d8c:	2800      	cmp	r0, #0
     d8e:	d104      	bne.n	d9a <SGR+0x32>
		textBackground = defaultBackgroundColor;
							
	}
	else
	{
		while(!isEmptyParam())
     d90:	4d86      	ldr	r5, [pc, #536]	; (fac <SGR+0x244>)
		{
			parameter = dequeueParam();
     d92:	4e87      	ldr	r6, [pc, #540]	; (fb0 <SGR+0x248>)
			switch(parameter)
     d94:	4f87      	ldr	r7, [pc, #540]	; (fb4 <SGR+0x24c>)
				case 49:	//default background color (black)
					textBackground = defaultBackgroundColor;
					break;
					
				case 2:		// set half-bright
					textForeground &= 0x7BEF;	// what the fuck?
     d96:	4c88      	ldr	r4, [pc, #544]	; (fb8 <SGR+0x250>)
     d98:	e02e      	b.n	df8 <SGR+0x90>
		textBold = false;
     d9a:	2300      	movs	r3, #0
     d9c:	4a87      	ldr	r2, [pc, #540]	; (fbc <SGR+0x254>)
     d9e:	7013      	strb	r3, [r2, #0]
		textUnderscore = false;
     da0:	4a87      	ldr	r2, [pc, #540]	; (fc0 <SGR+0x258>)
     da2:	7013      	strb	r3, [r2, #0]
		textBlink = false;
     da4:	4a87      	ldr	r2, [pc, #540]	; (fc4 <SGR+0x25c>)
     da6:	7013      	strb	r3, [r2, #0]
		textReverseVideo = false;
     da8:	4a87      	ldr	r2, [pc, #540]	; (fc8 <SGR+0x260>)
     daa:	7013      	strb	r3, [r2, #0]
		textForeground = defaultForegroundColor;
     dac:	4b87      	ldr	r3, [pc, #540]	; (fcc <SGR+0x264>)
     dae:	881a      	ldrh	r2, [r3, #0]
     db0:	4b81      	ldr	r3, [pc, #516]	; (fb8 <SGR+0x250>)
     db2:	801a      	strh	r2, [r3, #0]
		textBackground = defaultBackgroundColor;
     db4:	4b86      	ldr	r3, [pc, #536]	; (fd0 <SGR+0x268>)
     db6:	881a      	ldrh	r2, [r3, #0]
     db8:	4b86      	ldr	r3, [pc, #536]	; (fd4 <SGR+0x26c>)
     dba:	801a      	strh	r2, [r3, #0]
				
			}
		}	
	}
	
	blinkCursor();
     dbc:	4b86      	ldr	r3, [pc, #536]	; (fd8 <SGR+0x270>)
     dbe:	4798      	blx	r3
	currentState = stateGround;
     dc0:	2200      	movs	r2, #0
     dc2:	4b86      	ldr	r3, [pc, #536]	; (fdc <SGR+0x274>)
     dc4:	701a      	strb	r2, [r3, #0]
}
     dc6:	2380      	movs	r3, #128	; 0x80
     dc8:	009b      	lsls	r3, r3, #2
     dca:	449d      	add	sp, r3
     dcc:	bc1c      	pop	{r2, r3, r4}
     dce:	4690      	mov	r8, r2
     dd0:	4699      	mov	r9, r3
     dd2:	46a2      	mov	sl, r4
     dd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
					textBold = false;
     dd6:	2300      	movs	r3, #0
     dd8:	4a78      	ldr	r2, [pc, #480]	; (fbc <SGR+0x254>)
     dda:	7013      	strb	r3, [r2, #0]
					textUnderscore = false;
     ddc:	4a78      	ldr	r2, [pc, #480]	; (fc0 <SGR+0x258>)
     dde:	7013      	strb	r3, [r2, #0]
					textBlink = false;
     de0:	4a78      	ldr	r2, [pc, #480]	; (fc4 <SGR+0x25c>)
     de2:	7013      	strb	r3, [r2, #0]
					textReverseVideo = false;
     de4:	4a78      	ldr	r2, [pc, #480]	; (fc8 <SGR+0x260>)
     de6:	7013      	strb	r3, [r2, #0]
					textForeground = defaultForegroundColor;
     de8:	4b78      	ldr	r3, [pc, #480]	; (fcc <SGR+0x264>)
     dea:	881a      	ldrh	r2, [r3, #0]
     dec:	4b72      	ldr	r3, [pc, #456]	; (fb8 <SGR+0x250>)
     dee:	801a      	strh	r2, [r3, #0]
					textBackground = defaultBackgroundColor;
     df0:	4b77      	ldr	r3, [pc, #476]	; (fd0 <SGR+0x268>)
     df2:	881a      	ldrh	r2, [r3, #0]
     df4:	4b77      	ldr	r3, [pc, #476]	; (fd4 <SGR+0x26c>)
     df6:	801a      	strh	r2, [r3, #0]
		while(!isEmptyParam())
     df8:	47a8      	blx	r5
     dfa:	2800      	cmp	r0, #0
     dfc:	d1de      	bne.n	dbc <SGR+0x54>
			parameter = dequeueParam();
     dfe:	47b0      	blx	r6
			switch(parameter)
     e00:	2831      	cmp	r0, #49	; 0x31
     e02:	d8f9      	bhi.n	df8 <SGR+0x90>
     e04:	0080      	lsls	r0, r0, #2
     e06:	583b      	ldr	r3, [r7, r0]
     e08:	469f      	mov	pc, r3
					textBold = true;
     e0a:	2201      	movs	r2, #1
     e0c:	4b6b      	ldr	r3, [pc, #428]	; (fbc <SGR+0x254>)
     e0e:	701a      	strb	r2, [r3, #0]
					break;
     e10:	e7f2      	b.n	df8 <SGR+0x90>
					textUnderscore = true;
     e12:	2201      	movs	r2, #1
     e14:	4b6a      	ldr	r3, [pc, #424]	; (fc0 <SGR+0x258>)
     e16:	701a      	strb	r2, [r3, #0]
					break;
     e18:	e7ee      	b.n	df8 <SGR+0x90>
					textBlink = true;
     e1a:	2201      	movs	r2, #1
     e1c:	4b69      	ldr	r3, [pc, #420]	; (fc4 <SGR+0x25c>)
     e1e:	701a      	strb	r2, [r3, #0]
					break;
     e20:	e7ea      	b.n	df8 <SGR+0x90>
					textReverseVideo = true;
     e22:	2201      	movs	r2, #1
     e24:	4b68      	ldr	r3, [pc, #416]	; (fc8 <SGR+0x260>)
     e26:	701a      	strb	r2, [r3, #0]
					break;
     e28:	e7e6      	b.n	df8 <SGR+0x90>
					textUnderscore = true;
     e2a:	2201      	movs	r2, #1
     e2c:	4b64      	ldr	r3, [pc, #400]	; (fc0 <SGR+0x258>)
     e2e:	701a      	strb	r2, [r3, #0]
					break;
     e30:	e7e2      	b.n	df8 <SGR+0x90>
					textBold = false;
     e32:	2200      	movs	r2, #0
     e34:	4b61      	ldr	r3, [pc, #388]	; (fbc <SGR+0x254>)
     e36:	701a      	strb	r2, [r3, #0]
					break;
     e38:	e7de      	b.n	df8 <SGR+0x90>
					textUnderscore = false;
     e3a:	2200      	movs	r2, #0
     e3c:	4b60      	ldr	r3, [pc, #384]	; (fc0 <SGR+0x258>)
     e3e:	701a      	strb	r2, [r3, #0]
					break;
     e40:	e7da      	b.n	df8 <SGR+0x90>
					textBlink = false;
     e42:	2200      	movs	r2, #0
     e44:	4b5f      	ldr	r3, [pc, #380]	; (fc4 <SGR+0x25c>)
     e46:	701a      	strb	r2, [r3, #0]
					break;
     e48:	e7d6      	b.n	df8 <SGR+0x90>
					textReverseVideo = false;
     e4a:	2200      	movs	r2, #0
     e4c:	4b5e      	ldr	r3, [pc, #376]	; (fc8 <SGR+0x260>)
     e4e:	701a      	strb	r2, [r3, #0]
					break;
     e50:	e7d2      	b.n	df8 <SGR+0x90>
					textForeground = BLACK;
     e52:	2200      	movs	r2, #0
     e54:	4b58      	ldr	r3, [pc, #352]	; (fb8 <SGR+0x250>)
     e56:	801a      	strh	r2, [r3, #0]
					break;
     e58:	e7ce      	b.n	df8 <SGR+0x90>
					textForeground = RED;
     e5a:	4a61      	ldr	r2, [pc, #388]	; (fe0 <SGR+0x278>)
     e5c:	4b56      	ldr	r3, [pc, #344]	; (fb8 <SGR+0x250>)
     e5e:	801a      	strh	r2, [r3, #0]
					break;
     e60:	e7ca      	b.n	df8 <SGR+0x90>
					textForeground = GREEN;
     e62:	2280      	movs	r2, #128	; 0x80
     e64:	00d2      	lsls	r2, r2, #3
     e66:	4b54      	ldr	r3, [pc, #336]	; (fb8 <SGR+0x250>)
     e68:	801a      	strh	r2, [r3, #0]
					break;
     e6a:	e7c5      	b.n	df8 <SGR+0x90>
					textForeground = BROWN;
     e6c:	2220      	movs	r2, #32
     e6e:	4252      	negs	r2, r2
     e70:	4b51      	ldr	r3, [pc, #324]	; (fb8 <SGR+0x250>)
     e72:	801a      	strh	r2, [r3, #0]
					break;
     e74:	e7c0      	b.n	df8 <SGR+0x90>
					textForeground = BLUE;
     e76:	221f      	movs	r2, #31
     e78:	4b4f      	ldr	r3, [pc, #316]	; (fb8 <SGR+0x250>)
     e7a:	801a      	strh	r2, [r3, #0]
					break;
     e7c:	e7bc      	b.n	df8 <SGR+0x90>
					textForeground = MAGENTA;
     e7e:	4a59      	ldr	r2, [pc, #356]	; (fe4 <SGR+0x27c>)
     e80:	4b4d      	ldr	r3, [pc, #308]	; (fb8 <SGR+0x250>)
     e82:	801a      	strh	r2, [r3, #0]
					break;
     e84:	e7b8      	b.n	df8 <SGR+0x90>
					textForeground = CYAN;
     e86:	4a58      	ldr	r2, [pc, #352]	; (fe8 <SGR+0x280>)
     e88:	4b4b      	ldr	r3, [pc, #300]	; (fb8 <SGR+0x250>)
     e8a:	801a      	strh	r2, [r3, #0]
					break;
     e8c:	e7b4      	b.n	df8 <SGR+0x90>
					textForeground = WHITE;
     e8e:	2201      	movs	r2, #1
     e90:	4252      	negs	r2, r2
     e92:	4b49      	ldr	r3, [pc, #292]	; (fb8 <SGR+0x250>)
     e94:	801a      	strh	r2, [r3, #0]
					break;
     e96:	e7af      	b.n	df8 <SGR+0x90>
					parameter = dequeueParam();
     e98:	4b45      	ldr	r3, [pc, #276]	; (fb0 <SGR+0x248>)
     e9a:	4798      	blx	r3
					if(parameter == 5)	//256 color
     e9c:	2805      	cmp	r0, #5
     e9e:	d018      	beq.n	ed2 <SGR+0x16a>
					if(parameter == 2) //RGB color, 3 parameter r/g/b
     ea0:	2802      	cmp	r0, #2
     ea2:	d1a9      	bne.n	df8 <SGR+0x90>
						r = dequeueParam();
     ea4:	4b42      	ldr	r3, [pc, #264]	; (fb0 <SGR+0x248>)
     ea6:	469a      	mov	sl, r3
     ea8:	4798      	blx	r3
     eaa:	4680      	mov	r8, r0
						g = dequeueParam();
     eac:	47d0      	blx	sl
     eae:	4681      	mov	r9, r0
						b = dequeueParam();
     eb0:	47d0      	blx	sl
						textForeground = ((r & 0xf8) << 8) | ((g & 0xfc) << 3) | (b >> 3);
     eb2:	4643      	mov	r3, r8
     eb4:	021b      	lsls	r3, r3, #8
     eb6:	0adb      	lsrs	r3, r3, #11
     eb8:	02db      	lsls	r3, r3, #11
     eba:	464a      	mov	r2, r9
     ebc:	00d2      	lsls	r2, r2, #3
     ebe:	21fc      	movs	r1, #252	; 0xfc
     ec0:	00c9      	lsls	r1, r1, #3
     ec2:	400a      	ands	r2, r1
     ec4:	4313      	orrs	r3, r2
     ec6:	08c0      	lsrs	r0, r0, #3
     ec8:	b2c0      	uxtb	r0, r0
     eca:	4303      	orrs	r3, r0
     ecc:	4a3a      	ldr	r2, [pc, #232]	; (fb8 <SGR+0x250>)
     ece:	8013      	strh	r3, [r2, #0]
     ed0:	e792      	b.n	df8 <SGR+0x90>
						parameter = dequeueParam();
     ed2:	4b37      	ldr	r3, [pc, #220]	; (fb0 <SGR+0x248>)
     ed4:	4798      	blx	r3
						textForeground = eightBitColor[parameter];
     ed6:	0043      	lsls	r3, r0, #1
     ed8:	466a      	mov	r2, sp
     eda:	5a9a      	ldrh	r2, [r3, r2]
     edc:	4b36      	ldr	r3, [pc, #216]	; (fb8 <SGR+0x250>)
     ede:	801a      	strh	r2, [r3, #0]
     ee0:	e7de      	b.n	ea0 <SGR+0x138>
					textForeground = defaultForegroundColor;
     ee2:	4b3a      	ldr	r3, [pc, #232]	; (fcc <SGR+0x264>)
     ee4:	881a      	ldrh	r2, [r3, #0]
     ee6:	4b34      	ldr	r3, [pc, #208]	; (fb8 <SGR+0x250>)
     ee8:	801a      	strh	r2, [r3, #0]
					break;
     eea:	e785      	b.n	df8 <SGR+0x90>
					textBackground = BLACK;
     eec:	2200      	movs	r2, #0
     eee:	4b39      	ldr	r3, [pc, #228]	; (fd4 <SGR+0x26c>)
     ef0:	801a      	strh	r2, [r3, #0]
					break;
     ef2:	e781      	b.n	df8 <SGR+0x90>
					textBackground = RED;
     ef4:	4a3a      	ldr	r2, [pc, #232]	; (fe0 <SGR+0x278>)
     ef6:	4b37      	ldr	r3, [pc, #220]	; (fd4 <SGR+0x26c>)
     ef8:	801a      	strh	r2, [r3, #0]
					break;
     efa:	e77d      	b.n	df8 <SGR+0x90>
					textBackground = GREEN;
     efc:	2280      	movs	r2, #128	; 0x80
     efe:	00d2      	lsls	r2, r2, #3
     f00:	4b34      	ldr	r3, [pc, #208]	; (fd4 <SGR+0x26c>)
     f02:	801a      	strh	r2, [r3, #0]
					break;
     f04:	e778      	b.n	df8 <SGR+0x90>
					textBackground = BROWN;
     f06:	2220      	movs	r2, #32
     f08:	4252      	negs	r2, r2
     f0a:	4b32      	ldr	r3, [pc, #200]	; (fd4 <SGR+0x26c>)
     f0c:	801a      	strh	r2, [r3, #0]
					break;
     f0e:	e773      	b.n	df8 <SGR+0x90>
					textBackground = BLUE;
     f10:	221f      	movs	r2, #31
     f12:	4b30      	ldr	r3, [pc, #192]	; (fd4 <SGR+0x26c>)
     f14:	801a      	strh	r2, [r3, #0]
					break;
     f16:	e76f      	b.n	df8 <SGR+0x90>
					textBackground = MAGENTA;
     f18:	4a32      	ldr	r2, [pc, #200]	; (fe4 <SGR+0x27c>)
     f1a:	4b2e      	ldr	r3, [pc, #184]	; (fd4 <SGR+0x26c>)
     f1c:	801a      	strh	r2, [r3, #0]
					break;
     f1e:	e76b      	b.n	df8 <SGR+0x90>
					textBackground = CYAN;
     f20:	4a31      	ldr	r2, [pc, #196]	; (fe8 <SGR+0x280>)
     f22:	4b2c      	ldr	r3, [pc, #176]	; (fd4 <SGR+0x26c>)
     f24:	801a      	strh	r2, [r3, #0]
					break;
     f26:	e767      	b.n	df8 <SGR+0x90>
					textBackground = WHITE;
     f28:	2201      	movs	r2, #1
     f2a:	4252      	negs	r2, r2
     f2c:	4b29      	ldr	r3, [pc, #164]	; (fd4 <SGR+0x26c>)
     f2e:	801a      	strh	r2, [r3, #0]
					break;
     f30:	e762      	b.n	df8 <SGR+0x90>
					parameter = dequeueParam();
     f32:	4b1f      	ldr	r3, [pc, #124]	; (fb0 <SGR+0x248>)
     f34:	4798      	blx	r3
					if(parameter == 5)	//256 color
     f36:	2805      	cmp	r0, #5
     f38:	d019      	beq.n	f6e <SGR+0x206>
					if(parameter == 2) //RGB color, 3 parameter r/g/b
     f3a:	2802      	cmp	r0, #2
     f3c:	d000      	beq.n	f40 <SGR+0x1d8>
     f3e:	e75b      	b.n	df8 <SGR+0x90>
						r = dequeueParam();
     f40:	4b1b      	ldr	r3, [pc, #108]	; (fb0 <SGR+0x248>)
     f42:	469a      	mov	sl, r3
     f44:	4798      	blx	r3
     f46:	4680      	mov	r8, r0
						g = dequeueParam();
     f48:	47d0      	blx	sl
     f4a:	4681      	mov	r9, r0
						b = dequeueParam();
     f4c:	47d0      	blx	sl
						textBackground = ((r & 0xf8) << 8) | ((g & 0xfc) << 3) | (b >> 3);				
     f4e:	4643      	mov	r3, r8
     f50:	021b      	lsls	r3, r3, #8
     f52:	0adb      	lsrs	r3, r3, #11
     f54:	02db      	lsls	r3, r3, #11
     f56:	464a      	mov	r2, r9
     f58:	00d2      	lsls	r2, r2, #3
     f5a:	21fc      	movs	r1, #252	; 0xfc
     f5c:	00c9      	lsls	r1, r1, #3
     f5e:	400a      	ands	r2, r1
     f60:	4313      	orrs	r3, r2
     f62:	08c0      	lsrs	r0, r0, #3
     f64:	b2c0      	uxtb	r0, r0
     f66:	4303      	orrs	r3, r0
     f68:	4a1a      	ldr	r2, [pc, #104]	; (fd4 <SGR+0x26c>)
     f6a:	8013      	strh	r3, [r2, #0]
     f6c:	e744      	b.n	df8 <SGR+0x90>
						parameter = dequeueParam();
     f6e:	4b10      	ldr	r3, [pc, #64]	; (fb0 <SGR+0x248>)
     f70:	4798      	blx	r3
						textBackground = eightBitColor[parameter];
     f72:	0043      	lsls	r3, r0, #1
     f74:	466a      	mov	r2, sp
     f76:	5a9a      	ldrh	r2, [r3, r2]
     f78:	4b16      	ldr	r3, [pc, #88]	; (fd4 <SGR+0x26c>)
     f7a:	801a      	strh	r2, [r3, #0]
     f7c:	e7dd      	b.n	f3a <SGR+0x1d2>
					textBackground = defaultBackgroundColor;
     f7e:	4b14      	ldr	r3, [pc, #80]	; (fd0 <SGR+0x268>)
     f80:	881a      	ldrh	r2, [r3, #0]
     f82:	4b14      	ldr	r3, [pc, #80]	; (fd4 <SGR+0x26c>)
     f84:	801a      	strh	r2, [r3, #0]
					break;
     f86:	e737      	b.n	df8 <SGR+0x90>
					textForeground &= 0x7BEF;	// what the fuck?
     f88:	8822      	ldrh	r2, [r4, #0]
     f8a:	4918      	ldr	r1, [pc, #96]	; (fec <SGR+0x284>)
     f8c:	400a      	ands	r2, r1
     f8e:	8022      	strh	r2, [r4, #0]
					textBackground &= 0x7BEF;
     f90:	4a10      	ldr	r2, [pc, #64]	; (fd4 <SGR+0x26c>)
     f92:	8813      	ldrh	r3, [r2, #0]
     f94:	400b      	ands	r3, r1
     f96:	8013      	strh	r3, [r2, #0]
					break;
     f98:	e72e      	b.n	df8 <SGR+0x90>
     f9a:	46c0      	nop			; (mov r8, r8)
     f9c:	fffffe00 	.word	0xfffffe00
     fa0:	00006168 	.word	0x00006168
     fa4:	00004e91 	.word	0x00004e91
     fa8:	20000028 	.word	0x20000028
     fac:	00000241 	.word	0x00000241
     fb0:	00000255 	.word	0x00000255
     fb4:	00006088 	.word	0x00006088
     fb8:	20000014 	.word	0x20000014
     fbc:	20000388 	.word	0x20000388
     fc0:	20000368 	.word	0x20000368
     fc4:	2000036a 	.word	0x2000036a
     fc8:	2000038a 	.word	0x2000038a
     fcc:	2000018a 	.word	0x2000018a
     fd0:	200002f2 	.word	0x200002f2
     fd4:	2000022a 	.word	0x2000022a
     fd8:	0000382d 	.word	0x0000382d
     fdc:	200002f1 	.word	0x200002f1
     fe0:	fffff800 	.word	0xfffff800
     fe4:	fffff81f 	.word	0xfffff81f
     fe8:	000007ff 	.word	0x000007ff
     fec:	00007bef 	.word	0x00007bef

00000ff0 <DSR>:
void ICH(void) //Insert indicated # of blank chars
{
	currentState = stateGround;
}
void DSR(void)
{
     ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
     ff2:	46ce      	mov	lr, r9
     ff4:	4647      	mov	r7, r8
     ff6:	b580      	push	{r7, lr}
     ff8:	b087      	sub	sp, #28
	
	This function will support both ANSI and DEC formats
	*/
	unsigned char tempCharacter;
		
	uint8_t xTemp = xCharPos;
     ffa:	4b36      	ldr	r3, [pc, #216]	; (10d4 <DSR+0xe4>)
     ffc:	881d      	ldrh	r5, [r3, #0]
	uint8_t yTemp = yCharPos;
     ffe:	4b36      	ldr	r3, [pc, #216]	; (10d8 <DSR+0xe8>)
    1000:	881e      	ldrh	r6, [r3, #0]
	
	char DSROSResponse[] = {0x1b, 0x5b, 0x30, 0x6e};
    1002:	4b36      	ldr	r3, [pc, #216]	; (10dc <DSR+0xec>)
    1004:	681b      	ldr	r3, [r3, #0]
    1006:	9305      	str	r3, [sp, #20]
	
	char stringResponse[10];
	char tempbuffer[5];
		
	cursorBlinkState = false;  //need to turn the blinking off; ugly kludge
    1008:	2200      	movs	r2, #0
    100a:	4b35      	ldr	r3, [pc, #212]	; (10e0 <DSR+0xf0>)
    100c:	701a      	strb	r2, [r3, #0]
		
	tempCharacter = dequeueParser();
    100e:	4b35      	ldr	r3, [pc, #212]	; (10e4 <DSR+0xf4>)
    1010:	4798      	blx	r3
    1012:	0004      	movs	r4, r0
	
	if(!isEmptyParam()) //We are in DEC format
    1014:	4b34      	ldr	r3, [pc, #208]	; (10e8 <DSR+0xf8>)
    1016:	4798      	blx	r3
    1018:	2800      	cmp	r0, #0
    101a:	d018      	beq.n	104e <DSR+0x5e>
	{
		tempCharacter = dequeueParam();  //this now contains either a 5 or 6
	}
	
	switch(tempCharacter){
    101c:	2c05      	cmp	r4, #5
    101e:	d01a      	beq.n	1056 <DSR+0x66>
    1020:	2c06      	cmp	r4, #6
    1022:	d01d      	beq.n	1060 <DSR+0x70>
		
			printf("%s",stringResponse);
		break;
	}
	
	stringResponse[0] = '\0';
    1024:	2400      	movs	r4, #0
    1026:	ab02      	add	r3, sp, #8
    1028:	701c      	strb	r4, [r3, #0]
	tempbuffer[0] = '\0';
    102a:	466b      	mov	r3, sp
    102c:	701c      	strb	r4, [r3, #0]
		
	blinkCursor();
    102e:	4b2f      	ldr	r3, [pc, #188]	; (10ec <DSR+0xfc>)
    1030:	4798      	blx	r3
	xCharPos = xTemp;
    1032:	23ff      	movs	r3, #255	; 0xff
    1034:	401d      	ands	r5, r3
    1036:	4a27      	ldr	r2, [pc, #156]	; (10d4 <DSR+0xe4>)
    1038:	8015      	strh	r5, [r2, #0]
	yCharPos = yTemp;
    103a:	4033      	ands	r3, r6
    103c:	4a26      	ldr	r2, [pc, #152]	; (10d8 <DSR+0xe8>)
    103e:	8013      	strh	r3, [r2, #0]
	currentState = stateGround;
    1040:	4b2b      	ldr	r3, [pc, #172]	; (10f0 <DSR+0x100>)
    1042:	701c      	strb	r4, [r3, #0]
}
    1044:	b007      	add	sp, #28
    1046:	bc0c      	pop	{r2, r3}
    1048:	4690      	mov	r8, r2
    104a:	4699      	mov	r9, r3
    104c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		tempCharacter = dequeueParam();  //this now contains either a 5 or 6
    104e:	4b29      	ldr	r3, [pc, #164]	; (10f4 <DSR+0x104>)
    1050:	4798      	blx	r3
    1052:	0004      	movs	r4, r0
    1054:	e7e2      	b.n	101c <DSR+0x2c>
			printf("%s",DSROSResponse);
    1056:	a905      	add	r1, sp, #20
    1058:	4827      	ldr	r0, [pc, #156]	; (10f8 <DSR+0x108>)
    105a:	4b28      	ldr	r3, [pc, #160]	; (10fc <DSR+0x10c>)
    105c:	4798      	blx	r3
		break;
    105e:	e7e1      	b.n	1024 <DSR+0x34>
			strcat(stringResponse,"\x1B");
    1060:	a802      	add	r0, sp, #8
    1062:	4f27      	ldr	r7, [pc, #156]	; (1100 <DSR+0x110>)
    1064:	47b8      	blx	r7
    1066:	ab02      	add	r3, sp, #8
    1068:	469c      	mov	ip, r3
    106a:	4460      	add	r0, ip
    106c:	2202      	movs	r2, #2
    106e:	4925      	ldr	r1, [pc, #148]	; (1104 <DSR+0x114>)
    1070:	4c25      	ldr	r4, [pc, #148]	; (1108 <DSR+0x118>)
    1072:	47a0      	blx	r4
			strcat(stringResponse,"\x5B");
    1074:	a802      	add	r0, sp, #8
    1076:	47b8      	blx	r7
    1078:	ab02      	add	r3, sp, #8
    107a:	469c      	mov	ip, r3
    107c:	4460      	add	r0, ip
    107e:	2202      	movs	r2, #2
    1080:	4922      	ldr	r1, [pc, #136]	; (110c <DSR+0x11c>)
    1082:	47a0      	blx	r4
			strcat(stringResponse,itoa(yTemp,tempbuffer,10));
    1084:	b2f0      	uxtb	r0, r6
    1086:	220a      	movs	r2, #10
    1088:	4669      	mov	r1, sp
    108a:	4b21      	ldr	r3, [pc, #132]	; (1110 <DSR+0x120>)
    108c:	4699      	mov	r9, r3
    108e:	4798      	blx	r3
    1090:	0001      	movs	r1, r0
    1092:	a802      	add	r0, sp, #8
    1094:	4b1f      	ldr	r3, [pc, #124]	; (1114 <DSR+0x124>)
    1096:	4698      	mov	r8, r3
    1098:	4798      	blx	r3
			strcat(stringResponse,";");
    109a:	a802      	add	r0, sp, #8
    109c:	47b8      	blx	r7
    109e:	ab02      	add	r3, sp, #8
    10a0:	469c      	mov	ip, r3
    10a2:	4460      	add	r0, ip
    10a4:	2202      	movs	r2, #2
    10a6:	491c      	ldr	r1, [pc, #112]	; (1118 <DSR+0x128>)
    10a8:	47a0      	blx	r4
			strcat(stringResponse,itoa(xTemp,tempbuffer,10));
    10aa:	b2e8      	uxtb	r0, r5
    10ac:	220a      	movs	r2, #10
    10ae:	4669      	mov	r1, sp
    10b0:	47c8      	blx	r9
    10b2:	0001      	movs	r1, r0
    10b4:	a802      	add	r0, sp, #8
    10b6:	47c0      	blx	r8
			strcat(stringResponse,"R");
    10b8:	a802      	add	r0, sp, #8
    10ba:	47b8      	blx	r7
    10bc:	ab02      	add	r3, sp, #8
    10be:	469c      	mov	ip, r3
    10c0:	4460      	add	r0, ip
    10c2:	2202      	movs	r2, #2
    10c4:	4915      	ldr	r1, [pc, #84]	; (111c <DSR+0x12c>)
    10c6:	47a0      	blx	r4
			printf("%s",stringResponse);
    10c8:	a902      	add	r1, sp, #8
    10ca:	480b      	ldr	r0, [pc, #44]	; (10f8 <DSR+0x108>)
    10cc:	4b0b      	ldr	r3, [pc, #44]	; (10fc <DSR+0x10c>)
    10ce:	4798      	blx	r3
		break;
    10d0:	e7a8      	b.n	1024 <DSR+0x34>
    10d2:	46c0      	nop			; (mov r8, r8)
    10d4:	200002ec 	.word	0x200002ec
    10d8:	200002ee 	.word	0x200002ee
    10dc:	00006368 	.word	0x00006368
    10e0:	20000028 	.word	0x20000028
    10e4:	000001e5 	.word	0x000001e5
    10e8:	00000241 	.word	0x00000241
    10ec:	0000382d 	.word	0x0000382d
    10f0:	200002f1 	.word	0x200002f1
    10f4:	00000255 	.word	0x00000255
    10f8:	000064e0 	.word	0x000064e0
    10fc:	00005005 	.word	0x00005005
    1100:	000052df 	.word	0x000052df
    1104:	000064b4 	.word	0x000064b4
    1108:	00004e91 	.word	0x00004e91
    110c:	000064b8 	.word	0x000064b8
    1110:	00004e75 	.word	0x00004e75
    1114:	000052c5 	.word	0x000052c5
    1118:	000067cc 	.word	0x000067cc
    111c:	000064bc 	.word	0x000064bc

00001120 <isValidCSIEscapeCode>:
bool isValidCSIEscapeCode(uint8_t character)
{
	
	for(uint8_t i = 0; i <= sizeof(csiEscCodes)/sizeof(csiEscCodes[0]) ; i++)
	{
		if(character == csiEscCodes[i])
    1120:	2840      	cmp	r0, #64	; 0x40
    1122:	d006      	beq.n	1132 <isValidCSIEscapeCode+0x12>
    1124:	4b04      	ldr	r3, [pc, #16]	; (1138 <isValidCSIEscapeCode+0x18>)
    1126:	3301      	adds	r3, #1
    1128:	3301      	adds	r3, #1
    112a:	1e5a      	subs	r2, r3, #1
    112c:	7812      	ldrb	r2, [r2, #0]
    112e:	4282      	cmp	r2, r0
    1130:	d1fa      	bne.n	1128 <isValidCSIEscapeCode+0x8>
		{
			return true;	
		}
	}
	return false;
}
    1132:	2001      	movs	r0, #1
    1134:	4770      	bx	lr
    1136:	46c0      	nop			; (mov r8, r8)
    1138:	000064c0 	.word	0x000064c0

0000113c <CSIparamState>:
{
    113c:	b510      	push	{r4, lr}
    113e:	0004      	movs	r4, r0
	if(character >= 0x30 && character <= 0x39)		//character is a digit, put it in the buffer
    1140:	0003      	movs	r3, r0
    1142:	3b30      	subs	r3, #48	; 0x30
    1144:	2b09      	cmp	r3, #9
    1146:	d90b      	bls.n	1160 <CSIparamState+0x24>
	else if(character == 0x3B)					//character is ';', now we take items out of 
    1148:	283b      	cmp	r0, #59	; 0x3b
    114a:	d00c      	beq.n	1166 <CSIparamState+0x2a>
	else if(character == 0x3F)					//character is '?', this is used for DECCKM
    114c:	283f      	cmp	r0, #63	; 0x3f
    114e:	d00e      	beq.n	116e <CSIparamState+0x32>
	else if(isValidCSIEscapeCode(character))		//character matches a supported escape code
    1150:	4b0d      	ldr	r3, [pc, #52]	; (1188 <CSIparamState+0x4c>)
    1152:	4798      	blx	r3
    1154:	2800      	cmp	r0, #0
    1156:	d10e      	bne.n	1176 <CSIparamState+0x3a>
		currentState = stateCSIignore;
    1158:	2205      	movs	r2, #5
    115a:	4b0c      	ldr	r3, [pc, #48]	; (118c <CSIparamState+0x50>)
    115c:	701a      	strb	r2, [r3, #0]
}
    115e:	bd10      	pop	{r4, pc}
		enqueueParser(character);
    1160:	4b0b      	ldr	r3, [pc, #44]	; (1190 <CSIparamState+0x54>)
    1162:	4798      	blx	r3
    1164:	e7fb      	b.n	115e <CSIparamState+0x22>
		enqueueParser(';');						//parambuffer 			
    1166:	203b      	movs	r0, #59	; 0x3b
    1168:	4b09      	ldr	r3, [pc, #36]	; (1190 <CSIparamState+0x54>)
    116a:	4798      	blx	r3
    116c:	e7f7      	b.n	115e <CSIparamState+0x22>
		enqueueParser('?');						//the terminating character
    116e:	203f      	movs	r0, #63	; 0x3f
    1170:	4b07      	ldr	r3, [pc, #28]	; (1190 <CSIparamState+0x54>)
    1172:	4798      	blx	r3
    1174:	e7f3      	b.n	115e <CSIparamState+0x22>
		queueTransmogrifier();											
    1176:	4b07      	ldr	r3, [pc, #28]	; (1194 <CSIparamState+0x58>)
    1178:	4798      	blx	r3
		currentState = stateCSIentry;
    117a:	2203      	movs	r2, #3
    117c:	4b03      	ldr	r3, [pc, #12]	; (118c <CSIparamState+0x50>)
    117e:	701a      	strb	r2, [r3, #0]
		CSIentryState(character);
    1180:	0020      	movs	r0, r4
    1182:	4b05      	ldr	r3, [pc, #20]	; (1198 <CSIparamState+0x5c>)
    1184:	4798      	blx	r3
    1186:	e7ea      	b.n	115e <CSIparamState+0x22>
    1188:	00001121 	.word	0x00001121
    118c:	200002f1 	.word	0x200002f1
    1190:	00000215 	.word	0x00000215
    1194:	00000309 	.word	0x00000309
    1198:	0000119d 	.word	0x0000119d

0000119c <CSIentryState>:
{
    119c:	b510      	push	{r4, lr}
	if(character == 0x40)		//ESC [ @ ICH insert indicated # of blank chars
    119e:	2840      	cmp	r0, #64	; 0x40
    11a0:	d076      	beq.n	1290 <CSIentryState+0xf4>
	else if(character == 0x41)	//ESC [ A	Cursor Up
    11a2:	2841      	cmp	r0, #65	; 0x41
    11a4:	d100      	bne.n	11a8 <CSIentryState+0xc>
    11a6:	e077      	b.n	1298 <CSIentryState+0xfc>
	else if(character == 0x61)	//ESC [ a HPR
    11a8:	2861      	cmp	r0, #97	; 0x61
    11aa:	d100      	bne.n	11ae <CSIentryState+0x12>
    11ac:	e077      	b.n	129e <CSIentryState+0x102>
	else if(character == 0x42)	//ESC [ B	Cursor Down
    11ae:	2842      	cmp	r0, #66	; 0x42
    11b0:	d100      	bne.n	11b4 <CSIentryState+0x18>
    11b2:	e077      	b.n	12a4 <CSIentryState+0x108>
	else if(character == 0x43)	//ESC [ C	Cursor Forward
    11b4:	2843      	cmp	r0, #67	; 0x43
    11b6:	d100      	bne.n	11ba <CSIentryState+0x1e>
    11b8:	e077      	b.n	12aa <CSIentryState+0x10e>
	else if(character == 0x63)	//ESC [ c DA
    11ba:	2863      	cmp	r0, #99	; 0x63
    11bc:	d100      	bne.n	11c0 <CSIentryState+0x24>
    11be:	e077      	b.n	12b0 <CSIentryState+0x114>
	else if(character == 0x44)	//ESC [ D	Cursor Backward
    11c0:	2844      	cmp	r0, #68	; 0x44
    11c2:	d100      	bne.n	11c6 <CSIentryState+0x2a>
    11c4:	e07c      	b.n	12c0 <CSIentryState+0x124>
	else if(character == 0x64)	//ESC [ d	VPA
    11c6:	2864      	cmp	r0, #100	; 0x64
    11c8:	d065      	beq.n	1296 <CSIentryState+0xfa>
	else if(character == 0x45)	//ESC [ E	Cursor Next Line
    11ca:	2845      	cmp	r0, #69	; 0x45
    11cc:	d100      	bne.n	11d0 <CSIentryState+0x34>
    11ce:	e07a      	b.n	12c6 <CSIentryState+0x12a>
	else if(character == 0x65)	//ESC [ e VPR
    11d0:	2865      	cmp	r0, #101	; 0x65
    11d2:	d100      	bne.n	11d6 <CSIentryState+0x3a>
    11d4:	e07a      	b.n	12cc <CSIentryState+0x130>
	else if(character == 0x46)	//ESC [ F	Cursor Preceding Line
    11d6:	2846      	cmp	r0, #70	; 0x46
    11d8:	d100      	bne.n	11dc <CSIentryState+0x40>
    11da:	e07a      	b.n	12d2 <CSIentryState+0x136>
	else if(character == 0x66)	//ESC [ f HVP
    11dc:	2866      	cmp	r0, #102	; 0x66
    11de:	d100      	bne.n	11e2 <CSIentryState+0x46>
    11e0:	e07a      	b.n	12d8 <CSIentryState+0x13c>
	else if(character == 0x47)	//ESC [ G	Cursor Horizontal Absolute
    11e2:	2847      	cmp	r0, #71	; 0x47
    11e4:	d100      	bne.n	11e8 <CSIentryState+0x4c>
    11e6:	e07a      	b.n	12de <CSIentryState+0x142>
	else if(character == 0x67)	//ESC [ g TBC
    11e8:	2867      	cmp	r0, #103	; 0x67
    11ea:	d100      	bne.n	11ee <CSIentryState+0x52>
    11ec:	e07a      	b.n	12e4 <CSIentryState+0x148>
	else if(character == 0x48)	//ESC [ H	Cursor Position
    11ee:	2848      	cmp	r0, #72	; 0x48
    11f0:	d100      	bne.n	11f4 <CSIentryState+0x58>
    11f2:	e07b      	b.n	12ec <CSIentryState+0x150>
	else if(character == 0x68)	//ESC [ h Set Mode
    11f4:	2868      	cmp	r0, #104	; 0x68
    11f6:	d100      	bne.n	11fa <CSIentryState+0x5e>
    11f8:	e07b      	b.n	12f2 <CSIentryState+0x156>
	else if(character == 0x49)	//ESC [ I	Cursor Horizontal Tab
    11fa:	2849      	cmp	r0, #73	; 0x49
    11fc:	d100      	bne.n	1200 <CSIentryState+0x64>
    11fe:	e07c      	b.n	12fa <CSIentryState+0x15e>
	else if(character == 0x4A)	//ESC [ J	Erase In Display
    1200:	284a      	cmp	r0, #74	; 0x4a
    1202:	d100      	bne.n	1206 <CSIentryState+0x6a>
    1204:	e07d      	b.n	1302 <CSIentryState+0x166>
	else if(character == 0x4B)	//ESC [ K	Erase In Line
    1206:	284b      	cmp	r0, #75	; 0x4b
    1208:	d100      	bne.n	120c <CSIentryState+0x70>
    120a:	e07d      	b.n	1308 <CSIentryState+0x16c>
	else if(character == 0x4C)	//ESC [ L 
    120c:	284c      	cmp	r0, #76	; 0x4c
    120e:	d100      	bne.n	1212 <CSIentryState+0x76>
    1210:	e07d      	b.n	130e <CSIentryState+0x172>
	else if(character == 0x6C)	//ESC [ l	Reset mode
    1212:	286c      	cmp	r0, #108	; 0x6c
    1214:	d100      	bne.n	1218 <CSIentryState+0x7c>
    1216:	e07e      	b.n	1316 <CSIentryState+0x17a>
	else if(character == 0x4D)	//ESC [ M
    1218:	284d      	cmp	r0, #77	; 0x4d
    121a:	d100      	bne.n	121e <CSIentryState+0x82>
    121c:	e07f      	b.n	131e <CSIentryState+0x182>
	else if(character == 0x6D)	//ESC [ m	Select Graphic Rendition
    121e:	286d      	cmp	r0, #109	; 0x6d
    1220:	d100      	bne.n	1224 <CSIentryState+0x88>
    1222:	e080      	b.n	1326 <CSIentryState+0x18a>
	else if(character == 0x6E)	//ESC [ n Device Status Report
    1224:	286e      	cmp	r0, #110	; 0x6e
    1226:	d100      	bne.n	122a <CSIentryState+0x8e>
    1228:	e080      	b.n	132c <CSIentryState+0x190>
	else if(character == 0x50)	//ESC [ P	Delete Character
    122a:	2850      	cmp	r0, #80	; 0x50
    122c:	d100      	bne.n	1230 <CSIentryState+0x94>
    122e:	e080      	b.n	1332 <CSIentryState+0x196>
	else if(character == 0x51)	//ESC [ Q	Select Edit Extent Mode
    1230:	2851      	cmp	r0, #81	; 0x51
    1232:	d100      	bne.n	1236 <CSIentryState+0x9a>
    1234:	e081      	b.n	133a <CSIentryState+0x19e>
	else if(character == 0x71)	//ESC [ q	Set Keyboard LEDs
    1236:	2871      	cmp	r0, #113	; 0x71
    1238:	d100      	bne.n	123c <CSIentryState+0xa0>
    123a:	e082      	b.n	1342 <CSIentryState+0x1a6>
	else if(character == 0x72)	//ESC [ r	DECSTBM
    123c:	2872      	cmp	r0, #114	; 0x72
    123e:	d100      	bne.n	1242 <CSIentryState+0xa6>
    1240:	e083      	b.n	134a <CSIentryState+0x1ae>
	else if(character == 0x73)	//ESC [ s	Save Cursor Position
    1242:	2873      	cmp	r0, #115	; 0x73
    1244:	d100      	bne.n	1248 <CSIentryState+0xac>
    1246:	e084      	b.n	1352 <CSIentryState+0x1b6>
	else if(character == 0x75)	//ESC [ u	Restore Cursor Position
    1248:	2875      	cmp	r0, #117	; 0x75
    124a:	d100      	bne.n	124e <CSIentryState+0xb2>
    124c:	e084      	b.n	1358 <CSIentryState+0x1bc>
	else if(character == 0x58)	//ESC [ X
    124e:	2858      	cmp	r0, #88	; 0x58
    1250:	d100      	bne.n	1254 <CSIentryState+0xb8>
    1252:	e084      	b.n	135e <CSIentryState+0x1c2>
	else if(character == 0x57)	//ESC [ W	Cursor Tabulation Control
    1254:	2857      	cmp	r0, #87	; 0x57
    1256:	d100      	bne.n	125a <CSIentryState+0xbe>
    1258:	e085      	b.n	1366 <CSIentryState+0x1ca>
	else if(character == 0x5A)	//ESC [ Z	Cursor Backwards Tab
    125a:	285a      	cmp	r0, #90	; 0x5a
    125c:	d100      	bne.n	1260 <CSIentryState+0xc4>
    125e:	e086      	b.n	136e <CSIentryState+0x1d2>
	else if(character == 0x60)	//ESC [ ` HPA
    1260:	2860      	cmp	r0, #96	; 0x60
    1262:	d100      	bne.n	1266 <CSIentryState+0xca>
    1264:	e087      	b.n	1376 <CSIentryState+0x1da>
	else if(character >= 0x30 && character <= 0x39) // if the character is a digit 0-9
    1266:	0003      	movs	r3, r0
    1268:	3b30      	subs	r3, #48	; 0x30
    126a:	2b09      	cmp	r3, #9
    126c:	d800      	bhi.n	1270 <CSIentryState+0xd4>
    126e:	e086      	b.n	137e <CSIentryState+0x1e2>
	else if(character == 0x3B)	//Semicolon ; parameter deliminator
    1270:	283b      	cmp	r0, #59	; 0x3b
    1272:	d100      	bne.n	1276 <CSIentryState+0xda>
    1274:	e089      	b.n	138a <CSIentryState+0x1ee>
	else if(character == 0x3F)	//Question '?'; this is a param
    1276:	283f      	cmp	r0, #63	; 0x3f
    1278:	d100      	bne.n	127c <CSIentryState+0xe0>
    127a:	e08c      	b.n	1396 <CSIentryState+0x1fa>
	else if(character == 0x1B)		//ESC, send back to stateESC
    127c:	281b      	cmp	r0, #27
    127e:	d100      	bne.n	1282 <CSIentryState+0xe6>
    1280:	e08f      	b.n	13a2 <CSIentryState+0x206>
	else if(character == 0x3A)
    1282:	283a      	cmp	r0, #58	; 0x3a
    1284:	d100      	bne.n	1288 <CSIentryState+0xec>
    1286:	e090      	b.n	13aa <CSIentryState+0x20e>
		currentState = stateGround;
    1288:	2200      	movs	r2, #0
    128a:	4b4a      	ldr	r3, [pc, #296]	; (13b4 <CSIentryState+0x218>)
    128c:	701a      	strb	r2, [r3, #0]
}
    128e:	e002      	b.n	1296 <CSIentryState+0xfa>
	currentState = stateGround;
    1290:	2200      	movs	r2, #0
    1292:	4b48      	ldr	r3, [pc, #288]	; (13b4 <CSIentryState+0x218>)
    1294:	701a      	strb	r2, [r3, #0]
}
    1296:	bd10      	pop	{r4, pc}
		CUU();
    1298:	4b47      	ldr	r3, [pc, #284]	; (13b8 <CSIentryState+0x21c>)
    129a:	4798      	blx	r3
    129c:	e7fb      	b.n	1296 <CSIentryState+0xfa>
		CUF();
    129e:	4b47      	ldr	r3, [pc, #284]	; (13bc <CSIentryState+0x220>)
    12a0:	4798      	blx	r3
    12a2:	e7f8      	b.n	1296 <CSIentryState+0xfa>
		CUD();
    12a4:	4b46      	ldr	r3, [pc, #280]	; (13c0 <CSIentryState+0x224>)
    12a6:	4798      	blx	r3
    12a8:	e7f5      	b.n	1296 <CSIentryState+0xfa>
		CUF();
    12aa:	4b44      	ldr	r3, [pc, #272]	; (13bc <CSIentryState+0x220>)
    12ac:	4798      	blx	r3
    12ae:	e7f2      	b.n	1296 <CSIentryState+0xfa>
		printf("%s",DECIDreturn);
    12b0:	4944      	ldr	r1, [pc, #272]	; (13c4 <CSIentryState+0x228>)
    12b2:	4845      	ldr	r0, [pc, #276]	; (13c8 <CSIentryState+0x22c>)
    12b4:	4b45      	ldr	r3, [pc, #276]	; (13cc <CSIentryState+0x230>)
    12b6:	4798      	blx	r3
		currentState = stateGround;
    12b8:	2200      	movs	r2, #0
    12ba:	4b3e      	ldr	r3, [pc, #248]	; (13b4 <CSIentryState+0x218>)
    12bc:	701a      	strb	r2, [r3, #0]
    12be:	e7ea      	b.n	1296 <CSIentryState+0xfa>
		CUB();
    12c0:	4b43      	ldr	r3, [pc, #268]	; (13d0 <CSIentryState+0x234>)
    12c2:	4798      	blx	r3
    12c4:	e7e7      	b.n	1296 <CSIentryState+0xfa>
		CNL();
    12c6:	4b43      	ldr	r3, [pc, #268]	; (13d4 <CSIentryState+0x238>)
    12c8:	4798      	blx	r3
    12ca:	e7e4      	b.n	1296 <CSIentryState+0xfa>
		CUD();
    12cc:	4b3c      	ldr	r3, [pc, #240]	; (13c0 <CSIentryState+0x224>)
    12ce:	4798      	blx	r3
    12d0:	e7e1      	b.n	1296 <CSIentryState+0xfa>
		CPL();
    12d2:	4b41      	ldr	r3, [pc, #260]	; (13d8 <CSIentryState+0x23c>)
    12d4:	4798      	blx	r3
    12d6:	e7de      	b.n	1296 <CSIentryState+0xfa>
		CUP();
    12d8:	4b40      	ldr	r3, [pc, #256]	; (13dc <CSIentryState+0x240>)
    12da:	4798      	blx	r3
    12dc:	e7db      	b.n	1296 <CSIentryState+0xfa>
		CHA();
    12de:	4b40      	ldr	r3, [pc, #256]	; (13e0 <CSIentryState+0x244>)
    12e0:	4798      	blx	r3
    12e2:	e7d8      	b.n	1296 <CSIentryState+0xfa>
		currentState = stateGround;
    12e4:	2200      	movs	r2, #0
    12e6:	4b33      	ldr	r3, [pc, #204]	; (13b4 <CSIentryState+0x218>)
    12e8:	701a      	strb	r2, [r3, #0]
    12ea:	e7d4      	b.n	1296 <CSIentryState+0xfa>
		CUP();
    12ec:	4b3b      	ldr	r3, [pc, #236]	; (13dc <CSIentryState+0x240>)
    12ee:	4798      	blx	r3
    12f0:	e7d1      	b.n	1296 <CSIentryState+0xfa>
		currentState = stateGround;
    12f2:	2200      	movs	r2, #0
    12f4:	4b2f      	ldr	r3, [pc, #188]	; (13b4 <CSIentryState+0x218>)
    12f6:	701a      	strb	r2, [r3, #0]
    12f8:	e7cd      	b.n	1296 <CSIentryState+0xfa>
	currentState = stateGround;
    12fa:	2200      	movs	r2, #0
    12fc:	4b2d      	ldr	r3, [pc, #180]	; (13b4 <CSIentryState+0x218>)
    12fe:	701a      	strb	r2, [r3, #0]
    1300:	e7c9      	b.n	1296 <CSIentryState+0xfa>
		ED();
    1302:	4b38      	ldr	r3, [pc, #224]	; (13e4 <CSIentryState+0x248>)
    1304:	4798      	blx	r3
    1306:	e7c6      	b.n	1296 <CSIentryState+0xfa>
		EL();
    1308:	4b37      	ldr	r3, [pc, #220]	; (13e8 <CSIentryState+0x24c>)
    130a:	4798      	blx	r3
    130c:	e7c3      	b.n	1296 <CSIentryState+0xfa>
		currentState = stateGround;
    130e:	2200      	movs	r2, #0
    1310:	4b28      	ldr	r3, [pc, #160]	; (13b4 <CSIentryState+0x218>)
    1312:	701a      	strb	r2, [r3, #0]
    1314:	e7bf      	b.n	1296 <CSIentryState+0xfa>
		currentState = stateGround;
    1316:	2200      	movs	r2, #0
    1318:	4b26      	ldr	r3, [pc, #152]	; (13b4 <CSIentryState+0x218>)
    131a:	701a      	strb	r2, [r3, #0]
    131c:	e7bb      	b.n	1296 <CSIentryState+0xfa>
		currentState = stateGround;
    131e:	2200      	movs	r2, #0
    1320:	4b24      	ldr	r3, [pc, #144]	; (13b4 <CSIentryState+0x218>)
    1322:	701a      	strb	r2, [r3, #0]
    1324:	e7b7      	b.n	1296 <CSIentryState+0xfa>
		SGR();
    1326:	4b31      	ldr	r3, [pc, #196]	; (13ec <CSIentryState+0x250>)
    1328:	4798      	blx	r3
    132a:	e7b4      	b.n	1296 <CSIentryState+0xfa>
		DSR();
    132c:	4b30      	ldr	r3, [pc, #192]	; (13f0 <CSIentryState+0x254>)
    132e:	4798      	blx	r3
    1330:	e7b1      	b.n	1296 <CSIentryState+0xfa>
	currentState = stateGround;
    1332:	2200      	movs	r2, #0
    1334:	4b1f      	ldr	r3, [pc, #124]	; (13b4 <CSIentryState+0x218>)
    1336:	701a      	strb	r2, [r3, #0]
    1338:	e7ad      	b.n	1296 <CSIentryState+0xfa>
	currentState = stateGround;
    133a:	2200      	movs	r2, #0
    133c:	4b1d      	ldr	r3, [pc, #116]	; (13b4 <CSIentryState+0x218>)
    133e:	701a      	strb	r2, [r3, #0]
    1340:	e7a9      	b.n	1296 <CSIentryState+0xfa>
		currentState = stateGround;
    1342:	2200      	movs	r2, #0
    1344:	4b1b      	ldr	r3, [pc, #108]	; (13b4 <CSIentryState+0x218>)
    1346:	701a      	strb	r2, [r3, #0]
    1348:	e7a5      	b.n	1296 <CSIentryState+0xfa>
		currentState = stateGround;
    134a:	2200      	movs	r2, #0
    134c:	4b19      	ldr	r3, [pc, #100]	; (13b4 <CSIentryState+0x218>)
    134e:	701a      	strb	r2, [r3, #0]
    1350:	e7a1      	b.n	1296 <CSIentryState+0xfa>
		SC();
    1352:	4b28      	ldr	r3, [pc, #160]	; (13f4 <CSIentryState+0x258>)
    1354:	4798      	blx	r3
    1356:	e79e      	b.n	1296 <CSIentryState+0xfa>
		RC();
    1358:	4b27      	ldr	r3, [pc, #156]	; (13f8 <CSIentryState+0x25c>)
    135a:	4798      	blx	r3
    135c:	e79b      	b.n	1296 <CSIentryState+0xfa>
		currentState = stateGround;
    135e:	2200      	movs	r2, #0
    1360:	4b14      	ldr	r3, [pc, #80]	; (13b4 <CSIentryState+0x218>)
    1362:	701a      	strb	r2, [r3, #0]
    1364:	e797      	b.n	1296 <CSIentryState+0xfa>
	currentState = stateGround;
    1366:	2200      	movs	r2, #0
    1368:	4b12      	ldr	r3, [pc, #72]	; (13b4 <CSIentryState+0x218>)
    136a:	701a      	strb	r2, [r3, #0]
    136c:	e793      	b.n	1296 <CSIentryState+0xfa>
	currentState = stateGround;
    136e:	2200      	movs	r2, #0
    1370:	4b10      	ldr	r3, [pc, #64]	; (13b4 <CSIentryState+0x218>)
    1372:	701a      	strb	r2, [r3, #0]
    1374:	e78f      	b.n	1296 <CSIentryState+0xfa>
		currentState = stateGround;
    1376:	2200      	movs	r2, #0
    1378:	4b0e      	ldr	r3, [pc, #56]	; (13b4 <CSIentryState+0x218>)
    137a:	701a      	strb	r2, [r3, #0]
    137c:	e78b      	b.n	1296 <CSIentryState+0xfa>
		currentState = stateCSIparam;
    137e:	2204      	movs	r2, #4
    1380:	4b0c      	ldr	r3, [pc, #48]	; (13b4 <CSIentryState+0x218>)
    1382:	701a      	strb	r2, [r3, #0]
		CSIparamState(character);
    1384:	4b1d      	ldr	r3, [pc, #116]	; (13fc <CSIentryState+0x260>)
    1386:	4798      	blx	r3
    1388:	e785      	b.n	1296 <CSIentryState+0xfa>
		currentState = stateCSIparam;
    138a:	2204      	movs	r2, #4
    138c:	4b09      	ldr	r3, [pc, #36]	; (13b4 <CSIentryState+0x218>)
    138e:	701a      	strb	r2, [r3, #0]
		CSIparamState(character);
    1390:	4b1a      	ldr	r3, [pc, #104]	; (13fc <CSIentryState+0x260>)
    1392:	4798      	blx	r3
    1394:	e77f      	b.n	1296 <CSIentryState+0xfa>
		currentState = stateCSIparam;
    1396:	2204      	movs	r2, #4
    1398:	4b06      	ldr	r3, [pc, #24]	; (13b4 <CSIentryState+0x218>)
    139a:	701a      	strb	r2, [r3, #0]
		CSIparamState(character);
    139c:	4b17      	ldr	r3, [pc, #92]	; (13fc <CSIentryState+0x260>)
    139e:	4798      	blx	r3
    13a0:	e779      	b.n	1296 <CSIentryState+0xfa>
		currentState = stateESC;
    13a2:	2201      	movs	r2, #1
    13a4:	4b03      	ldr	r3, [pc, #12]	; (13b4 <CSIentryState+0x218>)
    13a6:	701a      	strb	r2, [r3, #0]
    13a8:	e775      	b.n	1296 <CSIentryState+0xfa>
		currentState = stateCSIignore;
    13aa:	2205      	movs	r2, #5
    13ac:	4b01      	ldr	r3, [pc, #4]	; (13b4 <CSIentryState+0x218>)
    13ae:	701a      	strb	r2, [r3, #0]
    13b0:	e771      	b.n	1296 <CSIentryState+0xfa>
    13b2:	46c0      	nop			; (mov r8, r8)
    13b4:	200002f1 	.word	0x200002f1
    13b8:	00000651 	.word	0x00000651
    13bc:	00000799 	.word	0x00000799
    13c0:	000006f5 	.word	0x000006f5
    13c4:	000064ac 	.word	0x000064ac
    13c8:	000064e0 	.word	0x000064e0
    13cc:	00005005 	.word	0x00005005
    13d0:	00000841 	.word	0x00000841
    13d4:	000008dd 	.word	0x000008dd
    13d8:	00000975 	.word	0x00000975
    13dc:	00000a8d 	.word	0x00000a8d
    13e0:	00000a09 	.word	0x00000a09
    13e4:	00000b39 	.word	0x00000b39
    13e8:	00000c75 	.word	0x00000c75
    13ec:	00000d69 	.word	0x00000d69
    13f0:	00000ff1 	.word	0x00000ff1
    13f4:	0000036d 	.word	0x0000036d
    13f8:	00000399 	.word	0x00000399
    13fc:	0000113d 	.word	0x0000113d

00001400 <nextTab>:


int nextTab(int a) 
{
    1400:	b510      	push	{r4, lr}
    1402:	b0d0      	sub	sp, #320	; 0x140
    1404:	0004      	movs	r4, r0
	int tabArray[] =
    1406:	22a0      	movs	r2, #160	; 0xa0
    1408:	0052      	lsls	r2, r2, #1
    140a:	4905      	ldr	r1, [pc, #20]	; (1420 <nextTab+0x20>)
    140c:	3104      	adds	r1, #4
    140e:	4668      	mov	r0, sp
    1410:	4b04      	ldr	r3, [pc, #16]	; (1424 <nextTab+0x24>)
    1412:	4798      	blx	r3
		 64,64,64,64,64,64,64,64,
		 72,72,72,72,72,72,72,72,
		 79,79,79,79,79,79,79,79
		};
	
	return tabArray[a];
    1414:	00a4      	lsls	r4, r4, #2
    1416:	466b      	mov	r3, sp
    1418:	58e0      	ldr	r0, [r4, r3]
}
    141a:	b050      	add	sp, #320	; 0x140
    141c:	bd10      	pop	{r4, pc}
    141e:	46c0      	nop			; (mov r8, r8)
    1420:	00006368 	.word	0x00006368
    1424:	00004e91 	.word	0x00004e91

00001428 <groundState>:
{
    1428:	b570      	push	{r4, r5, r6, lr}
    142a:	0004      	movs	r4, r0
	clearQueues();									//parser and paramQueues cleared
    142c:	4bb9      	ldr	r3, [pc, #740]	; (1714 <groundState+0x2ec>)
    142e:	4798      	blx	r3
	if(character == 0x00)							//NUL 0x00 DO NOTHING
    1430:	2c07      	cmp	r4, #7
    1432:	d800      	bhi.n	1436 <groundState+0xe>
    1434:	e082      	b.n	153c <groundState+0x114>
	else if(character == 0x08)						//BS 0x08 Backspace
    1436:	2c08      	cmp	r4, #8
    1438:	d100      	bne.n	143c <groundState+0x14>
    143a:	e07b      	b.n	1534 <groundState+0x10c>
	else if(character == 0x09)						//TAB 0x09 Horizontal Tab
    143c:	2c09      	cmp	r4, #9
    143e:	d100      	bne.n	1442 <groundState+0x1a>
    1440:	e096      	b.n	1570 <groundState+0x148>
	else if(character == 0x0A)						//LF 0x0A Line Feed
    1442:	2c0a      	cmp	r4, #10
    1444:	d100      	bne.n	1448 <groundState+0x20>
    1446:	e0b5      	b.n	15b4 <groundState+0x18c>
	else if(character == 0x0B)						//VT 0x0B Vertical Tab
    1448:	2c0b      	cmp	r4, #11
    144a:	d100      	bne.n	144e <groundState+0x26>
    144c:	e109      	b.n	1662 <groundState+0x23a>
	else if(character == 0x0C)						//FF 0x0C Form Feed
    144e:	2c0c      	cmp	r4, #12
    1450:	d100      	bne.n	1454 <groundState+0x2c>
    1452:	e181      	b.n	1758 <groundState+0x330>
	else if(character == 0x0D)						//CR 0x0D Carriage Return
    1454:	2c0d      	cmp	r4, #13
    1456:	d100      	bne.n	145a <groundState+0x32>
    1458:	e1d6      	b.n	1808 <groundState+0x3e0>
	else if(character == 0x0E)						//SO 0x0E Shift Out
    145a:	0023      	movs	r3, r4
    145c:	3b0e      	subs	r3, #14
    145e:	2b0c      	cmp	r3, #12
    1460:	d96c      	bls.n	153c <groundState+0x114>
	else if(character == 0x1B)						//ESC 0x1B Escape
    1462:	2c1b      	cmp	r4, #27
    1464:	d100      	bne.n	1468 <groundState+0x40>
    1466:	e1f5      	b.n	1854 <groundState+0x42c>
	else if(character == 0x1C)						//FS 0x1C File Separator
    1468:	0023      	movs	r3, r4
    146a:	3b1c      	subs	r3, #28
    146c:	2b03      	cmp	r3, #3
    146e:	d965      	bls.n	153c <groundState+0x114>
	else if(character == 0x7F)						//DEL 0x7F Delete
    1470:	2c7f      	cmp	r4, #127	; 0x7f
    1472:	d063      	beq.n	153c <groundState+0x114>
		consoleDisplay[xCharPos][yCharPos] = character;
    1474:	4ba8      	ldr	r3, [pc, #672]	; (1718 <groundState+0x2f0>)
    1476:	881a      	ldrh	r2, [r3, #0]
    1478:	4ba8      	ldr	r3, [pc, #672]	; (171c <groundState+0x2f4>)
    147a:	881b      	ldrh	r3, [r3, #0]
    147c:	2018      	movs	r0, #24
    147e:	4350      	muls	r0, r2
    1480:	49a7      	ldr	r1, [pc, #668]	; (1720 <groundState+0x2f8>)
    1482:	1809      	adds	r1, r1, r0
    1484:	54cc      	strb	r4, [r1, r3]
		if(textReverseVideo == true)  //If this is reverse Text
    1486:	49a7      	ldr	r1, [pc, #668]	; (1724 <groundState+0x2fc>)
    1488:	7809      	ldrb	r1, [r1, #0]
    148a:	2900      	cmp	r1, #0
    148c:	d100      	bne.n	1490 <groundState+0x68>
    148e:	e1e5      	b.n	185c <groundState+0x434>
			SetBit(consoleSGR[xCharPos][yCharPos],7);
    1490:	2018      	movs	r0, #24
    1492:	4350      	muls	r0, r2
    1494:	49a4      	ldr	r1, [pc, #656]	; (1728 <groundState+0x300>)
    1496:	1809      	adds	r1, r1, r0
    1498:	5ccd      	ldrb	r5, [r1, r3]
    149a:	2080      	movs	r0, #128	; 0x80
    149c:	4240      	negs	r0, r0
    149e:	4328      	orrs	r0, r5
    14a0:	54c8      	strb	r0, [r1, r3]
		if(textBold == true)
    14a2:	49a2      	ldr	r1, [pc, #648]	; (172c <groundState+0x304>)
    14a4:	7809      	ldrb	r1, [r1, #0]
    14a6:	2900      	cmp	r1, #0
    14a8:	d100      	bne.n	14ac <groundState+0x84>
    14aa:	e1e0      	b.n	186e <groundState+0x446>
			SetBit(consoleSGR[xCharPos][yCharPos],1);
    14ac:	2018      	movs	r0, #24
    14ae:	4350      	muls	r0, r2
    14b0:	499d      	ldr	r1, [pc, #628]	; (1728 <groundState+0x300>)
    14b2:	1809      	adds	r1, r1, r0
    14b4:	5ccd      	ldrb	r5, [r1, r3]
    14b6:	2002      	movs	r0, #2
    14b8:	4328      	orrs	r0, r5
    14ba:	54c8      	strb	r0, [r1, r3]
		if(textUnderscore == true)
    14bc:	499c      	ldr	r1, [pc, #624]	; (1730 <groundState+0x308>)
    14be:	7809      	ldrb	r1, [r1, #0]
    14c0:	2900      	cmp	r1, #0
    14c2:	d100      	bne.n	14c6 <groundState+0x9e>
    14c4:	e1dc      	b.n	1880 <groundState+0x458>
			SetBit(consoleSGR[xCharPos][yCharPos],4);
    14c6:	2018      	movs	r0, #24
    14c8:	4350      	muls	r0, r2
    14ca:	4997      	ldr	r1, [pc, #604]	; (1728 <groundState+0x300>)
    14cc:	1809      	adds	r1, r1, r0
    14ce:	5ccd      	ldrb	r5, [r1, r3]
    14d0:	2010      	movs	r0, #16
    14d2:	4328      	orrs	r0, r5
    14d4:	54c8      	strb	r0, [r1, r3]
		if(textBlink == true)
    14d6:	4997      	ldr	r1, [pc, #604]	; (1734 <groundState+0x30c>)
    14d8:	7809      	ldrb	r1, [r1, #0]
    14da:	2900      	cmp	r1, #0
    14dc:	d100      	bne.n	14e0 <groundState+0xb8>
    14de:	e1d8      	b.n	1892 <groundState+0x46a>
			SetBit(consoleSGR[xCharPos][yCharPos],5);
    14e0:	2018      	movs	r0, #24
    14e2:	4350      	muls	r0, r2
    14e4:	4990      	ldr	r1, [pc, #576]	; (1728 <groundState+0x300>)
    14e6:	1809      	adds	r1, r1, r0
    14e8:	5ccd      	ldrb	r5, [r1, r3]
    14ea:	2020      	movs	r0, #32
    14ec:	4328      	orrs	r0, r5
    14ee:	54c8      	strb	r0, [r1, r3]
		consoleColors[xCharPos][yCharPos] = (textForeground << 16) | textBackground;
    14f0:	2518      	movs	r5, #24
    14f2:	436a      	muls	r2, r5
    14f4:	18d3      	adds	r3, r2, r3
    14f6:	009b      	lsls	r3, r3, #2
    14f8:	4a8f      	ldr	r2, [pc, #572]	; (1738 <groundState+0x310>)
    14fa:	8812      	ldrh	r2, [r2, #0]
    14fc:	0412      	lsls	r2, r2, #16
    14fe:	498f      	ldr	r1, [pc, #572]	; (173c <groundState+0x314>)
    1500:	8809      	ldrh	r1, [r1, #0]
    1502:	430a      	orrs	r2, r1
    1504:	498e      	ldr	r1, [pc, #568]	; (1740 <groundState+0x318>)
    1506:	505a      	str	r2, [r3, r1]
		drawChar(consoleDisplay[xCharPos][yCharPos]);
    1508:	0020      	movs	r0, r4
    150a:	4e8e      	ldr	r6, [pc, #568]	; (1744 <groundState+0x31c>)
    150c:	47b0      	blx	r6
		xCharPos++;
    150e:	4c82      	ldr	r4, [pc, #520]	; (1718 <groundState+0x2f0>)
    1510:	8823      	ldrh	r3, [r4, #0]
    1512:	3301      	adds	r3, #1
    1514:	b29b      	uxth	r3, r3
    1516:	8023      	strh	r3, [r4, #0]
		drawChar(consoleDisplay[xCharPos][yCharPos]);
    1518:	4a80      	ldr	r2, [pc, #512]	; (171c <groundState+0x2f4>)
    151a:	8812      	ldrh	r2, [r2, #0]
    151c:	436b      	muls	r3, r5
    151e:	4d80      	ldr	r5, [pc, #512]	; (1720 <groundState+0x2f8>)
    1520:	18eb      	adds	r3, r5, r3
    1522:	5c98      	ldrb	r0, [r3, r2]
    1524:	47b0      	blx	r6
		if(xCharPos > 79)		//END OF LINE
    1526:	8823      	ldrh	r3, [r4, #0]
    1528:	2b4f      	cmp	r3, #79	; 0x4f
    152a:	d907      	bls.n	153c <groundState+0x114>
			xCharPos--;
    152c:	3b01      	subs	r3, #1
    152e:	4a7a      	ldr	r2, [pc, #488]	; (1718 <groundState+0x2f0>)
    1530:	8013      	strh	r3, [r2, #0]
}
    1532:	e003      	b.n	153c <groundState+0x114>
		if(xCharPos > 0)
    1534:	4b78      	ldr	r3, [pc, #480]	; (1718 <groundState+0x2f0>)
    1536:	881b      	ldrh	r3, [r3, #0]
    1538:	2b00      	cmp	r3, #0
    153a:	d100      	bne.n	153e <groundState+0x116>
}
    153c:	bd70      	pop	{r4, r5, r6, pc}
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    153e:	4c78      	ldr	r4, [pc, #480]	; (1720 <groundState+0x2f8>)
    1540:	4d76      	ldr	r5, [pc, #472]	; (171c <groundState+0x2f4>)
    1542:	8829      	ldrh	r1, [r5, #0]
    1544:	005a      	lsls	r2, r3, #1
    1546:	18d3      	adds	r3, r2, r3
    1548:	00db      	lsls	r3, r3, #3
    154a:	18e3      	adds	r3, r4, r3
    154c:	5c58      	ldrb	r0, [r3, r1]
    154e:	4e7d      	ldr	r6, [pc, #500]	; (1744 <groundState+0x31c>)
    1550:	47b0      	blx	r6
			xCharPos--;
    1552:	4a71      	ldr	r2, [pc, #452]	; (1718 <groundState+0x2f0>)
    1554:	8813      	ldrh	r3, [r2, #0]
    1556:	3b01      	subs	r3, #1
    1558:	b29b      	uxth	r3, r3
    155a:	8013      	strh	r3, [r2, #0]
			tempCharacter = consoleDisplay[xCharPos][yCharPos];
    155c:	8829      	ldrh	r1, [r5, #0]
    155e:	005a      	lsls	r2, r3, #1
    1560:	18d3      	adds	r3, r2, r3
    1562:	00db      	lsls	r3, r3, #3
    1564:	18e3      	adds	r3, r4, r3
			drawChar(tempCharacter);
    1566:	5c58      	ldrb	r0, [r3, r1]
    1568:	47b0      	blx	r6
			blinkCursor();
    156a:	4b77      	ldr	r3, [pc, #476]	; (1748 <groundState+0x320>)
    156c:	4798      	blx	r3
    156e:	e7e5      	b.n	153c <groundState+0x114>
		drawChar(consoleDisplay[xCharPos][yCharPos]);
    1570:	4c69      	ldr	r4, [pc, #420]	; (1718 <groundState+0x2f0>)
    1572:	8822      	ldrh	r2, [r4, #0]
    1574:	4b69      	ldr	r3, [pc, #420]	; (171c <groundState+0x2f4>)
    1576:	8819      	ldrh	r1, [r3, #0]
    1578:	0053      	lsls	r3, r2, #1
    157a:	189b      	adds	r3, r3, r2
    157c:	00db      	lsls	r3, r3, #3
    157e:	4a68      	ldr	r2, [pc, #416]	; (1720 <groundState+0x2f8>)
    1580:	18d3      	adds	r3, r2, r3
    1582:	5c58      	ldrb	r0, [r3, r1]
    1584:	4b6f      	ldr	r3, [pc, #444]	; (1744 <groundState+0x31c>)
    1586:	4798      	blx	r3
		if(xCharPos <= 79)
    1588:	8820      	ldrh	r0, [r4, #0]
    158a:	284f      	cmp	r0, #79	; 0x4f
    158c:	d803      	bhi.n	1596 <groundState+0x16e>
			xCharPos = nextTab(xCharPos);
    158e:	4b6f      	ldr	r3, [pc, #444]	; (174c <groundState+0x324>)
    1590:	4798      	blx	r3
    1592:	4b61      	ldr	r3, [pc, #388]	; (1718 <groundState+0x2f0>)
    1594:	8018      	strh	r0, [r3, #0]
		drawChar(consoleDisplay[xCharPos][yCharPos]);
    1596:	4b60      	ldr	r3, [pc, #384]	; (1718 <groundState+0x2f0>)
    1598:	881a      	ldrh	r2, [r3, #0]
    159a:	4b60      	ldr	r3, [pc, #384]	; (171c <groundState+0x2f4>)
    159c:	8819      	ldrh	r1, [r3, #0]
    159e:	0053      	lsls	r3, r2, #1
    15a0:	189b      	adds	r3, r3, r2
    15a2:	00db      	lsls	r3, r3, #3
    15a4:	4a5e      	ldr	r2, [pc, #376]	; (1720 <groundState+0x2f8>)
    15a6:	18d3      	adds	r3, r2, r3
    15a8:	5c58      	ldrb	r0, [r3, r1]
    15aa:	4b66      	ldr	r3, [pc, #408]	; (1744 <groundState+0x31c>)
    15ac:	4798      	blx	r3
		blinkCursor();
    15ae:	4b66      	ldr	r3, [pc, #408]	; (1748 <groundState+0x320>)
    15b0:	4798      	blx	r3
    15b2:	e7c3      	b.n	153c <groundState+0x114>
		if(yCharPos == 23)
    15b4:	4b59      	ldr	r3, [pc, #356]	; (171c <groundState+0x2f4>)
    15b6:	881a      	ldrh	r2, [r3, #0]
    15b8:	2a17      	cmp	r2, #23
    15ba:	d032      	beq.n	1622 <groundState+0x1fa>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    15bc:	4c58      	ldr	r4, [pc, #352]	; (1720 <groundState+0x2f8>)
    15be:	4d56      	ldr	r5, [pc, #344]	; (1718 <groundState+0x2f0>)
    15c0:	8829      	ldrh	r1, [r5, #0]
    15c2:	004b      	lsls	r3, r1, #1
    15c4:	185b      	adds	r3, r3, r1
    15c6:	00db      	lsls	r3, r3, #3
    15c8:	18e3      	adds	r3, r4, r3
    15ca:	5c98      	ldrb	r0, [r3, r2]
    15cc:	4e5d      	ldr	r6, [pc, #372]	; (1744 <groundState+0x31c>)
    15ce:	47b0      	blx	r6
			yCharPos++;
    15d0:	4a52      	ldr	r2, [pc, #328]	; (171c <groundState+0x2f4>)
    15d2:	8813      	ldrh	r3, [r2, #0]
    15d4:	3301      	adds	r3, #1
    15d6:	b29b      	uxth	r3, r3
    15d8:	8013      	strh	r3, [r2, #0]
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    15da:	8829      	ldrh	r1, [r5, #0]
    15dc:	004a      	lsls	r2, r1, #1
    15de:	1852      	adds	r2, r2, r1
    15e0:	00d2      	lsls	r2, r2, #3
    15e2:	18a4      	adds	r4, r4, r2
    15e4:	5ce0      	ldrb	r0, [r4, r3]
    15e6:	47b0      	blx	r6
			blinkCursor();
    15e8:	4b57      	ldr	r3, [pc, #348]	; (1748 <groundState+0x320>)
    15ea:	4798      	blx	r3
		if(lineFeed)
    15ec:	4b58      	ldr	r3, [pc, #352]	; (1750 <groundState+0x328>)
    15ee:	781b      	ldrb	r3, [r3, #0]
    15f0:	2b00      	cmp	r3, #0
    15f2:	d0a3      	beq.n	153c <groundState+0x114>
			if(yCharPos == 23)
    15f4:	4b49      	ldr	r3, [pc, #292]	; (171c <groundState+0x2f4>)
    15f6:	881a      	ldrh	r2, [r3, #0]
    15f8:	2a17      	cmp	r2, #23
    15fa:	d021      	beq.n	1640 <groundState+0x218>
				drawChar(consoleDisplay[xCharPos][yCharPos]);
    15fc:	4d48      	ldr	r5, [pc, #288]	; (1720 <groundState+0x2f8>)
    15fe:	4e46      	ldr	r6, [pc, #280]	; (1718 <groundState+0x2f0>)
    1600:	8831      	ldrh	r1, [r6, #0]
    1602:	004b      	lsls	r3, r1, #1
    1604:	185b      	adds	r3, r3, r1
    1606:	00db      	lsls	r3, r3, #3
    1608:	18eb      	adds	r3, r5, r3
    160a:	5c98      	ldrb	r0, [r3, r2]
    160c:	4c4d      	ldr	r4, [pc, #308]	; (1744 <groundState+0x31c>)
    160e:	47a0      	blx	r4
				xCharPos = 0;
    1610:	2300      	movs	r3, #0
    1612:	8033      	strh	r3, [r6, #0]
				drawChar(consoleDisplay[xCharPos][yCharPos]);
    1614:	4b41      	ldr	r3, [pc, #260]	; (171c <groundState+0x2f4>)
    1616:	881b      	ldrh	r3, [r3, #0]
    1618:	5ce8      	ldrb	r0, [r5, r3]
    161a:	47a0      	blx	r4
				blinkCursor();
    161c:	4b4a      	ldr	r3, [pc, #296]	; (1748 <groundState+0x320>)
    161e:	4798      	blx	r3
    1620:	e78c      	b.n	153c <groundState+0x114>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    1622:	4b3d      	ldr	r3, [pc, #244]	; (1718 <groundState+0x2f0>)
    1624:	881a      	ldrh	r2, [r3, #0]
    1626:	0053      	lsls	r3, r2, #1
    1628:	189b      	adds	r3, r3, r2
    162a:	00db      	lsls	r3, r3, #3
    162c:	4a3c      	ldr	r2, [pc, #240]	; (1720 <groundState+0x2f8>)
    162e:	18d3      	adds	r3, r2, r3
    1630:	7dd8      	ldrb	r0, [r3, #23]
    1632:	4b44      	ldr	r3, [pc, #272]	; (1744 <groundState+0x31c>)
    1634:	4798      	blx	r3
			newLine();
    1636:	4b47      	ldr	r3, [pc, #284]	; (1754 <groundState+0x32c>)
    1638:	4798      	blx	r3
			blinkCursor();
    163a:	4b43      	ldr	r3, [pc, #268]	; (1748 <groundState+0x320>)
    163c:	4798      	blx	r3
    163e:	e7d5      	b.n	15ec <groundState+0x1c4>
				drawChar(consoleDisplay[xCharPos][yCharPos]);
    1640:	4d35      	ldr	r5, [pc, #212]	; (1718 <groundState+0x2f0>)
    1642:	882a      	ldrh	r2, [r5, #0]
    1644:	0053      	lsls	r3, r2, #1
    1646:	189b      	adds	r3, r3, r2
    1648:	00db      	lsls	r3, r3, #3
    164a:	4a35      	ldr	r2, [pc, #212]	; (1720 <groundState+0x2f8>)
    164c:	18d3      	adds	r3, r2, r3
    164e:	7dd8      	ldrb	r0, [r3, #23]
    1650:	4c3c      	ldr	r4, [pc, #240]	; (1744 <groundState+0x31c>)
    1652:	47a0      	blx	r4
				xCharPos = 0;
    1654:	2300      	movs	r3, #0
    1656:	802b      	strh	r3, [r5, #0]
				drawChar(0x00);
    1658:	2000      	movs	r0, #0
    165a:	47a0      	blx	r4
				blinkCursor();
    165c:	4b3a      	ldr	r3, [pc, #232]	; (1748 <groundState+0x320>)
    165e:	4798      	blx	r3
    1660:	e76c      	b.n	153c <groundState+0x114>
		if(yCharPos == 23)
    1662:	4b2e      	ldr	r3, [pc, #184]	; (171c <groundState+0x2f4>)
    1664:	881a      	ldrh	r2, [r3, #0]
    1666:	2a17      	cmp	r2, #23
    1668:	d033      	beq.n	16d2 <groundState+0x2aa>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    166a:	4c2d      	ldr	r4, [pc, #180]	; (1720 <groundState+0x2f8>)
    166c:	4d2a      	ldr	r5, [pc, #168]	; (1718 <groundState+0x2f0>)
    166e:	8829      	ldrh	r1, [r5, #0]
    1670:	004b      	lsls	r3, r1, #1
    1672:	185b      	adds	r3, r3, r1
    1674:	00db      	lsls	r3, r3, #3
    1676:	18e3      	adds	r3, r4, r3
    1678:	5c98      	ldrb	r0, [r3, r2]
    167a:	4e32      	ldr	r6, [pc, #200]	; (1744 <groundState+0x31c>)
    167c:	47b0      	blx	r6
			yCharPos++;
    167e:	4a27      	ldr	r2, [pc, #156]	; (171c <groundState+0x2f4>)
    1680:	8813      	ldrh	r3, [r2, #0]
    1682:	3301      	adds	r3, #1
    1684:	b29b      	uxth	r3, r3
    1686:	8013      	strh	r3, [r2, #0]
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    1688:	8829      	ldrh	r1, [r5, #0]
    168a:	004a      	lsls	r2, r1, #1
    168c:	1852      	adds	r2, r2, r1
    168e:	00d2      	lsls	r2, r2, #3
    1690:	18a4      	adds	r4, r4, r2
    1692:	5ce0      	ldrb	r0, [r4, r3]
    1694:	47b0      	blx	r6
			blinkCursor();
    1696:	4b2c      	ldr	r3, [pc, #176]	; (1748 <groundState+0x320>)
    1698:	4798      	blx	r3
		if(lineFeed)
    169a:	4b2d      	ldr	r3, [pc, #180]	; (1750 <groundState+0x328>)
    169c:	781b      	ldrb	r3, [r3, #0]
    169e:	2b00      	cmp	r3, #0
    16a0:	d100      	bne.n	16a4 <groundState+0x27c>
    16a2:	e74b      	b.n	153c <groundState+0x114>
			if(yCharPos == 23)
    16a4:	4b1d      	ldr	r3, [pc, #116]	; (171c <groundState+0x2f4>)
    16a6:	881a      	ldrh	r2, [r3, #0]
    16a8:	2a17      	cmp	r2, #23
    16aa:	d021      	beq.n	16f0 <groundState+0x2c8>
				drawChar(consoleDisplay[xCharPos][yCharPos]);
    16ac:	4d1c      	ldr	r5, [pc, #112]	; (1720 <groundState+0x2f8>)
    16ae:	4e1a      	ldr	r6, [pc, #104]	; (1718 <groundState+0x2f0>)
    16b0:	8831      	ldrh	r1, [r6, #0]
    16b2:	004b      	lsls	r3, r1, #1
    16b4:	185b      	adds	r3, r3, r1
    16b6:	00db      	lsls	r3, r3, #3
    16b8:	18eb      	adds	r3, r5, r3
    16ba:	5c98      	ldrb	r0, [r3, r2]
    16bc:	4c21      	ldr	r4, [pc, #132]	; (1744 <groundState+0x31c>)
    16be:	47a0      	blx	r4
				xCharPos = 0;
    16c0:	2300      	movs	r3, #0
    16c2:	8033      	strh	r3, [r6, #0]
				drawChar(consoleDisplay[xCharPos][yCharPos]);
    16c4:	4b15      	ldr	r3, [pc, #84]	; (171c <groundState+0x2f4>)
    16c6:	881b      	ldrh	r3, [r3, #0]
    16c8:	5ce8      	ldrb	r0, [r5, r3]
    16ca:	47a0      	blx	r4
				blinkCursor();
    16cc:	4b1e      	ldr	r3, [pc, #120]	; (1748 <groundState+0x320>)
    16ce:	4798      	blx	r3
    16d0:	e734      	b.n	153c <groundState+0x114>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    16d2:	4b11      	ldr	r3, [pc, #68]	; (1718 <groundState+0x2f0>)
    16d4:	881a      	ldrh	r2, [r3, #0]
    16d6:	0053      	lsls	r3, r2, #1
    16d8:	189b      	adds	r3, r3, r2
    16da:	00db      	lsls	r3, r3, #3
    16dc:	4a10      	ldr	r2, [pc, #64]	; (1720 <groundState+0x2f8>)
    16de:	18d3      	adds	r3, r2, r3
    16e0:	7dd8      	ldrb	r0, [r3, #23]
    16e2:	4b18      	ldr	r3, [pc, #96]	; (1744 <groundState+0x31c>)
    16e4:	4798      	blx	r3
			newLine();
    16e6:	4b1b      	ldr	r3, [pc, #108]	; (1754 <groundState+0x32c>)
    16e8:	4798      	blx	r3
			blinkCursor();
    16ea:	4b17      	ldr	r3, [pc, #92]	; (1748 <groundState+0x320>)
    16ec:	4798      	blx	r3
    16ee:	e7d4      	b.n	169a <groundState+0x272>
				drawChar(consoleDisplay[xCharPos][yCharPos]);
    16f0:	4d09      	ldr	r5, [pc, #36]	; (1718 <groundState+0x2f0>)
    16f2:	882a      	ldrh	r2, [r5, #0]
    16f4:	0053      	lsls	r3, r2, #1
    16f6:	189b      	adds	r3, r3, r2
    16f8:	00db      	lsls	r3, r3, #3
    16fa:	4a09      	ldr	r2, [pc, #36]	; (1720 <groundState+0x2f8>)
    16fc:	18d3      	adds	r3, r2, r3
    16fe:	7dd8      	ldrb	r0, [r3, #23]
    1700:	4c10      	ldr	r4, [pc, #64]	; (1744 <groundState+0x31c>)
    1702:	47a0      	blx	r4
				xCharPos = 0;
    1704:	2300      	movs	r3, #0
    1706:	802b      	strh	r3, [r5, #0]
				drawChar(0x00);
    1708:	2000      	movs	r0, #0
    170a:	47a0      	blx	r4
				blinkCursor();
    170c:	4b0e      	ldr	r3, [pc, #56]	; (1748 <groundState+0x320>)
    170e:	4798      	blx	r3
    1710:	e714      	b.n	153c <groundState+0x114>
    1712:	46c0      	nop			; (mov r8, r8)
    1714:	000002b1 	.word	0x000002b1
    1718:	200002ec 	.word	0x200002ec
    171c:	200002ee 	.word	0x200002ee
    1720:	200003f4 	.word	0x200003f4
    1724:	2000038a 	.word	0x2000038a
    1728:	20000b74 	.word	0x20000b74
    172c:	20000388 	.word	0x20000388
    1730:	20000368 	.word	0x20000368
    1734:	2000036a 	.word	0x2000036a
    1738:	20000014 	.word	0x20000014
    173c:	2000022a 	.word	0x2000022a
    1740:	200012f4 	.word	0x200012f4
    1744:	00003665 	.word	0x00003665
    1748:	0000382d 	.word	0x0000382d
    174c:	00001401 	.word	0x00001401
    1750:	2000018c 	.word	0x2000018c
    1754:	00003a05 	.word	0x00003a05
		if(yCharPos == 23)
    1758:	4b52      	ldr	r3, [pc, #328]	; (18a4 <groundState+0x47c>)
    175a:	881a      	ldrh	r2, [r3, #0]
    175c:	2a17      	cmp	r2, #23
    175e:	d033      	beq.n	17c8 <groundState+0x3a0>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    1760:	4c51      	ldr	r4, [pc, #324]	; (18a8 <groundState+0x480>)
    1762:	4d52      	ldr	r5, [pc, #328]	; (18ac <groundState+0x484>)
    1764:	8829      	ldrh	r1, [r5, #0]
    1766:	004b      	lsls	r3, r1, #1
    1768:	185b      	adds	r3, r3, r1
    176a:	00db      	lsls	r3, r3, #3
    176c:	18e3      	adds	r3, r4, r3
    176e:	5c98      	ldrb	r0, [r3, r2]
    1770:	4e4f      	ldr	r6, [pc, #316]	; (18b0 <groundState+0x488>)
    1772:	47b0      	blx	r6
			yCharPos++;
    1774:	4a4b      	ldr	r2, [pc, #300]	; (18a4 <groundState+0x47c>)
    1776:	8813      	ldrh	r3, [r2, #0]
    1778:	3301      	adds	r3, #1
    177a:	b29b      	uxth	r3, r3
    177c:	8013      	strh	r3, [r2, #0]
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    177e:	8829      	ldrh	r1, [r5, #0]
    1780:	004a      	lsls	r2, r1, #1
    1782:	1852      	adds	r2, r2, r1
    1784:	00d2      	lsls	r2, r2, #3
    1786:	18a4      	adds	r4, r4, r2
    1788:	5ce0      	ldrb	r0, [r4, r3]
    178a:	47b0      	blx	r6
			blinkCursor();
    178c:	4b49      	ldr	r3, [pc, #292]	; (18b4 <groundState+0x48c>)
    178e:	4798      	blx	r3
		if(lineFeed)
    1790:	4b49      	ldr	r3, [pc, #292]	; (18b8 <groundState+0x490>)
    1792:	781b      	ldrb	r3, [r3, #0]
    1794:	2b00      	cmp	r3, #0
    1796:	d100      	bne.n	179a <groundState+0x372>
    1798:	e6d0      	b.n	153c <groundState+0x114>
			if(yCharPos == 23)
    179a:	4b42      	ldr	r3, [pc, #264]	; (18a4 <groundState+0x47c>)
    179c:	881a      	ldrh	r2, [r3, #0]
    179e:	2a17      	cmp	r2, #23
    17a0:	d021      	beq.n	17e6 <groundState+0x3be>
				drawChar(consoleDisplay[xCharPos][yCharPos]);
    17a2:	4d41      	ldr	r5, [pc, #260]	; (18a8 <groundState+0x480>)
    17a4:	4e41      	ldr	r6, [pc, #260]	; (18ac <groundState+0x484>)
    17a6:	8831      	ldrh	r1, [r6, #0]
    17a8:	004b      	lsls	r3, r1, #1
    17aa:	185b      	adds	r3, r3, r1
    17ac:	00db      	lsls	r3, r3, #3
    17ae:	18eb      	adds	r3, r5, r3
    17b0:	5c98      	ldrb	r0, [r3, r2]
    17b2:	4c3f      	ldr	r4, [pc, #252]	; (18b0 <groundState+0x488>)
    17b4:	47a0      	blx	r4
				xCharPos = 0;
    17b6:	2300      	movs	r3, #0
    17b8:	8033      	strh	r3, [r6, #0]
				drawChar(consoleDisplay[xCharPos][yCharPos]);
    17ba:	4b3a      	ldr	r3, [pc, #232]	; (18a4 <groundState+0x47c>)
    17bc:	881b      	ldrh	r3, [r3, #0]
    17be:	5ce8      	ldrb	r0, [r5, r3]
    17c0:	47a0      	blx	r4
				blinkCursor();
    17c2:	4b3c      	ldr	r3, [pc, #240]	; (18b4 <groundState+0x48c>)
    17c4:	4798      	blx	r3
    17c6:	e6b9      	b.n	153c <groundState+0x114>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    17c8:	4b38      	ldr	r3, [pc, #224]	; (18ac <groundState+0x484>)
    17ca:	881a      	ldrh	r2, [r3, #0]
    17cc:	0053      	lsls	r3, r2, #1
    17ce:	189b      	adds	r3, r3, r2
    17d0:	00db      	lsls	r3, r3, #3
    17d2:	4a35      	ldr	r2, [pc, #212]	; (18a8 <groundState+0x480>)
    17d4:	18d3      	adds	r3, r2, r3
    17d6:	7dd8      	ldrb	r0, [r3, #23]
    17d8:	4b35      	ldr	r3, [pc, #212]	; (18b0 <groundState+0x488>)
    17da:	4798      	blx	r3
			newLine();
    17dc:	4b37      	ldr	r3, [pc, #220]	; (18bc <groundState+0x494>)
    17de:	4798      	blx	r3
			blinkCursor();
    17e0:	4b34      	ldr	r3, [pc, #208]	; (18b4 <groundState+0x48c>)
    17e2:	4798      	blx	r3
    17e4:	e7d4      	b.n	1790 <groundState+0x368>
				drawChar(consoleDisplay[xCharPos][yCharPos]);
    17e6:	4d31      	ldr	r5, [pc, #196]	; (18ac <groundState+0x484>)
    17e8:	882a      	ldrh	r2, [r5, #0]
    17ea:	0053      	lsls	r3, r2, #1
    17ec:	189b      	adds	r3, r3, r2
    17ee:	00db      	lsls	r3, r3, #3
    17f0:	4a2d      	ldr	r2, [pc, #180]	; (18a8 <groundState+0x480>)
    17f2:	18d3      	adds	r3, r2, r3
    17f4:	7dd8      	ldrb	r0, [r3, #23]
    17f6:	4c2e      	ldr	r4, [pc, #184]	; (18b0 <groundState+0x488>)
    17f8:	47a0      	blx	r4
				xCharPos = 0;
    17fa:	2300      	movs	r3, #0
    17fc:	802b      	strh	r3, [r5, #0]
				drawChar(0x00);
    17fe:	2000      	movs	r0, #0
    1800:	47a0      	blx	r4
				blinkCursor();
    1802:	4b2c      	ldr	r3, [pc, #176]	; (18b4 <groundState+0x48c>)
    1804:	4798      	blx	r3
    1806:	e699      	b.n	153c <groundState+0x114>
		if(yCharPos == 23)
    1808:	4b26      	ldr	r3, [pc, #152]	; (18a4 <groundState+0x47c>)
    180a:	881a      	ldrh	r2, [r3, #0]
    180c:	2a17      	cmp	r2, #23
    180e:	d012      	beq.n	1836 <groundState+0x40e>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    1810:	4d25      	ldr	r5, [pc, #148]	; (18a8 <groundState+0x480>)
    1812:	4e26      	ldr	r6, [pc, #152]	; (18ac <groundState+0x484>)
    1814:	8831      	ldrh	r1, [r6, #0]
    1816:	004b      	lsls	r3, r1, #1
    1818:	185b      	adds	r3, r3, r1
    181a:	00db      	lsls	r3, r3, #3
    181c:	18eb      	adds	r3, r5, r3
    181e:	5c98      	ldrb	r0, [r3, r2]
    1820:	4c23      	ldr	r4, [pc, #140]	; (18b0 <groundState+0x488>)
    1822:	47a0      	blx	r4
			xCharPos = 0;
    1824:	2300      	movs	r3, #0
    1826:	8033      	strh	r3, [r6, #0]
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    1828:	4b1e      	ldr	r3, [pc, #120]	; (18a4 <groundState+0x47c>)
    182a:	881b      	ldrh	r3, [r3, #0]
    182c:	5ce8      	ldrb	r0, [r5, r3]
    182e:	47a0      	blx	r4
			blinkCursor();
    1830:	4b20      	ldr	r3, [pc, #128]	; (18b4 <groundState+0x48c>)
    1832:	4798      	blx	r3
    1834:	e682      	b.n	153c <groundState+0x114>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    1836:	4c1d      	ldr	r4, [pc, #116]	; (18ac <groundState+0x484>)
    1838:	8822      	ldrh	r2, [r4, #0]
    183a:	0053      	lsls	r3, r2, #1
    183c:	189b      	adds	r3, r3, r2
    183e:	00db      	lsls	r3, r3, #3
    1840:	4a19      	ldr	r2, [pc, #100]	; (18a8 <groundState+0x480>)
    1842:	18d3      	adds	r3, r2, r3
    1844:	7dd8      	ldrb	r0, [r3, #23]
    1846:	4b1a      	ldr	r3, [pc, #104]	; (18b0 <groundState+0x488>)
    1848:	4798      	blx	r3
			xCharPos = 0;
    184a:	2300      	movs	r3, #0
    184c:	8023      	strh	r3, [r4, #0]
			blinkCursor();
    184e:	4b19      	ldr	r3, [pc, #100]	; (18b4 <groundState+0x48c>)
    1850:	4798      	blx	r3
    1852:	e673      	b.n	153c <groundState+0x114>
		currentState = stateESC;
    1854:	2201      	movs	r2, #1
    1856:	4b1a      	ldr	r3, [pc, #104]	; (18c0 <groundState+0x498>)
    1858:	701a      	strb	r2, [r3, #0]
    185a:	e66f      	b.n	153c <groundState+0x114>
			ClearBit(consoleSGR[xCharPos][yCharPos],7);
    185c:	2018      	movs	r0, #24
    185e:	4350      	muls	r0, r2
    1860:	4918      	ldr	r1, [pc, #96]	; (18c4 <groundState+0x49c>)
    1862:	1809      	adds	r1, r1, r0
    1864:	5cc8      	ldrb	r0, [r1, r3]
    1866:	257f      	movs	r5, #127	; 0x7f
    1868:	4028      	ands	r0, r5
    186a:	54c8      	strb	r0, [r1, r3]
    186c:	e619      	b.n	14a2 <groundState+0x7a>
			ClearBit(consoleSGR[xCharPos][yCharPos],1);
    186e:	2018      	movs	r0, #24
    1870:	4350      	muls	r0, r2
    1872:	4914      	ldr	r1, [pc, #80]	; (18c4 <groundState+0x49c>)
    1874:	1809      	adds	r1, r1, r0
    1876:	5cc8      	ldrb	r0, [r1, r3]
    1878:	2502      	movs	r5, #2
    187a:	43a8      	bics	r0, r5
    187c:	54c8      	strb	r0, [r1, r3]
    187e:	e61d      	b.n	14bc <groundState+0x94>
			ClearBit(consoleSGR[xCharPos][yCharPos],4);
    1880:	2018      	movs	r0, #24
    1882:	4350      	muls	r0, r2
    1884:	490f      	ldr	r1, [pc, #60]	; (18c4 <groundState+0x49c>)
    1886:	1809      	adds	r1, r1, r0
    1888:	5cc8      	ldrb	r0, [r1, r3]
    188a:	2510      	movs	r5, #16
    188c:	43a8      	bics	r0, r5
    188e:	54c8      	strb	r0, [r1, r3]
    1890:	e621      	b.n	14d6 <groundState+0xae>
			ClearBit(consoleSGR[xCharPos][yCharPos],5);
    1892:	2018      	movs	r0, #24
    1894:	4350      	muls	r0, r2
    1896:	490b      	ldr	r1, [pc, #44]	; (18c4 <groundState+0x49c>)
    1898:	1809      	adds	r1, r1, r0
    189a:	5cc8      	ldrb	r0, [r1, r3]
    189c:	2520      	movs	r5, #32
    189e:	43a8      	bics	r0, r5
    18a0:	54c8      	strb	r0, [r1, r3]
    18a2:	e625      	b.n	14f0 <groundState+0xc8>
    18a4:	200002ee 	.word	0x200002ee
    18a8:	200003f4 	.word	0x200003f4
    18ac:	200002ec 	.word	0x200002ec
    18b0:	00003665 	.word	0x00003665
    18b4:	0000382d 	.word	0x0000382d
    18b8:	2000018c 	.word	0x2000018c
    18bc:	00003a05 	.word	0x00003a05
    18c0:	200002f1 	.word	0x200002f1
    18c4:	20000b74 	.word	0x20000b74

000018c8 <parseChar>:
{
    18c8:	b510      	push	{r4, lr}
	parserState state = currentState;
    18ca:	4b0e      	ldr	r3, [pc, #56]	; (1904 <parseChar+0x3c>)
	switch(state)
    18cc:	781a      	ldrb	r2, [r3, #0]
    18ce:	2a05      	cmp	r2, #5
    18d0:	d805      	bhi.n	18de <parseChar+0x16>
    18d2:	0093      	lsls	r3, r2, #2
    18d4:	4a0c      	ldr	r2, [pc, #48]	; (1908 <parseChar+0x40>)
    18d6:	58d3      	ldr	r3, [r2, r3]
    18d8:	469f      	mov	pc, r3
			groundState(character);
    18da:	4b0c      	ldr	r3, [pc, #48]	; (190c <parseChar+0x44>)
    18dc:	4798      	blx	r3
}
    18de:	bd10      	pop	{r4, pc}
			escState(character);
    18e0:	4b0b      	ldr	r3, [pc, #44]	; (1910 <parseChar+0x48>)
    18e2:	4798      	blx	r3
			break;
    18e4:	e7fb      	b.n	18de <parseChar+0x16>
	stateEnterBuffer = 0x00;
    18e6:	2300      	movs	r3, #0
    18e8:	4a0a      	ldr	r2, [pc, #40]	; (1914 <parseChar+0x4c>)
    18ea:	7013      	strb	r3, [r2, #0]
	currentState = stateGround;
    18ec:	4a05      	ldr	r2, [pc, #20]	; (1904 <parseChar+0x3c>)
    18ee:	7013      	strb	r3, [r2, #0]
    18f0:	e7f5      	b.n	18de <parseChar+0x16>
			CSIentryState(character);
    18f2:	4b09      	ldr	r3, [pc, #36]	; (1918 <parseChar+0x50>)
    18f4:	4798      	blx	r3
			break;
    18f6:	e7f2      	b.n	18de <parseChar+0x16>
			CSIparamState(character);
    18f8:	4b08      	ldr	r3, [pc, #32]	; (191c <parseChar+0x54>)
    18fa:	4798      	blx	r3
			break;
    18fc:	e7ef      	b.n	18de <parseChar+0x16>
			CSIignoreState(character);
    18fe:	4b08      	ldr	r3, [pc, #32]	; (1920 <parseChar+0x58>)
    1900:	4798      	blx	r3
}
    1902:	e7ec      	b.n	18de <parseChar+0x16>
    1904:	200002f1 	.word	0x200002f1
    1908:	00006150 	.word	0x00006150
    190c:	00001429 	.word	0x00001429
    1910:	00000575 	.word	0x00000575
    1914:	20000376 	.word	0x20000376
    1918:	0000119d 	.word	0x0000119d
    191c:	0000113d 	.word	0x0000113d
    1920:	0000034d 	.word	0x0000034d

00001924 <drawKare>:
//	graphic in the entire project. Please note this is the most
//	space efficient way to do this; a 40x31 bitmap is 930 bytes,
//	whereas	this is (104*2)+28+20, or 256 bytes.
/*********************************************************************/
void drawKare(int emotion)
{
    1924:	b5f0      	push	{r4, r5, r6, r7, lr}
    1926:	b0c1      	sub	sp, #260	; 0x104
    1928:	0007      	movs	r7, r0
	uint16_t body[104] = {10,10,20,20,20,0,380,10,380,10,390,20,0,
    192a:	22d0      	movs	r2, #208	; 0xd0
    192c:	492d      	ldr	r1, [pc, #180]	; (19e4 <drawKare+0xc0>)
    192e:	a80c      	add	r0, sp, #48	; 0x30
    1930:	4b2d      	ldr	r3, [pc, #180]	; (19e8 <drawKare+0xc4>)
    1932:	4798      	blx	r3
		80,190,280,200,280,40,290,190,0,70,50,80,0,90,50,100,0,110,
		50,120,0,130,50,140,0,150,50,160,0,170,50,180,0,190,50,200,
		300,200,370,210,30,220,370,230,30,240,370,250,30,260,370,
		270,90,280,300,290};
	
	uint8_t happyTerm[28] = {180,80,190,130,170,130,190,140,140,
    1934:	a805      	add	r0, sp, #20
    1936:	4b2d      	ldr	r3, [pc, #180]	; (19ec <drawKare+0xc8>)
    1938:	001a      	movs	r2, r3
    193a:	3250      	adds	r2, #80	; 0x50
    193c:	0001      	movs	r1, r0
    193e:	ca31      	ldmia	r2!, {r0, r4, r5}
    1940:	c131      	stmia	r1!, {r0, r4, r5}
    1942:	ca31      	ldmia	r2!, {r0, r4, r5}
    1944:	c131      	stmia	r1!, {r0, r4, r5}
    1946:	6812      	ldr	r2, [r2, #0]
    1948:	600a      	str	r2, [r1, #0]
		60,150,100,210,60,220,100,130,150,140,160,140,160,220,170,
	220,150,230,160};
	
	uint8_t rPiBeret[20] = {120,60,240,80,110,70,120,90,150,
    194a:	336c      	adds	r3, #108	; 0x6c
    194c:	466a      	mov	r2, sp
    194e:	cb13      	ldmia	r3!, {r0, r1, r4}
    1950:	c213      	stmia	r2!, {r0, r1, r4}
    1952:	cb03      	ldmia	r3!, {r0, r1}
    1954:	c203      	stmia	r2!, {r0, r1}
    1956:	ac0c      	add	r4, sp, #48	; 0x30
    1958:	ae40      	add	r6, sp, #256	; 0x100

	
	
	for(int i = 0; i < 104; i = i+4)
	{
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
    195a:	4d25      	ldr	r5, [pc, #148]	; (19f0 <drawKare+0xcc>)
		((body[i+1]/iSv)+(offsetGraphicY)),
		((body[i+2]/iSv)+(offsetGraphicX)),
		((body[i+3]/iSv)+(offsetGraphicY)));
    195c:	88e3      	ldrh	r3, [r4, #6]
    195e:	105b      	asrs	r3, r3, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
    1960:	3396      	adds	r3, #150	; 0x96
		((body[i+2]/iSv)+(offsetGraphicX)),
    1962:	88a2      	ldrh	r2, [r4, #4]
    1964:	1052      	asrs	r2, r2, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
    1966:	322d      	adds	r2, #45	; 0x2d
    1968:	32ff      	adds	r2, #255	; 0xff
		((body[i+1]/iSv)+(offsetGraphicY)),
    196a:	8861      	ldrh	r1, [r4, #2]
    196c:	1049      	asrs	r1, r1, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
    196e:	3196      	adds	r1, #150	; 0x96
    1970:	8820      	ldrh	r0, [r4, #0]
    1972:	1040      	asrs	r0, r0, #1
    1974:	302d      	adds	r0, #45	; 0x2d
    1976:	30ff      	adds	r0, #255	; 0xff
    1978:	47a8      	blx	r5
    197a:	3408      	adds	r4, #8
	for(int i = 0; i < 104; i = i+4)
    197c:	42b4      	cmp	r4, r6
    197e:	d1ed      	bne.n	195c <drawKare+0x38>
	}
	switch(emotion)
    1980:	2f00      	cmp	r7, #0
    1982:	d003      	beq.n	198c <drawKare+0x68>
    1984:	2f01      	cmp	r7, #1
    1986:	d017      	beq.n	19b8 <drawKare+0x94>
		break;
		case 2:
		//make a sad terminal thing go here
		break;
	}
}
    1988:	b041      	add	sp, #260	; 0x104
    198a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    198c:	ac05      	add	r4, sp, #20
    198e:	ae0c      	add	r6, sp, #48	; 0x30
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
    1990:	4d17      	ldr	r5, [pc, #92]	; (19f0 <drawKare+0xcc>)
			((happyTerm[i+3]/iSv)+(offsetGraphicY)));
    1992:	78e3      	ldrb	r3, [r4, #3]
    1994:	105b      	asrs	r3, r3, #1
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
    1996:	3396      	adds	r3, #150	; 0x96
			((happyTerm[i+2]/iSv)+(offsetGraphicX)),
    1998:	78a2      	ldrb	r2, [r4, #2]
    199a:	1052      	asrs	r2, r2, #1
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
    199c:	322d      	adds	r2, #45	; 0x2d
    199e:	32ff      	adds	r2, #255	; 0xff
			((happyTerm[i+1]/iSv)+(offsetGraphicY)),
    19a0:	7861      	ldrb	r1, [r4, #1]
    19a2:	1049      	asrs	r1, r1, #1
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
    19a4:	3196      	adds	r1, #150	; 0x96
    19a6:	7820      	ldrb	r0, [r4, #0]
    19a8:	1040      	asrs	r0, r0, #1
    19aa:	302d      	adds	r0, #45	; 0x2d
    19ac:	30ff      	adds	r0, #255	; 0xff
    19ae:	47a8      	blx	r5
    19b0:	3404      	adds	r4, #4
		for(int i = 0; i < 28; i = i+4)
    19b2:	42a6      	cmp	r6, r4
    19b4:	d1ed      	bne.n	1992 <drawKare+0x6e>
    19b6:	e7e7      	b.n	1988 <drawKare+0x64>
    19b8:	466c      	mov	r4, sp
    19ba:	ae05      	add	r6, sp, #20
			fillRect((
    19bc:	4d0c      	ldr	r5, [pc, #48]	; (19f0 <drawKare+0xcc>)
			((rPiBeret[i+3]/iSv)+(offsetGraphicY)));
    19be:	78e3      	ldrb	r3, [r4, #3]
    19c0:	105b      	asrs	r3, r3, #1
			fillRect((
    19c2:	3396      	adds	r3, #150	; 0x96
			((rPiBeret[i+2]/iSv)+(offsetGraphicX)),
    19c4:	78a2      	ldrb	r2, [r4, #2]
    19c6:	1052      	asrs	r2, r2, #1
			fillRect((
    19c8:	322d      	adds	r2, #45	; 0x2d
    19ca:	32ff      	adds	r2, #255	; 0xff
			((rPiBeret[i+1]/iSv)+(offsetGraphicY)),
    19cc:	7861      	ldrb	r1, [r4, #1]
    19ce:	1049      	asrs	r1, r1, #1
			fillRect((
    19d0:	3196      	adds	r1, #150	; 0x96
			(rPiBeret[i]/iSv)+(offsetGraphicX)),
    19d2:	7820      	ldrb	r0, [r4, #0]
    19d4:	1040      	asrs	r0, r0, #1
			fillRect((
    19d6:	302d      	adds	r0, #45	; 0x2d
    19d8:	30ff      	adds	r0, #255	; 0xff
    19da:	47a8      	blx	r5
    19dc:	3404      	adds	r4, #4
		for(int i = 0; i < 20; i = i+4)
    19de:	42b4      	cmp	r4, r6
    19e0:	d1ed      	bne.n	19be <drawKare+0x9a>
    19e2:	e7d1      	b.n	1988 <drawKare+0x64>
    19e4:	000064e4 	.word	0x000064e4
    19e8:	00004e91 	.word	0x00004e91
    19ec:	00006564 	.word	0x00006564
    19f0:	000042ad 	.word	0x000042ad

000019f4 <splashScreen>:

void splashScreen(void)
{
    19f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    19f6:	46ce      	mov	lr, r9
    19f8:	4647      	mov	r7, r8
    19fa:	b580      	push	{r7, lr}
	static const char *splashText[32];
	splashText[0]  = "Trans rights are human rights";//
    19fc:	4c57      	ldr	r4, [pc, #348]	; (1b5c <splashScreen+0x168>)
    19fe:	4b58      	ldr	r3, [pc, #352]	; (1b60 <splashScreen+0x16c>)
    1a00:	6023      	str	r3, [r4, #0]
	splashText[1]  = "13^5 + 16^5 = 17^5";//
    1a02:	4b58      	ldr	r3, [pc, #352]	; (1b64 <splashScreen+0x170>)
    1a04:	6063      	str	r3, [r4, #4]
	splashText[2]  = "Reticulating Splines";//
    1a06:	4b58      	ldr	r3, [pc, #352]	; (1b68 <splashScreen+0x174>)
    1a08:	60a3      	str	r3, [r4, #8]
	splashText[3]  = "violence.works";//
    1a0a:	4b58      	ldr	r3, [pc, #352]	; (1b6c <splashScreen+0x178>)
    1a0c:	60e3      	str	r3, [r4, #12]
	splashText[4]  = "Si + PB";//
    1a0e:	4b58      	ldr	r3, [pc, #352]	; (1b70 <splashScreen+0x17c>)
    1a10:	6123      	str	r3, [r4, #16]
	splashText[5]  = "Kill Billionaires (and Trillionaire)";//
    1a12:	4b58      	ldr	r3, [pc, #352]	; (1b74 <splashScreen+0x180>)
    1a14:	6163      	str	r3, [r4, #20]
	splashText[6]  = "Interest in technology is not a personality";//
    1a16:	4b58      	ldr	r3, [pc, #352]	; (1b78 <splashScreen+0x184>)
    1a18:	61a3      	str	r3, [r4, #24]
	splashText[7]  = "10 PRINT CHR$(205.5+RND(1)); : GOTO 10";//
    1a1a:	4b58      	ldr	r3, [pc, #352]	; (1b7c <splashScreen+0x188>)
    1a1c:	61e3      	str	r3, [r4, #28]
	splashText[8]  = "No gods. No masters. No external libraries.";//
    1a1e:	4b58      	ldr	r3, [pc, #352]	; (1b80 <splashScreen+0x18c>)
    1a20:	6223      	str	r3, [r4, #32]
	splashText[9]  = "Kill Nazis";//
    1a22:	4b58      	ldr	r3, [pc, #352]	; (1b84 <splashScreen+0x190>)
    1a24:	6263      	str	r3, [r4, #36]	; 0x24
	splashText[10] = "Tiananmen Square 1989";//
    1a26:	4b58      	ldr	r3, [pc, #352]	; (1b88 <splashScreen+0x194>)
    1a28:	62a3      	str	r3, [r4, #40]	; 0x28
	splashText[11] = "America was founded on slavery";
    1a2a:	4b58      	ldr	r3, [pc, #352]	; (1b8c <splashScreen+0x198>)
    1a2c:	62e3      	str	r3, [r4, #44]	; 0x2c
	splashText[12] = "There is only capital and labor";//
    1a2e:	4b58      	ldr	r3, [pc, #352]	; (1b90 <splashScreen+0x19c>)
    1a30:	6323      	str	r3, [r4, #48]	; 0x30
	splashText[13] = "Encourage SYMMETRIC class warfare";//
    1a32:	4b58      	ldr	r3, [pc, #352]	; (1b94 <splashScreen+0x1a0>)
    1a34:	6363      	str	r3, [r4, #52]	; 0x34
	splashText[14] = "Vogon Poetry";//
    1a36:	4b58      	ldr	r3, [pc, #352]	; (1b98 <splashScreen+0x1a4>)
    1a38:	63a3      	str	r3, [r4, #56]	; 0x38
	splashText[15] = "A Nice TTY";//
    1a3a:	4b58      	ldr	r3, [pc, #352]	; (1b9c <splashScreen+0x1a8>)
    1a3c:	63e3      	str	r3, [r4, #60]	; 0x3c
	splashText[16] = "Unix epoch minus 0xFF days";//
    1a3e:	4b58      	ldr	r3, [pc, #352]	; (1ba0 <splashScreen+0x1ac>)
    1a40:	6423      	str	r3, [r4, #64]	; 0x40
	splashText[17] = "i  = 0x5f3759df - ( i >> 1 );";//
    1a42:	4b58      	ldr	r3, [pc, #352]	; (1ba4 <splashScreen+0x1b0>)
    1a44:	6463      	str	r3, [r4, #68]	; 0x44
	splashText[18] = "Speak truth to power; I'm sure they'll listen this time.";//
    1a46:	4b58      	ldr	r3, [pc, #352]	; (1ba8 <splashScreen+0x1b4>)
    1a48:	64a3      	str	r3, [r4, #72]	; 0x48
	splashText[19] = "Defcon's canceled (2020)";//
    1a4a:	4b58      	ldr	r3, [pc, #352]	; (1bac <splashScreen+0x1b8>)
    1a4c:	64e3      	str	r3, [r4, #76]	; 0x4c
	splashText[20] = "Ratsnest: Nothing To Do!";//
    1a4e:	4b58      	ldr	r3, [pc, #352]	; (1bb0 <splashScreen+0x1bc>)
    1a50:	6523      	str	r3, [r4, #80]	; 0x50
	splashText[21] = "It has 69 keys.";//
    1a52:	4b58      	ldr	r3, [pc, #352]	; (1bb4 <splashScreen+0x1c0>)
    1a54:	6563      	str	r3, [r4, #84]	; 0x54
	splashText[22] = "Because VT-420 was already taken";//
    1a56:	4b58      	ldr	r3, [pc, #352]	; (1bb8 <splashScreen+0x1c4>)
    1a58:	65a3      	str	r3, [r4, #88]	; 0x58
	splashText[23] = "Compression algorithm based on BBP (1997)";//
    1a5a:	4b58      	ldr	r3, [pc, #352]	; (1bbc <splashScreen+0x1c8>)
    1a5c:	65e3      	str	r3, [r4, #92]	; 0x5c
	splashText[24] = "Teach health insurance providers to code.";
    1a5e:	4b58      	ldr	r3, [pc, #352]	; (1bc0 <splashScreen+0x1cc>)
    1a60:	6623      	str	r3, [r4, #96]	; 0x60
	splashText[25] = "Grand Central Hack The Planet";//
    1a62:	4b58      	ldr	r3, [pc, #352]	; (1bc4 <splashScreen+0x1d0>)
    1a64:	6663      	str	r3, [r4, #100]	; 0x64
	splashText[26] = "WiFi is not wireless Ethernet!";//
    1a66:	4b58      	ldr	r3, [pc, #352]	; (1bc8 <splashScreen+0x1d4>)
    1a68:	66a3      	str	r3, [r4, #104]	; 0x68
	splashText[27] = "Dummy thicc client";//
    1a6a:	4b58      	ldr	r3, [pc, #352]	; (1bcc <splashScreen+0x1d8>)
    1a6c:	66e3      	str	r3, [r4, #108]	; 0x6c
	splashText[28] = "A Nice TTY. An OK Computer.";//
    1a6e:	4b58      	ldr	r3, [pc, #352]	; (1bd0 <splashScreen+0x1dc>)
    1a70:	6723      	str	r3, [r4, #112]	; 0x70
	splashText[29] = "USTeledildonics";//
    1a72:	4b58      	ldr	r3, [pc, #352]	; (1bd4 <splashScreen+0x1e0>)
    1a74:	6763      	str	r3, [r4, #116]	; 0x74
	splashText[30] = "Solidarity is not a new framework";//
    1a76:	4b58      	ldr	r3, [pc, #352]	; (1bd8 <splashScreen+0x1e4>)
    1a78:	67a3      	str	r3, [r4, #120]	; 0x78
	splashText[31] = "Breadboarding Is Not A Crime";//
    1a7a:	4b58      	ldr	r3, [pc, #352]	; (1bdc <splashScreen+0x1e8>)
    1a7c:	67e3      	str	r3, [r4, #124]	; 0x7c
	splashText[32] = "Off by one errors are common";
    1a7e:	4a58      	ldr	r2, [pc, #352]	; (1be0 <splashScreen+0x1ec>)
    1a80:	2380      	movs	r3, #128	; 0x80
    1a82:	50e2      	str	r2, [r4, r3]
	
	const char *textPhrase = splashText[(((rand())%32))];
    1a84:	4b57      	ldr	r3, [pc, #348]	; (1be4 <splashScreen+0x1f0>)
    1a86:	4798      	blx	r3
    1a88:	17c2      	asrs	r2, r0, #31
    1a8a:	0ed2      	lsrs	r2, r2, #27
    1a8c:	1880      	adds	r0, r0, r2
    1a8e:	231f      	movs	r3, #31
    1a90:	4003      	ands	r3, r0
    1a92:	1a9b      	subs	r3, r3, r2
    1a94:	009b      	lsls	r3, r3, #2
    1a96:	591c      	ldr	r4, [r3, r4]
	
	clearScreen();
    1a98:	4b53      	ldr	r3, [pc, #332]	; (1be8 <splashScreen+0x1f4>)
    1a9a:	4798      	blx	r3
	setColorRGB(255,255,255);
    1a9c:	22ff      	movs	r2, #255	; 0xff
    1a9e:	21ff      	movs	r1, #255	; 0xff
    1aa0:	20ff      	movs	r0, #255	; 0xff
    1aa2:	4b52      	ldr	r3, [pc, #328]	; (1bec <splashScreen+0x1f8>)
    1aa4:	4798      	blx	r3
	
	REG_PORT_DIRTGL1 = PORT_PB31;
    1aa6:	2280      	movs	r2, #128	; 0x80
    1aa8:	0612      	lsls	r2, r2, #24
    1aaa:	4b51      	ldr	r3, [pc, #324]	; (1bf0 <splashScreen+0x1fc>)
    1aac:	601a      	str	r2, [r3, #0]
	PORT->Group[1].PINCFG[31].bit.PULLEN = 1;
    1aae:	4b51      	ldr	r3, [pc, #324]	; (1bf4 <splashScreen+0x200>)
    1ab0:	22df      	movs	r2, #223	; 0xdf
    1ab2:	5c99      	ldrb	r1, [r3, r2]
    1ab4:	2004      	movs	r0, #4
    1ab6:	4301      	orrs	r1, r0
    1ab8:	5499      	strb	r1, [r3, r2]
	PORT->Group[1].PINCFG[31].bit.INEN = 1;
    1aba:	5c99      	ldrb	r1, [r3, r2]
    1abc:	2002      	movs	r0, #2
    1abe:	4301      	orrs	r1, r0
    1ac0:	5499      	strb	r1, [r3, r2]
	if((PORT->Group[1].IN.reg & PORT_PB31) != 0)
    1ac2:	3a3f      	subs	r2, #63	; 0x3f
    1ac4:	589b      	ldr	r3, [r3, r2]
    1ac6:	2b00      	cmp	r3, #0
    1ac8:	db08      	blt.n	1adc <splashScreen+0xe8>
		//This is the 'pi' graphic; put some codes
		//here to handle setting up the uarts.
		drawKare(1);
	}
	else
	drawKare(0); //The normal graphic
    1aca:	2000      	movs	r0, #0
    1acc:	4b4a      	ldr	r3, [pc, #296]	; (1bf8 <splashScreen+0x204>)
    1ace:	4798      	blx	r3
    1ad0:	4b4a      	ldr	r3, [pc, #296]	; (1bfc <splashScreen+0x208>)
    1ad2:	22f0      	movs	r2, #240	; 0xf0
    1ad4:	0152      	lsls	r2, r2, #5
    1ad6:	1898      	adds	r0, r3, r2
	
	for(int i = 0 ; i < 80 ; i++)
	{
		for(int j = 0 ; j < 24 ; j++)
		{
			consoleColors[i][j] = 0xFFFF0000;
    1ad8:	4949      	ldr	r1, [pc, #292]	; (1c00 <splashScreen+0x20c>)
    1ada:	e006      	b.n	1aea <splashScreen+0xf6>
		drawKare(1);
    1adc:	2001      	movs	r0, #1
    1ade:	4b46      	ldr	r3, [pc, #280]	; (1bf8 <splashScreen+0x204>)
    1ae0:	4798      	blx	r3
    1ae2:	e7f5      	b.n	1ad0 <splashScreen+0xdc>
    1ae4:	0013      	movs	r3, r2
	for(int i = 0 ; i < 80 ; i++)
    1ae6:	4290      	cmp	r0, r2
    1ae8:	d005      	beq.n	1af6 <splashScreen+0x102>
    1aea:	001a      	movs	r2, r3
    1aec:	3260      	adds	r2, #96	; 0x60
			consoleColors[i][j] = 0xFFFF0000;
    1aee:	c302      	stmia	r3!, {r1}
		for(int j = 0 ; j < 24 ; j++)
    1af0:	4293      	cmp	r3, r2
    1af2:	d1fc      	bne.n	1aee <splashScreen+0xfa>
    1af4:	e7f6      	b.n	1ae4 <splashScreen+0xf0>
	}
	
	//setColorHex(defaultForegroundColor);
	//setBackColorHex(defaultBackgroundColor);
	
	xCharPos = 40 - (strlen(textPhrase)/2);
    1af6:	0020      	movs	r0, r4
    1af8:	4b42      	ldr	r3, [pc, #264]	; (1c04 <splashScreen+0x210>)
    1afa:	4699      	mov	r9, r3
    1afc:	4798      	blx	r3
    1afe:	4f42      	ldr	r7, [pc, #264]	; (1c08 <splashScreen+0x214>)
    1b00:	0843      	lsrs	r3, r0, #1
    1b02:	2528      	movs	r5, #40	; 0x28
    1b04:	1aeb      	subs	r3, r5, r3
    1b06:	803b      	strh	r3, [r7, #0]
	yCharPos = 16;
    1b08:	4e40      	ldr	r6, [pc, #256]	; (1c0c <splashScreen+0x218>)
    1b0a:	2310      	movs	r3, #16
    1b0c:	8033      	strh	r3, [r6, #0]
	writeString(textPhrase);
    1b0e:	0020      	movs	r0, r4
    1b10:	4b3f      	ldr	r3, [pc, #252]	; (1c10 <splashScreen+0x21c>)
    1b12:	4698      	mov	r8, r3
    1b14:	4798      	blx	r3
	
	
	xCharPos = 40 - (strlen(versionLabel)/2);
    1b16:	4c3f      	ldr	r4, [pc, #252]	; (1c14 <splashScreen+0x220>)
    1b18:	0020      	movs	r0, r4
    1b1a:	47c8      	blx	r9
    1b1c:	0843      	lsrs	r3, r0, #1
    1b1e:	1aeb      	subs	r3, r5, r3
    1b20:	803b      	strh	r3, [r7, #0]
	yCharPos = 18;
    1b22:	2312      	movs	r3, #18
    1b24:	8033      	strh	r3, [r6, #0]
	writeString(versionLabel);
    1b26:	0020      	movs	r0, r4
    1b28:	47c0      	blx	r8
	
	xCharPos = 40 - (strlen(compileTime)/2);
    1b2a:	4c3b      	ldr	r4, [pc, #236]	; (1c18 <splashScreen+0x224>)
    1b2c:	0020      	movs	r0, r4
    1b2e:	47c8      	blx	r9
    1b30:	0840      	lsrs	r0, r0, #1
    1b32:	1a2d      	subs	r5, r5, r0
    1b34:	803d      	strh	r5, [r7, #0]
	yCharPos = 19;
    1b36:	2313      	movs	r3, #19
    1b38:	8033      	strh	r3, [r6, #0]
	writeString(compileTime);
    1b3a:	0020      	movs	r0, r4
    1b3c:	47c0      	blx	r8
	
	
	delay_ms(3000);
    1b3e:	4837      	ldr	r0, [pc, #220]	; (1c1c <splashScreen+0x228>)
    1b40:	4b37      	ldr	r3, [pc, #220]	; (1c20 <splashScreen+0x22c>)
    1b42:	4798      	blx	r3
		
	clearScreen();
    1b44:	4b28      	ldr	r3, [pc, #160]	; (1be8 <splashScreen+0x1f4>)
    1b46:	4798      	blx	r3
	nullifyConsole();
    1b48:	4b36      	ldr	r3, [pc, #216]	; (1c24 <splashScreen+0x230>)
    1b4a:	4798      	blx	r3
	//setColorRGB(0,255,0);
	//setBackColorRGB(0,0,0);
	
	//Setting the xChar and yChar position has to come
	//after splashScreen() and InitLCD();
	xCharPos = 0;
    1b4c:	2300      	movs	r3, #0
    1b4e:	803b      	strh	r3, [r7, #0]
	yCharPos = 0;
    1b50:	8033      	strh	r3, [r6, #0]
	

    1b52:	bc0c      	pop	{r2, r3}
    1b54:	4690      	mov	r8, r2
    1b56:	4699      	mov	r9, r3
    1b58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1b5a:	46c0      	nop			; (mov r8, r8)
    1b5c:	2000022c 	.word	0x2000022c
    1b60:	000065e4 	.word	0x000065e4
    1b64:	00006604 	.word	0x00006604
    1b68:	00006618 	.word	0x00006618
    1b6c:	00006630 	.word	0x00006630
    1b70:	00006640 	.word	0x00006640
    1b74:	00006648 	.word	0x00006648
    1b78:	00006670 	.word	0x00006670
    1b7c:	0000669c 	.word	0x0000669c
    1b80:	000066c4 	.word	0x000066c4
    1b84:	000066f0 	.word	0x000066f0
    1b88:	000066fc 	.word	0x000066fc
    1b8c:	00006714 	.word	0x00006714
    1b90:	00006734 	.word	0x00006734
    1b94:	00006754 	.word	0x00006754
    1b98:	00006778 	.word	0x00006778
    1b9c:	00006788 	.word	0x00006788
    1ba0:	00006794 	.word	0x00006794
    1ba4:	000067b0 	.word	0x000067b0
    1ba8:	000067d0 	.word	0x000067d0
    1bac:	0000680c 	.word	0x0000680c
    1bb0:	00006828 	.word	0x00006828
    1bb4:	00006844 	.word	0x00006844
    1bb8:	00006854 	.word	0x00006854
    1bbc:	00006878 	.word	0x00006878
    1bc0:	000068a4 	.word	0x000068a4
    1bc4:	000068d0 	.word	0x000068d0
    1bc8:	000068f0 	.word	0x000068f0
    1bcc:	00006910 	.word	0x00006910
    1bd0:	00006924 	.word	0x00006924
    1bd4:	00006940 	.word	0x00006940
    1bd8:	00006950 	.word	0x00006950
    1bdc:	00006974 	.word	0x00006974
    1be0:	00006994 	.word	0x00006994
    1be4:	000050bd 	.word	0x000050bd
    1be8:	0000437d 	.word	0x0000437d
    1bec:	00004171 	.word	0x00004171
    1bf0:	4100448c 	.word	0x4100448c
    1bf4:	41004400 	.word	0x41004400
    1bf8:	00001925 	.word	0x00001925
    1bfc:	200012f4 	.word	0x200012f4
    1c00:	ffff0000 	.word	0xffff0000
    1c04:	000052df 	.word	0x000052df
    1c08:	200002ec 	.word	0x200002ec
    1c0c:	200002ee 	.word	0x200002ee
    1c10:	00003af5 	.word	0x00003af5
    1c14:	20000198 	.word	0x20000198
    1c18:	20000170 	.word	0x20000170
    1c1c:	00000bb8 	.word	0x00000bb8
    1c20:	00001cbd 	.word	0x00001cbd
    1c24:	00003b3d 	.word	0x00003b3d

00001c28 <parseRXBuffer>:
char tempCharacter;

cbuf_handle_t ouroboros;	

void parseRXBuffer(void)
{
    1c28:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c2a:	b083      	sub	sp, #12
		while(!ring_empty(ouroboros))
    1c2c:	4e0b      	ldr	r6, [pc, #44]	; (1c5c <parseRXBuffer+0x34>)
    1c2e:	4d0c      	ldr	r5, [pc, #48]	; (1c60 <parseRXBuffer+0x38>)
		{
			uint8_t characterFromRingBuffer;
			ring_get(ouroboros, &characterFromRingBuffer);
    1c30:	0037      	movs	r7, r6
		while(!ring_empty(ouroboros))
    1c32:	e008      	b.n	1c46 <parseRXBuffer+0x1e>
			ring_get(ouroboros, &characterFromRingBuffer);
    1c34:	466b      	mov	r3, sp
    1c36:	1ddc      	adds	r4, r3, #7
    1c38:	0021      	movs	r1, r4
    1c3a:	6838      	ldr	r0, [r7, #0]
    1c3c:	4b09      	ldr	r3, [pc, #36]	; (1c64 <parseRXBuffer+0x3c>)
    1c3e:	4798      	blx	r3
			parseChar(characterFromRingBuffer);
    1c40:	7820      	ldrb	r0, [r4, #0]
    1c42:	4b09      	ldr	r3, [pc, #36]	; (1c68 <parseRXBuffer+0x40>)
    1c44:	4798      	blx	r3
		while(!ring_empty(ouroboros))
    1c46:	6830      	ldr	r0, [r6, #0]
    1c48:	47a8      	blx	r5
    1c4a:	2800      	cmp	r0, #0
    1c4c:	d0f2      	beq.n	1c34 <parseRXBuffer+0xc>
		
		}
		ring_reset(ouroboros);
    1c4e:	4b03      	ldr	r3, [pc, #12]	; (1c5c <parseRXBuffer+0x34>)
    1c50:	6818      	ldr	r0, [r3, #0]
    1c52:	4b06      	ldr	r3, [pc, #24]	; (1c6c <parseRXBuffer+0x44>)
    1c54:	4798      	blx	r3
}
    1c56:	b003      	add	sp, #12
    1c58:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1c5a:	46c0      	nop			; (mov r8, r8)
    1c5c:	20000390 	.word	0x20000390
    1c60:	0000017d 	.word	0x0000017d
    1c64:	00000195 	.word	0x00000195
    1c68:	000018c9 	.word	0x000018c9
    1c6c:	00000135 	.word	0x00000135

00001c70 <sendChar>:

void sendChar(char character)
{
    1c70:	b510      	push	{r4, lr}
	printf("%c", character);
    1c72:	4b01      	ldr	r3, [pc, #4]	; (1c78 <sendChar+0x8>)
    1c74:	4798      	blx	r3
    1c76:	bd10      	pop	{r4, pc}
    1c78:	00005039 	.word	0x00005039

00001c7c <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    1c7c:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    1c7e:	2000      	movs	r0, #0
    1c80:	4b08      	ldr	r3, [pc, #32]	; (1ca4 <delay_init+0x28>)
    1c82:	4798      	blx	r3
    1c84:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    1c86:	4c08      	ldr	r4, [pc, #32]	; (1ca8 <delay_init+0x2c>)
    1c88:	21fa      	movs	r1, #250	; 0xfa
    1c8a:	0089      	lsls	r1, r1, #2
    1c8c:	47a0      	blx	r4
    1c8e:	4b07      	ldr	r3, [pc, #28]	; (1cac <delay_init+0x30>)
    1c90:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    1c92:	4907      	ldr	r1, [pc, #28]	; (1cb0 <delay_init+0x34>)
    1c94:	0028      	movs	r0, r5
    1c96:	47a0      	blx	r4
    1c98:	4b06      	ldr	r3, [pc, #24]	; (1cb4 <delay_init+0x38>)
    1c9a:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    1c9c:	2205      	movs	r2, #5
    1c9e:	4b06      	ldr	r3, [pc, #24]	; (1cb8 <delay_init+0x3c>)
    1ca0:	601a      	str	r2, [r3, #0]
}
    1ca2:	bd70      	pop	{r4, r5, r6, pc}
    1ca4:	0000323d 	.word	0x0000323d
    1ca8:	00004abd 	.word	0x00004abd
    1cac:	20000018 	.word	0x20000018
    1cb0:	000f4240 	.word	0x000f4240
    1cb4:	2000001c 	.word	0x2000001c
    1cb8:	e000e010 	.word	0xe000e010

00001cbc <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    1cbc:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    1cbe:	4b08      	ldr	r3, [pc, #32]	; (1ce0 <delay_cycles_ms+0x24>)
    1cc0:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    1cc2:	4a08      	ldr	r2, [pc, #32]	; (1ce4 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    1cc4:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1cc6:	2180      	movs	r1, #128	; 0x80
    1cc8:	0249      	lsls	r1, r1, #9
	while (n--) {
    1cca:	3801      	subs	r0, #1
    1ccc:	d307      	bcc.n	1cde <delay_cycles_ms+0x22>
	if (n > 0) {
    1cce:	2c00      	cmp	r4, #0
    1cd0:	d0fb      	beq.n	1cca <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    1cd2:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    1cd4:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1cd6:	6813      	ldr	r3, [r2, #0]
    1cd8:	420b      	tst	r3, r1
    1cda:	d0fc      	beq.n	1cd6 <delay_cycles_ms+0x1a>
    1cdc:	e7f5      	b.n	1cca <delay_cycles_ms+0xe>
	}
}
    1cde:	bd30      	pop	{r4, r5, pc}
    1ce0:	20000018 	.word	0x20000018
    1ce4:	e000e010 	.word	0xe000e010

00001ce8 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    1ce8:	4b0c      	ldr	r3, [pc, #48]	; (1d1c <cpu_irq_enter_critical+0x34>)
    1cea:	681b      	ldr	r3, [r3, #0]
    1cec:	2b00      	cmp	r3, #0
    1cee:	d106      	bne.n	1cfe <cpu_irq_enter_critical+0x16>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1cf0:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    1cf4:	2b00      	cmp	r3, #0
    1cf6:	d007      	beq.n	1d08 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    1cf8:	2200      	movs	r2, #0
    1cfa:	4b09      	ldr	r3, [pc, #36]	; (1d20 <cpu_irq_enter_critical+0x38>)
    1cfc:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    1cfe:	4a07      	ldr	r2, [pc, #28]	; (1d1c <cpu_irq_enter_critical+0x34>)
    1d00:	6813      	ldr	r3, [r2, #0]
    1d02:	3301      	adds	r3, #1
    1d04:	6013      	str	r3, [r2, #0]
}
    1d06:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    1d08:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    1d0a:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    1d0e:	2200      	movs	r2, #0
    1d10:	4b04      	ldr	r3, [pc, #16]	; (1d24 <cpu_irq_enter_critical+0x3c>)
    1d12:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    1d14:	3201      	adds	r2, #1
    1d16:	4b02      	ldr	r3, [pc, #8]	; (1d20 <cpu_irq_enter_critical+0x38>)
    1d18:	701a      	strb	r2, [r3, #0]
    1d1a:	e7f0      	b.n	1cfe <cpu_irq_enter_critical+0x16>
    1d1c:	200002ac 	.word	0x200002ac
    1d20:	200002b0 	.word	0x200002b0
    1d24:	20000020 	.word	0x20000020

00001d28 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    1d28:	4b08      	ldr	r3, [pc, #32]	; (1d4c <cpu_irq_leave_critical+0x24>)
    1d2a:	681a      	ldr	r2, [r3, #0]
    1d2c:	3a01      	subs	r2, #1
    1d2e:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1d30:	681b      	ldr	r3, [r3, #0]
    1d32:	2b00      	cmp	r3, #0
    1d34:	d109      	bne.n	1d4a <cpu_irq_leave_critical+0x22>
    1d36:	4b06      	ldr	r3, [pc, #24]	; (1d50 <cpu_irq_leave_critical+0x28>)
    1d38:	781b      	ldrb	r3, [r3, #0]
    1d3a:	2b00      	cmp	r3, #0
    1d3c:	d005      	beq.n	1d4a <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    1d3e:	2201      	movs	r2, #1
    1d40:	4b04      	ldr	r3, [pc, #16]	; (1d54 <cpu_irq_leave_critical+0x2c>)
    1d42:	701a      	strb	r2, [r3, #0]
    1d44:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1d48:	b662      	cpsie	i
	}
}
    1d4a:	4770      	bx	lr
    1d4c:	200002ac 	.word	0x200002ac
    1d50:	200002b0 	.word	0x200002b0
    1d54:	20000020 	.word	0x20000020

00001d58 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    1d58:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d5a:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    1d5c:	ac01      	add	r4, sp, #4
    1d5e:	2501      	movs	r5, #1
    1d60:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    1d62:	2700      	movs	r7, #0
    1d64:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    1d66:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    1d68:	0021      	movs	r1, r4
    1d6a:	203e      	movs	r0, #62	; 0x3e
    1d6c:	4e06      	ldr	r6, [pc, #24]	; (1d88 <system_board_init+0x30>)
    1d6e:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1d70:	2280      	movs	r2, #128	; 0x80
    1d72:	05d2      	lsls	r2, r2, #23
    1d74:	4b05      	ldr	r3, [pc, #20]	; (1d8c <system_board_init+0x34>)
    1d76:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    1d78:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    1d7a:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    1d7c:	0021      	movs	r1, r4
    1d7e:	200f      	movs	r0, #15
    1d80:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
    1d82:	b003      	add	sp, #12
    1d84:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d86:	46c0      	nop			; (mov r8, r8)
    1d88:	000022c1 	.word	0x000022c1
    1d8c:	41004480 	.word	0x41004480

00001d90 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
    1d90:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
    1d92:	2200      	movs	r2, #0
    1d94:	2300      	movs	r3, #0
    1d96:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
    1d98:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
    1d9a:	2100      	movs	r1, #0
    1d9c:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
    1d9e:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
    1da0:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
    1da2:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
    1da4:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
    1da6:	6082      	str	r2, [r0, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	//config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
    1da8:	24c0      	movs	r4, #192	; 0xc0
    1daa:	0164      	lsls	r4, r4, #5
    1dac:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
    1dae:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
    1db0:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
    1db2:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
    1db4:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
    1db6:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
    1db8:	242a      	movs	r4, #42	; 0x2a
    1dba:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
    1dbc:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
    1dbe:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
    1dc0:	3c06      	subs	r4, #6
    1dc2:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
    1dc4:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
    1dc6:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
    1dc8:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
    1dca:	232b      	movs	r3, #43	; 0x2b
    1dcc:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
    1dce:	3301      	adds	r3, #1
    1dd0:	54c1      	strb	r1, [r0, r3]
}
    1dd2:	bd10      	pop	{r4, pc}

00001dd4 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
    1dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1dd6:	46d6      	mov	lr, sl
    1dd8:	464f      	mov	r7, r9
    1dda:	4646      	mov	r6, r8
    1ddc:	b5c0      	push	{r6, r7, lr}
    1dde:	b096      	sub	sp, #88	; 0x58
    1de0:	0007      	movs	r7, r0
    1de2:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    1de4:	6001      	str	r1, [r0, #0]
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    1de6:	4ac6      	ldr	r2, [pc, #792]	; (2100 <STACK_SIZE+0x100>)
    1de8:	6a10      	ldr	r0, [r2, #32]
    1dea:	2380      	movs	r3, #128	; 0x80
    1dec:	025b      	lsls	r3, r3, #9
    1dee:	4303      	orrs	r3, r0
    1df0:	6213      	str	r3, [r2, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    1df2:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    1df4:	2005      	movs	r0, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    1df6:	07db      	lsls	r3, r3, #31
    1df8:	d505      	bpl.n	1e06 <adc_init+0x32>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
    1dfa:	b016      	add	sp, #88	; 0x58
    1dfc:	bc1c      	pop	{r2, r3, r4}
    1dfe:	4690      	mov	r8, r2
    1e00:	4699      	mov	r9, r3
    1e02:	46a2      	mov	sl, r4
    1e04:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    1e06:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
    1e08:	3017      	adds	r0, #23
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    1e0a:	079b      	lsls	r3, r3, #30
    1e0c:	d4f5      	bmi.n	1dfa <adc_init+0x26>
	module_inst->reference = config->reference;
    1e0e:	7873      	ldrb	r3, [r6, #1]
    1e10:	713b      	strb	r3, [r7, #4]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
    1e12:	2b00      	cmp	r3, #0
    1e14:	d104      	bne.n	1e20 <adc_init+0x4c>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
    1e16:	4abb      	ldr	r2, [pc, #748]	; (2104 <STACK_SIZE+0x104>)
    1e18:	6c13      	ldr	r3, [r2, #64]	; 0x40
    1e1a:	2104      	movs	r1, #4
    1e1c:	430b      	orrs	r3, r1
    1e1e:	6413      	str	r3, [r2, #64]	; 0x40
		module_inst->callback[i] = NULL;
    1e20:	2300      	movs	r3, #0
    1e22:	60bb      	str	r3, [r7, #8]
    1e24:	60fb      	str	r3, [r7, #12]
    1e26:	613b      	str	r3, [r7, #16]
	module_inst->registered_callback_mask = 0;
    1e28:	76bb      	strb	r3, [r7, #26]
	module_inst->enabled_callback_mask = 0;
    1e2a:	76fb      	strb	r3, [r7, #27]
	module_inst->remaining_conversions = 0;
    1e2c:	833b      	strh	r3, [r7, #24]
	module_inst->job_status = STATUS_OK;
    1e2e:	773b      	strb	r3, [r7, #28]
	_adc_instances[0] = module_inst;
    1e30:	4bb5      	ldr	r3, [pc, #724]	; (2108 <STACK_SIZE+0x108>)
    1e32:	601f      	str	r7, [r3, #0]
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
    1e34:	232a      	movs	r3, #42	; 0x2a
    1e36:	5cf3      	ldrb	r3, [r6, r3]
    1e38:	2b00      	cmp	r3, #0
    1e3a:	d105      	bne.n	1e48 <adc_init+0x74>
    1e3c:	7d33      	ldrb	r3, [r6, #20]
    1e3e:	2b00      	cmp	r3, #0
    1e40:	d102      	bne.n	1e48 <adc_init+0x74>
		module_inst->software_trigger = true;
    1e42:	3301      	adds	r3, #1
    1e44:	777b      	strb	r3, [r7, #29]
    1e46:	e001      	b.n	1e4c <adc_init+0x78>
		module_inst->software_trigger = false;
    1e48:	2300      	movs	r3, #0
    1e4a:	777b      	strb	r3, [r7, #29]
	Adc *const adc_module = module_inst->hw;
    1e4c:	683b      	ldr	r3, [r7, #0]
    1e4e:	4698      	mov	r8, r3
	gclk_chan_conf.source_generator = config->clock_source;
    1e50:	7833      	ldrb	r3, [r6, #0]
    1e52:	466a      	mov	r2, sp
    1e54:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
    1e56:	4669      	mov	r1, sp
    1e58:	201e      	movs	r0, #30
    1e5a:	4bac      	ldr	r3, [pc, #688]	; (210c <STACK_SIZE+0x10c>)
    1e5c:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
    1e5e:	201e      	movs	r0, #30
    1e60:	4bab      	ldr	r3, [pc, #684]	; (2110 <STACK_SIZE+0x110>)
    1e62:	4798      	blx	r3
	if (config->pin_scan.inputs_to_scan != 0) {
    1e64:	232c      	movs	r3, #44	; 0x2c
    1e66:	5cf2      	ldrb	r2, [r6, r3]
    1e68:	2a00      	cmp	r2, #0
    1e6a:	d054      	beq.n	1f16 <adc_init+0x142>
		uint8_t offset = config->pin_scan.offset_start_scan;
    1e6c:	3b01      	subs	r3, #1
    1e6e:	5cf5      	ldrb	r5, [r6, r3]
		uint8_t start_pin =
    1e70:	7b33      	ldrb	r3, [r6, #12]
    1e72:	18eb      	adds	r3, r5, r3
    1e74:	b2db      	uxtb	r3, r3
		uint8_t end_pin =
    1e76:	18d1      	adds	r1, r2, r3
		while (start_pin < end_pin) {
    1e78:	b2c9      	uxtb	r1, r1
    1e7a:	428b      	cmp	r3, r1
    1e7c:	d221      	bcs.n	1ec2 <adc_init+0xee>
    1e7e:	1952      	adds	r2, r2, r5
    1e80:	b2d3      	uxtb	r3, r2
    1e82:	4699      	mov	r9, r3
	const uint32_t pinmapping[] = {
    1e84:	4ba3      	ldr	r3, [pc, #652]	; (2114 <STACK_SIZE+0x114>)
    1e86:	469a      	mov	sl, r3
    1e88:	e003      	b.n	1e92 <adc_init+0xbe>
			offset++;
    1e8a:	3501      	adds	r5, #1
    1e8c:	b2ed      	uxtb	r5, r5
		while (start_pin < end_pin) {
    1e8e:	454d      	cmp	r5, r9
    1e90:	d017      	beq.n	1ec2 <adc_init+0xee>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
    1e92:	240f      	movs	r4, #15
    1e94:	402c      	ands	r4, r5
    1e96:	7b33      	ldrb	r3, [r6, #12]
    1e98:	18e4      	adds	r4, r4, r3
	const uint32_t pinmapping[] = {
    1e9a:	2250      	movs	r2, #80	; 0x50
    1e9c:	499e      	ldr	r1, [pc, #632]	; (2118 <STACK_SIZE+0x118>)
    1e9e:	a802      	add	r0, sp, #8
    1ea0:	47d0      	blx	sl
	if (pin <= ADC_EXTCHANNEL_MSB) {
    1ea2:	2c13      	cmp	r4, #19
    1ea4:	d8f1      	bhi.n	1e8a <adc_init+0xb6>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    1ea6:	00a4      	lsls	r4, r4, #2
    1ea8:	ab02      	add	r3, sp, #8
    1eaa:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1eac:	a901      	add	r1, sp, #4
    1eae:	2300      	movs	r3, #0
    1eb0:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    1eb2:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    1eb4:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    1eb6:	3301      	adds	r3, #1
    1eb8:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    1eba:	b2c0      	uxtb	r0, r0
    1ebc:	4b97      	ldr	r3, [pc, #604]	; (211c <STACK_SIZE+0x11c>)
    1ebe:	4798      	blx	r3
    1ec0:	e7e3      	b.n	1e8a <adc_init+0xb6>
		_adc_configure_ain_pin(config->negative_input);
    1ec2:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
    1ec4:	2250      	movs	r2, #80	; 0x50
    1ec6:	4994      	ldr	r1, [pc, #592]	; (2118 <STACK_SIZE+0x118>)
    1ec8:	a802      	add	r0, sp, #8
    1eca:	4b92      	ldr	r3, [pc, #584]	; (2114 <STACK_SIZE+0x114>)
    1ecc:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
    1ece:	2c13      	cmp	r4, #19
    1ed0:	d913      	bls.n	1efa <adc_init+0x126>
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
    1ed2:	7d73      	ldrb	r3, [r6, #21]
    1ed4:	009b      	lsls	r3, r3, #2
    1ed6:	b2db      	uxtb	r3, r3
    1ed8:	4642      	mov	r2, r8
    1eda:	7013      	strb	r3, [r2, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
    1edc:	7db3      	ldrb	r3, [r6, #22]
    1ede:	01db      	lsls	r3, r3, #7
    1ee0:	7872      	ldrb	r2, [r6, #1]
    1ee2:	4313      	orrs	r3, r2
    1ee4:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
    1ee6:	4642      	mov	r2, r8
    1ee8:	7053      	strb	r3, [r2, #1]
	switch (config->resolution) {
    1eea:	7933      	ldrb	r3, [r6, #4]
    1eec:	2b34      	cmp	r3, #52	; 0x34
    1eee:	d900      	bls.n	1ef2 <adc_init+0x11e>
    1ef0:	e17b      	b.n	21ea <STACK_SIZE+0x1ea>
    1ef2:	009b      	lsls	r3, r3, #2
    1ef4:	4a8a      	ldr	r2, [pc, #552]	; (2120 <STACK_SIZE+0x120>)
    1ef6:	58d3      	ldr	r3, [r2, r3]
    1ef8:	469f      	mov	pc, r3
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    1efa:	00a4      	lsls	r4, r4, #2
    1efc:	ab02      	add	r3, sp, #8
    1efe:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1f00:	a901      	add	r1, sp, #4
    1f02:	2300      	movs	r3, #0
    1f04:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    1f06:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    1f08:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    1f0a:	3301      	adds	r3, #1
    1f0c:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    1f0e:	b2c0      	uxtb	r0, r0
    1f10:	4b82      	ldr	r3, [pc, #520]	; (211c <STACK_SIZE+0x11c>)
    1f12:	4798      	blx	r3
    1f14:	e7dd      	b.n	1ed2 <adc_init+0xfe>
		_adc_configure_ain_pin(config->positive_input);
    1f16:	7b34      	ldrb	r4, [r6, #12]
	const uint32_t pinmapping[] = {
    1f18:	2250      	movs	r2, #80	; 0x50
    1f1a:	497f      	ldr	r1, [pc, #508]	; (2118 <STACK_SIZE+0x118>)
    1f1c:	a802      	add	r0, sp, #8
    1f1e:	4b7d      	ldr	r3, [pc, #500]	; (2114 <STACK_SIZE+0x114>)
    1f20:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
    1f22:	2c13      	cmp	r4, #19
    1f24:	d915      	bls.n	1f52 <adc_init+0x17e>
		_adc_configure_ain_pin(config->negative_input);
    1f26:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
    1f28:	2250      	movs	r2, #80	; 0x50
    1f2a:	497b      	ldr	r1, [pc, #492]	; (2118 <STACK_SIZE+0x118>)
    1f2c:	a802      	add	r0, sp, #8
    1f2e:	4b79      	ldr	r3, [pc, #484]	; (2114 <STACK_SIZE+0x114>)
    1f30:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
    1f32:	2c13      	cmp	r4, #19
    1f34:	d8cd      	bhi.n	1ed2 <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    1f36:	00a4      	lsls	r4, r4, #2
    1f38:	ab02      	add	r3, sp, #8
    1f3a:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1f3c:	a901      	add	r1, sp, #4
    1f3e:	2300      	movs	r3, #0
    1f40:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    1f42:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    1f44:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    1f46:	3301      	adds	r3, #1
    1f48:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    1f4a:	b2c0      	uxtb	r0, r0
    1f4c:	4b73      	ldr	r3, [pc, #460]	; (211c <STACK_SIZE+0x11c>)
    1f4e:	4798      	blx	r3
    1f50:	e7bf      	b.n	1ed2 <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    1f52:	00a4      	lsls	r4, r4, #2
    1f54:	ab02      	add	r3, sp, #8
    1f56:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1f58:	a901      	add	r1, sp, #4
    1f5a:	2300      	movs	r3, #0
    1f5c:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    1f5e:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    1f60:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    1f62:	3301      	adds	r3, #1
    1f64:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    1f66:	b2c0      	uxtb	r0, r0
    1f68:	4b6c      	ldr	r3, [pc, #432]	; (211c <STACK_SIZE+0x11c>)
    1f6a:	4798      	blx	r3
    1f6c:	e7db      	b.n	1f26 <adc_init+0x152>
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
    1f6e:	2304      	movs	r3, #4
		resolution = ADC_RESOLUTION_16BIT;
    1f70:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_4;
    1f72:	2102      	movs	r1, #2
    1f74:	e01a      	b.n	1fac <adc_init+0x1d8>
		adjres = config->divide_result;
    1f76:	7c71      	ldrb	r1, [r6, #17]
		accumulate = config->accumulate_samples;
    1f78:	7c33      	ldrb	r3, [r6, #16]
		resolution = ADC_RESOLUTION_16BIT;
    1f7a:	2410      	movs	r4, #16
    1f7c:	e016      	b.n	1fac <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
    1f7e:	2306      	movs	r3, #6
		resolution = ADC_RESOLUTION_16BIT;
    1f80:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
    1f82:	2101      	movs	r1, #1
    1f84:	e012      	b.n	1fac <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
    1f86:	2308      	movs	r3, #8
		resolution = ADC_RESOLUTION_16BIT;
    1f88:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
    1f8a:	2100      	movs	r1, #0
    1f8c:	e00e      	b.n	1fac <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    1f8e:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_8BIT;
    1f90:	2430      	movs	r4, #48	; 0x30
	uint8_t adjres = 0;
    1f92:	2100      	movs	r1, #0
    1f94:	e00a      	b.n	1fac <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    1f96:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_10BIT;
    1f98:	2420      	movs	r4, #32
	uint8_t adjres = 0;
    1f9a:	2100      	movs	r1, #0
    1f9c:	e006      	b.n	1fac <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    1f9e:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_12BIT;
    1fa0:	2400      	movs	r4, #0
	uint8_t adjres = 0;
    1fa2:	2100      	movs	r1, #0
    1fa4:	e002      	b.n	1fac <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
    1fa6:	2302      	movs	r3, #2
		resolution = ADC_RESOLUTION_16BIT;
    1fa8:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
    1faa:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
    1fac:	0109      	lsls	r1, r1, #4
    1fae:	2270      	movs	r2, #112	; 0x70
    1fb0:	400a      	ands	r2, r1
    1fb2:	4313      	orrs	r3, r2
    1fb4:	4642      	mov	r2, r8
    1fb6:	7093      	strb	r3, [r2, #2]
	if (config->sample_length > 63) {
    1fb8:	7df3      	ldrb	r3, [r6, #23]
		return STATUS_ERR_INVALID_ARG;
    1fba:	2017      	movs	r0, #23
	if (config->sample_length > 63) {
    1fbc:	2b3f      	cmp	r3, #63	; 0x3f
    1fbe:	d900      	bls.n	1fc2 <adc_init+0x1ee>
    1fc0:	e71b      	b.n	1dfa <adc_init+0x26>
		adc_module->SAMPCTRL.reg =
    1fc2:	70d3      	strb	r3, [r2, #3]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    1fc4:	683a      	ldr	r2, [r7, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1fc6:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    1fc8:	b25b      	sxtb	r3, r3
    1fca:	2b00      	cmp	r3, #0
    1fcc:	dbfb      	blt.n	1fc6 <adc_init+0x1f2>
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
    1fce:	7cf3      	ldrb	r3, [r6, #19]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    1fd0:	8872      	ldrh	r2, [r6, #2]
    1fd2:	4313      	orrs	r3, r2
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
    1fd4:	2224      	movs	r2, #36	; 0x24
    1fd6:	5cb2      	ldrb	r2, [r6, r2]
    1fd8:	00d2      	lsls	r2, r2, #3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    1fda:	4313      	orrs	r3, r2
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
    1fdc:	7d32      	ldrb	r2, [r6, #20]
    1fde:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    1fe0:	4313      	orrs	r3, r2
    1fe2:	7cb2      	ldrb	r2, [r6, #18]
    1fe4:	0052      	lsls	r2, r2, #1
    1fe6:	4313      	orrs	r3, r2
    1fe8:	4323      	orrs	r3, r4
	adc_module->CTRLB.reg =
    1fea:	4642      	mov	r2, r8
    1fec:	8093      	strh	r3, [r2, #4]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
    1fee:	7e33      	ldrb	r3, [r6, #24]
    1ff0:	2b00      	cmp	r3, #0
    1ff2:	d020      	beq.n	2036 <STACK_SIZE+0x36>
		switch (resolution) {
    1ff4:	2c10      	cmp	r4, #16
    1ff6:	d100      	bne.n	1ffa <adc_init+0x226>
    1ff8:	e0d9      	b.n	21ae <STACK_SIZE+0x1ae>
    1ffa:	d800      	bhi.n	1ffe <adc_init+0x22a>
    1ffc:	e098      	b.n	2130 <STACK_SIZE+0x130>
    1ffe:	2c20      	cmp	r4, #32
    2000:	d100      	bne.n	2004 <STACK_SIZE+0x4>
    2002:	e0b6      	b.n	2172 <STACK_SIZE+0x172>
    2004:	2c30      	cmp	r4, #48	; 0x30
    2006:	d116      	bne.n	2036 <STACK_SIZE+0x36>
			if (config->differential_mode &&
    2008:	7cf2      	ldrb	r2, [r6, #19]
    200a:	2a00      	cmp	r2, #0
    200c:	d00a      	beq.n	2024 <STACK_SIZE+0x24>
					(config->window.window_lower_value > 127 ||
    200e:	69f2      	ldr	r2, [r6, #28]
    2010:	3280      	adds	r2, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
    2012:	2017      	movs	r0, #23
			if (config->differential_mode &&
    2014:	2aff      	cmp	r2, #255	; 0xff
    2016:	d900      	bls.n	201a <STACK_SIZE+0x1a>
    2018:	e6ef      	b.n	1dfa <adc_init+0x26>
					config->window.window_lower_value < -128 ||
    201a:	6a32      	ldr	r2, [r6, #32]
    201c:	3280      	adds	r2, #128	; 0x80
    201e:	2aff      	cmp	r2, #255	; 0xff
    2020:	d900      	bls.n	2024 <STACK_SIZE+0x24>
    2022:	e6ea      	b.n	1dfa <adc_init+0x26>
				return STATUS_ERR_INVALID_ARG;
    2024:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 255 ||
    2026:	69f2      	ldr	r2, [r6, #28]
    2028:	2aff      	cmp	r2, #255	; 0xff
    202a:	dd00      	ble.n	202e <STACK_SIZE+0x2e>
    202c:	e6e5      	b.n	1dfa <adc_init+0x26>
    202e:	6a32      	ldr	r2, [r6, #32]
    2030:	2aff      	cmp	r2, #255	; 0xff
    2032:	dd00      	ble.n	2036 <STACK_SIZE+0x36>
    2034:	e6e1      	b.n	1dfa <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
    2036:	6839      	ldr	r1, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    2038:	7e4a      	ldrb	r2, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    203a:	b252      	sxtb	r2, r2
    203c:	2a00      	cmp	r2, #0
    203e:	dbfb      	blt.n	2038 <STACK_SIZE+0x38>
	adc_module->WINCTRL.reg = config->window.window_mode;
    2040:	4642      	mov	r2, r8
    2042:	7213      	strb	r3, [r2, #8]
	Adc *const adc_module = module_inst->hw;
    2044:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    2046:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    2048:	b25b      	sxtb	r3, r3
    204a:	2b00      	cmp	r3, #0
    204c:	dbfb      	blt.n	2046 <STACK_SIZE+0x46>
	adc_module->WINLT.reg =
    204e:	8bb3      	ldrh	r3, [r6, #28]
    2050:	4642      	mov	r2, r8
    2052:	8393      	strh	r3, [r2, #28]
	Adc *const adc_module = module_inst->hw;
    2054:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    2056:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    2058:	b25b      	sxtb	r3, r3
    205a:	2b00      	cmp	r3, #0
    205c:	dbfb      	blt.n	2056 <STACK_SIZE+0x56>
	adc_module->WINUT.reg = config->window.window_upper_value <<
    205e:	8c33      	ldrh	r3, [r6, #32]
    2060:	4642      	mov	r2, r8
    2062:	8413      	strh	r3, [r2, #32]
	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
    2064:	232c      	movs	r3, #44	; 0x2c
    2066:	5cf3      	ldrb	r3, [r6, r3]
	if (inputs_to_scan > 0) {
    2068:	2b00      	cmp	r3, #0
    206a:	d005      	beq.n	2078 <STACK_SIZE+0x78>
		inputs_to_scan--;
    206c:	3b01      	subs	r3, #1
    206e:	b2db      	uxtb	r3, r3
		return STATUS_ERR_INVALID_ARG;
    2070:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    2072:	2b0f      	cmp	r3, #15
    2074:	d900      	bls.n	2078 <STACK_SIZE+0x78>
    2076:	e6c0      	b.n	1dfa <adc_init+0x26>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
    2078:	222b      	movs	r2, #43	; 0x2b
    207a:	5cb1      	ldrb	r1, [r6, r2]
		return STATUS_ERR_INVALID_ARG;
    207c:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    207e:	290f      	cmp	r1, #15
    2080:	d900      	bls.n	2084 <STACK_SIZE+0x84>
    2082:	e6ba      	b.n	1dfa <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
    2084:	6838      	ldr	r0, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    2086:	7e42      	ldrb	r2, [r0, #25]
	while (adc_is_syncing(module_inst)) {
    2088:	b252      	sxtb	r2, r2
    208a:	2a00      	cmp	r2, #0
    208c:	dbfb      	blt.n	2086 <STACK_SIZE+0x86>
			config->negative_input |
    208e:	89f2      	ldrh	r2, [r6, #14]
			config->positive_input;
    2090:	7b30      	ldrb	r0, [r6, #12]
			config->negative_input |
    2092:	4302      	orrs	r2, r0
    2094:	68b0      	ldr	r0, [r6, #8]
    2096:	4302      	orrs	r2, r0
			(config->pin_scan.offset_start_scan <<
    2098:	0509      	lsls	r1, r1, #20
			config->negative_input |
    209a:	430a      	orrs	r2, r1
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    209c:	041b      	lsls	r3, r3, #16
			config->negative_input |
    209e:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
    20a0:	4642      	mov	r2, r8
    20a2:	6113      	str	r3, [r2, #16]
	adc_module->EVCTRL.reg = config->event_action;
    20a4:	232a      	movs	r3, #42	; 0x2a
    20a6:	5cf3      	ldrb	r3, [r6, r3]
    20a8:	7513      	strb	r3, [r2, #20]
	adc_module->INTENCLR.reg =
    20aa:	230f      	movs	r3, #15
    20ac:	7593      	strb	r3, [r2, #22]
	if (config->correction.correction_enable){
    20ae:	3315      	adds	r3, #21
    20b0:	5cf3      	ldrb	r3, [r6, r3]
    20b2:	2b00      	cmp	r3, #0
    20b4:	d012      	beq.n	20dc <STACK_SIZE+0xdc>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    20b6:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
    20b8:	4a1a      	ldr	r2, [pc, #104]	; (2124 <STACK_SIZE+0x124>)
			return STATUS_ERR_INVALID_ARG;
    20ba:	2017      	movs	r0, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    20bc:	4293      	cmp	r3, r2
    20be:	d900      	bls.n	20c2 <STACK_SIZE+0xc2>
    20c0:	e69b      	b.n	1dfa <adc_init+0x26>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
    20c2:	4642      	mov	r2, r8
    20c4:	8493      	strh	r3, [r2, #36]	; 0x24
		if (config->correction.offset_correction > 2047 ||
    20c6:	8d32      	ldrh	r2, [r6, #40]	; 0x28
    20c8:	2380      	movs	r3, #128	; 0x80
    20ca:	011b      	lsls	r3, r3, #4
    20cc:	18d3      	adds	r3, r2, r3
    20ce:	4915      	ldr	r1, [pc, #84]	; (2124 <STACK_SIZE+0x124>)
    20d0:	b29b      	uxth	r3, r3
    20d2:	428b      	cmp	r3, r1
    20d4:	d900      	bls.n	20d8 <STACK_SIZE+0xd8>
    20d6:	e690      	b.n	1dfa <adc_init+0x26>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
    20d8:	4643      	mov	r3, r8
    20da:	84da      	strh	r2, [r3, #38]	; 0x26
			ADC_CALIB_BIAS_CAL(
    20dc:	4b12      	ldr	r3, [pc, #72]	; (2128 <STACK_SIZE+0x128>)
    20de:	681b      	ldr	r3, [r3, #0]
    20e0:	015b      	lsls	r3, r3, #5
    20e2:	22e0      	movs	r2, #224	; 0xe0
    20e4:	00d2      	lsls	r2, r2, #3
    20e6:	4013      	ands	r3, r2
			ADC_CALIB_LINEARITY_CAL(
    20e8:	4a10      	ldr	r2, [pc, #64]	; (212c <STACK_SIZE+0x12c>)
    20ea:	6851      	ldr	r1, [r2, #4]
    20ec:	0149      	lsls	r1, r1, #5
    20ee:	6812      	ldr	r2, [r2, #0]
    20f0:	0ed2      	lsrs	r2, r2, #27
    20f2:	430a      	orrs	r2, r1
    20f4:	b2d2      	uxtb	r2, r2
			) |
    20f6:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
    20f8:	4642      	mov	r2, r8
    20fa:	8513      	strh	r3, [r2, #40]	; 0x28
	return STATUS_OK;
    20fc:	2000      	movs	r0, #0
    20fe:	e67c      	b.n	1dfa <adc_init+0x26>
    2100:	40000400 	.word	0x40000400
    2104:	40000800 	.word	0x40000800
    2108:	20000394 	.word	0x20000394
    210c:	00003355 	.word	0x00003355
    2110:	000032c9 	.word	0x000032c9
    2114:	00004e91 	.word	0x00004e91
    2118:	00006a88 	.word	0x00006a88
    211c:	0000344d 	.word	0x0000344d
    2120:	000069b4 	.word	0x000069b4
    2124:	00000fff 	.word	0x00000fff
    2128:	00806024 	.word	0x00806024
    212c:	00806020 	.word	0x00806020
		switch (resolution) {
    2130:	2c00      	cmp	r4, #0
    2132:	d000      	beq.n	2136 <STACK_SIZE+0x136>
    2134:	e77f      	b.n	2036 <STACK_SIZE+0x36>
			if (config->differential_mode &&
    2136:	7cf2      	ldrb	r2, [r6, #19]
    2138:	2a00      	cmp	r2, #0
    213a:	d00f      	beq.n	215c <STACK_SIZE+0x15c>
					(config->window.window_lower_value > 2047 ||
    213c:	69f2      	ldr	r2, [r6, #28]
    213e:	2180      	movs	r1, #128	; 0x80
    2140:	0109      	lsls	r1, r1, #4
    2142:	468c      	mov	ip, r1
    2144:	4462      	add	r2, ip
			if (config->differential_mode &&
    2146:	492a      	ldr	r1, [pc, #168]	; (21f0 <STACK_SIZE+0x1f0>)
				return STATUS_ERR_INVALID_ARG;
    2148:	2017      	movs	r0, #23
			if (config->differential_mode &&
    214a:	428a      	cmp	r2, r1
    214c:	d900      	bls.n	2150 <STACK_SIZE+0x150>
    214e:	e654      	b.n	1dfa <adc_init+0x26>
					config->window.window_lower_value < -2048 ||
    2150:	6a32      	ldr	r2, [r6, #32]
    2152:	4462      	add	r2, ip
    2154:	4926      	ldr	r1, [pc, #152]	; (21f0 <STACK_SIZE+0x1f0>)
    2156:	428a      	cmp	r2, r1
    2158:	d900      	bls.n	215c <STACK_SIZE+0x15c>
    215a:	e64e      	b.n	1dfa <adc_init+0x26>
			} else if (config->window.window_lower_value > 4095 ||
    215c:	4a24      	ldr	r2, [pc, #144]	; (21f0 <STACK_SIZE+0x1f0>)
				return STATUS_ERR_INVALID_ARG;
    215e:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
    2160:	69f1      	ldr	r1, [r6, #28]
    2162:	4291      	cmp	r1, r2
    2164:	dd00      	ble.n	2168 <STACK_SIZE+0x168>
    2166:	e648      	b.n	1dfa <adc_init+0x26>
    2168:	6a31      	ldr	r1, [r6, #32]
    216a:	4291      	cmp	r1, r2
    216c:	dd00      	ble.n	2170 <STACK_SIZE+0x170>
    216e:	e644      	b.n	1dfa <adc_init+0x26>
    2170:	e761      	b.n	2036 <STACK_SIZE+0x36>
			if (config->differential_mode &&
    2172:	7cf2      	ldrb	r2, [r6, #19]
    2174:	2a00      	cmp	r2, #0
    2176:	d00f      	beq.n	2198 <STACK_SIZE+0x198>
					(config->window.window_lower_value > 511 ||
    2178:	69f2      	ldr	r2, [r6, #28]
    217a:	2180      	movs	r1, #128	; 0x80
    217c:	0089      	lsls	r1, r1, #2
    217e:	468c      	mov	ip, r1
    2180:	4462      	add	r2, ip
			if (config->differential_mode &&
    2182:	491c      	ldr	r1, [pc, #112]	; (21f4 <STACK_SIZE+0x1f4>)
				return STATUS_ERR_INVALID_ARG;
    2184:	2017      	movs	r0, #23
			if (config->differential_mode &&
    2186:	428a      	cmp	r2, r1
    2188:	d900      	bls.n	218c <STACK_SIZE+0x18c>
    218a:	e636      	b.n	1dfa <adc_init+0x26>
					config->window.window_lower_value < -512 ||
    218c:	6a32      	ldr	r2, [r6, #32]
    218e:	4462      	add	r2, ip
    2190:	4918      	ldr	r1, [pc, #96]	; (21f4 <STACK_SIZE+0x1f4>)
    2192:	428a      	cmp	r2, r1
    2194:	d900      	bls.n	2198 <STACK_SIZE+0x198>
    2196:	e630      	b.n	1dfa <adc_init+0x26>
			} else if (config->window.window_lower_value > 1023 ||
    2198:	4a16      	ldr	r2, [pc, #88]	; (21f4 <STACK_SIZE+0x1f4>)
				return STATUS_ERR_INVALID_ARG;
    219a:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
    219c:	69f1      	ldr	r1, [r6, #28]
    219e:	4291      	cmp	r1, r2
    21a0:	dd00      	ble.n	21a4 <STACK_SIZE+0x1a4>
    21a2:	e62a      	b.n	1dfa <adc_init+0x26>
    21a4:	6a31      	ldr	r1, [r6, #32]
    21a6:	4291      	cmp	r1, r2
    21a8:	dd00      	ble.n	21ac <STACK_SIZE+0x1ac>
    21aa:	e626      	b.n	1dfa <adc_init+0x26>
    21ac:	e743      	b.n	2036 <STACK_SIZE+0x36>
			if (config->differential_mode &&
    21ae:	7cf2      	ldrb	r2, [r6, #19]
    21b0:	2a00      	cmp	r2, #0
    21b2:	d00f      	beq.n	21d4 <STACK_SIZE+0x1d4>
					(config->window.window_lower_value > 32767 ||
    21b4:	69f2      	ldr	r2, [r6, #28]
    21b6:	2180      	movs	r1, #128	; 0x80
    21b8:	0209      	lsls	r1, r1, #8
    21ba:	468c      	mov	ip, r1
    21bc:	4462      	add	r2, ip
			if (config->differential_mode &&
    21be:	490e      	ldr	r1, [pc, #56]	; (21f8 <STACK_SIZE+0x1f8>)
				return STATUS_ERR_INVALID_ARG;
    21c0:	2017      	movs	r0, #23
			if (config->differential_mode &&
    21c2:	428a      	cmp	r2, r1
    21c4:	d900      	bls.n	21c8 <STACK_SIZE+0x1c8>
    21c6:	e618      	b.n	1dfa <adc_init+0x26>
					config->window.window_lower_value < -32768 ||
    21c8:	6a32      	ldr	r2, [r6, #32]
    21ca:	4462      	add	r2, ip
    21cc:	490a      	ldr	r1, [pc, #40]	; (21f8 <STACK_SIZE+0x1f8>)
    21ce:	428a      	cmp	r2, r1
    21d0:	d900      	bls.n	21d4 <STACK_SIZE+0x1d4>
    21d2:	e612      	b.n	1dfa <adc_init+0x26>
			} else if (config->window.window_lower_value > 65535 ||
    21d4:	4a08      	ldr	r2, [pc, #32]	; (21f8 <STACK_SIZE+0x1f8>)
				return STATUS_ERR_INVALID_ARG;
    21d6:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
    21d8:	69f1      	ldr	r1, [r6, #28]
    21da:	4291      	cmp	r1, r2
    21dc:	dd00      	ble.n	21e0 <STACK_SIZE+0x1e0>
    21de:	e60c      	b.n	1dfa <adc_init+0x26>
    21e0:	6a31      	ldr	r1, [r6, #32]
    21e2:	4291      	cmp	r1, r2
    21e4:	dd00      	ble.n	21e8 <STACK_SIZE+0x1e8>
    21e6:	e608      	b.n	1dfa <adc_init+0x26>
    21e8:	e725      	b.n	2036 <STACK_SIZE+0x36>
		return STATUS_ERR_INVALID_ARG;
    21ea:	2017      	movs	r0, #23
    21ec:	e605      	b.n	1dfa <adc_init+0x26>
    21ee:	46c0      	nop			; (mov r8, r8)
    21f0:	00000fff 	.word	0x00000fff
    21f4:	000003ff 	.word	0x000003ff
    21f8:	0000ffff 	.word	0x0000ffff

000021fc <ADC_Handler>:
	}
}

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
    21fc:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
    21fe:	4b2f      	ldr	r3, [pc, #188]	; (22bc <ADC_Handler+0xc0>)
    2200:	681d      	ldr	r5, [r3, #0]
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
    2202:	682b      	ldr	r3, [r5, #0]
    2204:	7e1a      	ldrb	r2, [r3, #24]
    2206:	7ddc      	ldrb	r4, [r3, #23]
    2208:	4014      	ands	r4, r2
	if (flags & ADC_INTFLAG_RESRDY) {
    220a:	07e2      	lsls	r2, r4, #31
    220c:	d416      	bmi.n	223c <ADC_Handler+0x40>
	if (flags & ADC_INTFLAG_WINMON) {
    220e:	0763      	lsls	r3, r4, #29
    2210:	d508      	bpl.n	2224 <ADC_Handler+0x28>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
    2212:	2304      	movs	r3, #4
    2214:	682a      	ldr	r2, [r5, #0]
    2216:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    2218:	7eeb      	ldrb	r3, [r5, #27]
    221a:	079b      	lsls	r3, r3, #30
    221c:	d502      	bpl.n	2224 <ADC_Handler+0x28>
    221e:	7eab      	ldrb	r3, [r5, #26]
    2220:	079b      	lsls	r3, r3, #30
    2222:	d442      	bmi.n	22aa <ADC_Handler+0xae>
	if (flags & ADC_INTFLAG_OVERRUN) {
    2224:	07a3      	lsls	r3, r4, #30
    2226:	d508      	bpl.n	223a <ADC_Handler+0x3e>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    2228:	2302      	movs	r3, #2
    222a:	682a      	ldr	r2, [r5, #0]
    222c:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    222e:	7eeb      	ldrb	r3, [r5, #27]
    2230:	075b      	lsls	r3, r3, #29
    2232:	d502      	bpl.n	223a <ADC_Handler+0x3e>
    2234:	7eab      	ldrb	r3, [r5, #26]
    2236:	075b      	lsls	r3, r3, #29
    2238:	d43b      	bmi.n	22b2 <ADC_Handler+0xb6>
	_adc_interrupt_handler(0);
}
    223a:	bd70      	pop	{r4, r5, r6, pc}
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    223c:	2201      	movs	r2, #1
    223e:	761a      	strb	r2, [r3, #24]
	Adc *const adc_module = module_inst->hw;
    2240:	682a      	ldr	r2, [r5, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    2242:	7e53      	ldrb	r3, [r2, #25]
		while (adc_is_syncing(module)) {
    2244:	b25b      	sxtb	r3, r3
    2246:	2b00      	cmp	r3, #0
    2248:	dbfb      	blt.n	2242 <ADC_Handler+0x46>
		*(module->job_buffer++) = module->hw->RESULT.reg;
    224a:	6969      	ldr	r1, [r5, #20]
    224c:	1c8b      	adds	r3, r1, #2
    224e:	616b      	str	r3, [r5, #20]
    2250:	8b53      	ldrh	r3, [r2, #26]
    2252:	b29b      	uxth	r3, r3
    2254:	800b      	strh	r3, [r1, #0]
		if (--module->remaining_conversions > 0) {
    2256:	8b2b      	ldrh	r3, [r5, #24]
    2258:	3b01      	subs	r3, #1
    225a:	b29b      	uxth	r3, r3
    225c:	832b      	strh	r3, [r5, #24]
    225e:	2b00      	cmp	r3, #0
    2260:	d011      	beq.n	2286 <ADC_Handler+0x8a>
			if (module->software_trigger == true) {
    2262:	7f6b      	ldrb	r3, [r5, #29]
    2264:	2b00      	cmp	r3, #0
    2266:	d0d2      	beq.n	220e <ADC_Handler+0x12>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    2268:	682a      	ldr	r2, [r5, #0]
    226a:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    226c:	b25b      	sxtb	r3, r3
    226e:	2b00      	cmp	r3, #0
    2270:	dbfb      	blt.n	226a <ADC_Handler+0x6e>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    2272:	7b13      	ldrb	r3, [r2, #12]
    2274:	2102      	movs	r1, #2
    2276:	430b      	orrs	r3, r1
    2278:	7313      	strb	r3, [r2, #12]
	Adc *const adc_module = module_inst->hw;
    227a:	682a      	ldr	r2, [r5, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    227c:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    227e:	b25b      	sxtb	r3, r3
    2280:	2b00      	cmp	r3, #0
    2282:	dbfb      	blt.n	227c <ADC_Handler+0x80>
    2284:	e7c3      	b.n	220e <ADC_Handler+0x12>
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
    2286:	2301      	movs	r3, #1
    2288:	682a      	ldr	r2, [r5, #0]
    228a:	7593      	strb	r3, [r2, #22]
			if (module->job_status == STATUS_BUSY) {
    228c:	7f2b      	ldrb	r3, [r5, #28]
    228e:	2b05      	cmp	r3, #5
    2290:	d1bd      	bne.n	220e <ADC_Handler+0x12>
				module->job_status = STATUS_OK;
    2292:	2300      	movs	r3, #0
    2294:	772b      	strb	r3, [r5, #28]
				if ((module->enabled_callback_mask &
    2296:	7eeb      	ldrb	r3, [r5, #27]
    2298:	07db      	lsls	r3, r3, #31
    229a:	d5b8      	bpl.n	220e <ADC_Handler+0x12>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
    229c:	7eab      	ldrb	r3, [r5, #26]
    229e:	07db      	lsls	r3, r3, #31
    22a0:	d5b5      	bpl.n	220e <ADC_Handler+0x12>
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
    22a2:	0028      	movs	r0, r5
    22a4:	68ab      	ldr	r3, [r5, #8]
    22a6:	4798      	blx	r3
    22a8:	e7b1      	b.n	220e <ADC_Handler+0x12>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
    22aa:	0028      	movs	r0, r5
    22ac:	68eb      	ldr	r3, [r5, #12]
    22ae:	4798      	blx	r3
    22b0:	e7b8      	b.n	2224 <ADC_Handler+0x28>
			(module->callback[ADC_CALLBACK_ERROR])(module);
    22b2:	692b      	ldr	r3, [r5, #16]
    22b4:	0028      	movs	r0, r5
    22b6:	4798      	blx	r3
}
    22b8:	e7bf      	b.n	223a <ADC_Handler+0x3e>
    22ba:	46c0      	nop			; (mov r8, r8)
    22bc:	20000394 	.word	0x20000394

000022c0 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    22c0:	b500      	push	{lr}
    22c2:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    22c4:	ab01      	add	r3, sp, #4
    22c6:	2280      	movs	r2, #128	; 0x80
    22c8:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    22ca:	780a      	ldrb	r2, [r1, #0]
    22cc:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    22ce:	784a      	ldrb	r2, [r1, #1]
    22d0:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    22d2:	788a      	ldrb	r2, [r1, #2]
    22d4:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    22d6:	0019      	movs	r1, r3
    22d8:	4b01      	ldr	r3, [pc, #4]	; (22e0 <port_pin_set_config+0x20>)
    22da:	4798      	blx	r3
}
    22dc:	b003      	add	sp, #12
    22de:	bd00      	pop	{pc}
    22e0:	0000344d 	.word	0x0000344d

000022e4 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    22e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    22e6:	46de      	mov	lr, fp
    22e8:	4657      	mov	r7, sl
    22ea:	464e      	mov	r6, r9
    22ec:	4645      	mov	r5, r8
    22ee:	b5e0      	push	{r5, r6, r7, lr}
    22f0:	b087      	sub	sp, #28
    22f2:	4680      	mov	r8, r0
    22f4:	9104      	str	r1, [sp, #16]
    22f6:	0016      	movs	r6, r2
    22f8:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    22fa:	2200      	movs	r2, #0
    22fc:	2300      	movs	r3, #0
    22fe:	2100      	movs	r1, #0
    2300:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    2302:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    2304:	2001      	movs	r0, #1
    2306:	0021      	movs	r1, r4
    2308:	9600      	str	r6, [sp, #0]
    230a:	9701      	str	r7, [sp, #4]
    230c:	465c      	mov	r4, fp
    230e:	9403      	str	r4, [sp, #12]
    2310:	4644      	mov	r4, r8
    2312:	9405      	str	r4, [sp, #20]
    2314:	e013      	b.n	233e <long_division+0x5a>
    2316:	2420      	movs	r4, #32
    2318:	1a64      	subs	r4, r4, r1
    231a:	0005      	movs	r5, r0
    231c:	40e5      	lsrs	r5, r4
    231e:	46a8      	mov	r8, r5
    2320:	e014      	b.n	234c <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    2322:	9c00      	ldr	r4, [sp, #0]
    2324:	9d01      	ldr	r5, [sp, #4]
    2326:	1b12      	subs	r2, r2, r4
    2328:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    232a:	465c      	mov	r4, fp
    232c:	464d      	mov	r5, r9
    232e:	432c      	orrs	r4, r5
    2330:	46a3      	mov	fp, r4
    2332:	9c03      	ldr	r4, [sp, #12]
    2334:	4645      	mov	r5, r8
    2336:	432c      	orrs	r4, r5
    2338:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    233a:	3901      	subs	r1, #1
    233c:	d325      	bcc.n	238a <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    233e:	2420      	movs	r4, #32
    2340:	4264      	negs	r4, r4
    2342:	190c      	adds	r4, r1, r4
    2344:	d4e7      	bmi.n	2316 <long_division+0x32>
    2346:	0005      	movs	r5, r0
    2348:	40a5      	lsls	r5, r4
    234a:	46a8      	mov	r8, r5
    234c:	0004      	movs	r4, r0
    234e:	408c      	lsls	r4, r1
    2350:	46a1      	mov	r9, r4
		r = r << 1;
    2352:	1892      	adds	r2, r2, r2
    2354:	415b      	adcs	r3, r3
    2356:	0014      	movs	r4, r2
    2358:	001d      	movs	r5, r3
		if (n & bit_shift) {
    235a:	9e05      	ldr	r6, [sp, #20]
    235c:	464f      	mov	r7, r9
    235e:	403e      	ands	r6, r7
    2360:	46b4      	mov	ip, r6
    2362:	9e04      	ldr	r6, [sp, #16]
    2364:	4647      	mov	r7, r8
    2366:	403e      	ands	r6, r7
    2368:	46b2      	mov	sl, r6
    236a:	4666      	mov	r6, ip
    236c:	4657      	mov	r7, sl
    236e:	433e      	orrs	r6, r7
    2370:	d003      	beq.n	237a <long_division+0x96>
			r |= 0x01;
    2372:	0006      	movs	r6, r0
    2374:	4326      	orrs	r6, r4
    2376:	0032      	movs	r2, r6
    2378:	002b      	movs	r3, r5
		if (r >= d) {
    237a:	9c00      	ldr	r4, [sp, #0]
    237c:	9d01      	ldr	r5, [sp, #4]
    237e:	429d      	cmp	r5, r3
    2380:	d8db      	bhi.n	233a <long_division+0x56>
    2382:	d1ce      	bne.n	2322 <long_division+0x3e>
    2384:	4294      	cmp	r4, r2
    2386:	d8d8      	bhi.n	233a <long_division+0x56>
    2388:	e7cb      	b.n	2322 <long_division+0x3e>
    238a:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    238c:	4658      	mov	r0, fp
    238e:	0019      	movs	r1, r3
    2390:	b007      	add	sp, #28
    2392:	bc3c      	pop	{r2, r3, r4, r5}
    2394:	4690      	mov	r8, r2
    2396:	4699      	mov	r9, r3
    2398:	46a2      	mov	sl, r4
    239a:	46ab      	mov	fp, r5
    239c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000239e <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    239e:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    23a0:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    23a2:	2340      	movs	r3, #64	; 0x40
    23a4:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    23a6:	4281      	cmp	r1, r0
    23a8:	d202      	bcs.n	23b0 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    23aa:	0018      	movs	r0, r3
    23ac:	bd10      	pop	{r4, pc}
		baud_calculated++;
    23ae:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    23b0:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    23b2:	1c63      	adds	r3, r4, #1
    23b4:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    23b6:	4288      	cmp	r0, r1
    23b8:	d9f9      	bls.n	23ae <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    23ba:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    23bc:	2cff      	cmp	r4, #255	; 0xff
    23be:	d8f4      	bhi.n	23aa <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    23c0:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    23c2:	2300      	movs	r3, #0
    23c4:	e7f1      	b.n	23aa <_sercom_get_sync_baud_val+0xc>
	...

000023c8 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    23c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    23ca:	b083      	sub	sp, #12
    23cc:	000f      	movs	r7, r1
    23ce:	0016      	movs	r6, r2
    23d0:	aa08      	add	r2, sp, #32
    23d2:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    23d4:	0004      	movs	r4, r0
    23d6:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    23d8:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    23da:	42bc      	cmp	r4, r7
    23dc:	d902      	bls.n	23e4 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    23de:	0010      	movs	r0, r2
    23e0:	b003      	add	sp, #12
    23e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    23e4:	2b00      	cmp	r3, #0
    23e6:	d114      	bne.n	2412 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    23e8:	0002      	movs	r2, r0
    23ea:	0008      	movs	r0, r1
    23ec:	2100      	movs	r1, #0
    23ee:	4c19      	ldr	r4, [pc, #100]	; (2454 <_sercom_get_async_baud_val+0x8c>)
    23f0:	47a0      	blx	r4
    23f2:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    23f4:	003a      	movs	r2, r7
    23f6:	2300      	movs	r3, #0
    23f8:	2000      	movs	r0, #0
    23fa:	4c17      	ldr	r4, [pc, #92]	; (2458 <_sercom_get_async_baud_val+0x90>)
    23fc:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    23fe:	2200      	movs	r2, #0
    2400:	2301      	movs	r3, #1
    2402:	1a12      	subs	r2, r2, r0
    2404:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    2406:	0c12      	lsrs	r2, r2, #16
    2408:	041b      	lsls	r3, r3, #16
    240a:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    240c:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    240e:	2200      	movs	r2, #0
    2410:	e7e5      	b.n	23de <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    2412:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    2414:	2b01      	cmp	r3, #1
    2416:	d1f9      	bne.n	240c <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    2418:	000a      	movs	r2, r1
    241a:	2300      	movs	r3, #0
    241c:	2100      	movs	r1, #0
    241e:	4c0d      	ldr	r4, [pc, #52]	; (2454 <_sercom_get_async_baud_val+0x8c>)
    2420:	47a0      	blx	r4
    2422:	0002      	movs	r2, r0
    2424:	000b      	movs	r3, r1
    2426:	9200      	str	r2, [sp, #0]
    2428:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    242a:	0038      	movs	r0, r7
    242c:	2100      	movs	r1, #0
    242e:	4c0a      	ldr	r4, [pc, #40]	; (2458 <_sercom_get_async_baud_val+0x90>)
    2430:	47a0      	blx	r4
    2432:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    2434:	2380      	movs	r3, #128	; 0x80
    2436:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    2438:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    243a:	4298      	cmp	r0, r3
    243c:	d8cf      	bhi.n	23de <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    243e:	0f79      	lsrs	r1, r7, #29
    2440:	00f8      	lsls	r0, r7, #3
    2442:	9a00      	ldr	r2, [sp, #0]
    2444:	9b01      	ldr	r3, [sp, #4]
    2446:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    2448:	00ea      	lsls	r2, r5, #3
    244a:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    244c:	b2d2      	uxtb	r2, r2
    244e:	0352      	lsls	r2, r2, #13
    2450:	432a      	orrs	r2, r5
    2452:	e7db      	b.n	240c <_sercom_get_async_baud_val+0x44>
    2454:	00004da9 	.word	0x00004da9
    2458:	000022e5 	.word	0x000022e5

0000245c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    245c:	b510      	push	{r4, lr}
    245e:	b082      	sub	sp, #8
    2460:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    2462:	4b0e      	ldr	r3, [pc, #56]	; (249c <sercom_set_gclk_generator+0x40>)
    2464:	781b      	ldrb	r3, [r3, #0]
    2466:	2b00      	cmp	r3, #0
    2468:	d007      	beq.n	247a <sercom_set_gclk_generator+0x1e>
    246a:	2900      	cmp	r1, #0
    246c:	d105      	bne.n	247a <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    246e:	4b0b      	ldr	r3, [pc, #44]	; (249c <sercom_set_gclk_generator+0x40>)
    2470:	785b      	ldrb	r3, [r3, #1]
    2472:	4283      	cmp	r3, r0
    2474:	d010      	beq.n	2498 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    2476:	201d      	movs	r0, #29
    2478:	e00c      	b.n	2494 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    247a:	a901      	add	r1, sp, #4
    247c:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    247e:	2013      	movs	r0, #19
    2480:	4b07      	ldr	r3, [pc, #28]	; (24a0 <sercom_set_gclk_generator+0x44>)
    2482:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    2484:	2013      	movs	r0, #19
    2486:	4b07      	ldr	r3, [pc, #28]	; (24a4 <sercom_set_gclk_generator+0x48>)
    2488:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    248a:	4b04      	ldr	r3, [pc, #16]	; (249c <sercom_set_gclk_generator+0x40>)
    248c:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    248e:	2201      	movs	r2, #1
    2490:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    2492:	2000      	movs	r0, #0
}
    2494:	b002      	add	sp, #8
    2496:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    2498:	2000      	movs	r0, #0
    249a:	e7fb      	b.n	2494 <sercom_set_gclk_generator+0x38>
    249c:	200002b4 	.word	0x200002b4
    24a0:	00003355 	.word	0x00003355
    24a4:	000032c9 	.word	0x000032c9

000024a8 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    24a8:	4b40      	ldr	r3, [pc, #256]	; (25ac <_sercom_get_default_pad+0x104>)
    24aa:	4298      	cmp	r0, r3
    24ac:	d031      	beq.n	2512 <_sercom_get_default_pad+0x6a>
    24ae:	d90a      	bls.n	24c6 <_sercom_get_default_pad+0x1e>
    24b0:	4b3f      	ldr	r3, [pc, #252]	; (25b0 <_sercom_get_default_pad+0x108>)
    24b2:	4298      	cmp	r0, r3
    24b4:	d04d      	beq.n	2552 <_sercom_get_default_pad+0xaa>
    24b6:	4b3f      	ldr	r3, [pc, #252]	; (25b4 <_sercom_get_default_pad+0x10c>)
    24b8:	4298      	cmp	r0, r3
    24ba:	d05a      	beq.n	2572 <_sercom_get_default_pad+0xca>
    24bc:	4b3e      	ldr	r3, [pc, #248]	; (25b8 <_sercom_get_default_pad+0x110>)
    24be:	4298      	cmp	r0, r3
    24c0:	d037      	beq.n	2532 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    24c2:	2000      	movs	r0, #0
}
    24c4:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    24c6:	4b3d      	ldr	r3, [pc, #244]	; (25bc <_sercom_get_default_pad+0x114>)
    24c8:	4298      	cmp	r0, r3
    24ca:	d00c      	beq.n	24e6 <_sercom_get_default_pad+0x3e>
    24cc:	4b3c      	ldr	r3, [pc, #240]	; (25c0 <_sercom_get_default_pad+0x118>)
    24ce:	4298      	cmp	r0, r3
    24d0:	d1f7      	bne.n	24c2 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    24d2:	2901      	cmp	r1, #1
    24d4:	d017      	beq.n	2506 <_sercom_get_default_pad+0x5e>
    24d6:	2900      	cmp	r1, #0
    24d8:	d05d      	beq.n	2596 <_sercom_get_default_pad+0xee>
    24da:	2902      	cmp	r1, #2
    24dc:	d015      	beq.n	250a <_sercom_get_default_pad+0x62>
    24de:	2903      	cmp	r1, #3
    24e0:	d015      	beq.n	250e <_sercom_get_default_pad+0x66>
	return 0;
    24e2:	2000      	movs	r0, #0
    24e4:	e7ee      	b.n	24c4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    24e6:	2901      	cmp	r1, #1
    24e8:	d007      	beq.n	24fa <_sercom_get_default_pad+0x52>
    24ea:	2900      	cmp	r1, #0
    24ec:	d051      	beq.n	2592 <_sercom_get_default_pad+0xea>
    24ee:	2902      	cmp	r1, #2
    24f0:	d005      	beq.n	24fe <_sercom_get_default_pad+0x56>
    24f2:	2903      	cmp	r1, #3
    24f4:	d005      	beq.n	2502 <_sercom_get_default_pad+0x5a>
	return 0;
    24f6:	2000      	movs	r0, #0
    24f8:	e7e4      	b.n	24c4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    24fa:	4832      	ldr	r0, [pc, #200]	; (25c4 <_sercom_get_default_pad+0x11c>)
    24fc:	e7e2      	b.n	24c4 <_sercom_get_default_pad+0x1c>
    24fe:	4832      	ldr	r0, [pc, #200]	; (25c8 <_sercom_get_default_pad+0x120>)
    2500:	e7e0      	b.n	24c4 <_sercom_get_default_pad+0x1c>
    2502:	4832      	ldr	r0, [pc, #200]	; (25cc <_sercom_get_default_pad+0x124>)
    2504:	e7de      	b.n	24c4 <_sercom_get_default_pad+0x1c>
    2506:	4832      	ldr	r0, [pc, #200]	; (25d0 <_sercom_get_default_pad+0x128>)
    2508:	e7dc      	b.n	24c4 <_sercom_get_default_pad+0x1c>
    250a:	4832      	ldr	r0, [pc, #200]	; (25d4 <_sercom_get_default_pad+0x12c>)
    250c:	e7da      	b.n	24c4 <_sercom_get_default_pad+0x1c>
    250e:	4832      	ldr	r0, [pc, #200]	; (25d8 <_sercom_get_default_pad+0x130>)
    2510:	e7d8      	b.n	24c4 <_sercom_get_default_pad+0x1c>
    2512:	2901      	cmp	r1, #1
    2514:	d007      	beq.n	2526 <_sercom_get_default_pad+0x7e>
    2516:	2900      	cmp	r1, #0
    2518:	d03f      	beq.n	259a <_sercom_get_default_pad+0xf2>
    251a:	2902      	cmp	r1, #2
    251c:	d005      	beq.n	252a <_sercom_get_default_pad+0x82>
    251e:	2903      	cmp	r1, #3
    2520:	d005      	beq.n	252e <_sercom_get_default_pad+0x86>
	return 0;
    2522:	2000      	movs	r0, #0
    2524:	e7ce      	b.n	24c4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2526:	482d      	ldr	r0, [pc, #180]	; (25dc <_sercom_get_default_pad+0x134>)
    2528:	e7cc      	b.n	24c4 <_sercom_get_default_pad+0x1c>
    252a:	482d      	ldr	r0, [pc, #180]	; (25e0 <_sercom_get_default_pad+0x138>)
    252c:	e7ca      	b.n	24c4 <_sercom_get_default_pad+0x1c>
    252e:	482d      	ldr	r0, [pc, #180]	; (25e4 <_sercom_get_default_pad+0x13c>)
    2530:	e7c8      	b.n	24c4 <_sercom_get_default_pad+0x1c>
    2532:	2901      	cmp	r1, #1
    2534:	d007      	beq.n	2546 <_sercom_get_default_pad+0x9e>
    2536:	2900      	cmp	r1, #0
    2538:	d031      	beq.n	259e <_sercom_get_default_pad+0xf6>
    253a:	2902      	cmp	r1, #2
    253c:	d005      	beq.n	254a <_sercom_get_default_pad+0xa2>
    253e:	2903      	cmp	r1, #3
    2540:	d005      	beq.n	254e <_sercom_get_default_pad+0xa6>
	return 0;
    2542:	2000      	movs	r0, #0
    2544:	e7be      	b.n	24c4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2546:	4828      	ldr	r0, [pc, #160]	; (25e8 <_sercom_get_default_pad+0x140>)
    2548:	e7bc      	b.n	24c4 <_sercom_get_default_pad+0x1c>
    254a:	4828      	ldr	r0, [pc, #160]	; (25ec <_sercom_get_default_pad+0x144>)
    254c:	e7ba      	b.n	24c4 <_sercom_get_default_pad+0x1c>
    254e:	4828      	ldr	r0, [pc, #160]	; (25f0 <_sercom_get_default_pad+0x148>)
    2550:	e7b8      	b.n	24c4 <_sercom_get_default_pad+0x1c>
    2552:	2901      	cmp	r1, #1
    2554:	d007      	beq.n	2566 <_sercom_get_default_pad+0xbe>
    2556:	2900      	cmp	r1, #0
    2558:	d023      	beq.n	25a2 <_sercom_get_default_pad+0xfa>
    255a:	2902      	cmp	r1, #2
    255c:	d005      	beq.n	256a <_sercom_get_default_pad+0xc2>
    255e:	2903      	cmp	r1, #3
    2560:	d005      	beq.n	256e <_sercom_get_default_pad+0xc6>
	return 0;
    2562:	2000      	movs	r0, #0
    2564:	e7ae      	b.n	24c4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2566:	4823      	ldr	r0, [pc, #140]	; (25f4 <_sercom_get_default_pad+0x14c>)
    2568:	e7ac      	b.n	24c4 <_sercom_get_default_pad+0x1c>
    256a:	4823      	ldr	r0, [pc, #140]	; (25f8 <_sercom_get_default_pad+0x150>)
    256c:	e7aa      	b.n	24c4 <_sercom_get_default_pad+0x1c>
    256e:	4823      	ldr	r0, [pc, #140]	; (25fc <_sercom_get_default_pad+0x154>)
    2570:	e7a8      	b.n	24c4 <_sercom_get_default_pad+0x1c>
    2572:	2901      	cmp	r1, #1
    2574:	d007      	beq.n	2586 <_sercom_get_default_pad+0xde>
    2576:	2900      	cmp	r1, #0
    2578:	d015      	beq.n	25a6 <_sercom_get_default_pad+0xfe>
    257a:	2902      	cmp	r1, #2
    257c:	d005      	beq.n	258a <_sercom_get_default_pad+0xe2>
    257e:	2903      	cmp	r1, #3
    2580:	d005      	beq.n	258e <_sercom_get_default_pad+0xe6>
	return 0;
    2582:	2000      	movs	r0, #0
    2584:	e79e      	b.n	24c4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2586:	481e      	ldr	r0, [pc, #120]	; (2600 <_sercom_get_default_pad+0x158>)
    2588:	e79c      	b.n	24c4 <_sercom_get_default_pad+0x1c>
    258a:	481e      	ldr	r0, [pc, #120]	; (2604 <_sercom_get_default_pad+0x15c>)
    258c:	e79a      	b.n	24c4 <_sercom_get_default_pad+0x1c>
    258e:	481e      	ldr	r0, [pc, #120]	; (2608 <_sercom_get_default_pad+0x160>)
    2590:	e798      	b.n	24c4 <_sercom_get_default_pad+0x1c>
    2592:	481e      	ldr	r0, [pc, #120]	; (260c <_sercom_get_default_pad+0x164>)
    2594:	e796      	b.n	24c4 <_sercom_get_default_pad+0x1c>
    2596:	2003      	movs	r0, #3
    2598:	e794      	b.n	24c4 <_sercom_get_default_pad+0x1c>
    259a:	481d      	ldr	r0, [pc, #116]	; (2610 <_sercom_get_default_pad+0x168>)
    259c:	e792      	b.n	24c4 <_sercom_get_default_pad+0x1c>
    259e:	481d      	ldr	r0, [pc, #116]	; (2614 <_sercom_get_default_pad+0x16c>)
    25a0:	e790      	b.n	24c4 <_sercom_get_default_pad+0x1c>
    25a2:	481d      	ldr	r0, [pc, #116]	; (2618 <_sercom_get_default_pad+0x170>)
    25a4:	e78e      	b.n	24c4 <_sercom_get_default_pad+0x1c>
    25a6:	481d      	ldr	r0, [pc, #116]	; (261c <_sercom_get_default_pad+0x174>)
    25a8:	e78c      	b.n	24c4 <_sercom_get_default_pad+0x1c>
    25aa:	46c0      	nop			; (mov r8, r8)
    25ac:	42001000 	.word	0x42001000
    25b0:	42001800 	.word	0x42001800
    25b4:	42001c00 	.word	0x42001c00
    25b8:	42001400 	.word	0x42001400
    25bc:	42000800 	.word	0x42000800
    25c0:	42000c00 	.word	0x42000c00
    25c4:	00050003 	.word	0x00050003
    25c8:	00060003 	.word	0x00060003
    25cc:	00070003 	.word	0x00070003
    25d0:	00010003 	.word	0x00010003
    25d4:	001e0003 	.word	0x001e0003
    25d8:	001f0003 	.word	0x001f0003
    25dc:	00090003 	.word	0x00090003
    25e0:	000a0003 	.word	0x000a0003
    25e4:	000b0003 	.word	0x000b0003
    25e8:	00110003 	.word	0x00110003
    25ec:	00120003 	.word	0x00120003
    25f0:	00130003 	.word	0x00130003
    25f4:	000d0003 	.word	0x000d0003
    25f8:	000e0003 	.word	0x000e0003
    25fc:	000f0003 	.word	0x000f0003
    2600:	00170003 	.word	0x00170003
    2604:	00180003 	.word	0x00180003
    2608:	00190003 	.word	0x00190003
    260c:	00040003 	.word	0x00040003
    2610:	00080003 	.word	0x00080003
    2614:	00100003 	.word	0x00100003
    2618:	000c0003 	.word	0x000c0003
    261c:	00160003 	.word	0x00160003

00002620 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    2620:	b530      	push	{r4, r5, lr}
    2622:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    2624:	4b0b      	ldr	r3, [pc, #44]	; (2654 <_sercom_get_sercom_inst_index+0x34>)
    2626:	466a      	mov	r2, sp
    2628:	cb32      	ldmia	r3!, {r1, r4, r5}
    262a:	c232      	stmia	r2!, {r1, r4, r5}
    262c:	cb32      	ldmia	r3!, {r1, r4, r5}
    262e:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    2630:	9b00      	ldr	r3, [sp, #0]
    2632:	4283      	cmp	r3, r0
    2634:	d00b      	beq.n	264e <_sercom_get_sercom_inst_index+0x2e>
    2636:	2301      	movs	r3, #1
    2638:	009a      	lsls	r2, r3, #2
    263a:	4669      	mov	r1, sp
    263c:	5852      	ldr	r2, [r2, r1]
    263e:	4282      	cmp	r2, r0
    2640:	d006      	beq.n	2650 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2642:	3301      	adds	r3, #1
    2644:	2b06      	cmp	r3, #6
    2646:	d1f7      	bne.n	2638 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    2648:	2000      	movs	r0, #0
}
    264a:	b007      	add	sp, #28
    264c:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    264e:	2300      	movs	r3, #0
			return i;
    2650:	b2d8      	uxtb	r0, r3
    2652:	e7fa      	b.n	264a <_sercom_get_sercom_inst_index+0x2a>
    2654:	00006ad8 	.word	0x00006ad8

00002658 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    2658:	4770      	bx	lr
	...

0000265c <_sercom_set_handler>:


void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    265c:	b5f0      	push	{r4, r5, r6, r7, lr}
	// Initialize handlers with default handler and device instances with 0 
	if (_handler_table_initialized == false) {
    265e:	4b0a      	ldr	r3, [pc, #40]	; (2688 <_sercom_set_handler+0x2c>)
    2660:	781b      	ldrb	r3, [r3, #0]
    2662:	2b00      	cmp	r3, #0
    2664:	d10c      	bne.n	2680 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    2666:	4f09      	ldr	r7, [pc, #36]	; (268c <_sercom_set_handler+0x30>)
    2668:	4e09      	ldr	r6, [pc, #36]	; (2690 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    266a:	4d0a      	ldr	r5, [pc, #40]	; (2694 <_sercom_set_handler+0x38>)
    266c:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    266e:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    2670:	195a      	adds	r2, r3, r5
    2672:	6014      	str	r4, [r2, #0]
    2674:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2676:	2b18      	cmp	r3, #24
    2678:	d1f9      	bne.n	266e <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    267a:	2201      	movs	r2, #1
    267c:	4b02      	ldr	r3, [pc, #8]	; (2688 <_sercom_set_handler+0x2c>)
    267e:	701a      	strb	r2, [r3, #0]
	}

	// Save interrupt handler 
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    2680:	0080      	lsls	r0, r0, #2
    2682:	4b02      	ldr	r3, [pc, #8]	; (268c <_sercom_set_handler+0x30>)
    2684:	50c1      	str	r1, [r0, r3]
}
    2686:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2688:	200002b6 	.word	0x200002b6
    268c:	200002b8 	.word	0x200002b8
    2690:	00002659 	.word	0x00002659
    2694:	20000398 	.word	0x20000398

00002698 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    2698:	b500      	push	{lr}
    269a:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    269c:	2309      	movs	r3, #9
    269e:	466a      	mov	r2, sp
    26a0:	7013      	strb	r3, [r2, #0]
    26a2:	3301      	adds	r3, #1
    26a4:	7053      	strb	r3, [r2, #1]
    26a6:	3301      	adds	r3, #1
    26a8:	7093      	strb	r3, [r2, #2]
    26aa:	3301      	adds	r3, #1
    26ac:	70d3      	strb	r3, [r2, #3]
    26ae:	3301      	adds	r3, #1
    26b0:	7113      	strb	r3, [r2, #4]
    26b2:	3301      	adds	r3, #1
    26b4:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    26b6:	4b03      	ldr	r3, [pc, #12]	; (26c4 <_sercom_get_interrupt_vector+0x2c>)
    26b8:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    26ba:	466b      	mov	r3, sp
    26bc:	5618      	ldrsb	r0, [r3, r0]
}
    26be:	b003      	add	sp, #12
    26c0:	bd00      	pop	{pc}
    26c2:	46c0      	nop			; (mov r8, r8)
    26c4:	00002621 	.word	0x00002621

000026c8 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    26c8:	b510      	push	{r4, lr}
    26ca:	4b02      	ldr	r3, [pc, #8]	; (26d4 <SERCOM0_Handler+0xc>)
    26cc:	681b      	ldr	r3, [r3, #0]
    26ce:	2000      	movs	r0, #0
    26d0:	4798      	blx	r3
    26d2:	bd10      	pop	{r4, pc}
    26d4:	200002b8 	.word	0x200002b8

000026d8 <SERCOM1_Handler>:
    26d8:	b510      	push	{r4, lr}
    26da:	4b02      	ldr	r3, [pc, #8]	; (26e4 <SERCOM1_Handler+0xc>)
    26dc:	685b      	ldr	r3, [r3, #4]
    26de:	2001      	movs	r0, #1
    26e0:	4798      	blx	r3
    26e2:	bd10      	pop	{r4, pc}
    26e4:	200002b8 	.word	0x200002b8

000026e8 <SERCOM2_Handler>:
    26e8:	b510      	push	{r4, lr}
    26ea:	4b02      	ldr	r3, [pc, #8]	; (26f4 <SERCOM2_Handler+0xc>)
    26ec:	689b      	ldr	r3, [r3, #8]
    26ee:	2002      	movs	r0, #2
    26f0:	4798      	blx	r3
    26f2:	bd10      	pop	{r4, pc}
    26f4:	200002b8 	.word	0x200002b8

000026f8 <SERCOM3_Handler>:
    26f8:	b510      	push	{r4, lr}
    26fa:	4b02      	ldr	r3, [pc, #8]	; (2704 <SERCOM3_Handler+0xc>)
    26fc:	68db      	ldr	r3, [r3, #12]
    26fe:	2003      	movs	r0, #3
    2700:	4798      	blx	r3
    2702:	bd10      	pop	{r4, pc}
    2704:	200002b8 	.word	0x200002b8

00002708 <SERCOM4_Handler>:
    2708:	b510      	push	{r4, lr}
    270a:	4b02      	ldr	r3, [pc, #8]	; (2714 <SERCOM4_Handler+0xc>)
    270c:	691b      	ldr	r3, [r3, #16]
    270e:	2004      	movs	r0, #4
    2710:	4798      	blx	r3
    2712:	bd10      	pop	{r4, pc}
    2714:	200002b8 	.word	0x200002b8

00002718 <SERCOM5_Handler>:
    2718:	b510      	push	{r4, lr}
    271a:	4b02      	ldr	r3, [pc, #8]	; (2724 <SERCOM5_Handler+0xc>)
    271c:	695b      	ldr	r3, [r3, #20]
    271e:	2005      	movs	r0, #5
    2720:	4798      	blx	r3
    2722:	bd10      	pop	{r4, pc}
    2724:	200002b8 	.word	0x200002b8

00002728 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    2728:	b5f0      	push	{r4, r5, r6, r7, lr}
    272a:	46de      	mov	lr, fp
    272c:	4657      	mov	r7, sl
    272e:	464e      	mov	r6, r9
    2730:	4645      	mov	r5, r8
    2732:	b5e0      	push	{r5, r6, r7, lr}
    2734:	b091      	sub	sp, #68	; 0x44
    2736:	0005      	movs	r5, r0
    2738:	000c      	movs	r4, r1
    273a:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    273c:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    273e:	0008      	movs	r0, r1
    2740:	4bba      	ldr	r3, [pc, #744]	; (2a2c <usart_init+0x304>)
    2742:	4798      	blx	r3
    2744:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    2746:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    2748:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    274a:	07db      	lsls	r3, r3, #31
    274c:	d506      	bpl.n	275c <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    274e:	b011      	add	sp, #68	; 0x44
    2750:	bc3c      	pop	{r2, r3, r4, r5}
    2752:	4690      	mov	r8, r2
    2754:	4699      	mov	r9, r3
    2756:	46a2      	mov	sl, r4
    2758:	46ab      	mov	fp, r5
    275a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    275c:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    275e:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    2760:	079b      	lsls	r3, r3, #30
    2762:	d4f4      	bmi.n	274e <usart_init+0x26>
    2764:	49b2      	ldr	r1, [pc, #712]	; (2a30 <usart_init+0x308>)
    2766:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    2768:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    276a:	2301      	movs	r3, #1
    276c:	40bb      	lsls	r3, r7
    276e:	4303      	orrs	r3, r0
    2770:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    2772:	a90f      	add	r1, sp, #60	; 0x3c
    2774:	272d      	movs	r7, #45	; 0x2d
    2776:	5df3      	ldrb	r3, [r6, r7]
    2778:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    277a:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    277c:	b2d3      	uxtb	r3, r2
    277e:	9302      	str	r3, [sp, #8]
    2780:	0018      	movs	r0, r3
    2782:	4bac      	ldr	r3, [pc, #688]	; (2a34 <usart_init+0x30c>)
    2784:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    2786:	9802      	ldr	r0, [sp, #8]
    2788:	4bab      	ldr	r3, [pc, #684]	; (2a38 <usart_init+0x310>)
    278a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    278c:	5df0      	ldrb	r0, [r6, r7]
    278e:	2100      	movs	r1, #0
    2790:	4baa      	ldr	r3, [pc, #680]	; (2a3c <usart_init+0x314>)
    2792:	4798      	blx	r3
	module->character_size = config->character_size;
    2794:	7af3      	ldrb	r3, [r6, #11]
    2796:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    2798:	2324      	movs	r3, #36	; 0x24
    279a:	5cf3      	ldrb	r3, [r6, r3]
    279c:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    279e:	2325      	movs	r3, #37	; 0x25
    27a0:	5cf3      	ldrb	r3, [r6, r3]
    27a2:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    27a4:	7ef3      	ldrb	r3, [r6, #27]
    27a6:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    27a8:	7f33      	ldrb	r3, [r6, #28]
    27aa:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    27ac:	682b      	ldr	r3, [r5, #0]
    27ae:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    27b0:	0018      	movs	r0, r3
    27b2:	4b9e      	ldr	r3, [pc, #632]	; (2a2c <usart_init+0x304>)
    27b4:	4798      	blx	r3
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    27b6:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    27b8:	2200      	movs	r2, #0
    27ba:	230e      	movs	r3, #14
    27bc:	a906      	add	r1, sp, #24
    27be:	468c      	mov	ip, r1
    27c0:	4463      	add	r3, ip
    27c2:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    27c4:	8a32      	ldrh	r2, [r6, #16]
    27c6:	9202      	str	r2, [sp, #8]
    27c8:	2380      	movs	r3, #128	; 0x80
    27ca:	01db      	lsls	r3, r3, #7
    27cc:	429a      	cmp	r2, r3
    27ce:	d100      	bne.n	27d2 <usart_init+0xaa>
    27d0:	e09a      	b.n	2908 <usart_init+0x1e0>
    27d2:	d90f      	bls.n	27f4 <usart_init+0xcc>
    27d4:	23c0      	movs	r3, #192	; 0xc0
    27d6:	01db      	lsls	r3, r3, #7
    27d8:	9a02      	ldr	r2, [sp, #8]
    27da:	429a      	cmp	r2, r3
    27dc:	d100      	bne.n	27e0 <usart_init+0xb8>
    27de:	e08e      	b.n	28fe <usart_init+0x1d6>
    27e0:	2380      	movs	r3, #128	; 0x80
    27e2:	021b      	lsls	r3, r3, #8
    27e4:	429a      	cmp	r2, r3
    27e6:	d000      	beq.n	27ea <usart_init+0xc2>
    27e8:	e11b      	b.n	2a22 <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    27ea:	2303      	movs	r3, #3
    27ec:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    27ee:	2300      	movs	r3, #0
    27f0:	9307      	str	r3, [sp, #28]
    27f2:	e008      	b.n	2806 <usart_init+0xde>
	switch (config->sample_rate) {
    27f4:	2380      	movs	r3, #128	; 0x80
    27f6:	019b      	lsls	r3, r3, #6
    27f8:	429a      	cmp	r2, r3
    27fa:	d000      	beq.n	27fe <usart_init+0xd6>
    27fc:	e111      	b.n	2a22 <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    27fe:	2310      	movs	r3, #16
    2800:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    2802:	3b0f      	subs	r3, #15
    2804:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    2806:	6833      	ldr	r3, [r6, #0]
    2808:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    280a:	68f3      	ldr	r3, [r6, #12]
    280c:	469b      	mov	fp, r3
		config->sample_adjustment |
    280e:	6973      	ldr	r3, [r6, #20]
    2810:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2812:	7e33      	ldrb	r3, [r6, #24]
    2814:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2816:	2326      	movs	r3, #38	; 0x26
    2818:	5cf3      	ldrb	r3, [r6, r3]
    281a:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    281c:	6873      	ldr	r3, [r6, #4]
    281e:	4699      	mov	r9, r3
	switch (transfer_mode)
    2820:	2b00      	cmp	r3, #0
    2822:	d100      	bne.n	2826 <usart_init+0xfe>
    2824:	e09c      	b.n	2960 <usart_init+0x238>
    2826:	2380      	movs	r3, #128	; 0x80
    2828:	055b      	lsls	r3, r3, #21
    282a:	4599      	cmp	r9, r3
    282c:	d100      	bne.n	2830 <usart_init+0x108>
    282e:	e080      	b.n	2932 <usart_init+0x20a>
	if(config->encoding_format_enable) {
    2830:	7e73      	ldrb	r3, [r6, #25]
    2832:	2b00      	cmp	r3, #0
    2834:	d002      	beq.n	283c <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    2836:	7eb3      	ldrb	r3, [r6, #26]
    2838:	4642      	mov	r2, r8
    283a:	7393      	strb	r3, [r2, #14]
	usart_hw->BAUD.reg = baud;
    283c:	230e      	movs	r3, #14
    283e:	aa06      	add	r2, sp, #24
    2840:	4694      	mov	ip, r2
    2842:	4463      	add	r3, ip
    2844:	881b      	ldrh	r3, [r3, #0]
    2846:	4642      	mov	r2, r8
    2848:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    284a:	9b05      	ldr	r3, [sp, #20]
    284c:	465a      	mov	r2, fp
    284e:	4313      	orrs	r3, r2
    2850:	9a03      	ldr	r2, [sp, #12]
    2852:	4313      	orrs	r3, r2
    2854:	464a      	mov	r2, r9
    2856:	4313      	orrs	r3, r2
    2858:	9f02      	ldr	r7, [sp, #8]
    285a:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    285c:	9b04      	ldr	r3, [sp, #16]
    285e:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    2860:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2862:	4653      	mov	r3, sl
    2864:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    2866:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    2868:	2327      	movs	r3, #39	; 0x27
    286a:	5cf3      	ldrb	r3, [r6, r3]
    286c:	2b00      	cmp	r3, #0
    286e:	d101      	bne.n	2874 <usart_init+0x14c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    2870:	3304      	adds	r3, #4
    2872:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    2874:	7e73      	ldrb	r3, [r6, #25]
    2876:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    2878:	7f32      	ldrb	r2, [r6, #28]
    287a:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    287c:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    287e:	7f72      	ldrb	r2, [r6, #29]
    2880:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    2882:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    2884:	2224      	movs	r2, #36	; 0x24
    2886:	5cb2      	ldrb	r2, [r6, r2]
    2888:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    288a:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    288c:	2225      	movs	r2, #37	; 0x25
    288e:	5cb2      	ldrb	r2, [r6, r2]
    2890:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    2892:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    2894:	7ab1      	ldrb	r1, [r6, #10]
    2896:	7af2      	ldrb	r2, [r6, #11]
    2898:	4311      	orrs	r1, r2
    289a:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    289c:	8933      	ldrh	r3, [r6, #8]
    289e:	2bff      	cmp	r3, #255	; 0xff
    28a0:	d100      	bne.n	28a4 <usart_init+0x17c>
    28a2:	e081      	b.n	29a8 <usart_init+0x280>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    28a4:	2280      	movs	r2, #128	; 0x80
    28a6:	0452      	lsls	r2, r2, #17
    28a8:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    28aa:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    28ac:	232c      	movs	r3, #44	; 0x2c
    28ae:	5cf3      	ldrb	r3, [r6, r3]
    28b0:	2b00      	cmp	r3, #0
    28b2:	d103      	bne.n	28bc <usart_init+0x194>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    28b4:	4b62      	ldr	r3, [pc, #392]	; (2a40 <usart_init+0x318>)
    28b6:	789b      	ldrb	r3, [r3, #2]
    28b8:	079b      	lsls	r3, r3, #30
    28ba:	d501      	bpl.n	28c0 <usart_init+0x198>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    28bc:	2380      	movs	r3, #128	; 0x80
    28be:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    28c0:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    28c2:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    28c4:	2b00      	cmp	r3, #0
    28c6:	d1fc      	bne.n	28c2 <usart_init+0x19a>
	usart_hw->CTRLB.reg = ctrlb;
    28c8:	4643      	mov	r3, r8
    28ca:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    28cc:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    28ce:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    28d0:	2b00      	cmp	r3, #0
    28d2:	d1fc      	bne.n	28ce <usart_init+0x1a6>
	usart_hw->CTRLA.reg = ctrla;
    28d4:	4643      	mov	r3, r8
    28d6:	601f      	str	r7, [r3, #0]
    28d8:	ab0e      	add	r3, sp, #56	; 0x38
    28da:	2280      	movs	r2, #128	; 0x80
    28dc:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    28de:	2200      	movs	r2, #0
    28e0:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    28e2:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    28e4:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    28e6:	6b33      	ldr	r3, [r6, #48]	; 0x30
    28e8:	930a      	str	r3, [sp, #40]	; 0x28
    28ea:	6b73      	ldr	r3, [r6, #52]	; 0x34
    28ec:	930b      	str	r3, [sp, #44]	; 0x2c
    28ee:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    28f0:	930c      	str	r3, [sp, #48]	; 0x30
    28f2:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    28f4:	9302      	str	r3, [sp, #8]
    28f6:	930d      	str	r3, [sp, #52]	; 0x34
    28f8:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    28fa:	ae0a      	add	r6, sp, #40	; 0x28
    28fc:	e063      	b.n	29c6 <usart_init+0x29e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    28fe:	2308      	movs	r3, #8
    2900:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    2902:	3b07      	subs	r3, #7
    2904:	9307      	str	r3, [sp, #28]
    2906:	e77e      	b.n	2806 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    2908:	6833      	ldr	r3, [r6, #0]
    290a:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    290c:	68f3      	ldr	r3, [r6, #12]
    290e:	469b      	mov	fp, r3
		config->sample_adjustment |
    2910:	6973      	ldr	r3, [r6, #20]
    2912:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2914:	7e33      	ldrb	r3, [r6, #24]
    2916:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2918:	2326      	movs	r3, #38	; 0x26
    291a:	5cf3      	ldrb	r3, [r6, r3]
    291c:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    291e:	6873      	ldr	r3, [r6, #4]
    2920:	4699      	mov	r9, r3
	switch (transfer_mode)
    2922:	2b00      	cmp	r3, #0
    2924:	d018      	beq.n	2958 <usart_init+0x230>
    2926:	2380      	movs	r3, #128	; 0x80
    2928:	055b      	lsls	r3, r3, #21
    292a:	4599      	cmp	r9, r3
    292c:	d001      	beq.n	2932 <usart_init+0x20a>
	enum status_code status_code = STATUS_OK;
    292e:	2000      	movs	r0, #0
    2930:	e025      	b.n	297e <usart_init+0x256>
			if (!config->use_external_clock) {
    2932:	2327      	movs	r3, #39	; 0x27
    2934:	5cf3      	ldrb	r3, [r6, r3]
    2936:	2b00      	cmp	r3, #0
    2938:	d000      	beq.n	293c <usart_init+0x214>
    293a:	e779      	b.n	2830 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    293c:	6a33      	ldr	r3, [r6, #32]
    293e:	001f      	movs	r7, r3
    2940:	b2c0      	uxtb	r0, r0
    2942:	4b40      	ldr	r3, [pc, #256]	; (2a44 <usart_init+0x31c>)
    2944:	4798      	blx	r3
    2946:	0001      	movs	r1, r0
    2948:	220e      	movs	r2, #14
    294a:	ab06      	add	r3, sp, #24
    294c:	469c      	mov	ip, r3
    294e:	4462      	add	r2, ip
    2950:	0038      	movs	r0, r7
    2952:	4b3d      	ldr	r3, [pc, #244]	; (2a48 <usart_init+0x320>)
    2954:	4798      	blx	r3
    2956:	e012      	b.n	297e <usart_init+0x256>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    2958:	2308      	movs	r3, #8
    295a:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    295c:	2300      	movs	r3, #0
    295e:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    2960:	2327      	movs	r3, #39	; 0x27
    2962:	5cf3      	ldrb	r3, [r6, r3]
    2964:	2b00      	cmp	r3, #0
    2966:	d00e      	beq.n	2986 <usart_init+0x25e>
				status_code =
    2968:	9b06      	ldr	r3, [sp, #24]
    296a:	9300      	str	r3, [sp, #0]
    296c:	9b07      	ldr	r3, [sp, #28]
    296e:	220e      	movs	r2, #14
    2970:	a906      	add	r1, sp, #24
    2972:	468c      	mov	ip, r1
    2974:	4462      	add	r2, ip
    2976:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    2978:	6a30      	ldr	r0, [r6, #32]
    297a:	4f34      	ldr	r7, [pc, #208]	; (2a4c <usart_init+0x324>)
    297c:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    297e:	2800      	cmp	r0, #0
    2980:	d000      	beq.n	2984 <usart_init+0x25c>
    2982:	e6e4      	b.n	274e <usart_init+0x26>
    2984:	e754      	b.n	2830 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    2986:	6a33      	ldr	r3, [r6, #32]
    2988:	001f      	movs	r7, r3
    298a:	b2c0      	uxtb	r0, r0
    298c:	4b2d      	ldr	r3, [pc, #180]	; (2a44 <usart_init+0x31c>)
    298e:	4798      	blx	r3
    2990:	0001      	movs	r1, r0
				status_code =
    2992:	9b06      	ldr	r3, [sp, #24]
    2994:	9300      	str	r3, [sp, #0]
    2996:	9b07      	ldr	r3, [sp, #28]
    2998:	220e      	movs	r2, #14
    299a:	a806      	add	r0, sp, #24
    299c:	4684      	mov	ip, r0
    299e:	4462      	add	r2, ip
    29a0:	0038      	movs	r0, r7
    29a2:	4f2a      	ldr	r7, [pc, #168]	; (2a4c <usart_init+0x324>)
    29a4:	47b8      	blx	r7
    29a6:	e7ea      	b.n	297e <usart_init+0x256>
		if(config->lin_slave_enable) {
    29a8:	7ef3      	ldrb	r3, [r6, #27]
    29aa:	2b00      	cmp	r3, #0
    29ac:	d100      	bne.n	29b0 <usart_init+0x288>
    29ae:	e77d      	b.n	28ac <usart_init+0x184>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    29b0:	2380      	movs	r3, #128	; 0x80
    29b2:	04db      	lsls	r3, r3, #19
    29b4:	431f      	orrs	r7, r3
    29b6:	e779      	b.n	28ac <usart_init+0x184>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    29b8:	0020      	movs	r0, r4
    29ba:	4b25      	ldr	r3, [pc, #148]	; (2a50 <usart_init+0x328>)
    29bc:	4798      	blx	r3
    29be:	e007      	b.n	29d0 <usart_init+0x2a8>
    29c0:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    29c2:	2f04      	cmp	r7, #4
    29c4:	d00d      	beq.n	29e2 <usart_init+0x2ba>
    29c6:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    29c8:	00bb      	lsls	r3, r7, #2
    29ca:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    29cc:	2800      	cmp	r0, #0
    29ce:	d0f3      	beq.n	29b8 <usart_init+0x290>
		if (current_pinmux != PINMUX_UNUSED) {
    29d0:	1c43      	adds	r3, r0, #1
    29d2:	d0f5      	beq.n	29c0 <usart_init+0x298>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    29d4:	a90e      	add	r1, sp, #56	; 0x38
    29d6:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    29d8:	0c00      	lsrs	r0, r0, #16
    29da:	b2c0      	uxtb	r0, r0
    29dc:	4b1d      	ldr	r3, [pc, #116]	; (2a54 <usart_init+0x32c>)
    29de:	4798      	blx	r3
    29e0:	e7ee      	b.n	29c0 <usart_init+0x298>
		module->callback[i]            = NULL;
    29e2:	2300      	movs	r3, #0
    29e4:	60eb      	str	r3, [r5, #12]
    29e6:	612b      	str	r3, [r5, #16]
    29e8:	616b      	str	r3, [r5, #20]
    29ea:	61ab      	str	r3, [r5, #24]
    29ec:	61eb      	str	r3, [r5, #28]
    29ee:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    29f0:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    29f2:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    29f4:	2200      	movs	r2, #0
    29f6:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    29f8:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    29fa:	3330      	adds	r3, #48	; 0x30
    29fc:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    29fe:	3301      	adds	r3, #1
    2a00:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    2a02:	3301      	adds	r3, #1
    2a04:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    2a06:	3301      	adds	r3, #1
    2a08:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    2a0a:	6828      	ldr	r0, [r5, #0]
    2a0c:	4b07      	ldr	r3, [pc, #28]	; (2a2c <usart_init+0x304>)
    2a0e:	4798      	blx	r3
    2a10:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    2a12:	4911      	ldr	r1, [pc, #68]	; (2a58 <usart_init+0x330>)
    2a14:	4b11      	ldr	r3, [pc, #68]	; (2a5c <usart_init+0x334>)
    2a16:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    2a18:	00a4      	lsls	r4, r4, #2
    2a1a:	4b11      	ldr	r3, [pc, #68]	; (2a60 <usart_init+0x338>)
    2a1c:	50e5      	str	r5, [r4, r3]
	return status_code;
    2a1e:	2000      	movs	r0, #0
    2a20:	e695      	b.n	274e <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    2a22:	2310      	movs	r3, #16
    2a24:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2a26:	2300      	movs	r3, #0
    2a28:	9307      	str	r3, [sp, #28]
    2a2a:	e6ec      	b.n	2806 <usart_init+0xde>
    2a2c:	00002621 	.word	0x00002621
    2a30:	40000400 	.word	0x40000400
    2a34:	00003355 	.word	0x00003355
    2a38:	000032c9 	.word	0x000032c9
    2a3c:	0000245d 	.word	0x0000245d
    2a40:	41002000 	.word	0x41002000
    2a44:	00003371 	.word	0x00003371
    2a48:	0000239f 	.word	0x0000239f
    2a4c:	000023c9 	.word	0x000023c9
    2a50:	000024a9 	.word	0x000024a9
    2a54:	0000344d 	.word	0x0000344d
    2a58:	00002b7d 	.word	0x00002b7d
    2a5c:	0000265d 	.word	0x0000265d
    2a60:	20000398 	.word	0x20000398

00002a64 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    2a64:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    2a66:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    2a68:	2a00      	cmp	r2, #0
    2a6a:	d101      	bne.n	2a70 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    2a6c:	0018      	movs	r0, r3
    2a6e:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    2a70:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    2a72:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    2a74:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    2a76:	2a00      	cmp	r2, #0
    2a78:	d1f8      	bne.n	2a6c <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    2a7a:	6802      	ldr	r2, [r0, #0]
	usart_hw->DATA.reg = tx_data;
    2a7c:	8511      	strh	r1, [r2, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    2a7e:	2102      	movs	r1, #2
    2a80:	7e13      	ldrb	r3, [r2, #24]
    2a82:	420b      	tst	r3, r1
    2a84:	d0fc      	beq.n	2a80 <usart_write_wait+0x1c>
	return STATUS_OK;
    2a86:	2300      	movs	r3, #0
    2a88:	e7f0      	b.n	2a6c <usart_write_wait+0x8>

00002a8a <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    2a8a:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    2a8c:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    2a8e:	2a00      	cmp	r2, #0
    2a90:	d101      	bne.n	2a96 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    2a92:	0018      	movs	r0, r3
    2a94:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    2a96:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    2a98:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    2a9a:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    2a9c:	2a00      	cmp	r2, #0
    2a9e:	d1f8      	bne.n	2a92 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    2aa0:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    2aa2:	7e10      	ldrb	r0, [r2, #24]
    2aa4:	0740      	lsls	r0, r0, #29
    2aa6:	d5f4      	bpl.n	2a92 <usart_read_wait+0x8>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2aa8:	8b53      	ldrh	r3, [r2, #26]
    2aaa:	b2db      	uxtb	r3, r3
	if (error_code) {
    2aac:	0698      	lsls	r0, r3, #26
    2aae:	d01d      	beq.n	2aec <usart_read_wait+0x62>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    2ab0:	0798      	lsls	r0, r3, #30
    2ab2:	d503      	bpl.n	2abc <usart_read_wait+0x32>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    2ab4:	2302      	movs	r3, #2
    2ab6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    2ab8:	3318      	adds	r3, #24
    2aba:	e7ea      	b.n	2a92 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2abc:	0758      	lsls	r0, r3, #29
    2abe:	d503      	bpl.n	2ac8 <usart_read_wait+0x3e>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    2ac0:	2304      	movs	r3, #4
    2ac2:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    2ac4:	331a      	adds	r3, #26
    2ac6:	e7e4      	b.n	2a92 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2ac8:	07d8      	lsls	r0, r3, #31
    2aca:	d503      	bpl.n	2ad4 <usart_read_wait+0x4a>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2acc:	2301      	movs	r3, #1
    2ace:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    2ad0:	3312      	adds	r3, #18
    2ad2:	e7de      	b.n	2a92 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    2ad4:	06d8      	lsls	r0, r3, #27
    2ad6:	d503      	bpl.n	2ae0 <usart_read_wait+0x56>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    2ad8:	2310      	movs	r3, #16
    2ada:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    2adc:	3332      	adds	r3, #50	; 0x32
    2ade:	e7d8      	b.n	2a92 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    2ae0:	069b      	lsls	r3, r3, #26
    2ae2:	d503      	bpl.n	2aec <usart_read_wait+0x62>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2ae4:	2320      	movs	r3, #32
    2ae6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    2ae8:	3321      	adds	r3, #33	; 0x21
    2aea:	e7d2      	b.n	2a92 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    2aec:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    2aee:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    2af0:	2300      	movs	r3, #0
    2af2:	e7ce      	b.n	2a92 <usart_read_wait+0x8>

00002af4 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    2af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2af6:	0004      	movs	r4, r0
    2af8:	000d      	movs	r5, r1
    2afa:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2afc:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    2afe:	4b0f      	ldr	r3, [pc, #60]	; (2b3c <_usart_read_buffer+0x48>)
    2b00:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    2b02:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    2b04:	b29b      	uxth	r3, r3
    2b06:	2b00      	cmp	r3, #0
    2b08:	d003      	beq.n	2b12 <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
    2b0a:	4b0d      	ldr	r3, [pc, #52]	; (2b40 <_usart_read_buffer+0x4c>)
    2b0c:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    2b0e:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    2b10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    2b12:	85a6      	strh	r6, [r4, #44]	; 0x2c
    2b14:	4b0a      	ldr	r3, [pc, #40]	; (2b40 <_usart_read_buffer+0x4c>)
    2b16:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    2b18:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    2b1a:	2205      	movs	r2, #5
    2b1c:	2332      	movs	r3, #50	; 0x32
    2b1e:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    2b20:	3b2e      	subs	r3, #46	; 0x2e
    2b22:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
    2b24:	7a23      	ldrb	r3, [r4, #8]
    2b26:	2b00      	cmp	r3, #0
    2b28:	d001      	beq.n	2b2e <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    2b2a:	2320      	movs	r3, #32
    2b2c:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
    2b2e:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
    2b30:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
    2b32:	2b00      	cmp	r3, #0
    2b34:	d0ec      	beq.n	2b10 <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    2b36:	2308      	movs	r3, #8
    2b38:	75bb      	strb	r3, [r7, #22]
    2b3a:	e7e9      	b.n	2b10 <_usart_read_buffer+0x1c>
    2b3c:	00001ce9 	.word	0x00001ce9
    2b40:	00001d29 	.word	0x00001d29

00002b44 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    2b44:	1c93      	adds	r3, r2, #2
    2b46:	009b      	lsls	r3, r3, #2
    2b48:	18c3      	adds	r3, r0, r3
    2b4a:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    2b4c:	2130      	movs	r1, #48	; 0x30
    2b4e:	2301      	movs	r3, #1
    2b50:	4093      	lsls	r3, r2
    2b52:	001a      	movs	r2, r3
    2b54:	5c43      	ldrb	r3, [r0, r1]
    2b56:	4313      	orrs	r3, r2
    2b58:	5443      	strb	r3, [r0, r1]
}
    2b5a:	4770      	bx	lr

00002b5c <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    2b5c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    2b5e:	2317      	movs	r3, #23
	if (length == 0) {
    2b60:	2a00      	cmp	r2, #0
    2b62:	d101      	bne.n	2b68 <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
    2b64:	0018      	movs	r0, r3
    2b66:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
    2b68:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
    2b6a:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
    2b6c:	2c00      	cmp	r4, #0
    2b6e:	d0f9      	beq.n	2b64 <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
    2b70:	4b01      	ldr	r3, [pc, #4]	; (2b78 <usart_read_buffer_job+0x1c>)
    2b72:	4798      	blx	r3
    2b74:	0003      	movs	r3, r0
    2b76:	e7f5      	b.n	2b64 <usart_read_buffer_job+0x8>
    2b78:	00002af5 	.word	0x00002af5

00002b7c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    2b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    2b7e:	0080      	lsls	r0, r0, #2
    2b80:	4b62      	ldr	r3, [pc, #392]	; (2d0c <_usart_interrupt_handler+0x190>)
    2b82:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    2b84:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2b86:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    2b88:	2b00      	cmp	r3, #0
    2b8a:	d1fc      	bne.n	2b86 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    2b8c:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    2b8e:	7da6      	ldrb	r6, [r4, #22]
    2b90:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    2b92:	2330      	movs	r3, #48	; 0x30
    2b94:	5ceb      	ldrb	r3, [r5, r3]
    2b96:	2231      	movs	r2, #49	; 0x31
    2b98:	5caf      	ldrb	r7, [r5, r2]
    2b9a:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    2b9c:	07f3      	lsls	r3, r6, #31
    2b9e:	d522      	bpl.n	2be6 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    2ba0:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    2ba2:	b29b      	uxth	r3, r3
    2ba4:	2b00      	cmp	r3, #0
    2ba6:	d01c      	beq.n	2be2 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2ba8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    2baa:	7813      	ldrb	r3, [r2, #0]
    2bac:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    2bae:	1c51      	adds	r1, r2, #1
    2bb0:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2bb2:	7969      	ldrb	r1, [r5, #5]
    2bb4:	2901      	cmp	r1, #1
    2bb6:	d00e      	beq.n	2bd6 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2bb8:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    2bba:	05db      	lsls	r3, r3, #23
    2bbc:	0ddb      	lsrs	r3, r3, #23
    2bbe:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    2bc0:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    2bc2:	3b01      	subs	r3, #1
    2bc4:	b29b      	uxth	r3, r3
    2bc6:	85eb      	strh	r3, [r5, #46]	; 0x2e
    2bc8:	2b00      	cmp	r3, #0
    2bca:	d10c      	bne.n	2be6 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2bcc:	3301      	adds	r3, #1
    2bce:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    2bd0:	3301      	adds	r3, #1
    2bd2:	75a3      	strb	r3, [r4, #22]
    2bd4:	e007      	b.n	2be6 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    2bd6:	7851      	ldrb	r1, [r2, #1]
    2bd8:	0209      	lsls	r1, r1, #8
    2bda:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    2bdc:	3202      	adds	r2, #2
    2bde:	62aa      	str	r2, [r5, #40]	; 0x28
    2be0:	e7eb      	b.n	2bba <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2be2:	2301      	movs	r3, #1
    2be4:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    2be6:	07b3      	lsls	r3, r6, #30
    2be8:	d506      	bpl.n	2bf8 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    2bea:	2302      	movs	r3, #2
    2bec:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    2bee:	2200      	movs	r2, #0
    2bf0:	3331      	adds	r3, #49	; 0x31
    2bf2:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    2bf4:	07fb      	lsls	r3, r7, #31
    2bf6:	d41a      	bmi.n	2c2e <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    2bf8:	0773      	lsls	r3, r6, #29
    2bfa:	d565      	bpl.n	2cc8 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    2bfc:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2bfe:	b29b      	uxth	r3, r3
    2c00:	2b00      	cmp	r3, #0
    2c02:	d05f      	beq.n	2cc4 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2c04:	8b63      	ldrh	r3, [r4, #26]
    2c06:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    2c08:	071a      	lsls	r2, r3, #28
    2c0a:	d414      	bmi.n	2c36 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2c0c:	223f      	movs	r2, #63	; 0x3f
    2c0e:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    2c10:	2b00      	cmp	r3, #0
    2c12:	d034      	beq.n	2c7e <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    2c14:	079a      	lsls	r2, r3, #30
    2c16:	d511      	bpl.n	2c3c <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    2c18:	221a      	movs	r2, #26
    2c1a:	2332      	movs	r3, #50	; 0x32
    2c1c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    2c1e:	3b30      	subs	r3, #48	; 0x30
    2c20:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    2c22:	077b      	lsls	r3, r7, #29
    2c24:	d550      	bpl.n	2cc8 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    2c26:	0028      	movs	r0, r5
    2c28:	696b      	ldr	r3, [r5, #20]
    2c2a:	4798      	blx	r3
    2c2c:	e04c      	b.n	2cc8 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    2c2e:	0028      	movs	r0, r5
    2c30:	68eb      	ldr	r3, [r5, #12]
    2c32:	4798      	blx	r3
    2c34:	e7e0      	b.n	2bf8 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    2c36:	2237      	movs	r2, #55	; 0x37
    2c38:	4013      	ands	r3, r2
    2c3a:	e7e9      	b.n	2c10 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2c3c:	075a      	lsls	r2, r3, #29
    2c3e:	d505      	bpl.n	2c4c <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    2c40:	221e      	movs	r2, #30
    2c42:	2332      	movs	r3, #50	; 0x32
    2c44:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    2c46:	3b2e      	subs	r3, #46	; 0x2e
    2c48:	8363      	strh	r3, [r4, #26]
    2c4a:	e7ea      	b.n	2c22 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2c4c:	07da      	lsls	r2, r3, #31
    2c4e:	d505      	bpl.n	2c5c <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    2c50:	2213      	movs	r2, #19
    2c52:	2332      	movs	r3, #50	; 0x32
    2c54:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2c56:	3b31      	subs	r3, #49	; 0x31
    2c58:	8363      	strh	r3, [r4, #26]
    2c5a:	e7e2      	b.n	2c22 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    2c5c:	06da      	lsls	r2, r3, #27
    2c5e:	d505      	bpl.n	2c6c <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    2c60:	2242      	movs	r2, #66	; 0x42
    2c62:	2332      	movs	r3, #50	; 0x32
    2c64:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    2c66:	3b22      	subs	r3, #34	; 0x22
    2c68:	8363      	strh	r3, [r4, #26]
    2c6a:	e7da      	b.n	2c22 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    2c6c:	2220      	movs	r2, #32
    2c6e:	421a      	tst	r2, r3
    2c70:	d0d7      	beq.n	2c22 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    2c72:	3221      	adds	r2, #33	; 0x21
    2c74:	2332      	movs	r3, #50	; 0x32
    2c76:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2c78:	3b12      	subs	r3, #18
    2c7a:	8363      	strh	r3, [r4, #26]
    2c7c:	e7d1      	b.n	2c22 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    2c7e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    2c80:	05db      	lsls	r3, r3, #23
    2c82:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    2c84:	b2da      	uxtb	r2, r3
    2c86:	6a69      	ldr	r1, [r5, #36]	; 0x24
    2c88:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    2c8a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    2c8c:	1c51      	adds	r1, r2, #1
    2c8e:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2c90:	7969      	ldrb	r1, [r5, #5]
    2c92:	2901      	cmp	r1, #1
    2c94:	d010      	beq.n	2cb8 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    2c96:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2c98:	3b01      	subs	r3, #1
    2c9a:	b29b      	uxth	r3, r3
    2c9c:	85ab      	strh	r3, [r5, #44]	; 0x2c
    2c9e:	2b00      	cmp	r3, #0
    2ca0:	d112      	bne.n	2cc8 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2ca2:	3304      	adds	r3, #4
    2ca4:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    2ca6:	2200      	movs	r2, #0
    2ca8:	332e      	adds	r3, #46	; 0x2e
    2caa:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    2cac:	07bb      	lsls	r3, r7, #30
    2cae:	d50b      	bpl.n	2cc8 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    2cb0:	0028      	movs	r0, r5
    2cb2:	692b      	ldr	r3, [r5, #16]
    2cb4:	4798      	blx	r3
    2cb6:	e007      	b.n	2cc8 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    2cb8:	0a1b      	lsrs	r3, r3, #8
    2cba:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    2cbc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    2cbe:	3301      	adds	r3, #1
    2cc0:	626b      	str	r3, [r5, #36]	; 0x24
    2cc2:	e7e8      	b.n	2c96 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2cc4:	2304      	movs	r3, #4
    2cc6:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    2cc8:	06f3      	lsls	r3, r6, #27
    2cca:	d504      	bpl.n	2cd6 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    2ccc:	2310      	movs	r3, #16
    2cce:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    2cd0:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    2cd2:	06fb      	lsls	r3, r7, #27
    2cd4:	d40e      	bmi.n	2cf4 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    2cd6:	06b3      	lsls	r3, r6, #26
    2cd8:	d504      	bpl.n	2ce4 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    2cda:	2320      	movs	r3, #32
    2cdc:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    2cde:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    2ce0:	073b      	lsls	r3, r7, #28
    2ce2:	d40b      	bmi.n	2cfc <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    2ce4:	0733      	lsls	r3, r6, #28
    2ce6:	d504      	bpl.n	2cf2 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    2ce8:	2308      	movs	r3, #8
    2cea:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    2cec:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    2cee:	06bb      	lsls	r3, r7, #26
    2cf0:	d408      	bmi.n	2d04 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    2cf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    2cf4:	0028      	movs	r0, r5
    2cf6:	69eb      	ldr	r3, [r5, #28]
    2cf8:	4798      	blx	r3
    2cfa:	e7ec      	b.n	2cd6 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    2cfc:	0028      	movs	r0, r5
    2cfe:	69ab      	ldr	r3, [r5, #24]
    2d00:	4798      	blx	r3
    2d02:	e7ef      	b.n	2ce4 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    2d04:	6a2b      	ldr	r3, [r5, #32]
    2d06:	0028      	movs	r0, r5
    2d08:	4798      	blx	r3
}
    2d0a:	e7f2      	b.n	2cf2 <_usart_interrupt_handler+0x176>
    2d0c:	20000398 	.word	0x20000398

00002d10 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    2d10:	b510      	push	{r4, lr}
	switch (clock_source) {
    2d12:	2808      	cmp	r0, #8
    2d14:	d803      	bhi.n	2d1e <system_clock_source_get_hz+0xe>
    2d16:	0080      	lsls	r0, r0, #2
    2d18:	4b1c      	ldr	r3, [pc, #112]	; (2d8c <system_clock_source_get_hz+0x7c>)
    2d1a:	581b      	ldr	r3, [r3, r0]
    2d1c:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    2d1e:	2000      	movs	r0, #0
    2d20:	e032      	b.n	2d88 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    2d22:	4b1b      	ldr	r3, [pc, #108]	; (2d90 <system_clock_source_get_hz+0x80>)
    2d24:	6918      	ldr	r0, [r3, #16]
    2d26:	e02f      	b.n	2d88 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    2d28:	4b1a      	ldr	r3, [pc, #104]	; (2d94 <system_clock_source_get_hz+0x84>)
    2d2a:	6a1b      	ldr	r3, [r3, #32]
    2d2c:	059b      	lsls	r3, r3, #22
    2d2e:	0f9b      	lsrs	r3, r3, #30
    2d30:	4819      	ldr	r0, [pc, #100]	; (2d98 <system_clock_source_get_hz+0x88>)
    2d32:	40d8      	lsrs	r0, r3
    2d34:	e028      	b.n	2d88 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    2d36:	4b16      	ldr	r3, [pc, #88]	; (2d90 <system_clock_source_get_hz+0x80>)
    2d38:	6958      	ldr	r0, [r3, #20]
    2d3a:	e025      	b.n	2d88 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2d3c:	4b14      	ldr	r3, [pc, #80]	; (2d90 <system_clock_source_get_hz+0x80>)
    2d3e:	681b      	ldr	r3, [r3, #0]
			return 0;
    2d40:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2d42:	079b      	lsls	r3, r3, #30
    2d44:	d520      	bpl.n	2d88 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2d46:	4913      	ldr	r1, [pc, #76]	; (2d94 <system_clock_source_get_hz+0x84>)
    2d48:	2210      	movs	r2, #16
    2d4a:	68cb      	ldr	r3, [r1, #12]
    2d4c:	421a      	tst	r2, r3
    2d4e:	d0fc      	beq.n	2d4a <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    2d50:	4b0f      	ldr	r3, [pc, #60]	; (2d90 <system_clock_source_get_hz+0x80>)
    2d52:	681a      	ldr	r2, [r3, #0]
    2d54:	2324      	movs	r3, #36	; 0x24
    2d56:	4013      	ands	r3, r2
    2d58:	2b04      	cmp	r3, #4
    2d5a:	d001      	beq.n	2d60 <system_clock_source_get_hz+0x50>
			return 48000000UL;
    2d5c:	480f      	ldr	r0, [pc, #60]	; (2d9c <system_clock_source_get_hz+0x8c>)
    2d5e:	e013      	b.n	2d88 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2d60:	2000      	movs	r0, #0
    2d62:	4b0f      	ldr	r3, [pc, #60]	; (2da0 <system_clock_source_get_hz+0x90>)
    2d64:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    2d66:	4b0a      	ldr	r3, [pc, #40]	; (2d90 <system_clock_source_get_hz+0x80>)
    2d68:	689b      	ldr	r3, [r3, #8]
    2d6a:	041b      	lsls	r3, r3, #16
    2d6c:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2d6e:	4358      	muls	r0, r3
    2d70:	e00a      	b.n	2d88 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2d72:	2350      	movs	r3, #80	; 0x50
    2d74:	4a07      	ldr	r2, [pc, #28]	; (2d94 <system_clock_source_get_hz+0x84>)
    2d76:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    2d78:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2d7a:	075b      	lsls	r3, r3, #29
    2d7c:	d504      	bpl.n	2d88 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    2d7e:	4b04      	ldr	r3, [pc, #16]	; (2d90 <system_clock_source_get_hz+0x80>)
    2d80:	68d8      	ldr	r0, [r3, #12]
    2d82:	e001      	b.n	2d88 <system_clock_source_get_hz+0x78>
		return 32768UL;
    2d84:	2080      	movs	r0, #128	; 0x80
    2d86:	0200      	lsls	r0, r0, #8
	}
}
    2d88:	bd10      	pop	{r4, pc}
    2d8a:	46c0      	nop			; (mov r8, r8)
    2d8c:	00006af0 	.word	0x00006af0
    2d90:	200002d0 	.word	0x200002d0
    2d94:	40000800 	.word	0x40000800
    2d98:	007a1200 	.word	0x007a1200
    2d9c:	02dc6c00 	.word	0x02dc6c00
    2da0:	00003371 	.word	0x00003371

00002da4 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    2da4:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    2da6:	490c      	ldr	r1, [pc, #48]	; (2dd8 <system_clock_source_osc8m_set_config+0x34>)
    2da8:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    2daa:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    2dac:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    2dae:	7840      	ldrb	r0, [r0, #1]
    2db0:	2201      	movs	r2, #1
    2db2:	4010      	ands	r0, r2
    2db4:	0180      	lsls	r0, r0, #6
    2db6:	2640      	movs	r6, #64	; 0x40
    2db8:	43b3      	bics	r3, r6
    2dba:	4303      	orrs	r3, r0
    2dbc:	402a      	ands	r2, r5
    2dbe:	01d2      	lsls	r2, r2, #7
    2dc0:	2080      	movs	r0, #128	; 0x80
    2dc2:	4383      	bics	r3, r0
    2dc4:	4313      	orrs	r3, r2
    2dc6:	2203      	movs	r2, #3
    2dc8:	4022      	ands	r2, r4
    2dca:	0212      	lsls	r2, r2, #8
    2dcc:	4803      	ldr	r0, [pc, #12]	; (2ddc <system_clock_source_osc8m_set_config+0x38>)
    2dce:	4003      	ands	r3, r0
    2dd0:	4313      	orrs	r3, r2
    2dd2:	620b      	str	r3, [r1, #32]
}
    2dd4:	bd70      	pop	{r4, r5, r6, pc}
    2dd6:	46c0      	nop			; (mov r8, r8)
    2dd8:	40000800 	.word	0x40000800
    2ddc:	fffffcff 	.word	0xfffffcff

00002de0 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    2de0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2de2:	46de      	mov	lr, fp
    2de4:	4657      	mov	r7, sl
    2de6:	464e      	mov	r6, r9
    2de8:	4645      	mov	r5, r8
    2dea:	b5e0      	push	{r5, r6, r7, lr}
    2dec:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    2dee:	4b26      	ldr	r3, [pc, #152]	; (2e88 <system_clock_source_xosc32k_set_config+0xa8>)
    2df0:	469b      	mov	fp, r3
    2df2:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    2df4:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    2df6:	7800      	ldrb	r0, [r0, #0]
    2df8:	4242      	negs	r2, r0
    2dfa:	4142      	adcs	r2, r0
    2dfc:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    2dfe:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    2e00:	78ca      	ldrb	r2, [r1, #3]
    2e02:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    2e04:	790a      	ldrb	r2, [r1, #4]
    2e06:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    2e08:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    2e0a:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    2e0c:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    2e0e:	688a      	ldr	r2, [r1, #8]
    2e10:	491e      	ldr	r1, [pc, #120]	; (2e8c <system_clock_source_xosc32k_set_config+0xac>)
    2e12:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    2e14:	2101      	movs	r1, #1
    2e16:	464a      	mov	r2, r9
    2e18:	0092      	lsls	r2, r2, #2
    2e1a:	4691      	mov	r9, r2
    2e1c:	2204      	movs	r2, #4
    2e1e:	4393      	bics	r3, r2
    2e20:	464a      	mov	r2, r9
    2e22:	4313      	orrs	r3, r2
    2e24:	4642      	mov	r2, r8
    2e26:	400a      	ands	r2, r1
    2e28:	00d2      	lsls	r2, r2, #3
    2e2a:	4690      	mov	r8, r2
    2e2c:	2208      	movs	r2, #8
    2e2e:	4393      	bics	r3, r2
    2e30:	4642      	mov	r2, r8
    2e32:	4313      	orrs	r3, r2
    2e34:	4662      	mov	r2, ip
    2e36:	400a      	ands	r2, r1
    2e38:	0112      	lsls	r2, r2, #4
    2e3a:	4694      	mov	ip, r2
    2e3c:	2210      	movs	r2, #16
    2e3e:	4393      	bics	r3, r2
    2e40:	4662      	mov	r2, ip
    2e42:	4313      	orrs	r3, r2
    2e44:	4008      	ands	r0, r1
    2e46:	0140      	lsls	r0, r0, #5
    2e48:	2220      	movs	r2, #32
    2e4a:	4393      	bics	r3, r2
    2e4c:	4303      	orrs	r3, r0
    2e4e:	400f      	ands	r7, r1
    2e50:	01bf      	lsls	r7, r7, #6
    2e52:	2040      	movs	r0, #64	; 0x40
    2e54:	4383      	bics	r3, r0
    2e56:	433b      	orrs	r3, r7
    2e58:	400e      	ands	r6, r1
    2e5a:	01f6      	lsls	r6, r6, #7
    2e5c:	3040      	adds	r0, #64	; 0x40
    2e5e:	4383      	bics	r3, r0
    2e60:	4333      	orrs	r3, r6
    2e62:	3879      	subs	r0, #121	; 0x79
    2e64:	4005      	ands	r5, r0
    2e66:	022d      	lsls	r5, r5, #8
    2e68:	4809      	ldr	r0, [pc, #36]	; (2e90 <system_clock_source_xosc32k_set_config+0xb0>)
    2e6a:	4003      	ands	r3, r0
    2e6c:	432b      	orrs	r3, r5
    2e6e:	4021      	ands	r1, r4
    2e70:	0309      	lsls	r1, r1, #12
    2e72:	4808      	ldr	r0, [pc, #32]	; (2e94 <system_clock_source_xosc32k_set_config+0xb4>)
    2e74:	4003      	ands	r3, r0
    2e76:	430b      	orrs	r3, r1
    2e78:	465a      	mov	r2, fp
    2e7a:	8293      	strh	r3, [r2, #20]
}
    2e7c:	bc3c      	pop	{r2, r3, r4, r5}
    2e7e:	4690      	mov	r8, r2
    2e80:	4699      	mov	r9, r3
    2e82:	46a2      	mov	sl, r4
    2e84:	46ab      	mov	fp, r5
    2e86:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2e88:	40000800 	.word	0x40000800
    2e8c:	200002d0 	.word	0x200002d0
    2e90:	fffff8ff 	.word	0xfffff8ff
    2e94:	ffffefff 	.word	0xffffefff

00002e98 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    2e98:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    2e9a:	7a03      	ldrb	r3, [r0, #8]
    2e9c:	069b      	lsls	r3, r3, #26
    2e9e:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    2ea0:	8942      	ldrh	r2, [r0, #10]
    2ea2:	0592      	lsls	r2, r2, #22
    2ea4:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    2ea6:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    2ea8:	4918      	ldr	r1, [pc, #96]	; (2f0c <system_clock_source_dfll_set_config+0x74>)
    2eaa:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    2eac:	7983      	ldrb	r3, [r0, #6]
    2eae:	79c2      	ldrb	r2, [r0, #7]
    2eb0:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    2eb2:	8842      	ldrh	r2, [r0, #2]
    2eb4:	8884      	ldrh	r4, [r0, #4]
    2eb6:	4322      	orrs	r2, r4
    2eb8:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    2eba:	7842      	ldrb	r2, [r0, #1]
    2ebc:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    2ebe:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    2ec0:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    2ec2:	7803      	ldrb	r3, [r0, #0]
    2ec4:	2b04      	cmp	r3, #4
    2ec6:	d011      	beq.n	2eec <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    2ec8:	2b20      	cmp	r3, #32
    2eca:	d10e      	bne.n	2eea <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2ecc:	7b03      	ldrb	r3, [r0, #12]
    2ece:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    2ed0:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    2ed2:	4313      	orrs	r3, r2
    2ed4:	89c2      	ldrh	r2, [r0, #14]
    2ed6:	0412      	lsls	r2, r2, #16
    2ed8:	490d      	ldr	r1, [pc, #52]	; (2f10 <system_clock_source_dfll_set_config+0x78>)
    2eda:	400a      	ands	r2, r1
    2edc:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    2ede:	4a0b      	ldr	r2, [pc, #44]	; (2f0c <system_clock_source_dfll_set_config+0x74>)
    2ee0:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    2ee2:	6811      	ldr	r1, [r2, #0]
    2ee4:	4b0b      	ldr	r3, [pc, #44]	; (2f14 <system_clock_source_dfll_set_config+0x7c>)
    2ee6:	430b      	orrs	r3, r1
    2ee8:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    2eea:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2eec:	7b03      	ldrb	r3, [r0, #12]
    2eee:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    2ef0:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    2ef2:	4313      	orrs	r3, r2
    2ef4:	89c2      	ldrh	r2, [r0, #14]
    2ef6:	0412      	lsls	r2, r2, #16
    2ef8:	4905      	ldr	r1, [pc, #20]	; (2f10 <system_clock_source_dfll_set_config+0x78>)
    2efa:	400a      	ands	r2, r1
    2efc:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    2efe:	4a03      	ldr	r2, [pc, #12]	; (2f0c <system_clock_source_dfll_set_config+0x74>)
    2f00:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    2f02:	6813      	ldr	r3, [r2, #0]
    2f04:	2104      	movs	r1, #4
    2f06:	430b      	orrs	r3, r1
    2f08:	6013      	str	r3, [r2, #0]
    2f0a:	e7ee      	b.n	2eea <system_clock_source_dfll_set_config+0x52>
    2f0c:	200002d0 	.word	0x200002d0
    2f10:	03ff0000 	.word	0x03ff0000
    2f14:	00000424 	.word	0x00000424

00002f18 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    2f18:	2808      	cmp	r0, #8
    2f1a:	d803      	bhi.n	2f24 <system_clock_source_enable+0xc>
    2f1c:	0080      	lsls	r0, r0, #2
    2f1e:	4b25      	ldr	r3, [pc, #148]	; (2fb4 <system_clock_source_enable+0x9c>)
    2f20:	581b      	ldr	r3, [r3, r0]
    2f22:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    2f24:	2017      	movs	r0, #23
    2f26:	e044      	b.n	2fb2 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    2f28:	4a23      	ldr	r2, [pc, #140]	; (2fb8 <system_clock_source_enable+0xa0>)
    2f2a:	6a13      	ldr	r3, [r2, #32]
    2f2c:	2102      	movs	r1, #2
    2f2e:	430b      	orrs	r3, r1
    2f30:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    2f32:	2000      	movs	r0, #0
    2f34:	e03d      	b.n	2fb2 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    2f36:	4a20      	ldr	r2, [pc, #128]	; (2fb8 <system_clock_source_enable+0xa0>)
    2f38:	6993      	ldr	r3, [r2, #24]
    2f3a:	2102      	movs	r1, #2
    2f3c:	430b      	orrs	r3, r1
    2f3e:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    2f40:	2000      	movs	r0, #0
		break;
    2f42:	e036      	b.n	2fb2 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    2f44:	4a1c      	ldr	r2, [pc, #112]	; (2fb8 <system_clock_source_enable+0xa0>)
    2f46:	8a13      	ldrh	r3, [r2, #16]
    2f48:	2102      	movs	r1, #2
    2f4a:	430b      	orrs	r3, r1
    2f4c:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    2f4e:	2000      	movs	r0, #0
		break;
    2f50:	e02f      	b.n	2fb2 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    2f52:	4a19      	ldr	r2, [pc, #100]	; (2fb8 <system_clock_source_enable+0xa0>)
    2f54:	8a93      	ldrh	r3, [r2, #20]
    2f56:	2102      	movs	r1, #2
    2f58:	430b      	orrs	r3, r1
    2f5a:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    2f5c:	2000      	movs	r0, #0
		break;
    2f5e:	e028      	b.n	2fb2 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    2f60:	4916      	ldr	r1, [pc, #88]	; (2fbc <system_clock_source_enable+0xa4>)
    2f62:	680b      	ldr	r3, [r1, #0]
    2f64:	2202      	movs	r2, #2
    2f66:	4313      	orrs	r3, r2
    2f68:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    2f6a:	4b13      	ldr	r3, [pc, #76]	; (2fb8 <system_clock_source_enable+0xa0>)
    2f6c:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2f6e:	0019      	movs	r1, r3
    2f70:	320e      	adds	r2, #14
    2f72:	68cb      	ldr	r3, [r1, #12]
    2f74:	421a      	tst	r2, r3
    2f76:	d0fc      	beq.n	2f72 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    2f78:	4a10      	ldr	r2, [pc, #64]	; (2fbc <system_clock_source_enable+0xa4>)
    2f7a:	6891      	ldr	r1, [r2, #8]
    2f7c:	4b0e      	ldr	r3, [pc, #56]	; (2fb8 <system_clock_source_enable+0xa0>)
    2f7e:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    2f80:	6852      	ldr	r2, [r2, #4]
    2f82:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    2f84:	2200      	movs	r2, #0
    2f86:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2f88:	0019      	movs	r1, r3
    2f8a:	3210      	adds	r2, #16
    2f8c:	68cb      	ldr	r3, [r1, #12]
    2f8e:	421a      	tst	r2, r3
    2f90:	d0fc      	beq.n	2f8c <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    2f92:	4b0a      	ldr	r3, [pc, #40]	; (2fbc <system_clock_source_enable+0xa4>)
    2f94:	681b      	ldr	r3, [r3, #0]
    2f96:	b29b      	uxth	r3, r3
    2f98:	4a07      	ldr	r2, [pc, #28]	; (2fb8 <system_clock_source_enable+0xa0>)
    2f9a:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    2f9c:	2000      	movs	r0, #0
    2f9e:	e008      	b.n	2fb2 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    2fa0:	4905      	ldr	r1, [pc, #20]	; (2fb8 <system_clock_source_enable+0xa0>)
    2fa2:	2244      	movs	r2, #68	; 0x44
    2fa4:	5c8b      	ldrb	r3, [r1, r2]
    2fa6:	2002      	movs	r0, #2
    2fa8:	4303      	orrs	r3, r0
    2faa:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    2fac:	2000      	movs	r0, #0
		break;
    2fae:	e000      	b.n	2fb2 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    2fb0:	2000      	movs	r0, #0
}
    2fb2:	4770      	bx	lr
    2fb4:	00006b14 	.word	0x00006b14
    2fb8:	40000800 	.word	0x40000800
    2fbc:	200002d0 	.word	0x200002d0

00002fc0 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    2fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2fc2:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    2fc4:	22c2      	movs	r2, #194	; 0xc2
    2fc6:	00d2      	lsls	r2, r2, #3
    2fc8:	4b47      	ldr	r3, [pc, #284]	; (30e8 <system_clock_init+0x128>)
    2fca:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    2fcc:	4947      	ldr	r1, [pc, #284]	; (30ec <system_clock_init+0x12c>)
    2fce:	684b      	ldr	r3, [r1, #4]
    2fd0:	221e      	movs	r2, #30
    2fd2:	4393      	bics	r3, r2
    2fd4:	3a1c      	subs	r2, #28
    2fd6:	4313      	orrs	r3, r2
    2fd8:	604b      	str	r3, [r1, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    2fda:	ab01      	add	r3, sp, #4
    2fdc:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2fde:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    2fe0:	4d43      	ldr	r5, [pc, #268]	; (30f0 <system_clock_init+0x130>)
    2fe2:	b2e0      	uxtb	r0, r4
    2fe4:	a901      	add	r1, sp, #4
    2fe6:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2fe8:	3401      	adds	r4, #1
    2fea:	2c25      	cmp	r4, #37	; 0x25
    2fec:	d1f9      	bne.n	2fe2 <system_clock_init+0x22>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    2fee:	a80a      	add	r0, sp, #40	; 0x28
    2ff0:	2300      	movs	r3, #0
    2ff2:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    2ff4:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    2ff6:	2280      	movs	r2, #128	; 0x80
    2ff8:	0212      	lsls	r2, r2, #8
    2ffa:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    2ffc:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    2ffe:	2201      	movs	r2, #1
    3000:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    3002:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    3004:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    3006:	3205      	adds	r2, #5
    3008:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    300a:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    300c:	4b39      	ldr	r3, [pc, #228]	; (30f4 <system_clock_init+0x134>)
    300e:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    3010:	2005      	movs	r0, #5
    3012:	4b39      	ldr	r3, [pc, #228]	; (30f8 <system_clock_init+0x138>)
    3014:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    3016:	4934      	ldr	r1, [pc, #208]	; (30e8 <system_clock_init+0x128>)
    3018:	2202      	movs	r2, #2
    301a:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    301c:	421a      	tst	r2, r3
    301e:	d0fc      	beq.n	301a <system_clock_init+0x5a>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    3020:	4a31      	ldr	r2, [pc, #196]	; (30e8 <system_clock_init+0x128>)
    3022:	8a93      	ldrh	r3, [r2, #20]
    3024:	2180      	movs	r1, #128	; 0x80
    3026:	430b      	orrs	r3, r1
    3028:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    302a:	ab05      	add	r3, sp, #20
    302c:	2100      	movs	r1, #0
    302e:	2200      	movs	r2, #0
    3030:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    3032:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    3034:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    3036:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    3038:	313f      	adds	r1, #63	; 0x3f
    303a:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    303c:	393b      	subs	r1, #59	; 0x3b
    303e:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    3040:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    3042:	4b2e      	ldr	r3, [pc, #184]	; (30fc <system_clock_init+0x13c>)
    3044:	681b      	ldr	r3, [r3, #0]
    3046:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    3048:	2b3f      	cmp	r3, #63	; 0x3f
    304a:	d04b      	beq.n	30e4 <system_clock_init+0x124>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    304c:	a805      	add	r0, sp, #20
    304e:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    3050:	23b7      	movs	r3, #183	; 0xb7
    3052:	00db      	lsls	r3, r3, #3
    3054:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    3056:	2307      	movs	r3, #7
    3058:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    305a:	3338      	adds	r3, #56	; 0x38
    305c:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    305e:	4b28      	ldr	r3, [pc, #160]	; (3100 <system_clock_init+0x140>)
    3060:	4798      	blx	r3
	config->run_in_standby  = false;
    3062:	a804      	add	r0, sp, #16
    3064:	2500      	movs	r5, #0
    3066:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    3068:	2601      	movs	r6, #1
    306a:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    306c:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    306e:	4b25      	ldr	r3, [pc, #148]	; (3104 <system_clock_init+0x144>)
    3070:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    3072:	2006      	movs	r0, #6
    3074:	4f20      	ldr	r7, [pc, #128]	; (30f8 <system_clock_init+0x138>)
    3076:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    3078:	4b23      	ldr	r3, [pc, #140]	; (3108 <system_clock_init+0x148>)
    307a:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    307c:	ac01      	add	r4, sp, #4
    307e:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    3080:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    3082:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    3084:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    3086:	2305      	movs	r3, #5
    3088:	7023      	strb	r3, [r4, #0]
    308a:	0021      	movs	r1, r4
    308c:	2001      	movs	r0, #1
    308e:	4b1f      	ldr	r3, [pc, #124]	; (310c <system_clock_init+0x14c>)
    3090:	4798      	blx	r3
    3092:	2001      	movs	r0, #1
    3094:	4b1e      	ldr	r3, [pc, #120]	; (3110 <system_clock_init+0x150>)
    3096:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    3098:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    309a:	0021      	movs	r1, r4
    309c:	2000      	movs	r0, #0
    309e:	4b14      	ldr	r3, [pc, #80]	; (30f0 <system_clock_init+0x130>)
    30a0:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    30a2:	2000      	movs	r0, #0
    30a4:	4b1b      	ldr	r3, [pc, #108]	; (3114 <system_clock_init+0x154>)
    30a6:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    30a8:	2007      	movs	r0, #7
    30aa:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    30ac:	490e      	ldr	r1, [pc, #56]	; (30e8 <system_clock_init+0x128>)
    30ae:	22d0      	movs	r2, #208	; 0xd0
    30b0:	68cb      	ldr	r3, [r1, #12]
    30b2:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    30b4:	2bd0      	cmp	r3, #208	; 0xd0
    30b6:	d1fb      	bne.n	30b0 <system_clock_init+0xf0>
	PM->CPUSEL.reg = (uint32_t)divider;
    30b8:	4a17      	ldr	r2, [pc, #92]	; (3118 <system_clock_init+0x158>)
    30ba:	2300      	movs	r3, #0
    30bc:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    30be:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    30c0:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    30c2:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    30c4:	a901      	add	r1, sp, #4
    30c6:	2201      	movs	r2, #1
    30c8:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    30ca:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    30cc:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    30ce:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    30d0:	3307      	adds	r3, #7
    30d2:	700b      	strb	r3, [r1, #0]
    30d4:	2000      	movs	r0, #0
    30d6:	4b0d      	ldr	r3, [pc, #52]	; (310c <system_clock_init+0x14c>)
    30d8:	4798      	blx	r3
    30da:	2000      	movs	r0, #0
    30dc:	4b0c      	ldr	r3, [pc, #48]	; (3110 <system_clock_init+0x150>)
    30de:	4798      	blx	r3
#endif
}
    30e0:	b00f      	add	sp, #60	; 0x3c
    30e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    30e4:	3b20      	subs	r3, #32
    30e6:	e7b1      	b.n	304c <system_clock_init+0x8c>
    30e8:	40000800 	.word	0x40000800
    30ec:	41004000 	.word	0x41004000
    30f0:	00003355 	.word	0x00003355
    30f4:	00002de1 	.word	0x00002de1
    30f8:	00002f19 	.word	0x00002f19
    30fc:	00806024 	.word	0x00806024
    3100:	00002e99 	.word	0x00002e99
    3104:	00002da5 	.word	0x00002da5
    3108:	0000311d 	.word	0x0000311d
    310c:	00003141 	.word	0x00003141
    3110:	000031f9 	.word	0x000031f9
    3114:	000032c9 	.word	0x000032c9
    3118:	40000400 	.word	0x40000400

0000311c <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    311c:	4a06      	ldr	r2, [pc, #24]	; (3138 <system_gclk_init+0x1c>)
    311e:	6993      	ldr	r3, [r2, #24]
    3120:	2108      	movs	r1, #8
    3122:	430b      	orrs	r3, r1
    3124:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    3126:	2201      	movs	r2, #1
    3128:	4b04      	ldr	r3, [pc, #16]	; (313c <system_gclk_init+0x20>)
    312a:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    312c:	0019      	movs	r1, r3
    312e:	780b      	ldrb	r3, [r1, #0]
    3130:	4213      	tst	r3, r2
    3132:	d1fc      	bne.n	312e <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    3134:	4770      	bx	lr
    3136:	46c0      	nop			; (mov r8, r8)
    3138:	40000400 	.word	0x40000400
    313c:	40000c00 	.word	0x40000c00

00003140 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    3140:	b570      	push	{r4, r5, r6, lr}
    3142:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    3144:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    3146:	780d      	ldrb	r5, [r1, #0]
    3148:	022d      	lsls	r5, r5, #8
    314a:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    314c:	784b      	ldrb	r3, [r1, #1]
    314e:	2b00      	cmp	r3, #0
    3150:	d002      	beq.n	3158 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    3152:	2380      	movs	r3, #128	; 0x80
    3154:	02db      	lsls	r3, r3, #11
    3156:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    3158:	7a4b      	ldrb	r3, [r1, #9]
    315a:	2b00      	cmp	r3, #0
    315c:	d002      	beq.n	3164 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    315e:	2380      	movs	r3, #128	; 0x80
    3160:	031b      	lsls	r3, r3, #12
    3162:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    3164:	6848      	ldr	r0, [r1, #4]
    3166:	2801      	cmp	r0, #1
    3168:	d910      	bls.n	318c <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    316a:	1e43      	subs	r3, r0, #1
    316c:	4218      	tst	r0, r3
    316e:	d134      	bne.n	31da <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    3170:	2802      	cmp	r0, #2
    3172:	d930      	bls.n	31d6 <system_gclk_gen_set_config+0x96>
    3174:	2302      	movs	r3, #2
    3176:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    3178:	3201      	adds	r2, #1
						mask <<= 1) {
    317a:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    317c:	4298      	cmp	r0, r3
    317e:	d8fb      	bhi.n	3178 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    3180:	0212      	lsls	r2, r2, #8
    3182:	4332      	orrs	r2, r6
    3184:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    3186:	2380      	movs	r3, #128	; 0x80
    3188:	035b      	lsls	r3, r3, #13
    318a:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    318c:	7a0b      	ldrb	r3, [r1, #8]
    318e:	2b00      	cmp	r3, #0
    3190:	d002      	beq.n	3198 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    3192:	2380      	movs	r3, #128	; 0x80
    3194:	039b      	lsls	r3, r3, #14
    3196:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3198:	4a13      	ldr	r2, [pc, #76]	; (31e8 <system_gclk_gen_set_config+0xa8>)
    319a:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    319c:	b25b      	sxtb	r3, r3
    319e:	2b00      	cmp	r3, #0
    31a0:	dbfb      	blt.n	319a <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    31a2:	4b12      	ldr	r3, [pc, #72]	; (31ec <system_gclk_gen_set_config+0xac>)
    31a4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    31a6:	4b12      	ldr	r3, [pc, #72]	; (31f0 <system_gclk_gen_set_config+0xb0>)
    31a8:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    31aa:	4a0f      	ldr	r2, [pc, #60]	; (31e8 <system_gclk_gen_set_config+0xa8>)
    31ac:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    31ae:	b25b      	sxtb	r3, r3
    31b0:	2b00      	cmp	r3, #0
    31b2:	dbfb      	blt.n	31ac <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    31b4:	4b0c      	ldr	r3, [pc, #48]	; (31e8 <system_gclk_gen_set_config+0xa8>)
    31b6:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    31b8:	001a      	movs	r2, r3
    31ba:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    31bc:	b25b      	sxtb	r3, r3
    31be:	2b00      	cmp	r3, #0
    31c0:	dbfb      	blt.n	31ba <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    31c2:	4a09      	ldr	r2, [pc, #36]	; (31e8 <system_gclk_gen_set_config+0xa8>)
    31c4:	6853      	ldr	r3, [r2, #4]
    31c6:	2180      	movs	r1, #128	; 0x80
    31c8:	0249      	lsls	r1, r1, #9
    31ca:	400b      	ands	r3, r1
    31cc:	431d      	orrs	r5, r3
    31ce:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    31d0:	4b08      	ldr	r3, [pc, #32]	; (31f4 <system_gclk_gen_set_config+0xb4>)
    31d2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    31d4:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    31d6:	2200      	movs	r2, #0
    31d8:	e7d2      	b.n	3180 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    31da:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    31dc:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    31de:	2380      	movs	r3, #128	; 0x80
    31e0:	029b      	lsls	r3, r3, #10
    31e2:	431d      	orrs	r5, r3
    31e4:	e7d2      	b.n	318c <system_gclk_gen_set_config+0x4c>
    31e6:	46c0      	nop			; (mov r8, r8)
    31e8:	40000c00 	.word	0x40000c00
    31ec:	00001ce9 	.word	0x00001ce9
    31f0:	40000c08 	.word	0x40000c08
    31f4:	00001d29 	.word	0x00001d29

000031f8 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    31f8:	b510      	push	{r4, lr}
    31fa:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    31fc:	4a0b      	ldr	r2, [pc, #44]	; (322c <system_gclk_gen_enable+0x34>)
    31fe:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    3200:	b25b      	sxtb	r3, r3
    3202:	2b00      	cmp	r3, #0
    3204:	dbfb      	blt.n	31fe <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    3206:	4b0a      	ldr	r3, [pc, #40]	; (3230 <system_gclk_gen_enable+0x38>)
    3208:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    320a:	4b0a      	ldr	r3, [pc, #40]	; (3234 <system_gclk_gen_enable+0x3c>)
    320c:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    320e:	4a07      	ldr	r2, [pc, #28]	; (322c <system_gclk_gen_enable+0x34>)
    3210:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    3212:	b25b      	sxtb	r3, r3
    3214:	2b00      	cmp	r3, #0
    3216:	dbfb      	blt.n	3210 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    3218:	4a04      	ldr	r2, [pc, #16]	; (322c <system_gclk_gen_enable+0x34>)
    321a:	6851      	ldr	r1, [r2, #4]
    321c:	2380      	movs	r3, #128	; 0x80
    321e:	025b      	lsls	r3, r3, #9
    3220:	430b      	orrs	r3, r1
    3222:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    3224:	4b04      	ldr	r3, [pc, #16]	; (3238 <system_gclk_gen_enable+0x40>)
    3226:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    3228:	bd10      	pop	{r4, pc}
    322a:	46c0      	nop			; (mov r8, r8)
    322c:	40000c00 	.word	0x40000c00
    3230:	00001ce9 	.word	0x00001ce9
    3234:	40000c04 	.word	0x40000c04
    3238:	00001d29 	.word	0x00001d29

0000323c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    323c:	b570      	push	{r4, r5, r6, lr}
    323e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3240:	4a1a      	ldr	r2, [pc, #104]	; (32ac <system_gclk_gen_get_hz+0x70>)
    3242:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    3244:	b25b      	sxtb	r3, r3
    3246:	2b00      	cmp	r3, #0
    3248:	dbfb      	blt.n	3242 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    324a:	4b19      	ldr	r3, [pc, #100]	; (32b0 <system_gclk_gen_get_hz+0x74>)
    324c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    324e:	4b19      	ldr	r3, [pc, #100]	; (32b4 <system_gclk_gen_get_hz+0x78>)
    3250:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3252:	4a16      	ldr	r2, [pc, #88]	; (32ac <system_gclk_gen_get_hz+0x70>)
    3254:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    3256:	b25b      	sxtb	r3, r3
    3258:	2b00      	cmp	r3, #0
    325a:	dbfb      	blt.n	3254 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    325c:	4e13      	ldr	r6, [pc, #76]	; (32ac <system_gclk_gen_get_hz+0x70>)
    325e:	6870      	ldr	r0, [r6, #4]
    3260:	04c0      	lsls	r0, r0, #19
    3262:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    3264:	4b14      	ldr	r3, [pc, #80]	; (32b8 <system_gclk_gen_get_hz+0x7c>)
    3266:	4798      	blx	r3
    3268:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    326a:	4b12      	ldr	r3, [pc, #72]	; (32b4 <system_gclk_gen_get_hz+0x78>)
    326c:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    326e:	6876      	ldr	r6, [r6, #4]
    3270:	02f6      	lsls	r6, r6, #11
    3272:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    3274:	4b11      	ldr	r3, [pc, #68]	; (32bc <system_gclk_gen_get_hz+0x80>)
    3276:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3278:	4a0c      	ldr	r2, [pc, #48]	; (32ac <system_gclk_gen_get_hz+0x70>)
    327a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    327c:	b25b      	sxtb	r3, r3
    327e:	2b00      	cmp	r3, #0
    3280:	dbfb      	blt.n	327a <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    3282:	4b0a      	ldr	r3, [pc, #40]	; (32ac <system_gclk_gen_get_hz+0x70>)
    3284:	689c      	ldr	r4, [r3, #8]
    3286:	0224      	lsls	r4, r4, #8
    3288:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    328a:	4b0d      	ldr	r3, [pc, #52]	; (32c0 <system_gclk_gen_get_hz+0x84>)
    328c:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    328e:	2e00      	cmp	r6, #0
    3290:	d107      	bne.n	32a2 <system_gclk_gen_get_hz+0x66>
    3292:	2c01      	cmp	r4, #1
    3294:	d907      	bls.n	32a6 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    3296:	0021      	movs	r1, r4
    3298:	0028      	movs	r0, r5
    329a:	4b0a      	ldr	r3, [pc, #40]	; (32c4 <system_gclk_gen_get_hz+0x88>)
    329c:	4798      	blx	r3
    329e:	0005      	movs	r5, r0
    32a0:	e001      	b.n	32a6 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    32a2:	3401      	adds	r4, #1
    32a4:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    32a6:	0028      	movs	r0, r5
    32a8:	bd70      	pop	{r4, r5, r6, pc}
    32aa:	46c0      	nop			; (mov r8, r8)
    32ac:	40000c00 	.word	0x40000c00
    32b0:	00001ce9 	.word	0x00001ce9
    32b4:	40000c04 	.word	0x40000c04
    32b8:	00002d11 	.word	0x00002d11
    32bc:	40000c08 	.word	0x40000c08
    32c0:	00001d29 	.word	0x00001d29
    32c4:	00004abd 	.word	0x00004abd

000032c8 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    32c8:	b510      	push	{r4, lr}
    32ca:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    32cc:	4b06      	ldr	r3, [pc, #24]	; (32e8 <system_gclk_chan_enable+0x20>)
    32ce:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    32d0:	4b06      	ldr	r3, [pc, #24]	; (32ec <system_gclk_chan_enable+0x24>)
    32d2:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    32d4:	4a06      	ldr	r2, [pc, #24]	; (32f0 <system_gclk_chan_enable+0x28>)
    32d6:	8853      	ldrh	r3, [r2, #2]
    32d8:	2180      	movs	r1, #128	; 0x80
    32da:	01c9      	lsls	r1, r1, #7
    32dc:	430b      	orrs	r3, r1
    32de:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    32e0:	4b04      	ldr	r3, [pc, #16]	; (32f4 <system_gclk_chan_enable+0x2c>)
    32e2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    32e4:	bd10      	pop	{r4, pc}
    32e6:	46c0      	nop			; (mov r8, r8)
    32e8:	00001ce9 	.word	0x00001ce9
    32ec:	40000c02 	.word	0x40000c02
    32f0:	40000c00 	.word	0x40000c00
    32f4:	00001d29 	.word	0x00001d29

000032f8 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    32f8:	b510      	push	{r4, lr}
    32fa:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    32fc:	4b0f      	ldr	r3, [pc, #60]	; (333c <system_gclk_chan_disable+0x44>)
    32fe:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    3300:	4b0f      	ldr	r3, [pc, #60]	; (3340 <system_gclk_chan_disable+0x48>)
    3302:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    3304:	4a0f      	ldr	r2, [pc, #60]	; (3344 <system_gclk_chan_disable+0x4c>)
    3306:	8853      	ldrh	r3, [r2, #2]
    3308:	051b      	lsls	r3, r3, #20
    330a:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    330c:	8853      	ldrh	r3, [r2, #2]
    330e:	490e      	ldr	r1, [pc, #56]	; (3348 <system_gclk_chan_disable+0x50>)
    3310:	400b      	ands	r3, r1
    3312:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    3314:	8853      	ldrh	r3, [r2, #2]
    3316:	490d      	ldr	r1, [pc, #52]	; (334c <system_gclk_chan_disable+0x54>)
    3318:	400b      	ands	r3, r1
    331a:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    331c:	0011      	movs	r1, r2
    331e:	2280      	movs	r2, #128	; 0x80
    3320:	01d2      	lsls	r2, r2, #7
    3322:	884b      	ldrh	r3, [r1, #2]
    3324:	4213      	tst	r3, r2
    3326:	d1fc      	bne.n	3322 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    3328:	4906      	ldr	r1, [pc, #24]	; (3344 <system_gclk_chan_disable+0x4c>)
    332a:	884a      	ldrh	r2, [r1, #2]
    332c:	0203      	lsls	r3, r0, #8
    332e:	4806      	ldr	r0, [pc, #24]	; (3348 <system_gclk_chan_disable+0x50>)
    3330:	4002      	ands	r2, r0
    3332:	4313      	orrs	r3, r2
    3334:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    3336:	4b06      	ldr	r3, [pc, #24]	; (3350 <system_gclk_chan_disable+0x58>)
    3338:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    333a:	bd10      	pop	{r4, pc}
    333c:	00001ce9 	.word	0x00001ce9
    3340:	40000c02 	.word	0x40000c02
    3344:	40000c00 	.word	0x40000c00
    3348:	fffff0ff 	.word	0xfffff0ff
    334c:	ffffbfff 	.word	0xffffbfff
    3350:	00001d29 	.word	0x00001d29

00003354 <system_gclk_chan_set_config>:
{
    3354:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    3356:	780c      	ldrb	r4, [r1, #0]
    3358:	0224      	lsls	r4, r4, #8
    335a:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    335c:	4b02      	ldr	r3, [pc, #8]	; (3368 <system_gclk_chan_set_config+0x14>)
    335e:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    3360:	b2a4      	uxth	r4, r4
    3362:	4b02      	ldr	r3, [pc, #8]	; (336c <system_gclk_chan_set_config+0x18>)
    3364:	805c      	strh	r4, [r3, #2]
}
    3366:	bd10      	pop	{r4, pc}
    3368:	000032f9 	.word	0x000032f9
    336c:	40000c00 	.word	0x40000c00

00003370 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    3370:	b510      	push	{r4, lr}
    3372:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    3374:	4b06      	ldr	r3, [pc, #24]	; (3390 <system_gclk_chan_get_hz+0x20>)
    3376:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    3378:	4b06      	ldr	r3, [pc, #24]	; (3394 <system_gclk_chan_get_hz+0x24>)
    337a:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    337c:	4b06      	ldr	r3, [pc, #24]	; (3398 <system_gclk_chan_get_hz+0x28>)
    337e:	885c      	ldrh	r4, [r3, #2]
    3380:	0524      	lsls	r4, r4, #20
    3382:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    3384:	4b05      	ldr	r3, [pc, #20]	; (339c <system_gclk_chan_get_hz+0x2c>)
    3386:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    3388:	0020      	movs	r0, r4
    338a:	4b05      	ldr	r3, [pc, #20]	; (33a0 <system_gclk_chan_get_hz+0x30>)
    338c:	4798      	blx	r3
}
    338e:	bd10      	pop	{r4, pc}
    3390:	00001ce9 	.word	0x00001ce9
    3394:	40000c02 	.word	0x40000c02
    3398:	40000c00 	.word	0x40000c00
    339c:	00001d29 	.word	0x00001d29
    33a0:	0000323d 	.word	0x0000323d

000033a4 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    33a4:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    33a6:	78d3      	ldrb	r3, [r2, #3]
    33a8:	2b00      	cmp	r3, #0
    33aa:	d135      	bne.n	3418 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    33ac:	7813      	ldrb	r3, [r2, #0]
    33ae:	2b80      	cmp	r3, #128	; 0x80
    33b0:	d029      	beq.n	3406 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    33b2:	061b      	lsls	r3, r3, #24
    33b4:	2480      	movs	r4, #128	; 0x80
    33b6:	0264      	lsls	r4, r4, #9
    33b8:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    33ba:	7854      	ldrb	r4, [r2, #1]
    33bc:	2502      	movs	r5, #2
    33be:	43ac      	bics	r4, r5
    33c0:	d106      	bne.n	33d0 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    33c2:	7894      	ldrb	r4, [r2, #2]
    33c4:	2c00      	cmp	r4, #0
    33c6:	d120      	bne.n	340a <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    33c8:	2480      	movs	r4, #128	; 0x80
    33ca:	02a4      	lsls	r4, r4, #10
    33cc:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    33ce:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    33d0:	7854      	ldrb	r4, [r2, #1]
    33d2:	3c01      	subs	r4, #1
    33d4:	2c01      	cmp	r4, #1
    33d6:	d91c      	bls.n	3412 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    33d8:	040d      	lsls	r5, r1, #16
    33da:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    33dc:	24a0      	movs	r4, #160	; 0xa0
    33de:	05e4      	lsls	r4, r4, #23
    33e0:	432c      	orrs	r4, r5
    33e2:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    33e4:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    33e6:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    33e8:	24d0      	movs	r4, #208	; 0xd0
    33ea:	0624      	lsls	r4, r4, #24
    33ec:	432c      	orrs	r4, r5
    33ee:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    33f0:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    33f2:	78d4      	ldrb	r4, [r2, #3]
    33f4:	2c00      	cmp	r4, #0
    33f6:	d122      	bne.n	343e <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    33f8:	035b      	lsls	r3, r3, #13
    33fa:	d51c      	bpl.n	3436 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    33fc:	7893      	ldrb	r3, [r2, #2]
    33fe:	2b01      	cmp	r3, #1
    3400:	d01e      	beq.n	3440 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    3402:	6141      	str	r1, [r0, #20]
    3404:	e017      	b.n	3436 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    3406:	2300      	movs	r3, #0
    3408:	e7d7      	b.n	33ba <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    340a:	24c0      	movs	r4, #192	; 0xc0
    340c:	02e4      	lsls	r4, r4, #11
    340e:	4323      	orrs	r3, r4
    3410:	e7dd      	b.n	33ce <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    3412:	4c0d      	ldr	r4, [pc, #52]	; (3448 <_system_pinmux_config+0xa4>)
    3414:	4023      	ands	r3, r4
    3416:	e7df      	b.n	33d8 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    3418:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    341a:	040c      	lsls	r4, r1, #16
    341c:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    341e:	23a0      	movs	r3, #160	; 0xa0
    3420:	05db      	lsls	r3, r3, #23
    3422:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3424:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    3426:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    3428:	23d0      	movs	r3, #208	; 0xd0
    342a:	061b      	lsls	r3, r3, #24
    342c:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    342e:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    3430:	78d3      	ldrb	r3, [r2, #3]
    3432:	2b00      	cmp	r3, #0
    3434:	d103      	bne.n	343e <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3436:	7853      	ldrb	r3, [r2, #1]
    3438:	3b01      	subs	r3, #1
    343a:	2b01      	cmp	r3, #1
    343c:	d902      	bls.n	3444 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    343e:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    3440:	6181      	str	r1, [r0, #24]
    3442:	e7f8      	b.n	3436 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    3444:	6081      	str	r1, [r0, #8]
}
    3446:	e7fa      	b.n	343e <_system_pinmux_config+0x9a>
    3448:	fffbffff 	.word	0xfffbffff

0000344c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    344c:	b510      	push	{r4, lr}
    344e:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    3450:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    3452:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    3454:	2900      	cmp	r1, #0
    3456:	d104      	bne.n	3462 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    3458:	0943      	lsrs	r3, r0, #5
    345a:	01db      	lsls	r3, r3, #7
    345c:	4905      	ldr	r1, [pc, #20]	; (3474 <system_pinmux_pin_set_config+0x28>)
    345e:	468c      	mov	ip, r1
    3460:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    3462:	241f      	movs	r4, #31
    3464:	4020      	ands	r0, r4
    3466:	2101      	movs	r1, #1
    3468:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    346a:	0018      	movs	r0, r3
    346c:	4b02      	ldr	r3, [pc, #8]	; (3478 <system_pinmux_pin_set_config+0x2c>)
    346e:	4798      	blx	r3
}
    3470:	bd10      	pop	{r4, pc}
    3472:	46c0      	nop			; (mov r8, r8)
    3474:	41004400 	.word	0x41004400
    3478:	000033a5 	.word	0x000033a5

0000347c <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    347c:	4770      	bx	lr
	...

00003480 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    3480:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    3482:	4b05      	ldr	r3, [pc, #20]	; (3498 <system_init+0x18>)
    3484:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    3486:	4b05      	ldr	r3, [pc, #20]	; (349c <system_init+0x1c>)
    3488:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    348a:	4b05      	ldr	r3, [pc, #20]	; (34a0 <system_init+0x20>)
    348c:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    348e:	4b05      	ldr	r3, [pc, #20]	; (34a4 <system_init+0x24>)
    3490:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    3492:	4b05      	ldr	r3, [pc, #20]	; (34a8 <system_init+0x28>)
    3494:	4798      	blx	r3
}
    3496:	bd10      	pop	{r4, pc}
    3498:	00002fc1 	.word	0x00002fc1
    349c:	00001d59 	.word	0x00001d59
    34a0:	0000347d 	.word	0x0000347d
    34a4:	0000347d 	.word	0x0000347d
    34a8:	0000347d 	.word	0x0000347d

000034ac <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    34ac:	e7fe      	b.n	34ac <Dummy_Handler>
	...

000034b0 <Reset_Handler>:
{
    34b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    34b2:	4a2a      	ldr	r2, [pc, #168]	; (355c <Reset_Handler+0xac>)
    34b4:	4b2a      	ldr	r3, [pc, #168]	; (3560 <Reset_Handler+0xb0>)
    34b6:	429a      	cmp	r2, r3
    34b8:	d011      	beq.n	34de <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    34ba:	001a      	movs	r2, r3
    34bc:	4b29      	ldr	r3, [pc, #164]	; (3564 <Reset_Handler+0xb4>)
    34be:	429a      	cmp	r2, r3
    34c0:	d20d      	bcs.n	34de <Reset_Handler+0x2e>
    34c2:	4a29      	ldr	r2, [pc, #164]	; (3568 <Reset_Handler+0xb8>)
    34c4:	3303      	adds	r3, #3
    34c6:	1a9b      	subs	r3, r3, r2
    34c8:	089b      	lsrs	r3, r3, #2
    34ca:	3301      	adds	r3, #1
    34cc:	009b      	lsls	r3, r3, #2
    34ce:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    34d0:	4823      	ldr	r0, [pc, #140]	; (3560 <Reset_Handler+0xb0>)
    34d2:	4922      	ldr	r1, [pc, #136]	; (355c <Reset_Handler+0xac>)
    34d4:	588c      	ldr	r4, [r1, r2]
    34d6:	5084      	str	r4, [r0, r2]
    34d8:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    34da:	429a      	cmp	r2, r3
    34dc:	d1fa      	bne.n	34d4 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    34de:	4a23      	ldr	r2, [pc, #140]	; (356c <Reset_Handler+0xbc>)
    34e0:	4b23      	ldr	r3, [pc, #140]	; (3570 <Reset_Handler+0xc0>)
    34e2:	429a      	cmp	r2, r3
    34e4:	d20a      	bcs.n	34fc <Reset_Handler+0x4c>
    34e6:	43d3      	mvns	r3, r2
    34e8:	4921      	ldr	r1, [pc, #132]	; (3570 <Reset_Handler+0xc0>)
    34ea:	185b      	adds	r3, r3, r1
    34ec:	2103      	movs	r1, #3
    34ee:	438b      	bics	r3, r1
    34f0:	3304      	adds	r3, #4
    34f2:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    34f4:	2100      	movs	r1, #0
    34f6:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    34f8:	4293      	cmp	r3, r2
    34fa:	d1fc      	bne.n	34f6 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    34fc:	4a1d      	ldr	r2, [pc, #116]	; (3574 <Reset_Handler+0xc4>)
    34fe:	21ff      	movs	r1, #255	; 0xff
    3500:	4b1d      	ldr	r3, [pc, #116]	; (3578 <Reset_Handler+0xc8>)
    3502:	438b      	bics	r3, r1
    3504:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    3506:	39fd      	subs	r1, #253	; 0xfd
    3508:	2390      	movs	r3, #144	; 0x90
    350a:	005b      	lsls	r3, r3, #1
    350c:	4a1b      	ldr	r2, [pc, #108]	; (357c <Reset_Handler+0xcc>)
    350e:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    3510:	4a1b      	ldr	r2, [pc, #108]	; (3580 <Reset_Handler+0xd0>)
    3512:	78d3      	ldrb	r3, [r2, #3]
    3514:	2503      	movs	r5, #3
    3516:	43ab      	bics	r3, r5
    3518:	2402      	movs	r4, #2
    351a:	4323      	orrs	r3, r4
    351c:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    351e:	78d3      	ldrb	r3, [r2, #3]
    3520:	270c      	movs	r7, #12
    3522:	43bb      	bics	r3, r7
    3524:	2608      	movs	r6, #8
    3526:	4333      	orrs	r3, r6
    3528:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    352a:	4b16      	ldr	r3, [pc, #88]	; (3584 <Reset_Handler+0xd4>)
    352c:	7b98      	ldrb	r0, [r3, #14]
    352e:	2230      	movs	r2, #48	; 0x30
    3530:	4390      	bics	r0, r2
    3532:	2220      	movs	r2, #32
    3534:	4310      	orrs	r0, r2
    3536:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    3538:	7b99      	ldrb	r1, [r3, #14]
    353a:	43b9      	bics	r1, r7
    353c:	4331      	orrs	r1, r6
    353e:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    3540:	7b9a      	ldrb	r2, [r3, #14]
    3542:	43aa      	bics	r2, r5
    3544:	4322      	orrs	r2, r4
    3546:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    3548:	4a0f      	ldr	r2, [pc, #60]	; (3588 <Reset_Handler+0xd8>)
    354a:	6853      	ldr	r3, [r2, #4]
    354c:	2180      	movs	r1, #128	; 0x80
    354e:	430b      	orrs	r3, r1
    3550:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    3552:	4b0e      	ldr	r3, [pc, #56]	; (358c <Reset_Handler+0xdc>)
    3554:	4798      	blx	r3
        main();
    3556:	4b0e      	ldr	r3, [pc, #56]	; (3590 <Reset_Handler+0xe0>)
    3558:	4798      	blx	r3
    355a:	e7fe      	b.n	355a <Reset_Handler+0xaa>
    355c:	000087e4 	.word	0x000087e4
    3560:	20000000 	.word	0x20000000
    3564:	2000020c 	.word	0x2000020c
    3568:	20000004 	.word	0x20000004
    356c:	2000020c 	.word	0x2000020c
    3570:	20003124 	.word	0x20003124
    3574:	e000ed00 	.word	0xe000ed00
    3578:	00000000 	.word	0x00000000
    357c:	41007000 	.word	0x41007000
    3580:	41005000 	.word	0x41005000
    3584:	41004800 	.word	0x41004800
    3588:	41004000 	.word	0x41004000
    358c:	00004dfd 	.word	0x00004dfd
    3590:	00004a09 	.word	0x00004a09

00003594 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    3594:	b5f0      	push	{r4, r5, r6, r7, lr}
    3596:	46c6      	mov	lr, r8
    3598:	b500      	push	{lr}
    359a:	000c      	movs	r4, r1
    359c:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    359e:	2800      	cmp	r0, #0
    35a0:	d10f      	bne.n	35c2 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    35a2:	2a00      	cmp	r2, #0
    35a4:	dd11      	ble.n	35ca <_read+0x36>
    35a6:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    35a8:	4e09      	ldr	r6, [pc, #36]	; (35d0 <_read+0x3c>)
    35aa:	4d0a      	ldr	r5, [pc, #40]	; (35d4 <_read+0x40>)
    35ac:	6830      	ldr	r0, [r6, #0]
    35ae:	0021      	movs	r1, r4
    35b0:	682b      	ldr	r3, [r5, #0]
    35b2:	4798      	blx	r3
		ptr++;
    35b4:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    35b6:	42bc      	cmp	r4, r7
    35b8:	d1f8      	bne.n	35ac <_read+0x18>
		nChars++;
	}
	return nChars;
}
    35ba:	4640      	mov	r0, r8
    35bc:	bc04      	pop	{r2}
    35be:	4690      	mov	r8, r2
    35c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    35c2:	2301      	movs	r3, #1
    35c4:	425b      	negs	r3, r3
    35c6:	4698      	mov	r8, r3
    35c8:	e7f7      	b.n	35ba <_read+0x26>
	for (; len > 0; --len) {
    35ca:	4680      	mov	r8, r0
    35cc:	e7f5      	b.n	35ba <_read+0x26>
    35ce:	46c0      	nop			; (mov r8, r8)
    35d0:	200003b8 	.word	0x200003b8
    35d4:	200003b0 	.word	0x200003b0

000035d8 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    35d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    35da:	46c6      	mov	lr, r8
    35dc:	b500      	push	{lr}
    35de:	000e      	movs	r6, r1
    35e0:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    35e2:	3801      	subs	r0, #1
    35e4:	2802      	cmp	r0, #2
    35e6:	d810      	bhi.n	360a <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    35e8:	2a00      	cmp	r2, #0
    35ea:	d011      	beq.n	3610 <_write+0x38>
    35ec:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    35ee:	4b0c      	ldr	r3, [pc, #48]	; (3620 <_write+0x48>)
    35f0:	4698      	mov	r8, r3
    35f2:	4f0c      	ldr	r7, [pc, #48]	; (3624 <_write+0x4c>)
    35f4:	4643      	mov	r3, r8
    35f6:	6818      	ldr	r0, [r3, #0]
    35f8:	5d31      	ldrb	r1, [r6, r4]
    35fa:	683b      	ldr	r3, [r7, #0]
    35fc:	4798      	blx	r3
    35fe:	2800      	cmp	r0, #0
    3600:	db08      	blt.n	3614 <_write+0x3c>
			return -1;
		}
		++nChars;
    3602:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    3604:	42a5      	cmp	r5, r4
    3606:	d1f5      	bne.n	35f4 <_write+0x1c>
    3608:	e006      	b.n	3618 <_write+0x40>
		return -1;
    360a:	2401      	movs	r4, #1
    360c:	4264      	negs	r4, r4
    360e:	e003      	b.n	3618 <_write+0x40>
	for (; len != 0; --len) {
    3610:	0014      	movs	r4, r2
    3612:	e001      	b.n	3618 <_write+0x40>
			return -1;
    3614:	2401      	movs	r4, #1
    3616:	4264      	negs	r4, r4
	}
	return nChars;
}
    3618:	0020      	movs	r0, r4
    361a:	bc04      	pop	{r2}
    361c:	4690      	mov	r8, r2
    361e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3620:	200003b8 	.word	0x200003b8
    3624:	200003b4 	.word	0x200003b4

00003628 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    3628:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    362a:	4a06      	ldr	r2, [pc, #24]	; (3644 <_sbrk+0x1c>)
    362c:	6812      	ldr	r2, [r2, #0]
    362e:	2a00      	cmp	r2, #0
    3630:	d004      	beq.n	363c <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    3632:	4a04      	ldr	r2, [pc, #16]	; (3644 <_sbrk+0x1c>)
    3634:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    3636:	18c3      	adds	r3, r0, r3
    3638:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    363a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    363c:	4902      	ldr	r1, [pc, #8]	; (3648 <_sbrk+0x20>)
    363e:	4a01      	ldr	r2, [pc, #4]	; (3644 <_sbrk+0x1c>)
    3640:	6011      	str	r1, [r2, #0]
    3642:	e7f6      	b.n	3632 <_sbrk+0xa>
    3644:	200002e8 	.word	0x200002e8
    3648:	20005128 	.word	0x20005128

0000364c <_close>:
}

extern int _close(int file)
{
	return -1;
}
    364c:	2001      	movs	r0, #1
    364e:	4240      	negs	r0, r0
    3650:	4770      	bx	lr

00003652 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    3652:	2380      	movs	r3, #128	; 0x80
    3654:	019b      	lsls	r3, r3, #6
    3656:	604b      	str	r3, [r1, #4]

	return 0;
}
    3658:	2000      	movs	r0, #0
    365a:	4770      	bx	lr

0000365c <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    365c:	2001      	movs	r0, #1
    365e:	4770      	bx	lr

00003660 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    3660:	2000      	movs	r0, #0
    3662:	4770      	bx	lr

00003664 <drawChar>:
uint8_t consoleSGR[80][24];



void drawChar(uint8_t character)
{
    3664:	b5f0      	push	{r4, r5, r6, r7, lr}
    3666:	46d6      	mov	lr, sl
    3668:	464f      	mov	r7, r9
    366a:	b580      	push	{r7, lr}
    366c:	b0e7      	sub	sp, #412	; 0x19c
    366e:	0006      	movs	r6, r0

	uint16_t x = xCharPos;
    3670:	4b64      	ldr	r3, [pc, #400]	; (3804 <drawChar+0x1a0>)
    3672:	881b      	ldrh	r3, [r3, #0]
	uint16_t y = yCharPos;
    3674:	4a64      	ldr	r2, [pc, #400]	; (3808 <drawChar+0x1a4>)
    3676:	8817      	ldrh	r7, [r2, #0]
	
	uint16_t tempForeground;
	uint16_t tempBackground;
	
	uint32_t tempColor = consoleColors[x][y];
    3678:	0059      	lsls	r1, r3, #1
    367a:	18ca      	adds	r2, r1, r3
    367c:	00d2      	lsls	r2, r2, #3
    367e:	19d2      	adds	r2, r2, r7
    3680:	0092      	lsls	r2, r2, #2
    3682:	4862      	ldr	r0, [pc, #392]	; (380c <drawChar+0x1a8>)
    3684:	5814      	ldr	r4, [r2, r0]
	
	tempForeground = (tempColor >> 16);
    3686:	0c22      	lsrs	r2, r4, #16
    3688:	9200      	str	r2, [sp, #0]
	tempBackground = consoleColors[x][y] & 0xFFFF;
    368a:	b2a2      	uxth	r2, r4
    368c:	9201      	str	r2, [sp, #4]
	
	
	consoleDisplay[x][y] = character;
    368e:	18c9      	adds	r1, r1, r3
    3690:	00c9      	lsls	r1, r1, #3
    3692:	4a5f      	ldr	r2, [pc, #380]	; (3810 <drawChar+0x1ac>)
    3694:	1851      	adds	r1, r2, r1
    3696:	55ce      	strb	r6, [r1, r7]
	
	uint8_t displayFont[10][20];
	uint8_t tempFontStorage[200];
	uint8_t k = 0;
	
	REG_PORT_OUTCLR1 = LCD_CS;
    3698:	2180      	movs	r1, #128	; 0x80
    369a:	03c9      	lsls	r1, r1, #15
    369c:	4a5d      	ldr	r2, [pc, #372]	; (3814 <drawChar+0x1b0>)
    369e:	6011      	str	r1, [r2, #0]
	setXY(x*10,y*20,x*10+9,y*20+19);
    36a0:	0098      	lsls	r0, r3, #2
    36a2:	181b      	adds	r3, r3, r0
    36a4:	005b      	lsls	r3, r3, #1
    36a6:	b298      	uxth	r0, r3
    36a8:	2114      	movs	r1, #20
    36aa:	4379      	muls	r1, r7
    36ac:	b289      	uxth	r1, r1
    36ae:	000b      	movs	r3, r1
    36b0:	3313      	adds	r3, #19
    36b2:	b29b      	uxth	r3, r3
    36b4:	0002      	movs	r2, r0
    36b6:	3209      	adds	r2, #9
    36b8:	b292      	uxth	r2, r2
    36ba:	4f57      	ldr	r7, [pc, #348]	; (3818 <drawChar+0x1b4>)
    36bc:	47b8      	blx	r7
    36be:	00b3      	lsls	r3, r6, #2
    36c0:	199e      	adds	r6, r3, r6
    36c2:	00b3      	lsls	r3, r6, #2
    36c4:	18f6      	adds	r6, r6, r3
    36c6:	4b55      	ldr	r3, [pc, #340]	; (381c <drawChar+0x1b8>)
    36c8:	4699      	mov	r9, r3
    36ca:	44b1      	add	r9, r6
	uint8_t k = 0;
    36cc:	2700      	movs	r7, #0
	//first transmute it into tempFontStorage
	for(uint16_t i=0; i <= 24; i++)
	{
		for(int j=0;j<8;j++)
		{
			if((CodePage437[character][i]&(1<<(7-j)))!=0)
    36ce:	2601      	movs	r6, #1
			{
				tempFontStorage[k] = 0xFF;
			}
			else
			{
				tempFontStorage[k] = 0x00;
    36d0:	2500      	movs	r5, #0
				tempFontStorage[k] = 0xFF;
    36d2:	24ff      	movs	r4, #255	; 0xff
    36d4:	e013      	b.n	36fe <drawChar+0x9a>
				tempFontStorage[k] = 0x00;
    36d6:	a902      	add	r1, sp, #8
    36d8:	54cd      	strb	r5, [r1, r3]
			}
			k++;
    36da:	3301      	adds	r3, #1
    36dc:	b2db      	uxtb	r3, r3
		for(int j=0;j<8;j++)
    36de:	3a01      	subs	r2, #1
    36e0:	d306      	bcc.n	36f0 <drawChar+0x8c>
			if((CodePage437[character][i]&(1<<(7-j)))!=0)
    36e2:	0001      	movs	r1, r0
    36e4:	4111      	asrs	r1, r2
    36e6:	420e      	tst	r6, r1
    36e8:	d0f5      	beq.n	36d6 <drawChar+0x72>
				tempFontStorage[k] = 0xFF;
    36ea:	a902      	add	r1, sp, #8
    36ec:	54cc      	strb	r4, [r1, r3]
    36ee:	e7f4      	b.n	36da <drawChar+0x76>
    36f0:	3708      	adds	r7, #8
    36f2:	b2ff      	uxtb	r7, r7
    36f4:	2301      	movs	r3, #1
    36f6:	469c      	mov	ip, r3
    36f8:	44e1      	add	r9, ip
	for(uint16_t i=0; i <= 24; i++)
    36fa:	2fc8      	cmp	r7, #200	; 0xc8
    36fc:	d004      	beq.n	3708 <drawChar+0xa4>
			if((CodePage437[character][i]&(1<<(7-j)))!=0)
    36fe:	464b      	mov	r3, r9
    3700:	7818      	ldrb	r0, [r3, #0]
    3702:	003b      	movs	r3, r7
    3704:	2207      	movs	r2, #7
    3706:	e7ec      	b.n	36e2 <drawChar+0x7e>
    3708:	af39      	add	r7, sp, #228	; 0xe4
	for(uint16_t i=0; i <= 24; i++)
    370a:	0038      	movs	r0, r7
    370c:	2500      	movs	r5, #0
			{
				displayFont[i][j] = 0xFF;	
			}
			else
			{
				displayFont[i][j] = 0x00;
    370e:	2600      	movs	r6, #0
				displayFont[i][j] = 0xFF;	
    3710:	24ff      	movs	r4, #255	; 0xff
    3712:	e010      	b.n	3736 <drawChar+0xd2>
    3714:	7014      	strb	r4, [r2, #0]
			}
			k++;
    3716:	3301      	adds	r3, #1
    3718:	b2db      	uxtb	r3, r3
    371a:	3201      	adds	r2, #1
		for(uint8_t j = 0; j <= 19 ; j++)
    371c:	4282      	cmp	r2, r0
    371e:	d005      	beq.n	372c <drawChar+0xc8>
			if(tempFontStorage[k] == 0xFF)
    3720:	a902      	add	r1, sp, #8
    3722:	5cc9      	ldrb	r1, [r1, r3]
    3724:	29ff      	cmp	r1, #255	; 0xff
    3726:	d0f5      	beq.n	3714 <drawChar+0xb0>
				displayFont[i][j] = 0x00;
    3728:	7016      	strb	r6, [r2, #0]
    372a:	e7f4      	b.n	3716 <drawChar+0xb2>
    372c:	3514      	adds	r5, #20
    372e:	b2ed      	uxtb	r5, r5
    3730:	3014      	adds	r0, #20
	for(uint8_t i = 0; i <= 9 ; i++)
    3732:	2dc8      	cmp	r5, #200	; 0xc8
    3734:	d003      	beq.n	373e <drawChar+0xda>
    3736:	0002      	movs	r2, r0
    3738:	3a14      	subs	r2, #20
	uint8_t k = 0;
    373a:	002b      	movs	r3, r5
    373c:	e7f0      	b.n	3720 <drawChar+0xbc>
		}
	}
	
	//process displayFont if it is bold, first bit of consoleSGR
	if(BitVal(consoleSGR[xCharPos][yCharPos],1) == 1)
    373e:	4b31      	ldr	r3, [pc, #196]	; (3804 <drawChar+0x1a0>)
    3740:	881a      	ldrh	r2, [r3, #0]
    3742:	4b31      	ldr	r3, [pc, #196]	; (3808 <drawChar+0x1a4>)
    3744:	8819      	ldrh	r1, [r3, #0]
    3746:	0053      	lsls	r3, r2, #1
    3748:	189b      	adds	r3, r3, r2
    374a:	00db      	lsls	r3, r3, #3
    374c:	4a34      	ldr	r2, [pc, #208]	; (3820 <drawChar+0x1bc>)
    374e:	18d3      	adds	r3, r2, r3
    3750:	5c5e      	ldrb	r6, [r3, r1]
    3752:	07b3      	lsls	r3, r6, #30
    3754:	d511      	bpl.n	377a <drawChar+0x116>
    3756:	a966      	add	r1, sp, #408	; 0x198
    3758:	ac34      	add	r4, sp, #208	; 0xd0
		{
			for(uint8_t j = 0; j <= 19 ; j++)
			{
				if(displayFont[i-1][j] == 0xFF)
				{
					displayFont[i][j] = 0xFF;
    375a:	20ff      	movs	r0, #255	; 0xff
    375c:	e00a      	b.n	3774 <drawChar+0x110>
    375e:	3301      	adds	r3, #1
			for(uint8_t j = 0; j <= 19 ; j++)
    3760:	428b      	cmp	r3, r1
    3762:	d004      	beq.n	376e <drawChar+0x10a>
				if(displayFont[i-1][j] == 0xFF)
    3764:	781a      	ldrb	r2, [r3, #0]
    3766:	2aff      	cmp	r2, #255	; 0xff
    3768:	d1f9      	bne.n	375e <drawChar+0xfa>
					displayFont[i][j] = 0xFF;
    376a:	7518      	strb	r0, [r3, #20]
    376c:	e7f7      	b.n	375e <drawChar+0xfa>
    376e:	3914      	subs	r1, #20
		for(uint8_t i = 10; i >= 1 ; i--)
    3770:	42a1      	cmp	r1, r4
    3772:	d002      	beq.n	377a <drawChar+0x116>
    3774:	000b      	movs	r3, r1
    3776:	3b14      	subs	r3, #20
    3778:	e7f4      	b.n	3764 <drawChar+0x100>
			}
		}
	}
	
	//process displayfont if underscore, fourth bit of consoleSGR
	if(BitVal(consoleSGR[xCharPos][yCharPos],4) == 1)
    377a:	06f3      	lsls	r3, r6, #27
    377c:	d50a      	bpl.n	3794 <drawChar+0x130>
    377e:	ab61      	add	r3, sp, #388	; 0x184
    3780:	21c3      	movs	r1, #195	; 0xc3
    3782:	0049      	lsls	r1, r1, #1
    3784:	aa02      	add	r2, sp, #8
    3786:	4694      	mov	ip, r2
    3788:	4461      	add	r1, ip
	{
		for(int i = 0 ; i <= 9 ; i++)
		{
			displayFont[9][i] = 0xFF;
    378a:	22ff      	movs	r2, #255	; 0xff
    378c:	701a      	strb	r2, [r3, #0]
    378e:	3301      	adds	r3, #1
		for(int i = 0 ; i <= 9 ; i++)
    3790:	428b      	cmp	r3, r1
    3792:	d1fb      	bne.n	378c <drawChar+0x128>
		}
	}
	
	//Process inverse video, compare 7th bit of consoleSGR
	if(BitVal(consoleSGR[xCharPos][yCharPos],7) == 0)
    3794:	09f6      	lsrs	r6, r6, #7
    3796:	d004      	beq.n	37a2 <drawChar+0x13e>
    3798:	ab6b      	add	r3, sp, #428	; 0x1ac
    379a:	469a      	mov	sl, r3
				{
					setPixel(tempForeground);
				}
				else
				{
					setPixel(tempBackground);
    379c:	4d21      	ldr	r5, [pc, #132]	; (3824 <drawChar+0x1c0>)
					setPixel(tempForeground);
    379e:	002c      	movs	r4, r5
    37a0:	e023      	b.n	37ea <drawChar+0x186>
    37a2:	ab6b      	add	r3, sp, #428	; 0x1ac
    37a4:	469a      	mov	sl, r3
					setPixel(tempBackground);
    37a6:	4c1f      	ldr	r4, [pc, #124]	; (3824 <drawChar+0x1c0>)
					setPixel(tempForeground);
    37a8:	0025      	movs	r5, r4
    37aa:	e00d      	b.n	37c8 <drawChar+0x164>
    37ac:	9800      	ldr	r0, [sp, #0]
    37ae:	47a8      	blx	r5
    37b0:	3601      	adds	r6, #1
			for(uint8_t j = 0; j <= 19 ; j++)
    37b2:	42b7      	cmp	r7, r6
    37b4:	d005      	beq.n	37c2 <drawChar+0x15e>
				if(displayFont[i][j] == 0xFF)
    37b6:	7833      	ldrb	r3, [r6, #0]
    37b8:	2bff      	cmp	r3, #255	; 0xff
    37ba:	d0f7      	beq.n	37ac <drawChar+0x148>
					setPixel(tempBackground);
    37bc:	9801      	ldr	r0, [sp, #4]
    37be:	47a0      	blx	r4
    37c0:	e7f6      	b.n	37b0 <drawChar+0x14c>
    37c2:	3714      	adds	r7, #20
		for(uint8_t i = 0; i <= 9 ; i++)
    37c4:	45ba      	cmp	sl, r7
    37c6:	d013      	beq.n	37f0 <drawChar+0x18c>
    37c8:	003e      	movs	r6, r7
    37ca:	3e14      	subs	r6, #20
    37cc:	e7f3      	b.n	37b6 <drawChar+0x152>
					setPixel(tempBackground);
    37ce:	9801      	ldr	r0, [sp, #4]
    37d0:	47a8      	blx	r5
    37d2:	3601      	adds	r6, #1
			for(uint8_t j = 0; j <= 19 ; j++)
    37d4:	42b7      	cmp	r7, r6
    37d6:	d005      	beq.n	37e4 <drawChar+0x180>
				if(displayFont[i][j] != 0xFF)
    37d8:	7833      	ldrb	r3, [r6, #0]
    37da:	2bff      	cmp	r3, #255	; 0xff
    37dc:	d0f7      	beq.n	37ce <drawChar+0x16a>
					setPixel(tempForeground);
    37de:	9800      	ldr	r0, [sp, #0]
    37e0:	47a0      	blx	r4
    37e2:	e7f6      	b.n	37d2 <drawChar+0x16e>
    37e4:	3714      	adds	r7, #20
		for(uint8_t i = 0; i <= 9 ; i++)
    37e6:	4557      	cmp	r7, sl
    37e8:	d002      	beq.n	37f0 <drawChar+0x18c>
    37ea:	003e      	movs	r6, r7
    37ec:	3e14      	subs	r6, #20
    37ee:	e7f3      	b.n	37d8 <drawChar+0x174>
				}
			}
		}		
	}
	
	REG_PORT_OUTSET1 = LCD_CS;
    37f0:	2280      	movs	r2, #128	; 0x80
    37f2:	03d2      	lsls	r2, r2, #15
    37f4:	4b0c      	ldr	r3, [pc, #48]	; (3828 <drawChar+0x1c4>)
    37f6:	601a      	str	r2, [r3, #0]
}
    37f8:	b067      	add	sp, #412	; 0x19c
    37fa:	bc0c      	pop	{r2, r3}
    37fc:	4691      	mov	r9, r2
    37fe:	469a      	mov	sl, r3
    3800:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3802:	46c0      	nop			; (mov r8, r8)
    3804:	200002ec 	.word	0x200002ec
    3808:	200002ee 	.word	0x200002ee
    380c:	200012f4 	.word	0x200012f4
    3810:	200003f4 	.word	0x200003f4
    3814:	41004494 	.word	0x41004494
    3818:	00004235 	.word	0x00004235
    381c:	00006b38 	.word	0x00006b38
    3820:	20000b74 	.word	0x20000b74
    3824:	0000436d 	.word	0x0000436d
    3828:	41004498 	.word	0x41004498

0000382c <blinkCursor>:
*/
	
}

void blinkCursor(void)
{
    382c:	b5f0      	push	{r4, r5, r6, r7, lr}
    382e:	46d6      	mov	lr, sl
    3830:	464f      	mov	r7, r9
    3832:	b580      	push	{r7, lr}
    3834:	b0e7      	sub	sp, #412	; 0x19c
	uint16_t x = xCharPos;
    3836:	4b68      	ldr	r3, [pc, #416]	; (39d8 <blinkCursor+0x1ac>)
    3838:	881b      	ldrh	r3, [r3, #0]
	uint16_t y = yCharPos;
    383a:	4a68      	ldr	r2, [pc, #416]	; (39dc <blinkCursor+0x1b0>)
    383c:	8817      	ldrh	r7, [r2, #0]
	
	uint16_t tempForeground;
	uint16_t tempBackground;
	
	uint32_t tempColor = consoleColors[x][y];
    383e:	0059      	lsls	r1, r3, #1
    3840:	18ca      	adds	r2, r1, r3
    3842:	00d2      	lsls	r2, r2, #3
    3844:	19d2      	adds	r2, r2, r7
    3846:	0092      	lsls	r2, r2, #2
    3848:	4865      	ldr	r0, [pc, #404]	; (39e0 <blinkCursor+0x1b4>)
    384a:	5814      	ldr	r4, [r2, r0]
	
	tempForeground = (tempColor >> 16);
    384c:	0c22      	lsrs	r2, r4, #16
    384e:	9200      	str	r2, [sp, #0]
	tempBackground = consoleColors[x][y] & 0xFFFF;
    3850:	b2a2      	uxth	r2, r4
    3852:	9201      	str	r2, [sp, #4]
	
	uint8_t character = consoleDisplay[xCharPos][yCharPos];
    3854:	18c9      	adds	r1, r1, r3
    3856:	00c9      	lsls	r1, r1, #3
    3858:	4a62      	ldr	r2, [pc, #392]	; (39e4 <blinkCursor+0x1b8>)
    385a:	1851      	adds	r1, r2, r1
    385c:	5dce      	ldrb	r6, [r1, r7]
	
	uint8_t displayFont[10][20];
	uint8_t tempFontStorage[200];
	uint8_t k = 0;
	
	REG_PORT_OUTCLR1 = LCD_CS;
    385e:	2180      	movs	r1, #128	; 0x80
    3860:	03c9      	lsls	r1, r1, #15
    3862:	4a61      	ldr	r2, [pc, #388]	; (39e8 <blinkCursor+0x1bc>)
    3864:	6011      	str	r1, [r2, #0]
	setXY(x*10,y*20,x*10+9,y*20+19);
    3866:	0098      	lsls	r0, r3, #2
    3868:	181b      	adds	r3, r3, r0
    386a:	005b      	lsls	r3, r3, #1
    386c:	b298      	uxth	r0, r3
    386e:	2114      	movs	r1, #20
    3870:	4379      	muls	r1, r7
    3872:	b289      	uxth	r1, r1
    3874:	000b      	movs	r3, r1
    3876:	3313      	adds	r3, #19
    3878:	b29b      	uxth	r3, r3
    387a:	0002      	movs	r2, r0
    387c:	3209      	adds	r2, #9
    387e:	b292      	uxth	r2, r2
    3880:	4f5a      	ldr	r7, [pc, #360]	; (39ec <blinkCursor+0x1c0>)
    3882:	47b8      	blx	r7
    3884:	00b3      	lsls	r3, r6, #2
    3886:	199b      	adds	r3, r3, r6
    3888:	009a      	lsls	r2, r3, #2
    388a:	189a      	adds	r2, r3, r2
    388c:	4b58      	ldr	r3, [pc, #352]	; (39f0 <blinkCursor+0x1c4>)
    388e:	4699      	mov	r9, r3
    3890:	4491      	add	r9, r2
	uint8_t k = 0;
    3892:	2700      	movs	r7, #0
	//first transmute it into tempFontStorage
	for(uint16_t i=0; i <= 24; i++)
	{
		for(int j=0;j<8;j++)
		{
			if((CodePage437[character][i]&(1<<(7-j)))!=0)
    3894:	2601      	movs	r6, #1
			{
				tempFontStorage[k] = 0xFF;
			}
			else
			{
				tempFontStorage[k] = 0x00;
    3896:	2500      	movs	r5, #0
				tempFontStorage[k] = 0xFF;
    3898:	24ff      	movs	r4, #255	; 0xff
    389a:	e013      	b.n	38c4 <blinkCursor+0x98>
				tempFontStorage[k] = 0x00;
    389c:	a902      	add	r1, sp, #8
    389e:	54cd      	strb	r5, [r1, r3]
			}
			k++;
    38a0:	3301      	adds	r3, #1
    38a2:	b2db      	uxtb	r3, r3
		for(int j=0;j<8;j++)
    38a4:	3a01      	subs	r2, #1
    38a6:	d306      	bcc.n	38b6 <blinkCursor+0x8a>
			if((CodePage437[character][i]&(1<<(7-j)))!=0)
    38a8:	0001      	movs	r1, r0
    38aa:	4111      	asrs	r1, r2
    38ac:	420e      	tst	r6, r1
    38ae:	d0f5      	beq.n	389c <blinkCursor+0x70>
				tempFontStorage[k] = 0xFF;
    38b0:	a902      	add	r1, sp, #8
    38b2:	54cc      	strb	r4, [r1, r3]
    38b4:	e7f4      	b.n	38a0 <blinkCursor+0x74>
    38b6:	3708      	adds	r7, #8
    38b8:	b2ff      	uxtb	r7, r7
    38ba:	2301      	movs	r3, #1
    38bc:	469c      	mov	ip, r3
    38be:	44e1      	add	r9, ip
	for(uint16_t i=0; i <= 24; i++)
    38c0:	2fc8      	cmp	r7, #200	; 0xc8
    38c2:	d004      	beq.n	38ce <blinkCursor+0xa2>
			if((CodePage437[character][i]&(1<<(7-j)))!=0)
    38c4:	464b      	mov	r3, r9
    38c6:	7818      	ldrb	r0, [r3, #0]
    38c8:	003b      	movs	r3, r7
    38ca:	2207      	movs	r2, #7
    38cc:	e7ec      	b.n	38a8 <blinkCursor+0x7c>
    38ce:	af39      	add	r7, sp, #228	; 0xe4
	for(uint16_t i=0; i <= 24; i++)
    38d0:	0038      	movs	r0, r7
    38d2:	2500      	movs	r5, #0
			{
				displayFont[i][j] = 0xFF;
			}
			else
			{
				displayFont[i][j] = 0x00;
    38d4:	2600      	movs	r6, #0
				displayFont[i][j] = 0xFF;
    38d6:	24ff      	movs	r4, #255	; 0xff
    38d8:	e010      	b.n	38fc <blinkCursor+0xd0>
    38da:	7014      	strb	r4, [r2, #0]
			}
			k++;
    38dc:	3301      	adds	r3, #1
    38de:	b2db      	uxtb	r3, r3
    38e0:	3201      	adds	r2, #1
		for(uint8_t j = 0; j <= 19 ; j++)
    38e2:	4282      	cmp	r2, r0
    38e4:	d005      	beq.n	38f2 <blinkCursor+0xc6>
			if(tempFontStorage[k] == 0xFF)
    38e6:	a902      	add	r1, sp, #8
    38e8:	5cc9      	ldrb	r1, [r1, r3]
    38ea:	29ff      	cmp	r1, #255	; 0xff
    38ec:	d0f5      	beq.n	38da <blinkCursor+0xae>
				displayFont[i][j] = 0x00;
    38ee:	7016      	strb	r6, [r2, #0]
    38f0:	e7f4      	b.n	38dc <blinkCursor+0xb0>
    38f2:	3514      	adds	r5, #20
    38f4:	b2ed      	uxtb	r5, r5
    38f6:	3014      	adds	r0, #20
	for(uint8_t i = 0; i <= 9 ; i++)
    38f8:	2dc8      	cmp	r5, #200	; 0xc8
    38fa:	d003      	beq.n	3904 <blinkCursor+0xd8>
    38fc:	0002      	movs	r2, r0
    38fe:	3a14      	subs	r2, #20
	uint8_t k = 0;
    3900:	002b      	movs	r3, r5
    3902:	e7f0      	b.n	38e6 <blinkCursor+0xba>
		}
	}
	
	//process displayFont if it is bold, first bit of consoleSGR
	if(BitVal(consoleSGR[xCharPos][yCharPos],1) == 1)
    3904:	4b34      	ldr	r3, [pc, #208]	; (39d8 <blinkCursor+0x1ac>)
    3906:	881a      	ldrh	r2, [r3, #0]
    3908:	4b34      	ldr	r3, [pc, #208]	; (39dc <blinkCursor+0x1b0>)
    390a:	8819      	ldrh	r1, [r3, #0]
    390c:	0053      	lsls	r3, r2, #1
    390e:	189b      	adds	r3, r3, r2
    3910:	00db      	lsls	r3, r3, #3
    3912:	4a38      	ldr	r2, [pc, #224]	; (39f4 <blinkCursor+0x1c8>)
    3914:	18d3      	adds	r3, r2, r3
    3916:	5c5c      	ldrb	r4, [r3, r1]
    3918:	07a3      	lsls	r3, r4, #30
    391a:	d511      	bpl.n	3940 <blinkCursor+0x114>
    391c:	a966      	add	r1, sp, #408	; 0x198
    391e:	ae34      	add	r6, sp, #208	; 0xd0
		{
			for(uint8_t j = 0; j <= 19 ; j++)
			{
				if(displayFont[i-1][j] == 0xFF)
				{
					displayFont[i][j] = 0xFF;
    3920:	20ff      	movs	r0, #255	; 0xff
    3922:	e00a      	b.n	393a <blinkCursor+0x10e>
    3924:	3301      	adds	r3, #1
			for(uint8_t j = 0; j <= 19 ; j++)
    3926:	428b      	cmp	r3, r1
    3928:	d004      	beq.n	3934 <blinkCursor+0x108>
				if(displayFont[i-1][j] == 0xFF)
    392a:	781a      	ldrb	r2, [r3, #0]
    392c:	2aff      	cmp	r2, #255	; 0xff
    392e:	d1f9      	bne.n	3924 <blinkCursor+0xf8>
					displayFont[i][j] = 0xFF;
    3930:	7518      	strb	r0, [r3, #20]
    3932:	e7f7      	b.n	3924 <blinkCursor+0xf8>
    3934:	3914      	subs	r1, #20
		for(uint8_t i = 10; i >= 1 ; i--)
    3936:	42b1      	cmp	r1, r6
    3938:	d002      	beq.n	3940 <blinkCursor+0x114>
    393a:	000b      	movs	r3, r1
    393c:	3b14      	subs	r3, #20
    393e:	e7f4      	b.n	392a <blinkCursor+0xfe>
			}
		}
	}
	
	//process displayfont if underscore, fourth bit of consoleSGR
	if(BitVal(consoleSGR[xCharPos][yCharPos],4) == 1)
    3940:	06e3      	lsls	r3, r4, #27
    3942:	d50a      	bpl.n	395a <blinkCursor+0x12e>
    3944:	ab61      	add	r3, sp, #388	; 0x184
    3946:	21c3      	movs	r1, #195	; 0xc3
    3948:	0049      	lsls	r1, r1, #1
    394a:	aa02      	add	r2, sp, #8
    394c:	4694      	mov	ip, r2
    394e:	4461      	add	r1, ip
	{
		for(int i = 0 ; i <= 9 ; i++)
		{
			displayFont[9][i] = 0xFF;
    3950:	22ff      	movs	r2, #255	; 0xff
    3952:	701a      	strb	r2, [r3, #0]
    3954:	3301      	adds	r3, #1
		for(int i = 0 ; i <= 9 ; i++)
    3956:	428b      	cmp	r3, r1
    3958:	d1fb      	bne.n	3952 <blinkCursor+0x126>
		}
	}
	
	if(!cursorBlinkState)
    395a:	4b27      	ldr	r3, [pc, #156]	; (39f8 <blinkCursor+0x1cc>)
    395c:	781b      	ldrb	r3, [r3, #0]
    395e:	2b00      	cmp	r3, #0
    3960:	d004      	beq.n	396c <blinkCursor+0x140>
    3962:	ab6b      	add	r3, sp, #428	; 0x1ac
    3964:	469a      	mov	sl, r3
				{
					setPixel(tempForeground);
				}
				else
				{
					setPixel(tempBackground);
    3966:	4d25      	ldr	r5, [pc, #148]	; (39fc <blinkCursor+0x1d0>)
					setPixel(tempForeground);
    3968:	002c      	movs	r4, r5
    396a:	e023      	b.n	39b4 <blinkCursor+0x188>
    396c:	ab6b      	add	r3, sp, #428	; 0x1ac
    396e:	469a      	mov	sl, r3
					setPixel(tempBackground);
    3970:	4c22      	ldr	r4, [pc, #136]	; (39fc <blinkCursor+0x1d0>)
					setPixel(tempForeground);
    3972:	0025      	movs	r5, r4
    3974:	e00d      	b.n	3992 <blinkCursor+0x166>
    3976:	9800      	ldr	r0, [sp, #0]
    3978:	47a8      	blx	r5
    397a:	3601      	adds	r6, #1
			for(uint8_t j = 0; j <= 19 ; j++)
    397c:	42b7      	cmp	r7, r6
    397e:	d005      	beq.n	398c <blinkCursor+0x160>
				if(displayFont[i][j] == 0xFF)
    3980:	7833      	ldrb	r3, [r6, #0]
    3982:	2bff      	cmp	r3, #255	; 0xff
    3984:	d0f7      	beq.n	3976 <blinkCursor+0x14a>
					setPixel(tempBackground);
    3986:	9801      	ldr	r0, [sp, #4]
    3988:	47a0      	blx	r4
    398a:	e7f6      	b.n	397a <blinkCursor+0x14e>
    398c:	3714      	adds	r7, #20
		for(uint8_t i = 0; i <= 9 ; i++)
    398e:	45ba      	cmp	sl, r7
    3990:	d013      	beq.n	39ba <blinkCursor+0x18e>
    3992:	003e      	movs	r6, r7
    3994:	3e14      	subs	r6, #20
    3996:	e7f3      	b.n	3980 <blinkCursor+0x154>
					setPixel(tempBackground);
    3998:	9801      	ldr	r0, [sp, #4]
    399a:	47a8      	blx	r5
    399c:	3601      	adds	r6, #1
			for(uint8_t j = 0; j <= 19 ; j++)
    399e:	42b7      	cmp	r7, r6
    39a0:	d005      	beq.n	39ae <blinkCursor+0x182>
				if(displayFont[i][j] != 0xFF)
    39a2:	7833      	ldrb	r3, [r6, #0]
    39a4:	2bff      	cmp	r3, #255	; 0xff
    39a6:	d0f7      	beq.n	3998 <blinkCursor+0x16c>
					setPixel(tempForeground);
    39a8:	9800      	ldr	r0, [sp, #0]
    39aa:	47a0      	blx	r4
    39ac:	e7f6      	b.n	399c <blinkCursor+0x170>
    39ae:	3714      	adds	r7, #20
		for(uint8_t i = 0; i <= 9 ; i++)
    39b0:	4557      	cmp	r7, sl
    39b2:	d002      	beq.n	39ba <blinkCursor+0x18e>
    39b4:	003e      	movs	r6, r7
    39b6:	3e14      	subs	r6, #20
    39b8:	e7f3      	b.n	39a2 <blinkCursor+0x176>
				}
			}
		}
	}
	
	REG_PORT_OUTSET1 = LCD_CS;
    39ba:	2280      	movs	r2, #128	; 0x80
    39bc:	03d2      	lsls	r2, r2, #15
    39be:	4b10      	ldr	r3, [pc, #64]	; (3a00 <blinkCursor+0x1d4>)
    39c0:	601a      	str	r2, [r3, #0]
	
	//invert cursorBlinkState
	cursorBlinkState = !cursorBlinkState;
    39c2:	4a0d      	ldr	r2, [pc, #52]	; (39f8 <blinkCursor+0x1cc>)
    39c4:	7813      	ldrb	r3, [r2, #0]
    39c6:	2101      	movs	r1, #1
    39c8:	404b      	eors	r3, r1
    39ca:	7013      	strb	r3, [r2, #0]
	
}
    39cc:	b067      	add	sp, #412	; 0x19c
    39ce:	bc0c      	pop	{r2, r3}
    39d0:	4691      	mov	r9, r2
    39d2:	469a      	mov	sl, r3
    39d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    39d6:	46c0      	nop			; (mov r8, r8)
    39d8:	200002ec 	.word	0x200002ec
    39dc:	200002ee 	.word	0x200002ee
    39e0:	200012f4 	.word	0x200012f4
    39e4:	200003f4 	.word	0x200003f4
    39e8:	41004494 	.word	0x41004494
    39ec:	00004235 	.word	0x00004235
    39f0:	00006b38 	.word	0x00006b38
    39f4:	20000b74 	.word	0x20000b74
    39f8:	20000028 	.word	0x20000028
    39fc:	0000436d 	.word	0x0000436d
    3a00:	41004498 	.word	0x41004498

00003a04 <newLine>:
{
    3a04:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a06:	46de      	mov	lr, fp
    3a08:	4657      	mov	r7, sl
    3a0a:	464e      	mov	r6, r9
    3a0c:	4645      	mov	r5, r8
    3a0e:	b5e0      	push	{r5, r6, r7, lr}
    3a10:	b083      	sub	sp, #12
	int tempCursorx = xCharPos;
    3a12:	4b2e      	ldr	r3, [pc, #184]	; (3acc <newLine+0xc8>)
    3a14:	881b      	ldrh	r3, [r3, #0]
    3a16:	469b      	mov	fp, r3
	int tempCursory = yCharPos;
    3a18:	4b2d      	ldr	r3, [pc, #180]	; (3ad0 <newLine+0xcc>)
    3a1a:	881b      	ldrh	r3, [r3, #0]
    3a1c:	9301      	str	r3, [sp, #4]
	cursorBlinkState = true;
    3a1e:	2201      	movs	r2, #1
    3a20:	4b2c      	ldr	r3, [pc, #176]	; (3ad4 <newLine+0xd0>)
    3a22:	701a      	strb	r2, [r3, #0]
	blinkCursor();
    3a24:	4b2c      	ldr	r3, [pc, #176]	; (3ad8 <newLine+0xd4>)
    3a26:	4798      	blx	r3
    3a28:	4d2c      	ldr	r5, [pc, #176]	; (3adc <newLine+0xd8>)
    3a2a:	4f2d      	ldr	r7, [pc, #180]	; (3ae0 <newLine+0xdc>)
    3a2c:	4e2d      	ldr	r6, [pc, #180]	; (3ae4 <newLine+0xe0>)
    3a2e:	2318      	movs	r3, #24
    3a30:	469c      	mov	ip, r3
    3a32:	44ac      	add	ip, r5
    3a34:	23f0      	movs	r3, #240	; 0xf0
    3a36:	00db      	lsls	r3, r3, #3
    3a38:	18ec      	adds	r4, r5, r3
{
    3a3a:	0031      	movs	r1, r6
    3a3c:	003a      	movs	r2, r7
    3a3e:	002b      	movs	r3, r5
			consoleDisplay[i][j-1] = consoleDisplay[i][j];
    3a40:	7858      	ldrb	r0, [r3, #1]
    3a42:	7018      	strb	r0, [r3, #0]
			consoleColors[i][j-1] = consoleColors[i][j];
    3a44:	6850      	ldr	r0, [r2, #4]
    3a46:	6010      	str	r0, [r2, #0]
			consoleSGR[i][j-1] = consoleSGR[i][j];
    3a48:	7848      	ldrb	r0, [r1, #1]
    3a4a:	7008      	strb	r0, [r1, #0]
    3a4c:	3318      	adds	r3, #24
    3a4e:	3260      	adds	r2, #96	; 0x60
    3a50:	3118      	adds	r1, #24
		for(int i = 0 ; i < 80 ; i++)
    3a52:	42a3      	cmp	r3, r4
    3a54:	d1f4      	bne.n	3a40 <newLine+0x3c>
    3a56:	3501      	adds	r5, #1
    3a58:	3704      	adds	r7, #4
    3a5a:	3601      	adds	r6, #1
	for(int j = 1 ; j <= 24 ; j++)
    3a5c:	4565      	cmp	r5, ip
    3a5e:	d1e9      	bne.n	3a34 <newLine+0x30>
    3a60:	4a21      	ldr	r2, [pc, #132]	; (3ae8 <newLine+0xe4>)
    3a62:	2317      	movs	r3, #23
		consoleDisplay[k][23] = 0x20;
    3a64:	4f1d      	ldr	r7, [pc, #116]	; (3adc <newLine+0xd8>)
    3a66:	2620      	movs	r6, #32
		consoleColors[k][23] = 0x0000;
    3a68:	2100      	movs	r1, #0
		consoleSGR[k][23] = 0x00;
    3a6a:	4d1e      	ldr	r5, [pc, #120]	; (3ae4 <newLine+0xe0>)
	for(int k = 0 ; k < 80 ; k ++)
    3a6c:	4c1f      	ldr	r4, [pc, #124]	; (3aec <newLine+0xe8>)
		consoleDisplay[k][23] = 0x20;
    3a6e:	54fe      	strb	r6, [r7, r3]
		consoleColors[k][23] = 0x0000;
    3a70:	6011      	str	r1, [r2, #0]
		consoleSGR[k][23] = 0x00;
    3a72:	1958      	adds	r0, r3, r5
    3a74:	7001      	strb	r1, [r0, #0]
    3a76:	3260      	adds	r2, #96	; 0x60
    3a78:	3318      	adds	r3, #24
	for(int k = 0 ; k < 80 ; k ++)
    3a7a:	42a3      	cmp	r3, r4
    3a7c:	d1f7      	bne.n	3a6e <newLine+0x6a>
    3a7e:	2600      	movs	r6, #0
    3a80:	4b16      	ldr	r3, [pc, #88]	; (3adc <newLine+0xd8>)
    3a82:	469a      	mov	sl, r3
			xCharPos = i;
    3a84:	4b11      	ldr	r3, [pc, #68]	; (3acc <newLine+0xc8>)
    3a86:	4699      	mov	r9, r3
			yCharPos = j;
    3a88:	4b11      	ldr	r3, [pc, #68]	; (3ad0 <newLine+0xcc>)
    3a8a:	4698      	mov	r8, r3
    3a8c:	4653      	mov	r3, sl
    3a8e:	18f5      	adds	r5, r6, r3
	for(int j = 1 ; j <= 24 ; j++)
    3a90:	2400      	movs	r4, #0
			drawChar(consoleDisplay[i][j]);
    3a92:	4f17      	ldr	r7, [pc, #92]	; (3af0 <newLine+0xec>)
			xCharPos = i;
    3a94:	464b      	mov	r3, r9
    3a96:	801c      	strh	r4, [r3, #0]
			yCharPos = j;
    3a98:	4643      	mov	r3, r8
    3a9a:	801e      	strh	r6, [r3, #0]
			drawChar(consoleDisplay[i][j]);
    3a9c:	7828      	ldrb	r0, [r5, #0]
    3a9e:	47b8      	blx	r7
		for(int i = 0 ; i < 80 ; i++)
    3aa0:	3401      	adds	r4, #1
    3aa2:	3518      	adds	r5, #24
    3aa4:	2c50      	cmp	r4, #80	; 0x50
    3aa6:	d1f5      	bne.n	3a94 <newLine+0x90>
	for(int j = 0 ; j < 24 ; j++)
    3aa8:	3601      	adds	r6, #1
    3aaa:	2e18      	cmp	r6, #24
    3aac:	d1ee      	bne.n	3a8c <newLine+0x88>
	xCharPos = tempCursorx;
    3aae:	4b07      	ldr	r3, [pc, #28]	; (3acc <newLine+0xc8>)
    3ab0:	465a      	mov	r2, fp
    3ab2:	801a      	strh	r2, [r3, #0]
	yCharPos = tempCursory;
    3ab4:	4b06      	ldr	r3, [pc, #24]	; (3ad0 <newLine+0xcc>)
    3ab6:	466a      	mov	r2, sp
    3ab8:	8892      	ldrh	r2, [r2, #4]
    3aba:	801a      	strh	r2, [r3, #0]
}
    3abc:	b003      	add	sp, #12
    3abe:	bc3c      	pop	{r2, r3, r4, r5}
    3ac0:	4690      	mov	r8, r2
    3ac2:	4699      	mov	r9, r3
    3ac4:	46a2      	mov	sl, r4
    3ac6:	46ab      	mov	fp, r5
    3ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3aca:	46c0      	nop			; (mov r8, r8)
    3acc:	200002ec 	.word	0x200002ec
    3ad0:	200002ee 	.word	0x200002ee
    3ad4:	20000028 	.word	0x20000028
    3ad8:	0000382d 	.word	0x0000382d
    3adc:	200003f4 	.word	0x200003f4
    3ae0:	200012f4 	.word	0x200012f4
    3ae4:	20000b74 	.word	0x20000b74
    3ae8:	20001350 	.word	0x20001350
    3aec:	00000797 	.word	0x00000797
    3af0:	00003665 	.word	0x00003665

00003af4 <writeString>:

void writeString(const char str[])
{
    3af4:	b5f0      	push	{r4, r5, r6, r7, lr}
    3af6:	46c6      	mov	lr, r8
    3af8:	b500      	push	{lr}
    3afa:	0005      	movs	r5, r0
	int length = strlen(str);
    3afc:	4b0c      	ldr	r3, [pc, #48]	; (3b30 <writeString+0x3c>)
    3afe:	4798      	blx	r3
	for(int i = 0; i < length; i++)
    3b00:	2800      	cmp	r0, #0
    3b02:	dd11      	ble.n	3b28 <writeString+0x34>
    3b04:	002c      	movs	r4, r5
    3b06:	182d      	adds	r5, r5, r0
	{
		drawChar(str[i]);
    3b08:	4f0a      	ldr	r7, [pc, #40]	; (3b34 <writeString+0x40>)
		if(xCharPos <= 80)
    3b0a:	4e0b      	ldr	r6, [pc, #44]	; (3b38 <writeString+0x44>)
		xCharPos++;
    3b0c:	46b0      	mov	r8, r6
    3b0e:	e002      	b.n	3b16 <writeString+0x22>
    3b10:	3401      	adds	r4, #1
	for(int i = 0; i < length; i++)
    3b12:	42ac      	cmp	r4, r5
    3b14:	d008      	beq.n	3b28 <writeString+0x34>
		drawChar(str[i]);
    3b16:	7820      	ldrb	r0, [r4, #0]
    3b18:	47b8      	blx	r7
		if(xCharPos <= 80)
    3b1a:	8833      	ldrh	r3, [r6, #0]
    3b1c:	2b50      	cmp	r3, #80	; 0x50
    3b1e:	d8f7      	bhi.n	3b10 <writeString+0x1c>
		xCharPos++;
    3b20:	3301      	adds	r3, #1
    3b22:	4642      	mov	r2, r8
    3b24:	8013      	strh	r3, [r2, #0]
    3b26:	e7f3      	b.n	3b10 <writeString+0x1c>
	}
}
    3b28:	bc04      	pop	{r2}
    3b2a:	4690      	mov	r8, r2
    3b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3b2e:	46c0      	nop			; (mov r8, r8)
    3b30:	000052df 	.word	0x000052df
    3b34:	00003665 	.word	0x00003665
    3b38:	200002ec 	.word	0x200002ec

00003b3c <nullifyConsole>:

void nullifyConsole(void)
{
    3b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b3e:	4e0c      	ldr	r6, [pc, #48]	; (3b70 <nullifyConsole+0x34>)
    3b40:	4c0c      	ldr	r4, [pc, #48]	; (3b74 <nullifyConsole+0x38>)
    3b42:	480d      	ldr	r0, [pc, #52]	; (3b78 <nullifyConsole+0x3c>)
    3b44:	23f0      	movs	r3, #240	; 0xf0
    3b46:	015b      	lsls	r3, r3, #5
    3b48:	18f7      	adds	r7, r6, r3
	for(int i = 0 ; i < 80 ; i++)
	{
		for(int j = 0 ; j < 24 ; j++)
		{
			consoleDisplay[i][j] = 0x00;
    3b4a:	2100      	movs	r1, #0
			consoleSGR[i][j] = 0x00;
			consoleColors[i][j] = 0xFFFF0000;
    3b4c:	4d0b      	ldr	r5, [pc, #44]	; (3b7c <nullifyConsole+0x40>)
    3b4e:	e004      	b.n	3b5a <nullifyConsole+0x1e>
    3b50:	3660      	adds	r6, #96	; 0x60
    3b52:	3418      	adds	r4, #24
    3b54:	3018      	adds	r0, #24
	for(int i = 0 ; i < 80 ; i++)
    3b56:	42be      	cmp	r6, r7
    3b58:	d008      	beq.n	3b6c <nullifyConsole+0x30>
{
    3b5a:	0032      	movs	r2, r6
    3b5c:	2300      	movs	r3, #0
			consoleDisplay[i][j] = 0x00;
    3b5e:	54e1      	strb	r1, [r4, r3]
			consoleSGR[i][j] = 0x00;
    3b60:	54c1      	strb	r1, [r0, r3]
			consoleColors[i][j] = 0xFFFF0000;
    3b62:	c220      	stmia	r2!, {r5}
		for(int j = 0 ; j < 24 ; j++)
    3b64:	3301      	adds	r3, #1
    3b66:	2b18      	cmp	r3, #24
    3b68:	d1f9      	bne.n	3b5e <nullifyConsole+0x22>
    3b6a:	e7f1      	b.n	3b50 <nullifyConsole+0x14>
		}
	}	
}
    3b6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3b6e:	46c0      	nop			; (mov r8, r8)
    3b70:	200012f4 	.word	0x200012f4
    3b74:	200003f4 	.word	0x200003f4
    3b78:	20000b74 	.word	0x20000b74
    3b7c:	ffff0000 	.word	0xffff0000

00003b80 <scanCodesContains>:

bool scanCodesContains(int scanCode)
{
	for(int i = 0 ; i < 70 ; i++)
	{
		if(scanCodes[i] == scanCode)
    3b80:	4b09      	ldr	r3, [pc, #36]	; (3ba8 <scanCodesContains+0x28>)
    3b82:	681b      	ldr	r3, [r3, #0]
    3b84:	4298      	cmp	r0, r3
    3b86:	d00b      	beq.n	3ba0 <scanCodesContains+0x20>
    3b88:	4a07      	ldr	r2, [pc, #28]	; (3ba8 <scanCodesContains+0x28>)
    3b8a:	1d13      	adds	r3, r2, #4
    3b8c:	3219      	adds	r2, #25
    3b8e:	32ff      	adds	r2, #255	; 0xff
    3b90:	6819      	ldr	r1, [r3, #0]
    3b92:	4281      	cmp	r1, r0
    3b94:	d006      	beq.n	3ba4 <scanCodesContains+0x24>
    3b96:	3304      	adds	r3, #4
	for(int i = 0 ; i < 70 ; i++)
    3b98:	4293      	cmp	r3, r2
    3b9a:	d1f9      	bne.n	3b90 <scanCodesContains+0x10>
		{
			return true;
		}
	}
	return false;
    3b9c:	2000      	movs	r0, #0
    3b9e:	e002      	b.n	3ba6 <scanCodesContains+0x26>
			return true;
    3ba0:	2001      	movs	r0, #1
    3ba2:	e000      	b.n	3ba6 <scanCodesContains+0x26>
    3ba4:	2001      	movs	r0, #1
}
    3ba6:	4770      	bx	lr
    3ba8:	20000054 	.word	0x20000054

00003bac <keyDown>:

bool keyDown(int scancode)
{
	for(int i = 0 ; i < 20 ; i++)
	{
		if(keyDownBuffer[i] == scancode)
    3bac:	4b09      	ldr	r3, [pc, #36]	; (3bd4 <keyDown+0x28>)
    3bae:	781b      	ldrb	r3, [r3, #0]
    3bb0:	4298      	cmp	r0, r3
    3bb2:	d00a      	beq.n	3bca <keyDown+0x1e>
    3bb4:	4907      	ldr	r1, [pc, #28]	; (3bd4 <keyDown+0x28>)
    3bb6:	1c4b      	adds	r3, r1, #1
    3bb8:	3114      	adds	r1, #20
    3bba:	781a      	ldrb	r2, [r3, #0]
    3bbc:	4282      	cmp	r2, r0
    3bbe:	d006      	beq.n	3bce <keyDown+0x22>
    3bc0:	3301      	adds	r3, #1
	for(int i = 0 ; i < 20 ; i++)
    3bc2:	428b      	cmp	r3, r1
    3bc4:	d1f9      	bne.n	3bba <keyDown+0xe>
		{
			return true;
		}	
	}
	return false;
    3bc6:	2000      	movs	r0, #0
}
    3bc8:	4770      	bx	lr
			return true;
    3bca:	2001      	movs	r0, #1
    3bcc:	e7fc      	b.n	3bc8 <keyDown+0x1c>
    3bce:	2001      	movs	r0, #1
    3bd0:	e7fa      	b.n	3bc8 <keyDown+0x1c>
    3bd2:	46c0      	nop			; (mov r8, r8)
    3bd4:	2000002c 	.word	0x2000002c

00003bd8 <printKeyboardBuffer>:
{
    3bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3bda:	46d6      	mov	lr, sl
    3bdc:	464f      	mov	r7, r9
    3bde:	4646      	mov	r6, r8
    3be0:	b5c0      	push	{r6, r7, lr}
    3be2:	b0cc      	sub	sp, #304	; 0x130
	unsigned char noCase[] =
    3be4:	4dca      	ldr	r5, [pc, #808]	; (3f10 <printKeyboardBuffer+0x338>)
    3be6:	2246      	movs	r2, #70	; 0x46
    3be8:	0029      	movs	r1, r5
    3bea:	a83a      	add	r0, sp, #232	; 0xe8
    3bec:	4cc9      	ldr	r4, [pc, #804]	; (3f14 <printKeyboardBuffer+0x33c>)
    3bee:	47a0      	blx	r4
	unsigned char shiftCase[] =
    3bf0:	0029      	movs	r1, r5
    3bf2:	3148      	adds	r1, #72	; 0x48
    3bf4:	2246      	movs	r2, #70	; 0x46
    3bf6:	a828      	add	r0, sp, #160	; 0xa0
    3bf8:	47a0      	blx	r4
	unsigned char capsLockCase[] =
    3bfa:	4dc7      	ldr	r5, [pc, #796]	; (3f18 <printKeyboardBuffer+0x340>)
    3bfc:	0029      	movs	r1, r5
    3bfe:	3110      	adds	r1, #16
    3c00:	2246      	movs	r2, #70	; 0x46
    3c02:	a816      	add	r0, sp, #88	; 0x58
    3c04:	47a0      	blx	r4
	unsigned char controlCase[] =
    3c06:	0029      	movs	r1, r5
    3c08:	3158      	adds	r1, #88	; 0x58
    3c0a:	2246      	movs	r2, #70	; 0x46
    3c0c:	a804      	add	r0, sp, #16
    3c0e:	47a0      	blx	r4
    3c10:	4fc2      	ldr	r7, [pc, #776]	; (3f1c <printKeyboardBuffer+0x344>)
    3c12:	003c      	movs	r4, r7
    3c14:	3414      	adds	r4, #20
    3c16:	003d      	movs	r5, r7
	bool controled = false;
    3c18:	2300      	movs	r3, #0
    3c1a:	9303      	str	r3, [sp, #12]
	bool shifted = false;
    3c1c:	9302      	str	r3, [sp, #8]
			controled = true;
    3c1e:	2201      	movs	r2, #1
    3c20:	e004      	b.n	3c2c <printKeyboardBuffer+0x54>
		if(scanCodeBuffer[i] == 22)
    3c22:	2916      	cmp	r1, #22
    3c24:	d011      	beq.n	3c4a <printKeyboardBuffer+0x72>
    3c26:	3501      	adds	r5, #1
	for(int i=0; i<20; i++)
    3c28:	42a5      	cmp	r5, r4
    3c2a:	d010      	beq.n	3c4e <printKeyboardBuffer+0x76>
		if((scanCodeBuffer[i] == 13) | (scanCodeBuffer[i] == 49))
    3c2c:	7829      	ldrb	r1, [r5, #0]
    3c2e:	000b      	movs	r3, r1
    3c30:	3b0d      	subs	r3, #13
    3c32:	425e      	negs	r6, r3
    3c34:	415e      	adcs	r6, r3
    3c36:	46b4      	mov	ip, r6
    3c38:	0008      	movs	r0, r1
    3c3a:	3831      	subs	r0, #49	; 0x31
    3c3c:	4243      	negs	r3, r0
    3c3e:	4143      	adcs	r3, r0
    3c40:	4660      	mov	r0, ip
    3c42:	4318      	orrs	r0, r3
    3c44:	d0ed      	beq.n	3c22 <printKeyboardBuffer+0x4a>
			shifted = true;
    3c46:	9002      	str	r0, [sp, #8]
    3c48:	e7eb      	b.n	3c22 <printKeyboardBuffer+0x4a>
			controled = true;
    3c4a:	9203      	str	r2, [sp, #12]
    3c4c:	e7eb      	b.n	3c26 <printKeyboardBuffer+0x4e>
    3c4e:	4eb4      	ldr	r6, [pc, #720]	; (3f20 <printKeyboardBuffer+0x348>)
	for(int i=0; i<20; i++)
    3c50:	003c      	movs	r4, r7
		if(!keyDown(scanCodeBuffer[i]))
    3c52:	4bb4      	ldr	r3, [pc, #720]	; (3f24 <printKeyboardBuffer+0x34c>)
    3c54:	469a      	mov	sl, r3
    3c56:	e00b      	b.n	3c70 <printKeyboardBuffer+0x98>
				sendChar(0x1B);
    3c58:	301b      	adds	r0, #27
    3c5a:	4bb3      	ldr	r3, [pc, #716]	; (3f28 <printKeyboardBuffer+0x350>)
    3c5c:	4798      	blx	r3
				if(localEcho)
    3c5e:	4bb3      	ldr	r3, [pc, #716]	; (3f2c <printKeyboardBuffer+0x354>)
    3c60:	781b      	ldrb	r3, [r3, #0]
    3c62:	2b00      	cmp	r3, #0
    3c64:	d14a      	bne.n	3cfc <printKeyboardBuffer+0x124>
    3c66:	3401      	adds	r4, #1
    3c68:	3601      	adds	r6, #1
	for(int i = 0 ; i < 20 ; i++)
    3c6a:	42ac      	cmp	r4, r5
    3c6c:	d100      	bne.n	3c70 <printKeyboardBuffer+0x98>
    3c6e:	e144      	b.n	3efa <printKeyboardBuffer+0x322>
    3c70:	9401      	str	r4, [sp, #4]
		if(!keyDown(scanCodeBuffer[i]))
    3c72:	7823      	ldrb	r3, [r4, #0]
    3c74:	4698      	mov	r8, r3
    3c76:	0018      	movs	r0, r3
    3c78:	47d0      	blx	sl
    3c7a:	2800      	cmp	r0, #0
    3c7c:	d1f3      	bne.n	3c66 <printKeyboardBuffer+0x8e>
			keyDownBuffer[i] = scanCodeBuffer[i];
    3c7e:	4643      	mov	r3, r8
    3c80:	7033      	strb	r3, [r6, #0]
			if(scanCodeBuffer[i] == 0x00)  //this is escape
    3c82:	4643      	mov	r3, r8
    3c84:	2b00      	cmp	r3, #0
    3c86:	d0e7      	beq.n	3c58 <printKeyboardBuffer+0x80>
			else if(scanCodeBuffer[i] == 0x01)	//setup button, do something weird here
    3c88:	4643      	mov	r3, r8
    3c8a:	2b01      	cmp	r3, #1
    3c8c:	d0eb      	beq.n	3c66 <printKeyboardBuffer+0x8e>
			else if(scanCodeBuffer[i] == 67)		//Break key, set by break enable in settings
    3c8e:	2b43      	cmp	r3, #67	; 0x43
    3c90:	d03a      	beq.n	3d08 <printKeyboardBuffer+0x130>
			else if(scanCodeBuffer[i] == 58)   //Return key
    3c92:	4643      	mov	r3, r8
    3c94:	2b3a      	cmp	r3, #58	; 0x3a
    3c96:	d03f      	beq.n	3d18 <printKeyboardBuffer+0x140>
			else if(scanCodeBuffer[i] == 12)		//caps lock
    3c98:	4643      	mov	r3, r8
    3c9a:	2b0c      	cmp	r3, #12
    3c9c:	d078      	beq.n	3d90 <printKeyboardBuffer+0x1b8>
			else if(scanCodeBuffer[i] == 3)			//scroll lock
    3c9e:	4643      	mov	r3, r8
    3ca0:	2b03      	cmp	r3, #3
    3ca2:	d07b      	beq.n	3d9c <printKeyboardBuffer+0x1c4>
			else if(scanCodeBuffer[i] == 35) //left
    3ca4:	4643      	mov	r3, r8
    3ca6:	2b23      	cmp	r3, #35	; 0x23
    3ca8:	d07e      	beq.n	3da8 <printKeyboardBuffer+0x1d0>
			else if(scanCodeBuffer[i]  == 45)	//down
    3caa:	4643      	mov	r3, r8
    3cac:	2b2d      	cmp	r3, #45	; 0x2d
    3cae:	d100      	bne.n	3cb2 <printKeyboardBuffer+0xda>
    3cb0:	e097      	b.n	3de2 <printKeyboardBuffer+0x20a>
			else if(scanCodeBuffer[i]  == 55)	//up
    3cb2:	4643      	mov	r3, r8
    3cb4:	2b37      	cmp	r3, #55	; 0x37
    3cb6:	d100      	bne.n	3cba <printKeyboardBuffer+0xe2>
    3cb8:	e0b0      	b.n	3e1c <printKeyboardBuffer+0x244>
			else if(scanCodeBuffer[i]  == 65)	//right
    3cba:	4643      	mov	r3, r8
    3cbc:	2b41      	cmp	r3, #65	; 0x41
    3cbe:	d100      	bne.n	3cc2 <printKeyboardBuffer+0xea>
    3cc0:	e0c9      	b.n	3e56 <printKeyboardBuffer+0x27e>
				if(controled)
    3cc2:	9b03      	ldr	r3, [sp, #12]
    3cc4:	2b00      	cmp	r3, #0
    3cc6:	d000      	beq.n	3cca <printKeyboardBuffer+0xf2>
    3cc8:	e0e2      	b.n	3e90 <printKeyboardBuffer+0x2b8>
				else if(capsLock)
    3cca:	4b99      	ldr	r3, [pc, #612]	; (3f30 <printKeyboardBuffer+0x358>)
    3ccc:	781b      	ldrb	r3, [r3, #0]
    3cce:	2b00      	cmp	r3, #0
    3cd0:	d000      	beq.n	3cd4 <printKeyboardBuffer+0xfc>
    3cd2:	e0f0      	b.n	3eb6 <printKeyboardBuffer+0x2de>
				else if(shifted)
    3cd4:	9b02      	ldr	r3, [sp, #8]
    3cd6:	2b00      	cmp	r3, #0
    3cd8:	d100      	bne.n	3cdc <printKeyboardBuffer+0x104>
    3cda:	e0fd      	b.n	3ed8 <printKeyboardBuffer+0x300>
					sendChar(shiftCase[scanCodeBuffer[i]]);
    3cdc:	ab28      	add	r3, sp, #160	; 0xa0
    3cde:	4642      	mov	r2, r8
    3ce0:	5c98      	ldrb	r0, [r3, r2]
    3ce2:	4b91      	ldr	r3, [pc, #580]	; (3f28 <printKeyboardBuffer+0x350>)
    3ce4:	4798      	blx	r3
					if(localEcho)
    3ce6:	4b91      	ldr	r3, [pc, #580]	; (3f2c <printKeyboardBuffer+0x354>)
    3ce8:	781b      	ldrb	r3, [r3, #0]
    3cea:	2b00      	cmp	r3, #0
    3cec:	d0bb      	beq.n	3c66 <printKeyboardBuffer+0x8e>
						parseChar(shiftCase[scanCodeBuffer[i]]);
    3cee:	9b01      	ldr	r3, [sp, #4]
    3cf0:	781b      	ldrb	r3, [r3, #0]
    3cf2:	aa28      	add	r2, sp, #160	; 0xa0
    3cf4:	5cd0      	ldrb	r0, [r2, r3]
    3cf6:	4b8f      	ldr	r3, [pc, #572]	; (3f34 <printKeyboardBuffer+0x35c>)
    3cf8:	4798      	blx	r3
    3cfa:	e7b4      	b.n	3c66 <printKeyboardBuffer+0x8e>
					ring_put(ouroboros,0x1B);
    3cfc:	4b8e      	ldr	r3, [pc, #568]	; (3f38 <printKeyboardBuffer+0x360>)
    3cfe:	6818      	ldr	r0, [r3, #0]
    3d00:	211b      	movs	r1, #27
    3d02:	4b8e      	ldr	r3, [pc, #568]	; (3f3c <printKeyboardBuffer+0x364>)
    3d04:	4798      	blx	r3
    3d06:	e7ae      	b.n	3c66 <printKeyboardBuffer+0x8e>
				if(breakEnable)
    3d08:	4b8d      	ldr	r3, [pc, #564]	; (3f40 <printKeyboardBuffer+0x368>)
    3d0a:	781b      	ldrb	r3, [r3, #0]
    3d0c:	2b00      	cmp	r3, #0
    3d0e:	d0aa      	beq.n	3c66 <printKeyboardBuffer+0x8e>
					sendChar(0x00);
    3d10:	2000      	movs	r0, #0
    3d12:	4b85      	ldr	r3, [pc, #532]	; (3f28 <printKeyboardBuffer+0x350>)
    3d14:	4798      	blx	r3
    3d16:	e7a6      	b.n	3c66 <printKeyboardBuffer+0x8e>
				if(lineFeedNewLine == 1)  //This is Windows; CRLF
    3d18:	4b8a      	ldr	r3, [pc, #552]	; (3f44 <printKeyboardBuffer+0x36c>)
    3d1a:	681b      	ldr	r3, [r3, #0]
    3d1c:	2b01      	cmp	r3, #1
    3d1e:	d014      	beq.n	3d4a <printKeyboardBuffer+0x172>
				if(lineFeedNewLine == 2)  //This is Unix, sends LF
    3d20:	4b88      	ldr	r3, [pc, #544]	; (3f44 <printKeyboardBuffer+0x36c>)
    3d22:	681b      	ldr	r3, [r3, #0]
    3d24:	2b02      	cmp	r3, #2
    3d26:	d026      	beq.n	3d76 <printKeyboardBuffer+0x19e>
				if(lineFeedNewLine == 3)  //This is classic mac, sends CR
    3d28:	4b86      	ldr	r3, [pc, #536]	; (3f44 <printKeyboardBuffer+0x36c>)
    3d2a:	681b      	ldr	r3, [r3, #0]
    3d2c:	2b03      	cmp	r3, #3
    3d2e:	d19a      	bne.n	3c66 <printKeyboardBuffer+0x8e>
					sendChar(0x0D);
    3d30:	200d      	movs	r0, #13
    3d32:	4b7d      	ldr	r3, [pc, #500]	; (3f28 <printKeyboardBuffer+0x350>)
    3d34:	4798      	blx	r3
					if(localEcho)
    3d36:	4b7d      	ldr	r3, [pc, #500]	; (3f2c <printKeyboardBuffer+0x354>)
    3d38:	781b      	ldrb	r3, [r3, #0]
    3d3a:	2b00      	cmp	r3, #0
    3d3c:	d093      	beq.n	3c66 <printKeyboardBuffer+0x8e>
						ring_put(ouroboros, 0x0D);
    3d3e:	4b7e      	ldr	r3, [pc, #504]	; (3f38 <printKeyboardBuffer+0x360>)
    3d40:	6818      	ldr	r0, [r3, #0]
    3d42:	210d      	movs	r1, #13
    3d44:	4b7d      	ldr	r3, [pc, #500]	; (3f3c <printKeyboardBuffer+0x364>)
    3d46:	4798      	blx	r3
    3d48:	e78d      	b.n	3c66 <printKeyboardBuffer+0x8e>
					sendChar(0x0D);
    3d4a:	200d      	movs	r0, #13
    3d4c:	4b76      	ldr	r3, [pc, #472]	; (3f28 <printKeyboardBuffer+0x350>)
    3d4e:	4698      	mov	r8, r3
    3d50:	4798      	blx	r3
					sendChar(0x0A);
    3d52:	200a      	movs	r0, #10
    3d54:	47c0      	blx	r8
					if(localEcho)
    3d56:	4b75      	ldr	r3, [pc, #468]	; (3f2c <printKeyboardBuffer+0x354>)
    3d58:	781b      	ldrb	r3, [r3, #0]
    3d5a:	2b00      	cmp	r3, #0
    3d5c:	d0e0      	beq.n	3d20 <printKeyboardBuffer+0x148>
						ring_put(ouroboros, 0x0D);
    3d5e:	4b76      	ldr	r3, [pc, #472]	; (3f38 <printKeyboardBuffer+0x360>)
    3d60:	4699      	mov	r9, r3
    3d62:	210d      	movs	r1, #13
    3d64:	6818      	ldr	r0, [r3, #0]
    3d66:	4b75      	ldr	r3, [pc, #468]	; (3f3c <printKeyboardBuffer+0x364>)
    3d68:	4698      	mov	r8, r3
    3d6a:	4798      	blx	r3
						ring_put(ouroboros, 0x0A);
    3d6c:	464b      	mov	r3, r9
    3d6e:	6818      	ldr	r0, [r3, #0]
    3d70:	210a      	movs	r1, #10
    3d72:	47c0      	blx	r8
    3d74:	e7d4      	b.n	3d20 <printKeyboardBuffer+0x148>
					sendChar(0x0A);
    3d76:	200a      	movs	r0, #10
    3d78:	4b6b      	ldr	r3, [pc, #428]	; (3f28 <printKeyboardBuffer+0x350>)
    3d7a:	4798      	blx	r3
					if(localEcho)
    3d7c:	4b6b      	ldr	r3, [pc, #428]	; (3f2c <printKeyboardBuffer+0x354>)
    3d7e:	781b      	ldrb	r3, [r3, #0]
    3d80:	2b00      	cmp	r3, #0
    3d82:	d0d1      	beq.n	3d28 <printKeyboardBuffer+0x150>
						ring_put(ouroboros, 0x0A);
    3d84:	4b6c      	ldr	r3, [pc, #432]	; (3f38 <printKeyboardBuffer+0x360>)
    3d86:	6818      	ldr	r0, [r3, #0]
    3d88:	210a      	movs	r1, #10
    3d8a:	4b6c      	ldr	r3, [pc, #432]	; (3f3c <printKeyboardBuffer+0x364>)
    3d8c:	4798      	blx	r3
    3d8e:	e7cb      	b.n	3d28 <printKeyboardBuffer+0x150>
				capsLock = !capsLock;
    3d90:	4a67      	ldr	r2, [pc, #412]	; (3f30 <printKeyboardBuffer+0x358>)
    3d92:	7813      	ldrb	r3, [r2, #0]
    3d94:	2101      	movs	r1, #1
    3d96:	404b      	eors	r3, r1
    3d98:	7013      	strb	r3, [r2, #0]
    3d9a:	e764      	b.n	3c66 <printKeyboardBuffer+0x8e>
				scrollLock = !scrollLock;
    3d9c:	4a6a      	ldr	r2, [pc, #424]	; (3f48 <printKeyboardBuffer+0x370>)
    3d9e:	7813      	ldrb	r3, [r2, #0]
    3da0:	2101      	movs	r1, #1
    3da2:	404b      	eors	r3, r1
    3da4:	7013      	strb	r3, [r2, #0]
    3da6:	e75e      	b.n	3c66 <printKeyboardBuffer+0x8e>
				sendChar(0x1B);
    3da8:	201b      	movs	r0, #27
    3daa:	4b5f      	ldr	r3, [pc, #380]	; (3f28 <printKeyboardBuffer+0x350>)
    3dac:	4698      	mov	r8, r3
    3dae:	4798      	blx	r3
				sendChar(0x5B);
    3db0:	205b      	movs	r0, #91	; 0x5b
    3db2:	47c0      	blx	r8
				sendChar(0x44);
    3db4:	2044      	movs	r0, #68	; 0x44
    3db6:	47c0      	blx	r8
				if(localEcho)
    3db8:	4b5c      	ldr	r3, [pc, #368]	; (3f2c <printKeyboardBuffer+0x354>)
    3dba:	781b      	ldrb	r3, [r3, #0]
    3dbc:	2b00      	cmp	r3, #0
    3dbe:	d100      	bne.n	3dc2 <printKeyboardBuffer+0x1ea>
    3dc0:	e751      	b.n	3c66 <printKeyboardBuffer+0x8e>
					ring_put(ouroboros, 0x1B);
    3dc2:	4b5d      	ldr	r3, [pc, #372]	; (3f38 <printKeyboardBuffer+0x360>)
    3dc4:	4699      	mov	r9, r3
    3dc6:	211b      	movs	r1, #27
    3dc8:	6818      	ldr	r0, [r3, #0]
    3dca:	4b5c      	ldr	r3, [pc, #368]	; (3f3c <printKeyboardBuffer+0x364>)
    3dcc:	4698      	mov	r8, r3
    3dce:	4798      	blx	r3
					ring_put(ouroboros, 0x5B);
    3dd0:	215b      	movs	r1, #91	; 0x5b
    3dd2:	464b      	mov	r3, r9
    3dd4:	6818      	ldr	r0, [r3, #0]
    3dd6:	47c0      	blx	r8
					ring_put(ouroboros, 0x44);
    3dd8:	464b      	mov	r3, r9
    3dda:	6818      	ldr	r0, [r3, #0]
    3ddc:	2144      	movs	r1, #68	; 0x44
    3dde:	47c0      	blx	r8
    3de0:	e741      	b.n	3c66 <printKeyboardBuffer+0x8e>
				sendChar(0x1B);
    3de2:	201b      	movs	r0, #27
    3de4:	4b50      	ldr	r3, [pc, #320]	; (3f28 <printKeyboardBuffer+0x350>)
    3de6:	4698      	mov	r8, r3
    3de8:	4798      	blx	r3
				sendChar(0x5B);
    3dea:	205b      	movs	r0, #91	; 0x5b
    3dec:	47c0      	blx	r8
				sendChar(0x42);
    3dee:	2042      	movs	r0, #66	; 0x42
    3df0:	47c0      	blx	r8
				if(localEcho)
    3df2:	4b4e      	ldr	r3, [pc, #312]	; (3f2c <printKeyboardBuffer+0x354>)
    3df4:	781b      	ldrb	r3, [r3, #0]
    3df6:	2b00      	cmp	r3, #0
    3df8:	d100      	bne.n	3dfc <printKeyboardBuffer+0x224>
    3dfa:	e734      	b.n	3c66 <printKeyboardBuffer+0x8e>
					ring_put(ouroboros, 0x1B);
    3dfc:	4b4e      	ldr	r3, [pc, #312]	; (3f38 <printKeyboardBuffer+0x360>)
    3dfe:	4699      	mov	r9, r3
    3e00:	211b      	movs	r1, #27
    3e02:	6818      	ldr	r0, [r3, #0]
    3e04:	4b4d      	ldr	r3, [pc, #308]	; (3f3c <printKeyboardBuffer+0x364>)
    3e06:	4698      	mov	r8, r3
    3e08:	4798      	blx	r3
					ring_put(ouroboros, 0x5B);
    3e0a:	215b      	movs	r1, #91	; 0x5b
    3e0c:	464b      	mov	r3, r9
    3e0e:	6818      	ldr	r0, [r3, #0]
    3e10:	47c0      	blx	r8
					ring_put(ouroboros, 0x42);
    3e12:	464b      	mov	r3, r9
    3e14:	6818      	ldr	r0, [r3, #0]
    3e16:	2142      	movs	r1, #66	; 0x42
    3e18:	47c0      	blx	r8
    3e1a:	e724      	b.n	3c66 <printKeyboardBuffer+0x8e>
				sendChar(0x1B);
    3e1c:	201b      	movs	r0, #27
    3e1e:	4b42      	ldr	r3, [pc, #264]	; (3f28 <printKeyboardBuffer+0x350>)
    3e20:	4698      	mov	r8, r3
    3e22:	4798      	blx	r3
				sendChar(0x5B);
    3e24:	205b      	movs	r0, #91	; 0x5b
    3e26:	47c0      	blx	r8
				sendChar(0x41);
    3e28:	2041      	movs	r0, #65	; 0x41
    3e2a:	47c0      	blx	r8
				if(localEcho)
    3e2c:	4b3f      	ldr	r3, [pc, #252]	; (3f2c <printKeyboardBuffer+0x354>)
    3e2e:	781b      	ldrb	r3, [r3, #0]
    3e30:	2b00      	cmp	r3, #0
    3e32:	d100      	bne.n	3e36 <printKeyboardBuffer+0x25e>
    3e34:	e717      	b.n	3c66 <printKeyboardBuffer+0x8e>
					ring_put(ouroboros, 0x1B);
    3e36:	4b40      	ldr	r3, [pc, #256]	; (3f38 <printKeyboardBuffer+0x360>)
    3e38:	4699      	mov	r9, r3
    3e3a:	211b      	movs	r1, #27
    3e3c:	6818      	ldr	r0, [r3, #0]
    3e3e:	4b3f      	ldr	r3, [pc, #252]	; (3f3c <printKeyboardBuffer+0x364>)
    3e40:	4698      	mov	r8, r3
    3e42:	4798      	blx	r3
					ring_put(ouroboros, 0x5B);
    3e44:	215b      	movs	r1, #91	; 0x5b
    3e46:	464b      	mov	r3, r9
    3e48:	6818      	ldr	r0, [r3, #0]
    3e4a:	47c0      	blx	r8
					ring_put(ouroboros, 0x41);
    3e4c:	464b      	mov	r3, r9
    3e4e:	6818      	ldr	r0, [r3, #0]
    3e50:	2141      	movs	r1, #65	; 0x41
    3e52:	47c0      	blx	r8
    3e54:	e707      	b.n	3c66 <printKeyboardBuffer+0x8e>
				sendChar(0x1B);
    3e56:	201b      	movs	r0, #27
    3e58:	4b33      	ldr	r3, [pc, #204]	; (3f28 <printKeyboardBuffer+0x350>)
    3e5a:	4698      	mov	r8, r3
    3e5c:	4798      	blx	r3
				sendChar(0x5B);
    3e5e:	205b      	movs	r0, #91	; 0x5b
    3e60:	47c0      	blx	r8
				sendChar(0x43);
    3e62:	2043      	movs	r0, #67	; 0x43
    3e64:	47c0      	blx	r8
				if(localEcho)
    3e66:	4b31      	ldr	r3, [pc, #196]	; (3f2c <printKeyboardBuffer+0x354>)
    3e68:	781b      	ldrb	r3, [r3, #0]
    3e6a:	2b00      	cmp	r3, #0
    3e6c:	d100      	bne.n	3e70 <printKeyboardBuffer+0x298>
    3e6e:	e6fa      	b.n	3c66 <printKeyboardBuffer+0x8e>
					ring_put(ouroboros, 0x1B);
    3e70:	4b31      	ldr	r3, [pc, #196]	; (3f38 <printKeyboardBuffer+0x360>)
    3e72:	4699      	mov	r9, r3
    3e74:	211b      	movs	r1, #27
    3e76:	6818      	ldr	r0, [r3, #0]
    3e78:	4b30      	ldr	r3, [pc, #192]	; (3f3c <printKeyboardBuffer+0x364>)
    3e7a:	4698      	mov	r8, r3
    3e7c:	4798      	blx	r3
					ring_put(ouroboros, 0x5B);
    3e7e:	215b      	movs	r1, #91	; 0x5b
    3e80:	464b      	mov	r3, r9
    3e82:	6818      	ldr	r0, [r3, #0]
    3e84:	47c0      	blx	r8
					ring_put(ouroboros, 0x43);
    3e86:	464b      	mov	r3, r9
    3e88:	6818      	ldr	r0, [r3, #0]
    3e8a:	2143      	movs	r1, #67	; 0x43
    3e8c:	47c0      	blx	r8
    3e8e:	e6ea      	b.n	3c66 <printKeyboardBuffer+0x8e>
					sendChar(controlCase[scanCodeBuffer[i]]);
    3e90:	ab04      	add	r3, sp, #16
    3e92:	4642      	mov	r2, r8
    3e94:	5c98      	ldrb	r0, [r3, r2]
    3e96:	4b24      	ldr	r3, [pc, #144]	; (3f28 <printKeyboardBuffer+0x350>)
    3e98:	4798      	blx	r3
					if(localEcho)
    3e9a:	4b24      	ldr	r3, [pc, #144]	; (3f2c <printKeyboardBuffer+0x354>)
    3e9c:	781b      	ldrb	r3, [r3, #0]
    3e9e:	2b00      	cmp	r3, #0
    3ea0:	d100      	bne.n	3ea4 <printKeyboardBuffer+0x2cc>
    3ea2:	e6e0      	b.n	3c66 <printKeyboardBuffer+0x8e>
						ring_put(ouroboros, controlCase[scanCodeBuffer[i]]);
    3ea4:	9b01      	ldr	r3, [sp, #4]
    3ea6:	781b      	ldrb	r3, [r3, #0]
    3ea8:	aa04      	add	r2, sp, #16
    3eaa:	5cd1      	ldrb	r1, [r2, r3]
    3eac:	4b22      	ldr	r3, [pc, #136]	; (3f38 <printKeyboardBuffer+0x360>)
    3eae:	6818      	ldr	r0, [r3, #0]
    3eb0:	4b22      	ldr	r3, [pc, #136]	; (3f3c <printKeyboardBuffer+0x364>)
    3eb2:	4798      	blx	r3
    3eb4:	e6d7      	b.n	3c66 <printKeyboardBuffer+0x8e>
					sendChar(capsLockCase[scanCodeBuffer[i]]);
    3eb6:	ab16      	add	r3, sp, #88	; 0x58
    3eb8:	4642      	mov	r2, r8
    3eba:	5c98      	ldrb	r0, [r3, r2]
    3ebc:	4b1a      	ldr	r3, [pc, #104]	; (3f28 <printKeyboardBuffer+0x350>)
    3ebe:	4798      	blx	r3
					if(localEcho)
    3ec0:	4b1a      	ldr	r3, [pc, #104]	; (3f2c <printKeyboardBuffer+0x354>)
    3ec2:	781b      	ldrb	r3, [r3, #0]
    3ec4:	2b00      	cmp	r3, #0
    3ec6:	d100      	bne.n	3eca <printKeyboardBuffer+0x2f2>
    3ec8:	e6cd      	b.n	3c66 <printKeyboardBuffer+0x8e>
						parseChar(capsLockCase[scanCodeBuffer[i]]);
    3eca:	9b01      	ldr	r3, [sp, #4]
    3ecc:	781b      	ldrb	r3, [r3, #0]
    3ece:	aa16      	add	r2, sp, #88	; 0x58
    3ed0:	5cd0      	ldrb	r0, [r2, r3]
    3ed2:	4b18      	ldr	r3, [pc, #96]	; (3f34 <printKeyboardBuffer+0x35c>)
    3ed4:	4798      	blx	r3
    3ed6:	e6c6      	b.n	3c66 <printKeyboardBuffer+0x8e>
					sendChar(noCase[scanCodeBuffer[i]]);
    3ed8:	ab3a      	add	r3, sp, #232	; 0xe8
    3eda:	4642      	mov	r2, r8
    3edc:	5c98      	ldrb	r0, [r3, r2]
    3ede:	4b12      	ldr	r3, [pc, #72]	; (3f28 <printKeyboardBuffer+0x350>)
    3ee0:	4798      	blx	r3
					if(localEcho)
    3ee2:	4b12      	ldr	r3, [pc, #72]	; (3f2c <printKeyboardBuffer+0x354>)
    3ee4:	781b      	ldrb	r3, [r3, #0]
    3ee6:	2b00      	cmp	r3, #0
    3ee8:	d100      	bne.n	3eec <printKeyboardBuffer+0x314>
    3eea:	e6bc      	b.n	3c66 <printKeyboardBuffer+0x8e>
						parseChar(noCase[scanCodeBuffer[i]]);
    3eec:	9b01      	ldr	r3, [sp, #4]
    3eee:	781b      	ldrb	r3, [r3, #0]
    3ef0:	aa3a      	add	r2, sp, #232	; 0xe8
    3ef2:	5cd0      	ldrb	r0, [r2, r3]
    3ef4:	4b0f      	ldr	r3, [pc, #60]	; (3f34 <printKeyboardBuffer+0x35c>)
    3ef6:	4798      	blx	r3
    3ef8:	e6b5      	b.n	3c66 <printKeyboardBuffer+0x8e>
		scanCodeBuffer[i] = 0xFF;
    3efa:	23ff      	movs	r3, #255	; 0xff
    3efc:	703b      	strb	r3, [r7, #0]
    3efe:	3701      	adds	r7, #1
	for(int i = 0 ; i < 20 ; i++)
    3f00:	42bc      	cmp	r4, r7
    3f02:	d1fb      	bne.n	3efc <printKeyboardBuffer+0x324>
}
    3f04:	b04c      	add	sp, #304	; 0x130
    3f06:	bc1c      	pop	{r2, r3, r4}
    3f08:	4690      	mov	r8, r2
    3f0a:	4699      	mov	r9, r3
    3f0c:	46a2      	mov	sl, r4
    3f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3f10:	00008438 	.word	0x00008438
    3f14:	00004e91 	.word	0x00004e91
    3f18:	000084b8 	.word	0x000084b8
    3f1c:	20000040 	.word	0x20000040
    3f20:	2000002c 	.word	0x2000002c
    3f24:	00003bad 	.word	0x00003bad
    3f28:	00001c71 	.word	0x00001c71
    3f2c:	20000194 	.word	0x20000194
    3f30:	20000369 	.word	0x20000369
    3f34:	000018c9 	.word	0x000018c9
    3f38:	20000390 	.word	0x20000390
    3f3c:	00000141 	.word	0x00000141
    3f40:	200002f0 	.word	0x200002f0
    3f44:	20000190 	.word	0x20000190
    3f48:	20000389 	.word	0x20000389

00003f4c <removeFromKeyDown>:

void removeFromKeyDown(int scancode)
{
    3f4c:	b510      	push	{r4, lr}
    3f4e:	4b07      	ldr	r3, [pc, #28]	; (3f6c <removeFromKeyDown+0x20>)
    3f50:	0019      	movs	r1, r3
    3f52:	3114      	adds	r1, #20
	for(int i = 0 ; i < 20 ; i++)
	{
		if(keyDownBuffer[i] == scancode)
		{
			keyDownBuffer[i] = 0xFF;
    3f54:	24ff      	movs	r4, #255	; 0xff
    3f56:	e002      	b.n	3f5e <removeFromKeyDown+0x12>
    3f58:	3301      	adds	r3, #1
	for(int i = 0 ; i < 20 ; i++)
    3f5a:	428b      	cmp	r3, r1
    3f5c:	d004      	beq.n	3f68 <removeFromKeyDown+0x1c>
		if(keyDownBuffer[i] == scancode)
    3f5e:	781a      	ldrb	r2, [r3, #0]
    3f60:	4282      	cmp	r2, r0
    3f62:	d1f9      	bne.n	3f58 <removeFromKeyDown+0xc>
			keyDownBuffer[i] = 0xFF;
    3f64:	701c      	strb	r4, [r3, #0]
    3f66:	e7f7      	b.n	3f58 <removeFromKeyDown+0xc>
		}
	}
}
    3f68:	bd10      	pop	{r4, pc}
    3f6a:	46c0      	nop			; (mov r8, r8)
    3f6c:	2000002c 	.word	0x2000002c

00003f70 <readKeyboard>:
{
    3f70:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f72:	46de      	mov	lr, fp
    3f74:	4657      	mov	r7, sl
    3f76:	464e      	mov	r6, r9
    3f78:	4645      	mov	r5, r8
    3f7a:	b5e0      	push	{r5, r6, r7, lr}
    3f7c:	b083      	sub	sp, #12
    3f7e:	4e6d      	ldr	r6, [pc, #436]	; (4134 <readKeyboard+0x1c4>)
    3f80:	0031      	movs	r1, r6
    3f82:	3119      	adds	r1, #25
    3f84:	31ff      	adds	r1, #255	; 0xff
    3f86:	0033      	movs	r3, r6
		scanCodes[i] = 0xFF;
    3f88:	22ff      	movs	r2, #255	; 0xff
    3f8a:	c304      	stmia	r3!, {r2}
	for(i = 0 ; i < 70 ; i++)
    3f8c:	428b      	cmp	r3, r1
    3f8e:	d1fc      	bne.n	3f8a <readKeyboard+0x1a>
	PORT->Group[0].WRCONFIG.bit.DRVSTR = 1;
    3f90:	4a69      	ldr	r2, [pc, #420]	; (4138 <readKeyboard+0x1c8>)
    3f92:	6a91      	ldr	r1, [r2, #40]	; 0x28
    3f94:	2380      	movs	r3, #128	; 0x80
    3f96:	03db      	lsls	r3, r3, #15
    3f98:	430b      	orrs	r3, r1
    3f9a:	6293      	str	r3, [r2, #40]	; 0x28
    3f9c:	4c67      	ldr	r4, [pc, #412]	; (413c <readKeyboard+0x1cc>)
    3f9e:	341c      	adds	r4, #28
    3fa0:	4b66      	ldr	r3, [pc, #408]	; (413c <readKeyboard+0x1cc>)
		REG_PORT_DIRSET0 = kb_col[i];
    3fa2:	4867      	ldr	r0, [pc, #412]	; (4140 <readKeyboard+0x1d0>)
		REG_PORT_OUTCLR0 = kb_col[i];
    3fa4:	4967      	ldr	r1, [pc, #412]	; (4144 <readKeyboard+0x1d4>)
		REG_PORT_DIRSET0 = kb_col[i];
    3fa6:	681a      	ldr	r2, [r3, #0]
    3fa8:	6002      	str	r2, [r0, #0]
		REG_PORT_OUTCLR0 = kb_col[i];
    3faa:	cb04      	ldmia	r3!, {r2}
    3fac:	600a      	str	r2, [r1, #0]
	for (i = 0; i < NUM_COL; i++) {
    3fae:	42a3      	cmp	r3, r4
    3fb0:	d1f9      	bne.n	3fa6 <readKeyboard+0x36>
    3fb2:	2200      	movs	r2, #0
		REG_PORT_DIRCLR0 = kb_row[i];
    3fb4:	4b64      	ldr	r3, [pc, #400]	; (4148 <readKeyboard+0x1d8>)
    3fb6:	469c      	mov	ip, r3
    3fb8:	4f64      	ldr	r7, [pc, #400]	; (414c <readKeyboard+0x1dc>)
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.PULLEN = 1;
    3fba:	4d65      	ldr	r5, [pc, #404]	; (4150 <readKeyboard+0x1e0>)
    3fbc:	2404      	movs	r4, #4
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.INEN = 1;
    3fbe:	2002      	movs	r0, #2
		REG_PORT_DIRCLR0 = kb_row[i];
    3fc0:	4663      	mov	r3, ip
    3fc2:	58d3      	ldr	r3, [r2, r3]
    3fc4:	603b      	str	r3, [r7, #0]
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.PULLEN = 1;
    3fc6:	5953      	ldr	r3, [r2, r5]
    3fc8:	4962      	ldr	r1, [pc, #392]	; (4154 <readKeyboard+0x1e4>)
    3fca:	4688      	mov	r8, r1
    3fcc:	4443      	add	r3, r8
    3fce:	7819      	ldrb	r1, [r3, #0]
    3fd0:	4321      	orrs	r1, r4
    3fd2:	7019      	strb	r1, [r3, #0]
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.INEN = 1;
    3fd4:	7819      	ldrb	r1, [r3, #0]
    3fd6:	4301      	orrs	r1, r0
    3fd8:	7019      	strb	r1, [r3, #0]
    3fda:	3204      	adds	r2, #4
	for (i = 0; i < NUM_ROW; i++) {
    3fdc:	2a28      	cmp	r2, #40	; 0x28
    3fde:	d1ef      	bne.n	3fc0 <readKeyboard+0x50>
    3fe0:	4b56      	ldr	r3, [pc, #344]	; (413c <readKeyboard+0x1cc>)
    3fe2:	4699      	mov	r9, r3
    3fe4:	2300      	movs	r3, #0
    3fe6:	4698      	mov	r8, r3
    3fe8:	2200      	movs	r2, #0
		REG_PORT_OUTSET0 = kb_col[i];
    3fea:	4b5b      	ldr	r3, [pc, #364]	; (4158 <readKeyboard+0x1e8>)
    3fec:	469b      	mov	fp, r3
			if((PORT->Group[0].IN.reg & kb_row[j]) != 0) {
    3fee:	4d52      	ldr	r5, [pc, #328]	; (4138 <readKeyboard+0x1c8>)
				scanCodes[scanCodeIndex] = (i * NUM_ROW) + j;
    3ff0:	4b50      	ldr	r3, [pc, #320]	; (4134 <readKeyboard+0x1c4>)
    3ff2:	469c      	mov	ip, r3
		REG_PORT_OUTCLR0 = kb_col[i];
    3ff4:	4b53      	ldr	r3, [pc, #332]	; (4144 <readKeyboard+0x1d4>)
    3ff6:	469a      	mov	sl, r3
    3ff8:	9601      	str	r6, [sp, #4]
    3ffa:	464e      	mov	r6, r9
    3ffc:	4647      	mov	r7, r8
    3ffe:	e015      	b.n	402c <readKeyboard+0xbc>
    4000:	3304      	adds	r3, #4
    4002:	3101      	adds	r1, #1
		for (j = 0; j < NUM_ROW; j++) {	
    4004:	42a3      	cmp	r3, r4
    4006:	d008      	beq.n	401a <readKeyboard+0xaa>
			if((PORT->Group[0].IN.reg & kb_row[j]) != 0) {
    4008:	6a28      	ldr	r0, [r5, #32]
    400a:	681e      	ldr	r6, [r3, #0]
    400c:	4206      	tst	r6, r0
    400e:	d0f7      	beq.n	4000 <readKeyboard+0x90>
				scanCodes[scanCodeIndex] = (i * NUM_ROW) + j;
    4010:	0090      	lsls	r0, r2, #2
    4012:	4666      	mov	r6, ip
    4014:	5181      	str	r1, [r0, r6]
				scanCodeIndex++;
    4016:	3201      	adds	r2, #1
    4018:	e7f2      	b.n	4000 <readKeyboard+0x90>
    401a:	9e00      	ldr	r6, [sp, #0]
		REG_PORT_OUTCLR0 = kb_col[i];
    401c:	4649      	mov	r1, r9
    401e:	6809      	ldr	r1, [r1, #0]
    4020:	4650      	mov	r0, sl
    4022:	6001      	str	r1, [r0, #0]
    4024:	3604      	adds	r6, #4
    4026:	370a      	adds	r7, #10
	for (i = 0; i < NUM_COL; i++) {
    4028:	2f46      	cmp	r7, #70	; 0x46
    402a:	d00a      	beq.n	4042 <readKeyboard+0xd2>
    402c:	46b1      	mov	r9, r6
		REG_PORT_OUTSET0 = kb_col[i];
    402e:	465b      	mov	r3, fp
    4030:	6831      	ldr	r1, [r6, #0]
    4032:	6019      	str	r1, [r3, #0]
    4034:	4b44      	ldr	r3, [pc, #272]	; (4148 <readKeyboard+0x1d8>)
    4036:	4698      	mov	r8, r3
    4038:	001c      	movs	r4, r3
    403a:	3428      	adds	r4, #40	; 0x28
    403c:	0039      	movs	r1, r7
    403e:	9600      	str	r6, [sp, #0]
    4040:	e7e2      	b.n	4008 <readKeyboard+0x98>
    4042:	4647      	mov	r7, r8
    4044:	9e01      	ldr	r6, [sp, #4]
    4046:	4641      	mov	r1, r8
		REG_PORT_DIRSET0 = kb_row[i];
    4048:	4d3d      	ldr	r5, [pc, #244]	; (4140 <readKeyboard+0x1d0>)
		REG_PORT_OUTCLR0 = kb_row[i];
    404a:	4c3e      	ldr	r4, [pc, #248]	; (4144 <readKeyboard+0x1d4>)
		REG_PORT_DIRSET0 = kb_row[i];
    404c:	6808      	ldr	r0, [r1, #0]
    404e:	6028      	str	r0, [r5, #0]
		REG_PORT_OUTCLR0 = kb_row[i];
    4050:	c901      	ldmia	r1!, {r0}
    4052:	6020      	str	r0, [r4, #0]
	for (i = 0; i < NUM_ROW; i++) {
    4054:	4299      	cmp	r1, r3
    4056:	d1f9      	bne.n	404c <readKeyboard+0xdc>
    4058:	2100      	movs	r1, #0
		REG_PORT_DIRCLR0 = kb_col[i];
    405a:	4b38      	ldr	r3, [pc, #224]	; (413c <readKeyboard+0x1cc>)
    405c:	4699      	mov	r9, r3
    405e:	4b3b      	ldr	r3, [pc, #236]	; (414c <readKeyboard+0x1dc>)
    4060:	4698      	mov	r8, r3
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.PULLEN = 1;
    4062:	4b3e      	ldr	r3, [pc, #248]	; (415c <readKeyboard+0x1ec>)
    4064:	469c      	mov	ip, r3
    4066:	2504      	movs	r5, #4
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.INEN = 1;
    4068:	2402      	movs	r4, #2
		REG_PORT_DIRCLR0 = kb_col[i];
    406a:	4643      	mov	r3, r8
    406c:	4648      	mov	r0, r9
    406e:	5808      	ldr	r0, [r1, r0]
    4070:	6018      	str	r0, [r3, #0]
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.PULLEN = 1;
    4072:	4663      	mov	r3, ip
    4074:	58cb      	ldr	r3, [r1, r3]
    4076:	4837      	ldr	r0, [pc, #220]	; (4154 <readKeyboard+0x1e4>)
    4078:	4682      	mov	sl, r0
    407a:	4453      	add	r3, sl
    407c:	7818      	ldrb	r0, [r3, #0]
    407e:	4328      	orrs	r0, r5
    4080:	7018      	strb	r0, [r3, #0]
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.INEN = 1;
    4082:	7818      	ldrb	r0, [r3, #0]
    4084:	4320      	orrs	r0, r4
    4086:	7018      	strb	r0, [r3, #0]
    4088:	3104      	adds	r1, #4
	for (i = 0; i < NUM_COL; i++) {
    408a:	291c      	cmp	r1, #28
    408c:	d1ed      	bne.n	406a <readKeyboard+0xfa>
    408e:	2300      	movs	r3, #0
    4090:	469c      	mov	ip, r3
		REG_PORT_OUTSET0 = kb_row[i];
    4092:	4b31      	ldr	r3, [pc, #196]	; (4158 <readKeyboard+0x1e8>)
    4094:	469b      	mov	fp, r3
			if((PORT->Group[0].IN.reg & kb_col[j]) != 0)
    4096:	4d28      	ldr	r5, [pc, #160]	; (4138 <readKeyboard+0x1c8>)
				scanCodes[scanCodeIndex] = (j * NUM_ROW) + i;
    4098:	4b26      	ldr	r3, [pc, #152]	; (4134 <readKeyboard+0x1c4>)
    409a:	4698      	mov	r8, r3
		REG_PORT_OUTCLR0 = kb_row[i];
    409c:	4b29      	ldr	r3, [pc, #164]	; (4144 <readKeyboard+0x1d4>)
    409e:	469a      	mov	sl, r3
    40a0:	46b1      	mov	r9, r6
    40a2:	003e      	movs	r6, r7
    40a4:	4667      	mov	r7, ip
    40a6:	e015      	b.n	40d4 <readKeyboard+0x164>
    40a8:	3104      	adds	r1, #4
    40aa:	330a      	adds	r3, #10
		for (j = 0; j < NUM_COL; j++) {
    40ac:	42a3      	cmp	r3, r4
    40ae:	d008      	beq.n	40c2 <readKeyboard+0x152>
			if((PORT->Group[0].IN.reg & kb_col[j]) != 0)
    40b0:	6a28      	ldr	r0, [r5, #32]
    40b2:	680e      	ldr	r6, [r1, #0]
    40b4:	4206      	tst	r6, r0
    40b6:	d0f7      	beq.n	40a8 <readKeyboard+0x138>
				scanCodes[scanCodeIndex] = (j * NUM_ROW) + i;
    40b8:	0090      	lsls	r0, r2, #2
    40ba:	4646      	mov	r6, r8
    40bc:	5183      	str	r3, [r0, r6]
				scanCodeIndex++;
    40be:	3201      	adds	r2, #1
    40c0:	e7f2      	b.n	40a8 <readKeyboard+0x138>
    40c2:	9e00      	ldr	r6, [sp, #0]
		REG_PORT_OUTCLR0 = kb_row[i];
    40c4:	4663      	mov	r3, ip
    40c6:	681b      	ldr	r3, [r3, #0]
    40c8:	4651      	mov	r1, sl
    40ca:	600b      	str	r3, [r1, #0]
	for (i = 0; i < NUM_ROW; i++) {
    40cc:	3701      	adds	r7, #1
    40ce:	3604      	adds	r6, #4
    40d0:	2f0a      	cmp	r7, #10
    40d2:	d009      	beq.n	40e8 <readKeyboard+0x178>
    40d4:	46b4      	mov	ip, r6
		REG_PORT_OUTSET0 = kb_row[i];
    40d6:	465b      	mov	r3, fp
    40d8:	6831      	ldr	r1, [r6, #0]
    40da:	6019      	str	r1, [r3, #0]
    40dc:	003b      	movs	r3, r7
    40de:	003c      	movs	r4, r7
    40e0:	3446      	adds	r4, #70	; 0x46
    40e2:	4916      	ldr	r1, [pc, #88]	; (413c <readKeyboard+0x1cc>)
    40e4:	9600      	str	r6, [sp, #0]
    40e6:	e7e3      	b.n	40b0 <readKeyboard+0x140>
    40e8:	464e      	mov	r6, r9
	for(i = 0 ; i < scanCodeIndex ; i++)
    40ea:	2a00      	cmp	r2, #0
    40ec:	dd08      	ble.n	4100 <readKeyboard+0x190>
    40ee:	4b1c      	ldr	r3, [pc, #112]	; (4160 <readKeyboard+0x1f0>)
    40f0:	0092      	lsls	r2, r2, #2
    40f2:	4910      	ldr	r1, [pc, #64]	; (4134 <readKeyboard+0x1c4>)
    40f4:	188a      	adds	r2, r1, r2
		scanCodeBuffer[i] = scanCodes[i];	
    40f6:	ce02      	ldmia	r6!, {r1}
    40f8:	7019      	strb	r1, [r3, #0]
    40fa:	3301      	adds	r3, #1
	for(i = 0 ; i < scanCodeIndex ; i++)
    40fc:	42b2      	cmp	r2, r6
    40fe:	d1fa      	bne.n	40f6 <readKeyboard+0x186>
		REG_PORT_OUTSET0 = kb_row[i];
    4100:	2400      	movs	r4, #0
		if(keyDown(i) && !scanCodesContains(i))
    4102:	4d18      	ldr	r5, [pc, #96]	; (4164 <readKeyboard+0x1f4>)
    4104:	4e18      	ldr	r6, [pc, #96]	; (4168 <readKeyboard+0x1f8>)
			removeFromKeyDown(i);
    4106:	4f19      	ldr	r7, [pc, #100]	; (416c <readKeyboard+0x1fc>)
    4108:	e002      	b.n	4110 <readKeyboard+0x1a0>
	for(i = 0; i < 70; i++)
    410a:	3401      	adds	r4, #1
    410c:	2c46      	cmp	r4, #70	; 0x46
    410e:	d00a      	beq.n	4126 <readKeyboard+0x1b6>
		if(keyDown(i) && !scanCodesContains(i))
    4110:	0020      	movs	r0, r4
    4112:	47a8      	blx	r5
    4114:	2800      	cmp	r0, #0
    4116:	d0f8      	beq.n	410a <readKeyboard+0x19a>
    4118:	0020      	movs	r0, r4
    411a:	47b0      	blx	r6
    411c:	2800      	cmp	r0, #0
    411e:	d1f4      	bne.n	410a <readKeyboard+0x19a>
			removeFromKeyDown(i);
    4120:	0020      	movs	r0, r4
    4122:	47b8      	blx	r7
    4124:	e7f1      	b.n	410a <readKeyboard+0x19a>
}
    4126:	b003      	add	sp, #12
    4128:	bc3c      	pop	{r2, r3, r4, r5}
    412a:	4690      	mov	r8, r2
    412c:	4699      	mov	r9, r3
    412e:	46a2      	mov	sl, r4
    4130:	46ab      	mov	fp, r5
    4132:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4134:	20000054 	.word	0x20000054
    4138:	41004400 	.word	0x41004400
    413c:	00008558 	.word	0x00008558
    4140:	41004408 	.word	0x41004408
    4144:	41004414 	.word	0x41004414
    4148:	00008590 	.word	0x00008590
    414c:	41004404 	.word	0x41004404
    4150:	000085b8 	.word	0x000085b8
    4154:	41004440 	.word	0x41004440
    4158:	41004418 	.word	0x41004418
    415c:	00008574 	.word	0x00008574
    4160:	20000040 	.word	0x20000040
    4164:	00003bad 	.word	0x00003bad
    4168:	00003b81 	.word	0x00003b81
    416c:	00003f4d 	.word	0x00003f4d

00004170 <setColorRGB>:

uint16_t fore_Color_High, fore_Color_Low;
uint16_t back_Color_High, back_Color_Low;

void setColorRGB(uint8_t r, uint8_t g, uint8_t b)
{
    4170:	b510      	push	{r4, lr}
	fore_Color_High = ((r&248)|g>>5);
    4172:	094b      	lsrs	r3, r1, #5
    4174:	2407      	movs	r4, #7
    4176:	43a0      	bics	r0, r4
    4178:	4318      	orrs	r0, r3
    417a:	4b05      	ldr	r3, [pc, #20]	; (4190 <setColorRGB+0x20>)
    417c:	8018      	strh	r0, [r3, #0]
	fore_Color_Low = ((g&28)<<3|b>>3);
    417e:	00c9      	lsls	r1, r1, #3
    4180:	23e0      	movs	r3, #224	; 0xe0
    4182:	4019      	ands	r1, r3
    4184:	08d2      	lsrs	r2, r2, #3
    4186:	430a      	orrs	r2, r1
    4188:	4b02      	ldr	r3, [pc, #8]	; (4194 <setColorRGB+0x24>)
    418a:	801a      	strh	r2, [r3, #0]
}
    418c:	bd10      	pop	{r4, pc}
    418e:	46c0      	nop			; (mov r8, r8)
    4190:	200030f6 	.word	0x200030f6
    4194:	200030f8 	.word	0x200030f8

00004198 <setBackColorRGB>:
	fore_Color_Low = (color & 0xFF);
}

void setBackColorRGB(unsigned char r,
unsigned char g, unsigned char b)
{
    4198:	b510      	push	{r4, lr}
	back_Color_High = ((r&248)|g>>5);
    419a:	094b      	lsrs	r3, r1, #5
    419c:	2407      	movs	r4, #7
    419e:	43a0      	bics	r0, r4
    41a0:	4318      	orrs	r0, r3
    41a2:	4b05      	ldr	r3, [pc, #20]	; (41b8 <setBackColorRGB+0x20>)
    41a4:	8018      	strh	r0, [r3, #0]
	back_Color_Low = ((g&28)<<3|b>>3);
    41a6:	00c9      	lsls	r1, r1, #3
    41a8:	23e0      	movs	r3, #224	; 0xe0
    41aa:	4019      	ands	r1, r3
    41ac:	08d2      	lsrs	r2, r2, #3
    41ae:	430a      	orrs	r2, r1
    41b0:	4b02      	ldr	r3, [pc, #8]	; (41bc <setBackColorRGB+0x24>)
    41b2:	801a      	strh	r2, [r3, #0]
}
    41b4:	bd10      	pop	{r4, pc}
    41b6:	46c0      	nop			; (mov r8, r8)
    41b8:	200030fa 	.word	0x200030fa
    41bc:	200030f4 	.word	0x200030f4

000041c0 <LCD_Fast_Fill>:
	(((long)(x2-x1)+1)*((long)(y2-y1)+1)));
	REG_PORT_OUTSET1 = LCD_CS;
}

void LCD_Fast_Fill(int ch, int cl, long pix)
{
    41c0:	b570      	push	{r4, r5, r6, lr}
	int blocks;
	
	
	REG_PORT_OUTCLR1 = 0x0000ffff;
    41c2:	4c19      	ldr	r4, [pc, #100]	; (4228 <LCD_Fast_Fill+0x68>)
    41c4:	4b19      	ldr	r3, [pc, #100]	; (422c <LCD_Fast_Fill+0x6c>)
    41c6:	601c      	str	r4, [r3, #0]
	REG_PORT_OUTSET1 = (ch << 8) | cl;
    41c8:	0200      	lsls	r0, r0, #8
    41ca:	4301      	orrs	r1, r0
    41cc:	4b18      	ldr	r3, [pc, #96]	; (4230 <LCD_Fast_Fill+0x70>)
    41ce:	6019      	str	r1, [r3, #0]

	blocks = pix/16;
    41d0:	17d3      	asrs	r3, r2, #31
    41d2:	260f      	movs	r6, #15
    41d4:	401e      	ands	r6, r3
    41d6:	18b6      	adds	r6, r6, r2
    41d8:	1136      	asrs	r6, r6, #4
	for (int i=0; i<blocks; i++)
    41da:	2500      	movs	r5, #0
    41dc:	2e00      	cmp	r6, #0
    41de:	dd0c      	ble.n	41fa <LCD_Fast_Fill+0x3a>
	{
		for (int j=0; j<16; j++)
		{
			REG_PORT_OUTCLR1 = LCD_WR;
    41e0:	4c12      	ldr	r4, [pc, #72]	; (422c <LCD_Fast_Fill+0x6c>)
    41e2:	2180      	movs	r1, #128	; 0x80
    41e4:	0289      	lsls	r1, r1, #10
			REG_PORT_OUTSET1 = LCD_WR;
    41e6:	4812      	ldr	r0, [pc, #72]	; (4230 <LCD_Fast_Fill+0x70>)
{
    41e8:	2310      	movs	r3, #16
			REG_PORT_OUTCLR1 = LCD_WR;
    41ea:	6021      	str	r1, [r4, #0]
			REG_PORT_OUTSET1 = LCD_WR;
    41ec:	6001      	str	r1, [r0, #0]
    41ee:	3b01      	subs	r3, #1
		for (int j=0; j<16; j++)
    41f0:	2b00      	cmp	r3, #0
    41f2:	d1fa      	bne.n	41ea <LCD_Fast_Fill+0x2a>
	for (int i=0; i<blocks; i++)
    41f4:	3501      	adds	r5, #1
    41f6:	42ae      	cmp	r6, r5
    41f8:	d1f6      	bne.n	41e8 <LCD_Fast_Fill+0x28>
		}
	}
	
	if ((pix % 16) != 0)
    41fa:	0713      	lsls	r3, r2, #28
    41fc:	d013      	beq.n	4226 <LCD_Fast_Fill+0x66>
	for (int i=0; i<(pix % 16)+1; i++)
    41fe:	17d3      	asrs	r3, r2, #31
    4200:	0f1b      	lsrs	r3, r3, #28
    4202:	18d2      	adds	r2, r2, r3
    4204:	210f      	movs	r1, #15
    4206:	4011      	ands	r1, r2
    4208:	1ac9      	subs	r1, r1, r3
    420a:	1c4b      	adds	r3, r1, #1
    420c:	2b00      	cmp	r3, #0
    420e:	dd0a      	ble.n	4226 <LCD_Fast_Fill+0x66>
    4210:	0019      	movs	r1, r3
    4212:	2300      	movs	r3, #0
	{
		REG_PORT_OUTCLR1 = LCD_WR;
    4214:	4c05      	ldr	r4, [pc, #20]	; (422c <LCD_Fast_Fill+0x6c>)
    4216:	2280      	movs	r2, #128	; 0x80
    4218:	0292      	lsls	r2, r2, #10
		REG_PORT_OUTSET1 = LCD_WR;
    421a:	4805      	ldr	r0, [pc, #20]	; (4230 <LCD_Fast_Fill+0x70>)
		REG_PORT_OUTCLR1 = LCD_WR;
    421c:	6022      	str	r2, [r4, #0]
		REG_PORT_OUTSET1 = LCD_WR;
    421e:	6002      	str	r2, [r0, #0]
	for (int i=0; i<(pix % 16)+1; i++)
    4220:	3301      	adds	r3, #1
    4222:	4299      	cmp	r1, r3
    4224:	d1fa      	bne.n	421c <LCD_Fast_Fill+0x5c>
	}
}
    4226:	bd70      	pop	{r4, r5, r6, pc}
    4228:	0000ffff 	.word	0x0000ffff
    422c:	41004494 	.word	0x41004494
    4230:	41004498 	.word	0x41004498

00004234 <setXY>:
{
	setXY(0,0,display_X_size,display_Y_size);
}

void setXY(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
    4234:	b5f0      	push	{r4, r5, r6, r7, lr}
    4236:	b083      	sub	sp, #12
    4238:	0007      	movs	r7, r0
    423a:	9100      	str	r1, [sp, #0]
    423c:	0016      	movs	r6, r2
    423e:	9301      	str	r3, [sp, #4]
	y1=display_Y_size-y1;
	y2=display_Y_size-y2;
	SwapUint16(y1, y2);
	*/
	
	LCD_Write_COM16(0x2a,0x00);
    4240:	2100      	movs	r1, #0
    4242:	202a      	movs	r0, #42	; 0x2a
    4244:	4c17      	ldr	r4, [pc, #92]	; (42a4 <setXY+0x70>)
    4246:	47a0      	blx	r4
	LCD_Write_DATA8(x1>>8);
    4248:	0a38      	lsrs	r0, r7, #8
    424a:	4d17      	ldr	r5, [pc, #92]	; (42a8 <setXY+0x74>)
    424c:	47a8      	blx	r5
	LCD_Write_COM16(0x2a,0x01);
    424e:	2101      	movs	r1, #1
    4250:	202a      	movs	r0, #42	; 0x2a
    4252:	47a0      	blx	r4
	LCD_Write_DATA8(x1);
    4254:	b2f8      	uxtb	r0, r7
    4256:	47a8      	blx	r5
	LCD_Write_COM16(0x2a,0x02);
    4258:	2102      	movs	r1, #2
    425a:	202a      	movs	r0, #42	; 0x2a
    425c:	47a0      	blx	r4
	LCD_Write_DATA8(x2>>8);
    425e:	0a30      	lsrs	r0, r6, #8
    4260:	47a8      	blx	r5
	LCD_Write_COM16(0x2a,0x03);
    4262:	2103      	movs	r1, #3
    4264:	202a      	movs	r0, #42	; 0x2a
    4266:	47a0      	blx	r4
	LCD_Write_DATA8(x2);
    4268:	b2f0      	uxtb	r0, r6
    426a:	47a8      	blx	r5

	LCD_Write_COM16(0x2b,0x00);
    426c:	2100      	movs	r1, #0
    426e:	202b      	movs	r0, #43	; 0x2b
    4270:	47a0      	blx	r4
	LCD_Write_DATA8(y1>>8);
    4272:	9e00      	ldr	r6, [sp, #0]
    4274:	0a30      	lsrs	r0, r6, #8
    4276:	47a8      	blx	r5
	LCD_Write_COM16(0x2b,0x01);
    4278:	2101      	movs	r1, #1
    427a:	202b      	movs	r0, #43	; 0x2b
    427c:	47a0      	blx	r4
	LCD_Write_DATA8(y1);
    427e:	b2f0      	uxtb	r0, r6
    4280:	47a8      	blx	r5
	LCD_Write_COM16(0x2b,0x02);
    4282:	2102      	movs	r1, #2
    4284:	202b      	movs	r0, #43	; 0x2b
    4286:	47a0      	blx	r4
	LCD_Write_DATA8(y2>>8);
    4288:	9e01      	ldr	r6, [sp, #4]
    428a:	0a30      	lsrs	r0, r6, #8
    428c:	47a8      	blx	r5
	LCD_Write_COM16(0x2b,0x03);
    428e:	2103      	movs	r1, #3
    4290:	202b      	movs	r0, #43	; 0x2b
    4292:	47a0      	blx	r4
	LCD_Write_DATA8(y2);
    4294:	b2f0      	uxtb	r0, r6
    4296:	47a8      	blx	r5

	LCD_Write_COM16(0x2c,0x00);
    4298:	2100      	movs	r1, #0
    429a:	202c      	movs	r0, #44	; 0x2c
    429c:	47a0      	blx	r4
}
    429e:	b003      	add	sp, #12
    42a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    42a2:	46c0      	nop			; (mov r8, r8)
    42a4:	000043d9 	.word	0x000043d9
    42a8:	00004409 	.word	0x00004409

000042ac <fillRect>:
{
    42ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    42ae:	46ce      	mov	lr, r9
    42b0:	4647      	mov	r7, r8
    42b2:	b580      	push	{r7, lr}
    42b4:	b083      	sub	sp, #12
    42b6:	0006      	movs	r6, r0
    42b8:	4689      	mov	r9, r1
    42ba:	0014      	movs	r4, r2
    42bc:	001d      	movs	r5, r3
	if (x1>x2)
    42be:	4290      	cmp	r0, r2
    42c0:	dd01      	ble.n	42c6 <fillRect+0x1a>
		x1 = x2;
    42c2:	0016      	movs	r6, r2
		x2 = temp;
    42c4:	0004      	movs	r4, r0
	if (y1>y2)
    42c6:	45a9      	cmp	r9, r5
    42c8:	dd02      	ble.n	42d0 <fillRect+0x24>
    42ca:	0033      	movs	r3, r6
		x1 = x2;
    42cc:	0026      	movs	r6, r4
		x2 = temp;
    42ce:	001c      	movs	r4, r3
	REG_PORT_OUTCLR1 = LCD_CS;
    42d0:	2380      	movs	r3, #128	; 0x80
    42d2:	03db      	lsls	r3, r3, #15
    42d4:	4698      	mov	r8, r3
    42d6:	4b11      	ldr	r3, [pc, #68]	; (431c <fillRect+0x70>)
    42d8:	4642      	mov	r2, r8
    42da:	601a      	str	r2, [r3, #0]
	setXY(x1, y1, x2, y2);
    42dc:	b2ab      	uxth	r3, r5
    42de:	b2a2      	uxth	r2, r4
    42e0:	4649      	mov	r1, r9
    42e2:	4668      	mov	r0, sp
    42e4:	80c1      	strh	r1, [r0, #6]
    42e6:	88c1      	ldrh	r1, [r0, #6]
    42e8:	b2b0      	uxth	r0, r6
    42ea:	4f0d      	ldr	r7, [pc, #52]	; (4320 <fillRect+0x74>)
    42ec:	47b8      	blx	r7
	REG_PORT_OUTSET1 = LCD_DC;
    42ee:	4f0d      	ldr	r7, [pc, #52]	; (4324 <fillRect+0x78>)
    42f0:	2380      	movs	r3, #128	; 0x80
    42f2:	041b      	lsls	r3, r3, #16
    42f4:	603b      	str	r3, [r7, #0]
	(((long)(x2-x1)+1)*((long)(y2-y1)+1)));
    42f6:	1ba4      	subs	r4, r4, r6
    42f8:	3401      	adds	r4, #1
    42fa:	464b      	mov	r3, r9
    42fc:	1aea      	subs	r2, r5, r3
    42fe:	3201      	adds	r2, #1
	LCD_Fast_Fill(fore_Color_High, fore_Color_Low,
    4300:	4362      	muls	r2, r4
    4302:	4b09      	ldr	r3, [pc, #36]	; (4328 <fillRect+0x7c>)
    4304:	8819      	ldrh	r1, [r3, #0]
    4306:	4b09      	ldr	r3, [pc, #36]	; (432c <fillRect+0x80>)
    4308:	8818      	ldrh	r0, [r3, #0]
    430a:	4b09      	ldr	r3, [pc, #36]	; (4330 <fillRect+0x84>)
    430c:	4798      	blx	r3
	REG_PORT_OUTSET1 = LCD_CS;
    430e:	4643      	mov	r3, r8
    4310:	603b      	str	r3, [r7, #0]
}
    4312:	b003      	add	sp, #12
    4314:	bc0c      	pop	{r2, r3}
    4316:	4690      	mov	r8, r2
    4318:	4699      	mov	r9, r3
    431a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    431c:	41004494 	.word	0x41004494
    4320:	00004235 	.word	0x00004235
    4324:	41004498 	.word	0x41004498
    4328:	200030f8 	.word	0x200030f8
    432c:	200030f6 	.word	0x200030f6
    4330:	000041c1 	.word	0x000041c1

00004334 <clrXY>:
{
    4334:	b510      	push	{r4, lr}
	setXY(0,0,display_X_size,display_Y_size);
    4336:	4b04      	ldr	r3, [pc, #16]	; (4348 <clrXY+0x14>)
    4338:	881b      	ldrh	r3, [r3, #0]
    433a:	4a04      	ldr	r2, [pc, #16]	; (434c <clrXY+0x18>)
    433c:	8812      	ldrh	r2, [r2, #0]
    433e:	2100      	movs	r1, #0
    4340:	2000      	movs	r0, #0
    4342:	4c03      	ldr	r4, [pc, #12]	; (4350 <clrXY+0x1c>)
    4344:	47a0      	blx	r4
}
    4346:	bd10      	pop	{r4, pc}
    4348:	2000016e 	.word	0x2000016e
    434c:	2000016c 	.word	0x2000016c
    4350:	00004235 	.word	0x00004235

00004354 <clrScr>:
{
    4354:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = LCD_CS;
    4356:	2280      	movs	r2, #128	; 0x80
    4358:	03d2      	lsls	r2, r2, #15
    435a:	4b02      	ldr	r3, [pc, #8]	; (4364 <clrScr+0x10>)
    435c:	601a      	str	r2, [r3, #0]
	clrXY();
    435e:	4b02      	ldr	r3, [pc, #8]	; (4368 <clrScr+0x14>)
    4360:	4798      	blx	r3
}
    4362:	bd10      	pop	{r4, pc}
    4364:	41004494 	.word	0x41004494
    4368:	00004335 	.word	0x00004335

0000436c <setPixel>:

void setPixel(uint16_t color)
{
    436c:	b510      	push	{r4, lr}
	//it sets it to a 16-bit color.
	//LCD_Write_DATA16((color<<8),(color&0xFF)); 
	LCD_Write_DATA16((color>>8),(color&0xFF));
    436e:	b2c1      	uxtb	r1, r0
    4370:	0a00      	lsrs	r0, r0, #8
    4372:	4b01      	ldr	r3, [pc, #4]	; (4378 <setPixel+0xc>)
    4374:	4798      	blx	r3
}
    4376:	bd10      	pop	{r4, pc}
    4378:	000043f1 	.word	0x000043f1

0000437c <clearScreen>:
	LCD_Write_DATA8(0x80);
	REG_PORT_OUTSET1 = LCD_CS;
}
*/
void clearScreen(void)
{
    437c:	b510      	push	{r4, lr}
	fore_Color_High = ((r&248)|g>>5);
    437e:	2300      	movs	r3, #0
    4380:	4a06      	ldr	r2, [pc, #24]	; (439c <clearScreen+0x20>)
    4382:	8013      	strh	r3, [r2, #0]
	fore_Color_Low = ((g&28)<<3|b>>3);
    4384:	4a06      	ldr	r2, [pc, #24]	; (43a0 <clearScreen+0x24>)
    4386:	8013      	strh	r3, [r2, #0]
	setColorRGB(0,0,0);
	fillRect(0,0,display_Y_size,display_X_size);
    4388:	4b06      	ldr	r3, [pc, #24]	; (43a4 <clearScreen+0x28>)
    438a:	881b      	ldrh	r3, [r3, #0]
    438c:	4a06      	ldr	r2, [pc, #24]	; (43a8 <clearScreen+0x2c>)
    438e:	8812      	ldrh	r2, [r2, #0]
    4390:	2100      	movs	r1, #0
    4392:	2000      	movs	r0, #0
    4394:	4c05      	ldr	r4, [pc, #20]	; (43ac <clearScreen+0x30>)
    4396:	47a0      	blx	r4
}
    4398:	bd10      	pop	{r4, pc}
    439a:	46c0      	nop			; (mov r8, r8)
    439c:	200030f6 	.word	0x200030f6
    43a0:	200030f8 	.word	0x200030f8
    43a4:	2000016c 	.word	0x2000016c
    43a8:	2000016e 	.word	0x2000016e
    43ac:	000042ad 	.word	0x000042ad

000043b0 <LCD_Write_Bus>:
	fillRect(0,0,799,489);
		
}

void LCD_Write_Bus(char VH, char VL)
{
    43b0:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = 0x0000ffff;
    43b2:	4c06      	ldr	r4, [pc, #24]	; (43cc <LCD_Write_Bus+0x1c>)
    43b4:	4b06      	ldr	r3, [pc, #24]	; (43d0 <LCD_Write_Bus+0x20>)
    43b6:	6023      	str	r3, [r4, #0]
	REG_PORT_OUTSET1 = (VH << 8) | VL;
    43b8:	0200      	lsls	r0, r0, #8
    43ba:	4301      	orrs	r1, r0
    43bc:	4b05      	ldr	r3, [pc, #20]	; (43d4 <LCD_Write_Bus+0x24>)
    43be:	6019      	str	r1, [r3, #0]
	REG_PORT_OUTCLR1 = LCD_WR;
    43c0:	2280      	movs	r2, #128	; 0x80
    43c2:	0292      	lsls	r2, r2, #10
    43c4:	6022      	str	r2, [r4, #0]
	REG_PORT_OUTSET1 = LCD_WR;
    43c6:	601a      	str	r2, [r3, #0]
}
    43c8:	bd10      	pop	{r4, pc}
    43ca:	46c0      	nop			; (mov r8, r8)
    43cc:	41004494 	.word	0x41004494
    43d0:	0000ffff 	.word	0x0000ffff
    43d4:	41004498 	.word	0x41004498

000043d8 <LCD_Write_COM16>:

void LCD_Write_COM16(char VH, char VL)
{
    43d8:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = LCD_DC;
    43da:	2280      	movs	r2, #128	; 0x80
    43dc:	0412      	lsls	r2, r2, #16
    43de:	4b02      	ldr	r3, [pc, #8]	; (43e8 <LCD_Write_COM16+0x10>)
    43e0:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(VH,VL);
    43e2:	4b02      	ldr	r3, [pc, #8]	; (43ec <LCD_Write_COM16+0x14>)
    43e4:	4798      	blx	r3
}
    43e6:	bd10      	pop	{r4, pc}
    43e8:	41004494 	.word	0x41004494
    43ec:	000043b1 	.word	0x000043b1

000043f0 <LCD_Write_DATA16>:
	REG_PORT_OUTCLR1 = LCD_DC;
	LCD_Write_Bus(0x00, VL);
}

void LCD_Write_DATA16(char VH, char VL)
{
    43f0:	b510      	push	{r4, lr}
	REG_PORT_OUTSET1 = LCD_DC;
    43f2:	2280      	movs	r2, #128	; 0x80
    43f4:	0412      	lsls	r2, r2, #16
    43f6:	4b02      	ldr	r3, [pc, #8]	; (4400 <LCD_Write_DATA16+0x10>)
    43f8:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(VH,VL);
    43fa:	4b02      	ldr	r3, [pc, #8]	; (4404 <LCD_Write_DATA16+0x14>)
    43fc:	4798      	blx	r3
}
    43fe:	bd10      	pop	{r4, pc}
    4400:	41004498 	.word	0x41004498
    4404:	000043b1 	.word	0x000043b1

00004408 <LCD_Write_DATA8>:

void LCD_Write_DATA8(char VL)
{
    4408:	b510      	push	{r4, lr}
    440a:	0001      	movs	r1, r0
	REG_PORT_OUTSET1 = LCD_DC;
    440c:	2280      	movs	r2, #128	; 0x80
    440e:	0412      	lsls	r2, r2, #16
    4410:	4b02      	ldr	r3, [pc, #8]	; (441c <LCD_Write_DATA8+0x14>)
    4412:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(0x00, VL);
    4414:	2000      	movs	r0, #0
    4416:	4b02      	ldr	r3, [pc, #8]	; (4420 <LCD_Write_DATA8+0x18>)
    4418:	4798      	blx	r3
}
    441a:	bd10      	pop	{r4, pc}
    441c:	41004498 	.word	0x41004498
    4420:	000043b1 	.word	0x000043b1

00004424 <InitLCD>:
{
    4424:	b5f0      	push	{r4, r5, r6, r7, lr}
    4426:	46c6      	mov	lr, r8
    4428:	b500      	push	{lr}
    442a:	b082      	sub	sp, #8
	REG_PORT_DIRSET1 = 0x0000ffff;		//LCD data bus, PB00 - PB15
    442c:	4b80      	ldr	r3, [pc, #512]	; (4630 <InitLCD+0x20c>)
    442e:	4f81      	ldr	r7, [pc, #516]	; (4634 <InitLCD+0x210>)
    4430:	601f      	str	r7, [r3, #0]
	REG_PORT_DIRSET1 = LCD_Reset;
    4432:	2580      	movs	r5, #128	; 0x80
    4434:	05ed      	lsls	r5, r5, #23
    4436:	601d      	str	r5, [r3, #0]
	REG_PORT_DIRSET1 = LCD_CS;
    4438:	2680      	movs	r6, #128	; 0x80
    443a:	03f6      	lsls	r6, r6, #15
    443c:	601e      	str	r6, [r3, #0]
	REG_PORT_DIRSET1 = LCD_WR;
    443e:	2080      	movs	r0, #128	; 0x80
    4440:	0280      	lsls	r0, r0, #10
    4442:	6018      	str	r0, [r3, #0]
	REG_PORT_DIRSET1 = LCD_DC;
    4444:	2180      	movs	r1, #128	; 0x80
    4446:	0409      	lsls	r1, r1, #16
    4448:	6019      	str	r1, [r3, #0]
	REG_PORT_DIRSET1 = LCD_RD;
    444a:	2280      	movs	r2, #128	; 0x80
    444c:	0252      	lsls	r2, r2, #9
    444e:	601a      	str	r2, [r3, #0]
	REG_PORT_OUTCLR1 = 0x0000ffff;
    4450:	4c79      	ldr	r4, [pc, #484]	; (4638 <InitLCD+0x214>)
    4452:	6027      	str	r7, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_Reset;
    4454:	6025      	str	r5, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_CS;
    4456:	6026      	str	r6, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_WR;
    4458:	6020      	str	r0, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_DC;
    445a:	6021      	str	r1, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_RD;
    445c:	6022      	str	r2, [r4, #0]
	REG_PORT_DIRSET1 = PORT_PB16;
    445e:	601a      	str	r2, [r3, #0]
	REG_PORT_OUTSET1 = PORT_PB16;
    4460:	4f76      	ldr	r7, [pc, #472]	; (463c <InitLCD+0x218>)
    4462:	603a      	str	r2, [r7, #0]
	REG_PORT_OUTSET1 = LCD_Reset;
    4464:	603d      	str	r5, [r7, #0]
	delay_ms(5);
    4466:	2005      	movs	r0, #5
    4468:	4b75      	ldr	r3, [pc, #468]	; (4640 <InitLCD+0x21c>)
    446a:	4698      	mov	r8, r3
    446c:	4798      	blx	r3
	REG_PORT_OUTCLR1 = LCD_Reset;
    446e:	6025      	str	r5, [r4, #0]
	delay_ms(5);
    4470:	2005      	movs	r0, #5
    4472:	47c0      	blx	r8
	REG_PORT_OUTSET1 = LCD_Reset;
    4474:	603d      	str	r5, [r7, #0]
	REG_PORT_OUTCLR1 = LCD_CS;
    4476:	6026      	str	r6, [r4, #0]
	for(int i = 0; i < 70; i++)
    4478:	2400      	movs	r4, #0
		REG_PORT_OUTCLR1 = LCD_DC;
    447a:	4b6f      	ldr	r3, [pc, #444]	; (4638 <InitLCD+0x214>)
    447c:	4698      	mov	r8, r3
    447e:	2580      	movs	r5, #128	; 0x80
    4480:	042d      	lsls	r5, r5, #16
    4482:	002f      	movs	r7, r5
		LCD_Write_COM16(belial[i],mulciber[i]);
    4484:	4e6f      	ldr	r6, [pc, #444]	; (4644 <InitLCD+0x220>)
		REG_PORT_OUTCLR1 = LCD_DC;
    4486:	4643      	mov	r3, r8
    4488:	601f      	str	r7, [r3, #0]
		LCD_Write_COM16(belial[i],mulciber[i]);
    448a:	5da1      	ldrb	r1, [r4, r6]
    448c:	4b6e      	ldr	r3, [pc, #440]	; (4648 <InitLCD+0x224>)
    448e:	5ce0      	ldrb	r0, [r4, r3]
    4490:	4b6e      	ldr	r3, [pc, #440]	; (464c <InitLCD+0x228>)
    4492:	4798      	blx	r3
		REG_PORT_OUTSET1 = LCD_DC;
    4494:	4b69      	ldr	r3, [pc, #420]	; (463c <InitLCD+0x218>)
    4496:	601d      	str	r5, [r3, #0]
		LCD_Write_DATA8(lucifer[i]);
    4498:	4b6d      	ldr	r3, [pc, #436]	; (4650 <InitLCD+0x22c>)
    449a:	5ce0      	ldrb	r0, [r4, r3]
    449c:	4b6d      	ldr	r3, [pc, #436]	; (4654 <InitLCD+0x230>)
    449e:	4798      	blx	r3
	for(int i = 0; i < 70; i++)
    44a0:	3401      	adds	r4, #1
    44a2:	2c46      	cmp	r4, #70	; 0x46
    44a4:	d1ef      	bne.n	4486 <InitLCD+0x62>
    44a6:	23d1      	movs	r3, #209	; 0xd1
    44a8:	9301      	str	r3, [sp, #4]
			LCD_Write_COM16(k,0x00);
    44aa:	4d68      	ldr	r5, [pc, #416]	; (464c <InitLCD+0x228>)
			LCD_Write_DATA8(beelzebub[l]);
    44ac:	4f69      	ldr	r7, [pc, #420]	; (4654 <InitLCD+0x230>)
    44ae:	4c6a      	ldr	r4, [pc, #424]	; (4658 <InitLCD+0x234>)
    44b0:	0026      	movs	r6, r4
    44b2:	3634      	adds	r6, #52	; 0x34
			LCD_Write_COM16(k,0x00);
    44b4:	2100      	movs	r1, #0
    44b6:	9801      	ldr	r0, [sp, #4]
    44b8:	47a8      	blx	r5
			LCD_Write_DATA8(beelzebub[l]);
    44ba:	7820      	ldrb	r0, [r4, #0]
    44bc:	47b8      	blx	r7
    44be:	3401      	adds	r4, #1
		for(int l = 0; l < 52; l++)
    44c0:	42a6      	cmp	r6, r4
    44c2:	d1f7      	bne.n	44b4 <InitLCD+0x90>
	for(char k = 0xD1; k < 0xD6; k++)
    44c4:	9b01      	ldr	r3, [sp, #4]
    44c6:	3301      	adds	r3, #1
    44c8:	b2db      	uxtb	r3, r3
    44ca:	9301      	str	r3, [sp, #4]
    44cc:	2bd6      	cmp	r3, #214	; 0xd6
    44ce:	d1ee      	bne.n	44ae <InitLCD+0x8a>
	LCD_Write_COM16(0xF0, 0x00);LCD_Write_DATA8(0x55);
    44d0:	2100      	movs	r1, #0
    44d2:	20f0      	movs	r0, #240	; 0xf0
    44d4:	4c5d      	ldr	r4, [pc, #372]	; (464c <InitLCD+0x228>)
    44d6:	47a0      	blx	r4
    44d8:	2055      	movs	r0, #85	; 0x55
    44da:	4d5e      	ldr	r5, [pc, #376]	; (4654 <InitLCD+0x230>)
    44dc:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x01);LCD_Write_DATA8(0xAA);	
    44de:	2101      	movs	r1, #1
    44e0:	20f0      	movs	r0, #240	; 0xf0
    44e2:	47a0      	blx	r4
    44e4:	20aa      	movs	r0, #170	; 0xaa
    44e6:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x02);LCD_Write_DATA8(0x52);	
    44e8:	2102      	movs	r1, #2
    44ea:	20f0      	movs	r0, #240	; 0xf0
    44ec:	47a0      	blx	r4
    44ee:	2052      	movs	r0, #82	; 0x52
    44f0:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x03);LCD_Write_DATA8(0x08);	
    44f2:	2103      	movs	r1, #3
    44f4:	20f0      	movs	r0, #240	; 0xf0
    44f6:	47a0      	blx	r4
    44f8:	2008      	movs	r0, #8
    44fa:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x04);LCD_Write_DATA8(0x00);	
    44fc:	2104      	movs	r1, #4
    44fe:	20f0      	movs	r0, #240	; 0xf0
    4500:	47a0      	blx	r4
    4502:	2000      	movs	r0, #0
    4504:	47a8      	blx	r5
	LCD_Write_COM16(0xB1, 0x00);LCD_Write_DATA8(0xCC);
    4506:	2100      	movs	r1, #0
    4508:	20b1      	movs	r0, #177	; 0xb1
    450a:	47a0      	blx	r4
    450c:	20cc      	movs	r0, #204	; 0xcc
    450e:	47a8      	blx	r5
	LCD_Write_COM16(0xB1, 0x01);LCD_Write_DATA8(0x00);	
    4510:	2101      	movs	r1, #1
    4512:	20b1      	movs	r0, #177	; 0xb1
    4514:	47a0      	blx	r4
    4516:	2000      	movs	r0, #0
    4518:	47a8      	blx	r5
	LCD_Write_COM16(0xB5, 0x00);LCD_Write_DATA8(0x50);	
    451a:	2100      	movs	r1, #0
    451c:	20b5      	movs	r0, #181	; 0xb5
    451e:	47a0      	blx	r4
    4520:	2050      	movs	r0, #80	; 0x50
    4522:	47a8      	blx	r5
	LCD_Write_COM16(0xB6, 0x00);LCD_Write_DATA8(0x05);
    4524:	2100      	movs	r1, #0
    4526:	20b6      	movs	r0, #182	; 0xb6
    4528:	47a0      	blx	r4
    452a:	2005      	movs	r0, #5
    452c:	47a8      	blx	r5
	LCD_Write_COM16(0xB7, 0x00);LCD_Write_DATA8(0x70);
    452e:	2100      	movs	r1, #0
    4530:	20b7      	movs	r0, #183	; 0xb7
    4532:	47a0      	blx	r4
    4534:	2070      	movs	r0, #112	; 0x70
    4536:	47a8      	blx	r5
	LCD_Write_COM16(0xB7, 0x01);LCD_Write_DATA8(0x70);
    4538:	2101      	movs	r1, #1
    453a:	20b7      	movs	r0, #183	; 0xb7
    453c:	47a0      	blx	r4
    453e:	2070      	movs	r0, #112	; 0x70
    4540:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x00);LCD_Write_DATA8(0x01);
    4542:	2100      	movs	r1, #0
    4544:	20b8      	movs	r0, #184	; 0xb8
    4546:	47a0      	blx	r4
    4548:	2001      	movs	r0, #1
    454a:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x01);LCD_Write_DATA8(0x03);
    454c:	2101      	movs	r1, #1
    454e:	20b8      	movs	r0, #184	; 0xb8
    4550:	47a0      	blx	r4
    4552:	2003      	movs	r0, #3
    4554:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x02);LCD_Write_DATA8(0x03);
    4556:	2102      	movs	r1, #2
    4558:	20b8      	movs	r0, #184	; 0xb8
    455a:	47a0      	blx	r4
    455c:	2003      	movs	r0, #3
    455e:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x03);LCD_Write_DATA8(0x03);	
    4560:	2103      	movs	r1, #3
    4562:	20b8      	movs	r0, #184	; 0xb8
    4564:	47a0      	blx	r4
    4566:	2003      	movs	r0, #3
    4568:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x00);LCD_Write_DATA8(0x02);
    456a:	2100      	movs	r1, #0
    456c:	20bc      	movs	r0, #188	; 0xbc
    456e:	47a0      	blx	r4
    4570:	2002      	movs	r0, #2
    4572:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x01);LCD_Write_DATA8(0x00);
    4574:	2101      	movs	r1, #1
    4576:	20bc      	movs	r0, #188	; 0xbc
    4578:	47a0      	blx	r4
    457a:	2000      	movs	r0, #0
    457c:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x02);LCD_Write_DATA8(0x00);
    457e:	2102      	movs	r1, #2
    4580:	20bc      	movs	r0, #188	; 0xbc
    4582:	47a0      	blx	r4
    4584:	2000      	movs	r0, #0
    4586:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x00);LCD_Write_DATA8(0xD0);
    4588:	2100      	movs	r1, #0
    458a:	20c9      	movs	r0, #201	; 0xc9
    458c:	47a0      	blx	r4
    458e:	20d0      	movs	r0, #208	; 0xd0
    4590:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x01);LCD_Write_DATA8(0x02);
    4592:	2101      	movs	r1, #1
    4594:	20c9      	movs	r0, #201	; 0xc9
    4596:	47a0      	blx	r4
    4598:	2002      	movs	r0, #2
    459a:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x02);LCD_Write_DATA8(0x50);
    459c:	2102      	movs	r1, #2
    459e:	20c9      	movs	r0, #201	; 0xc9
    45a0:	47a0      	blx	r4
    45a2:	2050      	movs	r0, #80	; 0x50
    45a4:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x03);LCD_Write_DATA8(0x50);
    45a6:	2103      	movs	r1, #3
    45a8:	20c9      	movs	r0, #201	; 0xc9
    45aa:	47a0      	blx	r4
    45ac:	2050      	movs	r0, #80	; 0x50
    45ae:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x04);LCD_Write_DATA8(0x50);
    45b0:	2104      	movs	r1, #4
    45b2:	20c9      	movs	r0, #201	; 0xc9
    45b4:	47a0      	blx	r4
    45b6:	2050      	movs	r0, #80	; 0x50
    45b8:	47a8      	blx	r5
	LCD_Write_COM16(0x35, 0x00);LCD_Write_DATA8(0x00);
    45ba:	2100      	movs	r1, #0
    45bc:	2035      	movs	r0, #53	; 0x35
    45be:	47a0      	blx	r4
    45c0:	2000      	movs	r0, #0
    45c2:	47a8      	blx	r5
	LCD_Write_COM16(0x3A, 0x00);LCD_Write_DATA8(0x55);
    45c4:	2100      	movs	r1, #0
    45c6:	203a      	movs	r0, #58	; 0x3a
    45c8:	47a0      	blx	r4
    45ca:	2055      	movs	r0, #85	; 0x55
    45cc:	47a8      	blx	r5
	LCD_Write_COM16(0x36, 0x00);LCD_Write_DATA8(0xE2);  //This is the MADCTL register
    45ce:	2100      	movs	r1, #0
    45d0:	2036      	movs	r0, #54	; 0x36
    45d2:	47a0      	blx	r4
    45d4:	20e2      	movs	r0, #226	; 0xe2
    45d6:	47a8      	blx	r5
  	LCD_Write_COM16(0x11,0x00);   //Start Up  
    45d8:	2100      	movs	r1, #0
    45da:	2011      	movs	r0, #17
    45dc:	47a0      	blx	r4
  	delay_ms(100);
    45de:	2064      	movs	r0, #100	; 0x64
    45e0:	4e17      	ldr	r6, [pc, #92]	; (4640 <InitLCD+0x21c>)
    45e2:	47b0      	blx	r6
  	LCD_Write_COM16(0x29,0x00);   //Display On  
    45e4:	2100      	movs	r1, #0
    45e6:	2029      	movs	r0, #41	; 0x29
    45e8:	47a0      	blx	r4
   	delay_ms(100);
    45ea:	2064      	movs	r0, #100	; 0x64
    45ec:	47b0      	blx	r6
	LCD_Write_COM16(0x51,0x00);LCD_Write_DATA8(0xFF);
    45ee:	2100      	movs	r1, #0
    45f0:	2051      	movs	r0, #81	; 0x51
    45f2:	47a0      	blx	r4
    45f4:	20ff      	movs	r0, #255	; 0xff
    45f6:	47a8      	blx	r5
	REG_PORT_OUTSET1 = LCD_CS;
    45f8:	2280      	movs	r2, #128	; 0x80
    45fa:	03d2      	lsls	r2, r2, #15
    45fc:	4b0f      	ldr	r3, [pc, #60]	; (463c <InitLCD+0x218>)
    45fe:	601a      	str	r2, [r3, #0]
	clrScr();
    4600:	4b16      	ldr	r3, [pc, #88]	; (465c <InitLCD+0x238>)
    4602:	4798      	blx	r3
	setColorRGB(0,0,0);
    4604:	2200      	movs	r2, #0
    4606:	2100      	movs	r1, #0
    4608:	2000      	movs	r0, #0
    460a:	4b15      	ldr	r3, [pc, #84]	; (4660 <InitLCD+0x23c>)
    460c:	4798      	blx	r3
	setBackColorRGB(0, 0, 0);
    460e:	2200      	movs	r2, #0
    4610:	2100      	movs	r1, #0
    4612:	2000      	movs	r0, #0
    4614:	4b13      	ldr	r3, [pc, #76]	; (4664 <InitLCD+0x240>)
    4616:	4798      	blx	r3
	fillRect(0,0,799,489);
    4618:	23ea      	movs	r3, #234	; 0xea
    461a:	33ff      	adds	r3, #255	; 0xff
    461c:	4a12      	ldr	r2, [pc, #72]	; (4668 <InitLCD+0x244>)
    461e:	2100      	movs	r1, #0
    4620:	2000      	movs	r0, #0
    4622:	4c12      	ldr	r4, [pc, #72]	; (466c <InitLCD+0x248>)
    4624:	47a0      	blx	r4
}
    4626:	b002      	add	sp, #8
    4628:	bc04      	pop	{r2}
    462a:	4690      	mov	r8, r2
    462c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    462e:	46c0      	nop			; (mov r8, r8)
    4630:	41004488 	.word	0x41004488
    4634:	0000ffff 	.word	0x0000ffff
    4638:	41004494 	.word	0x41004494
    463c:	41004498 	.word	0x41004498
    4640:	00001cbd 	.word	0x00001cbd
    4644:	000086a4 	.word	0x000086a4
    4648:	00008614 	.word	0x00008614
    464c:	000043d9 	.word	0x000043d9
    4650:	0000865c 	.word	0x0000865c
    4654:	00004409 	.word	0x00004409
    4658:	000085e0 	.word	0x000085e0
    465c:	00004355 	.word	0x00004355
    4660:	00004171 	.word	0x00004171
    4664:	00004199 	.word	0x00004199
    4668:	0000031f 	.word	0x0000031f
    466c:	000042ad 	.word	0x000042ad

00004670 <usart_read_callback>:
	SysTick_Config(SystemCoreClock/1000);
	system_interrupt_enable(SYSTEM_INTERRUPT_SYSTICK);
}

void usart_read_callback(struct usart_module *const usart_module)
{
    4670:	b510      	push	{r4, lr}
	// Read one character from the UART.
	//We can only use this function because it's non-blocking
	//and we can only read one character because reading > 1 means
	//it doesn't complete until _all_ characters are read.
	
	usart_read_buffer_job(&usart_instance, (uint8_t*)&rx_buf, 1);
    4672:	4c06      	ldr	r4, [pc, #24]	; (468c <usart_read_callback+0x1c>)
    4674:	2201      	movs	r2, #1
    4676:	0021      	movs	r1, r4
    4678:	4805      	ldr	r0, [pc, #20]	; (4690 <usart_read_callback+0x20>)
    467a:	4b06      	ldr	r3, [pc, #24]	; (4694 <usart_read_callback+0x24>)
    467c:	4798      	blx	r3
	
	//stuff that ONE CHARACTER into the circular FIFO buffer
	ring_put(ouroboros, rx_buf);
    467e:	7821      	ldrb	r1, [r4, #0]
    4680:	4b05      	ldr	r3, [pc, #20]	; (4698 <usart_read_callback+0x28>)
    4682:	6818      	ldr	r0, [r3, #0]
    4684:	4b05      	ldr	r3, [pc, #20]	; (469c <usart_read_callback+0x2c>)
    4686:	4798      	blx	r3
}
    4688:	bd10      	pop	{r4, pc}
    468a:	46c0      	nop			; (mov r8, r8)
    468c:	200030fc 	.word	0x200030fc
    4690:	200003bc 	.word	0x200003bc
    4694:	00002b5d 	.word	0x00002b5d
    4698:	20000390 	.word	0x20000390
    469c:	00000141 	.word	0x00000141

000046a0 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    46a0:	b570      	push	{r4, r5, r6, lr}
    46a2:	b082      	sub	sp, #8
    46a4:	0005      	movs	r5, r0
    46a6:	000e      	movs	r6, r1
	uint16_t temp = 0;
    46a8:	2200      	movs	r2, #0
    46aa:	466b      	mov	r3, sp
    46ac:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    46ae:	4c06      	ldr	r4, [pc, #24]	; (46c8 <usart_serial_getchar+0x28>)
    46b0:	466b      	mov	r3, sp
    46b2:	1d99      	adds	r1, r3, #6
    46b4:	0028      	movs	r0, r5
    46b6:	47a0      	blx	r4
    46b8:	2800      	cmp	r0, #0
    46ba:	d1f9      	bne.n	46b0 <usart_serial_getchar+0x10>

	*c = temp;
    46bc:	466b      	mov	r3, sp
    46be:	3306      	adds	r3, #6
    46c0:	881b      	ldrh	r3, [r3, #0]
    46c2:	7033      	strb	r3, [r6, #0]
}
    46c4:	b002      	add	sp, #8
    46c6:	bd70      	pop	{r4, r5, r6, pc}
    46c8:	00002a8b 	.word	0x00002a8b

000046cc <usart_serial_putchar>:
{
    46cc:	b570      	push	{r4, r5, r6, lr}
    46ce:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    46d0:	b28c      	uxth	r4, r1
    46d2:	4e03      	ldr	r6, [pc, #12]	; (46e0 <usart_serial_putchar+0x14>)
    46d4:	0021      	movs	r1, r4
    46d6:	0028      	movs	r0, r5
    46d8:	47b0      	blx	r6
    46da:	2800      	cmp	r0, #0
    46dc:	d1fa      	bne.n	46d4 <usart_serial_putchar+0x8>
}
    46de:	bd70      	pop	{r4, r5, r6, pc}
    46e0:	00002a65 	.word	0x00002a65

000046e4 <SysTick_Handler>:
	ul_tickcount++;
    46e4:	4a02      	ldr	r2, [pc, #8]	; (46f0 <SysTick_Handler+0xc>)
    46e6:	8813      	ldrh	r3, [r2, #0]
    46e8:	3301      	adds	r3, #1
    46ea:	8013      	strh	r3, [r2, #0]
}
    46ec:	4770      	bx	lr
    46ee:	46c0      	nop			; (mov r8, r8)
    46f0:	200002f6 	.word	0x200002f6

000046f4 <conf_systick>:
{
    46f4:	b510      	push	{r4, lr}
	SysTick_Config(SystemCoreClock/1000);
    46f6:	4b0e      	ldr	r3, [pc, #56]	; (4730 <conf_systick+0x3c>)
    46f8:	6818      	ldr	r0, [r3, #0]
    46fa:	21fa      	movs	r1, #250	; 0xfa
    46fc:	0089      	lsls	r1, r1, #2
    46fe:	4b0d      	ldr	r3, [pc, #52]	; (4734 <conf_systick+0x40>)
    4700:	4798      	blx	r3
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    4702:	3801      	subs	r0, #1
    4704:	4b0c      	ldr	r3, [pc, #48]	; (4738 <conf_systick+0x44>)
    4706:	4298      	cmp	r0, r3
    4708:	d80d      	bhi.n	4726 <conf_systick+0x32>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    470a:	4a0c      	ldr	r2, [pc, #48]	; (473c <conf_systick+0x48>)
    470c:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    470e:	480c      	ldr	r0, [pc, #48]	; (4740 <conf_systick+0x4c>)
    4710:	6a03      	ldr	r3, [r0, #32]
    4712:	021b      	lsls	r3, r3, #8
    4714:	0a1b      	lsrs	r3, r3, #8
    4716:	21c0      	movs	r1, #192	; 0xc0
    4718:	0609      	lsls	r1, r1, #24
    471a:	430b      	orrs	r3, r1
    471c:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    471e:	2300      	movs	r3, #0
    4720:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    4722:	3307      	adds	r3, #7
    4724:	6013      	str	r3, [r2, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    4726:	2280      	movs	r2, #128	; 0x80
    4728:	0612      	lsls	r2, r2, #24
    472a:	4b06      	ldr	r3, [pc, #24]	; (4744 <conf_systick+0x50>)
    472c:	601a      	str	r2, [r3, #0]
}
    472e:	bd10      	pop	{r4, pc}
    4730:	20000024 	.word	0x20000024
    4734:	00004abd 	.word	0x00004abd
    4738:	00ffffff 	.word	0x00ffffff
    473c:	e000e010 	.word	0xe000e010
    4740:	e000ed00 	.word	0xe000ed00
    4744:	e000e100 	.word	0xe000e100

00004748 <configure_usart>:

/**************************SERCOM STUFF*******************************/


void configure_usart(void)
{
    4748:	b570      	push	{r4, r5, r6, lr}
    474a:	b090      	sub	sp, #64	; 0x40
	config->data_order       = USART_DATAORDER_LSB;
    474c:	2380      	movs	r3, #128	; 0x80
    474e:	05db      	lsls	r3, r3, #23
    4750:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    4752:	2300      	movs	r3, #0
    4754:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    4756:	22ff      	movs	r2, #255	; 0xff
    4758:	4669      	mov	r1, sp
    475a:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    475c:	2200      	movs	r2, #0
    475e:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    4760:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
    4762:	2196      	movs	r1, #150	; 0x96
    4764:	0189      	lsls	r1, r1, #6
    4766:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
    4768:	2101      	movs	r1, #1
    476a:	2024      	movs	r0, #36	; 0x24
    476c:	466c      	mov	r4, sp
    476e:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    4770:	3001      	adds	r0, #1
    4772:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    4774:	3125      	adds	r1, #37	; 0x25
    4776:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    4778:	3101      	adds	r1, #1
    477a:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    477c:	930a      	str	r3, [sp, #40]	; 0x28
	config->run_in_standby   = false;
    477e:	3105      	adds	r1, #5
    4780:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    4782:	3101      	adds	r1, #1
    4784:	5463      	strb	r3, [r4, r1]
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    4786:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    4788:	8223      	strh	r3, [r4, #16]
	config->lin_slave_enable      = false;
    478a:	76e3      	strb	r3, [r4, #27]
	config->immediate_buffer_overflow_notification  = false;
    478c:	7622      	strb	r2, [r4, #24]
	config->start_frame_detection_enable            = false;
    478e:	7722      	strb	r2, [r4, #28]
	config->encoding_format_enable                  = false;
    4790:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    4792:	2313      	movs	r3, #19
    4794:	76a3      	strb	r3, [r4, #26]
	config->collision_detection_enable              = false;
    4796:	7762      	strb	r2, [r4, #29]
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);

	config_usart.baudrate    = 9600;
	config_usart.mux_setting = USART_RX_1_TX_0_XCK_1;
    4798:	2380      	movs	r3, #128	; 0x80
    479a:	035b      	lsls	r3, r3, #13
    479c:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = PINMUX_PA08D_SERCOM2_PAD0;
    479e:	4b1e      	ldr	r3, [pc, #120]	; (4818 <configure_usart+0xd0>)
    47a0:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = PINMUX_PA09D_SERCOM2_PAD1;
    47a2:	4b1e      	ldr	r3, [pc, #120]	; (481c <configure_usart+0xd4>)
    47a4:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = PINMUX_UNUSED;
    47a6:	2301      	movs	r3, #1
    47a8:	425b      	negs	r3, r3
    47aa:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = PINMUX_UNUSED;
    47ac:	930f      	str	r3, [sp, #60]	; 0x3c
	
	RTS on PAD2 and CTS on PAD3
	
	*/
	
	while (usart_init(&usart_instance, SERCOM2, &config_usart) != STATUS_OK) {
    47ae:	4d1c      	ldr	r5, [pc, #112]	; (4820 <configure_usart+0xd8>)
    47b0:	4c1c      	ldr	r4, [pc, #112]	; (4824 <configure_usart+0xdc>)
    47b2:	466a      	mov	r2, sp
    47b4:	491c      	ldr	r1, [pc, #112]	; (4828 <configure_usart+0xe0>)
    47b6:	0028      	movs	r0, r5
    47b8:	47a0      	blx	r4
    47ba:	2800      	cmp	r0, #0
    47bc:	d1f9      	bne.n	47b2 <configure_usart+0x6a>
	stdio_base = (void *)module;
    47be:	4c18      	ldr	r4, [pc, #96]	; (4820 <configure_usart+0xd8>)
    47c0:	4b1a      	ldr	r3, [pc, #104]	; (482c <configure_usart+0xe4>)
    47c2:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    47c4:	4a1a      	ldr	r2, [pc, #104]	; (4830 <configure_usart+0xe8>)
    47c6:	4b1b      	ldr	r3, [pc, #108]	; (4834 <configure_usart+0xec>)
    47c8:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    47ca:	4a1b      	ldr	r2, [pc, #108]	; (4838 <configure_usart+0xf0>)
    47cc:	4b1b      	ldr	r3, [pc, #108]	; (483c <configure_usart+0xf4>)
    47ce:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    47d0:	466a      	mov	r2, sp
    47d2:	4915      	ldr	r1, [pc, #84]	; (4828 <configure_usart+0xe0>)
    47d4:	0020      	movs	r0, r4
    47d6:	4b13      	ldr	r3, [pc, #76]	; (4824 <configure_usart+0xdc>)
    47d8:	4798      	blx	r3
	setbuf(stdout, NULL);
    47da:	4e19      	ldr	r6, [pc, #100]	; (4840 <configure_usart+0xf8>)
    47dc:	6833      	ldr	r3, [r6, #0]
    47de:	6898      	ldr	r0, [r3, #8]
    47e0:	2100      	movs	r1, #0
    47e2:	4d18      	ldr	r5, [pc, #96]	; (4844 <configure_usart+0xfc>)
    47e4:	47a8      	blx	r5
	setbuf(stdin, NULL);
    47e6:	6833      	ldr	r3, [r6, #0]
    47e8:	6858      	ldr	r0, [r3, #4]
    47ea:	2100      	movs	r1, #0
    47ec:	47a8      	blx	r5
	SercomUsart *const usart_hw = &(module->hw->USART);
    47ee:	6825      	ldr	r5, [r4, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    47f0:	0028      	movs	r0, r5
    47f2:	4b15      	ldr	r3, [pc, #84]	; (4848 <configure_usart+0x100>)
    47f4:	4798      	blx	r3
    47f6:	231f      	movs	r3, #31
    47f8:	4018      	ands	r0, r3
    47fa:	3b1e      	subs	r3, #30
    47fc:	4083      	lsls	r3, r0
    47fe:	4a13      	ldr	r2, [pc, #76]	; (484c <configure_usart+0x104>)
    4800:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    4802:	6822      	ldr	r2, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
    4804:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    4806:	2b00      	cmp	r3, #0
    4808:	d1fc      	bne.n	4804 <configure_usart+0xbc>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    480a:	682b      	ldr	r3, [r5, #0]
    480c:	2202      	movs	r2, #2
    480e:	4313      	orrs	r3, r2
    4810:	602b      	str	r3, [r5, #0]
	}
	stdio_serial_init(&usart_instance, SERCOM2, &config_usart);
	usart_enable(&usart_instance);
}
    4812:	b010      	add	sp, #64	; 0x40
    4814:	bd70      	pop	{r4, r5, r6, pc}
    4816:	46c0      	nop			; (mov r8, r8)
    4818:	00080003 	.word	0x00080003
    481c:	00090003 	.word	0x00090003
    4820:	200003bc 	.word	0x200003bc
    4824:	00002729 	.word	0x00002729
    4828:	42001000 	.word	0x42001000
    482c:	200003b8 	.word	0x200003b8
    4830:	000046cd 	.word	0x000046cd
    4834:	200003b4 	.word	0x200003b4
    4838:	000046a1 	.word	0x000046a1
    483c:	200003b0 	.word	0x200003b0
    4840:	200001a8 	.word	0x200001a8
    4844:	00005159 	.word	0x00005159
    4848:	00002699 	.word	0x00002699
    484c:	e000e100 	.word	0xe000e100

00004850 <configure_usart_callbacks>:

void configure_usart_callbacks(void)
{
    4850:	b510      	push	{r4, lr}
	usart_register_callback(&usart_instance,usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
    4852:	4c06      	ldr	r4, [pc, #24]	; (486c <configure_usart_callbacks+0x1c>)
    4854:	2201      	movs	r2, #1
    4856:	4906      	ldr	r1, [pc, #24]	; (4870 <configure_usart_callbacks+0x20>)
    4858:	0020      	movs	r0, r4
    485a:	4b06      	ldr	r3, [pc, #24]	; (4874 <configure_usart_callbacks+0x24>)
    485c:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    485e:	2231      	movs	r2, #49	; 0x31
    4860:	5ca3      	ldrb	r3, [r4, r2]
    4862:	2102      	movs	r1, #2
    4864:	430b      	orrs	r3, r1
    4866:	54a3      	strb	r3, [r4, r2]
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
}
    4868:	bd10      	pop	{r4, pc}
    486a:	46c0      	nop			; (mov r8, r8)
    486c:	200003bc 	.word	0x200003bc
    4870:	00004671 	.word	0x00004671
    4874:	00002b45 	.word	0x00002b45

00004878 <configure_adc>:
	usart_enable(&usart_USB);
}
*/

void configure_adc(void)
{
    4878:	b510      	push	{r4, lr}
    487a:	b08c      	sub	sp, #48	; 0x30
	struct adc_config config_adc;
	adc_get_config_defaults(&config_adc);
    487c:	4668      	mov	r0, sp
    487e:	4b16      	ldr	r3, [pc, #88]	; (48d8 <configure_adc+0x60>)
    4880:	4798      	blx	r3
	config_adc.clock_source = GCLK_GENERATOR_1;
    4882:	2301      	movs	r3, #1
    4884:	466a      	mov	r2, sp
    4886:	7013      	strb	r3, [r2, #0]
	config_adc.clock_prescaler = ADC_CLOCK_PRESCALER_DIV16;
    4888:	2380      	movs	r3, #128	; 0x80
    488a:	009b      	lsls	r3, r3, #2
    488c:	8053      	strh	r3, [r2, #2]
	config_adc.reference = ADC_REFERENCE_INT1V;
    488e:	2300      	movs	r3, #0
    4890:	7053      	strb	r3, [r2, #1]
	config_adc.positive_input = ADC_POSITIVE_INPUT_TEMP;
    4892:	3318      	adds	r3, #24
    4894:	7313      	strb	r3, [r2, #12]
	config_adc.negative_input = ADC_NEGATIVE_INPUT_GND;
    4896:	23c0      	movs	r3, #192	; 0xc0
    4898:	015b      	lsls	r3, r3, #5
    489a:	81d3      	strh	r3, [r2, #14]
	adc_init(&adc_instance, ADC, &config_adc);
    489c:	4c0f      	ldr	r4, [pc, #60]	; (48dc <configure_adc+0x64>)
    489e:	4910      	ldr	r1, [pc, #64]	; (48e0 <configure_adc+0x68>)
    48a0:	0020      	movs	r0, r4
    48a2:	4b10      	ldr	r3, [pc, #64]	; (48e4 <configure_adc+0x6c>)
    48a4:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    48a6:	6822      	ldr	r2, [r4, #0]
    48a8:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    48aa:	b25b      	sxtb	r3, r3
    48ac:	2b00      	cmp	r3, #0
    48ae:	dbfb      	blt.n	48a8 <configure_adc+0x30>
    48b0:	2180      	movs	r1, #128	; 0x80
    48b2:	0409      	lsls	r1, r1, #16
    48b4:	4b0c      	ldr	r3, [pc, #48]	; (48e8 <configure_adc+0x70>)
    48b6:	6019      	str	r1, [r3, #0]
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    48b8:	230f      	movs	r3, #15
    48ba:	7593      	strb	r3, [r2, #22]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    48bc:	7613      	strb	r3, [r2, #24]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    48be:	7813      	ldrb	r3, [r2, #0]
    48c0:	2102      	movs	r1, #2
    48c2:	430b      	orrs	r3, r1
    48c4:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
    48c6:	4b05      	ldr	r3, [pc, #20]	; (48dc <configure_adc+0x64>)
    48c8:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    48ca:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    48cc:	b25b      	sxtb	r3, r3
    48ce:	2b00      	cmp	r3, #0
    48d0:	dbfb      	blt.n	48ca <configure_adc+0x52>
	adc_enable(&adc_instance);
}
    48d2:	b00c      	add	sp, #48	; 0x30
    48d4:	bd10      	pop	{r4, pc}
    48d6:	46c0      	nop			; (mov r8, r8)
    48d8:	00001d91 	.word	0x00001d91
    48dc:	20003100 	.word	0x20003100
    48e0:	42004000 	.word	0x42004000
    48e4:	00001dd5 	.word	0x00001dd5
    48e8:	e000e100 	.word	0xe000e100

000048ec <setupBoard>:


void setupBoard(void)
{
    48ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t adcResult;
	uint16_t megaHurtz = (uint16_t)system_gclk_gen_get_hz(0);
    48ee:	2000      	movs	r0, #0
    48f0:	4b31      	ldr	r3, [pc, #196]	; (49b8 <setupBoard+0xcc>)
    48f2:	4798      	blx	r3
    48f4:	b287      	uxth	r7, r0
	

	system_init();
    48f6:	4b31      	ldr	r3, [pc, #196]	; (49bc <setupBoard+0xd0>)
    48f8:	4798      	blx	r3
	
	configure_adc();
    48fa:	4b31      	ldr	r3, [pc, #196]	; (49c0 <setupBoard+0xd4>)
    48fc:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    48fe:	4b31      	ldr	r3, [pc, #196]	; (49c4 <setupBoard+0xd8>)
    4900:	6819      	ldr	r1, [r3, #0]
    4902:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    4904:	b25b      	sxtb	r3, r3
    4906:	2b00      	cmp	r3, #0
    4908:	dbfb      	blt.n	4902 <setupBoard+0x16>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    490a:	7b0b      	ldrb	r3, [r1, #12]
    490c:	2202      	movs	r2, #2
    490e:	4313      	orrs	r3, r2
    4910:	730b      	strb	r3, [r1, #12]
    4912:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    4914:	b25b      	sxtb	r3, r3
    4916:	2b00      	cmp	r3, #0
    4918:	dbfb      	blt.n	4912 <setupBoard+0x26>
	if (int_flags & ADC_INTFLAG_RESRDY) {
    491a:	2401      	movs	r4, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
    491c:	2604      	movs	r6, #4
		status_flags |= ADC_STATUS_WINDOW;
    491e:	2502      	movs	r5, #2
    4920:	e001      	b.n	4926 <setupBoard+0x3a>
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    4922:	4214      	tst	r4, r2
    4924:	d10a      	bne.n	493c <setupBoard+0x50>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    4926:	7e0b      	ldrb	r3, [r1, #24]
    4928:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
    492a:	0022      	movs	r2, r4
    492c:	401a      	ands	r2, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
    492e:	421e      	tst	r6, r3
    4930:	d000      	beq.n	4934 <setupBoard+0x48>
		status_flags |= ADC_STATUS_WINDOW;
    4932:	432a      	orrs	r2, r5
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    4934:	421d      	tst	r5, r3
    4936:	d0f4      	beq.n	4922 <setupBoard+0x36>
		status_flags |= ADC_STATUS_OVERRUN;
    4938:	4332      	orrs	r2, r6
    493a:	e7f2      	b.n	4922 <setupBoard+0x36>
    493c:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    493e:	b25b      	sxtb	r3, r3
    4940:	2b00      	cmp	r3, #0
    4942:	dbfb      	blt.n	493c <setupBoard+0x50>
	*result = adc_module->RESULT.reg;
    4944:	8b48      	ldrh	r0, [r1, #26]
    4946:	b280      	uxth	r0, r0
	adc_module->INTFLAG.reg = int_flags;
    4948:	2301      	movs	r3, #1
    494a:	760b      	strb	r3, [r1, #24]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    494c:	7e0a      	ldrb	r2, [r1, #24]
    494e:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    4950:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    4952:	0754      	lsls	r4, r2, #29
    4954:	d501      	bpl.n	495a <setupBoard+0x6e>
		status_flags |= ADC_STATUS_WINDOW;
    4956:	2402      	movs	r4, #2
    4958:	4323      	orrs	r3, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    495a:	0792      	lsls	r2, r2, #30
    495c:	d501      	bpl.n	4962 <setupBoard+0x76>
		status_flags |= ADC_STATUS_OVERRUN;
    495e:	2204      	movs	r2, #4
    4960:	4313      	orrs	r3, r2
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    4962:	075b      	lsls	r3, r3, #29
    4964:	d501      	bpl.n	496a <setupBoard+0x7e>
	adc_module->INTFLAG.reg = int_flags;
    4966:	2302      	movs	r3, #2
    4968:	760b      	strb	r3, [r1, #24]
	do {
	/* Wait for conversion to be done and read out result */
	} while (adc_read(&adc_instance, &adcResult) == STATUS_BUSY);
	
	
	srand((adcResult ^ megaHurtz));
    496a:	4078      	eors	r0, r7
    496c:	4b16      	ldr	r3, [pc, #88]	; (49c8 <setupBoard+0xdc>)
    496e:	4798      	blx	r3
	
	delay_init();
    4970:	4b16      	ldr	r3, [pc, #88]	; (49cc <setupBoard+0xe0>)
    4972:	4798      	blx	r3
	
	conf_systick();
    4974:	4c16      	ldr	r4, [pc, #88]	; (49d0 <setupBoard+0xe4>)
    4976:	47a0      	blx	r4
	and PAD1 (PI_RX) on pin 47.
	
	Also, this gives us the ability to bridge UARTs. THIS IS COOL
	
	*/
	configure_usart();
    4978:	4b16      	ldr	r3, [pc, #88]	; (49d4 <setupBoard+0xe8>)
    497a:	4798      	blx	r3
	configure_usart_callbacks();
    497c:	4b16      	ldr	r3, [pc, #88]	; (49d8 <setupBoard+0xec>)
    497e:	4798      	blx	r3
	cpu_irq_enable();
    4980:	2201      	movs	r2, #1
    4982:	4b16      	ldr	r3, [pc, #88]	; (49dc <setupBoard+0xf0>)
    4984:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    4986:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    498a:	b662      	cpsie	i
	system_interrupt_enable_global();
	
	//I have no idea why I need to call this; it's in the callback and it
	//doesn't work without this line here. Remove this at your own peril.
	usart_read_buffer_job(&usart_instance, (uint8_t*)&rx_buf, 1);
    498c:	4914      	ldr	r1, [pc, #80]	; (49e0 <setupBoard+0xf4>)
    498e:	4815      	ldr	r0, [pc, #84]	; (49e4 <setupBoard+0xf8>)
    4990:	4b15      	ldr	r3, [pc, #84]	; (49e8 <setupBoard+0xfc>)
    4992:	4798      	blx	r3
	


	printf("\n\rSerial OK 9600 8N1\n\r");
    4994:	4815      	ldr	r0, [pc, #84]	; (49ec <setupBoard+0x100>)
    4996:	4b16      	ldr	r3, [pc, #88]	; (49f0 <setupBoard+0x104>)
    4998:	4798      	blx	r3

	
	InitLCD();
    499a:	4b16      	ldr	r3, [pc, #88]	; (49f4 <setupBoard+0x108>)
    499c:	4798      	blx	r3
	splashScreen();
    499e:	4b16      	ldr	r3, [pc, #88]	; (49f8 <setupBoard+0x10c>)
    49a0:	4798      	blx	r3
			
	conf_systick();
    49a2:	47a0      	blx	r4

	xCharPos=0;
    49a4:	2300      	movs	r3, #0
    49a6:	4a15      	ldr	r2, [pc, #84]	; (49fc <setupBoard+0x110>)
    49a8:	8013      	strh	r3, [r2, #0]
	yCharPos=0;
    49aa:	4a15      	ldr	r2, [pc, #84]	; (4a00 <setupBoard+0x114>)
    49ac:	8013      	strh	r3, [r2, #0]
	drawChar(0xFF);
    49ae:	20ff      	movs	r0, #255	; 0xff
    49b0:	4b14      	ldr	r3, [pc, #80]	; (4a04 <setupBoard+0x118>)
    49b2:	4798      	blx	r3
}
    49b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    49b6:	46c0      	nop			; (mov r8, r8)
    49b8:	0000323d 	.word	0x0000323d
    49bc:	00003481 	.word	0x00003481
    49c0:	00004879 	.word	0x00004879
    49c4:	20003100 	.word	0x20003100
    49c8:	00005061 	.word	0x00005061
    49cc:	00001c7d 	.word	0x00001c7d
    49d0:	000046f5 	.word	0x000046f5
    49d4:	00004749 	.word	0x00004749
    49d8:	00004851 	.word	0x00004851
    49dc:	20000020 	.word	0x20000020
    49e0:	200030fc 	.word	0x200030fc
    49e4:	200003bc 	.word	0x200003bc
    49e8:	00002b5d 	.word	0x00002b5d
    49ec:	000086ec 	.word	0x000086ec
    49f0:	00005005 	.word	0x00005005
    49f4:	00004425 	.word	0x00004425
    49f8:	000019f5 	.word	0x000019f5
    49fc:	200002ec 	.word	0x200002ec
    4a00:	200002ee 	.word	0x200002ee
    4a04:	00003665 	.word	0x00003665

00004a08 <main>:
{
    4a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	setupBoard();
    4a0a:	4b20      	ldr	r3, [pc, #128]	; (4a8c <main+0x84>)
    4a0c:	4798      	blx	r3
	uint8_t * buffer  = malloc(UART_BUFFER_SIZE * sizeof(uint8_t));
    4a0e:	200a      	movs	r0, #10
    4a10:	4b1f      	ldr	r3, [pc, #124]	; (4a90 <main+0x88>)
    4a12:	4798      	blx	r3
	ouroboros = ring_init(buffer, UART_BUFFER_SIZE);
    4a14:	210a      	movs	r1, #10
    4a16:	4b1f      	ldr	r3, [pc, #124]	; (4a94 <main+0x8c>)
    4a18:	4798      	blx	r3
    4a1a:	4b1f      	ldr	r3, [pc, #124]	; (4a98 <main+0x90>)
    4a1c:	6018      	str	r0, [r3, #0]
		if((ul_tickcount % (UINT16_MAX/4) == 0) && (funcLock == false))
    4a1e:	4f1f      	ldr	r7, [pc, #124]	; (4a9c <main+0x94>)
    4a20:	4e1f      	ldr	r6, [pc, #124]	; (4aa0 <main+0x98>)
    4a22:	4d20      	ldr	r5, [pc, #128]	; (4aa4 <main+0x9c>)
    4a24:	e015      	b.n	4a52 <main+0x4a>
		if((ul_tickcount % 200 == 0) && (funcLock == false))
    4a26:	21c8      	movs	r1, #200	; 0xc8
    4a28:	0020      	movs	r0, r4
    4a2a:	4b1d      	ldr	r3, [pc, #116]	; (4aa0 <main+0x98>)
    4a2c:	4798      	blx	r3
    4a2e:	b289      	uxth	r1, r1
    4a30:	2900      	cmp	r1, #0
    4a32:	d10e      	bne.n	4a52 <main+0x4a>
    4a34:	4b1c      	ldr	r3, [pc, #112]	; (4aa8 <main+0xa0>)
    4a36:	781b      	ldrb	r3, [r3, #0]
    4a38:	2b00      	cmp	r3, #0
    4a3a:	d10a      	bne.n	4a52 <main+0x4a>
			funcLock = true;
    4a3c:	4c1a      	ldr	r4, [pc, #104]	; (4aa8 <main+0xa0>)
    4a3e:	2301      	movs	r3, #1
    4a40:	7023      	strb	r3, [r4, #0]
			readKeyboard();
    4a42:	4b1a      	ldr	r3, [pc, #104]	; (4aac <main+0xa4>)
    4a44:	4798      	blx	r3
			printKeyboardBuffer();
    4a46:	4b1a      	ldr	r3, [pc, #104]	; (4ab0 <main+0xa8>)
    4a48:	4798      	blx	r3
			parseRXBuffer();
    4a4a:	4b1a      	ldr	r3, [pc, #104]	; (4ab4 <main+0xac>)
    4a4c:	4798      	blx	r3
			funcLock = false;
    4a4e:	2300      	movs	r3, #0
    4a50:	7023      	strb	r3, [r4, #0]
		__WFI();
    4a52:	bf30      	wfi
		if((ul_tickcount % (UINT16_MAX/4) == 0) && (funcLock == false))
    4a54:	883c      	ldrh	r4, [r7, #0]
    4a56:	0029      	movs	r1, r5
    4a58:	0020      	movs	r0, r4
    4a5a:	47b0      	blx	r6
    4a5c:	b289      	uxth	r1, r1
    4a5e:	2900      	cmp	r1, #0
    4a60:	d1e1      	bne.n	4a26 <main+0x1e>
    4a62:	4b11      	ldr	r3, [pc, #68]	; (4aa8 <main+0xa0>)
    4a64:	781b      	ldrb	r3, [r3, #0]
    4a66:	2b00      	cmp	r3, #0
    4a68:	d1f3      	bne.n	4a52 <main+0x4a>
			funcLock = true;
    4a6a:	4c0f      	ldr	r4, [pc, #60]	; (4aa8 <main+0xa0>)
    4a6c:	3301      	adds	r3, #1
    4a6e:	7023      	strb	r3, [r4, #0]
			blinkCursor();
    4a70:	4b11      	ldr	r3, [pc, #68]	; (4ab8 <main+0xb0>)
    4a72:	4798      	blx	r3
			funcLock = false;
    4a74:	2300      	movs	r3, #0
    4a76:	7023      	strb	r3, [r4, #0]
		if((ul_tickcount % 200 == 0) && (funcLock == false))
    4a78:	4b08      	ldr	r3, [pc, #32]	; (4a9c <main+0x94>)
    4a7a:	8818      	ldrh	r0, [r3, #0]
    4a7c:	21c8      	movs	r1, #200	; 0xc8
    4a7e:	4b08      	ldr	r3, [pc, #32]	; (4aa0 <main+0x98>)
    4a80:	4798      	blx	r3
    4a82:	b289      	uxth	r1, r1
    4a84:	2900      	cmp	r1, #0
    4a86:	d0d9      	beq.n	4a3c <main+0x34>
    4a88:	e7e3      	b.n	4a52 <main+0x4a>
    4a8a:	46c0      	nop			; (mov r8, r8)
    4a8c:	000048ed 	.word	0x000048ed
    4a90:	00004e7d 	.word	0x00004e7d
    4a94:	00000115 	.word	0x00000115
    4a98:	20000390 	.word	0x20000390
    4a9c:	200002f6 	.word	0x200002f6
    4aa0:	00004bc9 	.word	0x00004bc9
    4aa4:	00003fff 	.word	0x00003fff
    4aa8:	200002f4 	.word	0x200002f4
    4aac:	00003f71 	.word	0x00003f71
    4ab0:	00003bd9 	.word	0x00003bd9
    4ab4:	00001c29 	.word	0x00001c29
    4ab8:	0000382d 	.word	0x0000382d

00004abc <__udivsi3>:
    4abc:	2200      	movs	r2, #0
    4abe:	0843      	lsrs	r3, r0, #1
    4ac0:	428b      	cmp	r3, r1
    4ac2:	d374      	bcc.n	4bae <__udivsi3+0xf2>
    4ac4:	0903      	lsrs	r3, r0, #4
    4ac6:	428b      	cmp	r3, r1
    4ac8:	d35f      	bcc.n	4b8a <__udivsi3+0xce>
    4aca:	0a03      	lsrs	r3, r0, #8
    4acc:	428b      	cmp	r3, r1
    4ace:	d344      	bcc.n	4b5a <__udivsi3+0x9e>
    4ad0:	0b03      	lsrs	r3, r0, #12
    4ad2:	428b      	cmp	r3, r1
    4ad4:	d328      	bcc.n	4b28 <__udivsi3+0x6c>
    4ad6:	0c03      	lsrs	r3, r0, #16
    4ad8:	428b      	cmp	r3, r1
    4ada:	d30d      	bcc.n	4af8 <__udivsi3+0x3c>
    4adc:	22ff      	movs	r2, #255	; 0xff
    4ade:	0209      	lsls	r1, r1, #8
    4ae0:	ba12      	rev	r2, r2
    4ae2:	0c03      	lsrs	r3, r0, #16
    4ae4:	428b      	cmp	r3, r1
    4ae6:	d302      	bcc.n	4aee <__udivsi3+0x32>
    4ae8:	1212      	asrs	r2, r2, #8
    4aea:	0209      	lsls	r1, r1, #8
    4aec:	d065      	beq.n	4bba <__udivsi3+0xfe>
    4aee:	0b03      	lsrs	r3, r0, #12
    4af0:	428b      	cmp	r3, r1
    4af2:	d319      	bcc.n	4b28 <__udivsi3+0x6c>
    4af4:	e000      	b.n	4af8 <__udivsi3+0x3c>
    4af6:	0a09      	lsrs	r1, r1, #8
    4af8:	0bc3      	lsrs	r3, r0, #15
    4afa:	428b      	cmp	r3, r1
    4afc:	d301      	bcc.n	4b02 <__udivsi3+0x46>
    4afe:	03cb      	lsls	r3, r1, #15
    4b00:	1ac0      	subs	r0, r0, r3
    4b02:	4152      	adcs	r2, r2
    4b04:	0b83      	lsrs	r3, r0, #14
    4b06:	428b      	cmp	r3, r1
    4b08:	d301      	bcc.n	4b0e <__udivsi3+0x52>
    4b0a:	038b      	lsls	r3, r1, #14
    4b0c:	1ac0      	subs	r0, r0, r3
    4b0e:	4152      	adcs	r2, r2
    4b10:	0b43      	lsrs	r3, r0, #13
    4b12:	428b      	cmp	r3, r1
    4b14:	d301      	bcc.n	4b1a <__udivsi3+0x5e>
    4b16:	034b      	lsls	r3, r1, #13
    4b18:	1ac0      	subs	r0, r0, r3
    4b1a:	4152      	adcs	r2, r2
    4b1c:	0b03      	lsrs	r3, r0, #12
    4b1e:	428b      	cmp	r3, r1
    4b20:	d301      	bcc.n	4b26 <__udivsi3+0x6a>
    4b22:	030b      	lsls	r3, r1, #12
    4b24:	1ac0      	subs	r0, r0, r3
    4b26:	4152      	adcs	r2, r2
    4b28:	0ac3      	lsrs	r3, r0, #11
    4b2a:	428b      	cmp	r3, r1
    4b2c:	d301      	bcc.n	4b32 <__udivsi3+0x76>
    4b2e:	02cb      	lsls	r3, r1, #11
    4b30:	1ac0      	subs	r0, r0, r3
    4b32:	4152      	adcs	r2, r2
    4b34:	0a83      	lsrs	r3, r0, #10
    4b36:	428b      	cmp	r3, r1
    4b38:	d301      	bcc.n	4b3e <__udivsi3+0x82>
    4b3a:	028b      	lsls	r3, r1, #10
    4b3c:	1ac0      	subs	r0, r0, r3
    4b3e:	4152      	adcs	r2, r2
    4b40:	0a43      	lsrs	r3, r0, #9
    4b42:	428b      	cmp	r3, r1
    4b44:	d301      	bcc.n	4b4a <__udivsi3+0x8e>
    4b46:	024b      	lsls	r3, r1, #9
    4b48:	1ac0      	subs	r0, r0, r3
    4b4a:	4152      	adcs	r2, r2
    4b4c:	0a03      	lsrs	r3, r0, #8
    4b4e:	428b      	cmp	r3, r1
    4b50:	d301      	bcc.n	4b56 <__udivsi3+0x9a>
    4b52:	020b      	lsls	r3, r1, #8
    4b54:	1ac0      	subs	r0, r0, r3
    4b56:	4152      	adcs	r2, r2
    4b58:	d2cd      	bcs.n	4af6 <__udivsi3+0x3a>
    4b5a:	09c3      	lsrs	r3, r0, #7
    4b5c:	428b      	cmp	r3, r1
    4b5e:	d301      	bcc.n	4b64 <__udivsi3+0xa8>
    4b60:	01cb      	lsls	r3, r1, #7
    4b62:	1ac0      	subs	r0, r0, r3
    4b64:	4152      	adcs	r2, r2
    4b66:	0983      	lsrs	r3, r0, #6
    4b68:	428b      	cmp	r3, r1
    4b6a:	d301      	bcc.n	4b70 <__udivsi3+0xb4>
    4b6c:	018b      	lsls	r3, r1, #6
    4b6e:	1ac0      	subs	r0, r0, r3
    4b70:	4152      	adcs	r2, r2
    4b72:	0943      	lsrs	r3, r0, #5
    4b74:	428b      	cmp	r3, r1
    4b76:	d301      	bcc.n	4b7c <__udivsi3+0xc0>
    4b78:	014b      	lsls	r3, r1, #5
    4b7a:	1ac0      	subs	r0, r0, r3
    4b7c:	4152      	adcs	r2, r2
    4b7e:	0903      	lsrs	r3, r0, #4
    4b80:	428b      	cmp	r3, r1
    4b82:	d301      	bcc.n	4b88 <__udivsi3+0xcc>
    4b84:	010b      	lsls	r3, r1, #4
    4b86:	1ac0      	subs	r0, r0, r3
    4b88:	4152      	adcs	r2, r2
    4b8a:	08c3      	lsrs	r3, r0, #3
    4b8c:	428b      	cmp	r3, r1
    4b8e:	d301      	bcc.n	4b94 <__udivsi3+0xd8>
    4b90:	00cb      	lsls	r3, r1, #3
    4b92:	1ac0      	subs	r0, r0, r3
    4b94:	4152      	adcs	r2, r2
    4b96:	0883      	lsrs	r3, r0, #2
    4b98:	428b      	cmp	r3, r1
    4b9a:	d301      	bcc.n	4ba0 <__udivsi3+0xe4>
    4b9c:	008b      	lsls	r3, r1, #2
    4b9e:	1ac0      	subs	r0, r0, r3
    4ba0:	4152      	adcs	r2, r2
    4ba2:	0843      	lsrs	r3, r0, #1
    4ba4:	428b      	cmp	r3, r1
    4ba6:	d301      	bcc.n	4bac <__udivsi3+0xf0>
    4ba8:	004b      	lsls	r3, r1, #1
    4baa:	1ac0      	subs	r0, r0, r3
    4bac:	4152      	adcs	r2, r2
    4bae:	1a41      	subs	r1, r0, r1
    4bb0:	d200      	bcs.n	4bb4 <__udivsi3+0xf8>
    4bb2:	4601      	mov	r1, r0
    4bb4:	4152      	adcs	r2, r2
    4bb6:	4610      	mov	r0, r2
    4bb8:	4770      	bx	lr
    4bba:	e7ff      	b.n	4bbc <__udivsi3+0x100>
    4bbc:	b501      	push	{r0, lr}
    4bbe:	2000      	movs	r0, #0
    4bc0:	f000 f8f0 	bl	4da4 <__aeabi_idiv0>
    4bc4:	bd02      	pop	{r1, pc}
    4bc6:	46c0      	nop			; (mov r8, r8)

00004bc8 <__aeabi_uidivmod>:
    4bc8:	2900      	cmp	r1, #0
    4bca:	d0f7      	beq.n	4bbc <__udivsi3+0x100>
    4bcc:	e776      	b.n	4abc <__udivsi3>
    4bce:	4770      	bx	lr

00004bd0 <__divsi3>:
    4bd0:	4603      	mov	r3, r0
    4bd2:	430b      	orrs	r3, r1
    4bd4:	d47f      	bmi.n	4cd6 <__divsi3+0x106>
    4bd6:	2200      	movs	r2, #0
    4bd8:	0843      	lsrs	r3, r0, #1
    4bda:	428b      	cmp	r3, r1
    4bdc:	d374      	bcc.n	4cc8 <__divsi3+0xf8>
    4bde:	0903      	lsrs	r3, r0, #4
    4be0:	428b      	cmp	r3, r1
    4be2:	d35f      	bcc.n	4ca4 <__divsi3+0xd4>
    4be4:	0a03      	lsrs	r3, r0, #8
    4be6:	428b      	cmp	r3, r1
    4be8:	d344      	bcc.n	4c74 <__divsi3+0xa4>
    4bea:	0b03      	lsrs	r3, r0, #12
    4bec:	428b      	cmp	r3, r1
    4bee:	d328      	bcc.n	4c42 <__divsi3+0x72>
    4bf0:	0c03      	lsrs	r3, r0, #16
    4bf2:	428b      	cmp	r3, r1
    4bf4:	d30d      	bcc.n	4c12 <__divsi3+0x42>
    4bf6:	22ff      	movs	r2, #255	; 0xff
    4bf8:	0209      	lsls	r1, r1, #8
    4bfa:	ba12      	rev	r2, r2
    4bfc:	0c03      	lsrs	r3, r0, #16
    4bfe:	428b      	cmp	r3, r1
    4c00:	d302      	bcc.n	4c08 <__divsi3+0x38>
    4c02:	1212      	asrs	r2, r2, #8
    4c04:	0209      	lsls	r1, r1, #8
    4c06:	d065      	beq.n	4cd4 <__divsi3+0x104>
    4c08:	0b03      	lsrs	r3, r0, #12
    4c0a:	428b      	cmp	r3, r1
    4c0c:	d319      	bcc.n	4c42 <__divsi3+0x72>
    4c0e:	e000      	b.n	4c12 <__divsi3+0x42>
    4c10:	0a09      	lsrs	r1, r1, #8
    4c12:	0bc3      	lsrs	r3, r0, #15
    4c14:	428b      	cmp	r3, r1
    4c16:	d301      	bcc.n	4c1c <__divsi3+0x4c>
    4c18:	03cb      	lsls	r3, r1, #15
    4c1a:	1ac0      	subs	r0, r0, r3
    4c1c:	4152      	adcs	r2, r2
    4c1e:	0b83      	lsrs	r3, r0, #14
    4c20:	428b      	cmp	r3, r1
    4c22:	d301      	bcc.n	4c28 <__divsi3+0x58>
    4c24:	038b      	lsls	r3, r1, #14
    4c26:	1ac0      	subs	r0, r0, r3
    4c28:	4152      	adcs	r2, r2
    4c2a:	0b43      	lsrs	r3, r0, #13
    4c2c:	428b      	cmp	r3, r1
    4c2e:	d301      	bcc.n	4c34 <__divsi3+0x64>
    4c30:	034b      	lsls	r3, r1, #13
    4c32:	1ac0      	subs	r0, r0, r3
    4c34:	4152      	adcs	r2, r2
    4c36:	0b03      	lsrs	r3, r0, #12
    4c38:	428b      	cmp	r3, r1
    4c3a:	d301      	bcc.n	4c40 <__divsi3+0x70>
    4c3c:	030b      	lsls	r3, r1, #12
    4c3e:	1ac0      	subs	r0, r0, r3
    4c40:	4152      	adcs	r2, r2
    4c42:	0ac3      	lsrs	r3, r0, #11
    4c44:	428b      	cmp	r3, r1
    4c46:	d301      	bcc.n	4c4c <__divsi3+0x7c>
    4c48:	02cb      	lsls	r3, r1, #11
    4c4a:	1ac0      	subs	r0, r0, r3
    4c4c:	4152      	adcs	r2, r2
    4c4e:	0a83      	lsrs	r3, r0, #10
    4c50:	428b      	cmp	r3, r1
    4c52:	d301      	bcc.n	4c58 <__divsi3+0x88>
    4c54:	028b      	lsls	r3, r1, #10
    4c56:	1ac0      	subs	r0, r0, r3
    4c58:	4152      	adcs	r2, r2
    4c5a:	0a43      	lsrs	r3, r0, #9
    4c5c:	428b      	cmp	r3, r1
    4c5e:	d301      	bcc.n	4c64 <__divsi3+0x94>
    4c60:	024b      	lsls	r3, r1, #9
    4c62:	1ac0      	subs	r0, r0, r3
    4c64:	4152      	adcs	r2, r2
    4c66:	0a03      	lsrs	r3, r0, #8
    4c68:	428b      	cmp	r3, r1
    4c6a:	d301      	bcc.n	4c70 <__divsi3+0xa0>
    4c6c:	020b      	lsls	r3, r1, #8
    4c6e:	1ac0      	subs	r0, r0, r3
    4c70:	4152      	adcs	r2, r2
    4c72:	d2cd      	bcs.n	4c10 <__divsi3+0x40>
    4c74:	09c3      	lsrs	r3, r0, #7
    4c76:	428b      	cmp	r3, r1
    4c78:	d301      	bcc.n	4c7e <__divsi3+0xae>
    4c7a:	01cb      	lsls	r3, r1, #7
    4c7c:	1ac0      	subs	r0, r0, r3
    4c7e:	4152      	adcs	r2, r2
    4c80:	0983      	lsrs	r3, r0, #6
    4c82:	428b      	cmp	r3, r1
    4c84:	d301      	bcc.n	4c8a <__divsi3+0xba>
    4c86:	018b      	lsls	r3, r1, #6
    4c88:	1ac0      	subs	r0, r0, r3
    4c8a:	4152      	adcs	r2, r2
    4c8c:	0943      	lsrs	r3, r0, #5
    4c8e:	428b      	cmp	r3, r1
    4c90:	d301      	bcc.n	4c96 <__divsi3+0xc6>
    4c92:	014b      	lsls	r3, r1, #5
    4c94:	1ac0      	subs	r0, r0, r3
    4c96:	4152      	adcs	r2, r2
    4c98:	0903      	lsrs	r3, r0, #4
    4c9a:	428b      	cmp	r3, r1
    4c9c:	d301      	bcc.n	4ca2 <__divsi3+0xd2>
    4c9e:	010b      	lsls	r3, r1, #4
    4ca0:	1ac0      	subs	r0, r0, r3
    4ca2:	4152      	adcs	r2, r2
    4ca4:	08c3      	lsrs	r3, r0, #3
    4ca6:	428b      	cmp	r3, r1
    4ca8:	d301      	bcc.n	4cae <__divsi3+0xde>
    4caa:	00cb      	lsls	r3, r1, #3
    4cac:	1ac0      	subs	r0, r0, r3
    4cae:	4152      	adcs	r2, r2
    4cb0:	0883      	lsrs	r3, r0, #2
    4cb2:	428b      	cmp	r3, r1
    4cb4:	d301      	bcc.n	4cba <__divsi3+0xea>
    4cb6:	008b      	lsls	r3, r1, #2
    4cb8:	1ac0      	subs	r0, r0, r3
    4cba:	4152      	adcs	r2, r2
    4cbc:	0843      	lsrs	r3, r0, #1
    4cbe:	428b      	cmp	r3, r1
    4cc0:	d301      	bcc.n	4cc6 <__divsi3+0xf6>
    4cc2:	004b      	lsls	r3, r1, #1
    4cc4:	1ac0      	subs	r0, r0, r3
    4cc6:	4152      	adcs	r2, r2
    4cc8:	1a41      	subs	r1, r0, r1
    4cca:	d200      	bcs.n	4cce <__divsi3+0xfe>
    4ccc:	4601      	mov	r1, r0
    4cce:	4152      	adcs	r2, r2
    4cd0:	4610      	mov	r0, r2
    4cd2:	4770      	bx	lr
    4cd4:	e05d      	b.n	4d92 <__divsi3+0x1c2>
    4cd6:	0fca      	lsrs	r2, r1, #31
    4cd8:	d000      	beq.n	4cdc <__divsi3+0x10c>
    4cda:	4249      	negs	r1, r1
    4cdc:	1003      	asrs	r3, r0, #32
    4cde:	d300      	bcc.n	4ce2 <__divsi3+0x112>
    4ce0:	4240      	negs	r0, r0
    4ce2:	4053      	eors	r3, r2
    4ce4:	2200      	movs	r2, #0
    4ce6:	469c      	mov	ip, r3
    4ce8:	0903      	lsrs	r3, r0, #4
    4cea:	428b      	cmp	r3, r1
    4cec:	d32d      	bcc.n	4d4a <__divsi3+0x17a>
    4cee:	0a03      	lsrs	r3, r0, #8
    4cf0:	428b      	cmp	r3, r1
    4cf2:	d312      	bcc.n	4d1a <__divsi3+0x14a>
    4cf4:	22fc      	movs	r2, #252	; 0xfc
    4cf6:	0189      	lsls	r1, r1, #6
    4cf8:	ba12      	rev	r2, r2
    4cfa:	0a03      	lsrs	r3, r0, #8
    4cfc:	428b      	cmp	r3, r1
    4cfe:	d30c      	bcc.n	4d1a <__divsi3+0x14a>
    4d00:	0189      	lsls	r1, r1, #6
    4d02:	1192      	asrs	r2, r2, #6
    4d04:	428b      	cmp	r3, r1
    4d06:	d308      	bcc.n	4d1a <__divsi3+0x14a>
    4d08:	0189      	lsls	r1, r1, #6
    4d0a:	1192      	asrs	r2, r2, #6
    4d0c:	428b      	cmp	r3, r1
    4d0e:	d304      	bcc.n	4d1a <__divsi3+0x14a>
    4d10:	0189      	lsls	r1, r1, #6
    4d12:	d03a      	beq.n	4d8a <__divsi3+0x1ba>
    4d14:	1192      	asrs	r2, r2, #6
    4d16:	e000      	b.n	4d1a <__divsi3+0x14a>
    4d18:	0989      	lsrs	r1, r1, #6
    4d1a:	09c3      	lsrs	r3, r0, #7
    4d1c:	428b      	cmp	r3, r1
    4d1e:	d301      	bcc.n	4d24 <__divsi3+0x154>
    4d20:	01cb      	lsls	r3, r1, #7
    4d22:	1ac0      	subs	r0, r0, r3
    4d24:	4152      	adcs	r2, r2
    4d26:	0983      	lsrs	r3, r0, #6
    4d28:	428b      	cmp	r3, r1
    4d2a:	d301      	bcc.n	4d30 <__divsi3+0x160>
    4d2c:	018b      	lsls	r3, r1, #6
    4d2e:	1ac0      	subs	r0, r0, r3
    4d30:	4152      	adcs	r2, r2
    4d32:	0943      	lsrs	r3, r0, #5
    4d34:	428b      	cmp	r3, r1
    4d36:	d301      	bcc.n	4d3c <__divsi3+0x16c>
    4d38:	014b      	lsls	r3, r1, #5
    4d3a:	1ac0      	subs	r0, r0, r3
    4d3c:	4152      	adcs	r2, r2
    4d3e:	0903      	lsrs	r3, r0, #4
    4d40:	428b      	cmp	r3, r1
    4d42:	d301      	bcc.n	4d48 <__divsi3+0x178>
    4d44:	010b      	lsls	r3, r1, #4
    4d46:	1ac0      	subs	r0, r0, r3
    4d48:	4152      	adcs	r2, r2
    4d4a:	08c3      	lsrs	r3, r0, #3
    4d4c:	428b      	cmp	r3, r1
    4d4e:	d301      	bcc.n	4d54 <__divsi3+0x184>
    4d50:	00cb      	lsls	r3, r1, #3
    4d52:	1ac0      	subs	r0, r0, r3
    4d54:	4152      	adcs	r2, r2
    4d56:	0883      	lsrs	r3, r0, #2
    4d58:	428b      	cmp	r3, r1
    4d5a:	d301      	bcc.n	4d60 <__divsi3+0x190>
    4d5c:	008b      	lsls	r3, r1, #2
    4d5e:	1ac0      	subs	r0, r0, r3
    4d60:	4152      	adcs	r2, r2
    4d62:	d2d9      	bcs.n	4d18 <__divsi3+0x148>
    4d64:	0843      	lsrs	r3, r0, #1
    4d66:	428b      	cmp	r3, r1
    4d68:	d301      	bcc.n	4d6e <__divsi3+0x19e>
    4d6a:	004b      	lsls	r3, r1, #1
    4d6c:	1ac0      	subs	r0, r0, r3
    4d6e:	4152      	adcs	r2, r2
    4d70:	1a41      	subs	r1, r0, r1
    4d72:	d200      	bcs.n	4d76 <__divsi3+0x1a6>
    4d74:	4601      	mov	r1, r0
    4d76:	4663      	mov	r3, ip
    4d78:	4152      	adcs	r2, r2
    4d7a:	105b      	asrs	r3, r3, #1
    4d7c:	4610      	mov	r0, r2
    4d7e:	d301      	bcc.n	4d84 <__divsi3+0x1b4>
    4d80:	4240      	negs	r0, r0
    4d82:	2b00      	cmp	r3, #0
    4d84:	d500      	bpl.n	4d88 <__divsi3+0x1b8>
    4d86:	4249      	negs	r1, r1
    4d88:	4770      	bx	lr
    4d8a:	4663      	mov	r3, ip
    4d8c:	105b      	asrs	r3, r3, #1
    4d8e:	d300      	bcc.n	4d92 <__divsi3+0x1c2>
    4d90:	4240      	negs	r0, r0
    4d92:	b501      	push	{r0, lr}
    4d94:	2000      	movs	r0, #0
    4d96:	f000 f805 	bl	4da4 <__aeabi_idiv0>
    4d9a:	bd02      	pop	{r1, pc}

00004d9c <__aeabi_idivmod>:
    4d9c:	2900      	cmp	r1, #0
    4d9e:	d0f8      	beq.n	4d92 <__divsi3+0x1c2>
    4da0:	e716      	b.n	4bd0 <__divsi3>
    4da2:	4770      	bx	lr

00004da4 <__aeabi_idiv0>:
    4da4:	4770      	bx	lr
    4da6:	46c0      	nop			; (mov r8, r8)

00004da8 <__aeabi_lmul>:
    4da8:	b5f0      	push	{r4, r5, r6, r7, lr}
    4daa:	46ce      	mov	lr, r9
    4dac:	4647      	mov	r7, r8
    4dae:	0415      	lsls	r5, r2, #16
    4db0:	0c2d      	lsrs	r5, r5, #16
    4db2:	002e      	movs	r6, r5
    4db4:	b580      	push	{r7, lr}
    4db6:	0407      	lsls	r7, r0, #16
    4db8:	0c14      	lsrs	r4, r2, #16
    4dba:	0c3f      	lsrs	r7, r7, #16
    4dbc:	4699      	mov	r9, r3
    4dbe:	0c03      	lsrs	r3, r0, #16
    4dc0:	437e      	muls	r6, r7
    4dc2:	435d      	muls	r5, r3
    4dc4:	4367      	muls	r7, r4
    4dc6:	4363      	muls	r3, r4
    4dc8:	197f      	adds	r7, r7, r5
    4dca:	0c34      	lsrs	r4, r6, #16
    4dcc:	19e4      	adds	r4, r4, r7
    4dce:	469c      	mov	ip, r3
    4dd0:	42a5      	cmp	r5, r4
    4dd2:	d903      	bls.n	4ddc <__aeabi_lmul+0x34>
    4dd4:	2380      	movs	r3, #128	; 0x80
    4dd6:	025b      	lsls	r3, r3, #9
    4dd8:	4698      	mov	r8, r3
    4dda:	44c4      	add	ip, r8
    4ddc:	464b      	mov	r3, r9
    4dde:	4351      	muls	r1, r2
    4de0:	4343      	muls	r3, r0
    4de2:	0436      	lsls	r6, r6, #16
    4de4:	0c36      	lsrs	r6, r6, #16
    4de6:	0c25      	lsrs	r5, r4, #16
    4de8:	0424      	lsls	r4, r4, #16
    4dea:	4465      	add	r5, ip
    4dec:	19a4      	adds	r4, r4, r6
    4dee:	1859      	adds	r1, r3, r1
    4df0:	1949      	adds	r1, r1, r5
    4df2:	0020      	movs	r0, r4
    4df4:	bc0c      	pop	{r2, r3}
    4df6:	4690      	mov	r8, r2
    4df8:	4699      	mov	r9, r3
    4dfa:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004dfc <__libc_init_array>:
    4dfc:	b570      	push	{r4, r5, r6, lr}
    4dfe:	2600      	movs	r6, #0
    4e00:	4d0c      	ldr	r5, [pc, #48]	; (4e34 <__libc_init_array+0x38>)
    4e02:	4c0d      	ldr	r4, [pc, #52]	; (4e38 <__libc_init_array+0x3c>)
    4e04:	1b64      	subs	r4, r4, r5
    4e06:	10a4      	asrs	r4, r4, #2
    4e08:	42a6      	cmp	r6, r4
    4e0a:	d109      	bne.n	4e20 <__libc_init_array+0x24>
    4e0c:	2600      	movs	r6, #0
    4e0e:	f003 fcd9 	bl	87c4 <_init>
    4e12:	4d0a      	ldr	r5, [pc, #40]	; (4e3c <__libc_init_array+0x40>)
    4e14:	4c0a      	ldr	r4, [pc, #40]	; (4e40 <__libc_init_array+0x44>)
    4e16:	1b64      	subs	r4, r4, r5
    4e18:	10a4      	asrs	r4, r4, #2
    4e1a:	42a6      	cmp	r6, r4
    4e1c:	d105      	bne.n	4e2a <__libc_init_array+0x2e>
    4e1e:	bd70      	pop	{r4, r5, r6, pc}
    4e20:	00b3      	lsls	r3, r6, #2
    4e22:	58eb      	ldr	r3, [r5, r3]
    4e24:	4798      	blx	r3
    4e26:	3601      	adds	r6, #1
    4e28:	e7ee      	b.n	4e08 <__libc_init_array+0xc>
    4e2a:	00b3      	lsls	r3, r6, #2
    4e2c:	58eb      	ldr	r3, [r5, r3]
    4e2e:	4798      	blx	r3
    4e30:	3601      	adds	r6, #1
    4e32:	e7f2      	b.n	4e1a <__libc_init_array+0x1e>
    4e34:	000087d0 	.word	0x000087d0
    4e38:	000087d0 	.word	0x000087d0
    4e3c:	000087d0 	.word	0x000087d0
    4e40:	000087d4 	.word	0x000087d4

00004e44 <__itoa>:
    4e44:	1e93      	subs	r3, r2, #2
    4e46:	b510      	push	{r4, lr}
    4e48:	000c      	movs	r4, r1
    4e4a:	2b22      	cmp	r3, #34	; 0x22
    4e4c:	d904      	bls.n	4e58 <__itoa+0x14>
    4e4e:	2300      	movs	r3, #0
    4e50:	001c      	movs	r4, r3
    4e52:	700b      	strb	r3, [r1, #0]
    4e54:	0020      	movs	r0, r4
    4e56:	bd10      	pop	{r4, pc}
    4e58:	2a0a      	cmp	r2, #10
    4e5a:	d109      	bne.n	4e70 <__itoa+0x2c>
    4e5c:	2800      	cmp	r0, #0
    4e5e:	da07      	bge.n	4e70 <__itoa+0x2c>
    4e60:	232d      	movs	r3, #45	; 0x2d
    4e62:	700b      	strb	r3, [r1, #0]
    4e64:	2101      	movs	r1, #1
    4e66:	4240      	negs	r0, r0
    4e68:	1861      	adds	r1, r4, r1
    4e6a:	f000 fa3f 	bl	52ec <__utoa>
    4e6e:	e7f1      	b.n	4e54 <__itoa+0x10>
    4e70:	2100      	movs	r1, #0
    4e72:	e7f9      	b.n	4e68 <__itoa+0x24>

00004e74 <itoa>:
    4e74:	b510      	push	{r4, lr}
    4e76:	f7ff ffe5 	bl	4e44 <__itoa>
    4e7a:	bd10      	pop	{r4, pc}

00004e7c <malloc>:
    4e7c:	b510      	push	{r4, lr}
    4e7e:	4b03      	ldr	r3, [pc, #12]	; (4e8c <malloc+0x10>)
    4e80:	0001      	movs	r1, r0
    4e82:	6818      	ldr	r0, [r3, #0]
    4e84:	f000 f860 	bl	4f48 <_malloc_r>
    4e88:	bd10      	pop	{r4, pc}
    4e8a:	46c0      	nop			; (mov r8, r8)
    4e8c:	200001a8 	.word	0x200001a8

00004e90 <memcpy>:
    4e90:	2300      	movs	r3, #0
    4e92:	b510      	push	{r4, lr}
    4e94:	429a      	cmp	r2, r3
    4e96:	d100      	bne.n	4e9a <memcpy+0xa>
    4e98:	bd10      	pop	{r4, pc}
    4e9a:	5ccc      	ldrb	r4, [r1, r3]
    4e9c:	54c4      	strb	r4, [r0, r3]
    4e9e:	3301      	adds	r3, #1
    4ea0:	e7f8      	b.n	4e94 <memcpy+0x4>

00004ea2 <memset>:
    4ea2:	0003      	movs	r3, r0
    4ea4:	1882      	adds	r2, r0, r2
    4ea6:	4293      	cmp	r3, r2
    4ea8:	d100      	bne.n	4eac <memset+0xa>
    4eaa:	4770      	bx	lr
    4eac:	7019      	strb	r1, [r3, #0]
    4eae:	3301      	adds	r3, #1
    4eb0:	e7f9      	b.n	4ea6 <memset+0x4>
	...

00004eb4 <_free_r>:
    4eb4:	b570      	push	{r4, r5, r6, lr}
    4eb6:	0005      	movs	r5, r0
    4eb8:	2900      	cmp	r1, #0
    4eba:	d010      	beq.n	4ede <_free_r+0x2a>
    4ebc:	1f0c      	subs	r4, r1, #4
    4ebe:	6823      	ldr	r3, [r4, #0]
    4ec0:	2b00      	cmp	r3, #0
    4ec2:	da00      	bge.n	4ec6 <_free_r+0x12>
    4ec4:	18e4      	adds	r4, r4, r3
    4ec6:	0028      	movs	r0, r5
    4ec8:	f000 fc44 	bl	5754 <__malloc_lock>
    4ecc:	4a1d      	ldr	r2, [pc, #116]	; (4f44 <_free_r+0x90>)
    4ece:	6813      	ldr	r3, [r2, #0]
    4ed0:	2b00      	cmp	r3, #0
    4ed2:	d105      	bne.n	4ee0 <_free_r+0x2c>
    4ed4:	6063      	str	r3, [r4, #4]
    4ed6:	6014      	str	r4, [r2, #0]
    4ed8:	0028      	movs	r0, r5
    4eda:	f000 fc3c 	bl	5756 <__malloc_unlock>
    4ede:	bd70      	pop	{r4, r5, r6, pc}
    4ee0:	42a3      	cmp	r3, r4
    4ee2:	d909      	bls.n	4ef8 <_free_r+0x44>
    4ee4:	6821      	ldr	r1, [r4, #0]
    4ee6:	1860      	adds	r0, r4, r1
    4ee8:	4283      	cmp	r3, r0
    4eea:	d1f3      	bne.n	4ed4 <_free_r+0x20>
    4eec:	6818      	ldr	r0, [r3, #0]
    4eee:	685b      	ldr	r3, [r3, #4]
    4ef0:	1841      	adds	r1, r0, r1
    4ef2:	6021      	str	r1, [r4, #0]
    4ef4:	e7ee      	b.n	4ed4 <_free_r+0x20>
    4ef6:	0013      	movs	r3, r2
    4ef8:	685a      	ldr	r2, [r3, #4]
    4efa:	2a00      	cmp	r2, #0
    4efc:	d001      	beq.n	4f02 <_free_r+0x4e>
    4efe:	42a2      	cmp	r2, r4
    4f00:	d9f9      	bls.n	4ef6 <_free_r+0x42>
    4f02:	6819      	ldr	r1, [r3, #0]
    4f04:	1858      	adds	r0, r3, r1
    4f06:	42a0      	cmp	r0, r4
    4f08:	d10b      	bne.n	4f22 <_free_r+0x6e>
    4f0a:	6820      	ldr	r0, [r4, #0]
    4f0c:	1809      	adds	r1, r1, r0
    4f0e:	1858      	adds	r0, r3, r1
    4f10:	6019      	str	r1, [r3, #0]
    4f12:	4282      	cmp	r2, r0
    4f14:	d1e0      	bne.n	4ed8 <_free_r+0x24>
    4f16:	6810      	ldr	r0, [r2, #0]
    4f18:	6852      	ldr	r2, [r2, #4]
    4f1a:	1841      	adds	r1, r0, r1
    4f1c:	6019      	str	r1, [r3, #0]
    4f1e:	605a      	str	r2, [r3, #4]
    4f20:	e7da      	b.n	4ed8 <_free_r+0x24>
    4f22:	42a0      	cmp	r0, r4
    4f24:	d902      	bls.n	4f2c <_free_r+0x78>
    4f26:	230c      	movs	r3, #12
    4f28:	602b      	str	r3, [r5, #0]
    4f2a:	e7d5      	b.n	4ed8 <_free_r+0x24>
    4f2c:	6821      	ldr	r1, [r4, #0]
    4f2e:	1860      	adds	r0, r4, r1
    4f30:	4282      	cmp	r2, r0
    4f32:	d103      	bne.n	4f3c <_free_r+0x88>
    4f34:	6810      	ldr	r0, [r2, #0]
    4f36:	6852      	ldr	r2, [r2, #4]
    4f38:	1841      	adds	r1, r0, r1
    4f3a:	6021      	str	r1, [r4, #0]
    4f3c:	6062      	str	r2, [r4, #4]
    4f3e:	605c      	str	r4, [r3, #4]
    4f40:	e7ca      	b.n	4ed8 <_free_r+0x24>
    4f42:	46c0      	nop			; (mov r8, r8)
    4f44:	200002f8 	.word	0x200002f8

00004f48 <_malloc_r>:
    4f48:	2303      	movs	r3, #3
    4f4a:	b570      	push	{r4, r5, r6, lr}
    4f4c:	1ccd      	adds	r5, r1, #3
    4f4e:	439d      	bics	r5, r3
    4f50:	3508      	adds	r5, #8
    4f52:	0006      	movs	r6, r0
    4f54:	2d0c      	cmp	r5, #12
    4f56:	d21e      	bcs.n	4f96 <_malloc_r+0x4e>
    4f58:	250c      	movs	r5, #12
    4f5a:	42a9      	cmp	r1, r5
    4f5c:	d81d      	bhi.n	4f9a <_malloc_r+0x52>
    4f5e:	0030      	movs	r0, r6
    4f60:	f000 fbf8 	bl	5754 <__malloc_lock>
    4f64:	4a25      	ldr	r2, [pc, #148]	; (4ffc <_malloc_r+0xb4>)
    4f66:	6814      	ldr	r4, [r2, #0]
    4f68:	0021      	movs	r1, r4
    4f6a:	2900      	cmp	r1, #0
    4f6c:	d119      	bne.n	4fa2 <_malloc_r+0x5a>
    4f6e:	4c24      	ldr	r4, [pc, #144]	; (5000 <_malloc_r+0xb8>)
    4f70:	6823      	ldr	r3, [r4, #0]
    4f72:	2b00      	cmp	r3, #0
    4f74:	d103      	bne.n	4f7e <_malloc_r+0x36>
    4f76:	0030      	movs	r0, r6
    4f78:	f000 f8dc 	bl	5134 <_sbrk_r>
    4f7c:	6020      	str	r0, [r4, #0]
    4f7e:	0029      	movs	r1, r5
    4f80:	0030      	movs	r0, r6
    4f82:	f000 f8d7 	bl	5134 <_sbrk_r>
    4f86:	1c43      	adds	r3, r0, #1
    4f88:	d12c      	bne.n	4fe4 <_malloc_r+0x9c>
    4f8a:	230c      	movs	r3, #12
    4f8c:	0030      	movs	r0, r6
    4f8e:	6033      	str	r3, [r6, #0]
    4f90:	f000 fbe1 	bl	5756 <__malloc_unlock>
    4f94:	e003      	b.n	4f9e <_malloc_r+0x56>
    4f96:	2d00      	cmp	r5, #0
    4f98:	dadf      	bge.n	4f5a <_malloc_r+0x12>
    4f9a:	230c      	movs	r3, #12
    4f9c:	6033      	str	r3, [r6, #0]
    4f9e:	2000      	movs	r0, #0
    4fa0:	bd70      	pop	{r4, r5, r6, pc}
    4fa2:	680b      	ldr	r3, [r1, #0]
    4fa4:	1b5b      	subs	r3, r3, r5
    4fa6:	d41a      	bmi.n	4fde <_malloc_r+0x96>
    4fa8:	2b0b      	cmp	r3, #11
    4faa:	d903      	bls.n	4fb4 <_malloc_r+0x6c>
    4fac:	600b      	str	r3, [r1, #0]
    4fae:	18cc      	adds	r4, r1, r3
    4fb0:	6025      	str	r5, [r4, #0]
    4fb2:	e003      	b.n	4fbc <_malloc_r+0x74>
    4fb4:	428c      	cmp	r4, r1
    4fb6:	d10e      	bne.n	4fd6 <_malloc_r+0x8e>
    4fb8:	6863      	ldr	r3, [r4, #4]
    4fba:	6013      	str	r3, [r2, #0]
    4fbc:	0030      	movs	r0, r6
    4fbe:	f000 fbca 	bl	5756 <__malloc_unlock>
    4fc2:	0020      	movs	r0, r4
    4fc4:	2207      	movs	r2, #7
    4fc6:	300b      	adds	r0, #11
    4fc8:	1d23      	adds	r3, r4, #4
    4fca:	4390      	bics	r0, r2
    4fcc:	1ac3      	subs	r3, r0, r3
    4fce:	d0e7      	beq.n	4fa0 <_malloc_r+0x58>
    4fd0:	425a      	negs	r2, r3
    4fd2:	50e2      	str	r2, [r4, r3]
    4fd4:	e7e4      	b.n	4fa0 <_malloc_r+0x58>
    4fd6:	684b      	ldr	r3, [r1, #4]
    4fd8:	6063      	str	r3, [r4, #4]
    4fda:	000c      	movs	r4, r1
    4fdc:	e7ee      	b.n	4fbc <_malloc_r+0x74>
    4fde:	000c      	movs	r4, r1
    4fe0:	6849      	ldr	r1, [r1, #4]
    4fe2:	e7c2      	b.n	4f6a <_malloc_r+0x22>
    4fe4:	2303      	movs	r3, #3
    4fe6:	1cc4      	adds	r4, r0, #3
    4fe8:	439c      	bics	r4, r3
    4fea:	42a0      	cmp	r0, r4
    4fec:	d0e0      	beq.n	4fb0 <_malloc_r+0x68>
    4fee:	1a21      	subs	r1, r4, r0
    4ff0:	0030      	movs	r0, r6
    4ff2:	f000 f89f 	bl	5134 <_sbrk_r>
    4ff6:	1c43      	adds	r3, r0, #1
    4ff8:	d1da      	bne.n	4fb0 <_malloc_r+0x68>
    4ffa:	e7c6      	b.n	4f8a <_malloc_r+0x42>
    4ffc:	200002f8 	.word	0x200002f8
    5000:	200002fc 	.word	0x200002fc

00005004 <iprintf>:
    5004:	b40f      	push	{r0, r1, r2, r3}
    5006:	4b0b      	ldr	r3, [pc, #44]	; (5034 <iprintf+0x30>)
    5008:	b513      	push	{r0, r1, r4, lr}
    500a:	681c      	ldr	r4, [r3, #0]
    500c:	2c00      	cmp	r4, #0
    500e:	d005      	beq.n	501c <iprintf+0x18>
    5010:	69a3      	ldr	r3, [r4, #24]
    5012:	2b00      	cmp	r3, #0
    5014:	d102      	bne.n	501c <iprintf+0x18>
    5016:	0020      	movs	r0, r4
    5018:	f000 fa9a 	bl	5550 <__sinit>
    501c:	ab05      	add	r3, sp, #20
    501e:	9a04      	ldr	r2, [sp, #16]
    5020:	68a1      	ldr	r1, [r4, #8]
    5022:	0020      	movs	r0, r4
    5024:	9301      	str	r3, [sp, #4]
    5026:	f000 fbbf 	bl	57a8 <_vfiprintf_r>
    502a:	bc16      	pop	{r1, r2, r4}
    502c:	bc08      	pop	{r3}
    502e:	b004      	add	sp, #16
    5030:	4718      	bx	r3
    5032:	46c0      	nop			; (mov r8, r8)
    5034:	200001a8 	.word	0x200001a8

00005038 <putchar>:
    5038:	4b08      	ldr	r3, [pc, #32]	; (505c <putchar+0x24>)
    503a:	b570      	push	{r4, r5, r6, lr}
    503c:	681c      	ldr	r4, [r3, #0]
    503e:	0005      	movs	r5, r0
    5040:	2c00      	cmp	r4, #0
    5042:	d005      	beq.n	5050 <putchar+0x18>
    5044:	69a3      	ldr	r3, [r4, #24]
    5046:	2b00      	cmp	r3, #0
    5048:	d102      	bne.n	5050 <putchar+0x18>
    504a:	0020      	movs	r0, r4
    504c:	f000 fa80 	bl	5550 <__sinit>
    5050:	0029      	movs	r1, r5
    5052:	68a2      	ldr	r2, [r4, #8]
    5054:	0020      	movs	r0, r4
    5056:	f000 fe4b 	bl	5cf0 <_putc_r>
    505a:	bd70      	pop	{r4, r5, r6, pc}
    505c:	200001a8 	.word	0x200001a8

00005060 <srand>:
    5060:	4b10      	ldr	r3, [pc, #64]	; (50a4 <srand+0x44>)
    5062:	b570      	push	{r4, r5, r6, lr}
    5064:	681c      	ldr	r4, [r3, #0]
    5066:	0005      	movs	r5, r0
    5068:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    506a:	2b00      	cmp	r3, #0
    506c:	d115      	bne.n	509a <srand+0x3a>
    506e:	2018      	movs	r0, #24
    5070:	f7ff ff04 	bl	4e7c <malloc>
    5074:	4b0c      	ldr	r3, [pc, #48]	; (50a8 <srand+0x48>)
    5076:	63a0      	str	r0, [r4, #56]	; 0x38
    5078:	8003      	strh	r3, [r0, #0]
    507a:	4b0c      	ldr	r3, [pc, #48]	; (50ac <srand+0x4c>)
    507c:	2201      	movs	r2, #1
    507e:	8043      	strh	r3, [r0, #2]
    5080:	4b0b      	ldr	r3, [pc, #44]	; (50b0 <srand+0x50>)
    5082:	8083      	strh	r3, [r0, #4]
    5084:	4b0b      	ldr	r3, [pc, #44]	; (50b4 <srand+0x54>)
    5086:	80c3      	strh	r3, [r0, #6]
    5088:	4b0b      	ldr	r3, [pc, #44]	; (50b8 <srand+0x58>)
    508a:	8103      	strh	r3, [r0, #8]
    508c:	2305      	movs	r3, #5
    508e:	8143      	strh	r3, [r0, #10]
    5090:	3306      	adds	r3, #6
    5092:	8183      	strh	r3, [r0, #12]
    5094:	2300      	movs	r3, #0
    5096:	6102      	str	r2, [r0, #16]
    5098:	6143      	str	r3, [r0, #20]
    509a:	2200      	movs	r2, #0
    509c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    509e:	611d      	str	r5, [r3, #16]
    50a0:	615a      	str	r2, [r3, #20]
    50a2:	bd70      	pop	{r4, r5, r6, pc}
    50a4:	200001a8 	.word	0x200001a8
    50a8:	0000330e 	.word	0x0000330e
    50ac:	ffffabcd 	.word	0xffffabcd
    50b0:	00001234 	.word	0x00001234
    50b4:	ffffe66d 	.word	0xffffe66d
    50b8:	ffffdeec 	.word	0xffffdeec

000050bc <rand>:
    50bc:	4b15      	ldr	r3, [pc, #84]	; (5114 <rand+0x58>)
    50be:	b510      	push	{r4, lr}
    50c0:	681c      	ldr	r4, [r3, #0]
    50c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    50c4:	2b00      	cmp	r3, #0
    50c6:	d115      	bne.n	50f4 <rand+0x38>
    50c8:	2018      	movs	r0, #24
    50ca:	f7ff fed7 	bl	4e7c <malloc>
    50ce:	4b12      	ldr	r3, [pc, #72]	; (5118 <rand+0x5c>)
    50d0:	63a0      	str	r0, [r4, #56]	; 0x38
    50d2:	8003      	strh	r3, [r0, #0]
    50d4:	4b11      	ldr	r3, [pc, #68]	; (511c <rand+0x60>)
    50d6:	2201      	movs	r2, #1
    50d8:	8043      	strh	r3, [r0, #2]
    50da:	4b11      	ldr	r3, [pc, #68]	; (5120 <rand+0x64>)
    50dc:	8083      	strh	r3, [r0, #4]
    50de:	4b11      	ldr	r3, [pc, #68]	; (5124 <rand+0x68>)
    50e0:	80c3      	strh	r3, [r0, #6]
    50e2:	4b11      	ldr	r3, [pc, #68]	; (5128 <rand+0x6c>)
    50e4:	8103      	strh	r3, [r0, #8]
    50e6:	2305      	movs	r3, #5
    50e8:	8143      	strh	r3, [r0, #10]
    50ea:	3306      	adds	r3, #6
    50ec:	8183      	strh	r3, [r0, #12]
    50ee:	2300      	movs	r3, #0
    50f0:	6102      	str	r2, [r0, #16]
    50f2:	6143      	str	r3, [r0, #20]
    50f4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
    50f6:	4a0d      	ldr	r2, [pc, #52]	; (512c <rand+0x70>)
    50f8:	6920      	ldr	r0, [r4, #16]
    50fa:	6961      	ldr	r1, [r4, #20]
    50fc:	4b0c      	ldr	r3, [pc, #48]	; (5130 <rand+0x74>)
    50fe:	f7ff fe53 	bl	4da8 <__aeabi_lmul>
    5102:	2201      	movs	r2, #1
    5104:	2300      	movs	r3, #0
    5106:	1880      	adds	r0, r0, r2
    5108:	4159      	adcs	r1, r3
    510a:	6120      	str	r0, [r4, #16]
    510c:	6161      	str	r1, [r4, #20]
    510e:	0048      	lsls	r0, r1, #1
    5110:	0840      	lsrs	r0, r0, #1
    5112:	bd10      	pop	{r4, pc}
    5114:	200001a8 	.word	0x200001a8
    5118:	0000330e 	.word	0x0000330e
    511c:	ffffabcd 	.word	0xffffabcd
    5120:	00001234 	.word	0x00001234
    5124:	ffffe66d 	.word	0xffffe66d
    5128:	ffffdeec 	.word	0xffffdeec
    512c:	4c957f2d 	.word	0x4c957f2d
    5130:	5851f42d 	.word	0x5851f42d

00005134 <_sbrk_r>:
    5134:	2300      	movs	r3, #0
    5136:	b570      	push	{r4, r5, r6, lr}
    5138:	4c06      	ldr	r4, [pc, #24]	; (5154 <_sbrk_r+0x20>)
    513a:	0005      	movs	r5, r0
    513c:	0008      	movs	r0, r1
    513e:	6023      	str	r3, [r4, #0]
    5140:	f7fe fa72 	bl	3628 <_sbrk>
    5144:	1c43      	adds	r3, r0, #1
    5146:	d103      	bne.n	5150 <_sbrk_r+0x1c>
    5148:	6823      	ldr	r3, [r4, #0]
    514a:	2b00      	cmp	r3, #0
    514c:	d000      	beq.n	5150 <_sbrk_r+0x1c>
    514e:	602b      	str	r3, [r5, #0]
    5150:	bd70      	pop	{r4, r5, r6, pc}
    5152:	46c0      	nop			; (mov r8, r8)
    5154:	20003120 	.word	0x20003120

00005158 <setbuf>:
    5158:	424a      	negs	r2, r1
    515a:	414a      	adcs	r2, r1
    515c:	2380      	movs	r3, #128	; 0x80
    515e:	b510      	push	{r4, lr}
    5160:	0052      	lsls	r2, r2, #1
    5162:	00db      	lsls	r3, r3, #3
    5164:	f000 f802 	bl	516c <setvbuf>
    5168:	bd10      	pop	{r4, pc}
	...

0000516c <setvbuf>:
    516c:	b5f0      	push	{r4, r5, r6, r7, lr}
    516e:	001d      	movs	r5, r3
    5170:	4b4f      	ldr	r3, [pc, #316]	; (52b0 <setvbuf+0x144>)
    5172:	b085      	sub	sp, #20
    5174:	681e      	ldr	r6, [r3, #0]
    5176:	0004      	movs	r4, r0
    5178:	000f      	movs	r7, r1
    517a:	9200      	str	r2, [sp, #0]
    517c:	2e00      	cmp	r6, #0
    517e:	d005      	beq.n	518c <setvbuf+0x20>
    5180:	69b3      	ldr	r3, [r6, #24]
    5182:	2b00      	cmp	r3, #0
    5184:	d102      	bne.n	518c <setvbuf+0x20>
    5186:	0030      	movs	r0, r6
    5188:	f000 f9e2 	bl	5550 <__sinit>
    518c:	4b49      	ldr	r3, [pc, #292]	; (52b4 <setvbuf+0x148>)
    518e:	429c      	cmp	r4, r3
    5190:	d150      	bne.n	5234 <setvbuf+0xc8>
    5192:	6874      	ldr	r4, [r6, #4]
    5194:	9b00      	ldr	r3, [sp, #0]
    5196:	2b02      	cmp	r3, #2
    5198:	d005      	beq.n	51a6 <setvbuf+0x3a>
    519a:	2b01      	cmp	r3, #1
    519c:	d900      	bls.n	51a0 <setvbuf+0x34>
    519e:	e084      	b.n	52aa <setvbuf+0x13e>
    51a0:	2d00      	cmp	r5, #0
    51a2:	da00      	bge.n	51a6 <setvbuf+0x3a>
    51a4:	e081      	b.n	52aa <setvbuf+0x13e>
    51a6:	0021      	movs	r1, r4
    51a8:	0030      	movs	r0, r6
    51aa:	f000 f963 	bl	5474 <_fflush_r>
    51ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
    51b0:	2900      	cmp	r1, #0
    51b2:	d008      	beq.n	51c6 <setvbuf+0x5a>
    51b4:	0023      	movs	r3, r4
    51b6:	3344      	adds	r3, #68	; 0x44
    51b8:	4299      	cmp	r1, r3
    51ba:	d002      	beq.n	51c2 <setvbuf+0x56>
    51bc:	0030      	movs	r0, r6
    51be:	f7ff fe79 	bl	4eb4 <_free_r>
    51c2:	2300      	movs	r3, #0
    51c4:	6363      	str	r3, [r4, #52]	; 0x34
    51c6:	2300      	movs	r3, #0
    51c8:	61a3      	str	r3, [r4, #24]
    51ca:	6063      	str	r3, [r4, #4]
    51cc:	89a3      	ldrh	r3, [r4, #12]
    51ce:	061b      	lsls	r3, r3, #24
    51d0:	d503      	bpl.n	51da <setvbuf+0x6e>
    51d2:	6921      	ldr	r1, [r4, #16]
    51d4:	0030      	movs	r0, r6
    51d6:	f7ff fe6d 	bl	4eb4 <_free_r>
    51da:	89a3      	ldrh	r3, [r4, #12]
    51dc:	4a36      	ldr	r2, [pc, #216]	; (52b8 <setvbuf+0x14c>)
    51de:	4013      	ands	r3, r2
    51e0:	81a3      	strh	r3, [r4, #12]
    51e2:	9b00      	ldr	r3, [sp, #0]
    51e4:	2b02      	cmp	r3, #2
    51e6:	d05a      	beq.n	529e <setvbuf+0x132>
    51e8:	ab03      	add	r3, sp, #12
    51ea:	aa02      	add	r2, sp, #8
    51ec:	0021      	movs	r1, r4
    51ee:	0030      	movs	r0, r6
    51f0:	f000 fa44 	bl	567c <__swhatbuf_r>
    51f4:	89a3      	ldrh	r3, [r4, #12]
    51f6:	4318      	orrs	r0, r3
    51f8:	81a0      	strh	r0, [r4, #12]
    51fa:	2d00      	cmp	r5, #0
    51fc:	d124      	bne.n	5248 <setvbuf+0xdc>
    51fe:	9d02      	ldr	r5, [sp, #8]
    5200:	0028      	movs	r0, r5
    5202:	f7ff fe3b 	bl	4e7c <malloc>
    5206:	9501      	str	r5, [sp, #4]
    5208:	1e07      	subs	r7, r0, #0
    520a:	d142      	bne.n	5292 <setvbuf+0x126>
    520c:	9b02      	ldr	r3, [sp, #8]
    520e:	9301      	str	r3, [sp, #4]
    5210:	42ab      	cmp	r3, r5
    5212:	d139      	bne.n	5288 <setvbuf+0x11c>
    5214:	2001      	movs	r0, #1
    5216:	4240      	negs	r0, r0
    5218:	2302      	movs	r3, #2
    521a:	89a2      	ldrh	r2, [r4, #12]
    521c:	4313      	orrs	r3, r2
    521e:	81a3      	strh	r3, [r4, #12]
    5220:	2300      	movs	r3, #0
    5222:	60a3      	str	r3, [r4, #8]
    5224:	0023      	movs	r3, r4
    5226:	3347      	adds	r3, #71	; 0x47
    5228:	6023      	str	r3, [r4, #0]
    522a:	6123      	str	r3, [r4, #16]
    522c:	2301      	movs	r3, #1
    522e:	6163      	str	r3, [r4, #20]
    5230:	b005      	add	sp, #20
    5232:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5234:	4b21      	ldr	r3, [pc, #132]	; (52bc <setvbuf+0x150>)
    5236:	429c      	cmp	r4, r3
    5238:	d101      	bne.n	523e <setvbuf+0xd2>
    523a:	68b4      	ldr	r4, [r6, #8]
    523c:	e7aa      	b.n	5194 <setvbuf+0x28>
    523e:	4b20      	ldr	r3, [pc, #128]	; (52c0 <setvbuf+0x154>)
    5240:	429c      	cmp	r4, r3
    5242:	d1a7      	bne.n	5194 <setvbuf+0x28>
    5244:	68f4      	ldr	r4, [r6, #12]
    5246:	e7a5      	b.n	5194 <setvbuf+0x28>
    5248:	2f00      	cmp	r7, #0
    524a:	d0d9      	beq.n	5200 <setvbuf+0x94>
    524c:	69b3      	ldr	r3, [r6, #24]
    524e:	2b00      	cmp	r3, #0
    5250:	d102      	bne.n	5258 <setvbuf+0xec>
    5252:	0030      	movs	r0, r6
    5254:	f000 f97c 	bl	5550 <__sinit>
    5258:	9b00      	ldr	r3, [sp, #0]
    525a:	2b01      	cmp	r3, #1
    525c:	d103      	bne.n	5266 <setvbuf+0xfa>
    525e:	89a3      	ldrh	r3, [r4, #12]
    5260:	9a00      	ldr	r2, [sp, #0]
    5262:	431a      	orrs	r2, r3
    5264:	81a2      	strh	r2, [r4, #12]
    5266:	2008      	movs	r0, #8
    5268:	89a3      	ldrh	r3, [r4, #12]
    526a:	6027      	str	r7, [r4, #0]
    526c:	6127      	str	r7, [r4, #16]
    526e:	6165      	str	r5, [r4, #20]
    5270:	4018      	ands	r0, r3
    5272:	d018      	beq.n	52a6 <setvbuf+0x13a>
    5274:	2001      	movs	r0, #1
    5276:	4018      	ands	r0, r3
    5278:	2300      	movs	r3, #0
    527a:	4298      	cmp	r0, r3
    527c:	d011      	beq.n	52a2 <setvbuf+0x136>
    527e:	426d      	negs	r5, r5
    5280:	60a3      	str	r3, [r4, #8]
    5282:	61a5      	str	r5, [r4, #24]
    5284:	0018      	movs	r0, r3
    5286:	e7d3      	b.n	5230 <setvbuf+0xc4>
    5288:	9801      	ldr	r0, [sp, #4]
    528a:	f7ff fdf7 	bl	4e7c <malloc>
    528e:	1e07      	subs	r7, r0, #0
    5290:	d0c0      	beq.n	5214 <setvbuf+0xa8>
    5292:	2380      	movs	r3, #128	; 0x80
    5294:	89a2      	ldrh	r2, [r4, #12]
    5296:	9d01      	ldr	r5, [sp, #4]
    5298:	4313      	orrs	r3, r2
    529a:	81a3      	strh	r3, [r4, #12]
    529c:	e7d6      	b.n	524c <setvbuf+0xe0>
    529e:	2000      	movs	r0, #0
    52a0:	e7ba      	b.n	5218 <setvbuf+0xac>
    52a2:	60a5      	str	r5, [r4, #8]
    52a4:	e7c4      	b.n	5230 <setvbuf+0xc4>
    52a6:	60a0      	str	r0, [r4, #8]
    52a8:	e7c2      	b.n	5230 <setvbuf+0xc4>
    52aa:	2001      	movs	r0, #1
    52ac:	4240      	negs	r0, r0
    52ae:	e7bf      	b.n	5230 <setvbuf+0xc4>
    52b0:	200001a8 	.word	0x200001a8
    52b4:	00008750 	.word	0x00008750
    52b8:	fffff35c 	.word	0xfffff35c
    52bc:	00008770 	.word	0x00008770
    52c0:	00008730 	.word	0x00008730

000052c4 <strcat>:
    52c4:	0002      	movs	r2, r0
    52c6:	b510      	push	{r4, lr}
    52c8:	7813      	ldrb	r3, [r2, #0]
    52ca:	2b00      	cmp	r3, #0
    52cc:	d105      	bne.n	52da <strcat+0x16>
    52ce:	5ccc      	ldrb	r4, [r1, r3]
    52d0:	54d4      	strb	r4, [r2, r3]
    52d2:	3301      	adds	r3, #1
    52d4:	2c00      	cmp	r4, #0
    52d6:	d1fa      	bne.n	52ce <strcat+0xa>
    52d8:	bd10      	pop	{r4, pc}
    52da:	3201      	adds	r2, #1
    52dc:	e7f4      	b.n	52c8 <strcat+0x4>

000052de <strlen>:
    52de:	2300      	movs	r3, #0
    52e0:	5cc2      	ldrb	r2, [r0, r3]
    52e2:	3301      	adds	r3, #1
    52e4:	2a00      	cmp	r2, #0
    52e6:	d1fb      	bne.n	52e0 <strlen+0x2>
    52e8:	1e58      	subs	r0, r3, #1
    52ea:	4770      	bx	lr

000052ec <__utoa>:
    52ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    52ee:	0017      	movs	r7, r2
    52f0:	b08f      	sub	sp, #60	; 0x3c
    52f2:	2225      	movs	r2, #37	; 0x25
    52f4:	0006      	movs	r6, r0
    52f6:	000d      	movs	r5, r1
    52f8:	a804      	add	r0, sp, #16
    52fa:	4918      	ldr	r1, [pc, #96]	; (535c <__utoa+0x70>)
    52fc:	f7ff fdc8 	bl	4e90 <memcpy>
    5300:	aa04      	add	r2, sp, #16
    5302:	1ebb      	subs	r3, r7, #2
    5304:	2400      	movs	r4, #0
    5306:	9203      	str	r2, [sp, #12]
    5308:	2b22      	cmp	r3, #34	; 0x22
    530a:	d905      	bls.n	5318 <__utoa+0x2c>
    530c:	702c      	strb	r4, [r5, #0]
    530e:	0025      	movs	r5, r4
    5310:	0028      	movs	r0, r5
    5312:	b00f      	add	sp, #60	; 0x3c
    5314:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5316:	9c01      	ldr	r4, [sp, #4]
    5318:	1c63      	adds	r3, r4, #1
    531a:	9301      	str	r3, [sp, #4]
    531c:	18eb      	adds	r3, r5, r3
    531e:	9300      	str	r3, [sp, #0]
    5320:	0030      	movs	r0, r6
    5322:	3b01      	subs	r3, #1
    5324:	0039      	movs	r1, r7
    5326:	9302      	str	r3, [sp, #8]
    5328:	f7ff fc4e 	bl	4bc8 <__aeabi_uidivmod>
    532c:	9b03      	ldr	r3, [sp, #12]
    532e:	9a02      	ldr	r2, [sp, #8]
    5330:	5c5b      	ldrb	r3, [r3, r1]
    5332:	0030      	movs	r0, r6
    5334:	7013      	strb	r3, [r2, #0]
    5336:	0039      	movs	r1, r7
    5338:	f7ff fbc0 	bl	4abc <__udivsi3>
    533c:	1e06      	subs	r6, r0, #0
    533e:	d1ea      	bne.n	5316 <__utoa+0x2a>
    5340:	9b00      	ldr	r3, [sp, #0]
    5342:	7018      	strb	r0, [r3, #0]
    5344:	002b      	movs	r3, r5
    5346:	1b5a      	subs	r2, r3, r5
    5348:	4294      	cmp	r4, r2
    534a:	dde1      	ble.n	5310 <__utoa+0x24>
    534c:	781a      	ldrb	r2, [r3, #0]
    534e:	5d29      	ldrb	r1, [r5, r4]
    5350:	7019      	strb	r1, [r3, #0]
    5352:	552a      	strb	r2, [r5, r4]
    5354:	3301      	adds	r3, #1
    5356:	3c01      	subs	r4, #1
    5358:	e7f5      	b.n	5346 <__utoa+0x5a>
    535a:	46c0      	nop			; (mov r8, r8)
    535c:	00008708 	.word	0x00008708

00005360 <__sflush_r>:
    5360:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5362:	898a      	ldrh	r2, [r1, #12]
    5364:	0005      	movs	r5, r0
    5366:	000c      	movs	r4, r1
    5368:	0713      	lsls	r3, r2, #28
    536a:	d460      	bmi.n	542e <__sflush_r+0xce>
    536c:	684b      	ldr	r3, [r1, #4]
    536e:	2b00      	cmp	r3, #0
    5370:	dc04      	bgt.n	537c <__sflush_r+0x1c>
    5372:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    5374:	2b00      	cmp	r3, #0
    5376:	dc01      	bgt.n	537c <__sflush_r+0x1c>
    5378:	2000      	movs	r0, #0
    537a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    537c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    537e:	2f00      	cmp	r7, #0
    5380:	d0fa      	beq.n	5378 <__sflush_r+0x18>
    5382:	2300      	movs	r3, #0
    5384:	682e      	ldr	r6, [r5, #0]
    5386:	602b      	str	r3, [r5, #0]
    5388:	2380      	movs	r3, #128	; 0x80
    538a:	015b      	lsls	r3, r3, #5
    538c:	401a      	ands	r2, r3
    538e:	d034      	beq.n	53fa <__sflush_r+0x9a>
    5390:	6d60      	ldr	r0, [r4, #84]	; 0x54
    5392:	89a3      	ldrh	r3, [r4, #12]
    5394:	075b      	lsls	r3, r3, #29
    5396:	d506      	bpl.n	53a6 <__sflush_r+0x46>
    5398:	6863      	ldr	r3, [r4, #4]
    539a:	1ac0      	subs	r0, r0, r3
    539c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    539e:	2b00      	cmp	r3, #0
    53a0:	d001      	beq.n	53a6 <__sflush_r+0x46>
    53a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
    53a4:	1ac0      	subs	r0, r0, r3
    53a6:	0002      	movs	r2, r0
    53a8:	6a21      	ldr	r1, [r4, #32]
    53aa:	2300      	movs	r3, #0
    53ac:	0028      	movs	r0, r5
    53ae:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    53b0:	47b8      	blx	r7
    53b2:	89a1      	ldrh	r1, [r4, #12]
    53b4:	1c43      	adds	r3, r0, #1
    53b6:	d106      	bne.n	53c6 <__sflush_r+0x66>
    53b8:	682b      	ldr	r3, [r5, #0]
    53ba:	2b1d      	cmp	r3, #29
    53bc:	d831      	bhi.n	5422 <__sflush_r+0xc2>
    53be:	4a2c      	ldr	r2, [pc, #176]	; (5470 <__sflush_r+0x110>)
    53c0:	40da      	lsrs	r2, r3
    53c2:	07d3      	lsls	r3, r2, #31
    53c4:	d52d      	bpl.n	5422 <__sflush_r+0xc2>
    53c6:	2300      	movs	r3, #0
    53c8:	6063      	str	r3, [r4, #4]
    53ca:	6923      	ldr	r3, [r4, #16]
    53cc:	6023      	str	r3, [r4, #0]
    53ce:	04cb      	lsls	r3, r1, #19
    53d0:	d505      	bpl.n	53de <__sflush_r+0x7e>
    53d2:	1c43      	adds	r3, r0, #1
    53d4:	d102      	bne.n	53dc <__sflush_r+0x7c>
    53d6:	682b      	ldr	r3, [r5, #0]
    53d8:	2b00      	cmp	r3, #0
    53da:	d100      	bne.n	53de <__sflush_r+0x7e>
    53dc:	6560      	str	r0, [r4, #84]	; 0x54
    53de:	6b61      	ldr	r1, [r4, #52]	; 0x34
    53e0:	602e      	str	r6, [r5, #0]
    53e2:	2900      	cmp	r1, #0
    53e4:	d0c8      	beq.n	5378 <__sflush_r+0x18>
    53e6:	0023      	movs	r3, r4
    53e8:	3344      	adds	r3, #68	; 0x44
    53ea:	4299      	cmp	r1, r3
    53ec:	d002      	beq.n	53f4 <__sflush_r+0x94>
    53ee:	0028      	movs	r0, r5
    53f0:	f7ff fd60 	bl	4eb4 <_free_r>
    53f4:	2000      	movs	r0, #0
    53f6:	6360      	str	r0, [r4, #52]	; 0x34
    53f8:	e7bf      	b.n	537a <__sflush_r+0x1a>
    53fa:	2301      	movs	r3, #1
    53fc:	6a21      	ldr	r1, [r4, #32]
    53fe:	0028      	movs	r0, r5
    5400:	47b8      	blx	r7
    5402:	1c43      	adds	r3, r0, #1
    5404:	d1c5      	bne.n	5392 <__sflush_r+0x32>
    5406:	682b      	ldr	r3, [r5, #0]
    5408:	2b00      	cmp	r3, #0
    540a:	d0c2      	beq.n	5392 <__sflush_r+0x32>
    540c:	2b1d      	cmp	r3, #29
    540e:	d001      	beq.n	5414 <__sflush_r+0xb4>
    5410:	2b16      	cmp	r3, #22
    5412:	d101      	bne.n	5418 <__sflush_r+0xb8>
    5414:	602e      	str	r6, [r5, #0]
    5416:	e7af      	b.n	5378 <__sflush_r+0x18>
    5418:	2340      	movs	r3, #64	; 0x40
    541a:	89a2      	ldrh	r2, [r4, #12]
    541c:	4313      	orrs	r3, r2
    541e:	81a3      	strh	r3, [r4, #12]
    5420:	e7ab      	b.n	537a <__sflush_r+0x1a>
    5422:	2340      	movs	r3, #64	; 0x40
    5424:	430b      	orrs	r3, r1
    5426:	2001      	movs	r0, #1
    5428:	81a3      	strh	r3, [r4, #12]
    542a:	4240      	negs	r0, r0
    542c:	e7a5      	b.n	537a <__sflush_r+0x1a>
    542e:	690f      	ldr	r7, [r1, #16]
    5430:	2f00      	cmp	r7, #0
    5432:	d0a1      	beq.n	5378 <__sflush_r+0x18>
    5434:	680b      	ldr	r3, [r1, #0]
    5436:	600f      	str	r7, [r1, #0]
    5438:	1bdb      	subs	r3, r3, r7
    543a:	9301      	str	r3, [sp, #4]
    543c:	2300      	movs	r3, #0
    543e:	0792      	lsls	r2, r2, #30
    5440:	d100      	bne.n	5444 <__sflush_r+0xe4>
    5442:	694b      	ldr	r3, [r1, #20]
    5444:	60a3      	str	r3, [r4, #8]
    5446:	9b01      	ldr	r3, [sp, #4]
    5448:	2b00      	cmp	r3, #0
    544a:	dc00      	bgt.n	544e <__sflush_r+0xee>
    544c:	e794      	b.n	5378 <__sflush_r+0x18>
    544e:	9b01      	ldr	r3, [sp, #4]
    5450:	003a      	movs	r2, r7
    5452:	6a21      	ldr	r1, [r4, #32]
    5454:	0028      	movs	r0, r5
    5456:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    5458:	47b0      	blx	r6
    545a:	2800      	cmp	r0, #0
    545c:	dc03      	bgt.n	5466 <__sflush_r+0x106>
    545e:	2340      	movs	r3, #64	; 0x40
    5460:	89a2      	ldrh	r2, [r4, #12]
    5462:	4313      	orrs	r3, r2
    5464:	e7df      	b.n	5426 <__sflush_r+0xc6>
    5466:	9b01      	ldr	r3, [sp, #4]
    5468:	183f      	adds	r7, r7, r0
    546a:	1a1b      	subs	r3, r3, r0
    546c:	9301      	str	r3, [sp, #4]
    546e:	e7ea      	b.n	5446 <__sflush_r+0xe6>
    5470:	20400001 	.word	0x20400001

00005474 <_fflush_r>:
    5474:	690b      	ldr	r3, [r1, #16]
    5476:	b570      	push	{r4, r5, r6, lr}
    5478:	0005      	movs	r5, r0
    547a:	000c      	movs	r4, r1
    547c:	2b00      	cmp	r3, #0
    547e:	d101      	bne.n	5484 <_fflush_r+0x10>
    5480:	2000      	movs	r0, #0
    5482:	bd70      	pop	{r4, r5, r6, pc}
    5484:	2800      	cmp	r0, #0
    5486:	d004      	beq.n	5492 <_fflush_r+0x1e>
    5488:	6983      	ldr	r3, [r0, #24]
    548a:	2b00      	cmp	r3, #0
    548c:	d101      	bne.n	5492 <_fflush_r+0x1e>
    548e:	f000 f85f 	bl	5550 <__sinit>
    5492:	4b0b      	ldr	r3, [pc, #44]	; (54c0 <_fflush_r+0x4c>)
    5494:	429c      	cmp	r4, r3
    5496:	d109      	bne.n	54ac <_fflush_r+0x38>
    5498:	686c      	ldr	r4, [r5, #4]
    549a:	220c      	movs	r2, #12
    549c:	5ea3      	ldrsh	r3, [r4, r2]
    549e:	2b00      	cmp	r3, #0
    54a0:	d0ee      	beq.n	5480 <_fflush_r+0xc>
    54a2:	0021      	movs	r1, r4
    54a4:	0028      	movs	r0, r5
    54a6:	f7ff ff5b 	bl	5360 <__sflush_r>
    54aa:	e7ea      	b.n	5482 <_fflush_r+0xe>
    54ac:	4b05      	ldr	r3, [pc, #20]	; (54c4 <_fflush_r+0x50>)
    54ae:	429c      	cmp	r4, r3
    54b0:	d101      	bne.n	54b6 <_fflush_r+0x42>
    54b2:	68ac      	ldr	r4, [r5, #8]
    54b4:	e7f1      	b.n	549a <_fflush_r+0x26>
    54b6:	4b04      	ldr	r3, [pc, #16]	; (54c8 <_fflush_r+0x54>)
    54b8:	429c      	cmp	r4, r3
    54ba:	d1ee      	bne.n	549a <_fflush_r+0x26>
    54bc:	68ec      	ldr	r4, [r5, #12]
    54be:	e7ec      	b.n	549a <_fflush_r+0x26>
    54c0:	00008750 	.word	0x00008750
    54c4:	00008770 	.word	0x00008770
    54c8:	00008730 	.word	0x00008730

000054cc <_cleanup_r>:
    54cc:	b510      	push	{r4, lr}
    54ce:	4902      	ldr	r1, [pc, #8]	; (54d8 <_cleanup_r+0xc>)
    54d0:	f000 f8b2 	bl	5638 <_fwalk_reent>
    54d4:	bd10      	pop	{r4, pc}
    54d6:	46c0      	nop			; (mov r8, r8)
    54d8:	00005475 	.word	0x00005475

000054dc <std.isra.0>:
    54dc:	2300      	movs	r3, #0
    54de:	b510      	push	{r4, lr}
    54e0:	0004      	movs	r4, r0
    54e2:	6003      	str	r3, [r0, #0]
    54e4:	6043      	str	r3, [r0, #4]
    54e6:	6083      	str	r3, [r0, #8]
    54e8:	8181      	strh	r1, [r0, #12]
    54ea:	6643      	str	r3, [r0, #100]	; 0x64
    54ec:	81c2      	strh	r2, [r0, #14]
    54ee:	6103      	str	r3, [r0, #16]
    54f0:	6143      	str	r3, [r0, #20]
    54f2:	6183      	str	r3, [r0, #24]
    54f4:	0019      	movs	r1, r3
    54f6:	2208      	movs	r2, #8
    54f8:	305c      	adds	r0, #92	; 0x5c
    54fa:	f7ff fcd2 	bl	4ea2 <memset>
    54fe:	4b05      	ldr	r3, [pc, #20]	; (5514 <std.isra.0+0x38>)
    5500:	6224      	str	r4, [r4, #32]
    5502:	6263      	str	r3, [r4, #36]	; 0x24
    5504:	4b04      	ldr	r3, [pc, #16]	; (5518 <std.isra.0+0x3c>)
    5506:	62a3      	str	r3, [r4, #40]	; 0x28
    5508:	4b04      	ldr	r3, [pc, #16]	; (551c <std.isra.0+0x40>)
    550a:	62e3      	str	r3, [r4, #44]	; 0x2c
    550c:	4b04      	ldr	r3, [pc, #16]	; (5520 <std.isra.0+0x44>)
    550e:	6323      	str	r3, [r4, #48]	; 0x30
    5510:	bd10      	pop	{r4, pc}
    5512:	46c0      	nop			; (mov r8, r8)
    5514:	00005d5d 	.word	0x00005d5d
    5518:	00005d85 	.word	0x00005d85
    551c:	00005dbd 	.word	0x00005dbd
    5520:	00005de9 	.word	0x00005de9

00005524 <__sfmoreglue>:
    5524:	b570      	push	{r4, r5, r6, lr}
    5526:	2568      	movs	r5, #104	; 0x68
    5528:	1e4a      	subs	r2, r1, #1
    552a:	4355      	muls	r5, r2
    552c:	000e      	movs	r6, r1
    552e:	0029      	movs	r1, r5
    5530:	3174      	adds	r1, #116	; 0x74
    5532:	f7ff fd09 	bl	4f48 <_malloc_r>
    5536:	1e04      	subs	r4, r0, #0
    5538:	d008      	beq.n	554c <__sfmoreglue+0x28>
    553a:	2100      	movs	r1, #0
    553c:	002a      	movs	r2, r5
    553e:	6001      	str	r1, [r0, #0]
    5540:	6046      	str	r6, [r0, #4]
    5542:	300c      	adds	r0, #12
    5544:	60a0      	str	r0, [r4, #8]
    5546:	3268      	adds	r2, #104	; 0x68
    5548:	f7ff fcab 	bl	4ea2 <memset>
    554c:	0020      	movs	r0, r4
    554e:	bd70      	pop	{r4, r5, r6, pc}

00005550 <__sinit>:
    5550:	6983      	ldr	r3, [r0, #24]
    5552:	b513      	push	{r0, r1, r4, lr}
    5554:	0004      	movs	r4, r0
    5556:	2b00      	cmp	r3, #0
    5558:	d128      	bne.n	55ac <__sinit+0x5c>
    555a:	6483      	str	r3, [r0, #72]	; 0x48
    555c:	64c3      	str	r3, [r0, #76]	; 0x4c
    555e:	6503      	str	r3, [r0, #80]	; 0x50
    5560:	4b13      	ldr	r3, [pc, #76]	; (55b0 <__sinit+0x60>)
    5562:	4a14      	ldr	r2, [pc, #80]	; (55b4 <__sinit+0x64>)
    5564:	681b      	ldr	r3, [r3, #0]
    5566:	6282      	str	r2, [r0, #40]	; 0x28
    5568:	9301      	str	r3, [sp, #4]
    556a:	4298      	cmp	r0, r3
    556c:	d101      	bne.n	5572 <__sinit+0x22>
    556e:	2301      	movs	r3, #1
    5570:	6183      	str	r3, [r0, #24]
    5572:	0020      	movs	r0, r4
    5574:	f000 f820 	bl	55b8 <__sfp>
    5578:	6060      	str	r0, [r4, #4]
    557a:	0020      	movs	r0, r4
    557c:	f000 f81c 	bl	55b8 <__sfp>
    5580:	60a0      	str	r0, [r4, #8]
    5582:	0020      	movs	r0, r4
    5584:	f000 f818 	bl	55b8 <__sfp>
    5588:	2200      	movs	r2, #0
    558a:	60e0      	str	r0, [r4, #12]
    558c:	2104      	movs	r1, #4
    558e:	6860      	ldr	r0, [r4, #4]
    5590:	f7ff ffa4 	bl	54dc <std.isra.0>
    5594:	2201      	movs	r2, #1
    5596:	2109      	movs	r1, #9
    5598:	68a0      	ldr	r0, [r4, #8]
    559a:	f7ff ff9f 	bl	54dc <std.isra.0>
    559e:	2202      	movs	r2, #2
    55a0:	2112      	movs	r1, #18
    55a2:	68e0      	ldr	r0, [r4, #12]
    55a4:	f7ff ff9a 	bl	54dc <std.isra.0>
    55a8:	2301      	movs	r3, #1
    55aa:	61a3      	str	r3, [r4, #24]
    55ac:	bd13      	pop	{r0, r1, r4, pc}
    55ae:	46c0      	nop			; (mov r8, r8)
    55b0:	00008704 	.word	0x00008704
    55b4:	000054cd 	.word	0x000054cd

000055b8 <__sfp>:
    55b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    55ba:	4b1e      	ldr	r3, [pc, #120]	; (5634 <__sfp+0x7c>)
    55bc:	0007      	movs	r7, r0
    55be:	681e      	ldr	r6, [r3, #0]
    55c0:	69b3      	ldr	r3, [r6, #24]
    55c2:	2b00      	cmp	r3, #0
    55c4:	d102      	bne.n	55cc <__sfp+0x14>
    55c6:	0030      	movs	r0, r6
    55c8:	f7ff ffc2 	bl	5550 <__sinit>
    55cc:	3648      	adds	r6, #72	; 0x48
    55ce:	68b4      	ldr	r4, [r6, #8]
    55d0:	6873      	ldr	r3, [r6, #4]
    55d2:	3b01      	subs	r3, #1
    55d4:	d504      	bpl.n	55e0 <__sfp+0x28>
    55d6:	6833      	ldr	r3, [r6, #0]
    55d8:	2b00      	cmp	r3, #0
    55da:	d007      	beq.n	55ec <__sfp+0x34>
    55dc:	6836      	ldr	r6, [r6, #0]
    55de:	e7f6      	b.n	55ce <__sfp+0x16>
    55e0:	220c      	movs	r2, #12
    55e2:	5ea5      	ldrsh	r5, [r4, r2]
    55e4:	2d00      	cmp	r5, #0
    55e6:	d00d      	beq.n	5604 <__sfp+0x4c>
    55e8:	3468      	adds	r4, #104	; 0x68
    55ea:	e7f2      	b.n	55d2 <__sfp+0x1a>
    55ec:	2104      	movs	r1, #4
    55ee:	0038      	movs	r0, r7
    55f0:	f7ff ff98 	bl	5524 <__sfmoreglue>
    55f4:	6030      	str	r0, [r6, #0]
    55f6:	2800      	cmp	r0, #0
    55f8:	d1f0      	bne.n	55dc <__sfp+0x24>
    55fa:	230c      	movs	r3, #12
    55fc:	0004      	movs	r4, r0
    55fe:	603b      	str	r3, [r7, #0]
    5600:	0020      	movs	r0, r4
    5602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5604:	2301      	movs	r3, #1
    5606:	0020      	movs	r0, r4
    5608:	425b      	negs	r3, r3
    560a:	81e3      	strh	r3, [r4, #14]
    560c:	3302      	adds	r3, #2
    560e:	81a3      	strh	r3, [r4, #12]
    5610:	6665      	str	r5, [r4, #100]	; 0x64
    5612:	6025      	str	r5, [r4, #0]
    5614:	60a5      	str	r5, [r4, #8]
    5616:	6065      	str	r5, [r4, #4]
    5618:	6125      	str	r5, [r4, #16]
    561a:	6165      	str	r5, [r4, #20]
    561c:	61a5      	str	r5, [r4, #24]
    561e:	2208      	movs	r2, #8
    5620:	0029      	movs	r1, r5
    5622:	305c      	adds	r0, #92	; 0x5c
    5624:	f7ff fc3d 	bl	4ea2 <memset>
    5628:	6365      	str	r5, [r4, #52]	; 0x34
    562a:	63a5      	str	r5, [r4, #56]	; 0x38
    562c:	64a5      	str	r5, [r4, #72]	; 0x48
    562e:	64e5      	str	r5, [r4, #76]	; 0x4c
    5630:	e7e6      	b.n	5600 <__sfp+0x48>
    5632:	46c0      	nop			; (mov r8, r8)
    5634:	00008704 	.word	0x00008704

00005638 <_fwalk_reent>:
    5638:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    563a:	0004      	movs	r4, r0
    563c:	0007      	movs	r7, r0
    563e:	2600      	movs	r6, #0
    5640:	9101      	str	r1, [sp, #4]
    5642:	3448      	adds	r4, #72	; 0x48
    5644:	2c00      	cmp	r4, #0
    5646:	d101      	bne.n	564c <_fwalk_reent+0x14>
    5648:	0030      	movs	r0, r6
    564a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    564c:	6863      	ldr	r3, [r4, #4]
    564e:	68a5      	ldr	r5, [r4, #8]
    5650:	9300      	str	r3, [sp, #0]
    5652:	9b00      	ldr	r3, [sp, #0]
    5654:	3b01      	subs	r3, #1
    5656:	9300      	str	r3, [sp, #0]
    5658:	d501      	bpl.n	565e <_fwalk_reent+0x26>
    565a:	6824      	ldr	r4, [r4, #0]
    565c:	e7f2      	b.n	5644 <_fwalk_reent+0xc>
    565e:	89ab      	ldrh	r3, [r5, #12]
    5660:	2b01      	cmp	r3, #1
    5662:	d908      	bls.n	5676 <_fwalk_reent+0x3e>
    5664:	220e      	movs	r2, #14
    5666:	5eab      	ldrsh	r3, [r5, r2]
    5668:	3301      	adds	r3, #1
    566a:	d004      	beq.n	5676 <_fwalk_reent+0x3e>
    566c:	0029      	movs	r1, r5
    566e:	0038      	movs	r0, r7
    5670:	9b01      	ldr	r3, [sp, #4]
    5672:	4798      	blx	r3
    5674:	4306      	orrs	r6, r0
    5676:	3568      	adds	r5, #104	; 0x68
    5678:	e7eb      	b.n	5652 <_fwalk_reent+0x1a>
	...

0000567c <__swhatbuf_r>:
    567c:	b570      	push	{r4, r5, r6, lr}
    567e:	000e      	movs	r6, r1
    5680:	001d      	movs	r5, r3
    5682:	230e      	movs	r3, #14
    5684:	5ec9      	ldrsh	r1, [r1, r3]
    5686:	b090      	sub	sp, #64	; 0x40
    5688:	0014      	movs	r4, r2
    568a:	2900      	cmp	r1, #0
    568c:	da07      	bge.n	569e <__swhatbuf_r+0x22>
    568e:	2300      	movs	r3, #0
    5690:	602b      	str	r3, [r5, #0]
    5692:	89b3      	ldrh	r3, [r6, #12]
    5694:	061b      	lsls	r3, r3, #24
    5696:	d411      	bmi.n	56bc <__swhatbuf_r+0x40>
    5698:	2380      	movs	r3, #128	; 0x80
    569a:	00db      	lsls	r3, r3, #3
    569c:	e00f      	b.n	56be <__swhatbuf_r+0x42>
    569e:	aa01      	add	r2, sp, #4
    56a0:	f000 fc9a 	bl	5fd8 <_fstat_r>
    56a4:	2800      	cmp	r0, #0
    56a6:	dbf2      	blt.n	568e <__swhatbuf_r+0x12>
    56a8:	22f0      	movs	r2, #240	; 0xf0
    56aa:	9b02      	ldr	r3, [sp, #8]
    56ac:	0212      	lsls	r2, r2, #8
    56ae:	4013      	ands	r3, r2
    56b0:	4a05      	ldr	r2, [pc, #20]	; (56c8 <__swhatbuf_r+0x4c>)
    56b2:	189b      	adds	r3, r3, r2
    56b4:	425a      	negs	r2, r3
    56b6:	4153      	adcs	r3, r2
    56b8:	602b      	str	r3, [r5, #0]
    56ba:	e7ed      	b.n	5698 <__swhatbuf_r+0x1c>
    56bc:	2340      	movs	r3, #64	; 0x40
    56be:	2000      	movs	r0, #0
    56c0:	6023      	str	r3, [r4, #0]
    56c2:	b010      	add	sp, #64	; 0x40
    56c4:	bd70      	pop	{r4, r5, r6, pc}
    56c6:	46c0      	nop			; (mov r8, r8)
    56c8:	ffffe000 	.word	0xffffe000

000056cc <__smakebuf_r>:
    56cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    56ce:	2602      	movs	r6, #2
    56d0:	898b      	ldrh	r3, [r1, #12]
    56d2:	0005      	movs	r5, r0
    56d4:	000c      	movs	r4, r1
    56d6:	4233      	tst	r3, r6
    56d8:	d006      	beq.n	56e8 <__smakebuf_r+0x1c>
    56da:	0023      	movs	r3, r4
    56dc:	3347      	adds	r3, #71	; 0x47
    56de:	6023      	str	r3, [r4, #0]
    56e0:	6123      	str	r3, [r4, #16]
    56e2:	2301      	movs	r3, #1
    56e4:	6163      	str	r3, [r4, #20]
    56e6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    56e8:	ab01      	add	r3, sp, #4
    56ea:	466a      	mov	r2, sp
    56ec:	f7ff ffc6 	bl	567c <__swhatbuf_r>
    56f0:	9900      	ldr	r1, [sp, #0]
    56f2:	0007      	movs	r7, r0
    56f4:	0028      	movs	r0, r5
    56f6:	f7ff fc27 	bl	4f48 <_malloc_r>
    56fa:	2800      	cmp	r0, #0
    56fc:	d108      	bne.n	5710 <__smakebuf_r+0x44>
    56fe:	220c      	movs	r2, #12
    5700:	5ea3      	ldrsh	r3, [r4, r2]
    5702:	059a      	lsls	r2, r3, #22
    5704:	d4ef      	bmi.n	56e6 <__smakebuf_r+0x1a>
    5706:	2203      	movs	r2, #3
    5708:	4393      	bics	r3, r2
    570a:	431e      	orrs	r6, r3
    570c:	81a6      	strh	r6, [r4, #12]
    570e:	e7e4      	b.n	56da <__smakebuf_r+0xe>
    5710:	4b0f      	ldr	r3, [pc, #60]	; (5750 <__smakebuf_r+0x84>)
    5712:	62ab      	str	r3, [r5, #40]	; 0x28
    5714:	2380      	movs	r3, #128	; 0x80
    5716:	89a2      	ldrh	r2, [r4, #12]
    5718:	6020      	str	r0, [r4, #0]
    571a:	4313      	orrs	r3, r2
    571c:	81a3      	strh	r3, [r4, #12]
    571e:	9b00      	ldr	r3, [sp, #0]
    5720:	6120      	str	r0, [r4, #16]
    5722:	6163      	str	r3, [r4, #20]
    5724:	9b01      	ldr	r3, [sp, #4]
    5726:	2b00      	cmp	r3, #0
    5728:	d00d      	beq.n	5746 <__smakebuf_r+0x7a>
    572a:	230e      	movs	r3, #14
    572c:	5ee1      	ldrsh	r1, [r4, r3]
    572e:	0028      	movs	r0, r5
    5730:	f000 fc64 	bl	5ffc <_isatty_r>
    5734:	2800      	cmp	r0, #0
    5736:	d006      	beq.n	5746 <__smakebuf_r+0x7a>
    5738:	2203      	movs	r2, #3
    573a:	89a3      	ldrh	r3, [r4, #12]
    573c:	4393      	bics	r3, r2
    573e:	001a      	movs	r2, r3
    5740:	2301      	movs	r3, #1
    5742:	4313      	orrs	r3, r2
    5744:	81a3      	strh	r3, [r4, #12]
    5746:	89a0      	ldrh	r0, [r4, #12]
    5748:	4338      	orrs	r0, r7
    574a:	81a0      	strh	r0, [r4, #12]
    574c:	e7cb      	b.n	56e6 <__smakebuf_r+0x1a>
    574e:	46c0      	nop			; (mov r8, r8)
    5750:	000054cd 	.word	0x000054cd

00005754 <__malloc_lock>:
    5754:	4770      	bx	lr

00005756 <__malloc_unlock>:
    5756:	4770      	bx	lr

00005758 <__sfputc_r>:
    5758:	6893      	ldr	r3, [r2, #8]
    575a:	b510      	push	{r4, lr}
    575c:	3b01      	subs	r3, #1
    575e:	6093      	str	r3, [r2, #8]
    5760:	2b00      	cmp	r3, #0
    5762:	da05      	bge.n	5770 <__sfputc_r+0x18>
    5764:	6994      	ldr	r4, [r2, #24]
    5766:	42a3      	cmp	r3, r4
    5768:	db08      	blt.n	577c <__sfputc_r+0x24>
    576a:	b2cb      	uxtb	r3, r1
    576c:	2b0a      	cmp	r3, #10
    576e:	d005      	beq.n	577c <__sfputc_r+0x24>
    5770:	6813      	ldr	r3, [r2, #0]
    5772:	1c58      	adds	r0, r3, #1
    5774:	6010      	str	r0, [r2, #0]
    5776:	7019      	strb	r1, [r3, #0]
    5778:	b2c8      	uxtb	r0, r1
    577a:	bd10      	pop	{r4, pc}
    577c:	f000 fb3a 	bl	5df4 <__swbuf_r>
    5780:	e7fb      	b.n	577a <__sfputc_r+0x22>

00005782 <__sfputs_r>:
    5782:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5784:	0006      	movs	r6, r0
    5786:	000f      	movs	r7, r1
    5788:	0014      	movs	r4, r2
    578a:	18d5      	adds	r5, r2, r3
    578c:	42ac      	cmp	r4, r5
    578e:	d101      	bne.n	5794 <__sfputs_r+0x12>
    5790:	2000      	movs	r0, #0
    5792:	e007      	b.n	57a4 <__sfputs_r+0x22>
    5794:	7821      	ldrb	r1, [r4, #0]
    5796:	003a      	movs	r2, r7
    5798:	0030      	movs	r0, r6
    579a:	f7ff ffdd 	bl	5758 <__sfputc_r>
    579e:	3401      	adds	r4, #1
    57a0:	1c43      	adds	r3, r0, #1
    57a2:	d1f3      	bne.n	578c <__sfputs_r+0xa>
    57a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000057a8 <_vfiprintf_r>:
    57a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    57aa:	b09f      	sub	sp, #124	; 0x7c
    57ac:	0006      	movs	r6, r0
    57ae:	000f      	movs	r7, r1
    57b0:	0014      	movs	r4, r2
    57b2:	9305      	str	r3, [sp, #20]
    57b4:	2800      	cmp	r0, #0
    57b6:	d004      	beq.n	57c2 <_vfiprintf_r+0x1a>
    57b8:	6983      	ldr	r3, [r0, #24]
    57ba:	2b00      	cmp	r3, #0
    57bc:	d101      	bne.n	57c2 <_vfiprintf_r+0x1a>
    57be:	f7ff fec7 	bl	5550 <__sinit>
    57c2:	4b7f      	ldr	r3, [pc, #508]	; (59c0 <_vfiprintf_r+0x218>)
    57c4:	429f      	cmp	r7, r3
    57c6:	d15c      	bne.n	5882 <_vfiprintf_r+0xda>
    57c8:	6877      	ldr	r7, [r6, #4]
    57ca:	89bb      	ldrh	r3, [r7, #12]
    57cc:	071b      	lsls	r3, r3, #28
    57ce:	d562      	bpl.n	5896 <_vfiprintf_r+0xee>
    57d0:	693b      	ldr	r3, [r7, #16]
    57d2:	2b00      	cmp	r3, #0
    57d4:	d05f      	beq.n	5896 <_vfiprintf_r+0xee>
    57d6:	2300      	movs	r3, #0
    57d8:	ad06      	add	r5, sp, #24
    57da:	616b      	str	r3, [r5, #20]
    57dc:	3320      	adds	r3, #32
    57de:	766b      	strb	r3, [r5, #25]
    57e0:	3310      	adds	r3, #16
    57e2:	76ab      	strb	r3, [r5, #26]
    57e4:	9402      	str	r4, [sp, #8]
    57e6:	9c02      	ldr	r4, [sp, #8]
    57e8:	7823      	ldrb	r3, [r4, #0]
    57ea:	2b00      	cmp	r3, #0
    57ec:	d15d      	bne.n	58aa <_vfiprintf_r+0x102>
    57ee:	9b02      	ldr	r3, [sp, #8]
    57f0:	1ae3      	subs	r3, r4, r3
    57f2:	9304      	str	r3, [sp, #16]
    57f4:	d00d      	beq.n	5812 <_vfiprintf_r+0x6a>
    57f6:	9b04      	ldr	r3, [sp, #16]
    57f8:	9a02      	ldr	r2, [sp, #8]
    57fa:	0039      	movs	r1, r7
    57fc:	0030      	movs	r0, r6
    57fe:	f7ff ffc0 	bl	5782 <__sfputs_r>
    5802:	1c43      	adds	r3, r0, #1
    5804:	d100      	bne.n	5808 <_vfiprintf_r+0x60>
    5806:	e0cc      	b.n	59a2 <_vfiprintf_r+0x1fa>
    5808:	696a      	ldr	r2, [r5, #20]
    580a:	9b04      	ldr	r3, [sp, #16]
    580c:	4694      	mov	ip, r2
    580e:	4463      	add	r3, ip
    5810:	616b      	str	r3, [r5, #20]
    5812:	7823      	ldrb	r3, [r4, #0]
    5814:	2b00      	cmp	r3, #0
    5816:	d100      	bne.n	581a <_vfiprintf_r+0x72>
    5818:	e0c3      	b.n	59a2 <_vfiprintf_r+0x1fa>
    581a:	2201      	movs	r2, #1
    581c:	2300      	movs	r3, #0
    581e:	4252      	negs	r2, r2
    5820:	606a      	str	r2, [r5, #4]
    5822:	a902      	add	r1, sp, #8
    5824:	3254      	adds	r2, #84	; 0x54
    5826:	1852      	adds	r2, r2, r1
    5828:	3401      	adds	r4, #1
    582a:	602b      	str	r3, [r5, #0]
    582c:	60eb      	str	r3, [r5, #12]
    582e:	60ab      	str	r3, [r5, #8]
    5830:	7013      	strb	r3, [r2, #0]
    5832:	65ab      	str	r3, [r5, #88]	; 0x58
    5834:	7821      	ldrb	r1, [r4, #0]
    5836:	2205      	movs	r2, #5
    5838:	4862      	ldr	r0, [pc, #392]	; (59c4 <_vfiprintf_r+0x21c>)
    583a:	f000 fc05 	bl	6048 <memchr>
    583e:	1c63      	adds	r3, r4, #1
    5840:	469c      	mov	ip, r3
    5842:	2800      	cmp	r0, #0
    5844:	d135      	bne.n	58b2 <_vfiprintf_r+0x10a>
    5846:	6829      	ldr	r1, [r5, #0]
    5848:	06cb      	lsls	r3, r1, #27
    584a:	d504      	bpl.n	5856 <_vfiprintf_r+0xae>
    584c:	2353      	movs	r3, #83	; 0x53
    584e:	aa02      	add	r2, sp, #8
    5850:	3020      	adds	r0, #32
    5852:	189b      	adds	r3, r3, r2
    5854:	7018      	strb	r0, [r3, #0]
    5856:	070b      	lsls	r3, r1, #28
    5858:	d504      	bpl.n	5864 <_vfiprintf_r+0xbc>
    585a:	2353      	movs	r3, #83	; 0x53
    585c:	202b      	movs	r0, #43	; 0x2b
    585e:	aa02      	add	r2, sp, #8
    5860:	189b      	adds	r3, r3, r2
    5862:	7018      	strb	r0, [r3, #0]
    5864:	7823      	ldrb	r3, [r4, #0]
    5866:	2b2a      	cmp	r3, #42	; 0x2a
    5868:	d02c      	beq.n	58c4 <_vfiprintf_r+0x11c>
    586a:	2000      	movs	r0, #0
    586c:	210a      	movs	r1, #10
    586e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5870:	7822      	ldrb	r2, [r4, #0]
    5872:	3a30      	subs	r2, #48	; 0x30
    5874:	2a09      	cmp	r2, #9
    5876:	d800      	bhi.n	587a <_vfiprintf_r+0xd2>
    5878:	e06b      	b.n	5952 <_vfiprintf_r+0x1aa>
    587a:	2800      	cmp	r0, #0
    587c:	d02a      	beq.n	58d4 <_vfiprintf_r+0x12c>
    587e:	9309      	str	r3, [sp, #36]	; 0x24
    5880:	e028      	b.n	58d4 <_vfiprintf_r+0x12c>
    5882:	4b51      	ldr	r3, [pc, #324]	; (59c8 <_vfiprintf_r+0x220>)
    5884:	429f      	cmp	r7, r3
    5886:	d101      	bne.n	588c <_vfiprintf_r+0xe4>
    5888:	68b7      	ldr	r7, [r6, #8]
    588a:	e79e      	b.n	57ca <_vfiprintf_r+0x22>
    588c:	4b4f      	ldr	r3, [pc, #316]	; (59cc <_vfiprintf_r+0x224>)
    588e:	429f      	cmp	r7, r3
    5890:	d19b      	bne.n	57ca <_vfiprintf_r+0x22>
    5892:	68f7      	ldr	r7, [r6, #12]
    5894:	e799      	b.n	57ca <_vfiprintf_r+0x22>
    5896:	0039      	movs	r1, r7
    5898:	0030      	movs	r0, r6
    589a:	f000 fb15 	bl	5ec8 <__swsetup_r>
    589e:	2800      	cmp	r0, #0
    58a0:	d099      	beq.n	57d6 <_vfiprintf_r+0x2e>
    58a2:	2001      	movs	r0, #1
    58a4:	4240      	negs	r0, r0
    58a6:	b01f      	add	sp, #124	; 0x7c
    58a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    58aa:	2b25      	cmp	r3, #37	; 0x25
    58ac:	d09f      	beq.n	57ee <_vfiprintf_r+0x46>
    58ae:	3401      	adds	r4, #1
    58b0:	e79a      	b.n	57e8 <_vfiprintf_r+0x40>
    58b2:	4b44      	ldr	r3, [pc, #272]	; (59c4 <_vfiprintf_r+0x21c>)
    58b4:	6829      	ldr	r1, [r5, #0]
    58b6:	1ac0      	subs	r0, r0, r3
    58b8:	2301      	movs	r3, #1
    58ba:	4083      	lsls	r3, r0
    58bc:	430b      	orrs	r3, r1
    58be:	602b      	str	r3, [r5, #0]
    58c0:	4664      	mov	r4, ip
    58c2:	e7b7      	b.n	5834 <_vfiprintf_r+0x8c>
    58c4:	9b05      	ldr	r3, [sp, #20]
    58c6:	1d18      	adds	r0, r3, #4
    58c8:	681b      	ldr	r3, [r3, #0]
    58ca:	9005      	str	r0, [sp, #20]
    58cc:	2b00      	cmp	r3, #0
    58ce:	db3a      	blt.n	5946 <_vfiprintf_r+0x19e>
    58d0:	9309      	str	r3, [sp, #36]	; 0x24
    58d2:	4664      	mov	r4, ip
    58d4:	7823      	ldrb	r3, [r4, #0]
    58d6:	2b2e      	cmp	r3, #46	; 0x2e
    58d8:	d10b      	bne.n	58f2 <_vfiprintf_r+0x14a>
    58da:	7863      	ldrb	r3, [r4, #1]
    58dc:	1c62      	adds	r2, r4, #1
    58de:	2b2a      	cmp	r3, #42	; 0x2a
    58e0:	d13f      	bne.n	5962 <_vfiprintf_r+0x1ba>
    58e2:	9b05      	ldr	r3, [sp, #20]
    58e4:	3402      	adds	r4, #2
    58e6:	1d1a      	adds	r2, r3, #4
    58e8:	681b      	ldr	r3, [r3, #0]
    58ea:	9205      	str	r2, [sp, #20]
    58ec:	2b00      	cmp	r3, #0
    58ee:	db35      	blt.n	595c <_vfiprintf_r+0x1b4>
    58f0:	9307      	str	r3, [sp, #28]
    58f2:	7821      	ldrb	r1, [r4, #0]
    58f4:	2203      	movs	r2, #3
    58f6:	4836      	ldr	r0, [pc, #216]	; (59d0 <_vfiprintf_r+0x228>)
    58f8:	f000 fba6 	bl	6048 <memchr>
    58fc:	2800      	cmp	r0, #0
    58fe:	d007      	beq.n	5910 <_vfiprintf_r+0x168>
    5900:	4b33      	ldr	r3, [pc, #204]	; (59d0 <_vfiprintf_r+0x228>)
    5902:	682a      	ldr	r2, [r5, #0]
    5904:	1ac0      	subs	r0, r0, r3
    5906:	2340      	movs	r3, #64	; 0x40
    5908:	4083      	lsls	r3, r0
    590a:	4313      	orrs	r3, r2
    590c:	602b      	str	r3, [r5, #0]
    590e:	3401      	adds	r4, #1
    5910:	7821      	ldrb	r1, [r4, #0]
    5912:	1c63      	adds	r3, r4, #1
    5914:	2206      	movs	r2, #6
    5916:	482f      	ldr	r0, [pc, #188]	; (59d4 <_vfiprintf_r+0x22c>)
    5918:	9302      	str	r3, [sp, #8]
    591a:	7629      	strb	r1, [r5, #24]
    591c:	f000 fb94 	bl	6048 <memchr>
    5920:	2800      	cmp	r0, #0
    5922:	d044      	beq.n	59ae <_vfiprintf_r+0x206>
    5924:	4b2c      	ldr	r3, [pc, #176]	; (59d8 <_vfiprintf_r+0x230>)
    5926:	2b00      	cmp	r3, #0
    5928:	d12f      	bne.n	598a <_vfiprintf_r+0x1e2>
    592a:	6829      	ldr	r1, [r5, #0]
    592c:	9b05      	ldr	r3, [sp, #20]
    592e:	2207      	movs	r2, #7
    5930:	05c9      	lsls	r1, r1, #23
    5932:	d528      	bpl.n	5986 <_vfiprintf_r+0x1de>
    5934:	189b      	adds	r3, r3, r2
    5936:	4393      	bics	r3, r2
    5938:	3308      	adds	r3, #8
    593a:	9305      	str	r3, [sp, #20]
    593c:	696b      	ldr	r3, [r5, #20]
    593e:	9a03      	ldr	r2, [sp, #12]
    5940:	189b      	adds	r3, r3, r2
    5942:	616b      	str	r3, [r5, #20]
    5944:	e74f      	b.n	57e6 <_vfiprintf_r+0x3e>
    5946:	425b      	negs	r3, r3
    5948:	60eb      	str	r3, [r5, #12]
    594a:	2302      	movs	r3, #2
    594c:	430b      	orrs	r3, r1
    594e:	602b      	str	r3, [r5, #0]
    5950:	e7bf      	b.n	58d2 <_vfiprintf_r+0x12a>
    5952:	434b      	muls	r3, r1
    5954:	3401      	adds	r4, #1
    5956:	189b      	adds	r3, r3, r2
    5958:	2001      	movs	r0, #1
    595a:	e789      	b.n	5870 <_vfiprintf_r+0xc8>
    595c:	2301      	movs	r3, #1
    595e:	425b      	negs	r3, r3
    5960:	e7c6      	b.n	58f0 <_vfiprintf_r+0x148>
    5962:	2300      	movs	r3, #0
    5964:	0014      	movs	r4, r2
    5966:	200a      	movs	r0, #10
    5968:	001a      	movs	r2, r3
    596a:	606b      	str	r3, [r5, #4]
    596c:	7821      	ldrb	r1, [r4, #0]
    596e:	3930      	subs	r1, #48	; 0x30
    5970:	2909      	cmp	r1, #9
    5972:	d903      	bls.n	597c <_vfiprintf_r+0x1d4>
    5974:	2b00      	cmp	r3, #0
    5976:	d0bc      	beq.n	58f2 <_vfiprintf_r+0x14a>
    5978:	9207      	str	r2, [sp, #28]
    597a:	e7ba      	b.n	58f2 <_vfiprintf_r+0x14a>
    597c:	4342      	muls	r2, r0
    597e:	3401      	adds	r4, #1
    5980:	1852      	adds	r2, r2, r1
    5982:	2301      	movs	r3, #1
    5984:	e7f2      	b.n	596c <_vfiprintf_r+0x1c4>
    5986:	3307      	adds	r3, #7
    5988:	e7d5      	b.n	5936 <_vfiprintf_r+0x18e>
    598a:	ab05      	add	r3, sp, #20
    598c:	9300      	str	r3, [sp, #0]
    598e:	003a      	movs	r2, r7
    5990:	4b12      	ldr	r3, [pc, #72]	; (59dc <_vfiprintf_r+0x234>)
    5992:	0029      	movs	r1, r5
    5994:	0030      	movs	r0, r6
    5996:	e000      	b.n	599a <_vfiprintf_r+0x1f2>
    5998:	bf00      	nop
    599a:	9003      	str	r0, [sp, #12]
    599c:	9b03      	ldr	r3, [sp, #12]
    599e:	3301      	adds	r3, #1
    59a0:	d1cc      	bne.n	593c <_vfiprintf_r+0x194>
    59a2:	89bb      	ldrh	r3, [r7, #12]
    59a4:	065b      	lsls	r3, r3, #25
    59a6:	d500      	bpl.n	59aa <_vfiprintf_r+0x202>
    59a8:	e77b      	b.n	58a2 <_vfiprintf_r+0xfa>
    59aa:	980b      	ldr	r0, [sp, #44]	; 0x2c
    59ac:	e77b      	b.n	58a6 <_vfiprintf_r+0xfe>
    59ae:	ab05      	add	r3, sp, #20
    59b0:	9300      	str	r3, [sp, #0]
    59b2:	003a      	movs	r2, r7
    59b4:	4b09      	ldr	r3, [pc, #36]	; (59dc <_vfiprintf_r+0x234>)
    59b6:	0029      	movs	r1, r5
    59b8:	0030      	movs	r0, r6
    59ba:	f000 f87f 	bl	5abc <_printf_i>
    59be:	e7ec      	b.n	599a <_vfiprintf_r+0x1f2>
    59c0:	00008750 	.word	0x00008750
    59c4:	00008790 	.word	0x00008790
    59c8:	00008770 	.word	0x00008770
    59cc:	00008730 	.word	0x00008730
    59d0:	00008796 	.word	0x00008796
    59d4:	0000879a 	.word	0x0000879a
    59d8:	00000000 	.word	0x00000000
    59dc:	00005783 	.word	0x00005783

000059e0 <_printf_common>:
    59e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    59e2:	0015      	movs	r5, r2
    59e4:	9301      	str	r3, [sp, #4]
    59e6:	688a      	ldr	r2, [r1, #8]
    59e8:	690b      	ldr	r3, [r1, #16]
    59ea:	9000      	str	r0, [sp, #0]
    59ec:	000c      	movs	r4, r1
    59ee:	4293      	cmp	r3, r2
    59f0:	da00      	bge.n	59f4 <_printf_common+0x14>
    59f2:	0013      	movs	r3, r2
    59f4:	0022      	movs	r2, r4
    59f6:	602b      	str	r3, [r5, #0]
    59f8:	3243      	adds	r2, #67	; 0x43
    59fa:	7812      	ldrb	r2, [r2, #0]
    59fc:	2a00      	cmp	r2, #0
    59fe:	d001      	beq.n	5a04 <_printf_common+0x24>
    5a00:	3301      	adds	r3, #1
    5a02:	602b      	str	r3, [r5, #0]
    5a04:	6823      	ldr	r3, [r4, #0]
    5a06:	069b      	lsls	r3, r3, #26
    5a08:	d502      	bpl.n	5a10 <_printf_common+0x30>
    5a0a:	682b      	ldr	r3, [r5, #0]
    5a0c:	3302      	adds	r3, #2
    5a0e:	602b      	str	r3, [r5, #0]
    5a10:	2706      	movs	r7, #6
    5a12:	6823      	ldr	r3, [r4, #0]
    5a14:	401f      	ands	r7, r3
    5a16:	d027      	beq.n	5a68 <_printf_common+0x88>
    5a18:	0023      	movs	r3, r4
    5a1a:	3343      	adds	r3, #67	; 0x43
    5a1c:	781b      	ldrb	r3, [r3, #0]
    5a1e:	1e5a      	subs	r2, r3, #1
    5a20:	4193      	sbcs	r3, r2
    5a22:	6822      	ldr	r2, [r4, #0]
    5a24:	0692      	lsls	r2, r2, #26
    5a26:	d430      	bmi.n	5a8a <_printf_common+0xaa>
    5a28:	0022      	movs	r2, r4
    5a2a:	9901      	ldr	r1, [sp, #4]
    5a2c:	3243      	adds	r2, #67	; 0x43
    5a2e:	9800      	ldr	r0, [sp, #0]
    5a30:	9e08      	ldr	r6, [sp, #32]
    5a32:	47b0      	blx	r6
    5a34:	1c43      	adds	r3, r0, #1
    5a36:	d025      	beq.n	5a84 <_printf_common+0xa4>
    5a38:	2306      	movs	r3, #6
    5a3a:	6820      	ldr	r0, [r4, #0]
    5a3c:	682a      	ldr	r2, [r5, #0]
    5a3e:	68e1      	ldr	r1, [r4, #12]
    5a40:	4003      	ands	r3, r0
    5a42:	2500      	movs	r5, #0
    5a44:	2b04      	cmp	r3, #4
    5a46:	d103      	bne.n	5a50 <_printf_common+0x70>
    5a48:	1a8d      	subs	r5, r1, r2
    5a4a:	43eb      	mvns	r3, r5
    5a4c:	17db      	asrs	r3, r3, #31
    5a4e:	401d      	ands	r5, r3
    5a50:	68a3      	ldr	r3, [r4, #8]
    5a52:	6922      	ldr	r2, [r4, #16]
    5a54:	4293      	cmp	r3, r2
    5a56:	dd01      	ble.n	5a5c <_printf_common+0x7c>
    5a58:	1a9b      	subs	r3, r3, r2
    5a5a:	18ed      	adds	r5, r5, r3
    5a5c:	2700      	movs	r7, #0
    5a5e:	42bd      	cmp	r5, r7
    5a60:	d120      	bne.n	5aa4 <_printf_common+0xc4>
    5a62:	2000      	movs	r0, #0
    5a64:	e010      	b.n	5a88 <_printf_common+0xa8>
    5a66:	3701      	adds	r7, #1
    5a68:	68e3      	ldr	r3, [r4, #12]
    5a6a:	682a      	ldr	r2, [r5, #0]
    5a6c:	1a9b      	subs	r3, r3, r2
    5a6e:	429f      	cmp	r7, r3
    5a70:	dad2      	bge.n	5a18 <_printf_common+0x38>
    5a72:	0022      	movs	r2, r4
    5a74:	2301      	movs	r3, #1
    5a76:	3219      	adds	r2, #25
    5a78:	9901      	ldr	r1, [sp, #4]
    5a7a:	9800      	ldr	r0, [sp, #0]
    5a7c:	9e08      	ldr	r6, [sp, #32]
    5a7e:	47b0      	blx	r6
    5a80:	1c43      	adds	r3, r0, #1
    5a82:	d1f0      	bne.n	5a66 <_printf_common+0x86>
    5a84:	2001      	movs	r0, #1
    5a86:	4240      	negs	r0, r0
    5a88:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    5a8a:	2030      	movs	r0, #48	; 0x30
    5a8c:	18e1      	adds	r1, r4, r3
    5a8e:	3143      	adds	r1, #67	; 0x43
    5a90:	7008      	strb	r0, [r1, #0]
    5a92:	0021      	movs	r1, r4
    5a94:	1c5a      	adds	r2, r3, #1
    5a96:	3145      	adds	r1, #69	; 0x45
    5a98:	7809      	ldrb	r1, [r1, #0]
    5a9a:	18a2      	adds	r2, r4, r2
    5a9c:	3243      	adds	r2, #67	; 0x43
    5a9e:	3302      	adds	r3, #2
    5aa0:	7011      	strb	r1, [r2, #0]
    5aa2:	e7c1      	b.n	5a28 <_printf_common+0x48>
    5aa4:	0022      	movs	r2, r4
    5aa6:	2301      	movs	r3, #1
    5aa8:	321a      	adds	r2, #26
    5aaa:	9901      	ldr	r1, [sp, #4]
    5aac:	9800      	ldr	r0, [sp, #0]
    5aae:	9e08      	ldr	r6, [sp, #32]
    5ab0:	47b0      	blx	r6
    5ab2:	1c43      	adds	r3, r0, #1
    5ab4:	d0e6      	beq.n	5a84 <_printf_common+0xa4>
    5ab6:	3701      	adds	r7, #1
    5ab8:	e7d1      	b.n	5a5e <_printf_common+0x7e>
	...

00005abc <_printf_i>:
    5abc:	b5f0      	push	{r4, r5, r6, r7, lr}
    5abe:	b08b      	sub	sp, #44	; 0x2c
    5ac0:	9206      	str	r2, [sp, #24]
    5ac2:	000a      	movs	r2, r1
    5ac4:	3243      	adds	r2, #67	; 0x43
    5ac6:	9307      	str	r3, [sp, #28]
    5ac8:	9005      	str	r0, [sp, #20]
    5aca:	9204      	str	r2, [sp, #16]
    5acc:	7e0a      	ldrb	r2, [r1, #24]
    5ace:	000c      	movs	r4, r1
    5ad0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    5ad2:	2a6e      	cmp	r2, #110	; 0x6e
    5ad4:	d100      	bne.n	5ad8 <_printf_i+0x1c>
    5ad6:	e08f      	b.n	5bf8 <_printf_i+0x13c>
    5ad8:	d817      	bhi.n	5b0a <_printf_i+0x4e>
    5ada:	2a63      	cmp	r2, #99	; 0x63
    5adc:	d02c      	beq.n	5b38 <_printf_i+0x7c>
    5ade:	d808      	bhi.n	5af2 <_printf_i+0x36>
    5ae0:	2a00      	cmp	r2, #0
    5ae2:	d100      	bne.n	5ae6 <_printf_i+0x2a>
    5ae4:	e099      	b.n	5c1a <_printf_i+0x15e>
    5ae6:	2a58      	cmp	r2, #88	; 0x58
    5ae8:	d054      	beq.n	5b94 <_printf_i+0xd8>
    5aea:	0026      	movs	r6, r4
    5aec:	3642      	adds	r6, #66	; 0x42
    5aee:	7032      	strb	r2, [r6, #0]
    5af0:	e029      	b.n	5b46 <_printf_i+0x8a>
    5af2:	2a64      	cmp	r2, #100	; 0x64
    5af4:	d001      	beq.n	5afa <_printf_i+0x3e>
    5af6:	2a69      	cmp	r2, #105	; 0x69
    5af8:	d1f7      	bne.n	5aea <_printf_i+0x2e>
    5afa:	6821      	ldr	r1, [r4, #0]
    5afc:	681a      	ldr	r2, [r3, #0]
    5afe:	0608      	lsls	r0, r1, #24
    5b00:	d523      	bpl.n	5b4a <_printf_i+0x8e>
    5b02:	1d11      	adds	r1, r2, #4
    5b04:	6019      	str	r1, [r3, #0]
    5b06:	6815      	ldr	r5, [r2, #0]
    5b08:	e025      	b.n	5b56 <_printf_i+0x9a>
    5b0a:	2a73      	cmp	r2, #115	; 0x73
    5b0c:	d100      	bne.n	5b10 <_printf_i+0x54>
    5b0e:	e088      	b.n	5c22 <_printf_i+0x166>
    5b10:	d808      	bhi.n	5b24 <_printf_i+0x68>
    5b12:	2a6f      	cmp	r2, #111	; 0x6f
    5b14:	d029      	beq.n	5b6a <_printf_i+0xae>
    5b16:	2a70      	cmp	r2, #112	; 0x70
    5b18:	d1e7      	bne.n	5aea <_printf_i+0x2e>
    5b1a:	2220      	movs	r2, #32
    5b1c:	6809      	ldr	r1, [r1, #0]
    5b1e:	430a      	orrs	r2, r1
    5b20:	6022      	str	r2, [r4, #0]
    5b22:	e003      	b.n	5b2c <_printf_i+0x70>
    5b24:	2a75      	cmp	r2, #117	; 0x75
    5b26:	d020      	beq.n	5b6a <_printf_i+0xae>
    5b28:	2a78      	cmp	r2, #120	; 0x78
    5b2a:	d1de      	bne.n	5aea <_printf_i+0x2e>
    5b2c:	0022      	movs	r2, r4
    5b2e:	2178      	movs	r1, #120	; 0x78
    5b30:	3245      	adds	r2, #69	; 0x45
    5b32:	7011      	strb	r1, [r2, #0]
    5b34:	4a6c      	ldr	r2, [pc, #432]	; (5ce8 <_printf_i+0x22c>)
    5b36:	e030      	b.n	5b9a <_printf_i+0xde>
    5b38:	000e      	movs	r6, r1
    5b3a:	681a      	ldr	r2, [r3, #0]
    5b3c:	3642      	adds	r6, #66	; 0x42
    5b3e:	1d11      	adds	r1, r2, #4
    5b40:	6019      	str	r1, [r3, #0]
    5b42:	6813      	ldr	r3, [r2, #0]
    5b44:	7033      	strb	r3, [r6, #0]
    5b46:	2301      	movs	r3, #1
    5b48:	e079      	b.n	5c3e <_printf_i+0x182>
    5b4a:	0649      	lsls	r1, r1, #25
    5b4c:	d5d9      	bpl.n	5b02 <_printf_i+0x46>
    5b4e:	1d11      	adds	r1, r2, #4
    5b50:	6019      	str	r1, [r3, #0]
    5b52:	2300      	movs	r3, #0
    5b54:	5ed5      	ldrsh	r5, [r2, r3]
    5b56:	2d00      	cmp	r5, #0
    5b58:	da03      	bge.n	5b62 <_printf_i+0xa6>
    5b5a:	232d      	movs	r3, #45	; 0x2d
    5b5c:	9a04      	ldr	r2, [sp, #16]
    5b5e:	426d      	negs	r5, r5
    5b60:	7013      	strb	r3, [r2, #0]
    5b62:	4b62      	ldr	r3, [pc, #392]	; (5cec <_printf_i+0x230>)
    5b64:	270a      	movs	r7, #10
    5b66:	9303      	str	r3, [sp, #12]
    5b68:	e02f      	b.n	5bca <_printf_i+0x10e>
    5b6a:	6820      	ldr	r0, [r4, #0]
    5b6c:	6819      	ldr	r1, [r3, #0]
    5b6e:	0605      	lsls	r5, r0, #24
    5b70:	d503      	bpl.n	5b7a <_printf_i+0xbe>
    5b72:	1d08      	adds	r0, r1, #4
    5b74:	6018      	str	r0, [r3, #0]
    5b76:	680d      	ldr	r5, [r1, #0]
    5b78:	e005      	b.n	5b86 <_printf_i+0xca>
    5b7a:	0640      	lsls	r0, r0, #25
    5b7c:	d5f9      	bpl.n	5b72 <_printf_i+0xb6>
    5b7e:	680d      	ldr	r5, [r1, #0]
    5b80:	1d08      	adds	r0, r1, #4
    5b82:	6018      	str	r0, [r3, #0]
    5b84:	b2ad      	uxth	r5, r5
    5b86:	4b59      	ldr	r3, [pc, #356]	; (5cec <_printf_i+0x230>)
    5b88:	2708      	movs	r7, #8
    5b8a:	9303      	str	r3, [sp, #12]
    5b8c:	2a6f      	cmp	r2, #111	; 0x6f
    5b8e:	d018      	beq.n	5bc2 <_printf_i+0x106>
    5b90:	270a      	movs	r7, #10
    5b92:	e016      	b.n	5bc2 <_printf_i+0x106>
    5b94:	3145      	adds	r1, #69	; 0x45
    5b96:	700a      	strb	r2, [r1, #0]
    5b98:	4a54      	ldr	r2, [pc, #336]	; (5cec <_printf_i+0x230>)
    5b9a:	9203      	str	r2, [sp, #12]
    5b9c:	681a      	ldr	r2, [r3, #0]
    5b9e:	6821      	ldr	r1, [r4, #0]
    5ba0:	1d10      	adds	r0, r2, #4
    5ba2:	6018      	str	r0, [r3, #0]
    5ba4:	6815      	ldr	r5, [r2, #0]
    5ba6:	0608      	lsls	r0, r1, #24
    5ba8:	d522      	bpl.n	5bf0 <_printf_i+0x134>
    5baa:	07cb      	lsls	r3, r1, #31
    5bac:	d502      	bpl.n	5bb4 <_printf_i+0xf8>
    5bae:	2320      	movs	r3, #32
    5bb0:	4319      	orrs	r1, r3
    5bb2:	6021      	str	r1, [r4, #0]
    5bb4:	2710      	movs	r7, #16
    5bb6:	2d00      	cmp	r5, #0
    5bb8:	d103      	bne.n	5bc2 <_printf_i+0x106>
    5bba:	2320      	movs	r3, #32
    5bbc:	6822      	ldr	r2, [r4, #0]
    5bbe:	439a      	bics	r2, r3
    5bc0:	6022      	str	r2, [r4, #0]
    5bc2:	0023      	movs	r3, r4
    5bc4:	2200      	movs	r2, #0
    5bc6:	3343      	adds	r3, #67	; 0x43
    5bc8:	701a      	strb	r2, [r3, #0]
    5bca:	6863      	ldr	r3, [r4, #4]
    5bcc:	60a3      	str	r3, [r4, #8]
    5bce:	2b00      	cmp	r3, #0
    5bd0:	db5c      	blt.n	5c8c <_printf_i+0x1d0>
    5bd2:	2204      	movs	r2, #4
    5bd4:	6821      	ldr	r1, [r4, #0]
    5bd6:	4391      	bics	r1, r2
    5bd8:	6021      	str	r1, [r4, #0]
    5bda:	2d00      	cmp	r5, #0
    5bdc:	d158      	bne.n	5c90 <_printf_i+0x1d4>
    5bde:	9e04      	ldr	r6, [sp, #16]
    5be0:	2b00      	cmp	r3, #0
    5be2:	d064      	beq.n	5cae <_printf_i+0x1f2>
    5be4:	0026      	movs	r6, r4
    5be6:	9b03      	ldr	r3, [sp, #12]
    5be8:	3642      	adds	r6, #66	; 0x42
    5bea:	781b      	ldrb	r3, [r3, #0]
    5bec:	7033      	strb	r3, [r6, #0]
    5bee:	e05e      	b.n	5cae <_printf_i+0x1f2>
    5bf0:	0648      	lsls	r0, r1, #25
    5bf2:	d5da      	bpl.n	5baa <_printf_i+0xee>
    5bf4:	b2ad      	uxth	r5, r5
    5bf6:	e7d8      	b.n	5baa <_printf_i+0xee>
    5bf8:	6809      	ldr	r1, [r1, #0]
    5bfa:	681a      	ldr	r2, [r3, #0]
    5bfc:	0608      	lsls	r0, r1, #24
    5bfe:	d505      	bpl.n	5c0c <_printf_i+0x150>
    5c00:	1d11      	adds	r1, r2, #4
    5c02:	6019      	str	r1, [r3, #0]
    5c04:	6813      	ldr	r3, [r2, #0]
    5c06:	6962      	ldr	r2, [r4, #20]
    5c08:	601a      	str	r2, [r3, #0]
    5c0a:	e006      	b.n	5c1a <_printf_i+0x15e>
    5c0c:	0649      	lsls	r1, r1, #25
    5c0e:	d5f7      	bpl.n	5c00 <_printf_i+0x144>
    5c10:	1d11      	adds	r1, r2, #4
    5c12:	6019      	str	r1, [r3, #0]
    5c14:	6813      	ldr	r3, [r2, #0]
    5c16:	8aa2      	ldrh	r2, [r4, #20]
    5c18:	801a      	strh	r2, [r3, #0]
    5c1a:	2300      	movs	r3, #0
    5c1c:	9e04      	ldr	r6, [sp, #16]
    5c1e:	6123      	str	r3, [r4, #16]
    5c20:	e054      	b.n	5ccc <_printf_i+0x210>
    5c22:	681a      	ldr	r2, [r3, #0]
    5c24:	1d11      	adds	r1, r2, #4
    5c26:	6019      	str	r1, [r3, #0]
    5c28:	6816      	ldr	r6, [r2, #0]
    5c2a:	2100      	movs	r1, #0
    5c2c:	6862      	ldr	r2, [r4, #4]
    5c2e:	0030      	movs	r0, r6
    5c30:	f000 fa0a 	bl	6048 <memchr>
    5c34:	2800      	cmp	r0, #0
    5c36:	d001      	beq.n	5c3c <_printf_i+0x180>
    5c38:	1b80      	subs	r0, r0, r6
    5c3a:	6060      	str	r0, [r4, #4]
    5c3c:	6863      	ldr	r3, [r4, #4]
    5c3e:	6123      	str	r3, [r4, #16]
    5c40:	2300      	movs	r3, #0
    5c42:	9a04      	ldr	r2, [sp, #16]
    5c44:	7013      	strb	r3, [r2, #0]
    5c46:	e041      	b.n	5ccc <_printf_i+0x210>
    5c48:	6923      	ldr	r3, [r4, #16]
    5c4a:	0032      	movs	r2, r6
    5c4c:	9906      	ldr	r1, [sp, #24]
    5c4e:	9805      	ldr	r0, [sp, #20]
    5c50:	9d07      	ldr	r5, [sp, #28]
    5c52:	47a8      	blx	r5
    5c54:	1c43      	adds	r3, r0, #1
    5c56:	d043      	beq.n	5ce0 <_printf_i+0x224>
    5c58:	6823      	ldr	r3, [r4, #0]
    5c5a:	2500      	movs	r5, #0
    5c5c:	079b      	lsls	r3, r3, #30
    5c5e:	d40f      	bmi.n	5c80 <_printf_i+0x1c4>
    5c60:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5c62:	68e0      	ldr	r0, [r4, #12]
    5c64:	4298      	cmp	r0, r3
    5c66:	da3d      	bge.n	5ce4 <_printf_i+0x228>
    5c68:	0018      	movs	r0, r3
    5c6a:	e03b      	b.n	5ce4 <_printf_i+0x228>
    5c6c:	0022      	movs	r2, r4
    5c6e:	2301      	movs	r3, #1
    5c70:	3219      	adds	r2, #25
    5c72:	9906      	ldr	r1, [sp, #24]
    5c74:	9805      	ldr	r0, [sp, #20]
    5c76:	9e07      	ldr	r6, [sp, #28]
    5c78:	47b0      	blx	r6
    5c7a:	1c43      	adds	r3, r0, #1
    5c7c:	d030      	beq.n	5ce0 <_printf_i+0x224>
    5c7e:	3501      	adds	r5, #1
    5c80:	68e3      	ldr	r3, [r4, #12]
    5c82:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5c84:	1a9b      	subs	r3, r3, r2
    5c86:	429d      	cmp	r5, r3
    5c88:	dbf0      	blt.n	5c6c <_printf_i+0x1b0>
    5c8a:	e7e9      	b.n	5c60 <_printf_i+0x1a4>
    5c8c:	2d00      	cmp	r5, #0
    5c8e:	d0a9      	beq.n	5be4 <_printf_i+0x128>
    5c90:	9e04      	ldr	r6, [sp, #16]
    5c92:	0028      	movs	r0, r5
    5c94:	0039      	movs	r1, r7
    5c96:	f7fe ff97 	bl	4bc8 <__aeabi_uidivmod>
    5c9a:	9b03      	ldr	r3, [sp, #12]
    5c9c:	3e01      	subs	r6, #1
    5c9e:	5c5b      	ldrb	r3, [r3, r1]
    5ca0:	0028      	movs	r0, r5
    5ca2:	7033      	strb	r3, [r6, #0]
    5ca4:	0039      	movs	r1, r7
    5ca6:	f7fe ff09 	bl	4abc <__udivsi3>
    5caa:	1e05      	subs	r5, r0, #0
    5cac:	d1f1      	bne.n	5c92 <_printf_i+0x1d6>
    5cae:	2f08      	cmp	r7, #8
    5cb0:	d109      	bne.n	5cc6 <_printf_i+0x20a>
    5cb2:	6823      	ldr	r3, [r4, #0]
    5cb4:	07db      	lsls	r3, r3, #31
    5cb6:	d506      	bpl.n	5cc6 <_printf_i+0x20a>
    5cb8:	6863      	ldr	r3, [r4, #4]
    5cba:	6922      	ldr	r2, [r4, #16]
    5cbc:	4293      	cmp	r3, r2
    5cbe:	dc02      	bgt.n	5cc6 <_printf_i+0x20a>
    5cc0:	2330      	movs	r3, #48	; 0x30
    5cc2:	3e01      	subs	r6, #1
    5cc4:	7033      	strb	r3, [r6, #0]
    5cc6:	9b04      	ldr	r3, [sp, #16]
    5cc8:	1b9b      	subs	r3, r3, r6
    5cca:	6123      	str	r3, [r4, #16]
    5ccc:	9b07      	ldr	r3, [sp, #28]
    5cce:	aa09      	add	r2, sp, #36	; 0x24
    5cd0:	9300      	str	r3, [sp, #0]
    5cd2:	0021      	movs	r1, r4
    5cd4:	9b06      	ldr	r3, [sp, #24]
    5cd6:	9805      	ldr	r0, [sp, #20]
    5cd8:	f7ff fe82 	bl	59e0 <_printf_common>
    5cdc:	1c43      	adds	r3, r0, #1
    5cde:	d1b3      	bne.n	5c48 <_printf_i+0x18c>
    5ce0:	2001      	movs	r0, #1
    5ce2:	4240      	negs	r0, r0
    5ce4:	b00b      	add	sp, #44	; 0x2c
    5ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5ce8:	000087b2 	.word	0x000087b2
    5cec:	000087a1 	.word	0x000087a1

00005cf0 <_putc_r>:
    5cf0:	b570      	push	{r4, r5, r6, lr}
    5cf2:	0006      	movs	r6, r0
    5cf4:	000d      	movs	r5, r1
    5cf6:	0014      	movs	r4, r2
    5cf8:	2800      	cmp	r0, #0
    5cfa:	d004      	beq.n	5d06 <_putc_r+0x16>
    5cfc:	6983      	ldr	r3, [r0, #24]
    5cfe:	2b00      	cmp	r3, #0
    5d00:	d101      	bne.n	5d06 <_putc_r+0x16>
    5d02:	f7ff fc25 	bl	5550 <__sinit>
    5d06:	4b12      	ldr	r3, [pc, #72]	; (5d50 <_putc_r+0x60>)
    5d08:	429c      	cmp	r4, r3
    5d0a:	d111      	bne.n	5d30 <_putc_r+0x40>
    5d0c:	6874      	ldr	r4, [r6, #4]
    5d0e:	68a3      	ldr	r3, [r4, #8]
    5d10:	3b01      	subs	r3, #1
    5d12:	60a3      	str	r3, [r4, #8]
    5d14:	2b00      	cmp	r3, #0
    5d16:	da05      	bge.n	5d24 <_putc_r+0x34>
    5d18:	69a2      	ldr	r2, [r4, #24]
    5d1a:	4293      	cmp	r3, r2
    5d1c:	db12      	blt.n	5d44 <_putc_r+0x54>
    5d1e:	b2eb      	uxtb	r3, r5
    5d20:	2b0a      	cmp	r3, #10
    5d22:	d00f      	beq.n	5d44 <_putc_r+0x54>
    5d24:	6823      	ldr	r3, [r4, #0]
    5d26:	b2e8      	uxtb	r0, r5
    5d28:	1c5a      	adds	r2, r3, #1
    5d2a:	6022      	str	r2, [r4, #0]
    5d2c:	701d      	strb	r5, [r3, #0]
    5d2e:	bd70      	pop	{r4, r5, r6, pc}
    5d30:	4b08      	ldr	r3, [pc, #32]	; (5d54 <_putc_r+0x64>)
    5d32:	429c      	cmp	r4, r3
    5d34:	d101      	bne.n	5d3a <_putc_r+0x4a>
    5d36:	68b4      	ldr	r4, [r6, #8]
    5d38:	e7e9      	b.n	5d0e <_putc_r+0x1e>
    5d3a:	4b07      	ldr	r3, [pc, #28]	; (5d58 <_putc_r+0x68>)
    5d3c:	429c      	cmp	r4, r3
    5d3e:	d1e6      	bne.n	5d0e <_putc_r+0x1e>
    5d40:	68f4      	ldr	r4, [r6, #12]
    5d42:	e7e4      	b.n	5d0e <_putc_r+0x1e>
    5d44:	0022      	movs	r2, r4
    5d46:	0029      	movs	r1, r5
    5d48:	0030      	movs	r0, r6
    5d4a:	f000 f853 	bl	5df4 <__swbuf_r>
    5d4e:	e7ee      	b.n	5d2e <_putc_r+0x3e>
    5d50:	00008750 	.word	0x00008750
    5d54:	00008770 	.word	0x00008770
    5d58:	00008730 	.word	0x00008730

00005d5c <__sread>:
    5d5c:	b570      	push	{r4, r5, r6, lr}
    5d5e:	000c      	movs	r4, r1
    5d60:	250e      	movs	r5, #14
    5d62:	5f49      	ldrsh	r1, [r1, r5]
    5d64:	f000 f97c 	bl	6060 <_read_r>
    5d68:	2800      	cmp	r0, #0
    5d6a:	db03      	blt.n	5d74 <__sread+0x18>
    5d6c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    5d6e:	181b      	adds	r3, r3, r0
    5d70:	6563      	str	r3, [r4, #84]	; 0x54
    5d72:	bd70      	pop	{r4, r5, r6, pc}
    5d74:	89a3      	ldrh	r3, [r4, #12]
    5d76:	4a02      	ldr	r2, [pc, #8]	; (5d80 <__sread+0x24>)
    5d78:	4013      	ands	r3, r2
    5d7a:	81a3      	strh	r3, [r4, #12]
    5d7c:	e7f9      	b.n	5d72 <__sread+0x16>
    5d7e:	46c0      	nop			; (mov r8, r8)
    5d80:	ffffefff 	.word	0xffffefff

00005d84 <__swrite>:
    5d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5d86:	001f      	movs	r7, r3
    5d88:	898b      	ldrh	r3, [r1, #12]
    5d8a:	0005      	movs	r5, r0
    5d8c:	000c      	movs	r4, r1
    5d8e:	0016      	movs	r6, r2
    5d90:	05db      	lsls	r3, r3, #23
    5d92:	d505      	bpl.n	5da0 <__swrite+0x1c>
    5d94:	230e      	movs	r3, #14
    5d96:	5ec9      	ldrsh	r1, [r1, r3]
    5d98:	2200      	movs	r2, #0
    5d9a:	2302      	movs	r3, #2
    5d9c:	f000 f940 	bl	6020 <_lseek_r>
    5da0:	89a3      	ldrh	r3, [r4, #12]
    5da2:	4a05      	ldr	r2, [pc, #20]	; (5db8 <__swrite+0x34>)
    5da4:	0028      	movs	r0, r5
    5da6:	4013      	ands	r3, r2
    5da8:	81a3      	strh	r3, [r4, #12]
    5daa:	0032      	movs	r2, r6
    5dac:	230e      	movs	r3, #14
    5dae:	5ee1      	ldrsh	r1, [r4, r3]
    5db0:	003b      	movs	r3, r7
    5db2:	f000 f875 	bl	5ea0 <_write_r>
    5db6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5db8:	ffffefff 	.word	0xffffefff

00005dbc <__sseek>:
    5dbc:	b570      	push	{r4, r5, r6, lr}
    5dbe:	000c      	movs	r4, r1
    5dc0:	250e      	movs	r5, #14
    5dc2:	5f49      	ldrsh	r1, [r1, r5]
    5dc4:	f000 f92c 	bl	6020 <_lseek_r>
    5dc8:	89a3      	ldrh	r3, [r4, #12]
    5dca:	1c42      	adds	r2, r0, #1
    5dcc:	d103      	bne.n	5dd6 <__sseek+0x1a>
    5dce:	4a05      	ldr	r2, [pc, #20]	; (5de4 <__sseek+0x28>)
    5dd0:	4013      	ands	r3, r2
    5dd2:	81a3      	strh	r3, [r4, #12]
    5dd4:	bd70      	pop	{r4, r5, r6, pc}
    5dd6:	2280      	movs	r2, #128	; 0x80
    5dd8:	0152      	lsls	r2, r2, #5
    5dda:	4313      	orrs	r3, r2
    5ddc:	81a3      	strh	r3, [r4, #12]
    5dde:	6560      	str	r0, [r4, #84]	; 0x54
    5de0:	e7f8      	b.n	5dd4 <__sseek+0x18>
    5de2:	46c0      	nop			; (mov r8, r8)
    5de4:	ffffefff 	.word	0xffffefff

00005de8 <__sclose>:
    5de8:	b510      	push	{r4, lr}
    5dea:	230e      	movs	r3, #14
    5dec:	5ec9      	ldrsh	r1, [r1, r3]
    5dee:	f000 f8e1 	bl	5fb4 <_close_r>
    5df2:	bd10      	pop	{r4, pc}

00005df4 <__swbuf_r>:
    5df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5df6:	0005      	movs	r5, r0
    5df8:	000e      	movs	r6, r1
    5dfa:	0014      	movs	r4, r2
    5dfc:	2800      	cmp	r0, #0
    5dfe:	d004      	beq.n	5e0a <__swbuf_r+0x16>
    5e00:	6983      	ldr	r3, [r0, #24]
    5e02:	2b00      	cmp	r3, #0
    5e04:	d101      	bne.n	5e0a <__swbuf_r+0x16>
    5e06:	f7ff fba3 	bl	5550 <__sinit>
    5e0a:	4b22      	ldr	r3, [pc, #136]	; (5e94 <__swbuf_r+0xa0>)
    5e0c:	429c      	cmp	r4, r3
    5e0e:	d12d      	bne.n	5e6c <__swbuf_r+0x78>
    5e10:	686c      	ldr	r4, [r5, #4]
    5e12:	69a3      	ldr	r3, [r4, #24]
    5e14:	60a3      	str	r3, [r4, #8]
    5e16:	89a3      	ldrh	r3, [r4, #12]
    5e18:	071b      	lsls	r3, r3, #28
    5e1a:	d531      	bpl.n	5e80 <__swbuf_r+0x8c>
    5e1c:	6923      	ldr	r3, [r4, #16]
    5e1e:	2b00      	cmp	r3, #0
    5e20:	d02e      	beq.n	5e80 <__swbuf_r+0x8c>
    5e22:	6823      	ldr	r3, [r4, #0]
    5e24:	6922      	ldr	r2, [r4, #16]
    5e26:	b2f7      	uxtb	r7, r6
    5e28:	1a98      	subs	r0, r3, r2
    5e2a:	6963      	ldr	r3, [r4, #20]
    5e2c:	b2f6      	uxtb	r6, r6
    5e2e:	4298      	cmp	r0, r3
    5e30:	db05      	blt.n	5e3e <__swbuf_r+0x4a>
    5e32:	0021      	movs	r1, r4
    5e34:	0028      	movs	r0, r5
    5e36:	f7ff fb1d 	bl	5474 <_fflush_r>
    5e3a:	2800      	cmp	r0, #0
    5e3c:	d126      	bne.n	5e8c <__swbuf_r+0x98>
    5e3e:	68a3      	ldr	r3, [r4, #8]
    5e40:	3001      	adds	r0, #1
    5e42:	3b01      	subs	r3, #1
    5e44:	60a3      	str	r3, [r4, #8]
    5e46:	6823      	ldr	r3, [r4, #0]
    5e48:	1c5a      	adds	r2, r3, #1
    5e4a:	6022      	str	r2, [r4, #0]
    5e4c:	701f      	strb	r7, [r3, #0]
    5e4e:	6963      	ldr	r3, [r4, #20]
    5e50:	4298      	cmp	r0, r3
    5e52:	d004      	beq.n	5e5e <__swbuf_r+0x6a>
    5e54:	89a3      	ldrh	r3, [r4, #12]
    5e56:	07db      	lsls	r3, r3, #31
    5e58:	d51a      	bpl.n	5e90 <__swbuf_r+0x9c>
    5e5a:	2e0a      	cmp	r6, #10
    5e5c:	d118      	bne.n	5e90 <__swbuf_r+0x9c>
    5e5e:	0021      	movs	r1, r4
    5e60:	0028      	movs	r0, r5
    5e62:	f7ff fb07 	bl	5474 <_fflush_r>
    5e66:	2800      	cmp	r0, #0
    5e68:	d012      	beq.n	5e90 <__swbuf_r+0x9c>
    5e6a:	e00f      	b.n	5e8c <__swbuf_r+0x98>
    5e6c:	4b0a      	ldr	r3, [pc, #40]	; (5e98 <__swbuf_r+0xa4>)
    5e6e:	429c      	cmp	r4, r3
    5e70:	d101      	bne.n	5e76 <__swbuf_r+0x82>
    5e72:	68ac      	ldr	r4, [r5, #8]
    5e74:	e7cd      	b.n	5e12 <__swbuf_r+0x1e>
    5e76:	4b09      	ldr	r3, [pc, #36]	; (5e9c <__swbuf_r+0xa8>)
    5e78:	429c      	cmp	r4, r3
    5e7a:	d1ca      	bne.n	5e12 <__swbuf_r+0x1e>
    5e7c:	68ec      	ldr	r4, [r5, #12]
    5e7e:	e7c8      	b.n	5e12 <__swbuf_r+0x1e>
    5e80:	0021      	movs	r1, r4
    5e82:	0028      	movs	r0, r5
    5e84:	f000 f820 	bl	5ec8 <__swsetup_r>
    5e88:	2800      	cmp	r0, #0
    5e8a:	d0ca      	beq.n	5e22 <__swbuf_r+0x2e>
    5e8c:	2601      	movs	r6, #1
    5e8e:	4276      	negs	r6, r6
    5e90:	0030      	movs	r0, r6
    5e92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5e94:	00008750 	.word	0x00008750
    5e98:	00008770 	.word	0x00008770
    5e9c:	00008730 	.word	0x00008730

00005ea0 <_write_r>:
    5ea0:	b570      	push	{r4, r5, r6, lr}
    5ea2:	0005      	movs	r5, r0
    5ea4:	0008      	movs	r0, r1
    5ea6:	0011      	movs	r1, r2
    5ea8:	2200      	movs	r2, #0
    5eaa:	4c06      	ldr	r4, [pc, #24]	; (5ec4 <_write_r+0x24>)
    5eac:	6022      	str	r2, [r4, #0]
    5eae:	001a      	movs	r2, r3
    5eb0:	f7fd fb92 	bl	35d8 <_write>
    5eb4:	1c43      	adds	r3, r0, #1
    5eb6:	d103      	bne.n	5ec0 <_write_r+0x20>
    5eb8:	6823      	ldr	r3, [r4, #0]
    5eba:	2b00      	cmp	r3, #0
    5ebc:	d000      	beq.n	5ec0 <_write_r+0x20>
    5ebe:	602b      	str	r3, [r5, #0]
    5ec0:	bd70      	pop	{r4, r5, r6, pc}
    5ec2:	46c0      	nop			; (mov r8, r8)
    5ec4:	20003120 	.word	0x20003120

00005ec8 <__swsetup_r>:
    5ec8:	4b36      	ldr	r3, [pc, #216]	; (5fa4 <__swsetup_r+0xdc>)
    5eca:	b570      	push	{r4, r5, r6, lr}
    5ecc:	681d      	ldr	r5, [r3, #0]
    5ece:	0006      	movs	r6, r0
    5ed0:	000c      	movs	r4, r1
    5ed2:	2d00      	cmp	r5, #0
    5ed4:	d005      	beq.n	5ee2 <__swsetup_r+0x1a>
    5ed6:	69ab      	ldr	r3, [r5, #24]
    5ed8:	2b00      	cmp	r3, #0
    5eda:	d102      	bne.n	5ee2 <__swsetup_r+0x1a>
    5edc:	0028      	movs	r0, r5
    5ede:	f7ff fb37 	bl	5550 <__sinit>
    5ee2:	4b31      	ldr	r3, [pc, #196]	; (5fa8 <__swsetup_r+0xe0>)
    5ee4:	429c      	cmp	r4, r3
    5ee6:	d10f      	bne.n	5f08 <__swsetup_r+0x40>
    5ee8:	686c      	ldr	r4, [r5, #4]
    5eea:	230c      	movs	r3, #12
    5eec:	5ee2      	ldrsh	r2, [r4, r3]
    5eee:	b293      	uxth	r3, r2
    5ef0:	0719      	lsls	r1, r3, #28
    5ef2:	d42d      	bmi.n	5f50 <__swsetup_r+0x88>
    5ef4:	06d9      	lsls	r1, r3, #27
    5ef6:	d411      	bmi.n	5f1c <__swsetup_r+0x54>
    5ef8:	2309      	movs	r3, #9
    5efa:	2001      	movs	r0, #1
    5efc:	6033      	str	r3, [r6, #0]
    5efe:	3337      	adds	r3, #55	; 0x37
    5f00:	4313      	orrs	r3, r2
    5f02:	81a3      	strh	r3, [r4, #12]
    5f04:	4240      	negs	r0, r0
    5f06:	bd70      	pop	{r4, r5, r6, pc}
    5f08:	4b28      	ldr	r3, [pc, #160]	; (5fac <__swsetup_r+0xe4>)
    5f0a:	429c      	cmp	r4, r3
    5f0c:	d101      	bne.n	5f12 <__swsetup_r+0x4a>
    5f0e:	68ac      	ldr	r4, [r5, #8]
    5f10:	e7eb      	b.n	5eea <__swsetup_r+0x22>
    5f12:	4b27      	ldr	r3, [pc, #156]	; (5fb0 <__swsetup_r+0xe8>)
    5f14:	429c      	cmp	r4, r3
    5f16:	d1e8      	bne.n	5eea <__swsetup_r+0x22>
    5f18:	68ec      	ldr	r4, [r5, #12]
    5f1a:	e7e6      	b.n	5eea <__swsetup_r+0x22>
    5f1c:	075b      	lsls	r3, r3, #29
    5f1e:	d513      	bpl.n	5f48 <__swsetup_r+0x80>
    5f20:	6b61      	ldr	r1, [r4, #52]	; 0x34
    5f22:	2900      	cmp	r1, #0
    5f24:	d008      	beq.n	5f38 <__swsetup_r+0x70>
    5f26:	0023      	movs	r3, r4
    5f28:	3344      	adds	r3, #68	; 0x44
    5f2a:	4299      	cmp	r1, r3
    5f2c:	d002      	beq.n	5f34 <__swsetup_r+0x6c>
    5f2e:	0030      	movs	r0, r6
    5f30:	f7fe ffc0 	bl	4eb4 <_free_r>
    5f34:	2300      	movs	r3, #0
    5f36:	6363      	str	r3, [r4, #52]	; 0x34
    5f38:	2224      	movs	r2, #36	; 0x24
    5f3a:	89a3      	ldrh	r3, [r4, #12]
    5f3c:	4393      	bics	r3, r2
    5f3e:	81a3      	strh	r3, [r4, #12]
    5f40:	2300      	movs	r3, #0
    5f42:	6063      	str	r3, [r4, #4]
    5f44:	6923      	ldr	r3, [r4, #16]
    5f46:	6023      	str	r3, [r4, #0]
    5f48:	2308      	movs	r3, #8
    5f4a:	89a2      	ldrh	r2, [r4, #12]
    5f4c:	4313      	orrs	r3, r2
    5f4e:	81a3      	strh	r3, [r4, #12]
    5f50:	6923      	ldr	r3, [r4, #16]
    5f52:	2b00      	cmp	r3, #0
    5f54:	d10b      	bne.n	5f6e <__swsetup_r+0xa6>
    5f56:	21a0      	movs	r1, #160	; 0xa0
    5f58:	2280      	movs	r2, #128	; 0x80
    5f5a:	89a3      	ldrh	r3, [r4, #12]
    5f5c:	0089      	lsls	r1, r1, #2
    5f5e:	0092      	lsls	r2, r2, #2
    5f60:	400b      	ands	r3, r1
    5f62:	4293      	cmp	r3, r2
    5f64:	d003      	beq.n	5f6e <__swsetup_r+0xa6>
    5f66:	0021      	movs	r1, r4
    5f68:	0030      	movs	r0, r6
    5f6a:	f7ff fbaf 	bl	56cc <__smakebuf_r>
    5f6e:	2301      	movs	r3, #1
    5f70:	89a2      	ldrh	r2, [r4, #12]
    5f72:	4013      	ands	r3, r2
    5f74:	d011      	beq.n	5f9a <__swsetup_r+0xd2>
    5f76:	2300      	movs	r3, #0
    5f78:	60a3      	str	r3, [r4, #8]
    5f7a:	6963      	ldr	r3, [r4, #20]
    5f7c:	425b      	negs	r3, r3
    5f7e:	61a3      	str	r3, [r4, #24]
    5f80:	2000      	movs	r0, #0
    5f82:	6923      	ldr	r3, [r4, #16]
    5f84:	4283      	cmp	r3, r0
    5f86:	d1be      	bne.n	5f06 <__swsetup_r+0x3e>
    5f88:	230c      	movs	r3, #12
    5f8a:	5ee2      	ldrsh	r2, [r4, r3]
    5f8c:	0613      	lsls	r3, r2, #24
    5f8e:	d5ba      	bpl.n	5f06 <__swsetup_r+0x3e>
    5f90:	2340      	movs	r3, #64	; 0x40
    5f92:	4313      	orrs	r3, r2
    5f94:	81a3      	strh	r3, [r4, #12]
    5f96:	3801      	subs	r0, #1
    5f98:	e7b5      	b.n	5f06 <__swsetup_r+0x3e>
    5f9a:	0792      	lsls	r2, r2, #30
    5f9c:	d400      	bmi.n	5fa0 <__swsetup_r+0xd8>
    5f9e:	6963      	ldr	r3, [r4, #20]
    5fa0:	60a3      	str	r3, [r4, #8]
    5fa2:	e7ed      	b.n	5f80 <__swsetup_r+0xb8>
    5fa4:	200001a8 	.word	0x200001a8
    5fa8:	00008750 	.word	0x00008750
    5fac:	00008770 	.word	0x00008770
    5fb0:	00008730 	.word	0x00008730

00005fb4 <_close_r>:
    5fb4:	2300      	movs	r3, #0
    5fb6:	b570      	push	{r4, r5, r6, lr}
    5fb8:	4c06      	ldr	r4, [pc, #24]	; (5fd4 <_close_r+0x20>)
    5fba:	0005      	movs	r5, r0
    5fbc:	0008      	movs	r0, r1
    5fbe:	6023      	str	r3, [r4, #0]
    5fc0:	f7fd fb44 	bl	364c <_close>
    5fc4:	1c43      	adds	r3, r0, #1
    5fc6:	d103      	bne.n	5fd0 <_close_r+0x1c>
    5fc8:	6823      	ldr	r3, [r4, #0]
    5fca:	2b00      	cmp	r3, #0
    5fcc:	d000      	beq.n	5fd0 <_close_r+0x1c>
    5fce:	602b      	str	r3, [r5, #0]
    5fd0:	bd70      	pop	{r4, r5, r6, pc}
    5fd2:	46c0      	nop			; (mov r8, r8)
    5fd4:	20003120 	.word	0x20003120

00005fd8 <_fstat_r>:
    5fd8:	2300      	movs	r3, #0
    5fda:	b570      	push	{r4, r5, r6, lr}
    5fdc:	4c06      	ldr	r4, [pc, #24]	; (5ff8 <_fstat_r+0x20>)
    5fde:	0005      	movs	r5, r0
    5fe0:	0008      	movs	r0, r1
    5fe2:	0011      	movs	r1, r2
    5fe4:	6023      	str	r3, [r4, #0]
    5fe6:	f7fd fb34 	bl	3652 <_fstat>
    5fea:	1c43      	adds	r3, r0, #1
    5fec:	d103      	bne.n	5ff6 <_fstat_r+0x1e>
    5fee:	6823      	ldr	r3, [r4, #0]
    5ff0:	2b00      	cmp	r3, #0
    5ff2:	d000      	beq.n	5ff6 <_fstat_r+0x1e>
    5ff4:	602b      	str	r3, [r5, #0]
    5ff6:	bd70      	pop	{r4, r5, r6, pc}
    5ff8:	20003120 	.word	0x20003120

00005ffc <_isatty_r>:
    5ffc:	2300      	movs	r3, #0
    5ffe:	b570      	push	{r4, r5, r6, lr}
    6000:	4c06      	ldr	r4, [pc, #24]	; (601c <_isatty_r+0x20>)
    6002:	0005      	movs	r5, r0
    6004:	0008      	movs	r0, r1
    6006:	6023      	str	r3, [r4, #0]
    6008:	f7fd fb28 	bl	365c <_isatty>
    600c:	1c43      	adds	r3, r0, #1
    600e:	d103      	bne.n	6018 <_isatty_r+0x1c>
    6010:	6823      	ldr	r3, [r4, #0]
    6012:	2b00      	cmp	r3, #0
    6014:	d000      	beq.n	6018 <_isatty_r+0x1c>
    6016:	602b      	str	r3, [r5, #0]
    6018:	bd70      	pop	{r4, r5, r6, pc}
    601a:	46c0      	nop			; (mov r8, r8)
    601c:	20003120 	.word	0x20003120

00006020 <_lseek_r>:
    6020:	b570      	push	{r4, r5, r6, lr}
    6022:	0005      	movs	r5, r0
    6024:	0008      	movs	r0, r1
    6026:	0011      	movs	r1, r2
    6028:	2200      	movs	r2, #0
    602a:	4c06      	ldr	r4, [pc, #24]	; (6044 <_lseek_r+0x24>)
    602c:	6022      	str	r2, [r4, #0]
    602e:	001a      	movs	r2, r3
    6030:	f7fd fb16 	bl	3660 <_lseek>
    6034:	1c43      	adds	r3, r0, #1
    6036:	d103      	bne.n	6040 <_lseek_r+0x20>
    6038:	6823      	ldr	r3, [r4, #0]
    603a:	2b00      	cmp	r3, #0
    603c:	d000      	beq.n	6040 <_lseek_r+0x20>
    603e:	602b      	str	r3, [r5, #0]
    6040:	bd70      	pop	{r4, r5, r6, pc}
    6042:	46c0      	nop			; (mov r8, r8)
    6044:	20003120 	.word	0x20003120

00006048 <memchr>:
    6048:	b2c9      	uxtb	r1, r1
    604a:	1882      	adds	r2, r0, r2
    604c:	4290      	cmp	r0, r2
    604e:	d101      	bne.n	6054 <memchr+0xc>
    6050:	2000      	movs	r0, #0
    6052:	4770      	bx	lr
    6054:	7803      	ldrb	r3, [r0, #0]
    6056:	428b      	cmp	r3, r1
    6058:	d0fb      	beq.n	6052 <memchr+0xa>
    605a:	3001      	adds	r0, #1
    605c:	e7f6      	b.n	604c <memchr+0x4>
	...

00006060 <_read_r>:
    6060:	b570      	push	{r4, r5, r6, lr}
    6062:	0005      	movs	r5, r0
    6064:	0008      	movs	r0, r1
    6066:	0011      	movs	r1, r2
    6068:	2200      	movs	r2, #0
    606a:	4c06      	ldr	r4, [pc, #24]	; (6084 <_read_r+0x24>)
    606c:	6022      	str	r2, [r4, #0]
    606e:	001a      	movs	r2, r3
    6070:	f7fd fa90 	bl	3594 <_read>
    6074:	1c43      	adds	r3, r0, #1
    6076:	d103      	bne.n	6080 <_read_r+0x20>
    6078:	6823      	ldr	r3, [r4, #0]
    607a:	2b00      	cmp	r3, #0
    607c:	d000      	beq.n	6080 <_read_r+0x20>
    607e:	602b      	str	r3, [r5, #0]
    6080:	bd70      	pop	{r4, r5, r6, pc}
    6082:	46c0      	nop			; (mov r8, r8)
    6084:	20003120 	.word	0x20003120
    6088:	00000dd6 	.word	0x00000dd6
    608c:	00000e0a 	.word	0x00000e0a
    6090:	00000f88 	.word	0x00000f88
    6094:	00000df8 	.word	0x00000df8
    6098:	00000e12 	.word	0x00000e12
    609c:	00000e1a 	.word	0x00000e1a
    60a0:	00000df8 	.word	0x00000df8
    60a4:	00000e22 	.word	0x00000e22
    60a8:	00000df8 	.word	0x00000df8
    60ac:	00000df8 	.word	0x00000df8
    60b0:	00000df8 	.word	0x00000df8
    60b4:	00000df8 	.word	0x00000df8
    60b8:	00000df8 	.word	0x00000df8
    60bc:	00000df8 	.word	0x00000df8
    60c0:	00000df8 	.word	0x00000df8
    60c4:	00000df8 	.word	0x00000df8
    60c8:	00000df8 	.word	0x00000df8
    60cc:	00000df8 	.word	0x00000df8
    60d0:	00000df8 	.word	0x00000df8
    60d4:	00000df8 	.word	0x00000df8
    60d8:	00000df8 	.word	0x00000df8
    60dc:	00000e2a 	.word	0x00000e2a
    60e0:	00000e32 	.word	0x00000e32
    60e4:	00000df8 	.word	0x00000df8
    60e8:	00000e3a 	.word	0x00000e3a
    60ec:	00000e42 	.word	0x00000e42
    60f0:	00000df8 	.word	0x00000df8
    60f4:	00000e4a 	.word	0x00000e4a
    60f8:	00000df8 	.word	0x00000df8
    60fc:	00000df8 	.word	0x00000df8
    6100:	00000e52 	.word	0x00000e52
    6104:	00000e5a 	.word	0x00000e5a
    6108:	00000e62 	.word	0x00000e62
    610c:	00000e6c 	.word	0x00000e6c
    6110:	00000e76 	.word	0x00000e76
    6114:	00000e7e 	.word	0x00000e7e
    6118:	00000e86 	.word	0x00000e86
    611c:	00000e8e 	.word	0x00000e8e
    6120:	00000e98 	.word	0x00000e98
    6124:	00000ee2 	.word	0x00000ee2
    6128:	00000eec 	.word	0x00000eec
    612c:	00000ef4 	.word	0x00000ef4
    6130:	00000efc 	.word	0x00000efc
    6134:	00000f06 	.word	0x00000f06
    6138:	00000f10 	.word	0x00000f10
    613c:	00000f18 	.word	0x00000f18
    6140:	00000f20 	.word	0x00000f20
    6144:	00000f28 	.word	0x00000f28
    6148:	00000f32 	.word	0x00000f32
    614c:	00000f7e 	.word	0x00000f7e
    6150:	000018da 	.word	0x000018da
    6154:	000018e0 	.word	0x000018e0
    6158:	000018e6 	.word	0x000018e6
    615c:	000018f2 	.word	0x000018f2
    6160:	000018f8 	.word	0x000018f8
    6164:	000018fe 	.word	0x000018fe
    6168:	80000000 	.word	0x80000000
    616c:	84000400 	.word	0x84000400
    6170:	80100010 	.word	0x80100010
    6174:	c6180410 	.word	0xc6180410
    6178:	f8008410 	.word	0xf8008410
    617c:	ffe007e0 	.word	0xffe007e0
    6180:	f81f001f 	.word	0xf81f001f
    6184:	ffff07ff 	.word	0xffff07ff
    6188:	000b0000 	.word	0x000b0000
    618c:	00150010 	.word	0x00150010
    6190:	001f001a 	.word	0x001f001a
    6194:	02eb02e0 	.word	0x02eb02e0
    6198:	02f5001d 	.word	0x02f5001d
    619c:	02ff02fa 	.word	0x02ff02fa
    61a0:	042b0420 	.word	0x042b0420
    61a4:	04350430 	.word	0x04350430
    61a8:	043f043a 	.word	0x043f043a
    61ac:	056b0560 	.word	0x056b0560
    61b0:	05750570 	.word	0x05750570
    61b4:	057f057a 	.word	0x057f057a
    61b8:	06ab06a0 	.word	0x06ab06a0
    61bc:	06b506b0 	.word	0x06b506b0
    61c0:	06bf06ba 	.word	0x06bf06ba
    61c4:	07eb07e0 	.word	0x07eb07e0
    61c8:	07f507f0 	.word	0x07f507f0
    61cc:	07ff07fa 	.word	0x07ff07fa
    61d0:	580b5800 	.word	0x580b5800
    61d4:	58155810 	.word	0x58155810
    61d8:	581f581a 	.word	0x581f581a
    61dc:	5aeb5ae0 	.word	0x5aeb5ae0
    61e0:	5af55af0 	.word	0x5af55af0
    61e4:	5aff5afa 	.word	0x5aff5afa
    61e8:	5c2b5c20 	.word	0x5c2b5c20
    61ec:	5c355c30 	.word	0x5c355c30
    61f0:	5c3f5c3a 	.word	0x5c3f5c3a
    61f4:	5d6b5d60 	.word	0x5d6b5d60
    61f8:	5d755d70 	.word	0x5d755d70
    61fc:	5d7f5d7a 	.word	0x5d7f5d7a
    6200:	5eab5ea0 	.word	0x5eab5ea0
    6204:	5eb55eb0 	.word	0x5eb55eb0
    6208:	5ebf5eba 	.word	0x5ebf5eba
    620c:	5feb5fe0 	.word	0x5feb5fe0
    6210:	5ff55ff0 	.word	0x5ff55ff0
    6214:	5fff5ffa 	.word	0x5fff5ffa
    6218:	800b8000 	.word	0x800b8000
    621c:	80158010 	.word	0x80158010
    6220:	801f801a 	.word	0x801f801a
    6224:	82eb82e0 	.word	0x82eb82e0
    6228:	82f582f0 	.word	0x82f582f0
    622c:	82ff82fa 	.word	0x82ff82fa
    6230:	842b8420 	.word	0x842b8420
    6234:	84358430 	.word	0x84358430
    6238:	843f843a 	.word	0x843f843a
    623c:	856b8560 	.word	0x856b8560
    6240:	85758570 	.word	0x85758570
    6244:	857f857a 	.word	0x857f857a
    6248:	86ab86a0 	.word	0x86ab86a0
    624c:	86b586b0 	.word	0x86b586b0
    6250:	86bf86ba 	.word	0x86bf86ba
    6254:	87eb87e0 	.word	0x87eb87e0
    6258:	87f587f0 	.word	0x87f587f0
    625c:	87ff87fa 	.word	0x87ff87fa
    6260:	a80ba800 	.word	0xa80ba800
    6264:	a815a810 	.word	0xa815a810
    6268:	a81fa81a 	.word	0xa81fa81a
    626c:	aaebaae0 	.word	0xaaebaae0
    6270:	aaf5aaf0 	.word	0xaaf5aaf0
    6274:	aaffaafa 	.word	0xaaffaafa
    6278:	ac2bac20 	.word	0xac2bac20
    627c:	0566ac30 	.word	0x0566ac30
    6280:	ac3fac3a 	.word	0xac3fac3a
    6284:	ad6bad60 	.word	0xad6bad60
    6288:	ad75ad70 	.word	0xad75ad70
    628c:	ad7fad7a 	.word	0xad7fad7a
    6290:	aeabaea0 	.word	0xaeabaea0
    6294:	aeb5aeb0 	.word	0xaeb5aeb0
    6298:	aebfaeba 	.word	0xaebfaeba
    629c:	afebafe0 	.word	0xafebafe0
    62a0:	aff5aff0 	.word	0xaff5aff0
    62a4:	afffaffa 	.word	0xafffaffa
    62a8:	d00bd000 	.word	0xd00bd000
    62ac:	d015d010 	.word	0xd015d010
    62b0:	d01fd01a 	.word	0xd01fd01a
    62b4:	d2ebd2e0 	.word	0xd2ebd2e0
    62b8:	d2f5d2f0 	.word	0xd2f5d2f0
    62bc:	d2ffd2fa 	.word	0xd2ffd2fa
    62c0:	d42bd420 	.word	0xd42bd420
    62c4:	d435d430 	.word	0xd435d430
    62c8:	d43fd43a 	.word	0xd43fd43a
    62cc:	d56bd560 	.word	0xd56bd560
    62d0:	d575d570 	.word	0xd575d570
    62d4:	d57fd57a 	.word	0xd57fd57a
    62d8:	d6abd6a0 	.word	0xd6abd6a0
    62dc:	d6b5d6b0 	.word	0xd6b5d6b0
    62e0:	d6bfd6ba 	.word	0xd6bfd6ba
    62e4:	d7ebd7e0 	.word	0xd7ebd7e0
    62e8:	d7f5d7f0 	.word	0xd7f5d7f0
    62ec:	d7ffd7fa 	.word	0xd7ffd7fa
    62f0:	f80bf800 	.word	0xf80bf800
    62f4:	f815f810 	.word	0xf815f810
    62f8:	f81ff81a 	.word	0xf81ff81a
    62fc:	faebfae0 	.word	0xfaebfae0
    6300:	faf5faf0 	.word	0xfaf5faf0
    6304:	fafffafa 	.word	0xfafffafa
    6308:	fc2bfc20 	.word	0xfc2bfc20
    630c:	fc35fc30 	.word	0xfc35fc30
    6310:	fc3ffc3a 	.word	0xfc3ffc3a
    6314:	fd6bfd60 	.word	0xfd6bfd60
    6318:	fd75fd70 	.word	0xfd75fd70
    631c:	fd7ffd7a 	.word	0xfd7ffd7a
    6320:	feabfea0 	.word	0xfeabfea0
    6324:	feb5feb0 	.word	0xfeb5feb0
    6328:	febffeba 	.word	0xfebffeba
    632c:	ffebffe0 	.word	0xffebffe0
    6330:	fff5fff0 	.word	0xfff5fff0
    6334:	fffffffa 	.word	0xfffffffa
    6338:	10820841 	.word	0x10820841
    633c:	212418e3 	.word	0x212418e3
    6340:	39c73186 	.word	0x39c73186
    6344:	4a694228 	.word	0x4a694228
    6348:	630c5acb 	.word	0x630c5acb
    634c:	73ae632c 	.word	0x73ae632c
    6350:	8c518410 	.word	0x8c518410
    6354:	9cf394b2 	.word	0x9cf394b2
    6358:	b596ad55 	.word	0xb596ad55
    635c:	c638bdf7 	.word	0xc638bdf7
    6360:	dedbd69a 	.word	0xdedbd69a
    6364:	ef7de73c 	.word	0xef7de73c
    6368:	6e305b1b 	.word	0x6e305b1b
    636c:	00000008 	.word	0x00000008
    6370:	00000008 	.word	0x00000008
    6374:	00000008 	.word	0x00000008
    6378:	00000008 	.word	0x00000008
    637c:	00000008 	.word	0x00000008
    6380:	00000008 	.word	0x00000008
    6384:	00000008 	.word	0x00000008
    6388:	00000008 	.word	0x00000008
    638c:	00000010 	.word	0x00000010
    6390:	00000010 	.word	0x00000010
    6394:	00000010 	.word	0x00000010
    6398:	00000010 	.word	0x00000010
    639c:	00000010 	.word	0x00000010
    63a0:	00000010 	.word	0x00000010
    63a4:	00000010 	.word	0x00000010
    63a8:	00000010 	.word	0x00000010
    63ac:	00000018 	.word	0x00000018
    63b0:	00000018 	.word	0x00000018
    63b4:	00000018 	.word	0x00000018
    63b8:	00000018 	.word	0x00000018
    63bc:	00000018 	.word	0x00000018
    63c0:	00000018 	.word	0x00000018
    63c4:	00000018 	.word	0x00000018
    63c8:	00000018 	.word	0x00000018
    63cc:	00000020 	.word	0x00000020
    63d0:	00000020 	.word	0x00000020
    63d4:	00000020 	.word	0x00000020
    63d8:	00000020 	.word	0x00000020
    63dc:	00000020 	.word	0x00000020
    63e0:	00000020 	.word	0x00000020
    63e4:	00000020 	.word	0x00000020
    63e8:	00000020 	.word	0x00000020
    63ec:	00000028 	.word	0x00000028
    63f0:	00000028 	.word	0x00000028
    63f4:	00000028 	.word	0x00000028
    63f8:	00000028 	.word	0x00000028
    63fc:	00000028 	.word	0x00000028
    6400:	00000028 	.word	0x00000028
    6404:	00000028 	.word	0x00000028
    6408:	00000028 	.word	0x00000028
    640c:	00000030 	.word	0x00000030
    6410:	00000030 	.word	0x00000030
    6414:	00000030 	.word	0x00000030
    6418:	00000030 	.word	0x00000030
    641c:	00000030 	.word	0x00000030
    6420:	00000030 	.word	0x00000030
    6424:	00000030 	.word	0x00000030
    6428:	00000030 	.word	0x00000030
    642c:	00000038 	.word	0x00000038
    6430:	00000038 	.word	0x00000038
    6434:	00000038 	.word	0x00000038
    6438:	00000038 	.word	0x00000038
    643c:	00000038 	.word	0x00000038
    6440:	00000038 	.word	0x00000038
    6444:	00000038 	.word	0x00000038
    6448:	00000038 	.word	0x00000038
    644c:	00000040 	.word	0x00000040
    6450:	00000040 	.word	0x00000040
    6454:	00000040 	.word	0x00000040
    6458:	00000040 	.word	0x00000040
    645c:	00000040 	.word	0x00000040
    6460:	00000040 	.word	0x00000040
    6464:	00000040 	.word	0x00000040
    6468:	00000040 	.word	0x00000040
    646c:	00000048 	.word	0x00000048
    6470:	00000048 	.word	0x00000048
    6474:	00000048 	.word	0x00000048
    6478:	00000048 	.word	0x00000048
    647c:	00000048 	.word	0x00000048
    6480:	00000048 	.word	0x00000048
    6484:	00000048 	.word	0x00000048
    6488:	00000048 	.word	0x00000048
    648c:	0000004f 	.word	0x0000004f
    6490:	0000004f 	.word	0x0000004f
    6494:	0000004f 	.word	0x0000004f
    6498:	0000004f 	.word	0x0000004f
    649c:	0000004f 	.word	0x0000004f
    64a0:	0000004f 	.word	0x0000004f
    64a4:	0000004f 	.word	0x0000004f
    64a8:	0000004f 	.word	0x0000004f

000064ac <DECIDreturn>:
    64ac:	363f5b1b 00000063 0000001b 0000005b     .[?6c.......[...
    64bc:	00000052                                R...

000064c0 <csiEscCodes>:
    64c0:	43424140 47464544 4c4b4a48 6158504d     @ABCDEFGHJKLMPXa
    64d0:	66656463 6d6c6867 7372716e 00006075     cdefghlmnqrsu`..
    64e0:	00007325 000a000a 00140014 00000014     %s..............
    64f0:	000a017c 000a017c 00140186 00140000     |...|...........
    6500:	0122000a 00140186 01220190 0122000a     .."......."...".
    6510:	012c0014 0122017c 012c0186 012c0014     ..,.|."...,...,.
    6520:	0136017c 001e0000 00280032 00320000     |.6.....2.(...2.
    6530:	003c0032 001e0050 00280118 00280046     2.<.P.....(.F.(.
    6540:	00be0050 00be0050 00c80118 00280118     P...P.........(.
    6550:	00be0122 00460000 00500032 005a0000     ".....F.2.P...Z.
    6560:	00640032 006e0000 00780032 00820000     2.d...n.2.x.....
    6570:	008c0032 00960000 00a00032 00aa0000     2.......2.......
    6580:	00b40032 00be0000 00c80032 00c8012c     2.......2...,...
    6590:	00d20172 00dc001e 00e60172 00f0001e     r.......r.......
    65a0:	00fa0172 0104001e 010e0172 0118005a     r.......r...Z...
    65b0:	0122012c 82be50b4 8cbe82aa 64963c8c     ,."..P.......<.d
    65c0:	64dc3cd2 a08c9682 aadca08c a0e696dc     .<.d............
    65d0:	50f03c78 5a78466e aaaa3c96 a0dc3cc8     x<.PnFxZ.<...<..
    65e0:	aae6a0d2 6e617254 69722073 73746867     ....Trans rights
    65f0:	65726120 6d756820 72206e61 74686769      are human right
    6600:	00000073 355e3331 31202b20 20355e36     s...13^5 + 16^5 
    6610:	3731203d 0000355e 69746552 616c7563     = 17^5..Reticula
    6620:	676e6974 6c705320 73656e69 00000000     ting Splines....
    6630:	6c6f6976 65636e65 726f772e 0000736b     violence.works..
    6640:	2b206953 00425020 6c6c694b 6c694220     Si + PB.Kill Bil
    6650:	6e6f696c 65726961 61282073 5420646e     lionaires (and T
    6660:	6c6c6972 616e6f69 29657269 00000000     rillionaire)....
    6670:	65746e49 74736572 206e6920 68636574     Interest in tech
    6680:	6f6c6f6e 69207967 6f6e2073 20612074     nology is not a 
    6690:	73726570 6c616e6f 00797469 50203031     personality.10 P
    66a0:	544e4952 52484320 30322824 2b352e35     RINT CHR$(205.5+
    66b0:	28444e52 3b292931 47203a20 204f544f     RND(1)); : GOTO 
    66c0:	00003031 67206f4e 2e73646f 206f4e20     10..No gods. No 
    66d0:	7473616d 2e737265 206f4e20 65747865     masters. No exte
    66e0:	6c616e72 62696c20 69726172 002e7365     rnal libraries..
    66f0:	6c6c694b 7a614e20 00007369 6e616954     Kill Nazis..Tian
    6700:	656d6e61 7153206e 65726175 38393120     anmen Square 198
    6710:	00000039 72656d41 20616369 20736177     9...America was 
    6720:	6e756f66 20646564 73206e6f 6576616c     founded on slave
    6730:	00007972 72656854 73692065 6c6e6f20     ry..There is onl
    6740:	61632079 61746970 6e61206c 616c2064     y capital and la
    6750:	00726f62 6f636e45 67617275 59532065     bor.Encourage SY
    6760:	54454d4d 20434952 73616c63 61772073     MMETRIC class wa
    6770:	72616672 00000065 6f676f56 6f50206e     rfare...Vogon Po
    6780:	79727465 00000000 694e2041 54206563     etry....A Nice T
    6790:	00005954 78696e55 6f706520 6d206863     TY..Unix epoch m
    67a0:	73756e69 46783020 61642046 00007379     inus 0xFF days..
    67b0:	3d202069 35783020 35373366 20666439     i  = 0x5f3759df 
    67c0:	2028202d 3e3e2069 29203120 0000003b     - ( i >> 1 );...
    67d0:	61657053 7274206b 20687475 70206f74     Speak truth to p
    67e0:	7265776f 2749203b 7573206d 74206572     ower; I'm sure t
    67f0:	27796568 6c206c6c 65747369 6874206e     hey'll listen th
    6800:	74207369 2e656d69 00000000 63666544     is time.....Defc
    6810:	73276e6f 6e616320 656c6563 32282064     on's canceled (2
    6820:	29303230 00000000 73746152 7473656e     020)....Ratsnest
    6830:	6f4e203a 6e696874 6f542067 216f4420     : Nothing To Do!
    6840:	00000000 68207449 36207361 656b2039     ....It has 69 ke
    6850:	002e7379 61636542 20657375 342d5456     ys..Because VT-4
    6860:	77203032 61207361 6165726c 74207964     20 was already t
    6870:	6e656b61 00000000 706d6f43 73736572     aken....Compress
    6880:	206e6f69 6f676c61 68746972 6162206d     ion algorithm ba
    6890:	20646573 42206e6f 28205042 37393931     sed on BBP (1997
    68a0:	00000029 63616554 65682068 68746c61     )...Teach health
    68b0:	736e6920 6e617275 70206563 69766f72      insurance provi
    68c0:	73726564 206f7420 65646f63 0000002e     ders to code....
    68d0:	6e617247 65432064 6172746e 6148206c     Grand Central Ha
    68e0:	54206b63 50206568 656e616c 00000074     ck The Planet...
    68f0:	69466957 20736920 20746f6e 65726977     WiFi is not wire
    6900:	7373656c 68744520 656e7265 00002174     less Ethernet!..
    6910:	6d6d7544 68742079 20636369 65696c63     Dummy thicc clie
    6920:	0000746e 694e2041 54206563 202e5954     nt..A Nice TTY. 
    6930:	4f206e41 6f43204b 7475706d 002e7265     An OK Computer..
    6940:	65545355 6964656c 6e6f646c 00736369     USTeledildonics.
    6950:	696c6f53 69726164 69207974 6f6e2073     Solidarity is no
    6960:	20612074 2077656e 6d617266 726f7765     t a new framewor
    6970:	0000006b 61657242 616f6264 6e696472     k...Breadboardin
    6980:	73492067 746f4e20 43204120 656d6972     g Is Not A Crime
    6990:	00000000 2066664f 6f207962 6520656e     ....Off by one e
    69a0:	726f7272 72612073 6f632065 6e6f6d6d     rrors are common
    69b0:	00000000 00001f9e 000021ea 000021ea     .........!...!..
    69c0:	000021ea 000021ea 000021ea 000021ea     .!...!...!...!..
    69d0:	000021ea 000021ea 000021ea 000021ea     .!...!...!...!..
    69e0:	000021ea 000021ea 000021ea 000021ea     .!...!...!...!..
    69f0:	000021ea 00001f86 000021ea 000021ea     .!.......!...!..
    6a00:	000021ea 000021ea 000021ea 000021ea     .!...!...!...!..
    6a10:	000021ea 000021ea 000021ea 000021ea     .!...!...!...!..
    6a20:	000021ea 000021ea 000021ea 000021ea     .!...!...!...!..
    6a30:	000021ea 00001f96 000021ea 000021ea     .!.......!...!..
    6a40:	000021ea 000021ea 000021ea 000021ea     .!...!...!...!..
    6a50:	000021ea 000021ea 000021ea 000021ea     .!...!...!...!..
    6a60:	000021ea 000021ea 000021ea 000021ea     .!...!...!...!..
    6a70:	000021ea 00001f8e 00001fa6 00001f6e     .!..........n...
    6a80:	00001f7e 00001f76 00000002 00000003     ~...v...........
    6a90:	00000028 00000029 00000004 00000005     (...)...........
    6aa0:	00000006 00000007 00000020 00000021     ........ ...!...
    6ab0:	00000022 00000023 00000024 00000025     "...#...$...%...
    6ac0:	00000026 00000027 00000008 00000009     &...'...........
    6ad0:	0000000a 0000000b 42000800 42000c00     ...........B...B
    6ae0:	42001000 42001400 42001800 42001c00     ...B...B...B...B
    6af0:	00002d22 00002d1e 00002d1e 00002d84     "-...-...-...-..
    6b00:	00002d84 00002d36 00002d28 00002d3c     .-..6-..(-..<-..
    6b10:	00002d72 00002f44 00002f24 00002f24     r-..D/..$/..$/..
    6b20:	00002fb0 00002f36 00002f52 00002f28     ./..6/..R/..(/..
    6b30:	00002f60 00002fa0                       `/.../..

00006b38 <CodePage437>:
	...
    6e70:	01000000 06186080 18608001 60800106     .....`....`....`
    6e80:	80010000 00000060 00000000 66986106     ....`........a.f
    6e90:	98618619 00000000 00000000 00000000     ..a.............
    6ea0:	00000000 98610600 fb8f1966 8f1966fe     ......a.f....f..
    6eb0:	1966fefb 00986186 00000000 80010000     ..f..a..........
    6ec0:	891f7e60 1f7e6082 7e649081 6080811f     `~...`~...d~...`
    6ed0:	00000000 04000000 29a60823 1820c106     ........#..).. .
    6ee0:	98200304 324c1165 00000008 00000000     .. .e.L2........
    6ef0:	84e08107 10420821 5a081e78 87208216     ....!.B.x..Z.. .
    6f00:	0000f6d9 00000000 30c00000 00030618     ...........0....
    6f10:	000000c0 00000000 00000000 00000000     ................
    6f20:	40000000 03020810 0c30c000 08c00003     ...@......0.....
    6f30:	10400002 00000000 01000000 02084000     ..@..........@..
    6f40:	06186000 18608001 00010208 00000040     .`....`.....@...
    6f50:	00000000 42000000 90408210 40c23fff     .......B..@..?.@
    6f60:	80104290 00000000 00000000 00000000     .B..............
    6f70:	80000208 e0bfff20 02082080 00000000     .... .... ......
	...
    6f90:	18000000 c0000306 00001040 00000000     ........@.......
    6fa0:	00000000 ff000000 0000e0bf 00000000     ................
	...
    6fc4:	030e3800 0000e080 00000000 08200000     .8............ .
    6fd4:	80000104 02041020 10408000 00000208     .... .....@.....
    6fe4:	00000000 e0030000 cc1863f8 b0c1061b     .........c......
    6ff4:	63061b6c f8e0c318 00000000 00000000     l..c............
    7004:	1b3c70c0 0c30c004 30c00003 e107030c     .p<...0....0....
    7014:	000000f8 00000000 c1f8e107 061860b0     .............`..
    7024:	0187030e 0f30c0c0 0000fefb 00000000     ......0.........
    7034:	fefb0f00 60c00003 80030e30 b0810618     .......`0.......
    7044:	00f8e167 00000000 40000000 03070c30     g..........@0...
    7054:	31649040 04fefb0f 10400001 00000000     @.d1......@.....
    7064:	0f000000 30c0fefb c1f8e30f 061860b0     .......0.....`..
    7074:	e167a081 000000f8 00000000 60f8e003     ..g............`
    7084:	00030c18 1b8c3ffe 67b0c106 0000f8e1     .....?.....g....
    7094:	00000000 fefb0f00 20608001 00010408     ..........` ....
    70a4:	0c302080 00c00003 00000000 e0030000     . 0.............
    70b4:	6cb0c1f8 0f3e061b c1061b8c f8e063b0     ...l..>......c..
    70c4:	00000000 07000000 b0c1f8e1 7d0e3b6c     ............l;.}
    70d4:	0618609f e1c70003 000000f0 00000000     .`..............
    70e4:	38000000 e080030e 00000000 030e3800     ...8.........8..
    70f4:	0000e080 00000000 00000000 80030e38     ............8...
    7104:	000000e0 0e380000 40c00003 00000010     ......8....@....
    7114:	30000000 03030c0c 30c0c000 0cc00003     ...0.......0....
    7124:	0c300003 00000000 00000000 00000000     ..0.............
    7134:	00fefb0f fefb0f00 00000000 00000000     ................
    7144:	00000000 3000030c 30c0000c c0c00003     .......0...0....
    7154:	0c0c3030 00000003 00000000 f8e10700     00..............
    7164:	6060b0c1 01061818 00006080 00608001     ..``.....`....`.
    7174:	00000000 e1070000 6cb0c1f8 b4d33edb     ...........l.>..
    7184:	c036fbec f8e10730 00000000 00000000     ..6.0...........
    7194:	0d367080 c18c3186 fefb6fb0 1b6cb0c1     .p6..1...o....l.
    71a4:	00000006 00000000 61f8e30f 86196698     ...........a.f..
    71b4:	19861f7e 6f986186 0000f8e3 00000000     ~....a.o........
    71c4:	f8e00300 036c9861 0c30c000 98610003     ....a.l...0...a.
    71d4:	00f8e063 00000000 c30f0000 861966f0     c............f..
    71e4:	98618631 668c1966 f0c38f19 00000000     1.a.f..f........
    71f4:	0f000000 30c0fefb fc00030c 00030c3f     .......0....?...
    7204:	fb0f30c0 000000fe 00000000 c0fefb0f     .0..............
    7214:	00030c30 030c3ffc 0c30c000 00000003     0....?....0.....
    7224:	00000000 f8e00300 036c9861 0c30c000     ........a.l...0.
    7234:	98611e7b 00f8e063 00000000 1b0c0000     {.a.c...........
    7244:	6cb0c106 bfff061b c1061bec 061b6cb0     ...l.........l..
    7254:	00000000 07000000 0618f8e1 18608001     ..............`.
    7264:	60800106 e1070618 000000f8 00000000     ...`............
    7274:	067ef801 18608001 60800106 8731c618     ..~...`....`..1.
    7284:	0000f0c1 00000000 061b0c00 838d31c6     .............1..
    7294:	0d38e060 31c66083 00061b8c 00000000     `.8..`.1........
    72a4:	030c0000 0c30c000 30c00003 c000030c     ......0....0....
    72b4:	fefb0f30 00000000 0c000000 bde38e1b     0...............
    72c4:	c976dbed 061b6cb2 1b6cb0c1 00000006     ..v..l....l.....
    72d4:	00000000 e1861b0c 661b6dbc 5b6cb3c9     .........m.f..l[
    72e4:	ecb0c31e 0000061b 00000000 f8e00300     ................
    72f4:	1b6cb0e3 6cb0c106 b8c1061b 00f8e0e3     ..l....l........
    7304:	00000000 e30f0000 6cb0c1f8 3ffe061b     ...........l...?
    7314:	c000038c 00030c30 00000000 07000000     ....0...........
    7324:	b0c1f8e1 c1061b6c 36db6cb0 d98731c6     ....l....l.6.1..
    7334:	000000f6 00000000 c1f8e30f 061b6cb0     .............l..
    7344:	638c3ffe cc30c318 0000061b 00000000     .?.c..0.........
    7354:	f8e10700 036cb0c1 801f7e00 b0c10618     ......l..~......
    7364:	00f8e167 00000000 fb0f0000 000208fe     g...............
    7374:	02082080 08208000 20800002 00000000     . .... .... ....
    7384:	0c000000 b0c1061b c1061b6c 061b6cb0     ........l....l..
    7394:	e063b0c1 000000f8 00000000 c1061b0c     ..c.............
    73a4:	8c3166b0 60c31863 810d36d8 000020c0     .f1.c..`.6... ..
    73b4:	00000000 061b0c00 1b6cb0c1 6db2c906     ..........l....m
    73c4:	b5d576db 008c796f 00000000 1b0c0000     .v..oy..........
    73d4:	c3186306 060cf860 63d8e003 061bcc18     .c..`......c....
    73e4:	00000000 0c000000 1863061b 1cd860c3     ..........c..`..
    73f4:	20c00107 80000208 00000020 00000000     ... .... .......
    7404:	03fefb0f 1060c000 0103060c 0f30c0c0     ......`.......0.
    7414:	0000fefb 00000000 f8e00300 00030c30     ............0...
    7424:	030c30c0 0c30c000 00f8e003 00000000     .0....0.........
    7434:	01060000 010c3080 030c6080 03186000     .....0...`...`..
    7444:	0618c000 00000000 07000000 030cf0c1     ................
    7454:	0c30c000 30c00003 c107030c 000000f0     ..0....0........
    7464:	00000000 36708000 8c31860d 0060b0c1     ......p6..1...`.
	...
    7490:	00fefb0f 00000000 80030000 00030ce0     ................
    74a0:	00001860 00000000 00000000 00000000     `...............
	...
    74b8:	01fcf003 fef86380 f823b0c0 000000fe     .....c....#.....
    74c8:	00000000 c000030c fcf30d30 0b6cb8e1     ........0.....l.
    74d8:	6fb8e102 00007cf3 00000000 00000000     ...o.|..........
    74e8:	e1070000 6cb0c1f8 30c00003 00fef907     .......l...0....
    74f8:	00000000 18000000 67800106 b0c3f6d9     ...........g....
    7508:	c3061bec f6d9e7b0 00000000 00000000     ................
    7518:	00000000 c1f8e107 fefb6fb0 f10730c0     .........o...0..
    7528:	000000fc 00000000 3138e000 c000638c     ..........81.c..
    7538:	00033ffc 030c30c0 0000c000 00000000     .?...0..........
    7548:	00000000 d9070000 8731c6f6 30c0f0c1     ..........1....0
    7558:	c3f8e107 f8e1e7b0 030c0000 0d30c000     ..............0.
    7568:	b8e178e3 c1061b6c 061b6cb0 00000000     .x..l....l......
    7578:	01000000 00006080 18e08003 60800106     .....`.........`
    7588:	e1070618 000000f8 00000000 00186000     .............`..
    7598:	18600000 60800106 8c010618 31c61863     ..`....`....c..1
    75a8:	00f0c187 00030c00 638c30c0 0f36cc30     .........0.c0.6.
    75b8:	33ccc083 000c330c 00000000 c0030000     ...3.3..........
    75c8:	00030cf0 030c30c0 0c30c000 f8e00303     .....0....0.....
	...
    75e4:	e70c330c 669b6dbf 1b6cb0c1 00000006     .3...m.f..l.....
	...
    75fc:	f8e20b00 1b6cb8e1 6cb0c106 0000061b     ......l....l....
	...
    7614:	e1070000 cc30c3f8 30c30c33 00f8e1c7     ......0.3..0....
	...
    762c:	0b000000 b0c1f8e2 be061b6c 0002882f     ........l.../...
    763c:	02082080 00000000 00000000 c1fae803     . ..............
    764c:	061b6cb0 08a08f3e 20800002 00000208     .l..>...... ....
    765c:	00000000 7ce20800 036cbcf1 0c30c000     .......|..l...0.
    766c:	00000003 00000000 00000000 e1070000     ................
    767c:	0730c0f8 8001f8e1 00f8e36f 00000000     ..0.....o.......
    768c:	00030000 0f0c30c0 0c30f8e3 33c00003     .....0....0....3
    769c:	30c0c00c 00000000 00000000 00000000     ...0............
    76ac:	c30c330c 0c33cc30 d9c730c3 000000f6     .3..0.3..0......
	...
    76c4:	02020000 30e6b8c1 01073ed8 000020c0     .......0.>... ..
	...
    76dc:	1b0c0000 6cb0c106 b5d5769b 008c3166     .......l.v..f1..
	...
    76f4:	08000000 1b441823 6ce08003 08620c11     ....#.D....l..b.
	...
    7710:	c618630c 18638c31 60801f7e 873bc618     .c..1.c.~..`..;.
    7720:	0000f0c1 00000000 fefb0f00 c0c00003     ................
    7730:	0f0c3030 0000fefb 00000000 1e780000     00............x.
    7740:	40000208 000e3810 02081040 001e7800     ...@.8..@....x..
    7750:	00000000 80010000 01061860 06186080     ........`....`..
    7760:	18608001 60800106 00000000 0f000000     ..`....`........
    7770:	0208c003 0cc00003 c0000303 030f0208     ................
    7780:	000000c0 00000000 d9c61907 1c736cb3     .............ls.
	...
    77b8:	e0030000 6c9861f8 30c00003 6100030c     .....a.l...0...a
    77c8:	f8e06398 00000608 00000000 00669801     .c............f.
    77d8:	c30c330c 0c33cc30 d9c730c3 000000f6     .3..0.3..0......
    77e8:	00000000 0c180000 f8e10700 fb6fb0c1     ..............o.
    77f8:	0730c0fe 0000fcf1 00000000 10000000     ..0.............
    7808:	f003000a 638001fc b0c0fef8 00fef823     .......c....#...
	...
    7820:	030033cc 8001fcf0 c0fef863 fef823b0     .3......c....#..
	...
    7838:	000c6000 01fcf003 fef86380 f823b0c0     .`.......c....#.
    7848:	000000fe 03000000 0c482001 fcf00300     ......... H.....
    7858:	f8638001 23b0c0fe 0000fef8 00000000     ..c....#........
    7868:	00000000 e1070000 6cb0c1f8 30c00003     ...........l...0
    7878:	04fef907 00000003 00000000 07001420     ............ ...
    7888:	b0c1f8e1 c0fefb6f fcf10730 00000000     ....o...0.......
    7898:	00000000 00669801 c1f8e107 fefb6fb0     ......f......o..
    78a8:	f10730c0 000000fc 00000000 18c00000     .0..............
    78b8:	f8e10700 fb6fb0c1 0730c0fe 0000fcf1     ......o...0.....
    78c8:	00000000 98610600 80030000 010618e0     ......a.........
    78d8:	06186080 00f8e107 00000000 00000000     .`..............
    78e8:	03002840 0618e080 18608001 f8e10706     @(........`.....
	...
    7900:	0018c000 18e08003 60800106 e1070618     ...........`....
    7910:	000000f8 18630000 367080c0 8c31860d     ......c...p6..1.
    7920:	fb6fb0c1 6cb0c1fe 0000061b 1c000000     ..o....l........
    7930:	70c08108 31860d36 6fb0c18c b0c1fefb     ...p6..1...o....
    7940:	00061b6c 00000000 fb0f0606 0c30c0fe     l.............0.
    7950:	3ffc0003 c000030c fefb0f30 00000000     ...?....0.......
	...
    7968:	1dfe7907 fedb2786 f90733cc 000000ee     .y...'...3......
    7978:	00000000 367ef800 9861860d e3efb1c7     ......~6..a.....
    7988:	8c31c6f8 00001e7b 00000000 20000000     ..1.{.......... 
    7998:	e1070014 cc30c3f8 30c30c33 00f8e1c7     ......0.3..0....
    79a8:	00000000 01000000 07006698 30c3f8e1     .........f.....0
    79b8:	c30c33cc f8e1c730 00000000 00000000     .3..0...........
    79c8:	0018c000 c3f8e107 0c33cc30 e1c730c3     ........0.3..0..
    79d8:	000000f8 00000000 14200000 0c330c00     .......... ...3.
    79e8:	33cc30c3 c730c30c 0000f6d9 00000000     .0.3..0.........
    79f8:	60000000 330c000c cc30c30c 30c30c33     ...`...3..0.3..0
    7a08:	00f6d9c7 00000000 01000000 0c006698     .............f..
    7a18:	31c61863 7e18638c 1860801f c1873bc6     c..1.c.~..`..;..
    7a28:	800d36f0 383ef800 c1061bec 061b6cb0     .6....>8.....l..
    7a38:	e0e3b8c1 000000f8 0c330000 c10603c0     ..........3.....
    7a48:	061b6cb0 1b6cb0c1 63b0c106 0000f8e0     .l....l....c....
    7a58:	00000000 20800002 1b8c1f7e 0c32c826     ....... ~...&.2.
    7a68:	1f7e069b 08208080 00000000 c0010000     ..~... .........
    7a78:	461873f8 3e608001 6080810f fefb0f18     .s.F..`>...`....
    7a88:	00000000 0c000000 08630419 1c506083     ..........c..`P.
    7a98:	20e00302 80800f08 00000020 00000000     ... .... .......
    7aa8:	c1f8e30f f81b6cb0 830d30fe 0d36d878     .....l...0..x.6.
    7ab8:	000038e3 00000000 3ce00000 98638e3f     .8.........<?.c.
    7ac8:	833ffee0 1c70c000 60800106 00000018     ..?...p....`....
    7ad8:	00000000 03000c18 8001fcf0 c0fef863     ............c...
    7ae8:	fef823b0 00000000 00000000 000060c0     .#...........`..
    7af8:	18e08003 60800106 e1070618 000000f8     .......`........
    7b08:	00000000 18300000 f8e10700 33cc30c3     ......0......0.3
    7b18:	c730c30c 0000f8e1 00000000 30000000     ..0............0
    7b28:	330c0018 cc30c30c 30c30c33 00f6d9c7     ...3..0.3..0....
	...
    7b40:	0b001998 b8e1f8e2 c1061b6c 061b6cb0     ........l....l..
    7b50:	00000000 8c0c4c00 b8e1061b c9461b6d     .....L......m.F.
    7b60:	165b6cb2 1becb0c3 00000006 00000000     .l[.............
    7b70:	1e08c003 00e08308 000080ff 00000000     ................
	...
    7b88:	d8c00100 c0810d22 0080ff00 00000000     ...."...........
	...
    7ba4:	00030c00 030c0000 3030c000 061b0c0c     ..........00....
    7bb4:	00c00f3f 00000000 00000000 ff000000     ?...............
    7bc4:	0003ecbf 00000000 00000000 00000000     ................
	...
    7bdc:	18e0bfff 00000006 00000000 00000000     ................
    7bec:	30c00003 c000030c e0bfff00 0c1f3800     ...0.........8..
    7bfc:	183060c0 0000c00f c0000300 00030c30     .`0.........0...
    7c0c:	bfff00c0 668001e0 fc618619 60800106     .......f..a....`
    7c1c:	00000000 06180000 18000000 60800106     ...............`
    7c2c:	80010618 00061860 00000000 00000000     ....`...........
    7c3c:	90200100 80042448 00001290 00000000     .. .H$..........
	...
    7c54:	40020000 20010948 00244890 00000000     ...@H.. .H$.....
    7c64:	00000000 48024092 09004900 80240024     .....@.H.I..$.$.
    7c74:	92009004 00480240 24090049 42529200     ....@.H.I..$..RB
    7c84:	0949494a 24242529 929094a4 4a425292     JII.)%$$.....RBJ
    7c94:	29094949 ad6d2425 b6b6b5bd dbdad6f6     II.)%$m.........
    7ca4:	6f6b5bdb bdad6d6d f6b6b6b5 08dbdad6     .[komm..........
    7cb4:	20800002 80000208 00020820 02082080     ... .... .... ..
    7cc4:	08208000 20800002 80000208 00020820     .. .... .... ...
    7cd4:	3e082080 08208000 20800002 80000208     . .>.. .... ....
    7ce4:	00020820 02082080 f8208000 20800f02      .... .... .... 
    7cf4:	80000208 00020820 05142080 14504001     .... .... ...@P.
    7d04:	50400105 40013d14 01051450 05145040     ..@P.=.@P...@P..
    7d14:	00504001 00000000 00000000 013f0000     .@P...........?.
    7d24:	05145040 14504001 50400105 00000000     @P...@P...@P....
    7d34:	00000000 02f80000 0820800f 20800002     .......... .... 
    7d44:	80000208 01051420 05145040 f4504001     .... ...@P...@P.
    7d54:	50400f01 40010514 01051450 05145040     ..@P...@P...@P..
    7d64:	14504001 50400105 40010514 01051450     .@P...@P...@P...
    7d74:	05145040 00504001 00000000 00000000     @P...@P.........
    7d84:	0f01fc00 05145040 14504001 50400105     ....@P...@P...@P
    7d94:	40010514 01051450 01f45040 0000c00f     ...@P...@P......
	...
    7dac:	01051400 05145040 14504001 0000003f     ....@P...@P.?...
	...
    7dc4:	02080000 08208000 20800002 800f02f8     ...... .... ....
	...
    7de8:	003e0000 02082080 08208000 20800002     ..>.. .... .... 
    7df8:	80000208 00020820 03082080 000000f0     .... .... ......
	...
    7e10:	00020800 02082080 08208000 0000f03f     ..... .... .?...
	...
    7e34:	80f03f00 00020820 02082080 08208000     .?.. .... .... .
    7e44:	20800002 80000208 f0030820 02082080     ... .... .... ..
    7e54:	08208000 20800002 00000000 00000000     .. .... ........
    7e64:	3f000000 000000f0 00000000 00000000     ...?............
    7e74:	00020800 02082080 08208000 2080f03f     ..... .... .?.. 
    7e84:	80000208 00020820 02082080 08208000     .... .... .... .
    7e94:	20800002 fc00c20f 00020820 02082080     ... .... .... ..
    7ea4:	14208000 50400105 40010514 f1051450     .. ...@P...@P...
    7eb4:	05145040 14504001 50400105 40010514     @P...@P...@P...@
    7ec4:	01051450 c4175040 0000fc01 00000000     P...@P..........
	...
    7ee0:	1f000000 507c01c4 40010514 01051450     ......|P...@P...
    7ef0:	05145040 14504001 50400105 fc0fc0f7     @P...@P...@P....
	...
    7f14:	0fc0ff00 0514507c 14504001 50400105     ....|P...@P...@P
    7f24:	40010514 01051450 c4175040 14507c01     ...@P...@P...|P.
    7f34:	50400105 40010514 00000050 00000000     ..@P...@P.......
    7f44:	ff000000 00fc0fc0 00000000 00000000     ................
    7f54:	05140000 14504001 50400105 7c0fc0f7     .....@P...@P...|
    7f64:	01051450 05145040 08504001 20800002     P...@P...@P.... 
    7f74:	80000208 0fc0ff20 000000fc 00000000     .... ...........
    7f84:	00000000 40010514 01051450 3f145040     .......@P...@P.?
    7f94:	000000f0 00000000 00000000 00000000     ................
    7fa4:	00000000 ff000000 20fc0fc0 80000208     ........... ....
    7fb4:	00020820 00002080 00000000 00000000      .... ..........
    7fc4:	40f13f00 01051450 05145040 14504001     .?.@P...@P...@P.
    7fd4:	50400105 40010514 f0071450 00000000     ..@P...@P.......
	...
    7fec:	80000208 00020820 c20f2080 0000fc00     .... .... ......
	...
    800c:	0f000000 20fc00c2 80000208 00020820     ....... .... ...
    801c:	00002080 00000000 00000000 40f10700     . .............@
    802c:	01051450 05145040 14504001 50400105     P...@P...@P...@P
    803c:	40010514 f13f1450 05145040 14504001     ...@P.?.@P...@P.
    804c:	50400105 80000208 00020820 c2ff2080     ..@P.... .... ..
    805c:	0820fc0f 20800002 80000208 00020820     .. .... .... ...
    806c:	02082080 08208000 0000003e 00000000     . .... .>.......
	...
    808c:	80f00300 00020820 02082080 ff208000     .... .... .... .
    809c:	ffffffff ffffffff ffffffff ffffffff     ................
    80ac:	ffffffff ffffffff 00000000 00000000     ................
    80bc:	3f000000 ffffffff ffffffff ffffffff     ...?............
    80cc:	0f3ef8ff 3ef8e083 f8e0830f e0830f3e     ..>....>....>...
    80dc:	830f3ef8 0f3ef8e0 c30fe083 0f3ffcf0     .>....>.......?.
    80ec:	3ffcf0c3 fcf0c30f f0c30f3f c30f3ffc     ...?....?....?..
    80fc:	ff3ffcf0 ffffffff ffffffff f0ffffff     ..?.............
	...
    8120:	8f380000 c208234c e2d08330 00000000     ..8.L#..0.......
    8130:	00000000 193c0000 7c982186 8c61061f     ......<..!.|..a.
    8140:	63c61861 000000f8 00000000 ff000000     a..c............
    8150:	8c31c61f 01061863 06186080 0000c003     ..1.c....`......
	...
    816c:	c69fff00 18638c31 008e33c6 00000000     ....1.c..3......
    817c:	fb0f0000 06b080fe 0618c000 c0800103     ................
    818c:	fefb2f20 00000000 00000000 00000000      /..............
    819c:	c3fef907 0c33cc30 e1c730c3 000000f8     ....0.3..0......
	...
    81b4:	0c330c00 33cc30c3 cf30c30c 30c0f6db     ..3..0.3..0....0
    81c4:	0000000c 00000000 e30c0000 618e7bbc     .............{.a
    81d4:	06186080 00608001 00000000 00000000     .`....`.........
    81e4:	c33f0000 30c3f8c1 c30c33cc f0e0c730     ..?....0.3..0...
    81f4:	000000ff 03000000 1863f8e0 ff061bcc     ..........c.....
    8204:	061becbf e0c31863 000000f8 00000000     ....c...........
    8214:	e3fce103 061b6cb0 1b6cb0c1 c698e38e     .....l....l.....
    8224:	00008e33 00000000 fef80300 e1070318     3...............
    8234:	cc30c3f8 30c30c33 00f8e1c7 00000000     ..0.3..0........
    8244:	00000000 02000000 a2885421 88228a28     ........!T..(.".
    8254:	00204295 00000000 00000000 07000000     .B .............
    8264:	860e7367 628a28a3 7367b8b0 00000070     gs...(.b..gsp...
    8274:	00000000 60f8e003 00030c18 030c3ffc     .......`.....?..
    8284:	03186000 0000f8e0 00000000 00000000     .`..............
    8294:	1b8c0f3e 6cb0c106 b0c1061b c1061b6c     >......l....l...
    82a4:	000060b0 00000000 0f000000 0000fefb     .`..............
    82b4:	00fefb0f fefb0f00 00000000 00000000     ................
    82c4:	02080000 ff208000 2080e0bf 03000208     ...... .... ....
    82d4:	000000fe 00000000 3000030c 30c0000c     ...........0...0
    82e4:	c0c00003 0c0c3030 3f000003 0000f0cf     ....00.....?....
    82f4:	0c300000 0003030c 0330c0c0 030cc000     ..0.......0.....
    8304:	000c3000 00f0cf3f 88600307 00020820     .0..?.....`. ...
    8314:	02082080 08208000 20800002 80000208     . .... .... ....
    8324:	00020820 02082080 08208000 20800002      .... .... .... 
    8334:	80000208 09240820 00008001 18000000     .... .$.........
    8344:	00000006 00e0bfff 00061800 00000000     ................
	...
    835c:	8a0f1c00 0f1c073e 00073e8a 00000000     ....>....>......
	...
    8374:	01092460 00000080 00000000 00000000     `$..............
	...
    8398:	80030e38 00000000 00000000 00000000     8...............
	...
    83b0:	01000000 00006080 00000000 0f000000     .....`..........
    83c0:	40000104 0d020820 0c504001 00800002     ...@ ....@P.....
    83d0:	00000000 f0c30b00 638c31c6 00000018     .........1.c....
	...
    83ec:	83070000 03070cf0 3fe0c081 00000000     ...........?....
	...
    8410:	c30f3ffc 0f3ffcf0 0000f0c3 00000000     .?....?.........
	...
    8438:	0009001b 67753700 71312c6a 38000000     .....7ugj,1q...8
    8448:	006b6869 7a007732 6f303900 65332e6c     ihk.2w.z.90ol.3e
    8458:	00007861 2f3b702d 63737234 5b3d0020     ax..-p;/4rsc .=[
    8468:	74350027 006e7664 5c0d5d27 62667936     '.5tdvn.'].\6yfb
    8478:	0008006d 00000a7f 0009001b 47552600     m............&UG
    8488:	51213c4a 2a000000 004b4849 5a005740     J<!Q...*IHK.@W.Z
    8498:	4f292800 45233e4c 00005841 3f3a505f     .()OL>#EAX.._P:?
    84a8:	43535224 7b2b0020 54250022 004e5644     $RSC .+{".%TDVN.
    84b8:	7c0d7d7e 4246595e 0008004d 00000a7f     ~}.|^YFBM.......
    84c8:	0009001b 47553700 51312c4a 38000000     .....7UGJ,1Q...8
    84d8:	004b4849 5a005732 4f303900 45332e4c     IHK.2W.Z.90OL.3E
    84e8:	00005841 2f3b502d 43535234 5b3d0020     AX..-P;/4RSC .=[
    84f8:	54350027 004e5644 5c0d5d27 42465936     '.5TDVN.'].\6YFB
    8508:	0008004d 00000a7f 0009001b 07150000     M...............
    8518:	1100000a 00000000 000b0809 1a001700     ................
    8528:	0f000000 0500000a 00001801 1f001000     ................
    8538:	03131200 1b000000 14000000 000e1604     ................
    8548:	1c001d1e 02061900 0008000d 00000a00     ................

00008558 <kb_col>:
    8558:	00010000 00020000 00040000 00080000     ................
    8568:	00100000 00200000 08000000              ...... .....

00008574 <kb_col_index>:
    8574:	00000010 00000011 00000012 00000013     ................
    8584:	00000014 00000015 0000001b              ............

00008590 <kb_row>:
    8590:	00000004 00000008 00000010 00000020     ............ ...
    85a0:	00000040 00000080 00000400 00000800     @...............
    85b0:	00001000 00002000                       ..... ..

000085b8 <kb_row_index>:
    85b8:	00000002 00000003 00000004 00000005     ................
    85c8:	00000006 00000007 0000000a 0000000b     ................
    85d8:	0000000c 0000000d                       ........

000085e0 <beelzebub.12965>:
    85e0:	2e002d00 44003200 88005300 f300b600     .-...2.D.S......
    85f0:	64012201 d4019201 08020702 5f023402     .".d.........4._
    8600:	94027802 bb02a602 db02ca02 f902e802     .x..............
    8610:	7f031f03                                ....

00008614 <belial.12962>:
    8614:	f0f0f0f0 b0b0b0f0 b1b6b6b6 b7b7b1b1     ................
    8624:	b2b2b2b7 bfb8b8b8 b9b3b3b3 b5b5b9b9     ................
    8634:	babac2b5 bcbcbcba bebdbdbd f0f0f0be     ................
    8644:	b1b1f0f0 b8b7b7b6 bcb8b8b8 c9c9bcbc     ................
    8654:	35c9c9c9 0000363a                       ...5:6..

0000865c <lucifer.12964>:
    865c:	0852aa55 0d0d0d01 0d343434 34340d0d     U.R.....444...44
    866c:	00000034 01242424 340f0f0f 08083434     4...$$$....444..
    867c:	24240308 00780024 00007800 52aa5589     ..$$$.x..x...U.R
    868c:	00cc0008 01707005 02030303 02d00000     .....pp.........
    869c:	00505050 00000055                       PPP.U...

000086a4 <mulciber.12963>:
    86a4:	03020100 02010004 00020100 01000201     ................
    86b4:	02010002 00020100 01000201 01000002     ................
    86c4:	02010000 00020100 01000201 03020100     ................
    86d4:	00000004 01000100 01000302 02010002     ................
    86e4:	00000403 00000000 65530d0a 6c616972     ..........Serial
    86f4:	204b4f20 30303639 314e3820 00000d0a      OK 9600 8N1....

00008704 <_global_impure_ptr>:
    8704:	200001ac 33323130 37363534 62613938     ... 0123456789ab
    8714:	66656463 6a696867 6e6d6c6b 7271706f     cdefghijklmnopqr
    8724:	76757473 7a797877 00000000              stuvwxyz....

00008730 <__sf_fake_stderr>:
	...

00008750 <__sf_fake_stdin>:
	...

00008770 <__sf_fake_stdout>:
	...
    8790:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    87a0:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    87b0:	31300046 35343332 39383736 64636261     F.0123456789abcd
    87c0:	00006665                                ef..

000087c4 <_init>:
    87c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    87c6:	46c0      	nop			; (mov r8, r8)
    87c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    87ca:	bc08      	pop	{r3}
    87cc:	469e      	mov	lr, r3
    87ce:	4770      	bx	lr

000087d0 <__init_array_start>:
    87d0:	000000dd 	.word	0x000000dd

000087d4 <_fini>:
    87d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    87d6:	46c0      	nop			; (mov r8, r8)
    87d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    87da:	bc08      	pop	{r3}
    87dc:	469e      	mov	lr, r3
    87de:	4770      	bx	lr

000087e0 <__fini_array_start>:
    87e0:	000000b5 	.word	0x000000b5
