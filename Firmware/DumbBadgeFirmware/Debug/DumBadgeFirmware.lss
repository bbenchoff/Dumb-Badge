
DumBadgeFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006860  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001bc  20000000  00006860  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000008fc  200001bc  00006a1c  000201bc  2**2
                  ALLOC
  3 .stack        00002000  20000ab8  00007318  000201bc  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000201bc  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
  6 .debug_info   00037837  00000000  00000000  0002023d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000506b  00000000  00000000  00057a74  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000065ca  00000000  00000000  0005cadf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000006e0  00000000  00000000  000630a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000848  00000000  00000000  00063789  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001e76b  00000000  00000000  00063fd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001284f  00000000  00000000  0008273c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000900f5  00000000  00000000  00094f8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000195c  00000000  00000000  00125080  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
	// Keep the default device state after reset
	SystemCoreClock = __SYSTEM_CLOCK;
       0:	b8 2a 00 20 29 1c 00 00 25 1c 00 00 25 1c 00 00     .*. )...%...%...
	...
	config->stopbits         = USART_STOPBITS_1;
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
	config->baudrate         = 9600;
	config->receiver_enable  = true;
	config->transmitter_enable = true;
	config->clock_polarity_inverted = false;
      2c:	25 1c 00 00 00 00 00 00 00 00 00 00 25 1c 00 00     %...........%...
	config->use_external_clock = false;
	config->ext_clock_freq   = 0;
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
	config->generator_source = GCLK_GENERATOR_0;
      3c:	7d 2e 00 00 25 1c 00 00 25 1c 00 00 25 1c 00 00     }...%...%...%...
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
	config->receive_pulse_length                    = 19;
      4c:	25 1c 00 00 25 1c 00 00 25 1c 00 00 25 1c 00 00     %...%...%...%...
	usart_get_config_defaults(&config_usart);

	config_usart.baudrate    = SERCOMBAUD;
	config_usart.mux_setting = SERCOMMUX;
	config_usart.pinmux_pad0 = SERCOMPAD0;
	config_usart.pinmux_pad1 = SERCOMPAD1;
      5c:	25 1c 00 00 25 1c 00 00 41 0e 00 00 51 0e 00 00     %...%...A...Q...
	config_usart.pinmux_pad2 = SERCOMPAD2;
	config_usart.pinmux_pad3 = SERCOMPAD3;

	while (usart_init(&usart_instance,	 SERCOMMODULE, &config_usart) != STATUS_OK) { }
      6c:	61 0e 00 00 71 0e 00 00 81 0e 00 00 91 0e 00 00     a...q...........
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
      7c:	25 1c 00 00 25 1c 00 00 25 1c 00 00 25 1c 00 00     %...%...%...%...
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	if (usart_init(module, hw, config) == STATUS_OK) {
      8c:	25 1c 00 00 25 1c 00 00 25 1c 00 00 25 1c 00 00     %...%...%...%...
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
      9c:	75 09 00 00 25 1c 00 00 25 1c 00 00 25 1c 00 00     u...%...%...%...
	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
      ac:	25 1c 00 00 00 00 00 00                             %.......

000000b4 <__do_global_dtors_aux>:
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
      ba:	2b00      	cmp	r3, #0
	return (usart_hw->SYNCBUSY.reg);
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
	while (usart_is_syncing(module)) {
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop

	stdio_serial_init(&usart_instance, SERCOMMODULE, &config_usart);
	usart_enable(&usart_instance);
}
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200001bc 	.word	0x200001bc
      d4:	00000000 	.word	0x00000000
      d8:	00006860 	.word	0x00006860

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200001c0 	.word	0x200001c0
     108:	00006860 	.word	0x00006860
     10c:	00006860 	.word	0x00006860
     110:	00000000 	.word	0x00000000

00000114 <drawKare>:
//	graphic in the entire project. Please note this is the most
//	space efficient way to do this; a 40x31 bitmap is 930 bytes,
//	whereas	this is (104*2)+28+20, or 256 bytes.
/*********************************************************************/
void drawKare(int emotion)
{
     114:	b5f0      	push	{r4, r5, r6, r7, lr}
     116:	b0c1      	sub	sp, #260	; 0x104
     118:	0007      	movs	r7, r0
	uint16_t body[104] = {10,10,20,20,20,0,380,10,380,10,390,20,0,
     11a:	22d0      	movs	r2, #208	; 0xd0
     11c:	492d      	ldr	r1, [pc, #180]	; (1d4 <drawKare+0xc0>)
     11e:	a80c      	add	r0, sp, #48	; 0x30
     120:	4b2d      	ldr	r3, [pc, #180]	; (1d8 <drawKare+0xc4>)
     122:	4798      	blx	r3
		80,190,280,200,280,40,290,190,0,70,50,80,0,90,50,100,0,110,
		50,120,0,130,50,140,0,150,50,160,0,170,50,180,0,190,50,200,
		300,200,370,210,30,220,370,230,30,240,370,250,30,260,370,
		270,90,280,300,290};
	
	uint8_t happyTerm[28] = {180,80,190,130,170,130,190,140,140,
     124:	a805      	add	r0, sp, #20
     126:	4b2d      	ldr	r3, [pc, #180]	; (1dc <drawKare+0xc8>)
     128:	001a      	movs	r2, r3
     12a:	3250      	adds	r2, #80	; 0x50
     12c:	0001      	movs	r1, r0
     12e:	ca31      	ldmia	r2!, {r0, r4, r5}
     130:	c131      	stmia	r1!, {r0, r4, r5}
     132:	ca31      	ldmia	r2!, {r0, r4, r5}
     134:	c131      	stmia	r1!, {r0, r4, r5}
     136:	6812      	ldr	r2, [r2, #0]
     138:	600a      	str	r2, [r1, #0]
		60,150,100,210,60,220,100,130,150,140,160,140,160,220,170,
	220,150,230,160};
	
	uint8_t rPiBeret[20] = {120,60,240,80,110,70,120,90,150,
     13a:	336c      	adds	r3, #108	; 0x6c
     13c:	466a      	mov	r2, sp
     13e:	cb13      	ldmia	r3!, {r0, r1, r4}
     140:	c213      	stmia	r2!, {r0, r1, r4}
     142:	cb03      	ldmia	r3!, {r0, r1}
     144:	c203      	stmia	r2!, {r0, r1}
     146:	ac0c      	add	r4, sp, #48	; 0x30
     148:	ae40      	add	r6, sp, #256	; 0x100

	
	
	for(int i = 0; i < 104; i = i+4)
	{
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
     14a:	4d25      	ldr	r5, [pc, #148]	; (1e0 <drawKare+0xcc>)
		((body[i+1]/iSv)+(offsetGraphicY)),
		((body[i+2]/iSv)+(offsetGraphicX)),
		((body[i+3]/iSv)+(offsetGraphicY)));
     14c:	88e3      	ldrh	r3, [r4, #6]
     14e:	105b      	asrs	r3, r3, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
     150:	3396      	adds	r3, #150	; 0x96
		((body[i+2]/iSv)+(offsetGraphicX)),
     152:	88a2      	ldrh	r2, [r4, #4]
     154:	1052      	asrs	r2, r2, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
     156:	322d      	adds	r2, #45	; 0x2d
     158:	32ff      	adds	r2, #255	; 0xff
		((body[i+1]/iSv)+(offsetGraphicY)),
     15a:	8861      	ldrh	r1, [r4, #2]
     15c:	1049      	asrs	r1, r1, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
     15e:	3196      	adds	r1, #150	; 0x96
     160:	8820      	ldrh	r0, [r4, #0]
     162:	1040      	asrs	r0, r0, #1
     164:	302d      	adds	r0, #45	; 0x2d
     166:	30ff      	adds	r0, #255	; 0xff
     168:	47a8      	blx	r5
     16a:	3408      	adds	r4, #8
	for(int i = 0; i < 104; i = i+4)
     16c:	42b4      	cmp	r4, r6
     16e:	d1ed      	bne.n	14c <drawKare+0x38>
	}
	switch(emotion)
     170:	2f00      	cmp	r7, #0
     172:	d003      	beq.n	17c <drawKare+0x68>
     174:	2f01      	cmp	r7, #1
     176:	d017      	beq.n	1a8 <drawKare+0x94>
		break;
		case 2:
		//make a sad terminal thing go here
		break;
	}
}
     178:	b041      	add	sp, #260	; 0x104
     17a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     17c:	ac05      	add	r4, sp, #20
     17e:	ae0c      	add	r6, sp, #48	; 0x30
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
     180:	4d17      	ldr	r5, [pc, #92]	; (1e0 <drawKare+0xcc>)
			((happyTerm[i+3]/iSv)+(offsetGraphicY)));
     182:	78e3      	ldrb	r3, [r4, #3]
     184:	105b      	asrs	r3, r3, #1
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
     186:	3396      	adds	r3, #150	; 0x96
			((happyTerm[i+2]/iSv)+(offsetGraphicX)),
     188:	78a2      	ldrb	r2, [r4, #2]
     18a:	1052      	asrs	r2, r2, #1
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
     18c:	322d      	adds	r2, #45	; 0x2d
     18e:	32ff      	adds	r2, #255	; 0xff
			((happyTerm[i+1]/iSv)+(offsetGraphicY)),
     190:	7861      	ldrb	r1, [r4, #1]
     192:	1049      	asrs	r1, r1, #1
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
     194:	3196      	adds	r1, #150	; 0x96
     196:	7820      	ldrb	r0, [r4, #0]
     198:	1040      	asrs	r0, r0, #1
     19a:	302d      	adds	r0, #45	; 0x2d
     19c:	30ff      	adds	r0, #255	; 0xff
     19e:	47a8      	blx	r5
     1a0:	3404      	adds	r4, #4
		for(int i = 0; i < 28; i = i+4)
     1a2:	42a6      	cmp	r6, r4
     1a4:	d1ed      	bne.n	182 <drawKare+0x6e>
     1a6:	e7e7      	b.n	178 <drawKare+0x64>
     1a8:	466c      	mov	r4, sp
     1aa:	ae05      	add	r6, sp, #20
			fillRect((
     1ac:	4d0c      	ldr	r5, [pc, #48]	; (1e0 <drawKare+0xcc>)
			((rPiBeret[i+3]/iSv)+(offsetGraphicY)));
     1ae:	78e3      	ldrb	r3, [r4, #3]
     1b0:	105b      	asrs	r3, r3, #1
			fillRect((
     1b2:	3396      	adds	r3, #150	; 0x96
			((rPiBeret[i+2]/iSv)+(offsetGraphicX)),
     1b4:	78a2      	ldrb	r2, [r4, #2]
     1b6:	1052      	asrs	r2, r2, #1
			fillRect((
     1b8:	322d      	adds	r2, #45	; 0x2d
     1ba:	32ff      	adds	r2, #255	; 0xff
			((rPiBeret[i+1]/iSv)+(offsetGraphicY)),
     1bc:	7861      	ldrb	r1, [r4, #1]
     1be:	1049      	asrs	r1, r1, #1
			fillRect((
     1c0:	3196      	adds	r1, #150	; 0x96
			(rPiBeret[i]/iSv)+(offsetGraphicX)),
     1c2:	7820      	ldrb	r0, [r4, #0]
     1c4:	1040      	asrs	r0, r0, #1
			fillRect((
     1c6:	302d      	adds	r0, #45	; 0x2d
     1c8:	30ff      	adds	r0, #255	; 0xff
     1ca:	47a8      	blx	r5
     1cc:	3404      	adds	r4, #4
		for(int i = 0; i < 20; i = i+4)
     1ce:	42b4      	cmp	r4, r6
     1d0:	d1ed      	bne.n	1ae <drawKare+0x9a>
     1d2:	e7d1      	b.n	178 <drawKare+0x64>
     1d4:	000045f0 	.word	0x000045f0
     1d8:	000033fd 	.word	0x000033fd
     1dc:	00004670 	.word	0x00004670
     1e0:	000029b9 	.word	0x000029b9

000001e4 <splashScreen>:

void splashScreen(void)
{
     1e4:	b5f0      	push	{r4, r5, r6, r7, lr}
     1e6:	46c6      	mov	lr, r8
     1e8:	b500      	push	{lr}
     1ea:	b08a      	sub	sp, #40	; 0x28
	static const char *splashText[32];
	splashText[0] = "Trans rights are human rights";//
     1ec:	4c51      	ldr	r4, [pc, #324]	; (334 <splashScreen+0x150>)
     1ee:	4b52      	ldr	r3, [pc, #328]	; (338 <splashScreen+0x154>)
     1f0:	6023      	str	r3, [r4, #0]
	splashText[1] = "13^5 + 16^5 = 17^5";//
     1f2:	4b52      	ldr	r3, [pc, #328]	; (33c <splashScreen+0x158>)
     1f4:	6063      	str	r3, [r4, #4]
	splashText[2] = "Reticulating Splines";//
     1f6:	4b52      	ldr	r3, [pc, #328]	; (340 <splashScreen+0x15c>)
     1f8:	60a3      	str	r3, [r4, #8]
	splashText[3] = "violence.works";//
     1fa:	4b52      	ldr	r3, [pc, #328]	; (344 <splashScreen+0x160>)
     1fc:	60e3      	str	r3, [r4, #12]
	splashText[4] = "Tabs!";//
     1fe:	4b52      	ldr	r3, [pc, #328]	; (348 <splashScreen+0x164>)
     200:	6123      	str	r3, [r4, #16]
	splashText[5] = "Kill Billionaires (and Trillionaire)";//
     202:	4b52      	ldr	r3, [pc, #328]	; (34c <splashScreen+0x168>)
     204:	6163      	str	r3, [r4, #20]
	splashText[6] = "Interest in technology is not a personality";//
     206:	4b52      	ldr	r3, [pc, #328]	; (350 <splashScreen+0x16c>)
     208:	61a3      	str	r3, [r4, #24]
	splashText[7] = "10 PRINT CHR$(205.5+RND(1)); : GOTO 10";//
     20a:	4b52      	ldr	r3, [pc, #328]	; (354 <splashScreen+0x170>)
     20c:	61e3      	str	r3, [r4, #28]
	splashText[8] = "No gods. No masters. No external libraries.";//
     20e:	4b52      	ldr	r3, [pc, #328]	; (358 <splashScreen+0x174>)
     210:	6223      	str	r3, [r4, #32]
	splashText[9] = "Kill Nazis";//
     212:	4b52      	ldr	r3, [pc, #328]	; (35c <splashScreen+0x178>)
     214:	6263      	str	r3, [r4, #36]	; 0x24
	splashText[10] = "Tiananmen Square 1989";//
     216:	4b52      	ldr	r3, [pc, #328]	; (360 <splashScreen+0x17c>)
     218:	62a3      	str	r3, [r4, #40]	; 0x28
	splashText[11] = "America was founded on slavery";
     21a:	4b52      	ldr	r3, [pc, #328]	; (364 <splashScreen+0x180>)
     21c:	62e3      	str	r3, [r4, #44]	; 0x2c
	splashText[12] = "There is only capital and labor";//
     21e:	4b52      	ldr	r3, [pc, #328]	; (368 <splashScreen+0x184>)
     220:	6323      	str	r3, [r4, #48]	; 0x30
	splashText[13] = "Encourage _symmetric_ class warfare";//
     222:	4b52      	ldr	r3, [pc, #328]	; (36c <splashScreen+0x188>)
     224:	6363      	str	r3, [r4, #52]	; 0x34
	splashText[14] = "$CURRENT_MEME";//
     226:	4b52      	ldr	r3, [pc, #328]	; (370 <splashScreen+0x18c>)
     228:	63a3      	str	r3, [r4, #56]	; 0x38
	splashText[15] = "A Nice TTY";//
     22a:	4b52      	ldr	r3, [pc, #328]	; (374 <splashScreen+0x190>)
     22c:	63e3      	str	r3, [r4, #60]	; 0x3c
	splashText[16] = "Unix epoch minus 0xFF days";//
     22e:	4b52      	ldr	r3, [pc, #328]	; (378 <splashScreen+0x194>)
     230:	6423      	str	r3, [r4, #64]	; 0x40
	splashText[17] = "i  = 0x5f3759df - ( i >> 1 );";//
     232:	4b52      	ldr	r3, [pc, #328]	; (37c <splashScreen+0x198>)
     234:	6463      	str	r3, [r4, #68]	; 0x44
	splashText[18] = "ACAB";//
     236:	4b52      	ldr	r3, [pc, #328]	; (380 <splashScreen+0x19c>)
     238:	64a3      	str	r3, [r4, #72]	; 0x48
	splashText[19] = "Defcon's canceled.";//
     23a:	4b52      	ldr	r3, [pc, #328]	; (384 <splashScreen+0x1a0>)
     23c:	64e3      	str	r3, [r4, #76]	; 0x4c
	splashText[20] = "Ratsnest: Nothing To Do!";//
     23e:	4b52      	ldr	r3, [pc, #328]	; (388 <splashScreen+0x1a4>)
     240:	6523      	str	r3, [r4, #80]	; 0x50
	splashText[21] = "It has 69 keys.";//
     242:	4b52      	ldr	r3, [pc, #328]	; (38c <splashScreen+0x1a8>)
     244:	6563      	str	r3, [r4, #84]	; 0x54
	splashText[22] = "Because VT-420 was already taken";//
     246:	4b52      	ldr	r3, [pc, #328]	; (390 <splashScreen+0x1ac>)
     248:	65a3      	str	r3, [r4, #88]	; 0x58
	splashText[23] = "Compression algorithm based on BBP (1997)";//
     24a:	4b52      	ldr	r3, [pc, #328]	; (394 <splashScreen+0x1b0>)
     24c:	65e3      	str	r3, [r4, #92]	; 0x5c
	splashText[24] = "The source of the Mississippi river is in Pennsylvania.";
     24e:	4b52      	ldr	r3, [pc, #328]	; (398 <splashScreen+0x1b4>)
     250:	6623      	str	r3, [r4, #96]	; 0x60
	splashText[25] = "Offensive hardware";//
     252:	4b52      	ldr	r3, [pc, #328]	; (39c <splashScreen+0x1b8>)
     254:	6663      	str	r3, [r4, #100]	; 0x64
	splashText[26] = "Follow World Pog Federation    @WorldPog";//
     256:	4b52      	ldr	r3, [pc, #328]	; (3a0 <splashScreen+0x1bc>)
     258:	66a3      	str	r3, [r4, #104]	; 0x68
	splashText[27] = "Dummy thicc client";//
     25a:	4b52      	ldr	r3, [pc, #328]	; (3a4 <splashScreen+0x1c0>)
     25c:	66e3      	str	r3, [r4, #108]	; 0x6c
	splashText[28] = "A Nice TTY. An OK Computer.";//
     25e:	4b52      	ldr	r3, [pc, #328]	; (3a8 <splashScreen+0x1c4>)
     260:	6723      	str	r3, [r4, #112]	; 0x70
	splashText[29] = "Ceci n'est pas une Cyberdeck (because it's not a Pelican Case)";//
     262:	4b52      	ldr	r3, [pc, #328]	; (3ac <splashScreen+0x1c8>)
     264:	6763      	str	r3, [r4, #116]	; 0x74
	splashText[30] = "Solidarity is not a new framework";//
     266:	4b52      	ldr	r3, [pc, #328]	; (3b0 <splashScreen+0x1cc>)
     268:	67a3      	str	r3, [r4, #120]	; 0x78
	splashText[31] = "Breadboarding Is Not A Crime";//
     26a:	4b52      	ldr	r3, [pc, #328]	; (3b4 <splashScreen+0x1d0>)
     26c:	67e3      	str	r3, [r4, #124]	; 0x7c
	splashText[32] = "Off by one errors are common";
     26e:	4a52      	ldr	r2, [pc, #328]	; (3b8 <splashScreen+0x1d4>)
     270:	2380      	movs	r3, #128	; 0x80
     272:	50e2      	str	r2, [r4, r3]
	
	const char *textPhrase = splashText[((rand()%32))];
     274:	4b51      	ldr	r3, [pc, #324]	; (3bc <splashScreen+0x1d8>)
     276:	4798      	blx	r3
     278:	17c3      	asrs	r3, r0, #31
     27a:	0edb      	lsrs	r3, r3, #27
     27c:	18c2      	adds	r2, r0, r3
     27e:	201f      	movs	r0, #31
     280:	4010      	ands	r0, r2
     282:	1ac0      	subs	r0, r0, r3
     284:	0080      	lsls	r0, r0, #2
     286:	5904      	ldr	r4, [r0, r4]
	char bootString[40];
	const uint32_t megaHurtz = system_gclk_gen_get_hz(0);
     288:	2000      	movs	r0, #0
     28a:	4b4d      	ldr	r3, [pc, #308]	; (3c0 <splashScreen+0x1dc>)
     28c:	4798      	blx	r3
	itoa(megaHurtz,bootString,10);
     28e:	220a      	movs	r2, #10
     290:	4669      	mov	r1, sp
     292:	4b4c      	ldr	r3, [pc, #304]	; (3c4 <splashScreen+0x1e0>)
     294:	4798      	blx	r3
	//strcpy(bootString, " Hz");

	
	clearScreen();
     296:	4b4c      	ldr	r3, [pc, #304]	; (3c8 <splashScreen+0x1e4>)
     298:	4798      	blx	r3
	setColorRGB(255,255,255);
     29a:	22ff      	movs	r2, #255	; 0xff
     29c:	21ff      	movs	r1, #255	; 0xff
     29e:	20ff      	movs	r0, #255	; 0xff
     2a0:	4b4a      	ldr	r3, [pc, #296]	; (3cc <splashScreen+0x1e8>)
     2a2:	4798      	blx	r3
	
	REG_PORT_DIRTGL1 = PORT_PB31;
     2a4:	2280      	movs	r2, #128	; 0x80
     2a6:	0612      	lsls	r2, r2, #24
     2a8:	4b49      	ldr	r3, [pc, #292]	; (3d0 <splashScreen+0x1ec>)
     2aa:	601a      	str	r2, [r3, #0]
	PORT->Group[1].PINCFG[31].bit.PULLEN = 1;
     2ac:	4b49      	ldr	r3, [pc, #292]	; (3d4 <splashScreen+0x1f0>)
     2ae:	22df      	movs	r2, #223	; 0xdf
     2b0:	5c99      	ldrb	r1, [r3, r2]
     2b2:	2004      	movs	r0, #4
     2b4:	4301      	orrs	r1, r0
     2b6:	5499      	strb	r1, [r3, r2]
	PORT->Group[1].PINCFG[31].bit.INEN = 1;
     2b8:	5c99      	ldrb	r1, [r3, r2]
     2ba:	2002      	movs	r0, #2
     2bc:	4301      	orrs	r1, r0
     2be:	5499      	strb	r1, [r3, r2]
	if((PORT->Group[1].IN.reg & PORT_PB31) != 0)
     2c0:	3a3f      	subs	r2, #63	; 0x3f
     2c2:	589b      	ldr	r3, [r3, r2]
     2c4:	2b00      	cmp	r3, #0
     2c6:	db31      	blt.n	32c <splashScreen+0x148>
		//This is the 'pi' graphic; put some codes
		//here to handle setting up the uarts.
		drawKare(1);
	}
	else
	drawKare(0); //The normal graphic
     2c8:	2000      	movs	r0, #0
     2ca:	4b43      	ldr	r3, [pc, #268]	; (3d8 <splashScreen+0x1f4>)
     2cc:	4798      	blx	r3
	

	
	xCharPos = 40 - (strlen(textPhrase)/2);
     2ce:	0020      	movs	r0, r4
     2d0:	4b42      	ldr	r3, [pc, #264]	; (3dc <splashScreen+0x1f8>)
     2d2:	4698      	mov	r8, r3
     2d4:	4798      	blx	r3
     2d6:	4f42      	ldr	r7, [pc, #264]	; (3e0 <splashScreen+0x1fc>)
     2d8:	0840      	lsrs	r0, r0, #1
     2da:	2528      	movs	r5, #40	; 0x28
     2dc:	1a28      	subs	r0, r5, r0
     2de:	8038      	strh	r0, [r7, #0]
	yCharPos = 16;
     2e0:	4e40      	ldr	r6, [pc, #256]	; (3e4 <splashScreen+0x200>)
     2e2:	2310      	movs	r3, #16
     2e4:	8033      	strh	r3, [r6, #0]
	
	writeString(textPhrase);
     2e6:	0020      	movs	r0, r4
     2e8:	4c3f      	ldr	r4, [pc, #252]	; (3e8 <splashScreen+0x204>)
     2ea:	47a0      	blx	r4
	
	yCharPos = 17;
     2ec:	2311      	movs	r3, #17
     2ee:	8033      	strh	r3, [r6, #0]
	xCharPos = 40 - (strlen(bootString)/2);
     2f0:	4668      	mov	r0, sp
     2f2:	47c0      	blx	r8
     2f4:	0840      	lsrs	r0, r0, #1
     2f6:	1a2d      	subs	r5, r5, r0
     2f8:	803d      	strh	r5, [r7, #0]
	writeString(bootString);
     2fa:	4668      	mov	r0, sp
     2fc:	47a0      	blx	r4
	delay_ms(2000);
     2fe:	20fa      	movs	r0, #250	; 0xfa
     300:	00c0      	lsls	r0, r0, #3
     302:	4b3a      	ldr	r3, [pc, #232]	; (3ec <splashScreen+0x208>)
     304:	4798      	blx	r3
	clearScreen();
     306:	4b30      	ldr	r3, [pc, #192]	; (3c8 <splashScreen+0x1e4>)
     308:	4798      	blx	r3
	
	setColorRGB(0,255,0);
     30a:	2200      	movs	r2, #0
     30c:	21ff      	movs	r1, #255	; 0xff
     30e:	2000      	movs	r0, #0
     310:	4b2e      	ldr	r3, [pc, #184]	; (3cc <splashScreen+0x1e8>)
     312:	4798      	blx	r3
	setBackColorRGB(0,0,0);
     314:	2200      	movs	r2, #0
     316:	2100      	movs	r1, #0
     318:	2000      	movs	r0, #0
     31a:	4b35      	ldr	r3, [pc, #212]	; (3f0 <splashScreen+0x20c>)
     31c:	4798      	blx	r3
	
	//Setting the xChar and yChar position has to come
	//after splashScreen() and InitLCD();
	xCharPos = 0;
     31e:	2300      	movs	r3, #0
     320:	803b      	strh	r3, [r7, #0]
	yCharPos = 0;
     322:	8033      	strh	r3, [r6, #0]
	

     324:	b00a      	add	sp, #40	; 0x28
     326:	bc04      	pop	{r2}
     328:	4690      	mov	r8, r2
     32a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drawKare(1);
     32c:	2001      	movs	r0, #1
     32e:	4b2a      	ldr	r3, [pc, #168]	; (3d8 <splashScreen+0x1f4>)
     330:	4798      	blx	r3
     332:	e7cc      	b.n	2ce <splashScreen+0xea>
     334:	200001d8 	.word	0x200001d8
     338:	000046f0 	.word	0x000046f0
     33c:	00004710 	.word	0x00004710
     340:	00004724 	.word	0x00004724
     344:	0000473c 	.word	0x0000473c
     348:	0000474c 	.word	0x0000474c
     34c:	00004754 	.word	0x00004754
     350:	0000477c 	.word	0x0000477c
     354:	000047a8 	.word	0x000047a8
     358:	000047d0 	.word	0x000047d0
     35c:	000047fc 	.word	0x000047fc
     360:	00004808 	.word	0x00004808
     364:	00004820 	.word	0x00004820
     368:	00004840 	.word	0x00004840
     36c:	00004860 	.word	0x00004860
     370:	00004884 	.word	0x00004884
     374:	00004894 	.word	0x00004894
     378:	000048a0 	.word	0x000048a0
     37c:	000048bc 	.word	0x000048bc
     380:	000048dc 	.word	0x000048dc
     384:	000048e4 	.word	0x000048e4
     388:	000048f8 	.word	0x000048f8
     38c:	00004914 	.word	0x00004914
     390:	00004924 	.word	0x00004924
     394:	00004948 	.word	0x00004948
     398:	00004974 	.word	0x00004974
     39c:	000049ac 	.word	0x000049ac
     3a0:	000049c0 	.word	0x000049c0
     3a4:	000049ec 	.word	0x000049ec
     3a8:	00004a00 	.word	0x00004a00
     3ac:	00004a1c 	.word	0x00004a1c
     3b0:	00004a5c 	.word	0x00004a5c
     3b4:	00004a80 	.word	0x00004a80
     3b8:	00004aa0 	.word	0x00004aa0
     3bc:	000034d9 	.word	0x000034d9
     3c0:	000019b5 	.word	0x000019b5
     3c4:	000033f5 	.word	0x000033f5
     3c8:	00002b11 	.word	0x00002b11
     3cc:	0000287d 	.word	0x0000287d
     3d0:	4100448c 	.word	0x4100448c
     3d4:	41004400 	.word	0x41004400
     3d8:	00000115 	.word	0x00000115
     3dc:	000036bd 	.word	0x000036bd
     3e0:	20000298 	.word	0x20000298
     3e4:	2000029a 	.word	0x2000029a
     3e8:	000021d1 	.word	0x000021d1
     3ec:	00000435 	.word	0x00000435
     3f0:	000028a5 	.word	0x000028a5

000003f4 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     3f4:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     3f6:	2000      	movs	r0, #0
     3f8:	4b08      	ldr	r3, [pc, #32]	; (41c <delay_init+0x28>)
     3fa:	4798      	blx	r3
     3fc:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     3fe:	4c08      	ldr	r4, [pc, #32]	; (420 <delay_init+0x2c>)
     400:	21fa      	movs	r1, #250	; 0xfa
     402:	0089      	lsls	r1, r1, #2
     404:	47a0      	blx	r4
     406:	4b07      	ldr	r3, [pc, #28]	; (424 <delay_init+0x30>)
     408:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     40a:	4907      	ldr	r1, [pc, #28]	; (428 <delay_init+0x34>)
     40c:	0028      	movs	r0, r5
     40e:	47a0      	blx	r4
     410:	4b06      	ldr	r3, [pc, #24]	; (42c <delay_init+0x38>)
     412:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     414:	2205      	movs	r2, #5
     416:	4b06      	ldr	r3, [pc, #24]	; (430 <delay_init+0x3c>)
     418:	601a      	str	r2, [r3, #0]
}
     41a:	bd70      	pop	{r4, r5, r6, pc}
     41c:	000019b5 	.word	0x000019b5
     420:	00003211 	.word	0x00003211
     424:	20000000 	.word	0x20000000
     428:	000f4240 	.word	0x000f4240
     42c:	20000004 	.word	0x20000004
     430:	e000e010 	.word	0xe000e010

00000434 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     434:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     436:	4b08      	ldr	r3, [pc, #32]	; (458 <delay_cycles_ms+0x24>)
     438:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     43a:	4a08      	ldr	r2, [pc, #32]	; (45c <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     43c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     43e:	2180      	movs	r1, #128	; 0x80
     440:	0249      	lsls	r1, r1, #9
	while (n--) {
     442:	3801      	subs	r0, #1
     444:	d307      	bcc.n	456 <delay_cycles_ms+0x22>
	if (n > 0) {
     446:	2c00      	cmp	r4, #0
     448:	d0fb      	beq.n	442 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     44a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     44c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     44e:	6813      	ldr	r3, [r2, #0]
     450:	420b      	tst	r3, r1
     452:	d0fc      	beq.n	44e <delay_cycles_ms+0x1a>
     454:	e7f5      	b.n	442 <delay_cycles_ms+0xe>
	}
}
     456:	bd30      	pop	{r4, r5, pc}
     458:	20000000 	.word	0x20000000
     45c:	e000e010 	.word	0xe000e010

00000460 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     460:	4b0c      	ldr	r3, [pc, #48]	; (494 <cpu_irq_enter_critical+0x34>)
     462:	681b      	ldr	r3, [r3, #0]
     464:	2b00      	cmp	r3, #0
     466:	d106      	bne.n	476 <cpu_irq_enter_critical+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     468:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     46c:	2b00      	cmp	r3, #0
     46e:	d007      	beq.n	480 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     470:	2200      	movs	r2, #0
     472:	4b09      	ldr	r3, [pc, #36]	; (498 <cpu_irq_enter_critical+0x38>)
     474:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     476:	4a07      	ldr	r2, [pc, #28]	; (494 <cpu_irq_enter_critical+0x34>)
     478:	6813      	ldr	r3, [r2, #0]
     47a:	3301      	adds	r3, #1
     47c:	6013      	str	r3, [r2, #0]
}
     47e:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     480:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     482:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     486:	2200      	movs	r2, #0
     488:	4b04      	ldr	r3, [pc, #16]	; (49c <cpu_irq_enter_critical+0x3c>)
     48a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     48c:	3201      	adds	r2, #1
     48e:	4b02      	ldr	r3, [pc, #8]	; (498 <cpu_irq_enter_critical+0x38>)
     490:	701a      	strb	r2, [r3, #0]
     492:	e7f0      	b.n	476 <cpu_irq_enter_critical+0x16>
     494:	20000258 	.word	0x20000258
     498:	2000025c 	.word	0x2000025c
     49c:	20000008 	.word	0x20000008

000004a0 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     4a0:	4b08      	ldr	r3, [pc, #32]	; (4c4 <cpu_irq_leave_critical+0x24>)
     4a2:	681a      	ldr	r2, [r3, #0]
     4a4:	3a01      	subs	r2, #1
     4a6:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     4a8:	681b      	ldr	r3, [r3, #0]
     4aa:	2b00      	cmp	r3, #0
     4ac:	d109      	bne.n	4c2 <cpu_irq_leave_critical+0x22>
     4ae:	4b06      	ldr	r3, [pc, #24]	; (4c8 <cpu_irq_leave_critical+0x28>)
     4b0:	781b      	ldrb	r3, [r3, #0]
     4b2:	2b00      	cmp	r3, #0
     4b4:	d005      	beq.n	4c2 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     4b6:	2201      	movs	r2, #1
     4b8:	4b04      	ldr	r3, [pc, #16]	; (4cc <cpu_irq_leave_critical+0x2c>)
     4ba:	701a      	strb	r2, [r3, #0]
     4bc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     4c0:	b662      	cpsie	i
	}
}
     4c2:	4770      	bx	lr
     4c4:	20000258 	.word	0x20000258
     4c8:	2000025c 	.word	0x2000025c
     4cc:	20000008 	.word	0x20000008

000004d0 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     4d0:	b5f0      	push	{r4, r5, r6, r7, lr}
     4d2:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     4d4:	ac01      	add	r4, sp, #4
     4d6:	2501      	movs	r5, #1
     4d8:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     4da:	2700      	movs	r7, #0
     4dc:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     4de:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     4e0:	0021      	movs	r1, r4
     4e2:	203e      	movs	r0, #62	; 0x3e
     4e4:	4e06      	ldr	r6, [pc, #24]	; (500 <system_board_init+0x30>)
     4e6:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     4e8:	2280      	movs	r2, #128	; 0x80
     4ea:	05d2      	lsls	r2, r2, #23
     4ec:	4b05      	ldr	r3, [pc, #20]	; (504 <system_board_init+0x34>)
     4ee:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     4f0:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     4f2:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     4f4:	0021      	movs	r1, r4
     4f6:	200f      	movs	r0, #15
     4f8:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
     4fa:	b003      	add	sp, #12
     4fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     4fe:	46c0      	nop			; (mov r8, r8)
     500:	00000a39 	.word	0x00000a39
     504:	41004480 	.word	0x41004480

00000508 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     508:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     50a:	2200      	movs	r2, #0
     50c:	2300      	movs	r3, #0
     50e:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
     510:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
     512:	2100      	movs	r1, #0
     514:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     516:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     518:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
     51a:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
     51c:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
     51e:	6082      	str	r2, [r0, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	//config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
     520:	24c0      	movs	r4, #192	; 0xc0
     522:	0164      	lsls	r4, r4, #5
     524:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     526:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     528:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
     52a:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
     52c:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
     52e:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     530:	242a      	movs	r4, #42	; 0x2a
     532:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
     534:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
     536:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
     538:	3c06      	subs	r4, #6
     53a:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     53c:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     53e:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
     540:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
     542:	232b      	movs	r3, #43	; 0x2b
     544:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
     546:	3301      	adds	r3, #1
     548:	54c1      	strb	r1, [r0, r3]
}
     54a:	bd10      	pop	{r4, pc}

0000054c <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     54c:	b5f0      	push	{r4, r5, r6, r7, lr}
     54e:	46d6      	mov	lr, sl
     550:	464f      	mov	r7, r9
     552:	4646      	mov	r6, r8
     554:	b5c0      	push	{r6, r7, lr}
     556:	b096      	sub	sp, #88	; 0x58
     558:	0007      	movs	r7, r0
     55a:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     55c:	6001      	str	r1, [r0, #0]
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     55e:	4ac6      	ldr	r2, [pc, #792]	; (878 <adc_init+0x32c>)
     560:	6a10      	ldr	r0, [r2, #32]
     562:	2380      	movs	r3, #128	; 0x80
     564:	025b      	lsls	r3, r3, #9
     566:	4303      	orrs	r3, r0
     568:	6213      	str	r3, [r2, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     56a:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     56c:	2005      	movs	r0, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     56e:	07db      	lsls	r3, r3, #31
     570:	d505      	bpl.n	57e <adc_init+0x32>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
     572:	b016      	add	sp, #88	; 0x58
     574:	bc1c      	pop	{r2, r3, r4}
     576:	4690      	mov	r8, r2
     578:	4699      	mov	r9, r3
     57a:	46a2      	mov	sl, r4
     57c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     57e:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
     580:	3017      	adds	r0, #23
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     582:	079b      	lsls	r3, r3, #30
     584:	d4f5      	bmi.n	572 <adc_init+0x26>
	module_inst->reference = config->reference;
     586:	7873      	ldrb	r3, [r6, #1]
     588:	713b      	strb	r3, [r7, #4]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
     58a:	2b00      	cmp	r3, #0
     58c:	d104      	bne.n	598 <adc_init+0x4c>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
     58e:	4abb      	ldr	r2, [pc, #748]	; (87c <adc_init+0x330>)
     590:	6c13      	ldr	r3, [r2, #64]	; 0x40
     592:	2104      	movs	r1, #4
     594:	430b      	orrs	r3, r1
     596:	6413      	str	r3, [r2, #64]	; 0x40
		module_inst->callback[i] = NULL;
     598:	2300      	movs	r3, #0
     59a:	60bb      	str	r3, [r7, #8]
     59c:	60fb      	str	r3, [r7, #12]
     59e:	613b      	str	r3, [r7, #16]
	module_inst->registered_callback_mask = 0;
     5a0:	76bb      	strb	r3, [r7, #26]
	module_inst->enabled_callback_mask = 0;
     5a2:	76fb      	strb	r3, [r7, #27]
	module_inst->remaining_conversions = 0;
     5a4:	833b      	strh	r3, [r7, #24]
	module_inst->job_status = STATUS_OK;
     5a6:	773b      	strb	r3, [r7, #28]
	_adc_instances[0] = module_inst;
     5a8:	4bb5      	ldr	r3, [pc, #724]	; (880 <adc_init+0x334>)
     5aa:	601f      	str	r7, [r3, #0]
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
     5ac:	232a      	movs	r3, #42	; 0x2a
     5ae:	5cf3      	ldrb	r3, [r6, r3]
     5b0:	2b00      	cmp	r3, #0
     5b2:	d105      	bne.n	5c0 <adc_init+0x74>
     5b4:	7d33      	ldrb	r3, [r6, #20]
     5b6:	2b00      	cmp	r3, #0
     5b8:	d102      	bne.n	5c0 <adc_init+0x74>
		module_inst->software_trigger = true;
     5ba:	3301      	adds	r3, #1
     5bc:	777b      	strb	r3, [r7, #29]
     5be:	e001      	b.n	5c4 <adc_init+0x78>
		module_inst->software_trigger = false;
     5c0:	2300      	movs	r3, #0
     5c2:	777b      	strb	r3, [r7, #29]
	Adc *const adc_module = module_inst->hw;
     5c4:	683b      	ldr	r3, [r7, #0]
     5c6:	4698      	mov	r8, r3
	gclk_chan_conf.source_generator = config->clock_source;
     5c8:	7833      	ldrb	r3, [r6, #0]
     5ca:	466a      	mov	r2, sp
     5cc:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
     5ce:	4669      	mov	r1, sp
     5d0:	201e      	movs	r0, #30
     5d2:	4bac      	ldr	r3, [pc, #688]	; (884 <adc_init+0x338>)
     5d4:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
     5d6:	201e      	movs	r0, #30
     5d8:	4bab      	ldr	r3, [pc, #684]	; (888 <adc_init+0x33c>)
     5da:	4798      	blx	r3
	if (config->pin_scan.inputs_to_scan != 0) {
     5dc:	232c      	movs	r3, #44	; 0x2c
     5de:	5cf2      	ldrb	r2, [r6, r3]
     5e0:	2a00      	cmp	r2, #0
     5e2:	d054      	beq.n	68e <adc_init+0x142>
		uint8_t offset = config->pin_scan.offset_start_scan;
     5e4:	3b01      	subs	r3, #1
     5e6:	5cf5      	ldrb	r5, [r6, r3]
		uint8_t start_pin =
     5e8:	7b33      	ldrb	r3, [r6, #12]
     5ea:	18eb      	adds	r3, r5, r3
     5ec:	b2db      	uxtb	r3, r3
		uint8_t end_pin =
     5ee:	18d1      	adds	r1, r2, r3
		while (start_pin < end_pin) {
     5f0:	b2c9      	uxtb	r1, r1
     5f2:	428b      	cmp	r3, r1
     5f4:	d221      	bcs.n	63a <adc_init+0xee>
     5f6:	1952      	adds	r2, r2, r5
     5f8:	b2d3      	uxtb	r3, r2
     5fa:	4699      	mov	r9, r3
	const uint32_t pinmapping[] = {
     5fc:	4ba3      	ldr	r3, [pc, #652]	; (88c <adc_init+0x340>)
     5fe:	469a      	mov	sl, r3
     600:	e003      	b.n	60a <adc_init+0xbe>
			offset++;
     602:	3501      	adds	r5, #1
     604:	b2ed      	uxtb	r5, r5
		while (start_pin < end_pin) {
     606:	454d      	cmp	r5, r9
     608:	d017      	beq.n	63a <adc_init+0xee>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
     60a:	240f      	movs	r4, #15
     60c:	402c      	ands	r4, r5
     60e:	7b33      	ldrb	r3, [r6, #12]
     610:	18e4      	adds	r4, r4, r3
	const uint32_t pinmapping[] = {
     612:	2250      	movs	r2, #80	; 0x50
     614:	499e      	ldr	r1, [pc, #632]	; (890 <adc_init+0x344>)
     616:	a802      	add	r0, sp, #8
     618:	47d0      	blx	sl
	if (pin <= ADC_EXTCHANNEL_MSB) {
     61a:	2c13      	cmp	r4, #19
     61c:	d8f1      	bhi.n	602 <adc_init+0xb6>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     61e:	00a4      	lsls	r4, r4, #2
     620:	ab02      	add	r3, sp, #8
     622:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     624:	a901      	add	r1, sp, #4
     626:	2300      	movs	r3, #0
     628:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     62a:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     62c:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     62e:	3301      	adds	r3, #1
     630:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     632:	b2c0      	uxtb	r0, r0
     634:	4b97      	ldr	r3, [pc, #604]	; (894 <adc_init+0x348>)
     636:	4798      	blx	r3
     638:	e7e3      	b.n	602 <adc_init+0xb6>
		_adc_configure_ain_pin(config->negative_input);
     63a:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     63c:	2250      	movs	r2, #80	; 0x50
     63e:	4994      	ldr	r1, [pc, #592]	; (890 <adc_init+0x344>)
     640:	a802      	add	r0, sp, #8
     642:	4b92      	ldr	r3, [pc, #584]	; (88c <adc_init+0x340>)
     644:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     646:	2c13      	cmp	r4, #19
     648:	d913      	bls.n	672 <adc_init+0x126>
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
     64a:	7d73      	ldrb	r3, [r6, #21]
     64c:	009b      	lsls	r3, r3, #2
     64e:	b2db      	uxtb	r3, r3
     650:	4642      	mov	r2, r8
     652:	7013      	strb	r3, [r2, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     654:	7db3      	ldrb	r3, [r6, #22]
     656:	01db      	lsls	r3, r3, #7
     658:	7872      	ldrb	r2, [r6, #1]
     65a:	4313      	orrs	r3, r2
     65c:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
     65e:	4642      	mov	r2, r8
     660:	7053      	strb	r3, [r2, #1]
	switch (config->resolution) {
     662:	7933      	ldrb	r3, [r6, #4]
     664:	2b34      	cmp	r3, #52	; 0x34
     666:	d900      	bls.n	66a <adc_init+0x11e>
     668:	e17b      	b.n	962 <adc_init+0x416>
     66a:	009b      	lsls	r3, r3, #2
     66c:	4a8a      	ldr	r2, [pc, #552]	; (898 <adc_init+0x34c>)
     66e:	58d3      	ldr	r3, [r2, r3]
     670:	469f      	mov	pc, r3
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     672:	00a4      	lsls	r4, r4, #2
     674:	ab02      	add	r3, sp, #8
     676:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     678:	a901      	add	r1, sp, #4
     67a:	2300      	movs	r3, #0
     67c:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     67e:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     680:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     682:	3301      	adds	r3, #1
     684:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     686:	b2c0      	uxtb	r0, r0
     688:	4b82      	ldr	r3, [pc, #520]	; (894 <adc_init+0x348>)
     68a:	4798      	blx	r3
     68c:	e7dd      	b.n	64a <adc_init+0xfe>
		_adc_configure_ain_pin(config->positive_input);
     68e:	7b34      	ldrb	r4, [r6, #12]
	const uint32_t pinmapping[] = {
     690:	2250      	movs	r2, #80	; 0x50
     692:	497f      	ldr	r1, [pc, #508]	; (890 <adc_init+0x344>)
     694:	a802      	add	r0, sp, #8
     696:	4b7d      	ldr	r3, [pc, #500]	; (88c <adc_init+0x340>)
     698:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     69a:	2c13      	cmp	r4, #19
     69c:	d915      	bls.n	6ca <adc_init+0x17e>
		_adc_configure_ain_pin(config->negative_input);
     69e:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     6a0:	2250      	movs	r2, #80	; 0x50
     6a2:	497b      	ldr	r1, [pc, #492]	; (890 <adc_init+0x344>)
     6a4:	a802      	add	r0, sp, #8
     6a6:	4b79      	ldr	r3, [pc, #484]	; (88c <adc_init+0x340>)
     6a8:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     6aa:	2c13      	cmp	r4, #19
     6ac:	d8cd      	bhi.n	64a <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     6ae:	00a4      	lsls	r4, r4, #2
     6b0:	ab02      	add	r3, sp, #8
     6b2:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     6b4:	a901      	add	r1, sp, #4
     6b6:	2300      	movs	r3, #0
     6b8:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     6ba:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     6bc:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     6be:	3301      	adds	r3, #1
     6c0:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     6c2:	b2c0      	uxtb	r0, r0
     6c4:	4b73      	ldr	r3, [pc, #460]	; (894 <adc_init+0x348>)
     6c6:	4798      	blx	r3
     6c8:	e7bf      	b.n	64a <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     6ca:	00a4      	lsls	r4, r4, #2
     6cc:	ab02      	add	r3, sp, #8
     6ce:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     6d0:	a901      	add	r1, sp, #4
     6d2:	2300      	movs	r3, #0
     6d4:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     6d6:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     6d8:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     6da:	3301      	adds	r3, #1
     6dc:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     6de:	b2c0      	uxtb	r0, r0
     6e0:	4b6c      	ldr	r3, [pc, #432]	; (894 <adc_init+0x348>)
     6e2:	4798      	blx	r3
     6e4:	e7db      	b.n	69e <adc_init+0x152>
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     6e6:	2304      	movs	r3, #4
		resolution = ADC_RESOLUTION_16BIT;
     6e8:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_4;
     6ea:	2102      	movs	r1, #2
     6ec:	e01a      	b.n	724 <adc_init+0x1d8>
		adjres = config->divide_result;
     6ee:	7c71      	ldrb	r1, [r6, #17]
		accumulate = config->accumulate_samples;
     6f0:	7c33      	ldrb	r3, [r6, #16]
		resolution = ADC_RESOLUTION_16BIT;
     6f2:	2410      	movs	r4, #16
     6f4:	e016      	b.n	724 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     6f6:	2306      	movs	r3, #6
		resolution = ADC_RESOLUTION_16BIT;
     6f8:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     6fa:	2101      	movs	r1, #1
     6fc:	e012      	b.n	724 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     6fe:	2308      	movs	r3, #8
		resolution = ADC_RESOLUTION_16BIT;
     700:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     702:	2100      	movs	r1, #0
     704:	e00e      	b.n	724 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     706:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_8BIT;
     708:	2430      	movs	r4, #48	; 0x30
	uint8_t adjres = 0;
     70a:	2100      	movs	r1, #0
     70c:	e00a      	b.n	724 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     70e:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_10BIT;
     710:	2420      	movs	r4, #32
	uint8_t adjres = 0;
     712:	2100      	movs	r1, #0
     714:	e006      	b.n	724 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     716:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_12BIT;
     718:	2400      	movs	r4, #0
	uint8_t adjres = 0;
     71a:	2100      	movs	r1, #0
     71c:	e002      	b.n	724 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     71e:	2302      	movs	r3, #2
		resolution = ADC_RESOLUTION_16BIT;
     720:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     722:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     724:	0109      	lsls	r1, r1, #4
     726:	2270      	movs	r2, #112	; 0x70
     728:	400a      	ands	r2, r1
     72a:	4313      	orrs	r3, r2
     72c:	4642      	mov	r2, r8
     72e:	7093      	strb	r3, [r2, #2]
	if (config->sample_length > 63) {
     730:	7df3      	ldrb	r3, [r6, #23]
		return STATUS_ERR_INVALID_ARG;
     732:	2017      	movs	r0, #23
	if (config->sample_length > 63) {
     734:	2b3f      	cmp	r3, #63	; 0x3f
     736:	d900      	bls.n	73a <adc_init+0x1ee>
     738:	e71b      	b.n	572 <adc_init+0x26>
		adc_module->SAMPCTRL.reg =
     73a:	70d3      	strb	r3, [r2, #3]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     73c:	683a      	ldr	r2, [r7, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     73e:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     740:	b25b      	sxtb	r3, r3
     742:	2b00      	cmp	r3, #0
     744:	dbfb      	blt.n	73e <adc_init+0x1f2>
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
     746:	7cf3      	ldrb	r3, [r6, #19]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     748:	8872      	ldrh	r2, [r6, #2]
     74a:	4313      	orrs	r3, r2
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     74c:	2224      	movs	r2, #36	; 0x24
     74e:	5cb2      	ldrb	r2, [r6, r2]
     750:	00d2      	lsls	r2, r2, #3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     752:	4313      	orrs	r3, r2
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
     754:	7d32      	ldrb	r2, [r6, #20]
     756:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     758:	4313      	orrs	r3, r2
     75a:	7cb2      	ldrb	r2, [r6, #18]
     75c:	0052      	lsls	r2, r2, #1
     75e:	4313      	orrs	r3, r2
     760:	4323      	orrs	r3, r4
	adc_module->CTRLB.reg =
     762:	4642      	mov	r2, r8
     764:	8093      	strh	r3, [r2, #4]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     766:	7e33      	ldrb	r3, [r6, #24]
     768:	2b00      	cmp	r3, #0
     76a:	d020      	beq.n	7ae <adc_init+0x262>
		switch (resolution) {
     76c:	2c10      	cmp	r4, #16
     76e:	d100      	bne.n	772 <adc_init+0x226>
     770:	e0d9      	b.n	926 <adc_init+0x3da>
     772:	d800      	bhi.n	776 <adc_init+0x22a>
     774:	e098      	b.n	8a8 <adc_init+0x35c>
     776:	2c20      	cmp	r4, #32
     778:	d100      	bne.n	77c <adc_init+0x230>
     77a:	e0b6      	b.n	8ea <adc_init+0x39e>
     77c:	2c30      	cmp	r4, #48	; 0x30
     77e:	d116      	bne.n	7ae <adc_init+0x262>
			if (config->differential_mode &&
     780:	7cf2      	ldrb	r2, [r6, #19]
     782:	2a00      	cmp	r2, #0
     784:	d00a      	beq.n	79c <adc_init+0x250>
					(config->window.window_lower_value > 127 ||
     786:	69f2      	ldr	r2, [r6, #28]
     788:	3280      	adds	r2, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
     78a:	2017      	movs	r0, #23
			if (config->differential_mode &&
     78c:	2aff      	cmp	r2, #255	; 0xff
     78e:	d900      	bls.n	792 <adc_init+0x246>
     790:	e6ef      	b.n	572 <adc_init+0x26>
					config->window.window_lower_value < -128 ||
     792:	6a32      	ldr	r2, [r6, #32]
     794:	3280      	adds	r2, #128	; 0x80
     796:	2aff      	cmp	r2, #255	; 0xff
     798:	d900      	bls.n	79c <adc_init+0x250>
     79a:	e6ea      	b.n	572 <adc_init+0x26>
				return STATUS_ERR_INVALID_ARG;
     79c:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 255 ||
     79e:	69f2      	ldr	r2, [r6, #28]
     7a0:	2aff      	cmp	r2, #255	; 0xff
     7a2:	dd00      	ble.n	7a6 <adc_init+0x25a>
     7a4:	e6e5      	b.n	572 <adc_init+0x26>
     7a6:	6a32      	ldr	r2, [r6, #32]
     7a8:	2aff      	cmp	r2, #255	; 0xff
     7aa:	dd00      	ble.n	7ae <adc_init+0x262>
     7ac:	e6e1      	b.n	572 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     7ae:	6839      	ldr	r1, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     7b0:	7e4a      	ldrb	r2, [r1, #25]
	while (adc_is_syncing(module_inst)) {
     7b2:	b252      	sxtb	r2, r2
     7b4:	2a00      	cmp	r2, #0
     7b6:	dbfb      	blt.n	7b0 <adc_init+0x264>
	adc_module->WINCTRL.reg = config->window.window_mode;
     7b8:	4642      	mov	r2, r8
     7ba:	7213      	strb	r3, [r2, #8]
	Adc *const adc_module = module_inst->hw;
     7bc:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     7be:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     7c0:	b25b      	sxtb	r3, r3
     7c2:	2b00      	cmp	r3, #0
     7c4:	dbfb      	blt.n	7be <adc_init+0x272>
	adc_module->WINLT.reg =
     7c6:	8bb3      	ldrh	r3, [r6, #28]
     7c8:	4642      	mov	r2, r8
     7ca:	8393      	strh	r3, [r2, #28]
	Adc *const adc_module = module_inst->hw;
     7cc:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     7ce:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     7d0:	b25b      	sxtb	r3, r3
     7d2:	2b00      	cmp	r3, #0
     7d4:	dbfb      	blt.n	7ce <adc_init+0x282>
	adc_module->WINUT.reg = config->window.window_upper_value <<
     7d6:	8c33      	ldrh	r3, [r6, #32]
     7d8:	4642      	mov	r2, r8
     7da:	8413      	strh	r3, [r2, #32]
	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
     7dc:	232c      	movs	r3, #44	; 0x2c
     7de:	5cf3      	ldrb	r3, [r6, r3]
	if (inputs_to_scan > 0) {
     7e0:	2b00      	cmp	r3, #0
     7e2:	d005      	beq.n	7f0 <adc_init+0x2a4>
		inputs_to_scan--;
     7e4:	3b01      	subs	r3, #1
     7e6:	b2db      	uxtb	r3, r3
		return STATUS_ERR_INVALID_ARG;
     7e8:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     7ea:	2b0f      	cmp	r3, #15
     7ec:	d900      	bls.n	7f0 <adc_init+0x2a4>
     7ee:	e6c0      	b.n	572 <adc_init+0x26>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
     7f0:	222b      	movs	r2, #43	; 0x2b
     7f2:	5cb1      	ldrb	r1, [r6, r2]
		return STATUS_ERR_INVALID_ARG;
     7f4:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     7f6:	290f      	cmp	r1, #15
     7f8:	d900      	bls.n	7fc <adc_init+0x2b0>
     7fa:	e6ba      	b.n	572 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     7fc:	6838      	ldr	r0, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     7fe:	7e42      	ldrb	r2, [r0, #25]
	while (adc_is_syncing(module_inst)) {
     800:	b252      	sxtb	r2, r2
     802:	2a00      	cmp	r2, #0
     804:	dbfb      	blt.n	7fe <adc_init+0x2b2>
			config->negative_input |
     806:	89f2      	ldrh	r2, [r6, #14]
			config->positive_input;
     808:	7b30      	ldrb	r0, [r6, #12]
			config->negative_input |
     80a:	4302      	orrs	r2, r0
     80c:	68b0      	ldr	r0, [r6, #8]
     80e:	4302      	orrs	r2, r0
			(config->pin_scan.offset_start_scan <<
     810:	0509      	lsls	r1, r1, #20
			config->negative_input |
     812:	430a      	orrs	r2, r1
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     814:	041b      	lsls	r3, r3, #16
			config->negative_input |
     816:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
     818:	4642      	mov	r2, r8
     81a:	6113      	str	r3, [r2, #16]
	adc_module->EVCTRL.reg = config->event_action;
     81c:	232a      	movs	r3, #42	; 0x2a
     81e:	5cf3      	ldrb	r3, [r6, r3]
     820:	7513      	strb	r3, [r2, #20]
	adc_module->INTENCLR.reg =
     822:	230f      	movs	r3, #15
     824:	7593      	strb	r3, [r2, #22]
	if (config->correction.correction_enable){
     826:	3315      	adds	r3, #21
     828:	5cf3      	ldrb	r3, [r6, r3]
     82a:	2b00      	cmp	r3, #0
     82c:	d012      	beq.n	854 <adc_init+0x308>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     82e:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
     830:	4a1a      	ldr	r2, [pc, #104]	; (89c <adc_init+0x350>)
			return STATUS_ERR_INVALID_ARG;
     832:	2017      	movs	r0, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     834:	4293      	cmp	r3, r2
     836:	d900      	bls.n	83a <adc_init+0x2ee>
     838:	e69b      	b.n	572 <adc_init+0x26>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     83a:	4642      	mov	r2, r8
     83c:	8493      	strh	r3, [r2, #36]	; 0x24
		if (config->correction.offset_correction > 2047 ||
     83e:	8d32      	ldrh	r2, [r6, #40]	; 0x28
     840:	2380      	movs	r3, #128	; 0x80
     842:	011b      	lsls	r3, r3, #4
     844:	18d3      	adds	r3, r2, r3
     846:	4915      	ldr	r1, [pc, #84]	; (89c <adc_init+0x350>)
     848:	b29b      	uxth	r3, r3
     84a:	428b      	cmp	r3, r1
     84c:	d900      	bls.n	850 <adc_init+0x304>
     84e:	e690      	b.n	572 <adc_init+0x26>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     850:	4643      	mov	r3, r8
     852:	84da      	strh	r2, [r3, #38]	; 0x26
			ADC_CALIB_BIAS_CAL(
     854:	4b12      	ldr	r3, [pc, #72]	; (8a0 <adc_init+0x354>)
     856:	681b      	ldr	r3, [r3, #0]
     858:	015b      	lsls	r3, r3, #5
     85a:	22e0      	movs	r2, #224	; 0xe0
     85c:	00d2      	lsls	r2, r2, #3
     85e:	4013      	ands	r3, r2
			ADC_CALIB_LINEARITY_CAL(
     860:	4a10      	ldr	r2, [pc, #64]	; (8a4 <adc_init+0x358>)
     862:	6851      	ldr	r1, [r2, #4]
     864:	0149      	lsls	r1, r1, #5
     866:	6812      	ldr	r2, [r2, #0]
     868:	0ed2      	lsrs	r2, r2, #27
     86a:	430a      	orrs	r2, r1
     86c:	b2d2      	uxtb	r2, r2
			) |
     86e:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
     870:	4642      	mov	r2, r8
     872:	8513      	strh	r3, [r2, #40]	; 0x28
	return STATUS_OK;
     874:	2000      	movs	r0, #0
     876:	e67c      	b.n	572 <adc_init+0x26>
     878:	40000400 	.word	0x40000400
     87c:	40000800 	.word	0x40000800
     880:	200002a8 	.word	0x200002a8
     884:	00001acd 	.word	0x00001acd
     888:	00001a41 	.word	0x00001a41
     88c:	000033fd 	.word	0x000033fd
     890:	00004b94 	.word	0x00004b94
     894:	00001bc5 	.word	0x00001bc5
     898:	00004ac0 	.word	0x00004ac0
     89c:	00000fff 	.word	0x00000fff
     8a0:	00806024 	.word	0x00806024
     8a4:	00806020 	.word	0x00806020
		switch (resolution) {
     8a8:	2c00      	cmp	r4, #0
     8aa:	d000      	beq.n	8ae <adc_init+0x362>
     8ac:	e77f      	b.n	7ae <adc_init+0x262>
			if (config->differential_mode &&
     8ae:	7cf2      	ldrb	r2, [r6, #19]
     8b0:	2a00      	cmp	r2, #0
     8b2:	d00f      	beq.n	8d4 <adc_init+0x388>
					(config->window.window_lower_value > 2047 ||
     8b4:	69f2      	ldr	r2, [r6, #28]
     8b6:	2180      	movs	r1, #128	; 0x80
     8b8:	0109      	lsls	r1, r1, #4
     8ba:	468c      	mov	ip, r1
     8bc:	4462      	add	r2, ip
			if (config->differential_mode &&
     8be:	492a      	ldr	r1, [pc, #168]	; (968 <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
     8c0:	2017      	movs	r0, #23
			if (config->differential_mode &&
     8c2:	428a      	cmp	r2, r1
     8c4:	d900      	bls.n	8c8 <adc_init+0x37c>
     8c6:	e654      	b.n	572 <adc_init+0x26>
					config->window.window_lower_value < -2048 ||
     8c8:	6a32      	ldr	r2, [r6, #32]
     8ca:	4462      	add	r2, ip
     8cc:	4926      	ldr	r1, [pc, #152]	; (968 <adc_init+0x41c>)
     8ce:	428a      	cmp	r2, r1
     8d0:	d900      	bls.n	8d4 <adc_init+0x388>
     8d2:	e64e      	b.n	572 <adc_init+0x26>
			} else if (config->window.window_lower_value > 4095 ||
     8d4:	4a24      	ldr	r2, [pc, #144]	; (968 <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
     8d6:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
     8d8:	69f1      	ldr	r1, [r6, #28]
     8da:	4291      	cmp	r1, r2
     8dc:	dd00      	ble.n	8e0 <adc_init+0x394>
     8de:	e648      	b.n	572 <adc_init+0x26>
     8e0:	6a31      	ldr	r1, [r6, #32]
     8e2:	4291      	cmp	r1, r2
     8e4:	dd00      	ble.n	8e8 <adc_init+0x39c>
     8e6:	e644      	b.n	572 <adc_init+0x26>
     8e8:	e761      	b.n	7ae <adc_init+0x262>
			if (config->differential_mode &&
     8ea:	7cf2      	ldrb	r2, [r6, #19]
     8ec:	2a00      	cmp	r2, #0
     8ee:	d00f      	beq.n	910 <adc_init+0x3c4>
					(config->window.window_lower_value > 511 ||
     8f0:	69f2      	ldr	r2, [r6, #28]
     8f2:	2180      	movs	r1, #128	; 0x80
     8f4:	0089      	lsls	r1, r1, #2
     8f6:	468c      	mov	ip, r1
     8f8:	4462      	add	r2, ip
			if (config->differential_mode &&
     8fa:	491c      	ldr	r1, [pc, #112]	; (96c <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
     8fc:	2017      	movs	r0, #23
			if (config->differential_mode &&
     8fe:	428a      	cmp	r2, r1
     900:	d900      	bls.n	904 <adc_init+0x3b8>
     902:	e636      	b.n	572 <adc_init+0x26>
					config->window.window_lower_value < -512 ||
     904:	6a32      	ldr	r2, [r6, #32]
     906:	4462      	add	r2, ip
     908:	4918      	ldr	r1, [pc, #96]	; (96c <adc_init+0x420>)
     90a:	428a      	cmp	r2, r1
     90c:	d900      	bls.n	910 <adc_init+0x3c4>
     90e:	e630      	b.n	572 <adc_init+0x26>
			} else if (config->window.window_lower_value > 1023 ||
     910:	4a16      	ldr	r2, [pc, #88]	; (96c <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
     912:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
     914:	69f1      	ldr	r1, [r6, #28]
     916:	4291      	cmp	r1, r2
     918:	dd00      	ble.n	91c <adc_init+0x3d0>
     91a:	e62a      	b.n	572 <adc_init+0x26>
     91c:	6a31      	ldr	r1, [r6, #32]
     91e:	4291      	cmp	r1, r2
     920:	dd00      	ble.n	924 <adc_init+0x3d8>
     922:	e626      	b.n	572 <adc_init+0x26>
     924:	e743      	b.n	7ae <adc_init+0x262>
			if (config->differential_mode &&
     926:	7cf2      	ldrb	r2, [r6, #19]
     928:	2a00      	cmp	r2, #0
     92a:	d00f      	beq.n	94c <adc_init+0x400>
					(config->window.window_lower_value > 32767 ||
     92c:	69f2      	ldr	r2, [r6, #28]
     92e:	2180      	movs	r1, #128	; 0x80
     930:	0209      	lsls	r1, r1, #8
     932:	468c      	mov	ip, r1
     934:	4462      	add	r2, ip
			if (config->differential_mode &&
     936:	490e      	ldr	r1, [pc, #56]	; (970 <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
     938:	2017      	movs	r0, #23
			if (config->differential_mode &&
     93a:	428a      	cmp	r2, r1
     93c:	d900      	bls.n	940 <adc_init+0x3f4>
     93e:	e618      	b.n	572 <adc_init+0x26>
					config->window.window_lower_value < -32768 ||
     940:	6a32      	ldr	r2, [r6, #32]
     942:	4462      	add	r2, ip
     944:	490a      	ldr	r1, [pc, #40]	; (970 <adc_init+0x424>)
     946:	428a      	cmp	r2, r1
     948:	d900      	bls.n	94c <adc_init+0x400>
     94a:	e612      	b.n	572 <adc_init+0x26>
			} else if (config->window.window_lower_value > 65535 ||
     94c:	4a08      	ldr	r2, [pc, #32]	; (970 <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
     94e:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
     950:	69f1      	ldr	r1, [r6, #28]
     952:	4291      	cmp	r1, r2
     954:	dd00      	ble.n	958 <adc_init+0x40c>
     956:	e60c      	b.n	572 <adc_init+0x26>
     958:	6a31      	ldr	r1, [r6, #32]
     95a:	4291      	cmp	r1, r2
     95c:	dd00      	ble.n	960 <adc_init+0x414>
     95e:	e608      	b.n	572 <adc_init+0x26>
     960:	e725      	b.n	7ae <adc_init+0x262>
		return STATUS_ERR_INVALID_ARG;
     962:	2017      	movs	r0, #23
     964:	e605      	b.n	572 <adc_init+0x26>
     966:	46c0      	nop			; (mov r8, r8)
     968:	00000fff 	.word	0x00000fff
     96c:	000003ff 	.word	0x000003ff
     970:	0000ffff 	.word	0x0000ffff

00000974 <ADC_Handler>:
	}
}

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
     974:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
     976:	4b2f      	ldr	r3, [pc, #188]	; (a34 <ADC_Handler+0xc0>)
     978:	681d      	ldr	r5, [r3, #0]
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
     97a:	682b      	ldr	r3, [r5, #0]
     97c:	7e1a      	ldrb	r2, [r3, #24]
     97e:	7ddc      	ldrb	r4, [r3, #23]
     980:	4014      	ands	r4, r2
	if (flags & ADC_INTFLAG_RESRDY) {
     982:	07e2      	lsls	r2, r4, #31
     984:	d416      	bmi.n	9b4 <ADC_Handler+0x40>
	if (flags & ADC_INTFLAG_WINMON) {
     986:	0763      	lsls	r3, r4, #29
     988:	d508      	bpl.n	99c <ADC_Handler+0x28>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     98a:	2304      	movs	r3, #4
     98c:	682a      	ldr	r2, [r5, #0]
     98e:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     990:	7eeb      	ldrb	r3, [r5, #27]
     992:	079b      	lsls	r3, r3, #30
     994:	d502      	bpl.n	99c <ADC_Handler+0x28>
     996:	7eab      	ldrb	r3, [r5, #26]
     998:	079b      	lsls	r3, r3, #30
     99a:	d442      	bmi.n	a22 <ADC_Handler+0xae>
	if (flags & ADC_INTFLAG_OVERRUN) {
     99c:	07a3      	lsls	r3, r4, #30
     99e:	d508      	bpl.n	9b2 <ADC_Handler+0x3e>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     9a0:	2302      	movs	r3, #2
     9a2:	682a      	ldr	r2, [r5, #0]
     9a4:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     9a6:	7eeb      	ldrb	r3, [r5, #27]
     9a8:	075b      	lsls	r3, r3, #29
     9aa:	d502      	bpl.n	9b2 <ADC_Handler+0x3e>
     9ac:	7eab      	ldrb	r3, [r5, #26]
     9ae:	075b      	lsls	r3, r3, #29
     9b0:	d43b      	bmi.n	a2a <ADC_Handler+0xb6>
	_adc_interrupt_handler(0);
}
     9b2:	bd70      	pop	{r4, r5, r6, pc}
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     9b4:	2201      	movs	r2, #1
     9b6:	761a      	strb	r2, [r3, #24]
	Adc *const adc_module = module_inst->hw;
     9b8:	682a      	ldr	r2, [r5, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     9ba:	7e53      	ldrb	r3, [r2, #25]
		while (adc_is_syncing(module)) {
     9bc:	b25b      	sxtb	r3, r3
     9be:	2b00      	cmp	r3, #0
     9c0:	dbfb      	blt.n	9ba <ADC_Handler+0x46>
		*(module->job_buffer++) = module->hw->RESULT.reg;
     9c2:	6969      	ldr	r1, [r5, #20]
     9c4:	1c8b      	adds	r3, r1, #2
     9c6:	616b      	str	r3, [r5, #20]
     9c8:	8b53      	ldrh	r3, [r2, #26]
     9ca:	b29b      	uxth	r3, r3
     9cc:	800b      	strh	r3, [r1, #0]
		if (--module->remaining_conversions > 0) {
     9ce:	8b2b      	ldrh	r3, [r5, #24]
     9d0:	3b01      	subs	r3, #1
     9d2:	b29b      	uxth	r3, r3
     9d4:	832b      	strh	r3, [r5, #24]
     9d6:	2b00      	cmp	r3, #0
     9d8:	d011      	beq.n	9fe <ADC_Handler+0x8a>
			if (module->software_trigger == true) {
     9da:	7f6b      	ldrb	r3, [r5, #29]
     9dc:	2b00      	cmp	r3, #0
     9de:	d0d2      	beq.n	986 <ADC_Handler+0x12>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     9e0:	682a      	ldr	r2, [r5, #0]
     9e2:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     9e4:	b25b      	sxtb	r3, r3
     9e6:	2b00      	cmp	r3, #0
     9e8:	dbfb      	blt.n	9e2 <ADC_Handler+0x6e>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     9ea:	7b13      	ldrb	r3, [r2, #12]
     9ec:	2102      	movs	r1, #2
     9ee:	430b      	orrs	r3, r1
     9f0:	7313      	strb	r3, [r2, #12]
	Adc *const adc_module = module_inst->hw;
     9f2:	682a      	ldr	r2, [r5, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     9f4:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     9f6:	b25b      	sxtb	r3, r3
     9f8:	2b00      	cmp	r3, #0
     9fa:	dbfb      	blt.n	9f4 <ADC_Handler+0x80>
     9fc:	e7c3      	b.n	986 <ADC_Handler+0x12>
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     9fe:	2301      	movs	r3, #1
     a00:	682a      	ldr	r2, [r5, #0]
     a02:	7593      	strb	r3, [r2, #22]
			if (module->job_status == STATUS_BUSY) {
     a04:	7f2b      	ldrb	r3, [r5, #28]
     a06:	2b05      	cmp	r3, #5
     a08:	d1bd      	bne.n	986 <ADC_Handler+0x12>
				module->job_status = STATUS_OK;
     a0a:	2300      	movs	r3, #0
     a0c:	772b      	strb	r3, [r5, #28]
				if ((module->enabled_callback_mask &
     a0e:	7eeb      	ldrb	r3, [r5, #27]
     a10:	07db      	lsls	r3, r3, #31
     a12:	d5b8      	bpl.n	986 <ADC_Handler+0x12>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
     a14:	7eab      	ldrb	r3, [r5, #26]
     a16:	07db      	lsls	r3, r3, #31
     a18:	d5b5      	bpl.n	986 <ADC_Handler+0x12>
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     a1a:	0028      	movs	r0, r5
     a1c:	68ab      	ldr	r3, [r5, #8]
     a1e:	4798      	blx	r3
     a20:	e7b1      	b.n	986 <ADC_Handler+0x12>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     a22:	0028      	movs	r0, r5
     a24:	68eb      	ldr	r3, [r5, #12]
     a26:	4798      	blx	r3
     a28:	e7b8      	b.n	99c <ADC_Handler+0x28>
			(module->callback[ADC_CALLBACK_ERROR])(module);
     a2a:	692b      	ldr	r3, [r5, #16]
     a2c:	0028      	movs	r0, r5
     a2e:	4798      	blx	r3
}
     a30:	e7bf      	b.n	9b2 <ADC_Handler+0x3e>
     a32:	46c0      	nop			; (mov r8, r8)
     a34:	200002a8 	.word	0x200002a8

00000a38 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     a38:	b500      	push	{lr}
     a3a:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     a3c:	ab01      	add	r3, sp, #4
     a3e:	2280      	movs	r2, #128	; 0x80
     a40:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     a42:	780a      	ldrb	r2, [r1, #0]
     a44:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     a46:	784a      	ldrb	r2, [r1, #1]
     a48:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     a4a:	788a      	ldrb	r2, [r1, #2]
     a4c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     a4e:	0019      	movs	r1, r3
     a50:	4b01      	ldr	r3, [pc, #4]	; (a58 <port_pin_set_config+0x20>)
     a52:	4798      	blx	r3
}
     a54:	b003      	add	sp, #12
     a56:	bd00      	pop	{pc}
     a58:	00001bc5 	.word	0x00001bc5

00000a5c <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
     a5e:	46de      	mov	lr, fp
     a60:	4657      	mov	r7, sl
     a62:	464e      	mov	r6, r9
     a64:	4645      	mov	r5, r8
     a66:	b5e0      	push	{r5, r6, r7, lr}
     a68:	b087      	sub	sp, #28
     a6a:	4680      	mov	r8, r0
     a6c:	9104      	str	r1, [sp, #16]
     a6e:	0016      	movs	r6, r2
     a70:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     a72:	2200      	movs	r2, #0
     a74:	2300      	movs	r3, #0
     a76:	2100      	movs	r1, #0
     a78:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     a7a:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     a7c:	2001      	movs	r0, #1
     a7e:	0021      	movs	r1, r4
     a80:	9600      	str	r6, [sp, #0]
     a82:	9701      	str	r7, [sp, #4]
     a84:	465c      	mov	r4, fp
     a86:	9403      	str	r4, [sp, #12]
     a88:	4644      	mov	r4, r8
     a8a:	9405      	str	r4, [sp, #20]
     a8c:	e013      	b.n	ab6 <long_division+0x5a>
     a8e:	2420      	movs	r4, #32
     a90:	1a64      	subs	r4, r4, r1
     a92:	0005      	movs	r5, r0
     a94:	40e5      	lsrs	r5, r4
     a96:	46a8      	mov	r8, r5
     a98:	e014      	b.n	ac4 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     a9a:	9c00      	ldr	r4, [sp, #0]
     a9c:	9d01      	ldr	r5, [sp, #4]
     a9e:	1b12      	subs	r2, r2, r4
     aa0:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     aa2:	465c      	mov	r4, fp
     aa4:	464d      	mov	r5, r9
     aa6:	432c      	orrs	r4, r5
     aa8:	46a3      	mov	fp, r4
     aaa:	9c03      	ldr	r4, [sp, #12]
     aac:	4645      	mov	r5, r8
     aae:	432c      	orrs	r4, r5
     ab0:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     ab2:	3901      	subs	r1, #1
     ab4:	d325      	bcc.n	b02 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     ab6:	2420      	movs	r4, #32
     ab8:	4264      	negs	r4, r4
     aba:	190c      	adds	r4, r1, r4
     abc:	d4e7      	bmi.n	a8e <long_division+0x32>
     abe:	0005      	movs	r5, r0
     ac0:	40a5      	lsls	r5, r4
     ac2:	46a8      	mov	r8, r5
     ac4:	0004      	movs	r4, r0
     ac6:	408c      	lsls	r4, r1
     ac8:	46a1      	mov	r9, r4
		r = r << 1;
     aca:	1892      	adds	r2, r2, r2
     acc:	415b      	adcs	r3, r3
     ace:	0014      	movs	r4, r2
     ad0:	001d      	movs	r5, r3
		if (n & bit_shift) {
     ad2:	9e05      	ldr	r6, [sp, #20]
     ad4:	464f      	mov	r7, r9
     ad6:	403e      	ands	r6, r7
     ad8:	46b4      	mov	ip, r6
     ada:	9e04      	ldr	r6, [sp, #16]
     adc:	4647      	mov	r7, r8
     ade:	403e      	ands	r6, r7
     ae0:	46b2      	mov	sl, r6
     ae2:	4666      	mov	r6, ip
     ae4:	4657      	mov	r7, sl
     ae6:	433e      	orrs	r6, r7
     ae8:	d003      	beq.n	af2 <long_division+0x96>
			r |= 0x01;
     aea:	0006      	movs	r6, r0
     aec:	4326      	orrs	r6, r4
     aee:	0032      	movs	r2, r6
     af0:	002b      	movs	r3, r5
		if (r >= d) {
     af2:	9c00      	ldr	r4, [sp, #0]
     af4:	9d01      	ldr	r5, [sp, #4]
     af6:	429d      	cmp	r5, r3
     af8:	d8db      	bhi.n	ab2 <long_division+0x56>
     afa:	d1ce      	bne.n	a9a <long_division+0x3e>
     afc:	4294      	cmp	r4, r2
     afe:	d8d8      	bhi.n	ab2 <long_division+0x56>
     b00:	e7cb      	b.n	a9a <long_division+0x3e>
     b02:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     b04:	4658      	mov	r0, fp
     b06:	0019      	movs	r1, r3
     b08:	b007      	add	sp, #28
     b0a:	bc3c      	pop	{r2, r3, r4, r5}
     b0c:	4690      	mov	r8, r2
     b0e:	4699      	mov	r9, r3
     b10:	46a2      	mov	sl, r4
     b12:	46ab      	mov	fp, r5
     b14:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000b16 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     b16:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     b18:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     b1a:	2340      	movs	r3, #64	; 0x40
     b1c:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     b1e:	4281      	cmp	r1, r0
     b20:	d202      	bcs.n	b28 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     b22:	0018      	movs	r0, r3
     b24:	bd10      	pop	{r4, pc}
		baud_calculated++;
     b26:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     b28:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     b2a:	1c63      	adds	r3, r4, #1
     b2c:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     b2e:	4288      	cmp	r0, r1
     b30:	d9f9      	bls.n	b26 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     b32:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     b34:	2cff      	cmp	r4, #255	; 0xff
     b36:	d8f4      	bhi.n	b22 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     b38:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     b3a:	2300      	movs	r3, #0
     b3c:	e7f1      	b.n	b22 <_sercom_get_sync_baud_val+0xc>
	...

00000b40 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     b40:	b5f0      	push	{r4, r5, r6, r7, lr}
     b42:	b083      	sub	sp, #12
     b44:	000f      	movs	r7, r1
     b46:	0016      	movs	r6, r2
     b48:	aa08      	add	r2, sp, #32
     b4a:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     b4c:	0004      	movs	r4, r0
     b4e:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     b50:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     b52:	42bc      	cmp	r4, r7
     b54:	d902      	bls.n	b5c <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     b56:	0010      	movs	r0, r2
     b58:	b003      	add	sp, #12
     b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     b5c:	2b00      	cmp	r3, #0
     b5e:	d114      	bne.n	b8a <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     b60:	0002      	movs	r2, r0
     b62:	0008      	movs	r0, r1
     b64:	2100      	movs	r1, #0
     b66:	4c19      	ldr	r4, [pc, #100]	; (bcc <_sercom_get_async_baud_val+0x8c>)
     b68:	47a0      	blx	r4
     b6a:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     b6c:	003a      	movs	r2, r7
     b6e:	2300      	movs	r3, #0
     b70:	2000      	movs	r0, #0
     b72:	4c17      	ldr	r4, [pc, #92]	; (bd0 <_sercom_get_async_baud_val+0x90>)
     b74:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     b76:	2200      	movs	r2, #0
     b78:	2301      	movs	r3, #1
     b7a:	1a12      	subs	r2, r2, r0
     b7c:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     b7e:	0c12      	lsrs	r2, r2, #16
     b80:	041b      	lsls	r3, r3, #16
     b82:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     b84:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     b86:	2200      	movs	r2, #0
     b88:	e7e5      	b.n	b56 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     b8a:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     b8c:	2b01      	cmp	r3, #1
     b8e:	d1f9      	bne.n	b84 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     b90:	000a      	movs	r2, r1
     b92:	2300      	movs	r3, #0
     b94:	2100      	movs	r1, #0
     b96:	4c0d      	ldr	r4, [pc, #52]	; (bcc <_sercom_get_async_baud_val+0x8c>)
     b98:	47a0      	blx	r4
     b9a:	0002      	movs	r2, r0
     b9c:	000b      	movs	r3, r1
     b9e:	9200      	str	r2, [sp, #0]
     ba0:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     ba2:	0038      	movs	r0, r7
     ba4:	2100      	movs	r1, #0
     ba6:	4c0a      	ldr	r4, [pc, #40]	; (bd0 <_sercom_get_async_baud_val+0x90>)
     ba8:	47a0      	blx	r4
     baa:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     bac:	2380      	movs	r3, #128	; 0x80
     bae:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     bb0:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     bb2:	4298      	cmp	r0, r3
     bb4:	d8cf      	bhi.n	b56 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     bb6:	0f79      	lsrs	r1, r7, #29
     bb8:	00f8      	lsls	r0, r7, #3
     bba:	9a00      	ldr	r2, [sp, #0]
     bbc:	9b01      	ldr	r3, [sp, #4]
     bbe:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     bc0:	00ea      	lsls	r2, r5, #3
     bc2:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     bc4:	b2d2      	uxtb	r2, r2
     bc6:	0352      	lsls	r2, r2, #13
     bc8:	432a      	orrs	r2, r5
     bca:	e7db      	b.n	b84 <_sercom_get_async_baud_val+0x44>
     bcc:	00003329 	.word	0x00003329
     bd0:	00000a5d 	.word	0x00000a5d

00000bd4 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     bd4:	b510      	push	{r4, lr}
     bd6:	b082      	sub	sp, #8
     bd8:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     bda:	4b0e      	ldr	r3, [pc, #56]	; (c14 <sercom_set_gclk_generator+0x40>)
     bdc:	781b      	ldrb	r3, [r3, #0]
     bde:	2b00      	cmp	r3, #0
     be0:	d007      	beq.n	bf2 <sercom_set_gclk_generator+0x1e>
     be2:	2900      	cmp	r1, #0
     be4:	d105      	bne.n	bf2 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     be6:	4b0b      	ldr	r3, [pc, #44]	; (c14 <sercom_set_gclk_generator+0x40>)
     be8:	785b      	ldrb	r3, [r3, #1]
     bea:	4283      	cmp	r3, r0
     bec:	d010      	beq.n	c10 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     bee:	201d      	movs	r0, #29
     bf0:	e00c      	b.n	c0c <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     bf2:	a901      	add	r1, sp, #4
     bf4:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     bf6:	2013      	movs	r0, #19
     bf8:	4b07      	ldr	r3, [pc, #28]	; (c18 <sercom_set_gclk_generator+0x44>)
     bfa:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     bfc:	2013      	movs	r0, #19
     bfe:	4b07      	ldr	r3, [pc, #28]	; (c1c <sercom_set_gclk_generator+0x48>)
     c00:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     c02:	4b04      	ldr	r3, [pc, #16]	; (c14 <sercom_set_gclk_generator+0x40>)
     c04:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     c06:	2201      	movs	r2, #1
     c08:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     c0a:	2000      	movs	r0, #0
}
     c0c:	b002      	add	sp, #8
     c0e:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     c10:	2000      	movs	r0, #0
     c12:	e7fb      	b.n	c0c <sercom_set_gclk_generator+0x38>
     c14:	20000260 	.word	0x20000260
     c18:	00001acd 	.word	0x00001acd
     c1c:	00001a41 	.word	0x00001a41

00000c20 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     c20:	4b40      	ldr	r3, [pc, #256]	; (d24 <_sercom_get_default_pad+0x104>)
     c22:	4298      	cmp	r0, r3
     c24:	d031      	beq.n	c8a <_sercom_get_default_pad+0x6a>
     c26:	d90a      	bls.n	c3e <_sercom_get_default_pad+0x1e>
     c28:	4b3f      	ldr	r3, [pc, #252]	; (d28 <_sercom_get_default_pad+0x108>)
     c2a:	4298      	cmp	r0, r3
     c2c:	d04d      	beq.n	cca <_sercom_get_default_pad+0xaa>
     c2e:	4b3f      	ldr	r3, [pc, #252]	; (d2c <_sercom_get_default_pad+0x10c>)
     c30:	4298      	cmp	r0, r3
     c32:	d05a      	beq.n	cea <_sercom_get_default_pad+0xca>
     c34:	4b3e      	ldr	r3, [pc, #248]	; (d30 <_sercom_get_default_pad+0x110>)
     c36:	4298      	cmp	r0, r3
     c38:	d037      	beq.n	caa <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     c3a:	2000      	movs	r0, #0
}
     c3c:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     c3e:	4b3d      	ldr	r3, [pc, #244]	; (d34 <_sercom_get_default_pad+0x114>)
     c40:	4298      	cmp	r0, r3
     c42:	d00c      	beq.n	c5e <_sercom_get_default_pad+0x3e>
     c44:	4b3c      	ldr	r3, [pc, #240]	; (d38 <_sercom_get_default_pad+0x118>)
     c46:	4298      	cmp	r0, r3
     c48:	d1f7      	bne.n	c3a <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     c4a:	2901      	cmp	r1, #1
     c4c:	d017      	beq.n	c7e <_sercom_get_default_pad+0x5e>
     c4e:	2900      	cmp	r1, #0
     c50:	d05d      	beq.n	d0e <_sercom_get_default_pad+0xee>
     c52:	2902      	cmp	r1, #2
     c54:	d015      	beq.n	c82 <_sercom_get_default_pad+0x62>
     c56:	2903      	cmp	r1, #3
     c58:	d015      	beq.n	c86 <_sercom_get_default_pad+0x66>
	return 0;
     c5a:	2000      	movs	r0, #0
     c5c:	e7ee      	b.n	c3c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     c5e:	2901      	cmp	r1, #1
     c60:	d007      	beq.n	c72 <_sercom_get_default_pad+0x52>
     c62:	2900      	cmp	r1, #0
     c64:	d051      	beq.n	d0a <_sercom_get_default_pad+0xea>
     c66:	2902      	cmp	r1, #2
     c68:	d005      	beq.n	c76 <_sercom_get_default_pad+0x56>
     c6a:	2903      	cmp	r1, #3
     c6c:	d005      	beq.n	c7a <_sercom_get_default_pad+0x5a>
	return 0;
     c6e:	2000      	movs	r0, #0
     c70:	e7e4      	b.n	c3c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     c72:	4832      	ldr	r0, [pc, #200]	; (d3c <_sercom_get_default_pad+0x11c>)
     c74:	e7e2      	b.n	c3c <_sercom_get_default_pad+0x1c>
     c76:	4832      	ldr	r0, [pc, #200]	; (d40 <_sercom_get_default_pad+0x120>)
     c78:	e7e0      	b.n	c3c <_sercom_get_default_pad+0x1c>
     c7a:	4832      	ldr	r0, [pc, #200]	; (d44 <_sercom_get_default_pad+0x124>)
     c7c:	e7de      	b.n	c3c <_sercom_get_default_pad+0x1c>
     c7e:	4832      	ldr	r0, [pc, #200]	; (d48 <_sercom_get_default_pad+0x128>)
     c80:	e7dc      	b.n	c3c <_sercom_get_default_pad+0x1c>
     c82:	4832      	ldr	r0, [pc, #200]	; (d4c <_sercom_get_default_pad+0x12c>)
     c84:	e7da      	b.n	c3c <_sercom_get_default_pad+0x1c>
     c86:	4832      	ldr	r0, [pc, #200]	; (d50 <_sercom_get_default_pad+0x130>)
     c88:	e7d8      	b.n	c3c <_sercom_get_default_pad+0x1c>
     c8a:	2901      	cmp	r1, #1
     c8c:	d007      	beq.n	c9e <_sercom_get_default_pad+0x7e>
     c8e:	2900      	cmp	r1, #0
     c90:	d03f      	beq.n	d12 <_sercom_get_default_pad+0xf2>
     c92:	2902      	cmp	r1, #2
     c94:	d005      	beq.n	ca2 <_sercom_get_default_pad+0x82>
     c96:	2903      	cmp	r1, #3
     c98:	d005      	beq.n	ca6 <_sercom_get_default_pad+0x86>
	return 0;
     c9a:	2000      	movs	r0, #0
     c9c:	e7ce      	b.n	c3c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     c9e:	482d      	ldr	r0, [pc, #180]	; (d54 <_sercom_get_default_pad+0x134>)
     ca0:	e7cc      	b.n	c3c <_sercom_get_default_pad+0x1c>
     ca2:	482d      	ldr	r0, [pc, #180]	; (d58 <_sercom_get_default_pad+0x138>)
     ca4:	e7ca      	b.n	c3c <_sercom_get_default_pad+0x1c>
     ca6:	482d      	ldr	r0, [pc, #180]	; (d5c <_sercom_get_default_pad+0x13c>)
     ca8:	e7c8      	b.n	c3c <_sercom_get_default_pad+0x1c>
     caa:	2901      	cmp	r1, #1
     cac:	d007      	beq.n	cbe <_sercom_get_default_pad+0x9e>
     cae:	2900      	cmp	r1, #0
     cb0:	d031      	beq.n	d16 <_sercom_get_default_pad+0xf6>
     cb2:	2902      	cmp	r1, #2
     cb4:	d005      	beq.n	cc2 <_sercom_get_default_pad+0xa2>
     cb6:	2903      	cmp	r1, #3
     cb8:	d005      	beq.n	cc6 <_sercom_get_default_pad+0xa6>
	return 0;
     cba:	2000      	movs	r0, #0
     cbc:	e7be      	b.n	c3c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     cbe:	4828      	ldr	r0, [pc, #160]	; (d60 <_sercom_get_default_pad+0x140>)
     cc0:	e7bc      	b.n	c3c <_sercom_get_default_pad+0x1c>
     cc2:	4828      	ldr	r0, [pc, #160]	; (d64 <_sercom_get_default_pad+0x144>)
     cc4:	e7ba      	b.n	c3c <_sercom_get_default_pad+0x1c>
     cc6:	4828      	ldr	r0, [pc, #160]	; (d68 <_sercom_get_default_pad+0x148>)
     cc8:	e7b8      	b.n	c3c <_sercom_get_default_pad+0x1c>
     cca:	2901      	cmp	r1, #1
     ccc:	d007      	beq.n	cde <_sercom_get_default_pad+0xbe>
     cce:	2900      	cmp	r1, #0
     cd0:	d023      	beq.n	d1a <_sercom_get_default_pad+0xfa>
     cd2:	2902      	cmp	r1, #2
     cd4:	d005      	beq.n	ce2 <_sercom_get_default_pad+0xc2>
     cd6:	2903      	cmp	r1, #3
     cd8:	d005      	beq.n	ce6 <_sercom_get_default_pad+0xc6>
	return 0;
     cda:	2000      	movs	r0, #0
     cdc:	e7ae      	b.n	c3c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     cde:	4823      	ldr	r0, [pc, #140]	; (d6c <_sercom_get_default_pad+0x14c>)
     ce0:	e7ac      	b.n	c3c <_sercom_get_default_pad+0x1c>
     ce2:	4823      	ldr	r0, [pc, #140]	; (d70 <_sercom_get_default_pad+0x150>)
     ce4:	e7aa      	b.n	c3c <_sercom_get_default_pad+0x1c>
     ce6:	4823      	ldr	r0, [pc, #140]	; (d74 <_sercom_get_default_pad+0x154>)
     ce8:	e7a8      	b.n	c3c <_sercom_get_default_pad+0x1c>
     cea:	2901      	cmp	r1, #1
     cec:	d007      	beq.n	cfe <_sercom_get_default_pad+0xde>
     cee:	2900      	cmp	r1, #0
     cf0:	d015      	beq.n	d1e <_sercom_get_default_pad+0xfe>
     cf2:	2902      	cmp	r1, #2
     cf4:	d005      	beq.n	d02 <_sercom_get_default_pad+0xe2>
     cf6:	2903      	cmp	r1, #3
     cf8:	d005      	beq.n	d06 <_sercom_get_default_pad+0xe6>
	return 0;
     cfa:	2000      	movs	r0, #0
     cfc:	e79e      	b.n	c3c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     cfe:	481e      	ldr	r0, [pc, #120]	; (d78 <_sercom_get_default_pad+0x158>)
     d00:	e79c      	b.n	c3c <_sercom_get_default_pad+0x1c>
     d02:	481e      	ldr	r0, [pc, #120]	; (d7c <_sercom_get_default_pad+0x15c>)
     d04:	e79a      	b.n	c3c <_sercom_get_default_pad+0x1c>
     d06:	481e      	ldr	r0, [pc, #120]	; (d80 <_sercom_get_default_pad+0x160>)
     d08:	e798      	b.n	c3c <_sercom_get_default_pad+0x1c>
     d0a:	481e      	ldr	r0, [pc, #120]	; (d84 <_sercom_get_default_pad+0x164>)
     d0c:	e796      	b.n	c3c <_sercom_get_default_pad+0x1c>
     d0e:	2003      	movs	r0, #3
     d10:	e794      	b.n	c3c <_sercom_get_default_pad+0x1c>
     d12:	481d      	ldr	r0, [pc, #116]	; (d88 <_sercom_get_default_pad+0x168>)
     d14:	e792      	b.n	c3c <_sercom_get_default_pad+0x1c>
     d16:	481d      	ldr	r0, [pc, #116]	; (d8c <_sercom_get_default_pad+0x16c>)
     d18:	e790      	b.n	c3c <_sercom_get_default_pad+0x1c>
     d1a:	481d      	ldr	r0, [pc, #116]	; (d90 <_sercom_get_default_pad+0x170>)
     d1c:	e78e      	b.n	c3c <_sercom_get_default_pad+0x1c>
     d1e:	481d      	ldr	r0, [pc, #116]	; (d94 <_sercom_get_default_pad+0x174>)
     d20:	e78c      	b.n	c3c <_sercom_get_default_pad+0x1c>
     d22:	46c0      	nop			; (mov r8, r8)
     d24:	42001000 	.word	0x42001000
     d28:	42001800 	.word	0x42001800
     d2c:	42001c00 	.word	0x42001c00
     d30:	42001400 	.word	0x42001400
     d34:	42000800 	.word	0x42000800
     d38:	42000c00 	.word	0x42000c00
     d3c:	00050003 	.word	0x00050003
     d40:	00060003 	.word	0x00060003
     d44:	00070003 	.word	0x00070003
     d48:	00010003 	.word	0x00010003
     d4c:	001e0003 	.word	0x001e0003
     d50:	001f0003 	.word	0x001f0003
     d54:	00090003 	.word	0x00090003
     d58:	000a0003 	.word	0x000a0003
     d5c:	000b0003 	.word	0x000b0003
     d60:	00110003 	.word	0x00110003
     d64:	00120003 	.word	0x00120003
     d68:	00130003 	.word	0x00130003
     d6c:	000d0003 	.word	0x000d0003
     d70:	000e0003 	.word	0x000e0003
     d74:	000f0003 	.word	0x000f0003
     d78:	00170003 	.word	0x00170003
     d7c:	00180003 	.word	0x00180003
     d80:	00190003 	.word	0x00190003
     d84:	00040003 	.word	0x00040003
     d88:	00080003 	.word	0x00080003
     d8c:	00100003 	.word	0x00100003
     d90:	000c0003 	.word	0x000c0003
     d94:	00160003 	.word	0x00160003

00000d98 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     d98:	b530      	push	{r4, r5, lr}
     d9a:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     d9c:	4b0b      	ldr	r3, [pc, #44]	; (dcc <_sercom_get_sercom_inst_index+0x34>)
     d9e:	466a      	mov	r2, sp
     da0:	cb32      	ldmia	r3!, {r1, r4, r5}
     da2:	c232      	stmia	r2!, {r1, r4, r5}
     da4:	cb32      	ldmia	r3!, {r1, r4, r5}
     da6:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     da8:	9b00      	ldr	r3, [sp, #0]
     daa:	4283      	cmp	r3, r0
     dac:	d00b      	beq.n	dc6 <_sercom_get_sercom_inst_index+0x2e>
     dae:	2301      	movs	r3, #1
     db0:	009a      	lsls	r2, r3, #2
     db2:	4669      	mov	r1, sp
     db4:	5852      	ldr	r2, [r2, r1]
     db6:	4282      	cmp	r2, r0
     db8:	d006      	beq.n	dc8 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     dba:	3301      	adds	r3, #1
     dbc:	2b06      	cmp	r3, #6
     dbe:	d1f7      	bne.n	db0 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     dc0:	2000      	movs	r0, #0
}
     dc2:	b007      	add	sp, #28
     dc4:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     dc6:	2300      	movs	r3, #0
			return i;
     dc8:	b2d8      	uxtb	r0, r3
     dca:	e7fa      	b.n	dc2 <_sercom_get_sercom_inst_index+0x2a>
     dcc:	00004be4 	.word	0x00004be4

00000dd0 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     dd0:	4770      	bx	lr
	...

00000dd4 <_sercom_set_handler>:


void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
	// Initialize handlers with default handler and device instances with 0 
	if (_handler_table_initialized == false) {
     dd6:	4b0a      	ldr	r3, [pc, #40]	; (e00 <_sercom_set_handler+0x2c>)
     dd8:	781b      	ldrb	r3, [r3, #0]
     dda:	2b00      	cmp	r3, #0
     ddc:	d10c      	bne.n	df8 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     dde:	4f09      	ldr	r7, [pc, #36]	; (e04 <_sercom_set_handler+0x30>)
     de0:	4e09      	ldr	r6, [pc, #36]	; (e08 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     de2:	4d0a      	ldr	r5, [pc, #40]	; (e0c <_sercom_set_handler+0x38>)
     de4:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     de6:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     de8:	195a      	adds	r2, r3, r5
     dea:	6014      	str	r4, [r2, #0]
     dec:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     dee:	2b18      	cmp	r3, #24
     df0:	d1f9      	bne.n	de6 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
     df2:	2201      	movs	r2, #1
     df4:	4b02      	ldr	r3, [pc, #8]	; (e00 <_sercom_set_handler+0x2c>)
     df6:	701a      	strb	r2, [r3, #0]
	}

	// Save interrupt handler 
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     df8:	0080      	lsls	r0, r0, #2
     dfa:	4b02      	ldr	r3, [pc, #8]	; (e04 <_sercom_set_handler+0x30>)
     dfc:	50c1      	str	r1, [r0, r3]
}
     dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e00:	20000262 	.word	0x20000262
     e04:	20000264 	.word	0x20000264
     e08:	00000dd1 	.word	0x00000dd1
     e0c:	200002ac 	.word	0x200002ac

00000e10 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     e10:	b500      	push	{lr}
     e12:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     e14:	2309      	movs	r3, #9
     e16:	466a      	mov	r2, sp
     e18:	7013      	strb	r3, [r2, #0]
     e1a:	3301      	adds	r3, #1
     e1c:	7053      	strb	r3, [r2, #1]
     e1e:	3301      	adds	r3, #1
     e20:	7093      	strb	r3, [r2, #2]
     e22:	3301      	adds	r3, #1
     e24:	70d3      	strb	r3, [r2, #3]
     e26:	3301      	adds	r3, #1
     e28:	7113      	strb	r3, [r2, #4]
     e2a:	3301      	adds	r3, #1
     e2c:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     e2e:	4b03      	ldr	r3, [pc, #12]	; (e3c <_sercom_get_interrupt_vector+0x2c>)
     e30:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     e32:	466b      	mov	r3, sp
     e34:	5618      	ldrsb	r0, [r3, r0]
}
     e36:	b003      	add	sp, #12
     e38:	bd00      	pop	{pc}
     e3a:	46c0      	nop			; (mov r8, r8)
     e3c:	00000d99 	.word	0x00000d99

00000e40 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     e40:	b510      	push	{r4, lr}
     e42:	4b02      	ldr	r3, [pc, #8]	; (e4c <SERCOM0_Handler+0xc>)
     e44:	681b      	ldr	r3, [r3, #0]
     e46:	2000      	movs	r0, #0
     e48:	4798      	blx	r3
     e4a:	bd10      	pop	{r4, pc}
     e4c:	20000264 	.word	0x20000264

00000e50 <SERCOM1_Handler>:
     e50:	b510      	push	{r4, lr}
     e52:	4b02      	ldr	r3, [pc, #8]	; (e5c <SERCOM1_Handler+0xc>)
     e54:	685b      	ldr	r3, [r3, #4]
     e56:	2001      	movs	r0, #1
     e58:	4798      	blx	r3
     e5a:	bd10      	pop	{r4, pc}
     e5c:	20000264 	.word	0x20000264

00000e60 <SERCOM2_Handler>:
     e60:	b510      	push	{r4, lr}
     e62:	4b02      	ldr	r3, [pc, #8]	; (e6c <SERCOM2_Handler+0xc>)
     e64:	689b      	ldr	r3, [r3, #8]
     e66:	2002      	movs	r0, #2
     e68:	4798      	blx	r3
     e6a:	bd10      	pop	{r4, pc}
     e6c:	20000264 	.word	0x20000264

00000e70 <SERCOM3_Handler>:
     e70:	b510      	push	{r4, lr}
     e72:	4b02      	ldr	r3, [pc, #8]	; (e7c <SERCOM3_Handler+0xc>)
     e74:	68db      	ldr	r3, [r3, #12]
     e76:	2003      	movs	r0, #3
     e78:	4798      	blx	r3
     e7a:	bd10      	pop	{r4, pc}
     e7c:	20000264 	.word	0x20000264

00000e80 <SERCOM4_Handler>:
     e80:	b510      	push	{r4, lr}
     e82:	4b02      	ldr	r3, [pc, #8]	; (e8c <SERCOM4_Handler+0xc>)
     e84:	691b      	ldr	r3, [r3, #16]
     e86:	2004      	movs	r0, #4
     e88:	4798      	blx	r3
     e8a:	bd10      	pop	{r4, pc}
     e8c:	20000264 	.word	0x20000264

00000e90 <SERCOM5_Handler>:
     e90:	b510      	push	{r4, lr}
     e92:	4b02      	ldr	r3, [pc, #8]	; (e9c <SERCOM5_Handler+0xc>)
     e94:	695b      	ldr	r3, [r3, #20]
     e96:	2005      	movs	r0, #5
     e98:	4798      	blx	r3
     e9a:	bd10      	pop	{r4, pc}
     e9c:	20000264 	.word	0x20000264

00000ea0 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
     ea2:	46de      	mov	lr, fp
     ea4:	4657      	mov	r7, sl
     ea6:	464e      	mov	r6, r9
     ea8:	4645      	mov	r5, r8
     eaa:	b5e0      	push	{r5, r6, r7, lr}
     eac:	b091      	sub	sp, #68	; 0x44
     eae:	0005      	movs	r5, r0
     eb0:	000c      	movs	r4, r1
     eb2:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     eb4:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     eb6:	0008      	movs	r0, r1
     eb8:	4bba      	ldr	r3, [pc, #744]	; (11a4 <usart_init+0x304>)
     eba:	4798      	blx	r3
     ebc:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     ebe:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     ec0:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     ec2:	07db      	lsls	r3, r3, #31
     ec4:	d506      	bpl.n	ed4 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     ec6:	b011      	add	sp, #68	; 0x44
     ec8:	bc3c      	pop	{r2, r3, r4, r5}
     eca:	4690      	mov	r8, r2
     ecc:	4699      	mov	r9, r3
     ece:	46a2      	mov	sl, r4
     ed0:	46ab      	mov	fp, r5
     ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     ed4:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
     ed6:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     ed8:	079b      	lsls	r3, r3, #30
     eda:	d4f4      	bmi.n	ec6 <usart_init+0x26>
     edc:	49b2      	ldr	r1, [pc, #712]	; (11a8 <usart_init+0x308>)
     ede:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     ee0:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     ee2:	2301      	movs	r3, #1
     ee4:	40bb      	lsls	r3, r7
     ee6:	4303      	orrs	r3, r0
     ee8:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     eea:	a90f      	add	r1, sp, #60	; 0x3c
     eec:	272d      	movs	r7, #45	; 0x2d
     eee:	5df3      	ldrb	r3, [r6, r7]
     ef0:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     ef2:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     ef4:	b2d3      	uxtb	r3, r2
     ef6:	9302      	str	r3, [sp, #8]
     ef8:	0018      	movs	r0, r3
     efa:	4bac      	ldr	r3, [pc, #688]	; (11ac <usart_init+0x30c>)
     efc:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     efe:	9802      	ldr	r0, [sp, #8]
     f00:	4bab      	ldr	r3, [pc, #684]	; (11b0 <usart_init+0x310>)
     f02:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     f04:	5df0      	ldrb	r0, [r6, r7]
     f06:	2100      	movs	r1, #0
     f08:	4baa      	ldr	r3, [pc, #680]	; (11b4 <usart_init+0x314>)
     f0a:	4798      	blx	r3
	module->character_size = config->character_size;
     f0c:	7af3      	ldrb	r3, [r6, #11]
     f0e:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
     f10:	2324      	movs	r3, #36	; 0x24
     f12:	5cf3      	ldrb	r3, [r6, r3]
     f14:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     f16:	2325      	movs	r3, #37	; 0x25
     f18:	5cf3      	ldrb	r3, [r6, r3]
     f1a:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
     f1c:	7ef3      	ldrb	r3, [r6, #27]
     f1e:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     f20:	7f33      	ldrb	r3, [r6, #28]
     f22:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
     f24:	682b      	ldr	r3, [r5, #0]
     f26:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     f28:	0018      	movs	r0, r3
     f2a:	4b9e      	ldr	r3, [pc, #632]	; (11a4 <usart_init+0x304>)
     f2c:	4798      	blx	r3
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     f2e:	3014      	adds	r0, #20
	uint16_t baud  = 0;
     f30:	2200      	movs	r2, #0
     f32:	230e      	movs	r3, #14
     f34:	a906      	add	r1, sp, #24
     f36:	468c      	mov	ip, r1
     f38:	4463      	add	r3, ip
     f3a:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
     f3c:	8a32      	ldrh	r2, [r6, #16]
     f3e:	9202      	str	r2, [sp, #8]
     f40:	2380      	movs	r3, #128	; 0x80
     f42:	01db      	lsls	r3, r3, #7
     f44:	429a      	cmp	r2, r3
     f46:	d100      	bne.n	f4a <usart_init+0xaa>
     f48:	e09a      	b.n	1080 <usart_init+0x1e0>
     f4a:	d90f      	bls.n	f6c <usart_init+0xcc>
     f4c:	23c0      	movs	r3, #192	; 0xc0
     f4e:	01db      	lsls	r3, r3, #7
     f50:	9a02      	ldr	r2, [sp, #8]
     f52:	429a      	cmp	r2, r3
     f54:	d100      	bne.n	f58 <usart_init+0xb8>
     f56:	e08e      	b.n	1076 <usart_init+0x1d6>
     f58:	2380      	movs	r3, #128	; 0x80
     f5a:	021b      	lsls	r3, r3, #8
     f5c:	429a      	cmp	r2, r3
     f5e:	d000      	beq.n	f62 <usart_init+0xc2>
     f60:	e11b      	b.n	119a <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     f62:	2303      	movs	r3, #3
     f64:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     f66:	2300      	movs	r3, #0
     f68:	9307      	str	r3, [sp, #28]
     f6a:	e008      	b.n	f7e <usart_init+0xde>
	switch (config->sample_rate) {
     f6c:	2380      	movs	r3, #128	; 0x80
     f6e:	019b      	lsls	r3, r3, #6
     f70:	429a      	cmp	r2, r3
     f72:	d000      	beq.n	f76 <usart_init+0xd6>
     f74:	e111      	b.n	119a <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     f76:	2310      	movs	r3, #16
     f78:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     f7a:	3b0f      	subs	r3, #15
     f7c:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
     f7e:	6833      	ldr	r3, [r6, #0]
     f80:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     f82:	68f3      	ldr	r3, [r6, #12]
     f84:	469b      	mov	fp, r3
		config->sample_adjustment |
     f86:	6973      	ldr	r3, [r6, #20]
     f88:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     f8a:	7e33      	ldrb	r3, [r6, #24]
     f8c:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     f8e:	2326      	movs	r3, #38	; 0x26
     f90:	5cf3      	ldrb	r3, [r6, r3]
     f92:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     f94:	6873      	ldr	r3, [r6, #4]
     f96:	4699      	mov	r9, r3
	switch (transfer_mode)
     f98:	2b00      	cmp	r3, #0
     f9a:	d100      	bne.n	f9e <usart_init+0xfe>
     f9c:	e09c      	b.n	10d8 <usart_init+0x238>
     f9e:	2380      	movs	r3, #128	; 0x80
     fa0:	055b      	lsls	r3, r3, #21
     fa2:	4599      	cmp	r9, r3
     fa4:	d100      	bne.n	fa8 <usart_init+0x108>
     fa6:	e080      	b.n	10aa <usart_init+0x20a>
	if(config->encoding_format_enable) {
     fa8:	7e73      	ldrb	r3, [r6, #25]
     faa:	2b00      	cmp	r3, #0
     fac:	d002      	beq.n	fb4 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     fae:	7eb3      	ldrb	r3, [r6, #26]
     fb0:	4642      	mov	r2, r8
     fb2:	7393      	strb	r3, [r2, #14]
	usart_hw->BAUD.reg = baud;
     fb4:	230e      	movs	r3, #14
     fb6:	aa06      	add	r2, sp, #24
     fb8:	4694      	mov	ip, r2
     fba:	4463      	add	r3, ip
     fbc:	881b      	ldrh	r3, [r3, #0]
     fbe:	4642      	mov	r2, r8
     fc0:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
     fc2:	9b05      	ldr	r3, [sp, #20]
     fc4:	465a      	mov	r2, fp
     fc6:	4313      	orrs	r3, r2
     fc8:	9a03      	ldr	r2, [sp, #12]
     fca:	4313      	orrs	r3, r2
     fcc:	464a      	mov	r2, r9
     fce:	4313      	orrs	r3, r2
     fd0:	9f02      	ldr	r7, [sp, #8]
     fd2:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     fd4:	9b04      	ldr	r3, [sp, #16]
     fd6:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
     fd8:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     fda:	4653      	mov	r3, sl
     fdc:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
     fde:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
     fe0:	2327      	movs	r3, #39	; 0x27
     fe2:	5cf3      	ldrb	r3, [r6, r3]
     fe4:	2b00      	cmp	r3, #0
     fe6:	d101      	bne.n	fec <usart_init+0x14c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     fe8:	3304      	adds	r3, #4
     fea:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     fec:	7e73      	ldrb	r3, [r6, #25]
     fee:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     ff0:	7f32      	ldrb	r2, [r6, #28]
     ff2:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     ff4:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     ff6:	7f72      	ldrb	r2, [r6, #29]
     ff8:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     ffa:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     ffc:	2224      	movs	r2, #36	; 0x24
     ffe:	5cb2      	ldrb	r2, [r6, r2]
    1000:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1002:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    1004:	2225      	movs	r2, #37	; 0x25
    1006:	5cb2      	ldrb	r2, [r6, r2]
    1008:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    100a:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    100c:	7ab1      	ldrb	r1, [r6, #10]
    100e:	7af2      	ldrb	r2, [r6, #11]
    1010:	4311      	orrs	r1, r2
    1012:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    1014:	8933      	ldrh	r3, [r6, #8]
    1016:	2bff      	cmp	r3, #255	; 0xff
    1018:	d100      	bne.n	101c <usart_init+0x17c>
    101a:	e081      	b.n	1120 <usart_init+0x280>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    101c:	2280      	movs	r2, #128	; 0x80
    101e:	0452      	lsls	r2, r2, #17
    1020:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    1022:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    1024:	232c      	movs	r3, #44	; 0x2c
    1026:	5cf3      	ldrb	r3, [r6, r3]
    1028:	2b00      	cmp	r3, #0
    102a:	d103      	bne.n	1034 <usart_init+0x194>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    102c:	4b62      	ldr	r3, [pc, #392]	; (11b8 <usart_init+0x318>)
    102e:	789b      	ldrb	r3, [r3, #2]
    1030:	079b      	lsls	r3, r3, #30
    1032:	d501      	bpl.n	1038 <usart_init+0x198>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    1034:	2380      	movs	r3, #128	; 0x80
    1036:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    1038:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    103a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    103c:	2b00      	cmp	r3, #0
    103e:	d1fc      	bne.n	103a <usart_init+0x19a>
	usart_hw->CTRLB.reg = ctrlb;
    1040:	4643      	mov	r3, r8
    1042:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1044:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1046:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1048:	2b00      	cmp	r3, #0
    104a:	d1fc      	bne.n	1046 <usart_init+0x1a6>
	usart_hw->CTRLA.reg = ctrla;
    104c:	4643      	mov	r3, r8
    104e:	601f      	str	r7, [r3, #0]
    1050:	ab0e      	add	r3, sp, #56	; 0x38
    1052:	2280      	movs	r2, #128	; 0x80
    1054:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1056:	2200      	movs	r2, #0
    1058:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    105a:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    105c:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    105e:	6b33      	ldr	r3, [r6, #48]	; 0x30
    1060:	930a      	str	r3, [sp, #40]	; 0x28
    1062:	6b73      	ldr	r3, [r6, #52]	; 0x34
    1064:	930b      	str	r3, [sp, #44]	; 0x2c
    1066:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    1068:	930c      	str	r3, [sp, #48]	; 0x30
    106a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    106c:	9302      	str	r3, [sp, #8]
    106e:	930d      	str	r3, [sp, #52]	; 0x34
    1070:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1072:	ae0a      	add	r6, sp, #40	; 0x28
    1074:	e063      	b.n	113e <usart_init+0x29e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1076:	2308      	movs	r3, #8
    1078:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    107a:	3b07      	subs	r3, #7
    107c:	9307      	str	r3, [sp, #28]
    107e:	e77e      	b.n	f7e <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    1080:	6833      	ldr	r3, [r6, #0]
    1082:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    1084:	68f3      	ldr	r3, [r6, #12]
    1086:	469b      	mov	fp, r3
		config->sample_adjustment |
    1088:	6973      	ldr	r3, [r6, #20]
    108a:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    108c:	7e33      	ldrb	r3, [r6, #24]
    108e:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1090:	2326      	movs	r3, #38	; 0x26
    1092:	5cf3      	ldrb	r3, [r6, r3]
    1094:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    1096:	6873      	ldr	r3, [r6, #4]
    1098:	4699      	mov	r9, r3
	switch (transfer_mode)
    109a:	2b00      	cmp	r3, #0
    109c:	d018      	beq.n	10d0 <usart_init+0x230>
    109e:	2380      	movs	r3, #128	; 0x80
    10a0:	055b      	lsls	r3, r3, #21
    10a2:	4599      	cmp	r9, r3
    10a4:	d001      	beq.n	10aa <usart_init+0x20a>
	enum status_code status_code = STATUS_OK;
    10a6:	2000      	movs	r0, #0
    10a8:	e025      	b.n	10f6 <usart_init+0x256>
			if (!config->use_external_clock) {
    10aa:	2327      	movs	r3, #39	; 0x27
    10ac:	5cf3      	ldrb	r3, [r6, r3]
    10ae:	2b00      	cmp	r3, #0
    10b0:	d000      	beq.n	10b4 <usart_init+0x214>
    10b2:	e779      	b.n	fa8 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    10b4:	6a33      	ldr	r3, [r6, #32]
    10b6:	001f      	movs	r7, r3
    10b8:	b2c0      	uxtb	r0, r0
    10ba:	4b40      	ldr	r3, [pc, #256]	; (11bc <usart_init+0x31c>)
    10bc:	4798      	blx	r3
    10be:	0001      	movs	r1, r0
    10c0:	220e      	movs	r2, #14
    10c2:	ab06      	add	r3, sp, #24
    10c4:	469c      	mov	ip, r3
    10c6:	4462      	add	r2, ip
    10c8:	0038      	movs	r0, r7
    10ca:	4b3d      	ldr	r3, [pc, #244]	; (11c0 <usart_init+0x320>)
    10cc:	4798      	blx	r3
    10ce:	e012      	b.n	10f6 <usart_init+0x256>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    10d0:	2308      	movs	r3, #8
    10d2:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    10d4:	2300      	movs	r3, #0
    10d6:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    10d8:	2327      	movs	r3, #39	; 0x27
    10da:	5cf3      	ldrb	r3, [r6, r3]
    10dc:	2b00      	cmp	r3, #0
    10de:	d00e      	beq.n	10fe <usart_init+0x25e>
				status_code =
    10e0:	9b06      	ldr	r3, [sp, #24]
    10e2:	9300      	str	r3, [sp, #0]
    10e4:	9b07      	ldr	r3, [sp, #28]
    10e6:	220e      	movs	r2, #14
    10e8:	a906      	add	r1, sp, #24
    10ea:	468c      	mov	ip, r1
    10ec:	4462      	add	r2, ip
    10ee:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    10f0:	6a30      	ldr	r0, [r6, #32]
    10f2:	4f34      	ldr	r7, [pc, #208]	; (11c4 <usart_init+0x324>)
    10f4:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    10f6:	2800      	cmp	r0, #0
    10f8:	d000      	beq.n	10fc <usart_init+0x25c>
    10fa:	e6e4      	b.n	ec6 <usart_init+0x26>
    10fc:	e754      	b.n	fa8 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    10fe:	6a33      	ldr	r3, [r6, #32]
    1100:	001f      	movs	r7, r3
    1102:	b2c0      	uxtb	r0, r0
    1104:	4b2d      	ldr	r3, [pc, #180]	; (11bc <usart_init+0x31c>)
    1106:	4798      	blx	r3
    1108:	0001      	movs	r1, r0
				status_code =
    110a:	9b06      	ldr	r3, [sp, #24]
    110c:	9300      	str	r3, [sp, #0]
    110e:	9b07      	ldr	r3, [sp, #28]
    1110:	220e      	movs	r2, #14
    1112:	a806      	add	r0, sp, #24
    1114:	4684      	mov	ip, r0
    1116:	4462      	add	r2, ip
    1118:	0038      	movs	r0, r7
    111a:	4f2a      	ldr	r7, [pc, #168]	; (11c4 <usart_init+0x324>)
    111c:	47b8      	blx	r7
    111e:	e7ea      	b.n	10f6 <usart_init+0x256>
		if(config->lin_slave_enable) {
    1120:	7ef3      	ldrb	r3, [r6, #27]
    1122:	2b00      	cmp	r3, #0
    1124:	d100      	bne.n	1128 <usart_init+0x288>
    1126:	e77d      	b.n	1024 <usart_init+0x184>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    1128:	2380      	movs	r3, #128	; 0x80
    112a:	04db      	lsls	r3, r3, #19
    112c:	431f      	orrs	r7, r3
    112e:	e779      	b.n	1024 <usart_init+0x184>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1130:	0020      	movs	r0, r4
    1132:	4b25      	ldr	r3, [pc, #148]	; (11c8 <usart_init+0x328>)
    1134:	4798      	blx	r3
    1136:	e007      	b.n	1148 <usart_init+0x2a8>
    1138:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    113a:	2f04      	cmp	r7, #4
    113c:	d00d      	beq.n	115a <usart_init+0x2ba>
    113e:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1140:	00bb      	lsls	r3, r7, #2
    1142:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    1144:	2800      	cmp	r0, #0
    1146:	d0f3      	beq.n	1130 <usart_init+0x290>
		if (current_pinmux != PINMUX_UNUSED) {
    1148:	1c43      	adds	r3, r0, #1
    114a:	d0f5      	beq.n	1138 <usart_init+0x298>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    114c:	a90e      	add	r1, sp, #56	; 0x38
    114e:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1150:	0c00      	lsrs	r0, r0, #16
    1152:	b2c0      	uxtb	r0, r0
    1154:	4b1d      	ldr	r3, [pc, #116]	; (11cc <usart_init+0x32c>)
    1156:	4798      	blx	r3
    1158:	e7ee      	b.n	1138 <usart_init+0x298>
		module->callback[i]            = NULL;
    115a:	2300      	movs	r3, #0
    115c:	60eb      	str	r3, [r5, #12]
    115e:	612b      	str	r3, [r5, #16]
    1160:	616b      	str	r3, [r5, #20]
    1162:	61ab      	str	r3, [r5, #24]
    1164:	61eb      	str	r3, [r5, #28]
    1166:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    1168:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    116a:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    116c:	2200      	movs	r2, #0
    116e:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    1170:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    1172:	3330      	adds	r3, #48	; 0x30
    1174:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    1176:	3301      	adds	r3, #1
    1178:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    117a:	3301      	adds	r3, #1
    117c:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    117e:	3301      	adds	r3, #1
    1180:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    1182:	6828      	ldr	r0, [r5, #0]
    1184:	4b07      	ldr	r3, [pc, #28]	; (11a4 <usart_init+0x304>)
    1186:	4798      	blx	r3
    1188:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    118a:	4911      	ldr	r1, [pc, #68]	; (11d0 <usart_init+0x330>)
    118c:	4b11      	ldr	r3, [pc, #68]	; (11d4 <usart_init+0x334>)
    118e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    1190:	00a4      	lsls	r4, r4, #2
    1192:	4b11      	ldr	r3, [pc, #68]	; (11d8 <usart_init+0x338>)
    1194:	50e5      	str	r5, [r4, r3]
	return status_code;
    1196:	2000      	movs	r0, #0
    1198:	e695      	b.n	ec6 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    119a:	2310      	movs	r3, #16
    119c:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    119e:	2300      	movs	r3, #0
    11a0:	9307      	str	r3, [sp, #28]
    11a2:	e6ec      	b.n	f7e <usart_init+0xde>
    11a4:	00000d99 	.word	0x00000d99
    11a8:	40000400 	.word	0x40000400
    11ac:	00001acd 	.word	0x00001acd
    11b0:	00001a41 	.word	0x00001a41
    11b4:	00000bd5 	.word	0x00000bd5
    11b8:	41002000 	.word	0x41002000
    11bc:	00001ae9 	.word	0x00001ae9
    11c0:	00000b17 	.word	0x00000b17
    11c4:	00000b41 	.word	0x00000b41
    11c8:	00000c21 	.word	0x00000c21
    11cc:	00001bc5 	.word	0x00001bc5
    11d0:	000012f5 	.word	0x000012f5
    11d4:	00000dd5 	.word	0x00000dd5
    11d8:	200002ac 	.word	0x200002ac

000011dc <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    11dc:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    11de:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    11e0:	2a00      	cmp	r2, #0
    11e2:	d101      	bne.n	11e8 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    11e4:	0018      	movs	r0, r3
    11e6:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    11e8:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    11ea:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    11ec:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    11ee:	2a00      	cmp	r2, #0
    11f0:	d1f8      	bne.n	11e4 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    11f2:	6802      	ldr	r2, [r0, #0]
	usart_hw->DATA.reg = tx_data;
    11f4:	8511      	strh	r1, [r2, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    11f6:	2102      	movs	r1, #2
    11f8:	7e13      	ldrb	r3, [r2, #24]
    11fa:	420b      	tst	r3, r1
    11fc:	d0fc      	beq.n	11f8 <usart_write_wait+0x1c>
	return STATUS_OK;
    11fe:	2300      	movs	r3, #0
    1200:	e7f0      	b.n	11e4 <usart_write_wait+0x8>

00001202 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    1202:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    1204:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    1206:	2a00      	cmp	r2, #0
    1208:	d101      	bne.n	120e <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    120a:	0018      	movs	r0, r3
    120c:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    120e:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    1210:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    1212:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    1214:	2a00      	cmp	r2, #0
    1216:	d1f8      	bne.n	120a <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    1218:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    121a:	7e10      	ldrb	r0, [r2, #24]
    121c:	0740      	lsls	r0, r0, #29
    121e:	d5f4      	bpl.n	120a <usart_read_wait+0x8>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1220:	8b53      	ldrh	r3, [r2, #26]
    1222:	b2db      	uxtb	r3, r3
	if (error_code) {
    1224:	0698      	lsls	r0, r3, #26
    1226:	d01d      	beq.n	1264 <usart_read_wait+0x62>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    1228:	0798      	lsls	r0, r3, #30
    122a:	d503      	bpl.n	1234 <usart_read_wait+0x32>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    122c:	2302      	movs	r3, #2
    122e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    1230:	3318      	adds	r3, #24
    1232:	e7ea      	b.n	120a <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1234:	0758      	lsls	r0, r3, #29
    1236:	d503      	bpl.n	1240 <usart_read_wait+0x3e>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1238:	2304      	movs	r3, #4
    123a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    123c:	331a      	adds	r3, #26
    123e:	e7e4      	b.n	120a <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1240:	07d8      	lsls	r0, r3, #31
    1242:	d503      	bpl.n	124c <usart_read_wait+0x4a>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1244:	2301      	movs	r3, #1
    1246:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    1248:	3312      	adds	r3, #18
    124a:	e7de      	b.n	120a <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    124c:	06d8      	lsls	r0, r3, #27
    124e:	d503      	bpl.n	1258 <usart_read_wait+0x56>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1250:	2310      	movs	r3, #16
    1252:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    1254:	3332      	adds	r3, #50	; 0x32
    1256:	e7d8      	b.n	120a <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    1258:	069b      	lsls	r3, r3, #26
    125a:	d503      	bpl.n	1264 <usart_read_wait+0x62>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    125c:	2320      	movs	r3, #32
    125e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    1260:	3321      	adds	r3, #33	; 0x21
    1262:	e7d2      	b.n	120a <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    1264:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    1266:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    1268:	2300      	movs	r3, #0
    126a:	e7ce      	b.n	120a <usart_read_wait+0x8>

0000126c <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    126c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    126e:	0004      	movs	r4, r0
    1270:	000d      	movs	r5, r1
    1272:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1274:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    1276:	4b0f      	ldr	r3, [pc, #60]	; (12b4 <_usart_read_buffer+0x48>)
    1278:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    127a:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    127c:	b29b      	uxth	r3, r3
    127e:	2b00      	cmp	r3, #0
    1280:	d003      	beq.n	128a <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
    1282:	4b0d      	ldr	r3, [pc, #52]	; (12b8 <_usart_read_buffer+0x4c>)
    1284:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    1286:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    1288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    128a:	85a6      	strh	r6, [r4, #44]	; 0x2c
    128c:	4b0a      	ldr	r3, [pc, #40]	; (12b8 <_usart_read_buffer+0x4c>)
    128e:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    1290:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    1292:	2205      	movs	r2, #5
    1294:	2332      	movs	r3, #50	; 0x32
    1296:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    1298:	3b2e      	subs	r3, #46	; 0x2e
    129a:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
    129c:	7a23      	ldrb	r3, [r4, #8]
    129e:	2b00      	cmp	r3, #0
    12a0:	d001      	beq.n	12a6 <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    12a2:	2320      	movs	r3, #32
    12a4:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
    12a6:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
    12a8:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
    12aa:	2b00      	cmp	r3, #0
    12ac:	d0ec      	beq.n	1288 <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    12ae:	2308      	movs	r3, #8
    12b0:	75bb      	strb	r3, [r7, #22]
    12b2:	e7e9      	b.n	1288 <_usart_read_buffer+0x1c>
    12b4:	00000461 	.word	0x00000461
    12b8:	000004a1 	.word	0x000004a1

000012bc <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    12bc:	1c93      	adds	r3, r2, #2
    12be:	009b      	lsls	r3, r3, #2
    12c0:	18c3      	adds	r3, r0, r3
    12c2:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    12c4:	2130      	movs	r1, #48	; 0x30
    12c6:	2301      	movs	r3, #1
    12c8:	4093      	lsls	r3, r2
    12ca:	001a      	movs	r2, r3
    12cc:	5c43      	ldrb	r3, [r0, r1]
    12ce:	4313      	orrs	r3, r2
    12d0:	5443      	strb	r3, [r0, r1]
}
    12d2:	4770      	bx	lr

000012d4 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    12d4:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    12d6:	2317      	movs	r3, #23
	if (length == 0) {
    12d8:	2a00      	cmp	r2, #0
    12da:	d101      	bne.n	12e0 <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
    12dc:	0018      	movs	r0, r3
    12de:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
    12e0:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
    12e2:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
    12e4:	2c00      	cmp	r4, #0
    12e6:	d0f9      	beq.n	12dc <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
    12e8:	4b01      	ldr	r3, [pc, #4]	; (12f0 <usart_read_buffer_job+0x1c>)
    12ea:	4798      	blx	r3
    12ec:	0003      	movs	r3, r0
    12ee:	e7f5      	b.n	12dc <usart_read_buffer_job+0x8>
    12f0:	0000126d 	.word	0x0000126d

000012f4 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    12f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    12f6:	0080      	lsls	r0, r0, #2
    12f8:	4b62      	ldr	r3, [pc, #392]	; (1484 <_usart_interrupt_handler+0x190>)
    12fa:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    12fc:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    12fe:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    1300:	2b00      	cmp	r3, #0
    1302:	d1fc      	bne.n	12fe <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    1304:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    1306:	7da6      	ldrb	r6, [r4, #22]
    1308:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    130a:	2330      	movs	r3, #48	; 0x30
    130c:	5ceb      	ldrb	r3, [r5, r3]
    130e:	2231      	movs	r2, #49	; 0x31
    1310:	5caf      	ldrb	r7, [r5, r2]
    1312:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    1314:	07f3      	lsls	r3, r6, #31
    1316:	d522      	bpl.n	135e <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    1318:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    131a:	b29b      	uxth	r3, r3
    131c:	2b00      	cmp	r3, #0
    131e:	d01c      	beq.n	135a <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1320:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    1322:	7813      	ldrb	r3, [r2, #0]
    1324:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    1326:	1c51      	adds	r1, r2, #1
    1328:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    132a:	7969      	ldrb	r1, [r5, #5]
    132c:	2901      	cmp	r1, #1
    132e:	d00e      	beq.n	134e <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1330:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    1332:	05db      	lsls	r3, r3, #23
    1334:	0ddb      	lsrs	r3, r3, #23
    1336:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    1338:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    133a:	3b01      	subs	r3, #1
    133c:	b29b      	uxth	r3, r3
    133e:	85eb      	strh	r3, [r5, #46]	; 0x2e
    1340:	2b00      	cmp	r3, #0
    1342:	d10c      	bne.n	135e <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1344:	3301      	adds	r3, #1
    1346:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    1348:	3301      	adds	r3, #1
    134a:	75a3      	strb	r3, [r4, #22]
    134c:	e007      	b.n	135e <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    134e:	7851      	ldrb	r1, [r2, #1]
    1350:	0209      	lsls	r1, r1, #8
    1352:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    1354:	3202      	adds	r2, #2
    1356:	62aa      	str	r2, [r5, #40]	; 0x28
    1358:	e7eb      	b.n	1332 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    135a:	2301      	movs	r3, #1
    135c:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    135e:	07b3      	lsls	r3, r6, #30
    1360:	d506      	bpl.n	1370 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    1362:	2302      	movs	r3, #2
    1364:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    1366:	2200      	movs	r2, #0
    1368:	3331      	adds	r3, #49	; 0x31
    136a:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    136c:	07fb      	lsls	r3, r7, #31
    136e:	d41a      	bmi.n	13a6 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    1370:	0773      	lsls	r3, r6, #29
    1372:	d565      	bpl.n	1440 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    1374:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1376:	b29b      	uxth	r3, r3
    1378:	2b00      	cmp	r3, #0
    137a:	d05f      	beq.n	143c <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    137c:	8b63      	ldrh	r3, [r4, #26]
    137e:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    1380:	071a      	lsls	r2, r3, #28
    1382:	d414      	bmi.n	13ae <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1384:	223f      	movs	r2, #63	; 0x3f
    1386:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    1388:	2b00      	cmp	r3, #0
    138a:	d034      	beq.n	13f6 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    138c:	079a      	lsls	r2, r3, #30
    138e:	d511      	bpl.n	13b4 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    1390:	221a      	movs	r2, #26
    1392:	2332      	movs	r3, #50	; 0x32
    1394:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1396:	3b30      	subs	r3, #48	; 0x30
    1398:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    139a:	077b      	lsls	r3, r7, #29
    139c:	d550      	bpl.n	1440 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    139e:	0028      	movs	r0, r5
    13a0:	696b      	ldr	r3, [r5, #20]
    13a2:	4798      	blx	r3
    13a4:	e04c      	b.n	1440 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    13a6:	0028      	movs	r0, r5
    13a8:	68eb      	ldr	r3, [r5, #12]
    13aa:	4798      	blx	r3
    13ac:	e7e0      	b.n	1370 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    13ae:	2237      	movs	r2, #55	; 0x37
    13b0:	4013      	ands	r3, r2
    13b2:	e7e9      	b.n	1388 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    13b4:	075a      	lsls	r2, r3, #29
    13b6:	d505      	bpl.n	13c4 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    13b8:	221e      	movs	r2, #30
    13ba:	2332      	movs	r3, #50	; 0x32
    13bc:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    13be:	3b2e      	subs	r3, #46	; 0x2e
    13c0:	8363      	strh	r3, [r4, #26]
    13c2:	e7ea      	b.n	139a <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    13c4:	07da      	lsls	r2, r3, #31
    13c6:	d505      	bpl.n	13d4 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    13c8:	2213      	movs	r2, #19
    13ca:	2332      	movs	r3, #50	; 0x32
    13cc:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    13ce:	3b31      	subs	r3, #49	; 0x31
    13d0:	8363      	strh	r3, [r4, #26]
    13d2:	e7e2      	b.n	139a <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    13d4:	06da      	lsls	r2, r3, #27
    13d6:	d505      	bpl.n	13e4 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    13d8:	2242      	movs	r2, #66	; 0x42
    13da:	2332      	movs	r3, #50	; 0x32
    13dc:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    13de:	3b22      	subs	r3, #34	; 0x22
    13e0:	8363      	strh	r3, [r4, #26]
    13e2:	e7da      	b.n	139a <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    13e4:	2220      	movs	r2, #32
    13e6:	421a      	tst	r2, r3
    13e8:	d0d7      	beq.n	139a <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    13ea:	3221      	adds	r2, #33	; 0x21
    13ec:	2332      	movs	r3, #50	; 0x32
    13ee:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    13f0:	3b12      	subs	r3, #18
    13f2:	8363      	strh	r3, [r4, #26]
    13f4:	e7d1      	b.n	139a <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    13f6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    13f8:	05db      	lsls	r3, r3, #23
    13fa:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    13fc:	b2da      	uxtb	r2, r3
    13fe:	6a69      	ldr	r1, [r5, #36]	; 0x24
    1400:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    1402:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    1404:	1c51      	adds	r1, r2, #1
    1406:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1408:	7969      	ldrb	r1, [r5, #5]
    140a:	2901      	cmp	r1, #1
    140c:	d010      	beq.n	1430 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    140e:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1410:	3b01      	subs	r3, #1
    1412:	b29b      	uxth	r3, r3
    1414:	85ab      	strh	r3, [r5, #44]	; 0x2c
    1416:	2b00      	cmp	r3, #0
    1418:	d112      	bne.n	1440 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    141a:	3304      	adds	r3, #4
    141c:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    141e:	2200      	movs	r2, #0
    1420:	332e      	adds	r3, #46	; 0x2e
    1422:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    1424:	07bb      	lsls	r3, r7, #30
    1426:	d50b      	bpl.n	1440 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    1428:	0028      	movs	r0, r5
    142a:	692b      	ldr	r3, [r5, #16]
    142c:	4798      	blx	r3
    142e:	e007      	b.n	1440 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    1430:	0a1b      	lsrs	r3, r3, #8
    1432:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    1434:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    1436:	3301      	adds	r3, #1
    1438:	626b      	str	r3, [r5, #36]	; 0x24
    143a:	e7e8      	b.n	140e <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    143c:	2304      	movs	r3, #4
    143e:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    1440:	06f3      	lsls	r3, r6, #27
    1442:	d504      	bpl.n	144e <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    1444:	2310      	movs	r3, #16
    1446:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    1448:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    144a:	06fb      	lsls	r3, r7, #27
    144c:	d40e      	bmi.n	146c <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    144e:	06b3      	lsls	r3, r6, #26
    1450:	d504      	bpl.n	145c <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    1452:	2320      	movs	r3, #32
    1454:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    1456:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    1458:	073b      	lsls	r3, r7, #28
    145a:	d40b      	bmi.n	1474 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    145c:	0733      	lsls	r3, r6, #28
    145e:	d504      	bpl.n	146a <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    1460:	2308      	movs	r3, #8
    1462:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    1464:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    1466:	06bb      	lsls	r3, r7, #26
    1468:	d408      	bmi.n	147c <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    146a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    146c:	0028      	movs	r0, r5
    146e:	69eb      	ldr	r3, [r5, #28]
    1470:	4798      	blx	r3
    1472:	e7ec      	b.n	144e <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    1474:	0028      	movs	r0, r5
    1476:	69ab      	ldr	r3, [r5, #24]
    1478:	4798      	blx	r3
    147a:	e7ef      	b.n	145c <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    147c:	6a2b      	ldr	r3, [r5, #32]
    147e:	0028      	movs	r0, r5
    1480:	4798      	blx	r3
}
    1482:	e7f2      	b.n	146a <_usart_interrupt_handler+0x176>
    1484:	200002ac 	.word	0x200002ac

00001488 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1488:	b510      	push	{r4, lr}
	switch (clock_source) {
    148a:	2808      	cmp	r0, #8
    148c:	d803      	bhi.n	1496 <system_clock_source_get_hz+0xe>
    148e:	0080      	lsls	r0, r0, #2
    1490:	4b1c      	ldr	r3, [pc, #112]	; (1504 <system_clock_source_get_hz+0x7c>)
    1492:	581b      	ldr	r3, [r3, r0]
    1494:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    1496:	2000      	movs	r0, #0
    1498:	e032      	b.n	1500 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    149a:	4b1b      	ldr	r3, [pc, #108]	; (1508 <system_clock_source_get_hz+0x80>)
    149c:	6918      	ldr	r0, [r3, #16]
    149e:	e02f      	b.n	1500 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    14a0:	4b1a      	ldr	r3, [pc, #104]	; (150c <system_clock_source_get_hz+0x84>)
    14a2:	6a1b      	ldr	r3, [r3, #32]
    14a4:	059b      	lsls	r3, r3, #22
    14a6:	0f9b      	lsrs	r3, r3, #30
    14a8:	4819      	ldr	r0, [pc, #100]	; (1510 <system_clock_source_get_hz+0x88>)
    14aa:	40d8      	lsrs	r0, r3
    14ac:	e028      	b.n	1500 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    14ae:	4b16      	ldr	r3, [pc, #88]	; (1508 <system_clock_source_get_hz+0x80>)
    14b0:	6958      	ldr	r0, [r3, #20]
    14b2:	e025      	b.n	1500 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    14b4:	4b14      	ldr	r3, [pc, #80]	; (1508 <system_clock_source_get_hz+0x80>)
    14b6:	681b      	ldr	r3, [r3, #0]
			return 0;
    14b8:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    14ba:	079b      	lsls	r3, r3, #30
    14bc:	d520      	bpl.n	1500 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    14be:	4913      	ldr	r1, [pc, #76]	; (150c <system_clock_source_get_hz+0x84>)
    14c0:	2210      	movs	r2, #16
    14c2:	68cb      	ldr	r3, [r1, #12]
    14c4:	421a      	tst	r2, r3
    14c6:	d0fc      	beq.n	14c2 <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    14c8:	4b0f      	ldr	r3, [pc, #60]	; (1508 <system_clock_source_get_hz+0x80>)
    14ca:	681a      	ldr	r2, [r3, #0]
    14cc:	2324      	movs	r3, #36	; 0x24
    14ce:	4013      	ands	r3, r2
    14d0:	2b04      	cmp	r3, #4
    14d2:	d001      	beq.n	14d8 <system_clock_source_get_hz+0x50>
			return 48000000UL;
    14d4:	480f      	ldr	r0, [pc, #60]	; (1514 <system_clock_source_get_hz+0x8c>)
    14d6:	e013      	b.n	1500 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    14d8:	2000      	movs	r0, #0
    14da:	4b0f      	ldr	r3, [pc, #60]	; (1518 <system_clock_source_get_hz+0x90>)
    14dc:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    14de:	4b0a      	ldr	r3, [pc, #40]	; (1508 <system_clock_source_get_hz+0x80>)
    14e0:	689b      	ldr	r3, [r3, #8]
    14e2:	041b      	lsls	r3, r3, #16
    14e4:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    14e6:	4358      	muls	r0, r3
    14e8:	e00a      	b.n	1500 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    14ea:	2350      	movs	r3, #80	; 0x50
    14ec:	4a07      	ldr	r2, [pc, #28]	; (150c <system_clock_source_get_hz+0x84>)
    14ee:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    14f0:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    14f2:	075b      	lsls	r3, r3, #29
    14f4:	d504      	bpl.n	1500 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    14f6:	4b04      	ldr	r3, [pc, #16]	; (1508 <system_clock_source_get_hz+0x80>)
    14f8:	68d8      	ldr	r0, [r3, #12]
    14fa:	e001      	b.n	1500 <system_clock_source_get_hz+0x78>
		return 32768UL;
    14fc:	2080      	movs	r0, #128	; 0x80
    14fe:	0200      	lsls	r0, r0, #8
	}
}
    1500:	bd10      	pop	{r4, pc}
    1502:	46c0      	nop			; (mov r8, r8)
    1504:	00004bfc 	.word	0x00004bfc
    1508:	2000027c 	.word	0x2000027c
    150c:	40000800 	.word	0x40000800
    1510:	007a1200 	.word	0x007a1200
    1514:	02dc6c00 	.word	0x02dc6c00
    1518:	00001ae9 	.word	0x00001ae9

0000151c <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    151c:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    151e:	490c      	ldr	r1, [pc, #48]	; (1550 <system_clock_source_osc8m_set_config+0x34>)
    1520:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    1522:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1524:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    1526:	7840      	ldrb	r0, [r0, #1]
    1528:	2201      	movs	r2, #1
    152a:	4010      	ands	r0, r2
    152c:	0180      	lsls	r0, r0, #6
    152e:	2640      	movs	r6, #64	; 0x40
    1530:	43b3      	bics	r3, r6
    1532:	4303      	orrs	r3, r0
    1534:	402a      	ands	r2, r5
    1536:	01d2      	lsls	r2, r2, #7
    1538:	2080      	movs	r0, #128	; 0x80
    153a:	4383      	bics	r3, r0
    153c:	4313      	orrs	r3, r2
    153e:	2203      	movs	r2, #3
    1540:	4022      	ands	r2, r4
    1542:	0212      	lsls	r2, r2, #8
    1544:	4803      	ldr	r0, [pc, #12]	; (1554 <system_clock_source_osc8m_set_config+0x38>)
    1546:	4003      	ands	r3, r0
    1548:	4313      	orrs	r3, r2
    154a:	620b      	str	r3, [r1, #32]
}
    154c:	bd70      	pop	{r4, r5, r6, pc}
    154e:	46c0      	nop			; (mov r8, r8)
    1550:	40000800 	.word	0x40000800
    1554:	fffffcff 	.word	0xfffffcff

00001558 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    1558:	b5f0      	push	{r4, r5, r6, r7, lr}
    155a:	46de      	mov	lr, fp
    155c:	4657      	mov	r7, sl
    155e:	464e      	mov	r6, r9
    1560:	4645      	mov	r5, r8
    1562:	b5e0      	push	{r5, r6, r7, lr}
    1564:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    1566:	4b26      	ldr	r3, [pc, #152]	; (1600 <system_clock_source_xosc32k_set_config+0xa8>)
    1568:	469b      	mov	fp, r3
    156a:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    156c:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    156e:	7800      	ldrb	r0, [r0, #0]
    1570:	4242      	negs	r2, r0
    1572:	4142      	adcs	r2, r0
    1574:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    1576:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    1578:	78ca      	ldrb	r2, [r1, #3]
    157a:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    157c:	790a      	ldrb	r2, [r1, #4]
    157e:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    1580:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1582:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    1584:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    1586:	688a      	ldr	r2, [r1, #8]
    1588:	491e      	ldr	r1, [pc, #120]	; (1604 <system_clock_source_xosc32k_set_config+0xac>)
    158a:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    158c:	2101      	movs	r1, #1
    158e:	464a      	mov	r2, r9
    1590:	0092      	lsls	r2, r2, #2
    1592:	4691      	mov	r9, r2
    1594:	2204      	movs	r2, #4
    1596:	4393      	bics	r3, r2
    1598:	464a      	mov	r2, r9
    159a:	4313      	orrs	r3, r2
    159c:	4642      	mov	r2, r8
    159e:	400a      	ands	r2, r1
    15a0:	00d2      	lsls	r2, r2, #3
    15a2:	4690      	mov	r8, r2
    15a4:	2208      	movs	r2, #8
    15a6:	4393      	bics	r3, r2
    15a8:	4642      	mov	r2, r8
    15aa:	4313      	orrs	r3, r2
    15ac:	4662      	mov	r2, ip
    15ae:	400a      	ands	r2, r1
    15b0:	0112      	lsls	r2, r2, #4
    15b2:	4694      	mov	ip, r2
    15b4:	2210      	movs	r2, #16
    15b6:	4393      	bics	r3, r2
    15b8:	4662      	mov	r2, ip
    15ba:	4313      	orrs	r3, r2
    15bc:	4008      	ands	r0, r1
    15be:	0140      	lsls	r0, r0, #5
    15c0:	2220      	movs	r2, #32
    15c2:	4393      	bics	r3, r2
    15c4:	4303      	orrs	r3, r0
    15c6:	400f      	ands	r7, r1
    15c8:	01bf      	lsls	r7, r7, #6
    15ca:	2040      	movs	r0, #64	; 0x40
    15cc:	4383      	bics	r3, r0
    15ce:	433b      	orrs	r3, r7
    15d0:	400e      	ands	r6, r1
    15d2:	01f6      	lsls	r6, r6, #7
    15d4:	3040      	adds	r0, #64	; 0x40
    15d6:	4383      	bics	r3, r0
    15d8:	4333      	orrs	r3, r6
    15da:	3879      	subs	r0, #121	; 0x79
    15dc:	4005      	ands	r5, r0
    15de:	022d      	lsls	r5, r5, #8
    15e0:	4809      	ldr	r0, [pc, #36]	; (1608 <system_clock_source_xosc32k_set_config+0xb0>)
    15e2:	4003      	ands	r3, r0
    15e4:	432b      	orrs	r3, r5
    15e6:	4021      	ands	r1, r4
    15e8:	0309      	lsls	r1, r1, #12
    15ea:	4808      	ldr	r0, [pc, #32]	; (160c <system_clock_source_xosc32k_set_config+0xb4>)
    15ec:	4003      	ands	r3, r0
    15ee:	430b      	orrs	r3, r1
    15f0:	465a      	mov	r2, fp
    15f2:	8293      	strh	r3, [r2, #20]
}
    15f4:	bc3c      	pop	{r2, r3, r4, r5}
    15f6:	4690      	mov	r8, r2
    15f8:	4699      	mov	r9, r3
    15fa:	46a2      	mov	sl, r4
    15fc:	46ab      	mov	fp, r5
    15fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1600:	40000800 	.word	0x40000800
    1604:	2000027c 	.word	0x2000027c
    1608:	fffff8ff 	.word	0xfffff8ff
    160c:	ffffefff 	.word	0xffffefff

00001610 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    1610:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1612:	7a03      	ldrb	r3, [r0, #8]
    1614:	069b      	lsls	r3, r3, #26
    1616:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    1618:	8942      	ldrh	r2, [r0, #10]
    161a:	0592      	lsls	r2, r2, #22
    161c:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    161e:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    1620:	4918      	ldr	r1, [pc, #96]	; (1684 <system_clock_source_dfll_set_config+0x74>)
    1622:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    1624:	7983      	ldrb	r3, [r0, #6]
    1626:	79c2      	ldrb	r2, [r0, #7]
    1628:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    162a:	8842      	ldrh	r2, [r0, #2]
    162c:	8884      	ldrh	r4, [r0, #4]
    162e:	4322      	orrs	r2, r4
    1630:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    1632:	7842      	ldrb	r2, [r0, #1]
    1634:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    1636:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    1638:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    163a:	7803      	ldrb	r3, [r0, #0]
    163c:	2b04      	cmp	r3, #4
    163e:	d011      	beq.n	1664 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    1640:	2b20      	cmp	r3, #32
    1642:	d10e      	bne.n	1662 <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1644:	7b03      	ldrb	r3, [r0, #12]
    1646:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1648:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    164a:	4313      	orrs	r3, r2
    164c:	89c2      	ldrh	r2, [r0, #14]
    164e:	0412      	lsls	r2, r2, #16
    1650:	490d      	ldr	r1, [pc, #52]	; (1688 <system_clock_source_dfll_set_config+0x78>)
    1652:	400a      	ands	r2, r1
    1654:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    1656:	4a0b      	ldr	r2, [pc, #44]	; (1684 <system_clock_source_dfll_set_config+0x74>)
    1658:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    165a:	6811      	ldr	r1, [r2, #0]
    165c:	4b0b      	ldr	r3, [pc, #44]	; (168c <system_clock_source_dfll_set_config+0x7c>)
    165e:	430b      	orrs	r3, r1
    1660:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    1662:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1664:	7b03      	ldrb	r3, [r0, #12]
    1666:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1668:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    166a:	4313      	orrs	r3, r2
    166c:	89c2      	ldrh	r2, [r0, #14]
    166e:	0412      	lsls	r2, r2, #16
    1670:	4905      	ldr	r1, [pc, #20]	; (1688 <system_clock_source_dfll_set_config+0x78>)
    1672:	400a      	ands	r2, r1
    1674:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    1676:	4a03      	ldr	r2, [pc, #12]	; (1684 <system_clock_source_dfll_set_config+0x74>)
    1678:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    167a:	6813      	ldr	r3, [r2, #0]
    167c:	2104      	movs	r1, #4
    167e:	430b      	orrs	r3, r1
    1680:	6013      	str	r3, [r2, #0]
    1682:	e7ee      	b.n	1662 <system_clock_source_dfll_set_config+0x52>
    1684:	2000027c 	.word	0x2000027c
    1688:	03ff0000 	.word	0x03ff0000
    168c:	00000424 	.word	0x00000424

00001690 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1690:	2808      	cmp	r0, #8
    1692:	d803      	bhi.n	169c <system_clock_source_enable+0xc>
    1694:	0080      	lsls	r0, r0, #2
    1696:	4b25      	ldr	r3, [pc, #148]	; (172c <system_clock_source_enable+0x9c>)
    1698:	581b      	ldr	r3, [r3, r0]
    169a:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    169c:	2017      	movs	r0, #23
    169e:	e044      	b.n	172a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    16a0:	4a23      	ldr	r2, [pc, #140]	; (1730 <system_clock_source_enable+0xa0>)
    16a2:	6a13      	ldr	r3, [r2, #32]
    16a4:	2102      	movs	r1, #2
    16a6:	430b      	orrs	r3, r1
    16a8:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    16aa:	2000      	movs	r0, #0
    16ac:	e03d      	b.n	172a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    16ae:	4a20      	ldr	r2, [pc, #128]	; (1730 <system_clock_source_enable+0xa0>)
    16b0:	6993      	ldr	r3, [r2, #24]
    16b2:	2102      	movs	r1, #2
    16b4:	430b      	orrs	r3, r1
    16b6:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    16b8:	2000      	movs	r0, #0
		break;
    16ba:	e036      	b.n	172a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    16bc:	4a1c      	ldr	r2, [pc, #112]	; (1730 <system_clock_source_enable+0xa0>)
    16be:	8a13      	ldrh	r3, [r2, #16]
    16c0:	2102      	movs	r1, #2
    16c2:	430b      	orrs	r3, r1
    16c4:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    16c6:	2000      	movs	r0, #0
		break;
    16c8:	e02f      	b.n	172a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    16ca:	4a19      	ldr	r2, [pc, #100]	; (1730 <system_clock_source_enable+0xa0>)
    16cc:	8a93      	ldrh	r3, [r2, #20]
    16ce:	2102      	movs	r1, #2
    16d0:	430b      	orrs	r3, r1
    16d2:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    16d4:	2000      	movs	r0, #0
		break;
    16d6:	e028      	b.n	172a <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    16d8:	4916      	ldr	r1, [pc, #88]	; (1734 <system_clock_source_enable+0xa4>)
    16da:	680b      	ldr	r3, [r1, #0]
    16dc:	2202      	movs	r2, #2
    16de:	4313      	orrs	r3, r2
    16e0:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    16e2:	4b13      	ldr	r3, [pc, #76]	; (1730 <system_clock_source_enable+0xa0>)
    16e4:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    16e6:	0019      	movs	r1, r3
    16e8:	320e      	adds	r2, #14
    16ea:	68cb      	ldr	r3, [r1, #12]
    16ec:	421a      	tst	r2, r3
    16ee:	d0fc      	beq.n	16ea <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    16f0:	4a10      	ldr	r2, [pc, #64]	; (1734 <system_clock_source_enable+0xa4>)
    16f2:	6891      	ldr	r1, [r2, #8]
    16f4:	4b0e      	ldr	r3, [pc, #56]	; (1730 <system_clock_source_enable+0xa0>)
    16f6:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    16f8:	6852      	ldr	r2, [r2, #4]
    16fa:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    16fc:	2200      	movs	r2, #0
    16fe:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1700:	0019      	movs	r1, r3
    1702:	3210      	adds	r2, #16
    1704:	68cb      	ldr	r3, [r1, #12]
    1706:	421a      	tst	r2, r3
    1708:	d0fc      	beq.n	1704 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    170a:	4b0a      	ldr	r3, [pc, #40]	; (1734 <system_clock_source_enable+0xa4>)
    170c:	681b      	ldr	r3, [r3, #0]
    170e:	b29b      	uxth	r3, r3
    1710:	4a07      	ldr	r2, [pc, #28]	; (1730 <system_clock_source_enable+0xa0>)
    1712:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    1714:	2000      	movs	r0, #0
    1716:	e008      	b.n	172a <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1718:	4905      	ldr	r1, [pc, #20]	; (1730 <system_clock_source_enable+0xa0>)
    171a:	2244      	movs	r2, #68	; 0x44
    171c:	5c8b      	ldrb	r3, [r1, r2]
    171e:	2002      	movs	r0, #2
    1720:	4303      	orrs	r3, r0
    1722:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    1724:	2000      	movs	r0, #0
		break;
    1726:	e000      	b.n	172a <system_clock_source_enable+0x9a>
		return STATUS_OK;
    1728:	2000      	movs	r0, #0
}
    172a:	4770      	bx	lr
    172c:	00004c20 	.word	0x00004c20
    1730:	40000800 	.word	0x40000800
    1734:	2000027c 	.word	0x2000027c

00001738 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1738:	b5f0      	push	{r4, r5, r6, r7, lr}
    173a:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    173c:	22c2      	movs	r2, #194	; 0xc2
    173e:	00d2      	lsls	r2, r2, #3
    1740:	4b47      	ldr	r3, [pc, #284]	; (1860 <system_clock_init+0x128>)
    1742:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1744:	4947      	ldr	r1, [pc, #284]	; (1864 <system_clock_init+0x12c>)
    1746:	684b      	ldr	r3, [r1, #4]
    1748:	221e      	movs	r2, #30
    174a:	4393      	bics	r3, r2
    174c:	3a1c      	subs	r2, #28
    174e:	4313      	orrs	r3, r2
    1750:	604b      	str	r3, [r1, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    1752:	ab01      	add	r3, sp, #4
    1754:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1756:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1758:	4d43      	ldr	r5, [pc, #268]	; (1868 <system_clock_init+0x130>)
    175a:	b2e0      	uxtb	r0, r4
    175c:	a901      	add	r1, sp, #4
    175e:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1760:	3401      	adds	r4, #1
    1762:	2c25      	cmp	r4, #37	; 0x25
    1764:	d1f9      	bne.n	175a <system_clock_init+0x22>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    1766:	a80a      	add	r0, sp, #40	; 0x28
    1768:	2300      	movs	r3, #0
    176a:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    176c:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    176e:	2280      	movs	r2, #128	; 0x80
    1770:	0212      	lsls	r2, r2, #8
    1772:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    1774:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    1776:	2201      	movs	r2, #1
    1778:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    177a:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    177c:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    177e:	3205      	adds	r2, #5
    1780:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    1782:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    1784:	4b39      	ldr	r3, [pc, #228]	; (186c <system_clock_init+0x134>)
    1786:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    1788:	2005      	movs	r0, #5
    178a:	4b39      	ldr	r3, [pc, #228]	; (1870 <system_clock_init+0x138>)
    178c:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    178e:	4934      	ldr	r1, [pc, #208]	; (1860 <system_clock_init+0x128>)
    1790:	2202      	movs	r2, #2
    1792:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    1794:	421a      	tst	r2, r3
    1796:	d0fc      	beq.n	1792 <system_clock_init+0x5a>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    1798:	4a31      	ldr	r2, [pc, #196]	; (1860 <system_clock_init+0x128>)
    179a:	8a93      	ldrh	r3, [r2, #20]
    179c:	2180      	movs	r1, #128	; 0x80
    179e:	430b      	orrs	r3, r1
    17a0:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    17a2:	ab05      	add	r3, sp, #20
    17a4:	2100      	movs	r1, #0
    17a6:	2200      	movs	r2, #0
    17a8:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    17aa:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    17ac:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    17ae:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    17b0:	313f      	adds	r1, #63	; 0x3f
    17b2:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    17b4:	393b      	subs	r1, #59	; 0x3b
    17b6:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    17b8:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    17ba:	4b2e      	ldr	r3, [pc, #184]	; (1874 <system_clock_init+0x13c>)
    17bc:	681b      	ldr	r3, [r3, #0]
    17be:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    17c0:	2b3f      	cmp	r3, #63	; 0x3f
    17c2:	d04b      	beq.n	185c <system_clock_init+0x124>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    17c4:	a805      	add	r0, sp, #20
    17c6:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    17c8:	23b7      	movs	r3, #183	; 0xb7
    17ca:	00db      	lsls	r3, r3, #3
    17cc:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    17ce:	2307      	movs	r3, #7
    17d0:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    17d2:	3338      	adds	r3, #56	; 0x38
    17d4:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    17d6:	4b28      	ldr	r3, [pc, #160]	; (1878 <system_clock_init+0x140>)
    17d8:	4798      	blx	r3
	config->run_in_standby  = false;
    17da:	a804      	add	r0, sp, #16
    17dc:	2500      	movs	r5, #0
    17de:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    17e0:	2601      	movs	r6, #1
    17e2:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    17e4:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    17e6:	4b25      	ldr	r3, [pc, #148]	; (187c <system_clock_init+0x144>)
    17e8:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    17ea:	2006      	movs	r0, #6
    17ec:	4f20      	ldr	r7, [pc, #128]	; (1870 <system_clock_init+0x138>)
    17ee:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    17f0:	4b23      	ldr	r3, [pc, #140]	; (1880 <system_clock_init+0x148>)
    17f2:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    17f4:	ac01      	add	r4, sp, #4
    17f6:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    17f8:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    17fa:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    17fc:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    17fe:	2305      	movs	r3, #5
    1800:	7023      	strb	r3, [r4, #0]
    1802:	0021      	movs	r1, r4
    1804:	2001      	movs	r0, #1
    1806:	4b1f      	ldr	r3, [pc, #124]	; (1884 <system_clock_init+0x14c>)
    1808:	4798      	blx	r3
    180a:	2001      	movs	r0, #1
    180c:	4b1e      	ldr	r3, [pc, #120]	; (1888 <system_clock_init+0x150>)
    180e:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    1810:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    1812:	0021      	movs	r1, r4
    1814:	2000      	movs	r0, #0
    1816:	4b14      	ldr	r3, [pc, #80]	; (1868 <system_clock_init+0x130>)
    1818:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    181a:	2000      	movs	r0, #0
    181c:	4b1b      	ldr	r3, [pc, #108]	; (188c <system_clock_init+0x154>)
    181e:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    1820:	2007      	movs	r0, #7
    1822:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1824:	490e      	ldr	r1, [pc, #56]	; (1860 <system_clock_init+0x128>)
    1826:	22d0      	movs	r2, #208	; 0xd0
    1828:	68cb      	ldr	r3, [r1, #12]
    182a:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    182c:	2bd0      	cmp	r3, #208	; 0xd0
    182e:	d1fb      	bne.n	1828 <system_clock_init+0xf0>
	PM->CPUSEL.reg = (uint32_t)divider;
    1830:	4a17      	ldr	r2, [pc, #92]	; (1890 <system_clock_init+0x158>)
    1832:	2300      	movs	r3, #0
    1834:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    1836:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    1838:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    183a:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    183c:	a901      	add	r1, sp, #4
    183e:	2201      	movs	r2, #1
    1840:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    1842:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    1844:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    1846:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1848:	3307      	adds	r3, #7
    184a:	700b      	strb	r3, [r1, #0]
    184c:	2000      	movs	r0, #0
    184e:	4b0d      	ldr	r3, [pc, #52]	; (1884 <system_clock_init+0x14c>)
    1850:	4798      	blx	r3
    1852:	2000      	movs	r0, #0
    1854:	4b0c      	ldr	r3, [pc, #48]	; (1888 <system_clock_init+0x150>)
    1856:	4798      	blx	r3
#endif
}
    1858:	b00f      	add	sp, #60	; 0x3c
    185a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    185c:	3b20      	subs	r3, #32
    185e:	e7b1      	b.n	17c4 <system_clock_init+0x8c>
    1860:	40000800 	.word	0x40000800
    1864:	41004000 	.word	0x41004000
    1868:	00001acd 	.word	0x00001acd
    186c:	00001559 	.word	0x00001559
    1870:	00001691 	.word	0x00001691
    1874:	00806024 	.word	0x00806024
    1878:	00001611 	.word	0x00001611
    187c:	0000151d 	.word	0x0000151d
    1880:	00001895 	.word	0x00001895
    1884:	000018b9 	.word	0x000018b9
    1888:	00001971 	.word	0x00001971
    188c:	00001a41 	.word	0x00001a41
    1890:	40000400 	.word	0x40000400

00001894 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    1894:	4a06      	ldr	r2, [pc, #24]	; (18b0 <system_gclk_init+0x1c>)
    1896:	6993      	ldr	r3, [r2, #24]
    1898:	2108      	movs	r1, #8
    189a:	430b      	orrs	r3, r1
    189c:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    189e:	2201      	movs	r2, #1
    18a0:	4b04      	ldr	r3, [pc, #16]	; (18b4 <system_gclk_init+0x20>)
    18a2:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    18a4:	0019      	movs	r1, r3
    18a6:	780b      	ldrb	r3, [r1, #0]
    18a8:	4213      	tst	r3, r2
    18aa:	d1fc      	bne.n	18a6 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    18ac:	4770      	bx	lr
    18ae:	46c0      	nop			; (mov r8, r8)
    18b0:	40000400 	.word	0x40000400
    18b4:	40000c00 	.word	0x40000c00

000018b8 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    18b8:	b570      	push	{r4, r5, r6, lr}
    18ba:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    18bc:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    18be:	780d      	ldrb	r5, [r1, #0]
    18c0:	022d      	lsls	r5, r5, #8
    18c2:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    18c4:	784b      	ldrb	r3, [r1, #1]
    18c6:	2b00      	cmp	r3, #0
    18c8:	d002      	beq.n	18d0 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    18ca:	2380      	movs	r3, #128	; 0x80
    18cc:	02db      	lsls	r3, r3, #11
    18ce:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    18d0:	7a4b      	ldrb	r3, [r1, #9]
    18d2:	2b00      	cmp	r3, #0
    18d4:	d002      	beq.n	18dc <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    18d6:	2380      	movs	r3, #128	; 0x80
    18d8:	031b      	lsls	r3, r3, #12
    18da:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    18dc:	6848      	ldr	r0, [r1, #4]
    18de:	2801      	cmp	r0, #1
    18e0:	d910      	bls.n	1904 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    18e2:	1e43      	subs	r3, r0, #1
    18e4:	4218      	tst	r0, r3
    18e6:	d134      	bne.n	1952 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    18e8:	2802      	cmp	r0, #2
    18ea:	d930      	bls.n	194e <system_gclk_gen_set_config+0x96>
    18ec:	2302      	movs	r3, #2
    18ee:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    18f0:	3201      	adds	r2, #1
						mask <<= 1) {
    18f2:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    18f4:	4298      	cmp	r0, r3
    18f6:	d8fb      	bhi.n	18f0 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    18f8:	0212      	lsls	r2, r2, #8
    18fa:	4332      	orrs	r2, r6
    18fc:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    18fe:	2380      	movs	r3, #128	; 0x80
    1900:	035b      	lsls	r3, r3, #13
    1902:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1904:	7a0b      	ldrb	r3, [r1, #8]
    1906:	2b00      	cmp	r3, #0
    1908:	d002      	beq.n	1910 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    190a:	2380      	movs	r3, #128	; 0x80
    190c:	039b      	lsls	r3, r3, #14
    190e:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1910:	4a13      	ldr	r2, [pc, #76]	; (1960 <system_gclk_gen_set_config+0xa8>)
    1912:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    1914:	b25b      	sxtb	r3, r3
    1916:	2b00      	cmp	r3, #0
    1918:	dbfb      	blt.n	1912 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    191a:	4b12      	ldr	r3, [pc, #72]	; (1964 <system_gclk_gen_set_config+0xac>)
    191c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    191e:	4b12      	ldr	r3, [pc, #72]	; (1968 <system_gclk_gen_set_config+0xb0>)
    1920:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1922:	4a0f      	ldr	r2, [pc, #60]	; (1960 <system_gclk_gen_set_config+0xa8>)
    1924:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1926:	b25b      	sxtb	r3, r3
    1928:	2b00      	cmp	r3, #0
    192a:	dbfb      	blt.n	1924 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    192c:	4b0c      	ldr	r3, [pc, #48]	; (1960 <system_gclk_gen_set_config+0xa8>)
    192e:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1930:	001a      	movs	r2, r3
    1932:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    1934:	b25b      	sxtb	r3, r3
    1936:	2b00      	cmp	r3, #0
    1938:	dbfb      	blt.n	1932 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    193a:	4a09      	ldr	r2, [pc, #36]	; (1960 <system_gclk_gen_set_config+0xa8>)
    193c:	6853      	ldr	r3, [r2, #4]
    193e:	2180      	movs	r1, #128	; 0x80
    1940:	0249      	lsls	r1, r1, #9
    1942:	400b      	ands	r3, r1
    1944:	431d      	orrs	r5, r3
    1946:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    1948:	4b08      	ldr	r3, [pc, #32]	; (196c <system_gclk_gen_set_config+0xb4>)
    194a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    194c:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    194e:	2200      	movs	r2, #0
    1950:	e7d2      	b.n	18f8 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1952:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    1954:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1956:	2380      	movs	r3, #128	; 0x80
    1958:	029b      	lsls	r3, r3, #10
    195a:	431d      	orrs	r5, r3
    195c:	e7d2      	b.n	1904 <system_gclk_gen_set_config+0x4c>
    195e:	46c0      	nop			; (mov r8, r8)
    1960:	40000c00 	.word	0x40000c00
    1964:	00000461 	.word	0x00000461
    1968:	40000c08 	.word	0x40000c08
    196c:	000004a1 	.word	0x000004a1

00001970 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1970:	b510      	push	{r4, lr}
    1972:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1974:	4a0b      	ldr	r2, [pc, #44]	; (19a4 <system_gclk_gen_enable+0x34>)
    1976:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1978:	b25b      	sxtb	r3, r3
    197a:	2b00      	cmp	r3, #0
    197c:	dbfb      	blt.n	1976 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    197e:	4b0a      	ldr	r3, [pc, #40]	; (19a8 <system_gclk_gen_enable+0x38>)
    1980:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1982:	4b0a      	ldr	r3, [pc, #40]	; (19ac <system_gclk_gen_enable+0x3c>)
    1984:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1986:	4a07      	ldr	r2, [pc, #28]	; (19a4 <system_gclk_gen_enable+0x34>)
    1988:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    198a:	b25b      	sxtb	r3, r3
    198c:	2b00      	cmp	r3, #0
    198e:	dbfb      	blt.n	1988 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1990:	4a04      	ldr	r2, [pc, #16]	; (19a4 <system_gclk_gen_enable+0x34>)
    1992:	6851      	ldr	r1, [r2, #4]
    1994:	2380      	movs	r3, #128	; 0x80
    1996:	025b      	lsls	r3, r3, #9
    1998:	430b      	orrs	r3, r1
    199a:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    199c:	4b04      	ldr	r3, [pc, #16]	; (19b0 <system_gclk_gen_enable+0x40>)
    199e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    19a0:	bd10      	pop	{r4, pc}
    19a2:	46c0      	nop			; (mov r8, r8)
    19a4:	40000c00 	.word	0x40000c00
    19a8:	00000461 	.word	0x00000461
    19ac:	40000c04 	.word	0x40000c04
    19b0:	000004a1 	.word	0x000004a1

000019b4 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    19b4:	b570      	push	{r4, r5, r6, lr}
    19b6:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    19b8:	4a1a      	ldr	r2, [pc, #104]	; (1a24 <system_gclk_gen_get_hz+0x70>)
    19ba:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    19bc:	b25b      	sxtb	r3, r3
    19be:	2b00      	cmp	r3, #0
    19c0:	dbfb      	blt.n	19ba <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    19c2:	4b19      	ldr	r3, [pc, #100]	; (1a28 <system_gclk_gen_get_hz+0x74>)
    19c4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    19c6:	4b19      	ldr	r3, [pc, #100]	; (1a2c <system_gclk_gen_get_hz+0x78>)
    19c8:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    19ca:	4a16      	ldr	r2, [pc, #88]	; (1a24 <system_gclk_gen_get_hz+0x70>)
    19cc:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    19ce:	b25b      	sxtb	r3, r3
    19d0:	2b00      	cmp	r3, #0
    19d2:	dbfb      	blt.n	19cc <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    19d4:	4e13      	ldr	r6, [pc, #76]	; (1a24 <system_gclk_gen_get_hz+0x70>)
    19d6:	6870      	ldr	r0, [r6, #4]
    19d8:	04c0      	lsls	r0, r0, #19
    19da:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    19dc:	4b14      	ldr	r3, [pc, #80]	; (1a30 <system_gclk_gen_get_hz+0x7c>)
    19de:	4798      	blx	r3
    19e0:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    19e2:	4b12      	ldr	r3, [pc, #72]	; (1a2c <system_gclk_gen_get_hz+0x78>)
    19e4:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    19e6:	6876      	ldr	r6, [r6, #4]
    19e8:	02f6      	lsls	r6, r6, #11
    19ea:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    19ec:	4b11      	ldr	r3, [pc, #68]	; (1a34 <system_gclk_gen_get_hz+0x80>)
    19ee:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    19f0:	4a0c      	ldr	r2, [pc, #48]	; (1a24 <system_gclk_gen_get_hz+0x70>)
    19f2:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    19f4:	b25b      	sxtb	r3, r3
    19f6:	2b00      	cmp	r3, #0
    19f8:	dbfb      	blt.n	19f2 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    19fa:	4b0a      	ldr	r3, [pc, #40]	; (1a24 <system_gclk_gen_get_hz+0x70>)
    19fc:	689c      	ldr	r4, [r3, #8]
    19fe:	0224      	lsls	r4, r4, #8
    1a00:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    1a02:	4b0d      	ldr	r3, [pc, #52]	; (1a38 <system_gclk_gen_get_hz+0x84>)
    1a04:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1a06:	2e00      	cmp	r6, #0
    1a08:	d107      	bne.n	1a1a <system_gclk_gen_get_hz+0x66>
    1a0a:	2c01      	cmp	r4, #1
    1a0c:	d907      	bls.n	1a1e <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    1a0e:	0021      	movs	r1, r4
    1a10:	0028      	movs	r0, r5
    1a12:	4b0a      	ldr	r3, [pc, #40]	; (1a3c <system_gclk_gen_get_hz+0x88>)
    1a14:	4798      	blx	r3
    1a16:	0005      	movs	r5, r0
    1a18:	e001      	b.n	1a1e <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1a1a:	3401      	adds	r4, #1
    1a1c:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    1a1e:	0028      	movs	r0, r5
    1a20:	bd70      	pop	{r4, r5, r6, pc}
    1a22:	46c0      	nop			; (mov r8, r8)
    1a24:	40000c00 	.word	0x40000c00
    1a28:	00000461 	.word	0x00000461
    1a2c:	40000c04 	.word	0x40000c04
    1a30:	00001489 	.word	0x00001489
    1a34:	40000c08 	.word	0x40000c08
    1a38:	000004a1 	.word	0x000004a1
    1a3c:	00003211 	.word	0x00003211

00001a40 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1a40:	b510      	push	{r4, lr}
    1a42:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1a44:	4b06      	ldr	r3, [pc, #24]	; (1a60 <system_gclk_chan_enable+0x20>)
    1a46:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1a48:	4b06      	ldr	r3, [pc, #24]	; (1a64 <system_gclk_chan_enable+0x24>)
    1a4a:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1a4c:	4a06      	ldr	r2, [pc, #24]	; (1a68 <system_gclk_chan_enable+0x28>)
    1a4e:	8853      	ldrh	r3, [r2, #2]
    1a50:	2180      	movs	r1, #128	; 0x80
    1a52:	01c9      	lsls	r1, r1, #7
    1a54:	430b      	orrs	r3, r1
    1a56:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1a58:	4b04      	ldr	r3, [pc, #16]	; (1a6c <system_gclk_chan_enable+0x2c>)
    1a5a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1a5c:	bd10      	pop	{r4, pc}
    1a5e:	46c0      	nop			; (mov r8, r8)
    1a60:	00000461 	.word	0x00000461
    1a64:	40000c02 	.word	0x40000c02
    1a68:	40000c00 	.word	0x40000c00
    1a6c:	000004a1 	.word	0x000004a1

00001a70 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1a70:	b510      	push	{r4, lr}
    1a72:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1a74:	4b0f      	ldr	r3, [pc, #60]	; (1ab4 <system_gclk_chan_disable+0x44>)
    1a76:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1a78:	4b0f      	ldr	r3, [pc, #60]	; (1ab8 <system_gclk_chan_disable+0x48>)
    1a7a:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1a7c:	4a0f      	ldr	r2, [pc, #60]	; (1abc <system_gclk_chan_disable+0x4c>)
    1a7e:	8853      	ldrh	r3, [r2, #2]
    1a80:	051b      	lsls	r3, r3, #20
    1a82:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1a84:	8853      	ldrh	r3, [r2, #2]
    1a86:	490e      	ldr	r1, [pc, #56]	; (1ac0 <system_gclk_chan_disable+0x50>)
    1a88:	400b      	ands	r3, r1
    1a8a:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1a8c:	8853      	ldrh	r3, [r2, #2]
    1a8e:	490d      	ldr	r1, [pc, #52]	; (1ac4 <system_gclk_chan_disable+0x54>)
    1a90:	400b      	ands	r3, r1
    1a92:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1a94:	0011      	movs	r1, r2
    1a96:	2280      	movs	r2, #128	; 0x80
    1a98:	01d2      	lsls	r2, r2, #7
    1a9a:	884b      	ldrh	r3, [r1, #2]
    1a9c:	4213      	tst	r3, r2
    1a9e:	d1fc      	bne.n	1a9a <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1aa0:	4906      	ldr	r1, [pc, #24]	; (1abc <system_gclk_chan_disable+0x4c>)
    1aa2:	884a      	ldrh	r2, [r1, #2]
    1aa4:	0203      	lsls	r3, r0, #8
    1aa6:	4806      	ldr	r0, [pc, #24]	; (1ac0 <system_gclk_chan_disable+0x50>)
    1aa8:	4002      	ands	r2, r0
    1aaa:	4313      	orrs	r3, r2
    1aac:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    1aae:	4b06      	ldr	r3, [pc, #24]	; (1ac8 <system_gclk_chan_disable+0x58>)
    1ab0:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1ab2:	bd10      	pop	{r4, pc}
    1ab4:	00000461 	.word	0x00000461
    1ab8:	40000c02 	.word	0x40000c02
    1abc:	40000c00 	.word	0x40000c00
    1ac0:	fffff0ff 	.word	0xfffff0ff
    1ac4:	ffffbfff 	.word	0xffffbfff
    1ac8:	000004a1 	.word	0x000004a1

00001acc <system_gclk_chan_set_config>:
{
    1acc:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1ace:	780c      	ldrb	r4, [r1, #0]
    1ad0:	0224      	lsls	r4, r4, #8
    1ad2:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    1ad4:	4b02      	ldr	r3, [pc, #8]	; (1ae0 <system_gclk_chan_set_config+0x14>)
    1ad6:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1ad8:	b2a4      	uxth	r4, r4
    1ada:	4b02      	ldr	r3, [pc, #8]	; (1ae4 <system_gclk_chan_set_config+0x18>)
    1adc:	805c      	strh	r4, [r3, #2]
}
    1ade:	bd10      	pop	{r4, pc}
    1ae0:	00001a71 	.word	0x00001a71
    1ae4:	40000c00 	.word	0x40000c00

00001ae8 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1ae8:	b510      	push	{r4, lr}
    1aea:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1aec:	4b06      	ldr	r3, [pc, #24]	; (1b08 <system_gclk_chan_get_hz+0x20>)
    1aee:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1af0:	4b06      	ldr	r3, [pc, #24]	; (1b0c <system_gclk_chan_get_hz+0x24>)
    1af2:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1af4:	4b06      	ldr	r3, [pc, #24]	; (1b10 <system_gclk_chan_get_hz+0x28>)
    1af6:	885c      	ldrh	r4, [r3, #2]
    1af8:	0524      	lsls	r4, r4, #20
    1afa:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    1afc:	4b05      	ldr	r3, [pc, #20]	; (1b14 <system_gclk_chan_get_hz+0x2c>)
    1afe:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1b00:	0020      	movs	r0, r4
    1b02:	4b05      	ldr	r3, [pc, #20]	; (1b18 <system_gclk_chan_get_hz+0x30>)
    1b04:	4798      	blx	r3
}
    1b06:	bd10      	pop	{r4, pc}
    1b08:	00000461 	.word	0x00000461
    1b0c:	40000c02 	.word	0x40000c02
    1b10:	40000c00 	.word	0x40000c00
    1b14:	000004a1 	.word	0x000004a1
    1b18:	000019b5 	.word	0x000019b5

00001b1c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1b1c:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1b1e:	78d3      	ldrb	r3, [r2, #3]
    1b20:	2b00      	cmp	r3, #0
    1b22:	d135      	bne.n	1b90 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1b24:	7813      	ldrb	r3, [r2, #0]
    1b26:	2b80      	cmp	r3, #128	; 0x80
    1b28:	d029      	beq.n	1b7e <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1b2a:	061b      	lsls	r3, r3, #24
    1b2c:	2480      	movs	r4, #128	; 0x80
    1b2e:	0264      	lsls	r4, r4, #9
    1b30:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1b32:	7854      	ldrb	r4, [r2, #1]
    1b34:	2502      	movs	r5, #2
    1b36:	43ac      	bics	r4, r5
    1b38:	d106      	bne.n	1b48 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1b3a:	7894      	ldrb	r4, [r2, #2]
    1b3c:	2c00      	cmp	r4, #0
    1b3e:	d120      	bne.n	1b82 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    1b40:	2480      	movs	r4, #128	; 0x80
    1b42:	02a4      	lsls	r4, r4, #10
    1b44:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1b46:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1b48:	7854      	ldrb	r4, [r2, #1]
    1b4a:	3c01      	subs	r4, #1
    1b4c:	2c01      	cmp	r4, #1
    1b4e:	d91c      	bls.n	1b8a <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1b50:	040d      	lsls	r5, r1, #16
    1b52:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1b54:	24a0      	movs	r4, #160	; 0xa0
    1b56:	05e4      	lsls	r4, r4, #23
    1b58:	432c      	orrs	r4, r5
    1b5a:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1b5c:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1b5e:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1b60:	24d0      	movs	r4, #208	; 0xd0
    1b62:	0624      	lsls	r4, r4, #24
    1b64:	432c      	orrs	r4, r5
    1b66:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1b68:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1b6a:	78d4      	ldrb	r4, [r2, #3]
    1b6c:	2c00      	cmp	r4, #0
    1b6e:	d122      	bne.n	1bb6 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1b70:	035b      	lsls	r3, r3, #13
    1b72:	d51c      	bpl.n	1bae <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1b74:	7893      	ldrb	r3, [r2, #2]
    1b76:	2b01      	cmp	r3, #1
    1b78:	d01e      	beq.n	1bb8 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    1b7a:	6141      	str	r1, [r0, #20]
    1b7c:	e017      	b.n	1bae <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    1b7e:	2300      	movs	r3, #0
    1b80:	e7d7      	b.n	1b32 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1b82:	24c0      	movs	r4, #192	; 0xc0
    1b84:	02e4      	lsls	r4, r4, #11
    1b86:	4323      	orrs	r3, r4
    1b88:	e7dd      	b.n	1b46 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1b8a:	4c0d      	ldr	r4, [pc, #52]	; (1bc0 <_system_pinmux_config+0xa4>)
    1b8c:	4023      	ands	r3, r4
    1b8e:	e7df      	b.n	1b50 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    1b90:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1b92:	040c      	lsls	r4, r1, #16
    1b94:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1b96:	23a0      	movs	r3, #160	; 0xa0
    1b98:	05db      	lsls	r3, r3, #23
    1b9a:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1b9c:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1b9e:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1ba0:	23d0      	movs	r3, #208	; 0xd0
    1ba2:	061b      	lsls	r3, r3, #24
    1ba4:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1ba6:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    1ba8:	78d3      	ldrb	r3, [r2, #3]
    1baa:	2b00      	cmp	r3, #0
    1bac:	d103      	bne.n	1bb6 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1bae:	7853      	ldrb	r3, [r2, #1]
    1bb0:	3b01      	subs	r3, #1
    1bb2:	2b01      	cmp	r3, #1
    1bb4:	d902      	bls.n	1bbc <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    1bb6:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    1bb8:	6181      	str	r1, [r0, #24]
    1bba:	e7f8      	b.n	1bae <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    1bbc:	6081      	str	r1, [r0, #8]
}
    1bbe:	e7fa      	b.n	1bb6 <_system_pinmux_config+0x9a>
    1bc0:	fffbffff 	.word	0xfffbffff

00001bc4 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1bc4:	b510      	push	{r4, lr}
    1bc6:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1bc8:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1bca:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1bcc:	2900      	cmp	r1, #0
    1bce:	d104      	bne.n	1bda <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1bd0:	0943      	lsrs	r3, r0, #5
    1bd2:	01db      	lsls	r3, r3, #7
    1bd4:	4905      	ldr	r1, [pc, #20]	; (1bec <system_pinmux_pin_set_config+0x28>)
    1bd6:	468c      	mov	ip, r1
    1bd8:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1bda:	241f      	movs	r4, #31
    1bdc:	4020      	ands	r0, r4
    1bde:	2101      	movs	r1, #1
    1be0:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    1be2:	0018      	movs	r0, r3
    1be4:	4b02      	ldr	r3, [pc, #8]	; (1bf0 <system_pinmux_pin_set_config+0x2c>)
    1be6:	4798      	blx	r3
}
    1be8:	bd10      	pop	{r4, pc}
    1bea:	46c0      	nop			; (mov r8, r8)
    1bec:	41004400 	.word	0x41004400
    1bf0:	00001b1d 	.word	0x00001b1d

00001bf4 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1bf4:	4770      	bx	lr
	...

00001bf8 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1bf8:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1bfa:	4b05      	ldr	r3, [pc, #20]	; (1c10 <system_init+0x18>)
    1bfc:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1bfe:	4b05      	ldr	r3, [pc, #20]	; (1c14 <system_init+0x1c>)
    1c00:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1c02:	4b05      	ldr	r3, [pc, #20]	; (1c18 <system_init+0x20>)
    1c04:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1c06:	4b05      	ldr	r3, [pc, #20]	; (1c1c <system_init+0x24>)
    1c08:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1c0a:	4b05      	ldr	r3, [pc, #20]	; (1c20 <system_init+0x28>)
    1c0c:	4798      	blx	r3
}
    1c0e:	bd10      	pop	{r4, pc}
    1c10:	00001739 	.word	0x00001739
    1c14:	000004d1 	.word	0x000004d1
    1c18:	00001bf5 	.word	0x00001bf5
    1c1c:	00001bf5 	.word	0x00001bf5
    1c20:	00001bf5 	.word	0x00001bf5

00001c24 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1c24:	e7fe      	b.n	1c24 <Dummy_Handler>
	...

00001c28 <Reset_Handler>:
{
    1c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    1c2a:	4a2a      	ldr	r2, [pc, #168]	; (1cd4 <Reset_Handler+0xac>)
    1c2c:	4b2a      	ldr	r3, [pc, #168]	; (1cd8 <Reset_Handler+0xb0>)
    1c2e:	429a      	cmp	r2, r3
    1c30:	d011      	beq.n	1c56 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    1c32:	001a      	movs	r2, r3
    1c34:	4b29      	ldr	r3, [pc, #164]	; (1cdc <Reset_Handler+0xb4>)
    1c36:	429a      	cmp	r2, r3
    1c38:	d20d      	bcs.n	1c56 <Reset_Handler+0x2e>
    1c3a:	4a29      	ldr	r2, [pc, #164]	; (1ce0 <Reset_Handler+0xb8>)
    1c3c:	3303      	adds	r3, #3
    1c3e:	1a9b      	subs	r3, r3, r2
    1c40:	089b      	lsrs	r3, r3, #2
    1c42:	3301      	adds	r3, #1
    1c44:	009b      	lsls	r3, r3, #2
    1c46:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1c48:	4823      	ldr	r0, [pc, #140]	; (1cd8 <Reset_Handler+0xb0>)
    1c4a:	4922      	ldr	r1, [pc, #136]	; (1cd4 <Reset_Handler+0xac>)
    1c4c:	588c      	ldr	r4, [r1, r2]
    1c4e:	5084      	str	r4, [r0, r2]
    1c50:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    1c52:	429a      	cmp	r2, r3
    1c54:	d1fa      	bne.n	1c4c <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    1c56:	4a23      	ldr	r2, [pc, #140]	; (1ce4 <Reset_Handler+0xbc>)
    1c58:	4b23      	ldr	r3, [pc, #140]	; (1ce8 <Reset_Handler+0xc0>)
    1c5a:	429a      	cmp	r2, r3
    1c5c:	d20a      	bcs.n	1c74 <Reset_Handler+0x4c>
    1c5e:	43d3      	mvns	r3, r2
    1c60:	4921      	ldr	r1, [pc, #132]	; (1ce8 <Reset_Handler+0xc0>)
    1c62:	185b      	adds	r3, r3, r1
    1c64:	2103      	movs	r1, #3
    1c66:	438b      	bics	r3, r1
    1c68:	3304      	adds	r3, #4
    1c6a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    1c6c:	2100      	movs	r1, #0
    1c6e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    1c70:	4293      	cmp	r3, r2
    1c72:	d1fc      	bne.n	1c6e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1c74:	4a1d      	ldr	r2, [pc, #116]	; (1cec <Reset_Handler+0xc4>)
    1c76:	21ff      	movs	r1, #255	; 0xff
    1c78:	4b1d      	ldr	r3, [pc, #116]	; (1cf0 <Reset_Handler+0xc8>)
    1c7a:	438b      	bics	r3, r1
    1c7c:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1c7e:	39fd      	subs	r1, #253	; 0xfd
    1c80:	2390      	movs	r3, #144	; 0x90
    1c82:	005b      	lsls	r3, r3, #1
    1c84:	4a1b      	ldr	r2, [pc, #108]	; (1cf4 <Reset_Handler+0xcc>)
    1c86:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1c88:	4a1b      	ldr	r2, [pc, #108]	; (1cf8 <Reset_Handler+0xd0>)
    1c8a:	78d3      	ldrb	r3, [r2, #3]
    1c8c:	2503      	movs	r5, #3
    1c8e:	43ab      	bics	r3, r5
    1c90:	2402      	movs	r4, #2
    1c92:	4323      	orrs	r3, r4
    1c94:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1c96:	78d3      	ldrb	r3, [r2, #3]
    1c98:	270c      	movs	r7, #12
    1c9a:	43bb      	bics	r3, r7
    1c9c:	2608      	movs	r6, #8
    1c9e:	4333      	orrs	r3, r6
    1ca0:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    1ca2:	4b16      	ldr	r3, [pc, #88]	; (1cfc <Reset_Handler+0xd4>)
    1ca4:	7b98      	ldrb	r0, [r3, #14]
    1ca6:	2230      	movs	r2, #48	; 0x30
    1ca8:	4390      	bics	r0, r2
    1caa:	2220      	movs	r2, #32
    1cac:	4310      	orrs	r0, r2
    1cae:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1cb0:	7b99      	ldrb	r1, [r3, #14]
    1cb2:	43b9      	bics	r1, r7
    1cb4:	4331      	orrs	r1, r6
    1cb6:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1cb8:	7b9a      	ldrb	r2, [r3, #14]
    1cba:	43aa      	bics	r2, r5
    1cbc:	4322      	orrs	r2, r4
    1cbe:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    1cc0:	4a0f      	ldr	r2, [pc, #60]	; (1d00 <Reset_Handler+0xd8>)
    1cc2:	6853      	ldr	r3, [r2, #4]
    1cc4:	2180      	movs	r1, #128	; 0x80
    1cc6:	430b      	orrs	r3, r1
    1cc8:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    1cca:	4b0e      	ldr	r3, [pc, #56]	; (1d04 <Reset_Handler+0xdc>)
    1ccc:	4798      	blx	r3
        main();
    1cce:	4b0e      	ldr	r3, [pc, #56]	; (1d08 <Reset_Handler+0xe0>)
    1cd0:	4798      	blx	r3
    1cd2:	e7fe      	b.n	1cd2 <Reset_Handler+0xaa>
    1cd4:	00006860 	.word	0x00006860
    1cd8:	20000000 	.word	0x20000000
    1cdc:	200001bc 	.word	0x200001bc
    1ce0:	20000004 	.word	0x20000004
    1ce4:	200001bc 	.word	0x200001bc
    1ce8:	20000ab8 	.word	0x20000ab8
    1cec:	e000ed00 	.word	0xe000ed00
    1cf0:	00000000 	.word	0x00000000
    1cf4:	41007000 	.word	0x41007000
    1cf8:	41005000 	.word	0x41005000
    1cfc:	41004800 	.word	0x41004800
    1d00:	41004000 	.word	0x41004000
    1d04:	0000337d 	.word	0x0000337d
    1d08:	00003181 	.word	0x00003181

00001d0c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    1d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d0e:	46c6      	mov	lr, r8
    1d10:	b500      	push	{lr}
    1d12:	000c      	movs	r4, r1
    1d14:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    1d16:	2800      	cmp	r0, #0
    1d18:	d10f      	bne.n	1d3a <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    1d1a:	2a00      	cmp	r2, #0
    1d1c:	dd11      	ble.n	1d42 <_read+0x36>
    1d1e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    1d20:	4e09      	ldr	r6, [pc, #36]	; (1d48 <_read+0x3c>)
    1d22:	4d0a      	ldr	r5, [pc, #40]	; (1d4c <_read+0x40>)
    1d24:	6830      	ldr	r0, [r6, #0]
    1d26:	0021      	movs	r1, r4
    1d28:	682b      	ldr	r3, [r5, #0]
    1d2a:	4798      	blx	r3
		ptr++;
    1d2c:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    1d2e:	42bc      	cmp	r4, r7
    1d30:	d1f8      	bne.n	1d24 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    1d32:	4640      	mov	r0, r8
    1d34:	bc04      	pop	{r2}
    1d36:	4690      	mov	r8, r2
    1d38:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    1d3a:	2301      	movs	r3, #1
    1d3c:	425b      	negs	r3, r3
    1d3e:	4698      	mov	r8, r3
    1d40:	e7f7      	b.n	1d32 <_read+0x26>
	for (; len > 0; --len) {
    1d42:	4680      	mov	r8, r0
    1d44:	e7f5      	b.n	1d32 <_read+0x26>
    1d46:	46c0      	nop			; (mov r8, r8)
    1d48:	200002cc 	.word	0x200002cc
    1d4c:	200002c4 	.word	0x200002c4

00001d50 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    1d50:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d52:	46c6      	mov	lr, r8
    1d54:	b500      	push	{lr}
    1d56:	000e      	movs	r6, r1
    1d58:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    1d5a:	3801      	subs	r0, #1
    1d5c:	2802      	cmp	r0, #2
    1d5e:	d810      	bhi.n	1d82 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    1d60:	2a00      	cmp	r2, #0
    1d62:	d011      	beq.n	1d88 <_write+0x38>
    1d64:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    1d66:	4b0c      	ldr	r3, [pc, #48]	; (1d98 <_write+0x48>)
    1d68:	4698      	mov	r8, r3
    1d6a:	4f0c      	ldr	r7, [pc, #48]	; (1d9c <_write+0x4c>)
    1d6c:	4643      	mov	r3, r8
    1d6e:	6818      	ldr	r0, [r3, #0]
    1d70:	5d31      	ldrb	r1, [r6, r4]
    1d72:	683b      	ldr	r3, [r7, #0]
    1d74:	4798      	blx	r3
    1d76:	2800      	cmp	r0, #0
    1d78:	db08      	blt.n	1d8c <_write+0x3c>
			return -1;
		}
		++nChars;
    1d7a:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    1d7c:	42a5      	cmp	r5, r4
    1d7e:	d1f5      	bne.n	1d6c <_write+0x1c>
    1d80:	e006      	b.n	1d90 <_write+0x40>
		return -1;
    1d82:	2401      	movs	r4, #1
    1d84:	4264      	negs	r4, r4
    1d86:	e003      	b.n	1d90 <_write+0x40>
	for (; len != 0; --len) {
    1d88:	0014      	movs	r4, r2
    1d8a:	e001      	b.n	1d90 <_write+0x40>
			return -1;
    1d8c:	2401      	movs	r4, #1
    1d8e:	4264      	negs	r4, r4
	}
	return nChars;
}
    1d90:	0020      	movs	r0, r4
    1d92:	bc04      	pop	{r2}
    1d94:	4690      	mov	r8, r2
    1d96:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d98:	200002cc 	.word	0x200002cc
    1d9c:	200002c8 	.word	0x200002c8

00001da0 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    1da0:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    1da2:	4a06      	ldr	r2, [pc, #24]	; (1dbc <_sbrk+0x1c>)
    1da4:	6812      	ldr	r2, [r2, #0]
    1da6:	2a00      	cmp	r2, #0
    1da8:	d004      	beq.n	1db4 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    1daa:	4a04      	ldr	r2, [pc, #16]	; (1dbc <_sbrk+0x1c>)
    1dac:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    1dae:	18c3      	adds	r3, r0, r3
    1db0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    1db2:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    1db4:	4902      	ldr	r1, [pc, #8]	; (1dc0 <_sbrk+0x20>)
    1db6:	4a01      	ldr	r2, [pc, #4]	; (1dbc <_sbrk+0x1c>)
    1db8:	6011      	str	r1, [r2, #0]
    1dba:	e7f6      	b.n	1daa <_sbrk+0xa>
    1dbc:	20000294 	.word	0x20000294
    1dc0:	20002ab8 	.word	0x20002ab8

00001dc4 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    1dc4:	2001      	movs	r0, #1
    1dc6:	4240      	negs	r0, r0
    1dc8:	4770      	bx	lr

00001dca <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    1dca:	2380      	movs	r3, #128	; 0x80
    1dcc:	019b      	lsls	r3, r3, #6
    1dce:	604b      	str	r3, [r1, #4]

	return 0;
}
    1dd0:	2000      	movs	r0, #0
    1dd2:	4770      	bx	lr

00001dd4 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    1dd4:	2001      	movs	r0, #1
    1dd6:	4770      	bx	lr

00001dd8 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    1dd8:	2000      	movs	r0, #0
    1dda:	4770      	bx	lr

00001ddc <drawChar>:
uint16_t xCharPos = 0;
uint16_t yCharPos = 0;


void drawChar(uint8_t character)
{
    1ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
    1dde:	46d6      	mov	lr, sl
    1de0:	464f      	mov	r7, r9
    1de2:	4646      	mov	r6, r8
    1de4:	b5c0      	push	{r6, r7, lr}
    1de6:	0004      	movs	r4, r0
	uint16_t x = xCharPos;
    1de8:	4b2a      	ldr	r3, [pc, #168]	; (1e94 <drawChar+0xb8>)
    1dea:	881b      	ldrh	r3, [r3, #0]
	uint16_t y = yCharPos;
    1dec:	4a2a      	ldr	r2, [pc, #168]	; (1e98 <drawChar+0xbc>)
    1dee:	8815      	ldrh	r5, [r2, #0]
	
	consoleDisplay[xCharPos][yCharPos] = character;
    1df0:	005a      	lsls	r2, r3, #1
    1df2:	18d2      	adds	r2, r2, r3
    1df4:	00d2      	lsls	r2, r2, #3
    1df6:	4829      	ldr	r0, [pc, #164]	; (1e9c <drawChar+0xc0>)
    1df8:	1882      	adds	r2, r0, r2
    1dfa:	5554      	strb	r4, [r2, r5]
	
	REG_PORT_OUTCLR1 = LCD_CS;
    1dfc:	2180      	movs	r1, #128	; 0x80
    1dfe:	03c9      	lsls	r1, r1, #15
    1e00:	4a27      	ldr	r2, [pc, #156]	; (1ea0 <drawChar+0xc4>)
    1e02:	6011      	str	r1, [r2, #0]
	setXY(x*10,y*20,x*10+9,y*20+19);
    1e04:	0098      	lsls	r0, r3, #2
    1e06:	181b      	adds	r3, r3, r0
    1e08:	005b      	lsls	r3, r3, #1
    1e0a:	b298      	uxth	r0, r3
    1e0c:	2114      	movs	r1, #20
    1e0e:	4369      	muls	r1, r5
    1e10:	b289      	uxth	r1, r1
    1e12:	000b      	movs	r3, r1
    1e14:	3313      	adds	r3, #19
    1e16:	b29b      	uxth	r3, r3
    1e18:	0002      	movs	r2, r0
    1e1a:	3209      	adds	r2, #9
    1e1c:	b292      	uxth	r2, r2
    1e1e:	4d21      	ldr	r5, [pc, #132]	; (1ea4 <drawChar+0xc8>)
    1e20:	47a8      	blx	r5
    1e22:	4a21      	ldr	r2, [pc, #132]	; (1ea8 <drawChar+0xcc>)
    1e24:	00a5      	lsls	r5, r4, #2
    1e26:	192d      	adds	r5, r5, r4
    1e28:	00ab      	lsls	r3, r5, #2
    1e2a:	18ed      	adds	r5, r5, r3
    1e2c:	1955      	adds	r5, r2, r5
    1e2e:	3401      	adds	r4, #1
    1e30:	00a3      	lsls	r3, r4, #2
    1e32:	191c      	adds	r4, r3, r4
    1e34:	00a3      	lsls	r3, r4, #2
    1e36:	18e4      	adds	r4, r4, r3
    1e38:	4692      	mov	sl, r2
    1e3a:	44a2      	add	sl, r4
			{
				setPixel((fore_Color_High<<8)|fore_Color_Low);	
			}
			else
			{
				setPixel((back_Color_High<<8)|back_Color_Low);
    1e3c:	4b1b      	ldr	r3, [pc, #108]	; (1eac <drawChar+0xd0>)
    1e3e:	4699      	mov	r9, r3
    1e40:	4b1b      	ldr	r3, [pc, #108]	; (1eb0 <drawChar+0xd4>)
    1e42:	4698      	mov	r8, r3
    1e44:	4f1b      	ldr	r7, [pc, #108]	; (1eb4 <drawChar+0xd8>)
				setPixel((fore_Color_High<<8)|fore_Color_Low);	
    1e46:	4e1c      	ldr	r6, [pc, #112]	; (1eb8 <drawChar+0xdc>)
    1e48:	e019      	b.n	1e7e <drawChar+0xa2>
				setPixel((back_Color_High<<8)|back_Color_Low);
    1e4a:	464b      	mov	r3, r9
    1e4c:	8818      	ldrh	r0, [r3, #0]
    1e4e:	0200      	lsls	r0, r0, #8
    1e50:	4643      	mov	r3, r8
    1e52:	881b      	ldrh	r3, [r3, #0]
    1e54:	4318      	orrs	r0, r3
    1e56:	b280      	uxth	r0, r0
    1e58:	47b8      	blx	r7
		for(int j=0;j<8;j++)
    1e5a:	3c01      	subs	r4, #1
    1e5c:	d30c      	bcc.n	1e78 <drawChar+0x9c>
			if((CodePage437[character][i]&(1<<(7-j)))!=0)
    1e5e:	782b      	ldrb	r3, [r5, #0]
    1e60:	4123      	asrs	r3, r4
    1e62:	07db      	lsls	r3, r3, #31
    1e64:	d5f1      	bpl.n	1e4a <drawChar+0x6e>
				setPixel((fore_Color_High<<8)|fore_Color_Low);	
    1e66:	8830      	ldrh	r0, [r6, #0]
    1e68:	0200      	lsls	r0, r0, #8
    1e6a:	4b14      	ldr	r3, [pc, #80]	; (1ebc <drawChar+0xe0>)
    1e6c:	881b      	ldrh	r3, [r3, #0]
    1e6e:	4318      	orrs	r0, r3
    1e70:	b280      	uxth	r0, r0
    1e72:	4b10      	ldr	r3, [pc, #64]	; (1eb4 <drawChar+0xd8>)
    1e74:	4798      	blx	r3
    1e76:	e7f0      	b.n	1e5a <drawChar+0x7e>
    1e78:	3501      	adds	r5, #1
	for(uint16_t i=0; i <= 24; i++)
    1e7a:	4555      	cmp	r5, sl
    1e7c:	d001      	beq.n	1e82 <drawChar+0xa6>
{
    1e7e:	2407      	movs	r4, #7
    1e80:	e7ed      	b.n	1e5e <drawChar+0x82>
			}

		}
	}
	REG_PORT_OUTSET1 = LCD_CS;
    1e82:	2280      	movs	r2, #128	; 0x80
    1e84:	03d2      	lsls	r2, r2, #15
    1e86:	4b0e      	ldr	r3, [pc, #56]	; (1ec0 <drawChar+0xe4>)
    1e88:	601a      	str	r2, [r3, #0]

}
    1e8a:	bc1c      	pop	{r2, r3, r4}
    1e8c:	4690      	mov	r8, r2
    1e8e:	4699      	mov	r9, r3
    1e90:	46a2      	mov	sl, r4
    1e92:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1e94:	20000298 	.word	0x20000298
    1e98:	2000029a 	.word	0x2000029a
    1e9c:	20000308 	.word	0x20000308
    1ea0:	41004494 	.word	0x41004494
    1ea4:	00002941 	.word	0x00002941
    1ea8:	00004c44 	.word	0x00004c44
    1eac:	20000a8e 	.word	0x20000a8e
    1eb0:	20000a88 	.word	0x20000a88
    1eb4:	00002b01 	.word	0x00002b01
    1eb8:	20000a8a 	.word	0x20000a8a
    1ebc:	20000a8c 	.word	0x20000a8c
    1ec0:	41004498 	.word	0x41004498

00001ec4 <newLine>:

void newLine(void)
{
    1ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ec6:	46de      	mov	lr, fp
    1ec8:	4657      	mov	r7, sl
    1eca:	464e      	mov	r6, r9
    1ecc:	4645      	mov	r5, r8
    1ece:	b5e0      	push	{r5, r6, r7, lr}
    1ed0:	4c56      	ldr	r4, [pc, #344]	; (202c <STACK_SIZE+0x2c>)
    1ed2:	44a5      	add	sp, r4
    1ed4:	4856      	ldr	r0, [pc, #344]	; (2030 <STACK_SIZE+0x30>)
    1ed6:	23f0      	movs	r3, #240	; 0xf0
    1ed8:	00db      	lsls	r3, r3, #3
    1eda:	18c4      	adds	r4, r0, r3
    1edc:	e002      	b.n	1ee4 <newLine+0x20>
    1ede:	3018      	adds	r0, #24
	/*
	This is split into two parts; the first moves consoledisplay around
	so the first line is deleted and all other lines are moved up one line
	*/
	
	for(int i = 0 ; i < 80 ; i++)
    1ee0:	42a0      	cmp	r0, r4
    1ee2:	d008      	beq.n	1ef6 <newLine+0x32>
    1ee4:	0001      	movs	r1, r0
    1ee6:	3117      	adds	r1, #23
{
    1ee8:	0003      	movs	r3, r0
	{
		for(int j = 1 ; j < 24 ; j++)
		{
			consoleDisplay[i][j-1] = consoleDisplay[i][j];
    1eea:	785a      	ldrb	r2, [r3, #1]
    1eec:	701a      	strb	r2, [r3, #0]
    1eee:	3301      	adds	r3, #1
		for(int j = 1 ; j < 24 ; j++)
    1ef0:	428b      	cmp	r3, r1
    1ef2:	d1fa      	bne.n	1eea <newLine+0x26>
    1ef4:	e7f3      	b.n	1ede <newLine+0x1a>
    1ef6:	4b4f      	ldr	r3, [pc, #316]	; (2034 <STACK_SIZE+0x34>)
    1ef8:	22f0      	movs	r2, #240	; 0xf0
    1efa:	00d2      	lsls	r2, r2, #3
    1efc:	1899      	adds	r1, r3, r2
		}
	}
	
	for(int k = 0 ; k < 80 ; k ++)
	{
		consoleDisplay[k][23] = 0x00;
    1efe:	2200      	movs	r2, #0
    1f00:	701a      	strb	r2, [r3, #0]
    1f02:	3318      	adds	r3, #24
	for(int k = 0 ; k < 80 ; k ++)
    1f04:	428b      	cmp	r3, r1
    1f06:	d1fb      	bne.n	1f00 <newLine+0x3c>
    1f08:	2300      	movs	r3, #0
    1f0a:	9300      	str	r3, [sp, #0]
			
	for(uint16_t row = 0 ; row < 460 ; row++)
	{
		//Per page 40 of datasheet (5.1.2.7, 16-bit
		//parallel interface for data ram read.
		REG_PORT_OUTCLR1 = LCD_CS;
    1f0c:	4b4a      	ldr	r3, [pc, #296]	; (2038 <STACK_SIZE+0x38>)
    1f0e:	4698      	mov	r8, r3
		setXY(0, row+20, 799, row+20);
		//Send'Memory read' command 0x2E00, no data bit
		LCD_Write_COM16(0x2E,0x00);
		REG_PORT_OUTSET1 = LCD_DC;
    1f10:	4f4a      	ldr	r7, [pc, #296]	; (203c <STACK_SIZE+0x3c>)
		
		
		//Read pixel data into the display	
		for(uint16_t getpixel = 0 ; getpixel < 800 ; getpixel++)
		{
			REG_PORT_OUTCLR1 = LCD_RD;
    1f12:	2680      	movs	r6, #128	; 0x80
    1f14:	0276      	lsls	r6, r6, #9
    1f16:	e046      	b.n	1fa6 <newLine+0xe2>
			//This can be expanded with else if for the MSBs
			//of all the colors; see datasheet page 40.
			if((PORT->Group[1].IN.reg & PORT_PB07) != 0)
				rowPixel[getpixel] = 0xFF;
			else
				rowPixel[getpixel] = 0x00;
    1f18:	4653      	mov	r3, sl
    1f1a:	7023      	strb	r3, [r4, #0]
			//dummy read, because pixel data broken up
			//per datasheet page 40. Everything after
			//the dummy write is BLUE pixels. Do we ever
			//need blue? IDK.
			
			REG_PORT_OUTCLR1 = LCD_RD;
    1f1c:	4643      	mov	r3, r8
    1f1e:	601e      	str	r6, [r3, #0]
			REG_PORT_OUTSET1 = LCD_RD;
    1f20:	603e      	str	r6, [r7, #0]
    1f22:	3401      	adds	r4, #1
		for(uint16_t getpixel = 0 ; getpixel < 800 ; getpixel++)
    1f24:	4564      	cmp	r4, ip
    1f26:	d008      	beq.n	1f3a <newLine+0x76>
			REG_PORT_OUTCLR1 = LCD_RD;
    1f28:	4643      	mov	r3, r8
    1f2a:	601e      	str	r6, [r3, #0]
			REG_PORT_OUTSET1 = LCD_RD;
    1f2c:	603e      	str	r6, [r7, #0]
			if((PORT->Group[1].IN.reg & PORT_PB07) != 0)
    1f2e:	5843      	ldr	r3, [r0, r1]
    1f30:	421a      	tst	r2, r3
    1f32:	d0f1      	beq.n	1f18 <newLine+0x54>
				rowPixel[getpixel] = 0xFF;
    1f34:	464b      	mov	r3, r9
    1f36:	7023      	strb	r3, [r4, #0]
    1f38:	e7f0      	b.n	1f1c <newLine+0x58>
    1f3a:	9401      	str	r4, [sp, #4]
		}
		
		REG_PORT_OUTSET1 = LCD_DC;
    1f3c:	2380      	movs	r3, #128	; 0x80
    1f3e:	041b      	lsls	r3, r3, #16
    1f40:	603b      	str	r3, [r7, #0]
		REG_PORT_DIRSET1 = 0x0000FFFF;
    1f42:	4a3f      	ldr	r2, [pc, #252]	; (2040 <STACK_SIZE+0x40>)
    1f44:	4b3f      	ldr	r3, [pc, #252]	; (2044 <STACK_SIZE+0x44>)
    1f46:	601a      	str	r2, [r3, #0]
		
		//now, read out that line of the display
		setXY(0, row, 799, row);	
    1f48:	9900      	ldr	r1, [sp, #0]
    1f4a:	000b      	movs	r3, r1
    1f4c:	4a3e      	ldr	r2, [pc, #248]	; (2048 <STACK_SIZE+0x48>)
    1f4e:	2000      	movs	r0, #0
    1f50:	4c3e      	ldr	r4, [pc, #248]	; (204c <STACK_SIZE+0x4c>)
    1f52:	47a0      	blx	r4
		for(uint16_t writepixel = 0 ; writepixel < 800 ; writepixel++)
		{
			if((rowPixel[writepixel] == 0xFF))
				setPixel((fore_Color_High<<8)|fore_Color_Low);
			else
				setPixel((back_Color_High<<8)|back_Color_Low);
    1f54:	4b3e      	ldr	r3, [pc, #248]	; (2050 <STACK_SIZE+0x50>)
    1f56:	469b      	mov	fp, r3
    1f58:	4b3e      	ldr	r3, [pc, #248]	; (2054 <STACK_SIZE+0x54>)
    1f5a:	469a      	mov	sl, r3
    1f5c:	4b3e      	ldr	r3, [pc, #248]	; (2058 <STACK_SIZE+0x58>)
    1f5e:	4699      	mov	r9, r3
    1f60:	9c01      	ldr	r4, [sp, #4]
    1f62:	e00b      	b.n	1f7c <newLine+0xb8>
				setPixel((fore_Color_High<<8)|fore_Color_Low);
    1f64:	4b3d      	ldr	r3, [pc, #244]	; (205c <STACK_SIZE+0x5c>)
    1f66:	8818      	ldrh	r0, [r3, #0]
    1f68:	0200      	lsls	r0, r0, #8
    1f6a:	4b3d      	ldr	r3, [pc, #244]	; (2060 <STACK_SIZE+0x60>)
    1f6c:	881b      	ldrh	r3, [r3, #0]
    1f6e:	4318      	orrs	r0, r3
    1f70:	b280      	uxth	r0, r0
    1f72:	4b39      	ldr	r3, [pc, #228]	; (2058 <STACK_SIZE+0x58>)
    1f74:	4798      	blx	r3
    1f76:	3501      	adds	r5, #1
		for(uint16_t writepixel = 0 ; writepixel < 800 ; writepixel++)
    1f78:	42a5      	cmp	r5, r4
    1f7a:	d00b      	beq.n	1f94 <newLine+0xd0>
			if((rowPixel[writepixel] == 0xFF))
    1f7c:	782b      	ldrb	r3, [r5, #0]
    1f7e:	2bff      	cmp	r3, #255	; 0xff
    1f80:	d0f0      	beq.n	1f64 <newLine+0xa0>
				setPixel((back_Color_High<<8)|back_Color_Low);
    1f82:	465b      	mov	r3, fp
    1f84:	8818      	ldrh	r0, [r3, #0]
    1f86:	0200      	lsls	r0, r0, #8
    1f88:	4653      	mov	r3, sl
    1f8a:	881b      	ldrh	r3, [r3, #0]
    1f8c:	4318      	orrs	r0, r3
    1f8e:	b280      	uxth	r0, r0
    1f90:	47c8      	blx	r9
    1f92:	e7f0      	b.n	1f76 <newLine+0xb2>
	for(uint16_t row = 0 ; row < 460 ; row++)
    1f94:	9b00      	ldr	r3, [sp, #0]
    1f96:	3301      	adds	r3, #1
    1f98:	b29b      	uxth	r3, r3
    1f9a:	001a      	movs	r2, r3
    1f9c:	9300      	str	r3, [sp, #0]
    1f9e:	23e6      	movs	r3, #230	; 0xe6
    1fa0:	005b      	lsls	r3, r3, #1
    1fa2:	429a      	cmp	r2, r3
    1fa4:	d031      	beq.n	200a <STACK_SIZE+0xa>
		REG_PORT_OUTCLR1 = LCD_CS;
    1fa6:	4643      	mov	r3, r8
    1fa8:	2280      	movs	r2, #128	; 0x80
    1faa:	03d2      	lsls	r2, r2, #15
    1fac:	601a      	str	r2, [r3, #0]
		setXY(0, row+20, 799, row+20);
    1fae:	9900      	ldr	r1, [sp, #0]
    1fb0:	3114      	adds	r1, #20
    1fb2:	b289      	uxth	r1, r1
    1fb4:	000b      	movs	r3, r1
    1fb6:	4a24      	ldr	r2, [pc, #144]	; (2048 <STACK_SIZE+0x48>)
    1fb8:	2000      	movs	r0, #0
    1fba:	4c24      	ldr	r4, [pc, #144]	; (204c <STACK_SIZE+0x4c>)
    1fbc:	47a0      	blx	r4
		LCD_Write_COM16(0x2E,0x00);
    1fbe:	2100      	movs	r1, #0
    1fc0:	202e      	movs	r0, #46	; 0x2e
    1fc2:	4b28      	ldr	r3, [pc, #160]	; (2064 <STACK_SIZE+0x64>)
    1fc4:	4798      	blx	r3
		REG_PORT_OUTSET1 = LCD_DC;
    1fc6:	2380      	movs	r3, #128	; 0x80
    1fc8:	041b      	lsls	r3, r3, #16
    1fca:	603b      	str	r3, [r7, #0]
		REG_PORT_OUTCLR1 = LCD_RD;
    1fcc:	4643      	mov	r3, r8
    1fce:	2280      	movs	r2, #128	; 0x80
    1fd0:	0252      	lsls	r2, r2, #9
    1fd2:	601a      	str	r2, [r3, #0]
		REG_PORT_OUTSET1 = LCD_RD;
    1fd4:	603a      	str	r2, [r7, #0]
		REG_PORT_DIRCLR1 = PORT_PB07;
    1fd6:	2280      	movs	r2, #128	; 0x80
    1fd8:	4b23      	ldr	r3, [pc, #140]	; (2068 <STACK_SIZE+0x68>)
    1fda:	601a      	str	r2, [r3, #0]
		PORT->Group[1].PINCFG[7].bit.INEN = 1;
    1fdc:	4a23      	ldr	r2, [pc, #140]	; (206c <STACK_SIZE+0x6c>)
    1fde:	23c7      	movs	r3, #199	; 0xc7
    1fe0:	5cd1      	ldrb	r1, [r2, r3]
    1fe2:	2002      	movs	r0, #2
    1fe4:	4301      	orrs	r1, r0
    1fe6:	54d1      	strb	r1, [r2, r3]
		PORT->Group[1].PINCFG[7].bit.PULLEN = 1;
    1fe8:	5cd1      	ldrb	r1, [r2, r3]
    1fea:	2004      	movs	r0, #4
    1fec:	4301      	orrs	r1, r0
    1fee:	54d1      	strb	r1, [r2, r3]
    1ff0:	ad02      	add	r5, sp, #8
    1ff2:	abca      	add	r3, sp, #808	; 0x328
    1ff4:	469c      	mov	ip, r3
    1ff6:	9501      	str	r5, [sp, #4]
			if((PORT->Group[1].IN.reg & PORT_PB07) != 0)
    1ff8:	0010      	movs	r0, r2
    1ffa:	21a0      	movs	r1, #160	; 0xa0
    1ffc:	2280      	movs	r2, #128	; 0x80
				rowPixel[getpixel] = 0x00;
    1ffe:	2300      	movs	r3, #0
    2000:	469a      	mov	sl, r3
				rowPixel[getpixel] = 0xFF;
    2002:	33ff      	adds	r3, #255	; 0xff
    2004:	4699      	mov	r9, r3
    2006:	002c      	movs	r4, r5
    2008:	e78e      	b.n	1f28 <newLine+0x64>
		}
	}
	
	//clear the last character line of the display
	//and fix the console text buffer
	fillRectBackColor(0, 460, 799, 480);
    200a:	3314      	adds	r3, #20
    200c:	4a0e      	ldr	r2, [pc, #56]	; (2048 <STACK_SIZE+0x48>)
    200e:	21e6      	movs	r1, #230	; 0xe6
    2010:	0049      	lsls	r1, r1, #1
    2012:	2000      	movs	r0, #0
    2014:	4c16      	ldr	r4, [pc, #88]	; (2070 <STACK_SIZE+0x70>)
    2016:	47a0      	blx	r4
	
	
}
    2018:	23cb      	movs	r3, #203	; 0xcb
    201a:	009b      	lsls	r3, r3, #2
    201c:	449d      	add	sp, r3
    201e:	bc3c      	pop	{r2, r3, r4, r5}
    2020:	4690      	mov	r8, r2
    2022:	4699      	mov	r9, r3
    2024:	46a2      	mov	sl, r4
    2026:	46ab      	mov	fp, r5
    2028:	bdf0      	pop	{r4, r5, r6, r7, pc}
    202a:	46c0      	nop			; (mov r8, r8)
    202c:	fffffcd4 	.word	0xfffffcd4
    2030:	20000308 	.word	0x20000308
    2034:	2000031f 	.word	0x2000031f
    2038:	41004494 	.word	0x41004494
    203c:	41004498 	.word	0x41004498
    2040:	0000ffff 	.word	0x0000ffff
    2044:	41004488 	.word	0x41004488
    2048:	0000031f 	.word	0x0000031f
    204c:	00002941 	.word	0x00002941
    2050:	20000a8e 	.word	0x20000a8e
    2054:	20000a88 	.word	0x20000a88
    2058:	00002b01 	.word	0x00002b01
    205c:	20000a8a 	.word	0x20000a8a
    2060:	20000a8c 	.word	0x20000a8c
    2064:	00002b6d 	.word	0x00002b6d
    2068:	41004484 	.word	0x41004484
    206c:	41004400 	.word	0x41004400
    2070:	00002a41 	.word	0x00002a41

00002074 <blinkCursor>:

void blinkCursor(void)
{
    2074:	b5f0      	push	{r4, r5, r6, r7, lr}
    2076:	46d6      	mov	lr, sl
    2078:	464f      	mov	r7, r9
    207a:	4646      	mov	r6, r8
    207c:	b5c0      	push	{r6, r7, lr}
	uint16_t x = xCharPos;
    207e:	4b47      	ldr	r3, [pc, #284]	; (219c <blinkCursor+0x128>)
    2080:	881b      	ldrh	r3, [r3, #0]
	uint16_t y = yCharPos;
    2082:	4a47      	ldr	r2, [pc, #284]	; (21a0 <blinkCursor+0x12c>)
    2084:	8815      	ldrh	r5, [r2, #0]
	unsigned char character = consoleDisplay[x][y];
    2086:	005a      	lsls	r2, r3, #1
    2088:	18d2      	adds	r2, r2, r3
    208a:	00d2      	lsls	r2, r2, #3
    208c:	4845      	ldr	r0, [pc, #276]	; (21a4 <blinkCursor+0x130>)
    208e:	1882      	adds	r2, r0, r2
    2090:	5d54      	ldrb	r4, [r2, r5]
	setXY(x*10,y*20,x*10+9,y*20+19);
    2092:	0098      	lsls	r0, r3, #2
    2094:	181b      	adds	r3, r3, r0
    2096:	005b      	lsls	r3, r3, #1
    2098:	b298      	uxth	r0, r3
    209a:	2114      	movs	r1, #20
    209c:	4369      	muls	r1, r5
    209e:	b289      	uxth	r1, r1
    20a0:	000b      	movs	r3, r1
    20a2:	3313      	adds	r3, #19
    20a4:	b29b      	uxth	r3, r3
    20a6:	0002      	movs	r2, r0
    20a8:	3209      	adds	r2, #9
    20aa:	b292      	uxth	r2, r2
    20ac:	4d3e      	ldr	r5, [pc, #248]	; (21a8 <blinkCursor+0x134>)
    20ae:	47a8      	blx	r5
	REG_PORT_OUTCLR1 = LCD_CS;
    20b0:	2280      	movs	r2, #128	; 0x80
    20b2:	03d2      	lsls	r2, r2, #15
    20b4:	4b3d      	ldr	r3, [pc, #244]	; (21ac <blinkCursor+0x138>)
    20b6:	601a      	str	r2, [r3, #0]
	if(cursorBlinkState)
    20b8:	4b3d      	ldr	r3, [pc, #244]	; (21b0 <blinkCursor+0x13c>)
    20ba:	781b      	ldrb	r3, [r3, #0]
    20bc:	2b00      	cmp	r3, #0
    20be:	d113      	bne.n	20e8 <blinkCursor+0x74>
    20c0:	4a3c      	ldr	r2, [pc, #240]	; (21b4 <blinkCursor+0x140>)
    20c2:	00a5      	lsls	r5, r4, #2
    20c4:	192d      	adds	r5, r5, r4
    20c6:	00ab      	lsls	r3, r5, #2
    20c8:	18ed      	adds	r5, r5, r3
    20ca:	1955      	adds	r5, r2, r5
    20cc:	3401      	adds	r4, #1
    20ce:	00a3      	lsls	r3, r4, #2
    20d0:	191c      	adds	r4, r3, r4
    20d2:	00a3      	lsls	r3, r4, #2
    20d4:	18e4      	adds	r4, r4, r3
    20d6:	4692      	mov	sl, r2
    20d8:	44a2      	add	sl, r4
				{
					setPixel((fore_Color_High<<8)|fore_Color_Low);
				}
				else
				{
					setPixel((back_Color_High<<8)|back_Color_Low);
    20da:	4b37      	ldr	r3, [pc, #220]	; (21b8 <blinkCursor+0x144>)
    20dc:	4699      	mov	r9, r3
    20de:	4b37      	ldr	r3, [pc, #220]	; (21bc <blinkCursor+0x148>)
    20e0:	4698      	mov	r8, r3
    20e2:	4f37      	ldr	r7, [pc, #220]	; (21c0 <blinkCursor+0x14c>)
					setPixel((fore_Color_High<<8)|fore_Color_Low);
    20e4:	4e37      	ldr	r6, [pc, #220]	; (21c4 <blinkCursor+0x150>)
    20e6:	e049      	b.n	217c <blinkCursor+0x108>
    20e8:	4a32      	ldr	r2, [pc, #200]	; (21b4 <blinkCursor+0x140>)
    20ea:	00a5      	lsls	r5, r4, #2
    20ec:	192d      	adds	r5, r5, r4
    20ee:	00ab      	lsls	r3, r5, #2
    20f0:	18ed      	adds	r5, r5, r3
    20f2:	1955      	adds	r5, r2, r5
    20f4:	3401      	adds	r4, #1
    20f6:	00a3      	lsls	r3, r4, #2
    20f8:	191c      	adds	r4, r3, r4
    20fa:	00a3      	lsls	r3, r4, #2
    20fc:	18e4      	adds	r4, r4, r3
    20fe:	4692      	mov	sl, r2
    2100:	44a2      	add	sl, r4
					setPixel((fore_Color_High<<8)|fore_Color_Low);
    2102:	4b30      	ldr	r3, [pc, #192]	; (21c4 <blinkCursor+0x150>)
    2104:	4699      	mov	r9, r3
    2106:	4b30      	ldr	r3, [pc, #192]	; (21c8 <blinkCursor+0x154>)
    2108:	4698      	mov	r8, r3
    210a:	4f2d      	ldr	r7, [pc, #180]	; (21c0 <blinkCursor+0x14c>)
					setPixel((back_Color_High<<8)|back_Color_Low);
    210c:	4e2a      	ldr	r6, [pc, #168]	; (21b8 <blinkCursor+0x144>)
    210e:	e019      	b.n	2144 <blinkCursor+0xd0>
					setPixel((fore_Color_High<<8)|fore_Color_Low);
    2110:	464b      	mov	r3, r9
    2112:	8818      	ldrh	r0, [r3, #0]
    2114:	0200      	lsls	r0, r0, #8
    2116:	4643      	mov	r3, r8
    2118:	881b      	ldrh	r3, [r3, #0]
    211a:	4318      	orrs	r0, r3
    211c:	b280      	uxth	r0, r0
    211e:	47b8      	blx	r7
			for(int j=0;j<8;j++)
    2120:	3c01      	subs	r4, #1
    2122:	d30c      	bcc.n	213e <blinkCursor+0xca>
				if((CodePage437[character][i]&(1<<(7-j)))!=0)
    2124:	782b      	ldrb	r3, [r5, #0]
    2126:	4123      	asrs	r3, r4
    2128:	07db      	lsls	r3, r3, #31
    212a:	d5f1      	bpl.n	2110 <blinkCursor+0x9c>
					setPixel((back_Color_High<<8)|back_Color_Low);
    212c:	8830      	ldrh	r0, [r6, #0]
    212e:	0200      	lsls	r0, r0, #8
    2130:	4b22      	ldr	r3, [pc, #136]	; (21bc <blinkCursor+0x148>)
    2132:	881b      	ldrh	r3, [r3, #0]
    2134:	4318      	orrs	r0, r3
    2136:	b280      	uxth	r0, r0
    2138:	4b21      	ldr	r3, [pc, #132]	; (21c0 <blinkCursor+0x14c>)
    213a:	4798      	blx	r3
    213c:	e7f0      	b.n	2120 <blinkCursor+0xac>
    213e:	3501      	adds	r5, #1
		for(uint16_t i=0; i <= 24; i++)
    2140:	4555      	cmp	r5, sl
    2142:	d01d      	beq.n	2180 <blinkCursor+0x10c>
{
    2144:	2407      	movs	r4, #7
    2146:	e7ed      	b.n	2124 <blinkCursor+0xb0>
					setPixel((back_Color_High<<8)|back_Color_Low);
    2148:	464b      	mov	r3, r9
    214a:	8818      	ldrh	r0, [r3, #0]
    214c:	0200      	lsls	r0, r0, #8
    214e:	4643      	mov	r3, r8
    2150:	881b      	ldrh	r3, [r3, #0]
    2152:	4318      	orrs	r0, r3
    2154:	b280      	uxth	r0, r0
    2156:	47b8      	blx	r7
			for(int j=0;j<8;j++)
    2158:	3c01      	subs	r4, #1
    215a:	d30c      	bcc.n	2176 <blinkCursor+0x102>
				if((CodePage437[character][i]&(1<<(7-j)))!=0)
    215c:	782b      	ldrb	r3, [r5, #0]
    215e:	4123      	asrs	r3, r4
    2160:	07db      	lsls	r3, r3, #31
    2162:	d5f1      	bpl.n	2148 <blinkCursor+0xd4>
					setPixel((fore_Color_High<<8)|fore_Color_Low);
    2164:	8830      	ldrh	r0, [r6, #0]
    2166:	0200      	lsls	r0, r0, #8
    2168:	4b17      	ldr	r3, [pc, #92]	; (21c8 <blinkCursor+0x154>)
    216a:	881b      	ldrh	r3, [r3, #0]
    216c:	4318      	orrs	r0, r3
    216e:	b280      	uxth	r0, r0
    2170:	4b13      	ldr	r3, [pc, #76]	; (21c0 <blinkCursor+0x14c>)
    2172:	4798      	blx	r3
    2174:	e7f0      	b.n	2158 <blinkCursor+0xe4>
    2176:	3501      	adds	r5, #1
		for(uint16_t i=0; i <= 24; i++)
    2178:	4555      	cmp	r5, sl
    217a:	d001      	beq.n	2180 <blinkCursor+0x10c>
{
    217c:	2407      	movs	r4, #7
    217e:	e7ed      	b.n	215c <blinkCursor+0xe8>
				}
			}
		}
	}

	REG_PORT_OUTSET1 = LCD_CS;
    2180:	2280      	movs	r2, #128	; 0x80
    2182:	03d2      	lsls	r2, r2, #15
    2184:	4b11      	ldr	r3, [pc, #68]	; (21cc <blinkCursor+0x158>)
    2186:	601a      	str	r2, [r3, #0]
	
	//invert cursorBlinkState
	cursorBlinkState = !cursorBlinkState;
    2188:	4a09      	ldr	r2, [pc, #36]	; (21b0 <blinkCursor+0x13c>)
    218a:	7813      	ldrb	r3, [r2, #0]
    218c:	2101      	movs	r1, #1
    218e:	404b      	eors	r3, r1
    2190:	7013      	strb	r3, [r2, #0]
	
}
    2192:	bc1c      	pop	{r2, r3, r4}
    2194:	4690      	mov	r8, r2
    2196:	4699      	mov	r9, r3
    2198:	46a2      	mov	sl, r4
    219a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    219c:	20000298 	.word	0x20000298
    21a0:	2000029a 	.word	0x2000029a
    21a4:	20000308 	.word	0x20000308
    21a8:	00002941 	.word	0x00002941
    21ac:	41004494 	.word	0x41004494
    21b0:	20000010 	.word	0x20000010
    21b4:	00004c44 	.word	0x00004c44
    21b8:	20000a8e 	.word	0x20000a8e
    21bc:	20000a88 	.word	0x20000a88
    21c0:	00002b01 	.word	0x00002b01
    21c4:	20000a8a 	.word	0x20000a8a
    21c8:	20000a8c 	.word	0x20000a8c
    21cc:	41004498 	.word	0x41004498

000021d0 <writeString>:

void writeString(const char str[])
{
    21d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    21d2:	46c6      	mov	lr, r8
    21d4:	b500      	push	{lr}
    21d6:	0005      	movs	r5, r0
	int length = strlen(str);
    21d8:	4b0c      	ldr	r3, [pc, #48]	; (220c <writeString+0x3c>)
    21da:	4798      	blx	r3
	for(int i = 0; i < length; i++)
    21dc:	2800      	cmp	r0, #0
    21de:	dd11      	ble.n	2204 <writeString+0x34>
    21e0:	002c      	movs	r4, r5
    21e2:	182d      	adds	r5, r5, r0
	{
		drawChar(str[i]);
    21e4:	4f0a      	ldr	r7, [pc, #40]	; (2210 <writeString+0x40>)
		if(xCharPos <= 80)
    21e6:	4e0b      	ldr	r6, [pc, #44]	; (2214 <writeString+0x44>)
		xCharPos++;
    21e8:	46b0      	mov	r8, r6
    21ea:	e002      	b.n	21f2 <writeString+0x22>
    21ec:	3401      	adds	r4, #1
	for(int i = 0; i < length; i++)
    21ee:	42ac      	cmp	r4, r5
    21f0:	d008      	beq.n	2204 <writeString+0x34>
		drawChar(str[i]);
    21f2:	7820      	ldrb	r0, [r4, #0]
    21f4:	47b8      	blx	r7
		if(xCharPos <= 80)
    21f6:	8833      	ldrh	r3, [r6, #0]
    21f8:	2b50      	cmp	r3, #80	; 0x50
    21fa:	d8f7      	bhi.n	21ec <writeString+0x1c>
		xCharPos++;
    21fc:	3301      	adds	r3, #1
    21fe:	4642      	mov	r2, r8
    2200:	8013      	strh	r3, [r2, #0]
    2202:	e7f3      	b.n	21ec <writeString+0x1c>
	}
}
    2204:	bc04      	pop	{r2}
    2206:	4690      	mov	r8, r2
    2208:	bdf0      	pop	{r4, r5, r6, r7, pc}
    220a:	46c0      	nop			; (mov r8, r8)
    220c:	000036bd 	.word	0x000036bd
    2210:	00001ddd 	.word	0x00001ddd
    2214:	20000298 	.word	0x20000298

00002218 <scanCodesContains>:

bool scanCodesContains(int scanCode)
{
	for(int i = 0 ; i < 70 ; i++)
	{
		if(scanCodes[i] == scanCode)
    2218:	4b09      	ldr	r3, [pc, #36]	; (2240 <scanCodesContains+0x28>)
    221a:	681b      	ldr	r3, [r3, #0]
    221c:	4298      	cmp	r0, r3
    221e:	d00b      	beq.n	2238 <scanCodesContains+0x20>
    2220:	4a07      	ldr	r2, [pc, #28]	; (2240 <scanCodesContains+0x28>)
    2222:	1d13      	adds	r3, r2, #4
    2224:	3219      	adds	r2, #25
    2226:	32ff      	adds	r2, #255	; 0xff
    2228:	6819      	ldr	r1, [r3, #0]
    222a:	4281      	cmp	r1, r0
    222c:	d006      	beq.n	223c <scanCodesContains+0x24>
    222e:	3304      	adds	r3, #4
	for(int i = 0 ; i < 70 ; i++)
    2230:	4293      	cmp	r3, r2
    2232:	d1f9      	bne.n	2228 <scanCodesContains+0x10>
		{
			return true;
		}
	}
	return false;
    2234:	2000      	movs	r0, #0
    2236:	e002      	b.n	223e <scanCodesContains+0x26>
			return true;
    2238:	2001      	movs	r0, #1
    223a:	e000      	b.n	223e <scanCodesContains+0x26>
    223c:	2001      	movs	r0, #1
}
    223e:	4770      	bx	lr
    2240:	2000003c 	.word	0x2000003c

00002244 <keyDown>:

bool keyDown(int scancode)
{
	for(int i = 0 ; i < 20 ; i++)
	{
		if(keyDownBuffer[i] == scancode)
    2244:	4b09      	ldr	r3, [pc, #36]	; (226c <keyDown+0x28>)
    2246:	781b      	ldrb	r3, [r3, #0]
    2248:	4298      	cmp	r0, r3
    224a:	d00a      	beq.n	2262 <keyDown+0x1e>
    224c:	4907      	ldr	r1, [pc, #28]	; (226c <keyDown+0x28>)
    224e:	1c4b      	adds	r3, r1, #1
    2250:	3114      	adds	r1, #20
    2252:	781a      	ldrb	r2, [r3, #0]
    2254:	4282      	cmp	r2, r0
    2256:	d006      	beq.n	2266 <keyDown+0x22>
    2258:	3301      	adds	r3, #1
	for(int i = 0 ; i < 20 ; i++)
    225a:	428b      	cmp	r3, r1
    225c:	d1f9      	bne.n	2252 <keyDown+0xe>
		{
			return true;
		}	
	}
	return false;
    225e:	2000      	movs	r0, #0
}
    2260:	4770      	bx	lr
			return true;
    2262:	2001      	movs	r0, #1
    2264:	e7fc      	b.n	2260 <keyDown+0x1c>
    2266:	2001      	movs	r0, #1
    2268:	e7fa      	b.n	2260 <keyDown+0x1c>
    226a:	46c0      	nop			; (mov r8, r8)
    226c:	20000014 	.word	0x20000014

00002270 <printKeyboardBuffer>:
{
    2270:	b5f0      	push	{r4, r5, r6, r7, lr}
    2272:	46de      	mov	lr, fp
    2274:	4657      	mov	r7, sl
    2276:	464e      	mov	r6, r9
    2278:	4645      	mov	r5, r8
    227a:	b5e0      	push	{r5, r6, r7, lr}
    227c:	b0a7      	sub	sp, #156	; 0x9c
	unsigned char noCase[] =	  
    227e:	4cc3      	ldr	r4, [pc, #780]	; (258c <printKeyboardBuffer+0x31c>)
    2280:	2246      	movs	r2, #70	; 0x46
    2282:	0021      	movs	r1, r4
    2284:	a814      	add	r0, sp, #80	; 0x50
    2286:	4dc2      	ldr	r5, [pc, #776]	; (2590 <printKeyboardBuffer+0x320>)
    2288:	47a8      	blx	r5
	unsigned char shiftCase[] = 
    228a:	0021      	movs	r1, r4
    228c:	3148      	adds	r1, #72	; 0x48
    228e:	2246      	movs	r2, #70	; 0x46
    2290:	a802      	add	r0, sp, #8
    2292:	47a8      	blx	r5
    2294:	4fbf      	ldr	r7, [pc, #764]	; (2594 <printKeyboardBuffer+0x324>)
    2296:	0038      	movs	r0, r7
    2298:	3014      	adds	r0, #20
    229a:	003d      	movs	r5, r7
	bool shifted = false;
    229c:	2300      	movs	r3, #0
    229e:	9301      	str	r3, [sp, #4]
    22a0:	e002      	b.n	22a8 <printKeyboardBuffer+0x38>
    22a2:	3501      	adds	r5, #1
	for(int i=0; i<20; i++)
    22a4:	4285      	cmp	r5, r0
    22a6:	d00b      	beq.n	22c0 <printKeyboardBuffer+0x50>
		if((scanCodeBuffer[i] == 13) | (scanCodeBuffer[i] == 49))
    22a8:	782b      	ldrb	r3, [r5, #0]
    22aa:	001a      	movs	r2, r3
    22ac:	3a0d      	subs	r2, #13
    22ae:	4251      	negs	r1, r2
    22b0:	414a      	adcs	r2, r1
    22b2:	3b31      	subs	r3, #49	; 0x31
    22b4:	4259      	negs	r1, r3
    22b6:	414b      	adcs	r3, r1
    22b8:	4313      	orrs	r3, r2
    22ba:	d0f2      	beq.n	22a2 <printKeyboardBuffer+0x32>
			shifted = true;
    22bc:	9301      	str	r3, [sp, #4]
    22be:	e7f0      	b.n	22a2 <printKeyboardBuffer+0x32>
    22c0:	4eb5      	ldr	r6, [pc, #724]	; (2598 <printKeyboardBuffer+0x328>)
	for(int i=0; i<20; i++)
    22c2:	003c      	movs	r4, r7
		if(!keyDown(scanCodeBuffer[i]))
    22c4:	4bb5      	ldr	r3, [pc, #724]	; (259c <printKeyboardBuffer+0x32c>)
    22c6:	469b      	mov	fp, r3
					consoleDisplay[xCharPos][yCharPos] = noCase[scanCodeBuffer[i]];
    22c8:	46b9      	mov	r9, r7
    22ca:	002f      	movs	r7, r5
    22cc:	e008      	b.n	22e0 <printKeyboardBuffer+0x70>
				if(xCharPos > 0) 
    22ce:	4bb4      	ldr	r3, [pc, #720]	; (25a0 <printKeyboardBuffer+0x330>)
    22d0:	881b      	ldrh	r3, [r3, #0]
    22d2:	2b00      	cmp	r3, #0
    22d4:	d159      	bne.n	238a <printKeyboardBuffer+0x11a>
    22d6:	3401      	adds	r4, #1
    22d8:	3601      	adds	r6, #1
	for(int i=0; i<20; i++)
    22da:	42bc      	cmp	r4, r7
    22dc:	d100      	bne.n	22e0 <printKeyboardBuffer+0x70>
    22de:	e1a1      	b.n	2624 <printKeyboardBuffer+0x3b4>
    22e0:	9400      	str	r4, [sp, #0]
		if(!keyDown(scanCodeBuffer[i]))
    22e2:	7825      	ldrb	r5, [r4, #0]
    22e4:	0028      	movs	r0, r5
    22e6:	47d8      	blx	fp
    22e8:	2800      	cmp	r0, #0
    22ea:	d1f4      	bne.n	22d6 <printKeyboardBuffer+0x66>
			keyDownBuffer[i] = scanCodeBuffer[i];
    22ec:	7035      	strb	r5, [r6, #0]
			if(scanCodeBuffer[i] == 0xFF)
    22ee:	2dff      	cmp	r5, #255	; 0xff
    22f0:	d0f1      	beq.n	22d6 <printKeyboardBuffer+0x66>
			else if(scanCodeBuffer[i] == 35) //left
    22f2:	2d23      	cmp	r5, #35	; 0x23
    22f4:	d0eb      	beq.n	22ce <printKeyboardBuffer+0x5e>
			else if(scanCodeBuffer[i] == 45)	//down
    22f6:	2d2d      	cmp	r5, #45	; 0x2d
    22f8:	d063      	beq.n	23c2 <printKeyboardBuffer+0x152>
			else if(scanCodeBuffer[i] == 55)	//up
    22fa:	2d37      	cmp	r5, #55	; 0x37
    22fc:	d100      	bne.n	2300 <printKeyboardBuffer+0x90>
    22fe:	e081      	b.n	2404 <printKeyboardBuffer+0x194>
			else if(scanCodeBuffer[i] == 65)	//right
    2300:	2d41      	cmp	r5, #65	; 0x41
    2302:	d100      	bne.n	2306 <printKeyboardBuffer+0x96>
    2304:	e09f      	b.n	2446 <printKeyboardBuffer+0x1d6>
			else if((scanCodeBuffer[i] == 49) | (scanCodeBuffer[i] == 13))
    2306:	2d31      	cmp	r5, #49	; 0x31
    2308:	d0e5      	beq.n	22d6 <printKeyboardBuffer+0x66>
    230a:	2d0d      	cmp	r5, #13
    230c:	d0e3      	beq.n	22d6 <printKeyboardBuffer+0x66>
			else if(scanCodeBuffer[i] == 58) //Return
    230e:	2d3a      	cmp	r5, #58	; 0x3a
    2310:	d100      	bne.n	2314 <printKeyboardBuffer+0xa4>
    2312:	e0b9      	b.n	2488 <printKeyboardBuffer+0x218>
			else if(scanCodeBuffer[i] == 69) //Line
    2314:	2d45      	cmp	r5, #69	; 0x45
    2316:	d100      	bne.n	231a <printKeyboardBuffer+0xaa>
    2318:	e0ed      	b.n	24f6 <printKeyboardBuffer+0x286>
			else if(scanCodeBuffer[i] == 66) //Backspace
    231a:	2d42      	cmp	r5, #66	; 0x42
    231c:	d100      	bne.n	2320 <printKeyboardBuffer+0xb0>
    231e:	e121      	b.n	2564 <printKeyboardBuffer+0x2f4>
				if(shifted)
    2320:	9b01      	ldr	r3, [sp, #4]
    2322:	2b00      	cmp	r3, #0
    2324:	d100      	bne.n	2328 <printKeyboardBuffer+0xb8>
    2326:	e149      	b.n	25bc <printKeyboardBuffer+0x34c>
					consoleDisplay[xCharPos][yCharPos] = shiftCase[scanCodeBuffer[i]];
    2328:	ab02      	add	r3, sp, #8
    232a:	5d58      	ldrb	r0, [r3, r5]
    232c:	4b9c      	ldr	r3, [pc, #624]	; (25a0 <printKeyboardBuffer+0x330>)
    232e:	4698      	mov	r8, r3
    2330:	8819      	ldrh	r1, [r3, #0]
    2332:	4b9c      	ldr	r3, [pc, #624]	; (25a4 <printKeyboardBuffer+0x334>)
    2334:	469a      	mov	sl, r3
    2336:	881a      	ldrh	r2, [r3, #0]
    2338:	004b      	lsls	r3, r1, #1
    233a:	185b      	adds	r3, r3, r1
    233c:	00db      	lsls	r3, r3, #3
    233e:	499a      	ldr	r1, [pc, #616]	; (25a8 <printKeyboardBuffer+0x338>)
    2340:	468c      	mov	ip, r1
    2342:	4463      	add	r3, ip
    2344:	5498      	strb	r0, [r3, r2]
					printf("%c",consoleDisplay[xCharPos][yCharPos]);
    2346:	4b99      	ldr	r3, [pc, #612]	; (25ac <printKeyboardBuffer+0x33c>)
    2348:	4798      	blx	r3
					drawChar(shiftCase[scanCodeBuffer[i]]);
    234a:	9b00      	ldr	r3, [sp, #0]
    234c:	781b      	ldrb	r3, [r3, #0]
    234e:	aa02      	add	r2, sp, #8
    2350:	5cd0      	ldrb	r0, [r2, r3]
    2352:	4d97      	ldr	r5, [pc, #604]	; (25b0 <printKeyboardBuffer+0x340>)
    2354:	47a8      	blx	r5
					xCharPos++;
    2356:	4643      	mov	r3, r8
    2358:	881b      	ldrh	r3, [r3, #0]
    235a:	3301      	adds	r3, #1
    235c:	b29b      	uxth	r3, r3
    235e:	4642      	mov	r2, r8
    2360:	8013      	strh	r3, [r2, #0]
					drawChar(consoleDisplay[xCharPos][yCharPos]);
    2362:	4652      	mov	r2, sl
    2364:	8811      	ldrh	r1, [r2, #0]
    2366:	005a      	lsls	r2, r3, #1
    2368:	18d3      	adds	r3, r2, r3
    236a:	00db      	lsls	r3, r3, #3
    236c:	4a8e      	ldr	r2, [pc, #568]	; (25a8 <printKeyboardBuffer+0x338>)
    236e:	4694      	mov	ip, r2
    2370:	4463      	add	r3, ip
    2372:	5c58      	ldrb	r0, [r3, r1]
    2374:	47a8      	blx	r5
					if(xCharPos > 79)
    2376:	4643      	mov	r3, r8
    2378:	881b      	ldrh	r3, [r3, #0]
    237a:	2b4f      	cmp	r3, #79	; 0x4f
    237c:	d902      	bls.n	2384 <printKeyboardBuffer+0x114>
						xCharPos--;
    237e:	3b01      	subs	r3, #1
    2380:	4a87      	ldr	r2, [pc, #540]	; (25a0 <printKeyboardBuffer+0x330>)
    2382:	8013      	strh	r3, [r2, #0]
					blinkCursor();
    2384:	4b8b      	ldr	r3, [pc, #556]	; (25b4 <printKeyboardBuffer+0x344>)
    2386:	4798      	blx	r3
    2388:	e7a5      	b.n	22d6 <printKeyboardBuffer+0x66>
					drawChar(consoleDisplay[xCharPos][yCharPos]);
    238a:	4d87      	ldr	r5, [pc, #540]	; (25a8 <printKeyboardBuffer+0x338>)
    238c:	4a85      	ldr	r2, [pc, #532]	; (25a4 <printKeyboardBuffer+0x334>)
    238e:	4690      	mov	r8, r2
    2390:	8811      	ldrh	r1, [r2, #0]
    2392:	005a      	lsls	r2, r3, #1
    2394:	18d3      	adds	r3, r2, r3
    2396:	00db      	lsls	r3, r3, #3
    2398:	18eb      	adds	r3, r5, r3
    239a:	5c58      	ldrb	r0, [r3, r1]
    239c:	4b84      	ldr	r3, [pc, #528]	; (25b0 <printKeyboardBuffer+0x340>)
    239e:	469a      	mov	sl, r3
    23a0:	4798      	blx	r3
					xCharPos--;
    23a2:	4a7f      	ldr	r2, [pc, #508]	; (25a0 <printKeyboardBuffer+0x330>)
    23a4:	8813      	ldrh	r3, [r2, #0]
    23a6:	3b01      	subs	r3, #1
    23a8:	b29b      	uxth	r3, r3
    23aa:	8013      	strh	r3, [r2, #0]
					tempCharacter = consoleDisplay[xCharPos][yCharPos];
    23ac:	4642      	mov	r2, r8
    23ae:	8811      	ldrh	r1, [r2, #0]
    23b0:	005a      	lsls	r2, r3, #1
    23b2:	18d3      	adds	r3, r2, r3
    23b4:	00db      	lsls	r3, r3, #3
    23b6:	18eb      	adds	r3, r5, r3
					drawChar(tempCharacter);
    23b8:	5c58      	ldrb	r0, [r3, r1]
    23ba:	47d0      	blx	sl
					blinkCursor();
    23bc:	4b7d      	ldr	r3, [pc, #500]	; (25b4 <printKeyboardBuffer+0x344>)
    23be:	4798      	blx	r3
    23c0:	e789      	b.n	22d6 <printKeyboardBuffer+0x66>
				if(yCharPos < 23)
    23c2:	4b78      	ldr	r3, [pc, #480]	; (25a4 <printKeyboardBuffer+0x334>)
    23c4:	881a      	ldrh	r2, [r3, #0]
    23c6:	2a16      	cmp	r2, #22
    23c8:	d900      	bls.n	23cc <printKeyboardBuffer+0x15c>
    23ca:	e784      	b.n	22d6 <printKeyboardBuffer+0x66>
					drawChar(consoleDisplay[xCharPos][yCharPos]);
    23cc:	4d76      	ldr	r5, [pc, #472]	; (25a8 <printKeyboardBuffer+0x338>)
    23ce:	4b74      	ldr	r3, [pc, #464]	; (25a0 <printKeyboardBuffer+0x330>)
    23d0:	4698      	mov	r8, r3
    23d2:	8819      	ldrh	r1, [r3, #0]
    23d4:	004b      	lsls	r3, r1, #1
    23d6:	185b      	adds	r3, r3, r1
    23d8:	00db      	lsls	r3, r3, #3
    23da:	18eb      	adds	r3, r5, r3
    23dc:	5c98      	ldrb	r0, [r3, r2]
    23de:	4b74      	ldr	r3, [pc, #464]	; (25b0 <printKeyboardBuffer+0x340>)
    23e0:	469a      	mov	sl, r3
    23e2:	4798      	blx	r3
					yCharPos++;
    23e4:	4a6f      	ldr	r2, [pc, #444]	; (25a4 <printKeyboardBuffer+0x334>)
    23e6:	8813      	ldrh	r3, [r2, #0]
    23e8:	3301      	adds	r3, #1
    23ea:	b29b      	uxth	r3, r3
    23ec:	8013      	strh	r3, [r2, #0]
					tempCharacter = consoleDisplay[xCharPos][yCharPos];
    23ee:	4642      	mov	r2, r8
    23f0:	8811      	ldrh	r1, [r2, #0]
    23f2:	004a      	lsls	r2, r1, #1
    23f4:	1852      	adds	r2, r2, r1
    23f6:	00d2      	lsls	r2, r2, #3
    23f8:	18ad      	adds	r5, r5, r2
					drawChar(tempCharacter);
    23fa:	5ce8      	ldrb	r0, [r5, r3]
    23fc:	47d0      	blx	sl
					blinkCursor();
    23fe:	4b6d      	ldr	r3, [pc, #436]	; (25b4 <printKeyboardBuffer+0x344>)
    2400:	4798      	blx	r3
    2402:	e768      	b.n	22d6 <printKeyboardBuffer+0x66>
				if(yCharPos > 0)
    2404:	4b67      	ldr	r3, [pc, #412]	; (25a4 <printKeyboardBuffer+0x334>)
    2406:	881b      	ldrh	r3, [r3, #0]
    2408:	2b00      	cmp	r3, #0
    240a:	d100      	bne.n	240e <printKeyboardBuffer+0x19e>
    240c:	e763      	b.n	22d6 <printKeyboardBuffer+0x66>
					drawChar(consoleDisplay[xCharPos][yCharPos]);
    240e:	4d66      	ldr	r5, [pc, #408]	; (25a8 <printKeyboardBuffer+0x338>)
    2410:	4a63      	ldr	r2, [pc, #396]	; (25a0 <printKeyboardBuffer+0x330>)
    2412:	4690      	mov	r8, r2
    2414:	8811      	ldrh	r1, [r2, #0]
    2416:	004a      	lsls	r2, r1, #1
    2418:	1852      	adds	r2, r2, r1
    241a:	00d2      	lsls	r2, r2, #3
    241c:	18aa      	adds	r2, r5, r2
    241e:	5cd0      	ldrb	r0, [r2, r3]
    2420:	4b63      	ldr	r3, [pc, #396]	; (25b0 <printKeyboardBuffer+0x340>)
    2422:	469a      	mov	sl, r3
    2424:	4798      	blx	r3
					yCharPos--;
    2426:	4a5f      	ldr	r2, [pc, #380]	; (25a4 <printKeyboardBuffer+0x334>)
    2428:	8813      	ldrh	r3, [r2, #0]
    242a:	3b01      	subs	r3, #1
    242c:	b29b      	uxth	r3, r3
    242e:	8013      	strh	r3, [r2, #0]
					tempCharacter = consoleDisplay[xCharPos][yCharPos];
    2430:	4642      	mov	r2, r8
    2432:	8811      	ldrh	r1, [r2, #0]
    2434:	004a      	lsls	r2, r1, #1
    2436:	1852      	adds	r2, r2, r1
    2438:	00d2      	lsls	r2, r2, #3
    243a:	18ad      	adds	r5, r5, r2
					drawChar(tempCharacter);
    243c:	5ce8      	ldrb	r0, [r5, r3]
    243e:	47d0      	blx	sl
					blinkCursor();				
    2440:	4b5c      	ldr	r3, [pc, #368]	; (25b4 <printKeyboardBuffer+0x344>)
    2442:	4798      	blx	r3
    2444:	e747      	b.n	22d6 <printKeyboardBuffer+0x66>
				if(xCharPos < 79)
    2446:	4b56      	ldr	r3, [pc, #344]	; (25a0 <printKeyboardBuffer+0x330>)
    2448:	881b      	ldrh	r3, [r3, #0]
    244a:	2b4e      	cmp	r3, #78	; 0x4e
    244c:	d900      	bls.n	2450 <printKeyboardBuffer+0x1e0>
    244e:	e742      	b.n	22d6 <printKeyboardBuffer+0x66>
					drawChar(consoleDisplay[xCharPos][yCharPos]);
    2450:	4d55      	ldr	r5, [pc, #340]	; (25a8 <printKeyboardBuffer+0x338>)
    2452:	4a54      	ldr	r2, [pc, #336]	; (25a4 <printKeyboardBuffer+0x334>)
    2454:	4690      	mov	r8, r2
    2456:	8811      	ldrh	r1, [r2, #0]
    2458:	005a      	lsls	r2, r3, #1
    245a:	18d3      	adds	r3, r2, r3
    245c:	00db      	lsls	r3, r3, #3
    245e:	18eb      	adds	r3, r5, r3
    2460:	5c58      	ldrb	r0, [r3, r1]
    2462:	4b53      	ldr	r3, [pc, #332]	; (25b0 <printKeyboardBuffer+0x340>)
    2464:	469a      	mov	sl, r3
    2466:	4798      	blx	r3
					xCharPos++;
    2468:	4a4d      	ldr	r2, [pc, #308]	; (25a0 <printKeyboardBuffer+0x330>)
    246a:	8813      	ldrh	r3, [r2, #0]
    246c:	3301      	adds	r3, #1
    246e:	b29b      	uxth	r3, r3
    2470:	8013      	strh	r3, [r2, #0]
					tempCharacter = consoleDisplay[xCharPos][yCharPos];
    2472:	4642      	mov	r2, r8
    2474:	8811      	ldrh	r1, [r2, #0]
    2476:	005a      	lsls	r2, r3, #1
    2478:	18d3      	adds	r3, r2, r3
    247a:	00db      	lsls	r3, r3, #3
    247c:	18eb      	adds	r3, r5, r3
					drawChar(tempCharacter);
    247e:	5c58      	ldrb	r0, [r3, r1]
    2480:	47d0      	blx	sl
					blinkCursor();					
    2482:	4b4c      	ldr	r3, [pc, #304]	; (25b4 <printKeyboardBuffer+0x344>)
    2484:	4798      	blx	r3
    2486:	e726      	b.n	22d6 <printKeyboardBuffer+0x66>
				if(yCharPos == 23)
    2488:	4b46      	ldr	r3, [pc, #280]	; (25a4 <printKeyboardBuffer+0x334>)
    248a:	881a      	ldrh	r2, [r3, #0]
    248c:	2a17      	cmp	r2, #23
    248e:	d01b      	beq.n	24c8 <printKeyboardBuffer+0x258>
					drawChar(consoleDisplay[xCharPos][yCharPos]);
    2490:	4d45      	ldr	r5, [pc, #276]	; (25a8 <printKeyboardBuffer+0x338>)
    2492:	4b43      	ldr	r3, [pc, #268]	; (25a0 <printKeyboardBuffer+0x330>)
    2494:	4698      	mov	r8, r3
    2496:	8819      	ldrh	r1, [r3, #0]
    2498:	004b      	lsls	r3, r1, #1
    249a:	185b      	adds	r3, r3, r1
    249c:	00db      	lsls	r3, r3, #3
    249e:	18eb      	adds	r3, r5, r3
    24a0:	5c98      	ldrb	r0, [r3, r2]
    24a2:	4b43      	ldr	r3, [pc, #268]	; (25b0 <printKeyboardBuffer+0x340>)
    24a4:	469a      	mov	sl, r3
    24a6:	4798      	blx	r3
					yCharPos++;
    24a8:	4a3e      	ldr	r2, [pc, #248]	; (25a4 <printKeyboardBuffer+0x334>)
    24aa:	8813      	ldrh	r3, [r2, #0]
    24ac:	3301      	adds	r3, #1
    24ae:	b29b      	uxth	r3, r3
    24b0:	8013      	strh	r3, [r2, #0]
					xCharPos = 0;
    24b2:	2200      	movs	r2, #0
    24b4:	4641      	mov	r1, r8
    24b6:	800a      	strh	r2, [r1, #0]
					drawChar(consoleDisplay[xCharPos][yCharPos]);
    24b8:	5ce8      	ldrb	r0, [r5, r3]
    24ba:	47d0      	blx	sl
					blinkCursor();
    24bc:	4b3d      	ldr	r3, [pc, #244]	; (25b4 <printKeyboardBuffer+0x344>)
    24be:	4798      	blx	r3
					printf("\r");
    24c0:	200d      	movs	r0, #13
    24c2:	4b3a      	ldr	r3, [pc, #232]	; (25ac <printKeyboardBuffer+0x33c>)
    24c4:	4798      	blx	r3
    24c6:	e706      	b.n	22d6 <printKeyboardBuffer+0x66>
					drawChar(consoleDisplay[xCharPos][yCharPos]);
    24c8:	4d35      	ldr	r5, [pc, #212]	; (25a0 <printKeyboardBuffer+0x330>)
    24ca:	882a      	ldrh	r2, [r5, #0]
    24cc:	0053      	lsls	r3, r2, #1
    24ce:	189b      	adds	r3, r3, r2
    24d0:	00db      	lsls	r3, r3, #3
    24d2:	4a35      	ldr	r2, [pc, #212]	; (25a8 <printKeyboardBuffer+0x338>)
    24d4:	18d3      	adds	r3, r2, r3
    24d6:	7dd8      	ldrb	r0, [r3, #23]
    24d8:	4b35      	ldr	r3, [pc, #212]	; (25b0 <printKeyboardBuffer+0x340>)
    24da:	4698      	mov	r8, r3
    24dc:	4798      	blx	r3
					newLine();
    24de:	4b36      	ldr	r3, [pc, #216]	; (25b8 <printKeyboardBuffer+0x348>)
    24e0:	4798      	blx	r3
					xCharPos = 0;
    24e2:	2300      	movs	r3, #0
    24e4:	802b      	strh	r3, [r5, #0]
					drawChar(0x00);
    24e6:	2000      	movs	r0, #0
    24e8:	47c0      	blx	r8
					blinkCursor();
    24ea:	4b32      	ldr	r3, [pc, #200]	; (25b4 <printKeyboardBuffer+0x344>)
    24ec:	4798      	blx	r3
					printf("\r");
    24ee:	200d      	movs	r0, #13
    24f0:	4b2e      	ldr	r3, [pc, #184]	; (25ac <printKeyboardBuffer+0x33c>)
    24f2:	4798      	blx	r3
    24f4:	e6ef      	b.n	22d6 <printKeyboardBuffer+0x66>
				if(yCharPos == 23)
    24f6:	4b2b      	ldr	r3, [pc, #172]	; (25a4 <printKeyboardBuffer+0x334>)
    24f8:	881a      	ldrh	r2, [r3, #0]
    24fa:	2a17      	cmp	r2, #23
    24fc:	d01e      	beq.n	253c <printKeyboardBuffer+0x2cc>
					drawChar(consoleDisplay[xCharPos][yCharPos]);
    24fe:	4d2a      	ldr	r5, [pc, #168]	; (25a8 <printKeyboardBuffer+0x338>)
    2500:	4b27      	ldr	r3, [pc, #156]	; (25a0 <printKeyboardBuffer+0x330>)
    2502:	4698      	mov	r8, r3
    2504:	8819      	ldrh	r1, [r3, #0]
    2506:	004b      	lsls	r3, r1, #1
    2508:	185b      	adds	r3, r3, r1
    250a:	00db      	lsls	r3, r3, #3
    250c:	18eb      	adds	r3, r5, r3
    250e:	5c98      	ldrb	r0, [r3, r2]
    2510:	4b27      	ldr	r3, [pc, #156]	; (25b0 <printKeyboardBuffer+0x340>)
    2512:	469a      	mov	sl, r3
    2514:	4798      	blx	r3
					yCharPos++;
    2516:	4a23      	ldr	r2, [pc, #140]	; (25a4 <printKeyboardBuffer+0x334>)
    2518:	8813      	ldrh	r3, [r2, #0]
    251a:	3301      	adds	r3, #1
    251c:	b29b      	uxth	r3, r3
    251e:	8013      	strh	r3, [r2, #0]
					drawChar(consoleDisplay[xCharPos][yCharPos]);
    2520:	4642      	mov	r2, r8
    2522:	8811      	ldrh	r1, [r2, #0]
    2524:	004a      	lsls	r2, r1, #1
    2526:	1852      	adds	r2, r2, r1
    2528:	00d2      	lsls	r2, r2, #3
    252a:	18ad      	adds	r5, r5, r2
    252c:	5ce8      	ldrb	r0, [r5, r3]
    252e:	47d0      	blx	sl
					blinkCursor();
    2530:	4b20      	ldr	r3, [pc, #128]	; (25b4 <printKeyboardBuffer+0x344>)
    2532:	4798      	blx	r3
					printf("\n");
    2534:	200a      	movs	r0, #10
    2536:	4b1d      	ldr	r3, [pc, #116]	; (25ac <printKeyboardBuffer+0x33c>)
    2538:	4798      	blx	r3
    253a:	e6cc      	b.n	22d6 <printKeyboardBuffer+0x66>
					drawChar(consoleDisplay[xCharPos][yCharPos]);
    253c:	4b18      	ldr	r3, [pc, #96]	; (25a0 <printKeyboardBuffer+0x330>)
    253e:	881a      	ldrh	r2, [r3, #0]
    2540:	0053      	lsls	r3, r2, #1
    2542:	189b      	adds	r3, r3, r2
    2544:	00db      	lsls	r3, r3, #3
    2546:	4a18      	ldr	r2, [pc, #96]	; (25a8 <printKeyboardBuffer+0x338>)
    2548:	18d3      	adds	r3, r2, r3
    254a:	7dd8      	ldrb	r0, [r3, #23]
    254c:	4d18      	ldr	r5, [pc, #96]	; (25b0 <printKeyboardBuffer+0x340>)
    254e:	47a8      	blx	r5
					newLine();
    2550:	4b19      	ldr	r3, [pc, #100]	; (25b8 <printKeyboardBuffer+0x348>)
    2552:	4798      	blx	r3
					drawChar(0x00);
    2554:	2000      	movs	r0, #0
    2556:	47a8      	blx	r5
					blinkCursor();
    2558:	4b16      	ldr	r3, [pc, #88]	; (25b4 <printKeyboardBuffer+0x344>)
    255a:	4798      	blx	r3
					printf("\n");
    255c:	200a      	movs	r0, #10
    255e:	4b13      	ldr	r3, [pc, #76]	; (25ac <printKeyboardBuffer+0x33c>)
    2560:	4798      	blx	r3
    2562:	e6b8      	b.n	22d6 <printKeyboardBuffer+0x66>
				drawChar(consoleDisplay[xCharPos][yCharPos]);
    2564:	4d0e      	ldr	r5, [pc, #56]	; (25a0 <printKeyboardBuffer+0x330>)
    2566:	882a      	ldrh	r2, [r5, #0]
    2568:	4b0e      	ldr	r3, [pc, #56]	; (25a4 <printKeyboardBuffer+0x334>)
    256a:	8819      	ldrh	r1, [r3, #0]
    256c:	0053      	lsls	r3, r2, #1
    256e:	189b      	adds	r3, r3, r2
    2570:	00db      	lsls	r3, r3, #3
    2572:	4a0d      	ldr	r2, [pc, #52]	; (25a8 <printKeyboardBuffer+0x338>)
    2574:	18d3      	adds	r3, r2, r3
    2576:	5c58      	ldrb	r0, [r3, r1]
    2578:	4b0d      	ldr	r3, [pc, #52]	; (25b0 <printKeyboardBuffer+0x340>)
    257a:	4698      	mov	r8, r3
    257c:	4798      	blx	r3
				xCharPos--;
    257e:	882b      	ldrh	r3, [r5, #0]
    2580:	3b01      	subs	r3, #1
    2582:	802b      	strh	r3, [r5, #0]
				drawChar(0x20);
    2584:	2020      	movs	r0, #32
    2586:	47c0      	blx	r8
    2588:	e6a5      	b.n	22d6 <printKeyboardBuffer+0x66>
    258a:	46c0      	nop			; (mov r8, r8)
    258c:	00006544 	.word	0x00006544
    2590:	000033fd 	.word	0x000033fd
    2594:	20000028 	.word	0x20000028
    2598:	20000014 	.word	0x20000014
    259c:	00002245 	.word	0x00002245
    25a0:	20000298 	.word	0x20000298
    25a4:	2000029a 	.word	0x2000029a
    25a8:	20000308 	.word	0x20000308
    25ac:	00003455 	.word	0x00003455
    25b0:	00001ddd 	.word	0x00001ddd
    25b4:	00002075 	.word	0x00002075
    25b8:	00001ec5 	.word	0x00001ec5
					consoleDisplay[xCharPos][yCharPos] = noCase[scanCodeBuffer[i]];
    25bc:	ab02      	add	r3, sp, #8
    25be:	2248      	movs	r2, #72	; 0x48
    25c0:	189b      	adds	r3, r3, r2
    25c2:	5d58      	ldrb	r0, [r3, r5]
    25c4:	4b1e      	ldr	r3, [pc, #120]	; (2640 <printKeyboardBuffer+0x3d0>)
    25c6:	8819      	ldrh	r1, [r3, #0]
    25c8:	4b1e      	ldr	r3, [pc, #120]	; (2644 <printKeyboardBuffer+0x3d4>)
    25ca:	4698      	mov	r8, r3
    25cc:	881a      	ldrh	r2, [r3, #0]
    25ce:	004b      	lsls	r3, r1, #1
    25d0:	185b      	adds	r3, r3, r1
    25d2:	00db      	lsls	r3, r3, #3
    25d4:	491c      	ldr	r1, [pc, #112]	; (2648 <printKeyboardBuffer+0x3d8>)
    25d6:	468c      	mov	ip, r1
    25d8:	4463      	add	r3, ip
    25da:	5498      	strb	r0, [r3, r2]
					printf("%c",consoleDisplay[xCharPos][yCharPos]);
    25dc:	4b1b      	ldr	r3, [pc, #108]	; (264c <printKeyboardBuffer+0x3dc>)
    25de:	4798      	blx	r3
					drawChar(noCase[scanCodeBuffer[i]]);
    25e0:	9b00      	ldr	r3, [sp, #0]
    25e2:	781b      	ldrb	r3, [r3, #0]
    25e4:	aa02      	add	r2, sp, #8
    25e6:	2148      	movs	r1, #72	; 0x48
    25e8:	1852      	adds	r2, r2, r1
    25ea:	5cd0      	ldrb	r0, [r2, r3]
    25ec:	4d18      	ldr	r5, [pc, #96]	; (2650 <printKeyboardBuffer+0x3e0>)
    25ee:	47a8      	blx	r5
					xCharPos++;
    25f0:	4b13      	ldr	r3, [pc, #76]	; (2640 <printKeyboardBuffer+0x3d0>)
    25f2:	881b      	ldrh	r3, [r3, #0]
    25f4:	3301      	adds	r3, #1
    25f6:	b29a      	uxth	r2, r3
    25f8:	4b11      	ldr	r3, [pc, #68]	; (2640 <printKeyboardBuffer+0x3d0>)
    25fa:	801a      	strh	r2, [r3, #0]
					drawChar(consoleDisplay[xCharPos][yCharPos]);
    25fc:	4643      	mov	r3, r8
    25fe:	8819      	ldrh	r1, [r3, #0]
    2600:	0053      	lsls	r3, r2, #1
    2602:	189b      	adds	r3, r3, r2
    2604:	00db      	lsls	r3, r3, #3
    2606:	4a10      	ldr	r2, [pc, #64]	; (2648 <printKeyboardBuffer+0x3d8>)
    2608:	4694      	mov	ip, r2
    260a:	4463      	add	r3, ip
    260c:	5c58      	ldrb	r0, [r3, r1]
    260e:	47a8      	blx	r5
					if(xCharPos > 79)
    2610:	4b0b      	ldr	r3, [pc, #44]	; (2640 <printKeyboardBuffer+0x3d0>)
    2612:	881b      	ldrh	r3, [r3, #0]
    2614:	2b4f      	cmp	r3, #79	; 0x4f
    2616:	d902      	bls.n	261e <printKeyboardBuffer+0x3ae>
						xCharPos--;
    2618:	3b01      	subs	r3, #1
    261a:	4a09      	ldr	r2, [pc, #36]	; (2640 <printKeyboardBuffer+0x3d0>)
    261c:	8013      	strh	r3, [r2, #0]
					blinkCursor();
    261e:	4b0d      	ldr	r3, [pc, #52]	; (2654 <printKeyboardBuffer+0x3e4>)
    2620:	4798      	blx	r3
    2622:	e658      	b.n	22d6 <printKeyboardBuffer+0x66>
    2624:	464f      	mov	r7, r9
		scanCodeBuffer[i] = 0xFF;
    2626:	23ff      	movs	r3, #255	; 0xff
    2628:	703b      	strb	r3, [r7, #0]
    262a:	3701      	adds	r7, #1
	for(int i = 0 ; i < 20 ; i++)
    262c:	42bc      	cmp	r4, r7
    262e:	d1fb      	bne.n	2628 <printKeyboardBuffer+0x3b8>
}
    2630:	b027      	add	sp, #156	; 0x9c
    2632:	bc3c      	pop	{r2, r3, r4, r5}
    2634:	4690      	mov	r8, r2
    2636:	4699      	mov	r9, r3
    2638:	46a2      	mov	sl, r4
    263a:	46ab      	mov	fp, r5
    263c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    263e:	46c0      	nop			; (mov r8, r8)
    2640:	20000298 	.word	0x20000298
    2644:	2000029a 	.word	0x2000029a
    2648:	20000308 	.word	0x20000308
    264c:	00003455 	.word	0x00003455
    2650:	00001ddd 	.word	0x00001ddd
    2654:	00002075 	.word	0x00002075

00002658 <removeFromKeyDown>:

void removeFromKeyDown(int scancode)
{
    2658:	b510      	push	{r4, lr}
    265a:	4b07      	ldr	r3, [pc, #28]	; (2678 <removeFromKeyDown+0x20>)
    265c:	0019      	movs	r1, r3
    265e:	3114      	adds	r1, #20
	for(int i = 0 ; i < 20 ; i++)
	{
		if(keyDownBuffer[i] == scancode)
		{
			keyDownBuffer[i] = 0xFF;
    2660:	24ff      	movs	r4, #255	; 0xff
    2662:	e002      	b.n	266a <removeFromKeyDown+0x12>
    2664:	3301      	adds	r3, #1
	for(int i = 0 ; i < 20 ; i++)
    2666:	428b      	cmp	r3, r1
    2668:	d004      	beq.n	2674 <removeFromKeyDown+0x1c>
		if(keyDownBuffer[i] == scancode)
    266a:	781a      	ldrb	r2, [r3, #0]
    266c:	4282      	cmp	r2, r0
    266e:	d1f9      	bne.n	2664 <removeFromKeyDown+0xc>
			keyDownBuffer[i] = 0xFF;
    2670:	701c      	strb	r4, [r3, #0]
    2672:	e7f7      	b.n	2664 <removeFromKeyDown+0xc>
		}
	}
    2674:	bd10      	pop	{r4, pc}
    2676:	46c0      	nop			; (mov r8, r8)
    2678:	20000014 	.word	0x20000014

0000267c <readKeyboard>:
{
    267c:	b5f0      	push	{r4, r5, r6, r7, lr}
    267e:	46de      	mov	lr, fp
    2680:	4657      	mov	r7, sl
    2682:	464e      	mov	r6, r9
    2684:	4645      	mov	r5, r8
    2686:	b5e0      	push	{r5, r6, r7, lr}
    2688:	b083      	sub	sp, #12
    268a:	4e6d      	ldr	r6, [pc, #436]	; (2840 <readKeyboard+0x1c4>)
    268c:	0031      	movs	r1, r6
    268e:	3119      	adds	r1, #25
    2690:	31ff      	adds	r1, #255	; 0xff
    2692:	0033      	movs	r3, r6
		scanCodes[i] = 0xFF;
    2694:	22ff      	movs	r2, #255	; 0xff
    2696:	c304      	stmia	r3!, {r2}
	for(i = 0 ; i < 70 ; i++)
    2698:	428b      	cmp	r3, r1
    269a:	d1fc      	bne.n	2696 <readKeyboard+0x1a>
	PORT->Group[0].WRCONFIG.bit.DRVSTR = 1;
    269c:	4a69      	ldr	r2, [pc, #420]	; (2844 <readKeyboard+0x1c8>)
    269e:	6a91      	ldr	r1, [r2, #40]	; 0x28
    26a0:	2380      	movs	r3, #128	; 0x80
    26a2:	03db      	lsls	r3, r3, #15
    26a4:	430b      	orrs	r3, r1
    26a6:	6293      	str	r3, [r2, #40]	; 0x28
    26a8:	4c67      	ldr	r4, [pc, #412]	; (2848 <readKeyboard+0x1cc>)
    26aa:	341c      	adds	r4, #28
    26ac:	4b66      	ldr	r3, [pc, #408]	; (2848 <readKeyboard+0x1cc>)
		REG_PORT_DIRSET0 = kb_col[i];
    26ae:	4867      	ldr	r0, [pc, #412]	; (284c <readKeyboard+0x1d0>)
		REG_PORT_OUTCLR0 = kb_col[i];
    26b0:	4967      	ldr	r1, [pc, #412]	; (2850 <readKeyboard+0x1d4>)
		REG_PORT_DIRSET0 = kb_col[i];
    26b2:	681a      	ldr	r2, [r3, #0]
    26b4:	6002      	str	r2, [r0, #0]
		REG_PORT_OUTCLR0 = kb_col[i];
    26b6:	cb04      	ldmia	r3!, {r2}
    26b8:	600a      	str	r2, [r1, #0]
	for (i = 0; i < NUM_COL; i++) {
    26ba:	42a3      	cmp	r3, r4
    26bc:	d1f9      	bne.n	26b2 <readKeyboard+0x36>
    26be:	2200      	movs	r2, #0
		REG_PORT_DIRCLR0 = kb_row[i];
    26c0:	4b64      	ldr	r3, [pc, #400]	; (2854 <readKeyboard+0x1d8>)
    26c2:	469c      	mov	ip, r3
    26c4:	4f64      	ldr	r7, [pc, #400]	; (2858 <readKeyboard+0x1dc>)
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.PULLEN = 1;
    26c6:	4d65      	ldr	r5, [pc, #404]	; (285c <readKeyboard+0x1e0>)
    26c8:	2404      	movs	r4, #4
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.INEN = 1;
    26ca:	2002      	movs	r0, #2
		REG_PORT_DIRCLR0 = kb_row[i];
    26cc:	4663      	mov	r3, ip
    26ce:	58d3      	ldr	r3, [r2, r3]
    26d0:	603b      	str	r3, [r7, #0]
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.PULLEN = 1;
    26d2:	5953      	ldr	r3, [r2, r5]
    26d4:	4962      	ldr	r1, [pc, #392]	; (2860 <readKeyboard+0x1e4>)
    26d6:	4688      	mov	r8, r1
    26d8:	4443      	add	r3, r8
    26da:	7819      	ldrb	r1, [r3, #0]
    26dc:	4321      	orrs	r1, r4
    26de:	7019      	strb	r1, [r3, #0]
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.INEN = 1;
    26e0:	7819      	ldrb	r1, [r3, #0]
    26e2:	4301      	orrs	r1, r0
    26e4:	7019      	strb	r1, [r3, #0]
    26e6:	3204      	adds	r2, #4
	for (i = 0; i < NUM_ROW; i++) {
    26e8:	2a28      	cmp	r2, #40	; 0x28
    26ea:	d1ef      	bne.n	26cc <readKeyboard+0x50>
    26ec:	4b56      	ldr	r3, [pc, #344]	; (2848 <readKeyboard+0x1cc>)
    26ee:	4699      	mov	r9, r3
    26f0:	2300      	movs	r3, #0
    26f2:	4698      	mov	r8, r3
    26f4:	2200      	movs	r2, #0
		REG_PORT_OUTSET0 = kb_col[i];
    26f6:	4b5b      	ldr	r3, [pc, #364]	; (2864 <readKeyboard+0x1e8>)
    26f8:	469b      	mov	fp, r3
			if((PORT->Group[0].IN.reg & kb_row[j]) != 0) {
    26fa:	4d52      	ldr	r5, [pc, #328]	; (2844 <readKeyboard+0x1c8>)
				scanCodes[scanCodeIndex] = (i * NUM_ROW) + j;
    26fc:	4b50      	ldr	r3, [pc, #320]	; (2840 <readKeyboard+0x1c4>)
    26fe:	469c      	mov	ip, r3
		REG_PORT_OUTCLR0 = kb_col[i];
    2700:	4b53      	ldr	r3, [pc, #332]	; (2850 <readKeyboard+0x1d4>)
    2702:	469a      	mov	sl, r3
    2704:	9601      	str	r6, [sp, #4]
    2706:	464e      	mov	r6, r9
    2708:	4647      	mov	r7, r8
    270a:	e015      	b.n	2738 <readKeyboard+0xbc>
    270c:	3304      	adds	r3, #4
    270e:	3101      	adds	r1, #1
		for (j = 0; j < NUM_ROW; j++) {	
    2710:	42a3      	cmp	r3, r4
    2712:	d008      	beq.n	2726 <readKeyboard+0xaa>
			if((PORT->Group[0].IN.reg & kb_row[j]) != 0) {
    2714:	6a28      	ldr	r0, [r5, #32]
    2716:	681e      	ldr	r6, [r3, #0]
    2718:	4206      	tst	r6, r0
    271a:	d0f7      	beq.n	270c <readKeyboard+0x90>
				scanCodes[scanCodeIndex] = (i * NUM_ROW) + j;
    271c:	0090      	lsls	r0, r2, #2
    271e:	4666      	mov	r6, ip
    2720:	5181      	str	r1, [r0, r6]
				scanCodeIndex++;
    2722:	3201      	adds	r2, #1
    2724:	e7f2      	b.n	270c <readKeyboard+0x90>
    2726:	9e00      	ldr	r6, [sp, #0]
		REG_PORT_OUTCLR0 = kb_col[i];
    2728:	4649      	mov	r1, r9
    272a:	6809      	ldr	r1, [r1, #0]
    272c:	4650      	mov	r0, sl
    272e:	6001      	str	r1, [r0, #0]
    2730:	3604      	adds	r6, #4
    2732:	370a      	adds	r7, #10
	for (i = 0; i < NUM_COL; i++) {
    2734:	2f46      	cmp	r7, #70	; 0x46
    2736:	d00a      	beq.n	274e <readKeyboard+0xd2>
    2738:	46b1      	mov	r9, r6
		REG_PORT_OUTSET0 = kb_col[i];
    273a:	465b      	mov	r3, fp
    273c:	6831      	ldr	r1, [r6, #0]
    273e:	6019      	str	r1, [r3, #0]
    2740:	4b44      	ldr	r3, [pc, #272]	; (2854 <readKeyboard+0x1d8>)
    2742:	4698      	mov	r8, r3
    2744:	001c      	movs	r4, r3
    2746:	3428      	adds	r4, #40	; 0x28
    2748:	0039      	movs	r1, r7
    274a:	9600      	str	r6, [sp, #0]
    274c:	e7e2      	b.n	2714 <readKeyboard+0x98>
    274e:	4647      	mov	r7, r8
    2750:	9e01      	ldr	r6, [sp, #4]
    2752:	4641      	mov	r1, r8
		REG_PORT_DIRSET0 = kb_row[i];
    2754:	4d3d      	ldr	r5, [pc, #244]	; (284c <readKeyboard+0x1d0>)
		REG_PORT_OUTCLR0 = kb_row[i];
    2756:	4c3e      	ldr	r4, [pc, #248]	; (2850 <readKeyboard+0x1d4>)
		REG_PORT_DIRSET0 = kb_row[i];
    2758:	6808      	ldr	r0, [r1, #0]
    275a:	6028      	str	r0, [r5, #0]
		REG_PORT_OUTCLR0 = kb_row[i];
    275c:	c901      	ldmia	r1!, {r0}
    275e:	6020      	str	r0, [r4, #0]
	for (i = 0; i < NUM_ROW; i++) {
    2760:	4299      	cmp	r1, r3
    2762:	d1f9      	bne.n	2758 <readKeyboard+0xdc>
    2764:	2100      	movs	r1, #0
		REG_PORT_DIRCLR0 = kb_col[i];
    2766:	4b38      	ldr	r3, [pc, #224]	; (2848 <readKeyboard+0x1cc>)
    2768:	4699      	mov	r9, r3
    276a:	4b3b      	ldr	r3, [pc, #236]	; (2858 <readKeyboard+0x1dc>)
    276c:	4698      	mov	r8, r3
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.PULLEN = 1;
    276e:	4b3e      	ldr	r3, [pc, #248]	; (2868 <readKeyboard+0x1ec>)
    2770:	469c      	mov	ip, r3
    2772:	2504      	movs	r5, #4
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.INEN = 1;
    2774:	2402      	movs	r4, #2
		REG_PORT_DIRCLR0 = kb_col[i];
    2776:	4643      	mov	r3, r8
    2778:	4648      	mov	r0, r9
    277a:	5808      	ldr	r0, [r1, r0]
    277c:	6018      	str	r0, [r3, #0]
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.PULLEN = 1;
    277e:	4663      	mov	r3, ip
    2780:	58cb      	ldr	r3, [r1, r3]
    2782:	4837      	ldr	r0, [pc, #220]	; (2860 <readKeyboard+0x1e4>)
    2784:	4682      	mov	sl, r0
    2786:	4453      	add	r3, sl
    2788:	7818      	ldrb	r0, [r3, #0]
    278a:	4328      	orrs	r0, r5
    278c:	7018      	strb	r0, [r3, #0]
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.INEN = 1;
    278e:	7818      	ldrb	r0, [r3, #0]
    2790:	4320      	orrs	r0, r4
    2792:	7018      	strb	r0, [r3, #0]
    2794:	3104      	adds	r1, #4
	for (i = 0; i < NUM_COL; i++) {
    2796:	291c      	cmp	r1, #28
    2798:	d1ed      	bne.n	2776 <readKeyboard+0xfa>
    279a:	2300      	movs	r3, #0
    279c:	469c      	mov	ip, r3
		REG_PORT_OUTSET0 = kb_row[i];
    279e:	4b31      	ldr	r3, [pc, #196]	; (2864 <readKeyboard+0x1e8>)
    27a0:	469b      	mov	fp, r3
			if((PORT->Group[0].IN.reg & kb_col[j]) != 0)
    27a2:	4d28      	ldr	r5, [pc, #160]	; (2844 <readKeyboard+0x1c8>)
				scanCodes[scanCodeIndex] = (j * NUM_ROW) + i;
    27a4:	4b26      	ldr	r3, [pc, #152]	; (2840 <readKeyboard+0x1c4>)
    27a6:	4698      	mov	r8, r3
		REG_PORT_OUTCLR0 = kb_row[i];
    27a8:	4b29      	ldr	r3, [pc, #164]	; (2850 <readKeyboard+0x1d4>)
    27aa:	469a      	mov	sl, r3
    27ac:	46b1      	mov	r9, r6
    27ae:	003e      	movs	r6, r7
    27b0:	4667      	mov	r7, ip
    27b2:	e015      	b.n	27e0 <readKeyboard+0x164>
    27b4:	3104      	adds	r1, #4
    27b6:	330a      	adds	r3, #10
		for (j = 0; j < NUM_COL; j++) {
    27b8:	42a3      	cmp	r3, r4
    27ba:	d008      	beq.n	27ce <readKeyboard+0x152>
			if((PORT->Group[0].IN.reg & kb_col[j]) != 0)
    27bc:	6a28      	ldr	r0, [r5, #32]
    27be:	680e      	ldr	r6, [r1, #0]
    27c0:	4206      	tst	r6, r0
    27c2:	d0f7      	beq.n	27b4 <readKeyboard+0x138>
				scanCodes[scanCodeIndex] = (j * NUM_ROW) + i;
    27c4:	0090      	lsls	r0, r2, #2
    27c6:	4646      	mov	r6, r8
    27c8:	5183      	str	r3, [r0, r6]
				scanCodeIndex++;
    27ca:	3201      	adds	r2, #1
    27cc:	e7f2      	b.n	27b4 <readKeyboard+0x138>
    27ce:	9e00      	ldr	r6, [sp, #0]
		REG_PORT_OUTCLR0 = kb_row[i];
    27d0:	4663      	mov	r3, ip
    27d2:	681b      	ldr	r3, [r3, #0]
    27d4:	4651      	mov	r1, sl
    27d6:	600b      	str	r3, [r1, #0]
	for (i = 0; i < NUM_ROW; i++) {
    27d8:	3701      	adds	r7, #1
    27da:	3604      	adds	r6, #4
    27dc:	2f0a      	cmp	r7, #10
    27de:	d009      	beq.n	27f4 <readKeyboard+0x178>
    27e0:	46b4      	mov	ip, r6
		REG_PORT_OUTSET0 = kb_row[i];
    27e2:	465b      	mov	r3, fp
    27e4:	6831      	ldr	r1, [r6, #0]
    27e6:	6019      	str	r1, [r3, #0]
    27e8:	003b      	movs	r3, r7
    27ea:	003c      	movs	r4, r7
    27ec:	3446      	adds	r4, #70	; 0x46
    27ee:	4916      	ldr	r1, [pc, #88]	; (2848 <readKeyboard+0x1cc>)
    27f0:	9600      	str	r6, [sp, #0]
    27f2:	e7e3      	b.n	27bc <readKeyboard+0x140>
    27f4:	464e      	mov	r6, r9
	for(i = 0 ; i < scanCodeIndex ; i++)
    27f6:	2a00      	cmp	r2, #0
    27f8:	dd08      	ble.n	280c <readKeyboard+0x190>
    27fa:	4b1c      	ldr	r3, [pc, #112]	; (286c <readKeyboard+0x1f0>)
    27fc:	0092      	lsls	r2, r2, #2
    27fe:	4910      	ldr	r1, [pc, #64]	; (2840 <readKeyboard+0x1c4>)
    2800:	188a      	adds	r2, r1, r2
		scanCodeBuffer[i] = scanCodes[i];	
    2802:	ce02      	ldmia	r6!, {r1}
    2804:	7019      	strb	r1, [r3, #0]
    2806:	3301      	adds	r3, #1
	for(i = 0 ; i < scanCodeIndex ; i++)
    2808:	42b2      	cmp	r2, r6
    280a:	d1fa      	bne.n	2802 <readKeyboard+0x186>
		REG_PORT_OUTSET0 = kb_row[i];
    280c:	2400      	movs	r4, #0
		if(keyDown(i) && !scanCodesContains(i))
    280e:	4d18      	ldr	r5, [pc, #96]	; (2870 <readKeyboard+0x1f4>)
    2810:	4e18      	ldr	r6, [pc, #96]	; (2874 <readKeyboard+0x1f8>)
			removeFromKeyDown(i);
    2812:	4f19      	ldr	r7, [pc, #100]	; (2878 <readKeyboard+0x1fc>)
    2814:	e002      	b.n	281c <readKeyboard+0x1a0>
	for(i = 0; i < 70; i++)
    2816:	3401      	adds	r4, #1
    2818:	2c46      	cmp	r4, #70	; 0x46
    281a:	d00a      	beq.n	2832 <readKeyboard+0x1b6>
		if(keyDown(i) && !scanCodesContains(i))
    281c:	0020      	movs	r0, r4
    281e:	47a8      	blx	r5
    2820:	2800      	cmp	r0, #0
    2822:	d0f8      	beq.n	2816 <readKeyboard+0x19a>
    2824:	0020      	movs	r0, r4
    2826:	47b0      	blx	r6
    2828:	2800      	cmp	r0, #0
    282a:	d1f4      	bne.n	2816 <readKeyboard+0x19a>
			removeFromKeyDown(i);
    282c:	0020      	movs	r0, r4
    282e:	47b8      	blx	r7
    2830:	e7f1      	b.n	2816 <readKeyboard+0x19a>
}
    2832:	b003      	add	sp, #12
    2834:	bc3c      	pop	{r2, r3, r4, r5}
    2836:	4690      	mov	r8, r2
    2838:	4699      	mov	r9, r3
    283a:	46a2      	mov	sl, r4
    283c:	46ab      	mov	fp, r5
    283e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2840:	2000003c 	.word	0x2000003c
    2844:	41004400 	.word	0x41004400
    2848:	000065d4 	.word	0x000065d4
    284c:	41004408 	.word	0x41004408
    2850:	41004414 	.word	0x41004414
    2854:	0000660c 	.word	0x0000660c
    2858:	41004404 	.word	0x41004404
    285c:	00006634 	.word	0x00006634
    2860:	41004440 	.word	0x41004440
    2864:	41004418 	.word	0x41004418
    2868:	000065f0 	.word	0x000065f0
    286c:	20000028 	.word	0x20000028
    2870:	00002245 	.word	0x00002245
    2874:	00002219 	.word	0x00002219
    2878:	00002659 	.word	0x00002659

0000287c <setColorRGB>:

uint16_t fore_Color_High, fore_Color_Low;
uint16_t back_Color_High, back_Color_Low;

void setColorRGB(uint8_t r, uint8_t g, uint8_t b)
{
    287c:	b510      	push	{r4, lr}
	fore_Color_High = ((r&248)|g>>5);
    287e:	094b      	lsrs	r3, r1, #5
    2880:	2407      	movs	r4, #7
    2882:	43a0      	bics	r0, r4
    2884:	4318      	orrs	r0, r3
    2886:	4b05      	ldr	r3, [pc, #20]	; (289c <setColorRGB+0x20>)
    2888:	8018      	strh	r0, [r3, #0]
	fore_Color_Low = ((g&28)<<3|b>>3);
    288a:	00c9      	lsls	r1, r1, #3
    288c:	23e0      	movs	r3, #224	; 0xe0
    288e:	4019      	ands	r1, r3
    2890:	08d2      	lsrs	r2, r2, #3
    2892:	430a      	orrs	r2, r1
    2894:	4b02      	ldr	r3, [pc, #8]	; (28a0 <setColorRGB+0x24>)
    2896:	801a      	strh	r2, [r3, #0]
}
    2898:	bd10      	pop	{r4, pc}
    289a:	46c0      	nop			; (mov r8, r8)
    289c:	20000a8a 	.word	0x20000a8a
    28a0:	20000a8c 	.word	0x20000a8c

000028a4 <setBackColorRGB>:
	fore_Color_Low = (color & 0xFF);
}

void setBackColorRGB(unsigned char r,
unsigned char g, unsigned char b)
{
    28a4:	b510      	push	{r4, lr}
	back_Color_High = ((r&248)|g>>5);
    28a6:	094b      	lsrs	r3, r1, #5
    28a8:	2407      	movs	r4, #7
    28aa:	43a0      	bics	r0, r4
    28ac:	4318      	orrs	r0, r3
    28ae:	4b05      	ldr	r3, [pc, #20]	; (28c4 <setBackColorRGB+0x20>)
    28b0:	8018      	strh	r0, [r3, #0]
	back_Color_Low = ((g&28)<<3|b>>3);
    28b2:	00c9      	lsls	r1, r1, #3
    28b4:	23e0      	movs	r3, #224	; 0xe0
    28b6:	4019      	ands	r1, r3
    28b8:	08d2      	lsrs	r2, r2, #3
    28ba:	430a      	orrs	r2, r1
    28bc:	4b02      	ldr	r3, [pc, #8]	; (28c8 <setBackColorRGB+0x24>)
    28be:	801a      	strh	r2, [r3, #0]
}
    28c0:	bd10      	pop	{r4, pc}
    28c2:	46c0      	nop			; (mov r8, r8)
    28c4:	20000a8e 	.word	0x20000a8e
    28c8:	20000a88 	.word	0x20000a88

000028cc <LCD_Fast_Fill>:
	(((long)(x2-x1)+1)*((long)(y2-y1)+1)));
	REG_PORT_OUTSET1 = LCD_CS;
}

void LCD_Fast_Fill(int ch, int cl, long pix)
{
    28cc:	b570      	push	{r4, r5, r6, lr}
	int blocks;
	
	
	REG_PORT_OUTCLR1 = 0x0000ffff;
    28ce:	4c19      	ldr	r4, [pc, #100]	; (2934 <LCD_Fast_Fill+0x68>)
    28d0:	4b19      	ldr	r3, [pc, #100]	; (2938 <LCD_Fast_Fill+0x6c>)
    28d2:	601c      	str	r4, [r3, #0]
	REG_PORT_OUTSET1 = (ch << 8) | cl;
    28d4:	0200      	lsls	r0, r0, #8
    28d6:	4301      	orrs	r1, r0
    28d8:	4b18      	ldr	r3, [pc, #96]	; (293c <LCD_Fast_Fill+0x70>)
    28da:	6019      	str	r1, [r3, #0]

	blocks = pix/16;
    28dc:	17d3      	asrs	r3, r2, #31
    28de:	260f      	movs	r6, #15
    28e0:	401e      	ands	r6, r3
    28e2:	18b6      	adds	r6, r6, r2
    28e4:	1136      	asrs	r6, r6, #4
	for (int i=0; i<blocks; i++)
    28e6:	2500      	movs	r5, #0
    28e8:	2e00      	cmp	r6, #0
    28ea:	dd0c      	ble.n	2906 <LCD_Fast_Fill+0x3a>
	{
		for (int j=0; j<16; j++)
		{
			REG_PORT_OUTCLR1 = LCD_WR;
    28ec:	4c12      	ldr	r4, [pc, #72]	; (2938 <LCD_Fast_Fill+0x6c>)
    28ee:	2180      	movs	r1, #128	; 0x80
    28f0:	0289      	lsls	r1, r1, #10
			REG_PORT_OUTSET1 = LCD_WR;
    28f2:	4812      	ldr	r0, [pc, #72]	; (293c <LCD_Fast_Fill+0x70>)
{
    28f4:	2310      	movs	r3, #16
			REG_PORT_OUTCLR1 = LCD_WR;
    28f6:	6021      	str	r1, [r4, #0]
			REG_PORT_OUTSET1 = LCD_WR;
    28f8:	6001      	str	r1, [r0, #0]
    28fa:	3b01      	subs	r3, #1
		for (int j=0; j<16; j++)
    28fc:	2b00      	cmp	r3, #0
    28fe:	d1fa      	bne.n	28f6 <LCD_Fast_Fill+0x2a>
	for (int i=0; i<blocks; i++)
    2900:	3501      	adds	r5, #1
    2902:	42ae      	cmp	r6, r5
    2904:	d1f6      	bne.n	28f4 <LCD_Fast_Fill+0x28>
		}
	}
	
	if ((pix % 16) != 0)
    2906:	0713      	lsls	r3, r2, #28
    2908:	d013      	beq.n	2932 <LCD_Fast_Fill+0x66>
	for (int i=0; i<(pix % 16)+1; i++)
    290a:	17d3      	asrs	r3, r2, #31
    290c:	0f1b      	lsrs	r3, r3, #28
    290e:	18d2      	adds	r2, r2, r3
    2910:	210f      	movs	r1, #15
    2912:	4011      	ands	r1, r2
    2914:	1ac9      	subs	r1, r1, r3
    2916:	1c4b      	adds	r3, r1, #1
    2918:	2b00      	cmp	r3, #0
    291a:	dd0a      	ble.n	2932 <LCD_Fast_Fill+0x66>
    291c:	0019      	movs	r1, r3
    291e:	2300      	movs	r3, #0
	{
		REG_PORT_OUTCLR1 = LCD_WR;
    2920:	4c05      	ldr	r4, [pc, #20]	; (2938 <LCD_Fast_Fill+0x6c>)
    2922:	2280      	movs	r2, #128	; 0x80
    2924:	0292      	lsls	r2, r2, #10
		REG_PORT_OUTSET1 = LCD_WR;
    2926:	4805      	ldr	r0, [pc, #20]	; (293c <LCD_Fast_Fill+0x70>)
		REG_PORT_OUTCLR1 = LCD_WR;
    2928:	6022      	str	r2, [r4, #0]
		REG_PORT_OUTSET1 = LCD_WR;
    292a:	6002      	str	r2, [r0, #0]
	for (int i=0; i<(pix % 16)+1; i++)
    292c:	3301      	adds	r3, #1
    292e:	4299      	cmp	r1, r3
    2930:	d1fa      	bne.n	2928 <LCD_Fast_Fill+0x5c>
	}
}
    2932:	bd70      	pop	{r4, r5, r6, pc}
    2934:	0000ffff 	.word	0x0000ffff
    2938:	41004494 	.word	0x41004494
    293c:	41004498 	.word	0x41004498

00002940 <setXY>:
{
	setXY(0,0,display_X_size,display_Y_size);
}

void setXY(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
    2940:	b5f0      	push	{r4, r5, r6, r7, lr}
    2942:	b083      	sub	sp, #12
    2944:	0007      	movs	r7, r0
    2946:	9100      	str	r1, [sp, #0]
    2948:	0016      	movs	r6, r2
    294a:	9301      	str	r3, [sp, #4]
	y1=display_Y_size-y1;
	y2=display_Y_size-y2;
	SwapUint16(y1, y2);
	*/
	
	LCD_Write_COM16(0x2a,0x00);
    294c:	2100      	movs	r1, #0
    294e:	202a      	movs	r0, #42	; 0x2a
    2950:	4c17      	ldr	r4, [pc, #92]	; (29b0 <setXY+0x70>)
    2952:	47a0      	blx	r4
	LCD_Write_DATA8(x1>>8);
    2954:	0a38      	lsrs	r0, r7, #8
    2956:	4d17      	ldr	r5, [pc, #92]	; (29b4 <setXY+0x74>)
    2958:	47a8      	blx	r5
	LCD_Write_COM16(0x2a,0x01);
    295a:	2101      	movs	r1, #1
    295c:	202a      	movs	r0, #42	; 0x2a
    295e:	47a0      	blx	r4
	LCD_Write_DATA8(x1);
    2960:	b2f8      	uxtb	r0, r7
    2962:	47a8      	blx	r5
	LCD_Write_COM16(0x2a,0x02);
    2964:	2102      	movs	r1, #2
    2966:	202a      	movs	r0, #42	; 0x2a
    2968:	47a0      	blx	r4
	LCD_Write_DATA8(x2>>8);
    296a:	0a30      	lsrs	r0, r6, #8
    296c:	47a8      	blx	r5
	LCD_Write_COM16(0x2a,0x03);
    296e:	2103      	movs	r1, #3
    2970:	202a      	movs	r0, #42	; 0x2a
    2972:	47a0      	blx	r4
	LCD_Write_DATA8(x2);
    2974:	b2f0      	uxtb	r0, r6
    2976:	47a8      	blx	r5

	LCD_Write_COM16(0x2b,0x00);
    2978:	2100      	movs	r1, #0
    297a:	202b      	movs	r0, #43	; 0x2b
    297c:	47a0      	blx	r4
	LCD_Write_DATA8(y1>>8);
    297e:	9e00      	ldr	r6, [sp, #0]
    2980:	0a30      	lsrs	r0, r6, #8
    2982:	47a8      	blx	r5
	LCD_Write_COM16(0x2b,0x01);
    2984:	2101      	movs	r1, #1
    2986:	202b      	movs	r0, #43	; 0x2b
    2988:	47a0      	blx	r4
	LCD_Write_DATA8(y1);
    298a:	b2f0      	uxtb	r0, r6
    298c:	47a8      	blx	r5
	LCD_Write_COM16(0x2b,0x02);
    298e:	2102      	movs	r1, #2
    2990:	202b      	movs	r0, #43	; 0x2b
    2992:	47a0      	blx	r4
	LCD_Write_DATA8(y2>>8);
    2994:	9e01      	ldr	r6, [sp, #4]
    2996:	0a30      	lsrs	r0, r6, #8
    2998:	47a8      	blx	r5
	LCD_Write_COM16(0x2b,0x03);
    299a:	2103      	movs	r1, #3
    299c:	202b      	movs	r0, #43	; 0x2b
    299e:	47a0      	blx	r4
	LCD_Write_DATA8(y2);
    29a0:	b2f0      	uxtb	r0, r6
    29a2:	47a8      	blx	r5

	LCD_Write_COM16(0x2c,0x00);
    29a4:	2100      	movs	r1, #0
    29a6:	202c      	movs	r0, #44	; 0x2c
    29a8:	47a0      	blx	r4
}
    29aa:	b003      	add	sp, #12
    29ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    29ae:	46c0      	nop			; (mov r8, r8)
    29b0:	00002b6d 	.word	0x00002b6d
    29b4:	00002b9d 	.word	0x00002b9d

000029b8 <fillRect>:
{
    29b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    29ba:	46ce      	mov	lr, r9
    29bc:	4647      	mov	r7, r8
    29be:	b580      	push	{r7, lr}
    29c0:	b083      	sub	sp, #12
    29c2:	0006      	movs	r6, r0
    29c4:	4689      	mov	r9, r1
    29c6:	0014      	movs	r4, r2
    29c8:	001d      	movs	r5, r3
	if (x1>x2)
    29ca:	4290      	cmp	r0, r2
    29cc:	dd01      	ble.n	29d2 <fillRect+0x1a>
		x1 = x2;
    29ce:	0016      	movs	r6, r2
		x2 = temp;
    29d0:	0004      	movs	r4, r0
	if (y1>y2)
    29d2:	45a9      	cmp	r9, r5
    29d4:	dd02      	ble.n	29dc <fillRect+0x24>
    29d6:	0033      	movs	r3, r6
		x1 = x2;
    29d8:	0026      	movs	r6, r4
		x2 = temp;
    29da:	001c      	movs	r4, r3
	REG_PORT_OUTCLR1 = LCD_CS;
    29dc:	2380      	movs	r3, #128	; 0x80
    29de:	03db      	lsls	r3, r3, #15
    29e0:	4698      	mov	r8, r3
    29e2:	4b11      	ldr	r3, [pc, #68]	; (2a28 <fillRect+0x70>)
    29e4:	4642      	mov	r2, r8
    29e6:	601a      	str	r2, [r3, #0]
	setXY(x1, y1, x2, y2);
    29e8:	b2ab      	uxth	r3, r5
    29ea:	b2a2      	uxth	r2, r4
    29ec:	4649      	mov	r1, r9
    29ee:	4668      	mov	r0, sp
    29f0:	80c1      	strh	r1, [r0, #6]
    29f2:	88c1      	ldrh	r1, [r0, #6]
    29f4:	b2b0      	uxth	r0, r6
    29f6:	4f0d      	ldr	r7, [pc, #52]	; (2a2c <fillRect+0x74>)
    29f8:	47b8      	blx	r7
	REG_PORT_OUTSET1 = LCD_DC;
    29fa:	4f0d      	ldr	r7, [pc, #52]	; (2a30 <fillRect+0x78>)
    29fc:	2380      	movs	r3, #128	; 0x80
    29fe:	041b      	lsls	r3, r3, #16
    2a00:	603b      	str	r3, [r7, #0]
	(((long)(x2-x1)+1)*((long)(y2-y1)+1)));
    2a02:	1ba4      	subs	r4, r4, r6
    2a04:	3401      	adds	r4, #1
    2a06:	464b      	mov	r3, r9
    2a08:	1aea      	subs	r2, r5, r3
    2a0a:	3201      	adds	r2, #1
	LCD_Fast_Fill(fore_Color_High, fore_Color_Low,
    2a0c:	4362      	muls	r2, r4
    2a0e:	4b09      	ldr	r3, [pc, #36]	; (2a34 <fillRect+0x7c>)
    2a10:	8819      	ldrh	r1, [r3, #0]
    2a12:	4b09      	ldr	r3, [pc, #36]	; (2a38 <fillRect+0x80>)
    2a14:	8818      	ldrh	r0, [r3, #0]
    2a16:	4b09      	ldr	r3, [pc, #36]	; (2a3c <fillRect+0x84>)
    2a18:	4798      	blx	r3
	REG_PORT_OUTSET1 = LCD_CS;
    2a1a:	4643      	mov	r3, r8
    2a1c:	603b      	str	r3, [r7, #0]
}
    2a1e:	b003      	add	sp, #12
    2a20:	bc0c      	pop	{r2, r3}
    2a22:	4690      	mov	r8, r2
    2a24:	4699      	mov	r9, r3
    2a26:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a28:	41004494 	.word	0x41004494
    2a2c:	00002941 	.word	0x00002941
    2a30:	41004498 	.word	0x41004498
    2a34:	20000a8c 	.word	0x20000a8c
    2a38:	20000a8a 	.word	0x20000a8a
    2a3c:	000028cd 	.word	0x000028cd

00002a40 <fillRectBackColor>:
{
    2a40:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a42:	46ce      	mov	lr, r9
    2a44:	4647      	mov	r7, r8
    2a46:	b580      	push	{r7, lr}
    2a48:	b083      	sub	sp, #12
    2a4a:	0006      	movs	r6, r0
    2a4c:	4689      	mov	r9, r1
    2a4e:	0014      	movs	r4, r2
    2a50:	001d      	movs	r5, r3
	if (x1>x2)
    2a52:	4290      	cmp	r0, r2
    2a54:	dd01      	ble.n	2a5a <fillRectBackColor+0x1a>
		x1 = x2;
    2a56:	0016      	movs	r6, r2
		x2 = temp;
    2a58:	0004      	movs	r4, r0
	if (y1>y2)
    2a5a:	45a9      	cmp	r9, r5
    2a5c:	dd02      	ble.n	2a64 <fillRectBackColor+0x24>
    2a5e:	0033      	movs	r3, r6
		x1 = x2;
    2a60:	0026      	movs	r6, r4
		x2 = temp;
    2a62:	001c      	movs	r4, r3
	REG_PORT_OUTCLR1 = LCD_CS;
    2a64:	2380      	movs	r3, #128	; 0x80
    2a66:	03db      	lsls	r3, r3, #15
    2a68:	4698      	mov	r8, r3
    2a6a:	4b11      	ldr	r3, [pc, #68]	; (2ab0 <fillRectBackColor+0x70>)
    2a6c:	4642      	mov	r2, r8
    2a6e:	601a      	str	r2, [r3, #0]
	setXY(x1, y1, x2, y2);
    2a70:	b2ab      	uxth	r3, r5
    2a72:	b2a2      	uxth	r2, r4
    2a74:	4649      	mov	r1, r9
    2a76:	4668      	mov	r0, sp
    2a78:	80c1      	strh	r1, [r0, #6]
    2a7a:	88c1      	ldrh	r1, [r0, #6]
    2a7c:	b2b0      	uxth	r0, r6
    2a7e:	4f0d      	ldr	r7, [pc, #52]	; (2ab4 <fillRectBackColor+0x74>)
    2a80:	47b8      	blx	r7
	REG_PORT_OUTSET1 = LCD_DC;
    2a82:	4f0d      	ldr	r7, [pc, #52]	; (2ab8 <fillRectBackColor+0x78>)
    2a84:	2380      	movs	r3, #128	; 0x80
    2a86:	041b      	lsls	r3, r3, #16
    2a88:	603b      	str	r3, [r7, #0]
	(((long)(x2-x1)+1)*((long)(y2-y1)+1)));
    2a8a:	1ba4      	subs	r4, r4, r6
    2a8c:	3401      	adds	r4, #1
    2a8e:	464b      	mov	r3, r9
    2a90:	1aea      	subs	r2, r5, r3
    2a92:	3201      	adds	r2, #1
	LCD_Fast_Fill(back_Color_High, back_Color_Low,
    2a94:	4362      	muls	r2, r4
    2a96:	4b09      	ldr	r3, [pc, #36]	; (2abc <fillRectBackColor+0x7c>)
    2a98:	8819      	ldrh	r1, [r3, #0]
    2a9a:	4b09      	ldr	r3, [pc, #36]	; (2ac0 <fillRectBackColor+0x80>)
    2a9c:	8818      	ldrh	r0, [r3, #0]
    2a9e:	4b09      	ldr	r3, [pc, #36]	; (2ac4 <fillRectBackColor+0x84>)
    2aa0:	4798      	blx	r3
	REG_PORT_OUTSET1 = LCD_CS;
    2aa2:	4643      	mov	r3, r8
    2aa4:	603b      	str	r3, [r7, #0]
}
    2aa6:	b003      	add	sp, #12
    2aa8:	bc0c      	pop	{r2, r3}
    2aaa:	4690      	mov	r8, r2
    2aac:	4699      	mov	r9, r3
    2aae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2ab0:	41004494 	.word	0x41004494
    2ab4:	00002941 	.word	0x00002941
    2ab8:	41004498 	.word	0x41004498
    2abc:	20000a88 	.word	0x20000a88
    2ac0:	20000a8e 	.word	0x20000a8e
    2ac4:	000028cd 	.word	0x000028cd

00002ac8 <clrXY>:
{
    2ac8:	b510      	push	{r4, lr}
	setXY(0,0,display_X_size,display_Y_size);
    2aca:	4b04      	ldr	r3, [pc, #16]	; (2adc <clrXY+0x14>)
    2acc:	881b      	ldrh	r3, [r3, #0]
    2ace:	4a04      	ldr	r2, [pc, #16]	; (2ae0 <clrXY+0x18>)
    2ad0:	8812      	ldrh	r2, [r2, #0]
    2ad2:	2100      	movs	r1, #0
    2ad4:	2000      	movs	r0, #0
    2ad6:	4c03      	ldr	r4, [pc, #12]	; (2ae4 <clrXY+0x1c>)
    2ad8:	47a0      	blx	r4
}
    2ada:	bd10      	pop	{r4, pc}
    2adc:	20000156 	.word	0x20000156
    2ae0:	20000154 	.word	0x20000154
    2ae4:	00002941 	.word	0x00002941

00002ae8 <clrScr>:
{
    2ae8:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = LCD_CS;
    2aea:	2280      	movs	r2, #128	; 0x80
    2aec:	03d2      	lsls	r2, r2, #15
    2aee:	4b02      	ldr	r3, [pc, #8]	; (2af8 <clrScr+0x10>)
    2af0:	601a      	str	r2, [r3, #0]
	clrXY();
    2af2:	4b02      	ldr	r3, [pc, #8]	; (2afc <clrScr+0x14>)
    2af4:	4798      	blx	r3
}
    2af6:	bd10      	pop	{r4, pc}
    2af8:	41004494 	.word	0x41004494
    2afc:	00002ac9 	.word	0x00002ac9

00002b00 <setPixel>:

void setPixel(uint16_t color)
{
    2b00:	b510      	push	{r4, lr}
	//it sets it to a 16-bit color.
	LCD_Write_DATA16((color>>8),(color&0xFF));
    2b02:	b2c1      	uxtb	r1, r0
    2b04:	0a00      	lsrs	r0, r0, #8
    2b06:	4b01      	ldr	r3, [pc, #4]	; (2b0c <setPixel+0xc>)
    2b08:	4798      	blx	r3
}
    2b0a:	bd10      	pop	{r4, pc}
    2b0c:	00002b85 	.word	0x00002b85

00002b10 <clearScreen>:
	LCD_Write_DATA8(0x80);
	REG_PORT_OUTSET1 = LCD_CS;
}
*/
void clearScreen(void)
{
    2b10:	b510      	push	{r4, lr}
	fore_Color_High = ((r&248)|g>>5);
    2b12:	2300      	movs	r3, #0
    2b14:	4a06      	ldr	r2, [pc, #24]	; (2b30 <clearScreen+0x20>)
    2b16:	8013      	strh	r3, [r2, #0]
	fore_Color_Low = ((g&28)<<3|b>>3);
    2b18:	4a06      	ldr	r2, [pc, #24]	; (2b34 <clearScreen+0x24>)
    2b1a:	8013      	strh	r3, [r2, #0]
	setColorRGB(0,0,0);
	fillRect(0,0,display_Y_size,display_X_size);
    2b1c:	4b06      	ldr	r3, [pc, #24]	; (2b38 <clearScreen+0x28>)
    2b1e:	881b      	ldrh	r3, [r3, #0]
    2b20:	4a06      	ldr	r2, [pc, #24]	; (2b3c <clearScreen+0x2c>)
    2b22:	8812      	ldrh	r2, [r2, #0]
    2b24:	2100      	movs	r1, #0
    2b26:	2000      	movs	r0, #0
    2b28:	4c05      	ldr	r4, [pc, #20]	; (2b40 <clearScreen+0x30>)
    2b2a:	47a0      	blx	r4
}
    2b2c:	bd10      	pop	{r4, pc}
    2b2e:	46c0      	nop			; (mov r8, r8)
    2b30:	20000a8a 	.word	0x20000a8a
    2b34:	20000a8c 	.word	0x20000a8c
    2b38:	20000154 	.word	0x20000154
    2b3c:	20000156 	.word	0x20000156
    2b40:	000029b9 	.word	0x000029b9

00002b44 <LCD_Write_Bus>:
	fillRect(0,0,799,489);
		
}

void LCD_Write_Bus(char VH, char VL)
{
    2b44:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = 0x0000ffff;
    2b46:	4c06      	ldr	r4, [pc, #24]	; (2b60 <LCD_Write_Bus+0x1c>)
    2b48:	4b06      	ldr	r3, [pc, #24]	; (2b64 <LCD_Write_Bus+0x20>)
    2b4a:	6023      	str	r3, [r4, #0]
	REG_PORT_OUTSET1 = (VH << 8) | VL;
    2b4c:	0200      	lsls	r0, r0, #8
    2b4e:	4301      	orrs	r1, r0
    2b50:	4b05      	ldr	r3, [pc, #20]	; (2b68 <LCD_Write_Bus+0x24>)
    2b52:	6019      	str	r1, [r3, #0]
	REG_PORT_OUTCLR1 = LCD_WR;
    2b54:	2280      	movs	r2, #128	; 0x80
    2b56:	0292      	lsls	r2, r2, #10
    2b58:	6022      	str	r2, [r4, #0]
	REG_PORT_OUTSET1 = LCD_WR;
    2b5a:	601a      	str	r2, [r3, #0]
}
    2b5c:	bd10      	pop	{r4, pc}
    2b5e:	46c0      	nop			; (mov r8, r8)
    2b60:	41004494 	.word	0x41004494
    2b64:	0000ffff 	.word	0x0000ffff
    2b68:	41004498 	.word	0x41004498

00002b6c <LCD_Write_COM16>:

void LCD_Write_COM16(char VH, char VL)
{
    2b6c:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = LCD_DC;
    2b6e:	2280      	movs	r2, #128	; 0x80
    2b70:	0412      	lsls	r2, r2, #16
    2b72:	4b02      	ldr	r3, [pc, #8]	; (2b7c <LCD_Write_COM16+0x10>)
    2b74:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(VH,VL);
    2b76:	4b02      	ldr	r3, [pc, #8]	; (2b80 <LCD_Write_COM16+0x14>)
    2b78:	4798      	blx	r3
}
    2b7a:	bd10      	pop	{r4, pc}
    2b7c:	41004494 	.word	0x41004494
    2b80:	00002b45 	.word	0x00002b45

00002b84 <LCD_Write_DATA16>:
	REG_PORT_OUTCLR1 = LCD_DC;
	LCD_Write_Bus(0x00, VL);
}

void LCD_Write_DATA16(char VH, char VL)
{
    2b84:	b510      	push	{r4, lr}
	REG_PORT_OUTSET1 = LCD_DC;
    2b86:	2280      	movs	r2, #128	; 0x80
    2b88:	0412      	lsls	r2, r2, #16
    2b8a:	4b02      	ldr	r3, [pc, #8]	; (2b94 <LCD_Write_DATA16+0x10>)
    2b8c:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(VH,VL);
    2b8e:	4b02      	ldr	r3, [pc, #8]	; (2b98 <LCD_Write_DATA16+0x14>)
    2b90:	4798      	blx	r3
}
    2b92:	bd10      	pop	{r4, pc}
    2b94:	41004498 	.word	0x41004498
    2b98:	00002b45 	.word	0x00002b45

00002b9c <LCD_Write_DATA8>:

void LCD_Write_DATA8(char VL)
{
    2b9c:	b510      	push	{r4, lr}
    2b9e:	0001      	movs	r1, r0
	REG_PORT_OUTSET1 = LCD_DC;
    2ba0:	2280      	movs	r2, #128	; 0x80
    2ba2:	0412      	lsls	r2, r2, #16
    2ba4:	4b02      	ldr	r3, [pc, #8]	; (2bb0 <LCD_Write_DATA8+0x14>)
    2ba6:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(0x00, VL);
    2ba8:	2000      	movs	r0, #0
    2baa:	4b02      	ldr	r3, [pc, #8]	; (2bb4 <LCD_Write_DATA8+0x18>)
    2bac:	4798      	blx	r3
}
    2bae:	bd10      	pop	{r4, pc}
    2bb0:	41004498 	.word	0x41004498
    2bb4:	00002b45 	.word	0x00002b45

00002bb8 <InitLCD>:
{
    2bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2bba:	46c6      	mov	lr, r8
    2bbc:	b500      	push	{lr}
    2bbe:	b082      	sub	sp, #8
	REG_PORT_DIRSET1 = 0x0000ffff;		//LCD data bus, PB00 - PB15
    2bc0:	4b80      	ldr	r3, [pc, #512]	; (2dc4 <InitLCD+0x20c>)
    2bc2:	4f81      	ldr	r7, [pc, #516]	; (2dc8 <InitLCD+0x210>)
    2bc4:	601f      	str	r7, [r3, #0]
	REG_PORT_DIRSET1 = LCD_Reset;
    2bc6:	2580      	movs	r5, #128	; 0x80
    2bc8:	05ed      	lsls	r5, r5, #23
    2bca:	601d      	str	r5, [r3, #0]
	REG_PORT_DIRSET1 = LCD_CS;
    2bcc:	2680      	movs	r6, #128	; 0x80
    2bce:	03f6      	lsls	r6, r6, #15
    2bd0:	601e      	str	r6, [r3, #0]
	REG_PORT_DIRSET1 = LCD_WR;
    2bd2:	2080      	movs	r0, #128	; 0x80
    2bd4:	0280      	lsls	r0, r0, #10
    2bd6:	6018      	str	r0, [r3, #0]
	REG_PORT_DIRSET1 = LCD_DC;
    2bd8:	2180      	movs	r1, #128	; 0x80
    2bda:	0409      	lsls	r1, r1, #16
    2bdc:	6019      	str	r1, [r3, #0]
	REG_PORT_DIRSET1 = LCD_RD;
    2bde:	2280      	movs	r2, #128	; 0x80
    2be0:	0252      	lsls	r2, r2, #9
    2be2:	601a      	str	r2, [r3, #0]
	REG_PORT_OUTCLR1 = 0x0000ffff;
    2be4:	4c79      	ldr	r4, [pc, #484]	; (2dcc <InitLCD+0x214>)
    2be6:	6027      	str	r7, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_Reset;
    2be8:	6025      	str	r5, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_CS;
    2bea:	6026      	str	r6, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_WR;
    2bec:	6020      	str	r0, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_DC;
    2bee:	6021      	str	r1, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_RD;
    2bf0:	6022      	str	r2, [r4, #0]
	REG_PORT_DIRSET1 = PORT_PB16;
    2bf2:	601a      	str	r2, [r3, #0]
	REG_PORT_OUTSET1 = PORT_PB16;
    2bf4:	4f76      	ldr	r7, [pc, #472]	; (2dd0 <InitLCD+0x218>)
    2bf6:	603a      	str	r2, [r7, #0]
	REG_PORT_OUTSET1 = LCD_Reset;
    2bf8:	603d      	str	r5, [r7, #0]
	delay_ms(5);
    2bfa:	2005      	movs	r0, #5
    2bfc:	4b75      	ldr	r3, [pc, #468]	; (2dd4 <InitLCD+0x21c>)
    2bfe:	4698      	mov	r8, r3
    2c00:	4798      	blx	r3
	REG_PORT_OUTCLR1 = LCD_Reset;
    2c02:	6025      	str	r5, [r4, #0]
	delay_ms(5);
    2c04:	2005      	movs	r0, #5
    2c06:	47c0      	blx	r8
	REG_PORT_OUTSET1 = LCD_Reset;
    2c08:	603d      	str	r5, [r7, #0]
	REG_PORT_OUTCLR1 = LCD_CS;
    2c0a:	6026      	str	r6, [r4, #0]
	for(int i = 0; i < 70; i++)
    2c0c:	2400      	movs	r4, #0
		REG_PORT_OUTCLR1 = LCD_DC;
    2c0e:	4b6f      	ldr	r3, [pc, #444]	; (2dcc <InitLCD+0x214>)
    2c10:	4698      	mov	r8, r3
    2c12:	2580      	movs	r5, #128	; 0x80
    2c14:	042d      	lsls	r5, r5, #16
    2c16:	002f      	movs	r7, r5
		LCD_Write_COM16(belial[i],mulciber[i]);
    2c18:	4e6f      	ldr	r6, [pc, #444]	; (2dd8 <InitLCD+0x220>)
		REG_PORT_OUTCLR1 = LCD_DC;
    2c1a:	4643      	mov	r3, r8
    2c1c:	601f      	str	r7, [r3, #0]
		LCD_Write_COM16(belial[i],mulciber[i]);
    2c1e:	5da1      	ldrb	r1, [r4, r6]
    2c20:	4b6e      	ldr	r3, [pc, #440]	; (2ddc <InitLCD+0x224>)
    2c22:	5ce0      	ldrb	r0, [r4, r3]
    2c24:	4b6e      	ldr	r3, [pc, #440]	; (2de0 <InitLCD+0x228>)
    2c26:	4798      	blx	r3
		REG_PORT_OUTSET1 = LCD_DC;
    2c28:	4b69      	ldr	r3, [pc, #420]	; (2dd0 <InitLCD+0x218>)
    2c2a:	601d      	str	r5, [r3, #0]
		LCD_Write_DATA8(lucifer[i]);
    2c2c:	4b6d      	ldr	r3, [pc, #436]	; (2de4 <InitLCD+0x22c>)
    2c2e:	5ce0      	ldrb	r0, [r4, r3]
    2c30:	4b6d      	ldr	r3, [pc, #436]	; (2de8 <InitLCD+0x230>)
    2c32:	4798      	blx	r3
	for(int i = 0; i < 70; i++)
    2c34:	3401      	adds	r4, #1
    2c36:	2c46      	cmp	r4, #70	; 0x46
    2c38:	d1ef      	bne.n	2c1a <InitLCD+0x62>
    2c3a:	23d1      	movs	r3, #209	; 0xd1
    2c3c:	9301      	str	r3, [sp, #4]
			LCD_Write_COM16(k,0x00);
    2c3e:	4d68      	ldr	r5, [pc, #416]	; (2de0 <InitLCD+0x228>)
			LCD_Write_DATA8(beelzebub[l]);
    2c40:	4f69      	ldr	r7, [pc, #420]	; (2de8 <InitLCD+0x230>)
    2c42:	4c6a      	ldr	r4, [pc, #424]	; (2dec <InitLCD+0x234>)
    2c44:	0026      	movs	r6, r4
    2c46:	3634      	adds	r6, #52	; 0x34
			LCD_Write_COM16(k,0x00);
    2c48:	2100      	movs	r1, #0
    2c4a:	9801      	ldr	r0, [sp, #4]
    2c4c:	47a8      	blx	r5
			LCD_Write_DATA8(beelzebub[l]);
    2c4e:	7820      	ldrb	r0, [r4, #0]
    2c50:	47b8      	blx	r7
    2c52:	3401      	adds	r4, #1
		for(int l = 0; l < 52; l++)
    2c54:	42a6      	cmp	r6, r4
    2c56:	d1f7      	bne.n	2c48 <InitLCD+0x90>
	for(char k = 0xD1; k < 0xD6; k++)
    2c58:	9b01      	ldr	r3, [sp, #4]
    2c5a:	3301      	adds	r3, #1
    2c5c:	b2db      	uxtb	r3, r3
    2c5e:	9301      	str	r3, [sp, #4]
    2c60:	2bd6      	cmp	r3, #214	; 0xd6
    2c62:	d1ee      	bne.n	2c42 <InitLCD+0x8a>
	LCD_Write_COM16(0xF0, 0x00);LCD_Write_DATA8(0x55);
    2c64:	2100      	movs	r1, #0
    2c66:	20f0      	movs	r0, #240	; 0xf0
    2c68:	4c5d      	ldr	r4, [pc, #372]	; (2de0 <InitLCD+0x228>)
    2c6a:	47a0      	blx	r4
    2c6c:	2055      	movs	r0, #85	; 0x55
    2c6e:	4d5e      	ldr	r5, [pc, #376]	; (2de8 <InitLCD+0x230>)
    2c70:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x01);LCD_Write_DATA8(0xAA);	
    2c72:	2101      	movs	r1, #1
    2c74:	20f0      	movs	r0, #240	; 0xf0
    2c76:	47a0      	blx	r4
    2c78:	20aa      	movs	r0, #170	; 0xaa
    2c7a:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x02);LCD_Write_DATA8(0x52);	
    2c7c:	2102      	movs	r1, #2
    2c7e:	20f0      	movs	r0, #240	; 0xf0
    2c80:	47a0      	blx	r4
    2c82:	2052      	movs	r0, #82	; 0x52
    2c84:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x03);LCD_Write_DATA8(0x08);	
    2c86:	2103      	movs	r1, #3
    2c88:	20f0      	movs	r0, #240	; 0xf0
    2c8a:	47a0      	blx	r4
    2c8c:	2008      	movs	r0, #8
    2c8e:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x04);LCD_Write_DATA8(0x00);	
    2c90:	2104      	movs	r1, #4
    2c92:	20f0      	movs	r0, #240	; 0xf0
    2c94:	47a0      	blx	r4
    2c96:	2000      	movs	r0, #0
    2c98:	47a8      	blx	r5
	LCD_Write_COM16(0xB1, 0x00);LCD_Write_DATA8(0xCC);
    2c9a:	2100      	movs	r1, #0
    2c9c:	20b1      	movs	r0, #177	; 0xb1
    2c9e:	47a0      	blx	r4
    2ca0:	20cc      	movs	r0, #204	; 0xcc
    2ca2:	47a8      	blx	r5
	LCD_Write_COM16(0xB1, 0x01);LCD_Write_DATA8(0x00);	
    2ca4:	2101      	movs	r1, #1
    2ca6:	20b1      	movs	r0, #177	; 0xb1
    2ca8:	47a0      	blx	r4
    2caa:	2000      	movs	r0, #0
    2cac:	47a8      	blx	r5
	LCD_Write_COM16(0xB5, 0x00);LCD_Write_DATA8(0x50);	
    2cae:	2100      	movs	r1, #0
    2cb0:	20b5      	movs	r0, #181	; 0xb5
    2cb2:	47a0      	blx	r4
    2cb4:	2050      	movs	r0, #80	; 0x50
    2cb6:	47a8      	blx	r5
	LCD_Write_COM16(0xB6, 0x00);LCD_Write_DATA8(0x05);
    2cb8:	2100      	movs	r1, #0
    2cba:	20b6      	movs	r0, #182	; 0xb6
    2cbc:	47a0      	blx	r4
    2cbe:	2005      	movs	r0, #5
    2cc0:	47a8      	blx	r5
	LCD_Write_COM16(0xB7, 0x00);LCD_Write_DATA8(0x70);
    2cc2:	2100      	movs	r1, #0
    2cc4:	20b7      	movs	r0, #183	; 0xb7
    2cc6:	47a0      	blx	r4
    2cc8:	2070      	movs	r0, #112	; 0x70
    2cca:	47a8      	blx	r5
	LCD_Write_COM16(0xB7, 0x01);LCD_Write_DATA8(0x70);
    2ccc:	2101      	movs	r1, #1
    2cce:	20b7      	movs	r0, #183	; 0xb7
    2cd0:	47a0      	blx	r4
    2cd2:	2070      	movs	r0, #112	; 0x70
    2cd4:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x00);LCD_Write_DATA8(0x01);
    2cd6:	2100      	movs	r1, #0
    2cd8:	20b8      	movs	r0, #184	; 0xb8
    2cda:	47a0      	blx	r4
    2cdc:	2001      	movs	r0, #1
    2cde:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x01);LCD_Write_DATA8(0x03);
    2ce0:	2101      	movs	r1, #1
    2ce2:	20b8      	movs	r0, #184	; 0xb8
    2ce4:	47a0      	blx	r4
    2ce6:	2003      	movs	r0, #3
    2ce8:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x02);LCD_Write_DATA8(0x03);
    2cea:	2102      	movs	r1, #2
    2cec:	20b8      	movs	r0, #184	; 0xb8
    2cee:	47a0      	blx	r4
    2cf0:	2003      	movs	r0, #3
    2cf2:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x03);LCD_Write_DATA8(0x03);	
    2cf4:	2103      	movs	r1, #3
    2cf6:	20b8      	movs	r0, #184	; 0xb8
    2cf8:	47a0      	blx	r4
    2cfa:	2003      	movs	r0, #3
    2cfc:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x00);LCD_Write_DATA8(0x02);
    2cfe:	2100      	movs	r1, #0
    2d00:	20bc      	movs	r0, #188	; 0xbc
    2d02:	47a0      	blx	r4
    2d04:	2002      	movs	r0, #2
    2d06:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x01);LCD_Write_DATA8(0x00);
    2d08:	2101      	movs	r1, #1
    2d0a:	20bc      	movs	r0, #188	; 0xbc
    2d0c:	47a0      	blx	r4
    2d0e:	2000      	movs	r0, #0
    2d10:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x02);LCD_Write_DATA8(0x00);
    2d12:	2102      	movs	r1, #2
    2d14:	20bc      	movs	r0, #188	; 0xbc
    2d16:	47a0      	blx	r4
    2d18:	2000      	movs	r0, #0
    2d1a:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x00);LCD_Write_DATA8(0xD0);
    2d1c:	2100      	movs	r1, #0
    2d1e:	20c9      	movs	r0, #201	; 0xc9
    2d20:	47a0      	blx	r4
    2d22:	20d0      	movs	r0, #208	; 0xd0
    2d24:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x01);LCD_Write_DATA8(0x02);
    2d26:	2101      	movs	r1, #1
    2d28:	20c9      	movs	r0, #201	; 0xc9
    2d2a:	47a0      	blx	r4
    2d2c:	2002      	movs	r0, #2
    2d2e:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x02);LCD_Write_DATA8(0x50);
    2d30:	2102      	movs	r1, #2
    2d32:	20c9      	movs	r0, #201	; 0xc9
    2d34:	47a0      	blx	r4
    2d36:	2050      	movs	r0, #80	; 0x50
    2d38:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x03);LCD_Write_DATA8(0x50);
    2d3a:	2103      	movs	r1, #3
    2d3c:	20c9      	movs	r0, #201	; 0xc9
    2d3e:	47a0      	blx	r4
    2d40:	2050      	movs	r0, #80	; 0x50
    2d42:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x04);LCD_Write_DATA8(0x50);
    2d44:	2104      	movs	r1, #4
    2d46:	20c9      	movs	r0, #201	; 0xc9
    2d48:	47a0      	blx	r4
    2d4a:	2050      	movs	r0, #80	; 0x50
    2d4c:	47a8      	blx	r5
	LCD_Write_COM16(0x35, 0x00);LCD_Write_DATA8(0x00);
    2d4e:	2100      	movs	r1, #0
    2d50:	2035      	movs	r0, #53	; 0x35
    2d52:	47a0      	blx	r4
    2d54:	2000      	movs	r0, #0
    2d56:	47a8      	blx	r5
	LCD_Write_COM16(0x3A, 0x00);LCD_Write_DATA8(0x55);
    2d58:	2100      	movs	r1, #0
    2d5a:	203a      	movs	r0, #58	; 0x3a
    2d5c:	47a0      	blx	r4
    2d5e:	2055      	movs	r0, #85	; 0x55
    2d60:	47a8      	blx	r5
	LCD_Write_COM16(0x36, 0x00);LCD_Write_DATA8(0xE2);  //This is the MADCTL register
    2d62:	2100      	movs	r1, #0
    2d64:	2036      	movs	r0, #54	; 0x36
    2d66:	47a0      	blx	r4
    2d68:	20e2      	movs	r0, #226	; 0xe2
    2d6a:	47a8      	blx	r5
  	LCD_Write_COM16(0x11,0x00);   //Start Up  
    2d6c:	2100      	movs	r1, #0
    2d6e:	2011      	movs	r0, #17
    2d70:	47a0      	blx	r4
  	delay_ms(100);
    2d72:	2064      	movs	r0, #100	; 0x64
    2d74:	4e17      	ldr	r6, [pc, #92]	; (2dd4 <InitLCD+0x21c>)
    2d76:	47b0      	blx	r6
  	LCD_Write_COM16(0x29,0x00);   //Display On  
    2d78:	2100      	movs	r1, #0
    2d7a:	2029      	movs	r0, #41	; 0x29
    2d7c:	47a0      	blx	r4
   	delay_ms(100);
    2d7e:	2064      	movs	r0, #100	; 0x64
    2d80:	47b0      	blx	r6
	LCD_Write_COM16(0x51,0x00);LCD_Write_DATA8(0xFF);
    2d82:	2100      	movs	r1, #0
    2d84:	2051      	movs	r0, #81	; 0x51
    2d86:	47a0      	blx	r4
    2d88:	20ff      	movs	r0, #255	; 0xff
    2d8a:	47a8      	blx	r5
	REG_PORT_OUTSET1 = LCD_CS;
    2d8c:	2280      	movs	r2, #128	; 0x80
    2d8e:	03d2      	lsls	r2, r2, #15
    2d90:	4b0f      	ldr	r3, [pc, #60]	; (2dd0 <InitLCD+0x218>)
    2d92:	601a      	str	r2, [r3, #0]
	clrScr();
    2d94:	4b16      	ldr	r3, [pc, #88]	; (2df0 <InitLCD+0x238>)
    2d96:	4798      	blx	r3
	setColorRGB(0,0,0);
    2d98:	2200      	movs	r2, #0
    2d9a:	2100      	movs	r1, #0
    2d9c:	2000      	movs	r0, #0
    2d9e:	4b15      	ldr	r3, [pc, #84]	; (2df4 <InitLCD+0x23c>)
    2da0:	4798      	blx	r3
	setBackColorRGB(0, 0, 0);
    2da2:	2200      	movs	r2, #0
    2da4:	2100      	movs	r1, #0
    2da6:	2000      	movs	r0, #0
    2da8:	4b13      	ldr	r3, [pc, #76]	; (2df8 <InitLCD+0x240>)
    2daa:	4798      	blx	r3
	fillRect(0,0,799,489);
    2dac:	23ea      	movs	r3, #234	; 0xea
    2dae:	33ff      	adds	r3, #255	; 0xff
    2db0:	4a12      	ldr	r2, [pc, #72]	; (2dfc <InitLCD+0x244>)
    2db2:	2100      	movs	r1, #0
    2db4:	2000      	movs	r0, #0
    2db6:	4c12      	ldr	r4, [pc, #72]	; (2e00 <InitLCD+0x248>)
    2db8:	47a0      	blx	r4
}
    2dba:	b002      	add	sp, #8
    2dbc:	bc04      	pop	{r2}
    2dbe:	4690      	mov	r8, r2
    2dc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2dc2:	46c0      	nop			; (mov r8, r8)
    2dc4:	41004488 	.word	0x41004488
    2dc8:	0000ffff 	.word	0x0000ffff
    2dcc:	41004494 	.word	0x41004494
    2dd0:	41004498 	.word	0x41004498
    2dd4:	00000435 	.word	0x00000435
    2dd8:	00006720 	.word	0x00006720
    2ddc:	00006690 	.word	0x00006690
    2de0:	00002b6d 	.word	0x00002b6d
    2de4:	000066d8 	.word	0x000066d8
    2de8:	00002b9d 	.word	0x00002b9d
    2dec:	0000665c 	.word	0x0000665c
    2df0:	00002ae9 	.word	0x00002ae9
    2df4:	0000287d 	.word	0x0000287d
    2df8:	000028a5 	.word	0x000028a5
    2dfc:	0000031f 	.word	0x0000031f
    2e00:	000029b9 	.word	0x000029b9

00002e04 <usart_read_callback>:
	SysTick_Config(SystemCoreClock/1000);
	system_interrupt_enable(SYSTEM_INTERRUPT_SYSTICK);
}

void usart_read_callback(struct usart_module *const usart_module)
{
    2e04:	b510      	push	{r4, lr}
	char temp = 0x00;
	usart_read_buffer_job(&usart_instance, (uint8_t*)&rx_buf, 1);
    2e06:	4c07      	ldr	r4, [pc, #28]	; (2e24 <usart_read_callback+0x20>)
    2e08:	2201      	movs	r2, #1
    2e0a:	0021      	movs	r1, r4
    2e0c:	4806      	ldr	r0, [pc, #24]	; (2e28 <usart_read_callback+0x24>)
    2e0e:	4b07      	ldr	r3, [pc, #28]	; (2e2c <usart_read_callback+0x28>)
    2e10:	4798      	blx	r3
	
	temp = rx_buf;

	drawChar(temp);
    2e12:	7820      	ldrb	r0, [r4, #0]
    2e14:	4b06      	ldr	r3, [pc, #24]	; (2e30 <usart_read_callback+0x2c>)
    2e16:	4798      	blx	r3
	xCharPos++;
    2e18:	4a06      	ldr	r2, [pc, #24]	; (2e34 <usart_read_callback+0x30>)
    2e1a:	8813      	ldrh	r3, [r2, #0]
    2e1c:	3301      	adds	r3, #1
    2e1e:	8013      	strh	r3, [r2, #0]
}
    2e20:	bd10      	pop	{r4, pc}
    2e22:	46c0      	nop			; (mov r8, r8)
    2e24:	20000a90 	.word	0x20000a90
    2e28:	200002d0 	.word	0x200002d0
    2e2c:	000012d5 	.word	0x000012d5
    2e30:	00001ddd 	.word	0x00001ddd
    2e34:	20000298 	.word	0x20000298

00002e38 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    2e38:	b570      	push	{r4, r5, r6, lr}
    2e3a:	b082      	sub	sp, #8
    2e3c:	0005      	movs	r5, r0
    2e3e:	000e      	movs	r6, r1
	uint16_t temp = 0;
    2e40:	2200      	movs	r2, #0
    2e42:	466b      	mov	r3, sp
    2e44:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    2e46:	4c06      	ldr	r4, [pc, #24]	; (2e60 <usart_serial_getchar+0x28>)
    2e48:	466b      	mov	r3, sp
    2e4a:	1d99      	adds	r1, r3, #6
    2e4c:	0028      	movs	r0, r5
    2e4e:	47a0      	blx	r4
    2e50:	2800      	cmp	r0, #0
    2e52:	d1f9      	bne.n	2e48 <usart_serial_getchar+0x10>

	*c = temp;
    2e54:	466b      	mov	r3, sp
    2e56:	3306      	adds	r3, #6
    2e58:	881b      	ldrh	r3, [r3, #0]
    2e5a:	7033      	strb	r3, [r6, #0]
}
    2e5c:	b002      	add	sp, #8
    2e5e:	bd70      	pop	{r4, r5, r6, pc}
    2e60:	00001203 	.word	0x00001203

00002e64 <usart_serial_putchar>:
{
    2e64:	b570      	push	{r4, r5, r6, lr}
    2e66:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    2e68:	b28c      	uxth	r4, r1
    2e6a:	4e03      	ldr	r6, [pc, #12]	; (2e78 <usart_serial_putchar+0x14>)
    2e6c:	0021      	movs	r1, r4
    2e6e:	0028      	movs	r0, r5
    2e70:	47b0      	blx	r6
    2e72:	2800      	cmp	r0, #0
    2e74:	d1fa      	bne.n	2e6c <usart_serial_putchar+0x8>
}
    2e76:	bd70      	pop	{r4, r5, r6, pc}
    2e78:	000011dd 	.word	0x000011dd

00002e7c <SysTick_Handler>:
	ul_tickcount++;
    2e7c:	4a02      	ldr	r2, [pc, #8]	; (2e88 <SysTick_Handler+0xc>)
    2e7e:	8813      	ldrh	r3, [r2, #0]
    2e80:	3301      	adds	r3, #1
    2e82:	8013      	strh	r3, [r2, #0]
}
    2e84:	4770      	bx	lr
    2e86:	46c0      	nop			; (mov r8, r8)
    2e88:	2000029e 	.word	0x2000029e

00002e8c <conf_systick>:
{
    2e8c:	b510      	push	{r4, lr}
	SysTick_Config(SystemCoreClock/1000);
    2e8e:	4b0e      	ldr	r3, [pc, #56]	; (2ec8 <conf_systick+0x3c>)
    2e90:	6818      	ldr	r0, [r3, #0]
    2e92:	21fa      	movs	r1, #250	; 0xfa
    2e94:	0089      	lsls	r1, r1, #2
    2e96:	4b0d      	ldr	r3, [pc, #52]	; (2ecc <conf_systick+0x40>)
    2e98:	4798      	blx	r3
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    2e9a:	3801      	subs	r0, #1
    2e9c:	4b0c      	ldr	r3, [pc, #48]	; (2ed0 <conf_systick+0x44>)
    2e9e:	4298      	cmp	r0, r3
    2ea0:	d80d      	bhi.n	2ebe <conf_systick+0x32>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    2ea2:	4a0c      	ldr	r2, [pc, #48]	; (2ed4 <conf_systick+0x48>)
    2ea4:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    2ea6:	480c      	ldr	r0, [pc, #48]	; (2ed8 <conf_systick+0x4c>)
    2ea8:	6a03      	ldr	r3, [r0, #32]
    2eaa:	021b      	lsls	r3, r3, #8
    2eac:	0a1b      	lsrs	r3, r3, #8
    2eae:	21c0      	movs	r1, #192	; 0xc0
    2eb0:	0609      	lsls	r1, r1, #24
    2eb2:	430b      	orrs	r3, r1
    2eb4:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    2eb6:	2300      	movs	r3, #0
    2eb8:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    2eba:	3307      	adds	r3, #7
    2ebc:	6013      	str	r3, [r2, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2ebe:	2280      	movs	r2, #128	; 0x80
    2ec0:	0612      	lsls	r2, r2, #24
    2ec2:	4b06      	ldr	r3, [pc, #24]	; (2edc <conf_systick+0x50>)
    2ec4:	601a      	str	r2, [r3, #0]
}
    2ec6:	bd10      	pop	{r4, pc}
    2ec8:	2000000c 	.word	0x2000000c
    2ecc:	00003211 	.word	0x00003211
    2ed0:	00ffffff 	.word	0x00ffffff
    2ed4:	e000e010 	.word	0xe000e010
    2ed8:	e000ed00 	.word	0xe000ed00
    2edc:	e000e100 	.word	0xe000e100

00002ee0 <configure_usart>:

/**************************SERCOM STUFF*******************************/


void configure_usart(void)
{
    2ee0:	b570      	push	{r4, r5, r6, lr}
    2ee2:	b090      	sub	sp, #64	; 0x40
	config->data_order       = USART_DATAORDER_LSB;
    2ee4:	2380      	movs	r3, #128	; 0x80
    2ee6:	05db      	lsls	r3, r3, #23
    2ee8:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    2eea:	2300      	movs	r3, #0
    2eec:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    2eee:	22ff      	movs	r2, #255	; 0xff
    2ef0:	4669      	mov	r1, sp
    2ef2:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    2ef4:	2200      	movs	r2, #0
    2ef6:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    2ef8:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
    2efa:	2196      	movs	r1, #150	; 0x96
    2efc:	0189      	lsls	r1, r1, #6
    2efe:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
    2f00:	2101      	movs	r1, #1
    2f02:	2024      	movs	r0, #36	; 0x24
    2f04:	466c      	mov	r4, sp
    2f06:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    2f08:	3001      	adds	r0, #1
    2f0a:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    2f0c:	3125      	adds	r1, #37	; 0x25
    2f0e:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    2f10:	3101      	adds	r1, #1
    2f12:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    2f14:	930a      	str	r3, [sp, #40]	; 0x28
	config->run_in_standby   = false;
    2f16:	3105      	adds	r1, #5
    2f18:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    2f1a:	3101      	adds	r1, #1
    2f1c:	5463      	strb	r3, [r4, r1]
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    2f1e:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    2f20:	8223      	strh	r3, [r4, #16]
	config->lin_slave_enable      = false;
    2f22:	76e3      	strb	r3, [r4, #27]
	config->immediate_buffer_overflow_notification  = false;
    2f24:	7622      	strb	r2, [r4, #24]
	config->start_frame_detection_enable            = false;
    2f26:	7722      	strb	r2, [r4, #28]
	config->encoding_format_enable                  = false;
    2f28:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    2f2a:	2313      	movs	r3, #19
    2f2c:	76a3      	strb	r3, [r4, #26]
	config->collision_detection_enable              = false;
    2f2e:	7762      	strb	r2, [r4, #29]
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);

	config_usart.baudrate    = 9600;
	config_usart.mux_setting = USART_RX_1_TX_0_XCK_1;
    2f30:	2380      	movs	r3, #128	; 0x80
    2f32:	035b      	lsls	r3, r3, #13
    2f34:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = PINMUX_PA08D_SERCOM2_PAD0;
    2f36:	4b1e      	ldr	r3, [pc, #120]	; (2fb0 <configure_usart+0xd0>)
    2f38:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = PINMUX_PA09D_SERCOM2_PAD1;
    2f3a:	4b1e      	ldr	r3, [pc, #120]	; (2fb4 <configure_usart+0xd4>)
    2f3c:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = PINMUX_UNUSED;
    2f3e:	2301      	movs	r3, #1
    2f40:	425b      	negs	r3, r3
    2f42:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = PINMUX_UNUSED;
    2f44:	930f      	str	r3, [sp, #60]	; 0x3c
	
	while (usart_init(&usart_instance, SERCOM2, &config_usart) != STATUS_OK) {
    2f46:	4d1c      	ldr	r5, [pc, #112]	; (2fb8 <configure_usart+0xd8>)
    2f48:	4c1c      	ldr	r4, [pc, #112]	; (2fbc <configure_usart+0xdc>)
    2f4a:	466a      	mov	r2, sp
    2f4c:	491c      	ldr	r1, [pc, #112]	; (2fc0 <configure_usart+0xe0>)
    2f4e:	0028      	movs	r0, r5
    2f50:	47a0      	blx	r4
    2f52:	2800      	cmp	r0, #0
    2f54:	d1f9      	bne.n	2f4a <configure_usart+0x6a>
	stdio_base = (void *)module;
    2f56:	4c18      	ldr	r4, [pc, #96]	; (2fb8 <configure_usart+0xd8>)
    2f58:	4b1a      	ldr	r3, [pc, #104]	; (2fc4 <configure_usart+0xe4>)
    2f5a:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    2f5c:	4a1a      	ldr	r2, [pc, #104]	; (2fc8 <configure_usart+0xe8>)
    2f5e:	4b1b      	ldr	r3, [pc, #108]	; (2fcc <configure_usart+0xec>)
    2f60:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    2f62:	4a1b      	ldr	r2, [pc, #108]	; (2fd0 <configure_usart+0xf0>)
    2f64:	4b1b      	ldr	r3, [pc, #108]	; (2fd4 <configure_usart+0xf4>)
    2f66:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    2f68:	466a      	mov	r2, sp
    2f6a:	4915      	ldr	r1, [pc, #84]	; (2fc0 <configure_usart+0xe0>)
    2f6c:	0020      	movs	r0, r4
    2f6e:	4b13      	ldr	r3, [pc, #76]	; (2fbc <configure_usart+0xdc>)
    2f70:	4798      	blx	r3
	setbuf(stdout, NULL);
    2f72:	4e19      	ldr	r6, [pc, #100]	; (2fd8 <configure_usart+0xf8>)
    2f74:	6833      	ldr	r3, [r6, #0]
    2f76:	6898      	ldr	r0, [r3, #8]
    2f78:	2100      	movs	r1, #0
    2f7a:	4d18      	ldr	r5, [pc, #96]	; (2fdc <configure_usart+0xfc>)
    2f7c:	47a8      	blx	r5
	setbuf(stdin, NULL);
    2f7e:	6833      	ldr	r3, [r6, #0]
    2f80:	6858      	ldr	r0, [r3, #4]
    2f82:	2100      	movs	r1, #0
    2f84:	47a8      	blx	r5
	SercomUsart *const usart_hw = &(module->hw->USART);
    2f86:	6825      	ldr	r5, [r4, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    2f88:	0028      	movs	r0, r5
    2f8a:	4b15      	ldr	r3, [pc, #84]	; (2fe0 <configure_usart+0x100>)
    2f8c:	4798      	blx	r3
    2f8e:	231f      	movs	r3, #31
    2f90:	4018      	ands	r0, r3
    2f92:	3b1e      	subs	r3, #30
    2f94:	4083      	lsls	r3, r0
    2f96:	4a13      	ldr	r2, [pc, #76]	; (2fe4 <configure_usart+0x104>)
    2f98:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2f9a:	6822      	ldr	r2, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
    2f9c:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2f9e:	2b00      	cmp	r3, #0
    2fa0:	d1fc      	bne.n	2f9c <configure_usart+0xbc>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    2fa2:	682b      	ldr	r3, [r5, #0]
    2fa4:	2202      	movs	r2, #2
    2fa6:	4313      	orrs	r3, r2
    2fa8:	602b      	str	r3, [r5, #0]
	}
	stdio_serial_init(&usart_instance, SERCOM2, &config_usart);
	usart_enable(&usart_instance);
}
    2faa:	b010      	add	sp, #64	; 0x40
    2fac:	bd70      	pop	{r4, r5, r6, pc}
    2fae:	46c0      	nop			; (mov r8, r8)
    2fb0:	00080003 	.word	0x00080003
    2fb4:	00090003 	.word	0x00090003
    2fb8:	200002d0 	.word	0x200002d0
    2fbc:	00000ea1 	.word	0x00000ea1
    2fc0:	42001000 	.word	0x42001000
    2fc4:	200002cc 	.word	0x200002cc
    2fc8:	00002e65 	.word	0x00002e65
    2fcc:	200002c8 	.word	0x200002c8
    2fd0:	00002e39 	.word	0x00002e39
    2fd4:	200002c4 	.word	0x200002c4
    2fd8:	20000158 	.word	0x20000158
    2fdc:	00003551 	.word	0x00003551
    2fe0:	00000e11 	.word	0x00000e11
    2fe4:	e000e100 	.word	0xe000e100

00002fe8 <configure_usart_callbacks>:

void configure_usart_callbacks(void)
{
    2fe8:	b510      	push	{r4, lr}
	usart_register_callback(&usart_instance,usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
    2fea:	4c06      	ldr	r4, [pc, #24]	; (3004 <configure_usart_callbacks+0x1c>)
    2fec:	2201      	movs	r2, #1
    2fee:	4906      	ldr	r1, [pc, #24]	; (3008 <configure_usart_callbacks+0x20>)
    2ff0:	0020      	movs	r0, r4
    2ff2:	4b06      	ldr	r3, [pc, #24]	; (300c <configure_usart_callbacks+0x24>)
    2ff4:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    2ff6:	2231      	movs	r2, #49	; 0x31
    2ff8:	5ca3      	ldrb	r3, [r4, r2]
    2ffa:	2102      	movs	r1, #2
    2ffc:	430b      	orrs	r3, r1
    2ffe:	54a3      	strb	r3, [r4, r2]
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
}
    3000:	bd10      	pop	{r4, pc}
    3002:	46c0      	nop			; (mov r8, r8)
    3004:	200002d0 	.word	0x200002d0
    3008:	00002e05 	.word	0x00002e05
    300c:	000012bd 	.word	0x000012bd

00003010 <configure_adc>:
	usart_enable(&usart_USB);
}
*/

void configure_adc(void)
{
    3010:	b510      	push	{r4, lr}
    3012:	b08c      	sub	sp, #48	; 0x30
	struct adc_config config_adc;
	adc_get_config_defaults(&config_adc);
    3014:	4668      	mov	r0, sp
    3016:	4b11      	ldr	r3, [pc, #68]	; (305c <configure_adc+0x4c>)
    3018:	4798      	blx	r3
	config_adc.positive_input = ADC_POSITIVE_INPUT_DAC;
    301a:	231c      	movs	r3, #28
    301c:	466a      	mov	r2, sp
    301e:	7313      	strb	r3, [r2, #12]
	adc_init(&adc_instance, ADC, &config_adc);
    3020:	4c0f      	ldr	r4, [pc, #60]	; (3060 <configure_adc+0x50>)
    3022:	4910      	ldr	r1, [pc, #64]	; (3064 <configure_adc+0x54>)
    3024:	0020      	movs	r0, r4
    3026:	4b10      	ldr	r3, [pc, #64]	; (3068 <configure_adc+0x58>)
    3028:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    302a:	6822      	ldr	r2, [r4, #0]
    302c:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    302e:	b25b      	sxtb	r3, r3
    3030:	2b00      	cmp	r3, #0
    3032:	dbfb      	blt.n	302c <configure_adc+0x1c>
    3034:	2180      	movs	r1, #128	; 0x80
    3036:	0409      	lsls	r1, r1, #16
    3038:	4b0c      	ldr	r3, [pc, #48]	; (306c <configure_adc+0x5c>)
    303a:	6019      	str	r1, [r3, #0]
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    303c:	230f      	movs	r3, #15
    303e:	7593      	strb	r3, [r2, #22]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    3040:	7613      	strb	r3, [r2, #24]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    3042:	7813      	ldrb	r3, [r2, #0]
    3044:	2102      	movs	r1, #2
    3046:	430b      	orrs	r3, r1
    3048:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
    304a:	4b05      	ldr	r3, [pc, #20]	; (3060 <configure_adc+0x50>)
    304c:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    304e:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    3050:	b25b      	sxtb	r3, r3
    3052:	2b00      	cmp	r3, #0
    3054:	dbfb      	blt.n	304e <configure_adc+0x3e>
	adc_enable(&adc_instance);
}
    3056:	b00c      	add	sp, #48	; 0x30
    3058:	bd10      	pop	{r4, pc}
    305a:	46c0      	nop			; (mov r8, r8)
    305c:	00000509 	.word	0x00000509
    3060:	20000a94 	.word	0x20000a94
    3064:	42004000 	.word	0x42004000
    3068:	0000054d 	.word	0x0000054d
    306c:	e000e100 	.word	0xe000e100

00003070 <setupBoard>:



void setupBoard(void)
{
    3070:	b570      	push	{r4, r5, r6, lr}
	uint16_t adcResult;

	system_init();
    3072:	4b30      	ldr	r3, [pc, #192]	; (3134 <setupBoard+0xc4>)
    3074:	4798      	blx	r3
	
	configure_adc();
    3076:	4b30      	ldr	r3, [pc, #192]	; (3138 <setupBoard+0xc8>)
    3078:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    307a:	4b30      	ldr	r3, [pc, #192]	; (313c <setupBoard+0xcc>)
    307c:	6819      	ldr	r1, [r3, #0]
    307e:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    3080:	b25b      	sxtb	r3, r3
    3082:	2b00      	cmp	r3, #0
    3084:	dbfb      	blt.n	307e <setupBoard+0xe>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    3086:	7b0b      	ldrb	r3, [r1, #12]
    3088:	2202      	movs	r2, #2
    308a:	4313      	orrs	r3, r2
    308c:	730b      	strb	r3, [r1, #12]
    308e:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    3090:	b25b      	sxtb	r3, r3
    3092:	2b00      	cmp	r3, #0
    3094:	dbfb      	blt.n	308e <setupBoard+0x1e>
	if (int_flags & ADC_INTFLAG_RESRDY) {
    3096:	2001      	movs	r0, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
    3098:	2504      	movs	r5, #4
		status_flags |= ADC_STATUS_WINDOW;
    309a:	2402      	movs	r4, #2
    309c:	e001      	b.n	30a2 <setupBoard+0x32>
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    309e:	4210      	tst	r0, r2
    30a0:	d10a      	bne.n	30b8 <setupBoard+0x48>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    30a2:	7e0b      	ldrb	r3, [r1, #24]
    30a4:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
    30a6:	0002      	movs	r2, r0
    30a8:	401a      	ands	r2, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
    30aa:	421d      	tst	r5, r3
    30ac:	d000      	beq.n	30b0 <setupBoard+0x40>
		status_flags |= ADC_STATUS_WINDOW;
    30ae:	4322      	orrs	r2, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    30b0:	421c      	tst	r4, r3
    30b2:	d0f4      	beq.n	309e <setupBoard+0x2e>
		status_flags |= ADC_STATUS_OVERRUN;
    30b4:	432a      	orrs	r2, r5
    30b6:	e7f2      	b.n	309e <setupBoard+0x2e>
    30b8:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    30ba:	b25b      	sxtb	r3, r3
    30bc:	2b00      	cmp	r3, #0
    30be:	dbfb      	blt.n	30b8 <setupBoard+0x48>
	*result = adc_module->RESULT.reg;
    30c0:	8b4c      	ldrh	r4, [r1, #26]
    30c2:	b2a4      	uxth	r4, r4
	adc_module->INTFLAG.reg = int_flags;
    30c4:	2301      	movs	r3, #1
    30c6:	760b      	strb	r3, [r1, #24]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    30c8:	7e0a      	ldrb	r2, [r1, #24]
    30ca:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    30cc:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    30ce:	0750      	lsls	r0, r2, #29
    30d0:	d501      	bpl.n	30d6 <setupBoard+0x66>
		status_flags |= ADC_STATUS_WINDOW;
    30d2:	2002      	movs	r0, #2
    30d4:	4303      	orrs	r3, r0
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    30d6:	0792      	lsls	r2, r2, #30
    30d8:	d501      	bpl.n	30de <setupBoard+0x6e>
		status_flags |= ADC_STATUS_OVERRUN;
    30da:	2204      	movs	r2, #4
    30dc:	4313      	orrs	r3, r2
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    30de:	075b      	lsls	r3, r3, #29
    30e0:	d501      	bpl.n	30e6 <setupBoard+0x76>
	adc_module->INTFLAG.reg = int_flags;
    30e2:	2302      	movs	r3, #2
    30e4:	760b      	strb	r3, [r1, #24]
	adc_start_conversion(&adc_instance);
	do {
		/* Wait for conversion to be done and read out result */
	} while (adc_read(&adc_instance, &adcResult) == STATUS_BUSY);
	
	delay_init();
    30e6:	4b16      	ldr	r3, [pc, #88]	; (3140 <setupBoard+0xd0>)
    30e8:	4798      	blx	r3
	srand(adcResult);
    30ea:	0020      	movs	r0, r4
    30ec:	4b15      	ldr	r3, [pc, #84]	; (3144 <setupBoard+0xd4>)
    30ee:	4798      	blx	r3
	//configure_usart_USB();

	//configure_console();
	//printf("Serial OK 9600 8N1\n\r");
	configure_usart();
    30f0:	4b15      	ldr	r3, [pc, #84]	; (3148 <setupBoard+0xd8>)
    30f2:	4798      	blx	r3
	configure_usart_callbacks();
    30f4:	4b15      	ldr	r3, [pc, #84]	; (314c <setupBoard+0xdc>)
    30f6:	4798      	blx	r3
	cpu_irq_enable();
    30f8:	2201      	movs	r2, #1
    30fa:	4b15      	ldr	r3, [pc, #84]	; (3150 <setupBoard+0xe0>)
    30fc:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    30fe:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3102:	b662      	cpsie	i
	system_interrupt_enable_global();
	printf("Serial OK 9600 8N1\n\r");
    3104:	4813      	ldr	r0, [pc, #76]	; (3154 <setupBoard+0xe4>)
    3106:	4b14      	ldr	r3, [pc, #80]	; (3158 <setupBoard+0xe8>)
    3108:	4798      	blx	r3
	usart_read_buffer_job(&usart_instance, (uint8_t*)&rx_buf, 1);
    310a:	2201      	movs	r2, #1
    310c:	4913      	ldr	r1, [pc, #76]	; (315c <setupBoard+0xec>)
    310e:	4814      	ldr	r0, [pc, #80]	; (3160 <setupBoard+0xf0>)
    3110:	4b14      	ldr	r3, [pc, #80]	; (3164 <setupBoard+0xf4>)
    3112:	4798      	blx	r3
	
	InitLCD();
    3114:	4b14      	ldr	r3, [pc, #80]	; (3168 <setupBoard+0xf8>)
    3116:	4798      	blx	r3
	splashScreen();
    3118:	4b14      	ldr	r3, [pc, #80]	; (316c <setupBoard+0xfc>)
    311a:	4798      	blx	r3
			
	conf_systick();
    311c:	4b14      	ldr	r3, [pc, #80]	; (3170 <setupBoard+0x100>)
    311e:	4798      	blx	r3

	xCharPos=0;
    3120:	2300      	movs	r3, #0
    3122:	4a14      	ldr	r2, [pc, #80]	; (3174 <setupBoard+0x104>)
    3124:	8013      	strh	r3, [r2, #0]
	yCharPos=0;
    3126:	4a14      	ldr	r2, [pc, #80]	; (3178 <setupBoard+0x108>)
    3128:	8013      	strh	r3, [r2, #0]
	drawChar(0xFF);
    312a:	20ff      	movs	r0, #255	; 0xff
    312c:	4b13      	ldr	r3, [pc, #76]	; (317c <setupBoard+0x10c>)
    312e:	4798      	blx	r3
}
    3130:	bd70      	pop	{r4, r5, r6, pc}
    3132:	46c0      	nop			; (mov r8, r8)
    3134:	00001bf9 	.word	0x00001bf9
    3138:	00003011 	.word	0x00003011
    313c:	20000a94 	.word	0x20000a94
    3140:	000003f5 	.word	0x000003f5
    3144:	0000347d 	.word	0x0000347d
    3148:	00002ee1 	.word	0x00002ee1
    314c:	00002fe9 	.word	0x00002fe9
    3150:	20000008 	.word	0x20000008
    3154:	00006768 	.word	0x00006768
    3158:	00003421 	.word	0x00003421
    315c:	20000a90 	.word	0x20000a90
    3160:	200002d0 	.word	0x200002d0
    3164:	000012d5 	.word	0x000012d5
    3168:	00002bb9 	.word	0x00002bb9
    316c:	000001e5 	.word	0x000001e5
    3170:	00002e8d 	.word	0x00002e8d
    3174:	20000298 	.word	0x20000298
    3178:	2000029a 	.word	0x2000029a
    317c:	00001ddd 	.word	0x00001ddd

00003180 <main>:
{
    3180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	setupBoard();
    3182:	4b1b      	ldr	r3, [pc, #108]	; (31f0 <main+0x70>)
    3184:	4798      	blx	r3
		if((ul_tickcount % (UINT16_MAX/4) == 0) && (funcLock == false))
    3186:	4f1b      	ldr	r7, [pc, #108]	; (31f4 <main+0x74>)
    3188:	4e1b      	ldr	r6, [pc, #108]	; (31f8 <main+0x78>)
    318a:	4d1c      	ldr	r5, [pc, #112]	; (31fc <main+0x7c>)
    318c:	e013      	b.n	31b6 <main+0x36>
		if((ul_tickcount % 200 == 0) && (funcLock == false))
    318e:	21c8      	movs	r1, #200	; 0xc8
    3190:	0020      	movs	r0, r4
    3192:	4b19      	ldr	r3, [pc, #100]	; (31f8 <main+0x78>)
    3194:	4798      	blx	r3
    3196:	b289      	uxth	r1, r1
    3198:	2900      	cmp	r1, #0
    319a:	d10c      	bne.n	31b6 <main+0x36>
    319c:	4b18      	ldr	r3, [pc, #96]	; (3200 <main+0x80>)
    319e:	781b      	ldrb	r3, [r3, #0]
    31a0:	2b00      	cmp	r3, #0
    31a2:	d108      	bne.n	31b6 <main+0x36>
			funcLock = true;
    31a4:	4c16      	ldr	r4, [pc, #88]	; (3200 <main+0x80>)
    31a6:	2301      	movs	r3, #1
    31a8:	7023      	strb	r3, [r4, #0]
			readKeyboard();
    31aa:	4b16      	ldr	r3, [pc, #88]	; (3204 <main+0x84>)
    31ac:	4798      	blx	r3
			printKeyboardBuffer();
    31ae:	4b16      	ldr	r3, [pc, #88]	; (3208 <main+0x88>)
    31b0:	4798      	blx	r3
			funcLock = false;
    31b2:	2300      	movs	r3, #0
    31b4:	7023      	strb	r3, [r4, #0]
		__WFI();
    31b6:	bf30      	wfi
		if((ul_tickcount % (UINT16_MAX/4) == 0) && (funcLock == false))
    31b8:	883c      	ldrh	r4, [r7, #0]
    31ba:	0029      	movs	r1, r5
    31bc:	0020      	movs	r0, r4
    31be:	47b0      	blx	r6
    31c0:	b289      	uxth	r1, r1
    31c2:	2900      	cmp	r1, #0
    31c4:	d1e3      	bne.n	318e <main+0xe>
    31c6:	4b0e      	ldr	r3, [pc, #56]	; (3200 <main+0x80>)
    31c8:	781b      	ldrb	r3, [r3, #0]
    31ca:	2b00      	cmp	r3, #0
    31cc:	d1f3      	bne.n	31b6 <main+0x36>
			funcLock = true;
    31ce:	4c0c      	ldr	r4, [pc, #48]	; (3200 <main+0x80>)
    31d0:	3301      	adds	r3, #1
    31d2:	7023      	strb	r3, [r4, #0]
			blinkCursor();
    31d4:	4b0d      	ldr	r3, [pc, #52]	; (320c <main+0x8c>)
    31d6:	4798      	blx	r3
			funcLock = false;
    31d8:	2300      	movs	r3, #0
    31da:	7023      	strb	r3, [r4, #0]
		if((ul_tickcount % 200 == 0) && (funcLock == false))
    31dc:	4b05      	ldr	r3, [pc, #20]	; (31f4 <main+0x74>)
    31de:	8818      	ldrh	r0, [r3, #0]
    31e0:	21c8      	movs	r1, #200	; 0xc8
    31e2:	4b05      	ldr	r3, [pc, #20]	; (31f8 <main+0x78>)
    31e4:	4798      	blx	r3
    31e6:	b289      	uxth	r1, r1
    31e8:	2900      	cmp	r1, #0
    31ea:	d0db      	beq.n	31a4 <main+0x24>
    31ec:	e7e3      	b.n	31b6 <main+0x36>
    31ee:	46c0      	nop			; (mov r8, r8)
    31f0:	00003071 	.word	0x00003071
    31f4:	2000029e 	.word	0x2000029e
    31f8:	0000331d 	.word	0x0000331d
    31fc:	00003fff 	.word	0x00003fff
    3200:	2000029c 	.word	0x2000029c
    3204:	0000267d 	.word	0x0000267d
    3208:	00002271 	.word	0x00002271
    320c:	00002075 	.word	0x00002075

00003210 <__udivsi3>:
    3210:	2200      	movs	r2, #0
    3212:	0843      	lsrs	r3, r0, #1
    3214:	428b      	cmp	r3, r1
    3216:	d374      	bcc.n	3302 <__udivsi3+0xf2>
    3218:	0903      	lsrs	r3, r0, #4
    321a:	428b      	cmp	r3, r1
    321c:	d35f      	bcc.n	32de <__udivsi3+0xce>
    321e:	0a03      	lsrs	r3, r0, #8
    3220:	428b      	cmp	r3, r1
    3222:	d344      	bcc.n	32ae <__udivsi3+0x9e>
    3224:	0b03      	lsrs	r3, r0, #12
    3226:	428b      	cmp	r3, r1
    3228:	d328      	bcc.n	327c <__udivsi3+0x6c>
    322a:	0c03      	lsrs	r3, r0, #16
    322c:	428b      	cmp	r3, r1
    322e:	d30d      	bcc.n	324c <__udivsi3+0x3c>
    3230:	22ff      	movs	r2, #255	; 0xff
    3232:	0209      	lsls	r1, r1, #8
    3234:	ba12      	rev	r2, r2
    3236:	0c03      	lsrs	r3, r0, #16
    3238:	428b      	cmp	r3, r1
    323a:	d302      	bcc.n	3242 <__udivsi3+0x32>
    323c:	1212      	asrs	r2, r2, #8
    323e:	0209      	lsls	r1, r1, #8
    3240:	d065      	beq.n	330e <__udivsi3+0xfe>
    3242:	0b03      	lsrs	r3, r0, #12
    3244:	428b      	cmp	r3, r1
    3246:	d319      	bcc.n	327c <__udivsi3+0x6c>
    3248:	e000      	b.n	324c <__udivsi3+0x3c>
    324a:	0a09      	lsrs	r1, r1, #8
    324c:	0bc3      	lsrs	r3, r0, #15
    324e:	428b      	cmp	r3, r1
    3250:	d301      	bcc.n	3256 <__udivsi3+0x46>
    3252:	03cb      	lsls	r3, r1, #15
    3254:	1ac0      	subs	r0, r0, r3
    3256:	4152      	adcs	r2, r2
    3258:	0b83      	lsrs	r3, r0, #14
    325a:	428b      	cmp	r3, r1
    325c:	d301      	bcc.n	3262 <__udivsi3+0x52>
    325e:	038b      	lsls	r3, r1, #14
    3260:	1ac0      	subs	r0, r0, r3
    3262:	4152      	adcs	r2, r2
    3264:	0b43      	lsrs	r3, r0, #13
    3266:	428b      	cmp	r3, r1
    3268:	d301      	bcc.n	326e <__udivsi3+0x5e>
    326a:	034b      	lsls	r3, r1, #13
    326c:	1ac0      	subs	r0, r0, r3
    326e:	4152      	adcs	r2, r2
    3270:	0b03      	lsrs	r3, r0, #12
    3272:	428b      	cmp	r3, r1
    3274:	d301      	bcc.n	327a <__udivsi3+0x6a>
    3276:	030b      	lsls	r3, r1, #12
    3278:	1ac0      	subs	r0, r0, r3
    327a:	4152      	adcs	r2, r2
    327c:	0ac3      	lsrs	r3, r0, #11
    327e:	428b      	cmp	r3, r1
    3280:	d301      	bcc.n	3286 <__udivsi3+0x76>
    3282:	02cb      	lsls	r3, r1, #11
    3284:	1ac0      	subs	r0, r0, r3
    3286:	4152      	adcs	r2, r2
    3288:	0a83      	lsrs	r3, r0, #10
    328a:	428b      	cmp	r3, r1
    328c:	d301      	bcc.n	3292 <__udivsi3+0x82>
    328e:	028b      	lsls	r3, r1, #10
    3290:	1ac0      	subs	r0, r0, r3
    3292:	4152      	adcs	r2, r2
    3294:	0a43      	lsrs	r3, r0, #9
    3296:	428b      	cmp	r3, r1
    3298:	d301      	bcc.n	329e <__udivsi3+0x8e>
    329a:	024b      	lsls	r3, r1, #9
    329c:	1ac0      	subs	r0, r0, r3
    329e:	4152      	adcs	r2, r2
    32a0:	0a03      	lsrs	r3, r0, #8
    32a2:	428b      	cmp	r3, r1
    32a4:	d301      	bcc.n	32aa <__udivsi3+0x9a>
    32a6:	020b      	lsls	r3, r1, #8
    32a8:	1ac0      	subs	r0, r0, r3
    32aa:	4152      	adcs	r2, r2
    32ac:	d2cd      	bcs.n	324a <__udivsi3+0x3a>
    32ae:	09c3      	lsrs	r3, r0, #7
    32b0:	428b      	cmp	r3, r1
    32b2:	d301      	bcc.n	32b8 <__udivsi3+0xa8>
    32b4:	01cb      	lsls	r3, r1, #7
    32b6:	1ac0      	subs	r0, r0, r3
    32b8:	4152      	adcs	r2, r2
    32ba:	0983      	lsrs	r3, r0, #6
    32bc:	428b      	cmp	r3, r1
    32be:	d301      	bcc.n	32c4 <__udivsi3+0xb4>
    32c0:	018b      	lsls	r3, r1, #6
    32c2:	1ac0      	subs	r0, r0, r3
    32c4:	4152      	adcs	r2, r2
    32c6:	0943      	lsrs	r3, r0, #5
    32c8:	428b      	cmp	r3, r1
    32ca:	d301      	bcc.n	32d0 <__udivsi3+0xc0>
    32cc:	014b      	lsls	r3, r1, #5
    32ce:	1ac0      	subs	r0, r0, r3
    32d0:	4152      	adcs	r2, r2
    32d2:	0903      	lsrs	r3, r0, #4
    32d4:	428b      	cmp	r3, r1
    32d6:	d301      	bcc.n	32dc <__udivsi3+0xcc>
    32d8:	010b      	lsls	r3, r1, #4
    32da:	1ac0      	subs	r0, r0, r3
    32dc:	4152      	adcs	r2, r2
    32de:	08c3      	lsrs	r3, r0, #3
    32e0:	428b      	cmp	r3, r1
    32e2:	d301      	bcc.n	32e8 <__udivsi3+0xd8>
    32e4:	00cb      	lsls	r3, r1, #3
    32e6:	1ac0      	subs	r0, r0, r3
    32e8:	4152      	adcs	r2, r2
    32ea:	0883      	lsrs	r3, r0, #2
    32ec:	428b      	cmp	r3, r1
    32ee:	d301      	bcc.n	32f4 <__udivsi3+0xe4>
    32f0:	008b      	lsls	r3, r1, #2
    32f2:	1ac0      	subs	r0, r0, r3
    32f4:	4152      	adcs	r2, r2
    32f6:	0843      	lsrs	r3, r0, #1
    32f8:	428b      	cmp	r3, r1
    32fa:	d301      	bcc.n	3300 <__udivsi3+0xf0>
    32fc:	004b      	lsls	r3, r1, #1
    32fe:	1ac0      	subs	r0, r0, r3
    3300:	4152      	adcs	r2, r2
    3302:	1a41      	subs	r1, r0, r1
    3304:	d200      	bcs.n	3308 <__udivsi3+0xf8>
    3306:	4601      	mov	r1, r0
    3308:	4152      	adcs	r2, r2
    330a:	4610      	mov	r0, r2
    330c:	4770      	bx	lr
    330e:	e7ff      	b.n	3310 <__udivsi3+0x100>
    3310:	b501      	push	{r0, lr}
    3312:	2000      	movs	r0, #0
    3314:	f000 f806 	bl	3324 <__aeabi_idiv0>
    3318:	bd02      	pop	{r1, pc}
    331a:	46c0      	nop			; (mov r8, r8)

0000331c <__aeabi_uidivmod>:
    331c:	2900      	cmp	r1, #0
    331e:	d0f7      	beq.n	3310 <__udivsi3+0x100>
    3320:	e776      	b.n	3210 <__udivsi3>
    3322:	4770      	bx	lr

00003324 <__aeabi_idiv0>:
    3324:	4770      	bx	lr
    3326:	46c0      	nop			; (mov r8, r8)

00003328 <__aeabi_lmul>:
    3328:	b5f0      	push	{r4, r5, r6, r7, lr}
    332a:	46ce      	mov	lr, r9
    332c:	4647      	mov	r7, r8
    332e:	0415      	lsls	r5, r2, #16
    3330:	0c2d      	lsrs	r5, r5, #16
    3332:	002e      	movs	r6, r5
    3334:	b580      	push	{r7, lr}
    3336:	0407      	lsls	r7, r0, #16
    3338:	0c14      	lsrs	r4, r2, #16
    333a:	0c3f      	lsrs	r7, r7, #16
    333c:	4699      	mov	r9, r3
    333e:	0c03      	lsrs	r3, r0, #16
    3340:	437e      	muls	r6, r7
    3342:	435d      	muls	r5, r3
    3344:	4367      	muls	r7, r4
    3346:	4363      	muls	r3, r4
    3348:	197f      	adds	r7, r7, r5
    334a:	0c34      	lsrs	r4, r6, #16
    334c:	19e4      	adds	r4, r4, r7
    334e:	469c      	mov	ip, r3
    3350:	42a5      	cmp	r5, r4
    3352:	d903      	bls.n	335c <__aeabi_lmul+0x34>
    3354:	2380      	movs	r3, #128	; 0x80
    3356:	025b      	lsls	r3, r3, #9
    3358:	4698      	mov	r8, r3
    335a:	44c4      	add	ip, r8
    335c:	464b      	mov	r3, r9
    335e:	4351      	muls	r1, r2
    3360:	4343      	muls	r3, r0
    3362:	0436      	lsls	r6, r6, #16
    3364:	0c36      	lsrs	r6, r6, #16
    3366:	0c25      	lsrs	r5, r4, #16
    3368:	0424      	lsls	r4, r4, #16
    336a:	4465      	add	r5, ip
    336c:	19a4      	adds	r4, r4, r6
    336e:	1859      	adds	r1, r3, r1
    3370:	1949      	adds	r1, r1, r5
    3372:	0020      	movs	r0, r4
    3374:	bc0c      	pop	{r2, r3}
    3376:	4690      	mov	r8, r2
    3378:	4699      	mov	r9, r3
    337a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000337c <__libc_init_array>:
    337c:	b570      	push	{r4, r5, r6, lr}
    337e:	2600      	movs	r6, #0
    3380:	4d0c      	ldr	r5, [pc, #48]	; (33b4 <__libc_init_array+0x38>)
    3382:	4c0d      	ldr	r4, [pc, #52]	; (33b8 <__libc_init_array+0x3c>)
    3384:	1b64      	subs	r4, r4, r5
    3386:	10a4      	asrs	r4, r4, #2
    3388:	42a6      	cmp	r6, r4
    338a:	d109      	bne.n	33a0 <__libc_init_array+0x24>
    338c:	2600      	movs	r6, #0
    338e:	f003 fa57 	bl	6840 <_init>
    3392:	4d0a      	ldr	r5, [pc, #40]	; (33bc <__libc_init_array+0x40>)
    3394:	4c0a      	ldr	r4, [pc, #40]	; (33c0 <__libc_init_array+0x44>)
    3396:	1b64      	subs	r4, r4, r5
    3398:	10a4      	asrs	r4, r4, #2
    339a:	42a6      	cmp	r6, r4
    339c:	d105      	bne.n	33aa <__libc_init_array+0x2e>
    339e:	bd70      	pop	{r4, r5, r6, pc}
    33a0:	00b3      	lsls	r3, r6, #2
    33a2:	58eb      	ldr	r3, [r5, r3]
    33a4:	4798      	blx	r3
    33a6:	3601      	adds	r6, #1
    33a8:	e7ee      	b.n	3388 <__libc_init_array+0xc>
    33aa:	00b3      	lsls	r3, r6, #2
    33ac:	58eb      	ldr	r3, [r5, r3]
    33ae:	4798      	blx	r3
    33b0:	3601      	adds	r6, #1
    33b2:	e7f2      	b.n	339a <__libc_init_array+0x1e>
    33b4:	0000684c 	.word	0x0000684c
    33b8:	0000684c 	.word	0x0000684c
    33bc:	0000684c 	.word	0x0000684c
    33c0:	00006850 	.word	0x00006850

000033c4 <__itoa>:
    33c4:	1e93      	subs	r3, r2, #2
    33c6:	b510      	push	{r4, lr}
    33c8:	000c      	movs	r4, r1
    33ca:	2b22      	cmp	r3, #34	; 0x22
    33cc:	d904      	bls.n	33d8 <__itoa+0x14>
    33ce:	2300      	movs	r3, #0
    33d0:	001c      	movs	r4, r3
    33d2:	700b      	strb	r3, [r1, #0]
    33d4:	0020      	movs	r0, r4
    33d6:	bd10      	pop	{r4, pc}
    33d8:	2a0a      	cmp	r2, #10
    33da:	d109      	bne.n	33f0 <__itoa+0x2c>
    33dc:	2800      	cmp	r0, #0
    33de:	da07      	bge.n	33f0 <__itoa+0x2c>
    33e0:	232d      	movs	r3, #45	; 0x2d
    33e2:	700b      	strb	r3, [r1, #0]
    33e4:	2101      	movs	r1, #1
    33e6:	4240      	negs	r0, r0
    33e8:	1861      	adds	r1, r4, r1
    33ea:	f000 f96f 	bl	36cc <__utoa>
    33ee:	e7f1      	b.n	33d4 <__itoa+0x10>
    33f0:	2100      	movs	r1, #0
    33f2:	e7f9      	b.n	33e8 <__itoa+0x24>

000033f4 <itoa>:
    33f4:	b510      	push	{r4, lr}
    33f6:	f7ff ffe5 	bl	33c4 <__itoa>
    33fa:	bd10      	pop	{r4, pc}

000033fc <memcpy>:
    33fc:	2300      	movs	r3, #0
    33fe:	b510      	push	{r4, lr}
    3400:	429a      	cmp	r2, r3
    3402:	d100      	bne.n	3406 <memcpy+0xa>
    3404:	bd10      	pop	{r4, pc}
    3406:	5ccc      	ldrb	r4, [r1, r3]
    3408:	54c4      	strb	r4, [r0, r3]
    340a:	3301      	adds	r3, #1
    340c:	e7f8      	b.n	3400 <memcpy+0x4>

0000340e <memset>:
    340e:	0003      	movs	r3, r0
    3410:	1882      	adds	r2, r0, r2
    3412:	4293      	cmp	r3, r2
    3414:	d100      	bne.n	3418 <memset+0xa>
    3416:	4770      	bx	lr
    3418:	7019      	strb	r1, [r3, #0]
    341a:	3301      	adds	r3, #1
    341c:	e7f9      	b.n	3412 <memset+0x4>
	...

00003420 <iprintf>:
    3420:	b40f      	push	{r0, r1, r2, r3}
    3422:	4b0b      	ldr	r3, [pc, #44]	; (3450 <iprintf+0x30>)
    3424:	b513      	push	{r0, r1, r4, lr}
    3426:	681c      	ldr	r4, [r3, #0]
    3428:	2c00      	cmp	r4, #0
    342a:	d005      	beq.n	3438 <iprintf+0x18>
    342c:	69a3      	ldr	r3, [r4, #24]
    342e:	2b00      	cmp	r3, #0
    3430:	d102      	bne.n	3438 <iprintf+0x18>
    3432:	0020      	movs	r0, r4
    3434:	f000 fa7c 	bl	3930 <__sinit>
    3438:	ab05      	add	r3, sp, #20
    343a:	9a04      	ldr	r2, [sp, #16]
    343c:	68a1      	ldr	r1, [r4, #8]
    343e:	0020      	movs	r0, r4
    3440:	9301      	str	r3, [sp, #4]
    3442:	f000 fc51 	bl	3ce8 <_vfiprintf_r>
    3446:	bc16      	pop	{r1, r2, r4}
    3448:	bc08      	pop	{r3}
    344a:	b004      	add	sp, #16
    344c:	4718      	bx	r3
    344e:	46c0      	nop			; (mov r8, r8)
    3450:	20000158 	.word	0x20000158

00003454 <putchar>:
    3454:	4b08      	ldr	r3, [pc, #32]	; (3478 <putchar+0x24>)
    3456:	b570      	push	{r4, r5, r6, lr}
    3458:	681c      	ldr	r4, [r3, #0]
    345a:	0005      	movs	r5, r0
    345c:	2c00      	cmp	r4, #0
    345e:	d005      	beq.n	346c <putchar+0x18>
    3460:	69a3      	ldr	r3, [r4, #24]
    3462:	2b00      	cmp	r3, #0
    3464:	d102      	bne.n	346c <putchar+0x18>
    3466:	0020      	movs	r0, r4
    3468:	f000 fa62 	bl	3930 <__sinit>
    346c:	0029      	movs	r1, r5
    346e:	68a2      	ldr	r2, [r4, #8]
    3470:	0020      	movs	r0, r4
    3472:	f000 fedd 	bl	4230 <_putc_r>
    3476:	bd70      	pop	{r4, r5, r6, pc}
    3478:	20000158 	.word	0x20000158

0000347c <srand>:
    347c:	4b10      	ldr	r3, [pc, #64]	; (34c0 <srand+0x44>)
    347e:	b570      	push	{r4, r5, r6, lr}
    3480:	681c      	ldr	r4, [r3, #0]
    3482:	0005      	movs	r5, r0
    3484:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    3486:	2b00      	cmp	r3, #0
    3488:	d115      	bne.n	34b6 <srand+0x3a>
    348a:	2018      	movs	r0, #24
    348c:	f000 fb52 	bl	3b34 <malloc>
    3490:	4b0c      	ldr	r3, [pc, #48]	; (34c4 <srand+0x48>)
    3492:	63a0      	str	r0, [r4, #56]	; 0x38
    3494:	8003      	strh	r3, [r0, #0]
    3496:	4b0c      	ldr	r3, [pc, #48]	; (34c8 <srand+0x4c>)
    3498:	2201      	movs	r2, #1
    349a:	8043      	strh	r3, [r0, #2]
    349c:	4b0b      	ldr	r3, [pc, #44]	; (34cc <srand+0x50>)
    349e:	8083      	strh	r3, [r0, #4]
    34a0:	4b0b      	ldr	r3, [pc, #44]	; (34d0 <srand+0x54>)
    34a2:	80c3      	strh	r3, [r0, #6]
    34a4:	4b0b      	ldr	r3, [pc, #44]	; (34d4 <srand+0x58>)
    34a6:	8103      	strh	r3, [r0, #8]
    34a8:	2305      	movs	r3, #5
    34aa:	8143      	strh	r3, [r0, #10]
    34ac:	3306      	adds	r3, #6
    34ae:	8183      	strh	r3, [r0, #12]
    34b0:	2300      	movs	r3, #0
    34b2:	6102      	str	r2, [r0, #16]
    34b4:	6143      	str	r3, [r0, #20]
    34b6:	2200      	movs	r2, #0
    34b8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    34ba:	611d      	str	r5, [r3, #16]
    34bc:	615a      	str	r2, [r3, #20]
    34be:	bd70      	pop	{r4, r5, r6, pc}
    34c0:	20000158 	.word	0x20000158
    34c4:	0000330e 	.word	0x0000330e
    34c8:	ffffabcd 	.word	0xffffabcd
    34cc:	00001234 	.word	0x00001234
    34d0:	ffffe66d 	.word	0xffffe66d
    34d4:	ffffdeec 	.word	0xffffdeec

000034d8 <rand>:
    34d8:	4b15      	ldr	r3, [pc, #84]	; (3530 <rand+0x58>)
    34da:	b510      	push	{r4, lr}
    34dc:	681c      	ldr	r4, [r3, #0]
    34de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    34e0:	2b00      	cmp	r3, #0
    34e2:	d115      	bne.n	3510 <rand+0x38>
    34e4:	2018      	movs	r0, #24
    34e6:	f000 fb25 	bl	3b34 <malloc>
    34ea:	4b12      	ldr	r3, [pc, #72]	; (3534 <rand+0x5c>)
    34ec:	63a0      	str	r0, [r4, #56]	; 0x38
    34ee:	8003      	strh	r3, [r0, #0]
    34f0:	4b11      	ldr	r3, [pc, #68]	; (3538 <rand+0x60>)
    34f2:	2201      	movs	r2, #1
    34f4:	8043      	strh	r3, [r0, #2]
    34f6:	4b11      	ldr	r3, [pc, #68]	; (353c <rand+0x64>)
    34f8:	8083      	strh	r3, [r0, #4]
    34fa:	4b11      	ldr	r3, [pc, #68]	; (3540 <rand+0x68>)
    34fc:	80c3      	strh	r3, [r0, #6]
    34fe:	4b11      	ldr	r3, [pc, #68]	; (3544 <rand+0x6c>)
    3500:	8103      	strh	r3, [r0, #8]
    3502:	2305      	movs	r3, #5
    3504:	8143      	strh	r3, [r0, #10]
    3506:	3306      	adds	r3, #6
    3508:	8183      	strh	r3, [r0, #12]
    350a:	2300      	movs	r3, #0
    350c:	6102      	str	r2, [r0, #16]
    350e:	6143      	str	r3, [r0, #20]
    3510:	6ba4      	ldr	r4, [r4, #56]	; 0x38
    3512:	4a0d      	ldr	r2, [pc, #52]	; (3548 <rand+0x70>)
    3514:	6920      	ldr	r0, [r4, #16]
    3516:	6961      	ldr	r1, [r4, #20]
    3518:	4b0c      	ldr	r3, [pc, #48]	; (354c <rand+0x74>)
    351a:	f7ff ff05 	bl	3328 <__aeabi_lmul>
    351e:	2201      	movs	r2, #1
    3520:	2300      	movs	r3, #0
    3522:	1880      	adds	r0, r0, r2
    3524:	4159      	adcs	r1, r3
    3526:	6120      	str	r0, [r4, #16]
    3528:	6161      	str	r1, [r4, #20]
    352a:	0048      	lsls	r0, r1, #1
    352c:	0840      	lsrs	r0, r0, #1
    352e:	bd10      	pop	{r4, pc}
    3530:	20000158 	.word	0x20000158
    3534:	0000330e 	.word	0x0000330e
    3538:	ffffabcd 	.word	0xffffabcd
    353c:	00001234 	.word	0x00001234
    3540:	ffffe66d 	.word	0xffffe66d
    3544:	ffffdeec 	.word	0xffffdeec
    3548:	4c957f2d 	.word	0x4c957f2d
    354c:	5851f42d 	.word	0x5851f42d

00003550 <setbuf>:
    3550:	424a      	negs	r2, r1
    3552:	414a      	adcs	r2, r1
    3554:	2380      	movs	r3, #128	; 0x80
    3556:	b510      	push	{r4, lr}
    3558:	0052      	lsls	r2, r2, #1
    355a:	00db      	lsls	r3, r3, #3
    355c:	f000 f802 	bl	3564 <setvbuf>
    3560:	bd10      	pop	{r4, pc}
	...

00003564 <setvbuf>:
    3564:	b5f0      	push	{r4, r5, r6, r7, lr}
    3566:	001d      	movs	r5, r3
    3568:	4b4f      	ldr	r3, [pc, #316]	; (36a8 <setvbuf+0x144>)
    356a:	b085      	sub	sp, #20
    356c:	681e      	ldr	r6, [r3, #0]
    356e:	0004      	movs	r4, r0
    3570:	000f      	movs	r7, r1
    3572:	9200      	str	r2, [sp, #0]
    3574:	2e00      	cmp	r6, #0
    3576:	d005      	beq.n	3584 <setvbuf+0x20>
    3578:	69b3      	ldr	r3, [r6, #24]
    357a:	2b00      	cmp	r3, #0
    357c:	d102      	bne.n	3584 <setvbuf+0x20>
    357e:	0030      	movs	r0, r6
    3580:	f000 f9d6 	bl	3930 <__sinit>
    3584:	4b49      	ldr	r3, [pc, #292]	; (36ac <setvbuf+0x148>)
    3586:	429c      	cmp	r4, r3
    3588:	d150      	bne.n	362c <setvbuf+0xc8>
    358a:	6874      	ldr	r4, [r6, #4]
    358c:	9b00      	ldr	r3, [sp, #0]
    358e:	2b02      	cmp	r3, #2
    3590:	d005      	beq.n	359e <setvbuf+0x3a>
    3592:	2b01      	cmp	r3, #1
    3594:	d900      	bls.n	3598 <setvbuf+0x34>
    3596:	e084      	b.n	36a2 <setvbuf+0x13e>
    3598:	2d00      	cmp	r5, #0
    359a:	da00      	bge.n	359e <setvbuf+0x3a>
    359c:	e081      	b.n	36a2 <setvbuf+0x13e>
    359e:	0021      	movs	r1, r4
    35a0:	0030      	movs	r0, r6
    35a2:	f000 f957 	bl	3854 <_fflush_r>
    35a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
    35a8:	2900      	cmp	r1, #0
    35aa:	d008      	beq.n	35be <setvbuf+0x5a>
    35ac:	0023      	movs	r3, r4
    35ae:	3344      	adds	r3, #68	; 0x44
    35b0:	4299      	cmp	r1, r3
    35b2:	d002      	beq.n	35ba <setvbuf+0x56>
    35b4:	0030      	movs	r0, r6
    35b6:	f000 fac7 	bl	3b48 <_free_r>
    35ba:	2300      	movs	r3, #0
    35bc:	6363      	str	r3, [r4, #52]	; 0x34
    35be:	2300      	movs	r3, #0
    35c0:	61a3      	str	r3, [r4, #24]
    35c2:	6063      	str	r3, [r4, #4]
    35c4:	89a3      	ldrh	r3, [r4, #12]
    35c6:	061b      	lsls	r3, r3, #24
    35c8:	d503      	bpl.n	35d2 <setvbuf+0x6e>
    35ca:	6921      	ldr	r1, [r4, #16]
    35cc:	0030      	movs	r0, r6
    35ce:	f000 fabb 	bl	3b48 <_free_r>
    35d2:	89a3      	ldrh	r3, [r4, #12]
    35d4:	4a36      	ldr	r2, [pc, #216]	; (36b0 <setvbuf+0x14c>)
    35d6:	4013      	ands	r3, r2
    35d8:	81a3      	strh	r3, [r4, #12]
    35da:	9b00      	ldr	r3, [sp, #0]
    35dc:	2b02      	cmp	r3, #2
    35de:	d05a      	beq.n	3696 <setvbuf+0x132>
    35e0:	ab03      	add	r3, sp, #12
    35e2:	aa02      	add	r2, sp, #8
    35e4:	0021      	movs	r1, r4
    35e6:	0030      	movs	r0, r6
    35e8:	f000 fa38 	bl	3a5c <__swhatbuf_r>
    35ec:	89a3      	ldrh	r3, [r4, #12]
    35ee:	4318      	orrs	r0, r3
    35f0:	81a0      	strh	r0, [r4, #12]
    35f2:	2d00      	cmp	r5, #0
    35f4:	d124      	bne.n	3640 <setvbuf+0xdc>
    35f6:	9d02      	ldr	r5, [sp, #8]
    35f8:	0028      	movs	r0, r5
    35fa:	f000 fa9b 	bl	3b34 <malloc>
    35fe:	9501      	str	r5, [sp, #4]
    3600:	1e07      	subs	r7, r0, #0
    3602:	d142      	bne.n	368a <setvbuf+0x126>
    3604:	9b02      	ldr	r3, [sp, #8]
    3606:	9301      	str	r3, [sp, #4]
    3608:	42ab      	cmp	r3, r5
    360a:	d139      	bne.n	3680 <setvbuf+0x11c>
    360c:	2001      	movs	r0, #1
    360e:	4240      	negs	r0, r0
    3610:	2302      	movs	r3, #2
    3612:	89a2      	ldrh	r2, [r4, #12]
    3614:	4313      	orrs	r3, r2
    3616:	81a3      	strh	r3, [r4, #12]
    3618:	2300      	movs	r3, #0
    361a:	60a3      	str	r3, [r4, #8]
    361c:	0023      	movs	r3, r4
    361e:	3347      	adds	r3, #71	; 0x47
    3620:	6023      	str	r3, [r4, #0]
    3622:	6123      	str	r3, [r4, #16]
    3624:	2301      	movs	r3, #1
    3626:	6163      	str	r3, [r4, #20]
    3628:	b005      	add	sp, #20
    362a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    362c:	4b21      	ldr	r3, [pc, #132]	; (36b4 <setvbuf+0x150>)
    362e:	429c      	cmp	r4, r3
    3630:	d101      	bne.n	3636 <setvbuf+0xd2>
    3632:	68b4      	ldr	r4, [r6, #8]
    3634:	e7aa      	b.n	358c <setvbuf+0x28>
    3636:	4b20      	ldr	r3, [pc, #128]	; (36b8 <setvbuf+0x154>)
    3638:	429c      	cmp	r4, r3
    363a:	d1a7      	bne.n	358c <setvbuf+0x28>
    363c:	68f4      	ldr	r4, [r6, #12]
    363e:	e7a5      	b.n	358c <setvbuf+0x28>
    3640:	2f00      	cmp	r7, #0
    3642:	d0d9      	beq.n	35f8 <setvbuf+0x94>
    3644:	69b3      	ldr	r3, [r6, #24]
    3646:	2b00      	cmp	r3, #0
    3648:	d102      	bne.n	3650 <setvbuf+0xec>
    364a:	0030      	movs	r0, r6
    364c:	f000 f970 	bl	3930 <__sinit>
    3650:	9b00      	ldr	r3, [sp, #0]
    3652:	2b01      	cmp	r3, #1
    3654:	d103      	bne.n	365e <setvbuf+0xfa>
    3656:	89a3      	ldrh	r3, [r4, #12]
    3658:	9a00      	ldr	r2, [sp, #0]
    365a:	431a      	orrs	r2, r3
    365c:	81a2      	strh	r2, [r4, #12]
    365e:	2008      	movs	r0, #8
    3660:	89a3      	ldrh	r3, [r4, #12]
    3662:	6027      	str	r7, [r4, #0]
    3664:	6127      	str	r7, [r4, #16]
    3666:	6165      	str	r5, [r4, #20]
    3668:	4018      	ands	r0, r3
    366a:	d018      	beq.n	369e <setvbuf+0x13a>
    366c:	2001      	movs	r0, #1
    366e:	4018      	ands	r0, r3
    3670:	2300      	movs	r3, #0
    3672:	4298      	cmp	r0, r3
    3674:	d011      	beq.n	369a <setvbuf+0x136>
    3676:	426d      	negs	r5, r5
    3678:	60a3      	str	r3, [r4, #8]
    367a:	61a5      	str	r5, [r4, #24]
    367c:	0018      	movs	r0, r3
    367e:	e7d3      	b.n	3628 <setvbuf+0xc4>
    3680:	9801      	ldr	r0, [sp, #4]
    3682:	f000 fa57 	bl	3b34 <malloc>
    3686:	1e07      	subs	r7, r0, #0
    3688:	d0c0      	beq.n	360c <setvbuf+0xa8>
    368a:	2380      	movs	r3, #128	; 0x80
    368c:	89a2      	ldrh	r2, [r4, #12]
    368e:	9d01      	ldr	r5, [sp, #4]
    3690:	4313      	orrs	r3, r2
    3692:	81a3      	strh	r3, [r4, #12]
    3694:	e7d6      	b.n	3644 <setvbuf+0xe0>
    3696:	2000      	movs	r0, #0
    3698:	e7ba      	b.n	3610 <setvbuf+0xac>
    369a:	60a5      	str	r5, [r4, #8]
    369c:	e7c4      	b.n	3628 <setvbuf+0xc4>
    369e:	60a0      	str	r0, [r4, #8]
    36a0:	e7c2      	b.n	3628 <setvbuf+0xc4>
    36a2:	2001      	movs	r0, #1
    36a4:	4240      	negs	r0, r0
    36a6:	e7bf      	b.n	3628 <setvbuf+0xc4>
    36a8:	20000158 	.word	0x20000158
    36ac:	000067cc 	.word	0x000067cc
    36b0:	fffff35c 	.word	0xfffff35c
    36b4:	000067ec 	.word	0x000067ec
    36b8:	000067ac 	.word	0x000067ac

000036bc <strlen>:
    36bc:	2300      	movs	r3, #0
    36be:	5cc2      	ldrb	r2, [r0, r3]
    36c0:	3301      	adds	r3, #1
    36c2:	2a00      	cmp	r2, #0
    36c4:	d1fb      	bne.n	36be <strlen+0x2>
    36c6:	1e58      	subs	r0, r3, #1
    36c8:	4770      	bx	lr
	...

000036cc <__utoa>:
    36cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    36ce:	0017      	movs	r7, r2
    36d0:	b08f      	sub	sp, #60	; 0x3c
    36d2:	2225      	movs	r2, #37	; 0x25
    36d4:	0006      	movs	r6, r0
    36d6:	000d      	movs	r5, r1
    36d8:	a804      	add	r0, sp, #16
    36da:	4918      	ldr	r1, [pc, #96]	; (373c <__utoa+0x70>)
    36dc:	f7ff fe8e 	bl	33fc <memcpy>
    36e0:	aa04      	add	r2, sp, #16
    36e2:	1ebb      	subs	r3, r7, #2
    36e4:	2400      	movs	r4, #0
    36e6:	9203      	str	r2, [sp, #12]
    36e8:	2b22      	cmp	r3, #34	; 0x22
    36ea:	d905      	bls.n	36f8 <__utoa+0x2c>
    36ec:	702c      	strb	r4, [r5, #0]
    36ee:	0025      	movs	r5, r4
    36f0:	0028      	movs	r0, r5
    36f2:	b00f      	add	sp, #60	; 0x3c
    36f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    36f6:	9c01      	ldr	r4, [sp, #4]
    36f8:	1c63      	adds	r3, r4, #1
    36fa:	9301      	str	r3, [sp, #4]
    36fc:	18eb      	adds	r3, r5, r3
    36fe:	9300      	str	r3, [sp, #0]
    3700:	0030      	movs	r0, r6
    3702:	3b01      	subs	r3, #1
    3704:	0039      	movs	r1, r7
    3706:	9302      	str	r3, [sp, #8]
    3708:	f7ff fe08 	bl	331c <__aeabi_uidivmod>
    370c:	9b03      	ldr	r3, [sp, #12]
    370e:	9a02      	ldr	r2, [sp, #8]
    3710:	5c5b      	ldrb	r3, [r3, r1]
    3712:	0030      	movs	r0, r6
    3714:	7013      	strb	r3, [r2, #0]
    3716:	0039      	movs	r1, r7
    3718:	f7ff fd7a 	bl	3210 <__udivsi3>
    371c:	1e06      	subs	r6, r0, #0
    371e:	d1ea      	bne.n	36f6 <__utoa+0x2a>
    3720:	9b00      	ldr	r3, [sp, #0]
    3722:	7018      	strb	r0, [r3, #0]
    3724:	002b      	movs	r3, r5
    3726:	1b5a      	subs	r2, r3, r5
    3728:	4294      	cmp	r4, r2
    372a:	dde1      	ble.n	36f0 <__utoa+0x24>
    372c:	781a      	ldrb	r2, [r3, #0]
    372e:	5d29      	ldrb	r1, [r5, r4]
    3730:	7019      	strb	r1, [r3, #0]
    3732:	552a      	strb	r2, [r5, r4]
    3734:	3301      	adds	r3, #1
    3736:	3c01      	subs	r4, #1
    3738:	e7f5      	b.n	3726 <__utoa+0x5a>
    373a:	46c0      	nop			; (mov r8, r8)
    373c:	00006784 	.word	0x00006784

00003740 <__sflush_r>:
    3740:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3742:	898a      	ldrh	r2, [r1, #12]
    3744:	0005      	movs	r5, r0
    3746:	000c      	movs	r4, r1
    3748:	0713      	lsls	r3, r2, #28
    374a:	d460      	bmi.n	380e <__sflush_r+0xce>
    374c:	684b      	ldr	r3, [r1, #4]
    374e:	2b00      	cmp	r3, #0
    3750:	dc04      	bgt.n	375c <__sflush_r+0x1c>
    3752:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    3754:	2b00      	cmp	r3, #0
    3756:	dc01      	bgt.n	375c <__sflush_r+0x1c>
    3758:	2000      	movs	r0, #0
    375a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    375c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    375e:	2f00      	cmp	r7, #0
    3760:	d0fa      	beq.n	3758 <__sflush_r+0x18>
    3762:	2300      	movs	r3, #0
    3764:	682e      	ldr	r6, [r5, #0]
    3766:	602b      	str	r3, [r5, #0]
    3768:	2380      	movs	r3, #128	; 0x80
    376a:	015b      	lsls	r3, r3, #5
    376c:	401a      	ands	r2, r3
    376e:	d034      	beq.n	37da <__sflush_r+0x9a>
    3770:	6d60      	ldr	r0, [r4, #84]	; 0x54
    3772:	89a3      	ldrh	r3, [r4, #12]
    3774:	075b      	lsls	r3, r3, #29
    3776:	d506      	bpl.n	3786 <__sflush_r+0x46>
    3778:	6863      	ldr	r3, [r4, #4]
    377a:	1ac0      	subs	r0, r0, r3
    377c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    377e:	2b00      	cmp	r3, #0
    3780:	d001      	beq.n	3786 <__sflush_r+0x46>
    3782:	6c23      	ldr	r3, [r4, #64]	; 0x40
    3784:	1ac0      	subs	r0, r0, r3
    3786:	0002      	movs	r2, r0
    3788:	6a21      	ldr	r1, [r4, #32]
    378a:	2300      	movs	r3, #0
    378c:	0028      	movs	r0, r5
    378e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    3790:	47b8      	blx	r7
    3792:	89a1      	ldrh	r1, [r4, #12]
    3794:	1c43      	adds	r3, r0, #1
    3796:	d106      	bne.n	37a6 <__sflush_r+0x66>
    3798:	682b      	ldr	r3, [r5, #0]
    379a:	2b1d      	cmp	r3, #29
    379c:	d831      	bhi.n	3802 <__sflush_r+0xc2>
    379e:	4a2c      	ldr	r2, [pc, #176]	; (3850 <__sflush_r+0x110>)
    37a0:	40da      	lsrs	r2, r3
    37a2:	07d3      	lsls	r3, r2, #31
    37a4:	d52d      	bpl.n	3802 <__sflush_r+0xc2>
    37a6:	2300      	movs	r3, #0
    37a8:	6063      	str	r3, [r4, #4]
    37aa:	6923      	ldr	r3, [r4, #16]
    37ac:	6023      	str	r3, [r4, #0]
    37ae:	04cb      	lsls	r3, r1, #19
    37b0:	d505      	bpl.n	37be <__sflush_r+0x7e>
    37b2:	1c43      	adds	r3, r0, #1
    37b4:	d102      	bne.n	37bc <__sflush_r+0x7c>
    37b6:	682b      	ldr	r3, [r5, #0]
    37b8:	2b00      	cmp	r3, #0
    37ba:	d100      	bne.n	37be <__sflush_r+0x7e>
    37bc:	6560      	str	r0, [r4, #84]	; 0x54
    37be:	6b61      	ldr	r1, [r4, #52]	; 0x34
    37c0:	602e      	str	r6, [r5, #0]
    37c2:	2900      	cmp	r1, #0
    37c4:	d0c8      	beq.n	3758 <__sflush_r+0x18>
    37c6:	0023      	movs	r3, r4
    37c8:	3344      	adds	r3, #68	; 0x44
    37ca:	4299      	cmp	r1, r3
    37cc:	d002      	beq.n	37d4 <__sflush_r+0x94>
    37ce:	0028      	movs	r0, r5
    37d0:	f000 f9ba 	bl	3b48 <_free_r>
    37d4:	2000      	movs	r0, #0
    37d6:	6360      	str	r0, [r4, #52]	; 0x34
    37d8:	e7bf      	b.n	375a <__sflush_r+0x1a>
    37da:	2301      	movs	r3, #1
    37dc:	6a21      	ldr	r1, [r4, #32]
    37de:	0028      	movs	r0, r5
    37e0:	47b8      	blx	r7
    37e2:	1c43      	adds	r3, r0, #1
    37e4:	d1c5      	bne.n	3772 <__sflush_r+0x32>
    37e6:	682b      	ldr	r3, [r5, #0]
    37e8:	2b00      	cmp	r3, #0
    37ea:	d0c2      	beq.n	3772 <__sflush_r+0x32>
    37ec:	2b1d      	cmp	r3, #29
    37ee:	d001      	beq.n	37f4 <__sflush_r+0xb4>
    37f0:	2b16      	cmp	r3, #22
    37f2:	d101      	bne.n	37f8 <__sflush_r+0xb8>
    37f4:	602e      	str	r6, [r5, #0]
    37f6:	e7af      	b.n	3758 <__sflush_r+0x18>
    37f8:	2340      	movs	r3, #64	; 0x40
    37fa:	89a2      	ldrh	r2, [r4, #12]
    37fc:	4313      	orrs	r3, r2
    37fe:	81a3      	strh	r3, [r4, #12]
    3800:	e7ab      	b.n	375a <__sflush_r+0x1a>
    3802:	2340      	movs	r3, #64	; 0x40
    3804:	430b      	orrs	r3, r1
    3806:	2001      	movs	r0, #1
    3808:	81a3      	strh	r3, [r4, #12]
    380a:	4240      	negs	r0, r0
    380c:	e7a5      	b.n	375a <__sflush_r+0x1a>
    380e:	690f      	ldr	r7, [r1, #16]
    3810:	2f00      	cmp	r7, #0
    3812:	d0a1      	beq.n	3758 <__sflush_r+0x18>
    3814:	680b      	ldr	r3, [r1, #0]
    3816:	600f      	str	r7, [r1, #0]
    3818:	1bdb      	subs	r3, r3, r7
    381a:	9301      	str	r3, [sp, #4]
    381c:	2300      	movs	r3, #0
    381e:	0792      	lsls	r2, r2, #30
    3820:	d100      	bne.n	3824 <__sflush_r+0xe4>
    3822:	694b      	ldr	r3, [r1, #20]
    3824:	60a3      	str	r3, [r4, #8]
    3826:	9b01      	ldr	r3, [sp, #4]
    3828:	2b00      	cmp	r3, #0
    382a:	dc00      	bgt.n	382e <__sflush_r+0xee>
    382c:	e794      	b.n	3758 <__sflush_r+0x18>
    382e:	9b01      	ldr	r3, [sp, #4]
    3830:	003a      	movs	r2, r7
    3832:	6a21      	ldr	r1, [r4, #32]
    3834:	0028      	movs	r0, r5
    3836:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    3838:	47b0      	blx	r6
    383a:	2800      	cmp	r0, #0
    383c:	dc03      	bgt.n	3846 <__sflush_r+0x106>
    383e:	2340      	movs	r3, #64	; 0x40
    3840:	89a2      	ldrh	r2, [r4, #12]
    3842:	4313      	orrs	r3, r2
    3844:	e7df      	b.n	3806 <__sflush_r+0xc6>
    3846:	9b01      	ldr	r3, [sp, #4]
    3848:	183f      	adds	r7, r7, r0
    384a:	1a1b      	subs	r3, r3, r0
    384c:	9301      	str	r3, [sp, #4]
    384e:	e7ea      	b.n	3826 <__sflush_r+0xe6>
    3850:	20400001 	.word	0x20400001

00003854 <_fflush_r>:
    3854:	690b      	ldr	r3, [r1, #16]
    3856:	b570      	push	{r4, r5, r6, lr}
    3858:	0005      	movs	r5, r0
    385a:	000c      	movs	r4, r1
    385c:	2b00      	cmp	r3, #0
    385e:	d101      	bne.n	3864 <_fflush_r+0x10>
    3860:	2000      	movs	r0, #0
    3862:	bd70      	pop	{r4, r5, r6, pc}
    3864:	2800      	cmp	r0, #0
    3866:	d004      	beq.n	3872 <_fflush_r+0x1e>
    3868:	6983      	ldr	r3, [r0, #24]
    386a:	2b00      	cmp	r3, #0
    386c:	d101      	bne.n	3872 <_fflush_r+0x1e>
    386e:	f000 f85f 	bl	3930 <__sinit>
    3872:	4b0b      	ldr	r3, [pc, #44]	; (38a0 <_fflush_r+0x4c>)
    3874:	429c      	cmp	r4, r3
    3876:	d109      	bne.n	388c <_fflush_r+0x38>
    3878:	686c      	ldr	r4, [r5, #4]
    387a:	220c      	movs	r2, #12
    387c:	5ea3      	ldrsh	r3, [r4, r2]
    387e:	2b00      	cmp	r3, #0
    3880:	d0ee      	beq.n	3860 <_fflush_r+0xc>
    3882:	0021      	movs	r1, r4
    3884:	0028      	movs	r0, r5
    3886:	f7ff ff5b 	bl	3740 <__sflush_r>
    388a:	e7ea      	b.n	3862 <_fflush_r+0xe>
    388c:	4b05      	ldr	r3, [pc, #20]	; (38a4 <_fflush_r+0x50>)
    388e:	429c      	cmp	r4, r3
    3890:	d101      	bne.n	3896 <_fflush_r+0x42>
    3892:	68ac      	ldr	r4, [r5, #8]
    3894:	e7f1      	b.n	387a <_fflush_r+0x26>
    3896:	4b04      	ldr	r3, [pc, #16]	; (38a8 <_fflush_r+0x54>)
    3898:	429c      	cmp	r4, r3
    389a:	d1ee      	bne.n	387a <_fflush_r+0x26>
    389c:	68ec      	ldr	r4, [r5, #12]
    389e:	e7ec      	b.n	387a <_fflush_r+0x26>
    38a0:	000067cc 	.word	0x000067cc
    38a4:	000067ec 	.word	0x000067ec
    38a8:	000067ac 	.word	0x000067ac

000038ac <_cleanup_r>:
    38ac:	b510      	push	{r4, lr}
    38ae:	4902      	ldr	r1, [pc, #8]	; (38b8 <_cleanup_r+0xc>)
    38b0:	f000 f8b2 	bl	3a18 <_fwalk_reent>
    38b4:	bd10      	pop	{r4, pc}
    38b6:	46c0      	nop			; (mov r8, r8)
    38b8:	00003855 	.word	0x00003855

000038bc <std.isra.0>:
    38bc:	2300      	movs	r3, #0
    38be:	b510      	push	{r4, lr}
    38c0:	0004      	movs	r4, r0
    38c2:	6003      	str	r3, [r0, #0]
    38c4:	6043      	str	r3, [r0, #4]
    38c6:	6083      	str	r3, [r0, #8]
    38c8:	8181      	strh	r1, [r0, #12]
    38ca:	6643      	str	r3, [r0, #100]	; 0x64
    38cc:	81c2      	strh	r2, [r0, #14]
    38ce:	6103      	str	r3, [r0, #16]
    38d0:	6143      	str	r3, [r0, #20]
    38d2:	6183      	str	r3, [r0, #24]
    38d4:	0019      	movs	r1, r3
    38d6:	2208      	movs	r2, #8
    38d8:	305c      	adds	r0, #92	; 0x5c
    38da:	f7ff fd98 	bl	340e <memset>
    38de:	4b05      	ldr	r3, [pc, #20]	; (38f4 <std.isra.0+0x38>)
    38e0:	6224      	str	r4, [r4, #32]
    38e2:	6263      	str	r3, [r4, #36]	; 0x24
    38e4:	4b04      	ldr	r3, [pc, #16]	; (38f8 <std.isra.0+0x3c>)
    38e6:	62a3      	str	r3, [r4, #40]	; 0x28
    38e8:	4b04      	ldr	r3, [pc, #16]	; (38fc <std.isra.0+0x40>)
    38ea:	62e3      	str	r3, [r4, #44]	; 0x2c
    38ec:	4b04      	ldr	r3, [pc, #16]	; (3900 <std.isra.0+0x44>)
    38ee:	6323      	str	r3, [r4, #48]	; 0x30
    38f0:	bd10      	pop	{r4, pc}
    38f2:	46c0      	nop			; (mov r8, r8)
    38f4:	000042c1 	.word	0x000042c1
    38f8:	000042e9 	.word	0x000042e9
    38fc:	00004321 	.word	0x00004321
    3900:	0000434d 	.word	0x0000434d

00003904 <__sfmoreglue>:
    3904:	b570      	push	{r4, r5, r6, lr}
    3906:	2568      	movs	r5, #104	; 0x68
    3908:	1e4a      	subs	r2, r1, #1
    390a:	4355      	muls	r5, r2
    390c:	000e      	movs	r6, r1
    390e:	0029      	movs	r1, r5
    3910:	3174      	adds	r1, #116	; 0x74
    3912:	f000 f963 	bl	3bdc <_malloc_r>
    3916:	1e04      	subs	r4, r0, #0
    3918:	d008      	beq.n	392c <__sfmoreglue+0x28>
    391a:	2100      	movs	r1, #0
    391c:	002a      	movs	r2, r5
    391e:	6001      	str	r1, [r0, #0]
    3920:	6046      	str	r6, [r0, #4]
    3922:	300c      	adds	r0, #12
    3924:	60a0      	str	r0, [r4, #8]
    3926:	3268      	adds	r2, #104	; 0x68
    3928:	f7ff fd71 	bl	340e <memset>
    392c:	0020      	movs	r0, r4
    392e:	bd70      	pop	{r4, r5, r6, pc}

00003930 <__sinit>:
    3930:	6983      	ldr	r3, [r0, #24]
    3932:	b513      	push	{r0, r1, r4, lr}
    3934:	0004      	movs	r4, r0
    3936:	2b00      	cmp	r3, #0
    3938:	d128      	bne.n	398c <__sinit+0x5c>
    393a:	6483      	str	r3, [r0, #72]	; 0x48
    393c:	64c3      	str	r3, [r0, #76]	; 0x4c
    393e:	6503      	str	r3, [r0, #80]	; 0x50
    3940:	4b13      	ldr	r3, [pc, #76]	; (3990 <__sinit+0x60>)
    3942:	4a14      	ldr	r2, [pc, #80]	; (3994 <__sinit+0x64>)
    3944:	681b      	ldr	r3, [r3, #0]
    3946:	6282      	str	r2, [r0, #40]	; 0x28
    3948:	9301      	str	r3, [sp, #4]
    394a:	4298      	cmp	r0, r3
    394c:	d101      	bne.n	3952 <__sinit+0x22>
    394e:	2301      	movs	r3, #1
    3950:	6183      	str	r3, [r0, #24]
    3952:	0020      	movs	r0, r4
    3954:	f000 f820 	bl	3998 <__sfp>
    3958:	6060      	str	r0, [r4, #4]
    395a:	0020      	movs	r0, r4
    395c:	f000 f81c 	bl	3998 <__sfp>
    3960:	60a0      	str	r0, [r4, #8]
    3962:	0020      	movs	r0, r4
    3964:	f000 f818 	bl	3998 <__sfp>
    3968:	2200      	movs	r2, #0
    396a:	60e0      	str	r0, [r4, #12]
    396c:	2104      	movs	r1, #4
    396e:	6860      	ldr	r0, [r4, #4]
    3970:	f7ff ffa4 	bl	38bc <std.isra.0>
    3974:	2201      	movs	r2, #1
    3976:	2109      	movs	r1, #9
    3978:	68a0      	ldr	r0, [r4, #8]
    397a:	f7ff ff9f 	bl	38bc <std.isra.0>
    397e:	2202      	movs	r2, #2
    3980:	2112      	movs	r1, #18
    3982:	68e0      	ldr	r0, [r4, #12]
    3984:	f7ff ff9a 	bl	38bc <std.isra.0>
    3988:	2301      	movs	r3, #1
    398a:	61a3      	str	r3, [r4, #24]
    398c:	bd13      	pop	{r0, r1, r4, pc}
    398e:	46c0      	nop			; (mov r8, r8)
    3990:	00006780 	.word	0x00006780
    3994:	000038ad 	.word	0x000038ad

00003998 <__sfp>:
    3998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    399a:	4b1e      	ldr	r3, [pc, #120]	; (3a14 <__sfp+0x7c>)
    399c:	0007      	movs	r7, r0
    399e:	681e      	ldr	r6, [r3, #0]
    39a0:	69b3      	ldr	r3, [r6, #24]
    39a2:	2b00      	cmp	r3, #0
    39a4:	d102      	bne.n	39ac <__sfp+0x14>
    39a6:	0030      	movs	r0, r6
    39a8:	f7ff ffc2 	bl	3930 <__sinit>
    39ac:	3648      	adds	r6, #72	; 0x48
    39ae:	68b4      	ldr	r4, [r6, #8]
    39b0:	6873      	ldr	r3, [r6, #4]
    39b2:	3b01      	subs	r3, #1
    39b4:	d504      	bpl.n	39c0 <__sfp+0x28>
    39b6:	6833      	ldr	r3, [r6, #0]
    39b8:	2b00      	cmp	r3, #0
    39ba:	d007      	beq.n	39cc <__sfp+0x34>
    39bc:	6836      	ldr	r6, [r6, #0]
    39be:	e7f6      	b.n	39ae <__sfp+0x16>
    39c0:	220c      	movs	r2, #12
    39c2:	5ea5      	ldrsh	r5, [r4, r2]
    39c4:	2d00      	cmp	r5, #0
    39c6:	d00d      	beq.n	39e4 <__sfp+0x4c>
    39c8:	3468      	adds	r4, #104	; 0x68
    39ca:	e7f2      	b.n	39b2 <__sfp+0x1a>
    39cc:	2104      	movs	r1, #4
    39ce:	0038      	movs	r0, r7
    39d0:	f7ff ff98 	bl	3904 <__sfmoreglue>
    39d4:	6030      	str	r0, [r6, #0]
    39d6:	2800      	cmp	r0, #0
    39d8:	d1f0      	bne.n	39bc <__sfp+0x24>
    39da:	230c      	movs	r3, #12
    39dc:	0004      	movs	r4, r0
    39de:	603b      	str	r3, [r7, #0]
    39e0:	0020      	movs	r0, r4
    39e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    39e4:	2301      	movs	r3, #1
    39e6:	0020      	movs	r0, r4
    39e8:	425b      	negs	r3, r3
    39ea:	81e3      	strh	r3, [r4, #14]
    39ec:	3302      	adds	r3, #2
    39ee:	81a3      	strh	r3, [r4, #12]
    39f0:	6665      	str	r5, [r4, #100]	; 0x64
    39f2:	6025      	str	r5, [r4, #0]
    39f4:	60a5      	str	r5, [r4, #8]
    39f6:	6065      	str	r5, [r4, #4]
    39f8:	6125      	str	r5, [r4, #16]
    39fa:	6165      	str	r5, [r4, #20]
    39fc:	61a5      	str	r5, [r4, #24]
    39fe:	2208      	movs	r2, #8
    3a00:	0029      	movs	r1, r5
    3a02:	305c      	adds	r0, #92	; 0x5c
    3a04:	f7ff fd03 	bl	340e <memset>
    3a08:	6365      	str	r5, [r4, #52]	; 0x34
    3a0a:	63a5      	str	r5, [r4, #56]	; 0x38
    3a0c:	64a5      	str	r5, [r4, #72]	; 0x48
    3a0e:	64e5      	str	r5, [r4, #76]	; 0x4c
    3a10:	e7e6      	b.n	39e0 <__sfp+0x48>
    3a12:	46c0      	nop			; (mov r8, r8)
    3a14:	00006780 	.word	0x00006780

00003a18 <_fwalk_reent>:
    3a18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3a1a:	0004      	movs	r4, r0
    3a1c:	0007      	movs	r7, r0
    3a1e:	2600      	movs	r6, #0
    3a20:	9101      	str	r1, [sp, #4]
    3a22:	3448      	adds	r4, #72	; 0x48
    3a24:	2c00      	cmp	r4, #0
    3a26:	d101      	bne.n	3a2c <_fwalk_reent+0x14>
    3a28:	0030      	movs	r0, r6
    3a2a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3a2c:	6863      	ldr	r3, [r4, #4]
    3a2e:	68a5      	ldr	r5, [r4, #8]
    3a30:	9300      	str	r3, [sp, #0]
    3a32:	9b00      	ldr	r3, [sp, #0]
    3a34:	3b01      	subs	r3, #1
    3a36:	9300      	str	r3, [sp, #0]
    3a38:	d501      	bpl.n	3a3e <_fwalk_reent+0x26>
    3a3a:	6824      	ldr	r4, [r4, #0]
    3a3c:	e7f2      	b.n	3a24 <_fwalk_reent+0xc>
    3a3e:	89ab      	ldrh	r3, [r5, #12]
    3a40:	2b01      	cmp	r3, #1
    3a42:	d908      	bls.n	3a56 <_fwalk_reent+0x3e>
    3a44:	220e      	movs	r2, #14
    3a46:	5eab      	ldrsh	r3, [r5, r2]
    3a48:	3301      	adds	r3, #1
    3a4a:	d004      	beq.n	3a56 <_fwalk_reent+0x3e>
    3a4c:	0029      	movs	r1, r5
    3a4e:	0038      	movs	r0, r7
    3a50:	9b01      	ldr	r3, [sp, #4]
    3a52:	4798      	blx	r3
    3a54:	4306      	orrs	r6, r0
    3a56:	3568      	adds	r5, #104	; 0x68
    3a58:	e7eb      	b.n	3a32 <_fwalk_reent+0x1a>
	...

00003a5c <__swhatbuf_r>:
    3a5c:	b570      	push	{r4, r5, r6, lr}
    3a5e:	000e      	movs	r6, r1
    3a60:	001d      	movs	r5, r3
    3a62:	230e      	movs	r3, #14
    3a64:	5ec9      	ldrsh	r1, [r1, r3]
    3a66:	b090      	sub	sp, #64	; 0x40
    3a68:	0014      	movs	r4, r2
    3a6a:	2900      	cmp	r1, #0
    3a6c:	da07      	bge.n	3a7e <__swhatbuf_r+0x22>
    3a6e:	2300      	movs	r3, #0
    3a70:	602b      	str	r3, [r5, #0]
    3a72:	89b3      	ldrh	r3, [r6, #12]
    3a74:	061b      	lsls	r3, r3, #24
    3a76:	d411      	bmi.n	3a9c <__swhatbuf_r+0x40>
    3a78:	2380      	movs	r3, #128	; 0x80
    3a7a:	00db      	lsls	r3, r3, #3
    3a7c:	e00f      	b.n	3a9e <__swhatbuf_r+0x42>
    3a7e:	aa01      	add	r2, sp, #4
    3a80:	f000 fd5c 	bl	453c <_fstat_r>
    3a84:	2800      	cmp	r0, #0
    3a86:	dbf2      	blt.n	3a6e <__swhatbuf_r+0x12>
    3a88:	22f0      	movs	r2, #240	; 0xf0
    3a8a:	9b02      	ldr	r3, [sp, #8]
    3a8c:	0212      	lsls	r2, r2, #8
    3a8e:	4013      	ands	r3, r2
    3a90:	4a05      	ldr	r2, [pc, #20]	; (3aa8 <__swhatbuf_r+0x4c>)
    3a92:	189b      	adds	r3, r3, r2
    3a94:	425a      	negs	r2, r3
    3a96:	4153      	adcs	r3, r2
    3a98:	602b      	str	r3, [r5, #0]
    3a9a:	e7ed      	b.n	3a78 <__swhatbuf_r+0x1c>
    3a9c:	2340      	movs	r3, #64	; 0x40
    3a9e:	2000      	movs	r0, #0
    3aa0:	6023      	str	r3, [r4, #0]
    3aa2:	b010      	add	sp, #64	; 0x40
    3aa4:	bd70      	pop	{r4, r5, r6, pc}
    3aa6:	46c0      	nop			; (mov r8, r8)
    3aa8:	ffffe000 	.word	0xffffe000

00003aac <__smakebuf_r>:
    3aac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3aae:	2602      	movs	r6, #2
    3ab0:	898b      	ldrh	r3, [r1, #12]
    3ab2:	0005      	movs	r5, r0
    3ab4:	000c      	movs	r4, r1
    3ab6:	4233      	tst	r3, r6
    3ab8:	d006      	beq.n	3ac8 <__smakebuf_r+0x1c>
    3aba:	0023      	movs	r3, r4
    3abc:	3347      	adds	r3, #71	; 0x47
    3abe:	6023      	str	r3, [r4, #0]
    3ac0:	6123      	str	r3, [r4, #16]
    3ac2:	2301      	movs	r3, #1
    3ac4:	6163      	str	r3, [r4, #20]
    3ac6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    3ac8:	ab01      	add	r3, sp, #4
    3aca:	466a      	mov	r2, sp
    3acc:	f7ff ffc6 	bl	3a5c <__swhatbuf_r>
    3ad0:	9900      	ldr	r1, [sp, #0]
    3ad2:	0007      	movs	r7, r0
    3ad4:	0028      	movs	r0, r5
    3ad6:	f000 f881 	bl	3bdc <_malloc_r>
    3ada:	2800      	cmp	r0, #0
    3adc:	d108      	bne.n	3af0 <__smakebuf_r+0x44>
    3ade:	220c      	movs	r2, #12
    3ae0:	5ea3      	ldrsh	r3, [r4, r2]
    3ae2:	059a      	lsls	r2, r3, #22
    3ae4:	d4ef      	bmi.n	3ac6 <__smakebuf_r+0x1a>
    3ae6:	2203      	movs	r2, #3
    3ae8:	4393      	bics	r3, r2
    3aea:	431e      	orrs	r6, r3
    3aec:	81a6      	strh	r6, [r4, #12]
    3aee:	e7e4      	b.n	3aba <__smakebuf_r+0xe>
    3af0:	4b0f      	ldr	r3, [pc, #60]	; (3b30 <__smakebuf_r+0x84>)
    3af2:	62ab      	str	r3, [r5, #40]	; 0x28
    3af4:	2380      	movs	r3, #128	; 0x80
    3af6:	89a2      	ldrh	r2, [r4, #12]
    3af8:	6020      	str	r0, [r4, #0]
    3afa:	4313      	orrs	r3, r2
    3afc:	81a3      	strh	r3, [r4, #12]
    3afe:	9b00      	ldr	r3, [sp, #0]
    3b00:	6120      	str	r0, [r4, #16]
    3b02:	6163      	str	r3, [r4, #20]
    3b04:	9b01      	ldr	r3, [sp, #4]
    3b06:	2b00      	cmp	r3, #0
    3b08:	d00d      	beq.n	3b26 <__smakebuf_r+0x7a>
    3b0a:	230e      	movs	r3, #14
    3b0c:	5ee1      	ldrsh	r1, [r4, r3]
    3b0e:	0028      	movs	r0, r5
    3b10:	f000 fd26 	bl	4560 <_isatty_r>
    3b14:	2800      	cmp	r0, #0
    3b16:	d006      	beq.n	3b26 <__smakebuf_r+0x7a>
    3b18:	2203      	movs	r2, #3
    3b1a:	89a3      	ldrh	r3, [r4, #12]
    3b1c:	4393      	bics	r3, r2
    3b1e:	001a      	movs	r2, r3
    3b20:	2301      	movs	r3, #1
    3b22:	4313      	orrs	r3, r2
    3b24:	81a3      	strh	r3, [r4, #12]
    3b26:	89a0      	ldrh	r0, [r4, #12]
    3b28:	4338      	orrs	r0, r7
    3b2a:	81a0      	strh	r0, [r4, #12]
    3b2c:	e7cb      	b.n	3ac6 <__smakebuf_r+0x1a>
    3b2e:	46c0      	nop			; (mov r8, r8)
    3b30:	000038ad 	.word	0x000038ad

00003b34 <malloc>:
    3b34:	b510      	push	{r4, lr}
    3b36:	4b03      	ldr	r3, [pc, #12]	; (3b44 <malloc+0x10>)
    3b38:	0001      	movs	r1, r0
    3b3a:	6818      	ldr	r0, [r3, #0]
    3b3c:	f000 f84e 	bl	3bdc <_malloc_r>
    3b40:	bd10      	pop	{r4, pc}
    3b42:	46c0      	nop			; (mov r8, r8)
    3b44:	20000158 	.word	0x20000158

00003b48 <_free_r>:
    3b48:	b570      	push	{r4, r5, r6, lr}
    3b4a:	0005      	movs	r5, r0
    3b4c:	2900      	cmp	r1, #0
    3b4e:	d010      	beq.n	3b72 <_free_r+0x2a>
    3b50:	1f0c      	subs	r4, r1, #4
    3b52:	6823      	ldr	r3, [r4, #0]
    3b54:	2b00      	cmp	r3, #0
    3b56:	da00      	bge.n	3b5a <_free_r+0x12>
    3b58:	18e4      	adds	r4, r4, r3
    3b5a:	0028      	movs	r0, r5
    3b5c:	f000 fd31 	bl	45c2 <__malloc_lock>
    3b60:	4a1d      	ldr	r2, [pc, #116]	; (3bd8 <_free_r+0x90>)
    3b62:	6813      	ldr	r3, [r2, #0]
    3b64:	2b00      	cmp	r3, #0
    3b66:	d105      	bne.n	3b74 <_free_r+0x2c>
    3b68:	6063      	str	r3, [r4, #4]
    3b6a:	6014      	str	r4, [r2, #0]
    3b6c:	0028      	movs	r0, r5
    3b6e:	f000 fd29 	bl	45c4 <__malloc_unlock>
    3b72:	bd70      	pop	{r4, r5, r6, pc}
    3b74:	42a3      	cmp	r3, r4
    3b76:	d909      	bls.n	3b8c <_free_r+0x44>
    3b78:	6821      	ldr	r1, [r4, #0]
    3b7a:	1860      	adds	r0, r4, r1
    3b7c:	4283      	cmp	r3, r0
    3b7e:	d1f3      	bne.n	3b68 <_free_r+0x20>
    3b80:	6818      	ldr	r0, [r3, #0]
    3b82:	685b      	ldr	r3, [r3, #4]
    3b84:	1841      	adds	r1, r0, r1
    3b86:	6021      	str	r1, [r4, #0]
    3b88:	e7ee      	b.n	3b68 <_free_r+0x20>
    3b8a:	0013      	movs	r3, r2
    3b8c:	685a      	ldr	r2, [r3, #4]
    3b8e:	2a00      	cmp	r2, #0
    3b90:	d001      	beq.n	3b96 <_free_r+0x4e>
    3b92:	42a2      	cmp	r2, r4
    3b94:	d9f9      	bls.n	3b8a <_free_r+0x42>
    3b96:	6819      	ldr	r1, [r3, #0]
    3b98:	1858      	adds	r0, r3, r1
    3b9a:	42a0      	cmp	r0, r4
    3b9c:	d10b      	bne.n	3bb6 <_free_r+0x6e>
    3b9e:	6820      	ldr	r0, [r4, #0]
    3ba0:	1809      	adds	r1, r1, r0
    3ba2:	1858      	adds	r0, r3, r1
    3ba4:	6019      	str	r1, [r3, #0]
    3ba6:	4282      	cmp	r2, r0
    3ba8:	d1e0      	bne.n	3b6c <_free_r+0x24>
    3baa:	6810      	ldr	r0, [r2, #0]
    3bac:	6852      	ldr	r2, [r2, #4]
    3bae:	1841      	adds	r1, r0, r1
    3bb0:	6019      	str	r1, [r3, #0]
    3bb2:	605a      	str	r2, [r3, #4]
    3bb4:	e7da      	b.n	3b6c <_free_r+0x24>
    3bb6:	42a0      	cmp	r0, r4
    3bb8:	d902      	bls.n	3bc0 <_free_r+0x78>
    3bba:	230c      	movs	r3, #12
    3bbc:	602b      	str	r3, [r5, #0]
    3bbe:	e7d5      	b.n	3b6c <_free_r+0x24>
    3bc0:	6821      	ldr	r1, [r4, #0]
    3bc2:	1860      	adds	r0, r4, r1
    3bc4:	4282      	cmp	r2, r0
    3bc6:	d103      	bne.n	3bd0 <_free_r+0x88>
    3bc8:	6810      	ldr	r0, [r2, #0]
    3bca:	6852      	ldr	r2, [r2, #4]
    3bcc:	1841      	adds	r1, r0, r1
    3bce:	6021      	str	r1, [r4, #0]
    3bd0:	6062      	str	r2, [r4, #4]
    3bd2:	605c      	str	r4, [r3, #4]
    3bd4:	e7ca      	b.n	3b6c <_free_r+0x24>
    3bd6:	46c0      	nop			; (mov r8, r8)
    3bd8:	200002a0 	.word	0x200002a0

00003bdc <_malloc_r>:
    3bdc:	2303      	movs	r3, #3
    3bde:	b570      	push	{r4, r5, r6, lr}
    3be0:	1ccd      	adds	r5, r1, #3
    3be2:	439d      	bics	r5, r3
    3be4:	3508      	adds	r5, #8
    3be6:	0006      	movs	r6, r0
    3be8:	2d0c      	cmp	r5, #12
    3bea:	d21e      	bcs.n	3c2a <_malloc_r+0x4e>
    3bec:	250c      	movs	r5, #12
    3bee:	42a9      	cmp	r1, r5
    3bf0:	d81d      	bhi.n	3c2e <_malloc_r+0x52>
    3bf2:	0030      	movs	r0, r6
    3bf4:	f000 fce5 	bl	45c2 <__malloc_lock>
    3bf8:	4a25      	ldr	r2, [pc, #148]	; (3c90 <_malloc_r+0xb4>)
    3bfa:	6814      	ldr	r4, [r2, #0]
    3bfc:	0021      	movs	r1, r4
    3bfe:	2900      	cmp	r1, #0
    3c00:	d119      	bne.n	3c36 <_malloc_r+0x5a>
    3c02:	4c24      	ldr	r4, [pc, #144]	; (3c94 <_malloc_r+0xb8>)
    3c04:	6823      	ldr	r3, [r4, #0]
    3c06:	2b00      	cmp	r3, #0
    3c08:	d103      	bne.n	3c12 <_malloc_r+0x36>
    3c0a:	0030      	movs	r0, r6
    3c0c:	f000 fb46 	bl	429c <_sbrk_r>
    3c10:	6020      	str	r0, [r4, #0]
    3c12:	0029      	movs	r1, r5
    3c14:	0030      	movs	r0, r6
    3c16:	f000 fb41 	bl	429c <_sbrk_r>
    3c1a:	1c43      	adds	r3, r0, #1
    3c1c:	d12c      	bne.n	3c78 <_malloc_r+0x9c>
    3c1e:	230c      	movs	r3, #12
    3c20:	0030      	movs	r0, r6
    3c22:	6033      	str	r3, [r6, #0]
    3c24:	f000 fcce 	bl	45c4 <__malloc_unlock>
    3c28:	e003      	b.n	3c32 <_malloc_r+0x56>
    3c2a:	2d00      	cmp	r5, #0
    3c2c:	dadf      	bge.n	3bee <_malloc_r+0x12>
    3c2e:	230c      	movs	r3, #12
    3c30:	6033      	str	r3, [r6, #0]
    3c32:	2000      	movs	r0, #0
    3c34:	bd70      	pop	{r4, r5, r6, pc}
    3c36:	680b      	ldr	r3, [r1, #0]
    3c38:	1b5b      	subs	r3, r3, r5
    3c3a:	d41a      	bmi.n	3c72 <_malloc_r+0x96>
    3c3c:	2b0b      	cmp	r3, #11
    3c3e:	d903      	bls.n	3c48 <_malloc_r+0x6c>
    3c40:	600b      	str	r3, [r1, #0]
    3c42:	18cc      	adds	r4, r1, r3
    3c44:	6025      	str	r5, [r4, #0]
    3c46:	e003      	b.n	3c50 <_malloc_r+0x74>
    3c48:	428c      	cmp	r4, r1
    3c4a:	d10e      	bne.n	3c6a <_malloc_r+0x8e>
    3c4c:	6863      	ldr	r3, [r4, #4]
    3c4e:	6013      	str	r3, [r2, #0]
    3c50:	0030      	movs	r0, r6
    3c52:	f000 fcb7 	bl	45c4 <__malloc_unlock>
    3c56:	0020      	movs	r0, r4
    3c58:	2207      	movs	r2, #7
    3c5a:	300b      	adds	r0, #11
    3c5c:	1d23      	adds	r3, r4, #4
    3c5e:	4390      	bics	r0, r2
    3c60:	1ac3      	subs	r3, r0, r3
    3c62:	d0e7      	beq.n	3c34 <_malloc_r+0x58>
    3c64:	425a      	negs	r2, r3
    3c66:	50e2      	str	r2, [r4, r3]
    3c68:	e7e4      	b.n	3c34 <_malloc_r+0x58>
    3c6a:	684b      	ldr	r3, [r1, #4]
    3c6c:	6063      	str	r3, [r4, #4]
    3c6e:	000c      	movs	r4, r1
    3c70:	e7ee      	b.n	3c50 <_malloc_r+0x74>
    3c72:	000c      	movs	r4, r1
    3c74:	6849      	ldr	r1, [r1, #4]
    3c76:	e7c2      	b.n	3bfe <_malloc_r+0x22>
    3c78:	2303      	movs	r3, #3
    3c7a:	1cc4      	adds	r4, r0, #3
    3c7c:	439c      	bics	r4, r3
    3c7e:	42a0      	cmp	r0, r4
    3c80:	d0e0      	beq.n	3c44 <_malloc_r+0x68>
    3c82:	1a21      	subs	r1, r4, r0
    3c84:	0030      	movs	r0, r6
    3c86:	f000 fb09 	bl	429c <_sbrk_r>
    3c8a:	1c43      	adds	r3, r0, #1
    3c8c:	d1da      	bne.n	3c44 <_malloc_r+0x68>
    3c8e:	e7c6      	b.n	3c1e <_malloc_r+0x42>
    3c90:	200002a0 	.word	0x200002a0
    3c94:	200002a4 	.word	0x200002a4

00003c98 <__sfputc_r>:
    3c98:	6893      	ldr	r3, [r2, #8]
    3c9a:	b510      	push	{r4, lr}
    3c9c:	3b01      	subs	r3, #1
    3c9e:	6093      	str	r3, [r2, #8]
    3ca0:	2b00      	cmp	r3, #0
    3ca2:	da05      	bge.n	3cb0 <__sfputc_r+0x18>
    3ca4:	6994      	ldr	r4, [r2, #24]
    3ca6:	42a3      	cmp	r3, r4
    3ca8:	db08      	blt.n	3cbc <__sfputc_r+0x24>
    3caa:	b2cb      	uxtb	r3, r1
    3cac:	2b0a      	cmp	r3, #10
    3cae:	d005      	beq.n	3cbc <__sfputc_r+0x24>
    3cb0:	6813      	ldr	r3, [r2, #0]
    3cb2:	1c58      	adds	r0, r3, #1
    3cb4:	6010      	str	r0, [r2, #0]
    3cb6:	7019      	strb	r1, [r3, #0]
    3cb8:	b2c8      	uxtb	r0, r1
    3cba:	bd10      	pop	{r4, pc}
    3cbc:	f000 fb4c 	bl	4358 <__swbuf_r>
    3cc0:	e7fb      	b.n	3cba <__sfputc_r+0x22>

00003cc2 <__sfputs_r>:
    3cc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3cc4:	0006      	movs	r6, r0
    3cc6:	000f      	movs	r7, r1
    3cc8:	0014      	movs	r4, r2
    3cca:	18d5      	adds	r5, r2, r3
    3ccc:	42ac      	cmp	r4, r5
    3cce:	d101      	bne.n	3cd4 <__sfputs_r+0x12>
    3cd0:	2000      	movs	r0, #0
    3cd2:	e007      	b.n	3ce4 <__sfputs_r+0x22>
    3cd4:	7821      	ldrb	r1, [r4, #0]
    3cd6:	003a      	movs	r2, r7
    3cd8:	0030      	movs	r0, r6
    3cda:	f7ff ffdd 	bl	3c98 <__sfputc_r>
    3cde:	3401      	adds	r4, #1
    3ce0:	1c43      	adds	r3, r0, #1
    3ce2:	d1f3      	bne.n	3ccc <__sfputs_r+0xa>
    3ce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00003ce8 <_vfiprintf_r>:
    3ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3cea:	b09f      	sub	sp, #124	; 0x7c
    3cec:	0006      	movs	r6, r0
    3cee:	000f      	movs	r7, r1
    3cf0:	0014      	movs	r4, r2
    3cf2:	9305      	str	r3, [sp, #20]
    3cf4:	2800      	cmp	r0, #0
    3cf6:	d004      	beq.n	3d02 <_vfiprintf_r+0x1a>
    3cf8:	6983      	ldr	r3, [r0, #24]
    3cfa:	2b00      	cmp	r3, #0
    3cfc:	d101      	bne.n	3d02 <_vfiprintf_r+0x1a>
    3cfe:	f7ff fe17 	bl	3930 <__sinit>
    3d02:	4b7f      	ldr	r3, [pc, #508]	; (3f00 <_vfiprintf_r+0x218>)
    3d04:	429f      	cmp	r7, r3
    3d06:	d15c      	bne.n	3dc2 <_vfiprintf_r+0xda>
    3d08:	6877      	ldr	r7, [r6, #4]
    3d0a:	89bb      	ldrh	r3, [r7, #12]
    3d0c:	071b      	lsls	r3, r3, #28
    3d0e:	d562      	bpl.n	3dd6 <_vfiprintf_r+0xee>
    3d10:	693b      	ldr	r3, [r7, #16]
    3d12:	2b00      	cmp	r3, #0
    3d14:	d05f      	beq.n	3dd6 <_vfiprintf_r+0xee>
    3d16:	2300      	movs	r3, #0
    3d18:	ad06      	add	r5, sp, #24
    3d1a:	616b      	str	r3, [r5, #20]
    3d1c:	3320      	adds	r3, #32
    3d1e:	766b      	strb	r3, [r5, #25]
    3d20:	3310      	adds	r3, #16
    3d22:	76ab      	strb	r3, [r5, #26]
    3d24:	9402      	str	r4, [sp, #8]
    3d26:	9c02      	ldr	r4, [sp, #8]
    3d28:	7823      	ldrb	r3, [r4, #0]
    3d2a:	2b00      	cmp	r3, #0
    3d2c:	d15d      	bne.n	3dea <_vfiprintf_r+0x102>
    3d2e:	9b02      	ldr	r3, [sp, #8]
    3d30:	1ae3      	subs	r3, r4, r3
    3d32:	9304      	str	r3, [sp, #16]
    3d34:	d00d      	beq.n	3d52 <_vfiprintf_r+0x6a>
    3d36:	9b04      	ldr	r3, [sp, #16]
    3d38:	9a02      	ldr	r2, [sp, #8]
    3d3a:	0039      	movs	r1, r7
    3d3c:	0030      	movs	r0, r6
    3d3e:	f7ff ffc0 	bl	3cc2 <__sfputs_r>
    3d42:	1c43      	adds	r3, r0, #1
    3d44:	d100      	bne.n	3d48 <_vfiprintf_r+0x60>
    3d46:	e0cc      	b.n	3ee2 <_vfiprintf_r+0x1fa>
    3d48:	696a      	ldr	r2, [r5, #20]
    3d4a:	9b04      	ldr	r3, [sp, #16]
    3d4c:	4694      	mov	ip, r2
    3d4e:	4463      	add	r3, ip
    3d50:	616b      	str	r3, [r5, #20]
    3d52:	7823      	ldrb	r3, [r4, #0]
    3d54:	2b00      	cmp	r3, #0
    3d56:	d100      	bne.n	3d5a <_vfiprintf_r+0x72>
    3d58:	e0c3      	b.n	3ee2 <_vfiprintf_r+0x1fa>
    3d5a:	2201      	movs	r2, #1
    3d5c:	2300      	movs	r3, #0
    3d5e:	4252      	negs	r2, r2
    3d60:	606a      	str	r2, [r5, #4]
    3d62:	a902      	add	r1, sp, #8
    3d64:	3254      	adds	r2, #84	; 0x54
    3d66:	1852      	adds	r2, r2, r1
    3d68:	3401      	adds	r4, #1
    3d6a:	602b      	str	r3, [r5, #0]
    3d6c:	60eb      	str	r3, [r5, #12]
    3d6e:	60ab      	str	r3, [r5, #8]
    3d70:	7013      	strb	r3, [r2, #0]
    3d72:	65ab      	str	r3, [r5, #88]	; 0x58
    3d74:	7821      	ldrb	r1, [r4, #0]
    3d76:	2205      	movs	r2, #5
    3d78:	4862      	ldr	r0, [pc, #392]	; (3f04 <_vfiprintf_r+0x21c>)
    3d7a:	f000 fc17 	bl	45ac <memchr>
    3d7e:	1c63      	adds	r3, r4, #1
    3d80:	469c      	mov	ip, r3
    3d82:	2800      	cmp	r0, #0
    3d84:	d135      	bne.n	3df2 <_vfiprintf_r+0x10a>
    3d86:	6829      	ldr	r1, [r5, #0]
    3d88:	06cb      	lsls	r3, r1, #27
    3d8a:	d504      	bpl.n	3d96 <_vfiprintf_r+0xae>
    3d8c:	2353      	movs	r3, #83	; 0x53
    3d8e:	aa02      	add	r2, sp, #8
    3d90:	3020      	adds	r0, #32
    3d92:	189b      	adds	r3, r3, r2
    3d94:	7018      	strb	r0, [r3, #0]
    3d96:	070b      	lsls	r3, r1, #28
    3d98:	d504      	bpl.n	3da4 <_vfiprintf_r+0xbc>
    3d9a:	2353      	movs	r3, #83	; 0x53
    3d9c:	202b      	movs	r0, #43	; 0x2b
    3d9e:	aa02      	add	r2, sp, #8
    3da0:	189b      	adds	r3, r3, r2
    3da2:	7018      	strb	r0, [r3, #0]
    3da4:	7823      	ldrb	r3, [r4, #0]
    3da6:	2b2a      	cmp	r3, #42	; 0x2a
    3da8:	d02c      	beq.n	3e04 <_vfiprintf_r+0x11c>
    3daa:	2000      	movs	r0, #0
    3dac:	210a      	movs	r1, #10
    3dae:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3db0:	7822      	ldrb	r2, [r4, #0]
    3db2:	3a30      	subs	r2, #48	; 0x30
    3db4:	2a09      	cmp	r2, #9
    3db6:	d800      	bhi.n	3dba <_vfiprintf_r+0xd2>
    3db8:	e06b      	b.n	3e92 <_vfiprintf_r+0x1aa>
    3dba:	2800      	cmp	r0, #0
    3dbc:	d02a      	beq.n	3e14 <_vfiprintf_r+0x12c>
    3dbe:	9309      	str	r3, [sp, #36]	; 0x24
    3dc0:	e028      	b.n	3e14 <_vfiprintf_r+0x12c>
    3dc2:	4b51      	ldr	r3, [pc, #324]	; (3f08 <_vfiprintf_r+0x220>)
    3dc4:	429f      	cmp	r7, r3
    3dc6:	d101      	bne.n	3dcc <_vfiprintf_r+0xe4>
    3dc8:	68b7      	ldr	r7, [r6, #8]
    3dca:	e79e      	b.n	3d0a <_vfiprintf_r+0x22>
    3dcc:	4b4f      	ldr	r3, [pc, #316]	; (3f0c <_vfiprintf_r+0x224>)
    3dce:	429f      	cmp	r7, r3
    3dd0:	d19b      	bne.n	3d0a <_vfiprintf_r+0x22>
    3dd2:	68f7      	ldr	r7, [r6, #12]
    3dd4:	e799      	b.n	3d0a <_vfiprintf_r+0x22>
    3dd6:	0039      	movs	r1, r7
    3dd8:	0030      	movs	r0, r6
    3dda:	f000 fb27 	bl	442c <__swsetup_r>
    3dde:	2800      	cmp	r0, #0
    3de0:	d099      	beq.n	3d16 <_vfiprintf_r+0x2e>
    3de2:	2001      	movs	r0, #1
    3de4:	4240      	negs	r0, r0
    3de6:	b01f      	add	sp, #124	; 0x7c
    3de8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3dea:	2b25      	cmp	r3, #37	; 0x25
    3dec:	d09f      	beq.n	3d2e <_vfiprintf_r+0x46>
    3dee:	3401      	adds	r4, #1
    3df0:	e79a      	b.n	3d28 <_vfiprintf_r+0x40>
    3df2:	4b44      	ldr	r3, [pc, #272]	; (3f04 <_vfiprintf_r+0x21c>)
    3df4:	6829      	ldr	r1, [r5, #0]
    3df6:	1ac0      	subs	r0, r0, r3
    3df8:	2301      	movs	r3, #1
    3dfa:	4083      	lsls	r3, r0
    3dfc:	430b      	orrs	r3, r1
    3dfe:	602b      	str	r3, [r5, #0]
    3e00:	4664      	mov	r4, ip
    3e02:	e7b7      	b.n	3d74 <_vfiprintf_r+0x8c>
    3e04:	9b05      	ldr	r3, [sp, #20]
    3e06:	1d18      	adds	r0, r3, #4
    3e08:	681b      	ldr	r3, [r3, #0]
    3e0a:	9005      	str	r0, [sp, #20]
    3e0c:	2b00      	cmp	r3, #0
    3e0e:	db3a      	blt.n	3e86 <_vfiprintf_r+0x19e>
    3e10:	9309      	str	r3, [sp, #36]	; 0x24
    3e12:	4664      	mov	r4, ip
    3e14:	7823      	ldrb	r3, [r4, #0]
    3e16:	2b2e      	cmp	r3, #46	; 0x2e
    3e18:	d10b      	bne.n	3e32 <_vfiprintf_r+0x14a>
    3e1a:	7863      	ldrb	r3, [r4, #1]
    3e1c:	1c62      	adds	r2, r4, #1
    3e1e:	2b2a      	cmp	r3, #42	; 0x2a
    3e20:	d13f      	bne.n	3ea2 <_vfiprintf_r+0x1ba>
    3e22:	9b05      	ldr	r3, [sp, #20]
    3e24:	3402      	adds	r4, #2
    3e26:	1d1a      	adds	r2, r3, #4
    3e28:	681b      	ldr	r3, [r3, #0]
    3e2a:	9205      	str	r2, [sp, #20]
    3e2c:	2b00      	cmp	r3, #0
    3e2e:	db35      	blt.n	3e9c <_vfiprintf_r+0x1b4>
    3e30:	9307      	str	r3, [sp, #28]
    3e32:	7821      	ldrb	r1, [r4, #0]
    3e34:	2203      	movs	r2, #3
    3e36:	4836      	ldr	r0, [pc, #216]	; (3f10 <_vfiprintf_r+0x228>)
    3e38:	f000 fbb8 	bl	45ac <memchr>
    3e3c:	2800      	cmp	r0, #0
    3e3e:	d007      	beq.n	3e50 <_vfiprintf_r+0x168>
    3e40:	4b33      	ldr	r3, [pc, #204]	; (3f10 <_vfiprintf_r+0x228>)
    3e42:	682a      	ldr	r2, [r5, #0]
    3e44:	1ac0      	subs	r0, r0, r3
    3e46:	2340      	movs	r3, #64	; 0x40
    3e48:	4083      	lsls	r3, r0
    3e4a:	4313      	orrs	r3, r2
    3e4c:	602b      	str	r3, [r5, #0]
    3e4e:	3401      	adds	r4, #1
    3e50:	7821      	ldrb	r1, [r4, #0]
    3e52:	1c63      	adds	r3, r4, #1
    3e54:	2206      	movs	r2, #6
    3e56:	482f      	ldr	r0, [pc, #188]	; (3f14 <_vfiprintf_r+0x22c>)
    3e58:	9302      	str	r3, [sp, #8]
    3e5a:	7629      	strb	r1, [r5, #24]
    3e5c:	f000 fba6 	bl	45ac <memchr>
    3e60:	2800      	cmp	r0, #0
    3e62:	d044      	beq.n	3eee <_vfiprintf_r+0x206>
    3e64:	4b2c      	ldr	r3, [pc, #176]	; (3f18 <_vfiprintf_r+0x230>)
    3e66:	2b00      	cmp	r3, #0
    3e68:	d12f      	bne.n	3eca <_vfiprintf_r+0x1e2>
    3e6a:	6829      	ldr	r1, [r5, #0]
    3e6c:	9b05      	ldr	r3, [sp, #20]
    3e6e:	2207      	movs	r2, #7
    3e70:	05c9      	lsls	r1, r1, #23
    3e72:	d528      	bpl.n	3ec6 <_vfiprintf_r+0x1de>
    3e74:	189b      	adds	r3, r3, r2
    3e76:	4393      	bics	r3, r2
    3e78:	3308      	adds	r3, #8
    3e7a:	9305      	str	r3, [sp, #20]
    3e7c:	696b      	ldr	r3, [r5, #20]
    3e7e:	9a03      	ldr	r2, [sp, #12]
    3e80:	189b      	adds	r3, r3, r2
    3e82:	616b      	str	r3, [r5, #20]
    3e84:	e74f      	b.n	3d26 <_vfiprintf_r+0x3e>
    3e86:	425b      	negs	r3, r3
    3e88:	60eb      	str	r3, [r5, #12]
    3e8a:	2302      	movs	r3, #2
    3e8c:	430b      	orrs	r3, r1
    3e8e:	602b      	str	r3, [r5, #0]
    3e90:	e7bf      	b.n	3e12 <_vfiprintf_r+0x12a>
    3e92:	434b      	muls	r3, r1
    3e94:	3401      	adds	r4, #1
    3e96:	189b      	adds	r3, r3, r2
    3e98:	2001      	movs	r0, #1
    3e9a:	e789      	b.n	3db0 <_vfiprintf_r+0xc8>
    3e9c:	2301      	movs	r3, #1
    3e9e:	425b      	negs	r3, r3
    3ea0:	e7c6      	b.n	3e30 <_vfiprintf_r+0x148>
    3ea2:	2300      	movs	r3, #0
    3ea4:	0014      	movs	r4, r2
    3ea6:	200a      	movs	r0, #10
    3ea8:	001a      	movs	r2, r3
    3eaa:	606b      	str	r3, [r5, #4]
    3eac:	7821      	ldrb	r1, [r4, #0]
    3eae:	3930      	subs	r1, #48	; 0x30
    3eb0:	2909      	cmp	r1, #9
    3eb2:	d903      	bls.n	3ebc <_vfiprintf_r+0x1d4>
    3eb4:	2b00      	cmp	r3, #0
    3eb6:	d0bc      	beq.n	3e32 <_vfiprintf_r+0x14a>
    3eb8:	9207      	str	r2, [sp, #28]
    3eba:	e7ba      	b.n	3e32 <_vfiprintf_r+0x14a>
    3ebc:	4342      	muls	r2, r0
    3ebe:	3401      	adds	r4, #1
    3ec0:	1852      	adds	r2, r2, r1
    3ec2:	2301      	movs	r3, #1
    3ec4:	e7f2      	b.n	3eac <_vfiprintf_r+0x1c4>
    3ec6:	3307      	adds	r3, #7
    3ec8:	e7d5      	b.n	3e76 <_vfiprintf_r+0x18e>
    3eca:	ab05      	add	r3, sp, #20
    3ecc:	9300      	str	r3, [sp, #0]
    3ece:	003a      	movs	r2, r7
    3ed0:	4b12      	ldr	r3, [pc, #72]	; (3f1c <_vfiprintf_r+0x234>)
    3ed2:	0029      	movs	r1, r5
    3ed4:	0030      	movs	r0, r6
    3ed6:	e000      	b.n	3eda <_vfiprintf_r+0x1f2>
    3ed8:	bf00      	nop
    3eda:	9003      	str	r0, [sp, #12]
    3edc:	9b03      	ldr	r3, [sp, #12]
    3ede:	3301      	adds	r3, #1
    3ee0:	d1cc      	bne.n	3e7c <_vfiprintf_r+0x194>
    3ee2:	89bb      	ldrh	r3, [r7, #12]
    3ee4:	065b      	lsls	r3, r3, #25
    3ee6:	d500      	bpl.n	3eea <_vfiprintf_r+0x202>
    3ee8:	e77b      	b.n	3de2 <_vfiprintf_r+0xfa>
    3eea:	980b      	ldr	r0, [sp, #44]	; 0x2c
    3eec:	e77b      	b.n	3de6 <_vfiprintf_r+0xfe>
    3eee:	ab05      	add	r3, sp, #20
    3ef0:	9300      	str	r3, [sp, #0]
    3ef2:	003a      	movs	r2, r7
    3ef4:	4b09      	ldr	r3, [pc, #36]	; (3f1c <_vfiprintf_r+0x234>)
    3ef6:	0029      	movs	r1, r5
    3ef8:	0030      	movs	r0, r6
    3efa:	f000 f87f 	bl	3ffc <_printf_i>
    3efe:	e7ec      	b.n	3eda <_vfiprintf_r+0x1f2>
    3f00:	000067cc 	.word	0x000067cc
    3f04:	0000680c 	.word	0x0000680c
    3f08:	000067ec 	.word	0x000067ec
    3f0c:	000067ac 	.word	0x000067ac
    3f10:	00006812 	.word	0x00006812
    3f14:	00006816 	.word	0x00006816
    3f18:	00000000 	.word	0x00000000
    3f1c:	00003cc3 	.word	0x00003cc3

00003f20 <_printf_common>:
    3f20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3f22:	0015      	movs	r5, r2
    3f24:	9301      	str	r3, [sp, #4]
    3f26:	688a      	ldr	r2, [r1, #8]
    3f28:	690b      	ldr	r3, [r1, #16]
    3f2a:	9000      	str	r0, [sp, #0]
    3f2c:	000c      	movs	r4, r1
    3f2e:	4293      	cmp	r3, r2
    3f30:	da00      	bge.n	3f34 <_printf_common+0x14>
    3f32:	0013      	movs	r3, r2
    3f34:	0022      	movs	r2, r4
    3f36:	602b      	str	r3, [r5, #0]
    3f38:	3243      	adds	r2, #67	; 0x43
    3f3a:	7812      	ldrb	r2, [r2, #0]
    3f3c:	2a00      	cmp	r2, #0
    3f3e:	d001      	beq.n	3f44 <_printf_common+0x24>
    3f40:	3301      	adds	r3, #1
    3f42:	602b      	str	r3, [r5, #0]
    3f44:	6823      	ldr	r3, [r4, #0]
    3f46:	069b      	lsls	r3, r3, #26
    3f48:	d502      	bpl.n	3f50 <_printf_common+0x30>
    3f4a:	682b      	ldr	r3, [r5, #0]
    3f4c:	3302      	adds	r3, #2
    3f4e:	602b      	str	r3, [r5, #0]
    3f50:	2706      	movs	r7, #6
    3f52:	6823      	ldr	r3, [r4, #0]
    3f54:	401f      	ands	r7, r3
    3f56:	d027      	beq.n	3fa8 <_printf_common+0x88>
    3f58:	0023      	movs	r3, r4
    3f5a:	3343      	adds	r3, #67	; 0x43
    3f5c:	781b      	ldrb	r3, [r3, #0]
    3f5e:	1e5a      	subs	r2, r3, #1
    3f60:	4193      	sbcs	r3, r2
    3f62:	6822      	ldr	r2, [r4, #0]
    3f64:	0692      	lsls	r2, r2, #26
    3f66:	d430      	bmi.n	3fca <_printf_common+0xaa>
    3f68:	0022      	movs	r2, r4
    3f6a:	9901      	ldr	r1, [sp, #4]
    3f6c:	3243      	adds	r2, #67	; 0x43
    3f6e:	9800      	ldr	r0, [sp, #0]
    3f70:	9e08      	ldr	r6, [sp, #32]
    3f72:	47b0      	blx	r6
    3f74:	1c43      	adds	r3, r0, #1
    3f76:	d025      	beq.n	3fc4 <_printf_common+0xa4>
    3f78:	2306      	movs	r3, #6
    3f7a:	6820      	ldr	r0, [r4, #0]
    3f7c:	682a      	ldr	r2, [r5, #0]
    3f7e:	68e1      	ldr	r1, [r4, #12]
    3f80:	4003      	ands	r3, r0
    3f82:	2500      	movs	r5, #0
    3f84:	2b04      	cmp	r3, #4
    3f86:	d103      	bne.n	3f90 <_printf_common+0x70>
    3f88:	1a8d      	subs	r5, r1, r2
    3f8a:	43eb      	mvns	r3, r5
    3f8c:	17db      	asrs	r3, r3, #31
    3f8e:	401d      	ands	r5, r3
    3f90:	68a3      	ldr	r3, [r4, #8]
    3f92:	6922      	ldr	r2, [r4, #16]
    3f94:	4293      	cmp	r3, r2
    3f96:	dd01      	ble.n	3f9c <_printf_common+0x7c>
    3f98:	1a9b      	subs	r3, r3, r2
    3f9a:	18ed      	adds	r5, r5, r3
    3f9c:	2700      	movs	r7, #0
    3f9e:	42bd      	cmp	r5, r7
    3fa0:	d120      	bne.n	3fe4 <_printf_common+0xc4>
    3fa2:	2000      	movs	r0, #0
    3fa4:	e010      	b.n	3fc8 <_printf_common+0xa8>
    3fa6:	3701      	adds	r7, #1
    3fa8:	68e3      	ldr	r3, [r4, #12]
    3faa:	682a      	ldr	r2, [r5, #0]
    3fac:	1a9b      	subs	r3, r3, r2
    3fae:	429f      	cmp	r7, r3
    3fb0:	dad2      	bge.n	3f58 <_printf_common+0x38>
    3fb2:	0022      	movs	r2, r4
    3fb4:	2301      	movs	r3, #1
    3fb6:	3219      	adds	r2, #25
    3fb8:	9901      	ldr	r1, [sp, #4]
    3fba:	9800      	ldr	r0, [sp, #0]
    3fbc:	9e08      	ldr	r6, [sp, #32]
    3fbe:	47b0      	blx	r6
    3fc0:	1c43      	adds	r3, r0, #1
    3fc2:	d1f0      	bne.n	3fa6 <_printf_common+0x86>
    3fc4:	2001      	movs	r0, #1
    3fc6:	4240      	negs	r0, r0
    3fc8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3fca:	2030      	movs	r0, #48	; 0x30
    3fcc:	18e1      	adds	r1, r4, r3
    3fce:	3143      	adds	r1, #67	; 0x43
    3fd0:	7008      	strb	r0, [r1, #0]
    3fd2:	0021      	movs	r1, r4
    3fd4:	1c5a      	adds	r2, r3, #1
    3fd6:	3145      	adds	r1, #69	; 0x45
    3fd8:	7809      	ldrb	r1, [r1, #0]
    3fda:	18a2      	adds	r2, r4, r2
    3fdc:	3243      	adds	r2, #67	; 0x43
    3fde:	3302      	adds	r3, #2
    3fe0:	7011      	strb	r1, [r2, #0]
    3fe2:	e7c1      	b.n	3f68 <_printf_common+0x48>
    3fe4:	0022      	movs	r2, r4
    3fe6:	2301      	movs	r3, #1
    3fe8:	321a      	adds	r2, #26
    3fea:	9901      	ldr	r1, [sp, #4]
    3fec:	9800      	ldr	r0, [sp, #0]
    3fee:	9e08      	ldr	r6, [sp, #32]
    3ff0:	47b0      	blx	r6
    3ff2:	1c43      	adds	r3, r0, #1
    3ff4:	d0e6      	beq.n	3fc4 <_printf_common+0xa4>
    3ff6:	3701      	adds	r7, #1
    3ff8:	e7d1      	b.n	3f9e <_printf_common+0x7e>
	...

00003ffc <_printf_i>:
    3ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
    3ffe:	b08b      	sub	sp, #44	; 0x2c
    4000:	9206      	str	r2, [sp, #24]
    4002:	000a      	movs	r2, r1
    4004:	3243      	adds	r2, #67	; 0x43
    4006:	9307      	str	r3, [sp, #28]
    4008:	9005      	str	r0, [sp, #20]
    400a:	9204      	str	r2, [sp, #16]
    400c:	7e0a      	ldrb	r2, [r1, #24]
    400e:	000c      	movs	r4, r1
    4010:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4012:	2a6e      	cmp	r2, #110	; 0x6e
    4014:	d100      	bne.n	4018 <_printf_i+0x1c>
    4016:	e08f      	b.n	4138 <_printf_i+0x13c>
    4018:	d817      	bhi.n	404a <_printf_i+0x4e>
    401a:	2a63      	cmp	r2, #99	; 0x63
    401c:	d02c      	beq.n	4078 <_printf_i+0x7c>
    401e:	d808      	bhi.n	4032 <_printf_i+0x36>
    4020:	2a00      	cmp	r2, #0
    4022:	d100      	bne.n	4026 <_printf_i+0x2a>
    4024:	e099      	b.n	415a <_printf_i+0x15e>
    4026:	2a58      	cmp	r2, #88	; 0x58
    4028:	d054      	beq.n	40d4 <_printf_i+0xd8>
    402a:	0026      	movs	r6, r4
    402c:	3642      	adds	r6, #66	; 0x42
    402e:	7032      	strb	r2, [r6, #0]
    4030:	e029      	b.n	4086 <_printf_i+0x8a>
    4032:	2a64      	cmp	r2, #100	; 0x64
    4034:	d001      	beq.n	403a <_printf_i+0x3e>
    4036:	2a69      	cmp	r2, #105	; 0x69
    4038:	d1f7      	bne.n	402a <_printf_i+0x2e>
    403a:	6821      	ldr	r1, [r4, #0]
    403c:	681a      	ldr	r2, [r3, #0]
    403e:	0608      	lsls	r0, r1, #24
    4040:	d523      	bpl.n	408a <_printf_i+0x8e>
    4042:	1d11      	adds	r1, r2, #4
    4044:	6019      	str	r1, [r3, #0]
    4046:	6815      	ldr	r5, [r2, #0]
    4048:	e025      	b.n	4096 <_printf_i+0x9a>
    404a:	2a73      	cmp	r2, #115	; 0x73
    404c:	d100      	bne.n	4050 <_printf_i+0x54>
    404e:	e088      	b.n	4162 <_printf_i+0x166>
    4050:	d808      	bhi.n	4064 <_printf_i+0x68>
    4052:	2a6f      	cmp	r2, #111	; 0x6f
    4054:	d029      	beq.n	40aa <_printf_i+0xae>
    4056:	2a70      	cmp	r2, #112	; 0x70
    4058:	d1e7      	bne.n	402a <_printf_i+0x2e>
    405a:	2220      	movs	r2, #32
    405c:	6809      	ldr	r1, [r1, #0]
    405e:	430a      	orrs	r2, r1
    4060:	6022      	str	r2, [r4, #0]
    4062:	e003      	b.n	406c <_printf_i+0x70>
    4064:	2a75      	cmp	r2, #117	; 0x75
    4066:	d020      	beq.n	40aa <_printf_i+0xae>
    4068:	2a78      	cmp	r2, #120	; 0x78
    406a:	d1de      	bne.n	402a <_printf_i+0x2e>
    406c:	0022      	movs	r2, r4
    406e:	2178      	movs	r1, #120	; 0x78
    4070:	3245      	adds	r2, #69	; 0x45
    4072:	7011      	strb	r1, [r2, #0]
    4074:	4a6c      	ldr	r2, [pc, #432]	; (4228 <_printf_i+0x22c>)
    4076:	e030      	b.n	40da <_printf_i+0xde>
    4078:	000e      	movs	r6, r1
    407a:	681a      	ldr	r2, [r3, #0]
    407c:	3642      	adds	r6, #66	; 0x42
    407e:	1d11      	adds	r1, r2, #4
    4080:	6019      	str	r1, [r3, #0]
    4082:	6813      	ldr	r3, [r2, #0]
    4084:	7033      	strb	r3, [r6, #0]
    4086:	2301      	movs	r3, #1
    4088:	e079      	b.n	417e <_printf_i+0x182>
    408a:	0649      	lsls	r1, r1, #25
    408c:	d5d9      	bpl.n	4042 <_printf_i+0x46>
    408e:	1d11      	adds	r1, r2, #4
    4090:	6019      	str	r1, [r3, #0]
    4092:	2300      	movs	r3, #0
    4094:	5ed5      	ldrsh	r5, [r2, r3]
    4096:	2d00      	cmp	r5, #0
    4098:	da03      	bge.n	40a2 <_printf_i+0xa6>
    409a:	232d      	movs	r3, #45	; 0x2d
    409c:	9a04      	ldr	r2, [sp, #16]
    409e:	426d      	negs	r5, r5
    40a0:	7013      	strb	r3, [r2, #0]
    40a2:	4b62      	ldr	r3, [pc, #392]	; (422c <_printf_i+0x230>)
    40a4:	270a      	movs	r7, #10
    40a6:	9303      	str	r3, [sp, #12]
    40a8:	e02f      	b.n	410a <_printf_i+0x10e>
    40aa:	6820      	ldr	r0, [r4, #0]
    40ac:	6819      	ldr	r1, [r3, #0]
    40ae:	0605      	lsls	r5, r0, #24
    40b0:	d503      	bpl.n	40ba <_printf_i+0xbe>
    40b2:	1d08      	adds	r0, r1, #4
    40b4:	6018      	str	r0, [r3, #0]
    40b6:	680d      	ldr	r5, [r1, #0]
    40b8:	e005      	b.n	40c6 <_printf_i+0xca>
    40ba:	0640      	lsls	r0, r0, #25
    40bc:	d5f9      	bpl.n	40b2 <_printf_i+0xb6>
    40be:	680d      	ldr	r5, [r1, #0]
    40c0:	1d08      	adds	r0, r1, #4
    40c2:	6018      	str	r0, [r3, #0]
    40c4:	b2ad      	uxth	r5, r5
    40c6:	4b59      	ldr	r3, [pc, #356]	; (422c <_printf_i+0x230>)
    40c8:	2708      	movs	r7, #8
    40ca:	9303      	str	r3, [sp, #12]
    40cc:	2a6f      	cmp	r2, #111	; 0x6f
    40ce:	d018      	beq.n	4102 <_printf_i+0x106>
    40d0:	270a      	movs	r7, #10
    40d2:	e016      	b.n	4102 <_printf_i+0x106>
    40d4:	3145      	adds	r1, #69	; 0x45
    40d6:	700a      	strb	r2, [r1, #0]
    40d8:	4a54      	ldr	r2, [pc, #336]	; (422c <_printf_i+0x230>)
    40da:	9203      	str	r2, [sp, #12]
    40dc:	681a      	ldr	r2, [r3, #0]
    40de:	6821      	ldr	r1, [r4, #0]
    40e0:	1d10      	adds	r0, r2, #4
    40e2:	6018      	str	r0, [r3, #0]
    40e4:	6815      	ldr	r5, [r2, #0]
    40e6:	0608      	lsls	r0, r1, #24
    40e8:	d522      	bpl.n	4130 <_printf_i+0x134>
    40ea:	07cb      	lsls	r3, r1, #31
    40ec:	d502      	bpl.n	40f4 <_printf_i+0xf8>
    40ee:	2320      	movs	r3, #32
    40f0:	4319      	orrs	r1, r3
    40f2:	6021      	str	r1, [r4, #0]
    40f4:	2710      	movs	r7, #16
    40f6:	2d00      	cmp	r5, #0
    40f8:	d103      	bne.n	4102 <_printf_i+0x106>
    40fa:	2320      	movs	r3, #32
    40fc:	6822      	ldr	r2, [r4, #0]
    40fe:	439a      	bics	r2, r3
    4100:	6022      	str	r2, [r4, #0]
    4102:	0023      	movs	r3, r4
    4104:	2200      	movs	r2, #0
    4106:	3343      	adds	r3, #67	; 0x43
    4108:	701a      	strb	r2, [r3, #0]
    410a:	6863      	ldr	r3, [r4, #4]
    410c:	60a3      	str	r3, [r4, #8]
    410e:	2b00      	cmp	r3, #0
    4110:	db5c      	blt.n	41cc <_printf_i+0x1d0>
    4112:	2204      	movs	r2, #4
    4114:	6821      	ldr	r1, [r4, #0]
    4116:	4391      	bics	r1, r2
    4118:	6021      	str	r1, [r4, #0]
    411a:	2d00      	cmp	r5, #0
    411c:	d158      	bne.n	41d0 <_printf_i+0x1d4>
    411e:	9e04      	ldr	r6, [sp, #16]
    4120:	2b00      	cmp	r3, #0
    4122:	d064      	beq.n	41ee <_printf_i+0x1f2>
    4124:	0026      	movs	r6, r4
    4126:	9b03      	ldr	r3, [sp, #12]
    4128:	3642      	adds	r6, #66	; 0x42
    412a:	781b      	ldrb	r3, [r3, #0]
    412c:	7033      	strb	r3, [r6, #0]
    412e:	e05e      	b.n	41ee <_printf_i+0x1f2>
    4130:	0648      	lsls	r0, r1, #25
    4132:	d5da      	bpl.n	40ea <_printf_i+0xee>
    4134:	b2ad      	uxth	r5, r5
    4136:	e7d8      	b.n	40ea <_printf_i+0xee>
    4138:	6809      	ldr	r1, [r1, #0]
    413a:	681a      	ldr	r2, [r3, #0]
    413c:	0608      	lsls	r0, r1, #24
    413e:	d505      	bpl.n	414c <_printf_i+0x150>
    4140:	1d11      	adds	r1, r2, #4
    4142:	6019      	str	r1, [r3, #0]
    4144:	6813      	ldr	r3, [r2, #0]
    4146:	6962      	ldr	r2, [r4, #20]
    4148:	601a      	str	r2, [r3, #0]
    414a:	e006      	b.n	415a <_printf_i+0x15e>
    414c:	0649      	lsls	r1, r1, #25
    414e:	d5f7      	bpl.n	4140 <_printf_i+0x144>
    4150:	1d11      	adds	r1, r2, #4
    4152:	6019      	str	r1, [r3, #0]
    4154:	6813      	ldr	r3, [r2, #0]
    4156:	8aa2      	ldrh	r2, [r4, #20]
    4158:	801a      	strh	r2, [r3, #0]
    415a:	2300      	movs	r3, #0
    415c:	9e04      	ldr	r6, [sp, #16]
    415e:	6123      	str	r3, [r4, #16]
    4160:	e054      	b.n	420c <_printf_i+0x210>
    4162:	681a      	ldr	r2, [r3, #0]
    4164:	1d11      	adds	r1, r2, #4
    4166:	6019      	str	r1, [r3, #0]
    4168:	6816      	ldr	r6, [r2, #0]
    416a:	2100      	movs	r1, #0
    416c:	6862      	ldr	r2, [r4, #4]
    416e:	0030      	movs	r0, r6
    4170:	f000 fa1c 	bl	45ac <memchr>
    4174:	2800      	cmp	r0, #0
    4176:	d001      	beq.n	417c <_printf_i+0x180>
    4178:	1b80      	subs	r0, r0, r6
    417a:	6060      	str	r0, [r4, #4]
    417c:	6863      	ldr	r3, [r4, #4]
    417e:	6123      	str	r3, [r4, #16]
    4180:	2300      	movs	r3, #0
    4182:	9a04      	ldr	r2, [sp, #16]
    4184:	7013      	strb	r3, [r2, #0]
    4186:	e041      	b.n	420c <_printf_i+0x210>
    4188:	6923      	ldr	r3, [r4, #16]
    418a:	0032      	movs	r2, r6
    418c:	9906      	ldr	r1, [sp, #24]
    418e:	9805      	ldr	r0, [sp, #20]
    4190:	9d07      	ldr	r5, [sp, #28]
    4192:	47a8      	blx	r5
    4194:	1c43      	adds	r3, r0, #1
    4196:	d043      	beq.n	4220 <_printf_i+0x224>
    4198:	6823      	ldr	r3, [r4, #0]
    419a:	2500      	movs	r5, #0
    419c:	079b      	lsls	r3, r3, #30
    419e:	d40f      	bmi.n	41c0 <_printf_i+0x1c4>
    41a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    41a2:	68e0      	ldr	r0, [r4, #12]
    41a4:	4298      	cmp	r0, r3
    41a6:	da3d      	bge.n	4224 <_printf_i+0x228>
    41a8:	0018      	movs	r0, r3
    41aa:	e03b      	b.n	4224 <_printf_i+0x228>
    41ac:	0022      	movs	r2, r4
    41ae:	2301      	movs	r3, #1
    41b0:	3219      	adds	r2, #25
    41b2:	9906      	ldr	r1, [sp, #24]
    41b4:	9805      	ldr	r0, [sp, #20]
    41b6:	9e07      	ldr	r6, [sp, #28]
    41b8:	47b0      	blx	r6
    41ba:	1c43      	adds	r3, r0, #1
    41bc:	d030      	beq.n	4220 <_printf_i+0x224>
    41be:	3501      	adds	r5, #1
    41c0:	68e3      	ldr	r3, [r4, #12]
    41c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    41c4:	1a9b      	subs	r3, r3, r2
    41c6:	429d      	cmp	r5, r3
    41c8:	dbf0      	blt.n	41ac <_printf_i+0x1b0>
    41ca:	e7e9      	b.n	41a0 <_printf_i+0x1a4>
    41cc:	2d00      	cmp	r5, #0
    41ce:	d0a9      	beq.n	4124 <_printf_i+0x128>
    41d0:	9e04      	ldr	r6, [sp, #16]
    41d2:	0028      	movs	r0, r5
    41d4:	0039      	movs	r1, r7
    41d6:	f7ff f8a1 	bl	331c <__aeabi_uidivmod>
    41da:	9b03      	ldr	r3, [sp, #12]
    41dc:	3e01      	subs	r6, #1
    41de:	5c5b      	ldrb	r3, [r3, r1]
    41e0:	0028      	movs	r0, r5
    41e2:	7033      	strb	r3, [r6, #0]
    41e4:	0039      	movs	r1, r7
    41e6:	f7ff f813 	bl	3210 <__udivsi3>
    41ea:	1e05      	subs	r5, r0, #0
    41ec:	d1f1      	bne.n	41d2 <_printf_i+0x1d6>
    41ee:	2f08      	cmp	r7, #8
    41f0:	d109      	bne.n	4206 <_printf_i+0x20a>
    41f2:	6823      	ldr	r3, [r4, #0]
    41f4:	07db      	lsls	r3, r3, #31
    41f6:	d506      	bpl.n	4206 <_printf_i+0x20a>
    41f8:	6863      	ldr	r3, [r4, #4]
    41fa:	6922      	ldr	r2, [r4, #16]
    41fc:	4293      	cmp	r3, r2
    41fe:	dc02      	bgt.n	4206 <_printf_i+0x20a>
    4200:	2330      	movs	r3, #48	; 0x30
    4202:	3e01      	subs	r6, #1
    4204:	7033      	strb	r3, [r6, #0]
    4206:	9b04      	ldr	r3, [sp, #16]
    4208:	1b9b      	subs	r3, r3, r6
    420a:	6123      	str	r3, [r4, #16]
    420c:	9b07      	ldr	r3, [sp, #28]
    420e:	aa09      	add	r2, sp, #36	; 0x24
    4210:	9300      	str	r3, [sp, #0]
    4212:	0021      	movs	r1, r4
    4214:	9b06      	ldr	r3, [sp, #24]
    4216:	9805      	ldr	r0, [sp, #20]
    4218:	f7ff fe82 	bl	3f20 <_printf_common>
    421c:	1c43      	adds	r3, r0, #1
    421e:	d1b3      	bne.n	4188 <_printf_i+0x18c>
    4220:	2001      	movs	r0, #1
    4222:	4240      	negs	r0, r0
    4224:	b00b      	add	sp, #44	; 0x2c
    4226:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4228:	0000682e 	.word	0x0000682e
    422c:	0000681d 	.word	0x0000681d

00004230 <_putc_r>:
    4230:	b570      	push	{r4, r5, r6, lr}
    4232:	0006      	movs	r6, r0
    4234:	000d      	movs	r5, r1
    4236:	0014      	movs	r4, r2
    4238:	2800      	cmp	r0, #0
    423a:	d004      	beq.n	4246 <_putc_r+0x16>
    423c:	6983      	ldr	r3, [r0, #24]
    423e:	2b00      	cmp	r3, #0
    4240:	d101      	bne.n	4246 <_putc_r+0x16>
    4242:	f7ff fb75 	bl	3930 <__sinit>
    4246:	4b12      	ldr	r3, [pc, #72]	; (4290 <_putc_r+0x60>)
    4248:	429c      	cmp	r4, r3
    424a:	d111      	bne.n	4270 <_putc_r+0x40>
    424c:	6874      	ldr	r4, [r6, #4]
    424e:	68a3      	ldr	r3, [r4, #8]
    4250:	3b01      	subs	r3, #1
    4252:	60a3      	str	r3, [r4, #8]
    4254:	2b00      	cmp	r3, #0
    4256:	da05      	bge.n	4264 <_putc_r+0x34>
    4258:	69a2      	ldr	r2, [r4, #24]
    425a:	4293      	cmp	r3, r2
    425c:	db12      	blt.n	4284 <_putc_r+0x54>
    425e:	b2eb      	uxtb	r3, r5
    4260:	2b0a      	cmp	r3, #10
    4262:	d00f      	beq.n	4284 <_putc_r+0x54>
    4264:	6823      	ldr	r3, [r4, #0]
    4266:	b2e8      	uxtb	r0, r5
    4268:	1c5a      	adds	r2, r3, #1
    426a:	6022      	str	r2, [r4, #0]
    426c:	701d      	strb	r5, [r3, #0]
    426e:	bd70      	pop	{r4, r5, r6, pc}
    4270:	4b08      	ldr	r3, [pc, #32]	; (4294 <_putc_r+0x64>)
    4272:	429c      	cmp	r4, r3
    4274:	d101      	bne.n	427a <_putc_r+0x4a>
    4276:	68b4      	ldr	r4, [r6, #8]
    4278:	e7e9      	b.n	424e <_putc_r+0x1e>
    427a:	4b07      	ldr	r3, [pc, #28]	; (4298 <_putc_r+0x68>)
    427c:	429c      	cmp	r4, r3
    427e:	d1e6      	bne.n	424e <_putc_r+0x1e>
    4280:	68f4      	ldr	r4, [r6, #12]
    4282:	e7e4      	b.n	424e <_putc_r+0x1e>
    4284:	0022      	movs	r2, r4
    4286:	0029      	movs	r1, r5
    4288:	0030      	movs	r0, r6
    428a:	f000 f865 	bl	4358 <__swbuf_r>
    428e:	e7ee      	b.n	426e <_putc_r+0x3e>
    4290:	000067cc 	.word	0x000067cc
    4294:	000067ec 	.word	0x000067ec
    4298:	000067ac 	.word	0x000067ac

0000429c <_sbrk_r>:
    429c:	2300      	movs	r3, #0
    429e:	b570      	push	{r4, r5, r6, lr}
    42a0:	4c06      	ldr	r4, [pc, #24]	; (42bc <_sbrk_r+0x20>)
    42a2:	0005      	movs	r5, r0
    42a4:	0008      	movs	r0, r1
    42a6:	6023      	str	r3, [r4, #0]
    42a8:	f7fd fd7a 	bl	1da0 <_sbrk>
    42ac:	1c43      	adds	r3, r0, #1
    42ae:	d103      	bne.n	42b8 <_sbrk_r+0x1c>
    42b0:	6823      	ldr	r3, [r4, #0]
    42b2:	2b00      	cmp	r3, #0
    42b4:	d000      	beq.n	42b8 <_sbrk_r+0x1c>
    42b6:	602b      	str	r3, [r5, #0]
    42b8:	bd70      	pop	{r4, r5, r6, pc}
    42ba:	46c0      	nop			; (mov r8, r8)
    42bc:	20000ab4 	.word	0x20000ab4

000042c0 <__sread>:
    42c0:	b570      	push	{r4, r5, r6, lr}
    42c2:	000c      	movs	r4, r1
    42c4:	250e      	movs	r5, #14
    42c6:	5f49      	ldrsh	r1, [r1, r5]
    42c8:	f000 f97e 	bl	45c8 <_read_r>
    42cc:	2800      	cmp	r0, #0
    42ce:	db03      	blt.n	42d8 <__sread+0x18>
    42d0:	6d63      	ldr	r3, [r4, #84]	; 0x54
    42d2:	181b      	adds	r3, r3, r0
    42d4:	6563      	str	r3, [r4, #84]	; 0x54
    42d6:	bd70      	pop	{r4, r5, r6, pc}
    42d8:	89a3      	ldrh	r3, [r4, #12]
    42da:	4a02      	ldr	r2, [pc, #8]	; (42e4 <__sread+0x24>)
    42dc:	4013      	ands	r3, r2
    42de:	81a3      	strh	r3, [r4, #12]
    42e0:	e7f9      	b.n	42d6 <__sread+0x16>
    42e2:	46c0      	nop			; (mov r8, r8)
    42e4:	ffffefff 	.word	0xffffefff

000042e8 <__swrite>:
    42e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    42ea:	001f      	movs	r7, r3
    42ec:	898b      	ldrh	r3, [r1, #12]
    42ee:	0005      	movs	r5, r0
    42f0:	000c      	movs	r4, r1
    42f2:	0016      	movs	r6, r2
    42f4:	05db      	lsls	r3, r3, #23
    42f6:	d505      	bpl.n	4304 <__swrite+0x1c>
    42f8:	230e      	movs	r3, #14
    42fa:	5ec9      	ldrsh	r1, [r1, r3]
    42fc:	2200      	movs	r2, #0
    42fe:	2302      	movs	r3, #2
    4300:	f000 f940 	bl	4584 <_lseek_r>
    4304:	89a3      	ldrh	r3, [r4, #12]
    4306:	4a05      	ldr	r2, [pc, #20]	; (431c <__swrite+0x34>)
    4308:	0028      	movs	r0, r5
    430a:	4013      	ands	r3, r2
    430c:	81a3      	strh	r3, [r4, #12]
    430e:	0032      	movs	r2, r6
    4310:	230e      	movs	r3, #14
    4312:	5ee1      	ldrsh	r1, [r4, r3]
    4314:	003b      	movs	r3, r7
    4316:	f000 f875 	bl	4404 <_write_r>
    431a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    431c:	ffffefff 	.word	0xffffefff

00004320 <__sseek>:
    4320:	b570      	push	{r4, r5, r6, lr}
    4322:	000c      	movs	r4, r1
    4324:	250e      	movs	r5, #14
    4326:	5f49      	ldrsh	r1, [r1, r5]
    4328:	f000 f92c 	bl	4584 <_lseek_r>
    432c:	89a3      	ldrh	r3, [r4, #12]
    432e:	1c42      	adds	r2, r0, #1
    4330:	d103      	bne.n	433a <__sseek+0x1a>
    4332:	4a05      	ldr	r2, [pc, #20]	; (4348 <__sseek+0x28>)
    4334:	4013      	ands	r3, r2
    4336:	81a3      	strh	r3, [r4, #12]
    4338:	bd70      	pop	{r4, r5, r6, pc}
    433a:	2280      	movs	r2, #128	; 0x80
    433c:	0152      	lsls	r2, r2, #5
    433e:	4313      	orrs	r3, r2
    4340:	81a3      	strh	r3, [r4, #12]
    4342:	6560      	str	r0, [r4, #84]	; 0x54
    4344:	e7f8      	b.n	4338 <__sseek+0x18>
    4346:	46c0      	nop			; (mov r8, r8)
    4348:	ffffefff 	.word	0xffffefff

0000434c <__sclose>:
    434c:	b510      	push	{r4, lr}
    434e:	230e      	movs	r3, #14
    4350:	5ec9      	ldrsh	r1, [r1, r3]
    4352:	f000 f8e1 	bl	4518 <_close_r>
    4356:	bd10      	pop	{r4, pc}

00004358 <__swbuf_r>:
    4358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    435a:	0005      	movs	r5, r0
    435c:	000e      	movs	r6, r1
    435e:	0014      	movs	r4, r2
    4360:	2800      	cmp	r0, #0
    4362:	d004      	beq.n	436e <__swbuf_r+0x16>
    4364:	6983      	ldr	r3, [r0, #24]
    4366:	2b00      	cmp	r3, #0
    4368:	d101      	bne.n	436e <__swbuf_r+0x16>
    436a:	f7ff fae1 	bl	3930 <__sinit>
    436e:	4b22      	ldr	r3, [pc, #136]	; (43f8 <__swbuf_r+0xa0>)
    4370:	429c      	cmp	r4, r3
    4372:	d12d      	bne.n	43d0 <__swbuf_r+0x78>
    4374:	686c      	ldr	r4, [r5, #4]
    4376:	69a3      	ldr	r3, [r4, #24]
    4378:	60a3      	str	r3, [r4, #8]
    437a:	89a3      	ldrh	r3, [r4, #12]
    437c:	071b      	lsls	r3, r3, #28
    437e:	d531      	bpl.n	43e4 <__swbuf_r+0x8c>
    4380:	6923      	ldr	r3, [r4, #16]
    4382:	2b00      	cmp	r3, #0
    4384:	d02e      	beq.n	43e4 <__swbuf_r+0x8c>
    4386:	6823      	ldr	r3, [r4, #0]
    4388:	6922      	ldr	r2, [r4, #16]
    438a:	b2f7      	uxtb	r7, r6
    438c:	1a98      	subs	r0, r3, r2
    438e:	6963      	ldr	r3, [r4, #20]
    4390:	b2f6      	uxtb	r6, r6
    4392:	4298      	cmp	r0, r3
    4394:	db05      	blt.n	43a2 <__swbuf_r+0x4a>
    4396:	0021      	movs	r1, r4
    4398:	0028      	movs	r0, r5
    439a:	f7ff fa5b 	bl	3854 <_fflush_r>
    439e:	2800      	cmp	r0, #0
    43a0:	d126      	bne.n	43f0 <__swbuf_r+0x98>
    43a2:	68a3      	ldr	r3, [r4, #8]
    43a4:	3001      	adds	r0, #1
    43a6:	3b01      	subs	r3, #1
    43a8:	60a3      	str	r3, [r4, #8]
    43aa:	6823      	ldr	r3, [r4, #0]
    43ac:	1c5a      	adds	r2, r3, #1
    43ae:	6022      	str	r2, [r4, #0]
    43b0:	701f      	strb	r7, [r3, #0]
    43b2:	6963      	ldr	r3, [r4, #20]
    43b4:	4298      	cmp	r0, r3
    43b6:	d004      	beq.n	43c2 <__swbuf_r+0x6a>
    43b8:	89a3      	ldrh	r3, [r4, #12]
    43ba:	07db      	lsls	r3, r3, #31
    43bc:	d51a      	bpl.n	43f4 <__swbuf_r+0x9c>
    43be:	2e0a      	cmp	r6, #10
    43c0:	d118      	bne.n	43f4 <__swbuf_r+0x9c>
    43c2:	0021      	movs	r1, r4
    43c4:	0028      	movs	r0, r5
    43c6:	f7ff fa45 	bl	3854 <_fflush_r>
    43ca:	2800      	cmp	r0, #0
    43cc:	d012      	beq.n	43f4 <__swbuf_r+0x9c>
    43ce:	e00f      	b.n	43f0 <__swbuf_r+0x98>
    43d0:	4b0a      	ldr	r3, [pc, #40]	; (43fc <__swbuf_r+0xa4>)
    43d2:	429c      	cmp	r4, r3
    43d4:	d101      	bne.n	43da <__swbuf_r+0x82>
    43d6:	68ac      	ldr	r4, [r5, #8]
    43d8:	e7cd      	b.n	4376 <__swbuf_r+0x1e>
    43da:	4b09      	ldr	r3, [pc, #36]	; (4400 <__swbuf_r+0xa8>)
    43dc:	429c      	cmp	r4, r3
    43de:	d1ca      	bne.n	4376 <__swbuf_r+0x1e>
    43e0:	68ec      	ldr	r4, [r5, #12]
    43e2:	e7c8      	b.n	4376 <__swbuf_r+0x1e>
    43e4:	0021      	movs	r1, r4
    43e6:	0028      	movs	r0, r5
    43e8:	f000 f820 	bl	442c <__swsetup_r>
    43ec:	2800      	cmp	r0, #0
    43ee:	d0ca      	beq.n	4386 <__swbuf_r+0x2e>
    43f0:	2601      	movs	r6, #1
    43f2:	4276      	negs	r6, r6
    43f4:	0030      	movs	r0, r6
    43f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    43f8:	000067cc 	.word	0x000067cc
    43fc:	000067ec 	.word	0x000067ec
    4400:	000067ac 	.word	0x000067ac

00004404 <_write_r>:
    4404:	b570      	push	{r4, r5, r6, lr}
    4406:	0005      	movs	r5, r0
    4408:	0008      	movs	r0, r1
    440a:	0011      	movs	r1, r2
    440c:	2200      	movs	r2, #0
    440e:	4c06      	ldr	r4, [pc, #24]	; (4428 <_write_r+0x24>)
    4410:	6022      	str	r2, [r4, #0]
    4412:	001a      	movs	r2, r3
    4414:	f7fd fc9c 	bl	1d50 <_write>
    4418:	1c43      	adds	r3, r0, #1
    441a:	d103      	bne.n	4424 <_write_r+0x20>
    441c:	6823      	ldr	r3, [r4, #0]
    441e:	2b00      	cmp	r3, #0
    4420:	d000      	beq.n	4424 <_write_r+0x20>
    4422:	602b      	str	r3, [r5, #0]
    4424:	bd70      	pop	{r4, r5, r6, pc}
    4426:	46c0      	nop			; (mov r8, r8)
    4428:	20000ab4 	.word	0x20000ab4

0000442c <__swsetup_r>:
    442c:	4b36      	ldr	r3, [pc, #216]	; (4508 <__swsetup_r+0xdc>)
    442e:	b570      	push	{r4, r5, r6, lr}
    4430:	681d      	ldr	r5, [r3, #0]
    4432:	0006      	movs	r6, r0
    4434:	000c      	movs	r4, r1
    4436:	2d00      	cmp	r5, #0
    4438:	d005      	beq.n	4446 <__swsetup_r+0x1a>
    443a:	69ab      	ldr	r3, [r5, #24]
    443c:	2b00      	cmp	r3, #0
    443e:	d102      	bne.n	4446 <__swsetup_r+0x1a>
    4440:	0028      	movs	r0, r5
    4442:	f7ff fa75 	bl	3930 <__sinit>
    4446:	4b31      	ldr	r3, [pc, #196]	; (450c <__swsetup_r+0xe0>)
    4448:	429c      	cmp	r4, r3
    444a:	d10f      	bne.n	446c <__swsetup_r+0x40>
    444c:	686c      	ldr	r4, [r5, #4]
    444e:	230c      	movs	r3, #12
    4450:	5ee2      	ldrsh	r2, [r4, r3]
    4452:	b293      	uxth	r3, r2
    4454:	0719      	lsls	r1, r3, #28
    4456:	d42d      	bmi.n	44b4 <__swsetup_r+0x88>
    4458:	06d9      	lsls	r1, r3, #27
    445a:	d411      	bmi.n	4480 <__swsetup_r+0x54>
    445c:	2309      	movs	r3, #9
    445e:	2001      	movs	r0, #1
    4460:	6033      	str	r3, [r6, #0]
    4462:	3337      	adds	r3, #55	; 0x37
    4464:	4313      	orrs	r3, r2
    4466:	81a3      	strh	r3, [r4, #12]
    4468:	4240      	negs	r0, r0
    446a:	bd70      	pop	{r4, r5, r6, pc}
    446c:	4b28      	ldr	r3, [pc, #160]	; (4510 <__swsetup_r+0xe4>)
    446e:	429c      	cmp	r4, r3
    4470:	d101      	bne.n	4476 <__swsetup_r+0x4a>
    4472:	68ac      	ldr	r4, [r5, #8]
    4474:	e7eb      	b.n	444e <__swsetup_r+0x22>
    4476:	4b27      	ldr	r3, [pc, #156]	; (4514 <__swsetup_r+0xe8>)
    4478:	429c      	cmp	r4, r3
    447a:	d1e8      	bne.n	444e <__swsetup_r+0x22>
    447c:	68ec      	ldr	r4, [r5, #12]
    447e:	e7e6      	b.n	444e <__swsetup_r+0x22>
    4480:	075b      	lsls	r3, r3, #29
    4482:	d513      	bpl.n	44ac <__swsetup_r+0x80>
    4484:	6b61      	ldr	r1, [r4, #52]	; 0x34
    4486:	2900      	cmp	r1, #0
    4488:	d008      	beq.n	449c <__swsetup_r+0x70>
    448a:	0023      	movs	r3, r4
    448c:	3344      	adds	r3, #68	; 0x44
    448e:	4299      	cmp	r1, r3
    4490:	d002      	beq.n	4498 <__swsetup_r+0x6c>
    4492:	0030      	movs	r0, r6
    4494:	f7ff fb58 	bl	3b48 <_free_r>
    4498:	2300      	movs	r3, #0
    449a:	6363      	str	r3, [r4, #52]	; 0x34
    449c:	2224      	movs	r2, #36	; 0x24
    449e:	89a3      	ldrh	r3, [r4, #12]
    44a0:	4393      	bics	r3, r2
    44a2:	81a3      	strh	r3, [r4, #12]
    44a4:	2300      	movs	r3, #0
    44a6:	6063      	str	r3, [r4, #4]
    44a8:	6923      	ldr	r3, [r4, #16]
    44aa:	6023      	str	r3, [r4, #0]
    44ac:	2308      	movs	r3, #8
    44ae:	89a2      	ldrh	r2, [r4, #12]
    44b0:	4313      	orrs	r3, r2
    44b2:	81a3      	strh	r3, [r4, #12]
    44b4:	6923      	ldr	r3, [r4, #16]
    44b6:	2b00      	cmp	r3, #0
    44b8:	d10b      	bne.n	44d2 <__swsetup_r+0xa6>
    44ba:	21a0      	movs	r1, #160	; 0xa0
    44bc:	2280      	movs	r2, #128	; 0x80
    44be:	89a3      	ldrh	r3, [r4, #12]
    44c0:	0089      	lsls	r1, r1, #2
    44c2:	0092      	lsls	r2, r2, #2
    44c4:	400b      	ands	r3, r1
    44c6:	4293      	cmp	r3, r2
    44c8:	d003      	beq.n	44d2 <__swsetup_r+0xa6>
    44ca:	0021      	movs	r1, r4
    44cc:	0030      	movs	r0, r6
    44ce:	f7ff faed 	bl	3aac <__smakebuf_r>
    44d2:	2301      	movs	r3, #1
    44d4:	89a2      	ldrh	r2, [r4, #12]
    44d6:	4013      	ands	r3, r2
    44d8:	d011      	beq.n	44fe <__swsetup_r+0xd2>
    44da:	2300      	movs	r3, #0
    44dc:	60a3      	str	r3, [r4, #8]
    44de:	6963      	ldr	r3, [r4, #20]
    44e0:	425b      	negs	r3, r3
    44e2:	61a3      	str	r3, [r4, #24]
    44e4:	2000      	movs	r0, #0
    44e6:	6923      	ldr	r3, [r4, #16]
    44e8:	4283      	cmp	r3, r0
    44ea:	d1be      	bne.n	446a <__swsetup_r+0x3e>
    44ec:	230c      	movs	r3, #12
    44ee:	5ee2      	ldrsh	r2, [r4, r3]
    44f0:	0613      	lsls	r3, r2, #24
    44f2:	d5ba      	bpl.n	446a <__swsetup_r+0x3e>
    44f4:	2340      	movs	r3, #64	; 0x40
    44f6:	4313      	orrs	r3, r2
    44f8:	81a3      	strh	r3, [r4, #12]
    44fa:	3801      	subs	r0, #1
    44fc:	e7b5      	b.n	446a <__swsetup_r+0x3e>
    44fe:	0792      	lsls	r2, r2, #30
    4500:	d400      	bmi.n	4504 <__swsetup_r+0xd8>
    4502:	6963      	ldr	r3, [r4, #20]
    4504:	60a3      	str	r3, [r4, #8]
    4506:	e7ed      	b.n	44e4 <__swsetup_r+0xb8>
    4508:	20000158 	.word	0x20000158
    450c:	000067cc 	.word	0x000067cc
    4510:	000067ec 	.word	0x000067ec
    4514:	000067ac 	.word	0x000067ac

00004518 <_close_r>:
    4518:	2300      	movs	r3, #0
    451a:	b570      	push	{r4, r5, r6, lr}
    451c:	4c06      	ldr	r4, [pc, #24]	; (4538 <_close_r+0x20>)
    451e:	0005      	movs	r5, r0
    4520:	0008      	movs	r0, r1
    4522:	6023      	str	r3, [r4, #0]
    4524:	f7fd fc4e 	bl	1dc4 <_close>
    4528:	1c43      	adds	r3, r0, #1
    452a:	d103      	bne.n	4534 <_close_r+0x1c>
    452c:	6823      	ldr	r3, [r4, #0]
    452e:	2b00      	cmp	r3, #0
    4530:	d000      	beq.n	4534 <_close_r+0x1c>
    4532:	602b      	str	r3, [r5, #0]
    4534:	bd70      	pop	{r4, r5, r6, pc}
    4536:	46c0      	nop			; (mov r8, r8)
    4538:	20000ab4 	.word	0x20000ab4

0000453c <_fstat_r>:
    453c:	2300      	movs	r3, #0
    453e:	b570      	push	{r4, r5, r6, lr}
    4540:	4c06      	ldr	r4, [pc, #24]	; (455c <_fstat_r+0x20>)
    4542:	0005      	movs	r5, r0
    4544:	0008      	movs	r0, r1
    4546:	0011      	movs	r1, r2
    4548:	6023      	str	r3, [r4, #0]
    454a:	f7fd fc3e 	bl	1dca <_fstat>
    454e:	1c43      	adds	r3, r0, #1
    4550:	d103      	bne.n	455a <_fstat_r+0x1e>
    4552:	6823      	ldr	r3, [r4, #0]
    4554:	2b00      	cmp	r3, #0
    4556:	d000      	beq.n	455a <_fstat_r+0x1e>
    4558:	602b      	str	r3, [r5, #0]
    455a:	bd70      	pop	{r4, r5, r6, pc}
    455c:	20000ab4 	.word	0x20000ab4

00004560 <_isatty_r>:
    4560:	2300      	movs	r3, #0
    4562:	b570      	push	{r4, r5, r6, lr}
    4564:	4c06      	ldr	r4, [pc, #24]	; (4580 <_isatty_r+0x20>)
    4566:	0005      	movs	r5, r0
    4568:	0008      	movs	r0, r1
    456a:	6023      	str	r3, [r4, #0]
    456c:	f7fd fc32 	bl	1dd4 <_isatty>
    4570:	1c43      	adds	r3, r0, #1
    4572:	d103      	bne.n	457c <_isatty_r+0x1c>
    4574:	6823      	ldr	r3, [r4, #0]
    4576:	2b00      	cmp	r3, #0
    4578:	d000      	beq.n	457c <_isatty_r+0x1c>
    457a:	602b      	str	r3, [r5, #0]
    457c:	bd70      	pop	{r4, r5, r6, pc}
    457e:	46c0      	nop			; (mov r8, r8)
    4580:	20000ab4 	.word	0x20000ab4

00004584 <_lseek_r>:
    4584:	b570      	push	{r4, r5, r6, lr}
    4586:	0005      	movs	r5, r0
    4588:	0008      	movs	r0, r1
    458a:	0011      	movs	r1, r2
    458c:	2200      	movs	r2, #0
    458e:	4c06      	ldr	r4, [pc, #24]	; (45a8 <_lseek_r+0x24>)
    4590:	6022      	str	r2, [r4, #0]
    4592:	001a      	movs	r2, r3
    4594:	f7fd fc20 	bl	1dd8 <_lseek>
    4598:	1c43      	adds	r3, r0, #1
    459a:	d103      	bne.n	45a4 <_lseek_r+0x20>
    459c:	6823      	ldr	r3, [r4, #0]
    459e:	2b00      	cmp	r3, #0
    45a0:	d000      	beq.n	45a4 <_lseek_r+0x20>
    45a2:	602b      	str	r3, [r5, #0]
    45a4:	bd70      	pop	{r4, r5, r6, pc}
    45a6:	46c0      	nop			; (mov r8, r8)
    45a8:	20000ab4 	.word	0x20000ab4

000045ac <memchr>:
    45ac:	b2c9      	uxtb	r1, r1
    45ae:	1882      	adds	r2, r0, r2
    45b0:	4290      	cmp	r0, r2
    45b2:	d101      	bne.n	45b8 <memchr+0xc>
    45b4:	2000      	movs	r0, #0
    45b6:	4770      	bx	lr
    45b8:	7803      	ldrb	r3, [r0, #0]
    45ba:	428b      	cmp	r3, r1
    45bc:	d0fb      	beq.n	45b6 <memchr+0xa>
    45be:	3001      	adds	r0, #1
    45c0:	e7f6      	b.n	45b0 <memchr+0x4>

000045c2 <__malloc_lock>:
    45c2:	4770      	bx	lr

000045c4 <__malloc_unlock>:
    45c4:	4770      	bx	lr
	...

000045c8 <_read_r>:
    45c8:	b570      	push	{r4, r5, r6, lr}
    45ca:	0005      	movs	r5, r0
    45cc:	0008      	movs	r0, r1
    45ce:	0011      	movs	r1, r2
    45d0:	2200      	movs	r2, #0
    45d2:	4c06      	ldr	r4, [pc, #24]	; (45ec <_read_r+0x24>)
    45d4:	6022      	str	r2, [r4, #0]
    45d6:	001a      	movs	r2, r3
    45d8:	f7fd fb98 	bl	1d0c <_read>
    45dc:	1c43      	adds	r3, r0, #1
    45de:	d103      	bne.n	45e8 <_read_r+0x20>
    45e0:	6823      	ldr	r3, [r4, #0]
    45e2:	2b00      	cmp	r3, #0
    45e4:	d000      	beq.n	45e8 <_read_r+0x20>
    45e6:	602b      	str	r3, [r5, #0]
    45e8:	bd70      	pop	{r4, r5, r6, pc}
    45ea:	46c0      	nop			; (mov r8, r8)
    45ec:	20000ab4 	.word	0x20000ab4
    45f0:	000a000a 	.word	0x000a000a
    45f4:	00140014 	.word	0x00140014
    45f8:	00000014 	.word	0x00000014
    45fc:	000a017c 	.word	0x000a017c
    4600:	000a017c 	.word	0x000a017c
    4604:	00140186 	.word	0x00140186
    4608:	00140000 	.word	0x00140000
    460c:	0122000a 	.word	0x0122000a
    4610:	00140186 	.word	0x00140186
    4614:	01220190 	.word	0x01220190
    4618:	0122000a 	.word	0x0122000a
    461c:	012c0014 	.word	0x012c0014
    4620:	0122017c 	.word	0x0122017c
    4624:	012c0186 	.word	0x012c0186
    4628:	012c0014 	.word	0x012c0014
    462c:	0136017c 	.word	0x0136017c
    4630:	001e0000 	.word	0x001e0000
    4634:	00280032 	.word	0x00280032
    4638:	00320000 	.word	0x00320000
    463c:	003c0032 	.word	0x003c0032
    4640:	001e0050 	.word	0x001e0050
    4644:	00280118 	.word	0x00280118
    4648:	00280046 	.word	0x00280046
    464c:	00be0050 	.word	0x00be0050
    4650:	00be0050 	.word	0x00be0050
    4654:	00c80118 	.word	0x00c80118
    4658:	00280118 	.word	0x00280118
    465c:	00be0122 	.word	0x00be0122
    4660:	00460000 	.word	0x00460000
    4664:	00500032 	.word	0x00500032
    4668:	005a0000 	.word	0x005a0000
    466c:	00640032 	.word	0x00640032
    4670:	006e0000 	.word	0x006e0000
    4674:	00780032 	.word	0x00780032
    4678:	00820000 	.word	0x00820000
    467c:	008c0032 	.word	0x008c0032
    4680:	00960000 	.word	0x00960000
    4684:	00a00032 	.word	0x00a00032
    4688:	00aa0000 	.word	0x00aa0000
    468c:	00b40032 	.word	0x00b40032
    4690:	00be0000 	.word	0x00be0000
    4694:	00c80032 	.word	0x00c80032
    4698:	00c8012c 	.word	0x00c8012c
    469c:	00d20172 	.word	0x00d20172
    46a0:	00dc001e 	.word	0x00dc001e
    46a4:	00e60172 	.word	0x00e60172
    46a8:	00f0001e 	.word	0x00f0001e
    46ac:	00fa0172 	.word	0x00fa0172
    46b0:	0104001e 	.word	0x0104001e
    46b4:	010e0172 	.word	0x010e0172
    46b8:	0118005a 	.word	0x0118005a
    46bc:	0122012c 	.word	0x0122012c
    46c0:	82be50b4 	.word	0x82be50b4
    46c4:	8cbe82aa 	.word	0x8cbe82aa
    46c8:	64963c8c 	.word	0x64963c8c
    46cc:	64dc3cd2 	.word	0x64dc3cd2
    46d0:	a08c9682 	.word	0xa08c9682
    46d4:	aadca08c 	.word	0xaadca08c
    46d8:	a0e696dc 	.word	0xa0e696dc
    46dc:	50f03c78 	.word	0x50f03c78
    46e0:	5a78466e 	.word	0x5a78466e
    46e4:	aaaa3c96 	.word	0xaaaa3c96
    46e8:	a0dc3cc8 	.word	0xa0dc3cc8
    46ec:	aae6a0d2 	.word	0xaae6a0d2
    46f0:	6e617254 	.word	0x6e617254
    46f4:	69722073 	.word	0x69722073
    46f8:	73746867 	.word	0x73746867
    46fc:	65726120 	.word	0x65726120
    4700:	6d756820 	.word	0x6d756820
    4704:	72206e61 	.word	0x72206e61
    4708:	74686769 	.word	0x74686769
    470c:	00000073 	.word	0x00000073
    4710:	355e3331 	.word	0x355e3331
    4714:	31202b20 	.word	0x31202b20
    4718:	20355e36 	.word	0x20355e36
    471c:	3731203d 	.word	0x3731203d
    4720:	0000355e 	.word	0x0000355e
    4724:	69746552 	.word	0x69746552
    4728:	616c7563 	.word	0x616c7563
    472c:	676e6974 	.word	0x676e6974
    4730:	6c705320 	.word	0x6c705320
    4734:	73656e69 	.word	0x73656e69
    4738:	00000000 	.word	0x00000000
    473c:	6c6f6976 	.word	0x6c6f6976
    4740:	65636e65 	.word	0x65636e65
    4744:	726f772e 	.word	0x726f772e
    4748:	0000736b 	.word	0x0000736b
    474c:	73626154 	.word	0x73626154
    4750:	00000021 	.word	0x00000021
    4754:	6c6c694b 	.word	0x6c6c694b
    4758:	6c694220 	.word	0x6c694220
    475c:	6e6f696c 	.word	0x6e6f696c
    4760:	65726961 	.word	0x65726961
    4764:	61282073 	.word	0x61282073
    4768:	5420646e 	.word	0x5420646e
    476c:	6c6c6972 	.word	0x6c6c6972
    4770:	616e6f69 	.word	0x616e6f69
    4774:	29657269 	.word	0x29657269
    4778:	00000000 	.word	0x00000000
    477c:	65746e49 	.word	0x65746e49
    4780:	74736572 	.word	0x74736572
    4784:	206e6920 	.word	0x206e6920
    4788:	68636574 	.word	0x68636574
    478c:	6f6c6f6e 	.word	0x6f6c6f6e
    4790:	69207967 	.word	0x69207967
    4794:	6f6e2073 	.word	0x6f6e2073
    4798:	20612074 	.word	0x20612074
    479c:	73726570 	.word	0x73726570
    47a0:	6c616e6f 	.word	0x6c616e6f
    47a4:	00797469 	.word	0x00797469
    47a8:	50203031 	.word	0x50203031
    47ac:	544e4952 	.word	0x544e4952
    47b0:	52484320 	.word	0x52484320
    47b4:	30322824 	.word	0x30322824
    47b8:	2b352e35 	.word	0x2b352e35
    47bc:	28444e52 	.word	0x28444e52
    47c0:	3b292931 	.word	0x3b292931
    47c4:	47203a20 	.word	0x47203a20
    47c8:	204f544f 	.word	0x204f544f
    47cc:	00003031 	.word	0x00003031
    47d0:	67206f4e 	.word	0x67206f4e
    47d4:	2e73646f 	.word	0x2e73646f
    47d8:	206f4e20 	.word	0x206f4e20
    47dc:	7473616d 	.word	0x7473616d
    47e0:	2e737265 	.word	0x2e737265
    47e4:	206f4e20 	.word	0x206f4e20
    47e8:	65747865 	.word	0x65747865
    47ec:	6c616e72 	.word	0x6c616e72
    47f0:	62696c20 	.word	0x62696c20
    47f4:	69726172 	.word	0x69726172
    47f8:	002e7365 	.word	0x002e7365
    47fc:	6c6c694b 	.word	0x6c6c694b
    4800:	7a614e20 	.word	0x7a614e20
    4804:	00007369 	.word	0x00007369
    4808:	6e616954 	.word	0x6e616954
    480c:	656d6e61 	.word	0x656d6e61
    4810:	7153206e 	.word	0x7153206e
    4814:	65726175 	.word	0x65726175
    4818:	38393120 	.word	0x38393120
    481c:	00000039 	.word	0x00000039
    4820:	72656d41 	.word	0x72656d41
    4824:	20616369 	.word	0x20616369
    4828:	20736177 	.word	0x20736177
    482c:	6e756f66 	.word	0x6e756f66
    4830:	20646564 	.word	0x20646564
    4834:	73206e6f 	.word	0x73206e6f
    4838:	6576616c 	.word	0x6576616c
    483c:	00007972 	.word	0x00007972
    4840:	72656854 	.word	0x72656854
    4844:	73692065 	.word	0x73692065
    4848:	6c6e6f20 	.word	0x6c6e6f20
    484c:	61632079 	.word	0x61632079
    4850:	61746970 	.word	0x61746970
    4854:	6e61206c 	.word	0x6e61206c
    4858:	616c2064 	.word	0x616c2064
    485c:	00726f62 	.word	0x00726f62
    4860:	6f636e45 	.word	0x6f636e45
    4864:	67617275 	.word	0x67617275
    4868:	735f2065 	.word	0x735f2065
    486c:	656d6d79 	.word	0x656d6d79
    4870:	63697274 	.word	0x63697274
    4874:	6c63205f 	.word	0x6c63205f
    4878:	20737361 	.word	0x20737361
    487c:	66726177 	.word	0x66726177
    4880:	00657261 	.word	0x00657261
    4884:	52554324 	.word	0x52554324
    4888:	544e4552 	.word	0x544e4552
    488c:	4d454d5f 	.word	0x4d454d5f
    4890:	00000045 	.word	0x00000045
    4894:	694e2041 	.word	0x694e2041
    4898:	54206563 	.word	0x54206563
    489c:	00005954 	.word	0x00005954
    48a0:	78696e55 	.word	0x78696e55
    48a4:	6f706520 	.word	0x6f706520
    48a8:	6d206863 	.word	0x6d206863
    48ac:	73756e69 	.word	0x73756e69
    48b0:	46783020 	.word	0x46783020
    48b4:	61642046 	.word	0x61642046
    48b8:	00007379 	.word	0x00007379
    48bc:	3d202069 	.word	0x3d202069
    48c0:	35783020 	.word	0x35783020
    48c4:	35373366 	.word	0x35373366
    48c8:	20666439 	.word	0x20666439
    48cc:	2028202d 	.word	0x2028202d
    48d0:	3e3e2069 	.word	0x3e3e2069
    48d4:	29203120 	.word	0x29203120
    48d8:	0000003b 	.word	0x0000003b
    48dc:	42414341 	.word	0x42414341
    48e0:	00000000 	.word	0x00000000
    48e4:	63666544 	.word	0x63666544
    48e8:	73276e6f 	.word	0x73276e6f
    48ec:	6e616320 	.word	0x6e616320
    48f0:	656c6563 	.word	0x656c6563
    48f4:	00002e64 	.word	0x00002e64
    48f8:	73746152 	.word	0x73746152
    48fc:	7473656e 	.word	0x7473656e
    4900:	6f4e203a 	.word	0x6f4e203a
    4904:	6e696874 	.word	0x6e696874
    4908:	6f542067 	.word	0x6f542067
    490c:	216f4420 	.word	0x216f4420
    4910:	00000000 	.word	0x00000000
    4914:	68207449 	.word	0x68207449
    4918:	36207361 	.word	0x36207361
    491c:	656b2039 	.word	0x656b2039
    4920:	002e7379 	.word	0x002e7379
    4924:	61636542 	.word	0x61636542
    4928:	20657375 	.word	0x20657375
    492c:	342d5456 	.word	0x342d5456
    4930:	77203032 	.word	0x77203032
    4934:	61207361 	.word	0x61207361
    4938:	6165726c 	.word	0x6165726c
    493c:	74207964 	.word	0x74207964
    4940:	6e656b61 	.word	0x6e656b61
    4944:	00000000 	.word	0x00000000
    4948:	706d6f43 	.word	0x706d6f43
    494c:	73736572 	.word	0x73736572
    4950:	206e6f69 	.word	0x206e6f69
    4954:	6f676c61 	.word	0x6f676c61
    4958:	68746972 	.word	0x68746972
    495c:	6162206d 	.word	0x6162206d
    4960:	20646573 	.word	0x20646573
    4964:	42206e6f 	.word	0x42206e6f
    4968:	28205042 	.word	0x28205042
    496c:	37393931 	.word	0x37393931
    4970:	00000029 	.word	0x00000029
    4974:	20656854 	.word	0x20656854
    4978:	72756f73 	.word	0x72756f73
    497c:	6f206563 	.word	0x6f206563
    4980:	68742066 	.word	0x68742066
    4984:	694d2065 	.word	0x694d2065
    4988:	73697373 	.word	0x73697373
    498c:	70706973 	.word	0x70706973
    4990:	69722069 	.word	0x69722069
    4994:	20726576 	.word	0x20726576
    4998:	69207369 	.word	0x69207369
    499c:	6550206e 	.word	0x6550206e
    49a0:	79736e6e 	.word	0x79736e6e
    49a4:	6e61766c 	.word	0x6e61766c
    49a8:	002e6169 	.word	0x002e6169
    49ac:	6566664f 	.word	0x6566664f
    49b0:	7669736e 	.word	0x7669736e
    49b4:	61682065 	.word	0x61682065
    49b8:	61776472 	.word	0x61776472
    49bc:	00006572 	.word	0x00006572
    49c0:	6c6c6f46 	.word	0x6c6c6f46
    49c4:	5720776f 	.word	0x5720776f
    49c8:	646c726f 	.word	0x646c726f
    49cc:	676f5020 	.word	0x676f5020
    49d0:	64654620 	.word	0x64654620
    49d4:	74617265 	.word	0x74617265
    49d8:	206e6f69 	.word	0x206e6f69
    49dc:	40202020 	.word	0x40202020
    49e0:	6c726f57 	.word	0x6c726f57
    49e4:	676f5064 	.word	0x676f5064
    49e8:	00000000 	.word	0x00000000
    49ec:	6d6d7544 	.word	0x6d6d7544
    49f0:	68742079 	.word	0x68742079
    49f4:	20636369 	.word	0x20636369
    49f8:	65696c63 	.word	0x65696c63
    49fc:	0000746e 	.word	0x0000746e
    4a00:	694e2041 	.word	0x694e2041
    4a04:	54206563 	.word	0x54206563
    4a08:	202e5954 	.word	0x202e5954
    4a0c:	4f206e41 	.word	0x4f206e41
    4a10:	6f43204b 	.word	0x6f43204b
    4a14:	7475706d 	.word	0x7475706d
    4a18:	002e7265 	.word	0x002e7265
    4a1c:	69636543 	.word	0x69636543
    4a20:	65276e20 	.word	0x65276e20
    4a24:	70207473 	.word	0x70207473
    4a28:	75207361 	.word	0x75207361
    4a2c:	4320656e 	.word	0x4320656e
    4a30:	72656279 	.word	0x72656279
    4a34:	6b636564 	.word	0x6b636564
    4a38:	65622820 	.word	0x65622820
    4a3c:	73756163 	.word	0x73756163
    4a40:	74692065 	.word	0x74692065
    4a44:	6e207327 	.word	0x6e207327
    4a48:	6120746f 	.word	0x6120746f
    4a4c:	6c655020 	.word	0x6c655020
    4a50:	6e616369 	.word	0x6e616369
    4a54:	73614320 	.word	0x73614320
    4a58:	00002965 	.word	0x00002965
    4a5c:	696c6f53 	.word	0x696c6f53
    4a60:	69726164 	.word	0x69726164
    4a64:	69207974 	.word	0x69207974
    4a68:	6f6e2073 	.word	0x6f6e2073
    4a6c:	20612074 	.word	0x20612074
    4a70:	2077656e 	.word	0x2077656e
    4a74:	6d617266 	.word	0x6d617266
    4a78:	726f7765 	.word	0x726f7765
    4a7c:	0000006b 	.word	0x0000006b
    4a80:	61657242 	.word	0x61657242
    4a84:	616f6264 	.word	0x616f6264
    4a88:	6e696472 	.word	0x6e696472
    4a8c:	73492067 	.word	0x73492067
    4a90:	746f4e20 	.word	0x746f4e20
    4a94:	43204120 	.word	0x43204120
    4a98:	656d6972 	.word	0x656d6972
    4a9c:	00000000 	.word	0x00000000
    4aa0:	2066664f 	.word	0x2066664f
    4aa4:	6f207962 	.word	0x6f207962
    4aa8:	6520656e 	.word	0x6520656e
    4aac:	726f7272 	.word	0x726f7272
    4ab0:	72612073 	.word	0x72612073
    4ab4:	6f632065 	.word	0x6f632065
    4ab8:	6e6f6d6d 	.word	0x6e6f6d6d
    4abc:	00000000 	.word	0x00000000
    4ac0:	00000716 	.word	0x00000716
    4ac4:	00000962 	.word	0x00000962
    4ac8:	00000962 	.word	0x00000962
    4acc:	00000962 	.word	0x00000962
    4ad0:	00000962 	.word	0x00000962
    4ad4:	00000962 	.word	0x00000962
    4ad8:	00000962 	.word	0x00000962
    4adc:	00000962 	.word	0x00000962
    4ae0:	00000962 	.word	0x00000962
    4ae4:	00000962 	.word	0x00000962
    4ae8:	00000962 	.word	0x00000962
    4aec:	00000962 	.word	0x00000962
    4af0:	00000962 	.word	0x00000962
    4af4:	00000962 	.word	0x00000962
    4af8:	00000962 	.word	0x00000962
    4afc:	00000962 	.word	0x00000962
    4b00:	000006fe 	.word	0x000006fe
    4b04:	00000962 	.word	0x00000962
    4b08:	00000962 	.word	0x00000962
    4b0c:	00000962 	.word	0x00000962
    4b10:	00000962 	.word	0x00000962
    4b14:	00000962 	.word	0x00000962
    4b18:	00000962 	.word	0x00000962
    4b1c:	00000962 	.word	0x00000962
    4b20:	00000962 	.word	0x00000962
    4b24:	00000962 	.word	0x00000962
    4b28:	00000962 	.word	0x00000962
    4b2c:	00000962 	.word	0x00000962
    4b30:	00000962 	.word	0x00000962
    4b34:	00000962 	.word	0x00000962
    4b38:	00000962 	.word	0x00000962
    4b3c:	00000962 	.word	0x00000962
    4b40:	0000070e 	.word	0x0000070e
    4b44:	00000962 	.word	0x00000962
    4b48:	00000962 	.word	0x00000962
    4b4c:	00000962 	.word	0x00000962
    4b50:	00000962 	.word	0x00000962
    4b54:	00000962 	.word	0x00000962
    4b58:	00000962 	.word	0x00000962
    4b5c:	00000962 	.word	0x00000962
    4b60:	00000962 	.word	0x00000962
    4b64:	00000962 	.word	0x00000962
    4b68:	00000962 	.word	0x00000962
    4b6c:	00000962 	.word	0x00000962
    4b70:	00000962 	.word	0x00000962
    4b74:	00000962 	.word	0x00000962
    4b78:	00000962 	.word	0x00000962
    4b7c:	00000962 	.word	0x00000962
    4b80:	00000706 	.word	0x00000706
    4b84:	0000071e 	.word	0x0000071e
    4b88:	000006e6 	.word	0x000006e6
    4b8c:	000006f6 	.word	0x000006f6
    4b90:	000006ee 	.word	0x000006ee
    4b94:	00000002 	.word	0x00000002
    4b98:	00000003 	.word	0x00000003
    4b9c:	00000028 	.word	0x00000028
    4ba0:	00000029 	.word	0x00000029
    4ba4:	00000004 	.word	0x00000004
    4ba8:	00000005 	.word	0x00000005
    4bac:	00000006 	.word	0x00000006
    4bb0:	00000007 	.word	0x00000007
    4bb4:	00000020 	.word	0x00000020
    4bb8:	00000021 	.word	0x00000021
    4bbc:	00000022 	.word	0x00000022
    4bc0:	00000023 	.word	0x00000023
    4bc4:	00000024 	.word	0x00000024
    4bc8:	00000025 	.word	0x00000025
    4bcc:	00000026 	.word	0x00000026
    4bd0:	00000027 	.word	0x00000027
    4bd4:	00000008 	.word	0x00000008
    4bd8:	00000009 	.word	0x00000009
    4bdc:	0000000a 	.word	0x0000000a
    4be0:	0000000b 	.word	0x0000000b
    4be4:	42000800 	.word	0x42000800
    4be8:	42000c00 	.word	0x42000c00
    4bec:	42001000 	.word	0x42001000
    4bf0:	42001400 	.word	0x42001400
    4bf4:	42001800 	.word	0x42001800
    4bf8:	42001c00 	.word	0x42001c00
    4bfc:	0000149a 	.word	0x0000149a
    4c00:	00001496 	.word	0x00001496
    4c04:	00001496 	.word	0x00001496
    4c08:	000014fc 	.word	0x000014fc
    4c0c:	000014fc 	.word	0x000014fc
    4c10:	000014ae 	.word	0x000014ae
    4c14:	000014a0 	.word	0x000014a0
    4c18:	000014b4 	.word	0x000014b4
    4c1c:	000014ea 	.word	0x000014ea
    4c20:	000016bc 	.word	0x000016bc
    4c24:	0000169c 	.word	0x0000169c
    4c28:	0000169c 	.word	0x0000169c
    4c2c:	00001728 	.word	0x00001728
    4c30:	000016ae 	.word	0x000016ae
    4c34:	000016ca 	.word	0x000016ca
    4c38:	000016a0 	.word	0x000016a0
    4c3c:	000016d8 	.word	0x000016d8
    4c40:	00001718 	.word	0x00001718

00004c44 <CodePage437>:
	...
    4f7c:	01000000 06186080 18608001 60800106     .....`....`....`
    4f8c:	80010000 00000060 00000000 66986106     ....`........a.f
    4f9c:	98618619 00000000 00000000 00000000     ..a.............
    4fac:	00000000 98610600 fb8f1966 8f1966fe     ......a.f....f..
    4fbc:	1966fefb 00986186 00000000 80010000     ..f..a..........
    4fcc:	891f7e60 1f7e6082 7e649081 6080811f     `~...`~...d~...`
    4fdc:	00000000 04000000 29a60823 1820c106     ........#..).. .
    4fec:	98200304 324c1165 00000008 00000000     .. .e.L2........
    4ffc:	84e08107 10420821 5a081e78 87208216     ....!.B.x..Z.. .
    500c:	0000f6d9 00000000 30c00000 00030618     ...........0....
    501c:	000000c0 00000000 00000000 00000000     ................
    502c:	40000000 03020810 0c30c000 08c00003     ...@......0.....
    503c:	10400002 00000000 01000000 02084000     ..@..........@..
    504c:	06186000 18608001 00010208 00000040     .`....`.....@...
    505c:	00000000 42000000 90408210 40c23fff     .......B..@..?.@
    506c:	80104290 00000000 00000000 00000000     .B..............
    507c:	80000208 e0bfff20 02082080 00000000     .... .... ......
	...
    509c:	18000000 c0000306 00001040 00000000     ........@.......
    50ac:	00000000 ff000000 0000e0bf 00000000     ................
	...
    50d0:	030e3800 0000e080 00000000 08200000     .8............ .
    50e0:	80000104 02041020 10408000 00000208     .... .....@.....
    50f0:	00000000 e0030000 cc1863f8 b0c1061b     .........c......
    5100:	63061b6c f8e0c318 00000000 00000000     l..c............
    5110:	1b3c70c0 0c30c004 30c00003 e107030c     .p<...0....0....
    5120:	000000f8 00000000 c1f8e107 061860b0     .............`..
    5130:	0187030e 0f30c0c0 0000fefb 00000000     ......0.........
    5140:	fefb0f00 60c00003 80030e30 b0810618     .......`0.......
    5150:	00f8e167 00000000 40000000 03070c30     g..........@0...
    5160:	31649040 04fefb0f 10400001 00000000     @.d1......@.....
    5170:	0f000000 30c0fefb c1f8e30f 061860b0     .......0.....`..
    5180:	e167a081 000000f8 00000000 60f8e003     ..g............`
    5190:	00030c18 1b8c3ffe 67b0c106 0000f8e1     .....?.....g....
    51a0:	00000000 fefb0f00 20608001 00010408     ..........` ....
    51b0:	0c302080 00c00003 00000000 e0030000     . 0.............
    51c0:	6cb0c1f8 0f3e061b c1061b8c f8e063b0     ...l..>......c..
    51d0:	00000000 07000000 b0c1f8e1 7d0e3b6c     ............l;.}
    51e0:	0618609f e1c70003 000000f0 00000000     .`..............
    51f0:	38000000 e080030e 00000000 030e3800     ...8.........8..
    5200:	0000e080 00000000 00000000 80030e38     ............8...
    5210:	000000e0 0e380000 40c00003 00000010     ......8....@....
    5220:	30000000 03030c0c 30c0c000 0cc00003     ...0.......0....
    5230:	0c300003 00000000 00000000 00000000     ..0.............
    5240:	00fefb0f fefb0f00 00000000 00000000     ................
    5250:	00000000 3000030c 30c0000c c0c00003     .......0...0....
    5260:	0c0c3030 00000003 00000000 f8e10700     00..............
    5270:	6060b0c1 01061818 00006080 00608001     ..``.....`....`.
    5280:	00000000 e1070000 6cb0c1f8 b4d33edb     ...........l.>..
    5290:	c036fbec f8e10730 00000000 00000000     ..6.0...........
    52a0:	0d367080 c18c3186 fefb6fb0 1b6cb0c1     .p6..1...o....l.
    52b0:	00000006 00000000 61f8e30f 86196698     ...........a.f..
    52c0:	19861f7e 6f986186 0000f8e3 00000000     ~....a.o........
    52d0:	f8e00300 036c9861 0c30c000 98610003     ....a.l...0...a.
    52e0:	00f8e063 00000000 c30f0000 861966f0     c............f..
    52f0:	98618631 668c1966 f0c38f19 00000000     1.a.f..f........
    5300:	0f000000 30c0fefb fc00030c 00030c3f     .......0....?...
    5310:	fb0f30c0 000000fe 00000000 c0fefb0f     .0..............
    5320:	00030c30 030c3ffc 0c30c000 00000003     0....?....0.....
    5330:	00000000 f8e00300 036c9861 0c30c000     ........a.l...0.
    5340:	98611e7b 00f8e063 00000000 1b0c0000     {.a.c...........
    5350:	6cb0c106 bfff061b c1061bec 061b6cb0     ...l.........l..
    5360:	00000000 07000000 0618f8e1 18608001     ..............`.
    5370:	60800106 e1070618 000000f8 00000000     ...`............
    5380:	067ef801 18608001 60800106 8731c618     ..~...`....`..1.
    5390:	0000f0c1 00000000 061b0c00 838d31c6     .............1..
    53a0:	0d38e060 31c66083 00061b8c 00000000     `.8..`.1........
    53b0:	030c0000 0c30c000 30c00003 c000030c     ......0....0....
    53c0:	fefb0f30 00000000 0c000000 bde38e1b     0...............
    53d0:	c976dbed 061b6cb2 1b6cb0c1 00000006     ..v..l....l.....
    53e0:	00000000 e1861b0c 661b6dbc 5b6cb3c9     .........m.f..l[
    53f0:	ecb0c31e 0000061b 00000000 f8e00300     ................
    5400:	1b6cb0e3 6cb0c106 b8c1061b 00f8e0e3     ..l....l........
    5410:	00000000 e30f0000 6cb0c1f8 3ffe061b     ...........l...?
    5420:	c000038c 00030c30 00000000 07000000     ....0...........
    5430:	b0c1f8e1 c1061b6c 36db6cb0 d98731c6     ....l....l.6.1..
    5440:	000000f6 00000000 c1f8e30f 061b6cb0     .............l..
    5450:	638c3ffe cc30c318 0000061b 00000000     .?.c..0.........
    5460:	f8e10700 036cb0c1 801f7e00 b0c10618     ......l..~......
    5470:	00f8e167 00000000 fb0f0000 000208fe     g...............
    5480:	02082080 08208000 20800002 00000000     . .... .... ....
    5490:	0c000000 b0c1061b c1061b6c 061b6cb0     ........l....l..
    54a0:	e063b0c1 000000f8 00000000 c1061b0c     ..c.............
    54b0:	8c3166b0 60c31863 810d36d8 000020c0     .f1.c..`.6... ..
    54c0:	00000000 061b0c00 1b6cb0c1 6db2c906     ..........l....m
    54d0:	b5d576db 008c796f 00000000 1b0c0000     .v..oy..........
    54e0:	c3186306 060cf860 63d8e003 061bcc18     .c..`......c....
    54f0:	00000000 0c000000 1863061b 1cd860c3     ..........c..`..
    5500:	20c00107 80000208 00000020 00000000     ... .... .......
    5510:	03fefb0f 1060c000 0103060c 0f30c0c0     ......`.......0.
    5520:	0000fefb 00000000 f8e00300 00030c30     ............0...
    5530:	030c30c0 0c30c000 00f8e003 00000000     .0....0.........
    5540:	01060000 010c3080 030c6080 03186000     .....0...`...`..
    5550:	0618c000 00000000 07000000 030cf0c1     ................
    5560:	0c30c000 30c00003 c107030c 000000f0     ..0....0........
    5570:	00000000 36708000 8c31860d 0060b0c1     ......p6..1...`.
	...
    559c:	00fefb0f 00000000 80030000 00030ce0     ................
    55ac:	00001860 00000000 00000000 00000000     `...............
	...
    55c4:	01fcf003 fef86380 f823b0c0 000000fe     .....c....#.....
    55d4:	00000000 c000030c fcf30d30 0b6cb8e1     ........0.....l.
    55e4:	6fb8e102 00007cf3 00000000 00000000     ...o.|..........
    55f4:	e1070000 6cb0c1f8 30c00003 00fef907     .......l...0....
    5604:	00000000 18000000 67800106 b0c3f6d9     ...........g....
    5614:	c3061bec f6d9e7b0 00000000 00000000     ................
    5624:	00000000 c1f8e107 fefb6fb0 f10730c0     .........o...0..
    5634:	000000fc 00000000 3138e000 c000638c     ..........81.c..
    5644:	00033ffc 030c30c0 0000c000 00000000     .?...0..........
    5654:	00000000 d9070000 8731c6f6 30c0f0c1     ..........1....0
    5664:	c3f8e107 f8e1e7b0 030c0000 0d30c000     ..............0.
    5674:	b8e178e3 c1061b6c 061b6cb0 00000000     .x..l....l......
    5684:	01000000 00006080 18e08003 60800106     .....`.........`
    5694:	e1070618 000000f8 00000000 00186000     .............`..
    56a4:	18600000 60800106 8c010618 31c61863     ..`....`....c..1
    56b4:	00f0c187 00030c00 638c30c0 0f36cc30     .........0.c0.6.
    56c4:	33ccc083 000c330c 00000000 c0030000     ...3.3..........
    56d4:	00030cf0 030c30c0 0c30c000 f8e00303     .....0....0.....
	...
    56f0:	e70c330c 669b6dbf 1b6cb0c1 00000006     .3...m.f..l.....
	...
    5708:	f8e20b00 1b6cb8e1 6cb0c106 0000061b     ......l....l....
	...
    5720:	e1070000 cc30c3f8 30c30c33 00f8e1c7     ......0.3..0....
	...
    5738:	0b000000 b0c1f8e2 be061b6c 0002882f     ........l.../...
    5748:	02082080 00000000 00000000 c1fae803     . ..............
    5758:	061b6cb0 08a08f3e 20800002 00000208     .l..>...... ....
    5768:	00000000 7ce20800 036cbcf1 0c30c000     .......|..l...0.
    5778:	00000003 00000000 00000000 e1070000     ................
    5788:	0730c0f8 8001f8e1 00f8e36f 00000000     ..0.....o.......
    5798:	00030000 0f0c30c0 0c30f8e3 33c00003     .....0....0....3
    57a8:	30c0c00c 00000000 00000000 00000000     ...0............
    57b8:	c30c330c 0c33cc30 d9c730c3 000000f6     .3..0.3..0......
	...
    57d0:	02020000 30e6b8c1 01073ed8 000020c0     .......0.>... ..
	...
    57e8:	1b0c0000 6cb0c106 b5d5769b 008c3166     .......l.v..f1..
	...
    5800:	08000000 1b441823 6ce08003 08620c11     ....#.D....l..b.
	...
    581c:	c618630c 18638c31 60801f7e 873bc618     .c..1.c.~..`..;.
    582c:	0000f0c1 00000000 fefb0f00 c0c00003     ................
    583c:	0f0c3030 0000fefb 00000000 1e780000     00............x.
    584c:	40000208 000e3810 02081040 001e7800     ...@.8..@....x..
    585c:	00000000 80010000 01061860 06186080     ........`....`..
    586c:	18608001 60800106 00000000 0f000000     ..`....`........
    587c:	0208c003 0cc00003 c0000303 030f0208     ................
    588c:	000000c0 00000000 d9c61907 1c736cb3     .............ls.
	...
    58c4:	e0030000 6c9861f8 30c00003 6100030c     .....a.l...0...a
    58d4:	f8e06398 00000608 00000000 00669801     .c............f.
    58e4:	c30c330c 0c33cc30 d9c730c3 000000f6     .3..0.3..0......
    58f4:	00000000 0c180000 f8e10700 fb6fb0c1     ..............o.
    5904:	0730c0fe 0000fcf1 00000000 10000000     ..0.............
    5914:	f003000a 638001fc b0c0fef8 00fef823     .......c....#...
	...
    592c:	030033cc 8001fcf0 c0fef863 fef823b0     .3......c....#..
	...
    5944:	000c6000 01fcf003 fef86380 f823b0c0     .`.......c....#.
    5954:	000000fe 03000000 0c482001 fcf00300     ......... H.....
    5964:	f8638001 23b0c0fe 0000fef8 00000000     ..c....#........
    5974:	00000000 e1070000 6cb0c1f8 30c00003     ...........l...0
    5984:	04fef907 00000003 00000000 07001420     ............ ...
    5994:	b0c1f8e1 c0fefb6f fcf10730 00000000     ....o...0.......
    59a4:	00000000 00669801 c1f8e107 fefb6fb0     ......f......o..
    59b4:	f10730c0 000000fc 00000000 18c00000     .0..............
    59c4:	f8e10700 fb6fb0c1 0730c0fe 0000fcf1     ......o...0.....
    59d4:	00000000 98610600 80030000 010618e0     ......a.........
    59e4:	06186080 00f8e107 00000000 00000000     .`..............
    59f4:	03002840 0618e080 18608001 f8e10706     @(........`.....
	...
    5a0c:	0018c000 18e08003 60800106 e1070618     ...........`....
    5a1c:	000000f8 18630000 367080c0 8c31860d     ......c...p6..1.
    5a2c:	fb6fb0c1 6cb0c1fe 0000061b 1c000000     ..o....l........
    5a3c:	70c08108 31860d36 6fb0c18c b0c1fefb     ...p6..1...o....
    5a4c:	00061b6c 00000000 fb0f0606 0c30c0fe     l.............0.
    5a5c:	3ffc0003 c000030c fefb0f30 00000000     ...?....0.......
	...
    5a74:	1dfe7907 fedb2786 f90733cc 000000ee     .y...'...3......
    5a84:	00000000 367ef800 9861860d e3efb1c7     ......~6..a.....
    5a94:	8c31c6f8 00001e7b 00000000 20000000     ..1.{.......... 
    5aa4:	e1070014 cc30c3f8 30c30c33 00f8e1c7     ......0.3..0....
    5ab4:	00000000 01000000 07006698 30c3f8e1     .........f.....0
    5ac4:	c30c33cc f8e1c730 00000000 00000000     .3..0...........
    5ad4:	0018c000 c3f8e107 0c33cc30 e1c730c3     ........0.3..0..
    5ae4:	000000f8 00000000 14200000 0c330c00     .......... ...3.
    5af4:	33cc30c3 c730c30c 0000f6d9 00000000     .0.3..0.........
    5b04:	60000000 330c000c cc30c30c 30c30c33     ...`...3..0.3..0
    5b14:	00f6d9c7 00000000 01000000 0c006698     .............f..
    5b24:	31c61863 7e18638c 1860801f c1873bc6     c..1.c.~..`..;..
    5b34:	800d36f0 383ef800 c1061bec 061b6cb0     .6....>8.....l..
    5b44:	e0e3b8c1 000000f8 0c330000 c10603c0     ..........3.....
    5b54:	061b6cb0 1b6cb0c1 63b0c106 0000f8e0     .l....l....c....
    5b64:	00000000 20800002 1b8c1f7e 0c32c826     ....... ~...&.2.
    5b74:	1f7e069b 08208080 00000000 c0010000     ..~... .........
    5b84:	461873f8 3e608001 6080810f fefb0f18     .s.F..`>...`....
    5b94:	00000000 0c000000 08630419 1c506083     ..........c..`P.
    5ba4:	20e00302 80800f08 00000020 00000000     ... .... .......
    5bb4:	c1f8e30f f81b6cb0 830d30fe 0d36d878     .....l...0..x.6.
    5bc4:	000038e3 00000000 3ce00000 98638e3f     .8.........<?.c.
    5bd4:	833ffee0 1c70c000 60800106 00000018     ..?...p....`....
    5be4:	00000000 03000c18 8001fcf0 c0fef863     ............c...
    5bf4:	fef823b0 00000000 00000000 000060c0     .#...........`..
    5c04:	18e08003 60800106 e1070618 000000f8     .......`........
    5c14:	00000000 18300000 f8e10700 33cc30c3     ......0......0.3
    5c24:	c730c30c 0000f8e1 00000000 30000000     ..0............0
    5c34:	330c0018 cc30c30c 30c30c33 00f6d9c7     ...3..0.3..0....
	...
    5c4c:	0b001998 b8e1f8e2 c1061b6c 061b6cb0     ........l....l..
    5c5c:	00000000 8c0c4c00 b8e1061b c9461b6d     .....L......m.F.
    5c6c:	165b6cb2 1becb0c3 00000006 00000000     .l[.............
    5c7c:	1e08c003 00e08308 000080ff 00000000     ................
	...
    5c94:	d8c00100 c0810d22 0080ff00 00000000     ...."...........
	...
    5cb0:	00030c00 030c0000 3030c000 061b0c0c     ..........00....
    5cc0:	00c00f3f 00000000 00000000 ff000000     ?...............
    5cd0:	0003ecbf 00000000 00000000 00000000     ................
	...
    5ce8:	18e0bfff 00000006 00000000 00000000     ................
    5cf8:	30c00003 c000030c e0bfff00 0c1f3800     ...0.........8..
    5d08:	183060c0 0000c00f c0000300 00030c30     .`0.........0...
    5d18:	bfff00c0 668001e0 fc618619 60800106     .......f..a....`
    5d28:	00000000 06180000 18000000 60800106     ...............`
    5d38:	80010618 00061860 00000000 00000000     ....`...........
    5d48:	90200100 80042448 00001290 00000000     .. .H$..........
	...
    5d60:	40020000 20010948 00244890 00000000     ...@H.. .H$.....
    5d70:	00000000 48024092 09004900 80240024     .....@.H.I..$.$.
    5d80:	92009004 00480240 24090049 42529200     ....@.H.I..$..RB
    5d90:	0949494a 24242529 929094a4 4a425292     JII.)%$$.....RBJ
    5da0:	29094949 ad6d2425 b6b6b5bd dbdad6f6     II.)%$m.........
    5db0:	6f6b5bdb bdad6d6d f6b6b6b5 08dbdad6     .[komm..........
    5dc0:	20800002 80000208 00020820 02082080     ... .... .... ..
    5dd0:	08208000 20800002 80000208 00020820     .. .... .... ...
    5de0:	3e082080 08208000 20800002 80000208     . .>.. .... ....
    5df0:	00020820 02082080 f8208000 20800f02      .... .... .... 
    5e00:	80000208 00020820 05142080 14504001     .... .... ...@P.
    5e10:	50400105 40013d14 01051450 05145040     ..@P.=.@P...@P..
    5e20:	00504001 00000000 00000000 013f0000     .@P...........?.
    5e30:	05145040 14504001 50400105 00000000     @P...@P...@P....
    5e40:	00000000 02f80000 0820800f 20800002     .......... .... 
    5e50:	80000208 01051420 05145040 f4504001     .... ...@P...@P.
    5e60:	50400f01 40010514 01051450 05145040     ..@P...@P...@P..
    5e70:	14504001 50400105 40010514 01051450     .@P...@P...@P...
    5e80:	05145040 00504001 00000000 00000000     @P...@P.........
    5e90:	0f01fc00 05145040 14504001 50400105     ....@P...@P...@P
    5ea0:	40010514 01051450 01f45040 0000c00f     ...@P...@P......
	...
    5eb8:	01051400 05145040 14504001 0000003f     ....@P...@P.?...
	...
    5ed0:	02080000 08208000 20800002 800f02f8     ...... .... ....
	...
    5ef4:	003e0000 02082080 08208000 20800002     ..>.. .... .... 
    5f04:	80000208 00020820 03082080 000000f0     .... .... ......
	...
    5f1c:	00020800 02082080 08208000 0000f03f     ..... .... .?...
	...
    5f40:	80f03f00 00020820 02082080 08208000     .?.. .... .... .
    5f50:	20800002 80000208 f0030820 02082080     ... .... .... ..
    5f60:	08208000 20800002 00000000 00000000     .. .... ........
    5f70:	3f000000 000000f0 00000000 00000000     ...?............
    5f80:	00020800 02082080 08208000 2080f03f     ..... .... .?.. 
    5f90:	80000208 00020820 02082080 08208000     .... .... .... .
    5fa0:	20800002 fc00c20f 00020820 02082080     ... .... .... ..
    5fb0:	14208000 50400105 40010514 f1051450     .. ...@P...@P...
    5fc0:	05145040 14504001 50400105 40010514     @P...@P...@P...@
    5fd0:	01051450 c4175040 0000fc01 00000000     P...@P..........
	...
    5fec:	1f000000 507c01c4 40010514 01051450     ......|P...@P...
    5ffc:	05145040 14504001 50400105 fc0fc0f7     @P...@P...@P....
	...
    6020:	0fc0ff00 0514507c 14504001 50400105     ....|P...@P...@P
    6030:	40010514 01051450 c4175040 14507c01     ...@P...@P...|P.
    6040:	50400105 40010514 00000050 00000000     ..@P...@P.......
    6050:	ff000000 00fc0fc0 00000000 00000000     ................
    6060:	05140000 14504001 50400105 7c0fc0f7     .....@P...@P...|
    6070:	01051450 05145040 08504001 20800002     P...@P...@P.... 
    6080:	80000208 0fc0ff20 000000fc 00000000     .... ...........
    6090:	00000000 40010514 01051450 3f145040     .......@P...@P.?
    60a0:	000000f0 00000000 00000000 00000000     ................
    60b0:	00000000 ff000000 20fc0fc0 80000208     ........... ....
    60c0:	00020820 00002080 00000000 00000000      .... ..........
    60d0:	40f13f00 01051450 05145040 14504001     .?.@P...@P...@P.
    60e0:	50400105 40010514 f0071450 00000000     ..@P...@P.......
	...
    60f8:	80000208 00020820 c20f2080 0000fc00     .... .... ......
	...
    6118:	0f000000 20fc00c2 80000208 00020820     ....... .... ...
    6128:	00002080 00000000 00000000 40f10700     . .............@
    6138:	01051450 05145040 14504001 50400105     P...@P...@P...@P
    6148:	40010514 f13f1450 05145040 14504001     ...@P.?.@P...@P.
    6158:	50400105 80000208 00020820 c2ff2080     ..@P.... .... ..
    6168:	0820fc0f 20800002 80000208 00020820     .. .... .... ...
    6178:	02082080 08208000 0000003e 00000000     . .... .>.......
	...
    6198:	80f00300 00020820 02082080 ff208000     .... .... .... .
    61a8:	ffffffff ffffffff ffffffff ffffffff     ................
    61b8:	ffffffff ffffffff 00000000 00000000     ................
    61c8:	3f000000 ffffffff ffffffff ffffffff     ...?............
    61d8:	0f3ef8ff 3ef8e083 f8e0830f e0830f3e     ..>....>....>...
    61e8:	830f3ef8 0f3ef8e0 c30fe083 0f3ffcf0     .>....>.......?.
    61f8:	3ffcf0c3 fcf0c30f f0c30f3f c30f3ffc     ...?....?....?..
    6208:	ff3ffcf0 ffffffff ffffffff f0ffffff     ..?.............
	...
    622c:	8f380000 c208234c e2d08330 00000000     ..8.L#..0.......
    623c:	00000000 193c0000 7c982186 8c61061f     ......<..!.|..a.
    624c:	63c61861 000000f8 00000000 ff000000     a..c............
    625c:	8c31c61f 01061863 06186080 0000c003     ..1.c....`......
	...
    6278:	c69fff00 18638c31 008e33c6 00000000     ....1.c..3......
    6288:	fb0f0000 06b080fe 0618c000 c0800103     ................
    6298:	fefb2f20 00000000 00000000 00000000      /..............
    62a8:	c3fef907 0c33cc30 e1c730c3 000000f8     ....0.3..0......
	...
    62c0:	0c330c00 33cc30c3 cf30c30c 30c0f6db     ..3..0.3..0....0
    62d0:	0000000c 00000000 e30c0000 618e7bbc     .............{.a
    62e0:	06186080 00608001 00000000 00000000     .`....`.........
    62f0:	c33f0000 30c3f8c1 c30c33cc f0e0c730     ..?....0.3..0...
    6300:	000000ff 03000000 1863f8e0 ff061bcc     ..........c.....
    6310:	061becbf e0c31863 000000f8 00000000     ....c...........
    6320:	e3fce103 061b6cb0 1b6cb0c1 c698e38e     .....l....l.....
    6330:	00008e33 00000000 fef80300 e1070318     3...............
    6340:	cc30c3f8 30c30c33 00f8e1c7 00000000     ..0.3..0........
    6350:	00000000 02000000 a2885421 88228a28     ........!T..(.".
    6360:	00204295 00000000 00000000 07000000     .B .............
    6370:	860e7367 628a28a3 7367b8b0 00000070     gs...(.b..gsp...
    6380:	00000000 60f8e003 00030c18 030c3ffc     .......`.....?..
    6390:	03186000 0000f8e0 00000000 00000000     .`..............
    63a0:	1b8c0f3e 6cb0c106 b0c1061b c1061b6c     >......l....l...
    63b0:	000060b0 00000000 0f000000 0000fefb     .`..............
    63c0:	00fefb0f fefb0f00 00000000 00000000     ................
    63d0:	02080000 ff208000 2080e0bf 03000208     ...... .... ....
    63e0:	000000fe 00000000 3000030c 30c0000c     ...........0...0
    63f0:	c0c00003 0c0c3030 3f000003 0000f0cf     ....00.....?....
    6400:	0c300000 0003030c 0330c0c0 030cc000     ..0.......0.....
    6410:	000c3000 00f0cf3f 88600307 00020820     .0..?.....`. ...
    6420:	02082080 08208000 20800002 80000208     . .... .... ....
    6430:	00020820 02082080 08208000 20800002      .... .... .... 
    6440:	80000208 09240820 00008001 18000000     .... .$.........
    6450:	00000006 00e0bfff 00061800 00000000     ................
	...
    6468:	8a0f1c00 0f1c073e 00073e8a 00000000     ....>....>......
	...
    6480:	01092460 00000080 00000000 00000000     `$..............
	...
    64a4:	80030e38 00000000 00000000 00000000     8...............
	...
    64bc:	01000000 00006080 00000000 0f000000     .....`..........
    64cc:	40000104 0d020820 0c504001 00800002     ...@ ....@P.....
    64dc:	00000000 f0c30b00 638c31c6 00000018     .........1.c....
	...
    64f8:	83070000 03070cf0 3fe0c081 00000000     ...........?....
	...
    651c:	c30f3ffc 0f3ffcf0 0000f0c3 00000000     .?....?.........
	...
    6544:	ffffffff 677537ff 71312c6a 38ffffff     .....7ugj,1q...8
    6554:	ff6b6869 7aff7732 6f3039ff 65332e6c     ihk.2w.z.90ol.3e
    6564:	ffff7861 2f3b702d 63737234 5b3dff20     ax..-p;/4rsc .=[
    6574:	7435ff27 ff6e7664 5cff5d27 62667936     '.5tdvn.'].\6yfb
    6584:	ffffff6d 0000ffff ffffffff 475526ff     m............&UG
    6594:	51213c4a 2affffff ff4b4849 5aff5740     J<!Q...*IHK.@W.Z
    65a4:	4f2928ff 45233e4c ffff5841 3f3a505f     .()OL>#EAX.._P:?
    65b4:	43535224 7b2bff20 5425ff22 ff4e5644     $RSC .+{".%TDVN.
    65c4:	7cff7d7e 4246595e ffffff4d 0000ffff     ~}.|^YFBM.......

000065d4 <kb_col>:
    65d4:	00010000 00020000 00040000 00080000     ................
    65e4:	00100000 00200000 08000000              ...... .....

000065f0 <kb_col_index>:
    65f0:	00000010 00000011 00000012 00000013     ................
    6600:	00000014 00000015 0000001b              ............

0000660c <kb_row>:
    660c:	00000004 00000008 00000010 00000020     ............ ...
    661c:	00000040 00000080 00000400 00000800     @...............
    662c:	00001000 00002000                       ..... ..

00006634 <kb_row_index>:
    6634:	00000002 00000003 00000004 00000005     ................
    6644:	00000006 00000007 0000000a 0000000b     ................
    6654:	0000000c 0000000d                       ........

0000665c <beelzebub.12956>:
    665c:	2e002d00 44003200 88005300 f300b600     .-...2.D.S......
    666c:	64012201 d4019201 08020702 5f023402     .".d.........4._
    667c:	94027802 bb02a602 db02ca02 f902e802     .x..............
    668c:	7f031f03                                ....

00006690 <belial.12953>:
    6690:	f0f0f0f0 b0b0b0f0 b1b6b6b6 b7b7b1b1     ................
    66a0:	b2b2b2b7 bfb8b8b8 b9b3b3b3 b5b5b9b9     ................
    66b0:	babac2b5 bcbcbcba bebdbdbd f0f0f0be     ................
    66c0:	b1b1f0f0 b8b7b7b6 bcb8b8b8 c9c9bcbc     ................
    66d0:	35c9c9c9 0000363a                       ...5:6..

000066d8 <lucifer.12955>:
    66d8:	0852aa55 0d0d0d01 0d343434 34340d0d     U.R.....444...44
    66e8:	00000034 01242424 340f0f0f 08083434     4...$$$....444..
    66f8:	24240308 00780024 00007800 52aa5589     ..$$$.x..x...U.R
    6708:	00cc0008 01707005 02030303 02d00000     .....pp.........
    6718:	00505050 00000055                       PPP.U...

00006720 <mulciber.12954>:
    6720:	03020100 02010004 00020100 01000201     ................
    6730:	02010002 00020100 01000201 01000002     ................
    6740:	02010000 00020100 01000201 03020100     ................
    6750:	00000004 01000100 01000302 02010002     ................
    6760:	00000403 00000000 69726553 4f206c61     ........Serial O
    6770:	3639204b 38203030 0d0a314e 00000000     K 9600 8N1......

00006780 <_global_impure_ptr>:
    6780:	2000015c 33323130 37363534 62613938     \.. 0123456789ab
    6790:	66656463 6a696867 6e6d6c6b 7271706f     cdefghijklmnopqr
    67a0:	76757473 7a797877 00000000              stuvwxyz....

000067ac <__sf_fake_stderr>:
	...

000067cc <__sf_fake_stdin>:
	...

000067ec <__sf_fake_stdout>:
	...
    680c:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    681c:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    682c:	31300046 35343332 39383736 64636261     F.0123456789abcd
    683c:	00006665                                ef..

00006840 <_init>:
    6840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6842:	46c0      	nop			; (mov r8, r8)
    6844:	bcf8      	pop	{r3, r4, r5, r6, r7}
    6846:	bc08      	pop	{r3}
    6848:	469e      	mov	lr, r3
    684a:	4770      	bx	lr

0000684c <__init_array_start>:
    684c:	000000dd 	.word	0x000000dd

00006850 <_fini>:
    6850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6852:	46c0      	nop			; (mov r8, r8)
    6854:	bcf8      	pop	{r3, r4, r5, r6, r7}
    6856:	bc08      	pop	{r3}
    6858:	469e      	mov	lr, r3
    685a:	4770      	bx	lr

0000685c <__fini_array_start>:
    685c:	000000b5 	.word	0x000000b5
