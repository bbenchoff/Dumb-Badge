
DumBadgeFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007884  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001dc  20000000  00007884  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000998  200001dc  00007a60  000201dc  2**2
                  ALLOC
  3 .stack        00002004  20000b74  000083f8  000201dc  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
  6 .debug_info   0003d15b  00000000  00000000  0002025d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005d02  00000000  00000000  0005d3b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00007127  00000000  00000000  000630ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000008d8  00000000  00000000  0006a1e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000a18  00000000  00000000  0006aab9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001fb40  00000000  00000000  0006b4d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00015122  00000000  00000000  0008b011  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00090533  00000000  00000000  000a0133  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001db0  00000000  00000000  00130668  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
	// Keep the default device state after reset
	SystemCoreClock = __SYSTEM_CLOCK;
       0:	78 2b 00 20 d9 2a 00 00 d5 2a 00 00 d5 2a 00 00     x+. .*...*...*..
	...
	config->stopbits         = USART_STOPBITS_1;
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
	config->baudrate         = 9600;
	config->receiver_enable  = true;
	config->transmitter_enable = true;
	config->clock_polarity_inverted = false;
      2c:	d5 2a 00 00 00 00 00 00 00 00 00 00 d5 2a 00 00     .*...........*..
	config->use_external_clock = false;
	config->ext_clock_freq   = 0;
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
	config->generator_source = GCLK_GENERATOR_0;
      3c:	61 3b 00 00 d5 2a 00 00 d5 2a 00 00 d5 2a 00 00     a;...*...*...*..
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
	config->receive_pulse_length                    = 19;
      4c:	d5 2a 00 00 d5 2a 00 00 d5 2a 00 00 d5 2a 00 00     .*...*...*...*..
	usart_get_config_defaults(&config_usart);

	config_usart.baudrate    = SERCOMBAUD;
	config_usart.mux_setting = SERCOMMUX;
	config_usart.pinmux_pad0 = SERCOMPAD0;
	config_usart.pinmux_pad1 = SERCOMPAD1;
      5c:	d5 2a 00 00 d5 2a 00 00 f1 1c 00 00 01 1d 00 00     .*...*..........
	config_usart.pinmux_pad2 = SERCOMPAD2;
	config_usart.pinmux_pad3 = SERCOMPAD3;

	while (usart_init(&usart_instance,	 SERCOMMODULE, &config_usart) != STATUS_OK) { }
      6c:	11 1d 00 00 21 1d 00 00 31 1d 00 00 41 1d 00 00     ....!...1...A...
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
      7c:	d5 2a 00 00 d5 2a 00 00 d5 2a 00 00 d5 2a 00 00     .*...*...*...*..
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	if (usart_init(module, hw, config) == STATUS_OK) {
      8c:	d5 2a 00 00 d5 2a 00 00 d5 2a 00 00 d5 2a 00 00     .*...*...*...*..
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
      9c:	25 18 00 00 d5 2a 00 00 d5 2a 00 00 d5 2a 00 00     %....*...*...*..
	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
      ac:	d5 2a 00 00 00 00 00 00                             .*......

000000b4 <__do_global_dtors_aux>:
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
      ba:	2b00      	cmp	r3, #0
	return (usart_hw->SYNCBUSY.reg);
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
	while (usart_is_syncing(module)) {
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop

	stdio_serial_init(&usart_instance, SERCOMMODULE, &config_usart);
	usart_enable(&usart_instance);
}
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200001dc 	.word	0x200001dc
      d4:	00000000 	.word	0x00000000
      d8:	00007884 	.word	0x00007884

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200001e0 	.word	0x200001e0
     108:	00007884 	.word	0x00007884
     10c:	00007884 	.word	0x00007884
     110:	00000000 	.word	0x00000000

00000114 <ring_init>:
	cbuf->full = false;
	cbuf->tail = (cbuf->tail + 1) % cbuf->max;
}

cbuf_handle_t ring_init(uint8_t* buffer, uint16_t size)
{
     114:	b570      	push	{r4, r5, r6, lr}
     116:	0005      	movs	r5, r0
     118:	000c      	movs	r4, r1
	cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
     11a:	200c      	movs	r0, #12
     11c:	4b04      	ldr	r3, [pc, #16]	; (130 <ring_init+0x1c>)
     11e:	4798      	blx	r3

	cbuf->buffer = buffer;
     120:	6005      	str	r5, [r0, #0]
	cbuf->max = size;
     122:	8104      	strh	r4, [r0, #8]
	return cbuf;
}

void ring_reset(cbuf_handle_t cbuf)
{
	cbuf->head = 0;
     124:	2300      	movs	r3, #0
     126:	8083      	strh	r3, [r0, #4]
	cbuf->tail = 0;
     128:	80c3      	strh	r3, [r0, #6]
	cbuf->full = false;
     12a:	7283      	strb	r3, [r0, #10]
}
     12c:	bd70      	pop	{r4, r5, r6, pc}
     12e:	46c0      	nop			; (mov r8, r8)
     130:	000042c1 	.word	0x000042c1

00000134 <ring_reset>:
	cbuf->head = 0;
     134:	2300      	movs	r3, #0
     136:	8083      	strh	r3, [r0, #4]
	cbuf->tail = 0;
     138:	80c3      	strh	r3, [r0, #6]
	cbuf->full = false;
     13a:	7283      	strb	r3, [r0, #10]
}
     13c:	4770      	bx	lr
	...

00000140 <ring_put>:

void ring_put(cbuf_handle_t cbuf, uint8_t data)
{
     140:	b510      	push	{r4, lr}
     142:	0004      	movs	r4, r0
	cbuf->buffer[cbuf->head] = data;
     144:	8883      	ldrh	r3, [r0, #4]
     146:	005b      	lsls	r3, r3, #1
     148:	6802      	ldr	r2, [r0, #0]
     14a:	5299      	strh	r1, [r3, r2]
	if(cbuf->full)
     14c:	7a83      	ldrb	r3, [r0, #10]
     14e:	2b00      	cmp	r3, #0
     150:	d005      	beq.n	15e <ring_put+0x1e>
		cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     152:	88c0      	ldrh	r0, [r0, #6]
     154:	3001      	adds	r0, #1
     156:	8921      	ldrh	r1, [r4, #8]
     158:	4b07      	ldr	r3, [pc, #28]	; (178 <ring_put+0x38>)
     15a:	4798      	blx	r3
     15c:	80e1      	strh	r1, [r4, #6]
	cbuf->head = (cbuf->head + 1) % cbuf->max;
     15e:	88a0      	ldrh	r0, [r4, #4]
     160:	3001      	adds	r0, #1
     162:	8921      	ldrh	r1, [r4, #8]
     164:	4b04      	ldr	r3, [pc, #16]	; (178 <ring_put+0x38>)
     166:	4798      	blx	r3
     168:	b28b      	uxth	r3, r1
     16a:	80a3      	strh	r3, [r4, #4]
	cbuf->full = (cbuf->head == cbuf->tail);
     16c:	88e1      	ldrh	r1, [r4, #6]
     16e:	1ac9      	subs	r1, r1, r3
     170:	424a      	negs	r2, r1
     172:	414a      	adcs	r2, r1
     174:	72a2      	strb	r2, [r4, #10]

	advance_pointer(cbuf);
}
     176:	bd10      	pop	{r4, pc}
     178:	00004219 	.word	0x00004219

0000017c <ring_empty>:
	return r;
}

bool ring_empty(cbuf_handle_t cbuf)
{
	return (!cbuf->full && (cbuf->head == cbuf->tail));
     17c:	7a82      	ldrb	r2, [r0, #10]
     17e:	2300      	movs	r3, #0
     180:	2a00      	cmp	r2, #0
     182:	d105      	bne.n	190 <ring_empty+0x14>
     184:	8883      	ldrh	r3, [r0, #4]
     186:	88c0      	ldrh	r0, [r0, #6]
     188:	1a1b      	subs	r3, r3, r0
     18a:	4258      	negs	r0, r3
     18c:	4143      	adcs	r3, r0
     18e:	b2db      	uxtb	r3, r3
     190:	0018      	movs	r0, r3
}
     192:	4770      	bx	lr

00000194 <ring_get>:
{
     194:	b570      	push	{r4, r5, r6, lr}
     196:	0004      	movs	r4, r0
     198:	000d      	movs	r5, r1
	if(!ring_empty(cbuf))
     19a:	4b0b      	ldr	r3, [pc, #44]	; (1c8 <ring_get+0x34>)
     19c:	4798      	blx	r3
     19e:	2800      	cmp	r0, #0
     1a0:	d10e      	bne.n	1c0 <ring_get+0x2c>
		*data = cbuf->buffer[cbuf->tail];
     1a2:	88e3      	ldrh	r3, [r4, #6]
     1a4:	005b      	lsls	r3, r3, #1
     1a6:	6822      	ldr	r2, [r4, #0]
     1a8:	5a9b      	ldrh	r3, [r3, r2]
     1aa:	702b      	strb	r3, [r5, #0]
	cbuf->full = false;
     1ac:	2300      	movs	r3, #0
     1ae:	72a3      	strb	r3, [r4, #10]
	cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     1b0:	88e0      	ldrh	r0, [r4, #6]
     1b2:	3001      	adds	r0, #1
     1b4:	8921      	ldrh	r1, [r4, #8]
     1b6:	4b05      	ldr	r3, [pc, #20]	; (1cc <ring_get+0x38>)
     1b8:	4798      	blx	r3
     1ba:	80e1      	strh	r1, [r4, #6]
		r = 0;
     1bc:	2000      	movs	r0, #0
}
     1be:	bd70      	pop	{r4, r5, r6, pc}
	int r = -1;
     1c0:	2001      	movs	r0, #1
     1c2:	4240      	negs	r0, r0
	return r;
     1c4:	e7fb      	b.n	1be <ring_get+0x2a>
     1c6:	46c0      	nop			; (mov r8, r8)
     1c8:	0000017d 	.word	0x0000017d
     1cc:	00004219 	.word	0x00004219

000001d0 <isEmptyParser>:
int rearParam = -1;
int rearParser = -1;

bool isEmptyParser(void)
{
	if(frontParser == -1)
     1d0:	4b03      	ldr	r3, [pc, #12]	; (1e0 <isEmptyParser+0x10>)
     1d2:	6818      	ldr	r0, [r3, #0]
     1d4:	3001      	adds	r0, #1
     1d6:	4243      	negs	r3, r0
     1d8:	4158      	adcs	r0, r3
     1da:	b2c0      	uxtb	r0, r0
	{
		return true;
	}
	return false;
}
     1dc:	4770      	bx	lr
     1de:	46c0      	nop			; (mov r8, r8)
     1e0:	20000008 	.word	0x20000008

000001e4 <dequeueParser>:
}
char dequeueParser(void)
{
	char temp;
	
	temp = queueParser[frontParser];
     1e4:	4a08      	ldr	r2, [pc, #32]	; (208 <dequeueParser+0x24>)
     1e6:	6813      	ldr	r3, [r2, #0]
     1e8:	4908      	ldr	r1, [pc, #32]	; (20c <dequeueParser+0x28>)
     1ea:	5cc8      	ldrb	r0, [r1, r3]
	frontParser++;
     1ec:	3301      	adds	r3, #1
     1ee:	6013      	str	r3, [r2, #0]
	if(frontParser > rearParser)
     1f0:	4a07      	ldr	r2, [pc, #28]	; (210 <dequeueParser+0x2c>)
     1f2:	6812      	ldr	r2, [r2, #0]
     1f4:	4293      	cmp	r3, r2
     1f6:	dd05      	ble.n	204 <dequeueParser+0x20>
	{
		frontParser = rearParser = -1;
     1f8:	2301      	movs	r3, #1
     1fa:	425b      	negs	r3, r3
     1fc:	4a04      	ldr	r2, [pc, #16]	; (210 <dequeueParser+0x2c>)
     1fe:	6013      	str	r3, [r2, #0]
     200:	4a01      	ldr	r2, [pc, #4]	; (208 <dequeueParser+0x24>)
     202:	6013      	str	r3, [r2, #0]
	}
	return temp;
}
     204:	4770      	bx	lr
     206:	46c0      	nop			; (mov r8, r8)
     208:	20000008 	.word	0x20000008
     20c:	200002d0 	.word	0x200002d0
     210:	20000010 	.word	0x20000010

00000214 <enqueueParser>:
void enqueueParser(char data)
{
	if(frontParser == -1)
     214:	4b07      	ldr	r3, [pc, #28]	; (234 <enqueueParser+0x20>)
     216:	681b      	ldr	r3, [r3, #0]
     218:	3301      	adds	r3, #1
     21a:	d006      	beq.n	22a <enqueueParser+0x16>
	{
		frontParser = 0;
	}
	rearParser++;
     21c:	4a06      	ldr	r2, [pc, #24]	; (238 <enqueueParser+0x24>)
     21e:	6813      	ldr	r3, [r2, #0]
     220:	3301      	adds	r3, #1
     222:	6013      	str	r3, [r2, #0]
	queueParser[rearParser] = data;
     224:	4a05      	ldr	r2, [pc, #20]	; (23c <enqueueParser+0x28>)
     226:	54d0      	strb	r0, [r2, r3]
}
     228:	4770      	bx	lr
		frontParser = 0;
     22a:	2200      	movs	r2, #0
     22c:	4b01      	ldr	r3, [pc, #4]	; (234 <enqueueParser+0x20>)
     22e:	601a      	str	r2, [r3, #0]
     230:	e7f4      	b.n	21c <enqueueParser+0x8>
     232:	46c0      	nop			; (mov r8, r8)
     234:	20000008 	.word	0x20000008
     238:	20000010 	.word	0x20000010
     23c:	200002d0 	.word	0x200002d0

00000240 <isEmptyParam>:
bool isEmptyParam(void)
{
	if(frontParam == -1)
     240:	4b03      	ldr	r3, [pc, #12]	; (250 <isEmptyParam+0x10>)
     242:	6818      	ldr	r0, [r3, #0]
     244:	3001      	adds	r0, #1
     246:	4243      	negs	r3, r0
     248:	4158      	adcs	r0, r3
     24a:	b2c0      	uxtb	r0, r0
	{
		return true;
	}
	return false;
}
     24c:	4770      	bx	lr
     24e:	46c0      	nop			; (mov r8, r8)
     250:	20000004 	.word	0x20000004

00000254 <dequeueParam>:
}
uint8_t dequeueParam(void)
{
	uint8_t temp;
	
	temp = queueParam[frontParam];
     254:	4a08      	ldr	r2, [pc, #32]	; (278 <dequeueParam+0x24>)
     256:	6813      	ldr	r3, [r2, #0]
     258:	4908      	ldr	r1, [pc, #32]	; (27c <dequeueParam+0x28>)
     25a:	5cc8      	ldrb	r0, [r1, r3]
	frontParam++;
     25c:	3301      	adds	r3, #1
     25e:	6013      	str	r3, [r2, #0]
	if(frontParam > rearParam)
     260:	4a07      	ldr	r2, [pc, #28]	; (280 <dequeueParam+0x2c>)
     262:	6812      	ldr	r2, [r2, #0]
     264:	4293      	cmp	r3, r2
     266:	dd05      	ble.n	274 <dequeueParam+0x20>
	{
		frontParam = rearParam = -1;
     268:	2301      	movs	r3, #1
     26a:	425b      	negs	r3, r3
     26c:	4a04      	ldr	r2, [pc, #16]	; (280 <dequeueParam+0x2c>)
     26e:	6013      	str	r3, [r2, #0]
     270:	4a01      	ldr	r2, [pc, #4]	; (278 <dequeueParam+0x24>)
     272:	6013      	str	r3, [r2, #0]
	}

	return temp;
}
     274:	4770      	bx	lr
     276:	46c0      	nop			; (mov r8, r8)
     278:	20000004 	.word	0x20000004
     27c:	20000304 	.word	0x20000304
     280:	2000000c 	.word	0x2000000c

00000284 <enqueueParam>:
void enqueueParam(uint8_t data)
{

	if(frontParam == -1)
     284:	4b07      	ldr	r3, [pc, #28]	; (2a4 <enqueueParam+0x20>)
     286:	681b      	ldr	r3, [r3, #0]
     288:	3301      	adds	r3, #1
     28a:	d006      	beq.n	29a <enqueueParam+0x16>
	{
		frontParam = 0;
	}
	rearParam++;
     28c:	4a06      	ldr	r2, [pc, #24]	; (2a8 <enqueueParam+0x24>)
     28e:	6813      	ldr	r3, [r2, #0]
     290:	3301      	adds	r3, #1
     292:	6013      	str	r3, [r2, #0]
	queueParam[rearParam] = data;
     294:	4a05      	ldr	r2, [pc, #20]	; (2ac <enqueueParam+0x28>)
     296:	54d0      	strb	r0, [r2, r3]
}
     298:	4770      	bx	lr
		frontParam = 0;
     29a:	2200      	movs	r2, #0
     29c:	4b01      	ldr	r3, [pc, #4]	; (2a4 <enqueueParam+0x20>)
     29e:	601a      	str	r2, [r3, #0]
     2a0:	e7f4      	b.n	28c <enqueueParam+0x8>
     2a2:	46c0      	nop			; (mov r8, r8)
     2a4:	20000004 	.word	0x20000004
     2a8:	2000000c 	.word	0x2000000c
     2ac:	20000304 	.word	0x20000304

000002b0 <clearQueues>:
void clearQueues(void)
{
     2b0:	b530      	push	{r4, r5, lr}

	for(int i = 0 ; i < (MAXSIZE - 1) ; i++)
     2b2:	4b0e      	ldr	r3, [pc, #56]	; (2ec <clearQueues+0x3c>)
     2b4:	6818      	ldr	r0, [r3, #0]
     2b6:	1e43      	subs	r3, r0, #1
     2b8:	2b00      	cmp	r3, #0
     2ba:	dd0b      	ble.n	2d4 <clearQueues+0x24>
     2bc:	0018      	movs	r0, r3
     2be:	2300      	movs	r3, #0
	{
		queueParam[i] = 0;
     2c0:	4d0b      	ldr	r5, [pc, #44]	; (2f0 <clearQueues+0x40>)
     2c2:	2200      	movs	r2, #0
		queueParser[i] = 0;
     2c4:	4c0b      	ldr	r4, [pc, #44]	; (2f4 <clearQueues+0x44>)
		queueParam[i] = 0;
     2c6:	1959      	adds	r1, r3, r5
     2c8:	700a      	strb	r2, [r1, #0]
		queueParser[i] = 0;
     2ca:	1919      	adds	r1, r3, r4
     2cc:	700a      	strb	r2, [r1, #0]
	for(int i = 0 ; i < (MAXSIZE - 1) ; i++)
     2ce:	3301      	adds	r3, #1
     2d0:	4283      	cmp	r3, r0
     2d2:	d1f8      	bne.n	2c6 <clearQueues+0x16>
	}
	
	frontParser = -1;
     2d4:	2301      	movs	r3, #1
     2d6:	425b      	negs	r3, r3
     2d8:	4a07      	ldr	r2, [pc, #28]	; (2f8 <clearQueues+0x48>)
     2da:	6013      	str	r3, [r2, #0]
	frontParam = -1;
     2dc:	4a07      	ldr	r2, [pc, #28]	; (2fc <clearQueues+0x4c>)
     2de:	6013      	str	r3, [r2, #0]
	rearParam = -1;
     2e0:	4a07      	ldr	r2, [pc, #28]	; (300 <clearQueues+0x50>)
     2e2:	6013      	str	r3, [r2, #0]
	rearParser = -1;
     2e4:	4a07      	ldr	r2, [pc, #28]	; (304 <clearQueues+0x54>)
     2e6:	6013      	str	r3, [r2, #0]
}
     2e8:	bd30      	pop	{r4, r5, pc}
     2ea:	46c0      	nop			; (mov r8, r8)
     2ec:	20000000 	.word	0x20000000
     2f0:	20000304 	.word	0x20000304
     2f4:	200002d0 	.word	0x200002d0
     2f8:	20000008 	.word	0x20000008
     2fc:	20000004 	.word	0x20000004
     300:	2000000c 	.word	0x2000000c
     304:	20000010 	.word	0x20000010

00000308 <queueTransmogrifier>:
void queueTransmogrifier(void)
{
     308:	b570      	push	{r4, r5, r6, lr}
	[24],[80]
	
	It's like reimplementing atoi() but it's not an interview question.
	*/
	
	int param = 0;
     30a:	2400      	movs	r4, #0
	char currentByte;
	
	while(!isEmptyParser())
     30c:	4d0b      	ldr	r5, [pc, #44]	; (33c <queueTransmogrifier+0x34>)
	{
		
		currentByte = dequeueParser();		//deque from parser
     30e:	4e0c      	ldr	r6, [pc, #48]	; (340 <queueTransmogrifier+0x38>)
	while(!isEmptyParser())
     310:	e003      	b.n	31a <queueTransmogrifier+0x12>
		{
			param = (10 * param) + (int)(currentByte-48);
		}
		else
		{
			enqueueParam(param);
     312:	b2e0      	uxtb	r0, r4
     314:	4b0b      	ldr	r3, [pc, #44]	; (344 <queueTransmogrifier+0x3c>)
     316:	4798      	blx	r3
			param = 0;	
     318:	2400      	movs	r4, #0
	while(!isEmptyParser())
     31a:	47a8      	blx	r5
     31c:	2800      	cmp	r0, #0
     31e:	d108      	bne.n	332 <queueTransmogrifier+0x2a>
		currentByte = dequeueParser();		//deque from parser
     320:	47b0      	blx	r6
		if(currentByte != 0x3B)
     322:	283b      	cmp	r0, #59	; 0x3b
     324:	d0f5      	beq.n	312 <queueTransmogrifier+0xa>
			param = (10 * param) + (int)(currentByte-48);
     326:	00a3      	lsls	r3, r4, #2
     328:	191c      	adds	r4, r3, r4
     32a:	0064      	lsls	r4, r4, #1
     32c:	3830      	subs	r0, #48	; 0x30
     32e:	1904      	adds	r4, r0, r4
     330:	e7f3      	b.n	31a <queueTransmogrifier+0x12>
		}
	}
	enqueueParam(param);
     332:	b2e0      	uxtb	r0, r4
     334:	4b03      	ldr	r3, [pc, #12]	; (344 <queueTransmogrifier+0x3c>)
     336:	4798      	blx	r3
}
     338:	bd70      	pop	{r4, r5, r6, pc}
     33a:	46c0      	nop			; (mov r8, r8)
     33c:	000001d1 	.word	0x000001d1
     340:	000001e5 	.word	0x000001e5
     344:	00000285 	.word	0x00000285

00000348 <CSIignoreState>:
	}
}

void CSIignoreState(uint8_t character)
{
	if(character == 0x1B)
     348:	281b      	cmp	r0, #27
     34a:	d000      	beq.n	34e <CSIignoreState+0x6>
	{
		currentState = stateGround;
	}
}
     34c:	4770      	bx	lr
		currentState = stateGround;
     34e:	2200      	movs	r2, #0
     350:	4b01      	ldr	r3, [pc, #4]	; (358 <CSIignoreState+0x10>)
     352:	701a      	strb	r2, [r3, #0]
}
     354:	e7fa      	b.n	34c <CSIignoreState+0x4>
     356:	46c0      	nop			; (mov r8, r8)
     358:	200002c1 	.word	0x200002c1

0000035c <SC>:
/************************************************************************/

void SC()
{
	//Save cursor position
	DECSCX = xCharPos;
     35c:	4b05      	ldr	r3, [pc, #20]	; (374 <SC+0x18>)
     35e:	881a      	ldrh	r2, [r3, #0]
     360:	4b05      	ldr	r3, [pc, #20]	; (378 <SC+0x1c>)
     362:	701a      	strb	r2, [r3, #0]
	DECSCY = yCharPos;
     364:	4b05      	ldr	r3, [pc, #20]	; (37c <SC+0x20>)
     366:	881a      	ldrh	r2, [r3, #0]
     368:	4b05      	ldr	r3, [pc, #20]	; (380 <SC+0x24>)
     36a:	701a      	strb	r2, [r3, #0]
	currentState = stateGround;
     36c:	2200      	movs	r2, #0
     36e:	4b05      	ldr	r3, [pc, #20]	; (384 <SC+0x28>)
     370:	701a      	strb	r2, [r3, #0]
}
     372:	4770      	bx	lr
     374:	200002bc 	.word	0x200002bc
     378:	200001f8 	.word	0x200001f8
     37c:	200002be 	.word	0x200002be
     380:	200001f9 	.word	0x200001f9
     384:	200002c1 	.word	0x200002c1

00000388 <RC>:

void RC()
{
     388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//Restore cursor to saved position
	
	char tempCharacter;
	
	drawChar(consoleDisplay[xCharPos][yCharPos]);
     38a:	4c0f      	ldr	r4, [pc, #60]	; (3c8 <RC+0x40>)
     38c:	4f0f      	ldr	r7, [pc, #60]	; (3cc <RC+0x44>)
     38e:	883a      	ldrh	r2, [r7, #0]
     390:	4e0f      	ldr	r6, [pc, #60]	; (3d0 <RC+0x48>)
     392:	8831      	ldrh	r1, [r6, #0]
     394:	0053      	lsls	r3, r2, #1
     396:	189b      	adds	r3, r3, r2
     398:	00db      	lsls	r3, r3, #3
     39a:	18e3      	adds	r3, r4, r3
     39c:	5c58      	ldrb	r0, [r3, r1]
     39e:	4d0d      	ldr	r5, [pc, #52]	; (3d4 <RC+0x4c>)
     3a0:	47a8      	blx	r5
	xCharPos = DECSCX;
     3a2:	4b0d      	ldr	r3, [pc, #52]	; (3d8 <RC+0x50>)
     3a4:	781a      	ldrb	r2, [r3, #0]
     3a6:	803a      	strh	r2, [r7, #0]
	yCharPos = DECSCY;
     3a8:	4b0c      	ldr	r3, [pc, #48]	; (3dc <RC+0x54>)
     3aa:	7819      	ldrb	r1, [r3, #0]
     3ac:	8031      	strh	r1, [r6, #0]
	tempCharacter = consoleDisplay[xCharPos][yCharPos];
     3ae:	0053      	lsls	r3, r2, #1
     3b0:	189b      	adds	r3, r3, r2
     3b2:	00db      	lsls	r3, r3, #3
     3b4:	18e3      	adds	r3, r4, r3
	drawChar(tempCharacter);
     3b6:	5c58      	ldrb	r0, [r3, r1]
     3b8:	47a8      	blx	r5
	blinkCursor();
     3ba:	4b09      	ldr	r3, [pc, #36]	; (3e0 <RC+0x58>)
     3bc:	4798      	blx	r3
	currentState = stateGround;
     3be:	2200      	movs	r2, #0
     3c0:	4b08      	ldr	r3, [pc, #32]	; (3e4 <RC+0x5c>)
     3c2:	701a      	strb	r2, [r3, #0]
}
     3c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     3c6:	46c0      	nop			; (mov r8, r8)
     3c8:	200003c4 	.word	0x200003c4
     3cc:	200002bc 	.word	0x200002bc
     3d0:	200002be 	.word	0x200002be
     3d4:	00002c8d 	.word	0x00002c8d
     3d8:	200001f8 	.word	0x200001f8
     3dc:	200001f9 	.word	0x200001f9
     3e0:	00002d75 	.word	0x00002d75
     3e4:	200002c1 	.word	0x200002c1

000003e8 <IND>:

void IND()
{
     3e8:	b570      	push	{r4, r5, r6, lr}
	//performs newline() if row = 24
	
	char tempCharacter;
	int xTemp = 0;
	
	if(yCharPos < 23)
     3ea:	4b19      	ldr	r3, [pc, #100]	; (450 <IND+0x68>)
     3ec:	881a      	ldrh	r2, [r3, #0]
     3ee:	2a16      	cmp	r2, #22
     3f0:	d914      	bls.n	41c <IND+0x34>
		drawChar(tempCharacter);
		blinkCursor();
	}
	else
	{
		xTemp = xCharPos;
     3f2:	4d18      	ldr	r5, [pc, #96]	; (454 <IND+0x6c>)
     3f4:	882c      	ldrh	r4, [r5, #0]
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     3f6:	0063      	lsls	r3, r4, #1
     3f8:	191b      	adds	r3, r3, r4
     3fa:	00db      	lsls	r3, r3, #3
     3fc:	4916      	ldr	r1, [pc, #88]	; (458 <IND+0x70>)
     3fe:	18cb      	adds	r3, r1, r3
     400:	5c98      	ldrb	r0, [r3, r2]
     402:	4e16      	ldr	r6, [pc, #88]	; (45c <IND+0x74>)
     404:	47b0      	blx	r6
		newLine();
     406:	4b16      	ldr	r3, [pc, #88]	; (460 <IND+0x78>)
     408:	4798      	blx	r3
		drawChar(0x00);
     40a:	2000      	movs	r0, #0
     40c:	47b0      	blx	r6
		xCharPos = xTemp;
     40e:	802c      	strh	r4, [r5, #0]
		blinkCursor();
     410:	4b14      	ldr	r3, [pc, #80]	; (464 <IND+0x7c>)
     412:	4798      	blx	r3
	}
		
		currentState = stateGround;	
     414:	2200      	movs	r2, #0
     416:	4b14      	ldr	r3, [pc, #80]	; (468 <IND+0x80>)
     418:	701a      	strb	r2, [r3, #0]
}
     41a:	bd70      	pop	{r4, r5, r6, pc}
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     41c:	4c0e      	ldr	r4, [pc, #56]	; (458 <IND+0x70>)
     41e:	4d0d      	ldr	r5, [pc, #52]	; (454 <IND+0x6c>)
     420:	8829      	ldrh	r1, [r5, #0]
     422:	004b      	lsls	r3, r1, #1
     424:	185b      	adds	r3, r3, r1
     426:	00db      	lsls	r3, r3, #3
     428:	18e3      	adds	r3, r4, r3
     42a:	5c98      	ldrb	r0, [r3, r2]
     42c:	4e0b      	ldr	r6, [pc, #44]	; (45c <IND+0x74>)
     42e:	47b0      	blx	r6
		yCharPos++;
     430:	4a07      	ldr	r2, [pc, #28]	; (450 <IND+0x68>)
     432:	8813      	ldrh	r3, [r2, #0]
     434:	3301      	adds	r3, #1
     436:	b29b      	uxth	r3, r3
     438:	8013      	strh	r3, [r2, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     43a:	8829      	ldrh	r1, [r5, #0]
     43c:	004a      	lsls	r2, r1, #1
     43e:	1852      	adds	r2, r2, r1
     440:	00d2      	lsls	r2, r2, #3
     442:	18a4      	adds	r4, r4, r2
		drawChar(tempCharacter);
     444:	5ce0      	ldrb	r0, [r4, r3]
     446:	47b0      	blx	r6
		blinkCursor();
     448:	4b06      	ldr	r3, [pc, #24]	; (464 <IND+0x7c>)
     44a:	4798      	blx	r3
     44c:	e7e2      	b.n	414 <IND+0x2c>
     44e:	46c0      	nop			; (mov r8, r8)
     450:	200002be 	.word	0x200002be
     454:	200002bc 	.word	0x200002bc
     458:	200003c4 	.word	0x200003c4
     45c:	00002c8d 	.word	0x00002c8d
     460:	00002ed1 	.word	0x00002ed1
     464:	00002d75 	.word	0x00002d75
     468:	200002c1 	.word	0x200002c1

0000046c <NEL>:

void NEL()
{
     46c:	b570      	push	{r4, r5, r6, lr}
	//new line, moves down one line and to the
	//first column (CR,LF) scrolls if row = 24
	
	char tempCharacter;
	
	if(yCharPos < 23)
     46e:	4b18      	ldr	r3, [pc, #96]	; (4d0 <NEL+0x64>)
     470:	881a      	ldrh	r2, [r3, #0]
     472:	2a16      	cmp	r2, #22
     474:	d915      	bls.n	4a2 <NEL+0x36>
		drawChar(tempCharacter);
		blinkCursor();
	}
	else
	{
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     476:	4c17      	ldr	r4, [pc, #92]	; (4d4 <NEL+0x68>)
     478:	8821      	ldrh	r1, [r4, #0]
     47a:	004b      	lsls	r3, r1, #1
     47c:	185b      	adds	r3, r3, r1
     47e:	00db      	lsls	r3, r3, #3
     480:	4915      	ldr	r1, [pc, #84]	; (4d8 <NEL+0x6c>)
     482:	18cb      	adds	r3, r1, r3
     484:	5c98      	ldrb	r0, [r3, r2]
     486:	4d15      	ldr	r5, [pc, #84]	; (4dc <NEL+0x70>)
     488:	47a8      	blx	r5
		newLine();
     48a:	4b15      	ldr	r3, [pc, #84]	; (4e0 <NEL+0x74>)
     48c:	4798      	blx	r3
		drawChar(0x00);
     48e:	2000      	movs	r0, #0
     490:	47a8      	blx	r5
		xCharPos = 0;
     492:	2300      	movs	r3, #0
     494:	8023      	strh	r3, [r4, #0]
		blinkCursor();
     496:	4b13      	ldr	r3, [pc, #76]	; (4e4 <NEL+0x78>)
     498:	4798      	blx	r3
	}
		
	currentState = stateGround;
     49a:	2200      	movs	r2, #0
     49c:	4b12      	ldr	r3, [pc, #72]	; (4e8 <NEL+0x7c>)
     49e:	701a      	strb	r2, [r3, #0]
}
     4a0:	bd70      	pop	{r4, r5, r6, pc}
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     4a2:	4c0d      	ldr	r4, [pc, #52]	; (4d8 <NEL+0x6c>)
     4a4:	4d0b      	ldr	r5, [pc, #44]	; (4d4 <NEL+0x68>)
     4a6:	8829      	ldrh	r1, [r5, #0]
     4a8:	004b      	lsls	r3, r1, #1
     4aa:	185b      	adds	r3, r3, r1
     4ac:	00db      	lsls	r3, r3, #3
     4ae:	18e3      	adds	r3, r4, r3
     4b0:	5c98      	ldrb	r0, [r3, r2]
     4b2:	4e0a      	ldr	r6, [pc, #40]	; (4dc <NEL+0x70>)
     4b4:	47b0      	blx	r6
		yCharPos++;
     4b6:	4a06      	ldr	r2, [pc, #24]	; (4d0 <NEL+0x64>)
     4b8:	8813      	ldrh	r3, [r2, #0]
     4ba:	3301      	adds	r3, #1
     4bc:	b29b      	uxth	r3, r3
     4be:	8013      	strh	r3, [r2, #0]
		xCharPos = 0;
     4c0:	2200      	movs	r2, #0
     4c2:	802a      	strh	r2, [r5, #0]
		drawChar(tempCharacter);
     4c4:	5ce0      	ldrb	r0, [r4, r3]
     4c6:	47b0      	blx	r6
		blinkCursor();
     4c8:	4b06      	ldr	r3, [pc, #24]	; (4e4 <NEL+0x78>)
     4ca:	4798      	blx	r3
     4cc:	e7e5      	b.n	49a <NEL+0x2e>
     4ce:	46c0      	nop			; (mov r8, r8)
     4d0:	200002be 	.word	0x200002be
     4d4:	200002bc 	.word	0x200002bc
     4d8:	200003c4 	.word	0x200003c4
     4dc:	00002c8d 	.word	0x00002c8d
     4e0:	00002ed1 	.word	0x00002ed1
     4e4:	00002d75 	.word	0x00002d75
     4e8:	200002c1 	.word	0x200002c1

000004ec <RI>:

void RI()
{
     4ec:	b570      	push	{r4, r5, r6, lr}
	//Reverse Index
	//Moves the cursor to the same horizontal position on the preceding line
	
	char tempCharacter;
	
	if(yCharPos == 0)
     4ee:	4b10      	ldr	r3, [pc, #64]	; (530 <RI+0x44>)
     4f0:	881a      	ldrh	r2, [r3, #0]
     4f2:	2a00      	cmp	r2, #0
     4f4:	d103      	bne.n	4fe <RI+0x12>
		yCharPos--;
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
		drawChar(tempCharacter);
		blinkCursor();
	}
	currentState = stateGround;
     4f6:	2200      	movs	r2, #0
     4f8:	4b0e      	ldr	r3, [pc, #56]	; (534 <RI+0x48>)
     4fa:	701a      	strb	r2, [r3, #0]
}
     4fc:	bd70      	pop	{r4, r5, r6, pc}
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     4fe:	4c0e      	ldr	r4, [pc, #56]	; (538 <RI+0x4c>)
     500:	4d0e      	ldr	r5, [pc, #56]	; (53c <RI+0x50>)
     502:	8829      	ldrh	r1, [r5, #0]
     504:	004b      	lsls	r3, r1, #1
     506:	185b      	adds	r3, r3, r1
     508:	00db      	lsls	r3, r3, #3
     50a:	18e3      	adds	r3, r4, r3
     50c:	5c98      	ldrb	r0, [r3, r2]
     50e:	4e0c      	ldr	r6, [pc, #48]	; (540 <RI+0x54>)
     510:	47b0      	blx	r6
		yCharPos--;
     512:	4a07      	ldr	r2, [pc, #28]	; (530 <RI+0x44>)
     514:	8813      	ldrh	r3, [r2, #0]
     516:	3b01      	subs	r3, #1
     518:	b29b      	uxth	r3, r3
     51a:	8013      	strh	r3, [r2, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     51c:	8829      	ldrh	r1, [r5, #0]
     51e:	004a      	lsls	r2, r1, #1
     520:	1852      	adds	r2, r2, r1
     522:	00d2      	lsls	r2, r2, #3
     524:	18a4      	adds	r4, r4, r2
		drawChar(tempCharacter);
     526:	5ce0      	ldrb	r0, [r4, r3]
     528:	47b0      	blx	r6
		blinkCursor();
     52a:	4b06      	ldr	r3, [pc, #24]	; (544 <RI+0x58>)
     52c:	4798      	blx	r3
     52e:	e7e2      	b.n	4f6 <RI+0xa>
     530:	200002be 	.word	0x200002be
     534:	200002c1 	.word	0x200002c1
     538:	200003c4 	.word	0x200003c4
     53c:	200002bc 	.word	0x200002bc
     540:	00002c8d 	.word	0x00002c8d
     544:	00002d75 	.word	0x00002d75

00000548 <RIS>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     548:	f3bf 8f4f 	dsb	sy
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
     54c:	4a03      	ldr	r2, [pc, #12]	; (55c <RIS+0x14>)
     54e:	4b04      	ldr	r3, [pc, #16]	; (560 <RIS+0x18>)
     550:	60da      	str	r2, [r3, #12]
     552:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     556:	46c0      	nop			; (mov r8, r8)
     558:	e7fd      	b.n	556 <RIS+0xe>
     55a:	46c0      	nop			; (mov r8, r8)
     55c:	05fa0004 	.word	0x05fa0004
     560:	e000ed00 	.word	0xe000ed00

00000564 <escState>:
{
     564:	b510      	push	{r4, lr}
	if(character == 0x37)		//ESC + 7 - (DECSC) -
     566:	2837      	cmp	r0, #55	; 0x37
     568:	d013      	beq.n	592 <escState+0x2e>
	else if(character == 0x38)		//ESC + 8 - (DECRC) -
     56a:	2838      	cmp	r0, #56	; 0x38
     56c:	d014      	beq.n	598 <escState+0x34>
	else if(character == 0x44)		//ESC + D - (IND) - 
     56e:	2844      	cmp	r0, #68	; 0x44
     570:	d015      	beq.n	59e <escState+0x3a>
	else if(character == 0x45)		//ESC + E - (NEL) -
     572:	2845      	cmp	r0, #69	; 0x45
     574:	d016      	beq.n	5a4 <escState+0x40>
	else if(character == 0x4D)		//ESC + M - (RI)
     576:	284d      	cmp	r0, #77	; 0x4d
     578:	d017      	beq.n	5aa <escState+0x46>
	else if(character == 0x63)		//ESC + c - (RIS)
     57a:	2863      	cmp	r0, #99	; 0x63
     57c:	d018      	beq.n	5b0 <escState+0x4c>
	else if(character == 0x23 || character == 0x28)
     57e:	2823      	cmp	r0, #35	; 0x23
     580:	d018      	beq.n	5b4 <escState+0x50>
     582:	2828      	cmp	r0, #40	; 0x28
     584:	d016      	beq.n	5b4 <escState+0x50>
	else if(character == 0x5B)
     586:	285b      	cmp	r0, #91	; 0x5b
     588:	d01a      	beq.n	5c0 <escState+0x5c>
		currentState = stateGround;
     58a:	2200      	movs	r2, #0
     58c:	4b0e      	ldr	r3, [pc, #56]	; (5c8 <escState+0x64>)
     58e:	701a      	strb	r2, [r3, #0]
}
     590:	bd10      	pop	{r4, pc}
		SC();
     592:	4b0e      	ldr	r3, [pc, #56]	; (5cc <escState+0x68>)
     594:	4798      	blx	r3
     596:	e7fb      	b.n	590 <escState+0x2c>
		RC();
     598:	4b0d      	ldr	r3, [pc, #52]	; (5d0 <escState+0x6c>)
     59a:	4798      	blx	r3
     59c:	e7f8      	b.n	590 <escState+0x2c>
		IND();			
     59e:	4b0d      	ldr	r3, [pc, #52]	; (5d4 <escState+0x70>)
     5a0:	4798      	blx	r3
     5a2:	e7f5      	b.n	590 <escState+0x2c>
		NEL();
     5a4:	4b0c      	ldr	r3, [pc, #48]	; (5d8 <escState+0x74>)
     5a6:	4798      	blx	r3
     5a8:	e7f2      	b.n	590 <escState+0x2c>
		RI();
     5aa:	4b0c      	ldr	r3, [pc, #48]	; (5dc <escState+0x78>)
     5ac:	4798      	blx	r3
     5ae:	e7ef      	b.n	590 <escState+0x2c>
		RIS();
     5b0:	4b0b      	ldr	r3, [pc, #44]	; (5e0 <escState+0x7c>)
     5b2:	4798      	blx	r3
		stateEnterBuffer = character;
     5b4:	4b0b      	ldr	r3, [pc, #44]	; (5e4 <escState+0x80>)
     5b6:	7018      	strb	r0, [r3, #0]
		currentState = stateESCinter;
     5b8:	2202      	movs	r2, #2
     5ba:	4b03      	ldr	r3, [pc, #12]	; (5c8 <escState+0x64>)
     5bc:	701a      	strb	r2, [r3, #0]
     5be:	e7e7      	b.n	590 <escState+0x2c>
		currentState = stateCSIentry;
     5c0:	2203      	movs	r2, #3
     5c2:	4b01      	ldr	r3, [pc, #4]	; (5c8 <escState+0x64>)
     5c4:	701a      	strb	r2, [r3, #0]
     5c6:	e7e3      	b.n	590 <escState+0x2c>
     5c8:	200002c1 	.word	0x200002c1
     5cc:	0000035d 	.word	0x0000035d
     5d0:	00000389 	.word	0x00000389
     5d4:	000003e9 	.word	0x000003e9
     5d8:	0000046d 	.word	0x0000046d
     5dc:	000004ed 	.word	0x000004ed
     5e0:	00000549 	.word	0x00000549
     5e4:	20000346 	.word	0x20000346

000005e8 <CUU>:

/************************************************************************/
/*    CSI mnemonic functions                                            */
/************************************************************************/
void CUU() // Cursor Up
{
     5e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	unsigned char tempCharacter;
	uint8_t parameter = 0;
	
	if(isEmptyParam())
     5ea:	4b20      	ldr	r3, [pc, #128]	; (66c <CUU+0x84>)
     5ec:	4798      	blx	r3
	{
		parameter = 1;
     5ee:	2401      	movs	r4, #1
	if(isEmptyParam())
     5f0:	2800      	cmp	r0, #0
     5f2:	d01d      	beq.n	630 <CUU+0x48>
		{
			parameter = 1;
		}
	}
	
	if((yCharPos - parameter) >= 0 && (yCharPos - parameter) <= 24)
     5f4:	4b1e      	ldr	r3, [pc, #120]	; (670 <CUU+0x88>)
     5f6:	881a      	ldrh	r2, [r3, #0]
     5f8:	1b13      	subs	r3, r2, r4
     5fa:	2b18      	cmp	r3, #24
     5fc:	d91e      	bls.n	63c <CUU+0x54>
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
		drawChar(tempCharacter);
	}
	else
	{
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     5fe:	4c1d      	ldr	r4, [pc, #116]	; (674 <CUU+0x8c>)
     600:	4e1d      	ldr	r6, [pc, #116]	; (678 <CUU+0x90>)
     602:	8831      	ldrh	r1, [r6, #0]
     604:	004b      	lsls	r3, r1, #1
     606:	185b      	adds	r3, r3, r1
     608:	00db      	lsls	r3, r3, #3
     60a:	18e3      	adds	r3, r4, r3
     60c:	5c98      	ldrb	r0, [r3, r2]
     60e:	4d1b      	ldr	r5, [pc, #108]	; (67c <CUU+0x94>)
     610:	47a8      	blx	r5
		yCharPos = 0;
     612:	2200      	movs	r2, #0
     614:	4b16      	ldr	r3, [pc, #88]	; (670 <CUU+0x88>)
     616:	801a      	strh	r2, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     618:	8832      	ldrh	r2, [r6, #0]
     61a:	0053      	lsls	r3, r2, #1
     61c:	189b      	adds	r3, r3, r2
     61e:	00db      	lsls	r3, r3, #3
		drawChar(tempCharacter);
     620:	5d18      	ldrb	r0, [r3, r4]
     622:	47a8      	blx	r5
	}
	
	blinkCursor();
     624:	4b16      	ldr	r3, [pc, #88]	; (680 <CUU+0x98>)
     626:	4798      	blx	r3
	currentState = stateGround;
     628:	2200      	movs	r2, #0
     62a:	4b16      	ldr	r3, [pc, #88]	; (684 <CUU+0x9c>)
     62c:	701a      	strb	r2, [r3, #0]
}
     62e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		parameter = dequeueParam();
     630:	4b15      	ldr	r3, [pc, #84]	; (688 <CUU+0xa0>)
     632:	4798      	blx	r3
     634:	1e04      	subs	r4, r0, #0
		if(parameter == 0)
     636:	d1dd      	bne.n	5f4 <CUU+0xc>
			parameter = 1;
     638:	3401      	adds	r4, #1
     63a:	e7db      	b.n	5f4 <CUU+0xc>
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     63c:	4d0d      	ldr	r5, [pc, #52]	; (674 <CUU+0x8c>)
     63e:	4e0e      	ldr	r6, [pc, #56]	; (678 <CUU+0x90>)
     640:	8831      	ldrh	r1, [r6, #0]
     642:	004b      	lsls	r3, r1, #1
     644:	185b      	adds	r3, r3, r1
     646:	00db      	lsls	r3, r3, #3
     648:	18eb      	adds	r3, r5, r3
     64a:	5c98      	ldrb	r0, [r3, r2]
     64c:	4f0b      	ldr	r7, [pc, #44]	; (67c <CUU+0x94>)
     64e:	47b8      	blx	r7
		yCharPos = yCharPos - parameter;
     650:	4b07      	ldr	r3, [pc, #28]	; (670 <CUU+0x88>)
     652:	8818      	ldrh	r0, [r3, #0]
     654:	1b04      	subs	r4, r0, r4
     656:	b2a4      	uxth	r4, r4
     658:	801c      	strh	r4, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     65a:	8832      	ldrh	r2, [r6, #0]
     65c:	0053      	lsls	r3, r2, #1
     65e:	189b      	adds	r3, r3, r2
     660:	00db      	lsls	r3, r3, #3
     662:	18ed      	adds	r5, r5, r3
		drawChar(tempCharacter);
     664:	5d28      	ldrb	r0, [r5, r4]
     666:	47b8      	blx	r7
     668:	e7dc      	b.n	624 <CUU+0x3c>
     66a:	46c0      	nop			; (mov r8, r8)
     66c:	00000241 	.word	0x00000241
     670:	200002be 	.word	0x200002be
     674:	200003c4 	.word	0x200003c4
     678:	200002bc 	.word	0x200002bc
     67c:	00002c8d 	.word	0x00002c8d
     680:	00002d75 	.word	0x00002d75
     684:	200002c1 	.word	0x200002c1
     688:	00000255 	.word	0x00000255

0000068c <CUD>:
void CUD() //Cursor Down
{
     68c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	unsigned char tempCharacter;
	uint8_t parameter = 0;
	
	if(isEmptyParam())
     68e:	4b20      	ldr	r3, [pc, #128]	; (710 <CUD+0x84>)
     690:	4798      	blx	r3
	{
		parameter = 1;
     692:	2401      	movs	r4, #1
	if(isEmptyParam())
     694:	2800      	cmp	r0, #0
     696:	d01e      	beq.n	6d6 <CUD+0x4a>
		if(parameter == 0)
		{
			parameter = 1;
		}
	}
	if((yCharPos + parameter) <= 23)
     698:	4b1e      	ldr	r3, [pc, #120]	; (714 <CUD+0x88>)
     69a:	881a      	ldrh	r2, [r3, #0]
     69c:	18a3      	adds	r3, r4, r2
     69e:	2b17      	cmp	r3, #23
     6a0:	dd1f      	ble.n	6e2 <CUD+0x56>
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
		drawChar(tempCharacter);
	}
	else
	{
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     6a2:	4c1d      	ldr	r4, [pc, #116]	; (718 <CUD+0x8c>)
     6a4:	4e1d      	ldr	r6, [pc, #116]	; (71c <CUD+0x90>)
     6a6:	8831      	ldrh	r1, [r6, #0]
     6a8:	004b      	lsls	r3, r1, #1
     6aa:	185b      	adds	r3, r3, r1
     6ac:	00db      	lsls	r3, r3, #3
     6ae:	18e3      	adds	r3, r4, r3
     6b0:	5c98      	ldrb	r0, [r3, r2]
     6b2:	4d1b      	ldr	r5, [pc, #108]	; (720 <CUD+0x94>)
     6b4:	47a8      	blx	r5
		yCharPos = 23;
     6b6:	2217      	movs	r2, #23
     6b8:	4b16      	ldr	r3, [pc, #88]	; (714 <CUD+0x88>)
     6ba:	801a      	strh	r2, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     6bc:	8832      	ldrh	r2, [r6, #0]
     6be:	0053      	lsls	r3, r2, #1
     6c0:	189b      	adds	r3, r3, r2
     6c2:	00db      	lsls	r3, r3, #3
     6c4:	18e3      	adds	r3, r4, r3
		drawChar(tempCharacter);
     6c6:	7dd8      	ldrb	r0, [r3, #23]
     6c8:	47a8      	blx	r5
	}

	blinkCursor();
     6ca:	4b16      	ldr	r3, [pc, #88]	; (724 <CUD+0x98>)
     6cc:	4798      	blx	r3
	currentState = stateGround;
     6ce:	2200      	movs	r2, #0
     6d0:	4b15      	ldr	r3, [pc, #84]	; (728 <CUD+0x9c>)
     6d2:	701a      	strb	r2, [r3, #0]
}
     6d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		parameter = dequeueParam();
     6d6:	4b15      	ldr	r3, [pc, #84]	; (72c <CUD+0xa0>)
     6d8:	4798      	blx	r3
     6da:	1e04      	subs	r4, r0, #0
		if(parameter == 0)
     6dc:	d1dc      	bne.n	698 <CUD+0xc>
			parameter = 1;
     6de:	3401      	adds	r4, #1
     6e0:	e7da      	b.n	698 <CUD+0xc>
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     6e2:	4d0d      	ldr	r5, [pc, #52]	; (718 <CUD+0x8c>)
     6e4:	4e0d      	ldr	r6, [pc, #52]	; (71c <CUD+0x90>)
     6e6:	8831      	ldrh	r1, [r6, #0]
     6e8:	004b      	lsls	r3, r1, #1
     6ea:	185b      	adds	r3, r3, r1
     6ec:	00db      	lsls	r3, r3, #3
     6ee:	18eb      	adds	r3, r5, r3
     6f0:	5c98      	ldrb	r0, [r3, r2]
     6f2:	4f0b      	ldr	r7, [pc, #44]	; (720 <CUD+0x94>)
     6f4:	47b8      	blx	r7
		yCharPos = yCharPos + parameter;
     6f6:	4b07      	ldr	r3, [pc, #28]	; (714 <CUD+0x88>)
     6f8:	8818      	ldrh	r0, [r3, #0]
     6fa:	1904      	adds	r4, r0, r4
     6fc:	b2a4      	uxth	r4, r4
     6fe:	801c      	strh	r4, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     700:	8832      	ldrh	r2, [r6, #0]
     702:	0053      	lsls	r3, r2, #1
     704:	189b      	adds	r3, r3, r2
     706:	00db      	lsls	r3, r3, #3
     708:	18ed      	adds	r5, r5, r3
		drawChar(tempCharacter);
     70a:	5d28      	ldrb	r0, [r5, r4]
     70c:	47b8      	blx	r7
     70e:	e7dc      	b.n	6ca <CUD+0x3e>
     710:	00000241 	.word	0x00000241
     714:	200002be 	.word	0x200002be
     718:	200003c4 	.word	0x200003c4
     71c:	200002bc 	.word	0x200002bc
     720:	00002c8d 	.word	0x00002c8d
     724:	00002d75 	.word	0x00002d75
     728:	200002c1 	.word	0x200002c1
     72c:	00000255 	.word	0x00000255

00000730 <CUF>:
void CUF() //Cursor Forward
{
     730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	unsigned char tempCharacter;
	uint8_t parameter = 0;
	
	if(isEmptyParam())
     732:	4b21      	ldr	r3, [pc, #132]	; (7b8 <CUF+0x88>)
     734:	4798      	blx	r3
	{
		parameter = 1;
     736:	2401      	movs	r4, #1
	if(isEmptyParam())
     738:	2800      	cmp	r0, #0
     73a:	d01f      	beq.n	77c <CUF+0x4c>
		{
			parameter = 1;
		}
	}
	
	if(xCharPos + parameter <= 79)
     73c:	4b1f      	ldr	r3, [pc, #124]	; (7bc <CUF+0x8c>)
     73e:	881a      	ldrh	r2, [r3, #0]
     740:	18a3      	adds	r3, r4, r2
     742:	2b4f      	cmp	r3, #79	; 0x4f
     744:	dd20      	ble.n	788 <CUF+0x58>
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
		drawChar(tempCharacter);
	}
	else
	{
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     746:	4c1e      	ldr	r4, [pc, #120]	; (7c0 <CUF+0x90>)
     748:	4e1e      	ldr	r6, [pc, #120]	; (7c4 <CUF+0x94>)
     74a:	8831      	ldrh	r1, [r6, #0]
     74c:	0053      	lsls	r3, r2, #1
     74e:	189b      	adds	r3, r3, r2
     750:	00db      	lsls	r3, r3, #3
     752:	18e3      	adds	r3, r4, r3
     754:	5c58      	ldrb	r0, [r3, r1]
     756:	4d1c      	ldr	r5, [pc, #112]	; (7c8 <CUF+0x98>)
     758:	47a8      	blx	r5
		xCharPos = 79;
     75a:	224f      	movs	r2, #79	; 0x4f
     75c:	4b17      	ldr	r3, [pc, #92]	; (7bc <CUF+0x8c>)
     75e:	801a      	strh	r2, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     760:	8833      	ldrh	r3, [r6, #0]
     762:	18e4      	adds	r4, r4, r3
     764:	23ed      	movs	r3, #237	; 0xed
     766:	00db      	lsls	r3, r3, #3
     768:	469c      	mov	ip, r3
     76a:	4464      	add	r4, ip
		drawChar(tempCharacter);	
     76c:	7820      	ldrb	r0, [r4, #0]
     76e:	47a8      	blx	r5
	}
	blinkCursor();
     770:	4b16      	ldr	r3, [pc, #88]	; (7cc <CUF+0x9c>)
     772:	4798      	blx	r3
	currentState = stateGround;
     774:	2200      	movs	r2, #0
     776:	4b16      	ldr	r3, [pc, #88]	; (7d0 <CUF+0xa0>)
     778:	701a      	strb	r2, [r3, #0]
}
     77a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		parameter = dequeueParam();
     77c:	4b15      	ldr	r3, [pc, #84]	; (7d4 <CUF+0xa4>)
     77e:	4798      	blx	r3
     780:	1e04      	subs	r4, r0, #0
		if(parameter == 0)
     782:	d1db      	bne.n	73c <CUF+0xc>
			parameter = 1;
     784:	3401      	adds	r4, #1
     786:	e7d9      	b.n	73c <CUF+0xc>
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     788:	4d0d      	ldr	r5, [pc, #52]	; (7c0 <CUF+0x90>)
     78a:	4e0e      	ldr	r6, [pc, #56]	; (7c4 <CUF+0x94>)
     78c:	8831      	ldrh	r1, [r6, #0]
     78e:	0053      	lsls	r3, r2, #1
     790:	189b      	adds	r3, r3, r2
     792:	00db      	lsls	r3, r3, #3
     794:	18eb      	adds	r3, r5, r3
     796:	5c58      	ldrb	r0, [r3, r1]
     798:	4f0b      	ldr	r7, [pc, #44]	; (7c8 <CUF+0x98>)
     79a:	47b8      	blx	r7
		xCharPos = xCharPos + parameter;
     79c:	4b07      	ldr	r3, [pc, #28]	; (7bc <CUF+0x8c>)
     79e:	8818      	ldrh	r0, [r3, #0]
     7a0:	1904      	adds	r4, r0, r4
     7a2:	b2a4      	uxth	r4, r4
     7a4:	801c      	strh	r4, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     7a6:	8833      	ldrh	r3, [r6, #0]
     7a8:	0060      	lsls	r0, r4, #1
     7aa:	1904      	adds	r4, r0, r4
     7ac:	00e4      	lsls	r4, r4, #3
     7ae:	192c      	adds	r4, r5, r4
		drawChar(tempCharacter);
     7b0:	5ce0      	ldrb	r0, [r4, r3]
     7b2:	47b8      	blx	r7
     7b4:	e7dc      	b.n	770 <CUF+0x40>
     7b6:	46c0      	nop			; (mov r8, r8)
     7b8:	00000241 	.word	0x00000241
     7bc:	200002bc 	.word	0x200002bc
     7c0:	200003c4 	.word	0x200003c4
     7c4:	200002be 	.word	0x200002be
     7c8:	00002c8d 	.word	0x00002c8d
     7cc:	00002d75 	.word	0x00002d75
     7d0:	200002c1 	.word	0x200002c1
     7d4:	00000255 	.word	0x00000255

000007d8 <CUB>:
void CUB() //Cursor Backward
{
     7d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	unsigned char tempCharacter;
	uint8_t parameter = 0;
	
	if(isEmptyParam())
     7da:	4b1e      	ldr	r3, [pc, #120]	; (854 <CUB+0x7c>)
     7dc:	4798      	blx	r3
	{
		parameter = 1;
     7de:	2601      	movs	r6, #1
	if(isEmptyParam())
     7e0:	2800      	cmp	r0, #0
     7e2:	d01f      	beq.n	824 <CUB+0x4c>
		{
			parameter = 1;
		}
	}
	
	if(xCharPos - parameter >= 0)
     7e4:	4b1c      	ldr	r3, [pc, #112]	; (858 <CUB+0x80>)
     7e6:	881a      	ldrh	r2, [r3, #0]
     7e8:	1b93      	subs	r3, r2, r6
     7ea:	d421      	bmi.n	830 <CUB+0x58>
	{
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     7ec:	4c1b      	ldr	r4, [pc, #108]	; (85c <CUB+0x84>)
     7ee:	4d1c      	ldr	r5, [pc, #112]	; (860 <CUB+0x88>)
     7f0:	8829      	ldrh	r1, [r5, #0]
     7f2:	0053      	lsls	r3, r2, #1
     7f4:	189b      	adds	r3, r3, r2
     7f6:	00db      	lsls	r3, r3, #3
     7f8:	18e3      	adds	r3, r4, r3
     7fa:	5c58      	ldrb	r0, [r3, r1]
     7fc:	4f19      	ldr	r7, [pc, #100]	; (864 <CUB+0x8c>)
     7fe:	47b8      	blx	r7
		xCharPos = xCharPos - parameter;
     800:	4b15      	ldr	r3, [pc, #84]	; (858 <CUB+0x80>)
     802:	8818      	ldrh	r0, [r3, #0]
     804:	1b80      	subs	r0, r0, r6
     806:	b280      	uxth	r0, r0
     808:	8018      	strh	r0, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     80a:	882a      	ldrh	r2, [r5, #0]
     80c:	0043      	lsls	r3, r0, #1
     80e:	1818      	adds	r0, r3, r0
     810:	00c0      	lsls	r0, r0, #3
     812:	1820      	adds	r0, r4, r0
		drawChar(tempCharacter);
     814:	5c80      	ldrb	r0, [r0, r2]
     816:	47b8      	blx	r7
		drawChar(consoleDisplay[xCharPos][yCharPos]);
		xCharPos = 0;
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
		drawChar(tempCharacter);
	}
	blinkCursor();
     818:	4b13      	ldr	r3, [pc, #76]	; (868 <CUB+0x90>)
     81a:	4798      	blx	r3
	currentState = stateGround;
     81c:	2200      	movs	r2, #0
     81e:	4b13      	ldr	r3, [pc, #76]	; (86c <CUB+0x94>)
     820:	701a      	strb	r2, [r3, #0]
}
     822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		parameter = dequeueParam();
     824:	4b12      	ldr	r3, [pc, #72]	; (870 <CUB+0x98>)
     826:	4798      	blx	r3
     828:	1e06      	subs	r6, r0, #0
		if(parameter == 0)
     82a:	d1db      	bne.n	7e4 <CUB+0xc>
			parameter = 1;
     82c:	3601      	adds	r6, #1
     82e:	e7d9      	b.n	7e4 <CUB+0xc>
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     830:	4d0a      	ldr	r5, [pc, #40]	; (85c <CUB+0x84>)
     832:	4e0b      	ldr	r6, [pc, #44]	; (860 <CUB+0x88>)
     834:	8831      	ldrh	r1, [r6, #0]
     836:	0053      	lsls	r3, r2, #1
     838:	189b      	adds	r3, r3, r2
     83a:	00db      	lsls	r3, r3, #3
     83c:	18eb      	adds	r3, r5, r3
     83e:	5c58      	ldrb	r0, [r3, r1]
     840:	4c08      	ldr	r4, [pc, #32]	; (864 <CUB+0x8c>)
     842:	47a0      	blx	r4
		xCharPos = 0;
     844:	2200      	movs	r2, #0
     846:	4b04      	ldr	r3, [pc, #16]	; (858 <CUB+0x80>)
     848:	801a      	strh	r2, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     84a:	8833      	ldrh	r3, [r6, #0]
		drawChar(tempCharacter);
     84c:	5ce8      	ldrb	r0, [r5, r3]
     84e:	47a0      	blx	r4
     850:	e7e2      	b.n	818 <CUB+0x40>
     852:	46c0      	nop			; (mov r8, r8)
     854:	00000241 	.word	0x00000241
     858:	200002bc 	.word	0x200002bc
     85c:	200003c4 	.word	0x200003c4
     860:	200002be 	.word	0x200002be
     864:	00002c8d 	.word	0x00002c8d
     868:	00002d75 	.word	0x00002d75
     86c:	200002c1 	.word	0x200002c1
     870:	00000255 	.word	0x00000255

00000874 <CNL>:
void CNL() //Cursor Next Line
{
     874:	b570      	push	{r4, r5, r6, lr}
	unsigned char tempCharacter;
	uint8_t parameter = 0;
	
	if(isEmptyParam())
     876:	4b1d      	ldr	r3, [pc, #116]	; (8ec <CNL+0x78>)
     878:	4798      	blx	r3
	{
		parameter = 1;
     87a:	2401      	movs	r4, #1
	if(isEmptyParam())
     87c:	2800      	cmp	r0, #0
     87e:	d01c      	beq.n	8ba <CNL+0x46>
		{
			parameter = 1;
		}
	}
	
	xCharPos = 0;
     880:	2200      	movs	r2, #0
     882:	4b1b      	ldr	r3, [pc, #108]	; (8f0 <CNL+0x7c>)
     884:	801a      	strh	r2, [r3, #0]
	
	if((yCharPos + parameter) <= 23)
     886:	4b1b      	ldr	r3, [pc, #108]	; (8f4 <CNL+0x80>)
     888:	881b      	ldrh	r3, [r3, #0]
     88a:	18e2      	adds	r2, r4, r3
     88c:	2a17      	cmp	r2, #23
     88e:	dd1a      	ble.n	8c6 <CNL+0x52>
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
		drawChar(tempCharacter);
	}
	else
	{
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     890:	4c19      	ldr	r4, [pc, #100]	; (8f8 <CNL+0x84>)
     892:	5ce0      	ldrb	r0, [r4, r3]
     894:	4d19      	ldr	r5, [pc, #100]	; (8fc <CNL+0x88>)
     896:	47a8      	blx	r5
		yCharPos = 23;
     898:	2217      	movs	r2, #23
     89a:	4b16      	ldr	r3, [pc, #88]	; (8f4 <CNL+0x80>)
     89c:	801a      	strh	r2, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     89e:	4b14      	ldr	r3, [pc, #80]	; (8f0 <CNL+0x7c>)
     8a0:	881a      	ldrh	r2, [r3, #0]
     8a2:	0053      	lsls	r3, r2, #1
     8a4:	189b      	adds	r3, r3, r2
     8a6:	00db      	lsls	r3, r3, #3
     8a8:	18e3      	adds	r3, r4, r3
		drawChar(tempCharacter);
     8aa:	7dd8      	ldrb	r0, [r3, #23]
     8ac:	47a8      	blx	r5
	}

	blinkCursor();
     8ae:	4b14      	ldr	r3, [pc, #80]	; (900 <CNL+0x8c>)
     8b0:	4798      	blx	r3
	currentState = stateGround;	
     8b2:	2200      	movs	r2, #0
     8b4:	4b13      	ldr	r3, [pc, #76]	; (904 <CNL+0x90>)
     8b6:	701a      	strb	r2, [r3, #0]
}
     8b8:	bd70      	pop	{r4, r5, r6, pc}
		parameter = dequeueParam();
     8ba:	4b13      	ldr	r3, [pc, #76]	; (908 <CNL+0x94>)
     8bc:	4798      	blx	r3
     8be:	1e04      	subs	r4, r0, #0
		if(parameter == 0)
     8c0:	d1de      	bne.n	880 <CNL+0xc>
			parameter = 1;
     8c2:	3401      	adds	r4, #1
     8c4:	e7dc      	b.n	880 <CNL+0xc>
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     8c6:	4d0c      	ldr	r5, [pc, #48]	; (8f8 <CNL+0x84>)
     8c8:	5ce8      	ldrb	r0, [r5, r3]
     8ca:	4e0c      	ldr	r6, [pc, #48]	; (8fc <CNL+0x88>)
     8cc:	47b0      	blx	r6
		yCharPos = yCharPos + parameter;
     8ce:	4b09      	ldr	r3, [pc, #36]	; (8f4 <CNL+0x80>)
     8d0:	8818      	ldrh	r0, [r3, #0]
     8d2:	1904      	adds	r4, r0, r4
     8d4:	b2a4      	uxth	r4, r4
     8d6:	801c      	strh	r4, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     8d8:	4b05      	ldr	r3, [pc, #20]	; (8f0 <CNL+0x7c>)
     8da:	881a      	ldrh	r2, [r3, #0]
     8dc:	0053      	lsls	r3, r2, #1
     8de:	189b      	adds	r3, r3, r2
     8e0:	00db      	lsls	r3, r3, #3
     8e2:	18eb      	adds	r3, r5, r3
		drawChar(tempCharacter);
     8e4:	5d18      	ldrb	r0, [r3, r4]
     8e6:	47b0      	blx	r6
     8e8:	e7e1      	b.n	8ae <CNL+0x3a>
     8ea:	46c0      	nop			; (mov r8, r8)
     8ec:	00000241 	.word	0x00000241
     8f0:	200002bc 	.word	0x200002bc
     8f4:	200002be 	.word	0x200002be
     8f8:	200003c4 	.word	0x200003c4
     8fc:	00002c8d 	.word	0x00002c8d
     900:	00002d75 	.word	0x00002d75
     904:	200002c1 	.word	0x200002c1
     908:	00000255 	.word	0x00000255

0000090c <CPL>:
void CPL() //Cursor Preceding Line
{
     90c:	b570      	push	{r4, r5, r6, lr}
	unsigned char tempCharacter;
	uint8_t parameter = 0;
	
	if(isEmptyParam())
     90e:	4b1c      	ldr	r3, [pc, #112]	; (980 <CPL+0x74>)
     910:	4798      	blx	r3
	{
		parameter = 1;
     912:	2401      	movs	r4, #1
	if(isEmptyParam())
     914:	2800      	cmp	r0, #0
     916:	d01b      	beq.n	950 <CPL+0x44>
		{
			parameter = 1;
		}
	}
	
	xCharPos = 0;
     918:	2200      	movs	r2, #0
     91a:	4b1a      	ldr	r3, [pc, #104]	; (984 <CPL+0x78>)
     91c:	801a      	strh	r2, [r3, #0]
	
	if((yCharPos - parameter) >= 0 && (yCharPos - parameter) <= 24)
     91e:	4b1a      	ldr	r3, [pc, #104]	; (988 <CPL+0x7c>)
     920:	881b      	ldrh	r3, [r3, #0]
     922:	1b1a      	subs	r2, r3, r4
     924:	2a18      	cmp	r2, #24
     926:	d919      	bls.n	95c <CPL+0x50>
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
		drawChar(tempCharacter);
	}
	else
	{
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     928:	4d18      	ldr	r5, [pc, #96]	; (98c <CPL+0x80>)
     92a:	5ce8      	ldrb	r0, [r5, r3]
     92c:	4c18      	ldr	r4, [pc, #96]	; (990 <CPL+0x84>)
     92e:	47a0      	blx	r4
		yCharPos = 0;
     930:	2200      	movs	r2, #0
     932:	4b15      	ldr	r3, [pc, #84]	; (988 <CPL+0x7c>)
     934:	801a      	strh	r2, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     936:	4b13      	ldr	r3, [pc, #76]	; (984 <CPL+0x78>)
     938:	881a      	ldrh	r2, [r3, #0]
     93a:	0053      	lsls	r3, r2, #1
     93c:	189b      	adds	r3, r3, r2
     93e:	00db      	lsls	r3, r3, #3
		drawChar(tempCharacter);
     940:	5d58      	ldrb	r0, [r3, r5]
     942:	47a0      	blx	r4
	}
	
	blinkCursor();
     944:	4b13      	ldr	r3, [pc, #76]	; (994 <CPL+0x88>)
     946:	4798      	blx	r3
	currentState = stateGround;
     948:	2200      	movs	r2, #0
     94a:	4b13      	ldr	r3, [pc, #76]	; (998 <CPL+0x8c>)
     94c:	701a      	strb	r2, [r3, #0]
	
}
     94e:	bd70      	pop	{r4, r5, r6, pc}
		parameter = dequeueParam();
     950:	4b12      	ldr	r3, [pc, #72]	; (99c <CPL+0x90>)
     952:	4798      	blx	r3
     954:	1e04      	subs	r4, r0, #0
		if(parameter == 0)
     956:	d1df      	bne.n	918 <CPL+0xc>
			parameter = 1;
     958:	3401      	adds	r4, #1
     95a:	e7dd      	b.n	918 <CPL+0xc>
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     95c:	4d0b      	ldr	r5, [pc, #44]	; (98c <CPL+0x80>)
     95e:	5ce8      	ldrb	r0, [r5, r3]
     960:	4e0b      	ldr	r6, [pc, #44]	; (990 <CPL+0x84>)
     962:	47b0      	blx	r6
		yCharPos = yCharPos - parameter;
     964:	4b08      	ldr	r3, [pc, #32]	; (988 <CPL+0x7c>)
     966:	8818      	ldrh	r0, [r3, #0]
     968:	1b04      	subs	r4, r0, r4
     96a:	b2a4      	uxth	r4, r4
     96c:	801c      	strh	r4, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     96e:	4b05      	ldr	r3, [pc, #20]	; (984 <CPL+0x78>)
     970:	881a      	ldrh	r2, [r3, #0]
     972:	0053      	lsls	r3, r2, #1
     974:	189b      	adds	r3, r3, r2
     976:	00db      	lsls	r3, r3, #3
     978:	18eb      	adds	r3, r5, r3
		drawChar(tempCharacter);
     97a:	5d18      	ldrb	r0, [r3, r4]
     97c:	47b0      	blx	r6
     97e:	e7e1      	b.n	944 <CPL+0x38>
     980:	00000241 	.word	0x00000241
     984:	200002bc 	.word	0x200002bc
     988:	200002be 	.word	0x200002be
     98c:	200003c4 	.word	0x200003c4
     990:	00002c8d 	.word	0x00002c8d
     994:	00002d75 	.word	0x00002d75
     998:	200002c1 	.word	0x200002c1
     99c:	00000255 	.word	0x00000255

000009a0 <CHA>:
void CHA() //Cursor Horizontal Absolute
{
     9a0:	b5f0      	push	{r4, r5, r6, r7, lr}
     9a2:	46c6      	mov	lr, r8
     9a4:	b500      	push	{lr}
	unsigned char tempCharacter;
	uint8_t parameter = 0;
	
	if(isEmptyParam())
     9a6:	4b17      	ldr	r3, [pc, #92]	; (a04 <CHA+0x64>)
     9a8:	4798      	blx	r3
	{
		parameter = 1;
     9aa:	2501      	movs	r5, #1
	if(isEmptyParam())
     9ac:	2800      	cmp	r0, #0
     9ae:	d01c      	beq.n	9ea <CHA+0x4a>
		{
			parameter = 79;
		}
	}
	
	drawChar(consoleDisplay[xCharPos][yCharPos]);
     9b0:	4c15      	ldr	r4, [pc, #84]	; (a08 <CHA+0x68>)
     9b2:	4f16      	ldr	r7, [pc, #88]	; (a0c <CHA+0x6c>)
     9b4:	883a      	ldrh	r2, [r7, #0]
     9b6:	4e16      	ldr	r6, [pc, #88]	; (a10 <CHA+0x70>)
     9b8:	8831      	ldrh	r1, [r6, #0]
     9ba:	0053      	lsls	r3, r2, #1
     9bc:	189b      	adds	r3, r3, r2
     9be:	00db      	lsls	r3, r3, #3
     9c0:	18e3      	adds	r3, r4, r3
     9c2:	5c58      	ldrb	r0, [r3, r1]
     9c4:	4b13      	ldr	r3, [pc, #76]	; (a14 <CHA+0x74>)
     9c6:	4698      	mov	r8, r3
     9c8:	4798      	blx	r3
	xCharPos = parameter;
     9ca:	803d      	strh	r5, [r7, #0]
	tempCharacter = consoleDisplay[xCharPos][yCharPos];
     9cc:	8832      	ldrh	r2, [r6, #0]
     9ce:	006b      	lsls	r3, r5, #1
     9d0:	195b      	adds	r3, r3, r5
     9d2:	00db      	lsls	r3, r3, #3
     9d4:	18e3      	adds	r3, r4, r3
	drawChar(tempCharacter);
     9d6:	5c98      	ldrb	r0, [r3, r2]
     9d8:	47c0      	blx	r8
	
	blinkCursor();
     9da:	4b0f      	ldr	r3, [pc, #60]	; (a18 <CHA+0x78>)
     9dc:	4798      	blx	r3
	currentState = stateGround;
     9de:	2200      	movs	r2, #0
     9e0:	4b0e      	ldr	r3, [pc, #56]	; (a1c <CHA+0x7c>)
     9e2:	701a      	strb	r2, [r3, #0]
}
     9e4:	bc04      	pop	{r2}
     9e6:	4690      	mov	r8, r2
     9e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		parameter = dequeueParam();
     9ea:	4b0d      	ldr	r3, [pc, #52]	; (a20 <CHA+0x80>)
     9ec:	4798      	blx	r3
     9ee:	1e02      	subs	r2, r0, #0
		if(parameter > 0)
     9f0:	d001      	beq.n	9f6 <CHA+0x56>
			parameter--;  //need to decrement, because display is indexed at 0,0.
     9f2:	3801      	subs	r0, #1
     9f4:	b2c2      	uxtb	r2, r0
     9f6:	1c13      	adds	r3, r2, #0
     9f8:	2a4f      	cmp	r2, #79	; 0x4f
     9fa:	d900      	bls.n	9fe <CHA+0x5e>
     9fc:	234f      	movs	r3, #79	; 0x4f
     9fe:	b2dd      	uxtb	r5, r3
     a00:	e7d6      	b.n	9b0 <CHA+0x10>
     a02:	46c0      	nop			; (mov r8, r8)
     a04:	00000241 	.word	0x00000241
     a08:	200003c4 	.word	0x200003c4
     a0c:	200002bc 	.word	0x200002bc
     a10:	200002be 	.word	0x200002be
     a14:	00002c8d 	.word	0x00002c8d
     a18:	00002d75 	.word	0x00002d75
     a1c:	200002c1 	.word	0x200002c1
     a20:	00000255 	.word	0x00000255

00000a24 <CUP>:
void CUP() //Cursor Position
{
     a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     a26:	46ce      	mov	lr, r9
     a28:	4647      	mov	r7, r8
     a2a:	b580      	push	{r7, lr}
	unsigned char tempCharacter;
	uint8_t parameter = 0;
	uint8_t xTemp = 0;
	uint8_t yTemp = 0;
	
	if(isEmptyParam())
     a2c:	4b20      	ldr	r3, [pc, #128]	; (ab0 <CUP+0x8c>)
     a2e:	4798      	blx	r3
	{
		parameter = 0;
     a30:	2400      	movs	r4, #0
	if(isEmptyParam())
     a32:	2800      	cmp	r0, #0
     a34:	d024      	beq.n	a80 <CUP+0x5c>
		}
	}
	
	xTemp = parameter;

	if(isEmptyParam())
     a36:	4b1e      	ldr	r3, [pc, #120]	; (ab0 <CUP+0x8c>)
     a38:	4798      	blx	r3
	{
		parameter = 0;
     a3a:	2600      	movs	r6, #0
	if(isEmptyParam())
     a3c:	2800      	cmp	r0, #0
     a3e:	d02b      	beq.n	a98 <CUP+0x74>
		}
	}
	
	yTemp = parameter;
	
	drawChar(consoleDisplay[xCharPos][yCharPos]);
     a40:	4d1c      	ldr	r5, [pc, #112]	; (ab4 <CUP+0x90>)
     a42:	4b1d      	ldr	r3, [pc, #116]	; (ab8 <CUP+0x94>)
     a44:	4698      	mov	r8, r3
     a46:	881a      	ldrh	r2, [r3, #0]
     a48:	4f1c      	ldr	r7, [pc, #112]	; (abc <CUP+0x98>)
     a4a:	8839      	ldrh	r1, [r7, #0]
     a4c:	0053      	lsls	r3, r2, #1
     a4e:	189b      	adds	r3, r3, r2
     a50:	00db      	lsls	r3, r3, #3
     a52:	18eb      	adds	r3, r5, r3
     a54:	5c58      	ldrb	r0, [r3, r1]
     a56:	4b1a      	ldr	r3, [pc, #104]	; (ac0 <CUP+0x9c>)
     a58:	4699      	mov	r9, r3
     a5a:	4798      	blx	r3
	xCharPos = xTemp;
     a5c:	4643      	mov	r3, r8
     a5e:	801c      	strh	r4, [r3, #0]
	yCharPos = yTemp;
     a60:	803e      	strh	r6, [r7, #0]
	tempCharacter = consoleDisplay[xCharPos][yCharPos];
     a62:	0063      	lsls	r3, r4, #1
     a64:	191c      	adds	r4, r3, r4
     a66:	00e4      	lsls	r4, r4, #3
     a68:	192c      	adds	r4, r5, r4
	drawChar(tempCharacter);
     a6a:	5da0      	ldrb	r0, [r4, r6]
     a6c:	47c8      	blx	r9
	
	blinkCursor();
     a6e:	4b15      	ldr	r3, [pc, #84]	; (ac4 <CUP+0xa0>)
     a70:	4798      	blx	r3
	currentState = stateGround;
     a72:	2200      	movs	r2, #0
     a74:	4b14      	ldr	r3, [pc, #80]	; (ac8 <CUP+0xa4>)
     a76:	701a      	strb	r2, [r3, #0]
}
     a78:	bc0c      	pop	{r2, r3}
     a7a:	4690      	mov	r8, r2
     a7c:	4699      	mov	r9, r3
     a7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		parameter = dequeueParam();
     a80:	4b12      	ldr	r3, [pc, #72]	; (acc <CUP+0xa8>)
     a82:	4798      	blx	r3
     a84:	1e03      	subs	r3, r0, #0
		if(parameter > 0)
     a86:	d001      	beq.n	a8c <CUP+0x68>
			parameter--;  //need to decrement, because display is indexed at 0,0.
     a88:	3801      	subs	r0, #1
     a8a:	b2c3      	uxtb	r3, r0
     a8c:	1c1c      	adds	r4, r3, #0
     a8e:	2b4f      	cmp	r3, #79	; 0x4f
     a90:	d900      	bls.n	a94 <CUP+0x70>
     a92:	244f      	movs	r4, #79	; 0x4f
     a94:	b2e4      	uxtb	r4, r4
     a96:	e7ce      	b.n	a36 <CUP+0x12>
		parameter = dequeueParam();
     a98:	4b0c      	ldr	r3, [pc, #48]	; (acc <CUP+0xa8>)
     a9a:	4798      	blx	r3
     a9c:	1e03      	subs	r3, r0, #0
		if(parameter > 0)
     a9e:	d001      	beq.n	aa4 <CUP+0x80>
			parameter--;  //need to decrement, because display is indexed at 0,0.
     aa0:	3801      	subs	r0, #1
     aa2:	b2c3      	uxtb	r3, r0
     aa4:	1c1e      	adds	r6, r3, #0
     aa6:	2b17      	cmp	r3, #23
     aa8:	d900      	bls.n	aac <CUP+0x88>
     aaa:	2617      	movs	r6, #23
     aac:	b2f6      	uxtb	r6, r6
     aae:	e7c7      	b.n	a40 <CUP+0x1c>
     ab0:	00000241 	.word	0x00000241
     ab4:	200003c4 	.word	0x200003c4
     ab8:	200002bc 	.word	0x200002bc
     abc:	200002be 	.word	0x200002be
     ac0:	00002c8d 	.word	0x00002c8d
     ac4:	00002d75 	.word	0x00002d75
     ac8:	200002c1 	.word	0x200002c1
     acc:	00000255 	.word	0x00000255

00000ad0 <isValidCSIEscapeCode>:
bool isValidCSIEscapeCode(uint8_t character)
{
	
	for(uint8_t i = 0; i <= sizeof(csiEscCodes)/sizeof(csiEscCodes[0]) ; i++)
	{
		if(character == csiEscCodes[i])
     ad0:	2841      	cmp	r0, #65	; 0x41
     ad2:	d006      	beq.n	ae2 <isValidCSIEscapeCode+0x12>
     ad4:	4b04      	ldr	r3, [pc, #16]	; (ae8 <isValidCSIEscapeCode+0x18>)
     ad6:	3301      	adds	r3, #1
     ad8:	3301      	adds	r3, #1
     ada:	1e5a      	subs	r2, r3, #1
     adc:	7812      	ldrb	r2, [r2, #0]
     ade:	4282      	cmp	r2, r0
     ae0:	d1fa      	bne.n	ad8 <isValidCSIEscapeCode+0x8>
		{
			return true;	
		}
	}
	return false;
}
     ae2:	2001      	movs	r0, #1
     ae4:	4770      	bx	lr
     ae6:	46c0      	nop			; (mov r8, r8)
     ae8:	00005598 	.word	0x00005598

00000aec <CSIparamState>:
{
     aec:	b510      	push	{r4, lr}
     aee:	0004      	movs	r4, r0
	if(character >= 0x30 && character <= 0x39)		//character is a digit, put it in the buffer
     af0:	0003      	movs	r3, r0
     af2:	3b30      	subs	r3, #48	; 0x30
     af4:	2b09      	cmp	r3, #9
     af6:	d909      	bls.n	b0c <CSIparamState+0x20>
	else if(character == 0x3B)					//character is ';', now we take items out of 
     af8:	283b      	cmp	r0, #59	; 0x3b
     afa:	d00a      	beq.n	b12 <CSIparamState+0x26>
	else if(isValidCSIEscapeCode(character))		//character matches a supported escape code
     afc:	4b0b      	ldr	r3, [pc, #44]	; (b2c <CSIparamState+0x40>)
     afe:	4798      	blx	r3
     b00:	2800      	cmp	r0, #0
     b02:	d10a      	bne.n	b1a <CSIparamState+0x2e>
		currentState = stateCSIignore;
     b04:	2205      	movs	r2, #5
     b06:	4b0a      	ldr	r3, [pc, #40]	; (b30 <CSIparamState+0x44>)
     b08:	701a      	strb	r2, [r3, #0]
}
     b0a:	bd10      	pop	{r4, pc}
		enqueueParser(character);
     b0c:	4b09      	ldr	r3, [pc, #36]	; (b34 <CSIparamState+0x48>)
     b0e:	4798      	blx	r3
     b10:	e7fb      	b.n	b0a <CSIparamState+0x1e>
		enqueueParser(';');						//parambuffer 			
     b12:	203b      	movs	r0, #59	; 0x3b
     b14:	4b07      	ldr	r3, [pc, #28]	; (b34 <CSIparamState+0x48>)
     b16:	4798      	blx	r3
     b18:	e7f7      	b.n	b0a <CSIparamState+0x1e>
		queueTransmogrifier();											
     b1a:	4b07      	ldr	r3, [pc, #28]	; (b38 <CSIparamState+0x4c>)
     b1c:	4798      	blx	r3
		currentState = stateCSIentry;
     b1e:	2203      	movs	r2, #3
     b20:	4b03      	ldr	r3, [pc, #12]	; (b30 <CSIparamState+0x44>)
     b22:	701a      	strb	r2, [r3, #0]
		CSIentryState(character);
     b24:	0020      	movs	r0, r4
     b26:	4b05      	ldr	r3, [pc, #20]	; (b3c <CSIparamState+0x50>)
     b28:	4798      	blx	r3
     b2a:	e7ee      	b.n	b0a <CSIparamState+0x1e>
     b2c:	00000ad1 	.word	0x00000ad1
     b30:	200002c1 	.word	0x200002c1
     b34:	00000215 	.word	0x00000215
     b38:	00000309 	.word	0x00000309
     b3c:	00000b41 	.word	0x00000b41

00000b40 <CSIentryState>:
{
     b40:	b510      	push	{r4, lr}
	if(character == 0x41)		//ESC [ A	Cursor Up
     b42:	2841      	cmp	r0, #65	; 0x41
     b44:	d02d      	beq.n	ba2 <CSIentryState+0x62>
	else if(character == 0x42)	//ESC [ B	Cursor Down
     b46:	2842      	cmp	r0, #66	; 0x42
     b48:	d02e      	beq.n	ba8 <CSIentryState+0x68>
	else if(character == 0x43)	//ESC [ C	Cursor Forward
     b4a:	2843      	cmp	r0, #67	; 0x43
     b4c:	d02f      	beq.n	bae <CSIentryState+0x6e>
	else if(character == 0x44)	//ESC [ D	Cursor Backward
     b4e:	2844      	cmp	r0, #68	; 0x44
     b50:	d030      	beq.n	bb4 <CSIentryState+0x74>
	else if(character == 0x45)	//ESC [ E	Cursor Next Line
     b52:	2845      	cmp	r0, #69	; 0x45
     b54:	d031      	beq.n	bba <CSIentryState+0x7a>
	else if(character == 0x46)	//ESC [ F	Cursor Preceding Line
     b56:	2846      	cmp	r0, #70	; 0x46
     b58:	d032      	beq.n	bc0 <CSIentryState+0x80>
	else if(character == 0x47)	//ESC [ G	Cursor Horizontal Absolute
     b5a:	2847      	cmp	r0, #71	; 0x47
     b5c:	d033      	beq.n	bc6 <CSIentryState+0x86>
	else if(character == 0x48)	//ESC [ H	Cursor Position
     b5e:	2848      	cmp	r0, #72	; 0x48
     b60:	d034      	beq.n	bcc <CSIentryState+0x8c>
	else if(character == 0x49)	//ESC [ I	Cursor Horizontal Tab
     b62:	0003      	movs	r3, r0
     b64:	3b49      	subs	r3, #73	; 0x49
     b66:	2b02      	cmp	r3, #2
     b68:	d91d      	bls.n	ba6 <CSIentryState+0x66>
	else if(character == 0x6D)	//ESC [ m	Select Graphic Rendition
     b6a:	286d      	cmp	r0, #109	; 0x6d
     b6c:	d01b      	beq.n	ba6 <CSIentryState+0x66>
	else if(character == 0x50)	//ESC [ P	Delete Character
     b6e:	3b07      	subs	r3, #7
     b70:	2b01      	cmp	r3, #1
     b72:	d918      	bls.n	ba6 <CSIentryState+0x66>
	else if(character == 0x72)	//ESC [ r	Restore Cursor Position
     b74:	2872      	cmp	r0, #114	; 0x72
     b76:	d02c      	beq.n	bd2 <CSIentryState+0x92>
	else if(character == 0x73)	//ESC [ s	Save Cursor Position
     b78:	2873      	cmp	r0, #115	; 0x73
     b7a:	d02d      	beq.n	bd8 <CSIentryState+0x98>
	else if(character == 0x57)	//ESC [ W	Cursor Tabulation Control
     b7c:	0003      	movs	r3, r0
     b7e:	3b57      	subs	r3, #87	; 0x57
     b80:	2b01      	cmp	r3, #1
     b82:	d910      	bls.n	ba6 <CSIentryState+0x66>
	else if(character == 0x5A)	//ESC [ Z	Cursor Backwards Tab
     b84:	285a      	cmp	r0, #90	; 0x5a
     b86:	d00e      	beq.n	ba6 <CSIentryState+0x66>
	else if(character >= 0x30 && character <= 0x39) // if the character is a digit 0-9
     b88:	3327      	adds	r3, #39	; 0x27
     b8a:	2b09      	cmp	r3, #9
     b8c:	d927      	bls.n	bde <CSIentryState+0x9e>
	else if(character == 0x3B)	//Semicolon ; parameter deliminator
     b8e:	283b      	cmp	r0, #59	; 0x3b
     b90:	d02b      	beq.n	bea <CSIentryState+0xaa>
	else if(character == 0x1B)
     b92:	281b      	cmp	r0, #27
     b94:	d02f      	beq.n	bf6 <CSIentryState+0xb6>
	else if(character == 0x3A)
     b96:	283a      	cmp	r0, #58	; 0x3a
     b98:	d031      	beq.n	bfe <CSIentryState+0xbe>
		currentState = stateCSIignore;
     b9a:	2205      	movs	r2, #5
     b9c:	4b1a      	ldr	r3, [pc, #104]	; (c08 <CSIentryState+0xc8>)
     b9e:	701a      	strb	r2, [r3, #0]
}
     ba0:	e001      	b.n	ba6 <CSIentryState+0x66>
		CUU();
     ba2:	4b1a      	ldr	r3, [pc, #104]	; (c0c <CSIentryState+0xcc>)
     ba4:	4798      	blx	r3
}
     ba6:	bd10      	pop	{r4, pc}
		CUD();
     ba8:	4b19      	ldr	r3, [pc, #100]	; (c10 <CSIentryState+0xd0>)
     baa:	4798      	blx	r3
     bac:	e7fb      	b.n	ba6 <CSIentryState+0x66>
		CUF();
     bae:	4b19      	ldr	r3, [pc, #100]	; (c14 <CSIentryState+0xd4>)
     bb0:	4798      	blx	r3
     bb2:	e7f8      	b.n	ba6 <CSIentryState+0x66>
		CUB();
     bb4:	4b18      	ldr	r3, [pc, #96]	; (c18 <CSIentryState+0xd8>)
     bb6:	4798      	blx	r3
     bb8:	e7f5      	b.n	ba6 <CSIentryState+0x66>
		CNL();
     bba:	4b18      	ldr	r3, [pc, #96]	; (c1c <CSIentryState+0xdc>)
     bbc:	4798      	blx	r3
     bbe:	e7f2      	b.n	ba6 <CSIentryState+0x66>
		CPL();
     bc0:	4b17      	ldr	r3, [pc, #92]	; (c20 <CSIentryState+0xe0>)
     bc2:	4798      	blx	r3
     bc4:	e7ef      	b.n	ba6 <CSIentryState+0x66>
		CHA();
     bc6:	4b17      	ldr	r3, [pc, #92]	; (c24 <CSIentryState+0xe4>)
     bc8:	4798      	blx	r3
     bca:	e7ec      	b.n	ba6 <CSIentryState+0x66>
		CUP();
     bcc:	4b16      	ldr	r3, [pc, #88]	; (c28 <CSIentryState+0xe8>)
     bce:	4798      	blx	r3
     bd0:	e7e9      	b.n	ba6 <CSIentryState+0x66>
		RC();
     bd2:	4b16      	ldr	r3, [pc, #88]	; (c2c <CSIentryState+0xec>)
     bd4:	4798      	blx	r3
     bd6:	e7e6      	b.n	ba6 <CSIentryState+0x66>
		SC();
     bd8:	4b15      	ldr	r3, [pc, #84]	; (c30 <CSIentryState+0xf0>)
     bda:	4798      	blx	r3
     bdc:	e7e3      	b.n	ba6 <CSIentryState+0x66>
		currentState = stateCSIparam;
     bde:	2204      	movs	r2, #4
     be0:	4b09      	ldr	r3, [pc, #36]	; (c08 <CSIentryState+0xc8>)
     be2:	701a      	strb	r2, [r3, #0]
		CSIparamState(character);
     be4:	4b13      	ldr	r3, [pc, #76]	; (c34 <CSIentryState+0xf4>)
     be6:	4798      	blx	r3
     be8:	e7dd      	b.n	ba6 <CSIentryState+0x66>
		currentState = stateCSIparam;
     bea:	2204      	movs	r2, #4
     bec:	4b06      	ldr	r3, [pc, #24]	; (c08 <CSIentryState+0xc8>)
     bee:	701a      	strb	r2, [r3, #0]
		CSIparamState(character);
     bf0:	4b10      	ldr	r3, [pc, #64]	; (c34 <CSIentryState+0xf4>)
     bf2:	4798      	blx	r3
     bf4:	e7d7      	b.n	ba6 <CSIentryState+0x66>
		currentState = stateGround;
     bf6:	2200      	movs	r2, #0
     bf8:	4b03      	ldr	r3, [pc, #12]	; (c08 <CSIentryState+0xc8>)
     bfa:	701a      	strb	r2, [r3, #0]
     bfc:	e7d3      	b.n	ba6 <CSIentryState+0x66>
		currentState = stateCSIignore;
     bfe:	2205      	movs	r2, #5
     c00:	4b01      	ldr	r3, [pc, #4]	; (c08 <CSIentryState+0xc8>)
     c02:	701a      	strb	r2, [r3, #0]
     c04:	e7cf      	b.n	ba6 <CSIentryState+0x66>
     c06:	46c0      	nop			; (mov r8, r8)
     c08:	200002c1 	.word	0x200002c1
     c0c:	000005e9 	.word	0x000005e9
     c10:	0000068d 	.word	0x0000068d
     c14:	00000731 	.word	0x00000731
     c18:	000007d9 	.word	0x000007d9
     c1c:	00000875 	.word	0x00000875
     c20:	0000090d 	.word	0x0000090d
     c24:	000009a1 	.word	0x000009a1
     c28:	00000a25 	.word	0x00000a25
     c2c:	00000389 	.word	0x00000389
     c30:	0000035d 	.word	0x0000035d
     c34:	00000aed 	.word	0x00000aed

00000c38 <nextTab>:


int nextTab(int a) 
{
     c38:	b510      	push	{r4, lr}
     c3a:	b0d0      	sub	sp, #320	; 0x140
     c3c:	0004      	movs	r4, r0
	int tabArray[] =
     c3e:	22a0      	movs	r2, #160	; 0xa0
     c40:	0052      	lsls	r2, r2, #1
     c42:	4904      	ldr	r1, [pc, #16]	; (c54 <nextTab+0x1c>)
     c44:	4668      	mov	r0, sp
     c46:	4b04      	ldr	r3, [pc, #16]	; (c58 <nextTab+0x20>)
     c48:	4798      	blx	r3
		 64,64,64,64,64,64,64,64,
		 72,72,72,72,72,72,72,72,
		 79,79,79,79,79,79,79,79
		};
	
	return tabArray[a];
     c4a:	00a4      	lsls	r4, r4, #2
     c4c:	466b      	mov	r3, sp
     c4e:	58e0      	ldr	r0, [r4, r3]
}
     c50:	b050      	add	sp, #320	; 0x140
     c52:	bd10      	pop	{r4, pc}
     c54:	00005458 	.word	0x00005458
     c58:	000042d5 	.word	0x000042d5

00000c5c <groundState>:
{
     c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
     c5e:	46c6      	mov	lr, r8
     c60:	b500      	push	{lr}
     c62:	0004      	movs	r4, r0
	clearQueues();									//parser and paramQueues cleared
     c64:	4bac      	ldr	r3, [pc, #688]	; (f18 <groundState+0x2bc>)
     c66:	4798      	blx	r3
	if(character == 0x00)							//NUL 0x00 DO NOTHING
     c68:	2c07      	cmp	r4, #7
     c6a:	d93d      	bls.n	ce8 <groundState+0x8c>
	else if(character == 0x08)						//BS 0x08 Backspace
     c6c:	2c08      	cmp	r4, #8
     c6e:	d037      	beq.n	ce0 <groundState+0x84>
	else if(character == 0x09)						//TAB 0x09 Horizontal Tab
     c70:	2c09      	cmp	r4, #9
     c72:	d055      	beq.n	d20 <groundState+0xc4>
	else if(character == 0x0A)						//LF 0x0A Line Feed
     c74:	2c0a      	cmp	r4, #10
     c76:	d100      	bne.n	c7a <groundState+0x1e>
     c78:	e074      	b.n	d64 <groundState+0x108>
	else if(character == 0x0B)						//VT 0x0B Vertical Tab
     c7a:	2c0b      	cmp	r4, #11
     c7c:	d100      	bne.n	c80 <groundState+0x24>
     c7e:	e0c8      	b.n	e12 <groundState+0x1b6>
	else if(character == 0x0C)						//FF 0x0C Form Feed
     c80:	2c0c      	cmp	r4, #12
     c82:	d031      	beq.n	ce8 <groundState+0x8c>
	else if(character == 0x0D)						//CR 0x0D Carriage Return
     c84:	2c0d      	cmp	r4, #13
     c86:	d100      	bne.n	c8a <groundState+0x2e>
     c88:	e11b      	b.n	ec2 <groundState+0x266>
	else if(character == 0x0E)						//SO 0x0E Shift Out
     c8a:	0023      	movs	r3, r4
     c8c:	3b0e      	subs	r3, #14
     c8e:	2b0c      	cmp	r3, #12
     c90:	d92a      	bls.n	ce8 <groundState+0x8c>
	else if(character == 0x1B)						//ESC 0x1B Escape
     c92:	2c1b      	cmp	r4, #27
     c94:	d100      	bne.n	c98 <groundState+0x3c>
     c96:	e13a      	b.n	f0e <groundState+0x2b2>
	else if(character == 0x1C)						//FS 0x1C File Separator
     c98:	0023      	movs	r3, r4
     c9a:	3b1c      	subs	r3, #28
     c9c:	2b03      	cmp	r3, #3
     c9e:	d923      	bls.n	ce8 <groundState+0x8c>
	else if(character == 0x7F)						//DEL 0x7F Delete
     ca0:	2c7f      	cmp	r4, #127	; 0x7f
     ca2:	d021      	beq.n	ce8 <groundState+0x8c>
		consoleDisplay[xCharPos][yCharPos] = character;
     ca4:	4e9d      	ldr	r6, [pc, #628]	; (f1c <groundState+0x2c0>)
     ca6:	4d9e      	ldr	r5, [pc, #632]	; (f20 <groundState+0x2c4>)
     ca8:	882b      	ldrh	r3, [r5, #0]
     caa:	4a9e      	ldr	r2, [pc, #632]	; (f24 <groundState+0x2c8>)
     cac:	4690      	mov	r8, r2
     cae:	8812      	ldrh	r2, [r2, #0]
     cb0:	2718      	movs	r7, #24
     cb2:	437b      	muls	r3, r7
     cb4:	18f3      	adds	r3, r6, r3
     cb6:	549c      	strb	r4, [r3, r2]
		drawChar(character);
     cb8:	0020      	movs	r0, r4
     cba:	4c9b      	ldr	r4, [pc, #620]	; (f28 <groundState+0x2cc>)
     cbc:	47a0      	blx	r4
		xCharPos++;
     cbe:	882b      	ldrh	r3, [r5, #0]
     cc0:	3301      	adds	r3, #1
     cc2:	b29b      	uxth	r3, r3
     cc4:	802b      	strh	r3, [r5, #0]
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     cc6:	4642      	mov	r2, r8
     cc8:	8812      	ldrh	r2, [r2, #0]
     cca:	437b      	muls	r3, r7
     ccc:	18f6      	adds	r6, r6, r3
     cce:	5cb0      	ldrb	r0, [r6, r2]
     cd0:	47a0      	blx	r4
		if(xCharPos > 79)		//END OF LINE
     cd2:	882b      	ldrh	r3, [r5, #0]
     cd4:	2b4f      	cmp	r3, #79	; 0x4f
     cd6:	d907      	bls.n	ce8 <groundState+0x8c>
			xCharPos--;
     cd8:	3b01      	subs	r3, #1
     cda:	4a91      	ldr	r2, [pc, #580]	; (f20 <groundState+0x2c4>)
     cdc:	8013      	strh	r3, [r2, #0]
}
     cde:	e003      	b.n	ce8 <groundState+0x8c>
		if(xCharPos > 0)
     ce0:	4b8f      	ldr	r3, [pc, #572]	; (f20 <groundState+0x2c4>)
     ce2:	881b      	ldrh	r3, [r3, #0]
     ce4:	2b00      	cmp	r3, #0
     ce6:	d102      	bne.n	cee <groundState+0x92>
}
     ce8:	bc04      	pop	{r2}
     cea:	4690      	mov	r8, r2
     cec:	bdf0      	pop	{r4, r5, r6, r7, pc}
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     cee:	4c8b      	ldr	r4, [pc, #556]	; (f1c <groundState+0x2c0>)
     cf0:	4d8c      	ldr	r5, [pc, #560]	; (f24 <groundState+0x2c8>)
     cf2:	8829      	ldrh	r1, [r5, #0]
     cf4:	005a      	lsls	r2, r3, #1
     cf6:	18d3      	adds	r3, r2, r3
     cf8:	00db      	lsls	r3, r3, #3
     cfa:	18e3      	adds	r3, r4, r3
     cfc:	5c58      	ldrb	r0, [r3, r1]
     cfe:	4e8a      	ldr	r6, [pc, #552]	; (f28 <groundState+0x2cc>)
     d00:	47b0      	blx	r6
			xCharPos--;
     d02:	4a87      	ldr	r2, [pc, #540]	; (f20 <groundState+0x2c4>)
     d04:	8813      	ldrh	r3, [r2, #0]
     d06:	3b01      	subs	r3, #1
     d08:	b29b      	uxth	r3, r3
     d0a:	8013      	strh	r3, [r2, #0]
			tempCharacter = consoleDisplay[xCharPos][yCharPos];
     d0c:	8829      	ldrh	r1, [r5, #0]
     d0e:	005a      	lsls	r2, r3, #1
     d10:	18d3      	adds	r3, r2, r3
     d12:	00db      	lsls	r3, r3, #3
     d14:	18e3      	adds	r3, r4, r3
			drawChar(tempCharacter);
     d16:	5c58      	ldrb	r0, [r3, r1]
     d18:	47b0      	blx	r6
			blinkCursor();
     d1a:	4b84      	ldr	r3, [pc, #528]	; (f2c <groundState+0x2d0>)
     d1c:	4798      	blx	r3
     d1e:	e7e3      	b.n	ce8 <groundState+0x8c>
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     d20:	4c7f      	ldr	r4, [pc, #508]	; (f20 <groundState+0x2c4>)
     d22:	8822      	ldrh	r2, [r4, #0]
     d24:	4b7f      	ldr	r3, [pc, #508]	; (f24 <groundState+0x2c8>)
     d26:	8819      	ldrh	r1, [r3, #0]
     d28:	0053      	lsls	r3, r2, #1
     d2a:	189b      	adds	r3, r3, r2
     d2c:	00db      	lsls	r3, r3, #3
     d2e:	4a7b      	ldr	r2, [pc, #492]	; (f1c <groundState+0x2c0>)
     d30:	18d3      	adds	r3, r2, r3
     d32:	5c58      	ldrb	r0, [r3, r1]
     d34:	4b7c      	ldr	r3, [pc, #496]	; (f28 <groundState+0x2cc>)
     d36:	4798      	blx	r3
		if(xCharPos <= 79)
     d38:	8820      	ldrh	r0, [r4, #0]
     d3a:	284f      	cmp	r0, #79	; 0x4f
     d3c:	d803      	bhi.n	d46 <groundState+0xea>
			xCharPos = nextTab(xCharPos);
     d3e:	4b7c      	ldr	r3, [pc, #496]	; (f30 <groundState+0x2d4>)
     d40:	4798      	blx	r3
     d42:	4b77      	ldr	r3, [pc, #476]	; (f20 <groundState+0x2c4>)
     d44:	8018      	strh	r0, [r3, #0]
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     d46:	4b76      	ldr	r3, [pc, #472]	; (f20 <groundState+0x2c4>)
     d48:	881a      	ldrh	r2, [r3, #0]
     d4a:	4b76      	ldr	r3, [pc, #472]	; (f24 <groundState+0x2c8>)
     d4c:	8819      	ldrh	r1, [r3, #0]
     d4e:	0053      	lsls	r3, r2, #1
     d50:	189b      	adds	r3, r3, r2
     d52:	00db      	lsls	r3, r3, #3
     d54:	4a71      	ldr	r2, [pc, #452]	; (f1c <groundState+0x2c0>)
     d56:	18d3      	adds	r3, r2, r3
     d58:	5c58      	ldrb	r0, [r3, r1]
     d5a:	4b73      	ldr	r3, [pc, #460]	; (f28 <groundState+0x2cc>)
     d5c:	4798      	blx	r3
		blinkCursor();
     d5e:	4b73      	ldr	r3, [pc, #460]	; (f2c <groundState+0x2d0>)
     d60:	4798      	blx	r3
     d62:	e7c1      	b.n	ce8 <groundState+0x8c>
		if(yCharPos == 23)
     d64:	4b6f      	ldr	r3, [pc, #444]	; (f24 <groundState+0x2c8>)
     d66:	881a      	ldrh	r2, [r3, #0]
     d68:	2a17      	cmp	r2, #23
     d6a:	d032      	beq.n	dd2 <groundState+0x176>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     d6c:	4c6b      	ldr	r4, [pc, #428]	; (f1c <groundState+0x2c0>)
     d6e:	4d6c      	ldr	r5, [pc, #432]	; (f20 <groundState+0x2c4>)
     d70:	8829      	ldrh	r1, [r5, #0]
     d72:	004b      	lsls	r3, r1, #1
     d74:	185b      	adds	r3, r3, r1
     d76:	00db      	lsls	r3, r3, #3
     d78:	18e3      	adds	r3, r4, r3
     d7a:	5c98      	ldrb	r0, [r3, r2]
     d7c:	4e6a      	ldr	r6, [pc, #424]	; (f28 <groundState+0x2cc>)
     d7e:	47b0      	blx	r6
			yCharPos++;
     d80:	4a68      	ldr	r2, [pc, #416]	; (f24 <groundState+0x2c8>)
     d82:	8813      	ldrh	r3, [r2, #0]
     d84:	3301      	adds	r3, #1
     d86:	b29b      	uxth	r3, r3
     d88:	8013      	strh	r3, [r2, #0]
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     d8a:	8829      	ldrh	r1, [r5, #0]
     d8c:	004a      	lsls	r2, r1, #1
     d8e:	1852      	adds	r2, r2, r1
     d90:	00d2      	lsls	r2, r2, #3
     d92:	18a4      	adds	r4, r4, r2
     d94:	5ce0      	ldrb	r0, [r4, r3]
     d96:	47b0      	blx	r6
			blinkCursor();
     d98:	4b64      	ldr	r3, [pc, #400]	; (f2c <groundState+0x2d0>)
     d9a:	4798      	blx	r3
		if(lineFeed)
     d9c:	4b65      	ldr	r3, [pc, #404]	; (f34 <groundState+0x2d8>)
     d9e:	781b      	ldrb	r3, [r3, #0]
     da0:	2b00      	cmp	r3, #0
     da2:	d0a1      	beq.n	ce8 <groundState+0x8c>
			if(yCharPos == 23)
     da4:	4b5f      	ldr	r3, [pc, #380]	; (f24 <groundState+0x2c8>)
     da6:	881a      	ldrh	r2, [r3, #0]
     da8:	2a17      	cmp	r2, #23
     daa:	d021      	beq.n	df0 <groundState+0x194>
				drawChar(consoleDisplay[xCharPos][yCharPos]);
     dac:	4d5b      	ldr	r5, [pc, #364]	; (f1c <groundState+0x2c0>)
     dae:	4e5c      	ldr	r6, [pc, #368]	; (f20 <groundState+0x2c4>)
     db0:	8831      	ldrh	r1, [r6, #0]
     db2:	004b      	lsls	r3, r1, #1
     db4:	185b      	adds	r3, r3, r1
     db6:	00db      	lsls	r3, r3, #3
     db8:	18eb      	adds	r3, r5, r3
     dba:	5c98      	ldrb	r0, [r3, r2]
     dbc:	4c5a      	ldr	r4, [pc, #360]	; (f28 <groundState+0x2cc>)
     dbe:	47a0      	blx	r4
				xCharPos = 0;
     dc0:	2300      	movs	r3, #0
     dc2:	8033      	strh	r3, [r6, #0]
				drawChar(consoleDisplay[xCharPos][yCharPos]);
     dc4:	4b57      	ldr	r3, [pc, #348]	; (f24 <groundState+0x2c8>)
     dc6:	881b      	ldrh	r3, [r3, #0]
     dc8:	5ce8      	ldrb	r0, [r5, r3]
     dca:	47a0      	blx	r4
				blinkCursor();
     dcc:	4b57      	ldr	r3, [pc, #348]	; (f2c <groundState+0x2d0>)
     dce:	4798      	blx	r3
     dd0:	e78a      	b.n	ce8 <groundState+0x8c>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     dd2:	4b53      	ldr	r3, [pc, #332]	; (f20 <groundState+0x2c4>)
     dd4:	881a      	ldrh	r2, [r3, #0]
     dd6:	0053      	lsls	r3, r2, #1
     dd8:	189b      	adds	r3, r3, r2
     dda:	00db      	lsls	r3, r3, #3
     ddc:	4a4f      	ldr	r2, [pc, #316]	; (f1c <groundState+0x2c0>)
     dde:	18d3      	adds	r3, r2, r3
     de0:	7dd8      	ldrb	r0, [r3, #23]
     de2:	4b51      	ldr	r3, [pc, #324]	; (f28 <groundState+0x2cc>)
     de4:	4798      	blx	r3
			newLine();
     de6:	4b54      	ldr	r3, [pc, #336]	; (f38 <groundState+0x2dc>)
     de8:	4798      	blx	r3
			blinkCursor();
     dea:	4b50      	ldr	r3, [pc, #320]	; (f2c <groundState+0x2d0>)
     dec:	4798      	blx	r3
     dee:	e7d5      	b.n	d9c <groundState+0x140>
				drawChar(consoleDisplay[xCharPos][yCharPos]);
     df0:	4d4b      	ldr	r5, [pc, #300]	; (f20 <groundState+0x2c4>)
     df2:	882a      	ldrh	r2, [r5, #0]
     df4:	0053      	lsls	r3, r2, #1
     df6:	189b      	adds	r3, r3, r2
     df8:	00db      	lsls	r3, r3, #3
     dfa:	4a48      	ldr	r2, [pc, #288]	; (f1c <groundState+0x2c0>)
     dfc:	18d3      	adds	r3, r2, r3
     dfe:	7dd8      	ldrb	r0, [r3, #23]
     e00:	4c49      	ldr	r4, [pc, #292]	; (f28 <groundState+0x2cc>)
     e02:	47a0      	blx	r4
				xCharPos = 0;
     e04:	2300      	movs	r3, #0
     e06:	802b      	strh	r3, [r5, #0]
				drawChar(0x00);
     e08:	2000      	movs	r0, #0
     e0a:	47a0      	blx	r4
				blinkCursor();
     e0c:	4b47      	ldr	r3, [pc, #284]	; (f2c <groundState+0x2d0>)
     e0e:	4798      	blx	r3
     e10:	e76a      	b.n	ce8 <groundState+0x8c>
		if(yCharPos == 23)
     e12:	4b44      	ldr	r3, [pc, #272]	; (f24 <groundState+0x2c8>)
     e14:	881a      	ldrh	r2, [r3, #0]
     e16:	2a17      	cmp	r2, #23
     e18:	d033      	beq.n	e82 <groundState+0x226>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     e1a:	4c40      	ldr	r4, [pc, #256]	; (f1c <groundState+0x2c0>)
     e1c:	4d40      	ldr	r5, [pc, #256]	; (f20 <groundState+0x2c4>)
     e1e:	8829      	ldrh	r1, [r5, #0]
     e20:	004b      	lsls	r3, r1, #1
     e22:	185b      	adds	r3, r3, r1
     e24:	00db      	lsls	r3, r3, #3
     e26:	18e3      	adds	r3, r4, r3
     e28:	5c98      	ldrb	r0, [r3, r2]
     e2a:	4e3f      	ldr	r6, [pc, #252]	; (f28 <groundState+0x2cc>)
     e2c:	47b0      	blx	r6
			yCharPos++;
     e2e:	4a3d      	ldr	r2, [pc, #244]	; (f24 <groundState+0x2c8>)
     e30:	8813      	ldrh	r3, [r2, #0]
     e32:	3301      	adds	r3, #1
     e34:	b29b      	uxth	r3, r3
     e36:	8013      	strh	r3, [r2, #0]
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     e38:	8829      	ldrh	r1, [r5, #0]
     e3a:	004a      	lsls	r2, r1, #1
     e3c:	1852      	adds	r2, r2, r1
     e3e:	00d2      	lsls	r2, r2, #3
     e40:	18a4      	adds	r4, r4, r2
     e42:	5ce0      	ldrb	r0, [r4, r3]
     e44:	47b0      	blx	r6
			blinkCursor();
     e46:	4b39      	ldr	r3, [pc, #228]	; (f2c <groundState+0x2d0>)
     e48:	4798      	blx	r3
		if(lineFeed)
     e4a:	4b3a      	ldr	r3, [pc, #232]	; (f34 <groundState+0x2d8>)
     e4c:	781b      	ldrb	r3, [r3, #0]
     e4e:	2b00      	cmp	r3, #0
     e50:	d100      	bne.n	e54 <groundState+0x1f8>
     e52:	e749      	b.n	ce8 <groundState+0x8c>
			if(yCharPos == 23)
     e54:	4b33      	ldr	r3, [pc, #204]	; (f24 <groundState+0x2c8>)
     e56:	881a      	ldrh	r2, [r3, #0]
     e58:	2a17      	cmp	r2, #23
     e5a:	d021      	beq.n	ea0 <groundState+0x244>
				drawChar(consoleDisplay[xCharPos][yCharPos]);
     e5c:	4d2f      	ldr	r5, [pc, #188]	; (f1c <groundState+0x2c0>)
     e5e:	4e30      	ldr	r6, [pc, #192]	; (f20 <groundState+0x2c4>)
     e60:	8831      	ldrh	r1, [r6, #0]
     e62:	004b      	lsls	r3, r1, #1
     e64:	185b      	adds	r3, r3, r1
     e66:	00db      	lsls	r3, r3, #3
     e68:	18eb      	adds	r3, r5, r3
     e6a:	5c98      	ldrb	r0, [r3, r2]
     e6c:	4c2e      	ldr	r4, [pc, #184]	; (f28 <groundState+0x2cc>)
     e6e:	47a0      	blx	r4
				xCharPos = 0;
     e70:	2300      	movs	r3, #0
     e72:	8033      	strh	r3, [r6, #0]
				drawChar(consoleDisplay[xCharPos][yCharPos]);
     e74:	4b2b      	ldr	r3, [pc, #172]	; (f24 <groundState+0x2c8>)
     e76:	881b      	ldrh	r3, [r3, #0]
     e78:	5ce8      	ldrb	r0, [r5, r3]
     e7a:	47a0      	blx	r4
				blinkCursor();
     e7c:	4b2b      	ldr	r3, [pc, #172]	; (f2c <groundState+0x2d0>)
     e7e:	4798      	blx	r3
     e80:	e732      	b.n	ce8 <groundState+0x8c>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     e82:	4b27      	ldr	r3, [pc, #156]	; (f20 <groundState+0x2c4>)
     e84:	881a      	ldrh	r2, [r3, #0]
     e86:	0053      	lsls	r3, r2, #1
     e88:	189b      	adds	r3, r3, r2
     e8a:	00db      	lsls	r3, r3, #3
     e8c:	4a23      	ldr	r2, [pc, #140]	; (f1c <groundState+0x2c0>)
     e8e:	18d3      	adds	r3, r2, r3
     e90:	7dd8      	ldrb	r0, [r3, #23]
     e92:	4b25      	ldr	r3, [pc, #148]	; (f28 <groundState+0x2cc>)
     e94:	4798      	blx	r3
			newLine();
     e96:	4b28      	ldr	r3, [pc, #160]	; (f38 <groundState+0x2dc>)
     e98:	4798      	blx	r3
			blinkCursor();
     e9a:	4b24      	ldr	r3, [pc, #144]	; (f2c <groundState+0x2d0>)
     e9c:	4798      	blx	r3
     e9e:	e7d4      	b.n	e4a <groundState+0x1ee>
				drawChar(consoleDisplay[xCharPos][yCharPos]);
     ea0:	4d1f      	ldr	r5, [pc, #124]	; (f20 <groundState+0x2c4>)
     ea2:	882a      	ldrh	r2, [r5, #0]
     ea4:	0053      	lsls	r3, r2, #1
     ea6:	189b      	adds	r3, r3, r2
     ea8:	00db      	lsls	r3, r3, #3
     eaa:	4a1c      	ldr	r2, [pc, #112]	; (f1c <groundState+0x2c0>)
     eac:	18d3      	adds	r3, r2, r3
     eae:	7dd8      	ldrb	r0, [r3, #23]
     eb0:	4c1d      	ldr	r4, [pc, #116]	; (f28 <groundState+0x2cc>)
     eb2:	47a0      	blx	r4
				xCharPos = 0;
     eb4:	2300      	movs	r3, #0
     eb6:	802b      	strh	r3, [r5, #0]
				drawChar(0x00);
     eb8:	2000      	movs	r0, #0
     eba:	47a0      	blx	r4
				blinkCursor();
     ebc:	4b1b      	ldr	r3, [pc, #108]	; (f2c <groundState+0x2d0>)
     ebe:	4798      	blx	r3
     ec0:	e712      	b.n	ce8 <groundState+0x8c>
		if(yCharPos == 23)
     ec2:	4b18      	ldr	r3, [pc, #96]	; (f24 <groundState+0x2c8>)
     ec4:	881a      	ldrh	r2, [r3, #0]
     ec6:	2a17      	cmp	r2, #23
     ec8:	d012      	beq.n	ef0 <groundState+0x294>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     eca:	4d14      	ldr	r5, [pc, #80]	; (f1c <groundState+0x2c0>)
     ecc:	4e14      	ldr	r6, [pc, #80]	; (f20 <groundState+0x2c4>)
     ece:	8831      	ldrh	r1, [r6, #0]
     ed0:	004b      	lsls	r3, r1, #1
     ed2:	185b      	adds	r3, r3, r1
     ed4:	00db      	lsls	r3, r3, #3
     ed6:	18eb      	adds	r3, r5, r3
     ed8:	5c98      	ldrb	r0, [r3, r2]
     eda:	4c13      	ldr	r4, [pc, #76]	; (f28 <groundState+0x2cc>)
     edc:	47a0      	blx	r4
			xCharPos = 0;
     ede:	2300      	movs	r3, #0
     ee0:	8033      	strh	r3, [r6, #0]
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     ee2:	4b10      	ldr	r3, [pc, #64]	; (f24 <groundState+0x2c8>)
     ee4:	881b      	ldrh	r3, [r3, #0]
     ee6:	5ce8      	ldrb	r0, [r5, r3]
     ee8:	47a0      	blx	r4
			blinkCursor();
     eea:	4b10      	ldr	r3, [pc, #64]	; (f2c <groundState+0x2d0>)
     eec:	4798      	blx	r3
     eee:	e6fb      	b.n	ce8 <groundState+0x8c>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     ef0:	4c0b      	ldr	r4, [pc, #44]	; (f20 <groundState+0x2c4>)
     ef2:	8822      	ldrh	r2, [r4, #0]
     ef4:	0053      	lsls	r3, r2, #1
     ef6:	189b      	adds	r3, r3, r2
     ef8:	00db      	lsls	r3, r3, #3
     efa:	4a08      	ldr	r2, [pc, #32]	; (f1c <groundState+0x2c0>)
     efc:	18d3      	adds	r3, r2, r3
     efe:	7dd8      	ldrb	r0, [r3, #23]
     f00:	4b09      	ldr	r3, [pc, #36]	; (f28 <groundState+0x2cc>)
     f02:	4798      	blx	r3
			xCharPos = 0;
     f04:	2300      	movs	r3, #0
     f06:	8023      	strh	r3, [r4, #0]
			blinkCursor();
     f08:	4b08      	ldr	r3, [pc, #32]	; (f2c <groundState+0x2d0>)
     f0a:	4798      	blx	r3
     f0c:	e6ec      	b.n	ce8 <groundState+0x8c>
		currentState = stateESC;
     f0e:	2201      	movs	r2, #1
     f10:	4b0a      	ldr	r3, [pc, #40]	; (f3c <groundState+0x2e0>)
     f12:	701a      	strb	r2, [r3, #0]
     f14:	e6e8      	b.n	ce8 <groundState+0x8c>
     f16:	46c0      	nop			; (mov r8, r8)
     f18:	000002b1 	.word	0x000002b1
     f1c:	200003c4 	.word	0x200003c4
     f20:	200002bc 	.word	0x200002bc
     f24:	200002be 	.word	0x200002be
     f28:	00002c8d 	.word	0x00002c8d
     f2c:	00002d75 	.word	0x00002d75
     f30:	00000c39 	.word	0x00000c39
     f34:	2000016c 	.word	0x2000016c
     f38:	00002ed1 	.word	0x00002ed1
     f3c:	200002c1 	.word	0x200002c1

00000f40 <parseChar>:
{
     f40:	b510      	push	{r4, lr}
	parserState state = currentState;
     f42:	4b0e      	ldr	r3, [pc, #56]	; (f7c <parseChar+0x3c>)
	switch(state)
     f44:	781a      	ldrb	r2, [r3, #0]
     f46:	2a05      	cmp	r2, #5
     f48:	d805      	bhi.n	f56 <parseChar+0x16>
     f4a:	0093      	lsls	r3, r2, #2
     f4c:	4a0c      	ldr	r2, [pc, #48]	; (f80 <parseChar+0x40>)
     f4e:	58d3      	ldr	r3, [r2, r3]
     f50:	469f      	mov	pc, r3
			groundState(character);
     f52:	4b0c      	ldr	r3, [pc, #48]	; (f84 <parseChar+0x44>)
     f54:	4798      	blx	r3
}
     f56:	bd10      	pop	{r4, pc}
			escState(character);
     f58:	4b0b      	ldr	r3, [pc, #44]	; (f88 <parseChar+0x48>)
     f5a:	4798      	blx	r3
		break;
     f5c:	e7fb      	b.n	f56 <parseChar+0x16>
	stateEnterBuffer = 0x00;
     f5e:	2300      	movs	r3, #0
     f60:	4a0a      	ldr	r2, [pc, #40]	; (f8c <parseChar+0x4c>)
     f62:	7013      	strb	r3, [r2, #0]
	currentState = stateGround;
     f64:	4a05      	ldr	r2, [pc, #20]	; (f7c <parseChar+0x3c>)
     f66:	7013      	strb	r3, [r2, #0]
     f68:	e7f5      	b.n	f56 <parseChar+0x16>
			CSIentryState(character);
     f6a:	4b09      	ldr	r3, [pc, #36]	; (f90 <parseChar+0x50>)
     f6c:	4798      	blx	r3
		break;
     f6e:	e7f2      	b.n	f56 <parseChar+0x16>
			CSIparamState(character);
     f70:	4b08      	ldr	r3, [pc, #32]	; (f94 <parseChar+0x54>)
     f72:	4798      	blx	r3
		break;
     f74:	e7ef      	b.n	f56 <parseChar+0x16>
			CSIignoreState(character);
     f76:	4b08      	ldr	r3, [pc, #32]	; (f98 <parseChar+0x58>)
     f78:	4798      	blx	r3
}
     f7a:	e7ec      	b.n	f56 <parseChar+0x16>
     f7c:	200002c1 	.word	0x200002c1
     f80:	00005440 	.word	0x00005440
     f84:	00000c5d 	.word	0x00000c5d
     f88:	00000565 	.word	0x00000565
     f8c:	20000346 	.word	0x20000346
     f90:	00000b41 	.word	0x00000b41
     f94:	00000aed 	.word	0x00000aed
     f98:	00000349 	.word	0x00000349

00000f9c <drawKare>:
//	graphic in the entire project. Please note this is the most
//	space efficient way to do this; a 40x31 bitmap is 930 bytes,
//	whereas	this is (104*2)+28+20, or 256 bytes.
/*********************************************************************/
void drawKare(int emotion)
{
     f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
     f9e:	b0c1      	sub	sp, #260	; 0x104
     fa0:	0007      	movs	r7, r0
	uint16_t body[104] = {10,10,20,20,20,0,380,10,380,10,390,20,0,
     fa2:	22d0      	movs	r2, #208	; 0xd0
     fa4:	492d      	ldr	r1, [pc, #180]	; (105c <drawKare+0xc0>)
     fa6:	a80c      	add	r0, sp, #48	; 0x30
     fa8:	4b2d      	ldr	r3, [pc, #180]	; (1060 <drawKare+0xc4>)
     faa:	4798      	blx	r3
		80,190,280,200,280,40,290,190,0,70,50,80,0,90,50,100,0,110,
		50,120,0,130,50,140,0,150,50,160,0,170,50,180,0,190,50,200,
		300,200,370,210,30,220,370,230,30,240,370,250,30,260,370,
		270,90,280,300,290};
	
	uint8_t happyTerm[28] = {180,80,190,130,170,130,190,140,140,
     fac:	a805      	add	r0, sp, #20
     fae:	4b2d      	ldr	r3, [pc, #180]	; (1064 <drawKare+0xc8>)
     fb0:	001a      	movs	r2, r3
     fb2:	3250      	adds	r2, #80	; 0x50
     fb4:	0001      	movs	r1, r0
     fb6:	ca31      	ldmia	r2!, {r0, r4, r5}
     fb8:	c131      	stmia	r1!, {r0, r4, r5}
     fba:	ca31      	ldmia	r2!, {r0, r4, r5}
     fbc:	c131      	stmia	r1!, {r0, r4, r5}
     fbe:	6812      	ldr	r2, [r2, #0]
     fc0:	600a      	str	r2, [r1, #0]
		60,150,100,210,60,220,100,130,150,140,160,140,160,220,170,
	220,150,230,160};
	
	uint8_t rPiBeret[20] = {120,60,240,80,110,70,120,90,150,
     fc2:	336c      	adds	r3, #108	; 0x6c
     fc4:	466a      	mov	r2, sp
     fc6:	cb13      	ldmia	r3!, {r0, r1, r4}
     fc8:	c213      	stmia	r2!, {r0, r1, r4}
     fca:	cb03      	ldmia	r3!, {r0, r1}
     fcc:	c203      	stmia	r2!, {r0, r1}
     fce:	ac0c      	add	r4, sp, #48	; 0x30
     fd0:	ae40      	add	r6, sp, #256	; 0x100

	
	
	for(int i = 0; i < 104; i = i+4)
	{
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
     fd2:	4d25      	ldr	r5, [pc, #148]	; (1068 <drawKare+0xcc>)
		((body[i+1]/iSv)+(offsetGraphicY)),
		((body[i+2]/iSv)+(offsetGraphicX)),
		((body[i+3]/iSv)+(offsetGraphicY)));
     fd4:	88e3      	ldrh	r3, [r4, #6]
     fd6:	105b      	asrs	r3, r3, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
     fd8:	3396      	adds	r3, #150	; 0x96
		((body[i+2]/iSv)+(offsetGraphicX)),
     fda:	88a2      	ldrh	r2, [r4, #4]
     fdc:	1052      	asrs	r2, r2, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
     fde:	322d      	adds	r2, #45	; 0x2d
     fe0:	32ff      	adds	r2, #255	; 0xff
		((body[i+1]/iSv)+(offsetGraphicY)),
     fe2:	8861      	ldrh	r1, [r4, #2]
     fe4:	1049      	asrs	r1, r1, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
     fe6:	3196      	adds	r1, #150	; 0x96
     fe8:	8820      	ldrh	r0, [r4, #0]
     fea:	1040      	asrs	r0, r0, #1
     fec:	302d      	adds	r0, #45	; 0x2d
     fee:	30ff      	adds	r0, #255	; 0xff
     ff0:	47a8      	blx	r5
     ff2:	3408      	adds	r4, #8
	for(int i = 0; i < 104; i = i+4)
     ff4:	42b4      	cmp	r4, r6
     ff6:	d1ed      	bne.n	fd4 <drawKare+0x38>
	}
	switch(emotion)
     ff8:	2f00      	cmp	r7, #0
     ffa:	d003      	beq.n	1004 <drawKare+0x68>
     ffc:	2f01      	cmp	r7, #1
     ffe:	d017      	beq.n	1030 <drawKare+0x94>
		break;
		case 2:
		//make a sad terminal thing go here
		break;
	}
}
    1000:	b041      	add	sp, #260	; 0x104
    1002:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1004:	ac05      	add	r4, sp, #20
    1006:	ae0c      	add	r6, sp, #48	; 0x30
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
    1008:	4d17      	ldr	r5, [pc, #92]	; (1068 <drawKare+0xcc>)
			((happyTerm[i+3]/iSv)+(offsetGraphicY)));
    100a:	78e3      	ldrb	r3, [r4, #3]
    100c:	105b      	asrs	r3, r3, #1
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
    100e:	3396      	adds	r3, #150	; 0x96
			((happyTerm[i+2]/iSv)+(offsetGraphicX)),
    1010:	78a2      	ldrb	r2, [r4, #2]
    1012:	1052      	asrs	r2, r2, #1
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
    1014:	322d      	adds	r2, #45	; 0x2d
    1016:	32ff      	adds	r2, #255	; 0xff
			((happyTerm[i+1]/iSv)+(offsetGraphicY)),
    1018:	7861      	ldrb	r1, [r4, #1]
    101a:	1049      	asrs	r1, r1, #1
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
    101c:	3196      	adds	r1, #150	; 0x96
    101e:	7820      	ldrb	r0, [r4, #0]
    1020:	1040      	asrs	r0, r0, #1
    1022:	302d      	adds	r0, #45	; 0x2d
    1024:	30ff      	adds	r0, #255	; 0xff
    1026:	47a8      	blx	r5
    1028:	3404      	adds	r4, #4
		for(int i = 0; i < 28; i = i+4)
    102a:	42a6      	cmp	r6, r4
    102c:	d1ed      	bne.n	100a <drawKare+0x6e>
    102e:	e7e7      	b.n	1000 <drawKare+0x64>
    1030:	466c      	mov	r4, sp
    1032:	ae05      	add	r6, sp, #20
			fillRect((
    1034:	4d0c      	ldr	r5, [pc, #48]	; (1068 <drawKare+0xcc>)
			((rPiBeret[i+3]/iSv)+(offsetGraphicY)));
    1036:	78e3      	ldrb	r3, [r4, #3]
    1038:	105b      	asrs	r3, r3, #1
			fillRect((
    103a:	3396      	adds	r3, #150	; 0x96
			((rPiBeret[i+2]/iSv)+(offsetGraphicX)),
    103c:	78a2      	ldrb	r2, [r4, #2]
    103e:	1052      	asrs	r2, r2, #1
			fillRect((
    1040:	322d      	adds	r2, #45	; 0x2d
    1042:	32ff      	adds	r2, #255	; 0xff
			((rPiBeret[i+1]/iSv)+(offsetGraphicY)),
    1044:	7861      	ldrb	r1, [r4, #1]
    1046:	1049      	asrs	r1, r1, #1
			fillRect((
    1048:	3196      	adds	r1, #150	; 0x96
			(rPiBeret[i]/iSv)+(offsetGraphicX)),
    104a:	7820      	ldrb	r0, [r4, #0]
    104c:	1040      	asrs	r0, r0, #1
			fillRect((
    104e:	302d      	adds	r0, #45	; 0x2d
    1050:	30ff      	adds	r0, #255	; 0xff
    1052:	47a8      	blx	r5
    1054:	3404      	adds	r4, #4
		for(int i = 0; i < 20; i = i+4)
    1056:	42b4      	cmp	r4, r6
    1058:	d1ed      	bne.n	1036 <drawKare+0x9a>
    105a:	e7d1      	b.n	1000 <drawKare+0x64>
    105c:	000055ac 	.word	0x000055ac
    1060:	000042d5 	.word	0x000042d5
    1064:	0000562c 	.word	0x0000562c
    1068:	00003729 	.word	0x00003729

0000106c <splashScreen>:

void splashScreen(void)
{
    106c:	b570      	push	{r4, r5, r6, lr}
	static const char *splashText[32];
	splashText[0]  = "Trans rights are human rights";//
    106e:	4c49      	ldr	r4, [pc, #292]	; (1194 <splashScreen+0x128>)
    1070:	4b49      	ldr	r3, [pc, #292]	; (1198 <splashScreen+0x12c>)
    1072:	6023      	str	r3, [r4, #0]
	splashText[1]  = "13^5 + 16^5 = 17^5";//
    1074:	4b49      	ldr	r3, [pc, #292]	; (119c <splashScreen+0x130>)
    1076:	6063      	str	r3, [r4, #4]
	splashText[2]  = "Reticulating Splines";//
    1078:	4b49      	ldr	r3, [pc, #292]	; (11a0 <splashScreen+0x134>)
    107a:	60a3      	str	r3, [r4, #8]
	splashText[3]  = "violence.works";//
    107c:	4b49      	ldr	r3, [pc, #292]	; (11a4 <splashScreen+0x138>)
    107e:	60e3      	str	r3, [r4, #12]
	splashText[4]  = "Si + PB";//
    1080:	4b49      	ldr	r3, [pc, #292]	; (11a8 <splashScreen+0x13c>)
    1082:	6123      	str	r3, [r4, #16]
	splashText[5]  = "Kill Billionaires (and Trillionaire)";//
    1084:	4b49      	ldr	r3, [pc, #292]	; (11ac <splashScreen+0x140>)
    1086:	6163      	str	r3, [r4, #20]
	splashText[6]  = "Interest in technology is not a personality";//
    1088:	4b49      	ldr	r3, [pc, #292]	; (11b0 <splashScreen+0x144>)
    108a:	61a3      	str	r3, [r4, #24]
	splashText[7]  = "10 PRINT CHR$(205.5+RND(1)); : GOTO 10";//
    108c:	4b49      	ldr	r3, [pc, #292]	; (11b4 <splashScreen+0x148>)
    108e:	61e3      	str	r3, [r4, #28]
	splashText[8]  = "No gods. No masters. No external libraries.";//
    1090:	4b49      	ldr	r3, [pc, #292]	; (11b8 <splashScreen+0x14c>)
    1092:	6223      	str	r3, [r4, #32]
	splashText[9]  = "Kill Nazis";//
    1094:	4b49      	ldr	r3, [pc, #292]	; (11bc <splashScreen+0x150>)
    1096:	6263      	str	r3, [r4, #36]	; 0x24
	splashText[10] = "Tiananmen Square 1989";//
    1098:	4b49      	ldr	r3, [pc, #292]	; (11c0 <splashScreen+0x154>)
    109a:	62a3      	str	r3, [r4, #40]	; 0x28
	splashText[11] = "America was founded on slavery";
    109c:	4b49      	ldr	r3, [pc, #292]	; (11c4 <splashScreen+0x158>)
    109e:	62e3      	str	r3, [r4, #44]	; 0x2c
	splashText[12] = "There is only capital and labor";//
    10a0:	4b49      	ldr	r3, [pc, #292]	; (11c8 <splashScreen+0x15c>)
    10a2:	6323      	str	r3, [r4, #48]	; 0x30
	splashText[13] = "Encourage SYMMETRIC class warfare";//
    10a4:	4b49      	ldr	r3, [pc, #292]	; (11cc <splashScreen+0x160>)
    10a6:	6363      	str	r3, [r4, #52]	; 0x34
	splashText[14] = "$CURRENT_MEME";//
    10a8:	4b49      	ldr	r3, [pc, #292]	; (11d0 <splashScreen+0x164>)
    10aa:	63a3      	str	r3, [r4, #56]	; 0x38
	splashText[15] = "A Nice TTY";//
    10ac:	4b49      	ldr	r3, [pc, #292]	; (11d4 <splashScreen+0x168>)
    10ae:	63e3      	str	r3, [r4, #60]	; 0x3c
	splashText[16] = "Unix epoch minus 0xFF days";//
    10b0:	4b49      	ldr	r3, [pc, #292]	; (11d8 <splashScreen+0x16c>)
    10b2:	6423      	str	r3, [r4, #64]	; 0x40
	splashText[17] = "i  = 0x5f3759df - ( i >> 1 );";//
    10b4:	4b49      	ldr	r3, [pc, #292]	; (11dc <splashScreen+0x170>)
    10b6:	6463      	str	r3, [r4, #68]	; 0x44
	splashText[18] = "Speak truth to power; I'm sure they'll listen this time.";//
    10b8:	4b49      	ldr	r3, [pc, #292]	; (11e0 <splashScreen+0x174>)
    10ba:	64a3      	str	r3, [r4, #72]	; 0x48
	splashText[19] = "Defcon's canceled (2020)";//
    10bc:	4b49      	ldr	r3, [pc, #292]	; (11e4 <splashScreen+0x178>)
    10be:	64e3      	str	r3, [r4, #76]	; 0x4c
	splashText[20] = "Ratsnest: Nothing To Do!";//
    10c0:	4b49      	ldr	r3, [pc, #292]	; (11e8 <splashScreen+0x17c>)
    10c2:	6523      	str	r3, [r4, #80]	; 0x50
	splashText[21] = "It has 69 keys.";//
    10c4:	4b49      	ldr	r3, [pc, #292]	; (11ec <splashScreen+0x180>)
    10c6:	6563      	str	r3, [r4, #84]	; 0x54
	splashText[22] = "Because VT-420 was already taken";//
    10c8:	4b49      	ldr	r3, [pc, #292]	; (11f0 <splashScreen+0x184>)
    10ca:	65a3      	str	r3, [r4, #88]	; 0x58
	splashText[23] = "Compression algorithm based on BBP (1997)";//
    10cc:	4b49      	ldr	r3, [pc, #292]	; (11f4 <splashScreen+0x188>)
    10ce:	65e3      	str	r3, [r4, #92]	; 0x5c
	splashText[24] = "Teach health insurance providers to code.";
    10d0:	4b49      	ldr	r3, [pc, #292]	; (11f8 <splashScreen+0x18c>)
    10d2:	6623      	str	r3, [r4, #96]	; 0x60
	splashText[25] = "Grand Central Hack The Planet";//
    10d4:	4b49      	ldr	r3, [pc, #292]	; (11fc <splashScreen+0x190>)
    10d6:	6663      	str	r3, [r4, #100]	; 0x64
	splashText[26] = "WiFi is not wireless Ethernet!";//
    10d8:	4b49      	ldr	r3, [pc, #292]	; (1200 <splashScreen+0x194>)
    10da:	66a3      	str	r3, [r4, #104]	; 0x68
	splashText[27] = "Dummy thicc client";//
    10dc:	4b49      	ldr	r3, [pc, #292]	; (1204 <splashScreen+0x198>)
    10de:	66e3      	str	r3, [r4, #108]	; 0x6c
	splashText[28] = "A Nice TTY. An OK Computer.";//
    10e0:	4b49      	ldr	r3, [pc, #292]	; (1208 <splashScreen+0x19c>)
    10e2:	6723      	str	r3, [r4, #112]	; 0x70
	splashText[29] = "USTeledildonics";//
    10e4:	4b49      	ldr	r3, [pc, #292]	; (120c <splashScreen+0x1a0>)
    10e6:	6763      	str	r3, [r4, #116]	; 0x74
	splashText[30] = "Solidarity is not a new framework";//
    10e8:	4b49      	ldr	r3, [pc, #292]	; (1210 <splashScreen+0x1a4>)
    10ea:	67a3      	str	r3, [r4, #120]	; 0x78
	splashText[31] = "Breadboarding Is Not A Crime";//
    10ec:	4b49      	ldr	r3, [pc, #292]	; (1214 <splashScreen+0x1a8>)
    10ee:	67e3      	str	r3, [r4, #124]	; 0x7c
	splashText[32] = "Off by one errors are common";
    10f0:	4a49      	ldr	r2, [pc, #292]	; (1218 <splashScreen+0x1ac>)
    10f2:	2380      	movs	r3, #128	; 0x80
    10f4:	50e2      	str	r2, [r4, r3]
	
	const char *textPhrase = splashText[(((rand())%32))];
    10f6:	4b49      	ldr	r3, [pc, #292]	; (121c <splashScreen+0x1b0>)
    10f8:	4798      	blx	r3
    10fa:	17c3      	asrs	r3, r0, #31
    10fc:	0edb      	lsrs	r3, r3, #27
    10fe:	18c2      	adds	r2, r0, r3
    1100:	201f      	movs	r0, #31
    1102:	4010      	ands	r0, r2
    1104:	1ac0      	subs	r0, r0, r3
    1106:	0080      	lsls	r0, r0, #2
    1108:	5904      	ldr	r4, [r0, r4]
	
	clearScreen();
    110a:	4b45      	ldr	r3, [pc, #276]	; (1220 <splashScreen+0x1b4>)
    110c:	4798      	blx	r3
	setColorRGB(255,255,255);
    110e:	22ff      	movs	r2, #255	; 0xff
    1110:	21ff      	movs	r1, #255	; 0xff
    1112:	20ff      	movs	r0, #255	; 0xff
    1114:	4b43      	ldr	r3, [pc, #268]	; (1224 <splashScreen+0x1b8>)
    1116:	4798      	blx	r3
	
	REG_PORT_DIRTGL1 = PORT_PB31;
    1118:	2280      	movs	r2, #128	; 0x80
    111a:	0612      	lsls	r2, r2, #24
    111c:	4b42      	ldr	r3, [pc, #264]	; (1228 <splashScreen+0x1bc>)
    111e:	601a      	str	r2, [r3, #0]
	PORT->Group[1].PINCFG[31].bit.PULLEN = 1;
    1120:	4b42      	ldr	r3, [pc, #264]	; (122c <splashScreen+0x1c0>)
    1122:	22df      	movs	r2, #223	; 0xdf
    1124:	5c99      	ldrb	r1, [r3, r2]
    1126:	2004      	movs	r0, #4
    1128:	4301      	orrs	r1, r0
    112a:	5499      	strb	r1, [r3, r2]
	PORT->Group[1].PINCFG[31].bit.INEN = 1;
    112c:	5c99      	ldrb	r1, [r3, r2]
    112e:	2002      	movs	r0, #2
    1130:	4301      	orrs	r1, r0
    1132:	5499      	strb	r1, [r3, r2]
	if((PORT->Group[1].IN.reg & PORT_PB31) != 0)
    1134:	3a3f      	subs	r2, #63	; 0x3f
    1136:	589b      	ldr	r3, [r3, r2]
    1138:	2b00      	cmp	r3, #0
    113a:	db26      	blt.n	118a <splashScreen+0x11e>
		//This is the 'pi' graphic; put some codes
		//here to handle setting up the uarts.
		drawKare(1);
	}
	else
	drawKare(0); //The normal graphic
    113c:	2000      	movs	r0, #0
    113e:	4b3c      	ldr	r3, [pc, #240]	; (1230 <splashScreen+0x1c4>)
    1140:	4798      	blx	r3
	

	
	xCharPos = 40 - (strlen(textPhrase)/2);
    1142:	0020      	movs	r0, r4
    1144:	4b3b      	ldr	r3, [pc, #236]	; (1234 <splashScreen+0x1c8>)
    1146:	4798      	blx	r3
    1148:	4e3b      	ldr	r6, [pc, #236]	; (1238 <splashScreen+0x1cc>)
    114a:	0840      	lsrs	r0, r0, #1
    114c:	2328      	movs	r3, #40	; 0x28
    114e:	1a18      	subs	r0, r3, r0
    1150:	8030      	strh	r0, [r6, #0]
	yCharPos = 16;
    1152:	4d3a      	ldr	r5, [pc, #232]	; (123c <splashScreen+0x1d0>)
    1154:	2310      	movs	r3, #16
    1156:	802b      	strh	r3, [r5, #0]
	
	writeString(textPhrase);
    1158:	0020      	movs	r0, r4
    115a:	4b39      	ldr	r3, [pc, #228]	; (1240 <splashScreen+0x1d4>)
    115c:	4798      	blx	r3
	xCharPos = 40 - (strlen(versionLabel)/2);
	yCharPos = 18;
	
	writeString(versionLabel);
	*/
	delay_ms(2000);
    115e:	20fa      	movs	r0, #250	; 0xfa
    1160:	00c0      	lsls	r0, r0, #3
    1162:	4b38      	ldr	r3, [pc, #224]	; (1244 <splashScreen+0x1d8>)
    1164:	4798      	blx	r3
		
	clearScreen();
    1166:	4b2e      	ldr	r3, [pc, #184]	; (1220 <splashScreen+0x1b4>)
    1168:	4798      	blx	r3
	nullifyConsole();
    116a:	4b37      	ldr	r3, [pc, #220]	; (1248 <splashScreen+0x1dc>)
    116c:	4798      	blx	r3
	
	setColorRGB(0,255,0);
    116e:	2200      	movs	r2, #0
    1170:	21ff      	movs	r1, #255	; 0xff
    1172:	2000      	movs	r0, #0
    1174:	4b2b      	ldr	r3, [pc, #172]	; (1224 <splashScreen+0x1b8>)
    1176:	4798      	blx	r3
	setBackColorRGB(0,0,0);
    1178:	2200      	movs	r2, #0
    117a:	2100      	movs	r1, #0
    117c:	2000      	movs	r0, #0
    117e:	4b33      	ldr	r3, [pc, #204]	; (124c <splashScreen+0x1e0>)
    1180:	4798      	blx	r3
	
	//Setting the xChar and yChar position has to come
	//after splashScreen() and InitLCD();
	xCharPos = 0;
    1182:	2300      	movs	r3, #0
    1184:	8033      	strh	r3, [r6, #0]
	yCharPos = 0;
    1186:	802b      	strh	r3, [r5, #0]
	

    1188:	bd70      	pop	{r4, r5, r6, pc}
		drawKare(1);
    118a:	2001      	movs	r0, #1
    118c:	4b28      	ldr	r3, [pc, #160]	; (1230 <splashScreen+0x1c4>)
    118e:	4798      	blx	r3
    1190:	e7d7      	b.n	1142 <splashScreen+0xd6>
    1192:	46c0      	nop			; (mov r8, r8)
    1194:	200001fc 	.word	0x200001fc
    1198:	000056ac 	.word	0x000056ac
    119c:	000056cc 	.word	0x000056cc
    11a0:	000056e0 	.word	0x000056e0
    11a4:	000056f8 	.word	0x000056f8
    11a8:	00005708 	.word	0x00005708
    11ac:	00005710 	.word	0x00005710
    11b0:	00005738 	.word	0x00005738
    11b4:	00005764 	.word	0x00005764
    11b8:	0000578c 	.word	0x0000578c
    11bc:	000057b8 	.word	0x000057b8
    11c0:	000057c4 	.word	0x000057c4
    11c4:	000057dc 	.word	0x000057dc
    11c8:	000057fc 	.word	0x000057fc
    11cc:	0000581c 	.word	0x0000581c
    11d0:	00005840 	.word	0x00005840
    11d4:	00005850 	.word	0x00005850
    11d8:	0000585c 	.word	0x0000585c
    11dc:	00005878 	.word	0x00005878
    11e0:	00005898 	.word	0x00005898
    11e4:	000058d4 	.word	0x000058d4
    11e8:	000058f0 	.word	0x000058f0
    11ec:	0000590c 	.word	0x0000590c
    11f0:	0000591c 	.word	0x0000591c
    11f4:	00005940 	.word	0x00005940
    11f8:	0000596c 	.word	0x0000596c
    11fc:	00005998 	.word	0x00005998
    1200:	000059b8 	.word	0x000059b8
    1204:	000059d8 	.word	0x000059d8
    1208:	000059ec 	.word	0x000059ec
    120c:	00005a08 	.word	0x00005a08
    1210:	00005a18 	.word	0x00005a18
    1214:	00005a3c 	.word	0x00005a3c
    1218:	00005a5c 	.word	0x00005a5c
    121c:	00004501 	.word	0x00004501
    1220:	000037f9 	.word	0x000037f9
    1224:	000035ed 	.word	0x000035ed
    1228:	4100448c 	.word	0x4100448c
    122c:	41004400 	.word	0x41004400
    1230:	00000f9d 	.word	0x00000f9d
    1234:	00004709 	.word	0x00004709
    1238:	200002bc 	.word	0x200002bc
    123c:	200002be 	.word	0x200002be
    1240:	00002f8d 	.word	0x00002f8d
    1244:	000012e5 	.word	0x000012e5
    1248:	00002fd5 	.word	0x00002fd5
    124c:	00003615 	.word	0x00003615

00001250 <parseRXBuffer>:
char tempCharacter;

cbuf_handle_t ouroboros;	

void parseRXBuffer(void)
{
    1250:	b5f0      	push	{r4, r5, r6, r7, lr}
    1252:	b083      	sub	sp, #12
		while(!ring_empty(ouroboros))
    1254:	4e0b      	ldr	r6, [pc, #44]	; (1284 <parseRXBuffer+0x34>)
    1256:	4d0c      	ldr	r5, [pc, #48]	; (1288 <parseRXBuffer+0x38>)
		{
			uint8_t characterFromRingBuffer;
			ring_get(ouroboros, &characterFromRingBuffer);
    1258:	0037      	movs	r7, r6
		while(!ring_empty(ouroboros))
    125a:	e008      	b.n	126e <parseRXBuffer+0x1e>
			ring_get(ouroboros, &characterFromRingBuffer);
    125c:	466b      	mov	r3, sp
    125e:	1ddc      	adds	r4, r3, #7
    1260:	0021      	movs	r1, r4
    1262:	6838      	ldr	r0, [r7, #0]
    1264:	4b09      	ldr	r3, [pc, #36]	; (128c <parseRXBuffer+0x3c>)
    1266:	4798      	blx	r3
			parseChar(characterFromRingBuffer);
    1268:	7820      	ldrb	r0, [r4, #0]
    126a:	4b09      	ldr	r3, [pc, #36]	; (1290 <parseRXBuffer+0x40>)
    126c:	4798      	blx	r3
		while(!ring_empty(ouroboros))
    126e:	6830      	ldr	r0, [r6, #0]
    1270:	47a8      	blx	r5
    1272:	2800      	cmp	r0, #0
    1274:	d0f2      	beq.n	125c <parseRXBuffer+0xc>
		
		}
		ring_reset(ouroboros);
    1276:	4b03      	ldr	r3, [pc, #12]	; (1284 <parseRXBuffer+0x34>)
    1278:	6818      	ldr	r0, [r3, #0]
    127a:	4b06      	ldr	r3, [pc, #24]	; (1294 <parseRXBuffer+0x44>)
    127c:	4798      	blx	r3
}
    127e:	b003      	add	sp, #12
    1280:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1282:	46c0      	nop			; (mov r8, r8)
    1284:	20000360 	.word	0x20000360
    1288:	0000017d 	.word	0x0000017d
    128c:	00000195 	.word	0x00000195
    1290:	00000f41 	.word	0x00000f41
    1294:	00000135 	.word	0x00000135

00001298 <sendChar>:

void sendChar(char character)
{
    1298:	b510      	push	{r4, lr}
	printf("%c", character);
    129a:	4b01      	ldr	r3, [pc, #4]	; (12a0 <sendChar+0x8>)
    129c:	4798      	blx	r3
    129e:	bd10      	pop	{r4, pc}
    12a0:	0000447d 	.word	0x0000447d

000012a4 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    12a4:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    12a6:	2000      	movs	r0, #0
    12a8:	4b08      	ldr	r3, [pc, #32]	; (12cc <delay_init+0x28>)
    12aa:	4798      	blx	r3
    12ac:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    12ae:	4c08      	ldr	r4, [pc, #32]	; (12d0 <delay_init+0x2c>)
    12b0:	21fa      	movs	r1, #250	; 0xfa
    12b2:	0089      	lsls	r1, r1, #2
    12b4:	47a0      	blx	r4
    12b6:	4b07      	ldr	r3, [pc, #28]	; (12d4 <delay_init+0x30>)
    12b8:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    12ba:	4907      	ldr	r1, [pc, #28]	; (12d8 <delay_init+0x34>)
    12bc:	0028      	movs	r0, r5
    12be:	47a0      	blx	r4
    12c0:	4b06      	ldr	r3, [pc, #24]	; (12dc <delay_init+0x38>)
    12c2:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    12c4:	2205      	movs	r2, #5
    12c6:	4b06      	ldr	r3, [pc, #24]	; (12e0 <delay_init+0x3c>)
    12c8:	601a      	str	r2, [r3, #0]
}
    12ca:	bd70      	pop	{r4, r5, r6, pc}
    12cc:	00002865 	.word	0x00002865
    12d0:	00003f39 	.word	0x00003f39
    12d4:	20000014 	.word	0x20000014
    12d8:	000f4240 	.word	0x000f4240
    12dc:	20000018 	.word	0x20000018
    12e0:	e000e010 	.word	0xe000e010

000012e4 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    12e4:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    12e6:	4b08      	ldr	r3, [pc, #32]	; (1308 <delay_cycles_ms+0x24>)
    12e8:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    12ea:	4a08      	ldr	r2, [pc, #32]	; (130c <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    12ec:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    12ee:	2180      	movs	r1, #128	; 0x80
    12f0:	0249      	lsls	r1, r1, #9
	while (n--) {
    12f2:	3801      	subs	r0, #1
    12f4:	d307      	bcc.n	1306 <delay_cycles_ms+0x22>
	if (n > 0) {
    12f6:	2c00      	cmp	r4, #0
    12f8:	d0fb      	beq.n	12f2 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    12fa:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    12fc:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    12fe:	6813      	ldr	r3, [r2, #0]
    1300:	420b      	tst	r3, r1
    1302:	d0fc      	beq.n	12fe <delay_cycles_ms+0x1a>
    1304:	e7f5      	b.n	12f2 <delay_cycles_ms+0xe>
	}
}
    1306:	bd30      	pop	{r4, r5, pc}
    1308:	20000014 	.word	0x20000014
    130c:	e000e010 	.word	0xe000e010

00001310 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    1310:	4b0c      	ldr	r3, [pc, #48]	; (1344 <cpu_irq_enter_critical+0x34>)
    1312:	681b      	ldr	r3, [r3, #0]
    1314:	2b00      	cmp	r3, #0
    1316:	d106      	bne.n	1326 <cpu_irq_enter_critical+0x16>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1318:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    131c:	2b00      	cmp	r3, #0
    131e:	d007      	beq.n	1330 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    1320:	2200      	movs	r2, #0
    1322:	4b09      	ldr	r3, [pc, #36]	; (1348 <cpu_irq_enter_critical+0x38>)
    1324:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    1326:	4a07      	ldr	r2, [pc, #28]	; (1344 <cpu_irq_enter_critical+0x34>)
    1328:	6813      	ldr	r3, [r2, #0]
    132a:	3301      	adds	r3, #1
    132c:	6013      	str	r3, [r2, #0]
}
    132e:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    1330:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    1332:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    1336:	2200      	movs	r2, #0
    1338:	4b04      	ldr	r3, [pc, #16]	; (134c <cpu_irq_enter_critical+0x3c>)
    133a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    133c:	3201      	adds	r2, #1
    133e:	4b02      	ldr	r3, [pc, #8]	; (1348 <cpu_irq_enter_critical+0x38>)
    1340:	701a      	strb	r2, [r3, #0]
    1342:	e7f0      	b.n	1326 <cpu_irq_enter_critical+0x16>
    1344:	2000027c 	.word	0x2000027c
    1348:	20000280 	.word	0x20000280
    134c:	2000001c 	.word	0x2000001c

00001350 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    1350:	4b08      	ldr	r3, [pc, #32]	; (1374 <cpu_irq_leave_critical+0x24>)
    1352:	681a      	ldr	r2, [r3, #0]
    1354:	3a01      	subs	r2, #1
    1356:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1358:	681b      	ldr	r3, [r3, #0]
    135a:	2b00      	cmp	r3, #0
    135c:	d109      	bne.n	1372 <cpu_irq_leave_critical+0x22>
    135e:	4b06      	ldr	r3, [pc, #24]	; (1378 <cpu_irq_leave_critical+0x28>)
    1360:	781b      	ldrb	r3, [r3, #0]
    1362:	2b00      	cmp	r3, #0
    1364:	d005      	beq.n	1372 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    1366:	2201      	movs	r2, #1
    1368:	4b04      	ldr	r3, [pc, #16]	; (137c <cpu_irq_leave_critical+0x2c>)
    136a:	701a      	strb	r2, [r3, #0]
    136c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1370:	b662      	cpsie	i
	}
}
    1372:	4770      	bx	lr
    1374:	2000027c 	.word	0x2000027c
    1378:	20000280 	.word	0x20000280
    137c:	2000001c 	.word	0x2000001c

00001380 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    1380:	b5f0      	push	{r4, r5, r6, r7, lr}
    1382:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    1384:	ac01      	add	r4, sp, #4
    1386:	2501      	movs	r5, #1
    1388:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    138a:	2700      	movs	r7, #0
    138c:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    138e:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    1390:	0021      	movs	r1, r4
    1392:	203e      	movs	r0, #62	; 0x3e
    1394:	4e06      	ldr	r6, [pc, #24]	; (13b0 <system_board_init+0x30>)
    1396:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1398:	2280      	movs	r2, #128	; 0x80
    139a:	05d2      	lsls	r2, r2, #23
    139c:	4b05      	ldr	r3, [pc, #20]	; (13b4 <system_board_init+0x34>)
    139e:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    13a0:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    13a2:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    13a4:	0021      	movs	r1, r4
    13a6:	200f      	movs	r0, #15
    13a8:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
    13aa:	b003      	add	sp, #12
    13ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    13ae:	46c0      	nop			; (mov r8, r8)
    13b0:	000018e9 	.word	0x000018e9
    13b4:	41004480 	.word	0x41004480

000013b8 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
    13b8:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
    13ba:	2200      	movs	r2, #0
    13bc:	2300      	movs	r3, #0
    13be:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
    13c0:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
    13c2:	2100      	movs	r1, #0
    13c4:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
    13c6:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
    13c8:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
    13ca:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
    13cc:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
    13ce:	6082      	str	r2, [r0, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	//config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
    13d0:	24c0      	movs	r4, #192	; 0xc0
    13d2:	0164      	lsls	r4, r4, #5
    13d4:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
    13d6:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
    13d8:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
    13da:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
    13dc:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
    13de:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
    13e0:	242a      	movs	r4, #42	; 0x2a
    13e2:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
    13e4:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
    13e6:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
    13e8:	3c06      	subs	r4, #6
    13ea:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
    13ec:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
    13ee:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
    13f0:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
    13f2:	232b      	movs	r3, #43	; 0x2b
    13f4:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
    13f6:	3301      	adds	r3, #1
    13f8:	54c1      	strb	r1, [r0, r3]
}
    13fa:	bd10      	pop	{r4, pc}

000013fc <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
    13fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    13fe:	46d6      	mov	lr, sl
    1400:	464f      	mov	r7, r9
    1402:	4646      	mov	r6, r8
    1404:	b5c0      	push	{r6, r7, lr}
    1406:	b096      	sub	sp, #88	; 0x58
    1408:	0007      	movs	r7, r0
    140a:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    140c:	6001      	str	r1, [r0, #0]
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    140e:	4ac6      	ldr	r2, [pc, #792]	; (1728 <adc_init+0x32c>)
    1410:	6a10      	ldr	r0, [r2, #32]
    1412:	2380      	movs	r3, #128	; 0x80
    1414:	025b      	lsls	r3, r3, #9
    1416:	4303      	orrs	r3, r0
    1418:	6213      	str	r3, [r2, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    141a:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    141c:	2005      	movs	r0, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    141e:	07db      	lsls	r3, r3, #31
    1420:	d505      	bpl.n	142e <adc_init+0x32>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
    1422:	b016      	add	sp, #88	; 0x58
    1424:	bc1c      	pop	{r2, r3, r4}
    1426:	4690      	mov	r8, r2
    1428:	4699      	mov	r9, r3
    142a:	46a2      	mov	sl, r4
    142c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    142e:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
    1430:	3017      	adds	r0, #23
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    1432:	079b      	lsls	r3, r3, #30
    1434:	d4f5      	bmi.n	1422 <adc_init+0x26>
	module_inst->reference = config->reference;
    1436:	7873      	ldrb	r3, [r6, #1]
    1438:	713b      	strb	r3, [r7, #4]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
    143a:	2b00      	cmp	r3, #0
    143c:	d104      	bne.n	1448 <adc_init+0x4c>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
    143e:	4abb      	ldr	r2, [pc, #748]	; (172c <adc_init+0x330>)
    1440:	6c13      	ldr	r3, [r2, #64]	; 0x40
    1442:	2104      	movs	r1, #4
    1444:	430b      	orrs	r3, r1
    1446:	6413      	str	r3, [r2, #64]	; 0x40
		module_inst->callback[i] = NULL;
    1448:	2300      	movs	r3, #0
    144a:	60bb      	str	r3, [r7, #8]
    144c:	60fb      	str	r3, [r7, #12]
    144e:	613b      	str	r3, [r7, #16]
	module_inst->registered_callback_mask = 0;
    1450:	76bb      	strb	r3, [r7, #26]
	module_inst->enabled_callback_mask = 0;
    1452:	76fb      	strb	r3, [r7, #27]
	module_inst->remaining_conversions = 0;
    1454:	833b      	strh	r3, [r7, #24]
	module_inst->job_status = STATUS_OK;
    1456:	773b      	strb	r3, [r7, #28]
	_adc_instances[0] = module_inst;
    1458:	4bb5      	ldr	r3, [pc, #724]	; (1730 <adc_init+0x334>)
    145a:	601f      	str	r7, [r3, #0]
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
    145c:	232a      	movs	r3, #42	; 0x2a
    145e:	5cf3      	ldrb	r3, [r6, r3]
    1460:	2b00      	cmp	r3, #0
    1462:	d105      	bne.n	1470 <adc_init+0x74>
    1464:	7d33      	ldrb	r3, [r6, #20]
    1466:	2b00      	cmp	r3, #0
    1468:	d102      	bne.n	1470 <adc_init+0x74>
		module_inst->software_trigger = true;
    146a:	3301      	adds	r3, #1
    146c:	777b      	strb	r3, [r7, #29]
    146e:	e001      	b.n	1474 <adc_init+0x78>
		module_inst->software_trigger = false;
    1470:	2300      	movs	r3, #0
    1472:	777b      	strb	r3, [r7, #29]
	Adc *const adc_module = module_inst->hw;
    1474:	683b      	ldr	r3, [r7, #0]
    1476:	4698      	mov	r8, r3
	gclk_chan_conf.source_generator = config->clock_source;
    1478:	7833      	ldrb	r3, [r6, #0]
    147a:	466a      	mov	r2, sp
    147c:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
    147e:	4669      	mov	r1, sp
    1480:	201e      	movs	r0, #30
    1482:	4bac      	ldr	r3, [pc, #688]	; (1734 <adc_init+0x338>)
    1484:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
    1486:	201e      	movs	r0, #30
    1488:	4bab      	ldr	r3, [pc, #684]	; (1738 <adc_init+0x33c>)
    148a:	4798      	blx	r3
	if (config->pin_scan.inputs_to_scan != 0) {
    148c:	232c      	movs	r3, #44	; 0x2c
    148e:	5cf2      	ldrb	r2, [r6, r3]
    1490:	2a00      	cmp	r2, #0
    1492:	d054      	beq.n	153e <adc_init+0x142>
		uint8_t offset = config->pin_scan.offset_start_scan;
    1494:	3b01      	subs	r3, #1
    1496:	5cf5      	ldrb	r5, [r6, r3]
		uint8_t start_pin =
    1498:	7b33      	ldrb	r3, [r6, #12]
    149a:	18eb      	adds	r3, r5, r3
    149c:	b2db      	uxtb	r3, r3
		uint8_t end_pin =
    149e:	18d1      	adds	r1, r2, r3
		while (start_pin < end_pin) {
    14a0:	b2c9      	uxtb	r1, r1
    14a2:	428b      	cmp	r3, r1
    14a4:	d221      	bcs.n	14ea <adc_init+0xee>
    14a6:	1952      	adds	r2, r2, r5
    14a8:	b2d3      	uxtb	r3, r2
    14aa:	4699      	mov	r9, r3
	const uint32_t pinmapping[] = {
    14ac:	4ba3      	ldr	r3, [pc, #652]	; (173c <adc_init+0x340>)
    14ae:	469a      	mov	sl, r3
    14b0:	e003      	b.n	14ba <adc_init+0xbe>
			offset++;
    14b2:	3501      	adds	r5, #1
    14b4:	b2ed      	uxtb	r5, r5
		while (start_pin < end_pin) {
    14b6:	454d      	cmp	r5, r9
    14b8:	d017      	beq.n	14ea <adc_init+0xee>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
    14ba:	240f      	movs	r4, #15
    14bc:	402c      	ands	r4, r5
    14be:	7b33      	ldrb	r3, [r6, #12]
    14c0:	18e4      	adds	r4, r4, r3
	const uint32_t pinmapping[] = {
    14c2:	2250      	movs	r2, #80	; 0x50
    14c4:	499e      	ldr	r1, [pc, #632]	; (1740 <adc_init+0x344>)
    14c6:	a802      	add	r0, sp, #8
    14c8:	47d0      	blx	sl
	if (pin <= ADC_EXTCHANNEL_MSB) {
    14ca:	2c13      	cmp	r4, #19
    14cc:	d8f1      	bhi.n	14b2 <adc_init+0xb6>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    14ce:	00a4      	lsls	r4, r4, #2
    14d0:	ab02      	add	r3, sp, #8
    14d2:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    14d4:	a901      	add	r1, sp, #4
    14d6:	2300      	movs	r3, #0
    14d8:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    14da:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    14dc:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    14de:	3301      	adds	r3, #1
    14e0:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    14e2:	b2c0      	uxtb	r0, r0
    14e4:	4b97      	ldr	r3, [pc, #604]	; (1744 <adc_init+0x348>)
    14e6:	4798      	blx	r3
    14e8:	e7e3      	b.n	14b2 <adc_init+0xb6>
		_adc_configure_ain_pin(config->negative_input);
    14ea:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
    14ec:	2250      	movs	r2, #80	; 0x50
    14ee:	4994      	ldr	r1, [pc, #592]	; (1740 <adc_init+0x344>)
    14f0:	a802      	add	r0, sp, #8
    14f2:	4b92      	ldr	r3, [pc, #584]	; (173c <adc_init+0x340>)
    14f4:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
    14f6:	2c13      	cmp	r4, #19
    14f8:	d913      	bls.n	1522 <adc_init+0x126>
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
    14fa:	7d73      	ldrb	r3, [r6, #21]
    14fc:	009b      	lsls	r3, r3, #2
    14fe:	b2db      	uxtb	r3, r3
    1500:	4642      	mov	r2, r8
    1502:	7013      	strb	r3, [r2, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
    1504:	7db3      	ldrb	r3, [r6, #22]
    1506:	01db      	lsls	r3, r3, #7
    1508:	7872      	ldrb	r2, [r6, #1]
    150a:	4313      	orrs	r3, r2
    150c:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
    150e:	4642      	mov	r2, r8
    1510:	7053      	strb	r3, [r2, #1]
	switch (config->resolution) {
    1512:	7933      	ldrb	r3, [r6, #4]
    1514:	2b34      	cmp	r3, #52	; 0x34
    1516:	d900      	bls.n	151a <adc_init+0x11e>
    1518:	e17b      	b.n	1812 <adc_init+0x416>
    151a:	009b      	lsls	r3, r3, #2
    151c:	4a8a      	ldr	r2, [pc, #552]	; (1748 <adc_init+0x34c>)
    151e:	58d3      	ldr	r3, [r2, r3]
    1520:	469f      	mov	pc, r3
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    1522:	00a4      	lsls	r4, r4, #2
    1524:	ab02      	add	r3, sp, #8
    1526:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1528:	a901      	add	r1, sp, #4
    152a:	2300      	movs	r3, #0
    152c:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    152e:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    1530:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    1532:	3301      	adds	r3, #1
    1534:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    1536:	b2c0      	uxtb	r0, r0
    1538:	4b82      	ldr	r3, [pc, #520]	; (1744 <adc_init+0x348>)
    153a:	4798      	blx	r3
    153c:	e7dd      	b.n	14fa <adc_init+0xfe>
		_adc_configure_ain_pin(config->positive_input);
    153e:	7b34      	ldrb	r4, [r6, #12]
	const uint32_t pinmapping[] = {
    1540:	2250      	movs	r2, #80	; 0x50
    1542:	497f      	ldr	r1, [pc, #508]	; (1740 <adc_init+0x344>)
    1544:	a802      	add	r0, sp, #8
    1546:	4b7d      	ldr	r3, [pc, #500]	; (173c <adc_init+0x340>)
    1548:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
    154a:	2c13      	cmp	r4, #19
    154c:	d915      	bls.n	157a <adc_init+0x17e>
		_adc_configure_ain_pin(config->negative_input);
    154e:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
    1550:	2250      	movs	r2, #80	; 0x50
    1552:	497b      	ldr	r1, [pc, #492]	; (1740 <adc_init+0x344>)
    1554:	a802      	add	r0, sp, #8
    1556:	4b79      	ldr	r3, [pc, #484]	; (173c <adc_init+0x340>)
    1558:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
    155a:	2c13      	cmp	r4, #19
    155c:	d8cd      	bhi.n	14fa <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    155e:	00a4      	lsls	r4, r4, #2
    1560:	ab02      	add	r3, sp, #8
    1562:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1564:	a901      	add	r1, sp, #4
    1566:	2300      	movs	r3, #0
    1568:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    156a:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    156c:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    156e:	3301      	adds	r3, #1
    1570:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    1572:	b2c0      	uxtb	r0, r0
    1574:	4b73      	ldr	r3, [pc, #460]	; (1744 <adc_init+0x348>)
    1576:	4798      	blx	r3
    1578:	e7bf      	b.n	14fa <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    157a:	00a4      	lsls	r4, r4, #2
    157c:	ab02      	add	r3, sp, #8
    157e:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1580:	a901      	add	r1, sp, #4
    1582:	2300      	movs	r3, #0
    1584:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    1586:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    1588:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    158a:	3301      	adds	r3, #1
    158c:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    158e:	b2c0      	uxtb	r0, r0
    1590:	4b6c      	ldr	r3, [pc, #432]	; (1744 <adc_init+0x348>)
    1592:	4798      	blx	r3
    1594:	e7db      	b.n	154e <adc_init+0x152>
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
    1596:	2304      	movs	r3, #4
		resolution = ADC_RESOLUTION_16BIT;
    1598:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_4;
    159a:	2102      	movs	r1, #2
    159c:	e01a      	b.n	15d4 <adc_init+0x1d8>
		adjres = config->divide_result;
    159e:	7c71      	ldrb	r1, [r6, #17]
		accumulate = config->accumulate_samples;
    15a0:	7c33      	ldrb	r3, [r6, #16]
		resolution = ADC_RESOLUTION_16BIT;
    15a2:	2410      	movs	r4, #16
    15a4:	e016      	b.n	15d4 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
    15a6:	2306      	movs	r3, #6
		resolution = ADC_RESOLUTION_16BIT;
    15a8:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
    15aa:	2101      	movs	r1, #1
    15ac:	e012      	b.n	15d4 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
    15ae:	2308      	movs	r3, #8
		resolution = ADC_RESOLUTION_16BIT;
    15b0:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
    15b2:	2100      	movs	r1, #0
    15b4:	e00e      	b.n	15d4 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    15b6:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_8BIT;
    15b8:	2430      	movs	r4, #48	; 0x30
	uint8_t adjres = 0;
    15ba:	2100      	movs	r1, #0
    15bc:	e00a      	b.n	15d4 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    15be:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_10BIT;
    15c0:	2420      	movs	r4, #32
	uint8_t adjres = 0;
    15c2:	2100      	movs	r1, #0
    15c4:	e006      	b.n	15d4 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    15c6:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_12BIT;
    15c8:	2400      	movs	r4, #0
	uint8_t adjres = 0;
    15ca:	2100      	movs	r1, #0
    15cc:	e002      	b.n	15d4 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
    15ce:	2302      	movs	r3, #2
		resolution = ADC_RESOLUTION_16BIT;
    15d0:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
    15d2:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
    15d4:	0109      	lsls	r1, r1, #4
    15d6:	2270      	movs	r2, #112	; 0x70
    15d8:	400a      	ands	r2, r1
    15da:	4313      	orrs	r3, r2
    15dc:	4642      	mov	r2, r8
    15de:	7093      	strb	r3, [r2, #2]
	if (config->sample_length > 63) {
    15e0:	7df3      	ldrb	r3, [r6, #23]
		return STATUS_ERR_INVALID_ARG;
    15e2:	2017      	movs	r0, #23
	if (config->sample_length > 63) {
    15e4:	2b3f      	cmp	r3, #63	; 0x3f
    15e6:	d900      	bls.n	15ea <adc_init+0x1ee>
    15e8:	e71b      	b.n	1422 <adc_init+0x26>
		adc_module->SAMPCTRL.reg =
    15ea:	70d3      	strb	r3, [r2, #3]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    15ec:	683a      	ldr	r2, [r7, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    15ee:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    15f0:	b25b      	sxtb	r3, r3
    15f2:	2b00      	cmp	r3, #0
    15f4:	dbfb      	blt.n	15ee <adc_init+0x1f2>
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
    15f6:	7cf3      	ldrb	r3, [r6, #19]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    15f8:	8872      	ldrh	r2, [r6, #2]
    15fa:	4313      	orrs	r3, r2
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
    15fc:	2224      	movs	r2, #36	; 0x24
    15fe:	5cb2      	ldrb	r2, [r6, r2]
    1600:	00d2      	lsls	r2, r2, #3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    1602:	4313      	orrs	r3, r2
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
    1604:	7d32      	ldrb	r2, [r6, #20]
    1606:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    1608:	4313      	orrs	r3, r2
    160a:	7cb2      	ldrb	r2, [r6, #18]
    160c:	0052      	lsls	r2, r2, #1
    160e:	4313      	orrs	r3, r2
    1610:	4323      	orrs	r3, r4
	adc_module->CTRLB.reg =
    1612:	4642      	mov	r2, r8
    1614:	8093      	strh	r3, [r2, #4]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
    1616:	7e33      	ldrb	r3, [r6, #24]
    1618:	2b00      	cmp	r3, #0
    161a:	d020      	beq.n	165e <adc_init+0x262>
		switch (resolution) {
    161c:	2c10      	cmp	r4, #16
    161e:	d100      	bne.n	1622 <adc_init+0x226>
    1620:	e0d9      	b.n	17d6 <adc_init+0x3da>
    1622:	d800      	bhi.n	1626 <adc_init+0x22a>
    1624:	e098      	b.n	1758 <adc_init+0x35c>
    1626:	2c20      	cmp	r4, #32
    1628:	d100      	bne.n	162c <adc_init+0x230>
    162a:	e0b6      	b.n	179a <adc_init+0x39e>
    162c:	2c30      	cmp	r4, #48	; 0x30
    162e:	d116      	bne.n	165e <adc_init+0x262>
			if (config->differential_mode &&
    1630:	7cf2      	ldrb	r2, [r6, #19]
    1632:	2a00      	cmp	r2, #0
    1634:	d00a      	beq.n	164c <adc_init+0x250>
					(config->window.window_lower_value > 127 ||
    1636:	69f2      	ldr	r2, [r6, #28]
    1638:	3280      	adds	r2, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
    163a:	2017      	movs	r0, #23
			if (config->differential_mode &&
    163c:	2aff      	cmp	r2, #255	; 0xff
    163e:	d900      	bls.n	1642 <adc_init+0x246>
    1640:	e6ef      	b.n	1422 <adc_init+0x26>
					config->window.window_lower_value < -128 ||
    1642:	6a32      	ldr	r2, [r6, #32]
    1644:	3280      	adds	r2, #128	; 0x80
    1646:	2aff      	cmp	r2, #255	; 0xff
    1648:	d900      	bls.n	164c <adc_init+0x250>
    164a:	e6ea      	b.n	1422 <adc_init+0x26>
				return STATUS_ERR_INVALID_ARG;
    164c:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 255 ||
    164e:	69f2      	ldr	r2, [r6, #28]
    1650:	2aff      	cmp	r2, #255	; 0xff
    1652:	dd00      	ble.n	1656 <adc_init+0x25a>
    1654:	e6e5      	b.n	1422 <adc_init+0x26>
    1656:	6a32      	ldr	r2, [r6, #32]
    1658:	2aff      	cmp	r2, #255	; 0xff
    165a:	dd00      	ble.n	165e <adc_init+0x262>
    165c:	e6e1      	b.n	1422 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
    165e:	6839      	ldr	r1, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1660:	7e4a      	ldrb	r2, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    1662:	b252      	sxtb	r2, r2
    1664:	2a00      	cmp	r2, #0
    1666:	dbfb      	blt.n	1660 <adc_init+0x264>
	adc_module->WINCTRL.reg = config->window.window_mode;
    1668:	4642      	mov	r2, r8
    166a:	7213      	strb	r3, [r2, #8]
	Adc *const adc_module = module_inst->hw;
    166c:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    166e:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    1670:	b25b      	sxtb	r3, r3
    1672:	2b00      	cmp	r3, #0
    1674:	dbfb      	blt.n	166e <adc_init+0x272>
	adc_module->WINLT.reg =
    1676:	8bb3      	ldrh	r3, [r6, #28]
    1678:	4642      	mov	r2, r8
    167a:	8393      	strh	r3, [r2, #28]
	Adc *const adc_module = module_inst->hw;
    167c:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    167e:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    1680:	b25b      	sxtb	r3, r3
    1682:	2b00      	cmp	r3, #0
    1684:	dbfb      	blt.n	167e <adc_init+0x282>
	adc_module->WINUT.reg = config->window.window_upper_value <<
    1686:	8c33      	ldrh	r3, [r6, #32]
    1688:	4642      	mov	r2, r8
    168a:	8413      	strh	r3, [r2, #32]
	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
    168c:	232c      	movs	r3, #44	; 0x2c
    168e:	5cf3      	ldrb	r3, [r6, r3]
	if (inputs_to_scan > 0) {
    1690:	2b00      	cmp	r3, #0
    1692:	d005      	beq.n	16a0 <adc_init+0x2a4>
		inputs_to_scan--;
    1694:	3b01      	subs	r3, #1
    1696:	b2db      	uxtb	r3, r3
		return STATUS_ERR_INVALID_ARG;
    1698:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    169a:	2b0f      	cmp	r3, #15
    169c:	d900      	bls.n	16a0 <adc_init+0x2a4>
    169e:	e6c0      	b.n	1422 <adc_init+0x26>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
    16a0:	222b      	movs	r2, #43	; 0x2b
    16a2:	5cb1      	ldrb	r1, [r6, r2]
		return STATUS_ERR_INVALID_ARG;
    16a4:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    16a6:	290f      	cmp	r1, #15
    16a8:	d900      	bls.n	16ac <adc_init+0x2b0>
    16aa:	e6ba      	b.n	1422 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
    16ac:	6838      	ldr	r0, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    16ae:	7e42      	ldrb	r2, [r0, #25]
	while (adc_is_syncing(module_inst)) {
    16b0:	b252      	sxtb	r2, r2
    16b2:	2a00      	cmp	r2, #0
    16b4:	dbfb      	blt.n	16ae <adc_init+0x2b2>
			config->negative_input |
    16b6:	89f2      	ldrh	r2, [r6, #14]
			config->positive_input;
    16b8:	7b30      	ldrb	r0, [r6, #12]
			config->negative_input |
    16ba:	4302      	orrs	r2, r0
    16bc:	68b0      	ldr	r0, [r6, #8]
    16be:	4302      	orrs	r2, r0
			(config->pin_scan.offset_start_scan <<
    16c0:	0509      	lsls	r1, r1, #20
			config->negative_input |
    16c2:	430a      	orrs	r2, r1
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    16c4:	041b      	lsls	r3, r3, #16
			config->negative_input |
    16c6:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
    16c8:	4642      	mov	r2, r8
    16ca:	6113      	str	r3, [r2, #16]
	adc_module->EVCTRL.reg = config->event_action;
    16cc:	232a      	movs	r3, #42	; 0x2a
    16ce:	5cf3      	ldrb	r3, [r6, r3]
    16d0:	7513      	strb	r3, [r2, #20]
	adc_module->INTENCLR.reg =
    16d2:	230f      	movs	r3, #15
    16d4:	7593      	strb	r3, [r2, #22]
	if (config->correction.correction_enable){
    16d6:	3315      	adds	r3, #21
    16d8:	5cf3      	ldrb	r3, [r6, r3]
    16da:	2b00      	cmp	r3, #0
    16dc:	d012      	beq.n	1704 <adc_init+0x308>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    16de:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
    16e0:	4a1a      	ldr	r2, [pc, #104]	; (174c <adc_init+0x350>)
			return STATUS_ERR_INVALID_ARG;
    16e2:	2017      	movs	r0, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    16e4:	4293      	cmp	r3, r2
    16e6:	d900      	bls.n	16ea <adc_init+0x2ee>
    16e8:	e69b      	b.n	1422 <adc_init+0x26>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
    16ea:	4642      	mov	r2, r8
    16ec:	8493      	strh	r3, [r2, #36]	; 0x24
		if (config->correction.offset_correction > 2047 ||
    16ee:	8d32      	ldrh	r2, [r6, #40]	; 0x28
    16f0:	2380      	movs	r3, #128	; 0x80
    16f2:	011b      	lsls	r3, r3, #4
    16f4:	18d3      	adds	r3, r2, r3
    16f6:	4915      	ldr	r1, [pc, #84]	; (174c <adc_init+0x350>)
    16f8:	b29b      	uxth	r3, r3
    16fa:	428b      	cmp	r3, r1
    16fc:	d900      	bls.n	1700 <adc_init+0x304>
    16fe:	e690      	b.n	1422 <adc_init+0x26>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
    1700:	4643      	mov	r3, r8
    1702:	84da      	strh	r2, [r3, #38]	; 0x26
			ADC_CALIB_BIAS_CAL(
    1704:	4b12      	ldr	r3, [pc, #72]	; (1750 <adc_init+0x354>)
    1706:	681b      	ldr	r3, [r3, #0]
    1708:	015b      	lsls	r3, r3, #5
    170a:	22e0      	movs	r2, #224	; 0xe0
    170c:	00d2      	lsls	r2, r2, #3
    170e:	4013      	ands	r3, r2
			ADC_CALIB_LINEARITY_CAL(
    1710:	4a10      	ldr	r2, [pc, #64]	; (1754 <adc_init+0x358>)
    1712:	6851      	ldr	r1, [r2, #4]
    1714:	0149      	lsls	r1, r1, #5
    1716:	6812      	ldr	r2, [r2, #0]
    1718:	0ed2      	lsrs	r2, r2, #27
    171a:	430a      	orrs	r2, r1
    171c:	b2d2      	uxtb	r2, r2
			) |
    171e:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
    1720:	4642      	mov	r2, r8
    1722:	8513      	strh	r3, [r2, #40]	; 0x28
	return STATUS_OK;
    1724:	2000      	movs	r0, #0
    1726:	e67c      	b.n	1422 <adc_init+0x26>
    1728:	40000400 	.word	0x40000400
    172c:	40000800 	.word	0x40000800
    1730:	20000364 	.word	0x20000364
    1734:	0000297d 	.word	0x0000297d
    1738:	000028f1 	.word	0x000028f1
    173c:	000042d5 	.word	0x000042d5
    1740:	00005b50 	.word	0x00005b50
    1744:	00002a75 	.word	0x00002a75
    1748:	00005a7c 	.word	0x00005a7c
    174c:	00000fff 	.word	0x00000fff
    1750:	00806024 	.word	0x00806024
    1754:	00806020 	.word	0x00806020
		switch (resolution) {
    1758:	2c00      	cmp	r4, #0
    175a:	d000      	beq.n	175e <adc_init+0x362>
    175c:	e77f      	b.n	165e <adc_init+0x262>
			if (config->differential_mode &&
    175e:	7cf2      	ldrb	r2, [r6, #19]
    1760:	2a00      	cmp	r2, #0
    1762:	d00f      	beq.n	1784 <adc_init+0x388>
					(config->window.window_lower_value > 2047 ||
    1764:	69f2      	ldr	r2, [r6, #28]
    1766:	2180      	movs	r1, #128	; 0x80
    1768:	0109      	lsls	r1, r1, #4
    176a:	468c      	mov	ip, r1
    176c:	4462      	add	r2, ip
			if (config->differential_mode &&
    176e:	492a      	ldr	r1, [pc, #168]	; (1818 <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
    1770:	2017      	movs	r0, #23
			if (config->differential_mode &&
    1772:	428a      	cmp	r2, r1
    1774:	d900      	bls.n	1778 <adc_init+0x37c>
    1776:	e654      	b.n	1422 <adc_init+0x26>
					config->window.window_lower_value < -2048 ||
    1778:	6a32      	ldr	r2, [r6, #32]
    177a:	4462      	add	r2, ip
    177c:	4926      	ldr	r1, [pc, #152]	; (1818 <adc_init+0x41c>)
    177e:	428a      	cmp	r2, r1
    1780:	d900      	bls.n	1784 <adc_init+0x388>
    1782:	e64e      	b.n	1422 <adc_init+0x26>
			} else if (config->window.window_lower_value > 4095 ||
    1784:	4a24      	ldr	r2, [pc, #144]	; (1818 <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
    1786:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
    1788:	69f1      	ldr	r1, [r6, #28]
    178a:	4291      	cmp	r1, r2
    178c:	dd00      	ble.n	1790 <adc_init+0x394>
    178e:	e648      	b.n	1422 <adc_init+0x26>
    1790:	6a31      	ldr	r1, [r6, #32]
    1792:	4291      	cmp	r1, r2
    1794:	dd00      	ble.n	1798 <adc_init+0x39c>
    1796:	e644      	b.n	1422 <adc_init+0x26>
    1798:	e761      	b.n	165e <adc_init+0x262>
			if (config->differential_mode &&
    179a:	7cf2      	ldrb	r2, [r6, #19]
    179c:	2a00      	cmp	r2, #0
    179e:	d00f      	beq.n	17c0 <adc_init+0x3c4>
					(config->window.window_lower_value > 511 ||
    17a0:	69f2      	ldr	r2, [r6, #28]
    17a2:	2180      	movs	r1, #128	; 0x80
    17a4:	0089      	lsls	r1, r1, #2
    17a6:	468c      	mov	ip, r1
    17a8:	4462      	add	r2, ip
			if (config->differential_mode &&
    17aa:	491c      	ldr	r1, [pc, #112]	; (181c <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
    17ac:	2017      	movs	r0, #23
			if (config->differential_mode &&
    17ae:	428a      	cmp	r2, r1
    17b0:	d900      	bls.n	17b4 <adc_init+0x3b8>
    17b2:	e636      	b.n	1422 <adc_init+0x26>
					config->window.window_lower_value < -512 ||
    17b4:	6a32      	ldr	r2, [r6, #32]
    17b6:	4462      	add	r2, ip
    17b8:	4918      	ldr	r1, [pc, #96]	; (181c <adc_init+0x420>)
    17ba:	428a      	cmp	r2, r1
    17bc:	d900      	bls.n	17c0 <adc_init+0x3c4>
    17be:	e630      	b.n	1422 <adc_init+0x26>
			} else if (config->window.window_lower_value > 1023 ||
    17c0:	4a16      	ldr	r2, [pc, #88]	; (181c <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
    17c2:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
    17c4:	69f1      	ldr	r1, [r6, #28]
    17c6:	4291      	cmp	r1, r2
    17c8:	dd00      	ble.n	17cc <adc_init+0x3d0>
    17ca:	e62a      	b.n	1422 <adc_init+0x26>
    17cc:	6a31      	ldr	r1, [r6, #32]
    17ce:	4291      	cmp	r1, r2
    17d0:	dd00      	ble.n	17d4 <adc_init+0x3d8>
    17d2:	e626      	b.n	1422 <adc_init+0x26>
    17d4:	e743      	b.n	165e <adc_init+0x262>
			if (config->differential_mode &&
    17d6:	7cf2      	ldrb	r2, [r6, #19]
    17d8:	2a00      	cmp	r2, #0
    17da:	d00f      	beq.n	17fc <adc_init+0x400>
					(config->window.window_lower_value > 32767 ||
    17dc:	69f2      	ldr	r2, [r6, #28]
    17de:	2180      	movs	r1, #128	; 0x80
    17e0:	0209      	lsls	r1, r1, #8
    17e2:	468c      	mov	ip, r1
    17e4:	4462      	add	r2, ip
			if (config->differential_mode &&
    17e6:	490e      	ldr	r1, [pc, #56]	; (1820 <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
    17e8:	2017      	movs	r0, #23
			if (config->differential_mode &&
    17ea:	428a      	cmp	r2, r1
    17ec:	d900      	bls.n	17f0 <adc_init+0x3f4>
    17ee:	e618      	b.n	1422 <adc_init+0x26>
					config->window.window_lower_value < -32768 ||
    17f0:	6a32      	ldr	r2, [r6, #32]
    17f2:	4462      	add	r2, ip
    17f4:	490a      	ldr	r1, [pc, #40]	; (1820 <adc_init+0x424>)
    17f6:	428a      	cmp	r2, r1
    17f8:	d900      	bls.n	17fc <adc_init+0x400>
    17fa:	e612      	b.n	1422 <adc_init+0x26>
			} else if (config->window.window_lower_value > 65535 ||
    17fc:	4a08      	ldr	r2, [pc, #32]	; (1820 <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
    17fe:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
    1800:	69f1      	ldr	r1, [r6, #28]
    1802:	4291      	cmp	r1, r2
    1804:	dd00      	ble.n	1808 <adc_init+0x40c>
    1806:	e60c      	b.n	1422 <adc_init+0x26>
    1808:	6a31      	ldr	r1, [r6, #32]
    180a:	4291      	cmp	r1, r2
    180c:	dd00      	ble.n	1810 <adc_init+0x414>
    180e:	e608      	b.n	1422 <adc_init+0x26>
    1810:	e725      	b.n	165e <adc_init+0x262>
		return STATUS_ERR_INVALID_ARG;
    1812:	2017      	movs	r0, #23
    1814:	e605      	b.n	1422 <adc_init+0x26>
    1816:	46c0      	nop			; (mov r8, r8)
    1818:	00000fff 	.word	0x00000fff
    181c:	000003ff 	.word	0x000003ff
    1820:	0000ffff 	.word	0x0000ffff

00001824 <ADC_Handler>:
	}
}

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
    1824:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
    1826:	4b2f      	ldr	r3, [pc, #188]	; (18e4 <ADC_Handler+0xc0>)
    1828:	681d      	ldr	r5, [r3, #0]
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
    182a:	682b      	ldr	r3, [r5, #0]
    182c:	7e1a      	ldrb	r2, [r3, #24]
    182e:	7ddc      	ldrb	r4, [r3, #23]
    1830:	4014      	ands	r4, r2
	if (flags & ADC_INTFLAG_RESRDY) {
    1832:	07e2      	lsls	r2, r4, #31
    1834:	d416      	bmi.n	1864 <ADC_Handler+0x40>
	if (flags & ADC_INTFLAG_WINMON) {
    1836:	0763      	lsls	r3, r4, #29
    1838:	d508      	bpl.n	184c <ADC_Handler+0x28>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
    183a:	2304      	movs	r3, #4
    183c:	682a      	ldr	r2, [r5, #0]
    183e:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    1840:	7eeb      	ldrb	r3, [r5, #27]
    1842:	079b      	lsls	r3, r3, #30
    1844:	d502      	bpl.n	184c <ADC_Handler+0x28>
    1846:	7eab      	ldrb	r3, [r5, #26]
    1848:	079b      	lsls	r3, r3, #30
    184a:	d442      	bmi.n	18d2 <ADC_Handler+0xae>
	if (flags & ADC_INTFLAG_OVERRUN) {
    184c:	07a3      	lsls	r3, r4, #30
    184e:	d508      	bpl.n	1862 <ADC_Handler+0x3e>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    1850:	2302      	movs	r3, #2
    1852:	682a      	ldr	r2, [r5, #0]
    1854:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    1856:	7eeb      	ldrb	r3, [r5, #27]
    1858:	075b      	lsls	r3, r3, #29
    185a:	d502      	bpl.n	1862 <ADC_Handler+0x3e>
    185c:	7eab      	ldrb	r3, [r5, #26]
    185e:	075b      	lsls	r3, r3, #29
    1860:	d43b      	bmi.n	18da <ADC_Handler+0xb6>
	_adc_interrupt_handler(0);
}
    1862:	bd70      	pop	{r4, r5, r6, pc}
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    1864:	2201      	movs	r2, #1
    1866:	761a      	strb	r2, [r3, #24]
	Adc *const adc_module = module_inst->hw;
    1868:	682a      	ldr	r2, [r5, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    186a:	7e53      	ldrb	r3, [r2, #25]
		while (adc_is_syncing(module)) {
    186c:	b25b      	sxtb	r3, r3
    186e:	2b00      	cmp	r3, #0
    1870:	dbfb      	blt.n	186a <ADC_Handler+0x46>
		*(module->job_buffer++) = module->hw->RESULT.reg;
    1872:	6969      	ldr	r1, [r5, #20]
    1874:	1c8b      	adds	r3, r1, #2
    1876:	616b      	str	r3, [r5, #20]
    1878:	8b53      	ldrh	r3, [r2, #26]
    187a:	b29b      	uxth	r3, r3
    187c:	800b      	strh	r3, [r1, #0]
		if (--module->remaining_conversions > 0) {
    187e:	8b2b      	ldrh	r3, [r5, #24]
    1880:	3b01      	subs	r3, #1
    1882:	b29b      	uxth	r3, r3
    1884:	832b      	strh	r3, [r5, #24]
    1886:	2b00      	cmp	r3, #0
    1888:	d011      	beq.n	18ae <ADC_Handler+0x8a>
			if (module->software_trigger == true) {
    188a:	7f6b      	ldrb	r3, [r5, #29]
    188c:	2b00      	cmp	r3, #0
    188e:	d0d2      	beq.n	1836 <ADC_Handler+0x12>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    1890:	682a      	ldr	r2, [r5, #0]
    1892:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    1894:	b25b      	sxtb	r3, r3
    1896:	2b00      	cmp	r3, #0
    1898:	dbfb      	blt.n	1892 <ADC_Handler+0x6e>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    189a:	7b13      	ldrb	r3, [r2, #12]
    189c:	2102      	movs	r1, #2
    189e:	430b      	orrs	r3, r1
    18a0:	7313      	strb	r3, [r2, #12]
	Adc *const adc_module = module_inst->hw;
    18a2:	682a      	ldr	r2, [r5, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    18a4:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    18a6:	b25b      	sxtb	r3, r3
    18a8:	2b00      	cmp	r3, #0
    18aa:	dbfb      	blt.n	18a4 <ADC_Handler+0x80>
    18ac:	e7c3      	b.n	1836 <ADC_Handler+0x12>
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
    18ae:	2301      	movs	r3, #1
    18b0:	682a      	ldr	r2, [r5, #0]
    18b2:	7593      	strb	r3, [r2, #22]
			if (module->job_status == STATUS_BUSY) {
    18b4:	7f2b      	ldrb	r3, [r5, #28]
    18b6:	2b05      	cmp	r3, #5
    18b8:	d1bd      	bne.n	1836 <ADC_Handler+0x12>
				module->job_status = STATUS_OK;
    18ba:	2300      	movs	r3, #0
    18bc:	772b      	strb	r3, [r5, #28]
				if ((module->enabled_callback_mask &
    18be:	7eeb      	ldrb	r3, [r5, #27]
    18c0:	07db      	lsls	r3, r3, #31
    18c2:	d5b8      	bpl.n	1836 <ADC_Handler+0x12>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
    18c4:	7eab      	ldrb	r3, [r5, #26]
    18c6:	07db      	lsls	r3, r3, #31
    18c8:	d5b5      	bpl.n	1836 <ADC_Handler+0x12>
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
    18ca:	0028      	movs	r0, r5
    18cc:	68ab      	ldr	r3, [r5, #8]
    18ce:	4798      	blx	r3
    18d0:	e7b1      	b.n	1836 <ADC_Handler+0x12>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
    18d2:	0028      	movs	r0, r5
    18d4:	68eb      	ldr	r3, [r5, #12]
    18d6:	4798      	blx	r3
    18d8:	e7b8      	b.n	184c <ADC_Handler+0x28>
			(module->callback[ADC_CALLBACK_ERROR])(module);
    18da:	692b      	ldr	r3, [r5, #16]
    18dc:	0028      	movs	r0, r5
    18de:	4798      	blx	r3
}
    18e0:	e7bf      	b.n	1862 <ADC_Handler+0x3e>
    18e2:	46c0      	nop			; (mov r8, r8)
    18e4:	20000364 	.word	0x20000364

000018e8 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    18e8:	b500      	push	{lr}
    18ea:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    18ec:	ab01      	add	r3, sp, #4
    18ee:	2280      	movs	r2, #128	; 0x80
    18f0:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    18f2:	780a      	ldrb	r2, [r1, #0]
    18f4:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    18f6:	784a      	ldrb	r2, [r1, #1]
    18f8:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    18fa:	788a      	ldrb	r2, [r1, #2]
    18fc:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    18fe:	0019      	movs	r1, r3
    1900:	4b01      	ldr	r3, [pc, #4]	; (1908 <port_pin_set_config+0x20>)
    1902:	4798      	blx	r3
}
    1904:	b003      	add	sp, #12
    1906:	bd00      	pop	{pc}
    1908:	00002a75 	.word	0x00002a75

0000190c <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    190c:	b5f0      	push	{r4, r5, r6, r7, lr}
    190e:	46de      	mov	lr, fp
    1910:	4657      	mov	r7, sl
    1912:	464e      	mov	r6, r9
    1914:	4645      	mov	r5, r8
    1916:	b5e0      	push	{r5, r6, r7, lr}
    1918:	b087      	sub	sp, #28
    191a:	4680      	mov	r8, r0
    191c:	9104      	str	r1, [sp, #16]
    191e:	0016      	movs	r6, r2
    1920:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    1922:	2200      	movs	r2, #0
    1924:	2300      	movs	r3, #0
    1926:	2100      	movs	r1, #0
    1928:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    192a:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    192c:	2001      	movs	r0, #1
    192e:	0021      	movs	r1, r4
    1930:	9600      	str	r6, [sp, #0]
    1932:	9701      	str	r7, [sp, #4]
    1934:	465c      	mov	r4, fp
    1936:	9403      	str	r4, [sp, #12]
    1938:	4644      	mov	r4, r8
    193a:	9405      	str	r4, [sp, #20]
    193c:	e013      	b.n	1966 <long_division+0x5a>
    193e:	2420      	movs	r4, #32
    1940:	1a64      	subs	r4, r4, r1
    1942:	0005      	movs	r5, r0
    1944:	40e5      	lsrs	r5, r4
    1946:	46a8      	mov	r8, r5
    1948:	e014      	b.n	1974 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    194a:	9c00      	ldr	r4, [sp, #0]
    194c:	9d01      	ldr	r5, [sp, #4]
    194e:	1b12      	subs	r2, r2, r4
    1950:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    1952:	465c      	mov	r4, fp
    1954:	464d      	mov	r5, r9
    1956:	432c      	orrs	r4, r5
    1958:	46a3      	mov	fp, r4
    195a:	9c03      	ldr	r4, [sp, #12]
    195c:	4645      	mov	r5, r8
    195e:	432c      	orrs	r4, r5
    1960:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    1962:	3901      	subs	r1, #1
    1964:	d325      	bcc.n	19b2 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    1966:	2420      	movs	r4, #32
    1968:	4264      	negs	r4, r4
    196a:	190c      	adds	r4, r1, r4
    196c:	d4e7      	bmi.n	193e <long_division+0x32>
    196e:	0005      	movs	r5, r0
    1970:	40a5      	lsls	r5, r4
    1972:	46a8      	mov	r8, r5
    1974:	0004      	movs	r4, r0
    1976:	408c      	lsls	r4, r1
    1978:	46a1      	mov	r9, r4
		r = r << 1;
    197a:	1892      	adds	r2, r2, r2
    197c:	415b      	adcs	r3, r3
    197e:	0014      	movs	r4, r2
    1980:	001d      	movs	r5, r3
		if (n & bit_shift) {
    1982:	9e05      	ldr	r6, [sp, #20]
    1984:	464f      	mov	r7, r9
    1986:	403e      	ands	r6, r7
    1988:	46b4      	mov	ip, r6
    198a:	9e04      	ldr	r6, [sp, #16]
    198c:	4647      	mov	r7, r8
    198e:	403e      	ands	r6, r7
    1990:	46b2      	mov	sl, r6
    1992:	4666      	mov	r6, ip
    1994:	4657      	mov	r7, sl
    1996:	433e      	orrs	r6, r7
    1998:	d003      	beq.n	19a2 <long_division+0x96>
			r |= 0x01;
    199a:	0006      	movs	r6, r0
    199c:	4326      	orrs	r6, r4
    199e:	0032      	movs	r2, r6
    19a0:	002b      	movs	r3, r5
		if (r >= d) {
    19a2:	9c00      	ldr	r4, [sp, #0]
    19a4:	9d01      	ldr	r5, [sp, #4]
    19a6:	429d      	cmp	r5, r3
    19a8:	d8db      	bhi.n	1962 <long_division+0x56>
    19aa:	d1ce      	bne.n	194a <long_division+0x3e>
    19ac:	4294      	cmp	r4, r2
    19ae:	d8d8      	bhi.n	1962 <long_division+0x56>
    19b0:	e7cb      	b.n	194a <long_division+0x3e>
    19b2:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    19b4:	4658      	mov	r0, fp
    19b6:	0019      	movs	r1, r3
    19b8:	b007      	add	sp, #28
    19ba:	bc3c      	pop	{r2, r3, r4, r5}
    19bc:	4690      	mov	r8, r2
    19be:	4699      	mov	r9, r3
    19c0:	46a2      	mov	sl, r4
    19c2:	46ab      	mov	fp, r5
    19c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000019c6 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    19c6:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    19c8:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    19ca:	2340      	movs	r3, #64	; 0x40
    19cc:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    19ce:	4281      	cmp	r1, r0
    19d0:	d202      	bcs.n	19d8 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    19d2:	0018      	movs	r0, r3
    19d4:	bd10      	pop	{r4, pc}
		baud_calculated++;
    19d6:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    19d8:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    19da:	1c63      	adds	r3, r4, #1
    19dc:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    19de:	4288      	cmp	r0, r1
    19e0:	d9f9      	bls.n	19d6 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    19e2:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    19e4:	2cff      	cmp	r4, #255	; 0xff
    19e6:	d8f4      	bhi.n	19d2 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    19e8:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    19ea:	2300      	movs	r3, #0
    19ec:	e7f1      	b.n	19d2 <_sercom_get_sync_baud_val+0xc>
	...

000019f0 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    19f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    19f2:	b083      	sub	sp, #12
    19f4:	000f      	movs	r7, r1
    19f6:	0016      	movs	r6, r2
    19f8:	aa08      	add	r2, sp, #32
    19fa:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    19fc:	0004      	movs	r4, r0
    19fe:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1a00:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    1a02:	42bc      	cmp	r4, r7
    1a04:	d902      	bls.n	1a0c <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    1a06:	0010      	movs	r0, r2
    1a08:	b003      	add	sp, #12
    1a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    1a0c:	2b00      	cmp	r3, #0
    1a0e:	d114      	bne.n	1a3a <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    1a10:	0002      	movs	r2, r0
    1a12:	0008      	movs	r0, r1
    1a14:	2100      	movs	r1, #0
    1a16:	4c19      	ldr	r4, [pc, #100]	; (1a7c <_sercom_get_async_baud_val+0x8c>)
    1a18:	47a0      	blx	r4
    1a1a:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    1a1c:	003a      	movs	r2, r7
    1a1e:	2300      	movs	r3, #0
    1a20:	2000      	movs	r0, #0
    1a22:	4c17      	ldr	r4, [pc, #92]	; (1a80 <_sercom_get_async_baud_val+0x90>)
    1a24:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    1a26:	2200      	movs	r2, #0
    1a28:	2301      	movs	r3, #1
    1a2a:	1a12      	subs	r2, r2, r0
    1a2c:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    1a2e:	0c12      	lsrs	r2, r2, #16
    1a30:	041b      	lsls	r3, r3, #16
    1a32:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    1a34:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    1a36:	2200      	movs	r2, #0
    1a38:	e7e5      	b.n	1a06 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    1a3a:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    1a3c:	2b01      	cmp	r3, #1
    1a3e:	d1f9      	bne.n	1a34 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    1a40:	000a      	movs	r2, r1
    1a42:	2300      	movs	r3, #0
    1a44:	2100      	movs	r1, #0
    1a46:	4c0d      	ldr	r4, [pc, #52]	; (1a7c <_sercom_get_async_baud_val+0x8c>)
    1a48:	47a0      	blx	r4
    1a4a:	0002      	movs	r2, r0
    1a4c:	000b      	movs	r3, r1
    1a4e:	9200      	str	r2, [sp, #0]
    1a50:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    1a52:	0038      	movs	r0, r7
    1a54:	2100      	movs	r1, #0
    1a56:	4c0a      	ldr	r4, [pc, #40]	; (1a80 <_sercom_get_async_baud_val+0x90>)
    1a58:	47a0      	blx	r4
    1a5a:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    1a5c:	2380      	movs	r3, #128	; 0x80
    1a5e:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1a60:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    1a62:	4298      	cmp	r0, r3
    1a64:	d8cf      	bhi.n	1a06 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    1a66:	0f79      	lsrs	r1, r7, #29
    1a68:	00f8      	lsls	r0, r7, #3
    1a6a:	9a00      	ldr	r2, [sp, #0]
    1a6c:	9b01      	ldr	r3, [sp, #4]
    1a6e:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    1a70:	00ea      	lsls	r2, r5, #3
    1a72:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    1a74:	b2d2      	uxtb	r2, r2
    1a76:	0352      	lsls	r2, r2, #13
    1a78:	432a      	orrs	r2, r5
    1a7a:	e7db      	b.n	1a34 <_sercom_get_async_baud_val+0x44>
    1a7c:	00004225 	.word	0x00004225
    1a80:	0000190d 	.word	0x0000190d

00001a84 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    1a84:	b510      	push	{r4, lr}
    1a86:	b082      	sub	sp, #8
    1a88:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    1a8a:	4b0e      	ldr	r3, [pc, #56]	; (1ac4 <sercom_set_gclk_generator+0x40>)
    1a8c:	781b      	ldrb	r3, [r3, #0]
    1a8e:	2b00      	cmp	r3, #0
    1a90:	d007      	beq.n	1aa2 <sercom_set_gclk_generator+0x1e>
    1a92:	2900      	cmp	r1, #0
    1a94:	d105      	bne.n	1aa2 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    1a96:	4b0b      	ldr	r3, [pc, #44]	; (1ac4 <sercom_set_gclk_generator+0x40>)
    1a98:	785b      	ldrb	r3, [r3, #1]
    1a9a:	4283      	cmp	r3, r0
    1a9c:	d010      	beq.n	1ac0 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    1a9e:	201d      	movs	r0, #29
    1aa0:	e00c      	b.n	1abc <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    1aa2:	a901      	add	r1, sp, #4
    1aa4:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    1aa6:	2013      	movs	r0, #19
    1aa8:	4b07      	ldr	r3, [pc, #28]	; (1ac8 <sercom_set_gclk_generator+0x44>)
    1aaa:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    1aac:	2013      	movs	r0, #19
    1aae:	4b07      	ldr	r3, [pc, #28]	; (1acc <sercom_set_gclk_generator+0x48>)
    1ab0:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    1ab2:	4b04      	ldr	r3, [pc, #16]	; (1ac4 <sercom_set_gclk_generator+0x40>)
    1ab4:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    1ab6:	2201      	movs	r2, #1
    1ab8:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    1aba:	2000      	movs	r0, #0
}
    1abc:	b002      	add	sp, #8
    1abe:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    1ac0:	2000      	movs	r0, #0
    1ac2:	e7fb      	b.n	1abc <sercom_set_gclk_generator+0x38>
    1ac4:	20000284 	.word	0x20000284
    1ac8:	0000297d 	.word	0x0000297d
    1acc:	000028f1 	.word	0x000028f1

00001ad0 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    1ad0:	4b40      	ldr	r3, [pc, #256]	; (1bd4 <_sercom_get_default_pad+0x104>)
    1ad2:	4298      	cmp	r0, r3
    1ad4:	d031      	beq.n	1b3a <_sercom_get_default_pad+0x6a>
    1ad6:	d90a      	bls.n	1aee <_sercom_get_default_pad+0x1e>
    1ad8:	4b3f      	ldr	r3, [pc, #252]	; (1bd8 <_sercom_get_default_pad+0x108>)
    1ada:	4298      	cmp	r0, r3
    1adc:	d04d      	beq.n	1b7a <_sercom_get_default_pad+0xaa>
    1ade:	4b3f      	ldr	r3, [pc, #252]	; (1bdc <_sercom_get_default_pad+0x10c>)
    1ae0:	4298      	cmp	r0, r3
    1ae2:	d05a      	beq.n	1b9a <_sercom_get_default_pad+0xca>
    1ae4:	4b3e      	ldr	r3, [pc, #248]	; (1be0 <_sercom_get_default_pad+0x110>)
    1ae6:	4298      	cmp	r0, r3
    1ae8:	d037      	beq.n	1b5a <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    1aea:	2000      	movs	r0, #0
}
    1aec:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    1aee:	4b3d      	ldr	r3, [pc, #244]	; (1be4 <_sercom_get_default_pad+0x114>)
    1af0:	4298      	cmp	r0, r3
    1af2:	d00c      	beq.n	1b0e <_sercom_get_default_pad+0x3e>
    1af4:	4b3c      	ldr	r3, [pc, #240]	; (1be8 <_sercom_get_default_pad+0x118>)
    1af6:	4298      	cmp	r0, r3
    1af8:	d1f7      	bne.n	1aea <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1afa:	2901      	cmp	r1, #1
    1afc:	d017      	beq.n	1b2e <_sercom_get_default_pad+0x5e>
    1afe:	2900      	cmp	r1, #0
    1b00:	d05d      	beq.n	1bbe <_sercom_get_default_pad+0xee>
    1b02:	2902      	cmp	r1, #2
    1b04:	d015      	beq.n	1b32 <_sercom_get_default_pad+0x62>
    1b06:	2903      	cmp	r1, #3
    1b08:	d015      	beq.n	1b36 <_sercom_get_default_pad+0x66>
	return 0;
    1b0a:	2000      	movs	r0, #0
    1b0c:	e7ee      	b.n	1aec <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1b0e:	2901      	cmp	r1, #1
    1b10:	d007      	beq.n	1b22 <_sercom_get_default_pad+0x52>
    1b12:	2900      	cmp	r1, #0
    1b14:	d051      	beq.n	1bba <_sercom_get_default_pad+0xea>
    1b16:	2902      	cmp	r1, #2
    1b18:	d005      	beq.n	1b26 <_sercom_get_default_pad+0x56>
    1b1a:	2903      	cmp	r1, #3
    1b1c:	d005      	beq.n	1b2a <_sercom_get_default_pad+0x5a>
	return 0;
    1b1e:	2000      	movs	r0, #0
    1b20:	e7e4      	b.n	1aec <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1b22:	4832      	ldr	r0, [pc, #200]	; (1bec <_sercom_get_default_pad+0x11c>)
    1b24:	e7e2      	b.n	1aec <_sercom_get_default_pad+0x1c>
    1b26:	4832      	ldr	r0, [pc, #200]	; (1bf0 <_sercom_get_default_pad+0x120>)
    1b28:	e7e0      	b.n	1aec <_sercom_get_default_pad+0x1c>
    1b2a:	4832      	ldr	r0, [pc, #200]	; (1bf4 <_sercom_get_default_pad+0x124>)
    1b2c:	e7de      	b.n	1aec <_sercom_get_default_pad+0x1c>
    1b2e:	4832      	ldr	r0, [pc, #200]	; (1bf8 <_sercom_get_default_pad+0x128>)
    1b30:	e7dc      	b.n	1aec <_sercom_get_default_pad+0x1c>
    1b32:	4832      	ldr	r0, [pc, #200]	; (1bfc <_sercom_get_default_pad+0x12c>)
    1b34:	e7da      	b.n	1aec <_sercom_get_default_pad+0x1c>
    1b36:	4832      	ldr	r0, [pc, #200]	; (1c00 <_sercom_get_default_pad+0x130>)
    1b38:	e7d8      	b.n	1aec <_sercom_get_default_pad+0x1c>
    1b3a:	2901      	cmp	r1, #1
    1b3c:	d007      	beq.n	1b4e <_sercom_get_default_pad+0x7e>
    1b3e:	2900      	cmp	r1, #0
    1b40:	d03f      	beq.n	1bc2 <_sercom_get_default_pad+0xf2>
    1b42:	2902      	cmp	r1, #2
    1b44:	d005      	beq.n	1b52 <_sercom_get_default_pad+0x82>
    1b46:	2903      	cmp	r1, #3
    1b48:	d005      	beq.n	1b56 <_sercom_get_default_pad+0x86>
	return 0;
    1b4a:	2000      	movs	r0, #0
    1b4c:	e7ce      	b.n	1aec <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1b4e:	482d      	ldr	r0, [pc, #180]	; (1c04 <_sercom_get_default_pad+0x134>)
    1b50:	e7cc      	b.n	1aec <_sercom_get_default_pad+0x1c>
    1b52:	482d      	ldr	r0, [pc, #180]	; (1c08 <_sercom_get_default_pad+0x138>)
    1b54:	e7ca      	b.n	1aec <_sercom_get_default_pad+0x1c>
    1b56:	482d      	ldr	r0, [pc, #180]	; (1c0c <_sercom_get_default_pad+0x13c>)
    1b58:	e7c8      	b.n	1aec <_sercom_get_default_pad+0x1c>
    1b5a:	2901      	cmp	r1, #1
    1b5c:	d007      	beq.n	1b6e <_sercom_get_default_pad+0x9e>
    1b5e:	2900      	cmp	r1, #0
    1b60:	d031      	beq.n	1bc6 <_sercom_get_default_pad+0xf6>
    1b62:	2902      	cmp	r1, #2
    1b64:	d005      	beq.n	1b72 <_sercom_get_default_pad+0xa2>
    1b66:	2903      	cmp	r1, #3
    1b68:	d005      	beq.n	1b76 <_sercom_get_default_pad+0xa6>
	return 0;
    1b6a:	2000      	movs	r0, #0
    1b6c:	e7be      	b.n	1aec <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1b6e:	4828      	ldr	r0, [pc, #160]	; (1c10 <_sercom_get_default_pad+0x140>)
    1b70:	e7bc      	b.n	1aec <_sercom_get_default_pad+0x1c>
    1b72:	4828      	ldr	r0, [pc, #160]	; (1c14 <_sercom_get_default_pad+0x144>)
    1b74:	e7ba      	b.n	1aec <_sercom_get_default_pad+0x1c>
    1b76:	4828      	ldr	r0, [pc, #160]	; (1c18 <_sercom_get_default_pad+0x148>)
    1b78:	e7b8      	b.n	1aec <_sercom_get_default_pad+0x1c>
    1b7a:	2901      	cmp	r1, #1
    1b7c:	d007      	beq.n	1b8e <_sercom_get_default_pad+0xbe>
    1b7e:	2900      	cmp	r1, #0
    1b80:	d023      	beq.n	1bca <_sercom_get_default_pad+0xfa>
    1b82:	2902      	cmp	r1, #2
    1b84:	d005      	beq.n	1b92 <_sercom_get_default_pad+0xc2>
    1b86:	2903      	cmp	r1, #3
    1b88:	d005      	beq.n	1b96 <_sercom_get_default_pad+0xc6>
	return 0;
    1b8a:	2000      	movs	r0, #0
    1b8c:	e7ae      	b.n	1aec <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1b8e:	4823      	ldr	r0, [pc, #140]	; (1c1c <_sercom_get_default_pad+0x14c>)
    1b90:	e7ac      	b.n	1aec <_sercom_get_default_pad+0x1c>
    1b92:	4823      	ldr	r0, [pc, #140]	; (1c20 <_sercom_get_default_pad+0x150>)
    1b94:	e7aa      	b.n	1aec <_sercom_get_default_pad+0x1c>
    1b96:	4823      	ldr	r0, [pc, #140]	; (1c24 <_sercom_get_default_pad+0x154>)
    1b98:	e7a8      	b.n	1aec <_sercom_get_default_pad+0x1c>
    1b9a:	2901      	cmp	r1, #1
    1b9c:	d007      	beq.n	1bae <_sercom_get_default_pad+0xde>
    1b9e:	2900      	cmp	r1, #0
    1ba0:	d015      	beq.n	1bce <_sercom_get_default_pad+0xfe>
    1ba2:	2902      	cmp	r1, #2
    1ba4:	d005      	beq.n	1bb2 <_sercom_get_default_pad+0xe2>
    1ba6:	2903      	cmp	r1, #3
    1ba8:	d005      	beq.n	1bb6 <_sercom_get_default_pad+0xe6>
	return 0;
    1baa:	2000      	movs	r0, #0
    1bac:	e79e      	b.n	1aec <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1bae:	481e      	ldr	r0, [pc, #120]	; (1c28 <_sercom_get_default_pad+0x158>)
    1bb0:	e79c      	b.n	1aec <_sercom_get_default_pad+0x1c>
    1bb2:	481e      	ldr	r0, [pc, #120]	; (1c2c <_sercom_get_default_pad+0x15c>)
    1bb4:	e79a      	b.n	1aec <_sercom_get_default_pad+0x1c>
    1bb6:	481e      	ldr	r0, [pc, #120]	; (1c30 <_sercom_get_default_pad+0x160>)
    1bb8:	e798      	b.n	1aec <_sercom_get_default_pad+0x1c>
    1bba:	481e      	ldr	r0, [pc, #120]	; (1c34 <_sercom_get_default_pad+0x164>)
    1bbc:	e796      	b.n	1aec <_sercom_get_default_pad+0x1c>
    1bbe:	2003      	movs	r0, #3
    1bc0:	e794      	b.n	1aec <_sercom_get_default_pad+0x1c>
    1bc2:	481d      	ldr	r0, [pc, #116]	; (1c38 <_sercom_get_default_pad+0x168>)
    1bc4:	e792      	b.n	1aec <_sercom_get_default_pad+0x1c>
    1bc6:	481d      	ldr	r0, [pc, #116]	; (1c3c <_sercom_get_default_pad+0x16c>)
    1bc8:	e790      	b.n	1aec <_sercom_get_default_pad+0x1c>
    1bca:	481d      	ldr	r0, [pc, #116]	; (1c40 <_sercom_get_default_pad+0x170>)
    1bcc:	e78e      	b.n	1aec <_sercom_get_default_pad+0x1c>
    1bce:	481d      	ldr	r0, [pc, #116]	; (1c44 <_sercom_get_default_pad+0x174>)
    1bd0:	e78c      	b.n	1aec <_sercom_get_default_pad+0x1c>
    1bd2:	46c0      	nop			; (mov r8, r8)
    1bd4:	42001000 	.word	0x42001000
    1bd8:	42001800 	.word	0x42001800
    1bdc:	42001c00 	.word	0x42001c00
    1be0:	42001400 	.word	0x42001400
    1be4:	42000800 	.word	0x42000800
    1be8:	42000c00 	.word	0x42000c00
    1bec:	00050003 	.word	0x00050003
    1bf0:	00060003 	.word	0x00060003
    1bf4:	00070003 	.word	0x00070003
    1bf8:	00010003 	.word	0x00010003
    1bfc:	001e0003 	.word	0x001e0003
    1c00:	001f0003 	.word	0x001f0003
    1c04:	00090003 	.word	0x00090003
    1c08:	000a0003 	.word	0x000a0003
    1c0c:	000b0003 	.word	0x000b0003
    1c10:	00110003 	.word	0x00110003
    1c14:	00120003 	.word	0x00120003
    1c18:	00130003 	.word	0x00130003
    1c1c:	000d0003 	.word	0x000d0003
    1c20:	000e0003 	.word	0x000e0003
    1c24:	000f0003 	.word	0x000f0003
    1c28:	00170003 	.word	0x00170003
    1c2c:	00180003 	.word	0x00180003
    1c30:	00190003 	.word	0x00190003
    1c34:	00040003 	.word	0x00040003
    1c38:	00080003 	.word	0x00080003
    1c3c:	00100003 	.word	0x00100003
    1c40:	000c0003 	.word	0x000c0003
    1c44:	00160003 	.word	0x00160003

00001c48 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    1c48:	b530      	push	{r4, r5, lr}
    1c4a:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    1c4c:	4b0b      	ldr	r3, [pc, #44]	; (1c7c <_sercom_get_sercom_inst_index+0x34>)
    1c4e:	466a      	mov	r2, sp
    1c50:	cb32      	ldmia	r3!, {r1, r4, r5}
    1c52:	c232      	stmia	r2!, {r1, r4, r5}
    1c54:	cb32      	ldmia	r3!, {r1, r4, r5}
    1c56:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    1c58:	9b00      	ldr	r3, [sp, #0]
    1c5a:	4283      	cmp	r3, r0
    1c5c:	d00b      	beq.n	1c76 <_sercom_get_sercom_inst_index+0x2e>
    1c5e:	2301      	movs	r3, #1
    1c60:	009a      	lsls	r2, r3, #2
    1c62:	4669      	mov	r1, sp
    1c64:	5852      	ldr	r2, [r2, r1]
    1c66:	4282      	cmp	r2, r0
    1c68:	d006      	beq.n	1c78 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1c6a:	3301      	adds	r3, #1
    1c6c:	2b06      	cmp	r3, #6
    1c6e:	d1f7      	bne.n	1c60 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    1c70:	2000      	movs	r0, #0
}
    1c72:	b007      	add	sp, #28
    1c74:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1c76:	2300      	movs	r3, #0
			return i;
    1c78:	b2d8      	uxtb	r0, r3
    1c7a:	e7fa      	b.n	1c72 <_sercom_get_sercom_inst_index+0x2a>
    1c7c:	00005ba0 	.word	0x00005ba0

00001c80 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    1c80:	4770      	bx	lr
	...

00001c84 <_sercom_set_handler>:


void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    1c84:	b5f0      	push	{r4, r5, r6, r7, lr}
	// Initialize handlers with default handler and device instances with 0 
	if (_handler_table_initialized == false) {
    1c86:	4b0a      	ldr	r3, [pc, #40]	; (1cb0 <_sercom_set_handler+0x2c>)
    1c88:	781b      	ldrb	r3, [r3, #0]
    1c8a:	2b00      	cmp	r3, #0
    1c8c:	d10c      	bne.n	1ca8 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1c8e:	4f09      	ldr	r7, [pc, #36]	; (1cb4 <_sercom_set_handler+0x30>)
    1c90:	4e09      	ldr	r6, [pc, #36]	; (1cb8 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    1c92:	4d0a      	ldr	r5, [pc, #40]	; (1cbc <_sercom_set_handler+0x38>)
    1c94:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1c96:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    1c98:	195a      	adds	r2, r3, r5
    1c9a:	6014      	str	r4, [r2, #0]
    1c9c:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1c9e:	2b18      	cmp	r3, #24
    1ca0:	d1f9      	bne.n	1c96 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    1ca2:	2201      	movs	r2, #1
    1ca4:	4b02      	ldr	r3, [pc, #8]	; (1cb0 <_sercom_set_handler+0x2c>)
    1ca6:	701a      	strb	r2, [r3, #0]
	}

	// Save interrupt handler 
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1ca8:	0080      	lsls	r0, r0, #2
    1caa:	4b02      	ldr	r3, [pc, #8]	; (1cb4 <_sercom_set_handler+0x30>)
    1cac:	50c1      	str	r1, [r0, r3]
}
    1cae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1cb0:	20000286 	.word	0x20000286
    1cb4:	20000288 	.word	0x20000288
    1cb8:	00001c81 	.word	0x00001c81
    1cbc:	20000368 	.word	0x20000368

00001cc0 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1cc0:	b500      	push	{lr}
    1cc2:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    1cc4:	2309      	movs	r3, #9
    1cc6:	466a      	mov	r2, sp
    1cc8:	7013      	strb	r3, [r2, #0]
    1cca:	3301      	adds	r3, #1
    1ccc:	7053      	strb	r3, [r2, #1]
    1cce:	3301      	adds	r3, #1
    1cd0:	7093      	strb	r3, [r2, #2]
    1cd2:	3301      	adds	r3, #1
    1cd4:	70d3      	strb	r3, [r2, #3]
    1cd6:	3301      	adds	r3, #1
    1cd8:	7113      	strb	r3, [r2, #4]
    1cda:	3301      	adds	r3, #1
    1cdc:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    1cde:	4b03      	ldr	r3, [pc, #12]	; (1cec <_sercom_get_interrupt_vector+0x2c>)
    1ce0:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    1ce2:	466b      	mov	r3, sp
    1ce4:	5618      	ldrsb	r0, [r3, r0]
}
    1ce6:	b003      	add	sp, #12
    1ce8:	bd00      	pop	{pc}
    1cea:	46c0      	nop			; (mov r8, r8)
    1cec:	00001c49 	.word	0x00001c49

00001cf0 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1cf0:	b510      	push	{r4, lr}
    1cf2:	4b02      	ldr	r3, [pc, #8]	; (1cfc <SERCOM0_Handler+0xc>)
    1cf4:	681b      	ldr	r3, [r3, #0]
    1cf6:	2000      	movs	r0, #0
    1cf8:	4798      	blx	r3
    1cfa:	bd10      	pop	{r4, pc}
    1cfc:	20000288 	.word	0x20000288

00001d00 <SERCOM1_Handler>:
    1d00:	b510      	push	{r4, lr}
    1d02:	4b02      	ldr	r3, [pc, #8]	; (1d0c <SERCOM1_Handler+0xc>)
    1d04:	685b      	ldr	r3, [r3, #4]
    1d06:	2001      	movs	r0, #1
    1d08:	4798      	blx	r3
    1d0a:	bd10      	pop	{r4, pc}
    1d0c:	20000288 	.word	0x20000288

00001d10 <SERCOM2_Handler>:
    1d10:	b510      	push	{r4, lr}
    1d12:	4b02      	ldr	r3, [pc, #8]	; (1d1c <SERCOM2_Handler+0xc>)
    1d14:	689b      	ldr	r3, [r3, #8]
    1d16:	2002      	movs	r0, #2
    1d18:	4798      	blx	r3
    1d1a:	bd10      	pop	{r4, pc}
    1d1c:	20000288 	.word	0x20000288

00001d20 <SERCOM3_Handler>:
    1d20:	b510      	push	{r4, lr}
    1d22:	4b02      	ldr	r3, [pc, #8]	; (1d2c <SERCOM3_Handler+0xc>)
    1d24:	68db      	ldr	r3, [r3, #12]
    1d26:	2003      	movs	r0, #3
    1d28:	4798      	blx	r3
    1d2a:	bd10      	pop	{r4, pc}
    1d2c:	20000288 	.word	0x20000288

00001d30 <SERCOM4_Handler>:
    1d30:	b510      	push	{r4, lr}
    1d32:	4b02      	ldr	r3, [pc, #8]	; (1d3c <SERCOM4_Handler+0xc>)
    1d34:	691b      	ldr	r3, [r3, #16]
    1d36:	2004      	movs	r0, #4
    1d38:	4798      	blx	r3
    1d3a:	bd10      	pop	{r4, pc}
    1d3c:	20000288 	.word	0x20000288

00001d40 <SERCOM5_Handler>:
    1d40:	b510      	push	{r4, lr}
    1d42:	4b02      	ldr	r3, [pc, #8]	; (1d4c <SERCOM5_Handler+0xc>)
    1d44:	695b      	ldr	r3, [r3, #20]
    1d46:	2005      	movs	r0, #5
    1d48:	4798      	blx	r3
    1d4a:	bd10      	pop	{r4, pc}
    1d4c:	20000288 	.word	0x20000288

00001d50 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    1d50:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d52:	46de      	mov	lr, fp
    1d54:	4657      	mov	r7, sl
    1d56:	464e      	mov	r6, r9
    1d58:	4645      	mov	r5, r8
    1d5a:	b5e0      	push	{r5, r6, r7, lr}
    1d5c:	b091      	sub	sp, #68	; 0x44
    1d5e:	0005      	movs	r5, r0
    1d60:	000c      	movs	r4, r1
    1d62:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    1d64:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1d66:	0008      	movs	r0, r1
    1d68:	4bba      	ldr	r3, [pc, #744]	; (2054 <STACK_SIZE+0x54>)
    1d6a:	4798      	blx	r3
    1d6c:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1d6e:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    1d70:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1d72:	07db      	lsls	r3, r3, #31
    1d74:	d506      	bpl.n	1d84 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    1d76:	b011      	add	sp, #68	; 0x44
    1d78:	bc3c      	pop	{r2, r3, r4, r5}
    1d7a:	4690      	mov	r8, r2
    1d7c:	4699      	mov	r9, r3
    1d7e:	46a2      	mov	sl, r4
    1d80:	46ab      	mov	fp, r5
    1d82:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1d84:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    1d86:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1d88:	079b      	lsls	r3, r3, #30
    1d8a:	d4f4      	bmi.n	1d76 <usart_init+0x26>
    1d8c:	49b2      	ldr	r1, [pc, #712]	; (2058 <STACK_SIZE+0x58>)
    1d8e:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    1d90:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1d92:	2301      	movs	r3, #1
    1d94:	40bb      	lsls	r3, r7
    1d96:	4303      	orrs	r3, r0
    1d98:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    1d9a:	a90f      	add	r1, sp, #60	; 0x3c
    1d9c:	272d      	movs	r7, #45	; 0x2d
    1d9e:	5df3      	ldrb	r3, [r6, r7]
    1da0:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1da2:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1da4:	b2d3      	uxtb	r3, r2
    1da6:	9302      	str	r3, [sp, #8]
    1da8:	0018      	movs	r0, r3
    1daa:	4bac      	ldr	r3, [pc, #688]	; (205c <STACK_SIZE+0x5c>)
    1dac:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1dae:	9802      	ldr	r0, [sp, #8]
    1db0:	4bab      	ldr	r3, [pc, #684]	; (2060 <STACK_SIZE+0x60>)
    1db2:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1db4:	5df0      	ldrb	r0, [r6, r7]
    1db6:	2100      	movs	r1, #0
    1db8:	4baa      	ldr	r3, [pc, #680]	; (2064 <STACK_SIZE+0x64>)
    1dba:	4798      	blx	r3
	module->character_size = config->character_size;
    1dbc:	7af3      	ldrb	r3, [r6, #11]
    1dbe:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    1dc0:	2324      	movs	r3, #36	; 0x24
    1dc2:	5cf3      	ldrb	r3, [r6, r3]
    1dc4:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    1dc6:	2325      	movs	r3, #37	; 0x25
    1dc8:	5cf3      	ldrb	r3, [r6, r3]
    1dca:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    1dcc:	7ef3      	ldrb	r3, [r6, #27]
    1dce:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    1dd0:	7f33      	ldrb	r3, [r6, #28]
    1dd2:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1dd4:	682b      	ldr	r3, [r5, #0]
    1dd6:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1dd8:	0018      	movs	r0, r3
    1dda:	4b9e      	ldr	r3, [pc, #632]	; (2054 <STACK_SIZE+0x54>)
    1ddc:	4798      	blx	r3
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1dde:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    1de0:	2200      	movs	r2, #0
    1de2:	230e      	movs	r3, #14
    1de4:	a906      	add	r1, sp, #24
    1de6:	468c      	mov	ip, r1
    1de8:	4463      	add	r3, ip
    1dea:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    1dec:	8a32      	ldrh	r2, [r6, #16]
    1dee:	9202      	str	r2, [sp, #8]
    1df0:	2380      	movs	r3, #128	; 0x80
    1df2:	01db      	lsls	r3, r3, #7
    1df4:	429a      	cmp	r2, r3
    1df6:	d100      	bne.n	1dfa <usart_init+0xaa>
    1df8:	e09a      	b.n	1f30 <usart_init+0x1e0>
    1dfa:	d90f      	bls.n	1e1c <usart_init+0xcc>
    1dfc:	23c0      	movs	r3, #192	; 0xc0
    1dfe:	01db      	lsls	r3, r3, #7
    1e00:	9a02      	ldr	r2, [sp, #8]
    1e02:	429a      	cmp	r2, r3
    1e04:	d100      	bne.n	1e08 <usart_init+0xb8>
    1e06:	e08e      	b.n	1f26 <usart_init+0x1d6>
    1e08:	2380      	movs	r3, #128	; 0x80
    1e0a:	021b      	lsls	r3, r3, #8
    1e0c:	429a      	cmp	r2, r3
    1e0e:	d000      	beq.n	1e12 <usart_init+0xc2>
    1e10:	e11b      	b.n	204a <STACK_SIZE+0x4a>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    1e12:	2303      	movs	r3, #3
    1e14:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1e16:	2300      	movs	r3, #0
    1e18:	9307      	str	r3, [sp, #28]
    1e1a:	e008      	b.n	1e2e <usart_init+0xde>
	switch (config->sample_rate) {
    1e1c:	2380      	movs	r3, #128	; 0x80
    1e1e:	019b      	lsls	r3, r3, #6
    1e20:	429a      	cmp	r2, r3
    1e22:	d000      	beq.n	1e26 <usart_init+0xd6>
    1e24:	e111      	b.n	204a <STACK_SIZE+0x4a>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1e26:	2310      	movs	r3, #16
    1e28:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1e2a:	3b0f      	subs	r3, #15
    1e2c:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    1e2e:	6833      	ldr	r3, [r6, #0]
    1e30:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    1e32:	68f3      	ldr	r3, [r6, #12]
    1e34:	469b      	mov	fp, r3
		config->sample_adjustment |
    1e36:	6973      	ldr	r3, [r6, #20]
    1e38:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1e3a:	7e33      	ldrb	r3, [r6, #24]
    1e3c:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1e3e:	2326      	movs	r3, #38	; 0x26
    1e40:	5cf3      	ldrb	r3, [r6, r3]
    1e42:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    1e44:	6873      	ldr	r3, [r6, #4]
    1e46:	4699      	mov	r9, r3
	switch (transfer_mode)
    1e48:	2b00      	cmp	r3, #0
    1e4a:	d100      	bne.n	1e4e <usart_init+0xfe>
    1e4c:	e09c      	b.n	1f88 <usart_init+0x238>
    1e4e:	2380      	movs	r3, #128	; 0x80
    1e50:	055b      	lsls	r3, r3, #21
    1e52:	4599      	cmp	r9, r3
    1e54:	d100      	bne.n	1e58 <usart_init+0x108>
    1e56:	e080      	b.n	1f5a <usart_init+0x20a>
	if(config->encoding_format_enable) {
    1e58:	7e73      	ldrb	r3, [r6, #25]
    1e5a:	2b00      	cmp	r3, #0
    1e5c:	d002      	beq.n	1e64 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    1e5e:	7eb3      	ldrb	r3, [r6, #26]
    1e60:	4642      	mov	r2, r8
    1e62:	7393      	strb	r3, [r2, #14]
	usart_hw->BAUD.reg = baud;
    1e64:	230e      	movs	r3, #14
    1e66:	aa06      	add	r2, sp, #24
    1e68:	4694      	mov	ip, r2
    1e6a:	4463      	add	r3, ip
    1e6c:	881b      	ldrh	r3, [r3, #0]
    1e6e:	4642      	mov	r2, r8
    1e70:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    1e72:	9b05      	ldr	r3, [sp, #20]
    1e74:	465a      	mov	r2, fp
    1e76:	4313      	orrs	r3, r2
    1e78:	9a03      	ldr	r2, [sp, #12]
    1e7a:	4313      	orrs	r3, r2
    1e7c:	464a      	mov	r2, r9
    1e7e:	4313      	orrs	r3, r2
    1e80:	9f02      	ldr	r7, [sp, #8]
    1e82:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1e84:	9b04      	ldr	r3, [sp, #16]
    1e86:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    1e88:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1e8a:	4653      	mov	r3, sl
    1e8c:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    1e8e:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    1e90:	2327      	movs	r3, #39	; 0x27
    1e92:	5cf3      	ldrb	r3, [r6, r3]
    1e94:	2b00      	cmp	r3, #0
    1e96:	d101      	bne.n	1e9c <usart_init+0x14c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    1e98:	3304      	adds	r3, #4
    1e9a:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1e9c:	7e73      	ldrb	r3, [r6, #25]
    1e9e:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1ea0:	7f32      	ldrb	r2, [r6, #28]
    1ea2:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1ea4:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1ea6:	7f72      	ldrb	r2, [r6, #29]
    1ea8:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1eaa:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1eac:	2224      	movs	r2, #36	; 0x24
    1eae:	5cb2      	ldrb	r2, [r6, r2]
    1eb0:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1eb2:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    1eb4:	2225      	movs	r2, #37	; 0x25
    1eb6:	5cb2      	ldrb	r2, [r6, r2]
    1eb8:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1eba:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    1ebc:	7ab1      	ldrb	r1, [r6, #10]
    1ebe:	7af2      	ldrb	r2, [r6, #11]
    1ec0:	4311      	orrs	r1, r2
    1ec2:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    1ec4:	8933      	ldrh	r3, [r6, #8]
    1ec6:	2bff      	cmp	r3, #255	; 0xff
    1ec8:	d100      	bne.n	1ecc <usart_init+0x17c>
    1eca:	e081      	b.n	1fd0 <usart_init+0x280>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    1ecc:	2280      	movs	r2, #128	; 0x80
    1ece:	0452      	lsls	r2, r2, #17
    1ed0:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    1ed2:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    1ed4:	232c      	movs	r3, #44	; 0x2c
    1ed6:	5cf3      	ldrb	r3, [r6, r3]
    1ed8:	2b00      	cmp	r3, #0
    1eda:	d103      	bne.n	1ee4 <usart_init+0x194>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    1edc:	4b62      	ldr	r3, [pc, #392]	; (2068 <STACK_SIZE+0x68>)
    1ede:	789b      	ldrb	r3, [r3, #2]
    1ee0:	079b      	lsls	r3, r3, #30
    1ee2:	d501      	bpl.n	1ee8 <usart_init+0x198>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    1ee4:	2380      	movs	r3, #128	; 0x80
    1ee6:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    1ee8:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1eea:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1eec:	2b00      	cmp	r3, #0
    1eee:	d1fc      	bne.n	1eea <usart_init+0x19a>
	usart_hw->CTRLB.reg = ctrlb;
    1ef0:	4643      	mov	r3, r8
    1ef2:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1ef4:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1ef6:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1ef8:	2b00      	cmp	r3, #0
    1efa:	d1fc      	bne.n	1ef6 <usart_init+0x1a6>
	usart_hw->CTRLA.reg = ctrla;
    1efc:	4643      	mov	r3, r8
    1efe:	601f      	str	r7, [r3, #0]
    1f00:	ab0e      	add	r3, sp, #56	; 0x38
    1f02:	2280      	movs	r2, #128	; 0x80
    1f04:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1f06:	2200      	movs	r2, #0
    1f08:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    1f0a:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1f0c:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    1f0e:	6b33      	ldr	r3, [r6, #48]	; 0x30
    1f10:	930a      	str	r3, [sp, #40]	; 0x28
    1f12:	6b73      	ldr	r3, [r6, #52]	; 0x34
    1f14:	930b      	str	r3, [sp, #44]	; 0x2c
    1f16:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    1f18:	930c      	str	r3, [sp, #48]	; 0x30
    1f1a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    1f1c:	9302      	str	r3, [sp, #8]
    1f1e:	930d      	str	r3, [sp, #52]	; 0x34
    1f20:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1f22:	ae0a      	add	r6, sp, #40	; 0x28
    1f24:	e063      	b.n	1fee <usart_init+0x29e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1f26:	2308      	movs	r3, #8
    1f28:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1f2a:	3b07      	subs	r3, #7
    1f2c:	9307      	str	r3, [sp, #28]
    1f2e:	e77e      	b.n	1e2e <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    1f30:	6833      	ldr	r3, [r6, #0]
    1f32:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    1f34:	68f3      	ldr	r3, [r6, #12]
    1f36:	469b      	mov	fp, r3
		config->sample_adjustment |
    1f38:	6973      	ldr	r3, [r6, #20]
    1f3a:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1f3c:	7e33      	ldrb	r3, [r6, #24]
    1f3e:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1f40:	2326      	movs	r3, #38	; 0x26
    1f42:	5cf3      	ldrb	r3, [r6, r3]
    1f44:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    1f46:	6873      	ldr	r3, [r6, #4]
    1f48:	4699      	mov	r9, r3
	switch (transfer_mode)
    1f4a:	2b00      	cmp	r3, #0
    1f4c:	d018      	beq.n	1f80 <usart_init+0x230>
    1f4e:	2380      	movs	r3, #128	; 0x80
    1f50:	055b      	lsls	r3, r3, #21
    1f52:	4599      	cmp	r9, r3
    1f54:	d001      	beq.n	1f5a <usart_init+0x20a>
	enum status_code status_code = STATUS_OK;
    1f56:	2000      	movs	r0, #0
    1f58:	e025      	b.n	1fa6 <usart_init+0x256>
			if (!config->use_external_clock) {
    1f5a:	2327      	movs	r3, #39	; 0x27
    1f5c:	5cf3      	ldrb	r3, [r6, r3]
    1f5e:	2b00      	cmp	r3, #0
    1f60:	d000      	beq.n	1f64 <usart_init+0x214>
    1f62:	e779      	b.n	1e58 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    1f64:	6a33      	ldr	r3, [r6, #32]
    1f66:	001f      	movs	r7, r3
    1f68:	b2c0      	uxtb	r0, r0
    1f6a:	4b40      	ldr	r3, [pc, #256]	; (206c <STACK_SIZE+0x6c>)
    1f6c:	4798      	blx	r3
    1f6e:	0001      	movs	r1, r0
    1f70:	220e      	movs	r2, #14
    1f72:	ab06      	add	r3, sp, #24
    1f74:	469c      	mov	ip, r3
    1f76:	4462      	add	r2, ip
    1f78:	0038      	movs	r0, r7
    1f7a:	4b3d      	ldr	r3, [pc, #244]	; (2070 <STACK_SIZE+0x70>)
    1f7c:	4798      	blx	r3
    1f7e:	e012      	b.n	1fa6 <usart_init+0x256>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1f80:	2308      	movs	r3, #8
    1f82:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1f84:	2300      	movs	r3, #0
    1f86:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    1f88:	2327      	movs	r3, #39	; 0x27
    1f8a:	5cf3      	ldrb	r3, [r6, r3]
    1f8c:	2b00      	cmp	r3, #0
    1f8e:	d00e      	beq.n	1fae <usart_init+0x25e>
				status_code =
    1f90:	9b06      	ldr	r3, [sp, #24]
    1f92:	9300      	str	r3, [sp, #0]
    1f94:	9b07      	ldr	r3, [sp, #28]
    1f96:	220e      	movs	r2, #14
    1f98:	a906      	add	r1, sp, #24
    1f9a:	468c      	mov	ip, r1
    1f9c:	4462      	add	r2, ip
    1f9e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    1fa0:	6a30      	ldr	r0, [r6, #32]
    1fa2:	4f34      	ldr	r7, [pc, #208]	; (2074 <STACK_SIZE+0x74>)
    1fa4:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    1fa6:	2800      	cmp	r0, #0
    1fa8:	d000      	beq.n	1fac <usart_init+0x25c>
    1faa:	e6e4      	b.n	1d76 <usart_init+0x26>
    1fac:	e754      	b.n	1e58 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    1fae:	6a33      	ldr	r3, [r6, #32]
    1fb0:	001f      	movs	r7, r3
    1fb2:	b2c0      	uxtb	r0, r0
    1fb4:	4b2d      	ldr	r3, [pc, #180]	; (206c <STACK_SIZE+0x6c>)
    1fb6:	4798      	blx	r3
    1fb8:	0001      	movs	r1, r0
				status_code =
    1fba:	9b06      	ldr	r3, [sp, #24]
    1fbc:	9300      	str	r3, [sp, #0]
    1fbe:	9b07      	ldr	r3, [sp, #28]
    1fc0:	220e      	movs	r2, #14
    1fc2:	a806      	add	r0, sp, #24
    1fc4:	4684      	mov	ip, r0
    1fc6:	4462      	add	r2, ip
    1fc8:	0038      	movs	r0, r7
    1fca:	4f2a      	ldr	r7, [pc, #168]	; (2074 <STACK_SIZE+0x74>)
    1fcc:	47b8      	blx	r7
    1fce:	e7ea      	b.n	1fa6 <usart_init+0x256>
		if(config->lin_slave_enable) {
    1fd0:	7ef3      	ldrb	r3, [r6, #27]
    1fd2:	2b00      	cmp	r3, #0
    1fd4:	d100      	bne.n	1fd8 <usart_init+0x288>
    1fd6:	e77d      	b.n	1ed4 <usart_init+0x184>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    1fd8:	2380      	movs	r3, #128	; 0x80
    1fda:	04db      	lsls	r3, r3, #19
    1fdc:	431f      	orrs	r7, r3
    1fde:	e779      	b.n	1ed4 <usart_init+0x184>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1fe0:	0020      	movs	r0, r4
    1fe2:	4b25      	ldr	r3, [pc, #148]	; (2078 <STACK_SIZE+0x78>)
    1fe4:	4798      	blx	r3
    1fe6:	e007      	b.n	1ff8 <usart_init+0x2a8>
    1fe8:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    1fea:	2f04      	cmp	r7, #4
    1fec:	d00d      	beq.n	200a <STACK_SIZE+0xa>
    1fee:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1ff0:	00bb      	lsls	r3, r7, #2
    1ff2:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    1ff4:	2800      	cmp	r0, #0
    1ff6:	d0f3      	beq.n	1fe0 <usart_init+0x290>
		if (current_pinmux != PINMUX_UNUSED) {
    1ff8:	1c43      	adds	r3, r0, #1
    1ffa:	d0f5      	beq.n	1fe8 <usart_init+0x298>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1ffc:	a90e      	add	r1, sp, #56	; 0x38
    1ffe:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    2000:	0c00      	lsrs	r0, r0, #16
    2002:	b2c0      	uxtb	r0, r0
    2004:	4b1d      	ldr	r3, [pc, #116]	; (207c <STACK_SIZE+0x7c>)
    2006:	4798      	blx	r3
    2008:	e7ee      	b.n	1fe8 <usart_init+0x298>
		module->callback[i]            = NULL;
    200a:	2300      	movs	r3, #0
    200c:	60eb      	str	r3, [r5, #12]
    200e:	612b      	str	r3, [r5, #16]
    2010:	616b      	str	r3, [r5, #20]
    2012:	61ab      	str	r3, [r5, #24]
    2014:	61eb      	str	r3, [r5, #28]
    2016:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    2018:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    201a:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    201c:	2200      	movs	r2, #0
    201e:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    2020:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    2022:	3330      	adds	r3, #48	; 0x30
    2024:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    2026:	3301      	adds	r3, #1
    2028:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    202a:	3301      	adds	r3, #1
    202c:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    202e:	3301      	adds	r3, #1
    2030:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    2032:	6828      	ldr	r0, [r5, #0]
    2034:	4b07      	ldr	r3, [pc, #28]	; (2054 <STACK_SIZE+0x54>)
    2036:	4798      	blx	r3
    2038:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    203a:	4911      	ldr	r1, [pc, #68]	; (2080 <STACK_SIZE+0x80>)
    203c:	4b11      	ldr	r3, [pc, #68]	; (2084 <STACK_SIZE+0x84>)
    203e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    2040:	00a4      	lsls	r4, r4, #2
    2042:	4b11      	ldr	r3, [pc, #68]	; (2088 <STACK_SIZE+0x88>)
    2044:	50e5      	str	r5, [r4, r3]
	return status_code;
    2046:	2000      	movs	r0, #0
    2048:	e695      	b.n	1d76 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    204a:	2310      	movs	r3, #16
    204c:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    204e:	2300      	movs	r3, #0
    2050:	9307      	str	r3, [sp, #28]
    2052:	e6ec      	b.n	1e2e <usart_init+0xde>
    2054:	00001c49 	.word	0x00001c49
    2058:	40000400 	.word	0x40000400
    205c:	0000297d 	.word	0x0000297d
    2060:	000028f1 	.word	0x000028f1
    2064:	00001a85 	.word	0x00001a85
    2068:	41002000 	.word	0x41002000
    206c:	00002999 	.word	0x00002999
    2070:	000019c7 	.word	0x000019c7
    2074:	000019f1 	.word	0x000019f1
    2078:	00001ad1 	.word	0x00001ad1
    207c:	00002a75 	.word	0x00002a75
    2080:	000021a5 	.word	0x000021a5
    2084:	00001c85 	.word	0x00001c85
    2088:	20000368 	.word	0x20000368

0000208c <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    208c:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    208e:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    2090:	2a00      	cmp	r2, #0
    2092:	d101      	bne.n	2098 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    2094:	0018      	movs	r0, r3
    2096:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    2098:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    209a:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    209c:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    209e:	2a00      	cmp	r2, #0
    20a0:	d1f8      	bne.n	2094 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    20a2:	6802      	ldr	r2, [r0, #0]
	usart_hw->DATA.reg = tx_data;
    20a4:	8511      	strh	r1, [r2, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    20a6:	2102      	movs	r1, #2
    20a8:	7e13      	ldrb	r3, [r2, #24]
    20aa:	420b      	tst	r3, r1
    20ac:	d0fc      	beq.n	20a8 <usart_write_wait+0x1c>
	return STATUS_OK;
    20ae:	2300      	movs	r3, #0
    20b0:	e7f0      	b.n	2094 <usart_write_wait+0x8>

000020b2 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    20b2:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    20b4:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    20b6:	2a00      	cmp	r2, #0
    20b8:	d101      	bne.n	20be <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    20ba:	0018      	movs	r0, r3
    20bc:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    20be:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    20c0:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    20c2:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    20c4:	2a00      	cmp	r2, #0
    20c6:	d1f8      	bne.n	20ba <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    20c8:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    20ca:	7e10      	ldrb	r0, [r2, #24]
    20cc:	0740      	lsls	r0, r0, #29
    20ce:	d5f4      	bpl.n	20ba <usart_read_wait+0x8>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    20d0:	8b53      	ldrh	r3, [r2, #26]
    20d2:	b2db      	uxtb	r3, r3
	if (error_code) {
    20d4:	0698      	lsls	r0, r3, #26
    20d6:	d01d      	beq.n	2114 <usart_read_wait+0x62>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    20d8:	0798      	lsls	r0, r3, #30
    20da:	d503      	bpl.n	20e4 <usart_read_wait+0x32>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    20dc:	2302      	movs	r3, #2
    20de:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    20e0:	3318      	adds	r3, #24
    20e2:	e7ea      	b.n	20ba <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    20e4:	0758      	lsls	r0, r3, #29
    20e6:	d503      	bpl.n	20f0 <usart_read_wait+0x3e>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    20e8:	2304      	movs	r3, #4
    20ea:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    20ec:	331a      	adds	r3, #26
    20ee:	e7e4      	b.n	20ba <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    20f0:	07d8      	lsls	r0, r3, #31
    20f2:	d503      	bpl.n	20fc <usart_read_wait+0x4a>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    20f4:	2301      	movs	r3, #1
    20f6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    20f8:	3312      	adds	r3, #18
    20fa:	e7de      	b.n	20ba <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    20fc:	06d8      	lsls	r0, r3, #27
    20fe:	d503      	bpl.n	2108 <usart_read_wait+0x56>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    2100:	2310      	movs	r3, #16
    2102:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    2104:	3332      	adds	r3, #50	; 0x32
    2106:	e7d8      	b.n	20ba <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    2108:	069b      	lsls	r3, r3, #26
    210a:	d503      	bpl.n	2114 <usart_read_wait+0x62>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    210c:	2320      	movs	r3, #32
    210e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    2110:	3321      	adds	r3, #33	; 0x21
    2112:	e7d2      	b.n	20ba <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    2114:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    2116:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    2118:	2300      	movs	r3, #0
    211a:	e7ce      	b.n	20ba <usart_read_wait+0x8>

0000211c <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    211c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    211e:	0004      	movs	r4, r0
    2120:	000d      	movs	r5, r1
    2122:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2124:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    2126:	4b0f      	ldr	r3, [pc, #60]	; (2164 <_usart_read_buffer+0x48>)
    2128:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    212a:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    212c:	b29b      	uxth	r3, r3
    212e:	2b00      	cmp	r3, #0
    2130:	d003      	beq.n	213a <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
    2132:	4b0d      	ldr	r3, [pc, #52]	; (2168 <_usart_read_buffer+0x4c>)
    2134:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    2136:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    2138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    213a:	85a6      	strh	r6, [r4, #44]	; 0x2c
    213c:	4b0a      	ldr	r3, [pc, #40]	; (2168 <_usart_read_buffer+0x4c>)
    213e:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    2140:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    2142:	2205      	movs	r2, #5
    2144:	2332      	movs	r3, #50	; 0x32
    2146:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    2148:	3b2e      	subs	r3, #46	; 0x2e
    214a:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
    214c:	7a23      	ldrb	r3, [r4, #8]
    214e:	2b00      	cmp	r3, #0
    2150:	d001      	beq.n	2156 <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    2152:	2320      	movs	r3, #32
    2154:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
    2156:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
    2158:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
    215a:	2b00      	cmp	r3, #0
    215c:	d0ec      	beq.n	2138 <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    215e:	2308      	movs	r3, #8
    2160:	75bb      	strb	r3, [r7, #22]
    2162:	e7e9      	b.n	2138 <_usart_read_buffer+0x1c>
    2164:	00001311 	.word	0x00001311
    2168:	00001351 	.word	0x00001351

0000216c <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    216c:	1c93      	adds	r3, r2, #2
    216e:	009b      	lsls	r3, r3, #2
    2170:	18c3      	adds	r3, r0, r3
    2172:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    2174:	2130      	movs	r1, #48	; 0x30
    2176:	2301      	movs	r3, #1
    2178:	4093      	lsls	r3, r2
    217a:	001a      	movs	r2, r3
    217c:	5c43      	ldrb	r3, [r0, r1]
    217e:	4313      	orrs	r3, r2
    2180:	5443      	strb	r3, [r0, r1]
}
    2182:	4770      	bx	lr

00002184 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    2184:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    2186:	2317      	movs	r3, #23
	if (length == 0) {
    2188:	2a00      	cmp	r2, #0
    218a:	d101      	bne.n	2190 <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
    218c:	0018      	movs	r0, r3
    218e:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
    2190:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
    2192:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
    2194:	2c00      	cmp	r4, #0
    2196:	d0f9      	beq.n	218c <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
    2198:	4b01      	ldr	r3, [pc, #4]	; (21a0 <usart_read_buffer_job+0x1c>)
    219a:	4798      	blx	r3
    219c:	0003      	movs	r3, r0
    219e:	e7f5      	b.n	218c <usart_read_buffer_job+0x8>
    21a0:	0000211d 	.word	0x0000211d

000021a4 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    21a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    21a6:	0080      	lsls	r0, r0, #2
    21a8:	4b62      	ldr	r3, [pc, #392]	; (2334 <_usart_interrupt_handler+0x190>)
    21aa:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    21ac:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    21ae:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    21b0:	2b00      	cmp	r3, #0
    21b2:	d1fc      	bne.n	21ae <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    21b4:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    21b6:	7da6      	ldrb	r6, [r4, #22]
    21b8:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    21ba:	2330      	movs	r3, #48	; 0x30
    21bc:	5ceb      	ldrb	r3, [r5, r3]
    21be:	2231      	movs	r2, #49	; 0x31
    21c0:	5caf      	ldrb	r7, [r5, r2]
    21c2:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    21c4:	07f3      	lsls	r3, r6, #31
    21c6:	d522      	bpl.n	220e <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    21c8:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    21ca:	b29b      	uxth	r3, r3
    21cc:	2b00      	cmp	r3, #0
    21ce:	d01c      	beq.n	220a <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    21d0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    21d2:	7813      	ldrb	r3, [r2, #0]
    21d4:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    21d6:	1c51      	adds	r1, r2, #1
    21d8:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    21da:	7969      	ldrb	r1, [r5, #5]
    21dc:	2901      	cmp	r1, #1
    21de:	d00e      	beq.n	21fe <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    21e0:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    21e2:	05db      	lsls	r3, r3, #23
    21e4:	0ddb      	lsrs	r3, r3, #23
    21e6:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    21e8:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    21ea:	3b01      	subs	r3, #1
    21ec:	b29b      	uxth	r3, r3
    21ee:	85eb      	strh	r3, [r5, #46]	; 0x2e
    21f0:	2b00      	cmp	r3, #0
    21f2:	d10c      	bne.n	220e <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    21f4:	3301      	adds	r3, #1
    21f6:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    21f8:	3301      	adds	r3, #1
    21fa:	75a3      	strb	r3, [r4, #22]
    21fc:	e007      	b.n	220e <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    21fe:	7851      	ldrb	r1, [r2, #1]
    2200:	0209      	lsls	r1, r1, #8
    2202:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    2204:	3202      	adds	r2, #2
    2206:	62aa      	str	r2, [r5, #40]	; 0x28
    2208:	e7eb      	b.n	21e2 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    220a:	2301      	movs	r3, #1
    220c:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    220e:	07b3      	lsls	r3, r6, #30
    2210:	d506      	bpl.n	2220 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    2212:	2302      	movs	r3, #2
    2214:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    2216:	2200      	movs	r2, #0
    2218:	3331      	adds	r3, #49	; 0x31
    221a:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    221c:	07fb      	lsls	r3, r7, #31
    221e:	d41a      	bmi.n	2256 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    2220:	0773      	lsls	r3, r6, #29
    2222:	d565      	bpl.n	22f0 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    2224:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2226:	b29b      	uxth	r3, r3
    2228:	2b00      	cmp	r3, #0
    222a:	d05f      	beq.n	22ec <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    222c:	8b63      	ldrh	r3, [r4, #26]
    222e:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    2230:	071a      	lsls	r2, r3, #28
    2232:	d414      	bmi.n	225e <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2234:	223f      	movs	r2, #63	; 0x3f
    2236:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    2238:	2b00      	cmp	r3, #0
    223a:	d034      	beq.n	22a6 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    223c:	079a      	lsls	r2, r3, #30
    223e:	d511      	bpl.n	2264 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    2240:	221a      	movs	r2, #26
    2242:	2332      	movs	r3, #50	; 0x32
    2244:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    2246:	3b30      	subs	r3, #48	; 0x30
    2248:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    224a:	077b      	lsls	r3, r7, #29
    224c:	d550      	bpl.n	22f0 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    224e:	0028      	movs	r0, r5
    2250:	696b      	ldr	r3, [r5, #20]
    2252:	4798      	blx	r3
    2254:	e04c      	b.n	22f0 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    2256:	0028      	movs	r0, r5
    2258:	68eb      	ldr	r3, [r5, #12]
    225a:	4798      	blx	r3
    225c:	e7e0      	b.n	2220 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    225e:	2237      	movs	r2, #55	; 0x37
    2260:	4013      	ands	r3, r2
    2262:	e7e9      	b.n	2238 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2264:	075a      	lsls	r2, r3, #29
    2266:	d505      	bpl.n	2274 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    2268:	221e      	movs	r2, #30
    226a:	2332      	movs	r3, #50	; 0x32
    226c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    226e:	3b2e      	subs	r3, #46	; 0x2e
    2270:	8363      	strh	r3, [r4, #26]
    2272:	e7ea      	b.n	224a <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2274:	07da      	lsls	r2, r3, #31
    2276:	d505      	bpl.n	2284 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    2278:	2213      	movs	r2, #19
    227a:	2332      	movs	r3, #50	; 0x32
    227c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    227e:	3b31      	subs	r3, #49	; 0x31
    2280:	8363      	strh	r3, [r4, #26]
    2282:	e7e2      	b.n	224a <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    2284:	06da      	lsls	r2, r3, #27
    2286:	d505      	bpl.n	2294 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    2288:	2242      	movs	r2, #66	; 0x42
    228a:	2332      	movs	r3, #50	; 0x32
    228c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    228e:	3b22      	subs	r3, #34	; 0x22
    2290:	8363      	strh	r3, [r4, #26]
    2292:	e7da      	b.n	224a <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    2294:	2220      	movs	r2, #32
    2296:	421a      	tst	r2, r3
    2298:	d0d7      	beq.n	224a <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    229a:	3221      	adds	r2, #33	; 0x21
    229c:	2332      	movs	r3, #50	; 0x32
    229e:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    22a0:	3b12      	subs	r3, #18
    22a2:	8363      	strh	r3, [r4, #26]
    22a4:	e7d1      	b.n	224a <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    22a6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    22a8:	05db      	lsls	r3, r3, #23
    22aa:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    22ac:	b2da      	uxtb	r2, r3
    22ae:	6a69      	ldr	r1, [r5, #36]	; 0x24
    22b0:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    22b2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    22b4:	1c51      	adds	r1, r2, #1
    22b6:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    22b8:	7969      	ldrb	r1, [r5, #5]
    22ba:	2901      	cmp	r1, #1
    22bc:	d010      	beq.n	22e0 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    22be:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    22c0:	3b01      	subs	r3, #1
    22c2:	b29b      	uxth	r3, r3
    22c4:	85ab      	strh	r3, [r5, #44]	; 0x2c
    22c6:	2b00      	cmp	r3, #0
    22c8:	d112      	bne.n	22f0 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    22ca:	3304      	adds	r3, #4
    22cc:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    22ce:	2200      	movs	r2, #0
    22d0:	332e      	adds	r3, #46	; 0x2e
    22d2:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    22d4:	07bb      	lsls	r3, r7, #30
    22d6:	d50b      	bpl.n	22f0 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    22d8:	0028      	movs	r0, r5
    22da:	692b      	ldr	r3, [r5, #16]
    22dc:	4798      	blx	r3
    22de:	e007      	b.n	22f0 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    22e0:	0a1b      	lsrs	r3, r3, #8
    22e2:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    22e4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    22e6:	3301      	adds	r3, #1
    22e8:	626b      	str	r3, [r5, #36]	; 0x24
    22ea:	e7e8      	b.n	22be <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    22ec:	2304      	movs	r3, #4
    22ee:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    22f0:	06f3      	lsls	r3, r6, #27
    22f2:	d504      	bpl.n	22fe <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    22f4:	2310      	movs	r3, #16
    22f6:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    22f8:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    22fa:	06fb      	lsls	r3, r7, #27
    22fc:	d40e      	bmi.n	231c <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    22fe:	06b3      	lsls	r3, r6, #26
    2300:	d504      	bpl.n	230c <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    2302:	2320      	movs	r3, #32
    2304:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    2306:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    2308:	073b      	lsls	r3, r7, #28
    230a:	d40b      	bmi.n	2324 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    230c:	0733      	lsls	r3, r6, #28
    230e:	d504      	bpl.n	231a <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    2310:	2308      	movs	r3, #8
    2312:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    2314:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    2316:	06bb      	lsls	r3, r7, #26
    2318:	d408      	bmi.n	232c <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    231a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    231c:	0028      	movs	r0, r5
    231e:	69eb      	ldr	r3, [r5, #28]
    2320:	4798      	blx	r3
    2322:	e7ec      	b.n	22fe <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    2324:	0028      	movs	r0, r5
    2326:	69ab      	ldr	r3, [r5, #24]
    2328:	4798      	blx	r3
    232a:	e7ef      	b.n	230c <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    232c:	6a2b      	ldr	r3, [r5, #32]
    232e:	0028      	movs	r0, r5
    2330:	4798      	blx	r3
}
    2332:	e7f2      	b.n	231a <_usart_interrupt_handler+0x176>
    2334:	20000368 	.word	0x20000368

00002338 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    2338:	b510      	push	{r4, lr}
	switch (clock_source) {
    233a:	2808      	cmp	r0, #8
    233c:	d803      	bhi.n	2346 <system_clock_source_get_hz+0xe>
    233e:	0080      	lsls	r0, r0, #2
    2340:	4b1c      	ldr	r3, [pc, #112]	; (23b4 <system_clock_source_get_hz+0x7c>)
    2342:	581b      	ldr	r3, [r3, r0]
    2344:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    2346:	2000      	movs	r0, #0
    2348:	e032      	b.n	23b0 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    234a:	4b1b      	ldr	r3, [pc, #108]	; (23b8 <system_clock_source_get_hz+0x80>)
    234c:	6918      	ldr	r0, [r3, #16]
    234e:	e02f      	b.n	23b0 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    2350:	4b1a      	ldr	r3, [pc, #104]	; (23bc <system_clock_source_get_hz+0x84>)
    2352:	6a1b      	ldr	r3, [r3, #32]
    2354:	059b      	lsls	r3, r3, #22
    2356:	0f9b      	lsrs	r3, r3, #30
    2358:	4819      	ldr	r0, [pc, #100]	; (23c0 <system_clock_source_get_hz+0x88>)
    235a:	40d8      	lsrs	r0, r3
    235c:	e028      	b.n	23b0 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    235e:	4b16      	ldr	r3, [pc, #88]	; (23b8 <system_clock_source_get_hz+0x80>)
    2360:	6958      	ldr	r0, [r3, #20]
    2362:	e025      	b.n	23b0 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2364:	4b14      	ldr	r3, [pc, #80]	; (23b8 <system_clock_source_get_hz+0x80>)
    2366:	681b      	ldr	r3, [r3, #0]
			return 0;
    2368:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    236a:	079b      	lsls	r3, r3, #30
    236c:	d520      	bpl.n	23b0 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    236e:	4913      	ldr	r1, [pc, #76]	; (23bc <system_clock_source_get_hz+0x84>)
    2370:	2210      	movs	r2, #16
    2372:	68cb      	ldr	r3, [r1, #12]
    2374:	421a      	tst	r2, r3
    2376:	d0fc      	beq.n	2372 <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    2378:	4b0f      	ldr	r3, [pc, #60]	; (23b8 <system_clock_source_get_hz+0x80>)
    237a:	681a      	ldr	r2, [r3, #0]
    237c:	2324      	movs	r3, #36	; 0x24
    237e:	4013      	ands	r3, r2
    2380:	2b04      	cmp	r3, #4
    2382:	d001      	beq.n	2388 <system_clock_source_get_hz+0x50>
			return 48000000UL;
    2384:	480f      	ldr	r0, [pc, #60]	; (23c4 <system_clock_source_get_hz+0x8c>)
    2386:	e013      	b.n	23b0 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2388:	2000      	movs	r0, #0
    238a:	4b0f      	ldr	r3, [pc, #60]	; (23c8 <system_clock_source_get_hz+0x90>)
    238c:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    238e:	4b0a      	ldr	r3, [pc, #40]	; (23b8 <system_clock_source_get_hz+0x80>)
    2390:	689b      	ldr	r3, [r3, #8]
    2392:	041b      	lsls	r3, r3, #16
    2394:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2396:	4358      	muls	r0, r3
    2398:	e00a      	b.n	23b0 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    239a:	2350      	movs	r3, #80	; 0x50
    239c:	4a07      	ldr	r2, [pc, #28]	; (23bc <system_clock_source_get_hz+0x84>)
    239e:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    23a0:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    23a2:	075b      	lsls	r3, r3, #29
    23a4:	d504      	bpl.n	23b0 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    23a6:	4b04      	ldr	r3, [pc, #16]	; (23b8 <system_clock_source_get_hz+0x80>)
    23a8:	68d8      	ldr	r0, [r3, #12]
    23aa:	e001      	b.n	23b0 <system_clock_source_get_hz+0x78>
		return 32768UL;
    23ac:	2080      	movs	r0, #128	; 0x80
    23ae:	0200      	lsls	r0, r0, #8
	}
}
    23b0:	bd10      	pop	{r4, pc}
    23b2:	46c0      	nop			; (mov r8, r8)
    23b4:	00005bb8 	.word	0x00005bb8
    23b8:	200002a0 	.word	0x200002a0
    23bc:	40000800 	.word	0x40000800
    23c0:	007a1200 	.word	0x007a1200
    23c4:	02dc6c00 	.word	0x02dc6c00
    23c8:	00002999 	.word	0x00002999

000023cc <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    23cc:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    23ce:	490c      	ldr	r1, [pc, #48]	; (2400 <system_clock_source_osc8m_set_config+0x34>)
    23d0:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    23d2:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    23d4:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    23d6:	7840      	ldrb	r0, [r0, #1]
    23d8:	2201      	movs	r2, #1
    23da:	4010      	ands	r0, r2
    23dc:	0180      	lsls	r0, r0, #6
    23de:	2640      	movs	r6, #64	; 0x40
    23e0:	43b3      	bics	r3, r6
    23e2:	4303      	orrs	r3, r0
    23e4:	402a      	ands	r2, r5
    23e6:	01d2      	lsls	r2, r2, #7
    23e8:	2080      	movs	r0, #128	; 0x80
    23ea:	4383      	bics	r3, r0
    23ec:	4313      	orrs	r3, r2
    23ee:	2203      	movs	r2, #3
    23f0:	4022      	ands	r2, r4
    23f2:	0212      	lsls	r2, r2, #8
    23f4:	4803      	ldr	r0, [pc, #12]	; (2404 <system_clock_source_osc8m_set_config+0x38>)
    23f6:	4003      	ands	r3, r0
    23f8:	4313      	orrs	r3, r2
    23fa:	620b      	str	r3, [r1, #32]
}
    23fc:	bd70      	pop	{r4, r5, r6, pc}
    23fe:	46c0      	nop			; (mov r8, r8)
    2400:	40000800 	.word	0x40000800
    2404:	fffffcff 	.word	0xfffffcff

00002408 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    2408:	b5f0      	push	{r4, r5, r6, r7, lr}
    240a:	46de      	mov	lr, fp
    240c:	4657      	mov	r7, sl
    240e:	464e      	mov	r6, r9
    2410:	4645      	mov	r5, r8
    2412:	b5e0      	push	{r5, r6, r7, lr}
    2414:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    2416:	4b26      	ldr	r3, [pc, #152]	; (24b0 <system_clock_source_xosc32k_set_config+0xa8>)
    2418:	469b      	mov	fp, r3
    241a:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    241c:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    241e:	7800      	ldrb	r0, [r0, #0]
    2420:	4242      	negs	r2, r0
    2422:	4142      	adcs	r2, r0
    2424:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    2426:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    2428:	78ca      	ldrb	r2, [r1, #3]
    242a:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    242c:	790a      	ldrb	r2, [r1, #4]
    242e:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    2430:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    2432:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    2434:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    2436:	688a      	ldr	r2, [r1, #8]
    2438:	491e      	ldr	r1, [pc, #120]	; (24b4 <system_clock_source_xosc32k_set_config+0xac>)
    243a:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    243c:	2101      	movs	r1, #1
    243e:	464a      	mov	r2, r9
    2440:	0092      	lsls	r2, r2, #2
    2442:	4691      	mov	r9, r2
    2444:	2204      	movs	r2, #4
    2446:	4393      	bics	r3, r2
    2448:	464a      	mov	r2, r9
    244a:	4313      	orrs	r3, r2
    244c:	4642      	mov	r2, r8
    244e:	400a      	ands	r2, r1
    2450:	00d2      	lsls	r2, r2, #3
    2452:	4690      	mov	r8, r2
    2454:	2208      	movs	r2, #8
    2456:	4393      	bics	r3, r2
    2458:	4642      	mov	r2, r8
    245a:	4313      	orrs	r3, r2
    245c:	4662      	mov	r2, ip
    245e:	400a      	ands	r2, r1
    2460:	0112      	lsls	r2, r2, #4
    2462:	4694      	mov	ip, r2
    2464:	2210      	movs	r2, #16
    2466:	4393      	bics	r3, r2
    2468:	4662      	mov	r2, ip
    246a:	4313      	orrs	r3, r2
    246c:	4008      	ands	r0, r1
    246e:	0140      	lsls	r0, r0, #5
    2470:	2220      	movs	r2, #32
    2472:	4393      	bics	r3, r2
    2474:	4303      	orrs	r3, r0
    2476:	400f      	ands	r7, r1
    2478:	01bf      	lsls	r7, r7, #6
    247a:	2040      	movs	r0, #64	; 0x40
    247c:	4383      	bics	r3, r0
    247e:	433b      	orrs	r3, r7
    2480:	400e      	ands	r6, r1
    2482:	01f6      	lsls	r6, r6, #7
    2484:	3040      	adds	r0, #64	; 0x40
    2486:	4383      	bics	r3, r0
    2488:	4333      	orrs	r3, r6
    248a:	3879      	subs	r0, #121	; 0x79
    248c:	4005      	ands	r5, r0
    248e:	022d      	lsls	r5, r5, #8
    2490:	4809      	ldr	r0, [pc, #36]	; (24b8 <system_clock_source_xosc32k_set_config+0xb0>)
    2492:	4003      	ands	r3, r0
    2494:	432b      	orrs	r3, r5
    2496:	4021      	ands	r1, r4
    2498:	0309      	lsls	r1, r1, #12
    249a:	4808      	ldr	r0, [pc, #32]	; (24bc <system_clock_source_xosc32k_set_config+0xb4>)
    249c:	4003      	ands	r3, r0
    249e:	430b      	orrs	r3, r1
    24a0:	465a      	mov	r2, fp
    24a2:	8293      	strh	r3, [r2, #20]
}
    24a4:	bc3c      	pop	{r2, r3, r4, r5}
    24a6:	4690      	mov	r8, r2
    24a8:	4699      	mov	r9, r3
    24aa:	46a2      	mov	sl, r4
    24ac:	46ab      	mov	fp, r5
    24ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    24b0:	40000800 	.word	0x40000800
    24b4:	200002a0 	.word	0x200002a0
    24b8:	fffff8ff 	.word	0xfffff8ff
    24bc:	ffffefff 	.word	0xffffefff

000024c0 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    24c0:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    24c2:	7a03      	ldrb	r3, [r0, #8]
    24c4:	069b      	lsls	r3, r3, #26
    24c6:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    24c8:	8942      	ldrh	r2, [r0, #10]
    24ca:	0592      	lsls	r2, r2, #22
    24cc:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    24ce:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    24d0:	4918      	ldr	r1, [pc, #96]	; (2534 <system_clock_source_dfll_set_config+0x74>)
    24d2:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    24d4:	7983      	ldrb	r3, [r0, #6]
    24d6:	79c2      	ldrb	r2, [r0, #7]
    24d8:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    24da:	8842      	ldrh	r2, [r0, #2]
    24dc:	8884      	ldrh	r4, [r0, #4]
    24de:	4322      	orrs	r2, r4
    24e0:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    24e2:	7842      	ldrb	r2, [r0, #1]
    24e4:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    24e6:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    24e8:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    24ea:	7803      	ldrb	r3, [r0, #0]
    24ec:	2b04      	cmp	r3, #4
    24ee:	d011      	beq.n	2514 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    24f0:	2b20      	cmp	r3, #32
    24f2:	d10e      	bne.n	2512 <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    24f4:	7b03      	ldrb	r3, [r0, #12]
    24f6:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    24f8:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    24fa:	4313      	orrs	r3, r2
    24fc:	89c2      	ldrh	r2, [r0, #14]
    24fe:	0412      	lsls	r2, r2, #16
    2500:	490d      	ldr	r1, [pc, #52]	; (2538 <system_clock_source_dfll_set_config+0x78>)
    2502:	400a      	ands	r2, r1
    2504:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    2506:	4a0b      	ldr	r2, [pc, #44]	; (2534 <system_clock_source_dfll_set_config+0x74>)
    2508:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    250a:	6811      	ldr	r1, [r2, #0]
    250c:	4b0b      	ldr	r3, [pc, #44]	; (253c <system_clock_source_dfll_set_config+0x7c>)
    250e:	430b      	orrs	r3, r1
    2510:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    2512:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2514:	7b03      	ldrb	r3, [r0, #12]
    2516:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    2518:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    251a:	4313      	orrs	r3, r2
    251c:	89c2      	ldrh	r2, [r0, #14]
    251e:	0412      	lsls	r2, r2, #16
    2520:	4905      	ldr	r1, [pc, #20]	; (2538 <system_clock_source_dfll_set_config+0x78>)
    2522:	400a      	ands	r2, r1
    2524:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    2526:	4a03      	ldr	r2, [pc, #12]	; (2534 <system_clock_source_dfll_set_config+0x74>)
    2528:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    252a:	6813      	ldr	r3, [r2, #0]
    252c:	2104      	movs	r1, #4
    252e:	430b      	orrs	r3, r1
    2530:	6013      	str	r3, [r2, #0]
    2532:	e7ee      	b.n	2512 <system_clock_source_dfll_set_config+0x52>
    2534:	200002a0 	.word	0x200002a0
    2538:	03ff0000 	.word	0x03ff0000
    253c:	00000424 	.word	0x00000424

00002540 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    2540:	2808      	cmp	r0, #8
    2542:	d803      	bhi.n	254c <system_clock_source_enable+0xc>
    2544:	0080      	lsls	r0, r0, #2
    2546:	4b25      	ldr	r3, [pc, #148]	; (25dc <system_clock_source_enable+0x9c>)
    2548:	581b      	ldr	r3, [r3, r0]
    254a:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    254c:	2017      	movs	r0, #23
    254e:	e044      	b.n	25da <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    2550:	4a23      	ldr	r2, [pc, #140]	; (25e0 <system_clock_source_enable+0xa0>)
    2552:	6a13      	ldr	r3, [r2, #32]
    2554:	2102      	movs	r1, #2
    2556:	430b      	orrs	r3, r1
    2558:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    255a:	2000      	movs	r0, #0
    255c:	e03d      	b.n	25da <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    255e:	4a20      	ldr	r2, [pc, #128]	; (25e0 <system_clock_source_enable+0xa0>)
    2560:	6993      	ldr	r3, [r2, #24]
    2562:	2102      	movs	r1, #2
    2564:	430b      	orrs	r3, r1
    2566:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    2568:	2000      	movs	r0, #0
		break;
    256a:	e036      	b.n	25da <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    256c:	4a1c      	ldr	r2, [pc, #112]	; (25e0 <system_clock_source_enable+0xa0>)
    256e:	8a13      	ldrh	r3, [r2, #16]
    2570:	2102      	movs	r1, #2
    2572:	430b      	orrs	r3, r1
    2574:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    2576:	2000      	movs	r0, #0
		break;
    2578:	e02f      	b.n	25da <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    257a:	4a19      	ldr	r2, [pc, #100]	; (25e0 <system_clock_source_enable+0xa0>)
    257c:	8a93      	ldrh	r3, [r2, #20]
    257e:	2102      	movs	r1, #2
    2580:	430b      	orrs	r3, r1
    2582:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    2584:	2000      	movs	r0, #0
		break;
    2586:	e028      	b.n	25da <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    2588:	4916      	ldr	r1, [pc, #88]	; (25e4 <system_clock_source_enable+0xa4>)
    258a:	680b      	ldr	r3, [r1, #0]
    258c:	2202      	movs	r2, #2
    258e:	4313      	orrs	r3, r2
    2590:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    2592:	4b13      	ldr	r3, [pc, #76]	; (25e0 <system_clock_source_enable+0xa0>)
    2594:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2596:	0019      	movs	r1, r3
    2598:	320e      	adds	r2, #14
    259a:	68cb      	ldr	r3, [r1, #12]
    259c:	421a      	tst	r2, r3
    259e:	d0fc      	beq.n	259a <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    25a0:	4a10      	ldr	r2, [pc, #64]	; (25e4 <system_clock_source_enable+0xa4>)
    25a2:	6891      	ldr	r1, [r2, #8]
    25a4:	4b0e      	ldr	r3, [pc, #56]	; (25e0 <system_clock_source_enable+0xa0>)
    25a6:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    25a8:	6852      	ldr	r2, [r2, #4]
    25aa:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    25ac:	2200      	movs	r2, #0
    25ae:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    25b0:	0019      	movs	r1, r3
    25b2:	3210      	adds	r2, #16
    25b4:	68cb      	ldr	r3, [r1, #12]
    25b6:	421a      	tst	r2, r3
    25b8:	d0fc      	beq.n	25b4 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    25ba:	4b0a      	ldr	r3, [pc, #40]	; (25e4 <system_clock_source_enable+0xa4>)
    25bc:	681b      	ldr	r3, [r3, #0]
    25be:	b29b      	uxth	r3, r3
    25c0:	4a07      	ldr	r2, [pc, #28]	; (25e0 <system_clock_source_enable+0xa0>)
    25c2:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    25c4:	2000      	movs	r0, #0
    25c6:	e008      	b.n	25da <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    25c8:	4905      	ldr	r1, [pc, #20]	; (25e0 <system_clock_source_enable+0xa0>)
    25ca:	2244      	movs	r2, #68	; 0x44
    25cc:	5c8b      	ldrb	r3, [r1, r2]
    25ce:	2002      	movs	r0, #2
    25d0:	4303      	orrs	r3, r0
    25d2:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    25d4:	2000      	movs	r0, #0
		break;
    25d6:	e000      	b.n	25da <system_clock_source_enable+0x9a>
		return STATUS_OK;
    25d8:	2000      	movs	r0, #0
}
    25da:	4770      	bx	lr
    25dc:	00005bdc 	.word	0x00005bdc
    25e0:	40000800 	.word	0x40000800
    25e4:	200002a0 	.word	0x200002a0

000025e8 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    25e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    25ea:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    25ec:	22c2      	movs	r2, #194	; 0xc2
    25ee:	00d2      	lsls	r2, r2, #3
    25f0:	4b47      	ldr	r3, [pc, #284]	; (2710 <system_clock_init+0x128>)
    25f2:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    25f4:	4947      	ldr	r1, [pc, #284]	; (2714 <system_clock_init+0x12c>)
    25f6:	684b      	ldr	r3, [r1, #4]
    25f8:	221e      	movs	r2, #30
    25fa:	4393      	bics	r3, r2
    25fc:	3a1c      	subs	r2, #28
    25fe:	4313      	orrs	r3, r2
    2600:	604b      	str	r3, [r1, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    2602:	ab01      	add	r3, sp, #4
    2604:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2606:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    2608:	4d43      	ldr	r5, [pc, #268]	; (2718 <system_clock_init+0x130>)
    260a:	b2e0      	uxtb	r0, r4
    260c:	a901      	add	r1, sp, #4
    260e:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2610:	3401      	adds	r4, #1
    2612:	2c25      	cmp	r4, #37	; 0x25
    2614:	d1f9      	bne.n	260a <system_clock_init+0x22>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    2616:	a80a      	add	r0, sp, #40	; 0x28
    2618:	2300      	movs	r3, #0
    261a:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    261c:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    261e:	2280      	movs	r2, #128	; 0x80
    2620:	0212      	lsls	r2, r2, #8
    2622:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    2624:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    2626:	2201      	movs	r2, #1
    2628:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    262a:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    262c:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    262e:	3205      	adds	r2, #5
    2630:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    2632:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    2634:	4b39      	ldr	r3, [pc, #228]	; (271c <system_clock_init+0x134>)
    2636:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    2638:	2005      	movs	r0, #5
    263a:	4b39      	ldr	r3, [pc, #228]	; (2720 <system_clock_init+0x138>)
    263c:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    263e:	4934      	ldr	r1, [pc, #208]	; (2710 <system_clock_init+0x128>)
    2640:	2202      	movs	r2, #2
    2642:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    2644:	421a      	tst	r2, r3
    2646:	d0fc      	beq.n	2642 <system_clock_init+0x5a>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    2648:	4a31      	ldr	r2, [pc, #196]	; (2710 <system_clock_init+0x128>)
    264a:	8a93      	ldrh	r3, [r2, #20]
    264c:	2180      	movs	r1, #128	; 0x80
    264e:	430b      	orrs	r3, r1
    2650:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    2652:	ab05      	add	r3, sp, #20
    2654:	2100      	movs	r1, #0
    2656:	2200      	movs	r2, #0
    2658:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    265a:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    265c:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    265e:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    2660:	313f      	adds	r1, #63	; 0x3f
    2662:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    2664:	393b      	subs	r1, #59	; 0x3b
    2666:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    2668:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    266a:	4b2e      	ldr	r3, [pc, #184]	; (2724 <system_clock_init+0x13c>)
    266c:	681b      	ldr	r3, [r3, #0]
    266e:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    2670:	2b3f      	cmp	r3, #63	; 0x3f
    2672:	d04b      	beq.n	270c <system_clock_init+0x124>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    2674:	a805      	add	r0, sp, #20
    2676:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    2678:	23b7      	movs	r3, #183	; 0xb7
    267a:	00db      	lsls	r3, r3, #3
    267c:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    267e:	2307      	movs	r3, #7
    2680:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    2682:	3338      	adds	r3, #56	; 0x38
    2684:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    2686:	4b28      	ldr	r3, [pc, #160]	; (2728 <system_clock_init+0x140>)
    2688:	4798      	blx	r3
	config->run_in_standby  = false;
    268a:	a804      	add	r0, sp, #16
    268c:	2500      	movs	r5, #0
    268e:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    2690:	2601      	movs	r6, #1
    2692:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    2694:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    2696:	4b25      	ldr	r3, [pc, #148]	; (272c <system_clock_init+0x144>)
    2698:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    269a:	2006      	movs	r0, #6
    269c:	4f20      	ldr	r7, [pc, #128]	; (2720 <system_clock_init+0x138>)
    269e:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    26a0:	4b23      	ldr	r3, [pc, #140]	; (2730 <system_clock_init+0x148>)
    26a2:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    26a4:	ac01      	add	r4, sp, #4
    26a6:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    26a8:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    26aa:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    26ac:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    26ae:	2305      	movs	r3, #5
    26b0:	7023      	strb	r3, [r4, #0]
    26b2:	0021      	movs	r1, r4
    26b4:	2001      	movs	r0, #1
    26b6:	4b1f      	ldr	r3, [pc, #124]	; (2734 <system_clock_init+0x14c>)
    26b8:	4798      	blx	r3
    26ba:	2001      	movs	r0, #1
    26bc:	4b1e      	ldr	r3, [pc, #120]	; (2738 <system_clock_init+0x150>)
    26be:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    26c0:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    26c2:	0021      	movs	r1, r4
    26c4:	2000      	movs	r0, #0
    26c6:	4b14      	ldr	r3, [pc, #80]	; (2718 <system_clock_init+0x130>)
    26c8:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    26ca:	2000      	movs	r0, #0
    26cc:	4b1b      	ldr	r3, [pc, #108]	; (273c <system_clock_init+0x154>)
    26ce:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    26d0:	2007      	movs	r0, #7
    26d2:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    26d4:	490e      	ldr	r1, [pc, #56]	; (2710 <system_clock_init+0x128>)
    26d6:	22d0      	movs	r2, #208	; 0xd0
    26d8:	68cb      	ldr	r3, [r1, #12]
    26da:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    26dc:	2bd0      	cmp	r3, #208	; 0xd0
    26de:	d1fb      	bne.n	26d8 <system_clock_init+0xf0>
	PM->CPUSEL.reg = (uint32_t)divider;
    26e0:	4a17      	ldr	r2, [pc, #92]	; (2740 <system_clock_init+0x158>)
    26e2:	2300      	movs	r3, #0
    26e4:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    26e6:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    26e8:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    26ea:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    26ec:	a901      	add	r1, sp, #4
    26ee:	2201      	movs	r2, #1
    26f0:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    26f2:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    26f4:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    26f6:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    26f8:	3307      	adds	r3, #7
    26fa:	700b      	strb	r3, [r1, #0]
    26fc:	2000      	movs	r0, #0
    26fe:	4b0d      	ldr	r3, [pc, #52]	; (2734 <system_clock_init+0x14c>)
    2700:	4798      	blx	r3
    2702:	2000      	movs	r0, #0
    2704:	4b0c      	ldr	r3, [pc, #48]	; (2738 <system_clock_init+0x150>)
    2706:	4798      	blx	r3
#endif
}
    2708:	b00f      	add	sp, #60	; 0x3c
    270a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    270c:	3b20      	subs	r3, #32
    270e:	e7b1      	b.n	2674 <system_clock_init+0x8c>
    2710:	40000800 	.word	0x40000800
    2714:	41004000 	.word	0x41004000
    2718:	0000297d 	.word	0x0000297d
    271c:	00002409 	.word	0x00002409
    2720:	00002541 	.word	0x00002541
    2724:	00806024 	.word	0x00806024
    2728:	000024c1 	.word	0x000024c1
    272c:	000023cd 	.word	0x000023cd
    2730:	00002745 	.word	0x00002745
    2734:	00002769 	.word	0x00002769
    2738:	00002821 	.word	0x00002821
    273c:	000028f1 	.word	0x000028f1
    2740:	40000400 	.word	0x40000400

00002744 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    2744:	4a06      	ldr	r2, [pc, #24]	; (2760 <system_gclk_init+0x1c>)
    2746:	6993      	ldr	r3, [r2, #24]
    2748:	2108      	movs	r1, #8
    274a:	430b      	orrs	r3, r1
    274c:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    274e:	2201      	movs	r2, #1
    2750:	4b04      	ldr	r3, [pc, #16]	; (2764 <system_gclk_init+0x20>)
    2752:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    2754:	0019      	movs	r1, r3
    2756:	780b      	ldrb	r3, [r1, #0]
    2758:	4213      	tst	r3, r2
    275a:	d1fc      	bne.n	2756 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    275c:	4770      	bx	lr
    275e:	46c0      	nop			; (mov r8, r8)
    2760:	40000400 	.word	0x40000400
    2764:	40000c00 	.word	0x40000c00

00002768 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    2768:	b570      	push	{r4, r5, r6, lr}
    276a:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    276c:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    276e:	780d      	ldrb	r5, [r1, #0]
    2770:	022d      	lsls	r5, r5, #8
    2772:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    2774:	784b      	ldrb	r3, [r1, #1]
    2776:	2b00      	cmp	r3, #0
    2778:	d002      	beq.n	2780 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    277a:	2380      	movs	r3, #128	; 0x80
    277c:	02db      	lsls	r3, r3, #11
    277e:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    2780:	7a4b      	ldrb	r3, [r1, #9]
    2782:	2b00      	cmp	r3, #0
    2784:	d002      	beq.n	278c <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    2786:	2380      	movs	r3, #128	; 0x80
    2788:	031b      	lsls	r3, r3, #12
    278a:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    278c:	6848      	ldr	r0, [r1, #4]
    278e:	2801      	cmp	r0, #1
    2790:	d910      	bls.n	27b4 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    2792:	1e43      	subs	r3, r0, #1
    2794:	4218      	tst	r0, r3
    2796:	d134      	bne.n	2802 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    2798:	2802      	cmp	r0, #2
    279a:	d930      	bls.n	27fe <system_gclk_gen_set_config+0x96>
    279c:	2302      	movs	r3, #2
    279e:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    27a0:	3201      	adds	r2, #1
						mask <<= 1) {
    27a2:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    27a4:	4298      	cmp	r0, r3
    27a6:	d8fb      	bhi.n	27a0 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    27a8:	0212      	lsls	r2, r2, #8
    27aa:	4332      	orrs	r2, r6
    27ac:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    27ae:	2380      	movs	r3, #128	; 0x80
    27b0:	035b      	lsls	r3, r3, #13
    27b2:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    27b4:	7a0b      	ldrb	r3, [r1, #8]
    27b6:	2b00      	cmp	r3, #0
    27b8:	d002      	beq.n	27c0 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    27ba:	2380      	movs	r3, #128	; 0x80
    27bc:	039b      	lsls	r3, r3, #14
    27be:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    27c0:	4a13      	ldr	r2, [pc, #76]	; (2810 <system_gclk_gen_set_config+0xa8>)
    27c2:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    27c4:	b25b      	sxtb	r3, r3
    27c6:	2b00      	cmp	r3, #0
    27c8:	dbfb      	blt.n	27c2 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    27ca:	4b12      	ldr	r3, [pc, #72]	; (2814 <system_gclk_gen_set_config+0xac>)
    27cc:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    27ce:	4b12      	ldr	r3, [pc, #72]	; (2818 <system_gclk_gen_set_config+0xb0>)
    27d0:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    27d2:	4a0f      	ldr	r2, [pc, #60]	; (2810 <system_gclk_gen_set_config+0xa8>)
    27d4:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    27d6:	b25b      	sxtb	r3, r3
    27d8:	2b00      	cmp	r3, #0
    27da:	dbfb      	blt.n	27d4 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    27dc:	4b0c      	ldr	r3, [pc, #48]	; (2810 <system_gclk_gen_set_config+0xa8>)
    27de:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    27e0:	001a      	movs	r2, r3
    27e2:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    27e4:	b25b      	sxtb	r3, r3
    27e6:	2b00      	cmp	r3, #0
    27e8:	dbfb      	blt.n	27e2 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    27ea:	4a09      	ldr	r2, [pc, #36]	; (2810 <system_gclk_gen_set_config+0xa8>)
    27ec:	6853      	ldr	r3, [r2, #4]
    27ee:	2180      	movs	r1, #128	; 0x80
    27f0:	0249      	lsls	r1, r1, #9
    27f2:	400b      	ands	r3, r1
    27f4:	431d      	orrs	r5, r3
    27f6:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    27f8:	4b08      	ldr	r3, [pc, #32]	; (281c <system_gclk_gen_set_config+0xb4>)
    27fa:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    27fc:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    27fe:	2200      	movs	r2, #0
    2800:	e7d2      	b.n	27a8 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    2802:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    2804:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    2806:	2380      	movs	r3, #128	; 0x80
    2808:	029b      	lsls	r3, r3, #10
    280a:	431d      	orrs	r5, r3
    280c:	e7d2      	b.n	27b4 <system_gclk_gen_set_config+0x4c>
    280e:	46c0      	nop			; (mov r8, r8)
    2810:	40000c00 	.word	0x40000c00
    2814:	00001311 	.word	0x00001311
    2818:	40000c08 	.word	0x40000c08
    281c:	00001351 	.word	0x00001351

00002820 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    2820:	b510      	push	{r4, lr}
    2822:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2824:	4a0b      	ldr	r2, [pc, #44]	; (2854 <system_gclk_gen_enable+0x34>)
    2826:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2828:	b25b      	sxtb	r3, r3
    282a:	2b00      	cmp	r3, #0
    282c:	dbfb      	blt.n	2826 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    282e:	4b0a      	ldr	r3, [pc, #40]	; (2858 <system_gclk_gen_enable+0x38>)
    2830:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2832:	4b0a      	ldr	r3, [pc, #40]	; (285c <system_gclk_gen_enable+0x3c>)
    2834:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2836:	4a07      	ldr	r2, [pc, #28]	; (2854 <system_gclk_gen_enable+0x34>)
    2838:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    283a:	b25b      	sxtb	r3, r3
    283c:	2b00      	cmp	r3, #0
    283e:	dbfb      	blt.n	2838 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    2840:	4a04      	ldr	r2, [pc, #16]	; (2854 <system_gclk_gen_enable+0x34>)
    2842:	6851      	ldr	r1, [r2, #4]
    2844:	2380      	movs	r3, #128	; 0x80
    2846:	025b      	lsls	r3, r3, #9
    2848:	430b      	orrs	r3, r1
    284a:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    284c:	4b04      	ldr	r3, [pc, #16]	; (2860 <system_gclk_gen_enable+0x40>)
    284e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2850:	bd10      	pop	{r4, pc}
    2852:	46c0      	nop			; (mov r8, r8)
    2854:	40000c00 	.word	0x40000c00
    2858:	00001311 	.word	0x00001311
    285c:	40000c04 	.word	0x40000c04
    2860:	00001351 	.word	0x00001351

00002864 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    2864:	b570      	push	{r4, r5, r6, lr}
    2866:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2868:	4a1a      	ldr	r2, [pc, #104]	; (28d4 <system_gclk_gen_get_hz+0x70>)
    286a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    286c:	b25b      	sxtb	r3, r3
    286e:	2b00      	cmp	r3, #0
    2870:	dbfb      	blt.n	286a <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    2872:	4b19      	ldr	r3, [pc, #100]	; (28d8 <system_gclk_gen_get_hz+0x74>)
    2874:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2876:	4b19      	ldr	r3, [pc, #100]	; (28dc <system_gclk_gen_get_hz+0x78>)
    2878:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    287a:	4a16      	ldr	r2, [pc, #88]	; (28d4 <system_gclk_gen_get_hz+0x70>)
    287c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    287e:	b25b      	sxtb	r3, r3
    2880:	2b00      	cmp	r3, #0
    2882:	dbfb      	blt.n	287c <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    2884:	4e13      	ldr	r6, [pc, #76]	; (28d4 <system_gclk_gen_get_hz+0x70>)
    2886:	6870      	ldr	r0, [r6, #4]
    2888:	04c0      	lsls	r0, r0, #19
    288a:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    288c:	4b14      	ldr	r3, [pc, #80]	; (28e0 <system_gclk_gen_get_hz+0x7c>)
    288e:	4798      	blx	r3
    2890:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2892:	4b12      	ldr	r3, [pc, #72]	; (28dc <system_gclk_gen_get_hz+0x78>)
    2894:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    2896:	6876      	ldr	r6, [r6, #4]
    2898:	02f6      	lsls	r6, r6, #11
    289a:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    289c:	4b11      	ldr	r3, [pc, #68]	; (28e4 <system_gclk_gen_get_hz+0x80>)
    289e:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    28a0:	4a0c      	ldr	r2, [pc, #48]	; (28d4 <system_gclk_gen_get_hz+0x70>)
    28a2:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    28a4:	b25b      	sxtb	r3, r3
    28a6:	2b00      	cmp	r3, #0
    28a8:	dbfb      	blt.n	28a2 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    28aa:	4b0a      	ldr	r3, [pc, #40]	; (28d4 <system_gclk_gen_get_hz+0x70>)
    28ac:	689c      	ldr	r4, [r3, #8]
    28ae:	0224      	lsls	r4, r4, #8
    28b0:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    28b2:	4b0d      	ldr	r3, [pc, #52]	; (28e8 <system_gclk_gen_get_hz+0x84>)
    28b4:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    28b6:	2e00      	cmp	r6, #0
    28b8:	d107      	bne.n	28ca <system_gclk_gen_get_hz+0x66>
    28ba:	2c01      	cmp	r4, #1
    28bc:	d907      	bls.n	28ce <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    28be:	0021      	movs	r1, r4
    28c0:	0028      	movs	r0, r5
    28c2:	4b0a      	ldr	r3, [pc, #40]	; (28ec <system_gclk_gen_get_hz+0x88>)
    28c4:	4798      	blx	r3
    28c6:	0005      	movs	r5, r0
    28c8:	e001      	b.n	28ce <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    28ca:	3401      	adds	r4, #1
    28cc:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    28ce:	0028      	movs	r0, r5
    28d0:	bd70      	pop	{r4, r5, r6, pc}
    28d2:	46c0      	nop			; (mov r8, r8)
    28d4:	40000c00 	.word	0x40000c00
    28d8:	00001311 	.word	0x00001311
    28dc:	40000c04 	.word	0x40000c04
    28e0:	00002339 	.word	0x00002339
    28e4:	40000c08 	.word	0x40000c08
    28e8:	00001351 	.word	0x00001351
    28ec:	00003f39 	.word	0x00003f39

000028f0 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    28f0:	b510      	push	{r4, lr}
    28f2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    28f4:	4b06      	ldr	r3, [pc, #24]	; (2910 <system_gclk_chan_enable+0x20>)
    28f6:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    28f8:	4b06      	ldr	r3, [pc, #24]	; (2914 <system_gclk_chan_enable+0x24>)
    28fa:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    28fc:	4a06      	ldr	r2, [pc, #24]	; (2918 <system_gclk_chan_enable+0x28>)
    28fe:	8853      	ldrh	r3, [r2, #2]
    2900:	2180      	movs	r1, #128	; 0x80
    2902:	01c9      	lsls	r1, r1, #7
    2904:	430b      	orrs	r3, r1
    2906:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    2908:	4b04      	ldr	r3, [pc, #16]	; (291c <system_gclk_chan_enable+0x2c>)
    290a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    290c:	bd10      	pop	{r4, pc}
    290e:	46c0      	nop			; (mov r8, r8)
    2910:	00001311 	.word	0x00001311
    2914:	40000c02 	.word	0x40000c02
    2918:	40000c00 	.word	0x40000c00
    291c:	00001351 	.word	0x00001351

00002920 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    2920:	b510      	push	{r4, lr}
    2922:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2924:	4b0f      	ldr	r3, [pc, #60]	; (2964 <system_gclk_chan_disable+0x44>)
    2926:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2928:	4b0f      	ldr	r3, [pc, #60]	; (2968 <system_gclk_chan_disable+0x48>)
    292a:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    292c:	4a0f      	ldr	r2, [pc, #60]	; (296c <system_gclk_chan_disable+0x4c>)
    292e:	8853      	ldrh	r3, [r2, #2]
    2930:	051b      	lsls	r3, r3, #20
    2932:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    2934:	8853      	ldrh	r3, [r2, #2]
    2936:	490e      	ldr	r1, [pc, #56]	; (2970 <system_gclk_chan_disable+0x50>)
    2938:	400b      	ands	r3, r1
    293a:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    293c:	8853      	ldrh	r3, [r2, #2]
    293e:	490d      	ldr	r1, [pc, #52]	; (2974 <system_gclk_chan_disable+0x54>)
    2940:	400b      	ands	r3, r1
    2942:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    2944:	0011      	movs	r1, r2
    2946:	2280      	movs	r2, #128	; 0x80
    2948:	01d2      	lsls	r2, r2, #7
    294a:	884b      	ldrh	r3, [r1, #2]
    294c:	4213      	tst	r3, r2
    294e:	d1fc      	bne.n	294a <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    2950:	4906      	ldr	r1, [pc, #24]	; (296c <system_gclk_chan_disable+0x4c>)
    2952:	884a      	ldrh	r2, [r1, #2]
    2954:	0203      	lsls	r3, r0, #8
    2956:	4806      	ldr	r0, [pc, #24]	; (2970 <system_gclk_chan_disable+0x50>)
    2958:	4002      	ands	r2, r0
    295a:	4313      	orrs	r3, r2
    295c:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    295e:	4b06      	ldr	r3, [pc, #24]	; (2978 <system_gclk_chan_disable+0x58>)
    2960:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2962:	bd10      	pop	{r4, pc}
    2964:	00001311 	.word	0x00001311
    2968:	40000c02 	.word	0x40000c02
    296c:	40000c00 	.word	0x40000c00
    2970:	fffff0ff 	.word	0xfffff0ff
    2974:	ffffbfff 	.word	0xffffbfff
    2978:	00001351 	.word	0x00001351

0000297c <system_gclk_chan_set_config>:
{
    297c:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    297e:	780c      	ldrb	r4, [r1, #0]
    2980:	0224      	lsls	r4, r4, #8
    2982:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    2984:	4b02      	ldr	r3, [pc, #8]	; (2990 <system_gclk_chan_set_config+0x14>)
    2986:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    2988:	b2a4      	uxth	r4, r4
    298a:	4b02      	ldr	r3, [pc, #8]	; (2994 <system_gclk_chan_set_config+0x18>)
    298c:	805c      	strh	r4, [r3, #2]
}
    298e:	bd10      	pop	{r4, pc}
    2990:	00002921 	.word	0x00002921
    2994:	40000c00 	.word	0x40000c00

00002998 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    2998:	b510      	push	{r4, lr}
    299a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    299c:	4b06      	ldr	r3, [pc, #24]	; (29b8 <system_gclk_chan_get_hz+0x20>)
    299e:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    29a0:	4b06      	ldr	r3, [pc, #24]	; (29bc <system_gclk_chan_get_hz+0x24>)
    29a2:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    29a4:	4b06      	ldr	r3, [pc, #24]	; (29c0 <system_gclk_chan_get_hz+0x28>)
    29a6:	885c      	ldrh	r4, [r3, #2]
    29a8:	0524      	lsls	r4, r4, #20
    29aa:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    29ac:	4b05      	ldr	r3, [pc, #20]	; (29c4 <system_gclk_chan_get_hz+0x2c>)
    29ae:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    29b0:	0020      	movs	r0, r4
    29b2:	4b05      	ldr	r3, [pc, #20]	; (29c8 <system_gclk_chan_get_hz+0x30>)
    29b4:	4798      	blx	r3
}
    29b6:	bd10      	pop	{r4, pc}
    29b8:	00001311 	.word	0x00001311
    29bc:	40000c02 	.word	0x40000c02
    29c0:	40000c00 	.word	0x40000c00
    29c4:	00001351 	.word	0x00001351
    29c8:	00002865 	.word	0x00002865

000029cc <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    29cc:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    29ce:	78d3      	ldrb	r3, [r2, #3]
    29d0:	2b00      	cmp	r3, #0
    29d2:	d135      	bne.n	2a40 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    29d4:	7813      	ldrb	r3, [r2, #0]
    29d6:	2b80      	cmp	r3, #128	; 0x80
    29d8:	d029      	beq.n	2a2e <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    29da:	061b      	lsls	r3, r3, #24
    29dc:	2480      	movs	r4, #128	; 0x80
    29de:	0264      	lsls	r4, r4, #9
    29e0:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    29e2:	7854      	ldrb	r4, [r2, #1]
    29e4:	2502      	movs	r5, #2
    29e6:	43ac      	bics	r4, r5
    29e8:	d106      	bne.n	29f8 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    29ea:	7894      	ldrb	r4, [r2, #2]
    29ec:	2c00      	cmp	r4, #0
    29ee:	d120      	bne.n	2a32 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    29f0:	2480      	movs	r4, #128	; 0x80
    29f2:	02a4      	lsls	r4, r4, #10
    29f4:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    29f6:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    29f8:	7854      	ldrb	r4, [r2, #1]
    29fa:	3c01      	subs	r4, #1
    29fc:	2c01      	cmp	r4, #1
    29fe:	d91c      	bls.n	2a3a <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2a00:	040d      	lsls	r5, r1, #16
    2a02:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2a04:	24a0      	movs	r4, #160	; 0xa0
    2a06:	05e4      	lsls	r4, r4, #23
    2a08:	432c      	orrs	r4, r5
    2a0a:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2a0c:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    2a0e:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2a10:	24d0      	movs	r4, #208	; 0xd0
    2a12:	0624      	lsls	r4, r4, #24
    2a14:	432c      	orrs	r4, r5
    2a16:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2a18:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    2a1a:	78d4      	ldrb	r4, [r2, #3]
    2a1c:	2c00      	cmp	r4, #0
    2a1e:	d122      	bne.n	2a66 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    2a20:	035b      	lsls	r3, r3, #13
    2a22:	d51c      	bpl.n	2a5e <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    2a24:	7893      	ldrb	r3, [r2, #2]
    2a26:	2b01      	cmp	r3, #1
    2a28:	d01e      	beq.n	2a68 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    2a2a:	6141      	str	r1, [r0, #20]
    2a2c:	e017      	b.n	2a5e <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    2a2e:	2300      	movs	r3, #0
    2a30:	e7d7      	b.n	29e2 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    2a32:	24c0      	movs	r4, #192	; 0xc0
    2a34:	02e4      	lsls	r4, r4, #11
    2a36:	4323      	orrs	r3, r4
    2a38:	e7dd      	b.n	29f6 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    2a3a:	4c0d      	ldr	r4, [pc, #52]	; (2a70 <_system_pinmux_config+0xa4>)
    2a3c:	4023      	ands	r3, r4
    2a3e:	e7df      	b.n	2a00 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    2a40:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2a42:	040c      	lsls	r4, r1, #16
    2a44:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2a46:	23a0      	movs	r3, #160	; 0xa0
    2a48:	05db      	lsls	r3, r3, #23
    2a4a:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2a4c:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    2a4e:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2a50:	23d0      	movs	r3, #208	; 0xd0
    2a52:	061b      	lsls	r3, r3, #24
    2a54:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2a56:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    2a58:	78d3      	ldrb	r3, [r2, #3]
    2a5a:	2b00      	cmp	r3, #0
    2a5c:	d103      	bne.n	2a66 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2a5e:	7853      	ldrb	r3, [r2, #1]
    2a60:	3b01      	subs	r3, #1
    2a62:	2b01      	cmp	r3, #1
    2a64:	d902      	bls.n	2a6c <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    2a66:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    2a68:	6181      	str	r1, [r0, #24]
    2a6a:	e7f8      	b.n	2a5e <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    2a6c:	6081      	str	r1, [r0, #8]
}
    2a6e:	e7fa      	b.n	2a66 <_system_pinmux_config+0x9a>
    2a70:	fffbffff 	.word	0xfffbffff

00002a74 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    2a74:	b510      	push	{r4, lr}
    2a76:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    2a78:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    2a7a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    2a7c:	2900      	cmp	r1, #0
    2a7e:	d104      	bne.n	2a8a <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    2a80:	0943      	lsrs	r3, r0, #5
    2a82:	01db      	lsls	r3, r3, #7
    2a84:	4905      	ldr	r1, [pc, #20]	; (2a9c <system_pinmux_pin_set_config+0x28>)
    2a86:	468c      	mov	ip, r1
    2a88:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    2a8a:	241f      	movs	r4, #31
    2a8c:	4020      	ands	r0, r4
    2a8e:	2101      	movs	r1, #1
    2a90:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    2a92:	0018      	movs	r0, r3
    2a94:	4b02      	ldr	r3, [pc, #8]	; (2aa0 <system_pinmux_pin_set_config+0x2c>)
    2a96:	4798      	blx	r3
}
    2a98:	bd10      	pop	{r4, pc}
    2a9a:	46c0      	nop			; (mov r8, r8)
    2a9c:	41004400 	.word	0x41004400
    2aa0:	000029cd 	.word	0x000029cd

00002aa4 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    2aa4:	4770      	bx	lr
	...

00002aa8 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    2aa8:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    2aaa:	4b05      	ldr	r3, [pc, #20]	; (2ac0 <system_init+0x18>)
    2aac:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    2aae:	4b05      	ldr	r3, [pc, #20]	; (2ac4 <system_init+0x1c>)
    2ab0:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    2ab2:	4b05      	ldr	r3, [pc, #20]	; (2ac8 <system_init+0x20>)
    2ab4:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    2ab6:	4b05      	ldr	r3, [pc, #20]	; (2acc <system_init+0x24>)
    2ab8:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    2aba:	4b05      	ldr	r3, [pc, #20]	; (2ad0 <system_init+0x28>)
    2abc:	4798      	blx	r3
}
    2abe:	bd10      	pop	{r4, pc}
    2ac0:	000025e9 	.word	0x000025e9
    2ac4:	00001381 	.word	0x00001381
    2ac8:	00002aa5 	.word	0x00002aa5
    2acc:	00002aa5 	.word	0x00002aa5
    2ad0:	00002aa5 	.word	0x00002aa5

00002ad4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    2ad4:	e7fe      	b.n	2ad4 <Dummy_Handler>
	...

00002ad8 <Reset_Handler>:
{
    2ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    2ada:	4a2a      	ldr	r2, [pc, #168]	; (2b84 <Reset_Handler+0xac>)
    2adc:	4b2a      	ldr	r3, [pc, #168]	; (2b88 <Reset_Handler+0xb0>)
    2ade:	429a      	cmp	r2, r3
    2ae0:	d011      	beq.n	2b06 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    2ae2:	001a      	movs	r2, r3
    2ae4:	4b29      	ldr	r3, [pc, #164]	; (2b8c <Reset_Handler+0xb4>)
    2ae6:	429a      	cmp	r2, r3
    2ae8:	d20d      	bcs.n	2b06 <Reset_Handler+0x2e>
    2aea:	4a29      	ldr	r2, [pc, #164]	; (2b90 <Reset_Handler+0xb8>)
    2aec:	3303      	adds	r3, #3
    2aee:	1a9b      	subs	r3, r3, r2
    2af0:	089b      	lsrs	r3, r3, #2
    2af2:	3301      	adds	r3, #1
    2af4:	009b      	lsls	r3, r3, #2
    2af6:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    2af8:	4823      	ldr	r0, [pc, #140]	; (2b88 <Reset_Handler+0xb0>)
    2afa:	4922      	ldr	r1, [pc, #136]	; (2b84 <Reset_Handler+0xac>)
    2afc:	588c      	ldr	r4, [r1, r2]
    2afe:	5084      	str	r4, [r0, r2]
    2b00:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    2b02:	429a      	cmp	r2, r3
    2b04:	d1fa      	bne.n	2afc <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    2b06:	4a23      	ldr	r2, [pc, #140]	; (2b94 <Reset_Handler+0xbc>)
    2b08:	4b23      	ldr	r3, [pc, #140]	; (2b98 <Reset_Handler+0xc0>)
    2b0a:	429a      	cmp	r2, r3
    2b0c:	d20a      	bcs.n	2b24 <Reset_Handler+0x4c>
    2b0e:	43d3      	mvns	r3, r2
    2b10:	4921      	ldr	r1, [pc, #132]	; (2b98 <Reset_Handler+0xc0>)
    2b12:	185b      	adds	r3, r3, r1
    2b14:	2103      	movs	r1, #3
    2b16:	438b      	bics	r3, r1
    2b18:	3304      	adds	r3, #4
    2b1a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    2b1c:	2100      	movs	r1, #0
    2b1e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    2b20:	4293      	cmp	r3, r2
    2b22:	d1fc      	bne.n	2b1e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2b24:	4a1d      	ldr	r2, [pc, #116]	; (2b9c <Reset_Handler+0xc4>)
    2b26:	21ff      	movs	r1, #255	; 0xff
    2b28:	4b1d      	ldr	r3, [pc, #116]	; (2ba0 <Reset_Handler+0xc8>)
    2b2a:	438b      	bics	r3, r1
    2b2c:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    2b2e:	39fd      	subs	r1, #253	; 0xfd
    2b30:	2390      	movs	r3, #144	; 0x90
    2b32:	005b      	lsls	r3, r3, #1
    2b34:	4a1b      	ldr	r2, [pc, #108]	; (2ba4 <Reset_Handler+0xcc>)
    2b36:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    2b38:	4a1b      	ldr	r2, [pc, #108]	; (2ba8 <Reset_Handler+0xd0>)
    2b3a:	78d3      	ldrb	r3, [r2, #3]
    2b3c:	2503      	movs	r5, #3
    2b3e:	43ab      	bics	r3, r5
    2b40:	2402      	movs	r4, #2
    2b42:	4323      	orrs	r3, r4
    2b44:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    2b46:	78d3      	ldrb	r3, [r2, #3]
    2b48:	270c      	movs	r7, #12
    2b4a:	43bb      	bics	r3, r7
    2b4c:	2608      	movs	r6, #8
    2b4e:	4333      	orrs	r3, r6
    2b50:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    2b52:	4b16      	ldr	r3, [pc, #88]	; (2bac <Reset_Handler+0xd4>)
    2b54:	7b98      	ldrb	r0, [r3, #14]
    2b56:	2230      	movs	r2, #48	; 0x30
    2b58:	4390      	bics	r0, r2
    2b5a:	2220      	movs	r2, #32
    2b5c:	4310      	orrs	r0, r2
    2b5e:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    2b60:	7b99      	ldrb	r1, [r3, #14]
    2b62:	43b9      	bics	r1, r7
    2b64:	4331      	orrs	r1, r6
    2b66:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    2b68:	7b9a      	ldrb	r2, [r3, #14]
    2b6a:	43aa      	bics	r2, r5
    2b6c:	4322      	orrs	r2, r4
    2b6e:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    2b70:	4a0f      	ldr	r2, [pc, #60]	; (2bb0 <Reset_Handler+0xd8>)
    2b72:	6853      	ldr	r3, [r2, #4]
    2b74:	2180      	movs	r1, #128	; 0x80
    2b76:	430b      	orrs	r3, r1
    2b78:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    2b7a:	4b0e      	ldr	r3, [pc, #56]	; (2bb4 <Reset_Handler+0xdc>)
    2b7c:	4798      	blx	r3
        main();
    2b7e:	4b0e      	ldr	r3, [pc, #56]	; (2bb8 <Reset_Handler+0xe0>)
    2b80:	4798      	blx	r3
    2b82:	e7fe      	b.n	2b82 <Reset_Handler+0xaa>
    2b84:	00007884 	.word	0x00007884
    2b88:	20000000 	.word	0x20000000
    2b8c:	200001dc 	.word	0x200001dc
    2b90:	20000004 	.word	0x20000004
    2b94:	200001dc 	.word	0x200001dc
    2b98:	20000b74 	.word	0x20000b74
    2b9c:	e000ed00 	.word	0xe000ed00
    2ba0:	00000000 	.word	0x00000000
    2ba4:	41007000 	.word	0x41007000
    2ba8:	41005000 	.word	0x41005000
    2bac:	41004800 	.word	0x41004800
    2bb0:	41004000 	.word	0x41004000
    2bb4:	00004279 	.word	0x00004279
    2bb8:	00003e85 	.word	0x00003e85

00002bbc <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    2bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    2bbe:	46c6      	mov	lr, r8
    2bc0:	b500      	push	{lr}
    2bc2:	000c      	movs	r4, r1
    2bc4:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    2bc6:	2800      	cmp	r0, #0
    2bc8:	d10f      	bne.n	2bea <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    2bca:	2a00      	cmp	r2, #0
    2bcc:	dd11      	ble.n	2bf2 <_read+0x36>
    2bce:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    2bd0:	4e09      	ldr	r6, [pc, #36]	; (2bf8 <_read+0x3c>)
    2bd2:	4d0a      	ldr	r5, [pc, #40]	; (2bfc <_read+0x40>)
    2bd4:	6830      	ldr	r0, [r6, #0]
    2bd6:	0021      	movs	r1, r4
    2bd8:	682b      	ldr	r3, [r5, #0]
    2bda:	4798      	blx	r3
		ptr++;
    2bdc:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    2bde:	42bc      	cmp	r4, r7
    2be0:	d1f8      	bne.n	2bd4 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    2be2:	4640      	mov	r0, r8
    2be4:	bc04      	pop	{r2}
    2be6:	4690      	mov	r8, r2
    2be8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    2bea:	2301      	movs	r3, #1
    2bec:	425b      	negs	r3, r3
    2bee:	4698      	mov	r8, r3
    2bf0:	e7f7      	b.n	2be2 <_read+0x26>
	for (; len > 0; --len) {
    2bf2:	4680      	mov	r8, r0
    2bf4:	e7f5      	b.n	2be2 <_read+0x26>
    2bf6:	46c0      	nop			; (mov r8, r8)
    2bf8:	20000388 	.word	0x20000388
    2bfc:	20000380 	.word	0x20000380

00002c00 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    2c00:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c02:	46c6      	mov	lr, r8
    2c04:	b500      	push	{lr}
    2c06:	000e      	movs	r6, r1
    2c08:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    2c0a:	3801      	subs	r0, #1
    2c0c:	2802      	cmp	r0, #2
    2c0e:	d810      	bhi.n	2c32 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    2c10:	2a00      	cmp	r2, #0
    2c12:	d011      	beq.n	2c38 <_write+0x38>
    2c14:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    2c16:	4b0c      	ldr	r3, [pc, #48]	; (2c48 <_write+0x48>)
    2c18:	4698      	mov	r8, r3
    2c1a:	4f0c      	ldr	r7, [pc, #48]	; (2c4c <_write+0x4c>)
    2c1c:	4643      	mov	r3, r8
    2c1e:	6818      	ldr	r0, [r3, #0]
    2c20:	5d31      	ldrb	r1, [r6, r4]
    2c22:	683b      	ldr	r3, [r7, #0]
    2c24:	4798      	blx	r3
    2c26:	2800      	cmp	r0, #0
    2c28:	db08      	blt.n	2c3c <_write+0x3c>
			return -1;
		}
		++nChars;
    2c2a:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    2c2c:	42a5      	cmp	r5, r4
    2c2e:	d1f5      	bne.n	2c1c <_write+0x1c>
    2c30:	e006      	b.n	2c40 <_write+0x40>
		return -1;
    2c32:	2401      	movs	r4, #1
    2c34:	4264      	negs	r4, r4
    2c36:	e003      	b.n	2c40 <_write+0x40>
	for (; len != 0; --len) {
    2c38:	0014      	movs	r4, r2
    2c3a:	e001      	b.n	2c40 <_write+0x40>
			return -1;
    2c3c:	2401      	movs	r4, #1
    2c3e:	4264      	negs	r4, r4
	}
	return nChars;
}
    2c40:	0020      	movs	r0, r4
    2c42:	bc04      	pop	{r2}
    2c44:	4690      	mov	r8, r2
    2c46:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c48:	20000388 	.word	0x20000388
    2c4c:	20000384 	.word	0x20000384

00002c50 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    2c50:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    2c52:	4a06      	ldr	r2, [pc, #24]	; (2c6c <_sbrk+0x1c>)
    2c54:	6812      	ldr	r2, [r2, #0]
    2c56:	2a00      	cmp	r2, #0
    2c58:	d004      	beq.n	2c64 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    2c5a:	4a04      	ldr	r2, [pc, #16]	; (2c6c <_sbrk+0x1c>)
    2c5c:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    2c5e:	18c3      	adds	r3, r0, r3
    2c60:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    2c62:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    2c64:	4902      	ldr	r1, [pc, #8]	; (2c70 <_sbrk+0x20>)
    2c66:	4a01      	ldr	r2, [pc, #4]	; (2c6c <_sbrk+0x1c>)
    2c68:	6011      	str	r1, [r2, #0]
    2c6a:	e7f6      	b.n	2c5a <_sbrk+0xa>
    2c6c:	200002b8 	.word	0x200002b8
    2c70:	20002b78 	.word	0x20002b78

00002c74 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    2c74:	2001      	movs	r0, #1
    2c76:	4240      	negs	r0, r0
    2c78:	4770      	bx	lr

00002c7a <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    2c7a:	2380      	movs	r3, #128	; 0x80
    2c7c:	019b      	lsls	r3, r3, #6
    2c7e:	604b      	str	r3, [r1, #4]

	return 0;
}
    2c80:	2000      	movs	r0, #0
    2c82:	4770      	bx	lr

00002c84 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    2c84:	2001      	movs	r0, #1
    2c86:	4770      	bx	lr

00002c88 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    2c88:	2000      	movs	r0, #0
    2c8a:	4770      	bx	lr

00002c8c <drawChar>:
uint16_t xCharPos = 0;
uint16_t yCharPos = 0;


void drawChar(uint8_t character)
{
    2c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c8e:	46d6      	mov	lr, sl
    2c90:	464f      	mov	r7, r9
    2c92:	4646      	mov	r6, r8
    2c94:	b5c0      	push	{r6, r7, lr}
    2c96:	0004      	movs	r4, r0
	uint16_t x = xCharPos;
    2c98:	4b2a      	ldr	r3, [pc, #168]	; (2d44 <drawChar+0xb8>)
    2c9a:	881b      	ldrh	r3, [r3, #0]
	uint16_t y = yCharPos;
    2c9c:	4a2a      	ldr	r2, [pc, #168]	; (2d48 <drawChar+0xbc>)
    2c9e:	8815      	ldrh	r5, [r2, #0]
	
	consoleDisplay[xCharPos][yCharPos] = character;
    2ca0:	005a      	lsls	r2, r3, #1
    2ca2:	18d2      	adds	r2, r2, r3
    2ca4:	00d2      	lsls	r2, r2, #3
    2ca6:	4829      	ldr	r0, [pc, #164]	; (2d4c <drawChar+0xc0>)
    2ca8:	1882      	adds	r2, r0, r2
    2caa:	5554      	strb	r4, [r2, r5]
	
	REG_PORT_OUTCLR1 = LCD_CS;
    2cac:	2180      	movs	r1, #128	; 0x80
    2cae:	03c9      	lsls	r1, r1, #15
    2cb0:	4a27      	ldr	r2, [pc, #156]	; (2d50 <drawChar+0xc4>)
    2cb2:	6011      	str	r1, [r2, #0]
	setXY(x*10,y*20,x*10+9,y*20+19);
    2cb4:	0098      	lsls	r0, r3, #2
    2cb6:	181b      	adds	r3, r3, r0
    2cb8:	005b      	lsls	r3, r3, #1
    2cba:	b298      	uxth	r0, r3
    2cbc:	2114      	movs	r1, #20
    2cbe:	4369      	muls	r1, r5
    2cc0:	b289      	uxth	r1, r1
    2cc2:	000b      	movs	r3, r1
    2cc4:	3313      	adds	r3, #19
    2cc6:	b29b      	uxth	r3, r3
    2cc8:	0002      	movs	r2, r0
    2cca:	3209      	adds	r2, #9
    2ccc:	b292      	uxth	r2, r2
    2cce:	4d21      	ldr	r5, [pc, #132]	; (2d54 <drawChar+0xc8>)
    2cd0:	47a8      	blx	r5
    2cd2:	4a21      	ldr	r2, [pc, #132]	; (2d58 <drawChar+0xcc>)
    2cd4:	00a5      	lsls	r5, r4, #2
    2cd6:	192d      	adds	r5, r5, r4
    2cd8:	00ab      	lsls	r3, r5, #2
    2cda:	18ed      	adds	r5, r5, r3
    2cdc:	1955      	adds	r5, r2, r5
    2cde:	3401      	adds	r4, #1
    2ce0:	00a3      	lsls	r3, r4, #2
    2ce2:	191c      	adds	r4, r3, r4
    2ce4:	00a3      	lsls	r3, r4, #2
    2ce6:	18e4      	adds	r4, r4, r3
    2ce8:	4692      	mov	sl, r2
    2cea:	44a2      	add	sl, r4
			{
				setPixel((fore_Color_High<<8)|fore_Color_Low);	
			}
			else
			{
				setPixel((back_Color_High<<8)|back_Color_Low);
    2cec:	4b1b      	ldr	r3, [pc, #108]	; (2d5c <drawChar+0xd0>)
    2cee:	4699      	mov	r9, r3
    2cf0:	4b1b      	ldr	r3, [pc, #108]	; (2d60 <drawChar+0xd4>)
    2cf2:	4698      	mov	r8, r3
    2cf4:	4f1b      	ldr	r7, [pc, #108]	; (2d64 <drawChar+0xd8>)
				setPixel((fore_Color_High<<8)|fore_Color_Low);	
    2cf6:	4e1c      	ldr	r6, [pc, #112]	; (2d68 <drawChar+0xdc>)
    2cf8:	e019      	b.n	2d2e <drawChar+0xa2>
				setPixel((back_Color_High<<8)|back_Color_Low);
    2cfa:	464b      	mov	r3, r9
    2cfc:	8818      	ldrh	r0, [r3, #0]
    2cfe:	0200      	lsls	r0, r0, #8
    2d00:	4643      	mov	r3, r8
    2d02:	881b      	ldrh	r3, [r3, #0]
    2d04:	4318      	orrs	r0, r3
    2d06:	b280      	uxth	r0, r0
    2d08:	47b8      	blx	r7
		for(int j=0;j<8;j++)
    2d0a:	3c01      	subs	r4, #1
    2d0c:	d30c      	bcc.n	2d28 <drawChar+0x9c>
			if((CodePage437[character][i]&(1<<(7-j)))!=0)
    2d0e:	782b      	ldrb	r3, [r5, #0]
    2d10:	4123      	asrs	r3, r4
    2d12:	07db      	lsls	r3, r3, #31
    2d14:	d5f1      	bpl.n	2cfa <drawChar+0x6e>
				setPixel((fore_Color_High<<8)|fore_Color_Low);	
    2d16:	8830      	ldrh	r0, [r6, #0]
    2d18:	0200      	lsls	r0, r0, #8
    2d1a:	4b14      	ldr	r3, [pc, #80]	; (2d6c <drawChar+0xe0>)
    2d1c:	881b      	ldrh	r3, [r3, #0]
    2d1e:	4318      	orrs	r0, r3
    2d20:	b280      	uxth	r0, r0
    2d22:	4b10      	ldr	r3, [pc, #64]	; (2d64 <drawChar+0xd8>)
    2d24:	4798      	blx	r3
    2d26:	e7f0      	b.n	2d0a <drawChar+0x7e>
    2d28:	3501      	adds	r5, #1
	for(uint16_t i=0; i <= 24; i++)
    2d2a:	4555      	cmp	r5, sl
    2d2c:	d001      	beq.n	2d32 <drawChar+0xa6>
{
    2d2e:	2407      	movs	r4, #7
    2d30:	e7ed      	b.n	2d0e <drawChar+0x82>
			}

		}
	}
	REG_PORT_OUTSET1 = LCD_CS;
    2d32:	2280      	movs	r2, #128	; 0x80
    2d34:	03d2      	lsls	r2, r2, #15
    2d36:	4b0e      	ldr	r3, [pc, #56]	; (2d70 <drawChar+0xe4>)
    2d38:	601a      	str	r2, [r3, #0]
	

}
    2d3a:	bc1c      	pop	{r2, r3, r4}
    2d3c:	4690      	mov	r8, r2
    2d3e:	4699      	mov	r9, r3
    2d40:	46a2      	mov	sl, r4
    2d42:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2d44:	200002bc 	.word	0x200002bc
    2d48:	200002be 	.word	0x200002be
    2d4c:	200003c4 	.word	0x200003c4
    2d50:	41004494 	.word	0x41004494
    2d54:	000036b1 	.word	0x000036b1
    2d58:	00005c00 	.word	0x00005c00
    2d5c:	20000b4a 	.word	0x20000b4a
    2d60:	20000b44 	.word	0x20000b44
    2d64:	000037e9 	.word	0x000037e9
    2d68:	20000b46 	.word	0x20000b46
    2d6c:	20000b48 	.word	0x20000b48
    2d70:	41004498 	.word	0x41004498

00002d74 <blinkCursor>:
	*/
	
}

void blinkCursor(void)
{
    2d74:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d76:	46d6      	mov	lr, sl
    2d78:	464f      	mov	r7, r9
    2d7a:	4646      	mov	r6, r8
    2d7c:	b5c0      	push	{r6, r7, lr}
	uint16_t x = xCharPos;
    2d7e:	4b47      	ldr	r3, [pc, #284]	; (2e9c <blinkCursor+0x128>)
    2d80:	881b      	ldrh	r3, [r3, #0]
	uint16_t y = yCharPos;
    2d82:	4a47      	ldr	r2, [pc, #284]	; (2ea0 <blinkCursor+0x12c>)
    2d84:	8815      	ldrh	r5, [r2, #0]
	unsigned char character = consoleDisplay[x][y];
    2d86:	005a      	lsls	r2, r3, #1
    2d88:	18d2      	adds	r2, r2, r3
    2d8a:	00d2      	lsls	r2, r2, #3
    2d8c:	4845      	ldr	r0, [pc, #276]	; (2ea4 <blinkCursor+0x130>)
    2d8e:	1882      	adds	r2, r0, r2
    2d90:	5d54      	ldrb	r4, [r2, r5]
	setXY(x*10,y*20,x*10+9,y*20+19);
    2d92:	0098      	lsls	r0, r3, #2
    2d94:	181b      	adds	r3, r3, r0
    2d96:	005b      	lsls	r3, r3, #1
    2d98:	b298      	uxth	r0, r3
    2d9a:	2114      	movs	r1, #20
    2d9c:	4369      	muls	r1, r5
    2d9e:	b289      	uxth	r1, r1
    2da0:	000b      	movs	r3, r1
    2da2:	3313      	adds	r3, #19
    2da4:	b29b      	uxth	r3, r3
    2da6:	0002      	movs	r2, r0
    2da8:	3209      	adds	r2, #9
    2daa:	b292      	uxth	r2, r2
    2dac:	4d3e      	ldr	r5, [pc, #248]	; (2ea8 <blinkCursor+0x134>)
    2dae:	47a8      	blx	r5
	REG_PORT_OUTCLR1 = LCD_CS;
    2db0:	2280      	movs	r2, #128	; 0x80
    2db2:	03d2      	lsls	r2, r2, #15
    2db4:	4b3d      	ldr	r3, [pc, #244]	; (2eac <blinkCursor+0x138>)
    2db6:	601a      	str	r2, [r3, #0]
	if(cursorBlinkState)
    2db8:	4b3d      	ldr	r3, [pc, #244]	; (2eb0 <blinkCursor+0x13c>)
    2dba:	781b      	ldrb	r3, [r3, #0]
    2dbc:	2b00      	cmp	r3, #0
    2dbe:	d113      	bne.n	2de8 <blinkCursor+0x74>
    2dc0:	4a3c      	ldr	r2, [pc, #240]	; (2eb4 <blinkCursor+0x140>)
    2dc2:	00a5      	lsls	r5, r4, #2
    2dc4:	192d      	adds	r5, r5, r4
    2dc6:	00ab      	lsls	r3, r5, #2
    2dc8:	18ed      	adds	r5, r5, r3
    2dca:	1955      	adds	r5, r2, r5
    2dcc:	3401      	adds	r4, #1
    2dce:	00a3      	lsls	r3, r4, #2
    2dd0:	191c      	adds	r4, r3, r4
    2dd2:	00a3      	lsls	r3, r4, #2
    2dd4:	18e4      	adds	r4, r4, r3
    2dd6:	4692      	mov	sl, r2
    2dd8:	44a2      	add	sl, r4
				{
					setPixel((fore_Color_High<<8)|fore_Color_Low);
				}
				else
				{
					setPixel((back_Color_High<<8)|back_Color_Low);
    2dda:	4b37      	ldr	r3, [pc, #220]	; (2eb8 <blinkCursor+0x144>)
    2ddc:	4699      	mov	r9, r3
    2dde:	4b37      	ldr	r3, [pc, #220]	; (2ebc <blinkCursor+0x148>)
    2de0:	4698      	mov	r8, r3
    2de2:	4f37      	ldr	r7, [pc, #220]	; (2ec0 <blinkCursor+0x14c>)
					setPixel((fore_Color_High<<8)|fore_Color_Low);
    2de4:	4e37      	ldr	r6, [pc, #220]	; (2ec4 <blinkCursor+0x150>)
    2de6:	e049      	b.n	2e7c <blinkCursor+0x108>
    2de8:	4a32      	ldr	r2, [pc, #200]	; (2eb4 <blinkCursor+0x140>)
    2dea:	00a5      	lsls	r5, r4, #2
    2dec:	192d      	adds	r5, r5, r4
    2dee:	00ab      	lsls	r3, r5, #2
    2df0:	18ed      	adds	r5, r5, r3
    2df2:	1955      	adds	r5, r2, r5
    2df4:	3401      	adds	r4, #1
    2df6:	00a3      	lsls	r3, r4, #2
    2df8:	191c      	adds	r4, r3, r4
    2dfa:	00a3      	lsls	r3, r4, #2
    2dfc:	18e4      	adds	r4, r4, r3
    2dfe:	4692      	mov	sl, r2
    2e00:	44a2      	add	sl, r4
					setPixel((fore_Color_High<<8)|fore_Color_Low);
    2e02:	4b30      	ldr	r3, [pc, #192]	; (2ec4 <blinkCursor+0x150>)
    2e04:	4699      	mov	r9, r3
    2e06:	4b30      	ldr	r3, [pc, #192]	; (2ec8 <blinkCursor+0x154>)
    2e08:	4698      	mov	r8, r3
    2e0a:	4f2d      	ldr	r7, [pc, #180]	; (2ec0 <blinkCursor+0x14c>)
					setPixel((back_Color_High<<8)|back_Color_Low);
    2e0c:	4e2a      	ldr	r6, [pc, #168]	; (2eb8 <blinkCursor+0x144>)
    2e0e:	e019      	b.n	2e44 <blinkCursor+0xd0>
					setPixel((fore_Color_High<<8)|fore_Color_Low);
    2e10:	464b      	mov	r3, r9
    2e12:	8818      	ldrh	r0, [r3, #0]
    2e14:	0200      	lsls	r0, r0, #8
    2e16:	4643      	mov	r3, r8
    2e18:	881b      	ldrh	r3, [r3, #0]
    2e1a:	4318      	orrs	r0, r3
    2e1c:	b280      	uxth	r0, r0
    2e1e:	47b8      	blx	r7
			for(int j=0;j<8;j++)
    2e20:	3c01      	subs	r4, #1
    2e22:	d30c      	bcc.n	2e3e <blinkCursor+0xca>
				if((CodePage437[character][i]&(1<<(7-j)))!=0)
    2e24:	782b      	ldrb	r3, [r5, #0]
    2e26:	4123      	asrs	r3, r4
    2e28:	07db      	lsls	r3, r3, #31
    2e2a:	d5f1      	bpl.n	2e10 <blinkCursor+0x9c>
					setPixel((back_Color_High<<8)|back_Color_Low);
    2e2c:	8830      	ldrh	r0, [r6, #0]
    2e2e:	0200      	lsls	r0, r0, #8
    2e30:	4b22      	ldr	r3, [pc, #136]	; (2ebc <blinkCursor+0x148>)
    2e32:	881b      	ldrh	r3, [r3, #0]
    2e34:	4318      	orrs	r0, r3
    2e36:	b280      	uxth	r0, r0
    2e38:	4b21      	ldr	r3, [pc, #132]	; (2ec0 <blinkCursor+0x14c>)
    2e3a:	4798      	blx	r3
    2e3c:	e7f0      	b.n	2e20 <blinkCursor+0xac>
    2e3e:	3501      	adds	r5, #1
		for(uint16_t i=0; i <= 24; i++)
    2e40:	4555      	cmp	r5, sl
    2e42:	d01d      	beq.n	2e80 <blinkCursor+0x10c>
{
    2e44:	2407      	movs	r4, #7
    2e46:	e7ed      	b.n	2e24 <blinkCursor+0xb0>
					setPixel((back_Color_High<<8)|back_Color_Low);
    2e48:	464b      	mov	r3, r9
    2e4a:	8818      	ldrh	r0, [r3, #0]
    2e4c:	0200      	lsls	r0, r0, #8
    2e4e:	4643      	mov	r3, r8
    2e50:	881b      	ldrh	r3, [r3, #0]
    2e52:	4318      	orrs	r0, r3
    2e54:	b280      	uxth	r0, r0
    2e56:	47b8      	blx	r7
			for(int j=0;j<8;j++)
    2e58:	3c01      	subs	r4, #1
    2e5a:	d30c      	bcc.n	2e76 <blinkCursor+0x102>
				if((CodePage437[character][i]&(1<<(7-j)))!=0)
    2e5c:	782b      	ldrb	r3, [r5, #0]
    2e5e:	4123      	asrs	r3, r4
    2e60:	07db      	lsls	r3, r3, #31
    2e62:	d5f1      	bpl.n	2e48 <blinkCursor+0xd4>
					setPixel((fore_Color_High<<8)|fore_Color_Low);
    2e64:	8830      	ldrh	r0, [r6, #0]
    2e66:	0200      	lsls	r0, r0, #8
    2e68:	4b17      	ldr	r3, [pc, #92]	; (2ec8 <blinkCursor+0x154>)
    2e6a:	881b      	ldrh	r3, [r3, #0]
    2e6c:	4318      	orrs	r0, r3
    2e6e:	b280      	uxth	r0, r0
    2e70:	4b13      	ldr	r3, [pc, #76]	; (2ec0 <blinkCursor+0x14c>)
    2e72:	4798      	blx	r3
    2e74:	e7f0      	b.n	2e58 <blinkCursor+0xe4>
    2e76:	3501      	adds	r5, #1
		for(uint16_t i=0; i <= 24; i++)
    2e78:	4555      	cmp	r5, sl
    2e7a:	d001      	beq.n	2e80 <blinkCursor+0x10c>
{
    2e7c:	2407      	movs	r4, #7
    2e7e:	e7ed      	b.n	2e5c <blinkCursor+0xe8>
				}
			}
		}
	}

	REG_PORT_OUTSET1 = LCD_CS;
    2e80:	2280      	movs	r2, #128	; 0x80
    2e82:	03d2      	lsls	r2, r2, #15
    2e84:	4b11      	ldr	r3, [pc, #68]	; (2ecc <blinkCursor+0x158>)
    2e86:	601a      	str	r2, [r3, #0]
	
	//invert cursorBlinkState
	cursorBlinkState = !cursorBlinkState;
    2e88:	4a09      	ldr	r2, [pc, #36]	; (2eb0 <blinkCursor+0x13c>)
    2e8a:	7813      	ldrb	r3, [r2, #0]
    2e8c:	2101      	movs	r1, #1
    2e8e:	404b      	eors	r3, r1
    2e90:	7013      	strb	r3, [r2, #0]
	
}
    2e92:	bc1c      	pop	{r2, r3, r4}
    2e94:	4690      	mov	r8, r2
    2e96:	4699      	mov	r9, r3
    2e98:	46a2      	mov	sl, r4
    2e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2e9c:	200002bc 	.word	0x200002bc
    2ea0:	200002be 	.word	0x200002be
    2ea4:	200003c4 	.word	0x200003c4
    2ea8:	000036b1 	.word	0x000036b1
    2eac:	41004494 	.word	0x41004494
    2eb0:	20000024 	.word	0x20000024
    2eb4:	00005c00 	.word	0x00005c00
    2eb8:	20000b4a 	.word	0x20000b4a
    2ebc:	20000b44 	.word	0x20000b44
    2ec0:	000037e9 	.word	0x000037e9
    2ec4:	20000b46 	.word	0x20000b46
    2ec8:	20000b48 	.word	0x20000b48
    2ecc:	41004498 	.word	0x41004498

00002ed0 <newLine>:
{
    2ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ed2:	46de      	mov	lr, fp
    2ed4:	4657      	mov	r7, sl
    2ed6:	464e      	mov	r6, r9
    2ed8:	4645      	mov	r5, r8
    2eda:	b5e0      	push	{r5, r6, r7, lr}
    2edc:	b083      	sub	sp, #12
	int tempCursorx = xCharPos;
    2ede:	4b24      	ldr	r3, [pc, #144]	; (2f70 <newLine+0xa0>)
    2ee0:	881b      	ldrh	r3, [r3, #0]
    2ee2:	469b      	mov	fp, r3
	int tempCursory = yCharPos;
    2ee4:	4b23      	ldr	r3, [pc, #140]	; (2f74 <newLine+0xa4>)
    2ee6:	881b      	ldrh	r3, [r3, #0]
    2ee8:	9301      	str	r3, [sp, #4]
	cursorBlinkState = true;
    2eea:	2201      	movs	r2, #1
    2eec:	4b22      	ldr	r3, [pc, #136]	; (2f78 <newLine+0xa8>)
    2eee:	701a      	strb	r2, [r3, #0]
	blinkCursor();
    2ef0:	4b22      	ldr	r3, [pc, #136]	; (2f7c <newLine+0xac>)
    2ef2:	4798      	blx	r3
    2ef4:	4822      	ldr	r0, [pc, #136]	; (2f80 <newLine+0xb0>)
    2ef6:	0004      	movs	r4, r0
    2ef8:	3418      	adds	r4, #24
    2efa:	23f0      	movs	r3, #240	; 0xf0
    2efc:	00db      	lsls	r3, r3, #3
    2efe:	18c1      	adds	r1, r0, r3
{
    2f00:	0003      	movs	r3, r0
			consoleDisplay[i][j-1] = consoleDisplay[i][j];
    2f02:	785a      	ldrb	r2, [r3, #1]
    2f04:	701a      	strb	r2, [r3, #0]
    2f06:	3318      	adds	r3, #24
		for(int i = 0 ; i < 80 ; i++)
    2f08:	428b      	cmp	r3, r1
    2f0a:	d1fa      	bne.n	2f02 <newLine+0x32>
    2f0c:	3001      	adds	r0, #1
	for(int j = 1 ; j <= 24 ; j++)
    2f0e:	42a0      	cmp	r0, r4
    2f10:	d1f3      	bne.n	2efa <newLine+0x2a>
    2f12:	4b1c      	ldr	r3, [pc, #112]	; (2f84 <newLine+0xb4>)
    2f14:	22f0      	movs	r2, #240	; 0xf0
    2f16:	00d2      	lsls	r2, r2, #3
    2f18:	1899      	adds	r1, r3, r2
		consoleDisplay[k][23] = 0x20;
    2f1a:	2220      	movs	r2, #32
    2f1c:	701a      	strb	r2, [r3, #0]
    2f1e:	3318      	adds	r3, #24
	for(int k = 0 ; k < 80 ; k ++)
    2f20:	428b      	cmp	r3, r1
    2f22:	d1fb      	bne.n	2f1c <newLine+0x4c>
    2f24:	2600      	movs	r6, #0
    2f26:	4b16      	ldr	r3, [pc, #88]	; (2f80 <newLine+0xb0>)
    2f28:	469a      	mov	sl, r3
			xCharPos = i;
    2f2a:	4b11      	ldr	r3, [pc, #68]	; (2f70 <newLine+0xa0>)
    2f2c:	4699      	mov	r9, r3
			yCharPos = j;
    2f2e:	4b11      	ldr	r3, [pc, #68]	; (2f74 <newLine+0xa4>)
    2f30:	4698      	mov	r8, r3
    2f32:	4653      	mov	r3, sl
    2f34:	18f5      	adds	r5, r6, r3
{
    2f36:	2400      	movs	r4, #0
			drawChar(consoleDisplay[i][j]);
    2f38:	4f13      	ldr	r7, [pc, #76]	; (2f88 <newLine+0xb8>)
			xCharPos = i;
    2f3a:	464b      	mov	r3, r9
    2f3c:	801c      	strh	r4, [r3, #0]
			yCharPos = j;
    2f3e:	4643      	mov	r3, r8
    2f40:	801e      	strh	r6, [r3, #0]
			drawChar(consoleDisplay[i][j]);
    2f42:	7828      	ldrb	r0, [r5, #0]
    2f44:	47b8      	blx	r7
		for(int i = 0 ; i < 80 ; i++)
    2f46:	3401      	adds	r4, #1
    2f48:	3518      	adds	r5, #24
    2f4a:	2c50      	cmp	r4, #80	; 0x50
    2f4c:	d1f5      	bne.n	2f3a <newLine+0x6a>
	for(int j = 0 ; j < 24 ; j++)
    2f4e:	3601      	adds	r6, #1
    2f50:	2e18      	cmp	r6, #24
    2f52:	d1ee      	bne.n	2f32 <newLine+0x62>
	xCharPos = tempCursorx;
    2f54:	4b06      	ldr	r3, [pc, #24]	; (2f70 <newLine+0xa0>)
    2f56:	465a      	mov	r2, fp
    2f58:	801a      	strh	r2, [r3, #0]
	yCharPos = tempCursory;
    2f5a:	4b06      	ldr	r3, [pc, #24]	; (2f74 <newLine+0xa4>)
    2f5c:	466a      	mov	r2, sp
    2f5e:	8892      	ldrh	r2, [r2, #4]
    2f60:	801a      	strh	r2, [r3, #0]
}
    2f62:	b003      	add	sp, #12
    2f64:	bc3c      	pop	{r2, r3, r4, r5}
    2f66:	4690      	mov	r8, r2
    2f68:	4699      	mov	r9, r3
    2f6a:	46a2      	mov	sl, r4
    2f6c:	46ab      	mov	fp, r5
    2f6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2f70:	200002bc 	.word	0x200002bc
    2f74:	200002be 	.word	0x200002be
    2f78:	20000024 	.word	0x20000024
    2f7c:	00002d75 	.word	0x00002d75
    2f80:	200003c4 	.word	0x200003c4
    2f84:	200003db 	.word	0x200003db
    2f88:	00002c8d 	.word	0x00002c8d

00002f8c <writeString>:

void writeString(const char str[])
{
    2f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f8e:	46c6      	mov	lr, r8
    2f90:	b500      	push	{lr}
    2f92:	0005      	movs	r5, r0
	int length = strlen(str);
    2f94:	4b0c      	ldr	r3, [pc, #48]	; (2fc8 <writeString+0x3c>)
    2f96:	4798      	blx	r3
	for(int i = 0; i < length; i++)
    2f98:	2800      	cmp	r0, #0
    2f9a:	dd11      	ble.n	2fc0 <writeString+0x34>
    2f9c:	002c      	movs	r4, r5
    2f9e:	182d      	adds	r5, r5, r0
	{
		drawChar(str[i]);
    2fa0:	4f0a      	ldr	r7, [pc, #40]	; (2fcc <writeString+0x40>)
		if(xCharPos <= 80)
    2fa2:	4e0b      	ldr	r6, [pc, #44]	; (2fd0 <writeString+0x44>)
		xCharPos++;
    2fa4:	46b0      	mov	r8, r6
    2fa6:	e002      	b.n	2fae <writeString+0x22>
    2fa8:	3401      	adds	r4, #1
	for(int i = 0; i < length; i++)
    2faa:	42ac      	cmp	r4, r5
    2fac:	d008      	beq.n	2fc0 <writeString+0x34>
		drawChar(str[i]);
    2fae:	7820      	ldrb	r0, [r4, #0]
    2fb0:	47b8      	blx	r7
		if(xCharPos <= 80)
    2fb2:	8833      	ldrh	r3, [r6, #0]
    2fb4:	2b50      	cmp	r3, #80	; 0x50
    2fb6:	d8f7      	bhi.n	2fa8 <writeString+0x1c>
		xCharPos++;
    2fb8:	3301      	adds	r3, #1
    2fba:	4642      	mov	r2, r8
    2fbc:	8013      	strh	r3, [r2, #0]
    2fbe:	e7f3      	b.n	2fa8 <writeString+0x1c>
	}
}
    2fc0:	bc04      	pop	{r2}
    2fc2:	4690      	mov	r8, r2
    2fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2fc6:	46c0      	nop			; (mov r8, r8)
    2fc8:	00004709 	.word	0x00004709
    2fcc:	00002c8d 	.word	0x00002c8d
    2fd0:	200002bc 	.word	0x200002bc

00002fd4 <nullifyConsole>:

void nullifyConsole(void)
{
    2fd4:	4b08      	ldr	r3, [pc, #32]	; (2ff8 <nullifyConsole+0x24>)
    2fd6:	22f0      	movs	r2, #240	; 0xf0
    2fd8:	00d2      	lsls	r2, r2, #3
    2fda:	1898      	adds	r0, r3, r2
	for(int i = 0 ; i < 80 ; i++)
	{
		for(int j = 0 ; j < 24 ; j++)
		{
			consoleDisplay[i][j] = 0x00;
    2fdc:	2100      	movs	r1, #0
    2fde:	e002      	b.n	2fe6 <nullifyConsole+0x12>
    2fe0:	0013      	movs	r3, r2
	for(int i = 0 ; i < 80 ; i++)
    2fe2:	4290      	cmp	r0, r2
    2fe4:	d006      	beq.n	2ff4 <nullifyConsole+0x20>
    2fe6:	001a      	movs	r2, r3
    2fe8:	3218      	adds	r2, #24
			consoleDisplay[i][j] = 0x00;
    2fea:	7019      	strb	r1, [r3, #0]
    2fec:	3301      	adds	r3, #1
		for(int j = 0 ; j < 24 ; j++)
    2fee:	4293      	cmp	r3, r2
    2ff0:	d1fb      	bne.n	2fea <nullifyConsole+0x16>
    2ff2:	e7f5      	b.n	2fe0 <nullifyConsole+0xc>
		}
	}
}
    2ff4:	4770      	bx	lr
    2ff6:	46c0      	nop			; (mov r8, r8)
    2ff8:	200003c4 	.word	0x200003c4

00002ffc <scanCodesContains>:

bool scanCodesContains(int scanCode)
{
	for(int i = 0 ; i < 70 ; i++)
	{
		if(scanCodes[i] == scanCode)
    2ffc:	4b09      	ldr	r3, [pc, #36]	; (3024 <scanCodesContains+0x28>)
    2ffe:	681b      	ldr	r3, [r3, #0]
    3000:	4298      	cmp	r0, r3
    3002:	d00b      	beq.n	301c <scanCodesContains+0x20>
    3004:	4a07      	ldr	r2, [pc, #28]	; (3024 <scanCodesContains+0x28>)
    3006:	1d13      	adds	r3, r2, #4
    3008:	3219      	adds	r2, #25
    300a:	32ff      	adds	r2, #255	; 0xff
    300c:	6819      	ldr	r1, [r3, #0]
    300e:	4281      	cmp	r1, r0
    3010:	d006      	beq.n	3020 <scanCodesContains+0x24>
    3012:	3304      	adds	r3, #4
	for(int i = 0 ; i < 70 ; i++)
    3014:	4293      	cmp	r3, r2
    3016:	d1f9      	bne.n	300c <scanCodesContains+0x10>
		{
			return true;
		}
	}
	return false;
    3018:	2000      	movs	r0, #0
    301a:	e002      	b.n	3022 <scanCodesContains+0x26>
			return true;
    301c:	2001      	movs	r0, #1
    301e:	e000      	b.n	3022 <scanCodesContains+0x26>
    3020:	2001      	movs	r0, #1
}
    3022:	4770      	bx	lr
    3024:	20000050 	.word	0x20000050

00003028 <keyDown>:

bool keyDown(int scancode)
{
	for(int i = 0 ; i < 20 ; i++)
	{
		if(keyDownBuffer[i] == scancode)
    3028:	4b09      	ldr	r3, [pc, #36]	; (3050 <keyDown+0x28>)
    302a:	781b      	ldrb	r3, [r3, #0]
    302c:	4298      	cmp	r0, r3
    302e:	d00a      	beq.n	3046 <keyDown+0x1e>
    3030:	4907      	ldr	r1, [pc, #28]	; (3050 <keyDown+0x28>)
    3032:	1c4b      	adds	r3, r1, #1
    3034:	3114      	adds	r1, #20
    3036:	781a      	ldrb	r2, [r3, #0]
    3038:	4282      	cmp	r2, r0
    303a:	d006      	beq.n	304a <keyDown+0x22>
    303c:	3301      	adds	r3, #1
	for(int i = 0 ; i < 20 ; i++)
    303e:	428b      	cmp	r3, r1
    3040:	d1f9      	bne.n	3036 <keyDown+0xe>
		{
			return true;
		}	
	}
	return false;
    3042:	2000      	movs	r0, #0
}
    3044:	4770      	bx	lr
			return true;
    3046:	2001      	movs	r0, #1
    3048:	e7fc      	b.n	3044 <keyDown+0x1c>
    304a:	2001      	movs	r0, #1
    304c:	e7fa      	b.n	3044 <keyDown+0x1c>
    304e:	46c0      	nop			; (mov r8, r8)
    3050:	20000028 	.word	0x20000028

00003054 <printKeyboardBuffer>:
{
    3054:	b5f0      	push	{r4, r5, r6, r7, lr}
    3056:	46d6      	mov	lr, sl
    3058:	464f      	mov	r7, r9
    305a:	4646      	mov	r6, r8
    305c:	b5c0      	push	{r6, r7, lr}
    305e:	b0cc      	sub	sp, #304	; 0x130
	unsigned char noCase[] =
    3060:	4dca      	ldr	r5, [pc, #808]	; (338c <printKeyboardBuffer+0x338>)
    3062:	2246      	movs	r2, #70	; 0x46
    3064:	0029      	movs	r1, r5
    3066:	a83a      	add	r0, sp, #232	; 0xe8
    3068:	4cc9      	ldr	r4, [pc, #804]	; (3390 <printKeyboardBuffer+0x33c>)
    306a:	47a0      	blx	r4
	unsigned char shiftCase[] =
    306c:	0029      	movs	r1, r5
    306e:	3148      	adds	r1, #72	; 0x48
    3070:	2246      	movs	r2, #70	; 0x46
    3072:	a828      	add	r0, sp, #160	; 0xa0
    3074:	47a0      	blx	r4
	unsigned char capsLockCase[] =
    3076:	4dc7      	ldr	r5, [pc, #796]	; (3394 <printKeyboardBuffer+0x340>)
    3078:	0029      	movs	r1, r5
    307a:	3110      	adds	r1, #16
    307c:	2246      	movs	r2, #70	; 0x46
    307e:	a816      	add	r0, sp, #88	; 0x58
    3080:	47a0      	blx	r4
	unsigned char controlCase[] =
    3082:	0029      	movs	r1, r5
    3084:	3158      	adds	r1, #88	; 0x58
    3086:	2246      	movs	r2, #70	; 0x46
    3088:	a804      	add	r0, sp, #16
    308a:	47a0      	blx	r4
    308c:	4fc2      	ldr	r7, [pc, #776]	; (3398 <printKeyboardBuffer+0x344>)
    308e:	003c      	movs	r4, r7
    3090:	3414      	adds	r4, #20
    3092:	003d      	movs	r5, r7
	bool controled = false;
    3094:	2300      	movs	r3, #0
    3096:	9303      	str	r3, [sp, #12]
	bool shifted = false;
    3098:	9302      	str	r3, [sp, #8]
			controled = true;
    309a:	2201      	movs	r2, #1
    309c:	e004      	b.n	30a8 <printKeyboardBuffer+0x54>
		if(scanCodeBuffer[i] == 22)
    309e:	2916      	cmp	r1, #22
    30a0:	d011      	beq.n	30c6 <printKeyboardBuffer+0x72>
    30a2:	3501      	adds	r5, #1
	for(int i=0; i<20; i++)
    30a4:	42a5      	cmp	r5, r4
    30a6:	d010      	beq.n	30ca <printKeyboardBuffer+0x76>
		if((scanCodeBuffer[i] == 13) | (scanCodeBuffer[i] == 49))
    30a8:	7829      	ldrb	r1, [r5, #0]
    30aa:	000b      	movs	r3, r1
    30ac:	3b0d      	subs	r3, #13
    30ae:	425e      	negs	r6, r3
    30b0:	415e      	adcs	r6, r3
    30b2:	46b4      	mov	ip, r6
    30b4:	0008      	movs	r0, r1
    30b6:	3831      	subs	r0, #49	; 0x31
    30b8:	4243      	negs	r3, r0
    30ba:	4143      	adcs	r3, r0
    30bc:	4660      	mov	r0, ip
    30be:	4318      	orrs	r0, r3
    30c0:	d0ed      	beq.n	309e <printKeyboardBuffer+0x4a>
			shifted = true;
    30c2:	9002      	str	r0, [sp, #8]
    30c4:	e7eb      	b.n	309e <printKeyboardBuffer+0x4a>
			controled = true;
    30c6:	9203      	str	r2, [sp, #12]
    30c8:	e7eb      	b.n	30a2 <printKeyboardBuffer+0x4e>
    30ca:	4eb4      	ldr	r6, [pc, #720]	; (339c <printKeyboardBuffer+0x348>)
	for(int i=0; i<20; i++)
    30cc:	003c      	movs	r4, r7
		if(!keyDown(scanCodeBuffer[i]))
    30ce:	4bb4      	ldr	r3, [pc, #720]	; (33a0 <printKeyboardBuffer+0x34c>)
    30d0:	469a      	mov	sl, r3
    30d2:	e00b      	b.n	30ec <printKeyboardBuffer+0x98>
				sendChar(0x1B);
    30d4:	301b      	adds	r0, #27
    30d6:	4bb3      	ldr	r3, [pc, #716]	; (33a4 <printKeyboardBuffer+0x350>)
    30d8:	4798      	blx	r3
				if(localEcho)
    30da:	4bb3      	ldr	r3, [pc, #716]	; (33a8 <printKeyboardBuffer+0x354>)
    30dc:	781b      	ldrb	r3, [r3, #0]
    30de:	2b00      	cmp	r3, #0
    30e0:	d14a      	bne.n	3178 <printKeyboardBuffer+0x124>
    30e2:	3401      	adds	r4, #1
    30e4:	3601      	adds	r6, #1
	for(int i = 0 ; i < 20 ; i++)
    30e6:	42ac      	cmp	r4, r5
    30e8:	d100      	bne.n	30ec <printKeyboardBuffer+0x98>
    30ea:	e144      	b.n	3376 <printKeyboardBuffer+0x322>
    30ec:	9401      	str	r4, [sp, #4]
		if(!keyDown(scanCodeBuffer[i]))
    30ee:	7823      	ldrb	r3, [r4, #0]
    30f0:	4698      	mov	r8, r3
    30f2:	0018      	movs	r0, r3
    30f4:	47d0      	blx	sl
    30f6:	2800      	cmp	r0, #0
    30f8:	d1f3      	bne.n	30e2 <printKeyboardBuffer+0x8e>
			keyDownBuffer[i] = scanCodeBuffer[i];
    30fa:	4643      	mov	r3, r8
    30fc:	7033      	strb	r3, [r6, #0]
			if(scanCodeBuffer[i] == 0x00)  //this is escape
    30fe:	4643      	mov	r3, r8
    3100:	2b00      	cmp	r3, #0
    3102:	d0e7      	beq.n	30d4 <printKeyboardBuffer+0x80>
			else if(scanCodeBuffer[i] == 0x01)	//setup button, do something weird here
    3104:	4643      	mov	r3, r8
    3106:	2b01      	cmp	r3, #1
    3108:	d0eb      	beq.n	30e2 <printKeyboardBuffer+0x8e>
			else if(scanCodeBuffer[i] == 67)		//Break key, set by break enable in settings
    310a:	2b43      	cmp	r3, #67	; 0x43
    310c:	d03a      	beq.n	3184 <printKeyboardBuffer+0x130>
			else if(scanCodeBuffer[i] == 58)   //Return key
    310e:	4643      	mov	r3, r8
    3110:	2b3a      	cmp	r3, #58	; 0x3a
    3112:	d03f      	beq.n	3194 <printKeyboardBuffer+0x140>
			else if(scanCodeBuffer[i] == 12)		//caps lock
    3114:	4643      	mov	r3, r8
    3116:	2b0c      	cmp	r3, #12
    3118:	d078      	beq.n	320c <printKeyboardBuffer+0x1b8>
			else if(scanCodeBuffer[i] == 3)			//scroll lock
    311a:	4643      	mov	r3, r8
    311c:	2b03      	cmp	r3, #3
    311e:	d07b      	beq.n	3218 <printKeyboardBuffer+0x1c4>
			else if(scanCodeBuffer[i] == 35) //left
    3120:	4643      	mov	r3, r8
    3122:	2b23      	cmp	r3, #35	; 0x23
    3124:	d07e      	beq.n	3224 <printKeyboardBuffer+0x1d0>
			else if(scanCodeBuffer[i]  == 45)	//down
    3126:	4643      	mov	r3, r8
    3128:	2b2d      	cmp	r3, #45	; 0x2d
    312a:	d100      	bne.n	312e <printKeyboardBuffer+0xda>
    312c:	e097      	b.n	325e <printKeyboardBuffer+0x20a>
			else if(scanCodeBuffer[i]  == 55)	//up
    312e:	4643      	mov	r3, r8
    3130:	2b37      	cmp	r3, #55	; 0x37
    3132:	d100      	bne.n	3136 <printKeyboardBuffer+0xe2>
    3134:	e0b0      	b.n	3298 <printKeyboardBuffer+0x244>
			else if(scanCodeBuffer[i]  == 65)	//right
    3136:	4643      	mov	r3, r8
    3138:	2b41      	cmp	r3, #65	; 0x41
    313a:	d100      	bne.n	313e <printKeyboardBuffer+0xea>
    313c:	e0c9      	b.n	32d2 <printKeyboardBuffer+0x27e>
				if(controled)
    313e:	9b03      	ldr	r3, [sp, #12]
    3140:	2b00      	cmp	r3, #0
    3142:	d000      	beq.n	3146 <printKeyboardBuffer+0xf2>
    3144:	e0e2      	b.n	330c <printKeyboardBuffer+0x2b8>
				else if(capsLock)
    3146:	4b99      	ldr	r3, [pc, #612]	; (33ac <printKeyboardBuffer+0x358>)
    3148:	781b      	ldrb	r3, [r3, #0]
    314a:	2b00      	cmp	r3, #0
    314c:	d000      	beq.n	3150 <printKeyboardBuffer+0xfc>
    314e:	e0f0      	b.n	3332 <printKeyboardBuffer+0x2de>
				else if(shifted)
    3150:	9b02      	ldr	r3, [sp, #8]
    3152:	2b00      	cmp	r3, #0
    3154:	d100      	bne.n	3158 <printKeyboardBuffer+0x104>
    3156:	e0fd      	b.n	3354 <printKeyboardBuffer+0x300>
					sendChar(shiftCase[scanCodeBuffer[i]]);
    3158:	ab28      	add	r3, sp, #160	; 0xa0
    315a:	4642      	mov	r2, r8
    315c:	5c98      	ldrb	r0, [r3, r2]
    315e:	4b91      	ldr	r3, [pc, #580]	; (33a4 <printKeyboardBuffer+0x350>)
    3160:	4798      	blx	r3
					if(localEcho)
    3162:	4b91      	ldr	r3, [pc, #580]	; (33a8 <printKeyboardBuffer+0x354>)
    3164:	781b      	ldrb	r3, [r3, #0]
    3166:	2b00      	cmp	r3, #0
    3168:	d0bb      	beq.n	30e2 <printKeyboardBuffer+0x8e>
						parseChar(shiftCase[scanCodeBuffer[i]]);
    316a:	9b01      	ldr	r3, [sp, #4]
    316c:	781b      	ldrb	r3, [r3, #0]
    316e:	aa28      	add	r2, sp, #160	; 0xa0
    3170:	5cd0      	ldrb	r0, [r2, r3]
    3172:	4b8f      	ldr	r3, [pc, #572]	; (33b0 <printKeyboardBuffer+0x35c>)
    3174:	4798      	blx	r3
    3176:	e7b4      	b.n	30e2 <printKeyboardBuffer+0x8e>
					ring_put(ouroboros,0x1B);
    3178:	4b8e      	ldr	r3, [pc, #568]	; (33b4 <printKeyboardBuffer+0x360>)
    317a:	6818      	ldr	r0, [r3, #0]
    317c:	211b      	movs	r1, #27
    317e:	4b8e      	ldr	r3, [pc, #568]	; (33b8 <printKeyboardBuffer+0x364>)
    3180:	4798      	blx	r3
    3182:	e7ae      	b.n	30e2 <printKeyboardBuffer+0x8e>
				if(breakEnable)
    3184:	4b8d      	ldr	r3, [pc, #564]	; (33bc <printKeyboardBuffer+0x368>)
    3186:	781b      	ldrb	r3, [r3, #0]
    3188:	2b00      	cmp	r3, #0
    318a:	d0aa      	beq.n	30e2 <printKeyboardBuffer+0x8e>
					sendChar(0x00);
    318c:	2000      	movs	r0, #0
    318e:	4b85      	ldr	r3, [pc, #532]	; (33a4 <printKeyboardBuffer+0x350>)
    3190:	4798      	blx	r3
    3192:	e7a6      	b.n	30e2 <printKeyboardBuffer+0x8e>
				if(lineFeedNewLine == 1)  //This is Windows; CRLF
    3194:	4b8a      	ldr	r3, [pc, #552]	; (33c0 <printKeyboardBuffer+0x36c>)
    3196:	681b      	ldr	r3, [r3, #0]
    3198:	2b01      	cmp	r3, #1
    319a:	d014      	beq.n	31c6 <printKeyboardBuffer+0x172>
				if(lineFeedNewLine == 2)  //This is Unix, sends LF
    319c:	4b88      	ldr	r3, [pc, #544]	; (33c0 <printKeyboardBuffer+0x36c>)
    319e:	681b      	ldr	r3, [r3, #0]
    31a0:	2b02      	cmp	r3, #2
    31a2:	d026      	beq.n	31f2 <printKeyboardBuffer+0x19e>
				if(lineFeedNewLine == 3)  //This is classic mac, sends CR
    31a4:	4b86      	ldr	r3, [pc, #536]	; (33c0 <printKeyboardBuffer+0x36c>)
    31a6:	681b      	ldr	r3, [r3, #0]
    31a8:	2b03      	cmp	r3, #3
    31aa:	d19a      	bne.n	30e2 <printKeyboardBuffer+0x8e>
					sendChar(0x0D);
    31ac:	200d      	movs	r0, #13
    31ae:	4b7d      	ldr	r3, [pc, #500]	; (33a4 <printKeyboardBuffer+0x350>)
    31b0:	4798      	blx	r3
					if(localEcho)
    31b2:	4b7d      	ldr	r3, [pc, #500]	; (33a8 <printKeyboardBuffer+0x354>)
    31b4:	781b      	ldrb	r3, [r3, #0]
    31b6:	2b00      	cmp	r3, #0
    31b8:	d093      	beq.n	30e2 <printKeyboardBuffer+0x8e>
						ring_put(ouroboros, 0x0D);
    31ba:	4b7e      	ldr	r3, [pc, #504]	; (33b4 <printKeyboardBuffer+0x360>)
    31bc:	6818      	ldr	r0, [r3, #0]
    31be:	210d      	movs	r1, #13
    31c0:	4b7d      	ldr	r3, [pc, #500]	; (33b8 <printKeyboardBuffer+0x364>)
    31c2:	4798      	blx	r3
    31c4:	e78d      	b.n	30e2 <printKeyboardBuffer+0x8e>
					sendChar(0x0D);
    31c6:	200d      	movs	r0, #13
    31c8:	4b76      	ldr	r3, [pc, #472]	; (33a4 <printKeyboardBuffer+0x350>)
    31ca:	4698      	mov	r8, r3
    31cc:	4798      	blx	r3
					sendChar(0x0A);
    31ce:	200a      	movs	r0, #10
    31d0:	47c0      	blx	r8
					if(localEcho)
    31d2:	4b75      	ldr	r3, [pc, #468]	; (33a8 <printKeyboardBuffer+0x354>)
    31d4:	781b      	ldrb	r3, [r3, #0]
    31d6:	2b00      	cmp	r3, #0
    31d8:	d0e0      	beq.n	319c <printKeyboardBuffer+0x148>
						ring_put(ouroboros, 0x0D);
    31da:	4b76      	ldr	r3, [pc, #472]	; (33b4 <printKeyboardBuffer+0x360>)
    31dc:	4699      	mov	r9, r3
    31de:	210d      	movs	r1, #13
    31e0:	6818      	ldr	r0, [r3, #0]
    31e2:	4b75      	ldr	r3, [pc, #468]	; (33b8 <printKeyboardBuffer+0x364>)
    31e4:	4698      	mov	r8, r3
    31e6:	4798      	blx	r3
						ring_put(ouroboros, 0x0A);
    31e8:	464b      	mov	r3, r9
    31ea:	6818      	ldr	r0, [r3, #0]
    31ec:	210a      	movs	r1, #10
    31ee:	47c0      	blx	r8
    31f0:	e7d4      	b.n	319c <printKeyboardBuffer+0x148>
					sendChar(0x0A);
    31f2:	200a      	movs	r0, #10
    31f4:	4b6b      	ldr	r3, [pc, #428]	; (33a4 <printKeyboardBuffer+0x350>)
    31f6:	4798      	blx	r3
					if(localEcho)
    31f8:	4b6b      	ldr	r3, [pc, #428]	; (33a8 <printKeyboardBuffer+0x354>)
    31fa:	781b      	ldrb	r3, [r3, #0]
    31fc:	2b00      	cmp	r3, #0
    31fe:	d0d1      	beq.n	31a4 <printKeyboardBuffer+0x150>
						ring_put(ouroboros, 0x0A);
    3200:	4b6c      	ldr	r3, [pc, #432]	; (33b4 <printKeyboardBuffer+0x360>)
    3202:	6818      	ldr	r0, [r3, #0]
    3204:	210a      	movs	r1, #10
    3206:	4b6c      	ldr	r3, [pc, #432]	; (33b8 <printKeyboardBuffer+0x364>)
    3208:	4798      	blx	r3
    320a:	e7cb      	b.n	31a4 <printKeyboardBuffer+0x150>
				capsLock = !capsLock;
    320c:	4a67      	ldr	r2, [pc, #412]	; (33ac <printKeyboardBuffer+0x358>)
    320e:	7813      	ldrb	r3, [r2, #0]
    3210:	2101      	movs	r1, #1
    3212:	404b      	eors	r3, r1
    3214:	7013      	strb	r3, [r2, #0]
    3216:	e764      	b.n	30e2 <printKeyboardBuffer+0x8e>
				scrollLock = !scrollLock;
    3218:	4a6a      	ldr	r2, [pc, #424]	; (33c4 <printKeyboardBuffer+0x370>)
    321a:	7813      	ldrb	r3, [r2, #0]
    321c:	2101      	movs	r1, #1
    321e:	404b      	eors	r3, r1
    3220:	7013      	strb	r3, [r2, #0]
    3222:	e75e      	b.n	30e2 <printKeyboardBuffer+0x8e>
				sendChar(0x1B);
    3224:	201b      	movs	r0, #27
    3226:	4b5f      	ldr	r3, [pc, #380]	; (33a4 <printKeyboardBuffer+0x350>)
    3228:	4698      	mov	r8, r3
    322a:	4798      	blx	r3
				sendChar(0x5B);
    322c:	205b      	movs	r0, #91	; 0x5b
    322e:	47c0      	blx	r8
				sendChar(0x44);
    3230:	2044      	movs	r0, #68	; 0x44
    3232:	47c0      	blx	r8
				if(localEcho)
    3234:	4b5c      	ldr	r3, [pc, #368]	; (33a8 <printKeyboardBuffer+0x354>)
    3236:	781b      	ldrb	r3, [r3, #0]
    3238:	2b00      	cmp	r3, #0
    323a:	d100      	bne.n	323e <printKeyboardBuffer+0x1ea>
    323c:	e751      	b.n	30e2 <printKeyboardBuffer+0x8e>
					ring_put(ouroboros, 0x1B);
    323e:	4b5d      	ldr	r3, [pc, #372]	; (33b4 <printKeyboardBuffer+0x360>)
    3240:	4699      	mov	r9, r3
    3242:	211b      	movs	r1, #27
    3244:	6818      	ldr	r0, [r3, #0]
    3246:	4b5c      	ldr	r3, [pc, #368]	; (33b8 <printKeyboardBuffer+0x364>)
    3248:	4698      	mov	r8, r3
    324a:	4798      	blx	r3
					ring_put(ouroboros, 0x5B);
    324c:	215b      	movs	r1, #91	; 0x5b
    324e:	464b      	mov	r3, r9
    3250:	6818      	ldr	r0, [r3, #0]
    3252:	47c0      	blx	r8
					ring_put(ouroboros, 0x44);
    3254:	464b      	mov	r3, r9
    3256:	6818      	ldr	r0, [r3, #0]
    3258:	2144      	movs	r1, #68	; 0x44
    325a:	47c0      	blx	r8
    325c:	e741      	b.n	30e2 <printKeyboardBuffer+0x8e>
				sendChar(0x1B);
    325e:	201b      	movs	r0, #27
    3260:	4b50      	ldr	r3, [pc, #320]	; (33a4 <printKeyboardBuffer+0x350>)
    3262:	4698      	mov	r8, r3
    3264:	4798      	blx	r3
				sendChar(0x5B);
    3266:	205b      	movs	r0, #91	; 0x5b
    3268:	47c0      	blx	r8
				sendChar(0x42);
    326a:	2042      	movs	r0, #66	; 0x42
    326c:	47c0      	blx	r8
				if(localEcho)
    326e:	4b4e      	ldr	r3, [pc, #312]	; (33a8 <printKeyboardBuffer+0x354>)
    3270:	781b      	ldrb	r3, [r3, #0]
    3272:	2b00      	cmp	r3, #0
    3274:	d100      	bne.n	3278 <printKeyboardBuffer+0x224>
    3276:	e734      	b.n	30e2 <printKeyboardBuffer+0x8e>
					ring_put(ouroboros, 0x1B);
    3278:	4b4e      	ldr	r3, [pc, #312]	; (33b4 <printKeyboardBuffer+0x360>)
    327a:	4699      	mov	r9, r3
    327c:	211b      	movs	r1, #27
    327e:	6818      	ldr	r0, [r3, #0]
    3280:	4b4d      	ldr	r3, [pc, #308]	; (33b8 <printKeyboardBuffer+0x364>)
    3282:	4698      	mov	r8, r3
    3284:	4798      	blx	r3
					ring_put(ouroboros, 0x5B);
    3286:	215b      	movs	r1, #91	; 0x5b
    3288:	464b      	mov	r3, r9
    328a:	6818      	ldr	r0, [r3, #0]
    328c:	47c0      	blx	r8
					ring_put(ouroboros, 0x42);
    328e:	464b      	mov	r3, r9
    3290:	6818      	ldr	r0, [r3, #0]
    3292:	2142      	movs	r1, #66	; 0x42
    3294:	47c0      	blx	r8
    3296:	e724      	b.n	30e2 <printKeyboardBuffer+0x8e>
				sendChar(0x1B);
    3298:	201b      	movs	r0, #27
    329a:	4b42      	ldr	r3, [pc, #264]	; (33a4 <printKeyboardBuffer+0x350>)
    329c:	4698      	mov	r8, r3
    329e:	4798      	blx	r3
				sendChar(0x5B);
    32a0:	205b      	movs	r0, #91	; 0x5b
    32a2:	47c0      	blx	r8
				sendChar(0x41);
    32a4:	2041      	movs	r0, #65	; 0x41
    32a6:	47c0      	blx	r8
				if(localEcho)
    32a8:	4b3f      	ldr	r3, [pc, #252]	; (33a8 <printKeyboardBuffer+0x354>)
    32aa:	781b      	ldrb	r3, [r3, #0]
    32ac:	2b00      	cmp	r3, #0
    32ae:	d100      	bne.n	32b2 <printKeyboardBuffer+0x25e>
    32b0:	e717      	b.n	30e2 <printKeyboardBuffer+0x8e>
					ring_put(ouroboros, 0x1B);
    32b2:	4b40      	ldr	r3, [pc, #256]	; (33b4 <printKeyboardBuffer+0x360>)
    32b4:	4699      	mov	r9, r3
    32b6:	211b      	movs	r1, #27
    32b8:	6818      	ldr	r0, [r3, #0]
    32ba:	4b3f      	ldr	r3, [pc, #252]	; (33b8 <printKeyboardBuffer+0x364>)
    32bc:	4698      	mov	r8, r3
    32be:	4798      	blx	r3
					ring_put(ouroboros, 0x5B);
    32c0:	215b      	movs	r1, #91	; 0x5b
    32c2:	464b      	mov	r3, r9
    32c4:	6818      	ldr	r0, [r3, #0]
    32c6:	47c0      	blx	r8
					ring_put(ouroboros, 0x41);
    32c8:	464b      	mov	r3, r9
    32ca:	6818      	ldr	r0, [r3, #0]
    32cc:	2141      	movs	r1, #65	; 0x41
    32ce:	47c0      	blx	r8
    32d0:	e707      	b.n	30e2 <printKeyboardBuffer+0x8e>
				sendChar(0x1B);
    32d2:	201b      	movs	r0, #27
    32d4:	4b33      	ldr	r3, [pc, #204]	; (33a4 <printKeyboardBuffer+0x350>)
    32d6:	4698      	mov	r8, r3
    32d8:	4798      	blx	r3
				sendChar(0x5B);
    32da:	205b      	movs	r0, #91	; 0x5b
    32dc:	47c0      	blx	r8
				sendChar(0x43);
    32de:	2043      	movs	r0, #67	; 0x43
    32e0:	47c0      	blx	r8
				if(localEcho)
    32e2:	4b31      	ldr	r3, [pc, #196]	; (33a8 <printKeyboardBuffer+0x354>)
    32e4:	781b      	ldrb	r3, [r3, #0]
    32e6:	2b00      	cmp	r3, #0
    32e8:	d100      	bne.n	32ec <printKeyboardBuffer+0x298>
    32ea:	e6fa      	b.n	30e2 <printKeyboardBuffer+0x8e>
					ring_put(ouroboros, 0x1B);
    32ec:	4b31      	ldr	r3, [pc, #196]	; (33b4 <printKeyboardBuffer+0x360>)
    32ee:	4699      	mov	r9, r3
    32f0:	211b      	movs	r1, #27
    32f2:	6818      	ldr	r0, [r3, #0]
    32f4:	4b30      	ldr	r3, [pc, #192]	; (33b8 <printKeyboardBuffer+0x364>)
    32f6:	4698      	mov	r8, r3
    32f8:	4798      	blx	r3
					ring_put(ouroboros, 0x5B);
    32fa:	215b      	movs	r1, #91	; 0x5b
    32fc:	464b      	mov	r3, r9
    32fe:	6818      	ldr	r0, [r3, #0]
    3300:	47c0      	blx	r8
					ring_put(ouroboros, 0x43);
    3302:	464b      	mov	r3, r9
    3304:	6818      	ldr	r0, [r3, #0]
    3306:	2143      	movs	r1, #67	; 0x43
    3308:	47c0      	blx	r8
    330a:	e6ea      	b.n	30e2 <printKeyboardBuffer+0x8e>
					sendChar(controlCase[scanCodeBuffer[i]]);
    330c:	ab04      	add	r3, sp, #16
    330e:	4642      	mov	r2, r8
    3310:	5c98      	ldrb	r0, [r3, r2]
    3312:	4b24      	ldr	r3, [pc, #144]	; (33a4 <printKeyboardBuffer+0x350>)
    3314:	4798      	blx	r3
					if(localEcho)
    3316:	4b24      	ldr	r3, [pc, #144]	; (33a8 <printKeyboardBuffer+0x354>)
    3318:	781b      	ldrb	r3, [r3, #0]
    331a:	2b00      	cmp	r3, #0
    331c:	d100      	bne.n	3320 <printKeyboardBuffer+0x2cc>
    331e:	e6e0      	b.n	30e2 <printKeyboardBuffer+0x8e>
						ring_put(ouroboros, controlCase[scanCodeBuffer[i]]);
    3320:	9b01      	ldr	r3, [sp, #4]
    3322:	781b      	ldrb	r3, [r3, #0]
    3324:	aa04      	add	r2, sp, #16
    3326:	5cd1      	ldrb	r1, [r2, r3]
    3328:	4b22      	ldr	r3, [pc, #136]	; (33b4 <printKeyboardBuffer+0x360>)
    332a:	6818      	ldr	r0, [r3, #0]
    332c:	4b22      	ldr	r3, [pc, #136]	; (33b8 <printKeyboardBuffer+0x364>)
    332e:	4798      	blx	r3
    3330:	e6d7      	b.n	30e2 <printKeyboardBuffer+0x8e>
					sendChar(capsLockCase[scanCodeBuffer[i]]);
    3332:	ab16      	add	r3, sp, #88	; 0x58
    3334:	4642      	mov	r2, r8
    3336:	5c98      	ldrb	r0, [r3, r2]
    3338:	4b1a      	ldr	r3, [pc, #104]	; (33a4 <printKeyboardBuffer+0x350>)
    333a:	4798      	blx	r3
					if(localEcho)
    333c:	4b1a      	ldr	r3, [pc, #104]	; (33a8 <printKeyboardBuffer+0x354>)
    333e:	781b      	ldrb	r3, [r3, #0]
    3340:	2b00      	cmp	r3, #0
    3342:	d100      	bne.n	3346 <printKeyboardBuffer+0x2f2>
    3344:	e6cd      	b.n	30e2 <printKeyboardBuffer+0x8e>
						parseChar(capsLockCase[scanCodeBuffer[i]]);
    3346:	9b01      	ldr	r3, [sp, #4]
    3348:	781b      	ldrb	r3, [r3, #0]
    334a:	aa16      	add	r2, sp, #88	; 0x58
    334c:	5cd0      	ldrb	r0, [r2, r3]
    334e:	4b18      	ldr	r3, [pc, #96]	; (33b0 <printKeyboardBuffer+0x35c>)
    3350:	4798      	blx	r3
    3352:	e6c6      	b.n	30e2 <printKeyboardBuffer+0x8e>
					sendChar(noCase[scanCodeBuffer[i]]);
    3354:	ab3a      	add	r3, sp, #232	; 0xe8
    3356:	4642      	mov	r2, r8
    3358:	5c98      	ldrb	r0, [r3, r2]
    335a:	4b12      	ldr	r3, [pc, #72]	; (33a4 <printKeyboardBuffer+0x350>)
    335c:	4798      	blx	r3
					if(localEcho)
    335e:	4b12      	ldr	r3, [pc, #72]	; (33a8 <printKeyboardBuffer+0x354>)
    3360:	781b      	ldrb	r3, [r3, #0]
    3362:	2b00      	cmp	r3, #0
    3364:	d100      	bne.n	3368 <printKeyboardBuffer+0x314>
    3366:	e6bc      	b.n	30e2 <printKeyboardBuffer+0x8e>
						parseChar(noCase[scanCodeBuffer[i]]);
    3368:	9b01      	ldr	r3, [sp, #4]
    336a:	781b      	ldrb	r3, [r3, #0]
    336c:	aa3a      	add	r2, sp, #232	; 0xe8
    336e:	5cd0      	ldrb	r0, [r2, r3]
    3370:	4b0f      	ldr	r3, [pc, #60]	; (33b0 <printKeyboardBuffer+0x35c>)
    3372:	4798      	blx	r3
    3374:	e6b5      	b.n	30e2 <printKeyboardBuffer+0x8e>
		scanCodeBuffer[i] = 0xFF;
    3376:	23ff      	movs	r3, #255	; 0xff
    3378:	703b      	strb	r3, [r7, #0]
    337a:	3701      	adds	r7, #1
	for(int i = 0 ; i < 20 ; i++)
    337c:	42bc      	cmp	r4, r7
    337e:	d1fb      	bne.n	3378 <printKeyboardBuffer+0x324>
}
    3380:	b04c      	add	sp, #304	; 0x130
    3382:	bc1c      	pop	{r2, r3, r4}
    3384:	4690      	mov	r8, r2
    3386:	4699      	mov	r9, r3
    3388:	46a2      	mov	sl, r4
    338a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    338c:	00007500 	.word	0x00007500
    3390:	000042d5 	.word	0x000042d5
    3394:	00007580 	.word	0x00007580
    3398:	2000003c 	.word	0x2000003c
    339c:	20000028 	.word	0x20000028
    33a0:	00003029 	.word	0x00003029
    33a4:	00001299 	.word	0x00001299
    33a8:	20000174 	.word	0x20000174
    33ac:	20000338 	.word	0x20000338
    33b0:	00000f41 	.word	0x00000f41
    33b4:	20000360 	.word	0x20000360
    33b8:	00000141 	.word	0x00000141
    33bc:	200002c0 	.word	0x200002c0
    33c0:	20000170 	.word	0x20000170
    33c4:	20000359 	.word	0x20000359

000033c8 <removeFromKeyDown>:

void removeFromKeyDown(int scancode)
{
    33c8:	b510      	push	{r4, lr}
    33ca:	4b07      	ldr	r3, [pc, #28]	; (33e8 <removeFromKeyDown+0x20>)
    33cc:	0019      	movs	r1, r3
    33ce:	3114      	adds	r1, #20
	for(int i = 0 ; i < 20 ; i++)
	{
		if(keyDownBuffer[i] == scancode)
		{
			keyDownBuffer[i] = 0xFF;
    33d0:	24ff      	movs	r4, #255	; 0xff
    33d2:	e002      	b.n	33da <removeFromKeyDown+0x12>
    33d4:	3301      	adds	r3, #1
	for(int i = 0 ; i < 20 ; i++)
    33d6:	428b      	cmp	r3, r1
    33d8:	d004      	beq.n	33e4 <removeFromKeyDown+0x1c>
		if(keyDownBuffer[i] == scancode)
    33da:	781a      	ldrb	r2, [r3, #0]
    33dc:	4282      	cmp	r2, r0
    33de:	d1f9      	bne.n	33d4 <removeFromKeyDown+0xc>
			keyDownBuffer[i] = 0xFF;
    33e0:	701c      	strb	r4, [r3, #0]
    33e2:	e7f7      	b.n	33d4 <removeFromKeyDown+0xc>
		}
	}
}
    33e4:	bd10      	pop	{r4, pc}
    33e6:	46c0      	nop			; (mov r8, r8)
    33e8:	20000028 	.word	0x20000028

000033ec <readKeyboard>:
{
    33ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    33ee:	46de      	mov	lr, fp
    33f0:	4657      	mov	r7, sl
    33f2:	464e      	mov	r6, r9
    33f4:	4645      	mov	r5, r8
    33f6:	b5e0      	push	{r5, r6, r7, lr}
    33f8:	b083      	sub	sp, #12
    33fa:	4e6d      	ldr	r6, [pc, #436]	; (35b0 <readKeyboard+0x1c4>)
    33fc:	0031      	movs	r1, r6
    33fe:	3119      	adds	r1, #25
    3400:	31ff      	adds	r1, #255	; 0xff
    3402:	0033      	movs	r3, r6
		scanCodes[i] = 0xFF;
    3404:	22ff      	movs	r2, #255	; 0xff
    3406:	c304      	stmia	r3!, {r2}
	for(i = 0 ; i < 70 ; i++)
    3408:	428b      	cmp	r3, r1
    340a:	d1fc      	bne.n	3406 <readKeyboard+0x1a>
	PORT->Group[0].WRCONFIG.bit.DRVSTR = 1;
    340c:	4a69      	ldr	r2, [pc, #420]	; (35b4 <readKeyboard+0x1c8>)
    340e:	6a91      	ldr	r1, [r2, #40]	; 0x28
    3410:	2380      	movs	r3, #128	; 0x80
    3412:	03db      	lsls	r3, r3, #15
    3414:	430b      	orrs	r3, r1
    3416:	6293      	str	r3, [r2, #40]	; 0x28
    3418:	4c67      	ldr	r4, [pc, #412]	; (35b8 <readKeyboard+0x1cc>)
    341a:	341c      	adds	r4, #28
    341c:	4b66      	ldr	r3, [pc, #408]	; (35b8 <readKeyboard+0x1cc>)
		REG_PORT_DIRSET0 = kb_col[i];
    341e:	4867      	ldr	r0, [pc, #412]	; (35bc <readKeyboard+0x1d0>)
		REG_PORT_OUTCLR0 = kb_col[i];
    3420:	4967      	ldr	r1, [pc, #412]	; (35c0 <readKeyboard+0x1d4>)
		REG_PORT_DIRSET0 = kb_col[i];
    3422:	681a      	ldr	r2, [r3, #0]
    3424:	6002      	str	r2, [r0, #0]
		REG_PORT_OUTCLR0 = kb_col[i];
    3426:	cb04      	ldmia	r3!, {r2}
    3428:	600a      	str	r2, [r1, #0]
	for (i = 0; i < NUM_COL; i++) {
    342a:	42a3      	cmp	r3, r4
    342c:	d1f9      	bne.n	3422 <readKeyboard+0x36>
    342e:	2200      	movs	r2, #0
		REG_PORT_DIRCLR0 = kb_row[i];
    3430:	4b64      	ldr	r3, [pc, #400]	; (35c4 <readKeyboard+0x1d8>)
    3432:	469c      	mov	ip, r3
    3434:	4f64      	ldr	r7, [pc, #400]	; (35c8 <readKeyboard+0x1dc>)
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.PULLEN = 1;
    3436:	4d65      	ldr	r5, [pc, #404]	; (35cc <readKeyboard+0x1e0>)
    3438:	2404      	movs	r4, #4
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.INEN = 1;
    343a:	2002      	movs	r0, #2
		REG_PORT_DIRCLR0 = kb_row[i];
    343c:	4663      	mov	r3, ip
    343e:	58d3      	ldr	r3, [r2, r3]
    3440:	603b      	str	r3, [r7, #0]
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.PULLEN = 1;
    3442:	5953      	ldr	r3, [r2, r5]
    3444:	4962      	ldr	r1, [pc, #392]	; (35d0 <readKeyboard+0x1e4>)
    3446:	4688      	mov	r8, r1
    3448:	4443      	add	r3, r8
    344a:	7819      	ldrb	r1, [r3, #0]
    344c:	4321      	orrs	r1, r4
    344e:	7019      	strb	r1, [r3, #0]
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.INEN = 1;
    3450:	7819      	ldrb	r1, [r3, #0]
    3452:	4301      	orrs	r1, r0
    3454:	7019      	strb	r1, [r3, #0]
    3456:	3204      	adds	r2, #4
	for (i = 0; i < NUM_ROW; i++) {
    3458:	2a28      	cmp	r2, #40	; 0x28
    345a:	d1ef      	bne.n	343c <readKeyboard+0x50>
    345c:	4b56      	ldr	r3, [pc, #344]	; (35b8 <readKeyboard+0x1cc>)
    345e:	4699      	mov	r9, r3
    3460:	2300      	movs	r3, #0
    3462:	4698      	mov	r8, r3
    3464:	2200      	movs	r2, #0
		REG_PORT_OUTSET0 = kb_col[i];
    3466:	4b5b      	ldr	r3, [pc, #364]	; (35d4 <readKeyboard+0x1e8>)
    3468:	469b      	mov	fp, r3
			if((PORT->Group[0].IN.reg & kb_row[j]) != 0) {
    346a:	4d52      	ldr	r5, [pc, #328]	; (35b4 <readKeyboard+0x1c8>)
				scanCodes[scanCodeIndex] = (i * NUM_ROW) + j;
    346c:	4b50      	ldr	r3, [pc, #320]	; (35b0 <readKeyboard+0x1c4>)
    346e:	469c      	mov	ip, r3
		REG_PORT_OUTCLR0 = kb_col[i];
    3470:	4b53      	ldr	r3, [pc, #332]	; (35c0 <readKeyboard+0x1d4>)
    3472:	469a      	mov	sl, r3
    3474:	9601      	str	r6, [sp, #4]
    3476:	464e      	mov	r6, r9
    3478:	4647      	mov	r7, r8
    347a:	e015      	b.n	34a8 <readKeyboard+0xbc>
    347c:	3304      	adds	r3, #4
    347e:	3101      	adds	r1, #1
		for (j = 0; j < NUM_ROW; j++) {	
    3480:	42a3      	cmp	r3, r4
    3482:	d008      	beq.n	3496 <readKeyboard+0xaa>
			if((PORT->Group[0].IN.reg & kb_row[j]) != 0) {
    3484:	6a28      	ldr	r0, [r5, #32]
    3486:	681e      	ldr	r6, [r3, #0]
    3488:	4206      	tst	r6, r0
    348a:	d0f7      	beq.n	347c <readKeyboard+0x90>
				scanCodes[scanCodeIndex] = (i * NUM_ROW) + j;
    348c:	0090      	lsls	r0, r2, #2
    348e:	4666      	mov	r6, ip
    3490:	5181      	str	r1, [r0, r6]
				scanCodeIndex++;
    3492:	3201      	adds	r2, #1
    3494:	e7f2      	b.n	347c <readKeyboard+0x90>
    3496:	9e00      	ldr	r6, [sp, #0]
		REG_PORT_OUTCLR0 = kb_col[i];
    3498:	4649      	mov	r1, r9
    349a:	6809      	ldr	r1, [r1, #0]
    349c:	4650      	mov	r0, sl
    349e:	6001      	str	r1, [r0, #0]
    34a0:	3604      	adds	r6, #4
    34a2:	370a      	adds	r7, #10
	for (i = 0; i < NUM_COL; i++) {
    34a4:	2f46      	cmp	r7, #70	; 0x46
    34a6:	d00a      	beq.n	34be <readKeyboard+0xd2>
    34a8:	46b1      	mov	r9, r6
		REG_PORT_OUTSET0 = kb_col[i];
    34aa:	465b      	mov	r3, fp
    34ac:	6831      	ldr	r1, [r6, #0]
    34ae:	6019      	str	r1, [r3, #0]
    34b0:	4b44      	ldr	r3, [pc, #272]	; (35c4 <readKeyboard+0x1d8>)
    34b2:	4698      	mov	r8, r3
    34b4:	001c      	movs	r4, r3
    34b6:	3428      	adds	r4, #40	; 0x28
    34b8:	0039      	movs	r1, r7
    34ba:	9600      	str	r6, [sp, #0]
    34bc:	e7e2      	b.n	3484 <readKeyboard+0x98>
    34be:	4647      	mov	r7, r8
    34c0:	9e01      	ldr	r6, [sp, #4]
    34c2:	4641      	mov	r1, r8
		REG_PORT_DIRSET0 = kb_row[i];
    34c4:	4d3d      	ldr	r5, [pc, #244]	; (35bc <readKeyboard+0x1d0>)
		REG_PORT_OUTCLR0 = kb_row[i];
    34c6:	4c3e      	ldr	r4, [pc, #248]	; (35c0 <readKeyboard+0x1d4>)
		REG_PORT_DIRSET0 = kb_row[i];
    34c8:	6808      	ldr	r0, [r1, #0]
    34ca:	6028      	str	r0, [r5, #0]
		REG_PORT_OUTCLR0 = kb_row[i];
    34cc:	c901      	ldmia	r1!, {r0}
    34ce:	6020      	str	r0, [r4, #0]
	for (i = 0; i < NUM_ROW; i++) {
    34d0:	4299      	cmp	r1, r3
    34d2:	d1f9      	bne.n	34c8 <readKeyboard+0xdc>
    34d4:	2100      	movs	r1, #0
		REG_PORT_DIRCLR0 = kb_col[i];
    34d6:	4b38      	ldr	r3, [pc, #224]	; (35b8 <readKeyboard+0x1cc>)
    34d8:	4699      	mov	r9, r3
    34da:	4b3b      	ldr	r3, [pc, #236]	; (35c8 <readKeyboard+0x1dc>)
    34dc:	4698      	mov	r8, r3
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.PULLEN = 1;
    34de:	4b3e      	ldr	r3, [pc, #248]	; (35d8 <readKeyboard+0x1ec>)
    34e0:	469c      	mov	ip, r3
    34e2:	2504      	movs	r5, #4
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.INEN = 1;
    34e4:	2402      	movs	r4, #2
		REG_PORT_DIRCLR0 = kb_col[i];
    34e6:	4643      	mov	r3, r8
    34e8:	4648      	mov	r0, r9
    34ea:	5808      	ldr	r0, [r1, r0]
    34ec:	6018      	str	r0, [r3, #0]
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.PULLEN = 1;
    34ee:	4663      	mov	r3, ip
    34f0:	58cb      	ldr	r3, [r1, r3]
    34f2:	4837      	ldr	r0, [pc, #220]	; (35d0 <readKeyboard+0x1e4>)
    34f4:	4682      	mov	sl, r0
    34f6:	4453      	add	r3, sl
    34f8:	7818      	ldrb	r0, [r3, #0]
    34fa:	4328      	orrs	r0, r5
    34fc:	7018      	strb	r0, [r3, #0]
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.INEN = 1;
    34fe:	7818      	ldrb	r0, [r3, #0]
    3500:	4320      	orrs	r0, r4
    3502:	7018      	strb	r0, [r3, #0]
    3504:	3104      	adds	r1, #4
	for (i = 0; i < NUM_COL; i++) {
    3506:	291c      	cmp	r1, #28
    3508:	d1ed      	bne.n	34e6 <readKeyboard+0xfa>
    350a:	2300      	movs	r3, #0
    350c:	469c      	mov	ip, r3
		REG_PORT_OUTSET0 = kb_row[i];
    350e:	4b31      	ldr	r3, [pc, #196]	; (35d4 <readKeyboard+0x1e8>)
    3510:	469b      	mov	fp, r3
			if((PORT->Group[0].IN.reg & kb_col[j]) != 0)
    3512:	4d28      	ldr	r5, [pc, #160]	; (35b4 <readKeyboard+0x1c8>)
				scanCodes[scanCodeIndex] = (j * NUM_ROW) + i;
    3514:	4b26      	ldr	r3, [pc, #152]	; (35b0 <readKeyboard+0x1c4>)
    3516:	4698      	mov	r8, r3
		REG_PORT_OUTCLR0 = kb_row[i];
    3518:	4b29      	ldr	r3, [pc, #164]	; (35c0 <readKeyboard+0x1d4>)
    351a:	469a      	mov	sl, r3
    351c:	46b1      	mov	r9, r6
    351e:	003e      	movs	r6, r7
    3520:	4667      	mov	r7, ip
    3522:	e015      	b.n	3550 <readKeyboard+0x164>
    3524:	3104      	adds	r1, #4
    3526:	330a      	adds	r3, #10
		for (j = 0; j < NUM_COL; j++) {
    3528:	42a3      	cmp	r3, r4
    352a:	d008      	beq.n	353e <readKeyboard+0x152>
			if((PORT->Group[0].IN.reg & kb_col[j]) != 0)
    352c:	6a28      	ldr	r0, [r5, #32]
    352e:	680e      	ldr	r6, [r1, #0]
    3530:	4206      	tst	r6, r0
    3532:	d0f7      	beq.n	3524 <readKeyboard+0x138>
				scanCodes[scanCodeIndex] = (j * NUM_ROW) + i;
    3534:	0090      	lsls	r0, r2, #2
    3536:	4646      	mov	r6, r8
    3538:	5183      	str	r3, [r0, r6]
				scanCodeIndex++;
    353a:	3201      	adds	r2, #1
    353c:	e7f2      	b.n	3524 <readKeyboard+0x138>
    353e:	9e00      	ldr	r6, [sp, #0]
		REG_PORT_OUTCLR0 = kb_row[i];
    3540:	4663      	mov	r3, ip
    3542:	681b      	ldr	r3, [r3, #0]
    3544:	4651      	mov	r1, sl
    3546:	600b      	str	r3, [r1, #0]
	for (i = 0; i < NUM_ROW; i++) {
    3548:	3701      	adds	r7, #1
    354a:	3604      	adds	r6, #4
    354c:	2f0a      	cmp	r7, #10
    354e:	d009      	beq.n	3564 <readKeyboard+0x178>
    3550:	46b4      	mov	ip, r6
		REG_PORT_OUTSET0 = kb_row[i];
    3552:	465b      	mov	r3, fp
    3554:	6831      	ldr	r1, [r6, #0]
    3556:	6019      	str	r1, [r3, #0]
    3558:	003b      	movs	r3, r7
    355a:	003c      	movs	r4, r7
    355c:	3446      	adds	r4, #70	; 0x46
    355e:	4916      	ldr	r1, [pc, #88]	; (35b8 <readKeyboard+0x1cc>)
    3560:	9600      	str	r6, [sp, #0]
    3562:	e7e3      	b.n	352c <readKeyboard+0x140>
    3564:	464e      	mov	r6, r9
	for(i = 0 ; i < scanCodeIndex ; i++)
    3566:	2a00      	cmp	r2, #0
    3568:	dd08      	ble.n	357c <readKeyboard+0x190>
    356a:	4b1c      	ldr	r3, [pc, #112]	; (35dc <readKeyboard+0x1f0>)
    356c:	0092      	lsls	r2, r2, #2
    356e:	4910      	ldr	r1, [pc, #64]	; (35b0 <readKeyboard+0x1c4>)
    3570:	188a      	adds	r2, r1, r2
		scanCodeBuffer[i] = scanCodes[i];	
    3572:	ce02      	ldmia	r6!, {r1}
    3574:	7019      	strb	r1, [r3, #0]
    3576:	3301      	adds	r3, #1
	for(i = 0 ; i < scanCodeIndex ; i++)
    3578:	42b2      	cmp	r2, r6
    357a:	d1fa      	bne.n	3572 <readKeyboard+0x186>
		REG_PORT_OUTSET0 = kb_row[i];
    357c:	2400      	movs	r4, #0
		if(keyDown(i) && !scanCodesContains(i))
    357e:	4d18      	ldr	r5, [pc, #96]	; (35e0 <readKeyboard+0x1f4>)
    3580:	4e18      	ldr	r6, [pc, #96]	; (35e4 <readKeyboard+0x1f8>)
			removeFromKeyDown(i);
    3582:	4f19      	ldr	r7, [pc, #100]	; (35e8 <readKeyboard+0x1fc>)
    3584:	e002      	b.n	358c <readKeyboard+0x1a0>
	for(i = 0; i < 70; i++)
    3586:	3401      	adds	r4, #1
    3588:	2c46      	cmp	r4, #70	; 0x46
    358a:	d00a      	beq.n	35a2 <readKeyboard+0x1b6>
		if(keyDown(i) && !scanCodesContains(i))
    358c:	0020      	movs	r0, r4
    358e:	47a8      	blx	r5
    3590:	2800      	cmp	r0, #0
    3592:	d0f8      	beq.n	3586 <readKeyboard+0x19a>
    3594:	0020      	movs	r0, r4
    3596:	47b0      	blx	r6
    3598:	2800      	cmp	r0, #0
    359a:	d1f4      	bne.n	3586 <readKeyboard+0x19a>
			removeFromKeyDown(i);
    359c:	0020      	movs	r0, r4
    359e:	47b8      	blx	r7
    35a0:	e7f1      	b.n	3586 <readKeyboard+0x19a>
}
    35a2:	b003      	add	sp, #12
    35a4:	bc3c      	pop	{r2, r3, r4, r5}
    35a6:	4690      	mov	r8, r2
    35a8:	4699      	mov	r9, r3
    35aa:	46a2      	mov	sl, r4
    35ac:	46ab      	mov	fp, r5
    35ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    35b0:	20000050 	.word	0x20000050
    35b4:	41004400 	.word	0x41004400
    35b8:	00007620 	.word	0x00007620
    35bc:	41004408 	.word	0x41004408
    35c0:	41004414 	.word	0x41004414
    35c4:	00007658 	.word	0x00007658
    35c8:	41004404 	.word	0x41004404
    35cc:	00007680 	.word	0x00007680
    35d0:	41004440 	.word	0x41004440
    35d4:	41004418 	.word	0x41004418
    35d8:	0000763c 	.word	0x0000763c
    35dc:	2000003c 	.word	0x2000003c
    35e0:	00003029 	.word	0x00003029
    35e4:	00002ffd 	.word	0x00002ffd
    35e8:	000033c9 	.word	0x000033c9

000035ec <setColorRGB>:

uint16_t fore_Color_High, fore_Color_Low;
uint16_t back_Color_High, back_Color_Low;

void setColorRGB(uint8_t r, uint8_t g, uint8_t b)
{
    35ec:	b510      	push	{r4, lr}
	fore_Color_High = ((r&248)|g>>5);
    35ee:	094b      	lsrs	r3, r1, #5
    35f0:	2407      	movs	r4, #7
    35f2:	43a0      	bics	r0, r4
    35f4:	4318      	orrs	r0, r3
    35f6:	4b05      	ldr	r3, [pc, #20]	; (360c <setColorRGB+0x20>)
    35f8:	8018      	strh	r0, [r3, #0]
	fore_Color_Low = ((g&28)<<3|b>>3);
    35fa:	00c9      	lsls	r1, r1, #3
    35fc:	23e0      	movs	r3, #224	; 0xe0
    35fe:	4019      	ands	r1, r3
    3600:	08d2      	lsrs	r2, r2, #3
    3602:	430a      	orrs	r2, r1
    3604:	4b02      	ldr	r3, [pc, #8]	; (3610 <setColorRGB+0x24>)
    3606:	801a      	strh	r2, [r3, #0]
}
    3608:	bd10      	pop	{r4, pc}
    360a:	46c0      	nop			; (mov r8, r8)
    360c:	20000b46 	.word	0x20000b46
    3610:	20000b48 	.word	0x20000b48

00003614 <setBackColorRGB>:
	fore_Color_Low = (color & 0xFF);
}

void setBackColorRGB(unsigned char r,
unsigned char g, unsigned char b)
{
    3614:	b510      	push	{r4, lr}
	back_Color_High = ((r&248)|g>>5);
    3616:	094b      	lsrs	r3, r1, #5
    3618:	2407      	movs	r4, #7
    361a:	43a0      	bics	r0, r4
    361c:	4318      	orrs	r0, r3
    361e:	4b05      	ldr	r3, [pc, #20]	; (3634 <setBackColorRGB+0x20>)
    3620:	8018      	strh	r0, [r3, #0]
	back_Color_Low = ((g&28)<<3|b>>3);
    3622:	00c9      	lsls	r1, r1, #3
    3624:	23e0      	movs	r3, #224	; 0xe0
    3626:	4019      	ands	r1, r3
    3628:	08d2      	lsrs	r2, r2, #3
    362a:	430a      	orrs	r2, r1
    362c:	4b02      	ldr	r3, [pc, #8]	; (3638 <setBackColorRGB+0x24>)
    362e:	801a      	strh	r2, [r3, #0]
}
    3630:	bd10      	pop	{r4, pc}
    3632:	46c0      	nop			; (mov r8, r8)
    3634:	20000b4a 	.word	0x20000b4a
    3638:	20000b44 	.word	0x20000b44

0000363c <LCD_Fast_Fill>:
	(((long)(x2-x1)+1)*((long)(y2-y1)+1)));
	REG_PORT_OUTSET1 = LCD_CS;
}

void LCD_Fast_Fill(int ch, int cl, long pix)
{
    363c:	b570      	push	{r4, r5, r6, lr}
	int blocks;
	
	
	REG_PORT_OUTCLR1 = 0x0000ffff;
    363e:	4c19      	ldr	r4, [pc, #100]	; (36a4 <LCD_Fast_Fill+0x68>)
    3640:	4b19      	ldr	r3, [pc, #100]	; (36a8 <LCD_Fast_Fill+0x6c>)
    3642:	601c      	str	r4, [r3, #0]
	REG_PORT_OUTSET1 = (ch << 8) | cl;
    3644:	0200      	lsls	r0, r0, #8
    3646:	4301      	orrs	r1, r0
    3648:	4b18      	ldr	r3, [pc, #96]	; (36ac <LCD_Fast_Fill+0x70>)
    364a:	6019      	str	r1, [r3, #0]

	blocks = pix/16;
    364c:	17d3      	asrs	r3, r2, #31
    364e:	260f      	movs	r6, #15
    3650:	401e      	ands	r6, r3
    3652:	18b6      	adds	r6, r6, r2
    3654:	1136      	asrs	r6, r6, #4
	for (int i=0; i<blocks; i++)
    3656:	2500      	movs	r5, #0
    3658:	2e00      	cmp	r6, #0
    365a:	dd0c      	ble.n	3676 <LCD_Fast_Fill+0x3a>
	{
		for (int j=0; j<16; j++)
		{
			REG_PORT_OUTCLR1 = LCD_WR;
    365c:	4c12      	ldr	r4, [pc, #72]	; (36a8 <LCD_Fast_Fill+0x6c>)
    365e:	2180      	movs	r1, #128	; 0x80
    3660:	0289      	lsls	r1, r1, #10
			REG_PORT_OUTSET1 = LCD_WR;
    3662:	4812      	ldr	r0, [pc, #72]	; (36ac <LCD_Fast_Fill+0x70>)
{
    3664:	2310      	movs	r3, #16
			REG_PORT_OUTCLR1 = LCD_WR;
    3666:	6021      	str	r1, [r4, #0]
			REG_PORT_OUTSET1 = LCD_WR;
    3668:	6001      	str	r1, [r0, #0]
    366a:	3b01      	subs	r3, #1
		for (int j=0; j<16; j++)
    366c:	2b00      	cmp	r3, #0
    366e:	d1fa      	bne.n	3666 <LCD_Fast_Fill+0x2a>
	for (int i=0; i<blocks; i++)
    3670:	3501      	adds	r5, #1
    3672:	42ae      	cmp	r6, r5
    3674:	d1f6      	bne.n	3664 <LCD_Fast_Fill+0x28>
		}
	}
	
	if ((pix % 16) != 0)
    3676:	0713      	lsls	r3, r2, #28
    3678:	d013      	beq.n	36a2 <LCD_Fast_Fill+0x66>
	for (int i=0; i<(pix % 16)+1; i++)
    367a:	17d3      	asrs	r3, r2, #31
    367c:	0f1b      	lsrs	r3, r3, #28
    367e:	18d2      	adds	r2, r2, r3
    3680:	210f      	movs	r1, #15
    3682:	4011      	ands	r1, r2
    3684:	1ac9      	subs	r1, r1, r3
    3686:	1c4b      	adds	r3, r1, #1
    3688:	2b00      	cmp	r3, #0
    368a:	dd0a      	ble.n	36a2 <LCD_Fast_Fill+0x66>
    368c:	0019      	movs	r1, r3
    368e:	2300      	movs	r3, #0
	{
		REG_PORT_OUTCLR1 = LCD_WR;
    3690:	4c05      	ldr	r4, [pc, #20]	; (36a8 <LCD_Fast_Fill+0x6c>)
    3692:	2280      	movs	r2, #128	; 0x80
    3694:	0292      	lsls	r2, r2, #10
		REG_PORT_OUTSET1 = LCD_WR;
    3696:	4805      	ldr	r0, [pc, #20]	; (36ac <LCD_Fast_Fill+0x70>)
		REG_PORT_OUTCLR1 = LCD_WR;
    3698:	6022      	str	r2, [r4, #0]
		REG_PORT_OUTSET1 = LCD_WR;
    369a:	6002      	str	r2, [r0, #0]
	for (int i=0; i<(pix % 16)+1; i++)
    369c:	3301      	adds	r3, #1
    369e:	4299      	cmp	r1, r3
    36a0:	d1fa      	bne.n	3698 <LCD_Fast_Fill+0x5c>
	}
}
    36a2:	bd70      	pop	{r4, r5, r6, pc}
    36a4:	0000ffff 	.word	0x0000ffff
    36a8:	41004494 	.word	0x41004494
    36ac:	41004498 	.word	0x41004498

000036b0 <setXY>:
{
	setXY(0,0,display_X_size,display_Y_size);
}

void setXY(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
    36b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    36b2:	b083      	sub	sp, #12
    36b4:	0007      	movs	r7, r0
    36b6:	9100      	str	r1, [sp, #0]
    36b8:	0016      	movs	r6, r2
    36ba:	9301      	str	r3, [sp, #4]
	y1=display_Y_size-y1;
	y2=display_Y_size-y2;
	SwapUint16(y1, y2);
	*/
	
	LCD_Write_COM16(0x2a,0x00);
    36bc:	2100      	movs	r1, #0
    36be:	202a      	movs	r0, #42	; 0x2a
    36c0:	4c17      	ldr	r4, [pc, #92]	; (3720 <setXY+0x70>)
    36c2:	47a0      	blx	r4
	LCD_Write_DATA8(x1>>8);
    36c4:	0a38      	lsrs	r0, r7, #8
    36c6:	4d17      	ldr	r5, [pc, #92]	; (3724 <setXY+0x74>)
    36c8:	47a8      	blx	r5
	LCD_Write_COM16(0x2a,0x01);
    36ca:	2101      	movs	r1, #1
    36cc:	202a      	movs	r0, #42	; 0x2a
    36ce:	47a0      	blx	r4
	LCD_Write_DATA8(x1);
    36d0:	b2f8      	uxtb	r0, r7
    36d2:	47a8      	blx	r5
	LCD_Write_COM16(0x2a,0x02);
    36d4:	2102      	movs	r1, #2
    36d6:	202a      	movs	r0, #42	; 0x2a
    36d8:	47a0      	blx	r4
	LCD_Write_DATA8(x2>>8);
    36da:	0a30      	lsrs	r0, r6, #8
    36dc:	47a8      	blx	r5
	LCD_Write_COM16(0x2a,0x03);
    36de:	2103      	movs	r1, #3
    36e0:	202a      	movs	r0, #42	; 0x2a
    36e2:	47a0      	blx	r4
	LCD_Write_DATA8(x2);
    36e4:	b2f0      	uxtb	r0, r6
    36e6:	47a8      	blx	r5

	LCD_Write_COM16(0x2b,0x00);
    36e8:	2100      	movs	r1, #0
    36ea:	202b      	movs	r0, #43	; 0x2b
    36ec:	47a0      	blx	r4
	LCD_Write_DATA8(y1>>8);
    36ee:	9e00      	ldr	r6, [sp, #0]
    36f0:	0a30      	lsrs	r0, r6, #8
    36f2:	47a8      	blx	r5
	LCD_Write_COM16(0x2b,0x01);
    36f4:	2101      	movs	r1, #1
    36f6:	202b      	movs	r0, #43	; 0x2b
    36f8:	47a0      	blx	r4
	LCD_Write_DATA8(y1);
    36fa:	b2f0      	uxtb	r0, r6
    36fc:	47a8      	blx	r5
	LCD_Write_COM16(0x2b,0x02);
    36fe:	2102      	movs	r1, #2
    3700:	202b      	movs	r0, #43	; 0x2b
    3702:	47a0      	blx	r4
	LCD_Write_DATA8(y2>>8);
    3704:	9e01      	ldr	r6, [sp, #4]
    3706:	0a30      	lsrs	r0, r6, #8
    3708:	47a8      	blx	r5
	LCD_Write_COM16(0x2b,0x03);
    370a:	2103      	movs	r1, #3
    370c:	202b      	movs	r0, #43	; 0x2b
    370e:	47a0      	blx	r4
	LCD_Write_DATA8(y2);
    3710:	b2f0      	uxtb	r0, r6
    3712:	47a8      	blx	r5

	LCD_Write_COM16(0x2c,0x00);
    3714:	2100      	movs	r1, #0
    3716:	202c      	movs	r0, #44	; 0x2c
    3718:	47a0      	blx	r4
}
    371a:	b003      	add	sp, #12
    371c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    371e:	46c0      	nop			; (mov r8, r8)
    3720:	00003855 	.word	0x00003855
    3724:	00003885 	.word	0x00003885

00003728 <fillRect>:
{
    3728:	b5f0      	push	{r4, r5, r6, r7, lr}
    372a:	46ce      	mov	lr, r9
    372c:	4647      	mov	r7, r8
    372e:	b580      	push	{r7, lr}
    3730:	b083      	sub	sp, #12
    3732:	0006      	movs	r6, r0
    3734:	4689      	mov	r9, r1
    3736:	0014      	movs	r4, r2
    3738:	001d      	movs	r5, r3
	if (x1>x2)
    373a:	4290      	cmp	r0, r2
    373c:	dd01      	ble.n	3742 <fillRect+0x1a>
		x1 = x2;
    373e:	0016      	movs	r6, r2
		x2 = temp;
    3740:	0004      	movs	r4, r0
	if (y1>y2)
    3742:	45a9      	cmp	r9, r5
    3744:	dd02      	ble.n	374c <fillRect+0x24>
    3746:	0033      	movs	r3, r6
		x1 = x2;
    3748:	0026      	movs	r6, r4
		x2 = temp;
    374a:	001c      	movs	r4, r3
	REG_PORT_OUTCLR1 = LCD_CS;
    374c:	2380      	movs	r3, #128	; 0x80
    374e:	03db      	lsls	r3, r3, #15
    3750:	4698      	mov	r8, r3
    3752:	4b11      	ldr	r3, [pc, #68]	; (3798 <fillRect+0x70>)
    3754:	4642      	mov	r2, r8
    3756:	601a      	str	r2, [r3, #0]
	setXY(x1, y1, x2, y2);
    3758:	b2ab      	uxth	r3, r5
    375a:	b2a2      	uxth	r2, r4
    375c:	4649      	mov	r1, r9
    375e:	4668      	mov	r0, sp
    3760:	80c1      	strh	r1, [r0, #6]
    3762:	88c1      	ldrh	r1, [r0, #6]
    3764:	b2b0      	uxth	r0, r6
    3766:	4f0d      	ldr	r7, [pc, #52]	; (379c <fillRect+0x74>)
    3768:	47b8      	blx	r7
	REG_PORT_OUTSET1 = LCD_DC;
    376a:	4f0d      	ldr	r7, [pc, #52]	; (37a0 <fillRect+0x78>)
    376c:	2380      	movs	r3, #128	; 0x80
    376e:	041b      	lsls	r3, r3, #16
    3770:	603b      	str	r3, [r7, #0]
	(((long)(x2-x1)+1)*((long)(y2-y1)+1)));
    3772:	1ba4      	subs	r4, r4, r6
    3774:	3401      	adds	r4, #1
    3776:	464b      	mov	r3, r9
    3778:	1aea      	subs	r2, r5, r3
    377a:	3201      	adds	r2, #1
	LCD_Fast_Fill(fore_Color_High, fore_Color_Low,
    377c:	4362      	muls	r2, r4
    377e:	4b09      	ldr	r3, [pc, #36]	; (37a4 <fillRect+0x7c>)
    3780:	8819      	ldrh	r1, [r3, #0]
    3782:	4b09      	ldr	r3, [pc, #36]	; (37a8 <fillRect+0x80>)
    3784:	8818      	ldrh	r0, [r3, #0]
    3786:	4b09      	ldr	r3, [pc, #36]	; (37ac <fillRect+0x84>)
    3788:	4798      	blx	r3
	REG_PORT_OUTSET1 = LCD_CS;
    378a:	4643      	mov	r3, r8
    378c:	603b      	str	r3, [r7, #0]
}
    378e:	b003      	add	sp, #12
    3790:	bc0c      	pop	{r2, r3}
    3792:	4690      	mov	r8, r2
    3794:	4699      	mov	r9, r3
    3796:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3798:	41004494 	.word	0x41004494
    379c:	000036b1 	.word	0x000036b1
    37a0:	41004498 	.word	0x41004498
    37a4:	20000b48 	.word	0x20000b48
    37a8:	20000b46 	.word	0x20000b46
    37ac:	0000363d 	.word	0x0000363d

000037b0 <clrXY>:
{
    37b0:	b510      	push	{r4, lr}
	setXY(0,0,display_X_size,display_Y_size);
    37b2:	4b04      	ldr	r3, [pc, #16]	; (37c4 <clrXY+0x14>)
    37b4:	881b      	ldrh	r3, [r3, #0]
    37b6:	4a04      	ldr	r2, [pc, #16]	; (37c8 <clrXY+0x18>)
    37b8:	8812      	ldrh	r2, [r2, #0]
    37ba:	2100      	movs	r1, #0
    37bc:	2000      	movs	r0, #0
    37be:	4c03      	ldr	r4, [pc, #12]	; (37cc <clrXY+0x1c>)
    37c0:	47a0      	blx	r4
}
    37c2:	bd10      	pop	{r4, pc}
    37c4:	2000016a 	.word	0x2000016a
    37c8:	20000168 	.word	0x20000168
    37cc:	000036b1 	.word	0x000036b1

000037d0 <clrScr>:
{
    37d0:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = LCD_CS;
    37d2:	2280      	movs	r2, #128	; 0x80
    37d4:	03d2      	lsls	r2, r2, #15
    37d6:	4b02      	ldr	r3, [pc, #8]	; (37e0 <clrScr+0x10>)
    37d8:	601a      	str	r2, [r3, #0]
	clrXY();
    37da:	4b02      	ldr	r3, [pc, #8]	; (37e4 <clrScr+0x14>)
    37dc:	4798      	blx	r3
}
    37de:	bd10      	pop	{r4, pc}
    37e0:	41004494 	.word	0x41004494
    37e4:	000037b1 	.word	0x000037b1

000037e8 <setPixel>:

void setPixel(uint16_t color)
{
    37e8:	b510      	push	{r4, lr}
	//it sets it to a 16-bit color.
	LCD_Write_DATA16((color>>8),(color&0xFF));
    37ea:	b2c1      	uxtb	r1, r0
    37ec:	0a00      	lsrs	r0, r0, #8
    37ee:	4b01      	ldr	r3, [pc, #4]	; (37f4 <setPixel+0xc>)
    37f0:	4798      	blx	r3
}
    37f2:	bd10      	pop	{r4, pc}
    37f4:	0000386d 	.word	0x0000386d

000037f8 <clearScreen>:
	LCD_Write_DATA8(0x80);
	REG_PORT_OUTSET1 = LCD_CS;
}
*/
void clearScreen(void)
{
    37f8:	b510      	push	{r4, lr}
	fore_Color_High = ((r&248)|g>>5);
    37fa:	2300      	movs	r3, #0
    37fc:	4a06      	ldr	r2, [pc, #24]	; (3818 <clearScreen+0x20>)
    37fe:	8013      	strh	r3, [r2, #0]
	fore_Color_Low = ((g&28)<<3|b>>3);
    3800:	4a06      	ldr	r2, [pc, #24]	; (381c <clearScreen+0x24>)
    3802:	8013      	strh	r3, [r2, #0]
	setColorRGB(0,0,0);
	fillRect(0,0,display_Y_size,display_X_size);
    3804:	4b06      	ldr	r3, [pc, #24]	; (3820 <clearScreen+0x28>)
    3806:	881b      	ldrh	r3, [r3, #0]
    3808:	4a06      	ldr	r2, [pc, #24]	; (3824 <clearScreen+0x2c>)
    380a:	8812      	ldrh	r2, [r2, #0]
    380c:	2100      	movs	r1, #0
    380e:	2000      	movs	r0, #0
    3810:	4c05      	ldr	r4, [pc, #20]	; (3828 <clearScreen+0x30>)
    3812:	47a0      	blx	r4
}
    3814:	bd10      	pop	{r4, pc}
    3816:	46c0      	nop			; (mov r8, r8)
    3818:	20000b46 	.word	0x20000b46
    381c:	20000b48 	.word	0x20000b48
    3820:	20000168 	.word	0x20000168
    3824:	2000016a 	.word	0x2000016a
    3828:	00003729 	.word	0x00003729

0000382c <LCD_Write_Bus>:
	fillRect(0,0,799,489);
		
}

void LCD_Write_Bus(char VH, char VL)
{
    382c:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = 0x0000ffff;
    382e:	4c06      	ldr	r4, [pc, #24]	; (3848 <LCD_Write_Bus+0x1c>)
    3830:	4b06      	ldr	r3, [pc, #24]	; (384c <LCD_Write_Bus+0x20>)
    3832:	6023      	str	r3, [r4, #0]
	REG_PORT_OUTSET1 = (VH << 8) | VL;
    3834:	0200      	lsls	r0, r0, #8
    3836:	4301      	orrs	r1, r0
    3838:	4b05      	ldr	r3, [pc, #20]	; (3850 <LCD_Write_Bus+0x24>)
    383a:	6019      	str	r1, [r3, #0]
	REG_PORT_OUTCLR1 = LCD_WR;
    383c:	2280      	movs	r2, #128	; 0x80
    383e:	0292      	lsls	r2, r2, #10
    3840:	6022      	str	r2, [r4, #0]
	REG_PORT_OUTSET1 = LCD_WR;
    3842:	601a      	str	r2, [r3, #0]
}
    3844:	bd10      	pop	{r4, pc}
    3846:	46c0      	nop			; (mov r8, r8)
    3848:	41004494 	.word	0x41004494
    384c:	0000ffff 	.word	0x0000ffff
    3850:	41004498 	.word	0x41004498

00003854 <LCD_Write_COM16>:

void LCD_Write_COM16(char VH, char VL)
{
    3854:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = LCD_DC;
    3856:	2280      	movs	r2, #128	; 0x80
    3858:	0412      	lsls	r2, r2, #16
    385a:	4b02      	ldr	r3, [pc, #8]	; (3864 <LCD_Write_COM16+0x10>)
    385c:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(VH,VL);
    385e:	4b02      	ldr	r3, [pc, #8]	; (3868 <LCD_Write_COM16+0x14>)
    3860:	4798      	blx	r3
}
    3862:	bd10      	pop	{r4, pc}
    3864:	41004494 	.word	0x41004494
    3868:	0000382d 	.word	0x0000382d

0000386c <LCD_Write_DATA16>:
	REG_PORT_OUTCLR1 = LCD_DC;
	LCD_Write_Bus(0x00, VL);
}

void LCD_Write_DATA16(char VH, char VL)
{
    386c:	b510      	push	{r4, lr}
	REG_PORT_OUTSET1 = LCD_DC;
    386e:	2280      	movs	r2, #128	; 0x80
    3870:	0412      	lsls	r2, r2, #16
    3872:	4b02      	ldr	r3, [pc, #8]	; (387c <LCD_Write_DATA16+0x10>)
    3874:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(VH,VL);
    3876:	4b02      	ldr	r3, [pc, #8]	; (3880 <LCD_Write_DATA16+0x14>)
    3878:	4798      	blx	r3
}
    387a:	bd10      	pop	{r4, pc}
    387c:	41004498 	.word	0x41004498
    3880:	0000382d 	.word	0x0000382d

00003884 <LCD_Write_DATA8>:

void LCD_Write_DATA8(char VL)
{
    3884:	b510      	push	{r4, lr}
    3886:	0001      	movs	r1, r0
	REG_PORT_OUTSET1 = LCD_DC;
    3888:	2280      	movs	r2, #128	; 0x80
    388a:	0412      	lsls	r2, r2, #16
    388c:	4b02      	ldr	r3, [pc, #8]	; (3898 <LCD_Write_DATA8+0x14>)
    388e:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(0x00, VL);
    3890:	2000      	movs	r0, #0
    3892:	4b02      	ldr	r3, [pc, #8]	; (389c <LCD_Write_DATA8+0x18>)
    3894:	4798      	blx	r3
}
    3896:	bd10      	pop	{r4, pc}
    3898:	41004498 	.word	0x41004498
    389c:	0000382d 	.word	0x0000382d

000038a0 <InitLCD>:
{
    38a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    38a2:	46c6      	mov	lr, r8
    38a4:	b500      	push	{lr}
    38a6:	b082      	sub	sp, #8
	REG_PORT_DIRSET1 = 0x0000ffff;		//LCD data bus, PB00 - PB15
    38a8:	4b80      	ldr	r3, [pc, #512]	; (3aac <InitLCD+0x20c>)
    38aa:	4f81      	ldr	r7, [pc, #516]	; (3ab0 <InitLCD+0x210>)
    38ac:	601f      	str	r7, [r3, #0]
	REG_PORT_DIRSET1 = LCD_Reset;
    38ae:	2580      	movs	r5, #128	; 0x80
    38b0:	05ed      	lsls	r5, r5, #23
    38b2:	601d      	str	r5, [r3, #0]
	REG_PORT_DIRSET1 = LCD_CS;
    38b4:	2680      	movs	r6, #128	; 0x80
    38b6:	03f6      	lsls	r6, r6, #15
    38b8:	601e      	str	r6, [r3, #0]
	REG_PORT_DIRSET1 = LCD_WR;
    38ba:	2080      	movs	r0, #128	; 0x80
    38bc:	0280      	lsls	r0, r0, #10
    38be:	6018      	str	r0, [r3, #0]
	REG_PORT_DIRSET1 = LCD_DC;
    38c0:	2180      	movs	r1, #128	; 0x80
    38c2:	0409      	lsls	r1, r1, #16
    38c4:	6019      	str	r1, [r3, #0]
	REG_PORT_DIRSET1 = LCD_RD;
    38c6:	2280      	movs	r2, #128	; 0x80
    38c8:	0252      	lsls	r2, r2, #9
    38ca:	601a      	str	r2, [r3, #0]
	REG_PORT_OUTCLR1 = 0x0000ffff;
    38cc:	4c79      	ldr	r4, [pc, #484]	; (3ab4 <InitLCD+0x214>)
    38ce:	6027      	str	r7, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_Reset;
    38d0:	6025      	str	r5, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_CS;
    38d2:	6026      	str	r6, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_WR;
    38d4:	6020      	str	r0, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_DC;
    38d6:	6021      	str	r1, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_RD;
    38d8:	6022      	str	r2, [r4, #0]
	REG_PORT_DIRSET1 = PORT_PB16;
    38da:	601a      	str	r2, [r3, #0]
	REG_PORT_OUTSET1 = PORT_PB16;
    38dc:	4f76      	ldr	r7, [pc, #472]	; (3ab8 <InitLCD+0x218>)
    38de:	603a      	str	r2, [r7, #0]
	REG_PORT_OUTSET1 = LCD_Reset;
    38e0:	603d      	str	r5, [r7, #0]
	delay_ms(5);
    38e2:	2005      	movs	r0, #5
    38e4:	4b75      	ldr	r3, [pc, #468]	; (3abc <InitLCD+0x21c>)
    38e6:	4698      	mov	r8, r3
    38e8:	4798      	blx	r3
	REG_PORT_OUTCLR1 = LCD_Reset;
    38ea:	6025      	str	r5, [r4, #0]
	delay_ms(5);
    38ec:	2005      	movs	r0, #5
    38ee:	47c0      	blx	r8
	REG_PORT_OUTSET1 = LCD_Reset;
    38f0:	603d      	str	r5, [r7, #0]
	REG_PORT_OUTCLR1 = LCD_CS;
    38f2:	6026      	str	r6, [r4, #0]
	for(int i = 0; i < 70; i++)
    38f4:	2400      	movs	r4, #0
		REG_PORT_OUTCLR1 = LCD_DC;
    38f6:	4b6f      	ldr	r3, [pc, #444]	; (3ab4 <InitLCD+0x214>)
    38f8:	4698      	mov	r8, r3
    38fa:	2580      	movs	r5, #128	; 0x80
    38fc:	042d      	lsls	r5, r5, #16
    38fe:	002f      	movs	r7, r5
		LCD_Write_COM16(belial[i],mulciber[i]);
    3900:	4e6f      	ldr	r6, [pc, #444]	; (3ac0 <InitLCD+0x220>)
		REG_PORT_OUTCLR1 = LCD_DC;
    3902:	4643      	mov	r3, r8
    3904:	601f      	str	r7, [r3, #0]
		LCD_Write_COM16(belial[i],mulciber[i]);
    3906:	5da1      	ldrb	r1, [r4, r6]
    3908:	4b6e      	ldr	r3, [pc, #440]	; (3ac4 <InitLCD+0x224>)
    390a:	5ce0      	ldrb	r0, [r4, r3]
    390c:	4b6e      	ldr	r3, [pc, #440]	; (3ac8 <InitLCD+0x228>)
    390e:	4798      	blx	r3
		REG_PORT_OUTSET1 = LCD_DC;
    3910:	4b69      	ldr	r3, [pc, #420]	; (3ab8 <InitLCD+0x218>)
    3912:	601d      	str	r5, [r3, #0]
		LCD_Write_DATA8(lucifer[i]);
    3914:	4b6d      	ldr	r3, [pc, #436]	; (3acc <InitLCD+0x22c>)
    3916:	5ce0      	ldrb	r0, [r4, r3]
    3918:	4b6d      	ldr	r3, [pc, #436]	; (3ad0 <InitLCD+0x230>)
    391a:	4798      	blx	r3
	for(int i = 0; i < 70; i++)
    391c:	3401      	adds	r4, #1
    391e:	2c46      	cmp	r4, #70	; 0x46
    3920:	d1ef      	bne.n	3902 <InitLCD+0x62>
    3922:	23d1      	movs	r3, #209	; 0xd1
    3924:	9301      	str	r3, [sp, #4]
			LCD_Write_COM16(k,0x00);
    3926:	4d68      	ldr	r5, [pc, #416]	; (3ac8 <InitLCD+0x228>)
			LCD_Write_DATA8(beelzebub[l]);
    3928:	4f69      	ldr	r7, [pc, #420]	; (3ad0 <InitLCD+0x230>)
    392a:	4c6a      	ldr	r4, [pc, #424]	; (3ad4 <InitLCD+0x234>)
    392c:	0026      	movs	r6, r4
    392e:	3634      	adds	r6, #52	; 0x34
			LCD_Write_COM16(k,0x00);
    3930:	2100      	movs	r1, #0
    3932:	9801      	ldr	r0, [sp, #4]
    3934:	47a8      	blx	r5
			LCD_Write_DATA8(beelzebub[l]);
    3936:	7820      	ldrb	r0, [r4, #0]
    3938:	47b8      	blx	r7
    393a:	3401      	adds	r4, #1
		for(int l = 0; l < 52; l++)
    393c:	42a6      	cmp	r6, r4
    393e:	d1f7      	bne.n	3930 <InitLCD+0x90>
	for(char k = 0xD1; k < 0xD6; k++)
    3940:	9b01      	ldr	r3, [sp, #4]
    3942:	3301      	adds	r3, #1
    3944:	b2db      	uxtb	r3, r3
    3946:	9301      	str	r3, [sp, #4]
    3948:	2bd6      	cmp	r3, #214	; 0xd6
    394a:	d1ee      	bne.n	392a <InitLCD+0x8a>
	LCD_Write_COM16(0xF0, 0x00);LCD_Write_DATA8(0x55);
    394c:	2100      	movs	r1, #0
    394e:	20f0      	movs	r0, #240	; 0xf0
    3950:	4c5d      	ldr	r4, [pc, #372]	; (3ac8 <InitLCD+0x228>)
    3952:	47a0      	blx	r4
    3954:	2055      	movs	r0, #85	; 0x55
    3956:	4d5e      	ldr	r5, [pc, #376]	; (3ad0 <InitLCD+0x230>)
    3958:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x01);LCD_Write_DATA8(0xAA);	
    395a:	2101      	movs	r1, #1
    395c:	20f0      	movs	r0, #240	; 0xf0
    395e:	47a0      	blx	r4
    3960:	20aa      	movs	r0, #170	; 0xaa
    3962:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x02);LCD_Write_DATA8(0x52);	
    3964:	2102      	movs	r1, #2
    3966:	20f0      	movs	r0, #240	; 0xf0
    3968:	47a0      	blx	r4
    396a:	2052      	movs	r0, #82	; 0x52
    396c:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x03);LCD_Write_DATA8(0x08);	
    396e:	2103      	movs	r1, #3
    3970:	20f0      	movs	r0, #240	; 0xf0
    3972:	47a0      	blx	r4
    3974:	2008      	movs	r0, #8
    3976:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x04);LCD_Write_DATA8(0x00);	
    3978:	2104      	movs	r1, #4
    397a:	20f0      	movs	r0, #240	; 0xf0
    397c:	47a0      	blx	r4
    397e:	2000      	movs	r0, #0
    3980:	47a8      	blx	r5
	LCD_Write_COM16(0xB1, 0x00);LCD_Write_DATA8(0xCC);
    3982:	2100      	movs	r1, #0
    3984:	20b1      	movs	r0, #177	; 0xb1
    3986:	47a0      	blx	r4
    3988:	20cc      	movs	r0, #204	; 0xcc
    398a:	47a8      	blx	r5
	LCD_Write_COM16(0xB1, 0x01);LCD_Write_DATA8(0x00);	
    398c:	2101      	movs	r1, #1
    398e:	20b1      	movs	r0, #177	; 0xb1
    3990:	47a0      	blx	r4
    3992:	2000      	movs	r0, #0
    3994:	47a8      	blx	r5
	LCD_Write_COM16(0xB5, 0x00);LCD_Write_DATA8(0x50);	
    3996:	2100      	movs	r1, #0
    3998:	20b5      	movs	r0, #181	; 0xb5
    399a:	47a0      	blx	r4
    399c:	2050      	movs	r0, #80	; 0x50
    399e:	47a8      	blx	r5
	LCD_Write_COM16(0xB6, 0x00);LCD_Write_DATA8(0x05);
    39a0:	2100      	movs	r1, #0
    39a2:	20b6      	movs	r0, #182	; 0xb6
    39a4:	47a0      	blx	r4
    39a6:	2005      	movs	r0, #5
    39a8:	47a8      	blx	r5
	LCD_Write_COM16(0xB7, 0x00);LCD_Write_DATA8(0x70);
    39aa:	2100      	movs	r1, #0
    39ac:	20b7      	movs	r0, #183	; 0xb7
    39ae:	47a0      	blx	r4
    39b0:	2070      	movs	r0, #112	; 0x70
    39b2:	47a8      	blx	r5
	LCD_Write_COM16(0xB7, 0x01);LCD_Write_DATA8(0x70);
    39b4:	2101      	movs	r1, #1
    39b6:	20b7      	movs	r0, #183	; 0xb7
    39b8:	47a0      	blx	r4
    39ba:	2070      	movs	r0, #112	; 0x70
    39bc:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x00);LCD_Write_DATA8(0x01);
    39be:	2100      	movs	r1, #0
    39c0:	20b8      	movs	r0, #184	; 0xb8
    39c2:	47a0      	blx	r4
    39c4:	2001      	movs	r0, #1
    39c6:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x01);LCD_Write_DATA8(0x03);
    39c8:	2101      	movs	r1, #1
    39ca:	20b8      	movs	r0, #184	; 0xb8
    39cc:	47a0      	blx	r4
    39ce:	2003      	movs	r0, #3
    39d0:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x02);LCD_Write_DATA8(0x03);
    39d2:	2102      	movs	r1, #2
    39d4:	20b8      	movs	r0, #184	; 0xb8
    39d6:	47a0      	blx	r4
    39d8:	2003      	movs	r0, #3
    39da:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x03);LCD_Write_DATA8(0x03);	
    39dc:	2103      	movs	r1, #3
    39de:	20b8      	movs	r0, #184	; 0xb8
    39e0:	47a0      	blx	r4
    39e2:	2003      	movs	r0, #3
    39e4:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x00);LCD_Write_DATA8(0x02);
    39e6:	2100      	movs	r1, #0
    39e8:	20bc      	movs	r0, #188	; 0xbc
    39ea:	47a0      	blx	r4
    39ec:	2002      	movs	r0, #2
    39ee:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x01);LCD_Write_DATA8(0x00);
    39f0:	2101      	movs	r1, #1
    39f2:	20bc      	movs	r0, #188	; 0xbc
    39f4:	47a0      	blx	r4
    39f6:	2000      	movs	r0, #0
    39f8:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x02);LCD_Write_DATA8(0x00);
    39fa:	2102      	movs	r1, #2
    39fc:	20bc      	movs	r0, #188	; 0xbc
    39fe:	47a0      	blx	r4
    3a00:	2000      	movs	r0, #0
    3a02:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x00);LCD_Write_DATA8(0xD0);
    3a04:	2100      	movs	r1, #0
    3a06:	20c9      	movs	r0, #201	; 0xc9
    3a08:	47a0      	blx	r4
    3a0a:	20d0      	movs	r0, #208	; 0xd0
    3a0c:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x01);LCD_Write_DATA8(0x02);
    3a0e:	2101      	movs	r1, #1
    3a10:	20c9      	movs	r0, #201	; 0xc9
    3a12:	47a0      	blx	r4
    3a14:	2002      	movs	r0, #2
    3a16:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x02);LCD_Write_DATA8(0x50);
    3a18:	2102      	movs	r1, #2
    3a1a:	20c9      	movs	r0, #201	; 0xc9
    3a1c:	47a0      	blx	r4
    3a1e:	2050      	movs	r0, #80	; 0x50
    3a20:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x03);LCD_Write_DATA8(0x50);
    3a22:	2103      	movs	r1, #3
    3a24:	20c9      	movs	r0, #201	; 0xc9
    3a26:	47a0      	blx	r4
    3a28:	2050      	movs	r0, #80	; 0x50
    3a2a:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x04);LCD_Write_DATA8(0x50);
    3a2c:	2104      	movs	r1, #4
    3a2e:	20c9      	movs	r0, #201	; 0xc9
    3a30:	47a0      	blx	r4
    3a32:	2050      	movs	r0, #80	; 0x50
    3a34:	47a8      	blx	r5
	LCD_Write_COM16(0x35, 0x00);LCD_Write_DATA8(0x00);
    3a36:	2100      	movs	r1, #0
    3a38:	2035      	movs	r0, #53	; 0x35
    3a3a:	47a0      	blx	r4
    3a3c:	2000      	movs	r0, #0
    3a3e:	47a8      	blx	r5
	LCD_Write_COM16(0x3A, 0x00);LCD_Write_DATA8(0x55);
    3a40:	2100      	movs	r1, #0
    3a42:	203a      	movs	r0, #58	; 0x3a
    3a44:	47a0      	blx	r4
    3a46:	2055      	movs	r0, #85	; 0x55
    3a48:	47a8      	blx	r5
	LCD_Write_COM16(0x36, 0x00);LCD_Write_DATA8(0xE2);  //This is the MADCTL register
    3a4a:	2100      	movs	r1, #0
    3a4c:	2036      	movs	r0, #54	; 0x36
    3a4e:	47a0      	blx	r4
    3a50:	20e2      	movs	r0, #226	; 0xe2
    3a52:	47a8      	blx	r5
  	LCD_Write_COM16(0x11,0x00);   //Start Up  
    3a54:	2100      	movs	r1, #0
    3a56:	2011      	movs	r0, #17
    3a58:	47a0      	blx	r4
  	delay_ms(100);
    3a5a:	2064      	movs	r0, #100	; 0x64
    3a5c:	4e17      	ldr	r6, [pc, #92]	; (3abc <InitLCD+0x21c>)
    3a5e:	47b0      	blx	r6
  	LCD_Write_COM16(0x29,0x00);   //Display On  
    3a60:	2100      	movs	r1, #0
    3a62:	2029      	movs	r0, #41	; 0x29
    3a64:	47a0      	blx	r4
   	delay_ms(100);
    3a66:	2064      	movs	r0, #100	; 0x64
    3a68:	47b0      	blx	r6
	LCD_Write_COM16(0x51,0x00);LCD_Write_DATA8(0xFF);
    3a6a:	2100      	movs	r1, #0
    3a6c:	2051      	movs	r0, #81	; 0x51
    3a6e:	47a0      	blx	r4
    3a70:	20ff      	movs	r0, #255	; 0xff
    3a72:	47a8      	blx	r5
	REG_PORT_OUTSET1 = LCD_CS;
    3a74:	2280      	movs	r2, #128	; 0x80
    3a76:	03d2      	lsls	r2, r2, #15
    3a78:	4b0f      	ldr	r3, [pc, #60]	; (3ab8 <InitLCD+0x218>)
    3a7a:	601a      	str	r2, [r3, #0]
	clrScr();
    3a7c:	4b16      	ldr	r3, [pc, #88]	; (3ad8 <InitLCD+0x238>)
    3a7e:	4798      	blx	r3
	setColorRGB(0,0,0);
    3a80:	2200      	movs	r2, #0
    3a82:	2100      	movs	r1, #0
    3a84:	2000      	movs	r0, #0
    3a86:	4b15      	ldr	r3, [pc, #84]	; (3adc <InitLCD+0x23c>)
    3a88:	4798      	blx	r3
	setBackColorRGB(0, 0, 0);
    3a8a:	2200      	movs	r2, #0
    3a8c:	2100      	movs	r1, #0
    3a8e:	2000      	movs	r0, #0
    3a90:	4b13      	ldr	r3, [pc, #76]	; (3ae0 <InitLCD+0x240>)
    3a92:	4798      	blx	r3
	fillRect(0,0,799,489);
    3a94:	23ea      	movs	r3, #234	; 0xea
    3a96:	33ff      	adds	r3, #255	; 0xff
    3a98:	4a12      	ldr	r2, [pc, #72]	; (3ae4 <InitLCD+0x244>)
    3a9a:	2100      	movs	r1, #0
    3a9c:	2000      	movs	r0, #0
    3a9e:	4c12      	ldr	r4, [pc, #72]	; (3ae8 <InitLCD+0x248>)
    3aa0:	47a0      	blx	r4
}
    3aa2:	b002      	add	sp, #8
    3aa4:	bc04      	pop	{r2}
    3aa6:	4690      	mov	r8, r2
    3aa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3aaa:	46c0      	nop			; (mov r8, r8)
    3aac:	41004488 	.word	0x41004488
    3ab0:	0000ffff 	.word	0x0000ffff
    3ab4:	41004494 	.word	0x41004494
    3ab8:	41004498 	.word	0x41004498
    3abc:	000012e5 	.word	0x000012e5
    3ac0:	0000776c 	.word	0x0000776c
    3ac4:	000076dc 	.word	0x000076dc
    3ac8:	00003855 	.word	0x00003855
    3acc:	00007724 	.word	0x00007724
    3ad0:	00003885 	.word	0x00003885
    3ad4:	000076a8 	.word	0x000076a8
    3ad8:	000037d1 	.word	0x000037d1
    3adc:	000035ed 	.word	0x000035ed
    3ae0:	00003615 	.word	0x00003615
    3ae4:	0000031f 	.word	0x0000031f
    3ae8:	00003729 	.word	0x00003729

00003aec <usart_read_callback>:
	SysTick_Config(SystemCoreClock/1000);
	system_interrupt_enable(SYSTEM_INTERRUPT_SYSTICK);
}

void usart_read_callback(struct usart_module *const usart_module)
{
    3aec:	b510      	push	{r4, lr}
	// Read one character from the UART.
	//We can only use this function because it's non-blocking
	//and we can only read one character because reading > 1 means
	//it doesn't complete until _all_ characters are read.
	
	usart_read_buffer_job(&usart_instance, (uint8_t*)&rx_buf, 1);
    3aee:	4c06      	ldr	r4, [pc, #24]	; (3b08 <usart_read_callback+0x1c>)
    3af0:	2201      	movs	r2, #1
    3af2:	0021      	movs	r1, r4
    3af4:	4805      	ldr	r0, [pc, #20]	; (3b0c <usart_read_callback+0x20>)
    3af6:	4b06      	ldr	r3, [pc, #24]	; (3b10 <usart_read_callback+0x24>)
    3af8:	4798      	blx	r3
	
	//stuff that ONE CHARACTER into the circular FIFO buffer
	ring_put(ouroboros, rx_buf);
    3afa:	7821      	ldrb	r1, [r4, #0]
    3afc:	4b05      	ldr	r3, [pc, #20]	; (3b14 <usart_read_callback+0x28>)
    3afe:	6818      	ldr	r0, [r3, #0]
    3b00:	4b05      	ldr	r3, [pc, #20]	; (3b18 <usart_read_callback+0x2c>)
    3b02:	4798      	blx	r3
}
    3b04:	bd10      	pop	{r4, pc}
    3b06:	46c0      	nop			; (mov r8, r8)
    3b08:	20000b4c 	.word	0x20000b4c
    3b0c:	2000038c 	.word	0x2000038c
    3b10:	00002185 	.word	0x00002185
    3b14:	20000360 	.word	0x20000360
    3b18:	00000141 	.word	0x00000141

00003b1c <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    3b1c:	b570      	push	{r4, r5, r6, lr}
    3b1e:	b082      	sub	sp, #8
    3b20:	0005      	movs	r5, r0
    3b22:	000e      	movs	r6, r1
	uint16_t temp = 0;
    3b24:	2200      	movs	r2, #0
    3b26:	466b      	mov	r3, sp
    3b28:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    3b2a:	4c06      	ldr	r4, [pc, #24]	; (3b44 <usart_serial_getchar+0x28>)
    3b2c:	466b      	mov	r3, sp
    3b2e:	1d99      	adds	r1, r3, #6
    3b30:	0028      	movs	r0, r5
    3b32:	47a0      	blx	r4
    3b34:	2800      	cmp	r0, #0
    3b36:	d1f9      	bne.n	3b2c <usart_serial_getchar+0x10>

	*c = temp;
    3b38:	466b      	mov	r3, sp
    3b3a:	3306      	adds	r3, #6
    3b3c:	881b      	ldrh	r3, [r3, #0]
    3b3e:	7033      	strb	r3, [r6, #0]
}
    3b40:	b002      	add	sp, #8
    3b42:	bd70      	pop	{r4, r5, r6, pc}
    3b44:	000020b3 	.word	0x000020b3

00003b48 <usart_serial_putchar>:
{
    3b48:	b570      	push	{r4, r5, r6, lr}
    3b4a:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    3b4c:	b28c      	uxth	r4, r1
    3b4e:	4e03      	ldr	r6, [pc, #12]	; (3b5c <usart_serial_putchar+0x14>)
    3b50:	0021      	movs	r1, r4
    3b52:	0028      	movs	r0, r5
    3b54:	47b0      	blx	r6
    3b56:	2800      	cmp	r0, #0
    3b58:	d1fa      	bne.n	3b50 <usart_serial_putchar+0x8>
}
    3b5a:	bd70      	pop	{r4, r5, r6, pc}
    3b5c:	0000208d 	.word	0x0000208d

00003b60 <SysTick_Handler>:
	ul_tickcount++;
    3b60:	4a02      	ldr	r2, [pc, #8]	; (3b6c <SysTick_Handler+0xc>)
    3b62:	8813      	ldrh	r3, [r2, #0]
    3b64:	3301      	adds	r3, #1
    3b66:	8013      	strh	r3, [r2, #0]
}
    3b68:	4770      	bx	lr
    3b6a:	46c0      	nop			; (mov r8, r8)
    3b6c:	200002c4 	.word	0x200002c4

00003b70 <conf_systick>:
{
    3b70:	b510      	push	{r4, lr}
	SysTick_Config(SystemCoreClock/1000);
    3b72:	4b0e      	ldr	r3, [pc, #56]	; (3bac <conf_systick+0x3c>)
    3b74:	6818      	ldr	r0, [r3, #0]
    3b76:	21fa      	movs	r1, #250	; 0xfa
    3b78:	0089      	lsls	r1, r1, #2
    3b7a:	4b0d      	ldr	r3, [pc, #52]	; (3bb0 <conf_systick+0x40>)
    3b7c:	4798      	blx	r3
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    3b7e:	3801      	subs	r0, #1
    3b80:	4b0c      	ldr	r3, [pc, #48]	; (3bb4 <conf_systick+0x44>)
    3b82:	4298      	cmp	r0, r3
    3b84:	d80d      	bhi.n	3ba2 <conf_systick+0x32>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    3b86:	4a0c      	ldr	r2, [pc, #48]	; (3bb8 <conf_systick+0x48>)
    3b88:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    3b8a:	480c      	ldr	r0, [pc, #48]	; (3bbc <conf_systick+0x4c>)
    3b8c:	6a03      	ldr	r3, [r0, #32]
    3b8e:	021b      	lsls	r3, r3, #8
    3b90:	0a1b      	lsrs	r3, r3, #8
    3b92:	21c0      	movs	r1, #192	; 0xc0
    3b94:	0609      	lsls	r1, r1, #24
    3b96:	430b      	orrs	r3, r1
    3b98:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    3b9a:	2300      	movs	r3, #0
    3b9c:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    3b9e:	3307      	adds	r3, #7
    3ba0:	6013      	str	r3, [r2, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3ba2:	2280      	movs	r2, #128	; 0x80
    3ba4:	0612      	lsls	r2, r2, #24
    3ba6:	4b06      	ldr	r3, [pc, #24]	; (3bc0 <conf_systick+0x50>)
    3ba8:	601a      	str	r2, [r3, #0]
}
    3baa:	bd10      	pop	{r4, pc}
    3bac:	20000020 	.word	0x20000020
    3bb0:	00003f39 	.word	0x00003f39
    3bb4:	00ffffff 	.word	0x00ffffff
    3bb8:	e000e010 	.word	0xe000e010
    3bbc:	e000ed00 	.word	0xe000ed00
    3bc0:	e000e100 	.word	0xe000e100

00003bc4 <configure_usart>:

/**************************SERCOM STUFF*******************************/


void configure_usart(void)
{
    3bc4:	b570      	push	{r4, r5, r6, lr}
    3bc6:	b090      	sub	sp, #64	; 0x40
	config->data_order       = USART_DATAORDER_LSB;
    3bc8:	2380      	movs	r3, #128	; 0x80
    3bca:	05db      	lsls	r3, r3, #23
    3bcc:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    3bce:	2300      	movs	r3, #0
    3bd0:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    3bd2:	22ff      	movs	r2, #255	; 0xff
    3bd4:	4669      	mov	r1, sp
    3bd6:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    3bd8:	2200      	movs	r2, #0
    3bda:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    3bdc:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
    3bde:	2196      	movs	r1, #150	; 0x96
    3be0:	0189      	lsls	r1, r1, #6
    3be2:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
    3be4:	2101      	movs	r1, #1
    3be6:	2024      	movs	r0, #36	; 0x24
    3be8:	466c      	mov	r4, sp
    3bea:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    3bec:	3001      	adds	r0, #1
    3bee:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    3bf0:	3125      	adds	r1, #37	; 0x25
    3bf2:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    3bf4:	3101      	adds	r1, #1
    3bf6:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    3bf8:	930a      	str	r3, [sp, #40]	; 0x28
	config->run_in_standby   = false;
    3bfa:	3105      	adds	r1, #5
    3bfc:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    3bfe:	3101      	adds	r1, #1
    3c00:	5463      	strb	r3, [r4, r1]
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    3c02:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    3c04:	8223      	strh	r3, [r4, #16]
	config->lin_slave_enable      = false;
    3c06:	76e3      	strb	r3, [r4, #27]
	config->immediate_buffer_overflow_notification  = false;
    3c08:	7622      	strb	r2, [r4, #24]
	config->start_frame_detection_enable            = false;
    3c0a:	7722      	strb	r2, [r4, #28]
	config->encoding_format_enable                  = false;
    3c0c:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    3c0e:	2313      	movs	r3, #19
    3c10:	76a3      	strb	r3, [r4, #26]
	config->collision_detection_enable              = false;
    3c12:	7762      	strb	r2, [r4, #29]
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);

	config_usart.baudrate    = 9600;
	config_usart.mux_setting = USART_RX_1_TX_0_XCK_1;
    3c14:	2380      	movs	r3, #128	; 0x80
    3c16:	035b      	lsls	r3, r3, #13
    3c18:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = PINMUX_PA08D_SERCOM2_PAD0;
    3c1a:	4b1e      	ldr	r3, [pc, #120]	; (3c94 <configure_usart+0xd0>)
    3c1c:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = PINMUX_PA09D_SERCOM2_PAD1;
    3c1e:	4b1e      	ldr	r3, [pc, #120]	; (3c98 <configure_usart+0xd4>)
    3c20:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = PINMUX_UNUSED;
    3c22:	2301      	movs	r3, #1
    3c24:	425b      	negs	r3, r3
    3c26:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = PINMUX_UNUSED;
    3c28:	930f      	str	r3, [sp, #60]	; 0x3c
	
	
	
	while (usart_init(&usart_instance, SERCOM2, &config_usart) != STATUS_OK) {
    3c2a:	4d1c      	ldr	r5, [pc, #112]	; (3c9c <configure_usart+0xd8>)
    3c2c:	4c1c      	ldr	r4, [pc, #112]	; (3ca0 <configure_usart+0xdc>)
    3c2e:	466a      	mov	r2, sp
    3c30:	491c      	ldr	r1, [pc, #112]	; (3ca4 <configure_usart+0xe0>)
    3c32:	0028      	movs	r0, r5
    3c34:	47a0      	blx	r4
    3c36:	2800      	cmp	r0, #0
    3c38:	d1f9      	bne.n	3c2e <configure_usart+0x6a>
	stdio_base = (void *)module;
    3c3a:	4c18      	ldr	r4, [pc, #96]	; (3c9c <configure_usart+0xd8>)
    3c3c:	4b1a      	ldr	r3, [pc, #104]	; (3ca8 <configure_usart+0xe4>)
    3c3e:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    3c40:	4a1a      	ldr	r2, [pc, #104]	; (3cac <configure_usart+0xe8>)
    3c42:	4b1b      	ldr	r3, [pc, #108]	; (3cb0 <configure_usart+0xec>)
    3c44:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    3c46:	4a1b      	ldr	r2, [pc, #108]	; (3cb4 <configure_usart+0xf0>)
    3c48:	4b1b      	ldr	r3, [pc, #108]	; (3cb8 <configure_usart+0xf4>)
    3c4a:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    3c4c:	466a      	mov	r2, sp
    3c4e:	4915      	ldr	r1, [pc, #84]	; (3ca4 <configure_usart+0xe0>)
    3c50:	0020      	movs	r0, r4
    3c52:	4b13      	ldr	r3, [pc, #76]	; (3ca0 <configure_usart+0xdc>)
    3c54:	4798      	blx	r3
	setbuf(stdout, NULL);
    3c56:	4e19      	ldr	r6, [pc, #100]	; (3cbc <configure_usart+0xf8>)
    3c58:	6833      	ldr	r3, [r6, #0]
    3c5a:	6898      	ldr	r0, [r3, #8]
    3c5c:	2100      	movs	r1, #0
    3c5e:	4d18      	ldr	r5, [pc, #96]	; (3cc0 <configure_usart+0xfc>)
    3c60:	47a8      	blx	r5
	setbuf(stdin, NULL);
    3c62:	6833      	ldr	r3, [r6, #0]
    3c64:	6858      	ldr	r0, [r3, #4]
    3c66:	2100      	movs	r1, #0
    3c68:	47a8      	blx	r5
	SercomUsart *const usart_hw = &(module->hw->USART);
    3c6a:	6825      	ldr	r5, [r4, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    3c6c:	0028      	movs	r0, r5
    3c6e:	4b15      	ldr	r3, [pc, #84]	; (3cc4 <configure_usart+0x100>)
    3c70:	4798      	blx	r3
    3c72:	231f      	movs	r3, #31
    3c74:	4018      	ands	r0, r3
    3c76:	3b1e      	subs	r3, #30
    3c78:	4083      	lsls	r3, r0
    3c7a:	4a13      	ldr	r2, [pc, #76]	; (3cc8 <configure_usart+0x104>)
    3c7c:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    3c7e:	6822      	ldr	r2, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
    3c80:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    3c82:	2b00      	cmp	r3, #0
    3c84:	d1fc      	bne.n	3c80 <configure_usart+0xbc>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    3c86:	682b      	ldr	r3, [r5, #0]
    3c88:	2202      	movs	r2, #2
    3c8a:	4313      	orrs	r3, r2
    3c8c:	602b      	str	r3, [r5, #0]
	}
	stdio_serial_init(&usart_instance, SERCOM2, &config_usart);
	usart_enable(&usart_instance);
}
    3c8e:	b010      	add	sp, #64	; 0x40
    3c90:	bd70      	pop	{r4, r5, r6, pc}
    3c92:	46c0      	nop			; (mov r8, r8)
    3c94:	00080003 	.word	0x00080003
    3c98:	00090003 	.word	0x00090003
    3c9c:	2000038c 	.word	0x2000038c
    3ca0:	00001d51 	.word	0x00001d51
    3ca4:	42001000 	.word	0x42001000
    3ca8:	20000388 	.word	0x20000388
    3cac:	00003b49 	.word	0x00003b49
    3cb0:	20000384 	.word	0x20000384
    3cb4:	00003b1d 	.word	0x00003b1d
    3cb8:	20000380 	.word	0x20000380
    3cbc:	20000178 	.word	0x20000178
    3cc0:	0000459d 	.word	0x0000459d
    3cc4:	00001cc1 	.word	0x00001cc1
    3cc8:	e000e100 	.word	0xe000e100

00003ccc <configure_usart_callbacks>:

void configure_usart_callbacks(void)
{
    3ccc:	b510      	push	{r4, lr}
	usart_register_callback(&usart_instance,usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
    3cce:	4c06      	ldr	r4, [pc, #24]	; (3ce8 <configure_usart_callbacks+0x1c>)
    3cd0:	2201      	movs	r2, #1
    3cd2:	4906      	ldr	r1, [pc, #24]	; (3cec <configure_usart_callbacks+0x20>)
    3cd4:	0020      	movs	r0, r4
    3cd6:	4b06      	ldr	r3, [pc, #24]	; (3cf0 <configure_usart_callbacks+0x24>)
    3cd8:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    3cda:	2231      	movs	r2, #49	; 0x31
    3cdc:	5ca3      	ldrb	r3, [r4, r2]
    3cde:	2102      	movs	r1, #2
    3ce0:	430b      	orrs	r3, r1
    3ce2:	54a3      	strb	r3, [r4, r2]
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
}
    3ce4:	bd10      	pop	{r4, pc}
    3ce6:	46c0      	nop			; (mov r8, r8)
    3ce8:	2000038c 	.word	0x2000038c
    3cec:	00003aed 	.word	0x00003aed
    3cf0:	0000216d 	.word	0x0000216d

00003cf4 <configure_adc>:
	usart_enable(&usart_USB);
}
*/

void configure_adc(void)
{
    3cf4:	b510      	push	{r4, lr}
    3cf6:	b08c      	sub	sp, #48	; 0x30
	struct adc_config config_adc;
	adc_get_config_defaults(&config_adc);
    3cf8:	4668      	mov	r0, sp
    3cfa:	4b16      	ldr	r3, [pc, #88]	; (3d54 <configure_adc+0x60>)
    3cfc:	4798      	blx	r3
	config_adc.clock_source = GCLK_GENERATOR_1;
    3cfe:	2301      	movs	r3, #1
    3d00:	466a      	mov	r2, sp
    3d02:	7013      	strb	r3, [r2, #0]
	config_adc.clock_prescaler = ADC_CLOCK_PRESCALER_DIV16;
    3d04:	2380      	movs	r3, #128	; 0x80
    3d06:	009b      	lsls	r3, r3, #2
    3d08:	8053      	strh	r3, [r2, #2]
	config_adc.reference = ADC_REFERENCE_INT1V;
    3d0a:	2300      	movs	r3, #0
    3d0c:	7053      	strb	r3, [r2, #1]
	config_adc.positive_input = ADC_POSITIVE_INPUT_TEMP;
    3d0e:	3318      	adds	r3, #24
    3d10:	7313      	strb	r3, [r2, #12]
	config_adc.negative_input = ADC_NEGATIVE_INPUT_GND;
    3d12:	23c0      	movs	r3, #192	; 0xc0
    3d14:	015b      	lsls	r3, r3, #5
    3d16:	81d3      	strh	r3, [r2, #14]
	adc_init(&adc_instance, ADC, &config_adc);
    3d18:	4c0f      	ldr	r4, [pc, #60]	; (3d58 <configure_adc+0x64>)
    3d1a:	4910      	ldr	r1, [pc, #64]	; (3d5c <configure_adc+0x68>)
    3d1c:	0020      	movs	r0, r4
    3d1e:	4b10      	ldr	r3, [pc, #64]	; (3d60 <configure_adc+0x6c>)
    3d20:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    3d22:	6822      	ldr	r2, [r4, #0]
    3d24:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    3d26:	b25b      	sxtb	r3, r3
    3d28:	2b00      	cmp	r3, #0
    3d2a:	dbfb      	blt.n	3d24 <configure_adc+0x30>
    3d2c:	2180      	movs	r1, #128	; 0x80
    3d2e:	0409      	lsls	r1, r1, #16
    3d30:	4b0c      	ldr	r3, [pc, #48]	; (3d64 <configure_adc+0x70>)
    3d32:	6019      	str	r1, [r3, #0]
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    3d34:	230f      	movs	r3, #15
    3d36:	7593      	strb	r3, [r2, #22]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    3d38:	7613      	strb	r3, [r2, #24]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    3d3a:	7813      	ldrb	r3, [r2, #0]
    3d3c:	2102      	movs	r1, #2
    3d3e:	430b      	orrs	r3, r1
    3d40:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
    3d42:	4b05      	ldr	r3, [pc, #20]	; (3d58 <configure_adc+0x64>)
    3d44:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    3d46:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    3d48:	b25b      	sxtb	r3, r3
    3d4a:	2b00      	cmp	r3, #0
    3d4c:	dbfb      	blt.n	3d46 <configure_adc+0x52>
	adc_enable(&adc_instance);
}
    3d4e:	b00c      	add	sp, #48	; 0x30
    3d50:	bd10      	pop	{r4, pc}
    3d52:	46c0      	nop			; (mov r8, r8)
    3d54:	000013b9 	.word	0x000013b9
    3d58:	20000b50 	.word	0x20000b50
    3d5c:	42004000 	.word	0x42004000
    3d60:	000013fd 	.word	0x000013fd
    3d64:	e000e100 	.word	0xe000e100

00003d68 <setupBoard>:


void setupBoard(void)
{
    3d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t adcResult;
	uint16_t megaHurtz = (uint16_t)system_gclk_gen_get_hz(0);
    3d6a:	2000      	movs	r0, #0
    3d6c:	4b31      	ldr	r3, [pc, #196]	; (3e34 <setupBoard+0xcc>)
    3d6e:	4798      	blx	r3
    3d70:	b287      	uxth	r7, r0
	

	system_init();
    3d72:	4b31      	ldr	r3, [pc, #196]	; (3e38 <setupBoard+0xd0>)
    3d74:	4798      	blx	r3
	
	configure_adc();
    3d76:	4b31      	ldr	r3, [pc, #196]	; (3e3c <setupBoard+0xd4>)
    3d78:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    3d7a:	4b31      	ldr	r3, [pc, #196]	; (3e40 <setupBoard+0xd8>)
    3d7c:	6819      	ldr	r1, [r3, #0]
    3d7e:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    3d80:	b25b      	sxtb	r3, r3
    3d82:	2b00      	cmp	r3, #0
    3d84:	dbfb      	blt.n	3d7e <setupBoard+0x16>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    3d86:	7b0b      	ldrb	r3, [r1, #12]
    3d88:	2202      	movs	r2, #2
    3d8a:	4313      	orrs	r3, r2
    3d8c:	730b      	strb	r3, [r1, #12]
    3d8e:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    3d90:	b25b      	sxtb	r3, r3
    3d92:	2b00      	cmp	r3, #0
    3d94:	dbfb      	blt.n	3d8e <setupBoard+0x26>
	if (int_flags & ADC_INTFLAG_RESRDY) {
    3d96:	2401      	movs	r4, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
    3d98:	2604      	movs	r6, #4
		status_flags |= ADC_STATUS_WINDOW;
    3d9a:	2502      	movs	r5, #2
    3d9c:	e001      	b.n	3da2 <setupBoard+0x3a>
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    3d9e:	4214      	tst	r4, r2
    3da0:	d10a      	bne.n	3db8 <setupBoard+0x50>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    3da2:	7e0b      	ldrb	r3, [r1, #24]
    3da4:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
    3da6:	0022      	movs	r2, r4
    3da8:	401a      	ands	r2, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
    3daa:	421e      	tst	r6, r3
    3dac:	d000      	beq.n	3db0 <setupBoard+0x48>
		status_flags |= ADC_STATUS_WINDOW;
    3dae:	432a      	orrs	r2, r5
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    3db0:	421d      	tst	r5, r3
    3db2:	d0f4      	beq.n	3d9e <setupBoard+0x36>
		status_flags |= ADC_STATUS_OVERRUN;
    3db4:	4332      	orrs	r2, r6
    3db6:	e7f2      	b.n	3d9e <setupBoard+0x36>
    3db8:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    3dba:	b25b      	sxtb	r3, r3
    3dbc:	2b00      	cmp	r3, #0
    3dbe:	dbfb      	blt.n	3db8 <setupBoard+0x50>
	*result = adc_module->RESULT.reg;
    3dc0:	8b48      	ldrh	r0, [r1, #26]
    3dc2:	b280      	uxth	r0, r0
	adc_module->INTFLAG.reg = int_flags;
    3dc4:	2301      	movs	r3, #1
    3dc6:	760b      	strb	r3, [r1, #24]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    3dc8:	7e0a      	ldrb	r2, [r1, #24]
    3dca:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    3dcc:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    3dce:	0754      	lsls	r4, r2, #29
    3dd0:	d501      	bpl.n	3dd6 <setupBoard+0x6e>
		status_flags |= ADC_STATUS_WINDOW;
    3dd2:	2402      	movs	r4, #2
    3dd4:	4323      	orrs	r3, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    3dd6:	0792      	lsls	r2, r2, #30
    3dd8:	d501      	bpl.n	3dde <setupBoard+0x76>
		status_flags |= ADC_STATUS_OVERRUN;
    3dda:	2204      	movs	r2, #4
    3ddc:	4313      	orrs	r3, r2
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    3dde:	075b      	lsls	r3, r3, #29
    3de0:	d501      	bpl.n	3de6 <setupBoard+0x7e>
	adc_module->INTFLAG.reg = int_flags;
    3de2:	2302      	movs	r3, #2
    3de4:	760b      	strb	r3, [r1, #24]
	do {
	/* Wait for conversion to be done and read out result */
	} while (adc_read(&adc_instance, &adcResult) == STATUS_BUSY);
	
	
	srand((adcResult ^ megaHurtz));
    3de6:	4078      	eors	r0, r7
    3de8:	4b16      	ldr	r3, [pc, #88]	; (3e44 <setupBoard+0xdc>)
    3dea:	4798      	blx	r3
	
	delay_init();
    3dec:	4b16      	ldr	r3, [pc, #88]	; (3e48 <setupBoard+0xe0>)
    3dee:	4798      	blx	r3
	
	conf_systick();
    3df0:	4c16      	ldr	r4, [pc, #88]	; (3e4c <setupBoard+0xe4>)
    3df2:	47a0      	blx	r4

	//configure_usart_USB();
	
	configure_usart();
    3df4:	4b16      	ldr	r3, [pc, #88]	; (3e50 <setupBoard+0xe8>)
    3df6:	4798      	blx	r3
	configure_usart_callbacks();
    3df8:	4b16      	ldr	r3, [pc, #88]	; (3e54 <setupBoard+0xec>)
    3dfa:	4798      	blx	r3
	cpu_irq_enable();
    3dfc:	2201      	movs	r2, #1
    3dfe:	4b16      	ldr	r3, [pc, #88]	; (3e58 <setupBoard+0xf0>)
    3e00:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    3e02:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3e06:	b662      	cpsie	i
	system_interrupt_enable_global();
	
	//I have no idea why I need to call this; it's in the callback and it
	//doesn't work without this line here. Remove this at your own peril.
	usart_read_buffer_job(&usart_instance, (uint8_t*)&rx_buf, 1);
    3e08:	4914      	ldr	r1, [pc, #80]	; (3e5c <setupBoard+0xf4>)
    3e0a:	4815      	ldr	r0, [pc, #84]	; (3e60 <setupBoard+0xf8>)
    3e0c:	4b15      	ldr	r3, [pc, #84]	; (3e64 <setupBoard+0xfc>)
    3e0e:	4798      	blx	r3
	


	printf("\n\rSerial OK 9600 8N1\n\r");
    3e10:	4815      	ldr	r0, [pc, #84]	; (3e68 <setupBoard+0x100>)
    3e12:	4b16      	ldr	r3, [pc, #88]	; (3e6c <setupBoard+0x104>)
    3e14:	4798      	blx	r3

	
	InitLCD();
    3e16:	4b16      	ldr	r3, [pc, #88]	; (3e70 <setupBoard+0x108>)
    3e18:	4798      	blx	r3
	splashScreen();
    3e1a:	4b16      	ldr	r3, [pc, #88]	; (3e74 <setupBoard+0x10c>)
    3e1c:	4798      	blx	r3
			
	conf_systick();
    3e1e:	47a0      	blx	r4

	xCharPos=0;
    3e20:	2300      	movs	r3, #0
    3e22:	4a15      	ldr	r2, [pc, #84]	; (3e78 <setupBoard+0x110>)
    3e24:	8013      	strh	r3, [r2, #0]
	yCharPos=0;
    3e26:	4a15      	ldr	r2, [pc, #84]	; (3e7c <setupBoard+0x114>)
    3e28:	8013      	strh	r3, [r2, #0]
	drawChar(0xFF);
    3e2a:	20ff      	movs	r0, #255	; 0xff
    3e2c:	4b14      	ldr	r3, [pc, #80]	; (3e80 <setupBoard+0x118>)
    3e2e:	4798      	blx	r3
}
    3e30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3e32:	46c0      	nop			; (mov r8, r8)
    3e34:	00002865 	.word	0x00002865
    3e38:	00002aa9 	.word	0x00002aa9
    3e3c:	00003cf5 	.word	0x00003cf5
    3e40:	20000b50 	.word	0x20000b50
    3e44:	000044a5 	.word	0x000044a5
    3e48:	000012a5 	.word	0x000012a5
    3e4c:	00003b71 	.word	0x00003b71
    3e50:	00003bc5 	.word	0x00003bc5
    3e54:	00003ccd 	.word	0x00003ccd
    3e58:	2000001c 	.word	0x2000001c
    3e5c:	20000b4c 	.word	0x20000b4c
    3e60:	2000038c 	.word	0x2000038c
    3e64:	00002185 	.word	0x00002185
    3e68:	000077b4 	.word	0x000077b4
    3e6c:	00004449 	.word	0x00004449
    3e70:	000038a1 	.word	0x000038a1
    3e74:	0000106d 	.word	0x0000106d
    3e78:	200002bc 	.word	0x200002bc
    3e7c:	200002be 	.word	0x200002be
    3e80:	00002c8d 	.word	0x00002c8d

00003e84 <main>:
{
    3e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	setupBoard();
    3e86:	4b20      	ldr	r3, [pc, #128]	; (3f08 <main+0x84>)
    3e88:	4798      	blx	r3
	uint8_t * buffer  = malloc(UART_BUFFER_SIZE * sizeof(uint8_t));
    3e8a:	200a      	movs	r0, #10
    3e8c:	4b1f      	ldr	r3, [pc, #124]	; (3f0c <main+0x88>)
    3e8e:	4798      	blx	r3
	ouroboros = ring_init(buffer, UART_BUFFER_SIZE);
    3e90:	210a      	movs	r1, #10
    3e92:	4b1f      	ldr	r3, [pc, #124]	; (3f10 <main+0x8c>)
    3e94:	4798      	blx	r3
    3e96:	4b1f      	ldr	r3, [pc, #124]	; (3f14 <main+0x90>)
    3e98:	6018      	str	r0, [r3, #0]
		if((ul_tickcount % (UINT16_MAX/4) == 0) && (funcLock == false))
    3e9a:	4f1f      	ldr	r7, [pc, #124]	; (3f18 <main+0x94>)
    3e9c:	4e1f      	ldr	r6, [pc, #124]	; (3f1c <main+0x98>)
    3e9e:	4d20      	ldr	r5, [pc, #128]	; (3f20 <main+0x9c>)
    3ea0:	e015      	b.n	3ece <main+0x4a>
		if((ul_tickcount % 200 == 0) && (funcLock == false))
    3ea2:	21c8      	movs	r1, #200	; 0xc8
    3ea4:	0020      	movs	r0, r4
    3ea6:	4b1d      	ldr	r3, [pc, #116]	; (3f1c <main+0x98>)
    3ea8:	4798      	blx	r3
    3eaa:	b289      	uxth	r1, r1
    3eac:	2900      	cmp	r1, #0
    3eae:	d10e      	bne.n	3ece <main+0x4a>
    3eb0:	4b1c      	ldr	r3, [pc, #112]	; (3f24 <main+0xa0>)
    3eb2:	781b      	ldrb	r3, [r3, #0]
    3eb4:	2b00      	cmp	r3, #0
    3eb6:	d10a      	bne.n	3ece <main+0x4a>
			funcLock = true;
    3eb8:	4c1a      	ldr	r4, [pc, #104]	; (3f24 <main+0xa0>)
    3eba:	2301      	movs	r3, #1
    3ebc:	7023      	strb	r3, [r4, #0]
			readKeyboard();
    3ebe:	4b1a      	ldr	r3, [pc, #104]	; (3f28 <main+0xa4>)
    3ec0:	4798      	blx	r3
			printKeyboardBuffer();
    3ec2:	4b1a      	ldr	r3, [pc, #104]	; (3f2c <main+0xa8>)
    3ec4:	4798      	blx	r3
			parseRXBuffer();
    3ec6:	4b1a      	ldr	r3, [pc, #104]	; (3f30 <main+0xac>)
    3ec8:	4798      	blx	r3
			funcLock = false;
    3eca:	2300      	movs	r3, #0
    3ecc:	7023      	strb	r3, [r4, #0]
		__WFI();
    3ece:	bf30      	wfi
		if((ul_tickcount % (UINT16_MAX/4) == 0) && (funcLock == false))
    3ed0:	883c      	ldrh	r4, [r7, #0]
    3ed2:	0029      	movs	r1, r5
    3ed4:	0020      	movs	r0, r4
    3ed6:	47b0      	blx	r6
    3ed8:	b289      	uxth	r1, r1
    3eda:	2900      	cmp	r1, #0
    3edc:	d1e1      	bne.n	3ea2 <main+0x1e>
    3ede:	4b11      	ldr	r3, [pc, #68]	; (3f24 <main+0xa0>)
    3ee0:	781b      	ldrb	r3, [r3, #0]
    3ee2:	2b00      	cmp	r3, #0
    3ee4:	d1f3      	bne.n	3ece <main+0x4a>
			funcLock = true;
    3ee6:	4c0f      	ldr	r4, [pc, #60]	; (3f24 <main+0xa0>)
    3ee8:	3301      	adds	r3, #1
    3eea:	7023      	strb	r3, [r4, #0]
			blinkCursor();
    3eec:	4b11      	ldr	r3, [pc, #68]	; (3f34 <main+0xb0>)
    3eee:	4798      	blx	r3
			funcLock = false;
    3ef0:	2300      	movs	r3, #0
    3ef2:	7023      	strb	r3, [r4, #0]
		if((ul_tickcount % 200 == 0) && (funcLock == false))
    3ef4:	4b08      	ldr	r3, [pc, #32]	; (3f18 <main+0x94>)
    3ef6:	8818      	ldrh	r0, [r3, #0]
    3ef8:	21c8      	movs	r1, #200	; 0xc8
    3efa:	4b08      	ldr	r3, [pc, #32]	; (3f1c <main+0x98>)
    3efc:	4798      	blx	r3
    3efe:	b289      	uxth	r1, r1
    3f00:	2900      	cmp	r1, #0
    3f02:	d0d9      	beq.n	3eb8 <main+0x34>
    3f04:	e7e3      	b.n	3ece <main+0x4a>
    3f06:	46c0      	nop			; (mov r8, r8)
    3f08:	00003d69 	.word	0x00003d69
    3f0c:	000042c1 	.word	0x000042c1
    3f10:	00000115 	.word	0x00000115
    3f14:	20000360 	.word	0x20000360
    3f18:	200002c4 	.word	0x200002c4
    3f1c:	00004045 	.word	0x00004045
    3f20:	00003fff 	.word	0x00003fff
    3f24:	200002c2 	.word	0x200002c2
    3f28:	000033ed 	.word	0x000033ed
    3f2c:	00003055 	.word	0x00003055
    3f30:	00001251 	.word	0x00001251
    3f34:	00002d75 	.word	0x00002d75

00003f38 <__udivsi3>:
    3f38:	2200      	movs	r2, #0
    3f3a:	0843      	lsrs	r3, r0, #1
    3f3c:	428b      	cmp	r3, r1
    3f3e:	d374      	bcc.n	402a <__udivsi3+0xf2>
    3f40:	0903      	lsrs	r3, r0, #4
    3f42:	428b      	cmp	r3, r1
    3f44:	d35f      	bcc.n	4006 <__udivsi3+0xce>
    3f46:	0a03      	lsrs	r3, r0, #8
    3f48:	428b      	cmp	r3, r1
    3f4a:	d344      	bcc.n	3fd6 <__udivsi3+0x9e>
    3f4c:	0b03      	lsrs	r3, r0, #12
    3f4e:	428b      	cmp	r3, r1
    3f50:	d328      	bcc.n	3fa4 <__udivsi3+0x6c>
    3f52:	0c03      	lsrs	r3, r0, #16
    3f54:	428b      	cmp	r3, r1
    3f56:	d30d      	bcc.n	3f74 <__udivsi3+0x3c>
    3f58:	22ff      	movs	r2, #255	; 0xff
    3f5a:	0209      	lsls	r1, r1, #8
    3f5c:	ba12      	rev	r2, r2
    3f5e:	0c03      	lsrs	r3, r0, #16
    3f60:	428b      	cmp	r3, r1
    3f62:	d302      	bcc.n	3f6a <__udivsi3+0x32>
    3f64:	1212      	asrs	r2, r2, #8
    3f66:	0209      	lsls	r1, r1, #8
    3f68:	d065      	beq.n	4036 <__udivsi3+0xfe>
    3f6a:	0b03      	lsrs	r3, r0, #12
    3f6c:	428b      	cmp	r3, r1
    3f6e:	d319      	bcc.n	3fa4 <__udivsi3+0x6c>
    3f70:	e000      	b.n	3f74 <__udivsi3+0x3c>
    3f72:	0a09      	lsrs	r1, r1, #8
    3f74:	0bc3      	lsrs	r3, r0, #15
    3f76:	428b      	cmp	r3, r1
    3f78:	d301      	bcc.n	3f7e <__udivsi3+0x46>
    3f7a:	03cb      	lsls	r3, r1, #15
    3f7c:	1ac0      	subs	r0, r0, r3
    3f7e:	4152      	adcs	r2, r2
    3f80:	0b83      	lsrs	r3, r0, #14
    3f82:	428b      	cmp	r3, r1
    3f84:	d301      	bcc.n	3f8a <__udivsi3+0x52>
    3f86:	038b      	lsls	r3, r1, #14
    3f88:	1ac0      	subs	r0, r0, r3
    3f8a:	4152      	adcs	r2, r2
    3f8c:	0b43      	lsrs	r3, r0, #13
    3f8e:	428b      	cmp	r3, r1
    3f90:	d301      	bcc.n	3f96 <__udivsi3+0x5e>
    3f92:	034b      	lsls	r3, r1, #13
    3f94:	1ac0      	subs	r0, r0, r3
    3f96:	4152      	adcs	r2, r2
    3f98:	0b03      	lsrs	r3, r0, #12
    3f9a:	428b      	cmp	r3, r1
    3f9c:	d301      	bcc.n	3fa2 <__udivsi3+0x6a>
    3f9e:	030b      	lsls	r3, r1, #12
    3fa0:	1ac0      	subs	r0, r0, r3
    3fa2:	4152      	adcs	r2, r2
    3fa4:	0ac3      	lsrs	r3, r0, #11
    3fa6:	428b      	cmp	r3, r1
    3fa8:	d301      	bcc.n	3fae <__udivsi3+0x76>
    3faa:	02cb      	lsls	r3, r1, #11
    3fac:	1ac0      	subs	r0, r0, r3
    3fae:	4152      	adcs	r2, r2
    3fb0:	0a83      	lsrs	r3, r0, #10
    3fb2:	428b      	cmp	r3, r1
    3fb4:	d301      	bcc.n	3fba <__udivsi3+0x82>
    3fb6:	028b      	lsls	r3, r1, #10
    3fb8:	1ac0      	subs	r0, r0, r3
    3fba:	4152      	adcs	r2, r2
    3fbc:	0a43      	lsrs	r3, r0, #9
    3fbe:	428b      	cmp	r3, r1
    3fc0:	d301      	bcc.n	3fc6 <__udivsi3+0x8e>
    3fc2:	024b      	lsls	r3, r1, #9
    3fc4:	1ac0      	subs	r0, r0, r3
    3fc6:	4152      	adcs	r2, r2
    3fc8:	0a03      	lsrs	r3, r0, #8
    3fca:	428b      	cmp	r3, r1
    3fcc:	d301      	bcc.n	3fd2 <__udivsi3+0x9a>
    3fce:	020b      	lsls	r3, r1, #8
    3fd0:	1ac0      	subs	r0, r0, r3
    3fd2:	4152      	adcs	r2, r2
    3fd4:	d2cd      	bcs.n	3f72 <__udivsi3+0x3a>
    3fd6:	09c3      	lsrs	r3, r0, #7
    3fd8:	428b      	cmp	r3, r1
    3fda:	d301      	bcc.n	3fe0 <__udivsi3+0xa8>
    3fdc:	01cb      	lsls	r3, r1, #7
    3fde:	1ac0      	subs	r0, r0, r3
    3fe0:	4152      	adcs	r2, r2
    3fe2:	0983      	lsrs	r3, r0, #6
    3fe4:	428b      	cmp	r3, r1
    3fe6:	d301      	bcc.n	3fec <__udivsi3+0xb4>
    3fe8:	018b      	lsls	r3, r1, #6
    3fea:	1ac0      	subs	r0, r0, r3
    3fec:	4152      	adcs	r2, r2
    3fee:	0943      	lsrs	r3, r0, #5
    3ff0:	428b      	cmp	r3, r1
    3ff2:	d301      	bcc.n	3ff8 <__udivsi3+0xc0>
    3ff4:	014b      	lsls	r3, r1, #5
    3ff6:	1ac0      	subs	r0, r0, r3
    3ff8:	4152      	adcs	r2, r2
    3ffa:	0903      	lsrs	r3, r0, #4
    3ffc:	428b      	cmp	r3, r1
    3ffe:	d301      	bcc.n	4004 <__udivsi3+0xcc>
    4000:	010b      	lsls	r3, r1, #4
    4002:	1ac0      	subs	r0, r0, r3
    4004:	4152      	adcs	r2, r2
    4006:	08c3      	lsrs	r3, r0, #3
    4008:	428b      	cmp	r3, r1
    400a:	d301      	bcc.n	4010 <__udivsi3+0xd8>
    400c:	00cb      	lsls	r3, r1, #3
    400e:	1ac0      	subs	r0, r0, r3
    4010:	4152      	adcs	r2, r2
    4012:	0883      	lsrs	r3, r0, #2
    4014:	428b      	cmp	r3, r1
    4016:	d301      	bcc.n	401c <__udivsi3+0xe4>
    4018:	008b      	lsls	r3, r1, #2
    401a:	1ac0      	subs	r0, r0, r3
    401c:	4152      	adcs	r2, r2
    401e:	0843      	lsrs	r3, r0, #1
    4020:	428b      	cmp	r3, r1
    4022:	d301      	bcc.n	4028 <__udivsi3+0xf0>
    4024:	004b      	lsls	r3, r1, #1
    4026:	1ac0      	subs	r0, r0, r3
    4028:	4152      	adcs	r2, r2
    402a:	1a41      	subs	r1, r0, r1
    402c:	d200      	bcs.n	4030 <__udivsi3+0xf8>
    402e:	4601      	mov	r1, r0
    4030:	4152      	adcs	r2, r2
    4032:	4610      	mov	r0, r2
    4034:	4770      	bx	lr
    4036:	e7ff      	b.n	4038 <__udivsi3+0x100>
    4038:	b501      	push	{r0, lr}
    403a:	2000      	movs	r0, #0
    403c:	f000 f8f0 	bl	4220 <__aeabi_idiv0>
    4040:	bd02      	pop	{r1, pc}
    4042:	46c0      	nop			; (mov r8, r8)

00004044 <__aeabi_uidivmod>:
    4044:	2900      	cmp	r1, #0
    4046:	d0f7      	beq.n	4038 <__udivsi3+0x100>
    4048:	e776      	b.n	3f38 <__udivsi3>
    404a:	4770      	bx	lr

0000404c <__divsi3>:
    404c:	4603      	mov	r3, r0
    404e:	430b      	orrs	r3, r1
    4050:	d47f      	bmi.n	4152 <__divsi3+0x106>
    4052:	2200      	movs	r2, #0
    4054:	0843      	lsrs	r3, r0, #1
    4056:	428b      	cmp	r3, r1
    4058:	d374      	bcc.n	4144 <__divsi3+0xf8>
    405a:	0903      	lsrs	r3, r0, #4
    405c:	428b      	cmp	r3, r1
    405e:	d35f      	bcc.n	4120 <__divsi3+0xd4>
    4060:	0a03      	lsrs	r3, r0, #8
    4062:	428b      	cmp	r3, r1
    4064:	d344      	bcc.n	40f0 <__divsi3+0xa4>
    4066:	0b03      	lsrs	r3, r0, #12
    4068:	428b      	cmp	r3, r1
    406a:	d328      	bcc.n	40be <__divsi3+0x72>
    406c:	0c03      	lsrs	r3, r0, #16
    406e:	428b      	cmp	r3, r1
    4070:	d30d      	bcc.n	408e <__divsi3+0x42>
    4072:	22ff      	movs	r2, #255	; 0xff
    4074:	0209      	lsls	r1, r1, #8
    4076:	ba12      	rev	r2, r2
    4078:	0c03      	lsrs	r3, r0, #16
    407a:	428b      	cmp	r3, r1
    407c:	d302      	bcc.n	4084 <__divsi3+0x38>
    407e:	1212      	asrs	r2, r2, #8
    4080:	0209      	lsls	r1, r1, #8
    4082:	d065      	beq.n	4150 <__divsi3+0x104>
    4084:	0b03      	lsrs	r3, r0, #12
    4086:	428b      	cmp	r3, r1
    4088:	d319      	bcc.n	40be <__divsi3+0x72>
    408a:	e000      	b.n	408e <__divsi3+0x42>
    408c:	0a09      	lsrs	r1, r1, #8
    408e:	0bc3      	lsrs	r3, r0, #15
    4090:	428b      	cmp	r3, r1
    4092:	d301      	bcc.n	4098 <__divsi3+0x4c>
    4094:	03cb      	lsls	r3, r1, #15
    4096:	1ac0      	subs	r0, r0, r3
    4098:	4152      	adcs	r2, r2
    409a:	0b83      	lsrs	r3, r0, #14
    409c:	428b      	cmp	r3, r1
    409e:	d301      	bcc.n	40a4 <__divsi3+0x58>
    40a0:	038b      	lsls	r3, r1, #14
    40a2:	1ac0      	subs	r0, r0, r3
    40a4:	4152      	adcs	r2, r2
    40a6:	0b43      	lsrs	r3, r0, #13
    40a8:	428b      	cmp	r3, r1
    40aa:	d301      	bcc.n	40b0 <__divsi3+0x64>
    40ac:	034b      	lsls	r3, r1, #13
    40ae:	1ac0      	subs	r0, r0, r3
    40b0:	4152      	adcs	r2, r2
    40b2:	0b03      	lsrs	r3, r0, #12
    40b4:	428b      	cmp	r3, r1
    40b6:	d301      	bcc.n	40bc <__divsi3+0x70>
    40b8:	030b      	lsls	r3, r1, #12
    40ba:	1ac0      	subs	r0, r0, r3
    40bc:	4152      	adcs	r2, r2
    40be:	0ac3      	lsrs	r3, r0, #11
    40c0:	428b      	cmp	r3, r1
    40c2:	d301      	bcc.n	40c8 <__divsi3+0x7c>
    40c4:	02cb      	lsls	r3, r1, #11
    40c6:	1ac0      	subs	r0, r0, r3
    40c8:	4152      	adcs	r2, r2
    40ca:	0a83      	lsrs	r3, r0, #10
    40cc:	428b      	cmp	r3, r1
    40ce:	d301      	bcc.n	40d4 <__divsi3+0x88>
    40d0:	028b      	lsls	r3, r1, #10
    40d2:	1ac0      	subs	r0, r0, r3
    40d4:	4152      	adcs	r2, r2
    40d6:	0a43      	lsrs	r3, r0, #9
    40d8:	428b      	cmp	r3, r1
    40da:	d301      	bcc.n	40e0 <__divsi3+0x94>
    40dc:	024b      	lsls	r3, r1, #9
    40de:	1ac0      	subs	r0, r0, r3
    40e0:	4152      	adcs	r2, r2
    40e2:	0a03      	lsrs	r3, r0, #8
    40e4:	428b      	cmp	r3, r1
    40e6:	d301      	bcc.n	40ec <__divsi3+0xa0>
    40e8:	020b      	lsls	r3, r1, #8
    40ea:	1ac0      	subs	r0, r0, r3
    40ec:	4152      	adcs	r2, r2
    40ee:	d2cd      	bcs.n	408c <__divsi3+0x40>
    40f0:	09c3      	lsrs	r3, r0, #7
    40f2:	428b      	cmp	r3, r1
    40f4:	d301      	bcc.n	40fa <__divsi3+0xae>
    40f6:	01cb      	lsls	r3, r1, #7
    40f8:	1ac0      	subs	r0, r0, r3
    40fa:	4152      	adcs	r2, r2
    40fc:	0983      	lsrs	r3, r0, #6
    40fe:	428b      	cmp	r3, r1
    4100:	d301      	bcc.n	4106 <__divsi3+0xba>
    4102:	018b      	lsls	r3, r1, #6
    4104:	1ac0      	subs	r0, r0, r3
    4106:	4152      	adcs	r2, r2
    4108:	0943      	lsrs	r3, r0, #5
    410a:	428b      	cmp	r3, r1
    410c:	d301      	bcc.n	4112 <__divsi3+0xc6>
    410e:	014b      	lsls	r3, r1, #5
    4110:	1ac0      	subs	r0, r0, r3
    4112:	4152      	adcs	r2, r2
    4114:	0903      	lsrs	r3, r0, #4
    4116:	428b      	cmp	r3, r1
    4118:	d301      	bcc.n	411e <__divsi3+0xd2>
    411a:	010b      	lsls	r3, r1, #4
    411c:	1ac0      	subs	r0, r0, r3
    411e:	4152      	adcs	r2, r2
    4120:	08c3      	lsrs	r3, r0, #3
    4122:	428b      	cmp	r3, r1
    4124:	d301      	bcc.n	412a <__divsi3+0xde>
    4126:	00cb      	lsls	r3, r1, #3
    4128:	1ac0      	subs	r0, r0, r3
    412a:	4152      	adcs	r2, r2
    412c:	0883      	lsrs	r3, r0, #2
    412e:	428b      	cmp	r3, r1
    4130:	d301      	bcc.n	4136 <__divsi3+0xea>
    4132:	008b      	lsls	r3, r1, #2
    4134:	1ac0      	subs	r0, r0, r3
    4136:	4152      	adcs	r2, r2
    4138:	0843      	lsrs	r3, r0, #1
    413a:	428b      	cmp	r3, r1
    413c:	d301      	bcc.n	4142 <__divsi3+0xf6>
    413e:	004b      	lsls	r3, r1, #1
    4140:	1ac0      	subs	r0, r0, r3
    4142:	4152      	adcs	r2, r2
    4144:	1a41      	subs	r1, r0, r1
    4146:	d200      	bcs.n	414a <__divsi3+0xfe>
    4148:	4601      	mov	r1, r0
    414a:	4152      	adcs	r2, r2
    414c:	4610      	mov	r0, r2
    414e:	4770      	bx	lr
    4150:	e05d      	b.n	420e <__divsi3+0x1c2>
    4152:	0fca      	lsrs	r2, r1, #31
    4154:	d000      	beq.n	4158 <__divsi3+0x10c>
    4156:	4249      	negs	r1, r1
    4158:	1003      	asrs	r3, r0, #32
    415a:	d300      	bcc.n	415e <__divsi3+0x112>
    415c:	4240      	negs	r0, r0
    415e:	4053      	eors	r3, r2
    4160:	2200      	movs	r2, #0
    4162:	469c      	mov	ip, r3
    4164:	0903      	lsrs	r3, r0, #4
    4166:	428b      	cmp	r3, r1
    4168:	d32d      	bcc.n	41c6 <__divsi3+0x17a>
    416a:	0a03      	lsrs	r3, r0, #8
    416c:	428b      	cmp	r3, r1
    416e:	d312      	bcc.n	4196 <__divsi3+0x14a>
    4170:	22fc      	movs	r2, #252	; 0xfc
    4172:	0189      	lsls	r1, r1, #6
    4174:	ba12      	rev	r2, r2
    4176:	0a03      	lsrs	r3, r0, #8
    4178:	428b      	cmp	r3, r1
    417a:	d30c      	bcc.n	4196 <__divsi3+0x14a>
    417c:	0189      	lsls	r1, r1, #6
    417e:	1192      	asrs	r2, r2, #6
    4180:	428b      	cmp	r3, r1
    4182:	d308      	bcc.n	4196 <__divsi3+0x14a>
    4184:	0189      	lsls	r1, r1, #6
    4186:	1192      	asrs	r2, r2, #6
    4188:	428b      	cmp	r3, r1
    418a:	d304      	bcc.n	4196 <__divsi3+0x14a>
    418c:	0189      	lsls	r1, r1, #6
    418e:	d03a      	beq.n	4206 <__divsi3+0x1ba>
    4190:	1192      	asrs	r2, r2, #6
    4192:	e000      	b.n	4196 <__divsi3+0x14a>
    4194:	0989      	lsrs	r1, r1, #6
    4196:	09c3      	lsrs	r3, r0, #7
    4198:	428b      	cmp	r3, r1
    419a:	d301      	bcc.n	41a0 <__divsi3+0x154>
    419c:	01cb      	lsls	r3, r1, #7
    419e:	1ac0      	subs	r0, r0, r3
    41a0:	4152      	adcs	r2, r2
    41a2:	0983      	lsrs	r3, r0, #6
    41a4:	428b      	cmp	r3, r1
    41a6:	d301      	bcc.n	41ac <__divsi3+0x160>
    41a8:	018b      	lsls	r3, r1, #6
    41aa:	1ac0      	subs	r0, r0, r3
    41ac:	4152      	adcs	r2, r2
    41ae:	0943      	lsrs	r3, r0, #5
    41b0:	428b      	cmp	r3, r1
    41b2:	d301      	bcc.n	41b8 <__divsi3+0x16c>
    41b4:	014b      	lsls	r3, r1, #5
    41b6:	1ac0      	subs	r0, r0, r3
    41b8:	4152      	adcs	r2, r2
    41ba:	0903      	lsrs	r3, r0, #4
    41bc:	428b      	cmp	r3, r1
    41be:	d301      	bcc.n	41c4 <__divsi3+0x178>
    41c0:	010b      	lsls	r3, r1, #4
    41c2:	1ac0      	subs	r0, r0, r3
    41c4:	4152      	adcs	r2, r2
    41c6:	08c3      	lsrs	r3, r0, #3
    41c8:	428b      	cmp	r3, r1
    41ca:	d301      	bcc.n	41d0 <__divsi3+0x184>
    41cc:	00cb      	lsls	r3, r1, #3
    41ce:	1ac0      	subs	r0, r0, r3
    41d0:	4152      	adcs	r2, r2
    41d2:	0883      	lsrs	r3, r0, #2
    41d4:	428b      	cmp	r3, r1
    41d6:	d301      	bcc.n	41dc <__divsi3+0x190>
    41d8:	008b      	lsls	r3, r1, #2
    41da:	1ac0      	subs	r0, r0, r3
    41dc:	4152      	adcs	r2, r2
    41de:	d2d9      	bcs.n	4194 <__divsi3+0x148>
    41e0:	0843      	lsrs	r3, r0, #1
    41e2:	428b      	cmp	r3, r1
    41e4:	d301      	bcc.n	41ea <__divsi3+0x19e>
    41e6:	004b      	lsls	r3, r1, #1
    41e8:	1ac0      	subs	r0, r0, r3
    41ea:	4152      	adcs	r2, r2
    41ec:	1a41      	subs	r1, r0, r1
    41ee:	d200      	bcs.n	41f2 <__divsi3+0x1a6>
    41f0:	4601      	mov	r1, r0
    41f2:	4663      	mov	r3, ip
    41f4:	4152      	adcs	r2, r2
    41f6:	105b      	asrs	r3, r3, #1
    41f8:	4610      	mov	r0, r2
    41fa:	d301      	bcc.n	4200 <__divsi3+0x1b4>
    41fc:	4240      	negs	r0, r0
    41fe:	2b00      	cmp	r3, #0
    4200:	d500      	bpl.n	4204 <__divsi3+0x1b8>
    4202:	4249      	negs	r1, r1
    4204:	4770      	bx	lr
    4206:	4663      	mov	r3, ip
    4208:	105b      	asrs	r3, r3, #1
    420a:	d300      	bcc.n	420e <__divsi3+0x1c2>
    420c:	4240      	negs	r0, r0
    420e:	b501      	push	{r0, lr}
    4210:	2000      	movs	r0, #0
    4212:	f000 f805 	bl	4220 <__aeabi_idiv0>
    4216:	bd02      	pop	{r1, pc}

00004218 <__aeabi_idivmod>:
    4218:	2900      	cmp	r1, #0
    421a:	d0f8      	beq.n	420e <__divsi3+0x1c2>
    421c:	e716      	b.n	404c <__divsi3>
    421e:	4770      	bx	lr

00004220 <__aeabi_idiv0>:
    4220:	4770      	bx	lr
    4222:	46c0      	nop			; (mov r8, r8)

00004224 <__aeabi_lmul>:
    4224:	b5f0      	push	{r4, r5, r6, r7, lr}
    4226:	46ce      	mov	lr, r9
    4228:	4647      	mov	r7, r8
    422a:	0415      	lsls	r5, r2, #16
    422c:	0c2d      	lsrs	r5, r5, #16
    422e:	002e      	movs	r6, r5
    4230:	b580      	push	{r7, lr}
    4232:	0407      	lsls	r7, r0, #16
    4234:	0c14      	lsrs	r4, r2, #16
    4236:	0c3f      	lsrs	r7, r7, #16
    4238:	4699      	mov	r9, r3
    423a:	0c03      	lsrs	r3, r0, #16
    423c:	437e      	muls	r6, r7
    423e:	435d      	muls	r5, r3
    4240:	4367      	muls	r7, r4
    4242:	4363      	muls	r3, r4
    4244:	197f      	adds	r7, r7, r5
    4246:	0c34      	lsrs	r4, r6, #16
    4248:	19e4      	adds	r4, r4, r7
    424a:	469c      	mov	ip, r3
    424c:	42a5      	cmp	r5, r4
    424e:	d903      	bls.n	4258 <__aeabi_lmul+0x34>
    4250:	2380      	movs	r3, #128	; 0x80
    4252:	025b      	lsls	r3, r3, #9
    4254:	4698      	mov	r8, r3
    4256:	44c4      	add	ip, r8
    4258:	464b      	mov	r3, r9
    425a:	4351      	muls	r1, r2
    425c:	4343      	muls	r3, r0
    425e:	0436      	lsls	r6, r6, #16
    4260:	0c36      	lsrs	r6, r6, #16
    4262:	0c25      	lsrs	r5, r4, #16
    4264:	0424      	lsls	r4, r4, #16
    4266:	4465      	add	r5, ip
    4268:	19a4      	adds	r4, r4, r6
    426a:	1859      	adds	r1, r3, r1
    426c:	1949      	adds	r1, r1, r5
    426e:	0020      	movs	r0, r4
    4270:	bc0c      	pop	{r2, r3}
    4272:	4690      	mov	r8, r2
    4274:	4699      	mov	r9, r3
    4276:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004278 <__libc_init_array>:
    4278:	b570      	push	{r4, r5, r6, lr}
    427a:	2600      	movs	r6, #0
    427c:	4d0c      	ldr	r5, [pc, #48]	; (42b0 <__libc_init_array+0x38>)
    427e:	4c0d      	ldr	r4, [pc, #52]	; (42b4 <__libc_init_array+0x3c>)
    4280:	1b64      	subs	r4, r4, r5
    4282:	10a4      	asrs	r4, r4, #2
    4284:	42a6      	cmp	r6, r4
    4286:	d109      	bne.n	429c <__libc_init_array+0x24>
    4288:	2600      	movs	r6, #0
    428a:	f003 faeb 	bl	7864 <_init>
    428e:	4d0a      	ldr	r5, [pc, #40]	; (42b8 <__libc_init_array+0x40>)
    4290:	4c0a      	ldr	r4, [pc, #40]	; (42bc <__libc_init_array+0x44>)
    4292:	1b64      	subs	r4, r4, r5
    4294:	10a4      	asrs	r4, r4, #2
    4296:	42a6      	cmp	r6, r4
    4298:	d105      	bne.n	42a6 <__libc_init_array+0x2e>
    429a:	bd70      	pop	{r4, r5, r6, pc}
    429c:	00b3      	lsls	r3, r6, #2
    429e:	58eb      	ldr	r3, [r5, r3]
    42a0:	4798      	blx	r3
    42a2:	3601      	adds	r6, #1
    42a4:	e7ee      	b.n	4284 <__libc_init_array+0xc>
    42a6:	00b3      	lsls	r3, r6, #2
    42a8:	58eb      	ldr	r3, [r5, r3]
    42aa:	4798      	blx	r3
    42ac:	3601      	adds	r6, #1
    42ae:	e7f2      	b.n	4296 <__libc_init_array+0x1e>
    42b0:	00007870 	.word	0x00007870
    42b4:	00007870 	.word	0x00007870
    42b8:	00007870 	.word	0x00007870
    42bc:	00007874 	.word	0x00007874

000042c0 <malloc>:
    42c0:	b510      	push	{r4, lr}
    42c2:	4b03      	ldr	r3, [pc, #12]	; (42d0 <malloc+0x10>)
    42c4:	0001      	movs	r1, r0
    42c6:	6818      	ldr	r0, [r3, #0]
    42c8:	f000 f860 	bl	438c <_malloc_r>
    42cc:	bd10      	pop	{r4, pc}
    42ce:	46c0      	nop			; (mov r8, r8)
    42d0:	20000178 	.word	0x20000178

000042d4 <memcpy>:
    42d4:	2300      	movs	r3, #0
    42d6:	b510      	push	{r4, lr}
    42d8:	429a      	cmp	r2, r3
    42da:	d100      	bne.n	42de <memcpy+0xa>
    42dc:	bd10      	pop	{r4, pc}
    42de:	5ccc      	ldrb	r4, [r1, r3]
    42e0:	54c4      	strb	r4, [r0, r3]
    42e2:	3301      	adds	r3, #1
    42e4:	e7f8      	b.n	42d8 <memcpy+0x4>

000042e6 <memset>:
    42e6:	0003      	movs	r3, r0
    42e8:	1882      	adds	r2, r0, r2
    42ea:	4293      	cmp	r3, r2
    42ec:	d100      	bne.n	42f0 <memset+0xa>
    42ee:	4770      	bx	lr
    42f0:	7019      	strb	r1, [r3, #0]
    42f2:	3301      	adds	r3, #1
    42f4:	e7f9      	b.n	42ea <memset+0x4>
	...

000042f8 <_free_r>:
    42f8:	b570      	push	{r4, r5, r6, lr}
    42fa:	0005      	movs	r5, r0
    42fc:	2900      	cmp	r1, #0
    42fe:	d010      	beq.n	4322 <_free_r+0x2a>
    4300:	1f0c      	subs	r4, r1, #4
    4302:	6823      	ldr	r3, [r4, #0]
    4304:	2b00      	cmp	r3, #0
    4306:	da00      	bge.n	430a <_free_r+0x12>
    4308:	18e4      	adds	r4, r4, r3
    430a:	0028      	movs	r0, r5
    430c:	f000 fbfe 	bl	4b0c <__malloc_lock>
    4310:	4a1d      	ldr	r2, [pc, #116]	; (4388 <_free_r+0x90>)
    4312:	6813      	ldr	r3, [r2, #0]
    4314:	2b00      	cmp	r3, #0
    4316:	d105      	bne.n	4324 <_free_r+0x2c>
    4318:	6063      	str	r3, [r4, #4]
    431a:	6014      	str	r4, [r2, #0]
    431c:	0028      	movs	r0, r5
    431e:	f000 fbf6 	bl	4b0e <__malloc_unlock>
    4322:	bd70      	pop	{r4, r5, r6, pc}
    4324:	42a3      	cmp	r3, r4
    4326:	d909      	bls.n	433c <_free_r+0x44>
    4328:	6821      	ldr	r1, [r4, #0]
    432a:	1860      	adds	r0, r4, r1
    432c:	4283      	cmp	r3, r0
    432e:	d1f3      	bne.n	4318 <_free_r+0x20>
    4330:	6818      	ldr	r0, [r3, #0]
    4332:	685b      	ldr	r3, [r3, #4]
    4334:	1841      	adds	r1, r0, r1
    4336:	6021      	str	r1, [r4, #0]
    4338:	e7ee      	b.n	4318 <_free_r+0x20>
    433a:	0013      	movs	r3, r2
    433c:	685a      	ldr	r2, [r3, #4]
    433e:	2a00      	cmp	r2, #0
    4340:	d001      	beq.n	4346 <_free_r+0x4e>
    4342:	42a2      	cmp	r2, r4
    4344:	d9f9      	bls.n	433a <_free_r+0x42>
    4346:	6819      	ldr	r1, [r3, #0]
    4348:	1858      	adds	r0, r3, r1
    434a:	42a0      	cmp	r0, r4
    434c:	d10b      	bne.n	4366 <_free_r+0x6e>
    434e:	6820      	ldr	r0, [r4, #0]
    4350:	1809      	adds	r1, r1, r0
    4352:	1858      	adds	r0, r3, r1
    4354:	6019      	str	r1, [r3, #0]
    4356:	4282      	cmp	r2, r0
    4358:	d1e0      	bne.n	431c <_free_r+0x24>
    435a:	6810      	ldr	r0, [r2, #0]
    435c:	6852      	ldr	r2, [r2, #4]
    435e:	1841      	adds	r1, r0, r1
    4360:	6019      	str	r1, [r3, #0]
    4362:	605a      	str	r2, [r3, #4]
    4364:	e7da      	b.n	431c <_free_r+0x24>
    4366:	42a0      	cmp	r0, r4
    4368:	d902      	bls.n	4370 <_free_r+0x78>
    436a:	230c      	movs	r3, #12
    436c:	602b      	str	r3, [r5, #0]
    436e:	e7d5      	b.n	431c <_free_r+0x24>
    4370:	6821      	ldr	r1, [r4, #0]
    4372:	1860      	adds	r0, r4, r1
    4374:	4282      	cmp	r2, r0
    4376:	d103      	bne.n	4380 <_free_r+0x88>
    4378:	6810      	ldr	r0, [r2, #0]
    437a:	6852      	ldr	r2, [r2, #4]
    437c:	1841      	adds	r1, r0, r1
    437e:	6021      	str	r1, [r4, #0]
    4380:	6062      	str	r2, [r4, #4]
    4382:	605c      	str	r4, [r3, #4]
    4384:	e7ca      	b.n	431c <_free_r+0x24>
    4386:	46c0      	nop			; (mov r8, r8)
    4388:	200002c8 	.word	0x200002c8

0000438c <_malloc_r>:
    438c:	2303      	movs	r3, #3
    438e:	b570      	push	{r4, r5, r6, lr}
    4390:	1ccd      	adds	r5, r1, #3
    4392:	439d      	bics	r5, r3
    4394:	3508      	adds	r5, #8
    4396:	0006      	movs	r6, r0
    4398:	2d0c      	cmp	r5, #12
    439a:	d21e      	bcs.n	43da <_malloc_r+0x4e>
    439c:	250c      	movs	r5, #12
    439e:	42a9      	cmp	r1, r5
    43a0:	d81d      	bhi.n	43de <_malloc_r+0x52>
    43a2:	0030      	movs	r0, r6
    43a4:	f000 fbb2 	bl	4b0c <__malloc_lock>
    43a8:	4a25      	ldr	r2, [pc, #148]	; (4440 <_malloc_r+0xb4>)
    43aa:	6814      	ldr	r4, [r2, #0]
    43ac:	0021      	movs	r1, r4
    43ae:	2900      	cmp	r1, #0
    43b0:	d119      	bne.n	43e6 <_malloc_r+0x5a>
    43b2:	4c24      	ldr	r4, [pc, #144]	; (4444 <_malloc_r+0xb8>)
    43b4:	6823      	ldr	r3, [r4, #0]
    43b6:	2b00      	cmp	r3, #0
    43b8:	d103      	bne.n	43c2 <_malloc_r+0x36>
    43ba:	0030      	movs	r0, r6
    43bc:	f000 f8dc 	bl	4578 <_sbrk_r>
    43c0:	6020      	str	r0, [r4, #0]
    43c2:	0029      	movs	r1, r5
    43c4:	0030      	movs	r0, r6
    43c6:	f000 f8d7 	bl	4578 <_sbrk_r>
    43ca:	1c43      	adds	r3, r0, #1
    43cc:	d12c      	bne.n	4428 <_malloc_r+0x9c>
    43ce:	230c      	movs	r3, #12
    43d0:	0030      	movs	r0, r6
    43d2:	6033      	str	r3, [r6, #0]
    43d4:	f000 fb9b 	bl	4b0e <__malloc_unlock>
    43d8:	e003      	b.n	43e2 <_malloc_r+0x56>
    43da:	2d00      	cmp	r5, #0
    43dc:	dadf      	bge.n	439e <_malloc_r+0x12>
    43de:	230c      	movs	r3, #12
    43e0:	6033      	str	r3, [r6, #0]
    43e2:	2000      	movs	r0, #0
    43e4:	bd70      	pop	{r4, r5, r6, pc}
    43e6:	680b      	ldr	r3, [r1, #0]
    43e8:	1b5b      	subs	r3, r3, r5
    43ea:	d41a      	bmi.n	4422 <_malloc_r+0x96>
    43ec:	2b0b      	cmp	r3, #11
    43ee:	d903      	bls.n	43f8 <_malloc_r+0x6c>
    43f0:	600b      	str	r3, [r1, #0]
    43f2:	18cc      	adds	r4, r1, r3
    43f4:	6025      	str	r5, [r4, #0]
    43f6:	e003      	b.n	4400 <_malloc_r+0x74>
    43f8:	428c      	cmp	r4, r1
    43fa:	d10e      	bne.n	441a <_malloc_r+0x8e>
    43fc:	6863      	ldr	r3, [r4, #4]
    43fe:	6013      	str	r3, [r2, #0]
    4400:	0030      	movs	r0, r6
    4402:	f000 fb84 	bl	4b0e <__malloc_unlock>
    4406:	0020      	movs	r0, r4
    4408:	2207      	movs	r2, #7
    440a:	300b      	adds	r0, #11
    440c:	1d23      	adds	r3, r4, #4
    440e:	4390      	bics	r0, r2
    4410:	1ac3      	subs	r3, r0, r3
    4412:	d0e7      	beq.n	43e4 <_malloc_r+0x58>
    4414:	425a      	negs	r2, r3
    4416:	50e2      	str	r2, [r4, r3]
    4418:	e7e4      	b.n	43e4 <_malloc_r+0x58>
    441a:	684b      	ldr	r3, [r1, #4]
    441c:	6063      	str	r3, [r4, #4]
    441e:	000c      	movs	r4, r1
    4420:	e7ee      	b.n	4400 <_malloc_r+0x74>
    4422:	000c      	movs	r4, r1
    4424:	6849      	ldr	r1, [r1, #4]
    4426:	e7c2      	b.n	43ae <_malloc_r+0x22>
    4428:	2303      	movs	r3, #3
    442a:	1cc4      	adds	r4, r0, #3
    442c:	439c      	bics	r4, r3
    442e:	42a0      	cmp	r0, r4
    4430:	d0e0      	beq.n	43f4 <_malloc_r+0x68>
    4432:	1a21      	subs	r1, r4, r0
    4434:	0030      	movs	r0, r6
    4436:	f000 f89f 	bl	4578 <_sbrk_r>
    443a:	1c43      	adds	r3, r0, #1
    443c:	d1da      	bne.n	43f4 <_malloc_r+0x68>
    443e:	e7c6      	b.n	43ce <_malloc_r+0x42>
    4440:	200002c8 	.word	0x200002c8
    4444:	200002cc 	.word	0x200002cc

00004448 <iprintf>:
    4448:	b40f      	push	{r0, r1, r2, r3}
    444a:	4b0b      	ldr	r3, [pc, #44]	; (4478 <iprintf+0x30>)
    444c:	b513      	push	{r0, r1, r4, lr}
    444e:	681c      	ldr	r4, [r3, #0]
    4450:	2c00      	cmp	r4, #0
    4452:	d005      	beq.n	4460 <iprintf+0x18>
    4454:	69a3      	ldr	r3, [r4, #24]
    4456:	2b00      	cmp	r3, #0
    4458:	d102      	bne.n	4460 <iprintf+0x18>
    445a:	0020      	movs	r0, r4
    445c:	f000 fa54 	bl	4908 <__sinit>
    4460:	ab05      	add	r3, sp, #20
    4462:	9a04      	ldr	r2, [sp, #16]
    4464:	68a1      	ldr	r1, [r4, #8]
    4466:	0020      	movs	r0, r4
    4468:	9301      	str	r3, [sp, #4]
    446a:	f000 fb79 	bl	4b60 <_vfiprintf_r>
    446e:	bc16      	pop	{r1, r2, r4}
    4470:	bc08      	pop	{r3}
    4472:	b004      	add	sp, #16
    4474:	4718      	bx	r3
    4476:	46c0      	nop			; (mov r8, r8)
    4478:	20000178 	.word	0x20000178

0000447c <putchar>:
    447c:	4b08      	ldr	r3, [pc, #32]	; (44a0 <putchar+0x24>)
    447e:	b570      	push	{r4, r5, r6, lr}
    4480:	681c      	ldr	r4, [r3, #0]
    4482:	0005      	movs	r5, r0
    4484:	2c00      	cmp	r4, #0
    4486:	d005      	beq.n	4494 <putchar+0x18>
    4488:	69a3      	ldr	r3, [r4, #24]
    448a:	2b00      	cmp	r3, #0
    448c:	d102      	bne.n	4494 <putchar+0x18>
    448e:	0020      	movs	r0, r4
    4490:	f000 fa3a 	bl	4908 <__sinit>
    4494:	0029      	movs	r1, r5
    4496:	68a2      	ldr	r2, [r4, #8]
    4498:	0020      	movs	r0, r4
    449a:	f000 fe05 	bl	50a8 <_putc_r>
    449e:	bd70      	pop	{r4, r5, r6, pc}
    44a0:	20000178 	.word	0x20000178

000044a4 <srand>:
    44a4:	4b10      	ldr	r3, [pc, #64]	; (44e8 <srand+0x44>)
    44a6:	b570      	push	{r4, r5, r6, lr}
    44a8:	681c      	ldr	r4, [r3, #0]
    44aa:	0005      	movs	r5, r0
    44ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    44ae:	2b00      	cmp	r3, #0
    44b0:	d115      	bne.n	44de <srand+0x3a>
    44b2:	2018      	movs	r0, #24
    44b4:	f7ff ff04 	bl	42c0 <malloc>
    44b8:	4b0c      	ldr	r3, [pc, #48]	; (44ec <srand+0x48>)
    44ba:	63a0      	str	r0, [r4, #56]	; 0x38
    44bc:	8003      	strh	r3, [r0, #0]
    44be:	4b0c      	ldr	r3, [pc, #48]	; (44f0 <srand+0x4c>)
    44c0:	2201      	movs	r2, #1
    44c2:	8043      	strh	r3, [r0, #2]
    44c4:	4b0b      	ldr	r3, [pc, #44]	; (44f4 <srand+0x50>)
    44c6:	8083      	strh	r3, [r0, #4]
    44c8:	4b0b      	ldr	r3, [pc, #44]	; (44f8 <srand+0x54>)
    44ca:	80c3      	strh	r3, [r0, #6]
    44cc:	4b0b      	ldr	r3, [pc, #44]	; (44fc <srand+0x58>)
    44ce:	8103      	strh	r3, [r0, #8]
    44d0:	2305      	movs	r3, #5
    44d2:	8143      	strh	r3, [r0, #10]
    44d4:	3306      	adds	r3, #6
    44d6:	8183      	strh	r3, [r0, #12]
    44d8:	2300      	movs	r3, #0
    44da:	6102      	str	r2, [r0, #16]
    44dc:	6143      	str	r3, [r0, #20]
    44de:	2200      	movs	r2, #0
    44e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    44e2:	611d      	str	r5, [r3, #16]
    44e4:	615a      	str	r2, [r3, #20]
    44e6:	bd70      	pop	{r4, r5, r6, pc}
    44e8:	20000178 	.word	0x20000178
    44ec:	0000330e 	.word	0x0000330e
    44f0:	ffffabcd 	.word	0xffffabcd
    44f4:	00001234 	.word	0x00001234
    44f8:	ffffe66d 	.word	0xffffe66d
    44fc:	ffffdeec 	.word	0xffffdeec

00004500 <rand>:
    4500:	4b15      	ldr	r3, [pc, #84]	; (4558 <rand+0x58>)
    4502:	b510      	push	{r4, lr}
    4504:	681c      	ldr	r4, [r3, #0]
    4506:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    4508:	2b00      	cmp	r3, #0
    450a:	d115      	bne.n	4538 <rand+0x38>
    450c:	2018      	movs	r0, #24
    450e:	f7ff fed7 	bl	42c0 <malloc>
    4512:	4b12      	ldr	r3, [pc, #72]	; (455c <rand+0x5c>)
    4514:	63a0      	str	r0, [r4, #56]	; 0x38
    4516:	8003      	strh	r3, [r0, #0]
    4518:	4b11      	ldr	r3, [pc, #68]	; (4560 <rand+0x60>)
    451a:	2201      	movs	r2, #1
    451c:	8043      	strh	r3, [r0, #2]
    451e:	4b11      	ldr	r3, [pc, #68]	; (4564 <rand+0x64>)
    4520:	8083      	strh	r3, [r0, #4]
    4522:	4b11      	ldr	r3, [pc, #68]	; (4568 <rand+0x68>)
    4524:	80c3      	strh	r3, [r0, #6]
    4526:	4b11      	ldr	r3, [pc, #68]	; (456c <rand+0x6c>)
    4528:	8103      	strh	r3, [r0, #8]
    452a:	2305      	movs	r3, #5
    452c:	8143      	strh	r3, [r0, #10]
    452e:	3306      	adds	r3, #6
    4530:	8183      	strh	r3, [r0, #12]
    4532:	2300      	movs	r3, #0
    4534:	6102      	str	r2, [r0, #16]
    4536:	6143      	str	r3, [r0, #20]
    4538:	6ba4      	ldr	r4, [r4, #56]	; 0x38
    453a:	4a0d      	ldr	r2, [pc, #52]	; (4570 <rand+0x70>)
    453c:	6920      	ldr	r0, [r4, #16]
    453e:	6961      	ldr	r1, [r4, #20]
    4540:	4b0c      	ldr	r3, [pc, #48]	; (4574 <rand+0x74>)
    4542:	f7ff fe6f 	bl	4224 <__aeabi_lmul>
    4546:	2201      	movs	r2, #1
    4548:	2300      	movs	r3, #0
    454a:	1880      	adds	r0, r0, r2
    454c:	4159      	adcs	r1, r3
    454e:	6120      	str	r0, [r4, #16]
    4550:	6161      	str	r1, [r4, #20]
    4552:	0048      	lsls	r0, r1, #1
    4554:	0840      	lsrs	r0, r0, #1
    4556:	bd10      	pop	{r4, pc}
    4558:	20000178 	.word	0x20000178
    455c:	0000330e 	.word	0x0000330e
    4560:	ffffabcd 	.word	0xffffabcd
    4564:	00001234 	.word	0x00001234
    4568:	ffffe66d 	.word	0xffffe66d
    456c:	ffffdeec 	.word	0xffffdeec
    4570:	4c957f2d 	.word	0x4c957f2d
    4574:	5851f42d 	.word	0x5851f42d

00004578 <_sbrk_r>:
    4578:	2300      	movs	r3, #0
    457a:	b570      	push	{r4, r5, r6, lr}
    457c:	4c06      	ldr	r4, [pc, #24]	; (4598 <_sbrk_r+0x20>)
    457e:	0005      	movs	r5, r0
    4580:	0008      	movs	r0, r1
    4582:	6023      	str	r3, [r4, #0]
    4584:	f7fe fb64 	bl	2c50 <_sbrk>
    4588:	1c43      	adds	r3, r0, #1
    458a:	d103      	bne.n	4594 <_sbrk_r+0x1c>
    458c:	6823      	ldr	r3, [r4, #0]
    458e:	2b00      	cmp	r3, #0
    4590:	d000      	beq.n	4594 <_sbrk_r+0x1c>
    4592:	602b      	str	r3, [r5, #0]
    4594:	bd70      	pop	{r4, r5, r6, pc}
    4596:	46c0      	nop			; (mov r8, r8)
    4598:	20000b70 	.word	0x20000b70

0000459c <setbuf>:
    459c:	424a      	negs	r2, r1
    459e:	414a      	adcs	r2, r1
    45a0:	2380      	movs	r3, #128	; 0x80
    45a2:	b510      	push	{r4, lr}
    45a4:	0052      	lsls	r2, r2, #1
    45a6:	00db      	lsls	r3, r3, #3
    45a8:	f000 f802 	bl	45b0 <setvbuf>
    45ac:	bd10      	pop	{r4, pc}
	...

000045b0 <setvbuf>:
    45b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    45b2:	001d      	movs	r5, r3
    45b4:	4b4f      	ldr	r3, [pc, #316]	; (46f4 <setvbuf+0x144>)
    45b6:	b085      	sub	sp, #20
    45b8:	681e      	ldr	r6, [r3, #0]
    45ba:	0004      	movs	r4, r0
    45bc:	000f      	movs	r7, r1
    45be:	9200      	str	r2, [sp, #0]
    45c0:	2e00      	cmp	r6, #0
    45c2:	d005      	beq.n	45d0 <setvbuf+0x20>
    45c4:	69b3      	ldr	r3, [r6, #24]
    45c6:	2b00      	cmp	r3, #0
    45c8:	d102      	bne.n	45d0 <setvbuf+0x20>
    45ca:	0030      	movs	r0, r6
    45cc:	f000 f99c 	bl	4908 <__sinit>
    45d0:	4b49      	ldr	r3, [pc, #292]	; (46f8 <setvbuf+0x148>)
    45d2:	429c      	cmp	r4, r3
    45d4:	d150      	bne.n	4678 <setvbuf+0xc8>
    45d6:	6874      	ldr	r4, [r6, #4]
    45d8:	9b00      	ldr	r3, [sp, #0]
    45da:	2b02      	cmp	r3, #2
    45dc:	d005      	beq.n	45ea <setvbuf+0x3a>
    45de:	2b01      	cmp	r3, #1
    45e0:	d900      	bls.n	45e4 <setvbuf+0x34>
    45e2:	e084      	b.n	46ee <setvbuf+0x13e>
    45e4:	2d00      	cmp	r5, #0
    45e6:	da00      	bge.n	45ea <setvbuf+0x3a>
    45e8:	e081      	b.n	46ee <setvbuf+0x13e>
    45ea:	0021      	movs	r1, r4
    45ec:	0030      	movs	r0, r6
    45ee:	f000 f91d 	bl	482c <_fflush_r>
    45f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
    45f4:	2900      	cmp	r1, #0
    45f6:	d008      	beq.n	460a <setvbuf+0x5a>
    45f8:	0023      	movs	r3, r4
    45fa:	3344      	adds	r3, #68	; 0x44
    45fc:	4299      	cmp	r1, r3
    45fe:	d002      	beq.n	4606 <setvbuf+0x56>
    4600:	0030      	movs	r0, r6
    4602:	f7ff fe79 	bl	42f8 <_free_r>
    4606:	2300      	movs	r3, #0
    4608:	6363      	str	r3, [r4, #52]	; 0x34
    460a:	2300      	movs	r3, #0
    460c:	61a3      	str	r3, [r4, #24]
    460e:	6063      	str	r3, [r4, #4]
    4610:	89a3      	ldrh	r3, [r4, #12]
    4612:	061b      	lsls	r3, r3, #24
    4614:	d503      	bpl.n	461e <setvbuf+0x6e>
    4616:	6921      	ldr	r1, [r4, #16]
    4618:	0030      	movs	r0, r6
    461a:	f7ff fe6d 	bl	42f8 <_free_r>
    461e:	89a3      	ldrh	r3, [r4, #12]
    4620:	4a36      	ldr	r2, [pc, #216]	; (46fc <setvbuf+0x14c>)
    4622:	4013      	ands	r3, r2
    4624:	81a3      	strh	r3, [r4, #12]
    4626:	9b00      	ldr	r3, [sp, #0]
    4628:	2b02      	cmp	r3, #2
    462a:	d05a      	beq.n	46e2 <setvbuf+0x132>
    462c:	ab03      	add	r3, sp, #12
    462e:	aa02      	add	r2, sp, #8
    4630:	0021      	movs	r1, r4
    4632:	0030      	movs	r0, r6
    4634:	f000 f9fe 	bl	4a34 <__swhatbuf_r>
    4638:	89a3      	ldrh	r3, [r4, #12]
    463a:	4318      	orrs	r0, r3
    463c:	81a0      	strh	r0, [r4, #12]
    463e:	2d00      	cmp	r5, #0
    4640:	d124      	bne.n	468c <setvbuf+0xdc>
    4642:	9d02      	ldr	r5, [sp, #8]
    4644:	0028      	movs	r0, r5
    4646:	f7ff fe3b 	bl	42c0 <malloc>
    464a:	9501      	str	r5, [sp, #4]
    464c:	1e07      	subs	r7, r0, #0
    464e:	d142      	bne.n	46d6 <setvbuf+0x126>
    4650:	9b02      	ldr	r3, [sp, #8]
    4652:	9301      	str	r3, [sp, #4]
    4654:	42ab      	cmp	r3, r5
    4656:	d139      	bne.n	46cc <setvbuf+0x11c>
    4658:	2001      	movs	r0, #1
    465a:	4240      	negs	r0, r0
    465c:	2302      	movs	r3, #2
    465e:	89a2      	ldrh	r2, [r4, #12]
    4660:	4313      	orrs	r3, r2
    4662:	81a3      	strh	r3, [r4, #12]
    4664:	2300      	movs	r3, #0
    4666:	60a3      	str	r3, [r4, #8]
    4668:	0023      	movs	r3, r4
    466a:	3347      	adds	r3, #71	; 0x47
    466c:	6023      	str	r3, [r4, #0]
    466e:	6123      	str	r3, [r4, #16]
    4670:	2301      	movs	r3, #1
    4672:	6163      	str	r3, [r4, #20]
    4674:	b005      	add	sp, #20
    4676:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4678:	4b21      	ldr	r3, [pc, #132]	; (4700 <setvbuf+0x150>)
    467a:	429c      	cmp	r4, r3
    467c:	d101      	bne.n	4682 <setvbuf+0xd2>
    467e:	68b4      	ldr	r4, [r6, #8]
    4680:	e7aa      	b.n	45d8 <setvbuf+0x28>
    4682:	4b20      	ldr	r3, [pc, #128]	; (4704 <setvbuf+0x154>)
    4684:	429c      	cmp	r4, r3
    4686:	d1a7      	bne.n	45d8 <setvbuf+0x28>
    4688:	68f4      	ldr	r4, [r6, #12]
    468a:	e7a5      	b.n	45d8 <setvbuf+0x28>
    468c:	2f00      	cmp	r7, #0
    468e:	d0d9      	beq.n	4644 <setvbuf+0x94>
    4690:	69b3      	ldr	r3, [r6, #24]
    4692:	2b00      	cmp	r3, #0
    4694:	d102      	bne.n	469c <setvbuf+0xec>
    4696:	0030      	movs	r0, r6
    4698:	f000 f936 	bl	4908 <__sinit>
    469c:	9b00      	ldr	r3, [sp, #0]
    469e:	2b01      	cmp	r3, #1
    46a0:	d103      	bne.n	46aa <setvbuf+0xfa>
    46a2:	89a3      	ldrh	r3, [r4, #12]
    46a4:	9a00      	ldr	r2, [sp, #0]
    46a6:	431a      	orrs	r2, r3
    46a8:	81a2      	strh	r2, [r4, #12]
    46aa:	2008      	movs	r0, #8
    46ac:	89a3      	ldrh	r3, [r4, #12]
    46ae:	6027      	str	r7, [r4, #0]
    46b0:	6127      	str	r7, [r4, #16]
    46b2:	6165      	str	r5, [r4, #20]
    46b4:	4018      	ands	r0, r3
    46b6:	d018      	beq.n	46ea <setvbuf+0x13a>
    46b8:	2001      	movs	r0, #1
    46ba:	4018      	ands	r0, r3
    46bc:	2300      	movs	r3, #0
    46be:	4298      	cmp	r0, r3
    46c0:	d011      	beq.n	46e6 <setvbuf+0x136>
    46c2:	426d      	negs	r5, r5
    46c4:	60a3      	str	r3, [r4, #8]
    46c6:	61a5      	str	r5, [r4, #24]
    46c8:	0018      	movs	r0, r3
    46ca:	e7d3      	b.n	4674 <setvbuf+0xc4>
    46cc:	9801      	ldr	r0, [sp, #4]
    46ce:	f7ff fdf7 	bl	42c0 <malloc>
    46d2:	1e07      	subs	r7, r0, #0
    46d4:	d0c0      	beq.n	4658 <setvbuf+0xa8>
    46d6:	2380      	movs	r3, #128	; 0x80
    46d8:	89a2      	ldrh	r2, [r4, #12]
    46da:	9d01      	ldr	r5, [sp, #4]
    46dc:	4313      	orrs	r3, r2
    46de:	81a3      	strh	r3, [r4, #12]
    46e0:	e7d6      	b.n	4690 <setvbuf+0xe0>
    46e2:	2000      	movs	r0, #0
    46e4:	e7ba      	b.n	465c <setvbuf+0xac>
    46e6:	60a5      	str	r5, [r4, #8]
    46e8:	e7c4      	b.n	4674 <setvbuf+0xc4>
    46ea:	60a0      	str	r0, [r4, #8]
    46ec:	e7c2      	b.n	4674 <setvbuf+0xc4>
    46ee:	2001      	movs	r0, #1
    46f0:	4240      	negs	r0, r0
    46f2:	e7bf      	b.n	4674 <setvbuf+0xc4>
    46f4:	20000178 	.word	0x20000178
    46f8:	000077f0 	.word	0x000077f0
    46fc:	fffff35c 	.word	0xfffff35c
    4700:	00007810 	.word	0x00007810
    4704:	000077d0 	.word	0x000077d0

00004708 <strlen>:
    4708:	2300      	movs	r3, #0
    470a:	5cc2      	ldrb	r2, [r0, r3]
    470c:	3301      	adds	r3, #1
    470e:	2a00      	cmp	r2, #0
    4710:	d1fb      	bne.n	470a <strlen+0x2>
    4712:	1e58      	subs	r0, r3, #1
    4714:	4770      	bx	lr
	...

00004718 <__sflush_r>:
    4718:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    471a:	898a      	ldrh	r2, [r1, #12]
    471c:	0005      	movs	r5, r0
    471e:	000c      	movs	r4, r1
    4720:	0713      	lsls	r3, r2, #28
    4722:	d460      	bmi.n	47e6 <__sflush_r+0xce>
    4724:	684b      	ldr	r3, [r1, #4]
    4726:	2b00      	cmp	r3, #0
    4728:	dc04      	bgt.n	4734 <__sflush_r+0x1c>
    472a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    472c:	2b00      	cmp	r3, #0
    472e:	dc01      	bgt.n	4734 <__sflush_r+0x1c>
    4730:	2000      	movs	r0, #0
    4732:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4734:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    4736:	2f00      	cmp	r7, #0
    4738:	d0fa      	beq.n	4730 <__sflush_r+0x18>
    473a:	2300      	movs	r3, #0
    473c:	682e      	ldr	r6, [r5, #0]
    473e:	602b      	str	r3, [r5, #0]
    4740:	2380      	movs	r3, #128	; 0x80
    4742:	015b      	lsls	r3, r3, #5
    4744:	401a      	ands	r2, r3
    4746:	d034      	beq.n	47b2 <__sflush_r+0x9a>
    4748:	6d60      	ldr	r0, [r4, #84]	; 0x54
    474a:	89a3      	ldrh	r3, [r4, #12]
    474c:	075b      	lsls	r3, r3, #29
    474e:	d506      	bpl.n	475e <__sflush_r+0x46>
    4750:	6863      	ldr	r3, [r4, #4]
    4752:	1ac0      	subs	r0, r0, r3
    4754:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4756:	2b00      	cmp	r3, #0
    4758:	d001      	beq.n	475e <__sflush_r+0x46>
    475a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    475c:	1ac0      	subs	r0, r0, r3
    475e:	0002      	movs	r2, r0
    4760:	6a21      	ldr	r1, [r4, #32]
    4762:	2300      	movs	r3, #0
    4764:	0028      	movs	r0, r5
    4766:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    4768:	47b8      	blx	r7
    476a:	89a1      	ldrh	r1, [r4, #12]
    476c:	1c43      	adds	r3, r0, #1
    476e:	d106      	bne.n	477e <__sflush_r+0x66>
    4770:	682b      	ldr	r3, [r5, #0]
    4772:	2b1d      	cmp	r3, #29
    4774:	d831      	bhi.n	47da <__sflush_r+0xc2>
    4776:	4a2c      	ldr	r2, [pc, #176]	; (4828 <__sflush_r+0x110>)
    4778:	40da      	lsrs	r2, r3
    477a:	07d3      	lsls	r3, r2, #31
    477c:	d52d      	bpl.n	47da <__sflush_r+0xc2>
    477e:	2300      	movs	r3, #0
    4780:	6063      	str	r3, [r4, #4]
    4782:	6923      	ldr	r3, [r4, #16]
    4784:	6023      	str	r3, [r4, #0]
    4786:	04cb      	lsls	r3, r1, #19
    4788:	d505      	bpl.n	4796 <__sflush_r+0x7e>
    478a:	1c43      	adds	r3, r0, #1
    478c:	d102      	bne.n	4794 <__sflush_r+0x7c>
    478e:	682b      	ldr	r3, [r5, #0]
    4790:	2b00      	cmp	r3, #0
    4792:	d100      	bne.n	4796 <__sflush_r+0x7e>
    4794:	6560      	str	r0, [r4, #84]	; 0x54
    4796:	6b61      	ldr	r1, [r4, #52]	; 0x34
    4798:	602e      	str	r6, [r5, #0]
    479a:	2900      	cmp	r1, #0
    479c:	d0c8      	beq.n	4730 <__sflush_r+0x18>
    479e:	0023      	movs	r3, r4
    47a0:	3344      	adds	r3, #68	; 0x44
    47a2:	4299      	cmp	r1, r3
    47a4:	d002      	beq.n	47ac <__sflush_r+0x94>
    47a6:	0028      	movs	r0, r5
    47a8:	f7ff fda6 	bl	42f8 <_free_r>
    47ac:	2000      	movs	r0, #0
    47ae:	6360      	str	r0, [r4, #52]	; 0x34
    47b0:	e7bf      	b.n	4732 <__sflush_r+0x1a>
    47b2:	2301      	movs	r3, #1
    47b4:	6a21      	ldr	r1, [r4, #32]
    47b6:	0028      	movs	r0, r5
    47b8:	47b8      	blx	r7
    47ba:	1c43      	adds	r3, r0, #1
    47bc:	d1c5      	bne.n	474a <__sflush_r+0x32>
    47be:	682b      	ldr	r3, [r5, #0]
    47c0:	2b00      	cmp	r3, #0
    47c2:	d0c2      	beq.n	474a <__sflush_r+0x32>
    47c4:	2b1d      	cmp	r3, #29
    47c6:	d001      	beq.n	47cc <__sflush_r+0xb4>
    47c8:	2b16      	cmp	r3, #22
    47ca:	d101      	bne.n	47d0 <__sflush_r+0xb8>
    47cc:	602e      	str	r6, [r5, #0]
    47ce:	e7af      	b.n	4730 <__sflush_r+0x18>
    47d0:	2340      	movs	r3, #64	; 0x40
    47d2:	89a2      	ldrh	r2, [r4, #12]
    47d4:	4313      	orrs	r3, r2
    47d6:	81a3      	strh	r3, [r4, #12]
    47d8:	e7ab      	b.n	4732 <__sflush_r+0x1a>
    47da:	2340      	movs	r3, #64	; 0x40
    47dc:	430b      	orrs	r3, r1
    47de:	2001      	movs	r0, #1
    47e0:	81a3      	strh	r3, [r4, #12]
    47e2:	4240      	negs	r0, r0
    47e4:	e7a5      	b.n	4732 <__sflush_r+0x1a>
    47e6:	690f      	ldr	r7, [r1, #16]
    47e8:	2f00      	cmp	r7, #0
    47ea:	d0a1      	beq.n	4730 <__sflush_r+0x18>
    47ec:	680b      	ldr	r3, [r1, #0]
    47ee:	600f      	str	r7, [r1, #0]
    47f0:	1bdb      	subs	r3, r3, r7
    47f2:	9301      	str	r3, [sp, #4]
    47f4:	2300      	movs	r3, #0
    47f6:	0792      	lsls	r2, r2, #30
    47f8:	d100      	bne.n	47fc <__sflush_r+0xe4>
    47fa:	694b      	ldr	r3, [r1, #20]
    47fc:	60a3      	str	r3, [r4, #8]
    47fe:	9b01      	ldr	r3, [sp, #4]
    4800:	2b00      	cmp	r3, #0
    4802:	dc00      	bgt.n	4806 <__sflush_r+0xee>
    4804:	e794      	b.n	4730 <__sflush_r+0x18>
    4806:	9b01      	ldr	r3, [sp, #4]
    4808:	003a      	movs	r2, r7
    480a:	6a21      	ldr	r1, [r4, #32]
    480c:	0028      	movs	r0, r5
    480e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    4810:	47b0      	blx	r6
    4812:	2800      	cmp	r0, #0
    4814:	dc03      	bgt.n	481e <__sflush_r+0x106>
    4816:	2340      	movs	r3, #64	; 0x40
    4818:	89a2      	ldrh	r2, [r4, #12]
    481a:	4313      	orrs	r3, r2
    481c:	e7df      	b.n	47de <__sflush_r+0xc6>
    481e:	9b01      	ldr	r3, [sp, #4]
    4820:	183f      	adds	r7, r7, r0
    4822:	1a1b      	subs	r3, r3, r0
    4824:	9301      	str	r3, [sp, #4]
    4826:	e7ea      	b.n	47fe <__sflush_r+0xe6>
    4828:	20400001 	.word	0x20400001

0000482c <_fflush_r>:
    482c:	690b      	ldr	r3, [r1, #16]
    482e:	b570      	push	{r4, r5, r6, lr}
    4830:	0005      	movs	r5, r0
    4832:	000c      	movs	r4, r1
    4834:	2b00      	cmp	r3, #0
    4836:	d101      	bne.n	483c <_fflush_r+0x10>
    4838:	2000      	movs	r0, #0
    483a:	bd70      	pop	{r4, r5, r6, pc}
    483c:	2800      	cmp	r0, #0
    483e:	d004      	beq.n	484a <_fflush_r+0x1e>
    4840:	6983      	ldr	r3, [r0, #24]
    4842:	2b00      	cmp	r3, #0
    4844:	d101      	bne.n	484a <_fflush_r+0x1e>
    4846:	f000 f85f 	bl	4908 <__sinit>
    484a:	4b0b      	ldr	r3, [pc, #44]	; (4878 <_fflush_r+0x4c>)
    484c:	429c      	cmp	r4, r3
    484e:	d109      	bne.n	4864 <_fflush_r+0x38>
    4850:	686c      	ldr	r4, [r5, #4]
    4852:	220c      	movs	r2, #12
    4854:	5ea3      	ldrsh	r3, [r4, r2]
    4856:	2b00      	cmp	r3, #0
    4858:	d0ee      	beq.n	4838 <_fflush_r+0xc>
    485a:	0021      	movs	r1, r4
    485c:	0028      	movs	r0, r5
    485e:	f7ff ff5b 	bl	4718 <__sflush_r>
    4862:	e7ea      	b.n	483a <_fflush_r+0xe>
    4864:	4b05      	ldr	r3, [pc, #20]	; (487c <_fflush_r+0x50>)
    4866:	429c      	cmp	r4, r3
    4868:	d101      	bne.n	486e <_fflush_r+0x42>
    486a:	68ac      	ldr	r4, [r5, #8]
    486c:	e7f1      	b.n	4852 <_fflush_r+0x26>
    486e:	4b04      	ldr	r3, [pc, #16]	; (4880 <_fflush_r+0x54>)
    4870:	429c      	cmp	r4, r3
    4872:	d1ee      	bne.n	4852 <_fflush_r+0x26>
    4874:	68ec      	ldr	r4, [r5, #12]
    4876:	e7ec      	b.n	4852 <_fflush_r+0x26>
    4878:	000077f0 	.word	0x000077f0
    487c:	00007810 	.word	0x00007810
    4880:	000077d0 	.word	0x000077d0

00004884 <_cleanup_r>:
    4884:	b510      	push	{r4, lr}
    4886:	4902      	ldr	r1, [pc, #8]	; (4890 <_cleanup_r+0xc>)
    4888:	f000 f8b2 	bl	49f0 <_fwalk_reent>
    488c:	bd10      	pop	{r4, pc}
    488e:	46c0      	nop			; (mov r8, r8)
    4890:	0000482d 	.word	0x0000482d

00004894 <std.isra.0>:
    4894:	2300      	movs	r3, #0
    4896:	b510      	push	{r4, lr}
    4898:	0004      	movs	r4, r0
    489a:	6003      	str	r3, [r0, #0]
    489c:	6043      	str	r3, [r0, #4]
    489e:	6083      	str	r3, [r0, #8]
    48a0:	8181      	strh	r1, [r0, #12]
    48a2:	6643      	str	r3, [r0, #100]	; 0x64
    48a4:	81c2      	strh	r2, [r0, #14]
    48a6:	6103      	str	r3, [r0, #16]
    48a8:	6143      	str	r3, [r0, #20]
    48aa:	6183      	str	r3, [r0, #24]
    48ac:	0019      	movs	r1, r3
    48ae:	2208      	movs	r2, #8
    48b0:	305c      	adds	r0, #92	; 0x5c
    48b2:	f7ff fd18 	bl	42e6 <memset>
    48b6:	4b05      	ldr	r3, [pc, #20]	; (48cc <std.isra.0+0x38>)
    48b8:	6224      	str	r4, [r4, #32]
    48ba:	6263      	str	r3, [r4, #36]	; 0x24
    48bc:	4b04      	ldr	r3, [pc, #16]	; (48d0 <std.isra.0+0x3c>)
    48be:	62a3      	str	r3, [r4, #40]	; 0x28
    48c0:	4b04      	ldr	r3, [pc, #16]	; (48d4 <std.isra.0+0x40>)
    48c2:	62e3      	str	r3, [r4, #44]	; 0x2c
    48c4:	4b04      	ldr	r3, [pc, #16]	; (48d8 <std.isra.0+0x44>)
    48c6:	6323      	str	r3, [r4, #48]	; 0x30
    48c8:	bd10      	pop	{r4, pc}
    48ca:	46c0      	nop			; (mov r8, r8)
    48cc:	00005115 	.word	0x00005115
    48d0:	0000513d 	.word	0x0000513d
    48d4:	00005175 	.word	0x00005175
    48d8:	000051a1 	.word	0x000051a1

000048dc <__sfmoreglue>:
    48dc:	b570      	push	{r4, r5, r6, lr}
    48de:	2568      	movs	r5, #104	; 0x68
    48e0:	1e4a      	subs	r2, r1, #1
    48e2:	4355      	muls	r5, r2
    48e4:	000e      	movs	r6, r1
    48e6:	0029      	movs	r1, r5
    48e8:	3174      	adds	r1, #116	; 0x74
    48ea:	f7ff fd4f 	bl	438c <_malloc_r>
    48ee:	1e04      	subs	r4, r0, #0
    48f0:	d008      	beq.n	4904 <__sfmoreglue+0x28>
    48f2:	2100      	movs	r1, #0
    48f4:	002a      	movs	r2, r5
    48f6:	6001      	str	r1, [r0, #0]
    48f8:	6046      	str	r6, [r0, #4]
    48fa:	300c      	adds	r0, #12
    48fc:	60a0      	str	r0, [r4, #8]
    48fe:	3268      	adds	r2, #104	; 0x68
    4900:	f7ff fcf1 	bl	42e6 <memset>
    4904:	0020      	movs	r0, r4
    4906:	bd70      	pop	{r4, r5, r6, pc}

00004908 <__sinit>:
    4908:	6983      	ldr	r3, [r0, #24]
    490a:	b513      	push	{r0, r1, r4, lr}
    490c:	0004      	movs	r4, r0
    490e:	2b00      	cmp	r3, #0
    4910:	d128      	bne.n	4964 <__sinit+0x5c>
    4912:	6483      	str	r3, [r0, #72]	; 0x48
    4914:	64c3      	str	r3, [r0, #76]	; 0x4c
    4916:	6503      	str	r3, [r0, #80]	; 0x50
    4918:	4b13      	ldr	r3, [pc, #76]	; (4968 <__sinit+0x60>)
    491a:	4a14      	ldr	r2, [pc, #80]	; (496c <__sinit+0x64>)
    491c:	681b      	ldr	r3, [r3, #0]
    491e:	6282      	str	r2, [r0, #40]	; 0x28
    4920:	9301      	str	r3, [sp, #4]
    4922:	4298      	cmp	r0, r3
    4924:	d101      	bne.n	492a <__sinit+0x22>
    4926:	2301      	movs	r3, #1
    4928:	6183      	str	r3, [r0, #24]
    492a:	0020      	movs	r0, r4
    492c:	f000 f820 	bl	4970 <__sfp>
    4930:	6060      	str	r0, [r4, #4]
    4932:	0020      	movs	r0, r4
    4934:	f000 f81c 	bl	4970 <__sfp>
    4938:	60a0      	str	r0, [r4, #8]
    493a:	0020      	movs	r0, r4
    493c:	f000 f818 	bl	4970 <__sfp>
    4940:	2200      	movs	r2, #0
    4942:	60e0      	str	r0, [r4, #12]
    4944:	2104      	movs	r1, #4
    4946:	6860      	ldr	r0, [r4, #4]
    4948:	f7ff ffa4 	bl	4894 <std.isra.0>
    494c:	2201      	movs	r2, #1
    494e:	2109      	movs	r1, #9
    4950:	68a0      	ldr	r0, [r4, #8]
    4952:	f7ff ff9f 	bl	4894 <std.isra.0>
    4956:	2202      	movs	r2, #2
    4958:	2112      	movs	r1, #18
    495a:	68e0      	ldr	r0, [r4, #12]
    495c:	f7ff ff9a 	bl	4894 <std.isra.0>
    4960:	2301      	movs	r3, #1
    4962:	61a3      	str	r3, [r4, #24]
    4964:	bd13      	pop	{r0, r1, r4, pc}
    4966:	46c0      	nop			; (mov r8, r8)
    4968:	000077cc 	.word	0x000077cc
    496c:	00004885 	.word	0x00004885

00004970 <__sfp>:
    4970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4972:	4b1e      	ldr	r3, [pc, #120]	; (49ec <__sfp+0x7c>)
    4974:	0007      	movs	r7, r0
    4976:	681e      	ldr	r6, [r3, #0]
    4978:	69b3      	ldr	r3, [r6, #24]
    497a:	2b00      	cmp	r3, #0
    497c:	d102      	bne.n	4984 <__sfp+0x14>
    497e:	0030      	movs	r0, r6
    4980:	f7ff ffc2 	bl	4908 <__sinit>
    4984:	3648      	adds	r6, #72	; 0x48
    4986:	68b4      	ldr	r4, [r6, #8]
    4988:	6873      	ldr	r3, [r6, #4]
    498a:	3b01      	subs	r3, #1
    498c:	d504      	bpl.n	4998 <__sfp+0x28>
    498e:	6833      	ldr	r3, [r6, #0]
    4990:	2b00      	cmp	r3, #0
    4992:	d007      	beq.n	49a4 <__sfp+0x34>
    4994:	6836      	ldr	r6, [r6, #0]
    4996:	e7f6      	b.n	4986 <__sfp+0x16>
    4998:	220c      	movs	r2, #12
    499a:	5ea5      	ldrsh	r5, [r4, r2]
    499c:	2d00      	cmp	r5, #0
    499e:	d00d      	beq.n	49bc <__sfp+0x4c>
    49a0:	3468      	adds	r4, #104	; 0x68
    49a2:	e7f2      	b.n	498a <__sfp+0x1a>
    49a4:	2104      	movs	r1, #4
    49a6:	0038      	movs	r0, r7
    49a8:	f7ff ff98 	bl	48dc <__sfmoreglue>
    49ac:	6030      	str	r0, [r6, #0]
    49ae:	2800      	cmp	r0, #0
    49b0:	d1f0      	bne.n	4994 <__sfp+0x24>
    49b2:	230c      	movs	r3, #12
    49b4:	0004      	movs	r4, r0
    49b6:	603b      	str	r3, [r7, #0]
    49b8:	0020      	movs	r0, r4
    49ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    49bc:	2301      	movs	r3, #1
    49be:	0020      	movs	r0, r4
    49c0:	425b      	negs	r3, r3
    49c2:	81e3      	strh	r3, [r4, #14]
    49c4:	3302      	adds	r3, #2
    49c6:	81a3      	strh	r3, [r4, #12]
    49c8:	6665      	str	r5, [r4, #100]	; 0x64
    49ca:	6025      	str	r5, [r4, #0]
    49cc:	60a5      	str	r5, [r4, #8]
    49ce:	6065      	str	r5, [r4, #4]
    49d0:	6125      	str	r5, [r4, #16]
    49d2:	6165      	str	r5, [r4, #20]
    49d4:	61a5      	str	r5, [r4, #24]
    49d6:	2208      	movs	r2, #8
    49d8:	0029      	movs	r1, r5
    49da:	305c      	adds	r0, #92	; 0x5c
    49dc:	f7ff fc83 	bl	42e6 <memset>
    49e0:	6365      	str	r5, [r4, #52]	; 0x34
    49e2:	63a5      	str	r5, [r4, #56]	; 0x38
    49e4:	64a5      	str	r5, [r4, #72]	; 0x48
    49e6:	64e5      	str	r5, [r4, #76]	; 0x4c
    49e8:	e7e6      	b.n	49b8 <__sfp+0x48>
    49ea:	46c0      	nop			; (mov r8, r8)
    49ec:	000077cc 	.word	0x000077cc

000049f0 <_fwalk_reent>:
    49f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    49f2:	0004      	movs	r4, r0
    49f4:	0007      	movs	r7, r0
    49f6:	2600      	movs	r6, #0
    49f8:	9101      	str	r1, [sp, #4]
    49fa:	3448      	adds	r4, #72	; 0x48
    49fc:	2c00      	cmp	r4, #0
    49fe:	d101      	bne.n	4a04 <_fwalk_reent+0x14>
    4a00:	0030      	movs	r0, r6
    4a02:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4a04:	6863      	ldr	r3, [r4, #4]
    4a06:	68a5      	ldr	r5, [r4, #8]
    4a08:	9300      	str	r3, [sp, #0]
    4a0a:	9b00      	ldr	r3, [sp, #0]
    4a0c:	3b01      	subs	r3, #1
    4a0e:	9300      	str	r3, [sp, #0]
    4a10:	d501      	bpl.n	4a16 <_fwalk_reent+0x26>
    4a12:	6824      	ldr	r4, [r4, #0]
    4a14:	e7f2      	b.n	49fc <_fwalk_reent+0xc>
    4a16:	89ab      	ldrh	r3, [r5, #12]
    4a18:	2b01      	cmp	r3, #1
    4a1a:	d908      	bls.n	4a2e <_fwalk_reent+0x3e>
    4a1c:	220e      	movs	r2, #14
    4a1e:	5eab      	ldrsh	r3, [r5, r2]
    4a20:	3301      	adds	r3, #1
    4a22:	d004      	beq.n	4a2e <_fwalk_reent+0x3e>
    4a24:	0029      	movs	r1, r5
    4a26:	0038      	movs	r0, r7
    4a28:	9b01      	ldr	r3, [sp, #4]
    4a2a:	4798      	blx	r3
    4a2c:	4306      	orrs	r6, r0
    4a2e:	3568      	adds	r5, #104	; 0x68
    4a30:	e7eb      	b.n	4a0a <_fwalk_reent+0x1a>
	...

00004a34 <__swhatbuf_r>:
    4a34:	b570      	push	{r4, r5, r6, lr}
    4a36:	000e      	movs	r6, r1
    4a38:	001d      	movs	r5, r3
    4a3a:	230e      	movs	r3, #14
    4a3c:	5ec9      	ldrsh	r1, [r1, r3]
    4a3e:	b090      	sub	sp, #64	; 0x40
    4a40:	0014      	movs	r4, r2
    4a42:	2900      	cmp	r1, #0
    4a44:	da07      	bge.n	4a56 <__swhatbuf_r+0x22>
    4a46:	2300      	movs	r3, #0
    4a48:	602b      	str	r3, [r5, #0]
    4a4a:	89b3      	ldrh	r3, [r6, #12]
    4a4c:	061b      	lsls	r3, r3, #24
    4a4e:	d411      	bmi.n	4a74 <__swhatbuf_r+0x40>
    4a50:	2380      	movs	r3, #128	; 0x80
    4a52:	00db      	lsls	r3, r3, #3
    4a54:	e00f      	b.n	4a76 <__swhatbuf_r+0x42>
    4a56:	aa01      	add	r2, sp, #4
    4a58:	f000 fc9a 	bl	5390 <_fstat_r>
    4a5c:	2800      	cmp	r0, #0
    4a5e:	dbf2      	blt.n	4a46 <__swhatbuf_r+0x12>
    4a60:	22f0      	movs	r2, #240	; 0xf0
    4a62:	9b02      	ldr	r3, [sp, #8]
    4a64:	0212      	lsls	r2, r2, #8
    4a66:	4013      	ands	r3, r2
    4a68:	4a05      	ldr	r2, [pc, #20]	; (4a80 <__swhatbuf_r+0x4c>)
    4a6a:	189b      	adds	r3, r3, r2
    4a6c:	425a      	negs	r2, r3
    4a6e:	4153      	adcs	r3, r2
    4a70:	602b      	str	r3, [r5, #0]
    4a72:	e7ed      	b.n	4a50 <__swhatbuf_r+0x1c>
    4a74:	2340      	movs	r3, #64	; 0x40
    4a76:	2000      	movs	r0, #0
    4a78:	6023      	str	r3, [r4, #0]
    4a7a:	b010      	add	sp, #64	; 0x40
    4a7c:	bd70      	pop	{r4, r5, r6, pc}
    4a7e:	46c0      	nop			; (mov r8, r8)
    4a80:	ffffe000 	.word	0xffffe000

00004a84 <__smakebuf_r>:
    4a84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4a86:	2602      	movs	r6, #2
    4a88:	898b      	ldrh	r3, [r1, #12]
    4a8a:	0005      	movs	r5, r0
    4a8c:	000c      	movs	r4, r1
    4a8e:	4233      	tst	r3, r6
    4a90:	d006      	beq.n	4aa0 <__smakebuf_r+0x1c>
    4a92:	0023      	movs	r3, r4
    4a94:	3347      	adds	r3, #71	; 0x47
    4a96:	6023      	str	r3, [r4, #0]
    4a98:	6123      	str	r3, [r4, #16]
    4a9a:	2301      	movs	r3, #1
    4a9c:	6163      	str	r3, [r4, #20]
    4a9e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    4aa0:	ab01      	add	r3, sp, #4
    4aa2:	466a      	mov	r2, sp
    4aa4:	f7ff ffc6 	bl	4a34 <__swhatbuf_r>
    4aa8:	9900      	ldr	r1, [sp, #0]
    4aaa:	0007      	movs	r7, r0
    4aac:	0028      	movs	r0, r5
    4aae:	f7ff fc6d 	bl	438c <_malloc_r>
    4ab2:	2800      	cmp	r0, #0
    4ab4:	d108      	bne.n	4ac8 <__smakebuf_r+0x44>
    4ab6:	220c      	movs	r2, #12
    4ab8:	5ea3      	ldrsh	r3, [r4, r2]
    4aba:	059a      	lsls	r2, r3, #22
    4abc:	d4ef      	bmi.n	4a9e <__smakebuf_r+0x1a>
    4abe:	2203      	movs	r2, #3
    4ac0:	4393      	bics	r3, r2
    4ac2:	431e      	orrs	r6, r3
    4ac4:	81a6      	strh	r6, [r4, #12]
    4ac6:	e7e4      	b.n	4a92 <__smakebuf_r+0xe>
    4ac8:	4b0f      	ldr	r3, [pc, #60]	; (4b08 <__smakebuf_r+0x84>)
    4aca:	62ab      	str	r3, [r5, #40]	; 0x28
    4acc:	2380      	movs	r3, #128	; 0x80
    4ace:	89a2      	ldrh	r2, [r4, #12]
    4ad0:	6020      	str	r0, [r4, #0]
    4ad2:	4313      	orrs	r3, r2
    4ad4:	81a3      	strh	r3, [r4, #12]
    4ad6:	9b00      	ldr	r3, [sp, #0]
    4ad8:	6120      	str	r0, [r4, #16]
    4ada:	6163      	str	r3, [r4, #20]
    4adc:	9b01      	ldr	r3, [sp, #4]
    4ade:	2b00      	cmp	r3, #0
    4ae0:	d00d      	beq.n	4afe <__smakebuf_r+0x7a>
    4ae2:	230e      	movs	r3, #14
    4ae4:	5ee1      	ldrsh	r1, [r4, r3]
    4ae6:	0028      	movs	r0, r5
    4ae8:	f000 fc64 	bl	53b4 <_isatty_r>
    4aec:	2800      	cmp	r0, #0
    4aee:	d006      	beq.n	4afe <__smakebuf_r+0x7a>
    4af0:	2203      	movs	r2, #3
    4af2:	89a3      	ldrh	r3, [r4, #12]
    4af4:	4393      	bics	r3, r2
    4af6:	001a      	movs	r2, r3
    4af8:	2301      	movs	r3, #1
    4afa:	4313      	orrs	r3, r2
    4afc:	81a3      	strh	r3, [r4, #12]
    4afe:	89a0      	ldrh	r0, [r4, #12]
    4b00:	4338      	orrs	r0, r7
    4b02:	81a0      	strh	r0, [r4, #12]
    4b04:	e7cb      	b.n	4a9e <__smakebuf_r+0x1a>
    4b06:	46c0      	nop			; (mov r8, r8)
    4b08:	00004885 	.word	0x00004885

00004b0c <__malloc_lock>:
    4b0c:	4770      	bx	lr

00004b0e <__malloc_unlock>:
    4b0e:	4770      	bx	lr

00004b10 <__sfputc_r>:
    4b10:	6893      	ldr	r3, [r2, #8]
    4b12:	b510      	push	{r4, lr}
    4b14:	3b01      	subs	r3, #1
    4b16:	6093      	str	r3, [r2, #8]
    4b18:	2b00      	cmp	r3, #0
    4b1a:	da05      	bge.n	4b28 <__sfputc_r+0x18>
    4b1c:	6994      	ldr	r4, [r2, #24]
    4b1e:	42a3      	cmp	r3, r4
    4b20:	db08      	blt.n	4b34 <__sfputc_r+0x24>
    4b22:	b2cb      	uxtb	r3, r1
    4b24:	2b0a      	cmp	r3, #10
    4b26:	d005      	beq.n	4b34 <__sfputc_r+0x24>
    4b28:	6813      	ldr	r3, [r2, #0]
    4b2a:	1c58      	adds	r0, r3, #1
    4b2c:	6010      	str	r0, [r2, #0]
    4b2e:	7019      	strb	r1, [r3, #0]
    4b30:	b2c8      	uxtb	r0, r1
    4b32:	bd10      	pop	{r4, pc}
    4b34:	f000 fb3a 	bl	51ac <__swbuf_r>
    4b38:	e7fb      	b.n	4b32 <__sfputc_r+0x22>

00004b3a <__sfputs_r>:
    4b3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4b3c:	0006      	movs	r6, r0
    4b3e:	000f      	movs	r7, r1
    4b40:	0014      	movs	r4, r2
    4b42:	18d5      	adds	r5, r2, r3
    4b44:	42ac      	cmp	r4, r5
    4b46:	d101      	bne.n	4b4c <__sfputs_r+0x12>
    4b48:	2000      	movs	r0, #0
    4b4a:	e007      	b.n	4b5c <__sfputs_r+0x22>
    4b4c:	7821      	ldrb	r1, [r4, #0]
    4b4e:	003a      	movs	r2, r7
    4b50:	0030      	movs	r0, r6
    4b52:	f7ff ffdd 	bl	4b10 <__sfputc_r>
    4b56:	3401      	adds	r4, #1
    4b58:	1c43      	adds	r3, r0, #1
    4b5a:	d1f3      	bne.n	4b44 <__sfputs_r+0xa>
    4b5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00004b60 <_vfiprintf_r>:
    4b60:	b5f0      	push	{r4, r5, r6, r7, lr}
    4b62:	b09f      	sub	sp, #124	; 0x7c
    4b64:	0006      	movs	r6, r0
    4b66:	000f      	movs	r7, r1
    4b68:	0014      	movs	r4, r2
    4b6a:	9305      	str	r3, [sp, #20]
    4b6c:	2800      	cmp	r0, #0
    4b6e:	d004      	beq.n	4b7a <_vfiprintf_r+0x1a>
    4b70:	6983      	ldr	r3, [r0, #24]
    4b72:	2b00      	cmp	r3, #0
    4b74:	d101      	bne.n	4b7a <_vfiprintf_r+0x1a>
    4b76:	f7ff fec7 	bl	4908 <__sinit>
    4b7a:	4b7f      	ldr	r3, [pc, #508]	; (4d78 <_vfiprintf_r+0x218>)
    4b7c:	429f      	cmp	r7, r3
    4b7e:	d15c      	bne.n	4c3a <_vfiprintf_r+0xda>
    4b80:	6877      	ldr	r7, [r6, #4]
    4b82:	89bb      	ldrh	r3, [r7, #12]
    4b84:	071b      	lsls	r3, r3, #28
    4b86:	d562      	bpl.n	4c4e <_vfiprintf_r+0xee>
    4b88:	693b      	ldr	r3, [r7, #16]
    4b8a:	2b00      	cmp	r3, #0
    4b8c:	d05f      	beq.n	4c4e <_vfiprintf_r+0xee>
    4b8e:	2300      	movs	r3, #0
    4b90:	ad06      	add	r5, sp, #24
    4b92:	616b      	str	r3, [r5, #20]
    4b94:	3320      	adds	r3, #32
    4b96:	766b      	strb	r3, [r5, #25]
    4b98:	3310      	adds	r3, #16
    4b9a:	76ab      	strb	r3, [r5, #26]
    4b9c:	9402      	str	r4, [sp, #8]
    4b9e:	9c02      	ldr	r4, [sp, #8]
    4ba0:	7823      	ldrb	r3, [r4, #0]
    4ba2:	2b00      	cmp	r3, #0
    4ba4:	d15d      	bne.n	4c62 <_vfiprintf_r+0x102>
    4ba6:	9b02      	ldr	r3, [sp, #8]
    4ba8:	1ae3      	subs	r3, r4, r3
    4baa:	9304      	str	r3, [sp, #16]
    4bac:	d00d      	beq.n	4bca <_vfiprintf_r+0x6a>
    4bae:	9b04      	ldr	r3, [sp, #16]
    4bb0:	9a02      	ldr	r2, [sp, #8]
    4bb2:	0039      	movs	r1, r7
    4bb4:	0030      	movs	r0, r6
    4bb6:	f7ff ffc0 	bl	4b3a <__sfputs_r>
    4bba:	1c43      	adds	r3, r0, #1
    4bbc:	d100      	bne.n	4bc0 <_vfiprintf_r+0x60>
    4bbe:	e0cc      	b.n	4d5a <_vfiprintf_r+0x1fa>
    4bc0:	696a      	ldr	r2, [r5, #20]
    4bc2:	9b04      	ldr	r3, [sp, #16]
    4bc4:	4694      	mov	ip, r2
    4bc6:	4463      	add	r3, ip
    4bc8:	616b      	str	r3, [r5, #20]
    4bca:	7823      	ldrb	r3, [r4, #0]
    4bcc:	2b00      	cmp	r3, #0
    4bce:	d100      	bne.n	4bd2 <_vfiprintf_r+0x72>
    4bd0:	e0c3      	b.n	4d5a <_vfiprintf_r+0x1fa>
    4bd2:	2201      	movs	r2, #1
    4bd4:	2300      	movs	r3, #0
    4bd6:	4252      	negs	r2, r2
    4bd8:	606a      	str	r2, [r5, #4]
    4bda:	a902      	add	r1, sp, #8
    4bdc:	3254      	adds	r2, #84	; 0x54
    4bde:	1852      	adds	r2, r2, r1
    4be0:	3401      	adds	r4, #1
    4be2:	602b      	str	r3, [r5, #0]
    4be4:	60eb      	str	r3, [r5, #12]
    4be6:	60ab      	str	r3, [r5, #8]
    4be8:	7013      	strb	r3, [r2, #0]
    4bea:	65ab      	str	r3, [r5, #88]	; 0x58
    4bec:	7821      	ldrb	r1, [r4, #0]
    4bee:	2205      	movs	r2, #5
    4bf0:	4862      	ldr	r0, [pc, #392]	; (4d7c <_vfiprintf_r+0x21c>)
    4bf2:	f000 fc05 	bl	5400 <memchr>
    4bf6:	1c63      	adds	r3, r4, #1
    4bf8:	469c      	mov	ip, r3
    4bfa:	2800      	cmp	r0, #0
    4bfc:	d135      	bne.n	4c6a <_vfiprintf_r+0x10a>
    4bfe:	6829      	ldr	r1, [r5, #0]
    4c00:	06cb      	lsls	r3, r1, #27
    4c02:	d504      	bpl.n	4c0e <_vfiprintf_r+0xae>
    4c04:	2353      	movs	r3, #83	; 0x53
    4c06:	aa02      	add	r2, sp, #8
    4c08:	3020      	adds	r0, #32
    4c0a:	189b      	adds	r3, r3, r2
    4c0c:	7018      	strb	r0, [r3, #0]
    4c0e:	070b      	lsls	r3, r1, #28
    4c10:	d504      	bpl.n	4c1c <_vfiprintf_r+0xbc>
    4c12:	2353      	movs	r3, #83	; 0x53
    4c14:	202b      	movs	r0, #43	; 0x2b
    4c16:	aa02      	add	r2, sp, #8
    4c18:	189b      	adds	r3, r3, r2
    4c1a:	7018      	strb	r0, [r3, #0]
    4c1c:	7823      	ldrb	r3, [r4, #0]
    4c1e:	2b2a      	cmp	r3, #42	; 0x2a
    4c20:	d02c      	beq.n	4c7c <_vfiprintf_r+0x11c>
    4c22:	2000      	movs	r0, #0
    4c24:	210a      	movs	r1, #10
    4c26:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4c28:	7822      	ldrb	r2, [r4, #0]
    4c2a:	3a30      	subs	r2, #48	; 0x30
    4c2c:	2a09      	cmp	r2, #9
    4c2e:	d800      	bhi.n	4c32 <_vfiprintf_r+0xd2>
    4c30:	e06b      	b.n	4d0a <_vfiprintf_r+0x1aa>
    4c32:	2800      	cmp	r0, #0
    4c34:	d02a      	beq.n	4c8c <_vfiprintf_r+0x12c>
    4c36:	9309      	str	r3, [sp, #36]	; 0x24
    4c38:	e028      	b.n	4c8c <_vfiprintf_r+0x12c>
    4c3a:	4b51      	ldr	r3, [pc, #324]	; (4d80 <_vfiprintf_r+0x220>)
    4c3c:	429f      	cmp	r7, r3
    4c3e:	d101      	bne.n	4c44 <_vfiprintf_r+0xe4>
    4c40:	68b7      	ldr	r7, [r6, #8]
    4c42:	e79e      	b.n	4b82 <_vfiprintf_r+0x22>
    4c44:	4b4f      	ldr	r3, [pc, #316]	; (4d84 <_vfiprintf_r+0x224>)
    4c46:	429f      	cmp	r7, r3
    4c48:	d19b      	bne.n	4b82 <_vfiprintf_r+0x22>
    4c4a:	68f7      	ldr	r7, [r6, #12]
    4c4c:	e799      	b.n	4b82 <_vfiprintf_r+0x22>
    4c4e:	0039      	movs	r1, r7
    4c50:	0030      	movs	r0, r6
    4c52:	f000 fb15 	bl	5280 <__swsetup_r>
    4c56:	2800      	cmp	r0, #0
    4c58:	d099      	beq.n	4b8e <_vfiprintf_r+0x2e>
    4c5a:	2001      	movs	r0, #1
    4c5c:	4240      	negs	r0, r0
    4c5e:	b01f      	add	sp, #124	; 0x7c
    4c60:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4c62:	2b25      	cmp	r3, #37	; 0x25
    4c64:	d09f      	beq.n	4ba6 <_vfiprintf_r+0x46>
    4c66:	3401      	adds	r4, #1
    4c68:	e79a      	b.n	4ba0 <_vfiprintf_r+0x40>
    4c6a:	4b44      	ldr	r3, [pc, #272]	; (4d7c <_vfiprintf_r+0x21c>)
    4c6c:	6829      	ldr	r1, [r5, #0]
    4c6e:	1ac0      	subs	r0, r0, r3
    4c70:	2301      	movs	r3, #1
    4c72:	4083      	lsls	r3, r0
    4c74:	430b      	orrs	r3, r1
    4c76:	602b      	str	r3, [r5, #0]
    4c78:	4664      	mov	r4, ip
    4c7a:	e7b7      	b.n	4bec <_vfiprintf_r+0x8c>
    4c7c:	9b05      	ldr	r3, [sp, #20]
    4c7e:	1d18      	adds	r0, r3, #4
    4c80:	681b      	ldr	r3, [r3, #0]
    4c82:	9005      	str	r0, [sp, #20]
    4c84:	2b00      	cmp	r3, #0
    4c86:	db3a      	blt.n	4cfe <_vfiprintf_r+0x19e>
    4c88:	9309      	str	r3, [sp, #36]	; 0x24
    4c8a:	4664      	mov	r4, ip
    4c8c:	7823      	ldrb	r3, [r4, #0]
    4c8e:	2b2e      	cmp	r3, #46	; 0x2e
    4c90:	d10b      	bne.n	4caa <_vfiprintf_r+0x14a>
    4c92:	7863      	ldrb	r3, [r4, #1]
    4c94:	1c62      	adds	r2, r4, #1
    4c96:	2b2a      	cmp	r3, #42	; 0x2a
    4c98:	d13f      	bne.n	4d1a <_vfiprintf_r+0x1ba>
    4c9a:	9b05      	ldr	r3, [sp, #20]
    4c9c:	3402      	adds	r4, #2
    4c9e:	1d1a      	adds	r2, r3, #4
    4ca0:	681b      	ldr	r3, [r3, #0]
    4ca2:	9205      	str	r2, [sp, #20]
    4ca4:	2b00      	cmp	r3, #0
    4ca6:	db35      	blt.n	4d14 <_vfiprintf_r+0x1b4>
    4ca8:	9307      	str	r3, [sp, #28]
    4caa:	7821      	ldrb	r1, [r4, #0]
    4cac:	2203      	movs	r2, #3
    4cae:	4836      	ldr	r0, [pc, #216]	; (4d88 <_vfiprintf_r+0x228>)
    4cb0:	f000 fba6 	bl	5400 <memchr>
    4cb4:	2800      	cmp	r0, #0
    4cb6:	d007      	beq.n	4cc8 <_vfiprintf_r+0x168>
    4cb8:	4b33      	ldr	r3, [pc, #204]	; (4d88 <_vfiprintf_r+0x228>)
    4cba:	682a      	ldr	r2, [r5, #0]
    4cbc:	1ac0      	subs	r0, r0, r3
    4cbe:	2340      	movs	r3, #64	; 0x40
    4cc0:	4083      	lsls	r3, r0
    4cc2:	4313      	orrs	r3, r2
    4cc4:	602b      	str	r3, [r5, #0]
    4cc6:	3401      	adds	r4, #1
    4cc8:	7821      	ldrb	r1, [r4, #0]
    4cca:	1c63      	adds	r3, r4, #1
    4ccc:	2206      	movs	r2, #6
    4cce:	482f      	ldr	r0, [pc, #188]	; (4d8c <_vfiprintf_r+0x22c>)
    4cd0:	9302      	str	r3, [sp, #8]
    4cd2:	7629      	strb	r1, [r5, #24]
    4cd4:	f000 fb94 	bl	5400 <memchr>
    4cd8:	2800      	cmp	r0, #0
    4cda:	d044      	beq.n	4d66 <_vfiprintf_r+0x206>
    4cdc:	4b2c      	ldr	r3, [pc, #176]	; (4d90 <_vfiprintf_r+0x230>)
    4cde:	2b00      	cmp	r3, #0
    4ce0:	d12f      	bne.n	4d42 <_vfiprintf_r+0x1e2>
    4ce2:	6829      	ldr	r1, [r5, #0]
    4ce4:	9b05      	ldr	r3, [sp, #20]
    4ce6:	2207      	movs	r2, #7
    4ce8:	05c9      	lsls	r1, r1, #23
    4cea:	d528      	bpl.n	4d3e <_vfiprintf_r+0x1de>
    4cec:	189b      	adds	r3, r3, r2
    4cee:	4393      	bics	r3, r2
    4cf0:	3308      	adds	r3, #8
    4cf2:	9305      	str	r3, [sp, #20]
    4cf4:	696b      	ldr	r3, [r5, #20]
    4cf6:	9a03      	ldr	r2, [sp, #12]
    4cf8:	189b      	adds	r3, r3, r2
    4cfa:	616b      	str	r3, [r5, #20]
    4cfc:	e74f      	b.n	4b9e <_vfiprintf_r+0x3e>
    4cfe:	425b      	negs	r3, r3
    4d00:	60eb      	str	r3, [r5, #12]
    4d02:	2302      	movs	r3, #2
    4d04:	430b      	orrs	r3, r1
    4d06:	602b      	str	r3, [r5, #0]
    4d08:	e7bf      	b.n	4c8a <_vfiprintf_r+0x12a>
    4d0a:	434b      	muls	r3, r1
    4d0c:	3401      	adds	r4, #1
    4d0e:	189b      	adds	r3, r3, r2
    4d10:	2001      	movs	r0, #1
    4d12:	e789      	b.n	4c28 <_vfiprintf_r+0xc8>
    4d14:	2301      	movs	r3, #1
    4d16:	425b      	negs	r3, r3
    4d18:	e7c6      	b.n	4ca8 <_vfiprintf_r+0x148>
    4d1a:	2300      	movs	r3, #0
    4d1c:	0014      	movs	r4, r2
    4d1e:	200a      	movs	r0, #10
    4d20:	001a      	movs	r2, r3
    4d22:	606b      	str	r3, [r5, #4]
    4d24:	7821      	ldrb	r1, [r4, #0]
    4d26:	3930      	subs	r1, #48	; 0x30
    4d28:	2909      	cmp	r1, #9
    4d2a:	d903      	bls.n	4d34 <_vfiprintf_r+0x1d4>
    4d2c:	2b00      	cmp	r3, #0
    4d2e:	d0bc      	beq.n	4caa <_vfiprintf_r+0x14a>
    4d30:	9207      	str	r2, [sp, #28]
    4d32:	e7ba      	b.n	4caa <_vfiprintf_r+0x14a>
    4d34:	4342      	muls	r2, r0
    4d36:	3401      	adds	r4, #1
    4d38:	1852      	adds	r2, r2, r1
    4d3a:	2301      	movs	r3, #1
    4d3c:	e7f2      	b.n	4d24 <_vfiprintf_r+0x1c4>
    4d3e:	3307      	adds	r3, #7
    4d40:	e7d5      	b.n	4cee <_vfiprintf_r+0x18e>
    4d42:	ab05      	add	r3, sp, #20
    4d44:	9300      	str	r3, [sp, #0]
    4d46:	003a      	movs	r2, r7
    4d48:	4b12      	ldr	r3, [pc, #72]	; (4d94 <_vfiprintf_r+0x234>)
    4d4a:	0029      	movs	r1, r5
    4d4c:	0030      	movs	r0, r6
    4d4e:	e000      	b.n	4d52 <_vfiprintf_r+0x1f2>
    4d50:	bf00      	nop
    4d52:	9003      	str	r0, [sp, #12]
    4d54:	9b03      	ldr	r3, [sp, #12]
    4d56:	3301      	adds	r3, #1
    4d58:	d1cc      	bne.n	4cf4 <_vfiprintf_r+0x194>
    4d5a:	89bb      	ldrh	r3, [r7, #12]
    4d5c:	065b      	lsls	r3, r3, #25
    4d5e:	d500      	bpl.n	4d62 <_vfiprintf_r+0x202>
    4d60:	e77b      	b.n	4c5a <_vfiprintf_r+0xfa>
    4d62:	980b      	ldr	r0, [sp, #44]	; 0x2c
    4d64:	e77b      	b.n	4c5e <_vfiprintf_r+0xfe>
    4d66:	ab05      	add	r3, sp, #20
    4d68:	9300      	str	r3, [sp, #0]
    4d6a:	003a      	movs	r2, r7
    4d6c:	4b09      	ldr	r3, [pc, #36]	; (4d94 <_vfiprintf_r+0x234>)
    4d6e:	0029      	movs	r1, r5
    4d70:	0030      	movs	r0, r6
    4d72:	f000 f87f 	bl	4e74 <_printf_i>
    4d76:	e7ec      	b.n	4d52 <_vfiprintf_r+0x1f2>
    4d78:	000077f0 	.word	0x000077f0
    4d7c:	00007830 	.word	0x00007830
    4d80:	00007810 	.word	0x00007810
    4d84:	000077d0 	.word	0x000077d0
    4d88:	00007836 	.word	0x00007836
    4d8c:	0000783a 	.word	0x0000783a
    4d90:	00000000 	.word	0x00000000
    4d94:	00004b3b 	.word	0x00004b3b

00004d98 <_printf_common>:
    4d98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4d9a:	0015      	movs	r5, r2
    4d9c:	9301      	str	r3, [sp, #4]
    4d9e:	688a      	ldr	r2, [r1, #8]
    4da0:	690b      	ldr	r3, [r1, #16]
    4da2:	9000      	str	r0, [sp, #0]
    4da4:	000c      	movs	r4, r1
    4da6:	4293      	cmp	r3, r2
    4da8:	da00      	bge.n	4dac <_printf_common+0x14>
    4daa:	0013      	movs	r3, r2
    4dac:	0022      	movs	r2, r4
    4dae:	602b      	str	r3, [r5, #0]
    4db0:	3243      	adds	r2, #67	; 0x43
    4db2:	7812      	ldrb	r2, [r2, #0]
    4db4:	2a00      	cmp	r2, #0
    4db6:	d001      	beq.n	4dbc <_printf_common+0x24>
    4db8:	3301      	adds	r3, #1
    4dba:	602b      	str	r3, [r5, #0]
    4dbc:	6823      	ldr	r3, [r4, #0]
    4dbe:	069b      	lsls	r3, r3, #26
    4dc0:	d502      	bpl.n	4dc8 <_printf_common+0x30>
    4dc2:	682b      	ldr	r3, [r5, #0]
    4dc4:	3302      	adds	r3, #2
    4dc6:	602b      	str	r3, [r5, #0]
    4dc8:	2706      	movs	r7, #6
    4dca:	6823      	ldr	r3, [r4, #0]
    4dcc:	401f      	ands	r7, r3
    4dce:	d027      	beq.n	4e20 <_printf_common+0x88>
    4dd0:	0023      	movs	r3, r4
    4dd2:	3343      	adds	r3, #67	; 0x43
    4dd4:	781b      	ldrb	r3, [r3, #0]
    4dd6:	1e5a      	subs	r2, r3, #1
    4dd8:	4193      	sbcs	r3, r2
    4dda:	6822      	ldr	r2, [r4, #0]
    4ddc:	0692      	lsls	r2, r2, #26
    4dde:	d430      	bmi.n	4e42 <_printf_common+0xaa>
    4de0:	0022      	movs	r2, r4
    4de2:	9901      	ldr	r1, [sp, #4]
    4de4:	3243      	adds	r2, #67	; 0x43
    4de6:	9800      	ldr	r0, [sp, #0]
    4de8:	9e08      	ldr	r6, [sp, #32]
    4dea:	47b0      	blx	r6
    4dec:	1c43      	adds	r3, r0, #1
    4dee:	d025      	beq.n	4e3c <_printf_common+0xa4>
    4df0:	2306      	movs	r3, #6
    4df2:	6820      	ldr	r0, [r4, #0]
    4df4:	682a      	ldr	r2, [r5, #0]
    4df6:	68e1      	ldr	r1, [r4, #12]
    4df8:	4003      	ands	r3, r0
    4dfa:	2500      	movs	r5, #0
    4dfc:	2b04      	cmp	r3, #4
    4dfe:	d103      	bne.n	4e08 <_printf_common+0x70>
    4e00:	1a8d      	subs	r5, r1, r2
    4e02:	43eb      	mvns	r3, r5
    4e04:	17db      	asrs	r3, r3, #31
    4e06:	401d      	ands	r5, r3
    4e08:	68a3      	ldr	r3, [r4, #8]
    4e0a:	6922      	ldr	r2, [r4, #16]
    4e0c:	4293      	cmp	r3, r2
    4e0e:	dd01      	ble.n	4e14 <_printf_common+0x7c>
    4e10:	1a9b      	subs	r3, r3, r2
    4e12:	18ed      	adds	r5, r5, r3
    4e14:	2700      	movs	r7, #0
    4e16:	42bd      	cmp	r5, r7
    4e18:	d120      	bne.n	4e5c <_printf_common+0xc4>
    4e1a:	2000      	movs	r0, #0
    4e1c:	e010      	b.n	4e40 <_printf_common+0xa8>
    4e1e:	3701      	adds	r7, #1
    4e20:	68e3      	ldr	r3, [r4, #12]
    4e22:	682a      	ldr	r2, [r5, #0]
    4e24:	1a9b      	subs	r3, r3, r2
    4e26:	429f      	cmp	r7, r3
    4e28:	dad2      	bge.n	4dd0 <_printf_common+0x38>
    4e2a:	0022      	movs	r2, r4
    4e2c:	2301      	movs	r3, #1
    4e2e:	3219      	adds	r2, #25
    4e30:	9901      	ldr	r1, [sp, #4]
    4e32:	9800      	ldr	r0, [sp, #0]
    4e34:	9e08      	ldr	r6, [sp, #32]
    4e36:	47b0      	blx	r6
    4e38:	1c43      	adds	r3, r0, #1
    4e3a:	d1f0      	bne.n	4e1e <_printf_common+0x86>
    4e3c:	2001      	movs	r0, #1
    4e3e:	4240      	negs	r0, r0
    4e40:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4e42:	2030      	movs	r0, #48	; 0x30
    4e44:	18e1      	adds	r1, r4, r3
    4e46:	3143      	adds	r1, #67	; 0x43
    4e48:	7008      	strb	r0, [r1, #0]
    4e4a:	0021      	movs	r1, r4
    4e4c:	1c5a      	adds	r2, r3, #1
    4e4e:	3145      	adds	r1, #69	; 0x45
    4e50:	7809      	ldrb	r1, [r1, #0]
    4e52:	18a2      	adds	r2, r4, r2
    4e54:	3243      	adds	r2, #67	; 0x43
    4e56:	3302      	adds	r3, #2
    4e58:	7011      	strb	r1, [r2, #0]
    4e5a:	e7c1      	b.n	4de0 <_printf_common+0x48>
    4e5c:	0022      	movs	r2, r4
    4e5e:	2301      	movs	r3, #1
    4e60:	321a      	adds	r2, #26
    4e62:	9901      	ldr	r1, [sp, #4]
    4e64:	9800      	ldr	r0, [sp, #0]
    4e66:	9e08      	ldr	r6, [sp, #32]
    4e68:	47b0      	blx	r6
    4e6a:	1c43      	adds	r3, r0, #1
    4e6c:	d0e6      	beq.n	4e3c <_printf_common+0xa4>
    4e6e:	3701      	adds	r7, #1
    4e70:	e7d1      	b.n	4e16 <_printf_common+0x7e>
	...

00004e74 <_printf_i>:
    4e74:	b5f0      	push	{r4, r5, r6, r7, lr}
    4e76:	b08b      	sub	sp, #44	; 0x2c
    4e78:	9206      	str	r2, [sp, #24]
    4e7a:	000a      	movs	r2, r1
    4e7c:	3243      	adds	r2, #67	; 0x43
    4e7e:	9307      	str	r3, [sp, #28]
    4e80:	9005      	str	r0, [sp, #20]
    4e82:	9204      	str	r2, [sp, #16]
    4e84:	7e0a      	ldrb	r2, [r1, #24]
    4e86:	000c      	movs	r4, r1
    4e88:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4e8a:	2a6e      	cmp	r2, #110	; 0x6e
    4e8c:	d100      	bne.n	4e90 <_printf_i+0x1c>
    4e8e:	e08f      	b.n	4fb0 <_printf_i+0x13c>
    4e90:	d817      	bhi.n	4ec2 <_printf_i+0x4e>
    4e92:	2a63      	cmp	r2, #99	; 0x63
    4e94:	d02c      	beq.n	4ef0 <_printf_i+0x7c>
    4e96:	d808      	bhi.n	4eaa <_printf_i+0x36>
    4e98:	2a00      	cmp	r2, #0
    4e9a:	d100      	bne.n	4e9e <_printf_i+0x2a>
    4e9c:	e099      	b.n	4fd2 <_printf_i+0x15e>
    4e9e:	2a58      	cmp	r2, #88	; 0x58
    4ea0:	d054      	beq.n	4f4c <_printf_i+0xd8>
    4ea2:	0026      	movs	r6, r4
    4ea4:	3642      	adds	r6, #66	; 0x42
    4ea6:	7032      	strb	r2, [r6, #0]
    4ea8:	e029      	b.n	4efe <_printf_i+0x8a>
    4eaa:	2a64      	cmp	r2, #100	; 0x64
    4eac:	d001      	beq.n	4eb2 <_printf_i+0x3e>
    4eae:	2a69      	cmp	r2, #105	; 0x69
    4eb0:	d1f7      	bne.n	4ea2 <_printf_i+0x2e>
    4eb2:	6821      	ldr	r1, [r4, #0]
    4eb4:	681a      	ldr	r2, [r3, #0]
    4eb6:	0608      	lsls	r0, r1, #24
    4eb8:	d523      	bpl.n	4f02 <_printf_i+0x8e>
    4eba:	1d11      	adds	r1, r2, #4
    4ebc:	6019      	str	r1, [r3, #0]
    4ebe:	6815      	ldr	r5, [r2, #0]
    4ec0:	e025      	b.n	4f0e <_printf_i+0x9a>
    4ec2:	2a73      	cmp	r2, #115	; 0x73
    4ec4:	d100      	bne.n	4ec8 <_printf_i+0x54>
    4ec6:	e088      	b.n	4fda <_printf_i+0x166>
    4ec8:	d808      	bhi.n	4edc <_printf_i+0x68>
    4eca:	2a6f      	cmp	r2, #111	; 0x6f
    4ecc:	d029      	beq.n	4f22 <_printf_i+0xae>
    4ece:	2a70      	cmp	r2, #112	; 0x70
    4ed0:	d1e7      	bne.n	4ea2 <_printf_i+0x2e>
    4ed2:	2220      	movs	r2, #32
    4ed4:	6809      	ldr	r1, [r1, #0]
    4ed6:	430a      	orrs	r2, r1
    4ed8:	6022      	str	r2, [r4, #0]
    4eda:	e003      	b.n	4ee4 <_printf_i+0x70>
    4edc:	2a75      	cmp	r2, #117	; 0x75
    4ede:	d020      	beq.n	4f22 <_printf_i+0xae>
    4ee0:	2a78      	cmp	r2, #120	; 0x78
    4ee2:	d1de      	bne.n	4ea2 <_printf_i+0x2e>
    4ee4:	0022      	movs	r2, r4
    4ee6:	2178      	movs	r1, #120	; 0x78
    4ee8:	3245      	adds	r2, #69	; 0x45
    4eea:	7011      	strb	r1, [r2, #0]
    4eec:	4a6c      	ldr	r2, [pc, #432]	; (50a0 <_printf_i+0x22c>)
    4eee:	e030      	b.n	4f52 <_printf_i+0xde>
    4ef0:	000e      	movs	r6, r1
    4ef2:	681a      	ldr	r2, [r3, #0]
    4ef4:	3642      	adds	r6, #66	; 0x42
    4ef6:	1d11      	adds	r1, r2, #4
    4ef8:	6019      	str	r1, [r3, #0]
    4efa:	6813      	ldr	r3, [r2, #0]
    4efc:	7033      	strb	r3, [r6, #0]
    4efe:	2301      	movs	r3, #1
    4f00:	e079      	b.n	4ff6 <_printf_i+0x182>
    4f02:	0649      	lsls	r1, r1, #25
    4f04:	d5d9      	bpl.n	4eba <_printf_i+0x46>
    4f06:	1d11      	adds	r1, r2, #4
    4f08:	6019      	str	r1, [r3, #0]
    4f0a:	2300      	movs	r3, #0
    4f0c:	5ed5      	ldrsh	r5, [r2, r3]
    4f0e:	2d00      	cmp	r5, #0
    4f10:	da03      	bge.n	4f1a <_printf_i+0xa6>
    4f12:	232d      	movs	r3, #45	; 0x2d
    4f14:	9a04      	ldr	r2, [sp, #16]
    4f16:	426d      	negs	r5, r5
    4f18:	7013      	strb	r3, [r2, #0]
    4f1a:	4b62      	ldr	r3, [pc, #392]	; (50a4 <_printf_i+0x230>)
    4f1c:	270a      	movs	r7, #10
    4f1e:	9303      	str	r3, [sp, #12]
    4f20:	e02f      	b.n	4f82 <_printf_i+0x10e>
    4f22:	6820      	ldr	r0, [r4, #0]
    4f24:	6819      	ldr	r1, [r3, #0]
    4f26:	0605      	lsls	r5, r0, #24
    4f28:	d503      	bpl.n	4f32 <_printf_i+0xbe>
    4f2a:	1d08      	adds	r0, r1, #4
    4f2c:	6018      	str	r0, [r3, #0]
    4f2e:	680d      	ldr	r5, [r1, #0]
    4f30:	e005      	b.n	4f3e <_printf_i+0xca>
    4f32:	0640      	lsls	r0, r0, #25
    4f34:	d5f9      	bpl.n	4f2a <_printf_i+0xb6>
    4f36:	680d      	ldr	r5, [r1, #0]
    4f38:	1d08      	adds	r0, r1, #4
    4f3a:	6018      	str	r0, [r3, #0]
    4f3c:	b2ad      	uxth	r5, r5
    4f3e:	4b59      	ldr	r3, [pc, #356]	; (50a4 <_printf_i+0x230>)
    4f40:	2708      	movs	r7, #8
    4f42:	9303      	str	r3, [sp, #12]
    4f44:	2a6f      	cmp	r2, #111	; 0x6f
    4f46:	d018      	beq.n	4f7a <_printf_i+0x106>
    4f48:	270a      	movs	r7, #10
    4f4a:	e016      	b.n	4f7a <_printf_i+0x106>
    4f4c:	3145      	adds	r1, #69	; 0x45
    4f4e:	700a      	strb	r2, [r1, #0]
    4f50:	4a54      	ldr	r2, [pc, #336]	; (50a4 <_printf_i+0x230>)
    4f52:	9203      	str	r2, [sp, #12]
    4f54:	681a      	ldr	r2, [r3, #0]
    4f56:	6821      	ldr	r1, [r4, #0]
    4f58:	1d10      	adds	r0, r2, #4
    4f5a:	6018      	str	r0, [r3, #0]
    4f5c:	6815      	ldr	r5, [r2, #0]
    4f5e:	0608      	lsls	r0, r1, #24
    4f60:	d522      	bpl.n	4fa8 <_printf_i+0x134>
    4f62:	07cb      	lsls	r3, r1, #31
    4f64:	d502      	bpl.n	4f6c <_printf_i+0xf8>
    4f66:	2320      	movs	r3, #32
    4f68:	4319      	orrs	r1, r3
    4f6a:	6021      	str	r1, [r4, #0]
    4f6c:	2710      	movs	r7, #16
    4f6e:	2d00      	cmp	r5, #0
    4f70:	d103      	bne.n	4f7a <_printf_i+0x106>
    4f72:	2320      	movs	r3, #32
    4f74:	6822      	ldr	r2, [r4, #0]
    4f76:	439a      	bics	r2, r3
    4f78:	6022      	str	r2, [r4, #0]
    4f7a:	0023      	movs	r3, r4
    4f7c:	2200      	movs	r2, #0
    4f7e:	3343      	adds	r3, #67	; 0x43
    4f80:	701a      	strb	r2, [r3, #0]
    4f82:	6863      	ldr	r3, [r4, #4]
    4f84:	60a3      	str	r3, [r4, #8]
    4f86:	2b00      	cmp	r3, #0
    4f88:	db5c      	blt.n	5044 <_printf_i+0x1d0>
    4f8a:	2204      	movs	r2, #4
    4f8c:	6821      	ldr	r1, [r4, #0]
    4f8e:	4391      	bics	r1, r2
    4f90:	6021      	str	r1, [r4, #0]
    4f92:	2d00      	cmp	r5, #0
    4f94:	d158      	bne.n	5048 <_printf_i+0x1d4>
    4f96:	9e04      	ldr	r6, [sp, #16]
    4f98:	2b00      	cmp	r3, #0
    4f9a:	d064      	beq.n	5066 <_printf_i+0x1f2>
    4f9c:	0026      	movs	r6, r4
    4f9e:	9b03      	ldr	r3, [sp, #12]
    4fa0:	3642      	adds	r6, #66	; 0x42
    4fa2:	781b      	ldrb	r3, [r3, #0]
    4fa4:	7033      	strb	r3, [r6, #0]
    4fa6:	e05e      	b.n	5066 <_printf_i+0x1f2>
    4fa8:	0648      	lsls	r0, r1, #25
    4faa:	d5da      	bpl.n	4f62 <_printf_i+0xee>
    4fac:	b2ad      	uxth	r5, r5
    4fae:	e7d8      	b.n	4f62 <_printf_i+0xee>
    4fb0:	6809      	ldr	r1, [r1, #0]
    4fb2:	681a      	ldr	r2, [r3, #0]
    4fb4:	0608      	lsls	r0, r1, #24
    4fb6:	d505      	bpl.n	4fc4 <_printf_i+0x150>
    4fb8:	1d11      	adds	r1, r2, #4
    4fba:	6019      	str	r1, [r3, #0]
    4fbc:	6813      	ldr	r3, [r2, #0]
    4fbe:	6962      	ldr	r2, [r4, #20]
    4fc0:	601a      	str	r2, [r3, #0]
    4fc2:	e006      	b.n	4fd2 <_printf_i+0x15e>
    4fc4:	0649      	lsls	r1, r1, #25
    4fc6:	d5f7      	bpl.n	4fb8 <_printf_i+0x144>
    4fc8:	1d11      	adds	r1, r2, #4
    4fca:	6019      	str	r1, [r3, #0]
    4fcc:	6813      	ldr	r3, [r2, #0]
    4fce:	8aa2      	ldrh	r2, [r4, #20]
    4fd0:	801a      	strh	r2, [r3, #0]
    4fd2:	2300      	movs	r3, #0
    4fd4:	9e04      	ldr	r6, [sp, #16]
    4fd6:	6123      	str	r3, [r4, #16]
    4fd8:	e054      	b.n	5084 <_printf_i+0x210>
    4fda:	681a      	ldr	r2, [r3, #0]
    4fdc:	1d11      	adds	r1, r2, #4
    4fde:	6019      	str	r1, [r3, #0]
    4fe0:	6816      	ldr	r6, [r2, #0]
    4fe2:	2100      	movs	r1, #0
    4fe4:	6862      	ldr	r2, [r4, #4]
    4fe6:	0030      	movs	r0, r6
    4fe8:	f000 fa0a 	bl	5400 <memchr>
    4fec:	2800      	cmp	r0, #0
    4fee:	d001      	beq.n	4ff4 <_printf_i+0x180>
    4ff0:	1b80      	subs	r0, r0, r6
    4ff2:	6060      	str	r0, [r4, #4]
    4ff4:	6863      	ldr	r3, [r4, #4]
    4ff6:	6123      	str	r3, [r4, #16]
    4ff8:	2300      	movs	r3, #0
    4ffa:	9a04      	ldr	r2, [sp, #16]
    4ffc:	7013      	strb	r3, [r2, #0]
    4ffe:	e041      	b.n	5084 <_printf_i+0x210>
    5000:	6923      	ldr	r3, [r4, #16]
    5002:	0032      	movs	r2, r6
    5004:	9906      	ldr	r1, [sp, #24]
    5006:	9805      	ldr	r0, [sp, #20]
    5008:	9d07      	ldr	r5, [sp, #28]
    500a:	47a8      	blx	r5
    500c:	1c43      	adds	r3, r0, #1
    500e:	d043      	beq.n	5098 <_printf_i+0x224>
    5010:	6823      	ldr	r3, [r4, #0]
    5012:	2500      	movs	r5, #0
    5014:	079b      	lsls	r3, r3, #30
    5016:	d40f      	bmi.n	5038 <_printf_i+0x1c4>
    5018:	9b09      	ldr	r3, [sp, #36]	; 0x24
    501a:	68e0      	ldr	r0, [r4, #12]
    501c:	4298      	cmp	r0, r3
    501e:	da3d      	bge.n	509c <_printf_i+0x228>
    5020:	0018      	movs	r0, r3
    5022:	e03b      	b.n	509c <_printf_i+0x228>
    5024:	0022      	movs	r2, r4
    5026:	2301      	movs	r3, #1
    5028:	3219      	adds	r2, #25
    502a:	9906      	ldr	r1, [sp, #24]
    502c:	9805      	ldr	r0, [sp, #20]
    502e:	9e07      	ldr	r6, [sp, #28]
    5030:	47b0      	blx	r6
    5032:	1c43      	adds	r3, r0, #1
    5034:	d030      	beq.n	5098 <_printf_i+0x224>
    5036:	3501      	adds	r5, #1
    5038:	68e3      	ldr	r3, [r4, #12]
    503a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    503c:	1a9b      	subs	r3, r3, r2
    503e:	429d      	cmp	r5, r3
    5040:	dbf0      	blt.n	5024 <_printf_i+0x1b0>
    5042:	e7e9      	b.n	5018 <_printf_i+0x1a4>
    5044:	2d00      	cmp	r5, #0
    5046:	d0a9      	beq.n	4f9c <_printf_i+0x128>
    5048:	9e04      	ldr	r6, [sp, #16]
    504a:	0028      	movs	r0, r5
    504c:	0039      	movs	r1, r7
    504e:	f7fe fff9 	bl	4044 <__aeabi_uidivmod>
    5052:	9b03      	ldr	r3, [sp, #12]
    5054:	3e01      	subs	r6, #1
    5056:	5c5b      	ldrb	r3, [r3, r1]
    5058:	0028      	movs	r0, r5
    505a:	7033      	strb	r3, [r6, #0]
    505c:	0039      	movs	r1, r7
    505e:	f7fe ff6b 	bl	3f38 <__udivsi3>
    5062:	1e05      	subs	r5, r0, #0
    5064:	d1f1      	bne.n	504a <_printf_i+0x1d6>
    5066:	2f08      	cmp	r7, #8
    5068:	d109      	bne.n	507e <_printf_i+0x20a>
    506a:	6823      	ldr	r3, [r4, #0]
    506c:	07db      	lsls	r3, r3, #31
    506e:	d506      	bpl.n	507e <_printf_i+0x20a>
    5070:	6863      	ldr	r3, [r4, #4]
    5072:	6922      	ldr	r2, [r4, #16]
    5074:	4293      	cmp	r3, r2
    5076:	dc02      	bgt.n	507e <_printf_i+0x20a>
    5078:	2330      	movs	r3, #48	; 0x30
    507a:	3e01      	subs	r6, #1
    507c:	7033      	strb	r3, [r6, #0]
    507e:	9b04      	ldr	r3, [sp, #16]
    5080:	1b9b      	subs	r3, r3, r6
    5082:	6123      	str	r3, [r4, #16]
    5084:	9b07      	ldr	r3, [sp, #28]
    5086:	aa09      	add	r2, sp, #36	; 0x24
    5088:	9300      	str	r3, [sp, #0]
    508a:	0021      	movs	r1, r4
    508c:	9b06      	ldr	r3, [sp, #24]
    508e:	9805      	ldr	r0, [sp, #20]
    5090:	f7ff fe82 	bl	4d98 <_printf_common>
    5094:	1c43      	adds	r3, r0, #1
    5096:	d1b3      	bne.n	5000 <_printf_i+0x18c>
    5098:	2001      	movs	r0, #1
    509a:	4240      	negs	r0, r0
    509c:	b00b      	add	sp, #44	; 0x2c
    509e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    50a0:	00007852 	.word	0x00007852
    50a4:	00007841 	.word	0x00007841

000050a8 <_putc_r>:
    50a8:	b570      	push	{r4, r5, r6, lr}
    50aa:	0006      	movs	r6, r0
    50ac:	000d      	movs	r5, r1
    50ae:	0014      	movs	r4, r2
    50b0:	2800      	cmp	r0, #0
    50b2:	d004      	beq.n	50be <_putc_r+0x16>
    50b4:	6983      	ldr	r3, [r0, #24]
    50b6:	2b00      	cmp	r3, #0
    50b8:	d101      	bne.n	50be <_putc_r+0x16>
    50ba:	f7ff fc25 	bl	4908 <__sinit>
    50be:	4b12      	ldr	r3, [pc, #72]	; (5108 <_putc_r+0x60>)
    50c0:	429c      	cmp	r4, r3
    50c2:	d111      	bne.n	50e8 <_putc_r+0x40>
    50c4:	6874      	ldr	r4, [r6, #4]
    50c6:	68a3      	ldr	r3, [r4, #8]
    50c8:	3b01      	subs	r3, #1
    50ca:	60a3      	str	r3, [r4, #8]
    50cc:	2b00      	cmp	r3, #0
    50ce:	da05      	bge.n	50dc <_putc_r+0x34>
    50d0:	69a2      	ldr	r2, [r4, #24]
    50d2:	4293      	cmp	r3, r2
    50d4:	db12      	blt.n	50fc <_putc_r+0x54>
    50d6:	b2eb      	uxtb	r3, r5
    50d8:	2b0a      	cmp	r3, #10
    50da:	d00f      	beq.n	50fc <_putc_r+0x54>
    50dc:	6823      	ldr	r3, [r4, #0]
    50de:	b2e8      	uxtb	r0, r5
    50e0:	1c5a      	adds	r2, r3, #1
    50e2:	6022      	str	r2, [r4, #0]
    50e4:	701d      	strb	r5, [r3, #0]
    50e6:	bd70      	pop	{r4, r5, r6, pc}
    50e8:	4b08      	ldr	r3, [pc, #32]	; (510c <_putc_r+0x64>)
    50ea:	429c      	cmp	r4, r3
    50ec:	d101      	bne.n	50f2 <_putc_r+0x4a>
    50ee:	68b4      	ldr	r4, [r6, #8]
    50f0:	e7e9      	b.n	50c6 <_putc_r+0x1e>
    50f2:	4b07      	ldr	r3, [pc, #28]	; (5110 <_putc_r+0x68>)
    50f4:	429c      	cmp	r4, r3
    50f6:	d1e6      	bne.n	50c6 <_putc_r+0x1e>
    50f8:	68f4      	ldr	r4, [r6, #12]
    50fa:	e7e4      	b.n	50c6 <_putc_r+0x1e>
    50fc:	0022      	movs	r2, r4
    50fe:	0029      	movs	r1, r5
    5100:	0030      	movs	r0, r6
    5102:	f000 f853 	bl	51ac <__swbuf_r>
    5106:	e7ee      	b.n	50e6 <_putc_r+0x3e>
    5108:	000077f0 	.word	0x000077f0
    510c:	00007810 	.word	0x00007810
    5110:	000077d0 	.word	0x000077d0

00005114 <__sread>:
    5114:	b570      	push	{r4, r5, r6, lr}
    5116:	000c      	movs	r4, r1
    5118:	250e      	movs	r5, #14
    511a:	5f49      	ldrsh	r1, [r1, r5]
    511c:	f000 f97c 	bl	5418 <_read_r>
    5120:	2800      	cmp	r0, #0
    5122:	db03      	blt.n	512c <__sread+0x18>
    5124:	6d63      	ldr	r3, [r4, #84]	; 0x54
    5126:	181b      	adds	r3, r3, r0
    5128:	6563      	str	r3, [r4, #84]	; 0x54
    512a:	bd70      	pop	{r4, r5, r6, pc}
    512c:	89a3      	ldrh	r3, [r4, #12]
    512e:	4a02      	ldr	r2, [pc, #8]	; (5138 <__sread+0x24>)
    5130:	4013      	ands	r3, r2
    5132:	81a3      	strh	r3, [r4, #12]
    5134:	e7f9      	b.n	512a <__sread+0x16>
    5136:	46c0      	nop			; (mov r8, r8)
    5138:	ffffefff 	.word	0xffffefff

0000513c <__swrite>:
    513c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    513e:	001f      	movs	r7, r3
    5140:	898b      	ldrh	r3, [r1, #12]
    5142:	0005      	movs	r5, r0
    5144:	000c      	movs	r4, r1
    5146:	0016      	movs	r6, r2
    5148:	05db      	lsls	r3, r3, #23
    514a:	d505      	bpl.n	5158 <__swrite+0x1c>
    514c:	230e      	movs	r3, #14
    514e:	5ec9      	ldrsh	r1, [r1, r3]
    5150:	2200      	movs	r2, #0
    5152:	2302      	movs	r3, #2
    5154:	f000 f940 	bl	53d8 <_lseek_r>
    5158:	89a3      	ldrh	r3, [r4, #12]
    515a:	4a05      	ldr	r2, [pc, #20]	; (5170 <__swrite+0x34>)
    515c:	0028      	movs	r0, r5
    515e:	4013      	ands	r3, r2
    5160:	81a3      	strh	r3, [r4, #12]
    5162:	0032      	movs	r2, r6
    5164:	230e      	movs	r3, #14
    5166:	5ee1      	ldrsh	r1, [r4, r3]
    5168:	003b      	movs	r3, r7
    516a:	f000 f875 	bl	5258 <_write_r>
    516e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5170:	ffffefff 	.word	0xffffefff

00005174 <__sseek>:
    5174:	b570      	push	{r4, r5, r6, lr}
    5176:	000c      	movs	r4, r1
    5178:	250e      	movs	r5, #14
    517a:	5f49      	ldrsh	r1, [r1, r5]
    517c:	f000 f92c 	bl	53d8 <_lseek_r>
    5180:	89a3      	ldrh	r3, [r4, #12]
    5182:	1c42      	adds	r2, r0, #1
    5184:	d103      	bne.n	518e <__sseek+0x1a>
    5186:	4a05      	ldr	r2, [pc, #20]	; (519c <__sseek+0x28>)
    5188:	4013      	ands	r3, r2
    518a:	81a3      	strh	r3, [r4, #12]
    518c:	bd70      	pop	{r4, r5, r6, pc}
    518e:	2280      	movs	r2, #128	; 0x80
    5190:	0152      	lsls	r2, r2, #5
    5192:	4313      	orrs	r3, r2
    5194:	81a3      	strh	r3, [r4, #12]
    5196:	6560      	str	r0, [r4, #84]	; 0x54
    5198:	e7f8      	b.n	518c <__sseek+0x18>
    519a:	46c0      	nop			; (mov r8, r8)
    519c:	ffffefff 	.word	0xffffefff

000051a0 <__sclose>:
    51a0:	b510      	push	{r4, lr}
    51a2:	230e      	movs	r3, #14
    51a4:	5ec9      	ldrsh	r1, [r1, r3]
    51a6:	f000 f8e1 	bl	536c <_close_r>
    51aa:	bd10      	pop	{r4, pc}

000051ac <__swbuf_r>:
    51ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    51ae:	0005      	movs	r5, r0
    51b0:	000e      	movs	r6, r1
    51b2:	0014      	movs	r4, r2
    51b4:	2800      	cmp	r0, #0
    51b6:	d004      	beq.n	51c2 <__swbuf_r+0x16>
    51b8:	6983      	ldr	r3, [r0, #24]
    51ba:	2b00      	cmp	r3, #0
    51bc:	d101      	bne.n	51c2 <__swbuf_r+0x16>
    51be:	f7ff fba3 	bl	4908 <__sinit>
    51c2:	4b22      	ldr	r3, [pc, #136]	; (524c <__swbuf_r+0xa0>)
    51c4:	429c      	cmp	r4, r3
    51c6:	d12d      	bne.n	5224 <__swbuf_r+0x78>
    51c8:	686c      	ldr	r4, [r5, #4]
    51ca:	69a3      	ldr	r3, [r4, #24]
    51cc:	60a3      	str	r3, [r4, #8]
    51ce:	89a3      	ldrh	r3, [r4, #12]
    51d0:	071b      	lsls	r3, r3, #28
    51d2:	d531      	bpl.n	5238 <__swbuf_r+0x8c>
    51d4:	6923      	ldr	r3, [r4, #16]
    51d6:	2b00      	cmp	r3, #0
    51d8:	d02e      	beq.n	5238 <__swbuf_r+0x8c>
    51da:	6823      	ldr	r3, [r4, #0]
    51dc:	6922      	ldr	r2, [r4, #16]
    51de:	b2f7      	uxtb	r7, r6
    51e0:	1a98      	subs	r0, r3, r2
    51e2:	6963      	ldr	r3, [r4, #20]
    51e4:	b2f6      	uxtb	r6, r6
    51e6:	4298      	cmp	r0, r3
    51e8:	db05      	blt.n	51f6 <__swbuf_r+0x4a>
    51ea:	0021      	movs	r1, r4
    51ec:	0028      	movs	r0, r5
    51ee:	f7ff fb1d 	bl	482c <_fflush_r>
    51f2:	2800      	cmp	r0, #0
    51f4:	d126      	bne.n	5244 <__swbuf_r+0x98>
    51f6:	68a3      	ldr	r3, [r4, #8]
    51f8:	3001      	adds	r0, #1
    51fa:	3b01      	subs	r3, #1
    51fc:	60a3      	str	r3, [r4, #8]
    51fe:	6823      	ldr	r3, [r4, #0]
    5200:	1c5a      	adds	r2, r3, #1
    5202:	6022      	str	r2, [r4, #0]
    5204:	701f      	strb	r7, [r3, #0]
    5206:	6963      	ldr	r3, [r4, #20]
    5208:	4298      	cmp	r0, r3
    520a:	d004      	beq.n	5216 <__swbuf_r+0x6a>
    520c:	89a3      	ldrh	r3, [r4, #12]
    520e:	07db      	lsls	r3, r3, #31
    5210:	d51a      	bpl.n	5248 <__swbuf_r+0x9c>
    5212:	2e0a      	cmp	r6, #10
    5214:	d118      	bne.n	5248 <__swbuf_r+0x9c>
    5216:	0021      	movs	r1, r4
    5218:	0028      	movs	r0, r5
    521a:	f7ff fb07 	bl	482c <_fflush_r>
    521e:	2800      	cmp	r0, #0
    5220:	d012      	beq.n	5248 <__swbuf_r+0x9c>
    5222:	e00f      	b.n	5244 <__swbuf_r+0x98>
    5224:	4b0a      	ldr	r3, [pc, #40]	; (5250 <__swbuf_r+0xa4>)
    5226:	429c      	cmp	r4, r3
    5228:	d101      	bne.n	522e <__swbuf_r+0x82>
    522a:	68ac      	ldr	r4, [r5, #8]
    522c:	e7cd      	b.n	51ca <__swbuf_r+0x1e>
    522e:	4b09      	ldr	r3, [pc, #36]	; (5254 <__swbuf_r+0xa8>)
    5230:	429c      	cmp	r4, r3
    5232:	d1ca      	bne.n	51ca <__swbuf_r+0x1e>
    5234:	68ec      	ldr	r4, [r5, #12]
    5236:	e7c8      	b.n	51ca <__swbuf_r+0x1e>
    5238:	0021      	movs	r1, r4
    523a:	0028      	movs	r0, r5
    523c:	f000 f820 	bl	5280 <__swsetup_r>
    5240:	2800      	cmp	r0, #0
    5242:	d0ca      	beq.n	51da <__swbuf_r+0x2e>
    5244:	2601      	movs	r6, #1
    5246:	4276      	negs	r6, r6
    5248:	0030      	movs	r0, r6
    524a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    524c:	000077f0 	.word	0x000077f0
    5250:	00007810 	.word	0x00007810
    5254:	000077d0 	.word	0x000077d0

00005258 <_write_r>:
    5258:	b570      	push	{r4, r5, r6, lr}
    525a:	0005      	movs	r5, r0
    525c:	0008      	movs	r0, r1
    525e:	0011      	movs	r1, r2
    5260:	2200      	movs	r2, #0
    5262:	4c06      	ldr	r4, [pc, #24]	; (527c <_write_r+0x24>)
    5264:	6022      	str	r2, [r4, #0]
    5266:	001a      	movs	r2, r3
    5268:	f7fd fcca 	bl	2c00 <_write>
    526c:	1c43      	adds	r3, r0, #1
    526e:	d103      	bne.n	5278 <_write_r+0x20>
    5270:	6823      	ldr	r3, [r4, #0]
    5272:	2b00      	cmp	r3, #0
    5274:	d000      	beq.n	5278 <_write_r+0x20>
    5276:	602b      	str	r3, [r5, #0]
    5278:	bd70      	pop	{r4, r5, r6, pc}
    527a:	46c0      	nop			; (mov r8, r8)
    527c:	20000b70 	.word	0x20000b70

00005280 <__swsetup_r>:
    5280:	4b36      	ldr	r3, [pc, #216]	; (535c <__swsetup_r+0xdc>)
    5282:	b570      	push	{r4, r5, r6, lr}
    5284:	681d      	ldr	r5, [r3, #0]
    5286:	0006      	movs	r6, r0
    5288:	000c      	movs	r4, r1
    528a:	2d00      	cmp	r5, #0
    528c:	d005      	beq.n	529a <__swsetup_r+0x1a>
    528e:	69ab      	ldr	r3, [r5, #24]
    5290:	2b00      	cmp	r3, #0
    5292:	d102      	bne.n	529a <__swsetup_r+0x1a>
    5294:	0028      	movs	r0, r5
    5296:	f7ff fb37 	bl	4908 <__sinit>
    529a:	4b31      	ldr	r3, [pc, #196]	; (5360 <__swsetup_r+0xe0>)
    529c:	429c      	cmp	r4, r3
    529e:	d10f      	bne.n	52c0 <__swsetup_r+0x40>
    52a0:	686c      	ldr	r4, [r5, #4]
    52a2:	230c      	movs	r3, #12
    52a4:	5ee2      	ldrsh	r2, [r4, r3]
    52a6:	b293      	uxth	r3, r2
    52a8:	0719      	lsls	r1, r3, #28
    52aa:	d42d      	bmi.n	5308 <__swsetup_r+0x88>
    52ac:	06d9      	lsls	r1, r3, #27
    52ae:	d411      	bmi.n	52d4 <__swsetup_r+0x54>
    52b0:	2309      	movs	r3, #9
    52b2:	2001      	movs	r0, #1
    52b4:	6033      	str	r3, [r6, #0]
    52b6:	3337      	adds	r3, #55	; 0x37
    52b8:	4313      	orrs	r3, r2
    52ba:	81a3      	strh	r3, [r4, #12]
    52bc:	4240      	negs	r0, r0
    52be:	bd70      	pop	{r4, r5, r6, pc}
    52c0:	4b28      	ldr	r3, [pc, #160]	; (5364 <__swsetup_r+0xe4>)
    52c2:	429c      	cmp	r4, r3
    52c4:	d101      	bne.n	52ca <__swsetup_r+0x4a>
    52c6:	68ac      	ldr	r4, [r5, #8]
    52c8:	e7eb      	b.n	52a2 <__swsetup_r+0x22>
    52ca:	4b27      	ldr	r3, [pc, #156]	; (5368 <__swsetup_r+0xe8>)
    52cc:	429c      	cmp	r4, r3
    52ce:	d1e8      	bne.n	52a2 <__swsetup_r+0x22>
    52d0:	68ec      	ldr	r4, [r5, #12]
    52d2:	e7e6      	b.n	52a2 <__swsetup_r+0x22>
    52d4:	075b      	lsls	r3, r3, #29
    52d6:	d513      	bpl.n	5300 <__swsetup_r+0x80>
    52d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
    52da:	2900      	cmp	r1, #0
    52dc:	d008      	beq.n	52f0 <__swsetup_r+0x70>
    52de:	0023      	movs	r3, r4
    52e0:	3344      	adds	r3, #68	; 0x44
    52e2:	4299      	cmp	r1, r3
    52e4:	d002      	beq.n	52ec <__swsetup_r+0x6c>
    52e6:	0030      	movs	r0, r6
    52e8:	f7ff f806 	bl	42f8 <_free_r>
    52ec:	2300      	movs	r3, #0
    52ee:	6363      	str	r3, [r4, #52]	; 0x34
    52f0:	2224      	movs	r2, #36	; 0x24
    52f2:	89a3      	ldrh	r3, [r4, #12]
    52f4:	4393      	bics	r3, r2
    52f6:	81a3      	strh	r3, [r4, #12]
    52f8:	2300      	movs	r3, #0
    52fa:	6063      	str	r3, [r4, #4]
    52fc:	6923      	ldr	r3, [r4, #16]
    52fe:	6023      	str	r3, [r4, #0]
    5300:	2308      	movs	r3, #8
    5302:	89a2      	ldrh	r2, [r4, #12]
    5304:	4313      	orrs	r3, r2
    5306:	81a3      	strh	r3, [r4, #12]
    5308:	6923      	ldr	r3, [r4, #16]
    530a:	2b00      	cmp	r3, #0
    530c:	d10b      	bne.n	5326 <__swsetup_r+0xa6>
    530e:	21a0      	movs	r1, #160	; 0xa0
    5310:	2280      	movs	r2, #128	; 0x80
    5312:	89a3      	ldrh	r3, [r4, #12]
    5314:	0089      	lsls	r1, r1, #2
    5316:	0092      	lsls	r2, r2, #2
    5318:	400b      	ands	r3, r1
    531a:	4293      	cmp	r3, r2
    531c:	d003      	beq.n	5326 <__swsetup_r+0xa6>
    531e:	0021      	movs	r1, r4
    5320:	0030      	movs	r0, r6
    5322:	f7ff fbaf 	bl	4a84 <__smakebuf_r>
    5326:	2301      	movs	r3, #1
    5328:	89a2      	ldrh	r2, [r4, #12]
    532a:	4013      	ands	r3, r2
    532c:	d011      	beq.n	5352 <__swsetup_r+0xd2>
    532e:	2300      	movs	r3, #0
    5330:	60a3      	str	r3, [r4, #8]
    5332:	6963      	ldr	r3, [r4, #20]
    5334:	425b      	negs	r3, r3
    5336:	61a3      	str	r3, [r4, #24]
    5338:	2000      	movs	r0, #0
    533a:	6923      	ldr	r3, [r4, #16]
    533c:	4283      	cmp	r3, r0
    533e:	d1be      	bne.n	52be <__swsetup_r+0x3e>
    5340:	230c      	movs	r3, #12
    5342:	5ee2      	ldrsh	r2, [r4, r3]
    5344:	0613      	lsls	r3, r2, #24
    5346:	d5ba      	bpl.n	52be <__swsetup_r+0x3e>
    5348:	2340      	movs	r3, #64	; 0x40
    534a:	4313      	orrs	r3, r2
    534c:	81a3      	strh	r3, [r4, #12]
    534e:	3801      	subs	r0, #1
    5350:	e7b5      	b.n	52be <__swsetup_r+0x3e>
    5352:	0792      	lsls	r2, r2, #30
    5354:	d400      	bmi.n	5358 <__swsetup_r+0xd8>
    5356:	6963      	ldr	r3, [r4, #20]
    5358:	60a3      	str	r3, [r4, #8]
    535a:	e7ed      	b.n	5338 <__swsetup_r+0xb8>
    535c:	20000178 	.word	0x20000178
    5360:	000077f0 	.word	0x000077f0
    5364:	00007810 	.word	0x00007810
    5368:	000077d0 	.word	0x000077d0

0000536c <_close_r>:
    536c:	2300      	movs	r3, #0
    536e:	b570      	push	{r4, r5, r6, lr}
    5370:	4c06      	ldr	r4, [pc, #24]	; (538c <_close_r+0x20>)
    5372:	0005      	movs	r5, r0
    5374:	0008      	movs	r0, r1
    5376:	6023      	str	r3, [r4, #0]
    5378:	f7fd fc7c 	bl	2c74 <_close>
    537c:	1c43      	adds	r3, r0, #1
    537e:	d103      	bne.n	5388 <_close_r+0x1c>
    5380:	6823      	ldr	r3, [r4, #0]
    5382:	2b00      	cmp	r3, #0
    5384:	d000      	beq.n	5388 <_close_r+0x1c>
    5386:	602b      	str	r3, [r5, #0]
    5388:	bd70      	pop	{r4, r5, r6, pc}
    538a:	46c0      	nop			; (mov r8, r8)
    538c:	20000b70 	.word	0x20000b70

00005390 <_fstat_r>:
    5390:	2300      	movs	r3, #0
    5392:	b570      	push	{r4, r5, r6, lr}
    5394:	4c06      	ldr	r4, [pc, #24]	; (53b0 <_fstat_r+0x20>)
    5396:	0005      	movs	r5, r0
    5398:	0008      	movs	r0, r1
    539a:	0011      	movs	r1, r2
    539c:	6023      	str	r3, [r4, #0]
    539e:	f7fd fc6c 	bl	2c7a <_fstat>
    53a2:	1c43      	adds	r3, r0, #1
    53a4:	d103      	bne.n	53ae <_fstat_r+0x1e>
    53a6:	6823      	ldr	r3, [r4, #0]
    53a8:	2b00      	cmp	r3, #0
    53aa:	d000      	beq.n	53ae <_fstat_r+0x1e>
    53ac:	602b      	str	r3, [r5, #0]
    53ae:	bd70      	pop	{r4, r5, r6, pc}
    53b0:	20000b70 	.word	0x20000b70

000053b4 <_isatty_r>:
    53b4:	2300      	movs	r3, #0
    53b6:	b570      	push	{r4, r5, r6, lr}
    53b8:	4c06      	ldr	r4, [pc, #24]	; (53d4 <_isatty_r+0x20>)
    53ba:	0005      	movs	r5, r0
    53bc:	0008      	movs	r0, r1
    53be:	6023      	str	r3, [r4, #0]
    53c0:	f7fd fc60 	bl	2c84 <_isatty>
    53c4:	1c43      	adds	r3, r0, #1
    53c6:	d103      	bne.n	53d0 <_isatty_r+0x1c>
    53c8:	6823      	ldr	r3, [r4, #0]
    53ca:	2b00      	cmp	r3, #0
    53cc:	d000      	beq.n	53d0 <_isatty_r+0x1c>
    53ce:	602b      	str	r3, [r5, #0]
    53d0:	bd70      	pop	{r4, r5, r6, pc}
    53d2:	46c0      	nop			; (mov r8, r8)
    53d4:	20000b70 	.word	0x20000b70

000053d8 <_lseek_r>:
    53d8:	b570      	push	{r4, r5, r6, lr}
    53da:	0005      	movs	r5, r0
    53dc:	0008      	movs	r0, r1
    53de:	0011      	movs	r1, r2
    53e0:	2200      	movs	r2, #0
    53e2:	4c06      	ldr	r4, [pc, #24]	; (53fc <_lseek_r+0x24>)
    53e4:	6022      	str	r2, [r4, #0]
    53e6:	001a      	movs	r2, r3
    53e8:	f7fd fc4e 	bl	2c88 <_lseek>
    53ec:	1c43      	adds	r3, r0, #1
    53ee:	d103      	bne.n	53f8 <_lseek_r+0x20>
    53f0:	6823      	ldr	r3, [r4, #0]
    53f2:	2b00      	cmp	r3, #0
    53f4:	d000      	beq.n	53f8 <_lseek_r+0x20>
    53f6:	602b      	str	r3, [r5, #0]
    53f8:	bd70      	pop	{r4, r5, r6, pc}
    53fa:	46c0      	nop			; (mov r8, r8)
    53fc:	20000b70 	.word	0x20000b70

00005400 <memchr>:
    5400:	b2c9      	uxtb	r1, r1
    5402:	1882      	adds	r2, r0, r2
    5404:	4290      	cmp	r0, r2
    5406:	d101      	bne.n	540c <memchr+0xc>
    5408:	2000      	movs	r0, #0
    540a:	4770      	bx	lr
    540c:	7803      	ldrb	r3, [r0, #0]
    540e:	428b      	cmp	r3, r1
    5410:	d0fb      	beq.n	540a <memchr+0xa>
    5412:	3001      	adds	r0, #1
    5414:	e7f6      	b.n	5404 <memchr+0x4>
	...

00005418 <_read_r>:
    5418:	b570      	push	{r4, r5, r6, lr}
    541a:	0005      	movs	r5, r0
    541c:	0008      	movs	r0, r1
    541e:	0011      	movs	r1, r2
    5420:	2200      	movs	r2, #0
    5422:	4c06      	ldr	r4, [pc, #24]	; (543c <_read_r+0x24>)
    5424:	6022      	str	r2, [r4, #0]
    5426:	001a      	movs	r2, r3
    5428:	f7fd fbc8 	bl	2bbc <_read>
    542c:	1c43      	adds	r3, r0, #1
    542e:	d103      	bne.n	5438 <_read_r+0x20>
    5430:	6823      	ldr	r3, [r4, #0]
    5432:	2b00      	cmp	r3, #0
    5434:	d000      	beq.n	5438 <_read_r+0x20>
    5436:	602b      	str	r3, [r5, #0]
    5438:	bd70      	pop	{r4, r5, r6, pc}
    543a:	46c0      	nop			; (mov r8, r8)
    543c:	20000b70 	.word	0x20000b70
    5440:	00000f52 	.word	0x00000f52
    5444:	00000f58 	.word	0x00000f58
    5448:	00000f5e 	.word	0x00000f5e
    544c:	00000f6a 	.word	0x00000f6a
    5450:	00000f70 	.word	0x00000f70
    5454:	00000f76 	.word	0x00000f76
    5458:	00000008 	.word	0x00000008
    545c:	00000008 	.word	0x00000008
    5460:	00000008 	.word	0x00000008
    5464:	00000008 	.word	0x00000008
    5468:	00000008 	.word	0x00000008
    546c:	00000008 	.word	0x00000008
    5470:	00000008 	.word	0x00000008
    5474:	00000008 	.word	0x00000008
    5478:	00000010 	.word	0x00000010
    547c:	00000010 	.word	0x00000010
    5480:	00000010 	.word	0x00000010
    5484:	00000010 	.word	0x00000010
    5488:	00000010 	.word	0x00000010
    548c:	00000010 	.word	0x00000010
    5490:	00000010 	.word	0x00000010
    5494:	00000010 	.word	0x00000010
    5498:	00000018 	.word	0x00000018
    549c:	00000018 	.word	0x00000018
    54a0:	00000018 	.word	0x00000018
    54a4:	00000018 	.word	0x00000018
    54a8:	00000018 	.word	0x00000018
    54ac:	00000018 	.word	0x00000018
    54b0:	00000018 	.word	0x00000018
    54b4:	00000018 	.word	0x00000018
    54b8:	00000020 	.word	0x00000020
    54bc:	00000020 	.word	0x00000020
    54c0:	00000020 	.word	0x00000020
    54c4:	00000020 	.word	0x00000020
    54c8:	00000020 	.word	0x00000020
    54cc:	00000020 	.word	0x00000020
    54d0:	00000020 	.word	0x00000020
    54d4:	00000020 	.word	0x00000020
    54d8:	00000028 	.word	0x00000028
    54dc:	00000028 	.word	0x00000028
    54e0:	00000028 	.word	0x00000028
    54e4:	00000028 	.word	0x00000028
    54e8:	00000028 	.word	0x00000028
    54ec:	00000028 	.word	0x00000028
    54f0:	00000028 	.word	0x00000028
    54f4:	00000028 	.word	0x00000028
    54f8:	00000030 	.word	0x00000030
    54fc:	00000030 	.word	0x00000030
    5500:	00000030 	.word	0x00000030
    5504:	00000030 	.word	0x00000030
    5508:	00000030 	.word	0x00000030
    550c:	00000030 	.word	0x00000030
    5510:	00000030 	.word	0x00000030
    5514:	00000030 	.word	0x00000030
    5518:	00000038 	.word	0x00000038
    551c:	00000038 	.word	0x00000038
    5520:	00000038 	.word	0x00000038
    5524:	00000038 	.word	0x00000038
    5528:	00000038 	.word	0x00000038
    552c:	00000038 	.word	0x00000038
    5530:	00000038 	.word	0x00000038
    5534:	00000038 	.word	0x00000038
    5538:	00000040 	.word	0x00000040
    553c:	00000040 	.word	0x00000040
    5540:	00000040 	.word	0x00000040
    5544:	00000040 	.word	0x00000040
    5548:	00000040 	.word	0x00000040
    554c:	00000040 	.word	0x00000040
    5550:	00000040 	.word	0x00000040
    5554:	00000040 	.word	0x00000040
    5558:	00000048 	.word	0x00000048
    555c:	00000048 	.word	0x00000048
    5560:	00000048 	.word	0x00000048
    5564:	00000048 	.word	0x00000048
    5568:	00000048 	.word	0x00000048
    556c:	00000048 	.word	0x00000048
    5570:	00000048 	.word	0x00000048
    5574:	00000048 	.word	0x00000048
    5578:	0000004f 	.word	0x0000004f
    557c:	0000004f 	.word	0x0000004f
    5580:	0000004f 	.word	0x0000004f
    5584:	0000004f 	.word	0x0000004f
    5588:	0000004f 	.word	0x0000004f
    558c:	0000004f 	.word	0x0000004f
    5590:	0000004f 	.word	0x0000004f
    5594:	0000004f 	.word	0x0000004f

00005598 <csiEscCodes>:
    5598:	44434241 48474645 6d4b4a49 73725150     ABCDEFGHIJKmPQrs
    55a8:	005a5857 000a000a 00140014 00000014     WXZ.............
    55b8:	000a017c 000a017c 00140186 00140000     |...|...........
    55c8:	0122000a 00140186 01220190 0122000a     .."......."...".
    55d8:	012c0014 0122017c 012c0186 012c0014     ..,.|."...,...,.
    55e8:	0136017c 001e0000 00280032 00320000     |.6.....2.(...2.
    55f8:	003c0032 001e0050 00280118 00280046     2.<.P.....(.F.(.
    5608:	00be0050 00be0050 00c80118 00280118     P...P.........(.
    5618:	00be0122 00460000 00500032 005a0000     ".....F.2.P...Z.
    5628:	00640032 006e0000 00780032 00820000     2.d...n.2.x.....
    5638:	008c0032 00960000 00a00032 00aa0000     2.......2.......
    5648:	00b40032 00be0000 00c80032 00c8012c     2.......2...,...
    5658:	00d20172 00dc001e 00e60172 00f0001e     r.......r.......
    5668:	00fa0172 0104001e 010e0172 0118005a     r.......r...Z...
    5678:	0122012c 82be50b4 8cbe82aa 64963c8c     ,."..P.......<.d
    5688:	64dc3cd2 a08c9682 aadca08c a0e696dc     .<.d............
    5698:	50f03c78 5a78466e aaaa3c96 a0dc3cc8     x<.PnFxZ.<...<..
    56a8:	aae6a0d2 6e617254 69722073 73746867     ....Trans rights
    56b8:	65726120 6d756820 72206e61 74686769      are human right
    56c8:	00000073 355e3331 31202b20 20355e36     s...13^5 + 16^5 
    56d8:	3731203d 0000355e 69746552 616c7563     = 17^5..Reticula
    56e8:	676e6974 6c705320 73656e69 00000000     ting Splines....
    56f8:	6c6f6976 65636e65 726f772e 0000736b     violence.works..
    5708:	2b206953 00425020 6c6c694b 6c694220     Si + PB.Kill Bil
    5718:	6e6f696c 65726961 61282073 5420646e     lionaires (and T
    5728:	6c6c6972 616e6f69 29657269 00000000     rillionaire)....
    5738:	65746e49 74736572 206e6920 68636574     Interest in tech
    5748:	6f6c6f6e 69207967 6f6e2073 20612074     nology is not a 
    5758:	73726570 6c616e6f 00797469 50203031     personality.10 P
    5768:	544e4952 52484320 30322824 2b352e35     RINT CHR$(205.5+
    5778:	28444e52 3b292931 47203a20 204f544f     RND(1)); : GOTO 
    5788:	00003031 67206f4e 2e73646f 206f4e20     10..No gods. No 
    5798:	7473616d 2e737265 206f4e20 65747865     masters. No exte
    57a8:	6c616e72 62696c20 69726172 002e7365     rnal libraries..
    57b8:	6c6c694b 7a614e20 00007369 6e616954     Kill Nazis..Tian
    57c8:	656d6e61 7153206e 65726175 38393120     anmen Square 198
    57d8:	00000039 72656d41 20616369 20736177     9...America was 
    57e8:	6e756f66 20646564 73206e6f 6576616c     founded on slave
    57f8:	00007972 72656854 73692065 6c6e6f20     ry..There is onl
    5808:	61632079 61746970 6e61206c 616c2064     y capital and la
    5818:	00726f62 6f636e45 67617275 59532065     bor.Encourage SY
    5828:	54454d4d 20434952 73616c63 61772073     MMETRIC class wa
    5838:	72616672 00000065 52554324 544e4552     rfare...$CURRENT
    5848:	4d454d5f 00000045 694e2041 54206563     _MEME...A Nice T
    5858:	00005954 78696e55 6f706520 6d206863     TY..Unix epoch m
    5868:	73756e69 46783020 61642046 00007379     inus 0xFF days..
    5878:	3d202069 35783020 35373366 20666439     i  = 0x5f3759df 
    5888:	2028202d 3e3e2069 29203120 0000003b     - ( i >> 1 );...
    5898:	61657053 7274206b 20687475 70206f74     Speak truth to p
    58a8:	7265776f 2749203b 7573206d 74206572     ower; I'm sure t
    58b8:	27796568 6c206c6c 65747369 6874206e     hey'll listen th
    58c8:	74207369 2e656d69 00000000 63666544     is time.....Defc
    58d8:	73276e6f 6e616320 656c6563 32282064     on's canceled (2
    58e8:	29303230 00000000 73746152 7473656e     020)....Ratsnest
    58f8:	6f4e203a 6e696874 6f542067 216f4420     : Nothing To Do!
    5908:	00000000 68207449 36207361 656b2039     ....It has 69 ke
    5918:	002e7379 61636542 20657375 342d5456     ys..Because VT-4
    5928:	77203032 61207361 6165726c 74207964     20 was already t
    5938:	6e656b61 00000000 706d6f43 73736572     aken....Compress
    5948:	206e6f69 6f676c61 68746972 6162206d     ion algorithm ba
    5958:	20646573 42206e6f 28205042 37393931     sed on BBP (1997
    5968:	00000029 63616554 65682068 68746c61     )...Teach health
    5978:	736e6920 6e617275 70206563 69766f72      insurance provi
    5988:	73726564 206f7420 65646f63 0000002e     ders to code....
    5998:	6e617247 65432064 6172746e 6148206c     Grand Central Ha
    59a8:	54206b63 50206568 656e616c 00000074     ck The Planet...
    59b8:	69466957 20736920 20746f6e 65726977     WiFi is not wire
    59c8:	7373656c 68744520 656e7265 00002174     less Ethernet!..
    59d8:	6d6d7544 68742079 20636369 65696c63     Dummy thicc clie
    59e8:	0000746e 694e2041 54206563 202e5954     nt..A Nice TTY. 
    59f8:	4f206e41 6f43204b 7475706d 002e7265     An OK Computer..
    5a08:	65545355 6964656c 6e6f646c 00736369     USTeledildonics.
    5a18:	696c6f53 69726164 69207974 6f6e2073     Solidarity is no
    5a28:	20612074 2077656e 6d617266 726f7765     t a new framewor
    5a38:	0000006b 61657242 616f6264 6e696472     k...Breadboardin
    5a48:	73492067 746f4e20 43204120 656d6972     g Is Not A Crime
    5a58:	00000000 2066664f 6f207962 6520656e     ....Off by one e
    5a68:	726f7272 72612073 6f632065 6e6f6d6d     rrors are common
    5a78:	00000000 000015c6 00001812 00001812     ................
    5a88:	00001812 00001812 00001812 00001812     ................
    5a98:	00001812 00001812 00001812 00001812     ................
    5aa8:	00001812 00001812 00001812 00001812     ................
    5ab8:	00001812 000015ae 00001812 00001812     ................
    5ac8:	00001812 00001812 00001812 00001812     ................
    5ad8:	00001812 00001812 00001812 00001812     ................
    5ae8:	00001812 00001812 00001812 00001812     ................
    5af8:	00001812 000015be 00001812 00001812     ................
    5b08:	00001812 00001812 00001812 00001812     ................
    5b18:	00001812 00001812 00001812 00001812     ................
    5b28:	00001812 00001812 00001812 00001812     ................
    5b38:	00001812 000015b6 000015ce 00001596     ................
    5b48:	000015a6 0000159e 00000002 00000003     ................
    5b58:	00000028 00000029 00000004 00000005     (...)...........
    5b68:	00000006 00000007 00000020 00000021     ........ ...!...
    5b78:	00000022 00000023 00000024 00000025     "...#...$...%...
    5b88:	00000026 00000027 00000008 00000009     &...'...........
    5b98:	0000000a 0000000b 42000800 42000c00     ...........B...B
    5ba8:	42001000 42001400 42001800 42001c00     ...B...B...B...B
    5bb8:	0000234a 00002346 00002346 000023ac     J#..F#..F#...#..
    5bc8:	000023ac 0000235e 00002350 00002364     .#..^#..P#..d#..
    5bd8:	0000239a 0000256c 0000254c 0000254c     .#..l%..L%..L%..
    5be8:	000025d8 0000255e 0000257a 00002550     .%..^%..z%..P%..
    5bf8:	00002588 000025c8                       .%...%..

00005c00 <CodePage437>:
	...
    5f38:	01000000 06186080 18608001 60800106     .....`....`....`
    5f48:	80010000 00000060 00000000 66986106     ....`........a.f
    5f58:	98618619 00000000 00000000 00000000     ..a.............
    5f68:	00000000 98610600 fb8f1966 8f1966fe     ......a.f....f..
    5f78:	1966fefb 00986186 00000000 80010000     ..f..a..........
    5f88:	891f7e60 1f7e6082 7e649081 6080811f     `~...`~...d~...`
    5f98:	00000000 04000000 29a60823 1820c106     ........#..).. .
    5fa8:	98200304 324c1165 00000008 00000000     .. .e.L2........
    5fb8:	84e08107 10420821 5a081e78 87208216     ....!.B.x..Z.. .
    5fc8:	0000f6d9 00000000 30c00000 00030618     ...........0....
    5fd8:	000000c0 00000000 00000000 00000000     ................
    5fe8:	40000000 03020810 0c30c000 08c00003     ...@......0.....
    5ff8:	10400002 00000000 01000000 02084000     ..@..........@..
    6008:	06186000 18608001 00010208 00000040     .`....`.....@...
    6018:	00000000 42000000 90408210 40c23fff     .......B..@..?.@
    6028:	80104290 00000000 00000000 00000000     .B..............
    6038:	80000208 e0bfff20 02082080 00000000     .... .... ......
	...
    6058:	18000000 c0000306 00001040 00000000     ........@.......
    6068:	00000000 ff000000 0000e0bf 00000000     ................
	...
    608c:	030e3800 0000e080 00000000 08200000     .8............ .
    609c:	80000104 02041020 10408000 00000208     .... .....@.....
    60ac:	00000000 e0030000 cc1863f8 b0c1061b     .........c......
    60bc:	63061b6c f8e0c318 00000000 00000000     l..c............
    60cc:	1b3c70c0 0c30c004 30c00003 e107030c     .p<...0....0....
    60dc:	000000f8 00000000 c1f8e107 061860b0     .............`..
    60ec:	0187030e 0f30c0c0 0000fefb 00000000     ......0.........
    60fc:	fefb0f00 60c00003 80030e30 b0810618     .......`0.......
    610c:	00f8e167 00000000 40000000 03070c30     g..........@0...
    611c:	31649040 04fefb0f 10400001 00000000     @.d1......@.....
    612c:	0f000000 30c0fefb c1f8e30f 061860b0     .......0.....`..
    613c:	e167a081 000000f8 00000000 60f8e003     ..g............`
    614c:	00030c18 1b8c3ffe 67b0c106 0000f8e1     .....?.....g....
    615c:	00000000 fefb0f00 20608001 00010408     ..........` ....
    616c:	0c302080 00c00003 00000000 e0030000     . 0.............
    617c:	6cb0c1f8 0f3e061b c1061b8c f8e063b0     ...l..>......c..
    618c:	00000000 07000000 b0c1f8e1 7d0e3b6c     ............l;.}
    619c:	0618609f e1c70003 000000f0 00000000     .`..............
    61ac:	38000000 e080030e 00000000 030e3800     ...8.........8..
    61bc:	0000e080 00000000 00000000 80030e38     ............8...
    61cc:	000000e0 0e380000 40c00003 00000010     ......8....@....
    61dc:	30000000 03030c0c 30c0c000 0cc00003     ...0.......0....
    61ec:	0c300003 00000000 00000000 00000000     ..0.............
    61fc:	00fefb0f fefb0f00 00000000 00000000     ................
    620c:	00000000 3000030c 30c0000c c0c00003     .......0...0....
    621c:	0c0c3030 00000003 00000000 f8e10700     00..............
    622c:	6060b0c1 01061818 00006080 00608001     ..``.....`....`.
    623c:	00000000 e1070000 6cb0c1f8 b4d33edb     ...........l.>..
    624c:	c036fbec f8e10730 00000000 00000000     ..6.0...........
    625c:	0d367080 c18c3186 fefb6fb0 1b6cb0c1     .p6..1...o....l.
    626c:	00000006 00000000 61f8e30f 86196698     ...........a.f..
    627c:	19861f7e 6f986186 0000f8e3 00000000     ~....a.o........
    628c:	f8e00300 036c9861 0c30c000 98610003     ....a.l...0...a.
    629c:	00f8e063 00000000 c30f0000 861966f0     c............f..
    62ac:	98618631 668c1966 f0c38f19 00000000     1.a.f..f........
    62bc:	0f000000 30c0fefb fc00030c 00030c3f     .......0....?...
    62cc:	fb0f30c0 000000fe 00000000 c0fefb0f     .0..............
    62dc:	00030c30 030c3ffc 0c30c000 00000003     0....?....0.....
    62ec:	00000000 f8e00300 036c9861 0c30c000     ........a.l...0.
    62fc:	98611e7b 00f8e063 00000000 1b0c0000     {.a.c...........
    630c:	6cb0c106 bfff061b c1061bec 061b6cb0     ...l.........l..
    631c:	00000000 07000000 0618f8e1 18608001     ..............`.
    632c:	60800106 e1070618 000000f8 00000000     ...`............
    633c:	067ef801 18608001 60800106 8731c618     ..~...`....`..1.
    634c:	0000f0c1 00000000 061b0c00 838d31c6     .............1..
    635c:	0d38e060 31c66083 00061b8c 00000000     `.8..`.1........
    636c:	030c0000 0c30c000 30c00003 c000030c     ......0....0....
    637c:	fefb0f30 00000000 0c000000 bde38e1b     0...............
    638c:	c976dbed 061b6cb2 1b6cb0c1 00000006     ..v..l....l.....
    639c:	00000000 e1861b0c 661b6dbc 5b6cb3c9     .........m.f..l[
    63ac:	ecb0c31e 0000061b 00000000 f8e00300     ................
    63bc:	1b6cb0e3 6cb0c106 b8c1061b 00f8e0e3     ..l....l........
    63cc:	00000000 e30f0000 6cb0c1f8 3ffe061b     ...........l...?
    63dc:	c000038c 00030c30 00000000 07000000     ....0...........
    63ec:	b0c1f8e1 c1061b6c 36db6cb0 d98731c6     ....l....l.6.1..
    63fc:	000000f6 00000000 c1f8e30f 061b6cb0     .............l..
    640c:	638c3ffe cc30c318 0000061b 00000000     .?.c..0.........
    641c:	f8e10700 036cb0c1 801f7e00 b0c10618     ......l..~......
    642c:	00f8e167 00000000 fb0f0000 000208fe     g...............
    643c:	02082080 08208000 20800002 00000000     . .... .... ....
    644c:	0c000000 b0c1061b c1061b6c 061b6cb0     ........l....l..
    645c:	e063b0c1 000000f8 00000000 c1061b0c     ..c.............
    646c:	8c3166b0 60c31863 810d36d8 000020c0     .f1.c..`.6... ..
    647c:	00000000 061b0c00 1b6cb0c1 6db2c906     ..........l....m
    648c:	b5d576db 008c796f 00000000 1b0c0000     .v..oy..........
    649c:	c3186306 060cf860 63d8e003 061bcc18     .c..`......c....
    64ac:	00000000 0c000000 1863061b 1cd860c3     ..........c..`..
    64bc:	20c00107 80000208 00000020 00000000     ... .... .......
    64cc:	03fefb0f 1060c000 0103060c 0f30c0c0     ......`.......0.
    64dc:	0000fefb 00000000 f8e00300 00030c30     ............0...
    64ec:	030c30c0 0c30c000 00f8e003 00000000     .0....0.........
    64fc:	01060000 010c3080 030c6080 03186000     .....0...`...`..
    650c:	0618c000 00000000 07000000 030cf0c1     ................
    651c:	0c30c000 30c00003 c107030c 000000f0     ..0....0........
    652c:	00000000 36708000 8c31860d 0060b0c1     ......p6..1...`.
	...
    6558:	00fefb0f 00000000 80030000 00030ce0     ................
    6568:	00001860 00000000 00000000 00000000     `...............
	...
    6580:	01fcf003 fef86380 f823b0c0 000000fe     .....c....#.....
    6590:	00000000 c000030c fcf30d30 0b6cb8e1     ........0.....l.
    65a0:	6fb8e102 00007cf3 00000000 00000000     ...o.|..........
    65b0:	e1070000 6cb0c1f8 30c00003 00fef907     .......l...0....
    65c0:	00000000 18000000 67800106 b0c3f6d9     ...........g....
    65d0:	c3061bec f6d9e7b0 00000000 00000000     ................
    65e0:	00000000 c1f8e107 fefb6fb0 f10730c0     .........o...0..
    65f0:	000000fc 00000000 3138e000 c000638c     ..........81.c..
    6600:	00033ffc 030c30c0 0000c000 00000000     .?...0..........
    6610:	00000000 d9070000 8731c6f6 30c0f0c1     ..........1....0
    6620:	c3f8e107 f8e1e7b0 030c0000 0d30c000     ..............0.
    6630:	b8e178e3 c1061b6c 061b6cb0 00000000     .x..l....l......
    6640:	01000000 00006080 18e08003 60800106     .....`.........`
    6650:	e1070618 000000f8 00000000 00186000     .............`..
    6660:	18600000 60800106 8c010618 31c61863     ..`....`....c..1
    6670:	00f0c187 00030c00 638c30c0 0f36cc30     .........0.c0.6.
    6680:	33ccc083 000c330c 00000000 c0030000     ...3.3..........
    6690:	00030cf0 030c30c0 0c30c000 f8e00303     .....0....0.....
	...
    66ac:	e70c330c 669b6dbf 1b6cb0c1 00000006     .3...m.f..l.....
	...
    66c4:	f8e20b00 1b6cb8e1 6cb0c106 0000061b     ......l....l....
	...
    66dc:	e1070000 cc30c3f8 30c30c33 00f8e1c7     ......0.3..0....
	...
    66f4:	0b000000 b0c1f8e2 be061b6c 0002882f     ........l.../...
    6704:	02082080 00000000 00000000 c1fae803     . ..............
    6714:	061b6cb0 08a08f3e 20800002 00000208     .l..>...... ....
    6724:	00000000 7ce20800 036cbcf1 0c30c000     .......|..l...0.
    6734:	00000003 00000000 00000000 e1070000     ................
    6744:	0730c0f8 8001f8e1 00f8e36f 00000000     ..0.....o.......
    6754:	00030000 0f0c30c0 0c30f8e3 33c00003     .....0....0....3
    6764:	30c0c00c 00000000 00000000 00000000     ...0............
    6774:	c30c330c 0c33cc30 d9c730c3 000000f6     .3..0.3..0......
	...
    678c:	02020000 30e6b8c1 01073ed8 000020c0     .......0.>... ..
	...
    67a4:	1b0c0000 6cb0c106 b5d5769b 008c3166     .......l.v..f1..
	...
    67bc:	08000000 1b441823 6ce08003 08620c11     ....#.D....l..b.
	...
    67d8:	c618630c 18638c31 60801f7e 873bc618     .c..1.c.~..`..;.
    67e8:	0000f0c1 00000000 fefb0f00 c0c00003     ................
    67f8:	0f0c3030 0000fefb 00000000 1e780000     00............x.
    6808:	40000208 000e3810 02081040 001e7800     ...@.8..@....x..
    6818:	00000000 80010000 01061860 06186080     ........`....`..
    6828:	18608001 60800106 00000000 0f000000     ..`....`........
    6838:	0208c003 0cc00003 c0000303 030f0208     ................
    6848:	000000c0 00000000 d9c61907 1c736cb3     .............ls.
	...
    6880:	e0030000 6c9861f8 30c00003 6100030c     .....a.l...0...a
    6890:	f8e06398 00000608 00000000 00669801     .c............f.
    68a0:	c30c330c 0c33cc30 d9c730c3 000000f6     .3..0.3..0......
    68b0:	00000000 0c180000 f8e10700 fb6fb0c1     ..............o.
    68c0:	0730c0fe 0000fcf1 00000000 10000000     ..0.............
    68d0:	f003000a 638001fc b0c0fef8 00fef823     .......c....#...
	...
    68e8:	030033cc 8001fcf0 c0fef863 fef823b0     .3......c....#..
	...
    6900:	000c6000 01fcf003 fef86380 f823b0c0     .`.......c....#.
    6910:	000000fe 03000000 0c482001 fcf00300     ......... H.....
    6920:	f8638001 23b0c0fe 0000fef8 00000000     ..c....#........
    6930:	00000000 e1070000 6cb0c1f8 30c00003     ...........l...0
    6940:	04fef907 00000003 00000000 07001420     ............ ...
    6950:	b0c1f8e1 c0fefb6f fcf10730 00000000     ....o...0.......
    6960:	00000000 00669801 c1f8e107 fefb6fb0     ......f......o..
    6970:	f10730c0 000000fc 00000000 18c00000     .0..............
    6980:	f8e10700 fb6fb0c1 0730c0fe 0000fcf1     ......o...0.....
    6990:	00000000 98610600 80030000 010618e0     ......a.........
    69a0:	06186080 00f8e107 00000000 00000000     .`..............
    69b0:	03002840 0618e080 18608001 f8e10706     @(........`.....
	...
    69c8:	0018c000 18e08003 60800106 e1070618     ...........`....
    69d8:	000000f8 18630000 367080c0 8c31860d     ......c...p6..1.
    69e8:	fb6fb0c1 6cb0c1fe 0000061b 1c000000     ..o....l........
    69f8:	70c08108 31860d36 6fb0c18c b0c1fefb     ...p6..1...o....
    6a08:	00061b6c 00000000 fb0f0606 0c30c0fe     l.............0.
    6a18:	3ffc0003 c000030c fefb0f30 00000000     ...?....0.......
	...
    6a30:	1dfe7907 fedb2786 f90733cc 000000ee     .y...'...3......
    6a40:	00000000 367ef800 9861860d e3efb1c7     ......~6..a.....
    6a50:	8c31c6f8 00001e7b 00000000 20000000     ..1.{.......... 
    6a60:	e1070014 cc30c3f8 30c30c33 00f8e1c7     ......0.3..0....
    6a70:	00000000 01000000 07006698 30c3f8e1     .........f.....0
    6a80:	c30c33cc f8e1c730 00000000 00000000     .3..0...........
    6a90:	0018c000 c3f8e107 0c33cc30 e1c730c3     ........0.3..0..
    6aa0:	000000f8 00000000 14200000 0c330c00     .......... ...3.
    6ab0:	33cc30c3 c730c30c 0000f6d9 00000000     .0.3..0.........
    6ac0:	60000000 330c000c cc30c30c 30c30c33     ...`...3..0.3..0
    6ad0:	00f6d9c7 00000000 01000000 0c006698     .............f..
    6ae0:	31c61863 7e18638c 1860801f c1873bc6     c..1.c.~..`..;..
    6af0:	800d36f0 383ef800 c1061bec 061b6cb0     .6....>8.....l..
    6b00:	e0e3b8c1 000000f8 0c330000 c10603c0     ..........3.....
    6b10:	061b6cb0 1b6cb0c1 63b0c106 0000f8e0     .l....l....c....
    6b20:	00000000 20800002 1b8c1f7e 0c32c826     ....... ~...&.2.
    6b30:	1f7e069b 08208080 00000000 c0010000     ..~... .........
    6b40:	461873f8 3e608001 6080810f fefb0f18     .s.F..`>...`....
    6b50:	00000000 0c000000 08630419 1c506083     ..........c..`P.
    6b60:	20e00302 80800f08 00000020 00000000     ... .... .......
    6b70:	c1f8e30f f81b6cb0 830d30fe 0d36d878     .....l...0..x.6.
    6b80:	000038e3 00000000 3ce00000 98638e3f     .8.........<?.c.
    6b90:	833ffee0 1c70c000 60800106 00000018     ..?...p....`....
    6ba0:	00000000 03000c18 8001fcf0 c0fef863     ............c...
    6bb0:	fef823b0 00000000 00000000 000060c0     .#...........`..
    6bc0:	18e08003 60800106 e1070618 000000f8     .......`........
    6bd0:	00000000 18300000 f8e10700 33cc30c3     ......0......0.3
    6be0:	c730c30c 0000f8e1 00000000 30000000     ..0............0
    6bf0:	330c0018 cc30c30c 30c30c33 00f6d9c7     ...3..0.3..0....
	...
    6c08:	0b001998 b8e1f8e2 c1061b6c 061b6cb0     ........l....l..
    6c18:	00000000 8c0c4c00 b8e1061b c9461b6d     .....L......m.F.
    6c28:	165b6cb2 1becb0c3 00000006 00000000     .l[.............
    6c38:	1e08c003 00e08308 000080ff 00000000     ................
	...
    6c50:	d8c00100 c0810d22 0080ff00 00000000     ...."...........
	...
    6c6c:	00030c00 030c0000 3030c000 061b0c0c     ..........00....
    6c7c:	00c00f3f 00000000 00000000 ff000000     ?...............
    6c8c:	0003ecbf 00000000 00000000 00000000     ................
	...
    6ca4:	18e0bfff 00000006 00000000 00000000     ................
    6cb4:	30c00003 c000030c e0bfff00 0c1f3800     ...0.........8..
    6cc4:	183060c0 0000c00f c0000300 00030c30     .`0.........0...
    6cd4:	bfff00c0 668001e0 fc618619 60800106     .......f..a....`
    6ce4:	00000000 06180000 18000000 60800106     ...............`
    6cf4:	80010618 00061860 00000000 00000000     ....`...........
    6d04:	90200100 80042448 00001290 00000000     .. .H$..........
	...
    6d1c:	40020000 20010948 00244890 00000000     ...@H.. .H$.....
    6d2c:	00000000 48024092 09004900 80240024     .....@.H.I..$.$.
    6d3c:	92009004 00480240 24090049 42529200     ....@.H.I..$..RB
    6d4c:	0949494a 24242529 929094a4 4a425292     JII.)%$$.....RBJ
    6d5c:	29094949 ad6d2425 b6b6b5bd dbdad6f6     II.)%$m.........
    6d6c:	6f6b5bdb bdad6d6d f6b6b6b5 08dbdad6     .[komm..........
    6d7c:	20800002 80000208 00020820 02082080     ... .... .... ..
    6d8c:	08208000 20800002 80000208 00020820     .. .... .... ...
    6d9c:	3e082080 08208000 20800002 80000208     . .>.. .... ....
    6dac:	00020820 02082080 f8208000 20800f02      .... .... .... 
    6dbc:	80000208 00020820 05142080 14504001     .... .... ...@P.
    6dcc:	50400105 40013d14 01051450 05145040     ..@P.=.@P...@P..
    6ddc:	00504001 00000000 00000000 013f0000     .@P...........?.
    6dec:	05145040 14504001 50400105 00000000     @P...@P...@P....
    6dfc:	00000000 02f80000 0820800f 20800002     .......... .... 
    6e0c:	80000208 01051420 05145040 f4504001     .... ...@P...@P.
    6e1c:	50400f01 40010514 01051450 05145040     ..@P...@P...@P..
    6e2c:	14504001 50400105 40010514 01051450     .@P...@P...@P...
    6e3c:	05145040 00504001 00000000 00000000     @P...@P.........
    6e4c:	0f01fc00 05145040 14504001 50400105     ....@P...@P...@P
    6e5c:	40010514 01051450 01f45040 0000c00f     ...@P...@P......
	...
    6e74:	01051400 05145040 14504001 0000003f     ....@P...@P.?...
	...
    6e8c:	02080000 08208000 20800002 800f02f8     ...... .... ....
	...
    6eb0:	003e0000 02082080 08208000 20800002     ..>.. .... .... 
    6ec0:	80000208 00020820 03082080 000000f0     .... .... ......
	...
    6ed8:	00020800 02082080 08208000 0000f03f     ..... .... .?...
	...
    6efc:	80f03f00 00020820 02082080 08208000     .?.. .... .... .
    6f0c:	20800002 80000208 f0030820 02082080     ... .... .... ..
    6f1c:	08208000 20800002 00000000 00000000     .. .... ........
    6f2c:	3f000000 000000f0 00000000 00000000     ...?............
    6f3c:	00020800 02082080 08208000 2080f03f     ..... .... .?.. 
    6f4c:	80000208 00020820 02082080 08208000     .... .... .... .
    6f5c:	20800002 fc00c20f 00020820 02082080     ... .... .... ..
    6f6c:	14208000 50400105 40010514 f1051450     .. ...@P...@P...
    6f7c:	05145040 14504001 50400105 40010514     @P...@P...@P...@
    6f8c:	01051450 c4175040 0000fc01 00000000     P...@P..........
	...
    6fa8:	1f000000 507c01c4 40010514 01051450     ......|P...@P...
    6fb8:	05145040 14504001 50400105 fc0fc0f7     @P...@P...@P....
	...
    6fdc:	0fc0ff00 0514507c 14504001 50400105     ....|P...@P...@P
    6fec:	40010514 01051450 c4175040 14507c01     ...@P...@P...|P.
    6ffc:	50400105 40010514 00000050 00000000     ..@P...@P.......
    700c:	ff000000 00fc0fc0 00000000 00000000     ................
    701c:	05140000 14504001 50400105 7c0fc0f7     .....@P...@P...|
    702c:	01051450 05145040 08504001 20800002     P...@P...@P.... 
    703c:	80000208 0fc0ff20 000000fc 00000000     .... ...........
    704c:	00000000 40010514 01051450 3f145040     .......@P...@P.?
    705c:	000000f0 00000000 00000000 00000000     ................
    706c:	00000000 ff000000 20fc0fc0 80000208     ........... ....
    707c:	00020820 00002080 00000000 00000000      .... ..........
    708c:	40f13f00 01051450 05145040 14504001     .?.@P...@P...@P.
    709c:	50400105 40010514 f0071450 00000000     ..@P...@P.......
	...
    70b4:	80000208 00020820 c20f2080 0000fc00     .... .... ......
	...
    70d4:	0f000000 20fc00c2 80000208 00020820     ....... .... ...
    70e4:	00002080 00000000 00000000 40f10700     . .............@
    70f4:	01051450 05145040 14504001 50400105     P...@P...@P...@P
    7104:	40010514 f13f1450 05145040 14504001     ...@P.?.@P...@P.
    7114:	50400105 80000208 00020820 c2ff2080     ..@P.... .... ..
    7124:	0820fc0f 20800002 80000208 00020820     .. .... .... ...
    7134:	02082080 08208000 0000003e 00000000     . .... .>.......
	...
    7154:	80f00300 00020820 02082080 ff208000     .... .... .... .
    7164:	ffffffff ffffffff ffffffff ffffffff     ................
    7174:	ffffffff ffffffff 00000000 00000000     ................
    7184:	3f000000 ffffffff ffffffff ffffffff     ...?............
    7194:	0f3ef8ff 3ef8e083 f8e0830f e0830f3e     ..>....>....>...
    71a4:	830f3ef8 0f3ef8e0 c30fe083 0f3ffcf0     .>....>.......?.
    71b4:	3ffcf0c3 fcf0c30f f0c30f3f c30f3ffc     ...?....?....?..
    71c4:	ff3ffcf0 ffffffff ffffffff f0ffffff     ..?.............
	...
    71e8:	8f380000 c208234c e2d08330 00000000     ..8.L#..0.......
    71f8:	00000000 193c0000 7c982186 8c61061f     ......<..!.|..a.
    7208:	63c61861 000000f8 00000000 ff000000     a..c............
    7218:	8c31c61f 01061863 06186080 0000c003     ..1.c....`......
	...
    7234:	c69fff00 18638c31 008e33c6 00000000     ....1.c..3......
    7244:	fb0f0000 06b080fe 0618c000 c0800103     ................
    7254:	fefb2f20 00000000 00000000 00000000      /..............
    7264:	c3fef907 0c33cc30 e1c730c3 000000f8     ....0.3..0......
	...
    727c:	0c330c00 33cc30c3 cf30c30c 30c0f6db     ..3..0.3..0....0
    728c:	0000000c 00000000 e30c0000 618e7bbc     .............{.a
    729c:	06186080 00608001 00000000 00000000     .`....`.........
    72ac:	c33f0000 30c3f8c1 c30c33cc f0e0c730     ..?....0.3..0...
    72bc:	000000ff 03000000 1863f8e0 ff061bcc     ..........c.....
    72cc:	061becbf e0c31863 000000f8 00000000     ....c...........
    72dc:	e3fce103 061b6cb0 1b6cb0c1 c698e38e     .....l....l.....
    72ec:	00008e33 00000000 fef80300 e1070318     3...............
    72fc:	cc30c3f8 30c30c33 00f8e1c7 00000000     ..0.3..0........
    730c:	00000000 02000000 a2885421 88228a28     ........!T..(.".
    731c:	00204295 00000000 00000000 07000000     .B .............
    732c:	860e7367 628a28a3 7367b8b0 00000070     gs...(.b..gsp...
    733c:	00000000 60f8e003 00030c18 030c3ffc     .......`.....?..
    734c:	03186000 0000f8e0 00000000 00000000     .`..............
    735c:	1b8c0f3e 6cb0c106 b0c1061b c1061b6c     >......l....l...
    736c:	000060b0 00000000 0f000000 0000fefb     .`..............
    737c:	00fefb0f fefb0f00 00000000 00000000     ................
    738c:	02080000 ff208000 2080e0bf 03000208     ...... .... ....
    739c:	000000fe 00000000 3000030c 30c0000c     ...........0...0
    73ac:	c0c00003 0c0c3030 3f000003 0000f0cf     ....00.....?....
    73bc:	0c300000 0003030c 0330c0c0 030cc000     ..0.......0.....
    73cc:	000c3000 00f0cf3f 88600307 00020820     .0..?.....`. ...
    73dc:	02082080 08208000 20800002 80000208     . .... .... ....
    73ec:	00020820 02082080 08208000 20800002      .... .... .... 
    73fc:	80000208 09240820 00008001 18000000     .... .$.........
    740c:	00000006 00e0bfff 00061800 00000000     ................
	...
    7424:	8a0f1c00 0f1c073e 00073e8a 00000000     ....>....>......
	...
    743c:	01092460 00000080 00000000 00000000     `$..............
	...
    7460:	80030e38 00000000 00000000 00000000     8...............
	...
    7478:	01000000 00006080 00000000 0f000000     .....`..........
    7488:	40000104 0d020820 0c504001 00800002     ...@ ....@P.....
    7498:	00000000 f0c30b00 638c31c6 00000018     .........1.c....
	...
    74b4:	83070000 03070cf0 3fe0c081 00000000     ...........?....
	...
    74d8:	c30f3ffc 0f3ffcf0 0000f0c3 00000000     .?....?.........
	...
    7500:	0009001b 67753700 71312c6a 38000000     .....7ugj,1q...8
    7510:	006b6869 7a007732 6f303900 65332e6c     ihk.2w.z.90ol.3e
    7520:	00007861 2f3b702d 63737234 5b3d0020     ax..-p;/4rsc .=[
    7530:	74350027 006e7664 5c0d5d27 62667936     '.5tdvn.'].\6yfb
    7540:	0008006d 00000a7f 0009001b 47552600     m............&UG
    7550:	51213c4a 2a000000 004b4849 5a005740     J<!Q...*IHK.@W.Z
    7560:	4f292800 45233e4c 00005841 3f3a505f     .()OL>#EAX.._P:?
    7570:	43535224 7b2b0020 54250022 004e5644     $RSC .+{".%TDVN.
    7580:	7c0d7d7e 4246595e 0008004d 00000a7f     ~}.|^YFBM.......
    7590:	0009001b 47553700 51312c4a 38000000     .....7UGJ,1Q...8
    75a0:	004b4849 5a005732 4f303900 45332e4c     IHK.2W.Z.90OL.3E
    75b0:	00005841 2f3b502d 43535234 5b3d0020     AX..-P;/4RSC .=[
    75c0:	54350027 004e5644 5c0d5d27 42465936     '.5TDVN.'].\6YFB
    75d0:	0008004d 00000a7f 0009001b 07150000     M...............
    75e0:	1100000a 00000000 000b0809 1a001700     ................
    75f0:	0f000000 0500000a 00001801 1f001000     ................
    7600:	03131200 1b000000 14000000 000e1604     ................
    7610:	1c001d1e 02061900 0008000d 00000a00     ................

00007620 <kb_col>:
    7620:	00010000 00020000 00040000 00080000     ................
    7630:	00100000 00200000 08000000              ...... .....

0000763c <kb_col_index>:
    763c:	00000010 00000011 00000012 00000013     ................
    764c:	00000014 00000015 0000001b              ............

00007658 <kb_row>:
    7658:	00000004 00000008 00000010 00000020     ............ ...
    7668:	00000040 00000080 00000400 00000800     @...............
    7678:	00001000 00002000                       ..... ..

00007680 <kb_row_index>:
    7680:	00000002 00000003 00000004 00000005     ................
    7690:	00000006 00000007 0000000a 0000000b     ................
    76a0:	0000000c 0000000d                       ........

000076a8 <beelzebub.12957>:
    76a8:	2e002d00 44003200 88005300 f300b600     .-...2.D.S......
    76b8:	64012201 d4019201 08020702 5f023402     .".d.........4._
    76c8:	94027802 bb02a602 db02ca02 f902e802     .x..............
    76d8:	7f031f03                                ....

000076dc <belial.12954>:
    76dc:	f0f0f0f0 b0b0b0f0 b1b6b6b6 b7b7b1b1     ................
    76ec:	b2b2b2b7 bfb8b8b8 b9b3b3b3 b5b5b9b9     ................
    76fc:	babac2b5 bcbcbcba bebdbdbd f0f0f0be     ................
    770c:	b1b1f0f0 b8b7b7b6 bcb8b8b8 c9c9bcbc     ................
    771c:	35c9c9c9 0000363a                       ...5:6..

00007724 <lucifer.12956>:
    7724:	0852aa55 0d0d0d01 0d343434 34340d0d     U.R.....444...44
    7734:	00000034 01242424 340f0f0f 08083434     4...$$$....444..
    7744:	24240308 00780024 00007800 52aa5589     ..$$$.x..x...U.R
    7754:	00cc0008 01707005 02030303 02d00000     .....pp.........
    7764:	00505050 00000055                       PPP.U...

0000776c <mulciber.12955>:
    776c:	03020100 02010004 00020100 01000201     ................
    777c:	02010002 00020100 01000201 01000002     ................
    778c:	02010000 00020100 01000201 03020100     ................
    779c:	00000004 01000100 01000302 02010002     ................
    77ac:	00000403 00000000 65530d0a 6c616972     ..........Serial
    77bc:	204b4f20 30303639 314e3820 00000d0a      OK 9600 8N1....

000077cc <_global_impure_ptr>:
    77cc:	2000017c                                |.. 

000077d0 <__sf_fake_stderr>:
	...

000077f0 <__sf_fake_stdin>:
	...

00007810 <__sf_fake_stdout>:
	...
    7830:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    7840:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    7850:	31300046 35343332 39383736 64636261     F.0123456789abcd
    7860:	00006665                                ef..

00007864 <_init>:
    7864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7866:	46c0      	nop			; (mov r8, r8)
    7868:	bcf8      	pop	{r3, r4, r5, r6, r7}
    786a:	bc08      	pop	{r3}
    786c:	469e      	mov	lr, r3
    786e:	4770      	bx	lr

00007870 <__init_array_start>:
    7870:	000000dd 	.word	0x000000dd

00007874 <_fini>:
    7874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7876:	46c0      	nop			; (mov r8, r8)
    7878:	bcf8      	pop	{r3, r4, r5, r6, r7}
    787a:	bc08      	pop	{r3}
    787c:	469e      	mov	lr, r3
    787e:	4770      	bx	lr

00007880 <__fini_array_start>:
    7880:	000000b5 	.word	0x000000b5
