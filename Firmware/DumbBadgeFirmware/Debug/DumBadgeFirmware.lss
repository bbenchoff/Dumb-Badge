
DumBadgeFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005ff0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001bc  20000000  00005ff0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000270  200001bc  000061ac  000201bc  2**2
                  ALLOC
  3 .stack        00002004  2000042c  0000641c  000201bc  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000201bc  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
  6 .debug_info   0003339b  00000000  00000000  0002023d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004b4f  00000000  00000000  000535d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00005975  00000000  00000000  00058127  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000006a8  00000000  00000000  0005da9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000730  00000000  00000000  0005e144  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001e1cc  00000000  00000000  0005e874  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00011a0a  00000000  00000000  0007ca40  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008ff1d  00000000  00000000  0008e44a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000017a8  00000000  00000000  0011e368  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
	// Keep the default device state after reset
	SystemCoreClock = __SYSTEM_CLOCK;
       0:	30 24 00 20 01 17 00 00 fd 16 00 00 fd 16 00 00     0$. ............
	...
      2c:	fd 16 00 00 00 00 00 00 00 00 00 00 fd 16 00 00     ................
      3c:	39 2a 00 00 fd 16 00 00 fd 16 00 00 fd 16 00 00     9*..............
      4c:	fd 16 00 00 fd 16 00 00 fd 16 00 00 fd 16 00 00     ................
      5c:	fd 16 00 00 fd 16 00 00 a1 09 00 00 b1 09 00 00     ................
      6c:	c1 09 00 00 d1 09 00 00 e1 09 00 00 f1 09 00 00     ................
      7c:	fd 16 00 00 fd 16 00 00 fd 16 00 00 fd 16 00 00     ................
      8c:	fd 16 00 00 fd 16 00 00 fd 16 00 00 fd 16 00 00     ................
      9c:	d5 04 00 00 fd 16 00 00 fd 16 00 00 fd 16 00 00     ................
      ac:	fd 16 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200001bc 	.word	0x200001bc
      d4:	00000000 	.word	0x00000000
      d8:	00005ff0 	.word	0x00005ff0

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200001c0 	.word	0x200001c0
     108:	00005ff0 	.word	0x00005ff0
     10c:	00005ff0 	.word	0x00005ff0
     110:	00000000 	.word	0x00000000

00000114 <drawKare>:
//	graphic in the entire project. Please note this is the most
//	space efficient way to do this; a 40x31 bitmap is 930 bytes,
//	whereas	this is (104*2)+28+20, or 256 bytes.
/*********************************************************************/
void drawKare(int emotion)
{
     114:	b5f0      	push	{r4, r5, r6, r7, lr}
     116:	b0c1      	sub	sp, #260	; 0x104
     118:	0007      	movs	r7, r0
	uint16_t body[104] = {10,10,20,20,20,0,380,10,380,10,390,20,0,
     11a:	22d0      	movs	r2, #208	; 0xd0
     11c:	492d      	ldr	r1, [pc, #180]	; (1d4 <drawKare+0xc0>)
     11e:	a80c      	add	r0, sp, #48	; 0x30
     120:	4b2d      	ldr	r3, [pc, #180]	; (1d8 <drawKare+0xc4>)
     122:	4798      	blx	r3
		80,190,280,200,280,40,290,190,0,70,50,80,0,90,50,100,0,110,
		50,120,0,130,50,140,0,150,50,160,0,170,50,180,0,190,50,200,
		300,200,370,210,30,220,370,230,30,240,370,250,30,260,370,
		270,90,280,300,290};
	
	uint8_t happyTerm[28] = {180,80,190,130,170,130,190,140,140,
     124:	a805      	add	r0, sp, #20
     126:	4b2d      	ldr	r3, [pc, #180]	; (1dc <drawKare+0xc8>)
     128:	001a      	movs	r2, r3
     12a:	3250      	adds	r2, #80	; 0x50
     12c:	0001      	movs	r1, r0
     12e:	ca31      	ldmia	r2!, {r0, r4, r5}
     130:	c131      	stmia	r1!, {r0, r4, r5}
     132:	ca31      	ldmia	r2!, {r0, r4, r5}
     134:	c131      	stmia	r1!, {r0, r4, r5}
     136:	6812      	ldr	r2, [r2, #0]
     138:	600a      	str	r2, [r1, #0]
		60,150,100,210,60,220,100,130,150,140,160,140,160,220,170,
	220,150,230,160};
	
	uint8_t rPiBeret[20] = {120,60,240,80,110,70,120,90,150,
     13a:	336c      	adds	r3, #108	; 0x6c
     13c:	466a      	mov	r2, sp
     13e:	cb13      	ldmia	r3!, {r0, r1, r4}
     140:	c213      	stmia	r2!, {r0, r1, r4}
     142:	cb03      	ldmia	r3!, {r0, r1}
     144:	c203      	stmia	r2!, {r0, r1}
     146:	ac0c      	add	r4, sp, #48	; 0x30
     148:	ae40      	add	r6, sp, #256	; 0x100

	
	
	for(int i = 0; i < 104; i = i+4)
	{
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
     14a:	4d25      	ldr	r5, [pc, #148]	; (1e0 <drawKare+0xcc>)
		((body[i+1]/iSv)+(offsetGraphicY)),
		((body[i+2]/iSv)+(offsetGraphicX)),
		((body[i+3]/iSv)+(offsetGraphicY)));
     14c:	88e3      	ldrh	r3, [r4, #6]
     14e:	105b      	asrs	r3, r3, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
     150:	3396      	adds	r3, #150	; 0x96
		((body[i+2]/iSv)+(offsetGraphicX)),
     152:	88a2      	ldrh	r2, [r4, #4]
     154:	1052      	asrs	r2, r2, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
     156:	322d      	adds	r2, #45	; 0x2d
     158:	32ff      	adds	r2, #255	; 0xff
		((body[i+1]/iSv)+(offsetGraphicY)),
     15a:	8861      	ldrh	r1, [r4, #2]
     15c:	1049      	asrs	r1, r1, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
     15e:	3196      	adds	r1, #150	; 0x96
     160:	8820      	ldrh	r0, [r4, #0]
     162:	1040      	asrs	r0, r0, #1
     164:	302d      	adds	r0, #45	; 0x2d
     166:	30ff      	adds	r0, #255	; 0xff
     168:	47a8      	blx	r5
     16a:	3408      	adds	r4, #8
	for(int i = 0; i < 104; i = i+4)
     16c:	42b4      	cmp	r4, r6
     16e:	d1ed      	bne.n	14c <drawKare+0x38>
	}
	switch(emotion)
     170:	2f00      	cmp	r7, #0
     172:	d003      	beq.n	17c <drawKare+0x68>
     174:	2f01      	cmp	r7, #1
     176:	d017      	beq.n	1a8 <drawKare+0x94>
		break;
		case 2:
		//make a sad terminal thing go here
		break;
	}
}
     178:	b041      	add	sp, #260	; 0x104
     17a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     17c:	ac05      	add	r4, sp, #20
     17e:	ae0c      	add	r6, sp, #48	; 0x30
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
     180:	4d17      	ldr	r5, [pc, #92]	; (1e0 <drawKare+0xcc>)
			((happyTerm[i+3]/iSv)+(offsetGraphicY)));
     182:	78e3      	ldrb	r3, [r4, #3]
     184:	105b      	asrs	r3, r3, #1
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
     186:	3396      	adds	r3, #150	; 0x96
			((happyTerm[i+2]/iSv)+(offsetGraphicX)),
     188:	78a2      	ldrb	r2, [r4, #2]
     18a:	1052      	asrs	r2, r2, #1
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
     18c:	322d      	adds	r2, #45	; 0x2d
     18e:	32ff      	adds	r2, #255	; 0xff
			((happyTerm[i+1]/iSv)+(offsetGraphicY)),
     190:	7861      	ldrb	r1, [r4, #1]
     192:	1049      	asrs	r1, r1, #1
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
     194:	3196      	adds	r1, #150	; 0x96
     196:	7820      	ldrb	r0, [r4, #0]
     198:	1040      	asrs	r0, r0, #1
     19a:	302d      	adds	r0, #45	; 0x2d
     19c:	30ff      	adds	r0, #255	; 0xff
     19e:	47a8      	blx	r5
     1a0:	3404      	adds	r4, #4
		for(int i = 0; i < 28; i = i+4)
     1a2:	42a6      	cmp	r6, r4
     1a4:	d1ed      	bne.n	182 <drawKare+0x6e>
     1a6:	e7e7      	b.n	178 <drawKare+0x64>
     1a8:	466c      	mov	r4, sp
     1aa:	ae05      	add	r6, sp, #20
			fillRect((
     1ac:	4d0c      	ldr	r5, [pc, #48]	; (1e0 <drawKare+0xcc>)
			((rPiBeret[i+3]/iSv)+(offsetGraphicY)));
     1ae:	78e3      	ldrb	r3, [r4, #3]
     1b0:	105b      	asrs	r3, r3, #1
			fillRect((
     1b2:	3396      	adds	r3, #150	; 0x96
			((rPiBeret[i+2]/iSv)+(offsetGraphicX)),
     1b4:	78a2      	ldrb	r2, [r4, #2]
     1b6:	1052      	asrs	r2, r2, #1
			fillRect((
     1b8:	322d      	adds	r2, #45	; 0x2d
     1ba:	32ff      	adds	r2, #255	; 0xff
			((rPiBeret[i+1]/iSv)+(offsetGraphicY)),
     1bc:	7861      	ldrb	r1, [r4, #1]
     1be:	1049      	asrs	r1, r1, #1
			fillRect((
     1c0:	3196      	adds	r1, #150	; 0x96
			(rPiBeret[i]/iSv)+(offsetGraphicX)),
     1c2:	7820      	ldrb	r0, [r4, #0]
     1c4:	1040      	asrs	r0, r0, #1
			fillRect((
     1c6:	302d      	adds	r0, #45	; 0x2d
     1c8:	30ff      	adds	r0, #255	; 0xff
     1ca:	47a8      	blx	r5
     1cc:	3404      	adds	r4, #4
		for(int i = 0; i < 20; i = i+4)
     1ce:	42b4      	cmp	r4, r6
     1d0:	d1ed      	bne.n	1ae <drawKare+0x9a>
     1d2:	e7d1      	b.n	178 <drawKare+0x64>
     1d4:	00003eb4 	.word	0x00003eb4
     1d8:	00002dc9 	.word	0x00002dc9
     1dc:	00003f34 	.word	0x00003f34
     1e0:	000025dd 	.word	0x000025dd

000001e4 <splashScreen>:

void splashScreen(void)
{
     1e4:	b570      	push	{r4, r5, r6, lr}
	static const char *splashText[32];
	splashText[0] = "Unix epoch minus 0xFF days";//
     1e6:	4c48      	ldr	r4, [pc, #288]	; (308 <splashScreen+0x124>)
     1e8:	4b48      	ldr	r3, [pc, #288]	; (30c <splashScreen+0x128>)
     1ea:	6023      	str	r3, [r4, #0]
	splashText[1] = "13^5 + 16^5 = 17^5";//
     1ec:	4b48      	ldr	r3, [pc, #288]	; (310 <splashScreen+0x12c>)
     1ee:	6063      	str	r3, [r4, #4]
	splashText[2] = "Reticulating Splines";//
     1f0:	4b48      	ldr	r3, [pc, #288]	; (314 <splashScreen+0x130>)
     1f2:	60a3      	str	r3, [r4, #8]
	splashText[3] = "Violence works";//
     1f4:	4b48      	ldr	r3, [pc, #288]	; (318 <splashScreen+0x134>)
     1f6:	60e3      	str	r3, [r4, #12]
	splashText[4] = "Tabs!";//
     1f8:	4b48      	ldr	r3, [pc, #288]	; (31c <splashScreen+0x138>)
     1fa:	6123      	str	r3, [r4, #16]
	splashText[5] = "Kill Billionaires (and Trillionaire)";//
     1fc:	4b48      	ldr	r3, [pc, #288]	; (320 <splashScreen+0x13c>)
     1fe:	6163      	str	r3, [r4, #20]
	splashText[6] = "Interest in technology is not a personality";//
     200:	4b48      	ldr	r3, [pc, #288]	; (324 <splashScreen+0x140>)
     202:	61a3      	str	r3, [r4, #24]
	splashText[7] = "10 PRINT CHR$(205.5+RND(1)); : GOTO 10";//
     204:	4b48      	ldr	r3, [pc, #288]	; (328 <splashScreen+0x144>)
     206:	61e3      	str	r3, [r4, #28]
	splashText[8] = "No gods. No masters. No external libraries.";//
     208:	4b48      	ldr	r3, [pc, #288]	; (32c <splashScreen+0x148>)
     20a:	6223      	str	r3, [r4, #32]
	splashText[9] = "Spaces!";//
     20c:	4b48      	ldr	r3, [pc, #288]	; (330 <splashScreen+0x14c>)
     20e:	6263      	str	r3, [r4, #36]	; 0x24
	splashText[10] = "Tiananmen Square 1989";//
     210:	4b48      	ldr	r3, [pc, #288]	; (334 <splashScreen+0x150>)
     212:	62a3      	str	r3, [r4, #40]	; 0x28
	splashText[11] = "America was founded on slavery";
     214:	4b48      	ldr	r3, [pc, #288]	; (338 <splashScreen+0x154>)
     216:	62e3      	str	r3, [r4, #44]	; 0x2c
	splashText[12] = "There is only capital and labor";//
     218:	4b48      	ldr	r3, [pc, #288]	; (33c <splashScreen+0x158>)
     21a:	6323      	str	r3, [r4, #48]	; 0x30
	splashText[13] = "Encourage symmetric class warfare";//
     21c:	4b48      	ldr	r3, [pc, #288]	; (340 <splashScreen+0x15c>)
     21e:	6363      	str	r3, [r4, #52]	; 0x34
	splashText[14] = "$CURRENT_MEME";//
     220:	4b48      	ldr	r3, [pc, #288]	; (344 <splashScreen+0x160>)
     222:	63a3      	str	r3, [r4, #56]	; 0x38
	splashText[15] = "A Nice TTY";//
     224:	4b48      	ldr	r3, [pc, #288]	; (348 <splashScreen+0x164>)
     226:	63e3      	str	r3, [r4, #60]	; 0x3c
	splashText[16] = "Trans rights are human rights";//
     228:	4b48      	ldr	r3, [pc, #288]	; (34c <splashScreen+0x168>)
     22a:	6423      	str	r3, [r4, #64]	; 0x40
	splashText[17] = "i  = 0x5f3759df - ( i >> 1 );";//
     22c:	4b48      	ldr	r3, [pc, #288]	; (350 <splashScreen+0x16c>)
     22e:	6463      	str	r3, [r4, #68]	; 0x44
	splashText[18] = "ACAB";//
     230:	4b48      	ldr	r3, [pc, #288]	; (354 <splashScreen+0x170>)
     232:	64a3      	str	r3, [r4, #72]	; 0x48
	splashText[19] = "Defcon's canceled.";//
     234:	4b48      	ldr	r3, [pc, #288]	; (358 <splashScreen+0x174>)
     236:	64e3      	str	r3, [r4, #76]	; 0x4c
	splashText[20] = "Ratsnest: Nothing To Do!";//
     238:	4b48      	ldr	r3, [pc, #288]	; (35c <splashScreen+0x178>)
     23a:	6523      	str	r3, [r4, #80]	; 0x50
	splashText[21] = "It has 69 keys.";//
     23c:	4b48      	ldr	r3, [pc, #288]	; (360 <splashScreen+0x17c>)
     23e:	6563      	str	r3, [r4, #84]	; 0x54
	splashText[22] = "Because VT-420 was already taken";//
     240:	4b48      	ldr	r3, [pc, #288]	; (364 <splashScreen+0x180>)
     242:	65a3      	str	r3, [r4, #88]	; 0x58
	splashText[23] = "Compression algorithm based on BBP (1997)";//
     244:	4b48      	ldr	r3, [pc, #288]	; (368 <splashScreen+0x184>)
     246:	65e3      	str	r3, [r4, #92]	; 0x5c
	splashText[24] = "The source of the Mississippi river is in Pennsylvania.";
     248:	4b48      	ldr	r3, [pc, #288]	; (36c <splashScreen+0x188>)
     24a:	6623      	str	r3, [r4, #96]	; 0x60
	splashText[25] = "Offensive hardware";//
     24c:	4b48      	ldr	r3, [pc, #288]	; (370 <splashScreen+0x18c>)
     24e:	6663      	str	r3, [r4, #100]	; 0x64
	splashText[26] = "Follow World Pog Federation    @WorldPog";//
     250:	4b48      	ldr	r3, [pc, #288]	; (374 <splashScreen+0x190>)
     252:	66a3      	str	r3, [r4, #104]	; 0x68
	splashText[27] = "Dummy thicc client";//
     254:	4b48      	ldr	r3, [pc, #288]	; (378 <splashScreen+0x194>)
     256:	66e3      	str	r3, [r4, #108]	; 0x6c
	splashText[28] = "A Nice TTY. An OK Computer.";//
     258:	4b48      	ldr	r3, [pc, #288]	; (37c <splashScreen+0x198>)
     25a:	6723      	str	r3, [r4, #112]	; 0x70
	splashText[29] = "I cAn OpEn A LoCk WiTh A sOdA cAn";//
     25c:	4b48      	ldr	r3, [pc, #288]	; (380 <splashScreen+0x19c>)
     25e:	6763      	str	r3, [r4, #116]	; 0x74
	splashText[30] = "Solidarity is not a new framework";//
     260:	4b48      	ldr	r3, [pc, #288]	; (384 <splashScreen+0x1a0>)
     262:	67a3      	str	r3, [r4, #120]	; 0x78
	splashText[31] = "Breadboarding Is Not A Crime";//
     264:	4b48      	ldr	r3, [pc, #288]	; (388 <splashScreen+0x1a4>)
     266:	67e3      	str	r3, [r4, #124]	; 0x7c
	splashText[32] = "Off by one errors are common";
     268:	4a48      	ldr	r2, [pc, #288]	; (38c <splashScreen+0x1a8>)
     26a:	2380      	movs	r3, #128	; 0x80
     26c:	50e2      	str	r2, [r4, r3]
	
	const char *textPhrase = splashText[((rand()%32))];
     26e:	4b48      	ldr	r3, [pc, #288]	; (390 <splashScreen+0x1ac>)
     270:	4798      	blx	r3
     272:	17c3      	asrs	r3, r0, #31
     274:	0edb      	lsrs	r3, r3, #27
     276:	18c2      	adds	r2, r0, r3
     278:	201f      	movs	r0, #31
     27a:	4010      	ands	r0, r2
     27c:	1ac0      	subs	r0, r0, r3
     27e:	0080      	lsls	r0, r0, #2
     280:	5904      	ldr	r4, [r0, r4]
	
	
	clearScreen();
     282:	4b44      	ldr	r3, [pc, #272]	; (394 <splashScreen+0x1b0>)
     284:	4798      	blx	r3
	setColorRGB(255,255,255);
     286:	22ff      	movs	r2, #255	; 0xff
     288:	21ff      	movs	r1, #255	; 0xff
     28a:	20ff      	movs	r0, #255	; 0xff
     28c:	4b42      	ldr	r3, [pc, #264]	; (398 <splashScreen+0x1b4>)
     28e:	4798      	blx	r3
	
	REG_PORT_DIRTGL1 = PORT_PB31;
     290:	2280      	movs	r2, #128	; 0x80
     292:	0612      	lsls	r2, r2, #24
     294:	4b41      	ldr	r3, [pc, #260]	; (39c <splashScreen+0x1b8>)
     296:	601a      	str	r2, [r3, #0]
	PORT->Group[1].PINCFG[31].bit.PULLEN = 1;
     298:	4b41      	ldr	r3, [pc, #260]	; (3a0 <splashScreen+0x1bc>)
     29a:	22df      	movs	r2, #223	; 0xdf
     29c:	5c99      	ldrb	r1, [r3, r2]
     29e:	2004      	movs	r0, #4
     2a0:	4301      	orrs	r1, r0
     2a2:	5499      	strb	r1, [r3, r2]
	PORT->Group[1].PINCFG[31].bit.INEN = 1;
     2a4:	5c99      	ldrb	r1, [r3, r2]
     2a6:	2002      	movs	r0, #2
     2a8:	4301      	orrs	r1, r0
     2aa:	5499      	strb	r1, [r3, r2]
	if((PORT->Group[1].IN.reg & PORT_PB31) != 0)
     2ac:	3a3f      	subs	r2, #63	; 0x3f
     2ae:	589b      	ldr	r3, [r3, r2]
     2b0:	2b00      	cmp	r3, #0
     2b2:	db24      	blt.n	2fe <splashScreen+0x11a>
		//This is the 'pi' graphic; put some codes
		//here to handle setting up the uarts.
		drawKare(1);
	}
	else
	drawKare(0); //The normal graphic
     2b4:	2000      	movs	r0, #0
     2b6:	4b3b      	ldr	r3, [pc, #236]	; (3a4 <splashScreen+0x1c0>)
     2b8:	4798      	blx	r3
	This is not used since I fixed the way fonts are rendered;
	Now, pixel(0,0) is in the top *right* corner of the screen.
	Trust me, this is easier.
	*/
	
	xCharPos = 40 - (strlen(textPhrase)/2);
     2ba:	0020      	movs	r0, r4
     2bc:	4b3a      	ldr	r3, [pc, #232]	; (3a8 <splashScreen+0x1c4>)
     2be:	4798      	blx	r3
     2c0:	4e3a      	ldr	r6, [pc, #232]	; (3ac <splashScreen+0x1c8>)
     2c2:	0840      	lsrs	r0, r0, #1
     2c4:	2328      	movs	r3, #40	; 0x28
     2c6:	1a18      	subs	r0, r3, r0
     2c8:	7030      	strb	r0, [r6, #0]
	yCharPos = 16;
     2ca:	4d39      	ldr	r5, [pc, #228]	; (3b0 <splashScreen+0x1cc>)
     2cc:	2310      	movs	r3, #16
     2ce:	702b      	strb	r3, [r5, #0]
	
	writeString(textPhrase);
     2d0:	0020      	movs	r0, r4
     2d2:	4b38      	ldr	r3, [pc, #224]	; (3b4 <splashScreen+0x1d0>)
     2d4:	4798      	blx	r3
	delay_ms(2000);
     2d6:	20fa      	movs	r0, #250	; 0xfa
     2d8:	00c0      	lsls	r0, r0, #3
     2da:	4b37      	ldr	r3, [pc, #220]	; (3b8 <splashScreen+0x1d4>)
     2dc:	4798      	blx	r3
	clearScreen();
     2de:	4b2d      	ldr	r3, [pc, #180]	; (394 <splashScreen+0x1b0>)
     2e0:	4798      	blx	r3
	
	setColorRGB(0,255,0);
     2e2:	2200      	movs	r2, #0
     2e4:	21ff      	movs	r1, #255	; 0xff
     2e6:	2000      	movs	r0, #0
     2e8:	4b2b      	ldr	r3, [pc, #172]	; (398 <splashScreen+0x1b4>)
     2ea:	4798      	blx	r3
	setBackColorRGB(0,0,0);
     2ec:	2200      	movs	r2, #0
     2ee:	2100      	movs	r1, #0
     2f0:	2000      	movs	r0, #0
     2f2:	4b32      	ldr	r3, [pc, #200]	; (3bc <splashScreen+0x1d8>)
     2f4:	4798      	blx	r3
	
	//Setting the xChar and yChar position has to come
	//after splashScreen() and InitLCD();
	xCharPos = 0;
     2f6:	2300      	movs	r3, #0
     2f8:	7033      	strb	r3, [r6, #0]
	yCharPos = 0;
     2fa:	702b      	strb	r3, [r5, #0]
	

     2fc:	bd70      	pop	{r4, r5, r6, pc}
		drawKare(1);
     2fe:	2001      	movs	r0, #1
     300:	4b28      	ldr	r3, [pc, #160]	; (3a4 <splashScreen+0x1c0>)
     302:	4798      	blx	r3
     304:	e7d9      	b.n	2ba <splashScreen+0xd6>
     306:	46c0      	nop			; (mov r8, r8)
     308:	200001d8 	.word	0x200001d8
     30c:	00003fb4 	.word	0x00003fb4
     310:	00003fd0 	.word	0x00003fd0
     314:	00003fe4 	.word	0x00003fe4
     318:	00003ffc 	.word	0x00003ffc
     31c:	0000400c 	.word	0x0000400c
     320:	00004014 	.word	0x00004014
     324:	0000403c 	.word	0x0000403c
     328:	00004068 	.word	0x00004068
     32c:	00004090 	.word	0x00004090
     330:	000040bc 	.word	0x000040bc
     334:	000040c4 	.word	0x000040c4
     338:	000040dc 	.word	0x000040dc
     33c:	000040fc 	.word	0x000040fc
     340:	0000411c 	.word	0x0000411c
     344:	00004140 	.word	0x00004140
     348:	00004150 	.word	0x00004150
     34c:	0000415c 	.word	0x0000415c
     350:	0000417c 	.word	0x0000417c
     354:	0000419c 	.word	0x0000419c
     358:	000041a4 	.word	0x000041a4
     35c:	000041b8 	.word	0x000041b8
     360:	000041d4 	.word	0x000041d4
     364:	000041e4 	.word	0x000041e4
     368:	00004208 	.word	0x00004208
     36c:	00004234 	.word	0x00004234
     370:	0000426c 	.word	0x0000426c
     374:	00004280 	.word	0x00004280
     378:	000042ac 	.word	0x000042ac
     37c:	000042c0 	.word	0x000042c0
     380:	000042dc 	.word	0x000042dc
     384:	00004300 	.word	0x00004300
     388:	00004324 	.word	0x00004324
     38c:	00004344 	.word	0x00004344
     390:	00002e7d 	.word	0x00002e7d
     394:	00002745 	.word	0x00002745
     398:	00002491 	.word	0x00002491
     39c:	4100448c 	.word	0x4100448c
     3a0:	41004400 	.word	0x41004400
     3a4:	00000115 	.word	0x00000115
     3a8:	00003061 	.word	0x00003061
     3ac:	20000298 	.word	0x20000298
     3b0:	20000299 	.word	0x20000299
     3b4:	00001c49 	.word	0x00001c49
     3b8:	00000401 	.word	0x00000401
     3bc:	000024b9 	.word	0x000024b9

000003c0 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     3c0:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     3c2:	2000      	movs	r0, #0
     3c4:	4b08      	ldr	r3, [pc, #32]	; (3e8 <delay_init+0x28>)
     3c6:	4798      	blx	r3
     3c8:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     3ca:	4c08      	ldr	r4, [pc, #32]	; (3ec <delay_init+0x2c>)
     3cc:	21fa      	movs	r1, #250	; 0xfa
     3ce:	0089      	lsls	r1, r1, #2
     3d0:	47a0      	blx	r4
     3d2:	4b07      	ldr	r3, [pc, #28]	; (3f0 <delay_init+0x30>)
     3d4:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     3d6:	4907      	ldr	r1, [pc, #28]	; (3f4 <delay_init+0x34>)
     3d8:	0028      	movs	r0, r5
     3da:	47a0      	blx	r4
     3dc:	4b06      	ldr	r3, [pc, #24]	; (3f8 <delay_init+0x38>)
     3de:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     3e0:	2205      	movs	r2, #5
     3e2:	4b06      	ldr	r3, [pc, #24]	; (3fc <delay_init+0x3c>)
     3e4:	601a      	str	r2, [r3, #0]
}
     3e6:	bd70      	pop	{r4, r5, r6, pc}
     3e8:	0000148d 	.word	0x0000148d
     3ec:	00002c15 	.word	0x00002c15
     3f0:	20000000 	.word	0x20000000
     3f4:	000f4240 	.word	0x000f4240
     3f8:	20000004 	.word	0x20000004
     3fc:	e000e010 	.word	0xe000e010

00000400 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     400:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     402:	4b08      	ldr	r3, [pc, #32]	; (424 <delay_cycles_ms+0x24>)
     404:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     406:	4a08      	ldr	r2, [pc, #32]	; (428 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     408:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     40a:	2180      	movs	r1, #128	; 0x80
     40c:	0249      	lsls	r1, r1, #9
	while (n--) {
     40e:	3801      	subs	r0, #1
     410:	d307      	bcc.n	422 <delay_cycles_ms+0x22>
	if (n > 0) {
     412:	2c00      	cmp	r4, #0
     414:	d0fb      	beq.n	40e <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     416:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     418:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     41a:	6813      	ldr	r3, [r2, #0]
     41c:	420b      	tst	r3, r1
     41e:	d0fc      	beq.n	41a <delay_cycles_ms+0x1a>
     420:	e7f5      	b.n	40e <delay_cycles_ms+0xe>
	}
}
     422:	bd30      	pop	{r4, r5, pc}
     424:	20000000 	.word	0x20000000
     428:	e000e010 	.word	0xe000e010

0000042c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     42c:	4b0c      	ldr	r3, [pc, #48]	; (460 <cpu_irq_enter_critical+0x34>)
     42e:	681b      	ldr	r3, [r3, #0]
     430:	2b00      	cmp	r3, #0
     432:	d106      	bne.n	442 <cpu_irq_enter_critical+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     434:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     438:	2b00      	cmp	r3, #0
     43a:	d007      	beq.n	44c <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     43c:	2200      	movs	r2, #0
     43e:	4b09      	ldr	r3, [pc, #36]	; (464 <cpu_irq_enter_critical+0x38>)
     440:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     442:	4a07      	ldr	r2, [pc, #28]	; (460 <cpu_irq_enter_critical+0x34>)
     444:	6813      	ldr	r3, [r2, #0]
     446:	3301      	adds	r3, #1
     448:	6013      	str	r3, [r2, #0]
}
     44a:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     44c:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     44e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     452:	2200      	movs	r2, #0
     454:	4b04      	ldr	r3, [pc, #16]	; (468 <cpu_irq_enter_critical+0x3c>)
     456:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     458:	3201      	adds	r2, #1
     45a:	4b02      	ldr	r3, [pc, #8]	; (464 <cpu_irq_enter_critical+0x38>)
     45c:	701a      	strb	r2, [r3, #0]
     45e:	e7f0      	b.n	442 <cpu_irq_enter_critical+0x16>
     460:	20000258 	.word	0x20000258
     464:	2000025c 	.word	0x2000025c
     468:	20000008 	.word	0x20000008

0000046c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     46c:	4b08      	ldr	r3, [pc, #32]	; (490 <cpu_irq_leave_critical+0x24>)
     46e:	681a      	ldr	r2, [r3, #0]
     470:	3a01      	subs	r2, #1
     472:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     474:	681b      	ldr	r3, [r3, #0]
     476:	2b00      	cmp	r3, #0
     478:	d109      	bne.n	48e <cpu_irq_leave_critical+0x22>
     47a:	4b06      	ldr	r3, [pc, #24]	; (494 <cpu_irq_leave_critical+0x28>)
     47c:	781b      	ldrb	r3, [r3, #0]
     47e:	2b00      	cmp	r3, #0
     480:	d005      	beq.n	48e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     482:	2201      	movs	r2, #1
     484:	4b04      	ldr	r3, [pc, #16]	; (498 <cpu_irq_leave_critical+0x2c>)
     486:	701a      	strb	r2, [r3, #0]
     488:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     48c:	b662      	cpsie	i
	}
}
     48e:	4770      	bx	lr
     490:	20000258 	.word	0x20000258
     494:	2000025c 	.word	0x2000025c
     498:	20000008 	.word	0x20000008

0000049c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     49c:	b5f0      	push	{r4, r5, r6, r7, lr}
     49e:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     4a0:	ac01      	add	r4, sp, #4
     4a2:	2501      	movs	r5, #1
     4a4:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     4a6:	2700      	movs	r7, #0
     4a8:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     4aa:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     4ac:	0021      	movs	r1, r4
     4ae:	203e      	movs	r0, #62	; 0x3e
     4b0:	4e06      	ldr	r6, [pc, #24]	; (4cc <system_board_init+0x30>)
     4b2:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     4b4:	2280      	movs	r2, #128	; 0x80
     4b6:	05d2      	lsls	r2, r2, #23
     4b8:	4b05      	ldr	r3, [pc, #20]	; (4d0 <system_board_init+0x34>)
     4ba:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     4bc:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     4be:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     4c0:	0021      	movs	r1, r4
     4c2:	200f      	movs	r0, #15
     4c4:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
     4c6:	b003      	add	sp, #12
     4c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     4ca:	46c0      	nop			; (mov r8, r8)
     4cc:	00000599 	.word	0x00000599
     4d0:	41004480 	.word	0x41004480

000004d4 <ADC_Handler>:
	}
}

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
     4d4:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
     4d6:	4b2f      	ldr	r3, [pc, #188]	; (594 <ADC_Handler+0xc0>)
     4d8:	681d      	ldr	r5, [r3, #0]
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
     4da:	682b      	ldr	r3, [r5, #0]
     4dc:	7e1a      	ldrb	r2, [r3, #24]
     4de:	7ddc      	ldrb	r4, [r3, #23]
     4e0:	4014      	ands	r4, r2
	if (flags & ADC_INTFLAG_RESRDY) {
     4e2:	07e2      	lsls	r2, r4, #31
     4e4:	d416      	bmi.n	514 <ADC_Handler+0x40>
	if (flags & ADC_INTFLAG_WINMON) {
     4e6:	0763      	lsls	r3, r4, #29
     4e8:	d508      	bpl.n	4fc <ADC_Handler+0x28>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     4ea:	2304      	movs	r3, #4
     4ec:	682a      	ldr	r2, [r5, #0]
     4ee:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     4f0:	7eeb      	ldrb	r3, [r5, #27]
     4f2:	079b      	lsls	r3, r3, #30
     4f4:	d502      	bpl.n	4fc <ADC_Handler+0x28>
     4f6:	7eab      	ldrb	r3, [r5, #26]
     4f8:	079b      	lsls	r3, r3, #30
     4fa:	d442      	bmi.n	582 <ADC_Handler+0xae>
	if (flags & ADC_INTFLAG_OVERRUN) {
     4fc:	07a3      	lsls	r3, r4, #30
     4fe:	d508      	bpl.n	512 <ADC_Handler+0x3e>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     500:	2302      	movs	r3, #2
     502:	682a      	ldr	r2, [r5, #0]
     504:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     506:	7eeb      	ldrb	r3, [r5, #27]
     508:	075b      	lsls	r3, r3, #29
     50a:	d502      	bpl.n	512 <ADC_Handler+0x3e>
     50c:	7eab      	ldrb	r3, [r5, #26]
     50e:	075b      	lsls	r3, r3, #29
     510:	d43b      	bmi.n	58a <ADC_Handler+0xb6>
	_adc_interrupt_handler(0);
}
     512:	bd70      	pop	{r4, r5, r6, pc}
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     514:	2201      	movs	r2, #1
     516:	761a      	strb	r2, [r3, #24]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     518:	682a      	ldr	r2, [r5, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     51a:	7e53      	ldrb	r3, [r2, #25]
		while (adc_is_syncing(module)) {
     51c:	b25b      	sxtb	r3, r3
     51e:	2b00      	cmp	r3, #0
     520:	dbfb      	blt.n	51a <ADC_Handler+0x46>
		*(module->job_buffer++) = module->hw->RESULT.reg;
     522:	6969      	ldr	r1, [r5, #20]
     524:	1c8b      	adds	r3, r1, #2
     526:	616b      	str	r3, [r5, #20]
     528:	8b53      	ldrh	r3, [r2, #26]
     52a:	b29b      	uxth	r3, r3
     52c:	800b      	strh	r3, [r1, #0]
		if (--module->remaining_conversions > 0) {
     52e:	8b2b      	ldrh	r3, [r5, #24]
     530:	3b01      	subs	r3, #1
     532:	b29b      	uxth	r3, r3
     534:	832b      	strh	r3, [r5, #24]
     536:	2b00      	cmp	r3, #0
     538:	d011      	beq.n	55e <ADC_Handler+0x8a>
			if (module->software_trigger == true) {
     53a:	7f6b      	ldrb	r3, [r5, #29]
     53c:	2b00      	cmp	r3, #0
     53e:	d0d2      	beq.n	4e6 <ADC_Handler+0x12>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     540:	682a      	ldr	r2, [r5, #0]
     542:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     544:	b25b      	sxtb	r3, r3
     546:	2b00      	cmp	r3, #0
     548:	dbfb      	blt.n	542 <ADC_Handler+0x6e>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     54a:	7b13      	ldrb	r3, [r2, #12]
     54c:	2102      	movs	r1, #2
     54e:	430b      	orrs	r3, r1
     550:	7313      	strb	r3, [r2, #12]
	Adc *const adc_module = module_inst->hw;
     552:	682a      	ldr	r2, [r5, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     554:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     556:	b25b      	sxtb	r3, r3
     558:	2b00      	cmp	r3, #0
     55a:	dbfb      	blt.n	554 <ADC_Handler+0x80>
     55c:	e7c3      	b.n	4e6 <ADC_Handler+0x12>
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     55e:	2301      	movs	r3, #1
     560:	682a      	ldr	r2, [r5, #0]
     562:	7593      	strb	r3, [r2, #22]
			if (module->job_status == STATUS_BUSY) {
     564:	7f2b      	ldrb	r3, [r5, #28]
     566:	2b05      	cmp	r3, #5
     568:	d1bd      	bne.n	4e6 <ADC_Handler+0x12>
				module->job_status = STATUS_OK;
     56a:	2300      	movs	r3, #0
     56c:	772b      	strb	r3, [r5, #28]
				if ((module->enabled_callback_mask &
     56e:	7eeb      	ldrb	r3, [r5, #27]
     570:	07db      	lsls	r3, r3, #31
     572:	d5b8      	bpl.n	4e6 <ADC_Handler+0x12>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
     574:	7eab      	ldrb	r3, [r5, #26]
     576:	07db      	lsls	r3, r3, #31
     578:	d5b5      	bpl.n	4e6 <ADC_Handler+0x12>
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     57a:	0028      	movs	r0, r5
     57c:	68ab      	ldr	r3, [r5, #8]
     57e:	4798      	blx	r3
     580:	e7b1      	b.n	4e6 <ADC_Handler+0x12>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     582:	0028      	movs	r0, r5
     584:	68eb      	ldr	r3, [r5, #12]
     586:	4798      	blx	r3
     588:	e7b8      	b.n	4fc <ADC_Handler+0x28>
			(module->callback[ADC_CALLBACK_ERROR])(module);
     58a:	692b      	ldr	r3, [r5, #16]
     58c:	0028      	movs	r0, r5
     58e:	4798      	blx	r3
}
     590:	e7bf      	b.n	512 <ADC_Handler+0x3e>
     592:	46c0      	nop			; (mov r8, r8)
     594:	200002a4 	.word	0x200002a4

00000598 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     598:	b500      	push	{lr}
     59a:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     59c:	ab01      	add	r3, sp, #4
     59e:	2280      	movs	r2, #128	; 0x80
     5a0:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     5a2:	780a      	ldrb	r2, [r1, #0]
     5a4:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     5a6:	784a      	ldrb	r2, [r1, #1]
     5a8:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     5aa:	788a      	ldrb	r2, [r1, #2]
     5ac:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     5ae:	0019      	movs	r1, r3
     5b0:	4b01      	ldr	r3, [pc, #4]	; (5b8 <port_pin_set_config+0x20>)
     5b2:	4798      	blx	r3
}
     5b4:	b003      	add	sp, #12
     5b6:	bd00      	pop	{pc}
     5b8:	0000169d 	.word	0x0000169d

000005bc <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     5bc:	b5f0      	push	{r4, r5, r6, r7, lr}
     5be:	46de      	mov	lr, fp
     5c0:	4657      	mov	r7, sl
     5c2:	464e      	mov	r6, r9
     5c4:	4645      	mov	r5, r8
     5c6:	b5e0      	push	{r5, r6, r7, lr}
     5c8:	b087      	sub	sp, #28
     5ca:	4680      	mov	r8, r0
     5cc:	9104      	str	r1, [sp, #16]
     5ce:	0016      	movs	r6, r2
     5d0:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     5d2:	2200      	movs	r2, #0
     5d4:	2300      	movs	r3, #0
     5d6:	2100      	movs	r1, #0
     5d8:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     5da:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     5dc:	2001      	movs	r0, #1
     5de:	0021      	movs	r1, r4
     5e0:	9600      	str	r6, [sp, #0]
     5e2:	9701      	str	r7, [sp, #4]
     5e4:	465c      	mov	r4, fp
     5e6:	9403      	str	r4, [sp, #12]
     5e8:	4644      	mov	r4, r8
     5ea:	9405      	str	r4, [sp, #20]
     5ec:	e013      	b.n	616 <long_division+0x5a>
     5ee:	2420      	movs	r4, #32
     5f0:	1a64      	subs	r4, r4, r1
     5f2:	0005      	movs	r5, r0
     5f4:	40e5      	lsrs	r5, r4
     5f6:	46a8      	mov	r8, r5
     5f8:	e014      	b.n	624 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     5fa:	9c00      	ldr	r4, [sp, #0]
     5fc:	9d01      	ldr	r5, [sp, #4]
     5fe:	1b12      	subs	r2, r2, r4
     600:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     602:	465c      	mov	r4, fp
     604:	464d      	mov	r5, r9
     606:	432c      	orrs	r4, r5
     608:	46a3      	mov	fp, r4
     60a:	9c03      	ldr	r4, [sp, #12]
     60c:	4645      	mov	r5, r8
     60e:	432c      	orrs	r4, r5
     610:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     612:	3901      	subs	r1, #1
     614:	d325      	bcc.n	662 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     616:	2420      	movs	r4, #32
     618:	4264      	negs	r4, r4
     61a:	190c      	adds	r4, r1, r4
     61c:	d4e7      	bmi.n	5ee <long_division+0x32>
     61e:	0005      	movs	r5, r0
     620:	40a5      	lsls	r5, r4
     622:	46a8      	mov	r8, r5
     624:	0004      	movs	r4, r0
     626:	408c      	lsls	r4, r1
     628:	46a1      	mov	r9, r4
		r = r << 1;
     62a:	1892      	adds	r2, r2, r2
     62c:	415b      	adcs	r3, r3
     62e:	0014      	movs	r4, r2
     630:	001d      	movs	r5, r3
		if (n & bit_shift) {
     632:	9e05      	ldr	r6, [sp, #20]
     634:	464f      	mov	r7, r9
     636:	403e      	ands	r6, r7
     638:	46b4      	mov	ip, r6
     63a:	9e04      	ldr	r6, [sp, #16]
     63c:	4647      	mov	r7, r8
     63e:	403e      	ands	r6, r7
     640:	46b2      	mov	sl, r6
     642:	4666      	mov	r6, ip
     644:	4657      	mov	r7, sl
     646:	433e      	orrs	r6, r7
     648:	d003      	beq.n	652 <long_division+0x96>
			r |= 0x01;
     64a:	0006      	movs	r6, r0
     64c:	4326      	orrs	r6, r4
     64e:	0032      	movs	r2, r6
     650:	002b      	movs	r3, r5
		if (r >= d) {
     652:	9c00      	ldr	r4, [sp, #0]
     654:	9d01      	ldr	r5, [sp, #4]
     656:	429d      	cmp	r5, r3
     658:	d8db      	bhi.n	612 <long_division+0x56>
     65a:	d1ce      	bne.n	5fa <long_division+0x3e>
     65c:	4294      	cmp	r4, r2
     65e:	d8d8      	bhi.n	612 <long_division+0x56>
     660:	e7cb      	b.n	5fa <long_division+0x3e>
     662:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     664:	4658      	mov	r0, fp
     666:	0019      	movs	r1, r3
     668:	b007      	add	sp, #28
     66a:	bc3c      	pop	{r2, r3, r4, r5}
     66c:	4690      	mov	r8, r2
     66e:	4699      	mov	r9, r3
     670:	46a2      	mov	sl, r4
     672:	46ab      	mov	fp, r5
     674:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000676 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     676:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     678:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     67a:	2340      	movs	r3, #64	; 0x40
     67c:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     67e:	4281      	cmp	r1, r0
     680:	d202      	bcs.n	688 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     682:	0018      	movs	r0, r3
     684:	bd10      	pop	{r4, pc}
		baud_calculated++;
     686:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     688:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     68a:	1c63      	adds	r3, r4, #1
     68c:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     68e:	4288      	cmp	r0, r1
     690:	d9f9      	bls.n	686 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     692:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     694:	2cff      	cmp	r4, #255	; 0xff
     696:	d8f4      	bhi.n	682 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     698:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     69a:	2300      	movs	r3, #0
     69c:	e7f1      	b.n	682 <_sercom_get_sync_baud_val+0xc>
	...

000006a0 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     6a0:	b5f0      	push	{r4, r5, r6, r7, lr}
     6a2:	b083      	sub	sp, #12
     6a4:	000f      	movs	r7, r1
     6a6:	0016      	movs	r6, r2
     6a8:	aa08      	add	r2, sp, #32
     6aa:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     6ac:	0004      	movs	r4, r0
     6ae:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     6b0:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     6b2:	42bc      	cmp	r4, r7
     6b4:	d902      	bls.n	6bc <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     6b6:	0010      	movs	r0, r2
     6b8:	b003      	add	sp, #12
     6ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     6bc:	2b00      	cmp	r3, #0
     6be:	d114      	bne.n	6ea <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     6c0:	0002      	movs	r2, r0
     6c2:	0008      	movs	r0, r1
     6c4:	2100      	movs	r1, #0
     6c6:	4c19      	ldr	r4, [pc, #100]	; (72c <_sercom_get_async_baud_val+0x8c>)
     6c8:	47a0      	blx	r4
     6ca:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     6cc:	003a      	movs	r2, r7
     6ce:	2300      	movs	r3, #0
     6d0:	2000      	movs	r0, #0
     6d2:	4c17      	ldr	r4, [pc, #92]	; (730 <_sercom_get_async_baud_val+0x90>)
     6d4:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     6d6:	2200      	movs	r2, #0
     6d8:	2301      	movs	r3, #1
     6da:	1a12      	subs	r2, r2, r0
     6dc:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     6de:	0c12      	lsrs	r2, r2, #16
     6e0:	041b      	lsls	r3, r3, #16
     6e2:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     6e4:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     6e6:	2200      	movs	r2, #0
     6e8:	e7e5      	b.n	6b6 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     6ea:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     6ec:	2b01      	cmp	r3, #1
     6ee:	d1f9      	bne.n	6e4 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     6f0:	000a      	movs	r2, r1
     6f2:	2300      	movs	r3, #0
     6f4:	2100      	movs	r1, #0
     6f6:	4c0d      	ldr	r4, [pc, #52]	; (72c <_sercom_get_async_baud_val+0x8c>)
     6f8:	47a0      	blx	r4
     6fa:	0002      	movs	r2, r0
     6fc:	000b      	movs	r3, r1
     6fe:	9200      	str	r2, [sp, #0]
     700:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     702:	0038      	movs	r0, r7
     704:	2100      	movs	r1, #0
     706:	4c0a      	ldr	r4, [pc, #40]	; (730 <_sercom_get_async_baud_val+0x90>)
     708:	47a0      	blx	r4
     70a:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     70c:	2380      	movs	r3, #128	; 0x80
     70e:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     710:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     712:	4298      	cmp	r0, r3
     714:	d8cf      	bhi.n	6b6 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     716:	0f79      	lsrs	r1, r7, #29
     718:	00f8      	lsls	r0, r7, #3
     71a:	9a00      	ldr	r2, [sp, #0]
     71c:	9b01      	ldr	r3, [sp, #4]
     71e:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     720:	00ea      	lsls	r2, r5, #3
     722:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     724:	b2d2      	uxtb	r2, r2
     726:	0352      	lsls	r2, r2, #13
     728:	432a      	orrs	r2, r5
     72a:	e7db      	b.n	6e4 <_sercom_get_async_baud_val+0x44>
     72c:	00002d2d 	.word	0x00002d2d
     730:	000005bd 	.word	0x000005bd

00000734 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     734:	b510      	push	{r4, lr}
     736:	b082      	sub	sp, #8
     738:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     73a:	4b0e      	ldr	r3, [pc, #56]	; (774 <sercom_set_gclk_generator+0x40>)
     73c:	781b      	ldrb	r3, [r3, #0]
     73e:	2b00      	cmp	r3, #0
     740:	d007      	beq.n	752 <sercom_set_gclk_generator+0x1e>
     742:	2900      	cmp	r1, #0
     744:	d105      	bne.n	752 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     746:	4b0b      	ldr	r3, [pc, #44]	; (774 <sercom_set_gclk_generator+0x40>)
     748:	785b      	ldrb	r3, [r3, #1]
     74a:	4283      	cmp	r3, r0
     74c:	d010      	beq.n	770 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     74e:	201d      	movs	r0, #29
     750:	e00c      	b.n	76c <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     752:	a901      	add	r1, sp, #4
     754:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     756:	2013      	movs	r0, #19
     758:	4b07      	ldr	r3, [pc, #28]	; (778 <sercom_set_gclk_generator+0x44>)
     75a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     75c:	2013      	movs	r0, #19
     75e:	4b07      	ldr	r3, [pc, #28]	; (77c <sercom_set_gclk_generator+0x48>)
     760:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     762:	4b04      	ldr	r3, [pc, #16]	; (774 <sercom_set_gclk_generator+0x40>)
     764:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     766:	2201      	movs	r2, #1
     768:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     76a:	2000      	movs	r0, #0
}
     76c:	b002      	add	sp, #8
     76e:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     770:	2000      	movs	r0, #0
     772:	e7fb      	b.n	76c <sercom_set_gclk_generator+0x38>
     774:	20000260 	.word	0x20000260
     778:	000015a5 	.word	0x000015a5
     77c:	00001519 	.word	0x00001519

00000780 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     780:	4b40      	ldr	r3, [pc, #256]	; (884 <_sercom_get_default_pad+0x104>)
     782:	4298      	cmp	r0, r3
     784:	d031      	beq.n	7ea <_sercom_get_default_pad+0x6a>
     786:	d90a      	bls.n	79e <_sercom_get_default_pad+0x1e>
     788:	4b3f      	ldr	r3, [pc, #252]	; (888 <_sercom_get_default_pad+0x108>)
     78a:	4298      	cmp	r0, r3
     78c:	d04d      	beq.n	82a <_sercom_get_default_pad+0xaa>
     78e:	4b3f      	ldr	r3, [pc, #252]	; (88c <_sercom_get_default_pad+0x10c>)
     790:	4298      	cmp	r0, r3
     792:	d05a      	beq.n	84a <_sercom_get_default_pad+0xca>
     794:	4b3e      	ldr	r3, [pc, #248]	; (890 <_sercom_get_default_pad+0x110>)
     796:	4298      	cmp	r0, r3
     798:	d037      	beq.n	80a <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     79a:	2000      	movs	r0, #0
}
     79c:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     79e:	4b3d      	ldr	r3, [pc, #244]	; (894 <_sercom_get_default_pad+0x114>)
     7a0:	4298      	cmp	r0, r3
     7a2:	d00c      	beq.n	7be <_sercom_get_default_pad+0x3e>
     7a4:	4b3c      	ldr	r3, [pc, #240]	; (898 <_sercom_get_default_pad+0x118>)
     7a6:	4298      	cmp	r0, r3
     7a8:	d1f7      	bne.n	79a <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     7aa:	2901      	cmp	r1, #1
     7ac:	d017      	beq.n	7de <_sercom_get_default_pad+0x5e>
     7ae:	2900      	cmp	r1, #0
     7b0:	d05d      	beq.n	86e <_sercom_get_default_pad+0xee>
     7b2:	2902      	cmp	r1, #2
     7b4:	d015      	beq.n	7e2 <_sercom_get_default_pad+0x62>
     7b6:	2903      	cmp	r1, #3
     7b8:	d015      	beq.n	7e6 <_sercom_get_default_pad+0x66>
	return 0;
     7ba:	2000      	movs	r0, #0
     7bc:	e7ee      	b.n	79c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     7be:	2901      	cmp	r1, #1
     7c0:	d007      	beq.n	7d2 <_sercom_get_default_pad+0x52>
     7c2:	2900      	cmp	r1, #0
     7c4:	d051      	beq.n	86a <_sercom_get_default_pad+0xea>
     7c6:	2902      	cmp	r1, #2
     7c8:	d005      	beq.n	7d6 <_sercom_get_default_pad+0x56>
     7ca:	2903      	cmp	r1, #3
     7cc:	d005      	beq.n	7da <_sercom_get_default_pad+0x5a>
	return 0;
     7ce:	2000      	movs	r0, #0
     7d0:	e7e4      	b.n	79c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     7d2:	4832      	ldr	r0, [pc, #200]	; (89c <_sercom_get_default_pad+0x11c>)
     7d4:	e7e2      	b.n	79c <_sercom_get_default_pad+0x1c>
     7d6:	4832      	ldr	r0, [pc, #200]	; (8a0 <_sercom_get_default_pad+0x120>)
     7d8:	e7e0      	b.n	79c <_sercom_get_default_pad+0x1c>
     7da:	4832      	ldr	r0, [pc, #200]	; (8a4 <_sercom_get_default_pad+0x124>)
     7dc:	e7de      	b.n	79c <_sercom_get_default_pad+0x1c>
     7de:	4832      	ldr	r0, [pc, #200]	; (8a8 <_sercom_get_default_pad+0x128>)
     7e0:	e7dc      	b.n	79c <_sercom_get_default_pad+0x1c>
     7e2:	4832      	ldr	r0, [pc, #200]	; (8ac <_sercom_get_default_pad+0x12c>)
     7e4:	e7da      	b.n	79c <_sercom_get_default_pad+0x1c>
     7e6:	4832      	ldr	r0, [pc, #200]	; (8b0 <_sercom_get_default_pad+0x130>)
     7e8:	e7d8      	b.n	79c <_sercom_get_default_pad+0x1c>
     7ea:	2901      	cmp	r1, #1
     7ec:	d007      	beq.n	7fe <_sercom_get_default_pad+0x7e>
     7ee:	2900      	cmp	r1, #0
     7f0:	d03f      	beq.n	872 <_sercom_get_default_pad+0xf2>
     7f2:	2902      	cmp	r1, #2
     7f4:	d005      	beq.n	802 <_sercom_get_default_pad+0x82>
     7f6:	2903      	cmp	r1, #3
     7f8:	d005      	beq.n	806 <_sercom_get_default_pad+0x86>
	return 0;
     7fa:	2000      	movs	r0, #0
     7fc:	e7ce      	b.n	79c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     7fe:	482d      	ldr	r0, [pc, #180]	; (8b4 <_sercom_get_default_pad+0x134>)
     800:	e7cc      	b.n	79c <_sercom_get_default_pad+0x1c>
     802:	482d      	ldr	r0, [pc, #180]	; (8b8 <_sercom_get_default_pad+0x138>)
     804:	e7ca      	b.n	79c <_sercom_get_default_pad+0x1c>
     806:	482d      	ldr	r0, [pc, #180]	; (8bc <_sercom_get_default_pad+0x13c>)
     808:	e7c8      	b.n	79c <_sercom_get_default_pad+0x1c>
     80a:	2901      	cmp	r1, #1
     80c:	d007      	beq.n	81e <_sercom_get_default_pad+0x9e>
     80e:	2900      	cmp	r1, #0
     810:	d031      	beq.n	876 <_sercom_get_default_pad+0xf6>
     812:	2902      	cmp	r1, #2
     814:	d005      	beq.n	822 <_sercom_get_default_pad+0xa2>
     816:	2903      	cmp	r1, #3
     818:	d005      	beq.n	826 <_sercom_get_default_pad+0xa6>
	return 0;
     81a:	2000      	movs	r0, #0
     81c:	e7be      	b.n	79c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     81e:	4828      	ldr	r0, [pc, #160]	; (8c0 <_sercom_get_default_pad+0x140>)
     820:	e7bc      	b.n	79c <_sercom_get_default_pad+0x1c>
     822:	4828      	ldr	r0, [pc, #160]	; (8c4 <_sercom_get_default_pad+0x144>)
     824:	e7ba      	b.n	79c <_sercom_get_default_pad+0x1c>
     826:	4828      	ldr	r0, [pc, #160]	; (8c8 <_sercom_get_default_pad+0x148>)
     828:	e7b8      	b.n	79c <_sercom_get_default_pad+0x1c>
     82a:	2901      	cmp	r1, #1
     82c:	d007      	beq.n	83e <_sercom_get_default_pad+0xbe>
     82e:	2900      	cmp	r1, #0
     830:	d023      	beq.n	87a <_sercom_get_default_pad+0xfa>
     832:	2902      	cmp	r1, #2
     834:	d005      	beq.n	842 <_sercom_get_default_pad+0xc2>
     836:	2903      	cmp	r1, #3
     838:	d005      	beq.n	846 <_sercom_get_default_pad+0xc6>
	return 0;
     83a:	2000      	movs	r0, #0
     83c:	e7ae      	b.n	79c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     83e:	4823      	ldr	r0, [pc, #140]	; (8cc <_sercom_get_default_pad+0x14c>)
     840:	e7ac      	b.n	79c <_sercom_get_default_pad+0x1c>
     842:	4823      	ldr	r0, [pc, #140]	; (8d0 <_sercom_get_default_pad+0x150>)
     844:	e7aa      	b.n	79c <_sercom_get_default_pad+0x1c>
     846:	4823      	ldr	r0, [pc, #140]	; (8d4 <_sercom_get_default_pad+0x154>)
     848:	e7a8      	b.n	79c <_sercom_get_default_pad+0x1c>
     84a:	2901      	cmp	r1, #1
     84c:	d007      	beq.n	85e <_sercom_get_default_pad+0xde>
     84e:	2900      	cmp	r1, #0
     850:	d015      	beq.n	87e <_sercom_get_default_pad+0xfe>
     852:	2902      	cmp	r1, #2
     854:	d005      	beq.n	862 <_sercom_get_default_pad+0xe2>
     856:	2903      	cmp	r1, #3
     858:	d005      	beq.n	866 <_sercom_get_default_pad+0xe6>
	return 0;
     85a:	2000      	movs	r0, #0
     85c:	e79e      	b.n	79c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     85e:	481e      	ldr	r0, [pc, #120]	; (8d8 <_sercom_get_default_pad+0x158>)
     860:	e79c      	b.n	79c <_sercom_get_default_pad+0x1c>
     862:	481e      	ldr	r0, [pc, #120]	; (8dc <_sercom_get_default_pad+0x15c>)
     864:	e79a      	b.n	79c <_sercom_get_default_pad+0x1c>
     866:	481e      	ldr	r0, [pc, #120]	; (8e0 <_sercom_get_default_pad+0x160>)
     868:	e798      	b.n	79c <_sercom_get_default_pad+0x1c>
     86a:	481e      	ldr	r0, [pc, #120]	; (8e4 <_sercom_get_default_pad+0x164>)
     86c:	e796      	b.n	79c <_sercom_get_default_pad+0x1c>
     86e:	2003      	movs	r0, #3
     870:	e794      	b.n	79c <_sercom_get_default_pad+0x1c>
     872:	481d      	ldr	r0, [pc, #116]	; (8e8 <_sercom_get_default_pad+0x168>)
     874:	e792      	b.n	79c <_sercom_get_default_pad+0x1c>
     876:	481d      	ldr	r0, [pc, #116]	; (8ec <_sercom_get_default_pad+0x16c>)
     878:	e790      	b.n	79c <_sercom_get_default_pad+0x1c>
     87a:	481d      	ldr	r0, [pc, #116]	; (8f0 <_sercom_get_default_pad+0x170>)
     87c:	e78e      	b.n	79c <_sercom_get_default_pad+0x1c>
     87e:	481d      	ldr	r0, [pc, #116]	; (8f4 <_sercom_get_default_pad+0x174>)
     880:	e78c      	b.n	79c <_sercom_get_default_pad+0x1c>
     882:	46c0      	nop			; (mov r8, r8)
     884:	42001000 	.word	0x42001000
     888:	42001800 	.word	0x42001800
     88c:	42001c00 	.word	0x42001c00
     890:	42001400 	.word	0x42001400
     894:	42000800 	.word	0x42000800
     898:	42000c00 	.word	0x42000c00
     89c:	00050003 	.word	0x00050003
     8a0:	00060003 	.word	0x00060003
     8a4:	00070003 	.word	0x00070003
     8a8:	00010003 	.word	0x00010003
     8ac:	001e0003 	.word	0x001e0003
     8b0:	001f0003 	.word	0x001f0003
     8b4:	00090003 	.word	0x00090003
     8b8:	000a0003 	.word	0x000a0003
     8bc:	000b0003 	.word	0x000b0003
     8c0:	00110003 	.word	0x00110003
     8c4:	00120003 	.word	0x00120003
     8c8:	00130003 	.word	0x00130003
     8cc:	000d0003 	.word	0x000d0003
     8d0:	000e0003 	.word	0x000e0003
     8d4:	000f0003 	.word	0x000f0003
     8d8:	00170003 	.word	0x00170003
     8dc:	00180003 	.word	0x00180003
     8e0:	00190003 	.word	0x00190003
     8e4:	00040003 	.word	0x00040003
     8e8:	00080003 	.word	0x00080003
     8ec:	00100003 	.word	0x00100003
     8f0:	000c0003 	.word	0x000c0003
     8f4:	00160003 	.word	0x00160003

000008f8 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     8f8:	b530      	push	{r4, r5, lr}
     8fa:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     8fc:	4b0b      	ldr	r3, [pc, #44]	; (92c <_sercom_get_sercom_inst_index+0x34>)
     8fe:	466a      	mov	r2, sp
     900:	cb32      	ldmia	r3!, {r1, r4, r5}
     902:	c232      	stmia	r2!, {r1, r4, r5}
     904:	cb32      	ldmia	r3!, {r1, r4, r5}
     906:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     908:	9b00      	ldr	r3, [sp, #0]
     90a:	4283      	cmp	r3, r0
     90c:	d00b      	beq.n	926 <_sercom_get_sercom_inst_index+0x2e>
     90e:	2301      	movs	r3, #1
     910:	009a      	lsls	r2, r3, #2
     912:	4669      	mov	r1, sp
     914:	5852      	ldr	r2, [r2, r1]
     916:	4282      	cmp	r2, r0
     918:	d006      	beq.n	928 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     91a:	3301      	adds	r3, #1
     91c:	2b06      	cmp	r3, #6
     91e:	d1f7      	bne.n	910 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     920:	2000      	movs	r0, #0
}
     922:	b007      	add	sp, #28
     924:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     926:	2300      	movs	r3, #0
			return i;
     928:	b2d8      	uxtb	r0, r3
     92a:	e7fa      	b.n	922 <_sercom_get_sercom_inst_index+0x2a>
     92c:	00004364 	.word	0x00004364

00000930 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     930:	4770      	bx	lr
	...

00000934 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     934:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     936:	4b0a      	ldr	r3, [pc, #40]	; (960 <_sercom_set_handler+0x2c>)
     938:	781b      	ldrb	r3, [r3, #0]
     93a:	2b00      	cmp	r3, #0
     93c:	d10c      	bne.n	958 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     93e:	4f09      	ldr	r7, [pc, #36]	; (964 <_sercom_set_handler+0x30>)
     940:	4e09      	ldr	r6, [pc, #36]	; (968 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     942:	4d0a      	ldr	r5, [pc, #40]	; (96c <_sercom_set_handler+0x38>)
     944:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     946:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     948:	195a      	adds	r2, r3, r5
     94a:	6014      	str	r4, [r2, #0]
     94c:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     94e:	2b18      	cmp	r3, #24
     950:	d1f9      	bne.n	946 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
     952:	2201      	movs	r2, #1
     954:	4b02      	ldr	r3, [pc, #8]	; (960 <_sercom_set_handler+0x2c>)
     956:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     958:	0080      	lsls	r0, r0, #2
     95a:	4b02      	ldr	r3, [pc, #8]	; (964 <_sercom_set_handler+0x30>)
     95c:	50c1      	str	r1, [r0, r3]
}
     95e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     960:	20000262 	.word	0x20000262
     964:	20000264 	.word	0x20000264
     968:	00000931 	.word	0x00000931
     96c:	200002a8 	.word	0x200002a8

00000970 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     970:	b500      	push	{lr}
     972:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     974:	2309      	movs	r3, #9
     976:	466a      	mov	r2, sp
     978:	7013      	strb	r3, [r2, #0]
     97a:	3301      	adds	r3, #1
     97c:	7053      	strb	r3, [r2, #1]
     97e:	3301      	adds	r3, #1
     980:	7093      	strb	r3, [r2, #2]
     982:	3301      	adds	r3, #1
     984:	70d3      	strb	r3, [r2, #3]
     986:	3301      	adds	r3, #1
     988:	7113      	strb	r3, [r2, #4]
     98a:	3301      	adds	r3, #1
     98c:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     98e:	4b03      	ldr	r3, [pc, #12]	; (99c <_sercom_get_interrupt_vector+0x2c>)
     990:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     992:	466b      	mov	r3, sp
     994:	5618      	ldrsb	r0, [r3, r0]
}
     996:	b003      	add	sp, #12
     998:	bd00      	pop	{pc}
     99a:	46c0      	nop			; (mov r8, r8)
     99c:	000008f9 	.word	0x000008f9

000009a0 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     9a0:	b510      	push	{r4, lr}
     9a2:	4b02      	ldr	r3, [pc, #8]	; (9ac <SERCOM0_Handler+0xc>)
     9a4:	681b      	ldr	r3, [r3, #0]
     9a6:	2000      	movs	r0, #0
     9a8:	4798      	blx	r3
     9aa:	bd10      	pop	{r4, pc}
     9ac:	20000264 	.word	0x20000264

000009b0 <SERCOM1_Handler>:
     9b0:	b510      	push	{r4, lr}
     9b2:	4b02      	ldr	r3, [pc, #8]	; (9bc <SERCOM1_Handler+0xc>)
     9b4:	685b      	ldr	r3, [r3, #4]
     9b6:	2001      	movs	r0, #1
     9b8:	4798      	blx	r3
     9ba:	bd10      	pop	{r4, pc}
     9bc:	20000264 	.word	0x20000264

000009c0 <SERCOM2_Handler>:
     9c0:	b510      	push	{r4, lr}
     9c2:	4b02      	ldr	r3, [pc, #8]	; (9cc <SERCOM2_Handler+0xc>)
     9c4:	689b      	ldr	r3, [r3, #8]
     9c6:	2002      	movs	r0, #2
     9c8:	4798      	blx	r3
     9ca:	bd10      	pop	{r4, pc}
     9cc:	20000264 	.word	0x20000264

000009d0 <SERCOM3_Handler>:
     9d0:	b510      	push	{r4, lr}
     9d2:	4b02      	ldr	r3, [pc, #8]	; (9dc <SERCOM3_Handler+0xc>)
     9d4:	68db      	ldr	r3, [r3, #12]
     9d6:	2003      	movs	r0, #3
     9d8:	4798      	blx	r3
     9da:	bd10      	pop	{r4, pc}
     9dc:	20000264 	.word	0x20000264

000009e0 <SERCOM4_Handler>:
     9e0:	b510      	push	{r4, lr}
     9e2:	4b02      	ldr	r3, [pc, #8]	; (9ec <SERCOM4_Handler+0xc>)
     9e4:	691b      	ldr	r3, [r3, #16]
     9e6:	2004      	movs	r0, #4
     9e8:	4798      	blx	r3
     9ea:	bd10      	pop	{r4, pc}
     9ec:	20000264 	.word	0x20000264

000009f0 <SERCOM5_Handler>:
     9f0:	b510      	push	{r4, lr}
     9f2:	4b02      	ldr	r3, [pc, #8]	; (9fc <SERCOM5_Handler+0xc>)
     9f4:	695b      	ldr	r3, [r3, #20]
     9f6:	2005      	movs	r0, #5
     9f8:	4798      	blx	r3
     9fa:	bd10      	pop	{r4, pc}
     9fc:	20000264 	.word	0x20000264

00000a00 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     a00:	b5f0      	push	{r4, r5, r6, r7, lr}
     a02:	46de      	mov	lr, fp
     a04:	4657      	mov	r7, sl
     a06:	464e      	mov	r6, r9
     a08:	4645      	mov	r5, r8
     a0a:	b5e0      	push	{r5, r6, r7, lr}
     a0c:	b091      	sub	sp, #68	; 0x44
     a0e:	0005      	movs	r5, r0
     a10:	000c      	movs	r4, r1
     a12:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     a14:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     a16:	0008      	movs	r0, r1
     a18:	4bba      	ldr	r3, [pc, #744]	; (d04 <usart_init+0x304>)
     a1a:	4798      	blx	r3
     a1c:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     a1e:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     a20:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     a22:	07db      	lsls	r3, r3, #31
     a24:	d506      	bpl.n	a34 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     a26:	b011      	add	sp, #68	; 0x44
     a28:	bc3c      	pop	{r2, r3, r4, r5}
     a2a:	4690      	mov	r8, r2
     a2c:	4699      	mov	r9, r3
     a2e:	46a2      	mov	sl, r4
     a30:	46ab      	mov	fp, r5
     a32:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     a34:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
     a36:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     a38:	079b      	lsls	r3, r3, #30
     a3a:	d4f4      	bmi.n	a26 <usart_init+0x26>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     a3c:	49b2      	ldr	r1, [pc, #712]	; (d08 <usart_init+0x308>)
     a3e:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     a40:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     a42:	2301      	movs	r3, #1
     a44:	40bb      	lsls	r3, r7
     a46:	4303      	orrs	r3, r0
     a48:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     a4a:	a90f      	add	r1, sp, #60	; 0x3c
     a4c:	272d      	movs	r7, #45	; 0x2d
     a4e:	5df3      	ldrb	r3, [r6, r7]
     a50:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     a52:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     a54:	b2d3      	uxtb	r3, r2
     a56:	9302      	str	r3, [sp, #8]
     a58:	0018      	movs	r0, r3
     a5a:	4bac      	ldr	r3, [pc, #688]	; (d0c <usart_init+0x30c>)
     a5c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     a5e:	9802      	ldr	r0, [sp, #8]
     a60:	4bab      	ldr	r3, [pc, #684]	; (d10 <usart_init+0x310>)
     a62:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     a64:	5df0      	ldrb	r0, [r6, r7]
     a66:	2100      	movs	r1, #0
     a68:	4baa      	ldr	r3, [pc, #680]	; (d14 <usart_init+0x314>)
     a6a:	4798      	blx	r3
	module->character_size = config->character_size;
     a6c:	7af3      	ldrb	r3, [r6, #11]
     a6e:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
     a70:	2324      	movs	r3, #36	; 0x24
     a72:	5cf3      	ldrb	r3, [r6, r3]
     a74:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     a76:	2325      	movs	r3, #37	; 0x25
     a78:	5cf3      	ldrb	r3, [r6, r3]
     a7a:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
     a7c:	7ef3      	ldrb	r3, [r6, #27]
     a7e:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     a80:	7f33      	ldrb	r3, [r6, #28]
     a82:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
     a84:	682b      	ldr	r3, [r5, #0]
     a86:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     a88:	0018      	movs	r0, r3
     a8a:	4b9e      	ldr	r3, [pc, #632]	; (d04 <usart_init+0x304>)
     a8c:	4798      	blx	r3
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     a8e:	3014      	adds	r0, #20
	uint16_t baud  = 0;
     a90:	2200      	movs	r2, #0
     a92:	230e      	movs	r3, #14
     a94:	a906      	add	r1, sp, #24
     a96:	468c      	mov	ip, r1
     a98:	4463      	add	r3, ip
     a9a:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
     a9c:	8a32      	ldrh	r2, [r6, #16]
     a9e:	9202      	str	r2, [sp, #8]
     aa0:	2380      	movs	r3, #128	; 0x80
     aa2:	01db      	lsls	r3, r3, #7
     aa4:	429a      	cmp	r2, r3
     aa6:	d100      	bne.n	aaa <usart_init+0xaa>
     aa8:	e09a      	b.n	be0 <usart_init+0x1e0>
     aaa:	d90f      	bls.n	acc <usart_init+0xcc>
     aac:	23c0      	movs	r3, #192	; 0xc0
     aae:	01db      	lsls	r3, r3, #7
     ab0:	9a02      	ldr	r2, [sp, #8]
     ab2:	429a      	cmp	r2, r3
     ab4:	d100      	bne.n	ab8 <usart_init+0xb8>
     ab6:	e08e      	b.n	bd6 <usart_init+0x1d6>
     ab8:	2380      	movs	r3, #128	; 0x80
     aba:	021b      	lsls	r3, r3, #8
     abc:	429a      	cmp	r2, r3
     abe:	d000      	beq.n	ac2 <usart_init+0xc2>
     ac0:	e11b      	b.n	cfa <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     ac2:	2303      	movs	r3, #3
     ac4:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     ac6:	2300      	movs	r3, #0
     ac8:	9307      	str	r3, [sp, #28]
     aca:	e008      	b.n	ade <usart_init+0xde>
	switch (config->sample_rate) {
     acc:	2380      	movs	r3, #128	; 0x80
     ace:	019b      	lsls	r3, r3, #6
     ad0:	429a      	cmp	r2, r3
     ad2:	d000      	beq.n	ad6 <usart_init+0xd6>
     ad4:	e111      	b.n	cfa <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     ad6:	2310      	movs	r3, #16
     ad8:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     ada:	3b0f      	subs	r3, #15
     adc:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
     ade:	6833      	ldr	r3, [r6, #0]
     ae0:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     ae2:	68f3      	ldr	r3, [r6, #12]
     ae4:	469b      	mov	fp, r3
		config->sample_adjustment |
     ae6:	6973      	ldr	r3, [r6, #20]
     ae8:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     aea:	7e33      	ldrb	r3, [r6, #24]
     aec:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     aee:	2326      	movs	r3, #38	; 0x26
     af0:	5cf3      	ldrb	r3, [r6, r3]
     af2:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     af4:	6873      	ldr	r3, [r6, #4]
     af6:	4699      	mov	r9, r3
	switch (transfer_mode)
     af8:	2b00      	cmp	r3, #0
     afa:	d100      	bne.n	afe <usart_init+0xfe>
     afc:	e09c      	b.n	c38 <usart_init+0x238>
     afe:	2380      	movs	r3, #128	; 0x80
     b00:	055b      	lsls	r3, r3, #21
     b02:	4599      	cmp	r9, r3
     b04:	d100      	bne.n	b08 <usart_init+0x108>
     b06:	e080      	b.n	c0a <usart_init+0x20a>
	if(config->encoding_format_enable) {
     b08:	7e73      	ldrb	r3, [r6, #25]
     b0a:	2b00      	cmp	r3, #0
     b0c:	d002      	beq.n	b14 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     b0e:	7eb3      	ldrb	r3, [r6, #26]
     b10:	4642      	mov	r2, r8
     b12:	7393      	strb	r3, [r2, #14]
	usart_hw->BAUD.reg = baud;
     b14:	230e      	movs	r3, #14
     b16:	aa06      	add	r2, sp, #24
     b18:	4694      	mov	ip, r2
     b1a:	4463      	add	r3, ip
     b1c:	881b      	ldrh	r3, [r3, #0]
     b1e:	4642      	mov	r2, r8
     b20:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
     b22:	9b05      	ldr	r3, [sp, #20]
     b24:	465a      	mov	r2, fp
     b26:	4313      	orrs	r3, r2
     b28:	9a03      	ldr	r2, [sp, #12]
     b2a:	4313      	orrs	r3, r2
     b2c:	464a      	mov	r2, r9
     b2e:	4313      	orrs	r3, r2
     b30:	9f02      	ldr	r7, [sp, #8]
     b32:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     b34:	9b04      	ldr	r3, [sp, #16]
     b36:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
     b38:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     b3a:	4653      	mov	r3, sl
     b3c:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
     b3e:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
     b40:	2327      	movs	r3, #39	; 0x27
     b42:	5cf3      	ldrb	r3, [r6, r3]
     b44:	2b00      	cmp	r3, #0
     b46:	d101      	bne.n	b4c <usart_init+0x14c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     b48:	3304      	adds	r3, #4
     b4a:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     b4c:	7e73      	ldrb	r3, [r6, #25]
     b4e:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     b50:	7f32      	ldrb	r2, [r6, #28]
     b52:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     b54:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     b56:	7f72      	ldrb	r2, [r6, #29]
     b58:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     b5a:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     b5c:	2224      	movs	r2, #36	; 0x24
     b5e:	5cb2      	ldrb	r2, [r6, r2]
     b60:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     b62:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     b64:	2225      	movs	r2, #37	; 0x25
     b66:	5cb2      	ldrb	r2, [r6, r2]
     b68:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     b6a:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
     b6c:	7ab1      	ldrb	r1, [r6, #10]
     b6e:	7af2      	ldrb	r2, [r6, #11]
     b70:	4311      	orrs	r1, r2
     b72:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
     b74:	8933      	ldrh	r3, [r6, #8]
     b76:	2bff      	cmp	r3, #255	; 0xff
     b78:	d100      	bne.n	b7c <usart_init+0x17c>
     b7a:	e081      	b.n	c80 <usart_init+0x280>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     b7c:	2280      	movs	r2, #128	; 0x80
     b7e:	0452      	lsls	r2, r2, #17
     b80:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
     b82:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
     b84:	232c      	movs	r3, #44	; 0x2c
     b86:	5cf3      	ldrb	r3, [r6, r3]
     b88:	2b00      	cmp	r3, #0
     b8a:	d103      	bne.n	b94 <usart_init+0x194>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     b8c:	4b62      	ldr	r3, [pc, #392]	; (d18 <usart_init+0x318>)
     b8e:	789b      	ldrb	r3, [r3, #2]
     b90:	079b      	lsls	r3, r3, #30
     b92:	d501      	bpl.n	b98 <usart_init+0x198>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     b94:	2380      	movs	r3, #128	; 0x80
     b96:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     b98:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     b9a:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     b9c:	2b00      	cmp	r3, #0
     b9e:	d1fc      	bne.n	b9a <usart_init+0x19a>
	usart_hw->CTRLB.reg = ctrlb;
     ba0:	4643      	mov	r3, r8
     ba2:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
     ba4:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     ba6:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     ba8:	2b00      	cmp	r3, #0
     baa:	d1fc      	bne.n	ba6 <usart_init+0x1a6>
	usart_hw->CTRLA.reg = ctrla;
     bac:	4643      	mov	r3, r8
     bae:	601f      	str	r7, [r3, #0]
     bb0:	ab0e      	add	r3, sp, #56	; 0x38
     bb2:	2280      	movs	r2, #128	; 0x80
     bb4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     bb6:	2200      	movs	r2, #0
     bb8:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     bba:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     bbc:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     bbe:	6b33      	ldr	r3, [r6, #48]	; 0x30
     bc0:	930a      	str	r3, [sp, #40]	; 0x28
     bc2:	6b73      	ldr	r3, [r6, #52]	; 0x34
     bc4:	930b      	str	r3, [sp, #44]	; 0x2c
     bc6:	6bb3      	ldr	r3, [r6, #56]	; 0x38
     bc8:	930c      	str	r3, [sp, #48]	; 0x30
     bca:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
     bcc:	9302      	str	r3, [sp, #8]
     bce:	930d      	str	r3, [sp, #52]	; 0x34
     bd0:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     bd2:	ae0a      	add	r6, sp, #40	; 0x28
     bd4:	e063      	b.n	c9e <usart_init+0x29e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     bd6:	2308      	movs	r3, #8
     bd8:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     bda:	3b07      	subs	r3, #7
     bdc:	9307      	str	r3, [sp, #28]
     bde:	e77e      	b.n	ade <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
     be0:	6833      	ldr	r3, [r6, #0]
     be2:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     be4:	68f3      	ldr	r3, [r6, #12]
     be6:	469b      	mov	fp, r3
		config->sample_adjustment |
     be8:	6973      	ldr	r3, [r6, #20]
     bea:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     bec:	7e33      	ldrb	r3, [r6, #24]
     bee:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     bf0:	2326      	movs	r3, #38	; 0x26
     bf2:	5cf3      	ldrb	r3, [r6, r3]
     bf4:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     bf6:	6873      	ldr	r3, [r6, #4]
     bf8:	4699      	mov	r9, r3
	switch (transfer_mode)
     bfa:	2b00      	cmp	r3, #0
     bfc:	d018      	beq.n	c30 <usart_init+0x230>
     bfe:	2380      	movs	r3, #128	; 0x80
     c00:	055b      	lsls	r3, r3, #21
     c02:	4599      	cmp	r9, r3
     c04:	d001      	beq.n	c0a <usart_init+0x20a>
	enum status_code status_code = STATUS_OK;
     c06:	2000      	movs	r0, #0
     c08:	e025      	b.n	c56 <usart_init+0x256>
			if (!config->use_external_clock) {
     c0a:	2327      	movs	r3, #39	; 0x27
     c0c:	5cf3      	ldrb	r3, [r6, r3]
     c0e:	2b00      	cmp	r3, #0
     c10:	d000      	beq.n	c14 <usart_init+0x214>
     c12:	e779      	b.n	b08 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     c14:	6a33      	ldr	r3, [r6, #32]
     c16:	001f      	movs	r7, r3
     c18:	b2c0      	uxtb	r0, r0
     c1a:	4b40      	ldr	r3, [pc, #256]	; (d1c <usart_init+0x31c>)
     c1c:	4798      	blx	r3
     c1e:	0001      	movs	r1, r0
     c20:	220e      	movs	r2, #14
     c22:	ab06      	add	r3, sp, #24
     c24:	469c      	mov	ip, r3
     c26:	4462      	add	r2, ip
     c28:	0038      	movs	r0, r7
     c2a:	4b3d      	ldr	r3, [pc, #244]	; (d20 <usart_init+0x320>)
     c2c:	4798      	blx	r3
     c2e:	e012      	b.n	c56 <usart_init+0x256>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     c30:	2308      	movs	r3, #8
     c32:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     c34:	2300      	movs	r3, #0
     c36:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
     c38:	2327      	movs	r3, #39	; 0x27
     c3a:	5cf3      	ldrb	r3, [r6, r3]
     c3c:	2b00      	cmp	r3, #0
     c3e:	d00e      	beq.n	c5e <usart_init+0x25e>
				status_code =
     c40:	9b06      	ldr	r3, [sp, #24]
     c42:	9300      	str	r3, [sp, #0]
     c44:	9b07      	ldr	r3, [sp, #28]
     c46:	220e      	movs	r2, #14
     c48:	a906      	add	r1, sp, #24
     c4a:	468c      	mov	ip, r1
     c4c:	4462      	add	r2, ip
     c4e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
     c50:	6a30      	ldr	r0, [r6, #32]
     c52:	4f34      	ldr	r7, [pc, #208]	; (d24 <usart_init+0x324>)
     c54:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
     c56:	2800      	cmp	r0, #0
     c58:	d000      	beq.n	c5c <usart_init+0x25c>
     c5a:	e6e4      	b.n	a26 <usart_init+0x26>
     c5c:	e754      	b.n	b08 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
     c5e:	6a33      	ldr	r3, [r6, #32]
     c60:	001f      	movs	r7, r3
     c62:	b2c0      	uxtb	r0, r0
     c64:	4b2d      	ldr	r3, [pc, #180]	; (d1c <usart_init+0x31c>)
     c66:	4798      	blx	r3
     c68:	0001      	movs	r1, r0
				status_code =
     c6a:	9b06      	ldr	r3, [sp, #24]
     c6c:	9300      	str	r3, [sp, #0]
     c6e:	9b07      	ldr	r3, [sp, #28]
     c70:	220e      	movs	r2, #14
     c72:	a806      	add	r0, sp, #24
     c74:	4684      	mov	ip, r0
     c76:	4462      	add	r2, ip
     c78:	0038      	movs	r0, r7
     c7a:	4f2a      	ldr	r7, [pc, #168]	; (d24 <usart_init+0x324>)
     c7c:	47b8      	blx	r7
     c7e:	e7ea      	b.n	c56 <usart_init+0x256>
		if(config->lin_slave_enable) {
     c80:	7ef3      	ldrb	r3, [r6, #27]
     c82:	2b00      	cmp	r3, #0
     c84:	d100      	bne.n	c88 <usart_init+0x288>
     c86:	e77d      	b.n	b84 <usart_init+0x184>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     c88:	2380      	movs	r3, #128	; 0x80
     c8a:	04db      	lsls	r3, r3, #19
     c8c:	431f      	orrs	r7, r3
     c8e:	e779      	b.n	b84 <usart_init+0x184>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     c90:	0020      	movs	r0, r4
     c92:	4b25      	ldr	r3, [pc, #148]	; (d28 <usart_init+0x328>)
     c94:	4798      	blx	r3
     c96:	e007      	b.n	ca8 <usart_init+0x2a8>
     c98:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     c9a:	2f04      	cmp	r7, #4
     c9c:	d00d      	beq.n	cba <usart_init+0x2ba>
     c9e:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
     ca0:	00bb      	lsls	r3, r7, #2
     ca2:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
     ca4:	2800      	cmp	r0, #0
     ca6:	d0f3      	beq.n	c90 <usart_init+0x290>
		if (current_pinmux != PINMUX_UNUSED) {
     ca8:	1c43      	adds	r3, r0, #1
     caa:	d0f5      	beq.n	c98 <usart_init+0x298>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     cac:	a90e      	add	r1, sp, #56	; 0x38
     cae:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     cb0:	0c00      	lsrs	r0, r0, #16
     cb2:	b2c0      	uxtb	r0, r0
     cb4:	4b1d      	ldr	r3, [pc, #116]	; (d2c <usart_init+0x32c>)
     cb6:	4798      	blx	r3
     cb8:	e7ee      	b.n	c98 <usart_init+0x298>
		module->callback[i]            = NULL;
     cba:	2300      	movs	r3, #0
     cbc:	60eb      	str	r3, [r5, #12]
     cbe:	612b      	str	r3, [r5, #16]
     cc0:	616b      	str	r3, [r5, #20]
     cc2:	61ab      	str	r3, [r5, #24]
     cc4:	61eb      	str	r3, [r5, #28]
     cc6:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
     cc8:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     cca:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     ccc:	2200      	movs	r2, #0
     cce:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     cd0:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     cd2:	3330      	adds	r3, #48	; 0x30
     cd4:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     cd6:	3301      	adds	r3, #1
     cd8:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     cda:	3301      	adds	r3, #1
     cdc:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     cde:	3301      	adds	r3, #1
     ce0:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     ce2:	6828      	ldr	r0, [r5, #0]
     ce4:	4b07      	ldr	r3, [pc, #28]	; (d04 <usart_init+0x304>)
     ce6:	4798      	blx	r3
     ce8:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     cea:	4911      	ldr	r1, [pc, #68]	; (d30 <usart_init+0x330>)
     cec:	4b11      	ldr	r3, [pc, #68]	; (d34 <usart_init+0x334>)
     cee:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     cf0:	00a4      	lsls	r4, r4, #2
     cf2:	4b11      	ldr	r3, [pc, #68]	; (d38 <usart_init+0x338>)
     cf4:	50e5      	str	r5, [r4, r3]
	return status_code;
     cf6:	2000      	movs	r0, #0
     cf8:	e695      	b.n	a26 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     cfa:	2310      	movs	r3, #16
     cfc:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     cfe:	2300      	movs	r3, #0
     d00:	9307      	str	r3, [sp, #28]
     d02:	e6ec      	b.n	ade <usart_init+0xde>
     d04:	000008f9 	.word	0x000008f9
     d08:	40000400 	.word	0x40000400
     d0c:	000015a5 	.word	0x000015a5
     d10:	00001519 	.word	0x00001519
     d14:	00000735 	.word	0x00000735
     d18:	41002000 	.word	0x41002000
     d1c:	000015c1 	.word	0x000015c1
     d20:	00000677 	.word	0x00000677
     d24:	000006a1 	.word	0x000006a1
     d28:	00000781 	.word	0x00000781
     d2c:	0000169d 	.word	0x0000169d
     d30:	00000dcd 	.word	0x00000dcd
     d34:	00000935 	.word	0x00000935
     d38:	200002a8 	.word	0x200002a8

00000d3c <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     d3c:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
     d3e:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
     d40:	2a00      	cmp	r2, #0
     d42:	d101      	bne.n	d48 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
     d44:	0018      	movs	r0, r3
     d46:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
     d48:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
     d4a:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     d4c:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
     d4e:	2a00      	cmp	r2, #0
     d50:	d1f8      	bne.n	d44 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
     d52:	6802      	ldr	r2, [r0, #0]
	usart_hw->DATA.reg = tx_data;
     d54:	8511      	strh	r1, [r2, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     d56:	2102      	movs	r1, #2
     d58:	7e13      	ldrb	r3, [r2, #24]
     d5a:	420b      	tst	r3, r1
     d5c:	d0fc      	beq.n	d58 <usart_write_wait+0x1c>
	return STATUS_OK;
     d5e:	2300      	movs	r3, #0
     d60:	e7f0      	b.n	d44 <usart_write_wait+0x8>

00000d62 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     d62:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
     d64:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
     d66:	2a00      	cmp	r2, #0
     d68:	d101      	bne.n	d6e <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
     d6a:	0018      	movs	r0, r3
     d6c:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
     d6e:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
     d70:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     d72:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
     d74:	2a00      	cmp	r2, #0
     d76:	d1f8      	bne.n	d6a <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
     d78:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
     d7a:	7e10      	ldrb	r0, [r2, #24]
     d7c:	0740      	lsls	r0, r0, #29
     d7e:	d5f4      	bpl.n	d6a <usart_read_wait+0x8>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     d80:	8b53      	ldrh	r3, [r2, #26]
     d82:	b2db      	uxtb	r3, r3
	if (error_code) {
     d84:	0698      	lsls	r0, r3, #26
     d86:	d01d      	beq.n	dc4 <usart_read_wait+0x62>
		if (error_code & SERCOM_USART_STATUS_FERR) {
     d88:	0798      	lsls	r0, r3, #30
     d8a:	d503      	bpl.n	d94 <usart_read_wait+0x32>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     d8c:	2302      	movs	r3, #2
     d8e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
     d90:	3318      	adds	r3, #24
     d92:	e7ea      	b.n	d6a <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     d94:	0758      	lsls	r0, r3, #29
     d96:	d503      	bpl.n	da0 <usart_read_wait+0x3e>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     d98:	2304      	movs	r3, #4
     d9a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
     d9c:	331a      	adds	r3, #26
     d9e:	e7e4      	b.n	d6a <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
     da0:	07d8      	lsls	r0, r3, #31
     da2:	d503      	bpl.n	dac <usart_read_wait+0x4a>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     da4:	2301      	movs	r3, #1
     da6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
     da8:	3312      	adds	r3, #18
     daa:	e7de      	b.n	d6a <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
     dac:	06d8      	lsls	r0, r3, #27
     dae:	d503      	bpl.n	db8 <usart_read_wait+0x56>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     db0:	2310      	movs	r3, #16
     db2:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
     db4:	3332      	adds	r3, #50	; 0x32
     db6:	e7d8      	b.n	d6a <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
     db8:	069b      	lsls	r3, r3, #26
     dba:	d503      	bpl.n	dc4 <usart_read_wait+0x62>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     dbc:	2320      	movs	r3, #32
     dbe:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
     dc0:	3321      	adds	r3, #33	; 0x21
     dc2:	e7d2      	b.n	d6a <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
     dc4:	8d13      	ldrh	r3, [r2, #40]	; 0x28
     dc6:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
     dc8:	2300      	movs	r3, #0
     dca:	e7ce      	b.n	d6a <usart_read_wait+0x8>

00000dcc <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     dce:	0080      	lsls	r0, r0, #2
     dd0:	4b62      	ldr	r3, [pc, #392]	; (f5c <_usart_interrupt_handler+0x190>)
     dd2:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     dd4:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     dd6:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
     dd8:	2b00      	cmp	r3, #0
     dda:	d1fc      	bne.n	dd6 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     ddc:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
     dde:	7da6      	ldrb	r6, [r4, #22]
     de0:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
     de2:	2330      	movs	r3, #48	; 0x30
     de4:	5ceb      	ldrb	r3, [r5, r3]
     de6:	2231      	movs	r2, #49	; 0x31
     de8:	5caf      	ldrb	r7, [r5, r2]
     dea:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     dec:	07f3      	lsls	r3, r6, #31
     dee:	d522      	bpl.n	e36 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
     df0:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     df2:	b29b      	uxth	r3, r3
     df4:	2b00      	cmp	r3, #0
     df6:	d01c      	beq.n	e32 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     df8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
     dfa:	7813      	ldrb	r3, [r2, #0]
     dfc:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     dfe:	1c51      	adds	r1, r2, #1
     e00:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     e02:	7969      	ldrb	r1, [r5, #5]
     e04:	2901      	cmp	r1, #1
     e06:	d00e      	beq.n	e26 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     e08:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     e0a:	05db      	lsls	r3, r3, #23
     e0c:	0ddb      	lsrs	r3, r3, #23
     e0e:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
     e10:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     e12:	3b01      	subs	r3, #1
     e14:	b29b      	uxth	r3, r3
     e16:	85eb      	strh	r3, [r5, #46]	; 0x2e
     e18:	2b00      	cmp	r3, #0
     e1a:	d10c      	bne.n	e36 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     e1c:	3301      	adds	r3, #1
     e1e:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     e20:	3301      	adds	r3, #1
     e22:	75a3      	strb	r3, [r4, #22]
     e24:	e007      	b.n	e36 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     e26:	7851      	ldrb	r1, [r2, #1]
     e28:	0209      	lsls	r1, r1, #8
     e2a:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
     e2c:	3202      	adds	r2, #2
     e2e:	62aa      	str	r2, [r5, #40]	; 0x28
     e30:	e7eb      	b.n	e0a <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     e32:	2301      	movs	r3, #1
     e34:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     e36:	07b3      	lsls	r3, r6, #30
     e38:	d506      	bpl.n	e48 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     e3a:	2302      	movs	r3, #2
     e3c:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
     e3e:	2200      	movs	r2, #0
     e40:	3331      	adds	r3, #49	; 0x31
     e42:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     e44:	07fb      	lsls	r3, r7, #31
     e46:	d41a      	bmi.n	e7e <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     e48:	0773      	lsls	r3, r6, #29
     e4a:	d565      	bpl.n	f18 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
     e4c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     e4e:	b29b      	uxth	r3, r3
     e50:	2b00      	cmp	r3, #0
     e52:	d05f      	beq.n	f14 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     e54:	8b63      	ldrh	r3, [r4, #26]
     e56:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
     e58:	071a      	lsls	r2, r3, #28
     e5a:	d414      	bmi.n	e86 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     e5c:	223f      	movs	r2, #63	; 0x3f
     e5e:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
     e60:	2b00      	cmp	r3, #0
     e62:	d034      	beq.n	ece <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     e64:	079a      	lsls	r2, r3, #30
     e66:	d511      	bpl.n	e8c <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     e68:	221a      	movs	r2, #26
     e6a:	2332      	movs	r3, #50	; 0x32
     e6c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     e6e:	3b30      	subs	r3, #48	; 0x30
     e70:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
     e72:	077b      	lsls	r3, r7, #29
     e74:	d550      	bpl.n	f18 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
     e76:	0028      	movs	r0, r5
     e78:	696b      	ldr	r3, [r5, #20]
     e7a:	4798      	blx	r3
     e7c:	e04c      	b.n	f18 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     e7e:	0028      	movs	r0, r5
     e80:	68eb      	ldr	r3, [r5, #12]
     e82:	4798      	blx	r3
     e84:	e7e0      	b.n	e48 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
     e86:	2237      	movs	r2, #55	; 0x37
     e88:	4013      	ands	r3, r2
     e8a:	e7e9      	b.n	e60 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     e8c:	075a      	lsls	r2, r3, #29
     e8e:	d505      	bpl.n	e9c <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
     e90:	221e      	movs	r2, #30
     e92:	2332      	movs	r3, #50	; 0x32
     e94:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     e96:	3b2e      	subs	r3, #46	; 0x2e
     e98:	8363      	strh	r3, [r4, #26]
     e9a:	e7ea      	b.n	e72 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     e9c:	07da      	lsls	r2, r3, #31
     e9e:	d505      	bpl.n	eac <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
     ea0:	2213      	movs	r2, #19
     ea2:	2332      	movs	r3, #50	; 0x32
     ea4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     ea6:	3b31      	subs	r3, #49	; 0x31
     ea8:	8363      	strh	r3, [r4, #26]
     eaa:	e7e2      	b.n	e72 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
     eac:	06da      	lsls	r2, r3, #27
     eae:	d505      	bpl.n	ebc <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
     eb0:	2242      	movs	r2, #66	; 0x42
     eb2:	2332      	movs	r3, #50	; 0x32
     eb4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     eb6:	3b22      	subs	r3, #34	; 0x22
     eb8:	8363      	strh	r3, [r4, #26]
     eba:	e7da      	b.n	e72 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
     ebc:	2220      	movs	r2, #32
     ebe:	421a      	tst	r2, r3
     ec0:	d0d7      	beq.n	e72 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
     ec2:	3221      	adds	r2, #33	; 0x21
     ec4:	2332      	movs	r3, #50	; 0x32
     ec6:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     ec8:	3b12      	subs	r3, #18
     eca:	8363      	strh	r3, [r4, #26]
     ecc:	e7d1      	b.n	e72 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     ece:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     ed0:	05db      	lsls	r3, r3, #23
     ed2:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
     ed4:	b2da      	uxtb	r2, r3
     ed6:	6a69      	ldr	r1, [r5, #36]	; 0x24
     ed8:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
     eda:	6a6a      	ldr	r2, [r5, #36]	; 0x24
     edc:	1c51      	adds	r1, r2, #1
     ede:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     ee0:	7969      	ldrb	r1, [r5, #5]
     ee2:	2901      	cmp	r1, #1
     ee4:	d010      	beq.n	f08 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
     ee6:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     ee8:	3b01      	subs	r3, #1
     eea:	b29b      	uxth	r3, r3
     eec:	85ab      	strh	r3, [r5, #44]	; 0x2c
     eee:	2b00      	cmp	r3, #0
     ef0:	d112      	bne.n	f18 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     ef2:	3304      	adds	r3, #4
     ef4:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
     ef6:	2200      	movs	r2, #0
     ef8:	332e      	adds	r3, #46	; 0x2e
     efa:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
     efc:	07bb      	lsls	r3, r7, #30
     efe:	d50b      	bpl.n	f18 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
     f00:	0028      	movs	r0, r5
     f02:	692b      	ldr	r3, [r5, #16]
     f04:	4798      	blx	r3
     f06:	e007      	b.n	f18 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
     f08:	0a1b      	lsrs	r3, r3, #8
     f0a:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
     f0c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     f0e:	3301      	adds	r3, #1
     f10:	626b      	str	r3, [r5, #36]	; 0x24
     f12:	e7e8      	b.n	ee6 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     f14:	2304      	movs	r3, #4
     f16:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
     f18:	06f3      	lsls	r3, r6, #27
     f1a:	d504      	bpl.n	f26 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
     f1c:	2310      	movs	r3, #16
     f1e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
     f20:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
     f22:	06fb      	lsls	r3, r7, #27
     f24:	d40e      	bmi.n	f44 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
     f26:	06b3      	lsls	r3, r6, #26
     f28:	d504      	bpl.n	f34 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
     f2a:	2320      	movs	r3, #32
     f2c:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
     f2e:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
     f30:	073b      	lsls	r3, r7, #28
     f32:	d40b      	bmi.n	f4c <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
     f34:	0733      	lsls	r3, r6, #28
     f36:	d504      	bpl.n	f42 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
     f38:	2308      	movs	r3, #8
     f3a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
     f3c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
     f3e:	06bb      	lsls	r3, r7, #26
     f40:	d408      	bmi.n	f54 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
     f42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
     f44:	0028      	movs	r0, r5
     f46:	69eb      	ldr	r3, [r5, #28]
     f48:	4798      	blx	r3
     f4a:	e7ec      	b.n	f26 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
     f4c:	0028      	movs	r0, r5
     f4e:	69ab      	ldr	r3, [r5, #24]
     f50:	4798      	blx	r3
     f52:	e7ef      	b.n	f34 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
     f54:	6a2b      	ldr	r3, [r5, #32]
     f56:	0028      	movs	r0, r5
     f58:	4798      	blx	r3
}
     f5a:	e7f2      	b.n	f42 <_usart_interrupt_handler+0x176>
     f5c:	200002a8 	.word	0x200002a8

00000f60 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     f60:	b510      	push	{r4, lr}
	switch (clock_source) {
     f62:	2808      	cmp	r0, #8
     f64:	d803      	bhi.n	f6e <system_clock_source_get_hz+0xe>
     f66:	0080      	lsls	r0, r0, #2
     f68:	4b1c      	ldr	r3, [pc, #112]	; (fdc <system_clock_source_get_hz+0x7c>)
     f6a:	581b      	ldr	r3, [r3, r0]
     f6c:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
     f6e:	2000      	movs	r0, #0
     f70:	e032      	b.n	fd8 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
     f72:	4b1b      	ldr	r3, [pc, #108]	; (fe0 <system_clock_source_get_hz+0x80>)
     f74:	6918      	ldr	r0, [r3, #16]
     f76:	e02f      	b.n	fd8 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
     f78:	4b1a      	ldr	r3, [pc, #104]	; (fe4 <system_clock_source_get_hz+0x84>)
     f7a:	6a1b      	ldr	r3, [r3, #32]
     f7c:	059b      	lsls	r3, r3, #22
     f7e:	0f9b      	lsrs	r3, r3, #30
     f80:	4819      	ldr	r0, [pc, #100]	; (fe8 <system_clock_source_get_hz+0x88>)
     f82:	40d8      	lsrs	r0, r3
     f84:	e028      	b.n	fd8 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
     f86:	4b16      	ldr	r3, [pc, #88]	; (fe0 <system_clock_source_get_hz+0x80>)
     f88:	6958      	ldr	r0, [r3, #20]
     f8a:	e025      	b.n	fd8 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     f8c:	4b14      	ldr	r3, [pc, #80]	; (fe0 <system_clock_source_get_hz+0x80>)
     f8e:	681b      	ldr	r3, [r3, #0]
			return 0;
     f90:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     f92:	079b      	lsls	r3, r3, #30
     f94:	d520      	bpl.n	fd8 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     f96:	4913      	ldr	r1, [pc, #76]	; (fe4 <system_clock_source_get_hz+0x84>)
     f98:	2210      	movs	r2, #16
     f9a:	68cb      	ldr	r3, [r1, #12]
     f9c:	421a      	tst	r2, r3
     f9e:	d0fc      	beq.n	f9a <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
     fa0:	4b0f      	ldr	r3, [pc, #60]	; (fe0 <system_clock_source_get_hz+0x80>)
     fa2:	681a      	ldr	r2, [r3, #0]
     fa4:	2324      	movs	r3, #36	; 0x24
     fa6:	4013      	ands	r3, r2
     fa8:	2b04      	cmp	r3, #4
     faa:	d001      	beq.n	fb0 <system_clock_source_get_hz+0x50>
			return 48000000UL;
     fac:	480f      	ldr	r0, [pc, #60]	; (fec <system_clock_source_get_hz+0x8c>)
     fae:	e013      	b.n	fd8 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     fb0:	2000      	movs	r0, #0
     fb2:	4b0f      	ldr	r3, [pc, #60]	; (ff0 <system_clock_source_get_hz+0x90>)
     fb4:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     fb6:	4b0a      	ldr	r3, [pc, #40]	; (fe0 <system_clock_source_get_hz+0x80>)
     fb8:	689b      	ldr	r3, [r3, #8]
     fba:	041b      	lsls	r3, r3, #16
     fbc:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     fbe:	4358      	muls	r0, r3
     fc0:	e00a      	b.n	fd8 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     fc2:	2350      	movs	r3, #80	; 0x50
     fc4:	4a07      	ldr	r2, [pc, #28]	; (fe4 <system_clock_source_get_hz+0x84>)
     fc6:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
     fc8:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     fca:	075b      	lsls	r3, r3, #29
     fcc:	d504      	bpl.n	fd8 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
     fce:	4b04      	ldr	r3, [pc, #16]	; (fe0 <system_clock_source_get_hz+0x80>)
     fd0:	68d8      	ldr	r0, [r3, #12]
     fd2:	e001      	b.n	fd8 <system_clock_source_get_hz+0x78>
		return 32768UL;
     fd4:	2080      	movs	r0, #128	; 0x80
     fd6:	0200      	lsls	r0, r0, #8
	}
}
     fd8:	bd10      	pop	{r4, pc}
     fda:	46c0      	nop			; (mov r8, r8)
     fdc:	0000437c 	.word	0x0000437c
     fe0:	2000027c 	.word	0x2000027c
     fe4:	40000800 	.word	0x40000800
     fe8:	007a1200 	.word	0x007a1200
     fec:	02dc6c00 	.word	0x02dc6c00
     ff0:	000015c1 	.word	0x000015c1

00000ff4 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
     ff4:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     ff6:	490c      	ldr	r1, [pc, #48]	; (1028 <system_clock_source_osc8m_set_config+0x34>)
     ff8:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
     ffa:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
     ffc:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
     ffe:	7840      	ldrb	r0, [r0, #1]
    1000:	2201      	movs	r2, #1
    1002:	4010      	ands	r0, r2
    1004:	0180      	lsls	r0, r0, #6
    1006:	2640      	movs	r6, #64	; 0x40
    1008:	43b3      	bics	r3, r6
    100a:	4303      	orrs	r3, r0
    100c:	402a      	ands	r2, r5
    100e:	01d2      	lsls	r2, r2, #7
    1010:	2080      	movs	r0, #128	; 0x80
    1012:	4383      	bics	r3, r0
    1014:	4313      	orrs	r3, r2
    1016:	2203      	movs	r2, #3
    1018:	4022      	ands	r2, r4
    101a:	0212      	lsls	r2, r2, #8
    101c:	4803      	ldr	r0, [pc, #12]	; (102c <system_clock_source_osc8m_set_config+0x38>)
    101e:	4003      	ands	r3, r0
    1020:	4313      	orrs	r3, r2
    1022:	620b      	str	r3, [r1, #32]
}
    1024:	bd70      	pop	{r4, r5, r6, pc}
    1026:	46c0      	nop			; (mov r8, r8)
    1028:	40000800 	.word	0x40000800
    102c:	fffffcff 	.word	0xfffffcff

00001030 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    1030:	b5f0      	push	{r4, r5, r6, r7, lr}
    1032:	46de      	mov	lr, fp
    1034:	4657      	mov	r7, sl
    1036:	464e      	mov	r6, r9
    1038:	4645      	mov	r5, r8
    103a:	b5e0      	push	{r5, r6, r7, lr}
    103c:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    103e:	4b26      	ldr	r3, [pc, #152]	; (10d8 <system_clock_source_xosc32k_set_config+0xa8>)
    1040:	469b      	mov	fp, r3
    1042:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    1044:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    1046:	7800      	ldrb	r0, [r0, #0]
    1048:	4242      	negs	r2, r0
    104a:	4142      	adcs	r2, r0
    104c:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    104e:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    1050:	78ca      	ldrb	r2, [r1, #3]
    1052:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    1054:	790a      	ldrb	r2, [r1, #4]
    1056:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    1058:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    105a:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    105c:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    105e:	688a      	ldr	r2, [r1, #8]
    1060:	491e      	ldr	r1, [pc, #120]	; (10dc <system_clock_source_xosc32k_set_config+0xac>)
    1062:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    1064:	2101      	movs	r1, #1
    1066:	464a      	mov	r2, r9
    1068:	0092      	lsls	r2, r2, #2
    106a:	4691      	mov	r9, r2
    106c:	2204      	movs	r2, #4
    106e:	4393      	bics	r3, r2
    1070:	464a      	mov	r2, r9
    1072:	4313      	orrs	r3, r2
    1074:	4642      	mov	r2, r8
    1076:	400a      	ands	r2, r1
    1078:	00d2      	lsls	r2, r2, #3
    107a:	4690      	mov	r8, r2
    107c:	2208      	movs	r2, #8
    107e:	4393      	bics	r3, r2
    1080:	4642      	mov	r2, r8
    1082:	4313      	orrs	r3, r2
    1084:	4662      	mov	r2, ip
    1086:	400a      	ands	r2, r1
    1088:	0112      	lsls	r2, r2, #4
    108a:	4694      	mov	ip, r2
    108c:	2210      	movs	r2, #16
    108e:	4393      	bics	r3, r2
    1090:	4662      	mov	r2, ip
    1092:	4313      	orrs	r3, r2
    1094:	4008      	ands	r0, r1
    1096:	0140      	lsls	r0, r0, #5
    1098:	2220      	movs	r2, #32
    109a:	4393      	bics	r3, r2
    109c:	4303      	orrs	r3, r0
    109e:	400f      	ands	r7, r1
    10a0:	01bf      	lsls	r7, r7, #6
    10a2:	2040      	movs	r0, #64	; 0x40
    10a4:	4383      	bics	r3, r0
    10a6:	433b      	orrs	r3, r7
    10a8:	400e      	ands	r6, r1
    10aa:	01f6      	lsls	r6, r6, #7
    10ac:	3040      	adds	r0, #64	; 0x40
    10ae:	4383      	bics	r3, r0
    10b0:	4333      	orrs	r3, r6
    10b2:	3879      	subs	r0, #121	; 0x79
    10b4:	4005      	ands	r5, r0
    10b6:	022d      	lsls	r5, r5, #8
    10b8:	4809      	ldr	r0, [pc, #36]	; (10e0 <system_clock_source_xosc32k_set_config+0xb0>)
    10ba:	4003      	ands	r3, r0
    10bc:	432b      	orrs	r3, r5
    10be:	4021      	ands	r1, r4
    10c0:	0309      	lsls	r1, r1, #12
    10c2:	4808      	ldr	r0, [pc, #32]	; (10e4 <system_clock_source_xosc32k_set_config+0xb4>)
    10c4:	4003      	ands	r3, r0
    10c6:	430b      	orrs	r3, r1
    10c8:	465a      	mov	r2, fp
    10ca:	8293      	strh	r3, [r2, #20]
}
    10cc:	bc3c      	pop	{r2, r3, r4, r5}
    10ce:	4690      	mov	r8, r2
    10d0:	4699      	mov	r9, r3
    10d2:	46a2      	mov	sl, r4
    10d4:	46ab      	mov	fp, r5
    10d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    10d8:	40000800 	.word	0x40000800
    10dc:	2000027c 	.word	0x2000027c
    10e0:	fffff8ff 	.word	0xfffff8ff
    10e4:	ffffefff 	.word	0xffffefff

000010e8 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    10e8:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    10ea:	7a03      	ldrb	r3, [r0, #8]
    10ec:	069b      	lsls	r3, r3, #26
    10ee:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    10f0:	8942      	ldrh	r2, [r0, #10]
    10f2:	0592      	lsls	r2, r2, #22
    10f4:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    10f6:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    10f8:	4918      	ldr	r1, [pc, #96]	; (115c <system_clock_source_dfll_set_config+0x74>)
    10fa:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    10fc:	7983      	ldrb	r3, [r0, #6]
    10fe:	79c2      	ldrb	r2, [r0, #7]
    1100:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    1102:	8842      	ldrh	r2, [r0, #2]
    1104:	8884      	ldrh	r4, [r0, #4]
    1106:	4322      	orrs	r2, r4
    1108:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    110a:	7842      	ldrb	r2, [r0, #1]
    110c:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    110e:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    1110:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    1112:	7803      	ldrb	r3, [r0, #0]
    1114:	2b04      	cmp	r3, #4
    1116:	d011      	beq.n	113c <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    1118:	2b20      	cmp	r3, #32
    111a:	d10e      	bne.n	113a <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    111c:	7b03      	ldrb	r3, [r0, #12]
    111e:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1120:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1122:	4313      	orrs	r3, r2
    1124:	89c2      	ldrh	r2, [r0, #14]
    1126:	0412      	lsls	r2, r2, #16
    1128:	490d      	ldr	r1, [pc, #52]	; (1160 <system_clock_source_dfll_set_config+0x78>)
    112a:	400a      	ands	r2, r1
    112c:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    112e:	4a0b      	ldr	r2, [pc, #44]	; (115c <system_clock_source_dfll_set_config+0x74>)
    1130:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    1132:	6811      	ldr	r1, [r2, #0]
    1134:	4b0b      	ldr	r3, [pc, #44]	; (1164 <system_clock_source_dfll_set_config+0x7c>)
    1136:	430b      	orrs	r3, r1
    1138:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    113a:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    113c:	7b03      	ldrb	r3, [r0, #12]
    113e:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1140:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1142:	4313      	orrs	r3, r2
    1144:	89c2      	ldrh	r2, [r0, #14]
    1146:	0412      	lsls	r2, r2, #16
    1148:	4905      	ldr	r1, [pc, #20]	; (1160 <system_clock_source_dfll_set_config+0x78>)
    114a:	400a      	ands	r2, r1
    114c:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    114e:	4a03      	ldr	r2, [pc, #12]	; (115c <system_clock_source_dfll_set_config+0x74>)
    1150:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    1152:	6813      	ldr	r3, [r2, #0]
    1154:	2104      	movs	r1, #4
    1156:	430b      	orrs	r3, r1
    1158:	6013      	str	r3, [r2, #0]
    115a:	e7ee      	b.n	113a <system_clock_source_dfll_set_config+0x52>
    115c:	2000027c 	.word	0x2000027c
    1160:	03ff0000 	.word	0x03ff0000
    1164:	00000424 	.word	0x00000424

00001168 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1168:	2808      	cmp	r0, #8
    116a:	d803      	bhi.n	1174 <system_clock_source_enable+0xc>
    116c:	0080      	lsls	r0, r0, #2
    116e:	4b25      	ldr	r3, [pc, #148]	; (1204 <system_clock_source_enable+0x9c>)
    1170:	581b      	ldr	r3, [r3, r0]
    1172:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1174:	2017      	movs	r0, #23
    1176:	e044      	b.n	1202 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1178:	4a23      	ldr	r2, [pc, #140]	; (1208 <system_clock_source_enable+0xa0>)
    117a:	6a13      	ldr	r3, [r2, #32]
    117c:	2102      	movs	r1, #2
    117e:	430b      	orrs	r3, r1
    1180:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    1182:	2000      	movs	r0, #0
    1184:	e03d      	b.n	1202 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1186:	4a20      	ldr	r2, [pc, #128]	; (1208 <system_clock_source_enable+0xa0>)
    1188:	6993      	ldr	r3, [r2, #24]
    118a:	2102      	movs	r1, #2
    118c:	430b      	orrs	r3, r1
    118e:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    1190:	2000      	movs	r0, #0
		break;
    1192:	e036      	b.n	1202 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1194:	4a1c      	ldr	r2, [pc, #112]	; (1208 <system_clock_source_enable+0xa0>)
    1196:	8a13      	ldrh	r3, [r2, #16]
    1198:	2102      	movs	r1, #2
    119a:	430b      	orrs	r3, r1
    119c:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    119e:	2000      	movs	r0, #0
		break;
    11a0:	e02f      	b.n	1202 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    11a2:	4a19      	ldr	r2, [pc, #100]	; (1208 <system_clock_source_enable+0xa0>)
    11a4:	8a93      	ldrh	r3, [r2, #20]
    11a6:	2102      	movs	r1, #2
    11a8:	430b      	orrs	r3, r1
    11aa:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    11ac:	2000      	movs	r0, #0
		break;
    11ae:	e028      	b.n	1202 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    11b0:	4916      	ldr	r1, [pc, #88]	; (120c <system_clock_source_enable+0xa4>)
    11b2:	680b      	ldr	r3, [r1, #0]
    11b4:	2202      	movs	r2, #2
    11b6:	4313      	orrs	r3, r2
    11b8:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    11ba:	4b13      	ldr	r3, [pc, #76]	; (1208 <system_clock_source_enable+0xa0>)
    11bc:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    11be:	0019      	movs	r1, r3
    11c0:	320e      	adds	r2, #14
    11c2:	68cb      	ldr	r3, [r1, #12]
    11c4:	421a      	tst	r2, r3
    11c6:	d0fc      	beq.n	11c2 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    11c8:	4a10      	ldr	r2, [pc, #64]	; (120c <system_clock_source_enable+0xa4>)
    11ca:	6891      	ldr	r1, [r2, #8]
    11cc:	4b0e      	ldr	r3, [pc, #56]	; (1208 <system_clock_source_enable+0xa0>)
    11ce:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    11d0:	6852      	ldr	r2, [r2, #4]
    11d2:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    11d4:	2200      	movs	r2, #0
    11d6:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    11d8:	0019      	movs	r1, r3
    11da:	3210      	adds	r2, #16
    11dc:	68cb      	ldr	r3, [r1, #12]
    11de:	421a      	tst	r2, r3
    11e0:	d0fc      	beq.n	11dc <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    11e2:	4b0a      	ldr	r3, [pc, #40]	; (120c <system_clock_source_enable+0xa4>)
    11e4:	681b      	ldr	r3, [r3, #0]
    11e6:	b29b      	uxth	r3, r3
    11e8:	4a07      	ldr	r2, [pc, #28]	; (1208 <system_clock_source_enable+0xa0>)
    11ea:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    11ec:	2000      	movs	r0, #0
    11ee:	e008      	b.n	1202 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    11f0:	4905      	ldr	r1, [pc, #20]	; (1208 <system_clock_source_enable+0xa0>)
    11f2:	2244      	movs	r2, #68	; 0x44
    11f4:	5c8b      	ldrb	r3, [r1, r2]
    11f6:	2002      	movs	r0, #2
    11f8:	4303      	orrs	r3, r0
    11fa:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    11fc:	2000      	movs	r0, #0
		break;
    11fe:	e000      	b.n	1202 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    1200:	2000      	movs	r0, #0
}
    1202:	4770      	bx	lr
    1204:	000043a0 	.word	0x000043a0
    1208:	40000800 	.word	0x40000800
    120c:	2000027c 	.word	0x2000027c

00001210 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1210:	b5f0      	push	{r4, r5, r6, r7, lr}
    1212:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1214:	22c2      	movs	r2, #194	; 0xc2
    1216:	00d2      	lsls	r2, r2, #3
    1218:	4b47      	ldr	r3, [pc, #284]	; (1338 <system_clock_init+0x128>)
    121a:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    121c:	4947      	ldr	r1, [pc, #284]	; (133c <system_clock_init+0x12c>)
    121e:	684b      	ldr	r3, [r1, #4]
    1220:	221e      	movs	r2, #30
    1222:	4393      	bics	r3, r2
    1224:	3a1c      	subs	r2, #28
    1226:	4313      	orrs	r3, r2
    1228:	604b      	str	r3, [r1, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    122a:	ab01      	add	r3, sp, #4
    122c:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    122e:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1230:	4d43      	ldr	r5, [pc, #268]	; (1340 <system_clock_init+0x130>)
    1232:	b2e0      	uxtb	r0, r4
    1234:	a901      	add	r1, sp, #4
    1236:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1238:	3401      	adds	r4, #1
    123a:	2c25      	cmp	r4, #37	; 0x25
    123c:	d1f9      	bne.n	1232 <system_clock_init+0x22>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    123e:	a80a      	add	r0, sp, #40	; 0x28
    1240:	2300      	movs	r3, #0
    1242:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    1244:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    1246:	2280      	movs	r2, #128	; 0x80
    1248:	0212      	lsls	r2, r2, #8
    124a:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    124c:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    124e:	2201      	movs	r2, #1
    1250:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    1252:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    1254:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    1256:	3205      	adds	r2, #5
    1258:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    125a:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    125c:	4b39      	ldr	r3, [pc, #228]	; (1344 <system_clock_init+0x134>)
    125e:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    1260:	2005      	movs	r0, #5
    1262:	4b39      	ldr	r3, [pc, #228]	; (1348 <system_clock_init+0x138>)
    1264:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1266:	4934      	ldr	r1, [pc, #208]	; (1338 <system_clock_init+0x128>)
    1268:	2202      	movs	r2, #2
    126a:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    126c:	421a      	tst	r2, r3
    126e:	d0fc      	beq.n	126a <system_clock_init+0x5a>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    1270:	4a31      	ldr	r2, [pc, #196]	; (1338 <system_clock_init+0x128>)
    1272:	8a93      	ldrh	r3, [r2, #20]
    1274:	2180      	movs	r1, #128	; 0x80
    1276:	430b      	orrs	r3, r1
    1278:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    127a:	ab05      	add	r3, sp, #20
    127c:	2100      	movs	r1, #0
    127e:	2200      	movs	r2, #0
    1280:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    1282:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    1284:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    1286:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    1288:	313f      	adds	r1, #63	; 0x3f
    128a:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    128c:	393b      	subs	r1, #59	; 0x3b
    128e:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    1290:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    1292:	4b2e      	ldr	r3, [pc, #184]	; (134c <system_clock_init+0x13c>)
    1294:	681b      	ldr	r3, [r3, #0]
    1296:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    1298:	2b3f      	cmp	r3, #63	; 0x3f
    129a:	d04b      	beq.n	1334 <system_clock_init+0x124>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    129c:	a805      	add	r0, sp, #20
    129e:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    12a0:	23b7      	movs	r3, #183	; 0xb7
    12a2:	00db      	lsls	r3, r3, #3
    12a4:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    12a6:	2307      	movs	r3, #7
    12a8:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    12aa:	3338      	adds	r3, #56	; 0x38
    12ac:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    12ae:	4b28      	ldr	r3, [pc, #160]	; (1350 <system_clock_init+0x140>)
    12b0:	4798      	blx	r3
	config->run_in_standby  = false;
    12b2:	a804      	add	r0, sp, #16
    12b4:	2500      	movs	r5, #0
    12b6:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    12b8:	2601      	movs	r6, #1
    12ba:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    12bc:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    12be:	4b25      	ldr	r3, [pc, #148]	; (1354 <system_clock_init+0x144>)
    12c0:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    12c2:	2006      	movs	r0, #6
    12c4:	4f20      	ldr	r7, [pc, #128]	; (1348 <system_clock_init+0x138>)
    12c6:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    12c8:	4b23      	ldr	r3, [pc, #140]	; (1358 <system_clock_init+0x148>)
    12ca:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    12cc:	ac01      	add	r4, sp, #4
    12ce:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    12d0:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    12d2:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    12d4:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    12d6:	2305      	movs	r3, #5
    12d8:	7023      	strb	r3, [r4, #0]
    12da:	0021      	movs	r1, r4
    12dc:	2001      	movs	r0, #1
    12de:	4b1f      	ldr	r3, [pc, #124]	; (135c <system_clock_init+0x14c>)
    12e0:	4798      	blx	r3
    12e2:	2001      	movs	r0, #1
    12e4:	4b1e      	ldr	r3, [pc, #120]	; (1360 <system_clock_init+0x150>)
    12e6:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    12e8:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    12ea:	0021      	movs	r1, r4
    12ec:	2000      	movs	r0, #0
    12ee:	4b14      	ldr	r3, [pc, #80]	; (1340 <system_clock_init+0x130>)
    12f0:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    12f2:	2000      	movs	r0, #0
    12f4:	4b1b      	ldr	r3, [pc, #108]	; (1364 <system_clock_init+0x154>)
    12f6:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    12f8:	2007      	movs	r0, #7
    12fa:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    12fc:	490e      	ldr	r1, [pc, #56]	; (1338 <system_clock_init+0x128>)
    12fe:	22d0      	movs	r2, #208	; 0xd0
    1300:	68cb      	ldr	r3, [r1, #12]
    1302:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    1304:	2bd0      	cmp	r3, #208	; 0xd0
    1306:	d1fb      	bne.n	1300 <system_clock_init+0xf0>
	PM->CPUSEL.reg = (uint32_t)divider;
    1308:	4a17      	ldr	r2, [pc, #92]	; (1368 <system_clock_init+0x158>)
    130a:	2300      	movs	r3, #0
    130c:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    130e:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    1310:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    1312:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    1314:	a901      	add	r1, sp, #4
    1316:	2201      	movs	r2, #1
    1318:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    131a:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    131c:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    131e:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1320:	3307      	adds	r3, #7
    1322:	700b      	strb	r3, [r1, #0]
    1324:	2000      	movs	r0, #0
    1326:	4b0d      	ldr	r3, [pc, #52]	; (135c <system_clock_init+0x14c>)
    1328:	4798      	blx	r3
    132a:	2000      	movs	r0, #0
    132c:	4b0c      	ldr	r3, [pc, #48]	; (1360 <system_clock_init+0x150>)
    132e:	4798      	blx	r3
#endif
}
    1330:	b00f      	add	sp, #60	; 0x3c
    1332:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    1334:	3b20      	subs	r3, #32
    1336:	e7b1      	b.n	129c <system_clock_init+0x8c>
    1338:	40000800 	.word	0x40000800
    133c:	41004000 	.word	0x41004000
    1340:	000015a5 	.word	0x000015a5
    1344:	00001031 	.word	0x00001031
    1348:	00001169 	.word	0x00001169
    134c:	00806024 	.word	0x00806024
    1350:	000010e9 	.word	0x000010e9
    1354:	00000ff5 	.word	0x00000ff5
    1358:	0000136d 	.word	0x0000136d
    135c:	00001391 	.word	0x00001391
    1360:	00001449 	.word	0x00001449
    1364:	00001519 	.word	0x00001519
    1368:	40000400 	.word	0x40000400

0000136c <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    136c:	4a06      	ldr	r2, [pc, #24]	; (1388 <system_gclk_init+0x1c>)
    136e:	6993      	ldr	r3, [r2, #24]
    1370:	2108      	movs	r1, #8
    1372:	430b      	orrs	r3, r1
    1374:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1376:	2201      	movs	r2, #1
    1378:	4b04      	ldr	r3, [pc, #16]	; (138c <system_gclk_init+0x20>)
    137a:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    137c:	0019      	movs	r1, r3
    137e:	780b      	ldrb	r3, [r1, #0]
    1380:	4213      	tst	r3, r2
    1382:	d1fc      	bne.n	137e <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1384:	4770      	bx	lr
    1386:	46c0      	nop			; (mov r8, r8)
    1388:	40000400 	.word	0x40000400
    138c:	40000c00 	.word	0x40000c00

00001390 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1390:	b570      	push	{r4, r5, r6, lr}
    1392:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1394:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1396:	780d      	ldrb	r5, [r1, #0]
    1398:	022d      	lsls	r5, r5, #8
    139a:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    139c:	784b      	ldrb	r3, [r1, #1]
    139e:	2b00      	cmp	r3, #0
    13a0:	d002      	beq.n	13a8 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    13a2:	2380      	movs	r3, #128	; 0x80
    13a4:	02db      	lsls	r3, r3, #11
    13a6:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    13a8:	7a4b      	ldrb	r3, [r1, #9]
    13aa:	2b00      	cmp	r3, #0
    13ac:	d002      	beq.n	13b4 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    13ae:	2380      	movs	r3, #128	; 0x80
    13b0:	031b      	lsls	r3, r3, #12
    13b2:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    13b4:	6848      	ldr	r0, [r1, #4]
    13b6:	2801      	cmp	r0, #1
    13b8:	d910      	bls.n	13dc <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    13ba:	1e43      	subs	r3, r0, #1
    13bc:	4218      	tst	r0, r3
    13be:	d134      	bne.n	142a <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    13c0:	2802      	cmp	r0, #2
    13c2:	d930      	bls.n	1426 <system_gclk_gen_set_config+0x96>
    13c4:	2302      	movs	r3, #2
    13c6:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    13c8:	3201      	adds	r2, #1
						mask <<= 1) {
    13ca:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    13cc:	4298      	cmp	r0, r3
    13ce:	d8fb      	bhi.n	13c8 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    13d0:	0212      	lsls	r2, r2, #8
    13d2:	4332      	orrs	r2, r6
    13d4:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    13d6:	2380      	movs	r3, #128	; 0x80
    13d8:	035b      	lsls	r3, r3, #13
    13da:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    13dc:	7a0b      	ldrb	r3, [r1, #8]
    13de:	2b00      	cmp	r3, #0
    13e0:	d002      	beq.n	13e8 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    13e2:	2380      	movs	r3, #128	; 0x80
    13e4:	039b      	lsls	r3, r3, #14
    13e6:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    13e8:	4a13      	ldr	r2, [pc, #76]	; (1438 <system_gclk_gen_set_config+0xa8>)
    13ea:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    13ec:	b25b      	sxtb	r3, r3
    13ee:	2b00      	cmp	r3, #0
    13f0:	dbfb      	blt.n	13ea <system_gclk_gen_set_config+0x5a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    13f2:	4b12      	ldr	r3, [pc, #72]	; (143c <system_gclk_gen_set_config+0xac>)
    13f4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    13f6:	4b12      	ldr	r3, [pc, #72]	; (1440 <system_gclk_gen_set_config+0xb0>)
    13f8:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    13fa:	4a0f      	ldr	r2, [pc, #60]	; (1438 <system_gclk_gen_set_config+0xa8>)
    13fc:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    13fe:	b25b      	sxtb	r3, r3
    1400:	2b00      	cmp	r3, #0
    1402:	dbfb      	blt.n	13fc <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1404:	4b0c      	ldr	r3, [pc, #48]	; (1438 <system_gclk_gen_set_config+0xa8>)
    1406:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1408:	001a      	movs	r2, r3
    140a:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    140c:	b25b      	sxtb	r3, r3
    140e:	2b00      	cmp	r3, #0
    1410:	dbfb      	blt.n	140a <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1412:	4a09      	ldr	r2, [pc, #36]	; (1438 <system_gclk_gen_set_config+0xa8>)
    1414:	6853      	ldr	r3, [r2, #4]
    1416:	2180      	movs	r1, #128	; 0x80
    1418:	0249      	lsls	r1, r1, #9
    141a:	400b      	ands	r3, r1
    141c:	431d      	orrs	r5, r3
    141e:	6055      	str	r5, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1420:	4b08      	ldr	r3, [pc, #32]	; (1444 <system_gclk_gen_set_config+0xb4>)
    1422:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1424:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    1426:	2200      	movs	r2, #0
    1428:	e7d2      	b.n	13d0 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    142a:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    142c:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    142e:	2380      	movs	r3, #128	; 0x80
    1430:	029b      	lsls	r3, r3, #10
    1432:	431d      	orrs	r5, r3
    1434:	e7d2      	b.n	13dc <system_gclk_gen_set_config+0x4c>
    1436:	46c0      	nop			; (mov r8, r8)
    1438:	40000c00 	.word	0x40000c00
    143c:	0000042d 	.word	0x0000042d
    1440:	40000c08 	.word	0x40000c08
    1444:	0000046d 	.word	0x0000046d

00001448 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1448:	b510      	push	{r4, lr}
    144a:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    144c:	4a0b      	ldr	r2, [pc, #44]	; (147c <system_gclk_gen_enable+0x34>)
    144e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1450:	b25b      	sxtb	r3, r3
    1452:	2b00      	cmp	r3, #0
    1454:	dbfb      	blt.n	144e <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    1456:	4b0a      	ldr	r3, [pc, #40]	; (1480 <system_gclk_gen_enable+0x38>)
    1458:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    145a:	4b0a      	ldr	r3, [pc, #40]	; (1484 <system_gclk_gen_enable+0x3c>)
    145c:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    145e:	4a07      	ldr	r2, [pc, #28]	; (147c <system_gclk_gen_enable+0x34>)
    1460:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1462:	b25b      	sxtb	r3, r3
    1464:	2b00      	cmp	r3, #0
    1466:	dbfb      	blt.n	1460 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1468:	4a04      	ldr	r2, [pc, #16]	; (147c <system_gclk_gen_enable+0x34>)
    146a:	6851      	ldr	r1, [r2, #4]
    146c:	2380      	movs	r3, #128	; 0x80
    146e:	025b      	lsls	r3, r3, #9
    1470:	430b      	orrs	r3, r1
    1472:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    1474:	4b04      	ldr	r3, [pc, #16]	; (1488 <system_gclk_gen_enable+0x40>)
    1476:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1478:	bd10      	pop	{r4, pc}
    147a:	46c0      	nop			; (mov r8, r8)
    147c:	40000c00 	.word	0x40000c00
    1480:	0000042d 	.word	0x0000042d
    1484:	40000c04 	.word	0x40000c04
    1488:	0000046d 	.word	0x0000046d

0000148c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    148c:	b570      	push	{r4, r5, r6, lr}
    148e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1490:	4a1a      	ldr	r2, [pc, #104]	; (14fc <system_gclk_gen_get_hz+0x70>)
    1492:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1494:	b25b      	sxtb	r3, r3
    1496:	2b00      	cmp	r3, #0
    1498:	dbfb      	blt.n	1492 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    149a:	4b19      	ldr	r3, [pc, #100]	; (1500 <system_gclk_gen_get_hz+0x74>)
    149c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    149e:	4b19      	ldr	r3, [pc, #100]	; (1504 <system_gclk_gen_get_hz+0x78>)
    14a0:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    14a2:	4a16      	ldr	r2, [pc, #88]	; (14fc <system_gclk_gen_get_hz+0x70>)
    14a4:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    14a6:	b25b      	sxtb	r3, r3
    14a8:	2b00      	cmp	r3, #0
    14aa:	dbfb      	blt.n	14a4 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    14ac:	4e13      	ldr	r6, [pc, #76]	; (14fc <system_gclk_gen_get_hz+0x70>)
    14ae:	6870      	ldr	r0, [r6, #4]
    14b0:	04c0      	lsls	r0, r0, #19
    14b2:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    14b4:	4b14      	ldr	r3, [pc, #80]	; (1508 <system_gclk_gen_get_hz+0x7c>)
    14b6:	4798      	blx	r3
    14b8:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    14ba:	4b12      	ldr	r3, [pc, #72]	; (1504 <system_gclk_gen_get_hz+0x78>)
    14bc:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    14be:	6876      	ldr	r6, [r6, #4]
    14c0:	02f6      	lsls	r6, r6, #11
    14c2:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    14c4:	4b11      	ldr	r3, [pc, #68]	; (150c <system_gclk_gen_get_hz+0x80>)
    14c6:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    14c8:	4a0c      	ldr	r2, [pc, #48]	; (14fc <system_gclk_gen_get_hz+0x70>)
    14ca:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    14cc:	b25b      	sxtb	r3, r3
    14ce:	2b00      	cmp	r3, #0
    14d0:	dbfb      	blt.n	14ca <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    14d2:	4b0a      	ldr	r3, [pc, #40]	; (14fc <system_gclk_gen_get_hz+0x70>)
    14d4:	689c      	ldr	r4, [r3, #8]
    14d6:	0224      	lsls	r4, r4, #8
    14d8:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    14da:	4b0d      	ldr	r3, [pc, #52]	; (1510 <system_gclk_gen_get_hz+0x84>)
    14dc:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    14de:	2e00      	cmp	r6, #0
    14e0:	d107      	bne.n	14f2 <system_gclk_gen_get_hz+0x66>
    14e2:	2c01      	cmp	r4, #1
    14e4:	d907      	bls.n	14f6 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    14e6:	0021      	movs	r1, r4
    14e8:	0028      	movs	r0, r5
    14ea:	4b0a      	ldr	r3, [pc, #40]	; (1514 <system_gclk_gen_get_hz+0x88>)
    14ec:	4798      	blx	r3
    14ee:	0005      	movs	r5, r0
    14f0:	e001      	b.n	14f6 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    14f2:	3401      	adds	r4, #1
    14f4:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    14f6:	0028      	movs	r0, r5
    14f8:	bd70      	pop	{r4, r5, r6, pc}
    14fa:	46c0      	nop			; (mov r8, r8)
    14fc:	40000c00 	.word	0x40000c00
    1500:	0000042d 	.word	0x0000042d
    1504:	40000c04 	.word	0x40000c04
    1508:	00000f61 	.word	0x00000f61
    150c:	40000c08 	.word	0x40000c08
    1510:	0000046d 	.word	0x0000046d
    1514:	00002c15 	.word	0x00002c15

00001518 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1518:	b510      	push	{r4, lr}
    151a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    151c:	4b06      	ldr	r3, [pc, #24]	; (1538 <system_gclk_chan_enable+0x20>)
    151e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1520:	4b06      	ldr	r3, [pc, #24]	; (153c <system_gclk_chan_enable+0x24>)
    1522:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1524:	4a06      	ldr	r2, [pc, #24]	; (1540 <system_gclk_chan_enable+0x28>)
    1526:	8853      	ldrh	r3, [r2, #2]
    1528:	2180      	movs	r1, #128	; 0x80
    152a:	01c9      	lsls	r1, r1, #7
    152c:	430b      	orrs	r3, r1
    152e:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1530:	4b04      	ldr	r3, [pc, #16]	; (1544 <system_gclk_chan_enable+0x2c>)
    1532:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1534:	bd10      	pop	{r4, pc}
    1536:	46c0      	nop			; (mov r8, r8)
    1538:	0000042d 	.word	0x0000042d
    153c:	40000c02 	.word	0x40000c02
    1540:	40000c00 	.word	0x40000c00
    1544:	0000046d 	.word	0x0000046d

00001548 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1548:	b510      	push	{r4, lr}
    154a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    154c:	4b0f      	ldr	r3, [pc, #60]	; (158c <system_gclk_chan_disable+0x44>)
    154e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1550:	4b0f      	ldr	r3, [pc, #60]	; (1590 <system_gclk_chan_disable+0x48>)
    1552:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1554:	4a0f      	ldr	r2, [pc, #60]	; (1594 <system_gclk_chan_disable+0x4c>)
    1556:	8853      	ldrh	r3, [r2, #2]
    1558:	051b      	lsls	r3, r3, #20
    155a:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    155c:	8853      	ldrh	r3, [r2, #2]
    155e:	490e      	ldr	r1, [pc, #56]	; (1598 <system_gclk_chan_disable+0x50>)
    1560:	400b      	ands	r3, r1
    1562:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1564:	8853      	ldrh	r3, [r2, #2]
    1566:	490d      	ldr	r1, [pc, #52]	; (159c <system_gclk_chan_disable+0x54>)
    1568:	400b      	ands	r3, r1
    156a:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    156c:	0011      	movs	r1, r2
    156e:	2280      	movs	r2, #128	; 0x80
    1570:	01d2      	lsls	r2, r2, #7
    1572:	884b      	ldrh	r3, [r1, #2]
    1574:	4213      	tst	r3, r2
    1576:	d1fc      	bne.n	1572 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1578:	4906      	ldr	r1, [pc, #24]	; (1594 <system_gclk_chan_disable+0x4c>)
    157a:	884a      	ldrh	r2, [r1, #2]
    157c:	0203      	lsls	r3, r0, #8
    157e:	4806      	ldr	r0, [pc, #24]	; (1598 <system_gclk_chan_disable+0x50>)
    1580:	4002      	ands	r2, r0
    1582:	4313      	orrs	r3, r2
    1584:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    1586:	4b06      	ldr	r3, [pc, #24]	; (15a0 <system_gclk_chan_disable+0x58>)
    1588:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    158a:	bd10      	pop	{r4, pc}
    158c:	0000042d 	.word	0x0000042d
    1590:	40000c02 	.word	0x40000c02
    1594:	40000c00 	.word	0x40000c00
    1598:	fffff0ff 	.word	0xfffff0ff
    159c:	ffffbfff 	.word	0xffffbfff
    15a0:	0000046d 	.word	0x0000046d

000015a4 <system_gclk_chan_set_config>:
{
    15a4:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    15a6:	780c      	ldrb	r4, [r1, #0]
    15a8:	0224      	lsls	r4, r4, #8
    15aa:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    15ac:	4b02      	ldr	r3, [pc, #8]	; (15b8 <system_gclk_chan_set_config+0x14>)
    15ae:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    15b0:	b2a4      	uxth	r4, r4
    15b2:	4b02      	ldr	r3, [pc, #8]	; (15bc <system_gclk_chan_set_config+0x18>)
    15b4:	805c      	strh	r4, [r3, #2]
}
    15b6:	bd10      	pop	{r4, pc}
    15b8:	00001549 	.word	0x00001549
    15bc:	40000c00 	.word	0x40000c00

000015c0 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    15c0:	b510      	push	{r4, lr}
    15c2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    15c4:	4b06      	ldr	r3, [pc, #24]	; (15e0 <system_gclk_chan_get_hz+0x20>)
    15c6:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    15c8:	4b06      	ldr	r3, [pc, #24]	; (15e4 <system_gclk_chan_get_hz+0x24>)
    15ca:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    15cc:	4b06      	ldr	r3, [pc, #24]	; (15e8 <system_gclk_chan_get_hz+0x28>)
    15ce:	885c      	ldrh	r4, [r3, #2]
    15d0:	0524      	lsls	r4, r4, #20
    15d2:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    15d4:	4b05      	ldr	r3, [pc, #20]	; (15ec <system_gclk_chan_get_hz+0x2c>)
    15d6:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    15d8:	0020      	movs	r0, r4
    15da:	4b05      	ldr	r3, [pc, #20]	; (15f0 <system_gclk_chan_get_hz+0x30>)
    15dc:	4798      	blx	r3
}
    15de:	bd10      	pop	{r4, pc}
    15e0:	0000042d 	.word	0x0000042d
    15e4:	40000c02 	.word	0x40000c02
    15e8:	40000c00 	.word	0x40000c00
    15ec:	0000046d 	.word	0x0000046d
    15f0:	0000148d 	.word	0x0000148d

000015f4 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    15f4:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    15f6:	78d3      	ldrb	r3, [r2, #3]
    15f8:	2b00      	cmp	r3, #0
    15fa:	d135      	bne.n	1668 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    15fc:	7813      	ldrb	r3, [r2, #0]
    15fe:	2b80      	cmp	r3, #128	; 0x80
    1600:	d029      	beq.n	1656 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1602:	061b      	lsls	r3, r3, #24
    1604:	2480      	movs	r4, #128	; 0x80
    1606:	0264      	lsls	r4, r4, #9
    1608:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    160a:	7854      	ldrb	r4, [r2, #1]
    160c:	2502      	movs	r5, #2
    160e:	43ac      	bics	r4, r5
    1610:	d106      	bne.n	1620 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1612:	7894      	ldrb	r4, [r2, #2]
    1614:	2c00      	cmp	r4, #0
    1616:	d120      	bne.n	165a <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    1618:	2480      	movs	r4, #128	; 0x80
    161a:	02a4      	lsls	r4, r4, #10
    161c:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    161e:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1620:	7854      	ldrb	r4, [r2, #1]
    1622:	3c01      	subs	r4, #1
    1624:	2c01      	cmp	r4, #1
    1626:	d91c      	bls.n	1662 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1628:	040d      	lsls	r5, r1, #16
    162a:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    162c:	24a0      	movs	r4, #160	; 0xa0
    162e:	05e4      	lsls	r4, r4, #23
    1630:	432c      	orrs	r4, r5
    1632:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1634:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1636:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1638:	24d0      	movs	r4, #208	; 0xd0
    163a:	0624      	lsls	r4, r4, #24
    163c:	432c      	orrs	r4, r5
    163e:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1640:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1642:	78d4      	ldrb	r4, [r2, #3]
    1644:	2c00      	cmp	r4, #0
    1646:	d122      	bne.n	168e <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1648:	035b      	lsls	r3, r3, #13
    164a:	d51c      	bpl.n	1686 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    164c:	7893      	ldrb	r3, [r2, #2]
    164e:	2b01      	cmp	r3, #1
    1650:	d01e      	beq.n	1690 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    1652:	6141      	str	r1, [r0, #20]
    1654:	e017      	b.n	1686 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    1656:	2300      	movs	r3, #0
    1658:	e7d7      	b.n	160a <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    165a:	24c0      	movs	r4, #192	; 0xc0
    165c:	02e4      	lsls	r4, r4, #11
    165e:	4323      	orrs	r3, r4
    1660:	e7dd      	b.n	161e <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1662:	4c0d      	ldr	r4, [pc, #52]	; (1698 <_system_pinmux_config+0xa4>)
    1664:	4023      	ands	r3, r4
    1666:	e7df      	b.n	1628 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    1668:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    166a:	040c      	lsls	r4, r1, #16
    166c:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    166e:	23a0      	movs	r3, #160	; 0xa0
    1670:	05db      	lsls	r3, r3, #23
    1672:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1674:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1676:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1678:	23d0      	movs	r3, #208	; 0xd0
    167a:	061b      	lsls	r3, r3, #24
    167c:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    167e:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    1680:	78d3      	ldrb	r3, [r2, #3]
    1682:	2b00      	cmp	r3, #0
    1684:	d103      	bne.n	168e <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1686:	7853      	ldrb	r3, [r2, #1]
    1688:	3b01      	subs	r3, #1
    168a:	2b01      	cmp	r3, #1
    168c:	d902      	bls.n	1694 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    168e:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    1690:	6181      	str	r1, [r0, #24]
    1692:	e7f8      	b.n	1686 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    1694:	6081      	str	r1, [r0, #8]
}
    1696:	e7fa      	b.n	168e <_system_pinmux_config+0x9a>
    1698:	fffbffff 	.word	0xfffbffff

0000169c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    169c:	b510      	push	{r4, lr}
    169e:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    16a0:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    16a2:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    16a4:	2900      	cmp	r1, #0
    16a6:	d104      	bne.n	16b2 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    16a8:	0943      	lsrs	r3, r0, #5
    16aa:	01db      	lsls	r3, r3, #7
    16ac:	4905      	ldr	r1, [pc, #20]	; (16c4 <system_pinmux_pin_set_config+0x28>)
    16ae:	468c      	mov	ip, r1
    16b0:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    16b2:	241f      	movs	r4, #31
    16b4:	4020      	ands	r0, r4
    16b6:	2101      	movs	r1, #1
    16b8:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    16ba:	0018      	movs	r0, r3
    16bc:	4b02      	ldr	r3, [pc, #8]	; (16c8 <system_pinmux_pin_set_config+0x2c>)
    16be:	4798      	blx	r3
}
    16c0:	bd10      	pop	{r4, pc}
    16c2:	46c0      	nop			; (mov r8, r8)
    16c4:	41004400 	.word	0x41004400
    16c8:	000015f5 	.word	0x000015f5

000016cc <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    16cc:	4770      	bx	lr
	...

000016d0 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    16d0:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    16d2:	4b05      	ldr	r3, [pc, #20]	; (16e8 <system_init+0x18>)
    16d4:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    16d6:	4b05      	ldr	r3, [pc, #20]	; (16ec <system_init+0x1c>)
    16d8:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    16da:	4b05      	ldr	r3, [pc, #20]	; (16f0 <system_init+0x20>)
    16dc:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    16de:	4b05      	ldr	r3, [pc, #20]	; (16f4 <system_init+0x24>)
    16e0:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    16e2:	4b05      	ldr	r3, [pc, #20]	; (16f8 <system_init+0x28>)
    16e4:	4798      	blx	r3
}
    16e6:	bd10      	pop	{r4, pc}
    16e8:	00001211 	.word	0x00001211
    16ec:	0000049d 	.word	0x0000049d
    16f0:	000016cd 	.word	0x000016cd
    16f4:	000016cd 	.word	0x000016cd
    16f8:	000016cd 	.word	0x000016cd

000016fc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    16fc:	e7fe      	b.n	16fc <Dummy_Handler>
	...

00001700 <Reset_Handler>:
{
    1700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    1702:	4a2a      	ldr	r2, [pc, #168]	; (17ac <Reset_Handler+0xac>)
    1704:	4b2a      	ldr	r3, [pc, #168]	; (17b0 <Reset_Handler+0xb0>)
    1706:	429a      	cmp	r2, r3
    1708:	d011      	beq.n	172e <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    170a:	001a      	movs	r2, r3
    170c:	4b29      	ldr	r3, [pc, #164]	; (17b4 <Reset_Handler+0xb4>)
    170e:	429a      	cmp	r2, r3
    1710:	d20d      	bcs.n	172e <Reset_Handler+0x2e>
    1712:	4a29      	ldr	r2, [pc, #164]	; (17b8 <Reset_Handler+0xb8>)
    1714:	3303      	adds	r3, #3
    1716:	1a9b      	subs	r3, r3, r2
    1718:	089b      	lsrs	r3, r3, #2
    171a:	3301      	adds	r3, #1
    171c:	009b      	lsls	r3, r3, #2
    171e:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1720:	4823      	ldr	r0, [pc, #140]	; (17b0 <Reset_Handler+0xb0>)
    1722:	4922      	ldr	r1, [pc, #136]	; (17ac <Reset_Handler+0xac>)
    1724:	588c      	ldr	r4, [r1, r2]
    1726:	5084      	str	r4, [r0, r2]
    1728:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    172a:	429a      	cmp	r2, r3
    172c:	d1fa      	bne.n	1724 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    172e:	4a23      	ldr	r2, [pc, #140]	; (17bc <Reset_Handler+0xbc>)
    1730:	4b23      	ldr	r3, [pc, #140]	; (17c0 <Reset_Handler+0xc0>)
    1732:	429a      	cmp	r2, r3
    1734:	d20a      	bcs.n	174c <Reset_Handler+0x4c>
    1736:	43d3      	mvns	r3, r2
    1738:	4921      	ldr	r1, [pc, #132]	; (17c0 <Reset_Handler+0xc0>)
    173a:	185b      	adds	r3, r3, r1
    173c:	2103      	movs	r1, #3
    173e:	438b      	bics	r3, r1
    1740:	3304      	adds	r3, #4
    1742:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    1744:	2100      	movs	r1, #0
    1746:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    1748:	4293      	cmp	r3, r2
    174a:	d1fc      	bne.n	1746 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    174c:	4a1d      	ldr	r2, [pc, #116]	; (17c4 <Reset_Handler+0xc4>)
    174e:	21ff      	movs	r1, #255	; 0xff
    1750:	4b1d      	ldr	r3, [pc, #116]	; (17c8 <Reset_Handler+0xc8>)
    1752:	438b      	bics	r3, r1
    1754:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1756:	39fd      	subs	r1, #253	; 0xfd
    1758:	2390      	movs	r3, #144	; 0x90
    175a:	005b      	lsls	r3, r3, #1
    175c:	4a1b      	ldr	r2, [pc, #108]	; (17cc <Reset_Handler+0xcc>)
    175e:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1760:	4a1b      	ldr	r2, [pc, #108]	; (17d0 <Reset_Handler+0xd0>)
    1762:	78d3      	ldrb	r3, [r2, #3]
    1764:	2503      	movs	r5, #3
    1766:	43ab      	bics	r3, r5
    1768:	2402      	movs	r4, #2
    176a:	4323      	orrs	r3, r4
    176c:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    176e:	78d3      	ldrb	r3, [r2, #3]
    1770:	270c      	movs	r7, #12
    1772:	43bb      	bics	r3, r7
    1774:	2608      	movs	r6, #8
    1776:	4333      	orrs	r3, r6
    1778:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    177a:	4b16      	ldr	r3, [pc, #88]	; (17d4 <Reset_Handler+0xd4>)
    177c:	7b98      	ldrb	r0, [r3, #14]
    177e:	2230      	movs	r2, #48	; 0x30
    1780:	4390      	bics	r0, r2
    1782:	2220      	movs	r2, #32
    1784:	4310      	orrs	r0, r2
    1786:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1788:	7b99      	ldrb	r1, [r3, #14]
    178a:	43b9      	bics	r1, r7
    178c:	4331      	orrs	r1, r6
    178e:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1790:	7b9a      	ldrb	r2, [r3, #14]
    1792:	43aa      	bics	r2, r5
    1794:	4322      	orrs	r2, r4
    1796:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    1798:	4a0f      	ldr	r2, [pc, #60]	; (17d8 <Reset_Handler+0xd8>)
    179a:	6853      	ldr	r3, [r2, #4]
    179c:	2180      	movs	r1, #128	; 0x80
    179e:	430b      	orrs	r3, r1
    17a0:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    17a2:	4b0e      	ldr	r3, [pc, #56]	; (17dc <Reset_Handler+0xdc>)
    17a4:	4798      	blx	r3
        main();
    17a6:	4b0e      	ldr	r3, [pc, #56]	; (17e0 <Reset_Handler+0xe0>)
    17a8:	4798      	blx	r3
    17aa:	e7fe      	b.n	17aa <Reset_Handler+0xaa>
    17ac:	00005ff0 	.word	0x00005ff0
    17b0:	20000000 	.word	0x20000000
    17b4:	200001bc 	.word	0x200001bc
    17b8:	20000004 	.word	0x20000004
    17bc:	200001bc 	.word	0x200001bc
    17c0:	2000042c 	.word	0x2000042c
    17c4:	e000ed00 	.word	0xe000ed00
    17c8:	00000000 	.word	0x00000000
    17cc:	41007000 	.word	0x41007000
    17d0:	41005000 	.word	0x41005000
    17d4:	41004800 	.word	0x41004800
    17d8:	41004000 	.word	0x41004000
    17dc:	00002d81 	.word	0x00002d81
    17e0:	00002bc5 	.word	0x00002bc5

000017e4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    17e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    17e6:	46c6      	mov	lr, r8
    17e8:	b500      	push	{lr}
    17ea:	000c      	movs	r4, r1
    17ec:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    17ee:	2800      	cmp	r0, #0
    17f0:	d10f      	bne.n	1812 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    17f2:	2a00      	cmp	r2, #0
    17f4:	dd11      	ble.n	181a <_read+0x36>
    17f6:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    17f8:	4e09      	ldr	r6, [pc, #36]	; (1820 <_read+0x3c>)
    17fa:	4d0a      	ldr	r5, [pc, #40]	; (1824 <_read+0x40>)
    17fc:	6830      	ldr	r0, [r6, #0]
    17fe:	0021      	movs	r1, r4
    1800:	682b      	ldr	r3, [r5, #0]
    1802:	4798      	blx	r3
		ptr++;
    1804:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    1806:	42bc      	cmp	r4, r7
    1808:	d1f8      	bne.n	17fc <_read+0x18>
		nChars++;
	}
	return nChars;
}
    180a:	4640      	mov	r0, r8
    180c:	bc04      	pop	{r2}
    180e:	4690      	mov	r8, r2
    1810:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    1812:	2301      	movs	r3, #1
    1814:	425b      	negs	r3, r3
    1816:	4698      	mov	r8, r3
    1818:	e7f7      	b.n	180a <_read+0x26>
	for (; len > 0; --len) {
    181a:	4680      	mov	r8, r0
    181c:	e7f5      	b.n	180a <_read+0x26>
    181e:	46c0      	nop			; (mov r8, r8)
    1820:	200002c8 	.word	0x200002c8
    1824:	200002c0 	.word	0x200002c0

00001828 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    1828:	b5f0      	push	{r4, r5, r6, r7, lr}
    182a:	46c6      	mov	lr, r8
    182c:	b500      	push	{lr}
    182e:	000e      	movs	r6, r1
    1830:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    1832:	3801      	subs	r0, #1
    1834:	2802      	cmp	r0, #2
    1836:	d810      	bhi.n	185a <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    1838:	2a00      	cmp	r2, #0
    183a:	d011      	beq.n	1860 <_write+0x38>
    183c:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    183e:	4b0c      	ldr	r3, [pc, #48]	; (1870 <_write+0x48>)
    1840:	4698      	mov	r8, r3
    1842:	4f0c      	ldr	r7, [pc, #48]	; (1874 <_write+0x4c>)
    1844:	4643      	mov	r3, r8
    1846:	6818      	ldr	r0, [r3, #0]
    1848:	5d31      	ldrb	r1, [r6, r4]
    184a:	683b      	ldr	r3, [r7, #0]
    184c:	4798      	blx	r3
    184e:	2800      	cmp	r0, #0
    1850:	db08      	blt.n	1864 <_write+0x3c>
			return -1;
		}
		++nChars;
    1852:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    1854:	42a5      	cmp	r5, r4
    1856:	d1f5      	bne.n	1844 <_write+0x1c>
    1858:	e006      	b.n	1868 <_write+0x40>
		return -1;
    185a:	2401      	movs	r4, #1
    185c:	4264      	negs	r4, r4
    185e:	e003      	b.n	1868 <_write+0x40>
	for (; len != 0; --len) {
    1860:	0014      	movs	r4, r2
    1862:	e001      	b.n	1868 <_write+0x40>
			return -1;
    1864:	2401      	movs	r4, #1
    1866:	4264      	negs	r4, r4
	}
	return nChars;
}
    1868:	0020      	movs	r0, r4
    186a:	bc04      	pop	{r2}
    186c:	4690      	mov	r8, r2
    186e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1870:	200002c8 	.word	0x200002c8
    1874:	200002c4 	.word	0x200002c4

00001878 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    1878:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    187a:	4a06      	ldr	r2, [pc, #24]	; (1894 <_sbrk+0x1c>)
    187c:	6812      	ldr	r2, [r2, #0]
    187e:	2a00      	cmp	r2, #0
    1880:	d004      	beq.n	188c <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    1882:	4a04      	ldr	r2, [pc, #16]	; (1894 <_sbrk+0x1c>)
    1884:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    1886:	18c3      	adds	r3, r0, r3
    1888:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    188a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    188c:	4902      	ldr	r1, [pc, #8]	; (1898 <_sbrk+0x20>)
    188e:	4a01      	ldr	r2, [pc, #4]	; (1894 <_sbrk+0x1c>)
    1890:	6011      	str	r1, [r2, #0]
    1892:	e7f6      	b.n	1882 <_sbrk+0xa>
    1894:	20000294 	.word	0x20000294
    1898:	20002430 	.word	0x20002430

0000189c <_close>:
}

extern int _close(int file)
{
	return -1;
}
    189c:	2001      	movs	r0, #1
    189e:	4240      	negs	r0, r0
    18a0:	4770      	bx	lr

000018a2 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    18a2:	2380      	movs	r3, #128	; 0x80
    18a4:	019b      	lsls	r3, r3, #6
    18a6:	604b      	str	r3, [r1, #4]

	return 0;
}
    18a8:	2000      	movs	r0, #0
    18aa:	4770      	bx	lr

000018ac <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    18ac:	2001      	movs	r0, #1
    18ae:	4770      	bx	lr

000018b0 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    18b0:	2000      	movs	r0, #0
    18b2:	4770      	bx	lr

000018b4 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    18b4:	b570      	push	{r4, r5, r6, lr}
    18b6:	b082      	sub	sp, #8
    18b8:	0005      	movs	r5, r0
    18ba:	000e      	movs	r6, r1
	uint16_t temp = 0;
    18bc:	2200      	movs	r2, #0
    18be:	466b      	mov	r3, sp
    18c0:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    18c2:	4c06      	ldr	r4, [pc, #24]	; (18dc <usart_serial_getchar+0x28>)
    18c4:	466b      	mov	r3, sp
    18c6:	1d99      	adds	r1, r3, #6
    18c8:	0028      	movs	r0, r5
    18ca:	47a0      	blx	r4
    18cc:	2800      	cmp	r0, #0
    18ce:	d1f9      	bne.n	18c4 <usart_serial_getchar+0x10>

	*c = temp;
    18d0:	466b      	mov	r3, sp
    18d2:	3306      	adds	r3, #6
    18d4:	881b      	ldrh	r3, [r3, #0]
    18d6:	7033      	strb	r3, [r6, #0]
}
    18d8:	b002      	add	sp, #8
    18da:	bd70      	pop	{r4, r5, r6, pc}
    18dc:	00000d63 	.word	0x00000d63

000018e0 <usart_serial_putchar>:
{
    18e0:	b570      	push	{r4, r5, r6, lr}
    18e2:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    18e4:	b28c      	uxth	r4, r1
    18e6:	4e03      	ldr	r6, [pc, #12]	; (18f4 <usart_serial_putchar+0x14>)
    18e8:	0021      	movs	r1, r4
    18ea:	0028      	movs	r0, r5
    18ec:	47b0      	blx	r6
    18ee:	2800      	cmp	r0, #0
    18f0:	d1fa      	bne.n	18e8 <usart_serial_putchar+0x8>
}
    18f2:	bd70      	pop	{r4, r5, r6, pc}
    18f4:	00000d3d 	.word	0x00000d3d

000018f8 <configure_console>:
#include "config_usart.h"

void configure_console(void)
{
    18f8:	b570      	push	{r4, r5, r6, lr}
    18fa:	b090      	sub	sp, #64	; 0x40
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    18fc:	2380      	movs	r3, #128	; 0x80
    18fe:	05db      	lsls	r3, r3, #23
    1900:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    1902:	2300      	movs	r3, #0
    1904:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    1906:	22ff      	movs	r2, #255	; 0xff
    1908:	4669      	mov	r1, sp
    190a:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    190c:	2200      	movs	r2, #0
    190e:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    1910:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
    1912:	2196      	movs	r1, #150	; 0x96
    1914:	0189      	lsls	r1, r1, #6
    1916:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
    1918:	2101      	movs	r1, #1
    191a:	2024      	movs	r0, #36	; 0x24
    191c:	466c      	mov	r4, sp
    191e:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    1920:	3001      	adds	r0, #1
    1922:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    1924:	3125      	adds	r1, #37	; 0x25
    1926:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    1928:	3101      	adds	r1, #1
    192a:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    192c:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    192e:	3105      	adds	r1, #5
    1930:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    1932:	3101      	adds	r1, #1
    1934:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    1936:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    1938:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    193a:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    193c:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    193e:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    1940:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    1942:	2313      	movs	r3, #19
    1944:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    1946:	7762      	strb	r2, [r4, #29]
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);

	config_usart.baudrate    = SERCOMBAUD;
	config_usart.mux_setting = SERCOMMUX;
    1948:	2380      	movs	r3, #128	; 0x80
    194a:	035b      	lsls	r3, r3, #13
    194c:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = SERCOMPAD0;
    194e:	4b1e      	ldr	r3, [pc, #120]	; (19c8 <configure_console+0xd0>)
    1950:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = SERCOMPAD1;
    1952:	4b1e      	ldr	r3, [pc, #120]	; (19cc <configure_console+0xd4>)
    1954:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = SERCOMPAD2;
    1956:	2301      	movs	r3, #1
    1958:	425b      	negs	r3, r3
    195a:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = SERCOMPAD3;
    195c:	930f      	str	r3, [sp, #60]	; 0x3c

	while (usart_init(&usart_instance,	 SERCOMMODULE, &config_usart) != STATUS_OK) { }
    195e:	4d1c      	ldr	r5, [pc, #112]	; (19d0 <configure_console+0xd8>)
    1960:	4c1c      	ldr	r4, [pc, #112]	; (19d4 <configure_console+0xdc>)
    1962:	466a      	mov	r2, sp
    1964:	491c      	ldr	r1, [pc, #112]	; (19d8 <configure_console+0xe0>)
    1966:	0028      	movs	r0, r5
    1968:	47a0      	blx	r4
    196a:	2800      	cmp	r0, #0
    196c:	d1f9      	bne.n	1962 <configure_console+0x6a>
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    196e:	4c18      	ldr	r4, [pc, #96]	; (19d0 <configure_console+0xd8>)
    1970:	4b1a      	ldr	r3, [pc, #104]	; (19dc <configure_console+0xe4>)
    1972:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    1974:	4a1a      	ldr	r2, [pc, #104]	; (19e0 <configure_console+0xe8>)
    1976:	4b1b      	ldr	r3, [pc, #108]	; (19e4 <configure_console+0xec>)
    1978:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    197a:	4a1b      	ldr	r2, [pc, #108]	; (19e8 <configure_console+0xf0>)
    197c:	4b1b      	ldr	r3, [pc, #108]	; (19ec <configure_console+0xf4>)
    197e:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    1980:	466a      	mov	r2, sp
    1982:	4915      	ldr	r1, [pc, #84]	; (19d8 <configure_console+0xe0>)
    1984:	0020      	movs	r0, r4
    1986:	4b13      	ldr	r3, [pc, #76]	; (19d4 <configure_console+0xdc>)
    1988:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    198a:	4e19      	ldr	r6, [pc, #100]	; (19f0 <configure_console+0xf8>)
    198c:	6833      	ldr	r3, [r6, #0]
    198e:	6898      	ldr	r0, [r3, #8]
    1990:	2100      	movs	r1, #0
    1992:	4d18      	ldr	r5, [pc, #96]	; (19f4 <configure_console+0xfc>)
    1994:	47a8      	blx	r5
	setbuf(stdin, NULL);
    1996:	6833      	ldr	r3, [r6, #0]
    1998:	6858      	ldr	r0, [r3, #4]
    199a:	2100      	movs	r1, #0
    199c:	47a8      	blx	r5
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    199e:	6825      	ldr	r5, [r4, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    19a0:	0028      	movs	r0, r5
    19a2:	4b15      	ldr	r3, [pc, #84]	; (19f8 <configure_console+0x100>)
    19a4:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    19a6:	231f      	movs	r3, #31
    19a8:	4018      	ands	r0, r3
    19aa:	3b1e      	subs	r3, #30
    19ac:	4083      	lsls	r3, r0
    19ae:	4a13      	ldr	r2, [pc, #76]	; (19fc <configure_console+0x104>)
    19b0:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    19b2:	6822      	ldr	r2, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
    19b4:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    19b6:	2b00      	cmp	r3, #0
    19b8:	d1fc      	bne.n	19b4 <configure_console+0xbc>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    19ba:	682b      	ldr	r3, [r5, #0]
    19bc:	2202      	movs	r2, #2
    19be:	4313      	orrs	r3, r2
    19c0:	602b      	str	r3, [r5, #0]

	stdio_serial_init(&usart_instance, SERCOMMODULE, &config_usart);
	usart_enable(&usart_instance);
}
    19c2:	b010      	add	sp, #64	; 0x40
    19c4:	bd70      	pop	{r4, r5, r6, pc}
    19c6:	46c0      	nop			; (mov r8, r8)
    19c8:	00080003 	.word	0x00080003
    19cc:	00090003 	.word	0x00090003
    19d0:	200002cc 	.word	0x200002cc
    19d4:	00000a01 	.word	0x00000a01
    19d8:	42001000 	.word	0x42001000
    19dc:	200002c8 	.word	0x200002c8
    19e0:	000018e1 	.word	0x000018e1
    19e4:	200002c4 	.word	0x200002c4
    19e8:	000018b5 	.word	0x000018b5
    19ec:	200002c0 	.word	0x200002c0
    19f0:	20000158 	.word	0x20000158
    19f4:	00002ef5 	.word	0x00002ef5
    19f8:	00000971 	.word	0x00000971
    19fc:	e000e100 	.word	0xe000e100

00001a00 <drawChar>:
uint8_t xCharPos = 0;
uint8_t yCharPos = 0;


void drawChar(uint8_t character)
{
    1a00:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a02:	46d6      	mov	lr, sl
    1a04:	464f      	mov	r7, r9
    1a06:	4646      	mov	r6, r8
    1a08:	b5c0      	push	{r6, r7, lr}
    1a0a:	0004      	movs	r4, r0
	int x = xCharPos;
    1a0c:	4b26      	ldr	r3, [pc, #152]	; (1aa8 <drawChar+0xa8>)
    1a0e:	7818      	ldrb	r0, [r3, #0]
	int y = yCharPos;
    1a10:	4b26      	ldr	r3, [pc, #152]	; (1aac <drawChar+0xac>)
    1a12:	7819      	ldrb	r1, [r3, #0]
	REG_PORT_OUTCLR1 = LCD_CS;
    1a14:	2280      	movs	r2, #128	; 0x80
    1a16:	03d2      	lsls	r2, r2, #15
    1a18:	4b25      	ldr	r3, [pc, #148]	; (1ab0 <drawChar+0xb0>)
    1a1a:	601a      	str	r2, [r3, #0]
	setXY(x*10,y*20,x*10+9,y*20+19);
    1a1c:	0083      	lsls	r3, r0, #2
    1a1e:	18c0      	adds	r0, r0, r3
    1a20:	0040      	lsls	r0, r0, #1
    1a22:	2314      	movs	r3, #20
    1a24:	4359      	muls	r1, r3
    1a26:	000b      	movs	r3, r1
    1a28:	3313      	adds	r3, #19
    1a2a:	b29b      	uxth	r3, r3
    1a2c:	0002      	movs	r2, r0
    1a2e:	3209      	adds	r2, #9
    1a30:	b292      	uxth	r2, r2
    1a32:	4d20      	ldr	r5, [pc, #128]	; (1ab4 <drawChar+0xb4>)
    1a34:	47a8      	blx	r5
    1a36:	4a20      	ldr	r2, [pc, #128]	; (1ab8 <drawChar+0xb8>)
    1a38:	00a5      	lsls	r5, r4, #2
    1a3a:	192d      	adds	r5, r5, r4
    1a3c:	00ab      	lsls	r3, r5, #2
    1a3e:	18ed      	adds	r5, r5, r3
    1a40:	1955      	adds	r5, r2, r5
    1a42:	3401      	adds	r4, #1
    1a44:	00a3      	lsls	r3, r4, #2
    1a46:	191b      	adds	r3, r3, r4
    1a48:	0099      	lsls	r1, r3, #2
    1a4a:	185b      	adds	r3, r3, r1
    1a4c:	4692      	mov	sl, r2
    1a4e:	449a      	add	sl, r3
			{
				setPixel((fore_Color_High<<8)|fore_Color_Low);
			}
			else
			{
				setPixel((back_Color_High<<8)|back_Color_Low);
    1a50:	4b1a      	ldr	r3, [pc, #104]	; (1abc <drawChar+0xbc>)
    1a52:	4699      	mov	r9, r3
    1a54:	4b1a      	ldr	r3, [pc, #104]	; (1ac0 <drawChar+0xc0>)
    1a56:	4698      	mov	r8, r3
    1a58:	4f1a      	ldr	r7, [pc, #104]	; (1ac4 <drawChar+0xc4>)
				setPixel((fore_Color_High<<8)|fore_Color_Low);
    1a5a:	4e1b      	ldr	r6, [pc, #108]	; (1ac8 <drawChar+0xc8>)
    1a5c:	e019      	b.n	1a92 <drawChar+0x92>
				setPixel((back_Color_High<<8)|back_Color_Low);
    1a5e:	464b      	mov	r3, r9
    1a60:	8818      	ldrh	r0, [r3, #0]
    1a62:	0200      	lsls	r0, r0, #8
    1a64:	4643      	mov	r3, r8
    1a66:	881b      	ldrh	r3, [r3, #0]
    1a68:	4318      	orrs	r0, r3
    1a6a:	b280      	uxth	r0, r0
    1a6c:	47b8      	blx	r7
		for(int j=0;j<8;j++)
    1a6e:	3c01      	subs	r4, #1
    1a70:	d30c      	bcc.n	1a8c <drawChar+0x8c>
			if((CodePage437[character][i]&(1<<(7-j)))!=0)
    1a72:	782b      	ldrb	r3, [r5, #0]
    1a74:	4123      	asrs	r3, r4
    1a76:	07db      	lsls	r3, r3, #31
    1a78:	d5f1      	bpl.n	1a5e <drawChar+0x5e>
				setPixel((fore_Color_High<<8)|fore_Color_Low);
    1a7a:	8830      	ldrh	r0, [r6, #0]
    1a7c:	0200      	lsls	r0, r0, #8
    1a7e:	4b13      	ldr	r3, [pc, #76]	; (1acc <drawChar+0xcc>)
    1a80:	881b      	ldrh	r3, [r3, #0]
    1a82:	4318      	orrs	r0, r3
    1a84:	b280      	uxth	r0, r0
    1a86:	4b0f      	ldr	r3, [pc, #60]	; (1ac4 <drawChar+0xc4>)
    1a88:	4798      	blx	r3
    1a8a:	e7f0      	b.n	1a6e <drawChar+0x6e>
    1a8c:	3501      	adds	r5, #1
	for(uint8_t i=0; i <= 24; i++)
    1a8e:	4555      	cmp	r5, sl
    1a90:	d001      	beq.n	1a96 <drawChar+0x96>
{
    1a92:	2407      	movs	r4, #7
    1a94:	e7ed      	b.n	1a72 <drawChar+0x72>
			}

		}
	}
	REG_PORT_OUTSET1 = LCD_CS;
    1a96:	2280      	movs	r2, #128	; 0x80
    1a98:	03d2      	lsls	r2, r2, #15
    1a9a:	4b0d      	ldr	r3, [pc, #52]	; (1ad0 <drawChar+0xd0>)
    1a9c:	601a      	str	r2, [r3, #0]

}
    1a9e:	bc1c      	pop	{r2, r3, r4}
    1aa0:	4690      	mov	r8, r2
    1aa2:	4699      	mov	r9, r3
    1aa4:	46a2      	mov	sl, r4
    1aa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1aa8:	20000298 	.word	0x20000298
    1aac:	20000299 	.word	0x20000299
    1ab0:	41004494 	.word	0x41004494
    1ab4:	00002555 	.word	0x00002555
    1ab8:	000043c4 	.word	0x000043c4
    1abc:	200003d2 	.word	0x200003d2
    1ac0:	200003cc 	.word	0x200003cc
    1ac4:	00002735 	.word	0x00002735
    1ac8:	200003ce 	.word	0x200003ce
    1acc:	200003d0 	.word	0x200003d0
    1ad0:	41004498 	.word	0x41004498

00001ad4 <newLine>:

void newLine(void)
{
    1ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ad6:	46de      	mov	lr, fp
    1ad8:	4657      	mov	r7, sl
    1ada:	464e      	mov	r6, r9
    1adc:	4645      	mov	r5, r8
    1ade:	b5e0      	push	{r5, r6, r7, lr}
    1ae0:	4c49      	ldr	r4, [pc, #292]	; (1c08 <newLine+0x134>)
    1ae2:	44a5      	add	sp, r4
	460 times, for each line in the display.
	*/
	
	uint8_t rowPixel[800];
		
	for(uint16_t row = 0 ; row < 460 ; row++)
    1ae4:	2300      	movs	r3, #0
    1ae6:	9300      	str	r3, [sp, #0]
	{
		//Per page 40 of datasheet (5.1.2.7, 16-bit
		//parallel interface for data ram read.
		REG_PORT_OUTCLR1 = LCD_CS;
    1ae8:	4b48      	ldr	r3, [pc, #288]	; (1c0c <newLine+0x138>)
    1aea:	4698      	mov	r8, r3
		setXY(0, row+20, 799, row+20);
		//Send'Memory read' command 0x2E00, no data bit
		LCD_Write_COM16(0x2E,0x00);
		REG_PORT_OUTSET1 = LCD_DC;
    1aec:	4f48      	ldr	r7, [pc, #288]	; (1c10 <newLine+0x13c>)
		
		
		//Read pixel data into the display	
		for(uint16_t getpixel = 0 ; getpixel < 800 ; getpixel++)
		{
			REG_PORT_OUTCLR1 = LCD_RD;
    1aee:	2680      	movs	r6, #128	; 0x80
    1af0:	0276      	lsls	r6, r6, #9
    1af2:	e046      	b.n	1b82 <newLine+0xae>
			//This can be expanded with else if for the MSBs
			//of all the colors; see datasheet page 40.
			if((PORT->Group[1].IN.reg & PORT_PB07) != 0)
				rowPixel[getpixel] = 0xFF;
			else
				rowPixel[getpixel] = 0x00;
    1af4:	4653      	mov	r3, sl
    1af6:	7023      	strb	r3, [r4, #0]
			//dummy read, because pixel data broken up
			//per datasheet page 40. Everything after
			//the dummy write is BLUE pixels. Do we ever
			//need blue? IDK.
			
			REG_PORT_OUTCLR1 = LCD_RD;
    1af8:	4643      	mov	r3, r8
    1afa:	601e      	str	r6, [r3, #0]
			REG_PORT_OUTSET1 = LCD_RD;
    1afc:	603e      	str	r6, [r7, #0]
    1afe:	3401      	adds	r4, #1
		for(uint16_t getpixel = 0 ; getpixel < 800 ; getpixel++)
    1b00:	4564      	cmp	r4, ip
    1b02:	d008      	beq.n	1b16 <newLine+0x42>
			REG_PORT_OUTCLR1 = LCD_RD;
    1b04:	4643      	mov	r3, r8
    1b06:	601e      	str	r6, [r3, #0]
			REG_PORT_OUTSET1 = LCD_RD;
    1b08:	603e      	str	r6, [r7, #0]
			if((PORT->Group[1].IN.reg & PORT_PB07) != 0)
    1b0a:	5843      	ldr	r3, [r0, r1]
    1b0c:	421a      	tst	r2, r3
    1b0e:	d0f1      	beq.n	1af4 <newLine+0x20>
				rowPixel[getpixel] = 0xFF;
    1b10:	464b      	mov	r3, r9
    1b12:	7023      	strb	r3, [r4, #0]
    1b14:	e7f0      	b.n	1af8 <newLine+0x24>
    1b16:	9401      	str	r4, [sp, #4]
		}
		
		REG_PORT_OUTSET1 = LCD_DC;
    1b18:	2380      	movs	r3, #128	; 0x80
    1b1a:	041b      	lsls	r3, r3, #16
    1b1c:	603b      	str	r3, [r7, #0]
		REG_PORT_DIRSET1 = 0x0000FFFF;
    1b1e:	4a3d      	ldr	r2, [pc, #244]	; (1c14 <newLine+0x140>)
    1b20:	4b3d      	ldr	r3, [pc, #244]	; (1c18 <newLine+0x144>)
    1b22:	601a      	str	r2, [r3, #0]
		
		//now, read out that line of the display
		setXY(0, row, 799, row);	
    1b24:	9900      	ldr	r1, [sp, #0]
    1b26:	000b      	movs	r3, r1
    1b28:	4a3c      	ldr	r2, [pc, #240]	; (1c1c <newLine+0x148>)
    1b2a:	2000      	movs	r0, #0
    1b2c:	4c3c      	ldr	r4, [pc, #240]	; (1c20 <newLine+0x14c>)
    1b2e:	47a0      	blx	r4
		for(uint16_t writepixel = 0 ; writepixel < 800 ; writepixel++)
		{
			if((rowPixel[writepixel] == 0xFF))
				setPixel((fore_Color_High<<8)|fore_Color_Low);
			else
				setPixel((back_Color_High<<8)|back_Color_Low);
    1b30:	4b3c      	ldr	r3, [pc, #240]	; (1c24 <newLine+0x150>)
    1b32:	469b      	mov	fp, r3
    1b34:	4b3c      	ldr	r3, [pc, #240]	; (1c28 <newLine+0x154>)
    1b36:	469a      	mov	sl, r3
    1b38:	4b3c      	ldr	r3, [pc, #240]	; (1c2c <newLine+0x158>)
    1b3a:	4699      	mov	r9, r3
    1b3c:	9c01      	ldr	r4, [sp, #4]
    1b3e:	e00b      	b.n	1b58 <newLine+0x84>
				setPixel((fore_Color_High<<8)|fore_Color_Low);
    1b40:	4b3b      	ldr	r3, [pc, #236]	; (1c30 <newLine+0x15c>)
    1b42:	8818      	ldrh	r0, [r3, #0]
    1b44:	0200      	lsls	r0, r0, #8
    1b46:	4b3b      	ldr	r3, [pc, #236]	; (1c34 <newLine+0x160>)
    1b48:	881b      	ldrh	r3, [r3, #0]
    1b4a:	4318      	orrs	r0, r3
    1b4c:	b280      	uxth	r0, r0
    1b4e:	4b37      	ldr	r3, [pc, #220]	; (1c2c <newLine+0x158>)
    1b50:	4798      	blx	r3
    1b52:	3501      	adds	r5, #1
		for(uint16_t writepixel = 0 ; writepixel < 800 ; writepixel++)
    1b54:	42ac      	cmp	r4, r5
    1b56:	d00b      	beq.n	1b70 <newLine+0x9c>
			if((rowPixel[writepixel] == 0xFF))
    1b58:	782b      	ldrb	r3, [r5, #0]
    1b5a:	2bff      	cmp	r3, #255	; 0xff
    1b5c:	d0f0      	beq.n	1b40 <newLine+0x6c>
				setPixel((back_Color_High<<8)|back_Color_Low);
    1b5e:	465b      	mov	r3, fp
    1b60:	8818      	ldrh	r0, [r3, #0]
    1b62:	0200      	lsls	r0, r0, #8
    1b64:	4653      	mov	r3, sl
    1b66:	881b      	ldrh	r3, [r3, #0]
    1b68:	4318      	orrs	r0, r3
    1b6a:	b280      	uxth	r0, r0
    1b6c:	47c8      	blx	r9
    1b6e:	e7f0      	b.n	1b52 <newLine+0x7e>
	for(uint16_t row = 0 ; row < 460 ; row++)
    1b70:	9b00      	ldr	r3, [sp, #0]
    1b72:	3301      	adds	r3, #1
    1b74:	b29b      	uxth	r3, r3
    1b76:	001a      	movs	r2, r3
    1b78:	9300      	str	r3, [sp, #0]
    1b7a:	23e6      	movs	r3, #230	; 0xe6
    1b7c:	005b      	lsls	r3, r3, #1
    1b7e:	429a      	cmp	r2, r3
    1b80:	d031      	beq.n	1be6 <newLine+0x112>
		REG_PORT_OUTCLR1 = LCD_CS;
    1b82:	4643      	mov	r3, r8
    1b84:	2280      	movs	r2, #128	; 0x80
    1b86:	03d2      	lsls	r2, r2, #15
    1b88:	601a      	str	r2, [r3, #0]
		setXY(0, row+20, 799, row+20);
    1b8a:	9900      	ldr	r1, [sp, #0]
    1b8c:	3114      	adds	r1, #20
    1b8e:	b289      	uxth	r1, r1
    1b90:	000b      	movs	r3, r1
    1b92:	4a22      	ldr	r2, [pc, #136]	; (1c1c <newLine+0x148>)
    1b94:	2000      	movs	r0, #0
    1b96:	4c22      	ldr	r4, [pc, #136]	; (1c20 <newLine+0x14c>)
    1b98:	47a0      	blx	r4
		LCD_Write_COM16(0x2E,0x00);
    1b9a:	2100      	movs	r1, #0
    1b9c:	202e      	movs	r0, #46	; 0x2e
    1b9e:	4b26      	ldr	r3, [pc, #152]	; (1c38 <newLine+0x164>)
    1ba0:	4798      	blx	r3
		REG_PORT_OUTSET1 = LCD_DC;
    1ba2:	2380      	movs	r3, #128	; 0x80
    1ba4:	041b      	lsls	r3, r3, #16
    1ba6:	603b      	str	r3, [r7, #0]
		REG_PORT_OUTCLR1 = LCD_RD;
    1ba8:	4643      	mov	r3, r8
    1baa:	2280      	movs	r2, #128	; 0x80
    1bac:	0252      	lsls	r2, r2, #9
    1bae:	601a      	str	r2, [r3, #0]
		REG_PORT_OUTSET1 = LCD_RD;
    1bb0:	603a      	str	r2, [r7, #0]
		REG_PORT_DIRCLR1 = PORT_PB07;
    1bb2:	2280      	movs	r2, #128	; 0x80
    1bb4:	4b21      	ldr	r3, [pc, #132]	; (1c3c <newLine+0x168>)
    1bb6:	601a      	str	r2, [r3, #0]
		PORT->Group[1].PINCFG[7].bit.INEN = 1;
    1bb8:	4a21      	ldr	r2, [pc, #132]	; (1c40 <newLine+0x16c>)
    1bba:	23c7      	movs	r3, #199	; 0xc7
    1bbc:	5cd1      	ldrb	r1, [r2, r3]
    1bbe:	2002      	movs	r0, #2
    1bc0:	4301      	orrs	r1, r0
    1bc2:	54d1      	strb	r1, [r2, r3]
		PORT->Group[1].PINCFG[7].bit.PULLEN = 1;
    1bc4:	5cd1      	ldrb	r1, [r2, r3]
    1bc6:	2004      	movs	r0, #4
    1bc8:	4301      	orrs	r1, r0
    1bca:	54d1      	strb	r1, [r2, r3]
    1bcc:	ad02      	add	r5, sp, #8
    1bce:	abca      	add	r3, sp, #808	; 0x328
    1bd0:	469c      	mov	ip, r3
    1bd2:	9501      	str	r5, [sp, #4]
			if((PORT->Group[1].IN.reg & PORT_PB07) != 0)
    1bd4:	0010      	movs	r0, r2
    1bd6:	21a0      	movs	r1, #160	; 0xa0
    1bd8:	2280      	movs	r2, #128	; 0x80
				rowPixel[getpixel] = 0x00;
    1bda:	2300      	movs	r3, #0
    1bdc:	469a      	mov	sl, r3
				rowPixel[getpixel] = 0xFF;
    1bde:	33ff      	adds	r3, #255	; 0xff
    1be0:	4699      	mov	r9, r3
    1be2:	002c      	movs	r4, r5
    1be4:	e78e      	b.n	1b04 <newLine+0x30>
		}
	}
	
	//finally, clear the last character line of the display
	//and fix the console text buffer
	fillRectBackColor(0, 460, 799, 480);
    1be6:	3314      	adds	r3, #20
    1be8:	4a0c      	ldr	r2, [pc, #48]	; (1c1c <newLine+0x148>)
    1bea:	21e6      	movs	r1, #230	; 0xe6
    1bec:	0049      	lsls	r1, r1, #1
    1bee:	2000      	movs	r0, #0
    1bf0:	4c14      	ldr	r4, [pc, #80]	; (1c44 <newLine+0x170>)
    1bf2:	47a0      	blx	r4

}
    1bf4:	23cb      	movs	r3, #203	; 0xcb
    1bf6:	009b      	lsls	r3, r3, #2
    1bf8:	449d      	add	sp, r3
    1bfa:	bc3c      	pop	{r2, r3, r4, r5}
    1bfc:	4690      	mov	r8, r2
    1bfe:	4699      	mov	r9, r3
    1c00:	46a2      	mov	sl, r4
    1c02:	46ab      	mov	fp, r5
    1c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1c06:	46c0      	nop			; (mov r8, r8)
    1c08:	fffffcd4 	.word	0xfffffcd4
    1c0c:	41004494 	.word	0x41004494
    1c10:	41004498 	.word	0x41004498
    1c14:	0000ffff 	.word	0x0000ffff
    1c18:	41004488 	.word	0x41004488
    1c1c:	0000031f 	.word	0x0000031f
    1c20:	00002555 	.word	0x00002555
    1c24:	200003d2 	.word	0x200003d2
    1c28:	200003cc 	.word	0x200003cc
    1c2c:	00002735 	.word	0x00002735
    1c30:	200003ce 	.word	0x200003ce
    1c34:	200003d0 	.word	0x200003d0
    1c38:	000027a1 	.word	0x000027a1
    1c3c:	41004484 	.word	0x41004484
    1c40:	41004400 	.word	0x41004400
    1c44:	0000266d 	.word	0x0000266d

00001c48 <writeString>:

void writeString(char str[])
{
    1c48:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c4a:	46c6      	mov	lr, r8
    1c4c:	b500      	push	{lr}
    1c4e:	0005      	movs	r5, r0
	int length = strlen(str);
    1c50:	4b0c      	ldr	r3, [pc, #48]	; (1c84 <writeString+0x3c>)
    1c52:	4798      	blx	r3
	for(int i = 0; i < length; i++)
    1c54:	2800      	cmp	r0, #0
    1c56:	dd11      	ble.n	1c7c <writeString+0x34>
    1c58:	002c      	movs	r4, r5
    1c5a:	182d      	adds	r5, r5, r0
	{
		drawChar(str[i]);
    1c5c:	4f0a      	ldr	r7, [pc, #40]	; (1c88 <writeString+0x40>)
		if(xCharPos <= 80)
    1c5e:	4e0b      	ldr	r6, [pc, #44]	; (1c8c <writeString+0x44>)
		xCharPos++;
    1c60:	46b0      	mov	r8, r6
    1c62:	e002      	b.n	1c6a <writeString+0x22>
    1c64:	3401      	adds	r4, #1
	for(int i = 0; i < length; i++)
    1c66:	42ac      	cmp	r4, r5
    1c68:	d008      	beq.n	1c7c <writeString+0x34>
		drawChar(str[i]);
    1c6a:	7820      	ldrb	r0, [r4, #0]
    1c6c:	47b8      	blx	r7
		if(xCharPos <= 80)
    1c6e:	7833      	ldrb	r3, [r6, #0]
    1c70:	2b50      	cmp	r3, #80	; 0x50
    1c72:	d8f7      	bhi.n	1c64 <writeString+0x1c>
		xCharPos++;
    1c74:	3301      	adds	r3, #1
    1c76:	4642      	mov	r2, r8
    1c78:	7013      	strb	r3, [r2, #0]
    1c7a:	e7f3      	b.n	1c64 <writeString+0x1c>
	}
    1c7c:	bc04      	pop	{r2}
    1c7e:	4690      	mov	r8, r2
    1c80:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1c82:	46c0      	nop			; (mov r8, r8)
    1c84:	00003061 	.word	0x00003061
    1c88:	00001a01 	.word	0x00001a01
    1c8c:	20000298 	.word	0x20000298

00001c90 <scanCodesContains>:

bool scanCodesContains(int scanCode)
{
	for(int i = 0 ; i < 70 ; i++)
	{
		if(scanCodes[i] == scanCode)
    1c90:	4b09      	ldr	r3, [pc, #36]	; (1cb8 <scanCodesContains+0x28>)
    1c92:	681b      	ldr	r3, [r3, #0]
    1c94:	4298      	cmp	r0, r3
    1c96:	d00b      	beq.n	1cb0 <scanCodesContains+0x20>
    1c98:	4a07      	ldr	r2, [pc, #28]	; (1cb8 <scanCodesContains+0x28>)
    1c9a:	1d13      	adds	r3, r2, #4
    1c9c:	3219      	adds	r2, #25
    1c9e:	32ff      	adds	r2, #255	; 0xff
    1ca0:	6819      	ldr	r1, [r3, #0]
    1ca2:	4281      	cmp	r1, r0
    1ca4:	d006      	beq.n	1cb4 <scanCodesContains+0x24>
    1ca6:	3304      	adds	r3, #4
	for(int i = 0 ; i < 70 ; i++)
    1ca8:	4293      	cmp	r3, r2
    1caa:	d1f9      	bne.n	1ca0 <scanCodesContains+0x10>
		{
			return true;
		}
	}
	return false;
    1cac:	2000      	movs	r0, #0
    1cae:	e002      	b.n	1cb6 <scanCodesContains+0x26>
			return true;
    1cb0:	2001      	movs	r0, #1
    1cb2:	e000      	b.n	1cb6 <scanCodesContains+0x26>
    1cb4:	2001      	movs	r0, #1
}
    1cb6:	4770      	bx	lr
    1cb8:	2000003c 	.word	0x2000003c

00001cbc <keyDown>:

bool keyDown(int scancode)
{
	for(int i = 0 ; i < 20 ; i++)
	{
		if(keyDownBuffer[i] == scancode)
    1cbc:	4b09      	ldr	r3, [pc, #36]	; (1ce4 <keyDown+0x28>)
    1cbe:	781b      	ldrb	r3, [r3, #0]
    1cc0:	4298      	cmp	r0, r3
    1cc2:	d00a      	beq.n	1cda <keyDown+0x1e>
    1cc4:	4907      	ldr	r1, [pc, #28]	; (1ce4 <keyDown+0x28>)
    1cc6:	1c4b      	adds	r3, r1, #1
    1cc8:	3114      	adds	r1, #20
    1cca:	781a      	ldrb	r2, [r3, #0]
    1ccc:	4282      	cmp	r2, r0
    1cce:	d006      	beq.n	1cde <keyDown+0x22>
    1cd0:	3301      	adds	r3, #1
	for(int i = 0 ; i < 20 ; i++)
    1cd2:	428b      	cmp	r3, r1
    1cd4:	d1f9      	bne.n	1cca <keyDown+0xe>
		{
			return true;
		}	
	}
	return false;
    1cd6:	2000      	movs	r0, #0
}
    1cd8:	4770      	bx	lr
			return true;
    1cda:	2001      	movs	r0, #1
    1cdc:	e7fc      	b.n	1cd8 <keyDown+0x1c>
    1cde:	2001      	movs	r0, #1
    1ce0:	e7fa      	b.n	1cd8 <keyDown+0x1c>
    1ce2:	46c0      	nop			; (mov r8, r8)
    1ce4:	20000014 	.word	0x20000014

00001ce8 <removeFromKeyDown>:

void removeFromKeyDown(int scancode)
{
    1ce8:	b510      	push	{r4, lr}
    1cea:	4b07      	ldr	r3, [pc, #28]	; (1d08 <removeFromKeyDown+0x20>)
    1cec:	0019      	movs	r1, r3
    1cee:	3114      	adds	r1, #20
	for(int i = 0 ; i < 20 ; i++)
	{
		if(keyDownBuffer[i] == scancode)
		{
			keyDownBuffer[i] = 0xFF;
    1cf0:	24ff      	movs	r4, #255	; 0xff
    1cf2:	e002      	b.n	1cfa <removeFromKeyDown+0x12>
    1cf4:	3301      	adds	r3, #1
	for(int i = 0 ; i < 20 ; i++)
    1cf6:	428b      	cmp	r3, r1
    1cf8:	d004      	beq.n	1d04 <removeFromKeyDown+0x1c>
		if(keyDownBuffer[i] == scancode)
    1cfa:	781a      	ldrb	r2, [r3, #0]
    1cfc:	4282      	cmp	r2, r0
    1cfe:	d1f9      	bne.n	1cf4 <removeFromKeyDown+0xc>
			keyDownBuffer[i] = 0xFF;
    1d00:	701c      	strb	r4, [r3, #0]
    1d02:	e7f7      	b.n	1cf4 <removeFromKeyDown+0xc>
		}
	}
}
    1d04:	bd10      	pop	{r4, pc}
    1d06:	46c0      	nop			; (mov r8, r8)
    1d08:	20000014 	.word	0x20000014

00001d0c <readKeyboard>:
{
    1d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d0e:	46de      	mov	lr, fp
    1d10:	4657      	mov	r7, sl
    1d12:	464e      	mov	r6, r9
    1d14:	4645      	mov	r5, r8
    1d16:	b5e0      	push	{r5, r6, r7, lr}
    1d18:	b083      	sub	sp, #12
    1d1a:	4e6d      	ldr	r6, [pc, #436]	; (1ed0 <readKeyboard+0x1c4>)
    1d1c:	0031      	movs	r1, r6
    1d1e:	3119      	adds	r1, #25
    1d20:	31ff      	adds	r1, #255	; 0xff
    1d22:	0033      	movs	r3, r6
		scanCodes[i] = 0xFF;
    1d24:	22ff      	movs	r2, #255	; 0xff
    1d26:	c304      	stmia	r3!, {r2}
	for(i = 0 ; i < 70 ; i++)
    1d28:	428b      	cmp	r3, r1
    1d2a:	d1fc      	bne.n	1d26 <readKeyboard+0x1a>
	PORT->Group[0].WRCONFIG.bit.DRVSTR = 1;
    1d2c:	4a69      	ldr	r2, [pc, #420]	; (1ed4 <readKeyboard+0x1c8>)
    1d2e:	6a91      	ldr	r1, [r2, #40]	; 0x28
    1d30:	2380      	movs	r3, #128	; 0x80
    1d32:	03db      	lsls	r3, r3, #15
    1d34:	430b      	orrs	r3, r1
    1d36:	6293      	str	r3, [r2, #40]	; 0x28
    1d38:	4c67      	ldr	r4, [pc, #412]	; (1ed8 <readKeyboard+0x1cc>)
    1d3a:	341c      	adds	r4, #28
    1d3c:	4b66      	ldr	r3, [pc, #408]	; (1ed8 <readKeyboard+0x1cc>)
		REG_PORT_DIRSET0 = kb_col[i];
    1d3e:	4867      	ldr	r0, [pc, #412]	; (1edc <readKeyboard+0x1d0>)
		REG_PORT_OUTCLR0 = kb_col[i];
    1d40:	4967      	ldr	r1, [pc, #412]	; (1ee0 <readKeyboard+0x1d4>)
		REG_PORT_DIRSET0 = kb_col[i];
    1d42:	681a      	ldr	r2, [r3, #0]
    1d44:	6002      	str	r2, [r0, #0]
		REG_PORT_OUTCLR0 = kb_col[i];
    1d46:	cb04      	ldmia	r3!, {r2}
    1d48:	600a      	str	r2, [r1, #0]
	for (i = 0; i < NUM_COL; i++) {
    1d4a:	42a3      	cmp	r3, r4
    1d4c:	d1f9      	bne.n	1d42 <readKeyboard+0x36>
    1d4e:	2200      	movs	r2, #0
		REG_PORT_DIRCLR0 = kb_row[i];
    1d50:	4b64      	ldr	r3, [pc, #400]	; (1ee4 <readKeyboard+0x1d8>)
    1d52:	469c      	mov	ip, r3
    1d54:	4f64      	ldr	r7, [pc, #400]	; (1ee8 <readKeyboard+0x1dc>)
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.PULLEN = 1;
    1d56:	4d65      	ldr	r5, [pc, #404]	; (1eec <readKeyboard+0x1e0>)
    1d58:	2404      	movs	r4, #4
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.INEN = 1;
    1d5a:	2002      	movs	r0, #2
		REG_PORT_DIRCLR0 = kb_row[i];
    1d5c:	4663      	mov	r3, ip
    1d5e:	58d3      	ldr	r3, [r2, r3]
    1d60:	603b      	str	r3, [r7, #0]
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.PULLEN = 1;
    1d62:	5953      	ldr	r3, [r2, r5]
    1d64:	4962      	ldr	r1, [pc, #392]	; (1ef0 <readKeyboard+0x1e4>)
    1d66:	4688      	mov	r8, r1
    1d68:	4443      	add	r3, r8
    1d6a:	7819      	ldrb	r1, [r3, #0]
    1d6c:	4321      	orrs	r1, r4
    1d6e:	7019      	strb	r1, [r3, #0]
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.INEN = 1;
    1d70:	7819      	ldrb	r1, [r3, #0]
    1d72:	4301      	orrs	r1, r0
    1d74:	7019      	strb	r1, [r3, #0]
    1d76:	3204      	adds	r2, #4
	for (i = 0; i < NUM_ROW; i++) {
    1d78:	2a28      	cmp	r2, #40	; 0x28
    1d7a:	d1ef      	bne.n	1d5c <readKeyboard+0x50>
    1d7c:	4b56      	ldr	r3, [pc, #344]	; (1ed8 <readKeyboard+0x1cc>)
    1d7e:	4699      	mov	r9, r3
    1d80:	2300      	movs	r3, #0
    1d82:	4698      	mov	r8, r3
    1d84:	2200      	movs	r2, #0
		REG_PORT_OUTSET0 = kb_col[i];
    1d86:	4b5b      	ldr	r3, [pc, #364]	; (1ef4 <readKeyboard+0x1e8>)
    1d88:	469b      	mov	fp, r3
			if((PORT->Group[0].IN.reg & kb_row[j]) != 0) {
    1d8a:	4d52      	ldr	r5, [pc, #328]	; (1ed4 <readKeyboard+0x1c8>)
				scanCodes[scanCodeIndex] = (i * NUM_ROW) + j;
    1d8c:	4b50      	ldr	r3, [pc, #320]	; (1ed0 <readKeyboard+0x1c4>)
    1d8e:	469c      	mov	ip, r3
		REG_PORT_OUTCLR0 = kb_col[i];
    1d90:	4b53      	ldr	r3, [pc, #332]	; (1ee0 <readKeyboard+0x1d4>)
    1d92:	469a      	mov	sl, r3
    1d94:	9601      	str	r6, [sp, #4]
    1d96:	464e      	mov	r6, r9
    1d98:	4647      	mov	r7, r8
    1d9a:	e015      	b.n	1dc8 <readKeyboard+0xbc>
    1d9c:	3304      	adds	r3, #4
    1d9e:	3101      	adds	r1, #1
		for (j = 0; j < NUM_ROW; j++) {	
    1da0:	42a3      	cmp	r3, r4
    1da2:	d008      	beq.n	1db6 <readKeyboard+0xaa>
			if((PORT->Group[0].IN.reg & kb_row[j]) != 0) {
    1da4:	6a28      	ldr	r0, [r5, #32]
    1da6:	681e      	ldr	r6, [r3, #0]
    1da8:	4206      	tst	r6, r0
    1daa:	d0f7      	beq.n	1d9c <readKeyboard+0x90>
				scanCodes[scanCodeIndex] = (i * NUM_ROW) + j;
    1dac:	0090      	lsls	r0, r2, #2
    1dae:	4666      	mov	r6, ip
    1db0:	5181      	str	r1, [r0, r6]
				scanCodeIndex++;
    1db2:	3201      	adds	r2, #1
    1db4:	e7f2      	b.n	1d9c <readKeyboard+0x90>
    1db6:	9e00      	ldr	r6, [sp, #0]
		REG_PORT_OUTCLR0 = kb_col[i];
    1db8:	4649      	mov	r1, r9
    1dba:	6809      	ldr	r1, [r1, #0]
    1dbc:	4650      	mov	r0, sl
    1dbe:	6001      	str	r1, [r0, #0]
    1dc0:	3604      	adds	r6, #4
    1dc2:	370a      	adds	r7, #10
	for (i = 0; i < NUM_COL; i++) {
    1dc4:	2f46      	cmp	r7, #70	; 0x46
    1dc6:	d00a      	beq.n	1dde <readKeyboard+0xd2>
    1dc8:	46b1      	mov	r9, r6
		REG_PORT_OUTSET0 = kb_col[i];
    1dca:	465b      	mov	r3, fp
    1dcc:	6831      	ldr	r1, [r6, #0]
    1dce:	6019      	str	r1, [r3, #0]
    1dd0:	4b44      	ldr	r3, [pc, #272]	; (1ee4 <readKeyboard+0x1d8>)
    1dd2:	4698      	mov	r8, r3
    1dd4:	001c      	movs	r4, r3
    1dd6:	3428      	adds	r4, #40	; 0x28
    1dd8:	0039      	movs	r1, r7
    1dda:	9600      	str	r6, [sp, #0]
    1ddc:	e7e2      	b.n	1da4 <readKeyboard+0x98>
    1dde:	4647      	mov	r7, r8
    1de0:	9e01      	ldr	r6, [sp, #4]
    1de2:	4641      	mov	r1, r8
		REG_PORT_DIRSET0 = kb_row[i];
    1de4:	4d3d      	ldr	r5, [pc, #244]	; (1edc <readKeyboard+0x1d0>)
		REG_PORT_OUTCLR0 = kb_row[i];
    1de6:	4c3e      	ldr	r4, [pc, #248]	; (1ee0 <readKeyboard+0x1d4>)
		REG_PORT_DIRSET0 = kb_row[i];
    1de8:	6808      	ldr	r0, [r1, #0]
    1dea:	6028      	str	r0, [r5, #0]
		REG_PORT_OUTCLR0 = kb_row[i];
    1dec:	c901      	ldmia	r1!, {r0}
    1dee:	6020      	str	r0, [r4, #0]
	for (i = 0; i < NUM_ROW; i++) {
    1df0:	4299      	cmp	r1, r3
    1df2:	d1f9      	bne.n	1de8 <readKeyboard+0xdc>
    1df4:	2100      	movs	r1, #0
		REG_PORT_DIRCLR0 = kb_col[i];
    1df6:	4b38      	ldr	r3, [pc, #224]	; (1ed8 <readKeyboard+0x1cc>)
    1df8:	4699      	mov	r9, r3
    1dfa:	4b3b      	ldr	r3, [pc, #236]	; (1ee8 <readKeyboard+0x1dc>)
    1dfc:	4698      	mov	r8, r3
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.PULLEN = 1;
    1dfe:	4b3e      	ldr	r3, [pc, #248]	; (1ef8 <readKeyboard+0x1ec>)
    1e00:	469c      	mov	ip, r3
    1e02:	2504      	movs	r5, #4
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.INEN = 1;
    1e04:	2402      	movs	r4, #2
		REG_PORT_DIRCLR0 = kb_col[i];
    1e06:	4643      	mov	r3, r8
    1e08:	4648      	mov	r0, r9
    1e0a:	5808      	ldr	r0, [r1, r0]
    1e0c:	6018      	str	r0, [r3, #0]
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.PULLEN = 1;
    1e0e:	4663      	mov	r3, ip
    1e10:	58cb      	ldr	r3, [r1, r3]
    1e12:	4837      	ldr	r0, [pc, #220]	; (1ef0 <readKeyboard+0x1e4>)
    1e14:	4682      	mov	sl, r0
    1e16:	4453      	add	r3, sl
    1e18:	7818      	ldrb	r0, [r3, #0]
    1e1a:	4328      	orrs	r0, r5
    1e1c:	7018      	strb	r0, [r3, #0]
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.INEN = 1;
    1e1e:	7818      	ldrb	r0, [r3, #0]
    1e20:	4320      	orrs	r0, r4
    1e22:	7018      	strb	r0, [r3, #0]
    1e24:	3104      	adds	r1, #4
	for (i = 0; i < NUM_COL; i++) {
    1e26:	291c      	cmp	r1, #28
    1e28:	d1ed      	bne.n	1e06 <readKeyboard+0xfa>
    1e2a:	2300      	movs	r3, #0
    1e2c:	469c      	mov	ip, r3
		REG_PORT_OUTSET0 = kb_row[i];
    1e2e:	4b31      	ldr	r3, [pc, #196]	; (1ef4 <readKeyboard+0x1e8>)
    1e30:	469b      	mov	fp, r3
			if((PORT->Group[0].IN.reg & kb_col[j]) != 0)
    1e32:	4d28      	ldr	r5, [pc, #160]	; (1ed4 <readKeyboard+0x1c8>)
				scanCodes[scanCodeIndex] = (j * NUM_ROW) + i;
    1e34:	4b26      	ldr	r3, [pc, #152]	; (1ed0 <readKeyboard+0x1c4>)
    1e36:	4698      	mov	r8, r3
		REG_PORT_OUTCLR0 = kb_row[i];
    1e38:	4b29      	ldr	r3, [pc, #164]	; (1ee0 <readKeyboard+0x1d4>)
    1e3a:	469a      	mov	sl, r3
    1e3c:	46b1      	mov	r9, r6
    1e3e:	003e      	movs	r6, r7
    1e40:	4667      	mov	r7, ip
    1e42:	e015      	b.n	1e70 <readKeyboard+0x164>
    1e44:	3104      	adds	r1, #4
    1e46:	330a      	adds	r3, #10
		for (j = 0; j < NUM_COL; j++) {
    1e48:	42a3      	cmp	r3, r4
    1e4a:	d008      	beq.n	1e5e <readKeyboard+0x152>
			if((PORT->Group[0].IN.reg & kb_col[j]) != 0)
    1e4c:	6a28      	ldr	r0, [r5, #32]
    1e4e:	680e      	ldr	r6, [r1, #0]
    1e50:	4206      	tst	r6, r0
    1e52:	d0f7      	beq.n	1e44 <readKeyboard+0x138>
				scanCodes[scanCodeIndex] = (j * NUM_ROW) + i;
    1e54:	0090      	lsls	r0, r2, #2
    1e56:	4646      	mov	r6, r8
    1e58:	5183      	str	r3, [r0, r6]
				scanCodeIndex++;
    1e5a:	3201      	adds	r2, #1
    1e5c:	e7f2      	b.n	1e44 <readKeyboard+0x138>
    1e5e:	9e00      	ldr	r6, [sp, #0]
		REG_PORT_OUTCLR0 = kb_row[i];
    1e60:	4663      	mov	r3, ip
    1e62:	681b      	ldr	r3, [r3, #0]
    1e64:	4651      	mov	r1, sl
    1e66:	600b      	str	r3, [r1, #0]
	for (i = 0; i < NUM_ROW; i++) {
    1e68:	3701      	adds	r7, #1
    1e6a:	3604      	adds	r6, #4
    1e6c:	2f0a      	cmp	r7, #10
    1e6e:	d009      	beq.n	1e84 <readKeyboard+0x178>
    1e70:	46b4      	mov	ip, r6
		REG_PORT_OUTSET0 = kb_row[i];
    1e72:	465b      	mov	r3, fp
    1e74:	6831      	ldr	r1, [r6, #0]
    1e76:	6019      	str	r1, [r3, #0]
    1e78:	003b      	movs	r3, r7
    1e7a:	003c      	movs	r4, r7
    1e7c:	3446      	adds	r4, #70	; 0x46
    1e7e:	4916      	ldr	r1, [pc, #88]	; (1ed8 <readKeyboard+0x1cc>)
    1e80:	9600      	str	r6, [sp, #0]
    1e82:	e7e3      	b.n	1e4c <readKeyboard+0x140>
    1e84:	464e      	mov	r6, r9
	for(i = 0 ; i < scanCodeIndex ; i++)
    1e86:	2a00      	cmp	r2, #0
    1e88:	dd08      	ble.n	1e9c <readKeyboard+0x190>
    1e8a:	4b1c      	ldr	r3, [pc, #112]	; (1efc <readKeyboard+0x1f0>)
    1e8c:	0092      	lsls	r2, r2, #2
    1e8e:	4910      	ldr	r1, [pc, #64]	; (1ed0 <readKeyboard+0x1c4>)
    1e90:	188a      	adds	r2, r1, r2
		scanCodeBuffer[i] = scanCodes[i];	
    1e92:	ce02      	ldmia	r6!, {r1}
    1e94:	7019      	strb	r1, [r3, #0]
    1e96:	3301      	adds	r3, #1
	for(i = 0 ; i < scanCodeIndex ; i++)
    1e98:	42b2      	cmp	r2, r6
    1e9a:	d1fa      	bne.n	1e92 <readKeyboard+0x186>
		REG_PORT_OUTSET0 = kb_row[i];
    1e9c:	2400      	movs	r4, #0
		if(keyDown(i) && !scanCodesContains(i))
    1e9e:	4d18      	ldr	r5, [pc, #96]	; (1f00 <readKeyboard+0x1f4>)
    1ea0:	4e18      	ldr	r6, [pc, #96]	; (1f04 <readKeyboard+0x1f8>)
			removeFromKeyDown(i);
    1ea2:	4f19      	ldr	r7, [pc, #100]	; (1f08 <readKeyboard+0x1fc>)
    1ea4:	e002      	b.n	1eac <readKeyboard+0x1a0>
	for(i = 0; i < 70; i++)
    1ea6:	3401      	adds	r4, #1
    1ea8:	2c46      	cmp	r4, #70	; 0x46
    1eaa:	d00a      	beq.n	1ec2 <readKeyboard+0x1b6>
		if(keyDown(i) && !scanCodesContains(i))
    1eac:	0020      	movs	r0, r4
    1eae:	47a8      	blx	r5
    1eb0:	2800      	cmp	r0, #0
    1eb2:	d0f8      	beq.n	1ea6 <readKeyboard+0x19a>
    1eb4:	0020      	movs	r0, r4
    1eb6:	47b0      	blx	r6
    1eb8:	2800      	cmp	r0, #0
    1eba:	d1f4      	bne.n	1ea6 <readKeyboard+0x19a>
			removeFromKeyDown(i);
    1ebc:	0020      	movs	r0, r4
    1ebe:	47b8      	blx	r7
    1ec0:	e7f1      	b.n	1ea6 <readKeyboard+0x19a>
}
    1ec2:	b003      	add	sp, #12
    1ec4:	bc3c      	pop	{r2, r3, r4, r5}
    1ec6:	4690      	mov	r8, r2
    1ec8:	4699      	mov	r9, r3
    1eca:	46a2      	mov	sl, r4
    1ecc:	46ab      	mov	fp, r5
    1ece:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ed0:	2000003c 	.word	0x2000003c
    1ed4:	41004400 	.word	0x41004400
    1ed8:	00005d6c 	.word	0x00005d6c
    1edc:	41004408 	.word	0x41004408
    1ee0:	41004414 	.word	0x41004414
    1ee4:	00005da4 	.word	0x00005da4
    1ee8:	41004404 	.word	0x41004404
    1eec:	00005dcc 	.word	0x00005dcc
    1ef0:	41004440 	.word	0x41004440
    1ef4:	41004418 	.word	0x41004418
    1ef8:	00005d88 	.word	0x00005d88
    1efc:	20000028 	.word	0x20000028
    1f00:	00001cbd 	.word	0x00001cbd
    1f04:	00001c91 	.word	0x00001c91
    1f08:	00001ce9 	.word	0x00001ce9

00001f0c <clearCursorBuffer>:

void clearCursorBuffer(void)
{
    1f0c:	4b04      	ldr	r3, [pc, #16]	; (1f20 <clearCursorBuffer+0x14>)
    1f0e:	0019      	movs	r1, r3
    1f10:	31c8      	adds	r1, #200	; 0xc8
	for(uint16_t i = 0 ; i < 200 ; i++)
	{
		cursorBuffer[i] = 0x00;
    1f12:	2200      	movs	r2, #0
    1f14:	701a      	strb	r2, [r3, #0]
    1f16:	3301      	adds	r3, #1
	for(uint16_t i = 0 ; i < 200 ; i++)
    1f18:	428b      	cmp	r3, r1
    1f1a:	d1fb      	bne.n	1f14 <clearCursorBuffer+0x8>
	}
}
    1f1c:	4770      	bx	lr
    1f1e:	46c0      	nop			; (mov r8, r8)
    1f20:	20000304 	.word	0x20000304

00001f24 <drawCursorBuffer>:

void drawCursorBuffer(void)
{
    1f24:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f26:	46c6      	mov	lr, r8
    1f28:	b500      	push	{lr}
    1f2a:	b082      	sub	sp, #8
	REG_PORT_OUTCLR1 = LCD_CS;
    1f2c:	2280      	movs	r2, #128	; 0x80
    1f2e:	03d2      	lsls	r2, r2, #15
    1f30:	4b24      	ldr	r3, [pc, #144]	; (1fc4 <drawCursorBuffer+0xa0>)
    1f32:	601a      	str	r2, [r3, #0]
	setXY(xCharPos*10,yCharPos*20,xCharPos*10+9,yCharPos*20+19);
    1f34:	4d24      	ldr	r5, [pc, #144]	; (1fc8 <drawCursorBuffer+0xa4>)
    1f36:	7828      	ldrb	r0, [r5, #0]
    1f38:	0083      	lsls	r3, r0, #2
    1f3a:	18c0      	adds	r0, r0, r3
    1f3c:	0040      	lsls	r0, r0, #1
    1f3e:	4c23      	ldr	r4, [pc, #140]	; (1fcc <drawCursorBuffer+0xa8>)
    1f40:	7821      	ldrb	r1, [r4, #0]
    1f42:	2314      	movs	r3, #20
    1f44:	4359      	muls	r1, r3
    1f46:	000b      	movs	r3, r1
    1f48:	3313      	adds	r3, #19
    1f4a:	b29b      	uxth	r3, r3
    1f4c:	0002      	movs	r2, r0
    1f4e:	3209      	adds	r2, #9
    1f50:	b292      	uxth	r2, r2
    1f52:	4e1f      	ldr	r6, [pc, #124]	; (1fd0 <drawCursorBuffer+0xac>)
    1f54:	47b0      	blx	r6
	printf("Draw\t%i, %i, %i, %i\n\r",xCharPos*10,yCharPos*20,xCharPos*10+9,yCharPos*20+19);
    1f56:	782b      	ldrb	r3, [r5, #0]
    1f58:	0099      	lsls	r1, r3, #2
    1f5a:	18c9      	adds	r1, r1, r3
    1f5c:	0049      	lsls	r1, r1, #1
    1f5e:	7823      	ldrb	r3, [r4, #0]
    1f60:	009a      	lsls	r2, r3, #2
    1f62:	18d2      	adds	r2, r2, r3
    1f64:	0092      	lsls	r2, r2, #2
    1f66:	000b      	movs	r3, r1
    1f68:	3309      	adds	r3, #9
    1f6a:	0010      	movs	r0, r2
    1f6c:	3013      	adds	r0, #19
    1f6e:	9000      	str	r0, [sp, #0]
    1f70:	4818      	ldr	r0, [pc, #96]	; (1fd4 <drawCursorBuffer+0xb0>)
    1f72:	4c19      	ldr	r4, [pc, #100]	; (1fd8 <drawCursorBuffer+0xb4>)
    1f74:	47a0      	blx	r4
    1f76:	4c19      	ldr	r4, [pc, #100]	; (1fdc <drawCursorBuffer+0xb8>)
    1f78:	0025      	movs	r5, r4
    1f7a:	35c8      	adds	r5, #200	; 0xc8
	for(uint16_t i = 0 ; i < 200 ; i++)
	{
		if((cursorBuffer[i] == 0xFF))
		setPixel((fore_Color_High<<8)|fore_Color_Low);
		else
		setPixel((back_Color_High<<8)|back_Color_Low);
    1f7c:	4b18      	ldr	r3, [pc, #96]	; (1fe0 <drawCursorBuffer+0xbc>)
    1f7e:	4698      	mov	r8, r3
    1f80:	4f18      	ldr	r7, [pc, #96]	; (1fe4 <drawCursorBuffer+0xc0>)
    1f82:	4e19      	ldr	r6, [pc, #100]	; (1fe8 <drawCursorBuffer+0xc4>)
    1f84:	e00b      	b.n	1f9e <drawCursorBuffer+0x7a>
		setPixel((fore_Color_High<<8)|fore_Color_Low);
    1f86:	4b19      	ldr	r3, [pc, #100]	; (1fec <drawCursorBuffer+0xc8>)
    1f88:	8818      	ldrh	r0, [r3, #0]
    1f8a:	0200      	lsls	r0, r0, #8
    1f8c:	4b18      	ldr	r3, [pc, #96]	; (1ff0 <drawCursorBuffer+0xcc>)
    1f8e:	881b      	ldrh	r3, [r3, #0]
    1f90:	4318      	orrs	r0, r3
    1f92:	b280      	uxth	r0, r0
    1f94:	4b14      	ldr	r3, [pc, #80]	; (1fe8 <drawCursorBuffer+0xc4>)
    1f96:	4798      	blx	r3
    1f98:	3401      	adds	r4, #1
	for(uint16_t i = 0 ; i < 200 ; i++)
    1f9a:	42ac      	cmp	r4, r5
    1f9c:	d00a      	beq.n	1fb4 <drawCursorBuffer+0x90>
		if((cursorBuffer[i] == 0xFF))
    1f9e:	7823      	ldrb	r3, [r4, #0]
    1fa0:	2bff      	cmp	r3, #255	; 0xff
    1fa2:	d0f0      	beq.n	1f86 <drawCursorBuffer+0x62>
		setPixel((back_Color_High<<8)|back_Color_Low);
    1fa4:	4643      	mov	r3, r8
    1fa6:	8818      	ldrh	r0, [r3, #0]
    1fa8:	0200      	lsls	r0, r0, #8
    1faa:	883b      	ldrh	r3, [r7, #0]
    1fac:	4318      	orrs	r0, r3
    1fae:	b280      	uxth	r0, r0
    1fb0:	47b0      	blx	r6
    1fb2:	e7f1      	b.n	1f98 <drawCursorBuffer+0x74>
	}
	REG_PORT_OUTSET1 = LCD_CS;
    1fb4:	2280      	movs	r2, #128	; 0x80
    1fb6:	03d2      	lsls	r2, r2, #15
    1fb8:	4b0e      	ldr	r3, [pc, #56]	; (1ff4 <drawCursorBuffer+0xd0>)
    1fba:	601a      	str	r2, [r3, #0]

}
    1fbc:	b002      	add	sp, #8
    1fbe:	bc04      	pop	{r2}
    1fc0:	4690      	mov	r8, r2
    1fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1fc4:	41004494 	.word	0x41004494
    1fc8:	20000298 	.word	0x20000298
    1fcc:	20000299 	.word	0x20000299
    1fd0:	00002555 	.word	0x00002555
    1fd4:	00005d54 	.word	0x00005d54
    1fd8:	00002ded 	.word	0x00002ded
    1fdc:	20000304 	.word	0x20000304
    1fe0:	200003d2 	.word	0x200003d2
    1fe4:	200003cc 	.word	0x200003cc
    1fe8:	00002735 	.word	0x00002735
    1fec:	200003ce 	.word	0x200003ce
    1ff0:	200003d0 	.word	0x200003d0
    1ff4:	41004498 	.word	0x41004498

00001ff8 <moveCursor>:
		}
	}	
}

void moveCursor(uint8_t x, uint8_t y)
{
    1ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ffa:	46ce      	mov	lr, r9
    1ffc:	4647      	mov	r7, r8
    1ffe:	b580      	push	{r7, lr}
    2000:	b083      	sub	sp, #12
    2002:	0006      	movs	r6, r0
    2004:	000d      	movs	r5, r1
	
	//All this function does is read the GRAM and move the cursor.
	
	
	//set PB07 to input
	REG_PORT_DIRCLR1 = PORT_PB07;
    2006:	2280      	movs	r2, #128	; 0x80
    2008:	4b30      	ldr	r3, [pc, #192]	; (20cc <STACK_SIZE+0xcc>)
    200a:	601a      	str	r2, [r3, #0]
	PORT->Group[1].PINCFG[7].bit.INEN = 1;
    200c:	4a30      	ldr	r2, [pc, #192]	; (20d0 <STACK_SIZE+0xd0>)
    200e:	23c7      	movs	r3, #199	; 0xc7
    2010:	5cd1      	ldrb	r1, [r2, r3]
    2012:	2002      	movs	r0, #2
    2014:	4301      	orrs	r1, r0
    2016:	54d1      	strb	r1, [r2, r3]
	PORT->Group[1].PINCFG[7].bit.PULLEN = 1;
    2018:	5cd1      	ldrb	r1, [r2, r3]
    201a:	2004      	movs	r0, #4
    201c:	4301      	orrs	r1, r0
    201e:	54d1      	strb	r1, [r2, r3]
	
	
	//Per page 40 of datasheet (5.1.2.7, 16-bit
	//parallel interface for data ram read.
	REG_PORT_OUTCLR1 = LCD_CS;
    2020:	4c2c      	ldr	r4, [pc, #176]	; (20d4 <STACK_SIZE+0xd4>)
    2022:	2380      	movs	r3, #128	; 0x80
    2024:	03db      	lsls	r3, r3, #15
    2026:	6023      	str	r3, [r4, #0]
	setXY(x*10,y*20,x*10+9,y*20+19);
    2028:	00b0      	lsls	r0, r6, #2
    202a:	1830      	adds	r0, r6, r0
    202c:	0040      	lsls	r0, r0, #1
    202e:	2114      	movs	r1, #20
    2030:	4369      	muls	r1, r5
    2032:	000b      	movs	r3, r1
    2034:	3313      	adds	r3, #19
    2036:	b29b      	uxth	r3, r3
    2038:	0002      	movs	r2, r0
    203a:	3209      	adds	r2, #9
    203c:	b292      	uxth	r2, r2
    203e:	4f26      	ldr	r7, [pc, #152]	; (20d8 <STACK_SIZE+0xd8>)
    2040:	47b8      	blx	r7
	printf("Read\t%i, %i, %i, %i\n\r",x*10,y*20,x*10+9,y*20+19);
    2042:	00b1      	lsls	r1, r6, #2
    2044:	1989      	adds	r1, r1, r6
    2046:	0049      	lsls	r1, r1, #1
    2048:	00aa      	lsls	r2, r5, #2
    204a:	1952      	adds	r2, r2, r5
    204c:	0092      	lsls	r2, r2, #2
    204e:	000b      	movs	r3, r1
    2050:	3309      	adds	r3, #9
    2052:	0010      	movs	r0, r2
    2054:	3013      	adds	r0, #19
    2056:	9000      	str	r0, [sp, #0]
    2058:	4820      	ldr	r0, [pc, #128]	; (20dc <STACK_SIZE+0xdc>)
    205a:	4d21      	ldr	r5, [pc, #132]	; (20e0 <STACK_SIZE+0xe0>)
    205c:	47a8      	blx	r5
	
	
	//Send'Memory read' command 0x2E00, no data bit
	LCD_Write_COM16(0x2E,0x00);
    205e:	2100      	movs	r1, #0
    2060:	202e      	movs	r0, #46	; 0x2e
    2062:	4b20      	ldr	r3, [pc, #128]	; (20e4 <STACK_SIZE+0xe4>)
    2064:	4798      	blx	r3
	REG_PORT_OUTSET1 = LCD_DC;
    2066:	4b20      	ldr	r3, [pc, #128]	; (20e8 <STACK_SIZE+0xe8>)
    2068:	2280      	movs	r2, #128	; 0x80
    206a:	0412      	lsls	r2, r2, #16
    206c:	601a      	str	r2, [r3, #0]

	//needs dummy write, per data sheet, page 40
	REG_PORT_OUTCLR1 = LCD_RD;
    206e:	2280      	movs	r2, #128	; 0x80
    2070:	0252      	lsls	r2, r2, #9
    2072:	6022      	str	r2, [r4, #0]
	REG_PORT_OUTSET1 = LCD_RD;
    2074:	601a      	str	r2, [r3, #0]
    2076:	4b1d      	ldr	r3, [pc, #116]	; (20ec <STACK_SIZE+0xec>)
    2078:	22c9      	movs	r2, #201	; 0xc9
    207a:	4694      	mov	ip, r2
    207c:	449c      	add	ip, r3
	
	for(uint8_t pixel = 0; pixel <= 200 ; pixel++)
	{
		REG_PORT_OUTCLR1 = LCD_RD;
    207e:	0020      	movs	r0, r4
    2080:	2280      	movs	r2, #128	; 0x80
    2082:	0252      	lsls	r2, r2, #9
		REG_PORT_OUTSET1 = LCD_RD;
    2084:	4918      	ldr	r1, [pc, #96]	; (20e8 <STACK_SIZE+0xe8>)

		//get the pin state, stuff into array
		
		//This can be expanded with else if for the MSBs
		//of all the colors; see datasheet page 40.
		if((PORT->Group[1].IN.reg & PORT_PB07) != 0)
    2086:	4f12      	ldr	r7, [pc, #72]	; (20d0 <STACK_SIZE+0xd0>)
    2088:	26a0      	movs	r6, #160	; 0xa0
    208a:	2580      	movs	r5, #128	; 0x80
		{
			cursorBuffer[pixel] = 0xFF;
		}
		else
		{
			cursorBuffer[pixel] = 0x00;
    208c:	2400      	movs	r4, #0
    208e:	46a1      	mov	r9, r4
			cursorBuffer[pixel] = 0xFF;
    2090:	34ff      	adds	r4, #255	; 0xff
    2092:	46a0      	mov	r8, r4
    2094:	e006      	b.n	20a4 <STACK_SIZE+0xa4>
			cursorBuffer[pixel] = 0x00;
    2096:	464c      	mov	r4, r9
    2098:	701c      	strb	r4, [r3, #0]
		//dummy read, because pixel data broken up
		//per datasheet page 40. Everything after
		//the dummy write is BLUE pixels. Do we ever
		//need blue? IDK.
		
		REG_PORT_OUTCLR1 = LCD_RD;
    209a:	6002      	str	r2, [r0, #0]
		REG_PORT_OUTSET1 = LCD_RD;
    209c:	600a      	str	r2, [r1, #0]
    209e:	3301      	adds	r3, #1
	for(uint8_t pixel = 0; pixel <= 200 ; pixel++)
    20a0:	4563      	cmp	r3, ip
    20a2:	d007      	beq.n	20b4 <STACK_SIZE+0xb4>
		REG_PORT_OUTCLR1 = LCD_RD;
    20a4:	6002      	str	r2, [r0, #0]
		REG_PORT_OUTSET1 = LCD_RD;
    20a6:	600a      	str	r2, [r1, #0]
		if((PORT->Group[1].IN.reg & PORT_PB07) != 0)
    20a8:	59bc      	ldr	r4, [r7, r6]
    20aa:	4225      	tst	r5, r4
    20ac:	d0f3      	beq.n	2096 <STACK_SIZE+0x96>
			cursorBuffer[pixel] = 0xFF;
    20ae:	4644      	mov	r4, r8
    20b0:	701c      	strb	r4, [r3, #0]
    20b2:	e7f2      	b.n	209a <STACK_SIZE+0x9a>
	}
	
	REG_PORT_OUTSET1 = LCD_DC;
    20b4:	2280      	movs	r2, #128	; 0x80
    20b6:	0412      	lsls	r2, r2, #16
    20b8:	4b0b      	ldr	r3, [pc, #44]	; (20e8 <STACK_SIZE+0xe8>)
    20ba:	601a      	str	r2, [r3, #0]
	REG_PORT_DIRSET1 = 0x0000FFFF;
    20bc:	4a0c      	ldr	r2, [pc, #48]	; (20f0 <STACK_SIZE+0xf0>)
    20be:	4b0d      	ldr	r3, [pc, #52]	; (20f4 <STACK_SIZE+0xf4>)
    20c0:	601a      	str	r2, [r3, #0]
	/*//The cursor data is in the cursorBuffer, so now we move
	//xCharPos and yCharPos
	xCharPos = x;
	yCharPos = y;
	*/
}
    20c2:	b003      	add	sp, #12
    20c4:	bc0c      	pop	{r2, r3}
    20c6:	4690      	mov	r8, r2
    20c8:	4699      	mov	r9, r3
    20ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    20cc:	41004484 	.word	0x41004484
    20d0:	41004400 	.word	0x41004400
    20d4:	41004494 	.word	0x41004494
    20d8:	00002555 	.word	0x00002555
    20dc:	00005df4 	.word	0x00005df4
    20e0:	00002ded 	.word	0x00002ded
    20e4:	000027a1 	.word	0x000027a1
    20e8:	41004498 	.word	0x41004498
    20ec:	20000304 	.word	0x20000304
    20f0:	0000ffff 	.word	0x0000ffff
    20f4:	41004488 	.word	0x41004488

000020f8 <blinkCursor>:

void blinkCursor(void)
{
    20f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    20fa:	46c6      	mov	lr, r8
    20fc:	b500      	push	{lr}
	if(cursorBlinkState)
    20fe:	4b39      	ldr	r3, [pc, #228]	; (21e4 <blinkCursor+0xec>)
    2100:	781b      	ldrb	r3, [r3, #0]
    2102:	2b00      	cmp	r3, #0
    2104:	d037      	beq.n	2176 <blinkCursor+0x7e>
	{

		//Draw the *inverse* of cursorBuffer
		setXY(xCharPos*10,yCharPos*20,xCharPos*10+9,yCharPos*20+19);
    2106:	4b38      	ldr	r3, [pc, #224]	; (21e8 <blinkCursor+0xf0>)
    2108:	7818      	ldrb	r0, [r3, #0]
    210a:	0083      	lsls	r3, r0, #2
    210c:	18c0      	adds	r0, r0, r3
    210e:	0040      	lsls	r0, r0, #1
    2110:	4b36      	ldr	r3, [pc, #216]	; (21ec <blinkCursor+0xf4>)
    2112:	7819      	ldrb	r1, [r3, #0]
    2114:	2314      	movs	r3, #20
    2116:	4359      	muls	r1, r3
    2118:	000b      	movs	r3, r1
    211a:	3313      	adds	r3, #19
    211c:	b29b      	uxth	r3, r3
    211e:	0002      	movs	r2, r0
    2120:	3209      	adds	r2, #9
    2122:	b292      	uxth	r2, r2
    2124:	4c32      	ldr	r4, [pc, #200]	; (21f0 <blinkCursor+0xf8>)
    2126:	47a0      	blx	r4
    2128:	4c32      	ldr	r4, [pc, #200]	; (21f4 <blinkCursor+0xfc>)
    212a:	0025      	movs	r5, r4
    212c:	35c8      	adds	r5, #200	; 0xc8
		for(uint16_t i = 0 ; i < 200 ; i++)
		{
			if((cursorBuffer[i] != 0xFF))
			setPixel((fore_Color_High<<8)|fore_Color_Low);
			else
			setPixel((back_Color_High<<8)|back_Color_Low);
    212e:	4b32      	ldr	r3, [pc, #200]	; (21f8 <blinkCursor+0x100>)
    2130:	4698      	mov	r8, r3
    2132:	4f32      	ldr	r7, [pc, #200]	; (21fc <blinkCursor+0x104>)
    2134:	4e32      	ldr	r6, [pc, #200]	; (2200 <blinkCursor+0x108>)
    2136:	e009      	b.n	214c <blinkCursor+0x54>
    2138:	4643      	mov	r3, r8
    213a:	8818      	ldrh	r0, [r3, #0]
    213c:	0200      	lsls	r0, r0, #8
    213e:	883b      	ldrh	r3, [r7, #0]
    2140:	4318      	orrs	r0, r3
    2142:	b280      	uxth	r0, r0
    2144:	47b0      	blx	r6
    2146:	3401      	adds	r4, #1
		for(uint16_t i = 0 ; i < 200 ; i++)
    2148:	42a5      	cmp	r5, r4
    214a:	d00c      	beq.n	2166 <blinkCursor+0x6e>
			if((cursorBuffer[i] != 0xFF))
    214c:	7823      	ldrb	r3, [r4, #0]
    214e:	2bff      	cmp	r3, #255	; 0xff
    2150:	d0f2      	beq.n	2138 <blinkCursor+0x40>
			setPixel((fore_Color_High<<8)|fore_Color_Low);
    2152:	4b2c      	ldr	r3, [pc, #176]	; (2204 <blinkCursor+0x10c>)
    2154:	8818      	ldrh	r0, [r3, #0]
    2156:	0200      	lsls	r0, r0, #8
    2158:	4b2b      	ldr	r3, [pc, #172]	; (2208 <blinkCursor+0x110>)
    215a:	881b      	ldrh	r3, [r3, #0]
    215c:	4318      	orrs	r0, r3
    215e:	b280      	uxth	r0, r0
    2160:	4b27      	ldr	r3, [pc, #156]	; (2200 <blinkCursor+0x108>)
    2162:	4798      	blx	r3
    2164:	e7ef      	b.n	2146 <blinkCursor+0x4e>
		}
		
		//finally set cursorBlinkState to false
		cursorBlinkState = !cursorBlinkState;
    2166:	4a1f      	ldr	r2, [pc, #124]	; (21e4 <blinkCursor+0xec>)
    2168:	7813      	ldrb	r3, [r2, #0]
    216a:	2101      	movs	r1, #1
    216c:	404b      	eors	r3, r1
    216e:	7013      	strb	r3, [r2, #0]
			setPixel((back_Color_High<<8)|back_Color_Low);
		}
		//set cursorBlinkState to true
		cursorBlinkState = !cursorBlinkState;
	}
}
    2170:	bc04      	pop	{r2}
    2172:	4690      	mov	r8, r2
    2174:	bdf0      	pop	{r4, r5, r6, r7, pc}
		setXY(xCharPos*10,yCharPos*20,xCharPos*10+9,yCharPos*20+19);
    2176:	4b1c      	ldr	r3, [pc, #112]	; (21e8 <blinkCursor+0xf0>)
    2178:	7818      	ldrb	r0, [r3, #0]
    217a:	0083      	lsls	r3, r0, #2
    217c:	18c0      	adds	r0, r0, r3
    217e:	0040      	lsls	r0, r0, #1
    2180:	4b1a      	ldr	r3, [pc, #104]	; (21ec <blinkCursor+0xf4>)
    2182:	7819      	ldrb	r1, [r3, #0]
    2184:	2314      	movs	r3, #20
    2186:	4359      	muls	r1, r3
    2188:	000b      	movs	r3, r1
    218a:	3313      	adds	r3, #19
    218c:	b29b      	uxth	r3, r3
    218e:	0002      	movs	r2, r0
    2190:	3209      	adds	r2, #9
    2192:	b292      	uxth	r2, r2
    2194:	4c16      	ldr	r4, [pc, #88]	; (21f0 <blinkCursor+0xf8>)
    2196:	47a0      	blx	r4
    2198:	4c16      	ldr	r4, [pc, #88]	; (21f4 <blinkCursor+0xfc>)
    219a:	0025      	movs	r5, r4
    219c:	35c8      	adds	r5, #200	; 0xc8
			setPixel((back_Color_High<<8)|back_Color_Low);
    219e:	4b16      	ldr	r3, [pc, #88]	; (21f8 <blinkCursor+0x100>)
    21a0:	4698      	mov	r8, r3
    21a2:	4f16      	ldr	r7, [pc, #88]	; (21fc <blinkCursor+0x104>)
    21a4:	4e16      	ldr	r6, [pc, #88]	; (2200 <blinkCursor+0x108>)
    21a6:	e00b      	b.n	21c0 <blinkCursor+0xc8>
			setPixel((fore_Color_High<<8)|fore_Color_Low);
    21a8:	4b16      	ldr	r3, [pc, #88]	; (2204 <blinkCursor+0x10c>)
    21aa:	8818      	ldrh	r0, [r3, #0]
    21ac:	0200      	lsls	r0, r0, #8
    21ae:	4b16      	ldr	r3, [pc, #88]	; (2208 <blinkCursor+0x110>)
    21b0:	881b      	ldrh	r3, [r3, #0]
    21b2:	4318      	orrs	r0, r3
    21b4:	b280      	uxth	r0, r0
    21b6:	4b12      	ldr	r3, [pc, #72]	; (2200 <blinkCursor+0x108>)
    21b8:	4798      	blx	r3
    21ba:	3401      	adds	r4, #1
		for(uint16_t i = 0 ; i < 200 ; i++)
    21bc:	42ac      	cmp	r4, r5
    21be:	d00a      	beq.n	21d6 <blinkCursor+0xde>
			if((cursorBuffer[i] == 0xFF))
    21c0:	7823      	ldrb	r3, [r4, #0]
    21c2:	2bff      	cmp	r3, #255	; 0xff
    21c4:	d0f0      	beq.n	21a8 <blinkCursor+0xb0>
			setPixel((back_Color_High<<8)|back_Color_Low);
    21c6:	4643      	mov	r3, r8
    21c8:	8818      	ldrh	r0, [r3, #0]
    21ca:	0200      	lsls	r0, r0, #8
    21cc:	883b      	ldrh	r3, [r7, #0]
    21ce:	4318      	orrs	r0, r3
    21d0:	b280      	uxth	r0, r0
    21d2:	47b0      	blx	r6
    21d4:	e7f1      	b.n	21ba <blinkCursor+0xc2>
		cursorBlinkState = !cursorBlinkState;
    21d6:	4a03      	ldr	r2, [pc, #12]	; (21e4 <blinkCursor+0xec>)
    21d8:	7813      	ldrb	r3, [r2, #0]
    21da:	2101      	movs	r1, #1
    21dc:	404b      	eors	r3, r1
    21de:	7013      	strb	r3, [r2, #0]
}
    21e0:	e7c6      	b.n	2170 <blinkCursor+0x78>
    21e2:	46c0      	nop			; (mov r8, r8)
    21e4:	20000010 	.word	0x20000010
    21e8:	20000298 	.word	0x20000298
    21ec:	20000299 	.word	0x20000299
    21f0:	00002555 	.word	0x00002555
    21f4:	20000304 	.word	0x20000304
    21f8:	200003d2 	.word	0x200003d2
    21fc:	200003cc 	.word	0x200003cc
    2200:	00002735 	.word	0x00002735
    2204:	200003ce 	.word	0x200003ce
    2208:	200003d0 	.word	0x200003d0

0000220c <printKeyboardBuffer>:
{
    220c:	b5f0      	push	{r4, r5, r6, r7, lr}
    220e:	46de      	mov	lr, fp
    2210:	4657      	mov	r7, sl
    2212:	464e      	mov	r6, r9
    2214:	4645      	mov	r5, r8
    2216:	b5e0      	push	{r5, r6, r7, lr}
    2218:	b0a7      	sub	sp, #156	; 0x9c
	char noCase[] =	  {0xFF,0xFF,0xFF,0xFF,0xFF,	//Col0, Row0-4
    221a:	4c8d      	ldr	r4, [pc, #564]	; (2450 <printKeyboardBuffer+0x244>)
    221c:	2246      	movs	r2, #70	; 0x46
    221e:	0021      	movs	r1, r4
    2220:	a814      	add	r0, sp, #80	; 0x50
    2222:	4d8c      	ldr	r5, [pc, #560]	; (2454 <printKeyboardBuffer+0x248>)
    2224:	47a8      	blx	r5
	char shiftCase[] = {0xFF,0xFF,0xFF,0xFF,0xFF,	//Col0, Row0-4
    2226:	0021      	movs	r1, r4
    2228:	3148      	adds	r1, #72	; 0x48
    222a:	2246      	movs	r2, #70	; 0x46
    222c:	a802      	add	r0, sp, #8
    222e:	47a8      	blx	r5
    2230:	4e89      	ldr	r6, [pc, #548]	; (2458 <printKeyboardBuffer+0x24c>)
    2232:	0031      	movs	r1, r6
    2234:	3114      	adds	r1, #20
    2236:	0034      	movs	r4, r6
	bool shifted = false;
    2238:	2300      	movs	r3, #0
    223a:	9301      	str	r3, [sp, #4]
    223c:	e002      	b.n	2244 <printKeyboardBuffer+0x38>
    223e:	3401      	adds	r4, #1
	for(int i=0; i<20; i++)
    2240:	428c      	cmp	r4, r1
    2242:	d00b      	beq.n	225c <printKeyboardBuffer+0x50>
		if((scanCodeBuffer[i] == 13) | (scanCodeBuffer[i] == 49))
    2244:	7823      	ldrb	r3, [r4, #0]
    2246:	001a      	movs	r2, r3
    2248:	3a0d      	subs	r2, #13
    224a:	4250      	negs	r0, r2
    224c:	4142      	adcs	r2, r0
    224e:	3b31      	subs	r3, #49	; 0x31
    2250:	4258      	negs	r0, r3
    2252:	4143      	adcs	r3, r0
    2254:	4313      	orrs	r3, r2
    2256:	d0f2      	beq.n	223e <printKeyboardBuffer+0x32>
			shifted = true;
    2258:	9301      	str	r3, [sp, #4]
    225a:	e7f0      	b.n	223e <printKeyboardBuffer+0x32>
    225c:	2500      	movs	r5, #0
		if(!keyDown(scanCodeBuffer[i]))
    225e:	4b7e      	ldr	r3, [pc, #504]	; (2458 <printKeyboardBuffer+0x24c>)
    2260:	4699      	mov	r9, r3
    2262:	4b7e      	ldr	r3, [pc, #504]	; (245c <printKeyboardBuffer+0x250>)
    2264:	469b      	mov	fp, r3
			keyDownBuffer[i] = scanCodeBuffer[i];
    2266:	4b7e      	ldr	r3, [pc, #504]	; (2460 <printKeyboardBuffer+0x254>)
    2268:	469a      	mov	sl, r3
    226a:	e007      	b.n	227c <printKeyboardBuffer+0x70>
				if(xCharPos > 0)  ///I think I need to decouple the reading the next cursor
    226c:	4b7d      	ldr	r3, [pc, #500]	; (2464 <printKeyboardBuffer+0x258>)
    226e:	781b      	ldrb	r3, [r3, #0]
    2270:	2b00      	cmp	r3, #0
    2272:	d134      	bne.n	22de <printKeyboardBuffer+0xd2>
	for(int i=0; i<20; i++)
    2274:	3501      	adds	r5, #1
    2276:	2d14      	cmp	r5, #20
    2278:	d100      	bne.n	227c <printKeyboardBuffer+0x70>
    227a:	e0dc      	b.n	2436 <printKeyboardBuffer+0x22a>
		if(!keyDown(scanCodeBuffer[i]))
    227c:	464b      	mov	r3, r9
    227e:	5cef      	ldrb	r7, [r5, r3]
    2280:	0038      	movs	r0, r7
    2282:	47d8      	blx	fp
    2284:	2800      	cmp	r0, #0
    2286:	d1f5      	bne.n	2274 <printKeyboardBuffer+0x68>
			keyDownBuffer[i] = scanCodeBuffer[i];
    2288:	4653      	mov	r3, sl
    228a:	555f      	strb	r7, [r3, r5]
			if(scanCodeBuffer[i] == 0xFF)
    228c:	2fff      	cmp	r7, #255	; 0xff
    228e:	d0f1      	beq.n	2274 <printKeyboardBuffer+0x68>
			else if(scanCodeBuffer[i] == 35) //left
    2290:	2f23      	cmp	r7, #35	; 0x23
    2292:	d0eb      	beq.n	226c <printKeyboardBuffer+0x60>
			else if(scanCodeBuffer[i] == 45)	//down
    2294:	2f2d      	cmp	r7, #45	; 0x2d
    2296:	d038      	beq.n	230a <printKeyboardBuffer+0xfe>
			else if(scanCodeBuffer[i] == 55)	//up
    2298:	2f37      	cmp	r7, #55	; 0x37
    229a:	d04c      	beq.n	2336 <printKeyboardBuffer+0x12a>
			else if(scanCodeBuffer[i] == 65)	//right
    229c:	2f41      	cmp	r7, #65	; 0x41
    229e:	d060      	beq.n	2362 <printKeyboardBuffer+0x156>
			else if((scanCodeBuffer[i] == 49) | (scanCodeBuffer[i] == 13))
    22a0:	2f31      	cmp	r7, #49	; 0x31
    22a2:	d0e7      	beq.n	2274 <printKeyboardBuffer+0x68>
    22a4:	2f0d      	cmp	r7, #13
    22a6:	d0e5      	beq.n	2274 <printKeyboardBuffer+0x68>
			else if(scanCodeBuffer[i] == 58) //Return
    22a8:	2f3a      	cmp	r7, #58	; 0x3a
    22aa:	d070      	beq.n	238e <printKeyboardBuffer+0x182>
			else if(scanCodeBuffer[i] == 69) //Line
    22ac:	2f45      	cmp	r7, #69	; 0x45
    22ae:	d100      	bne.n	22b2 <printKeyboardBuffer+0xa6>
    22b0:	e083      	b.n	23ba <printKeyboardBuffer+0x1ae>
			else if(scanCodeBuffer[i] == 66) //Backspace
    22b2:	2f42      	cmp	r7, #66	; 0x42
    22b4:	d100      	bne.n	22b8 <printKeyboardBuffer+0xac>
    22b6:	e08b      	b.n	23d0 <printKeyboardBuffer+0x1c4>
				if(shifted)
    22b8:	9b01      	ldr	r3, [sp, #4]
    22ba:	2b00      	cmp	r3, #0
    22bc:	d100      	bne.n	22c0 <printKeyboardBuffer+0xb4>
    22be:	e0a3      	b.n	2408 <printKeyboardBuffer+0x1fc>
					drawChar(shiftCase[scanCodeBuffer[i]]);
    22c0:	ab02      	add	r3, sp, #8
    22c2:	5dd8      	ldrb	r0, [r3, r7]
    22c4:	4b68      	ldr	r3, [pc, #416]	; (2468 <printKeyboardBuffer+0x25c>)
    22c6:	4798      	blx	r3
					if(xCharPos < 79)
    22c8:	4b66      	ldr	r3, [pc, #408]	; (2464 <printKeyboardBuffer+0x258>)
    22ca:	7818      	ldrb	r0, [r3, #0]
    22cc:	284e      	cmp	r0, #78	; 0x4e
    22ce:	d800      	bhi.n	22d2 <printKeyboardBuffer+0xc6>
    22d0:	e091      	b.n	23f6 <printKeyboardBuffer+0x1ea>
					cursorBlinkState = true;
    22d2:	2201      	movs	r2, #1
    22d4:	4b65      	ldr	r3, [pc, #404]	; (246c <printKeyboardBuffer+0x260>)
    22d6:	701a      	strb	r2, [r3, #0]
					blinkCursor();
    22d8:	4b65      	ldr	r3, [pc, #404]	; (2470 <printKeyboardBuffer+0x264>)
    22da:	4798      	blx	r3
    22dc:	e7ca      	b.n	2274 <printKeyboardBuffer+0x68>
					printf("left\n\r");
    22de:	4865      	ldr	r0, [pc, #404]	; (2474 <printKeyboardBuffer+0x268>)
    22e0:	4b65      	ldr	r3, [pc, #404]	; (2478 <printKeyboardBuffer+0x26c>)
    22e2:	4798      	blx	r3
					moveCursor(xCharPos-1,yCharPos);
    22e4:	4b65      	ldr	r3, [pc, #404]	; (247c <printKeyboardBuffer+0x270>)
    22e6:	7819      	ldrb	r1, [r3, #0]
    22e8:	4f5e      	ldr	r7, [pc, #376]	; (2464 <printKeyboardBuffer+0x258>)
    22ea:	7838      	ldrb	r0, [r7, #0]
    22ec:	3801      	subs	r0, #1
    22ee:	b2c0      	uxtb	r0, r0
    22f0:	4b63      	ldr	r3, [pc, #396]	; (2480 <printKeyboardBuffer+0x274>)
    22f2:	4798      	blx	r3
					xCharPos--;
    22f4:	783b      	ldrb	r3, [r7, #0]
    22f6:	3b01      	subs	r3, #1
    22f8:	703b      	strb	r3, [r7, #0]
					drawCursorBuffer();
    22fa:	4b62      	ldr	r3, [pc, #392]	; (2484 <printKeyboardBuffer+0x278>)
    22fc:	4798      	blx	r3
					cursorBlinkState = true;
    22fe:	2201      	movs	r2, #1
    2300:	4b5a      	ldr	r3, [pc, #360]	; (246c <printKeyboardBuffer+0x260>)
    2302:	701a      	strb	r2, [r3, #0]
					blinkCursor();
    2304:	4b5a      	ldr	r3, [pc, #360]	; (2470 <printKeyboardBuffer+0x264>)
    2306:	4798      	blx	r3
    2308:	e7b4      	b.n	2274 <printKeyboardBuffer+0x68>
				if(yCharPos < 24)
    230a:	4b5c      	ldr	r3, [pc, #368]	; (247c <printKeyboardBuffer+0x270>)
    230c:	7819      	ldrb	r1, [r3, #0]
    230e:	2917      	cmp	r1, #23
    2310:	d8b0      	bhi.n	2274 <printKeyboardBuffer+0x68>
					moveCursor(xCharPos,yCharPos+1);
    2312:	3101      	adds	r1, #1
    2314:	b2c9      	uxtb	r1, r1
    2316:	4b53      	ldr	r3, [pc, #332]	; (2464 <printKeyboardBuffer+0x258>)
    2318:	7818      	ldrb	r0, [r3, #0]
    231a:	4b59      	ldr	r3, [pc, #356]	; (2480 <printKeyboardBuffer+0x274>)
    231c:	4798      	blx	r3
					yCharPos++;
    231e:	4a57      	ldr	r2, [pc, #348]	; (247c <printKeyboardBuffer+0x270>)
    2320:	7813      	ldrb	r3, [r2, #0]
    2322:	3301      	adds	r3, #1
    2324:	7013      	strb	r3, [r2, #0]
					drawCursorBuffer();
    2326:	4b57      	ldr	r3, [pc, #348]	; (2484 <printKeyboardBuffer+0x278>)
    2328:	4798      	blx	r3
					cursorBlinkState = true;
    232a:	2201      	movs	r2, #1
    232c:	4b4f      	ldr	r3, [pc, #316]	; (246c <printKeyboardBuffer+0x260>)
    232e:	701a      	strb	r2, [r3, #0]
					blinkCursor();
    2330:	4b4f      	ldr	r3, [pc, #316]	; (2470 <printKeyboardBuffer+0x264>)
    2332:	4798      	blx	r3
    2334:	e79e      	b.n	2274 <printKeyboardBuffer+0x68>
				if(yCharPos > 0)
    2336:	4b51      	ldr	r3, [pc, #324]	; (247c <printKeyboardBuffer+0x270>)
    2338:	7819      	ldrb	r1, [r3, #0]
    233a:	2900      	cmp	r1, #0
    233c:	d09a      	beq.n	2274 <printKeyboardBuffer+0x68>
					moveCursor(xCharPos,yCharPos-1);
    233e:	3901      	subs	r1, #1
    2340:	b2c9      	uxtb	r1, r1
    2342:	4b48      	ldr	r3, [pc, #288]	; (2464 <printKeyboardBuffer+0x258>)
    2344:	7818      	ldrb	r0, [r3, #0]
    2346:	4b4e      	ldr	r3, [pc, #312]	; (2480 <printKeyboardBuffer+0x274>)
    2348:	4798      	blx	r3
					yCharPos--;
    234a:	4a4c      	ldr	r2, [pc, #304]	; (247c <printKeyboardBuffer+0x270>)
    234c:	7813      	ldrb	r3, [r2, #0]
    234e:	3b01      	subs	r3, #1
    2350:	7013      	strb	r3, [r2, #0]
					drawCursorBuffer();
    2352:	4b4c      	ldr	r3, [pc, #304]	; (2484 <printKeyboardBuffer+0x278>)
    2354:	4798      	blx	r3
					cursorBlinkState = true;
    2356:	2201      	movs	r2, #1
    2358:	4b44      	ldr	r3, [pc, #272]	; (246c <printKeyboardBuffer+0x260>)
    235a:	701a      	strb	r2, [r3, #0]
					blinkCursor();
    235c:	4b44      	ldr	r3, [pc, #272]	; (2470 <printKeyboardBuffer+0x264>)
    235e:	4798      	blx	r3
    2360:	e788      	b.n	2274 <printKeyboardBuffer+0x68>
				if(xCharPos < 79)
    2362:	4b40      	ldr	r3, [pc, #256]	; (2464 <printKeyboardBuffer+0x258>)
    2364:	7818      	ldrb	r0, [r3, #0]
    2366:	284e      	cmp	r0, #78	; 0x4e
    2368:	d884      	bhi.n	2274 <printKeyboardBuffer+0x68>
					moveCursor(xCharPos+1,yCharPos);
    236a:	4b44      	ldr	r3, [pc, #272]	; (247c <printKeyboardBuffer+0x270>)
    236c:	7819      	ldrb	r1, [r3, #0]
    236e:	3001      	adds	r0, #1
    2370:	b2c0      	uxtb	r0, r0
    2372:	4b43      	ldr	r3, [pc, #268]	; (2480 <printKeyboardBuffer+0x274>)
    2374:	4798      	blx	r3
					xCharPos++;
    2376:	4a3b      	ldr	r2, [pc, #236]	; (2464 <printKeyboardBuffer+0x258>)
    2378:	7813      	ldrb	r3, [r2, #0]
    237a:	3301      	adds	r3, #1
    237c:	7013      	strb	r3, [r2, #0]
					drawCursorBuffer();
    237e:	4b41      	ldr	r3, [pc, #260]	; (2484 <printKeyboardBuffer+0x278>)
    2380:	4798      	blx	r3
					cursorBlinkState = true;
    2382:	2201      	movs	r2, #1
    2384:	4b39      	ldr	r3, [pc, #228]	; (246c <printKeyboardBuffer+0x260>)
    2386:	701a      	strb	r2, [r3, #0]
					blinkCursor();
    2388:	4b39      	ldr	r3, [pc, #228]	; (2470 <printKeyboardBuffer+0x264>)
    238a:	4798      	blx	r3
    238c:	e772      	b.n	2274 <printKeyboardBuffer+0x68>
				if(yCharPos == 23)
    238e:	4b3b      	ldr	r3, [pc, #236]	; (247c <printKeyboardBuffer+0x270>)
    2390:	781b      	ldrb	r3, [r3, #0]
    2392:	2b17      	cmp	r3, #23
    2394:	d009      	beq.n	23aa <printKeyboardBuffer+0x19e>
					drawCursorBuffer();
    2396:	4b3b      	ldr	r3, [pc, #236]	; (2484 <printKeyboardBuffer+0x278>)
    2398:	4798      	blx	r3
					yCharPos++;
    239a:	4a38      	ldr	r2, [pc, #224]	; (247c <printKeyboardBuffer+0x270>)
    239c:	7813      	ldrb	r3, [r2, #0]
    239e:	3301      	adds	r3, #1
    23a0:	7013      	strb	r3, [r2, #0]
					xCharPos = 0;
    23a2:	2200      	movs	r2, #0
    23a4:	4b2f      	ldr	r3, [pc, #188]	; (2464 <printKeyboardBuffer+0x258>)
    23a6:	701a      	strb	r2, [r3, #0]
    23a8:	e764      	b.n	2274 <printKeyboardBuffer+0x68>
					drawCursorBuffer();
    23aa:	4b36      	ldr	r3, [pc, #216]	; (2484 <printKeyboardBuffer+0x278>)
    23ac:	4798      	blx	r3
					newLine();
    23ae:	4b36      	ldr	r3, [pc, #216]	; (2488 <printKeyboardBuffer+0x27c>)
    23b0:	4798      	blx	r3
					xCharPos = 0;
    23b2:	2200      	movs	r2, #0
    23b4:	4b2b      	ldr	r3, [pc, #172]	; (2464 <printKeyboardBuffer+0x258>)
    23b6:	701a      	strb	r2, [r3, #0]
    23b8:	e75c      	b.n	2274 <printKeyboardBuffer+0x68>
				if(yCharPos == 23)
    23ba:	4b30      	ldr	r3, [pc, #192]	; (247c <printKeyboardBuffer+0x270>)
    23bc:	781b      	ldrb	r3, [r3, #0]
    23be:	2b17      	cmp	r3, #23
    23c0:	d003      	beq.n	23ca <printKeyboardBuffer+0x1be>
					yCharPos++;
    23c2:	3301      	adds	r3, #1
    23c4:	4a2d      	ldr	r2, [pc, #180]	; (247c <printKeyboardBuffer+0x270>)
    23c6:	7013      	strb	r3, [r2, #0]
    23c8:	e754      	b.n	2274 <printKeyboardBuffer+0x68>
					newLine();
    23ca:	4b2f      	ldr	r3, [pc, #188]	; (2488 <printKeyboardBuffer+0x27c>)
    23cc:	4798      	blx	r3
    23ce:	e751      	b.n	2274 <printKeyboardBuffer+0x68>
				drawCursorBuffer();
    23d0:	4b2c      	ldr	r3, [pc, #176]	; (2484 <printKeyboardBuffer+0x278>)
    23d2:	4698      	mov	r8, r3
    23d4:	4798      	blx	r3
				xCharPos--;
    23d6:	4f23      	ldr	r7, [pc, #140]	; (2464 <printKeyboardBuffer+0x258>)
    23d8:	783b      	ldrb	r3, [r7, #0]
    23da:	3b01      	subs	r3, #1
    23dc:	703b      	strb	r3, [r7, #0]
				drawChar(0x20);
    23de:	2020      	movs	r0, #32
    23e0:	4b21      	ldr	r3, [pc, #132]	; (2468 <printKeyboardBuffer+0x25c>)
    23e2:	4798      	blx	r3
				drawCursorBuffer();
    23e4:	47c0      	blx	r8
				clearCursorBuffer();
    23e6:	4b29      	ldr	r3, [pc, #164]	; (248c <printKeyboardBuffer+0x280>)
    23e8:	4798      	blx	r3
				moveCursor(xCharPos,yCharPos);
    23ea:	4b24      	ldr	r3, [pc, #144]	; (247c <printKeyboardBuffer+0x270>)
    23ec:	7819      	ldrb	r1, [r3, #0]
    23ee:	7838      	ldrb	r0, [r7, #0]
    23f0:	4b23      	ldr	r3, [pc, #140]	; (2480 <printKeyboardBuffer+0x274>)
    23f2:	4798      	blx	r3
    23f4:	e73e      	b.n	2274 <printKeyboardBuffer+0x68>
						moveCursor(xCharPos++,yCharPos);
    23f6:	1c42      	adds	r2, r0, #1
    23f8:	701a      	strb	r2, [r3, #0]
    23fa:	4b20      	ldr	r3, [pc, #128]	; (247c <printKeyboardBuffer+0x270>)
    23fc:	7819      	ldrb	r1, [r3, #0]
    23fe:	4b20      	ldr	r3, [pc, #128]	; (2480 <printKeyboardBuffer+0x274>)
    2400:	4798      	blx	r3
						clearCursorBuffer();
    2402:	4b22      	ldr	r3, [pc, #136]	; (248c <printKeyboardBuffer+0x280>)
    2404:	4798      	blx	r3
    2406:	e764      	b.n	22d2 <printKeyboardBuffer+0xc6>
					drawChar(noCase[scanCodeBuffer[i]]);
    2408:	ab14      	add	r3, sp, #80	; 0x50
    240a:	5dd8      	ldrb	r0, [r3, r7]
    240c:	4b16      	ldr	r3, [pc, #88]	; (2468 <printKeyboardBuffer+0x25c>)
    240e:	4798      	blx	r3
					if(xCharPos < 79)
    2410:	4b14      	ldr	r3, [pc, #80]	; (2464 <printKeyboardBuffer+0x258>)
    2412:	7818      	ldrb	r0, [r3, #0]
    2414:	284e      	cmp	r0, #78	; 0x4e
    2416:	d905      	bls.n	2424 <printKeyboardBuffer+0x218>
					cursorBlinkState = true;
    2418:	2201      	movs	r2, #1
    241a:	4b14      	ldr	r3, [pc, #80]	; (246c <printKeyboardBuffer+0x260>)
    241c:	701a      	strb	r2, [r3, #0]
					blinkCursor();
    241e:	4b14      	ldr	r3, [pc, #80]	; (2470 <printKeyboardBuffer+0x264>)
    2420:	4798      	blx	r3
    2422:	e727      	b.n	2274 <printKeyboardBuffer+0x68>
						moveCursor(xCharPos++,yCharPos);
    2424:	1c42      	adds	r2, r0, #1
    2426:	701a      	strb	r2, [r3, #0]
    2428:	4b14      	ldr	r3, [pc, #80]	; (247c <printKeyboardBuffer+0x270>)
    242a:	7819      	ldrb	r1, [r3, #0]
    242c:	4b14      	ldr	r3, [pc, #80]	; (2480 <printKeyboardBuffer+0x274>)
    242e:	4798      	blx	r3
						clearCursorBuffer();
    2430:	4b16      	ldr	r3, [pc, #88]	; (248c <printKeyboardBuffer+0x280>)
    2432:	4798      	blx	r3
    2434:	e7f0      	b.n	2418 <printKeyboardBuffer+0x20c>
		scanCodeBuffer[i] = 0xFF;
    2436:	23ff      	movs	r3, #255	; 0xff
    2438:	7033      	strb	r3, [r6, #0]
    243a:	3601      	adds	r6, #1
	for(int i = 0 ; i < 20 ; i++)
    243c:	42a6      	cmp	r6, r4
    243e:	d1fb      	bne.n	2438 <printKeyboardBuffer+0x22c>
}
    2440:	b027      	add	sp, #156	; 0x9c
    2442:	bc3c      	pop	{r2, r3, r4, r5}
    2444:	4690      	mov	r8, r2
    2446:	4699      	mov	r9, r3
    2448:	46a2      	mov	sl, r4
    244a:	46ab      	mov	fp, r5
    244c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    244e:	46c0      	nop			; (mov r8, r8)
    2450:	00005cc4 	.word	0x00005cc4
    2454:	00002dc9 	.word	0x00002dc9
    2458:	20000028 	.word	0x20000028
    245c:	00001cbd 	.word	0x00001cbd
    2460:	20000014 	.word	0x20000014
    2464:	20000298 	.word	0x20000298
    2468:	00001a01 	.word	0x00001a01
    246c:	20000010 	.word	0x20000010
    2470:	000020f9 	.word	0x000020f9
    2474:	00005e0c 	.word	0x00005e0c
    2478:	00002ded 	.word	0x00002ded
    247c:	20000299 	.word	0x20000299
    2480:	00001ff9 	.word	0x00001ff9
    2484:	00001f25 	.word	0x00001f25
    2488:	00001ad5 	.word	0x00001ad5
    248c:	00001f0d 	.word	0x00001f0d

00002490 <setColorRGB>:

uint16_t fore_Color_High, fore_Color_Low;
uint16_t back_Color_High, back_Color_Low;

void setColorRGB(uint8_t r, uint8_t g, uint8_t b)
{
    2490:	b510      	push	{r4, lr}
	fore_Color_High = ((r&248)|g>>5);
    2492:	094b      	lsrs	r3, r1, #5
    2494:	2407      	movs	r4, #7
    2496:	43a0      	bics	r0, r4
    2498:	4318      	orrs	r0, r3
    249a:	4b05      	ldr	r3, [pc, #20]	; (24b0 <setColorRGB+0x20>)
    249c:	8018      	strh	r0, [r3, #0]
	fore_Color_Low = ((g&28)<<3|b>>3);
    249e:	00c9      	lsls	r1, r1, #3
    24a0:	23e0      	movs	r3, #224	; 0xe0
    24a2:	4019      	ands	r1, r3
    24a4:	08d2      	lsrs	r2, r2, #3
    24a6:	430a      	orrs	r2, r1
    24a8:	4b02      	ldr	r3, [pc, #8]	; (24b4 <setColorRGB+0x24>)
    24aa:	801a      	strh	r2, [r3, #0]
}
    24ac:	bd10      	pop	{r4, pc}
    24ae:	46c0      	nop			; (mov r8, r8)
    24b0:	200003ce 	.word	0x200003ce
    24b4:	200003d0 	.word	0x200003d0

000024b8 <setBackColorRGB>:
	fore_Color_Low = (color & 0xFF);
}

void setBackColorRGB(unsigned char r,
unsigned char g, unsigned char b)
{
    24b8:	b510      	push	{r4, lr}
	back_Color_High = ((r&248)|g>>5);
    24ba:	094b      	lsrs	r3, r1, #5
    24bc:	2407      	movs	r4, #7
    24be:	43a0      	bics	r0, r4
    24c0:	4318      	orrs	r0, r3
    24c2:	4b05      	ldr	r3, [pc, #20]	; (24d8 <setBackColorRGB+0x20>)
    24c4:	8018      	strh	r0, [r3, #0]
	back_Color_Low = ((g&28)<<3|b>>3);
    24c6:	00c9      	lsls	r1, r1, #3
    24c8:	23e0      	movs	r3, #224	; 0xe0
    24ca:	4019      	ands	r1, r3
    24cc:	08d2      	lsrs	r2, r2, #3
    24ce:	430a      	orrs	r2, r1
    24d0:	4b02      	ldr	r3, [pc, #8]	; (24dc <setBackColorRGB+0x24>)
    24d2:	801a      	strh	r2, [r3, #0]
}
    24d4:	bd10      	pop	{r4, pc}
    24d6:	46c0      	nop			; (mov r8, r8)
    24d8:	200003d2 	.word	0x200003d2
    24dc:	200003cc 	.word	0x200003cc

000024e0 <LCD_Fast_Fill>:
	(((long)(x2-x1)+1)*((long)(y2-y1)+1)));
	REG_PORT_OUTSET1 = LCD_CS;
}

void LCD_Fast_Fill(int ch, int cl, long pix)
{
    24e0:	b570      	push	{r4, r5, r6, lr}
	int blocks;
	
	
	REG_PORT_OUTCLR1 = 0x0000ffff;
    24e2:	4c19      	ldr	r4, [pc, #100]	; (2548 <LCD_Fast_Fill+0x68>)
    24e4:	4b19      	ldr	r3, [pc, #100]	; (254c <LCD_Fast_Fill+0x6c>)
    24e6:	601c      	str	r4, [r3, #0]
	REG_PORT_OUTSET1 = (ch << 8) | cl;
    24e8:	0200      	lsls	r0, r0, #8
    24ea:	4301      	orrs	r1, r0
    24ec:	4b18      	ldr	r3, [pc, #96]	; (2550 <LCD_Fast_Fill+0x70>)
    24ee:	6019      	str	r1, [r3, #0]

	blocks = pix/16;
    24f0:	17d3      	asrs	r3, r2, #31
    24f2:	260f      	movs	r6, #15
    24f4:	401e      	ands	r6, r3
    24f6:	18b6      	adds	r6, r6, r2
    24f8:	1136      	asrs	r6, r6, #4
	for (int i=0; i<blocks; i++)
    24fa:	2500      	movs	r5, #0
    24fc:	2e00      	cmp	r6, #0
    24fe:	dd0c      	ble.n	251a <LCD_Fast_Fill+0x3a>
	{
		for (int j=0; j<16; j++)
		{
			REG_PORT_OUTCLR1 = LCD_WR;
    2500:	4c12      	ldr	r4, [pc, #72]	; (254c <LCD_Fast_Fill+0x6c>)
    2502:	2180      	movs	r1, #128	; 0x80
    2504:	0289      	lsls	r1, r1, #10
			REG_PORT_OUTSET1 = LCD_WR;
    2506:	4812      	ldr	r0, [pc, #72]	; (2550 <LCD_Fast_Fill+0x70>)
{
    2508:	2310      	movs	r3, #16
			REG_PORT_OUTCLR1 = LCD_WR;
    250a:	6021      	str	r1, [r4, #0]
			REG_PORT_OUTSET1 = LCD_WR;
    250c:	6001      	str	r1, [r0, #0]
    250e:	3b01      	subs	r3, #1
		for (int j=0; j<16; j++)
    2510:	2b00      	cmp	r3, #0
    2512:	d1fa      	bne.n	250a <LCD_Fast_Fill+0x2a>
	for (int i=0; i<blocks; i++)
    2514:	3501      	adds	r5, #1
    2516:	42ae      	cmp	r6, r5
    2518:	d1f6      	bne.n	2508 <LCD_Fast_Fill+0x28>
		}
	}
	
	if ((pix % 16) != 0)
    251a:	0713      	lsls	r3, r2, #28
    251c:	d013      	beq.n	2546 <LCD_Fast_Fill+0x66>
	for (int i=0; i<(pix % 16)+1; i++)
    251e:	17d3      	asrs	r3, r2, #31
    2520:	0f1b      	lsrs	r3, r3, #28
    2522:	18d2      	adds	r2, r2, r3
    2524:	210f      	movs	r1, #15
    2526:	4011      	ands	r1, r2
    2528:	1ac9      	subs	r1, r1, r3
    252a:	1c4b      	adds	r3, r1, #1
    252c:	2b00      	cmp	r3, #0
    252e:	dd0a      	ble.n	2546 <LCD_Fast_Fill+0x66>
    2530:	0019      	movs	r1, r3
    2532:	2300      	movs	r3, #0
	{
		REG_PORT_OUTCLR1 = LCD_WR;
    2534:	4c05      	ldr	r4, [pc, #20]	; (254c <LCD_Fast_Fill+0x6c>)
    2536:	2280      	movs	r2, #128	; 0x80
    2538:	0292      	lsls	r2, r2, #10
		REG_PORT_OUTSET1 = LCD_WR;
    253a:	4805      	ldr	r0, [pc, #20]	; (2550 <LCD_Fast_Fill+0x70>)
		REG_PORT_OUTCLR1 = LCD_WR;
    253c:	6022      	str	r2, [r4, #0]
		REG_PORT_OUTSET1 = LCD_WR;
    253e:	6002      	str	r2, [r0, #0]
	for (int i=0; i<(pix % 16)+1; i++)
    2540:	3301      	adds	r3, #1
    2542:	4299      	cmp	r1, r3
    2544:	d1fa      	bne.n	253c <LCD_Fast_Fill+0x5c>
	}
}
    2546:	bd70      	pop	{r4, r5, r6, pc}
    2548:	0000ffff 	.word	0x0000ffff
    254c:	41004494 	.word	0x41004494
    2550:	41004498 	.word	0x41004498

00002554 <setXY>:
{
	setXY(0,0,display_X_size,display_Y_size);
}

void setXY(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
    2554:	b5f0      	push	{r4, r5, r6, r7, lr}
    2556:	b083      	sub	sp, #12
    2558:	000e      	movs	r6, r1
    255a:	9300      	str	r3, [sp, #0]
	
	SwapUint16(x1, y1);
	SwapUint16(x2, y2);
	y1=display_Y_size-y1;
    255c:	4b1c      	ldr	r3, [pc, #112]	; (25d0 <setXY+0x7c>)
    255e:	881d      	ldrh	r5, [r3, #0]
    2560:	1a28      	subs	r0, r5, r0
    2562:	b287      	uxth	r7, r0
	y2=display_Y_size-y2;
    2564:	1aad      	subs	r5, r5, r2
    2566:	b2ad      	uxth	r5, r5
	SwapUint16(y1, y2);
	
	
	LCD_Write_COM16(0x2a,0x00);
    2568:	2100      	movs	r1, #0
    256a:	202a      	movs	r0, #42	; 0x2a
    256c:	4c19      	ldr	r4, [pc, #100]	; (25d4 <setXY+0x80>)
    256e:	47a0      	blx	r4
	LCD_Write_DATA8(x1>>8);
    2570:	9601      	str	r6, [sp, #4]
    2572:	0a30      	lsrs	r0, r6, #8
    2574:	4e18      	ldr	r6, [pc, #96]	; (25d8 <setXY+0x84>)
    2576:	47b0      	blx	r6
	LCD_Write_COM16(0x2a,0x01);
    2578:	2101      	movs	r1, #1
    257a:	202a      	movs	r0, #42	; 0x2a
    257c:	47a0      	blx	r4
	LCD_Write_DATA8(x1);
    257e:	466b      	mov	r3, sp
    2580:	7918      	ldrb	r0, [r3, #4]
    2582:	47b0      	blx	r6
	LCD_Write_COM16(0x2a,0x02);
    2584:	2102      	movs	r1, #2
    2586:	202a      	movs	r0, #42	; 0x2a
    2588:	47a0      	blx	r4
	LCD_Write_DATA8(x2>>8);
    258a:	9b00      	ldr	r3, [sp, #0]
    258c:	0a18      	lsrs	r0, r3, #8
    258e:	47b0      	blx	r6
	LCD_Write_COM16(0x2a,0x03);
    2590:	2103      	movs	r1, #3
    2592:	202a      	movs	r0, #42	; 0x2a
    2594:	47a0      	blx	r4
	LCD_Write_DATA8(x2);
    2596:	466b      	mov	r3, sp
    2598:	7818      	ldrb	r0, [r3, #0]
    259a:	47b0      	blx	r6

	LCD_Write_COM16(0x2b,0x00);
    259c:	2100      	movs	r1, #0
    259e:	202b      	movs	r0, #43	; 0x2b
    25a0:	47a0      	blx	r4
	LCD_Write_DATA8(y1>>8);
    25a2:	0a28      	lsrs	r0, r5, #8
    25a4:	47b0      	blx	r6
	LCD_Write_COM16(0x2b,0x01);
    25a6:	2101      	movs	r1, #1
    25a8:	202b      	movs	r0, #43	; 0x2b
    25aa:	47a0      	blx	r4
	LCD_Write_DATA8(y1);
    25ac:	b2e8      	uxtb	r0, r5
    25ae:	47b0      	blx	r6
	LCD_Write_COM16(0x2b,0x02);
    25b0:	2102      	movs	r1, #2
    25b2:	202b      	movs	r0, #43	; 0x2b
    25b4:	47a0      	blx	r4
	LCD_Write_DATA8(y2>>8);
    25b6:	0a38      	lsrs	r0, r7, #8
    25b8:	47b0      	blx	r6
	LCD_Write_COM16(0x2b,0x03);
    25ba:	2103      	movs	r1, #3
    25bc:	202b      	movs	r0, #43	; 0x2b
    25be:	47a0      	blx	r4
	LCD_Write_DATA8(y2);
    25c0:	b2f8      	uxtb	r0, r7
    25c2:	47b0      	blx	r6

	LCD_Write_COM16(0x2c,0x00);
    25c4:	2100      	movs	r1, #0
    25c6:	202c      	movs	r0, #44	; 0x2c
    25c8:	47a0      	blx	r4
}
    25ca:	b003      	add	sp, #12
    25cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    25ce:	46c0      	nop			; (mov r8, r8)
    25d0:	20000156 	.word	0x20000156
    25d4:	000027a1 	.word	0x000027a1
    25d8:	000027d1 	.word	0x000027d1

000025dc <fillRect>:
{
    25dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    25de:	46ce      	mov	lr, r9
    25e0:	4647      	mov	r7, r8
    25e2:	b580      	push	{r7, lr}
    25e4:	b083      	sub	sp, #12
    25e6:	4681      	mov	r9, r0
    25e8:	4688      	mov	r8, r1
    25ea:	0015      	movs	r5, r2
    25ec:	001c      	movs	r4, r3
	if (x1>x2)
    25ee:	4290      	cmp	r0, r2
    25f0:	dd02      	ble.n	25f8 <fillRect+0x1c>
    25f2:	0403      	lsls	r3, r0, #16
	SwapUint16(x1, x2);
    25f4:	4691      	mov	r9, r2
    25f6:	0c1d      	lsrs	r5, r3, #16
	if (y1>y2)
    25f8:	45a0      	cmp	r8, r4
    25fa:	dd03      	ble.n	2604 <fillRect+0x28>
    25fc:	4643      	mov	r3, r8
    25fe:	041b      	lsls	r3, r3, #16
	SwapUint16(y1, y2);
    2600:	46a0      	mov	r8, r4
    2602:	0c1c      	lsrs	r4, r3, #16
	REG_PORT_OUTCLR1 = LCD_CS;
    2604:	2780      	movs	r7, #128	; 0x80
    2606:	03ff      	lsls	r7, r7, #15
    2608:	4b12      	ldr	r3, [pc, #72]	; (2654 <fillRect+0x78>)
    260a:	601f      	str	r7, [r3, #0]
	setXY(x1, y1, x2, y2);
    260c:	b2a3      	uxth	r3, r4
    260e:	b2aa      	uxth	r2, r5
    2610:	4641      	mov	r1, r8
    2612:	4668      	mov	r0, sp
    2614:	80c1      	strh	r1, [r0, #6]
    2616:	88c1      	ldrh	r1, [r0, #6]
    2618:	4648      	mov	r0, r9
    261a:	466e      	mov	r6, sp
    261c:	80f0      	strh	r0, [r6, #6]
    261e:	88f0      	ldrh	r0, [r6, #6]
    2620:	4e0d      	ldr	r6, [pc, #52]	; (2658 <fillRect+0x7c>)
    2622:	47b0      	blx	r6
	REG_PORT_OUTSET1 = LCD_DC;
    2624:	4e0d      	ldr	r6, [pc, #52]	; (265c <fillRect+0x80>)
    2626:	2380      	movs	r3, #128	; 0x80
    2628:	041b      	lsls	r3, r3, #16
    262a:	6033      	str	r3, [r6, #0]
	(((long)(x2-x1)+1)*((long)(y2-y1)+1)));
    262c:	464b      	mov	r3, r9
    262e:	1aed      	subs	r5, r5, r3
    2630:	3501      	adds	r5, #1
    2632:	4643      	mov	r3, r8
    2634:	1ae2      	subs	r2, r4, r3
    2636:	3201      	adds	r2, #1
	LCD_Fast_Fill(fore_Color_High, fore_Color_Low,
    2638:	436a      	muls	r2, r5
    263a:	4b09      	ldr	r3, [pc, #36]	; (2660 <fillRect+0x84>)
    263c:	8819      	ldrh	r1, [r3, #0]
    263e:	4b09      	ldr	r3, [pc, #36]	; (2664 <fillRect+0x88>)
    2640:	8818      	ldrh	r0, [r3, #0]
    2642:	4b09      	ldr	r3, [pc, #36]	; (2668 <fillRect+0x8c>)
    2644:	4798      	blx	r3
	REG_PORT_OUTSET1 = LCD_CS;
    2646:	6037      	str	r7, [r6, #0]
}
    2648:	b003      	add	sp, #12
    264a:	bc0c      	pop	{r2, r3}
    264c:	4690      	mov	r8, r2
    264e:	4699      	mov	r9, r3
    2650:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2652:	46c0      	nop			; (mov r8, r8)
    2654:	41004494 	.word	0x41004494
    2658:	00002555 	.word	0x00002555
    265c:	41004498 	.word	0x41004498
    2660:	200003d0 	.word	0x200003d0
    2664:	200003ce 	.word	0x200003ce
    2668:	000024e1 	.word	0x000024e1

0000266c <fillRectBackColor>:
{
    266c:	b5f0      	push	{r4, r5, r6, r7, lr}
    266e:	46ce      	mov	lr, r9
    2670:	4647      	mov	r7, r8
    2672:	b580      	push	{r7, lr}
    2674:	b083      	sub	sp, #12
    2676:	4681      	mov	r9, r0
    2678:	4688      	mov	r8, r1
    267a:	0015      	movs	r5, r2
    267c:	001c      	movs	r4, r3
	if (x1>x2)
    267e:	4290      	cmp	r0, r2
    2680:	dd02      	ble.n	2688 <fillRectBackColor+0x1c>
    2682:	0403      	lsls	r3, r0, #16
	SwapUint16(x1, x2);
    2684:	4691      	mov	r9, r2
    2686:	0c1d      	lsrs	r5, r3, #16
	if (y1>y2)
    2688:	45a0      	cmp	r8, r4
    268a:	dd03      	ble.n	2694 <fillRectBackColor+0x28>
    268c:	4643      	mov	r3, r8
    268e:	041b      	lsls	r3, r3, #16
	SwapUint16(y1, y2);
    2690:	46a0      	mov	r8, r4
    2692:	0c1c      	lsrs	r4, r3, #16
	REG_PORT_OUTCLR1 = LCD_CS;
    2694:	2780      	movs	r7, #128	; 0x80
    2696:	03ff      	lsls	r7, r7, #15
    2698:	4b12      	ldr	r3, [pc, #72]	; (26e4 <fillRectBackColor+0x78>)
    269a:	601f      	str	r7, [r3, #0]
	setXY(x1, y1, x2, y2);
    269c:	b2a3      	uxth	r3, r4
    269e:	b2aa      	uxth	r2, r5
    26a0:	4641      	mov	r1, r8
    26a2:	4668      	mov	r0, sp
    26a4:	80c1      	strh	r1, [r0, #6]
    26a6:	88c1      	ldrh	r1, [r0, #6]
    26a8:	4648      	mov	r0, r9
    26aa:	466e      	mov	r6, sp
    26ac:	80f0      	strh	r0, [r6, #6]
    26ae:	88f0      	ldrh	r0, [r6, #6]
    26b0:	4e0d      	ldr	r6, [pc, #52]	; (26e8 <fillRectBackColor+0x7c>)
    26b2:	47b0      	blx	r6
	REG_PORT_OUTSET1 = LCD_DC;
    26b4:	4e0d      	ldr	r6, [pc, #52]	; (26ec <fillRectBackColor+0x80>)
    26b6:	2380      	movs	r3, #128	; 0x80
    26b8:	041b      	lsls	r3, r3, #16
    26ba:	6033      	str	r3, [r6, #0]
	(((long)(x2-x1)+1)*((long)(y2-y1)+1)));
    26bc:	464b      	mov	r3, r9
    26be:	1aed      	subs	r5, r5, r3
    26c0:	3501      	adds	r5, #1
    26c2:	4643      	mov	r3, r8
    26c4:	1ae2      	subs	r2, r4, r3
    26c6:	3201      	adds	r2, #1
	LCD_Fast_Fill(back_Color_High, back_Color_Low,
    26c8:	436a      	muls	r2, r5
    26ca:	4b09      	ldr	r3, [pc, #36]	; (26f0 <fillRectBackColor+0x84>)
    26cc:	8819      	ldrh	r1, [r3, #0]
    26ce:	4b09      	ldr	r3, [pc, #36]	; (26f4 <fillRectBackColor+0x88>)
    26d0:	8818      	ldrh	r0, [r3, #0]
    26d2:	4b09      	ldr	r3, [pc, #36]	; (26f8 <fillRectBackColor+0x8c>)
    26d4:	4798      	blx	r3
	REG_PORT_OUTSET1 = LCD_CS;
    26d6:	6037      	str	r7, [r6, #0]
}
    26d8:	b003      	add	sp, #12
    26da:	bc0c      	pop	{r2, r3}
    26dc:	4690      	mov	r8, r2
    26de:	4699      	mov	r9, r3
    26e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    26e2:	46c0      	nop			; (mov r8, r8)
    26e4:	41004494 	.word	0x41004494
    26e8:	00002555 	.word	0x00002555
    26ec:	41004498 	.word	0x41004498
    26f0:	200003cc 	.word	0x200003cc
    26f4:	200003d2 	.word	0x200003d2
    26f8:	000024e1 	.word	0x000024e1

000026fc <clrXY>:
{
    26fc:	b510      	push	{r4, lr}
	setXY(0,0,display_X_size,display_Y_size);
    26fe:	4b04      	ldr	r3, [pc, #16]	; (2710 <clrXY+0x14>)
    2700:	881b      	ldrh	r3, [r3, #0]
    2702:	4a04      	ldr	r2, [pc, #16]	; (2714 <clrXY+0x18>)
    2704:	8812      	ldrh	r2, [r2, #0]
    2706:	2100      	movs	r1, #0
    2708:	2000      	movs	r0, #0
    270a:	4c03      	ldr	r4, [pc, #12]	; (2718 <clrXY+0x1c>)
    270c:	47a0      	blx	r4
}
    270e:	bd10      	pop	{r4, pc}
    2710:	20000156 	.word	0x20000156
    2714:	20000154 	.word	0x20000154
    2718:	00002555 	.word	0x00002555

0000271c <clrScr>:
{
    271c:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = LCD_CS;
    271e:	2280      	movs	r2, #128	; 0x80
    2720:	03d2      	lsls	r2, r2, #15
    2722:	4b02      	ldr	r3, [pc, #8]	; (272c <clrScr+0x10>)
    2724:	601a      	str	r2, [r3, #0]
	clrXY();
    2726:	4b02      	ldr	r3, [pc, #8]	; (2730 <clrScr+0x14>)
    2728:	4798      	blx	r3
}
    272a:	bd10      	pop	{r4, pc}
    272c:	41004494 	.word	0x41004494
    2730:	000026fd 	.word	0x000026fd

00002734 <setPixel>:

void setPixel(uint16_t color)
{
    2734:	b510      	push	{r4, lr}
	//it sets it to a 16-bit color.
	LCD_Write_DATA16((color>>8),(color&0xFF));
    2736:	b2c1      	uxtb	r1, r0
    2738:	0a00      	lsrs	r0, r0, #8
    273a:	4b01      	ldr	r3, [pc, #4]	; (2740 <setPixel+0xc>)
    273c:	4798      	blx	r3
}
    273e:	bd10      	pop	{r4, pc}
    2740:	000027b9 	.word	0x000027b9

00002744 <clearScreen>:
	LCD_Write_DATA8(0x80);
	REG_PORT_OUTSET1 = LCD_CS;
}
*/
void clearScreen(void)
{
    2744:	b510      	push	{r4, lr}
	fore_Color_High = ((r&248)|g>>5);
    2746:	2300      	movs	r3, #0
    2748:	4a06      	ldr	r2, [pc, #24]	; (2764 <clearScreen+0x20>)
    274a:	8013      	strh	r3, [r2, #0]
	fore_Color_Low = ((g&28)<<3|b>>3);
    274c:	4a06      	ldr	r2, [pc, #24]	; (2768 <clearScreen+0x24>)
    274e:	8013      	strh	r3, [r2, #0]
	setColorRGB(0,0,0);
	fillRect(0,0,display_Y_size,display_X_size);
    2750:	4b06      	ldr	r3, [pc, #24]	; (276c <clearScreen+0x28>)
    2752:	881b      	ldrh	r3, [r3, #0]
    2754:	4a06      	ldr	r2, [pc, #24]	; (2770 <clearScreen+0x2c>)
    2756:	8812      	ldrh	r2, [r2, #0]
    2758:	2100      	movs	r1, #0
    275a:	2000      	movs	r0, #0
    275c:	4c05      	ldr	r4, [pc, #20]	; (2774 <clearScreen+0x30>)
    275e:	47a0      	blx	r4
}
    2760:	bd10      	pop	{r4, pc}
    2762:	46c0      	nop			; (mov r8, r8)
    2764:	200003ce 	.word	0x200003ce
    2768:	200003d0 	.word	0x200003d0
    276c:	20000154 	.word	0x20000154
    2770:	20000156 	.word	0x20000156
    2774:	000025dd 	.word	0x000025dd

00002778 <LCD_Write_Bus>:
	fillRect(0,0,799,489);
		
}

void LCD_Write_Bus(char VH, char VL)
{
    2778:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = 0x0000ffff;
    277a:	4c06      	ldr	r4, [pc, #24]	; (2794 <LCD_Write_Bus+0x1c>)
    277c:	4b06      	ldr	r3, [pc, #24]	; (2798 <LCD_Write_Bus+0x20>)
    277e:	6023      	str	r3, [r4, #0]
	REG_PORT_OUTSET1 = (VH << 8) | VL;
    2780:	0200      	lsls	r0, r0, #8
    2782:	4301      	orrs	r1, r0
    2784:	4b05      	ldr	r3, [pc, #20]	; (279c <LCD_Write_Bus+0x24>)
    2786:	6019      	str	r1, [r3, #0]
	REG_PORT_OUTCLR1 = LCD_WR;
    2788:	2280      	movs	r2, #128	; 0x80
    278a:	0292      	lsls	r2, r2, #10
    278c:	6022      	str	r2, [r4, #0]
	REG_PORT_OUTSET1 = LCD_WR;
    278e:	601a      	str	r2, [r3, #0]
}
    2790:	bd10      	pop	{r4, pc}
    2792:	46c0      	nop			; (mov r8, r8)
    2794:	41004494 	.word	0x41004494
    2798:	0000ffff 	.word	0x0000ffff
    279c:	41004498 	.word	0x41004498

000027a0 <LCD_Write_COM16>:

void LCD_Write_COM16(char VH, char VL)
{
    27a0:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = LCD_DC;
    27a2:	2280      	movs	r2, #128	; 0x80
    27a4:	0412      	lsls	r2, r2, #16
    27a6:	4b02      	ldr	r3, [pc, #8]	; (27b0 <LCD_Write_COM16+0x10>)
    27a8:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(VH,VL);
    27aa:	4b02      	ldr	r3, [pc, #8]	; (27b4 <LCD_Write_COM16+0x14>)
    27ac:	4798      	blx	r3
}
    27ae:	bd10      	pop	{r4, pc}
    27b0:	41004494 	.word	0x41004494
    27b4:	00002779 	.word	0x00002779

000027b8 <LCD_Write_DATA16>:
	REG_PORT_OUTCLR1 = LCD_DC;
	LCD_Write_Bus(0x00, VL);
}

void LCD_Write_DATA16(char VH, char VL)
{
    27b8:	b510      	push	{r4, lr}
	REG_PORT_OUTSET1 = LCD_DC;
    27ba:	2280      	movs	r2, #128	; 0x80
    27bc:	0412      	lsls	r2, r2, #16
    27be:	4b02      	ldr	r3, [pc, #8]	; (27c8 <LCD_Write_DATA16+0x10>)
    27c0:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(VH,VL);
    27c2:	4b02      	ldr	r3, [pc, #8]	; (27cc <LCD_Write_DATA16+0x14>)
    27c4:	4798      	blx	r3
}
    27c6:	bd10      	pop	{r4, pc}
    27c8:	41004498 	.word	0x41004498
    27cc:	00002779 	.word	0x00002779

000027d0 <LCD_Write_DATA8>:

void LCD_Write_DATA8(char VL)
{
    27d0:	b510      	push	{r4, lr}
    27d2:	0001      	movs	r1, r0
	REG_PORT_OUTSET1 = LCD_DC;
    27d4:	2280      	movs	r2, #128	; 0x80
    27d6:	0412      	lsls	r2, r2, #16
    27d8:	4b02      	ldr	r3, [pc, #8]	; (27e4 <LCD_Write_DATA8+0x14>)
    27da:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(0x00, VL);
    27dc:	2000      	movs	r0, #0
    27de:	4b02      	ldr	r3, [pc, #8]	; (27e8 <LCD_Write_DATA8+0x18>)
    27e0:	4798      	blx	r3
}
    27e2:	bd10      	pop	{r4, pc}
    27e4:	41004498 	.word	0x41004498
    27e8:	00002779 	.word	0x00002779

000027ec <InitLCD>:
{
    27ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    27ee:	46c6      	mov	lr, r8
    27f0:	b500      	push	{lr}
    27f2:	b082      	sub	sp, #8
	REG_PORT_DIRSET1 = 0x0000ffff;		//LCD data bus, PB00 - PB15
    27f4:	4b80      	ldr	r3, [pc, #512]	; (29f8 <InitLCD+0x20c>)
    27f6:	4f81      	ldr	r7, [pc, #516]	; (29fc <InitLCD+0x210>)
    27f8:	601f      	str	r7, [r3, #0]
	REG_PORT_DIRSET1 = LCD_Reset;
    27fa:	2580      	movs	r5, #128	; 0x80
    27fc:	05ed      	lsls	r5, r5, #23
    27fe:	601d      	str	r5, [r3, #0]
	REG_PORT_DIRSET1 = LCD_CS;
    2800:	2680      	movs	r6, #128	; 0x80
    2802:	03f6      	lsls	r6, r6, #15
    2804:	601e      	str	r6, [r3, #0]
	REG_PORT_DIRSET1 = LCD_WR;
    2806:	2080      	movs	r0, #128	; 0x80
    2808:	0280      	lsls	r0, r0, #10
    280a:	6018      	str	r0, [r3, #0]
	REG_PORT_DIRSET1 = LCD_DC;
    280c:	2180      	movs	r1, #128	; 0x80
    280e:	0409      	lsls	r1, r1, #16
    2810:	6019      	str	r1, [r3, #0]
	REG_PORT_DIRSET1 = LCD_RD;
    2812:	2280      	movs	r2, #128	; 0x80
    2814:	0252      	lsls	r2, r2, #9
    2816:	601a      	str	r2, [r3, #0]
	REG_PORT_OUTCLR1 = 0x0000ffff;
    2818:	4c79      	ldr	r4, [pc, #484]	; (2a00 <InitLCD+0x214>)
    281a:	6027      	str	r7, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_Reset;
    281c:	6025      	str	r5, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_CS;
    281e:	6026      	str	r6, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_WR;
    2820:	6020      	str	r0, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_DC;
    2822:	6021      	str	r1, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_RD;
    2824:	6022      	str	r2, [r4, #0]
	REG_PORT_DIRSET1 = PORT_PB16;
    2826:	601a      	str	r2, [r3, #0]
	REG_PORT_OUTSET1 = PORT_PB16;
    2828:	4f76      	ldr	r7, [pc, #472]	; (2a04 <InitLCD+0x218>)
    282a:	603a      	str	r2, [r7, #0]
	REG_PORT_OUTSET1 = LCD_Reset;
    282c:	603d      	str	r5, [r7, #0]
	delay_ms(5);
    282e:	2005      	movs	r0, #5
    2830:	4b75      	ldr	r3, [pc, #468]	; (2a08 <InitLCD+0x21c>)
    2832:	4698      	mov	r8, r3
    2834:	4798      	blx	r3
	REG_PORT_OUTCLR1 = LCD_Reset;
    2836:	6025      	str	r5, [r4, #0]
	delay_ms(5);
    2838:	2005      	movs	r0, #5
    283a:	47c0      	blx	r8
	REG_PORT_OUTSET1 = LCD_Reset;
    283c:	603d      	str	r5, [r7, #0]
	REG_PORT_OUTCLR1 = LCD_CS;
    283e:	6026      	str	r6, [r4, #0]
	for(int i = 0; i < 70; i++)
    2840:	2400      	movs	r4, #0
		REG_PORT_OUTCLR1 = LCD_DC;
    2842:	4b6f      	ldr	r3, [pc, #444]	; (2a00 <InitLCD+0x214>)
    2844:	4698      	mov	r8, r3
    2846:	2580      	movs	r5, #128	; 0x80
    2848:	042d      	lsls	r5, r5, #16
    284a:	002f      	movs	r7, r5
		LCD_Write_COM16(belial[i],mulciber[i]);
    284c:	4e6f      	ldr	r6, [pc, #444]	; (2a0c <InitLCD+0x220>)
		REG_PORT_OUTCLR1 = LCD_DC;
    284e:	4643      	mov	r3, r8
    2850:	601f      	str	r7, [r3, #0]
		LCD_Write_COM16(belial[i],mulciber[i]);
    2852:	5da1      	ldrb	r1, [r4, r6]
    2854:	4b6e      	ldr	r3, [pc, #440]	; (2a10 <InitLCD+0x224>)
    2856:	5ce0      	ldrb	r0, [r4, r3]
    2858:	4b6e      	ldr	r3, [pc, #440]	; (2a14 <InitLCD+0x228>)
    285a:	4798      	blx	r3
		REG_PORT_OUTSET1 = LCD_DC;
    285c:	4b69      	ldr	r3, [pc, #420]	; (2a04 <InitLCD+0x218>)
    285e:	601d      	str	r5, [r3, #0]
		LCD_Write_DATA8(lucifer[i]);
    2860:	4b6d      	ldr	r3, [pc, #436]	; (2a18 <InitLCD+0x22c>)
    2862:	5ce0      	ldrb	r0, [r4, r3]
    2864:	4b6d      	ldr	r3, [pc, #436]	; (2a1c <InitLCD+0x230>)
    2866:	4798      	blx	r3
	for(int i = 0; i < 70; i++)
    2868:	3401      	adds	r4, #1
    286a:	2c46      	cmp	r4, #70	; 0x46
    286c:	d1ef      	bne.n	284e <InitLCD+0x62>
    286e:	23d1      	movs	r3, #209	; 0xd1
    2870:	9301      	str	r3, [sp, #4]
			LCD_Write_COM16(k,0x00);
    2872:	4d68      	ldr	r5, [pc, #416]	; (2a14 <InitLCD+0x228>)
			LCD_Write_DATA8(beelzebub[l]);
    2874:	4f69      	ldr	r7, [pc, #420]	; (2a1c <InitLCD+0x230>)
    2876:	4c6a      	ldr	r4, [pc, #424]	; (2a20 <InitLCD+0x234>)
    2878:	0026      	movs	r6, r4
    287a:	3634      	adds	r6, #52	; 0x34
			LCD_Write_COM16(k,0x00);
    287c:	2100      	movs	r1, #0
    287e:	9801      	ldr	r0, [sp, #4]
    2880:	47a8      	blx	r5
			LCD_Write_DATA8(beelzebub[l]);
    2882:	7820      	ldrb	r0, [r4, #0]
    2884:	47b8      	blx	r7
    2886:	3401      	adds	r4, #1
		for(int l = 0; l < 52; l++)
    2888:	42a6      	cmp	r6, r4
    288a:	d1f7      	bne.n	287c <InitLCD+0x90>
	for(char k = 0xD1; k < 0xD6; k++)
    288c:	9b01      	ldr	r3, [sp, #4]
    288e:	3301      	adds	r3, #1
    2890:	b2db      	uxtb	r3, r3
    2892:	9301      	str	r3, [sp, #4]
    2894:	2bd6      	cmp	r3, #214	; 0xd6
    2896:	d1ee      	bne.n	2876 <InitLCD+0x8a>
	LCD_Write_COM16(0xF0, 0x00);LCD_Write_DATA8(0x55);
    2898:	2100      	movs	r1, #0
    289a:	20f0      	movs	r0, #240	; 0xf0
    289c:	4c5d      	ldr	r4, [pc, #372]	; (2a14 <InitLCD+0x228>)
    289e:	47a0      	blx	r4
    28a0:	2055      	movs	r0, #85	; 0x55
    28a2:	4d5e      	ldr	r5, [pc, #376]	; (2a1c <InitLCD+0x230>)
    28a4:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x01);LCD_Write_DATA8(0xAA);	
    28a6:	2101      	movs	r1, #1
    28a8:	20f0      	movs	r0, #240	; 0xf0
    28aa:	47a0      	blx	r4
    28ac:	20aa      	movs	r0, #170	; 0xaa
    28ae:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x02);LCD_Write_DATA8(0x52);	
    28b0:	2102      	movs	r1, #2
    28b2:	20f0      	movs	r0, #240	; 0xf0
    28b4:	47a0      	blx	r4
    28b6:	2052      	movs	r0, #82	; 0x52
    28b8:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x03);LCD_Write_DATA8(0x08);	
    28ba:	2103      	movs	r1, #3
    28bc:	20f0      	movs	r0, #240	; 0xf0
    28be:	47a0      	blx	r4
    28c0:	2008      	movs	r0, #8
    28c2:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x04);LCD_Write_DATA8(0x00);	
    28c4:	2104      	movs	r1, #4
    28c6:	20f0      	movs	r0, #240	; 0xf0
    28c8:	47a0      	blx	r4
    28ca:	2000      	movs	r0, #0
    28cc:	47a8      	blx	r5
	LCD_Write_COM16(0xB1, 0x00);LCD_Write_DATA8(0xCC);
    28ce:	2100      	movs	r1, #0
    28d0:	20b1      	movs	r0, #177	; 0xb1
    28d2:	47a0      	blx	r4
    28d4:	20cc      	movs	r0, #204	; 0xcc
    28d6:	47a8      	blx	r5
	LCD_Write_COM16(0xB1, 0x01);LCD_Write_DATA8(0x00);	
    28d8:	2101      	movs	r1, #1
    28da:	20b1      	movs	r0, #177	; 0xb1
    28dc:	47a0      	blx	r4
    28de:	2000      	movs	r0, #0
    28e0:	47a8      	blx	r5
	LCD_Write_COM16(0xB5, 0x00);LCD_Write_DATA8(0x50);	
    28e2:	2100      	movs	r1, #0
    28e4:	20b5      	movs	r0, #181	; 0xb5
    28e6:	47a0      	blx	r4
    28e8:	2050      	movs	r0, #80	; 0x50
    28ea:	47a8      	blx	r5
	LCD_Write_COM16(0xB6, 0x00);LCD_Write_DATA8(0x05);
    28ec:	2100      	movs	r1, #0
    28ee:	20b6      	movs	r0, #182	; 0xb6
    28f0:	47a0      	blx	r4
    28f2:	2005      	movs	r0, #5
    28f4:	47a8      	blx	r5
	LCD_Write_COM16(0xB7, 0x00);LCD_Write_DATA8(0x70);
    28f6:	2100      	movs	r1, #0
    28f8:	20b7      	movs	r0, #183	; 0xb7
    28fa:	47a0      	blx	r4
    28fc:	2070      	movs	r0, #112	; 0x70
    28fe:	47a8      	blx	r5
	LCD_Write_COM16(0xB7, 0x01);LCD_Write_DATA8(0x70);
    2900:	2101      	movs	r1, #1
    2902:	20b7      	movs	r0, #183	; 0xb7
    2904:	47a0      	blx	r4
    2906:	2070      	movs	r0, #112	; 0x70
    2908:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x00);LCD_Write_DATA8(0x01);
    290a:	2100      	movs	r1, #0
    290c:	20b8      	movs	r0, #184	; 0xb8
    290e:	47a0      	blx	r4
    2910:	2001      	movs	r0, #1
    2912:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x01);LCD_Write_DATA8(0x03);
    2914:	2101      	movs	r1, #1
    2916:	20b8      	movs	r0, #184	; 0xb8
    2918:	47a0      	blx	r4
    291a:	2003      	movs	r0, #3
    291c:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x02);LCD_Write_DATA8(0x03);
    291e:	2102      	movs	r1, #2
    2920:	20b8      	movs	r0, #184	; 0xb8
    2922:	47a0      	blx	r4
    2924:	2003      	movs	r0, #3
    2926:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x03);LCD_Write_DATA8(0x03);	
    2928:	2103      	movs	r1, #3
    292a:	20b8      	movs	r0, #184	; 0xb8
    292c:	47a0      	blx	r4
    292e:	2003      	movs	r0, #3
    2930:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x00);LCD_Write_DATA8(0x02);
    2932:	2100      	movs	r1, #0
    2934:	20bc      	movs	r0, #188	; 0xbc
    2936:	47a0      	blx	r4
    2938:	2002      	movs	r0, #2
    293a:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x01);LCD_Write_DATA8(0x00);
    293c:	2101      	movs	r1, #1
    293e:	20bc      	movs	r0, #188	; 0xbc
    2940:	47a0      	blx	r4
    2942:	2000      	movs	r0, #0
    2944:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x02);LCD_Write_DATA8(0x00);
    2946:	2102      	movs	r1, #2
    2948:	20bc      	movs	r0, #188	; 0xbc
    294a:	47a0      	blx	r4
    294c:	2000      	movs	r0, #0
    294e:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x00);LCD_Write_DATA8(0xD0);
    2950:	2100      	movs	r1, #0
    2952:	20c9      	movs	r0, #201	; 0xc9
    2954:	47a0      	blx	r4
    2956:	20d0      	movs	r0, #208	; 0xd0
    2958:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x01);LCD_Write_DATA8(0x02);
    295a:	2101      	movs	r1, #1
    295c:	20c9      	movs	r0, #201	; 0xc9
    295e:	47a0      	blx	r4
    2960:	2002      	movs	r0, #2
    2962:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x02);LCD_Write_DATA8(0x50);
    2964:	2102      	movs	r1, #2
    2966:	20c9      	movs	r0, #201	; 0xc9
    2968:	47a0      	blx	r4
    296a:	2050      	movs	r0, #80	; 0x50
    296c:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x03);LCD_Write_DATA8(0x50);
    296e:	2103      	movs	r1, #3
    2970:	20c9      	movs	r0, #201	; 0xc9
    2972:	47a0      	blx	r4
    2974:	2050      	movs	r0, #80	; 0x50
    2976:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x04);LCD_Write_DATA8(0x50);
    2978:	2104      	movs	r1, #4
    297a:	20c9      	movs	r0, #201	; 0xc9
    297c:	47a0      	blx	r4
    297e:	2050      	movs	r0, #80	; 0x50
    2980:	47a8      	blx	r5
	LCD_Write_COM16(0x35, 0x00);LCD_Write_DATA8(0x00);
    2982:	2100      	movs	r1, #0
    2984:	2035      	movs	r0, #53	; 0x35
    2986:	47a0      	blx	r4
    2988:	2000      	movs	r0, #0
    298a:	47a8      	blx	r5
	LCD_Write_COM16(0x3A, 0x00);LCD_Write_DATA8(0x55);
    298c:	2100      	movs	r1, #0
    298e:	203a      	movs	r0, #58	; 0x3a
    2990:	47a0      	blx	r4
    2992:	2055      	movs	r0, #85	; 0x55
    2994:	47a8      	blx	r5
	LCD_Write_COM16(0x36, 0x00);LCD_Write_DATA8(0x00);
    2996:	2100      	movs	r1, #0
    2998:	2036      	movs	r0, #54	; 0x36
    299a:	47a0      	blx	r4
    299c:	2000      	movs	r0, #0
    299e:	47a8      	blx	r5
  	LCD_Write_COM16(0x11,0x00);   //Start Up  
    29a0:	2100      	movs	r1, #0
    29a2:	2011      	movs	r0, #17
    29a4:	47a0      	blx	r4
  	delay_ms(100);
    29a6:	2064      	movs	r0, #100	; 0x64
    29a8:	4e17      	ldr	r6, [pc, #92]	; (2a08 <InitLCD+0x21c>)
    29aa:	47b0      	blx	r6
  	LCD_Write_COM16(0x29,0x00);   //Display On  
    29ac:	2100      	movs	r1, #0
    29ae:	2029      	movs	r0, #41	; 0x29
    29b0:	47a0      	blx	r4
   	delay_ms(100);
    29b2:	2064      	movs	r0, #100	; 0x64
    29b4:	47b0      	blx	r6
	LCD_Write_COM16(0x51,0x00);LCD_Write_DATA8(0xFF);
    29b6:	2100      	movs	r1, #0
    29b8:	2051      	movs	r0, #81	; 0x51
    29ba:	47a0      	blx	r4
    29bc:	20ff      	movs	r0, #255	; 0xff
    29be:	47a8      	blx	r5
	REG_PORT_OUTSET1 = LCD_CS;
    29c0:	2280      	movs	r2, #128	; 0x80
    29c2:	03d2      	lsls	r2, r2, #15
    29c4:	4b0f      	ldr	r3, [pc, #60]	; (2a04 <InitLCD+0x218>)
    29c6:	601a      	str	r2, [r3, #0]
	clrScr();
    29c8:	4b16      	ldr	r3, [pc, #88]	; (2a24 <InitLCD+0x238>)
    29ca:	4798      	blx	r3
	setColorRGB(0,0,0);
    29cc:	2200      	movs	r2, #0
    29ce:	2100      	movs	r1, #0
    29d0:	2000      	movs	r0, #0
    29d2:	4b15      	ldr	r3, [pc, #84]	; (2a28 <InitLCD+0x23c>)
    29d4:	4798      	blx	r3
	setBackColorRGB(0, 0, 0);
    29d6:	2200      	movs	r2, #0
    29d8:	2100      	movs	r1, #0
    29da:	2000      	movs	r0, #0
    29dc:	4b13      	ldr	r3, [pc, #76]	; (2a2c <InitLCD+0x240>)
    29de:	4798      	blx	r3
	fillRect(0,0,799,489);
    29e0:	23ea      	movs	r3, #234	; 0xea
    29e2:	33ff      	adds	r3, #255	; 0xff
    29e4:	4a12      	ldr	r2, [pc, #72]	; (2a30 <InitLCD+0x244>)
    29e6:	2100      	movs	r1, #0
    29e8:	2000      	movs	r0, #0
    29ea:	4c12      	ldr	r4, [pc, #72]	; (2a34 <InitLCD+0x248>)
    29ec:	47a0      	blx	r4
}
    29ee:	b002      	add	sp, #8
    29f0:	bc04      	pop	{r2}
    29f2:	4690      	mov	r8, r2
    29f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    29f6:	46c0      	nop			; (mov r8, r8)
    29f8:	41004488 	.word	0x41004488
    29fc:	0000ffff 	.word	0x0000ffff
    2a00:	41004494 	.word	0x41004494
    2a04:	41004498 	.word	0x41004498
    2a08:	00000401 	.word	0x00000401
    2a0c:	00005ed8 	.word	0x00005ed8
    2a10:	00005e48 	.word	0x00005e48
    2a14:	000027a1 	.word	0x000027a1
    2a18:	00005e90 	.word	0x00005e90
    2a1c:	000027d1 	.word	0x000027d1
    2a20:	00005e14 	.word	0x00005e14
    2a24:	0000271d 	.word	0x0000271d
    2a28:	00002491 	.word	0x00002491
    2a2c:	000024b9 	.word	0x000024b9
    2a30:	0000031f 	.word	0x0000031f
    2a34:	000025dd 	.word	0x000025dd

00002a38 <SysTick_Handler>:

void SysTick_Handler(void)
{

	
	ul_tickcount++;
    2a38:	4a02      	ldr	r2, [pc, #8]	; (2a44 <SysTick_Handler+0xc>)
    2a3a:	8813      	ldrh	r3, [r2, #0]
    2a3c:	3301      	adds	r3, #1
    2a3e:	8013      	strh	r3, [r2, #0]
	{
		ul_tickcount = 0;
	}
	*/

}
    2a40:	4770      	bx	lr
    2a42:	46c0      	nop			; (mov r8, r8)
    2a44:	2000029a 	.word	0x2000029a

00002a48 <conf_systick>:

void conf_systick(void)
{
    2a48:	b510      	push	{r4, lr}
	//system_core_clk=48Mhz / 1000=48kHz systic clk if 48Mhz  is used
	SysTick_Config(SystemCoreClock/1000);
    2a4a:	4b0e      	ldr	r3, [pc, #56]	; (2a84 <conf_systick+0x3c>)
    2a4c:	6818      	ldr	r0, [r3, #0]
    2a4e:	21fa      	movs	r1, #250	; 0xfa
    2a50:	0089      	lsls	r1, r1, #2
    2a52:	4b0d      	ldr	r3, [pc, #52]	; (2a88 <conf_systick+0x40>)
    2a54:	4798      	blx	r3
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    2a56:	3801      	subs	r0, #1
    2a58:	4b0c      	ldr	r3, [pc, #48]	; (2a8c <conf_systick+0x44>)
    2a5a:	4298      	cmp	r0, r3
    2a5c:	d80d      	bhi.n	2a7a <conf_systick+0x32>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    2a5e:	4a0c      	ldr	r2, [pc, #48]	; (2a90 <conf_systick+0x48>)
    2a60:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    2a62:	480c      	ldr	r0, [pc, #48]	; (2a94 <conf_systick+0x4c>)
    2a64:	6a03      	ldr	r3, [r0, #32]
    2a66:	021b      	lsls	r3, r3, #8
    2a68:	0a1b      	lsrs	r3, r3, #8
    2a6a:	21c0      	movs	r1, #192	; 0xc0
    2a6c:	0609      	lsls	r1, r1, #24
    2a6e:	430b      	orrs	r3, r1
    2a70:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    2a72:	2300      	movs	r3, #0
    2a74:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    2a76:	3307      	adds	r3, #7
    2a78:	6013      	str	r3, [r2, #0]
    2a7a:	2280      	movs	r2, #128	; 0x80
    2a7c:	0612      	lsls	r2, r2, #24
    2a7e:	4b06      	ldr	r3, [pc, #24]	; (2a98 <conf_systick+0x50>)
    2a80:	601a      	str	r2, [r3, #0]
	system_interrupt_enable(SYSTEM_INTERRUPT_SYSTICK);
}
    2a82:	bd10      	pop	{r4, pc}
    2a84:	2000000c 	.word	0x2000000c
    2a88:	00002c15 	.word	0x00002c15
    2a8c:	00ffffff 	.word	0x00ffffff
    2a90:	e000e010 	.word	0xe000e010
    2a94:	e000ed00 	.word	0xe000ed00
    2a98:	e000e100 	.word	0xe000e100

00002a9c <configure_usart_USB>:

/**************************SERCOM STUFF*******************************/
void configure_usart_USB(void)
{
    2a9c:	b530      	push	{r4, r5, lr}
    2a9e:	b091      	sub	sp, #68	; 0x44
	config->data_order       = USART_DATAORDER_LSB;
    2aa0:	2380      	movs	r3, #128	; 0x80
    2aa2:	05db      	lsls	r3, r3, #23
    2aa4:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    2aa6:	2300      	movs	r3, #0
    2aa8:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    2aaa:	22ff      	movs	r2, #255	; 0xff
    2aac:	4669      	mov	r1, sp
    2aae:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    2ab0:	2200      	movs	r2, #0
    2ab2:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    2ab4:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
    2ab6:	2196      	movs	r1, #150	; 0x96
    2ab8:	0189      	lsls	r1, r1, #6
    2aba:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
    2abc:	2101      	movs	r1, #1
    2abe:	2024      	movs	r0, #36	; 0x24
    2ac0:	466c      	mov	r4, sp
    2ac2:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    2ac4:	3001      	adds	r0, #1
    2ac6:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    2ac8:	3125      	adds	r1, #37	; 0x25
    2aca:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    2acc:	3101      	adds	r1, #1
    2ace:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    2ad0:	930a      	str	r3, [sp, #40]	; 0x28
	config->run_in_standby   = false;
    2ad2:	3105      	adds	r1, #5
    2ad4:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    2ad6:	3101      	adds	r1, #1
    2ad8:	5463      	strb	r3, [r4, r1]
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    2ada:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    2adc:	8223      	strh	r3, [r4, #16]
	config->lin_slave_enable      = false;
    2ade:	76e3      	strb	r3, [r4, #27]
	config->immediate_buffer_overflow_notification  = false;
    2ae0:	7622      	strb	r2, [r4, #24]
	config->start_frame_detection_enable            = false;
    2ae2:	7722      	strb	r2, [r4, #28]
	config->encoding_format_enable                  = false;
    2ae4:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    2ae6:	2313      	movs	r3, #19
    2ae8:	76a3      	strb	r3, [r4, #26]
	config->collision_detection_enable              = false;
    2aea:	7762      	strb	r2, [r4, #29]
	struct usart_config config_usart_USB;
	usart_get_config_defaults(&config_usart_USB);

		config_usart_USB.baudrate    = 9600;
		config_usart_USB.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    2aec:	2380      	movs	r3, #128	; 0x80
    2aee:	035b      	lsls	r3, r3, #13
    2af0:	9303      	str	r3, [sp, #12]
		config_usart_USB.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    2af2:	4b12      	ldr	r3, [pc, #72]	; (2b3c <configure_usart_USB+0xa0>)
    2af4:	930c      	str	r3, [sp, #48]	; 0x30
		config_usart_USB.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    2af6:	4b12      	ldr	r3, [pc, #72]	; (2b40 <configure_usart_USB+0xa4>)
    2af8:	930d      	str	r3, [sp, #52]	; 0x34
		config_usart_USB.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    2afa:	2301      	movs	r3, #1
    2afc:	425b      	negs	r3, r3
    2afe:	930e      	str	r3, [sp, #56]	; 0x38
		config_usart_USB.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    2b00:	930f      	str	r3, [sp, #60]	; 0x3c
		while (usart_init(&usart_USB,
    2b02:	4d10      	ldr	r5, [pc, #64]	; (2b44 <configure_usart_USB+0xa8>)
    2b04:	4c10      	ldr	r4, [pc, #64]	; (2b48 <configure_usart_USB+0xac>)
    2b06:	466a      	mov	r2, sp
    2b08:	4910      	ldr	r1, [pc, #64]	; (2b4c <configure_usart_USB+0xb0>)
    2b0a:	0028      	movs	r0, r5
    2b0c:	47a0      	blx	r4
    2b0e:	2800      	cmp	r0, #0
    2b10:	d1f9      	bne.n	2b06 <configure_usart_USB+0x6a>
	SercomUsart *const usart_hw = &(module->hw->USART);
    2b12:	4d0c      	ldr	r5, [pc, #48]	; (2b44 <configure_usart_USB+0xa8>)
    2b14:	682c      	ldr	r4, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    2b16:	0020      	movs	r0, r4
    2b18:	4b0d      	ldr	r3, [pc, #52]	; (2b50 <configure_usart_USB+0xb4>)
    2b1a:	4798      	blx	r3
    2b1c:	231f      	movs	r3, #31
    2b1e:	4018      	ands	r0, r3
    2b20:	3b1e      	subs	r3, #30
    2b22:	4083      	lsls	r3, r0
    2b24:	4a0b      	ldr	r2, [pc, #44]	; (2b54 <configure_usart_USB+0xb8>)
    2b26:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2b28:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2b2a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2b2c:	2b00      	cmp	r3, #0
    2b2e:	d1fc      	bne.n	2b2a <configure_usart_USB+0x8e>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    2b30:	6823      	ldr	r3, [r4, #0]
    2b32:	2202      	movs	r2, #2
    2b34:	4313      	orrs	r3, r2
    2b36:	6023      	str	r3, [r4, #0]
		EDBG_CDC_MODULE, &config_usart_USB) != STATUS_OK) {
		}

	usart_enable(&usart_USB);
}
    2b38:	b011      	add	sp, #68	; 0x44
    2b3a:	bd30      	pop	{r4, r5, pc}
    2b3c:	00160002 	.word	0x00160002
    2b40:	00170002 	.word	0x00170002
    2b44:	200003d4 	.word	0x200003d4
    2b48:	00000a01 	.word	0x00000a01
    2b4c:	42001400 	.word	0x42001400
    2b50:	00000971 	.word	0x00000971
    2b54:	e000e100 	.word	0xe000e100

00002b58 <setupBoard>:
	adc_enable(&adc_instance);
}


void setupBoard(void)
{
    2b58:	b510      	push	{r4, lr}
	uint16_t adcResult;
	

	system_init();
    2b5a:	4c0e      	ldr	r4, [pc, #56]	; (2b94 <setupBoard+0x3c>)
    2b5c:	47a0      	blx	r4
	adc_start_conversion(&adc_instance);
	do {
		/* Wait for conversion to be done and read out result */
	//} while (adc_read(&adc_instance, &adcResult) == STATUS_BUSY);
	
	system_init();
    2b5e:	47a0      	blx	r4
	
	delay_init();
    2b60:	4b0d      	ldr	r3, [pc, #52]	; (2b98 <setupBoard+0x40>)
    2b62:	4798      	blx	r3
	srand(adcResult);
    2b64:	2000      	movs	r0, #0
    2b66:	4b0d      	ldr	r3, [pc, #52]	; (2b9c <setupBoard+0x44>)
    2b68:	4798      	blx	r3
	configure_usart_USB();
    2b6a:	4b0d      	ldr	r3, [pc, #52]	; (2ba0 <setupBoard+0x48>)
    2b6c:	4798      	blx	r3
	configure_console();
    2b6e:	4b0d      	ldr	r3, [pc, #52]	; (2ba4 <setupBoard+0x4c>)
    2b70:	4798      	blx	r3
	
	InitLCD();
    2b72:	4b0d      	ldr	r3, [pc, #52]	; (2ba8 <setupBoard+0x50>)
    2b74:	4798      	blx	r3
	splashScreen();
    2b76:	4b0d      	ldr	r3, [pc, #52]	; (2bac <setupBoard+0x54>)
    2b78:	4798      	blx	r3
		
	printf("Serial OK 9600 8N1\n\r");
    2b7a:	480d      	ldr	r0, [pc, #52]	; (2bb0 <setupBoard+0x58>)
    2b7c:	4b0d      	ldr	r3, [pc, #52]	; (2bb4 <setupBoard+0x5c>)
    2b7e:	4798      	blx	r3
	
	conf_systick();
    2b80:	4b0d      	ldr	r3, [pc, #52]	; (2bb8 <setupBoard+0x60>)
    2b82:	4798      	blx	r3
	clearCursorBuffer();
    2b84:	4b0d      	ldr	r3, [pc, #52]	; (2bbc <setupBoard+0x64>)
    2b86:	4798      	blx	r3

	moveCursor(0,0);
    2b88:	2100      	movs	r1, #0
    2b8a:	2000      	movs	r0, #0
    2b8c:	4b0c      	ldr	r3, [pc, #48]	; (2bc0 <setupBoard+0x68>)
    2b8e:	4798      	blx	r3
}
    2b90:	bd10      	pop	{r4, pc}
    2b92:	46c0      	nop			; (mov r8, r8)
    2b94:	000016d1 	.word	0x000016d1
    2b98:	000003c1 	.word	0x000003c1
    2b9c:	00002e21 	.word	0x00002e21
    2ba0:	00002a9d 	.word	0x00002a9d
    2ba4:	000018f9 	.word	0x000018f9
    2ba8:	000027ed 	.word	0x000027ed
    2bac:	000001e5 	.word	0x000001e5
    2bb0:	00005f20 	.word	0x00005f20
    2bb4:	00002ded 	.word	0x00002ded
    2bb8:	00002a49 	.word	0x00002a49
    2bbc:	00001f0d 	.word	0x00001f0d
    2bc0:	00001ff9 	.word	0x00001ff9

00002bc4 <main>:
{
    2bc4:	b570      	push	{r4, r5, r6, lr}
	setupBoard();
    2bc6:	4b0c      	ldr	r3, [pc, #48]	; (2bf8 <main+0x34>)
    2bc8:	4798      	blx	r3
		if(ul_tickcount == (UINT16_MAX/2))
    2bca:	4d0c      	ldr	r5, [pc, #48]	; (2bfc <main+0x38>)
			blinkCursor();
    2bcc:	4e0c      	ldr	r6, [pc, #48]	; (2c00 <main+0x3c>)
    2bce:	e011      	b.n	2bf4 <main+0x30>
		if(ul_tickcount % 200 == 0)
    2bd0:	8820      	ldrh	r0, [r4, #0]
    2bd2:	21c8      	movs	r1, #200	; 0xc8
    2bd4:	4b0b      	ldr	r3, [pc, #44]	; (2c04 <main+0x40>)
    2bd6:	4798      	blx	r3
    2bd8:	b289      	uxth	r1, r1
    2bda:	2900      	cmp	r1, #0
    2bdc:	d006      	beq.n	2bec <main+0x28>
		__WFI();
    2bde:	bf30      	wfi
		if(ul_tickcount == (UINT16_MAX/2))
    2be0:	4b09      	ldr	r3, [pc, #36]	; (2c08 <main+0x44>)
    2be2:	882a      	ldrh	r2, [r5, #0]
    2be4:	429a      	cmp	r2, r3
    2be6:	d1f3      	bne.n	2bd0 <main+0xc>
			blinkCursor();
    2be8:	47b0      	blx	r6
    2bea:	e7f1      	b.n	2bd0 <main+0xc>
			readKeyboard();
    2bec:	4b07      	ldr	r3, [pc, #28]	; (2c0c <main+0x48>)
    2bee:	4798      	blx	r3
			printKeyboardBuffer();
    2bf0:	4b07      	ldr	r3, [pc, #28]	; (2c10 <main+0x4c>)
    2bf2:	4798      	blx	r3
		if(ul_tickcount % 200 == 0)
    2bf4:	4c01      	ldr	r4, [pc, #4]	; (2bfc <main+0x38>)
    2bf6:	e7f2      	b.n	2bde <main+0x1a>
    2bf8:	00002b59 	.word	0x00002b59
    2bfc:	2000029a 	.word	0x2000029a
    2c00:	000020f9 	.word	0x000020f9
    2c04:	00002d21 	.word	0x00002d21
    2c08:	00007fff 	.word	0x00007fff
    2c0c:	00001d0d 	.word	0x00001d0d
    2c10:	0000220d 	.word	0x0000220d

00002c14 <__udivsi3>:
    2c14:	2200      	movs	r2, #0
    2c16:	0843      	lsrs	r3, r0, #1
    2c18:	428b      	cmp	r3, r1
    2c1a:	d374      	bcc.n	2d06 <__udivsi3+0xf2>
    2c1c:	0903      	lsrs	r3, r0, #4
    2c1e:	428b      	cmp	r3, r1
    2c20:	d35f      	bcc.n	2ce2 <__udivsi3+0xce>
    2c22:	0a03      	lsrs	r3, r0, #8
    2c24:	428b      	cmp	r3, r1
    2c26:	d344      	bcc.n	2cb2 <__udivsi3+0x9e>
    2c28:	0b03      	lsrs	r3, r0, #12
    2c2a:	428b      	cmp	r3, r1
    2c2c:	d328      	bcc.n	2c80 <__udivsi3+0x6c>
    2c2e:	0c03      	lsrs	r3, r0, #16
    2c30:	428b      	cmp	r3, r1
    2c32:	d30d      	bcc.n	2c50 <__udivsi3+0x3c>
    2c34:	22ff      	movs	r2, #255	; 0xff
    2c36:	0209      	lsls	r1, r1, #8
    2c38:	ba12      	rev	r2, r2
    2c3a:	0c03      	lsrs	r3, r0, #16
    2c3c:	428b      	cmp	r3, r1
    2c3e:	d302      	bcc.n	2c46 <__udivsi3+0x32>
    2c40:	1212      	asrs	r2, r2, #8
    2c42:	0209      	lsls	r1, r1, #8
    2c44:	d065      	beq.n	2d12 <__udivsi3+0xfe>
    2c46:	0b03      	lsrs	r3, r0, #12
    2c48:	428b      	cmp	r3, r1
    2c4a:	d319      	bcc.n	2c80 <__udivsi3+0x6c>
    2c4c:	e000      	b.n	2c50 <__udivsi3+0x3c>
    2c4e:	0a09      	lsrs	r1, r1, #8
    2c50:	0bc3      	lsrs	r3, r0, #15
    2c52:	428b      	cmp	r3, r1
    2c54:	d301      	bcc.n	2c5a <__udivsi3+0x46>
    2c56:	03cb      	lsls	r3, r1, #15
    2c58:	1ac0      	subs	r0, r0, r3
    2c5a:	4152      	adcs	r2, r2
    2c5c:	0b83      	lsrs	r3, r0, #14
    2c5e:	428b      	cmp	r3, r1
    2c60:	d301      	bcc.n	2c66 <__udivsi3+0x52>
    2c62:	038b      	lsls	r3, r1, #14
    2c64:	1ac0      	subs	r0, r0, r3
    2c66:	4152      	adcs	r2, r2
    2c68:	0b43      	lsrs	r3, r0, #13
    2c6a:	428b      	cmp	r3, r1
    2c6c:	d301      	bcc.n	2c72 <__udivsi3+0x5e>
    2c6e:	034b      	lsls	r3, r1, #13
    2c70:	1ac0      	subs	r0, r0, r3
    2c72:	4152      	adcs	r2, r2
    2c74:	0b03      	lsrs	r3, r0, #12
    2c76:	428b      	cmp	r3, r1
    2c78:	d301      	bcc.n	2c7e <__udivsi3+0x6a>
    2c7a:	030b      	lsls	r3, r1, #12
    2c7c:	1ac0      	subs	r0, r0, r3
    2c7e:	4152      	adcs	r2, r2
    2c80:	0ac3      	lsrs	r3, r0, #11
    2c82:	428b      	cmp	r3, r1
    2c84:	d301      	bcc.n	2c8a <__udivsi3+0x76>
    2c86:	02cb      	lsls	r3, r1, #11
    2c88:	1ac0      	subs	r0, r0, r3
    2c8a:	4152      	adcs	r2, r2
    2c8c:	0a83      	lsrs	r3, r0, #10
    2c8e:	428b      	cmp	r3, r1
    2c90:	d301      	bcc.n	2c96 <__udivsi3+0x82>
    2c92:	028b      	lsls	r3, r1, #10
    2c94:	1ac0      	subs	r0, r0, r3
    2c96:	4152      	adcs	r2, r2
    2c98:	0a43      	lsrs	r3, r0, #9
    2c9a:	428b      	cmp	r3, r1
    2c9c:	d301      	bcc.n	2ca2 <__udivsi3+0x8e>
    2c9e:	024b      	lsls	r3, r1, #9
    2ca0:	1ac0      	subs	r0, r0, r3
    2ca2:	4152      	adcs	r2, r2
    2ca4:	0a03      	lsrs	r3, r0, #8
    2ca6:	428b      	cmp	r3, r1
    2ca8:	d301      	bcc.n	2cae <__udivsi3+0x9a>
    2caa:	020b      	lsls	r3, r1, #8
    2cac:	1ac0      	subs	r0, r0, r3
    2cae:	4152      	adcs	r2, r2
    2cb0:	d2cd      	bcs.n	2c4e <__udivsi3+0x3a>
    2cb2:	09c3      	lsrs	r3, r0, #7
    2cb4:	428b      	cmp	r3, r1
    2cb6:	d301      	bcc.n	2cbc <__udivsi3+0xa8>
    2cb8:	01cb      	lsls	r3, r1, #7
    2cba:	1ac0      	subs	r0, r0, r3
    2cbc:	4152      	adcs	r2, r2
    2cbe:	0983      	lsrs	r3, r0, #6
    2cc0:	428b      	cmp	r3, r1
    2cc2:	d301      	bcc.n	2cc8 <__udivsi3+0xb4>
    2cc4:	018b      	lsls	r3, r1, #6
    2cc6:	1ac0      	subs	r0, r0, r3
    2cc8:	4152      	adcs	r2, r2
    2cca:	0943      	lsrs	r3, r0, #5
    2ccc:	428b      	cmp	r3, r1
    2cce:	d301      	bcc.n	2cd4 <__udivsi3+0xc0>
    2cd0:	014b      	lsls	r3, r1, #5
    2cd2:	1ac0      	subs	r0, r0, r3
    2cd4:	4152      	adcs	r2, r2
    2cd6:	0903      	lsrs	r3, r0, #4
    2cd8:	428b      	cmp	r3, r1
    2cda:	d301      	bcc.n	2ce0 <__udivsi3+0xcc>
    2cdc:	010b      	lsls	r3, r1, #4
    2cde:	1ac0      	subs	r0, r0, r3
    2ce0:	4152      	adcs	r2, r2
    2ce2:	08c3      	lsrs	r3, r0, #3
    2ce4:	428b      	cmp	r3, r1
    2ce6:	d301      	bcc.n	2cec <__udivsi3+0xd8>
    2ce8:	00cb      	lsls	r3, r1, #3
    2cea:	1ac0      	subs	r0, r0, r3
    2cec:	4152      	adcs	r2, r2
    2cee:	0883      	lsrs	r3, r0, #2
    2cf0:	428b      	cmp	r3, r1
    2cf2:	d301      	bcc.n	2cf8 <__udivsi3+0xe4>
    2cf4:	008b      	lsls	r3, r1, #2
    2cf6:	1ac0      	subs	r0, r0, r3
    2cf8:	4152      	adcs	r2, r2
    2cfa:	0843      	lsrs	r3, r0, #1
    2cfc:	428b      	cmp	r3, r1
    2cfe:	d301      	bcc.n	2d04 <__udivsi3+0xf0>
    2d00:	004b      	lsls	r3, r1, #1
    2d02:	1ac0      	subs	r0, r0, r3
    2d04:	4152      	adcs	r2, r2
    2d06:	1a41      	subs	r1, r0, r1
    2d08:	d200      	bcs.n	2d0c <__udivsi3+0xf8>
    2d0a:	4601      	mov	r1, r0
    2d0c:	4152      	adcs	r2, r2
    2d0e:	4610      	mov	r0, r2
    2d10:	4770      	bx	lr
    2d12:	e7ff      	b.n	2d14 <__udivsi3+0x100>
    2d14:	b501      	push	{r0, lr}
    2d16:	2000      	movs	r0, #0
    2d18:	f000 f806 	bl	2d28 <__aeabi_idiv0>
    2d1c:	bd02      	pop	{r1, pc}
    2d1e:	46c0      	nop			; (mov r8, r8)

00002d20 <__aeabi_uidivmod>:
    2d20:	2900      	cmp	r1, #0
    2d22:	d0f7      	beq.n	2d14 <__udivsi3+0x100>
    2d24:	e776      	b.n	2c14 <__udivsi3>
    2d26:	4770      	bx	lr

00002d28 <__aeabi_idiv0>:
    2d28:	4770      	bx	lr
    2d2a:	46c0      	nop			; (mov r8, r8)

00002d2c <__aeabi_lmul>:
    2d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d2e:	46ce      	mov	lr, r9
    2d30:	4647      	mov	r7, r8
    2d32:	0415      	lsls	r5, r2, #16
    2d34:	0c2d      	lsrs	r5, r5, #16
    2d36:	002e      	movs	r6, r5
    2d38:	b580      	push	{r7, lr}
    2d3a:	0407      	lsls	r7, r0, #16
    2d3c:	0c14      	lsrs	r4, r2, #16
    2d3e:	0c3f      	lsrs	r7, r7, #16
    2d40:	4699      	mov	r9, r3
    2d42:	0c03      	lsrs	r3, r0, #16
    2d44:	437e      	muls	r6, r7
    2d46:	435d      	muls	r5, r3
    2d48:	4367      	muls	r7, r4
    2d4a:	4363      	muls	r3, r4
    2d4c:	197f      	adds	r7, r7, r5
    2d4e:	0c34      	lsrs	r4, r6, #16
    2d50:	19e4      	adds	r4, r4, r7
    2d52:	469c      	mov	ip, r3
    2d54:	42a5      	cmp	r5, r4
    2d56:	d903      	bls.n	2d60 <__aeabi_lmul+0x34>
    2d58:	2380      	movs	r3, #128	; 0x80
    2d5a:	025b      	lsls	r3, r3, #9
    2d5c:	4698      	mov	r8, r3
    2d5e:	44c4      	add	ip, r8
    2d60:	464b      	mov	r3, r9
    2d62:	4351      	muls	r1, r2
    2d64:	4343      	muls	r3, r0
    2d66:	0436      	lsls	r6, r6, #16
    2d68:	0c36      	lsrs	r6, r6, #16
    2d6a:	0c25      	lsrs	r5, r4, #16
    2d6c:	0424      	lsls	r4, r4, #16
    2d6e:	4465      	add	r5, ip
    2d70:	19a4      	adds	r4, r4, r6
    2d72:	1859      	adds	r1, r3, r1
    2d74:	1949      	adds	r1, r1, r5
    2d76:	0020      	movs	r0, r4
    2d78:	bc0c      	pop	{r2, r3}
    2d7a:	4690      	mov	r8, r2
    2d7c:	4699      	mov	r9, r3
    2d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002d80 <__libc_init_array>:
    2d80:	b570      	push	{r4, r5, r6, lr}
    2d82:	2600      	movs	r6, #0
    2d84:	4d0c      	ldr	r5, [pc, #48]	; (2db8 <__libc_init_array+0x38>)
    2d86:	4c0d      	ldr	r4, [pc, #52]	; (2dbc <__libc_init_array+0x3c>)
    2d88:	1b64      	subs	r4, r4, r5
    2d8a:	10a4      	asrs	r4, r4, #2
    2d8c:	42a6      	cmp	r6, r4
    2d8e:	d109      	bne.n	2da4 <__libc_init_array+0x24>
    2d90:	2600      	movs	r6, #0
    2d92:	f003 f91d 	bl	5fd0 <_init>
    2d96:	4d0a      	ldr	r5, [pc, #40]	; (2dc0 <__libc_init_array+0x40>)
    2d98:	4c0a      	ldr	r4, [pc, #40]	; (2dc4 <__libc_init_array+0x44>)
    2d9a:	1b64      	subs	r4, r4, r5
    2d9c:	10a4      	asrs	r4, r4, #2
    2d9e:	42a6      	cmp	r6, r4
    2da0:	d105      	bne.n	2dae <__libc_init_array+0x2e>
    2da2:	bd70      	pop	{r4, r5, r6, pc}
    2da4:	00b3      	lsls	r3, r6, #2
    2da6:	58eb      	ldr	r3, [r5, r3]
    2da8:	4798      	blx	r3
    2daa:	3601      	adds	r6, #1
    2dac:	e7ee      	b.n	2d8c <__libc_init_array+0xc>
    2dae:	00b3      	lsls	r3, r6, #2
    2db0:	58eb      	ldr	r3, [r5, r3]
    2db2:	4798      	blx	r3
    2db4:	3601      	adds	r6, #1
    2db6:	e7f2      	b.n	2d9e <__libc_init_array+0x1e>
    2db8:	00005fdc 	.word	0x00005fdc
    2dbc:	00005fdc 	.word	0x00005fdc
    2dc0:	00005fdc 	.word	0x00005fdc
    2dc4:	00005fe0 	.word	0x00005fe0

00002dc8 <memcpy>:
    2dc8:	2300      	movs	r3, #0
    2dca:	b510      	push	{r4, lr}
    2dcc:	429a      	cmp	r2, r3
    2dce:	d100      	bne.n	2dd2 <memcpy+0xa>
    2dd0:	bd10      	pop	{r4, pc}
    2dd2:	5ccc      	ldrb	r4, [r1, r3]
    2dd4:	54c4      	strb	r4, [r0, r3]
    2dd6:	3301      	adds	r3, #1
    2dd8:	e7f8      	b.n	2dcc <memcpy+0x4>

00002dda <memset>:
    2dda:	0003      	movs	r3, r0
    2ddc:	1882      	adds	r2, r0, r2
    2dde:	4293      	cmp	r3, r2
    2de0:	d100      	bne.n	2de4 <memset+0xa>
    2de2:	4770      	bx	lr
    2de4:	7019      	strb	r1, [r3, #0]
    2de6:	3301      	adds	r3, #1
    2de8:	e7f9      	b.n	2dde <memset+0x4>
	...

00002dec <iprintf>:
    2dec:	b40f      	push	{r0, r1, r2, r3}
    2dee:	4b0b      	ldr	r3, [pc, #44]	; (2e1c <iprintf+0x30>)
    2df0:	b513      	push	{r0, r1, r4, lr}
    2df2:	681c      	ldr	r4, [r3, #0]
    2df4:	2c00      	cmp	r4, #0
    2df6:	d005      	beq.n	2e04 <iprintf+0x18>
    2df8:	69a3      	ldr	r3, [r4, #24]
    2dfa:	2b00      	cmp	r3, #0
    2dfc:	d102      	bne.n	2e04 <iprintf+0x18>
    2dfe:	0020      	movs	r0, r4
    2e00:	f000 fa2e 	bl	3260 <__sinit>
    2e04:	ab05      	add	r3, sp, #20
    2e06:	9a04      	ldr	r2, [sp, #16]
    2e08:	68a1      	ldr	r1, [r4, #8]
    2e0a:	0020      	movs	r0, r4
    2e0c:	9301      	str	r3, [sp, #4]
    2e0e:	f000 fc03 	bl	3618 <_vfiprintf_r>
    2e12:	bc16      	pop	{r1, r2, r4}
    2e14:	bc08      	pop	{r3}
    2e16:	b004      	add	sp, #16
    2e18:	4718      	bx	r3
    2e1a:	46c0      	nop			; (mov r8, r8)
    2e1c:	20000158 	.word	0x20000158

00002e20 <srand>:
    2e20:	4b10      	ldr	r3, [pc, #64]	; (2e64 <srand+0x44>)
    2e22:	b570      	push	{r4, r5, r6, lr}
    2e24:	681c      	ldr	r4, [r3, #0]
    2e26:	0005      	movs	r5, r0
    2e28:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    2e2a:	2b00      	cmp	r3, #0
    2e2c:	d115      	bne.n	2e5a <srand+0x3a>
    2e2e:	2018      	movs	r0, #24
    2e30:	f000 fb18 	bl	3464 <malloc>
    2e34:	4b0c      	ldr	r3, [pc, #48]	; (2e68 <srand+0x48>)
    2e36:	63a0      	str	r0, [r4, #56]	; 0x38
    2e38:	8003      	strh	r3, [r0, #0]
    2e3a:	4b0c      	ldr	r3, [pc, #48]	; (2e6c <srand+0x4c>)
    2e3c:	2201      	movs	r2, #1
    2e3e:	8043      	strh	r3, [r0, #2]
    2e40:	4b0b      	ldr	r3, [pc, #44]	; (2e70 <srand+0x50>)
    2e42:	8083      	strh	r3, [r0, #4]
    2e44:	4b0b      	ldr	r3, [pc, #44]	; (2e74 <srand+0x54>)
    2e46:	80c3      	strh	r3, [r0, #6]
    2e48:	4b0b      	ldr	r3, [pc, #44]	; (2e78 <srand+0x58>)
    2e4a:	8103      	strh	r3, [r0, #8]
    2e4c:	2305      	movs	r3, #5
    2e4e:	8143      	strh	r3, [r0, #10]
    2e50:	3306      	adds	r3, #6
    2e52:	8183      	strh	r3, [r0, #12]
    2e54:	2300      	movs	r3, #0
    2e56:	6102      	str	r2, [r0, #16]
    2e58:	6143      	str	r3, [r0, #20]
    2e5a:	2200      	movs	r2, #0
    2e5c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    2e5e:	611d      	str	r5, [r3, #16]
    2e60:	615a      	str	r2, [r3, #20]
    2e62:	bd70      	pop	{r4, r5, r6, pc}
    2e64:	20000158 	.word	0x20000158
    2e68:	0000330e 	.word	0x0000330e
    2e6c:	ffffabcd 	.word	0xffffabcd
    2e70:	00001234 	.word	0x00001234
    2e74:	ffffe66d 	.word	0xffffe66d
    2e78:	ffffdeec 	.word	0xffffdeec

00002e7c <rand>:
    2e7c:	4b15      	ldr	r3, [pc, #84]	; (2ed4 <rand+0x58>)
    2e7e:	b510      	push	{r4, lr}
    2e80:	681c      	ldr	r4, [r3, #0]
    2e82:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    2e84:	2b00      	cmp	r3, #0
    2e86:	d115      	bne.n	2eb4 <rand+0x38>
    2e88:	2018      	movs	r0, #24
    2e8a:	f000 faeb 	bl	3464 <malloc>
    2e8e:	4b12      	ldr	r3, [pc, #72]	; (2ed8 <rand+0x5c>)
    2e90:	63a0      	str	r0, [r4, #56]	; 0x38
    2e92:	8003      	strh	r3, [r0, #0]
    2e94:	4b11      	ldr	r3, [pc, #68]	; (2edc <rand+0x60>)
    2e96:	2201      	movs	r2, #1
    2e98:	8043      	strh	r3, [r0, #2]
    2e9a:	4b11      	ldr	r3, [pc, #68]	; (2ee0 <rand+0x64>)
    2e9c:	8083      	strh	r3, [r0, #4]
    2e9e:	4b11      	ldr	r3, [pc, #68]	; (2ee4 <rand+0x68>)
    2ea0:	80c3      	strh	r3, [r0, #6]
    2ea2:	4b11      	ldr	r3, [pc, #68]	; (2ee8 <rand+0x6c>)
    2ea4:	8103      	strh	r3, [r0, #8]
    2ea6:	2305      	movs	r3, #5
    2ea8:	8143      	strh	r3, [r0, #10]
    2eaa:	3306      	adds	r3, #6
    2eac:	8183      	strh	r3, [r0, #12]
    2eae:	2300      	movs	r3, #0
    2eb0:	6102      	str	r2, [r0, #16]
    2eb2:	6143      	str	r3, [r0, #20]
    2eb4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
    2eb6:	4a0d      	ldr	r2, [pc, #52]	; (2eec <rand+0x70>)
    2eb8:	6920      	ldr	r0, [r4, #16]
    2eba:	6961      	ldr	r1, [r4, #20]
    2ebc:	4b0c      	ldr	r3, [pc, #48]	; (2ef0 <rand+0x74>)
    2ebe:	f7ff ff35 	bl	2d2c <__aeabi_lmul>
    2ec2:	2201      	movs	r2, #1
    2ec4:	2300      	movs	r3, #0
    2ec6:	1880      	adds	r0, r0, r2
    2ec8:	4159      	adcs	r1, r3
    2eca:	6120      	str	r0, [r4, #16]
    2ecc:	6161      	str	r1, [r4, #20]
    2ece:	0048      	lsls	r0, r1, #1
    2ed0:	0840      	lsrs	r0, r0, #1
    2ed2:	bd10      	pop	{r4, pc}
    2ed4:	20000158 	.word	0x20000158
    2ed8:	0000330e 	.word	0x0000330e
    2edc:	ffffabcd 	.word	0xffffabcd
    2ee0:	00001234 	.word	0x00001234
    2ee4:	ffffe66d 	.word	0xffffe66d
    2ee8:	ffffdeec 	.word	0xffffdeec
    2eec:	4c957f2d 	.word	0x4c957f2d
    2ef0:	5851f42d 	.word	0x5851f42d

00002ef4 <setbuf>:
    2ef4:	424a      	negs	r2, r1
    2ef6:	414a      	adcs	r2, r1
    2ef8:	2380      	movs	r3, #128	; 0x80
    2efa:	b510      	push	{r4, lr}
    2efc:	0052      	lsls	r2, r2, #1
    2efe:	00db      	lsls	r3, r3, #3
    2f00:	f000 f802 	bl	2f08 <setvbuf>
    2f04:	bd10      	pop	{r4, pc}
	...

00002f08 <setvbuf>:
    2f08:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f0a:	001d      	movs	r5, r3
    2f0c:	4b4f      	ldr	r3, [pc, #316]	; (304c <setvbuf+0x144>)
    2f0e:	b085      	sub	sp, #20
    2f10:	681e      	ldr	r6, [r3, #0]
    2f12:	0004      	movs	r4, r0
    2f14:	000f      	movs	r7, r1
    2f16:	9200      	str	r2, [sp, #0]
    2f18:	2e00      	cmp	r6, #0
    2f1a:	d005      	beq.n	2f28 <setvbuf+0x20>
    2f1c:	69b3      	ldr	r3, [r6, #24]
    2f1e:	2b00      	cmp	r3, #0
    2f20:	d102      	bne.n	2f28 <setvbuf+0x20>
    2f22:	0030      	movs	r0, r6
    2f24:	f000 f99c 	bl	3260 <__sinit>
    2f28:	4b49      	ldr	r3, [pc, #292]	; (3050 <setvbuf+0x148>)
    2f2a:	429c      	cmp	r4, r3
    2f2c:	d150      	bne.n	2fd0 <setvbuf+0xc8>
    2f2e:	6874      	ldr	r4, [r6, #4]
    2f30:	9b00      	ldr	r3, [sp, #0]
    2f32:	2b02      	cmp	r3, #2
    2f34:	d005      	beq.n	2f42 <setvbuf+0x3a>
    2f36:	2b01      	cmp	r3, #1
    2f38:	d900      	bls.n	2f3c <setvbuf+0x34>
    2f3a:	e084      	b.n	3046 <setvbuf+0x13e>
    2f3c:	2d00      	cmp	r5, #0
    2f3e:	da00      	bge.n	2f42 <setvbuf+0x3a>
    2f40:	e081      	b.n	3046 <setvbuf+0x13e>
    2f42:	0021      	movs	r1, r4
    2f44:	0030      	movs	r0, r6
    2f46:	f000 f91d 	bl	3184 <_fflush_r>
    2f4a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    2f4c:	2900      	cmp	r1, #0
    2f4e:	d008      	beq.n	2f62 <setvbuf+0x5a>
    2f50:	0023      	movs	r3, r4
    2f52:	3344      	adds	r3, #68	; 0x44
    2f54:	4299      	cmp	r1, r3
    2f56:	d002      	beq.n	2f5e <setvbuf+0x56>
    2f58:	0030      	movs	r0, r6
    2f5a:	f000 fa8d 	bl	3478 <_free_r>
    2f5e:	2300      	movs	r3, #0
    2f60:	6363      	str	r3, [r4, #52]	; 0x34
    2f62:	2300      	movs	r3, #0
    2f64:	61a3      	str	r3, [r4, #24]
    2f66:	6063      	str	r3, [r4, #4]
    2f68:	89a3      	ldrh	r3, [r4, #12]
    2f6a:	061b      	lsls	r3, r3, #24
    2f6c:	d503      	bpl.n	2f76 <setvbuf+0x6e>
    2f6e:	6921      	ldr	r1, [r4, #16]
    2f70:	0030      	movs	r0, r6
    2f72:	f000 fa81 	bl	3478 <_free_r>
    2f76:	89a3      	ldrh	r3, [r4, #12]
    2f78:	4a36      	ldr	r2, [pc, #216]	; (3054 <setvbuf+0x14c>)
    2f7a:	4013      	ands	r3, r2
    2f7c:	81a3      	strh	r3, [r4, #12]
    2f7e:	9b00      	ldr	r3, [sp, #0]
    2f80:	2b02      	cmp	r3, #2
    2f82:	d05a      	beq.n	303a <setvbuf+0x132>
    2f84:	ab03      	add	r3, sp, #12
    2f86:	aa02      	add	r2, sp, #8
    2f88:	0021      	movs	r1, r4
    2f8a:	0030      	movs	r0, r6
    2f8c:	f000 f9fe 	bl	338c <__swhatbuf_r>
    2f90:	89a3      	ldrh	r3, [r4, #12]
    2f92:	4318      	orrs	r0, r3
    2f94:	81a0      	strh	r0, [r4, #12]
    2f96:	2d00      	cmp	r5, #0
    2f98:	d124      	bne.n	2fe4 <setvbuf+0xdc>
    2f9a:	9d02      	ldr	r5, [sp, #8]
    2f9c:	0028      	movs	r0, r5
    2f9e:	f000 fa61 	bl	3464 <malloc>
    2fa2:	9501      	str	r5, [sp, #4]
    2fa4:	1e07      	subs	r7, r0, #0
    2fa6:	d142      	bne.n	302e <setvbuf+0x126>
    2fa8:	9b02      	ldr	r3, [sp, #8]
    2faa:	9301      	str	r3, [sp, #4]
    2fac:	42ab      	cmp	r3, r5
    2fae:	d139      	bne.n	3024 <setvbuf+0x11c>
    2fb0:	2001      	movs	r0, #1
    2fb2:	4240      	negs	r0, r0
    2fb4:	2302      	movs	r3, #2
    2fb6:	89a2      	ldrh	r2, [r4, #12]
    2fb8:	4313      	orrs	r3, r2
    2fba:	81a3      	strh	r3, [r4, #12]
    2fbc:	2300      	movs	r3, #0
    2fbe:	60a3      	str	r3, [r4, #8]
    2fc0:	0023      	movs	r3, r4
    2fc2:	3347      	adds	r3, #71	; 0x47
    2fc4:	6023      	str	r3, [r4, #0]
    2fc6:	6123      	str	r3, [r4, #16]
    2fc8:	2301      	movs	r3, #1
    2fca:	6163      	str	r3, [r4, #20]
    2fcc:	b005      	add	sp, #20
    2fce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2fd0:	4b21      	ldr	r3, [pc, #132]	; (3058 <setvbuf+0x150>)
    2fd2:	429c      	cmp	r4, r3
    2fd4:	d101      	bne.n	2fda <setvbuf+0xd2>
    2fd6:	68b4      	ldr	r4, [r6, #8]
    2fd8:	e7aa      	b.n	2f30 <setvbuf+0x28>
    2fda:	4b20      	ldr	r3, [pc, #128]	; (305c <setvbuf+0x154>)
    2fdc:	429c      	cmp	r4, r3
    2fde:	d1a7      	bne.n	2f30 <setvbuf+0x28>
    2fe0:	68f4      	ldr	r4, [r6, #12]
    2fe2:	e7a5      	b.n	2f30 <setvbuf+0x28>
    2fe4:	2f00      	cmp	r7, #0
    2fe6:	d0d9      	beq.n	2f9c <setvbuf+0x94>
    2fe8:	69b3      	ldr	r3, [r6, #24]
    2fea:	2b00      	cmp	r3, #0
    2fec:	d102      	bne.n	2ff4 <setvbuf+0xec>
    2fee:	0030      	movs	r0, r6
    2ff0:	f000 f936 	bl	3260 <__sinit>
    2ff4:	9b00      	ldr	r3, [sp, #0]
    2ff6:	2b01      	cmp	r3, #1
    2ff8:	d103      	bne.n	3002 <setvbuf+0xfa>
    2ffa:	89a3      	ldrh	r3, [r4, #12]
    2ffc:	9a00      	ldr	r2, [sp, #0]
    2ffe:	431a      	orrs	r2, r3
    3000:	81a2      	strh	r2, [r4, #12]
    3002:	2008      	movs	r0, #8
    3004:	89a3      	ldrh	r3, [r4, #12]
    3006:	6027      	str	r7, [r4, #0]
    3008:	6127      	str	r7, [r4, #16]
    300a:	6165      	str	r5, [r4, #20]
    300c:	4018      	ands	r0, r3
    300e:	d018      	beq.n	3042 <setvbuf+0x13a>
    3010:	2001      	movs	r0, #1
    3012:	4018      	ands	r0, r3
    3014:	2300      	movs	r3, #0
    3016:	4298      	cmp	r0, r3
    3018:	d011      	beq.n	303e <setvbuf+0x136>
    301a:	426d      	negs	r5, r5
    301c:	60a3      	str	r3, [r4, #8]
    301e:	61a5      	str	r5, [r4, #24]
    3020:	0018      	movs	r0, r3
    3022:	e7d3      	b.n	2fcc <setvbuf+0xc4>
    3024:	9801      	ldr	r0, [sp, #4]
    3026:	f000 fa1d 	bl	3464 <malloc>
    302a:	1e07      	subs	r7, r0, #0
    302c:	d0c0      	beq.n	2fb0 <setvbuf+0xa8>
    302e:	2380      	movs	r3, #128	; 0x80
    3030:	89a2      	ldrh	r2, [r4, #12]
    3032:	9d01      	ldr	r5, [sp, #4]
    3034:	4313      	orrs	r3, r2
    3036:	81a3      	strh	r3, [r4, #12]
    3038:	e7d6      	b.n	2fe8 <setvbuf+0xe0>
    303a:	2000      	movs	r0, #0
    303c:	e7ba      	b.n	2fb4 <setvbuf+0xac>
    303e:	60a5      	str	r5, [r4, #8]
    3040:	e7c4      	b.n	2fcc <setvbuf+0xc4>
    3042:	60a0      	str	r0, [r4, #8]
    3044:	e7c2      	b.n	2fcc <setvbuf+0xc4>
    3046:	2001      	movs	r0, #1
    3048:	4240      	negs	r0, r0
    304a:	e7bf      	b.n	2fcc <setvbuf+0xc4>
    304c:	20000158 	.word	0x20000158
    3050:	00005f5c 	.word	0x00005f5c
    3054:	fffff35c 	.word	0xfffff35c
    3058:	00005f7c 	.word	0x00005f7c
    305c:	00005f3c 	.word	0x00005f3c

00003060 <strlen>:
    3060:	2300      	movs	r3, #0
    3062:	5cc2      	ldrb	r2, [r0, r3]
    3064:	3301      	adds	r3, #1
    3066:	2a00      	cmp	r2, #0
    3068:	d1fb      	bne.n	3062 <strlen+0x2>
    306a:	1e58      	subs	r0, r3, #1
    306c:	4770      	bx	lr
	...

00003070 <__sflush_r>:
    3070:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3072:	898a      	ldrh	r2, [r1, #12]
    3074:	0005      	movs	r5, r0
    3076:	000c      	movs	r4, r1
    3078:	0713      	lsls	r3, r2, #28
    307a:	d460      	bmi.n	313e <__sflush_r+0xce>
    307c:	684b      	ldr	r3, [r1, #4]
    307e:	2b00      	cmp	r3, #0
    3080:	dc04      	bgt.n	308c <__sflush_r+0x1c>
    3082:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    3084:	2b00      	cmp	r3, #0
    3086:	dc01      	bgt.n	308c <__sflush_r+0x1c>
    3088:	2000      	movs	r0, #0
    308a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    308c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    308e:	2f00      	cmp	r7, #0
    3090:	d0fa      	beq.n	3088 <__sflush_r+0x18>
    3092:	2300      	movs	r3, #0
    3094:	682e      	ldr	r6, [r5, #0]
    3096:	602b      	str	r3, [r5, #0]
    3098:	2380      	movs	r3, #128	; 0x80
    309a:	015b      	lsls	r3, r3, #5
    309c:	401a      	ands	r2, r3
    309e:	d034      	beq.n	310a <__sflush_r+0x9a>
    30a0:	6d60      	ldr	r0, [r4, #84]	; 0x54
    30a2:	89a3      	ldrh	r3, [r4, #12]
    30a4:	075b      	lsls	r3, r3, #29
    30a6:	d506      	bpl.n	30b6 <__sflush_r+0x46>
    30a8:	6863      	ldr	r3, [r4, #4]
    30aa:	1ac0      	subs	r0, r0, r3
    30ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
    30ae:	2b00      	cmp	r3, #0
    30b0:	d001      	beq.n	30b6 <__sflush_r+0x46>
    30b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
    30b4:	1ac0      	subs	r0, r0, r3
    30b6:	0002      	movs	r2, r0
    30b8:	6a21      	ldr	r1, [r4, #32]
    30ba:	2300      	movs	r3, #0
    30bc:	0028      	movs	r0, r5
    30be:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    30c0:	47b8      	blx	r7
    30c2:	89a1      	ldrh	r1, [r4, #12]
    30c4:	1c43      	adds	r3, r0, #1
    30c6:	d106      	bne.n	30d6 <__sflush_r+0x66>
    30c8:	682b      	ldr	r3, [r5, #0]
    30ca:	2b1d      	cmp	r3, #29
    30cc:	d831      	bhi.n	3132 <__sflush_r+0xc2>
    30ce:	4a2c      	ldr	r2, [pc, #176]	; (3180 <__sflush_r+0x110>)
    30d0:	40da      	lsrs	r2, r3
    30d2:	07d3      	lsls	r3, r2, #31
    30d4:	d52d      	bpl.n	3132 <__sflush_r+0xc2>
    30d6:	2300      	movs	r3, #0
    30d8:	6063      	str	r3, [r4, #4]
    30da:	6923      	ldr	r3, [r4, #16]
    30dc:	6023      	str	r3, [r4, #0]
    30de:	04cb      	lsls	r3, r1, #19
    30e0:	d505      	bpl.n	30ee <__sflush_r+0x7e>
    30e2:	1c43      	adds	r3, r0, #1
    30e4:	d102      	bne.n	30ec <__sflush_r+0x7c>
    30e6:	682b      	ldr	r3, [r5, #0]
    30e8:	2b00      	cmp	r3, #0
    30ea:	d100      	bne.n	30ee <__sflush_r+0x7e>
    30ec:	6560      	str	r0, [r4, #84]	; 0x54
    30ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
    30f0:	602e      	str	r6, [r5, #0]
    30f2:	2900      	cmp	r1, #0
    30f4:	d0c8      	beq.n	3088 <__sflush_r+0x18>
    30f6:	0023      	movs	r3, r4
    30f8:	3344      	adds	r3, #68	; 0x44
    30fa:	4299      	cmp	r1, r3
    30fc:	d002      	beq.n	3104 <__sflush_r+0x94>
    30fe:	0028      	movs	r0, r5
    3100:	f000 f9ba 	bl	3478 <_free_r>
    3104:	2000      	movs	r0, #0
    3106:	6360      	str	r0, [r4, #52]	; 0x34
    3108:	e7bf      	b.n	308a <__sflush_r+0x1a>
    310a:	2301      	movs	r3, #1
    310c:	6a21      	ldr	r1, [r4, #32]
    310e:	0028      	movs	r0, r5
    3110:	47b8      	blx	r7
    3112:	1c43      	adds	r3, r0, #1
    3114:	d1c5      	bne.n	30a2 <__sflush_r+0x32>
    3116:	682b      	ldr	r3, [r5, #0]
    3118:	2b00      	cmp	r3, #0
    311a:	d0c2      	beq.n	30a2 <__sflush_r+0x32>
    311c:	2b1d      	cmp	r3, #29
    311e:	d001      	beq.n	3124 <__sflush_r+0xb4>
    3120:	2b16      	cmp	r3, #22
    3122:	d101      	bne.n	3128 <__sflush_r+0xb8>
    3124:	602e      	str	r6, [r5, #0]
    3126:	e7af      	b.n	3088 <__sflush_r+0x18>
    3128:	2340      	movs	r3, #64	; 0x40
    312a:	89a2      	ldrh	r2, [r4, #12]
    312c:	4313      	orrs	r3, r2
    312e:	81a3      	strh	r3, [r4, #12]
    3130:	e7ab      	b.n	308a <__sflush_r+0x1a>
    3132:	2340      	movs	r3, #64	; 0x40
    3134:	430b      	orrs	r3, r1
    3136:	2001      	movs	r0, #1
    3138:	81a3      	strh	r3, [r4, #12]
    313a:	4240      	negs	r0, r0
    313c:	e7a5      	b.n	308a <__sflush_r+0x1a>
    313e:	690f      	ldr	r7, [r1, #16]
    3140:	2f00      	cmp	r7, #0
    3142:	d0a1      	beq.n	3088 <__sflush_r+0x18>
    3144:	680b      	ldr	r3, [r1, #0]
    3146:	600f      	str	r7, [r1, #0]
    3148:	1bdb      	subs	r3, r3, r7
    314a:	9301      	str	r3, [sp, #4]
    314c:	2300      	movs	r3, #0
    314e:	0792      	lsls	r2, r2, #30
    3150:	d100      	bne.n	3154 <__sflush_r+0xe4>
    3152:	694b      	ldr	r3, [r1, #20]
    3154:	60a3      	str	r3, [r4, #8]
    3156:	9b01      	ldr	r3, [sp, #4]
    3158:	2b00      	cmp	r3, #0
    315a:	dc00      	bgt.n	315e <__sflush_r+0xee>
    315c:	e794      	b.n	3088 <__sflush_r+0x18>
    315e:	9b01      	ldr	r3, [sp, #4]
    3160:	003a      	movs	r2, r7
    3162:	6a21      	ldr	r1, [r4, #32]
    3164:	0028      	movs	r0, r5
    3166:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    3168:	47b0      	blx	r6
    316a:	2800      	cmp	r0, #0
    316c:	dc03      	bgt.n	3176 <__sflush_r+0x106>
    316e:	2340      	movs	r3, #64	; 0x40
    3170:	89a2      	ldrh	r2, [r4, #12]
    3172:	4313      	orrs	r3, r2
    3174:	e7df      	b.n	3136 <__sflush_r+0xc6>
    3176:	9b01      	ldr	r3, [sp, #4]
    3178:	183f      	adds	r7, r7, r0
    317a:	1a1b      	subs	r3, r3, r0
    317c:	9301      	str	r3, [sp, #4]
    317e:	e7ea      	b.n	3156 <__sflush_r+0xe6>
    3180:	20400001 	.word	0x20400001

00003184 <_fflush_r>:
    3184:	690b      	ldr	r3, [r1, #16]
    3186:	b570      	push	{r4, r5, r6, lr}
    3188:	0005      	movs	r5, r0
    318a:	000c      	movs	r4, r1
    318c:	2b00      	cmp	r3, #0
    318e:	d101      	bne.n	3194 <_fflush_r+0x10>
    3190:	2000      	movs	r0, #0
    3192:	bd70      	pop	{r4, r5, r6, pc}
    3194:	2800      	cmp	r0, #0
    3196:	d004      	beq.n	31a2 <_fflush_r+0x1e>
    3198:	6983      	ldr	r3, [r0, #24]
    319a:	2b00      	cmp	r3, #0
    319c:	d101      	bne.n	31a2 <_fflush_r+0x1e>
    319e:	f000 f85f 	bl	3260 <__sinit>
    31a2:	4b0b      	ldr	r3, [pc, #44]	; (31d0 <_fflush_r+0x4c>)
    31a4:	429c      	cmp	r4, r3
    31a6:	d109      	bne.n	31bc <_fflush_r+0x38>
    31a8:	686c      	ldr	r4, [r5, #4]
    31aa:	220c      	movs	r2, #12
    31ac:	5ea3      	ldrsh	r3, [r4, r2]
    31ae:	2b00      	cmp	r3, #0
    31b0:	d0ee      	beq.n	3190 <_fflush_r+0xc>
    31b2:	0021      	movs	r1, r4
    31b4:	0028      	movs	r0, r5
    31b6:	f7ff ff5b 	bl	3070 <__sflush_r>
    31ba:	e7ea      	b.n	3192 <_fflush_r+0xe>
    31bc:	4b05      	ldr	r3, [pc, #20]	; (31d4 <_fflush_r+0x50>)
    31be:	429c      	cmp	r4, r3
    31c0:	d101      	bne.n	31c6 <_fflush_r+0x42>
    31c2:	68ac      	ldr	r4, [r5, #8]
    31c4:	e7f1      	b.n	31aa <_fflush_r+0x26>
    31c6:	4b04      	ldr	r3, [pc, #16]	; (31d8 <_fflush_r+0x54>)
    31c8:	429c      	cmp	r4, r3
    31ca:	d1ee      	bne.n	31aa <_fflush_r+0x26>
    31cc:	68ec      	ldr	r4, [r5, #12]
    31ce:	e7ec      	b.n	31aa <_fflush_r+0x26>
    31d0:	00005f5c 	.word	0x00005f5c
    31d4:	00005f7c 	.word	0x00005f7c
    31d8:	00005f3c 	.word	0x00005f3c

000031dc <_cleanup_r>:
    31dc:	b510      	push	{r4, lr}
    31de:	4902      	ldr	r1, [pc, #8]	; (31e8 <_cleanup_r+0xc>)
    31e0:	f000 f8b2 	bl	3348 <_fwalk_reent>
    31e4:	bd10      	pop	{r4, pc}
    31e6:	46c0      	nop			; (mov r8, r8)
    31e8:	00003185 	.word	0x00003185

000031ec <std.isra.0>:
    31ec:	2300      	movs	r3, #0
    31ee:	b510      	push	{r4, lr}
    31f0:	0004      	movs	r4, r0
    31f2:	6003      	str	r3, [r0, #0]
    31f4:	6043      	str	r3, [r0, #4]
    31f6:	6083      	str	r3, [r0, #8]
    31f8:	8181      	strh	r1, [r0, #12]
    31fa:	6643      	str	r3, [r0, #100]	; 0x64
    31fc:	81c2      	strh	r2, [r0, #14]
    31fe:	6103      	str	r3, [r0, #16]
    3200:	6143      	str	r3, [r0, #20]
    3202:	6183      	str	r3, [r0, #24]
    3204:	0019      	movs	r1, r3
    3206:	2208      	movs	r2, #8
    3208:	305c      	adds	r0, #92	; 0x5c
    320a:	f7ff fde6 	bl	2dda <memset>
    320e:	4b05      	ldr	r3, [pc, #20]	; (3224 <std.isra.0+0x38>)
    3210:	6224      	str	r4, [r4, #32]
    3212:	6263      	str	r3, [r4, #36]	; 0x24
    3214:	4b04      	ldr	r3, [pc, #16]	; (3228 <std.isra.0+0x3c>)
    3216:	62a3      	str	r3, [r4, #40]	; 0x28
    3218:	4b04      	ldr	r3, [pc, #16]	; (322c <std.isra.0+0x40>)
    321a:	62e3      	str	r3, [r4, #44]	; 0x2c
    321c:	4b04      	ldr	r3, [pc, #16]	; (3230 <std.isra.0+0x44>)
    321e:	6323      	str	r3, [r4, #48]	; 0x30
    3220:	bd10      	pop	{r4, pc}
    3222:	46c0      	nop			; (mov r8, r8)
    3224:	00003b85 	.word	0x00003b85
    3228:	00003bad 	.word	0x00003bad
    322c:	00003be5 	.word	0x00003be5
    3230:	00003c11 	.word	0x00003c11

00003234 <__sfmoreglue>:
    3234:	b570      	push	{r4, r5, r6, lr}
    3236:	2568      	movs	r5, #104	; 0x68
    3238:	1e4a      	subs	r2, r1, #1
    323a:	4355      	muls	r5, r2
    323c:	000e      	movs	r6, r1
    323e:	0029      	movs	r1, r5
    3240:	3174      	adds	r1, #116	; 0x74
    3242:	f000 f963 	bl	350c <_malloc_r>
    3246:	1e04      	subs	r4, r0, #0
    3248:	d008      	beq.n	325c <__sfmoreglue+0x28>
    324a:	2100      	movs	r1, #0
    324c:	002a      	movs	r2, r5
    324e:	6001      	str	r1, [r0, #0]
    3250:	6046      	str	r6, [r0, #4]
    3252:	300c      	adds	r0, #12
    3254:	60a0      	str	r0, [r4, #8]
    3256:	3268      	adds	r2, #104	; 0x68
    3258:	f7ff fdbf 	bl	2dda <memset>
    325c:	0020      	movs	r0, r4
    325e:	bd70      	pop	{r4, r5, r6, pc}

00003260 <__sinit>:
    3260:	6983      	ldr	r3, [r0, #24]
    3262:	b513      	push	{r0, r1, r4, lr}
    3264:	0004      	movs	r4, r0
    3266:	2b00      	cmp	r3, #0
    3268:	d128      	bne.n	32bc <__sinit+0x5c>
    326a:	6483      	str	r3, [r0, #72]	; 0x48
    326c:	64c3      	str	r3, [r0, #76]	; 0x4c
    326e:	6503      	str	r3, [r0, #80]	; 0x50
    3270:	4b13      	ldr	r3, [pc, #76]	; (32c0 <__sinit+0x60>)
    3272:	4a14      	ldr	r2, [pc, #80]	; (32c4 <__sinit+0x64>)
    3274:	681b      	ldr	r3, [r3, #0]
    3276:	6282      	str	r2, [r0, #40]	; 0x28
    3278:	9301      	str	r3, [sp, #4]
    327a:	4298      	cmp	r0, r3
    327c:	d101      	bne.n	3282 <__sinit+0x22>
    327e:	2301      	movs	r3, #1
    3280:	6183      	str	r3, [r0, #24]
    3282:	0020      	movs	r0, r4
    3284:	f000 f820 	bl	32c8 <__sfp>
    3288:	6060      	str	r0, [r4, #4]
    328a:	0020      	movs	r0, r4
    328c:	f000 f81c 	bl	32c8 <__sfp>
    3290:	60a0      	str	r0, [r4, #8]
    3292:	0020      	movs	r0, r4
    3294:	f000 f818 	bl	32c8 <__sfp>
    3298:	2200      	movs	r2, #0
    329a:	60e0      	str	r0, [r4, #12]
    329c:	2104      	movs	r1, #4
    329e:	6860      	ldr	r0, [r4, #4]
    32a0:	f7ff ffa4 	bl	31ec <std.isra.0>
    32a4:	2201      	movs	r2, #1
    32a6:	2109      	movs	r1, #9
    32a8:	68a0      	ldr	r0, [r4, #8]
    32aa:	f7ff ff9f 	bl	31ec <std.isra.0>
    32ae:	2202      	movs	r2, #2
    32b0:	2112      	movs	r1, #18
    32b2:	68e0      	ldr	r0, [r4, #12]
    32b4:	f7ff ff9a 	bl	31ec <std.isra.0>
    32b8:	2301      	movs	r3, #1
    32ba:	61a3      	str	r3, [r4, #24]
    32bc:	bd13      	pop	{r0, r1, r4, pc}
    32be:	46c0      	nop			; (mov r8, r8)
    32c0:	00005f38 	.word	0x00005f38
    32c4:	000031dd 	.word	0x000031dd

000032c8 <__sfp>:
    32c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    32ca:	4b1e      	ldr	r3, [pc, #120]	; (3344 <__sfp+0x7c>)
    32cc:	0007      	movs	r7, r0
    32ce:	681e      	ldr	r6, [r3, #0]
    32d0:	69b3      	ldr	r3, [r6, #24]
    32d2:	2b00      	cmp	r3, #0
    32d4:	d102      	bne.n	32dc <__sfp+0x14>
    32d6:	0030      	movs	r0, r6
    32d8:	f7ff ffc2 	bl	3260 <__sinit>
    32dc:	3648      	adds	r6, #72	; 0x48
    32de:	68b4      	ldr	r4, [r6, #8]
    32e0:	6873      	ldr	r3, [r6, #4]
    32e2:	3b01      	subs	r3, #1
    32e4:	d504      	bpl.n	32f0 <__sfp+0x28>
    32e6:	6833      	ldr	r3, [r6, #0]
    32e8:	2b00      	cmp	r3, #0
    32ea:	d007      	beq.n	32fc <__sfp+0x34>
    32ec:	6836      	ldr	r6, [r6, #0]
    32ee:	e7f6      	b.n	32de <__sfp+0x16>
    32f0:	220c      	movs	r2, #12
    32f2:	5ea5      	ldrsh	r5, [r4, r2]
    32f4:	2d00      	cmp	r5, #0
    32f6:	d00d      	beq.n	3314 <__sfp+0x4c>
    32f8:	3468      	adds	r4, #104	; 0x68
    32fa:	e7f2      	b.n	32e2 <__sfp+0x1a>
    32fc:	2104      	movs	r1, #4
    32fe:	0038      	movs	r0, r7
    3300:	f7ff ff98 	bl	3234 <__sfmoreglue>
    3304:	6030      	str	r0, [r6, #0]
    3306:	2800      	cmp	r0, #0
    3308:	d1f0      	bne.n	32ec <__sfp+0x24>
    330a:	230c      	movs	r3, #12
    330c:	0004      	movs	r4, r0
    330e:	603b      	str	r3, [r7, #0]
    3310:	0020      	movs	r0, r4
    3312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3314:	2301      	movs	r3, #1
    3316:	0020      	movs	r0, r4
    3318:	425b      	negs	r3, r3
    331a:	81e3      	strh	r3, [r4, #14]
    331c:	3302      	adds	r3, #2
    331e:	81a3      	strh	r3, [r4, #12]
    3320:	6665      	str	r5, [r4, #100]	; 0x64
    3322:	6025      	str	r5, [r4, #0]
    3324:	60a5      	str	r5, [r4, #8]
    3326:	6065      	str	r5, [r4, #4]
    3328:	6125      	str	r5, [r4, #16]
    332a:	6165      	str	r5, [r4, #20]
    332c:	61a5      	str	r5, [r4, #24]
    332e:	2208      	movs	r2, #8
    3330:	0029      	movs	r1, r5
    3332:	305c      	adds	r0, #92	; 0x5c
    3334:	f7ff fd51 	bl	2dda <memset>
    3338:	6365      	str	r5, [r4, #52]	; 0x34
    333a:	63a5      	str	r5, [r4, #56]	; 0x38
    333c:	64a5      	str	r5, [r4, #72]	; 0x48
    333e:	64e5      	str	r5, [r4, #76]	; 0x4c
    3340:	e7e6      	b.n	3310 <__sfp+0x48>
    3342:	46c0      	nop			; (mov r8, r8)
    3344:	00005f38 	.word	0x00005f38

00003348 <_fwalk_reent>:
    3348:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    334a:	0004      	movs	r4, r0
    334c:	0007      	movs	r7, r0
    334e:	2600      	movs	r6, #0
    3350:	9101      	str	r1, [sp, #4]
    3352:	3448      	adds	r4, #72	; 0x48
    3354:	2c00      	cmp	r4, #0
    3356:	d101      	bne.n	335c <_fwalk_reent+0x14>
    3358:	0030      	movs	r0, r6
    335a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    335c:	6863      	ldr	r3, [r4, #4]
    335e:	68a5      	ldr	r5, [r4, #8]
    3360:	9300      	str	r3, [sp, #0]
    3362:	9b00      	ldr	r3, [sp, #0]
    3364:	3b01      	subs	r3, #1
    3366:	9300      	str	r3, [sp, #0]
    3368:	d501      	bpl.n	336e <_fwalk_reent+0x26>
    336a:	6824      	ldr	r4, [r4, #0]
    336c:	e7f2      	b.n	3354 <_fwalk_reent+0xc>
    336e:	89ab      	ldrh	r3, [r5, #12]
    3370:	2b01      	cmp	r3, #1
    3372:	d908      	bls.n	3386 <_fwalk_reent+0x3e>
    3374:	220e      	movs	r2, #14
    3376:	5eab      	ldrsh	r3, [r5, r2]
    3378:	3301      	adds	r3, #1
    337a:	d004      	beq.n	3386 <_fwalk_reent+0x3e>
    337c:	0029      	movs	r1, r5
    337e:	0038      	movs	r0, r7
    3380:	9b01      	ldr	r3, [sp, #4]
    3382:	4798      	blx	r3
    3384:	4306      	orrs	r6, r0
    3386:	3568      	adds	r5, #104	; 0x68
    3388:	e7eb      	b.n	3362 <_fwalk_reent+0x1a>
	...

0000338c <__swhatbuf_r>:
    338c:	b570      	push	{r4, r5, r6, lr}
    338e:	000e      	movs	r6, r1
    3390:	001d      	movs	r5, r3
    3392:	230e      	movs	r3, #14
    3394:	5ec9      	ldrsh	r1, [r1, r3]
    3396:	b090      	sub	sp, #64	; 0x40
    3398:	0014      	movs	r4, r2
    339a:	2900      	cmp	r1, #0
    339c:	da07      	bge.n	33ae <__swhatbuf_r+0x22>
    339e:	2300      	movs	r3, #0
    33a0:	602b      	str	r3, [r5, #0]
    33a2:	89b3      	ldrh	r3, [r6, #12]
    33a4:	061b      	lsls	r3, r3, #24
    33a6:	d411      	bmi.n	33cc <__swhatbuf_r+0x40>
    33a8:	2380      	movs	r3, #128	; 0x80
    33aa:	00db      	lsls	r3, r3, #3
    33ac:	e00f      	b.n	33ce <__swhatbuf_r+0x42>
    33ae:	aa01      	add	r2, sp, #4
    33b0:	f000 fd26 	bl	3e00 <_fstat_r>
    33b4:	2800      	cmp	r0, #0
    33b6:	dbf2      	blt.n	339e <__swhatbuf_r+0x12>
    33b8:	22f0      	movs	r2, #240	; 0xf0
    33ba:	9b02      	ldr	r3, [sp, #8]
    33bc:	0212      	lsls	r2, r2, #8
    33be:	4013      	ands	r3, r2
    33c0:	4a05      	ldr	r2, [pc, #20]	; (33d8 <__swhatbuf_r+0x4c>)
    33c2:	189b      	adds	r3, r3, r2
    33c4:	425a      	negs	r2, r3
    33c6:	4153      	adcs	r3, r2
    33c8:	602b      	str	r3, [r5, #0]
    33ca:	e7ed      	b.n	33a8 <__swhatbuf_r+0x1c>
    33cc:	2340      	movs	r3, #64	; 0x40
    33ce:	2000      	movs	r0, #0
    33d0:	6023      	str	r3, [r4, #0]
    33d2:	b010      	add	sp, #64	; 0x40
    33d4:	bd70      	pop	{r4, r5, r6, pc}
    33d6:	46c0      	nop			; (mov r8, r8)
    33d8:	ffffe000 	.word	0xffffe000

000033dc <__smakebuf_r>:
    33dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    33de:	2602      	movs	r6, #2
    33e0:	898b      	ldrh	r3, [r1, #12]
    33e2:	0005      	movs	r5, r0
    33e4:	000c      	movs	r4, r1
    33e6:	4233      	tst	r3, r6
    33e8:	d006      	beq.n	33f8 <__smakebuf_r+0x1c>
    33ea:	0023      	movs	r3, r4
    33ec:	3347      	adds	r3, #71	; 0x47
    33ee:	6023      	str	r3, [r4, #0]
    33f0:	6123      	str	r3, [r4, #16]
    33f2:	2301      	movs	r3, #1
    33f4:	6163      	str	r3, [r4, #20]
    33f6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    33f8:	ab01      	add	r3, sp, #4
    33fa:	466a      	mov	r2, sp
    33fc:	f7ff ffc6 	bl	338c <__swhatbuf_r>
    3400:	9900      	ldr	r1, [sp, #0]
    3402:	0007      	movs	r7, r0
    3404:	0028      	movs	r0, r5
    3406:	f000 f881 	bl	350c <_malloc_r>
    340a:	2800      	cmp	r0, #0
    340c:	d108      	bne.n	3420 <__smakebuf_r+0x44>
    340e:	220c      	movs	r2, #12
    3410:	5ea3      	ldrsh	r3, [r4, r2]
    3412:	059a      	lsls	r2, r3, #22
    3414:	d4ef      	bmi.n	33f6 <__smakebuf_r+0x1a>
    3416:	2203      	movs	r2, #3
    3418:	4393      	bics	r3, r2
    341a:	431e      	orrs	r6, r3
    341c:	81a6      	strh	r6, [r4, #12]
    341e:	e7e4      	b.n	33ea <__smakebuf_r+0xe>
    3420:	4b0f      	ldr	r3, [pc, #60]	; (3460 <__smakebuf_r+0x84>)
    3422:	62ab      	str	r3, [r5, #40]	; 0x28
    3424:	2380      	movs	r3, #128	; 0x80
    3426:	89a2      	ldrh	r2, [r4, #12]
    3428:	6020      	str	r0, [r4, #0]
    342a:	4313      	orrs	r3, r2
    342c:	81a3      	strh	r3, [r4, #12]
    342e:	9b00      	ldr	r3, [sp, #0]
    3430:	6120      	str	r0, [r4, #16]
    3432:	6163      	str	r3, [r4, #20]
    3434:	9b01      	ldr	r3, [sp, #4]
    3436:	2b00      	cmp	r3, #0
    3438:	d00d      	beq.n	3456 <__smakebuf_r+0x7a>
    343a:	230e      	movs	r3, #14
    343c:	5ee1      	ldrsh	r1, [r4, r3]
    343e:	0028      	movs	r0, r5
    3440:	f000 fcf0 	bl	3e24 <_isatty_r>
    3444:	2800      	cmp	r0, #0
    3446:	d006      	beq.n	3456 <__smakebuf_r+0x7a>
    3448:	2203      	movs	r2, #3
    344a:	89a3      	ldrh	r3, [r4, #12]
    344c:	4393      	bics	r3, r2
    344e:	001a      	movs	r2, r3
    3450:	2301      	movs	r3, #1
    3452:	4313      	orrs	r3, r2
    3454:	81a3      	strh	r3, [r4, #12]
    3456:	89a0      	ldrh	r0, [r4, #12]
    3458:	4338      	orrs	r0, r7
    345a:	81a0      	strh	r0, [r4, #12]
    345c:	e7cb      	b.n	33f6 <__smakebuf_r+0x1a>
    345e:	46c0      	nop			; (mov r8, r8)
    3460:	000031dd 	.word	0x000031dd

00003464 <malloc>:
    3464:	b510      	push	{r4, lr}
    3466:	4b03      	ldr	r3, [pc, #12]	; (3474 <malloc+0x10>)
    3468:	0001      	movs	r1, r0
    346a:	6818      	ldr	r0, [r3, #0]
    346c:	f000 f84e 	bl	350c <_malloc_r>
    3470:	bd10      	pop	{r4, pc}
    3472:	46c0      	nop			; (mov r8, r8)
    3474:	20000158 	.word	0x20000158

00003478 <_free_r>:
    3478:	b570      	push	{r4, r5, r6, lr}
    347a:	0005      	movs	r5, r0
    347c:	2900      	cmp	r1, #0
    347e:	d010      	beq.n	34a2 <_free_r+0x2a>
    3480:	1f0c      	subs	r4, r1, #4
    3482:	6823      	ldr	r3, [r4, #0]
    3484:	2b00      	cmp	r3, #0
    3486:	da00      	bge.n	348a <_free_r+0x12>
    3488:	18e4      	adds	r4, r4, r3
    348a:	0028      	movs	r0, r5
    348c:	f000 fcfb 	bl	3e86 <__malloc_lock>
    3490:	4a1d      	ldr	r2, [pc, #116]	; (3508 <_free_r+0x90>)
    3492:	6813      	ldr	r3, [r2, #0]
    3494:	2b00      	cmp	r3, #0
    3496:	d105      	bne.n	34a4 <_free_r+0x2c>
    3498:	6063      	str	r3, [r4, #4]
    349a:	6014      	str	r4, [r2, #0]
    349c:	0028      	movs	r0, r5
    349e:	f000 fcf3 	bl	3e88 <__malloc_unlock>
    34a2:	bd70      	pop	{r4, r5, r6, pc}
    34a4:	42a3      	cmp	r3, r4
    34a6:	d909      	bls.n	34bc <_free_r+0x44>
    34a8:	6821      	ldr	r1, [r4, #0]
    34aa:	1860      	adds	r0, r4, r1
    34ac:	4283      	cmp	r3, r0
    34ae:	d1f3      	bne.n	3498 <_free_r+0x20>
    34b0:	6818      	ldr	r0, [r3, #0]
    34b2:	685b      	ldr	r3, [r3, #4]
    34b4:	1841      	adds	r1, r0, r1
    34b6:	6021      	str	r1, [r4, #0]
    34b8:	e7ee      	b.n	3498 <_free_r+0x20>
    34ba:	0013      	movs	r3, r2
    34bc:	685a      	ldr	r2, [r3, #4]
    34be:	2a00      	cmp	r2, #0
    34c0:	d001      	beq.n	34c6 <_free_r+0x4e>
    34c2:	42a2      	cmp	r2, r4
    34c4:	d9f9      	bls.n	34ba <_free_r+0x42>
    34c6:	6819      	ldr	r1, [r3, #0]
    34c8:	1858      	adds	r0, r3, r1
    34ca:	42a0      	cmp	r0, r4
    34cc:	d10b      	bne.n	34e6 <_free_r+0x6e>
    34ce:	6820      	ldr	r0, [r4, #0]
    34d0:	1809      	adds	r1, r1, r0
    34d2:	1858      	adds	r0, r3, r1
    34d4:	6019      	str	r1, [r3, #0]
    34d6:	4282      	cmp	r2, r0
    34d8:	d1e0      	bne.n	349c <_free_r+0x24>
    34da:	6810      	ldr	r0, [r2, #0]
    34dc:	6852      	ldr	r2, [r2, #4]
    34de:	1841      	adds	r1, r0, r1
    34e0:	6019      	str	r1, [r3, #0]
    34e2:	605a      	str	r2, [r3, #4]
    34e4:	e7da      	b.n	349c <_free_r+0x24>
    34e6:	42a0      	cmp	r0, r4
    34e8:	d902      	bls.n	34f0 <_free_r+0x78>
    34ea:	230c      	movs	r3, #12
    34ec:	602b      	str	r3, [r5, #0]
    34ee:	e7d5      	b.n	349c <_free_r+0x24>
    34f0:	6821      	ldr	r1, [r4, #0]
    34f2:	1860      	adds	r0, r4, r1
    34f4:	4282      	cmp	r2, r0
    34f6:	d103      	bne.n	3500 <_free_r+0x88>
    34f8:	6810      	ldr	r0, [r2, #0]
    34fa:	6852      	ldr	r2, [r2, #4]
    34fc:	1841      	adds	r1, r0, r1
    34fe:	6021      	str	r1, [r4, #0]
    3500:	6062      	str	r2, [r4, #4]
    3502:	605c      	str	r4, [r3, #4]
    3504:	e7ca      	b.n	349c <_free_r+0x24>
    3506:	46c0      	nop			; (mov r8, r8)
    3508:	2000029c 	.word	0x2000029c

0000350c <_malloc_r>:
    350c:	2303      	movs	r3, #3
    350e:	b570      	push	{r4, r5, r6, lr}
    3510:	1ccd      	adds	r5, r1, #3
    3512:	439d      	bics	r5, r3
    3514:	3508      	adds	r5, #8
    3516:	0006      	movs	r6, r0
    3518:	2d0c      	cmp	r5, #12
    351a:	d21e      	bcs.n	355a <_malloc_r+0x4e>
    351c:	250c      	movs	r5, #12
    351e:	42a9      	cmp	r1, r5
    3520:	d81d      	bhi.n	355e <_malloc_r+0x52>
    3522:	0030      	movs	r0, r6
    3524:	f000 fcaf 	bl	3e86 <__malloc_lock>
    3528:	4a25      	ldr	r2, [pc, #148]	; (35c0 <_malloc_r+0xb4>)
    352a:	6814      	ldr	r4, [r2, #0]
    352c:	0021      	movs	r1, r4
    352e:	2900      	cmp	r1, #0
    3530:	d119      	bne.n	3566 <_malloc_r+0x5a>
    3532:	4c24      	ldr	r4, [pc, #144]	; (35c4 <_malloc_r+0xb8>)
    3534:	6823      	ldr	r3, [r4, #0]
    3536:	2b00      	cmp	r3, #0
    3538:	d103      	bne.n	3542 <_malloc_r+0x36>
    353a:	0030      	movs	r0, r6
    353c:	f000 fb10 	bl	3b60 <_sbrk_r>
    3540:	6020      	str	r0, [r4, #0]
    3542:	0029      	movs	r1, r5
    3544:	0030      	movs	r0, r6
    3546:	f000 fb0b 	bl	3b60 <_sbrk_r>
    354a:	1c43      	adds	r3, r0, #1
    354c:	d12c      	bne.n	35a8 <_malloc_r+0x9c>
    354e:	230c      	movs	r3, #12
    3550:	0030      	movs	r0, r6
    3552:	6033      	str	r3, [r6, #0]
    3554:	f000 fc98 	bl	3e88 <__malloc_unlock>
    3558:	e003      	b.n	3562 <_malloc_r+0x56>
    355a:	2d00      	cmp	r5, #0
    355c:	dadf      	bge.n	351e <_malloc_r+0x12>
    355e:	230c      	movs	r3, #12
    3560:	6033      	str	r3, [r6, #0]
    3562:	2000      	movs	r0, #0
    3564:	bd70      	pop	{r4, r5, r6, pc}
    3566:	680b      	ldr	r3, [r1, #0]
    3568:	1b5b      	subs	r3, r3, r5
    356a:	d41a      	bmi.n	35a2 <_malloc_r+0x96>
    356c:	2b0b      	cmp	r3, #11
    356e:	d903      	bls.n	3578 <_malloc_r+0x6c>
    3570:	600b      	str	r3, [r1, #0]
    3572:	18cc      	adds	r4, r1, r3
    3574:	6025      	str	r5, [r4, #0]
    3576:	e003      	b.n	3580 <_malloc_r+0x74>
    3578:	428c      	cmp	r4, r1
    357a:	d10e      	bne.n	359a <_malloc_r+0x8e>
    357c:	6863      	ldr	r3, [r4, #4]
    357e:	6013      	str	r3, [r2, #0]
    3580:	0030      	movs	r0, r6
    3582:	f000 fc81 	bl	3e88 <__malloc_unlock>
    3586:	0020      	movs	r0, r4
    3588:	2207      	movs	r2, #7
    358a:	300b      	adds	r0, #11
    358c:	1d23      	adds	r3, r4, #4
    358e:	4390      	bics	r0, r2
    3590:	1ac3      	subs	r3, r0, r3
    3592:	d0e7      	beq.n	3564 <_malloc_r+0x58>
    3594:	425a      	negs	r2, r3
    3596:	50e2      	str	r2, [r4, r3]
    3598:	e7e4      	b.n	3564 <_malloc_r+0x58>
    359a:	684b      	ldr	r3, [r1, #4]
    359c:	6063      	str	r3, [r4, #4]
    359e:	000c      	movs	r4, r1
    35a0:	e7ee      	b.n	3580 <_malloc_r+0x74>
    35a2:	000c      	movs	r4, r1
    35a4:	6849      	ldr	r1, [r1, #4]
    35a6:	e7c2      	b.n	352e <_malloc_r+0x22>
    35a8:	2303      	movs	r3, #3
    35aa:	1cc4      	adds	r4, r0, #3
    35ac:	439c      	bics	r4, r3
    35ae:	42a0      	cmp	r0, r4
    35b0:	d0e0      	beq.n	3574 <_malloc_r+0x68>
    35b2:	1a21      	subs	r1, r4, r0
    35b4:	0030      	movs	r0, r6
    35b6:	f000 fad3 	bl	3b60 <_sbrk_r>
    35ba:	1c43      	adds	r3, r0, #1
    35bc:	d1da      	bne.n	3574 <_malloc_r+0x68>
    35be:	e7c6      	b.n	354e <_malloc_r+0x42>
    35c0:	2000029c 	.word	0x2000029c
    35c4:	200002a0 	.word	0x200002a0

000035c8 <__sfputc_r>:
    35c8:	6893      	ldr	r3, [r2, #8]
    35ca:	b510      	push	{r4, lr}
    35cc:	3b01      	subs	r3, #1
    35ce:	6093      	str	r3, [r2, #8]
    35d0:	2b00      	cmp	r3, #0
    35d2:	da05      	bge.n	35e0 <__sfputc_r+0x18>
    35d4:	6994      	ldr	r4, [r2, #24]
    35d6:	42a3      	cmp	r3, r4
    35d8:	db08      	blt.n	35ec <__sfputc_r+0x24>
    35da:	b2cb      	uxtb	r3, r1
    35dc:	2b0a      	cmp	r3, #10
    35de:	d005      	beq.n	35ec <__sfputc_r+0x24>
    35e0:	6813      	ldr	r3, [r2, #0]
    35e2:	1c58      	adds	r0, r3, #1
    35e4:	6010      	str	r0, [r2, #0]
    35e6:	7019      	strb	r1, [r3, #0]
    35e8:	b2c8      	uxtb	r0, r1
    35ea:	bd10      	pop	{r4, pc}
    35ec:	f000 fb16 	bl	3c1c <__swbuf_r>
    35f0:	e7fb      	b.n	35ea <__sfputc_r+0x22>

000035f2 <__sfputs_r>:
    35f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    35f4:	0006      	movs	r6, r0
    35f6:	000f      	movs	r7, r1
    35f8:	0014      	movs	r4, r2
    35fa:	18d5      	adds	r5, r2, r3
    35fc:	42ac      	cmp	r4, r5
    35fe:	d101      	bne.n	3604 <__sfputs_r+0x12>
    3600:	2000      	movs	r0, #0
    3602:	e007      	b.n	3614 <__sfputs_r+0x22>
    3604:	7821      	ldrb	r1, [r4, #0]
    3606:	003a      	movs	r2, r7
    3608:	0030      	movs	r0, r6
    360a:	f7ff ffdd 	bl	35c8 <__sfputc_r>
    360e:	3401      	adds	r4, #1
    3610:	1c43      	adds	r3, r0, #1
    3612:	d1f3      	bne.n	35fc <__sfputs_r+0xa>
    3614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00003618 <_vfiprintf_r>:
    3618:	b5f0      	push	{r4, r5, r6, r7, lr}
    361a:	b09f      	sub	sp, #124	; 0x7c
    361c:	0006      	movs	r6, r0
    361e:	000f      	movs	r7, r1
    3620:	0014      	movs	r4, r2
    3622:	9305      	str	r3, [sp, #20]
    3624:	2800      	cmp	r0, #0
    3626:	d004      	beq.n	3632 <_vfiprintf_r+0x1a>
    3628:	6983      	ldr	r3, [r0, #24]
    362a:	2b00      	cmp	r3, #0
    362c:	d101      	bne.n	3632 <_vfiprintf_r+0x1a>
    362e:	f7ff fe17 	bl	3260 <__sinit>
    3632:	4b7f      	ldr	r3, [pc, #508]	; (3830 <_vfiprintf_r+0x218>)
    3634:	429f      	cmp	r7, r3
    3636:	d15c      	bne.n	36f2 <_vfiprintf_r+0xda>
    3638:	6877      	ldr	r7, [r6, #4]
    363a:	89bb      	ldrh	r3, [r7, #12]
    363c:	071b      	lsls	r3, r3, #28
    363e:	d562      	bpl.n	3706 <_vfiprintf_r+0xee>
    3640:	693b      	ldr	r3, [r7, #16]
    3642:	2b00      	cmp	r3, #0
    3644:	d05f      	beq.n	3706 <_vfiprintf_r+0xee>
    3646:	2300      	movs	r3, #0
    3648:	ad06      	add	r5, sp, #24
    364a:	616b      	str	r3, [r5, #20]
    364c:	3320      	adds	r3, #32
    364e:	766b      	strb	r3, [r5, #25]
    3650:	3310      	adds	r3, #16
    3652:	76ab      	strb	r3, [r5, #26]
    3654:	9402      	str	r4, [sp, #8]
    3656:	9c02      	ldr	r4, [sp, #8]
    3658:	7823      	ldrb	r3, [r4, #0]
    365a:	2b00      	cmp	r3, #0
    365c:	d15d      	bne.n	371a <_vfiprintf_r+0x102>
    365e:	9b02      	ldr	r3, [sp, #8]
    3660:	1ae3      	subs	r3, r4, r3
    3662:	9304      	str	r3, [sp, #16]
    3664:	d00d      	beq.n	3682 <_vfiprintf_r+0x6a>
    3666:	9b04      	ldr	r3, [sp, #16]
    3668:	9a02      	ldr	r2, [sp, #8]
    366a:	0039      	movs	r1, r7
    366c:	0030      	movs	r0, r6
    366e:	f7ff ffc0 	bl	35f2 <__sfputs_r>
    3672:	1c43      	adds	r3, r0, #1
    3674:	d100      	bne.n	3678 <_vfiprintf_r+0x60>
    3676:	e0cc      	b.n	3812 <_vfiprintf_r+0x1fa>
    3678:	696a      	ldr	r2, [r5, #20]
    367a:	9b04      	ldr	r3, [sp, #16]
    367c:	4694      	mov	ip, r2
    367e:	4463      	add	r3, ip
    3680:	616b      	str	r3, [r5, #20]
    3682:	7823      	ldrb	r3, [r4, #0]
    3684:	2b00      	cmp	r3, #0
    3686:	d100      	bne.n	368a <_vfiprintf_r+0x72>
    3688:	e0c3      	b.n	3812 <_vfiprintf_r+0x1fa>
    368a:	2201      	movs	r2, #1
    368c:	2300      	movs	r3, #0
    368e:	4252      	negs	r2, r2
    3690:	606a      	str	r2, [r5, #4]
    3692:	a902      	add	r1, sp, #8
    3694:	3254      	adds	r2, #84	; 0x54
    3696:	1852      	adds	r2, r2, r1
    3698:	3401      	adds	r4, #1
    369a:	602b      	str	r3, [r5, #0]
    369c:	60eb      	str	r3, [r5, #12]
    369e:	60ab      	str	r3, [r5, #8]
    36a0:	7013      	strb	r3, [r2, #0]
    36a2:	65ab      	str	r3, [r5, #88]	; 0x58
    36a4:	7821      	ldrb	r1, [r4, #0]
    36a6:	2205      	movs	r2, #5
    36a8:	4862      	ldr	r0, [pc, #392]	; (3834 <_vfiprintf_r+0x21c>)
    36aa:	f000 fbe1 	bl	3e70 <memchr>
    36ae:	1c63      	adds	r3, r4, #1
    36b0:	469c      	mov	ip, r3
    36b2:	2800      	cmp	r0, #0
    36b4:	d135      	bne.n	3722 <_vfiprintf_r+0x10a>
    36b6:	6829      	ldr	r1, [r5, #0]
    36b8:	06cb      	lsls	r3, r1, #27
    36ba:	d504      	bpl.n	36c6 <_vfiprintf_r+0xae>
    36bc:	2353      	movs	r3, #83	; 0x53
    36be:	aa02      	add	r2, sp, #8
    36c0:	3020      	adds	r0, #32
    36c2:	189b      	adds	r3, r3, r2
    36c4:	7018      	strb	r0, [r3, #0]
    36c6:	070b      	lsls	r3, r1, #28
    36c8:	d504      	bpl.n	36d4 <_vfiprintf_r+0xbc>
    36ca:	2353      	movs	r3, #83	; 0x53
    36cc:	202b      	movs	r0, #43	; 0x2b
    36ce:	aa02      	add	r2, sp, #8
    36d0:	189b      	adds	r3, r3, r2
    36d2:	7018      	strb	r0, [r3, #0]
    36d4:	7823      	ldrb	r3, [r4, #0]
    36d6:	2b2a      	cmp	r3, #42	; 0x2a
    36d8:	d02c      	beq.n	3734 <_vfiprintf_r+0x11c>
    36da:	2000      	movs	r0, #0
    36dc:	210a      	movs	r1, #10
    36de:	9b09      	ldr	r3, [sp, #36]	; 0x24
    36e0:	7822      	ldrb	r2, [r4, #0]
    36e2:	3a30      	subs	r2, #48	; 0x30
    36e4:	2a09      	cmp	r2, #9
    36e6:	d800      	bhi.n	36ea <_vfiprintf_r+0xd2>
    36e8:	e06b      	b.n	37c2 <_vfiprintf_r+0x1aa>
    36ea:	2800      	cmp	r0, #0
    36ec:	d02a      	beq.n	3744 <_vfiprintf_r+0x12c>
    36ee:	9309      	str	r3, [sp, #36]	; 0x24
    36f0:	e028      	b.n	3744 <_vfiprintf_r+0x12c>
    36f2:	4b51      	ldr	r3, [pc, #324]	; (3838 <_vfiprintf_r+0x220>)
    36f4:	429f      	cmp	r7, r3
    36f6:	d101      	bne.n	36fc <_vfiprintf_r+0xe4>
    36f8:	68b7      	ldr	r7, [r6, #8]
    36fa:	e79e      	b.n	363a <_vfiprintf_r+0x22>
    36fc:	4b4f      	ldr	r3, [pc, #316]	; (383c <_vfiprintf_r+0x224>)
    36fe:	429f      	cmp	r7, r3
    3700:	d19b      	bne.n	363a <_vfiprintf_r+0x22>
    3702:	68f7      	ldr	r7, [r6, #12]
    3704:	e799      	b.n	363a <_vfiprintf_r+0x22>
    3706:	0039      	movs	r1, r7
    3708:	0030      	movs	r0, r6
    370a:	f000 faf1 	bl	3cf0 <__swsetup_r>
    370e:	2800      	cmp	r0, #0
    3710:	d099      	beq.n	3646 <_vfiprintf_r+0x2e>
    3712:	2001      	movs	r0, #1
    3714:	4240      	negs	r0, r0
    3716:	b01f      	add	sp, #124	; 0x7c
    3718:	bdf0      	pop	{r4, r5, r6, r7, pc}
    371a:	2b25      	cmp	r3, #37	; 0x25
    371c:	d09f      	beq.n	365e <_vfiprintf_r+0x46>
    371e:	3401      	adds	r4, #1
    3720:	e79a      	b.n	3658 <_vfiprintf_r+0x40>
    3722:	4b44      	ldr	r3, [pc, #272]	; (3834 <_vfiprintf_r+0x21c>)
    3724:	6829      	ldr	r1, [r5, #0]
    3726:	1ac0      	subs	r0, r0, r3
    3728:	2301      	movs	r3, #1
    372a:	4083      	lsls	r3, r0
    372c:	430b      	orrs	r3, r1
    372e:	602b      	str	r3, [r5, #0]
    3730:	4664      	mov	r4, ip
    3732:	e7b7      	b.n	36a4 <_vfiprintf_r+0x8c>
    3734:	9b05      	ldr	r3, [sp, #20]
    3736:	1d18      	adds	r0, r3, #4
    3738:	681b      	ldr	r3, [r3, #0]
    373a:	9005      	str	r0, [sp, #20]
    373c:	2b00      	cmp	r3, #0
    373e:	db3a      	blt.n	37b6 <_vfiprintf_r+0x19e>
    3740:	9309      	str	r3, [sp, #36]	; 0x24
    3742:	4664      	mov	r4, ip
    3744:	7823      	ldrb	r3, [r4, #0]
    3746:	2b2e      	cmp	r3, #46	; 0x2e
    3748:	d10b      	bne.n	3762 <_vfiprintf_r+0x14a>
    374a:	7863      	ldrb	r3, [r4, #1]
    374c:	1c62      	adds	r2, r4, #1
    374e:	2b2a      	cmp	r3, #42	; 0x2a
    3750:	d13f      	bne.n	37d2 <_vfiprintf_r+0x1ba>
    3752:	9b05      	ldr	r3, [sp, #20]
    3754:	3402      	adds	r4, #2
    3756:	1d1a      	adds	r2, r3, #4
    3758:	681b      	ldr	r3, [r3, #0]
    375a:	9205      	str	r2, [sp, #20]
    375c:	2b00      	cmp	r3, #0
    375e:	db35      	blt.n	37cc <_vfiprintf_r+0x1b4>
    3760:	9307      	str	r3, [sp, #28]
    3762:	7821      	ldrb	r1, [r4, #0]
    3764:	2203      	movs	r2, #3
    3766:	4836      	ldr	r0, [pc, #216]	; (3840 <_vfiprintf_r+0x228>)
    3768:	f000 fb82 	bl	3e70 <memchr>
    376c:	2800      	cmp	r0, #0
    376e:	d007      	beq.n	3780 <_vfiprintf_r+0x168>
    3770:	4b33      	ldr	r3, [pc, #204]	; (3840 <_vfiprintf_r+0x228>)
    3772:	682a      	ldr	r2, [r5, #0]
    3774:	1ac0      	subs	r0, r0, r3
    3776:	2340      	movs	r3, #64	; 0x40
    3778:	4083      	lsls	r3, r0
    377a:	4313      	orrs	r3, r2
    377c:	602b      	str	r3, [r5, #0]
    377e:	3401      	adds	r4, #1
    3780:	7821      	ldrb	r1, [r4, #0]
    3782:	1c63      	adds	r3, r4, #1
    3784:	2206      	movs	r2, #6
    3786:	482f      	ldr	r0, [pc, #188]	; (3844 <_vfiprintf_r+0x22c>)
    3788:	9302      	str	r3, [sp, #8]
    378a:	7629      	strb	r1, [r5, #24]
    378c:	f000 fb70 	bl	3e70 <memchr>
    3790:	2800      	cmp	r0, #0
    3792:	d044      	beq.n	381e <_vfiprintf_r+0x206>
    3794:	4b2c      	ldr	r3, [pc, #176]	; (3848 <_vfiprintf_r+0x230>)
    3796:	2b00      	cmp	r3, #0
    3798:	d12f      	bne.n	37fa <_vfiprintf_r+0x1e2>
    379a:	6829      	ldr	r1, [r5, #0]
    379c:	9b05      	ldr	r3, [sp, #20]
    379e:	2207      	movs	r2, #7
    37a0:	05c9      	lsls	r1, r1, #23
    37a2:	d528      	bpl.n	37f6 <_vfiprintf_r+0x1de>
    37a4:	189b      	adds	r3, r3, r2
    37a6:	4393      	bics	r3, r2
    37a8:	3308      	adds	r3, #8
    37aa:	9305      	str	r3, [sp, #20]
    37ac:	696b      	ldr	r3, [r5, #20]
    37ae:	9a03      	ldr	r2, [sp, #12]
    37b0:	189b      	adds	r3, r3, r2
    37b2:	616b      	str	r3, [r5, #20]
    37b4:	e74f      	b.n	3656 <_vfiprintf_r+0x3e>
    37b6:	425b      	negs	r3, r3
    37b8:	60eb      	str	r3, [r5, #12]
    37ba:	2302      	movs	r3, #2
    37bc:	430b      	orrs	r3, r1
    37be:	602b      	str	r3, [r5, #0]
    37c0:	e7bf      	b.n	3742 <_vfiprintf_r+0x12a>
    37c2:	434b      	muls	r3, r1
    37c4:	3401      	adds	r4, #1
    37c6:	189b      	adds	r3, r3, r2
    37c8:	2001      	movs	r0, #1
    37ca:	e789      	b.n	36e0 <_vfiprintf_r+0xc8>
    37cc:	2301      	movs	r3, #1
    37ce:	425b      	negs	r3, r3
    37d0:	e7c6      	b.n	3760 <_vfiprintf_r+0x148>
    37d2:	2300      	movs	r3, #0
    37d4:	0014      	movs	r4, r2
    37d6:	200a      	movs	r0, #10
    37d8:	001a      	movs	r2, r3
    37da:	606b      	str	r3, [r5, #4]
    37dc:	7821      	ldrb	r1, [r4, #0]
    37de:	3930      	subs	r1, #48	; 0x30
    37e0:	2909      	cmp	r1, #9
    37e2:	d903      	bls.n	37ec <_vfiprintf_r+0x1d4>
    37e4:	2b00      	cmp	r3, #0
    37e6:	d0bc      	beq.n	3762 <_vfiprintf_r+0x14a>
    37e8:	9207      	str	r2, [sp, #28]
    37ea:	e7ba      	b.n	3762 <_vfiprintf_r+0x14a>
    37ec:	4342      	muls	r2, r0
    37ee:	3401      	adds	r4, #1
    37f0:	1852      	adds	r2, r2, r1
    37f2:	2301      	movs	r3, #1
    37f4:	e7f2      	b.n	37dc <_vfiprintf_r+0x1c4>
    37f6:	3307      	adds	r3, #7
    37f8:	e7d5      	b.n	37a6 <_vfiprintf_r+0x18e>
    37fa:	ab05      	add	r3, sp, #20
    37fc:	9300      	str	r3, [sp, #0]
    37fe:	003a      	movs	r2, r7
    3800:	4b12      	ldr	r3, [pc, #72]	; (384c <_vfiprintf_r+0x234>)
    3802:	0029      	movs	r1, r5
    3804:	0030      	movs	r0, r6
    3806:	e000      	b.n	380a <_vfiprintf_r+0x1f2>
    3808:	bf00      	nop
    380a:	9003      	str	r0, [sp, #12]
    380c:	9b03      	ldr	r3, [sp, #12]
    380e:	3301      	adds	r3, #1
    3810:	d1cc      	bne.n	37ac <_vfiprintf_r+0x194>
    3812:	89bb      	ldrh	r3, [r7, #12]
    3814:	065b      	lsls	r3, r3, #25
    3816:	d500      	bpl.n	381a <_vfiprintf_r+0x202>
    3818:	e77b      	b.n	3712 <_vfiprintf_r+0xfa>
    381a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    381c:	e77b      	b.n	3716 <_vfiprintf_r+0xfe>
    381e:	ab05      	add	r3, sp, #20
    3820:	9300      	str	r3, [sp, #0]
    3822:	003a      	movs	r2, r7
    3824:	4b09      	ldr	r3, [pc, #36]	; (384c <_vfiprintf_r+0x234>)
    3826:	0029      	movs	r1, r5
    3828:	0030      	movs	r0, r6
    382a:	f000 f87f 	bl	392c <_printf_i>
    382e:	e7ec      	b.n	380a <_vfiprintf_r+0x1f2>
    3830:	00005f5c 	.word	0x00005f5c
    3834:	00005f9c 	.word	0x00005f9c
    3838:	00005f7c 	.word	0x00005f7c
    383c:	00005f3c 	.word	0x00005f3c
    3840:	00005fa2 	.word	0x00005fa2
    3844:	00005fa6 	.word	0x00005fa6
    3848:	00000000 	.word	0x00000000
    384c:	000035f3 	.word	0x000035f3

00003850 <_printf_common>:
    3850:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3852:	0015      	movs	r5, r2
    3854:	9301      	str	r3, [sp, #4]
    3856:	688a      	ldr	r2, [r1, #8]
    3858:	690b      	ldr	r3, [r1, #16]
    385a:	9000      	str	r0, [sp, #0]
    385c:	000c      	movs	r4, r1
    385e:	4293      	cmp	r3, r2
    3860:	da00      	bge.n	3864 <_printf_common+0x14>
    3862:	0013      	movs	r3, r2
    3864:	0022      	movs	r2, r4
    3866:	602b      	str	r3, [r5, #0]
    3868:	3243      	adds	r2, #67	; 0x43
    386a:	7812      	ldrb	r2, [r2, #0]
    386c:	2a00      	cmp	r2, #0
    386e:	d001      	beq.n	3874 <_printf_common+0x24>
    3870:	3301      	adds	r3, #1
    3872:	602b      	str	r3, [r5, #0]
    3874:	6823      	ldr	r3, [r4, #0]
    3876:	069b      	lsls	r3, r3, #26
    3878:	d502      	bpl.n	3880 <_printf_common+0x30>
    387a:	682b      	ldr	r3, [r5, #0]
    387c:	3302      	adds	r3, #2
    387e:	602b      	str	r3, [r5, #0]
    3880:	2706      	movs	r7, #6
    3882:	6823      	ldr	r3, [r4, #0]
    3884:	401f      	ands	r7, r3
    3886:	d027      	beq.n	38d8 <_printf_common+0x88>
    3888:	0023      	movs	r3, r4
    388a:	3343      	adds	r3, #67	; 0x43
    388c:	781b      	ldrb	r3, [r3, #0]
    388e:	1e5a      	subs	r2, r3, #1
    3890:	4193      	sbcs	r3, r2
    3892:	6822      	ldr	r2, [r4, #0]
    3894:	0692      	lsls	r2, r2, #26
    3896:	d430      	bmi.n	38fa <_printf_common+0xaa>
    3898:	0022      	movs	r2, r4
    389a:	9901      	ldr	r1, [sp, #4]
    389c:	3243      	adds	r2, #67	; 0x43
    389e:	9800      	ldr	r0, [sp, #0]
    38a0:	9e08      	ldr	r6, [sp, #32]
    38a2:	47b0      	blx	r6
    38a4:	1c43      	adds	r3, r0, #1
    38a6:	d025      	beq.n	38f4 <_printf_common+0xa4>
    38a8:	2306      	movs	r3, #6
    38aa:	6820      	ldr	r0, [r4, #0]
    38ac:	682a      	ldr	r2, [r5, #0]
    38ae:	68e1      	ldr	r1, [r4, #12]
    38b0:	4003      	ands	r3, r0
    38b2:	2500      	movs	r5, #0
    38b4:	2b04      	cmp	r3, #4
    38b6:	d103      	bne.n	38c0 <_printf_common+0x70>
    38b8:	1a8d      	subs	r5, r1, r2
    38ba:	43eb      	mvns	r3, r5
    38bc:	17db      	asrs	r3, r3, #31
    38be:	401d      	ands	r5, r3
    38c0:	68a3      	ldr	r3, [r4, #8]
    38c2:	6922      	ldr	r2, [r4, #16]
    38c4:	4293      	cmp	r3, r2
    38c6:	dd01      	ble.n	38cc <_printf_common+0x7c>
    38c8:	1a9b      	subs	r3, r3, r2
    38ca:	18ed      	adds	r5, r5, r3
    38cc:	2700      	movs	r7, #0
    38ce:	42bd      	cmp	r5, r7
    38d0:	d120      	bne.n	3914 <_printf_common+0xc4>
    38d2:	2000      	movs	r0, #0
    38d4:	e010      	b.n	38f8 <_printf_common+0xa8>
    38d6:	3701      	adds	r7, #1
    38d8:	68e3      	ldr	r3, [r4, #12]
    38da:	682a      	ldr	r2, [r5, #0]
    38dc:	1a9b      	subs	r3, r3, r2
    38de:	429f      	cmp	r7, r3
    38e0:	dad2      	bge.n	3888 <_printf_common+0x38>
    38e2:	0022      	movs	r2, r4
    38e4:	2301      	movs	r3, #1
    38e6:	3219      	adds	r2, #25
    38e8:	9901      	ldr	r1, [sp, #4]
    38ea:	9800      	ldr	r0, [sp, #0]
    38ec:	9e08      	ldr	r6, [sp, #32]
    38ee:	47b0      	blx	r6
    38f0:	1c43      	adds	r3, r0, #1
    38f2:	d1f0      	bne.n	38d6 <_printf_common+0x86>
    38f4:	2001      	movs	r0, #1
    38f6:	4240      	negs	r0, r0
    38f8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    38fa:	2030      	movs	r0, #48	; 0x30
    38fc:	18e1      	adds	r1, r4, r3
    38fe:	3143      	adds	r1, #67	; 0x43
    3900:	7008      	strb	r0, [r1, #0]
    3902:	0021      	movs	r1, r4
    3904:	1c5a      	adds	r2, r3, #1
    3906:	3145      	adds	r1, #69	; 0x45
    3908:	7809      	ldrb	r1, [r1, #0]
    390a:	18a2      	adds	r2, r4, r2
    390c:	3243      	adds	r2, #67	; 0x43
    390e:	3302      	adds	r3, #2
    3910:	7011      	strb	r1, [r2, #0]
    3912:	e7c1      	b.n	3898 <_printf_common+0x48>
    3914:	0022      	movs	r2, r4
    3916:	2301      	movs	r3, #1
    3918:	321a      	adds	r2, #26
    391a:	9901      	ldr	r1, [sp, #4]
    391c:	9800      	ldr	r0, [sp, #0]
    391e:	9e08      	ldr	r6, [sp, #32]
    3920:	47b0      	blx	r6
    3922:	1c43      	adds	r3, r0, #1
    3924:	d0e6      	beq.n	38f4 <_printf_common+0xa4>
    3926:	3701      	adds	r7, #1
    3928:	e7d1      	b.n	38ce <_printf_common+0x7e>
	...

0000392c <_printf_i>:
    392c:	b5f0      	push	{r4, r5, r6, r7, lr}
    392e:	b08b      	sub	sp, #44	; 0x2c
    3930:	9206      	str	r2, [sp, #24]
    3932:	000a      	movs	r2, r1
    3934:	3243      	adds	r2, #67	; 0x43
    3936:	9307      	str	r3, [sp, #28]
    3938:	9005      	str	r0, [sp, #20]
    393a:	9204      	str	r2, [sp, #16]
    393c:	7e0a      	ldrb	r2, [r1, #24]
    393e:	000c      	movs	r4, r1
    3940:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3942:	2a6e      	cmp	r2, #110	; 0x6e
    3944:	d100      	bne.n	3948 <_printf_i+0x1c>
    3946:	e08f      	b.n	3a68 <_printf_i+0x13c>
    3948:	d817      	bhi.n	397a <_printf_i+0x4e>
    394a:	2a63      	cmp	r2, #99	; 0x63
    394c:	d02c      	beq.n	39a8 <_printf_i+0x7c>
    394e:	d808      	bhi.n	3962 <_printf_i+0x36>
    3950:	2a00      	cmp	r2, #0
    3952:	d100      	bne.n	3956 <_printf_i+0x2a>
    3954:	e099      	b.n	3a8a <_printf_i+0x15e>
    3956:	2a58      	cmp	r2, #88	; 0x58
    3958:	d054      	beq.n	3a04 <_printf_i+0xd8>
    395a:	0026      	movs	r6, r4
    395c:	3642      	adds	r6, #66	; 0x42
    395e:	7032      	strb	r2, [r6, #0]
    3960:	e029      	b.n	39b6 <_printf_i+0x8a>
    3962:	2a64      	cmp	r2, #100	; 0x64
    3964:	d001      	beq.n	396a <_printf_i+0x3e>
    3966:	2a69      	cmp	r2, #105	; 0x69
    3968:	d1f7      	bne.n	395a <_printf_i+0x2e>
    396a:	6821      	ldr	r1, [r4, #0]
    396c:	681a      	ldr	r2, [r3, #0]
    396e:	0608      	lsls	r0, r1, #24
    3970:	d523      	bpl.n	39ba <_printf_i+0x8e>
    3972:	1d11      	adds	r1, r2, #4
    3974:	6019      	str	r1, [r3, #0]
    3976:	6815      	ldr	r5, [r2, #0]
    3978:	e025      	b.n	39c6 <_printf_i+0x9a>
    397a:	2a73      	cmp	r2, #115	; 0x73
    397c:	d100      	bne.n	3980 <_printf_i+0x54>
    397e:	e088      	b.n	3a92 <_printf_i+0x166>
    3980:	d808      	bhi.n	3994 <_printf_i+0x68>
    3982:	2a6f      	cmp	r2, #111	; 0x6f
    3984:	d029      	beq.n	39da <_printf_i+0xae>
    3986:	2a70      	cmp	r2, #112	; 0x70
    3988:	d1e7      	bne.n	395a <_printf_i+0x2e>
    398a:	2220      	movs	r2, #32
    398c:	6809      	ldr	r1, [r1, #0]
    398e:	430a      	orrs	r2, r1
    3990:	6022      	str	r2, [r4, #0]
    3992:	e003      	b.n	399c <_printf_i+0x70>
    3994:	2a75      	cmp	r2, #117	; 0x75
    3996:	d020      	beq.n	39da <_printf_i+0xae>
    3998:	2a78      	cmp	r2, #120	; 0x78
    399a:	d1de      	bne.n	395a <_printf_i+0x2e>
    399c:	0022      	movs	r2, r4
    399e:	2178      	movs	r1, #120	; 0x78
    39a0:	3245      	adds	r2, #69	; 0x45
    39a2:	7011      	strb	r1, [r2, #0]
    39a4:	4a6c      	ldr	r2, [pc, #432]	; (3b58 <_printf_i+0x22c>)
    39a6:	e030      	b.n	3a0a <_printf_i+0xde>
    39a8:	000e      	movs	r6, r1
    39aa:	681a      	ldr	r2, [r3, #0]
    39ac:	3642      	adds	r6, #66	; 0x42
    39ae:	1d11      	adds	r1, r2, #4
    39b0:	6019      	str	r1, [r3, #0]
    39b2:	6813      	ldr	r3, [r2, #0]
    39b4:	7033      	strb	r3, [r6, #0]
    39b6:	2301      	movs	r3, #1
    39b8:	e079      	b.n	3aae <_printf_i+0x182>
    39ba:	0649      	lsls	r1, r1, #25
    39bc:	d5d9      	bpl.n	3972 <_printf_i+0x46>
    39be:	1d11      	adds	r1, r2, #4
    39c0:	6019      	str	r1, [r3, #0]
    39c2:	2300      	movs	r3, #0
    39c4:	5ed5      	ldrsh	r5, [r2, r3]
    39c6:	2d00      	cmp	r5, #0
    39c8:	da03      	bge.n	39d2 <_printf_i+0xa6>
    39ca:	232d      	movs	r3, #45	; 0x2d
    39cc:	9a04      	ldr	r2, [sp, #16]
    39ce:	426d      	negs	r5, r5
    39d0:	7013      	strb	r3, [r2, #0]
    39d2:	4b62      	ldr	r3, [pc, #392]	; (3b5c <_printf_i+0x230>)
    39d4:	270a      	movs	r7, #10
    39d6:	9303      	str	r3, [sp, #12]
    39d8:	e02f      	b.n	3a3a <_printf_i+0x10e>
    39da:	6820      	ldr	r0, [r4, #0]
    39dc:	6819      	ldr	r1, [r3, #0]
    39de:	0605      	lsls	r5, r0, #24
    39e0:	d503      	bpl.n	39ea <_printf_i+0xbe>
    39e2:	1d08      	adds	r0, r1, #4
    39e4:	6018      	str	r0, [r3, #0]
    39e6:	680d      	ldr	r5, [r1, #0]
    39e8:	e005      	b.n	39f6 <_printf_i+0xca>
    39ea:	0640      	lsls	r0, r0, #25
    39ec:	d5f9      	bpl.n	39e2 <_printf_i+0xb6>
    39ee:	680d      	ldr	r5, [r1, #0]
    39f0:	1d08      	adds	r0, r1, #4
    39f2:	6018      	str	r0, [r3, #0]
    39f4:	b2ad      	uxth	r5, r5
    39f6:	4b59      	ldr	r3, [pc, #356]	; (3b5c <_printf_i+0x230>)
    39f8:	2708      	movs	r7, #8
    39fa:	9303      	str	r3, [sp, #12]
    39fc:	2a6f      	cmp	r2, #111	; 0x6f
    39fe:	d018      	beq.n	3a32 <_printf_i+0x106>
    3a00:	270a      	movs	r7, #10
    3a02:	e016      	b.n	3a32 <_printf_i+0x106>
    3a04:	3145      	adds	r1, #69	; 0x45
    3a06:	700a      	strb	r2, [r1, #0]
    3a08:	4a54      	ldr	r2, [pc, #336]	; (3b5c <_printf_i+0x230>)
    3a0a:	9203      	str	r2, [sp, #12]
    3a0c:	681a      	ldr	r2, [r3, #0]
    3a0e:	6821      	ldr	r1, [r4, #0]
    3a10:	1d10      	adds	r0, r2, #4
    3a12:	6018      	str	r0, [r3, #0]
    3a14:	6815      	ldr	r5, [r2, #0]
    3a16:	0608      	lsls	r0, r1, #24
    3a18:	d522      	bpl.n	3a60 <_printf_i+0x134>
    3a1a:	07cb      	lsls	r3, r1, #31
    3a1c:	d502      	bpl.n	3a24 <_printf_i+0xf8>
    3a1e:	2320      	movs	r3, #32
    3a20:	4319      	orrs	r1, r3
    3a22:	6021      	str	r1, [r4, #0]
    3a24:	2710      	movs	r7, #16
    3a26:	2d00      	cmp	r5, #0
    3a28:	d103      	bne.n	3a32 <_printf_i+0x106>
    3a2a:	2320      	movs	r3, #32
    3a2c:	6822      	ldr	r2, [r4, #0]
    3a2e:	439a      	bics	r2, r3
    3a30:	6022      	str	r2, [r4, #0]
    3a32:	0023      	movs	r3, r4
    3a34:	2200      	movs	r2, #0
    3a36:	3343      	adds	r3, #67	; 0x43
    3a38:	701a      	strb	r2, [r3, #0]
    3a3a:	6863      	ldr	r3, [r4, #4]
    3a3c:	60a3      	str	r3, [r4, #8]
    3a3e:	2b00      	cmp	r3, #0
    3a40:	db5c      	blt.n	3afc <_printf_i+0x1d0>
    3a42:	2204      	movs	r2, #4
    3a44:	6821      	ldr	r1, [r4, #0]
    3a46:	4391      	bics	r1, r2
    3a48:	6021      	str	r1, [r4, #0]
    3a4a:	2d00      	cmp	r5, #0
    3a4c:	d158      	bne.n	3b00 <_printf_i+0x1d4>
    3a4e:	9e04      	ldr	r6, [sp, #16]
    3a50:	2b00      	cmp	r3, #0
    3a52:	d064      	beq.n	3b1e <_printf_i+0x1f2>
    3a54:	0026      	movs	r6, r4
    3a56:	9b03      	ldr	r3, [sp, #12]
    3a58:	3642      	adds	r6, #66	; 0x42
    3a5a:	781b      	ldrb	r3, [r3, #0]
    3a5c:	7033      	strb	r3, [r6, #0]
    3a5e:	e05e      	b.n	3b1e <_printf_i+0x1f2>
    3a60:	0648      	lsls	r0, r1, #25
    3a62:	d5da      	bpl.n	3a1a <_printf_i+0xee>
    3a64:	b2ad      	uxth	r5, r5
    3a66:	e7d8      	b.n	3a1a <_printf_i+0xee>
    3a68:	6809      	ldr	r1, [r1, #0]
    3a6a:	681a      	ldr	r2, [r3, #0]
    3a6c:	0608      	lsls	r0, r1, #24
    3a6e:	d505      	bpl.n	3a7c <_printf_i+0x150>
    3a70:	1d11      	adds	r1, r2, #4
    3a72:	6019      	str	r1, [r3, #0]
    3a74:	6813      	ldr	r3, [r2, #0]
    3a76:	6962      	ldr	r2, [r4, #20]
    3a78:	601a      	str	r2, [r3, #0]
    3a7a:	e006      	b.n	3a8a <_printf_i+0x15e>
    3a7c:	0649      	lsls	r1, r1, #25
    3a7e:	d5f7      	bpl.n	3a70 <_printf_i+0x144>
    3a80:	1d11      	adds	r1, r2, #4
    3a82:	6019      	str	r1, [r3, #0]
    3a84:	6813      	ldr	r3, [r2, #0]
    3a86:	8aa2      	ldrh	r2, [r4, #20]
    3a88:	801a      	strh	r2, [r3, #0]
    3a8a:	2300      	movs	r3, #0
    3a8c:	9e04      	ldr	r6, [sp, #16]
    3a8e:	6123      	str	r3, [r4, #16]
    3a90:	e054      	b.n	3b3c <_printf_i+0x210>
    3a92:	681a      	ldr	r2, [r3, #0]
    3a94:	1d11      	adds	r1, r2, #4
    3a96:	6019      	str	r1, [r3, #0]
    3a98:	6816      	ldr	r6, [r2, #0]
    3a9a:	2100      	movs	r1, #0
    3a9c:	6862      	ldr	r2, [r4, #4]
    3a9e:	0030      	movs	r0, r6
    3aa0:	f000 f9e6 	bl	3e70 <memchr>
    3aa4:	2800      	cmp	r0, #0
    3aa6:	d001      	beq.n	3aac <_printf_i+0x180>
    3aa8:	1b80      	subs	r0, r0, r6
    3aaa:	6060      	str	r0, [r4, #4]
    3aac:	6863      	ldr	r3, [r4, #4]
    3aae:	6123      	str	r3, [r4, #16]
    3ab0:	2300      	movs	r3, #0
    3ab2:	9a04      	ldr	r2, [sp, #16]
    3ab4:	7013      	strb	r3, [r2, #0]
    3ab6:	e041      	b.n	3b3c <_printf_i+0x210>
    3ab8:	6923      	ldr	r3, [r4, #16]
    3aba:	0032      	movs	r2, r6
    3abc:	9906      	ldr	r1, [sp, #24]
    3abe:	9805      	ldr	r0, [sp, #20]
    3ac0:	9d07      	ldr	r5, [sp, #28]
    3ac2:	47a8      	blx	r5
    3ac4:	1c43      	adds	r3, r0, #1
    3ac6:	d043      	beq.n	3b50 <_printf_i+0x224>
    3ac8:	6823      	ldr	r3, [r4, #0]
    3aca:	2500      	movs	r5, #0
    3acc:	079b      	lsls	r3, r3, #30
    3ace:	d40f      	bmi.n	3af0 <_printf_i+0x1c4>
    3ad0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3ad2:	68e0      	ldr	r0, [r4, #12]
    3ad4:	4298      	cmp	r0, r3
    3ad6:	da3d      	bge.n	3b54 <_printf_i+0x228>
    3ad8:	0018      	movs	r0, r3
    3ada:	e03b      	b.n	3b54 <_printf_i+0x228>
    3adc:	0022      	movs	r2, r4
    3ade:	2301      	movs	r3, #1
    3ae0:	3219      	adds	r2, #25
    3ae2:	9906      	ldr	r1, [sp, #24]
    3ae4:	9805      	ldr	r0, [sp, #20]
    3ae6:	9e07      	ldr	r6, [sp, #28]
    3ae8:	47b0      	blx	r6
    3aea:	1c43      	adds	r3, r0, #1
    3aec:	d030      	beq.n	3b50 <_printf_i+0x224>
    3aee:	3501      	adds	r5, #1
    3af0:	68e3      	ldr	r3, [r4, #12]
    3af2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3af4:	1a9b      	subs	r3, r3, r2
    3af6:	429d      	cmp	r5, r3
    3af8:	dbf0      	blt.n	3adc <_printf_i+0x1b0>
    3afa:	e7e9      	b.n	3ad0 <_printf_i+0x1a4>
    3afc:	2d00      	cmp	r5, #0
    3afe:	d0a9      	beq.n	3a54 <_printf_i+0x128>
    3b00:	9e04      	ldr	r6, [sp, #16]
    3b02:	0028      	movs	r0, r5
    3b04:	0039      	movs	r1, r7
    3b06:	f7ff f90b 	bl	2d20 <__aeabi_uidivmod>
    3b0a:	9b03      	ldr	r3, [sp, #12]
    3b0c:	3e01      	subs	r6, #1
    3b0e:	5c5b      	ldrb	r3, [r3, r1]
    3b10:	0028      	movs	r0, r5
    3b12:	7033      	strb	r3, [r6, #0]
    3b14:	0039      	movs	r1, r7
    3b16:	f7ff f87d 	bl	2c14 <__udivsi3>
    3b1a:	1e05      	subs	r5, r0, #0
    3b1c:	d1f1      	bne.n	3b02 <_printf_i+0x1d6>
    3b1e:	2f08      	cmp	r7, #8
    3b20:	d109      	bne.n	3b36 <_printf_i+0x20a>
    3b22:	6823      	ldr	r3, [r4, #0]
    3b24:	07db      	lsls	r3, r3, #31
    3b26:	d506      	bpl.n	3b36 <_printf_i+0x20a>
    3b28:	6863      	ldr	r3, [r4, #4]
    3b2a:	6922      	ldr	r2, [r4, #16]
    3b2c:	4293      	cmp	r3, r2
    3b2e:	dc02      	bgt.n	3b36 <_printf_i+0x20a>
    3b30:	2330      	movs	r3, #48	; 0x30
    3b32:	3e01      	subs	r6, #1
    3b34:	7033      	strb	r3, [r6, #0]
    3b36:	9b04      	ldr	r3, [sp, #16]
    3b38:	1b9b      	subs	r3, r3, r6
    3b3a:	6123      	str	r3, [r4, #16]
    3b3c:	9b07      	ldr	r3, [sp, #28]
    3b3e:	aa09      	add	r2, sp, #36	; 0x24
    3b40:	9300      	str	r3, [sp, #0]
    3b42:	0021      	movs	r1, r4
    3b44:	9b06      	ldr	r3, [sp, #24]
    3b46:	9805      	ldr	r0, [sp, #20]
    3b48:	f7ff fe82 	bl	3850 <_printf_common>
    3b4c:	1c43      	adds	r3, r0, #1
    3b4e:	d1b3      	bne.n	3ab8 <_printf_i+0x18c>
    3b50:	2001      	movs	r0, #1
    3b52:	4240      	negs	r0, r0
    3b54:	b00b      	add	sp, #44	; 0x2c
    3b56:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3b58:	00005fbe 	.word	0x00005fbe
    3b5c:	00005fad 	.word	0x00005fad

00003b60 <_sbrk_r>:
    3b60:	2300      	movs	r3, #0
    3b62:	b570      	push	{r4, r5, r6, lr}
    3b64:	4c06      	ldr	r4, [pc, #24]	; (3b80 <_sbrk_r+0x20>)
    3b66:	0005      	movs	r5, r0
    3b68:	0008      	movs	r0, r1
    3b6a:	6023      	str	r3, [r4, #0]
    3b6c:	f7fd fe84 	bl	1878 <_sbrk>
    3b70:	1c43      	adds	r3, r0, #1
    3b72:	d103      	bne.n	3b7c <_sbrk_r+0x1c>
    3b74:	6823      	ldr	r3, [r4, #0]
    3b76:	2b00      	cmp	r3, #0
    3b78:	d000      	beq.n	3b7c <_sbrk_r+0x1c>
    3b7a:	602b      	str	r3, [r5, #0]
    3b7c:	bd70      	pop	{r4, r5, r6, pc}
    3b7e:	46c0      	nop			; (mov r8, r8)
    3b80:	20000428 	.word	0x20000428

00003b84 <__sread>:
    3b84:	b570      	push	{r4, r5, r6, lr}
    3b86:	000c      	movs	r4, r1
    3b88:	250e      	movs	r5, #14
    3b8a:	5f49      	ldrsh	r1, [r1, r5]
    3b8c:	f000 f97e 	bl	3e8c <_read_r>
    3b90:	2800      	cmp	r0, #0
    3b92:	db03      	blt.n	3b9c <__sread+0x18>
    3b94:	6d63      	ldr	r3, [r4, #84]	; 0x54
    3b96:	181b      	adds	r3, r3, r0
    3b98:	6563      	str	r3, [r4, #84]	; 0x54
    3b9a:	bd70      	pop	{r4, r5, r6, pc}
    3b9c:	89a3      	ldrh	r3, [r4, #12]
    3b9e:	4a02      	ldr	r2, [pc, #8]	; (3ba8 <__sread+0x24>)
    3ba0:	4013      	ands	r3, r2
    3ba2:	81a3      	strh	r3, [r4, #12]
    3ba4:	e7f9      	b.n	3b9a <__sread+0x16>
    3ba6:	46c0      	nop			; (mov r8, r8)
    3ba8:	ffffefff 	.word	0xffffefff

00003bac <__swrite>:
    3bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3bae:	001f      	movs	r7, r3
    3bb0:	898b      	ldrh	r3, [r1, #12]
    3bb2:	0005      	movs	r5, r0
    3bb4:	000c      	movs	r4, r1
    3bb6:	0016      	movs	r6, r2
    3bb8:	05db      	lsls	r3, r3, #23
    3bba:	d505      	bpl.n	3bc8 <__swrite+0x1c>
    3bbc:	230e      	movs	r3, #14
    3bbe:	5ec9      	ldrsh	r1, [r1, r3]
    3bc0:	2200      	movs	r2, #0
    3bc2:	2302      	movs	r3, #2
    3bc4:	f000 f940 	bl	3e48 <_lseek_r>
    3bc8:	89a3      	ldrh	r3, [r4, #12]
    3bca:	4a05      	ldr	r2, [pc, #20]	; (3be0 <__swrite+0x34>)
    3bcc:	0028      	movs	r0, r5
    3bce:	4013      	ands	r3, r2
    3bd0:	81a3      	strh	r3, [r4, #12]
    3bd2:	0032      	movs	r2, r6
    3bd4:	230e      	movs	r3, #14
    3bd6:	5ee1      	ldrsh	r1, [r4, r3]
    3bd8:	003b      	movs	r3, r7
    3bda:	f000 f875 	bl	3cc8 <_write_r>
    3bde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3be0:	ffffefff 	.word	0xffffefff

00003be4 <__sseek>:
    3be4:	b570      	push	{r4, r5, r6, lr}
    3be6:	000c      	movs	r4, r1
    3be8:	250e      	movs	r5, #14
    3bea:	5f49      	ldrsh	r1, [r1, r5]
    3bec:	f000 f92c 	bl	3e48 <_lseek_r>
    3bf0:	89a3      	ldrh	r3, [r4, #12]
    3bf2:	1c42      	adds	r2, r0, #1
    3bf4:	d103      	bne.n	3bfe <__sseek+0x1a>
    3bf6:	4a05      	ldr	r2, [pc, #20]	; (3c0c <__sseek+0x28>)
    3bf8:	4013      	ands	r3, r2
    3bfa:	81a3      	strh	r3, [r4, #12]
    3bfc:	bd70      	pop	{r4, r5, r6, pc}
    3bfe:	2280      	movs	r2, #128	; 0x80
    3c00:	0152      	lsls	r2, r2, #5
    3c02:	4313      	orrs	r3, r2
    3c04:	81a3      	strh	r3, [r4, #12]
    3c06:	6560      	str	r0, [r4, #84]	; 0x54
    3c08:	e7f8      	b.n	3bfc <__sseek+0x18>
    3c0a:	46c0      	nop			; (mov r8, r8)
    3c0c:	ffffefff 	.word	0xffffefff

00003c10 <__sclose>:
    3c10:	b510      	push	{r4, lr}
    3c12:	230e      	movs	r3, #14
    3c14:	5ec9      	ldrsh	r1, [r1, r3]
    3c16:	f000 f8e1 	bl	3ddc <_close_r>
    3c1a:	bd10      	pop	{r4, pc}

00003c1c <__swbuf_r>:
    3c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3c1e:	0005      	movs	r5, r0
    3c20:	000e      	movs	r6, r1
    3c22:	0014      	movs	r4, r2
    3c24:	2800      	cmp	r0, #0
    3c26:	d004      	beq.n	3c32 <__swbuf_r+0x16>
    3c28:	6983      	ldr	r3, [r0, #24]
    3c2a:	2b00      	cmp	r3, #0
    3c2c:	d101      	bne.n	3c32 <__swbuf_r+0x16>
    3c2e:	f7ff fb17 	bl	3260 <__sinit>
    3c32:	4b22      	ldr	r3, [pc, #136]	; (3cbc <__swbuf_r+0xa0>)
    3c34:	429c      	cmp	r4, r3
    3c36:	d12d      	bne.n	3c94 <__swbuf_r+0x78>
    3c38:	686c      	ldr	r4, [r5, #4]
    3c3a:	69a3      	ldr	r3, [r4, #24]
    3c3c:	60a3      	str	r3, [r4, #8]
    3c3e:	89a3      	ldrh	r3, [r4, #12]
    3c40:	071b      	lsls	r3, r3, #28
    3c42:	d531      	bpl.n	3ca8 <__swbuf_r+0x8c>
    3c44:	6923      	ldr	r3, [r4, #16]
    3c46:	2b00      	cmp	r3, #0
    3c48:	d02e      	beq.n	3ca8 <__swbuf_r+0x8c>
    3c4a:	6823      	ldr	r3, [r4, #0]
    3c4c:	6922      	ldr	r2, [r4, #16]
    3c4e:	b2f7      	uxtb	r7, r6
    3c50:	1a98      	subs	r0, r3, r2
    3c52:	6963      	ldr	r3, [r4, #20]
    3c54:	b2f6      	uxtb	r6, r6
    3c56:	4298      	cmp	r0, r3
    3c58:	db05      	blt.n	3c66 <__swbuf_r+0x4a>
    3c5a:	0021      	movs	r1, r4
    3c5c:	0028      	movs	r0, r5
    3c5e:	f7ff fa91 	bl	3184 <_fflush_r>
    3c62:	2800      	cmp	r0, #0
    3c64:	d126      	bne.n	3cb4 <__swbuf_r+0x98>
    3c66:	68a3      	ldr	r3, [r4, #8]
    3c68:	3001      	adds	r0, #1
    3c6a:	3b01      	subs	r3, #1
    3c6c:	60a3      	str	r3, [r4, #8]
    3c6e:	6823      	ldr	r3, [r4, #0]
    3c70:	1c5a      	adds	r2, r3, #1
    3c72:	6022      	str	r2, [r4, #0]
    3c74:	701f      	strb	r7, [r3, #0]
    3c76:	6963      	ldr	r3, [r4, #20]
    3c78:	4298      	cmp	r0, r3
    3c7a:	d004      	beq.n	3c86 <__swbuf_r+0x6a>
    3c7c:	89a3      	ldrh	r3, [r4, #12]
    3c7e:	07db      	lsls	r3, r3, #31
    3c80:	d51a      	bpl.n	3cb8 <__swbuf_r+0x9c>
    3c82:	2e0a      	cmp	r6, #10
    3c84:	d118      	bne.n	3cb8 <__swbuf_r+0x9c>
    3c86:	0021      	movs	r1, r4
    3c88:	0028      	movs	r0, r5
    3c8a:	f7ff fa7b 	bl	3184 <_fflush_r>
    3c8e:	2800      	cmp	r0, #0
    3c90:	d012      	beq.n	3cb8 <__swbuf_r+0x9c>
    3c92:	e00f      	b.n	3cb4 <__swbuf_r+0x98>
    3c94:	4b0a      	ldr	r3, [pc, #40]	; (3cc0 <__swbuf_r+0xa4>)
    3c96:	429c      	cmp	r4, r3
    3c98:	d101      	bne.n	3c9e <__swbuf_r+0x82>
    3c9a:	68ac      	ldr	r4, [r5, #8]
    3c9c:	e7cd      	b.n	3c3a <__swbuf_r+0x1e>
    3c9e:	4b09      	ldr	r3, [pc, #36]	; (3cc4 <__swbuf_r+0xa8>)
    3ca0:	429c      	cmp	r4, r3
    3ca2:	d1ca      	bne.n	3c3a <__swbuf_r+0x1e>
    3ca4:	68ec      	ldr	r4, [r5, #12]
    3ca6:	e7c8      	b.n	3c3a <__swbuf_r+0x1e>
    3ca8:	0021      	movs	r1, r4
    3caa:	0028      	movs	r0, r5
    3cac:	f000 f820 	bl	3cf0 <__swsetup_r>
    3cb0:	2800      	cmp	r0, #0
    3cb2:	d0ca      	beq.n	3c4a <__swbuf_r+0x2e>
    3cb4:	2601      	movs	r6, #1
    3cb6:	4276      	negs	r6, r6
    3cb8:	0030      	movs	r0, r6
    3cba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3cbc:	00005f5c 	.word	0x00005f5c
    3cc0:	00005f7c 	.word	0x00005f7c
    3cc4:	00005f3c 	.word	0x00005f3c

00003cc8 <_write_r>:
    3cc8:	b570      	push	{r4, r5, r6, lr}
    3cca:	0005      	movs	r5, r0
    3ccc:	0008      	movs	r0, r1
    3cce:	0011      	movs	r1, r2
    3cd0:	2200      	movs	r2, #0
    3cd2:	4c06      	ldr	r4, [pc, #24]	; (3cec <_write_r+0x24>)
    3cd4:	6022      	str	r2, [r4, #0]
    3cd6:	001a      	movs	r2, r3
    3cd8:	f7fd fda6 	bl	1828 <_write>
    3cdc:	1c43      	adds	r3, r0, #1
    3cde:	d103      	bne.n	3ce8 <_write_r+0x20>
    3ce0:	6823      	ldr	r3, [r4, #0]
    3ce2:	2b00      	cmp	r3, #0
    3ce4:	d000      	beq.n	3ce8 <_write_r+0x20>
    3ce6:	602b      	str	r3, [r5, #0]
    3ce8:	bd70      	pop	{r4, r5, r6, pc}
    3cea:	46c0      	nop			; (mov r8, r8)
    3cec:	20000428 	.word	0x20000428

00003cf0 <__swsetup_r>:
    3cf0:	4b36      	ldr	r3, [pc, #216]	; (3dcc <__swsetup_r+0xdc>)
    3cf2:	b570      	push	{r4, r5, r6, lr}
    3cf4:	681d      	ldr	r5, [r3, #0]
    3cf6:	0006      	movs	r6, r0
    3cf8:	000c      	movs	r4, r1
    3cfa:	2d00      	cmp	r5, #0
    3cfc:	d005      	beq.n	3d0a <__swsetup_r+0x1a>
    3cfe:	69ab      	ldr	r3, [r5, #24]
    3d00:	2b00      	cmp	r3, #0
    3d02:	d102      	bne.n	3d0a <__swsetup_r+0x1a>
    3d04:	0028      	movs	r0, r5
    3d06:	f7ff faab 	bl	3260 <__sinit>
    3d0a:	4b31      	ldr	r3, [pc, #196]	; (3dd0 <__swsetup_r+0xe0>)
    3d0c:	429c      	cmp	r4, r3
    3d0e:	d10f      	bne.n	3d30 <__swsetup_r+0x40>
    3d10:	686c      	ldr	r4, [r5, #4]
    3d12:	230c      	movs	r3, #12
    3d14:	5ee2      	ldrsh	r2, [r4, r3]
    3d16:	b293      	uxth	r3, r2
    3d18:	0719      	lsls	r1, r3, #28
    3d1a:	d42d      	bmi.n	3d78 <__swsetup_r+0x88>
    3d1c:	06d9      	lsls	r1, r3, #27
    3d1e:	d411      	bmi.n	3d44 <__swsetup_r+0x54>
    3d20:	2309      	movs	r3, #9
    3d22:	2001      	movs	r0, #1
    3d24:	6033      	str	r3, [r6, #0]
    3d26:	3337      	adds	r3, #55	; 0x37
    3d28:	4313      	orrs	r3, r2
    3d2a:	81a3      	strh	r3, [r4, #12]
    3d2c:	4240      	negs	r0, r0
    3d2e:	bd70      	pop	{r4, r5, r6, pc}
    3d30:	4b28      	ldr	r3, [pc, #160]	; (3dd4 <__swsetup_r+0xe4>)
    3d32:	429c      	cmp	r4, r3
    3d34:	d101      	bne.n	3d3a <__swsetup_r+0x4a>
    3d36:	68ac      	ldr	r4, [r5, #8]
    3d38:	e7eb      	b.n	3d12 <__swsetup_r+0x22>
    3d3a:	4b27      	ldr	r3, [pc, #156]	; (3dd8 <__swsetup_r+0xe8>)
    3d3c:	429c      	cmp	r4, r3
    3d3e:	d1e8      	bne.n	3d12 <__swsetup_r+0x22>
    3d40:	68ec      	ldr	r4, [r5, #12]
    3d42:	e7e6      	b.n	3d12 <__swsetup_r+0x22>
    3d44:	075b      	lsls	r3, r3, #29
    3d46:	d513      	bpl.n	3d70 <__swsetup_r+0x80>
    3d48:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3d4a:	2900      	cmp	r1, #0
    3d4c:	d008      	beq.n	3d60 <__swsetup_r+0x70>
    3d4e:	0023      	movs	r3, r4
    3d50:	3344      	adds	r3, #68	; 0x44
    3d52:	4299      	cmp	r1, r3
    3d54:	d002      	beq.n	3d5c <__swsetup_r+0x6c>
    3d56:	0030      	movs	r0, r6
    3d58:	f7ff fb8e 	bl	3478 <_free_r>
    3d5c:	2300      	movs	r3, #0
    3d5e:	6363      	str	r3, [r4, #52]	; 0x34
    3d60:	2224      	movs	r2, #36	; 0x24
    3d62:	89a3      	ldrh	r3, [r4, #12]
    3d64:	4393      	bics	r3, r2
    3d66:	81a3      	strh	r3, [r4, #12]
    3d68:	2300      	movs	r3, #0
    3d6a:	6063      	str	r3, [r4, #4]
    3d6c:	6923      	ldr	r3, [r4, #16]
    3d6e:	6023      	str	r3, [r4, #0]
    3d70:	2308      	movs	r3, #8
    3d72:	89a2      	ldrh	r2, [r4, #12]
    3d74:	4313      	orrs	r3, r2
    3d76:	81a3      	strh	r3, [r4, #12]
    3d78:	6923      	ldr	r3, [r4, #16]
    3d7a:	2b00      	cmp	r3, #0
    3d7c:	d10b      	bne.n	3d96 <__swsetup_r+0xa6>
    3d7e:	21a0      	movs	r1, #160	; 0xa0
    3d80:	2280      	movs	r2, #128	; 0x80
    3d82:	89a3      	ldrh	r3, [r4, #12]
    3d84:	0089      	lsls	r1, r1, #2
    3d86:	0092      	lsls	r2, r2, #2
    3d88:	400b      	ands	r3, r1
    3d8a:	4293      	cmp	r3, r2
    3d8c:	d003      	beq.n	3d96 <__swsetup_r+0xa6>
    3d8e:	0021      	movs	r1, r4
    3d90:	0030      	movs	r0, r6
    3d92:	f7ff fb23 	bl	33dc <__smakebuf_r>
    3d96:	2301      	movs	r3, #1
    3d98:	89a2      	ldrh	r2, [r4, #12]
    3d9a:	4013      	ands	r3, r2
    3d9c:	d011      	beq.n	3dc2 <__swsetup_r+0xd2>
    3d9e:	2300      	movs	r3, #0
    3da0:	60a3      	str	r3, [r4, #8]
    3da2:	6963      	ldr	r3, [r4, #20]
    3da4:	425b      	negs	r3, r3
    3da6:	61a3      	str	r3, [r4, #24]
    3da8:	2000      	movs	r0, #0
    3daa:	6923      	ldr	r3, [r4, #16]
    3dac:	4283      	cmp	r3, r0
    3dae:	d1be      	bne.n	3d2e <__swsetup_r+0x3e>
    3db0:	230c      	movs	r3, #12
    3db2:	5ee2      	ldrsh	r2, [r4, r3]
    3db4:	0613      	lsls	r3, r2, #24
    3db6:	d5ba      	bpl.n	3d2e <__swsetup_r+0x3e>
    3db8:	2340      	movs	r3, #64	; 0x40
    3dba:	4313      	orrs	r3, r2
    3dbc:	81a3      	strh	r3, [r4, #12]
    3dbe:	3801      	subs	r0, #1
    3dc0:	e7b5      	b.n	3d2e <__swsetup_r+0x3e>
    3dc2:	0792      	lsls	r2, r2, #30
    3dc4:	d400      	bmi.n	3dc8 <__swsetup_r+0xd8>
    3dc6:	6963      	ldr	r3, [r4, #20]
    3dc8:	60a3      	str	r3, [r4, #8]
    3dca:	e7ed      	b.n	3da8 <__swsetup_r+0xb8>
    3dcc:	20000158 	.word	0x20000158
    3dd0:	00005f5c 	.word	0x00005f5c
    3dd4:	00005f7c 	.word	0x00005f7c
    3dd8:	00005f3c 	.word	0x00005f3c

00003ddc <_close_r>:
    3ddc:	2300      	movs	r3, #0
    3dde:	b570      	push	{r4, r5, r6, lr}
    3de0:	4c06      	ldr	r4, [pc, #24]	; (3dfc <_close_r+0x20>)
    3de2:	0005      	movs	r5, r0
    3de4:	0008      	movs	r0, r1
    3de6:	6023      	str	r3, [r4, #0]
    3de8:	f7fd fd58 	bl	189c <_close>
    3dec:	1c43      	adds	r3, r0, #1
    3dee:	d103      	bne.n	3df8 <_close_r+0x1c>
    3df0:	6823      	ldr	r3, [r4, #0]
    3df2:	2b00      	cmp	r3, #0
    3df4:	d000      	beq.n	3df8 <_close_r+0x1c>
    3df6:	602b      	str	r3, [r5, #0]
    3df8:	bd70      	pop	{r4, r5, r6, pc}
    3dfa:	46c0      	nop			; (mov r8, r8)
    3dfc:	20000428 	.word	0x20000428

00003e00 <_fstat_r>:
    3e00:	2300      	movs	r3, #0
    3e02:	b570      	push	{r4, r5, r6, lr}
    3e04:	4c06      	ldr	r4, [pc, #24]	; (3e20 <_fstat_r+0x20>)
    3e06:	0005      	movs	r5, r0
    3e08:	0008      	movs	r0, r1
    3e0a:	0011      	movs	r1, r2
    3e0c:	6023      	str	r3, [r4, #0]
    3e0e:	f7fd fd48 	bl	18a2 <_fstat>
    3e12:	1c43      	adds	r3, r0, #1
    3e14:	d103      	bne.n	3e1e <_fstat_r+0x1e>
    3e16:	6823      	ldr	r3, [r4, #0]
    3e18:	2b00      	cmp	r3, #0
    3e1a:	d000      	beq.n	3e1e <_fstat_r+0x1e>
    3e1c:	602b      	str	r3, [r5, #0]
    3e1e:	bd70      	pop	{r4, r5, r6, pc}
    3e20:	20000428 	.word	0x20000428

00003e24 <_isatty_r>:
    3e24:	2300      	movs	r3, #0
    3e26:	b570      	push	{r4, r5, r6, lr}
    3e28:	4c06      	ldr	r4, [pc, #24]	; (3e44 <_isatty_r+0x20>)
    3e2a:	0005      	movs	r5, r0
    3e2c:	0008      	movs	r0, r1
    3e2e:	6023      	str	r3, [r4, #0]
    3e30:	f7fd fd3c 	bl	18ac <_isatty>
    3e34:	1c43      	adds	r3, r0, #1
    3e36:	d103      	bne.n	3e40 <_isatty_r+0x1c>
    3e38:	6823      	ldr	r3, [r4, #0]
    3e3a:	2b00      	cmp	r3, #0
    3e3c:	d000      	beq.n	3e40 <_isatty_r+0x1c>
    3e3e:	602b      	str	r3, [r5, #0]
    3e40:	bd70      	pop	{r4, r5, r6, pc}
    3e42:	46c0      	nop			; (mov r8, r8)
    3e44:	20000428 	.word	0x20000428

00003e48 <_lseek_r>:
    3e48:	b570      	push	{r4, r5, r6, lr}
    3e4a:	0005      	movs	r5, r0
    3e4c:	0008      	movs	r0, r1
    3e4e:	0011      	movs	r1, r2
    3e50:	2200      	movs	r2, #0
    3e52:	4c06      	ldr	r4, [pc, #24]	; (3e6c <_lseek_r+0x24>)
    3e54:	6022      	str	r2, [r4, #0]
    3e56:	001a      	movs	r2, r3
    3e58:	f7fd fd2a 	bl	18b0 <_lseek>
    3e5c:	1c43      	adds	r3, r0, #1
    3e5e:	d103      	bne.n	3e68 <_lseek_r+0x20>
    3e60:	6823      	ldr	r3, [r4, #0]
    3e62:	2b00      	cmp	r3, #0
    3e64:	d000      	beq.n	3e68 <_lseek_r+0x20>
    3e66:	602b      	str	r3, [r5, #0]
    3e68:	bd70      	pop	{r4, r5, r6, pc}
    3e6a:	46c0      	nop			; (mov r8, r8)
    3e6c:	20000428 	.word	0x20000428

00003e70 <memchr>:
    3e70:	b2c9      	uxtb	r1, r1
    3e72:	1882      	adds	r2, r0, r2
    3e74:	4290      	cmp	r0, r2
    3e76:	d101      	bne.n	3e7c <memchr+0xc>
    3e78:	2000      	movs	r0, #0
    3e7a:	4770      	bx	lr
    3e7c:	7803      	ldrb	r3, [r0, #0]
    3e7e:	428b      	cmp	r3, r1
    3e80:	d0fb      	beq.n	3e7a <memchr+0xa>
    3e82:	3001      	adds	r0, #1
    3e84:	e7f6      	b.n	3e74 <memchr+0x4>

00003e86 <__malloc_lock>:
    3e86:	4770      	bx	lr

00003e88 <__malloc_unlock>:
    3e88:	4770      	bx	lr
	...

00003e8c <_read_r>:
    3e8c:	b570      	push	{r4, r5, r6, lr}
    3e8e:	0005      	movs	r5, r0
    3e90:	0008      	movs	r0, r1
    3e92:	0011      	movs	r1, r2
    3e94:	2200      	movs	r2, #0
    3e96:	4c06      	ldr	r4, [pc, #24]	; (3eb0 <_read_r+0x24>)
    3e98:	6022      	str	r2, [r4, #0]
    3e9a:	001a      	movs	r2, r3
    3e9c:	f7fd fca2 	bl	17e4 <_read>
    3ea0:	1c43      	adds	r3, r0, #1
    3ea2:	d103      	bne.n	3eac <_read_r+0x20>
    3ea4:	6823      	ldr	r3, [r4, #0]
    3ea6:	2b00      	cmp	r3, #0
    3ea8:	d000      	beq.n	3eac <_read_r+0x20>
    3eaa:	602b      	str	r3, [r5, #0]
    3eac:	bd70      	pop	{r4, r5, r6, pc}
    3eae:	46c0      	nop			; (mov r8, r8)
    3eb0:	20000428 	.word	0x20000428
    3eb4:	000a000a 	.word	0x000a000a
    3eb8:	00140014 	.word	0x00140014
    3ebc:	00000014 	.word	0x00000014
    3ec0:	000a017c 	.word	0x000a017c
    3ec4:	000a017c 	.word	0x000a017c
    3ec8:	00140186 	.word	0x00140186
    3ecc:	00140000 	.word	0x00140000
    3ed0:	0122000a 	.word	0x0122000a
    3ed4:	00140186 	.word	0x00140186
    3ed8:	01220190 	.word	0x01220190
    3edc:	0122000a 	.word	0x0122000a
    3ee0:	012c0014 	.word	0x012c0014
    3ee4:	0122017c 	.word	0x0122017c
    3ee8:	012c0186 	.word	0x012c0186
    3eec:	012c0014 	.word	0x012c0014
    3ef0:	0136017c 	.word	0x0136017c
    3ef4:	001e0000 	.word	0x001e0000
    3ef8:	00280032 	.word	0x00280032
    3efc:	00320000 	.word	0x00320000
    3f00:	003c0032 	.word	0x003c0032
    3f04:	001e0050 	.word	0x001e0050
    3f08:	00280118 	.word	0x00280118
    3f0c:	00280046 	.word	0x00280046
    3f10:	00be0050 	.word	0x00be0050
    3f14:	00be0050 	.word	0x00be0050
    3f18:	00c80118 	.word	0x00c80118
    3f1c:	00280118 	.word	0x00280118
    3f20:	00be0122 	.word	0x00be0122
    3f24:	00460000 	.word	0x00460000
    3f28:	00500032 	.word	0x00500032
    3f2c:	005a0000 	.word	0x005a0000
    3f30:	00640032 	.word	0x00640032
    3f34:	006e0000 	.word	0x006e0000
    3f38:	00780032 	.word	0x00780032
    3f3c:	00820000 	.word	0x00820000
    3f40:	008c0032 	.word	0x008c0032
    3f44:	00960000 	.word	0x00960000
    3f48:	00a00032 	.word	0x00a00032
    3f4c:	00aa0000 	.word	0x00aa0000
    3f50:	00b40032 	.word	0x00b40032
    3f54:	00be0000 	.word	0x00be0000
    3f58:	00c80032 	.word	0x00c80032
    3f5c:	00c8012c 	.word	0x00c8012c
    3f60:	00d20172 	.word	0x00d20172
    3f64:	00dc001e 	.word	0x00dc001e
    3f68:	00e60172 	.word	0x00e60172
    3f6c:	00f0001e 	.word	0x00f0001e
    3f70:	00fa0172 	.word	0x00fa0172
    3f74:	0104001e 	.word	0x0104001e
    3f78:	010e0172 	.word	0x010e0172
    3f7c:	0118005a 	.word	0x0118005a
    3f80:	0122012c 	.word	0x0122012c
    3f84:	82be50b4 	.word	0x82be50b4
    3f88:	8cbe82aa 	.word	0x8cbe82aa
    3f8c:	64963c8c 	.word	0x64963c8c
    3f90:	64dc3cd2 	.word	0x64dc3cd2
    3f94:	a08c9682 	.word	0xa08c9682
    3f98:	aadca08c 	.word	0xaadca08c
    3f9c:	a0e696dc 	.word	0xa0e696dc
    3fa0:	50f03c78 	.word	0x50f03c78
    3fa4:	5a78466e 	.word	0x5a78466e
    3fa8:	aaaa3c96 	.word	0xaaaa3c96
    3fac:	a0dc3cc8 	.word	0xa0dc3cc8
    3fb0:	aae6a0d2 	.word	0xaae6a0d2
    3fb4:	78696e55 	.word	0x78696e55
    3fb8:	6f706520 	.word	0x6f706520
    3fbc:	6d206863 	.word	0x6d206863
    3fc0:	73756e69 	.word	0x73756e69
    3fc4:	46783020 	.word	0x46783020
    3fc8:	61642046 	.word	0x61642046
    3fcc:	00007379 	.word	0x00007379
    3fd0:	355e3331 	.word	0x355e3331
    3fd4:	31202b20 	.word	0x31202b20
    3fd8:	20355e36 	.word	0x20355e36
    3fdc:	3731203d 	.word	0x3731203d
    3fe0:	0000355e 	.word	0x0000355e
    3fe4:	69746552 	.word	0x69746552
    3fe8:	616c7563 	.word	0x616c7563
    3fec:	676e6974 	.word	0x676e6974
    3ff0:	6c705320 	.word	0x6c705320
    3ff4:	73656e69 	.word	0x73656e69
    3ff8:	00000000 	.word	0x00000000
    3ffc:	6c6f6956 	.word	0x6c6f6956
    4000:	65636e65 	.word	0x65636e65
    4004:	726f7720 	.word	0x726f7720
    4008:	0000736b 	.word	0x0000736b
    400c:	73626154 	.word	0x73626154
    4010:	00000021 	.word	0x00000021
    4014:	6c6c694b 	.word	0x6c6c694b
    4018:	6c694220 	.word	0x6c694220
    401c:	6e6f696c 	.word	0x6e6f696c
    4020:	65726961 	.word	0x65726961
    4024:	61282073 	.word	0x61282073
    4028:	5420646e 	.word	0x5420646e
    402c:	6c6c6972 	.word	0x6c6c6972
    4030:	616e6f69 	.word	0x616e6f69
    4034:	29657269 	.word	0x29657269
    4038:	00000000 	.word	0x00000000
    403c:	65746e49 	.word	0x65746e49
    4040:	74736572 	.word	0x74736572
    4044:	206e6920 	.word	0x206e6920
    4048:	68636574 	.word	0x68636574
    404c:	6f6c6f6e 	.word	0x6f6c6f6e
    4050:	69207967 	.word	0x69207967
    4054:	6f6e2073 	.word	0x6f6e2073
    4058:	20612074 	.word	0x20612074
    405c:	73726570 	.word	0x73726570
    4060:	6c616e6f 	.word	0x6c616e6f
    4064:	00797469 	.word	0x00797469
    4068:	50203031 	.word	0x50203031
    406c:	544e4952 	.word	0x544e4952
    4070:	52484320 	.word	0x52484320
    4074:	30322824 	.word	0x30322824
    4078:	2b352e35 	.word	0x2b352e35
    407c:	28444e52 	.word	0x28444e52
    4080:	3b292931 	.word	0x3b292931
    4084:	47203a20 	.word	0x47203a20
    4088:	204f544f 	.word	0x204f544f
    408c:	00003031 	.word	0x00003031
    4090:	67206f4e 	.word	0x67206f4e
    4094:	2e73646f 	.word	0x2e73646f
    4098:	206f4e20 	.word	0x206f4e20
    409c:	7473616d 	.word	0x7473616d
    40a0:	2e737265 	.word	0x2e737265
    40a4:	206f4e20 	.word	0x206f4e20
    40a8:	65747865 	.word	0x65747865
    40ac:	6c616e72 	.word	0x6c616e72
    40b0:	62696c20 	.word	0x62696c20
    40b4:	69726172 	.word	0x69726172
    40b8:	002e7365 	.word	0x002e7365
    40bc:	63617053 	.word	0x63617053
    40c0:	00217365 	.word	0x00217365
    40c4:	6e616954 	.word	0x6e616954
    40c8:	656d6e61 	.word	0x656d6e61
    40cc:	7153206e 	.word	0x7153206e
    40d0:	65726175 	.word	0x65726175
    40d4:	38393120 	.word	0x38393120
    40d8:	00000039 	.word	0x00000039
    40dc:	72656d41 	.word	0x72656d41
    40e0:	20616369 	.word	0x20616369
    40e4:	20736177 	.word	0x20736177
    40e8:	6e756f66 	.word	0x6e756f66
    40ec:	20646564 	.word	0x20646564
    40f0:	73206e6f 	.word	0x73206e6f
    40f4:	6576616c 	.word	0x6576616c
    40f8:	00007972 	.word	0x00007972
    40fc:	72656854 	.word	0x72656854
    4100:	73692065 	.word	0x73692065
    4104:	6c6e6f20 	.word	0x6c6e6f20
    4108:	61632079 	.word	0x61632079
    410c:	61746970 	.word	0x61746970
    4110:	6e61206c 	.word	0x6e61206c
    4114:	616c2064 	.word	0x616c2064
    4118:	00726f62 	.word	0x00726f62
    411c:	6f636e45 	.word	0x6f636e45
    4120:	67617275 	.word	0x67617275
    4124:	79732065 	.word	0x79732065
    4128:	74656d6d 	.word	0x74656d6d
    412c:	20636972 	.word	0x20636972
    4130:	73616c63 	.word	0x73616c63
    4134:	61772073 	.word	0x61772073
    4138:	72616672 	.word	0x72616672
    413c:	00000065 	.word	0x00000065
    4140:	52554324 	.word	0x52554324
    4144:	544e4552 	.word	0x544e4552
    4148:	4d454d5f 	.word	0x4d454d5f
    414c:	00000045 	.word	0x00000045
    4150:	694e2041 	.word	0x694e2041
    4154:	54206563 	.word	0x54206563
    4158:	00005954 	.word	0x00005954
    415c:	6e617254 	.word	0x6e617254
    4160:	69722073 	.word	0x69722073
    4164:	73746867 	.word	0x73746867
    4168:	65726120 	.word	0x65726120
    416c:	6d756820 	.word	0x6d756820
    4170:	72206e61 	.word	0x72206e61
    4174:	74686769 	.word	0x74686769
    4178:	00000073 	.word	0x00000073
    417c:	3d202069 	.word	0x3d202069
    4180:	35783020 	.word	0x35783020
    4184:	35373366 	.word	0x35373366
    4188:	20666439 	.word	0x20666439
    418c:	2028202d 	.word	0x2028202d
    4190:	3e3e2069 	.word	0x3e3e2069
    4194:	29203120 	.word	0x29203120
    4198:	0000003b 	.word	0x0000003b
    419c:	42414341 	.word	0x42414341
    41a0:	00000000 	.word	0x00000000
    41a4:	63666544 	.word	0x63666544
    41a8:	73276e6f 	.word	0x73276e6f
    41ac:	6e616320 	.word	0x6e616320
    41b0:	656c6563 	.word	0x656c6563
    41b4:	00002e64 	.word	0x00002e64
    41b8:	73746152 	.word	0x73746152
    41bc:	7473656e 	.word	0x7473656e
    41c0:	6f4e203a 	.word	0x6f4e203a
    41c4:	6e696874 	.word	0x6e696874
    41c8:	6f542067 	.word	0x6f542067
    41cc:	216f4420 	.word	0x216f4420
    41d0:	00000000 	.word	0x00000000
    41d4:	68207449 	.word	0x68207449
    41d8:	36207361 	.word	0x36207361
    41dc:	656b2039 	.word	0x656b2039
    41e0:	002e7379 	.word	0x002e7379
    41e4:	61636542 	.word	0x61636542
    41e8:	20657375 	.word	0x20657375
    41ec:	342d5456 	.word	0x342d5456
    41f0:	77203032 	.word	0x77203032
    41f4:	61207361 	.word	0x61207361
    41f8:	6165726c 	.word	0x6165726c
    41fc:	74207964 	.word	0x74207964
    4200:	6e656b61 	.word	0x6e656b61
    4204:	00000000 	.word	0x00000000
    4208:	706d6f43 	.word	0x706d6f43
    420c:	73736572 	.word	0x73736572
    4210:	206e6f69 	.word	0x206e6f69
    4214:	6f676c61 	.word	0x6f676c61
    4218:	68746972 	.word	0x68746972
    421c:	6162206d 	.word	0x6162206d
    4220:	20646573 	.word	0x20646573
    4224:	42206e6f 	.word	0x42206e6f
    4228:	28205042 	.word	0x28205042
    422c:	37393931 	.word	0x37393931
    4230:	00000029 	.word	0x00000029
    4234:	20656854 	.word	0x20656854
    4238:	72756f73 	.word	0x72756f73
    423c:	6f206563 	.word	0x6f206563
    4240:	68742066 	.word	0x68742066
    4244:	694d2065 	.word	0x694d2065
    4248:	73697373 	.word	0x73697373
    424c:	70706973 	.word	0x70706973
    4250:	69722069 	.word	0x69722069
    4254:	20726576 	.word	0x20726576
    4258:	69207369 	.word	0x69207369
    425c:	6550206e 	.word	0x6550206e
    4260:	79736e6e 	.word	0x79736e6e
    4264:	6e61766c 	.word	0x6e61766c
    4268:	002e6169 	.word	0x002e6169
    426c:	6566664f 	.word	0x6566664f
    4270:	7669736e 	.word	0x7669736e
    4274:	61682065 	.word	0x61682065
    4278:	61776472 	.word	0x61776472
    427c:	00006572 	.word	0x00006572
    4280:	6c6c6f46 	.word	0x6c6c6f46
    4284:	5720776f 	.word	0x5720776f
    4288:	646c726f 	.word	0x646c726f
    428c:	676f5020 	.word	0x676f5020
    4290:	64654620 	.word	0x64654620
    4294:	74617265 	.word	0x74617265
    4298:	206e6f69 	.word	0x206e6f69
    429c:	40202020 	.word	0x40202020
    42a0:	6c726f57 	.word	0x6c726f57
    42a4:	676f5064 	.word	0x676f5064
    42a8:	00000000 	.word	0x00000000
    42ac:	6d6d7544 	.word	0x6d6d7544
    42b0:	68742079 	.word	0x68742079
    42b4:	20636369 	.word	0x20636369
    42b8:	65696c63 	.word	0x65696c63
    42bc:	0000746e 	.word	0x0000746e
    42c0:	694e2041 	.word	0x694e2041
    42c4:	54206563 	.word	0x54206563
    42c8:	202e5954 	.word	0x202e5954
    42cc:	4f206e41 	.word	0x4f206e41
    42d0:	6f43204b 	.word	0x6f43204b
    42d4:	7475706d 	.word	0x7475706d
    42d8:	002e7265 	.word	0x002e7265
    42dc:	41632049 	.word	0x41632049
    42e0:	704f206e 	.word	0x704f206e
    42e4:	41206e45 	.word	0x41206e45
    42e8:	436f4c20 	.word	0x436f4c20
    42ec:	6957206b 	.word	0x6957206b
    42f0:	41206854 	.word	0x41206854
    42f4:	644f7320 	.word	0x644f7320
    42f8:	41632041 	.word	0x41632041
    42fc:	0000006e 	.word	0x0000006e
    4300:	696c6f53 	.word	0x696c6f53
    4304:	69726164 	.word	0x69726164
    4308:	69207974 	.word	0x69207974
    430c:	6f6e2073 	.word	0x6f6e2073
    4310:	20612074 	.word	0x20612074
    4314:	2077656e 	.word	0x2077656e
    4318:	6d617266 	.word	0x6d617266
    431c:	726f7765 	.word	0x726f7765
    4320:	0000006b 	.word	0x0000006b
    4324:	61657242 	.word	0x61657242
    4328:	616f6264 	.word	0x616f6264
    432c:	6e696472 	.word	0x6e696472
    4330:	73492067 	.word	0x73492067
    4334:	746f4e20 	.word	0x746f4e20
    4338:	43204120 	.word	0x43204120
    433c:	656d6972 	.word	0x656d6972
    4340:	00000000 	.word	0x00000000
    4344:	2066664f 	.word	0x2066664f
    4348:	6f207962 	.word	0x6f207962
    434c:	6520656e 	.word	0x6520656e
    4350:	726f7272 	.word	0x726f7272
    4354:	72612073 	.word	0x72612073
    4358:	6f632065 	.word	0x6f632065
    435c:	6e6f6d6d 	.word	0x6e6f6d6d
    4360:	00000000 	.word	0x00000000
    4364:	42000800 	.word	0x42000800
    4368:	42000c00 	.word	0x42000c00
    436c:	42001000 	.word	0x42001000
    4370:	42001400 	.word	0x42001400
    4374:	42001800 	.word	0x42001800
    4378:	42001c00 	.word	0x42001c00
    437c:	00000f72 	.word	0x00000f72
    4380:	00000f6e 	.word	0x00000f6e
    4384:	00000f6e 	.word	0x00000f6e
    4388:	00000fd4 	.word	0x00000fd4
    438c:	00000fd4 	.word	0x00000fd4
    4390:	00000f86 	.word	0x00000f86
    4394:	00000f78 	.word	0x00000f78
    4398:	00000f8c 	.word	0x00000f8c
    439c:	00000fc2 	.word	0x00000fc2
    43a0:	00001194 	.word	0x00001194
    43a4:	00001174 	.word	0x00001174
    43a8:	00001174 	.word	0x00001174
    43ac:	00001200 	.word	0x00001200
    43b0:	00001186 	.word	0x00001186
    43b4:	000011a2 	.word	0x000011a2
    43b8:	00001178 	.word	0x00001178
    43bc:	000011b0 	.word	0x000011b0
    43c0:	000011f0 	.word	0x000011f0

000043c4 <CodePage437>:
	...
    4708:	30ff0300 0000f33f 00000000 00000000     ...0?...........
    4718:	00000000 00f00300 0000003f 03000000     ........?.......
    4728:	003f00f0 00000000 00330000 ff033003     ..?.......3..0..
    4738:	00ff3ff0 30030033 3ff0ff03 003300ff     .?..3..0...?..3.
    4748:	00000000 00300000 cc0cc0cc 3ff0ff03     ......0........?
    4758:	c0cc00ff 3000cc0c 00000000 0e000000     .......0........
    4768:	0e308303 0038001c e300e000 010e3380     ..0...8......3..
    4778:	000030c0 00300300 c0000033 0c03330f     .0....0.3....3..
    4788:	03c33030 c330300c 00c0f300 00000000     00...00.........
    4798:	00000000 03003000 000f00c0 00003000     .....0.......0..
	...
    47b4:	03300000 03c0c000 003f00f0 00000000     ..0.......?.....
	...
    47cc:	03003f00 c0c000f0 00000330 00000000     .?......0.......
	...
    47e4:	c0cc00c0 0c00f003 00c00000 cc0c003f     ............?...
    47f4:	00000c00 000c0000 0c00c000 00c00000     ................
    4804:	c000c0ff 00000c00 000c00c0 00000000     ................
	...
    481c:	00c00000 3000000f 00c00000 00000000     .......0........
    482c:	c000000c 00000c00 000c00c0 0c00c000     ................
    483c:	00c00000 0000000c 00000000 00000000     ................
    484c:	00000000 000f00f0 0000f000 00000000     ................
    485c:	00000000 00030000 00000c00 c0000030     ............0...
    486c:	00000300 3000000c 3f000000 03fc0f00     .......0...?....
    487c:	0330f0c0 30300003 f0c00303 3f00fc0f     ..0...00.......?
	...
    4894:	3f300000 f0ff03ff c0000318 00030630     ..0?........0...
    48a4:	00000000 0f30f000 300c0303 0c03c330     ......0....00...
    48b4:	03333030 3f3c3003 00f0c000 c0030300     003..0<?........
    48c4:	ec033c3c 03c33330 0330301c 30300003     <<..03...00...00
    48d4:	c0000307 03000000 00300000 ff3f0003     ..........0...?.
    48e4:	0600c301 003b0030 0700f000 03000000     ....0.;.........
    48f4:	fc30c00f 33303003 30300303 30030333     ..0..003..003..0
    4904:	03c33f30 0000c0fc 00c00300 300c033c     0?..........<..0
    4914:	0c03c330 03c33030 ff0f30cc 00c03f00     0...00...0...?..
    4924:	00c00300 3003003c 03c03000 0f300003     ....<..0.0....0.
    4934:	30f00003 00000300 f3000000 033c0fc0     ...0..........<.
    4944:	c330300c 30300c03 300c03c3 f3003c0f     .00...00...0.<..
    4954:	000000c0 fc0f00ff 30e03003 300c03c3     .........0.0...0
    4964:	0c03c330 00c33f30 000000f0 00000000     0...0?..........
    4974:	00000000 f0000000 000f0ff0 0000f0f0     ................
	...
    4994:	0f0fc0f0 00f0f000 0000c000 00000000     ................
    49a4:	03033000 0c0c3000 03c0c000 00330030     .0...0......0.3.
    49b4:	0c00c000 00000000 30030033 03003300     ........3..0.3..
    49c4:	00330030 33003003 00300300 00000033     0.3..0.3..0.3...
    49d4:	00000000 000c00c0 33003003 000c0c00     .........0.3....
    49e4:	0330c0c0 00300003 00c00000 3003000c     ..0...0........0
    49f4:	03003300 f330300f 3c000003 00c00000     .3...00....<....
    4a04:	ff000000 03f00f00 3333301e 30303303     .........033.300
    4a14:	300003c3 ff00ff3f 000000c0 ff03f00f     ...0?...........
    4a24:	1c00f300 00030330 f300301c 00ff0300     ....0....0......
    4a34:	0000f00f 0fc0f300 300c033c 0c03c330     ........<..00...
    4a44:	03c33030 ff3ff0ff 00300003 c0c00000     00....?...0.....
    4a54:	00030c0c 03033030 03303000 0ff0c003     ....00...00.....
    4a64:	003f00fc 1e000000 00f00300 0f3cc0e1     ..?...........<.
    4a74:	30300003 f0ff0303 0003ff3f 03000030     ..00....?...0...
    4a84:	03303000 30300003 300c03c3 0c03c330     .00...00...00...
    4a94:	03ff3f30 0000f0ff 30000003 00000300     0?.........0....
    4aa4:	0c03c030 03c03000 ff3f000c 00f0ff03     0....0....?.....
    4ab4:	c0c30000 03033c0c 03333030 03303000     .....<..003..00.
    4ac4:	0ff0c003 003f00fc ff030000 00ff3ff0     ......?......?..
    4ad4:	c000000c 00000c00 000c00c0 ff03ff3f     ............?...
    4ae4:	000000f0 00000000 30300003 f0ff0303     ..........00....
    4af4:	0003ff3f 00033030 00000000 30000003     ?...00.........0
    4b04:	c0ff0300 0003ff3f 00033030 0f003000     ....?...00...0..
    4b14:	00c00000 30000300 c0000330 000c0cc0     .......00.......
    4b24:	30030033 3f000c00 f0ff03ff 00000000     3..0...?........
    4b34:	00030030 03003000 00300000 30000003     0....0....0....0
    4b44:	ff03ff3f 030000f0 ff3ff0ff 0700c001     ?.........?.....
    4b54:	003c0000 c0010007 03ff3f00 0000f0ff     ..<......?......
    4b64:	3ff0ff03 c00100ff 1c007000 01000700     ...?.....p......
    4b74:	ff3f00c0 00f0ff03 c0ff0000 8003fc0f     ..?.............
    4b84:	03033070 03303000 0f708003 c0ff00fc     p0...00...p.....
    4b94:	f0000000 03000f00 c030000c 30000c03     ..........0....0
    4ba4:	000c03c0 ff03ff3f 000000f0 f30f30ff     ....?........0..
    4bb4:	30c00003 3003033f 00030330 00ff3f30     ...0?..00...0?..
    4bc4:	0000c0ff 0f30f000 c00f030f 0c03f030     ......0.....0...
    4bd4:	03c03000 ff3f000c 00f0ff03 c0c30000     .0....?.........
    4be4:	0c033c0c 03c33030 c330300c 3f300c03     .<..00...00...0?
    4bf4:	c0f000cf 00030000 03003000 00300000     .........0....0.
    4c04:	30f0ff03 00000300 00030030 03000000     ...0....0.......
    4c14:	fc3fc0ff 00300000 30000003 00000300     ..?...0....0....
    4c24:	03fc3f30 0000c0ff 3f00c003 c03f00c0     0?.........?..?.
    4c34:	00003e00 003e0030 c03fc03f 0000c003     .>..0.>.?.?.....
    4c44:	e0ff0300 0000ff3f 003e0030 3e00000f     ....?...0.>....>
    4c54:	3f300000 e0ff03ff 00030000 000f3c30     ..0?........0<..
    4c64:	b003c0f3 03001e00 c0f30070 00030f3c     ........p...<...
    4c74:	03000030 003c0000 0300f000 f00f00e0     0.....<.........
    4c84:	f000e003 03003c00 00000000 3c300003     .....<........0<
    4c94:	30e00303 0c038333 03733030 1f303003     ...03...00s..00.
    4ca4:	00f00003 00000000 00030000 03033030     ............00..
    4cb4:	ff3f3000 00f0ff03 00000000 00000000     .0?.............
    4cc4:	000f0030 f000c003 0f003c00 00c00300     0........<......
    4cd4:	00000030 00000000 00000000 3f000000     0..............?
    4ce4:	f0ff03ff 00030330 00033030 00000000     ....0...00......
    4cf4:	03000c00 00f000c0 0003001c 00001c00     ................
    4d04:	c00300f0 00000c00 30000000 00000300     ...........0....
    4d14:	00030030 03003000 00300000 30000003     0....0....0....0
	...
    4d2c:	000f0030 3000c003 00000300 00000000     0......0........
    4d3c:	00000000 f303f00f 03303300 30330033     .........30.3.30
    4d4c:	33003303 000c0030 0000c000 03c00f00     .3.30...........
    4d5c:	303000cf 30000303 00030330 ff3fe01c     ..00...00.....?.
    4d6c:	00f0ff03 300c0000 3000c300 00030330     .......0...00...
    4d7c:	03033030 03303000 c00f00ff ff030000     00...00.........
    4d8c:	00ff3ff0 0303c00c 03303000 30300003     .?.......00...00
    4d9c:	0f00ff03 000000c0 f300000f 03303300     .............30.
    4dac:	30330033 33003303 00ff0330 0000c00f     3.30.3.30.......
    4dbc:	0c00c000 00000300 0c03c030 00ff0f00     ........0.......
    4dcc:	c000f0ff 00000c00 0c300000 0cc00003     ..........0.....
    4ddc:	30f3033f 33033333 03333330 cc0cf0ff     ?..033.3033.....
    4dec:	0f000000 00ff00f0 00030030 03003000     ........0....0..
    4dfc:	000c0000 ff03ff3f 000000f0 00000000     ....?...........
    4e0c:	00300000 f03f0303 3000ff33 00030030     ..0...?.3..00...
	...
    4e24:	fc3f0300 00f0ff33 30000003 03000300     ..?.3......0....
    4e34:	003c00f0 00000000 60000300 008c0330     ..<........`0...
    4e44:	7000c01e 3f000300 f0ff03ff 00000000     ...p...?........
    4e54:	00000000 ff3f3000 30f0ff03 30000303     .....0?....0...0
	...
    4e6c:	ff03f00f 00003800 000700c0 0c007000     .....8.......p..
    4e7c:	00ff0300 0000f03f 00f00f00 003000ff     ....?.........0.
    4e8c:	30000003 00000300 ff00003c 00f03f00     ...0....<....?..
    4e9c:	00000000 3f00fc00 000303f0 03033030     .......?....00..
    4eac:	03303000 c00f00ff 0f000000 00f00000     .00.............
    4ebc:	0c03c030 03c03000 c030000c 3f00f000     0....0....0....?
    4ecc:	000000ff f000ff3f 03c03000 c030000c     ....?....0....0.
    4edc:	30000c03 00f000c0 0000000f 01000c00     ...0............
    4eec:	003000c0 30000003 00c00100 ff00000c     ..0....0........
    4efc:	00f03f00 c0000000 33000c00 00330330     .?.........30.3.
    4f0c:	33033033 03303300 300c00f3 00000000     30.3.30....0....
    4f1c:	000c0000 0303c030 3f303000 c0ff03fc     ....0....00?....
    4f2c:	30000003 00000000 ff033000 00c03f00     ...0.....0...?..
    4f3c:	30000003 00000300 00ff0330 0000c03f     ...0....0...?...
    4f4c:	00001c00 800700e0 00001e00 001e00f0     ................
    4f5c:	e0008007 00001c00 c03f0000 0000ff03     ..........?.....
    4f6c:	001c0030 1c000003 03300000 c03f00ff     0.........0...?.
	...
    4f84:	ce013030 00800700 80070030 3000ce01     00......0......0
    4f94:	00000030 00000000 03fc3f00 c700f0ff     0........?......
    4fa4:	00300c00 f0fc03c7 00000c3f 03303000     ..0.....?....00.
    4fb4:	303c00c3 33003303 000f0330 0303f030     ..<0.3.30...0...
    4fc4:	00303000 30000300 00030330 00333330     .00....00...033.
    4fd4:	c000c0cc 00000c00 00000000 00000000     ................
	...
    4fec:	3ff0ff03 000000ff 00000000 00000000     ...?............
	...
    5004:	c0cc00c0 33033333 03033030 00003000     ....33.300...0..
    5014:	3f00c003 00300000 c0000007 03003800     ...?..0......8..
    5024:	003f0000 0000f000 00000000 00000000     ..?.............
	...
    5044:	c0000000 030c0cc0 03303000 303c0003     .........00...<0
    5054:	f0c04303 3f00fc0f 00000000 ff033000     .C.....?.....0..
    5064:	18c0bf01 30000003 80010300 00ff1b30     .......0....0...
    5074:	0000c03f 00000f00 303301f3 b300331b     ?.........30.3..
    5084:	00330330 ff033033 00c00f00 f00f0000     0.3.30..........
    5094:	b300f303 00331330 330330b3 00303300     ....0.3..0.3.30.
    50a4:	c000000c 0f000000 01f31bf0 330330b3     .............0.3
    50b4:	1b303300 30b30133 00000c00 000000c0     .30.3..0........
    50c4:	f303f00f 0b303300 30b30133 33003313     .....30.3..0.3.3
    50d4:	000c0030 0000c000 03f00f00 303303f3     0.............30
    50e4:	b304334b 00333330 0c003033 00c00000     K3..033.30......
    50f4:	300c0000 3000c300 c0030330 03033430     ...0...00...04..
    5104:	03303000 c00f00ff 0f000000 00f30000     .00.............
    5114:	330b3033 0b303301 30330033 0f00ff03     30.3.30.3.30....
    5124:	000000c0 f300000f 1b30b301 30330033     ..........0.3.30
    5134:	b3013303 00ff1b30 0000c00f 00000f00     .3..0...........
    5144:	303300f3 b3003303 01331b30 ff033033     ..30.3..0.3.30..
    5154:	00c00f00 00000000 00030000 00033030     ............00..
    5164:	ff03f03f 30303003 00000003 00000000     ?....000........
    5174:	00000000 03003000 13f0bf00 30b000ff     .....0.........0
    5184:	00000300 00000000 00000000 00300000     ..............0.
    5194:	f0bf0003 3001ff1b 00030030 00000000     .......00.......
    51a4:	c3f00f00 00f30cff 0303301c 0c301c00     .........0....0.
    51b4:	ffc300f3 00f00f00 f00f0000 f304ff03     ................
    51c4:	0b30bc00 30bc0003 0300f304 f00f00ff     ..0....0........
    51d4:	00030000 0b033030 c3b03000 70300c07     ....00...0....0p
    51e4:	300c03c3 ff03ff3f 000000f0 b303303f     ...0?.......?0..
    51f4:	03303100 f01f00be 3300f303 003f0330     .10........30.?.
    5204:	0000c001 30300c03 f0ff03c3 0303ff3f     ......00....?...
    5214:	00301c00 ff0300f3 00f00f00 00000000     ..0.............
    5224:	3f00fc00 01030bf0 030b3030 03303000     ...?....00...00.
    5234:	c00f00ff 00000000 01fc0000 031bf0bf     ................
    5244:	03303000 30b00103 0f00ff1b 000000c0     .00....0........
    5254:	fc000000 03f03f00 30b00003 3001031b     .....?.....0...0
    5264:	00ff0330 0000c00f 03300000 c03f00ff     0.........0...?.
    5274:	00010308 00030830 ff033000 00c03f00     ....0....0...?..
    5284:	30000000 3f00ff03 010308c0 03103080     ...0...?.....0..
    5294:	03300000 c03f00ff 00000000 01000000     ..0...?.........
    52a4:	ff1bfcbf 00c700f0 c780310c 3ff0fc1b     .........1.....?
    52b4:	0000000c fc07c07f d870c00d 30800103     ..........p....0
    52c4:	c00d03d8 00fc0770 0000c07f dfc0ff01     ....p...........
    52d4:	30000cfc 00000300 0c03c030 fc1f3000     ...0....0....0..
    52e4:	00c0ff01 00330000 c0003003 070c0cc0     ......3..0......
    52f4:	0c0cf8de 0fc0c000 003f00fc 00000000     ..........?.....
    5304:	01030c30 03303080 38300603 f0ff0163     0....00...08c...
    5314:	0600ff0f 02000030 00380000 0340e200     ....0.....8...@.
    5324:	f00f00a4 e200a403 02003840 00000000     ........@8......
    5334:	0e00e000 30190300 1b039331 03be31f0     .......01....1..
    5344:	ff3f0018 00f0ff03 00e00000 8c03001e     ..?.............
    5354:	03c03800 fc0f00fc 00fcff00 000cc0cf     .8..............
    5364:	0f000000 01f303f0 331b3033 0330b300     ........30.3..0.
    5374:	30330033 00000c00 000000c0 00000000     3.30............
    5384:	20300000 f03f0303 3000ff13 00030030     ..0 ..?....00...
	...
    539c:	f03f00fc b0010313 00030b30 ff033030     ..?.....0...00..
    53ac:	00c00f00 30000000 3f00ff03 010310c0     .......0...?....
    53bc:	03083080 03300000 c03f00ff 0f000000     .0....0...?.....
    53cc:	01ff08f0 00130030 0b00b000 003c0100     ....0.........<.
    53dc:	3f00ff00 030000f0 ff3ff0ff 80c00004     ...?......?.....
    53ec:	000c0830 c0040043 03ffbf00 0000f0ff     0...C...........
    53fc:	00000800 00e80180 a802802a 02802a00     ........*....*..
    540c:	80000068 00000800 00080000 c8018000     h...............
    541c:	02803600 80360028 0000c801 00080080     .6..(.6.........
    542c:	00000000 c0030030 f00c0c00 000ccfc0     ....0...........
    543c:	cc00c00c 00000300 00000030 c000000c     ........0.......
    544c:	00000c00 000c00c0 0c00c000 00f00000     ................
    545c:	0000000f 00000f00 000c00f0 0c00c000     ................
    546c:	00c00000 c000000c 00000c00 000c0000     ................
    547c:	0d40cc00 47db7ee4 cc009ced 00440cc0     ..@..~.G......D.
    548c:	000c00c0 0c000000 00c10000 cf7efe0c     ..............~.
    549c:	0010ece7 f00d00c1 0c00df00 00000000     ................
	...
    54b4:	fccf0000 00c0ff0c 00000000 00000000     ................
    54c4:	00000000 80200000 0a001001 00480200     ...... .......H.
    54d4:	a0000011 00000400 00040000 1100a000     ................
    54e4:	00480200 1001000a 00802000 00000000     ..H...... ......
    54f4:	08220882 88200820 82208220 82088200     ..". . . . .....
    5504:	20082208 20882008 22499282 24492449     .". . . ..I"I$I$
    5514:	24922499 49924492 49224992 99244924     .$.$.D.I.I"I$I$.
    5524:	b66d9224 b6dbb6dd 6ddb66db 6dbb6ddb     $.m......f.m.m.m
    5534:	ddb66db6 dbb6dbb6 006ddb66 00000000     .m......f.m.....
    5544:	00000000 0f000000 0000ffff 00000000     ................
	...
    5564:	00ffff0f 00040040 04004000 00000000     ....@....@......
	...
    557c:	ffff0f00 0a00a000 00a00000 0000000a     ................
	...
    5594:	00f0ffff f0ffff00 40000004 00000400     ...........@....
	...
    55ac:	f07f0000 7f000004 000004f0 00040040     ............@...
	...
    55c8:	00ff0f00 000a00a0 0a00a000 00000000     ................
    55d8:	00000000 ff000000 0000f0ff 0af0bfff     ................
    55e8:	00a00000 0000000a 00000000 00000000     ................
    55f8:	00f0ffff f0ffff00 00000000 00000000     ................
	...
    5610:	f0ff0000 bf000008 00000af0 000a00a0     ................
	...
    5628:	e0ff0000 ff000200 000a00a0 0a00a000     ................
	...
    5640:	ff000000 000400c0 0400c0ff 00400000     ..............@.
    5650:	00000004 00000000 00000000 fe0f0000     ................
    5660:	00a00000 a000000a 00000a00 00000000     ................
	...
    5678:	4000ff07 00000400 00040040 04004000     ...@....@....@..
    5688:	00400000 40000004 0000fc0f 00000000     ..@....@........
    5698:	00000000 00400000 40000004 00000400     ......@....@....
    56a8:	00fc0f40 04004000 00400000 40000004     @....@....@....@
    56b8:	00000400 00040040 07004000 004000ff     ....@....@....@.
    56c8:	40000004 00000400 00040040 04004000     ...@....@....@..
    56d8:	0f400000 0000ffff 00000000 00000000     ..@.............
    56e8:	04004000 00400000 40000004 00000400     .@....@....@....
    56f8:	00040040 04004000 00400000 40000004     @....@....@....@
    5708:	00000400 ffff0f40 04004000 00400000     ....@....@....@.
    5718:	a0000004 00000a00 000a00a0 ff0fa000     ................
    5728:	000000ff 00000000 00000000 00040040     ............@...
    5738:	04004000 f0ffff00 ffff0000 000000f0     .@..............
    5748:	00000000 0a00a000 00a00000 a0ff000a     ................
    5758:	ff000200 000000e0 00000000 00a00000     ................
    5768:	a000000a 00000a00 0008f0bf 00f0ff00     ................
    5778:	00000000 a0000000 00000a00 000a00a0     ................
    5788:	0200a0ff 00a0ff00 a000000a 00000a00     ................
    5798:	000a00a0 0a00a000 f0bf0000 bf000008     ................
    57a8:	00000af0 000a00a0 0a00a000 00a00000     ................
    57b8:	bfff000a ff0000f0 0000f0ff 00000000     ................
    57c8:	00a00000 a000000a 00000a00 000a00a0     ................
    57d8:	0a00a000 00a00000 a000000a 00000a00     ................
    57e8:	000a00a0 00f0bfff f0bfff00 a000000a     ................
    57f8:	00000a00 000a00a0 0a00a000 0fa00000     ................
    5808:	a00000fa 00000a00 000a00a0 04004000     .............@..
    5818:	00400000 c0ff0004 ff000400 000400c0     ..@.............
    5828:	04004000 00a00000 a000000a 00000a00     .@..............
    5838:	ff0b00a0 0a00a000 00a00000 4000000a     ...............@
    5848:	00000400 00040040 04f07f00 f07f0000     ....@...........
    5858:	40000004 00000400 00040040 04004000     ...@....@....@..
    5868:	00c0ff00 c0ff0004 00000000 00000000     ................
    5878:	0a00a000 00a00000 a000000a 0000fe0f     ................
	...
    5890:	00a00000 a000000a 00000a00 ff0f00a0     ................
	...
    58a8:	40000000 00000400 00040040 04f07f00     ...@....@.......
    58b8:	f07f0000 00000000 00000000 00040040     ............@...
    58c8:	04004000 f0ffff00 ffff0004 000004f0     .@..............
    58d8:	00040040 0a00a000 00a00000 a000000a     @...............
    58e8:	00ffff0f 000a00a0 0a00a000 00000000     ................
	...
    5900:	00fc0f00 04004000 00400000 40000004     .....@....@....@
    5910:	00000400 00040040 07004000 000000ff     ....@....@......
    5920:	00000000 ff000000 ffffffff ffffffff     ................
    5930:	ffffffff ffffffff ffffffff ffffffff     ................
    5940:	07f07f00 f07f00ff 7f00ff07 00ff07f0     ................
    5950:	ff07f07f 07f07f00 000000ff 00000000     ................
    5960:	00000000 ffff0f00 ffffffff ffffffff     ................
    5970:	ffffffff ffffffff ffffffff ffffffff     ................
    5980:	000000ff 00000000 ff000000 00fc0fc0     ................
    5990:	fc0fc0ff 0fc0ff00 c0ff00fc ff00fc0f     ................
    59a0:	00fc0fc0 08000000 00420010 4200c003     ..........B....B
    59b0:	00300c00 300c00c3 03003c00 000000c0     ..0....0.<......
    59c0:	1c000000 0d707300 108c00e3 ff00c108     .....sp.........
    59d0:	00ff07f0 00001000 0f000000 00f80080     ................
    59e0:	c000000c 00010c00 ff0ff0ff 00108000     ................
    59f0:	10080000 0f00ff00 00c000f0 c000000c     ................
    5a00:	00f00f00 100800ff 80030000 03033070     ............p0..
    5a10:	03303000 31300c03 303303e3 c0031b36     .00...01..306...
    5a20:	000000f0 fc030030 03f03f00 30300003     ....0....?....00
    5a30:	30000303 00ff0330 0000c00f 03300000     ...00.........0.
    5a40:	c03f00ff 00000300 00030030 ff033000     ..?.....0....0..
    5a50:	00fe3fe0 000c0000 3800c001 00000300     .?.........8....
    5a60:	ff00f03f 03001c00 00300080 00000000     ?.........0.....
    5a70:	80fc0400 0307e85f 07387080 38708003     ...._....p8...p8
    5a80:	4f80fe05 000000c8 fc0f003f 30f0cc03     ...O....?......0
    5a90:	300c03c3 cc03c330 00fc0ff0 0000003f     ...00.......?...
    5aa0:	1f90ff00 f08103ff 00030030 03003000     ........0....0..
    5ab0:	ff1ff081 0090ff00 00000300 3f03fc30     ............0..?
    5ac0:	030337f0 033b30f0 03303003 c00f00ff     .7...0;..00.....
    5ad0:	0f000000 00040180 04012020 01800f00     ........  ......
    5ae0:	20200004 0f000401 00000080 0607c05f     ..  ........_...
    5af0:	06203800 104700c3 20001b06 000703e0     .8 ...G.... ....
    5b00:	0000d01f 00000000 30000300 0c03c330     ...........00...
    5b10:	03c33030 fc0ff0cc 00003f00 fc3f0000     00.......?....?.
    5b20:	c0c0ff03 00000c00 000c00c0 0300c000     ................
    5b30:	fc3fc0ff 33000000 00330330 33033033     ..?....30.3.30.3
    5b40:	03303300 30330033 33003303 00000030     .30.3.30.3.30...
    5b50:	c100100c 00100c00 d0ff00c1 0c00c100     ................
    5b60:	00c10010 0000100c 00000000 060c60c0     .............`..
    5b70:	33603003 600c0c06 0330c6c0 00360063     .0`3...`..0.c.6.
    5b80:	00000000 00630330 600c0c36 3003c6c0     ....0.c.6..`...0
    5b90:	00063360 060c60c0 00060000 0800c000     `3...`..........
    5ba0:	00c00000 00ffff07 00000000 00000000     ................
	...
    5bbc:	f8ff0f00 00600000 10000001 00000600     ......`.........
    5bcc:	00000c00 000c00c0 cc00c000 00cc0cc0     ................
    5bdc:	c000000c 00000c00 00330000 19009801     ..........3.....
    5bec:	00980180 60060033 06006600 00330060     ....3..`.f..`.3.
	...
    5c04:	000c0000 12002001 00c00000 00000000     ..... ..........
	...
    5c20:	e0000000 00000e00 000000e0 00000000     ................
	...
    5c3c:	00030030 00000000 10000000 00000100     0...............
    5c4c:	00010010 00000e00 3c00001c 00700000     ...........<..p.
    5c5c:	00020038 e0010000 06007e00 00600000     8........~....`.
    5c6c:	3e000006 00e00700 00000000 00000000     ...>............
    5c7c:	80380000 6e00c807 00780680 18028063     ..8....n..x.c...
	...
    5c9c:	0f00ff00 00ff00f0 ff00f00f 00f00f00     ................
	...
    5cc4:	ffffffff 677537ff 71312c6a 38ffffff     .....7ugj,1q...8
    5cd4:	ff6b6869 7aff7732 6f3039ff 65332e6c     ihk.2w.z.90ol.3e
    5ce4:	ffff7861 2f3b702d 63737234 5b3dff20     ax..-p;/4rsc .=[
    5cf4:	7435ff27 ff6e7664 5cff5d27 62667936     '.5tdvn.'].\6yfb
    5d04:	ffffff6d 0000ffff ffffffff 475526ff     m............&UG
    5d14:	51213c4a 2affffff ff4b4849 5aff5740     J<!Q...*IHK.@W.Z
    5d24:	4f2928ff 45233e4c ffff5841 3f3a505f     .()OL>#EAX.._P:?
    5d34:	43535224 7b2bff20 5425ff22 ff4e5644     $RSC .+{".%TDVN.
    5d44:	7cff7d7e 4246595e ffffff4d 0000ffff     ~}.|^YFBM.......
    5d54:	77617244 2c692509 2c692520 2c692520     Draw.%i, %i, %i,
    5d64:	0a692520 0000000d                        %i.....

00005d6c <kb_col>:
    5d6c:	00010000 00020000 00040000 00080000     ................
    5d7c:	00100000 00200000 08000000              ...... .....

00005d88 <kb_col_index>:
    5d88:	00000010 00000011 00000012 00000013     ................
    5d98:	00000014 00000015 0000001b              ............

00005da4 <kb_row>:
    5da4:	00000004 00000008 00000010 00000020     ............ ...
    5db4:	00000040 00000080 00000400 00000800     @...............
    5dc4:	00001000 00002000                       ..... ..

00005dcc <kb_row_index>:
    5dcc:	00000002 00000003 00000004 00000005     ................
    5ddc:	00000006 00000007 0000000a 0000000b     ................
    5dec:	0000000c 0000000d 64616552 2c692509     ........Read.%i,
    5dfc:	2c692520 2c692520 0a692520 0000000d      %i, %i, %i.....
    5e0c:	7466656c 00000d0a                       left....

00005e14 <beelzebub.12955>:
    5e14:	2e002d00 44003200 88005300 f300b600     .-...2.D.S......
    5e24:	64012201 d4019201 08020702 5f023402     .".d.........4._
    5e34:	94027802 bb02a602 db02ca02 f902e802     .x..............
    5e44:	7f031f03                                ....

00005e48 <belial.12952>:
    5e48:	f0f0f0f0 b0b0b0f0 b1b6b6b6 b7b7b1b1     ................
    5e58:	b2b2b2b7 bfb8b8b8 b9b3b3b3 b5b5b9b9     ................
    5e68:	babac2b5 bcbcbcba bebdbdbd f0f0f0be     ................
    5e78:	b1b1f0f0 b8b7b7b6 bcb8b8b8 c9c9bcbc     ................
    5e88:	35c9c9c9 0000363a                       ...5:6..

00005e90 <lucifer.12954>:
    5e90:	0852aa55 0d0d0d01 0d343434 34340d0d     U.R.....444...44
    5ea0:	00000034 01242424 340f0f0f 08083434     4...$$$....444..
    5eb0:	24240308 00780024 00007800 52aa5589     ..$$$.x..x...U.R
    5ec0:	00cc0008 01707005 02030303 02d00000     .....pp.........
    5ed0:	00505050 00000055                       PPP.U...

00005ed8 <mulciber.12953>:
    5ed8:	03020100 02010004 00020100 01000201     ................
    5ee8:	02010002 00020100 01000201 01000002     ................
    5ef8:	02010000 00020100 01000201 03020100     ................
    5f08:	00000004 01000100 01000302 02010002     ................
    5f18:	00000403 00000000 69726553 4f206c61     ........Serial O
    5f28:	3639204b 38203030 0d0a314e 00000000     K 9600 8N1......

00005f38 <_global_impure_ptr>:
    5f38:	2000015c                                \.. 

00005f3c <__sf_fake_stderr>:
	...

00005f5c <__sf_fake_stdin>:
	...

00005f7c <__sf_fake_stdout>:
	...
    5f9c:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    5fac:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    5fbc:	31300046 35343332 39383736 64636261     F.0123456789abcd
    5fcc:	00006665                                ef..

00005fd0 <_init>:
    5fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5fd2:	46c0      	nop			; (mov r8, r8)
    5fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5fd6:	bc08      	pop	{r3}
    5fd8:	469e      	mov	lr, r3
    5fda:	4770      	bx	lr

00005fdc <__init_array_start>:
    5fdc:	000000dd 	.word	0x000000dd

00005fe0 <_fini>:
    5fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5fe2:	46c0      	nop			; (mov r8, r8)
    5fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5fe6:	bc08      	pop	{r3}
    5fe8:	469e      	mov	lr, r3
    5fea:	4770      	bx	lr

00005fec <__fini_array_start>:
    5fec:	000000b5 	.word	0x000000b5
