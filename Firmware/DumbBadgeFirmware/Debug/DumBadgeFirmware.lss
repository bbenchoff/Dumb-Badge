
DumBadgeFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008708  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000210  20000000  00008708  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00003428  20000400  00008c00  00020400  2**10
                  ALLOC
  3 .stack        00002000  20003828  0000c028  00020400  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002023a  2**0
                  CONTENTS, READONLY
  6 .debug_info   0003e540  00000000  00000000  00020293  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005de3  00000000  00000000  0005e7d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000783d  00000000  00000000  000645b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000918  00000000  00000000  0006bdf3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000ba8  00000000  00000000  0006c70b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001fc03  00000000  00000000  0006d2b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00015528  00000000  00000000  0008ceb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00090c48  00000000  00000000  000a23de  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001f54  00000000  00000000  00133028  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
	// Keep the default device state after reset
	SystemCoreClock = __SYSTEM_CLOCK;
       0:	28 58 00 20 1d 37 00 00 19 37 00 00 19 37 00 00     (X. .7...7...7..
	...
	config->stopbits         = USART_STOPBITS_1;
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
	config->baudrate         = 9600;
	config->receiver_enable  = true;
	config->transmitter_enable = true;
	config->clock_polarity_inverted = false;
      2c:	19 37 00 00 00 00 00 00 00 00 00 00 19 37 00 00     .7...........7..
	config->use_external_clock = false;
	config->ext_clock_freq   = 0;
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
	config->generator_source = GCLK_GENERATOR_0;
      3c:	c1 4a 00 00 19 37 00 00 19 37 00 00 19 37 00 00     .J...7...7...7..

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
      4c:	19 37 00 00 19 37 00 00 19 37 00 00 19 37 00 00     .7...7...7...7..
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
      5c:	19 37 00 00 19 37 00 00 e9 29 00 00 f9 29 00 00     .7...7...)...)..
	usart_get_config_defaults(&config_usart);

	config_usart.baudrate    = SERCOMBAUD;
	config_usart.mux_setting = SERCOMMUX;
	config_usart.pinmux_pad0 = SERCOMPAD0;
	config_usart.pinmux_pad1 = SERCOMPAD1;
      6c:	09 2a 00 00 19 2a 00 00 29 2a 00 00 39 2a 00 00     .*...*..)*..9*..
	config_usart.pinmux_pad2 = SERCOMPAD2;
	config_usart.pinmux_pad3 = SERCOMPAD3;

	while (usart_init(&usart_instance,	 SERCOMMODULE, &config_usart) != STATUS_OK) { }
      7c:	19 37 00 00 19 37 00 00 19 37 00 00 19 37 00 00     .7...7...7...7..
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
      8c:	19 37 00 00 19 37 00 00 19 37 00 00 19 37 00 00     .7...7...7...7..
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	if (usart_init(module, hw, config) == STATUS_OK) {
      9c:	51 25 00 00 19 37 00 00 19 37 00 00 19 37 00 00     Q%...7...7...7..
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
      ac:	19 37 00 00 00 00 00 00                             .7......

000000b4 <__do_global_dtors_aux>:
	setbuf(stdin, NULL);
      b4:	b510      	push	{r4, lr}
      b6:	4c05      	ldr	r4, [pc, #20]	; (cc <__do_global_dtors_aux+0x18>)
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
      b8:	7823      	ldrb	r3, [r4, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
      ba:	b933      	cbnz	r3, ca <__do_global_dtors_aux+0x16>
      bc:	4b04      	ldr	r3, [pc, #16]	; (d0 <__do_global_dtors_aux+0x1c>)
      be:	b113      	cbz	r3, c6 <__do_global_dtors_aux+0x12>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
      c0:	4804      	ldr	r0, [pc, #16]	; (d4 <__do_global_dtors_aux+0x20>)
      c2:	f3af 8000 	nop.w
      c6:	2301      	movs	r3, #1
      c8:	7023      	strb	r3, [r4, #0]
      ca:	bd10      	pop	{r4, pc}
      cc:	20000400 	.word	0x20000400
	return (usart_hw->SYNCBUSY.reg);
      d0:	00000000 	.word	0x00000000
	while (usart_is_syncing(module)) {
      d4:	00008708 	.word	0x00008708

000000d8 <frame_dummy>:

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
      d8:	4b0c      	ldr	r3, [pc, #48]	; (10c <frame_dummy+0x34>)
      da:	b143      	cbz	r3, ee <frame_dummy+0x16>
      dc:	480c      	ldr	r0, [pc, #48]	; (110 <frame_dummy+0x38>)

	stdio_serial_init(&usart_instance, SERCOMMODULE, &config_usart);
	usart_enable(&usart_instance);
}
      de:	490d      	ldr	r1, [pc, #52]	; (114 <frame_dummy+0x3c>)
      e0:	b510      	push	{r4, lr}
      e2:	f3af 8000 	nop.w
      e6:	480c      	ldr	r0, [pc, #48]	; (118 <frame_dummy+0x40>)
      e8:	6803      	ldr	r3, [r0, #0]
      ea:	b923      	cbnz	r3, f6 <frame_dummy+0x1e>
      ec:	bd10      	pop	{r4, pc}
      ee:	480a      	ldr	r0, [pc, #40]	; (118 <frame_dummy+0x40>)
      f0:	6803      	ldr	r3, [r0, #0]
      f2:	b933      	cbnz	r3, 102 <frame_dummy+0x2a>
      f4:	4770      	bx	lr
      f6:	4b09      	ldr	r3, [pc, #36]	; (11c <frame_dummy+0x44>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0f7      	beq.n	ec <frame_dummy+0x14>
      fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     100:	4718      	bx	r3
     102:	4b06      	ldr	r3, [pc, #24]	; (11c <frame_dummy+0x44>)
     104:	2b00      	cmp	r3, #0
     106:	d0f5      	beq.n	f4 <frame_dummy+0x1c>
     108:	4718      	bx	r3
     10a:	bf00      	nop
     10c:	00000000 	.word	0x00000000
     110:	00008708 	.word	0x00008708
     114:	20000404 	.word	0x20000404
     118:	00008708 	.word	0x00008708
     11c:	00000000 	.word	0x00000000

00000120 <ring_init>:
	cbuf->full = false;
	cbuf->tail = (cbuf->tail + 1) % cbuf->max;
}

cbuf_handle_t ring_init(uint8_t* buffer, uint16_t size)
{
     120:	b538      	push	{r3, r4, r5, lr}
     122:	4605      	mov	r5, r0
     124:	460c      	mov	r4, r1
	cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
     126:	200c      	movs	r0, #12
     128:	4b04      	ldr	r3, [pc, #16]	; (13c <ring_init+0x1c>)
     12a:	4798      	blx	r3

	cbuf->buffer = buffer;
     12c:	6005      	str	r5, [r0, #0]
	cbuf->max = size;
     12e:	8104      	strh	r4, [r0, #8]
	return cbuf;
}

void ring_reset(cbuf_handle_t cbuf)
{
	cbuf->head = 0;
     130:	2200      	movs	r2, #0
     132:	8082      	strh	r2, [r0, #4]
	cbuf->tail = 0;
     134:	80c2      	strh	r2, [r0, #6]
	cbuf->full = false;
     136:	7282      	strb	r2, [r0, #10]
}
     138:	bd38      	pop	{r3, r4, r5, pc}
     13a:	bf00      	nop
     13c:	00004f59 	.word	0x00004f59

00000140 <ring_reset>:
	cbuf->head = 0;
     140:	2300      	movs	r3, #0
     142:	8083      	strh	r3, [r0, #4]
	cbuf->tail = 0;
     144:	80c3      	strh	r3, [r0, #6]
	cbuf->full = false;
     146:	7283      	strb	r3, [r0, #10]
     148:	4770      	bx	lr

0000014a <ring_put>:
}

void ring_put(cbuf_handle_t cbuf, uint8_t data)
{
	cbuf->buffer[cbuf->head] = data;
     14a:	8882      	ldrh	r2, [r0, #4]
     14c:	6803      	ldr	r3, [r0, #0]
     14e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	if(cbuf->full)
     152:	7a83      	ldrb	r3, [r0, #10]
     154:	b13b      	cbz	r3, 166 <ring_put+0x1c>
		cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     156:	88c3      	ldrh	r3, [r0, #6]
     158:	3301      	adds	r3, #1
     15a:	8901      	ldrh	r1, [r0, #8]
     15c:	fb93 f2f1 	sdiv	r2, r3, r1
     160:	fb01 3312 	mls	r3, r1, r2, r3
     164:	80c3      	strh	r3, [r0, #6]
	cbuf->head = (cbuf->head + 1) % cbuf->max;
     166:	8883      	ldrh	r3, [r0, #4]
     168:	1c5a      	adds	r2, r3, #1
     16a:	8901      	ldrh	r1, [r0, #8]
     16c:	fb92 f3f1 	sdiv	r3, r2, r1
     170:	fb01 2313 	mls	r3, r1, r3, r2
     174:	b29b      	uxth	r3, r3
     176:	8083      	strh	r3, [r0, #4]
	cbuf->full = (cbuf->head == cbuf->tail);
     178:	88c2      	ldrh	r2, [r0, #6]
     17a:	429a      	cmp	r2, r3
     17c:	bf14      	ite	ne
     17e:	2300      	movne	r3, #0
     180:	2301      	moveq	r3, #1
     182:	7283      	strb	r3, [r0, #10]
     184:	4770      	bx	lr

00000186 <ring_empty>:
	return r;
}

bool ring_empty(cbuf_handle_t cbuf)
{
	return (!cbuf->full && (cbuf->head == cbuf->tail));
     186:	7a83      	ldrb	r3, [r0, #10]
     188:	b933      	cbnz	r3, 198 <ring_empty+0x12>
     18a:	8883      	ldrh	r3, [r0, #4]
     18c:	88c0      	ldrh	r0, [r0, #6]
     18e:	4283      	cmp	r3, r0
     190:	bf14      	ite	ne
     192:	2000      	movne	r0, #0
     194:	2001      	moveq	r0, #1
     196:	4770      	bx	lr
     198:	2000      	movs	r0, #0
}
     19a:	4770      	bx	lr

0000019c <ring_get>:
{
     19c:	b538      	push	{r3, r4, r5, lr}
     19e:	4604      	mov	r4, r0
     1a0:	460d      	mov	r5, r1
	if(!ring_empty(cbuf))
     1a2:	4b0a      	ldr	r3, [pc, #40]	; (1cc <ring_get+0x30>)
     1a4:	4798      	blx	r3
     1a6:	b970      	cbnz	r0, 1c6 <ring_get+0x2a>
		*data = cbuf->buffer[cbuf->tail];
     1a8:	88e2      	ldrh	r2, [r4, #6]
     1aa:	6823      	ldr	r3, [r4, #0]
     1ac:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
     1b0:	702b      	strb	r3, [r5, #0]
	cbuf->full = false;
     1b2:	72a0      	strb	r0, [r4, #10]
	cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     1b4:	88e3      	ldrh	r3, [r4, #6]
     1b6:	3301      	adds	r3, #1
     1b8:	8921      	ldrh	r1, [r4, #8]
     1ba:	fb93 f2f1 	sdiv	r2, r3, r1
     1be:	fb01 3312 	mls	r3, r1, r2, r3
     1c2:	80e3      	strh	r3, [r4, #6]
     1c4:	bd38      	pop	{r3, r4, r5, pc}
	int r = -1;
     1c6:	f04f 30ff 	mov.w	r0, #4294967295
}
     1ca:	bd38      	pop	{r3, r4, r5, pc}
     1cc:	00000187 	.word	0x00000187

000001d0 <isEmptyParser>:
int rearParam = -1;
int rearParser = -1;

bool isEmptyParser(void)
{
	if(frontParser == -1)
     1d0:	4b03      	ldr	r3, [pc, #12]	; (1e0 <isEmptyParser+0x10>)
     1d2:	6818      	ldr	r0, [r3, #0]
	{
		return true;
	}
	return false;
}
     1d4:	f1b0 3fff 	cmp.w	r0, #4294967295
     1d8:	bf14      	ite	ne
     1da:	2000      	movne	r0, #0
     1dc:	2001      	moveq	r0, #1
     1de:	4770      	bx	lr
     1e0:	20000008 	.word	0x20000008

000001e4 <dequeueParser>:
}
char dequeueParser(void)
{
	char temp;
	
	temp = queueParser[frontParser];
     1e4:	4a08      	ldr	r2, [pc, #32]	; (208 <dequeueParser+0x24>)
     1e6:	6813      	ldr	r3, [r2, #0]
     1e8:	4908      	ldr	r1, [pc, #32]	; (20c <dequeueParser+0x28>)
     1ea:	5cc8      	ldrb	r0, [r1, r3]
	frontParser++;
     1ec:	3301      	adds	r3, #1
     1ee:	6013      	str	r3, [r2, #0]
	if(frontParser > rearParser)
     1f0:	4a07      	ldr	r2, [pc, #28]	; (210 <dequeueParser+0x2c>)
     1f2:	6812      	ldr	r2, [r2, #0]
     1f4:	4293      	cmp	r3, r2
     1f6:	dd05      	ble.n	204 <dequeueParser+0x20>
	{
		frontParser = rearParser = -1;
     1f8:	f04f 33ff 	mov.w	r3, #4294967295
     1fc:	4a04      	ldr	r2, [pc, #16]	; (210 <dequeueParser+0x2c>)
     1fe:	6013      	str	r3, [r2, #0]
     200:	4a01      	ldr	r2, [pc, #4]	; (208 <dequeueParser+0x24>)
     202:	6013      	str	r3, [r2, #0]
	}
	return temp;
}
     204:	4770      	bx	lr
     206:	bf00      	nop
     208:	20000008 	.word	0x20000008
     20c:	200004f8 	.word	0x200004f8
     210:	20000010 	.word	0x20000010

00000214 <enqueueParser>:
void enqueueParser(char data)
{
	if(frontParser == -1)
     214:	4b07      	ldr	r3, [pc, #28]	; (234 <enqueueParser+0x20>)
     216:	681b      	ldr	r3, [r3, #0]
     218:	f1b3 3fff 	cmp.w	r3, #4294967295
     21c:	d006      	beq.n	22c <enqueueParser+0x18>
	{
		frontParser = 0;
	}
	rearParser++;
     21e:	4a06      	ldr	r2, [pc, #24]	; (238 <enqueueParser+0x24>)
     220:	6813      	ldr	r3, [r2, #0]
     222:	3301      	adds	r3, #1
     224:	6013      	str	r3, [r2, #0]
	queueParser[rearParser] = data;
     226:	4a05      	ldr	r2, [pc, #20]	; (23c <enqueueParser+0x28>)
     228:	54d0      	strb	r0, [r2, r3]
     22a:	4770      	bx	lr
		frontParser = 0;
     22c:	2200      	movs	r2, #0
     22e:	4b01      	ldr	r3, [pc, #4]	; (234 <enqueueParser+0x20>)
     230:	601a      	str	r2, [r3, #0]
     232:	e7f4      	b.n	21e <enqueueParser+0xa>
     234:	20000008 	.word	0x20000008
     238:	20000010 	.word	0x20000010
     23c:	200004f8 	.word	0x200004f8

00000240 <isEmptyParam>:
}
bool isEmptyParam(void)
{
	if(frontParam == -1)
     240:	4b03      	ldr	r3, [pc, #12]	; (250 <isEmptyParam+0x10>)
     242:	6818      	ldr	r0, [r3, #0]
	{
		return true;
	}
	return false;
}
     244:	f1b0 3fff 	cmp.w	r0, #4294967295
     248:	bf14      	ite	ne
     24a:	2000      	movne	r0, #0
     24c:	2001      	moveq	r0, #1
     24e:	4770      	bx	lr
     250:	20000004 	.word	0x20000004

00000254 <dequeueParam>:
}
uint8_t dequeueParam(void)
{
	uint8_t temp;
	
	temp = queueParam[frontParam];
     254:	4a08      	ldr	r2, [pc, #32]	; (278 <dequeueParam+0x24>)
     256:	6813      	ldr	r3, [r2, #0]
     258:	4908      	ldr	r1, [pc, #32]	; (27c <dequeueParam+0x28>)
     25a:	5cc8      	ldrb	r0, [r1, r3]
	frontParam++;
     25c:	3301      	adds	r3, #1
     25e:	6013      	str	r3, [r2, #0]
	if(frontParam > rearParam)
     260:	4a07      	ldr	r2, [pc, #28]	; (280 <dequeueParam+0x2c>)
     262:	6812      	ldr	r2, [r2, #0]
     264:	4293      	cmp	r3, r2
     266:	dd05      	ble.n	274 <dequeueParam+0x20>
	{
		frontParam = rearParam = -1;
     268:	f04f 33ff 	mov.w	r3, #4294967295
     26c:	4a04      	ldr	r2, [pc, #16]	; (280 <dequeueParam+0x2c>)
     26e:	6013      	str	r3, [r2, #0]
     270:	4a01      	ldr	r2, [pc, #4]	; (278 <dequeueParam+0x24>)
     272:	6013      	str	r3, [r2, #0]
	}

	return temp;
}
     274:	4770      	bx	lr
     276:	bf00      	nop
     278:	20000004 	.word	0x20000004
     27c:	2000052c 	.word	0x2000052c
     280:	2000000c 	.word	0x2000000c

00000284 <enqueueParam>:
void enqueueParam(uint8_t data)
{

	if(frontParam == -1)
     284:	4b07      	ldr	r3, [pc, #28]	; (2a4 <enqueueParam+0x20>)
     286:	681b      	ldr	r3, [r3, #0]
     288:	f1b3 3fff 	cmp.w	r3, #4294967295
     28c:	d006      	beq.n	29c <enqueueParam+0x18>
	{
		frontParam = 0;
	}
	rearParam++;
     28e:	4a06      	ldr	r2, [pc, #24]	; (2a8 <enqueueParam+0x24>)
     290:	6813      	ldr	r3, [r2, #0]
     292:	3301      	adds	r3, #1
     294:	6013      	str	r3, [r2, #0]
	queueParam[rearParam] = data;
     296:	4a05      	ldr	r2, [pc, #20]	; (2ac <enqueueParam+0x28>)
     298:	54d0      	strb	r0, [r2, r3]
     29a:	4770      	bx	lr
		frontParam = 0;
     29c:	2200      	movs	r2, #0
     29e:	4b01      	ldr	r3, [pc, #4]	; (2a4 <enqueueParam+0x20>)
     2a0:	601a      	str	r2, [r3, #0]
     2a2:	e7f4      	b.n	28e <enqueueParam+0xa>
     2a4:	20000004 	.word	0x20000004
     2a8:	2000000c 	.word	0x2000000c
     2ac:	2000052c 	.word	0x2000052c

000002b0 <clearQueues>:
}
void clearQueues(void)
{

	for(int i = 0 ; i < (MAXSIZE - 1) ; i++)
     2b0:	4b0d      	ldr	r3, [pc, #52]	; (2e8 <clearQueues+0x38>)
     2b2:	6818      	ldr	r0, [r3, #0]
     2b4:	1e43      	subs	r3, r0, #1
     2b6:	2b00      	cmp	r3, #0
     2b8:	dd0a      	ble.n	2d0 <clearQueues+0x20>
     2ba:	4b0c      	ldr	r3, [pc, #48]	; (2ec <clearQueues+0x3c>)
     2bc:	490c      	ldr	r1, [pc, #48]	; (2f0 <clearQueues+0x40>)
     2be:	4418      	add	r0, r3
     2c0:	3801      	subs	r0, #1
	{
		queueParam[i] = 0;
     2c2:	2200      	movs	r2, #0
     2c4:	f803 2f01 	strb.w	r2, [r3, #1]!
		queueParser[i] = 0;
     2c8:	f801 2f01 	strb.w	r2, [r1, #1]!
	for(int i = 0 ; i < (MAXSIZE - 1) ; i++)
     2cc:	4283      	cmp	r3, r0
     2ce:	d1f9      	bne.n	2c4 <clearQueues+0x14>
	}
	
	frontParser = -1;
     2d0:	f04f 33ff 	mov.w	r3, #4294967295
     2d4:	4a07      	ldr	r2, [pc, #28]	; (2f4 <clearQueues+0x44>)
     2d6:	6013      	str	r3, [r2, #0]
	frontParam = -1;
     2d8:	4a07      	ldr	r2, [pc, #28]	; (2f8 <clearQueues+0x48>)
     2da:	6013      	str	r3, [r2, #0]
	rearParam = -1;
     2dc:	4a07      	ldr	r2, [pc, #28]	; (2fc <clearQueues+0x4c>)
     2de:	6013      	str	r3, [r2, #0]
	rearParser = -1;
     2e0:	4a07      	ldr	r2, [pc, #28]	; (300 <clearQueues+0x50>)
     2e2:	6013      	str	r3, [r2, #0]
     2e4:	4770      	bx	lr
     2e6:	bf00      	nop
     2e8:	20000000 	.word	0x20000000
     2ec:	2000052b 	.word	0x2000052b
     2f0:	200004f7 	.word	0x200004f7
     2f4:	20000008 	.word	0x20000008
     2f8:	20000004 	.word	0x20000004
     2fc:	2000000c 	.word	0x2000000c
     300:	20000010 	.word	0x20000010

00000304 <queueTransmogrifier>:
}
void queueTransmogrifier(void)
{
     304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	[24],[80]
	
	It's like reimplementing atoi() but it's not an interview question.
	*/
	
	int param = 0;
     306:	2400      	movs	r4, #0
	char currentByte;
	
	while(!isEmptyParser())
     308:	4d0b      	ldr	r5, [pc, #44]	; (338 <queueTransmogrifier+0x34>)
	{
		
		currentByte = dequeueParser();		//deque from parser
     30a:	4e0c      	ldr	r6, [pc, #48]	; (33c <queueTransmogrifier+0x38>)

		if(currentByte == 0x3B || currentByte == 0x3F) //if it's ';' or '?'
		{
			enqueueParam(param);
     30c:	4f0c      	ldr	r7, [pc, #48]	; (340 <queueTransmogrifier+0x3c>)
	while(!isEmptyParser())
     30e:	e002      	b.n	316 <queueTransmogrifier+0x12>
			enqueueParam(param);
     310:	b2e0      	uxtb	r0, r4
     312:	47b8      	blx	r7
			param = 0;
     314:	2400      	movs	r4, #0
	while(!isEmptyParser())
     316:	47a8      	blx	r5
     318:	b950      	cbnz	r0, 330 <queueTransmogrifier+0x2c>
		currentByte = dequeueParser();		//deque from parser
     31a:	47b0      	blx	r6
		if(currentByte == 0x3B || currentByte == 0x3F) //if it's ';' or '?'
     31c:	f000 03fb 	and.w	r3, r0, #251	; 0xfb
     320:	2b3b      	cmp	r3, #59	; 0x3b
     322:	d0f5      	beq.n	310 <queueTransmogrifier+0xc>
		}
		else
		{
			param = (10 * param) + (int)(currentByte-48);
     324:	eb04 0484 	add.w	r4, r4, r4, lsl #2
     328:	3830      	subs	r0, #48	; 0x30
     32a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
     32e:	e7f2      	b.n	316 <queueTransmogrifier+0x12>
		}
	}
	enqueueParam(param);
     330:	b2e0      	uxtb	r0, r4
     332:	4b03      	ldr	r3, [pc, #12]	; (340 <queueTransmogrifier+0x3c>)
     334:	4798      	blx	r3
     336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     338:	000001d1 	.word	0x000001d1
     33c:	000001e5 	.word	0x000001e5
     340:	00000285 	.word	0x00000285

00000344 <CSIignoreState>:
	}
}

void CSIignoreState(uint8_t character)
{
	if(character == 0x1B)
     344:	281b      	cmp	r0, #27
     346:	d007      	beq.n	358 <CSIignoreState+0x14>
	{
		currentState = stateESC;
	}
	else if(character >= 0x40 && character <= 0x7E)
     348:	3840      	subs	r0, #64	; 0x40
     34a:	b2c0      	uxtb	r0, r0
     34c:	283e      	cmp	r0, #62	; 0x3e
     34e:	d802      	bhi.n	356 <CSIignoreState+0x12>
	{
		currentState = stateGround;
     350:	2200      	movs	r2, #0
     352:	4b03      	ldr	r3, [pc, #12]	; (360 <CSIignoreState+0x1c>)
     354:	701a      	strb	r2, [r3, #0]
     356:	4770      	bx	lr
		currentState = stateESC;
     358:	2201      	movs	r2, #1
     35a:	4b01      	ldr	r3, [pc, #4]	; (360 <CSIignoreState+0x1c>)
     35c:	701a      	strb	r2, [r3, #0]
     35e:	4770      	bx	lr
     360:	200004e7 	.word	0x200004e7

00000364 <SC>:
/************************************************************************/

void SC()
{
	//Save cursor position
	DECSCX = xCharPos;
     364:	4b05      	ldr	r3, [pc, #20]	; (37c <SC+0x18>)
     366:	881a      	ldrh	r2, [r3, #0]
     368:	4b05      	ldr	r3, [pc, #20]	; (380 <SC+0x1c>)
     36a:	701a      	strb	r2, [r3, #0]
	DECSCY = yCharPos;
     36c:	4b05      	ldr	r3, [pc, #20]	; (384 <SC+0x20>)
     36e:	881a      	ldrh	r2, [r3, #0]
     370:	4b05      	ldr	r3, [pc, #20]	; (388 <SC+0x24>)
     372:	701a      	strb	r2, [r3, #0]
	currentState = stateGround;
     374:	2200      	movs	r2, #0
     376:	4b05      	ldr	r3, [pc, #20]	; (38c <SC+0x28>)
     378:	701a      	strb	r2, [r3, #0]
     37a:	4770      	bx	lr
     37c:	200004e2 	.word	0x200004e2
     380:	2000041c 	.word	0x2000041c
     384:	200004e4 	.word	0x200004e4
     388:	2000041d 	.word	0x2000041d
     38c:	200004e7 	.word	0x200004e7

00000390 <RC>:
}

void RC()
{
     390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//Restore cursor to saved position
	
	char tempCharacter;
	
	drawChar(consoleDisplay[xCharPos][yCharPos]);
     392:	4c0f      	ldr	r4, [pc, #60]	; (3d0 <RC+0x40>)
     394:	4f0f      	ldr	r7, [pc, #60]	; (3d4 <RC+0x44>)
     396:	883b      	ldrh	r3, [r7, #0]
     398:	4e0f      	ldr	r6, [pc, #60]	; (3d8 <RC+0x48>)
     39a:	8832      	ldrh	r2, [r6, #0]
     39c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     3a0:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
     3a4:	5c98      	ldrb	r0, [r3, r2]
     3a6:	4d0d      	ldr	r5, [pc, #52]	; (3dc <RC+0x4c>)
     3a8:	47a8      	blx	r5
	xCharPos = DECSCX;
     3aa:	4b0d      	ldr	r3, [pc, #52]	; (3e0 <RC+0x50>)
     3ac:	781b      	ldrb	r3, [r3, #0]
     3ae:	803b      	strh	r3, [r7, #0]
	yCharPos = DECSCY;
     3b0:	4a0c      	ldr	r2, [pc, #48]	; (3e4 <RC+0x54>)
     3b2:	7812      	ldrb	r2, [r2, #0]
     3b4:	8032      	strh	r2, [r6, #0]
	tempCharacter = consoleDisplay[xCharPos][yCharPos];
     3b6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     3ba:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
	drawChar(tempCharacter);
     3be:	5c98      	ldrb	r0, [r3, r2]
     3c0:	47a8      	blx	r5
	blinkCursor();
     3c2:	4b09      	ldr	r3, [pc, #36]	; (3e8 <RC+0x58>)
     3c4:	4798      	blx	r3
	currentState = stateGround;
     3c6:	2200      	movs	r2, #0
     3c8:	4b08      	ldr	r3, [pc, #32]	; (3ec <RC+0x5c>)
     3ca:	701a      	strb	r2, [r3, #0]
     3cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     3ce:	bf00      	nop
     3d0:	200005ec 	.word	0x200005ec
     3d4:	200004e2 	.word	0x200004e2
     3d8:	200004e4 	.word	0x200004e4
     3dc:	000038b1 	.word	0x000038b1
     3e0:	2000041c 	.word	0x2000041c
     3e4:	2000041d 	.word	0x2000041d
     3e8:	00003c09 	.word	0x00003c09
     3ec:	200004e7 	.word	0x200004e7

000003f0 <IND>:
}

void IND()
{
     3f0:	b570      	push	{r4, r5, r6, lr}
	//performs newline() if row = 24
	
	char tempCharacter;
	int xTemp = 0;
	
	if(yCharPos < 23)
     3f2:	4b19      	ldr	r3, [pc, #100]	; (458 <IND+0x68>)
     3f4:	881b      	ldrh	r3, [r3, #0]
     3f6:	2b16      	cmp	r3, #22
     3f8:	d914      	bls.n	424 <IND+0x34>
		drawChar(tempCharacter);
		blinkCursor();
	}
	else
	{
		xTemp = xCharPos;
     3fa:	4d18      	ldr	r5, [pc, #96]	; (45c <IND+0x6c>)
     3fc:	882c      	ldrh	r4, [r5, #0]
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     3fe:	eb04 0144 	add.w	r1, r4, r4, lsl #1
     402:	4a17      	ldr	r2, [pc, #92]	; (460 <IND+0x70>)
     404:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
     408:	5cd0      	ldrb	r0, [r2, r3]
     40a:	4e16      	ldr	r6, [pc, #88]	; (464 <IND+0x74>)
     40c:	47b0      	blx	r6
		newLine();
     40e:	4b16      	ldr	r3, [pc, #88]	; (468 <IND+0x78>)
     410:	4798      	blx	r3
		drawChar(0x00);
     412:	2000      	movs	r0, #0
     414:	47b0      	blx	r6
		xCharPos = xTemp;
     416:	802c      	strh	r4, [r5, #0]
		blinkCursor();
     418:	4b14      	ldr	r3, [pc, #80]	; (46c <IND+0x7c>)
     41a:	4798      	blx	r3
	}
		
		currentState = stateGround;	
     41c:	2200      	movs	r2, #0
     41e:	4b14      	ldr	r3, [pc, #80]	; (470 <IND+0x80>)
     420:	701a      	strb	r2, [r3, #0]
     422:	bd70      	pop	{r4, r5, r6, pc}
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     424:	4c0e      	ldr	r4, [pc, #56]	; (460 <IND+0x70>)
     426:	4d0d      	ldr	r5, [pc, #52]	; (45c <IND+0x6c>)
     428:	882a      	ldrh	r2, [r5, #0]
     42a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
     42e:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
     432:	5cd0      	ldrb	r0, [r2, r3]
     434:	4e0b      	ldr	r6, [pc, #44]	; (464 <IND+0x74>)
     436:	47b0      	blx	r6
		yCharPos++;
     438:	4a07      	ldr	r2, [pc, #28]	; (458 <IND+0x68>)
     43a:	8813      	ldrh	r3, [r2, #0]
     43c:	3301      	adds	r3, #1
     43e:	b29b      	uxth	r3, r3
     440:	8013      	strh	r3, [r2, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     442:	882a      	ldrh	r2, [r5, #0]
     444:	eb02 0242 	add.w	r2, r2, r2, lsl #1
     448:	eb04 04c2 	add.w	r4, r4, r2, lsl #3
		drawChar(tempCharacter);
     44c:	5ce0      	ldrb	r0, [r4, r3]
     44e:	47b0      	blx	r6
		blinkCursor();
     450:	4b06      	ldr	r3, [pc, #24]	; (46c <IND+0x7c>)
     452:	4798      	blx	r3
     454:	e7e2      	b.n	41c <IND+0x2c>
     456:	bf00      	nop
     458:	200004e4 	.word	0x200004e4
     45c:	200004e2 	.word	0x200004e2
     460:	200005ec 	.word	0x200005ec
     464:	000038b1 	.word	0x000038b1
     468:	00003dc9 	.word	0x00003dc9
     46c:	00003c09 	.word	0x00003c09
     470:	200004e7 	.word	0x200004e7

00000474 <NEL>:
}

void NEL()
{
     474:	b570      	push	{r4, r5, r6, lr}
	//new line, moves down one line and to the
	//first column (CR,LF) scrolls if row = 24
	
	char tempCharacter;
	
	if(yCharPos < 23)
     476:	4b18      	ldr	r3, [pc, #96]	; (4d8 <NEL+0x64>)
     478:	881a      	ldrh	r2, [r3, #0]
     47a:	2a16      	cmp	r2, #22
     47c:	d915      	bls.n	4aa <NEL+0x36>
		drawChar(tempCharacter);
		blinkCursor();
	}
	else
	{
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     47e:	4c17      	ldr	r4, [pc, #92]	; (4dc <NEL+0x68>)
     480:	8823      	ldrh	r3, [r4, #0]
     482:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     486:	4916      	ldr	r1, [pc, #88]	; (4e0 <NEL+0x6c>)
     488:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
     48c:	5c98      	ldrb	r0, [r3, r2]
     48e:	4d15      	ldr	r5, [pc, #84]	; (4e4 <NEL+0x70>)
     490:	47a8      	blx	r5
		newLine();
     492:	4b15      	ldr	r3, [pc, #84]	; (4e8 <NEL+0x74>)
     494:	4798      	blx	r3
		drawChar(0x00);
     496:	2000      	movs	r0, #0
     498:	47a8      	blx	r5
		xCharPos = 0;
     49a:	2300      	movs	r3, #0
     49c:	8023      	strh	r3, [r4, #0]
		blinkCursor();
     49e:	4b13      	ldr	r3, [pc, #76]	; (4ec <NEL+0x78>)
     4a0:	4798      	blx	r3
	}
		
	currentState = stateGround;
     4a2:	2200      	movs	r2, #0
     4a4:	4b12      	ldr	r3, [pc, #72]	; (4f0 <NEL+0x7c>)
     4a6:	701a      	strb	r2, [r3, #0]
     4a8:	bd70      	pop	{r4, r5, r6, pc}
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     4aa:	4c0d      	ldr	r4, [pc, #52]	; (4e0 <NEL+0x6c>)
     4ac:	4d0b      	ldr	r5, [pc, #44]	; (4dc <NEL+0x68>)
     4ae:	882b      	ldrh	r3, [r5, #0]
     4b0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     4b4:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
     4b8:	5c98      	ldrb	r0, [r3, r2]
     4ba:	4e0a      	ldr	r6, [pc, #40]	; (4e4 <NEL+0x70>)
     4bc:	47b0      	blx	r6
		yCharPos++;
     4be:	4a06      	ldr	r2, [pc, #24]	; (4d8 <NEL+0x64>)
     4c0:	8813      	ldrh	r3, [r2, #0]
     4c2:	3301      	adds	r3, #1
     4c4:	b29b      	uxth	r3, r3
     4c6:	8013      	strh	r3, [r2, #0]
		xCharPos = 0;
     4c8:	2200      	movs	r2, #0
     4ca:	802a      	strh	r2, [r5, #0]
		drawChar(tempCharacter);
     4cc:	5ce0      	ldrb	r0, [r4, r3]
     4ce:	47b0      	blx	r6
		blinkCursor();
     4d0:	4b06      	ldr	r3, [pc, #24]	; (4ec <NEL+0x78>)
     4d2:	4798      	blx	r3
     4d4:	e7e5      	b.n	4a2 <NEL+0x2e>
     4d6:	bf00      	nop
     4d8:	200004e4 	.word	0x200004e4
     4dc:	200004e2 	.word	0x200004e2
     4e0:	200005ec 	.word	0x200005ec
     4e4:	000038b1 	.word	0x000038b1
     4e8:	00003dc9 	.word	0x00003dc9
     4ec:	00003c09 	.word	0x00003c09
     4f0:	200004e7 	.word	0x200004e7

000004f4 <RI>:
}

void RI()
{
     4f4:	b570      	push	{r4, r5, r6, lr}
	scrolling will occur. in this case the active position will not move 
	beyond the first line of the display.
	*/
	char tempCharacter;

	if(yCharPos == topMargin)
     4f6:	4b14      	ldr	r3, [pc, #80]	; (548 <RI+0x54>)
     4f8:	781a      	ldrb	r2, [r3, #0]
     4fa:	4b14      	ldr	r3, [pc, #80]	; (54c <RI+0x58>)
     4fc:	881b      	ldrh	r3, [r3, #0]
     4fe:	429a      	cmp	r2, r3
     500:	d006      	beq.n	510 <RI+0x1c>
	
		scrollDown(topMargin);
	}
	else
	{
		if(yCharPos > 0)
     502:	b953      	cbnz	r3, 51a <RI+0x26>
			tempCharacter = consoleDisplay[xCharPos][yCharPos];
			drawChar(tempCharacter);
		}
	}
	
	blinkCursor();
     504:	4b12      	ldr	r3, [pc, #72]	; (550 <RI+0x5c>)
     506:	4798      	blx	r3
	currentState = stateGround;
     508:	2200      	movs	r2, #0
     50a:	4b12      	ldr	r3, [pc, #72]	; (554 <RI+0x60>)
     50c:	701a      	strb	r2, [r3, #0]
     50e:	bd70      	pop	{r4, r5, r6, pc}
		scrollDown(topMargin);
     510:	4b0d      	ldr	r3, [pc, #52]	; (548 <RI+0x54>)
     512:	7818      	ldrb	r0, [r3, #0]
     514:	4b10      	ldr	r3, [pc, #64]	; (558 <RI+0x64>)
     516:	4798      	blx	r3
     518:	e7f4      	b.n	504 <RI+0x10>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     51a:	4c10      	ldr	r4, [pc, #64]	; (55c <RI+0x68>)
     51c:	4d10      	ldr	r5, [pc, #64]	; (560 <RI+0x6c>)
     51e:	882a      	ldrh	r2, [r5, #0]
     520:	eb02 0242 	add.w	r2, r2, r2, lsl #1
     524:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
     528:	5cd0      	ldrb	r0, [r2, r3]
     52a:	4e0e      	ldr	r6, [pc, #56]	; (564 <RI+0x70>)
     52c:	47b0      	blx	r6
			yCharPos--;
     52e:	4a07      	ldr	r2, [pc, #28]	; (54c <RI+0x58>)
     530:	8813      	ldrh	r3, [r2, #0]
     532:	3b01      	subs	r3, #1
     534:	b29b      	uxth	r3, r3
     536:	8013      	strh	r3, [r2, #0]
			tempCharacter = consoleDisplay[xCharPos][yCharPos];
     538:	882a      	ldrh	r2, [r5, #0]
     53a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
     53e:	eb04 04c2 	add.w	r4, r4, r2, lsl #3
			drawChar(tempCharacter);
     542:	5ce0      	ldrb	r0, [r4, r3]
     544:	47b0      	blx	r6
     546:	e7dd      	b.n	504 <RI+0x10>
     548:	20000029 	.word	0x20000029
     54c:	200004e4 	.word	0x200004e4
     550:	00003c09 	.word	0x00003c09
     554:	200004e7 	.word	0x200004e7
     558:	00003a61 	.word	0x00003a61
     55c:	200005ec 	.word	0x200005ec
     560:	200004e2 	.word	0x200004e2
     564:	000038b1 	.word	0x000038b1

00000568 <RIS>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     568:	f3bf 8f4f 	dsb	sy
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
     56c:	4a03      	ldr	r2, [pc, #12]	; (57c <RIS+0x14>)
     56e:	4b04      	ldr	r3, [pc, #16]	; (580 <RIS+0x18>)
     570:	60da      	str	r2, [r3, #12]
     572:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     576:	bf00      	nop
     578:	e7fd      	b.n	576 <RIS+0xe>
     57a:	bf00      	nop
     57c:	05fa0004 	.word	0x05fa0004
     580:	e000ed00 	.word	0xe000ed00

00000584 <escState>:
{
     584:	b508      	push	{r3, lr}
	if(character == 0x37)		//ESC + 7 - (DECSC) -
     586:	2837      	cmp	r0, #55	; 0x37
     588:	d024      	beq.n	5d4 <escState+0x50>
	else if(character == 0x38)		//ESC + 8 - (DECRC) -
     58a:	2838      	cmp	r0, #56	; 0x38
     58c:	d025      	beq.n	5da <escState+0x56>
	else if(character == 0x44)		//ESC + D - (IND) - 
     58e:	2844      	cmp	r0, #68	; 0x44
     590:	d026      	beq.n	5e0 <escState+0x5c>
	else if(character == 0x45)		//ESC + E - (NEL) -
     592:	2845      	cmp	r0, #69	; 0x45
     594:	d027      	beq.n	5e6 <escState+0x62>
	else if(character == 0x48)		//ESC + H - (HTS) - 
     596:	2848      	cmp	r0, #72	; 0x48
     598:	d028      	beq.n	5ec <escState+0x68>
	else if(character == 0x4D)		//ESC + M - (RI)
     59a:	284d      	cmp	r0, #77	; 0x4d
     59c:	d02a      	beq.n	5f4 <escState+0x70>
	else if(character == 0x59)		//ESC + Z (DECID)
     59e:	2859      	cmp	r0, #89	; 0x59
     5a0:	d02b      	beq.n	5fa <escState+0x76>
	else if(character == 0x63)		//ESC + c - (RIS)
     5a2:	2863      	cmp	r0, #99	; 0x63
     5a4:	d031      	beq.n	60a <escState+0x86>
	else if(character == 0x3E)		//ESC >
     5a6:	283e      	cmp	r0, #62	; 0x3e
     5a8:	d031      	beq.n	60e <escState+0x8a>
	else if(character == 0x3D)		//ESC =
     5aa:	283d      	cmp	r0, #61	; 0x3d
     5ac:	d033      	beq.n	616 <escState+0x92>
	else if(character == 0x5D)		//ESC ]
     5ae:	285d      	cmp	r0, #93	; 0x5d
     5b0:	d035      	beq.n	61e <escState+0x9a>
	else if(character == 0x23 || character == 0x25 || character == 0x28 ||
     5b2:	f1a0 0323 	sub.w	r3, r0, #35	; 0x23
     5b6:	b2db      	uxtb	r3, r3
     5b8:	2b06      	cmp	r3, #6
     5ba:	d805      	bhi.n	5c8 <escState+0x44>
     5bc:	2265      	movs	r2, #101	; 0x65
     5be:	fa22 f303 	lsr.w	r3, r2, r3
     5c2:	f013 0f01 	tst.w	r3, #1
     5c6:	d12e      	bne.n	626 <escState+0xa2>
	else if(character == 0x5B)
     5c8:	285b      	cmp	r0, #91	; 0x5b
     5ca:	d032      	beq.n	632 <escState+0xae>
		currentState = stateGround;
     5cc:	2200      	movs	r2, #0
     5ce:	4b1b      	ldr	r3, [pc, #108]	; (63c <escState+0xb8>)
     5d0:	701a      	strb	r2, [r3, #0]
     5d2:	bd08      	pop	{r3, pc}
		SC();
     5d4:	4b1a      	ldr	r3, [pc, #104]	; (640 <escState+0xbc>)
     5d6:	4798      	blx	r3
     5d8:	bd08      	pop	{r3, pc}
		RC();
     5da:	4b1a      	ldr	r3, [pc, #104]	; (644 <escState+0xc0>)
     5dc:	4798      	blx	r3
     5de:	bd08      	pop	{r3, pc}
		IND();			
     5e0:	4b19      	ldr	r3, [pc, #100]	; (648 <escState+0xc4>)
     5e2:	4798      	blx	r3
     5e4:	bd08      	pop	{r3, pc}
		NEL();
     5e6:	4b19      	ldr	r3, [pc, #100]	; (64c <escState+0xc8>)
     5e8:	4798      	blx	r3
     5ea:	bd08      	pop	{r3, pc}
}

void HTS()
{
	//set tab stop at current column, unsupported now
	currentState = stateGround;
     5ec:	2200      	movs	r2, #0
     5ee:	4b13      	ldr	r3, [pc, #76]	; (63c <escState+0xb8>)
     5f0:	701a      	strb	r2, [r3, #0]
     5f2:	bd08      	pop	{r3, pc}
		RI();
     5f4:	4b16      	ldr	r3, [pc, #88]	; (650 <escState+0xcc>)
     5f6:	4798      	blx	r3
     5f8:	bd08      	pop	{r3, pc}
		printf("%s",DECIDreturn);
     5fa:	4916      	ldr	r1, [pc, #88]	; (654 <escState+0xd0>)
     5fc:	4816      	ldr	r0, [pc, #88]	; (658 <escState+0xd4>)
     5fe:	4b17      	ldr	r3, [pc, #92]	; (65c <escState+0xd8>)
     600:	4798      	blx	r3
		currentState = stateGround;
     602:	2200      	movs	r2, #0
     604:	4b0d      	ldr	r3, [pc, #52]	; (63c <escState+0xb8>)
     606:	701a      	strb	r2, [r3, #0]
     608:	bd08      	pop	{r3, pc}
		RIS();
     60a:	4b15      	ldr	r3, [pc, #84]	; (660 <escState+0xdc>)
     60c:	4798      	blx	r3
		currentState = stateGround;
     60e:	2200      	movs	r2, #0
     610:	4b0a      	ldr	r3, [pc, #40]	; (63c <escState+0xb8>)
     612:	701a      	strb	r2, [r3, #0]
     614:	bd08      	pop	{r3, pc}
		currentState = stateGround;
     616:	2200      	movs	r2, #0
     618:	4b08      	ldr	r3, [pc, #32]	; (63c <escState+0xb8>)
     61a:	701a      	strb	r2, [r3, #0]
     61c:	bd08      	pop	{r3, pc}
		currentState = stateGround;
     61e:	2200      	movs	r2, #0
     620:	4b06      	ldr	r3, [pc, #24]	; (63c <escState+0xb8>)
     622:	701a      	strb	r2, [r3, #0]
     624:	bd08      	pop	{r3, pc}
		stateEnterBuffer = character;
     626:	4b0f      	ldr	r3, [pc, #60]	; (664 <escState+0xe0>)
     628:	7018      	strb	r0, [r3, #0]
		currentState = stateESCinter;
     62a:	2202      	movs	r2, #2
     62c:	4b03      	ldr	r3, [pc, #12]	; (63c <escState+0xb8>)
     62e:	701a      	strb	r2, [r3, #0]
     630:	bd08      	pop	{r3, pc}
		currentState = stateCSIentry;
     632:	2203      	movs	r2, #3
     634:	4b01      	ldr	r3, [pc, #4]	; (63c <escState+0xb8>)
     636:	701a      	strb	r2, [r3, #0]
     638:	bd08      	pop	{r3, pc}
     63a:	bf00      	nop
     63c:	200004e7 	.word	0x200004e7
     640:	00000365 	.word	0x00000365
     644:	00000391 	.word	0x00000391
     648:	000003f1 	.word	0x000003f1
     64c:	00000475 	.word	0x00000475
     650:	000004f5 	.word	0x000004f5
     654:	000064d8 	.word	0x000064d8
     658:	0000650c 	.word	0x0000650c
     65c:	000050e9 	.word	0x000050e9
     660:	00000569 	.word	0x00000569
     664:	2000056e 	.word	0x2000056e

00000668 <CUU>:

/************************************************************************/
/*    CSI mnemonic functions                                            */
/************************************************************************/
void CUU() // Cursor Up*
{
     668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	unsigned char tempCharacter;
	uint8_t parameter = 0;
	
	if(isEmptyParam())
     66a:	4b1f      	ldr	r3, [pc, #124]	; (6e8 <CUU+0x80>)
     66c:	4798      	blx	r3
     66e:	b1f0      	cbz	r0, 6ae <CUU+0x46>
	{
		parameter = 1;
     670:	2401      	movs	r4, #1
		{
			parameter = 1;
		}
	}
	
	if((yCharPos - parameter) >= 0 && (yCharPos - parameter) <= 24)
     672:	4b1e      	ldr	r3, [pc, #120]	; (6ec <CUU+0x84>)
     674:	881a      	ldrh	r2, [r3, #0]
     676:	1b13      	subs	r3, r2, r4
     678:	2b18      	cmp	r3, #24
     67a:	d91e      	bls.n	6ba <CUU+0x52>
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
		drawChar(tempCharacter);
	}
	else
	{
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     67c:	4d1c      	ldr	r5, [pc, #112]	; (6f0 <CUU+0x88>)
     67e:	4e1d      	ldr	r6, [pc, #116]	; (6f4 <CUU+0x8c>)
     680:	8833      	ldrh	r3, [r6, #0]
     682:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     686:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
     68a:	5c98      	ldrb	r0, [r3, r2]
     68c:	4c1a      	ldr	r4, [pc, #104]	; (6f8 <CUU+0x90>)
     68e:	47a0      	blx	r4
		yCharPos = 0;
     690:	2200      	movs	r2, #0
     692:	4b16      	ldr	r3, [pc, #88]	; (6ec <CUU+0x84>)
     694:	801a      	strh	r2, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     696:	8833      	ldrh	r3, [r6, #0]
     698:	eb03 0343 	add.w	r3, r3, r3, lsl #1
		drawChar(tempCharacter);
     69c:	f815 0033 	ldrb.w	r0, [r5, r3, lsl #3]
     6a0:	47a0      	blx	r4
	}
	
	blinkCursor();
     6a2:	4b16      	ldr	r3, [pc, #88]	; (6fc <CUU+0x94>)
     6a4:	4798      	blx	r3
	currentState = stateGround;
     6a6:	2200      	movs	r2, #0
     6a8:	4b15      	ldr	r3, [pc, #84]	; (700 <CUU+0x98>)
     6aa:	701a      	strb	r2, [r3, #0]
     6ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		parameter = dequeueParam();
     6ae:	4b15      	ldr	r3, [pc, #84]	; (704 <CUU+0x9c>)
     6b0:	4798      	blx	r3
		if(parameter == 0)
     6b2:	1e04      	subs	r4, r0, #0
			parameter = 1;
     6b4:	bf08      	it	eq
     6b6:	2401      	moveq	r4, #1
     6b8:	e7db      	b.n	672 <CUU+0xa>
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     6ba:	4d0d      	ldr	r5, [pc, #52]	; (6f0 <CUU+0x88>)
     6bc:	4e0d      	ldr	r6, [pc, #52]	; (6f4 <CUU+0x8c>)
     6be:	8833      	ldrh	r3, [r6, #0]
     6c0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     6c4:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
     6c8:	5c98      	ldrb	r0, [r3, r2]
     6ca:	4f0b      	ldr	r7, [pc, #44]	; (6f8 <CUU+0x90>)
     6cc:	47b8      	blx	r7
		yCharPos = yCharPos - parameter;
     6ce:	4a07      	ldr	r2, [pc, #28]	; (6ec <CUU+0x84>)
     6d0:	8813      	ldrh	r3, [r2, #0]
     6d2:	1b1c      	subs	r4, r3, r4
     6d4:	b2a4      	uxth	r4, r4
     6d6:	8014      	strh	r4, [r2, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     6d8:	8833      	ldrh	r3, [r6, #0]
     6da:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     6de:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
		drawChar(tempCharacter);
     6e2:	5d28      	ldrb	r0, [r5, r4]
     6e4:	47b8      	blx	r7
     6e6:	e7dc      	b.n	6a2 <CUU+0x3a>
     6e8:	00000241 	.word	0x00000241
     6ec:	200004e4 	.word	0x200004e4
     6f0:	200005ec 	.word	0x200005ec
     6f4:	200004e2 	.word	0x200004e2
     6f8:	000038b1 	.word	0x000038b1
     6fc:	00003c09 	.word	0x00003c09
     700:	200004e7 	.word	0x200004e7
     704:	00000255 	.word	0x00000255

00000708 <CUD>:
}

void CUD() //Cursor Down *
{
     708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	unsigned char tempCharacter;
	uint8_t parameter = 0;
	
	if(isEmptyParam())
     70a:	4b20      	ldr	r3, [pc, #128]	; (78c <CUD+0x84>)
     70c:	4798      	blx	r3
     70e:	b1f8      	cbz	r0, 750 <CUD+0x48>
	{
		parameter = 1;
     710:	2401      	movs	r4, #1
		if(parameter == 0)
		{
			parameter = 1;
		}
	}
	if((yCharPos + parameter) <= 23)
     712:	4b1f      	ldr	r3, [pc, #124]	; (790 <CUD+0x88>)
     714:	881a      	ldrh	r2, [r3, #0]
     716:	18a3      	adds	r3, r4, r2
     718:	2b17      	cmp	r3, #23
     71a:	dd1f      	ble.n	75c <CUD+0x54>
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
		drawChar(tempCharacter);
	}
	else
	{
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     71c:	4c1d      	ldr	r4, [pc, #116]	; (794 <CUD+0x8c>)
     71e:	4e1e      	ldr	r6, [pc, #120]	; (798 <CUD+0x90>)
     720:	8833      	ldrh	r3, [r6, #0]
     722:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     726:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
     72a:	5c98      	ldrb	r0, [r3, r2]
     72c:	4d1b      	ldr	r5, [pc, #108]	; (79c <CUD+0x94>)
     72e:	47a8      	blx	r5
		yCharPos = 23;
     730:	2217      	movs	r2, #23
     732:	4b17      	ldr	r3, [pc, #92]	; (790 <CUD+0x88>)
     734:	801a      	strh	r2, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     736:	8833      	ldrh	r3, [r6, #0]
     738:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     73c:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
		drawChar(tempCharacter);
     740:	7de0      	ldrb	r0, [r4, #23]
     742:	47a8      	blx	r5
	}

	blinkCursor();
     744:	4b16      	ldr	r3, [pc, #88]	; (7a0 <CUD+0x98>)
     746:	4798      	blx	r3
	currentState = stateGround;
     748:	2200      	movs	r2, #0
     74a:	4b16      	ldr	r3, [pc, #88]	; (7a4 <CUD+0x9c>)
     74c:	701a      	strb	r2, [r3, #0]
     74e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		parameter = dequeueParam();
     750:	4b15      	ldr	r3, [pc, #84]	; (7a8 <CUD+0xa0>)
     752:	4798      	blx	r3
		if(parameter == 0)
     754:	1e04      	subs	r4, r0, #0
			parameter = 1;
     756:	bf08      	it	eq
     758:	2401      	moveq	r4, #1
     75a:	e7da      	b.n	712 <CUD+0xa>
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     75c:	4d0d      	ldr	r5, [pc, #52]	; (794 <CUD+0x8c>)
     75e:	4e0e      	ldr	r6, [pc, #56]	; (798 <CUD+0x90>)
     760:	8833      	ldrh	r3, [r6, #0]
     762:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     766:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
     76a:	5c98      	ldrb	r0, [r3, r2]
     76c:	4f0b      	ldr	r7, [pc, #44]	; (79c <CUD+0x94>)
     76e:	47b8      	blx	r7
		yCharPos = yCharPos + parameter;
     770:	4b07      	ldr	r3, [pc, #28]	; (790 <CUD+0x88>)
     772:	881a      	ldrh	r2, [r3, #0]
     774:	4414      	add	r4, r2
     776:	b2a4      	uxth	r4, r4
     778:	801c      	strh	r4, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     77a:	8833      	ldrh	r3, [r6, #0]
     77c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     780:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
		drawChar(tempCharacter);
     784:	5d28      	ldrb	r0, [r5, r4]
     786:	47b8      	blx	r7
     788:	e7dc      	b.n	744 <CUD+0x3c>
     78a:	bf00      	nop
     78c:	00000241 	.word	0x00000241
     790:	200004e4 	.word	0x200004e4
     794:	200005ec 	.word	0x200005ec
     798:	200004e2 	.word	0x200004e2
     79c:	000038b1 	.word	0x000038b1
     7a0:	00003c09 	.word	0x00003c09
     7a4:	200004e7 	.word	0x200004e7
     7a8:	00000255 	.word	0x00000255

000007ac <CUF>:
}

void CUF() //Cursor Forward *
{
     7ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	unsigned char tempCharacter;
	uint8_t parameter = 0;
	
	if(isEmptyParam())
     7ae:	4b1f      	ldr	r3, [pc, #124]	; (82c <CUF+0x80>)
     7b0:	4798      	blx	r3
     7b2:	b1e8      	cbz	r0, 7f0 <CUF+0x44>
	{
		parameter = 1;
     7b4:	2401      	movs	r4, #1
		{
			parameter = 1;
		}
	}
	
	if(xCharPos + parameter <= 79)
     7b6:	4b1e      	ldr	r3, [pc, #120]	; (830 <CUF+0x84>)
     7b8:	881b      	ldrh	r3, [r3, #0]
     7ba:	18e2      	adds	r2, r4, r3
     7bc:	2a4f      	cmp	r2, #79	; 0x4f
     7be:	dd1d      	ble.n	7fc <CUF+0x50>
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
		drawChar(tempCharacter);
	}
	else
	{
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     7c0:	4c1c      	ldr	r4, [pc, #112]	; (834 <CUF+0x88>)
     7c2:	4e1d      	ldr	r6, [pc, #116]	; (838 <CUF+0x8c>)
     7c4:	8832      	ldrh	r2, [r6, #0]
     7c6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     7ca:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
     7ce:	5c98      	ldrb	r0, [r3, r2]
     7d0:	4d1a      	ldr	r5, [pc, #104]	; (83c <CUF+0x90>)
     7d2:	47a8      	blx	r5
		xCharPos = 79;
     7d4:	224f      	movs	r2, #79	; 0x4f
     7d6:	4b16      	ldr	r3, [pc, #88]	; (830 <CUF+0x84>)
     7d8:	801a      	strh	r2, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     7da:	8833      	ldrh	r3, [r6, #0]
     7dc:	441c      	add	r4, r3
		drawChar(tempCharacter);	
     7de:	f894 0768 	ldrb.w	r0, [r4, #1896]	; 0x768
     7e2:	47a8      	blx	r5
	}
	blinkCursor();
     7e4:	4b16      	ldr	r3, [pc, #88]	; (840 <CUF+0x94>)
     7e6:	4798      	blx	r3
	currentState = stateGround;
     7e8:	2200      	movs	r2, #0
     7ea:	4b16      	ldr	r3, [pc, #88]	; (844 <CUF+0x98>)
     7ec:	701a      	strb	r2, [r3, #0]
     7ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		parameter = dequeueParam();
     7f0:	4b15      	ldr	r3, [pc, #84]	; (848 <CUF+0x9c>)
     7f2:	4798      	blx	r3
		if(parameter == 0)
     7f4:	1e04      	subs	r4, r0, #0
			parameter = 1;
     7f6:	bf08      	it	eq
     7f8:	2401      	moveq	r4, #1
     7fa:	e7dc      	b.n	7b6 <CUF+0xa>
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     7fc:	4d0d      	ldr	r5, [pc, #52]	; (834 <CUF+0x88>)
     7fe:	4e0e      	ldr	r6, [pc, #56]	; (838 <CUF+0x8c>)
     800:	8832      	ldrh	r2, [r6, #0]
     802:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     806:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
     80a:	5c98      	ldrb	r0, [r3, r2]
     80c:	4f0b      	ldr	r7, [pc, #44]	; (83c <CUF+0x90>)
     80e:	47b8      	blx	r7
		xCharPos = xCharPos + parameter;
     810:	4b07      	ldr	r3, [pc, #28]	; (830 <CUF+0x84>)
     812:	881a      	ldrh	r2, [r3, #0]
     814:	4414      	add	r4, r2
     816:	b2a4      	uxth	r4, r4
     818:	801c      	strh	r4, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     81a:	8833      	ldrh	r3, [r6, #0]
     81c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
     820:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
		drawChar(tempCharacter);
     824:	5ce0      	ldrb	r0, [r4, r3]
     826:	47b8      	blx	r7
     828:	e7dc      	b.n	7e4 <CUF+0x38>
     82a:	bf00      	nop
     82c:	00000241 	.word	0x00000241
     830:	200004e2 	.word	0x200004e2
     834:	200005ec 	.word	0x200005ec
     838:	200004e4 	.word	0x200004e4
     83c:	000038b1 	.word	0x000038b1
     840:	00003c09 	.word	0x00003c09
     844:	200004e7 	.word	0x200004e7
     848:	00000255 	.word	0x00000255

0000084c <CUB>:
}

void CUB() //Cursor Backward *
{
     84c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	unsigned char tempCharacter;
	uint8_t parameter = 0;
	
	if(isEmptyParam())
     84e:	4b1e      	ldr	r3, [pc, #120]	; (8c8 <CUB+0x7c>)
     850:	4798      	blx	r3
     852:	b308      	cbz	r0, 898 <CUB+0x4c>
	{
		parameter = 1;
     854:	2601      	movs	r6, #1
		{
			parameter = 1;
		}
	}
	
	if(xCharPos - parameter >= 0)
     856:	4b1d      	ldr	r3, [pc, #116]	; (8cc <CUB+0x80>)
     858:	881b      	ldrh	r3, [r3, #0]
     85a:	1b9a      	subs	r2, r3, r6
     85c:	2a00      	cmp	r2, #0
     85e:	db21      	blt.n	8a4 <CUB+0x58>
	{
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     860:	4c1b      	ldr	r4, [pc, #108]	; (8d0 <CUB+0x84>)
     862:	4d1c      	ldr	r5, [pc, #112]	; (8d4 <CUB+0x88>)
     864:	882a      	ldrh	r2, [r5, #0]
     866:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     86a:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
     86e:	5c98      	ldrb	r0, [r3, r2]
     870:	4f19      	ldr	r7, [pc, #100]	; (8d8 <CUB+0x8c>)
     872:	47b8      	blx	r7
		xCharPos = xCharPos - parameter;
     874:	4b15      	ldr	r3, [pc, #84]	; (8cc <CUB+0x80>)
     876:	8818      	ldrh	r0, [r3, #0]
     878:	1b80      	subs	r0, r0, r6
     87a:	b280      	uxth	r0, r0
     87c:	8018      	strh	r0, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     87e:	882b      	ldrh	r3, [r5, #0]
     880:	eb00 0040 	add.w	r0, r0, r0, lsl #1
     884:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
		drawChar(tempCharacter);
     888:	5cc0      	ldrb	r0, [r0, r3]
     88a:	47b8      	blx	r7
		drawChar(consoleDisplay[xCharPos][yCharPos]);
		xCharPos = 0;
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
		drawChar(tempCharacter);
	}
	blinkCursor();
     88c:	4b13      	ldr	r3, [pc, #76]	; (8dc <CUB+0x90>)
     88e:	4798      	blx	r3
	currentState = stateGround;
     890:	2200      	movs	r2, #0
     892:	4b13      	ldr	r3, [pc, #76]	; (8e0 <CUB+0x94>)
     894:	701a      	strb	r2, [r3, #0]
     896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		parameter = dequeueParam();
     898:	4b12      	ldr	r3, [pc, #72]	; (8e4 <CUB+0x98>)
     89a:	4798      	blx	r3
		if(parameter == 0)
     89c:	1e06      	subs	r6, r0, #0
			parameter = 1;
     89e:	bf08      	it	eq
     8a0:	2601      	moveq	r6, #1
     8a2:	e7d8      	b.n	856 <CUB+0xa>
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     8a4:	4d0a      	ldr	r5, [pc, #40]	; (8d0 <CUB+0x84>)
     8a6:	4e0b      	ldr	r6, [pc, #44]	; (8d4 <CUB+0x88>)
     8a8:	8832      	ldrh	r2, [r6, #0]
     8aa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     8ae:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
     8b2:	5c98      	ldrb	r0, [r3, r2]
     8b4:	4c08      	ldr	r4, [pc, #32]	; (8d8 <CUB+0x8c>)
     8b6:	47a0      	blx	r4
		xCharPos = 0;
     8b8:	2200      	movs	r2, #0
     8ba:	4b04      	ldr	r3, [pc, #16]	; (8cc <CUB+0x80>)
     8bc:	801a      	strh	r2, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     8be:	8833      	ldrh	r3, [r6, #0]
		drawChar(tempCharacter);
     8c0:	5ce8      	ldrb	r0, [r5, r3]
     8c2:	47a0      	blx	r4
     8c4:	e7e2      	b.n	88c <CUB+0x40>
     8c6:	bf00      	nop
     8c8:	00000241 	.word	0x00000241
     8cc:	200004e2 	.word	0x200004e2
     8d0:	200005ec 	.word	0x200005ec
     8d4:	200004e4 	.word	0x200004e4
     8d8:	000038b1 	.word	0x000038b1
     8dc:	00003c09 	.word	0x00003c09
     8e0:	200004e7 	.word	0x200004e7
     8e4:	00000255 	.word	0x00000255

000008e8 <CNL>:
}

void CNL() //Cursor Next Line *
{
     8e8:	b570      	push	{r4, r5, r6, lr}
	unsigned char tempCharacter;
	uint8_t parameter = 0;
	
	if(isEmptyParam())
     8ea:	4b1c      	ldr	r3, [pc, #112]	; (95c <CNL+0x74>)
     8ec:	4798      	blx	r3
     8ee:	b1e8      	cbz	r0, 92c <CNL+0x44>
	{
		parameter = 1;
     8f0:	2401      	movs	r4, #1
		{
			parameter = 1;
		}
	}
	
	xCharPos = 0;
     8f2:	2200      	movs	r2, #0
     8f4:	4b1a      	ldr	r3, [pc, #104]	; (960 <CNL+0x78>)
     8f6:	801a      	strh	r2, [r3, #0]
	
	if((yCharPos + parameter) <= 23)
     8f8:	4b1a      	ldr	r3, [pc, #104]	; (964 <CNL+0x7c>)
     8fa:	881b      	ldrh	r3, [r3, #0]
     8fc:	18e2      	adds	r2, r4, r3
     8fe:	2a17      	cmp	r2, #23
     900:	dd1a      	ble.n	938 <CNL+0x50>
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
		drawChar(tempCharacter);
	}
	else
	{
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     902:	4c19      	ldr	r4, [pc, #100]	; (968 <CNL+0x80>)
     904:	5ce0      	ldrb	r0, [r4, r3]
     906:	4d19      	ldr	r5, [pc, #100]	; (96c <CNL+0x84>)
     908:	47a8      	blx	r5
		yCharPos = 23;
     90a:	2217      	movs	r2, #23
     90c:	4b15      	ldr	r3, [pc, #84]	; (964 <CNL+0x7c>)
     90e:	801a      	strh	r2, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     910:	4b13      	ldr	r3, [pc, #76]	; (960 <CNL+0x78>)
     912:	881b      	ldrh	r3, [r3, #0]
     914:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     918:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
		drawChar(tempCharacter);
     91c:	7de0      	ldrb	r0, [r4, #23]
     91e:	47a8      	blx	r5
	}

	blinkCursor();
     920:	4b13      	ldr	r3, [pc, #76]	; (970 <CNL+0x88>)
     922:	4798      	blx	r3
	currentState = stateGround;	
     924:	2200      	movs	r2, #0
     926:	4b13      	ldr	r3, [pc, #76]	; (974 <CNL+0x8c>)
     928:	701a      	strb	r2, [r3, #0]
     92a:	bd70      	pop	{r4, r5, r6, pc}
		parameter = dequeueParam();
     92c:	4b12      	ldr	r3, [pc, #72]	; (978 <CNL+0x90>)
     92e:	4798      	blx	r3
		if(parameter == 0)
     930:	1e04      	subs	r4, r0, #0
			parameter = 1;
     932:	bf08      	it	eq
     934:	2401      	moveq	r4, #1
     936:	e7dc      	b.n	8f2 <CNL+0xa>
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     938:	4d0b      	ldr	r5, [pc, #44]	; (968 <CNL+0x80>)
     93a:	5ce8      	ldrb	r0, [r5, r3]
     93c:	4e0b      	ldr	r6, [pc, #44]	; (96c <CNL+0x84>)
     93e:	47b0      	blx	r6
		yCharPos = yCharPos + parameter;
     940:	4b08      	ldr	r3, [pc, #32]	; (964 <CNL+0x7c>)
     942:	881a      	ldrh	r2, [r3, #0]
     944:	4414      	add	r4, r2
     946:	b2a4      	uxth	r4, r4
     948:	801c      	strh	r4, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     94a:	4b05      	ldr	r3, [pc, #20]	; (960 <CNL+0x78>)
     94c:	881b      	ldrh	r3, [r3, #0]
     94e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     952:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
		drawChar(tempCharacter);
     956:	5d28      	ldrb	r0, [r5, r4]
     958:	47b0      	blx	r6
     95a:	e7e1      	b.n	920 <CNL+0x38>
     95c:	00000241 	.word	0x00000241
     960:	200004e2 	.word	0x200004e2
     964:	200004e4 	.word	0x200004e4
     968:	200005ec 	.word	0x200005ec
     96c:	000038b1 	.word	0x000038b1
     970:	00003c09 	.word	0x00003c09
     974:	200004e7 	.word	0x200004e7
     978:	00000255 	.word	0x00000255

0000097c <CPL>:
}

void CPL() //Cursor Preceding Line *
{
     97c:	b570      	push	{r4, r5, r6, lr}
	unsigned char tempCharacter;
	uint8_t parameter = 0;
	
	if(isEmptyParam())
     97e:	4b1c      	ldr	r3, [pc, #112]	; (9f0 <CPL+0x74>)
     980:	4798      	blx	r3
     982:	b1e0      	cbz	r0, 9be <CPL+0x42>
	{
		parameter = 1;
     984:	2401      	movs	r4, #1
		{
			parameter = 1;
		}
	}
	
	xCharPos = 0;
     986:	2200      	movs	r2, #0
     988:	4b1a      	ldr	r3, [pc, #104]	; (9f4 <CPL+0x78>)
     98a:	801a      	strh	r2, [r3, #0]
	
	if((yCharPos - parameter) >= 0 && (yCharPos - parameter) <= 24)
     98c:	4b1a      	ldr	r3, [pc, #104]	; (9f8 <CPL+0x7c>)
     98e:	881b      	ldrh	r3, [r3, #0]
     990:	1b1a      	subs	r2, r3, r4
     992:	2a18      	cmp	r2, #24
     994:	d919      	bls.n	9ca <CPL+0x4e>
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
		drawChar(tempCharacter);
	}
	else
	{
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     996:	4d19      	ldr	r5, [pc, #100]	; (9fc <CPL+0x80>)
     998:	5ce8      	ldrb	r0, [r5, r3]
     99a:	4c19      	ldr	r4, [pc, #100]	; (a00 <CPL+0x84>)
     99c:	47a0      	blx	r4
		yCharPos = 0;
     99e:	2200      	movs	r2, #0
     9a0:	4b15      	ldr	r3, [pc, #84]	; (9f8 <CPL+0x7c>)
     9a2:	801a      	strh	r2, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     9a4:	4b13      	ldr	r3, [pc, #76]	; (9f4 <CPL+0x78>)
     9a6:	881b      	ldrh	r3, [r3, #0]
     9a8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
		drawChar(tempCharacter);
     9ac:	f815 0033 	ldrb.w	r0, [r5, r3, lsl #3]
     9b0:	47a0      	blx	r4
	}
	
	blinkCursor();
     9b2:	4b14      	ldr	r3, [pc, #80]	; (a04 <CPL+0x88>)
     9b4:	4798      	blx	r3
	currentState = stateGround;
     9b6:	2200      	movs	r2, #0
     9b8:	4b13      	ldr	r3, [pc, #76]	; (a08 <CPL+0x8c>)
     9ba:	701a      	strb	r2, [r3, #0]
     9bc:	bd70      	pop	{r4, r5, r6, pc}
		parameter = dequeueParam();
     9be:	4b13      	ldr	r3, [pc, #76]	; (a0c <CPL+0x90>)
     9c0:	4798      	blx	r3
		if(parameter == 0)
     9c2:	1e04      	subs	r4, r0, #0
			parameter = 1;
     9c4:	bf08      	it	eq
     9c6:	2401      	moveq	r4, #1
     9c8:	e7dd      	b.n	986 <CPL+0xa>
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     9ca:	4d0c      	ldr	r5, [pc, #48]	; (9fc <CPL+0x80>)
     9cc:	5ce8      	ldrb	r0, [r5, r3]
     9ce:	4e0c      	ldr	r6, [pc, #48]	; (a00 <CPL+0x84>)
     9d0:	47b0      	blx	r6
		yCharPos = yCharPos - parameter;
     9d2:	4a09      	ldr	r2, [pc, #36]	; (9f8 <CPL+0x7c>)
     9d4:	8813      	ldrh	r3, [r2, #0]
     9d6:	1b1c      	subs	r4, r3, r4
     9d8:	b2a4      	uxth	r4, r4
     9da:	8014      	strh	r4, [r2, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     9dc:	4b05      	ldr	r3, [pc, #20]	; (9f4 <CPL+0x78>)
     9de:	881b      	ldrh	r3, [r3, #0]
     9e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     9e4:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
		drawChar(tempCharacter);
     9e8:	5d28      	ldrb	r0, [r5, r4]
     9ea:	47b0      	blx	r6
     9ec:	e7e1      	b.n	9b2 <CPL+0x36>
     9ee:	bf00      	nop
     9f0:	00000241 	.word	0x00000241
     9f4:	200004e2 	.word	0x200004e2
     9f8:	200004e4 	.word	0x200004e4
     9fc:	200005ec 	.word	0x200005ec
     a00:	000038b1 	.word	0x000038b1
     a04:	00003c09 	.word	0x00003c09
     a08:	200004e7 	.word	0x200004e7
     a0c:	00000255 	.word	0x00000255

00000a10 <CHA>:
	
}

void CHA() //Cursor Horizontal Absolute *
{
     a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	unsigned char tempCharacter;
	uint8_t parameter = 0;
	
	if(isEmptyParam())
     a14:	4b16      	ldr	r3, [pc, #88]	; (a70 <CHA+0x60>)
     a16:	4798      	blx	r3
     a18:	b1f0      	cbz	r0, a58 <CHA+0x48>
	{
		parameter = 1;
     a1a:	2401      	movs	r4, #1
		{
			parameter = 79;
		}
	}
	
	drawChar(consoleDisplay[xCharPos][yCharPos]);
     a1c:	4d15      	ldr	r5, [pc, #84]	; (a74 <CHA+0x64>)
     a1e:	f8df 806c 	ldr.w	r8, [pc, #108]	; a8c <CHA+0x7c>
     a22:	f8b8 3000 	ldrh.w	r3, [r8]
     a26:	4f14      	ldr	r7, [pc, #80]	; (a78 <CHA+0x68>)
     a28:	883a      	ldrh	r2, [r7, #0]
     a2a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     a2e:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
     a32:	5c98      	ldrb	r0, [r3, r2]
     a34:	4e11      	ldr	r6, [pc, #68]	; (a7c <CHA+0x6c>)
     a36:	47b0      	blx	r6
	xCharPos = parameter;
     a38:	f8a8 4000 	strh.w	r4, [r8]
	tempCharacter = consoleDisplay[xCharPos][yCharPos];
     a3c:	883b      	ldrh	r3, [r7, #0]
     a3e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
     a42:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
	drawChar(tempCharacter);
     a46:	5ce0      	ldrb	r0, [r4, r3]
     a48:	47b0      	blx	r6
	
	blinkCursor();
     a4a:	4b0d      	ldr	r3, [pc, #52]	; (a80 <CHA+0x70>)
     a4c:	4798      	blx	r3
	currentState = stateGround;
     a4e:	2200      	movs	r2, #0
     a50:	4b0c      	ldr	r3, [pc, #48]	; (a84 <CHA+0x74>)
     a52:	701a      	strb	r2, [r3, #0]
     a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		parameter = dequeueParam();
     a58:	4b0b      	ldr	r3, [pc, #44]	; (a88 <CHA+0x78>)
     a5a:	4798      	blx	r3
		if(parameter > 0)
     a5c:	4604      	mov	r4, r0
     a5e:	b108      	cbz	r0, a64 <CHA+0x54>
			parameter--;  //need to decrement, because display is indexed at 0,0.
     a60:	1e44      	subs	r4, r0, #1
     a62:	b2e4      	uxtb	r4, r4
     a64:	2c4f      	cmp	r4, #79	; 0x4f
     a66:	bf28      	it	cs
     a68:	244f      	movcs	r4, #79	; 0x4f
     a6a:	b2e4      	uxtb	r4, r4
     a6c:	e7d6      	b.n	a1c <CHA+0xc>
     a6e:	bf00      	nop
     a70:	00000241 	.word	0x00000241
     a74:	200005ec 	.word	0x200005ec
     a78:	200004e4 	.word	0x200004e4
     a7c:	000038b1 	.word	0x000038b1
     a80:	00003c09 	.word	0x00003c09
     a84:	200004e7 	.word	0x200004e7
     a88:	00000255 	.word	0x00000255
     a8c:	200004e2 	.word	0x200004e2

00000a90 <CUP>:
}

void CUP() //Cursor Position *
{
     a90:	b538      	push	{r3, r4, r5, lr}
	unsigned char tempCharacter;
	uint8_t xTemp = 0;
	uint8_t yTemp = 0;
	
	yTemp = dequeueParam();
     a92:	4d29      	ldr	r5, [pc, #164]	; (b38 <CUP+0xa8>)
     a94:	47a8      	blx	r5
     a96:	4604      	mov	r4, r0
	xTemp = dequeueParam();
     a98:	47a8      	blx	r5
     a9a:	4605      	mov	r5, r0
	
	//need to decrement, because display is indexed at 0,0.
	if(yTemp > 0)
     a9c:	b10c      	cbz	r4, aa2 <CUP+0x12>
		yTemp = yTemp - 1;
     a9e:	3c01      	subs	r4, #1
     aa0:	b2e4      	uxtb	r4, r4
		
	if(xTemp > 0)
     aa2:	b10d      	cbz	r5, aa8 <CUP+0x18>
		xTemp = xTemp - 1;
     aa4:	3d01      	subs	r5, #1
     aa6:	b2ed      	uxtb	r5, r5
	
	drawChar(consoleDisplay[xCharPos][yCharPos]);
     aa8:	4b24      	ldr	r3, [pc, #144]	; (b3c <CUP+0xac>)
     aaa:	881b      	ldrh	r3, [r3, #0]
     aac:	4a24      	ldr	r2, [pc, #144]	; (b40 <CUP+0xb0>)
     aae:	8811      	ldrh	r1, [r2, #0]
     ab0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     ab4:	4a23      	ldr	r2, [pc, #140]	; (b44 <CUP+0xb4>)
     ab6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
     aba:	5c58      	ldrb	r0, [r3, r1]
     abc:	4b22      	ldr	r3, [pc, #136]	; (b48 <CUP+0xb8>)
     abe:	4798      	blx	r3
	
	if(originMode == DISPLACED)
     ac0:	4b22      	ldr	r3, [pc, #136]	; (b4c <CUP+0xbc>)
     ac2:	781b      	ldrb	r3, [r3, #0]
     ac4:	2b01      	cmp	r3, #1
     ac6:	d01a      	beq.n	afe <CUP+0x6e>
	}
	else
	{
		//This sets the cursor relative to 0,0
		
		if(yTemp <= 24)
     ac8:	2c18      	cmp	r4, #24
     aca:	d82d      	bhi.n	b28 <CUP+0x98>
			yCharPos = yTemp;
     acc:	4b1c      	ldr	r3, [pc, #112]	; (b40 <CUP+0xb0>)
     ace:	801c      	strh	r4, [r3, #0]
		else
			yCharPos = 24;
			
		if(xTemp <= 80)
     ad0:	2d50      	cmp	r5, #80	; 0x50
     ad2:	d92d      	bls.n	b30 <CUP+0xa0>
			xCharPos = xTemp;
		else
			xCharPos = 80; 
     ad4:	2250      	movs	r2, #80	; 0x50
     ad6:	4b19      	ldr	r3, [pc, #100]	; (b3c <CUP+0xac>)
     ad8:	801a      	strh	r2, [r3, #0]
	}

	tempCharacter = consoleDisplay[xCharPos][yCharPos];
     ada:	4b18      	ldr	r3, [pc, #96]	; (b3c <CUP+0xac>)
     adc:	881b      	ldrh	r3, [r3, #0]
     ade:	4a18      	ldr	r2, [pc, #96]	; (b40 <CUP+0xb0>)
     ae0:	8811      	ldrh	r1, [r2, #0]
     ae2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     ae6:	4a17      	ldr	r2, [pc, #92]	; (b44 <CUP+0xb4>)
     ae8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
	drawChar(tempCharacter);
     aec:	5c58      	ldrb	r0, [r3, r1]
     aee:	4b16      	ldr	r3, [pc, #88]	; (b48 <CUP+0xb8>)
     af0:	4798      	blx	r3

	blinkCursor();
     af2:	4b17      	ldr	r3, [pc, #92]	; (b50 <CUP+0xc0>)
     af4:	4798      	blx	r3
	currentState = stateGround;
     af6:	2200      	movs	r2, #0
     af8:	4b16      	ldr	r3, [pc, #88]	; (b54 <CUP+0xc4>)
     afa:	701a      	strb	r2, [r3, #0]
     afc:	bd38      	pop	{r3, r4, r5, pc}
		if((topMargin + yTemp) <= bottomMargin)
     afe:	4b16      	ldr	r3, [pc, #88]	; (b58 <CUP+0xc8>)
     b00:	781a      	ldrb	r2, [r3, #0]
     b02:	4b16      	ldr	r3, [pc, #88]	; (b5c <CUP+0xcc>)
     b04:	781b      	ldrb	r3, [r3, #0]
     b06:	b2db      	uxtb	r3, r3
     b08:	4422      	add	r2, r4
     b0a:	429a      	cmp	r2, r3
     b0c:	dc07      	bgt.n	b1e <CUP+0x8e>
			yCharPos = topMargin + yTemp;
     b0e:	4b12      	ldr	r3, [pc, #72]	; (b58 <CUP+0xc8>)
     b10:	781b      	ldrb	r3, [r3, #0]
     b12:	441c      	add	r4, r3
     b14:	4b0a      	ldr	r3, [pc, #40]	; (b40 <CUP+0xb0>)
     b16:	801c      	strh	r4, [r3, #0]
		xCharPos = xTemp;
     b18:	4b08      	ldr	r3, [pc, #32]	; (b3c <CUP+0xac>)
     b1a:	801d      	strh	r5, [r3, #0]
     b1c:	e7dd      	b.n	ada <CUP+0x4a>
			yCharPos = bottomMargin;
     b1e:	4b0f      	ldr	r3, [pc, #60]	; (b5c <CUP+0xcc>)
     b20:	781a      	ldrb	r2, [r3, #0]
     b22:	4b07      	ldr	r3, [pc, #28]	; (b40 <CUP+0xb0>)
     b24:	801a      	strh	r2, [r3, #0]
     b26:	e7f7      	b.n	b18 <CUP+0x88>
			yCharPos = 24;
     b28:	2218      	movs	r2, #24
     b2a:	4b05      	ldr	r3, [pc, #20]	; (b40 <CUP+0xb0>)
     b2c:	801a      	strh	r2, [r3, #0]
     b2e:	e7cf      	b.n	ad0 <CUP+0x40>
			xCharPos = xTemp;
     b30:	4b02      	ldr	r3, [pc, #8]	; (b3c <CUP+0xac>)
     b32:	801d      	strh	r5, [r3, #0]
     b34:	e7d1      	b.n	ada <CUP+0x4a>
     b36:	bf00      	nop
     b38:	00000255 	.word	0x00000255
     b3c:	200004e2 	.word	0x200004e2
     b40:	200004e4 	.word	0x200004e4
     b44:	200005ec 	.word	0x200005ec
     b48:	000038b1 	.word	0x000038b1
     b4c:	200004e0 	.word	0x200004e0
     b50:	00003c09 	.word	0x00003c09
     b54:	200004e7 	.word	0x200004e7
     b58:	20000029 	.word	0x20000029
     b5c:	20000028 	.word	0x20000028

00000b60 <ED>:
	//do this later
	currentState = stateGround;
}

void ED() //Edit In Display *
{
     b60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t parameter;
	
	uint8_t xTemp = xCharPos;
     b64:	4b6c      	ldr	r3, [pc, #432]	; (d18 <ED+0x1b8>)
     b66:	f8b3 a000 	ldrh.w	sl, [r3]
	uint8_t yTemp = yCharPos;
     b6a:	4b6c      	ldr	r3, [pc, #432]	; (d1c <ED+0x1bc>)
     b6c:	f8b3 9000 	ldrh.w	r9, [r3]
	
	cursorBlinkState = false;  //need to turn the blinking off; ugly kludge
     b70:	2200      	movs	r2, #0
     b72:	4b6b      	ldr	r3, [pc, #428]	; (d20 <ED+0x1c0>)
     b74:	701a      	strb	r2, [r3, #0]
	
	if(isEmptyParam())
     b76:	4b6b      	ldr	r3, [pc, #428]	; (d24 <ED+0x1c4>)
     b78:	4798      	blx	r3
     b7a:	b310      	cbz	r0, bc2 <ED+0x62>
				consoleSGR[xCharPos][yCharPos] = 0x00;
				consoleColors[xCharPos][yCharPos] = 0xFFFF0000;
				drawChar(0x00);
			}
			//second step, erase previous lines
			for(int j = 0 ; j < yTemp ; j++)
     b7c:	2500      	movs	r5, #0
		case 2:			//Erases entire display
			for(int j = 0 ; j < 24 ; j++)
			{
				for(int i = 0 ; i < 80 ; i++)
				{
					xCharPos = i;
     b7e:	f8df 8198 	ldr.w	r8, [pc, #408]	; d18 <ED+0x1b8>
					yCharPos = j;
     b82:	4f66      	ldr	r7, [pc, #408]	; (d1c <ED+0x1bc>)
					consoleSGR[xCharPos][yCharPos] = 0x00;
     b84:	4e68      	ldr	r6, [pc, #416]	; (d28 <ED+0x1c8>)
			for(int j = 0 ; j < yTemp ; j++)
     b86:	2400      	movs	r4, #0
					xCharPos = i;
     b88:	f8a8 4000 	strh.w	r4, [r8]
					yCharPos = j;
     b8c:	803d      	strh	r5, [r7, #0]
     b8e:	b2a1      	uxth	r1, r4
     b90:	b2ab      	uxth	r3, r5
					consoleSGR[xCharPos][yCharPos] = 0x00;
     b92:	004a      	lsls	r2, r1, #1
     b94:	eb02 0e01 	add.w	lr, r2, r1
     b98:	eb06 0ece 	add.w	lr, r6, lr, lsl #3
     b9c:	2000      	movs	r0, #0
     b9e:	f80e 0003 	strb.w	r0, [lr, r3]
					consoleColors[xCharPos][yCharPos] = 0xFFFF0000;
     ba2:	440a      	add	r2, r1
     ba4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
     ba8:	4960      	ldr	r1, [pc, #384]	; (d2c <ED+0x1cc>)
     baa:	4a61      	ldr	r2, [pc, #388]	; (d30 <ED+0x1d0>)
     bac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					drawChar(0x00);
     bb0:	4b60      	ldr	r3, [pc, #384]	; (d34 <ED+0x1d4>)
     bb2:	4798      	blx	r3
				for(int i = 0 ; i < 80 ; i++)
     bb4:	3401      	adds	r4, #1
     bb6:	2c50      	cmp	r4, #80	; 0x50
     bb8:	d1e6      	bne.n	b88 <ED+0x28>
			for(int j = 0 ; j < 24 ; j++)
     bba:	3501      	adds	r5, #1
     bbc:	2d18      	cmp	r5, #24
     bbe:	d1e2      	bne.n	b86 <ED+0x26>
     bc0:	e095      	b.n	cee <ED+0x18e>
	uint8_t xTemp = xCharPos;
     bc2:	fa5f f68a 	uxtb.w	r6, sl
	uint8_t yTemp = yCharPos;
     bc6:	fa5f f589 	uxtb.w	r5, r9
		parameter = dequeueParam();
     bca:	4b5b      	ldr	r3, [pc, #364]	; (d38 <ED+0x1d8>)
     bcc:	4798      	blx	r3
	switch(parameter)
     bce:	2801      	cmp	r0, #1
     bd0:	d005      	beq.n	bde <ED+0x7e>
     bd2:	2800      	cmp	r0, #0
     bd4:	d048      	beq.n	c68 <ED+0x108>
     bd6:	2802      	cmp	r0, #2
     bd8:	f040 8089 	bne.w	cee <ED+0x18e>
     bdc:	e7ce      	b.n	b7c <ED+0x1c>
			for(int i = 0 ;  i <= xTemp ;  i++)
     bde:	2400      	movs	r4, #0
				xCharPos = i;
     be0:	f8df b134 	ldr.w	fp, [pc, #308]	; d18 <ED+0x1b8>
				consoleSGR[xCharPos][yCharPos] = 0x00;
     be4:	f8df 8134 	ldr.w	r8, [pc, #308]	; d1c <ED+0x1bc>
     be8:	4f4f      	ldr	r7, [pc, #316]	; (d28 <ED+0x1c8>)
				xCharPos = i;
     bea:	f8ab 4000 	strh.w	r4, [fp]
     bee:	b2a1      	uxth	r1, r4
				consoleSGR[xCharPos][yCharPos] = 0x00;
     bf0:	f8b8 3000 	ldrh.w	r3, [r8]
     bf4:	004a      	lsls	r2, r1, #1
     bf6:	eb02 0e01 	add.w	lr, r2, r1
     bfa:	eb07 0ece 	add.w	lr, r7, lr, lsl #3
     bfe:	2000      	movs	r0, #0
     c00:	f80e 0003 	strb.w	r0, [lr, r3]
				consoleColors[xCharPos][yCharPos] = 0xFFFF0000;
     c04:	440a      	add	r2, r1
     c06:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
     c0a:	4948      	ldr	r1, [pc, #288]	; (d2c <ED+0x1cc>)
     c0c:	4a48      	ldr	r2, [pc, #288]	; (d30 <ED+0x1d0>)
     c0e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				drawChar(0x00);
     c12:	4b48      	ldr	r3, [pc, #288]	; (d34 <ED+0x1d4>)
     c14:	4798      	blx	r3
			for(int i = 0 ;  i <= xTemp ;  i++)
     c16:	3401      	adds	r4, #1
     c18:	42b4      	cmp	r4, r6
     c1a:	dde6      	ble.n	bea <ED+0x8a>
			for(int j = 0 ; j < yTemp ; j++)
     c1c:	46ab      	mov	fp, r5
     c1e:	2d00      	cmp	r5, #0
     c20:	d065      	beq.n	cee <ED+0x18e>
     c22:	2500      	movs	r5, #0
					xCharPos = i;
     c24:	f8df 80f0 	ldr.w	r8, [pc, #240]	; d18 <ED+0x1b8>
					yCharPos = j;
     c28:	4f3c      	ldr	r7, [pc, #240]	; (d1c <ED+0x1bc>)
					consoleSGR[xCharPos][yCharPos] = 0x00;
     c2a:	4e3f      	ldr	r6, [pc, #252]	; (d28 <ED+0x1c8>)
			for(int i = 0 ;  i <= xTemp ;  i++)
     c2c:	2400      	movs	r4, #0
					xCharPos = i;
     c2e:	f8a8 4000 	strh.w	r4, [r8]
					yCharPos = j;
     c32:	803d      	strh	r5, [r7, #0]
     c34:	b2a1      	uxth	r1, r4
     c36:	b2ab      	uxth	r3, r5
					consoleSGR[xCharPos][yCharPos] = 0x00;
     c38:	004a      	lsls	r2, r1, #1
     c3a:	eb02 0e01 	add.w	lr, r2, r1
     c3e:	eb06 0ece 	add.w	lr, r6, lr, lsl #3
     c42:	2000      	movs	r0, #0
     c44:	f80e 0003 	strb.w	r0, [lr, r3]
					consoleColors[xCharPos][yCharPos] = 0xFFFF0000;
     c48:	440a      	add	r2, r1
     c4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
     c4e:	4937      	ldr	r1, [pc, #220]	; (d2c <ED+0x1cc>)
     c50:	4a37      	ldr	r2, [pc, #220]	; (d30 <ED+0x1d0>)
     c52:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					drawChar(0x00);
     c56:	4b37      	ldr	r3, [pc, #220]	; (d34 <ED+0x1d4>)
     c58:	4798      	blx	r3
				for(int i = 0 ; i < 80 ; i++)
     c5a:	3401      	adds	r4, #1
     c5c:	2c50      	cmp	r4, #80	; 0x50
     c5e:	d1e6      	bne.n	c2e <ED+0xce>
			for(int j = 0 ; j < yTemp ; j++)
     c60:	3501      	adds	r5, #1
     c62:	455d      	cmp	r5, fp
     c64:	dbe2      	blt.n	c2c <ED+0xcc>
     c66:	e042      	b.n	cee <ED+0x18e>
			for(int i = xTemp ;  i <= 78 ;  i++)
     c68:	4634      	mov	r4, r6
     c6a:	2e4e      	cmp	r6, #78	; 0x4e
     c6c:	dc1b      	bgt.n	ca6 <ED+0x146>
				xCharPos = i;
     c6e:	f8df 80a8 	ldr.w	r8, [pc, #168]	; d18 <ED+0x1b8>
				consoleSGR[xCharPos][yCharPos] = 0x00;
     c72:	4f2a      	ldr	r7, [pc, #168]	; (d1c <ED+0x1bc>)
     c74:	4e2c      	ldr	r6, [pc, #176]	; (d28 <ED+0x1c8>)
				xCharPos = i;
     c76:	f8a8 4000 	strh.w	r4, [r8]
     c7a:	b2a1      	uxth	r1, r4
				consoleSGR[xCharPos][yCharPos] = 0x00;
     c7c:	883b      	ldrh	r3, [r7, #0]
     c7e:	004a      	lsls	r2, r1, #1
     c80:	eb02 0e01 	add.w	lr, r2, r1
     c84:	eb06 0ece 	add.w	lr, r6, lr, lsl #3
     c88:	2000      	movs	r0, #0
     c8a:	f80e 0003 	strb.w	r0, [lr, r3]
				consoleColors[xCharPos][yCharPos] = 0xFFFF0000;
     c8e:	440a      	add	r2, r1
     c90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
     c94:	4925      	ldr	r1, [pc, #148]	; (d2c <ED+0x1cc>)
     c96:	4a26      	ldr	r2, [pc, #152]	; (d30 <ED+0x1d0>)
     c98:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				drawChar(0x00);
     c9c:	4b25      	ldr	r3, [pc, #148]	; (d34 <ED+0x1d4>)
     c9e:	4798      	blx	r3
			for(int i = xTemp ;  i <= 78 ;  i++)
     ca0:	3401      	adds	r4, #1
     ca2:	2c4f      	cmp	r4, #79	; 0x4f
     ca4:	d1e7      	bne.n	c76 <ED+0x116>
			for(int j = yTemp+1 ; j < 24 ; j++)
     ca6:	3501      	adds	r5, #1
     ca8:	2d17      	cmp	r5, #23
     caa:	dc20      	bgt.n	cee <ED+0x18e>
					xCharPos = i;
     cac:	f8df 8068 	ldr.w	r8, [pc, #104]	; d18 <ED+0x1b8>
					yCharPos = j;
     cb0:	4f1a      	ldr	r7, [pc, #104]	; (d1c <ED+0x1bc>)
					consoleSGR[xCharPos][yCharPos] = 0x00;
     cb2:	4e1d      	ldr	r6, [pc, #116]	; (d28 <ED+0x1c8>)
{
     cb4:	2400      	movs	r4, #0
					xCharPos = i;
     cb6:	f8a8 4000 	strh.w	r4, [r8]
					yCharPos = j;
     cba:	803d      	strh	r5, [r7, #0]
     cbc:	b2a1      	uxth	r1, r4
     cbe:	b2ab      	uxth	r3, r5
					consoleSGR[xCharPos][yCharPos] = 0x00;
     cc0:	004a      	lsls	r2, r1, #1
     cc2:	eb02 0e01 	add.w	lr, r2, r1
     cc6:	eb06 0ece 	add.w	lr, r6, lr, lsl #3
     cca:	2000      	movs	r0, #0
     ccc:	f80e 0003 	strb.w	r0, [lr, r3]
					consoleColors[xCharPos][yCharPos] = 0xFFFF0000;
     cd0:	440a      	add	r2, r1
     cd2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
     cd6:	4915      	ldr	r1, [pc, #84]	; (d2c <ED+0x1cc>)
     cd8:	4a15      	ldr	r2, [pc, #84]	; (d30 <ED+0x1d0>)
     cda:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					drawChar(0x00);
     cde:	4b15      	ldr	r3, [pc, #84]	; (d34 <ED+0x1d4>)
     ce0:	4798      	blx	r3
				for(int i = 0 ; i < 80 ; i++)
     ce2:	3401      	adds	r4, #1
     ce4:	2c50      	cmp	r4, #80	; 0x50
     ce6:	d1e6      	bne.n	cb6 <ED+0x156>
			for(int j = yTemp+1 ; j < 24 ; j++)
     ce8:	3501      	adds	r5, #1
     cea:	2d18      	cmp	r5, #24
     cec:	d1e2      	bne.n	cb4 <ED+0x154>
				}
			}
		break;
	}
	
	blinkCursor();
     cee:	4b13      	ldr	r3, [pc, #76]	; (d3c <ED+0x1dc>)
     cf0:	4798      	blx	r3
	xCharPos = xTemp;
     cf2:	fa5f fa8a 	uxtb.w	sl, sl
     cf6:	4b08      	ldr	r3, [pc, #32]	; (d18 <ED+0x1b8>)
     cf8:	f8a3 a000 	strh.w	sl, [r3]
	yCharPos = yTemp;
     cfc:	fa5f f989 	uxtb.w	r9, r9
     d00:	4b06      	ldr	r3, [pc, #24]	; (d1c <ED+0x1bc>)
     d02:	f8a3 9000 	strh.w	r9, [r3]
	drawChar(0x00);
     d06:	2000      	movs	r0, #0
     d08:	4b0a      	ldr	r3, [pc, #40]	; (d34 <ED+0x1d4>)
     d0a:	4798      	blx	r3
	
	currentState = stateGround;	
     d0c:	2200      	movs	r2, #0
     d0e:	4b0c      	ldr	r3, [pc, #48]	; (d40 <ED+0x1e0>)
     d10:	701a      	strb	r2, [r3, #0]
     d12:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     d16:	bf00      	nop
     d18:	200004e2 	.word	0x200004e2
     d1c:	200004e4 	.word	0x200004e4
     d20:	2000002a 	.word	0x2000002a
     d24:	00000241 	.word	0x00000241
     d28:	20000d6c 	.word	0x20000d6c
     d2c:	ffff0000 	.word	0xffff0000
     d30:	200014ec 	.word	0x200014ec
     d34:	000038b1 	.word	0x000038b1
     d38:	00000255 	.word	0x00000255
     d3c:	00003c09 	.word	0x00003c09
     d40:	200004e7 	.word	0x200004e7

00000d44 <EL>:


}

void EL() //Edit In Line *
{
     d44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	unsigned char tempCharacter;
	uint8_t parameter;
	
	uint8_t xTemp = xCharPos;
     d48:	4b32      	ldr	r3, [pc, #200]	; (e14 <EL+0xd0>)
     d4a:	f8b3 8000 	ldrh.w	r8, [r3]
     d4e:	fa5f fb88 	uxtb.w	fp, r8
	uint8_t yTemp = yCharPos;
     d52:	4b31      	ldr	r3, [pc, #196]	; (e18 <EL+0xd4>)
     d54:	f8b3 9000 	ldrh.w	r9, [r3]
	
	cursorBlinkState = false;  //need to turn the blinking off; ugly kludge
     d58:	2200      	movs	r2, #0
     d5a:	4b30      	ldr	r3, [pc, #192]	; (e1c <EL+0xd8>)
     d5c:	701a      	strb	r2, [r3, #0]
	
	if(isEmptyParam())
     d5e:	4b30      	ldr	r3, [pc, #192]	; (e20 <EL+0xdc>)
     d60:	4798      	blx	r3
     d62:	b1c0      	cbz	r0, d96 <EL+0x52>
	else
	{
		parameter = dequeueParam();
	}
	
	tempCharacter = consoleDisplay[xCharPos][yCharPos];
     d64:	4b2b      	ldr	r3, [pc, #172]	; (e14 <EL+0xd0>)
     d66:	881b      	ldrh	r3, [r3, #0]
     d68:	4a2b      	ldr	r2, [pc, #172]	; (e18 <EL+0xd4>)
     d6a:	8811      	ldrh	r1, [r2, #0]
     d6c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     d70:	4a2c      	ldr	r2, [pc, #176]	; (e24 <EL+0xe0>)
     d72:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
     d76:	f813 a001 	ldrb.w	sl, [r3, r1]
	
	switch(parameter)
	{
		case 0:			//Erases from cursor to end of line
			for(int i = xTemp ;  i <= 79 ;  i++)
     d7a:	465c      	mov	r4, fp
     d7c:	f1bb 0f4f 	cmp.w	fp, #79	; 0x4f
     d80:	dc26      	bgt.n	dd0 <EL+0x8c>
			{
				xCharPos = i;
     d82:	4f24      	ldr	r7, [pc, #144]	; (e14 <EL+0xd0>)
				drawChar(0x00);
     d84:	2600      	movs	r6, #0
     d86:	4d28      	ldr	r5, [pc, #160]	; (e28 <EL+0xe4>)
				xCharPos = i;
     d88:	803c      	strh	r4, [r7, #0]
				drawChar(0x00);
     d8a:	4630      	mov	r0, r6
     d8c:	47a8      	blx	r5
			for(int i = xTemp ;  i <= 79 ;  i++)
     d8e:	3401      	adds	r4, #1
     d90:	2c50      	cmp	r4, #80	; 0x50
     d92:	d1f9      	bne.n	d88 <EL+0x44>
     d94:	e01c      	b.n	dd0 <EL+0x8c>
		parameter = dequeueParam();
     d96:	4b25      	ldr	r3, [pc, #148]	; (e2c <EL+0xe8>)
     d98:	4798      	blx	r3
	tempCharacter = consoleDisplay[xCharPos][yCharPos];
     d9a:	4b1e      	ldr	r3, [pc, #120]	; (e14 <EL+0xd0>)
     d9c:	881b      	ldrh	r3, [r3, #0]
     d9e:	4a1e      	ldr	r2, [pc, #120]	; (e18 <EL+0xd4>)
     da0:	8811      	ldrh	r1, [r2, #0]
     da2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     da6:	4a1f      	ldr	r2, [pc, #124]	; (e24 <EL+0xe0>)
     da8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
     dac:	f813 a001 	ldrb.w	sl, [r3, r1]
	switch(parameter)
     db0:	2801      	cmp	r0, #1
     db2:	d021      	beq.n	df8 <EL+0xb4>
     db4:	2800      	cmp	r0, #0
     db6:	d0e0      	beq.n	d7a <EL+0x36>
     db8:	2802      	cmp	r0, #2
     dba:	d109      	bne.n	dd0 <EL+0x8c>
     dbc:	2400      	movs	r4, #0
			break;
		
		case 2:			//Erases entire line containing cursor
			for(int i = 0 ;  i <= 78 ;  i++)
			{
				xCharPos = i;
     dbe:	4f15      	ldr	r7, [pc, #84]	; (e14 <EL+0xd0>)
				drawChar(0x00);
     dc0:	4626      	mov	r6, r4
     dc2:	4d19      	ldr	r5, [pc, #100]	; (e28 <EL+0xe4>)
				xCharPos = i;
     dc4:	803c      	strh	r4, [r7, #0]
				drawChar(0x00);
     dc6:	4630      	mov	r0, r6
     dc8:	47a8      	blx	r5
			for(int i = 0 ;  i <= 78 ;  i++)
     dca:	3401      	adds	r4, #1
     dcc:	2c4f      	cmp	r4, #79	; 0x4f
     dce:	d1f9      	bne.n	dc4 <EL+0x80>
			}
			break;
	}
	
	blinkCursor();
     dd0:	4b17      	ldr	r3, [pc, #92]	; (e30 <EL+0xec>)
     dd2:	4798      	blx	r3
	xCharPos = xTemp;
     dd4:	fa5f f888 	uxtb.w	r8, r8
     dd8:	4b0e      	ldr	r3, [pc, #56]	; (e14 <EL+0xd0>)
     dda:	f8a3 8000 	strh.w	r8, [r3]
	yCharPos = yTemp;
     dde:	fa5f f989 	uxtb.w	r9, r9
     de2:	4b0d      	ldr	r3, [pc, #52]	; (e18 <EL+0xd4>)
     de4:	f8a3 9000 	strh.w	r9, [r3]
	drawChar(tempCharacter);
     de8:	4650      	mov	r0, sl
     dea:	4b0f      	ldr	r3, [pc, #60]	; (e28 <EL+0xe4>)
     dec:	4798      	blx	r3
	
	currentState = stateGround;	
     dee:	2200      	movs	r2, #0
     df0:	4b10      	ldr	r3, [pc, #64]	; (e34 <EL+0xf0>)
     df2:	701a      	strb	r2, [r3, #0]
}
     df4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			for(int i = 0 ;  i <= xTemp+1 ;  i++)
     df8:	f10b 0b01 	add.w	fp, fp, #1
     dfc:	2400      	movs	r4, #0
				xCharPos = i;
     dfe:	4d05      	ldr	r5, [pc, #20]	; (e14 <EL+0xd0>)
				drawChar(0x00);
     e00:	4627      	mov	r7, r4
     e02:	4e09      	ldr	r6, [pc, #36]	; (e28 <EL+0xe4>)
				xCharPos = i;
     e04:	802c      	strh	r4, [r5, #0]
				drawChar(0x00);
     e06:	4638      	mov	r0, r7
     e08:	47b0      	blx	r6
			for(int i = 0 ;  i <= xTemp+1 ;  i++)
     e0a:	3401      	adds	r4, #1
     e0c:	455c      	cmp	r4, fp
     e0e:	ddf9      	ble.n	e04 <EL+0xc0>
     e10:	e7de      	b.n	dd0 <EL+0x8c>
     e12:	bf00      	nop
     e14:	200004e2 	.word	0x200004e2
     e18:	200004e4 	.word	0x200004e4
     e1c:	2000002a 	.word	0x2000002a
     e20:	00000241 	.word	0x00000241
     e24:	200005ec 	.word	0x200005ec
     e28:	000038b1 	.word	0x000038b1
     e2c:	00000255 	.word	0x00000255
     e30:	00003c09 	.word	0x00003c09
     e34:	200004e7 	.word	0x200004e7

00000e38 <SGR>:

void SGR() //Select Graphic Rendition *
{
     e38:	b5f0      	push	{r4, r5, r6, r7, lr}
     e3a:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
	
	uint16_t eightBitColor[256] = 
     e3e:	f44f 7200 	mov.w	r2, #512	; 0x200
     e42:	49af      	ldr	r1, [pc, #700]	; (1100 <SGR+0x2c8>)
     e44:	4668      	mov	r0, sp
     e46:	4baf      	ldr	r3, [pc, #700]	; (1104 <SGR+0x2cc>)
     e48:	4798      	blx	r3
		0x5ACB,0x630C,0x632C,0x73AE,0x8410,0x8C51,0x94B2,0x9CF3,0xAD55,0xB596,
		0xBDF7,0xC638,0xD69A,0xDEDB,0xE73C,0xEF7D
	};
	
	uint8_t parameter;	
	cursorBlinkState = false;  //need to turn the blinking off; ugly kludge
     e4a:	2200      	movs	r2, #0
     e4c:	4bae      	ldr	r3, [pc, #696]	; (1108 <SGR+0x2d0>)
     e4e:	701a      	strb	r2, [r3, #0]
	uint8_t r = 0;
	uint8_t g = 0;
	uint8_t b = 0;	
	
	if(isEmptyParam())
     e50:	4bae      	ldr	r3, [pc, #696]	; (110c <SGR+0x2d4>)
     e52:	4798      	blx	r3
     e54:	b910      	cbnz	r0, e5c <SGR+0x24>
		textBackground = defaultBackgroundColor;
							
	}
	else
	{
		while(!isEmptyParam())
     e56:	4dad      	ldr	r5, [pc, #692]	; (110c <SGR+0x2d4>)
		{
			parameter = dequeueParam();
     e58:	4cad      	ldr	r4, [pc, #692]	; (1110 <SGR+0x2d8>)
     e5a:	e029      	b.n	eb0 <SGR+0x78>
		textBold = false;
     e5c:	2300      	movs	r3, #0
     e5e:	4aad      	ldr	r2, [pc, #692]	; (1114 <SGR+0x2dc>)
     e60:	7013      	strb	r3, [r2, #0]
		textUnderscore = false;
     e62:	4aad      	ldr	r2, [pc, #692]	; (1118 <SGR+0x2e0>)
     e64:	7013      	strb	r3, [r2, #0]
		textBlink = false;
     e66:	4aad      	ldr	r2, [pc, #692]	; (111c <SGR+0x2e4>)
     e68:	7013      	strb	r3, [r2, #0]
		textReverseVideo = false;
     e6a:	4aad      	ldr	r2, [pc, #692]	; (1120 <SGR+0x2e8>)
     e6c:	7013      	strb	r3, [r2, #0]
		textForeground = defaultForegroundColor;
     e6e:	4bad      	ldr	r3, [pc, #692]	; (1124 <SGR+0x2ec>)
     e70:	881a      	ldrh	r2, [r3, #0]
     e72:	4bad      	ldr	r3, [pc, #692]	; (1128 <SGR+0x2f0>)
     e74:	801a      	strh	r2, [r3, #0]
		textBackground = defaultBackgroundColor;
     e76:	4bad      	ldr	r3, [pc, #692]	; (112c <SGR+0x2f4>)
     e78:	881a      	ldrh	r2, [r3, #0]
     e7a:	4bad      	ldr	r3, [pc, #692]	; (1130 <SGR+0x2f8>)
     e7c:	801a      	strh	r2, [r3, #0]
				
			}
		}	
	}
	
	blinkCursor();
     e7e:	4bad      	ldr	r3, [pc, #692]	; (1134 <SGR+0x2fc>)
     e80:	4798      	blx	r3
	currentState = stateGround;
     e82:	2200      	movs	r2, #0
     e84:	4bac      	ldr	r3, [pc, #688]	; (1138 <SGR+0x300>)
     e86:	701a      	strb	r2, [r3, #0]
}
     e88:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
     e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
					textBold = false;
     e8e:	2300      	movs	r3, #0
     e90:	4aa0      	ldr	r2, [pc, #640]	; (1114 <SGR+0x2dc>)
     e92:	7013      	strb	r3, [r2, #0]
					textUnderscore = false;
     e94:	4aa0      	ldr	r2, [pc, #640]	; (1118 <SGR+0x2e0>)
     e96:	7013      	strb	r3, [r2, #0]
					textBlink = false;
     e98:	4aa0      	ldr	r2, [pc, #640]	; (111c <SGR+0x2e4>)
     e9a:	7013      	strb	r3, [r2, #0]
					textReverseVideo = false;
     e9c:	4aa0      	ldr	r2, [pc, #640]	; (1120 <SGR+0x2e8>)
     e9e:	7013      	strb	r3, [r2, #0]
					textForeground = defaultForegroundColor;
     ea0:	4ba0      	ldr	r3, [pc, #640]	; (1124 <SGR+0x2ec>)
     ea2:	881a      	ldrh	r2, [r3, #0]
     ea4:	4ba0      	ldr	r3, [pc, #640]	; (1128 <SGR+0x2f0>)
     ea6:	801a      	strh	r2, [r3, #0]
					textBackground = defaultBackgroundColor;
     ea8:	4ba0      	ldr	r3, [pc, #640]	; (112c <SGR+0x2f4>)
     eaa:	881a      	ldrh	r2, [r3, #0]
     eac:	4ba0      	ldr	r3, [pc, #640]	; (1130 <SGR+0x2f8>)
     eae:	801a      	strh	r2, [r3, #0]
		while(!isEmptyParam())
     eb0:	47a8      	blx	r5
     eb2:	2800      	cmp	r0, #0
     eb4:	d1e3      	bne.n	e7e <SGR+0x46>
			parameter = dequeueParam();
     eb6:	47a0      	blx	r4
			switch(parameter)
     eb8:	2831      	cmp	r0, #49	; 0x31
     eba:	d8f9      	bhi.n	eb0 <SGR+0x78>
     ebc:	a301      	add	r3, pc, #4	; (adr r3, ec4 <SGR+0x8c>)
     ebe:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
     ec2:	bf00      	nop
     ec4:	00000e8f 	.word	0x00000e8f
     ec8:	00000f8d 	.word	0x00000f8d
     ecc:	0000113d 	.word	0x0000113d
     ed0:	00000eb1 	.word	0x00000eb1
     ed4:	00000f95 	.word	0x00000f95
     ed8:	00000f9d 	.word	0x00000f9d
     edc:	00000eb1 	.word	0x00000eb1
     ee0:	00000fa5 	.word	0x00000fa5
     ee4:	00000eb1 	.word	0x00000eb1
     ee8:	00000eb1 	.word	0x00000eb1
     eec:	00000eb1 	.word	0x00000eb1
     ef0:	00000eb1 	.word	0x00000eb1
     ef4:	00000eb1 	.word	0x00000eb1
     ef8:	00000eb1 	.word	0x00000eb1
     efc:	00000eb1 	.word	0x00000eb1
     f00:	00000eb1 	.word	0x00000eb1
     f04:	00000eb1 	.word	0x00000eb1
     f08:	00000eb1 	.word	0x00000eb1
     f0c:	00000eb1 	.word	0x00000eb1
     f10:	00000eb1 	.word	0x00000eb1
     f14:	00000eb1 	.word	0x00000eb1
     f18:	00000fad 	.word	0x00000fad
     f1c:	00000fb5 	.word	0x00000fb5
     f20:	00000eb1 	.word	0x00000eb1
     f24:	00000fbd 	.word	0x00000fbd
     f28:	00000fc5 	.word	0x00000fc5
     f2c:	00000eb1 	.word	0x00000eb1
     f30:	00000fcd 	.word	0x00000fcd
     f34:	00000eb1 	.word	0x00000eb1
     f38:	00000eb1 	.word	0x00000eb1
     f3c:	00000fd5 	.word	0x00000fd5
     f40:	00000fdd 	.word	0x00000fdd
     f44:	00000fe7 	.word	0x00000fe7
     f48:	00000ff1 	.word	0x00000ff1
     f4c:	00000ffb 	.word	0x00000ffb
     f50:	00001003 	.word	0x00001003
     f54:	0000100d 	.word	0x0000100d
     f58:	00001017 	.word	0x00001017
     f5c:	00001021 	.word	0x00001021
     f60:	00001061 	.word	0x00001061
     f64:	0000106b 	.word	0x0000106b
     f68:	00001073 	.word	0x00001073
     f6c:	0000107d 	.word	0x0000107d
     f70:	00001087 	.word	0x00001087
     f74:	00001091 	.word	0x00001091
     f78:	00001099 	.word	0x00001099
     f7c:	000010a3 	.word	0x000010a3
     f80:	000010ad 	.word	0x000010ad
     f84:	000010b7 	.word	0x000010b7
     f88:	000010f7 	.word	0x000010f7
					textBold = true;
     f8c:	2201      	movs	r2, #1
     f8e:	4b61      	ldr	r3, [pc, #388]	; (1114 <SGR+0x2dc>)
     f90:	701a      	strb	r2, [r3, #0]
					break;
     f92:	e78d      	b.n	eb0 <SGR+0x78>
					textUnderscore = true;
     f94:	2201      	movs	r2, #1
     f96:	4b60      	ldr	r3, [pc, #384]	; (1118 <SGR+0x2e0>)
     f98:	701a      	strb	r2, [r3, #0]
					break;
     f9a:	e789      	b.n	eb0 <SGR+0x78>
					textBlink = true;
     f9c:	2201      	movs	r2, #1
     f9e:	4b5f      	ldr	r3, [pc, #380]	; (111c <SGR+0x2e4>)
     fa0:	701a      	strb	r2, [r3, #0]
					break;
     fa2:	e785      	b.n	eb0 <SGR+0x78>
					textReverseVideo = true;
     fa4:	2201      	movs	r2, #1
     fa6:	4b5e      	ldr	r3, [pc, #376]	; (1120 <SGR+0x2e8>)
     fa8:	701a      	strb	r2, [r3, #0]
					break;
     faa:	e781      	b.n	eb0 <SGR+0x78>
					textUnderscore = true;
     fac:	2201      	movs	r2, #1
     fae:	4b5a      	ldr	r3, [pc, #360]	; (1118 <SGR+0x2e0>)
     fb0:	701a      	strb	r2, [r3, #0]
					break;
     fb2:	e77d      	b.n	eb0 <SGR+0x78>
					textBold = false;
     fb4:	2200      	movs	r2, #0
     fb6:	4b57      	ldr	r3, [pc, #348]	; (1114 <SGR+0x2dc>)
     fb8:	701a      	strb	r2, [r3, #0]
					break;
     fba:	e779      	b.n	eb0 <SGR+0x78>
					textUnderscore = false;
     fbc:	2200      	movs	r2, #0
     fbe:	4b56      	ldr	r3, [pc, #344]	; (1118 <SGR+0x2e0>)
     fc0:	701a      	strb	r2, [r3, #0]
					break;
     fc2:	e775      	b.n	eb0 <SGR+0x78>
					textBlink = false;
     fc4:	2200      	movs	r2, #0
     fc6:	4b55      	ldr	r3, [pc, #340]	; (111c <SGR+0x2e4>)
     fc8:	701a      	strb	r2, [r3, #0]
					break;
     fca:	e771      	b.n	eb0 <SGR+0x78>
					textReverseVideo = false;
     fcc:	2200      	movs	r2, #0
     fce:	4b54      	ldr	r3, [pc, #336]	; (1120 <SGR+0x2e8>)
     fd0:	701a      	strb	r2, [r3, #0]
					break;
     fd2:	e76d      	b.n	eb0 <SGR+0x78>
					textForeground = BLACK;
     fd4:	2200      	movs	r2, #0
     fd6:	4b54      	ldr	r3, [pc, #336]	; (1128 <SGR+0x2f0>)
     fd8:	801a      	strh	r2, [r3, #0]
					break;
     fda:	e769      	b.n	eb0 <SGR+0x78>
					textForeground = RED;
     fdc:	f44f 4278 	mov.w	r2, #63488	; 0xf800
     fe0:	4b51      	ldr	r3, [pc, #324]	; (1128 <SGR+0x2f0>)
     fe2:	801a      	strh	r2, [r3, #0]
					break;
     fe4:	e764      	b.n	eb0 <SGR+0x78>
					textForeground = GREEN;
     fe6:	f44f 6280 	mov.w	r2, #1024	; 0x400
     fea:	4b4f      	ldr	r3, [pc, #316]	; (1128 <SGR+0x2f0>)
     fec:	801a      	strh	r2, [r3, #0]
					break;
     fee:	e75f      	b.n	eb0 <SGR+0x78>
					textForeground = BROWN;
     ff0:	f64f 72e0 	movw	r2, #65504	; 0xffe0
     ff4:	4b4c      	ldr	r3, [pc, #304]	; (1128 <SGR+0x2f0>)
     ff6:	801a      	strh	r2, [r3, #0]
					break;
     ff8:	e75a      	b.n	eb0 <SGR+0x78>
					textForeground = BLUE;
     ffa:	221f      	movs	r2, #31
     ffc:	4b4a      	ldr	r3, [pc, #296]	; (1128 <SGR+0x2f0>)
     ffe:	801a      	strh	r2, [r3, #0]
					break;
    1000:	e756      	b.n	eb0 <SGR+0x78>
					textForeground = MAGENTA;
    1002:	f64f 021f 	movw	r2, #63519	; 0xf81f
    1006:	4b48      	ldr	r3, [pc, #288]	; (1128 <SGR+0x2f0>)
    1008:	801a      	strh	r2, [r3, #0]
					break;
    100a:	e751      	b.n	eb0 <SGR+0x78>
					textForeground = CYAN;
    100c:	f240 72ff 	movw	r2, #2047	; 0x7ff
    1010:	4b45      	ldr	r3, [pc, #276]	; (1128 <SGR+0x2f0>)
    1012:	801a      	strh	r2, [r3, #0]
					break;
    1014:	e74c      	b.n	eb0 <SGR+0x78>
					textForeground = WHITE;
    1016:	f64f 72ff 	movw	r2, #65535	; 0xffff
    101a:	4b43      	ldr	r3, [pc, #268]	; (1128 <SGR+0x2f0>)
    101c:	801a      	strh	r2, [r3, #0]
					break;
    101e:	e747      	b.n	eb0 <SGR+0x78>
					parameter = dequeueParam();
    1020:	47a0      	blx	r4
					if(parameter == 5)	//256 color
    1022:	2805      	cmp	r0, #5
    1024:	d016      	beq.n	1054 <SGR+0x21c>
					if(parameter == 2) //RGB color, 3 parameter r/g/b
    1026:	2802      	cmp	r0, #2
    1028:	f47f af42 	bne.w	eb0 <SGR+0x78>
						r = dequeueParam();
    102c:	47a0      	blx	r4
    102e:	4606      	mov	r6, r0
						g = dequeueParam();
    1030:	47a0      	blx	r4
    1032:	4607      	mov	r7, r0
						b = dequeueParam();
    1034:	47a0      	blx	r4
						textForeground = ((r & 0xf8) << 8) | ((g & 0xfc) << 3) | (b >> 3);
    1036:	0233      	lsls	r3, r6, #8
    1038:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
    103c:	f023 0307 	bic.w	r3, r3, #7
    1040:	00fa      	lsls	r2, r7, #3
    1042:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
    1046:	4313      	orrs	r3, r2
    1048:	f3c0 00c7 	ubfx	r0, r0, #3, #8
    104c:	4303      	orrs	r3, r0
    104e:	4a36      	ldr	r2, [pc, #216]	; (1128 <SGR+0x2f0>)
    1050:	8013      	strh	r3, [r2, #0]
    1052:	e72d      	b.n	eb0 <SGR+0x78>
						parameter = dequeueParam();
    1054:	47a0      	blx	r4
						textForeground = eightBitColor[parameter];
    1056:	f83d 2010 	ldrh.w	r2, [sp, r0, lsl #1]
    105a:	4b33      	ldr	r3, [pc, #204]	; (1128 <SGR+0x2f0>)
    105c:	801a      	strh	r2, [r3, #0]
    105e:	e7e2      	b.n	1026 <SGR+0x1ee>
					textForeground = defaultForegroundColor;
    1060:	4b30      	ldr	r3, [pc, #192]	; (1124 <SGR+0x2ec>)
    1062:	881a      	ldrh	r2, [r3, #0]
    1064:	4b30      	ldr	r3, [pc, #192]	; (1128 <SGR+0x2f0>)
    1066:	801a      	strh	r2, [r3, #0]
					break;
    1068:	e722      	b.n	eb0 <SGR+0x78>
					textBackground = BLACK;
    106a:	2200      	movs	r2, #0
    106c:	4b30      	ldr	r3, [pc, #192]	; (1130 <SGR+0x2f8>)
    106e:	801a      	strh	r2, [r3, #0]
					break;
    1070:	e71e      	b.n	eb0 <SGR+0x78>
					textBackground = RED;
    1072:	f44f 4278 	mov.w	r2, #63488	; 0xf800
    1076:	4b2e      	ldr	r3, [pc, #184]	; (1130 <SGR+0x2f8>)
    1078:	801a      	strh	r2, [r3, #0]
					break;
    107a:	e719      	b.n	eb0 <SGR+0x78>
					textBackground = GREEN;
    107c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1080:	4b2b      	ldr	r3, [pc, #172]	; (1130 <SGR+0x2f8>)
    1082:	801a      	strh	r2, [r3, #0]
					break;
    1084:	e714      	b.n	eb0 <SGR+0x78>
					textBackground = BROWN;
    1086:	f64f 72e0 	movw	r2, #65504	; 0xffe0
    108a:	4b29      	ldr	r3, [pc, #164]	; (1130 <SGR+0x2f8>)
    108c:	801a      	strh	r2, [r3, #0]
					break;
    108e:	e70f      	b.n	eb0 <SGR+0x78>
					textBackground = BLUE;
    1090:	221f      	movs	r2, #31
    1092:	4b27      	ldr	r3, [pc, #156]	; (1130 <SGR+0x2f8>)
    1094:	801a      	strh	r2, [r3, #0]
					break;
    1096:	e70b      	b.n	eb0 <SGR+0x78>
					textBackground = MAGENTA;
    1098:	f64f 021f 	movw	r2, #63519	; 0xf81f
    109c:	4b24      	ldr	r3, [pc, #144]	; (1130 <SGR+0x2f8>)
    109e:	801a      	strh	r2, [r3, #0]
					break;
    10a0:	e706      	b.n	eb0 <SGR+0x78>
					textBackground = CYAN;
    10a2:	f240 72ff 	movw	r2, #2047	; 0x7ff
    10a6:	4b22      	ldr	r3, [pc, #136]	; (1130 <SGR+0x2f8>)
    10a8:	801a      	strh	r2, [r3, #0]
					break;
    10aa:	e701      	b.n	eb0 <SGR+0x78>
					textBackground = WHITE;
    10ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
    10b0:	4b1f      	ldr	r3, [pc, #124]	; (1130 <SGR+0x2f8>)
    10b2:	801a      	strh	r2, [r3, #0]
					break;
    10b4:	e6fc      	b.n	eb0 <SGR+0x78>
					parameter = dequeueParam();
    10b6:	47a0      	blx	r4
					if(parameter == 5)	//256 color
    10b8:	2805      	cmp	r0, #5
    10ba:	d016      	beq.n	10ea <SGR+0x2b2>
					if(parameter == 2) //RGB color, 3 parameter r/g/b
    10bc:	2802      	cmp	r0, #2
    10be:	f47f aef7 	bne.w	eb0 <SGR+0x78>
						r = dequeueParam();
    10c2:	47a0      	blx	r4
    10c4:	4606      	mov	r6, r0
						g = dequeueParam();
    10c6:	47a0      	blx	r4
    10c8:	4607      	mov	r7, r0
						b = dequeueParam();
    10ca:	47a0      	blx	r4
						textBackground = ((r & 0xf8) << 8) | ((g & 0xfc) << 3) | (b >> 3);				
    10cc:	0233      	lsls	r3, r6, #8
    10ce:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
    10d2:	f023 0307 	bic.w	r3, r3, #7
    10d6:	00fa      	lsls	r2, r7, #3
    10d8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
    10dc:	4313      	orrs	r3, r2
    10de:	f3c0 00c7 	ubfx	r0, r0, #3, #8
    10e2:	4303      	orrs	r3, r0
    10e4:	4a12      	ldr	r2, [pc, #72]	; (1130 <SGR+0x2f8>)
    10e6:	8013      	strh	r3, [r2, #0]
    10e8:	e6e2      	b.n	eb0 <SGR+0x78>
						parameter = dequeueParam();
    10ea:	47a0      	blx	r4
						textBackground = eightBitColor[parameter];
    10ec:	f83d 2010 	ldrh.w	r2, [sp, r0, lsl #1]
    10f0:	4b0f      	ldr	r3, [pc, #60]	; (1130 <SGR+0x2f8>)
    10f2:	801a      	strh	r2, [r3, #0]
    10f4:	e7e2      	b.n	10bc <SGR+0x284>
					textBackground = defaultBackgroundColor;
    10f6:	4b0d      	ldr	r3, [pc, #52]	; (112c <SGR+0x2f4>)
    10f8:	881a      	ldrh	r2, [r3, #0]
    10fa:	4b0d      	ldr	r3, [pc, #52]	; (1130 <SGR+0x2f8>)
    10fc:	801a      	strh	r2, [r3, #0]
					break;
    10fe:	e6d7      	b.n	eb0 <SGR+0x78>
    1100:	00006194 	.word	0x00006194
    1104:	00004f69 	.word	0x00004f69
    1108:	2000002a 	.word	0x2000002a
    110c:	00000241 	.word	0x00000241
    1110:	00000255 	.word	0x00000255
    1114:	20000580 	.word	0x20000580
    1118:	20000560 	.word	0x20000560
    111c:	20000562 	.word	0x20000562
    1120:	20000582 	.word	0x20000582
    1124:	2000018e 	.word	0x2000018e
    1128:	20000014 	.word	0x20000014
    112c:	200004e8 	.word	0x200004e8
    1130:	2000041e 	.word	0x2000041e
    1134:	00003c09 	.word	0x00003c09
    1138:	200004e7 	.word	0x200004e7
					textForeground &= 0x7BEF;	// what the fuck?
    113c:	4905      	ldr	r1, [pc, #20]	; (1154 <SGR+0x31c>)
    113e:	f647 33ef 	movw	r3, #31727	; 0x7bef
    1142:	880a      	ldrh	r2, [r1, #0]
    1144:	401a      	ands	r2, r3
    1146:	800a      	strh	r2, [r1, #0]
					textBackground &= 0x7BEF;
    1148:	4a03      	ldr	r2, [pc, #12]	; (1158 <SGR+0x320>)
    114a:	8811      	ldrh	r1, [r2, #0]
    114c:	400b      	ands	r3, r1
    114e:	8013      	strh	r3, [r2, #0]
					break;
    1150:	e6ae      	b.n	eb0 <SGR+0x78>
    1152:	bf00      	nop
    1154:	20000014 	.word	0x20000014
    1158:	2000041e 	.word	0x2000041e

0000115c <DSR>:
void ICH(void) //Insert indicated # of blank chars
{
	currentState = stateGround;
}
void DSR(void) 
{
    115c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1160:	b087      	sub	sp, #28
	
	This function will support both ANSI and DEC formats
	*/
	unsigned char tempCharacter;
		
	uint8_t xTemp = xCharPos;
    1162:	4b2e      	ldr	r3, [pc, #184]	; (121c <DSR+0xc0>)
    1164:	881d      	ldrh	r5, [r3, #0]
	uint8_t yTemp = yCharPos;
    1166:	4b2e      	ldr	r3, [pc, #184]	; (1220 <DSR+0xc4>)
    1168:	881c      	ldrh	r4, [r3, #0]
	
	char DSROSResponse[] = {0x1b, 0x5b, 0x30, 0x6e};
    116a:	4b2e      	ldr	r3, [pc, #184]	; (1224 <DSR+0xc8>)
    116c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    1170:	9305      	str	r3, [sp, #20]
	
	char stringResponse[10];
	char tempbuffer[5];
		
	cursorBlinkState = false;  //need to turn the blinking off; ugly kludge
    1172:	2200      	movs	r2, #0
    1174:	4b2c      	ldr	r3, [pc, #176]	; (1228 <DSR+0xcc>)
    1176:	701a      	strb	r2, [r3, #0]
		
	tempCharacter = dequeueParser();
    1178:	4b2c      	ldr	r3, [pc, #176]	; (122c <DSR+0xd0>)
    117a:	4798      	blx	r3
    117c:	4606      	mov	r6, r0
	
	if(!isEmptyParam()) //We are in DEC format
    117e:	4b2c      	ldr	r3, [pc, #176]	; (1230 <DSR+0xd4>)
    1180:	4798      	blx	r3
    1182:	b1a8      	cbz	r0, 11b0 <DSR+0x54>
	{
		tempCharacter = dequeueParam();  //this now contains either a 5 or 6
	}
	
	switch(tempCharacter){
    1184:	2e05      	cmp	r6, #5
    1186:	d017      	beq.n	11b8 <DSR+0x5c>
    1188:	2e06      	cmp	r6, #6
    118a:	d01a      	beq.n	11c2 <DSR+0x66>
		
			printf("%s",stringResponse);
		break;
	}
	
	stringResponse[0] = '\0';
    118c:	2600      	movs	r6, #0
    118e:	f88d 6008 	strb.w	r6, [sp, #8]
	tempbuffer[0] = '\0';
    1192:	f88d 6000 	strb.w	r6, [sp]
		
	blinkCursor();
    1196:	4b27      	ldr	r3, [pc, #156]	; (1234 <DSR+0xd8>)
    1198:	4798      	blx	r3
	xCharPos = xTemp;
    119a:	b2ed      	uxtb	r5, r5
    119c:	4b1f      	ldr	r3, [pc, #124]	; (121c <DSR+0xc0>)
    119e:	801d      	strh	r5, [r3, #0]
	yCharPos = yTemp;
    11a0:	b2e4      	uxtb	r4, r4
    11a2:	4b1f      	ldr	r3, [pc, #124]	; (1220 <DSR+0xc4>)
    11a4:	801c      	strh	r4, [r3, #0]
	currentState = stateGround;
    11a6:	4b24      	ldr	r3, [pc, #144]	; (1238 <DSR+0xdc>)
    11a8:	701e      	strb	r6, [r3, #0]
}
    11aa:	b007      	add	sp, #28
    11ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		tempCharacter = dequeueParam();  //this now contains either a 5 or 6
    11b0:	4b22      	ldr	r3, [pc, #136]	; (123c <DSR+0xe0>)
    11b2:	4798      	blx	r3
    11b4:	4606      	mov	r6, r0
    11b6:	e7e5      	b.n	1184 <DSR+0x28>
			printf("%s",DSROSResponse);
    11b8:	a905      	add	r1, sp, #20
    11ba:	4821      	ldr	r0, [pc, #132]	; (1240 <DSR+0xe4>)
    11bc:	4b21      	ldr	r3, [pc, #132]	; (1244 <DSR+0xe8>)
    11be:	4798      	blx	r3
		break;
    11c0:	e7e4      	b.n	118c <DSR+0x30>
			strcat(stringResponse,"\x1B");
    11c2:	ae02      	add	r6, sp, #8
    11c4:	4630      	mov	r0, r6
    11c6:	4f20      	ldr	r7, [pc, #128]	; (1248 <DSR+0xec>)
    11c8:	47b8      	blx	r7
    11ca:	4b20      	ldr	r3, [pc, #128]	; (124c <DSR+0xf0>)
    11cc:	881b      	ldrh	r3, [r3, #0]
    11ce:	5233      	strh	r3, [r6, r0]
			strcat(stringResponse,"\x5B");
    11d0:	4630      	mov	r0, r6
    11d2:	47b8      	blx	r7
    11d4:	4b1e      	ldr	r3, [pc, #120]	; (1250 <DSR+0xf4>)
    11d6:	881b      	ldrh	r3, [r3, #0]
    11d8:	5233      	strh	r3, [r6, r0]
			strcat(stringResponse,itoa(yTemp,tempbuffer,10));
    11da:	220a      	movs	r2, #10
    11dc:	4669      	mov	r1, sp
    11de:	b2e0      	uxtb	r0, r4
    11e0:	f8df 9078 	ldr.w	r9, [pc, #120]	; 125c <DSR+0x100>
    11e4:	47c8      	blx	r9
    11e6:	4601      	mov	r1, r0
    11e8:	4630      	mov	r0, r6
    11ea:	f8df 8074 	ldr.w	r8, [pc, #116]	; 1260 <DSR+0x104>
    11ee:	47c0      	blx	r8
			strcat(stringResponse,";");
    11f0:	4630      	mov	r0, r6
    11f2:	47b8      	blx	r7
    11f4:	4b17      	ldr	r3, [pc, #92]	; (1254 <DSR+0xf8>)
    11f6:	881b      	ldrh	r3, [r3, #0]
    11f8:	5233      	strh	r3, [r6, r0]
			strcat(stringResponse,itoa(xTemp,tempbuffer,10));
    11fa:	220a      	movs	r2, #10
    11fc:	4669      	mov	r1, sp
    11fe:	b2e8      	uxtb	r0, r5
    1200:	47c8      	blx	r9
    1202:	4601      	mov	r1, r0
    1204:	4630      	mov	r0, r6
    1206:	47c0      	blx	r8
			strcat(stringResponse,"R");
    1208:	4630      	mov	r0, r6
    120a:	47b8      	blx	r7
    120c:	4b12      	ldr	r3, [pc, #72]	; (1258 <DSR+0xfc>)
    120e:	881b      	ldrh	r3, [r3, #0]
    1210:	5233      	strh	r3, [r6, r0]
			printf("%s",stringResponse);
    1212:	4631      	mov	r1, r6
    1214:	480a      	ldr	r0, [pc, #40]	; (1240 <DSR+0xe4>)
    1216:	4b0b      	ldr	r3, [pc, #44]	; (1244 <DSR+0xe8>)
    1218:	4798      	blx	r3
		break;
    121a:	e7b7      	b.n	118c <DSR+0x30>
    121c:	200004e2 	.word	0x200004e2
    1220:	200004e4 	.word	0x200004e4
    1224:	00006194 	.word	0x00006194
    1228:	2000002a 	.word	0x2000002a
    122c:	000001e5 	.word	0x000001e5
    1230:	00000241 	.word	0x00000241
    1234:	00003c09 	.word	0x00003c09
    1238:	200004e7 	.word	0x200004e7
    123c:	00000255 	.word	0x00000255
    1240:	0000650c 	.word	0x0000650c
    1244:	000050e9 	.word	0x000050e9
    1248:	000053af 	.word	0x000053af
    124c:	000064e0 	.word	0x000064e0
    1250:	000064e4 	.word	0x000064e4
    1254:	000067f8 	.word	0x000067f8
    1258:	000064e8 	.word	0x000064e8
    125c:	00004f55 	.word	0x00004f55
    1260:	00005391 	.word	0x00005391

00001264 <DECSTBM>:

void DECSTBM(void)
{
    1264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	If the value specified for the bottom margin is greater than the the
	number of lines in the logical display page, this control will be ignored.
	*/
	
	
	cursorBlinkState = false;  //need to turn the blinking off; ugly kludge
    1268:	2200      	movs	r2, #0
    126a:	4b34      	ldr	r3, [pc, #208]	; (133c <DECSTBM+0xd8>)
    126c:	701a      	strb	r2, [r3, #0]
	uint8_t topParameter = 0;
	uint8_t bottomParameter = 0;
	uint8_t tempCharacter;
	
	if(isEmptyParam())
    126e:	4b34      	ldr	r3, [pc, #208]	; (1340 <DECSTBM+0xdc>)
    1270:	4798      	blx	r3
    1272:	2800      	cmp	r0, #0
    1274:	d146      	bne.n	1304 <DECSTBM+0xa0>
	{
		//do nothing, fall through.		
	}
	else
	{
		while(!isEmptyParam())
    1276:	4e32      	ldr	r6, [pc, #200]	; (1340 <DECSTBM+0xdc>)
		{
			topParameter = dequeueParam();
    1278:	4d32      	ldr	r5, [pc, #200]	; (1344 <DECSTBM+0xe0>)
			if(bottomParameter == 0)
				bottomParameter = 24;
			
			if((topParameter < bottomParameter) && (bottomParameter <= 24))
			{
				topMargin = topParameter-1;
    127a:	4f33      	ldr	r7, [pc, #204]	; (1348 <DECSTBM+0xe4>)
    127c:	e04b      	b.n	1316 <DECSTBM+0xb2>
				bottomParameter = 24;
    127e:	2018      	movs	r0, #24
    1280:	e001      	b.n	1286 <DECSTBM+0x22>
				topParameter = 1;
    1282:	2401      	movs	r4, #1
				bottomParameter = 24;
    1284:	2018      	movs	r0, #24
				topMargin = topParameter-1;
    1286:	3c01      	subs	r4, #1
    1288:	b2e4      	uxtb	r4, r4
    128a:	703c      	strb	r4, [r7, #0]
				bottomMargin = bottomParameter;
    128c:	4b2f      	ldr	r3, [pc, #188]	; (134c <DECSTBM+0xe8>)
    128e:	7018      	strb	r0, [r3, #0]
				
				if(originMode == ABSOLUTE)
    1290:	4b2f      	ldr	r3, [pc, #188]	; (1350 <DECSTBM+0xec>)
    1292:	781b      	ldrb	r3, [r3, #0]
    1294:	b9c3      	cbnz	r3, 12c8 <DECSTBM+0x64>
				{
					drawChar(consoleDisplay[xCharPos][yCharPos]);
    1296:	4c2f      	ldr	r4, [pc, #188]	; (1354 <DECSTBM+0xf0>)
    1298:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 1364 <DECSTBM+0x100>
    129c:	f8b9 3000 	ldrh.w	r3, [r9]
    12a0:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 1368 <DECSTBM+0x104>
    12a4:	f8b8 2000 	ldrh.w	r2, [r8]
    12a8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    12ac:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    12b0:	5c98      	ldrb	r0, [r3, r2]
    12b2:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 1358 <DECSTBM+0xf4>
    12b6:	47d0      	blx	sl
					xCharPos = 0;
    12b8:	2300      	movs	r3, #0
    12ba:	f8a9 3000 	strh.w	r3, [r9]
					yCharPos = 0;
    12be:	f8a8 3000 	strh.w	r3, [r8]
					tempCharacter = consoleDisplay[xCharPos][yCharPos];
					drawChar(tempCharacter);
    12c2:	7820      	ldrb	r0, [r4, #0]
    12c4:	47d0      	blx	sl
    12c6:	e026      	b.n	1316 <DECSTBM+0xb2>
				}
				else
				{
					drawChar(consoleDisplay[xCharPos][yCharPos]);
    12c8:	f8df 8088 	ldr.w	r8, [pc, #136]	; 1354 <DECSTBM+0xf0>
    12cc:	f8df a094 	ldr.w	sl, [pc, #148]	; 1364 <DECSTBM+0x100>
    12d0:	f8ba 3000 	ldrh.w	r3, [sl]
    12d4:	f8df 9090 	ldr.w	r9, [pc, #144]	; 1368 <DECSTBM+0x104>
    12d8:	f8b9 2000 	ldrh.w	r2, [r9]
    12dc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    12e0:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
    12e4:	5c98      	ldrb	r0, [r3, r2]
    12e6:	4c1c      	ldr	r4, [pc, #112]	; (1358 <DECSTBM+0xf4>)
    12e8:	47a0      	blx	r4
					xCharPos = topMargin;
    12ea:	783b      	ldrb	r3, [r7, #0]
    12ec:	b2db      	uxtb	r3, r3
    12ee:	f8aa 3000 	strh.w	r3, [sl]
					yCharPos = 0;
    12f2:	2200      	movs	r2, #0
    12f4:	f8a9 2000 	strh.w	r2, [r9]
					tempCharacter = consoleDisplay[xCharPos][yCharPos];
    12f8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
					drawChar(tempCharacter);					
    12fc:	f818 0033 	ldrb.w	r0, [r8, r3, lsl #3]
    1300:	47a0      	blx	r4
    1302:	e008      	b.n	1316 <DECSTBM+0xb2>
				
			}
		}
	}
	
	blinkCursor();
    1304:	4b15      	ldr	r3, [pc, #84]	; (135c <DECSTBM+0xf8>)
    1306:	4798      	blx	r3
	currentState = stateGround;
    1308:	2200      	movs	r2, #0
    130a:	4b15      	ldr	r3, [pc, #84]	; (1360 <DECSTBM+0xfc>)
    130c:	701a      	strb	r2, [r3, #0]
}
    130e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if((topParameter < bottomParameter) && (bottomParameter <= 24))
    1312:	2c17      	cmp	r4, #23
    1314:	d9b3      	bls.n	127e <DECSTBM+0x1a>
		while(!isEmptyParam())
    1316:	47b0      	blx	r6
    1318:	2800      	cmp	r0, #0
    131a:	d1f3      	bne.n	1304 <DECSTBM+0xa0>
			topParameter = dequeueParam();
    131c:	47a8      	blx	r5
    131e:	4604      	mov	r4, r0
			bottomParameter = dequeueParam();
    1320:	47a8      	blx	r5
			if(topParameter == 0)
    1322:	b134      	cbz	r4, 1332 <DECSTBM+0xce>
			if(bottomParameter == 0)
    1324:	2800      	cmp	r0, #0
    1326:	d0f4      	beq.n	1312 <DECSTBM+0xae>
			if((topParameter < bottomParameter) && (bottomParameter <= 24))
    1328:	42a0      	cmp	r0, r4
    132a:	d9f4      	bls.n	1316 <DECSTBM+0xb2>
    132c:	2818      	cmp	r0, #24
    132e:	d8f2      	bhi.n	1316 <DECSTBM+0xb2>
    1330:	e7a9      	b.n	1286 <DECSTBM+0x22>
			if(bottomParameter == 0)
    1332:	2800      	cmp	r0, #0
    1334:	d0a5      	beq.n	1282 <DECSTBM+0x1e>
				topParameter = 1;
    1336:	2401      	movs	r4, #1
    1338:	e7f6      	b.n	1328 <DECSTBM+0xc4>
    133a:	bf00      	nop
    133c:	2000002a 	.word	0x2000002a
    1340:	00000241 	.word	0x00000241
    1344:	00000255 	.word	0x00000255
    1348:	20000029 	.word	0x20000029
    134c:	20000028 	.word	0x20000028
    1350:	200004e0 	.word	0x200004e0
    1354:	200005ec 	.word	0x200005ec
    1358:	000038b1 	.word	0x000038b1
    135c:	00003c09 	.word	0x00003c09
    1360:	200004e7 	.word	0x200004e7
    1364:	200004e2 	.word	0x200004e2
    1368:	200004e4 	.word	0x200004e4

0000136c <SM>:

void SM(void)
{
    136c:	b508      	push	{r3, lr}
	cursorBlinkState = false;
    136e:	2200      	movs	r2, #0
    1370:	4b0b      	ldr	r3, [pc, #44]	; (13a0 <SM+0x34>)
    1372:	701a      	strb	r2, [r3, #0]

	uint8_t temp;
	
	if(isEmptyParam())
    1374:	4b0b      	ldr	r3, [pc, #44]	; (13a4 <SM+0x38>)
    1376:	4798      	blx	r3
    1378:	b128      	cbz	r0, 1386 <SM+0x1a>
				
					break;
			}
		}
	}
	blinkCursor();
    137a:	4b0b      	ldr	r3, [pc, #44]	; (13a8 <SM+0x3c>)
    137c:	4798      	blx	r3
	currentState = stateGround;
    137e:	2200      	movs	r2, #0
    1380:	4b0a      	ldr	r3, [pc, #40]	; (13ac <SM+0x40>)
    1382:	701a      	strb	r2, [r3, #0]
    1384:	bd08      	pop	{r3, pc}
		temp = dequeueParam();
    1386:	4b0a      	ldr	r3, [pc, #40]	; (13b0 <SM+0x44>)
    1388:	4798      	blx	r3
		if(temp == (uint8_t)'?')
    138a:	283f      	cmp	r0, #63	; 0x3f
    138c:	d1f5      	bne.n	137a <SM+0xe>
			temp = dequeueParam();
    138e:	4b08      	ldr	r3, [pc, #32]	; (13b0 <SM+0x44>)
    1390:	4798      	blx	r3
			switch(temp)
    1392:	2806      	cmp	r0, #6
    1394:	d1f1      	bne.n	137a <SM+0xe>
					originMode = DISPLACED;
    1396:	2201      	movs	r2, #1
    1398:	4b06      	ldr	r3, [pc, #24]	; (13b4 <SM+0x48>)
    139a:	701a      	strb	r2, [r3, #0]
					break;
    139c:	e7ed      	b.n	137a <SM+0xe>
    139e:	bf00      	nop
    13a0:	2000002a 	.word	0x2000002a
    13a4:	00000241 	.word	0x00000241
    13a8:	00003c09 	.word	0x00003c09
    13ac:	200004e7 	.word	0x200004e7
    13b0:	00000255 	.word	0x00000255
    13b4:	200004e0 	.word	0x200004e0

000013b8 <RM>:
}

void RM(void)
{
    13b8:	b508      	push	{r3, lr}
	cursorBlinkState = false;
    13ba:	2200      	movs	r2, #0
    13bc:	4b0b      	ldr	r3, [pc, #44]	; (13ec <RM+0x34>)
    13be:	701a      	strb	r2, [r3, #0]

	uint8_t temp;
	
	if(isEmptyParam())
    13c0:	4b0b      	ldr	r3, [pc, #44]	; (13f0 <RM+0x38>)
    13c2:	4798      	blx	r3
    13c4:	b128      	cbz	r0, 13d2 <RM+0x1a>
				
				break;
			}
		}
	}
	blinkCursor();
    13c6:	4b0b      	ldr	r3, [pc, #44]	; (13f4 <RM+0x3c>)
    13c8:	4798      	blx	r3
	currentState = stateGround;
    13ca:	2200      	movs	r2, #0
    13cc:	4b0a      	ldr	r3, [pc, #40]	; (13f8 <RM+0x40>)
    13ce:	701a      	strb	r2, [r3, #0]
    13d0:	bd08      	pop	{r3, pc}
		temp = dequeueParam();
    13d2:	4b0a      	ldr	r3, [pc, #40]	; (13fc <RM+0x44>)
    13d4:	4798      	blx	r3
		if(temp == (uint8_t)'?')
    13d6:	283f      	cmp	r0, #63	; 0x3f
    13d8:	d1f5      	bne.n	13c6 <RM+0xe>
			temp = dequeueParam();
    13da:	4b08      	ldr	r3, [pc, #32]	; (13fc <RM+0x44>)
    13dc:	4798      	blx	r3
			switch(temp)
    13de:	2806      	cmp	r0, #6
    13e0:	d1f1      	bne.n	13c6 <RM+0xe>
				originMode = ABSOLUTE;
    13e2:	2200      	movs	r2, #0
    13e4:	4b06      	ldr	r3, [pc, #24]	; (1400 <RM+0x48>)
    13e6:	701a      	strb	r2, [r3, #0]
				break;
    13e8:	e7ed      	b.n	13c6 <RM+0xe>
    13ea:	bf00      	nop
    13ec:	2000002a 	.word	0x2000002a
    13f0:	00000241 	.word	0x00000241
    13f4:	00003c09 	.word	0x00003c09
    13f8:	200004e7 	.word	0x200004e7
    13fc:	00000255 	.word	0x00000255
    1400:	200004e0 	.word	0x200004e0

00001404 <isValidCSIEscapeCode>:
bool isValidCSIEscapeCode(uint8_t character)
{
	
	for(uint8_t i = 0; i <= sizeof(csiEscCodes)/sizeof(csiEscCodes[0]) ; i++)
	{
		if(character == csiEscCodes[i])
    1404:	2840      	cmp	r0, #64	; 0x40
    1406:	d004      	beq.n	1412 <isValidCSIEscapeCode+0xe>
    1408:	4b03      	ldr	r3, [pc, #12]	; (1418 <isValidCSIEscapeCode+0x14>)
    140a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    140e:	4282      	cmp	r2, r0
    1410:	d1fb      	bne.n	140a <isValidCSIEscapeCode+0x6>
		{
			return true;	
		}
	}
	return false;
}
    1412:	2001      	movs	r0, #1
    1414:	4770      	bx	lr
    1416:	bf00      	nop
    1418:	000064ec 	.word	0x000064ec

0000141c <CSIparamState>:
{
    141c:	b510      	push	{r4, lr}
    141e:	4604      	mov	r4, r0
	if(character >= 0x30 && character <= 0x39)		//character is a digit, put it in the buffer
    1420:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    1424:	b2db      	uxtb	r3, r3
    1426:	2b09      	cmp	r3, #9
    1428:	d90a      	bls.n	1440 <CSIparamState+0x24>
	else if(character == 0x3B)					//character is ';', now we take items out of 
    142a:	283b      	cmp	r0, #59	; 0x3b
    142c:	d00b      	beq.n	1446 <CSIparamState+0x2a>
	else if(character == 0x3F)					//character is '?', this is used for DECCKM
    142e:	283f      	cmp	r0, #63	; 0x3f
    1430:	d00d      	beq.n	144e <CSIparamState+0x32>
	else if(isValidCSIEscapeCode(character))		//character matches a supported escape code
    1432:	4b0d      	ldr	r3, [pc, #52]	; (1468 <CSIparamState+0x4c>)
    1434:	4798      	blx	r3
    1436:	b970      	cbnz	r0, 1456 <CSIparamState+0x3a>
		currentState = stateCSIignore;
    1438:	2205      	movs	r2, #5
    143a:	4b0c      	ldr	r3, [pc, #48]	; (146c <CSIparamState+0x50>)
    143c:	701a      	strb	r2, [r3, #0]
    143e:	bd10      	pop	{r4, pc}
		enqueueParser(character);
    1440:	4b0b      	ldr	r3, [pc, #44]	; (1470 <CSIparamState+0x54>)
    1442:	4798      	blx	r3
    1444:	bd10      	pop	{r4, pc}
		enqueueParser(';');						//parambuffer 			
    1446:	203b      	movs	r0, #59	; 0x3b
    1448:	4b09      	ldr	r3, [pc, #36]	; (1470 <CSIparamState+0x54>)
    144a:	4798      	blx	r3
    144c:	bd10      	pop	{r4, pc}
		enqueueParser('?');						//the terminating character
    144e:	203f      	movs	r0, #63	; 0x3f
    1450:	4b07      	ldr	r3, [pc, #28]	; (1470 <CSIparamState+0x54>)
    1452:	4798      	blx	r3
    1454:	bd10      	pop	{r4, pc}
		queueTransmogrifier();											
    1456:	4b07      	ldr	r3, [pc, #28]	; (1474 <CSIparamState+0x58>)
    1458:	4798      	blx	r3
		currentState = stateCSIentry;
    145a:	2203      	movs	r2, #3
    145c:	4b03      	ldr	r3, [pc, #12]	; (146c <CSIparamState+0x50>)
    145e:	701a      	strb	r2, [r3, #0]
		CSIentryState(character);
    1460:	4620      	mov	r0, r4
    1462:	4b05      	ldr	r3, [pc, #20]	; (1478 <CSIparamState+0x5c>)
    1464:	4798      	blx	r3
    1466:	bd10      	pop	{r4, pc}
    1468:	00001405 	.word	0x00001405
    146c:	200004e7 	.word	0x200004e7
    1470:	00000215 	.word	0x00000215
    1474:	00000305 	.word	0x00000305
    1478:	0000147d 	.word	0x0000147d

0000147c <CSIentryState>:
{
    147c:	b508      	push	{r3, lr}
	if(character == 0x40)		//ESC [ @ ICH insert indicated # of blank chars
    147e:	2840      	cmp	r0, #64	; 0x40
    1480:	d068      	beq.n	1554 <CSIentryState+0xd8>
	else if(character == 0x41)	//ESC [ A	Cursor Up
    1482:	2841      	cmp	r0, #65	; 0x41
    1484:	d06a      	beq.n	155c <CSIentryState+0xe0>
	else if(character == 0x61)	//ESC [ a HPR
    1486:	2861      	cmp	r0, #97	; 0x61
    1488:	d06b      	beq.n	1562 <CSIentryState+0xe6>
	else if(character == 0x42)	//ESC [ B	Cursor Down
    148a:	2842      	cmp	r0, #66	; 0x42
    148c:	d06c      	beq.n	1568 <CSIentryState+0xec>
	else if(character == 0x43)	//ESC [ C	Cursor Forward
    148e:	2843      	cmp	r0, #67	; 0x43
    1490:	d06d      	beq.n	156e <CSIentryState+0xf2>
	else if(character == 0x63)	//ESC [ c DA
    1492:	2863      	cmp	r0, #99	; 0x63
    1494:	d06e      	beq.n	1574 <CSIentryState+0xf8>
	else if(character == 0x44)	//ESC [ D	Cursor Backward
    1496:	2844      	cmp	r0, #68	; 0x44
    1498:	d074      	beq.n	1584 <CSIentryState+0x108>
	else if(character == 0x64)	//ESC [ d	VPA
    149a:	2864      	cmp	r0, #100	; 0x64
    149c:	d059      	beq.n	1552 <CSIentryState+0xd6>
	else if(character == 0x45)	//ESC [ E	Cursor Next Line
    149e:	2845      	cmp	r0, #69	; 0x45
    14a0:	d073      	beq.n	158a <CSIentryState+0x10e>
	else if(character == 0x65)	//ESC [ e VPR
    14a2:	2865      	cmp	r0, #101	; 0x65
    14a4:	d074      	beq.n	1590 <CSIentryState+0x114>
	else if(character == 0x46)	//ESC [ F	Cursor Preceding Line
    14a6:	2846      	cmp	r0, #70	; 0x46
    14a8:	d075      	beq.n	1596 <CSIentryState+0x11a>
	else if(character == 0x66)	//ESC [ f HVP
    14aa:	2866      	cmp	r0, #102	; 0x66
    14ac:	d076      	beq.n	159c <CSIentryState+0x120>
	else if(character == 0x47)	//ESC [ G	Cursor Horizontal Absolute
    14ae:	2847      	cmp	r0, #71	; 0x47
    14b0:	d077      	beq.n	15a2 <CSIentryState+0x126>
	else if(character == 0x67)	//ESC [ g TBC
    14b2:	2867      	cmp	r0, #103	; 0x67
    14b4:	d078      	beq.n	15a8 <CSIentryState+0x12c>
	else if(character == 0x48)	//ESC [ H	Cursor Position
    14b6:	2848      	cmp	r0, #72	; 0x48
    14b8:	d07a      	beq.n	15b0 <CSIentryState+0x134>
	else if(character == 0x68)	//ESC [ h Set Mode
    14ba:	2868      	cmp	r0, #104	; 0x68
    14bc:	d07b      	beq.n	15b6 <CSIentryState+0x13a>
	else if(character == 0x49)	//ESC [ I	Cursor Horizontal Tab
    14be:	2849      	cmp	r0, #73	; 0x49
    14c0:	d07f      	beq.n	15c2 <CSIentryState+0x146>
	else if(character == 0x4A)	//ESC [ J	Erase In Display
    14c2:	284a      	cmp	r0, #74	; 0x4a
    14c4:	f000 8081 	beq.w	15ca <CSIentryState+0x14e>
	else if(character == 0x4B)	//ESC [ K	Erase In Line
    14c8:	284b      	cmp	r0, #75	; 0x4b
    14ca:	f000 8081 	beq.w	15d0 <CSIentryState+0x154>
	else if(character == 0x4C)	//ESC [ L 
    14ce:	284c      	cmp	r0, #76	; 0x4c
    14d0:	f000 8081 	beq.w	15d6 <CSIentryState+0x15a>
	else if(character == 0x6C)	//ESC [ l	Reset mode
    14d4:	286c      	cmp	r0, #108	; 0x6c
    14d6:	f000 8082 	beq.w	15de <CSIentryState+0x162>
	else if(character == 0x4D)	//ESC [ M
    14da:	284d      	cmp	r0, #77	; 0x4d
    14dc:	f000 8085 	beq.w	15ea <CSIentryState+0x16e>
	else if(character == 0x6D)	//ESC [ m	Select Graphic Rendition
    14e0:	286d      	cmp	r0, #109	; 0x6d
    14e2:	f000 8086 	beq.w	15f2 <CSIentryState+0x176>
	else if(character == 0x6E)	//ESC [ n Device Status Report
    14e6:	286e      	cmp	r0, #110	; 0x6e
    14e8:	f000 8086 	beq.w	15f8 <CSIentryState+0x17c>
	else if(character == 0x50)	//ESC [ P	Delete Character
    14ec:	2850      	cmp	r0, #80	; 0x50
    14ee:	f000 8086 	beq.w	15fe <CSIentryState+0x182>
	else if(character == 0x51)	//ESC [ Q	Select Edit Extent Mode
    14f2:	2851      	cmp	r0, #81	; 0x51
    14f4:	f000 8087 	beq.w	1606 <CSIentryState+0x18a>
	else if(character == 0x71)	//ESC [ q	Set Keyboard LEDs
    14f8:	2871      	cmp	r0, #113	; 0x71
    14fa:	f000 8088 	beq.w	160e <CSIentryState+0x192>
	else if(character == 0x72)	//ESC [ r	DECSTBM
    14fe:	2872      	cmp	r0, #114	; 0x72
    1500:	f000 8089 	beq.w	1616 <CSIentryState+0x19a>
	else if(character == 0x73)	//ESC [ s	Save Cursor Position
    1504:	2873      	cmp	r0, #115	; 0x73
    1506:	f000 8089 	beq.w	161c <CSIentryState+0x1a0>
	else if(character == 0x75)	//ESC [ u	Restore Cursor Position
    150a:	2875      	cmp	r0, #117	; 0x75
    150c:	f000 8089 	beq.w	1622 <CSIentryState+0x1a6>
	else if(character == 0x58)	//ESC [ X
    1510:	2858      	cmp	r0, #88	; 0x58
    1512:	f000 8089 	beq.w	1628 <CSIentryState+0x1ac>
	else if(character == 0x57)	//ESC [ W	Cursor Tabulation Control
    1516:	2857      	cmp	r0, #87	; 0x57
    1518:	f000 808a 	beq.w	1630 <CSIentryState+0x1b4>
	else if(character == 0x5A)	//ESC [ Z	Cursor Backwards Tab
    151c:	285a      	cmp	r0, #90	; 0x5a
    151e:	f000 808b 	beq.w	1638 <CSIentryState+0x1bc>
	else if(character == 0x60)	//ESC [ ` HPA
    1522:	2860      	cmp	r0, #96	; 0x60
    1524:	f000 808c 	beq.w	1640 <CSIentryState+0x1c4>
	else if(character >= 0x30 && character <= 0x39) // if the character is a digit 0-9
    1528:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    152c:	b2db      	uxtb	r3, r3
    152e:	2b09      	cmp	r3, #9
    1530:	f240 808a 	bls.w	1648 <CSIentryState+0x1cc>
	else if(character == 0x3B)	//Semicolon ; parameter deliminator
    1534:	283b      	cmp	r0, #59	; 0x3b
    1536:	f000 808d 	beq.w	1654 <CSIentryState+0x1d8>
	else if(character == 0x3F)	//Question '?'; this is a param
    153a:	283f      	cmp	r0, #63	; 0x3f
    153c:	f000 8090 	beq.w	1660 <CSIentryState+0x1e4>
	else if(character == 0x1B)		//ESC, send back to stateESC
    1540:	281b      	cmp	r0, #27
    1542:	f000 8093 	beq.w	166c <CSIentryState+0x1f0>
	else if(character == 0x3A)
    1546:	283a      	cmp	r0, #58	; 0x3a
    1548:	f000 8094 	beq.w	1674 <CSIentryState+0x1f8>
		currentState = stateGround;
    154c:	2200      	movs	r2, #0
    154e:	4b4b      	ldr	r3, [pc, #300]	; (167c <CSIentryState+0x200>)
    1550:	701a      	strb	r2, [r3, #0]
    1552:	bd08      	pop	{r3, pc}
	currentState = stateGround;
    1554:	2200      	movs	r2, #0
    1556:	4b49      	ldr	r3, [pc, #292]	; (167c <CSIentryState+0x200>)
    1558:	701a      	strb	r2, [r3, #0]
    155a:	bd08      	pop	{r3, pc}
		CUU();
    155c:	4b48      	ldr	r3, [pc, #288]	; (1680 <CSIentryState+0x204>)
    155e:	4798      	blx	r3
    1560:	bd08      	pop	{r3, pc}
		CUF();
    1562:	4b48      	ldr	r3, [pc, #288]	; (1684 <CSIentryState+0x208>)
    1564:	4798      	blx	r3
    1566:	bd08      	pop	{r3, pc}
		CUD();
    1568:	4b47      	ldr	r3, [pc, #284]	; (1688 <CSIentryState+0x20c>)
    156a:	4798      	blx	r3
    156c:	bd08      	pop	{r3, pc}
		CUF();
    156e:	4b45      	ldr	r3, [pc, #276]	; (1684 <CSIentryState+0x208>)
    1570:	4798      	blx	r3
    1572:	bd08      	pop	{r3, pc}
		printf("%s",DECIDreturn);
    1574:	4945      	ldr	r1, [pc, #276]	; (168c <CSIentryState+0x210>)
    1576:	4846      	ldr	r0, [pc, #280]	; (1690 <CSIentryState+0x214>)
    1578:	4b46      	ldr	r3, [pc, #280]	; (1694 <CSIentryState+0x218>)
    157a:	4798      	blx	r3
		currentState = stateGround;
    157c:	2200      	movs	r2, #0
    157e:	4b3f      	ldr	r3, [pc, #252]	; (167c <CSIentryState+0x200>)
    1580:	701a      	strb	r2, [r3, #0]
    1582:	bd08      	pop	{r3, pc}
		CUB();
    1584:	4b44      	ldr	r3, [pc, #272]	; (1698 <CSIentryState+0x21c>)
    1586:	4798      	blx	r3
    1588:	bd08      	pop	{r3, pc}
		CNL();
    158a:	4b44      	ldr	r3, [pc, #272]	; (169c <CSIentryState+0x220>)
    158c:	4798      	blx	r3
    158e:	bd08      	pop	{r3, pc}
		CUD();
    1590:	4b3d      	ldr	r3, [pc, #244]	; (1688 <CSIentryState+0x20c>)
    1592:	4798      	blx	r3
    1594:	bd08      	pop	{r3, pc}
		CPL();
    1596:	4b42      	ldr	r3, [pc, #264]	; (16a0 <CSIentryState+0x224>)
    1598:	4798      	blx	r3
    159a:	bd08      	pop	{r3, pc}
		CUP();
    159c:	4b41      	ldr	r3, [pc, #260]	; (16a4 <CSIentryState+0x228>)
    159e:	4798      	blx	r3
    15a0:	bd08      	pop	{r3, pc}
		CHA();
    15a2:	4b41      	ldr	r3, [pc, #260]	; (16a8 <CSIentryState+0x22c>)
    15a4:	4798      	blx	r3
    15a6:	bd08      	pop	{r3, pc}
		currentState = stateGround;
    15a8:	2200      	movs	r2, #0
    15aa:	4b34      	ldr	r3, [pc, #208]	; (167c <CSIentryState+0x200>)
    15ac:	701a      	strb	r2, [r3, #0]
    15ae:	bd08      	pop	{r3, pc}
		CUP();
    15b0:	4b3c      	ldr	r3, [pc, #240]	; (16a4 <CSIentryState+0x228>)
    15b2:	4798      	blx	r3
    15b4:	bd08      	pop	{r3, pc}
		SM();
    15b6:	4b3d      	ldr	r3, [pc, #244]	; (16ac <CSIentryState+0x230>)
    15b8:	4798      	blx	r3
		currentState = stateGround;
    15ba:	2200      	movs	r2, #0
    15bc:	4b2f      	ldr	r3, [pc, #188]	; (167c <CSIentryState+0x200>)
    15be:	701a      	strb	r2, [r3, #0]
    15c0:	bd08      	pop	{r3, pc}
	currentState = stateGround;
    15c2:	2200      	movs	r2, #0
    15c4:	4b2d      	ldr	r3, [pc, #180]	; (167c <CSIentryState+0x200>)
    15c6:	701a      	strb	r2, [r3, #0]
    15c8:	bd08      	pop	{r3, pc}
		ED();
    15ca:	4b39      	ldr	r3, [pc, #228]	; (16b0 <CSIentryState+0x234>)
    15cc:	4798      	blx	r3
    15ce:	bd08      	pop	{r3, pc}
		EL();
    15d0:	4b38      	ldr	r3, [pc, #224]	; (16b4 <CSIentryState+0x238>)
    15d2:	4798      	blx	r3
    15d4:	bd08      	pop	{r3, pc}
		currentState = stateGround;
    15d6:	2200      	movs	r2, #0
    15d8:	4b28      	ldr	r3, [pc, #160]	; (167c <CSIentryState+0x200>)
    15da:	701a      	strb	r2, [r3, #0]
    15dc:	bd08      	pop	{r3, pc}
		RM();
    15de:	4b36      	ldr	r3, [pc, #216]	; (16b8 <CSIentryState+0x23c>)
    15e0:	4798      	blx	r3
		currentState = stateGround;
    15e2:	2200      	movs	r2, #0
    15e4:	4b25      	ldr	r3, [pc, #148]	; (167c <CSIentryState+0x200>)
    15e6:	701a      	strb	r2, [r3, #0]
    15e8:	bd08      	pop	{r3, pc}
		currentState = stateGround;
    15ea:	2200      	movs	r2, #0
    15ec:	4b23      	ldr	r3, [pc, #140]	; (167c <CSIentryState+0x200>)
    15ee:	701a      	strb	r2, [r3, #0]
    15f0:	bd08      	pop	{r3, pc}
		SGR();
    15f2:	4b32      	ldr	r3, [pc, #200]	; (16bc <CSIentryState+0x240>)
    15f4:	4798      	blx	r3
    15f6:	bd08      	pop	{r3, pc}
		DSR();
    15f8:	4b31      	ldr	r3, [pc, #196]	; (16c0 <CSIentryState+0x244>)
    15fa:	4798      	blx	r3
    15fc:	bd08      	pop	{r3, pc}
	currentState = stateGround;
    15fe:	2200      	movs	r2, #0
    1600:	4b1e      	ldr	r3, [pc, #120]	; (167c <CSIentryState+0x200>)
    1602:	701a      	strb	r2, [r3, #0]
    1604:	bd08      	pop	{r3, pc}
	currentState = stateGround;
    1606:	2200      	movs	r2, #0
    1608:	4b1c      	ldr	r3, [pc, #112]	; (167c <CSIentryState+0x200>)
    160a:	701a      	strb	r2, [r3, #0]
    160c:	bd08      	pop	{r3, pc}
		currentState = stateGround;
    160e:	2200      	movs	r2, #0
    1610:	4b1a      	ldr	r3, [pc, #104]	; (167c <CSIentryState+0x200>)
    1612:	701a      	strb	r2, [r3, #0]
    1614:	bd08      	pop	{r3, pc}
		DECSTBM();
    1616:	4b2b      	ldr	r3, [pc, #172]	; (16c4 <CSIentryState+0x248>)
    1618:	4798      	blx	r3
    161a:	bd08      	pop	{r3, pc}
		SC();
    161c:	4b2a      	ldr	r3, [pc, #168]	; (16c8 <CSIentryState+0x24c>)
    161e:	4798      	blx	r3
    1620:	bd08      	pop	{r3, pc}
		RC();
    1622:	4b2a      	ldr	r3, [pc, #168]	; (16cc <CSIentryState+0x250>)
    1624:	4798      	blx	r3
    1626:	bd08      	pop	{r3, pc}
		currentState = stateGround;
    1628:	2200      	movs	r2, #0
    162a:	4b14      	ldr	r3, [pc, #80]	; (167c <CSIentryState+0x200>)
    162c:	701a      	strb	r2, [r3, #0]
    162e:	bd08      	pop	{r3, pc}
	currentState = stateGround;
    1630:	2200      	movs	r2, #0
    1632:	4b12      	ldr	r3, [pc, #72]	; (167c <CSIentryState+0x200>)
    1634:	701a      	strb	r2, [r3, #0]
    1636:	bd08      	pop	{r3, pc}
	currentState = stateGround;
    1638:	2200      	movs	r2, #0
    163a:	4b10      	ldr	r3, [pc, #64]	; (167c <CSIentryState+0x200>)
    163c:	701a      	strb	r2, [r3, #0]
    163e:	bd08      	pop	{r3, pc}
		currentState = stateGround;
    1640:	2200      	movs	r2, #0
    1642:	4b0e      	ldr	r3, [pc, #56]	; (167c <CSIentryState+0x200>)
    1644:	701a      	strb	r2, [r3, #0]
    1646:	bd08      	pop	{r3, pc}
		currentState = stateCSIparam;
    1648:	2204      	movs	r2, #4
    164a:	4b0c      	ldr	r3, [pc, #48]	; (167c <CSIentryState+0x200>)
    164c:	701a      	strb	r2, [r3, #0]
		CSIparamState(character);
    164e:	4b20      	ldr	r3, [pc, #128]	; (16d0 <CSIentryState+0x254>)
    1650:	4798      	blx	r3
    1652:	bd08      	pop	{r3, pc}
		currentState = stateCSIparam;
    1654:	2204      	movs	r2, #4
    1656:	4b09      	ldr	r3, [pc, #36]	; (167c <CSIentryState+0x200>)
    1658:	701a      	strb	r2, [r3, #0]
		CSIparamState(character);
    165a:	4b1d      	ldr	r3, [pc, #116]	; (16d0 <CSIentryState+0x254>)
    165c:	4798      	blx	r3
    165e:	bd08      	pop	{r3, pc}
		currentState = stateCSIparam;
    1660:	2204      	movs	r2, #4
    1662:	4b06      	ldr	r3, [pc, #24]	; (167c <CSIentryState+0x200>)
    1664:	701a      	strb	r2, [r3, #0]
		CSIparamState(character);
    1666:	4b1a      	ldr	r3, [pc, #104]	; (16d0 <CSIentryState+0x254>)
    1668:	4798      	blx	r3
    166a:	bd08      	pop	{r3, pc}
		currentState = stateESC;
    166c:	2201      	movs	r2, #1
    166e:	4b03      	ldr	r3, [pc, #12]	; (167c <CSIentryState+0x200>)
    1670:	701a      	strb	r2, [r3, #0]
    1672:	bd08      	pop	{r3, pc}
		currentState = stateCSIignore;
    1674:	2205      	movs	r2, #5
    1676:	4b01      	ldr	r3, [pc, #4]	; (167c <CSIentryState+0x200>)
    1678:	701a      	strb	r2, [r3, #0]
    167a:	bd08      	pop	{r3, pc}
    167c:	200004e7 	.word	0x200004e7
    1680:	00000669 	.word	0x00000669
    1684:	000007ad 	.word	0x000007ad
    1688:	00000709 	.word	0x00000709
    168c:	000064d8 	.word	0x000064d8
    1690:	0000650c 	.word	0x0000650c
    1694:	000050e9 	.word	0x000050e9
    1698:	0000084d 	.word	0x0000084d
    169c:	000008e9 	.word	0x000008e9
    16a0:	0000097d 	.word	0x0000097d
    16a4:	00000a91 	.word	0x00000a91
    16a8:	00000a11 	.word	0x00000a11
    16ac:	0000136d 	.word	0x0000136d
    16b0:	00000b61 	.word	0x00000b61
    16b4:	00000d45 	.word	0x00000d45
    16b8:	000013b9 	.word	0x000013b9
    16bc:	00000e39 	.word	0x00000e39
    16c0:	0000115d 	.word	0x0000115d
    16c4:	00001265 	.word	0x00001265
    16c8:	00000365 	.word	0x00000365
    16cc:	00000391 	.word	0x00000391
    16d0:	0000141d 	.word	0x0000141d

000016d4 <nextTab>:


int nextTab(int a) 
{
    16d4:	b510      	push	{r4, lr}
    16d6:	b0d0      	sub	sp, #320	; 0x140
    16d8:	4604      	mov	r4, r0
	/*
	what data structures for tabs are most performant and is is big-o of 
	number of column or big-o of number of tabs shut the fuck up
	*/
	
	int tabArray[] =
    16da:	f44f 72a0 	mov.w	r2, #320	; 0x140
    16de:	4904      	ldr	r1, [pc, #16]	; (16f0 <nextTab+0x1c>)
    16e0:	4668      	mov	r0, sp
    16e2:	4b04      	ldr	r3, [pc, #16]	; (16f4 <nextTab+0x20>)
    16e4:	4798      	blx	r3
		 72,72,72,72,72,72,72,72,
		 79,79,79,79,79,79,79,79
		};
	
	return tabArray[a];
}
    16e6:	f85d 0024 	ldr.w	r0, [sp, r4, lsl #2]
    16ea:	b050      	add	sp, #320	; 0x140
    16ec:	bd10      	pop	{r4, pc}
    16ee:	bf00      	nop
    16f0:	00006398 	.word	0x00006398
    16f4:	00004f69 	.word	0x00004f69

000016f8 <groundState>:
{
    16f8:	b570      	push	{r4, r5, r6, lr}
    16fa:	4604      	mov	r4, r0
	clearQueues();									//parser and paramQueues cleared
    16fc:	4b8b      	ldr	r3, [pc, #556]	; (192c <groundState+0x234>)
    16fe:	4798      	blx	r3
	if(character == 0x00)							//NUL 0x00 DO NOTHING
    1700:	2c07      	cmp	r4, #7
    1702:	f240 8081 	bls.w	1808 <groundState+0x110>
	else if(character == 0x08)						//BS 0x08 Backspace
    1706:	2c08      	cmp	r4, #8
    1708:	d07b      	beq.n	1802 <groundState+0x10a>
	else if(character == 0x09)						//TAB 0x09 Horizontal Tab
    170a:	2c09      	cmp	r4, #9
    170c:	f000 8096 	beq.w	183c <groundState+0x144>
	else if(character == 0x0A)						//LF 0x0A Line Feed
    1710:	2c0a      	cmp	r4, #10
    1712:	f000 80b4 	beq.w	187e <groundState+0x186>
	else if(character == 0x0B)						//VT 0x0B Vertical Tab
    1716:	2c0b      	cmp	r4, #11
    1718:	f000 812a 	beq.w	1970 <groundState+0x278>
	else if(character == 0x0C)						//FF 0x0C Form Feed
    171c:	2c0c      	cmp	r4, #12
    171e:	f000 817e 	beq.w	1a1e <groundState+0x326>
	else if(character == 0x0D)						//CR 0x0D Carriage Return
    1722:	2c0d      	cmp	r4, #13
    1724:	f000 81d2 	beq.w	1acc <groundState+0x3d4>
	else if(character == 0x0E)						//SO 0x0E Shift Out
    1728:	f1a4 030e 	sub.w	r3, r4, #14
    172c:	b2db      	uxtb	r3, r3
    172e:	2b0c      	cmp	r3, #12
    1730:	d96a      	bls.n	1808 <groundState+0x110>
	else if(character == 0x1B)						//ESC 0x1B Escape
    1732:	2c1b      	cmp	r4, #27
    1734:	f000 81f0 	beq.w	1b18 <groundState+0x420>
	else if(character == 0x1C)						//FS 0x1C File Separator
    1738:	f1a4 031c 	sub.w	r3, r4, #28
    173c:	b2db      	uxtb	r3, r3
    173e:	2b03      	cmp	r3, #3
    1740:	d962      	bls.n	1808 <groundState+0x110>
	else if(character == 0x7F)						//DEL 0x7F Delete
    1742:	2c7f      	cmp	r4, #127	; 0x7f
    1744:	d060      	beq.n	1808 <groundState+0x110>
		consoleDisplay[xCharPos][yCharPos] = character;
    1746:	4b7a      	ldr	r3, [pc, #488]	; (1930 <groundState+0x238>)
    1748:	881a      	ldrh	r2, [r3, #0]
    174a:	4b7a      	ldr	r3, [pc, #488]	; (1934 <groundState+0x23c>)
    174c:	881b      	ldrh	r3, [r3, #0]
    174e:	2118      	movs	r1, #24
    1750:	4879      	ldr	r0, [pc, #484]	; (1938 <groundState+0x240>)
    1752:	fb01 0102 	mla	r1, r1, r2, r0
    1756:	54cc      	strb	r4, [r1, r3]
		if(textReverseVideo == true)  //If this is reverse Text
    1758:	4978      	ldr	r1, [pc, #480]	; (193c <groundState+0x244>)
    175a:	7809      	ldrb	r1, [r1, #0]
    175c:	2900      	cmp	r1, #0
    175e:	f000 81df 	beq.w	1b20 <groundState+0x428>
			SetBit(consoleSGR[xCharPos][yCharPos],7);
    1762:	2118      	movs	r1, #24
    1764:	4876      	ldr	r0, [pc, #472]	; (1940 <groundState+0x248>)
    1766:	fb01 0102 	mla	r1, r1, r2, r0
    176a:	5cc8      	ldrb	r0, [r1, r3]
    176c:	f060 007f 	orn	r0, r0, #127	; 0x7f
    1770:	54c8      	strb	r0, [r1, r3]
		if(textBold == true)
    1772:	4974      	ldr	r1, [pc, #464]	; (1944 <groundState+0x24c>)
    1774:	7809      	ldrb	r1, [r1, #0]
    1776:	2900      	cmp	r1, #0
    1778:	f000 81db 	beq.w	1b32 <groundState+0x43a>
			SetBit(consoleSGR[xCharPos][yCharPos],1);
    177c:	2118      	movs	r1, #24
    177e:	4870      	ldr	r0, [pc, #448]	; (1940 <groundState+0x248>)
    1780:	fb01 0102 	mla	r1, r1, r2, r0
    1784:	5cc8      	ldrb	r0, [r1, r3]
    1786:	f040 0002 	orr.w	r0, r0, #2
    178a:	54c8      	strb	r0, [r1, r3]
		if(textUnderscore == true)
    178c:	496e      	ldr	r1, [pc, #440]	; (1948 <groundState+0x250>)
    178e:	7809      	ldrb	r1, [r1, #0]
    1790:	2900      	cmp	r1, #0
    1792:	f000 81d7 	beq.w	1b44 <groundState+0x44c>
			SetBit(consoleSGR[xCharPos][yCharPos],4);
    1796:	2118      	movs	r1, #24
    1798:	4869      	ldr	r0, [pc, #420]	; (1940 <groundState+0x248>)
    179a:	fb01 0102 	mla	r1, r1, r2, r0
    179e:	5cc8      	ldrb	r0, [r1, r3]
    17a0:	f040 0010 	orr.w	r0, r0, #16
    17a4:	54c8      	strb	r0, [r1, r3]
		if(textBlink == true)
    17a6:	4969      	ldr	r1, [pc, #420]	; (194c <groundState+0x254>)
    17a8:	7809      	ldrb	r1, [r1, #0]
    17aa:	2900      	cmp	r1, #0
    17ac:	f000 81d3 	beq.w	1b56 <groundState+0x45e>
			SetBit(consoleSGR[xCharPos][yCharPos],5);
    17b0:	2118      	movs	r1, #24
    17b2:	4863      	ldr	r0, [pc, #396]	; (1940 <groundState+0x248>)
    17b4:	fb01 0102 	mla	r1, r1, r2, r0
    17b8:	5cc8      	ldrb	r0, [r1, r3]
    17ba:	f040 0020 	orr.w	r0, r0, #32
    17be:	54c8      	strb	r0, [r1, r3]
		consoleColors[xCharPos][yCharPos] = (textForeground << 16) | textBackground;
    17c0:	2518      	movs	r5, #24
    17c2:	fb05 3302 	mla	r3, r5, r2, r3
    17c6:	4a62      	ldr	r2, [pc, #392]	; (1950 <groundState+0x258>)
    17c8:	8811      	ldrh	r1, [r2, #0]
    17ca:	4a62      	ldr	r2, [pc, #392]	; (1954 <groundState+0x25c>)
    17cc:	8812      	ldrh	r2, [r2, #0]
    17ce:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    17d2:	4961      	ldr	r1, [pc, #388]	; (1958 <groundState+0x260>)
    17d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		drawChar(consoleDisplay[xCharPos][yCharPos]);
    17d8:	4620      	mov	r0, r4
    17da:	4e60      	ldr	r6, [pc, #384]	; (195c <groundState+0x264>)
    17dc:	47b0      	blx	r6
		xCharPos++;
    17de:	4c54      	ldr	r4, [pc, #336]	; (1930 <groundState+0x238>)
    17e0:	8823      	ldrh	r3, [r4, #0]
    17e2:	3301      	adds	r3, #1
    17e4:	b29b      	uxth	r3, r3
    17e6:	8023      	strh	r3, [r4, #0]
		drawChar(consoleDisplay[xCharPos][yCharPos]);
    17e8:	4a52      	ldr	r2, [pc, #328]	; (1934 <groundState+0x23c>)
    17ea:	8812      	ldrh	r2, [r2, #0]
    17ec:	4952      	ldr	r1, [pc, #328]	; (1938 <groundState+0x240>)
    17ee:	fb05 1303 	mla	r3, r5, r3, r1
    17f2:	5c98      	ldrb	r0, [r3, r2]
    17f4:	47b0      	blx	r6
		if(xCharPos > 79)		//END OF LINE
    17f6:	8823      	ldrh	r3, [r4, #0]
    17f8:	2b4f      	cmp	r3, #79	; 0x4f
    17fa:	d905      	bls.n	1808 <groundState+0x110>
			xCharPos--;
    17fc:	3b01      	subs	r3, #1
    17fe:	8023      	strh	r3, [r4, #0]
}
    1800:	e002      	b.n	1808 <groundState+0x110>
		if(xCharPos > 0)
    1802:	4b4b      	ldr	r3, [pc, #300]	; (1930 <groundState+0x238>)
    1804:	881b      	ldrh	r3, [r3, #0]
    1806:	b903      	cbnz	r3, 180a <groundState+0x112>
    1808:	bd70      	pop	{r4, r5, r6, pc}
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    180a:	4c4b      	ldr	r4, [pc, #300]	; (1938 <groundState+0x240>)
    180c:	4d49      	ldr	r5, [pc, #292]	; (1934 <groundState+0x23c>)
    180e:	882a      	ldrh	r2, [r5, #0]
    1810:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1814:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    1818:	5c98      	ldrb	r0, [r3, r2]
    181a:	4e50      	ldr	r6, [pc, #320]	; (195c <groundState+0x264>)
    181c:	47b0      	blx	r6
			xCharPos--;
    181e:	4a44      	ldr	r2, [pc, #272]	; (1930 <groundState+0x238>)
    1820:	8813      	ldrh	r3, [r2, #0]
    1822:	3b01      	subs	r3, #1
    1824:	b29b      	uxth	r3, r3
    1826:	8013      	strh	r3, [r2, #0]
			tempCharacter = consoleDisplay[xCharPos][yCharPos];
    1828:	882a      	ldrh	r2, [r5, #0]
    182a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    182e:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
			drawChar(tempCharacter);
    1832:	5c98      	ldrb	r0, [r3, r2]
    1834:	47b0      	blx	r6
			blinkCursor();
    1836:	4b4a      	ldr	r3, [pc, #296]	; (1960 <groundState+0x268>)
    1838:	4798      	blx	r3
    183a:	bd70      	pop	{r4, r5, r6, pc}
		drawChar(consoleDisplay[xCharPos][yCharPos]);
    183c:	4c3c      	ldr	r4, [pc, #240]	; (1930 <groundState+0x238>)
    183e:	8823      	ldrh	r3, [r4, #0]
    1840:	4a3c      	ldr	r2, [pc, #240]	; (1934 <groundState+0x23c>)
    1842:	8811      	ldrh	r1, [r2, #0]
    1844:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1848:	4a3b      	ldr	r2, [pc, #236]	; (1938 <groundState+0x240>)
    184a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    184e:	5c58      	ldrb	r0, [r3, r1]
    1850:	4b42      	ldr	r3, [pc, #264]	; (195c <groundState+0x264>)
    1852:	4798      	blx	r3
		if(xCharPos <= 79)
    1854:	8820      	ldrh	r0, [r4, #0]
    1856:	284f      	cmp	r0, #79	; 0x4f
    1858:	d802      	bhi.n	1860 <groundState+0x168>
			xCharPos = nextTab(xCharPos);
    185a:	4b42      	ldr	r3, [pc, #264]	; (1964 <groundState+0x26c>)
    185c:	4798      	blx	r3
    185e:	8020      	strh	r0, [r4, #0]
		drawChar(consoleDisplay[xCharPos][yCharPos]);
    1860:	4b33      	ldr	r3, [pc, #204]	; (1930 <groundState+0x238>)
    1862:	881b      	ldrh	r3, [r3, #0]
    1864:	4a33      	ldr	r2, [pc, #204]	; (1934 <groundState+0x23c>)
    1866:	8811      	ldrh	r1, [r2, #0]
    1868:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    186c:	4a32      	ldr	r2, [pc, #200]	; (1938 <groundState+0x240>)
    186e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    1872:	5c58      	ldrb	r0, [r3, r1]
    1874:	4b39      	ldr	r3, [pc, #228]	; (195c <groundState+0x264>)
    1876:	4798      	blx	r3
		blinkCursor();
    1878:	4b39      	ldr	r3, [pc, #228]	; (1960 <groundState+0x268>)
    187a:	4798      	blx	r3
    187c:	bd70      	pop	{r4, r5, r6, pc}
		if(yCharPos == 23)
    187e:	4b2d      	ldr	r3, [pc, #180]	; (1934 <groundState+0x23c>)
    1880:	881a      	ldrh	r2, [r3, #0]
    1882:	2a17      	cmp	r2, #23
    1884:	d032      	beq.n	18ec <groundState+0x1f4>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    1886:	4c2c      	ldr	r4, [pc, #176]	; (1938 <groundState+0x240>)
    1888:	4d29      	ldr	r5, [pc, #164]	; (1930 <groundState+0x238>)
    188a:	882b      	ldrh	r3, [r5, #0]
    188c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1890:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    1894:	5c98      	ldrb	r0, [r3, r2]
    1896:	4e31      	ldr	r6, [pc, #196]	; (195c <groundState+0x264>)
    1898:	47b0      	blx	r6
			yCharPos++;
    189a:	4a26      	ldr	r2, [pc, #152]	; (1934 <groundState+0x23c>)
    189c:	8813      	ldrh	r3, [r2, #0]
    189e:	3301      	adds	r3, #1
    18a0:	b29b      	uxth	r3, r3
    18a2:	8013      	strh	r3, [r2, #0]
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    18a4:	882a      	ldrh	r2, [r5, #0]
    18a6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    18aa:	eb04 04c2 	add.w	r4, r4, r2, lsl #3
    18ae:	5ce0      	ldrb	r0, [r4, r3]
    18b0:	47b0      	blx	r6
			blinkCursor();
    18b2:	4b2b      	ldr	r3, [pc, #172]	; (1960 <groundState+0x268>)
    18b4:	4798      	blx	r3
		if(lineFeed)
    18b6:	4b2c      	ldr	r3, [pc, #176]	; (1968 <groundState+0x270>)
    18b8:	781b      	ldrb	r3, [r3, #0]
    18ba:	2b00      	cmp	r3, #0
    18bc:	d0a4      	beq.n	1808 <groundState+0x110>
			if(yCharPos == 23)
    18be:	4b1d      	ldr	r3, [pc, #116]	; (1934 <groundState+0x23c>)
    18c0:	881a      	ldrh	r2, [r3, #0]
    18c2:	2a17      	cmp	r2, #23
    18c4:	d021      	beq.n	190a <groundState+0x212>
				drawChar(consoleDisplay[xCharPos][yCharPos]);
    18c6:	4d1c      	ldr	r5, [pc, #112]	; (1938 <groundState+0x240>)
    18c8:	4e19      	ldr	r6, [pc, #100]	; (1930 <groundState+0x238>)
    18ca:	8833      	ldrh	r3, [r6, #0]
    18cc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    18d0:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    18d4:	5c98      	ldrb	r0, [r3, r2]
    18d6:	4c21      	ldr	r4, [pc, #132]	; (195c <groundState+0x264>)
    18d8:	47a0      	blx	r4
				xCharPos = 0;
    18da:	2300      	movs	r3, #0
    18dc:	8033      	strh	r3, [r6, #0]
				drawChar(consoleDisplay[xCharPos][yCharPos]);
    18de:	4b15      	ldr	r3, [pc, #84]	; (1934 <groundState+0x23c>)
    18e0:	881b      	ldrh	r3, [r3, #0]
    18e2:	5ce8      	ldrb	r0, [r5, r3]
    18e4:	47a0      	blx	r4
				blinkCursor();
    18e6:	4b1e      	ldr	r3, [pc, #120]	; (1960 <groundState+0x268>)
    18e8:	4798      	blx	r3
    18ea:	bd70      	pop	{r4, r5, r6, pc}
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    18ec:	4b10      	ldr	r3, [pc, #64]	; (1930 <groundState+0x238>)
    18ee:	881b      	ldrh	r3, [r3, #0]
    18f0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    18f4:	4a10      	ldr	r2, [pc, #64]	; (1938 <groundState+0x240>)
    18f6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    18fa:	7dd8      	ldrb	r0, [r3, #23]
    18fc:	4b17      	ldr	r3, [pc, #92]	; (195c <groundState+0x264>)
    18fe:	4798      	blx	r3
			newLine();
    1900:	4b1a      	ldr	r3, [pc, #104]	; (196c <groundState+0x274>)
    1902:	4798      	blx	r3
			blinkCursor();
    1904:	4b16      	ldr	r3, [pc, #88]	; (1960 <groundState+0x268>)
    1906:	4798      	blx	r3
    1908:	e7d5      	b.n	18b6 <groundState+0x1be>
				drawChar(consoleDisplay[xCharPos][yCharPos]);
    190a:	4d09      	ldr	r5, [pc, #36]	; (1930 <groundState+0x238>)
    190c:	882b      	ldrh	r3, [r5, #0]
    190e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1912:	4a09      	ldr	r2, [pc, #36]	; (1938 <groundState+0x240>)
    1914:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    1918:	7dd8      	ldrb	r0, [r3, #23]
    191a:	4c10      	ldr	r4, [pc, #64]	; (195c <groundState+0x264>)
    191c:	47a0      	blx	r4
				xCharPos = 0;
    191e:	2000      	movs	r0, #0
    1920:	8028      	strh	r0, [r5, #0]
				drawChar(0x00);
    1922:	47a0      	blx	r4
				blinkCursor();
    1924:	4b0e      	ldr	r3, [pc, #56]	; (1960 <groundState+0x268>)
    1926:	4798      	blx	r3
    1928:	bd70      	pop	{r4, r5, r6, pc}
    192a:	bf00      	nop
    192c:	000002b1 	.word	0x000002b1
    1930:	200004e2 	.word	0x200004e2
    1934:	200004e4 	.word	0x200004e4
    1938:	200005ec 	.word	0x200005ec
    193c:	20000582 	.word	0x20000582
    1940:	20000d6c 	.word	0x20000d6c
    1944:	20000580 	.word	0x20000580
    1948:	20000560 	.word	0x20000560
    194c:	20000562 	.word	0x20000562
    1950:	20000014 	.word	0x20000014
    1954:	2000041e 	.word	0x2000041e
    1958:	200014ec 	.word	0x200014ec
    195c:	000038b1 	.word	0x000038b1
    1960:	00003c09 	.word	0x00003c09
    1964:	000016d5 	.word	0x000016d5
    1968:	20000190 	.word	0x20000190
    196c:	00003dc9 	.word	0x00003dc9
		if(yCharPos == 23)
    1970:	4b7d      	ldr	r3, [pc, #500]	; (1b68 <groundState+0x470>)
    1972:	881a      	ldrh	r2, [r3, #0]
    1974:	2a17      	cmp	r2, #23
    1976:	d033      	beq.n	19e0 <groundState+0x2e8>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    1978:	4c7c      	ldr	r4, [pc, #496]	; (1b6c <groundState+0x474>)
    197a:	4d7d      	ldr	r5, [pc, #500]	; (1b70 <groundState+0x478>)
    197c:	882b      	ldrh	r3, [r5, #0]
    197e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1982:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    1986:	5c98      	ldrb	r0, [r3, r2]
    1988:	4e7a      	ldr	r6, [pc, #488]	; (1b74 <groundState+0x47c>)
    198a:	47b0      	blx	r6
			yCharPos++;
    198c:	4a76      	ldr	r2, [pc, #472]	; (1b68 <groundState+0x470>)
    198e:	8813      	ldrh	r3, [r2, #0]
    1990:	3301      	adds	r3, #1
    1992:	b29b      	uxth	r3, r3
    1994:	8013      	strh	r3, [r2, #0]
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    1996:	882a      	ldrh	r2, [r5, #0]
    1998:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    199c:	eb04 04c2 	add.w	r4, r4, r2, lsl #3
    19a0:	5ce0      	ldrb	r0, [r4, r3]
    19a2:	47b0      	blx	r6
			blinkCursor();
    19a4:	4b74      	ldr	r3, [pc, #464]	; (1b78 <groundState+0x480>)
    19a6:	4798      	blx	r3
		if(lineFeed)
    19a8:	4b74      	ldr	r3, [pc, #464]	; (1b7c <groundState+0x484>)
    19aa:	781b      	ldrb	r3, [r3, #0]
    19ac:	2b00      	cmp	r3, #0
    19ae:	f43f af2b 	beq.w	1808 <groundState+0x110>
			if(yCharPos == 23)
    19b2:	4b6d      	ldr	r3, [pc, #436]	; (1b68 <groundState+0x470>)
    19b4:	881a      	ldrh	r2, [r3, #0]
    19b6:	2a17      	cmp	r2, #23
    19b8:	d021      	beq.n	19fe <groundState+0x306>
				drawChar(consoleDisplay[xCharPos][yCharPos]);
    19ba:	4d6c      	ldr	r5, [pc, #432]	; (1b6c <groundState+0x474>)
    19bc:	4e6c      	ldr	r6, [pc, #432]	; (1b70 <groundState+0x478>)
    19be:	8833      	ldrh	r3, [r6, #0]
    19c0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    19c4:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    19c8:	5c98      	ldrb	r0, [r3, r2]
    19ca:	4c6a      	ldr	r4, [pc, #424]	; (1b74 <groundState+0x47c>)
    19cc:	47a0      	blx	r4
				xCharPos = 0;
    19ce:	2300      	movs	r3, #0
    19d0:	8033      	strh	r3, [r6, #0]
				drawChar(consoleDisplay[xCharPos][yCharPos]);
    19d2:	4b65      	ldr	r3, [pc, #404]	; (1b68 <groundState+0x470>)
    19d4:	881b      	ldrh	r3, [r3, #0]
    19d6:	5ce8      	ldrb	r0, [r5, r3]
    19d8:	47a0      	blx	r4
				blinkCursor();
    19da:	4b67      	ldr	r3, [pc, #412]	; (1b78 <groundState+0x480>)
    19dc:	4798      	blx	r3
    19de:	bd70      	pop	{r4, r5, r6, pc}
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    19e0:	4b63      	ldr	r3, [pc, #396]	; (1b70 <groundState+0x478>)
    19e2:	881b      	ldrh	r3, [r3, #0]
    19e4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    19e8:	4a60      	ldr	r2, [pc, #384]	; (1b6c <groundState+0x474>)
    19ea:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    19ee:	7dd8      	ldrb	r0, [r3, #23]
    19f0:	4b60      	ldr	r3, [pc, #384]	; (1b74 <groundState+0x47c>)
    19f2:	4798      	blx	r3
			newLine();
    19f4:	4b62      	ldr	r3, [pc, #392]	; (1b80 <groundState+0x488>)
    19f6:	4798      	blx	r3
			blinkCursor();
    19f8:	4b5f      	ldr	r3, [pc, #380]	; (1b78 <groundState+0x480>)
    19fa:	4798      	blx	r3
    19fc:	e7d4      	b.n	19a8 <groundState+0x2b0>
				drawChar(consoleDisplay[xCharPos][yCharPos]);
    19fe:	4d5c      	ldr	r5, [pc, #368]	; (1b70 <groundState+0x478>)
    1a00:	882b      	ldrh	r3, [r5, #0]
    1a02:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1a06:	4a59      	ldr	r2, [pc, #356]	; (1b6c <groundState+0x474>)
    1a08:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    1a0c:	7dd8      	ldrb	r0, [r3, #23]
    1a0e:	4c59      	ldr	r4, [pc, #356]	; (1b74 <groundState+0x47c>)
    1a10:	47a0      	blx	r4
				xCharPos = 0;
    1a12:	2000      	movs	r0, #0
    1a14:	8028      	strh	r0, [r5, #0]
				drawChar(0x00);
    1a16:	47a0      	blx	r4
				blinkCursor();
    1a18:	4b57      	ldr	r3, [pc, #348]	; (1b78 <groundState+0x480>)
    1a1a:	4798      	blx	r3
    1a1c:	bd70      	pop	{r4, r5, r6, pc}
		if(yCharPos == 23)
    1a1e:	4b52      	ldr	r3, [pc, #328]	; (1b68 <groundState+0x470>)
    1a20:	881a      	ldrh	r2, [r3, #0]
    1a22:	2a17      	cmp	r2, #23
    1a24:	d033      	beq.n	1a8e <groundState+0x396>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    1a26:	4c51      	ldr	r4, [pc, #324]	; (1b6c <groundState+0x474>)
    1a28:	4d51      	ldr	r5, [pc, #324]	; (1b70 <groundState+0x478>)
    1a2a:	882b      	ldrh	r3, [r5, #0]
    1a2c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1a30:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    1a34:	5c98      	ldrb	r0, [r3, r2]
    1a36:	4e4f      	ldr	r6, [pc, #316]	; (1b74 <groundState+0x47c>)
    1a38:	47b0      	blx	r6
			yCharPos++;
    1a3a:	4a4b      	ldr	r2, [pc, #300]	; (1b68 <groundState+0x470>)
    1a3c:	8813      	ldrh	r3, [r2, #0]
    1a3e:	3301      	adds	r3, #1
    1a40:	b29b      	uxth	r3, r3
    1a42:	8013      	strh	r3, [r2, #0]
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    1a44:	882a      	ldrh	r2, [r5, #0]
    1a46:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    1a4a:	eb04 04c2 	add.w	r4, r4, r2, lsl #3
    1a4e:	5ce0      	ldrb	r0, [r4, r3]
    1a50:	47b0      	blx	r6
			blinkCursor();
    1a52:	4b49      	ldr	r3, [pc, #292]	; (1b78 <groundState+0x480>)
    1a54:	4798      	blx	r3
		if(lineFeed)
    1a56:	4b49      	ldr	r3, [pc, #292]	; (1b7c <groundState+0x484>)
    1a58:	781b      	ldrb	r3, [r3, #0]
    1a5a:	2b00      	cmp	r3, #0
    1a5c:	f43f aed4 	beq.w	1808 <groundState+0x110>
			if(yCharPos == 23)
    1a60:	4b41      	ldr	r3, [pc, #260]	; (1b68 <groundState+0x470>)
    1a62:	881a      	ldrh	r2, [r3, #0]
    1a64:	2a17      	cmp	r2, #23
    1a66:	d021      	beq.n	1aac <groundState+0x3b4>
				drawChar(consoleDisplay[xCharPos][yCharPos]);
    1a68:	4d40      	ldr	r5, [pc, #256]	; (1b6c <groundState+0x474>)
    1a6a:	4e41      	ldr	r6, [pc, #260]	; (1b70 <groundState+0x478>)
    1a6c:	8833      	ldrh	r3, [r6, #0]
    1a6e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1a72:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    1a76:	5c98      	ldrb	r0, [r3, r2]
    1a78:	4c3e      	ldr	r4, [pc, #248]	; (1b74 <groundState+0x47c>)
    1a7a:	47a0      	blx	r4
				xCharPos = 0;
    1a7c:	2300      	movs	r3, #0
    1a7e:	8033      	strh	r3, [r6, #0]
				drawChar(consoleDisplay[xCharPos][yCharPos]);
    1a80:	4b39      	ldr	r3, [pc, #228]	; (1b68 <groundState+0x470>)
    1a82:	881b      	ldrh	r3, [r3, #0]
    1a84:	5ce8      	ldrb	r0, [r5, r3]
    1a86:	47a0      	blx	r4
				blinkCursor();
    1a88:	4b3b      	ldr	r3, [pc, #236]	; (1b78 <groundState+0x480>)
    1a8a:	4798      	blx	r3
    1a8c:	bd70      	pop	{r4, r5, r6, pc}
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    1a8e:	4b38      	ldr	r3, [pc, #224]	; (1b70 <groundState+0x478>)
    1a90:	881b      	ldrh	r3, [r3, #0]
    1a92:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1a96:	4a35      	ldr	r2, [pc, #212]	; (1b6c <groundState+0x474>)
    1a98:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    1a9c:	7dd8      	ldrb	r0, [r3, #23]
    1a9e:	4b35      	ldr	r3, [pc, #212]	; (1b74 <groundState+0x47c>)
    1aa0:	4798      	blx	r3
			newLine();
    1aa2:	4b37      	ldr	r3, [pc, #220]	; (1b80 <groundState+0x488>)
    1aa4:	4798      	blx	r3
			blinkCursor();
    1aa6:	4b34      	ldr	r3, [pc, #208]	; (1b78 <groundState+0x480>)
    1aa8:	4798      	blx	r3
    1aaa:	e7d4      	b.n	1a56 <groundState+0x35e>
				drawChar(consoleDisplay[xCharPos][yCharPos]);
    1aac:	4d30      	ldr	r5, [pc, #192]	; (1b70 <groundState+0x478>)
    1aae:	882b      	ldrh	r3, [r5, #0]
    1ab0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1ab4:	4a2d      	ldr	r2, [pc, #180]	; (1b6c <groundState+0x474>)
    1ab6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    1aba:	7dd8      	ldrb	r0, [r3, #23]
    1abc:	4c2d      	ldr	r4, [pc, #180]	; (1b74 <groundState+0x47c>)
    1abe:	47a0      	blx	r4
				xCharPos = 0;
    1ac0:	2000      	movs	r0, #0
    1ac2:	8028      	strh	r0, [r5, #0]
				drawChar(0x00);
    1ac4:	47a0      	blx	r4
				blinkCursor();
    1ac6:	4b2c      	ldr	r3, [pc, #176]	; (1b78 <groundState+0x480>)
    1ac8:	4798      	blx	r3
    1aca:	bd70      	pop	{r4, r5, r6, pc}
		if(yCharPos == 23)
    1acc:	4b26      	ldr	r3, [pc, #152]	; (1b68 <groundState+0x470>)
    1ace:	881a      	ldrh	r2, [r3, #0]
    1ad0:	2a17      	cmp	r2, #23
    1ad2:	d012      	beq.n	1afa <groundState+0x402>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    1ad4:	4d25      	ldr	r5, [pc, #148]	; (1b6c <groundState+0x474>)
    1ad6:	4e26      	ldr	r6, [pc, #152]	; (1b70 <groundState+0x478>)
    1ad8:	8833      	ldrh	r3, [r6, #0]
    1ada:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1ade:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    1ae2:	5c98      	ldrb	r0, [r3, r2]
    1ae4:	4c23      	ldr	r4, [pc, #140]	; (1b74 <groundState+0x47c>)
    1ae6:	47a0      	blx	r4
			xCharPos = 0;
    1ae8:	2300      	movs	r3, #0
    1aea:	8033      	strh	r3, [r6, #0]
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    1aec:	4b1e      	ldr	r3, [pc, #120]	; (1b68 <groundState+0x470>)
    1aee:	881b      	ldrh	r3, [r3, #0]
    1af0:	5ce8      	ldrb	r0, [r5, r3]
    1af2:	47a0      	blx	r4
			blinkCursor();
    1af4:	4b20      	ldr	r3, [pc, #128]	; (1b78 <groundState+0x480>)
    1af6:	4798      	blx	r3
    1af8:	bd70      	pop	{r4, r5, r6, pc}
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    1afa:	4c1d      	ldr	r4, [pc, #116]	; (1b70 <groundState+0x478>)
    1afc:	8823      	ldrh	r3, [r4, #0]
    1afe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1b02:	4a1a      	ldr	r2, [pc, #104]	; (1b6c <groundState+0x474>)
    1b04:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    1b08:	7dd8      	ldrb	r0, [r3, #23]
    1b0a:	4b1a      	ldr	r3, [pc, #104]	; (1b74 <groundState+0x47c>)
    1b0c:	4798      	blx	r3
			xCharPos = 0;
    1b0e:	2300      	movs	r3, #0
    1b10:	8023      	strh	r3, [r4, #0]
			blinkCursor();
    1b12:	4b19      	ldr	r3, [pc, #100]	; (1b78 <groundState+0x480>)
    1b14:	4798      	blx	r3
    1b16:	bd70      	pop	{r4, r5, r6, pc}
		currentState = stateESC;
    1b18:	2201      	movs	r2, #1
    1b1a:	4b1a      	ldr	r3, [pc, #104]	; (1b84 <groundState+0x48c>)
    1b1c:	701a      	strb	r2, [r3, #0]
    1b1e:	bd70      	pop	{r4, r5, r6, pc}
			ClearBit(consoleSGR[xCharPos][yCharPos],7);
    1b20:	2118      	movs	r1, #24
    1b22:	4819      	ldr	r0, [pc, #100]	; (1b88 <groundState+0x490>)
    1b24:	fb01 0102 	mla	r1, r1, r2, r0
    1b28:	5cc8      	ldrb	r0, [r1, r3]
    1b2a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    1b2e:	54c8      	strb	r0, [r1, r3]
    1b30:	e61f      	b.n	1772 <groundState+0x7a>
			ClearBit(consoleSGR[xCharPos][yCharPos],1);
    1b32:	2118      	movs	r1, #24
    1b34:	4814      	ldr	r0, [pc, #80]	; (1b88 <groundState+0x490>)
    1b36:	fb01 0102 	mla	r1, r1, r2, r0
    1b3a:	5cc8      	ldrb	r0, [r1, r3]
    1b3c:	f020 0002 	bic.w	r0, r0, #2
    1b40:	54c8      	strb	r0, [r1, r3]
    1b42:	e623      	b.n	178c <groundState+0x94>
			ClearBit(consoleSGR[xCharPos][yCharPos],4);
    1b44:	2118      	movs	r1, #24
    1b46:	4810      	ldr	r0, [pc, #64]	; (1b88 <groundState+0x490>)
    1b48:	fb01 0102 	mla	r1, r1, r2, r0
    1b4c:	5cc8      	ldrb	r0, [r1, r3]
    1b4e:	f020 0010 	bic.w	r0, r0, #16
    1b52:	54c8      	strb	r0, [r1, r3]
    1b54:	e627      	b.n	17a6 <groundState+0xae>
			ClearBit(consoleSGR[xCharPos][yCharPos],5);
    1b56:	2118      	movs	r1, #24
    1b58:	480b      	ldr	r0, [pc, #44]	; (1b88 <groundState+0x490>)
    1b5a:	fb01 0102 	mla	r1, r1, r2, r0
    1b5e:	5cc8      	ldrb	r0, [r1, r3]
    1b60:	f020 0020 	bic.w	r0, r0, #32
    1b64:	54c8      	strb	r0, [r1, r3]
    1b66:	e62b      	b.n	17c0 <groundState+0xc8>
    1b68:	200004e4 	.word	0x200004e4
    1b6c:	200005ec 	.word	0x200005ec
    1b70:	200004e2 	.word	0x200004e2
    1b74:	000038b1 	.word	0x000038b1
    1b78:	00003c09 	.word	0x00003c09
    1b7c:	20000190 	.word	0x20000190
    1b80:	00003dc9 	.word	0x00003dc9
    1b84:	200004e7 	.word	0x200004e7
    1b88:	20000d6c 	.word	0x20000d6c

00001b8c <parseChar>:
{
    1b8c:	b508      	push	{r3, lr}
	parserState state = currentState;
    1b8e:	4b0f      	ldr	r3, [pc, #60]	; (1bcc <parseChar+0x40>)
	switch(state)
    1b90:	781b      	ldrb	r3, [r3, #0]
    1b92:	2b05      	cmp	r3, #5
    1b94:	d818      	bhi.n	1bc8 <parseChar+0x3c>
    1b96:	e8df f003 	tbb	[pc, r3]
    1b9a:	0603      	.short	0x0603
    1b9c:	15120f09 	.word	0x15120f09
			groundState(character);
    1ba0:	4b0b      	ldr	r3, [pc, #44]	; (1bd0 <parseChar+0x44>)
    1ba2:	4798      	blx	r3
			break;
    1ba4:	bd08      	pop	{r3, pc}
			escState(character);
    1ba6:	4b0b      	ldr	r3, [pc, #44]	; (1bd4 <parseChar+0x48>)
    1ba8:	4798      	blx	r3
			break;
    1baa:	bd08      	pop	{r3, pc}
	stateEnterBuffer = 0x00;
    1bac:	2300      	movs	r3, #0
    1bae:	4a0a      	ldr	r2, [pc, #40]	; (1bd8 <parseChar+0x4c>)
    1bb0:	7013      	strb	r3, [r2, #0]
	currentState = stateGround;
    1bb2:	4a06      	ldr	r2, [pc, #24]	; (1bcc <parseChar+0x40>)
    1bb4:	7013      	strb	r3, [r2, #0]
    1bb6:	bd08      	pop	{r3, pc}
			CSIentryState(character);
    1bb8:	4b08      	ldr	r3, [pc, #32]	; (1bdc <parseChar+0x50>)
    1bba:	4798      	blx	r3
			break;
    1bbc:	bd08      	pop	{r3, pc}
			CSIparamState(character);
    1bbe:	4b08      	ldr	r3, [pc, #32]	; (1be0 <parseChar+0x54>)
    1bc0:	4798      	blx	r3
			break;
    1bc2:	bd08      	pop	{r3, pc}
			CSIignoreState(character);
    1bc4:	4b07      	ldr	r3, [pc, #28]	; (1be4 <parseChar+0x58>)
    1bc6:	4798      	blx	r3
    1bc8:	bd08      	pop	{r3, pc}
    1bca:	bf00      	nop
    1bcc:	200004e7 	.word	0x200004e7
    1bd0:	000016f9 	.word	0x000016f9
    1bd4:	00000585 	.word	0x00000585
    1bd8:	2000056e 	.word	0x2000056e
    1bdc:	0000147d 	.word	0x0000147d
    1be0:	0000141d 	.word	0x0000141d
    1be4:	00000345 	.word	0x00000345

00001be8 <drawKare>:
//	graphic in the entire project. Please note this is the most
//	space efficient way to do this; a 40x31 bitmap is 930 bytes,
//	whereas	this is (104*2)+28+20, or 256 bytes.
/*********************************************************************/
void drawKare(int emotion)
{
    1be8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1bea:	b0c1      	sub	sp, #260	; 0x104
    1bec:	4607      	mov	r7, r0
	uint16_t body[104] = {10,10,20,20,20,0,380,10,380,10,390,20,0,
    1bee:	4c2d      	ldr	r4, [pc, #180]	; (1ca4 <drawKare+0xbc>)
    1bf0:	22d0      	movs	r2, #208	; 0xd0
    1bf2:	4621      	mov	r1, r4
    1bf4:	a80c      	add	r0, sp, #48	; 0x30
    1bf6:	4b2c      	ldr	r3, [pc, #176]	; (1ca8 <drawKare+0xc0>)
    1bf8:	4798      	blx	r3
		80,190,280,200,280,40,290,190,0,70,50,80,0,90,50,100,0,110,
		50,120,0,130,50,140,0,150,50,160,0,170,50,180,0,190,50,200,
		300,200,370,210,30,220,370,230,30,240,370,250,30,260,370,
		270,90,280,300,290};
	
	uint8_t happyTerm[28] = {180,80,190,130,170,130,190,140,140,
    1bfa:	ad05      	add	r5, sp, #20
    1bfc:	f104 06d0 	add.w	r6, r4, #208	; 0xd0
    1c00:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    1c02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    1c04:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    1c08:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		60,150,100,210,60,220,100,130,150,140,160,140,160,220,170,
	220,150,230,160};
	
	uint8_t rPiBeret[20] = {120,60,240,80,110,70,120,90,150,
    1c0c:	466d      	mov	r5, sp
    1c0e:	34ec      	adds	r4, #236	; 0xec
    1c10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    1c12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    1c14:	6823      	ldr	r3, [r4, #0]
    1c16:	602b      	str	r3, [r5, #0]
    1c18:	ac0c      	add	r4, sp, #48	; 0x30
    1c1a:	ae40      	add	r6, sp, #256	; 0x100

	
	
	for(int i = 0; i < 104; i = i+4)
	{
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
    1c1c:	4d23      	ldr	r5, [pc, #140]	; (1cac <drawKare+0xc4>)
		((body[i+1]/iSv)+(offsetGraphicY)),
		((body[i+2]/iSv)+(offsetGraphicX)),
		((body[i+3]/iSv)+(offsetGraphicY)));
    1c1e:	88e3      	ldrh	r3, [r4, #6]
    1c20:	105b      	asrs	r3, r3, #1
		((body[i+2]/iSv)+(offsetGraphicX)),
    1c22:	88a2      	ldrh	r2, [r4, #4]
    1c24:	1052      	asrs	r2, r2, #1
		((body[i+1]/iSv)+(offsetGraphicY)),
    1c26:	8861      	ldrh	r1, [r4, #2]
    1c28:	1049      	asrs	r1, r1, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
    1c2a:	f834 0b08 	ldrh.w	r0, [r4], #8
    1c2e:	1040      	asrs	r0, r0, #1
    1c30:	3396      	adds	r3, #150	; 0x96
    1c32:	f502 7296 	add.w	r2, r2, #300	; 0x12c
    1c36:	3196      	adds	r1, #150	; 0x96
    1c38:	f500 7096 	add.w	r0, r0, #300	; 0x12c
    1c3c:	47a8      	blx	r5
	for(int i = 0; i < 104; i = i+4)
    1c3e:	42b4      	cmp	r4, r6
    1c40:	d1ed      	bne.n	1c1e <drawKare+0x36>
	}
	switch(emotion)
    1c42:	b11f      	cbz	r7, 1c4c <drawKare+0x64>
    1c44:	2f01      	cmp	r7, #1
    1c46:	d017      	beq.n	1c78 <drawKare+0x90>
		break;
		case 2:
		//make a sad terminal thing go here
		break;
	}
}
    1c48:	b041      	add	sp, #260	; 0x104
    1c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1c4c:	ac05      	add	r4, sp, #20
    1c4e:	ae0c      	add	r6, sp, #48	; 0x30
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
    1c50:	4d16      	ldr	r5, [pc, #88]	; (1cac <drawKare+0xc4>)
			((happyTerm[i+3]/iSv)+(offsetGraphicY)));
    1c52:	78e3      	ldrb	r3, [r4, #3]
    1c54:	105b      	asrs	r3, r3, #1
			((happyTerm[i+2]/iSv)+(offsetGraphicX)),
    1c56:	78a2      	ldrb	r2, [r4, #2]
    1c58:	1052      	asrs	r2, r2, #1
			((happyTerm[i+1]/iSv)+(offsetGraphicY)),
    1c5a:	7861      	ldrb	r1, [r4, #1]
    1c5c:	1049      	asrs	r1, r1, #1
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
    1c5e:	f814 0b04 	ldrb.w	r0, [r4], #4
    1c62:	1040      	asrs	r0, r0, #1
    1c64:	3396      	adds	r3, #150	; 0x96
    1c66:	f502 7296 	add.w	r2, r2, #300	; 0x12c
    1c6a:	3196      	adds	r1, #150	; 0x96
    1c6c:	f500 7096 	add.w	r0, r0, #300	; 0x12c
    1c70:	47a8      	blx	r5
		for(int i = 0; i < 28; i = i+4)
    1c72:	42a6      	cmp	r6, r4
    1c74:	d1ed      	bne.n	1c52 <drawKare+0x6a>
    1c76:	e7e7      	b.n	1c48 <drawKare+0x60>
    1c78:	466c      	mov	r4, sp
    1c7a:	ae05      	add	r6, sp, #20
			fillRect((
    1c7c:	4d0b      	ldr	r5, [pc, #44]	; (1cac <drawKare+0xc4>)
			((rPiBeret[i+3]/iSv)+(offsetGraphicY)));
    1c7e:	78e3      	ldrb	r3, [r4, #3]
    1c80:	105b      	asrs	r3, r3, #1
			((rPiBeret[i+2]/iSv)+(offsetGraphicX)),
    1c82:	78a2      	ldrb	r2, [r4, #2]
    1c84:	1052      	asrs	r2, r2, #1
			((rPiBeret[i+1]/iSv)+(offsetGraphicY)),
    1c86:	7861      	ldrb	r1, [r4, #1]
    1c88:	1049      	asrs	r1, r1, #1
			(rPiBeret[i]/iSv)+(offsetGraphicX)),
    1c8a:	f814 0b04 	ldrb.w	r0, [r4], #4
    1c8e:	1040      	asrs	r0, r0, #1
			fillRect((
    1c90:	3396      	adds	r3, #150	; 0x96
    1c92:	f502 7296 	add.w	r2, r2, #300	; 0x12c
    1c96:	3196      	adds	r1, #150	; 0x96
    1c98:	f500 7096 	add.w	r0, r0, #300	; 0x12c
    1c9c:	47a8      	blx	r5
		for(int i = 0; i < 20; i = i+4)
    1c9e:	42b4      	cmp	r4, r6
    1ca0:	d1ed      	bne.n	1c7e <drawKare+0x96>
    1ca2:	e7d1      	b.n	1c48 <drawKare+0x60>
    1ca4:	00006510 	.word	0x00006510
    1ca8:	00004f69 	.word	0x00004f69
    1cac:	0000465d 	.word	0x0000465d

00001cb0 <splashScreen>:

void splashScreen(void)
{
    1cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	static const char *splashText[32];
	splashText[0]  = "Trans rights are human rights";//
    1cb4:	4c59      	ldr	r4, [pc, #356]	; (1e1c <splashScreen+0x16c>)
    1cb6:	4b5a      	ldr	r3, [pc, #360]	; (1e20 <splashScreen+0x170>)
    1cb8:	6023      	str	r3, [r4, #0]
	splashText[1]  = "13^5 + 16^5 = 17^5";//
    1cba:	4b5a      	ldr	r3, [pc, #360]	; (1e24 <splashScreen+0x174>)
    1cbc:	6063      	str	r3, [r4, #4]
	splashText[2]  = "Reticulating Splines";//
    1cbe:	4b5a      	ldr	r3, [pc, #360]	; (1e28 <splashScreen+0x178>)
    1cc0:	60a3      	str	r3, [r4, #8]
	splashText[3]  = "violence.works";//
    1cc2:	4b5a      	ldr	r3, [pc, #360]	; (1e2c <splashScreen+0x17c>)
    1cc4:	60e3      	str	r3, [r4, #12]
	splashText[4]  = "Si + PB";//
    1cc6:	4b5a      	ldr	r3, [pc, #360]	; (1e30 <splashScreen+0x180>)
    1cc8:	6123      	str	r3, [r4, #16]
	splashText[5]  = "Kill Billionaires (and Trillionaire)";//
    1cca:	4b5a      	ldr	r3, [pc, #360]	; (1e34 <splashScreen+0x184>)
    1ccc:	6163      	str	r3, [r4, #20]
	splashText[6]  = "Interest in technology is not a personality";//
    1cce:	4b5a      	ldr	r3, [pc, #360]	; (1e38 <splashScreen+0x188>)
    1cd0:	61a3      	str	r3, [r4, #24]
	splashText[7]  = "10 PRINT CHR$(205.5+RND(1)); : GOTO 10";//
    1cd2:	4b5a      	ldr	r3, [pc, #360]	; (1e3c <splashScreen+0x18c>)
    1cd4:	61e3      	str	r3, [r4, #28]
	splashText[8]  = "No gods. No masters. No external libraries.";//
    1cd6:	4b5a      	ldr	r3, [pc, #360]	; (1e40 <splashScreen+0x190>)
    1cd8:	6223      	str	r3, [r4, #32]
	splashText[9]  = "Kill Nazis";//
    1cda:	4b5a      	ldr	r3, [pc, #360]	; (1e44 <splashScreen+0x194>)
    1cdc:	6263      	str	r3, [r4, #36]	; 0x24
	splashText[10] = "Tiananmen Square 1989";//
    1cde:	4b5a      	ldr	r3, [pc, #360]	; (1e48 <splashScreen+0x198>)
    1ce0:	62a3      	str	r3, [r4, #40]	; 0x28
	splashText[11] = "America was founded on slavery";
    1ce2:	4b5a      	ldr	r3, [pc, #360]	; (1e4c <splashScreen+0x19c>)
    1ce4:	62e3      	str	r3, [r4, #44]	; 0x2c
	splashText[12] = "There is only capital and labor";//
    1ce6:	4b5a      	ldr	r3, [pc, #360]	; (1e50 <splashScreen+0x1a0>)
    1ce8:	6323      	str	r3, [r4, #48]	; 0x30
	splashText[13] = "Encourage SYMMETRIC class warfare";//
    1cea:	4b5a      	ldr	r3, [pc, #360]	; (1e54 <splashScreen+0x1a4>)
    1cec:	6363      	str	r3, [r4, #52]	; 0x34
	splashText[14] = "Vogon Poetry";//
    1cee:	4b5a      	ldr	r3, [pc, #360]	; (1e58 <splashScreen+0x1a8>)
    1cf0:	63a3      	str	r3, [r4, #56]	; 0x38
	splashText[15] = "A Nice TTY";//
    1cf2:	4b5a      	ldr	r3, [pc, #360]	; (1e5c <splashScreen+0x1ac>)
    1cf4:	63e3      	str	r3, [r4, #60]	; 0x3c
	splashText[16] = "Unix epoch minus 0xFF days";//
    1cf6:	4b5a      	ldr	r3, [pc, #360]	; (1e60 <splashScreen+0x1b0>)
    1cf8:	6423      	str	r3, [r4, #64]	; 0x40
	splashText[17] = "i  = 0x5f3759df - ( i >> 1 );";//
    1cfa:	4b5a      	ldr	r3, [pc, #360]	; (1e64 <splashScreen+0x1b4>)
    1cfc:	6463      	str	r3, [r4, #68]	; 0x44
	splashText[18] = "Speak truth to power; I'm sure they'll listen this time.";//
    1cfe:	4b5a      	ldr	r3, [pc, #360]	; (1e68 <splashScreen+0x1b8>)
    1d00:	64a3      	str	r3, [r4, #72]	; 0x48
	splashText[19] = "Defcon's canceled (2020)";//
    1d02:	4b5a      	ldr	r3, [pc, #360]	; (1e6c <splashScreen+0x1bc>)
    1d04:	64e3      	str	r3, [r4, #76]	; 0x4c
	splashText[20] = "Ratsnest: Nothing To Do!";//
    1d06:	4b5a      	ldr	r3, [pc, #360]	; (1e70 <splashScreen+0x1c0>)
    1d08:	6523      	str	r3, [r4, #80]	; 0x50
	splashText[21] = "It has 69 keys.";//
    1d0a:	4b5a      	ldr	r3, [pc, #360]	; (1e74 <splashScreen+0x1c4>)
    1d0c:	6563      	str	r3, [r4, #84]	; 0x54
	splashText[22] = "Because VT-420 was already taken";//
    1d0e:	4b5a      	ldr	r3, [pc, #360]	; (1e78 <splashScreen+0x1c8>)
    1d10:	65a3      	str	r3, [r4, #88]	; 0x58
	splashText[23] = "Compression algorithm based on BBP (1997)";//
    1d12:	4b5a      	ldr	r3, [pc, #360]	; (1e7c <splashScreen+0x1cc>)
    1d14:	65e3      	str	r3, [r4, #92]	; 0x5c
	splashText[24] = "Teach health insurance providers to code.";
    1d16:	4b5a      	ldr	r3, [pc, #360]	; (1e80 <splashScreen+0x1d0>)
    1d18:	6623      	str	r3, [r4, #96]	; 0x60
	splashText[25] = "Grand Central Hack The Planet";//
    1d1a:	4b5a      	ldr	r3, [pc, #360]	; (1e84 <splashScreen+0x1d4>)
    1d1c:	6663      	str	r3, [r4, #100]	; 0x64
	splashText[26] = "WiFi is not wireless Ethernet!";//
    1d1e:	4b5a      	ldr	r3, [pc, #360]	; (1e88 <splashScreen+0x1d8>)
    1d20:	66a3      	str	r3, [r4, #104]	; 0x68
	splashText[27] = "Save the planet, torch a gas station";//
    1d22:	4b5a      	ldr	r3, [pc, #360]	; (1e8c <splashScreen+0x1dc>)
    1d24:	66e3      	str	r3, [r4, #108]	; 0x6c
	splashText[28] = "A Nice TTY. An OK Computer.";//
    1d26:	4b5a      	ldr	r3, [pc, #360]	; (1e90 <splashScreen+0x1e0>)
    1d28:	6723      	str	r3, [r4, #112]	; 0x70
	splashText[29] = "USTeledildonics";//
    1d2a:	4b5a      	ldr	r3, [pc, #360]	; (1e94 <splashScreen+0x1e4>)
    1d2c:	6763      	str	r3, [r4, #116]	; 0x74
	splashText[30] = "Solidarity is not a new framework";//
    1d2e:	4b5a      	ldr	r3, [pc, #360]	; (1e98 <splashScreen+0x1e8>)
    1d30:	67a3      	str	r3, [r4, #120]	; 0x78
	splashText[31] = "Breadboarding Is Not A Crime";//
    1d32:	4b5a      	ldr	r3, [pc, #360]	; (1e9c <splashScreen+0x1ec>)
    1d34:	67e3      	str	r3, [r4, #124]	; 0x7c
	splashText[32] = "Off by one errors are common";
    1d36:	4b5a      	ldr	r3, [pc, #360]	; (1ea0 <splashScreen+0x1f0>)
    1d38:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	
	const char *textPhrase = splashText[(((rand())%32))];
    1d3c:	4b59      	ldr	r3, [pc, #356]	; (1ea4 <splashScreen+0x1f4>)
    1d3e:	4798      	blx	r3
    1d40:	4242      	negs	r2, r0
    1d42:	f000 031f 	and.w	r3, r0, #31
    1d46:	f002 021f 	and.w	r2, r2, #31
    1d4a:	bf58      	it	pl
    1d4c:	4253      	negpl	r3, r2
    1d4e:	f854 6023 	ldr.w	r6, [r4, r3, lsl #2]
	
	clearScreen();
    1d52:	4b55      	ldr	r3, [pc, #340]	; (1ea8 <splashScreen+0x1f8>)
    1d54:	4798      	blx	r3
	setColorRGB(255,255,255);
    1d56:	22ff      	movs	r2, #255	; 0xff
    1d58:	4611      	mov	r1, r2
    1d5a:	4610      	mov	r0, r2
    1d5c:	4b53      	ldr	r3, [pc, #332]	; (1eac <splashScreen+0x1fc>)
    1d5e:	4798      	blx	r3
	
	REG_PORT_DIRTGL1 = PORT_PB31;
    1d60:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    1d64:	4b52      	ldr	r3, [pc, #328]	; (1eb0 <splashScreen+0x200>)
    1d66:	601a      	str	r2, [r3, #0]
	PORT->Group[1].PINCFG[31].bit.PULLEN = 1;
    1d68:	3b8c      	subs	r3, #140	; 0x8c
    1d6a:	f893 20df 	ldrb.w	r2, [r3, #223]	; 0xdf
    1d6e:	f042 0204 	orr.w	r2, r2, #4
    1d72:	f883 20df 	strb.w	r2, [r3, #223]	; 0xdf
	PORT->Group[1].PINCFG[31].bit.INEN = 1;
    1d76:	f893 20df 	ldrb.w	r2, [r3, #223]	; 0xdf
    1d7a:	f042 0202 	orr.w	r2, r2, #2
    1d7e:	f883 20df 	strb.w	r2, [r3, #223]	; 0xdf
	if((PORT->Group[1].IN.reg & PORT_PB31) != 0)
    1d82:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    1d86:	2b00      	cmp	r3, #0
    1d88:	db07      	blt.n	1d9a <splashScreen+0xea>
		//This is the 'pi' graphic; put some codes
		//here to handle setting up the uarts.
		drawKare(1);
	}
	else
	drawKare(0); //The normal graphic
    1d8a:	2000      	movs	r0, #0
    1d8c:	4b49      	ldr	r3, [pc, #292]	; (1eb4 <splashScreen+0x204>)
    1d8e:	4798      	blx	r3
    1d90:	4b49      	ldr	r3, [pc, #292]	; (1eb8 <splashScreen+0x208>)
    1d92:	f503 50f0 	add.w	r0, r3, #7680	; 0x1e00
	
	for(int i = 0 ; i < 80 ; i++)
	{
		for(int j = 0 ; j < 24 ; j++)
		{
			consoleColors[i][j] = 0xFFFF0000;
    1d96:	4949      	ldr	r1, [pc, #292]	; (1ebc <splashScreen+0x20c>)
    1d98:	e006      	b.n	1da8 <splashScreen+0xf8>
		drawKare(1);
    1d9a:	2001      	movs	r0, #1
    1d9c:	4b45      	ldr	r3, [pc, #276]	; (1eb4 <splashScreen+0x204>)
    1d9e:	4798      	blx	r3
    1da0:	e7f6      	b.n	1d90 <splashScreen+0xe0>
    1da2:	4613      	mov	r3, r2
	for(int i = 0 ; i < 80 ; i++)
    1da4:	4290      	cmp	r0, r2
    1da6:	d006      	beq.n	1db6 <splashScreen+0x106>
    1da8:	f103 0260 	add.w	r2, r3, #96	; 0x60
			consoleColors[i][j] = 0xFFFF0000;
    1dac:	f843 1b04 	str.w	r1, [r3], #4
		for(int j = 0 ; j < 24 ; j++)
    1db0:	4293      	cmp	r3, r2
    1db2:	d1fb      	bne.n	1dac <splashScreen+0xfc>
    1db4:	e7f5      	b.n	1da2 <splashScreen+0xf2>
	}
	
	//setColorHex(defaultForegroundColor);
	//setBackColorHex(defaultBackgroundColor);
	
	xCharPos = 40 - (strlen(textPhrase)/2);
    1db6:	4630      	mov	r0, r6
    1db8:	4f41      	ldr	r7, [pc, #260]	; (1ec0 <splashScreen+0x210>)
    1dba:	47b8      	blx	r7
    1dbc:	4d41      	ldr	r5, [pc, #260]	; (1ec4 <splashScreen+0x214>)
    1dbe:	0843      	lsrs	r3, r0, #1
    1dc0:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
    1dc4:	802b      	strh	r3, [r5, #0]
	yCharPos = 16;
    1dc6:	4c40      	ldr	r4, [pc, #256]	; (1ec8 <splashScreen+0x218>)
    1dc8:	2310      	movs	r3, #16
    1dca:	8023      	strh	r3, [r4, #0]
	writeString(textPhrase);
    1dcc:	4630      	mov	r0, r6
    1dce:	4e3f      	ldr	r6, [pc, #252]	; (1ecc <splashScreen+0x21c>)
    1dd0:	47b0      	blx	r6
	
	
	xCharPos = 40 - (strlen(versionLabel)/2);
    1dd2:	f8df 8104 	ldr.w	r8, [pc, #260]	; 1ed8 <splashScreen+0x228>
    1dd6:	4640      	mov	r0, r8
    1dd8:	47b8      	blx	r7
    1dda:	0843      	lsrs	r3, r0, #1
    1ddc:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
    1de0:	802b      	strh	r3, [r5, #0]
	yCharPos = 18;
    1de2:	2312      	movs	r3, #18
    1de4:	8023      	strh	r3, [r4, #0]
	writeString(versionLabel);
    1de6:	4640      	mov	r0, r8
    1de8:	47b0      	blx	r6
	
	xCharPos = 40 - (strlen(compileTime)/2);
    1dea:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 1edc <splashScreen+0x22c>
    1dee:	4640      	mov	r0, r8
    1df0:	47b8      	blx	r7
    1df2:	0843      	lsrs	r3, r0, #1
    1df4:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
    1df8:	802b      	strh	r3, [r5, #0]
	yCharPos = 19;
    1dfa:	2313      	movs	r3, #19
    1dfc:	8023      	strh	r3, [r4, #0]
	writeString(compileTime);
    1dfe:	4640      	mov	r0, r8
    1e00:	47b0      	blx	r6
	
	
	delay_ms(3000);
    1e02:	f640 30b8 	movw	r0, #3000	; 0xbb8
    1e06:	4b32      	ldr	r3, [pc, #200]	; (1ed0 <splashScreen+0x220>)
    1e08:	4798      	blx	r3
		
	clearScreen();
    1e0a:	4b27      	ldr	r3, [pc, #156]	; (1ea8 <splashScreen+0x1f8>)
    1e0c:	4798      	blx	r3
	nullifyConsole();
    1e0e:	4b31      	ldr	r3, [pc, #196]	; (1ed4 <splashScreen+0x224>)
    1e10:	4798      	blx	r3
	//setColorRGB(0,255,0);
	//setBackColorRGB(0,0,0);
	
	//Setting the xChar and yChar position has to come
	//after splashScreen() and InitLCD();
	xCharPos = 0;
    1e12:	2300      	movs	r3, #0
    1e14:	802b      	strh	r3, [r5, #0]
	yCharPos = 0;
    1e16:	8023      	strh	r3, [r4, #0]
    1e18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1e1c:	20000420 	.word	0x20000420
    1e20:	00006610 	.word	0x00006610
    1e24:	00006630 	.word	0x00006630
    1e28:	00006644 	.word	0x00006644
    1e2c:	0000665c 	.word	0x0000665c
    1e30:	0000666c 	.word	0x0000666c
    1e34:	00006674 	.word	0x00006674
    1e38:	0000669c 	.word	0x0000669c
    1e3c:	000066c8 	.word	0x000066c8
    1e40:	000066f0 	.word	0x000066f0
    1e44:	0000671c 	.word	0x0000671c
    1e48:	00006728 	.word	0x00006728
    1e4c:	00006740 	.word	0x00006740
    1e50:	00006760 	.word	0x00006760
    1e54:	00006780 	.word	0x00006780
    1e58:	000067a4 	.word	0x000067a4
    1e5c:	000067b4 	.word	0x000067b4
    1e60:	000067c0 	.word	0x000067c0
    1e64:	000067dc 	.word	0x000067dc
    1e68:	000067fc 	.word	0x000067fc
    1e6c:	00006838 	.word	0x00006838
    1e70:	00006854 	.word	0x00006854
    1e74:	00006870 	.word	0x00006870
    1e78:	00006880 	.word	0x00006880
    1e7c:	000068a4 	.word	0x000068a4
    1e80:	000068d0 	.word	0x000068d0
    1e84:	000068fc 	.word	0x000068fc
    1e88:	0000691c 	.word	0x0000691c
    1e8c:	0000693c 	.word	0x0000693c
    1e90:	00006964 	.word	0x00006964
    1e94:	00006980 	.word	0x00006980
    1e98:	00006990 	.word	0x00006990
    1e9c:	000069b4 	.word	0x000069b4
    1ea0:	000069d4 	.word	0x000069d4
    1ea4:	00005191 	.word	0x00005191
    1ea8:	0000471d 	.word	0x0000471d
    1eac:	00004521 	.word	0x00004521
    1eb0:	4100448c 	.word	0x4100448c
    1eb4:	00001be9 	.word	0x00001be9
    1eb8:	200014ec 	.word	0x200014ec
    1ebc:	ffff0000 	.word	0xffff0000
    1ec0:	000053af 	.word	0x000053af
    1ec4:	200004e2 	.word	0x200004e2
    1ec8:	200004e4 	.word	0x200004e4
    1ecc:	00003edd 	.word	0x00003edd
    1ed0:	00001f71 	.word	0x00001f71
    1ed4:	00003f15 	.word	0x00003f15
    1ed8:	2000019c 	.word	0x2000019c
    1edc:	20000174 	.word	0x20000174

00001ee0 <parseRXBuffer>:
char tempCharacter;

cbuf_handle_t ouroboros;	

void parseRXBuffer(void)
{
    1ee0:	b570      	push	{r4, r5, r6, lr}
    1ee2:	b082      	sub	sp, #8
	
		
		while(!ring_empty(ouroboros))
    1ee4:	4c0a      	ldr	r4, [pc, #40]	; (1f10 <parseRXBuffer+0x30>)
    1ee6:	4d0b      	ldr	r5, [pc, #44]	; (1f14 <parseRXBuffer+0x34>)
		{
			uint8_t characterFromRingBuffer;
			ring_get(ouroboros, &characterFromRingBuffer);
    1ee8:	4e0b      	ldr	r6, [pc, #44]	; (1f18 <parseRXBuffer+0x38>)
		while(!ring_empty(ouroboros))
    1eea:	e007      	b.n	1efc <parseRXBuffer+0x1c>
			ring_get(ouroboros, &characterFromRingBuffer);
    1eec:	f10d 0107 	add.w	r1, sp, #7
    1ef0:	6820      	ldr	r0, [r4, #0]
    1ef2:	47b0      	blx	r6
			parseChar(characterFromRingBuffer);
    1ef4:	f89d 0007 	ldrb.w	r0, [sp, #7]
    1ef8:	4b08      	ldr	r3, [pc, #32]	; (1f1c <parseRXBuffer+0x3c>)
    1efa:	4798      	blx	r3
		while(!ring_empty(ouroboros))
    1efc:	6820      	ldr	r0, [r4, #0]
    1efe:	47a8      	blx	r5
    1f00:	2800      	cmp	r0, #0
    1f02:	d0f3      	beq.n	1eec <parseRXBuffer+0xc>
		
		}
		ring_reset(ouroboros);
    1f04:	4b02      	ldr	r3, [pc, #8]	; (1f10 <parseRXBuffer+0x30>)
    1f06:	6818      	ldr	r0, [r3, #0]
    1f08:	4b05      	ldr	r3, [pc, #20]	; (1f20 <parseRXBuffer+0x40>)
    1f0a:	4798      	blx	r3
}
    1f0c:	b002      	add	sp, #8
    1f0e:	bd70      	pop	{r4, r5, r6, pc}
    1f10:	20000588 	.word	0x20000588
    1f14:	00000187 	.word	0x00000187
    1f18:	0000019d 	.word	0x0000019d
    1f1c:	00001b8d 	.word	0x00001b8d
    1f20:	00000141 	.word	0x00000141

00001f24 <sendChar>:

void sendChar(char character)
{
    1f24:	b508      	push	{r3, lr}
	printf("%c", character);
    1f26:	4b01      	ldr	r3, [pc, #4]	; (1f2c <sendChar+0x8>)
    1f28:	4798      	blx	r3
    1f2a:	bd08      	pop	{r3, pc}
    1f2c:	00005119 	.word	0x00005119

00001f30 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    1f30:	b508      	push	{r3, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    1f32:	2000      	movs	r0, #0
    1f34:	4b08      	ldr	r3, [pc, #32]	; (1f58 <delay_init+0x28>)
    1f36:	4798      	blx	r3
	cycles_per_ms /= 1000;
    1f38:	4b08      	ldr	r3, [pc, #32]	; (1f5c <delay_init+0x2c>)
    1f3a:	fba3 2300 	umull	r2, r3, r3, r0
    1f3e:	099b      	lsrs	r3, r3, #6
    1f40:	4a07      	ldr	r2, [pc, #28]	; (1f60 <delay_init+0x30>)
    1f42:	6013      	str	r3, [r2, #0]
	cycles_per_us = cycles_per_ms / 1000;
    1f44:	4b07      	ldr	r3, [pc, #28]	; (1f64 <delay_init+0x34>)
    1f46:	fba3 3000 	umull	r3, r0, r3, r0
    1f4a:	0c80      	lsrs	r0, r0, #18
    1f4c:	4b06      	ldr	r3, [pc, #24]	; (1f68 <delay_init+0x38>)
    1f4e:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    1f50:	2205      	movs	r2, #5
    1f52:	4b06      	ldr	r3, [pc, #24]	; (1f6c <delay_init+0x3c>)
    1f54:	601a      	str	r2, [r3, #0]
    1f56:	bd08      	pop	{r3, pc}
    1f58:	000034d9 	.word	0x000034d9
    1f5c:	10624dd3 	.word	0x10624dd3
    1f60:	20000018 	.word	0x20000018
    1f64:	431bde83 	.word	0x431bde83
    1f68:	2000001c 	.word	0x2000001c
    1f6c:	e000e010 	.word	0xe000e010

00001f70 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    1f70:	b410      	push	{r4}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    1f72:	4b09      	ldr	r3, [pc, #36]	; (1f98 <delay_cycles_ms+0x28>)
    1f74:	6819      	ldr	r1, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    1f76:	4a09      	ldr	r2, [pc, #36]	; (1f9c <delay_cycles_ms+0x2c>)
		SysTick->VAL = 0;
    1f78:	2400      	movs	r4, #0
	while (n--) {
    1f7a:	3801      	subs	r0, #1
    1f7c:	f1b0 3fff 	cmp.w	r0, #4294967295
    1f80:	d008      	beq.n	1f94 <delay_cycles_ms+0x24>
	if (n > 0) {
    1f82:	2900      	cmp	r1, #0
    1f84:	d0f9      	beq.n	1f7a <delay_cycles_ms+0xa>
		SysTick->LOAD = n;
    1f86:	6051      	str	r1, [r2, #4]
		SysTick->VAL = 0;
    1f88:	6094      	str	r4, [r2, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1f8a:	6813      	ldr	r3, [r2, #0]
    1f8c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1f90:	d0fb      	beq.n	1f8a <delay_cycles_ms+0x1a>
    1f92:	e7f2      	b.n	1f7a <delay_cycles_ms+0xa>
	}
}
    1f94:	bc10      	pop	{r4}
    1f96:	4770      	bx	lr
    1f98:	20000018 	.word	0x20000018
    1f9c:	e000e010 	.word	0xe000e010

00001fa0 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    1fa0:	4b0b      	ldr	r3, [pc, #44]	; (1fd0 <cpu_irq_enter_critical+0x30>)
    1fa2:	681b      	ldr	r3, [r3, #0]
    1fa4:	b92b      	cbnz	r3, 1fb2 <cpu_irq_enter_critical+0x12>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1fa6:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    1faa:	b13b      	cbz	r3, 1fbc <cpu_irq_enter_critical+0x1c>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    1fac:	2200      	movs	r2, #0
    1fae:	4b09      	ldr	r3, [pc, #36]	; (1fd4 <cpu_irq_enter_critical+0x34>)
    1fb0:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    1fb2:	4a07      	ldr	r2, [pc, #28]	; (1fd0 <cpu_irq_enter_critical+0x30>)
    1fb4:	6813      	ldr	r3, [r2, #0]
    1fb6:	3301      	adds	r3, #1
    1fb8:	6013      	str	r3, [r2, #0]
    1fba:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    1fbc:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    1fbe:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    1fc2:	2200      	movs	r2, #0
    1fc4:	4b04      	ldr	r3, [pc, #16]	; (1fd8 <cpu_irq_enter_critical+0x38>)
    1fc6:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    1fc8:	2201      	movs	r2, #1
    1fca:	4b02      	ldr	r3, [pc, #8]	; (1fd4 <cpu_irq_enter_critical+0x34>)
    1fcc:	701a      	strb	r2, [r3, #0]
    1fce:	e7f0      	b.n	1fb2 <cpu_irq_enter_critical+0x12>
    1fd0:	200004a0 	.word	0x200004a0
    1fd4:	200004a4 	.word	0x200004a4
    1fd8:	20000020 	.word	0x20000020

00001fdc <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    1fdc:	4b07      	ldr	r3, [pc, #28]	; (1ffc <cpu_irq_leave_critical+0x20>)
    1fde:	681a      	ldr	r2, [r3, #0]
    1fe0:	3a01      	subs	r2, #1
    1fe2:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1fe4:	681b      	ldr	r3, [r3, #0]
    1fe6:	b943      	cbnz	r3, 1ffa <cpu_irq_leave_critical+0x1e>
    1fe8:	4b05      	ldr	r3, [pc, #20]	; (2000 <STACK_SIZE>)
    1fea:	781b      	ldrb	r3, [r3, #0]
    1fec:	b12b      	cbz	r3, 1ffa <cpu_irq_leave_critical+0x1e>
		cpu_irq_enable();
    1fee:	2201      	movs	r2, #1
    1ff0:	4b04      	ldr	r3, [pc, #16]	; (2004 <STACK_SIZE+0x4>)
    1ff2:	701a      	strb	r2, [r3, #0]
    1ff4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1ff8:	b662      	cpsie	i
    1ffa:	4770      	bx	lr
    1ffc:	200004a0 	.word	0x200004a0
    2000:	200004a4 	.word	0x200004a4
    2004:	20000020 	.word	0x20000020

00002008 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    2008:	b5f0      	push	{r4, r5, r6, r7, lr}
    200a:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    200c:	2501      	movs	r5, #1
    200e:	f88d 5005 	strb.w	r5, [sp, #5]
	config->powersave  = false;
    2012:	2700      	movs	r7, #0
    2014:	f88d 7006 	strb.w	r7, [sp, #6]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    2018:	ac02      	add	r4, sp, #8
    201a:	f804 5d04 	strb.w	r5, [r4, #-4]!
	port_pin_set_config(LED_0_PIN, &pin_conf);
    201e:	4621      	mov	r1, r4
    2020:	203e      	movs	r0, #62	; 0x3e
    2022:	4e08      	ldr	r6, [pc, #32]	; (2044 <system_board_init+0x3c>)
    2024:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2026:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    202a:	4b07      	ldr	r3, [pc, #28]	; (2048 <system_board_init+0x40>)
    202c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    2030:	f88d 7004 	strb.w	r7, [sp, #4]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    2034:	f88d 5005 	strb.w	r5, [sp, #5]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    2038:	4621      	mov	r1, r4
    203a:	200f      	movs	r0, #15
    203c:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
    203e:	b003      	add	sp, #12
    2040:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2042:	bf00      	nop
    2044:	00002625 	.word	0x00002625
    2048:	41004400 	.word	0x41004400

0000204c <adc_get_config_defaults>:
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
    204c:	2300      	movs	r3, #0
    204e:	7003      	strb	r3, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
    2050:	7043      	strb	r3, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
    2052:	8043      	strh	r3, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
    2054:	7103      	strb	r3, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
    2056:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
    2058:	6203      	str	r3, [r0, #32]
	config->window.window_lower_value     = 0;
    205a:	61c3      	str	r3, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
    205c:	6083      	str	r3, [r0, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	//config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
    205e:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
    2062:	81c2      	strh	r2, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
    2064:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
    2066:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
    2068:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
    206a:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
    206c:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
    206e:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
	config->run_in_standby                = false;
    2072:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
    2074:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
    2076:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
    207a:	84c3      	strh	r3, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
    207c:	8503      	strh	r3, [r0, #40]	; 0x28
	config->sample_length                 = 0;
    207e:	75c3      	strb	r3, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
    2080:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
	config->pin_scan.inputs_to_scan       = 0;
    2084:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
    2088:	4770      	bx	lr
	...

0000208c <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
    208c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2090:	b099      	sub	sp, #100	; 0x64
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    2092:	6001      	str	r1, [r0, #0]
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    2094:	4c96      	ldr	r4, [pc, #600]	; (22f0 <adc_init+0x264>)
    2096:	6a23      	ldr	r3, [r4, #32]
    2098:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    209c:	6223      	str	r3, [r4, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    209e:	780b      	ldrb	r3, [r1, #0]
    20a0:	f013 0f01 	tst.w	r3, #1
    20a4:	d003      	beq.n	20ae <adc_init+0x22>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    20a6:	2005      	movs	r0, #5
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
    20a8:	b019      	add	sp, #100	; 0x64
    20aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    20ae:	780b      	ldrb	r3, [r1, #0]
    20b0:	f013 0f02 	tst.w	r3, #2
    20b4:	d001      	beq.n	20ba <adc_init+0x2e>
		return STATUS_ERR_DENIED;
    20b6:	201c      	movs	r0, #28
    20b8:	e7f6      	b.n	20a8 <adc_init+0x1c>
	module_inst->reference = config->reference;
    20ba:	7853      	ldrb	r3, [r2, #1]
    20bc:	7103      	strb	r3, [r0, #4]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
    20be:	b923      	cbnz	r3, 20ca <adc_init+0x3e>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
    20c0:	498c      	ldr	r1, [pc, #560]	; (22f4 <adc_init+0x268>)
    20c2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    20c4:	f043 0304 	orr.w	r3, r3, #4
    20c8:	640b      	str	r3, [r1, #64]	; 0x40
		module_inst->callback[i] = NULL;
    20ca:	2300      	movs	r3, #0
    20cc:	6083      	str	r3, [r0, #8]
    20ce:	60c3      	str	r3, [r0, #12]
    20d0:	6103      	str	r3, [r0, #16]
	module_inst->registered_callback_mask = 0;
    20d2:	7683      	strb	r3, [r0, #26]
	module_inst->enabled_callback_mask = 0;
    20d4:	76c3      	strb	r3, [r0, #27]
	module_inst->remaining_conversions = 0;
    20d6:	8303      	strh	r3, [r0, #24]
	module_inst->job_status = STATUS_OK;
    20d8:	7703      	strb	r3, [r0, #28]
	_adc_instances[0] = module_inst;
    20da:	4b87      	ldr	r3, [pc, #540]	; (22f8 <adc_init+0x26c>)
    20dc:	6018      	str	r0, [r3, #0]
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
    20de:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
    20e2:	b923      	cbnz	r3, 20ee <adc_init+0x62>
    20e4:	7d13      	ldrb	r3, [r2, #20]
    20e6:	b913      	cbnz	r3, 20ee <adc_init+0x62>
		module_inst->software_trigger = true;
    20e8:	2301      	movs	r3, #1
    20ea:	7743      	strb	r3, [r0, #29]
    20ec:	e001      	b.n	20f2 <adc_init+0x66>
		module_inst->software_trigger = false;
    20ee:	2300      	movs	r3, #0
    20f0:	7743      	strb	r3, [r0, #29]
    20f2:	4617      	mov	r7, r2
    20f4:	9001      	str	r0, [sp, #4]
	Adc *const adc_module = module_inst->hw;
    20f6:	f8d0 a000 	ldr.w	sl, [r0]
	gclk_chan_conf.source_generator = config->clock_source;
    20fa:	7813      	ldrb	r3, [r2, #0]
    20fc:	a918      	add	r1, sp, #96	; 0x60
    20fe:	f801 3d58 	strb.w	r3, [r1, #-88]!
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
    2102:	201e      	movs	r0, #30
    2104:	4b7d      	ldr	r3, [pc, #500]	; (22fc <adc_init+0x270>)
    2106:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
    2108:	201e      	movs	r0, #30
    210a:	4b7d      	ldr	r3, [pc, #500]	; (2300 <adc_init+0x274>)
    210c:	4798      	blx	r3
	if (config->pin_scan.inputs_to_scan != 0) {
    210e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
    2112:	2a00      	cmp	r2, #0
    2114:	f000 8097 	beq.w	2246 <adc_init+0x1ba>
		uint8_t offset = config->pin_scan.offset_start_scan;
    2118:	f897 502b 	ldrb.w	r5, [r7, #43]	; 0x2b
		uint8_t start_pin =
    211c:	7b3b      	ldrb	r3, [r7, #12]
    211e:	442b      	add	r3, r5
    2120:	b2db      	uxtb	r3, r3
		uint8_t end_pin =
    2122:	18d1      	adds	r1, r2, r3
		while (start_pin < end_pin) {
    2124:	b2c9      	uxtb	r1, r1
    2126:	428b      	cmp	r3, r1
    2128:	d22a      	bcs.n	2180 <adc_init+0xf4>
    212a:	eb02 0805 	add.w	r8, r2, r5
    212e:	fa5f f888 	uxtb.w	r8, r8
	const uint32_t pinmapping[] = {
    2132:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 2308 <adc_init+0x27c>
    2136:	4e73      	ldr	r6, [pc, #460]	; (2304 <adc_init+0x278>)
		system_pinmux_pin_set_config(pin_map_result, &config);
    2138:	f8df b1d0 	ldr.w	fp, [pc, #464]	; 230c <adc_init+0x280>
    213c:	e003      	b.n	2146 <adc_init+0xba>
			offset++;
    213e:	3501      	adds	r5, #1
    2140:	b2ed      	uxtb	r5, r5
		while (start_pin < end_pin) {
    2142:	4545      	cmp	r5, r8
    2144:	d01c      	beq.n	2180 <adc_init+0xf4>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
    2146:	f005 040f 	and.w	r4, r5, #15
    214a:	7b3b      	ldrb	r3, [r7, #12]
    214c:	441c      	add	r4, r3
	const uint32_t pinmapping[] = {
    214e:	2250      	movs	r2, #80	; 0x50
    2150:	4649      	mov	r1, r9
    2152:	a804      	add	r0, sp, #16
    2154:	47b0      	blx	r6
	if (pin <= ADC_EXTCHANNEL_MSB) {
    2156:	2c13      	cmp	r4, #19
    2158:	d8f1      	bhi.n	213e <adc_init+0xb2>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    215a:	ab18      	add	r3, sp, #96	; 0x60
    215c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    2160:	f854 0c50 	ldr.w	r0, [r4, #-80]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2164:	2300      	movs	r3, #0
    2166:	f88d 300d 	strb.w	r3, [sp, #13]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    216a:	f88d 300f 	strb.w	r3, [sp, #15]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    216e:	f88d 300e 	strb.w	r3, [sp, #14]
		config.mux_position = 1;
    2172:	a918      	add	r1, sp, #96	; 0x60
    2174:	2301      	movs	r3, #1
    2176:	f801 3d54 	strb.w	r3, [r1, #-84]!
		system_pinmux_pin_set_config(pin_map_result, &config);
    217a:	b2c0      	uxtb	r0, r0
    217c:	47d8      	blx	fp
    217e:	e7de      	b.n	213e <adc_init+0xb2>
		_adc_configure_ain_pin(config->negative_input);
    2180:	89fc      	ldrh	r4, [r7, #14]
	const uint32_t pinmapping[] = {
    2182:	2250      	movs	r2, #80	; 0x50
    2184:	4960      	ldr	r1, [pc, #384]	; (2308 <adc_init+0x27c>)
    2186:	a804      	add	r0, sp, #16
    2188:	4b5e      	ldr	r3, [pc, #376]	; (2304 <adc_init+0x278>)
    218a:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
    218c:	2c13      	cmp	r4, #19
    218e:	d946      	bls.n	221e <adc_init+0x192>
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
    2190:	7d7b      	ldrb	r3, [r7, #21]
    2192:	009b      	lsls	r3, r3, #2
    2194:	b2db      	uxtb	r3, r3
    2196:	f88a 3000 	strb.w	r3, [sl]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
    219a:	7dba      	ldrb	r2, [r7, #22]
    219c:	787b      	ldrb	r3, [r7, #1]
    219e:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
    21a2:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
    21a4:	f88a 3001 	strb.w	r3, [sl, #1]
	switch (config->resolution) {
    21a8:	793b      	ldrb	r3, [r7, #4]
    21aa:	2b34      	cmp	r3, #52	; 0x34
    21ac:	f200 81c6 	bhi.w	253c <adc_init+0x4b0>
    21b0:	e8df f013 	tbh	[pc, r3, lsl #1]
    21b4:	01c40099 	.word	0x01c40099
    21b8:	01c401c4 	.word	0x01c401c4
    21bc:	01c401c4 	.word	0x01c401c4
    21c0:	01c401c4 	.word	0x01c401c4
    21c4:	01c401c4 	.word	0x01c401c4
    21c8:	01c401c4 	.word	0x01c401c4
    21cc:	01c401c4 	.word	0x01c401c4
    21d0:	01c401c4 	.word	0x01c401c4
    21d4:	01c4008d 	.word	0x01c4008d
    21d8:	01c401c4 	.word	0x01c401c4
    21dc:	01c401c4 	.word	0x01c401c4
    21e0:	01c401c4 	.word	0x01c401c4
    21e4:	01c401c4 	.word	0x01c401c4
    21e8:	01c401c4 	.word	0x01c401c4
    21ec:	01c401c4 	.word	0x01c401c4
    21f0:	01c401c4 	.word	0x01c401c4
    21f4:	01c40095 	.word	0x01c40095
    21f8:	01c401c4 	.word	0x01c401c4
    21fc:	01c401c4 	.word	0x01c401c4
    2200:	01c401c4 	.word	0x01c401c4
    2204:	01c401c4 	.word	0x01c401c4
    2208:	01c401c4 	.word	0x01c401c4
    220c:	01c401c4 	.word	0x01c401c4
    2210:	01c401c4 	.word	0x01c401c4
    2214:	00ae0091 	.word	0x00ae0091
    2218:	00890081 	.word	0x00890081
    221c:	0085      	.short	0x0085
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    221e:	ab18      	add	r3, sp, #96	; 0x60
    2220:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    2224:	f854 0c50 	ldr.w	r0, [r4, #-80]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2228:	2300      	movs	r3, #0
    222a:	f88d 300d 	strb.w	r3, [sp, #13]
	config->powersave    = false;
    222e:	f88d 300f 	strb.w	r3, [sp, #15]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    2232:	f88d 300e 	strb.w	r3, [sp, #14]
		config.mux_position = 1;
    2236:	a918      	add	r1, sp, #96	; 0x60
    2238:	2301      	movs	r3, #1
    223a:	f801 3d54 	strb.w	r3, [r1, #-84]!
		system_pinmux_pin_set_config(pin_map_result, &config);
    223e:	b2c0      	uxtb	r0, r0
    2240:	4b32      	ldr	r3, [pc, #200]	; (230c <adc_init+0x280>)
    2242:	4798      	blx	r3
    2244:	e7a4      	b.n	2190 <adc_init+0x104>
		_adc_configure_ain_pin(config->positive_input);
    2246:	7b3c      	ldrb	r4, [r7, #12]
	const uint32_t pinmapping[] = {
    2248:	2250      	movs	r2, #80	; 0x50
    224a:	492f      	ldr	r1, [pc, #188]	; (2308 <adc_init+0x27c>)
    224c:	a804      	add	r0, sp, #16
    224e:	4b2d      	ldr	r3, [pc, #180]	; (2304 <adc_init+0x278>)
    2250:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
    2252:	2c13      	cmp	r4, #19
    2254:	d91b      	bls.n	228e <adc_init+0x202>
		_adc_configure_ain_pin(config->negative_input);
    2256:	89fc      	ldrh	r4, [r7, #14]
	const uint32_t pinmapping[] = {
    2258:	2250      	movs	r2, #80	; 0x50
    225a:	492b      	ldr	r1, [pc, #172]	; (2308 <adc_init+0x27c>)
    225c:	a804      	add	r0, sp, #16
    225e:	4b29      	ldr	r3, [pc, #164]	; (2304 <adc_init+0x278>)
    2260:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
    2262:	2c13      	cmp	r4, #19
    2264:	d894      	bhi.n	2190 <adc_init+0x104>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    2266:	ab18      	add	r3, sp, #96	; 0x60
    2268:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    226c:	f854 0c50 	ldr.w	r0, [r4, #-80]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2270:	2300      	movs	r3, #0
    2272:	f88d 300d 	strb.w	r3, [sp, #13]
	config->powersave    = false;
    2276:	f88d 300f 	strb.w	r3, [sp, #15]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    227a:	f88d 300e 	strb.w	r3, [sp, #14]
		config.mux_position = 1;
    227e:	a918      	add	r1, sp, #96	; 0x60
    2280:	2301      	movs	r3, #1
    2282:	f801 3d54 	strb.w	r3, [r1, #-84]!
		system_pinmux_pin_set_config(pin_map_result, &config);
    2286:	b2c0      	uxtb	r0, r0
    2288:	4b20      	ldr	r3, [pc, #128]	; (230c <adc_init+0x280>)
    228a:	4798      	blx	r3
    228c:	e780      	b.n	2190 <adc_init+0x104>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    228e:	ab18      	add	r3, sp, #96	; 0x60
    2290:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    2294:	f854 0c50 	ldr.w	r0, [r4, #-80]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2298:	2300      	movs	r3, #0
    229a:	f88d 300d 	strb.w	r3, [sp, #13]
	config->powersave    = false;
    229e:	f88d 300f 	strb.w	r3, [sp, #15]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    22a2:	f88d 300e 	strb.w	r3, [sp, #14]
		config.mux_position = 1;
    22a6:	a918      	add	r1, sp, #96	; 0x60
    22a8:	2301      	movs	r3, #1
    22aa:	f801 3d54 	strb.w	r3, [r1, #-84]!
		system_pinmux_pin_set_config(pin_map_result, &config);
    22ae:	b2c0      	uxtb	r0, r0
    22b0:	4b16      	ldr	r3, [pc, #88]	; (230c <adc_init+0x280>)
    22b2:	4798      	blx	r3
    22b4:	e7cf      	b.n	2256 <adc_init+0x1ca>
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
    22b6:	2204      	movs	r2, #4
		resolution = ADC_RESOLUTION_16BIT;
    22b8:	2110      	movs	r1, #16
		adjres = ADC_DIVIDE_RESULT_4;
    22ba:	2302      	movs	r3, #2
    22bc:	e02b      	b.n	2316 <adc_init+0x28a>
		adjres = config->divide_result;
    22be:	7c7b      	ldrb	r3, [r7, #17]
		accumulate = config->accumulate_samples;
    22c0:	7c3a      	ldrb	r2, [r7, #16]
		resolution = ADC_RESOLUTION_16BIT;
    22c2:	2110      	movs	r1, #16
    22c4:	e027      	b.n	2316 <adc_init+0x28a>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
    22c6:	2206      	movs	r2, #6
		resolution = ADC_RESOLUTION_16BIT;
    22c8:	2110      	movs	r1, #16
		adjres = ADC_DIVIDE_RESULT_2;
    22ca:	2301      	movs	r3, #1
    22cc:	e023      	b.n	2316 <adc_init+0x28a>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
    22ce:	2208      	movs	r2, #8
		resolution = ADC_RESOLUTION_16BIT;
    22d0:	2110      	movs	r1, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
    22d2:	2300      	movs	r3, #0
    22d4:	e01f      	b.n	2316 <adc_init+0x28a>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    22d6:	2200      	movs	r2, #0
		resolution = ADC_RESOLUTION_8BIT;
    22d8:	2130      	movs	r1, #48	; 0x30
	uint8_t adjres = 0;
    22da:	4613      	mov	r3, r2
    22dc:	e01b      	b.n	2316 <adc_init+0x28a>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    22de:	2200      	movs	r2, #0
		resolution = ADC_RESOLUTION_10BIT;
    22e0:	2120      	movs	r1, #32
	uint8_t adjres = 0;
    22e2:	4613      	mov	r3, r2
    22e4:	e017      	b.n	2316 <adc_init+0x28a>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    22e6:	2200      	movs	r2, #0
		resolution = ADC_RESOLUTION_12BIT;
    22e8:	4611      	mov	r1, r2
	uint8_t adjres = 0;
    22ea:	4613      	mov	r3, r2
    22ec:	e013      	b.n	2316 <adc_init+0x28a>
    22ee:	bf00      	nop
    22f0:	40000400 	.word	0x40000400
    22f4:	40000800 	.word	0x40000800
    22f8:	2000058c 	.word	0x2000058c
    22fc:	000035d5 	.word	0x000035d5
    2300:	00003555 	.word	0x00003555
    2304:	00004f69 	.word	0x00004f69
    2308:	000069f4 	.word	0x000069f4
    230c:	000036bd 	.word	0x000036bd
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
    2310:	2202      	movs	r2, #2
		resolution = ADC_RESOLUTION_16BIT;
    2312:	2110      	movs	r1, #16
		adjres = ADC_DIVIDE_RESULT_2;
    2314:	2301      	movs	r3, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
    2316:	011b      	lsls	r3, r3, #4
    2318:	f003 0370 	and.w	r3, r3, #112	; 0x70
    231c:	4313      	orrs	r3, r2
    231e:	f88a 3002 	strb.w	r3, [sl, #2]
	if (config->sample_length > 63) {
    2322:	7dfb      	ldrb	r3, [r7, #23]
    2324:	2b3f      	cmp	r3, #63	; 0x3f
		return STATUS_ERR_INVALID_ARG;
    2326:	bf88      	it	hi
    2328:	2017      	movhi	r0, #23
	if (config->sample_length > 63) {
    232a:	f63f aebd 	bhi.w	20a8 <adc_init+0x1c>
		adc_module->SAMPCTRL.reg =
    232e:	f88a 3003 	strb.w	r3, [sl, #3]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    2332:	9b01      	ldr	r3, [sp, #4]
    2334:	681a      	ldr	r2, [r3, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    2336:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    2338:	f013 0f80 	tst.w	r3, #128	; 0x80
    233c:	d1fb      	bne.n	2336 <adc_init+0x2aa>
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
    233e:	7cfb      	ldrb	r3, [r7, #19]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    2340:	887a      	ldrh	r2, [r7, #2]
    2342:	4313      	orrs	r3, r2
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
    2344:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    2348:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
    234c:	7d3a      	ldrb	r2, [r7, #20]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    234e:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
    2352:	7cba      	ldrb	r2, [r7, #18]
    2354:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
    2358:	430b      	orrs	r3, r1
    235a:	b29b      	uxth	r3, r3
	adc_module->CTRLB.reg =
    235c:	f8aa 3004 	strh.w	r3, [sl, #4]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
    2360:	7e3b      	ldrb	r3, [r7, #24]
    2362:	b37b      	cbz	r3, 23c4 <adc_init+0x338>
		switch (resolution) {
    2364:	2910      	cmp	r1, #16
    2366:	f000 80c9 	beq.w	24fc <adc_init+0x470>
    236a:	d90c      	bls.n	2386 <adc_init+0x2fa>
    236c:	2920      	cmp	r1, #32
    236e:	f000 808f 	beq.w	2490 <adc_init+0x404>
    2372:	2930      	cmp	r1, #48	; 0x30
    2374:	d126      	bne.n	23c4 <adc_init+0x338>
			if (config->differential_mode &&
    2376:	7cfa      	ldrb	r2, [r7, #19]
    2378:	b1ca      	cbz	r2, 23ae <adc_init+0x322>
					(config->window.window_lower_value > 127 ||
    237a:	69fa      	ldr	r2, [r7, #28]
    237c:	3280      	adds	r2, #128	; 0x80
			if (config->differential_mode &&
    237e:	2aff      	cmp	r2, #255	; 0xff
    2380:	d90f      	bls.n	23a2 <adc_init+0x316>
				return STATUS_ERR_INVALID_ARG;
    2382:	2017      	movs	r0, #23
    2384:	e690      	b.n	20a8 <adc_init+0x1c>
		switch (resolution) {
    2386:	b9e9      	cbnz	r1, 23c4 <adc_init+0x338>
			if (config->differential_mode &&
    2388:	7cfa      	ldrb	r2, [r7, #19]
    238a:	2a00      	cmp	r2, #0
    238c:	f000 80a8 	beq.w	24e0 <adc_init+0x454>
					(config->window.window_lower_value > 2047 ||
    2390:	69fa      	ldr	r2, [r7, #28]
    2392:	f502 6200 	add.w	r2, r2, #2048	; 0x800
			if (config->differential_mode &&
    2396:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    239a:	f0c0 8099 	bcc.w	24d0 <adc_init+0x444>
				return STATUS_ERR_INVALID_ARG;
    239e:	2017      	movs	r0, #23
    23a0:	e682      	b.n	20a8 <adc_init+0x1c>
					config->window.window_lower_value < -128 ||
    23a2:	6a3a      	ldr	r2, [r7, #32]
    23a4:	3280      	adds	r2, #128	; 0x80
    23a6:	2aff      	cmp	r2, #255	; 0xff
    23a8:	d901      	bls.n	23ae <adc_init+0x322>
				return STATUS_ERR_INVALID_ARG;
    23aa:	2017      	movs	r0, #23
    23ac:	e67c      	b.n	20a8 <adc_init+0x1c>
			} else if (config->window.window_lower_value > 255 ||
    23ae:	69fa      	ldr	r2, [r7, #28]
    23b0:	2aff      	cmp	r2, #255	; 0xff
    23b2:	dd01      	ble.n	23b8 <adc_init+0x32c>
				return STATUS_ERR_INVALID_ARG;
    23b4:	2017      	movs	r0, #23
    23b6:	e677      	b.n	20a8 <adc_init+0x1c>
			} else if (config->window.window_lower_value > 255 ||
    23b8:	6a3a      	ldr	r2, [r7, #32]
    23ba:	2aff      	cmp	r2, #255	; 0xff
				return STATUS_ERR_INVALID_ARG;
    23bc:	bfc8      	it	gt
    23be:	2017      	movgt	r0, #23
			} else if (config->window.window_lower_value > 255 ||
    23c0:	f73f ae72 	bgt.w	20a8 <adc_init+0x1c>
	Adc *const adc_module = module_inst->hw;
    23c4:	9a01      	ldr	r2, [sp, #4]
    23c6:	6811      	ldr	r1, [r2, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    23c8:	7e4a      	ldrb	r2, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    23ca:	f012 0f80 	tst.w	r2, #128	; 0x80
    23ce:	d1fb      	bne.n	23c8 <adc_init+0x33c>
	adc_module->WINCTRL.reg = config->window.window_mode;
    23d0:	f88a 3008 	strb.w	r3, [sl, #8]
	Adc *const adc_module = module_inst->hw;
    23d4:	9b01      	ldr	r3, [sp, #4]
    23d6:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    23d8:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    23da:	f013 0f80 	tst.w	r3, #128	; 0x80
    23de:	d1fb      	bne.n	23d8 <adc_init+0x34c>
	adc_module->WINLT.reg =
    23e0:	8bbb      	ldrh	r3, [r7, #28]
    23e2:	f8aa 301c 	strh.w	r3, [sl, #28]
	Adc *const adc_module = module_inst->hw;
    23e6:	9b01      	ldr	r3, [sp, #4]
    23e8:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    23ea:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    23ec:	f013 0f80 	tst.w	r3, #128	; 0x80
    23f0:	d1fb      	bne.n	23ea <adc_init+0x35e>
	adc_module->WINUT.reg = config->window.window_upper_value <<
    23f2:	8c3b      	ldrh	r3, [r7, #32]
    23f4:	f8aa 3020 	strh.w	r3, [sl, #32]
	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
    23f8:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
	if (inputs_to_scan > 0) {
    23fc:	b132      	cbz	r2, 240c <adc_init+0x380>
		inputs_to_scan--;
    23fe:	1e53      	subs	r3, r2, #1
    2400:	b2da      	uxtb	r2, r3
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    2402:	2a0f      	cmp	r2, #15
		return STATUS_ERR_INVALID_ARG;
    2404:	bf88      	it	hi
    2406:	2017      	movhi	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    2408:	f63f ae4e 	bhi.w	20a8 <adc_init+0x1c>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
    240c:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    2410:	290f      	cmp	r1, #15
		return STATUS_ERR_INVALID_ARG;
    2412:	bf88      	it	hi
    2414:	2017      	movhi	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    2416:	f63f ae47 	bhi.w	20a8 <adc_init+0x1c>
	Adc *const adc_module = module_inst->hw;
    241a:	9b01      	ldr	r3, [sp, #4]
    241c:	681b      	ldr	r3, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    241e:	7e58      	ldrb	r0, [r3, #25]
	while (adc_is_syncing(module_inst)) {
    2420:	f010 0f80 	tst.w	r0, #128	; 0x80
    2424:	d1fb      	bne.n	241e <adc_init+0x392>
			config->negative_input |
    2426:	89fb      	ldrh	r3, [r7, #14]
			config->positive_input;
    2428:	7b38      	ldrb	r0, [r7, #12]
			config->negative_input |
    242a:	4303      	orrs	r3, r0
    242c:	68b8      	ldr	r0, [r7, #8]
    242e:	4303      	orrs	r3, r0
    2430:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
    2434:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	adc_module->INPUTCTRL.reg =
    2438:	f8ca 3010 	str.w	r3, [sl, #16]
	adc_module->EVCTRL.reg = config->event_action;
    243c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
    2440:	f88a 3014 	strb.w	r3, [sl, #20]
	adc_module->INTENCLR.reg =
    2444:	230f      	movs	r3, #15
    2446:	f88a 3016 	strb.w	r3, [sl, #22]
	if (config->correction.correction_enable){
    244a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
    244e:	b173      	cbz	r3, 246e <adc_init+0x3e2>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    2450:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    2452:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    2456:	d273      	bcs.n	2540 <adc_init+0x4b4>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
    2458:	f8aa 3024 	strh.w	r3, [sl, #36]	; 0x24
		if (config->correction.offset_correction > 2047 ||
    245c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
    245e:	f502 6300 	add.w	r3, r2, #2048	; 0x800
    2462:	b29b      	uxth	r3, r3
    2464:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    2468:	d26c      	bcs.n	2544 <adc_init+0x4b8>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
    246a:	f8aa 2026 	strh.w	r2, [sl, #38]	; 0x26
			ADC_CALIB_BIAS_CAL(
    246e:	4b36      	ldr	r3, [pc, #216]	; (2548 <adc_init+0x4bc>)
    2470:	681b      	ldr	r3, [r3, #0]
    2472:	015b      	lsls	r3, r3, #5
    2474:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
			ADC_CALIB_LINEARITY_CAL(
    2478:	4934      	ldr	r1, [pc, #208]	; (254c <adc_init+0x4c0>)
    247a:	680a      	ldr	r2, [r1, #0]
    247c:	6849      	ldr	r1, [r1, #4]
    247e:	0ed2      	lsrs	r2, r2, #27
    2480:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
    2484:	b2d2      	uxtb	r2, r2
			) |
    2486:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
    2488:	f8aa 3028 	strh.w	r3, [sl, #40]	; 0x28
	return STATUS_OK;
    248c:	2000      	movs	r0, #0
    248e:	e60b      	b.n	20a8 <adc_init+0x1c>
			if (config->differential_mode &&
    2490:	7cfa      	ldrb	r2, [r7, #19]
    2492:	b17a      	cbz	r2, 24b4 <adc_init+0x428>
					(config->window.window_lower_value > 511 ||
    2494:	69fa      	ldr	r2, [r7, #28]
    2496:	f502 7200 	add.w	r2, r2, #512	; 0x200
			if (config->differential_mode &&
    249a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    249e:	d301      	bcc.n	24a4 <adc_init+0x418>
				return STATUS_ERR_INVALID_ARG;
    24a0:	2017      	movs	r0, #23
    24a2:	e601      	b.n	20a8 <adc_init+0x1c>
					config->window.window_lower_value < -512 ||
    24a4:	6a3a      	ldr	r2, [r7, #32]
    24a6:	f502 7200 	add.w	r2, r2, #512	; 0x200
    24aa:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    24ae:	d301      	bcc.n	24b4 <adc_init+0x428>
				return STATUS_ERR_INVALID_ARG;
    24b0:	2017      	movs	r0, #23
    24b2:	e5f9      	b.n	20a8 <adc_init+0x1c>
			} else if (config->window.window_lower_value > 1023 ||
    24b4:	69fa      	ldr	r2, [r7, #28]
    24b6:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    24ba:	db01      	blt.n	24c0 <adc_init+0x434>
				return STATUS_ERR_INVALID_ARG;
    24bc:	2017      	movs	r0, #23
    24be:	e5f3      	b.n	20a8 <adc_init+0x1c>
			} else if (config->window.window_lower_value > 1023 ||
    24c0:	6a3a      	ldr	r2, [r7, #32]
    24c2:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
				return STATUS_ERR_INVALID_ARG;
    24c6:	bfa8      	it	ge
    24c8:	2017      	movge	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
    24ca:	f6bf aded 	bge.w	20a8 <adc_init+0x1c>
    24ce:	e779      	b.n	23c4 <adc_init+0x338>
					config->window.window_lower_value < -2048 ||
    24d0:	6a3a      	ldr	r2, [r7, #32]
    24d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
    24d6:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    24da:	d301      	bcc.n	24e0 <adc_init+0x454>
				return STATUS_ERR_INVALID_ARG;
    24dc:	2017      	movs	r0, #23
    24de:	e5e3      	b.n	20a8 <adc_init+0x1c>
			} else if (config->window.window_lower_value > 4095 ||
    24e0:	69fa      	ldr	r2, [r7, #28]
    24e2:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    24e6:	db01      	blt.n	24ec <adc_init+0x460>
				return STATUS_ERR_INVALID_ARG;
    24e8:	2017      	movs	r0, #23
    24ea:	e5dd      	b.n	20a8 <adc_init+0x1c>
			} else if (config->window.window_lower_value > 4095 ||
    24ec:	6a3a      	ldr	r2, [r7, #32]
    24ee:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
				return STATUS_ERR_INVALID_ARG;
    24f2:	bfa8      	it	ge
    24f4:	2017      	movge	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
    24f6:	f6bf add7 	bge.w	20a8 <adc_init+0x1c>
    24fa:	e763      	b.n	23c4 <adc_init+0x338>
			if (config->differential_mode &&
    24fc:	7cfa      	ldrb	r2, [r7, #19]
    24fe:	b17a      	cbz	r2, 2520 <adc_init+0x494>
					(config->window.window_lower_value > 32767 ||
    2500:	69fa      	ldr	r2, [r7, #28]
    2502:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
			if (config->differential_mode &&
    2506:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    250a:	d301      	bcc.n	2510 <adc_init+0x484>
				return STATUS_ERR_INVALID_ARG;
    250c:	2017      	movs	r0, #23
    250e:	e5cb      	b.n	20a8 <adc_init+0x1c>
					config->window.window_lower_value < -32768 ||
    2510:	6a3a      	ldr	r2, [r7, #32]
    2512:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    2516:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    251a:	d301      	bcc.n	2520 <adc_init+0x494>
				return STATUS_ERR_INVALID_ARG;
    251c:	2017      	movs	r0, #23
    251e:	e5c3      	b.n	20a8 <adc_init+0x1c>
			} else if (config->window.window_lower_value > 65535 ||
    2520:	69fa      	ldr	r2, [r7, #28]
    2522:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    2526:	db01      	blt.n	252c <adc_init+0x4a0>
				return STATUS_ERR_INVALID_ARG;
    2528:	2017      	movs	r0, #23
    252a:	e5bd      	b.n	20a8 <adc_init+0x1c>
			} else if (config->window.window_lower_value > 65535 ||
    252c:	6a3a      	ldr	r2, [r7, #32]
    252e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
				return STATUS_ERR_INVALID_ARG;
    2532:	bfa8      	it	ge
    2534:	2017      	movge	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
    2536:	f6bf adb7 	bge.w	20a8 <adc_init+0x1c>
    253a:	e743      	b.n	23c4 <adc_init+0x338>
		return STATUS_ERR_INVALID_ARG;
    253c:	2017      	movs	r0, #23
    253e:	e5b3      	b.n	20a8 <adc_init+0x1c>
			return STATUS_ERR_INVALID_ARG;
    2540:	2017      	movs	r0, #23
    2542:	e5b1      	b.n	20a8 <adc_init+0x1c>
			return STATUS_ERR_INVALID_ARG;
    2544:	2017      	movs	r0, #23
	return _adc_set_config(module_inst, config);
    2546:	e5af      	b.n	20a8 <adc_init+0x1c>
    2548:	00806024 	.word	0x00806024
    254c:	00806020 	.word	0x00806020

00002550 <ADC_Handler>:
	}
}

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
    2550:	b538      	push	{r3, r4, r5, lr}
	struct adc_module *module = _adc_instances[instance];
    2552:	4b33      	ldr	r3, [pc, #204]	; (2620 <ADC_Handler+0xd0>)
    2554:	681d      	ldr	r5, [r3, #0]
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
    2556:	682b      	ldr	r3, [r5, #0]
    2558:	7e1a      	ldrb	r2, [r3, #24]
    255a:	7ddc      	ldrb	r4, [r3, #23]
    255c:	4014      	ands	r4, r2
	if (flags & ADC_INTFLAG_RESRDY) {
    255e:	f014 0f01 	tst.w	r4, #1
    2562:	d11c      	bne.n	259e <ADC_Handler+0x4e>
	if (flags & ADC_INTFLAG_WINMON) {
    2564:	f014 0f04 	tst.w	r4, #4
    2568:	d00a      	beq.n	2580 <ADC_Handler+0x30>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
    256a:	682b      	ldr	r3, [r5, #0]
    256c:	2204      	movs	r2, #4
    256e:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    2570:	7eeb      	ldrb	r3, [r5, #27]
    2572:	f013 0f02 	tst.w	r3, #2
    2576:	d003      	beq.n	2580 <ADC_Handler+0x30>
    2578:	7eab      	ldrb	r3, [r5, #26]
    257a:	f013 0f02 	tst.w	r3, #2
    257e:	d147      	bne.n	2610 <ADC_Handler+0xc0>
	if (flags & ADC_INTFLAG_OVERRUN) {
    2580:	f014 0f02 	tst.w	r4, #2
    2584:	d00a      	beq.n	259c <ADC_Handler+0x4c>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    2586:	682b      	ldr	r3, [r5, #0]
    2588:	2202      	movs	r2, #2
    258a:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    258c:	7eeb      	ldrb	r3, [r5, #27]
    258e:	f013 0f04 	tst.w	r3, #4
    2592:	d003      	beq.n	259c <ADC_Handler+0x4c>
    2594:	7eab      	ldrb	r3, [r5, #26]
    2596:	f013 0f04 	tst.w	r3, #4
    259a:	d13d      	bne.n	2618 <ADC_Handler+0xc8>
    259c:	bd38      	pop	{r3, r4, r5, pc}
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    259e:	2201      	movs	r2, #1
    25a0:	761a      	strb	r2, [r3, #24]
	Adc *const adc_module = module_inst->hw;
    25a2:	682b      	ldr	r3, [r5, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    25a4:	7e5a      	ldrb	r2, [r3, #25]
		while (adc_is_syncing(module)) {
    25a6:	f012 0f80 	tst.w	r2, #128	; 0x80
    25aa:	d1fb      	bne.n	25a4 <ADC_Handler+0x54>
		*(module->job_buffer++) = module->hw->RESULT.reg;
    25ac:	696a      	ldr	r2, [r5, #20]
    25ae:	1c91      	adds	r1, r2, #2
    25b0:	6169      	str	r1, [r5, #20]
    25b2:	8b5b      	ldrh	r3, [r3, #26]
    25b4:	b29b      	uxth	r3, r3
    25b6:	8013      	strh	r3, [r2, #0]
		if (--module->remaining_conversions > 0) {
    25b8:	8b2b      	ldrh	r3, [r5, #24]
    25ba:	3b01      	subs	r3, #1
    25bc:	b29b      	uxth	r3, r3
    25be:	832b      	strh	r3, [r5, #24]
    25c0:	b18b      	cbz	r3, 25e6 <ADC_Handler+0x96>
			if (module->software_trigger == true) {
    25c2:	7f6b      	ldrb	r3, [r5, #29]
    25c4:	2b00      	cmp	r3, #0
    25c6:	d0cd      	beq.n	2564 <ADC_Handler+0x14>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    25c8:	682b      	ldr	r3, [r5, #0]
    25ca:	7e5a      	ldrb	r2, [r3, #25]

	while (adc_is_syncing(module_inst)) {
    25cc:	f012 0f80 	tst.w	r2, #128	; 0x80
    25d0:	d1fb      	bne.n	25ca <ADC_Handler+0x7a>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    25d2:	7b1a      	ldrb	r2, [r3, #12]
    25d4:	f042 0202 	orr.w	r2, r2, #2
    25d8:	731a      	strb	r2, [r3, #12]
	Adc *const adc_module = module_inst->hw;
    25da:	682a      	ldr	r2, [r5, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    25dc:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    25de:	f013 0f80 	tst.w	r3, #128	; 0x80
    25e2:	d1fb      	bne.n	25dc <ADC_Handler+0x8c>
    25e4:	e7be      	b.n	2564 <ADC_Handler+0x14>
{
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    25e6:	682b      	ldr	r3, [r5, #0]
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
    25e8:	2201      	movs	r2, #1
    25ea:	759a      	strb	r2, [r3, #22]
			if (module->job_status == STATUS_BUSY) {
    25ec:	7f2b      	ldrb	r3, [r5, #28]
    25ee:	b2db      	uxtb	r3, r3
    25f0:	2b05      	cmp	r3, #5
    25f2:	d1b7      	bne.n	2564 <ADC_Handler+0x14>
				module->job_status = STATUS_OK;
    25f4:	2300      	movs	r3, #0
    25f6:	772b      	strb	r3, [r5, #28]
				if ((module->enabled_callback_mask &
    25f8:	7eeb      	ldrb	r3, [r5, #27]
    25fa:	f013 0f01 	tst.w	r3, #1
    25fe:	d0b1      	beq.n	2564 <ADC_Handler+0x14>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
    2600:	7eab      	ldrb	r3, [r5, #26]
    2602:	f013 0f01 	tst.w	r3, #1
    2606:	d0ad      	beq.n	2564 <ADC_Handler+0x14>
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
    2608:	68ab      	ldr	r3, [r5, #8]
    260a:	4628      	mov	r0, r5
    260c:	4798      	blx	r3
    260e:	e7a9      	b.n	2564 <ADC_Handler+0x14>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
    2610:	68eb      	ldr	r3, [r5, #12]
    2612:	4628      	mov	r0, r5
    2614:	4798      	blx	r3
    2616:	e7b3      	b.n	2580 <ADC_Handler+0x30>
			(module->callback[ADC_CALLBACK_ERROR])(module);
    2618:	692b      	ldr	r3, [r5, #16]
    261a:	4628      	mov	r0, r5
    261c:	4798      	blx	r3
	_adc_interrupt_handler(0);
}
    261e:	e7bd      	b.n	259c <ADC_Handler+0x4c>
    2620:	2000058c 	.word	0x2000058c

00002624 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    2624:	b500      	push	{lr}
    2626:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2628:	2380      	movs	r3, #128	; 0x80
    262a:	f88d 3004 	strb.w	r3, [sp, #4]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    262e:	780b      	ldrb	r3, [r1, #0]
    2630:	f88d 3005 	strb.w	r3, [sp, #5]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    2634:	784b      	ldrb	r3, [r1, #1]
    2636:	f88d 3006 	strb.w	r3, [sp, #6]
	pinmux_config.powersave    = config->powersave;
    263a:	788b      	ldrb	r3, [r1, #2]
    263c:	f88d 3007 	strb.w	r3, [sp, #7]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    2640:	a901      	add	r1, sp, #4
    2642:	4b02      	ldr	r3, [pc, #8]	; (264c <port_pin_set_config+0x28>)
    2644:	4798      	blx	r3
}
    2646:	b003      	add	sp, #12
    2648:	f85d fb04 	ldr.w	pc, [sp], #4
    264c:	000036bd 	.word	0x000036bd

00002650 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    2650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2654:	b083      	sub	sp, #12
    2656:	e9cd 0100 	strd	r0, r1, [sp]
    265a:	4690      	mov	r8, r2
    265c:	4699      	mov	r9, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    265e:	2200      	movs	r2, #0
    2660:	2300      	movs	r3, #0
    2662:	4692      	mov	sl, r2
    2664:	469b      	mov	fp, r3
	for (i = 63; i >= 0; i--) {
    2666:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    266a:	f04f 0c01 	mov.w	ip, #1
    266e:	e004      	b.n	267a <long_division+0x2a>
	for (i = 63; i >= 0; i--) {
    2670:	f10e 3eff 	add.w	lr, lr, #4294967295
    2674:	f1be 3fff 	cmp.w	lr, #4294967295
    2678:	d025      	beq.n	26c6 <long_division+0x76>
		bit_shift = (uint64_t)1 << i;
    267a:	f1ae 0020 	sub.w	r0, lr, #32
    267e:	f1ce 0120 	rsb	r1, lr, #32
    2682:	fa0c f500 	lsl.w	r5, ip, r0
    2686:	fa2c f101 	lsr.w	r1, ip, r1
    268a:	430d      	orrs	r5, r1
    268c:	fa0c f40e 	lsl.w	r4, ip, lr

		r = r << 1;
    2690:	1896      	adds	r6, r2, r2
    2692:	eb43 0703 	adc.w	r7, r3, r3
    2696:	4632      	mov	r2, r6
    2698:	463b      	mov	r3, r7

		if (n & bit_shift) {
    269a:	e9dd 0100 	ldrd	r0, r1, [sp]
    269e:	4020      	ands	r0, r4
    26a0:	4029      	ands	r1, r5
    26a2:	4301      	orrs	r1, r0
			r |= 0x01;
    26a4:	bf1c      	itt	ne
    26a6:	f046 0201 	orrne.w	r2, r6, #1
    26aa:	463b      	movne	r3, r7
		}

		if (r >= d) {
    26ac:	454b      	cmp	r3, r9
    26ae:	bf08      	it	eq
    26b0:	4542      	cmpeq	r2, r8
    26b2:	d3dd      	bcc.n	2670 <long_division+0x20>
			r = r - d;
    26b4:	ebb2 0208 	subs.w	r2, r2, r8
    26b8:	eb63 0309 	sbc.w	r3, r3, r9
			q |= bit_shift;
    26bc:	ea4a 0a04 	orr.w	sl, sl, r4
    26c0:	ea4b 0b05 	orr.w	fp, fp, r5
    26c4:	e7d4      	b.n	2670 <long_division+0x20>
		}
	}

	return q;
}
    26c6:	4650      	mov	r0, sl
    26c8:	4659      	mov	r1, fp
    26ca:	b003      	add	sp, #12
    26cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000026d0 <_sercom_get_sync_baud_val>:
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    26d0:	0849      	lsrs	r1, r1, #1
    26d2:	4281      	cmp	r1, r0
    26d4:	d201      	bcs.n	26da <_sercom_get_sync_baud_val+0xa>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    26d6:	2040      	movs	r0, #64	; 0x40
    26d8:	4770      	bx	lr
{
    26da:	b410      	push	{r4}
    26dc:	2300      	movs	r3, #0
    26de:	b29c      	uxth	r4, r3
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
    26e0:	1a09      	subs	r1, r1, r0
    26e2:	3301      	adds	r3, #1
	while (clock_value >= baudrate) {
    26e4:	4288      	cmp	r0, r1
    26e6:	d9fa      	bls.n	26de <_sercom_get_sync_baud_val+0xe>
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    26e8:	2cff      	cmp	r4, #255	; 0xff
    26ea:	d902      	bls.n	26f2 <_sercom_get_sync_baud_val+0x22>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    26ec:	2040      	movs	r0, #64	; 0x40
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    26ee:	bc10      	pop	{r4}
    26f0:	4770      	bx	lr
		*baudvalue = baud_calculated;
    26f2:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    26f4:	2000      	movs	r0, #0
    26f6:	e7fa      	b.n	26ee <_sercom_get_sync_baud_val+0x1e>

000026f8 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    26f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    26fc:	f89d 5018 	ldrb.w	r5, [sp, #24]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    2700:	fb00 f405 	mul.w	r4, r0, r5
    2704:	428c      	cmp	r4, r1
    2706:	d902      	bls.n	270e <_sercom_get_async_baud_val+0x16>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    2708:	2040      	movs	r0, #64	; 0x40
    270a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    270e:	4617      	mov	r7, r2
    2710:	460e      	mov	r6, r1
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    2712:	b98b      	cbnz	r3, 2738 <_sercom_get_async_baud_val+0x40>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
    2714:	2000      	movs	r0, #0
    2716:	4632      	mov	r2, r6
    2718:	4603      	mov	r3, r0
    271a:	4621      	mov	r1, r4
    271c:	4c16      	ldr	r4, [pc, #88]	; (2778 <_sercom_get_async_baud_val+0x80>)
    271e:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    2720:	2200      	movs	r2, #0
    2722:	2301      	movs	r3, #1
    2724:	1a10      	subs	r0, r2, r0
    2726:	eb63 0101 	sbc.w	r1, r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    272a:	040b      	lsls	r3, r1, #16
    272c:	ea43 4010 	orr.w	r0, r3, r0, lsr #16
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
		baud_fp = temp1 - 8 * baud_int;
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
    2730:	8038      	strh	r0, [r7, #0]
	return STATUS_OK;
    2732:	2000      	movs	r0, #0
    2734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    2738:	2b01      	cmp	r3, #1
    273a:	d001      	beq.n	2740 <_sercom_get_async_baud_val+0x48>
	uint64_t baud_calculated = 0;
    273c:	2000      	movs	r0, #0
    273e:	e7f7      	b.n	2730 <_sercom_get_async_baud_val+0x38>
		temp1 = ((uint64_t)baudrate * sample_num);
    2740:	fba0 4505 	umull	r4, r5, r0, r5
		baud_int = long_division( peripheral_clock, temp1);
    2744:	4622      	mov	r2, r4
    2746:	462b      	mov	r3, r5
    2748:	4630      	mov	r0, r6
    274a:	2100      	movs	r1, #0
    274c:	f8df 8028 	ldr.w	r8, [pc, #40]	; 2778 <_sercom_get_async_baud_val+0x80>
    2750:	47c0      	blx	r8
    2752:	4680      	mov	r8, r0
		if(baud_int > BAUD_INT_MAX) {
    2754:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
    2758:	d902      	bls.n	2760 <_sercom_get_async_baud_val+0x68>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    275a:	2040      	movs	r0, #64	; 0x40
}
    275c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    2760:	4622      	mov	r2, r4
    2762:	462b      	mov	r3, r5
    2764:	00f0      	lsls	r0, r6, #3
    2766:	0f71      	lsrs	r1, r6, #29
    2768:	4c03      	ldr	r4, [pc, #12]	; (2778 <_sercom_get_async_baud_val+0x80>)
    276a:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    276c:	eba0 00c8 	sub.w	r0, r0, r8, lsl #3
		baud_calculated = baud_int | (baud_fp << 13);
    2770:	b2c0      	uxtb	r0, r0
    2772:	ea48 3040 	orr.w	r0, r8, r0, lsl #13
    2776:	e7db      	b.n	2730 <_sercom_get_async_baud_val+0x38>
    2778:	00002651 	.word	0x00002651

0000277c <sercom_set_gclk_generator>:
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    277c:	4b0e      	ldr	r3, [pc, #56]	; (27b8 <sercom_set_gclk_generator+0x3c>)
    277e:	781b      	ldrb	r3, [r3, #0]
    2780:	b13b      	cbz	r3, 2792 <sercom_set_gclk_generator+0x16>
    2782:	b931      	cbnz	r1, 2792 <sercom_set_gclk_generator+0x16>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    2784:	4b0c      	ldr	r3, [pc, #48]	; (27b8 <sercom_set_gclk_generator+0x3c>)
    2786:	785b      	ldrb	r3, [r3, #1]
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    2788:	4283      	cmp	r3, r0
    278a:	bf14      	ite	ne
    278c:	201d      	movne	r0, #29
    278e:	2000      	moveq	r0, #0
    2790:	4770      	bx	lr
{
    2792:	b510      	push	{r4, lr}
    2794:	b082      	sub	sp, #8
    2796:	4604      	mov	r4, r0
		gclk_chan_conf.source_generator = generator_source;
    2798:	a902      	add	r1, sp, #8
    279a:	f801 0d04 	strb.w	r0, [r1, #-4]!
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    279e:	2013      	movs	r0, #19
    27a0:	4b06      	ldr	r3, [pc, #24]	; (27bc <sercom_set_gclk_generator+0x40>)
    27a2:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    27a4:	2013      	movs	r0, #19
    27a6:	4b06      	ldr	r3, [pc, #24]	; (27c0 <sercom_set_gclk_generator+0x44>)
    27a8:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    27aa:	4b03      	ldr	r3, [pc, #12]	; (27b8 <sercom_set_gclk_generator+0x3c>)
    27ac:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    27ae:	2201      	movs	r2, #1
    27b0:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    27b2:	2000      	movs	r0, #0
}
    27b4:	b002      	add	sp, #8
    27b6:	bd10      	pop	{r4, pc}
    27b8:	200004a8 	.word	0x200004a8
    27bc:	000035d5 	.word	0x000035d5
    27c0:	00003555 	.word	0x00003555

000027c4 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    27c4:	4b3c      	ldr	r3, [pc, #240]	; (28b8 <_sercom_get_default_pad+0xf4>)
    27c6:	4298      	cmp	r0, r3
    27c8:	d031      	beq.n	282e <_sercom_get_default_pad+0x6a>
    27ca:	d90c      	bls.n	27e6 <_sercom_get_default_pad+0x22>
    27cc:	4b3b      	ldr	r3, [pc, #236]	; (28bc <_sercom_get_default_pad+0xf8>)
    27ce:	4298      	cmp	r0, r3
    27d0:	d049      	beq.n	2866 <_sercom_get_default_pad+0xa2>
    27d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    27d6:	4298      	cmp	r0, r3
    27d8:	d053      	beq.n	2882 <_sercom_get_default_pad+0xbe>
    27da:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
    27de:	4298      	cmp	r0, r3
    27e0:	d033      	beq.n	284a <_sercom_get_default_pad+0x86>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    27e2:	2000      	movs	r0, #0
    27e4:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    27e6:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
    27ea:	4298      	cmp	r0, r3
    27ec:	d009      	beq.n	2802 <_sercom_get_default_pad+0x3e>
    27ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    27f2:	4298      	cmp	r0, r3
    27f4:	d1f5      	bne.n	27e2 <_sercom_get_default_pad+0x1e>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    27f6:	2903      	cmp	r1, #3
    27f8:	d813      	bhi.n	2822 <_sercom_get_default_pad+0x5e>
    27fa:	e8df f001 	tbb	[pc, r1]
    27fe:	1052      	.short	0x1052
    2800:	1614      	.short	0x1614
    2802:	2903      	cmp	r1, #3
    2804:	d805      	bhi.n	2812 <_sercom_get_default_pad+0x4e>
    2806:	e8df f001 	tbb	[pc, r1]
    280a:	024a      	.short	0x024a
    280c:	0806      	.short	0x0806
    280e:	482c      	ldr	r0, [pc, #176]	; (28c0 <_sercom_get_default_pad+0xfc>)
    2810:	4770      	bx	lr
	return 0;
    2812:	2000      	movs	r0, #0
    2814:	4770      	bx	lr
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2816:	482b      	ldr	r0, [pc, #172]	; (28c4 <_sercom_get_default_pad+0x100>)
    2818:	4770      	bx	lr
    281a:	482b      	ldr	r0, [pc, #172]	; (28c8 <_sercom_get_default_pad+0x104>)
    281c:	4770      	bx	lr
    281e:	482b      	ldr	r0, [pc, #172]	; (28cc <_sercom_get_default_pad+0x108>)
    2820:	4770      	bx	lr
	return 0;
    2822:	2000      	movs	r0, #0
    2824:	4770      	bx	lr
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2826:	482a      	ldr	r0, [pc, #168]	; (28d0 <_sercom_get_default_pad+0x10c>)
    2828:	4770      	bx	lr
    282a:	482a      	ldr	r0, [pc, #168]	; (28d4 <_sercom_get_default_pad+0x110>)
    282c:	4770      	bx	lr
    282e:	2903      	cmp	r1, #3
    2830:	d805      	bhi.n	283e <_sercom_get_default_pad+0x7a>
    2832:	e8df f001 	tbb	[pc, r1]
    2836:	0238      	.short	0x0238
    2838:	0806      	.short	0x0806
    283a:	4827      	ldr	r0, [pc, #156]	; (28d8 <_sercom_get_default_pad+0x114>)
    283c:	4770      	bx	lr
	return 0;
    283e:	2000      	movs	r0, #0
    2840:	4770      	bx	lr
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2842:	4826      	ldr	r0, [pc, #152]	; (28dc <_sercom_get_default_pad+0x118>)
    2844:	4770      	bx	lr
    2846:	4826      	ldr	r0, [pc, #152]	; (28e0 <_sercom_get_default_pad+0x11c>)
    2848:	4770      	bx	lr
    284a:	2903      	cmp	r1, #3
    284c:	d805      	bhi.n	285a <_sercom_get_default_pad+0x96>
    284e:	e8df f001 	tbb	[pc, r1]
    2852:	022c      	.short	0x022c
    2854:	0806      	.short	0x0806
    2856:	4823      	ldr	r0, [pc, #140]	; (28e4 <_sercom_get_default_pad+0x120>)
    2858:	4770      	bx	lr
	return 0;
    285a:	2000      	movs	r0, #0
    285c:	4770      	bx	lr
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    285e:	4822      	ldr	r0, [pc, #136]	; (28e8 <_sercom_get_default_pad+0x124>)
    2860:	4770      	bx	lr
    2862:	4822      	ldr	r0, [pc, #136]	; (28ec <_sercom_get_default_pad+0x128>)
    2864:	4770      	bx	lr
    2866:	2903      	cmp	r1, #3
    2868:	d805      	bhi.n	2876 <_sercom_get_default_pad+0xb2>
    286a:	e8df f001 	tbb	[pc, r1]
    286e:	0220      	.short	0x0220
    2870:	0806      	.short	0x0806
    2872:	481f      	ldr	r0, [pc, #124]	; (28f0 <_sercom_get_default_pad+0x12c>)
    2874:	4770      	bx	lr
	return 0;
    2876:	2000      	movs	r0, #0
    2878:	4770      	bx	lr
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    287a:	481e      	ldr	r0, [pc, #120]	; (28f4 <_sercom_get_default_pad+0x130>)
    287c:	4770      	bx	lr
    287e:	481e      	ldr	r0, [pc, #120]	; (28f8 <_sercom_get_default_pad+0x134>)
    2880:	4770      	bx	lr
    2882:	2903      	cmp	r1, #3
    2884:	d805      	bhi.n	2892 <_sercom_get_default_pad+0xce>
    2886:	e8df f001 	tbb	[pc, r1]
    288a:	0214      	.short	0x0214
    288c:	0806      	.short	0x0806
    288e:	481b      	ldr	r0, [pc, #108]	; (28fc <_sercom_get_default_pad+0x138>)
    2890:	4770      	bx	lr
	return 0;
    2892:	2000      	movs	r0, #0
    2894:	4770      	bx	lr
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2896:	481a      	ldr	r0, [pc, #104]	; (2900 <_sercom_get_default_pad+0x13c>)
    2898:	4770      	bx	lr
    289a:	481a      	ldr	r0, [pc, #104]	; (2904 <_sercom_get_default_pad+0x140>)
    289c:	4770      	bx	lr
    289e:	481a      	ldr	r0, [pc, #104]	; (2908 <_sercom_get_default_pad+0x144>)
    28a0:	4770      	bx	lr
    28a2:	2003      	movs	r0, #3
    28a4:	4770      	bx	lr
    28a6:	4819      	ldr	r0, [pc, #100]	; (290c <_sercom_get_default_pad+0x148>)
    28a8:	4770      	bx	lr
    28aa:	4819      	ldr	r0, [pc, #100]	; (2910 <_sercom_get_default_pad+0x14c>)
    28ac:	4770      	bx	lr
    28ae:	4819      	ldr	r0, [pc, #100]	; (2914 <_sercom_get_default_pad+0x150>)
    28b0:	4770      	bx	lr
    28b2:	4819      	ldr	r0, [pc, #100]	; (2918 <_sercom_get_default_pad+0x154>)
}
    28b4:	4770      	bx	lr
    28b6:	bf00      	nop
    28b8:	42001000 	.word	0x42001000
    28bc:	42001800 	.word	0x42001800
    28c0:	00050003 	.word	0x00050003
    28c4:	00060003 	.word	0x00060003
    28c8:	00070003 	.word	0x00070003
    28cc:	00010003 	.word	0x00010003
    28d0:	001e0003 	.word	0x001e0003
    28d4:	001f0003 	.word	0x001f0003
    28d8:	00090003 	.word	0x00090003
    28dc:	000a0003 	.word	0x000a0003
    28e0:	000b0003 	.word	0x000b0003
    28e4:	00110003 	.word	0x00110003
    28e8:	00120003 	.word	0x00120003
    28ec:	00130003 	.word	0x00130003
    28f0:	000d0003 	.word	0x000d0003
    28f4:	000e0003 	.word	0x000e0003
    28f8:	000f0003 	.word	0x000f0003
    28fc:	00170003 	.word	0x00170003
    2900:	00180003 	.word	0x00180003
    2904:	00190003 	.word	0x00190003
    2908:	00040003 	.word	0x00040003
    290c:	00080003 	.word	0x00080003
    2910:	00100003 	.word	0x00100003
    2914:	000c0003 	.word	0x000c0003
    2918:	00160003 	.word	0x00160003

0000291c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    291c:	b470      	push	{r4, r5, r6}
    291e:	b087      	sub	sp, #28
    2920:	4606      	mov	r6, r0
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    2922:	466c      	mov	r4, sp
    2924:	4d0c      	ldr	r5, [pc, #48]	; (2958 <_sercom_get_sercom_inst_index+0x3c>)
    2926:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2928:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    292a:	e895 0003 	ldmia.w	r5, {r0, r1}
    292e:	e884 0003 	stmia.w	r4, {r0, r1}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    2932:	9b00      	ldr	r3, [sp, #0]
    2934:	42b3      	cmp	r3, r6
    2936:	d00c      	beq.n	2952 <_sercom_get_sercom_inst_index+0x36>
    2938:	4632      	mov	r2, r6
    293a:	2001      	movs	r0, #1
    293c:	f85d 3020 	ldr.w	r3, [sp, r0, lsl #2]
    2940:	4293      	cmp	r3, r2
    2942:	d007      	beq.n	2954 <_sercom_get_sercom_inst_index+0x38>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2944:	3001      	adds	r0, #1
    2946:	2806      	cmp	r0, #6
    2948:	d1f8      	bne.n	293c <_sercom_get_sercom_inst_index+0x20>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    294a:	2000      	movs	r0, #0
}
    294c:	b007      	add	sp, #28
    294e:	bc70      	pop	{r4, r5, r6}
    2950:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2952:	2000      	movs	r0, #0
			return i;
    2954:	b2c0      	uxtb	r0, r0
    2956:	e7f9      	b.n	294c <_sercom_get_sercom_inst_index+0x30>
    2958:	00006a44 	.word	0x00006a44

0000295c <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    295c:	4770      	bx	lr
	...

00002960 <_sercom_set_handler>:
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	// Initialize handlers with default handler and device instances with 0 
	if (_handler_table_initialized == false) {
    2960:	4b0d      	ldr	r3, [pc, #52]	; (2998 <_sercom_set_handler+0x38>)
    2962:	781b      	ldrb	r3, [r3, #0]
    2964:	b9a3      	cbnz	r3, 2990 <_sercom_set_handler+0x30>
{
    2966:	b470      	push	{r4, r5, r6}
    2968:	4b0c      	ldr	r3, [pc, #48]	; (299c <_sercom_set_handler+0x3c>)
    296a:	4a0d      	ldr	r2, [pc, #52]	; (29a0 <_sercom_set_handler+0x40>)
    296c:	f103 0618 	add.w	r6, r3, #24
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    2970:	4d0c      	ldr	r5, [pc, #48]	; (29a4 <_sercom_set_handler+0x44>)
			_sercom_instances[i] = NULL;
    2972:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    2974:	f843 5b04 	str.w	r5, [r3], #4
			_sercom_instances[i] = NULL;
    2978:	f842 4b04 	str.w	r4, [r2], #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    297c:	42b3      	cmp	r3, r6
    297e:	d1f9      	bne.n	2974 <_sercom_set_handler+0x14>
		}

		_handler_table_initialized = true;
    2980:	2201      	movs	r2, #1
    2982:	4b05      	ldr	r3, [pc, #20]	; (2998 <_sercom_set_handler+0x38>)
    2984:	701a      	strb	r2, [r3, #0]
	}

	// Save interrupt handler 
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    2986:	4b05      	ldr	r3, [pc, #20]	; (299c <_sercom_set_handler+0x3c>)
    2988:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
    298c:	bc70      	pop	{r4, r5, r6}
    298e:	4770      	bx	lr
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    2990:	4b02      	ldr	r3, [pc, #8]	; (299c <_sercom_set_handler+0x3c>)
    2992:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
    2996:	4770      	bx	lr
    2998:	200004aa 	.word	0x200004aa
    299c:	200004ac 	.word	0x200004ac
    29a0:	20000590 	.word	0x20000590
    29a4:	0000295d 	.word	0x0000295d

000029a8 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    29a8:	b500      	push	{lr}
    29aa:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    29ac:	2309      	movs	r3, #9
    29ae:	f88d 3000 	strb.w	r3, [sp]
    29b2:	230a      	movs	r3, #10
    29b4:	f88d 3001 	strb.w	r3, [sp, #1]
    29b8:	230b      	movs	r3, #11
    29ba:	f88d 3002 	strb.w	r3, [sp, #2]
    29be:	230c      	movs	r3, #12
    29c0:	f88d 3003 	strb.w	r3, [sp, #3]
    29c4:	230d      	movs	r3, #13
    29c6:	f88d 3004 	strb.w	r3, [sp, #4]
    29ca:	230e      	movs	r3, #14
    29cc:	f88d 3005 	strb.w	r3, [sp, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    29d0:	4b04      	ldr	r3, [pc, #16]	; (29e4 <_sercom_get_interrupt_vector+0x3c>)
    29d2:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    29d4:	ab02      	add	r3, sp, #8
    29d6:	4418      	add	r0, r3
}
    29d8:	f910 0c08 	ldrsb.w	r0, [r0, #-8]
    29dc:	b003      	add	sp, #12
    29de:	f85d fb04 	ldr.w	pc, [sp], #4
    29e2:	bf00      	nop
    29e4:	0000291d 	.word	0x0000291d

000029e8 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    29e8:	b508      	push	{r3, lr}
    29ea:	4b02      	ldr	r3, [pc, #8]	; (29f4 <SERCOM0_Handler+0xc>)
    29ec:	681b      	ldr	r3, [r3, #0]
    29ee:	2000      	movs	r0, #0
    29f0:	4798      	blx	r3
    29f2:	bd08      	pop	{r3, pc}
    29f4:	200004ac 	.word	0x200004ac

000029f8 <SERCOM1_Handler>:
    29f8:	b508      	push	{r3, lr}
    29fa:	4b02      	ldr	r3, [pc, #8]	; (2a04 <SERCOM1_Handler+0xc>)
    29fc:	685b      	ldr	r3, [r3, #4]
    29fe:	2001      	movs	r0, #1
    2a00:	4798      	blx	r3
    2a02:	bd08      	pop	{r3, pc}
    2a04:	200004ac 	.word	0x200004ac

00002a08 <SERCOM2_Handler>:
    2a08:	b508      	push	{r3, lr}
    2a0a:	4b02      	ldr	r3, [pc, #8]	; (2a14 <SERCOM2_Handler+0xc>)
    2a0c:	689b      	ldr	r3, [r3, #8]
    2a0e:	2002      	movs	r0, #2
    2a10:	4798      	blx	r3
    2a12:	bd08      	pop	{r3, pc}
    2a14:	200004ac 	.word	0x200004ac

00002a18 <SERCOM3_Handler>:
    2a18:	b508      	push	{r3, lr}
    2a1a:	4b02      	ldr	r3, [pc, #8]	; (2a24 <SERCOM3_Handler+0xc>)
    2a1c:	68db      	ldr	r3, [r3, #12]
    2a1e:	2003      	movs	r0, #3
    2a20:	4798      	blx	r3
    2a22:	bd08      	pop	{r3, pc}
    2a24:	200004ac 	.word	0x200004ac

00002a28 <SERCOM4_Handler>:
    2a28:	b508      	push	{r3, lr}
    2a2a:	4b02      	ldr	r3, [pc, #8]	; (2a34 <SERCOM4_Handler+0xc>)
    2a2c:	691b      	ldr	r3, [r3, #16]
    2a2e:	2004      	movs	r0, #4
    2a30:	4798      	blx	r3
    2a32:	bd08      	pop	{r3, pc}
    2a34:	200004ac 	.word	0x200004ac

00002a38 <SERCOM5_Handler>:
    2a38:	b508      	push	{r3, lr}
    2a3a:	4b02      	ldr	r3, [pc, #8]	; (2a44 <SERCOM5_Handler+0xc>)
    2a3c:	695b      	ldr	r3, [r3, #20]
    2a3e:	2005      	movs	r0, #5
    2a40:	4798      	blx	r3
    2a42:	bd08      	pop	{r3, pc}
    2a44:	200004ac 	.word	0x200004ac

00002a48 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    2a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2a4c:	b091      	sub	sp, #68	; 0x44
    2a4e:	4605      	mov	r5, r0
    2a50:	460c      	mov	r4, r1
    2a52:	4616      	mov	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    2a54:	6001      	str	r1, [r0, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2a56:	4608      	mov	r0, r1
    2a58:	4bad      	ldr	r3, [pc, #692]	; (2d10 <usart_init+0x2c8>)
    2a5a:	4798      	blx	r3
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    2a5c:	6823      	ldr	r3, [r4, #0]
    2a5e:	f013 0f01 	tst.w	r3, #1
    2a62:	d003      	beq.n	2a6c <usart_init+0x24>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    2a64:	2005      	movs	r0, #5
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    2a66:	b011      	add	sp, #68	; 0x44
    2a68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    2a6c:	6823      	ldr	r3, [r4, #0]
    2a6e:	f013 0f02 	tst.w	r3, #2
    2a72:	d001      	beq.n	2a78 <usart_init+0x30>
		return STATUS_ERR_DENIED;
    2a74:	201c      	movs	r0, #28
    2a76:	e7f6      	b.n	2a66 <usart_init+0x1e>
    2a78:	4aa6      	ldr	r2, [pc, #664]	; (2d14 <usart_init+0x2cc>)
    2a7a:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    2a7c:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    2a7e:	2301      	movs	r3, #1
    2a80:	40bb      	lsls	r3, r7
    2a82:	430b      	orrs	r3, r1
    2a84:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    2a86:	f896 302d 	ldrb.w	r3, [r6, #45]	; 0x2d
    2a8a:	a910      	add	r1, sp, #64	; 0x40
    2a8c:	f801 3d04 	strb.w	r3, [r1, #-4]!
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2a90:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    2a92:	b2c7      	uxtb	r7, r0
    2a94:	4638      	mov	r0, r7
    2a96:	4ba0      	ldr	r3, [pc, #640]	; (2d18 <usart_init+0x2d0>)
    2a98:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    2a9a:	4638      	mov	r0, r7
    2a9c:	4b9f      	ldr	r3, [pc, #636]	; (2d1c <usart_init+0x2d4>)
    2a9e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    2aa0:	2100      	movs	r1, #0
    2aa2:	f896 002d 	ldrb.w	r0, [r6, #45]	; 0x2d
    2aa6:	4b9e      	ldr	r3, [pc, #632]	; (2d20 <usart_init+0x2d8>)
    2aa8:	4798      	blx	r3
	module->character_size = config->character_size;
    2aaa:	7af3      	ldrb	r3, [r6, #11]
    2aac:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    2aae:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
    2ab2:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    2ab4:	f896 3025 	ldrb.w	r3, [r6, #37]	; 0x25
    2ab8:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    2aba:	7ef3      	ldrb	r3, [r6, #27]
    2abc:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    2abe:	7f33      	ldrb	r3, [r6, #28]
    2ac0:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2ac2:	f8d5 9000 	ldr.w	r9, [r5]
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2ac6:	4648      	mov	r0, r9
    2ac8:	4b91      	ldr	r3, [pc, #580]	; (2d10 <usart_init+0x2c8>)
    2aca:	4798      	blx	r3
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2acc:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    2ace:	2300      	movs	r3, #0
    2ad0:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
	switch (config->sample_rate) {
    2ad4:	f8b6 8010 	ldrh.w	r8, [r6, #16]
    2ad8:	f5b8 4f80 	cmp.w	r8, #16384	; 0x4000
    2adc:	f000 8094 	beq.w	2c08 <usart_init+0x1c0>
    2ae0:	d90c      	bls.n	2afc <usart_init+0xb4>
    2ae2:	f5b8 4fc0 	cmp.w	r8, #24576	; 0x6000
    2ae6:	f000 808a 	beq.w	2bfe <usart_init+0x1b6>
    2aea:	f5b8 4f00 	cmp.w	r8, #32768	; 0x8000
    2aee:	f040 812b 	bne.w	2d48 <usart_init+0x300>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    2af2:	2303      	movs	r3, #3
    2af4:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2af6:	2300      	movs	r3, #0
    2af8:	9307      	str	r3, [sp, #28]
    2afa:	e007      	b.n	2b0c <usart_init+0xc4>
	switch (config->sample_rate) {
    2afc:	f5b8 5f00 	cmp.w	r8, #8192	; 0x2000
    2b00:	f040 8122 	bne.w	2d48 <usart_init+0x300>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    2b04:	2310      	movs	r3, #16
    2b06:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    2b08:	2301      	movs	r3, #1
    2b0a:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    2b0c:	6833      	ldr	r3, [r6, #0]
    2b0e:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    2b10:	68f3      	ldr	r3, [r6, #12]
    2b12:	9304      	str	r3, [sp, #16]
		config->sample_adjustment |
    2b14:	6973      	ldr	r3, [r6, #20]
    2b16:	9302      	str	r3, [sp, #8]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2b18:	f896 b018 	ldrb.w	fp, [r6, #24]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2b1c:	f896 3026 	ldrb.w	r3, [r6, #38]	; 0x26
    2b20:	9303      	str	r3, [sp, #12]
	transfer_mode = (uint32_t)config->transfer_mode;
    2b22:	f8d6 a004 	ldr.w	sl, [r6, #4]
	switch (transfer_mode)
    2b26:	f1ba 0f00 	cmp.w	sl, #0
    2b2a:	f000 8097 	beq.w	2c5c <usart_init+0x214>
    2b2e:	f1ba 5f80 	cmp.w	sl, #268435456	; 0x10000000
    2b32:	d07e      	beq.n	2c32 <usart_init+0x1ea>
	if(config->encoding_format_enable) {
    2b34:	7e73      	ldrb	r3, [r6, #25]
    2b36:	b113      	cbz	r3, 2b3e <usart_init+0xf6>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    2b38:	7eb3      	ldrb	r3, [r6, #26]
    2b3a:	f889 300e 	strb.w	r3, [r9, #14]
	usart_hw->BAUD.reg = baud;
    2b3e:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
    2b42:	f8a9 300c 	strh.w	r3, [r9, #12]
	ctrla |= transfer_mode;
    2b46:	9a04      	ldr	r2, [sp, #16]
    2b48:	9b05      	ldr	r3, [sp, #20]
    2b4a:	431a      	orrs	r2, r3
    2b4c:	9b02      	ldr	r3, [sp, #8]
    2b4e:	431a      	orrs	r2, r3
    2b50:	ea42 020a 	orr.w	r2, r2, sl
    2b54:	ea42 0208 	orr.w	r2, r2, r8
    2b58:	ea42 220b 	orr.w	r2, r2, fp, lsl #8
    2b5c:	9b03      	ldr	r3, [sp, #12]
    2b5e:	ea42 7243 	orr.w	r2, r2, r3, lsl #29
	if (config->use_external_clock == false) {
    2b62:	f896 3027 	ldrb.w	r3, [r6, #39]	; 0x27
    2b66:	b90b      	cbnz	r3, 2b6c <usart_init+0x124>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    2b68:	f042 0204 	orr.w	r2, r2, #4
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    2b6c:	7e71      	ldrb	r1, [r6, #25]
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    2b6e:	7f33      	ldrb	r3, [r6, #28]
    2b70:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    2b72:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    2b76:	7f71      	ldrb	r1, [r6, #29]
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    2b78:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    2b7c:	f896 1024 	ldrb.w	r1, [r6, #36]	; 0x24
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    2b80:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    2b84:	f896 1025 	ldrb.w	r1, [r6, #37]	; 0x25
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    2b88:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	ctrlb |= (uint32_t)config->character_size;
    2b8c:	7ab0      	ldrb	r0, [r6, #10]
    2b8e:	7af1      	ldrb	r1, [r6, #11]
    2b90:	4308      	orrs	r0, r1
    2b92:	4318      	orrs	r0, r3
	if (config->parity != USART_PARITY_NONE) {
    2b94:	8933      	ldrh	r3, [r6, #8]
    2b96:	2bff      	cmp	r3, #255	; 0xff
    2b98:	d07f      	beq.n	2c9a <usart_init+0x252>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    2b9a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
		ctrlb |= config->parity;
    2b9e:	4318      	orrs	r0, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    2ba0:	f896 302c 	ldrb.w	r3, [r6, #44]	; 0x2c
    2ba4:	b923      	cbnz	r3, 2bb0 <usart_init+0x168>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    2ba6:	4b5f      	ldr	r3, [pc, #380]	; (2d24 <usart_init+0x2dc>)
    2ba8:	789b      	ldrb	r3, [r3, #2]
    2baa:	f013 0f02 	tst.w	r3, #2
    2bae:	d001      	beq.n	2bb4 <usart_init+0x16c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    2bb0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
	SercomUsart *const usart_hw = &(module->hw->USART);
    2bb4:	6829      	ldr	r1, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2bb6:	69cb      	ldr	r3, [r1, #28]
	while (usart_is_syncing(module)) {
    2bb8:	2b00      	cmp	r3, #0
    2bba:	d1fc      	bne.n	2bb6 <usart_init+0x16e>
	usart_hw->CTRLB.reg = ctrlb;
    2bbc:	f8c9 0004 	str.w	r0, [r9, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2bc0:	6829      	ldr	r1, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2bc2:	69cb      	ldr	r3, [r1, #28]
	while (usart_is_syncing(module)) {
    2bc4:	2b00      	cmp	r3, #0
    2bc6:	d1fc      	bne.n	2bc2 <usart_init+0x17a>
	usart_hw->CTRLA.reg = ctrla;
    2bc8:	f8c9 2000 	str.w	r2, [r9]
    2bcc:	2380      	movs	r3, #128	; 0x80
    2bce:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2bd2:	2300      	movs	r3, #0
    2bd4:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
	config->powersave    = false;
    2bd8:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    2bdc:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
	uint32_t pad_pinmuxes[] = {
    2be0:	6b32      	ldr	r2, [r6, #48]	; 0x30
    2be2:	920a      	str	r2, [sp, #40]	; 0x28
    2be4:	6b72      	ldr	r2, [r6, #52]	; 0x34
    2be6:	920b      	str	r2, [sp, #44]	; 0x2c
    2be8:	6bb2      	ldr	r2, [r6, #56]	; 0x38
    2bea:	920c      	str	r2, [sp, #48]	; 0x30
    2bec:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
    2bee:	920d      	str	r2, [sp, #52]	; 0x34
    2bf0:	461e      	mov	r6, r3
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2bf2:	af0a      	add	r7, sp, #40	; 0x28
			current_pinmux = _sercom_get_default_pad(hw, pad);
    2bf4:	f8df 9148 	ldr.w	r9, [pc, #328]	; 2d40 <usart_init+0x2f8>
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    2bf8:	f8df 8148 	ldr.w	r8, [pc, #328]	; 2d44 <usart_init+0x2fc>
    2bfc:	e05a      	b.n	2cb4 <usart_init+0x26c>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    2bfe:	2308      	movs	r3, #8
    2c00:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    2c02:	2301      	movs	r3, #1
    2c04:	9307      	str	r3, [sp, #28]
    2c06:	e781      	b.n	2b0c <usart_init+0xc4>
	ctrla = (uint32_t)config->data_order |
    2c08:	6833      	ldr	r3, [r6, #0]
    2c0a:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    2c0c:	68f3      	ldr	r3, [r6, #12]
    2c0e:	9304      	str	r3, [sp, #16]
		config->sample_adjustment |
    2c10:	6973      	ldr	r3, [r6, #20]
    2c12:	9302      	str	r3, [sp, #8]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2c14:	f896 b018 	ldrb.w	fp, [r6, #24]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2c18:	f896 3026 	ldrb.w	r3, [r6, #38]	; 0x26
    2c1c:	9303      	str	r3, [sp, #12]
	transfer_mode = (uint32_t)config->transfer_mode;
    2c1e:	f8d6 a004 	ldr.w	sl, [r6, #4]
	switch (transfer_mode)
    2c22:	f1ba 0f00 	cmp.w	sl, #0
    2c26:	d015      	beq.n	2c54 <usart_init+0x20c>
    2c28:	f1ba 5f80 	cmp.w	sl, #268435456	; 0x10000000
    2c2c:	d001      	beq.n	2c32 <usart_init+0x1ea>
	enum status_code status_code = STATUS_OK;
    2c2e:	2000      	movs	r0, #0
    2c30:	e020      	b.n	2c74 <usart_init+0x22c>
			if (!config->use_external_clock) {
    2c32:	f896 3027 	ldrb.w	r3, [r6, #39]	; 0x27
    2c36:	2b00      	cmp	r3, #0
    2c38:	f47f af7c 	bne.w	2b34 <usart_init+0xec>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    2c3c:	6a33      	ldr	r3, [r6, #32]
    2c3e:	461f      	mov	r7, r3
    2c40:	b2c0      	uxtb	r0, r0
    2c42:	4b39      	ldr	r3, [pc, #228]	; (2d28 <usart_init+0x2e0>)
    2c44:	4798      	blx	r3
    2c46:	f10d 0226 	add.w	r2, sp, #38	; 0x26
    2c4a:	4601      	mov	r1, r0
    2c4c:	4638      	mov	r0, r7
    2c4e:	4b37      	ldr	r3, [pc, #220]	; (2d2c <usart_init+0x2e4>)
    2c50:	4798      	blx	r3
    2c52:	e00f      	b.n	2c74 <usart_init+0x22c>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    2c54:	2308      	movs	r3, #8
    2c56:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2c58:	2300      	movs	r3, #0
    2c5a:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    2c5c:	f896 3027 	ldrb.w	r3, [r6, #39]	; 0x27
    2c60:	b163      	cbz	r3, 2c7c <usart_init+0x234>
				status_code =
    2c62:	9b06      	ldr	r3, [sp, #24]
    2c64:	9300      	str	r3, [sp, #0]
    2c66:	9b07      	ldr	r3, [sp, #28]
    2c68:	f10d 0226 	add.w	r2, sp, #38	; 0x26
    2c6c:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    2c6e:	6a30      	ldr	r0, [r6, #32]
    2c70:	4f2f      	ldr	r7, [pc, #188]	; (2d30 <usart_init+0x2e8>)
    2c72:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    2c74:	2800      	cmp	r0, #0
    2c76:	f47f aef6 	bne.w	2a66 <usart_init+0x1e>
    2c7a:	e75b      	b.n	2b34 <usart_init+0xec>
						_sercom_get_async_baud_val(config->baudrate,
    2c7c:	6a33      	ldr	r3, [r6, #32]
    2c7e:	461f      	mov	r7, r3
    2c80:	b2c0      	uxtb	r0, r0
    2c82:	4b29      	ldr	r3, [pc, #164]	; (2d28 <usart_init+0x2e0>)
    2c84:	4798      	blx	r3
				status_code =
    2c86:	9b06      	ldr	r3, [sp, #24]
    2c88:	9300      	str	r3, [sp, #0]
    2c8a:	9b07      	ldr	r3, [sp, #28]
    2c8c:	f10d 0226 	add.w	r2, sp, #38	; 0x26
    2c90:	4601      	mov	r1, r0
    2c92:	4638      	mov	r0, r7
    2c94:	4f26      	ldr	r7, [pc, #152]	; (2d30 <usart_init+0x2e8>)
    2c96:	47b8      	blx	r7
    2c98:	e7ec      	b.n	2c74 <usart_init+0x22c>
		if(config->lin_slave_enable) {
    2c9a:	7ef3      	ldrb	r3, [r6, #27]
    2c9c:	2b00      	cmp	r3, #0
    2c9e:	f43f af7f 	beq.w	2ba0 <usart_init+0x158>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    2ca2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
    2ca6:	e77b      	b.n	2ba0 <usart_init+0x158>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    2ca8:	4620      	mov	r0, r4
    2caa:	47c8      	blx	r9
    2cac:	e007      	b.n	2cbe <usart_init+0x276>
    2cae:	3601      	adds	r6, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    2cb0:	2e04      	cmp	r6, #4
    2cb2:	d00e      	beq.n	2cd2 <usart_init+0x28a>
    2cb4:	b2f1      	uxtb	r1, r6
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2cb6:	f857 0026 	ldr.w	r0, [r7, r6, lsl #2]
		if (current_pinmux == PINMUX_DEFAULT) {
    2cba:	2800      	cmp	r0, #0
    2cbc:	d0f4      	beq.n	2ca8 <usart_init+0x260>
		if (current_pinmux != PINMUX_UNUSED) {
    2cbe:	f1b0 3fff 	cmp.w	r0, #4294967295
    2cc2:	d0f4      	beq.n	2cae <usart_init+0x266>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    2cc4:	a910      	add	r1, sp, #64	; 0x40
    2cc6:	f801 0d08 	strb.w	r0, [r1, #-8]!
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    2cca:	f3c0 4007 	ubfx	r0, r0, #16, #8
    2cce:	47c0      	blx	r8
    2cd0:	e7ed      	b.n	2cae <usart_init+0x266>
		module->callback[i]            = NULL;
    2cd2:	2400      	movs	r4, #0
    2cd4:	60ec      	str	r4, [r5, #12]
    2cd6:	612c      	str	r4, [r5, #16]
    2cd8:	616c      	str	r4, [r5, #20]
    2cda:	61ac      	str	r4, [r5, #24]
    2cdc:	61ec      	str	r4, [r5, #28]
    2cde:	622c      	str	r4, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    2ce0:	62ac      	str	r4, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    2ce2:	626c      	str	r4, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    2ce4:	85ec      	strh	r4, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    2ce6:	85ac      	strh	r4, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    2ce8:	f885 4030 	strb.w	r4, [r5, #48]	; 0x30
	module->callback_enable_mask       = 0x00;
    2cec:	f885 4031 	strb.w	r4, [r5, #49]	; 0x31
	module->rx_status                  = STATUS_OK;
    2cf0:	f885 4032 	strb.w	r4, [r5, #50]	; 0x32
	module->tx_status                  = STATUS_OK;
    2cf4:	f885 4033 	strb.w	r4, [r5, #51]	; 0x33
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    2cf8:	6828      	ldr	r0, [r5, #0]
    2cfa:	4b05      	ldr	r3, [pc, #20]	; (2d10 <usart_init+0x2c8>)
    2cfc:	4798      	blx	r3
    2cfe:	4606      	mov	r6, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    2d00:	490c      	ldr	r1, [pc, #48]	; (2d34 <usart_init+0x2ec>)
    2d02:	4b0d      	ldr	r3, [pc, #52]	; (2d38 <usart_init+0x2f0>)
    2d04:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    2d06:	4b0d      	ldr	r3, [pc, #52]	; (2d3c <usart_init+0x2f4>)
    2d08:	f843 5026 	str.w	r5, [r3, r6, lsl #2]
	return status_code;
    2d0c:	4620      	mov	r0, r4
    2d0e:	e6aa      	b.n	2a66 <usart_init+0x1e>
    2d10:	0000291d 	.word	0x0000291d
    2d14:	40000400 	.word	0x40000400
    2d18:	000035d5 	.word	0x000035d5
    2d1c:	00003555 	.word	0x00003555
    2d20:	0000277d 	.word	0x0000277d
    2d24:	41002000 	.word	0x41002000
    2d28:	000035f1 	.word	0x000035f1
    2d2c:	000026d1 	.word	0x000026d1
    2d30:	000026f9 	.word	0x000026f9
    2d34:	00002e79 	.word	0x00002e79
    2d38:	00002961 	.word	0x00002961
    2d3c:	20000590 	.word	0x20000590
    2d40:	000027c5 	.word	0x000027c5
    2d44:	000036bd 	.word	0x000036bd
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    2d48:	2310      	movs	r3, #16
    2d4a:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2d4c:	2300      	movs	r3, #0
    2d4e:	9307      	str	r3, [sp, #28]
    2d50:	e6dc      	b.n	2b0c <usart_init+0xc4>
    2d52:	bf00      	nop

00002d54 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    2d54:	79c3      	ldrb	r3, [r0, #7]
    2d56:	b90b      	cbnz	r3, 2d5c <usart_write_wait+0x8>
		return STATUS_ERR_DENIED;
    2d58:	201c      	movs	r0, #28
    2d5a:	4770      	bx	lr
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    2d5c:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
    2d5e:	b29b      	uxth	r3, r3
    2d60:	b10b      	cbz	r3, 2d66 <usart_write_wait+0x12>
		return STATUS_BUSY;
    2d62:	2005      	movs	r0, #5
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    2d64:	4770      	bx	lr
	SercomUsart *const usart_hw = &(module->hw->USART);
    2d66:	6802      	ldr	r2, [r0, #0]
	usart_hw->DATA.reg = tx_data;
    2d68:	8511      	strh	r1, [r2, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    2d6a:	7e13      	ldrb	r3, [r2, #24]
    2d6c:	f013 0f02 	tst.w	r3, #2
    2d70:	d0fb      	beq.n	2d6a <usart_write_wait+0x16>
	return STATUS_OK;
    2d72:	2000      	movs	r0, #0
    2d74:	4770      	bx	lr

00002d76 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    2d76:	7983      	ldrb	r3, [r0, #6]
    2d78:	b90b      	cbnz	r3, 2d7e <usart_read_wait+0x8>
		return STATUS_ERR_DENIED;
    2d7a:	201c      	movs	r0, #28
    2d7c:	4770      	bx	lr
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    2d7e:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
    2d80:	b29b      	uxth	r3, r3
    2d82:	b10b      	cbz	r3, 2d88 <usart_read_wait+0x12>
		return STATUS_BUSY;
    2d84:	2005      	movs	r0, #5
    2d86:	4770      	bx	lr
	SercomUsart *const usart_hw = &(module->hw->USART);
    2d88:	6803      	ldr	r3, [r0, #0]
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    2d8a:	7e1a      	ldrb	r2, [r3, #24]
    2d8c:	f012 0f04 	tst.w	r2, #4
    2d90:	d101      	bne.n	2d96 <usart_read_wait+0x20>
		/* Return error code */
		return STATUS_BUSY;
    2d92:	2005      	movs	r0, #5

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    2d94:	4770      	bx	lr
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2d96:	8b5a      	ldrh	r2, [r3, #26]
    2d98:	b2d2      	uxtb	r2, r2
	if (error_code) {
    2d9a:	f012 0f3f 	tst.w	r2, #63	; 0x3f
    2d9e:	d022      	beq.n	2de6 <usart_read_wait+0x70>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    2da0:	f012 0f02 	tst.w	r2, #2
    2da4:	d003      	beq.n	2dae <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    2da6:	2202      	movs	r2, #2
    2da8:	835a      	strh	r2, [r3, #26]
			return STATUS_ERR_BAD_FORMAT;
    2daa:	201a      	movs	r0, #26
    2dac:	4770      	bx	lr
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2dae:	f012 0f04 	tst.w	r2, #4
    2db2:	d003      	beq.n	2dbc <usart_read_wait+0x46>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    2db4:	2204      	movs	r2, #4
    2db6:	835a      	strh	r2, [r3, #26]
			return STATUS_ERR_OVERFLOW;
    2db8:	201e      	movs	r0, #30
    2dba:	4770      	bx	lr
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2dbc:	f012 0f01 	tst.w	r2, #1
    2dc0:	d003      	beq.n	2dca <usart_read_wait+0x54>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2dc2:	2201      	movs	r2, #1
    2dc4:	835a      	strh	r2, [r3, #26]
			return STATUS_ERR_BAD_DATA;
    2dc6:	2013      	movs	r0, #19
    2dc8:	4770      	bx	lr
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    2dca:	f012 0f10 	tst.w	r2, #16
    2dce:	d003      	beq.n	2dd8 <usart_read_wait+0x62>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    2dd0:	2210      	movs	r2, #16
    2dd2:	835a      	strh	r2, [r3, #26]
			return STATUS_ERR_PROTOCOL;
    2dd4:	2042      	movs	r0, #66	; 0x42
    2dd6:	4770      	bx	lr
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    2dd8:	f012 0f20 	tst.w	r2, #32
    2ddc:	d003      	beq.n	2de6 <usart_read_wait+0x70>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2dde:	2220      	movs	r2, #32
    2de0:	835a      	strh	r2, [r3, #26]
			return STATUS_ERR_PACKET_COLLISION;
    2de2:	2041      	movs	r0, #65	; 0x41
    2de4:	4770      	bx	lr
	*rx_data = usart_hw->DATA.reg;
    2de6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    2de8:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    2dea:	2000      	movs	r0, #0
    2dec:	4770      	bx	lr
	...

00002df0 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    2df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2df2:	4604      	mov	r4, r0
    2df4:	460e      	mov	r6, r1
    2df6:	4617      	mov	r7, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2df8:	6805      	ldr	r5, [r0, #0]
	cpu_irq_enter_critical();
    2dfa:	4b0f      	ldr	r3, [pc, #60]	; (2e38 <_usart_read_buffer+0x48>)
    2dfc:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    2dfe:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    2e00:	b29b      	uxth	r3, r3
    2e02:	b11b      	cbz	r3, 2e0c <_usart_read_buffer+0x1c>
	cpu_irq_leave_critical();
    2e04:	4b0d      	ldr	r3, [pc, #52]	; (2e3c <_usart_read_buffer+0x4c>)
    2e06:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    2e08:	2005      	movs	r0, #5
    2e0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
    2e0c:	85a7      	strh	r7, [r4, #44]	; 0x2c
    2e0e:	4b0b      	ldr	r3, [pc, #44]	; (2e3c <_usart_read_buffer+0x4c>)
    2e10:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	module->rx_buffer_ptr              = rx_data;
    2e12:	6266      	str	r6, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    2e14:	2305      	movs	r3, #5
    2e16:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    2e1a:	2304      	movs	r3, #4
    2e1c:	75ab      	strb	r3, [r5, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
    2e1e:	7a23      	ldrb	r3, [r4, #8]
    2e20:	b10b      	cbz	r3, 2e26 <_usart_read_buffer+0x36>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    2e22:	2320      	movs	r3, #32
    2e24:	75ab      	strb	r3, [r5, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
    2e26:	7a63      	ldrb	r3, [r4, #9]
    2e28:	b11b      	cbz	r3, 2e32 <_usart_read_buffer+0x42>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    2e2a:	2308      	movs	r3, #8
    2e2c:	75ab      	strb	r3, [r5, #22]
	}
#endif

	return STATUS_OK;
    2e2e:	2000      	movs	r0, #0
    2e30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2e32:	2000      	movs	r0, #0
}
    2e34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2e36:	bf00      	nop
    2e38:	00001fa1 	.word	0x00001fa1
    2e3c:	00001fdd 	.word	0x00001fdd

00002e40 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    2e40:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    2e44:	60d9      	str	r1, [r3, #12]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    2e46:	2301      	movs	r3, #1
    2e48:	4093      	lsls	r3, r2
    2e4a:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
    2e4e:	431a      	orrs	r2, r3
    2e50:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
    2e54:	4770      	bx	lr
	...

00002e58 <usart_read_buffer_job>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
    2e58:	b90a      	cbnz	r2, 2e5e <usart_read_buffer_job+0x6>
		return STATUS_ERR_INVALID_ARG;
    2e5a:	2017      	movs	r0, #23
    2e5c:	4770      	bx	lr
{
    2e5e:	b508      	push	{r3, lr}
    2e60:	4613      	mov	r3, r2
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    2e62:	7982      	ldrb	r2, [r0, #6]
    2e64:	b90a      	cbnz	r2, 2e6a <usart_read_buffer_job+0x12>
		return STATUS_ERR_DENIED;
    2e66:	201c      	movs	r0, #28
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
    2e68:	bd08      	pop	{r3, pc}
    2e6a:	461a      	mov	r2, r3
	return _usart_read_buffer(module, rx_data, length);
    2e6c:	4b01      	ldr	r3, [pc, #4]	; (2e74 <usart_read_buffer_job+0x1c>)
    2e6e:	4798      	blx	r3
    2e70:	bd08      	pop	{r3, pc}
    2e72:	bf00      	nop
    2e74:	00002df1 	.word	0x00002df1

00002e78 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    2e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    2e7a:	4b6a      	ldr	r3, [pc, #424]	; (3024 <_usart_interrupt_handler+0x1ac>)
    2e7c:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    2e80:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2e82:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    2e84:	2b00      	cmp	r3, #0
    2e86:	d1fc      	bne.n	2e82 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    2e88:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    2e8a:	7da6      	ldrb	r6, [r4, #22]
    2e8c:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    2e8e:	f895 7030 	ldrb.w	r7, [r5, #48]	; 0x30
    2e92:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    2e96:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    2e98:	f016 0f01 	tst.w	r6, #1
    2e9c:	d021      	beq.n	2ee2 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    2e9e:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    2ea0:	b29b      	uxth	r3, r3
    2ea2:	b1e3      	cbz	r3, 2ede <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2ea4:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    2ea6:	460a      	mov	r2, r1
    2ea8:	f812 3b01 	ldrb.w	r3, [r2], #1
    2eac:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    2eae:	62aa      	str	r2, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2eb0:	796a      	ldrb	r2, [r5, #5]
    2eb2:	2a01      	cmp	r2, #1
    2eb4:	d00d      	beq.n	2ed2 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2eb6:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    2eb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
    2ebc:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    2ebe:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    2ec0:	3b01      	subs	r3, #1
    2ec2:	b29b      	uxth	r3, r3
    2ec4:	85eb      	strh	r3, [r5, #46]	; 0x2e
    2ec6:	b963      	cbnz	r3, 2ee2 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2ec8:	2301      	movs	r3, #1
    2eca:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    2ecc:	2302      	movs	r3, #2
    2ece:	75a3      	strb	r3, [r4, #22]
    2ed0:	e007      	b.n	2ee2 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    2ed2:	784a      	ldrb	r2, [r1, #1]
    2ed4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
				(module->tx_buffer_ptr)++;
    2ed8:	3102      	adds	r1, #2
    2eda:	62a9      	str	r1, [r5, #40]	; 0x28
    2edc:	e7ec      	b.n	2eb8 <_usart_interrupt_handler+0x40>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2ede:	2301      	movs	r3, #1
    2ee0:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    2ee2:	f016 0f02 	tst.w	r6, #2
    2ee6:	d007      	beq.n	2ef8 <_usart_interrupt_handler+0x80>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    2ee8:	2302      	movs	r3, #2
    2eea:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    2eec:	2300      	movs	r3, #0
    2eee:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    2ef2:	f017 0f01 	tst.w	r7, #1
    2ef6:	d11f      	bne.n	2f38 <_usart_interrupt_handler+0xc0>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    2ef8:	f016 0f04 	tst.w	r6, #4
    2efc:	d069      	beq.n	2fd2 <_usart_interrupt_handler+0x15a>

		if (module->remaining_rx_buffer_length) {
    2efe:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2f00:	b29b      	uxth	r3, r3
    2f02:	2b00      	cmp	r3, #0
    2f04:	d063      	beq.n	2fce <_usart_interrupt_handler+0x156>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2f06:	8b63      	ldrh	r3, [r4, #26]
    2f08:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    2f0a:	f013 0f08 	tst.w	r3, #8
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2f0e:	bf0c      	ite	eq
    2f10:	f003 033f 	andeq.w	r3, r3, #63	; 0x3f
				error_code &= ~SERCOM_USART_STATUS_CTS;
    2f14:	f003 0337 	andne.w	r3, r3, #55	; 0x37
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    2f18:	b3b3      	cbz	r3, 2f88 <_usart_interrupt_handler+0x110>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    2f1a:	f013 0f02 	tst.w	r3, #2
    2f1e:	d00f      	beq.n	2f40 <_usart_interrupt_handler+0xc8>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    2f20:	231a      	movs	r3, #26
    2f22:	f885 3032 	strb.w	r3, [r5, #50]	; 0x32
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    2f26:	2302      	movs	r3, #2
    2f28:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    2f2a:	f017 0f04 	tst.w	r7, #4
    2f2e:	d050      	beq.n	2fd2 <_usart_interrupt_handler+0x15a>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    2f30:	696b      	ldr	r3, [r5, #20]
    2f32:	4628      	mov	r0, r5
    2f34:	4798      	blx	r3
    2f36:	e04c      	b.n	2fd2 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    2f38:	68eb      	ldr	r3, [r5, #12]
    2f3a:	4628      	mov	r0, r5
    2f3c:	4798      	blx	r3
    2f3e:	e7db      	b.n	2ef8 <_usart_interrupt_handler+0x80>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2f40:	f013 0f04 	tst.w	r3, #4
    2f44:	d005      	beq.n	2f52 <_usart_interrupt_handler+0xda>
					module->rx_status = STATUS_ERR_OVERFLOW;
    2f46:	231e      	movs	r3, #30
    2f48:	f885 3032 	strb.w	r3, [r5, #50]	; 0x32
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    2f4c:	2304      	movs	r3, #4
    2f4e:	8363      	strh	r3, [r4, #26]
    2f50:	e7eb      	b.n	2f2a <_usart_interrupt_handler+0xb2>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2f52:	f013 0f01 	tst.w	r3, #1
    2f56:	d005      	beq.n	2f64 <_usart_interrupt_handler+0xec>
					module->rx_status = STATUS_ERR_BAD_DATA;
    2f58:	2313      	movs	r3, #19
    2f5a:	f885 3032 	strb.w	r3, [r5, #50]	; 0x32
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2f5e:	2301      	movs	r3, #1
    2f60:	8363      	strh	r3, [r4, #26]
    2f62:	e7e2      	b.n	2f2a <_usart_interrupt_handler+0xb2>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    2f64:	f013 0f10 	tst.w	r3, #16
    2f68:	d005      	beq.n	2f76 <_usart_interrupt_handler+0xfe>
					module->rx_status = STATUS_ERR_PROTOCOL;
    2f6a:	2342      	movs	r3, #66	; 0x42
    2f6c:	f885 3032 	strb.w	r3, [r5, #50]	; 0x32
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    2f70:	2310      	movs	r3, #16
    2f72:	8363      	strh	r3, [r4, #26]
    2f74:	e7d9      	b.n	2f2a <_usart_interrupt_handler+0xb2>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    2f76:	f013 0f20 	tst.w	r3, #32
    2f7a:	d0d6      	beq.n	2f2a <_usart_interrupt_handler+0xb2>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    2f7c:	2341      	movs	r3, #65	; 0x41
    2f7e:	f885 3032 	strb.w	r3, [r5, #50]	; 0x32
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2f82:	2320      	movs	r3, #32
    2f84:	8363      	strh	r3, [r4, #26]
    2f86:	e7d0      	b.n	2f2a <_usart_interrupt_handler+0xb2>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    2f88:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    2f8a:	f3c3 0308 	ubfx	r3, r3, #0, #9

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    2f8e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    2f90:	b2d9      	uxtb	r1, r3
    2f92:	7011      	strb	r1, [r2, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    2f94:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    2f96:	1c51      	adds	r1, r2, #1
    2f98:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2f9a:	7969      	ldrb	r1, [r5, #5]
    2f9c:	2901      	cmp	r1, #1
    2f9e:	d010      	beq.n	2fc2 <_usart_interrupt_handler+0x14a>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    2fa0:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2fa2:	3b01      	subs	r3, #1
    2fa4:	b29b      	uxth	r3, r3
    2fa6:	85ab      	strh	r3, [r5, #44]	; 0x2c
    2fa8:	b99b      	cbnz	r3, 2fd2 <_usart_interrupt_handler+0x15a>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2faa:	2304      	movs	r3, #4
    2fac:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    2fae:	2300      	movs	r3, #0
    2fb0:	f885 3032 	strb.w	r3, [r5, #50]	; 0x32

					/* Run callback if registered and enabled */
					if (callback_status
    2fb4:	f017 0f02 	tst.w	r7, #2
    2fb8:	d00b      	beq.n	2fd2 <_usart_interrupt_handler+0x15a>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    2fba:	692b      	ldr	r3, [r5, #16]
    2fbc:	4628      	mov	r0, r5
    2fbe:	4798      	blx	r3
    2fc0:	e007      	b.n	2fd2 <_usart_interrupt_handler+0x15a>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    2fc2:	0a1b      	lsrs	r3, r3, #8
    2fc4:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    2fc6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    2fc8:	3301      	adds	r3, #1
    2fca:	626b      	str	r3, [r5, #36]	; 0x24
    2fcc:	e7e8      	b.n	2fa0 <_usart_interrupt_handler+0x128>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2fce:	2304      	movs	r3, #4
    2fd0:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    2fd2:	f016 0f10 	tst.w	r6, #16
    2fd6:	d005      	beq.n	2fe4 <_usart_interrupt_handler+0x16c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    2fd8:	2310      	movs	r3, #16
    2fda:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    2fdc:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    2fde:	f017 0f10 	tst.w	r7, #16
    2fe2:	d112      	bne.n	300a <_usart_interrupt_handler+0x192>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    2fe4:	f016 0f20 	tst.w	r6, #32
    2fe8:	d005      	beq.n	2ff6 <_usart_interrupt_handler+0x17e>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    2fea:	2320      	movs	r3, #32
    2fec:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    2fee:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    2ff0:	f017 0f08 	tst.w	r7, #8
    2ff4:	d10d      	bne.n	3012 <_usart_interrupt_handler+0x19a>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    2ff6:	f016 0f08 	tst.w	r6, #8
    2ffa:	d005      	beq.n	3008 <_usart_interrupt_handler+0x190>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    2ffc:	2308      	movs	r3, #8
    2ffe:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    3000:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    3002:	f017 0f20 	tst.w	r7, #32
    3006:	d108      	bne.n	301a <_usart_interrupt_handler+0x1a2>
    3008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    300a:	69eb      	ldr	r3, [r5, #28]
    300c:	4628      	mov	r0, r5
    300e:	4798      	blx	r3
    3010:	e7e8      	b.n	2fe4 <_usart_interrupt_handler+0x16c>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    3012:	69ab      	ldr	r3, [r5, #24]
    3014:	4628      	mov	r0, r5
    3016:	4798      	blx	r3
    3018:	e7ed      	b.n	2ff6 <_usart_interrupt_handler+0x17e>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    301a:	6a2b      	ldr	r3, [r5, #32]
    301c:	4628      	mov	r0, r5
    301e:	4798      	blx	r3
		}
	}
#endif
}
    3020:	e7f2      	b.n	3008 <_usart_interrupt_handler+0x190>
    3022:	bf00      	nop
    3024:	20000590 	.word	0x20000590

00003028 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    3028:	b508      	push	{r3, lr}
	switch (clock_source) {
    302a:	2808      	cmp	r0, #8
    302c:	d806      	bhi.n	303c <system_clock_source_get_hz+0x14>
    302e:	e8df f000 	tbb	[pc, r0]
    3032:	0507      	.short	0x0507
    3034:	11333305 	.word	0x11333305
    3038:	140a      	.short	0x140a
    303a:	2a          	.byte	0x2a
    303b:	00          	.byte	0x00

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    303c:	2000      	movs	r0, #0
    303e:	bd08      	pop	{r3, pc}
		return _system_clock_inst.xosc.frequency;
    3040:	4b19      	ldr	r3, [pc, #100]	; (30a8 <system_clock_source_get_hz+0x80>)
    3042:	6918      	ldr	r0, [r3, #16]
    3044:	bd08      	pop	{r3, pc}
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    3046:	4b19      	ldr	r3, [pc, #100]	; (30ac <system_clock_source_get_hz+0x84>)
    3048:	6a1b      	ldr	r3, [r3, #32]
    304a:	f3c3 2301 	ubfx	r3, r3, #8, #2
    304e:	4818      	ldr	r0, [pc, #96]	; (30b0 <system_clock_source_get_hz+0x88>)
    3050:	40d8      	lsrs	r0, r3
    3052:	bd08      	pop	{r3, pc}
		return _system_clock_inst.xosc32k.frequency;
    3054:	4b14      	ldr	r3, [pc, #80]	; (30a8 <system_clock_source_get_hz+0x80>)
    3056:	6958      	ldr	r0, [r3, #20]
    3058:	bd08      	pop	{r3, pc}
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    305a:	4b13      	ldr	r3, [pc, #76]	; (30a8 <system_clock_source_get_hz+0x80>)
    305c:	681b      	ldr	r3, [r3, #0]
    305e:	f013 0f02 	tst.w	r3, #2
    3062:	d01c      	beq.n	309e <system_clock_source_get_hz+0x76>
		switch(_system_clock_inst.dfll.control &
    3064:	4b10      	ldr	r3, [pc, #64]	; (30a8 <system_clock_source_get_hz+0x80>)
    3066:	681b      	ldr	r3, [r3, #0]
    3068:	f003 0324 	and.w	r3, r3, #36	; 0x24
    306c:	2b04      	cmp	r3, #4
    306e:	d001      	beq.n	3074 <system_clock_source_get_hz+0x4c>
			return 48000000UL;
    3070:	4810      	ldr	r0, [pc, #64]	; (30b4 <system_clock_source_get_hz+0x8c>)
    3072:	bd08      	pop	{r3, pc}
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    3074:	2000      	movs	r0, #0
    3076:	4b10      	ldr	r3, [pc, #64]	; (30b8 <system_clock_source_get_hz+0x90>)
    3078:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    307a:	4b0b      	ldr	r3, [pc, #44]	; (30a8 <system_clock_source_get_hz+0x80>)
    307c:	689b      	ldr	r3, [r3, #8]
    307e:	b29b      	uxth	r3, r3
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    3080:	fb00 f003 	mul.w	r0, r0, r3
    3084:	bd08      	pop	{r3, pc}
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    3086:	4b09      	ldr	r3, [pc, #36]	; (30ac <system_clock_source_get_hz+0x84>)
    3088:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
    308c:	f013 0f04 	tst.w	r3, #4
    3090:	d007      	beq.n	30a2 <system_clock_source_get_hz+0x7a>
		return _system_clock_inst.dpll.frequency;
    3092:	4b05      	ldr	r3, [pc, #20]	; (30a8 <system_clock_source_get_hz+0x80>)
    3094:	68d8      	ldr	r0, [r3, #12]
    3096:	bd08      	pop	{r3, pc}
		return 32768UL;
    3098:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    309c:	bd08      	pop	{r3, pc}
			return 0;
    309e:	2000      	movs	r0, #0
    30a0:	bd08      	pop	{r3, pc}
			return 0;
    30a2:	2000      	movs	r0, #0
	}
}
    30a4:	bd08      	pop	{r3, pc}
    30a6:	bf00      	nop
    30a8:	200004c4 	.word	0x200004c4
    30ac:	40000800 	.word	0x40000800
    30b0:	007a1200 	.word	0x007a1200
    30b4:	02dc6c00 	.word	0x02dc6c00
    30b8:	000035f1 	.word	0x000035f1

000030bc <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    30bc:	b410      	push	{r4}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    30be:	4a07      	ldr	r2, [pc, #28]	; (30dc <system_clock_source_osc8m_set_config+0x20>)
    30c0:	6a13      	ldr	r3, [r2, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    30c2:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    30c4:	7884      	ldrb	r4, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    30c6:	7840      	ldrb	r0, [r0, #1]
    30c8:	f360 1386 	bfi	r3, r0, #6, #1
    30cc:	f364 13c7 	bfi	r3, r4, #7, #1
    30d0:	f361 2309 	bfi	r3, r1, #8, #2
    30d4:	6213      	str	r3, [r2, #32]
}
    30d6:	bc10      	pop	{r4}
    30d8:	4770      	bx	lr
    30da:	bf00      	nop
    30dc:	40000800 	.word	0x40000800

000030e0 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    30e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    30e4:	4913      	ldr	r1, [pc, #76]	; (3134 <system_clock_source_xosc32k_set_config+0x54>)
    30e6:	8a8b      	ldrh	r3, [r1, #20]

	temp.bit.STARTUP = config->startup_time;
    30e8:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    30ea:	7802      	ldrb	r2, [r0, #0]
    30ec:	fab2 f282 	clz	r2, r2
    30f0:	0952      	lsrs	r2, r2, #5
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    30f2:	f890 e002 	ldrb.w	lr, [r0, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    30f6:	f890 c003 	ldrb.w	ip, [r0, #3]
	temp.bit.EN32K = config->enable_32khz_output;
    30fa:	f890 8004 	ldrb.w	r8, [r0, #4]

	temp.bit.ONDEMAND = config->on_demand;
    30fe:	7b46      	ldrb	r6, [r0, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    3100:	7b07      	ldrb	r7, [r0, #12]
	temp.bit.WRTLOCK  = config->write_once;
    3102:	7b84      	ldrb	r4, [r0, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    3104:	f8d0 9008 	ldr.w	r9, [r0, #8]
    3108:	480b      	ldr	r0, [pc, #44]	; (3138 <system_clock_source_xosc32k_set_config+0x58>)
    310a:	f8c0 9014 	str.w	r9, [r0, #20]

	SYSCTRL->XOSC32K = temp;
    310e:	f362 0382 	bfi	r3, r2, #2, #1
    3112:	f368 03c3 	bfi	r3, r8, #3, #1
    3116:	f36c 1304 	bfi	r3, ip, #4, #1
    311a:	f36e 1345 	bfi	r3, lr, #5, #1
    311e:	f367 1386 	bfi	r3, r7, #6, #1
    3122:	f366 13c7 	bfi	r3, r6, #7, #1
    3126:	f365 230a 	bfi	r3, r5, #8, #3
    312a:	f364 330c 	bfi	r3, r4, #12, #1
    312e:	828b      	strh	r3, [r1, #20]
    3130:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3134:	40000800 	.word	0x40000800
    3138:	200004c4 	.word	0x200004c4

0000313c <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    313c:	b410      	push	{r4}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    313e:	7a03      	ldrb	r3, [r0, #8]
    3140:	029b      	lsls	r3, r3, #10
    3142:	b29b      	uxth	r3, r3
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    3144:	8942      	ldrh	r2, [r0, #10]
    3146:	f3c2 0209 	ubfx	r2, r2, #0, #10
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    314a:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    314c:	491a      	ldr	r1, [pc, #104]	; (31b8 <system_clock_source_dfll_set_config+0x7c>)
    314e:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    3150:	7983      	ldrb	r3, [r0, #6]
    3152:	79c2      	ldrb	r2, [r0, #7]
    3154:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    3156:	8842      	ldrh	r2, [r0, #2]
    3158:	8884      	ldrh	r4, [r0, #4]
    315a:	4322      	orrs	r2, r4
    315c:	b292      	uxth	r2, r2
    315e:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    3160:	7842      	ldrb	r2, [r0, #1]
			(uint32_t)config->chill_cycle     |
    3162:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
	_system_clock_inst.dfll.control =
    3166:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    3168:	7803      	ldrb	r3, [r0, #0]
    316a:	2b04      	cmp	r3, #4
    316c:	d014      	beq.n	3198 <system_clock_source_dfll_set_config+0x5c>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    316e:	2b20      	cmp	r3, #32
    3170:	d110      	bne.n	3194 <system_clock_source_dfll_set_config+0x58>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    3172:	7b02      	ldrb	r2, [r0, #12]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    3174:	8a03      	ldrh	r3, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    3176:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
    317a:	89c1      	ldrh	r1, [r0, #14]
    317c:	4a0f      	ldr	r2, [pc, #60]	; (31bc <system_clock_source_dfll_set_config+0x80>)
    317e:	ea02 4201 	and.w	r2, r2, r1, lsl #16
    3182:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    3184:	4a0c      	ldr	r2, [pc, #48]	; (31b8 <system_clock_source_dfll_set_config+0x7c>)
    3186:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    3188:	6813      	ldr	r3, [r2, #0]
    318a:	f443 6384 	orr.w	r3, r3, #1056	; 0x420
    318e:	f043 0304 	orr.w	r3, r3, #4
    3192:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    3194:	bc10      	pop	{r4}
    3196:	4770      	bx	lr
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    3198:	7b02      	ldrb	r2, [r0, #12]
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    319a:	8a03      	ldrh	r3, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    319c:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
    31a0:	89c1      	ldrh	r1, [r0, #14]
    31a2:	4a06      	ldr	r2, [pc, #24]	; (31bc <system_clock_source_dfll_set_config+0x80>)
    31a4:	ea02 4201 	and.w	r2, r2, r1, lsl #16
    31a8:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    31aa:	4a03      	ldr	r2, [pc, #12]	; (31b8 <system_clock_source_dfll_set_config+0x7c>)
    31ac:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    31ae:	6813      	ldr	r3, [r2, #0]
    31b0:	f043 0304 	orr.w	r3, r3, #4
    31b4:	6013      	str	r3, [r2, #0]
    31b6:	e7ed      	b.n	3194 <system_clock_source_dfll_set_config+0x58>
    31b8:	200004c4 	.word	0x200004c4
    31bc:	03ff0000 	.word	0x03ff0000

000031c0 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    31c0:	2808      	cmp	r0, #8
    31c2:	d806      	bhi.n	31d2 <system_clock_source_enable+0x12>
    31c4:	e8df f000 	tbb	[pc, r0]
    31c8:	40050515 	.word	0x40050515
    31cc:	25071d0e 	.word	0x25071d0e
    31d0:	37          	.byte	0x37
    31d1:	00          	.byte	0x00
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    31d2:	2017      	movs	r0, #23
    31d4:	4770      	bx	lr
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    31d6:	4a1d      	ldr	r2, [pc, #116]	; (324c <system_clock_source_enable+0x8c>)
    31d8:	6a13      	ldr	r3, [r2, #32]
    31da:	f043 0302 	orr.w	r3, r3, #2
    31de:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    31e0:	2000      	movs	r0, #0
    31e2:	4770      	bx	lr
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    31e4:	4a19      	ldr	r2, [pc, #100]	; (324c <system_clock_source_enable+0x8c>)
    31e6:	6993      	ldr	r3, [r2, #24]
    31e8:	f043 0302 	orr.w	r3, r3, #2
    31ec:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    31ee:	2000      	movs	r0, #0
		break;
    31f0:	4770      	bx	lr
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    31f2:	4a16      	ldr	r2, [pc, #88]	; (324c <system_clock_source_enable+0x8c>)
    31f4:	8a13      	ldrh	r3, [r2, #16]
    31f6:	b29b      	uxth	r3, r3
    31f8:	f043 0302 	orr.w	r3, r3, #2
    31fc:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    31fe:	2000      	movs	r0, #0
		break;
    3200:	4770      	bx	lr
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    3202:	4a12      	ldr	r2, [pc, #72]	; (324c <system_clock_source_enable+0x8c>)
    3204:	8a93      	ldrh	r3, [r2, #20]
    3206:	b29b      	uxth	r3, r3
    3208:	f043 0302 	orr.w	r3, r3, #2
    320c:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    320e:	2000      	movs	r0, #0
		break;
    3210:	4770      	bx	lr
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    3212:	4a0f      	ldr	r2, [pc, #60]	; (3250 <system_clock_source_enable+0x90>)
    3214:	6813      	ldr	r3, [r2, #0]
    3216:	f043 0302 	orr.w	r3, r3, #2
    321a:	6013      	str	r3, [r2, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    321c:	4b0b      	ldr	r3, [pc, #44]	; (324c <system_clock_source_enable+0x8c>)
    321e:	2102      	movs	r1, #2
    3220:	8499      	strh	r1, [r3, #36]	; 0x24
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    3222:	6891      	ldr	r1, [r2, #8]
    3224:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    3226:	6851      	ldr	r1, [r2, #4]
    3228:	6299      	str	r1, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    322a:	2000      	movs	r0, #0
    322c:	8498      	strh	r0, [r3, #36]	; 0x24
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    322e:	6812      	ldr	r2, [r2, #0]
    3230:	b292      	uxth	r2, r2
    3232:	849a      	strh	r2, [r3, #36]	; 0x24
    3234:	4770      	bx	lr
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    3236:	4a05      	ldr	r2, [pc, #20]	; (324c <system_clock_source_enable+0x8c>)
    3238:	f892 3044 	ldrb.w	r3, [r2, #68]	; 0x44
    323c:	f043 0302 	orr.w	r3, r3, #2
    3240:	f882 3044 	strb.w	r3, [r2, #68]	; 0x44
	return STATUS_OK;
    3244:	2000      	movs	r0, #0
		break;
    3246:	4770      	bx	lr
		return STATUS_OK;
    3248:	2000      	movs	r0, #0
}
    324a:	4770      	bx	lr
    324c:	40000800 	.word	0x40000800
    3250:	200004c4 	.word	0x200004c4

00003254 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    3254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3258:	b08e      	sub	sp, #56	; 0x38
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    325a:	f44f 62c2 	mov.w	r2, #1552	; 0x610
    325e:	4b4f      	ldr	r3, [pc, #316]	; (339c <system_clock_init+0x148>)
    3260:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    3262:	4b4f      	ldr	r3, [pc, #316]	; (33a0 <system_clock_init+0x14c>)
    3264:	685a      	ldr	r2, [r3, #4]
    3266:	2101      	movs	r1, #1
    3268:	f361 0244 	bfi	r2, r1, #1, #4
    326c:	605a      	str	r2, [r3, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    326e:	ad0e      	add	r5, sp, #56	; 0x38
    3270:	2302      	movs	r3, #2
    3272:	f805 3d34 	strb.w	r3, [r5, #-52]!
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    3276:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    3278:	4e4a      	ldr	r6, [pc, #296]	; (33a4 <system_clock_init+0x150>)
    327a:	4629      	mov	r1, r5
    327c:	b2e0      	uxtb	r0, r4
    327e:	47b0      	blx	r6
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    3280:	3401      	adds	r4, #1
    3282:	2c25      	cmp	r4, #37	; 0x25
    3284:	d1f9      	bne.n	327a <system_clock_init+0x26>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    3286:	2400      	movs	r4, #0
    3288:	f88d 4028 	strb.w	r4, [sp, #40]	; 0x28
	config->auto_gain_control   = false;
    328c:	f88d 402a 	strb.w	r4, [sp, #42]	; 0x2a
	config->frequency           = 32768UL;
    3290:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    3294:	930c      	str	r3, [sp, #48]	; 0x30
	config->enable_1khz_output  = false;
    3296:	f88d 402b 	strb.w	r4, [sp, #43]	; 0x2b
	config->enable_32khz_output = true;
    329a:	2301      	movs	r3, #1
    329c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	config->run_in_standby      = false;
    32a0:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
	config->write_once          = false;
    32a4:	f88d 4036 	strb.w	r4, [sp, #54]	; 0x36
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    32a8:	2306      	movs	r3, #6
    32aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    32ae:	f88d 4035 	strb.w	r4, [sp, #53]	; 0x35
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    32b2:	a80a      	add	r0, sp, #40	; 0x28
    32b4:	4b3c      	ldr	r3, [pc, #240]	; (33a8 <system_clock_init+0x154>)
    32b6:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    32b8:	2005      	movs	r0, #5
    32ba:	4b3c      	ldr	r3, [pc, #240]	; (33ac <system_clock_init+0x158>)
    32bc:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    32be:	4a37      	ldr	r2, [pc, #220]	; (339c <system_clock_init+0x148>)
    32c0:	8a93      	ldrh	r3, [r2, #20]
    32c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    32c6:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    32c8:	f8ad 4016 	strh.w	r4, [sp, #22]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    32cc:	f8ad 4018 	strh.w	r4, [sp, #24]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    32d0:	f88d 401a 	strb.w	r4, [sp, #26]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    32d4:	f88d 401b 	strb.w	r4, [sp, #27]
	config->fine_value      = 0xff / 4; /* Midpoint */
    32d8:	233f      	movs	r3, #63	; 0x3f
    32da:	f8ad 301e 	strh.w	r3, [sp, #30]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    32de:	2304      	movs	r3, #4
    32e0:	f88d 3014 	strb.w	r3, [sp, #20]
	dfll_conf.on_demand      = false;
    32e4:	f88d 4015 	strb.w	r4, [sp, #21]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    32e8:	4b31      	ldr	r3, [pc, #196]	; (33b0 <system_clock_init+0x15c>)
    32ea:	681b      	ldr	r3, [r3, #0]
    32ec:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
		coarse = 0x1f;
    32ee:	2b3f      	cmp	r3, #63	; 0x3f
    32f0:	bf08      	it	eq
    32f2:	231f      	moveq	r3, #31
	}
	dfll_conf.coarse_value = coarse;
    32f4:	f88d 301c 	strb.w	r3, [sp, #28]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    32f8:	f44f 63b7 	mov.w	r3, #1464	; 0x5b8
    32fc:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    3300:	2707      	movs	r7, #7
    3302:	f88d 7020 	strb.w	r7, [sp, #32]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    3306:	233f      	movs	r3, #63	; 0x3f
    3308:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    330c:	a805      	add	r0, sp, #20
    330e:	4b29      	ldr	r3, [pc, #164]	; (33b4 <system_clock_init+0x160>)
    3310:	4798      	blx	r3
	config->run_in_standby  = false;
    3312:	f88d 4011 	strb.w	r4, [sp, #17]
	config->on_demand       = true;
    3316:	2501      	movs	r5, #1
    3318:	f88d 5012 	strb.w	r5, [sp, #18]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    331c:	a80e      	add	r0, sp, #56	; 0x38
    331e:	f800 4d28 	strb.w	r4, [r0, #-40]!
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    3322:	4b25      	ldr	r3, [pc, #148]	; (33b8 <system_clock_init+0x164>)
    3324:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    3326:	2006      	movs	r0, #6
    3328:	f8df a080 	ldr.w	sl, [pc, #128]	; 33ac <system_clock_init+0x158>
    332c:	47d0      	blx	sl


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    332e:	4b23      	ldr	r3, [pc, #140]	; (33bc <system_clock_init+0x168>)
    3330:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    3332:	9502      	str	r5, [sp, #8]
	config->high_when_disabled = false;
    3334:	f88d 4005 	strb.w	r4, [sp, #5]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    3338:	f88d 400c 	strb.w	r4, [sp, #12]
	config->output_enable      = false;
    333c:	f88d 400d 	strb.w	r4, [sp, #13]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    3340:	ae0e      	add	r6, sp, #56	; 0x38
    3342:	2305      	movs	r3, #5
    3344:	f806 3d34 	strb.w	r3, [r6, #-52]!
    3348:	4631      	mov	r1, r6
    334a:	4628      	mov	r0, r5
    334c:	f8df 9078 	ldr.w	r9, [pc, #120]	; 33c8 <system_clock_init+0x174>
    3350:	47c8      	blx	r9
    3352:	4628      	mov	r0, r5
    3354:	f8df 8074 	ldr.w	r8, [pc, #116]	; 33cc <system_clock_init+0x178>
    3358:	47c0      	blx	r8
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    335a:	f88d 5004 	strb.w	r5, [sp, #4]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    335e:	4631      	mov	r1, r6
    3360:	4620      	mov	r0, r4
    3362:	4b10      	ldr	r3, [pc, #64]	; (33a4 <system_clock_init+0x150>)
    3364:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    3366:	4620      	mov	r0, r4
    3368:	4b15      	ldr	r3, [pc, #84]	; (33c0 <system_clock_init+0x16c>)
    336a:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    336c:	4638      	mov	r0, r7
    336e:	47d0      	blx	sl
	PM->CPUSEL.reg = (uint32_t)divider;
    3370:	4b14      	ldr	r3, [pc, #80]	; (33c4 <system_clock_init+0x170>)
    3372:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    3374:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    3376:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    3378:	72dc      	strb	r4, [r3, #11]
	config->division_factor    = 1;
    337a:	9502      	str	r5, [sp, #8]
	config->high_when_disabled = false;
    337c:	f88d 4005 	strb.w	r4, [sp, #5]
	config->run_in_standby     = false;
    3380:	f88d 400c 	strb.w	r4, [sp, #12]
	config->output_enable      = false;
    3384:	f88d 400d 	strb.w	r4, [sp, #13]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    3388:	f88d 7004 	strb.w	r7, [sp, #4]
    338c:	4631      	mov	r1, r6
    338e:	4620      	mov	r0, r4
    3390:	47c8      	blx	r9
    3392:	4620      	mov	r0, r4
    3394:	47c0      	blx	r8
#endif
}
    3396:	b00e      	add	sp, #56	; 0x38
    3398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    339c:	40000800 	.word	0x40000800
    33a0:	41004000 	.word	0x41004000
    33a4:	000035d5 	.word	0x000035d5
    33a8:	000030e1 	.word	0x000030e1
    33ac:	000031c1 	.word	0x000031c1
    33b0:	00806024 	.word	0x00806024
    33b4:	0000313d 	.word	0x0000313d
    33b8:	000030bd 	.word	0x000030bd
    33bc:	000033d1 	.word	0x000033d1
    33c0:	00003555 	.word	0x00003555
    33c4:	40000400 	.word	0x40000400
    33c8:	000033f5 	.word	0x000033f5
    33cc:	00003499 	.word	0x00003499

000033d0 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    33d0:	4a06      	ldr	r2, [pc, #24]	; (33ec <system_gclk_init+0x1c>)
    33d2:	6993      	ldr	r3, [r2, #24]
    33d4:	f043 0308 	orr.w	r3, r3, #8
    33d8:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    33da:	2201      	movs	r2, #1
    33dc:	4b04      	ldr	r3, [pc, #16]	; (33f0 <system_gclk_init+0x20>)
    33de:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    33e0:	461a      	mov	r2, r3
    33e2:	7813      	ldrb	r3, [r2, #0]
    33e4:	f013 0f01 	tst.w	r3, #1
    33e8:	d1fb      	bne.n	33e2 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    33ea:	4770      	bx	lr
    33ec:	40000400 	.word	0x40000400
    33f0:	40000c00 	.word	0x40000c00

000033f4 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    33f4:	b570      	push	{r4, r5, r6, lr}
    33f6:	4606      	mov	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    33f8:	4604      	mov	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    33fa:	780d      	ldrb	r5, [r1, #0]
    33fc:	ea40 2505 	orr.w	r5, r0, r5, lsl #8

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    3400:	784b      	ldrb	r3, [r1, #1]
    3402:	b10b      	cbz	r3, 3408 <system_gclk_gen_set_config+0x14>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    3404:	f445 2580 	orr.w	r5, r5, #262144	; 0x40000
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    3408:	7a4b      	ldrb	r3, [r1, #9]
    340a:	b10b      	cbz	r3, 3410 <system_gclk_gen_set_config+0x1c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    340c:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    3410:	6848      	ldr	r0, [r1, #4]
    3412:	2801      	cmp	r0, #1
    3414:	d90e      	bls.n	3434 <system_gclk_gen_set_config+0x40>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    3416:	1e43      	subs	r3, r0, #1
    3418:	4203      	tst	r3, r0
    341a:	d12f      	bne.n	347c <system_gclk_gen_set_config+0x88>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    341c:	2802      	cmp	r0, #2
    341e:	d92b      	bls.n	3478 <system_gclk_gen_set_config+0x84>
    3420:	2302      	movs	r3, #2
    3422:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    3424:	3201      	adds	r2, #1
						mask <<= 1) {
    3426:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    3428:	4298      	cmp	r0, r3
    342a:	d8fb      	bhi.n	3424 <system_gclk_gen_set_config+0x30>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    342c:	ea46 2402 	orr.w	r4, r6, r2, lsl #8
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    3430:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    3434:	7a0b      	ldrb	r3, [r1, #8]
    3436:	b10b      	cbz	r3, 343c <system_gclk_gen_set_config+0x48>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    3438:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    343c:	4a12      	ldr	r2, [pc, #72]	; (3488 <system_gclk_gen_set_config+0x94>)
    343e:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    3440:	f013 0f80 	tst.w	r3, #128	; 0x80
    3444:	d1fb      	bne.n	343e <system_gclk_gen_set_config+0x4a>
	cpu_irq_enter_critical();
    3446:	4b11      	ldr	r3, [pc, #68]	; (348c <system_gclk_gen_set_config+0x98>)
    3448:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    344a:	4b11      	ldr	r3, [pc, #68]	; (3490 <system_gclk_gen_set_config+0x9c>)
    344c:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    344e:	4a0e      	ldr	r2, [pc, #56]	; (3488 <system_gclk_gen_set_config+0x94>)
    3450:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    3452:	f013 0f80 	tst.w	r3, #128	; 0x80
    3456:	d1fb      	bne.n	3450 <system_gclk_gen_set_config+0x5c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    3458:	4b0b      	ldr	r3, [pc, #44]	; (3488 <system_gclk_gen_set_config+0x94>)
    345a:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    345c:	461a      	mov	r2, r3
    345e:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    3460:	f013 0f80 	tst.w	r3, #128	; 0x80
    3464:	d1fb      	bne.n	345e <system_gclk_gen_set_config+0x6a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    3466:	4a08      	ldr	r2, [pc, #32]	; (3488 <system_gclk_gen_set_config+0x94>)
    3468:	6853      	ldr	r3, [r2, #4]
    346a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    346e:	431d      	orrs	r5, r3
    3470:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    3472:	4b08      	ldr	r3, [pc, #32]	; (3494 <system_gclk_gen_set_config+0xa0>)
    3474:	4798      	blx	r3
    3476:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    3478:	2200      	movs	r2, #0
    347a:	e7d7      	b.n	342c <system_gclk_gen_set_config+0x38>
			new_gendiv_config  |=
    347c:	ea46 2400 	orr.w	r4, r6, r0, lsl #8
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    3480:	f445 3500 	orr.w	r5, r5, #131072	; 0x20000
    3484:	e7d6      	b.n	3434 <system_gclk_gen_set_config+0x40>
    3486:	bf00      	nop
    3488:	40000c00 	.word	0x40000c00
    348c:	00001fa1 	.word	0x00001fa1
    3490:	40000c08 	.word	0x40000c08
    3494:	00001fdd 	.word	0x00001fdd

00003498 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    3498:	b510      	push	{r4, lr}
    349a:	4604      	mov	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    349c:	4a0a      	ldr	r2, [pc, #40]	; (34c8 <system_gclk_gen_enable+0x30>)
    349e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    34a0:	f013 0f80 	tst.w	r3, #128	; 0x80
    34a4:	d1fb      	bne.n	349e <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    34a6:	4b09      	ldr	r3, [pc, #36]	; (34cc <system_gclk_gen_enable+0x34>)
    34a8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    34aa:	4b09      	ldr	r3, [pc, #36]	; (34d0 <system_gclk_gen_enable+0x38>)
    34ac:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    34ae:	4a06      	ldr	r2, [pc, #24]	; (34c8 <system_gclk_gen_enable+0x30>)
    34b0:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    34b2:	f013 0f80 	tst.w	r3, #128	; 0x80
    34b6:	d1fb      	bne.n	34b0 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    34b8:	4a03      	ldr	r2, [pc, #12]	; (34c8 <system_gclk_gen_enable+0x30>)
    34ba:	6853      	ldr	r3, [r2, #4]
    34bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    34c0:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    34c2:	4b04      	ldr	r3, [pc, #16]	; (34d4 <system_gclk_gen_enable+0x3c>)
    34c4:	4798      	blx	r3
    34c6:	bd10      	pop	{r4, pc}
    34c8:	40000c00 	.word	0x40000c00
    34cc:	00001fa1 	.word	0x00001fa1
    34d0:	40000c04 	.word	0x40000c04
    34d4:	00001fdd 	.word	0x00001fdd

000034d8 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    34d8:	b570      	push	{r4, r5, r6, lr}
    34da:	4604      	mov	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    34dc:	4a18      	ldr	r2, [pc, #96]	; (3540 <system_gclk_gen_get_hz+0x68>)
    34de:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    34e0:	f013 0f80 	tst.w	r3, #128	; 0x80
    34e4:	d1fb      	bne.n	34de <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    34e6:	4b17      	ldr	r3, [pc, #92]	; (3544 <system_gclk_gen_get_hz+0x6c>)
    34e8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    34ea:	4b17      	ldr	r3, [pc, #92]	; (3548 <system_gclk_gen_get_hz+0x70>)
    34ec:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    34ee:	4a14      	ldr	r2, [pc, #80]	; (3540 <system_gclk_gen_get_hz+0x68>)
    34f0:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    34f2:	f013 0f80 	tst.w	r3, #128	; 0x80
    34f6:	d1fb      	bne.n	34f0 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    34f8:	4d11      	ldr	r5, [pc, #68]	; (3540 <system_gclk_gen_get_hz+0x68>)
    34fa:	6868      	ldr	r0, [r5, #4]
	uint32_t gen_input_hz = system_clock_source_get_hz(
    34fc:	f3c0 2004 	ubfx	r0, r0, #8, #5
    3500:	4b12      	ldr	r3, [pc, #72]	; (354c <system_gclk_gen_get_hz+0x74>)
    3502:	4798      	blx	r3
    3504:	4606      	mov	r6, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    3506:	4b10      	ldr	r3, [pc, #64]	; (3548 <system_gclk_gen_get_hz+0x70>)
    3508:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    350a:	686d      	ldr	r5, [r5, #4]
    350c:	f3c5 5500 	ubfx	r5, r5, #20, #1

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    3510:	3304      	adds	r3, #4
    3512:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3514:	4a0a      	ldr	r2, [pc, #40]	; (3540 <system_gclk_gen_get_hz+0x68>)
    3516:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    3518:	f013 0f80 	tst.w	r3, #128	; 0x80
    351c:	d1fb      	bne.n	3516 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    351e:	4b08      	ldr	r3, [pc, #32]	; (3540 <system_gclk_gen_get_hz+0x68>)
    3520:	689c      	ldr	r4, [r3, #8]
    3522:	f3c4 240f 	ubfx	r4, r4, #8, #16
	cpu_irq_leave_critical();
    3526:	4b0a      	ldr	r3, [pc, #40]	; (3550 <system_gclk_gen_get_hz+0x78>)
    3528:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    352a:	b925      	cbnz	r5, 3536 <system_gclk_gen_get_hz+0x5e>
    352c:	2c01      	cmp	r4, #1
    352e:	d904      	bls.n	353a <system_gclk_gen_get_hz+0x62>
		gen_input_hz /= divider;
    3530:	fbb6 f6f4 	udiv	r6, r6, r4
    3534:	e001      	b.n	353a <system_gclk_gen_get_hz+0x62>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    3536:	3401      	adds	r4, #1
    3538:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    353a:	4630      	mov	r0, r6
    353c:	bd70      	pop	{r4, r5, r6, pc}
    353e:	bf00      	nop
    3540:	40000c00 	.word	0x40000c00
    3544:	00001fa1 	.word	0x00001fa1
    3548:	40000c04 	.word	0x40000c04
    354c:	00003029 	.word	0x00003029
    3550:	00001fdd 	.word	0x00001fdd

00003554 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    3554:	b510      	push	{r4, lr}
    3556:	4604      	mov	r4, r0
	cpu_irq_enter_critical();
    3558:	4b06      	ldr	r3, [pc, #24]	; (3574 <system_gclk_chan_enable+0x20>)
    355a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    355c:	4b06      	ldr	r3, [pc, #24]	; (3578 <system_gclk_chan_enable+0x24>)
    355e:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    3560:	4a06      	ldr	r2, [pc, #24]	; (357c <system_gclk_chan_enable+0x28>)
    3562:	8853      	ldrh	r3, [r2, #2]
    3564:	b29b      	uxth	r3, r3
    3566:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    356a:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    356c:	4b04      	ldr	r3, [pc, #16]	; (3580 <system_gclk_chan_enable+0x2c>)
    356e:	4798      	blx	r3
    3570:	bd10      	pop	{r4, pc}
    3572:	bf00      	nop
    3574:	00001fa1 	.word	0x00001fa1
    3578:	40000c02 	.word	0x40000c02
    357c:	40000c00 	.word	0x40000c00
    3580:	00001fdd 	.word	0x00001fdd

00003584 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    3584:	b510      	push	{r4, lr}
    3586:	4604      	mov	r4, r0
	cpu_irq_enter_critical();
    3588:	4b0e      	ldr	r3, [pc, #56]	; (35c4 <system_gclk_chan_disable+0x40>)
    358a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    358c:	4b0e      	ldr	r3, [pc, #56]	; (35c8 <system_gclk_chan_disable+0x44>)
    358e:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    3590:	4a0e      	ldr	r2, [pc, #56]	; (35cc <system_gclk_chan_disable+0x48>)
    3592:	8851      	ldrh	r1, [r2, #2]
    3594:	f3c1 2103 	ubfx	r1, r1, #8, #4
	GCLK->CLKCTRL.bit.GEN = 0;
    3598:	8853      	ldrh	r3, [r2, #2]
    359a:	f36f 230b 	bfc	r3, #8, #4
    359e:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    35a0:	8853      	ldrh	r3, [r2, #2]
    35a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    35a6:	041b      	lsls	r3, r3, #16
    35a8:	0c1b      	lsrs	r3, r3, #16
    35aa:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    35ac:	8853      	ldrh	r3, [r2, #2]
    35ae:	f413 4f80 	tst.w	r3, #16384	; 0x4000
    35b2:	d1fb      	bne.n	35ac <system_gclk_chan_disable+0x28>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    35b4:	4b05      	ldr	r3, [pc, #20]	; (35cc <system_gclk_chan_disable+0x48>)
    35b6:	885a      	ldrh	r2, [r3, #2]
    35b8:	f361 220b 	bfi	r2, r1, #8, #4
    35bc:	805a      	strh	r2, [r3, #2]
	cpu_irq_leave_critical();
    35be:	4b04      	ldr	r3, [pc, #16]	; (35d0 <system_gclk_chan_disable+0x4c>)
    35c0:	4798      	blx	r3
    35c2:	bd10      	pop	{r4, pc}
    35c4:	00001fa1 	.word	0x00001fa1
    35c8:	40000c02 	.word	0x40000c02
    35cc:	40000c00 	.word	0x40000c00
    35d0:	00001fdd 	.word	0x00001fdd

000035d4 <system_gclk_chan_set_config>:
{
    35d4:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    35d6:	780c      	ldrb	r4, [r1, #0]
    35d8:	ea40 2404 	orr.w	r4, r0, r4, lsl #8
	system_gclk_chan_disable(channel);
    35dc:	4b02      	ldr	r3, [pc, #8]	; (35e8 <system_gclk_chan_set_config+0x14>)
    35de:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    35e0:	b2a4      	uxth	r4, r4
    35e2:	4b02      	ldr	r3, [pc, #8]	; (35ec <system_gclk_chan_set_config+0x18>)
    35e4:	805c      	strh	r4, [r3, #2]
    35e6:	bd10      	pop	{r4, pc}
    35e8:	00003585 	.word	0x00003585
    35ec:	40000c00 	.word	0x40000c00

000035f0 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    35f0:	b510      	push	{r4, lr}
    35f2:	4604      	mov	r4, r0
	cpu_irq_enter_critical();
    35f4:	4b06      	ldr	r3, [pc, #24]	; (3610 <system_gclk_chan_get_hz+0x20>)
    35f6:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    35f8:	4b06      	ldr	r3, [pc, #24]	; (3614 <system_gclk_chan_get_hz+0x24>)
    35fa:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    35fc:	3b02      	subs	r3, #2
    35fe:	885c      	ldrh	r4, [r3, #2]
    3600:	f3c4 2403 	ubfx	r4, r4, #8, #4
	cpu_irq_leave_critical();
    3604:	4b04      	ldr	r3, [pc, #16]	; (3618 <system_gclk_chan_get_hz+0x28>)
    3606:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    3608:	4620      	mov	r0, r4
    360a:	4b04      	ldr	r3, [pc, #16]	; (361c <system_gclk_chan_get_hz+0x2c>)
    360c:	4798      	blx	r3
}
    360e:	bd10      	pop	{r4, pc}
    3610:	00001fa1 	.word	0x00001fa1
    3614:	40000c02 	.word	0x40000c02
    3618:	00001fdd 	.word	0x00001fdd
    361c:	000034d9 	.word	0x000034d9

00003620 <_system_pinmux_config>:

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    3620:	78d3      	ldrb	r3, [r2, #3]
    3622:	2b00      	cmp	r3, #0
    3624:	d137      	bne.n	3696 <_system_pinmux_config+0x76>
{
    3626:	b410      	push	{r4}
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    3628:	7813      	ldrb	r3, [r2, #0]
    362a:	2b80      	cmp	r3, #128	; 0x80
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    362c:	bf1a      	itte	ne
    362e:	061b      	lslne	r3, r3, #24
    3630:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
	uint32_t pin_cfg = 0;
    3634:	2300      	moveq	r3, #0
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    3636:	7854      	ldrb	r4, [r2, #1]
    3638:	f014 0ffd 	tst.w	r4, #253	; 0xfd
    363c:	d104      	bne.n	3648 <_system_pinmux_config+0x28>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    363e:	7894      	ldrb	r4, [r2, #2]
    3640:	bb1c      	cbnz	r4, 368a <_system_pinmux_config+0x6a>
			pin_cfg |= PORT_WRCONFIG_INEN;
    3642:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    3646:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3648:	7854      	ldrb	r4, [r2, #1]
    364a:	3c01      	subs	r4, #1
    364c:	b2e4      	uxtb	r4, r4
    364e:	2c01      	cmp	r4, #1
    3650:	d91e      	bls.n	3690 <_system_pinmux_config+0x70>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    3652:	b28c      	uxth	r4, r1

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    3654:	f044 44a0 	orr.w	r4, r4, #1342177280	; 0x50000000
    3658:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    365a:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    365c:	ea43 4411 	orr.w	r4, r3, r1, lsr #16
    3660:	f044 4450 	orr.w	r4, r4, #3489660928	; 0xd0000000
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3664:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    3666:	78d4      	ldrb	r4, [r2, #3]
    3668:	b96c      	cbnz	r4, 3686 <_system_pinmux_config+0x66>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    366a:	f413 2f80 	tst.w	r3, #262144	; 0x40000
    366e:	d004      	beq.n	367a <_system_pinmux_config+0x5a>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    3670:	7893      	ldrb	r3, [r2, #2]
    3672:	2b01      	cmp	r3, #1
				port->OUTSET.reg = pin_mask;
    3674:	bf0c      	ite	eq
    3676:	6181      	streq	r1, [r0, #24]
			} else {
				port->OUTCLR.reg = pin_mask;
    3678:	6141      	strne	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    367a:	7853      	ldrb	r3, [r2, #1]
    367c:	3b01      	subs	r3, #1
    367e:	b2db      	uxtb	r3, r3
    3680:	2b01      	cmp	r3, #1
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    3682:	bf98      	it	ls
    3684:	6081      	strls	r1, [r0, #8]
		}
	}
}
    3686:	bc10      	pop	{r4}
    3688:	4770      	bx	lr
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    368a:	f443 23c0 	orr.w	r3, r3, #393216	; 0x60000
    368e:	e7da      	b.n	3646 <_system_pinmux_config+0x26>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    3690:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    3694:	e7dd      	b.n	3652 <_system_pinmux_config+0x32>
		port->DIRCLR.reg = pin_mask;
    3696:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    3698:	b28b      	uxth	r3, r1
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    369a:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    369e:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    36a0:	0c0b      	lsrs	r3, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    36a2:	f043 4350 	orr.w	r3, r3, #3489660928	; 0xd0000000
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    36a6:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    36a8:	78d3      	ldrb	r3, [r2, #3]
    36aa:	b933      	cbnz	r3, 36ba <_system_pinmux_config+0x9a>
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    36ac:	7853      	ldrb	r3, [r2, #1]
    36ae:	3b01      	subs	r3, #1
    36b0:	b2db      	uxtb	r3, r3
    36b2:	2b01      	cmp	r3, #1
    36b4:	d8e8      	bhi.n	3688 <_system_pinmux_config+0x68>
			port->DIRSET.reg = pin_mask;
    36b6:	6081      	str	r1, [r0, #8]
    36b8:	4770      	bx	lr
    36ba:	4770      	bx	lr

000036bc <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    36bc:	b508      	push	{r3, lr}
    36be:	460a      	mov	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    36c0:	09c3      	lsrs	r3, r0, #7
    36c2:	d10d      	bne.n	36e0 <system_pinmux_pin_set_config+0x24>
		return &(ports[port_index]->Group[group_index]);
    36c4:	0943      	lsrs	r3, r0, #5
    36c6:	01db      	lsls	r3, r3, #7
    36c8:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    36cc:	f503 4388 	add.w	r3, r3, #17408	; 0x4400
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    36d0:	f000 001f 	and.w	r0, r0, #31

	_system_pinmux_config(port, pin_mask, config);
    36d4:	2101      	movs	r1, #1
    36d6:	4081      	lsls	r1, r0
    36d8:	4618      	mov	r0, r3
    36da:	4b02      	ldr	r3, [pc, #8]	; (36e4 <system_pinmux_pin_set_config+0x28>)
    36dc:	4798      	blx	r3
    36de:	bd08      	pop	{r3, pc}
	} else {
		Assert(false);
		return NULL;
    36e0:	2300      	movs	r3, #0
    36e2:	e7f5      	b.n	36d0 <system_pinmux_pin_set_config+0x14>
    36e4:	00003621 	.word	0x00003621

000036e8 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    36e8:	4770      	bx	lr
	...

000036ec <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    36ec:	b508      	push	{r3, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    36ee:	4b05      	ldr	r3, [pc, #20]	; (3704 <system_init+0x18>)
    36f0:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    36f2:	4b05      	ldr	r3, [pc, #20]	; (3708 <system_init+0x1c>)
    36f4:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    36f6:	4b05      	ldr	r3, [pc, #20]	; (370c <system_init+0x20>)
    36f8:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    36fa:	4b05      	ldr	r3, [pc, #20]	; (3710 <system_init+0x24>)
    36fc:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    36fe:	4b05      	ldr	r3, [pc, #20]	; (3714 <system_init+0x28>)
    3700:	4798      	blx	r3
    3702:	bd08      	pop	{r3, pc}
    3704:	00003255 	.word	0x00003255
    3708:	00002009 	.word	0x00002009
    370c:	000036e9 	.word	0x000036e9
    3710:	000036e9 	.word	0x000036e9
    3714:	000036e9 	.word	0x000036e9

00003718 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    3718:	e7fe      	b.n	3718 <Dummy_Handler>
	...

0000371c <Reset_Handler>:
{
    371c:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
    371e:	4b27      	ldr	r3, [pc, #156]	; (37bc <Reset_Handler+0xa0>)
    3720:	4a27      	ldr	r2, [pc, #156]	; (37c0 <Reset_Handler+0xa4>)
    3722:	429a      	cmp	r2, r3
    3724:	d010      	beq.n	3748 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
    3726:	4b27      	ldr	r3, [pc, #156]	; (37c4 <Reset_Handler+0xa8>)
    3728:	4a24      	ldr	r2, [pc, #144]	; (37bc <Reset_Handler+0xa0>)
    372a:	429a      	cmp	r2, r3
    372c:	d20c      	bcs.n	3748 <Reset_Handler+0x2c>
    372e:	3b01      	subs	r3, #1
    3730:	1a9b      	subs	r3, r3, r2
    3732:	f023 0303 	bic.w	r3, r3, #3
    3736:	3304      	adds	r3, #4
    3738:	4413      	add	r3, r2
    373a:	4921      	ldr	r1, [pc, #132]	; (37c0 <Reset_Handler+0xa4>)
                        *pDest++ = *pSrc++;
    373c:	f851 0b04 	ldr.w	r0, [r1], #4
    3740:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
    3744:	429a      	cmp	r2, r3
    3746:	d1f9      	bne.n	373c <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
    3748:	4b1f      	ldr	r3, [pc, #124]	; (37c8 <Reset_Handler+0xac>)
    374a:	4a20      	ldr	r2, [pc, #128]	; (37cc <Reset_Handler+0xb0>)
    374c:	429a      	cmp	r2, r3
    374e:	d20a      	bcs.n	3766 <Reset_Handler+0x4a>
    3750:	3b01      	subs	r3, #1
    3752:	1a9b      	subs	r3, r3, r2
    3754:	f023 0303 	bic.w	r3, r3, #3
    3758:	3304      	adds	r3, #4
    375a:	4413      	add	r3, r2
                *pDest++ = 0;
    375c:	2100      	movs	r1, #0
    375e:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
    3762:	4293      	cmp	r3, r2
    3764:	d1fb      	bne.n	375e <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    3766:	4a1a      	ldr	r2, [pc, #104]	; (37d0 <Reset_Handler+0xb4>)
    3768:	4b1a      	ldr	r3, [pc, #104]	; (37d4 <Reset_Handler+0xb8>)
    376a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    376e:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    3770:	2202      	movs	r2, #2
    3772:	4b19      	ldr	r3, [pc, #100]	; (37d8 <Reset_Handler+0xbc>)
    3774:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    3778:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
    377c:	78d9      	ldrb	r1, [r3, #3]
    377e:	f362 0101 	bfi	r1, r2, #0, #2
    3782:	70d9      	strb	r1, [r3, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    3784:	78d9      	ldrb	r1, [r3, #3]
    3786:	f362 0183 	bfi	r1, r2, #2, #2
    378a:	70d9      	strb	r1, [r3, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    378c:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
    3790:	7b99      	ldrb	r1, [r3, #14]
    3792:	f362 1105 	bfi	r1, r2, #4, #2
    3796:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    3798:	7b99      	ldrb	r1, [r3, #14]
    379a:	f362 0183 	bfi	r1, r2, #2, #2
    379e:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    37a0:	7b99      	ldrb	r1, [r3, #14]
    37a2:	f362 0101 	bfi	r1, r2, #0, #2
    37a6:	7399      	strb	r1, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    37a8:	4a0c      	ldr	r2, [pc, #48]	; (37dc <Reset_Handler+0xc0>)
    37aa:	6853      	ldr	r3, [r2, #4]
    37ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    37b0:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    37b2:	4b0b      	ldr	r3, [pc, #44]	; (37e0 <Reset_Handler+0xc4>)
    37b4:	4798      	blx	r3
        main();
    37b6:	4b0b      	ldr	r3, [pc, #44]	; (37e4 <Reset_Handler+0xc8>)
    37b8:	4798      	blx	r3
    37ba:	e7fe      	b.n	37ba <Reset_Handler+0x9e>
    37bc:	20000000 	.word	0x20000000
    37c0:	00008708 	.word	0x00008708
    37c4:	20000210 	.word	0x20000210
    37c8:	20003828 	.word	0x20003828
    37cc:	20000400 	.word	0x20000400
    37d0:	e000ed00 	.word	0xe000ed00
    37d4:	00000000 	.word	0x00000000
    37d8:	41007000 	.word	0x41007000
    37dc:	41004000 	.word	0x41004000
    37e0:	00004edd 	.word	0x00004edd
    37e4:	00004e11 	.word	0x00004e11

000037e8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    37e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
    37ec:	b980      	cbnz	r0, 3810 <_read+0x28>
    37ee:	460c      	mov	r4, r1
    37f0:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
    37f2:	2a00      	cmp	r2, #0
    37f4:	dd0f      	ble.n	3816 <_read+0x2e>
    37f6:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    37f8:	4e08      	ldr	r6, [pc, #32]	; (381c <_read+0x34>)
    37fa:	4d09      	ldr	r5, [pc, #36]	; (3820 <_read+0x38>)
    37fc:	6830      	ldr	r0, [r6, #0]
    37fe:	4621      	mov	r1, r4
    3800:	682b      	ldr	r3, [r5, #0]
    3802:	4798      	blx	r3
		ptr++;
    3804:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    3806:	42bc      	cmp	r4, r7
    3808:	d1f8      	bne.n	37fc <_read+0x14>
		nChars++;
	}
	return nChars;
}
    380a:	4640      	mov	r0, r8
    380c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
    3810:	f04f 38ff 	mov.w	r8, #4294967295
    3814:	e7f9      	b.n	380a <_read+0x22>
	for (; len > 0; --len) {
    3816:	4680      	mov	r8, r0
    3818:	e7f7      	b.n	380a <_read+0x22>
    381a:	bf00      	nop
    381c:	200005b0 	.word	0x200005b0
    3820:	200005a8 	.word	0x200005a8

00003824 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    3824:	3801      	subs	r0, #1
    3826:	2802      	cmp	r0, #2
    3828:	d815      	bhi.n	3856 <_write+0x32>
{
    382a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    382e:	460e      	mov	r6, r1
    3830:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
    3832:	b19a      	cbz	r2, 385c <_write+0x38>
    3834:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
    3836:	f8df 8038 	ldr.w	r8, [pc, #56]	; 3870 <_write+0x4c>
    383a:	4f0c      	ldr	r7, [pc, #48]	; (386c <_write+0x48>)
    383c:	f8d8 0000 	ldr.w	r0, [r8]
    3840:	f815 1b01 	ldrb.w	r1, [r5], #1
    3844:	683b      	ldr	r3, [r7, #0]
    3846:	4798      	blx	r3
    3848:	2800      	cmp	r0, #0
    384a:	db0a      	blt.n	3862 <_write+0x3e>
    384c:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
    384e:	3c01      	subs	r4, #1
    3850:	d1f4      	bne.n	383c <_write+0x18>
    3852:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
    3856:	f04f 30ff 	mov.w	r0, #4294967295
    385a:	4770      	bx	lr
	for (; len != 0; --len) {
    385c:	4610      	mov	r0, r2
    385e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
    3862:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
    3866:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    386a:	bf00      	nop
    386c:	200005ac 	.word	0x200005ac
    3870:	200005b0 	.word	0x200005b0

00003874 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    3874:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    3876:	4a06      	ldr	r2, [pc, #24]	; (3890 <_sbrk+0x1c>)
    3878:	6812      	ldr	r2, [r2, #0]
    387a:	b122      	cbz	r2, 3886 <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    387c:	4a04      	ldr	r2, [pc, #16]	; (3890 <_sbrk+0x1c>)
    387e:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    3880:	4403      	add	r3, r0
    3882:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    3884:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    3886:	4903      	ldr	r1, [pc, #12]	; (3894 <_sbrk+0x20>)
    3888:	4a01      	ldr	r2, [pc, #4]	; (3890 <_sbrk+0x1c>)
    388a:	6011      	str	r1, [r2, #0]
    388c:	e7f6      	b.n	387c <_sbrk+0x8>
    388e:	bf00      	nop
    3890:	200004dc 	.word	0x200004dc
    3894:	20005828 	.word	0x20005828

00003898 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    3898:	f04f 30ff 	mov.w	r0, #4294967295
    389c:	4770      	bx	lr

0000389e <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    389e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    38a2:	604b      	str	r3, [r1, #4]

	return 0;
}
    38a4:	2000      	movs	r0, #0
    38a6:	4770      	bx	lr

000038a8 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    38a8:	2001      	movs	r0, #1
    38aa:	4770      	bx	lr

000038ac <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    38ac:	2000      	movs	r0, #0
    38ae:	4770      	bx	lr

000038b0 <drawChar>:
originModeState originMode = ABSOLUTE;



void drawChar(uint8_t character)
{
    38b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    38b4:	b0e5      	sub	sp, #404	; 0x194
    38b6:	4606      	mov	r6, r0

	uint16_t x = xCharPos;
    38b8:	4b5f      	ldr	r3, [pc, #380]	; (3a38 <drawChar+0x188>)
    38ba:	881b      	ldrh	r3, [r3, #0]
	uint16_t y = yCharPos;
    38bc:	4a5f      	ldr	r2, [pc, #380]	; (3a3c <drawChar+0x18c>)
    38be:	8812      	ldrh	r2, [r2, #0]
	
	uint16_t tempForeground;
	uint16_t tempBackground;
	
	uint32_t tempColor = consoleColors[x][y];
    38c0:	0059      	lsls	r1, r3, #1
    38c2:	18c8      	adds	r0, r1, r3
    38c4:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    38c8:	4c5d      	ldr	r4, [pc, #372]	; (3a40 <drawChar+0x190>)
    38ca:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
	
	tempForeground = (tempColor >> 16);
    38ce:	0c25      	lsrs	r5, r4, #16
	tempBackground = consoleColors[x][y] & 0xFFFF;
    38d0:	b2a4      	uxth	r4, r4
	
	
	consoleDisplay[x][y] = character;
    38d2:	4419      	add	r1, r3
    38d4:	485b      	ldr	r0, [pc, #364]	; (3a44 <drawChar+0x194>)
    38d6:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    38da:	548e      	strb	r6, [r1, r2]
	
	uint8_t displayFont[10][20];
	uint8_t tempFontStorage[200];
	uint8_t k = 0;
	
	REG_PORT_OUTCLR1 = LCD_CS;
    38dc:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    38e0:	4959      	ldr	r1, [pc, #356]	; (3a48 <drawChar+0x198>)
    38e2:	6008      	str	r0, [r1, #0]
	setXY(x*10,y*20,x*10+9,y*20+19);
    38e4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    38e8:	0058      	lsls	r0, r3, #1
    38ea:	b280      	uxth	r0, r0
    38ec:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    38f0:	0091      	lsls	r1, r2, #2
    38f2:	b289      	uxth	r1, r1
    38f4:	f101 0313 	add.w	r3, r1, #19
    38f8:	f100 0209 	add.w	r2, r0, #9
    38fc:	b29b      	uxth	r3, r3
    38fe:	b292      	uxth	r2, r2
    3900:	4f52      	ldr	r7, [pc, #328]	; (3a4c <drawChar+0x19c>)
    3902:	47b8      	blx	r7
    3904:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    3908:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    390c:	4b50      	ldr	r3, [pc, #320]	; (3a50 <drawChar+0x1a0>)
    390e:	eb06 0c03 	add.w	ip, r6, r3
	uint8_t k = 0;
    3912:	2600      	movs	r6, #0
			{
				tempFontStorage[k] = 0xFF;
			}
			else
			{
				tempFontStorage[k] = 0x00;
    3914:	46b6      	mov	lr, r6
				tempFontStorage[k] = 0xFF;
    3916:	27ff      	movs	r7, #255	; 0xff
    3918:	e003      	b.n	3922 <drawChar+0x72>
    391a:	3608      	adds	r6, #8
    391c:	b2f6      	uxtb	r6, r6
	for(uint16_t i=0; i <= 24; i++)
    391e:	2ec8      	cmp	r6, #200	; 0xc8
    3920:	d013      	beq.n	394a <drawChar+0x9a>
			if((CodePage437[character][i]&(1<<(7-j)))!=0)
    3922:	f81c 0f01 	ldrb.w	r0, [ip, #1]!
    3926:	4633      	mov	r3, r6
    3928:	2207      	movs	r2, #7
    392a:	fa40 f102 	asr.w	r1, r0, r2
    392e:	f011 0f01 	tst.w	r1, #1
				tempFontStorage[k] = 0xFF;
    3932:	bf14      	ite	ne
    3934:	f80d 7003 	strbne.w	r7, [sp, r3]
				tempFontStorage[k] = 0x00;
    3938:	f80d e003 	strbeq.w	lr, [sp, r3]
			}
			k++;
    393c:	3301      	adds	r3, #1
    393e:	b2db      	uxtb	r3, r3
    3940:	3a01      	subs	r2, #1
		for(int j=0;j<8;j++)
    3942:	f1b2 3fff 	cmp.w	r2, #4294967295
    3946:	d1f0      	bne.n	392a <drawChar+0x7a>
    3948:	e7e7      	b.n	391a <drawChar+0x6a>
    394a:	f04f 0e00 	mov.w	lr, #0
			{
				displayFont[i][j] = 0xFF;	
			}
			else
			{
				displayFont[i][j] = 0x00;
    394e:	4676      	mov	r6, lr
				displayFont[i][j] = 0xFF;	
    3950:	27ff      	movs	r7, #255	; 0xff
    3952:	fa5f f38e 	uxtb.w	r3, lr
    3956:	aa32      	add	r2, sp, #200	; 0xc8
    3958:	4472      	add	r2, lr
    395a:	f103 0014 	add.w	r0, r3, #20
    395e:	b2c0      	uxtb	r0, r0
			if(tempFontStorage[k] == 0xFF)
    3960:	f81d 1003 	ldrb.w	r1, [sp, r3]
    3964:	29ff      	cmp	r1, #255	; 0xff
				displayFont[i][j] = 0xFF;	
    3966:	bf0c      	ite	eq
    3968:	7017      	strbeq	r7, [r2, #0]
				displayFont[i][j] = 0x00;
    396a:	7016      	strbne	r6, [r2, #0]
			}
			k++;
    396c:	3301      	adds	r3, #1
    396e:	b2db      	uxtb	r3, r3
    3970:	3201      	adds	r2, #1
		for(uint8_t j = 0; j <= 19 ; j++)
    3972:	4283      	cmp	r3, r0
    3974:	d1f4      	bne.n	3960 <drawChar+0xb0>
    3976:	f10e 0e14 	add.w	lr, lr, #20
	for(uint8_t i = 0; i <= 9 ; i++)
    397a:	f1be 0fc8 	cmp.w	lr, #200	; 0xc8
    397e:	d1e8      	bne.n	3952 <drawChar+0xa2>
		}
	}
	
	//process displayFont if it is bold, first bit of consoleSGR
	if(BitVal(consoleSGR[xCharPos][yCharPos],1) == 1)
    3980:	4b2d      	ldr	r3, [pc, #180]	; (3a38 <drawChar+0x188>)
    3982:	881b      	ldrh	r3, [r3, #0]
    3984:	4a2d      	ldr	r2, [pc, #180]	; (3a3c <drawChar+0x18c>)
    3986:	8811      	ldrh	r1, [r2, #0]
    3988:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    398c:	4a31      	ldr	r2, [pc, #196]	; (3a54 <drawChar+0x1a4>)
    398e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    3992:	5c5f      	ldrb	r7, [r3, r1]
    3994:	f017 0f02 	tst.w	r7, #2
    3998:	d010      	beq.n	39bc <drawChar+0x10c>
    399a:	f20d 117b 	addw	r1, sp, #379	; 0x17b
    399e:	f10d 06c7 	add.w	r6, sp, #199	; 0xc7
		{
			for(uint8_t j = 0; j <= 19 ; j++)
			{
				if(displayFont[i-1][j] == 0xFF)
				{
					displayFont[i][j] = 0xFF;
    39a2:	20ff      	movs	r0, #255	; 0xff
    39a4:	f1a1 0314 	sub.w	r3, r1, #20
				if(displayFont[i-1][j] == 0xFF)
    39a8:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    39ac:	2aff      	cmp	r2, #255	; 0xff
					displayFont[i][j] = 0xFF;
    39ae:	bf08      	it	eq
    39b0:	7518      	strbeq	r0, [r3, #20]
			for(uint8_t j = 0; j <= 19 ; j++)
    39b2:	428b      	cmp	r3, r1
    39b4:	d1f8      	bne.n	39a8 <drawChar+0xf8>
    39b6:	3914      	subs	r1, #20
		for(uint8_t i = 9; i >= 1 ; i--)
    39b8:	42b1      	cmp	r1, r6
    39ba:	d1f3      	bne.n	39a4 <drawChar+0xf4>
			}
		}
	}
	
	//process displayfont if underscore, fourth bit of consoleSGR
	if(BitVal(consoleSGR[xCharPos][yCharPos],4) == 1)
    39bc:	f017 0f10 	tst.w	r7, #16
    39c0:	d008      	beq.n	39d4 <drawChar+0x124>
    39c2:	f20d 137b 	addw	r3, sp, #379	; 0x17b
    39c6:	f20d 1185 	addw	r1, sp, #389	; 0x185
	{
		for(int i = 0 ; i <= 9 ; i++)
		{
			displayFont[9][i] = 0xFF;
    39ca:	22ff      	movs	r2, #255	; 0xff
    39cc:	f803 2f01 	strb.w	r2, [r3, #1]!
		for(int i = 0 ; i <= 9 ; i++)
    39d0:	428b      	cmp	r3, r1
    39d2:	d1fb      	bne.n	39cc <drawChar+0x11c>
		}
	}
	
	//Process inverse video, compare 7th bit of consoleSGR
	if(BitVal(consoleSGR[xCharPos][yCharPos],7) == 0)
    39d4:	09fb      	lsrs	r3, r7, #7
    39d6:	d014      	beq.n	3a02 <drawChar+0x152>
    39d8:	f10d 07db 	add.w	r7, sp, #219	; 0xdb
    39dc:	f20d 19a3 	addw	r9, sp, #419	; 0x1a3
				{
					setPixel(tempForeground);
				}
				else
				{
					setPixel(tempBackground);
    39e0:	f8df 8078 	ldr.w	r8, [pc, #120]	; 3a5c <drawChar+0x1ac>
    39e4:	f1a7 0614 	sub.w	r6, r7, #20
				if(displayFont[i][j] != 0xFF)
    39e8:	f816 3f01 	ldrb.w	r3, [r6, #1]!
    39ec:	2bff      	cmp	r3, #255	; 0xff
					setPixel(tempForeground);
    39ee:	bf14      	ite	ne
    39f0:	4628      	movne	r0, r5
					setPixel(tempBackground);
    39f2:	4620      	moveq	r0, r4
    39f4:	47c0      	blx	r8
			for(uint8_t j = 0; j <= 19 ; j++)
    39f6:	42b7      	cmp	r7, r6
    39f8:	d1f6      	bne.n	39e8 <drawChar+0x138>
    39fa:	3714      	adds	r7, #20
		for(uint8_t i = 0; i <= 9 ; i++)
    39fc:	45b9      	cmp	r9, r7
    39fe:	d1f1      	bne.n	39e4 <drawChar+0x134>
    3a00:	e013      	b.n	3a2a <drawChar+0x17a>
    3a02:	f10d 07db 	add.w	r7, sp, #219	; 0xdb
    3a06:	f20d 19a3 	addw	r9, sp, #419	; 0x1a3
					setPixel(tempBackground);
    3a0a:	f8df 8050 	ldr.w	r8, [pc, #80]	; 3a5c <drawChar+0x1ac>
    3a0e:	f1a7 0614 	sub.w	r6, r7, #20
				if(displayFont[i][j] == 0xFF)
    3a12:	f816 3f01 	ldrb.w	r3, [r6, #1]!
    3a16:	2bff      	cmp	r3, #255	; 0xff
					setPixel(tempForeground);
    3a18:	bf0c      	ite	eq
    3a1a:	4628      	moveq	r0, r5
					setPixel(tempBackground);
    3a1c:	4620      	movne	r0, r4
    3a1e:	47c0      	blx	r8
			for(uint8_t j = 0; j <= 19 ; j++)
    3a20:	42be      	cmp	r6, r7
    3a22:	d1f6      	bne.n	3a12 <drawChar+0x162>
    3a24:	3714      	adds	r7, #20
		for(uint8_t i = 0; i <= 9 ; i++)
    3a26:	45b9      	cmp	r9, r7
    3a28:	d1f1      	bne.n	3a0e <drawChar+0x15e>
				}
			}
		}		
	}
	
	REG_PORT_OUTSET1 = LCD_CS;
    3a2a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    3a2e:	4b0a      	ldr	r3, [pc, #40]	; (3a58 <drawChar+0x1a8>)
    3a30:	601a      	str	r2, [r3, #0]
}
    3a32:	b065      	add	sp, #404	; 0x194
    3a34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3a38:	200004e2 	.word	0x200004e2
    3a3c:	200004e4 	.word	0x200004e4
    3a40:	200014ec 	.word	0x200014ec
    3a44:	200005ec 	.word	0x200005ec
    3a48:	41004494 	.word	0x41004494
    3a4c:	000045e1 	.word	0x000045e1
    3a50:	00006a5b 	.word	0x00006a5b
    3a54:	20000d6c 	.word	0x20000d6c
    3a58:	41004498 	.word	0x41004498
    3a5c:	0000470d 	.word	0x0000470d

00003a60 <scrollDown>:

void scrollDown(uint8_t topLine)
{
    3a60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3a64:	b084      	sub	sp, #16
	char tempCharacter;
		
	uint8_t tempCursorx;
	uint8_t tempCursory;
	
	tempCursorx = xCharPos;
    3a66:	4b60      	ldr	r3, [pc, #384]	; (3be8 <scrollDown+0x188>)
    3a68:	f8b3 a000 	ldrh.w	sl, [r3]
	tempCursory = yCharPos;
    3a6c:	4b5f      	ldr	r3, [pc, #380]	; (3bec <scrollDown+0x18c>)
    3a6e:	f8b3 9000 	ldrh.w	r9, [r3]
	
	if(yCharPos == topMargin)
    3a72:	4b5f      	ldr	r3, [pc, #380]	; (3bf0 <scrollDown+0x190>)
    3a74:	781b      	ldrb	r3, [r3, #0]
    3a76:	4599      	cmp	r9, r3
    3a78:	d006      	beq.n	3a88 <scrollDown+0x28>
		yCharPos = tempCursory;
		
	}
	else
	{
		if(yCharPos > 0)
    3a7a:	f1b9 0f00 	cmp.w	r9, #0
    3a7e:	f040 809c 	bne.w	3bba <scrollDown+0x15a>
			tempCharacter = consoleDisplay[xCharPos][yCharPos];
			drawChar(tempCharacter);
			
		}
	}
}
    3a82:	b004      	add	sp, #16
    3a84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3a88:	4680      	mov	r8, r0
		for(volatile int y = bottomMargin-1 ; y > topLine ; y--)
    3a8a:	4b5a      	ldr	r3, [pc, #360]	; (3bf4 <scrollDown+0x194>)
    3a8c:	781b      	ldrb	r3, [r3, #0]
    3a8e:	3b01      	subs	r3, #1
    3a90:	9301      	str	r3, [sp, #4]
    3a92:	4607      	mov	r7, r0
    3a94:	9b01      	ldr	r3, [sp, #4]
    3a96:	4298      	cmp	r0, r3
    3a98:	da53      	bge.n	3b42 <scrollDown+0xe2>
				consoleDisplay[x][y] = consoleDisplay[x][y-1];				
    3a9a:	4c57      	ldr	r4, [pc, #348]	; (3bf8 <scrollDown+0x198>)
				consoleColors[x][y] = consoleColors[x][y-1];
    3a9c:	4e57      	ldr	r6, [pc, #348]	; (3bfc <scrollDown+0x19c>)
				consoleSGR[x][y] = consoleSGR[x][y-1];
    3a9e:	4d58      	ldr	r5, [pc, #352]	; (3c00 <scrollDown+0x1a0>)
			for(volatile int x = 0 ; x <= 79 ; x++)
    3aa0:	2300      	movs	r3, #0
    3aa2:	9302      	str	r3, [sp, #8]
    3aa4:	9b02      	ldr	r3, [sp, #8]
    3aa6:	2b4f      	cmp	r3, #79	; 0x4f
    3aa8:	dc45      	bgt.n	3b36 <scrollDown+0xd6>
				consoleDisplay[x][y] = consoleDisplay[x][y-1];				
    3aaa:	9a02      	ldr	r2, [sp, #8]
    3aac:	9901      	ldr	r1, [sp, #4]
    3aae:	9b02      	ldr	r3, [sp, #8]
    3ab0:	9801      	ldr	r0, [sp, #4]
    3ab2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3ab6:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    3aba:	4403      	add	r3, r0
    3abc:	f813 3c01 	ldrb.w	r3, [r3, #-1]
    3ac0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    3ac4:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    3ac8:	5453      	strb	r3, [r2, r1]
				consoleColors[x][y] = consoleColors[x][y-1];
    3aca:	9a02      	ldr	r2, [sp, #8]
    3acc:	9801      	ldr	r0, [sp, #4]
    3ace:	9902      	ldr	r1, [sp, #8]
    3ad0:	9b01      	ldr	r3, [sp, #4]
    3ad2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    3ad6:	3b01      	subs	r3, #1
    3ad8:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    3adc:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
    3ae0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    3ae4:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
    3ae8:	f846 3022 	str.w	r3, [r6, r2, lsl #2]
				consoleSGR[x][y] = consoleSGR[x][y-1];
    3aec:	9a02      	ldr	r2, [sp, #8]
    3aee:	9901      	ldr	r1, [sp, #4]
    3af0:	9b02      	ldr	r3, [sp, #8]
    3af2:	9801      	ldr	r0, [sp, #4]
    3af4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3af8:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    3afc:	4403      	add	r3, r0
    3afe:	f813 3c01 	ldrb.w	r3, [r3, #-1]
    3b02:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    3b06:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
    3b0a:	5453      	strb	r3, [r2, r1]
				xCharPos = x;
    3b0c:	9a02      	ldr	r2, [sp, #8]
    3b0e:	4b36      	ldr	r3, [pc, #216]	; (3be8 <scrollDown+0x188>)
    3b10:	801a      	strh	r2, [r3, #0]
				yCharPos = y;
    3b12:	9a01      	ldr	r2, [sp, #4]
    3b14:	4b35      	ldr	r3, [pc, #212]	; (3bec <scrollDown+0x18c>)
    3b16:	801a      	strh	r2, [r3, #0]
				drawChar(consoleDisplay[x][y]);	
    3b18:	9b02      	ldr	r3, [sp, #8]
    3b1a:	9a01      	ldr	r2, [sp, #4]
    3b1c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3b20:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    3b24:	5c98      	ldrb	r0, [r3, r2]
    3b26:	4b37      	ldr	r3, [pc, #220]	; (3c04 <scrollDown+0x1a4>)
    3b28:	4798      	blx	r3
			for(volatile int x = 0 ; x <= 79 ; x++)
    3b2a:	9b02      	ldr	r3, [sp, #8]
    3b2c:	3301      	adds	r3, #1
    3b2e:	9302      	str	r3, [sp, #8]
    3b30:	9b02      	ldr	r3, [sp, #8]
    3b32:	2b4f      	cmp	r3, #79	; 0x4f
    3b34:	ddb9      	ble.n	3aaa <scrollDown+0x4a>
		for(volatile int y = bottomMargin-1 ; y > topLine ; y--)
    3b36:	9b01      	ldr	r3, [sp, #4]
    3b38:	3b01      	subs	r3, #1
    3b3a:	9301      	str	r3, [sp, #4]
    3b3c:	9b01      	ldr	r3, [sp, #4]
    3b3e:	42bb      	cmp	r3, r7
    3b40:	dcae      	bgt.n	3aa0 <scrollDown+0x40>
		for(volatile int x = 0 ; x <= 79 ; x++)
    3b42:	2300      	movs	r3, #0
    3b44:	9303      	str	r3, [sp, #12]
    3b46:	9b03      	ldr	r3, [sp, #12]
    3b48:	2b4f      	cmp	r3, #79	; 0x4f
    3b4a:	dc2b      	bgt.n	3ba4 <scrollDown+0x144>
			consoleDisplay[x][topLine] = 0x20;
    3b4c:	4c2a      	ldr	r4, [pc, #168]	; (3bf8 <scrollDown+0x198>)
			consoleColors[x][topLine] = 0x0000;
    3b4e:	4e2b      	ldr	r6, [pc, #172]	; (3bfc <scrollDown+0x19c>)
			consoleSGR[x][topLine] = 0x00;
    3b50:	4d2b      	ldr	r5, [pc, #172]	; (3c00 <scrollDown+0x1a0>)
			consoleDisplay[x][topLine] = 0x20;
    3b52:	9b03      	ldr	r3, [sp, #12]
    3b54:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3b58:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    3b5c:	2220      	movs	r2, #32
    3b5e:	55da      	strb	r2, [r3, r7]
			consoleColors[x][topLine] = 0x0000;
    3b60:	9b03      	ldr	r3, [sp, #12]
    3b62:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3b66:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
    3b6a:	2200      	movs	r2, #0
    3b6c:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
			consoleSGR[x][topLine] = 0x00;
    3b70:	9b03      	ldr	r3, [sp, #12]
    3b72:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3b76:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    3b7a:	55da      	strb	r2, [r3, r7]
			xCharPos = x;
    3b7c:	9a03      	ldr	r2, [sp, #12]
    3b7e:	4b1a      	ldr	r3, [pc, #104]	; (3be8 <scrollDown+0x188>)
    3b80:	801a      	strh	r2, [r3, #0]
			yCharPos = topLine;
    3b82:	4b1a      	ldr	r3, [pc, #104]	; (3bec <scrollDown+0x18c>)
    3b84:	f8a3 8000 	strh.w	r8, [r3]
			drawChar(consoleDisplay[x][topLine]);
    3b88:	9b03      	ldr	r3, [sp, #12]
    3b8a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3b8e:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    3b92:	5dd8      	ldrb	r0, [r3, r7]
    3b94:	4b1b      	ldr	r3, [pc, #108]	; (3c04 <scrollDown+0x1a4>)
    3b96:	4798      	blx	r3
		for(volatile int x = 0 ; x <= 79 ; x++)
    3b98:	9b03      	ldr	r3, [sp, #12]
    3b9a:	3301      	adds	r3, #1
    3b9c:	9303      	str	r3, [sp, #12]
    3b9e:	9b03      	ldr	r3, [sp, #12]
    3ba0:	2b4f      	cmp	r3, #79	; 0x4f
    3ba2:	ddd6      	ble.n	3b52 <scrollDown+0xf2>
		xCharPos = tempCursorx;
    3ba4:	fa5f fa8a 	uxtb.w	sl, sl
    3ba8:	4b0f      	ldr	r3, [pc, #60]	; (3be8 <scrollDown+0x188>)
    3baa:	f8a3 a000 	strh.w	sl, [r3]
		yCharPos = tempCursory;
    3bae:	fa5f f989 	uxtb.w	r9, r9
    3bb2:	4b0e      	ldr	r3, [pc, #56]	; (3bec <scrollDown+0x18c>)
    3bb4:	f8a3 9000 	strh.w	r9, [r3]
    3bb8:	e763      	b.n	3a82 <scrollDown+0x22>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    3bba:	4c0f      	ldr	r4, [pc, #60]	; (3bf8 <scrollDown+0x198>)
    3bbc:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
    3bc0:	eb04 03ca 	add.w	r3, r4, sl, lsl #3
    3bc4:	f813 0009 	ldrb.w	r0, [r3, r9]
    3bc8:	4d0e      	ldr	r5, [pc, #56]	; (3c04 <scrollDown+0x1a4>)
    3bca:	47a8      	blx	r5
			yCharPos--;
    3bcc:	4a07      	ldr	r2, [pc, #28]	; (3bec <scrollDown+0x18c>)
    3bce:	8813      	ldrh	r3, [r2, #0]
    3bd0:	3b01      	subs	r3, #1
    3bd2:	b29b      	uxth	r3, r3
    3bd4:	8013      	strh	r3, [r2, #0]
			tempCharacter = consoleDisplay[xCharPos][yCharPos];
    3bd6:	4a04      	ldr	r2, [pc, #16]	; (3be8 <scrollDown+0x188>)
    3bd8:	8812      	ldrh	r2, [r2, #0]
    3bda:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    3bde:	eb04 04c2 	add.w	r4, r4, r2, lsl #3
			drawChar(tempCharacter);
    3be2:	5ce0      	ldrb	r0, [r4, r3]
    3be4:	47a8      	blx	r5
}
    3be6:	e74c      	b.n	3a82 <scrollDown+0x22>
    3be8:	200004e2 	.word	0x200004e2
    3bec:	200004e4 	.word	0x200004e4
    3bf0:	20000029 	.word	0x20000029
    3bf4:	20000028 	.word	0x20000028
    3bf8:	200005ec 	.word	0x200005ec
    3bfc:	200014ec 	.word	0x200014ec
    3c00:	20000d6c 	.word	0x20000d6c
    3c04:	000038b1 	.word	0x000038b1

00003c08 <blinkCursor>:

}
*/

void blinkCursor(void)
{
    3c08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3c0c:	b0e5      	sub	sp, #404	; 0x194
	uint16_t x = xCharPos;
    3c0e:	4b63      	ldr	r3, [pc, #396]	; (3d9c <blinkCursor+0x194>)
    3c10:	881b      	ldrh	r3, [r3, #0]
	uint16_t y = yCharPos;
    3c12:	4a63      	ldr	r2, [pc, #396]	; (3da0 <blinkCursor+0x198>)
    3c14:	8812      	ldrh	r2, [r2, #0]
	
	uint16_t tempForeground;
	uint16_t tempBackground;
	
	uint32_t tempColor = consoleColors[x][y];
    3c16:	0059      	lsls	r1, r3, #1
    3c18:	18c8      	adds	r0, r1, r3
    3c1a:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    3c1e:	4c61      	ldr	r4, [pc, #388]	; (3da4 <blinkCursor+0x19c>)
    3c20:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
	
	tempForeground = (tempColor >> 16);
    3c24:	0c25      	lsrs	r5, r4, #16
	tempBackground = consoleColors[x][y] & 0xFFFF;
    3c26:	b2a4      	uxth	r4, r4
	
	uint8_t character = consoleDisplay[xCharPos][yCharPos];
    3c28:	4419      	add	r1, r3
    3c2a:	485f      	ldr	r0, [pc, #380]	; (3da8 <blinkCursor+0x1a0>)
    3c2c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    3c30:	5c8e      	ldrb	r6, [r1, r2]
	
	uint8_t displayFont[10][20];
	uint8_t tempFontStorage[200];
	uint8_t k = 0;
	
	REG_PORT_OUTCLR1 = LCD_CS;
    3c32:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    3c36:	495d      	ldr	r1, [pc, #372]	; (3dac <blinkCursor+0x1a4>)
    3c38:	6008      	str	r0, [r1, #0]
	setXY(x*10,y*20,x*10+9,y*20+19);
    3c3a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3c3e:	0058      	lsls	r0, r3, #1
    3c40:	b280      	uxth	r0, r0
    3c42:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    3c46:	0091      	lsls	r1, r2, #2
    3c48:	b289      	uxth	r1, r1
    3c4a:	f101 0313 	add.w	r3, r1, #19
    3c4e:	f100 0209 	add.w	r2, r0, #9
    3c52:	b29b      	uxth	r3, r3
    3c54:	b292      	uxth	r2, r2
    3c56:	4f56      	ldr	r7, [pc, #344]	; (3db0 <blinkCursor+0x1a8>)
    3c58:	47b8      	blx	r7
    3c5a:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    3c5e:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    3c62:	4b54      	ldr	r3, [pc, #336]	; (3db4 <blinkCursor+0x1ac>)
    3c64:	eb06 0c03 	add.w	ip, r6, r3
	uint8_t k = 0;
    3c68:	2600      	movs	r6, #0
			{
				tempFontStorage[k] = 0xFF;
			}
			else
			{
				tempFontStorage[k] = 0x00;
    3c6a:	46b6      	mov	lr, r6
				tempFontStorage[k] = 0xFF;
    3c6c:	27ff      	movs	r7, #255	; 0xff
    3c6e:	e003      	b.n	3c78 <blinkCursor+0x70>
    3c70:	3608      	adds	r6, #8
    3c72:	b2f6      	uxtb	r6, r6
	for(uint16_t i=0; i <= 24; i++)
    3c74:	2ec8      	cmp	r6, #200	; 0xc8
    3c76:	d013      	beq.n	3ca0 <blinkCursor+0x98>
			if((CodePage437[character][i]&(1<<(7-j)))!=0)
    3c78:	f81c 0f01 	ldrb.w	r0, [ip, #1]!
    3c7c:	4633      	mov	r3, r6
    3c7e:	2207      	movs	r2, #7
    3c80:	fa40 f102 	asr.w	r1, r0, r2
    3c84:	f011 0f01 	tst.w	r1, #1
				tempFontStorage[k] = 0xFF;
    3c88:	bf14      	ite	ne
    3c8a:	f80d 7003 	strbne.w	r7, [sp, r3]
				tempFontStorage[k] = 0x00;
    3c8e:	f80d e003 	strbeq.w	lr, [sp, r3]
			}
			k++;
    3c92:	3301      	adds	r3, #1
    3c94:	b2db      	uxtb	r3, r3
    3c96:	3a01      	subs	r2, #1
		for(int j=0;j<8;j++)
    3c98:	f1b2 3fff 	cmp.w	r2, #4294967295
    3c9c:	d1f0      	bne.n	3c80 <blinkCursor+0x78>
    3c9e:	e7e7      	b.n	3c70 <blinkCursor+0x68>
    3ca0:	f04f 0e00 	mov.w	lr, #0
			{
				displayFont[i][j] = 0xFF;
			}
			else
			{
				displayFont[i][j] = 0x00;
    3ca4:	4676      	mov	r6, lr
				displayFont[i][j] = 0xFF;
    3ca6:	27ff      	movs	r7, #255	; 0xff
    3ca8:	fa5f f38e 	uxtb.w	r3, lr
    3cac:	aa32      	add	r2, sp, #200	; 0xc8
    3cae:	4472      	add	r2, lr
    3cb0:	f103 0014 	add.w	r0, r3, #20
    3cb4:	b2c0      	uxtb	r0, r0
			if(tempFontStorage[k] == 0xFF)
    3cb6:	f81d 1003 	ldrb.w	r1, [sp, r3]
    3cba:	29ff      	cmp	r1, #255	; 0xff
				displayFont[i][j] = 0xFF;
    3cbc:	bf0c      	ite	eq
    3cbe:	7017      	strbeq	r7, [r2, #0]
				displayFont[i][j] = 0x00;
    3cc0:	7016      	strbne	r6, [r2, #0]
			}
			k++;
    3cc2:	3301      	adds	r3, #1
    3cc4:	b2db      	uxtb	r3, r3
    3cc6:	3201      	adds	r2, #1
		for(uint8_t j = 0; j <= 19 ; j++)
    3cc8:	4283      	cmp	r3, r0
    3cca:	d1f4      	bne.n	3cb6 <blinkCursor+0xae>
    3ccc:	f10e 0e14 	add.w	lr, lr, #20
	for(uint8_t i = 0; i <= 9 ; i++)
    3cd0:	f1be 0fc8 	cmp.w	lr, #200	; 0xc8
    3cd4:	d1e8      	bne.n	3ca8 <blinkCursor+0xa0>
		}
	}
	
	//process displayFont if it is bold, first bit of consoleSGR
	if(BitVal(consoleSGR[xCharPos][yCharPos],1) == 1)
    3cd6:	4b31      	ldr	r3, [pc, #196]	; (3d9c <blinkCursor+0x194>)
    3cd8:	881b      	ldrh	r3, [r3, #0]
    3cda:	4a31      	ldr	r2, [pc, #196]	; (3da0 <blinkCursor+0x198>)
    3cdc:	8811      	ldrh	r1, [r2, #0]
    3cde:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3ce2:	4a35      	ldr	r2, [pc, #212]	; (3db8 <blinkCursor+0x1b0>)
    3ce4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    3ce8:	5c5f      	ldrb	r7, [r3, r1]
    3cea:	f017 0f02 	tst.w	r7, #2
    3cee:	d010      	beq.n	3d12 <blinkCursor+0x10a>
    3cf0:	f20d 117b 	addw	r1, sp, #379	; 0x17b
    3cf4:	f10d 06c7 	add.w	r6, sp, #199	; 0xc7
		{
			for(uint8_t j = 0; j <= 19 ; j++)
			{
				if(displayFont[i-1][j] == 0xFF)
				{
					displayFont[i][j] = 0xFF;
    3cf8:	20ff      	movs	r0, #255	; 0xff
    3cfa:	f1a1 0314 	sub.w	r3, r1, #20
				if(displayFont[i-1][j] == 0xFF)
    3cfe:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    3d02:	2aff      	cmp	r2, #255	; 0xff
					displayFont[i][j] = 0xFF;
    3d04:	bf08      	it	eq
    3d06:	7518      	strbeq	r0, [r3, #20]
			for(uint8_t j = 0; j <= 19 ; j++)
    3d08:	428b      	cmp	r3, r1
    3d0a:	d1f8      	bne.n	3cfe <blinkCursor+0xf6>
    3d0c:	3914      	subs	r1, #20
		for(uint8_t i = 9; i >= 1 ; i--)
    3d0e:	42b1      	cmp	r1, r6
    3d10:	d1f3      	bne.n	3cfa <blinkCursor+0xf2>
			}
		}
	}
	
	//process displayfont if underscore, fourth bit of consoleSGR
	if(BitVal(consoleSGR[xCharPos][yCharPos],4) == 1)
    3d12:	f017 0f10 	tst.w	r7, #16
    3d16:	d008      	beq.n	3d2a <blinkCursor+0x122>
    3d18:	f20d 137b 	addw	r3, sp, #379	; 0x17b
    3d1c:	f20d 1185 	addw	r1, sp, #389	; 0x185
	{
		for(int i = 0 ; i <= 9 ; i++)
		{
			displayFont[9][i] = 0xFF;
    3d20:	22ff      	movs	r2, #255	; 0xff
    3d22:	f803 2f01 	strb.w	r2, [r3, #1]!
		for(int i = 0 ; i <= 9 ; i++)
    3d26:	428b      	cmp	r3, r1
    3d28:	d1fb      	bne.n	3d22 <blinkCursor+0x11a>
		}
	}
	
	if(!cursorBlinkState)
    3d2a:	4b24      	ldr	r3, [pc, #144]	; (3dbc <blinkCursor+0x1b4>)
    3d2c:	781b      	ldrb	r3, [r3, #0]
    3d2e:	b1a3      	cbz	r3, 3d5a <blinkCursor+0x152>
    3d30:	f10d 07db 	add.w	r7, sp, #219	; 0xdb
    3d34:	f20d 19a3 	addw	r9, sp, #419	; 0x1a3
				{
					setPixel(tempForeground);
				}
				else
				{
					setPixel(tempBackground);
    3d38:	f8df 8088 	ldr.w	r8, [pc, #136]	; 3dc4 <blinkCursor+0x1bc>
    3d3c:	f1a7 0614 	sub.w	r6, r7, #20
				if(displayFont[i][j] != 0xFF)
    3d40:	f816 3f01 	ldrb.w	r3, [r6, #1]!
    3d44:	2bff      	cmp	r3, #255	; 0xff
					setPixel(tempForeground);
    3d46:	bf14      	ite	ne
    3d48:	4628      	movne	r0, r5
					setPixel(tempBackground);
    3d4a:	4620      	moveq	r0, r4
    3d4c:	47c0      	blx	r8
			for(uint8_t j = 0; j <= 19 ; j++)
    3d4e:	42b7      	cmp	r7, r6
    3d50:	d1f6      	bne.n	3d40 <blinkCursor+0x138>
    3d52:	3714      	adds	r7, #20
		for(uint8_t i = 0; i <= 9 ; i++)
    3d54:	45b9      	cmp	r9, r7
    3d56:	d1f1      	bne.n	3d3c <blinkCursor+0x134>
    3d58:	e013      	b.n	3d82 <blinkCursor+0x17a>
    3d5a:	f10d 07db 	add.w	r7, sp, #219	; 0xdb
    3d5e:	f20d 19a3 	addw	r9, sp, #419	; 0x1a3
					setPixel(tempBackground);
    3d62:	f8df 8060 	ldr.w	r8, [pc, #96]	; 3dc4 <blinkCursor+0x1bc>
    3d66:	f1a7 0614 	sub.w	r6, r7, #20
				if(displayFont[i][j] == 0xFF)
    3d6a:	f816 3f01 	ldrb.w	r3, [r6, #1]!
    3d6e:	2bff      	cmp	r3, #255	; 0xff
					setPixel(tempForeground);
    3d70:	bf0c      	ite	eq
    3d72:	4628      	moveq	r0, r5
					setPixel(tempBackground);
    3d74:	4620      	movne	r0, r4
    3d76:	47c0      	blx	r8
			for(uint8_t j = 0; j <= 19 ; j++)
    3d78:	42be      	cmp	r6, r7
    3d7a:	d1f6      	bne.n	3d6a <blinkCursor+0x162>
    3d7c:	3714      	adds	r7, #20
		for(uint8_t i = 0; i <= 9 ; i++)
    3d7e:	45b9      	cmp	r9, r7
    3d80:	d1f1      	bne.n	3d66 <blinkCursor+0x15e>
				}
			}
		}
	}
	
	REG_PORT_OUTSET1 = LCD_CS;
    3d82:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    3d86:	4b0e      	ldr	r3, [pc, #56]	; (3dc0 <blinkCursor+0x1b8>)
    3d88:	601a      	str	r2, [r3, #0]
	
	//invert cursorBlinkState
	cursorBlinkState = !cursorBlinkState;
    3d8a:	4a0c      	ldr	r2, [pc, #48]	; (3dbc <blinkCursor+0x1b4>)
    3d8c:	7813      	ldrb	r3, [r2, #0]
    3d8e:	f083 0301 	eor.w	r3, r3, #1
    3d92:	7013      	strb	r3, [r2, #0]
	
}
    3d94:	b065      	add	sp, #404	; 0x194
    3d96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3d9a:	bf00      	nop
    3d9c:	200004e2 	.word	0x200004e2
    3da0:	200004e4 	.word	0x200004e4
    3da4:	200014ec 	.word	0x200014ec
    3da8:	200005ec 	.word	0x200005ec
    3dac:	41004494 	.word	0x41004494
    3db0:	000045e1 	.word	0x000045e1
    3db4:	00006a5b 	.word	0x00006a5b
    3db8:	20000d6c 	.word	0x20000d6c
    3dbc:	2000002a 	.word	0x2000002a
    3dc0:	41004498 	.word	0x41004498
    3dc4:	0000470d 	.word	0x0000470d

00003dc8 <newLine>:
{
    3dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3dcc:	b083      	sub	sp, #12
	int tempCursorx = xCharPos;
    3dce:	4b39      	ldr	r3, [pc, #228]	; (3eb4 <newLine+0xec>)
    3dd0:	f8b3 b000 	ldrh.w	fp, [r3]
	int tempCursory = yCharPos;
    3dd4:	4b38      	ldr	r3, [pc, #224]	; (3eb8 <newLine+0xf0>)
    3dd6:	881b      	ldrh	r3, [r3, #0]
    3dd8:	9301      	str	r3, [sp, #4]
	cursorBlinkState = true;
    3dda:	2201      	movs	r2, #1
    3ddc:	4b37      	ldr	r3, [pc, #220]	; (3ebc <newLine+0xf4>)
    3dde:	701a      	strb	r2, [r3, #0]
	blinkCursor();
    3de0:	4b37      	ldr	r3, [pc, #220]	; (3ec0 <newLine+0xf8>)
    3de2:	4798      	blx	r3
	for(int j = topMargin ; j <= bottomMargin ; j++)
    3de4:	4b37      	ldr	r3, [pc, #220]	; (3ec4 <newLine+0xfc>)
    3de6:	f893 c000 	ldrb.w	ip, [r3]
    3dea:	fa5f fc8c 	uxtb.w	ip, ip
    3dee:	4b36      	ldr	r3, [pc, #216]	; (3ec8 <newLine+0x100>)
    3df0:	781b      	ldrb	r3, [r3, #0]
    3df2:	b2db      	uxtb	r3, r3
    3df4:	459c      	cmp	ip, r3
    3df6:	dc21      	bgt.n	3e3c <newLine+0x74>
			consoleDisplay[i][j-1] = consoleDisplay[i][j];
    3df8:	4e34      	ldr	r6, [pc, #208]	; (3ecc <newLine+0x104>)
			consoleColors[i][j-1] = consoleColors[i][j];
    3dfa:	4935      	ldr	r1, [pc, #212]	; (3ed0 <newLine+0x108>)
			consoleSGR[i][j-1] = consoleSGR[i][j];
    3dfc:	4d35      	ldr	r5, [pc, #212]	; (3ed4 <newLine+0x10c>)
	for(int j = topMargin ; j <= bottomMargin ; j++)
    3dfe:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 3ec8 <newLine+0x100>
    3e02:	4664      	mov	r4, ip
    3e04:	f10c 32ff 	add.w	r2, ip, #4294967295
{
    3e08:	2300      	movs	r3, #0
			consoleDisplay[i][j-1] = consoleDisplay[i][j];
    3e0a:	eb0c 0e06 	add.w	lr, ip, r6
			consoleSGR[i][j-1] = consoleSGR[i][j];
    3e0e:	1967      	adds	r7, r4, r5
			consoleDisplay[i][j-1] = consoleDisplay[i][j];
    3e10:	f81e 0003 	ldrb.w	r0, [lr, r3]
    3e14:	5590      	strb	r0, [r2, r6]
			consoleColors[i][j-1] = consoleColors[i][j];
    3e16:	1918      	adds	r0, r3, r4
    3e18:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    3e1c:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
			consoleSGR[i][j-1] = consoleSGR[i][j];
    3e20:	5cf8      	ldrb	r0, [r7, r3]
    3e22:	5550      	strb	r0, [r2, r5]
    3e24:	3318      	adds	r3, #24
    3e26:	3218      	adds	r2, #24
		for(int i = 0 ; i < 80 ; i++)
    3e28:	f5b3 6ff0 	cmp.w	r3, #1920	; 0x780
    3e2c:	d1f0      	bne.n	3e10 <newLine+0x48>
	for(int j = topMargin ; j <= bottomMargin ; j++)
    3e2e:	f10c 0c01 	add.w	ip, ip, #1
    3e32:	f898 3000 	ldrb.w	r3, [r8]
    3e36:	b2db      	uxtb	r3, r3
    3e38:	4563      	cmp	r3, ip
    3e3a:	dae2      	bge.n	3e02 <newLine+0x3a>
{
    3e3c:	2317      	movs	r3, #23
		consoleDisplay[k][23] = 0x20;
    3e3e:	4e23      	ldr	r6, [pc, #140]	; (3ecc <newLine+0x104>)
    3e40:	2520      	movs	r5, #32
		consoleColors[k][23] = 0x0000;
    3e42:	4c23      	ldr	r4, [pc, #140]	; (3ed0 <newLine+0x108>)
    3e44:	2200      	movs	r2, #0
		consoleSGR[k][23] = 0x00;
    3e46:	4823      	ldr	r0, [pc, #140]	; (3ed4 <newLine+0x10c>)
	for(int k = 0 ; k < 80 ; k ++)
    3e48:	f240 7197 	movw	r1, #1943	; 0x797
		consoleDisplay[k][23] = 0x20;
    3e4c:	559d      	strb	r5, [r3, r6]
		consoleColors[k][23] = 0x0000;
    3e4e:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
		consoleSGR[k][23] = 0x00;
    3e52:	541a      	strb	r2, [r3, r0]
    3e54:	3318      	adds	r3, #24
	for(int k = 0 ; k < 80 ; k ++)
    3e56:	428b      	cmp	r3, r1
    3e58:	d1f8      	bne.n	3e4c <newLine+0x84>
	for(int j = topMargin-1 ; j < bottomMargin ; j++)
    3e5a:	4b1a      	ldr	r3, [pc, #104]	; (3ec4 <newLine+0xfc>)
    3e5c:	781e      	ldrb	r6, [r3, #0]
    3e5e:	3e01      	subs	r6, #1
    3e60:	4b19      	ldr	r3, [pc, #100]	; (3ec8 <newLine+0x100>)
    3e62:	781b      	ldrb	r3, [r3, #0]
    3e64:	b2db      	uxtb	r3, r3
    3e66:	429e      	cmp	r6, r3
    3e68:	da19      	bge.n	3e9e <newLine+0xd6>
    3e6a:	f8df a060 	ldr.w	sl, [pc, #96]	; 3ecc <newLine+0x104>
			xCharPos = i;
    3e6e:	f8df 9044 	ldr.w	r9, [pc, #68]	; 3eb4 <newLine+0xec>
			yCharPos = j;
    3e72:	f8df 8044 	ldr.w	r8, [pc, #68]	; 3eb8 <newLine+0xf0>
    3e76:	eb06 050a 	add.w	r5, r6, sl
{
    3e7a:	2400      	movs	r4, #0
			drawChar(consoleDisplay[i][j]);
    3e7c:	4f16      	ldr	r7, [pc, #88]	; (3ed8 <newLine+0x110>)
			xCharPos = i;
    3e7e:	f8a9 4000 	strh.w	r4, [r9]
			yCharPos = j;
    3e82:	f8a8 6000 	strh.w	r6, [r8]
			drawChar(consoleDisplay[i][j]);
    3e86:	f815 0b18 	ldrb.w	r0, [r5], #24
    3e8a:	47b8      	blx	r7
		for(int i = 0 ; i < 80 ; i++)
    3e8c:	3401      	adds	r4, #1
    3e8e:	2c50      	cmp	r4, #80	; 0x50
    3e90:	d1f5      	bne.n	3e7e <newLine+0xb6>
	for(int j = topMargin-1 ; j < bottomMargin ; j++)
    3e92:	3601      	adds	r6, #1
    3e94:	4b0c      	ldr	r3, [pc, #48]	; (3ec8 <newLine+0x100>)
    3e96:	781b      	ldrb	r3, [r3, #0]
    3e98:	b2db      	uxtb	r3, r3
    3e9a:	42b3      	cmp	r3, r6
    3e9c:	dceb      	bgt.n	3e76 <newLine+0xae>
	xCharPos = tempCursorx;
    3e9e:	4b05      	ldr	r3, [pc, #20]	; (3eb4 <newLine+0xec>)
    3ea0:	f8a3 b000 	strh.w	fp, [r3]
	yCharPos = tempCursory;	
    3ea4:	4b04      	ldr	r3, [pc, #16]	; (3eb8 <newLine+0xf0>)
    3ea6:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    3eaa:	801a      	strh	r2, [r3, #0]
}
    3eac:	b003      	add	sp, #12
    3eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3eb2:	bf00      	nop
    3eb4:	200004e2 	.word	0x200004e2
    3eb8:	200004e4 	.word	0x200004e4
    3ebc:	2000002a 	.word	0x2000002a
    3ec0:	00003c09 	.word	0x00003c09
    3ec4:	20000029 	.word	0x20000029
    3ec8:	20000028 	.word	0x20000028
    3ecc:	200005ec 	.word	0x200005ec
    3ed0:	200014ec 	.word	0x200014ec
    3ed4:	20000d6c 	.word	0x20000d6c
    3ed8:	000038b1 	.word	0x000038b1

00003edc <writeString>:

void writeString(const char str[])
{
    3edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3ede:	4606      	mov	r6, r0
	int length = strlen(str);
    3ee0:	4b09      	ldr	r3, [pc, #36]	; (3f08 <writeString+0x2c>)
    3ee2:	4798      	blx	r3
	for(int i = 0; i < length; i++)
    3ee4:	2800      	cmp	r0, #0
    3ee6:	dd0d      	ble.n	3f04 <writeString+0x28>
    3ee8:	4634      	mov	r4, r6
    3eea:	4406      	add	r6, r0
	{
		drawChar(str[i]);
    3eec:	4f07      	ldr	r7, [pc, #28]	; (3f0c <writeString+0x30>)
		if(xCharPos <= 80)
    3eee:	4d08      	ldr	r5, [pc, #32]	; (3f10 <writeString+0x34>)
		drawChar(str[i]);
    3ef0:	f814 0b01 	ldrb.w	r0, [r4], #1
    3ef4:	47b8      	blx	r7
		if(xCharPos <= 80)
    3ef6:	882b      	ldrh	r3, [r5, #0]
    3ef8:	2b50      	cmp	r3, #80	; 0x50
		xCharPos++;
    3efa:	bf9c      	itt	ls
    3efc:	3301      	addls	r3, #1
    3efe:	802b      	strhls	r3, [r5, #0]
	for(int i = 0; i < length; i++)
    3f00:	42b4      	cmp	r4, r6
    3f02:	d1f5      	bne.n	3ef0 <writeString+0x14>
    3f04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3f06:	bf00      	nop
    3f08:	000053af 	.word	0x000053af
    3f0c:	000038b1 	.word	0x000038b1
    3f10:	200004e2 	.word	0x200004e2

00003f14 <nullifyConsole>:
	}
}

void nullifyConsole(void)
{
    3f14:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f16:	4b0d      	ldr	r3, [pc, #52]	; (3f4c <nullifyConsole+0x38>)
    3f18:	4f0d      	ldr	r7, [pc, #52]	; (3f50 <nullifyConsole+0x3c>)
    3f1a:	4e0e      	ldr	r6, [pc, #56]	; (3f54 <nullifyConsole+0x40>)
    3f1c:	f503 6ef0 	add.w	lr, r3, #1920	; 0x780
	for(int i = 0 ; i < 80 ; i++)
	{
		for(int j = 0 ; j < 24 ; j++)
		{
			consoleDisplay[i][j] = 0x00;
    3f20:	2000      	movs	r0, #0
			consoleSGR[i][j] = 0x00;
			consoleColors[i][j] = 0xFFFF0000;
    3f22:	4d0d      	ldr	r5, [pc, #52]	; (3f58 <nullifyConsole+0x44>)
    3f24:	e004      	b.n	3f30 <nullifyConsole+0x1c>
    3f26:	3718      	adds	r7, #24
    3f28:	3660      	adds	r6, #96	; 0x60
    3f2a:	4623      	mov	r3, r4
	for(int i = 0 ; i < 80 ; i++)
    3f2c:	45a6      	cmp	lr, r4
    3f2e:	d00c      	beq.n	3f4a <nullifyConsole+0x36>
    3f30:	f103 0418 	add.w	r4, r3, #24
{
    3f34:	4631      	mov	r1, r6
    3f36:	463a      	mov	r2, r7
			consoleDisplay[i][j] = 0x00;
    3f38:	f803 0b01 	strb.w	r0, [r3], #1
			consoleSGR[i][j] = 0x00;
    3f3c:	f802 0b01 	strb.w	r0, [r2], #1
			consoleColors[i][j] = 0xFFFF0000;
    3f40:	f841 5b04 	str.w	r5, [r1], #4
		for(int j = 0 ; j < 24 ; j++)
    3f44:	42a3      	cmp	r3, r4
    3f46:	d1f7      	bne.n	3f38 <nullifyConsole+0x24>
    3f48:	e7ed      	b.n	3f26 <nullifyConsole+0x12>
    3f4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3f4c:	200005ec 	.word	0x200005ec
    3f50:	20000d6c 	.word	0x20000d6c
    3f54:	200014ec 	.word	0x200014ec
    3f58:	ffff0000 	.word	0xffff0000

00003f5c <scanCodesContains>:

bool scanCodesContains(int scanCode)
{
	for(int i = 0 ; i < 70 ; i++)
	{
		if(scanCodes[i] == scanCode)
    3f5c:	4b09      	ldr	r3, [pc, #36]	; (3f84 <scanCodesContains+0x28>)
    3f5e:	681b      	ldr	r3, [r3, #0]
    3f60:	4298      	cmp	r0, r3
    3f62:	d00a      	beq.n	3f7a <scanCodesContains+0x1e>
    3f64:	4b07      	ldr	r3, [pc, #28]	; (3f84 <scanCodesContains+0x28>)
    3f66:	f503 718a 	add.w	r1, r3, #276	; 0x114
    3f6a:	f853 2f04 	ldr.w	r2, [r3, #4]!
    3f6e:	4282      	cmp	r2, r0
    3f70:	d005      	beq.n	3f7e <scanCodesContains+0x22>
	for(int i = 0 ; i < 70 ; i++)
    3f72:	428b      	cmp	r3, r1
    3f74:	d1f9      	bne.n	3f6a <scanCodesContains+0xe>
		{
			return true;
		}
	}
	return false;
    3f76:	2000      	movs	r0, #0
    3f78:	4770      	bx	lr
			return true;
    3f7a:	2001      	movs	r0, #1
    3f7c:	4770      	bx	lr
    3f7e:	2001      	movs	r0, #1
}
    3f80:	4770      	bx	lr
    3f82:	bf00      	nop
    3f84:	20000054 	.word	0x20000054

00003f88 <keyDown>:

bool keyDown(int scancode)
{
	for(int i = 0 ; i < 20 ; i++)
	{
		if(keyDownBuffer[i] == scancode)
    3f88:	4b09      	ldr	r3, [pc, #36]	; (3fb0 <keyDown+0x28>)
    3f8a:	781b      	ldrb	r3, [r3, #0]
    3f8c:	4298      	cmp	r0, r3
    3f8e:	d00a      	beq.n	3fa6 <keyDown+0x1e>
    3f90:	4b07      	ldr	r3, [pc, #28]	; (3fb0 <keyDown+0x28>)
    3f92:	f103 0113 	add.w	r1, r3, #19
    3f96:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    3f9a:	4282      	cmp	r2, r0
    3f9c:	d005      	beq.n	3faa <keyDown+0x22>
	for(int i = 0 ; i < 20 ; i++)
    3f9e:	428b      	cmp	r3, r1
    3fa0:	d1f9      	bne.n	3f96 <keyDown+0xe>
		{
			return true;
		}	
	}
	return false;
    3fa2:	2000      	movs	r0, #0
    3fa4:	4770      	bx	lr
			return true;
    3fa6:	2001      	movs	r0, #1
    3fa8:	4770      	bx	lr
    3faa:	2001      	movs	r0, #1
}
    3fac:	4770      	bx	lr
    3fae:	bf00      	nop
    3fb0:	2000002c 	.word	0x2000002c

00003fb4 <printKeyboardBuffer>:
{
    3fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3fb8:	b0cb      	sub	sp, #300	; 0x12c
	unsigned char noCase[] =
    3fba:	4da8      	ldr	r5, [pc, #672]	; (425c <printKeyboardBuffer+0x2a8>)
    3fbc:	2646      	movs	r6, #70	; 0x46
    3fbe:	4632      	mov	r2, r6
    3fc0:	4629      	mov	r1, r5
    3fc2:	a838      	add	r0, sp, #224	; 0xe0
    3fc4:	4ca6      	ldr	r4, [pc, #664]	; (4260 <printKeyboardBuffer+0x2ac>)
    3fc6:	47a0      	blx	r4
	unsigned char shiftCase[] =
    3fc8:	4632      	mov	r2, r6
    3fca:	f105 0148 	add.w	r1, r5, #72	; 0x48
    3fce:	a826      	add	r0, sp, #152	; 0x98
    3fd0:	47a0      	blx	r4
	unsigned char capsLockCase[] =
    3fd2:	4632      	mov	r2, r6
    3fd4:	f105 0190 	add.w	r1, r5, #144	; 0x90
    3fd8:	a814      	add	r0, sp, #80	; 0x50
    3fda:	47a0      	blx	r4
	unsigned char controlCase[] =
    3fdc:	4632      	mov	r2, r6
    3fde:	f105 01d8 	add.w	r1, r5, #216	; 0xd8
    3fe2:	a802      	add	r0, sp, #8
    3fe4:	47a0      	blx	r4
    3fe6:	499f      	ldr	r1, [pc, #636]	; (4264 <printKeyboardBuffer+0x2b0>)
    3fe8:	1e4f      	subs	r7, r1, #1
    3fea:	3113      	adds	r1, #19
    3fec:	463e      	mov	r6, r7
	bool controled = false;
    3fee:	f04f 0900 	mov.w	r9, #0
	bool shifted = false;
    3ff2:	46ca      	mov	sl, r9
		if((scanCodeBuffer[i] == 13) | (scanCodeBuffer[i] == 49))
    3ff4:	f816 3f01 	ldrb.w	r3, [r6, #1]!
    3ff8:	2b31      	cmp	r3, #49	; 0x31
    3ffa:	bf18      	it	ne
    3ffc:	2b0d      	cmpne	r3, #13
    3ffe:	bf0c      	ite	eq
    4000:	2201      	moveq	r2, #1
    4002:	2200      	movne	r2, #0
			shifted = true;
    4004:	2a00      	cmp	r2, #0
    4006:	bf18      	it	ne
    4008:	4692      	movne	sl, r2
			controled = true;
    400a:	2b16      	cmp	r3, #22
    400c:	bf08      	it	eq
    400e:	f04f 0901 	moveq.w	r9, #1
	for(int i=0; i<20; i++)
    4012:	428e      	cmp	r6, r1
    4014:	d1ee      	bne.n	3ff4 <printKeyboardBuffer+0x40>
    4016:	4c93      	ldr	r4, [pc, #588]	; (4264 <printKeyboardBuffer+0x2b0>)
    4018:	f8df 8274 	ldr.w	r8, [pc, #628]	; 4290 <printKeyboardBuffer+0x2dc>
    401c:	f104 0b14 	add.w	fp, r4, #20
					sendChar(noCase[scanCodeBuffer[i]]);
    4020:	f8cd a004 	str.w	sl, [sp, #4]
    4024:	e00c      	b.n	4040 <printKeyboardBuffer+0x8c>
				sendChar(0x1B);
    4026:	201b      	movs	r0, #27
    4028:	4b8f      	ldr	r3, [pc, #572]	; (4268 <printKeyboardBuffer+0x2b4>)
    402a:	4798      	blx	r3
				if(localEcho)
    402c:	4b8f      	ldr	r3, [pc, #572]	; (426c <printKeyboardBuffer+0x2b8>)
    402e:	781b      	ldrb	r3, [r3, #0]
    4030:	2b00      	cmp	r3, #0
    4032:	d143      	bne.n	40bc <printKeyboardBuffer+0x108>
    4034:	3401      	adds	r4, #1
    4036:	f108 0801 	add.w	r8, r8, #1
	for(int i = 0 ; i < 20 ; i++)
    403a:	455c      	cmp	r4, fp
    403c:	f000 8161 	beq.w	4302 <printKeyboardBuffer+0x34e>
		if(!keyDown(scanCodeBuffer[i]))
    4040:	7825      	ldrb	r5, [r4, #0]
    4042:	4628      	mov	r0, r5
    4044:	4b8a      	ldr	r3, [pc, #552]	; (4270 <printKeyboardBuffer+0x2bc>)
    4046:	4798      	blx	r3
    4048:	2800      	cmp	r0, #0
    404a:	d1f3      	bne.n	4034 <printKeyboardBuffer+0x80>
			keyDownBuffer[i] = scanCodeBuffer[i];
    404c:	f888 5000 	strb.w	r5, [r8]
			if(scanCodeBuffer[i] == 0x00)  //this is escape
    4050:	2d00      	cmp	r5, #0
    4052:	d0e8      	beq.n	4026 <printKeyboardBuffer+0x72>
			else if(scanCodeBuffer[i] == 0x01)	//setup button, do something weird here
    4054:	2d01      	cmp	r5, #1
    4056:	d0ed      	beq.n	4034 <printKeyboardBuffer+0x80>
			else if(scanCodeBuffer[i] == 67)		//Break key, set by break enable in settings
    4058:	2d43      	cmp	r5, #67	; 0x43
    405a:	d035      	beq.n	40c8 <printKeyboardBuffer+0x114>
			else if(scanCodeBuffer[i] == 58)   //Return key
    405c:	2d3a      	cmp	r5, #58	; 0x3a
    405e:	d03b      	beq.n	40d8 <printKeyboardBuffer+0x124>
			else if(scanCodeBuffer[i] == 12)		//caps lock
    4060:	2d0c      	cmp	r5, #12
    4062:	d075      	beq.n	4150 <printKeyboardBuffer+0x19c>
			else if(scanCodeBuffer[i] == 3)			//scroll lock
    4064:	2d03      	cmp	r5, #3
    4066:	d07a      	beq.n	415e <printKeyboardBuffer+0x1aa>
			else if(scanCodeBuffer[i] == 35) //left
    4068:	2d23      	cmp	r5, #35	; 0x23
    406a:	d07e      	beq.n	416a <printKeyboardBuffer+0x1b6>
			else if(scanCodeBuffer[i]  == 45)	//down
    406c:	2d2d      	cmp	r5, #45	; 0x2d
    406e:	f000 809a 	beq.w	41a6 <printKeyboardBuffer+0x1f2>
			else if(scanCodeBuffer[i]  == 55)	//up
    4072:	2d37      	cmp	r5, #55	; 0x37
    4074:	f000 80b5 	beq.w	41e2 <printKeyboardBuffer+0x22e>
			else if(scanCodeBuffer[i]  == 65)	//right
    4078:	2d41      	cmp	r5, #65	; 0x41
    407a:	f000 80d0 	beq.w	421e <printKeyboardBuffer+0x26a>
				if(controled)
    407e:	f1b9 0f00 	cmp.w	r9, #0
    4082:	f040 8107 	bne.w	4294 <printKeyboardBuffer+0x2e0>
				else if(capsLock)
    4086:	4b7b      	ldr	r3, [pc, #492]	; (4274 <printKeyboardBuffer+0x2c0>)
    4088:	781b      	ldrb	r3, [r3, #0]
    408a:	2b00      	cmp	r3, #0
    408c:	f040 8113 	bne.w	42b6 <printKeyboardBuffer+0x302>
				else if(shifted)
    4090:	9b01      	ldr	r3, [sp, #4]
    4092:	2b00      	cmp	r3, #0
    4094:	f000 8122 	beq.w	42dc <printKeyboardBuffer+0x328>
					sendChar(shiftCase[scanCodeBuffer[i]]);
    4098:	ab4a      	add	r3, sp, #296	; 0x128
    409a:	441d      	add	r5, r3
    409c:	f815 0c90 	ldrb.w	r0, [r5, #-144]
    40a0:	4b71      	ldr	r3, [pc, #452]	; (4268 <printKeyboardBuffer+0x2b4>)
    40a2:	4798      	blx	r3
					if(localEcho)
    40a4:	4b71      	ldr	r3, [pc, #452]	; (426c <printKeyboardBuffer+0x2b8>)
    40a6:	781b      	ldrb	r3, [r3, #0]
    40a8:	2b00      	cmp	r3, #0
    40aa:	d0c3      	beq.n	4034 <printKeyboardBuffer+0x80>
						parseChar(shiftCase[scanCodeBuffer[i]]);
    40ac:	7823      	ldrb	r3, [r4, #0]
    40ae:	aa4a      	add	r2, sp, #296	; 0x128
    40b0:	4413      	add	r3, r2
    40b2:	f813 0c90 	ldrb.w	r0, [r3, #-144]
    40b6:	4b70      	ldr	r3, [pc, #448]	; (4278 <printKeyboardBuffer+0x2c4>)
    40b8:	4798      	blx	r3
    40ba:	e7bb      	b.n	4034 <printKeyboardBuffer+0x80>
					ring_put(ouroboros,0x1B);
    40bc:	211b      	movs	r1, #27
    40be:	4b6f      	ldr	r3, [pc, #444]	; (427c <printKeyboardBuffer+0x2c8>)
    40c0:	6818      	ldr	r0, [r3, #0]
    40c2:	4b6f      	ldr	r3, [pc, #444]	; (4280 <printKeyboardBuffer+0x2cc>)
    40c4:	4798      	blx	r3
    40c6:	e7b5      	b.n	4034 <printKeyboardBuffer+0x80>
				if(breakEnable)
    40c8:	4b6e      	ldr	r3, [pc, #440]	; (4284 <printKeyboardBuffer+0x2d0>)
    40ca:	781b      	ldrb	r3, [r3, #0]
    40cc:	2b00      	cmp	r3, #0
    40ce:	d0b1      	beq.n	4034 <printKeyboardBuffer+0x80>
					sendChar(0x00);
    40d0:	2000      	movs	r0, #0
    40d2:	4b65      	ldr	r3, [pc, #404]	; (4268 <printKeyboardBuffer+0x2b4>)
    40d4:	4798      	blx	r3
    40d6:	e7ad      	b.n	4034 <printKeyboardBuffer+0x80>
				if(lineFeedNewLine == 1)  //This is Windows; CRLF
    40d8:	4b6b      	ldr	r3, [pc, #428]	; (4288 <printKeyboardBuffer+0x2d4>)
    40da:	681b      	ldr	r3, [r3, #0]
    40dc:	2b01      	cmp	r3, #1
    40de:	d014      	beq.n	410a <printKeyboardBuffer+0x156>
				if(lineFeedNewLine == 2)  //This is Unix, sends LF
    40e0:	4b69      	ldr	r3, [pc, #420]	; (4288 <printKeyboardBuffer+0x2d4>)
    40e2:	681b      	ldr	r3, [r3, #0]
    40e4:	2b02      	cmp	r3, #2
    40e6:	d026      	beq.n	4136 <printKeyboardBuffer+0x182>
				if(lineFeedNewLine == 3)  //This is classic mac, sends CR
    40e8:	4b67      	ldr	r3, [pc, #412]	; (4288 <printKeyboardBuffer+0x2d4>)
    40ea:	681b      	ldr	r3, [r3, #0]
    40ec:	2b03      	cmp	r3, #3
    40ee:	d1a1      	bne.n	4034 <printKeyboardBuffer+0x80>
					sendChar(0x0D);
    40f0:	200d      	movs	r0, #13
    40f2:	4b5d      	ldr	r3, [pc, #372]	; (4268 <printKeyboardBuffer+0x2b4>)
    40f4:	4798      	blx	r3
					if(localEcho)
    40f6:	4b5d      	ldr	r3, [pc, #372]	; (426c <printKeyboardBuffer+0x2b8>)
    40f8:	781b      	ldrb	r3, [r3, #0]
    40fa:	2b00      	cmp	r3, #0
    40fc:	d09a      	beq.n	4034 <printKeyboardBuffer+0x80>
						ring_put(ouroboros, 0x0D);
    40fe:	210d      	movs	r1, #13
    4100:	4b5e      	ldr	r3, [pc, #376]	; (427c <printKeyboardBuffer+0x2c8>)
    4102:	6818      	ldr	r0, [r3, #0]
    4104:	4b5e      	ldr	r3, [pc, #376]	; (4280 <printKeyboardBuffer+0x2cc>)
    4106:	4798      	blx	r3
    4108:	e794      	b.n	4034 <printKeyboardBuffer+0x80>
					sendChar(0x0D);
    410a:	200d      	movs	r0, #13
    410c:	4b56      	ldr	r3, [pc, #344]	; (4268 <printKeyboardBuffer+0x2b4>)
    410e:	4798      	blx	r3
					sendChar(0x0A);
    4110:	200a      	movs	r0, #10
    4112:	4b55      	ldr	r3, [pc, #340]	; (4268 <printKeyboardBuffer+0x2b4>)
    4114:	4798      	blx	r3
					if(localEcho)
    4116:	4b55      	ldr	r3, [pc, #340]	; (426c <printKeyboardBuffer+0x2b8>)
    4118:	781b      	ldrb	r3, [r3, #0]
    411a:	2b00      	cmp	r3, #0
    411c:	d0e0      	beq.n	40e0 <printKeyboardBuffer+0x12c>
						ring_put(ouroboros, 0x0D);
    411e:	f8df a15c 	ldr.w	sl, [pc, #348]	; 427c <printKeyboardBuffer+0x2c8>
    4122:	210d      	movs	r1, #13
    4124:	f8da 0000 	ldr.w	r0, [sl]
    4128:	4d55      	ldr	r5, [pc, #340]	; (4280 <printKeyboardBuffer+0x2cc>)
    412a:	47a8      	blx	r5
						ring_put(ouroboros, 0x0A);
    412c:	210a      	movs	r1, #10
    412e:	f8da 0000 	ldr.w	r0, [sl]
    4132:	47a8      	blx	r5
    4134:	e7d4      	b.n	40e0 <printKeyboardBuffer+0x12c>
					sendChar(0x0A);
    4136:	200a      	movs	r0, #10
    4138:	4b4b      	ldr	r3, [pc, #300]	; (4268 <printKeyboardBuffer+0x2b4>)
    413a:	4798      	blx	r3
					if(localEcho)
    413c:	4b4b      	ldr	r3, [pc, #300]	; (426c <printKeyboardBuffer+0x2b8>)
    413e:	781b      	ldrb	r3, [r3, #0]
    4140:	2b00      	cmp	r3, #0
    4142:	d0d1      	beq.n	40e8 <printKeyboardBuffer+0x134>
						ring_put(ouroboros, 0x0A);
    4144:	210a      	movs	r1, #10
    4146:	4b4d      	ldr	r3, [pc, #308]	; (427c <printKeyboardBuffer+0x2c8>)
    4148:	6818      	ldr	r0, [r3, #0]
    414a:	4b4d      	ldr	r3, [pc, #308]	; (4280 <printKeyboardBuffer+0x2cc>)
    414c:	4798      	blx	r3
    414e:	e7cb      	b.n	40e8 <printKeyboardBuffer+0x134>
				capsLock = !capsLock;
    4150:	4b48      	ldr	r3, [pc, #288]	; (4274 <printKeyboardBuffer+0x2c0>)
    4152:	781b      	ldrb	r3, [r3, #0]
    4154:	f083 0301 	eor.w	r3, r3, #1
    4158:	4a46      	ldr	r2, [pc, #280]	; (4274 <printKeyboardBuffer+0x2c0>)
    415a:	7013      	strb	r3, [r2, #0]
    415c:	e76a      	b.n	4034 <printKeyboardBuffer+0x80>
				scrollLock = !scrollLock;
    415e:	4a4b      	ldr	r2, [pc, #300]	; (428c <printKeyboardBuffer+0x2d8>)
    4160:	7813      	ldrb	r3, [r2, #0]
    4162:	f083 0301 	eor.w	r3, r3, #1
    4166:	7013      	strb	r3, [r2, #0]
    4168:	e764      	b.n	4034 <printKeyboardBuffer+0x80>
				sendChar(0x1B);
    416a:	201b      	movs	r0, #27
    416c:	4b3e      	ldr	r3, [pc, #248]	; (4268 <printKeyboardBuffer+0x2b4>)
    416e:	4798      	blx	r3
				sendChar(0x5B);
    4170:	205b      	movs	r0, #91	; 0x5b
    4172:	4b3d      	ldr	r3, [pc, #244]	; (4268 <printKeyboardBuffer+0x2b4>)
    4174:	4798      	blx	r3
				sendChar(0x44);
    4176:	2044      	movs	r0, #68	; 0x44
    4178:	4b3b      	ldr	r3, [pc, #236]	; (4268 <printKeyboardBuffer+0x2b4>)
    417a:	4798      	blx	r3
				if(localEcho)
    417c:	4b3b      	ldr	r3, [pc, #236]	; (426c <printKeyboardBuffer+0x2b8>)
    417e:	781b      	ldrb	r3, [r3, #0]
    4180:	2b00      	cmp	r3, #0
    4182:	f43f af57 	beq.w	4034 <printKeyboardBuffer+0x80>
					ring_put(ouroboros, 0x1B);
    4186:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 427c <printKeyboardBuffer+0x2c8>
    418a:	211b      	movs	r1, #27
    418c:	f8da 0000 	ldr.w	r0, [sl]
    4190:	4d3b      	ldr	r5, [pc, #236]	; (4280 <printKeyboardBuffer+0x2cc>)
    4192:	47a8      	blx	r5
					ring_put(ouroboros, 0x5B);
    4194:	215b      	movs	r1, #91	; 0x5b
    4196:	f8da 0000 	ldr.w	r0, [sl]
    419a:	47a8      	blx	r5
					ring_put(ouroboros, 0x44);
    419c:	2144      	movs	r1, #68	; 0x44
    419e:	f8da 0000 	ldr.w	r0, [sl]
    41a2:	47a8      	blx	r5
    41a4:	e746      	b.n	4034 <printKeyboardBuffer+0x80>
				sendChar(0x1B);
    41a6:	201b      	movs	r0, #27
    41a8:	4b2f      	ldr	r3, [pc, #188]	; (4268 <printKeyboardBuffer+0x2b4>)
    41aa:	4798      	blx	r3
				sendChar(0x5B);
    41ac:	205b      	movs	r0, #91	; 0x5b
    41ae:	4b2e      	ldr	r3, [pc, #184]	; (4268 <printKeyboardBuffer+0x2b4>)
    41b0:	4798      	blx	r3
				sendChar(0x42);
    41b2:	2042      	movs	r0, #66	; 0x42
    41b4:	4b2c      	ldr	r3, [pc, #176]	; (4268 <printKeyboardBuffer+0x2b4>)
    41b6:	4798      	blx	r3
				if(localEcho)
    41b8:	4b2c      	ldr	r3, [pc, #176]	; (426c <printKeyboardBuffer+0x2b8>)
    41ba:	781b      	ldrb	r3, [r3, #0]
    41bc:	2b00      	cmp	r3, #0
    41be:	f43f af39 	beq.w	4034 <printKeyboardBuffer+0x80>
					ring_put(ouroboros, 0x1B);
    41c2:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 427c <printKeyboardBuffer+0x2c8>
    41c6:	211b      	movs	r1, #27
    41c8:	f8da 0000 	ldr.w	r0, [sl]
    41cc:	4d2c      	ldr	r5, [pc, #176]	; (4280 <printKeyboardBuffer+0x2cc>)
    41ce:	47a8      	blx	r5
					ring_put(ouroboros, 0x5B);
    41d0:	215b      	movs	r1, #91	; 0x5b
    41d2:	f8da 0000 	ldr.w	r0, [sl]
    41d6:	47a8      	blx	r5
					ring_put(ouroboros, 0x42);
    41d8:	2142      	movs	r1, #66	; 0x42
    41da:	f8da 0000 	ldr.w	r0, [sl]
    41de:	47a8      	blx	r5
    41e0:	e728      	b.n	4034 <printKeyboardBuffer+0x80>
				sendChar(0x1B);
    41e2:	201b      	movs	r0, #27
    41e4:	4b20      	ldr	r3, [pc, #128]	; (4268 <printKeyboardBuffer+0x2b4>)
    41e6:	4798      	blx	r3
				sendChar(0x5B);
    41e8:	205b      	movs	r0, #91	; 0x5b
    41ea:	4b1f      	ldr	r3, [pc, #124]	; (4268 <printKeyboardBuffer+0x2b4>)
    41ec:	4798      	blx	r3
				sendChar(0x41);
    41ee:	2041      	movs	r0, #65	; 0x41
    41f0:	4b1d      	ldr	r3, [pc, #116]	; (4268 <printKeyboardBuffer+0x2b4>)
    41f2:	4798      	blx	r3
				if(localEcho)
    41f4:	4b1d      	ldr	r3, [pc, #116]	; (426c <printKeyboardBuffer+0x2b8>)
    41f6:	781b      	ldrb	r3, [r3, #0]
    41f8:	2b00      	cmp	r3, #0
    41fa:	f43f af1b 	beq.w	4034 <printKeyboardBuffer+0x80>
					ring_put(ouroboros, 0x1B);
    41fe:	f8df a07c 	ldr.w	sl, [pc, #124]	; 427c <printKeyboardBuffer+0x2c8>
    4202:	211b      	movs	r1, #27
    4204:	f8da 0000 	ldr.w	r0, [sl]
    4208:	4d1d      	ldr	r5, [pc, #116]	; (4280 <printKeyboardBuffer+0x2cc>)
    420a:	47a8      	blx	r5
					ring_put(ouroboros, 0x5B);
    420c:	215b      	movs	r1, #91	; 0x5b
    420e:	f8da 0000 	ldr.w	r0, [sl]
    4212:	47a8      	blx	r5
					ring_put(ouroboros, 0x41);
    4214:	2141      	movs	r1, #65	; 0x41
    4216:	f8da 0000 	ldr.w	r0, [sl]
    421a:	47a8      	blx	r5
    421c:	e70a      	b.n	4034 <printKeyboardBuffer+0x80>
				sendChar(0x1B);
    421e:	201b      	movs	r0, #27
    4220:	4b11      	ldr	r3, [pc, #68]	; (4268 <printKeyboardBuffer+0x2b4>)
    4222:	4798      	blx	r3
				sendChar(0x5B);
    4224:	205b      	movs	r0, #91	; 0x5b
    4226:	4b10      	ldr	r3, [pc, #64]	; (4268 <printKeyboardBuffer+0x2b4>)
    4228:	4798      	blx	r3
				sendChar(0x43);
    422a:	2043      	movs	r0, #67	; 0x43
    422c:	4b0e      	ldr	r3, [pc, #56]	; (4268 <printKeyboardBuffer+0x2b4>)
    422e:	4798      	blx	r3
				if(localEcho)
    4230:	4b0e      	ldr	r3, [pc, #56]	; (426c <printKeyboardBuffer+0x2b8>)
    4232:	781b      	ldrb	r3, [r3, #0]
    4234:	2b00      	cmp	r3, #0
    4236:	f43f aefd 	beq.w	4034 <printKeyboardBuffer+0x80>
					ring_put(ouroboros, 0x1B);
    423a:	f8df a040 	ldr.w	sl, [pc, #64]	; 427c <printKeyboardBuffer+0x2c8>
    423e:	211b      	movs	r1, #27
    4240:	f8da 0000 	ldr.w	r0, [sl]
    4244:	4d0e      	ldr	r5, [pc, #56]	; (4280 <printKeyboardBuffer+0x2cc>)
    4246:	47a8      	blx	r5
					ring_put(ouroboros, 0x5B);
    4248:	215b      	movs	r1, #91	; 0x5b
    424a:	f8da 0000 	ldr.w	r0, [sl]
    424e:	47a8      	blx	r5
					ring_put(ouroboros, 0x43);
    4250:	2143      	movs	r1, #67	; 0x43
    4252:	f8da 0000 	ldr.w	r0, [sl]
    4256:	47a8      	blx	r5
    4258:	e6ec      	b.n	4034 <printKeyboardBuffer+0x80>
    425a:	bf00      	nop
    425c:	0000835c 	.word	0x0000835c
    4260:	00004f69 	.word	0x00004f69
    4264:	20000040 	.word	0x20000040
    4268:	00001f25 	.word	0x00001f25
    426c:	20000198 	.word	0x20000198
    4270:	00003f89 	.word	0x00003f89
    4274:	20000561 	.word	0x20000561
    4278:	00001b8d 	.word	0x00001b8d
    427c:	20000588 	.word	0x20000588
    4280:	0000014b 	.word	0x0000014b
    4284:	200004e6 	.word	0x200004e6
    4288:	20000194 	.word	0x20000194
    428c:	20000581 	.word	0x20000581
    4290:	2000002c 	.word	0x2000002c
					sendChar(controlCase[scanCodeBuffer[i]]);
    4294:	ab02      	add	r3, sp, #8
    4296:	5d58      	ldrb	r0, [r3, r5]
    4298:	4b1e      	ldr	r3, [pc, #120]	; (4314 <printKeyboardBuffer+0x360>)
    429a:	4798      	blx	r3
					if(localEcho)
    429c:	4b1e      	ldr	r3, [pc, #120]	; (4318 <printKeyboardBuffer+0x364>)
    429e:	781b      	ldrb	r3, [r3, #0]
    42a0:	2b00      	cmp	r3, #0
    42a2:	f43f aec7 	beq.w	4034 <printKeyboardBuffer+0x80>
						ring_put(ouroboros, controlCase[scanCodeBuffer[i]]);
    42a6:	7823      	ldrb	r3, [r4, #0]
    42a8:	aa02      	add	r2, sp, #8
    42aa:	5cd1      	ldrb	r1, [r2, r3]
    42ac:	4b1b      	ldr	r3, [pc, #108]	; (431c <printKeyboardBuffer+0x368>)
    42ae:	6818      	ldr	r0, [r3, #0]
    42b0:	4b1b      	ldr	r3, [pc, #108]	; (4320 <printKeyboardBuffer+0x36c>)
    42b2:	4798      	blx	r3
    42b4:	e6be      	b.n	4034 <printKeyboardBuffer+0x80>
					sendChar(capsLockCase[scanCodeBuffer[i]]);
    42b6:	ab4a      	add	r3, sp, #296	; 0x128
    42b8:	441d      	add	r5, r3
    42ba:	f815 0cd8 	ldrb.w	r0, [r5, #-216]
    42be:	4b15      	ldr	r3, [pc, #84]	; (4314 <printKeyboardBuffer+0x360>)
    42c0:	4798      	blx	r3
					if(localEcho)
    42c2:	4b15      	ldr	r3, [pc, #84]	; (4318 <printKeyboardBuffer+0x364>)
    42c4:	781b      	ldrb	r3, [r3, #0]
    42c6:	2b00      	cmp	r3, #0
    42c8:	f43f aeb4 	beq.w	4034 <printKeyboardBuffer+0x80>
						parseChar(capsLockCase[scanCodeBuffer[i]]);
    42cc:	7823      	ldrb	r3, [r4, #0]
    42ce:	aa4a      	add	r2, sp, #296	; 0x128
    42d0:	4413      	add	r3, r2
    42d2:	f813 0cd8 	ldrb.w	r0, [r3, #-216]
    42d6:	4b13      	ldr	r3, [pc, #76]	; (4324 <printKeyboardBuffer+0x370>)
    42d8:	4798      	blx	r3
    42da:	e6ab      	b.n	4034 <printKeyboardBuffer+0x80>
					sendChar(noCase[scanCodeBuffer[i]]);
    42dc:	ab4a      	add	r3, sp, #296	; 0x128
    42de:	441d      	add	r5, r3
    42e0:	f815 0c48 	ldrb.w	r0, [r5, #-72]
    42e4:	4b0b      	ldr	r3, [pc, #44]	; (4314 <printKeyboardBuffer+0x360>)
    42e6:	4798      	blx	r3
					if(localEcho)
    42e8:	4b0b      	ldr	r3, [pc, #44]	; (4318 <printKeyboardBuffer+0x364>)
    42ea:	781b      	ldrb	r3, [r3, #0]
    42ec:	2b00      	cmp	r3, #0
    42ee:	f43f aea1 	beq.w	4034 <printKeyboardBuffer+0x80>
						parseChar(noCase[scanCodeBuffer[i]]);
    42f2:	7823      	ldrb	r3, [r4, #0]
    42f4:	aa4a      	add	r2, sp, #296	; 0x128
    42f6:	4413      	add	r3, r2
    42f8:	f813 0c48 	ldrb.w	r0, [r3, #-72]
    42fc:	4b09      	ldr	r3, [pc, #36]	; (4324 <printKeyboardBuffer+0x370>)
    42fe:	4798      	blx	r3
    4300:	e698      	b.n	4034 <printKeyboardBuffer+0x80>
		scanCodeBuffer[i] = 0xFF;
    4302:	23ff      	movs	r3, #255	; 0xff
    4304:	f807 3f01 	strb.w	r3, [r7, #1]!
	for(int i = 0 ; i < 20 ; i++)
    4308:	42b7      	cmp	r7, r6
    430a:	d1fb      	bne.n	4304 <printKeyboardBuffer+0x350>
}
    430c:	b04b      	add	sp, #300	; 0x12c
    430e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4312:	bf00      	nop
    4314:	00001f25 	.word	0x00001f25
    4318:	20000198 	.word	0x20000198
    431c:	20000588 	.word	0x20000588
    4320:	0000014b 	.word	0x0000014b
    4324:	00001b8d 	.word	0x00001b8d

00004328 <removeFromKeyDown>:

void removeFromKeyDown(int scancode)
{
    4328:	b410      	push	{r4}
    432a:	4b06      	ldr	r3, [pc, #24]	; (4344 <removeFromKeyDown+0x1c>)
    432c:	f103 0114 	add.w	r1, r3, #20
	for(int i = 0 ; i < 20 ; i++)
	{
		if(keyDownBuffer[i] == scancode)
		{
			keyDownBuffer[i] = 0xFF;
    4330:	24ff      	movs	r4, #255	; 0xff
		if(keyDownBuffer[i] == scancode)
    4332:	781a      	ldrb	r2, [r3, #0]
    4334:	4282      	cmp	r2, r0
			keyDownBuffer[i] = 0xFF;
    4336:	bf08      	it	eq
    4338:	701c      	strbeq	r4, [r3, #0]
    433a:	3301      	adds	r3, #1
	for(int i = 0 ; i < 20 ; i++)
    433c:	428b      	cmp	r3, r1
    433e:	d1f8      	bne.n	4332 <removeFromKeyDown+0xa>
		}
	}
}
    4340:	bc10      	pop	{r4}
    4342:	4770      	bx	lr
    4344:	2000002c 	.word	0x2000002c

00004348 <readKeyboard>:
{
    4348:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    434c:	4a65      	ldr	r2, [pc, #404]	; (44e4 <readKeyboard+0x19c>)
    434e:	1f17      	subs	r7, r2, #4
    4350:	f502 728a 	add.w	r2, r2, #276	; 0x114
    4354:	463b      	mov	r3, r7
		scanCodes[i] = 0xFF;
    4356:	21ff      	movs	r1, #255	; 0xff
    4358:	f843 1f04 	str.w	r1, [r3, #4]!
	for(i = 0 ; i < 70 ; i++)
    435c:	4293      	cmp	r3, r2
    435e:	d1fb      	bne.n	4358 <readKeyboard+0x10>
	PORT->Group[0].WRCONFIG.bit.DRVSTR = 1;
    4360:	4a61      	ldr	r2, [pc, #388]	; (44e8 <readKeyboard+0x1a0>)
    4362:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4364:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    4368:	6293      	str	r3, [r2, #40]	; 0x28
    436a:	4a60      	ldr	r2, [pc, #384]	; (44ec <readKeyboard+0x1a4>)
    436c:	3218      	adds	r2, #24
    436e:	f1a2 081c 	sub.w	r8, r2, #28
		REG_PORT_DIRSET0 = kb_col[i];
    4372:	485f      	ldr	r0, [pc, #380]	; (44f0 <readKeyboard+0x1a8>)
		REG_PORT_OUTCLR0 = kb_col[i];
    4374:	495f      	ldr	r1, [pc, #380]	; (44f4 <readKeyboard+0x1ac>)
		REG_PORT_DIRSET0 = kb_col[i];
    4376:	f8d8 3004 	ldr.w	r3, [r8, #4]
    437a:	6003      	str	r3, [r0, #0]
		REG_PORT_OUTCLR0 = kb_col[i];
    437c:	f858 3f04 	ldr.w	r3, [r8, #4]!
    4380:	600b      	str	r3, [r1, #0]
	for (i = 0; i < NUM_COL; i++) {
    4382:	4590      	cmp	r8, r2
    4384:	d1f7      	bne.n	4376 <readKeyboard+0x2e>
    4386:	f8df e190 	ldr.w	lr, [pc, #400]	; 4518 <readKeyboard+0x1d0>
    438a:	495b      	ldr	r1, [pc, #364]	; (44f8 <readKeyboard+0x1b0>)
    438c:	f10e 0628 	add.w	r6, lr, #40	; 0x28
    4390:	4675      	mov	r5, lr
		REG_PORT_DIRCLR0 = kb_row[i];
    4392:	4c5a      	ldr	r4, [pc, #360]	; (44fc <readKeyboard+0x1b4>)
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.PULLEN = 1;
    4394:	4854      	ldr	r0, [pc, #336]	; (44e8 <readKeyboard+0x1a0>)
		REG_PORT_DIRCLR0 = kb_row[i];
    4396:	f855 3b04 	ldr.w	r3, [r5], #4
    439a:	6023      	str	r3, [r4, #0]
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.PULLEN = 1;
    439c:	f851 3b04 	ldr.w	r3, [r1], #4
    43a0:	4403      	add	r3, r0
    43a2:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    43a6:	f042 0204 	orr.w	r2, r2, #4
    43aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.INEN = 1;
    43ae:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    43b2:	f042 0202 	orr.w	r2, r2, #2
    43b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	for (i = 0; i < NUM_ROW; i++) {
    43ba:	42b5      	cmp	r5, r6
    43bc:	d1eb      	bne.n	4396 <readKeyboard+0x4e>
    43be:	f8df a144 	ldr.w	sl, [pc, #324]	; 4504 <readKeyboard+0x1bc>
    43c2:	f04f 0900 	mov.w	r9, #0
    43c6:	464a      	mov	r2, r9
		REG_PORT_OUTSET0 = kb_col[i];
    43c8:	f8df b150 	ldr.w	fp, [pc, #336]	; 451c <readKeyboard+0x1d4>
			if((PORT->Group[0].IN.reg & kb_row[j]) != 0) {
    43cc:	4e46      	ldr	r6, [pc, #280]	; (44e8 <readKeyboard+0x1a0>)
				scanCodes[scanCodeIndex] = (i * NUM_ROW) + j;
    43ce:	f8df c114 	ldr.w	ip, [pc, #276]	; 44e4 <readKeyboard+0x19c>
		REG_PORT_OUTSET0 = kb_col[i];
    43d2:	f8da 3004 	ldr.w	r3, [sl, #4]
    43d6:	f8cb 3000 	str.w	r3, [fp]
    43da:	4649      	mov	r1, r9
    43dc:	4673      	mov	r3, lr
			if((PORT->Group[0].IN.reg & kb_row[j]) != 0) {
    43de:	6a34      	ldr	r4, [r6, #32]
    43e0:	f853 0b04 	ldr.w	r0, [r3], #4
    43e4:	4204      	tst	r4, r0
				scanCodes[scanCodeIndex] = (i * NUM_ROW) + j;
    43e6:	bf1c      	itt	ne
    43e8:	f84c 1022 	strne.w	r1, [ip, r2, lsl #2]
				scanCodeIndex++;
    43ec:	3201      	addne	r2, #1
    43ee:	3101      	adds	r1, #1
		for (j = 0; j < NUM_ROW; j++) {	
    43f0:	42ab      	cmp	r3, r5
    43f2:	d1f4      	bne.n	43de <readKeyboard+0x96>
		REG_PORT_OUTCLR0 = kb_col[i];
    43f4:	f85a 1f04 	ldr.w	r1, [sl, #4]!
    43f8:	483e      	ldr	r0, [pc, #248]	; (44f4 <readKeyboard+0x1ac>)
    43fa:	6001      	str	r1, [r0, #0]
    43fc:	f109 090a 	add.w	r9, r9, #10
	for (i = 0; i < NUM_COL; i++) {
    4400:	f1b9 0f46 	cmp.w	r9, #70	; 0x46
    4404:	d1e5      	bne.n	43d2 <readKeyboard+0x8a>
    4406:	4671      	mov	r1, lr
		REG_PORT_DIRSET0 = kb_row[i];
    4408:	4d39      	ldr	r5, [pc, #228]	; (44f0 <readKeyboard+0x1a8>)
		REG_PORT_OUTCLR0 = kb_row[i];
    440a:	4604      	mov	r4, r0
		REG_PORT_DIRSET0 = kb_row[i];
    440c:	6808      	ldr	r0, [r1, #0]
    440e:	6028      	str	r0, [r5, #0]
		REG_PORT_OUTCLR0 = kb_row[i];
    4410:	f851 0b04 	ldr.w	r0, [r1], #4
    4414:	6020      	str	r0, [r4, #0]
	for (i = 0; i < NUM_ROW; i++) {
    4416:	4299      	cmp	r1, r3
    4418:	d1f8      	bne.n	440c <readKeyboard+0xc4>
    441a:	4839      	ldr	r0, [pc, #228]	; (4500 <readKeyboard+0x1b8>)
    441c:	4d39      	ldr	r5, [pc, #228]	; (4504 <readKeyboard+0x1bc>)
		REG_PORT_DIRCLR0 = kb_col[i];
    441e:	4e37      	ldr	r6, [pc, #220]	; (44fc <readKeyboard+0x1b4>)
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.PULLEN = 1;
    4420:	4c31      	ldr	r4, [pc, #196]	; (44e8 <readKeyboard+0x1a0>)
		REG_PORT_DIRCLR0 = kb_col[i];
    4422:	f855 3f04 	ldr.w	r3, [r5, #4]!
    4426:	6033      	str	r3, [r6, #0]
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.PULLEN = 1;
    4428:	f850 3f04 	ldr.w	r3, [r0, #4]!
    442c:	4423      	add	r3, r4
    442e:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    4432:	f041 0104 	orr.w	r1, r1, #4
    4436:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.INEN = 1;
    443a:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    443e:	f041 0102 	orr.w	r1, r1, #2
    4442:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
	for (i = 0; i < NUM_COL; i++) {
    4446:	4545      	cmp	r5, r8
    4448:	d1eb      	bne.n	4422 <readKeyboard+0xda>
    444a:	f04f 0c00 	mov.w	ip, #0
		REG_PORT_OUTSET0 = kb_row[i];
    444e:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 451c <readKeyboard+0x1d4>
			if((PORT->Group[0].IN.reg & kb_col[j]) != 0)
    4452:	4e25      	ldr	r6, [pc, #148]	; (44e8 <readKeyboard+0x1a0>)
				scanCodes[scanCodeIndex] = (j * NUM_ROW) + i;
    4454:	f8df 808c 	ldr.w	r8, [pc, #140]	; 44e4 <readKeyboard+0x19c>
		REG_PORT_OUTCLR0 = kb_row[i];
    4458:	f8df a098 	ldr.w	sl, [pc, #152]	; 44f4 <readKeyboard+0x1ac>
    445c:	e00a      	b.n	4474 <readKeyboard+0x12c>
    445e:	f8d9 3000 	ldr.w	r3, [r9]
    4462:	f10e 0e04 	add.w	lr, lr, #4
    4466:	f8ca 3000 	str.w	r3, [sl]
	for (i = 0; i < NUM_ROW; i++) {
    446a:	f10c 0c01 	add.w	ip, ip, #1
    446e:	f1bc 0f0a 	cmp.w	ip, #10
    4472:	d012      	beq.n	449a <readKeyboard+0x152>
    4474:	46f1      	mov	r9, lr
		REG_PORT_OUTSET0 = kb_row[i];
    4476:	f8de 3000 	ldr.w	r3, [lr]
    447a:	f8cb 3000 	str.w	r3, [fp]
    447e:	4661      	mov	r1, ip
    4480:	4b20      	ldr	r3, [pc, #128]	; (4504 <readKeyboard+0x1bc>)
			if((PORT->Group[0].IN.reg & kb_col[j]) != 0)
    4482:	6a34      	ldr	r4, [r6, #32]
    4484:	f853 0f04 	ldr.w	r0, [r3, #4]!
    4488:	4204      	tst	r4, r0
				scanCodes[scanCodeIndex] = (j * NUM_ROW) + i;
    448a:	bf1c      	itt	ne
    448c:	f848 1022 	strne.w	r1, [r8, r2, lsl #2]
				scanCodeIndex++;
    4490:	3201      	addne	r2, #1
    4492:	310a      	adds	r1, #10
		for (j = 0; j < NUM_COL; j++) {
    4494:	429d      	cmp	r5, r3
    4496:	d1f4      	bne.n	4482 <readKeyboard+0x13a>
    4498:	e7e1      	b.n	445e <readKeyboard+0x116>
	for(i = 0 ; i < scanCodeIndex ; i++)
    449a:	2a00      	cmp	r2, #0
    449c:	dd0c      	ble.n	44b8 <readKeyboard+0x170>
    449e:	4b1a      	ldr	r3, [pc, #104]	; (4508 <readKeyboard+0x1c0>)
    44a0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    44a4:	3a01      	subs	r2, #1
    44a6:	490f      	ldr	r1, [pc, #60]	; (44e4 <readKeyboard+0x19c>)
    44a8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
		scanCodeBuffer[i] = scanCodes[i];	
    44ac:	f857 2f04 	ldr.w	r2, [r7, #4]!
    44b0:	f803 2f01 	strb.w	r2, [r3, #1]!
	for(i = 0 ; i < scanCodeIndex ; i++)
    44b4:	42b9      	cmp	r1, r7
    44b6:	d1f9      	bne.n	44ac <readKeyboard+0x164>
		REG_PORT_OUTSET0 = kb_row[i];
    44b8:	2400      	movs	r4, #0
		if(keyDown(i) && !scanCodesContains(i))
    44ba:	4d14      	ldr	r5, [pc, #80]	; (450c <readKeyboard+0x1c4>)
    44bc:	4e14      	ldr	r6, [pc, #80]	; (4510 <readKeyboard+0x1c8>)
			removeFromKeyDown(i);
    44be:	4f15      	ldr	r7, [pc, #84]	; (4514 <readKeyboard+0x1cc>)
    44c0:	e002      	b.n	44c8 <readKeyboard+0x180>
	for(i = 0; i < 70; i++)
    44c2:	3401      	adds	r4, #1
    44c4:	2c46      	cmp	r4, #70	; 0x46
    44c6:	d00a      	beq.n	44de <readKeyboard+0x196>
		if(keyDown(i) && !scanCodesContains(i))
    44c8:	4620      	mov	r0, r4
    44ca:	47a8      	blx	r5
    44cc:	2800      	cmp	r0, #0
    44ce:	d0f8      	beq.n	44c2 <readKeyboard+0x17a>
    44d0:	4620      	mov	r0, r4
    44d2:	47b0      	blx	r6
    44d4:	2800      	cmp	r0, #0
    44d6:	d1f4      	bne.n	44c2 <readKeyboard+0x17a>
			removeFromKeyDown(i);
    44d8:	4620      	mov	r0, r4
    44da:	47b8      	blx	r7
    44dc:	e7f1      	b.n	44c2 <readKeyboard+0x17a>
}
    44de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    44e2:	bf00      	nop
    44e4:	20000054 	.word	0x20000054
    44e8:	41004400 	.word	0x41004400
    44ec:	0000847c 	.word	0x0000847c
    44f0:	41004408 	.word	0x41004408
    44f4:	41004414 	.word	0x41004414
    44f8:	000084dc 	.word	0x000084dc
    44fc:	41004404 	.word	0x41004404
    4500:	00008494 	.word	0x00008494
    4504:	00008478 	.word	0x00008478
    4508:	2000003f 	.word	0x2000003f
    450c:	00003f89 	.word	0x00003f89
    4510:	00003f5d 	.word	0x00003f5d
    4514:	00004329 	.word	0x00004329
    4518:	000084b4 	.word	0x000084b4
    451c:	41004418 	.word	0x41004418

00004520 <setColorRGB>:
uint16_t fore_Color_High, fore_Color_Low;
uint16_t back_Color_High, back_Color_Low;

void setColorRGB(uint8_t r, uint8_t g, uint8_t b)
{
	fore_Color_High = ((r&248)|g>>5);
    4520:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
    4524:	ea40 1051 	orr.w	r0, r0, r1, lsr #5
    4528:	4b04      	ldr	r3, [pc, #16]	; (453c <setColorRGB+0x1c>)
    452a:	8018      	strh	r0, [r3, #0]
	fore_Color_Low = ((g&28)<<3|b>>3);
    452c:	00c9      	lsls	r1, r1, #3
    452e:	f001 01e0 	and.w	r1, r1, #224	; 0xe0
    4532:	ea41 01d2 	orr.w	r1, r1, r2, lsr #3
    4536:	4b02      	ldr	r3, [pc, #8]	; (4540 <setColorRGB+0x20>)
    4538:	8019      	strh	r1, [r3, #0]
    453a:	4770      	bx	lr
    453c:	200032ee 	.word	0x200032ee
    4540:	200032f0 	.word	0x200032f0

00004544 <setBackColorRGB>:
}

void setBackColorRGB(unsigned char r,
unsigned char g, unsigned char b)
{
	back_Color_High = ((r&248)|g>>5);
    4544:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
    4548:	ea40 1051 	orr.w	r0, r0, r1, lsr #5
    454c:	4b04      	ldr	r3, [pc, #16]	; (4560 <setBackColorRGB+0x1c>)
    454e:	8018      	strh	r0, [r3, #0]
	back_Color_Low = ((g&28)<<3|b>>3);
    4550:	00c9      	lsls	r1, r1, #3
    4552:	f001 01e0 	and.w	r1, r1, #224	; 0xe0
    4556:	ea41 01d2 	orr.w	r1, r1, r2, lsr #3
    455a:	4b02      	ldr	r3, [pc, #8]	; (4564 <setBackColorRGB+0x20>)
    455c:	8019      	strh	r1, [r3, #0]
    455e:	4770      	bx	lr
    4560:	200032f2 	.word	0x200032f2
    4564:	200032ec 	.word	0x200032ec

00004568 <LCD_Fast_Fill>:
	(((long)(x2-x1)+1)*((long)(y2-y1)+1)));
	REG_PORT_OUTSET1 = LCD_CS;
}

void LCD_Fast_Fill(int ch, int cl, long pix)
{
    4568:	b470      	push	{r4, r5, r6}
	int blocks;
	
	
	REG_PORT_OUTCLR1 = 0x0000ffff;
    456a:	f64f 74ff 	movw	r4, #65535	; 0xffff
    456e:	4b1a      	ldr	r3, [pc, #104]	; (45d8 <LCD_Fast_Fill+0x70>)
    4570:	601c      	str	r4, [r3, #0]
	REG_PORT_OUTSET1 = (ch << 8) | cl;
    4572:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
    4576:	3304      	adds	r3, #4
    4578:	6019      	str	r1, [r3, #0]

	blocks = pix/16;
    457a:	4616      	mov	r6, r2
    457c:	2a00      	cmp	r2, #0
    457e:	bfb8      	it	lt
    4580:	f102 060f 	addlt.w	r6, r2, #15
    4584:	1136      	asrs	r6, r6, #4
	for (int i=0; i<blocks; i++)
    4586:	2e00      	cmp	r6, #0
    4588:	dd0c      	ble.n	45a4 <LCD_Fast_Fill+0x3c>
    458a:	2500      	movs	r5, #0
	{
		for (int j=0; j<16; j++)
		{
			REG_PORT_OUTCLR1 = LCD_WR;
    458c:	4c12      	ldr	r4, [pc, #72]	; (45d8 <LCD_Fast_Fill+0x70>)
    458e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
			REG_PORT_OUTSET1 = LCD_WR;
    4592:	4812      	ldr	r0, [pc, #72]	; (45dc <LCD_Fast_Fill+0x74>)
{
    4594:	2310      	movs	r3, #16
			REG_PORT_OUTCLR1 = LCD_WR;
    4596:	6021      	str	r1, [r4, #0]
			REG_PORT_OUTSET1 = LCD_WR;
    4598:	6001      	str	r1, [r0, #0]
		for (int j=0; j<16; j++)
    459a:	3b01      	subs	r3, #1
    459c:	d1fb      	bne.n	4596 <LCD_Fast_Fill+0x2e>
	for (int i=0; i<blocks; i++)
    459e:	3501      	adds	r5, #1
    45a0:	42ae      	cmp	r6, r5
    45a2:	d1f7      	bne.n	4594 <LCD_Fast_Fill+0x2c>
		}
	}
	
	if ((pix % 16) != 0)
    45a4:	f012 0f0f 	tst.w	r2, #15
    45a8:	d014      	beq.n	45d4 <LCD_Fast_Fill+0x6c>
	for (int i=0; i<(pix % 16)+1; i++)
    45aa:	4253      	negs	r3, r2
    45ac:	f002 020f 	and.w	r2, r2, #15
    45b0:	f003 030f 	and.w	r3, r3, #15
    45b4:	bf58      	it	pl
    45b6:	425a      	negpl	r2, r3
    45b8:	1c53      	adds	r3, r2, #1
    45ba:	2b00      	cmp	r3, #0
    45bc:	dd0a      	ble.n	45d4 <LCD_Fast_Fill+0x6c>
    45be:	461a      	mov	r2, r3
    45c0:	2300      	movs	r3, #0
	{
		REG_PORT_OUTCLR1 = LCD_WR;
    45c2:	4c05      	ldr	r4, [pc, #20]	; (45d8 <LCD_Fast_Fill+0x70>)
    45c4:	f44f 3100 	mov.w	r1, #131072	; 0x20000
		REG_PORT_OUTSET1 = LCD_WR;
    45c8:	4804      	ldr	r0, [pc, #16]	; (45dc <LCD_Fast_Fill+0x74>)
		REG_PORT_OUTCLR1 = LCD_WR;
    45ca:	6021      	str	r1, [r4, #0]
		REG_PORT_OUTSET1 = LCD_WR;
    45cc:	6001      	str	r1, [r0, #0]
	for (int i=0; i<(pix % 16)+1; i++)
    45ce:	3301      	adds	r3, #1
    45d0:	429a      	cmp	r2, r3
    45d2:	d1fa      	bne.n	45ca <LCD_Fast_Fill+0x62>
	}
}
    45d4:	bc70      	pop	{r4, r5, r6}
    45d6:	4770      	bx	lr
    45d8:	41004494 	.word	0x41004494
    45dc:	41004498 	.word	0x41004498

000045e0 <setXY>:
{
	setXY(0,0,display_X_size,display_Y_size);
}

void setXY(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
    45e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    45e4:	4681      	mov	r9, r0
    45e6:	460f      	mov	r7, r1
    45e8:	4690      	mov	r8, r2
    45ea:	461e      	mov	r6, r3
	y1=display_Y_size-y1;
	y2=display_Y_size-y2;
	SwapUint16(y1, y2);
	*/
	
	LCD_Write_COM16(0x2a,0x00);
    45ec:	2100      	movs	r1, #0
    45ee:	202a      	movs	r0, #42	; 0x2a
    45f0:	4c18      	ldr	r4, [pc, #96]	; (4654 <setXY+0x74>)
    45f2:	47a0      	blx	r4
	LCD_Write_DATA8(x1>>8);
    45f4:	ea4f 2019 	mov.w	r0, r9, lsr #8
    45f8:	4d17      	ldr	r5, [pc, #92]	; (4658 <setXY+0x78>)
    45fa:	47a8      	blx	r5
	LCD_Write_COM16(0x2a,0x01);
    45fc:	2101      	movs	r1, #1
    45fe:	202a      	movs	r0, #42	; 0x2a
    4600:	47a0      	blx	r4
	LCD_Write_DATA8(x1);
    4602:	fa5f f089 	uxtb.w	r0, r9
    4606:	47a8      	blx	r5
	LCD_Write_COM16(0x2a,0x02);
    4608:	2102      	movs	r1, #2
    460a:	202a      	movs	r0, #42	; 0x2a
    460c:	47a0      	blx	r4
	LCD_Write_DATA8(x2>>8);
    460e:	ea4f 2018 	mov.w	r0, r8, lsr #8
    4612:	47a8      	blx	r5
	LCD_Write_COM16(0x2a,0x03);
    4614:	2103      	movs	r1, #3
    4616:	202a      	movs	r0, #42	; 0x2a
    4618:	47a0      	blx	r4
	LCD_Write_DATA8(x2);
    461a:	fa5f f088 	uxtb.w	r0, r8
    461e:	47a8      	blx	r5

	LCD_Write_COM16(0x2b,0x00);
    4620:	2100      	movs	r1, #0
    4622:	202b      	movs	r0, #43	; 0x2b
    4624:	47a0      	blx	r4
	LCD_Write_DATA8(y1>>8);
    4626:	0a38      	lsrs	r0, r7, #8
    4628:	47a8      	blx	r5
	LCD_Write_COM16(0x2b,0x01);
    462a:	2101      	movs	r1, #1
    462c:	202b      	movs	r0, #43	; 0x2b
    462e:	47a0      	blx	r4
	LCD_Write_DATA8(y1);
    4630:	b2f8      	uxtb	r0, r7
    4632:	47a8      	blx	r5
	LCD_Write_COM16(0x2b,0x02);
    4634:	2102      	movs	r1, #2
    4636:	202b      	movs	r0, #43	; 0x2b
    4638:	47a0      	blx	r4
	LCD_Write_DATA8(y2>>8);
    463a:	0a30      	lsrs	r0, r6, #8
    463c:	47a8      	blx	r5
	LCD_Write_COM16(0x2b,0x03);
    463e:	2103      	movs	r1, #3
    4640:	202b      	movs	r0, #43	; 0x2b
    4642:	47a0      	blx	r4
	LCD_Write_DATA8(y2);
    4644:	b2f0      	uxtb	r0, r6
    4646:	47a8      	blx	r5

	LCD_Write_COM16(0x2c,0x00);
    4648:	2100      	movs	r1, #0
    464a:	202c      	movs	r0, #44	; 0x2c
    464c:	47a0      	blx	r4
    464e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4652:	bf00      	nop
    4654:	00004775 	.word	0x00004775
    4658:	000047a5 	.word	0x000047a5

0000465c <fillRect>:
{
    465c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4660:	4606      	mov	r6, r0
    4662:	4689      	mov	r9, r1
    4664:	4615      	mov	r5, r2
    4666:	461c      	mov	r4, r3
	if (x1>x2)
    4668:	4290      	cmp	r0, r2
    466a:	dd01      	ble.n	4670 <fillRect+0x14>
		x1 = x2;
    466c:	4616      	mov	r6, r2
		x2 = temp;
    466e:	4605      	mov	r5, r0
	if (y1>y2)
    4670:	45a1      	cmp	r9, r4
    4672:	dd02      	ble.n	467a <fillRect+0x1e>
    4674:	4633      	mov	r3, r6
		x1 = x2;
    4676:	462e      	mov	r6, r5
		x2 = temp;
    4678:	461d      	mov	r5, r3
	REG_PORT_OUTCLR1 = LCD_CS;
    467a:	f44f 0880 	mov.w	r8, #4194304	; 0x400000
    467e:	4b0f      	ldr	r3, [pc, #60]	; (46bc <fillRect+0x60>)
    4680:	f8c3 8000 	str.w	r8, [r3]
	setXY(x1, y1, x2, y2);
    4684:	b2a3      	uxth	r3, r4
    4686:	b2aa      	uxth	r2, r5
    4688:	fa1f f189 	uxth.w	r1, r9
    468c:	b2b0      	uxth	r0, r6
    468e:	4f0c      	ldr	r7, [pc, #48]	; (46c0 <fillRect+0x64>)
    4690:	47b8      	blx	r7
	REG_PORT_OUTSET1 = LCD_DC;
    4692:	4f0c      	ldr	r7, [pc, #48]	; (46c4 <fillRect+0x68>)
    4694:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    4698:	603b      	str	r3, [r7, #0]
	(((long)(x2-x1)+1)*((long)(y2-y1)+1)));
    469a:	1bad      	subs	r5, r5, r6
    469c:	eba4 0409 	sub.w	r4, r4, r9
    46a0:	1c62      	adds	r2, r4, #1
	LCD_Fast_Fill(fore_Color_High, fore_Color_Low,
    46a2:	fb05 2202 	mla	r2, r5, r2, r2
    46a6:	4b08      	ldr	r3, [pc, #32]	; (46c8 <fillRect+0x6c>)
    46a8:	8819      	ldrh	r1, [r3, #0]
    46aa:	4b08      	ldr	r3, [pc, #32]	; (46cc <fillRect+0x70>)
    46ac:	8818      	ldrh	r0, [r3, #0]
    46ae:	4b08      	ldr	r3, [pc, #32]	; (46d0 <fillRect+0x74>)
    46b0:	4798      	blx	r3
	REG_PORT_OUTSET1 = LCD_CS;
    46b2:	f8c7 8000 	str.w	r8, [r7]
    46b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    46ba:	bf00      	nop
    46bc:	41004494 	.word	0x41004494
    46c0:	000045e1 	.word	0x000045e1
    46c4:	41004498 	.word	0x41004498
    46c8:	200032f0 	.word	0x200032f0
    46cc:	200032ee 	.word	0x200032ee
    46d0:	00004569 	.word	0x00004569

000046d4 <clrXY>:
{
    46d4:	b510      	push	{r4, lr}
	setXY(0,0,display_X_size,display_Y_size);
    46d6:	4b04      	ldr	r3, [pc, #16]	; (46e8 <clrXY+0x14>)
    46d8:	881b      	ldrh	r3, [r3, #0]
    46da:	4a04      	ldr	r2, [pc, #16]	; (46ec <clrXY+0x18>)
    46dc:	8812      	ldrh	r2, [r2, #0]
    46de:	2100      	movs	r1, #0
    46e0:	4608      	mov	r0, r1
    46e2:	4c03      	ldr	r4, [pc, #12]	; (46f0 <clrXY+0x1c>)
    46e4:	47a0      	blx	r4
    46e6:	bd10      	pop	{r4, pc}
    46e8:	2000016e 	.word	0x2000016e
    46ec:	2000016c 	.word	0x2000016c
    46f0:	000045e1 	.word	0x000045e1

000046f4 <clrScr>:
{
    46f4:	b508      	push	{r3, lr}
	REG_PORT_OUTCLR1 = LCD_CS;
    46f6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    46fa:	4b02      	ldr	r3, [pc, #8]	; (4704 <clrScr+0x10>)
    46fc:	601a      	str	r2, [r3, #0]
	clrXY();
    46fe:	4b02      	ldr	r3, [pc, #8]	; (4708 <clrScr+0x14>)
    4700:	4798      	blx	r3
    4702:	bd08      	pop	{r3, pc}
    4704:	41004494 	.word	0x41004494
    4708:	000046d5 	.word	0x000046d5

0000470c <setPixel>:
}

void setPixel(uint16_t color)
{
    470c:	b508      	push	{r3, lr}
	//it sets it to a 16-bit color.
	//LCD_Write_DATA16((color<<8),(color&0xFF)); 
	LCD_Write_DATA16((color>>8),(color&0xFF));
    470e:	b2c1      	uxtb	r1, r0
    4710:	0a00      	lsrs	r0, r0, #8
    4712:	4b01      	ldr	r3, [pc, #4]	; (4718 <setPixel+0xc>)
    4714:	4798      	blx	r3
    4716:	bd08      	pop	{r3, pc}
    4718:	0000478d 	.word	0x0000478d

0000471c <clearScreen>:
	LCD_Write_DATA8(0x80);
	REG_PORT_OUTSET1 = LCD_CS;
}
*/
void clearScreen(void)
{
    471c:	b510      	push	{r4, lr}
	fore_Color_High = ((r&248)|g>>5);
    471e:	2000      	movs	r0, #0
    4720:	4b05      	ldr	r3, [pc, #20]	; (4738 <clearScreen+0x1c>)
    4722:	8018      	strh	r0, [r3, #0]
	fore_Color_Low = ((g&28)<<3|b>>3);
    4724:	4b05      	ldr	r3, [pc, #20]	; (473c <clearScreen+0x20>)
    4726:	8018      	strh	r0, [r3, #0]
	setColorRGB(0,0,0);
	fillRect(0,0,display_Y_size,display_X_size);
    4728:	4b05      	ldr	r3, [pc, #20]	; (4740 <clearScreen+0x24>)
    472a:	881b      	ldrh	r3, [r3, #0]
    472c:	4a05      	ldr	r2, [pc, #20]	; (4744 <clearScreen+0x28>)
    472e:	8812      	ldrh	r2, [r2, #0]
    4730:	4601      	mov	r1, r0
    4732:	4c05      	ldr	r4, [pc, #20]	; (4748 <clearScreen+0x2c>)
    4734:	47a0      	blx	r4
    4736:	bd10      	pop	{r4, pc}
    4738:	200032ee 	.word	0x200032ee
    473c:	200032f0 	.word	0x200032f0
    4740:	2000016c 	.word	0x2000016c
    4744:	2000016e 	.word	0x2000016e
    4748:	0000465d 	.word	0x0000465d

0000474c <LCD_Write_Bus>:
	fillRect(0,0,799,489);
		
}

void LCD_Write_Bus(char VH, char VL)
{
    474c:	b410      	push	{r4}
	REG_PORT_OUTCLR1 = 0x0000ffff;
    474e:	4c07      	ldr	r4, [pc, #28]	; (476c <LCD_Write_Bus+0x20>)
    4750:	f64f 73ff 	movw	r3, #65535	; 0xffff
    4754:	6023      	str	r3, [r4, #0]
	REG_PORT_OUTSET1 = (VH << 8) | VL;
    4756:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
    475a:	4b05      	ldr	r3, [pc, #20]	; (4770 <LCD_Write_Bus+0x24>)
    475c:	6019      	str	r1, [r3, #0]
	REG_PORT_OUTCLR1 = LCD_WR;
    475e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    4762:	6022      	str	r2, [r4, #0]
	REG_PORT_OUTSET1 = LCD_WR;
    4764:	601a      	str	r2, [r3, #0]
}
    4766:	bc10      	pop	{r4}
    4768:	4770      	bx	lr
    476a:	bf00      	nop
    476c:	41004494 	.word	0x41004494
    4770:	41004498 	.word	0x41004498

00004774 <LCD_Write_COM16>:

void LCD_Write_COM16(char VH, char VL)
{
    4774:	b508      	push	{r3, lr}
	REG_PORT_OUTCLR1 = LCD_DC;
    4776:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    477a:	4b02      	ldr	r3, [pc, #8]	; (4784 <LCD_Write_COM16+0x10>)
    477c:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(VH,VL);
    477e:	4b02      	ldr	r3, [pc, #8]	; (4788 <LCD_Write_COM16+0x14>)
    4780:	4798      	blx	r3
    4782:	bd08      	pop	{r3, pc}
    4784:	41004494 	.word	0x41004494
    4788:	0000474d 	.word	0x0000474d

0000478c <LCD_Write_DATA16>:
	REG_PORT_OUTCLR1 = LCD_DC;
	LCD_Write_Bus(0x00, VL);
}

void LCD_Write_DATA16(char VH, char VL)
{
    478c:	b508      	push	{r3, lr}
	REG_PORT_OUTSET1 = LCD_DC;
    478e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    4792:	4b02      	ldr	r3, [pc, #8]	; (479c <LCD_Write_DATA16+0x10>)
    4794:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(VH,VL);
    4796:	4b02      	ldr	r3, [pc, #8]	; (47a0 <LCD_Write_DATA16+0x14>)
    4798:	4798      	blx	r3
    479a:	bd08      	pop	{r3, pc}
    479c:	41004498 	.word	0x41004498
    47a0:	0000474d 	.word	0x0000474d

000047a4 <LCD_Write_DATA8>:
}

void LCD_Write_DATA8(char VL)
{
    47a4:	b508      	push	{r3, lr}
	REG_PORT_OUTSET1 = LCD_DC;
    47a6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    47aa:	4b03      	ldr	r3, [pc, #12]	; (47b8 <LCD_Write_DATA8+0x14>)
    47ac:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(0x00, VL);
    47ae:	4601      	mov	r1, r0
    47b0:	2000      	movs	r0, #0
    47b2:	4b02      	ldr	r3, [pc, #8]	; (47bc <LCD_Write_DATA8+0x18>)
    47b4:	4798      	blx	r3
    47b6:	bd08      	pop	{r3, pc}
    47b8:	41004498 	.word	0x41004498
    47bc:	0000474d 	.word	0x0000474d

000047c0 <InitLCD>:
{
    47c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	REG_PORT_DIRSET1 = 0x0000ffff;		//LCD data bus, PB00 - PB15
    47c4:	4b83      	ldr	r3, [pc, #524]	; (49d4 <InitLCD+0x214>)
    47c6:	f64f 77ff 	movw	r7, #65535	; 0xffff
    47ca:	601f      	str	r7, [r3, #0]
	REG_PORT_DIRSET1 = LCD_Reset;
    47cc:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    47d0:	601d      	str	r5, [r3, #0]
	REG_PORT_DIRSET1 = LCD_CS;
    47d2:	f44f 0680 	mov.w	r6, #4194304	; 0x400000
    47d6:	601e      	str	r6, [r3, #0]
	REG_PORT_DIRSET1 = LCD_WR;
    47d8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    47dc:	6018      	str	r0, [r3, #0]
	REG_PORT_DIRSET1 = LCD_DC;
    47de:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    47e2:	6019      	str	r1, [r3, #0]
	REG_PORT_DIRSET1 = LCD_RD;
    47e4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    47e8:	601a      	str	r2, [r3, #0]
	REG_PORT_OUTCLR1 = 0x0000ffff;
    47ea:	4c7b      	ldr	r4, [pc, #492]	; (49d8 <InitLCD+0x218>)
    47ec:	6027      	str	r7, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_Reset;
    47ee:	6025      	str	r5, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_CS;
    47f0:	6026      	str	r6, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_WR;
    47f2:	6020      	str	r0, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_DC;
    47f4:	6021      	str	r1, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_RD;
    47f6:	6022      	str	r2, [r4, #0]
	REG_PORT_DIRSET1 = PORT_PB16;
    47f8:	601a      	str	r2, [r3, #0]
	REG_PORT_OUTSET1 = PORT_PB16;
    47fa:	4f78      	ldr	r7, [pc, #480]	; (49dc <InitLCD+0x21c>)
    47fc:	603a      	str	r2, [r7, #0]
	REG_PORT_OUTSET1 = LCD_Reset;
    47fe:	603d      	str	r5, [r7, #0]
	delay_ms(5);
    4800:	2005      	movs	r0, #5
    4802:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 49f4 <InitLCD+0x234>
    4806:	47c0      	blx	r8
	REG_PORT_OUTCLR1 = LCD_Reset;
    4808:	6025      	str	r5, [r4, #0]
	delay_ms(5);
    480a:	2005      	movs	r0, #5
    480c:	47c0      	blx	r8
	REG_PORT_OUTSET1 = LCD_Reset;
    480e:	603d      	str	r5, [r7, #0]
	REG_PORT_OUTCLR1 = LCD_CS;
    4810:	6026      	str	r6, [r4, #0]
    4812:	4f73      	ldr	r7, [pc, #460]	; (49e0 <InitLCD+0x220>)
    4814:	1e7c      	subs	r4, r7, #1
    4816:	4e73      	ldr	r6, [pc, #460]	; (49e4 <InitLCD+0x224>)
    4818:	4d73      	ldr	r5, [pc, #460]	; (49e8 <InitLCD+0x228>)
    481a:	3745      	adds	r7, #69	; 0x45
		REG_PORT_OUTCLR1 = LCD_DC;
    481c:	f8df b1b8 	ldr.w	fp, [pc, #440]	; 49d8 <InitLCD+0x218>
    4820:	f44f 0800 	mov.w	r8, #8388608	; 0x800000
    4824:	46c2      	mov	sl, r8
		REG_PORT_OUTSET1 = LCD_DC;
    4826:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 49dc <InitLCD+0x21c>
		REG_PORT_OUTCLR1 = LCD_DC;
    482a:	f8cb a000 	str.w	sl, [fp]
		LCD_Write_COM16(belial[i],mulciber[i]);
    482e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    4832:	f814 0f01 	ldrb.w	r0, [r4, #1]!
    4836:	4b6d      	ldr	r3, [pc, #436]	; (49ec <InitLCD+0x22c>)
    4838:	4798      	blx	r3
		REG_PORT_OUTSET1 = LCD_DC;
    483a:	f8c9 8000 	str.w	r8, [r9]
		LCD_Write_DATA8(lucifer[i]);
    483e:	f815 0f01 	ldrb.w	r0, [r5, #1]!
    4842:	4b6b      	ldr	r3, [pc, #428]	; (49f0 <InitLCD+0x230>)
    4844:	4798      	blx	r3
	for(int i = 0; i < 70; i++)
    4846:	42bc      	cmp	r4, r7
    4848:	d1ef      	bne.n	482a <InitLCD+0x6a>
    484a:	25d1      	movs	r5, #209	; 0xd1
    484c:	f8df a1b8 	ldr.w	sl, [pc, #440]	; 4a08 <InitLCD+0x248>
    4850:	f10a 0933 	add.w	r9, sl, #51	; 0x33
			LCD_Write_COM16(k,0x00);
    4854:	f8df 8194 	ldr.w	r8, [pc, #404]	; 49ec <InitLCD+0x22c>
    4858:	f10a 34ff 	add.w	r4, sl, #4294967295
    485c:	2700      	movs	r7, #0
			LCD_Write_DATA8(beelzebub[l]);
    485e:	4e64      	ldr	r6, [pc, #400]	; (49f0 <InitLCD+0x230>)
			LCD_Write_COM16(k,0x00);
    4860:	4639      	mov	r1, r7
    4862:	4628      	mov	r0, r5
    4864:	47c0      	blx	r8
			LCD_Write_DATA8(beelzebub[l]);
    4866:	f814 0f01 	ldrb.w	r0, [r4, #1]!
    486a:	47b0      	blx	r6
		for(int l = 0; l < 52; l++)
    486c:	45a1      	cmp	r9, r4
    486e:	d1f7      	bne.n	4860 <InitLCD+0xa0>
	for(char k = 0xD1; k < 0xD6; k++)
    4870:	3501      	adds	r5, #1
    4872:	b2ed      	uxtb	r5, r5
    4874:	2dd6      	cmp	r5, #214	; 0xd6
    4876:	d1ef      	bne.n	4858 <InitLCD+0x98>
	LCD_Write_COM16(0xF0, 0x00);LCD_Write_DATA8(0x55);
    4878:	2100      	movs	r1, #0
    487a:	20f0      	movs	r0, #240	; 0xf0
    487c:	4c5b      	ldr	r4, [pc, #364]	; (49ec <InitLCD+0x22c>)
    487e:	47a0      	blx	r4
    4880:	2055      	movs	r0, #85	; 0x55
    4882:	4d5b      	ldr	r5, [pc, #364]	; (49f0 <InitLCD+0x230>)
    4884:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x01);LCD_Write_DATA8(0xAA);	
    4886:	2101      	movs	r1, #1
    4888:	20f0      	movs	r0, #240	; 0xf0
    488a:	47a0      	blx	r4
    488c:	20aa      	movs	r0, #170	; 0xaa
    488e:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x02);LCD_Write_DATA8(0x52);	
    4890:	2102      	movs	r1, #2
    4892:	20f0      	movs	r0, #240	; 0xf0
    4894:	47a0      	blx	r4
    4896:	2052      	movs	r0, #82	; 0x52
    4898:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x03);LCD_Write_DATA8(0x08);	
    489a:	2103      	movs	r1, #3
    489c:	20f0      	movs	r0, #240	; 0xf0
    489e:	47a0      	blx	r4
    48a0:	2008      	movs	r0, #8
    48a2:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x04);LCD_Write_DATA8(0x00);	
    48a4:	2104      	movs	r1, #4
    48a6:	20f0      	movs	r0, #240	; 0xf0
    48a8:	47a0      	blx	r4
    48aa:	2000      	movs	r0, #0
    48ac:	47a8      	blx	r5
	LCD_Write_COM16(0xB1, 0x00);LCD_Write_DATA8(0xCC);
    48ae:	2100      	movs	r1, #0
    48b0:	20b1      	movs	r0, #177	; 0xb1
    48b2:	47a0      	blx	r4
    48b4:	20cc      	movs	r0, #204	; 0xcc
    48b6:	47a8      	blx	r5
	LCD_Write_COM16(0xB1, 0x01);LCD_Write_DATA8(0x00);	
    48b8:	2101      	movs	r1, #1
    48ba:	20b1      	movs	r0, #177	; 0xb1
    48bc:	47a0      	blx	r4
    48be:	2000      	movs	r0, #0
    48c0:	47a8      	blx	r5
	LCD_Write_COM16(0xB5, 0x00);LCD_Write_DATA8(0x50);	
    48c2:	2100      	movs	r1, #0
    48c4:	20b5      	movs	r0, #181	; 0xb5
    48c6:	47a0      	blx	r4
    48c8:	2050      	movs	r0, #80	; 0x50
    48ca:	47a8      	blx	r5
	LCD_Write_COM16(0xB6, 0x00);LCD_Write_DATA8(0x05);
    48cc:	2100      	movs	r1, #0
    48ce:	20b6      	movs	r0, #182	; 0xb6
    48d0:	47a0      	blx	r4
    48d2:	2005      	movs	r0, #5
    48d4:	47a8      	blx	r5
	LCD_Write_COM16(0xB7, 0x00);LCD_Write_DATA8(0x70);
    48d6:	2100      	movs	r1, #0
    48d8:	20b7      	movs	r0, #183	; 0xb7
    48da:	47a0      	blx	r4
    48dc:	2070      	movs	r0, #112	; 0x70
    48de:	47a8      	blx	r5
	LCD_Write_COM16(0xB7, 0x01);LCD_Write_DATA8(0x70);
    48e0:	2101      	movs	r1, #1
    48e2:	20b7      	movs	r0, #183	; 0xb7
    48e4:	47a0      	blx	r4
    48e6:	2070      	movs	r0, #112	; 0x70
    48e8:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x00);LCD_Write_DATA8(0x01);
    48ea:	2100      	movs	r1, #0
    48ec:	20b8      	movs	r0, #184	; 0xb8
    48ee:	47a0      	blx	r4
    48f0:	2001      	movs	r0, #1
    48f2:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x01);LCD_Write_DATA8(0x03);
    48f4:	2101      	movs	r1, #1
    48f6:	20b8      	movs	r0, #184	; 0xb8
    48f8:	47a0      	blx	r4
    48fa:	2003      	movs	r0, #3
    48fc:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x02);LCD_Write_DATA8(0x03);
    48fe:	2102      	movs	r1, #2
    4900:	20b8      	movs	r0, #184	; 0xb8
    4902:	47a0      	blx	r4
    4904:	2003      	movs	r0, #3
    4906:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x03);LCD_Write_DATA8(0x03);	
    4908:	2103      	movs	r1, #3
    490a:	20b8      	movs	r0, #184	; 0xb8
    490c:	47a0      	blx	r4
    490e:	2003      	movs	r0, #3
    4910:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x00);LCD_Write_DATA8(0x02);
    4912:	2100      	movs	r1, #0
    4914:	20bc      	movs	r0, #188	; 0xbc
    4916:	47a0      	blx	r4
    4918:	2002      	movs	r0, #2
    491a:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x01);LCD_Write_DATA8(0x00);
    491c:	2101      	movs	r1, #1
    491e:	20bc      	movs	r0, #188	; 0xbc
    4920:	47a0      	blx	r4
    4922:	2000      	movs	r0, #0
    4924:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x02);LCD_Write_DATA8(0x00);
    4926:	2102      	movs	r1, #2
    4928:	20bc      	movs	r0, #188	; 0xbc
    492a:	47a0      	blx	r4
    492c:	2000      	movs	r0, #0
    492e:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x00);LCD_Write_DATA8(0xD0);
    4930:	2100      	movs	r1, #0
    4932:	20c9      	movs	r0, #201	; 0xc9
    4934:	47a0      	blx	r4
    4936:	20d0      	movs	r0, #208	; 0xd0
    4938:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x01);LCD_Write_DATA8(0x02);
    493a:	2101      	movs	r1, #1
    493c:	20c9      	movs	r0, #201	; 0xc9
    493e:	47a0      	blx	r4
    4940:	2002      	movs	r0, #2
    4942:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x02);LCD_Write_DATA8(0x50);
    4944:	2102      	movs	r1, #2
    4946:	20c9      	movs	r0, #201	; 0xc9
    4948:	47a0      	blx	r4
    494a:	2050      	movs	r0, #80	; 0x50
    494c:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x03);LCD_Write_DATA8(0x50);
    494e:	2103      	movs	r1, #3
    4950:	20c9      	movs	r0, #201	; 0xc9
    4952:	47a0      	blx	r4
    4954:	2050      	movs	r0, #80	; 0x50
    4956:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x04);LCD_Write_DATA8(0x50);
    4958:	2104      	movs	r1, #4
    495a:	20c9      	movs	r0, #201	; 0xc9
    495c:	47a0      	blx	r4
    495e:	2050      	movs	r0, #80	; 0x50
    4960:	47a8      	blx	r5
	LCD_Write_COM16(0x35, 0x00);LCD_Write_DATA8(0x00);
    4962:	2100      	movs	r1, #0
    4964:	2035      	movs	r0, #53	; 0x35
    4966:	47a0      	blx	r4
    4968:	2000      	movs	r0, #0
    496a:	47a8      	blx	r5
	LCD_Write_COM16(0x3A, 0x00);LCD_Write_DATA8(0x55);
    496c:	2100      	movs	r1, #0
    496e:	203a      	movs	r0, #58	; 0x3a
    4970:	47a0      	blx	r4
    4972:	2055      	movs	r0, #85	; 0x55
    4974:	47a8      	blx	r5
	LCD_Write_COM16(0x36, 0x00);LCD_Write_DATA8(0xE2);  //This is the MADCTL register
    4976:	2100      	movs	r1, #0
    4978:	2036      	movs	r0, #54	; 0x36
    497a:	47a0      	blx	r4
    497c:	20e2      	movs	r0, #226	; 0xe2
    497e:	47a8      	blx	r5
  	LCD_Write_COM16(0x11,0x00);   //Start Up  
    4980:	2100      	movs	r1, #0
    4982:	2011      	movs	r0, #17
    4984:	47a0      	blx	r4
  	delay_ms(100);
    4986:	2064      	movs	r0, #100	; 0x64
    4988:	4e1a      	ldr	r6, [pc, #104]	; (49f4 <InitLCD+0x234>)
    498a:	47b0      	blx	r6
  	LCD_Write_COM16(0x29,0x00);   //Display On  
    498c:	2100      	movs	r1, #0
    498e:	2029      	movs	r0, #41	; 0x29
    4990:	47a0      	blx	r4
   	delay_ms(100);
    4992:	2064      	movs	r0, #100	; 0x64
    4994:	47b0      	blx	r6
	LCD_Write_COM16(0x51,0x00);LCD_Write_DATA8(0xFF);
    4996:	2100      	movs	r1, #0
    4998:	2051      	movs	r0, #81	; 0x51
    499a:	47a0      	blx	r4
    499c:	20ff      	movs	r0, #255	; 0xff
    499e:	47a8      	blx	r5
	REG_PORT_OUTSET1 = LCD_CS;
    49a0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    49a4:	4b0d      	ldr	r3, [pc, #52]	; (49dc <InitLCD+0x21c>)
    49a6:	601a      	str	r2, [r3, #0]
	clrScr();
    49a8:	4b13      	ldr	r3, [pc, #76]	; (49f8 <InitLCD+0x238>)
    49aa:	4798      	blx	r3
	setColorRGB(0,0,0);
    49ac:	2200      	movs	r2, #0
    49ae:	4611      	mov	r1, r2
    49b0:	4610      	mov	r0, r2
    49b2:	4b12      	ldr	r3, [pc, #72]	; (49fc <InitLCD+0x23c>)
    49b4:	4798      	blx	r3
	setBackColorRGB(0, 0, 0);
    49b6:	2200      	movs	r2, #0
    49b8:	4611      	mov	r1, r2
    49ba:	4610      	mov	r0, r2
    49bc:	4b10      	ldr	r3, [pc, #64]	; (4a00 <InitLCD+0x240>)
    49be:	4798      	blx	r3
	fillRect(0,0,799,489);
    49c0:	f240 13e9 	movw	r3, #489	; 0x1e9
    49c4:	f240 321f 	movw	r2, #799	; 0x31f
    49c8:	2100      	movs	r1, #0
    49ca:	4608      	mov	r0, r1
    49cc:	4c0d      	ldr	r4, [pc, #52]	; (4a04 <InitLCD+0x244>)
    49ce:	47a0      	blx	r4
    49d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    49d4:	41004488 	.word	0x41004488
    49d8:	41004494 	.word	0x41004494
    49dc:	41004498 	.word	0x41004498
    49e0:	00008538 	.word	0x00008538
    49e4:	000085c7 	.word	0x000085c7
    49e8:	0000857f 	.word	0x0000857f
    49ec:	00004775 	.word	0x00004775
    49f0:	000047a5 	.word	0x000047a5
    49f4:	00001f71 	.word	0x00001f71
    49f8:	000046f5 	.word	0x000046f5
    49fc:	00004521 	.word	0x00004521
    4a00:	00004545 	.word	0x00004545
    4a04:	0000465d 	.word	0x0000465d
    4a08:	00008504 	.word	0x00008504

00004a0c <usart_read_callback>:
	SysTick_Config(SystemCoreClock/1000);
	system_interrupt_enable(SYSTEM_INTERRUPT_SYSTICK);
}

void usart_read_callback(struct usart_module *const usart_module)
{
    4a0c:	b510      	push	{r4, lr}
	//Read one character from the UART.
	//We can only use this function because it's non-blocking
	//and we can only read one character because reading > 1 means
	//it doesn't complete until _all_ characters are read.
	
	usart_read_buffer_job(&usart_instance, (uint8_t*)&rx_buf, 1);
    4a0e:	4c06      	ldr	r4, [pc, #24]	; (4a28 <usart_read_callback+0x1c>)
    4a10:	2201      	movs	r2, #1
    4a12:	4621      	mov	r1, r4
    4a14:	4805      	ldr	r0, [pc, #20]	; (4a2c <usart_read_callback+0x20>)
    4a16:	4b06      	ldr	r3, [pc, #24]	; (4a30 <usart_read_callback+0x24>)
    4a18:	4798      	blx	r3
	
	//stuff that ONE CHARACTER into the circular FIFO buffer
	ring_put(ouroboros, rx_buf);
    4a1a:	7821      	ldrb	r1, [r4, #0]
    4a1c:	4b05      	ldr	r3, [pc, #20]	; (4a34 <usart_read_callback+0x28>)
    4a1e:	6818      	ldr	r0, [r3, #0]
    4a20:	4b05      	ldr	r3, [pc, #20]	; (4a38 <usart_read_callback+0x2c>)
    4a22:	4798      	blx	r3
    4a24:	bd10      	pop	{r4, pc}
    4a26:	bf00      	nop
    4a28:	20003800 	.word	0x20003800
    4a2c:	200005b4 	.word	0x200005b4
    4a30:	00002e59 	.word	0x00002e59
    4a34:	20000588 	.word	0x20000588
    4a38:	0000014b 	.word	0x0000014b

00004a3c <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    4a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4a3e:	b083      	sub	sp, #12
    4a40:	4606      	mov	r6, r0
    4a42:	460f      	mov	r7, r1
	uint16_t temp = 0;
    4a44:	ac02      	add	r4, sp, #8
    4a46:	2300      	movs	r3, #0
    4a48:	f824 3d02 	strh.w	r3, [r4, #-2]!

	while(STATUS_OK != usart_read_wait(module, &temp));
    4a4c:	4d05      	ldr	r5, [pc, #20]	; (4a64 <usart_serial_getchar+0x28>)
    4a4e:	4621      	mov	r1, r4
    4a50:	4630      	mov	r0, r6
    4a52:	47a8      	blx	r5
    4a54:	2800      	cmp	r0, #0
    4a56:	d1fa      	bne.n	4a4e <usart_serial_getchar+0x12>

	*c = temp;
    4a58:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    4a5c:	703b      	strb	r3, [r7, #0]
}
    4a5e:	b003      	add	sp, #12
    4a60:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4a62:	bf00      	nop
    4a64:	00002d77 	.word	0x00002d77

00004a68 <usart_serial_putchar>:
{
    4a68:	b570      	push	{r4, r5, r6, lr}
    4a6a:	4606      	mov	r6, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    4a6c:	460d      	mov	r5, r1
    4a6e:	4c03      	ldr	r4, [pc, #12]	; (4a7c <usart_serial_putchar+0x14>)
    4a70:	4629      	mov	r1, r5
    4a72:	4630      	mov	r0, r6
    4a74:	47a0      	blx	r4
    4a76:	2800      	cmp	r0, #0
    4a78:	d1fa      	bne.n	4a70 <usart_serial_putchar+0x8>
}
    4a7a:	bd70      	pop	{r4, r5, r6, pc}
    4a7c:	00002d55 	.word	0x00002d55

00004a80 <InitTraceBuffer>:
{
    4a80:	b410      	push	{r4}
    uint32_t mtbEnabled = IS_MTB_ENABLED;
    4a82:	4b0c      	ldr	r3, [pc, #48]	; (4ab4 <InitTraceBuffer+0x34>)
    4a84:	681c      	ldr	r4, [r3, #0]
    DISABLE_MTB;
    4a86:	681a      	ldr	r2, [r3, #0]
    4a88:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
    4a8c:	601a      	str	r2, [r3, #0]
    for(index =0; index<1024; index++)
    4a8e:	2300      	movs	r3, #0
        __tracebuffer__[index];
    4a90:	4909      	ldr	r1, [pc, #36]	; (4ab8 <InitTraceBuffer+0x38>)
        __tracebuffersize__;
    4a92:	4a0a      	ldr	r2, [pc, #40]	; (4abc <InitTraceBuffer+0x3c>)
        __tracebuffer__[index];
    4a94:	5cc8      	ldrb	r0, [r1, r3]
        __tracebuffersize__;
    4a96:	6810      	ldr	r0, [r2, #0]
    for(index =0; index<1024; index++)
    4a98:	3301      	adds	r3, #1
    4a9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    4a9e:	d1f9      	bne.n	4a94 <InitTraceBuffer+0x14>
    if(mtbEnabled)
    4aa0:	2c00      	cmp	r4, #0
    4aa2:	db01      	blt.n	4aa8 <InitTraceBuffer+0x28>
}
    4aa4:	bc10      	pop	{r4}
    4aa6:	4770      	bx	lr
        ENABLE_MTB;
    4aa8:	4a02      	ldr	r2, [pc, #8]	; (4ab4 <InitTraceBuffer+0x34>)
    4aaa:	6813      	ldr	r3, [r2, #0]
    4aac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    4ab0:	6013      	str	r3, [r2, #0]
}
    4ab2:	e7f7      	b.n	4aa4 <InitTraceBuffer+0x24>
    4ab4:	41006004 	.word	0x41006004
    4ab8:	20003400 	.word	0x20003400
    4abc:	20000170 	.word	0x20000170

00004ac0 <SysTick_Handler>:
	ul_tickcount++;
    4ac0:	4b07      	ldr	r3, [pc, #28]	; (4ae0 <SysTick_Handler+0x20>)
    4ac2:	881b      	ldrh	r3, [r3, #0]
    4ac4:	3301      	adds	r3, #1
    4ac6:	b29b      	uxth	r3, r3
	if(ul_tickcount == UINT16_MAX-1)
    4ac8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
    4acc:	4293      	cmp	r3, r2
    4ace:	d002      	beq.n	4ad6 <SysTick_Handler+0x16>
	ul_tickcount++;
    4ad0:	4a03      	ldr	r2, [pc, #12]	; (4ae0 <SysTick_Handler+0x20>)
    4ad2:	8013      	strh	r3, [r2, #0]
    4ad4:	4770      	bx	lr
		ul_tickcount = 0;
    4ad6:	2200      	movs	r2, #0
    4ad8:	4b01      	ldr	r3, [pc, #4]	; (4ae0 <SysTick_Handler+0x20>)
    4ada:	801a      	strh	r2, [r3, #0]
    4adc:	4770      	bx	lr
    4ade:	bf00      	nop
    4ae0:	200004ec 	.word	0x200004ec

00004ae4 <conf_systick>:
	SysTick_Config(SystemCoreClock/1000);
    4ae4:	4b0d      	ldr	r3, [pc, #52]	; (4b1c <conf_systick+0x38>)
    4ae6:	681b      	ldr	r3, [r3, #0]
    4ae8:	4a0d      	ldr	r2, [pc, #52]	; (4b20 <conf_systick+0x3c>)
    4aea:	fba2 2303 	umull	r2, r3, r2, r3
    4aee:	099b      	lsrs	r3, r3, #6
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    4af0:	3b01      	subs	r3, #1
    4af2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    4af6:	d20c      	bcs.n	4b12 <conf_systick+0x2e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    4af8:	4a0a      	ldr	r2, [pc, #40]	; (4b24 <conf_systick+0x40>)
    4afa:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    4afc:	490a      	ldr	r1, [pc, #40]	; (4b28 <conf_systick+0x44>)
    4afe:	6a0b      	ldr	r3, [r1, #32]
    4b00:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    4b04:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    4b08:	620b      	str	r3, [r1, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    4b0a:	2300      	movs	r3, #0
    4b0c:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    4b0e:	2307      	movs	r3, #7
    4b10:	6013      	str	r3, [r2, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    4b12:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    4b16:	4b05      	ldr	r3, [pc, #20]	; (4b2c <conf_systick+0x48>)
    4b18:	601a      	str	r2, [r3, #0]
    4b1a:	4770      	bx	lr
    4b1c:	20000024 	.word	0x20000024
    4b20:	10624dd3 	.word	0x10624dd3
    4b24:	e000e010 	.word	0xe000e010
    4b28:	e000ed00 	.word	0xe000ed00
    4b2c:	e000e100 	.word	0xe000e100

00004b30 <configure_usart>:

/**************************SERCOM STUFF*******************************/


void configure_usart(void)
{
    4b30:	b570      	push	{r4, r5, r6, lr}
    4b32:	b090      	sub	sp, #64	; 0x40
	config->data_order       = USART_DATAORDER_LSB;
    4b34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4b38:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    4b3a:	2300      	movs	r3, #0
    4b3c:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    4b3e:	22ff      	movs	r2, #255	; 0xff
    4b40:	f8ad 2008 	strh.w	r2, [sp, #8]
	config->stopbits         = USART_STOPBITS_1;
    4b44:	f88d 300a 	strb.w	r3, [sp, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    4b48:	f88d 300b 	strb.w	r3, [sp, #11]
	config->baudrate         = 9600;
    4b4c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
    4b50:	9208      	str	r2, [sp, #32]
	config->receiver_enable  = true;
    4b52:	2201      	movs	r2, #1
    4b54:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
	config->transmitter_enable = true;
    4b58:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
	config->clock_polarity_inverted = false;
    4b5c:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
	config->use_external_clock = false;
    4b60:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
	config->ext_clock_freq   = 0;
    4b64:	930a      	str	r3, [sp, #40]	; 0x28
	config->run_in_standby   = false;
    4b66:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	config->generator_source = GCLK_GENERATOR_0;
    4b6a:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    4b6e:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    4b70:	f8ad 3010 	strh.w	r3, [sp, #16]
	config->lin_slave_enable      = false;
    4b74:	f88d 301b 	strb.w	r3, [sp, #27]
	config->immediate_buffer_overflow_notification  = false;
    4b78:	f88d 3018 	strb.w	r3, [sp, #24]
	config->start_frame_detection_enable            = false;
    4b7c:	f88d 301c 	strb.w	r3, [sp, #28]
	config->encoding_format_enable                  = false;
    4b80:	f88d 3019 	strb.w	r3, [sp, #25]
	config->receive_pulse_length                    = 19;
    4b84:	2213      	movs	r2, #19
    4b86:	f88d 201a 	strb.w	r2, [sp, #26]
	config->collision_detection_enable              = false;
    4b8a:	f88d 301d 	strb.w	r3, [sp, #29]
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);

	config_usart.baudrate    = 9600;
	config_usart.mux_setting = USART_RX_1_TX_0_XCK_1;
    4b8e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    4b92:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = PINMUX_PA08D_SERCOM2_PAD0;
    4b94:	4b1f      	ldr	r3, [pc, #124]	; (4c14 <configure_usart+0xe4>)
    4b96:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = PINMUX_PA09D_SERCOM2_PAD1;
    4b98:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    4b9c:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = PINMUX_UNUSED;
    4b9e:	f04f 33ff 	mov.w	r3, #4294967295
    4ba2:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = PINMUX_UNUSED;
    4ba4:	930f      	str	r3, [sp, #60]	; 0x3c
	
	RTS on PAD2 and CTS on PAD3
	
	*/
	
	while (usart_init(&usart_instance, SERCOM2, &config_usart) != STATUS_OK) {
    4ba6:	4e1c      	ldr	r6, [pc, #112]	; (4c18 <configure_usart+0xe8>)
    4ba8:	4d1c      	ldr	r5, [pc, #112]	; (4c1c <configure_usart+0xec>)
    4baa:	4c1d      	ldr	r4, [pc, #116]	; (4c20 <configure_usart+0xf0>)
    4bac:	466a      	mov	r2, sp
    4bae:	4631      	mov	r1, r6
    4bb0:	4628      	mov	r0, r5
    4bb2:	47a0      	blx	r4
    4bb4:	2800      	cmp	r0, #0
    4bb6:	d1f9      	bne.n	4bac <configure_usart+0x7c>
	stdio_base = (void *)module;
    4bb8:	4c18      	ldr	r4, [pc, #96]	; (4c1c <configure_usart+0xec>)
    4bba:	4b1a      	ldr	r3, [pc, #104]	; (4c24 <configure_usart+0xf4>)
    4bbc:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    4bbe:	4a1a      	ldr	r2, [pc, #104]	; (4c28 <configure_usart+0xf8>)
    4bc0:	4b1a      	ldr	r3, [pc, #104]	; (4c2c <configure_usart+0xfc>)
    4bc2:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    4bc4:	4a1a      	ldr	r2, [pc, #104]	; (4c30 <configure_usart+0x100>)
    4bc6:	4b1b      	ldr	r3, [pc, #108]	; (4c34 <configure_usart+0x104>)
    4bc8:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    4bca:	466a      	mov	r2, sp
    4bcc:	4912      	ldr	r1, [pc, #72]	; (4c18 <configure_usart+0xe8>)
    4bce:	4620      	mov	r0, r4
    4bd0:	4b13      	ldr	r3, [pc, #76]	; (4c20 <configure_usart+0xf0>)
    4bd2:	4798      	blx	r3
	setbuf(stdout, NULL);
    4bd4:	4e18      	ldr	r6, [pc, #96]	; (4c38 <configure_usart+0x108>)
    4bd6:	6833      	ldr	r3, [r6, #0]
    4bd8:	2100      	movs	r1, #0
    4bda:	6898      	ldr	r0, [r3, #8]
    4bdc:	4d17      	ldr	r5, [pc, #92]	; (4c3c <configure_usart+0x10c>)
    4bde:	47a8      	blx	r5
	setbuf(stdin, NULL);
    4be0:	6833      	ldr	r3, [r6, #0]
    4be2:	2100      	movs	r1, #0
    4be4:	6858      	ldr	r0, [r3, #4]
    4be6:	47a8      	blx	r5
	SercomUsart *const usart_hw = &(module->hw->USART);
    4be8:	6825      	ldr	r5, [r4, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    4bea:	4628      	mov	r0, r5
    4bec:	4b14      	ldr	r3, [pc, #80]	; (4c40 <configure_usart+0x110>)
    4bee:	4798      	blx	r3
    4bf0:	f000 001f 	and.w	r0, r0, #31
    4bf4:	2301      	movs	r3, #1
    4bf6:	fa03 f000 	lsl.w	r0, r3, r0
    4bfa:	4b12      	ldr	r3, [pc, #72]	; (4c44 <configure_usart+0x114>)
    4bfc:	6018      	str	r0, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    4bfe:	6822      	ldr	r2, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
    4c00:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    4c02:	2b00      	cmp	r3, #0
    4c04:	d1fc      	bne.n	4c00 <configure_usart+0xd0>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    4c06:	682b      	ldr	r3, [r5, #0]
    4c08:	f043 0302 	orr.w	r3, r3, #2
    4c0c:	602b      	str	r3, [r5, #0]
	}
	stdio_serial_init(&usart_instance, SERCOM2, &config_usart);
	usart_enable(&usart_instance);
}
    4c0e:	b010      	add	sp, #64	; 0x40
    4c10:	bd70      	pop	{r4, r5, r6, pc}
    4c12:	bf00      	nop
    4c14:	00080003 	.word	0x00080003
    4c18:	42001000 	.word	0x42001000
    4c1c:	200005b4 	.word	0x200005b4
    4c20:	00002a49 	.word	0x00002a49
    4c24:	200005b0 	.word	0x200005b0
    4c28:	00004a69 	.word	0x00004a69
    4c2c:	200005ac 	.word	0x200005ac
    4c30:	00004a3d 	.word	0x00004a3d
    4c34:	200005a8 	.word	0x200005a8
    4c38:	200001ac 	.word	0x200001ac
    4c3c:	00005225 	.word	0x00005225
    4c40:	000029a9 	.word	0x000029a9
    4c44:	e000e100 	.word	0xe000e100

00004c48 <configure_usart_callbacks>:

void configure_usart_callbacks(void)
{
    4c48:	b510      	push	{r4, lr}
	usart_register_callback(&usart_instance,usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
    4c4a:	4c06      	ldr	r4, [pc, #24]	; (4c64 <configure_usart_callbacks+0x1c>)
    4c4c:	2201      	movs	r2, #1
    4c4e:	4906      	ldr	r1, [pc, #24]	; (4c68 <configure_usart_callbacks+0x20>)
    4c50:	4620      	mov	r0, r4
    4c52:	4b06      	ldr	r3, [pc, #24]	; (4c6c <configure_usart_callbacks+0x24>)
    4c54:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    4c56:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
    4c5a:	f043 0302 	orr.w	r3, r3, #2
    4c5e:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
    4c62:	bd10      	pop	{r4, pc}
    4c64:	200005b4 	.word	0x200005b4
    4c68:	00004a0d 	.word	0x00004a0d
    4c6c:	00002e41 	.word	0x00002e41

00004c70 <configure_adc>:
	usart_enable(&usart_USB);
}
*/

void configure_adc(void)
{
    4c70:	b510      	push	{r4, lr}
    4c72:	b08c      	sub	sp, #48	; 0x30
	struct adc_config config_adc;
	adc_get_config_defaults(&config_adc);
    4c74:	4668      	mov	r0, sp
    4c76:	4b18      	ldr	r3, [pc, #96]	; (4cd8 <configure_adc+0x68>)
    4c78:	4798      	blx	r3
	config_adc.clock_source = GCLK_GENERATOR_1;
    4c7a:	2301      	movs	r3, #1
    4c7c:	f88d 3000 	strb.w	r3, [sp]
	config_adc.clock_prescaler = ADC_CLOCK_PRESCALER_DIV16;
    4c80:	f44f 7300 	mov.w	r3, #512	; 0x200
    4c84:	f8ad 3002 	strh.w	r3, [sp, #2]
	config_adc.reference = ADC_REFERENCE_INT1V;
    4c88:	2300      	movs	r3, #0
    4c8a:	f88d 3001 	strb.w	r3, [sp, #1]
	config_adc.positive_input = ADC_POSITIVE_INPUT_TEMP;
    4c8e:	2318      	movs	r3, #24
    4c90:	f88d 300c 	strb.w	r3, [sp, #12]
	config_adc.negative_input = ADC_NEGATIVE_INPUT_GND;
    4c94:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    4c98:	f8ad 300e 	strh.w	r3, [sp, #14]
	adc_init(&adc_instance, ADC, &config_adc);
    4c9c:	4c0f      	ldr	r4, [pc, #60]	; (4cdc <configure_adc+0x6c>)
    4c9e:	466a      	mov	r2, sp
    4ca0:	490f      	ldr	r1, [pc, #60]	; (4ce0 <configure_adc+0x70>)
    4ca2:	4620      	mov	r0, r4
    4ca4:	4b0f      	ldr	r3, [pc, #60]	; (4ce4 <configure_adc+0x74>)
    4ca6:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    4ca8:	6823      	ldr	r3, [r4, #0]
    4caa:	7e5a      	ldrb	r2, [r3, #25]
	while (adc_is_syncing(module_inst)) {
    4cac:	f012 0f80 	tst.w	r2, #128	; 0x80
    4cb0:	d1fb      	bne.n	4caa <configure_adc+0x3a>
    4cb2:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    4cb6:	4a0c      	ldr	r2, [pc, #48]	; (4ce8 <configure_adc+0x78>)
    4cb8:	6011      	str	r1, [r2, #0]
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    4cba:	220f      	movs	r2, #15
    4cbc:	759a      	strb	r2, [r3, #22]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    4cbe:	761a      	strb	r2, [r3, #24]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    4cc0:	781a      	ldrb	r2, [r3, #0]
    4cc2:	f042 0202 	orr.w	r2, r2, #2
    4cc6:	701a      	strb	r2, [r3, #0]
	Adc *const adc_module = module_inst->hw;
    4cc8:	4b04      	ldr	r3, [pc, #16]	; (4cdc <configure_adc+0x6c>)
    4cca:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    4ccc:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    4cce:	f013 0f80 	tst.w	r3, #128	; 0x80
    4cd2:	d1fb      	bne.n	4ccc <configure_adc+0x5c>
	adc_enable(&adc_instance);
}
    4cd4:	b00c      	add	sp, #48	; 0x30
    4cd6:	bd10      	pop	{r4, pc}
    4cd8:	0000204d 	.word	0x0000204d
    4cdc:	20003804 	.word	0x20003804
    4ce0:	42004000 	.word	0x42004000
    4ce4:	0000208d 	.word	0x0000208d
    4ce8:	e000e100 	.word	0xe000e100

00004cec <setupBoard>:


void setupBoard(void)
{
    4cec:	b510      	push	{r4, lr}
	uint16_t adcResult;
	uint16_t megaHurtz = (uint16_t)system_gclk_gen_get_hz(0);
    4cee:	2000      	movs	r0, #0
    4cf0:	4b33      	ldr	r3, [pc, #204]	; (4dc0 <setupBoard+0xd4>)
    4cf2:	4798      	blx	r3
    4cf4:	b284      	uxth	r4, r0
	
	
	system_init();
    4cf6:	4b33      	ldr	r3, [pc, #204]	; (4dc4 <setupBoard+0xd8>)
    4cf8:	4798      	blx	r3
	
	delay_init();
    4cfa:	4b33      	ldr	r3, [pc, #204]	; (4dc8 <setupBoard+0xdc>)
    4cfc:	4798      	blx	r3
		
	conf_systick();
    4cfe:	4b33      	ldr	r3, [pc, #204]	; (4dcc <setupBoard+0xe0>)
    4d00:	4798      	blx	r3
	
	InitLCD();
    4d02:	4b33      	ldr	r3, [pc, #204]	; (4dd0 <setupBoard+0xe4>)
    4d04:	4798      	blx	r3
	splashScreen();
    4d06:	4b33      	ldr	r3, [pc, #204]	; (4dd4 <setupBoard+0xe8>)
    4d08:	4798      	blx	r3
	
	configure_adc();
    4d0a:	4b33      	ldr	r3, [pc, #204]	; (4dd8 <setupBoard+0xec>)
    4d0c:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    4d0e:	4b33      	ldr	r3, [pc, #204]	; (4ddc <setupBoard+0xf0>)
    4d10:	6819      	ldr	r1, [r3, #0]
    4d12:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    4d14:	f013 0f80 	tst.w	r3, #128	; 0x80
    4d18:	d1fb      	bne.n	4d12 <setupBoard+0x26>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    4d1a:	7b0b      	ldrb	r3, [r1, #12]
    4d1c:	f043 0302 	orr.w	r3, r3, #2
    4d20:	730b      	strb	r3, [r1, #12]
    4d22:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    4d24:	f013 0f80 	tst.w	r3, #128	; 0x80
    4d28:	d1fb      	bne.n	4d22 <setupBoard+0x36>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    4d2a:	7e0b      	ldrb	r3, [r1, #24]
    4d2c:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
    4d2e:	f003 0201 	and.w	r2, r3, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
    4d32:	f013 0f04 	tst.w	r3, #4
		status_flags |= ADC_STATUS_WINDOW;
    4d36:	bf18      	it	ne
    4d38:	f042 0202 	orrne.w	r2, r2, #2
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    4d3c:	f013 0f02 	tst.w	r3, #2
		status_flags |= ADC_STATUS_OVERRUN;
    4d40:	bf18      	it	ne
    4d42:	f042 0204 	orrne.w	r2, r2, #4
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    4d46:	f012 0f01 	tst.w	r2, #1
    4d4a:	d0ee      	beq.n	4d2a <setupBoard+0x3e>
    4d4c:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    4d4e:	f013 0f80 	tst.w	r3, #128	; 0x80
    4d52:	d1fb      	bne.n	4d4c <setupBoard+0x60>
	*result = adc_module->RESULT.reg;
    4d54:	8b48      	ldrh	r0, [r1, #26]
    4d56:	b280      	uxth	r0, r0
	adc_module->INTFLAG.reg = int_flags;
    4d58:	2301      	movs	r3, #1
    4d5a:	760b      	strb	r3, [r1, #24]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    4d5c:	7e0b      	ldrb	r3, [r1, #24]
    4d5e:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
    4d60:	f003 0201 	and.w	r2, r3, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
    4d64:	f013 0f04 	tst.w	r3, #4
		status_flags |= ADC_STATUS_WINDOW;
    4d68:	bf18      	it	ne
    4d6a:	f042 0202 	orrne.w	r2, r2, #2
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    4d6e:	f013 0f02 	tst.w	r3, #2
		status_flags |= ADC_STATUS_OVERRUN;
    4d72:	bf18      	it	ne
    4d74:	f042 0204 	orrne.w	r2, r2, #4
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    4d78:	f012 0f04 	tst.w	r2, #4
	adc_module->INTFLAG.reg = int_flags;
    4d7c:	bf1c      	itt	ne
    4d7e:	2302      	movne	r3, #2
    4d80:	760b      	strbne	r3, [r1, #24]
	do {
	/* Wait for conversion to be done and read out result */
	} while (adc_read(&adc_instance, &adcResult) == STATUS_BUSY);
	
	
	srand((adcResult ^ megaHurtz));
    4d82:	4060      	eors	r0, r4
    4d84:	4b16      	ldr	r3, [pc, #88]	; (4de0 <setupBoard+0xf4>)
    4d86:	4798      	blx	r3
	and PAD1 (PI_RX) on pin 47.
	
	Also, this gives us the ability to bridge UARTs. THIS IS COOL
	
	*/
	configure_usart();
    4d88:	4b16      	ldr	r3, [pc, #88]	; (4de4 <setupBoard+0xf8>)
    4d8a:	4798      	blx	r3
	configure_usart_callbacks();
    4d8c:	4b16      	ldr	r3, [pc, #88]	; (4de8 <setupBoard+0xfc>)
    4d8e:	4798      	blx	r3
	cpu_irq_enable();
    4d90:	2201      	movs	r2, #1
    4d92:	4b16      	ldr	r3, [pc, #88]	; (4dec <setupBoard+0x100>)
    4d94:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    4d96:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    4d9a:	b662      	cpsie	i
	system_interrupt_enable_global();
	
	//I have no idea why I need to call this; it's in the callback and it
	//doesn't work without this line here. Remove this at your own peril.
	usart_read_buffer_job(&usart_instance, (uint8_t*)&rx_buf, 1);
    4d9c:	4914      	ldr	r1, [pc, #80]	; (4df0 <setupBoard+0x104>)
    4d9e:	4815      	ldr	r0, [pc, #84]	; (4df4 <setupBoard+0x108>)
    4da0:	4b15      	ldr	r3, [pc, #84]	; (4df8 <setupBoard+0x10c>)
    4da2:	4798      	blx	r3
	
	printf("\n\rSerial OK 9600 8N1\n\r");
    4da4:	4815      	ldr	r0, [pc, #84]	; (4dfc <setupBoard+0x110>)
    4da6:	4b16      	ldr	r3, [pc, #88]	; (4e00 <setupBoard+0x114>)
    4da8:	4798      	blx	r3
	
	conf_systick();
    4daa:	4b08      	ldr	r3, [pc, #32]	; (4dcc <setupBoard+0xe0>)
    4dac:	4798      	blx	r3

	xCharPos=0;
    4dae:	2300      	movs	r3, #0
    4db0:	4a14      	ldr	r2, [pc, #80]	; (4e04 <setupBoard+0x118>)
    4db2:	8013      	strh	r3, [r2, #0]
	yCharPos=0;
    4db4:	4a14      	ldr	r2, [pc, #80]	; (4e08 <setupBoard+0x11c>)
    4db6:	8013      	strh	r3, [r2, #0]
	drawChar(0xFF);
    4db8:	20ff      	movs	r0, #255	; 0xff
    4dba:	4b14      	ldr	r3, [pc, #80]	; (4e0c <setupBoard+0x120>)
    4dbc:	4798      	blx	r3
    4dbe:	bd10      	pop	{r4, pc}
    4dc0:	000034d9 	.word	0x000034d9
    4dc4:	000036ed 	.word	0x000036ed
    4dc8:	00001f31 	.word	0x00001f31
    4dcc:	00004ae5 	.word	0x00004ae5
    4dd0:	000047c1 	.word	0x000047c1
    4dd4:	00001cb1 	.word	0x00001cb1
    4dd8:	00004c71 	.word	0x00004c71
    4ddc:	20003804 	.word	0x20003804
    4de0:	00005141 	.word	0x00005141
    4de4:	00004b31 	.word	0x00004b31
    4de8:	00004c49 	.word	0x00004c49
    4dec:	20000020 	.word	0x20000020
    4df0:	20003800 	.word	0x20003800
    4df4:	200005b4 	.word	0x200005b4
    4df8:	00002e59 	.word	0x00002e59
    4dfc:	00008610 	.word	0x00008610
    4e00:	000050e9 	.word	0x000050e9
    4e04:	200004e2 	.word	0x200004e2
    4e08:	200004e4 	.word	0x200004e4
    4e0c:	000038b1 	.word	0x000038b1

00004e10 <main>:
{
    4e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	InitTraceBuffer();
    4e12:	4b25      	ldr	r3, [pc, #148]	; (4ea8 <main+0x98>)
    4e14:	4798      	blx	r3
	setupBoard();
    4e16:	4b25      	ldr	r3, [pc, #148]	; (4eac <main+0x9c>)
    4e18:	4798      	blx	r3
	uint8_t * buffer  = malloc(UART_BUFFER_SIZE * sizeof(uint8_t));
    4e1a:	2064      	movs	r0, #100	; 0x64
    4e1c:	4b24      	ldr	r3, [pc, #144]	; (4eb0 <main+0xa0>)
    4e1e:	4798      	blx	r3
	ouroboros = ring_init(buffer, UART_BUFFER_SIZE);
    4e20:	2164      	movs	r1, #100	; 0x64
    4e22:	4b24      	ldr	r3, [pc, #144]	; (4eb4 <main+0xa4>)
    4e24:	4798      	blx	r3
    4e26:	4b24      	ldr	r3, [pc, #144]	; (4eb8 <main+0xa8>)
    4e28:	6018      	str	r0, [r3, #0]
		if((ul_tickcount % (UINT16_MAX/2) == 0) && (funcLock == false))
    4e2a:	4c24      	ldr	r4, [pc, #144]	; (4ebc <main+0xac>)
    4e2c:	4d24      	ldr	r5, [pc, #144]	; (4ec0 <main+0xb0>)
		if((ul_tickcount % 200 == 0) && (funcLock == false))
    4e2e:	4e25      	ldr	r6, [pc, #148]	; (4ec4 <main+0xb4>)
    4e30:	e015      	b.n	4e5e <main+0x4e>
    4e32:	fba6 1302 	umull	r1, r3, r6, r2
    4e36:	099b      	lsrs	r3, r3, #6
    4e38:	21c8      	movs	r1, #200	; 0xc8
    4e3a:	fb01 2213 	mls	r2, r1, r3, r2
    4e3e:	b292      	uxth	r2, r2
    4e40:	b96a      	cbnz	r2, 4e5e <main+0x4e>
    4e42:	4b21      	ldr	r3, [pc, #132]	; (4ec8 <main+0xb8>)
    4e44:	781b      	ldrb	r3, [r3, #0]
    4e46:	b953      	cbnz	r3, 4e5e <main+0x4e>
			funcLock = true;
    4e48:	4f1f      	ldr	r7, [pc, #124]	; (4ec8 <main+0xb8>)
    4e4a:	2301      	movs	r3, #1
    4e4c:	703b      	strb	r3, [r7, #0]
			readKeyboard();
    4e4e:	4b1f      	ldr	r3, [pc, #124]	; (4ecc <main+0xbc>)
    4e50:	4798      	blx	r3
			printKeyboardBuffer();
    4e52:	4b1f      	ldr	r3, [pc, #124]	; (4ed0 <main+0xc0>)
    4e54:	4798      	blx	r3
			parseRXBuffer();
    4e56:	4b1f      	ldr	r3, [pc, #124]	; (4ed4 <main+0xc4>)
    4e58:	4798      	blx	r3
			funcLock = false;
    4e5a:	2300      	movs	r3, #0
    4e5c:	703b      	strb	r3, [r7, #0]
		__WFI();
    4e5e:	bf30      	wfi
		if((ul_tickcount % (UINT16_MAX/2) == 0) && (funcLock == false))
    4e60:	8822      	ldrh	r2, [r4, #0]
    4e62:	fba5 1302 	umull	r1, r3, r5, r2
    4e66:	1ad1      	subs	r1, r2, r3
    4e68:	eb03 0351 	add.w	r3, r3, r1, lsr #1
    4e6c:	0b9b      	lsrs	r3, r3, #14
    4e6e:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
    4e72:	1ad3      	subs	r3, r2, r3
    4e74:	b29b      	uxth	r3, r3
    4e76:	2b00      	cmp	r3, #0
    4e78:	d1db      	bne.n	4e32 <main+0x22>
    4e7a:	4b13      	ldr	r3, [pc, #76]	; (4ec8 <main+0xb8>)
    4e7c:	781b      	ldrb	r3, [r3, #0]
    4e7e:	2b00      	cmp	r3, #0
    4e80:	d1ed      	bne.n	4e5e <main+0x4e>
			funcLock = true;
    4e82:	4f11      	ldr	r7, [pc, #68]	; (4ec8 <main+0xb8>)
    4e84:	2301      	movs	r3, #1
    4e86:	703b      	strb	r3, [r7, #0]
			blinkCursor();
    4e88:	4b13      	ldr	r3, [pc, #76]	; (4ed8 <main+0xc8>)
    4e8a:	4798      	blx	r3
			funcLock = false;
    4e8c:	2300      	movs	r3, #0
    4e8e:	703b      	strb	r3, [r7, #0]
		if((ul_tickcount % 200 == 0) && (funcLock == false))
    4e90:	8822      	ldrh	r2, [r4, #0]
    4e92:	fba6 1302 	umull	r1, r3, r6, r2
    4e96:	099b      	lsrs	r3, r3, #6
    4e98:	21c8      	movs	r1, #200	; 0xc8
    4e9a:	fb01 2313 	mls	r3, r1, r3, r2
    4e9e:	b29b      	uxth	r3, r3
    4ea0:	2b00      	cmp	r3, #0
    4ea2:	d0d1      	beq.n	4e48 <main+0x38>
    4ea4:	e7db      	b.n	4e5e <main+0x4e>
    4ea6:	bf00      	nop
    4ea8:	00004a81 	.word	0x00004a81
    4eac:	00004ced 	.word	0x00004ced
    4eb0:	00004f59 	.word	0x00004f59
    4eb4:	00000121 	.word	0x00000121
    4eb8:	20000588 	.word	0x20000588
    4ebc:	200004ec 	.word	0x200004ec
    4ec0:	00020005 	.word	0x00020005
    4ec4:	51eb851f 	.word	0x51eb851f
    4ec8:	200004ea 	.word	0x200004ea
    4ecc:	00004349 	.word	0x00004349
    4ed0:	00003fb5 	.word	0x00003fb5
    4ed4:	00001ee1 	.word	0x00001ee1
    4ed8:	00003c09 	.word	0x00003c09

00004edc <__libc_init_array>:
    4edc:	b570      	push	{r4, r5, r6, lr}
    4ede:	4e0d      	ldr	r6, [pc, #52]	; (4f14 <__libc_init_array+0x38>)
    4ee0:	4c0d      	ldr	r4, [pc, #52]	; (4f18 <__libc_init_array+0x3c>)
    4ee2:	1ba4      	subs	r4, r4, r6
    4ee4:	10a4      	asrs	r4, r4, #2
    4ee6:	2500      	movs	r5, #0
    4ee8:	42a5      	cmp	r5, r4
    4eea:	d109      	bne.n	4f00 <__libc_init_array+0x24>
    4eec:	4e0b      	ldr	r6, [pc, #44]	; (4f1c <__libc_init_array+0x40>)
    4eee:	4c0c      	ldr	r4, [pc, #48]	; (4f20 <__libc_init_array+0x44>)
    4ef0:	f003 fbfa 	bl	86e8 <_init>
    4ef4:	1ba4      	subs	r4, r4, r6
    4ef6:	10a4      	asrs	r4, r4, #2
    4ef8:	2500      	movs	r5, #0
    4efa:	42a5      	cmp	r5, r4
    4efc:	d105      	bne.n	4f0a <__libc_init_array+0x2e>
    4efe:	bd70      	pop	{r4, r5, r6, pc}
    4f00:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    4f04:	4798      	blx	r3
    4f06:	3501      	adds	r5, #1
    4f08:	e7ee      	b.n	4ee8 <__libc_init_array+0xc>
    4f0a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    4f0e:	4798      	blx	r3
    4f10:	3501      	adds	r5, #1
    4f12:	e7f2      	b.n	4efa <__libc_init_array+0x1e>
    4f14:	000086f4 	.word	0x000086f4
    4f18:	000086f4 	.word	0x000086f4
    4f1c:	000086f4 	.word	0x000086f4
    4f20:	000086f8 	.word	0x000086f8

00004f24 <__itoa>:
    4f24:	1e93      	subs	r3, r2, #2
    4f26:	2b22      	cmp	r3, #34	; 0x22
    4f28:	b510      	push	{r4, lr}
    4f2a:	460c      	mov	r4, r1
    4f2c:	d904      	bls.n	4f38 <__itoa+0x14>
    4f2e:	2300      	movs	r3, #0
    4f30:	700b      	strb	r3, [r1, #0]
    4f32:	461c      	mov	r4, r3
    4f34:	4620      	mov	r0, r4
    4f36:	bd10      	pop	{r4, pc}
    4f38:	2a0a      	cmp	r2, #10
    4f3a:	d109      	bne.n	4f50 <__itoa+0x2c>
    4f3c:	2800      	cmp	r0, #0
    4f3e:	da07      	bge.n	4f50 <__itoa+0x2c>
    4f40:	232d      	movs	r3, #45	; 0x2d
    4f42:	700b      	strb	r3, [r1, #0]
    4f44:	4240      	negs	r0, r0
    4f46:	2101      	movs	r1, #1
    4f48:	4421      	add	r1, r4
    4f4a:	f000 fa39 	bl	53c0 <__utoa>
    4f4e:	e7f1      	b.n	4f34 <__itoa+0x10>
    4f50:	2100      	movs	r1, #0
    4f52:	e7f9      	b.n	4f48 <__itoa+0x24>

00004f54 <itoa>:
    4f54:	f7ff bfe6 	b.w	4f24 <__itoa>

00004f58 <malloc>:
    4f58:	4b02      	ldr	r3, [pc, #8]	; (4f64 <malloc+0xc>)
    4f5a:	4601      	mov	r1, r0
    4f5c:	6818      	ldr	r0, [r3, #0]
    4f5e:	f000 b865 	b.w	502c <_malloc_r>
    4f62:	bf00      	nop
    4f64:	200001ac 	.word	0x200001ac

00004f68 <memcpy>:
    4f68:	b510      	push	{r4, lr}
    4f6a:	1e43      	subs	r3, r0, #1
    4f6c:	440a      	add	r2, r1
    4f6e:	4291      	cmp	r1, r2
    4f70:	d100      	bne.n	4f74 <memcpy+0xc>
    4f72:	bd10      	pop	{r4, pc}
    4f74:	f811 4b01 	ldrb.w	r4, [r1], #1
    4f78:	f803 4f01 	strb.w	r4, [r3, #1]!
    4f7c:	e7f7      	b.n	4f6e <memcpy+0x6>

00004f7e <memset>:
    4f7e:	4402      	add	r2, r0
    4f80:	4603      	mov	r3, r0
    4f82:	4293      	cmp	r3, r2
    4f84:	d100      	bne.n	4f88 <memset+0xa>
    4f86:	4770      	bx	lr
    4f88:	f803 1b01 	strb.w	r1, [r3], #1
    4f8c:	e7f9      	b.n	4f82 <memset+0x4>
	...

00004f90 <_free_r>:
    4f90:	b538      	push	{r3, r4, r5, lr}
    4f92:	4605      	mov	r5, r0
    4f94:	2900      	cmp	r1, #0
    4f96:	d045      	beq.n	5024 <_free_r+0x94>
    4f98:	f851 3c04 	ldr.w	r3, [r1, #-4]
    4f9c:	1f0c      	subs	r4, r1, #4
    4f9e:	2b00      	cmp	r3, #0
    4fa0:	bfb8      	it	lt
    4fa2:	18e4      	addlt	r4, r4, r3
    4fa4:	f000 fc2c 	bl	5800 <__malloc_lock>
    4fa8:	4a1f      	ldr	r2, [pc, #124]	; (5028 <_free_r+0x98>)
    4faa:	6813      	ldr	r3, [r2, #0]
    4fac:	4610      	mov	r0, r2
    4fae:	b933      	cbnz	r3, 4fbe <_free_r+0x2e>
    4fb0:	6063      	str	r3, [r4, #4]
    4fb2:	6014      	str	r4, [r2, #0]
    4fb4:	4628      	mov	r0, r5
    4fb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    4fba:	f000 bc22 	b.w	5802 <__malloc_unlock>
    4fbe:	42a3      	cmp	r3, r4
    4fc0:	d90c      	bls.n	4fdc <_free_r+0x4c>
    4fc2:	6821      	ldr	r1, [r4, #0]
    4fc4:	1862      	adds	r2, r4, r1
    4fc6:	4293      	cmp	r3, r2
    4fc8:	bf04      	itt	eq
    4fca:	681a      	ldreq	r2, [r3, #0]
    4fcc:	685b      	ldreq	r3, [r3, #4]
    4fce:	6063      	str	r3, [r4, #4]
    4fd0:	bf04      	itt	eq
    4fd2:	1852      	addeq	r2, r2, r1
    4fd4:	6022      	streq	r2, [r4, #0]
    4fd6:	6004      	str	r4, [r0, #0]
    4fd8:	e7ec      	b.n	4fb4 <_free_r+0x24>
    4fda:	4613      	mov	r3, r2
    4fdc:	685a      	ldr	r2, [r3, #4]
    4fde:	b10a      	cbz	r2, 4fe4 <_free_r+0x54>
    4fe0:	42a2      	cmp	r2, r4
    4fe2:	d9fa      	bls.n	4fda <_free_r+0x4a>
    4fe4:	6819      	ldr	r1, [r3, #0]
    4fe6:	1858      	adds	r0, r3, r1
    4fe8:	42a0      	cmp	r0, r4
    4fea:	d10b      	bne.n	5004 <_free_r+0x74>
    4fec:	6820      	ldr	r0, [r4, #0]
    4fee:	4401      	add	r1, r0
    4ff0:	1858      	adds	r0, r3, r1
    4ff2:	4282      	cmp	r2, r0
    4ff4:	6019      	str	r1, [r3, #0]
    4ff6:	d1dd      	bne.n	4fb4 <_free_r+0x24>
    4ff8:	6810      	ldr	r0, [r2, #0]
    4ffa:	6852      	ldr	r2, [r2, #4]
    4ffc:	605a      	str	r2, [r3, #4]
    4ffe:	4401      	add	r1, r0
    5000:	6019      	str	r1, [r3, #0]
    5002:	e7d7      	b.n	4fb4 <_free_r+0x24>
    5004:	d902      	bls.n	500c <_free_r+0x7c>
    5006:	230c      	movs	r3, #12
    5008:	602b      	str	r3, [r5, #0]
    500a:	e7d3      	b.n	4fb4 <_free_r+0x24>
    500c:	6820      	ldr	r0, [r4, #0]
    500e:	1821      	adds	r1, r4, r0
    5010:	428a      	cmp	r2, r1
    5012:	bf04      	itt	eq
    5014:	6811      	ldreq	r1, [r2, #0]
    5016:	6852      	ldreq	r2, [r2, #4]
    5018:	6062      	str	r2, [r4, #4]
    501a:	bf04      	itt	eq
    501c:	1809      	addeq	r1, r1, r0
    501e:	6021      	streq	r1, [r4, #0]
    5020:	605c      	str	r4, [r3, #4]
    5022:	e7c7      	b.n	4fb4 <_free_r+0x24>
    5024:	bd38      	pop	{r3, r4, r5, pc}
    5026:	bf00      	nop
    5028:	200004f0 	.word	0x200004f0

0000502c <_malloc_r>:
    502c:	b570      	push	{r4, r5, r6, lr}
    502e:	1ccd      	adds	r5, r1, #3
    5030:	f025 0503 	bic.w	r5, r5, #3
    5034:	3508      	adds	r5, #8
    5036:	2d0c      	cmp	r5, #12
    5038:	bf38      	it	cc
    503a:	250c      	movcc	r5, #12
    503c:	2d00      	cmp	r5, #0
    503e:	4606      	mov	r6, r0
    5040:	db01      	blt.n	5046 <_malloc_r+0x1a>
    5042:	42a9      	cmp	r1, r5
    5044:	d903      	bls.n	504e <_malloc_r+0x22>
    5046:	230c      	movs	r3, #12
    5048:	6033      	str	r3, [r6, #0]
    504a:	2000      	movs	r0, #0
    504c:	bd70      	pop	{r4, r5, r6, pc}
    504e:	f000 fbd7 	bl	5800 <__malloc_lock>
    5052:	4a23      	ldr	r2, [pc, #140]	; (50e0 <_malloc_r+0xb4>)
    5054:	6814      	ldr	r4, [r2, #0]
    5056:	4621      	mov	r1, r4
    5058:	b991      	cbnz	r1, 5080 <_malloc_r+0x54>
    505a:	4c22      	ldr	r4, [pc, #136]	; (50e4 <_malloc_r+0xb8>)
    505c:	6823      	ldr	r3, [r4, #0]
    505e:	b91b      	cbnz	r3, 5068 <_malloc_r+0x3c>
    5060:	4630      	mov	r0, r6
    5062:	f000 f8cf 	bl	5204 <_sbrk_r>
    5066:	6020      	str	r0, [r4, #0]
    5068:	4629      	mov	r1, r5
    506a:	4630      	mov	r0, r6
    506c:	f000 f8ca 	bl	5204 <_sbrk_r>
    5070:	1c43      	adds	r3, r0, #1
    5072:	d126      	bne.n	50c2 <_malloc_r+0x96>
    5074:	230c      	movs	r3, #12
    5076:	6033      	str	r3, [r6, #0]
    5078:	4630      	mov	r0, r6
    507a:	f000 fbc2 	bl	5802 <__malloc_unlock>
    507e:	e7e4      	b.n	504a <_malloc_r+0x1e>
    5080:	680b      	ldr	r3, [r1, #0]
    5082:	1b5b      	subs	r3, r3, r5
    5084:	d41a      	bmi.n	50bc <_malloc_r+0x90>
    5086:	2b0b      	cmp	r3, #11
    5088:	d90f      	bls.n	50aa <_malloc_r+0x7e>
    508a:	600b      	str	r3, [r1, #0]
    508c:	50cd      	str	r5, [r1, r3]
    508e:	18cc      	adds	r4, r1, r3
    5090:	4630      	mov	r0, r6
    5092:	f000 fbb6 	bl	5802 <__malloc_unlock>
    5096:	f104 000b 	add.w	r0, r4, #11
    509a:	1d23      	adds	r3, r4, #4
    509c:	f020 0007 	bic.w	r0, r0, #7
    50a0:	1ac3      	subs	r3, r0, r3
    50a2:	d01b      	beq.n	50dc <_malloc_r+0xb0>
    50a4:	425a      	negs	r2, r3
    50a6:	50e2      	str	r2, [r4, r3]
    50a8:	bd70      	pop	{r4, r5, r6, pc}
    50aa:	428c      	cmp	r4, r1
    50ac:	bf0d      	iteet	eq
    50ae:	6863      	ldreq	r3, [r4, #4]
    50b0:	684b      	ldrne	r3, [r1, #4]
    50b2:	6063      	strne	r3, [r4, #4]
    50b4:	6013      	streq	r3, [r2, #0]
    50b6:	bf18      	it	ne
    50b8:	460c      	movne	r4, r1
    50ba:	e7e9      	b.n	5090 <_malloc_r+0x64>
    50bc:	460c      	mov	r4, r1
    50be:	6849      	ldr	r1, [r1, #4]
    50c0:	e7ca      	b.n	5058 <_malloc_r+0x2c>
    50c2:	1cc4      	adds	r4, r0, #3
    50c4:	f024 0403 	bic.w	r4, r4, #3
    50c8:	42a0      	cmp	r0, r4
    50ca:	d005      	beq.n	50d8 <_malloc_r+0xac>
    50cc:	1a21      	subs	r1, r4, r0
    50ce:	4630      	mov	r0, r6
    50d0:	f000 f898 	bl	5204 <_sbrk_r>
    50d4:	3001      	adds	r0, #1
    50d6:	d0cd      	beq.n	5074 <_malloc_r+0x48>
    50d8:	6025      	str	r5, [r4, #0]
    50da:	e7d9      	b.n	5090 <_malloc_r+0x64>
    50dc:	bd70      	pop	{r4, r5, r6, pc}
    50de:	bf00      	nop
    50e0:	200004f0 	.word	0x200004f0
    50e4:	200004f4 	.word	0x200004f4

000050e8 <iprintf>:
    50e8:	b40f      	push	{r0, r1, r2, r3}
    50ea:	4b0a      	ldr	r3, [pc, #40]	; (5114 <iprintf+0x2c>)
    50ec:	b513      	push	{r0, r1, r4, lr}
    50ee:	681c      	ldr	r4, [r3, #0]
    50f0:	b124      	cbz	r4, 50fc <iprintf+0x14>
    50f2:	69a3      	ldr	r3, [r4, #24]
    50f4:	b913      	cbnz	r3, 50fc <iprintf+0x14>
    50f6:	4620      	mov	r0, r4
    50f8:	f000 fa94 	bl	5624 <__sinit>
    50fc:	ab05      	add	r3, sp, #20
    50fe:	9a04      	ldr	r2, [sp, #16]
    5100:	68a1      	ldr	r1, [r4, #8]
    5102:	9301      	str	r3, [sp, #4]
    5104:	4620      	mov	r0, r4
    5106:	f000 fba5 	bl	5854 <_vfiprintf_r>
    510a:	b002      	add	sp, #8
    510c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5110:	b004      	add	sp, #16
    5112:	4770      	bx	lr
    5114:	200001ac 	.word	0x200001ac

00005118 <putchar>:
    5118:	b538      	push	{r3, r4, r5, lr}
    511a:	4b08      	ldr	r3, [pc, #32]	; (513c <putchar+0x24>)
    511c:	681c      	ldr	r4, [r3, #0]
    511e:	4605      	mov	r5, r0
    5120:	b124      	cbz	r4, 512c <putchar+0x14>
    5122:	69a3      	ldr	r3, [r4, #24]
    5124:	b913      	cbnz	r3, 512c <putchar+0x14>
    5126:	4620      	mov	r0, r4
    5128:	f000 fa7c 	bl	5624 <__sinit>
    512c:	68a2      	ldr	r2, [r4, #8]
    512e:	4629      	mov	r1, r5
    5130:	4620      	mov	r0, r4
    5132:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5136:	f000 be39 	b.w	5dac <_putc_r>
    513a:	bf00      	nop
    513c:	200001ac 	.word	0x200001ac

00005140 <srand>:
    5140:	b538      	push	{r3, r4, r5, lr}
    5142:	4b12      	ldr	r3, [pc, #72]	; (518c <srand+0x4c>)
    5144:	681c      	ldr	r4, [r3, #0]
    5146:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    5148:	4605      	mov	r5, r0
    514a:	b9d3      	cbnz	r3, 5182 <srand+0x42>
    514c:	2018      	movs	r0, #24
    514e:	f7ff ff03 	bl	4f58 <malloc>
    5152:	f243 330e 	movw	r3, #13070	; 0x330e
    5156:	63a0      	str	r0, [r4, #56]	; 0x38
    5158:	8003      	strh	r3, [r0, #0]
    515a:	f64a 33cd 	movw	r3, #43981	; 0xabcd
    515e:	8043      	strh	r3, [r0, #2]
    5160:	f241 2334 	movw	r3, #4660	; 0x1234
    5164:	8083      	strh	r3, [r0, #4]
    5166:	f24e 636d 	movw	r3, #58989	; 0xe66d
    516a:	80c3      	strh	r3, [r0, #6]
    516c:	f64d 63ec 	movw	r3, #57068	; 0xdeec
    5170:	8103      	strh	r3, [r0, #8]
    5172:	2305      	movs	r3, #5
    5174:	8143      	strh	r3, [r0, #10]
    5176:	230b      	movs	r3, #11
    5178:	8183      	strh	r3, [r0, #12]
    517a:	2201      	movs	r2, #1
    517c:	2300      	movs	r3, #0
    517e:	e9c0 2304 	strd	r2, r3, [r0, #16]
    5182:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    5184:	2200      	movs	r2, #0
    5186:	611d      	str	r5, [r3, #16]
    5188:	615a      	str	r2, [r3, #20]
    518a:	bd38      	pop	{r3, r4, r5, pc}
    518c:	200001ac 	.word	0x200001ac

00005190 <rand>:
    5190:	4b19      	ldr	r3, [pc, #100]	; (51f8 <rand+0x68>)
    5192:	b510      	push	{r4, lr}
    5194:	681c      	ldr	r4, [r3, #0]
    5196:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    5198:	b9d3      	cbnz	r3, 51d0 <rand+0x40>
    519a:	2018      	movs	r0, #24
    519c:	f7ff fedc 	bl	4f58 <malloc>
    51a0:	f243 330e 	movw	r3, #13070	; 0x330e
    51a4:	63a0      	str	r0, [r4, #56]	; 0x38
    51a6:	8003      	strh	r3, [r0, #0]
    51a8:	f64a 33cd 	movw	r3, #43981	; 0xabcd
    51ac:	8043      	strh	r3, [r0, #2]
    51ae:	f241 2334 	movw	r3, #4660	; 0x1234
    51b2:	8083      	strh	r3, [r0, #4]
    51b4:	f24e 636d 	movw	r3, #58989	; 0xe66d
    51b8:	80c3      	strh	r3, [r0, #6]
    51ba:	f64d 63ec 	movw	r3, #57068	; 0xdeec
    51be:	8103      	strh	r3, [r0, #8]
    51c0:	2305      	movs	r3, #5
    51c2:	8143      	strh	r3, [r0, #10]
    51c4:	230b      	movs	r3, #11
    51c6:	8183      	strh	r3, [r0, #12]
    51c8:	2201      	movs	r2, #1
    51ca:	2300      	movs	r3, #0
    51cc:	e9c0 2304 	strd	r2, r3, [r0, #16]
    51d0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    51d2:	480a      	ldr	r0, [pc, #40]	; (51fc <rand+0x6c>)
    51d4:	690a      	ldr	r2, [r1, #16]
    51d6:	694b      	ldr	r3, [r1, #20]
    51d8:	4c09      	ldr	r4, [pc, #36]	; (5200 <rand+0x70>)
    51da:	4350      	muls	r0, r2
    51dc:	fb04 0003 	mla	r0, r4, r3, r0
    51e0:	fba2 2304 	umull	r2, r3, r2, r4
    51e4:	3201      	adds	r2, #1
    51e6:	4403      	add	r3, r0
    51e8:	f143 0300 	adc.w	r3, r3, #0
    51ec:	e9c1 2304 	strd	r2, r3, [r1, #16]
    51f0:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
    51f4:	bd10      	pop	{r4, pc}
    51f6:	bf00      	nop
    51f8:	200001ac 	.word	0x200001ac
    51fc:	5851f42d 	.word	0x5851f42d
    5200:	4c957f2d 	.word	0x4c957f2d

00005204 <_sbrk_r>:
    5204:	b538      	push	{r3, r4, r5, lr}
    5206:	4c06      	ldr	r4, [pc, #24]	; (5220 <_sbrk_r+0x1c>)
    5208:	2300      	movs	r3, #0
    520a:	4605      	mov	r5, r0
    520c:	4608      	mov	r0, r1
    520e:	6023      	str	r3, [r4, #0]
    5210:	f7fe fb30 	bl	3874 <_sbrk>
    5214:	1c43      	adds	r3, r0, #1
    5216:	d102      	bne.n	521e <_sbrk_r+0x1a>
    5218:	6823      	ldr	r3, [r4, #0]
    521a:	b103      	cbz	r3, 521e <_sbrk_r+0x1a>
    521c:	602b      	str	r3, [r5, #0]
    521e:	bd38      	pop	{r3, r4, r5, pc}
    5220:	20003824 	.word	0x20003824

00005224 <setbuf>:
    5224:	2900      	cmp	r1, #0
    5226:	f44f 6380 	mov.w	r3, #1024	; 0x400
    522a:	bf0c      	ite	eq
    522c:	2202      	moveq	r2, #2
    522e:	2200      	movne	r2, #0
    5230:	f000 b800 	b.w	5234 <setvbuf>

00005234 <setvbuf>:
    5234:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    5238:	461d      	mov	r5, r3
    523a:	4b51      	ldr	r3, [pc, #324]	; (5380 <setvbuf+0x14c>)
    523c:	681e      	ldr	r6, [r3, #0]
    523e:	4604      	mov	r4, r0
    5240:	460f      	mov	r7, r1
    5242:	4690      	mov	r8, r2
    5244:	b126      	cbz	r6, 5250 <setvbuf+0x1c>
    5246:	69b3      	ldr	r3, [r6, #24]
    5248:	b913      	cbnz	r3, 5250 <setvbuf+0x1c>
    524a:	4630      	mov	r0, r6
    524c:	f000 f9ea 	bl	5624 <__sinit>
    5250:	4b4c      	ldr	r3, [pc, #304]	; (5384 <setvbuf+0x150>)
    5252:	429c      	cmp	r4, r3
    5254:	d152      	bne.n	52fc <setvbuf+0xc8>
    5256:	6874      	ldr	r4, [r6, #4]
    5258:	f1b8 0f02 	cmp.w	r8, #2
    525c:	d006      	beq.n	526c <setvbuf+0x38>
    525e:	f1b8 0f01 	cmp.w	r8, #1
    5262:	f200 8089 	bhi.w	5378 <setvbuf+0x144>
    5266:	2d00      	cmp	r5, #0
    5268:	f2c0 8086 	blt.w	5378 <setvbuf+0x144>
    526c:	4621      	mov	r1, r4
    526e:	4630      	mov	r0, r6
    5270:	f000 f96e 	bl	5550 <_fflush_r>
    5274:	6b61      	ldr	r1, [r4, #52]	; 0x34
    5276:	b141      	cbz	r1, 528a <setvbuf+0x56>
    5278:	f104 0344 	add.w	r3, r4, #68	; 0x44
    527c:	4299      	cmp	r1, r3
    527e:	d002      	beq.n	5286 <setvbuf+0x52>
    5280:	4630      	mov	r0, r6
    5282:	f7ff fe85 	bl	4f90 <_free_r>
    5286:	2300      	movs	r3, #0
    5288:	6363      	str	r3, [r4, #52]	; 0x34
    528a:	2300      	movs	r3, #0
    528c:	61a3      	str	r3, [r4, #24]
    528e:	6063      	str	r3, [r4, #4]
    5290:	89a3      	ldrh	r3, [r4, #12]
    5292:	061b      	lsls	r3, r3, #24
    5294:	d503      	bpl.n	529e <setvbuf+0x6a>
    5296:	6921      	ldr	r1, [r4, #16]
    5298:	4630      	mov	r0, r6
    529a:	f7ff fe79 	bl	4f90 <_free_r>
    529e:	89a3      	ldrh	r3, [r4, #12]
    52a0:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
    52a4:	f023 0303 	bic.w	r3, r3, #3
    52a8:	f1b8 0f02 	cmp.w	r8, #2
    52ac:	81a3      	strh	r3, [r4, #12]
    52ae:	d05d      	beq.n	536c <setvbuf+0x138>
    52b0:	ab01      	add	r3, sp, #4
    52b2:	466a      	mov	r2, sp
    52b4:	4621      	mov	r1, r4
    52b6:	4630      	mov	r0, r6
    52b8:	f000 fa3e 	bl	5738 <__swhatbuf_r>
    52bc:	89a3      	ldrh	r3, [r4, #12]
    52be:	4318      	orrs	r0, r3
    52c0:	81a0      	strh	r0, [r4, #12]
    52c2:	bb2d      	cbnz	r5, 5310 <setvbuf+0xdc>
    52c4:	9d00      	ldr	r5, [sp, #0]
    52c6:	4628      	mov	r0, r5
    52c8:	f7ff fe46 	bl	4f58 <malloc>
    52cc:	4607      	mov	r7, r0
    52ce:	2800      	cmp	r0, #0
    52d0:	d14e      	bne.n	5370 <setvbuf+0x13c>
    52d2:	f8dd 9000 	ldr.w	r9, [sp]
    52d6:	45a9      	cmp	r9, r5
    52d8:	d13c      	bne.n	5354 <setvbuf+0x120>
    52da:	f04f 30ff 	mov.w	r0, #4294967295
    52de:	89a3      	ldrh	r3, [r4, #12]
    52e0:	f043 0302 	orr.w	r3, r3, #2
    52e4:	81a3      	strh	r3, [r4, #12]
    52e6:	2300      	movs	r3, #0
    52e8:	60a3      	str	r3, [r4, #8]
    52ea:	f104 0347 	add.w	r3, r4, #71	; 0x47
    52ee:	6023      	str	r3, [r4, #0]
    52f0:	6123      	str	r3, [r4, #16]
    52f2:	2301      	movs	r3, #1
    52f4:	6163      	str	r3, [r4, #20]
    52f6:	b003      	add	sp, #12
    52f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    52fc:	4b22      	ldr	r3, [pc, #136]	; (5388 <setvbuf+0x154>)
    52fe:	429c      	cmp	r4, r3
    5300:	d101      	bne.n	5306 <setvbuf+0xd2>
    5302:	68b4      	ldr	r4, [r6, #8]
    5304:	e7a8      	b.n	5258 <setvbuf+0x24>
    5306:	4b21      	ldr	r3, [pc, #132]	; (538c <setvbuf+0x158>)
    5308:	429c      	cmp	r4, r3
    530a:	bf08      	it	eq
    530c:	68f4      	ldreq	r4, [r6, #12]
    530e:	e7a3      	b.n	5258 <setvbuf+0x24>
    5310:	2f00      	cmp	r7, #0
    5312:	d0d8      	beq.n	52c6 <setvbuf+0x92>
    5314:	69b3      	ldr	r3, [r6, #24]
    5316:	b913      	cbnz	r3, 531e <setvbuf+0xea>
    5318:	4630      	mov	r0, r6
    531a:	f000 f983 	bl	5624 <__sinit>
    531e:	f1b8 0f01 	cmp.w	r8, #1
    5322:	bf08      	it	eq
    5324:	89a3      	ldrheq	r3, [r4, #12]
    5326:	6027      	str	r7, [r4, #0]
    5328:	bf04      	itt	eq
    532a:	f043 0301 	orreq.w	r3, r3, #1
    532e:	81a3      	strheq	r3, [r4, #12]
    5330:	89a3      	ldrh	r3, [r4, #12]
    5332:	6127      	str	r7, [r4, #16]
    5334:	f013 0008 	ands.w	r0, r3, #8
    5338:	6165      	str	r5, [r4, #20]
    533a:	d01b      	beq.n	5374 <setvbuf+0x140>
    533c:	f013 0001 	ands.w	r0, r3, #1
    5340:	bf18      	it	ne
    5342:	426d      	negne	r5, r5
    5344:	f04f 0300 	mov.w	r3, #0
    5348:	bf1d      	ittte	ne
    534a:	60a3      	strne	r3, [r4, #8]
    534c:	61a5      	strne	r5, [r4, #24]
    534e:	4618      	movne	r0, r3
    5350:	60a5      	streq	r5, [r4, #8]
    5352:	e7d0      	b.n	52f6 <setvbuf+0xc2>
    5354:	4648      	mov	r0, r9
    5356:	f7ff fdff 	bl	4f58 <malloc>
    535a:	4607      	mov	r7, r0
    535c:	2800      	cmp	r0, #0
    535e:	d0bc      	beq.n	52da <setvbuf+0xa6>
    5360:	89a3      	ldrh	r3, [r4, #12]
    5362:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    5366:	81a3      	strh	r3, [r4, #12]
    5368:	464d      	mov	r5, r9
    536a:	e7d3      	b.n	5314 <setvbuf+0xe0>
    536c:	2000      	movs	r0, #0
    536e:	e7b6      	b.n	52de <setvbuf+0xaa>
    5370:	46a9      	mov	r9, r5
    5372:	e7f5      	b.n	5360 <setvbuf+0x12c>
    5374:	60a0      	str	r0, [r4, #8]
    5376:	e7be      	b.n	52f6 <setvbuf+0xc2>
    5378:	f04f 30ff 	mov.w	r0, #4294967295
    537c:	e7bb      	b.n	52f6 <setvbuf+0xc2>
    537e:	bf00      	nop
    5380:	200001ac 	.word	0x200001ac
    5384:	00008674 	.word	0x00008674
    5388:	00008694 	.word	0x00008694
    538c:	00008654 	.word	0x00008654

00005390 <strcat>:
    5390:	b510      	push	{r4, lr}
    5392:	4602      	mov	r2, r0
    5394:	4613      	mov	r3, r2
    5396:	3201      	adds	r2, #1
    5398:	781c      	ldrb	r4, [r3, #0]
    539a:	2c00      	cmp	r4, #0
    539c:	d1fa      	bne.n	5394 <strcat+0x4>
    539e:	3b01      	subs	r3, #1
    53a0:	f811 2b01 	ldrb.w	r2, [r1], #1
    53a4:	f803 2f01 	strb.w	r2, [r3, #1]!
    53a8:	2a00      	cmp	r2, #0
    53aa:	d1f9      	bne.n	53a0 <strcat+0x10>
    53ac:	bd10      	pop	{r4, pc}

000053ae <strlen>:
    53ae:	4603      	mov	r3, r0
    53b0:	f813 2b01 	ldrb.w	r2, [r3], #1
    53b4:	2a00      	cmp	r2, #0
    53b6:	d1fb      	bne.n	53b0 <strlen+0x2>
    53b8:	1a18      	subs	r0, r3, r0
    53ba:	3801      	subs	r0, #1
    53bc:	4770      	bx	lr
	...

000053c0 <__utoa>:
    53c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    53c2:	4c1e      	ldr	r4, [pc, #120]	; (543c <__utoa+0x7c>)
    53c4:	b08b      	sub	sp, #44	; 0x2c
    53c6:	4603      	mov	r3, r0
    53c8:	460f      	mov	r7, r1
    53ca:	466d      	mov	r5, sp
    53cc:	f104 0e20 	add.w	lr, r4, #32
    53d0:	6820      	ldr	r0, [r4, #0]
    53d2:	6861      	ldr	r1, [r4, #4]
    53d4:	462e      	mov	r6, r5
    53d6:	c603      	stmia	r6!, {r0, r1}
    53d8:	3408      	adds	r4, #8
    53da:	4574      	cmp	r4, lr
    53dc:	4635      	mov	r5, r6
    53de:	d1f7      	bne.n	53d0 <__utoa+0x10>
    53e0:	7921      	ldrb	r1, [r4, #4]
    53e2:	7131      	strb	r1, [r6, #4]
    53e4:	1e91      	subs	r1, r2, #2
    53e6:	6820      	ldr	r0, [r4, #0]
    53e8:	6030      	str	r0, [r6, #0]
    53ea:	2922      	cmp	r1, #34	; 0x22
    53ec:	f04f 0100 	mov.w	r1, #0
    53f0:	d904      	bls.n	53fc <__utoa+0x3c>
    53f2:	7039      	strb	r1, [r7, #0]
    53f4:	460f      	mov	r7, r1
    53f6:	4638      	mov	r0, r7
    53f8:	b00b      	add	sp, #44	; 0x2c
    53fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    53fc:	1e78      	subs	r0, r7, #1
    53fe:	4606      	mov	r6, r0
    5400:	fbb3 f5f2 	udiv	r5, r3, r2
    5404:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
    5408:	fb02 3315 	mls	r3, r2, r5, r3
    540c:	4473      	add	r3, lr
    540e:	1c4c      	adds	r4, r1, #1
    5410:	f813 3c28 	ldrb.w	r3, [r3, #-40]
    5414:	f806 3f01 	strb.w	r3, [r6, #1]!
    5418:	462b      	mov	r3, r5
    541a:	b965      	cbnz	r5, 5436 <__utoa+0x76>
    541c:	553d      	strb	r5, [r7, r4]
    541e:	187a      	adds	r2, r7, r1
    5420:	1acc      	subs	r4, r1, r3
    5422:	42a3      	cmp	r3, r4
    5424:	dae7      	bge.n	53f6 <__utoa+0x36>
    5426:	7844      	ldrb	r4, [r0, #1]
    5428:	7815      	ldrb	r5, [r2, #0]
    542a:	f800 5f01 	strb.w	r5, [r0, #1]!
    542e:	3301      	adds	r3, #1
    5430:	f802 4901 	strb.w	r4, [r2], #-1
    5434:	e7f4      	b.n	5420 <__utoa+0x60>
    5436:	4621      	mov	r1, r4
    5438:	e7e2      	b.n	5400 <__utoa+0x40>
    543a:	bf00      	nop
    543c:	0000862c 	.word	0x0000862c

00005440 <__sflush_r>:
    5440:	898a      	ldrh	r2, [r1, #12]
    5442:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5446:	4605      	mov	r5, r0
    5448:	0710      	lsls	r0, r2, #28
    544a:	460c      	mov	r4, r1
    544c:	d45a      	bmi.n	5504 <__sflush_r+0xc4>
    544e:	684b      	ldr	r3, [r1, #4]
    5450:	2b00      	cmp	r3, #0
    5452:	dc05      	bgt.n	5460 <__sflush_r+0x20>
    5454:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    5456:	2b00      	cmp	r3, #0
    5458:	dc02      	bgt.n	5460 <__sflush_r+0x20>
    545a:	2000      	movs	r0, #0
    545c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5460:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    5462:	2e00      	cmp	r6, #0
    5464:	d0f9      	beq.n	545a <__sflush_r+0x1a>
    5466:	2300      	movs	r3, #0
    5468:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    546c:	682f      	ldr	r7, [r5, #0]
    546e:	602b      	str	r3, [r5, #0]
    5470:	d033      	beq.n	54da <__sflush_r+0x9a>
    5472:	6d60      	ldr	r0, [r4, #84]	; 0x54
    5474:	89a3      	ldrh	r3, [r4, #12]
    5476:	075a      	lsls	r2, r3, #29
    5478:	d505      	bpl.n	5486 <__sflush_r+0x46>
    547a:	6863      	ldr	r3, [r4, #4]
    547c:	1ac0      	subs	r0, r0, r3
    547e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    5480:	b10b      	cbz	r3, 5486 <__sflush_r+0x46>
    5482:	6c23      	ldr	r3, [r4, #64]	; 0x40
    5484:	1ac0      	subs	r0, r0, r3
    5486:	2300      	movs	r3, #0
    5488:	4602      	mov	r2, r0
    548a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    548c:	6a21      	ldr	r1, [r4, #32]
    548e:	4628      	mov	r0, r5
    5490:	47b0      	blx	r6
    5492:	1c43      	adds	r3, r0, #1
    5494:	89a3      	ldrh	r3, [r4, #12]
    5496:	d106      	bne.n	54a6 <__sflush_r+0x66>
    5498:	6829      	ldr	r1, [r5, #0]
    549a:	291d      	cmp	r1, #29
    549c:	d84b      	bhi.n	5536 <__sflush_r+0xf6>
    549e:	4a2b      	ldr	r2, [pc, #172]	; (554c <__sflush_r+0x10c>)
    54a0:	40ca      	lsrs	r2, r1
    54a2:	07d6      	lsls	r6, r2, #31
    54a4:	d547      	bpl.n	5536 <__sflush_r+0xf6>
    54a6:	2200      	movs	r2, #0
    54a8:	6062      	str	r2, [r4, #4]
    54aa:	04d9      	lsls	r1, r3, #19
    54ac:	6922      	ldr	r2, [r4, #16]
    54ae:	6022      	str	r2, [r4, #0]
    54b0:	d504      	bpl.n	54bc <__sflush_r+0x7c>
    54b2:	1c42      	adds	r2, r0, #1
    54b4:	d101      	bne.n	54ba <__sflush_r+0x7a>
    54b6:	682b      	ldr	r3, [r5, #0]
    54b8:	b903      	cbnz	r3, 54bc <__sflush_r+0x7c>
    54ba:	6560      	str	r0, [r4, #84]	; 0x54
    54bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
    54be:	602f      	str	r7, [r5, #0]
    54c0:	2900      	cmp	r1, #0
    54c2:	d0ca      	beq.n	545a <__sflush_r+0x1a>
    54c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
    54c8:	4299      	cmp	r1, r3
    54ca:	d002      	beq.n	54d2 <__sflush_r+0x92>
    54cc:	4628      	mov	r0, r5
    54ce:	f7ff fd5f 	bl	4f90 <_free_r>
    54d2:	2000      	movs	r0, #0
    54d4:	6360      	str	r0, [r4, #52]	; 0x34
    54d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    54da:	6a21      	ldr	r1, [r4, #32]
    54dc:	2301      	movs	r3, #1
    54de:	4628      	mov	r0, r5
    54e0:	47b0      	blx	r6
    54e2:	1c41      	adds	r1, r0, #1
    54e4:	d1c6      	bne.n	5474 <__sflush_r+0x34>
    54e6:	682b      	ldr	r3, [r5, #0]
    54e8:	2b00      	cmp	r3, #0
    54ea:	d0c3      	beq.n	5474 <__sflush_r+0x34>
    54ec:	2b1d      	cmp	r3, #29
    54ee:	d001      	beq.n	54f4 <__sflush_r+0xb4>
    54f0:	2b16      	cmp	r3, #22
    54f2:	d101      	bne.n	54f8 <__sflush_r+0xb8>
    54f4:	602f      	str	r7, [r5, #0]
    54f6:	e7b0      	b.n	545a <__sflush_r+0x1a>
    54f8:	89a3      	ldrh	r3, [r4, #12]
    54fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    54fe:	81a3      	strh	r3, [r4, #12]
    5500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5504:	690f      	ldr	r7, [r1, #16]
    5506:	2f00      	cmp	r7, #0
    5508:	d0a7      	beq.n	545a <__sflush_r+0x1a>
    550a:	0793      	lsls	r3, r2, #30
    550c:	680e      	ldr	r6, [r1, #0]
    550e:	bf08      	it	eq
    5510:	694b      	ldreq	r3, [r1, #20]
    5512:	600f      	str	r7, [r1, #0]
    5514:	bf18      	it	ne
    5516:	2300      	movne	r3, #0
    5518:	eba6 0807 	sub.w	r8, r6, r7
    551c:	608b      	str	r3, [r1, #8]
    551e:	f1b8 0f00 	cmp.w	r8, #0
    5522:	dd9a      	ble.n	545a <__sflush_r+0x1a>
    5524:	4643      	mov	r3, r8
    5526:	463a      	mov	r2, r7
    5528:	6a21      	ldr	r1, [r4, #32]
    552a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    552c:	4628      	mov	r0, r5
    552e:	47b0      	blx	r6
    5530:	2800      	cmp	r0, #0
    5532:	dc07      	bgt.n	5544 <__sflush_r+0x104>
    5534:	89a3      	ldrh	r3, [r4, #12]
    5536:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    553a:	81a3      	strh	r3, [r4, #12]
    553c:	f04f 30ff 	mov.w	r0, #4294967295
    5540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5544:	4407      	add	r7, r0
    5546:	eba8 0800 	sub.w	r8, r8, r0
    554a:	e7e8      	b.n	551e <__sflush_r+0xde>
    554c:	20400001 	.word	0x20400001

00005550 <_fflush_r>:
    5550:	b538      	push	{r3, r4, r5, lr}
    5552:	690b      	ldr	r3, [r1, #16]
    5554:	4605      	mov	r5, r0
    5556:	460c      	mov	r4, r1
    5558:	b1db      	cbz	r3, 5592 <_fflush_r+0x42>
    555a:	b118      	cbz	r0, 5564 <_fflush_r+0x14>
    555c:	6983      	ldr	r3, [r0, #24]
    555e:	b90b      	cbnz	r3, 5564 <_fflush_r+0x14>
    5560:	f000 f860 	bl	5624 <__sinit>
    5564:	4b0c      	ldr	r3, [pc, #48]	; (5598 <_fflush_r+0x48>)
    5566:	429c      	cmp	r4, r3
    5568:	d109      	bne.n	557e <_fflush_r+0x2e>
    556a:	686c      	ldr	r4, [r5, #4]
    556c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    5570:	b17b      	cbz	r3, 5592 <_fflush_r+0x42>
    5572:	4621      	mov	r1, r4
    5574:	4628      	mov	r0, r5
    5576:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    557a:	f7ff bf61 	b.w	5440 <__sflush_r>
    557e:	4b07      	ldr	r3, [pc, #28]	; (559c <_fflush_r+0x4c>)
    5580:	429c      	cmp	r4, r3
    5582:	d101      	bne.n	5588 <_fflush_r+0x38>
    5584:	68ac      	ldr	r4, [r5, #8]
    5586:	e7f1      	b.n	556c <_fflush_r+0x1c>
    5588:	4b05      	ldr	r3, [pc, #20]	; (55a0 <_fflush_r+0x50>)
    558a:	429c      	cmp	r4, r3
    558c:	bf08      	it	eq
    558e:	68ec      	ldreq	r4, [r5, #12]
    5590:	e7ec      	b.n	556c <_fflush_r+0x1c>
    5592:	2000      	movs	r0, #0
    5594:	bd38      	pop	{r3, r4, r5, pc}
    5596:	bf00      	nop
    5598:	00008674 	.word	0x00008674
    559c:	00008694 	.word	0x00008694
    55a0:	00008654 	.word	0x00008654

000055a4 <_cleanup_r>:
    55a4:	4901      	ldr	r1, [pc, #4]	; (55ac <_cleanup_r+0x8>)
    55a6:	f000 b8a9 	b.w	56fc <_fwalk_reent>
    55aa:	bf00      	nop
    55ac:	00005551 	.word	0x00005551

000055b0 <std.isra.0>:
    55b0:	2300      	movs	r3, #0
    55b2:	b510      	push	{r4, lr}
    55b4:	4604      	mov	r4, r0
    55b6:	6003      	str	r3, [r0, #0]
    55b8:	6043      	str	r3, [r0, #4]
    55ba:	6083      	str	r3, [r0, #8]
    55bc:	8181      	strh	r1, [r0, #12]
    55be:	6643      	str	r3, [r0, #100]	; 0x64
    55c0:	81c2      	strh	r2, [r0, #14]
    55c2:	6103      	str	r3, [r0, #16]
    55c4:	6143      	str	r3, [r0, #20]
    55c6:	6183      	str	r3, [r0, #24]
    55c8:	4619      	mov	r1, r3
    55ca:	2208      	movs	r2, #8
    55cc:	305c      	adds	r0, #92	; 0x5c
    55ce:	f7ff fcd6 	bl	4f7e <memset>
    55d2:	4b05      	ldr	r3, [pc, #20]	; (55e8 <std.isra.0+0x38>)
    55d4:	6263      	str	r3, [r4, #36]	; 0x24
    55d6:	4b05      	ldr	r3, [pc, #20]	; (55ec <std.isra.0+0x3c>)
    55d8:	62a3      	str	r3, [r4, #40]	; 0x28
    55da:	4b05      	ldr	r3, [pc, #20]	; (55f0 <std.isra.0+0x40>)
    55dc:	62e3      	str	r3, [r4, #44]	; 0x2c
    55de:	4b05      	ldr	r3, [pc, #20]	; (55f4 <std.isra.0+0x44>)
    55e0:	6224      	str	r4, [r4, #32]
    55e2:	6323      	str	r3, [r4, #48]	; 0x30
    55e4:	bd10      	pop	{r4, pc}
    55e6:	bf00      	nop
    55e8:	00005e19 	.word	0x00005e19
    55ec:	00005e3b 	.word	0x00005e3b
    55f0:	00005e73 	.word	0x00005e73
    55f4:	00005e97 	.word	0x00005e97

000055f8 <__sfmoreglue>:
    55f8:	b570      	push	{r4, r5, r6, lr}
    55fa:	1e4a      	subs	r2, r1, #1
    55fc:	2568      	movs	r5, #104	; 0x68
    55fe:	4355      	muls	r5, r2
    5600:	460e      	mov	r6, r1
    5602:	f105 0174 	add.w	r1, r5, #116	; 0x74
    5606:	f7ff fd11 	bl	502c <_malloc_r>
    560a:	4604      	mov	r4, r0
    560c:	b140      	cbz	r0, 5620 <__sfmoreglue+0x28>
    560e:	2100      	movs	r1, #0
    5610:	e880 0042 	stmia.w	r0, {r1, r6}
    5614:	300c      	adds	r0, #12
    5616:	60a0      	str	r0, [r4, #8]
    5618:	f105 0268 	add.w	r2, r5, #104	; 0x68
    561c:	f7ff fcaf 	bl	4f7e <memset>
    5620:	4620      	mov	r0, r4
    5622:	bd70      	pop	{r4, r5, r6, pc}

00005624 <__sinit>:
    5624:	6983      	ldr	r3, [r0, #24]
    5626:	b510      	push	{r4, lr}
    5628:	4604      	mov	r4, r0
    562a:	bb33      	cbnz	r3, 567a <__sinit+0x56>
    562c:	6483      	str	r3, [r0, #72]	; 0x48
    562e:	64c3      	str	r3, [r0, #76]	; 0x4c
    5630:	6503      	str	r3, [r0, #80]	; 0x50
    5632:	4b12      	ldr	r3, [pc, #72]	; (567c <__sinit+0x58>)
    5634:	4a12      	ldr	r2, [pc, #72]	; (5680 <__sinit+0x5c>)
    5636:	681b      	ldr	r3, [r3, #0]
    5638:	6282      	str	r2, [r0, #40]	; 0x28
    563a:	4298      	cmp	r0, r3
    563c:	bf04      	itt	eq
    563e:	2301      	moveq	r3, #1
    5640:	6183      	streq	r3, [r0, #24]
    5642:	f000 f81f 	bl	5684 <__sfp>
    5646:	6060      	str	r0, [r4, #4]
    5648:	4620      	mov	r0, r4
    564a:	f000 f81b 	bl	5684 <__sfp>
    564e:	60a0      	str	r0, [r4, #8]
    5650:	4620      	mov	r0, r4
    5652:	f000 f817 	bl	5684 <__sfp>
    5656:	2200      	movs	r2, #0
    5658:	60e0      	str	r0, [r4, #12]
    565a:	2104      	movs	r1, #4
    565c:	6860      	ldr	r0, [r4, #4]
    565e:	f7ff ffa7 	bl	55b0 <std.isra.0>
    5662:	2201      	movs	r2, #1
    5664:	2109      	movs	r1, #9
    5666:	68a0      	ldr	r0, [r4, #8]
    5668:	f7ff ffa2 	bl	55b0 <std.isra.0>
    566c:	2202      	movs	r2, #2
    566e:	2112      	movs	r1, #18
    5670:	68e0      	ldr	r0, [r4, #12]
    5672:	f7ff ff9d 	bl	55b0 <std.isra.0>
    5676:	2301      	movs	r3, #1
    5678:	61a3      	str	r3, [r4, #24]
    567a:	bd10      	pop	{r4, pc}
    567c:	00008628 	.word	0x00008628
    5680:	000055a5 	.word	0x000055a5

00005684 <__sfp>:
    5684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5686:	4b1c      	ldr	r3, [pc, #112]	; (56f8 <__sfp+0x74>)
    5688:	681e      	ldr	r6, [r3, #0]
    568a:	69b3      	ldr	r3, [r6, #24]
    568c:	4607      	mov	r7, r0
    568e:	b913      	cbnz	r3, 5696 <__sfp+0x12>
    5690:	4630      	mov	r0, r6
    5692:	f7ff ffc7 	bl	5624 <__sinit>
    5696:	3648      	adds	r6, #72	; 0x48
    5698:	68b4      	ldr	r4, [r6, #8]
    569a:	6873      	ldr	r3, [r6, #4]
    569c:	3b01      	subs	r3, #1
    569e:	d503      	bpl.n	56a8 <__sfp+0x24>
    56a0:	6833      	ldr	r3, [r6, #0]
    56a2:	b133      	cbz	r3, 56b2 <__sfp+0x2e>
    56a4:	6836      	ldr	r6, [r6, #0]
    56a6:	e7f7      	b.n	5698 <__sfp+0x14>
    56a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    56ac:	b16d      	cbz	r5, 56ca <__sfp+0x46>
    56ae:	3468      	adds	r4, #104	; 0x68
    56b0:	e7f4      	b.n	569c <__sfp+0x18>
    56b2:	2104      	movs	r1, #4
    56b4:	4638      	mov	r0, r7
    56b6:	f7ff ff9f 	bl	55f8 <__sfmoreglue>
    56ba:	6030      	str	r0, [r6, #0]
    56bc:	2800      	cmp	r0, #0
    56be:	d1f1      	bne.n	56a4 <__sfp+0x20>
    56c0:	230c      	movs	r3, #12
    56c2:	603b      	str	r3, [r7, #0]
    56c4:	4604      	mov	r4, r0
    56c6:	4620      	mov	r0, r4
    56c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    56ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
    56ce:	81e3      	strh	r3, [r4, #14]
    56d0:	2301      	movs	r3, #1
    56d2:	81a3      	strh	r3, [r4, #12]
    56d4:	6665      	str	r5, [r4, #100]	; 0x64
    56d6:	6025      	str	r5, [r4, #0]
    56d8:	60a5      	str	r5, [r4, #8]
    56da:	6065      	str	r5, [r4, #4]
    56dc:	6125      	str	r5, [r4, #16]
    56de:	6165      	str	r5, [r4, #20]
    56e0:	61a5      	str	r5, [r4, #24]
    56e2:	2208      	movs	r2, #8
    56e4:	4629      	mov	r1, r5
    56e6:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    56ea:	f7ff fc48 	bl	4f7e <memset>
    56ee:	6365      	str	r5, [r4, #52]	; 0x34
    56f0:	63a5      	str	r5, [r4, #56]	; 0x38
    56f2:	64a5      	str	r5, [r4, #72]	; 0x48
    56f4:	64e5      	str	r5, [r4, #76]	; 0x4c
    56f6:	e7e6      	b.n	56c6 <__sfp+0x42>
    56f8:	00008628 	.word	0x00008628

000056fc <_fwalk_reent>:
    56fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5700:	4680      	mov	r8, r0
    5702:	4689      	mov	r9, r1
    5704:	f100 0448 	add.w	r4, r0, #72	; 0x48
    5708:	2600      	movs	r6, #0
    570a:	b914      	cbnz	r4, 5712 <_fwalk_reent+0x16>
    570c:	4630      	mov	r0, r6
    570e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5712:	68a5      	ldr	r5, [r4, #8]
    5714:	6867      	ldr	r7, [r4, #4]
    5716:	3f01      	subs	r7, #1
    5718:	d501      	bpl.n	571e <_fwalk_reent+0x22>
    571a:	6824      	ldr	r4, [r4, #0]
    571c:	e7f5      	b.n	570a <_fwalk_reent+0xe>
    571e:	89ab      	ldrh	r3, [r5, #12]
    5720:	2b01      	cmp	r3, #1
    5722:	d907      	bls.n	5734 <_fwalk_reent+0x38>
    5724:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    5728:	3301      	adds	r3, #1
    572a:	d003      	beq.n	5734 <_fwalk_reent+0x38>
    572c:	4629      	mov	r1, r5
    572e:	4640      	mov	r0, r8
    5730:	47c8      	blx	r9
    5732:	4306      	orrs	r6, r0
    5734:	3568      	adds	r5, #104	; 0x68
    5736:	e7ee      	b.n	5716 <_fwalk_reent+0x1a>

00005738 <__swhatbuf_r>:
    5738:	b570      	push	{r4, r5, r6, lr}
    573a:	460e      	mov	r6, r1
    573c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    5740:	2900      	cmp	r1, #0
    5742:	b090      	sub	sp, #64	; 0x40
    5744:	4614      	mov	r4, r2
    5746:	461d      	mov	r5, r3
    5748:	da07      	bge.n	575a <__swhatbuf_r+0x22>
    574a:	2300      	movs	r3, #0
    574c:	602b      	str	r3, [r5, #0]
    574e:	89b3      	ldrh	r3, [r6, #12]
    5750:	061a      	lsls	r2, r3, #24
    5752:	d410      	bmi.n	5776 <__swhatbuf_r+0x3e>
    5754:	f44f 6380 	mov.w	r3, #1024	; 0x400
    5758:	e00e      	b.n	5778 <__swhatbuf_r+0x40>
    575a:	aa01      	add	r2, sp, #4
    575c:	f000 fc82 	bl	6064 <_fstat_r>
    5760:	2800      	cmp	r0, #0
    5762:	dbf2      	blt.n	574a <__swhatbuf_r+0x12>
    5764:	9a02      	ldr	r2, [sp, #8]
    5766:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
    576a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
    576e:	425a      	negs	r2, r3
    5770:	415a      	adcs	r2, r3
    5772:	602a      	str	r2, [r5, #0]
    5774:	e7ee      	b.n	5754 <__swhatbuf_r+0x1c>
    5776:	2340      	movs	r3, #64	; 0x40
    5778:	2000      	movs	r0, #0
    577a:	6023      	str	r3, [r4, #0]
    577c:	b010      	add	sp, #64	; 0x40
    577e:	bd70      	pop	{r4, r5, r6, pc}

00005780 <__smakebuf_r>:
    5780:	898b      	ldrh	r3, [r1, #12]
    5782:	b573      	push	{r0, r1, r4, r5, r6, lr}
    5784:	079d      	lsls	r5, r3, #30
    5786:	4606      	mov	r6, r0
    5788:	460c      	mov	r4, r1
    578a:	d507      	bpl.n	579c <__smakebuf_r+0x1c>
    578c:	f104 0347 	add.w	r3, r4, #71	; 0x47
    5790:	6023      	str	r3, [r4, #0]
    5792:	6123      	str	r3, [r4, #16]
    5794:	2301      	movs	r3, #1
    5796:	6163      	str	r3, [r4, #20]
    5798:	b002      	add	sp, #8
    579a:	bd70      	pop	{r4, r5, r6, pc}
    579c:	ab01      	add	r3, sp, #4
    579e:	466a      	mov	r2, sp
    57a0:	f7ff ffca 	bl	5738 <__swhatbuf_r>
    57a4:	9900      	ldr	r1, [sp, #0]
    57a6:	4605      	mov	r5, r0
    57a8:	4630      	mov	r0, r6
    57aa:	f7ff fc3f 	bl	502c <_malloc_r>
    57ae:	b948      	cbnz	r0, 57c4 <__smakebuf_r+0x44>
    57b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    57b4:	059a      	lsls	r2, r3, #22
    57b6:	d4ef      	bmi.n	5798 <__smakebuf_r+0x18>
    57b8:	f023 0303 	bic.w	r3, r3, #3
    57bc:	f043 0302 	orr.w	r3, r3, #2
    57c0:	81a3      	strh	r3, [r4, #12]
    57c2:	e7e3      	b.n	578c <__smakebuf_r+0xc>
    57c4:	4b0d      	ldr	r3, [pc, #52]	; (57fc <__smakebuf_r+0x7c>)
    57c6:	62b3      	str	r3, [r6, #40]	; 0x28
    57c8:	89a3      	ldrh	r3, [r4, #12]
    57ca:	6020      	str	r0, [r4, #0]
    57cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    57d0:	81a3      	strh	r3, [r4, #12]
    57d2:	9b00      	ldr	r3, [sp, #0]
    57d4:	6163      	str	r3, [r4, #20]
    57d6:	9b01      	ldr	r3, [sp, #4]
    57d8:	6120      	str	r0, [r4, #16]
    57da:	b15b      	cbz	r3, 57f4 <__smakebuf_r+0x74>
    57dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    57e0:	4630      	mov	r0, r6
    57e2:	f000 fc51 	bl	6088 <_isatty_r>
    57e6:	b128      	cbz	r0, 57f4 <__smakebuf_r+0x74>
    57e8:	89a3      	ldrh	r3, [r4, #12]
    57ea:	f023 0303 	bic.w	r3, r3, #3
    57ee:	f043 0301 	orr.w	r3, r3, #1
    57f2:	81a3      	strh	r3, [r4, #12]
    57f4:	89a3      	ldrh	r3, [r4, #12]
    57f6:	431d      	orrs	r5, r3
    57f8:	81a5      	strh	r5, [r4, #12]
    57fa:	e7cd      	b.n	5798 <__smakebuf_r+0x18>
    57fc:	000055a5 	.word	0x000055a5

00005800 <__malloc_lock>:
    5800:	4770      	bx	lr

00005802 <__malloc_unlock>:
    5802:	4770      	bx	lr

00005804 <__sfputc_r>:
    5804:	6893      	ldr	r3, [r2, #8]
    5806:	3b01      	subs	r3, #1
    5808:	2b00      	cmp	r3, #0
    580a:	b410      	push	{r4}
    580c:	6093      	str	r3, [r2, #8]
    580e:	da08      	bge.n	5822 <__sfputc_r+0x1e>
    5810:	6994      	ldr	r4, [r2, #24]
    5812:	42a3      	cmp	r3, r4
    5814:	db02      	blt.n	581c <__sfputc_r+0x18>
    5816:	b2cb      	uxtb	r3, r1
    5818:	2b0a      	cmp	r3, #10
    581a:	d102      	bne.n	5822 <__sfputc_r+0x1e>
    581c:	bc10      	pop	{r4}
    581e:	f000 bb3f 	b.w	5ea0 <__swbuf_r>
    5822:	6813      	ldr	r3, [r2, #0]
    5824:	1c58      	adds	r0, r3, #1
    5826:	6010      	str	r0, [r2, #0]
    5828:	7019      	strb	r1, [r3, #0]
    582a:	b2c8      	uxtb	r0, r1
    582c:	bc10      	pop	{r4}
    582e:	4770      	bx	lr

00005830 <__sfputs_r>:
    5830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5832:	4606      	mov	r6, r0
    5834:	460f      	mov	r7, r1
    5836:	4614      	mov	r4, r2
    5838:	18d5      	adds	r5, r2, r3
    583a:	42ac      	cmp	r4, r5
    583c:	d101      	bne.n	5842 <__sfputs_r+0x12>
    583e:	2000      	movs	r0, #0
    5840:	e007      	b.n	5852 <__sfputs_r+0x22>
    5842:	463a      	mov	r2, r7
    5844:	f814 1b01 	ldrb.w	r1, [r4], #1
    5848:	4630      	mov	r0, r6
    584a:	f7ff ffdb 	bl	5804 <__sfputc_r>
    584e:	1c43      	adds	r3, r0, #1
    5850:	d1f3      	bne.n	583a <__sfputs_r+0xa>
    5852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00005854 <_vfiprintf_r>:
    5854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5858:	b09d      	sub	sp, #116	; 0x74
    585a:	460c      	mov	r4, r1
    585c:	4617      	mov	r7, r2
    585e:	9303      	str	r3, [sp, #12]
    5860:	4606      	mov	r6, r0
    5862:	b118      	cbz	r0, 586c <_vfiprintf_r+0x18>
    5864:	6983      	ldr	r3, [r0, #24]
    5866:	b90b      	cbnz	r3, 586c <_vfiprintf_r+0x18>
    5868:	f7ff fedc 	bl	5624 <__sinit>
    586c:	4b7c      	ldr	r3, [pc, #496]	; (5a60 <_vfiprintf_r+0x20c>)
    586e:	429c      	cmp	r4, r3
    5870:	d157      	bne.n	5922 <_vfiprintf_r+0xce>
    5872:	6874      	ldr	r4, [r6, #4]
    5874:	89a3      	ldrh	r3, [r4, #12]
    5876:	0718      	lsls	r0, r3, #28
    5878:	d55d      	bpl.n	5936 <_vfiprintf_r+0xe2>
    587a:	6923      	ldr	r3, [r4, #16]
    587c:	2b00      	cmp	r3, #0
    587e:	d05a      	beq.n	5936 <_vfiprintf_r+0xe2>
    5880:	2300      	movs	r3, #0
    5882:	9309      	str	r3, [sp, #36]	; 0x24
    5884:	2320      	movs	r3, #32
    5886:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    588a:	2330      	movs	r3, #48	; 0x30
    588c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    5890:	f04f 0b01 	mov.w	fp, #1
    5894:	46b8      	mov	r8, r7
    5896:	4645      	mov	r5, r8
    5898:	f815 3b01 	ldrb.w	r3, [r5], #1
    589c:	2b00      	cmp	r3, #0
    589e:	d155      	bne.n	594c <_vfiprintf_r+0xf8>
    58a0:	ebb8 0a07 	subs.w	sl, r8, r7
    58a4:	d00b      	beq.n	58be <_vfiprintf_r+0x6a>
    58a6:	4653      	mov	r3, sl
    58a8:	463a      	mov	r2, r7
    58aa:	4621      	mov	r1, r4
    58ac:	4630      	mov	r0, r6
    58ae:	f7ff ffbf 	bl	5830 <__sfputs_r>
    58b2:	3001      	adds	r0, #1
    58b4:	f000 80c4 	beq.w	5a40 <_vfiprintf_r+0x1ec>
    58b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    58ba:	4453      	add	r3, sl
    58bc:	9309      	str	r3, [sp, #36]	; 0x24
    58be:	f898 3000 	ldrb.w	r3, [r8]
    58c2:	2b00      	cmp	r3, #0
    58c4:	f000 80bc 	beq.w	5a40 <_vfiprintf_r+0x1ec>
    58c8:	2300      	movs	r3, #0
    58ca:	f04f 32ff 	mov.w	r2, #4294967295
    58ce:	9304      	str	r3, [sp, #16]
    58d0:	9307      	str	r3, [sp, #28]
    58d2:	9205      	str	r2, [sp, #20]
    58d4:	9306      	str	r3, [sp, #24]
    58d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    58da:	931a      	str	r3, [sp, #104]	; 0x68
    58dc:	2205      	movs	r2, #5
    58de:	7829      	ldrb	r1, [r5, #0]
    58e0:	4860      	ldr	r0, [pc, #384]	; (5a64 <_vfiprintf_r+0x210>)
    58e2:	f000 fbf5 	bl	60d0 <memchr>
    58e6:	f105 0801 	add.w	r8, r5, #1
    58ea:	9b04      	ldr	r3, [sp, #16]
    58ec:	2800      	cmp	r0, #0
    58ee:	d131      	bne.n	5954 <_vfiprintf_r+0x100>
    58f0:	06d9      	lsls	r1, r3, #27
    58f2:	bf44      	itt	mi
    58f4:	2220      	movmi	r2, #32
    58f6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    58fa:	071a      	lsls	r2, r3, #28
    58fc:	bf44      	itt	mi
    58fe:	222b      	movmi	r2, #43	; 0x2b
    5900:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    5904:	782a      	ldrb	r2, [r5, #0]
    5906:	2a2a      	cmp	r2, #42	; 0x2a
    5908:	d02c      	beq.n	5964 <_vfiprintf_r+0x110>
    590a:	9a07      	ldr	r2, [sp, #28]
    590c:	2100      	movs	r1, #0
    590e:	200a      	movs	r0, #10
    5910:	46a8      	mov	r8, r5
    5912:	3501      	adds	r5, #1
    5914:	f898 3000 	ldrb.w	r3, [r8]
    5918:	3b30      	subs	r3, #48	; 0x30
    591a:	2b09      	cmp	r3, #9
    591c:	d96d      	bls.n	59fa <_vfiprintf_r+0x1a6>
    591e:	b371      	cbz	r1, 597e <_vfiprintf_r+0x12a>
    5920:	e026      	b.n	5970 <_vfiprintf_r+0x11c>
    5922:	4b51      	ldr	r3, [pc, #324]	; (5a68 <_vfiprintf_r+0x214>)
    5924:	429c      	cmp	r4, r3
    5926:	d101      	bne.n	592c <_vfiprintf_r+0xd8>
    5928:	68b4      	ldr	r4, [r6, #8]
    592a:	e7a3      	b.n	5874 <_vfiprintf_r+0x20>
    592c:	4b4f      	ldr	r3, [pc, #316]	; (5a6c <_vfiprintf_r+0x218>)
    592e:	429c      	cmp	r4, r3
    5930:	bf08      	it	eq
    5932:	68f4      	ldreq	r4, [r6, #12]
    5934:	e79e      	b.n	5874 <_vfiprintf_r+0x20>
    5936:	4621      	mov	r1, r4
    5938:	4630      	mov	r0, r6
    593a:	f000 fb15 	bl	5f68 <__swsetup_r>
    593e:	2800      	cmp	r0, #0
    5940:	d09e      	beq.n	5880 <_vfiprintf_r+0x2c>
    5942:	f04f 30ff 	mov.w	r0, #4294967295
    5946:	b01d      	add	sp, #116	; 0x74
    5948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    594c:	2b25      	cmp	r3, #37	; 0x25
    594e:	d0a7      	beq.n	58a0 <_vfiprintf_r+0x4c>
    5950:	46a8      	mov	r8, r5
    5952:	e7a0      	b.n	5896 <_vfiprintf_r+0x42>
    5954:	4a43      	ldr	r2, [pc, #268]	; (5a64 <_vfiprintf_r+0x210>)
    5956:	1a80      	subs	r0, r0, r2
    5958:	fa0b f000 	lsl.w	r0, fp, r0
    595c:	4318      	orrs	r0, r3
    595e:	9004      	str	r0, [sp, #16]
    5960:	4645      	mov	r5, r8
    5962:	e7bb      	b.n	58dc <_vfiprintf_r+0x88>
    5964:	9a03      	ldr	r2, [sp, #12]
    5966:	1d11      	adds	r1, r2, #4
    5968:	6812      	ldr	r2, [r2, #0]
    596a:	9103      	str	r1, [sp, #12]
    596c:	2a00      	cmp	r2, #0
    596e:	db01      	blt.n	5974 <_vfiprintf_r+0x120>
    5970:	9207      	str	r2, [sp, #28]
    5972:	e004      	b.n	597e <_vfiprintf_r+0x12a>
    5974:	4252      	negs	r2, r2
    5976:	f043 0302 	orr.w	r3, r3, #2
    597a:	9207      	str	r2, [sp, #28]
    597c:	9304      	str	r3, [sp, #16]
    597e:	f898 3000 	ldrb.w	r3, [r8]
    5982:	2b2e      	cmp	r3, #46	; 0x2e
    5984:	d110      	bne.n	59a8 <_vfiprintf_r+0x154>
    5986:	f898 3001 	ldrb.w	r3, [r8, #1]
    598a:	2b2a      	cmp	r3, #42	; 0x2a
    598c:	f108 0101 	add.w	r1, r8, #1
    5990:	d137      	bne.n	5a02 <_vfiprintf_r+0x1ae>
    5992:	9b03      	ldr	r3, [sp, #12]
    5994:	1d1a      	adds	r2, r3, #4
    5996:	681b      	ldr	r3, [r3, #0]
    5998:	9203      	str	r2, [sp, #12]
    599a:	2b00      	cmp	r3, #0
    599c:	bfb8      	it	lt
    599e:	f04f 33ff 	movlt.w	r3, #4294967295
    59a2:	f108 0802 	add.w	r8, r8, #2
    59a6:	9305      	str	r3, [sp, #20]
    59a8:	4d31      	ldr	r5, [pc, #196]	; (5a70 <_vfiprintf_r+0x21c>)
    59aa:	f898 1000 	ldrb.w	r1, [r8]
    59ae:	2203      	movs	r2, #3
    59b0:	4628      	mov	r0, r5
    59b2:	f000 fb8d 	bl	60d0 <memchr>
    59b6:	b140      	cbz	r0, 59ca <_vfiprintf_r+0x176>
    59b8:	2340      	movs	r3, #64	; 0x40
    59ba:	1b40      	subs	r0, r0, r5
    59bc:	fa03 f000 	lsl.w	r0, r3, r0
    59c0:	9b04      	ldr	r3, [sp, #16]
    59c2:	4303      	orrs	r3, r0
    59c4:	9304      	str	r3, [sp, #16]
    59c6:	f108 0801 	add.w	r8, r8, #1
    59ca:	f898 1000 	ldrb.w	r1, [r8]
    59ce:	4829      	ldr	r0, [pc, #164]	; (5a74 <_vfiprintf_r+0x220>)
    59d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    59d4:	2206      	movs	r2, #6
    59d6:	f108 0701 	add.w	r7, r8, #1
    59da:	f000 fb79 	bl	60d0 <memchr>
    59de:	2800      	cmp	r0, #0
    59e0:	d034      	beq.n	5a4c <_vfiprintf_r+0x1f8>
    59e2:	4b25      	ldr	r3, [pc, #148]	; (5a78 <_vfiprintf_r+0x224>)
    59e4:	bb03      	cbnz	r3, 5a28 <_vfiprintf_r+0x1d4>
    59e6:	9b03      	ldr	r3, [sp, #12]
    59e8:	3307      	adds	r3, #7
    59ea:	f023 0307 	bic.w	r3, r3, #7
    59ee:	3308      	adds	r3, #8
    59f0:	9303      	str	r3, [sp, #12]
    59f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    59f4:	444b      	add	r3, r9
    59f6:	9309      	str	r3, [sp, #36]	; 0x24
    59f8:	e74c      	b.n	5894 <_vfiprintf_r+0x40>
    59fa:	fb00 3202 	mla	r2, r0, r2, r3
    59fe:	2101      	movs	r1, #1
    5a00:	e786      	b.n	5910 <_vfiprintf_r+0xbc>
    5a02:	2300      	movs	r3, #0
    5a04:	9305      	str	r3, [sp, #20]
    5a06:	4618      	mov	r0, r3
    5a08:	250a      	movs	r5, #10
    5a0a:	4688      	mov	r8, r1
    5a0c:	3101      	adds	r1, #1
    5a0e:	f898 2000 	ldrb.w	r2, [r8]
    5a12:	3a30      	subs	r2, #48	; 0x30
    5a14:	2a09      	cmp	r2, #9
    5a16:	d903      	bls.n	5a20 <_vfiprintf_r+0x1cc>
    5a18:	2b00      	cmp	r3, #0
    5a1a:	d0c5      	beq.n	59a8 <_vfiprintf_r+0x154>
    5a1c:	9005      	str	r0, [sp, #20]
    5a1e:	e7c3      	b.n	59a8 <_vfiprintf_r+0x154>
    5a20:	fb05 2000 	mla	r0, r5, r0, r2
    5a24:	2301      	movs	r3, #1
    5a26:	e7f0      	b.n	5a0a <_vfiprintf_r+0x1b6>
    5a28:	ab03      	add	r3, sp, #12
    5a2a:	9300      	str	r3, [sp, #0]
    5a2c:	4622      	mov	r2, r4
    5a2e:	4b13      	ldr	r3, [pc, #76]	; (5a7c <_vfiprintf_r+0x228>)
    5a30:	a904      	add	r1, sp, #16
    5a32:	4630      	mov	r0, r6
    5a34:	f3af 8000 	nop.w
    5a38:	f1b0 3fff 	cmp.w	r0, #4294967295
    5a3c:	4681      	mov	r9, r0
    5a3e:	d1d8      	bne.n	59f2 <_vfiprintf_r+0x19e>
    5a40:	89a3      	ldrh	r3, [r4, #12]
    5a42:	065b      	lsls	r3, r3, #25
    5a44:	f53f af7d 	bmi.w	5942 <_vfiprintf_r+0xee>
    5a48:	9809      	ldr	r0, [sp, #36]	; 0x24
    5a4a:	e77c      	b.n	5946 <_vfiprintf_r+0xf2>
    5a4c:	ab03      	add	r3, sp, #12
    5a4e:	9300      	str	r3, [sp, #0]
    5a50:	4622      	mov	r2, r4
    5a52:	4b0a      	ldr	r3, [pc, #40]	; (5a7c <_vfiprintf_r+0x228>)
    5a54:	a904      	add	r1, sp, #16
    5a56:	4630      	mov	r0, r6
    5a58:	f000 f888 	bl	5b6c <_printf_i>
    5a5c:	e7ec      	b.n	5a38 <_vfiprintf_r+0x1e4>
    5a5e:	bf00      	nop
    5a60:	00008674 	.word	0x00008674
    5a64:	000086b4 	.word	0x000086b4
    5a68:	00008694 	.word	0x00008694
    5a6c:	00008654 	.word	0x00008654
    5a70:	000086ba 	.word	0x000086ba
    5a74:	000086be 	.word	0x000086be
    5a78:	00000000 	.word	0x00000000
    5a7c:	00005831 	.word	0x00005831

00005a80 <_printf_common>:
    5a80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5a84:	4691      	mov	r9, r2
    5a86:	461f      	mov	r7, r3
    5a88:	688a      	ldr	r2, [r1, #8]
    5a8a:	690b      	ldr	r3, [r1, #16]
    5a8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
    5a90:	4293      	cmp	r3, r2
    5a92:	bfb8      	it	lt
    5a94:	4613      	movlt	r3, r2
    5a96:	f8c9 3000 	str.w	r3, [r9]
    5a9a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    5a9e:	4606      	mov	r6, r0
    5aa0:	460c      	mov	r4, r1
    5aa2:	b112      	cbz	r2, 5aaa <_printf_common+0x2a>
    5aa4:	3301      	adds	r3, #1
    5aa6:	f8c9 3000 	str.w	r3, [r9]
    5aaa:	6823      	ldr	r3, [r4, #0]
    5aac:	0699      	lsls	r1, r3, #26
    5aae:	bf42      	ittt	mi
    5ab0:	f8d9 3000 	ldrmi.w	r3, [r9]
    5ab4:	3302      	addmi	r3, #2
    5ab6:	f8c9 3000 	strmi.w	r3, [r9]
    5aba:	6825      	ldr	r5, [r4, #0]
    5abc:	f015 0506 	ands.w	r5, r5, #6
    5ac0:	d107      	bne.n	5ad2 <_printf_common+0x52>
    5ac2:	f104 0a19 	add.w	sl, r4, #25
    5ac6:	68e3      	ldr	r3, [r4, #12]
    5ac8:	f8d9 2000 	ldr.w	r2, [r9]
    5acc:	1a9b      	subs	r3, r3, r2
    5ace:	429d      	cmp	r5, r3
    5ad0:	db29      	blt.n	5b26 <_printf_common+0xa6>
    5ad2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    5ad6:	6822      	ldr	r2, [r4, #0]
    5ad8:	3300      	adds	r3, #0
    5ada:	bf18      	it	ne
    5adc:	2301      	movne	r3, #1
    5ade:	0692      	lsls	r2, r2, #26
    5ae0:	d42e      	bmi.n	5b40 <_printf_common+0xc0>
    5ae2:	f104 0243 	add.w	r2, r4, #67	; 0x43
    5ae6:	4639      	mov	r1, r7
    5ae8:	4630      	mov	r0, r6
    5aea:	47c0      	blx	r8
    5aec:	3001      	adds	r0, #1
    5aee:	d021      	beq.n	5b34 <_printf_common+0xb4>
    5af0:	6823      	ldr	r3, [r4, #0]
    5af2:	68e5      	ldr	r5, [r4, #12]
    5af4:	f8d9 2000 	ldr.w	r2, [r9]
    5af8:	f003 0306 	and.w	r3, r3, #6
    5afc:	2b04      	cmp	r3, #4
    5afe:	bf08      	it	eq
    5b00:	1aad      	subeq	r5, r5, r2
    5b02:	68a3      	ldr	r3, [r4, #8]
    5b04:	6922      	ldr	r2, [r4, #16]
    5b06:	bf0c      	ite	eq
    5b08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    5b0c:	2500      	movne	r5, #0
    5b0e:	4293      	cmp	r3, r2
    5b10:	bfc4      	itt	gt
    5b12:	1a9b      	subgt	r3, r3, r2
    5b14:	18ed      	addgt	r5, r5, r3
    5b16:	f04f 0900 	mov.w	r9, #0
    5b1a:	341a      	adds	r4, #26
    5b1c:	454d      	cmp	r5, r9
    5b1e:	d11b      	bne.n	5b58 <_printf_common+0xd8>
    5b20:	2000      	movs	r0, #0
    5b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5b26:	2301      	movs	r3, #1
    5b28:	4652      	mov	r2, sl
    5b2a:	4639      	mov	r1, r7
    5b2c:	4630      	mov	r0, r6
    5b2e:	47c0      	blx	r8
    5b30:	3001      	adds	r0, #1
    5b32:	d103      	bne.n	5b3c <_printf_common+0xbc>
    5b34:	f04f 30ff 	mov.w	r0, #4294967295
    5b38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5b3c:	3501      	adds	r5, #1
    5b3e:	e7c2      	b.n	5ac6 <_printf_common+0x46>
    5b40:	18e1      	adds	r1, r4, r3
    5b42:	1c5a      	adds	r2, r3, #1
    5b44:	2030      	movs	r0, #48	; 0x30
    5b46:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    5b4a:	4422      	add	r2, r4
    5b4c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    5b50:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    5b54:	3302      	adds	r3, #2
    5b56:	e7c4      	b.n	5ae2 <_printf_common+0x62>
    5b58:	2301      	movs	r3, #1
    5b5a:	4622      	mov	r2, r4
    5b5c:	4639      	mov	r1, r7
    5b5e:	4630      	mov	r0, r6
    5b60:	47c0      	blx	r8
    5b62:	3001      	adds	r0, #1
    5b64:	d0e6      	beq.n	5b34 <_printf_common+0xb4>
    5b66:	f109 0901 	add.w	r9, r9, #1
    5b6a:	e7d7      	b.n	5b1c <_printf_common+0x9c>

00005b6c <_printf_i>:
    5b6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5b70:	4617      	mov	r7, r2
    5b72:	7e0a      	ldrb	r2, [r1, #24]
    5b74:	b085      	sub	sp, #20
    5b76:	2a6e      	cmp	r2, #110	; 0x6e
    5b78:	4698      	mov	r8, r3
    5b7a:	4606      	mov	r6, r0
    5b7c:	460c      	mov	r4, r1
    5b7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5b80:	f101 0e43 	add.w	lr, r1, #67	; 0x43
    5b84:	f000 80bc 	beq.w	5d00 <_printf_i+0x194>
    5b88:	d81a      	bhi.n	5bc0 <_printf_i+0x54>
    5b8a:	2a63      	cmp	r2, #99	; 0x63
    5b8c:	d02e      	beq.n	5bec <_printf_i+0x80>
    5b8e:	d80a      	bhi.n	5ba6 <_printf_i+0x3a>
    5b90:	2a00      	cmp	r2, #0
    5b92:	f000 80c8 	beq.w	5d26 <_printf_i+0x1ba>
    5b96:	2a58      	cmp	r2, #88	; 0x58
    5b98:	f000 808a 	beq.w	5cb0 <_printf_i+0x144>
    5b9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
    5ba0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    5ba4:	e02a      	b.n	5bfc <_printf_i+0x90>
    5ba6:	2a64      	cmp	r2, #100	; 0x64
    5ba8:	d001      	beq.n	5bae <_printf_i+0x42>
    5baa:	2a69      	cmp	r2, #105	; 0x69
    5bac:	d1f6      	bne.n	5b9c <_printf_i+0x30>
    5bae:	6821      	ldr	r1, [r4, #0]
    5bb0:	681a      	ldr	r2, [r3, #0]
    5bb2:	f011 0f80 	tst.w	r1, #128	; 0x80
    5bb6:	d023      	beq.n	5c00 <_printf_i+0x94>
    5bb8:	1d11      	adds	r1, r2, #4
    5bba:	6019      	str	r1, [r3, #0]
    5bbc:	6813      	ldr	r3, [r2, #0]
    5bbe:	e027      	b.n	5c10 <_printf_i+0xa4>
    5bc0:	2a73      	cmp	r2, #115	; 0x73
    5bc2:	f000 80b4 	beq.w	5d2e <_printf_i+0x1c2>
    5bc6:	d808      	bhi.n	5bda <_printf_i+0x6e>
    5bc8:	2a6f      	cmp	r2, #111	; 0x6f
    5bca:	d02a      	beq.n	5c22 <_printf_i+0xb6>
    5bcc:	2a70      	cmp	r2, #112	; 0x70
    5bce:	d1e5      	bne.n	5b9c <_printf_i+0x30>
    5bd0:	680a      	ldr	r2, [r1, #0]
    5bd2:	f042 0220 	orr.w	r2, r2, #32
    5bd6:	600a      	str	r2, [r1, #0]
    5bd8:	e003      	b.n	5be2 <_printf_i+0x76>
    5bda:	2a75      	cmp	r2, #117	; 0x75
    5bdc:	d021      	beq.n	5c22 <_printf_i+0xb6>
    5bde:	2a78      	cmp	r2, #120	; 0x78
    5be0:	d1dc      	bne.n	5b9c <_printf_i+0x30>
    5be2:	2278      	movs	r2, #120	; 0x78
    5be4:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    5be8:	496e      	ldr	r1, [pc, #440]	; (5da4 <_printf_i+0x238>)
    5bea:	e064      	b.n	5cb6 <_printf_i+0x14a>
    5bec:	681a      	ldr	r2, [r3, #0]
    5bee:	f101 0542 	add.w	r5, r1, #66	; 0x42
    5bf2:	1d11      	adds	r1, r2, #4
    5bf4:	6019      	str	r1, [r3, #0]
    5bf6:	6813      	ldr	r3, [r2, #0]
    5bf8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    5bfc:	2301      	movs	r3, #1
    5bfe:	e0a3      	b.n	5d48 <_printf_i+0x1dc>
    5c00:	f011 0f40 	tst.w	r1, #64	; 0x40
    5c04:	f102 0104 	add.w	r1, r2, #4
    5c08:	6019      	str	r1, [r3, #0]
    5c0a:	d0d7      	beq.n	5bbc <_printf_i+0x50>
    5c0c:	f9b2 3000 	ldrsh.w	r3, [r2]
    5c10:	2b00      	cmp	r3, #0
    5c12:	da03      	bge.n	5c1c <_printf_i+0xb0>
    5c14:	222d      	movs	r2, #45	; 0x2d
    5c16:	425b      	negs	r3, r3
    5c18:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    5c1c:	4962      	ldr	r1, [pc, #392]	; (5da8 <_printf_i+0x23c>)
    5c1e:	220a      	movs	r2, #10
    5c20:	e017      	b.n	5c52 <_printf_i+0xe6>
    5c22:	6820      	ldr	r0, [r4, #0]
    5c24:	6819      	ldr	r1, [r3, #0]
    5c26:	f010 0f80 	tst.w	r0, #128	; 0x80
    5c2a:	d003      	beq.n	5c34 <_printf_i+0xc8>
    5c2c:	1d08      	adds	r0, r1, #4
    5c2e:	6018      	str	r0, [r3, #0]
    5c30:	680b      	ldr	r3, [r1, #0]
    5c32:	e006      	b.n	5c42 <_printf_i+0xd6>
    5c34:	f010 0f40 	tst.w	r0, #64	; 0x40
    5c38:	f101 0004 	add.w	r0, r1, #4
    5c3c:	6018      	str	r0, [r3, #0]
    5c3e:	d0f7      	beq.n	5c30 <_printf_i+0xc4>
    5c40:	880b      	ldrh	r3, [r1, #0]
    5c42:	4959      	ldr	r1, [pc, #356]	; (5da8 <_printf_i+0x23c>)
    5c44:	2a6f      	cmp	r2, #111	; 0x6f
    5c46:	bf14      	ite	ne
    5c48:	220a      	movne	r2, #10
    5c4a:	2208      	moveq	r2, #8
    5c4c:	2000      	movs	r0, #0
    5c4e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    5c52:	6865      	ldr	r5, [r4, #4]
    5c54:	60a5      	str	r5, [r4, #8]
    5c56:	2d00      	cmp	r5, #0
    5c58:	f2c0 809c 	blt.w	5d94 <_printf_i+0x228>
    5c5c:	6820      	ldr	r0, [r4, #0]
    5c5e:	f020 0004 	bic.w	r0, r0, #4
    5c62:	6020      	str	r0, [r4, #0]
    5c64:	2b00      	cmp	r3, #0
    5c66:	d13f      	bne.n	5ce8 <_printf_i+0x17c>
    5c68:	2d00      	cmp	r5, #0
    5c6a:	f040 8095 	bne.w	5d98 <_printf_i+0x22c>
    5c6e:	4675      	mov	r5, lr
    5c70:	2a08      	cmp	r2, #8
    5c72:	d10b      	bne.n	5c8c <_printf_i+0x120>
    5c74:	6823      	ldr	r3, [r4, #0]
    5c76:	07da      	lsls	r2, r3, #31
    5c78:	d508      	bpl.n	5c8c <_printf_i+0x120>
    5c7a:	6923      	ldr	r3, [r4, #16]
    5c7c:	6862      	ldr	r2, [r4, #4]
    5c7e:	429a      	cmp	r2, r3
    5c80:	bfde      	ittt	le
    5c82:	2330      	movle	r3, #48	; 0x30
    5c84:	f805 3c01 	strble.w	r3, [r5, #-1]
    5c88:	f105 35ff 	addle.w	r5, r5, #4294967295
    5c8c:	ebae 0305 	sub.w	r3, lr, r5
    5c90:	6123      	str	r3, [r4, #16]
    5c92:	f8cd 8000 	str.w	r8, [sp]
    5c96:	463b      	mov	r3, r7
    5c98:	aa03      	add	r2, sp, #12
    5c9a:	4621      	mov	r1, r4
    5c9c:	4630      	mov	r0, r6
    5c9e:	f7ff feef 	bl	5a80 <_printf_common>
    5ca2:	3001      	adds	r0, #1
    5ca4:	d155      	bne.n	5d52 <_printf_i+0x1e6>
    5ca6:	f04f 30ff 	mov.w	r0, #4294967295
    5caa:	b005      	add	sp, #20
    5cac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5cb0:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
    5cb4:	493c      	ldr	r1, [pc, #240]	; (5da8 <_printf_i+0x23c>)
    5cb6:	6822      	ldr	r2, [r4, #0]
    5cb8:	6818      	ldr	r0, [r3, #0]
    5cba:	f012 0f80 	tst.w	r2, #128	; 0x80
    5cbe:	f100 0504 	add.w	r5, r0, #4
    5cc2:	601d      	str	r5, [r3, #0]
    5cc4:	d001      	beq.n	5cca <_printf_i+0x15e>
    5cc6:	6803      	ldr	r3, [r0, #0]
    5cc8:	e002      	b.n	5cd0 <_printf_i+0x164>
    5cca:	0655      	lsls	r5, r2, #25
    5ccc:	d5fb      	bpl.n	5cc6 <_printf_i+0x15a>
    5cce:	8803      	ldrh	r3, [r0, #0]
    5cd0:	07d0      	lsls	r0, r2, #31
    5cd2:	bf44      	itt	mi
    5cd4:	f042 0220 	orrmi.w	r2, r2, #32
    5cd8:	6022      	strmi	r2, [r4, #0]
    5cda:	b91b      	cbnz	r3, 5ce4 <_printf_i+0x178>
    5cdc:	6822      	ldr	r2, [r4, #0]
    5cde:	f022 0220 	bic.w	r2, r2, #32
    5ce2:	6022      	str	r2, [r4, #0]
    5ce4:	2210      	movs	r2, #16
    5ce6:	e7b1      	b.n	5c4c <_printf_i+0xe0>
    5ce8:	4675      	mov	r5, lr
    5cea:	fbb3 f0f2 	udiv	r0, r3, r2
    5cee:	fb02 3310 	mls	r3, r2, r0, r3
    5cf2:	5ccb      	ldrb	r3, [r1, r3]
    5cf4:	f805 3d01 	strb.w	r3, [r5, #-1]!
    5cf8:	4603      	mov	r3, r0
    5cfa:	2800      	cmp	r0, #0
    5cfc:	d1f5      	bne.n	5cea <_printf_i+0x17e>
    5cfe:	e7b7      	b.n	5c70 <_printf_i+0x104>
    5d00:	6808      	ldr	r0, [r1, #0]
    5d02:	681a      	ldr	r2, [r3, #0]
    5d04:	6949      	ldr	r1, [r1, #20]
    5d06:	f010 0f80 	tst.w	r0, #128	; 0x80
    5d0a:	d004      	beq.n	5d16 <_printf_i+0x1aa>
    5d0c:	1d10      	adds	r0, r2, #4
    5d0e:	6018      	str	r0, [r3, #0]
    5d10:	6813      	ldr	r3, [r2, #0]
    5d12:	6019      	str	r1, [r3, #0]
    5d14:	e007      	b.n	5d26 <_printf_i+0x1ba>
    5d16:	f010 0f40 	tst.w	r0, #64	; 0x40
    5d1a:	f102 0004 	add.w	r0, r2, #4
    5d1e:	6018      	str	r0, [r3, #0]
    5d20:	6813      	ldr	r3, [r2, #0]
    5d22:	d0f6      	beq.n	5d12 <_printf_i+0x1a6>
    5d24:	8019      	strh	r1, [r3, #0]
    5d26:	2300      	movs	r3, #0
    5d28:	6123      	str	r3, [r4, #16]
    5d2a:	4675      	mov	r5, lr
    5d2c:	e7b1      	b.n	5c92 <_printf_i+0x126>
    5d2e:	681a      	ldr	r2, [r3, #0]
    5d30:	1d11      	adds	r1, r2, #4
    5d32:	6019      	str	r1, [r3, #0]
    5d34:	6815      	ldr	r5, [r2, #0]
    5d36:	6862      	ldr	r2, [r4, #4]
    5d38:	2100      	movs	r1, #0
    5d3a:	4628      	mov	r0, r5
    5d3c:	f000 f9c8 	bl	60d0 <memchr>
    5d40:	b108      	cbz	r0, 5d46 <_printf_i+0x1da>
    5d42:	1b40      	subs	r0, r0, r5
    5d44:	6060      	str	r0, [r4, #4]
    5d46:	6863      	ldr	r3, [r4, #4]
    5d48:	6123      	str	r3, [r4, #16]
    5d4a:	2300      	movs	r3, #0
    5d4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    5d50:	e79f      	b.n	5c92 <_printf_i+0x126>
    5d52:	6923      	ldr	r3, [r4, #16]
    5d54:	462a      	mov	r2, r5
    5d56:	4639      	mov	r1, r7
    5d58:	4630      	mov	r0, r6
    5d5a:	47c0      	blx	r8
    5d5c:	3001      	adds	r0, #1
    5d5e:	d0a2      	beq.n	5ca6 <_printf_i+0x13a>
    5d60:	6823      	ldr	r3, [r4, #0]
    5d62:	079b      	lsls	r3, r3, #30
    5d64:	d507      	bpl.n	5d76 <_printf_i+0x20a>
    5d66:	2500      	movs	r5, #0
    5d68:	f104 0919 	add.w	r9, r4, #25
    5d6c:	68e3      	ldr	r3, [r4, #12]
    5d6e:	9a03      	ldr	r2, [sp, #12]
    5d70:	1a9b      	subs	r3, r3, r2
    5d72:	429d      	cmp	r5, r3
    5d74:	db05      	blt.n	5d82 <_printf_i+0x216>
    5d76:	68e0      	ldr	r0, [r4, #12]
    5d78:	9b03      	ldr	r3, [sp, #12]
    5d7a:	4298      	cmp	r0, r3
    5d7c:	bfb8      	it	lt
    5d7e:	4618      	movlt	r0, r3
    5d80:	e793      	b.n	5caa <_printf_i+0x13e>
    5d82:	2301      	movs	r3, #1
    5d84:	464a      	mov	r2, r9
    5d86:	4639      	mov	r1, r7
    5d88:	4630      	mov	r0, r6
    5d8a:	47c0      	blx	r8
    5d8c:	3001      	adds	r0, #1
    5d8e:	d08a      	beq.n	5ca6 <_printf_i+0x13a>
    5d90:	3501      	adds	r5, #1
    5d92:	e7eb      	b.n	5d6c <_printf_i+0x200>
    5d94:	2b00      	cmp	r3, #0
    5d96:	d1a7      	bne.n	5ce8 <_printf_i+0x17c>
    5d98:	780b      	ldrb	r3, [r1, #0]
    5d9a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    5d9e:	f104 0542 	add.w	r5, r4, #66	; 0x42
    5da2:	e765      	b.n	5c70 <_printf_i+0x104>
    5da4:	000086d6 	.word	0x000086d6
    5da8:	000086c5 	.word	0x000086c5

00005dac <_putc_r>:
    5dac:	b570      	push	{r4, r5, r6, lr}
    5dae:	460d      	mov	r5, r1
    5db0:	4614      	mov	r4, r2
    5db2:	4606      	mov	r6, r0
    5db4:	b118      	cbz	r0, 5dbe <_putc_r+0x12>
    5db6:	6983      	ldr	r3, [r0, #24]
    5db8:	b90b      	cbnz	r3, 5dbe <_putc_r+0x12>
    5dba:	f7ff fc33 	bl	5624 <__sinit>
    5dbe:	4b13      	ldr	r3, [pc, #76]	; (5e0c <_putc_r+0x60>)
    5dc0:	429c      	cmp	r4, r3
    5dc2:	d112      	bne.n	5dea <_putc_r+0x3e>
    5dc4:	6874      	ldr	r4, [r6, #4]
    5dc6:	68a3      	ldr	r3, [r4, #8]
    5dc8:	3b01      	subs	r3, #1
    5dca:	2b00      	cmp	r3, #0
    5dcc:	60a3      	str	r3, [r4, #8]
    5dce:	da16      	bge.n	5dfe <_putc_r+0x52>
    5dd0:	69a2      	ldr	r2, [r4, #24]
    5dd2:	4293      	cmp	r3, r2
    5dd4:	db02      	blt.n	5ddc <_putc_r+0x30>
    5dd6:	b2eb      	uxtb	r3, r5
    5dd8:	2b0a      	cmp	r3, #10
    5dda:	d110      	bne.n	5dfe <_putc_r+0x52>
    5ddc:	4622      	mov	r2, r4
    5dde:	4629      	mov	r1, r5
    5de0:	4630      	mov	r0, r6
    5de2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5de6:	f000 b85b 	b.w	5ea0 <__swbuf_r>
    5dea:	4b09      	ldr	r3, [pc, #36]	; (5e10 <_putc_r+0x64>)
    5dec:	429c      	cmp	r4, r3
    5dee:	d101      	bne.n	5df4 <_putc_r+0x48>
    5df0:	68b4      	ldr	r4, [r6, #8]
    5df2:	e7e8      	b.n	5dc6 <_putc_r+0x1a>
    5df4:	4b07      	ldr	r3, [pc, #28]	; (5e14 <_putc_r+0x68>)
    5df6:	429c      	cmp	r4, r3
    5df8:	bf08      	it	eq
    5dfa:	68f4      	ldreq	r4, [r6, #12]
    5dfc:	e7e3      	b.n	5dc6 <_putc_r+0x1a>
    5dfe:	6823      	ldr	r3, [r4, #0]
    5e00:	1c5a      	adds	r2, r3, #1
    5e02:	6022      	str	r2, [r4, #0]
    5e04:	701d      	strb	r5, [r3, #0]
    5e06:	b2e8      	uxtb	r0, r5
    5e08:	bd70      	pop	{r4, r5, r6, pc}
    5e0a:	bf00      	nop
    5e0c:	00008674 	.word	0x00008674
    5e10:	00008694 	.word	0x00008694
    5e14:	00008654 	.word	0x00008654

00005e18 <__sread>:
    5e18:	b510      	push	{r4, lr}
    5e1a:	460c      	mov	r4, r1
    5e1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    5e20:	f000 f9a6 	bl	6170 <_read_r>
    5e24:	2800      	cmp	r0, #0
    5e26:	bfab      	itete	ge
    5e28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
    5e2a:	89a3      	ldrhlt	r3, [r4, #12]
    5e2c:	181b      	addge	r3, r3, r0
    5e2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
    5e32:	bfac      	ite	ge
    5e34:	6563      	strge	r3, [r4, #84]	; 0x54
    5e36:	81a3      	strhlt	r3, [r4, #12]
    5e38:	bd10      	pop	{r4, pc}

00005e3a <__swrite>:
    5e3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5e3e:	461f      	mov	r7, r3
    5e40:	898b      	ldrh	r3, [r1, #12]
    5e42:	05db      	lsls	r3, r3, #23
    5e44:	4605      	mov	r5, r0
    5e46:	460c      	mov	r4, r1
    5e48:	4616      	mov	r6, r2
    5e4a:	d505      	bpl.n	5e58 <__swrite+0x1e>
    5e4c:	2302      	movs	r3, #2
    5e4e:	2200      	movs	r2, #0
    5e50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    5e54:	f000 f928 	bl	60a8 <_lseek_r>
    5e58:	89a3      	ldrh	r3, [r4, #12]
    5e5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    5e5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    5e62:	81a3      	strh	r3, [r4, #12]
    5e64:	4632      	mov	r2, r6
    5e66:	463b      	mov	r3, r7
    5e68:	4628      	mov	r0, r5
    5e6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5e6e:	f000 b869 	b.w	5f44 <_write_r>

00005e72 <__sseek>:
    5e72:	b510      	push	{r4, lr}
    5e74:	460c      	mov	r4, r1
    5e76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    5e7a:	f000 f915 	bl	60a8 <_lseek_r>
    5e7e:	1c43      	adds	r3, r0, #1
    5e80:	89a3      	ldrh	r3, [r4, #12]
    5e82:	bf15      	itete	ne
    5e84:	6560      	strne	r0, [r4, #84]	; 0x54
    5e86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    5e8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    5e8e:	81a3      	strheq	r3, [r4, #12]
    5e90:	bf18      	it	ne
    5e92:	81a3      	strhne	r3, [r4, #12]
    5e94:	bd10      	pop	{r4, pc}

00005e96 <__sclose>:
    5e96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    5e9a:	f000 b8d3 	b.w	6044 <_close_r>
	...

00005ea0 <__swbuf_r>:
    5ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5ea2:	460e      	mov	r6, r1
    5ea4:	4614      	mov	r4, r2
    5ea6:	4605      	mov	r5, r0
    5ea8:	b118      	cbz	r0, 5eb2 <__swbuf_r+0x12>
    5eaa:	6983      	ldr	r3, [r0, #24]
    5eac:	b90b      	cbnz	r3, 5eb2 <__swbuf_r+0x12>
    5eae:	f7ff fbb9 	bl	5624 <__sinit>
    5eb2:	4b21      	ldr	r3, [pc, #132]	; (5f38 <__swbuf_r+0x98>)
    5eb4:	429c      	cmp	r4, r3
    5eb6:	d12a      	bne.n	5f0e <__swbuf_r+0x6e>
    5eb8:	686c      	ldr	r4, [r5, #4]
    5eba:	69a3      	ldr	r3, [r4, #24]
    5ebc:	60a3      	str	r3, [r4, #8]
    5ebe:	89a3      	ldrh	r3, [r4, #12]
    5ec0:	071a      	lsls	r2, r3, #28
    5ec2:	d52e      	bpl.n	5f22 <__swbuf_r+0x82>
    5ec4:	6923      	ldr	r3, [r4, #16]
    5ec6:	b363      	cbz	r3, 5f22 <__swbuf_r+0x82>
    5ec8:	6923      	ldr	r3, [r4, #16]
    5eca:	6820      	ldr	r0, [r4, #0]
    5ecc:	1ac0      	subs	r0, r0, r3
    5ece:	6963      	ldr	r3, [r4, #20]
    5ed0:	b2f6      	uxtb	r6, r6
    5ed2:	4298      	cmp	r0, r3
    5ed4:	4637      	mov	r7, r6
    5ed6:	db04      	blt.n	5ee2 <__swbuf_r+0x42>
    5ed8:	4621      	mov	r1, r4
    5eda:	4628      	mov	r0, r5
    5edc:	f7ff fb38 	bl	5550 <_fflush_r>
    5ee0:	bb28      	cbnz	r0, 5f2e <__swbuf_r+0x8e>
    5ee2:	68a3      	ldr	r3, [r4, #8]
    5ee4:	3b01      	subs	r3, #1
    5ee6:	60a3      	str	r3, [r4, #8]
    5ee8:	6823      	ldr	r3, [r4, #0]
    5eea:	1c5a      	adds	r2, r3, #1
    5eec:	6022      	str	r2, [r4, #0]
    5eee:	701e      	strb	r6, [r3, #0]
    5ef0:	6963      	ldr	r3, [r4, #20]
    5ef2:	3001      	adds	r0, #1
    5ef4:	4298      	cmp	r0, r3
    5ef6:	d004      	beq.n	5f02 <__swbuf_r+0x62>
    5ef8:	89a3      	ldrh	r3, [r4, #12]
    5efa:	07db      	lsls	r3, r3, #31
    5efc:	d519      	bpl.n	5f32 <__swbuf_r+0x92>
    5efe:	2e0a      	cmp	r6, #10
    5f00:	d117      	bne.n	5f32 <__swbuf_r+0x92>
    5f02:	4621      	mov	r1, r4
    5f04:	4628      	mov	r0, r5
    5f06:	f7ff fb23 	bl	5550 <_fflush_r>
    5f0a:	b190      	cbz	r0, 5f32 <__swbuf_r+0x92>
    5f0c:	e00f      	b.n	5f2e <__swbuf_r+0x8e>
    5f0e:	4b0b      	ldr	r3, [pc, #44]	; (5f3c <__swbuf_r+0x9c>)
    5f10:	429c      	cmp	r4, r3
    5f12:	d101      	bne.n	5f18 <__swbuf_r+0x78>
    5f14:	68ac      	ldr	r4, [r5, #8]
    5f16:	e7d0      	b.n	5eba <__swbuf_r+0x1a>
    5f18:	4b09      	ldr	r3, [pc, #36]	; (5f40 <__swbuf_r+0xa0>)
    5f1a:	429c      	cmp	r4, r3
    5f1c:	bf08      	it	eq
    5f1e:	68ec      	ldreq	r4, [r5, #12]
    5f20:	e7cb      	b.n	5eba <__swbuf_r+0x1a>
    5f22:	4621      	mov	r1, r4
    5f24:	4628      	mov	r0, r5
    5f26:	f000 f81f 	bl	5f68 <__swsetup_r>
    5f2a:	2800      	cmp	r0, #0
    5f2c:	d0cc      	beq.n	5ec8 <__swbuf_r+0x28>
    5f2e:	f04f 37ff 	mov.w	r7, #4294967295
    5f32:	4638      	mov	r0, r7
    5f34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5f36:	bf00      	nop
    5f38:	00008674 	.word	0x00008674
    5f3c:	00008694 	.word	0x00008694
    5f40:	00008654 	.word	0x00008654

00005f44 <_write_r>:
    5f44:	b538      	push	{r3, r4, r5, lr}
    5f46:	4c07      	ldr	r4, [pc, #28]	; (5f64 <_write_r+0x20>)
    5f48:	4605      	mov	r5, r0
    5f4a:	4608      	mov	r0, r1
    5f4c:	4611      	mov	r1, r2
    5f4e:	2200      	movs	r2, #0
    5f50:	6022      	str	r2, [r4, #0]
    5f52:	461a      	mov	r2, r3
    5f54:	f7fd fc66 	bl	3824 <_write>
    5f58:	1c43      	adds	r3, r0, #1
    5f5a:	d102      	bne.n	5f62 <_write_r+0x1e>
    5f5c:	6823      	ldr	r3, [r4, #0]
    5f5e:	b103      	cbz	r3, 5f62 <_write_r+0x1e>
    5f60:	602b      	str	r3, [r5, #0]
    5f62:	bd38      	pop	{r3, r4, r5, pc}
    5f64:	20003824 	.word	0x20003824

00005f68 <__swsetup_r>:
    5f68:	4b32      	ldr	r3, [pc, #200]	; (6034 <__swsetup_r+0xcc>)
    5f6a:	b570      	push	{r4, r5, r6, lr}
    5f6c:	681d      	ldr	r5, [r3, #0]
    5f6e:	4606      	mov	r6, r0
    5f70:	460c      	mov	r4, r1
    5f72:	b125      	cbz	r5, 5f7e <__swsetup_r+0x16>
    5f74:	69ab      	ldr	r3, [r5, #24]
    5f76:	b913      	cbnz	r3, 5f7e <__swsetup_r+0x16>
    5f78:	4628      	mov	r0, r5
    5f7a:	f7ff fb53 	bl	5624 <__sinit>
    5f7e:	4b2e      	ldr	r3, [pc, #184]	; (6038 <__swsetup_r+0xd0>)
    5f80:	429c      	cmp	r4, r3
    5f82:	d10f      	bne.n	5fa4 <__swsetup_r+0x3c>
    5f84:	686c      	ldr	r4, [r5, #4]
    5f86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    5f8a:	b29a      	uxth	r2, r3
    5f8c:	0715      	lsls	r5, r2, #28
    5f8e:	d42c      	bmi.n	5fea <__swsetup_r+0x82>
    5f90:	06d0      	lsls	r0, r2, #27
    5f92:	d411      	bmi.n	5fb8 <__swsetup_r+0x50>
    5f94:	2209      	movs	r2, #9
    5f96:	6032      	str	r2, [r6, #0]
    5f98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    5f9c:	81a3      	strh	r3, [r4, #12]
    5f9e:	f04f 30ff 	mov.w	r0, #4294967295
    5fa2:	bd70      	pop	{r4, r5, r6, pc}
    5fa4:	4b25      	ldr	r3, [pc, #148]	; (603c <__swsetup_r+0xd4>)
    5fa6:	429c      	cmp	r4, r3
    5fa8:	d101      	bne.n	5fae <__swsetup_r+0x46>
    5faa:	68ac      	ldr	r4, [r5, #8]
    5fac:	e7eb      	b.n	5f86 <__swsetup_r+0x1e>
    5fae:	4b24      	ldr	r3, [pc, #144]	; (6040 <__swsetup_r+0xd8>)
    5fb0:	429c      	cmp	r4, r3
    5fb2:	bf08      	it	eq
    5fb4:	68ec      	ldreq	r4, [r5, #12]
    5fb6:	e7e6      	b.n	5f86 <__swsetup_r+0x1e>
    5fb8:	0751      	lsls	r1, r2, #29
    5fba:	d512      	bpl.n	5fe2 <__swsetup_r+0x7a>
    5fbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
    5fbe:	b141      	cbz	r1, 5fd2 <__swsetup_r+0x6a>
    5fc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
    5fc4:	4299      	cmp	r1, r3
    5fc6:	d002      	beq.n	5fce <__swsetup_r+0x66>
    5fc8:	4630      	mov	r0, r6
    5fca:	f7fe ffe1 	bl	4f90 <_free_r>
    5fce:	2300      	movs	r3, #0
    5fd0:	6363      	str	r3, [r4, #52]	; 0x34
    5fd2:	89a3      	ldrh	r3, [r4, #12]
    5fd4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    5fd8:	81a3      	strh	r3, [r4, #12]
    5fda:	2300      	movs	r3, #0
    5fdc:	6063      	str	r3, [r4, #4]
    5fde:	6923      	ldr	r3, [r4, #16]
    5fe0:	6023      	str	r3, [r4, #0]
    5fe2:	89a3      	ldrh	r3, [r4, #12]
    5fe4:	f043 0308 	orr.w	r3, r3, #8
    5fe8:	81a3      	strh	r3, [r4, #12]
    5fea:	6923      	ldr	r3, [r4, #16]
    5fec:	b94b      	cbnz	r3, 6002 <__swsetup_r+0x9a>
    5fee:	89a3      	ldrh	r3, [r4, #12]
    5ff0:	f403 7320 	and.w	r3, r3, #640	; 0x280
    5ff4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    5ff8:	d003      	beq.n	6002 <__swsetup_r+0x9a>
    5ffa:	4621      	mov	r1, r4
    5ffc:	4630      	mov	r0, r6
    5ffe:	f7ff fbbf 	bl	5780 <__smakebuf_r>
    6002:	89a2      	ldrh	r2, [r4, #12]
    6004:	f012 0301 	ands.w	r3, r2, #1
    6008:	d00c      	beq.n	6024 <__swsetup_r+0xbc>
    600a:	2300      	movs	r3, #0
    600c:	60a3      	str	r3, [r4, #8]
    600e:	6963      	ldr	r3, [r4, #20]
    6010:	425b      	negs	r3, r3
    6012:	61a3      	str	r3, [r4, #24]
    6014:	6923      	ldr	r3, [r4, #16]
    6016:	b953      	cbnz	r3, 602e <__swsetup_r+0xc6>
    6018:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    601c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
    6020:	d1ba      	bne.n	5f98 <__swsetup_r+0x30>
    6022:	bd70      	pop	{r4, r5, r6, pc}
    6024:	0792      	lsls	r2, r2, #30
    6026:	bf58      	it	pl
    6028:	6963      	ldrpl	r3, [r4, #20]
    602a:	60a3      	str	r3, [r4, #8]
    602c:	e7f2      	b.n	6014 <__swsetup_r+0xac>
    602e:	2000      	movs	r0, #0
    6030:	e7f7      	b.n	6022 <__swsetup_r+0xba>
    6032:	bf00      	nop
    6034:	200001ac 	.word	0x200001ac
    6038:	00008674 	.word	0x00008674
    603c:	00008694 	.word	0x00008694
    6040:	00008654 	.word	0x00008654

00006044 <_close_r>:
    6044:	b538      	push	{r3, r4, r5, lr}
    6046:	4c06      	ldr	r4, [pc, #24]	; (6060 <_close_r+0x1c>)
    6048:	2300      	movs	r3, #0
    604a:	4605      	mov	r5, r0
    604c:	4608      	mov	r0, r1
    604e:	6023      	str	r3, [r4, #0]
    6050:	f7fd fc22 	bl	3898 <_close>
    6054:	1c43      	adds	r3, r0, #1
    6056:	d102      	bne.n	605e <_close_r+0x1a>
    6058:	6823      	ldr	r3, [r4, #0]
    605a:	b103      	cbz	r3, 605e <_close_r+0x1a>
    605c:	602b      	str	r3, [r5, #0]
    605e:	bd38      	pop	{r3, r4, r5, pc}
    6060:	20003824 	.word	0x20003824

00006064 <_fstat_r>:
    6064:	b538      	push	{r3, r4, r5, lr}
    6066:	4c07      	ldr	r4, [pc, #28]	; (6084 <_fstat_r+0x20>)
    6068:	2300      	movs	r3, #0
    606a:	4605      	mov	r5, r0
    606c:	4608      	mov	r0, r1
    606e:	4611      	mov	r1, r2
    6070:	6023      	str	r3, [r4, #0]
    6072:	f7fd fc14 	bl	389e <_fstat>
    6076:	1c43      	adds	r3, r0, #1
    6078:	d102      	bne.n	6080 <_fstat_r+0x1c>
    607a:	6823      	ldr	r3, [r4, #0]
    607c:	b103      	cbz	r3, 6080 <_fstat_r+0x1c>
    607e:	602b      	str	r3, [r5, #0]
    6080:	bd38      	pop	{r3, r4, r5, pc}
    6082:	bf00      	nop
    6084:	20003824 	.word	0x20003824

00006088 <_isatty_r>:
    6088:	b538      	push	{r3, r4, r5, lr}
    608a:	4c06      	ldr	r4, [pc, #24]	; (60a4 <_isatty_r+0x1c>)
    608c:	2300      	movs	r3, #0
    608e:	4605      	mov	r5, r0
    6090:	4608      	mov	r0, r1
    6092:	6023      	str	r3, [r4, #0]
    6094:	f7fd fc08 	bl	38a8 <_isatty>
    6098:	1c43      	adds	r3, r0, #1
    609a:	d102      	bne.n	60a2 <_isatty_r+0x1a>
    609c:	6823      	ldr	r3, [r4, #0]
    609e:	b103      	cbz	r3, 60a2 <_isatty_r+0x1a>
    60a0:	602b      	str	r3, [r5, #0]
    60a2:	bd38      	pop	{r3, r4, r5, pc}
    60a4:	20003824 	.word	0x20003824

000060a8 <_lseek_r>:
    60a8:	b538      	push	{r3, r4, r5, lr}
    60aa:	4c07      	ldr	r4, [pc, #28]	; (60c8 <_lseek_r+0x20>)
    60ac:	4605      	mov	r5, r0
    60ae:	4608      	mov	r0, r1
    60b0:	4611      	mov	r1, r2
    60b2:	2200      	movs	r2, #0
    60b4:	6022      	str	r2, [r4, #0]
    60b6:	461a      	mov	r2, r3
    60b8:	f7fd fbf8 	bl	38ac <_lseek>
    60bc:	1c43      	adds	r3, r0, #1
    60be:	d102      	bne.n	60c6 <_lseek_r+0x1e>
    60c0:	6823      	ldr	r3, [r4, #0]
    60c2:	b103      	cbz	r3, 60c6 <_lseek_r+0x1e>
    60c4:	602b      	str	r3, [r5, #0]
    60c6:	bd38      	pop	{r3, r4, r5, pc}
    60c8:	20003824 	.word	0x20003824
    60cc:	00000000 	.word	0x00000000

000060d0 <memchr>:
    60d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    60d4:	2a10      	cmp	r2, #16
    60d6:	db2b      	blt.n	6130 <memchr+0x60>
    60d8:	f010 0f07 	tst.w	r0, #7
    60dc:	d008      	beq.n	60f0 <memchr+0x20>
    60de:	f810 3b01 	ldrb.w	r3, [r0], #1
    60e2:	3a01      	subs	r2, #1
    60e4:	428b      	cmp	r3, r1
    60e6:	d02d      	beq.n	6144 <memchr+0x74>
    60e8:	f010 0f07 	tst.w	r0, #7
    60ec:	b342      	cbz	r2, 6140 <memchr+0x70>
    60ee:	d1f6      	bne.n	60de <memchr+0xe>
    60f0:	b4f0      	push	{r4, r5, r6, r7}
    60f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    60f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    60fa:	f022 0407 	bic.w	r4, r2, #7
    60fe:	f07f 0700 	mvns.w	r7, #0
    6102:	2300      	movs	r3, #0
    6104:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    6108:	3c08      	subs	r4, #8
    610a:	ea85 0501 	eor.w	r5, r5, r1
    610e:	ea86 0601 	eor.w	r6, r6, r1
    6112:	fa85 f547 	uadd8	r5, r5, r7
    6116:	faa3 f587 	sel	r5, r3, r7
    611a:	fa86 f647 	uadd8	r6, r6, r7
    611e:	faa5 f687 	sel	r6, r5, r7
    6122:	b98e      	cbnz	r6, 6148 <memchr+0x78>
    6124:	d1ee      	bne.n	6104 <memchr+0x34>
    6126:	bcf0      	pop	{r4, r5, r6, r7}
    6128:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    612c:	f002 0207 	and.w	r2, r2, #7
    6130:	b132      	cbz	r2, 6140 <memchr+0x70>
    6132:	f810 3b01 	ldrb.w	r3, [r0], #1
    6136:	3a01      	subs	r2, #1
    6138:	ea83 0301 	eor.w	r3, r3, r1
    613c:	b113      	cbz	r3, 6144 <memchr+0x74>
    613e:	d1f8      	bne.n	6132 <memchr+0x62>
    6140:	2000      	movs	r0, #0
    6142:	4770      	bx	lr
    6144:	3801      	subs	r0, #1
    6146:	4770      	bx	lr
    6148:	2d00      	cmp	r5, #0
    614a:	bf06      	itte	eq
    614c:	4635      	moveq	r5, r6
    614e:	3803      	subeq	r0, #3
    6150:	3807      	subne	r0, #7
    6152:	f015 0f01 	tst.w	r5, #1
    6156:	d107      	bne.n	6168 <memchr+0x98>
    6158:	3001      	adds	r0, #1
    615a:	f415 7f80 	tst.w	r5, #256	; 0x100
    615e:	bf02      	ittt	eq
    6160:	3001      	addeq	r0, #1
    6162:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    6166:	3001      	addeq	r0, #1
    6168:	bcf0      	pop	{r4, r5, r6, r7}
    616a:	3801      	subs	r0, #1
    616c:	4770      	bx	lr
    616e:	bf00      	nop

00006170 <_read_r>:
    6170:	b538      	push	{r3, r4, r5, lr}
    6172:	4c07      	ldr	r4, [pc, #28]	; (6190 <_read_r+0x20>)
    6174:	4605      	mov	r5, r0
    6176:	4608      	mov	r0, r1
    6178:	4611      	mov	r1, r2
    617a:	2200      	movs	r2, #0
    617c:	6022      	str	r2, [r4, #0]
    617e:	461a      	mov	r2, r3
    6180:	f7fd fb32 	bl	37e8 <_read>
    6184:	1c43      	adds	r3, r0, #1
    6186:	d102      	bne.n	618e <_read_r+0x1e>
    6188:	6823      	ldr	r3, [r4, #0]
    618a:	b103      	cbz	r3, 618e <_read_r+0x1e>
    618c:	602b      	str	r3, [r5, #0]
    618e:	bd38      	pop	{r3, r4, r5, pc}
    6190:	20003824 	.word	0x20003824
    6194:	80000000 	.word	0x80000000
    6198:	84000400 	.word	0x84000400
    619c:	80100010 	.word	0x80100010
    61a0:	c6180410 	.word	0xc6180410
    61a4:	f8008410 	.word	0xf8008410
    61a8:	ffe007e0 	.word	0xffe007e0
    61ac:	f81f001f 	.word	0xf81f001f
    61b0:	ffff07ff 	.word	0xffff07ff
    61b4:	000b0000 	.word	0x000b0000
    61b8:	00150010 	.word	0x00150010
    61bc:	001f001a 	.word	0x001f001a
    61c0:	02eb02e0 	.word	0x02eb02e0
    61c4:	02f5001d 	.word	0x02f5001d
    61c8:	02ff02fa 	.word	0x02ff02fa
    61cc:	042b0420 	.word	0x042b0420
    61d0:	04350430 	.word	0x04350430
    61d4:	043f043a 	.word	0x043f043a
    61d8:	056b0560 	.word	0x056b0560
    61dc:	05750570 	.word	0x05750570
    61e0:	057f057a 	.word	0x057f057a
    61e4:	06ab06a0 	.word	0x06ab06a0
    61e8:	06b506b0 	.word	0x06b506b0
    61ec:	06bf06ba 	.word	0x06bf06ba
    61f0:	07eb07e0 	.word	0x07eb07e0
    61f4:	07f507f0 	.word	0x07f507f0
    61f8:	07ff07fa 	.word	0x07ff07fa
    61fc:	580b5800 	.word	0x580b5800
    6200:	58155810 	.word	0x58155810
    6204:	581f581a 	.word	0x581f581a
    6208:	5aeb5ae0 	.word	0x5aeb5ae0
    620c:	5af55af0 	.word	0x5af55af0
    6210:	5aff5afa 	.word	0x5aff5afa
    6214:	5c2b5c20 	.word	0x5c2b5c20
    6218:	5c355c30 	.word	0x5c355c30
    621c:	5c3f5c3a 	.word	0x5c3f5c3a
    6220:	5d6b5d60 	.word	0x5d6b5d60
    6224:	5d755d70 	.word	0x5d755d70
    6228:	5d7f5d7a 	.word	0x5d7f5d7a
    622c:	5eab5ea0 	.word	0x5eab5ea0
    6230:	5eb55eb0 	.word	0x5eb55eb0
    6234:	5ebf5eba 	.word	0x5ebf5eba
    6238:	5feb5fe0 	.word	0x5feb5fe0
    623c:	5ff55ff0 	.word	0x5ff55ff0
    6240:	5fff5ffa 	.word	0x5fff5ffa
    6244:	800b8000 	.word	0x800b8000
    6248:	80158010 	.word	0x80158010
    624c:	801f801a 	.word	0x801f801a
    6250:	82eb82e0 	.word	0x82eb82e0
    6254:	82f582f0 	.word	0x82f582f0
    6258:	82ff82fa 	.word	0x82ff82fa
    625c:	842b8420 	.word	0x842b8420
    6260:	84358430 	.word	0x84358430
    6264:	843f843a 	.word	0x843f843a
    6268:	856b8560 	.word	0x856b8560
    626c:	85758570 	.word	0x85758570
    6270:	857f857a 	.word	0x857f857a
    6274:	86ab86a0 	.word	0x86ab86a0
    6278:	86b586b0 	.word	0x86b586b0
    627c:	86bf86ba 	.word	0x86bf86ba
    6280:	87eb87e0 	.word	0x87eb87e0
    6284:	87f587f0 	.word	0x87f587f0
    6288:	87ff87fa 	.word	0x87ff87fa
    628c:	a80ba800 	.word	0xa80ba800
    6290:	a815a810 	.word	0xa815a810
    6294:	a81fa81a 	.word	0xa81fa81a
    6298:	aaebaae0 	.word	0xaaebaae0
    629c:	aaf5aaf0 	.word	0xaaf5aaf0
    62a0:	aaffaafa 	.word	0xaaffaafa
    62a4:	ac2bac20 	.word	0xac2bac20
    62a8:	0566ac30 	.word	0x0566ac30
    62ac:	ac3fac3a 	.word	0xac3fac3a
    62b0:	ad6bad60 	.word	0xad6bad60
    62b4:	ad75ad70 	.word	0xad75ad70
    62b8:	ad7fad7a 	.word	0xad7fad7a
    62bc:	aeabaea0 	.word	0xaeabaea0
    62c0:	aeb5aeb0 	.word	0xaeb5aeb0
    62c4:	aebfaeba 	.word	0xaebfaeba
    62c8:	afebafe0 	.word	0xafebafe0
    62cc:	aff5aff0 	.word	0xaff5aff0
    62d0:	afffaffa 	.word	0xafffaffa
    62d4:	d00bd000 	.word	0xd00bd000
    62d8:	d015d010 	.word	0xd015d010
    62dc:	d01fd01a 	.word	0xd01fd01a
    62e0:	d2ebd2e0 	.word	0xd2ebd2e0
    62e4:	d2f5d2f0 	.word	0xd2f5d2f0
    62e8:	d2ffd2fa 	.word	0xd2ffd2fa
    62ec:	d42bd420 	.word	0xd42bd420
    62f0:	d435d430 	.word	0xd435d430
    62f4:	d43fd43a 	.word	0xd43fd43a
    62f8:	d56bd560 	.word	0xd56bd560
    62fc:	d575d570 	.word	0xd575d570
    6300:	d57fd57a 	.word	0xd57fd57a
    6304:	d6abd6a0 	.word	0xd6abd6a0
    6308:	d6b5d6b0 	.word	0xd6b5d6b0
    630c:	d6bfd6ba 	.word	0xd6bfd6ba
    6310:	d7ebd7e0 	.word	0xd7ebd7e0
    6314:	d7f5d7f0 	.word	0xd7f5d7f0
    6318:	d7ffd7fa 	.word	0xd7ffd7fa
    631c:	f80bf800 	.word	0xf80bf800
    6320:	f815f810 	.word	0xf815f810
    6324:	f81ff81a 	.word	0xf81ff81a
    6328:	faebfae0 	.word	0xfaebfae0
    632c:	faf5faf0 	.word	0xfaf5faf0
    6330:	fafffafa 	.word	0xfafffafa
    6334:	fc2bfc20 	.word	0xfc2bfc20
    6338:	fc35fc30 	.word	0xfc35fc30
    633c:	fc3ffc3a 	.word	0xfc3ffc3a
    6340:	fd6bfd60 	.word	0xfd6bfd60
    6344:	fd75fd70 	.word	0xfd75fd70
    6348:	fd7ffd7a 	.word	0xfd7ffd7a
    634c:	feabfea0 	.word	0xfeabfea0
    6350:	feb5feb0 	.word	0xfeb5feb0
    6354:	febffeba 	.word	0xfebffeba
    6358:	ffebffe0 	.word	0xffebffe0
    635c:	fff5fff0 	.word	0xfff5fff0
    6360:	fffffffa 	.word	0xfffffffa
    6364:	10820841 	.word	0x10820841
    6368:	212418e3 	.word	0x212418e3
    636c:	39c73186 	.word	0x39c73186
    6370:	4a694228 	.word	0x4a694228
    6374:	630c5acb 	.word	0x630c5acb
    6378:	73ae632c 	.word	0x73ae632c
    637c:	8c518410 	.word	0x8c518410
    6380:	9cf394b2 	.word	0x9cf394b2
    6384:	b596ad55 	.word	0xb596ad55
    6388:	c638bdf7 	.word	0xc638bdf7
    638c:	dedbd69a 	.word	0xdedbd69a
    6390:	ef7de73c 	.word	0xef7de73c
    6394:	6e305b1b 	.word	0x6e305b1b
    6398:	00000008 	.word	0x00000008
    639c:	00000008 	.word	0x00000008
    63a0:	00000008 	.word	0x00000008
    63a4:	00000008 	.word	0x00000008
    63a8:	00000008 	.word	0x00000008
    63ac:	00000008 	.word	0x00000008
    63b0:	00000008 	.word	0x00000008
    63b4:	00000008 	.word	0x00000008
    63b8:	00000010 	.word	0x00000010
    63bc:	00000010 	.word	0x00000010
    63c0:	00000010 	.word	0x00000010
    63c4:	00000010 	.word	0x00000010
    63c8:	00000010 	.word	0x00000010
    63cc:	00000010 	.word	0x00000010
    63d0:	00000010 	.word	0x00000010
    63d4:	00000010 	.word	0x00000010
    63d8:	00000018 	.word	0x00000018
    63dc:	00000018 	.word	0x00000018
    63e0:	00000018 	.word	0x00000018
    63e4:	00000018 	.word	0x00000018
    63e8:	00000018 	.word	0x00000018
    63ec:	00000018 	.word	0x00000018
    63f0:	00000018 	.word	0x00000018
    63f4:	00000018 	.word	0x00000018
    63f8:	00000020 	.word	0x00000020
    63fc:	00000020 	.word	0x00000020
    6400:	00000020 	.word	0x00000020
    6404:	00000020 	.word	0x00000020
    6408:	00000020 	.word	0x00000020
    640c:	00000020 	.word	0x00000020
    6410:	00000020 	.word	0x00000020
    6414:	00000020 	.word	0x00000020
    6418:	00000028 	.word	0x00000028
    641c:	00000028 	.word	0x00000028
    6420:	00000028 	.word	0x00000028
    6424:	00000028 	.word	0x00000028
    6428:	00000028 	.word	0x00000028
    642c:	00000028 	.word	0x00000028
    6430:	00000028 	.word	0x00000028
    6434:	00000028 	.word	0x00000028
    6438:	00000030 	.word	0x00000030
    643c:	00000030 	.word	0x00000030
    6440:	00000030 	.word	0x00000030
    6444:	00000030 	.word	0x00000030
    6448:	00000030 	.word	0x00000030
    644c:	00000030 	.word	0x00000030
    6450:	00000030 	.word	0x00000030
    6454:	00000030 	.word	0x00000030
    6458:	00000038 	.word	0x00000038
    645c:	00000038 	.word	0x00000038
    6460:	00000038 	.word	0x00000038
    6464:	00000038 	.word	0x00000038
    6468:	00000038 	.word	0x00000038
    646c:	00000038 	.word	0x00000038
    6470:	00000038 	.word	0x00000038
    6474:	00000038 	.word	0x00000038
    6478:	00000040 	.word	0x00000040
    647c:	00000040 	.word	0x00000040
    6480:	00000040 	.word	0x00000040
    6484:	00000040 	.word	0x00000040
    6488:	00000040 	.word	0x00000040
    648c:	00000040 	.word	0x00000040
    6490:	00000040 	.word	0x00000040
    6494:	00000040 	.word	0x00000040
    6498:	00000048 	.word	0x00000048
    649c:	00000048 	.word	0x00000048
    64a0:	00000048 	.word	0x00000048
    64a4:	00000048 	.word	0x00000048
    64a8:	00000048 	.word	0x00000048
    64ac:	00000048 	.word	0x00000048
    64b0:	00000048 	.word	0x00000048
    64b4:	00000048 	.word	0x00000048
    64b8:	0000004f 	.word	0x0000004f
    64bc:	0000004f 	.word	0x0000004f
    64c0:	0000004f 	.word	0x0000004f
    64c4:	0000004f 	.word	0x0000004f
    64c8:	0000004f 	.word	0x0000004f
    64cc:	0000004f 	.word	0x0000004f
    64d0:	0000004f 	.word	0x0000004f
    64d4:	0000004f 	.word	0x0000004f

000064d8 <DECIDreturn>:
    64d8:	363f5b1b 00000063 0000001b 0000005b     .[?6c.......[...
    64e8:	00000052                                R...

000064ec <csiEscCodes>:
    64ec:	43424140 47464544 4c4b4a48 6158504d     @ABCDEFGHJKLMPXa
    64fc:	66656463 6d6c6867 7372716e 00006075     cdefghlmnqrsu`..
    650c:	00007325 000a000a 00140014 00000014     %s..............
    651c:	000a017c 000a017c 00140186 00140000     |...|...........
    652c:	0122000a 00140186 01220190 0122000a     .."......."...".
    653c:	012c0014 0122017c 012c0186 012c0014     ..,.|."...,...,.
    654c:	0136017c 001e0000 00280032 00320000     |.6.....2.(...2.
    655c:	003c0032 001e0050 00280118 00280046     2.<.P.....(.F.(.
    656c:	00be0050 00be0050 00c80118 00280118     P...P.........(.
    657c:	00be0122 00460000 00500032 005a0000     ".....F.2.P...Z.
    658c:	00640032 006e0000 00780032 00820000     2.d...n.2.x.....
    659c:	008c0032 00960000 00a00032 00aa0000     2.......2.......
    65ac:	00b40032 00be0000 00c80032 00c8012c     2.......2...,...
    65bc:	00d20172 00dc001e 00e60172 00f0001e     r.......r.......
    65cc:	00fa0172 0104001e 010e0172 0118005a     r.......r...Z...
    65dc:	0122012c 82be50b4 8cbe82aa 64963c8c     ,."..P.......<.d
    65ec:	64dc3cd2 a08c9682 aadca08c a0e696dc     .<.d............
    65fc:	50f03c78 5a78466e aaaa3c96 a0dc3cc8     x<.PnFxZ.<...<..
    660c:	aae6a0d2 6e617254 69722073 73746867     ....Trans rights
    661c:	65726120 6d756820 72206e61 74686769      are human right
    662c:	00000073 355e3331 31202b20 20355e36     s...13^5 + 16^5 
    663c:	3731203d 0000355e 69746552 616c7563     = 17^5..Reticula
    664c:	676e6974 6c705320 73656e69 00000000     ting Splines....
    665c:	6c6f6976 65636e65 726f772e 0000736b     violence.works..
    666c:	2b206953 00425020 6c6c694b 6c694220     Si + PB.Kill Bil
    667c:	6e6f696c 65726961 61282073 5420646e     lionaires (and T
    668c:	6c6c6972 616e6f69 29657269 00000000     rillionaire)....
    669c:	65746e49 74736572 206e6920 68636574     Interest in tech
    66ac:	6f6c6f6e 69207967 6f6e2073 20612074     nology is not a 
    66bc:	73726570 6c616e6f 00797469 50203031     personality.10 P
    66cc:	544e4952 52484320 30322824 2b352e35     RINT CHR$(205.5+
    66dc:	28444e52 3b292931 47203a20 204f544f     RND(1)); : GOTO 
    66ec:	00003031 67206f4e 2e73646f 206f4e20     10..No gods. No 
    66fc:	7473616d 2e737265 206f4e20 65747865     masters. No exte
    670c:	6c616e72 62696c20 69726172 002e7365     rnal libraries..
    671c:	6c6c694b 7a614e20 00007369 6e616954     Kill Nazis..Tian
    672c:	656d6e61 7153206e 65726175 38393120     anmen Square 198
    673c:	00000039 72656d41 20616369 20736177     9...America was 
    674c:	6e756f66 20646564 73206e6f 6576616c     founded on slave
    675c:	00007972 72656854 73692065 6c6e6f20     ry..There is onl
    676c:	61632079 61746970 6e61206c 616c2064     y capital and la
    677c:	00726f62 6f636e45 67617275 59532065     bor.Encourage SY
    678c:	54454d4d 20434952 73616c63 61772073     MMETRIC class wa
    679c:	72616672 00000065 6f676f56 6f50206e     rfare...Vogon Po
    67ac:	79727465 00000000 694e2041 54206563     etry....A Nice T
    67bc:	00005954 78696e55 6f706520 6d206863     TY..Unix epoch m
    67cc:	73756e69 46783020 61642046 00007379     inus 0xFF days..
    67dc:	3d202069 35783020 35373366 20666439     i  = 0x5f3759df 
    67ec:	2028202d 3e3e2069 29203120 0000003b     - ( i >> 1 );...
    67fc:	61657053 7274206b 20687475 70206f74     Speak truth to p
    680c:	7265776f 2749203b 7573206d 74206572     ower; I'm sure t
    681c:	27796568 6c206c6c 65747369 6874206e     hey'll listen th
    682c:	74207369 2e656d69 00000000 63666544     is time.....Defc
    683c:	73276e6f 6e616320 656c6563 32282064     on's canceled (2
    684c:	29303230 00000000 73746152 7473656e     020)....Ratsnest
    685c:	6f4e203a 6e696874 6f542067 216f4420     : Nothing To Do!
    686c:	00000000 68207449 36207361 656b2039     ....It has 69 ke
    687c:	002e7379 61636542 20657375 342d5456     ys..Because VT-4
    688c:	77203032 61207361 6165726c 74207964     20 was already t
    689c:	6e656b61 00000000 706d6f43 73736572     aken....Compress
    68ac:	206e6f69 6f676c61 68746972 6162206d     ion algorithm ba
    68bc:	20646573 42206e6f 28205042 37393931     sed on BBP (1997
    68cc:	00000029 63616554 65682068 68746c61     )...Teach health
    68dc:	736e6920 6e617275 70206563 69766f72      insurance provi
    68ec:	73726564 206f7420 65646f63 0000002e     ders to code....
    68fc:	6e617247 65432064 6172746e 6148206c     Grand Central Ha
    690c:	54206b63 50206568 656e616c 00000074     ck The Planet...
    691c:	69466957 20736920 20746f6e 65726977     WiFi is not wire
    692c:	7373656c 68744520 656e7265 00002174     less Ethernet!..
    693c:	65766153 65687420 616c7020 2c74656e     Save the planet,
    694c:	726f7420 61206863 73616720 61747320      torch a gas sta
    695c:	6e6f6974 00000000 694e2041 54206563     tion....A Nice T
    696c:	202e5954 4f206e41 6f43204b 7475706d     TY. An OK Comput
    697c:	002e7265 65545355 6964656c 6e6f646c     er..USTeledildon
    698c:	00736369 696c6f53 69726164 69207974     ics.Solidarity i
    699c:	6f6e2073 20612074 2077656e 6d617266     s not a new fram
    69ac:	726f7765 0000006b 61657242 616f6264     ework...Breadboa
    69bc:	6e696472 73492067 746f4e20 43204120     rding Is Not A C
    69cc:	656d6972 00000000 2066664f 6f207962     rime....Off by o
    69dc:	6520656e 726f7272 72612073 6f632065     ne errors are co
    69ec:	6e6f6d6d 00000000 00000002 00000003     mmon............
    69fc:	00000028 00000029 00000004 00000005     (...)...........
    6a0c:	00000006 00000007 00000020 00000021     ........ ...!...
    6a1c:	00000022 00000023 00000024 00000025     "...#...$...%...
    6a2c:	00000026 00000027 00000008 00000009     &...'...........
    6a3c:	0000000a 0000000b 42000800 42000c00     ...........B...B
    6a4c:	42001000 42001400 42001800 42001c00     ...B...B...B...B

00006a5c <CodePage437>:
	...
    6d94:	01000000 06186080 18608001 60800106     .....`....`....`
    6da4:	80010000 00000060 00000000 66986106     ....`........a.f
    6db4:	98618619 00000000 00000000 00000000     ..a.............
    6dc4:	00000000 98610600 fb8f1966 8f1966fe     ......a.f....f..
    6dd4:	1966fefb 00986186 00000000 80010000     ..f..a..........
    6de4:	891f7e60 1f7e6082 7e649081 6080811f     `~...`~...d~...`
    6df4:	00000000 04000000 29a60823 1820c106     ........#..).. .
    6e04:	98200304 324c1165 00000008 00000000     .. .e.L2........
    6e14:	84e08107 10420821 5a081e78 87208216     ....!.B.x..Z.. .
    6e24:	0000f6d9 00000000 30c00000 00030618     ...........0....
    6e34:	000000c0 00000000 00000000 00000000     ................
    6e44:	40000000 03020810 0c30c000 08c00003     ...@......0.....
    6e54:	10400002 00000000 01000000 02084000     ..@..........@..
    6e64:	06186000 18608001 00010208 00000040     .`....`.....@...
    6e74:	00000000 42000000 90408210 40c23fff     .......B..@..?.@
    6e84:	80104290 00000000 00000000 00000000     .B..............
    6e94:	80000208 e0bfff20 02082080 00000000     .... .... ......
	...
    6eb4:	18000000 c0000306 00001040 00000000     ........@.......
    6ec4:	00000000 ff000000 0000e0bf 00000000     ................
	...
    6ee8:	030e3800 0000e080 00000000 08200000     .8............ .
    6ef8:	80000104 02041020 10408000 00000208     .... .....@.....
    6f08:	00000000 e0030000 cc1863f8 b0c1061b     .........c......
    6f18:	63061b6c f8e0c318 00000000 00000000     l..c............
    6f28:	1b3c70c0 0c30c004 30c00003 e107030c     .p<...0....0....
    6f38:	000000f8 00000000 c1f8e107 061860b0     .............`..
    6f48:	0187030e 0f30c0c0 0000fefb 00000000     ......0.........
    6f58:	fefb0f00 60c00003 80030e30 b0810618     .......`0.......
    6f68:	00f8e167 00000000 40000000 03070c30     g..........@0...
    6f78:	31649040 04fefb0f 10400001 00000000     @.d1......@.....
    6f88:	0f000000 30c0fefb c1f8e30f 061860b0     .......0.....`..
    6f98:	e167a081 000000f8 00000000 60f8e003     ..g............`
    6fa8:	00030c18 1b8c3ffe 67b0c106 0000f8e1     .....?.....g....
    6fb8:	00000000 fefb0f00 20608001 00010408     ..........` ....
    6fc8:	0c302080 00c00003 00000000 e0030000     . 0.............
    6fd8:	6cb0c1f8 0f3e061b c1061b8c f8e063b0     ...l..>......c..
    6fe8:	00000000 07000000 b0c1f8e1 7d0e3b6c     ............l;.}
    6ff8:	0618609f e1c70003 000000f0 00000000     .`..............
    7008:	38000000 e080030e 00000000 030e3800     ...8.........8..
    7018:	0000e080 00000000 00000000 80030e38     ............8...
    7028:	000000e0 0e380000 40c00003 00000010     ......8....@....
    7038:	30000000 03030c0c 30c0c000 0cc00003     ...0.......0....
    7048:	0c300003 00000000 00000000 00000000     ..0.............
    7058:	00fefb0f fefb0f00 00000000 00000000     ................
    7068:	00000000 3000030c 30c0000c c0c00003     .......0...0....
    7078:	0c0c3030 00000003 00000000 f8e10700     00..............
    7088:	6060b0c1 01061818 00006080 00608001     ..``.....`....`.
    7098:	00000000 e1070000 6cb0c1f8 b4d33edb     ...........l.>..
    70a8:	c036fbec f8e10730 00000000 00000000     ..6.0...........
    70b8:	0d367080 c18c3186 fefb6fb0 1b6cb0c1     .p6..1...o....l.
    70c8:	00000006 00000000 61f8e30f 86196698     ...........a.f..
    70d8:	19861f7e 6f986186 0000f8e3 00000000     ~....a.o........
    70e8:	f8e00300 036c9861 0c30c000 98610003     ....a.l...0...a.
    70f8:	00f8e063 00000000 c30f0000 861966f0     c............f..
    7108:	98618631 668c1966 f0c38f19 00000000     1.a.f..f........
    7118:	0f000000 30c0fefb fc00030c 00030c3f     .......0....?...
    7128:	fb0f30c0 000000fe 00000000 c0fefb0f     .0..............
    7138:	00030c30 030c3ffc 0c30c000 00000003     0....?....0.....
    7148:	00000000 f8e00300 036c9861 0c30c000     ........a.l...0.
    7158:	98611e7b 00f8e063 00000000 1b0c0000     {.a.c...........
    7168:	6cb0c106 bfff061b c1061bec 061b6cb0     ...l.........l..
    7178:	00000000 07000000 0618f8e1 18608001     ..............`.
    7188:	60800106 e1070618 000000f8 00000000     ...`............
    7198:	067ef801 18608001 60800106 8731c618     ..~...`....`..1.
    71a8:	0000f0c1 00000000 061b0c00 838d31c6     .............1..
    71b8:	0d38e060 31c66083 00061b8c 00000000     `.8..`.1........
    71c8:	030c0000 0c30c000 30c00003 c000030c     ......0....0....
    71d8:	fefb0f30 00000000 0c000000 bde38e1b     0...............
    71e8:	c976dbed 061b6cb2 1b6cb0c1 00000006     ..v..l....l.....
    71f8:	00000000 e1861b0c 661b6dbc 5b6cb3c9     .........m.f..l[
    7208:	ecb0c31e 0000061b 00000000 f8e00300     ................
    7218:	1b6cb0e3 6cb0c106 b8c1061b 00f8e0e3     ..l....l........
    7228:	00000000 e30f0000 6cb0c1f8 3ffe061b     ...........l...?
    7238:	c000038c 00030c30 00000000 07000000     ....0...........
    7248:	b0c1f8e1 c1061b6c 36db6cb0 d98731c6     ....l....l.6.1..
    7258:	000000f6 00000000 c1f8e30f 061b6cb0     .............l..
    7268:	638c3ffe cc30c318 0000061b 00000000     .?.c..0.........
    7278:	f8e10700 036cb0c1 801f7e00 b0c10618     ......l..~......
    7288:	00f8e167 00000000 fb0f0000 000208fe     g...............
    7298:	02082080 08208000 20800002 00000000     . .... .... ....
    72a8:	0c000000 b0c1061b c1061b6c 061b6cb0     ........l....l..
    72b8:	e063b0c1 000000f8 00000000 c1061b0c     ..c.............
    72c8:	8c3166b0 60c31863 810d36d8 000020c0     .f1.c..`.6... ..
    72d8:	00000000 061b0c00 1b6cb0c1 6db2c906     ..........l....m
    72e8:	b5d576db 008c796f 00000000 1b0c0000     .v..oy..........
    72f8:	c3186306 060cf860 63d8e003 061bcc18     .c..`......c....
    7308:	00000000 0c000000 1863061b 1cd860c3     ..........c..`..
    7318:	20c00107 80000208 00000020 00000000     ... .... .......
    7328:	03fefb0f 1060c000 0103060c 0f30c0c0     ......`.......0.
    7338:	0000fefb 00000000 f8e00300 00030c30     ............0...
    7348:	030c30c0 0c30c000 00f8e003 00000000     .0....0.........
    7358:	01060000 010c3080 030c6080 03186000     .....0...`...`..
    7368:	0618c000 00000000 07000000 030cf0c1     ................
    7378:	0c30c000 30c00003 c107030c 000000f0     ..0....0........
    7388:	00000000 36708000 8c31860d 0060b0c1     ......p6..1...`.
	...
    73b4:	00fefb0f 00000000 80030000 00030ce0     ................
    73c4:	00001860 00000000 00000000 00000000     `...............
	...
    73dc:	01fcf003 fef86380 f823b0c0 000000fe     .....c....#.....
    73ec:	00000000 c000030c fcf30d30 0b6cb8e1     ........0.....l.
    73fc:	6fb8e102 00007cf3 00000000 00000000     ...o.|..........
    740c:	e1070000 6cb0c1f8 30c00003 00fef907     .......l...0....
    741c:	00000000 18000000 67800106 b0c3f6d9     ...........g....
    742c:	c3061bec f6d9e7b0 00000000 00000000     ................
    743c:	00000000 c1f8e107 fefb6fb0 f10730c0     .........o...0..
    744c:	000000fc 00000000 3138e000 c000638c     ..........81.c..
    745c:	00033ffc 030c30c0 0000c000 00000000     .?...0..........
    746c:	00000000 d9070000 8731c6f6 30c0f0c1     ..........1....0
    747c:	c3f8e107 f8e1e7b0 030c0000 0d30c000     ..............0.
    748c:	b8e178e3 c1061b6c 061b6cb0 00000000     .x..l....l......
    749c:	01000000 00006080 18e08003 60800106     .....`.........`
    74ac:	e1070618 000000f8 00000000 00186000     .............`..
    74bc:	18600000 60800106 8c010618 31c61863     ..`....`....c..1
    74cc:	00f0c187 00030c00 638c30c0 0f36cc30     .........0.c0.6.
    74dc:	33ccc083 000c330c 00000000 c0030000     ...3.3..........
    74ec:	00030cf0 030c30c0 0c30c000 f8e00303     .....0....0.....
	...
    7508:	e70c330c 669b6dbf 1b6cb0c1 00000006     .3...m.f..l.....
	...
    7520:	f8e20b00 1b6cb8e1 6cb0c106 0000061b     ......l....l....
	...
    7538:	e1070000 cc30c3f8 30c30c33 00f8e1c7     ......0.3..0....
	...
    7550:	0b000000 b0c1f8e2 be061b6c 0002882f     ........l.../...
    7560:	02082080 00000000 00000000 c1fae803     . ..............
    7570:	061b6cb0 08a08f3e 20800002 00000208     .l..>...... ....
    7580:	00000000 7ce20800 036cbcf1 0c30c000     .......|..l...0.
    7590:	00000003 00000000 00000000 e1070000     ................
    75a0:	0730c0f8 8001f8e1 00f8e36f 00000000     ..0.....o.......
    75b0:	00030000 0f0c30c0 0c30f8e3 33c00003     .....0....0....3
    75c0:	30c0c00c 00000000 00000000 00000000     ...0............
    75d0:	c30c330c 0c33cc30 d9c730c3 000000f6     .3..0.3..0......
	...
    75e8:	02020000 30e6b8c1 01073ed8 000020c0     .......0.>... ..
	...
    7600:	1b0c0000 6cb0c106 b5d5769b 008c3166     .......l.v..f1..
	...
    7618:	08000000 1b441823 6ce08003 08620c11     ....#.D....l..b.
	...
    7634:	c618630c 18638c31 60801f7e 873bc618     .c..1.c.~..`..;.
    7644:	0000f0c1 00000000 fefb0f00 c0c00003     ................
    7654:	0f0c3030 0000fefb 00000000 1e780000     00............x.
    7664:	40000208 000e3810 02081040 001e7800     ...@.8..@....x..
    7674:	00000000 80010000 01061860 06186080     ........`....`..
    7684:	18608001 60800106 00000000 0f000000     ..`....`........
    7694:	0208c003 0cc00003 c0000303 030f0208     ................
    76a4:	000000c0 00000000 d9c61907 1c736cb3     .............ls.
	...
    76dc:	e0030000 6c9861f8 30c00003 6100030c     .....a.l...0...a
    76ec:	f8e06398 00000608 00000000 00669801     .c............f.
    76fc:	c30c330c 0c33cc30 d9c730c3 000000f6     .3..0.3..0......
    770c:	00000000 0c180000 f8e10700 fb6fb0c1     ..............o.
    771c:	0730c0fe 0000fcf1 00000000 10000000     ..0.............
    772c:	f003000a 638001fc b0c0fef8 00fef823     .......c....#...
	...
    7744:	030033cc 8001fcf0 c0fef863 fef823b0     .3......c....#..
	...
    775c:	000c6000 01fcf003 fef86380 f823b0c0     .`.......c....#.
    776c:	000000fe 03000000 0c482001 fcf00300     ......... H.....
    777c:	f8638001 23b0c0fe 0000fef8 00000000     ..c....#........
    778c:	00000000 e1070000 6cb0c1f8 30c00003     ...........l...0
    779c:	04fef907 00000003 00000000 07001420     ............ ...
    77ac:	b0c1f8e1 c0fefb6f fcf10730 00000000     ....o...0.......
    77bc:	00000000 00669801 c1f8e107 fefb6fb0     ......f......o..
    77cc:	f10730c0 000000fc 00000000 18c00000     .0..............
    77dc:	f8e10700 fb6fb0c1 0730c0fe 0000fcf1     ......o...0.....
    77ec:	00000000 98610600 80030000 010618e0     ......a.........
    77fc:	06186080 00f8e107 00000000 00000000     .`..............
    780c:	03002840 0618e080 18608001 f8e10706     @(........`.....
	...
    7824:	0018c000 18e08003 60800106 e1070618     ...........`....
    7834:	000000f8 18630000 367080c0 8c31860d     ......c...p6..1.
    7844:	fb6fb0c1 6cb0c1fe 0000061b 1c000000     ..o....l........
    7854:	70c08108 31860d36 6fb0c18c b0c1fefb     ...p6..1...o....
    7864:	00061b6c 00000000 fb0f0606 0c30c0fe     l.............0.
    7874:	3ffc0003 c000030c fefb0f30 00000000     ...?....0.......
	...
    788c:	1dfe7907 fedb2786 f90733cc 000000ee     .y...'...3......
    789c:	00000000 367ef800 9861860d e3efb1c7     ......~6..a.....
    78ac:	8c31c6f8 00001e7b 00000000 20000000     ..1.{.......... 
    78bc:	e1070014 cc30c3f8 30c30c33 00f8e1c7     ......0.3..0....
    78cc:	00000000 01000000 07006698 30c3f8e1     .........f.....0
    78dc:	c30c33cc f8e1c730 00000000 00000000     .3..0...........
    78ec:	0018c000 c3f8e107 0c33cc30 e1c730c3     ........0.3..0..
    78fc:	000000f8 00000000 14200000 0c330c00     .......... ...3.
    790c:	33cc30c3 c730c30c 0000f6d9 00000000     .0.3..0.........
    791c:	60000000 330c000c cc30c30c 30c30c33     ...`...3..0.3..0
    792c:	00f6d9c7 00000000 01000000 0c006698     .............f..
    793c:	31c61863 7e18638c 1860801f c1873bc6     c..1.c.~..`..;..
    794c:	800d36f0 383ef800 c1061bec 061b6cb0     .6....>8.....l..
    795c:	e0e3b8c1 000000f8 0c330000 c10603c0     ..........3.....
    796c:	061b6cb0 1b6cb0c1 63b0c106 0000f8e0     .l....l....c....
    797c:	00000000 20800002 1b8c1f7e 0c32c826     ....... ~...&.2.
    798c:	1f7e069b 08208080 00000000 c0010000     ..~... .........
    799c:	461873f8 3e608001 6080810f fefb0f18     .s.F..`>...`....
    79ac:	00000000 0c000000 08630419 1c506083     ..........c..`P.
    79bc:	20e00302 80800f08 00000020 00000000     ... .... .......
    79cc:	c1f8e30f f81b6cb0 830d30fe 0d36d878     .....l...0..x.6.
    79dc:	000038e3 00000000 3ce00000 98638e3f     .8.........<?.c.
    79ec:	833ffee0 1c70c000 60800106 00000018     ..?...p....`....
    79fc:	00000000 03000c18 8001fcf0 c0fef863     ............c...
    7a0c:	fef823b0 00000000 00000000 000060c0     .#...........`..
    7a1c:	18e08003 60800106 e1070618 000000f8     .......`........
    7a2c:	00000000 18300000 f8e10700 33cc30c3     ......0......0.3
    7a3c:	c730c30c 0000f8e1 00000000 30000000     ..0............0
    7a4c:	330c0018 cc30c30c 30c30c33 00f6d9c7     ...3..0.3..0....
	...
    7a64:	0b001998 b8e1f8e2 c1061b6c 061b6cb0     ........l....l..
    7a74:	00000000 8c0c4c00 b8e1061b c9461b6d     .....L......m.F.
    7a84:	165b6cb2 1becb0c3 00000006 00000000     .l[.............
    7a94:	1e08c003 00e08308 000080ff 00000000     ................
	...
    7aac:	d8c00100 c0810d22 0080ff00 00000000     ...."...........
	...
    7ac8:	00030c00 030c0000 3030c000 061b0c0c     ..........00....
    7ad8:	00c00f3f 00000000 00000000 ff000000     ?...............
    7ae8:	0003ecbf 00000000 00000000 00000000     ................
	...
    7b00:	18e0bfff 00000006 00000000 00000000     ................
    7b10:	30c00003 c000030c e0bfff00 0c1f3800     ...0.........8..
    7b20:	183060c0 0000c00f c0000300 00030c30     .`0.........0...
    7b30:	bfff00c0 668001e0 fc618619 60800106     .......f..a....`
    7b40:	00000000 06180000 18000000 60800106     ...............`
    7b50:	80010618 00061860 00000000 00000000     ....`...........
    7b60:	90200100 80042448 00001290 00000000     .. .H$..........
	...
    7b78:	40020000 20010948 00244890 00000000     ...@H.. .H$.....
    7b88:	00000000 48024092 09004900 80240024     .....@.H.I..$.$.
    7b98:	92009004 00480240 24090049 42529200     ....@.H.I..$..RB
    7ba8:	0949494a 24242529 929094a4 4a425292     JII.)%$$.....RBJ
    7bb8:	29094949 ad6d2425 b6b6b5bd dbdad6f6     II.)%$m.........
    7bc8:	6f6b5bdb bdad6d6d f6b6b6b5 08dbdad6     .[komm..........
    7bd8:	20800002 80000208 00020820 02082080     ... .... .... ..
    7be8:	08208000 20800002 80000208 00020820     .. .... .... ...
    7bf8:	3e082080 08208000 20800002 80000208     . .>.. .... ....
    7c08:	00020820 02082080 f8208000 20800f02      .... .... .... 
    7c18:	80000208 00020820 05142080 14504001     .... .... ...@P.
    7c28:	50400105 40013d14 01051450 05145040     ..@P.=.@P...@P..
    7c38:	00504001 00000000 00000000 013f0000     .@P...........?.
    7c48:	05145040 14504001 50400105 00000000     @P...@P...@P....
    7c58:	00000000 02f80000 0820800f 20800002     .......... .... 
    7c68:	80000208 01051420 05145040 f4504001     .... ...@P...@P.
    7c78:	50400f01 40010514 01051450 05145040     ..@P...@P...@P..
    7c88:	14504001 50400105 40010514 01051450     .@P...@P...@P...
    7c98:	05145040 00504001 00000000 00000000     @P...@P.........
    7ca8:	0f01fc00 05145040 14504001 50400105     ....@P...@P...@P
    7cb8:	40010514 01051450 01f45040 0000c00f     ...@P...@P......
	...
    7cd0:	01051400 05145040 14504001 0000003f     ....@P...@P.?...
	...
    7ce8:	02080000 08208000 20800002 800f02f8     ...... .... ....
	...
    7d0c:	003e0000 02082080 08208000 20800002     ..>.. .... .... 
    7d1c:	80000208 00020820 03082080 000000f0     .... .... ......
	...
    7d34:	00020800 02082080 08208000 0000f03f     ..... .... .?...
	...
    7d58:	80f03f00 00020820 02082080 08208000     .?.. .... .... .
    7d68:	20800002 80000208 f0030820 02082080     ... .... .... ..
    7d78:	08208000 20800002 00000000 00000000     .. .... ........
    7d88:	3f000000 000000f0 00000000 00000000     ...?............
    7d98:	00020800 02082080 08208000 2080f03f     ..... .... .?.. 
    7da8:	80000208 00020820 02082080 08208000     .... .... .... .
    7db8:	20800002 fc00c20f 00020820 02082080     ... .... .... ..
    7dc8:	14208000 50400105 40010514 f1051450     .. ...@P...@P...
    7dd8:	05145040 14504001 50400105 40010514     @P...@P...@P...@
    7de8:	01051450 c4175040 0000fc01 00000000     P...@P..........
	...
    7e04:	1f000000 507c01c4 40010514 01051450     ......|P...@P...
    7e14:	05145040 14504001 50400105 fc0fc0f7     @P...@P...@P....
	...
    7e38:	0fc0ff00 0514507c 14504001 50400105     ....|P...@P...@P
    7e48:	40010514 01051450 c4175040 14507c01     ...@P...@P...|P.
    7e58:	50400105 40010514 00000050 00000000     ..@P...@P.......
    7e68:	ff000000 00fc0fc0 00000000 00000000     ................
    7e78:	05140000 14504001 50400105 7c0fc0f7     .....@P...@P...|
    7e88:	01051450 05145040 08504001 20800002     P...@P...@P.... 
    7e98:	80000208 0fc0ff20 000000fc 00000000     .... ...........
    7ea8:	00000000 40010514 01051450 3f145040     .......@P...@P.?
    7eb8:	000000f0 00000000 00000000 00000000     ................
    7ec8:	00000000 ff000000 20fc0fc0 80000208     ........... ....
    7ed8:	00020820 00002080 00000000 00000000      .... ..........
    7ee8:	40f13f00 01051450 05145040 14504001     .?.@P...@P...@P.
    7ef8:	50400105 40010514 f0071450 00000000     ..@P...@P.......
	...
    7f10:	80000208 00020820 c20f2080 0000fc00     .... .... ......
	...
    7f30:	0f000000 20fc00c2 80000208 00020820     ....... .... ...
    7f40:	00002080 00000000 00000000 40f10700     . .............@
    7f50:	01051450 05145040 14504001 50400105     P...@P...@P...@P
    7f60:	40010514 f13f1450 05145040 14504001     ...@P.?.@P...@P.
    7f70:	50400105 80000208 00020820 c2ff2080     ..@P.... .... ..
    7f80:	0820fc0f 20800002 80000208 00020820     .. .... .... ...
    7f90:	02082080 08208000 0000003e 00000000     . .... .>.......
	...
    7fb0:	80f00300 00020820 02082080 ff208000     .... .... .... .
    7fc0:	ffffffff ffffffff ffffffff ffffffff     ................
    7fd0:	ffffffff ffffffff 00000000 00000000     ................
    7fe0:	3f000000 ffffffff ffffffff ffffffff     ...?............
    7ff0:	0f3ef8ff 3ef8e083 f8e0830f e0830f3e     ..>....>....>...
    8000:	830f3ef8 0f3ef8e0 c30fe083 0f3ffcf0     .>....>.......?.
    8010:	3ffcf0c3 fcf0c30f f0c30f3f c30f3ffc     ...?....?....?..
    8020:	ff3ffcf0 ffffffff ffffffff f0ffffff     ..?.............
	...
    8044:	8f380000 c208234c e2d08330 00000000     ..8.L#..0.......
    8054:	00000000 193c0000 7c982186 8c61061f     ......<..!.|..a.
    8064:	63c61861 000000f8 00000000 ff000000     a..c............
    8074:	8c31c61f 01061863 06186080 0000c003     ..1.c....`......
	...
    8090:	c69fff00 18638c31 008e33c6 00000000     ....1.c..3......
    80a0:	fb0f0000 06b080fe 0618c000 c0800103     ................
    80b0:	fefb2f20 00000000 00000000 00000000      /..............
    80c0:	c3fef907 0c33cc30 e1c730c3 000000f8     ....0.3..0......
	...
    80d8:	0c330c00 33cc30c3 cf30c30c 30c0f6db     ..3..0.3..0....0
    80e8:	0000000c 00000000 e30c0000 618e7bbc     .............{.a
    80f8:	06186080 00608001 00000000 00000000     .`....`.........
    8108:	c33f0000 30c3f8c1 c30c33cc f0e0c730     ..?....0.3..0...
    8118:	000000ff 03000000 1863f8e0 ff061bcc     ..........c.....
    8128:	061becbf e0c31863 000000f8 00000000     ....c...........
    8138:	e3fce103 061b6cb0 1b6cb0c1 c698e38e     .....l....l.....
    8148:	00008e33 00000000 fef80300 e1070318     3...............
    8158:	cc30c3f8 30c30c33 00f8e1c7 00000000     ..0.3..0........
    8168:	00000000 02000000 a2885421 88228a28     ........!T..(.".
    8178:	00204295 00000000 00000000 07000000     .B .............
    8188:	860e7367 628a28a3 7367b8b0 00000070     gs...(.b..gsp...
    8198:	00000000 60f8e003 00030c18 030c3ffc     .......`.....?..
    81a8:	03186000 0000f8e0 00000000 00000000     .`..............
    81b8:	1b8c0f3e 6cb0c106 b0c1061b c1061b6c     >......l....l...
    81c8:	000060b0 00000000 0f000000 0000fefb     .`..............
    81d8:	00fefb0f fefb0f00 00000000 00000000     ................
    81e8:	02080000 ff208000 2080e0bf 03000208     ...... .... ....
    81f8:	000000fe 00000000 3000030c 30c0000c     ...........0...0
    8208:	c0c00003 0c0c3030 3f000003 0000f0cf     ....00.....?....
    8218:	0c300000 0003030c 0330c0c0 030cc000     ..0.......0.....
    8228:	000c3000 00f0cf3f 88600307 00020820     .0..?.....`. ...
    8238:	02082080 08208000 20800002 80000208     . .... .... ....
    8248:	00020820 02082080 08208000 20800002      .... .... .... 
    8258:	80000208 09240820 00008001 18000000     .... .$.........
    8268:	00000006 00e0bfff 00061800 00000000     ................
	...
    8280:	8a0f1c00 0f1c073e 00073e8a 00000000     ....>....>......
	...
    8298:	01092460 00000080 00000000 00000000     `$..............
	...
    82bc:	80030e38 00000000 00000000 00000000     8...............
	...
    82d4:	01000000 00006080 00000000 0f000000     .....`..........
    82e4:	40000104 0d020820 0c504001 00800002     ...@ ....@P.....
    82f4:	00000000 f0c30b00 638c31c6 00000018     .........1.c....
	...
    8310:	83070000 03070cf0 3fe0c081 00000000     ...........?....
	...
    8334:	c30f3ffc 0f3ffcf0 0000f0c3 00000000     .?....?.........
	...
    835c:	0009001b 67753700 71312c6a 38000000     .....7ugj,1q...8
    836c:	006b6869 7a007732 6f303900 65332e6c     ihk.2w.z.90ol.3e
    837c:	00007861 2f3b702d 63737234 5b3d0020     ax..-p;/4rsc .=[
    838c:	74350027 006e7664 5c0d5d27 62667936     '.5tdvn.'].\6yfb
    839c:	0008006d 00000a7f 0009001b 47552600     m............&UG
    83ac:	51213c4a 2a000000 004b4849 5a005740     J<!Q...*IHK.@W.Z
    83bc:	4f292800 45233e4c 00005841 3f3a505f     .()OL>#EAX.._P:?
    83cc:	43535224 7b2b0020 54250022 004e5644     $RSC .+{".%TDVN.
    83dc:	7c0d7d7e 4246595e 0008004d 00000a7f     ~}.|^YFBM.......
    83ec:	0009001b 47553700 51312c4a 38000000     .....7UGJ,1Q...8
    83fc:	004b4849 5a005732 4f303900 45332e4c     IHK.2W.Z.90OL.3E
    840c:	00005841 2f3b502d 43535234 5b3d0020     AX..-P;/4RSC .=[
    841c:	54350027 004e5644 5c0d5d27 42465936     '.5TDVN.'].\6YFB
    842c:	0008004d 00000a7f 0009001b 07150000     M...............
    843c:	1100000a 00000000 000b0809 1a001700     ................
    844c:	0f000000 0500000a 00001801 1f001000     ................
    845c:	03131200 1b000000 14000000 000e1604     ................
    846c:	1c001d1e 02061900 0008000d 00000a00     ................

0000847c <kb_col>:
    847c:	00010000 00020000 00040000 00080000     ................
    848c:	00100000 00200000 08000000              ...... .....

00008498 <kb_col_index>:
    8498:	00000010 00000011 00000012 00000013     ................
    84a8:	00000014 00000015 0000001b              ............

000084b4 <kb_row>:
    84b4:	00000004 00000008 00000010 00000020     ............ ...
    84c4:	00000040 00000080 00000400 00000800     @...............
    84d4:	00001000 00002000                       ..... ..

000084dc <kb_row_index>:
    84dc:	00000002 00000003 00000004 00000005     ................
    84ec:	00000006 00000007 0000000a 0000000b     ................
    84fc:	0000000c 0000000d                       ........

00008504 <beelzebub.13344>:
    8504:	2e002d00 44003200 88005300 f300b600     .-...2.D.S......
    8514:	64012201 d4019201 08020702 5f023402     .".d.........4._
    8524:	94027802 bb02a602 db02ca02 f902e802     .x..............
    8534:	7f031f03                                ....

00008538 <belial.13341>:
    8538:	f0f0f0f0 b0b0b0f0 b1b6b6b6 b7b7b1b1     ................
    8548:	b2b2b2b7 bfb8b8b8 b9b3b3b3 b5b5b9b9     ................
    8558:	babac2b5 bcbcbcba bebdbdbd f0f0f0be     ................
    8568:	b1b1f0f0 b8b7b7b6 bcb8b8b8 c9c9bcbc     ................
    8578:	35c9c9c9 0000363a                       ...5:6..

00008580 <lucifer.13343>:
    8580:	0852aa55 0d0d0d01 0d343434 34340d0d     U.R.....444...44
    8590:	00000034 01242424 340f0f0f 08083434     4...$$$....444..
    85a0:	24240308 00780024 00007800 52aa5589     ..$$$.x..x...U.R
    85b0:	00cc0008 01707005 02030303 02d00000     .....pp.........
    85c0:	00505050 00000055                       PPP.U...

000085c8 <mulciber.13342>:
    85c8:	03020100 02010004 00020100 01000201     ................
    85d8:	02010002 00020100 01000201 01000002     ................
    85e8:	02010000 00020100 01000201 03020100     ................
    85f8:	00000004 01000100 01000302 02010002     ................
    8608:	00000403 00000000 65530d0a 6c616972     ..........Serial
    8618:	204b4f20 30303639 314e3820 00000d0a      OK 9600 8N1....

00008628 <_global_impure_ptr>:
    8628:	200001b0 33323130 37363534 62613938     ... 0123456789ab
    8638:	66656463 6a696867 6e6d6c6b 7271706f     cdefghijklmnopqr
    8648:	76757473 7a797877 00000000              stuvwxyz....

00008654 <__sf_fake_stderr>:
	...

00008674 <__sf_fake_stdin>:
	...

00008694 <__sf_fake_stdout>:
	...
    86b4:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    86c4:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    86d4:	31300046 35343332 39383736 64636261     F.0123456789abcd
    86e4:	00006665                                ef..

000086e8 <_init>:
    86e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    86ea:	bf00      	nop
    86ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
    86ee:	bc08      	pop	{r3}
    86f0:	469e      	mov	lr, r3
    86f2:	4770      	bx	lr

000086f4 <__init_array_start>:
    86f4:	000000d9 	.word	0x000000d9

000086f8 <_fini>:
    86f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    86fa:	bf00      	nop
    86fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    86fe:	bc08      	pop	{r3}
    8700:	469e      	mov	lr, r3
    8702:	4770      	bx	lr

00008704 <__fini_array_start>:
    8704:	000000b5 	.word	0x000000b5
