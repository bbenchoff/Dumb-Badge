
DumBadgeFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006634  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001bc  20000000  00006634  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000270  200001bc  000067f0  000201bc  2**2
                  ALLOC
  3 .stack        00002004  2000042c  00006a60  000201bc  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000201bc  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
  6 .debug_info   00037486  00000000  00000000  0002023d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004fe9  00000000  00000000  000576c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00006446  00000000  00000000  0005c6ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000006e8  00000000  00000000  00062af2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000007f0  00000000  00000000  000631da  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001e764  00000000  00000000  000639ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000127d2  00000000  00000000  0008212e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000900b2  00000000  00000000  00094900  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001868  00000000  00000000  001249b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
	// Keep the default device state after reset
	SystemCoreClock = __SYSTEM_CLOCK;
       0:	30 24 00 20 6d 1b 00 00 69 1b 00 00 69 1b 00 00     0$. m...i...i...
	...
      2c:	69 1b 00 00 00 00 00 00 00 00 00 00 69 1b 00 00     i...........i...
      3c:	9d 2e 00 00 69 1b 00 00 69 1b 00 00 69 1b 00 00     ....i...i...i...
      4c:	69 1b 00 00 69 1b 00 00 69 1b 00 00 69 1b 00 00     i...i...i...i...
      5c:	69 1b 00 00 69 1b 00 00 0d 0e 00 00 1d 0e 00 00     i...i...........
      6c:	2d 0e 00 00 3d 0e 00 00 4d 0e 00 00 5d 0e 00 00     -...=...M...]...
      7c:	69 1b 00 00 69 1b 00 00 69 1b 00 00 69 1b 00 00     i...i...i...i...
      8c:	69 1b 00 00 69 1b 00 00 69 1b 00 00 69 1b 00 00     i...i...i...i...
      9c:	41 09 00 00 69 1b 00 00 69 1b 00 00 69 1b 00 00     A...i...i...i...
      ac:	69 1b 00 00 00 00 00 00                             i.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200001bc 	.word	0x200001bc
      d4:	00000000 	.word	0x00000000
      d8:	00006634 	.word	0x00006634

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200001c0 	.word	0x200001c0
     108:	00006634 	.word	0x00006634
     10c:	00006634 	.word	0x00006634
     110:	00000000 	.word	0x00000000

00000114 <drawKare>:
//	graphic in the entire project. Please note this is the most
//	space efficient way to do this; a 40x31 bitmap is 930 bytes,
//	whereas	this is (104*2)+28+20, or 256 bytes.
/*********************************************************************/
void drawKare(int emotion)
{
     114:	b5f0      	push	{r4, r5, r6, r7, lr}
     116:	b0c1      	sub	sp, #260	; 0x104
     118:	0007      	movs	r7, r0
	uint16_t body[104] = {10,10,20,20,20,0,380,10,380,10,390,20,0,
     11a:	22d0      	movs	r2, #208	; 0xd0
     11c:	492d      	ldr	r1, [pc, #180]	; (1d4 <drawKare+0xc0>)
     11e:	a80c      	add	r0, sp, #48	; 0x30
     120:	4b2d      	ldr	r3, [pc, #180]	; (1d8 <drawKare+0xc4>)
     122:	4798      	blx	r3
		80,190,280,200,280,40,290,190,0,70,50,80,0,90,50,100,0,110,
		50,120,0,130,50,140,0,150,50,160,0,170,50,180,0,190,50,200,
		300,200,370,210,30,220,370,230,30,240,370,250,30,260,370,
		270,90,280,300,290};
	
	uint8_t happyTerm[28] = {180,80,190,130,170,130,190,140,140,
     124:	a805      	add	r0, sp, #20
     126:	4b2d      	ldr	r3, [pc, #180]	; (1dc <drawKare+0xc8>)
     128:	001a      	movs	r2, r3
     12a:	3250      	adds	r2, #80	; 0x50
     12c:	0001      	movs	r1, r0
     12e:	ca31      	ldmia	r2!, {r0, r4, r5}
     130:	c131      	stmia	r1!, {r0, r4, r5}
     132:	ca31      	ldmia	r2!, {r0, r4, r5}
     134:	c131      	stmia	r1!, {r0, r4, r5}
     136:	6812      	ldr	r2, [r2, #0]
     138:	600a      	str	r2, [r1, #0]
		60,150,100,210,60,220,100,130,150,140,160,140,160,220,170,
	220,150,230,160};
	
	uint8_t rPiBeret[20] = {120,60,240,80,110,70,120,90,150,
     13a:	336c      	adds	r3, #108	; 0x6c
     13c:	466a      	mov	r2, sp
     13e:	cb13      	ldmia	r3!, {r0, r1, r4}
     140:	c213      	stmia	r2!, {r0, r1, r4}
     142:	cb03      	ldmia	r3!, {r0, r1}
     144:	c203      	stmia	r2!, {r0, r1}
     146:	ac0c      	add	r4, sp, #48	; 0x30
     148:	ae40      	add	r6, sp, #256	; 0x100

	
	
	for(int i = 0; i < 104; i = i+4)
	{
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
     14a:	4d25      	ldr	r5, [pc, #148]	; (1e0 <drawKare+0xcc>)
		((body[i+1]/iSv)+(offsetGraphicY)),
		((body[i+2]/iSv)+(offsetGraphicX)),
		((body[i+3]/iSv)+(offsetGraphicY)));
     14c:	88e3      	ldrh	r3, [r4, #6]
     14e:	105b      	asrs	r3, r3, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
     150:	3396      	adds	r3, #150	; 0x96
		((body[i+2]/iSv)+(offsetGraphicX)),
     152:	88a2      	ldrh	r2, [r4, #4]
     154:	1052      	asrs	r2, r2, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
     156:	322d      	adds	r2, #45	; 0x2d
     158:	32ff      	adds	r2, #255	; 0xff
		((body[i+1]/iSv)+(offsetGraphicY)),
     15a:	8861      	ldrh	r1, [r4, #2]
     15c:	1049      	asrs	r1, r1, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
     15e:	3196      	adds	r1, #150	; 0x96
     160:	8820      	ldrh	r0, [r4, #0]
     162:	1040      	asrs	r0, r0, #1
     164:	302d      	adds	r0, #45	; 0x2d
     166:	30ff      	adds	r0, #255	; 0xff
     168:	47a8      	blx	r5
     16a:	3408      	adds	r4, #8
	for(int i = 0; i < 104; i = i+4)
     16c:	42b4      	cmp	r4, r6
     16e:	d1ed      	bne.n	14c <drawKare+0x38>
	}
	switch(emotion)
     170:	2f00      	cmp	r7, #0
     172:	d003      	beq.n	17c <drawKare+0x68>
     174:	2f01      	cmp	r7, #1
     176:	d017      	beq.n	1a8 <drawKare+0x94>
		break;
		case 2:
		//make a sad terminal thing go here
		break;
	}
}
     178:	b041      	add	sp, #260	; 0x104
     17a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     17c:	ac05      	add	r4, sp, #20
     17e:	ae0c      	add	r6, sp, #48	; 0x30
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
     180:	4d17      	ldr	r5, [pc, #92]	; (1e0 <drawKare+0xcc>)
			((happyTerm[i+3]/iSv)+(offsetGraphicY)));
     182:	78e3      	ldrb	r3, [r4, #3]
     184:	105b      	asrs	r3, r3, #1
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
     186:	3396      	adds	r3, #150	; 0x96
			((happyTerm[i+2]/iSv)+(offsetGraphicX)),
     188:	78a2      	ldrb	r2, [r4, #2]
     18a:	1052      	asrs	r2, r2, #1
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
     18c:	322d      	adds	r2, #45	; 0x2d
     18e:	32ff      	adds	r2, #255	; 0xff
			((happyTerm[i+1]/iSv)+(offsetGraphicY)),
     190:	7861      	ldrb	r1, [r4, #1]
     192:	1049      	asrs	r1, r1, #1
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
     194:	3196      	adds	r1, #150	; 0x96
     196:	7820      	ldrb	r0, [r4, #0]
     198:	1040      	asrs	r0, r0, #1
     19a:	302d      	adds	r0, #45	; 0x2d
     19c:	30ff      	adds	r0, #255	; 0xff
     19e:	47a8      	blx	r5
     1a0:	3404      	adds	r4, #4
		for(int i = 0; i < 28; i = i+4)
     1a2:	42a6      	cmp	r6, r4
     1a4:	d1ed      	bne.n	182 <drawKare+0x6e>
     1a6:	e7e7      	b.n	178 <drawKare+0x64>
     1a8:	466c      	mov	r4, sp
     1aa:	ae05      	add	r6, sp, #20
			fillRect((
     1ac:	4d0c      	ldr	r5, [pc, #48]	; (1e0 <drawKare+0xcc>)
			((rPiBeret[i+3]/iSv)+(offsetGraphicY)));
     1ae:	78e3      	ldrb	r3, [r4, #3]
     1b0:	105b      	asrs	r3, r3, #1
			fillRect((
     1b2:	3396      	adds	r3, #150	; 0x96
			((rPiBeret[i+2]/iSv)+(offsetGraphicX)),
     1b4:	78a2      	ldrb	r2, [r4, #2]
     1b6:	1052      	asrs	r2, r2, #1
			fillRect((
     1b8:	322d      	adds	r2, #45	; 0x2d
     1ba:	32ff      	adds	r2, #255	; 0xff
			((rPiBeret[i+1]/iSv)+(offsetGraphicY)),
     1bc:	7861      	ldrb	r1, [r4, #1]
     1be:	1049      	asrs	r1, r1, #1
			fillRect((
     1c0:	3196      	adds	r1, #150	; 0x96
			(rPiBeret[i]/iSv)+(offsetGraphicX)),
     1c2:	7820      	ldrb	r0, [r4, #0]
     1c4:	1040      	asrs	r0, r0, #1
			fillRect((
     1c6:	302d      	adds	r0, #45	; 0x2d
     1c8:	30ff      	adds	r0, #255	; 0xff
     1ca:	47a8      	blx	r5
     1cc:	3404      	adds	r4, #4
		for(int i = 0; i < 20; i = i+4)
     1ce:	42b4      	cmp	r4, r6
     1d0:	d1ed      	bne.n	1ae <drawKare+0x9a>
     1d2:	e7d1      	b.n	178 <drawKare+0x64>
     1d4:	0000440c 	.word	0x0000440c
     1d8:	00003321 	.word	0x00003321
     1dc:	0000448c 	.word	0x0000448c
     1e0:	00002a41 	.word	0x00002a41

000001e4 <splashScreen>:

void splashScreen(void)
{
     1e4:	b570      	push	{r4, r5, r6, lr}
	static const char *splashText[32];
	splashText[0] = "Unix epoch minus 0xFF days";//
     1e6:	4c48      	ldr	r4, [pc, #288]	; (308 <splashScreen+0x124>)
     1e8:	4b48      	ldr	r3, [pc, #288]	; (30c <splashScreen+0x128>)
     1ea:	6023      	str	r3, [r4, #0]
	splashText[1] = "13^5 + 16^5 = 17^5";//
     1ec:	4b48      	ldr	r3, [pc, #288]	; (310 <splashScreen+0x12c>)
     1ee:	6063      	str	r3, [r4, #4]
	splashText[2] = "Reticulating Splines";//
     1f0:	4b48      	ldr	r3, [pc, #288]	; (314 <splashScreen+0x130>)
     1f2:	60a3      	str	r3, [r4, #8]
	splashText[3] = "Violence works";//
     1f4:	4b48      	ldr	r3, [pc, #288]	; (318 <splashScreen+0x134>)
     1f6:	60e3      	str	r3, [r4, #12]
	splashText[4] = "Tabs!";//
     1f8:	4b48      	ldr	r3, [pc, #288]	; (31c <splashScreen+0x138>)
     1fa:	6123      	str	r3, [r4, #16]
	splashText[5] = "Kill Billionaires (and Trillionaire)";//
     1fc:	4b48      	ldr	r3, [pc, #288]	; (320 <splashScreen+0x13c>)
     1fe:	6163      	str	r3, [r4, #20]
	splashText[6] = "Interest in technology is not a personality";//
     200:	4b48      	ldr	r3, [pc, #288]	; (324 <splashScreen+0x140>)
     202:	61a3      	str	r3, [r4, #24]
	splashText[7] = "10 PRINT CHR$(205.5+RND(1)); : GOTO 10";//
     204:	4b48      	ldr	r3, [pc, #288]	; (328 <splashScreen+0x144>)
     206:	61e3      	str	r3, [r4, #28]
	splashText[8] = "No gods. No masters. No external libraries.";//
     208:	4b48      	ldr	r3, [pc, #288]	; (32c <splashScreen+0x148>)
     20a:	6223      	str	r3, [r4, #32]
	splashText[9] = "Spaces!";//
     20c:	4b48      	ldr	r3, [pc, #288]	; (330 <splashScreen+0x14c>)
     20e:	6263      	str	r3, [r4, #36]	; 0x24
	splashText[10] = "Tiananmen Square 1989";//
     210:	4b48      	ldr	r3, [pc, #288]	; (334 <splashScreen+0x150>)
     212:	62a3      	str	r3, [r4, #40]	; 0x28
	splashText[11] = "America was founded on slavery";
     214:	4b48      	ldr	r3, [pc, #288]	; (338 <splashScreen+0x154>)
     216:	62e3      	str	r3, [r4, #44]	; 0x2c
	splashText[12] = "There is only capital and labor";//
     218:	4b48      	ldr	r3, [pc, #288]	; (33c <splashScreen+0x158>)
     21a:	6323      	str	r3, [r4, #48]	; 0x30
	splashText[13] = "Encourage symmetric class warfare";//
     21c:	4b48      	ldr	r3, [pc, #288]	; (340 <splashScreen+0x15c>)
     21e:	6363      	str	r3, [r4, #52]	; 0x34
	splashText[14] = "$CURRENT_MEME";//
     220:	4b48      	ldr	r3, [pc, #288]	; (344 <splashScreen+0x160>)
     222:	63a3      	str	r3, [r4, #56]	; 0x38
	splashText[15] = "A Nice TTY";//
     224:	4b48      	ldr	r3, [pc, #288]	; (348 <splashScreen+0x164>)
     226:	63e3      	str	r3, [r4, #60]	; 0x3c
	splashText[16] = "Trans rights are human rights";//
     228:	4b48      	ldr	r3, [pc, #288]	; (34c <splashScreen+0x168>)
     22a:	6423      	str	r3, [r4, #64]	; 0x40
	splashText[17] = "i  = 0x5f3759df - ( i >> 1 );";//
     22c:	4b48      	ldr	r3, [pc, #288]	; (350 <splashScreen+0x16c>)
     22e:	6463      	str	r3, [r4, #68]	; 0x44
	splashText[18] = "ACAB";//
     230:	4b48      	ldr	r3, [pc, #288]	; (354 <splashScreen+0x170>)
     232:	64a3      	str	r3, [r4, #72]	; 0x48
	splashText[19] = "Defcon's canceled.";//
     234:	4b48      	ldr	r3, [pc, #288]	; (358 <splashScreen+0x174>)
     236:	64e3      	str	r3, [r4, #76]	; 0x4c
	splashText[20] = "Ratsnest: Nothing To Do!";//
     238:	4b48      	ldr	r3, [pc, #288]	; (35c <splashScreen+0x178>)
     23a:	6523      	str	r3, [r4, #80]	; 0x50
	splashText[21] = "It has 69 keys.";//
     23c:	4b48      	ldr	r3, [pc, #288]	; (360 <splashScreen+0x17c>)
     23e:	6563      	str	r3, [r4, #84]	; 0x54
	splashText[22] = "Because VT-420 was already taken";//
     240:	4b48      	ldr	r3, [pc, #288]	; (364 <splashScreen+0x180>)
     242:	65a3      	str	r3, [r4, #88]	; 0x58
	splashText[23] = "Compression algorithm based on BBP (1997)";//
     244:	4b48      	ldr	r3, [pc, #288]	; (368 <splashScreen+0x184>)
     246:	65e3      	str	r3, [r4, #92]	; 0x5c
	splashText[24] = "The source of the Mississippi river is in Pennsylvania.";
     248:	4b48      	ldr	r3, [pc, #288]	; (36c <splashScreen+0x188>)
     24a:	6623      	str	r3, [r4, #96]	; 0x60
	splashText[25] = "Offensive hardware";//
     24c:	4b48      	ldr	r3, [pc, #288]	; (370 <splashScreen+0x18c>)
     24e:	6663      	str	r3, [r4, #100]	; 0x64
	splashText[26] = "Follow World Pog Federation    @WorldPog";//
     250:	4b48      	ldr	r3, [pc, #288]	; (374 <splashScreen+0x190>)
     252:	66a3      	str	r3, [r4, #104]	; 0x68
	splashText[27] = "Dummy thicc client";//
     254:	4b48      	ldr	r3, [pc, #288]	; (378 <splashScreen+0x194>)
     256:	66e3      	str	r3, [r4, #108]	; 0x6c
	splashText[28] = "A Nice TTY. An OK Computer.";//
     258:	4b48      	ldr	r3, [pc, #288]	; (37c <splashScreen+0x198>)
     25a:	6723      	str	r3, [r4, #112]	; 0x70
	splashText[29] = "I cAn OpEn A LoCk WiTh A sOdA cAn";//
     25c:	4b48      	ldr	r3, [pc, #288]	; (380 <splashScreen+0x19c>)
     25e:	6763      	str	r3, [r4, #116]	; 0x74
	splashText[30] = "Solidarity is not a new framework";//
     260:	4b48      	ldr	r3, [pc, #288]	; (384 <splashScreen+0x1a0>)
     262:	67a3      	str	r3, [r4, #120]	; 0x78
	splashText[31] = "Breadboarding Is Not A Crime";//
     264:	4b48      	ldr	r3, [pc, #288]	; (388 <splashScreen+0x1a4>)
     266:	67e3      	str	r3, [r4, #124]	; 0x7c
	splashText[32] = "Off by one errors are common";
     268:	4a48      	ldr	r2, [pc, #288]	; (38c <splashScreen+0x1a8>)
     26a:	2380      	movs	r3, #128	; 0x80
     26c:	50e2      	str	r2, [r4, r3]
	
	const char *textPhrase = splashText[((rand()%32))];
     26e:	4b48      	ldr	r3, [pc, #288]	; (390 <splashScreen+0x1ac>)
     270:	4798      	blx	r3
     272:	17c3      	asrs	r3, r0, #31
     274:	0edb      	lsrs	r3, r3, #27
     276:	18c2      	adds	r2, r0, r3
     278:	201f      	movs	r0, #31
     27a:	4010      	ands	r0, r2
     27c:	1ac0      	subs	r0, r0, r3
     27e:	0080      	lsls	r0, r0, #2
     280:	5904      	ldr	r4, [r0, r4]
	
	
	clearScreen();
     282:	4b44      	ldr	r3, [pc, #272]	; (394 <splashScreen+0x1b0>)
     284:	4798      	blx	r3
	setColorRGB(255,255,255);
     286:	22ff      	movs	r2, #255	; 0xff
     288:	21ff      	movs	r1, #255	; 0xff
     28a:	20ff      	movs	r0, #255	; 0xff
     28c:	4b42      	ldr	r3, [pc, #264]	; (398 <splashScreen+0x1b4>)
     28e:	4798      	blx	r3
	
	REG_PORT_DIRTGL1 = PORT_PB31;
     290:	2280      	movs	r2, #128	; 0x80
     292:	0612      	lsls	r2, r2, #24
     294:	4b41      	ldr	r3, [pc, #260]	; (39c <splashScreen+0x1b8>)
     296:	601a      	str	r2, [r3, #0]
	PORT->Group[1].PINCFG[31].bit.PULLEN = 1;
     298:	4b41      	ldr	r3, [pc, #260]	; (3a0 <splashScreen+0x1bc>)
     29a:	22df      	movs	r2, #223	; 0xdf
     29c:	5c99      	ldrb	r1, [r3, r2]
     29e:	2004      	movs	r0, #4
     2a0:	4301      	orrs	r1, r0
     2a2:	5499      	strb	r1, [r3, r2]
	PORT->Group[1].PINCFG[31].bit.INEN = 1;
     2a4:	5c99      	ldrb	r1, [r3, r2]
     2a6:	2002      	movs	r0, #2
     2a8:	4301      	orrs	r1, r0
     2aa:	5499      	strb	r1, [r3, r2]
	if((PORT->Group[1].IN.reg & PORT_PB31) != 0)
     2ac:	3a3f      	subs	r2, #63	; 0x3f
     2ae:	589b      	ldr	r3, [r3, r2]
     2b0:	2b00      	cmp	r3, #0
     2b2:	db24      	blt.n	2fe <splashScreen+0x11a>
		//This is the 'pi' graphic; put some codes
		//here to handle setting up the uarts.
		drawKare(1);
	}
	else
	drawKare(0); //The normal graphic
     2b4:	2000      	movs	r0, #0
     2b6:	4b3b      	ldr	r3, [pc, #236]	; (3a4 <splashScreen+0x1c0>)
     2b8:	4798      	blx	r3
	This is not used since I fixed the way fonts are rendered;
	Now, pixel(0,0) is in the top *right* corner of the screen.
	Trust me, this is easier.
	*/
	
	xCharPos = 40 - (strlen(textPhrase)/2);
     2ba:	0020      	movs	r0, r4
     2bc:	4b3a      	ldr	r3, [pc, #232]	; (3a8 <splashScreen+0x1c4>)
     2be:	4798      	blx	r3
     2c0:	4e3a      	ldr	r6, [pc, #232]	; (3ac <splashScreen+0x1c8>)
     2c2:	0840      	lsrs	r0, r0, #1
     2c4:	2328      	movs	r3, #40	; 0x28
     2c6:	1a18      	subs	r0, r3, r0
     2c8:	7030      	strb	r0, [r6, #0]
	yCharPos = 16;
     2ca:	4d39      	ldr	r5, [pc, #228]	; (3b0 <splashScreen+0x1cc>)
     2cc:	2310      	movs	r3, #16
     2ce:	702b      	strb	r3, [r5, #0]
	
	writeString(textPhrase);
     2d0:	0020      	movs	r0, r4
     2d2:	4b38      	ldr	r3, [pc, #224]	; (3b4 <splashScreen+0x1d0>)
     2d4:	4798      	blx	r3
	delay_ms(2000);
     2d6:	20fa      	movs	r0, #250	; 0xfa
     2d8:	00c0      	lsls	r0, r0, #3
     2da:	4b37      	ldr	r3, [pc, #220]	; (3b8 <splashScreen+0x1d4>)
     2dc:	4798      	blx	r3
	clearScreen();
     2de:	4b2d      	ldr	r3, [pc, #180]	; (394 <splashScreen+0x1b0>)
     2e0:	4798      	blx	r3
	
	setColorRGB(0,255,0);
     2e2:	2200      	movs	r2, #0
     2e4:	21ff      	movs	r1, #255	; 0xff
     2e6:	2000      	movs	r0, #0
     2e8:	4b2b      	ldr	r3, [pc, #172]	; (398 <splashScreen+0x1b4>)
     2ea:	4798      	blx	r3
	setBackColorRGB(0,0,0);
     2ec:	2200      	movs	r2, #0
     2ee:	2100      	movs	r1, #0
     2f0:	2000      	movs	r0, #0
     2f2:	4b32      	ldr	r3, [pc, #200]	; (3bc <splashScreen+0x1d8>)
     2f4:	4798      	blx	r3
	
	//Setting the xChar and yChar position has to come
	//after splashScreen() and InitLCD();
	xCharPos = 0;
     2f6:	2300      	movs	r3, #0
     2f8:	7033      	strb	r3, [r6, #0]
	yCharPos = 0;
     2fa:	702b      	strb	r3, [r5, #0]
	

     2fc:	bd70      	pop	{r4, r5, r6, pc}
		drawKare(1);
     2fe:	2001      	movs	r0, #1
     300:	4b28      	ldr	r3, [pc, #160]	; (3a4 <splashScreen+0x1c0>)
     302:	4798      	blx	r3
     304:	e7d9      	b.n	2ba <splashScreen+0xd6>
     306:	46c0      	nop			; (mov r8, r8)
     308:	200001d8 	.word	0x200001d8
     30c:	0000450c 	.word	0x0000450c
     310:	00004528 	.word	0x00004528
     314:	0000453c 	.word	0x0000453c
     318:	00004554 	.word	0x00004554
     31c:	00004564 	.word	0x00004564
     320:	0000456c 	.word	0x0000456c
     324:	00004594 	.word	0x00004594
     328:	000045c0 	.word	0x000045c0
     32c:	000045e8 	.word	0x000045e8
     330:	00004614 	.word	0x00004614
     334:	0000461c 	.word	0x0000461c
     338:	00004634 	.word	0x00004634
     33c:	00004654 	.word	0x00004654
     340:	00004674 	.word	0x00004674
     344:	00004698 	.word	0x00004698
     348:	000046a8 	.word	0x000046a8
     34c:	000046b4 	.word	0x000046b4
     350:	000046d4 	.word	0x000046d4
     354:	000046f4 	.word	0x000046f4
     358:	000046fc 	.word	0x000046fc
     35c:	00004710 	.word	0x00004710
     360:	0000472c 	.word	0x0000472c
     364:	0000473c 	.word	0x0000473c
     368:	00004760 	.word	0x00004760
     36c:	0000478c 	.word	0x0000478c
     370:	000047c4 	.word	0x000047c4
     374:	000047d8 	.word	0x000047d8
     378:	00004804 	.word	0x00004804
     37c:	00004818 	.word	0x00004818
     380:	00004834 	.word	0x00004834
     384:	00004858 	.word	0x00004858
     388:	0000487c 	.word	0x0000487c
     38c:	0000489c 	.word	0x0000489c
     390:	000033d5 	.word	0x000033d5
     394:	00002ba9 	.word	0x00002ba9
     398:	000028f5 	.word	0x000028f5
     39c:	4100448c 	.word	0x4100448c
     3a0:	41004400 	.word	0x41004400
     3a4:	00000115 	.word	0x00000115
     3a8:	000035b9 	.word	0x000035b9
     3ac:	20000298 	.word	0x20000298
     3b0:	20000299 	.word	0x20000299
     3b4:	00002125 	.word	0x00002125
     3b8:	00000401 	.word	0x00000401
     3bc:	0000291d 	.word	0x0000291d

000003c0 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     3c0:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     3c2:	2000      	movs	r0, #0
     3c4:	4b08      	ldr	r3, [pc, #32]	; (3e8 <delay_init+0x28>)
     3c6:	4798      	blx	r3
     3c8:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     3ca:	4c08      	ldr	r4, [pc, #32]	; (3ec <delay_init+0x2c>)
     3cc:	21fa      	movs	r1, #250	; 0xfa
     3ce:	0089      	lsls	r1, r1, #2
     3d0:	47a0      	blx	r4
     3d2:	4b07      	ldr	r3, [pc, #28]	; (3f0 <delay_init+0x30>)
     3d4:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     3d6:	4907      	ldr	r1, [pc, #28]	; (3f4 <delay_init+0x34>)
     3d8:	0028      	movs	r0, r5
     3da:	47a0      	blx	r4
     3dc:	4b06      	ldr	r3, [pc, #24]	; (3f8 <delay_init+0x38>)
     3de:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     3e0:	2205      	movs	r2, #5
     3e2:	4b06      	ldr	r3, [pc, #24]	; (3fc <delay_init+0x3c>)
     3e4:	601a      	str	r2, [r3, #0]
}
     3e6:	bd70      	pop	{r4, r5, r6, pc}
     3e8:	000018f9 	.word	0x000018f9
     3ec:	0000316d 	.word	0x0000316d
     3f0:	20000000 	.word	0x20000000
     3f4:	000f4240 	.word	0x000f4240
     3f8:	20000004 	.word	0x20000004
     3fc:	e000e010 	.word	0xe000e010

00000400 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     400:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     402:	4b08      	ldr	r3, [pc, #32]	; (424 <delay_cycles_ms+0x24>)
     404:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     406:	4a08      	ldr	r2, [pc, #32]	; (428 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     408:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     40a:	2180      	movs	r1, #128	; 0x80
     40c:	0249      	lsls	r1, r1, #9
	while (n--) {
     40e:	3801      	subs	r0, #1
     410:	d307      	bcc.n	422 <delay_cycles_ms+0x22>
	if (n > 0) {
     412:	2c00      	cmp	r4, #0
     414:	d0fb      	beq.n	40e <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     416:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     418:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     41a:	6813      	ldr	r3, [r2, #0]
     41c:	420b      	tst	r3, r1
     41e:	d0fc      	beq.n	41a <delay_cycles_ms+0x1a>
     420:	e7f5      	b.n	40e <delay_cycles_ms+0xe>
	}
}
     422:	bd30      	pop	{r4, r5, pc}
     424:	20000000 	.word	0x20000000
     428:	e000e010 	.word	0xe000e010

0000042c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     42c:	4b0c      	ldr	r3, [pc, #48]	; (460 <cpu_irq_enter_critical+0x34>)
     42e:	681b      	ldr	r3, [r3, #0]
     430:	2b00      	cmp	r3, #0
     432:	d106      	bne.n	442 <cpu_irq_enter_critical+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     434:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     438:	2b00      	cmp	r3, #0
     43a:	d007      	beq.n	44c <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     43c:	2200      	movs	r2, #0
     43e:	4b09      	ldr	r3, [pc, #36]	; (464 <cpu_irq_enter_critical+0x38>)
     440:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     442:	4a07      	ldr	r2, [pc, #28]	; (460 <cpu_irq_enter_critical+0x34>)
     444:	6813      	ldr	r3, [r2, #0]
     446:	3301      	adds	r3, #1
     448:	6013      	str	r3, [r2, #0]
}
     44a:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     44c:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     44e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     452:	2200      	movs	r2, #0
     454:	4b04      	ldr	r3, [pc, #16]	; (468 <cpu_irq_enter_critical+0x3c>)
     456:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     458:	3201      	adds	r2, #1
     45a:	4b02      	ldr	r3, [pc, #8]	; (464 <cpu_irq_enter_critical+0x38>)
     45c:	701a      	strb	r2, [r3, #0]
     45e:	e7f0      	b.n	442 <cpu_irq_enter_critical+0x16>
     460:	20000258 	.word	0x20000258
     464:	2000025c 	.word	0x2000025c
     468:	20000008 	.word	0x20000008

0000046c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     46c:	4b08      	ldr	r3, [pc, #32]	; (490 <cpu_irq_leave_critical+0x24>)
     46e:	681a      	ldr	r2, [r3, #0]
     470:	3a01      	subs	r2, #1
     472:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     474:	681b      	ldr	r3, [r3, #0]
     476:	2b00      	cmp	r3, #0
     478:	d109      	bne.n	48e <cpu_irq_leave_critical+0x22>
     47a:	4b06      	ldr	r3, [pc, #24]	; (494 <cpu_irq_leave_critical+0x28>)
     47c:	781b      	ldrb	r3, [r3, #0]
     47e:	2b00      	cmp	r3, #0
     480:	d005      	beq.n	48e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     482:	2201      	movs	r2, #1
     484:	4b04      	ldr	r3, [pc, #16]	; (498 <cpu_irq_leave_critical+0x2c>)
     486:	701a      	strb	r2, [r3, #0]
     488:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     48c:	b662      	cpsie	i
	}
}
     48e:	4770      	bx	lr
     490:	20000258 	.word	0x20000258
     494:	2000025c 	.word	0x2000025c
     498:	20000008 	.word	0x20000008

0000049c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     49c:	b5f0      	push	{r4, r5, r6, r7, lr}
     49e:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     4a0:	ac01      	add	r4, sp, #4
     4a2:	2501      	movs	r5, #1
     4a4:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     4a6:	2700      	movs	r7, #0
     4a8:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     4aa:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     4ac:	0021      	movs	r1, r4
     4ae:	203e      	movs	r0, #62	; 0x3e
     4b0:	4e06      	ldr	r6, [pc, #24]	; (4cc <system_board_init+0x30>)
     4b2:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     4b4:	2280      	movs	r2, #128	; 0x80
     4b6:	05d2      	lsls	r2, r2, #23
     4b8:	4b05      	ldr	r3, [pc, #20]	; (4d0 <system_board_init+0x34>)
     4ba:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     4bc:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     4be:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     4c0:	0021      	movs	r1, r4
     4c2:	200f      	movs	r0, #15
     4c4:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
     4c6:	b003      	add	sp, #12
     4c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     4ca:	46c0      	nop			; (mov r8, r8)
     4cc:	00000a05 	.word	0x00000a05
     4d0:	41004480 	.word	0x41004480

000004d4 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     4d4:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     4d6:	2200      	movs	r2, #0
     4d8:	2300      	movs	r3, #0
     4da:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
     4dc:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
     4de:	2100      	movs	r1, #0
     4e0:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     4e2:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     4e4:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
     4e6:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
     4e8:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
     4ea:	6082      	str	r2, [r0, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	//config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
     4ec:	24c0      	movs	r4, #192	; 0xc0
     4ee:	0164      	lsls	r4, r4, #5
     4f0:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     4f2:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     4f4:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
     4f6:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
     4f8:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
     4fa:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     4fc:	242a      	movs	r4, #42	; 0x2a
     4fe:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
     500:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
     502:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
     504:	3c06      	subs	r4, #6
     506:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     508:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     50a:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
     50c:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
     50e:	232b      	movs	r3, #43	; 0x2b
     510:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
     512:	3301      	adds	r3, #1
     514:	54c1      	strb	r1, [r0, r3]
}
     516:	bd10      	pop	{r4, pc}

00000518 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     518:	b5f0      	push	{r4, r5, r6, r7, lr}
     51a:	46d6      	mov	lr, sl
     51c:	464f      	mov	r7, r9
     51e:	4646      	mov	r6, r8
     520:	b5c0      	push	{r6, r7, lr}
     522:	b096      	sub	sp, #88	; 0x58
     524:	0007      	movs	r7, r0
     526:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     528:	6001      	str	r1, [r0, #0]
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     52a:	4ac6      	ldr	r2, [pc, #792]	; (844 <adc_init+0x32c>)
     52c:	6a10      	ldr	r0, [r2, #32]
     52e:	2380      	movs	r3, #128	; 0x80
     530:	025b      	lsls	r3, r3, #9
     532:	4303      	orrs	r3, r0
     534:	6213      	str	r3, [r2, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     536:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     538:	2005      	movs	r0, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     53a:	07db      	lsls	r3, r3, #31
     53c:	d505      	bpl.n	54a <adc_init+0x32>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
     53e:	b016      	add	sp, #88	; 0x58
     540:	bc1c      	pop	{r2, r3, r4}
     542:	4690      	mov	r8, r2
     544:	4699      	mov	r9, r3
     546:	46a2      	mov	sl, r4
     548:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     54a:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
     54c:	3017      	adds	r0, #23
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     54e:	079b      	lsls	r3, r3, #30
     550:	d4f5      	bmi.n	53e <adc_init+0x26>
	module_inst->reference = config->reference;
     552:	7873      	ldrb	r3, [r6, #1]
     554:	713b      	strb	r3, [r7, #4]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
     556:	2b00      	cmp	r3, #0
     558:	d104      	bne.n	564 <adc_init+0x4c>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
     55a:	4abb      	ldr	r2, [pc, #748]	; (848 <adc_init+0x330>)
     55c:	6c13      	ldr	r3, [r2, #64]	; 0x40
     55e:	2104      	movs	r1, #4
     560:	430b      	orrs	r3, r1
     562:	6413      	str	r3, [r2, #64]	; 0x40
		module_inst->callback[i] = NULL;
     564:	2300      	movs	r3, #0
     566:	60bb      	str	r3, [r7, #8]
     568:	60fb      	str	r3, [r7, #12]
     56a:	613b      	str	r3, [r7, #16]
	module_inst->registered_callback_mask = 0;
     56c:	76bb      	strb	r3, [r7, #26]
	module_inst->enabled_callback_mask = 0;
     56e:	76fb      	strb	r3, [r7, #27]
	module_inst->remaining_conversions = 0;
     570:	833b      	strh	r3, [r7, #24]
	module_inst->job_status = STATUS_OK;
     572:	773b      	strb	r3, [r7, #28]
	_adc_instances[0] = module_inst;
     574:	4bb5      	ldr	r3, [pc, #724]	; (84c <adc_init+0x334>)
     576:	601f      	str	r7, [r3, #0]
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
     578:	232a      	movs	r3, #42	; 0x2a
     57a:	5cf3      	ldrb	r3, [r6, r3]
     57c:	2b00      	cmp	r3, #0
     57e:	d105      	bne.n	58c <adc_init+0x74>
     580:	7d33      	ldrb	r3, [r6, #20]
     582:	2b00      	cmp	r3, #0
     584:	d102      	bne.n	58c <adc_init+0x74>
		module_inst->software_trigger = true;
     586:	3301      	adds	r3, #1
     588:	777b      	strb	r3, [r7, #29]
     58a:	e001      	b.n	590 <adc_init+0x78>
		module_inst->software_trigger = false;
     58c:	2300      	movs	r3, #0
     58e:	777b      	strb	r3, [r7, #29]
	Adc *const adc_module = module_inst->hw;
     590:	683b      	ldr	r3, [r7, #0]
     592:	4698      	mov	r8, r3
	gclk_chan_conf.source_generator = config->clock_source;
     594:	7833      	ldrb	r3, [r6, #0]
     596:	466a      	mov	r2, sp
     598:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
     59a:	4669      	mov	r1, sp
     59c:	201e      	movs	r0, #30
     59e:	4bac      	ldr	r3, [pc, #688]	; (850 <adc_init+0x338>)
     5a0:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
     5a2:	201e      	movs	r0, #30
     5a4:	4bab      	ldr	r3, [pc, #684]	; (854 <adc_init+0x33c>)
     5a6:	4798      	blx	r3
	if (config->pin_scan.inputs_to_scan != 0) {
     5a8:	232c      	movs	r3, #44	; 0x2c
     5aa:	5cf2      	ldrb	r2, [r6, r3]
     5ac:	2a00      	cmp	r2, #0
     5ae:	d054      	beq.n	65a <adc_init+0x142>
		uint8_t offset = config->pin_scan.offset_start_scan;
     5b0:	3b01      	subs	r3, #1
     5b2:	5cf5      	ldrb	r5, [r6, r3]
		uint8_t start_pin =
     5b4:	7b33      	ldrb	r3, [r6, #12]
     5b6:	18eb      	adds	r3, r5, r3
     5b8:	b2db      	uxtb	r3, r3
		uint8_t end_pin =
     5ba:	18d1      	adds	r1, r2, r3
		while (start_pin < end_pin) {
     5bc:	b2c9      	uxtb	r1, r1
     5be:	428b      	cmp	r3, r1
     5c0:	d221      	bcs.n	606 <adc_init+0xee>
     5c2:	1952      	adds	r2, r2, r5
     5c4:	b2d3      	uxtb	r3, r2
     5c6:	4699      	mov	r9, r3
	const uint32_t pinmapping[] = {
     5c8:	4ba3      	ldr	r3, [pc, #652]	; (858 <adc_init+0x340>)
     5ca:	469a      	mov	sl, r3
     5cc:	e003      	b.n	5d6 <adc_init+0xbe>
			offset++;
     5ce:	3501      	adds	r5, #1
     5d0:	b2ed      	uxtb	r5, r5
		while (start_pin < end_pin) {
     5d2:	454d      	cmp	r5, r9
     5d4:	d017      	beq.n	606 <adc_init+0xee>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
     5d6:	240f      	movs	r4, #15
     5d8:	402c      	ands	r4, r5
     5da:	7b33      	ldrb	r3, [r6, #12]
     5dc:	18e4      	adds	r4, r4, r3
	const uint32_t pinmapping[] = {
     5de:	2250      	movs	r2, #80	; 0x50
     5e0:	499e      	ldr	r1, [pc, #632]	; (85c <adc_init+0x344>)
     5e2:	a802      	add	r0, sp, #8
     5e4:	47d0      	blx	sl
	if (pin <= ADC_EXTCHANNEL_MSB) {
     5e6:	2c13      	cmp	r4, #19
     5e8:	d8f1      	bhi.n	5ce <adc_init+0xb6>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     5ea:	00a4      	lsls	r4, r4, #2
     5ec:	ab02      	add	r3, sp, #8
     5ee:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     5f0:	a901      	add	r1, sp, #4
     5f2:	2300      	movs	r3, #0
     5f4:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     5f6:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     5f8:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     5fa:	3301      	adds	r3, #1
     5fc:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     5fe:	b2c0      	uxtb	r0, r0
     600:	4b97      	ldr	r3, [pc, #604]	; (860 <adc_init+0x348>)
     602:	4798      	blx	r3
     604:	e7e3      	b.n	5ce <adc_init+0xb6>
		_adc_configure_ain_pin(config->negative_input);
     606:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     608:	2250      	movs	r2, #80	; 0x50
     60a:	4994      	ldr	r1, [pc, #592]	; (85c <adc_init+0x344>)
     60c:	a802      	add	r0, sp, #8
     60e:	4b92      	ldr	r3, [pc, #584]	; (858 <adc_init+0x340>)
     610:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     612:	2c13      	cmp	r4, #19
     614:	d913      	bls.n	63e <adc_init+0x126>
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
     616:	7d73      	ldrb	r3, [r6, #21]
     618:	009b      	lsls	r3, r3, #2
     61a:	b2db      	uxtb	r3, r3
     61c:	4642      	mov	r2, r8
     61e:	7013      	strb	r3, [r2, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     620:	7db3      	ldrb	r3, [r6, #22]
     622:	01db      	lsls	r3, r3, #7
     624:	7872      	ldrb	r2, [r6, #1]
     626:	4313      	orrs	r3, r2
     628:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
     62a:	4642      	mov	r2, r8
     62c:	7053      	strb	r3, [r2, #1]
	switch (config->resolution) {
     62e:	7933      	ldrb	r3, [r6, #4]
     630:	2b34      	cmp	r3, #52	; 0x34
     632:	d900      	bls.n	636 <adc_init+0x11e>
     634:	e17b      	b.n	92e <adc_init+0x416>
     636:	009b      	lsls	r3, r3, #2
     638:	4a8a      	ldr	r2, [pc, #552]	; (864 <adc_init+0x34c>)
     63a:	58d3      	ldr	r3, [r2, r3]
     63c:	469f      	mov	pc, r3
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     63e:	00a4      	lsls	r4, r4, #2
     640:	ab02      	add	r3, sp, #8
     642:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     644:	a901      	add	r1, sp, #4
     646:	2300      	movs	r3, #0
     648:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     64a:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     64c:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     64e:	3301      	adds	r3, #1
     650:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     652:	b2c0      	uxtb	r0, r0
     654:	4b82      	ldr	r3, [pc, #520]	; (860 <adc_init+0x348>)
     656:	4798      	blx	r3
     658:	e7dd      	b.n	616 <adc_init+0xfe>
		_adc_configure_ain_pin(config->positive_input);
     65a:	7b34      	ldrb	r4, [r6, #12]
	const uint32_t pinmapping[] = {
     65c:	2250      	movs	r2, #80	; 0x50
     65e:	497f      	ldr	r1, [pc, #508]	; (85c <adc_init+0x344>)
     660:	a802      	add	r0, sp, #8
     662:	4b7d      	ldr	r3, [pc, #500]	; (858 <adc_init+0x340>)
     664:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     666:	2c13      	cmp	r4, #19
     668:	d915      	bls.n	696 <adc_init+0x17e>
		_adc_configure_ain_pin(config->negative_input);
     66a:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     66c:	2250      	movs	r2, #80	; 0x50
     66e:	497b      	ldr	r1, [pc, #492]	; (85c <adc_init+0x344>)
     670:	a802      	add	r0, sp, #8
     672:	4b79      	ldr	r3, [pc, #484]	; (858 <adc_init+0x340>)
     674:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     676:	2c13      	cmp	r4, #19
     678:	d8cd      	bhi.n	616 <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     67a:	00a4      	lsls	r4, r4, #2
     67c:	ab02      	add	r3, sp, #8
     67e:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     680:	a901      	add	r1, sp, #4
     682:	2300      	movs	r3, #0
     684:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     686:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     688:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     68a:	3301      	adds	r3, #1
     68c:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     68e:	b2c0      	uxtb	r0, r0
     690:	4b73      	ldr	r3, [pc, #460]	; (860 <adc_init+0x348>)
     692:	4798      	blx	r3
     694:	e7bf      	b.n	616 <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     696:	00a4      	lsls	r4, r4, #2
     698:	ab02      	add	r3, sp, #8
     69a:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     69c:	a901      	add	r1, sp, #4
     69e:	2300      	movs	r3, #0
     6a0:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     6a2:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     6a4:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     6a6:	3301      	adds	r3, #1
     6a8:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     6aa:	b2c0      	uxtb	r0, r0
     6ac:	4b6c      	ldr	r3, [pc, #432]	; (860 <adc_init+0x348>)
     6ae:	4798      	blx	r3
     6b0:	e7db      	b.n	66a <adc_init+0x152>
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     6b2:	2304      	movs	r3, #4
		resolution = ADC_RESOLUTION_16BIT;
     6b4:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_4;
     6b6:	2102      	movs	r1, #2
     6b8:	e01a      	b.n	6f0 <adc_init+0x1d8>
		adjres = config->divide_result;
     6ba:	7c71      	ldrb	r1, [r6, #17]
		accumulate = config->accumulate_samples;
     6bc:	7c33      	ldrb	r3, [r6, #16]
		resolution = ADC_RESOLUTION_16BIT;
     6be:	2410      	movs	r4, #16
     6c0:	e016      	b.n	6f0 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     6c2:	2306      	movs	r3, #6
		resolution = ADC_RESOLUTION_16BIT;
     6c4:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     6c6:	2101      	movs	r1, #1
     6c8:	e012      	b.n	6f0 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     6ca:	2308      	movs	r3, #8
		resolution = ADC_RESOLUTION_16BIT;
     6cc:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     6ce:	2100      	movs	r1, #0
     6d0:	e00e      	b.n	6f0 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     6d2:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_8BIT;
     6d4:	2430      	movs	r4, #48	; 0x30
	uint8_t adjres = 0;
     6d6:	2100      	movs	r1, #0
     6d8:	e00a      	b.n	6f0 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     6da:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_10BIT;
     6dc:	2420      	movs	r4, #32
	uint8_t adjres = 0;
     6de:	2100      	movs	r1, #0
     6e0:	e006      	b.n	6f0 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     6e2:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_12BIT;
     6e4:	2400      	movs	r4, #0
	uint8_t adjres = 0;
     6e6:	2100      	movs	r1, #0
     6e8:	e002      	b.n	6f0 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     6ea:	2302      	movs	r3, #2
		resolution = ADC_RESOLUTION_16BIT;
     6ec:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     6ee:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     6f0:	0109      	lsls	r1, r1, #4
     6f2:	2270      	movs	r2, #112	; 0x70
     6f4:	400a      	ands	r2, r1
     6f6:	4313      	orrs	r3, r2
     6f8:	4642      	mov	r2, r8
     6fa:	7093      	strb	r3, [r2, #2]
	if (config->sample_length > 63) {
     6fc:	7df3      	ldrb	r3, [r6, #23]
		return STATUS_ERR_INVALID_ARG;
     6fe:	2017      	movs	r0, #23
	if (config->sample_length > 63) {
     700:	2b3f      	cmp	r3, #63	; 0x3f
     702:	d900      	bls.n	706 <adc_init+0x1ee>
     704:	e71b      	b.n	53e <adc_init+0x26>
		adc_module->SAMPCTRL.reg =
     706:	70d3      	strb	r3, [r2, #3]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     708:	683a      	ldr	r2, [r7, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     70a:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     70c:	b25b      	sxtb	r3, r3
     70e:	2b00      	cmp	r3, #0
     710:	dbfb      	blt.n	70a <adc_init+0x1f2>
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
     712:	7cf3      	ldrb	r3, [r6, #19]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     714:	8872      	ldrh	r2, [r6, #2]
     716:	4313      	orrs	r3, r2
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     718:	2224      	movs	r2, #36	; 0x24
     71a:	5cb2      	ldrb	r2, [r6, r2]
     71c:	00d2      	lsls	r2, r2, #3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     71e:	4313      	orrs	r3, r2
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
     720:	7d32      	ldrb	r2, [r6, #20]
     722:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     724:	4313      	orrs	r3, r2
     726:	7cb2      	ldrb	r2, [r6, #18]
     728:	0052      	lsls	r2, r2, #1
     72a:	4313      	orrs	r3, r2
     72c:	4323      	orrs	r3, r4
	adc_module->CTRLB.reg =
     72e:	4642      	mov	r2, r8
     730:	8093      	strh	r3, [r2, #4]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     732:	7e33      	ldrb	r3, [r6, #24]
     734:	2b00      	cmp	r3, #0
     736:	d020      	beq.n	77a <adc_init+0x262>
		switch (resolution) {
     738:	2c10      	cmp	r4, #16
     73a:	d100      	bne.n	73e <adc_init+0x226>
     73c:	e0d9      	b.n	8f2 <adc_init+0x3da>
     73e:	d800      	bhi.n	742 <adc_init+0x22a>
     740:	e098      	b.n	874 <adc_init+0x35c>
     742:	2c20      	cmp	r4, #32
     744:	d100      	bne.n	748 <adc_init+0x230>
     746:	e0b6      	b.n	8b6 <adc_init+0x39e>
     748:	2c30      	cmp	r4, #48	; 0x30
     74a:	d116      	bne.n	77a <adc_init+0x262>
			if (config->differential_mode &&
     74c:	7cf2      	ldrb	r2, [r6, #19]
     74e:	2a00      	cmp	r2, #0
     750:	d00a      	beq.n	768 <adc_init+0x250>
					(config->window.window_lower_value > 127 ||
     752:	69f2      	ldr	r2, [r6, #28]
     754:	3280      	adds	r2, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
     756:	2017      	movs	r0, #23
			if (config->differential_mode &&
     758:	2aff      	cmp	r2, #255	; 0xff
     75a:	d900      	bls.n	75e <adc_init+0x246>
     75c:	e6ef      	b.n	53e <adc_init+0x26>
					config->window.window_lower_value < -128 ||
     75e:	6a32      	ldr	r2, [r6, #32]
     760:	3280      	adds	r2, #128	; 0x80
     762:	2aff      	cmp	r2, #255	; 0xff
     764:	d900      	bls.n	768 <adc_init+0x250>
     766:	e6ea      	b.n	53e <adc_init+0x26>
				return STATUS_ERR_INVALID_ARG;
     768:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 255 ||
     76a:	69f2      	ldr	r2, [r6, #28]
     76c:	2aff      	cmp	r2, #255	; 0xff
     76e:	dd00      	ble.n	772 <adc_init+0x25a>
     770:	e6e5      	b.n	53e <adc_init+0x26>
     772:	6a32      	ldr	r2, [r6, #32]
     774:	2aff      	cmp	r2, #255	; 0xff
     776:	dd00      	ble.n	77a <adc_init+0x262>
     778:	e6e1      	b.n	53e <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     77a:	6839      	ldr	r1, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     77c:	7e4a      	ldrb	r2, [r1, #25]
	while (adc_is_syncing(module_inst)) {
     77e:	b252      	sxtb	r2, r2
     780:	2a00      	cmp	r2, #0
     782:	dbfb      	blt.n	77c <adc_init+0x264>
	adc_module->WINCTRL.reg = config->window.window_mode;
     784:	4642      	mov	r2, r8
     786:	7213      	strb	r3, [r2, #8]
	Adc *const adc_module = module_inst->hw;
     788:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     78a:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     78c:	b25b      	sxtb	r3, r3
     78e:	2b00      	cmp	r3, #0
     790:	dbfb      	blt.n	78a <adc_init+0x272>
	adc_module->WINLT.reg =
     792:	8bb3      	ldrh	r3, [r6, #28]
     794:	4642      	mov	r2, r8
     796:	8393      	strh	r3, [r2, #28]
	Adc *const adc_module = module_inst->hw;
     798:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     79a:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     79c:	b25b      	sxtb	r3, r3
     79e:	2b00      	cmp	r3, #0
     7a0:	dbfb      	blt.n	79a <adc_init+0x282>
	adc_module->WINUT.reg = config->window.window_upper_value <<
     7a2:	8c33      	ldrh	r3, [r6, #32]
     7a4:	4642      	mov	r2, r8
     7a6:	8413      	strh	r3, [r2, #32]
	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
     7a8:	232c      	movs	r3, #44	; 0x2c
     7aa:	5cf3      	ldrb	r3, [r6, r3]
	if (inputs_to_scan > 0) {
     7ac:	2b00      	cmp	r3, #0
     7ae:	d005      	beq.n	7bc <adc_init+0x2a4>
		inputs_to_scan--;
     7b0:	3b01      	subs	r3, #1
     7b2:	b2db      	uxtb	r3, r3
		return STATUS_ERR_INVALID_ARG;
     7b4:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     7b6:	2b0f      	cmp	r3, #15
     7b8:	d900      	bls.n	7bc <adc_init+0x2a4>
     7ba:	e6c0      	b.n	53e <adc_init+0x26>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
     7bc:	222b      	movs	r2, #43	; 0x2b
     7be:	5cb1      	ldrb	r1, [r6, r2]
		return STATUS_ERR_INVALID_ARG;
     7c0:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     7c2:	290f      	cmp	r1, #15
     7c4:	d900      	bls.n	7c8 <adc_init+0x2b0>
     7c6:	e6ba      	b.n	53e <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     7c8:	6838      	ldr	r0, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     7ca:	7e42      	ldrb	r2, [r0, #25]
	while (adc_is_syncing(module_inst)) {
     7cc:	b252      	sxtb	r2, r2
     7ce:	2a00      	cmp	r2, #0
     7d0:	dbfb      	blt.n	7ca <adc_init+0x2b2>
			config->negative_input |
     7d2:	89f2      	ldrh	r2, [r6, #14]
			config->positive_input;
     7d4:	7b30      	ldrb	r0, [r6, #12]
			config->negative_input |
     7d6:	4302      	orrs	r2, r0
     7d8:	68b0      	ldr	r0, [r6, #8]
     7da:	4302      	orrs	r2, r0
			(config->pin_scan.offset_start_scan <<
     7dc:	0509      	lsls	r1, r1, #20
			config->negative_input |
     7de:	430a      	orrs	r2, r1
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     7e0:	041b      	lsls	r3, r3, #16
			config->negative_input |
     7e2:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
     7e4:	4642      	mov	r2, r8
     7e6:	6113      	str	r3, [r2, #16]
	adc_module->EVCTRL.reg = config->event_action;
     7e8:	232a      	movs	r3, #42	; 0x2a
     7ea:	5cf3      	ldrb	r3, [r6, r3]
     7ec:	7513      	strb	r3, [r2, #20]
	adc_module->INTENCLR.reg =
     7ee:	230f      	movs	r3, #15
     7f0:	7593      	strb	r3, [r2, #22]
	if (config->correction.correction_enable){
     7f2:	3315      	adds	r3, #21
     7f4:	5cf3      	ldrb	r3, [r6, r3]
     7f6:	2b00      	cmp	r3, #0
     7f8:	d012      	beq.n	820 <adc_init+0x308>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     7fa:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
     7fc:	4a1a      	ldr	r2, [pc, #104]	; (868 <adc_init+0x350>)
			return STATUS_ERR_INVALID_ARG;
     7fe:	2017      	movs	r0, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     800:	4293      	cmp	r3, r2
     802:	d900      	bls.n	806 <adc_init+0x2ee>
     804:	e69b      	b.n	53e <adc_init+0x26>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     806:	4642      	mov	r2, r8
     808:	8493      	strh	r3, [r2, #36]	; 0x24
		if (config->correction.offset_correction > 2047 ||
     80a:	8d32      	ldrh	r2, [r6, #40]	; 0x28
     80c:	2380      	movs	r3, #128	; 0x80
     80e:	011b      	lsls	r3, r3, #4
     810:	18d3      	adds	r3, r2, r3
     812:	4915      	ldr	r1, [pc, #84]	; (868 <adc_init+0x350>)
     814:	b29b      	uxth	r3, r3
     816:	428b      	cmp	r3, r1
     818:	d900      	bls.n	81c <adc_init+0x304>
     81a:	e690      	b.n	53e <adc_init+0x26>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     81c:	4643      	mov	r3, r8
     81e:	84da      	strh	r2, [r3, #38]	; 0x26
			ADC_CALIB_BIAS_CAL(
     820:	4b12      	ldr	r3, [pc, #72]	; (86c <adc_init+0x354>)
     822:	681b      	ldr	r3, [r3, #0]
     824:	015b      	lsls	r3, r3, #5
     826:	22e0      	movs	r2, #224	; 0xe0
     828:	00d2      	lsls	r2, r2, #3
     82a:	4013      	ands	r3, r2
			ADC_CALIB_LINEARITY_CAL(
     82c:	4a10      	ldr	r2, [pc, #64]	; (870 <adc_init+0x358>)
     82e:	6851      	ldr	r1, [r2, #4]
     830:	0149      	lsls	r1, r1, #5
     832:	6812      	ldr	r2, [r2, #0]
     834:	0ed2      	lsrs	r2, r2, #27
     836:	430a      	orrs	r2, r1
     838:	b2d2      	uxtb	r2, r2
			) |
     83a:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
     83c:	4642      	mov	r2, r8
     83e:	8513      	strh	r3, [r2, #40]	; 0x28
	return STATUS_OK;
     840:	2000      	movs	r0, #0
     842:	e67c      	b.n	53e <adc_init+0x26>
     844:	40000400 	.word	0x40000400
     848:	40000800 	.word	0x40000800
     84c:	200002a4 	.word	0x200002a4
     850:	00001a11 	.word	0x00001a11
     854:	00001985 	.word	0x00001985
     858:	00003321 	.word	0x00003321
     85c:	00004990 	.word	0x00004990
     860:	00001b09 	.word	0x00001b09
     864:	000048bc 	.word	0x000048bc
     868:	00000fff 	.word	0x00000fff
     86c:	00806024 	.word	0x00806024
     870:	00806020 	.word	0x00806020
		switch (resolution) {
     874:	2c00      	cmp	r4, #0
     876:	d000      	beq.n	87a <adc_init+0x362>
     878:	e77f      	b.n	77a <adc_init+0x262>
			if (config->differential_mode &&
     87a:	7cf2      	ldrb	r2, [r6, #19]
     87c:	2a00      	cmp	r2, #0
     87e:	d00f      	beq.n	8a0 <adc_init+0x388>
					(config->window.window_lower_value > 2047 ||
     880:	69f2      	ldr	r2, [r6, #28]
     882:	2180      	movs	r1, #128	; 0x80
     884:	0109      	lsls	r1, r1, #4
     886:	468c      	mov	ip, r1
     888:	4462      	add	r2, ip
			if (config->differential_mode &&
     88a:	492a      	ldr	r1, [pc, #168]	; (934 <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
     88c:	2017      	movs	r0, #23
			if (config->differential_mode &&
     88e:	428a      	cmp	r2, r1
     890:	d900      	bls.n	894 <adc_init+0x37c>
     892:	e654      	b.n	53e <adc_init+0x26>
					config->window.window_lower_value < -2048 ||
     894:	6a32      	ldr	r2, [r6, #32]
     896:	4462      	add	r2, ip
     898:	4926      	ldr	r1, [pc, #152]	; (934 <adc_init+0x41c>)
     89a:	428a      	cmp	r2, r1
     89c:	d900      	bls.n	8a0 <adc_init+0x388>
     89e:	e64e      	b.n	53e <adc_init+0x26>
			} else if (config->window.window_lower_value > 4095 ||
     8a0:	4a24      	ldr	r2, [pc, #144]	; (934 <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
     8a2:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
     8a4:	69f1      	ldr	r1, [r6, #28]
     8a6:	4291      	cmp	r1, r2
     8a8:	dd00      	ble.n	8ac <adc_init+0x394>
     8aa:	e648      	b.n	53e <adc_init+0x26>
     8ac:	6a31      	ldr	r1, [r6, #32]
     8ae:	4291      	cmp	r1, r2
     8b0:	dd00      	ble.n	8b4 <adc_init+0x39c>
     8b2:	e644      	b.n	53e <adc_init+0x26>
     8b4:	e761      	b.n	77a <adc_init+0x262>
			if (config->differential_mode &&
     8b6:	7cf2      	ldrb	r2, [r6, #19]
     8b8:	2a00      	cmp	r2, #0
     8ba:	d00f      	beq.n	8dc <adc_init+0x3c4>
					(config->window.window_lower_value > 511 ||
     8bc:	69f2      	ldr	r2, [r6, #28]
     8be:	2180      	movs	r1, #128	; 0x80
     8c0:	0089      	lsls	r1, r1, #2
     8c2:	468c      	mov	ip, r1
     8c4:	4462      	add	r2, ip
			if (config->differential_mode &&
     8c6:	491c      	ldr	r1, [pc, #112]	; (938 <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
     8c8:	2017      	movs	r0, #23
			if (config->differential_mode &&
     8ca:	428a      	cmp	r2, r1
     8cc:	d900      	bls.n	8d0 <adc_init+0x3b8>
     8ce:	e636      	b.n	53e <adc_init+0x26>
					config->window.window_lower_value < -512 ||
     8d0:	6a32      	ldr	r2, [r6, #32]
     8d2:	4462      	add	r2, ip
     8d4:	4918      	ldr	r1, [pc, #96]	; (938 <adc_init+0x420>)
     8d6:	428a      	cmp	r2, r1
     8d8:	d900      	bls.n	8dc <adc_init+0x3c4>
     8da:	e630      	b.n	53e <adc_init+0x26>
			} else if (config->window.window_lower_value > 1023 ||
     8dc:	4a16      	ldr	r2, [pc, #88]	; (938 <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
     8de:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
     8e0:	69f1      	ldr	r1, [r6, #28]
     8e2:	4291      	cmp	r1, r2
     8e4:	dd00      	ble.n	8e8 <adc_init+0x3d0>
     8e6:	e62a      	b.n	53e <adc_init+0x26>
     8e8:	6a31      	ldr	r1, [r6, #32]
     8ea:	4291      	cmp	r1, r2
     8ec:	dd00      	ble.n	8f0 <adc_init+0x3d8>
     8ee:	e626      	b.n	53e <adc_init+0x26>
     8f0:	e743      	b.n	77a <adc_init+0x262>
			if (config->differential_mode &&
     8f2:	7cf2      	ldrb	r2, [r6, #19]
     8f4:	2a00      	cmp	r2, #0
     8f6:	d00f      	beq.n	918 <adc_init+0x400>
					(config->window.window_lower_value > 32767 ||
     8f8:	69f2      	ldr	r2, [r6, #28]
     8fa:	2180      	movs	r1, #128	; 0x80
     8fc:	0209      	lsls	r1, r1, #8
     8fe:	468c      	mov	ip, r1
     900:	4462      	add	r2, ip
			if (config->differential_mode &&
     902:	490e      	ldr	r1, [pc, #56]	; (93c <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
     904:	2017      	movs	r0, #23
			if (config->differential_mode &&
     906:	428a      	cmp	r2, r1
     908:	d900      	bls.n	90c <adc_init+0x3f4>
     90a:	e618      	b.n	53e <adc_init+0x26>
					config->window.window_lower_value < -32768 ||
     90c:	6a32      	ldr	r2, [r6, #32]
     90e:	4462      	add	r2, ip
     910:	490a      	ldr	r1, [pc, #40]	; (93c <adc_init+0x424>)
     912:	428a      	cmp	r2, r1
     914:	d900      	bls.n	918 <adc_init+0x400>
     916:	e612      	b.n	53e <adc_init+0x26>
			} else if (config->window.window_lower_value > 65535 ||
     918:	4a08      	ldr	r2, [pc, #32]	; (93c <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
     91a:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
     91c:	69f1      	ldr	r1, [r6, #28]
     91e:	4291      	cmp	r1, r2
     920:	dd00      	ble.n	924 <adc_init+0x40c>
     922:	e60c      	b.n	53e <adc_init+0x26>
     924:	6a31      	ldr	r1, [r6, #32]
     926:	4291      	cmp	r1, r2
     928:	dd00      	ble.n	92c <adc_init+0x414>
     92a:	e608      	b.n	53e <adc_init+0x26>
     92c:	e725      	b.n	77a <adc_init+0x262>
		return STATUS_ERR_INVALID_ARG;
     92e:	2017      	movs	r0, #23
     930:	e605      	b.n	53e <adc_init+0x26>
     932:	46c0      	nop			; (mov r8, r8)
     934:	00000fff 	.word	0x00000fff
     938:	000003ff 	.word	0x000003ff
     93c:	0000ffff 	.word	0x0000ffff

00000940 <ADC_Handler>:
	}
}

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
     940:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
     942:	4b2f      	ldr	r3, [pc, #188]	; (a00 <ADC_Handler+0xc0>)
     944:	681d      	ldr	r5, [r3, #0]
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
     946:	682b      	ldr	r3, [r5, #0]
     948:	7e1a      	ldrb	r2, [r3, #24]
     94a:	7ddc      	ldrb	r4, [r3, #23]
     94c:	4014      	ands	r4, r2
	if (flags & ADC_INTFLAG_RESRDY) {
     94e:	07e2      	lsls	r2, r4, #31
     950:	d416      	bmi.n	980 <ADC_Handler+0x40>
	if (flags & ADC_INTFLAG_WINMON) {
     952:	0763      	lsls	r3, r4, #29
     954:	d508      	bpl.n	968 <ADC_Handler+0x28>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     956:	2304      	movs	r3, #4
     958:	682a      	ldr	r2, [r5, #0]
     95a:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     95c:	7eeb      	ldrb	r3, [r5, #27]
     95e:	079b      	lsls	r3, r3, #30
     960:	d502      	bpl.n	968 <ADC_Handler+0x28>
     962:	7eab      	ldrb	r3, [r5, #26]
     964:	079b      	lsls	r3, r3, #30
     966:	d442      	bmi.n	9ee <ADC_Handler+0xae>
	if (flags & ADC_INTFLAG_OVERRUN) {
     968:	07a3      	lsls	r3, r4, #30
     96a:	d508      	bpl.n	97e <ADC_Handler+0x3e>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     96c:	2302      	movs	r3, #2
     96e:	682a      	ldr	r2, [r5, #0]
     970:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     972:	7eeb      	ldrb	r3, [r5, #27]
     974:	075b      	lsls	r3, r3, #29
     976:	d502      	bpl.n	97e <ADC_Handler+0x3e>
     978:	7eab      	ldrb	r3, [r5, #26]
     97a:	075b      	lsls	r3, r3, #29
     97c:	d43b      	bmi.n	9f6 <ADC_Handler+0xb6>
	_adc_interrupt_handler(0);
}
     97e:	bd70      	pop	{r4, r5, r6, pc}
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     980:	2201      	movs	r2, #1
     982:	761a      	strb	r2, [r3, #24]
	Adc *const adc_module = module_inst->hw;
     984:	682a      	ldr	r2, [r5, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     986:	7e53      	ldrb	r3, [r2, #25]
		while (adc_is_syncing(module)) {
     988:	b25b      	sxtb	r3, r3
     98a:	2b00      	cmp	r3, #0
     98c:	dbfb      	blt.n	986 <ADC_Handler+0x46>
		*(module->job_buffer++) = module->hw->RESULT.reg;
     98e:	6969      	ldr	r1, [r5, #20]
     990:	1c8b      	adds	r3, r1, #2
     992:	616b      	str	r3, [r5, #20]
     994:	8b53      	ldrh	r3, [r2, #26]
     996:	b29b      	uxth	r3, r3
     998:	800b      	strh	r3, [r1, #0]
		if (--module->remaining_conversions > 0) {
     99a:	8b2b      	ldrh	r3, [r5, #24]
     99c:	3b01      	subs	r3, #1
     99e:	b29b      	uxth	r3, r3
     9a0:	832b      	strh	r3, [r5, #24]
     9a2:	2b00      	cmp	r3, #0
     9a4:	d011      	beq.n	9ca <ADC_Handler+0x8a>
			if (module->software_trigger == true) {
     9a6:	7f6b      	ldrb	r3, [r5, #29]
     9a8:	2b00      	cmp	r3, #0
     9aa:	d0d2      	beq.n	952 <ADC_Handler+0x12>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     9ac:	682a      	ldr	r2, [r5, #0]
     9ae:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     9b0:	b25b      	sxtb	r3, r3
     9b2:	2b00      	cmp	r3, #0
     9b4:	dbfb      	blt.n	9ae <ADC_Handler+0x6e>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     9b6:	7b13      	ldrb	r3, [r2, #12]
     9b8:	2102      	movs	r1, #2
     9ba:	430b      	orrs	r3, r1
     9bc:	7313      	strb	r3, [r2, #12]
	Adc *const adc_module = module_inst->hw;
     9be:	682a      	ldr	r2, [r5, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     9c0:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     9c2:	b25b      	sxtb	r3, r3
     9c4:	2b00      	cmp	r3, #0
     9c6:	dbfb      	blt.n	9c0 <ADC_Handler+0x80>
     9c8:	e7c3      	b.n	952 <ADC_Handler+0x12>
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     9ca:	2301      	movs	r3, #1
     9cc:	682a      	ldr	r2, [r5, #0]
     9ce:	7593      	strb	r3, [r2, #22]
			if (module->job_status == STATUS_BUSY) {
     9d0:	7f2b      	ldrb	r3, [r5, #28]
     9d2:	2b05      	cmp	r3, #5
     9d4:	d1bd      	bne.n	952 <ADC_Handler+0x12>
				module->job_status = STATUS_OK;
     9d6:	2300      	movs	r3, #0
     9d8:	772b      	strb	r3, [r5, #28]
				if ((module->enabled_callback_mask &
     9da:	7eeb      	ldrb	r3, [r5, #27]
     9dc:	07db      	lsls	r3, r3, #31
     9de:	d5b8      	bpl.n	952 <ADC_Handler+0x12>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
     9e0:	7eab      	ldrb	r3, [r5, #26]
     9e2:	07db      	lsls	r3, r3, #31
     9e4:	d5b5      	bpl.n	952 <ADC_Handler+0x12>
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     9e6:	0028      	movs	r0, r5
     9e8:	68ab      	ldr	r3, [r5, #8]
     9ea:	4798      	blx	r3
     9ec:	e7b1      	b.n	952 <ADC_Handler+0x12>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     9ee:	0028      	movs	r0, r5
     9f0:	68eb      	ldr	r3, [r5, #12]
     9f2:	4798      	blx	r3
     9f4:	e7b8      	b.n	968 <ADC_Handler+0x28>
			(module->callback[ADC_CALLBACK_ERROR])(module);
     9f6:	692b      	ldr	r3, [r5, #16]
     9f8:	0028      	movs	r0, r5
     9fa:	4798      	blx	r3
}
     9fc:	e7bf      	b.n	97e <ADC_Handler+0x3e>
     9fe:	46c0      	nop			; (mov r8, r8)
     a00:	200002a4 	.word	0x200002a4

00000a04 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     a04:	b500      	push	{lr}
     a06:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     a08:	ab01      	add	r3, sp, #4
     a0a:	2280      	movs	r2, #128	; 0x80
     a0c:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     a0e:	780a      	ldrb	r2, [r1, #0]
     a10:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     a12:	784a      	ldrb	r2, [r1, #1]
     a14:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     a16:	788a      	ldrb	r2, [r1, #2]
     a18:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     a1a:	0019      	movs	r1, r3
     a1c:	4b01      	ldr	r3, [pc, #4]	; (a24 <port_pin_set_config+0x20>)
     a1e:	4798      	blx	r3
}
     a20:	b003      	add	sp, #12
     a22:	bd00      	pop	{pc}
     a24:	00001b09 	.word	0x00001b09

00000a28 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     a28:	b5f0      	push	{r4, r5, r6, r7, lr}
     a2a:	46de      	mov	lr, fp
     a2c:	4657      	mov	r7, sl
     a2e:	464e      	mov	r6, r9
     a30:	4645      	mov	r5, r8
     a32:	b5e0      	push	{r5, r6, r7, lr}
     a34:	b087      	sub	sp, #28
     a36:	4680      	mov	r8, r0
     a38:	9104      	str	r1, [sp, #16]
     a3a:	0016      	movs	r6, r2
     a3c:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     a3e:	2200      	movs	r2, #0
     a40:	2300      	movs	r3, #0
     a42:	2100      	movs	r1, #0
     a44:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     a46:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     a48:	2001      	movs	r0, #1
     a4a:	0021      	movs	r1, r4
     a4c:	9600      	str	r6, [sp, #0]
     a4e:	9701      	str	r7, [sp, #4]
     a50:	465c      	mov	r4, fp
     a52:	9403      	str	r4, [sp, #12]
     a54:	4644      	mov	r4, r8
     a56:	9405      	str	r4, [sp, #20]
     a58:	e013      	b.n	a82 <long_division+0x5a>
     a5a:	2420      	movs	r4, #32
     a5c:	1a64      	subs	r4, r4, r1
     a5e:	0005      	movs	r5, r0
     a60:	40e5      	lsrs	r5, r4
     a62:	46a8      	mov	r8, r5
     a64:	e014      	b.n	a90 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     a66:	9c00      	ldr	r4, [sp, #0]
     a68:	9d01      	ldr	r5, [sp, #4]
     a6a:	1b12      	subs	r2, r2, r4
     a6c:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     a6e:	465c      	mov	r4, fp
     a70:	464d      	mov	r5, r9
     a72:	432c      	orrs	r4, r5
     a74:	46a3      	mov	fp, r4
     a76:	9c03      	ldr	r4, [sp, #12]
     a78:	4645      	mov	r5, r8
     a7a:	432c      	orrs	r4, r5
     a7c:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     a7e:	3901      	subs	r1, #1
     a80:	d325      	bcc.n	ace <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     a82:	2420      	movs	r4, #32
     a84:	4264      	negs	r4, r4
     a86:	190c      	adds	r4, r1, r4
     a88:	d4e7      	bmi.n	a5a <long_division+0x32>
     a8a:	0005      	movs	r5, r0
     a8c:	40a5      	lsls	r5, r4
     a8e:	46a8      	mov	r8, r5
     a90:	0004      	movs	r4, r0
     a92:	408c      	lsls	r4, r1
     a94:	46a1      	mov	r9, r4
		r = r << 1;
     a96:	1892      	adds	r2, r2, r2
     a98:	415b      	adcs	r3, r3
     a9a:	0014      	movs	r4, r2
     a9c:	001d      	movs	r5, r3
		if (n & bit_shift) {
     a9e:	9e05      	ldr	r6, [sp, #20]
     aa0:	464f      	mov	r7, r9
     aa2:	403e      	ands	r6, r7
     aa4:	46b4      	mov	ip, r6
     aa6:	9e04      	ldr	r6, [sp, #16]
     aa8:	4647      	mov	r7, r8
     aaa:	403e      	ands	r6, r7
     aac:	46b2      	mov	sl, r6
     aae:	4666      	mov	r6, ip
     ab0:	4657      	mov	r7, sl
     ab2:	433e      	orrs	r6, r7
     ab4:	d003      	beq.n	abe <long_division+0x96>
			r |= 0x01;
     ab6:	0006      	movs	r6, r0
     ab8:	4326      	orrs	r6, r4
     aba:	0032      	movs	r2, r6
     abc:	002b      	movs	r3, r5
		if (r >= d) {
     abe:	9c00      	ldr	r4, [sp, #0]
     ac0:	9d01      	ldr	r5, [sp, #4]
     ac2:	429d      	cmp	r5, r3
     ac4:	d8db      	bhi.n	a7e <long_division+0x56>
     ac6:	d1ce      	bne.n	a66 <long_division+0x3e>
     ac8:	4294      	cmp	r4, r2
     aca:	d8d8      	bhi.n	a7e <long_division+0x56>
     acc:	e7cb      	b.n	a66 <long_division+0x3e>
     ace:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     ad0:	4658      	mov	r0, fp
     ad2:	0019      	movs	r1, r3
     ad4:	b007      	add	sp, #28
     ad6:	bc3c      	pop	{r2, r3, r4, r5}
     ad8:	4690      	mov	r8, r2
     ada:	4699      	mov	r9, r3
     adc:	46a2      	mov	sl, r4
     ade:	46ab      	mov	fp, r5
     ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000ae2 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     ae2:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     ae4:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     ae6:	2340      	movs	r3, #64	; 0x40
     ae8:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     aea:	4281      	cmp	r1, r0
     aec:	d202      	bcs.n	af4 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     aee:	0018      	movs	r0, r3
     af0:	bd10      	pop	{r4, pc}
		baud_calculated++;
     af2:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     af4:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     af6:	1c63      	adds	r3, r4, #1
     af8:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     afa:	4288      	cmp	r0, r1
     afc:	d9f9      	bls.n	af2 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     afe:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     b00:	2cff      	cmp	r4, #255	; 0xff
     b02:	d8f4      	bhi.n	aee <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     b04:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     b06:	2300      	movs	r3, #0
     b08:	e7f1      	b.n	aee <_sercom_get_sync_baud_val+0xc>
	...

00000b0c <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
     b0e:	b083      	sub	sp, #12
     b10:	000f      	movs	r7, r1
     b12:	0016      	movs	r6, r2
     b14:	aa08      	add	r2, sp, #32
     b16:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     b18:	0004      	movs	r4, r0
     b1a:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     b1c:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     b1e:	42bc      	cmp	r4, r7
     b20:	d902      	bls.n	b28 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     b22:	0010      	movs	r0, r2
     b24:	b003      	add	sp, #12
     b26:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     b28:	2b00      	cmp	r3, #0
     b2a:	d114      	bne.n	b56 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     b2c:	0002      	movs	r2, r0
     b2e:	0008      	movs	r0, r1
     b30:	2100      	movs	r1, #0
     b32:	4c19      	ldr	r4, [pc, #100]	; (b98 <_sercom_get_async_baud_val+0x8c>)
     b34:	47a0      	blx	r4
     b36:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     b38:	003a      	movs	r2, r7
     b3a:	2300      	movs	r3, #0
     b3c:	2000      	movs	r0, #0
     b3e:	4c17      	ldr	r4, [pc, #92]	; (b9c <_sercom_get_async_baud_val+0x90>)
     b40:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     b42:	2200      	movs	r2, #0
     b44:	2301      	movs	r3, #1
     b46:	1a12      	subs	r2, r2, r0
     b48:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     b4a:	0c12      	lsrs	r2, r2, #16
     b4c:	041b      	lsls	r3, r3, #16
     b4e:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     b50:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     b52:	2200      	movs	r2, #0
     b54:	e7e5      	b.n	b22 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     b56:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     b58:	2b01      	cmp	r3, #1
     b5a:	d1f9      	bne.n	b50 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     b5c:	000a      	movs	r2, r1
     b5e:	2300      	movs	r3, #0
     b60:	2100      	movs	r1, #0
     b62:	4c0d      	ldr	r4, [pc, #52]	; (b98 <_sercom_get_async_baud_val+0x8c>)
     b64:	47a0      	blx	r4
     b66:	0002      	movs	r2, r0
     b68:	000b      	movs	r3, r1
     b6a:	9200      	str	r2, [sp, #0]
     b6c:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     b6e:	0038      	movs	r0, r7
     b70:	2100      	movs	r1, #0
     b72:	4c0a      	ldr	r4, [pc, #40]	; (b9c <_sercom_get_async_baud_val+0x90>)
     b74:	47a0      	blx	r4
     b76:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     b78:	2380      	movs	r3, #128	; 0x80
     b7a:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     b7c:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     b7e:	4298      	cmp	r0, r3
     b80:	d8cf      	bhi.n	b22 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     b82:	0f79      	lsrs	r1, r7, #29
     b84:	00f8      	lsls	r0, r7, #3
     b86:	9a00      	ldr	r2, [sp, #0]
     b88:	9b01      	ldr	r3, [sp, #4]
     b8a:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     b8c:	00ea      	lsls	r2, r5, #3
     b8e:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     b90:	b2d2      	uxtb	r2, r2
     b92:	0352      	lsls	r2, r2, #13
     b94:	432a      	orrs	r2, r5
     b96:	e7db      	b.n	b50 <_sercom_get_async_baud_val+0x44>
     b98:	00003285 	.word	0x00003285
     b9c:	00000a29 	.word	0x00000a29

00000ba0 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     ba0:	b510      	push	{r4, lr}
     ba2:	b082      	sub	sp, #8
     ba4:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     ba6:	4b0e      	ldr	r3, [pc, #56]	; (be0 <sercom_set_gclk_generator+0x40>)
     ba8:	781b      	ldrb	r3, [r3, #0]
     baa:	2b00      	cmp	r3, #0
     bac:	d007      	beq.n	bbe <sercom_set_gclk_generator+0x1e>
     bae:	2900      	cmp	r1, #0
     bb0:	d105      	bne.n	bbe <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     bb2:	4b0b      	ldr	r3, [pc, #44]	; (be0 <sercom_set_gclk_generator+0x40>)
     bb4:	785b      	ldrb	r3, [r3, #1]
     bb6:	4283      	cmp	r3, r0
     bb8:	d010      	beq.n	bdc <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     bba:	201d      	movs	r0, #29
     bbc:	e00c      	b.n	bd8 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     bbe:	a901      	add	r1, sp, #4
     bc0:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     bc2:	2013      	movs	r0, #19
     bc4:	4b07      	ldr	r3, [pc, #28]	; (be4 <sercom_set_gclk_generator+0x44>)
     bc6:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     bc8:	2013      	movs	r0, #19
     bca:	4b07      	ldr	r3, [pc, #28]	; (be8 <sercom_set_gclk_generator+0x48>)
     bcc:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     bce:	4b04      	ldr	r3, [pc, #16]	; (be0 <sercom_set_gclk_generator+0x40>)
     bd0:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     bd2:	2201      	movs	r2, #1
     bd4:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     bd6:	2000      	movs	r0, #0
}
     bd8:	b002      	add	sp, #8
     bda:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     bdc:	2000      	movs	r0, #0
     bde:	e7fb      	b.n	bd8 <sercom_set_gclk_generator+0x38>
     be0:	20000260 	.word	0x20000260
     be4:	00001a11 	.word	0x00001a11
     be8:	00001985 	.word	0x00001985

00000bec <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     bec:	4b40      	ldr	r3, [pc, #256]	; (cf0 <_sercom_get_default_pad+0x104>)
     bee:	4298      	cmp	r0, r3
     bf0:	d031      	beq.n	c56 <_sercom_get_default_pad+0x6a>
     bf2:	d90a      	bls.n	c0a <_sercom_get_default_pad+0x1e>
     bf4:	4b3f      	ldr	r3, [pc, #252]	; (cf4 <_sercom_get_default_pad+0x108>)
     bf6:	4298      	cmp	r0, r3
     bf8:	d04d      	beq.n	c96 <_sercom_get_default_pad+0xaa>
     bfa:	4b3f      	ldr	r3, [pc, #252]	; (cf8 <_sercom_get_default_pad+0x10c>)
     bfc:	4298      	cmp	r0, r3
     bfe:	d05a      	beq.n	cb6 <_sercom_get_default_pad+0xca>
     c00:	4b3e      	ldr	r3, [pc, #248]	; (cfc <_sercom_get_default_pad+0x110>)
     c02:	4298      	cmp	r0, r3
     c04:	d037      	beq.n	c76 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     c06:	2000      	movs	r0, #0
}
     c08:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     c0a:	4b3d      	ldr	r3, [pc, #244]	; (d00 <_sercom_get_default_pad+0x114>)
     c0c:	4298      	cmp	r0, r3
     c0e:	d00c      	beq.n	c2a <_sercom_get_default_pad+0x3e>
     c10:	4b3c      	ldr	r3, [pc, #240]	; (d04 <_sercom_get_default_pad+0x118>)
     c12:	4298      	cmp	r0, r3
     c14:	d1f7      	bne.n	c06 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     c16:	2901      	cmp	r1, #1
     c18:	d017      	beq.n	c4a <_sercom_get_default_pad+0x5e>
     c1a:	2900      	cmp	r1, #0
     c1c:	d05d      	beq.n	cda <_sercom_get_default_pad+0xee>
     c1e:	2902      	cmp	r1, #2
     c20:	d015      	beq.n	c4e <_sercom_get_default_pad+0x62>
     c22:	2903      	cmp	r1, #3
     c24:	d015      	beq.n	c52 <_sercom_get_default_pad+0x66>
	return 0;
     c26:	2000      	movs	r0, #0
     c28:	e7ee      	b.n	c08 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     c2a:	2901      	cmp	r1, #1
     c2c:	d007      	beq.n	c3e <_sercom_get_default_pad+0x52>
     c2e:	2900      	cmp	r1, #0
     c30:	d051      	beq.n	cd6 <_sercom_get_default_pad+0xea>
     c32:	2902      	cmp	r1, #2
     c34:	d005      	beq.n	c42 <_sercom_get_default_pad+0x56>
     c36:	2903      	cmp	r1, #3
     c38:	d005      	beq.n	c46 <_sercom_get_default_pad+0x5a>
	return 0;
     c3a:	2000      	movs	r0, #0
     c3c:	e7e4      	b.n	c08 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     c3e:	4832      	ldr	r0, [pc, #200]	; (d08 <_sercom_get_default_pad+0x11c>)
     c40:	e7e2      	b.n	c08 <_sercom_get_default_pad+0x1c>
     c42:	4832      	ldr	r0, [pc, #200]	; (d0c <_sercom_get_default_pad+0x120>)
     c44:	e7e0      	b.n	c08 <_sercom_get_default_pad+0x1c>
     c46:	4832      	ldr	r0, [pc, #200]	; (d10 <_sercom_get_default_pad+0x124>)
     c48:	e7de      	b.n	c08 <_sercom_get_default_pad+0x1c>
     c4a:	4832      	ldr	r0, [pc, #200]	; (d14 <_sercom_get_default_pad+0x128>)
     c4c:	e7dc      	b.n	c08 <_sercom_get_default_pad+0x1c>
     c4e:	4832      	ldr	r0, [pc, #200]	; (d18 <_sercom_get_default_pad+0x12c>)
     c50:	e7da      	b.n	c08 <_sercom_get_default_pad+0x1c>
     c52:	4832      	ldr	r0, [pc, #200]	; (d1c <_sercom_get_default_pad+0x130>)
     c54:	e7d8      	b.n	c08 <_sercom_get_default_pad+0x1c>
     c56:	2901      	cmp	r1, #1
     c58:	d007      	beq.n	c6a <_sercom_get_default_pad+0x7e>
     c5a:	2900      	cmp	r1, #0
     c5c:	d03f      	beq.n	cde <_sercom_get_default_pad+0xf2>
     c5e:	2902      	cmp	r1, #2
     c60:	d005      	beq.n	c6e <_sercom_get_default_pad+0x82>
     c62:	2903      	cmp	r1, #3
     c64:	d005      	beq.n	c72 <_sercom_get_default_pad+0x86>
	return 0;
     c66:	2000      	movs	r0, #0
     c68:	e7ce      	b.n	c08 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     c6a:	482d      	ldr	r0, [pc, #180]	; (d20 <_sercom_get_default_pad+0x134>)
     c6c:	e7cc      	b.n	c08 <_sercom_get_default_pad+0x1c>
     c6e:	482d      	ldr	r0, [pc, #180]	; (d24 <_sercom_get_default_pad+0x138>)
     c70:	e7ca      	b.n	c08 <_sercom_get_default_pad+0x1c>
     c72:	482d      	ldr	r0, [pc, #180]	; (d28 <_sercom_get_default_pad+0x13c>)
     c74:	e7c8      	b.n	c08 <_sercom_get_default_pad+0x1c>
     c76:	2901      	cmp	r1, #1
     c78:	d007      	beq.n	c8a <_sercom_get_default_pad+0x9e>
     c7a:	2900      	cmp	r1, #0
     c7c:	d031      	beq.n	ce2 <_sercom_get_default_pad+0xf6>
     c7e:	2902      	cmp	r1, #2
     c80:	d005      	beq.n	c8e <_sercom_get_default_pad+0xa2>
     c82:	2903      	cmp	r1, #3
     c84:	d005      	beq.n	c92 <_sercom_get_default_pad+0xa6>
	return 0;
     c86:	2000      	movs	r0, #0
     c88:	e7be      	b.n	c08 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     c8a:	4828      	ldr	r0, [pc, #160]	; (d2c <_sercom_get_default_pad+0x140>)
     c8c:	e7bc      	b.n	c08 <_sercom_get_default_pad+0x1c>
     c8e:	4828      	ldr	r0, [pc, #160]	; (d30 <_sercom_get_default_pad+0x144>)
     c90:	e7ba      	b.n	c08 <_sercom_get_default_pad+0x1c>
     c92:	4828      	ldr	r0, [pc, #160]	; (d34 <_sercom_get_default_pad+0x148>)
     c94:	e7b8      	b.n	c08 <_sercom_get_default_pad+0x1c>
     c96:	2901      	cmp	r1, #1
     c98:	d007      	beq.n	caa <_sercom_get_default_pad+0xbe>
     c9a:	2900      	cmp	r1, #0
     c9c:	d023      	beq.n	ce6 <_sercom_get_default_pad+0xfa>
     c9e:	2902      	cmp	r1, #2
     ca0:	d005      	beq.n	cae <_sercom_get_default_pad+0xc2>
     ca2:	2903      	cmp	r1, #3
     ca4:	d005      	beq.n	cb2 <_sercom_get_default_pad+0xc6>
	return 0;
     ca6:	2000      	movs	r0, #0
     ca8:	e7ae      	b.n	c08 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     caa:	4823      	ldr	r0, [pc, #140]	; (d38 <_sercom_get_default_pad+0x14c>)
     cac:	e7ac      	b.n	c08 <_sercom_get_default_pad+0x1c>
     cae:	4823      	ldr	r0, [pc, #140]	; (d3c <_sercom_get_default_pad+0x150>)
     cb0:	e7aa      	b.n	c08 <_sercom_get_default_pad+0x1c>
     cb2:	4823      	ldr	r0, [pc, #140]	; (d40 <_sercom_get_default_pad+0x154>)
     cb4:	e7a8      	b.n	c08 <_sercom_get_default_pad+0x1c>
     cb6:	2901      	cmp	r1, #1
     cb8:	d007      	beq.n	cca <_sercom_get_default_pad+0xde>
     cba:	2900      	cmp	r1, #0
     cbc:	d015      	beq.n	cea <_sercom_get_default_pad+0xfe>
     cbe:	2902      	cmp	r1, #2
     cc0:	d005      	beq.n	cce <_sercom_get_default_pad+0xe2>
     cc2:	2903      	cmp	r1, #3
     cc4:	d005      	beq.n	cd2 <_sercom_get_default_pad+0xe6>
	return 0;
     cc6:	2000      	movs	r0, #0
     cc8:	e79e      	b.n	c08 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     cca:	481e      	ldr	r0, [pc, #120]	; (d44 <_sercom_get_default_pad+0x158>)
     ccc:	e79c      	b.n	c08 <_sercom_get_default_pad+0x1c>
     cce:	481e      	ldr	r0, [pc, #120]	; (d48 <_sercom_get_default_pad+0x15c>)
     cd0:	e79a      	b.n	c08 <_sercom_get_default_pad+0x1c>
     cd2:	481e      	ldr	r0, [pc, #120]	; (d4c <_sercom_get_default_pad+0x160>)
     cd4:	e798      	b.n	c08 <_sercom_get_default_pad+0x1c>
     cd6:	481e      	ldr	r0, [pc, #120]	; (d50 <_sercom_get_default_pad+0x164>)
     cd8:	e796      	b.n	c08 <_sercom_get_default_pad+0x1c>
     cda:	2003      	movs	r0, #3
     cdc:	e794      	b.n	c08 <_sercom_get_default_pad+0x1c>
     cde:	481d      	ldr	r0, [pc, #116]	; (d54 <_sercom_get_default_pad+0x168>)
     ce0:	e792      	b.n	c08 <_sercom_get_default_pad+0x1c>
     ce2:	481d      	ldr	r0, [pc, #116]	; (d58 <_sercom_get_default_pad+0x16c>)
     ce4:	e790      	b.n	c08 <_sercom_get_default_pad+0x1c>
     ce6:	481d      	ldr	r0, [pc, #116]	; (d5c <_sercom_get_default_pad+0x170>)
     ce8:	e78e      	b.n	c08 <_sercom_get_default_pad+0x1c>
     cea:	481d      	ldr	r0, [pc, #116]	; (d60 <_sercom_get_default_pad+0x174>)
     cec:	e78c      	b.n	c08 <_sercom_get_default_pad+0x1c>
     cee:	46c0      	nop			; (mov r8, r8)
     cf0:	42001000 	.word	0x42001000
     cf4:	42001800 	.word	0x42001800
     cf8:	42001c00 	.word	0x42001c00
     cfc:	42001400 	.word	0x42001400
     d00:	42000800 	.word	0x42000800
     d04:	42000c00 	.word	0x42000c00
     d08:	00050003 	.word	0x00050003
     d0c:	00060003 	.word	0x00060003
     d10:	00070003 	.word	0x00070003
     d14:	00010003 	.word	0x00010003
     d18:	001e0003 	.word	0x001e0003
     d1c:	001f0003 	.word	0x001f0003
     d20:	00090003 	.word	0x00090003
     d24:	000a0003 	.word	0x000a0003
     d28:	000b0003 	.word	0x000b0003
     d2c:	00110003 	.word	0x00110003
     d30:	00120003 	.word	0x00120003
     d34:	00130003 	.word	0x00130003
     d38:	000d0003 	.word	0x000d0003
     d3c:	000e0003 	.word	0x000e0003
     d40:	000f0003 	.word	0x000f0003
     d44:	00170003 	.word	0x00170003
     d48:	00180003 	.word	0x00180003
     d4c:	00190003 	.word	0x00190003
     d50:	00040003 	.word	0x00040003
     d54:	00080003 	.word	0x00080003
     d58:	00100003 	.word	0x00100003
     d5c:	000c0003 	.word	0x000c0003
     d60:	00160003 	.word	0x00160003

00000d64 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     d64:	b530      	push	{r4, r5, lr}
     d66:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     d68:	4b0b      	ldr	r3, [pc, #44]	; (d98 <_sercom_get_sercom_inst_index+0x34>)
     d6a:	466a      	mov	r2, sp
     d6c:	cb32      	ldmia	r3!, {r1, r4, r5}
     d6e:	c232      	stmia	r2!, {r1, r4, r5}
     d70:	cb32      	ldmia	r3!, {r1, r4, r5}
     d72:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     d74:	9b00      	ldr	r3, [sp, #0]
     d76:	4283      	cmp	r3, r0
     d78:	d00b      	beq.n	d92 <_sercom_get_sercom_inst_index+0x2e>
     d7a:	2301      	movs	r3, #1
     d7c:	009a      	lsls	r2, r3, #2
     d7e:	4669      	mov	r1, sp
     d80:	5852      	ldr	r2, [r2, r1]
     d82:	4282      	cmp	r2, r0
     d84:	d006      	beq.n	d94 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     d86:	3301      	adds	r3, #1
     d88:	2b06      	cmp	r3, #6
     d8a:	d1f7      	bne.n	d7c <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     d8c:	2000      	movs	r0, #0
}
     d8e:	b007      	add	sp, #28
     d90:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     d92:	2300      	movs	r3, #0
			return i;
     d94:	b2d8      	uxtb	r0, r3
     d96:	e7fa      	b.n	d8e <_sercom_get_sercom_inst_index+0x2a>
     d98:	000049e0 	.word	0x000049e0

00000d9c <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     d9c:	4770      	bx	lr
	...

00000da0 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     da0:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     da2:	4b0a      	ldr	r3, [pc, #40]	; (dcc <_sercom_set_handler+0x2c>)
     da4:	781b      	ldrb	r3, [r3, #0]
     da6:	2b00      	cmp	r3, #0
     da8:	d10c      	bne.n	dc4 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     daa:	4f09      	ldr	r7, [pc, #36]	; (dd0 <_sercom_set_handler+0x30>)
     dac:	4e09      	ldr	r6, [pc, #36]	; (dd4 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     dae:	4d0a      	ldr	r5, [pc, #40]	; (dd8 <_sercom_set_handler+0x38>)
     db0:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     db2:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     db4:	195a      	adds	r2, r3, r5
     db6:	6014      	str	r4, [r2, #0]
     db8:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     dba:	2b18      	cmp	r3, #24
     dbc:	d1f9      	bne.n	db2 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
     dbe:	2201      	movs	r2, #1
     dc0:	4b02      	ldr	r3, [pc, #8]	; (dcc <_sercom_set_handler+0x2c>)
     dc2:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     dc4:	0080      	lsls	r0, r0, #2
     dc6:	4b02      	ldr	r3, [pc, #8]	; (dd0 <_sercom_set_handler+0x30>)
     dc8:	50c1      	str	r1, [r0, r3]
}
     dca:	bdf0      	pop	{r4, r5, r6, r7, pc}
     dcc:	20000262 	.word	0x20000262
     dd0:	20000264 	.word	0x20000264
     dd4:	00000d9d 	.word	0x00000d9d
     dd8:	200002a8 	.word	0x200002a8

00000ddc <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     ddc:	b500      	push	{lr}
     dde:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     de0:	2309      	movs	r3, #9
     de2:	466a      	mov	r2, sp
     de4:	7013      	strb	r3, [r2, #0]
     de6:	3301      	adds	r3, #1
     de8:	7053      	strb	r3, [r2, #1]
     dea:	3301      	adds	r3, #1
     dec:	7093      	strb	r3, [r2, #2]
     dee:	3301      	adds	r3, #1
     df0:	70d3      	strb	r3, [r2, #3]
     df2:	3301      	adds	r3, #1
     df4:	7113      	strb	r3, [r2, #4]
     df6:	3301      	adds	r3, #1
     df8:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     dfa:	4b03      	ldr	r3, [pc, #12]	; (e08 <_sercom_get_interrupt_vector+0x2c>)
     dfc:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     dfe:	466b      	mov	r3, sp
     e00:	5618      	ldrsb	r0, [r3, r0]
}
     e02:	b003      	add	sp, #12
     e04:	bd00      	pop	{pc}
     e06:	46c0      	nop			; (mov r8, r8)
     e08:	00000d65 	.word	0x00000d65

00000e0c <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     e0c:	b510      	push	{r4, lr}
     e0e:	4b02      	ldr	r3, [pc, #8]	; (e18 <SERCOM0_Handler+0xc>)
     e10:	681b      	ldr	r3, [r3, #0]
     e12:	2000      	movs	r0, #0
     e14:	4798      	blx	r3
     e16:	bd10      	pop	{r4, pc}
     e18:	20000264 	.word	0x20000264

00000e1c <SERCOM1_Handler>:
     e1c:	b510      	push	{r4, lr}
     e1e:	4b02      	ldr	r3, [pc, #8]	; (e28 <SERCOM1_Handler+0xc>)
     e20:	685b      	ldr	r3, [r3, #4]
     e22:	2001      	movs	r0, #1
     e24:	4798      	blx	r3
     e26:	bd10      	pop	{r4, pc}
     e28:	20000264 	.word	0x20000264

00000e2c <SERCOM2_Handler>:
     e2c:	b510      	push	{r4, lr}
     e2e:	4b02      	ldr	r3, [pc, #8]	; (e38 <SERCOM2_Handler+0xc>)
     e30:	689b      	ldr	r3, [r3, #8]
     e32:	2002      	movs	r0, #2
     e34:	4798      	blx	r3
     e36:	bd10      	pop	{r4, pc}
     e38:	20000264 	.word	0x20000264

00000e3c <SERCOM3_Handler>:
     e3c:	b510      	push	{r4, lr}
     e3e:	4b02      	ldr	r3, [pc, #8]	; (e48 <SERCOM3_Handler+0xc>)
     e40:	68db      	ldr	r3, [r3, #12]
     e42:	2003      	movs	r0, #3
     e44:	4798      	blx	r3
     e46:	bd10      	pop	{r4, pc}
     e48:	20000264 	.word	0x20000264

00000e4c <SERCOM4_Handler>:
     e4c:	b510      	push	{r4, lr}
     e4e:	4b02      	ldr	r3, [pc, #8]	; (e58 <SERCOM4_Handler+0xc>)
     e50:	691b      	ldr	r3, [r3, #16]
     e52:	2004      	movs	r0, #4
     e54:	4798      	blx	r3
     e56:	bd10      	pop	{r4, pc}
     e58:	20000264 	.word	0x20000264

00000e5c <SERCOM5_Handler>:
     e5c:	b510      	push	{r4, lr}
     e5e:	4b02      	ldr	r3, [pc, #8]	; (e68 <SERCOM5_Handler+0xc>)
     e60:	695b      	ldr	r3, [r3, #20]
     e62:	2005      	movs	r0, #5
     e64:	4798      	blx	r3
     e66:	bd10      	pop	{r4, pc}
     e68:	20000264 	.word	0x20000264

00000e6c <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
     e6e:	46de      	mov	lr, fp
     e70:	4657      	mov	r7, sl
     e72:	464e      	mov	r6, r9
     e74:	4645      	mov	r5, r8
     e76:	b5e0      	push	{r5, r6, r7, lr}
     e78:	b091      	sub	sp, #68	; 0x44
     e7a:	0005      	movs	r5, r0
     e7c:	000c      	movs	r4, r1
     e7e:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     e80:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     e82:	0008      	movs	r0, r1
     e84:	4bba      	ldr	r3, [pc, #744]	; (1170 <usart_init+0x304>)
     e86:	4798      	blx	r3
     e88:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     e8a:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     e8c:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     e8e:	07db      	lsls	r3, r3, #31
     e90:	d506      	bpl.n	ea0 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     e92:	b011      	add	sp, #68	; 0x44
     e94:	bc3c      	pop	{r2, r3, r4, r5}
     e96:	4690      	mov	r8, r2
     e98:	4699      	mov	r9, r3
     e9a:	46a2      	mov	sl, r4
     e9c:	46ab      	mov	fp, r5
     e9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     ea0:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
     ea2:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     ea4:	079b      	lsls	r3, r3, #30
     ea6:	d4f4      	bmi.n	e92 <usart_init+0x26>
     ea8:	49b2      	ldr	r1, [pc, #712]	; (1174 <usart_init+0x308>)
     eaa:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     eac:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     eae:	2301      	movs	r3, #1
     eb0:	40bb      	lsls	r3, r7
     eb2:	4303      	orrs	r3, r0
     eb4:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     eb6:	a90f      	add	r1, sp, #60	; 0x3c
     eb8:	272d      	movs	r7, #45	; 0x2d
     eba:	5df3      	ldrb	r3, [r6, r7]
     ebc:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     ebe:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     ec0:	b2d3      	uxtb	r3, r2
     ec2:	9302      	str	r3, [sp, #8]
     ec4:	0018      	movs	r0, r3
     ec6:	4bac      	ldr	r3, [pc, #688]	; (1178 <usart_init+0x30c>)
     ec8:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     eca:	9802      	ldr	r0, [sp, #8]
     ecc:	4bab      	ldr	r3, [pc, #684]	; (117c <usart_init+0x310>)
     ece:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     ed0:	5df0      	ldrb	r0, [r6, r7]
     ed2:	2100      	movs	r1, #0
     ed4:	4baa      	ldr	r3, [pc, #680]	; (1180 <usart_init+0x314>)
     ed6:	4798      	blx	r3
	module->character_size = config->character_size;
     ed8:	7af3      	ldrb	r3, [r6, #11]
     eda:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
     edc:	2324      	movs	r3, #36	; 0x24
     ede:	5cf3      	ldrb	r3, [r6, r3]
     ee0:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     ee2:	2325      	movs	r3, #37	; 0x25
     ee4:	5cf3      	ldrb	r3, [r6, r3]
     ee6:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
     ee8:	7ef3      	ldrb	r3, [r6, #27]
     eea:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     eec:	7f33      	ldrb	r3, [r6, #28]
     eee:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
     ef0:	682b      	ldr	r3, [r5, #0]
     ef2:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     ef4:	0018      	movs	r0, r3
     ef6:	4b9e      	ldr	r3, [pc, #632]	; (1170 <usart_init+0x304>)
     ef8:	4798      	blx	r3
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     efa:	3014      	adds	r0, #20
	uint16_t baud  = 0;
     efc:	2200      	movs	r2, #0
     efe:	230e      	movs	r3, #14
     f00:	a906      	add	r1, sp, #24
     f02:	468c      	mov	ip, r1
     f04:	4463      	add	r3, ip
     f06:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
     f08:	8a32      	ldrh	r2, [r6, #16]
     f0a:	9202      	str	r2, [sp, #8]
     f0c:	2380      	movs	r3, #128	; 0x80
     f0e:	01db      	lsls	r3, r3, #7
     f10:	429a      	cmp	r2, r3
     f12:	d100      	bne.n	f16 <usart_init+0xaa>
     f14:	e09a      	b.n	104c <usart_init+0x1e0>
     f16:	d90f      	bls.n	f38 <usart_init+0xcc>
     f18:	23c0      	movs	r3, #192	; 0xc0
     f1a:	01db      	lsls	r3, r3, #7
     f1c:	9a02      	ldr	r2, [sp, #8]
     f1e:	429a      	cmp	r2, r3
     f20:	d100      	bne.n	f24 <usart_init+0xb8>
     f22:	e08e      	b.n	1042 <usart_init+0x1d6>
     f24:	2380      	movs	r3, #128	; 0x80
     f26:	021b      	lsls	r3, r3, #8
     f28:	429a      	cmp	r2, r3
     f2a:	d000      	beq.n	f2e <usart_init+0xc2>
     f2c:	e11b      	b.n	1166 <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     f2e:	2303      	movs	r3, #3
     f30:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     f32:	2300      	movs	r3, #0
     f34:	9307      	str	r3, [sp, #28]
     f36:	e008      	b.n	f4a <usart_init+0xde>
	switch (config->sample_rate) {
     f38:	2380      	movs	r3, #128	; 0x80
     f3a:	019b      	lsls	r3, r3, #6
     f3c:	429a      	cmp	r2, r3
     f3e:	d000      	beq.n	f42 <usart_init+0xd6>
     f40:	e111      	b.n	1166 <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     f42:	2310      	movs	r3, #16
     f44:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     f46:	3b0f      	subs	r3, #15
     f48:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
     f4a:	6833      	ldr	r3, [r6, #0]
     f4c:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     f4e:	68f3      	ldr	r3, [r6, #12]
     f50:	469b      	mov	fp, r3
		config->sample_adjustment |
     f52:	6973      	ldr	r3, [r6, #20]
     f54:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     f56:	7e33      	ldrb	r3, [r6, #24]
     f58:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     f5a:	2326      	movs	r3, #38	; 0x26
     f5c:	5cf3      	ldrb	r3, [r6, r3]
     f5e:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     f60:	6873      	ldr	r3, [r6, #4]
     f62:	4699      	mov	r9, r3
	switch (transfer_mode)
     f64:	2b00      	cmp	r3, #0
     f66:	d100      	bne.n	f6a <usart_init+0xfe>
     f68:	e09c      	b.n	10a4 <usart_init+0x238>
     f6a:	2380      	movs	r3, #128	; 0x80
     f6c:	055b      	lsls	r3, r3, #21
     f6e:	4599      	cmp	r9, r3
     f70:	d100      	bne.n	f74 <usart_init+0x108>
     f72:	e080      	b.n	1076 <usart_init+0x20a>
	if(config->encoding_format_enable) {
     f74:	7e73      	ldrb	r3, [r6, #25]
     f76:	2b00      	cmp	r3, #0
     f78:	d002      	beq.n	f80 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     f7a:	7eb3      	ldrb	r3, [r6, #26]
     f7c:	4642      	mov	r2, r8
     f7e:	7393      	strb	r3, [r2, #14]
	usart_hw->BAUD.reg = baud;
     f80:	230e      	movs	r3, #14
     f82:	aa06      	add	r2, sp, #24
     f84:	4694      	mov	ip, r2
     f86:	4463      	add	r3, ip
     f88:	881b      	ldrh	r3, [r3, #0]
     f8a:	4642      	mov	r2, r8
     f8c:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
     f8e:	9b05      	ldr	r3, [sp, #20]
     f90:	465a      	mov	r2, fp
     f92:	4313      	orrs	r3, r2
     f94:	9a03      	ldr	r2, [sp, #12]
     f96:	4313      	orrs	r3, r2
     f98:	464a      	mov	r2, r9
     f9a:	4313      	orrs	r3, r2
     f9c:	9f02      	ldr	r7, [sp, #8]
     f9e:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     fa0:	9b04      	ldr	r3, [sp, #16]
     fa2:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
     fa4:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     fa6:	4653      	mov	r3, sl
     fa8:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
     faa:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
     fac:	2327      	movs	r3, #39	; 0x27
     fae:	5cf3      	ldrb	r3, [r6, r3]
     fb0:	2b00      	cmp	r3, #0
     fb2:	d101      	bne.n	fb8 <usart_init+0x14c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     fb4:	3304      	adds	r3, #4
     fb6:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     fb8:	7e73      	ldrb	r3, [r6, #25]
     fba:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     fbc:	7f32      	ldrb	r2, [r6, #28]
     fbe:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     fc0:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     fc2:	7f72      	ldrb	r2, [r6, #29]
     fc4:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     fc6:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     fc8:	2224      	movs	r2, #36	; 0x24
     fca:	5cb2      	ldrb	r2, [r6, r2]
     fcc:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     fce:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     fd0:	2225      	movs	r2, #37	; 0x25
     fd2:	5cb2      	ldrb	r2, [r6, r2]
     fd4:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     fd6:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
     fd8:	7ab1      	ldrb	r1, [r6, #10]
     fda:	7af2      	ldrb	r2, [r6, #11]
     fdc:	4311      	orrs	r1, r2
     fde:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
     fe0:	8933      	ldrh	r3, [r6, #8]
     fe2:	2bff      	cmp	r3, #255	; 0xff
     fe4:	d100      	bne.n	fe8 <usart_init+0x17c>
     fe6:	e081      	b.n	10ec <usart_init+0x280>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     fe8:	2280      	movs	r2, #128	; 0x80
     fea:	0452      	lsls	r2, r2, #17
     fec:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
     fee:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
     ff0:	232c      	movs	r3, #44	; 0x2c
     ff2:	5cf3      	ldrb	r3, [r6, r3]
     ff4:	2b00      	cmp	r3, #0
     ff6:	d103      	bne.n	1000 <usart_init+0x194>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     ff8:	4b62      	ldr	r3, [pc, #392]	; (1184 <usart_init+0x318>)
     ffa:	789b      	ldrb	r3, [r3, #2]
     ffc:	079b      	lsls	r3, r3, #30
     ffe:	d501      	bpl.n	1004 <usart_init+0x198>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    1000:	2380      	movs	r3, #128	; 0x80
    1002:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1004:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1006:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1008:	2b00      	cmp	r3, #0
    100a:	d1fc      	bne.n	1006 <usart_init+0x19a>
	usart_hw->CTRLB.reg = ctrlb;
    100c:	4643      	mov	r3, r8
    100e:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1010:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1012:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1014:	2b00      	cmp	r3, #0
    1016:	d1fc      	bne.n	1012 <usart_init+0x1a6>
	usart_hw->CTRLA.reg = ctrla;
    1018:	4643      	mov	r3, r8
    101a:	601f      	str	r7, [r3, #0]
    101c:	ab0e      	add	r3, sp, #56	; 0x38
    101e:	2280      	movs	r2, #128	; 0x80
    1020:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1022:	2200      	movs	r2, #0
    1024:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    1026:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1028:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    102a:	6b33      	ldr	r3, [r6, #48]	; 0x30
    102c:	930a      	str	r3, [sp, #40]	; 0x28
    102e:	6b73      	ldr	r3, [r6, #52]	; 0x34
    1030:	930b      	str	r3, [sp, #44]	; 0x2c
    1032:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    1034:	930c      	str	r3, [sp, #48]	; 0x30
    1036:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    1038:	9302      	str	r3, [sp, #8]
    103a:	930d      	str	r3, [sp, #52]	; 0x34
    103c:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    103e:	ae0a      	add	r6, sp, #40	; 0x28
    1040:	e063      	b.n	110a <usart_init+0x29e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1042:	2308      	movs	r3, #8
    1044:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1046:	3b07      	subs	r3, #7
    1048:	9307      	str	r3, [sp, #28]
    104a:	e77e      	b.n	f4a <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    104c:	6833      	ldr	r3, [r6, #0]
    104e:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    1050:	68f3      	ldr	r3, [r6, #12]
    1052:	469b      	mov	fp, r3
		config->sample_adjustment |
    1054:	6973      	ldr	r3, [r6, #20]
    1056:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1058:	7e33      	ldrb	r3, [r6, #24]
    105a:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    105c:	2326      	movs	r3, #38	; 0x26
    105e:	5cf3      	ldrb	r3, [r6, r3]
    1060:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    1062:	6873      	ldr	r3, [r6, #4]
    1064:	4699      	mov	r9, r3
	switch (transfer_mode)
    1066:	2b00      	cmp	r3, #0
    1068:	d018      	beq.n	109c <usart_init+0x230>
    106a:	2380      	movs	r3, #128	; 0x80
    106c:	055b      	lsls	r3, r3, #21
    106e:	4599      	cmp	r9, r3
    1070:	d001      	beq.n	1076 <usart_init+0x20a>
	enum status_code status_code = STATUS_OK;
    1072:	2000      	movs	r0, #0
    1074:	e025      	b.n	10c2 <usart_init+0x256>
			if (!config->use_external_clock) {
    1076:	2327      	movs	r3, #39	; 0x27
    1078:	5cf3      	ldrb	r3, [r6, r3]
    107a:	2b00      	cmp	r3, #0
    107c:	d000      	beq.n	1080 <usart_init+0x214>
    107e:	e779      	b.n	f74 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    1080:	6a33      	ldr	r3, [r6, #32]
    1082:	001f      	movs	r7, r3
    1084:	b2c0      	uxtb	r0, r0
    1086:	4b40      	ldr	r3, [pc, #256]	; (1188 <usart_init+0x31c>)
    1088:	4798      	blx	r3
    108a:	0001      	movs	r1, r0
    108c:	220e      	movs	r2, #14
    108e:	ab06      	add	r3, sp, #24
    1090:	469c      	mov	ip, r3
    1092:	4462      	add	r2, ip
    1094:	0038      	movs	r0, r7
    1096:	4b3d      	ldr	r3, [pc, #244]	; (118c <usart_init+0x320>)
    1098:	4798      	blx	r3
    109a:	e012      	b.n	10c2 <usart_init+0x256>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    109c:	2308      	movs	r3, #8
    109e:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    10a0:	2300      	movs	r3, #0
    10a2:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    10a4:	2327      	movs	r3, #39	; 0x27
    10a6:	5cf3      	ldrb	r3, [r6, r3]
    10a8:	2b00      	cmp	r3, #0
    10aa:	d00e      	beq.n	10ca <usart_init+0x25e>
				status_code =
    10ac:	9b06      	ldr	r3, [sp, #24]
    10ae:	9300      	str	r3, [sp, #0]
    10b0:	9b07      	ldr	r3, [sp, #28]
    10b2:	220e      	movs	r2, #14
    10b4:	a906      	add	r1, sp, #24
    10b6:	468c      	mov	ip, r1
    10b8:	4462      	add	r2, ip
    10ba:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    10bc:	6a30      	ldr	r0, [r6, #32]
    10be:	4f34      	ldr	r7, [pc, #208]	; (1190 <usart_init+0x324>)
    10c0:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    10c2:	2800      	cmp	r0, #0
    10c4:	d000      	beq.n	10c8 <usart_init+0x25c>
    10c6:	e6e4      	b.n	e92 <usart_init+0x26>
    10c8:	e754      	b.n	f74 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    10ca:	6a33      	ldr	r3, [r6, #32]
    10cc:	001f      	movs	r7, r3
    10ce:	b2c0      	uxtb	r0, r0
    10d0:	4b2d      	ldr	r3, [pc, #180]	; (1188 <usart_init+0x31c>)
    10d2:	4798      	blx	r3
    10d4:	0001      	movs	r1, r0
				status_code =
    10d6:	9b06      	ldr	r3, [sp, #24]
    10d8:	9300      	str	r3, [sp, #0]
    10da:	9b07      	ldr	r3, [sp, #28]
    10dc:	220e      	movs	r2, #14
    10de:	a806      	add	r0, sp, #24
    10e0:	4684      	mov	ip, r0
    10e2:	4462      	add	r2, ip
    10e4:	0038      	movs	r0, r7
    10e6:	4f2a      	ldr	r7, [pc, #168]	; (1190 <usart_init+0x324>)
    10e8:	47b8      	blx	r7
    10ea:	e7ea      	b.n	10c2 <usart_init+0x256>
		if(config->lin_slave_enable) {
    10ec:	7ef3      	ldrb	r3, [r6, #27]
    10ee:	2b00      	cmp	r3, #0
    10f0:	d100      	bne.n	10f4 <usart_init+0x288>
    10f2:	e77d      	b.n	ff0 <usart_init+0x184>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    10f4:	2380      	movs	r3, #128	; 0x80
    10f6:	04db      	lsls	r3, r3, #19
    10f8:	431f      	orrs	r7, r3
    10fa:	e779      	b.n	ff0 <usart_init+0x184>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    10fc:	0020      	movs	r0, r4
    10fe:	4b25      	ldr	r3, [pc, #148]	; (1194 <usart_init+0x328>)
    1100:	4798      	blx	r3
    1102:	e007      	b.n	1114 <usart_init+0x2a8>
    1104:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    1106:	2f04      	cmp	r7, #4
    1108:	d00d      	beq.n	1126 <usart_init+0x2ba>
    110a:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    110c:	00bb      	lsls	r3, r7, #2
    110e:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    1110:	2800      	cmp	r0, #0
    1112:	d0f3      	beq.n	10fc <usart_init+0x290>
		if (current_pinmux != PINMUX_UNUSED) {
    1114:	1c43      	adds	r3, r0, #1
    1116:	d0f5      	beq.n	1104 <usart_init+0x298>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1118:	a90e      	add	r1, sp, #56	; 0x38
    111a:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    111c:	0c00      	lsrs	r0, r0, #16
    111e:	b2c0      	uxtb	r0, r0
    1120:	4b1d      	ldr	r3, [pc, #116]	; (1198 <usart_init+0x32c>)
    1122:	4798      	blx	r3
    1124:	e7ee      	b.n	1104 <usart_init+0x298>
		module->callback[i]            = NULL;
    1126:	2300      	movs	r3, #0
    1128:	60eb      	str	r3, [r5, #12]
    112a:	612b      	str	r3, [r5, #16]
    112c:	616b      	str	r3, [r5, #20]
    112e:	61ab      	str	r3, [r5, #24]
    1130:	61eb      	str	r3, [r5, #28]
    1132:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    1134:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    1136:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    1138:	2200      	movs	r2, #0
    113a:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    113c:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    113e:	3330      	adds	r3, #48	; 0x30
    1140:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    1142:	3301      	adds	r3, #1
    1144:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    1146:	3301      	adds	r3, #1
    1148:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    114a:	3301      	adds	r3, #1
    114c:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    114e:	6828      	ldr	r0, [r5, #0]
    1150:	4b07      	ldr	r3, [pc, #28]	; (1170 <usart_init+0x304>)
    1152:	4798      	blx	r3
    1154:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    1156:	4911      	ldr	r1, [pc, #68]	; (119c <usart_init+0x330>)
    1158:	4b11      	ldr	r3, [pc, #68]	; (11a0 <usart_init+0x334>)
    115a:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    115c:	00a4      	lsls	r4, r4, #2
    115e:	4b11      	ldr	r3, [pc, #68]	; (11a4 <usart_init+0x338>)
    1160:	50e5      	str	r5, [r4, r3]
	return status_code;
    1162:	2000      	movs	r0, #0
    1164:	e695      	b.n	e92 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1166:	2310      	movs	r3, #16
    1168:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    116a:	2300      	movs	r3, #0
    116c:	9307      	str	r3, [sp, #28]
    116e:	e6ec      	b.n	f4a <usart_init+0xde>
    1170:	00000d65 	.word	0x00000d65
    1174:	40000400 	.word	0x40000400
    1178:	00001a11 	.word	0x00001a11
    117c:	00001985 	.word	0x00001985
    1180:	00000ba1 	.word	0x00000ba1
    1184:	41002000 	.word	0x41002000
    1188:	00001a2d 	.word	0x00001a2d
    118c:	00000ae3 	.word	0x00000ae3
    1190:	00000b0d 	.word	0x00000b0d
    1194:	00000bed 	.word	0x00000bed
    1198:	00001b09 	.word	0x00001b09
    119c:	00001239 	.word	0x00001239
    11a0:	00000da1 	.word	0x00000da1
    11a4:	200002a8 	.word	0x200002a8

000011a8 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    11a8:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    11aa:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    11ac:	2a00      	cmp	r2, #0
    11ae:	d101      	bne.n	11b4 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    11b0:	0018      	movs	r0, r3
    11b2:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    11b4:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    11b6:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    11b8:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    11ba:	2a00      	cmp	r2, #0
    11bc:	d1f8      	bne.n	11b0 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    11be:	6802      	ldr	r2, [r0, #0]
	usart_hw->DATA.reg = tx_data;
    11c0:	8511      	strh	r1, [r2, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    11c2:	2102      	movs	r1, #2
    11c4:	7e13      	ldrb	r3, [r2, #24]
    11c6:	420b      	tst	r3, r1
    11c8:	d0fc      	beq.n	11c4 <usart_write_wait+0x1c>
	return STATUS_OK;
    11ca:	2300      	movs	r3, #0
    11cc:	e7f0      	b.n	11b0 <usart_write_wait+0x8>

000011ce <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    11ce:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    11d0:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    11d2:	2a00      	cmp	r2, #0
    11d4:	d101      	bne.n	11da <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    11d6:	0018      	movs	r0, r3
    11d8:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    11da:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    11dc:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    11de:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    11e0:	2a00      	cmp	r2, #0
    11e2:	d1f8      	bne.n	11d6 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    11e4:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    11e6:	7e10      	ldrb	r0, [r2, #24]
    11e8:	0740      	lsls	r0, r0, #29
    11ea:	d5f4      	bpl.n	11d6 <usart_read_wait+0x8>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    11ec:	8b53      	ldrh	r3, [r2, #26]
    11ee:	b2db      	uxtb	r3, r3
	if (error_code) {
    11f0:	0698      	lsls	r0, r3, #26
    11f2:	d01d      	beq.n	1230 <usart_read_wait+0x62>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    11f4:	0798      	lsls	r0, r3, #30
    11f6:	d503      	bpl.n	1200 <usart_read_wait+0x32>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    11f8:	2302      	movs	r3, #2
    11fa:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    11fc:	3318      	adds	r3, #24
    11fe:	e7ea      	b.n	11d6 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1200:	0758      	lsls	r0, r3, #29
    1202:	d503      	bpl.n	120c <usart_read_wait+0x3e>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1204:	2304      	movs	r3, #4
    1206:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    1208:	331a      	adds	r3, #26
    120a:	e7e4      	b.n	11d6 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    120c:	07d8      	lsls	r0, r3, #31
    120e:	d503      	bpl.n	1218 <usart_read_wait+0x4a>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1210:	2301      	movs	r3, #1
    1212:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    1214:	3312      	adds	r3, #18
    1216:	e7de      	b.n	11d6 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    1218:	06d8      	lsls	r0, r3, #27
    121a:	d503      	bpl.n	1224 <usart_read_wait+0x56>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    121c:	2310      	movs	r3, #16
    121e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    1220:	3332      	adds	r3, #50	; 0x32
    1222:	e7d8      	b.n	11d6 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    1224:	069b      	lsls	r3, r3, #26
    1226:	d503      	bpl.n	1230 <usart_read_wait+0x62>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1228:	2320      	movs	r3, #32
    122a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    122c:	3321      	adds	r3, #33	; 0x21
    122e:	e7d2      	b.n	11d6 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    1230:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    1232:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    1234:	2300      	movs	r3, #0
    1236:	e7ce      	b.n	11d6 <usart_read_wait+0x8>

00001238 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    1238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    123a:	0080      	lsls	r0, r0, #2
    123c:	4b62      	ldr	r3, [pc, #392]	; (13c8 <_usart_interrupt_handler+0x190>)
    123e:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    1240:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1242:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    1244:	2b00      	cmp	r3, #0
    1246:	d1fc      	bne.n	1242 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    1248:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    124a:	7da6      	ldrb	r6, [r4, #22]
    124c:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    124e:	2330      	movs	r3, #48	; 0x30
    1250:	5ceb      	ldrb	r3, [r5, r3]
    1252:	2231      	movs	r2, #49	; 0x31
    1254:	5caf      	ldrb	r7, [r5, r2]
    1256:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    1258:	07f3      	lsls	r3, r6, #31
    125a:	d522      	bpl.n	12a2 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    125c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    125e:	b29b      	uxth	r3, r3
    1260:	2b00      	cmp	r3, #0
    1262:	d01c      	beq.n	129e <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1264:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    1266:	7813      	ldrb	r3, [r2, #0]
    1268:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    126a:	1c51      	adds	r1, r2, #1
    126c:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    126e:	7969      	ldrb	r1, [r5, #5]
    1270:	2901      	cmp	r1, #1
    1272:	d00e      	beq.n	1292 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1274:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    1276:	05db      	lsls	r3, r3, #23
    1278:	0ddb      	lsrs	r3, r3, #23
    127a:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    127c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    127e:	3b01      	subs	r3, #1
    1280:	b29b      	uxth	r3, r3
    1282:	85eb      	strh	r3, [r5, #46]	; 0x2e
    1284:	2b00      	cmp	r3, #0
    1286:	d10c      	bne.n	12a2 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1288:	3301      	adds	r3, #1
    128a:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    128c:	3301      	adds	r3, #1
    128e:	75a3      	strb	r3, [r4, #22]
    1290:	e007      	b.n	12a2 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    1292:	7851      	ldrb	r1, [r2, #1]
    1294:	0209      	lsls	r1, r1, #8
    1296:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    1298:	3202      	adds	r2, #2
    129a:	62aa      	str	r2, [r5, #40]	; 0x28
    129c:	e7eb      	b.n	1276 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    129e:	2301      	movs	r3, #1
    12a0:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    12a2:	07b3      	lsls	r3, r6, #30
    12a4:	d506      	bpl.n	12b4 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    12a6:	2302      	movs	r3, #2
    12a8:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    12aa:	2200      	movs	r2, #0
    12ac:	3331      	adds	r3, #49	; 0x31
    12ae:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    12b0:	07fb      	lsls	r3, r7, #31
    12b2:	d41a      	bmi.n	12ea <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    12b4:	0773      	lsls	r3, r6, #29
    12b6:	d565      	bpl.n	1384 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    12b8:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    12ba:	b29b      	uxth	r3, r3
    12bc:	2b00      	cmp	r3, #0
    12be:	d05f      	beq.n	1380 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    12c0:	8b63      	ldrh	r3, [r4, #26]
    12c2:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    12c4:	071a      	lsls	r2, r3, #28
    12c6:	d414      	bmi.n	12f2 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    12c8:	223f      	movs	r2, #63	; 0x3f
    12ca:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    12cc:	2b00      	cmp	r3, #0
    12ce:	d034      	beq.n	133a <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    12d0:	079a      	lsls	r2, r3, #30
    12d2:	d511      	bpl.n	12f8 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    12d4:	221a      	movs	r2, #26
    12d6:	2332      	movs	r3, #50	; 0x32
    12d8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    12da:	3b30      	subs	r3, #48	; 0x30
    12dc:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    12de:	077b      	lsls	r3, r7, #29
    12e0:	d550      	bpl.n	1384 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    12e2:	0028      	movs	r0, r5
    12e4:	696b      	ldr	r3, [r5, #20]
    12e6:	4798      	blx	r3
    12e8:	e04c      	b.n	1384 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    12ea:	0028      	movs	r0, r5
    12ec:	68eb      	ldr	r3, [r5, #12]
    12ee:	4798      	blx	r3
    12f0:	e7e0      	b.n	12b4 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    12f2:	2237      	movs	r2, #55	; 0x37
    12f4:	4013      	ands	r3, r2
    12f6:	e7e9      	b.n	12cc <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    12f8:	075a      	lsls	r2, r3, #29
    12fa:	d505      	bpl.n	1308 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    12fc:	221e      	movs	r2, #30
    12fe:	2332      	movs	r3, #50	; 0x32
    1300:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1302:	3b2e      	subs	r3, #46	; 0x2e
    1304:	8363      	strh	r3, [r4, #26]
    1306:	e7ea      	b.n	12de <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1308:	07da      	lsls	r2, r3, #31
    130a:	d505      	bpl.n	1318 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    130c:	2213      	movs	r2, #19
    130e:	2332      	movs	r3, #50	; 0x32
    1310:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1312:	3b31      	subs	r3, #49	; 0x31
    1314:	8363      	strh	r3, [r4, #26]
    1316:	e7e2      	b.n	12de <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    1318:	06da      	lsls	r2, r3, #27
    131a:	d505      	bpl.n	1328 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    131c:	2242      	movs	r2, #66	; 0x42
    131e:	2332      	movs	r3, #50	; 0x32
    1320:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1322:	3b22      	subs	r3, #34	; 0x22
    1324:	8363      	strh	r3, [r4, #26]
    1326:	e7da      	b.n	12de <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    1328:	2220      	movs	r2, #32
    132a:	421a      	tst	r2, r3
    132c:	d0d7      	beq.n	12de <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    132e:	3221      	adds	r2, #33	; 0x21
    1330:	2332      	movs	r3, #50	; 0x32
    1332:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1334:	3b12      	subs	r3, #18
    1336:	8363      	strh	r3, [r4, #26]
    1338:	e7d1      	b.n	12de <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    133a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    133c:	05db      	lsls	r3, r3, #23
    133e:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    1340:	b2da      	uxtb	r2, r3
    1342:	6a69      	ldr	r1, [r5, #36]	; 0x24
    1344:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    1346:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    1348:	1c51      	adds	r1, r2, #1
    134a:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    134c:	7969      	ldrb	r1, [r5, #5]
    134e:	2901      	cmp	r1, #1
    1350:	d010      	beq.n	1374 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    1352:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1354:	3b01      	subs	r3, #1
    1356:	b29b      	uxth	r3, r3
    1358:	85ab      	strh	r3, [r5, #44]	; 0x2c
    135a:	2b00      	cmp	r3, #0
    135c:	d112      	bne.n	1384 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    135e:	3304      	adds	r3, #4
    1360:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    1362:	2200      	movs	r2, #0
    1364:	332e      	adds	r3, #46	; 0x2e
    1366:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    1368:	07bb      	lsls	r3, r7, #30
    136a:	d50b      	bpl.n	1384 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    136c:	0028      	movs	r0, r5
    136e:	692b      	ldr	r3, [r5, #16]
    1370:	4798      	blx	r3
    1372:	e007      	b.n	1384 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    1374:	0a1b      	lsrs	r3, r3, #8
    1376:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    1378:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    137a:	3301      	adds	r3, #1
    137c:	626b      	str	r3, [r5, #36]	; 0x24
    137e:	e7e8      	b.n	1352 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1380:	2304      	movs	r3, #4
    1382:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    1384:	06f3      	lsls	r3, r6, #27
    1386:	d504      	bpl.n	1392 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    1388:	2310      	movs	r3, #16
    138a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    138c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    138e:	06fb      	lsls	r3, r7, #27
    1390:	d40e      	bmi.n	13b0 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    1392:	06b3      	lsls	r3, r6, #26
    1394:	d504      	bpl.n	13a0 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    1396:	2320      	movs	r3, #32
    1398:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    139a:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    139c:	073b      	lsls	r3, r7, #28
    139e:	d40b      	bmi.n	13b8 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    13a0:	0733      	lsls	r3, r6, #28
    13a2:	d504      	bpl.n	13ae <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    13a4:	2308      	movs	r3, #8
    13a6:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    13a8:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    13aa:	06bb      	lsls	r3, r7, #26
    13ac:	d408      	bmi.n	13c0 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    13ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    13b0:	0028      	movs	r0, r5
    13b2:	69eb      	ldr	r3, [r5, #28]
    13b4:	4798      	blx	r3
    13b6:	e7ec      	b.n	1392 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    13b8:	0028      	movs	r0, r5
    13ba:	69ab      	ldr	r3, [r5, #24]
    13bc:	4798      	blx	r3
    13be:	e7ef      	b.n	13a0 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    13c0:	6a2b      	ldr	r3, [r5, #32]
    13c2:	0028      	movs	r0, r5
    13c4:	4798      	blx	r3
}
    13c6:	e7f2      	b.n	13ae <_usart_interrupt_handler+0x176>
    13c8:	200002a8 	.word	0x200002a8

000013cc <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    13cc:	b510      	push	{r4, lr}
	switch (clock_source) {
    13ce:	2808      	cmp	r0, #8
    13d0:	d803      	bhi.n	13da <system_clock_source_get_hz+0xe>
    13d2:	0080      	lsls	r0, r0, #2
    13d4:	4b1c      	ldr	r3, [pc, #112]	; (1448 <system_clock_source_get_hz+0x7c>)
    13d6:	581b      	ldr	r3, [r3, r0]
    13d8:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    13da:	2000      	movs	r0, #0
    13dc:	e032      	b.n	1444 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    13de:	4b1b      	ldr	r3, [pc, #108]	; (144c <system_clock_source_get_hz+0x80>)
    13e0:	6918      	ldr	r0, [r3, #16]
    13e2:	e02f      	b.n	1444 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    13e4:	4b1a      	ldr	r3, [pc, #104]	; (1450 <system_clock_source_get_hz+0x84>)
    13e6:	6a1b      	ldr	r3, [r3, #32]
    13e8:	059b      	lsls	r3, r3, #22
    13ea:	0f9b      	lsrs	r3, r3, #30
    13ec:	4819      	ldr	r0, [pc, #100]	; (1454 <system_clock_source_get_hz+0x88>)
    13ee:	40d8      	lsrs	r0, r3
    13f0:	e028      	b.n	1444 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    13f2:	4b16      	ldr	r3, [pc, #88]	; (144c <system_clock_source_get_hz+0x80>)
    13f4:	6958      	ldr	r0, [r3, #20]
    13f6:	e025      	b.n	1444 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    13f8:	4b14      	ldr	r3, [pc, #80]	; (144c <system_clock_source_get_hz+0x80>)
    13fa:	681b      	ldr	r3, [r3, #0]
			return 0;
    13fc:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    13fe:	079b      	lsls	r3, r3, #30
    1400:	d520      	bpl.n	1444 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1402:	4913      	ldr	r1, [pc, #76]	; (1450 <system_clock_source_get_hz+0x84>)
    1404:	2210      	movs	r2, #16
    1406:	68cb      	ldr	r3, [r1, #12]
    1408:	421a      	tst	r2, r3
    140a:	d0fc      	beq.n	1406 <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    140c:	4b0f      	ldr	r3, [pc, #60]	; (144c <system_clock_source_get_hz+0x80>)
    140e:	681a      	ldr	r2, [r3, #0]
    1410:	2324      	movs	r3, #36	; 0x24
    1412:	4013      	ands	r3, r2
    1414:	2b04      	cmp	r3, #4
    1416:	d001      	beq.n	141c <system_clock_source_get_hz+0x50>
			return 48000000UL;
    1418:	480f      	ldr	r0, [pc, #60]	; (1458 <system_clock_source_get_hz+0x8c>)
    141a:	e013      	b.n	1444 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    141c:	2000      	movs	r0, #0
    141e:	4b0f      	ldr	r3, [pc, #60]	; (145c <system_clock_source_get_hz+0x90>)
    1420:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    1422:	4b0a      	ldr	r3, [pc, #40]	; (144c <system_clock_source_get_hz+0x80>)
    1424:	689b      	ldr	r3, [r3, #8]
    1426:	041b      	lsls	r3, r3, #16
    1428:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    142a:	4358      	muls	r0, r3
    142c:	e00a      	b.n	1444 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    142e:	2350      	movs	r3, #80	; 0x50
    1430:	4a07      	ldr	r2, [pc, #28]	; (1450 <system_clock_source_get_hz+0x84>)
    1432:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    1434:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1436:	075b      	lsls	r3, r3, #29
    1438:	d504      	bpl.n	1444 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    143a:	4b04      	ldr	r3, [pc, #16]	; (144c <system_clock_source_get_hz+0x80>)
    143c:	68d8      	ldr	r0, [r3, #12]
    143e:	e001      	b.n	1444 <system_clock_source_get_hz+0x78>
		return 32768UL;
    1440:	2080      	movs	r0, #128	; 0x80
    1442:	0200      	lsls	r0, r0, #8
	}
}
    1444:	bd10      	pop	{r4, pc}
    1446:	46c0      	nop			; (mov r8, r8)
    1448:	000049f8 	.word	0x000049f8
    144c:	2000027c 	.word	0x2000027c
    1450:	40000800 	.word	0x40000800
    1454:	007a1200 	.word	0x007a1200
    1458:	02dc6c00 	.word	0x02dc6c00
    145c:	00001a2d 	.word	0x00001a2d

00001460 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1460:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1462:	490c      	ldr	r1, [pc, #48]	; (1494 <system_clock_source_osc8m_set_config+0x34>)
    1464:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    1466:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1468:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    146a:	7840      	ldrb	r0, [r0, #1]
    146c:	2201      	movs	r2, #1
    146e:	4010      	ands	r0, r2
    1470:	0180      	lsls	r0, r0, #6
    1472:	2640      	movs	r6, #64	; 0x40
    1474:	43b3      	bics	r3, r6
    1476:	4303      	orrs	r3, r0
    1478:	402a      	ands	r2, r5
    147a:	01d2      	lsls	r2, r2, #7
    147c:	2080      	movs	r0, #128	; 0x80
    147e:	4383      	bics	r3, r0
    1480:	4313      	orrs	r3, r2
    1482:	2203      	movs	r2, #3
    1484:	4022      	ands	r2, r4
    1486:	0212      	lsls	r2, r2, #8
    1488:	4803      	ldr	r0, [pc, #12]	; (1498 <system_clock_source_osc8m_set_config+0x38>)
    148a:	4003      	ands	r3, r0
    148c:	4313      	orrs	r3, r2
    148e:	620b      	str	r3, [r1, #32]
}
    1490:	bd70      	pop	{r4, r5, r6, pc}
    1492:	46c0      	nop			; (mov r8, r8)
    1494:	40000800 	.word	0x40000800
    1498:	fffffcff 	.word	0xfffffcff

0000149c <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    149c:	b5f0      	push	{r4, r5, r6, r7, lr}
    149e:	46de      	mov	lr, fp
    14a0:	4657      	mov	r7, sl
    14a2:	464e      	mov	r6, r9
    14a4:	4645      	mov	r5, r8
    14a6:	b5e0      	push	{r5, r6, r7, lr}
    14a8:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    14aa:	4b26      	ldr	r3, [pc, #152]	; (1544 <system_clock_source_xosc32k_set_config+0xa8>)
    14ac:	469b      	mov	fp, r3
    14ae:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    14b0:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    14b2:	7800      	ldrb	r0, [r0, #0]
    14b4:	4242      	negs	r2, r0
    14b6:	4142      	adcs	r2, r0
    14b8:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    14ba:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    14bc:	78ca      	ldrb	r2, [r1, #3]
    14be:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    14c0:	790a      	ldrb	r2, [r1, #4]
    14c2:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    14c4:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    14c6:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    14c8:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    14ca:	688a      	ldr	r2, [r1, #8]
    14cc:	491e      	ldr	r1, [pc, #120]	; (1548 <system_clock_source_xosc32k_set_config+0xac>)
    14ce:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    14d0:	2101      	movs	r1, #1
    14d2:	464a      	mov	r2, r9
    14d4:	0092      	lsls	r2, r2, #2
    14d6:	4691      	mov	r9, r2
    14d8:	2204      	movs	r2, #4
    14da:	4393      	bics	r3, r2
    14dc:	464a      	mov	r2, r9
    14de:	4313      	orrs	r3, r2
    14e0:	4642      	mov	r2, r8
    14e2:	400a      	ands	r2, r1
    14e4:	00d2      	lsls	r2, r2, #3
    14e6:	4690      	mov	r8, r2
    14e8:	2208      	movs	r2, #8
    14ea:	4393      	bics	r3, r2
    14ec:	4642      	mov	r2, r8
    14ee:	4313      	orrs	r3, r2
    14f0:	4662      	mov	r2, ip
    14f2:	400a      	ands	r2, r1
    14f4:	0112      	lsls	r2, r2, #4
    14f6:	4694      	mov	ip, r2
    14f8:	2210      	movs	r2, #16
    14fa:	4393      	bics	r3, r2
    14fc:	4662      	mov	r2, ip
    14fe:	4313      	orrs	r3, r2
    1500:	4008      	ands	r0, r1
    1502:	0140      	lsls	r0, r0, #5
    1504:	2220      	movs	r2, #32
    1506:	4393      	bics	r3, r2
    1508:	4303      	orrs	r3, r0
    150a:	400f      	ands	r7, r1
    150c:	01bf      	lsls	r7, r7, #6
    150e:	2040      	movs	r0, #64	; 0x40
    1510:	4383      	bics	r3, r0
    1512:	433b      	orrs	r3, r7
    1514:	400e      	ands	r6, r1
    1516:	01f6      	lsls	r6, r6, #7
    1518:	3040      	adds	r0, #64	; 0x40
    151a:	4383      	bics	r3, r0
    151c:	4333      	orrs	r3, r6
    151e:	3879      	subs	r0, #121	; 0x79
    1520:	4005      	ands	r5, r0
    1522:	022d      	lsls	r5, r5, #8
    1524:	4809      	ldr	r0, [pc, #36]	; (154c <system_clock_source_xosc32k_set_config+0xb0>)
    1526:	4003      	ands	r3, r0
    1528:	432b      	orrs	r3, r5
    152a:	4021      	ands	r1, r4
    152c:	0309      	lsls	r1, r1, #12
    152e:	4808      	ldr	r0, [pc, #32]	; (1550 <system_clock_source_xosc32k_set_config+0xb4>)
    1530:	4003      	ands	r3, r0
    1532:	430b      	orrs	r3, r1
    1534:	465a      	mov	r2, fp
    1536:	8293      	strh	r3, [r2, #20]
}
    1538:	bc3c      	pop	{r2, r3, r4, r5}
    153a:	4690      	mov	r8, r2
    153c:	4699      	mov	r9, r3
    153e:	46a2      	mov	sl, r4
    1540:	46ab      	mov	fp, r5
    1542:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1544:	40000800 	.word	0x40000800
    1548:	2000027c 	.word	0x2000027c
    154c:	fffff8ff 	.word	0xfffff8ff
    1550:	ffffefff 	.word	0xffffefff

00001554 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    1554:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1556:	7a03      	ldrb	r3, [r0, #8]
    1558:	069b      	lsls	r3, r3, #26
    155a:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    155c:	8942      	ldrh	r2, [r0, #10]
    155e:	0592      	lsls	r2, r2, #22
    1560:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1562:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    1564:	4918      	ldr	r1, [pc, #96]	; (15c8 <system_clock_source_dfll_set_config+0x74>)
    1566:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    1568:	7983      	ldrb	r3, [r0, #6]
    156a:	79c2      	ldrb	r2, [r0, #7]
    156c:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    156e:	8842      	ldrh	r2, [r0, #2]
    1570:	8884      	ldrh	r4, [r0, #4]
    1572:	4322      	orrs	r2, r4
    1574:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    1576:	7842      	ldrb	r2, [r0, #1]
    1578:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    157a:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    157c:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    157e:	7803      	ldrb	r3, [r0, #0]
    1580:	2b04      	cmp	r3, #4
    1582:	d011      	beq.n	15a8 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    1584:	2b20      	cmp	r3, #32
    1586:	d10e      	bne.n	15a6 <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1588:	7b03      	ldrb	r3, [r0, #12]
    158a:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    158c:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    158e:	4313      	orrs	r3, r2
    1590:	89c2      	ldrh	r2, [r0, #14]
    1592:	0412      	lsls	r2, r2, #16
    1594:	490d      	ldr	r1, [pc, #52]	; (15cc <system_clock_source_dfll_set_config+0x78>)
    1596:	400a      	ands	r2, r1
    1598:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    159a:	4a0b      	ldr	r2, [pc, #44]	; (15c8 <system_clock_source_dfll_set_config+0x74>)
    159c:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    159e:	6811      	ldr	r1, [r2, #0]
    15a0:	4b0b      	ldr	r3, [pc, #44]	; (15d0 <system_clock_source_dfll_set_config+0x7c>)
    15a2:	430b      	orrs	r3, r1
    15a4:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    15a6:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    15a8:	7b03      	ldrb	r3, [r0, #12]
    15aa:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    15ac:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    15ae:	4313      	orrs	r3, r2
    15b0:	89c2      	ldrh	r2, [r0, #14]
    15b2:	0412      	lsls	r2, r2, #16
    15b4:	4905      	ldr	r1, [pc, #20]	; (15cc <system_clock_source_dfll_set_config+0x78>)
    15b6:	400a      	ands	r2, r1
    15b8:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    15ba:	4a03      	ldr	r2, [pc, #12]	; (15c8 <system_clock_source_dfll_set_config+0x74>)
    15bc:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    15be:	6813      	ldr	r3, [r2, #0]
    15c0:	2104      	movs	r1, #4
    15c2:	430b      	orrs	r3, r1
    15c4:	6013      	str	r3, [r2, #0]
    15c6:	e7ee      	b.n	15a6 <system_clock_source_dfll_set_config+0x52>
    15c8:	2000027c 	.word	0x2000027c
    15cc:	03ff0000 	.word	0x03ff0000
    15d0:	00000424 	.word	0x00000424

000015d4 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    15d4:	2808      	cmp	r0, #8
    15d6:	d803      	bhi.n	15e0 <system_clock_source_enable+0xc>
    15d8:	0080      	lsls	r0, r0, #2
    15da:	4b25      	ldr	r3, [pc, #148]	; (1670 <system_clock_source_enable+0x9c>)
    15dc:	581b      	ldr	r3, [r3, r0]
    15de:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    15e0:	2017      	movs	r0, #23
    15e2:	e044      	b.n	166e <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    15e4:	4a23      	ldr	r2, [pc, #140]	; (1674 <system_clock_source_enable+0xa0>)
    15e6:	6a13      	ldr	r3, [r2, #32]
    15e8:	2102      	movs	r1, #2
    15ea:	430b      	orrs	r3, r1
    15ec:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    15ee:	2000      	movs	r0, #0
    15f0:	e03d      	b.n	166e <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    15f2:	4a20      	ldr	r2, [pc, #128]	; (1674 <system_clock_source_enable+0xa0>)
    15f4:	6993      	ldr	r3, [r2, #24]
    15f6:	2102      	movs	r1, #2
    15f8:	430b      	orrs	r3, r1
    15fa:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    15fc:	2000      	movs	r0, #0
		break;
    15fe:	e036      	b.n	166e <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1600:	4a1c      	ldr	r2, [pc, #112]	; (1674 <system_clock_source_enable+0xa0>)
    1602:	8a13      	ldrh	r3, [r2, #16]
    1604:	2102      	movs	r1, #2
    1606:	430b      	orrs	r3, r1
    1608:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    160a:	2000      	movs	r0, #0
		break;
    160c:	e02f      	b.n	166e <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    160e:	4a19      	ldr	r2, [pc, #100]	; (1674 <system_clock_source_enable+0xa0>)
    1610:	8a93      	ldrh	r3, [r2, #20]
    1612:	2102      	movs	r1, #2
    1614:	430b      	orrs	r3, r1
    1616:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    1618:	2000      	movs	r0, #0
		break;
    161a:	e028      	b.n	166e <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    161c:	4916      	ldr	r1, [pc, #88]	; (1678 <system_clock_source_enable+0xa4>)
    161e:	680b      	ldr	r3, [r1, #0]
    1620:	2202      	movs	r2, #2
    1622:	4313      	orrs	r3, r2
    1624:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1626:	4b13      	ldr	r3, [pc, #76]	; (1674 <system_clock_source_enable+0xa0>)
    1628:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    162a:	0019      	movs	r1, r3
    162c:	320e      	adds	r2, #14
    162e:	68cb      	ldr	r3, [r1, #12]
    1630:	421a      	tst	r2, r3
    1632:	d0fc      	beq.n	162e <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1634:	4a10      	ldr	r2, [pc, #64]	; (1678 <system_clock_source_enable+0xa4>)
    1636:	6891      	ldr	r1, [r2, #8]
    1638:	4b0e      	ldr	r3, [pc, #56]	; (1674 <system_clock_source_enable+0xa0>)
    163a:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    163c:	6852      	ldr	r2, [r2, #4]
    163e:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    1640:	2200      	movs	r2, #0
    1642:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1644:	0019      	movs	r1, r3
    1646:	3210      	adds	r2, #16
    1648:	68cb      	ldr	r3, [r1, #12]
    164a:	421a      	tst	r2, r3
    164c:	d0fc      	beq.n	1648 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    164e:	4b0a      	ldr	r3, [pc, #40]	; (1678 <system_clock_source_enable+0xa4>)
    1650:	681b      	ldr	r3, [r3, #0]
    1652:	b29b      	uxth	r3, r3
    1654:	4a07      	ldr	r2, [pc, #28]	; (1674 <system_clock_source_enable+0xa0>)
    1656:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    1658:	2000      	movs	r0, #0
    165a:	e008      	b.n	166e <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    165c:	4905      	ldr	r1, [pc, #20]	; (1674 <system_clock_source_enable+0xa0>)
    165e:	2244      	movs	r2, #68	; 0x44
    1660:	5c8b      	ldrb	r3, [r1, r2]
    1662:	2002      	movs	r0, #2
    1664:	4303      	orrs	r3, r0
    1666:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    1668:	2000      	movs	r0, #0
		break;
    166a:	e000      	b.n	166e <system_clock_source_enable+0x9a>
		return STATUS_OK;
    166c:	2000      	movs	r0, #0
}
    166e:	4770      	bx	lr
    1670:	00004a1c 	.word	0x00004a1c
    1674:	40000800 	.word	0x40000800
    1678:	2000027c 	.word	0x2000027c

0000167c <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    167c:	b5f0      	push	{r4, r5, r6, r7, lr}
    167e:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1680:	22c2      	movs	r2, #194	; 0xc2
    1682:	00d2      	lsls	r2, r2, #3
    1684:	4b47      	ldr	r3, [pc, #284]	; (17a4 <system_clock_init+0x128>)
    1686:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1688:	4947      	ldr	r1, [pc, #284]	; (17a8 <system_clock_init+0x12c>)
    168a:	684b      	ldr	r3, [r1, #4]
    168c:	221e      	movs	r2, #30
    168e:	4393      	bics	r3, r2
    1690:	3a1c      	subs	r2, #28
    1692:	4313      	orrs	r3, r2
    1694:	604b      	str	r3, [r1, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    1696:	ab01      	add	r3, sp, #4
    1698:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    169a:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    169c:	4d43      	ldr	r5, [pc, #268]	; (17ac <system_clock_init+0x130>)
    169e:	b2e0      	uxtb	r0, r4
    16a0:	a901      	add	r1, sp, #4
    16a2:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    16a4:	3401      	adds	r4, #1
    16a6:	2c25      	cmp	r4, #37	; 0x25
    16a8:	d1f9      	bne.n	169e <system_clock_init+0x22>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    16aa:	a80a      	add	r0, sp, #40	; 0x28
    16ac:	2300      	movs	r3, #0
    16ae:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    16b0:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    16b2:	2280      	movs	r2, #128	; 0x80
    16b4:	0212      	lsls	r2, r2, #8
    16b6:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    16b8:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    16ba:	2201      	movs	r2, #1
    16bc:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    16be:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    16c0:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    16c2:	3205      	adds	r2, #5
    16c4:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    16c6:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    16c8:	4b39      	ldr	r3, [pc, #228]	; (17b0 <system_clock_init+0x134>)
    16ca:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    16cc:	2005      	movs	r0, #5
    16ce:	4b39      	ldr	r3, [pc, #228]	; (17b4 <system_clock_init+0x138>)
    16d0:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    16d2:	4934      	ldr	r1, [pc, #208]	; (17a4 <system_clock_init+0x128>)
    16d4:	2202      	movs	r2, #2
    16d6:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    16d8:	421a      	tst	r2, r3
    16da:	d0fc      	beq.n	16d6 <system_clock_init+0x5a>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    16dc:	4a31      	ldr	r2, [pc, #196]	; (17a4 <system_clock_init+0x128>)
    16de:	8a93      	ldrh	r3, [r2, #20]
    16e0:	2180      	movs	r1, #128	; 0x80
    16e2:	430b      	orrs	r3, r1
    16e4:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    16e6:	ab05      	add	r3, sp, #20
    16e8:	2100      	movs	r1, #0
    16ea:	2200      	movs	r2, #0
    16ec:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    16ee:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    16f0:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    16f2:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    16f4:	313f      	adds	r1, #63	; 0x3f
    16f6:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    16f8:	393b      	subs	r1, #59	; 0x3b
    16fa:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    16fc:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    16fe:	4b2e      	ldr	r3, [pc, #184]	; (17b8 <system_clock_init+0x13c>)
    1700:	681b      	ldr	r3, [r3, #0]
    1702:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    1704:	2b3f      	cmp	r3, #63	; 0x3f
    1706:	d04b      	beq.n	17a0 <system_clock_init+0x124>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    1708:	a805      	add	r0, sp, #20
    170a:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    170c:	23b7      	movs	r3, #183	; 0xb7
    170e:	00db      	lsls	r3, r3, #3
    1710:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    1712:	2307      	movs	r3, #7
    1714:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    1716:	3338      	adds	r3, #56	; 0x38
    1718:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    171a:	4b28      	ldr	r3, [pc, #160]	; (17bc <system_clock_init+0x140>)
    171c:	4798      	blx	r3
	config->run_in_standby  = false;
    171e:	a804      	add	r0, sp, #16
    1720:	2500      	movs	r5, #0
    1722:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    1724:	2601      	movs	r6, #1
    1726:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1728:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    172a:	4b25      	ldr	r3, [pc, #148]	; (17c0 <system_clock_init+0x144>)
    172c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    172e:	2006      	movs	r0, #6
    1730:	4f20      	ldr	r7, [pc, #128]	; (17b4 <system_clock_init+0x138>)
    1732:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1734:	4b23      	ldr	r3, [pc, #140]	; (17c4 <system_clock_init+0x148>)
    1736:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1738:	ac01      	add	r4, sp, #4
    173a:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    173c:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    173e:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    1740:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    1742:	2305      	movs	r3, #5
    1744:	7023      	strb	r3, [r4, #0]
    1746:	0021      	movs	r1, r4
    1748:	2001      	movs	r0, #1
    174a:	4b1f      	ldr	r3, [pc, #124]	; (17c8 <system_clock_init+0x14c>)
    174c:	4798      	blx	r3
    174e:	2001      	movs	r0, #1
    1750:	4b1e      	ldr	r3, [pc, #120]	; (17cc <system_clock_init+0x150>)
    1752:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    1754:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    1756:	0021      	movs	r1, r4
    1758:	2000      	movs	r0, #0
    175a:	4b14      	ldr	r3, [pc, #80]	; (17ac <system_clock_init+0x130>)
    175c:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    175e:	2000      	movs	r0, #0
    1760:	4b1b      	ldr	r3, [pc, #108]	; (17d0 <system_clock_init+0x154>)
    1762:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    1764:	2007      	movs	r0, #7
    1766:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1768:	490e      	ldr	r1, [pc, #56]	; (17a4 <system_clock_init+0x128>)
    176a:	22d0      	movs	r2, #208	; 0xd0
    176c:	68cb      	ldr	r3, [r1, #12]
    176e:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    1770:	2bd0      	cmp	r3, #208	; 0xd0
    1772:	d1fb      	bne.n	176c <system_clock_init+0xf0>
	PM->CPUSEL.reg = (uint32_t)divider;
    1774:	4a17      	ldr	r2, [pc, #92]	; (17d4 <system_clock_init+0x158>)
    1776:	2300      	movs	r3, #0
    1778:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    177a:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    177c:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    177e:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    1780:	a901      	add	r1, sp, #4
    1782:	2201      	movs	r2, #1
    1784:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    1786:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    1788:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    178a:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    178c:	3307      	adds	r3, #7
    178e:	700b      	strb	r3, [r1, #0]
    1790:	2000      	movs	r0, #0
    1792:	4b0d      	ldr	r3, [pc, #52]	; (17c8 <system_clock_init+0x14c>)
    1794:	4798      	blx	r3
    1796:	2000      	movs	r0, #0
    1798:	4b0c      	ldr	r3, [pc, #48]	; (17cc <system_clock_init+0x150>)
    179a:	4798      	blx	r3
#endif
}
    179c:	b00f      	add	sp, #60	; 0x3c
    179e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    17a0:	3b20      	subs	r3, #32
    17a2:	e7b1      	b.n	1708 <system_clock_init+0x8c>
    17a4:	40000800 	.word	0x40000800
    17a8:	41004000 	.word	0x41004000
    17ac:	00001a11 	.word	0x00001a11
    17b0:	0000149d 	.word	0x0000149d
    17b4:	000015d5 	.word	0x000015d5
    17b8:	00806024 	.word	0x00806024
    17bc:	00001555 	.word	0x00001555
    17c0:	00001461 	.word	0x00001461
    17c4:	000017d9 	.word	0x000017d9
    17c8:	000017fd 	.word	0x000017fd
    17cc:	000018b5 	.word	0x000018b5
    17d0:	00001985 	.word	0x00001985
    17d4:	40000400 	.word	0x40000400

000017d8 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    17d8:	4a06      	ldr	r2, [pc, #24]	; (17f4 <system_gclk_init+0x1c>)
    17da:	6993      	ldr	r3, [r2, #24]
    17dc:	2108      	movs	r1, #8
    17de:	430b      	orrs	r3, r1
    17e0:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    17e2:	2201      	movs	r2, #1
    17e4:	4b04      	ldr	r3, [pc, #16]	; (17f8 <system_gclk_init+0x20>)
    17e6:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    17e8:	0019      	movs	r1, r3
    17ea:	780b      	ldrb	r3, [r1, #0]
    17ec:	4213      	tst	r3, r2
    17ee:	d1fc      	bne.n	17ea <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    17f0:	4770      	bx	lr
    17f2:	46c0      	nop			; (mov r8, r8)
    17f4:	40000400 	.word	0x40000400
    17f8:	40000c00 	.word	0x40000c00

000017fc <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    17fc:	b570      	push	{r4, r5, r6, lr}
    17fe:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1800:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1802:	780d      	ldrb	r5, [r1, #0]
    1804:	022d      	lsls	r5, r5, #8
    1806:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1808:	784b      	ldrb	r3, [r1, #1]
    180a:	2b00      	cmp	r3, #0
    180c:	d002      	beq.n	1814 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    180e:	2380      	movs	r3, #128	; 0x80
    1810:	02db      	lsls	r3, r3, #11
    1812:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1814:	7a4b      	ldrb	r3, [r1, #9]
    1816:	2b00      	cmp	r3, #0
    1818:	d002      	beq.n	1820 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    181a:	2380      	movs	r3, #128	; 0x80
    181c:	031b      	lsls	r3, r3, #12
    181e:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1820:	6848      	ldr	r0, [r1, #4]
    1822:	2801      	cmp	r0, #1
    1824:	d910      	bls.n	1848 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1826:	1e43      	subs	r3, r0, #1
    1828:	4218      	tst	r0, r3
    182a:	d134      	bne.n	1896 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    182c:	2802      	cmp	r0, #2
    182e:	d930      	bls.n	1892 <system_gclk_gen_set_config+0x96>
    1830:	2302      	movs	r3, #2
    1832:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1834:	3201      	adds	r2, #1
						mask <<= 1) {
    1836:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    1838:	4298      	cmp	r0, r3
    183a:	d8fb      	bhi.n	1834 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    183c:	0212      	lsls	r2, r2, #8
    183e:	4332      	orrs	r2, r6
    1840:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1842:	2380      	movs	r3, #128	; 0x80
    1844:	035b      	lsls	r3, r3, #13
    1846:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1848:	7a0b      	ldrb	r3, [r1, #8]
    184a:	2b00      	cmp	r3, #0
    184c:	d002      	beq.n	1854 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    184e:	2380      	movs	r3, #128	; 0x80
    1850:	039b      	lsls	r3, r3, #14
    1852:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1854:	4a13      	ldr	r2, [pc, #76]	; (18a4 <system_gclk_gen_set_config+0xa8>)
    1856:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    1858:	b25b      	sxtb	r3, r3
    185a:	2b00      	cmp	r3, #0
    185c:	dbfb      	blt.n	1856 <system_gclk_gen_set_config+0x5a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    185e:	4b12      	ldr	r3, [pc, #72]	; (18a8 <system_gclk_gen_set_config+0xac>)
    1860:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1862:	4b12      	ldr	r3, [pc, #72]	; (18ac <system_gclk_gen_set_config+0xb0>)
    1864:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1866:	4a0f      	ldr	r2, [pc, #60]	; (18a4 <system_gclk_gen_set_config+0xa8>)
    1868:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    186a:	b25b      	sxtb	r3, r3
    186c:	2b00      	cmp	r3, #0
    186e:	dbfb      	blt.n	1868 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1870:	4b0c      	ldr	r3, [pc, #48]	; (18a4 <system_gclk_gen_set_config+0xa8>)
    1872:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1874:	001a      	movs	r2, r3
    1876:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    1878:	b25b      	sxtb	r3, r3
    187a:	2b00      	cmp	r3, #0
    187c:	dbfb      	blt.n	1876 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    187e:	4a09      	ldr	r2, [pc, #36]	; (18a4 <system_gclk_gen_set_config+0xa8>)
    1880:	6853      	ldr	r3, [r2, #4]
    1882:	2180      	movs	r1, #128	; 0x80
    1884:	0249      	lsls	r1, r1, #9
    1886:	400b      	ands	r3, r1
    1888:	431d      	orrs	r5, r3
    188a:	6055      	str	r5, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    188c:	4b08      	ldr	r3, [pc, #32]	; (18b0 <system_gclk_gen_set_config+0xb4>)
    188e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1890:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    1892:	2200      	movs	r2, #0
    1894:	e7d2      	b.n	183c <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1896:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    1898:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    189a:	2380      	movs	r3, #128	; 0x80
    189c:	029b      	lsls	r3, r3, #10
    189e:	431d      	orrs	r5, r3
    18a0:	e7d2      	b.n	1848 <system_gclk_gen_set_config+0x4c>
    18a2:	46c0      	nop			; (mov r8, r8)
    18a4:	40000c00 	.word	0x40000c00
    18a8:	0000042d 	.word	0x0000042d
    18ac:	40000c08 	.word	0x40000c08
    18b0:	0000046d 	.word	0x0000046d

000018b4 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    18b4:	b510      	push	{r4, lr}
    18b6:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    18b8:	4a0b      	ldr	r2, [pc, #44]	; (18e8 <system_gclk_gen_enable+0x34>)
    18ba:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    18bc:	b25b      	sxtb	r3, r3
    18be:	2b00      	cmp	r3, #0
    18c0:	dbfb      	blt.n	18ba <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    18c2:	4b0a      	ldr	r3, [pc, #40]	; (18ec <system_gclk_gen_enable+0x38>)
    18c4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    18c6:	4b0a      	ldr	r3, [pc, #40]	; (18f0 <system_gclk_gen_enable+0x3c>)
    18c8:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    18ca:	4a07      	ldr	r2, [pc, #28]	; (18e8 <system_gclk_gen_enable+0x34>)
    18cc:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    18ce:	b25b      	sxtb	r3, r3
    18d0:	2b00      	cmp	r3, #0
    18d2:	dbfb      	blt.n	18cc <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    18d4:	4a04      	ldr	r2, [pc, #16]	; (18e8 <system_gclk_gen_enable+0x34>)
    18d6:	6851      	ldr	r1, [r2, #4]
    18d8:	2380      	movs	r3, #128	; 0x80
    18da:	025b      	lsls	r3, r3, #9
    18dc:	430b      	orrs	r3, r1
    18de:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    18e0:	4b04      	ldr	r3, [pc, #16]	; (18f4 <system_gclk_gen_enable+0x40>)
    18e2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    18e4:	bd10      	pop	{r4, pc}
    18e6:	46c0      	nop			; (mov r8, r8)
    18e8:	40000c00 	.word	0x40000c00
    18ec:	0000042d 	.word	0x0000042d
    18f0:	40000c04 	.word	0x40000c04
    18f4:	0000046d 	.word	0x0000046d

000018f8 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    18f8:	b570      	push	{r4, r5, r6, lr}
    18fa:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    18fc:	4a1a      	ldr	r2, [pc, #104]	; (1968 <system_gclk_gen_get_hz+0x70>)
    18fe:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1900:	b25b      	sxtb	r3, r3
    1902:	2b00      	cmp	r3, #0
    1904:	dbfb      	blt.n	18fe <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    1906:	4b19      	ldr	r3, [pc, #100]	; (196c <system_gclk_gen_get_hz+0x74>)
    1908:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    190a:	4b19      	ldr	r3, [pc, #100]	; (1970 <system_gclk_gen_get_hz+0x78>)
    190c:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    190e:	4a16      	ldr	r2, [pc, #88]	; (1968 <system_gclk_gen_get_hz+0x70>)
    1910:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1912:	b25b      	sxtb	r3, r3
    1914:	2b00      	cmp	r3, #0
    1916:	dbfb      	blt.n	1910 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1918:	4e13      	ldr	r6, [pc, #76]	; (1968 <system_gclk_gen_get_hz+0x70>)
    191a:	6870      	ldr	r0, [r6, #4]
    191c:	04c0      	lsls	r0, r0, #19
    191e:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1920:	4b14      	ldr	r3, [pc, #80]	; (1974 <system_gclk_gen_get_hz+0x7c>)
    1922:	4798      	blx	r3
    1924:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1926:	4b12      	ldr	r3, [pc, #72]	; (1970 <system_gclk_gen_get_hz+0x78>)
    1928:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    192a:	6876      	ldr	r6, [r6, #4]
    192c:	02f6      	lsls	r6, r6, #11
    192e:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1930:	4b11      	ldr	r3, [pc, #68]	; (1978 <system_gclk_gen_get_hz+0x80>)
    1932:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1934:	4a0c      	ldr	r2, [pc, #48]	; (1968 <system_gclk_gen_get_hz+0x70>)
    1936:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1938:	b25b      	sxtb	r3, r3
    193a:	2b00      	cmp	r3, #0
    193c:	dbfb      	blt.n	1936 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    193e:	4b0a      	ldr	r3, [pc, #40]	; (1968 <system_gclk_gen_get_hz+0x70>)
    1940:	689c      	ldr	r4, [r3, #8]
    1942:	0224      	lsls	r4, r4, #8
    1944:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    1946:	4b0d      	ldr	r3, [pc, #52]	; (197c <system_gclk_gen_get_hz+0x84>)
    1948:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    194a:	2e00      	cmp	r6, #0
    194c:	d107      	bne.n	195e <system_gclk_gen_get_hz+0x66>
    194e:	2c01      	cmp	r4, #1
    1950:	d907      	bls.n	1962 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    1952:	0021      	movs	r1, r4
    1954:	0028      	movs	r0, r5
    1956:	4b0a      	ldr	r3, [pc, #40]	; (1980 <system_gclk_gen_get_hz+0x88>)
    1958:	4798      	blx	r3
    195a:	0005      	movs	r5, r0
    195c:	e001      	b.n	1962 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    195e:	3401      	adds	r4, #1
    1960:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    1962:	0028      	movs	r0, r5
    1964:	bd70      	pop	{r4, r5, r6, pc}
    1966:	46c0      	nop			; (mov r8, r8)
    1968:	40000c00 	.word	0x40000c00
    196c:	0000042d 	.word	0x0000042d
    1970:	40000c04 	.word	0x40000c04
    1974:	000013cd 	.word	0x000013cd
    1978:	40000c08 	.word	0x40000c08
    197c:	0000046d 	.word	0x0000046d
    1980:	0000316d 	.word	0x0000316d

00001984 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1984:	b510      	push	{r4, lr}
    1986:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1988:	4b06      	ldr	r3, [pc, #24]	; (19a4 <system_gclk_chan_enable+0x20>)
    198a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    198c:	4b06      	ldr	r3, [pc, #24]	; (19a8 <system_gclk_chan_enable+0x24>)
    198e:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1990:	4a06      	ldr	r2, [pc, #24]	; (19ac <system_gclk_chan_enable+0x28>)
    1992:	8853      	ldrh	r3, [r2, #2]
    1994:	2180      	movs	r1, #128	; 0x80
    1996:	01c9      	lsls	r1, r1, #7
    1998:	430b      	orrs	r3, r1
    199a:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    199c:	4b04      	ldr	r3, [pc, #16]	; (19b0 <system_gclk_chan_enable+0x2c>)
    199e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    19a0:	bd10      	pop	{r4, pc}
    19a2:	46c0      	nop			; (mov r8, r8)
    19a4:	0000042d 	.word	0x0000042d
    19a8:	40000c02 	.word	0x40000c02
    19ac:	40000c00 	.word	0x40000c00
    19b0:	0000046d 	.word	0x0000046d

000019b4 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    19b4:	b510      	push	{r4, lr}
    19b6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    19b8:	4b0f      	ldr	r3, [pc, #60]	; (19f8 <system_gclk_chan_disable+0x44>)
    19ba:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    19bc:	4b0f      	ldr	r3, [pc, #60]	; (19fc <system_gclk_chan_disable+0x48>)
    19be:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    19c0:	4a0f      	ldr	r2, [pc, #60]	; (1a00 <system_gclk_chan_disable+0x4c>)
    19c2:	8853      	ldrh	r3, [r2, #2]
    19c4:	051b      	lsls	r3, r3, #20
    19c6:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    19c8:	8853      	ldrh	r3, [r2, #2]
    19ca:	490e      	ldr	r1, [pc, #56]	; (1a04 <system_gclk_chan_disable+0x50>)
    19cc:	400b      	ands	r3, r1
    19ce:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    19d0:	8853      	ldrh	r3, [r2, #2]
    19d2:	490d      	ldr	r1, [pc, #52]	; (1a08 <system_gclk_chan_disable+0x54>)
    19d4:	400b      	ands	r3, r1
    19d6:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    19d8:	0011      	movs	r1, r2
    19da:	2280      	movs	r2, #128	; 0x80
    19dc:	01d2      	lsls	r2, r2, #7
    19de:	884b      	ldrh	r3, [r1, #2]
    19e0:	4213      	tst	r3, r2
    19e2:	d1fc      	bne.n	19de <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    19e4:	4906      	ldr	r1, [pc, #24]	; (1a00 <system_gclk_chan_disable+0x4c>)
    19e6:	884a      	ldrh	r2, [r1, #2]
    19e8:	0203      	lsls	r3, r0, #8
    19ea:	4806      	ldr	r0, [pc, #24]	; (1a04 <system_gclk_chan_disable+0x50>)
    19ec:	4002      	ands	r2, r0
    19ee:	4313      	orrs	r3, r2
    19f0:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    19f2:	4b06      	ldr	r3, [pc, #24]	; (1a0c <system_gclk_chan_disable+0x58>)
    19f4:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    19f6:	bd10      	pop	{r4, pc}
    19f8:	0000042d 	.word	0x0000042d
    19fc:	40000c02 	.word	0x40000c02
    1a00:	40000c00 	.word	0x40000c00
    1a04:	fffff0ff 	.word	0xfffff0ff
    1a08:	ffffbfff 	.word	0xffffbfff
    1a0c:	0000046d 	.word	0x0000046d

00001a10 <system_gclk_chan_set_config>:
{
    1a10:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1a12:	780c      	ldrb	r4, [r1, #0]
    1a14:	0224      	lsls	r4, r4, #8
    1a16:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    1a18:	4b02      	ldr	r3, [pc, #8]	; (1a24 <system_gclk_chan_set_config+0x14>)
    1a1a:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1a1c:	b2a4      	uxth	r4, r4
    1a1e:	4b02      	ldr	r3, [pc, #8]	; (1a28 <system_gclk_chan_set_config+0x18>)
    1a20:	805c      	strh	r4, [r3, #2]
}
    1a22:	bd10      	pop	{r4, pc}
    1a24:	000019b5 	.word	0x000019b5
    1a28:	40000c00 	.word	0x40000c00

00001a2c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1a2c:	b510      	push	{r4, lr}
    1a2e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1a30:	4b06      	ldr	r3, [pc, #24]	; (1a4c <system_gclk_chan_get_hz+0x20>)
    1a32:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1a34:	4b06      	ldr	r3, [pc, #24]	; (1a50 <system_gclk_chan_get_hz+0x24>)
    1a36:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1a38:	4b06      	ldr	r3, [pc, #24]	; (1a54 <system_gclk_chan_get_hz+0x28>)
    1a3a:	885c      	ldrh	r4, [r3, #2]
    1a3c:	0524      	lsls	r4, r4, #20
    1a3e:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    1a40:	4b05      	ldr	r3, [pc, #20]	; (1a58 <system_gclk_chan_get_hz+0x2c>)
    1a42:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1a44:	0020      	movs	r0, r4
    1a46:	4b05      	ldr	r3, [pc, #20]	; (1a5c <system_gclk_chan_get_hz+0x30>)
    1a48:	4798      	blx	r3
}
    1a4a:	bd10      	pop	{r4, pc}
    1a4c:	0000042d 	.word	0x0000042d
    1a50:	40000c02 	.word	0x40000c02
    1a54:	40000c00 	.word	0x40000c00
    1a58:	0000046d 	.word	0x0000046d
    1a5c:	000018f9 	.word	0x000018f9

00001a60 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1a60:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1a62:	78d3      	ldrb	r3, [r2, #3]
    1a64:	2b00      	cmp	r3, #0
    1a66:	d135      	bne.n	1ad4 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1a68:	7813      	ldrb	r3, [r2, #0]
    1a6a:	2b80      	cmp	r3, #128	; 0x80
    1a6c:	d029      	beq.n	1ac2 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1a6e:	061b      	lsls	r3, r3, #24
    1a70:	2480      	movs	r4, #128	; 0x80
    1a72:	0264      	lsls	r4, r4, #9
    1a74:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1a76:	7854      	ldrb	r4, [r2, #1]
    1a78:	2502      	movs	r5, #2
    1a7a:	43ac      	bics	r4, r5
    1a7c:	d106      	bne.n	1a8c <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1a7e:	7894      	ldrb	r4, [r2, #2]
    1a80:	2c00      	cmp	r4, #0
    1a82:	d120      	bne.n	1ac6 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    1a84:	2480      	movs	r4, #128	; 0x80
    1a86:	02a4      	lsls	r4, r4, #10
    1a88:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1a8a:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1a8c:	7854      	ldrb	r4, [r2, #1]
    1a8e:	3c01      	subs	r4, #1
    1a90:	2c01      	cmp	r4, #1
    1a92:	d91c      	bls.n	1ace <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1a94:	040d      	lsls	r5, r1, #16
    1a96:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1a98:	24a0      	movs	r4, #160	; 0xa0
    1a9a:	05e4      	lsls	r4, r4, #23
    1a9c:	432c      	orrs	r4, r5
    1a9e:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1aa0:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1aa2:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1aa4:	24d0      	movs	r4, #208	; 0xd0
    1aa6:	0624      	lsls	r4, r4, #24
    1aa8:	432c      	orrs	r4, r5
    1aaa:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1aac:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1aae:	78d4      	ldrb	r4, [r2, #3]
    1ab0:	2c00      	cmp	r4, #0
    1ab2:	d122      	bne.n	1afa <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1ab4:	035b      	lsls	r3, r3, #13
    1ab6:	d51c      	bpl.n	1af2 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1ab8:	7893      	ldrb	r3, [r2, #2]
    1aba:	2b01      	cmp	r3, #1
    1abc:	d01e      	beq.n	1afc <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    1abe:	6141      	str	r1, [r0, #20]
    1ac0:	e017      	b.n	1af2 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    1ac2:	2300      	movs	r3, #0
    1ac4:	e7d7      	b.n	1a76 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1ac6:	24c0      	movs	r4, #192	; 0xc0
    1ac8:	02e4      	lsls	r4, r4, #11
    1aca:	4323      	orrs	r3, r4
    1acc:	e7dd      	b.n	1a8a <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1ace:	4c0d      	ldr	r4, [pc, #52]	; (1b04 <_system_pinmux_config+0xa4>)
    1ad0:	4023      	ands	r3, r4
    1ad2:	e7df      	b.n	1a94 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    1ad4:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1ad6:	040c      	lsls	r4, r1, #16
    1ad8:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1ada:	23a0      	movs	r3, #160	; 0xa0
    1adc:	05db      	lsls	r3, r3, #23
    1ade:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1ae0:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1ae2:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1ae4:	23d0      	movs	r3, #208	; 0xd0
    1ae6:	061b      	lsls	r3, r3, #24
    1ae8:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1aea:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    1aec:	78d3      	ldrb	r3, [r2, #3]
    1aee:	2b00      	cmp	r3, #0
    1af0:	d103      	bne.n	1afa <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1af2:	7853      	ldrb	r3, [r2, #1]
    1af4:	3b01      	subs	r3, #1
    1af6:	2b01      	cmp	r3, #1
    1af8:	d902      	bls.n	1b00 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    1afa:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    1afc:	6181      	str	r1, [r0, #24]
    1afe:	e7f8      	b.n	1af2 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    1b00:	6081      	str	r1, [r0, #8]
}
    1b02:	e7fa      	b.n	1afa <_system_pinmux_config+0x9a>
    1b04:	fffbffff 	.word	0xfffbffff

00001b08 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1b08:	b510      	push	{r4, lr}
    1b0a:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1b0c:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1b0e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1b10:	2900      	cmp	r1, #0
    1b12:	d104      	bne.n	1b1e <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1b14:	0943      	lsrs	r3, r0, #5
    1b16:	01db      	lsls	r3, r3, #7
    1b18:	4905      	ldr	r1, [pc, #20]	; (1b30 <system_pinmux_pin_set_config+0x28>)
    1b1a:	468c      	mov	ip, r1
    1b1c:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1b1e:	241f      	movs	r4, #31
    1b20:	4020      	ands	r0, r4
    1b22:	2101      	movs	r1, #1
    1b24:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    1b26:	0018      	movs	r0, r3
    1b28:	4b02      	ldr	r3, [pc, #8]	; (1b34 <system_pinmux_pin_set_config+0x2c>)
    1b2a:	4798      	blx	r3
}
    1b2c:	bd10      	pop	{r4, pc}
    1b2e:	46c0      	nop			; (mov r8, r8)
    1b30:	41004400 	.word	0x41004400
    1b34:	00001a61 	.word	0x00001a61

00001b38 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1b38:	4770      	bx	lr
	...

00001b3c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1b3c:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1b3e:	4b05      	ldr	r3, [pc, #20]	; (1b54 <system_init+0x18>)
    1b40:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1b42:	4b05      	ldr	r3, [pc, #20]	; (1b58 <system_init+0x1c>)
    1b44:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1b46:	4b05      	ldr	r3, [pc, #20]	; (1b5c <system_init+0x20>)
    1b48:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1b4a:	4b05      	ldr	r3, [pc, #20]	; (1b60 <system_init+0x24>)
    1b4c:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1b4e:	4b05      	ldr	r3, [pc, #20]	; (1b64 <system_init+0x28>)
    1b50:	4798      	blx	r3
}
    1b52:	bd10      	pop	{r4, pc}
    1b54:	0000167d 	.word	0x0000167d
    1b58:	0000049d 	.word	0x0000049d
    1b5c:	00001b39 	.word	0x00001b39
    1b60:	00001b39 	.word	0x00001b39
    1b64:	00001b39 	.word	0x00001b39

00001b68 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1b68:	e7fe      	b.n	1b68 <Dummy_Handler>
	...

00001b6c <Reset_Handler>:
{
    1b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    1b6e:	4a2a      	ldr	r2, [pc, #168]	; (1c18 <Reset_Handler+0xac>)
    1b70:	4b2a      	ldr	r3, [pc, #168]	; (1c1c <Reset_Handler+0xb0>)
    1b72:	429a      	cmp	r2, r3
    1b74:	d011      	beq.n	1b9a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    1b76:	001a      	movs	r2, r3
    1b78:	4b29      	ldr	r3, [pc, #164]	; (1c20 <Reset_Handler+0xb4>)
    1b7a:	429a      	cmp	r2, r3
    1b7c:	d20d      	bcs.n	1b9a <Reset_Handler+0x2e>
    1b7e:	4a29      	ldr	r2, [pc, #164]	; (1c24 <Reset_Handler+0xb8>)
    1b80:	3303      	adds	r3, #3
    1b82:	1a9b      	subs	r3, r3, r2
    1b84:	089b      	lsrs	r3, r3, #2
    1b86:	3301      	adds	r3, #1
    1b88:	009b      	lsls	r3, r3, #2
    1b8a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1b8c:	4823      	ldr	r0, [pc, #140]	; (1c1c <Reset_Handler+0xb0>)
    1b8e:	4922      	ldr	r1, [pc, #136]	; (1c18 <Reset_Handler+0xac>)
    1b90:	588c      	ldr	r4, [r1, r2]
    1b92:	5084      	str	r4, [r0, r2]
    1b94:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    1b96:	429a      	cmp	r2, r3
    1b98:	d1fa      	bne.n	1b90 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    1b9a:	4a23      	ldr	r2, [pc, #140]	; (1c28 <Reset_Handler+0xbc>)
    1b9c:	4b23      	ldr	r3, [pc, #140]	; (1c2c <Reset_Handler+0xc0>)
    1b9e:	429a      	cmp	r2, r3
    1ba0:	d20a      	bcs.n	1bb8 <Reset_Handler+0x4c>
    1ba2:	43d3      	mvns	r3, r2
    1ba4:	4921      	ldr	r1, [pc, #132]	; (1c2c <Reset_Handler+0xc0>)
    1ba6:	185b      	adds	r3, r3, r1
    1ba8:	2103      	movs	r1, #3
    1baa:	438b      	bics	r3, r1
    1bac:	3304      	adds	r3, #4
    1bae:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    1bb0:	2100      	movs	r1, #0
    1bb2:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    1bb4:	4293      	cmp	r3, r2
    1bb6:	d1fc      	bne.n	1bb2 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1bb8:	4a1d      	ldr	r2, [pc, #116]	; (1c30 <Reset_Handler+0xc4>)
    1bba:	21ff      	movs	r1, #255	; 0xff
    1bbc:	4b1d      	ldr	r3, [pc, #116]	; (1c34 <Reset_Handler+0xc8>)
    1bbe:	438b      	bics	r3, r1
    1bc0:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1bc2:	39fd      	subs	r1, #253	; 0xfd
    1bc4:	2390      	movs	r3, #144	; 0x90
    1bc6:	005b      	lsls	r3, r3, #1
    1bc8:	4a1b      	ldr	r2, [pc, #108]	; (1c38 <Reset_Handler+0xcc>)
    1bca:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1bcc:	4a1b      	ldr	r2, [pc, #108]	; (1c3c <Reset_Handler+0xd0>)
    1bce:	78d3      	ldrb	r3, [r2, #3]
    1bd0:	2503      	movs	r5, #3
    1bd2:	43ab      	bics	r3, r5
    1bd4:	2402      	movs	r4, #2
    1bd6:	4323      	orrs	r3, r4
    1bd8:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1bda:	78d3      	ldrb	r3, [r2, #3]
    1bdc:	270c      	movs	r7, #12
    1bde:	43bb      	bics	r3, r7
    1be0:	2608      	movs	r6, #8
    1be2:	4333      	orrs	r3, r6
    1be4:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    1be6:	4b16      	ldr	r3, [pc, #88]	; (1c40 <Reset_Handler+0xd4>)
    1be8:	7b98      	ldrb	r0, [r3, #14]
    1bea:	2230      	movs	r2, #48	; 0x30
    1bec:	4390      	bics	r0, r2
    1bee:	2220      	movs	r2, #32
    1bf0:	4310      	orrs	r0, r2
    1bf2:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1bf4:	7b99      	ldrb	r1, [r3, #14]
    1bf6:	43b9      	bics	r1, r7
    1bf8:	4331      	orrs	r1, r6
    1bfa:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1bfc:	7b9a      	ldrb	r2, [r3, #14]
    1bfe:	43aa      	bics	r2, r5
    1c00:	4322      	orrs	r2, r4
    1c02:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    1c04:	4a0f      	ldr	r2, [pc, #60]	; (1c44 <Reset_Handler+0xd8>)
    1c06:	6853      	ldr	r3, [r2, #4]
    1c08:	2180      	movs	r1, #128	; 0x80
    1c0a:	430b      	orrs	r3, r1
    1c0c:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    1c0e:	4b0e      	ldr	r3, [pc, #56]	; (1c48 <Reset_Handler+0xdc>)
    1c10:	4798      	blx	r3
        main();
    1c12:	4b0e      	ldr	r3, [pc, #56]	; (1c4c <Reset_Handler+0xe0>)
    1c14:	4798      	blx	r3
    1c16:	e7fe      	b.n	1c16 <Reset_Handler+0xaa>
    1c18:	00006634 	.word	0x00006634
    1c1c:	20000000 	.word	0x20000000
    1c20:	200001bc 	.word	0x200001bc
    1c24:	20000004 	.word	0x20000004
    1c28:	200001bc 	.word	0x200001bc
    1c2c:	2000042c 	.word	0x2000042c
    1c30:	e000ed00 	.word	0xe000ed00
    1c34:	00000000 	.word	0x00000000
    1c38:	41007000 	.word	0x41007000
    1c3c:	41005000 	.word	0x41005000
    1c40:	41004800 	.word	0x41004800
    1c44:	41004000 	.word	0x41004000
    1c48:	000032d9 	.word	0x000032d9
    1c4c:	00003115 	.word	0x00003115

00001c50 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    1c50:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c52:	46c6      	mov	lr, r8
    1c54:	b500      	push	{lr}
    1c56:	000c      	movs	r4, r1
    1c58:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    1c5a:	2800      	cmp	r0, #0
    1c5c:	d10f      	bne.n	1c7e <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    1c5e:	2a00      	cmp	r2, #0
    1c60:	dd11      	ble.n	1c86 <_read+0x36>
    1c62:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    1c64:	4e09      	ldr	r6, [pc, #36]	; (1c8c <_read+0x3c>)
    1c66:	4d0a      	ldr	r5, [pc, #40]	; (1c90 <_read+0x40>)
    1c68:	6830      	ldr	r0, [r6, #0]
    1c6a:	0021      	movs	r1, r4
    1c6c:	682b      	ldr	r3, [r5, #0]
    1c6e:	4798      	blx	r3
		ptr++;
    1c70:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    1c72:	42bc      	cmp	r4, r7
    1c74:	d1f8      	bne.n	1c68 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    1c76:	4640      	mov	r0, r8
    1c78:	bc04      	pop	{r2}
    1c7a:	4690      	mov	r8, r2
    1c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    1c7e:	2301      	movs	r3, #1
    1c80:	425b      	negs	r3, r3
    1c82:	4698      	mov	r8, r3
    1c84:	e7f7      	b.n	1c76 <_read+0x26>
	for (; len > 0; --len) {
    1c86:	4680      	mov	r8, r0
    1c88:	e7f5      	b.n	1c76 <_read+0x26>
    1c8a:	46c0      	nop			; (mov r8, r8)
    1c8c:	200002c8 	.word	0x200002c8
    1c90:	200002c0 	.word	0x200002c0

00001c94 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    1c94:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c96:	46c6      	mov	lr, r8
    1c98:	b500      	push	{lr}
    1c9a:	000e      	movs	r6, r1
    1c9c:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    1c9e:	3801      	subs	r0, #1
    1ca0:	2802      	cmp	r0, #2
    1ca2:	d810      	bhi.n	1cc6 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    1ca4:	2a00      	cmp	r2, #0
    1ca6:	d011      	beq.n	1ccc <_write+0x38>
    1ca8:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    1caa:	4b0c      	ldr	r3, [pc, #48]	; (1cdc <_write+0x48>)
    1cac:	4698      	mov	r8, r3
    1cae:	4f0c      	ldr	r7, [pc, #48]	; (1ce0 <_write+0x4c>)
    1cb0:	4643      	mov	r3, r8
    1cb2:	6818      	ldr	r0, [r3, #0]
    1cb4:	5d31      	ldrb	r1, [r6, r4]
    1cb6:	683b      	ldr	r3, [r7, #0]
    1cb8:	4798      	blx	r3
    1cba:	2800      	cmp	r0, #0
    1cbc:	db08      	blt.n	1cd0 <_write+0x3c>
			return -1;
		}
		++nChars;
    1cbe:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    1cc0:	42a5      	cmp	r5, r4
    1cc2:	d1f5      	bne.n	1cb0 <_write+0x1c>
    1cc4:	e006      	b.n	1cd4 <_write+0x40>
		return -1;
    1cc6:	2401      	movs	r4, #1
    1cc8:	4264      	negs	r4, r4
    1cca:	e003      	b.n	1cd4 <_write+0x40>
	for (; len != 0; --len) {
    1ccc:	0014      	movs	r4, r2
    1cce:	e001      	b.n	1cd4 <_write+0x40>
			return -1;
    1cd0:	2401      	movs	r4, #1
    1cd2:	4264      	negs	r4, r4
	}
	return nChars;
}
    1cd4:	0020      	movs	r0, r4
    1cd6:	bc04      	pop	{r2}
    1cd8:	4690      	mov	r8, r2
    1cda:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1cdc:	200002c8 	.word	0x200002c8
    1ce0:	200002c4 	.word	0x200002c4

00001ce4 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    1ce4:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    1ce6:	4a06      	ldr	r2, [pc, #24]	; (1d00 <_sbrk+0x1c>)
    1ce8:	6812      	ldr	r2, [r2, #0]
    1cea:	2a00      	cmp	r2, #0
    1cec:	d004      	beq.n	1cf8 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    1cee:	4a04      	ldr	r2, [pc, #16]	; (1d00 <_sbrk+0x1c>)
    1cf0:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    1cf2:	18c3      	adds	r3, r0, r3
    1cf4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    1cf6:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    1cf8:	4902      	ldr	r1, [pc, #8]	; (1d04 <_sbrk+0x20>)
    1cfa:	4a01      	ldr	r2, [pc, #4]	; (1d00 <_sbrk+0x1c>)
    1cfc:	6011      	str	r1, [r2, #0]
    1cfe:	e7f6      	b.n	1cee <_sbrk+0xa>
    1d00:	20000294 	.word	0x20000294
    1d04:	20002430 	.word	0x20002430

00001d08 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    1d08:	2001      	movs	r0, #1
    1d0a:	4240      	negs	r0, r0
    1d0c:	4770      	bx	lr

00001d0e <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    1d0e:	2380      	movs	r3, #128	; 0x80
    1d10:	019b      	lsls	r3, r3, #6
    1d12:	604b      	str	r3, [r1, #4]

	return 0;
}
    1d14:	2000      	movs	r0, #0
    1d16:	4770      	bx	lr

00001d18 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    1d18:	2001      	movs	r0, #1
    1d1a:	4770      	bx	lr

00001d1c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    1d1c:	2000      	movs	r0, #0
    1d1e:	4770      	bx	lr

00001d20 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    1d20:	b570      	push	{r4, r5, r6, lr}
    1d22:	b082      	sub	sp, #8
    1d24:	0005      	movs	r5, r0
    1d26:	000e      	movs	r6, r1
	uint16_t temp = 0;
    1d28:	2200      	movs	r2, #0
    1d2a:	466b      	mov	r3, sp
    1d2c:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    1d2e:	4c06      	ldr	r4, [pc, #24]	; (1d48 <usart_serial_getchar+0x28>)
    1d30:	466b      	mov	r3, sp
    1d32:	1d99      	adds	r1, r3, #6
    1d34:	0028      	movs	r0, r5
    1d36:	47a0      	blx	r4
    1d38:	2800      	cmp	r0, #0
    1d3a:	d1f9      	bne.n	1d30 <usart_serial_getchar+0x10>

	*c = temp;
    1d3c:	466b      	mov	r3, sp
    1d3e:	3306      	adds	r3, #6
    1d40:	881b      	ldrh	r3, [r3, #0]
    1d42:	7033      	strb	r3, [r6, #0]
}
    1d44:	b002      	add	sp, #8
    1d46:	bd70      	pop	{r4, r5, r6, pc}
    1d48:	000011cf 	.word	0x000011cf

00001d4c <usart_serial_putchar>:
{
    1d4c:	b570      	push	{r4, r5, r6, lr}
    1d4e:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    1d50:	b28c      	uxth	r4, r1
    1d52:	4e03      	ldr	r6, [pc, #12]	; (1d60 <usart_serial_putchar+0x14>)
    1d54:	0021      	movs	r1, r4
    1d56:	0028      	movs	r0, r5
    1d58:	47b0      	blx	r6
    1d5a:	2800      	cmp	r0, #0
    1d5c:	d1fa      	bne.n	1d54 <usart_serial_putchar+0x8>
}
    1d5e:	bd70      	pop	{r4, r5, r6, pc}
    1d60:	000011a9 	.word	0x000011a9

00001d64 <configure_console>:
#include "config_usart.h"

void configure_console(void)
{
    1d64:	b570      	push	{r4, r5, r6, lr}
    1d66:	b090      	sub	sp, #64	; 0x40
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    1d68:	2380      	movs	r3, #128	; 0x80
    1d6a:	05db      	lsls	r3, r3, #23
    1d6c:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    1d6e:	2300      	movs	r3, #0
    1d70:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    1d72:	22ff      	movs	r2, #255	; 0xff
    1d74:	4669      	mov	r1, sp
    1d76:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    1d78:	2200      	movs	r2, #0
    1d7a:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    1d7c:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
    1d7e:	2196      	movs	r1, #150	; 0x96
    1d80:	0189      	lsls	r1, r1, #6
    1d82:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
    1d84:	2101      	movs	r1, #1
    1d86:	2024      	movs	r0, #36	; 0x24
    1d88:	466c      	mov	r4, sp
    1d8a:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    1d8c:	3001      	adds	r0, #1
    1d8e:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    1d90:	3125      	adds	r1, #37	; 0x25
    1d92:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    1d94:	3101      	adds	r1, #1
    1d96:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    1d98:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    1d9a:	3105      	adds	r1, #5
    1d9c:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    1d9e:	3101      	adds	r1, #1
    1da0:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    1da2:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    1da4:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    1da6:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    1da8:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    1daa:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    1dac:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    1dae:	2313      	movs	r3, #19
    1db0:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    1db2:	7762      	strb	r2, [r4, #29]
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);

	config_usart.baudrate    = SERCOMBAUD;
	config_usart.mux_setting = SERCOMMUX;
    1db4:	2380      	movs	r3, #128	; 0x80
    1db6:	035b      	lsls	r3, r3, #13
    1db8:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = SERCOMPAD0;
    1dba:	4b1e      	ldr	r3, [pc, #120]	; (1e34 <configure_console+0xd0>)
    1dbc:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = SERCOMPAD1;
    1dbe:	4b1e      	ldr	r3, [pc, #120]	; (1e38 <configure_console+0xd4>)
    1dc0:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = SERCOMPAD2;
    1dc2:	2301      	movs	r3, #1
    1dc4:	425b      	negs	r3, r3
    1dc6:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = SERCOMPAD3;
    1dc8:	930f      	str	r3, [sp, #60]	; 0x3c

	while (usart_init(&usart_instance,	 SERCOMMODULE, &config_usart) != STATUS_OK) { }
    1dca:	4d1c      	ldr	r5, [pc, #112]	; (1e3c <configure_console+0xd8>)
    1dcc:	4c1c      	ldr	r4, [pc, #112]	; (1e40 <configure_console+0xdc>)
    1dce:	466a      	mov	r2, sp
    1dd0:	491c      	ldr	r1, [pc, #112]	; (1e44 <configure_console+0xe0>)
    1dd2:	0028      	movs	r0, r5
    1dd4:	47a0      	blx	r4
    1dd6:	2800      	cmp	r0, #0
    1dd8:	d1f9      	bne.n	1dce <configure_console+0x6a>
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    1dda:	4c18      	ldr	r4, [pc, #96]	; (1e3c <configure_console+0xd8>)
    1ddc:	4b1a      	ldr	r3, [pc, #104]	; (1e48 <configure_console+0xe4>)
    1dde:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    1de0:	4a1a      	ldr	r2, [pc, #104]	; (1e4c <configure_console+0xe8>)
    1de2:	4b1b      	ldr	r3, [pc, #108]	; (1e50 <configure_console+0xec>)
    1de4:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    1de6:	4a1b      	ldr	r2, [pc, #108]	; (1e54 <configure_console+0xf0>)
    1de8:	4b1b      	ldr	r3, [pc, #108]	; (1e58 <configure_console+0xf4>)
    1dea:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    1dec:	466a      	mov	r2, sp
    1dee:	4915      	ldr	r1, [pc, #84]	; (1e44 <configure_console+0xe0>)
    1df0:	0020      	movs	r0, r4
    1df2:	4b13      	ldr	r3, [pc, #76]	; (1e40 <configure_console+0xdc>)
    1df4:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    1df6:	4e19      	ldr	r6, [pc, #100]	; (1e5c <configure_console+0xf8>)
    1df8:	6833      	ldr	r3, [r6, #0]
    1dfa:	6898      	ldr	r0, [r3, #8]
    1dfc:	2100      	movs	r1, #0
    1dfe:	4d18      	ldr	r5, [pc, #96]	; (1e60 <configure_console+0xfc>)
    1e00:	47a8      	blx	r5
	setbuf(stdin, NULL);
    1e02:	6833      	ldr	r3, [r6, #0]
    1e04:	6858      	ldr	r0, [r3, #4]
    1e06:	2100      	movs	r1, #0
    1e08:	47a8      	blx	r5
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1e0a:	6825      	ldr	r5, [r4, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1e0c:	0028      	movs	r0, r5
    1e0e:	4b15      	ldr	r3, [pc, #84]	; (1e64 <configure_console+0x100>)
    1e10:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1e12:	231f      	movs	r3, #31
    1e14:	4018      	ands	r0, r3
    1e16:	3b1e      	subs	r3, #30
    1e18:	4083      	lsls	r3, r0
    1e1a:	4a13      	ldr	r2, [pc, #76]	; (1e68 <configure_console+0x104>)
    1e1c:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1e1e:	6822      	ldr	r2, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
    1e20:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1e22:	2b00      	cmp	r3, #0
    1e24:	d1fc      	bne.n	1e20 <configure_console+0xbc>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1e26:	682b      	ldr	r3, [r5, #0]
    1e28:	2202      	movs	r2, #2
    1e2a:	4313      	orrs	r3, r2
    1e2c:	602b      	str	r3, [r5, #0]

	stdio_serial_init(&usart_instance, SERCOMMODULE, &config_usart);
	usart_enable(&usart_instance);
}
    1e2e:	b010      	add	sp, #64	; 0x40
    1e30:	bd70      	pop	{r4, r5, r6, pc}
    1e32:	46c0      	nop			; (mov r8, r8)
    1e34:	00080003 	.word	0x00080003
    1e38:	00090003 	.word	0x00090003
    1e3c:	200002cc 	.word	0x200002cc
    1e40:	00000e6d 	.word	0x00000e6d
    1e44:	42001000 	.word	0x42001000
    1e48:	200002c8 	.word	0x200002c8
    1e4c:	00001d4d 	.word	0x00001d4d
    1e50:	200002c4 	.word	0x200002c4
    1e54:	00001d21 	.word	0x00001d21
    1e58:	200002c0 	.word	0x200002c0
    1e5c:	20000158 	.word	0x20000158
    1e60:	0000344d 	.word	0x0000344d
    1e64:	00000ddd 	.word	0x00000ddd
    1e68:	e000e100 	.word	0xe000e100

00001e6c <drawChar>:

uint8_t xCharPos = 0;
uint8_t yCharPos = 0;

void drawChar(uint8_t character)
{
    1e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e6e:	46d6      	mov	lr, sl
    1e70:	464f      	mov	r7, r9
    1e72:	4646      	mov	r6, r8
    1e74:	b5c0      	push	{r6, r7, lr}
    1e76:	4c2f      	ldr	r4, [pc, #188]	; (1f34 <drawChar+0xc8>)
    1e78:	44a5      	add	sp, r4
    1e7a:	0004      	movs	r4, r0

	const uint8_t TermFont[256][25] = {
    1e7c:	22c8      	movs	r2, #200	; 0xc8
    1e7e:	0152      	lsls	r2, r2, #5
    1e80:	492d      	ldr	r1, [pc, #180]	; (1f38 <drawChar+0xcc>)
    1e82:	4668      	mov	r0, sp
    1e84:	4b2d      	ldr	r3, [pc, #180]	; (1f3c <drawChar+0xd0>)
    1e86:	4798      	blx	r3


	};

	
	int x = abs(xCharPos-79);
    1e88:	4b2d      	ldr	r3, [pc, #180]	; (1f40 <drawChar+0xd4>)
    1e8a:	7818      	ldrb	r0, [r3, #0]
    1e8c:	384f      	subs	r0, #79	; 0x4f
    1e8e:	17c3      	asrs	r3, r0, #31
    1e90:	18c0      	adds	r0, r0, r3
    1e92:	4058      	eors	r0, r3
	int y = (yCharPos);
    1e94:	4b2b      	ldr	r3, [pc, #172]	; (1f44 <drawChar+0xd8>)
    1e96:	7819      	ldrb	r1, [r3, #0]
	REG_PORT_OUTCLR1 = LCD_CS;
    1e98:	2280      	movs	r2, #128	; 0x80
    1e9a:	03d2      	lsls	r2, r2, #15
    1e9c:	4b2a      	ldr	r3, [pc, #168]	; (1f48 <drawChar+0xdc>)
    1e9e:	601a      	str	r2, [r3, #0]
	setXY(x*10,y*20,x*10+9,y*20+19);
    1ea0:	0083      	lsls	r3, r0, #2
    1ea2:	18c0      	adds	r0, r0, r3
    1ea4:	0040      	lsls	r0, r0, #1
    1ea6:	b280      	uxth	r0, r0
    1ea8:	2314      	movs	r3, #20
    1eaa:	4359      	muls	r1, r3
    1eac:	000b      	movs	r3, r1
    1eae:	3313      	adds	r3, #19
    1eb0:	b29b      	uxth	r3, r3
    1eb2:	0002      	movs	r2, r0
    1eb4:	3209      	adds	r2, #9
    1eb6:	b292      	uxth	r2, r2
    1eb8:	4d24      	ldr	r5, [pc, #144]	; (1f4c <drawChar+0xe0>)
    1eba:	47a8      	blx	r5
    1ebc:	00a5      	lsls	r5, r4, #2
    1ebe:	192d      	adds	r5, r5, r4
    1ec0:	00ab      	lsls	r3, r5, #2
    1ec2:	18ed      	adds	r5, r5, r3
    1ec4:	446d      	add	r5, sp
    1ec6:	3401      	adds	r4, #1
    1ec8:	00a3      	lsls	r3, r4, #2
    1eca:	191b      	adds	r3, r3, r4
    1ecc:	009a      	lsls	r2, r3, #2
    1ece:	189b      	adds	r3, r3, r2
    1ed0:	446b      	add	r3, sp
    1ed2:	469a      	mov	sl, r3
			{
				setPixel((fore_Color_High<<8)|fore_Color_Low);
			}
			else
			{
				setPixel((back_Color_High<<8)|back_Color_Low);
    1ed4:	4b1e      	ldr	r3, [pc, #120]	; (1f50 <drawChar+0xe4>)
    1ed6:	4699      	mov	r9, r3
    1ed8:	4b1e      	ldr	r3, [pc, #120]	; (1f54 <drawChar+0xe8>)
    1eda:	4698      	mov	r8, r3
    1edc:	4f1e      	ldr	r7, [pc, #120]	; (1f58 <drawChar+0xec>)
				setPixel((fore_Color_High<<8)|fore_Color_Low);
    1ede:	4e1f      	ldr	r6, [pc, #124]	; (1f5c <drawChar+0xf0>)
    1ee0:	e019      	b.n	1f16 <drawChar+0xaa>
				setPixel((back_Color_High<<8)|back_Color_Low);
    1ee2:	464b      	mov	r3, r9
    1ee4:	8818      	ldrh	r0, [r3, #0]
    1ee6:	0200      	lsls	r0, r0, #8
    1ee8:	4643      	mov	r3, r8
    1eea:	881b      	ldrh	r3, [r3, #0]
    1eec:	4318      	orrs	r0, r3
    1eee:	b280      	uxth	r0, r0
    1ef0:	47b8      	blx	r7
		for(int j=0;j<8;j++)
    1ef2:	3c01      	subs	r4, #1
    1ef4:	d30c      	bcc.n	1f10 <drawChar+0xa4>
			if((TermFont[character][i]&(1<<(7-j)))!=0)
    1ef6:	782b      	ldrb	r3, [r5, #0]
    1ef8:	4123      	asrs	r3, r4
    1efa:	07db      	lsls	r3, r3, #31
    1efc:	d5f1      	bpl.n	1ee2 <drawChar+0x76>
				setPixel((fore_Color_High<<8)|fore_Color_Low);
    1efe:	8830      	ldrh	r0, [r6, #0]
    1f00:	0200      	lsls	r0, r0, #8
    1f02:	4b17      	ldr	r3, [pc, #92]	; (1f60 <drawChar+0xf4>)
    1f04:	881b      	ldrh	r3, [r3, #0]
    1f06:	4318      	orrs	r0, r3
    1f08:	b280      	uxth	r0, r0
    1f0a:	4b13      	ldr	r3, [pc, #76]	; (1f58 <drawChar+0xec>)
    1f0c:	4798      	blx	r3
    1f0e:	e7f0      	b.n	1ef2 <drawChar+0x86>
    1f10:	3501      	adds	r5, #1
	for(uint8_t i=0; i <= 24; i++)
    1f12:	4555      	cmp	r5, sl
    1f14:	d001      	beq.n	1f1a <drawChar+0xae>
{
    1f16:	2407      	movs	r4, #7
    1f18:	e7ed      	b.n	1ef6 <drawChar+0x8a>
			}

		}
	}
	REG_PORT_OUTSET1 = LCD_CS;
    1f1a:	2280      	movs	r2, #128	; 0x80
    1f1c:	03d2      	lsls	r2, r2, #15
    1f1e:	4b11      	ldr	r3, [pc, #68]	; (1f64 <drawChar+0xf8>)
    1f20:	601a      	str	r2, [r3, #0]

}
    1f22:	23c8      	movs	r3, #200	; 0xc8
    1f24:	015b      	lsls	r3, r3, #5
    1f26:	449d      	add	sp, r3
    1f28:	bc1c      	pop	{r2, r3, r4}
    1f2a:	4690      	mov	r8, r2
    1f2c:	4699      	mov	r9, r3
    1f2e:	46a2      	mov	sl, r4
    1f30:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f32:	46c0      	nop			; (mov r8, r8)
    1f34:	ffffe700 	.word	0xffffe700
    1f38:	00004a40 	.word	0x00004a40
    1f3c:	00003321 	.word	0x00003321
    1f40:	20000298 	.word	0x20000298
    1f44:	20000299 	.word	0x20000299
    1f48:	41004494 	.word	0x41004494
    1f4c:	000029b9 	.word	0x000029b9
    1f50:	200003d2 	.word	0x200003d2
    1f54:	200003cc 	.word	0x200003cc
    1f58:	00002b99 	.word	0x00002b99
    1f5c:	200003ce 	.word	0x200003ce
    1f60:	200003d0 	.word	0x200003d0
    1f64:	41004498 	.word	0x41004498

00001f68 <newLine>:

void newLine(void)
{
    1f68:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f6a:	46de      	mov	lr, fp
    1f6c:	4657      	mov	r7, sl
    1f6e:	464e      	mov	r6, r9
    1f70:	4645      	mov	r5, r8
    1f72:	b5e0      	push	{r5, r6, r7, lr}
    1f74:	4c5a      	ldr	r4, [pc, #360]	; (20e0 <STACK_SIZE+0xe0>)
    1f76:	44a5      	add	sp, r4
	*/
	
	uint8_t rowPixel[800];
	
	//First, set the MADCLR registers so 0,0 is in the top left
	REG_PORT_OUTCLR1 = LCD_CS;
    1f78:	4b5a      	ldr	r3, [pc, #360]	; (20e4 <STACK_SIZE+0xe4>)
    1f7a:	2580      	movs	r5, #128	; 0x80
    1f7c:	03ed      	lsls	r5, r5, #15
    1f7e:	601d      	str	r5, [r3, #0]
	REG_PORT_OUTCLR1 = LCD_DC;
    1f80:	2680      	movs	r6, #128	; 0x80
    1f82:	0436      	lsls	r6, r6, #16
    1f84:	601e      	str	r6, [r3, #0]
	LCD_Write_COM16(0x36, 0x00);
    1f86:	2100      	movs	r1, #0
    1f88:	2036      	movs	r0, #54	; 0x36
    1f8a:	4b57      	ldr	r3, [pc, #348]	; (20e8 <STACK_SIZE+0xe8>)
    1f8c:	4798      	blx	r3
	REG_PORT_OUTSET1 = LCD_DC;
    1f8e:	4c57      	ldr	r4, [pc, #348]	; (20ec <STACK_SIZE+0xec>)
    1f90:	6026      	str	r6, [r4, #0]
	LCD_Write_DATA8(0x00);
    1f92:	2000      	movs	r0, #0
    1f94:	4b56      	ldr	r3, [pc, #344]	; (20f0 <STACK_SIZE+0xf0>)
    1f96:	4798      	blx	r3
	REG_PORT_OUTSET1 = LCD_CS;
    1f98:	6025      	str	r5, [r4, #0]

	
	for(uint16_t row = 0 ; row < 460 ; row++)
    1f9a:	2300      	movs	r3, #0
    1f9c:	9300      	str	r3, [sp, #0]
	{
		//Per page 40 of datasheet (5.1.2.7, 16-bit
		//parallel interface for data ram read.
		REG_PORT_OUTCLR1 = LCD_CS;
    1f9e:	4b51      	ldr	r3, [pc, #324]	; (20e4 <STACK_SIZE+0xe4>)
    1fa0:	4698      	mov	r8, r3
		setXY(0, row+20, 799, row+20);
		//Send'Memory read' command 0x2E00, no data bit
		LCD_Write_COM16(0x2E,0x00);
		REG_PORT_OUTSET1 = LCD_DC;
    1fa2:	0027      	movs	r7, r4
		
		
		//Read pixel data into the display	
		for(uint16_t getpixel = 0 ; getpixel < 800 ; getpixel++)
		{
			REG_PORT_OUTCLR1 = LCD_RD;
    1fa4:	2680      	movs	r6, #128	; 0x80
    1fa6:	0276      	lsls	r6, r6, #9
    1fa8:	e046      	b.n	2038 <STACK_SIZE+0x38>
			//This can be expanded with else if for the MSBs
			//of all the colors; see datasheet page 40.
			if((PORT->Group[1].IN.reg & PORT_PB07) != 0)
				rowPixel[getpixel] = 0xFF;
			else
				rowPixel[getpixel] = 0x00;
    1faa:	4653      	mov	r3, sl
    1fac:	7023      	strb	r3, [r4, #0]
			//dummy read, because pixel data broken up
			//per datasheet page 40. Everything after
			//the dummy write is BLUE pixels. Do we ever
			//need blue? IDK.
			
			REG_PORT_OUTCLR1 = LCD_RD;
    1fae:	4643      	mov	r3, r8
    1fb0:	601e      	str	r6, [r3, #0]
			REG_PORT_OUTSET1 = LCD_RD;
    1fb2:	603e      	str	r6, [r7, #0]
    1fb4:	3401      	adds	r4, #1
		for(uint16_t getpixel = 0 ; getpixel < 800 ; getpixel++)
    1fb6:	4564      	cmp	r4, ip
    1fb8:	d008      	beq.n	1fcc <newLine+0x64>
			REG_PORT_OUTCLR1 = LCD_RD;
    1fba:	4643      	mov	r3, r8
    1fbc:	601e      	str	r6, [r3, #0]
			REG_PORT_OUTSET1 = LCD_RD;
    1fbe:	603e      	str	r6, [r7, #0]
			if((PORT->Group[1].IN.reg & PORT_PB07) != 0)
    1fc0:	5843      	ldr	r3, [r0, r1]
    1fc2:	421a      	tst	r2, r3
    1fc4:	d0f1      	beq.n	1faa <newLine+0x42>
				rowPixel[getpixel] = 0xFF;
    1fc6:	464b      	mov	r3, r9
    1fc8:	7023      	strb	r3, [r4, #0]
    1fca:	e7f0      	b.n	1fae <newLine+0x46>
    1fcc:	9401      	str	r4, [sp, #4]
		}
		
		REG_PORT_OUTSET1 = LCD_DC;
    1fce:	2380      	movs	r3, #128	; 0x80
    1fd0:	041b      	lsls	r3, r3, #16
    1fd2:	603b      	str	r3, [r7, #0]
		REG_PORT_DIRSET1 = 0x0000FFFF;
    1fd4:	4a47      	ldr	r2, [pc, #284]	; (20f4 <STACK_SIZE+0xf4>)
    1fd6:	4b48      	ldr	r3, [pc, #288]	; (20f8 <STACK_SIZE+0xf8>)
    1fd8:	601a      	str	r2, [r3, #0]
		
		//now, read out that line of the display
		setXY(0, row, 799, row);	
    1fda:	9900      	ldr	r1, [sp, #0]
    1fdc:	000b      	movs	r3, r1
    1fde:	4a47      	ldr	r2, [pc, #284]	; (20fc <STACK_SIZE+0xfc>)
    1fe0:	2000      	movs	r0, #0
    1fe2:	4c47      	ldr	r4, [pc, #284]	; (2100 <STACK_SIZE+0x100>)
    1fe4:	47a0      	blx	r4
		for(uint16_t writepixel = 0 ; writepixel < 800 ; writepixel++)
		{
			if((rowPixel[writepixel] == 0xFF))
				setPixel((fore_Color_High<<8)|fore_Color_Low);
			else
				setPixel((back_Color_High<<8)|back_Color_Low);
    1fe6:	4b47      	ldr	r3, [pc, #284]	; (2104 <STACK_SIZE+0x104>)
    1fe8:	469b      	mov	fp, r3
    1fea:	4b47      	ldr	r3, [pc, #284]	; (2108 <STACK_SIZE+0x108>)
    1fec:	469a      	mov	sl, r3
    1fee:	4b47      	ldr	r3, [pc, #284]	; (210c <STACK_SIZE+0x10c>)
    1ff0:	4699      	mov	r9, r3
    1ff2:	9c01      	ldr	r4, [sp, #4]
    1ff4:	e00b      	b.n	200e <STACK_SIZE+0xe>
				setPixel((fore_Color_High<<8)|fore_Color_Low);
    1ff6:	4b46      	ldr	r3, [pc, #280]	; (2110 <STACK_SIZE+0x110>)
    1ff8:	8818      	ldrh	r0, [r3, #0]
    1ffa:	0200      	lsls	r0, r0, #8
    1ffc:	4b45      	ldr	r3, [pc, #276]	; (2114 <STACK_SIZE+0x114>)
    1ffe:	881b      	ldrh	r3, [r3, #0]
    2000:	4318      	orrs	r0, r3
    2002:	b280      	uxth	r0, r0
    2004:	4b41      	ldr	r3, [pc, #260]	; (210c <STACK_SIZE+0x10c>)
    2006:	4798      	blx	r3
    2008:	3501      	adds	r5, #1
		for(uint16_t writepixel = 0 ; writepixel < 800 ; writepixel++)
    200a:	42ac      	cmp	r4, r5
    200c:	d00b      	beq.n	2026 <STACK_SIZE+0x26>
			if((rowPixel[writepixel] == 0xFF))
    200e:	782b      	ldrb	r3, [r5, #0]
    2010:	2bff      	cmp	r3, #255	; 0xff
    2012:	d0f0      	beq.n	1ff6 <newLine+0x8e>
				setPixel((back_Color_High<<8)|back_Color_Low);
    2014:	465b      	mov	r3, fp
    2016:	8818      	ldrh	r0, [r3, #0]
    2018:	0200      	lsls	r0, r0, #8
    201a:	4653      	mov	r3, sl
    201c:	881b      	ldrh	r3, [r3, #0]
    201e:	4318      	orrs	r0, r3
    2020:	b280      	uxth	r0, r0
    2022:	47c8      	blx	r9
    2024:	e7f0      	b.n	2008 <STACK_SIZE+0x8>
	for(uint16_t row = 0 ; row < 460 ; row++)
    2026:	9b00      	ldr	r3, [sp, #0]
    2028:	3301      	adds	r3, #1
    202a:	b29b      	uxth	r3, r3
    202c:	001a      	movs	r2, r3
    202e:	9300      	str	r3, [sp, #0]
    2030:	23e6      	movs	r3, #230	; 0xe6
    2032:	005b      	lsls	r3, r3, #1
    2034:	429a      	cmp	r2, r3
    2036:	d031      	beq.n	209c <STACK_SIZE+0x9c>
		REG_PORT_OUTCLR1 = LCD_CS;
    2038:	4643      	mov	r3, r8
    203a:	2280      	movs	r2, #128	; 0x80
    203c:	03d2      	lsls	r2, r2, #15
    203e:	601a      	str	r2, [r3, #0]
		setXY(0, row+20, 799, row+20);
    2040:	9900      	ldr	r1, [sp, #0]
    2042:	3114      	adds	r1, #20
    2044:	b289      	uxth	r1, r1
    2046:	000b      	movs	r3, r1
    2048:	4a2c      	ldr	r2, [pc, #176]	; (20fc <STACK_SIZE+0xfc>)
    204a:	2000      	movs	r0, #0
    204c:	4c2c      	ldr	r4, [pc, #176]	; (2100 <STACK_SIZE+0x100>)
    204e:	47a0      	blx	r4
		LCD_Write_COM16(0x2E,0x00);
    2050:	2100      	movs	r1, #0
    2052:	202e      	movs	r0, #46	; 0x2e
    2054:	4b24      	ldr	r3, [pc, #144]	; (20e8 <STACK_SIZE+0xe8>)
    2056:	4798      	blx	r3
		REG_PORT_OUTSET1 = LCD_DC;
    2058:	2380      	movs	r3, #128	; 0x80
    205a:	041b      	lsls	r3, r3, #16
    205c:	603b      	str	r3, [r7, #0]
		REG_PORT_OUTCLR1 = LCD_RD;
    205e:	4643      	mov	r3, r8
    2060:	2280      	movs	r2, #128	; 0x80
    2062:	0252      	lsls	r2, r2, #9
    2064:	601a      	str	r2, [r3, #0]
		REG_PORT_OUTSET1 = LCD_RD;
    2066:	603a      	str	r2, [r7, #0]
		REG_PORT_DIRCLR1 = PORT_PB07;
    2068:	2280      	movs	r2, #128	; 0x80
    206a:	4b2b      	ldr	r3, [pc, #172]	; (2118 <STACK_SIZE+0x118>)
    206c:	601a      	str	r2, [r3, #0]
		PORT->Group[1].PINCFG[7].bit.INEN = 1;
    206e:	4a2b      	ldr	r2, [pc, #172]	; (211c <STACK_SIZE+0x11c>)
    2070:	23c7      	movs	r3, #199	; 0xc7
    2072:	5cd1      	ldrb	r1, [r2, r3]
    2074:	2002      	movs	r0, #2
    2076:	4301      	orrs	r1, r0
    2078:	54d1      	strb	r1, [r2, r3]
		PORT->Group[1].PINCFG[7].bit.PULLEN = 1;
    207a:	5cd1      	ldrb	r1, [r2, r3]
    207c:	2004      	movs	r0, #4
    207e:	4301      	orrs	r1, r0
    2080:	54d1      	strb	r1, [r2, r3]
    2082:	ad02      	add	r5, sp, #8
    2084:	abca      	add	r3, sp, #808	; 0x328
    2086:	469c      	mov	ip, r3
    2088:	9501      	str	r5, [sp, #4]
			if((PORT->Group[1].IN.reg & PORT_PB07) != 0)
    208a:	0010      	movs	r0, r2
    208c:	21a0      	movs	r1, #160	; 0xa0
    208e:	2280      	movs	r2, #128	; 0x80
				rowPixel[getpixel] = 0x00;
    2090:	2300      	movs	r3, #0
    2092:	469a      	mov	sl, r3
				rowPixel[getpixel] = 0xFF;
    2094:	33ff      	adds	r3, #255	; 0xff
    2096:	4699      	mov	r9, r3
    2098:	002c      	movs	r4, r5
    209a:	e78e      	b.n	1fba <newLine+0x52>
		}
	}
	//return MADCLR registers to their original state
	REG_PORT_OUTCLR1 = LCD_DC;
    209c:	2580      	movs	r5, #128	; 0x80
    209e:	042d      	lsls	r5, r5, #16
    20a0:	4b10      	ldr	r3, [pc, #64]	; (20e4 <STACK_SIZE+0xe4>)
    20a2:	601d      	str	r5, [r3, #0]
	LCD_Write_COM16(0x36, 0x00);
    20a4:	2100      	movs	r1, #0
    20a6:	2036      	movs	r0, #54	; 0x36
    20a8:	4b0f      	ldr	r3, [pc, #60]	; (20e8 <STACK_SIZE+0xe8>)
    20aa:	4798      	blx	r3
	REG_PORT_OUTSET1 = LCD_DC;
    20ac:	4c0f      	ldr	r4, [pc, #60]	; (20ec <STACK_SIZE+0xec>)
    20ae:	6025      	str	r5, [r4, #0]
	LCD_Write_DATA8(0x80);
    20b0:	2080      	movs	r0, #128	; 0x80
    20b2:	4b0f      	ldr	r3, [pc, #60]	; (20f0 <STACK_SIZE+0xf0>)
    20b4:	4798      	blx	r3
	REG_PORT_OUTSET1 = LCD_CS;
    20b6:	2380      	movs	r3, #128	; 0x80
    20b8:	03db      	lsls	r3, r3, #15
    20ba:	6023      	str	r3, [r4, #0]
	
	//finally, clear the last character line of the display
	fillRectBackColor(0, 460, 799, 480);
    20bc:	23f0      	movs	r3, #240	; 0xf0
    20be:	005b      	lsls	r3, r3, #1
    20c0:	4a0e      	ldr	r2, [pc, #56]	; (20fc <STACK_SIZE+0xfc>)
    20c2:	21e6      	movs	r1, #230	; 0xe6
    20c4:	0049      	lsls	r1, r1, #1
    20c6:	2000      	movs	r0, #0
    20c8:	4c15      	ldr	r4, [pc, #84]	; (2120 <STACK_SIZE+0x120>)
    20ca:	47a0      	blx	r4
}
    20cc:	23cb      	movs	r3, #203	; 0xcb
    20ce:	009b      	lsls	r3, r3, #2
    20d0:	449d      	add	sp, r3
    20d2:	bc3c      	pop	{r2, r3, r4, r5}
    20d4:	4690      	mov	r8, r2
    20d6:	4699      	mov	r9, r3
    20d8:	46a2      	mov	sl, r4
    20da:	46ab      	mov	fp, r5
    20dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    20de:	46c0      	nop			; (mov r8, r8)
    20e0:	fffffcd4 	.word	0xfffffcd4
    20e4:	41004494 	.word	0x41004494
    20e8:	00002c05 	.word	0x00002c05
    20ec:	41004498 	.word	0x41004498
    20f0:	00002c35 	.word	0x00002c35
    20f4:	0000ffff 	.word	0x0000ffff
    20f8:	41004488 	.word	0x41004488
    20fc:	0000031f 	.word	0x0000031f
    2100:	000029b9 	.word	0x000029b9
    2104:	200003d2 	.word	0x200003d2
    2108:	200003cc 	.word	0x200003cc
    210c:	00002b99 	.word	0x00002b99
    2110:	200003ce 	.word	0x200003ce
    2114:	200003d0 	.word	0x200003d0
    2118:	41004484 	.word	0x41004484
    211c:	41004400 	.word	0x41004400
    2120:	00002ad1 	.word	0x00002ad1

00002124 <writeString>:

void writeString(char str[])
{
    2124:	b5f0      	push	{r4, r5, r6, r7, lr}
    2126:	46c6      	mov	lr, r8
    2128:	b500      	push	{lr}
    212a:	0005      	movs	r5, r0
	int length = strlen(str);
    212c:	4b0c      	ldr	r3, [pc, #48]	; (2160 <writeString+0x3c>)
    212e:	4798      	blx	r3
	for(int i = 0; i < length; i++)
    2130:	2800      	cmp	r0, #0
    2132:	dd11      	ble.n	2158 <writeString+0x34>
    2134:	002c      	movs	r4, r5
    2136:	182d      	adds	r5, r5, r0
	{
		drawChar(str[i]);
    2138:	4f0a      	ldr	r7, [pc, #40]	; (2164 <writeString+0x40>)
		if(xCharPos <= 80)
    213a:	4e0b      	ldr	r6, [pc, #44]	; (2168 <writeString+0x44>)
		xCharPos++;
    213c:	46b0      	mov	r8, r6
    213e:	e002      	b.n	2146 <writeString+0x22>
    2140:	3401      	adds	r4, #1
	for(int i = 0; i < length; i++)
    2142:	42ac      	cmp	r4, r5
    2144:	d008      	beq.n	2158 <writeString+0x34>
		drawChar(str[i]);
    2146:	7820      	ldrb	r0, [r4, #0]
    2148:	47b8      	blx	r7
		if(xCharPos <= 80)
    214a:	7833      	ldrb	r3, [r6, #0]
    214c:	2b50      	cmp	r3, #80	; 0x50
    214e:	d8f7      	bhi.n	2140 <writeString+0x1c>
		xCharPos++;
    2150:	3301      	adds	r3, #1
    2152:	4642      	mov	r2, r8
    2154:	7013      	strb	r3, [r2, #0]
    2156:	e7f3      	b.n	2140 <writeString+0x1c>
	}
    2158:	bc04      	pop	{r2}
    215a:	4690      	mov	r8, r2
    215c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    215e:	46c0      	nop			; (mov r8, r8)
    2160:	000035b9 	.word	0x000035b9
    2164:	00001e6d 	.word	0x00001e6d
    2168:	20000298 	.word	0x20000298

0000216c <scanCodesContains>:

bool scanCodesContains(int scanCode)
{
	for(int i = 0 ; i < 70 ; i++)
	{
		if(scanCodes[i] == scanCode)
    216c:	4b09      	ldr	r3, [pc, #36]	; (2194 <scanCodesContains+0x28>)
    216e:	681b      	ldr	r3, [r3, #0]
    2170:	4298      	cmp	r0, r3
    2172:	d00b      	beq.n	218c <scanCodesContains+0x20>
    2174:	4a07      	ldr	r2, [pc, #28]	; (2194 <scanCodesContains+0x28>)
    2176:	1d13      	adds	r3, r2, #4
    2178:	3219      	adds	r2, #25
    217a:	32ff      	adds	r2, #255	; 0xff
    217c:	6819      	ldr	r1, [r3, #0]
    217e:	4281      	cmp	r1, r0
    2180:	d006      	beq.n	2190 <scanCodesContains+0x24>
    2182:	3304      	adds	r3, #4
	for(int i = 0 ; i < 70 ; i++)
    2184:	4293      	cmp	r3, r2
    2186:	d1f9      	bne.n	217c <scanCodesContains+0x10>
		{
			return true;
		}
	}
	return false;
    2188:	2000      	movs	r0, #0
    218a:	e002      	b.n	2192 <scanCodesContains+0x26>
			return true;
    218c:	2001      	movs	r0, #1
    218e:	e000      	b.n	2192 <scanCodesContains+0x26>
    2190:	2001      	movs	r0, #1
}
    2192:	4770      	bx	lr
    2194:	2000003c 	.word	0x2000003c

00002198 <keyDown>:

bool keyDown(int scancode)
{
	for(int i = 0 ; i < 20 ; i++)
	{
		if(keyDownBuffer[i] == scancode)
    2198:	4b09      	ldr	r3, [pc, #36]	; (21c0 <keyDown+0x28>)
    219a:	781b      	ldrb	r3, [r3, #0]
    219c:	4298      	cmp	r0, r3
    219e:	d00a      	beq.n	21b6 <keyDown+0x1e>
    21a0:	4907      	ldr	r1, [pc, #28]	; (21c0 <keyDown+0x28>)
    21a2:	1c4b      	adds	r3, r1, #1
    21a4:	3114      	adds	r1, #20
    21a6:	781a      	ldrb	r2, [r3, #0]
    21a8:	4282      	cmp	r2, r0
    21aa:	d006      	beq.n	21ba <keyDown+0x22>
    21ac:	3301      	adds	r3, #1
	for(int i = 0 ; i < 20 ; i++)
    21ae:	428b      	cmp	r3, r1
    21b0:	d1f9      	bne.n	21a6 <keyDown+0xe>
		{
			return true;
		}	
	}
	return false;
    21b2:	2000      	movs	r0, #0
}
    21b4:	4770      	bx	lr
			return true;
    21b6:	2001      	movs	r0, #1
    21b8:	e7fc      	b.n	21b4 <keyDown+0x1c>
    21ba:	2001      	movs	r0, #1
    21bc:	e7fa      	b.n	21b4 <keyDown+0x1c>
    21be:	46c0      	nop			; (mov r8, r8)
    21c0:	20000014 	.word	0x20000014

000021c4 <removeFromKeyDown>:

void removeFromKeyDown(int scancode)
{
    21c4:	b510      	push	{r4, lr}
    21c6:	4b07      	ldr	r3, [pc, #28]	; (21e4 <removeFromKeyDown+0x20>)
    21c8:	0019      	movs	r1, r3
    21ca:	3114      	adds	r1, #20
	for(int i = 0 ; i < 20 ; i++)
	{
		if(keyDownBuffer[i] == scancode)
		{
			keyDownBuffer[i] = 0xFF;
    21cc:	24ff      	movs	r4, #255	; 0xff
    21ce:	e002      	b.n	21d6 <removeFromKeyDown+0x12>
    21d0:	3301      	adds	r3, #1
	for(int i = 0 ; i < 20 ; i++)
    21d2:	428b      	cmp	r3, r1
    21d4:	d004      	beq.n	21e0 <removeFromKeyDown+0x1c>
		if(keyDownBuffer[i] == scancode)
    21d6:	781a      	ldrb	r2, [r3, #0]
    21d8:	4282      	cmp	r2, r0
    21da:	d1f9      	bne.n	21d0 <removeFromKeyDown+0xc>
			keyDownBuffer[i] = 0xFF;
    21dc:	701c      	strb	r4, [r3, #0]
    21de:	e7f7      	b.n	21d0 <removeFromKeyDown+0xc>
		}
	}
}
    21e0:	bd10      	pop	{r4, pc}
    21e2:	46c0      	nop			; (mov r8, r8)
    21e4:	20000014 	.word	0x20000014

000021e8 <readKeyboard>:
{
    21e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    21ea:	46de      	mov	lr, fp
    21ec:	4657      	mov	r7, sl
    21ee:	464e      	mov	r6, r9
    21f0:	4645      	mov	r5, r8
    21f2:	b5e0      	push	{r5, r6, r7, lr}
    21f4:	b083      	sub	sp, #12
    21f6:	4e6d      	ldr	r6, [pc, #436]	; (23ac <readKeyboard+0x1c4>)
    21f8:	0031      	movs	r1, r6
    21fa:	3119      	adds	r1, #25
    21fc:	31ff      	adds	r1, #255	; 0xff
    21fe:	0033      	movs	r3, r6
		scanCodes[i] = 0xFF;
    2200:	22ff      	movs	r2, #255	; 0xff
    2202:	c304      	stmia	r3!, {r2}
	for(i = 0 ; i < 70 ; i++)
    2204:	428b      	cmp	r3, r1
    2206:	d1fc      	bne.n	2202 <readKeyboard+0x1a>
	PORT->Group[0].WRCONFIG.bit.DRVSTR = 1;
    2208:	4a69      	ldr	r2, [pc, #420]	; (23b0 <readKeyboard+0x1c8>)
    220a:	6a91      	ldr	r1, [r2, #40]	; 0x28
    220c:	2380      	movs	r3, #128	; 0x80
    220e:	03db      	lsls	r3, r3, #15
    2210:	430b      	orrs	r3, r1
    2212:	6293      	str	r3, [r2, #40]	; 0x28
    2214:	4c67      	ldr	r4, [pc, #412]	; (23b4 <readKeyboard+0x1cc>)
    2216:	341c      	adds	r4, #28
    2218:	4b66      	ldr	r3, [pc, #408]	; (23b4 <readKeyboard+0x1cc>)
		REG_PORT_DIRSET0 = kb_col[i];
    221a:	4867      	ldr	r0, [pc, #412]	; (23b8 <readKeyboard+0x1d0>)
		REG_PORT_OUTCLR0 = kb_col[i];
    221c:	4967      	ldr	r1, [pc, #412]	; (23bc <readKeyboard+0x1d4>)
		REG_PORT_DIRSET0 = kb_col[i];
    221e:	681a      	ldr	r2, [r3, #0]
    2220:	6002      	str	r2, [r0, #0]
		REG_PORT_OUTCLR0 = kb_col[i];
    2222:	cb04      	ldmia	r3!, {r2}
    2224:	600a      	str	r2, [r1, #0]
	for (i = 0; i < NUM_COL; i++) {
    2226:	42a3      	cmp	r3, r4
    2228:	d1f9      	bne.n	221e <readKeyboard+0x36>
    222a:	2200      	movs	r2, #0
		REG_PORT_DIRCLR0 = kb_row[i];
    222c:	4b64      	ldr	r3, [pc, #400]	; (23c0 <readKeyboard+0x1d8>)
    222e:	469c      	mov	ip, r3
    2230:	4f64      	ldr	r7, [pc, #400]	; (23c4 <readKeyboard+0x1dc>)
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.PULLEN = 1;
    2232:	4d65      	ldr	r5, [pc, #404]	; (23c8 <readKeyboard+0x1e0>)
    2234:	2404      	movs	r4, #4
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.INEN = 1;
    2236:	2002      	movs	r0, #2
		REG_PORT_DIRCLR0 = kb_row[i];
    2238:	4663      	mov	r3, ip
    223a:	58d3      	ldr	r3, [r2, r3]
    223c:	603b      	str	r3, [r7, #0]
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.PULLEN = 1;
    223e:	5953      	ldr	r3, [r2, r5]
    2240:	4962      	ldr	r1, [pc, #392]	; (23cc <readKeyboard+0x1e4>)
    2242:	4688      	mov	r8, r1
    2244:	4443      	add	r3, r8
    2246:	7819      	ldrb	r1, [r3, #0]
    2248:	4321      	orrs	r1, r4
    224a:	7019      	strb	r1, [r3, #0]
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.INEN = 1;
    224c:	7819      	ldrb	r1, [r3, #0]
    224e:	4301      	orrs	r1, r0
    2250:	7019      	strb	r1, [r3, #0]
    2252:	3204      	adds	r2, #4
	for (i = 0; i < NUM_ROW; i++) {
    2254:	2a28      	cmp	r2, #40	; 0x28
    2256:	d1ef      	bne.n	2238 <readKeyboard+0x50>
    2258:	4b56      	ldr	r3, [pc, #344]	; (23b4 <readKeyboard+0x1cc>)
    225a:	4699      	mov	r9, r3
    225c:	2300      	movs	r3, #0
    225e:	4698      	mov	r8, r3
    2260:	2200      	movs	r2, #0
		REG_PORT_OUTSET0 = kb_col[i];
    2262:	4b5b      	ldr	r3, [pc, #364]	; (23d0 <readKeyboard+0x1e8>)
    2264:	469b      	mov	fp, r3
			if((PORT->Group[0].IN.reg & kb_row[j]) != 0) {
    2266:	4d52      	ldr	r5, [pc, #328]	; (23b0 <readKeyboard+0x1c8>)
				scanCodes[scanCodeIndex] = (i * NUM_ROW) + j;
    2268:	4b50      	ldr	r3, [pc, #320]	; (23ac <readKeyboard+0x1c4>)
    226a:	469c      	mov	ip, r3
		REG_PORT_OUTCLR0 = kb_col[i];
    226c:	4b53      	ldr	r3, [pc, #332]	; (23bc <readKeyboard+0x1d4>)
    226e:	469a      	mov	sl, r3
    2270:	9601      	str	r6, [sp, #4]
    2272:	464e      	mov	r6, r9
    2274:	4647      	mov	r7, r8
    2276:	e015      	b.n	22a4 <readKeyboard+0xbc>
    2278:	3304      	adds	r3, #4
    227a:	3101      	adds	r1, #1
		for (j = 0; j < NUM_ROW; j++) {	
    227c:	42a3      	cmp	r3, r4
    227e:	d008      	beq.n	2292 <readKeyboard+0xaa>
			if((PORT->Group[0].IN.reg & kb_row[j]) != 0) {
    2280:	6a28      	ldr	r0, [r5, #32]
    2282:	681e      	ldr	r6, [r3, #0]
    2284:	4206      	tst	r6, r0
    2286:	d0f7      	beq.n	2278 <readKeyboard+0x90>
				scanCodes[scanCodeIndex] = (i * NUM_ROW) + j;
    2288:	0090      	lsls	r0, r2, #2
    228a:	4666      	mov	r6, ip
    228c:	5181      	str	r1, [r0, r6]
				scanCodeIndex++;
    228e:	3201      	adds	r2, #1
    2290:	e7f2      	b.n	2278 <readKeyboard+0x90>
    2292:	9e00      	ldr	r6, [sp, #0]
		REG_PORT_OUTCLR0 = kb_col[i];
    2294:	4649      	mov	r1, r9
    2296:	6809      	ldr	r1, [r1, #0]
    2298:	4650      	mov	r0, sl
    229a:	6001      	str	r1, [r0, #0]
    229c:	3604      	adds	r6, #4
    229e:	370a      	adds	r7, #10
	for (i = 0; i < NUM_COL; i++) {
    22a0:	2f46      	cmp	r7, #70	; 0x46
    22a2:	d00a      	beq.n	22ba <readKeyboard+0xd2>
    22a4:	46b1      	mov	r9, r6
		REG_PORT_OUTSET0 = kb_col[i];
    22a6:	465b      	mov	r3, fp
    22a8:	6831      	ldr	r1, [r6, #0]
    22aa:	6019      	str	r1, [r3, #0]
    22ac:	4b44      	ldr	r3, [pc, #272]	; (23c0 <readKeyboard+0x1d8>)
    22ae:	4698      	mov	r8, r3
    22b0:	001c      	movs	r4, r3
    22b2:	3428      	adds	r4, #40	; 0x28
    22b4:	0039      	movs	r1, r7
    22b6:	9600      	str	r6, [sp, #0]
    22b8:	e7e2      	b.n	2280 <readKeyboard+0x98>
    22ba:	4647      	mov	r7, r8
    22bc:	9e01      	ldr	r6, [sp, #4]
    22be:	4641      	mov	r1, r8
		REG_PORT_DIRSET0 = kb_row[i];
    22c0:	4d3d      	ldr	r5, [pc, #244]	; (23b8 <readKeyboard+0x1d0>)
		REG_PORT_OUTCLR0 = kb_row[i];
    22c2:	4c3e      	ldr	r4, [pc, #248]	; (23bc <readKeyboard+0x1d4>)
		REG_PORT_DIRSET0 = kb_row[i];
    22c4:	6808      	ldr	r0, [r1, #0]
    22c6:	6028      	str	r0, [r5, #0]
		REG_PORT_OUTCLR0 = kb_row[i];
    22c8:	c901      	ldmia	r1!, {r0}
    22ca:	6020      	str	r0, [r4, #0]
	for (i = 0; i < NUM_ROW; i++) {
    22cc:	4299      	cmp	r1, r3
    22ce:	d1f9      	bne.n	22c4 <readKeyboard+0xdc>
    22d0:	2100      	movs	r1, #0
		REG_PORT_DIRCLR0 = kb_col[i];
    22d2:	4b38      	ldr	r3, [pc, #224]	; (23b4 <readKeyboard+0x1cc>)
    22d4:	4699      	mov	r9, r3
    22d6:	4b3b      	ldr	r3, [pc, #236]	; (23c4 <readKeyboard+0x1dc>)
    22d8:	4698      	mov	r8, r3
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.PULLEN = 1;
    22da:	4b3e      	ldr	r3, [pc, #248]	; (23d4 <readKeyboard+0x1ec>)
    22dc:	469c      	mov	ip, r3
    22de:	2504      	movs	r5, #4
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.INEN = 1;
    22e0:	2402      	movs	r4, #2
		REG_PORT_DIRCLR0 = kb_col[i];
    22e2:	4643      	mov	r3, r8
    22e4:	4648      	mov	r0, r9
    22e6:	5808      	ldr	r0, [r1, r0]
    22e8:	6018      	str	r0, [r3, #0]
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.PULLEN = 1;
    22ea:	4663      	mov	r3, ip
    22ec:	58cb      	ldr	r3, [r1, r3]
    22ee:	4837      	ldr	r0, [pc, #220]	; (23cc <readKeyboard+0x1e4>)
    22f0:	4682      	mov	sl, r0
    22f2:	4453      	add	r3, sl
    22f4:	7818      	ldrb	r0, [r3, #0]
    22f6:	4328      	orrs	r0, r5
    22f8:	7018      	strb	r0, [r3, #0]
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.INEN = 1;
    22fa:	7818      	ldrb	r0, [r3, #0]
    22fc:	4320      	orrs	r0, r4
    22fe:	7018      	strb	r0, [r3, #0]
    2300:	3104      	adds	r1, #4
	for (i = 0; i < NUM_COL; i++) {
    2302:	291c      	cmp	r1, #28
    2304:	d1ed      	bne.n	22e2 <readKeyboard+0xfa>
    2306:	2300      	movs	r3, #0
    2308:	469c      	mov	ip, r3
		REG_PORT_OUTSET0 = kb_row[i];
    230a:	4b31      	ldr	r3, [pc, #196]	; (23d0 <readKeyboard+0x1e8>)
    230c:	469b      	mov	fp, r3
			if((PORT->Group[0].IN.reg & kb_col[j]) != 0)
    230e:	4d28      	ldr	r5, [pc, #160]	; (23b0 <readKeyboard+0x1c8>)
				scanCodes[scanCodeIndex] = (j * NUM_ROW) + i;
    2310:	4b26      	ldr	r3, [pc, #152]	; (23ac <readKeyboard+0x1c4>)
    2312:	4698      	mov	r8, r3
		REG_PORT_OUTCLR0 = kb_row[i];
    2314:	4b29      	ldr	r3, [pc, #164]	; (23bc <readKeyboard+0x1d4>)
    2316:	469a      	mov	sl, r3
    2318:	46b1      	mov	r9, r6
    231a:	003e      	movs	r6, r7
    231c:	4667      	mov	r7, ip
    231e:	e015      	b.n	234c <readKeyboard+0x164>
    2320:	3104      	adds	r1, #4
    2322:	330a      	adds	r3, #10
		for (j = 0; j < NUM_COL; j++) {
    2324:	42a3      	cmp	r3, r4
    2326:	d008      	beq.n	233a <readKeyboard+0x152>
			if((PORT->Group[0].IN.reg & kb_col[j]) != 0)
    2328:	6a28      	ldr	r0, [r5, #32]
    232a:	680e      	ldr	r6, [r1, #0]
    232c:	4206      	tst	r6, r0
    232e:	d0f7      	beq.n	2320 <readKeyboard+0x138>
				scanCodes[scanCodeIndex] = (j * NUM_ROW) + i;
    2330:	0090      	lsls	r0, r2, #2
    2332:	4646      	mov	r6, r8
    2334:	5183      	str	r3, [r0, r6]
				scanCodeIndex++;
    2336:	3201      	adds	r2, #1
    2338:	e7f2      	b.n	2320 <readKeyboard+0x138>
    233a:	9e00      	ldr	r6, [sp, #0]
		REG_PORT_OUTCLR0 = kb_row[i];
    233c:	4663      	mov	r3, ip
    233e:	681b      	ldr	r3, [r3, #0]
    2340:	4651      	mov	r1, sl
    2342:	600b      	str	r3, [r1, #0]
	for (i = 0; i < NUM_ROW; i++) {
    2344:	3701      	adds	r7, #1
    2346:	3604      	adds	r6, #4
    2348:	2f0a      	cmp	r7, #10
    234a:	d009      	beq.n	2360 <readKeyboard+0x178>
    234c:	46b4      	mov	ip, r6
		REG_PORT_OUTSET0 = kb_row[i];
    234e:	465b      	mov	r3, fp
    2350:	6831      	ldr	r1, [r6, #0]
    2352:	6019      	str	r1, [r3, #0]
    2354:	003b      	movs	r3, r7
    2356:	003c      	movs	r4, r7
    2358:	3446      	adds	r4, #70	; 0x46
    235a:	4916      	ldr	r1, [pc, #88]	; (23b4 <readKeyboard+0x1cc>)
    235c:	9600      	str	r6, [sp, #0]
    235e:	e7e3      	b.n	2328 <readKeyboard+0x140>
    2360:	464e      	mov	r6, r9
	for(i = 0 ; i < scanCodeIndex ; i++)
    2362:	2a00      	cmp	r2, #0
    2364:	dd08      	ble.n	2378 <readKeyboard+0x190>
    2366:	4b1c      	ldr	r3, [pc, #112]	; (23d8 <readKeyboard+0x1f0>)
    2368:	0092      	lsls	r2, r2, #2
    236a:	4910      	ldr	r1, [pc, #64]	; (23ac <readKeyboard+0x1c4>)
    236c:	188a      	adds	r2, r1, r2
		scanCodeBuffer[i] = scanCodes[i];	
    236e:	ce02      	ldmia	r6!, {r1}
    2370:	7019      	strb	r1, [r3, #0]
    2372:	3301      	adds	r3, #1
	for(i = 0 ; i < scanCodeIndex ; i++)
    2374:	42b2      	cmp	r2, r6
    2376:	d1fa      	bne.n	236e <readKeyboard+0x186>
		REG_PORT_OUTSET0 = kb_row[i];
    2378:	2400      	movs	r4, #0
		if(keyDown(i) && !scanCodesContains(i))
    237a:	4d18      	ldr	r5, [pc, #96]	; (23dc <readKeyboard+0x1f4>)
    237c:	4e18      	ldr	r6, [pc, #96]	; (23e0 <readKeyboard+0x1f8>)
			removeFromKeyDown(i);
    237e:	4f19      	ldr	r7, [pc, #100]	; (23e4 <readKeyboard+0x1fc>)
    2380:	e002      	b.n	2388 <readKeyboard+0x1a0>
	for(i = 0; i < 70; i++)
    2382:	3401      	adds	r4, #1
    2384:	2c46      	cmp	r4, #70	; 0x46
    2386:	d00a      	beq.n	239e <readKeyboard+0x1b6>
		if(keyDown(i) && !scanCodesContains(i))
    2388:	0020      	movs	r0, r4
    238a:	47a8      	blx	r5
    238c:	2800      	cmp	r0, #0
    238e:	d0f8      	beq.n	2382 <readKeyboard+0x19a>
    2390:	0020      	movs	r0, r4
    2392:	47b0      	blx	r6
    2394:	2800      	cmp	r0, #0
    2396:	d1f4      	bne.n	2382 <readKeyboard+0x19a>
			removeFromKeyDown(i);
    2398:	0020      	movs	r0, r4
    239a:	47b8      	blx	r7
    239c:	e7f1      	b.n	2382 <readKeyboard+0x19a>
}
    239e:	b003      	add	sp, #12
    23a0:	bc3c      	pop	{r2, r3, r4, r5}
    23a2:	4690      	mov	r8, r2
    23a4:	4699      	mov	r9, r3
    23a6:	46a2      	mov	sl, r4
    23a8:	46ab      	mov	fp, r5
    23aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    23ac:	2000003c 	.word	0x2000003c
    23b0:	41004400 	.word	0x41004400
    23b4:	000063d0 	.word	0x000063d0
    23b8:	41004408 	.word	0x41004408
    23bc:	41004414 	.word	0x41004414
    23c0:	00006408 	.word	0x00006408
    23c4:	41004404 	.word	0x41004404
    23c8:	00006430 	.word	0x00006430
    23cc:	41004440 	.word	0x41004440
    23d0:	41004418 	.word	0x41004418
    23d4:	000063ec 	.word	0x000063ec
    23d8:	20000028 	.word	0x20000028
    23dc:	00002199 	.word	0x00002199
    23e0:	0000216d 	.word	0x0000216d
    23e4:	000021c5 	.word	0x000021c5

000023e8 <clearCursorBuffer>:

void clearCursorBuffer(void)
{
    23e8:	4b04      	ldr	r3, [pc, #16]	; (23fc <clearCursorBuffer+0x14>)
    23ea:	0019      	movs	r1, r3
    23ec:	31c8      	adds	r1, #200	; 0xc8
	for(uint16_t i = 0 ; i < 200 ; i++)
	{
		cursorBuffer[i] = 0x00;
    23ee:	2200      	movs	r2, #0
    23f0:	701a      	strb	r2, [r3, #0]
    23f2:	3301      	adds	r3, #1
	for(uint16_t i = 0 ; i < 200 ; i++)
    23f4:	428b      	cmp	r3, r1
    23f6:	d1fb      	bne.n	23f0 <clearCursorBuffer+0x8>
	}
}
    23f8:	4770      	bx	lr
    23fa:	46c0      	nop			; (mov r8, r8)
    23fc:	20000304 	.word	0x20000304

00002400 <drawCursorBuffer>:

void drawCursorBuffer(void)
{
    2400:	b5f0      	push	{r4, r5, r6, r7, lr}
    2402:	46c6      	mov	lr, r8
    2404:	b500      	push	{lr}

	setXY(abs(xCharPos-79)*10,yCharPos*20,abs(xCharPos-79)*10+9,yCharPos*20+19);
    2406:	4b1c      	ldr	r3, [pc, #112]	; (2478 <drawCursorBuffer+0x78>)
    2408:	7818      	ldrb	r0, [r3, #0]
    240a:	384f      	subs	r0, #79	; 0x4f
    240c:	17c3      	asrs	r3, r0, #31
    240e:	18c0      	adds	r0, r0, r3
    2410:	4058      	eors	r0, r3
    2412:	0083      	lsls	r3, r0, #2
    2414:	18c0      	adds	r0, r0, r3
    2416:	0040      	lsls	r0, r0, #1
    2418:	b280      	uxth	r0, r0
    241a:	4b18      	ldr	r3, [pc, #96]	; (247c <drawCursorBuffer+0x7c>)
    241c:	7819      	ldrb	r1, [r3, #0]
    241e:	2314      	movs	r3, #20
    2420:	4359      	muls	r1, r3
    2422:	000b      	movs	r3, r1
    2424:	3313      	adds	r3, #19
    2426:	b29b      	uxth	r3, r3
    2428:	0002      	movs	r2, r0
    242a:	3209      	adds	r2, #9
    242c:	b292      	uxth	r2, r2
    242e:	4c14      	ldr	r4, [pc, #80]	; (2480 <drawCursorBuffer+0x80>)
    2430:	47a0      	blx	r4
    2432:	4c14      	ldr	r4, [pc, #80]	; (2484 <drawCursorBuffer+0x84>)
    2434:	0025      	movs	r5, r4
    2436:	35c8      	adds	r5, #200	; 0xc8
	for(uint16_t i = 0 ; i < 200 ; i++)
	{
		if((cursorBuffer[i] == 0xFF))
		setPixel((fore_Color_High<<8)|fore_Color_Low);
		else
		setPixel((back_Color_High<<8)|back_Color_Low);
    2438:	4b13      	ldr	r3, [pc, #76]	; (2488 <drawCursorBuffer+0x88>)
    243a:	4698      	mov	r8, r3
    243c:	4f13      	ldr	r7, [pc, #76]	; (248c <drawCursorBuffer+0x8c>)
    243e:	4e14      	ldr	r6, [pc, #80]	; (2490 <drawCursorBuffer+0x90>)
    2440:	e00b      	b.n	245a <drawCursorBuffer+0x5a>
		setPixel((fore_Color_High<<8)|fore_Color_Low);
    2442:	4b14      	ldr	r3, [pc, #80]	; (2494 <drawCursorBuffer+0x94>)
    2444:	8818      	ldrh	r0, [r3, #0]
    2446:	0200      	lsls	r0, r0, #8
    2448:	4b13      	ldr	r3, [pc, #76]	; (2498 <drawCursorBuffer+0x98>)
    244a:	881b      	ldrh	r3, [r3, #0]
    244c:	4318      	orrs	r0, r3
    244e:	b280      	uxth	r0, r0
    2450:	4b0f      	ldr	r3, [pc, #60]	; (2490 <drawCursorBuffer+0x90>)
    2452:	4798      	blx	r3
    2454:	3401      	adds	r4, #1
	for(uint16_t i = 0 ; i < 200 ; i++)
    2456:	42ac      	cmp	r4, r5
    2458:	d00a      	beq.n	2470 <drawCursorBuffer+0x70>
		if((cursorBuffer[i] == 0xFF))
    245a:	7823      	ldrb	r3, [r4, #0]
    245c:	2bff      	cmp	r3, #255	; 0xff
    245e:	d0f0      	beq.n	2442 <drawCursorBuffer+0x42>
		setPixel((back_Color_High<<8)|back_Color_Low);
    2460:	4643      	mov	r3, r8
    2462:	8818      	ldrh	r0, [r3, #0]
    2464:	0200      	lsls	r0, r0, #8
    2466:	883b      	ldrh	r3, [r7, #0]
    2468:	4318      	orrs	r0, r3
    246a:	b280      	uxth	r0, r0
    246c:	47b0      	blx	r6
    246e:	e7f1      	b.n	2454 <drawCursorBuffer+0x54>
	}
	

}
    2470:	bc04      	pop	{r2}
    2472:	4690      	mov	r8, r2
    2474:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2476:	46c0      	nop			; (mov r8, r8)
    2478:	20000298 	.word	0x20000298
    247c:	20000299 	.word	0x20000299
    2480:	000029b9 	.word	0x000029b9
    2484:	20000304 	.word	0x20000304
    2488:	200003d2 	.word	0x200003d2
    248c:	200003cc 	.word	0x200003cc
    2490:	00002b99 	.word	0x00002b99
    2494:	200003ce 	.word	0x200003ce
    2498:	200003d0 	.word	0x200003d0

0000249c <moveCursor>:
		}
	}	
}

void moveCursor(uint8_t x, uint8_t y)
{
    249c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    249e:	46de      	mov	lr, fp
    24a0:	4657      	mov	r7, sl
    24a2:	464e      	mov	r6, r9
    24a4:	4645      	mov	r5, r8
    24a6:	b5e0      	push	{r5, r6, r7, lr}
    24a8:	4683      	mov	fp, r0
    24aa:	468a      	mov	sl, r1
	//buffer.
	
	//All this function does is read the GRAM and move the cursor.
	
	//set PB07 to input
	REG_PORT_DIRCLR1 = PORT_PB07;
    24ac:	2280      	movs	r2, #128	; 0x80
    24ae:	4b32      	ldr	r3, [pc, #200]	; (2578 <moveCursor+0xdc>)
    24b0:	601a      	str	r2, [r3, #0]
	PORT->Group[1].PINCFG[7].bit.INEN = 1;
    24b2:	4a32      	ldr	r2, [pc, #200]	; (257c <moveCursor+0xe0>)
    24b4:	23c7      	movs	r3, #199	; 0xc7
    24b6:	5cd1      	ldrb	r1, [r2, r3]
    24b8:	2002      	movs	r0, #2
    24ba:	4301      	orrs	r1, r0
    24bc:	54d1      	strb	r1, [r2, r3]
	PORT->Group[1].PINCFG[7].bit.PULLEN = 1;
    24be:	5cd1      	ldrb	r1, [r2, r3]
    24c0:	2004      	movs	r0, #4
    24c2:	4301      	orrs	r1, r0
    24c4:	54d1      	strb	r1, [r2, r3]
	
	
	//Per page 40 of datasheet (5.1.2.7, 16-bit
	//parallel interface for data ram read.
	REG_PORT_OUTCLR1 = LCD_CS;
    24c6:	4c2e      	ldr	r4, [pc, #184]	; (2580 <moveCursor+0xe4>)
    24c8:	2380      	movs	r3, #128	; 0x80
    24ca:	03db      	lsls	r3, r3, #15
    24cc:	6023      	str	r3, [r4, #0]
	setXY(abs(xCharPos-79)*10,yCharPos*20,abs(xCharPos-79)*10+9,yCharPos*20+19);
    24ce:	4b2d      	ldr	r3, [pc, #180]	; (2584 <moveCursor+0xe8>)
    24d0:	7818      	ldrb	r0, [r3, #0]
    24d2:	384f      	subs	r0, #79	; 0x4f
    24d4:	17c3      	asrs	r3, r0, #31
    24d6:	18c0      	adds	r0, r0, r3
    24d8:	4058      	eors	r0, r3
    24da:	0083      	lsls	r3, r0, #2
    24dc:	18c0      	adds	r0, r0, r3
    24de:	0040      	lsls	r0, r0, #1
    24e0:	b280      	uxth	r0, r0
    24e2:	4b29      	ldr	r3, [pc, #164]	; (2588 <moveCursor+0xec>)
    24e4:	7819      	ldrb	r1, [r3, #0]
    24e6:	2314      	movs	r3, #20
    24e8:	4359      	muls	r1, r3
    24ea:	000b      	movs	r3, r1
    24ec:	3313      	adds	r3, #19
    24ee:	b29b      	uxth	r3, r3
    24f0:	0002      	movs	r2, r0
    24f2:	3209      	adds	r2, #9
    24f4:	b292      	uxth	r2, r2
    24f6:	4d25      	ldr	r5, [pc, #148]	; (258c <moveCursor+0xf0>)
    24f8:	47a8      	blx	r5
	
	//Send'Memory read' command 0x2E00, no data bit
	LCD_Write_COM16(0x2E,0x00);
    24fa:	2100      	movs	r1, #0
    24fc:	202e      	movs	r0, #46	; 0x2e
    24fe:	4b24      	ldr	r3, [pc, #144]	; (2590 <moveCursor+0xf4>)
    2500:	4798      	blx	r3
	REG_PORT_OUTSET1 = LCD_DC;
    2502:	4b24      	ldr	r3, [pc, #144]	; (2594 <moveCursor+0xf8>)
    2504:	2280      	movs	r2, #128	; 0x80
    2506:	0412      	lsls	r2, r2, #16
    2508:	601a      	str	r2, [r3, #0]

	//needs dummy write, per data sheet, page 40
	REG_PORT_OUTCLR1 = LCD_RD;
    250a:	2280      	movs	r2, #128	; 0x80
    250c:	0252      	lsls	r2, r2, #9
    250e:	6022      	str	r2, [r4, #0]
	REG_PORT_OUTSET1 = LCD_RD;
    2510:	601a      	str	r2, [r3, #0]
    2512:	4b21      	ldr	r3, [pc, #132]	; (2598 <moveCursor+0xfc>)
    2514:	22c9      	movs	r2, #201	; 0xc9
    2516:	4691      	mov	r9, r2
    2518:	4499      	add	r9, r3
	
	for(uint8_t pixel = 0; pixel <= 200 ; pixel++)
	{
		REG_PORT_OUTCLR1 = LCD_RD;
    251a:	0020      	movs	r0, r4
    251c:	2280      	movs	r2, #128	; 0x80
    251e:	0252      	lsls	r2, r2, #9
		REG_PORT_OUTSET1 = LCD_RD;
    2520:	491c      	ldr	r1, [pc, #112]	; (2594 <moveCursor+0xf8>)

		//get the pin state, stuff into array
		
		//This can be expanded with else if for the MSBs
		//of all the colors; see datasheet page 40.
		if((PORT->Group[1].IN.reg & PORT_PB07) != 0)
    2522:	4c16      	ldr	r4, [pc, #88]	; (257c <moveCursor+0xe0>)
    2524:	46a0      	mov	r8, r4
    2526:	24a0      	movs	r4, #160	; 0xa0
    2528:	46a4      	mov	ip, r4
    252a:	2580      	movs	r5, #128	; 0x80
		{
			cursorBuffer[pixel] = 0xFF;
		}
		else
		{
			cursorBuffer[pixel] = 0x00;
    252c:	2700      	movs	r7, #0
    252e:	e005      	b.n	253c <moveCursor+0xa0>
    2530:	701f      	strb	r7, [r3, #0]
		//dummy read, because pixel data broken up
		//per datasheet page 40. Everything after
		//the dummy write is BLUE pixels. Do we ever
		//need blue? IDK.
		
		REG_PORT_OUTCLR1 = LCD_RD;
    2532:	6002      	str	r2, [r0, #0]
		REG_PORT_OUTSET1 = LCD_RD;
    2534:	600a      	str	r2, [r1, #0]
    2536:	3301      	adds	r3, #1
	for(uint8_t pixel = 0; pixel <= 200 ; pixel++)
    2538:	454b      	cmp	r3, r9
    253a:	d009      	beq.n	2550 <moveCursor+0xb4>
		REG_PORT_OUTCLR1 = LCD_RD;
    253c:	6002      	str	r2, [r0, #0]
		REG_PORT_OUTSET1 = LCD_RD;
    253e:	600a      	str	r2, [r1, #0]
		if((PORT->Group[1].IN.reg & PORT_PB07) != 0)
    2540:	4644      	mov	r4, r8
    2542:	4666      	mov	r6, ip
    2544:	59a4      	ldr	r4, [r4, r6]
    2546:	4225      	tst	r5, r4
    2548:	d0f2      	beq.n	2530 <moveCursor+0x94>
			cursorBuffer[pixel] = 0xFF;
    254a:	24ff      	movs	r4, #255	; 0xff
    254c:	701c      	strb	r4, [r3, #0]
    254e:	e7f0      	b.n	2532 <moveCursor+0x96>
	}
	
	REG_PORT_OUTSET1 = LCD_DC;
    2550:	2280      	movs	r2, #128	; 0x80
    2552:	0412      	lsls	r2, r2, #16
    2554:	4b0f      	ldr	r3, [pc, #60]	; (2594 <moveCursor+0xf8>)
    2556:	601a      	str	r2, [r3, #0]
	REG_PORT_DIRSET1 = 0x0000FFFF;
    2558:	4a10      	ldr	r2, [pc, #64]	; (259c <moveCursor+0x100>)
    255a:	4b11      	ldr	r3, [pc, #68]	; (25a0 <moveCursor+0x104>)
    255c:	601a      	str	r2, [r3, #0]
	
	//The cursor data is in the cursorBuffer, so now we move
	//xCharPos and yCharPos
	xCharPos = x;
    255e:	4b09      	ldr	r3, [pc, #36]	; (2584 <moveCursor+0xe8>)
    2560:	465a      	mov	r2, fp
    2562:	701a      	strb	r2, [r3, #0]
	yCharPos = y;
    2564:	4b08      	ldr	r3, [pc, #32]	; (2588 <moveCursor+0xec>)
    2566:	4652      	mov	r2, sl
    2568:	701a      	strb	r2, [r3, #0]
	
}
    256a:	bc3c      	pop	{r2, r3, r4, r5}
    256c:	4690      	mov	r8, r2
    256e:	4699      	mov	r9, r3
    2570:	46a2      	mov	sl, r4
    2572:	46ab      	mov	fp, r5
    2574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2576:	46c0      	nop			; (mov r8, r8)
    2578:	41004484 	.word	0x41004484
    257c:	41004400 	.word	0x41004400
    2580:	41004494 	.word	0x41004494
    2584:	20000298 	.word	0x20000298
    2588:	20000299 	.word	0x20000299
    258c:	000029b9 	.word	0x000029b9
    2590:	00002c05 	.word	0x00002c05
    2594:	41004498 	.word	0x41004498
    2598:	20000304 	.word	0x20000304
    259c:	0000ffff 	.word	0x0000ffff
    25a0:	41004488 	.word	0x41004488

000025a4 <printKeyboardBuffer>:
{
    25a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    25a6:	46de      	mov	lr, fp
    25a8:	4657      	mov	r7, sl
    25aa:	464e      	mov	r6, r9
    25ac:	4645      	mov	r5, r8
    25ae:	b5e0      	push	{r5, r6, r7, lr}
    25b0:	b0a7      	sub	sp, #156	; 0x9c
	char noCase[] =	  {0xFF,0xFF,0xFF,0xFF,0xFF,	//Col0, Row0-4
    25b2:	4c7a      	ldr	r4, [pc, #488]	; (279c <printKeyboardBuffer+0x1f8>)
    25b4:	2246      	movs	r2, #70	; 0x46
    25b6:	0021      	movs	r1, r4
    25b8:	a814      	add	r0, sp, #80	; 0x50
    25ba:	4d79      	ldr	r5, [pc, #484]	; (27a0 <printKeyboardBuffer+0x1fc>)
    25bc:	47a8      	blx	r5
	char shiftCase[] = {0xFF,0xFF,0xFF,0xFF,0xFF,	//Col0, Row0-4
    25be:	0021      	movs	r1, r4
    25c0:	3148      	adds	r1, #72	; 0x48
    25c2:	2246      	movs	r2, #70	; 0x46
    25c4:	a802      	add	r0, sp, #8
    25c6:	47a8      	blx	r5
    25c8:	4e76      	ldr	r6, [pc, #472]	; (27a4 <printKeyboardBuffer+0x200>)
    25ca:	0031      	movs	r1, r6
    25cc:	3114      	adds	r1, #20
    25ce:	0035      	movs	r5, r6
	bool shifted = false;
    25d0:	2300      	movs	r3, #0
    25d2:	9301      	str	r3, [sp, #4]
    25d4:	e002      	b.n	25dc <printKeyboardBuffer+0x38>
    25d6:	3501      	adds	r5, #1
	for(int i=0; i<20; i++)
    25d8:	428d      	cmp	r5, r1
    25da:	d00b      	beq.n	25f4 <printKeyboardBuffer+0x50>
		if((scanCodeBuffer[i] == 13) | (scanCodeBuffer[i] == 49))
    25dc:	782b      	ldrb	r3, [r5, #0]
    25de:	001a      	movs	r2, r3
    25e0:	3a0d      	subs	r2, #13
    25e2:	4250      	negs	r0, r2
    25e4:	4142      	adcs	r2, r0
    25e6:	3b31      	subs	r3, #49	; 0x31
    25e8:	4258      	negs	r0, r3
    25ea:	4143      	adcs	r3, r0
    25ec:	4313      	orrs	r3, r2
    25ee:	d0f2      	beq.n	25d6 <printKeyboardBuffer+0x32>
			shifted = true;
    25f0:	9301      	str	r3, [sp, #4]
    25f2:	e7f0      	b.n	25d6 <printKeyboardBuffer+0x32>
    25f4:	2700      	movs	r7, #0
		if(!keyDown(scanCodeBuffer[i]))
    25f6:	4b6b      	ldr	r3, [pc, #428]	; (27a4 <printKeyboardBuffer+0x200>)
    25f8:	469a      	mov	sl, r3
    25fa:	4b6b      	ldr	r3, [pc, #428]	; (27a8 <printKeyboardBuffer+0x204>)
    25fc:	469b      	mov	fp, r3
			keyDownBuffer[i] = scanCodeBuffer[i];
    25fe:	4b6b      	ldr	r3, [pc, #428]	; (27ac <printKeyboardBuffer+0x208>)
    2600:	4699      	mov	r9, r3
    2602:	e007      	b.n	2614 <printKeyboardBuffer+0x70>
				if(xCharPos > 0)  ///I think I need to decouple the reading the next cursor
    2604:	4b6a      	ldr	r3, [pc, #424]	; (27b0 <printKeyboardBuffer+0x20c>)
    2606:	781b      	ldrb	r3, [r3, #0]
    2608:	2b00      	cmp	r3, #0
    260a:	d137      	bne.n	267c <printKeyboardBuffer+0xd8>
	for(int i=0; i<20; i++)
    260c:	3701      	adds	r7, #1
    260e:	2f14      	cmp	r7, #20
    2610:	d100      	bne.n	2614 <printKeyboardBuffer+0x70>
    2612:	e0b6      	b.n	2782 <printKeyboardBuffer+0x1de>
		if(!keyDown(scanCodeBuffer[i]))
    2614:	4653      	mov	r3, sl
    2616:	5cfc      	ldrb	r4, [r7, r3]
    2618:	0020      	movs	r0, r4
    261a:	47d8      	blx	fp
    261c:	2800      	cmp	r0, #0
    261e:	d1f5      	bne.n	260c <printKeyboardBuffer+0x68>
			keyDownBuffer[i] = scanCodeBuffer[i];
    2620:	464b      	mov	r3, r9
    2622:	55dc      	strb	r4, [r3, r7]
			if(scanCodeBuffer[i] == 0xFF)
    2624:	2cff      	cmp	r4, #255	; 0xff
    2626:	d0f1      	beq.n	260c <printKeyboardBuffer+0x68>
			else if(scanCodeBuffer[i] == 35) //left
    2628:	2c23      	cmp	r4, #35	; 0x23
    262a:	d0eb      	beq.n	2604 <printKeyboardBuffer+0x60>
			else if(scanCodeBuffer[i] == 45)	//down
    262c:	2c2d      	cmp	r4, #45	; 0x2d
    262e:	d030      	beq.n	2692 <printKeyboardBuffer+0xee>
			else if(scanCodeBuffer[i] == 55)	//up
    2630:	2c37      	cmp	r4, #55	; 0x37
    2632:	d03d      	beq.n	26b0 <printKeyboardBuffer+0x10c>
			else if(scanCodeBuffer[i] == 65)	//right
    2634:	2c41      	cmp	r4, #65	; 0x41
    2636:	d04a      	beq.n	26ce <printKeyboardBuffer+0x12a>
			else if((scanCodeBuffer[i] == 49) | (scanCodeBuffer[i] == 13))
    2638:	2c31      	cmp	r4, #49	; 0x31
    263a:	d0e7      	beq.n	260c <printKeyboardBuffer+0x68>
    263c:	2c0d      	cmp	r4, #13
    263e:	d0e5      	beq.n	260c <printKeyboardBuffer+0x68>
			else if(scanCodeBuffer[i] == 58) //Return
    2640:	2c3a      	cmp	r4, #58	; 0x3a
    2642:	d053      	beq.n	26ec <printKeyboardBuffer+0x148>
			else if(scanCodeBuffer[i] == 69) //Line
    2644:	2c45      	cmp	r4, #69	; 0x45
    2646:	d067      	beq.n	2718 <printKeyboardBuffer+0x174>
			else if(scanCodeBuffer[i] == 66) //Backspace
    2648:	2c42      	cmp	r4, #66	; 0x42
    264a:	d070      	beq.n	272e <printKeyboardBuffer+0x18a>
				if(shifted)
    264c:	9b01      	ldr	r3, [sp, #4]
    264e:	2b00      	cmp	r3, #0
    2650:	d07e      	beq.n	2750 <printKeyboardBuffer+0x1ac>
					drawChar(shiftCase[scanCodeBuffer[i]]);
    2652:	ab02      	add	r3, sp, #8
    2654:	5d18      	ldrb	r0, [r3, r4]
    2656:	4b57      	ldr	r3, [pc, #348]	; (27b4 <printKeyboardBuffer+0x210>)
    2658:	4798      	blx	r3
					if(xCharPos < 79)
    265a:	4b55      	ldr	r3, [pc, #340]	; (27b0 <printKeyboardBuffer+0x20c>)
    265c:	7818      	ldrb	r0, [r3, #0]
    265e:	284e      	cmp	r0, #78	; 0x4e
    2660:	d8d4      	bhi.n	260c <printKeyboardBuffer+0x68>
						moveCursor(xCharPos++,yCharPos);
    2662:	001c      	movs	r4, r3
    2664:	1c43      	adds	r3, r0, #1
    2666:	7023      	strb	r3, [r4, #0]
    2668:	4b53      	ldr	r3, [pc, #332]	; (27b8 <printKeyboardBuffer+0x214>)
    266a:	7819      	ldrb	r1, [r3, #0]
    266c:	4b53      	ldr	r3, [pc, #332]	; (27bc <printKeyboardBuffer+0x218>)
    266e:	4798      	blx	r3
						xCharPos++;
    2670:	7823      	ldrb	r3, [r4, #0]
    2672:	3301      	adds	r3, #1
    2674:	7023      	strb	r3, [r4, #0]
						clearCursorBuffer();
    2676:	4b52      	ldr	r3, [pc, #328]	; (27c0 <printKeyboardBuffer+0x21c>)
    2678:	4798      	blx	r3
    267a:	e7c7      	b.n	260c <printKeyboardBuffer+0x68>
					drawCursorBuffer();
    267c:	4b51      	ldr	r3, [pc, #324]	; (27c4 <printKeyboardBuffer+0x220>)
    267e:	4798      	blx	r3
					moveCursor(xCharPos-1,yCharPos);
    2680:	4b4d      	ldr	r3, [pc, #308]	; (27b8 <printKeyboardBuffer+0x214>)
    2682:	7819      	ldrb	r1, [r3, #0]
    2684:	4b4a      	ldr	r3, [pc, #296]	; (27b0 <printKeyboardBuffer+0x20c>)
    2686:	7818      	ldrb	r0, [r3, #0]
    2688:	3801      	subs	r0, #1
    268a:	b2c0      	uxtb	r0, r0
    268c:	4b4b      	ldr	r3, [pc, #300]	; (27bc <printKeyboardBuffer+0x218>)
    268e:	4798      	blx	r3
    2690:	e7bc      	b.n	260c <printKeyboardBuffer+0x68>
				if(yCharPos < 24)
    2692:	4b49      	ldr	r3, [pc, #292]	; (27b8 <printKeyboardBuffer+0x214>)
    2694:	781b      	ldrb	r3, [r3, #0]
    2696:	2b17      	cmp	r3, #23
    2698:	d8b8      	bhi.n	260c <printKeyboardBuffer+0x68>
					drawCursorBuffer();
    269a:	4b4a      	ldr	r3, [pc, #296]	; (27c4 <printKeyboardBuffer+0x220>)
    269c:	4798      	blx	r3
					moveCursor(xCharPos,yCharPos+1);
    269e:	4b46      	ldr	r3, [pc, #280]	; (27b8 <printKeyboardBuffer+0x214>)
    26a0:	7819      	ldrb	r1, [r3, #0]
    26a2:	3101      	adds	r1, #1
    26a4:	b2c9      	uxtb	r1, r1
    26a6:	4b42      	ldr	r3, [pc, #264]	; (27b0 <printKeyboardBuffer+0x20c>)
    26a8:	7818      	ldrb	r0, [r3, #0]
    26aa:	4b44      	ldr	r3, [pc, #272]	; (27bc <printKeyboardBuffer+0x218>)
    26ac:	4798      	blx	r3
    26ae:	e7ad      	b.n	260c <printKeyboardBuffer+0x68>
				if(yCharPos > 0)
    26b0:	4b41      	ldr	r3, [pc, #260]	; (27b8 <printKeyboardBuffer+0x214>)
    26b2:	781b      	ldrb	r3, [r3, #0]
    26b4:	2b00      	cmp	r3, #0
    26b6:	d0a9      	beq.n	260c <printKeyboardBuffer+0x68>
					drawCursorBuffer();
    26b8:	4b42      	ldr	r3, [pc, #264]	; (27c4 <printKeyboardBuffer+0x220>)
    26ba:	4798      	blx	r3
					moveCursor(xCharPos,yCharPos-1);
    26bc:	4b3e      	ldr	r3, [pc, #248]	; (27b8 <printKeyboardBuffer+0x214>)
    26be:	7819      	ldrb	r1, [r3, #0]
    26c0:	3901      	subs	r1, #1
    26c2:	b2c9      	uxtb	r1, r1
    26c4:	4b3a      	ldr	r3, [pc, #232]	; (27b0 <printKeyboardBuffer+0x20c>)
    26c6:	7818      	ldrb	r0, [r3, #0]
    26c8:	4b3c      	ldr	r3, [pc, #240]	; (27bc <printKeyboardBuffer+0x218>)
    26ca:	4798      	blx	r3
    26cc:	e79e      	b.n	260c <printKeyboardBuffer+0x68>
				if(xCharPos < 79)
    26ce:	4b38      	ldr	r3, [pc, #224]	; (27b0 <printKeyboardBuffer+0x20c>)
    26d0:	781b      	ldrb	r3, [r3, #0]
    26d2:	2b4e      	cmp	r3, #78	; 0x4e
    26d4:	d89a      	bhi.n	260c <printKeyboardBuffer+0x68>
					drawCursorBuffer();
    26d6:	4b3b      	ldr	r3, [pc, #236]	; (27c4 <printKeyboardBuffer+0x220>)
    26d8:	4798      	blx	r3
					moveCursor(xCharPos+1,yCharPos);
    26da:	4b37      	ldr	r3, [pc, #220]	; (27b8 <printKeyboardBuffer+0x214>)
    26dc:	7819      	ldrb	r1, [r3, #0]
    26de:	4b34      	ldr	r3, [pc, #208]	; (27b0 <printKeyboardBuffer+0x20c>)
    26e0:	7818      	ldrb	r0, [r3, #0]
    26e2:	3001      	adds	r0, #1
    26e4:	b2c0      	uxtb	r0, r0
    26e6:	4b35      	ldr	r3, [pc, #212]	; (27bc <printKeyboardBuffer+0x218>)
    26e8:	4798      	blx	r3
    26ea:	e78f      	b.n	260c <printKeyboardBuffer+0x68>
				if(yCharPos == 23)
    26ec:	4b32      	ldr	r3, [pc, #200]	; (27b8 <printKeyboardBuffer+0x214>)
    26ee:	781b      	ldrb	r3, [r3, #0]
    26f0:	2b17      	cmp	r3, #23
    26f2:	d009      	beq.n	2708 <printKeyboardBuffer+0x164>
					drawCursorBuffer();
    26f4:	4b33      	ldr	r3, [pc, #204]	; (27c4 <printKeyboardBuffer+0x220>)
    26f6:	4798      	blx	r3
					yCharPos++;
    26f8:	4a2f      	ldr	r2, [pc, #188]	; (27b8 <printKeyboardBuffer+0x214>)
    26fa:	7813      	ldrb	r3, [r2, #0]
    26fc:	3301      	adds	r3, #1
    26fe:	7013      	strb	r3, [r2, #0]
					xCharPos = 0;
    2700:	2200      	movs	r2, #0
    2702:	4b2b      	ldr	r3, [pc, #172]	; (27b0 <printKeyboardBuffer+0x20c>)
    2704:	701a      	strb	r2, [r3, #0]
    2706:	e781      	b.n	260c <printKeyboardBuffer+0x68>
					drawCursorBuffer();
    2708:	4b2e      	ldr	r3, [pc, #184]	; (27c4 <printKeyboardBuffer+0x220>)
    270a:	4798      	blx	r3
					newLine();
    270c:	4b2e      	ldr	r3, [pc, #184]	; (27c8 <printKeyboardBuffer+0x224>)
    270e:	4798      	blx	r3
					xCharPos = 0;
    2710:	2200      	movs	r2, #0
    2712:	4b27      	ldr	r3, [pc, #156]	; (27b0 <printKeyboardBuffer+0x20c>)
    2714:	701a      	strb	r2, [r3, #0]
    2716:	e779      	b.n	260c <printKeyboardBuffer+0x68>
				if(yCharPos == 23)
    2718:	4b27      	ldr	r3, [pc, #156]	; (27b8 <printKeyboardBuffer+0x214>)
    271a:	781b      	ldrb	r3, [r3, #0]
    271c:	2b17      	cmp	r3, #23
    271e:	d003      	beq.n	2728 <printKeyboardBuffer+0x184>
					yCharPos++;
    2720:	3301      	adds	r3, #1
    2722:	4a25      	ldr	r2, [pc, #148]	; (27b8 <printKeyboardBuffer+0x214>)
    2724:	7013      	strb	r3, [r2, #0]
    2726:	e771      	b.n	260c <printKeyboardBuffer+0x68>
					newLine();
    2728:	4b27      	ldr	r3, [pc, #156]	; (27c8 <printKeyboardBuffer+0x224>)
    272a:	4798      	blx	r3
    272c:	e76e      	b.n	260c <printKeyboardBuffer+0x68>
				drawCursorBuffer();
    272e:	4b25      	ldr	r3, [pc, #148]	; (27c4 <printKeyboardBuffer+0x220>)
    2730:	4798      	blx	r3
				xCharPos--;
    2732:	4c1f      	ldr	r4, [pc, #124]	; (27b0 <printKeyboardBuffer+0x20c>)
    2734:	7823      	ldrb	r3, [r4, #0]
    2736:	3b01      	subs	r3, #1
    2738:	7023      	strb	r3, [r4, #0]
				drawChar(0x20);
    273a:	2020      	movs	r0, #32
    273c:	4b1d      	ldr	r3, [pc, #116]	; (27b4 <printKeyboardBuffer+0x210>)
    273e:	4798      	blx	r3
				clearCursorBuffer();
    2740:	4b1f      	ldr	r3, [pc, #124]	; (27c0 <printKeyboardBuffer+0x21c>)
    2742:	4798      	blx	r3
				moveCursor(xCharPos,yCharPos);
    2744:	4b1c      	ldr	r3, [pc, #112]	; (27b8 <printKeyboardBuffer+0x214>)
    2746:	7819      	ldrb	r1, [r3, #0]
    2748:	7820      	ldrb	r0, [r4, #0]
    274a:	4b1c      	ldr	r3, [pc, #112]	; (27bc <printKeyboardBuffer+0x218>)
    274c:	4798      	blx	r3
    274e:	e75d      	b.n	260c <printKeyboardBuffer+0x68>
					drawChar(noCase[scanCodeBuffer[i]]);
    2750:	ab14      	add	r3, sp, #80	; 0x50
    2752:	5d18      	ldrb	r0, [r3, r4]
    2754:	4b17      	ldr	r3, [pc, #92]	; (27b4 <printKeyboardBuffer+0x210>)
    2756:	4798      	blx	r3
					if(xCharPos < 79)
    2758:	4b15      	ldr	r3, [pc, #84]	; (27b0 <printKeyboardBuffer+0x20c>)
    275a:	7818      	ldrb	r0, [r3, #0]
    275c:	284e      	cmp	r0, #78	; 0x4e
    275e:	d900      	bls.n	2762 <printKeyboardBuffer+0x1be>
    2760:	e754      	b.n	260c <printKeyboardBuffer+0x68>
						moveCursor(xCharPos++,yCharPos);
    2762:	4698      	mov	r8, r3
    2764:	1c43      	adds	r3, r0, #1
    2766:	4642      	mov	r2, r8
    2768:	7013      	strb	r3, [r2, #0]
    276a:	4b13      	ldr	r3, [pc, #76]	; (27b8 <printKeyboardBuffer+0x214>)
    276c:	7819      	ldrb	r1, [r3, #0]
    276e:	4b13      	ldr	r3, [pc, #76]	; (27bc <printKeyboardBuffer+0x218>)
    2770:	4798      	blx	r3
						xCharPos++;
    2772:	4643      	mov	r3, r8
    2774:	781b      	ldrb	r3, [r3, #0]
    2776:	3301      	adds	r3, #1
    2778:	4642      	mov	r2, r8
    277a:	7013      	strb	r3, [r2, #0]
						clearCursorBuffer();
    277c:	4b10      	ldr	r3, [pc, #64]	; (27c0 <printKeyboardBuffer+0x21c>)
    277e:	4798      	blx	r3
    2780:	e744      	b.n	260c <printKeyboardBuffer+0x68>
		scanCodeBuffer[i] = 0xFF;
    2782:	23ff      	movs	r3, #255	; 0xff
    2784:	7033      	strb	r3, [r6, #0]
    2786:	3601      	adds	r6, #1
	for(int i = 0 ; i < 20 ; i++)
    2788:	42ae      	cmp	r6, r5
    278a:	d1fb      	bne.n	2784 <printKeyboardBuffer+0x1e0>
}
    278c:	b027      	add	sp, #156	; 0x9c
    278e:	bc3c      	pop	{r2, r3, r4, r5}
    2790:	4690      	mov	r8, r2
    2792:	4699      	mov	r9, r3
    2794:	46a2      	mov	sl, r4
    2796:	46ab      	mov	fp, r5
    2798:	bdf0      	pop	{r4, r5, r6, r7, pc}
    279a:	46c0      	nop			; (mov r8, r8)
    279c:	00006340 	.word	0x00006340
    27a0:	00003321 	.word	0x00003321
    27a4:	20000028 	.word	0x20000028
    27a8:	00002199 	.word	0x00002199
    27ac:	20000014 	.word	0x20000014
    27b0:	20000298 	.word	0x20000298
    27b4:	00001e6d 	.word	0x00001e6d
    27b8:	20000299 	.word	0x20000299
    27bc:	0000249d 	.word	0x0000249d
    27c0:	000023e9 	.word	0x000023e9
    27c4:	00002401 	.word	0x00002401
    27c8:	00001f69 	.word	0x00001f69

000027cc <blinkCursor>:

void blinkCursor(void)
{
    27cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    27ce:	46c6      	mov	lr, r8
    27d0:	b500      	push	{lr}
	if(cursorBlinkState)
    27d2:	4b3e      	ldr	r3, [pc, #248]	; (28cc <blinkCursor+0x100>)
    27d4:	781b      	ldrb	r3, [r3, #0]
    27d6:	2b00      	cmp	r3, #0
    27d8:	d03c      	beq.n	2854 <blinkCursor+0x88>
	{

		//Draw the *inverse* of cursorBuffer
		setXY(abs(xCharPos-79)*10,yCharPos*20,abs(xCharPos-79)*10+9,yCharPos*20+19);
    27da:	4b3d      	ldr	r3, [pc, #244]	; (28d0 <blinkCursor+0x104>)
    27dc:	7818      	ldrb	r0, [r3, #0]
    27de:	384f      	subs	r0, #79	; 0x4f
    27e0:	17c3      	asrs	r3, r0, #31
    27e2:	18c0      	adds	r0, r0, r3
    27e4:	4058      	eors	r0, r3
    27e6:	0083      	lsls	r3, r0, #2
    27e8:	18c0      	adds	r0, r0, r3
    27ea:	0040      	lsls	r0, r0, #1
    27ec:	b280      	uxth	r0, r0
    27ee:	4b39      	ldr	r3, [pc, #228]	; (28d4 <blinkCursor+0x108>)
    27f0:	7819      	ldrb	r1, [r3, #0]
    27f2:	2314      	movs	r3, #20
    27f4:	4359      	muls	r1, r3
    27f6:	000b      	movs	r3, r1
    27f8:	3313      	adds	r3, #19
    27fa:	b29b      	uxth	r3, r3
    27fc:	0002      	movs	r2, r0
    27fe:	3209      	adds	r2, #9
    2800:	b292      	uxth	r2, r2
    2802:	4c35      	ldr	r4, [pc, #212]	; (28d8 <blinkCursor+0x10c>)
    2804:	47a0      	blx	r4
    2806:	4c35      	ldr	r4, [pc, #212]	; (28dc <blinkCursor+0x110>)
    2808:	0025      	movs	r5, r4
    280a:	35c8      	adds	r5, #200	; 0xc8
		for(uint16_t i = 0 ; i < 200 ; i++)
		{
			if((cursorBuffer[i] != 0xFF))
			setPixel((fore_Color_High<<8)|fore_Color_Low);
			else
			setPixel((back_Color_High<<8)|back_Color_Low);
    280c:	4b34      	ldr	r3, [pc, #208]	; (28e0 <blinkCursor+0x114>)
    280e:	4698      	mov	r8, r3
    2810:	4f34      	ldr	r7, [pc, #208]	; (28e4 <blinkCursor+0x118>)
    2812:	4e35      	ldr	r6, [pc, #212]	; (28e8 <blinkCursor+0x11c>)
    2814:	e009      	b.n	282a <blinkCursor+0x5e>
    2816:	4643      	mov	r3, r8
    2818:	8818      	ldrh	r0, [r3, #0]
    281a:	0200      	lsls	r0, r0, #8
    281c:	883b      	ldrh	r3, [r7, #0]
    281e:	4318      	orrs	r0, r3
    2820:	b280      	uxth	r0, r0
    2822:	47b0      	blx	r6
    2824:	3401      	adds	r4, #1
		for(uint16_t i = 0 ; i < 200 ; i++)
    2826:	42a5      	cmp	r5, r4
    2828:	d00c      	beq.n	2844 <blinkCursor+0x78>
			if((cursorBuffer[i] != 0xFF))
    282a:	7823      	ldrb	r3, [r4, #0]
    282c:	2bff      	cmp	r3, #255	; 0xff
    282e:	d0f2      	beq.n	2816 <blinkCursor+0x4a>
			setPixel((fore_Color_High<<8)|fore_Color_Low);
    2830:	4b2e      	ldr	r3, [pc, #184]	; (28ec <blinkCursor+0x120>)
    2832:	8818      	ldrh	r0, [r3, #0]
    2834:	0200      	lsls	r0, r0, #8
    2836:	4b2e      	ldr	r3, [pc, #184]	; (28f0 <blinkCursor+0x124>)
    2838:	881b      	ldrh	r3, [r3, #0]
    283a:	4318      	orrs	r0, r3
    283c:	b280      	uxth	r0, r0
    283e:	4b2a      	ldr	r3, [pc, #168]	; (28e8 <blinkCursor+0x11c>)
    2840:	4798      	blx	r3
    2842:	e7ef      	b.n	2824 <blinkCursor+0x58>
		}
		
		//finally set cursorBlinkState to false
		cursorBlinkState = !cursorBlinkState;
    2844:	4a21      	ldr	r2, [pc, #132]	; (28cc <blinkCursor+0x100>)
    2846:	7813      	ldrb	r3, [r2, #0]
    2848:	2101      	movs	r1, #1
    284a:	404b      	eors	r3, r1
    284c:	7013      	strb	r3, [r2, #0]
			setPixel((back_Color_High<<8)|back_Color_Low);
		}
		//set cursorBlinkState to true
		cursorBlinkState = !cursorBlinkState;
	}
}
    284e:	bc04      	pop	{r2}
    2850:	4690      	mov	r8, r2
    2852:	bdf0      	pop	{r4, r5, r6, r7, pc}
		setXY(abs(xCharPos-79)*10,yCharPos*20,abs(xCharPos-79)*10+9,yCharPos*20+19);
    2854:	4b1e      	ldr	r3, [pc, #120]	; (28d0 <blinkCursor+0x104>)
    2856:	7818      	ldrb	r0, [r3, #0]
    2858:	384f      	subs	r0, #79	; 0x4f
    285a:	17c3      	asrs	r3, r0, #31
    285c:	18c0      	adds	r0, r0, r3
    285e:	4058      	eors	r0, r3
    2860:	0083      	lsls	r3, r0, #2
    2862:	18c0      	adds	r0, r0, r3
    2864:	0040      	lsls	r0, r0, #1
    2866:	b280      	uxth	r0, r0
    2868:	4b1a      	ldr	r3, [pc, #104]	; (28d4 <blinkCursor+0x108>)
    286a:	7819      	ldrb	r1, [r3, #0]
    286c:	2314      	movs	r3, #20
    286e:	4359      	muls	r1, r3
    2870:	000b      	movs	r3, r1
    2872:	3313      	adds	r3, #19
    2874:	b29b      	uxth	r3, r3
    2876:	0002      	movs	r2, r0
    2878:	3209      	adds	r2, #9
    287a:	b292      	uxth	r2, r2
    287c:	4c16      	ldr	r4, [pc, #88]	; (28d8 <blinkCursor+0x10c>)
    287e:	47a0      	blx	r4
    2880:	4c16      	ldr	r4, [pc, #88]	; (28dc <blinkCursor+0x110>)
    2882:	0025      	movs	r5, r4
    2884:	35c8      	adds	r5, #200	; 0xc8
			setPixel((back_Color_High<<8)|back_Color_Low);
    2886:	4b16      	ldr	r3, [pc, #88]	; (28e0 <blinkCursor+0x114>)
    2888:	4698      	mov	r8, r3
    288a:	4f16      	ldr	r7, [pc, #88]	; (28e4 <blinkCursor+0x118>)
    288c:	4e16      	ldr	r6, [pc, #88]	; (28e8 <blinkCursor+0x11c>)
    288e:	e00b      	b.n	28a8 <blinkCursor+0xdc>
			setPixel((fore_Color_High<<8)|fore_Color_Low);
    2890:	4b16      	ldr	r3, [pc, #88]	; (28ec <blinkCursor+0x120>)
    2892:	8818      	ldrh	r0, [r3, #0]
    2894:	0200      	lsls	r0, r0, #8
    2896:	4b16      	ldr	r3, [pc, #88]	; (28f0 <blinkCursor+0x124>)
    2898:	881b      	ldrh	r3, [r3, #0]
    289a:	4318      	orrs	r0, r3
    289c:	b280      	uxth	r0, r0
    289e:	4b12      	ldr	r3, [pc, #72]	; (28e8 <blinkCursor+0x11c>)
    28a0:	4798      	blx	r3
    28a2:	3401      	adds	r4, #1
		for(uint16_t i = 0 ; i < 200 ; i++)
    28a4:	42ac      	cmp	r4, r5
    28a6:	d00a      	beq.n	28be <blinkCursor+0xf2>
			if((cursorBuffer[i] == 0xFF))
    28a8:	7823      	ldrb	r3, [r4, #0]
    28aa:	2bff      	cmp	r3, #255	; 0xff
    28ac:	d0f0      	beq.n	2890 <blinkCursor+0xc4>
			setPixel((back_Color_High<<8)|back_Color_Low);
    28ae:	4643      	mov	r3, r8
    28b0:	8818      	ldrh	r0, [r3, #0]
    28b2:	0200      	lsls	r0, r0, #8
    28b4:	883b      	ldrh	r3, [r7, #0]
    28b6:	4318      	orrs	r0, r3
    28b8:	b280      	uxth	r0, r0
    28ba:	47b0      	blx	r6
    28bc:	e7f1      	b.n	28a2 <blinkCursor+0xd6>
		cursorBlinkState = !cursorBlinkState;
    28be:	4a03      	ldr	r2, [pc, #12]	; (28cc <blinkCursor+0x100>)
    28c0:	7813      	ldrb	r3, [r2, #0]
    28c2:	2101      	movs	r1, #1
    28c4:	404b      	eors	r3, r1
    28c6:	7013      	strb	r3, [r2, #0]
}
    28c8:	e7c1      	b.n	284e <blinkCursor+0x82>
    28ca:	46c0      	nop			; (mov r8, r8)
    28cc:	20000010 	.word	0x20000010
    28d0:	20000298 	.word	0x20000298
    28d4:	20000299 	.word	0x20000299
    28d8:	000029b9 	.word	0x000029b9
    28dc:	20000304 	.word	0x20000304
    28e0:	200003d2 	.word	0x200003d2
    28e4:	200003cc 	.word	0x200003cc
    28e8:	00002b99 	.word	0x00002b99
    28ec:	200003ce 	.word	0x200003ce
    28f0:	200003d0 	.word	0x200003d0

000028f4 <setColorRGB>:

uint16_t fore_Color_High, fore_Color_Low;
uint16_t back_Color_High, back_Color_Low;

void setColorRGB(uint8_t r, uint8_t g, uint8_t b)
{
    28f4:	b510      	push	{r4, lr}
	fore_Color_High = ((r&248)|g>>5);
    28f6:	094b      	lsrs	r3, r1, #5
    28f8:	2407      	movs	r4, #7
    28fa:	43a0      	bics	r0, r4
    28fc:	4318      	orrs	r0, r3
    28fe:	4b05      	ldr	r3, [pc, #20]	; (2914 <setColorRGB+0x20>)
    2900:	8018      	strh	r0, [r3, #0]
	fore_Color_Low = ((g&28)<<3|b>>3);
    2902:	00c9      	lsls	r1, r1, #3
    2904:	23e0      	movs	r3, #224	; 0xe0
    2906:	4019      	ands	r1, r3
    2908:	08d2      	lsrs	r2, r2, #3
    290a:	430a      	orrs	r2, r1
    290c:	4b02      	ldr	r3, [pc, #8]	; (2918 <setColorRGB+0x24>)
    290e:	801a      	strh	r2, [r3, #0]
}
    2910:	bd10      	pop	{r4, pc}
    2912:	46c0      	nop			; (mov r8, r8)
    2914:	200003ce 	.word	0x200003ce
    2918:	200003d0 	.word	0x200003d0

0000291c <setBackColorRGB>:
	fore_Color_Low = (color & 0xFF);
}

void setBackColorRGB(unsigned char r,
unsigned char g, unsigned char b)
{
    291c:	b510      	push	{r4, lr}
	back_Color_High = ((r&248)|g>>5);
    291e:	094b      	lsrs	r3, r1, #5
    2920:	2407      	movs	r4, #7
    2922:	43a0      	bics	r0, r4
    2924:	4318      	orrs	r0, r3
    2926:	4b05      	ldr	r3, [pc, #20]	; (293c <setBackColorRGB+0x20>)
    2928:	8018      	strh	r0, [r3, #0]
	back_Color_Low = ((g&28)<<3|b>>3);
    292a:	00c9      	lsls	r1, r1, #3
    292c:	23e0      	movs	r3, #224	; 0xe0
    292e:	4019      	ands	r1, r3
    2930:	08d2      	lsrs	r2, r2, #3
    2932:	430a      	orrs	r2, r1
    2934:	4b02      	ldr	r3, [pc, #8]	; (2940 <setBackColorRGB+0x24>)
    2936:	801a      	strh	r2, [r3, #0]
}
    2938:	bd10      	pop	{r4, pc}
    293a:	46c0      	nop			; (mov r8, r8)
    293c:	200003d2 	.word	0x200003d2
    2940:	200003cc 	.word	0x200003cc

00002944 <LCD_Fast_Fill>:
	(((long)(x2-x1)+1)*((long)(y2-y1)+1)));
	REG_PORT_OUTSET1 = LCD_CS;
}

void LCD_Fast_Fill(int ch, int cl, long pix)
{
    2944:	b570      	push	{r4, r5, r6, lr}
	int blocks;
	
	
	REG_PORT_OUTCLR1 = 0x0000ffff;
    2946:	4c19      	ldr	r4, [pc, #100]	; (29ac <LCD_Fast_Fill+0x68>)
    2948:	4b19      	ldr	r3, [pc, #100]	; (29b0 <LCD_Fast_Fill+0x6c>)
    294a:	601c      	str	r4, [r3, #0]
	REG_PORT_OUTSET1 = (ch << 8) | cl;
    294c:	0200      	lsls	r0, r0, #8
    294e:	4301      	orrs	r1, r0
    2950:	4b18      	ldr	r3, [pc, #96]	; (29b4 <LCD_Fast_Fill+0x70>)
    2952:	6019      	str	r1, [r3, #0]

	blocks = pix/16;
    2954:	17d3      	asrs	r3, r2, #31
    2956:	260f      	movs	r6, #15
    2958:	401e      	ands	r6, r3
    295a:	18b6      	adds	r6, r6, r2
    295c:	1136      	asrs	r6, r6, #4
	for (int i=0; i<blocks; i++)
    295e:	2500      	movs	r5, #0
    2960:	2e00      	cmp	r6, #0
    2962:	dd0c      	ble.n	297e <LCD_Fast_Fill+0x3a>
	{
		for (int j=0; j<16; j++)
		{
			REG_PORT_OUTCLR1 = LCD_WR;
    2964:	4c12      	ldr	r4, [pc, #72]	; (29b0 <LCD_Fast_Fill+0x6c>)
    2966:	2180      	movs	r1, #128	; 0x80
    2968:	0289      	lsls	r1, r1, #10
			REG_PORT_OUTSET1 = LCD_WR;
    296a:	4812      	ldr	r0, [pc, #72]	; (29b4 <LCD_Fast_Fill+0x70>)
{
    296c:	2310      	movs	r3, #16
			REG_PORT_OUTCLR1 = LCD_WR;
    296e:	6021      	str	r1, [r4, #0]
			REG_PORT_OUTSET1 = LCD_WR;
    2970:	6001      	str	r1, [r0, #0]
    2972:	3b01      	subs	r3, #1
		for (int j=0; j<16; j++)
    2974:	2b00      	cmp	r3, #0
    2976:	d1fa      	bne.n	296e <LCD_Fast_Fill+0x2a>
	for (int i=0; i<blocks; i++)
    2978:	3501      	adds	r5, #1
    297a:	42ae      	cmp	r6, r5
    297c:	d1f6      	bne.n	296c <LCD_Fast_Fill+0x28>
		}
	}
	
	if ((pix % 16) != 0)
    297e:	0713      	lsls	r3, r2, #28
    2980:	d013      	beq.n	29aa <LCD_Fast_Fill+0x66>
	for (int i=0; i<(pix % 16)+1; i++)
    2982:	17d3      	asrs	r3, r2, #31
    2984:	0f1b      	lsrs	r3, r3, #28
    2986:	18d2      	adds	r2, r2, r3
    2988:	210f      	movs	r1, #15
    298a:	4011      	ands	r1, r2
    298c:	1ac9      	subs	r1, r1, r3
    298e:	1c4b      	adds	r3, r1, #1
    2990:	2b00      	cmp	r3, #0
    2992:	dd0a      	ble.n	29aa <LCD_Fast_Fill+0x66>
    2994:	0019      	movs	r1, r3
    2996:	2300      	movs	r3, #0
	{
		REG_PORT_OUTCLR1 = LCD_WR;
    2998:	4c05      	ldr	r4, [pc, #20]	; (29b0 <LCD_Fast_Fill+0x6c>)
    299a:	2280      	movs	r2, #128	; 0x80
    299c:	0292      	lsls	r2, r2, #10
		REG_PORT_OUTSET1 = LCD_WR;
    299e:	4805      	ldr	r0, [pc, #20]	; (29b4 <LCD_Fast_Fill+0x70>)
		REG_PORT_OUTCLR1 = LCD_WR;
    29a0:	6022      	str	r2, [r4, #0]
		REG_PORT_OUTSET1 = LCD_WR;
    29a2:	6002      	str	r2, [r0, #0]
	for (int i=0; i<(pix % 16)+1; i++)
    29a4:	3301      	adds	r3, #1
    29a6:	4299      	cmp	r1, r3
    29a8:	d1fa      	bne.n	29a0 <LCD_Fast_Fill+0x5c>
	}
}
    29aa:	bd70      	pop	{r4, r5, r6, pc}
    29ac:	0000ffff 	.word	0x0000ffff
    29b0:	41004494 	.word	0x41004494
    29b4:	41004498 	.word	0x41004498

000029b8 <setXY>:
{
	setXY(0,0,display_X_size,display_Y_size);
}

void setXY(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
    29b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    29ba:	b083      	sub	sp, #12
    29bc:	000e      	movs	r6, r1
    29be:	9300      	str	r3, [sp, #0]
	
	SwapUint16(x1, y1);
	SwapUint16(x2, y2);
	y1=display_Y_size-y1;
    29c0:	4b1c      	ldr	r3, [pc, #112]	; (2a34 <setXY+0x7c>)
    29c2:	881d      	ldrh	r5, [r3, #0]
    29c4:	1a28      	subs	r0, r5, r0
    29c6:	b287      	uxth	r7, r0
	y2=display_Y_size-y2;
    29c8:	1aad      	subs	r5, r5, r2
    29ca:	b2ad      	uxth	r5, r5
	SwapUint16(y1, y2);
	
	
	LCD_Write_COM16(0x2a,0x00);
    29cc:	2100      	movs	r1, #0
    29ce:	202a      	movs	r0, #42	; 0x2a
    29d0:	4c19      	ldr	r4, [pc, #100]	; (2a38 <setXY+0x80>)
    29d2:	47a0      	blx	r4
	LCD_Write_DATA8(x1>>8);
    29d4:	9601      	str	r6, [sp, #4]
    29d6:	0a30      	lsrs	r0, r6, #8
    29d8:	4e18      	ldr	r6, [pc, #96]	; (2a3c <setXY+0x84>)
    29da:	47b0      	blx	r6
	LCD_Write_COM16(0x2a,0x01);
    29dc:	2101      	movs	r1, #1
    29de:	202a      	movs	r0, #42	; 0x2a
    29e0:	47a0      	blx	r4
	LCD_Write_DATA8(x1);
    29e2:	466b      	mov	r3, sp
    29e4:	7918      	ldrb	r0, [r3, #4]
    29e6:	47b0      	blx	r6
	LCD_Write_COM16(0x2a,0x02);
    29e8:	2102      	movs	r1, #2
    29ea:	202a      	movs	r0, #42	; 0x2a
    29ec:	47a0      	blx	r4
	LCD_Write_DATA8(x2>>8);
    29ee:	9b00      	ldr	r3, [sp, #0]
    29f0:	0a18      	lsrs	r0, r3, #8
    29f2:	47b0      	blx	r6
	LCD_Write_COM16(0x2a,0x03);
    29f4:	2103      	movs	r1, #3
    29f6:	202a      	movs	r0, #42	; 0x2a
    29f8:	47a0      	blx	r4
	LCD_Write_DATA8(x2);
    29fa:	466b      	mov	r3, sp
    29fc:	7818      	ldrb	r0, [r3, #0]
    29fe:	47b0      	blx	r6

	LCD_Write_COM16(0x2b,0x00);
    2a00:	2100      	movs	r1, #0
    2a02:	202b      	movs	r0, #43	; 0x2b
    2a04:	47a0      	blx	r4
	LCD_Write_DATA8(y1>>8);
    2a06:	0a28      	lsrs	r0, r5, #8
    2a08:	47b0      	blx	r6
	LCD_Write_COM16(0x2b,0x01);
    2a0a:	2101      	movs	r1, #1
    2a0c:	202b      	movs	r0, #43	; 0x2b
    2a0e:	47a0      	blx	r4
	LCD_Write_DATA8(y1);
    2a10:	b2e8      	uxtb	r0, r5
    2a12:	47b0      	blx	r6
	LCD_Write_COM16(0x2b,0x02);
    2a14:	2102      	movs	r1, #2
    2a16:	202b      	movs	r0, #43	; 0x2b
    2a18:	47a0      	blx	r4
	LCD_Write_DATA8(y2>>8);
    2a1a:	0a38      	lsrs	r0, r7, #8
    2a1c:	47b0      	blx	r6
	LCD_Write_COM16(0x2b,0x03);
    2a1e:	2103      	movs	r1, #3
    2a20:	202b      	movs	r0, #43	; 0x2b
    2a22:	47a0      	blx	r4
	LCD_Write_DATA8(y2);
    2a24:	b2f8      	uxtb	r0, r7
    2a26:	47b0      	blx	r6

	LCD_Write_COM16(0x2c,0x00);
    2a28:	2100      	movs	r1, #0
    2a2a:	202c      	movs	r0, #44	; 0x2c
    2a2c:	47a0      	blx	r4
}
    2a2e:	b003      	add	sp, #12
    2a30:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a32:	46c0      	nop			; (mov r8, r8)
    2a34:	20000156 	.word	0x20000156
    2a38:	00002c05 	.word	0x00002c05
    2a3c:	00002c35 	.word	0x00002c35

00002a40 <fillRect>:
{
    2a40:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a42:	46ce      	mov	lr, r9
    2a44:	4647      	mov	r7, r8
    2a46:	b580      	push	{r7, lr}
    2a48:	b083      	sub	sp, #12
    2a4a:	4681      	mov	r9, r0
    2a4c:	4688      	mov	r8, r1
    2a4e:	0015      	movs	r5, r2
    2a50:	001c      	movs	r4, r3
	if (x1>x2)
    2a52:	4290      	cmp	r0, r2
    2a54:	dd02      	ble.n	2a5c <fillRect+0x1c>
    2a56:	0403      	lsls	r3, r0, #16
	SwapUint16(x1, x2);
    2a58:	4691      	mov	r9, r2
    2a5a:	0c1d      	lsrs	r5, r3, #16
	if (y1>y2)
    2a5c:	45a0      	cmp	r8, r4
    2a5e:	dd03      	ble.n	2a68 <fillRect+0x28>
    2a60:	4643      	mov	r3, r8
    2a62:	041b      	lsls	r3, r3, #16
	SwapUint16(y1, y2);
    2a64:	46a0      	mov	r8, r4
    2a66:	0c1c      	lsrs	r4, r3, #16
	REG_PORT_OUTCLR1 = LCD_CS;
    2a68:	2780      	movs	r7, #128	; 0x80
    2a6a:	03ff      	lsls	r7, r7, #15
    2a6c:	4b12      	ldr	r3, [pc, #72]	; (2ab8 <fillRect+0x78>)
    2a6e:	601f      	str	r7, [r3, #0]
	setXY(x1, y1, x2, y2);
    2a70:	b2a3      	uxth	r3, r4
    2a72:	b2aa      	uxth	r2, r5
    2a74:	4641      	mov	r1, r8
    2a76:	4668      	mov	r0, sp
    2a78:	80c1      	strh	r1, [r0, #6]
    2a7a:	88c1      	ldrh	r1, [r0, #6]
    2a7c:	4648      	mov	r0, r9
    2a7e:	466e      	mov	r6, sp
    2a80:	80f0      	strh	r0, [r6, #6]
    2a82:	88f0      	ldrh	r0, [r6, #6]
    2a84:	4e0d      	ldr	r6, [pc, #52]	; (2abc <fillRect+0x7c>)
    2a86:	47b0      	blx	r6
	REG_PORT_OUTSET1 = LCD_DC;
    2a88:	4e0d      	ldr	r6, [pc, #52]	; (2ac0 <fillRect+0x80>)
    2a8a:	2380      	movs	r3, #128	; 0x80
    2a8c:	041b      	lsls	r3, r3, #16
    2a8e:	6033      	str	r3, [r6, #0]
	(((long)(x2-x1)+1)*((long)(y2-y1)+1)));
    2a90:	464b      	mov	r3, r9
    2a92:	1aed      	subs	r5, r5, r3
    2a94:	3501      	adds	r5, #1
    2a96:	4643      	mov	r3, r8
    2a98:	1ae2      	subs	r2, r4, r3
    2a9a:	3201      	adds	r2, #1
	LCD_Fast_Fill(fore_Color_High, fore_Color_Low,
    2a9c:	436a      	muls	r2, r5
    2a9e:	4b09      	ldr	r3, [pc, #36]	; (2ac4 <fillRect+0x84>)
    2aa0:	8819      	ldrh	r1, [r3, #0]
    2aa2:	4b09      	ldr	r3, [pc, #36]	; (2ac8 <fillRect+0x88>)
    2aa4:	8818      	ldrh	r0, [r3, #0]
    2aa6:	4b09      	ldr	r3, [pc, #36]	; (2acc <fillRect+0x8c>)
    2aa8:	4798      	blx	r3
	REG_PORT_OUTSET1 = LCD_CS;
    2aaa:	6037      	str	r7, [r6, #0]
}
    2aac:	b003      	add	sp, #12
    2aae:	bc0c      	pop	{r2, r3}
    2ab0:	4690      	mov	r8, r2
    2ab2:	4699      	mov	r9, r3
    2ab4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2ab6:	46c0      	nop			; (mov r8, r8)
    2ab8:	41004494 	.word	0x41004494
    2abc:	000029b9 	.word	0x000029b9
    2ac0:	41004498 	.word	0x41004498
    2ac4:	200003d0 	.word	0x200003d0
    2ac8:	200003ce 	.word	0x200003ce
    2acc:	00002945 	.word	0x00002945

00002ad0 <fillRectBackColor>:
{
    2ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ad2:	46ce      	mov	lr, r9
    2ad4:	4647      	mov	r7, r8
    2ad6:	b580      	push	{r7, lr}
    2ad8:	b083      	sub	sp, #12
    2ada:	4681      	mov	r9, r0
    2adc:	4688      	mov	r8, r1
    2ade:	0015      	movs	r5, r2
    2ae0:	001c      	movs	r4, r3
	if (x1>x2)
    2ae2:	4290      	cmp	r0, r2
    2ae4:	dd02      	ble.n	2aec <fillRectBackColor+0x1c>
    2ae6:	0403      	lsls	r3, r0, #16
	SwapUint16(x1, x2);
    2ae8:	4691      	mov	r9, r2
    2aea:	0c1d      	lsrs	r5, r3, #16
	if (y1>y2)
    2aec:	45a0      	cmp	r8, r4
    2aee:	dd03      	ble.n	2af8 <fillRectBackColor+0x28>
    2af0:	4643      	mov	r3, r8
    2af2:	041b      	lsls	r3, r3, #16
	SwapUint16(y1, y2);
    2af4:	46a0      	mov	r8, r4
    2af6:	0c1c      	lsrs	r4, r3, #16
	REG_PORT_OUTCLR1 = LCD_CS;
    2af8:	2780      	movs	r7, #128	; 0x80
    2afa:	03ff      	lsls	r7, r7, #15
    2afc:	4b12      	ldr	r3, [pc, #72]	; (2b48 <fillRectBackColor+0x78>)
    2afe:	601f      	str	r7, [r3, #0]
	setXY(x1, y1, x2, y2);
    2b00:	b2a3      	uxth	r3, r4
    2b02:	b2aa      	uxth	r2, r5
    2b04:	4641      	mov	r1, r8
    2b06:	4668      	mov	r0, sp
    2b08:	80c1      	strh	r1, [r0, #6]
    2b0a:	88c1      	ldrh	r1, [r0, #6]
    2b0c:	4648      	mov	r0, r9
    2b0e:	466e      	mov	r6, sp
    2b10:	80f0      	strh	r0, [r6, #6]
    2b12:	88f0      	ldrh	r0, [r6, #6]
    2b14:	4e0d      	ldr	r6, [pc, #52]	; (2b4c <fillRectBackColor+0x7c>)
    2b16:	47b0      	blx	r6
	REG_PORT_OUTSET1 = LCD_DC;
    2b18:	4e0d      	ldr	r6, [pc, #52]	; (2b50 <fillRectBackColor+0x80>)
    2b1a:	2380      	movs	r3, #128	; 0x80
    2b1c:	041b      	lsls	r3, r3, #16
    2b1e:	6033      	str	r3, [r6, #0]
	(((long)(x2-x1)+1)*((long)(y2-y1)+1)));
    2b20:	464b      	mov	r3, r9
    2b22:	1aed      	subs	r5, r5, r3
    2b24:	3501      	adds	r5, #1
    2b26:	4643      	mov	r3, r8
    2b28:	1ae2      	subs	r2, r4, r3
    2b2a:	3201      	adds	r2, #1
	LCD_Fast_Fill(back_Color_High, back_Color_Low,
    2b2c:	436a      	muls	r2, r5
    2b2e:	4b09      	ldr	r3, [pc, #36]	; (2b54 <fillRectBackColor+0x84>)
    2b30:	8819      	ldrh	r1, [r3, #0]
    2b32:	4b09      	ldr	r3, [pc, #36]	; (2b58 <fillRectBackColor+0x88>)
    2b34:	8818      	ldrh	r0, [r3, #0]
    2b36:	4b09      	ldr	r3, [pc, #36]	; (2b5c <fillRectBackColor+0x8c>)
    2b38:	4798      	blx	r3
	REG_PORT_OUTSET1 = LCD_CS;
    2b3a:	6037      	str	r7, [r6, #0]
}
    2b3c:	b003      	add	sp, #12
    2b3e:	bc0c      	pop	{r2, r3}
    2b40:	4690      	mov	r8, r2
    2b42:	4699      	mov	r9, r3
    2b44:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2b46:	46c0      	nop			; (mov r8, r8)
    2b48:	41004494 	.word	0x41004494
    2b4c:	000029b9 	.word	0x000029b9
    2b50:	41004498 	.word	0x41004498
    2b54:	200003cc 	.word	0x200003cc
    2b58:	200003d2 	.word	0x200003d2
    2b5c:	00002945 	.word	0x00002945

00002b60 <clrXY>:
{
    2b60:	b510      	push	{r4, lr}
	setXY(0,0,display_X_size,display_Y_size);
    2b62:	4b04      	ldr	r3, [pc, #16]	; (2b74 <clrXY+0x14>)
    2b64:	881b      	ldrh	r3, [r3, #0]
    2b66:	4a04      	ldr	r2, [pc, #16]	; (2b78 <clrXY+0x18>)
    2b68:	8812      	ldrh	r2, [r2, #0]
    2b6a:	2100      	movs	r1, #0
    2b6c:	2000      	movs	r0, #0
    2b6e:	4c03      	ldr	r4, [pc, #12]	; (2b7c <clrXY+0x1c>)
    2b70:	47a0      	blx	r4
}
    2b72:	bd10      	pop	{r4, pc}
    2b74:	20000156 	.word	0x20000156
    2b78:	20000154 	.word	0x20000154
    2b7c:	000029b9 	.word	0x000029b9

00002b80 <clrScr>:
{
    2b80:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = LCD_CS;
    2b82:	2280      	movs	r2, #128	; 0x80
    2b84:	03d2      	lsls	r2, r2, #15
    2b86:	4b02      	ldr	r3, [pc, #8]	; (2b90 <clrScr+0x10>)
    2b88:	601a      	str	r2, [r3, #0]
	clrXY();
    2b8a:	4b02      	ldr	r3, [pc, #8]	; (2b94 <clrScr+0x14>)
    2b8c:	4798      	blx	r3
}
    2b8e:	bd10      	pop	{r4, pc}
    2b90:	41004494 	.word	0x41004494
    2b94:	00002b61 	.word	0x00002b61

00002b98 <setPixel>:

void setPixel(uint16_t color)
{
    2b98:	b510      	push	{r4, lr}
	//it sets it to a 16-bit color.
	LCD_Write_DATA16((color>>8),(color&0xFF));
    2b9a:	b2c1      	uxtb	r1, r0
    2b9c:	0a00      	lsrs	r0, r0, #8
    2b9e:	4b01      	ldr	r3, [pc, #4]	; (2ba4 <setPixel+0xc>)
    2ba0:	4798      	blx	r3
}
    2ba2:	bd10      	pop	{r4, pc}
    2ba4:	00002c1d 	.word	0x00002c1d

00002ba8 <clearScreen>:
	LCD_Write_DATA8(0x80);
	REG_PORT_OUTSET1 = LCD_CS;
}

void clearScreen(void)
{
    2ba8:	b510      	push	{r4, lr}
	fore_Color_High = ((r&248)|g>>5);
    2baa:	2300      	movs	r3, #0
    2bac:	4a06      	ldr	r2, [pc, #24]	; (2bc8 <clearScreen+0x20>)
    2bae:	8013      	strh	r3, [r2, #0]
	fore_Color_Low = ((g&28)<<3|b>>3);
    2bb0:	4a06      	ldr	r2, [pc, #24]	; (2bcc <clearScreen+0x24>)
    2bb2:	8013      	strh	r3, [r2, #0]
	setColorRGB(0,0,0);
	fillRect(0,0,display_Y_size,display_X_size);
    2bb4:	4b06      	ldr	r3, [pc, #24]	; (2bd0 <clearScreen+0x28>)
    2bb6:	881b      	ldrh	r3, [r3, #0]
    2bb8:	4a06      	ldr	r2, [pc, #24]	; (2bd4 <clearScreen+0x2c>)
    2bba:	8812      	ldrh	r2, [r2, #0]
    2bbc:	2100      	movs	r1, #0
    2bbe:	2000      	movs	r0, #0
    2bc0:	4c05      	ldr	r4, [pc, #20]	; (2bd8 <clearScreen+0x30>)
    2bc2:	47a0      	blx	r4
}
    2bc4:	bd10      	pop	{r4, pc}
    2bc6:	46c0      	nop			; (mov r8, r8)
    2bc8:	200003ce 	.word	0x200003ce
    2bcc:	200003d0 	.word	0x200003d0
    2bd0:	20000154 	.word	0x20000154
    2bd4:	20000156 	.word	0x20000156
    2bd8:	00002a41 	.word	0x00002a41

00002bdc <LCD_Write_Bus>:
	fillRect(0,0,799,489);
		
}

void LCD_Write_Bus(char VH, char VL)
{
    2bdc:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = 0x0000ffff;
    2bde:	4c06      	ldr	r4, [pc, #24]	; (2bf8 <LCD_Write_Bus+0x1c>)
    2be0:	4b06      	ldr	r3, [pc, #24]	; (2bfc <LCD_Write_Bus+0x20>)
    2be2:	6023      	str	r3, [r4, #0]
	REG_PORT_OUTSET1 = (VH << 8) | VL;
    2be4:	0200      	lsls	r0, r0, #8
    2be6:	4301      	orrs	r1, r0
    2be8:	4b05      	ldr	r3, [pc, #20]	; (2c00 <LCD_Write_Bus+0x24>)
    2bea:	6019      	str	r1, [r3, #0]
	REG_PORT_OUTCLR1 = LCD_WR;
    2bec:	2280      	movs	r2, #128	; 0x80
    2bee:	0292      	lsls	r2, r2, #10
    2bf0:	6022      	str	r2, [r4, #0]
	REG_PORT_OUTSET1 = LCD_WR;
    2bf2:	601a      	str	r2, [r3, #0]
}
    2bf4:	bd10      	pop	{r4, pc}
    2bf6:	46c0      	nop			; (mov r8, r8)
    2bf8:	41004494 	.word	0x41004494
    2bfc:	0000ffff 	.word	0x0000ffff
    2c00:	41004498 	.word	0x41004498

00002c04 <LCD_Write_COM16>:

void LCD_Write_COM16(char VH, char VL)
{
    2c04:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = LCD_DC;
    2c06:	2280      	movs	r2, #128	; 0x80
    2c08:	0412      	lsls	r2, r2, #16
    2c0a:	4b02      	ldr	r3, [pc, #8]	; (2c14 <LCD_Write_COM16+0x10>)
    2c0c:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(VH,VL);
    2c0e:	4b02      	ldr	r3, [pc, #8]	; (2c18 <LCD_Write_COM16+0x14>)
    2c10:	4798      	blx	r3
}
    2c12:	bd10      	pop	{r4, pc}
    2c14:	41004494 	.word	0x41004494
    2c18:	00002bdd 	.word	0x00002bdd

00002c1c <LCD_Write_DATA16>:
	REG_PORT_OUTCLR1 = LCD_DC;
	LCD_Write_Bus(0x00, VL);
}

void LCD_Write_DATA16(char VH, char VL)
{
    2c1c:	b510      	push	{r4, lr}
	REG_PORT_OUTSET1 = LCD_DC;
    2c1e:	2280      	movs	r2, #128	; 0x80
    2c20:	0412      	lsls	r2, r2, #16
    2c22:	4b02      	ldr	r3, [pc, #8]	; (2c2c <LCD_Write_DATA16+0x10>)
    2c24:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(VH,VL);
    2c26:	4b02      	ldr	r3, [pc, #8]	; (2c30 <LCD_Write_DATA16+0x14>)
    2c28:	4798      	blx	r3
}
    2c2a:	bd10      	pop	{r4, pc}
    2c2c:	41004498 	.word	0x41004498
    2c30:	00002bdd 	.word	0x00002bdd

00002c34 <LCD_Write_DATA8>:

void LCD_Write_DATA8(char VL)
{
    2c34:	b510      	push	{r4, lr}
    2c36:	0001      	movs	r1, r0
	REG_PORT_OUTSET1 = LCD_DC;
    2c38:	2280      	movs	r2, #128	; 0x80
    2c3a:	0412      	lsls	r2, r2, #16
    2c3c:	4b02      	ldr	r3, [pc, #8]	; (2c48 <LCD_Write_DATA8+0x14>)
    2c3e:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(0x00, VL);
    2c40:	2000      	movs	r0, #0
    2c42:	4b02      	ldr	r3, [pc, #8]	; (2c4c <LCD_Write_DATA8+0x18>)
    2c44:	4798      	blx	r3
}
    2c46:	bd10      	pop	{r4, pc}
    2c48:	41004498 	.word	0x41004498
    2c4c:	00002bdd 	.word	0x00002bdd

00002c50 <InitLCD>:
{
    2c50:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c52:	46c6      	mov	lr, r8
    2c54:	b500      	push	{lr}
    2c56:	b082      	sub	sp, #8
	REG_PORT_DIRSET1 = 0x0000ffff;		//LCD data bus, PB00 - PB15
    2c58:	4b80      	ldr	r3, [pc, #512]	; (2e5c <InitLCD+0x20c>)
    2c5a:	4f81      	ldr	r7, [pc, #516]	; (2e60 <InitLCD+0x210>)
    2c5c:	601f      	str	r7, [r3, #0]
	REG_PORT_DIRSET1 = LCD_Reset;
    2c5e:	2580      	movs	r5, #128	; 0x80
    2c60:	05ed      	lsls	r5, r5, #23
    2c62:	601d      	str	r5, [r3, #0]
	REG_PORT_DIRSET1 = LCD_CS;
    2c64:	2680      	movs	r6, #128	; 0x80
    2c66:	03f6      	lsls	r6, r6, #15
    2c68:	601e      	str	r6, [r3, #0]
	REG_PORT_DIRSET1 = LCD_WR;
    2c6a:	2080      	movs	r0, #128	; 0x80
    2c6c:	0280      	lsls	r0, r0, #10
    2c6e:	6018      	str	r0, [r3, #0]
	REG_PORT_DIRSET1 = LCD_DC;
    2c70:	2180      	movs	r1, #128	; 0x80
    2c72:	0409      	lsls	r1, r1, #16
    2c74:	6019      	str	r1, [r3, #0]
	REG_PORT_DIRSET1 = LCD_RD;
    2c76:	2280      	movs	r2, #128	; 0x80
    2c78:	0252      	lsls	r2, r2, #9
    2c7a:	601a      	str	r2, [r3, #0]
	REG_PORT_OUTCLR1 = 0x0000ffff;
    2c7c:	4c79      	ldr	r4, [pc, #484]	; (2e64 <InitLCD+0x214>)
    2c7e:	6027      	str	r7, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_Reset;
    2c80:	6025      	str	r5, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_CS;
    2c82:	6026      	str	r6, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_WR;
    2c84:	6020      	str	r0, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_DC;
    2c86:	6021      	str	r1, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_RD;
    2c88:	6022      	str	r2, [r4, #0]
	REG_PORT_DIRSET1 = PORT_PB16;
    2c8a:	601a      	str	r2, [r3, #0]
	REG_PORT_OUTSET1 = PORT_PB16;
    2c8c:	4f76      	ldr	r7, [pc, #472]	; (2e68 <InitLCD+0x218>)
    2c8e:	603a      	str	r2, [r7, #0]
	REG_PORT_OUTSET1 = LCD_Reset;
    2c90:	603d      	str	r5, [r7, #0]
	delay_ms(5);
    2c92:	2005      	movs	r0, #5
    2c94:	4b75      	ldr	r3, [pc, #468]	; (2e6c <InitLCD+0x21c>)
    2c96:	4698      	mov	r8, r3
    2c98:	4798      	blx	r3
	REG_PORT_OUTCLR1 = LCD_Reset;
    2c9a:	6025      	str	r5, [r4, #0]
	delay_ms(5);
    2c9c:	2005      	movs	r0, #5
    2c9e:	47c0      	blx	r8
	REG_PORT_OUTSET1 = LCD_Reset;
    2ca0:	603d      	str	r5, [r7, #0]
	REG_PORT_OUTCLR1 = LCD_CS;
    2ca2:	6026      	str	r6, [r4, #0]
	for(int i = 0; i < 70; i++)
    2ca4:	2400      	movs	r4, #0
		REG_PORT_OUTCLR1 = LCD_DC;
    2ca6:	4b6f      	ldr	r3, [pc, #444]	; (2e64 <InitLCD+0x214>)
    2ca8:	4698      	mov	r8, r3
    2caa:	2580      	movs	r5, #128	; 0x80
    2cac:	042d      	lsls	r5, r5, #16
    2cae:	002f      	movs	r7, r5
		LCD_Write_COM16(belial[i],mulciber[i]);
    2cb0:	4e6f      	ldr	r6, [pc, #444]	; (2e70 <InitLCD+0x220>)
		REG_PORT_OUTCLR1 = LCD_DC;
    2cb2:	4643      	mov	r3, r8
    2cb4:	601f      	str	r7, [r3, #0]
		LCD_Write_COM16(belial[i],mulciber[i]);
    2cb6:	5da1      	ldrb	r1, [r4, r6]
    2cb8:	4b6e      	ldr	r3, [pc, #440]	; (2e74 <InitLCD+0x224>)
    2cba:	5ce0      	ldrb	r0, [r4, r3]
    2cbc:	4b6e      	ldr	r3, [pc, #440]	; (2e78 <InitLCD+0x228>)
    2cbe:	4798      	blx	r3
		REG_PORT_OUTSET1 = LCD_DC;
    2cc0:	4b69      	ldr	r3, [pc, #420]	; (2e68 <InitLCD+0x218>)
    2cc2:	601d      	str	r5, [r3, #0]
		LCD_Write_DATA8(lucifer[i]);
    2cc4:	4b6d      	ldr	r3, [pc, #436]	; (2e7c <InitLCD+0x22c>)
    2cc6:	5ce0      	ldrb	r0, [r4, r3]
    2cc8:	4b6d      	ldr	r3, [pc, #436]	; (2e80 <InitLCD+0x230>)
    2cca:	4798      	blx	r3
	for(int i = 0; i < 70; i++)
    2ccc:	3401      	adds	r4, #1
    2cce:	2c46      	cmp	r4, #70	; 0x46
    2cd0:	d1ef      	bne.n	2cb2 <InitLCD+0x62>
    2cd2:	23d1      	movs	r3, #209	; 0xd1
    2cd4:	9301      	str	r3, [sp, #4]
			LCD_Write_COM16(k,0x00);
    2cd6:	4d68      	ldr	r5, [pc, #416]	; (2e78 <InitLCD+0x228>)
			LCD_Write_DATA8(beelzebub[l]);
    2cd8:	4f69      	ldr	r7, [pc, #420]	; (2e80 <InitLCD+0x230>)
    2cda:	4c6a      	ldr	r4, [pc, #424]	; (2e84 <InitLCD+0x234>)
    2cdc:	0026      	movs	r6, r4
    2cde:	3634      	adds	r6, #52	; 0x34
			LCD_Write_COM16(k,0x00);
    2ce0:	2100      	movs	r1, #0
    2ce2:	9801      	ldr	r0, [sp, #4]
    2ce4:	47a8      	blx	r5
			LCD_Write_DATA8(beelzebub[l]);
    2ce6:	7820      	ldrb	r0, [r4, #0]
    2ce8:	47b8      	blx	r7
    2cea:	3401      	adds	r4, #1
		for(int l = 0; l < 52; l++)
    2cec:	42a6      	cmp	r6, r4
    2cee:	d1f7      	bne.n	2ce0 <InitLCD+0x90>
	for(char k = 0xD1; k < 0xD6; k++)
    2cf0:	9b01      	ldr	r3, [sp, #4]
    2cf2:	3301      	adds	r3, #1
    2cf4:	b2db      	uxtb	r3, r3
    2cf6:	9301      	str	r3, [sp, #4]
    2cf8:	2bd6      	cmp	r3, #214	; 0xd6
    2cfa:	d1ee      	bne.n	2cda <InitLCD+0x8a>
	LCD_Write_COM16(0xF0, 0x00);LCD_Write_DATA8(0x55);
    2cfc:	2100      	movs	r1, #0
    2cfe:	20f0      	movs	r0, #240	; 0xf0
    2d00:	4c5d      	ldr	r4, [pc, #372]	; (2e78 <InitLCD+0x228>)
    2d02:	47a0      	blx	r4
    2d04:	2055      	movs	r0, #85	; 0x55
    2d06:	4d5e      	ldr	r5, [pc, #376]	; (2e80 <InitLCD+0x230>)
    2d08:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x01);LCD_Write_DATA8(0xAA);	
    2d0a:	2101      	movs	r1, #1
    2d0c:	20f0      	movs	r0, #240	; 0xf0
    2d0e:	47a0      	blx	r4
    2d10:	20aa      	movs	r0, #170	; 0xaa
    2d12:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x02);LCD_Write_DATA8(0x52);	
    2d14:	2102      	movs	r1, #2
    2d16:	20f0      	movs	r0, #240	; 0xf0
    2d18:	47a0      	blx	r4
    2d1a:	2052      	movs	r0, #82	; 0x52
    2d1c:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x03);LCD_Write_DATA8(0x08);	
    2d1e:	2103      	movs	r1, #3
    2d20:	20f0      	movs	r0, #240	; 0xf0
    2d22:	47a0      	blx	r4
    2d24:	2008      	movs	r0, #8
    2d26:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x04);LCD_Write_DATA8(0x00);	
    2d28:	2104      	movs	r1, #4
    2d2a:	20f0      	movs	r0, #240	; 0xf0
    2d2c:	47a0      	blx	r4
    2d2e:	2000      	movs	r0, #0
    2d30:	47a8      	blx	r5
	LCD_Write_COM16(0xB1, 0x00);LCD_Write_DATA8(0xCC);
    2d32:	2100      	movs	r1, #0
    2d34:	20b1      	movs	r0, #177	; 0xb1
    2d36:	47a0      	blx	r4
    2d38:	20cc      	movs	r0, #204	; 0xcc
    2d3a:	47a8      	blx	r5
	LCD_Write_COM16(0xB1, 0x01);LCD_Write_DATA8(0x00);	
    2d3c:	2101      	movs	r1, #1
    2d3e:	20b1      	movs	r0, #177	; 0xb1
    2d40:	47a0      	blx	r4
    2d42:	2000      	movs	r0, #0
    2d44:	47a8      	blx	r5
	LCD_Write_COM16(0xB5, 0x00);LCD_Write_DATA8(0x50);	
    2d46:	2100      	movs	r1, #0
    2d48:	20b5      	movs	r0, #181	; 0xb5
    2d4a:	47a0      	blx	r4
    2d4c:	2050      	movs	r0, #80	; 0x50
    2d4e:	47a8      	blx	r5
	LCD_Write_COM16(0xB6, 0x00);LCD_Write_DATA8(0x05);
    2d50:	2100      	movs	r1, #0
    2d52:	20b6      	movs	r0, #182	; 0xb6
    2d54:	47a0      	blx	r4
    2d56:	2005      	movs	r0, #5
    2d58:	47a8      	blx	r5
	LCD_Write_COM16(0xB7, 0x00);LCD_Write_DATA8(0x70);
    2d5a:	2100      	movs	r1, #0
    2d5c:	20b7      	movs	r0, #183	; 0xb7
    2d5e:	47a0      	blx	r4
    2d60:	2070      	movs	r0, #112	; 0x70
    2d62:	47a8      	blx	r5
	LCD_Write_COM16(0xB7, 0x01);LCD_Write_DATA8(0x70);
    2d64:	2101      	movs	r1, #1
    2d66:	20b7      	movs	r0, #183	; 0xb7
    2d68:	47a0      	blx	r4
    2d6a:	2070      	movs	r0, #112	; 0x70
    2d6c:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x00);LCD_Write_DATA8(0x01);
    2d6e:	2100      	movs	r1, #0
    2d70:	20b8      	movs	r0, #184	; 0xb8
    2d72:	47a0      	blx	r4
    2d74:	2001      	movs	r0, #1
    2d76:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x01);LCD_Write_DATA8(0x03);
    2d78:	2101      	movs	r1, #1
    2d7a:	20b8      	movs	r0, #184	; 0xb8
    2d7c:	47a0      	blx	r4
    2d7e:	2003      	movs	r0, #3
    2d80:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x02);LCD_Write_DATA8(0x03);
    2d82:	2102      	movs	r1, #2
    2d84:	20b8      	movs	r0, #184	; 0xb8
    2d86:	47a0      	blx	r4
    2d88:	2003      	movs	r0, #3
    2d8a:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x03);LCD_Write_DATA8(0x03);	
    2d8c:	2103      	movs	r1, #3
    2d8e:	20b8      	movs	r0, #184	; 0xb8
    2d90:	47a0      	blx	r4
    2d92:	2003      	movs	r0, #3
    2d94:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x00);LCD_Write_DATA8(0x02);
    2d96:	2100      	movs	r1, #0
    2d98:	20bc      	movs	r0, #188	; 0xbc
    2d9a:	47a0      	blx	r4
    2d9c:	2002      	movs	r0, #2
    2d9e:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x01);LCD_Write_DATA8(0x00);
    2da0:	2101      	movs	r1, #1
    2da2:	20bc      	movs	r0, #188	; 0xbc
    2da4:	47a0      	blx	r4
    2da6:	2000      	movs	r0, #0
    2da8:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x02);LCD_Write_DATA8(0x00);
    2daa:	2102      	movs	r1, #2
    2dac:	20bc      	movs	r0, #188	; 0xbc
    2dae:	47a0      	blx	r4
    2db0:	2000      	movs	r0, #0
    2db2:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x00);LCD_Write_DATA8(0xD0);
    2db4:	2100      	movs	r1, #0
    2db6:	20c9      	movs	r0, #201	; 0xc9
    2db8:	47a0      	blx	r4
    2dba:	20d0      	movs	r0, #208	; 0xd0
    2dbc:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x01);LCD_Write_DATA8(0x02);
    2dbe:	2101      	movs	r1, #1
    2dc0:	20c9      	movs	r0, #201	; 0xc9
    2dc2:	47a0      	blx	r4
    2dc4:	2002      	movs	r0, #2
    2dc6:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x02);LCD_Write_DATA8(0x50);
    2dc8:	2102      	movs	r1, #2
    2dca:	20c9      	movs	r0, #201	; 0xc9
    2dcc:	47a0      	blx	r4
    2dce:	2050      	movs	r0, #80	; 0x50
    2dd0:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x03);LCD_Write_DATA8(0x50);
    2dd2:	2103      	movs	r1, #3
    2dd4:	20c9      	movs	r0, #201	; 0xc9
    2dd6:	47a0      	blx	r4
    2dd8:	2050      	movs	r0, #80	; 0x50
    2dda:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x04);LCD_Write_DATA8(0x50);
    2ddc:	2104      	movs	r1, #4
    2dde:	20c9      	movs	r0, #201	; 0xc9
    2de0:	47a0      	blx	r4
    2de2:	2050      	movs	r0, #80	; 0x50
    2de4:	47a8      	blx	r5
	LCD_Write_COM16(0x35, 0x00);LCD_Write_DATA8(0x00);
    2de6:	2100      	movs	r1, #0
    2de8:	2035      	movs	r0, #53	; 0x35
    2dea:	47a0      	blx	r4
    2dec:	2000      	movs	r0, #0
    2dee:	47a8      	blx	r5
	LCD_Write_COM16(0x3A, 0x00);LCD_Write_DATA8(0x55);
    2df0:	2100      	movs	r1, #0
    2df2:	203a      	movs	r0, #58	; 0x3a
    2df4:	47a0      	blx	r4
    2df6:	2055      	movs	r0, #85	; 0x55
    2df8:	47a8      	blx	r5
	LCD_Write_COM16(0x36, 0x00);LCD_Write_DATA8(0x00);
    2dfa:	2100      	movs	r1, #0
    2dfc:	2036      	movs	r0, #54	; 0x36
    2dfe:	47a0      	blx	r4
    2e00:	2000      	movs	r0, #0
    2e02:	47a8      	blx	r5
  	LCD_Write_COM16(0x11,0x00);   //Start Up  
    2e04:	2100      	movs	r1, #0
    2e06:	2011      	movs	r0, #17
    2e08:	47a0      	blx	r4
  	delay_ms(100);
    2e0a:	2064      	movs	r0, #100	; 0x64
    2e0c:	4e17      	ldr	r6, [pc, #92]	; (2e6c <InitLCD+0x21c>)
    2e0e:	47b0      	blx	r6
  	LCD_Write_COM16(0x29,0x00);   //Display On  
    2e10:	2100      	movs	r1, #0
    2e12:	2029      	movs	r0, #41	; 0x29
    2e14:	47a0      	blx	r4
   	delay_ms(100);
    2e16:	2064      	movs	r0, #100	; 0x64
    2e18:	47b0      	blx	r6
	LCD_Write_COM16(0x51,0x00);LCD_Write_DATA8(0xFF);
    2e1a:	2100      	movs	r1, #0
    2e1c:	2051      	movs	r0, #81	; 0x51
    2e1e:	47a0      	blx	r4
    2e20:	20ff      	movs	r0, #255	; 0xff
    2e22:	47a8      	blx	r5
	REG_PORT_OUTSET1 = LCD_CS;
    2e24:	2280      	movs	r2, #128	; 0x80
    2e26:	03d2      	lsls	r2, r2, #15
    2e28:	4b0f      	ldr	r3, [pc, #60]	; (2e68 <InitLCD+0x218>)
    2e2a:	601a      	str	r2, [r3, #0]
	clrScr();
    2e2c:	4b16      	ldr	r3, [pc, #88]	; (2e88 <InitLCD+0x238>)
    2e2e:	4798      	blx	r3
	setColorRGB(0,0,0);
    2e30:	2200      	movs	r2, #0
    2e32:	2100      	movs	r1, #0
    2e34:	2000      	movs	r0, #0
    2e36:	4b15      	ldr	r3, [pc, #84]	; (2e8c <InitLCD+0x23c>)
    2e38:	4798      	blx	r3
	setBackColorRGB(0, 0, 0);
    2e3a:	2200      	movs	r2, #0
    2e3c:	2100      	movs	r1, #0
    2e3e:	2000      	movs	r0, #0
    2e40:	4b13      	ldr	r3, [pc, #76]	; (2e90 <InitLCD+0x240>)
    2e42:	4798      	blx	r3
	fillRect(0,0,799,489);
    2e44:	23ea      	movs	r3, #234	; 0xea
    2e46:	33ff      	adds	r3, #255	; 0xff
    2e48:	4a12      	ldr	r2, [pc, #72]	; (2e94 <InitLCD+0x244>)
    2e4a:	2100      	movs	r1, #0
    2e4c:	2000      	movs	r0, #0
    2e4e:	4c12      	ldr	r4, [pc, #72]	; (2e98 <InitLCD+0x248>)
    2e50:	47a0      	blx	r4
}
    2e52:	b002      	add	sp, #8
    2e54:	bc04      	pop	{r2}
    2e56:	4690      	mov	r8, r2
    2e58:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2e5a:	46c0      	nop			; (mov r8, r8)
    2e5c:	41004488 	.word	0x41004488
    2e60:	0000ffff 	.word	0x0000ffff
    2e64:	41004494 	.word	0x41004494
    2e68:	41004498 	.word	0x41004498
    2e6c:	00000401 	.word	0x00000401
    2e70:	0000651c 	.word	0x0000651c
    2e74:	0000648c 	.word	0x0000648c
    2e78:	00002c05 	.word	0x00002c05
    2e7c:	000064d4 	.word	0x000064d4
    2e80:	00002c35 	.word	0x00002c35
    2e84:	00006458 	.word	0x00006458
    2e88:	00002b81 	.word	0x00002b81
    2e8c:	000028f5 	.word	0x000028f5
    2e90:	0000291d 	.word	0x0000291d
    2e94:	0000031f 	.word	0x0000031f
    2e98:	00002a41 	.word	0x00002a41

00002e9c <SysTick_Handler>:

void SysTick_Handler(void)
{

	
	ul_tickcount++;
    2e9c:	4b06      	ldr	r3, [pc, #24]	; (2eb8 <SysTick_Handler+0x1c>)
    2e9e:	881b      	ldrh	r3, [r3, #0]
    2ea0:	3301      	adds	r3, #1
    2ea2:	b29b      	uxth	r3, r3
	
	if(ul_tickcount == (10000))
    2ea4:	4a05      	ldr	r2, [pc, #20]	; (2ebc <SysTick_Handler+0x20>)
    2ea6:	4293      	cmp	r3, r2
    2ea8:	d002      	beq.n	2eb0 <SysTick_Handler+0x14>
	ul_tickcount++;
    2eaa:	4a03      	ldr	r2, [pc, #12]	; (2eb8 <SysTick_Handler+0x1c>)
    2eac:	8013      	strh	r3, [r2, #0]
	{
		ul_tickcount = 0;
	}
	

}
    2eae:	4770      	bx	lr
		ul_tickcount = 0;
    2eb0:	2200      	movs	r2, #0
    2eb2:	4b01      	ldr	r3, [pc, #4]	; (2eb8 <SysTick_Handler+0x1c>)
    2eb4:	801a      	strh	r2, [r3, #0]
}
    2eb6:	e7fa      	b.n	2eae <SysTick_Handler+0x12>
    2eb8:	2000029a 	.word	0x2000029a
    2ebc:	00002710 	.word	0x00002710

00002ec0 <conf_systick>:

void conf_systick(void)
{
    2ec0:	b510      	push	{r4, lr}
	//system_core_clk=48Mhz / 1000=48kHz systic clk if 48Mhz  is used
	SysTick_Config(SystemCoreClock/1000);
    2ec2:	4b0e      	ldr	r3, [pc, #56]	; (2efc <conf_systick+0x3c>)
    2ec4:	6818      	ldr	r0, [r3, #0]
    2ec6:	21fa      	movs	r1, #250	; 0xfa
    2ec8:	0089      	lsls	r1, r1, #2
    2eca:	4b0d      	ldr	r3, [pc, #52]	; (2f00 <conf_systick+0x40>)
    2ecc:	4798      	blx	r3
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    2ece:	3801      	subs	r0, #1
    2ed0:	4b0c      	ldr	r3, [pc, #48]	; (2f04 <conf_systick+0x44>)
    2ed2:	4298      	cmp	r0, r3
    2ed4:	d80d      	bhi.n	2ef2 <conf_systick+0x32>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    2ed6:	4a0c      	ldr	r2, [pc, #48]	; (2f08 <conf_systick+0x48>)
    2ed8:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    2eda:	480c      	ldr	r0, [pc, #48]	; (2f0c <conf_systick+0x4c>)
    2edc:	6a03      	ldr	r3, [r0, #32]
    2ede:	021b      	lsls	r3, r3, #8
    2ee0:	0a1b      	lsrs	r3, r3, #8
    2ee2:	21c0      	movs	r1, #192	; 0xc0
    2ee4:	0609      	lsls	r1, r1, #24
    2ee6:	430b      	orrs	r3, r1
    2ee8:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    2eea:	2300      	movs	r3, #0
    2eec:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    2eee:	3307      	adds	r3, #7
    2ef0:	6013      	str	r3, [r2, #0]
    2ef2:	2280      	movs	r2, #128	; 0x80
    2ef4:	0612      	lsls	r2, r2, #24
    2ef6:	4b06      	ldr	r3, [pc, #24]	; (2f10 <conf_systick+0x50>)
    2ef8:	601a      	str	r2, [r3, #0]
	system_interrupt_enable(SYSTEM_INTERRUPT_SYSTICK);
}
    2efa:	bd10      	pop	{r4, pc}
    2efc:	2000000c 	.word	0x2000000c
    2f00:	0000316d 	.word	0x0000316d
    2f04:	00ffffff 	.word	0x00ffffff
    2f08:	e000e010 	.word	0xe000e010
    2f0c:	e000ed00 	.word	0xe000ed00
    2f10:	e000e100 	.word	0xe000e100

00002f14 <configure_usart_USB>:

/**************************SERCOM STUFF*******************************/
void configure_usart_USB(void)
{
    2f14:	b530      	push	{r4, r5, lr}
    2f16:	b091      	sub	sp, #68	; 0x44
	config->data_order       = USART_DATAORDER_LSB;
    2f18:	2380      	movs	r3, #128	; 0x80
    2f1a:	05db      	lsls	r3, r3, #23
    2f1c:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    2f1e:	2300      	movs	r3, #0
    2f20:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    2f22:	22ff      	movs	r2, #255	; 0xff
    2f24:	4669      	mov	r1, sp
    2f26:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    2f28:	2200      	movs	r2, #0
    2f2a:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    2f2c:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
    2f2e:	2196      	movs	r1, #150	; 0x96
    2f30:	0189      	lsls	r1, r1, #6
    2f32:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
    2f34:	2101      	movs	r1, #1
    2f36:	2024      	movs	r0, #36	; 0x24
    2f38:	466c      	mov	r4, sp
    2f3a:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    2f3c:	3001      	adds	r0, #1
    2f3e:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    2f40:	3125      	adds	r1, #37	; 0x25
    2f42:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    2f44:	3101      	adds	r1, #1
    2f46:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    2f48:	930a      	str	r3, [sp, #40]	; 0x28
	config->run_in_standby   = false;
    2f4a:	3105      	adds	r1, #5
    2f4c:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    2f4e:	3101      	adds	r1, #1
    2f50:	5463      	strb	r3, [r4, r1]
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    2f52:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    2f54:	8223      	strh	r3, [r4, #16]
	config->lin_slave_enable      = false;
    2f56:	76e3      	strb	r3, [r4, #27]
	config->immediate_buffer_overflow_notification  = false;
    2f58:	7622      	strb	r2, [r4, #24]
	config->start_frame_detection_enable            = false;
    2f5a:	7722      	strb	r2, [r4, #28]
	config->encoding_format_enable                  = false;
    2f5c:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    2f5e:	2313      	movs	r3, #19
    2f60:	76a3      	strb	r3, [r4, #26]
	config->collision_detection_enable              = false;
    2f62:	7762      	strb	r2, [r4, #29]
	struct usart_config config_usart_USB;
	usart_get_config_defaults(&config_usart_USB);

		config_usart_USB.baudrate    = 9600;
		config_usart_USB.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    2f64:	2380      	movs	r3, #128	; 0x80
    2f66:	035b      	lsls	r3, r3, #13
    2f68:	9303      	str	r3, [sp, #12]
		config_usart_USB.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    2f6a:	4b12      	ldr	r3, [pc, #72]	; (2fb4 <configure_usart_USB+0xa0>)
    2f6c:	930c      	str	r3, [sp, #48]	; 0x30
		config_usart_USB.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    2f6e:	4b12      	ldr	r3, [pc, #72]	; (2fb8 <configure_usart_USB+0xa4>)
    2f70:	930d      	str	r3, [sp, #52]	; 0x34
		config_usart_USB.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    2f72:	2301      	movs	r3, #1
    2f74:	425b      	negs	r3, r3
    2f76:	930e      	str	r3, [sp, #56]	; 0x38
		config_usart_USB.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    2f78:	930f      	str	r3, [sp, #60]	; 0x3c
		while (usart_init(&usart_USB,
    2f7a:	4d10      	ldr	r5, [pc, #64]	; (2fbc <configure_usart_USB+0xa8>)
    2f7c:	4c10      	ldr	r4, [pc, #64]	; (2fc0 <configure_usart_USB+0xac>)
    2f7e:	466a      	mov	r2, sp
    2f80:	4910      	ldr	r1, [pc, #64]	; (2fc4 <configure_usart_USB+0xb0>)
    2f82:	0028      	movs	r0, r5
    2f84:	47a0      	blx	r4
    2f86:	2800      	cmp	r0, #0
    2f88:	d1f9      	bne.n	2f7e <configure_usart_USB+0x6a>
	SercomUsart *const usart_hw = &(module->hw->USART);
    2f8a:	4d0c      	ldr	r5, [pc, #48]	; (2fbc <configure_usart_USB+0xa8>)
    2f8c:	682c      	ldr	r4, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    2f8e:	0020      	movs	r0, r4
    2f90:	4b0d      	ldr	r3, [pc, #52]	; (2fc8 <configure_usart_USB+0xb4>)
    2f92:	4798      	blx	r3
    2f94:	231f      	movs	r3, #31
    2f96:	4018      	ands	r0, r3
    2f98:	3b1e      	subs	r3, #30
    2f9a:	4083      	lsls	r3, r0
    2f9c:	4a0b      	ldr	r2, [pc, #44]	; (2fcc <configure_usart_USB+0xb8>)
    2f9e:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2fa0:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2fa2:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2fa4:	2b00      	cmp	r3, #0
    2fa6:	d1fc      	bne.n	2fa2 <configure_usart_USB+0x8e>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    2fa8:	6823      	ldr	r3, [r4, #0]
    2faa:	2202      	movs	r2, #2
    2fac:	4313      	orrs	r3, r2
    2fae:	6023      	str	r3, [r4, #0]
		EDBG_CDC_MODULE, &config_usart_USB) != STATUS_OK) {
		}

	usart_enable(&usart_USB);
}
    2fb0:	b011      	add	sp, #68	; 0x44
    2fb2:	bd30      	pop	{r4, r5, pc}
    2fb4:	00160002 	.word	0x00160002
    2fb8:	00170002 	.word	0x00170002
    2fbc:	200003d4 	.word	0x200003d4
    2fc0:	00000e6d 	.word	0x00000e6d
    2fc4:	42001400 	.word	0x42001400
    2fc8:	00000ddd 	.word	0x00000ddd
    2fcc:	e000e100 	.word	0xe000e100

00002fd0 <configure_adc>:

void configure_adc(void)
{
    2fd0:	b510      	push	{r4, lr}
    2fd2:	b08c      	sub	sp, #48	; 0x30
	struct adc_config config_adc;
	adc_get_config_defaults(&config_adc);
    2fd4:	4668      	mov	r0, sp
    2fd6:	4b11      	ldr	r3, [pc, #68]	; (301c <configure_adc+0x4c>)
    2fd8:	4798      	blx	r3
	config_adc.positive_input = ADC_POSITIVE_INPUT_DAC;
    2fda:	231c      	movs	r3, #28
    2fdc:	466a      	mov	r2, sp
    2fde:	7313      	strb	r3, [r2, #12]
	adc_init(&adc_instance, ADC, &config_adc);
    2fe0:	4c0f      	ldr	r4, [pc, #60]	; (3020 <configure_adc+0x50>)
    2fe2:	4910      	ldr	r1, [pc, #64]	; (3024 <configure_adc+0x54>)
    2fe4:	0020      	movs	r0, r4
    2fe6:	4b10      	ldr	r3, [pc, #64]	; (3028 <configure_adc+0x58>)
    2fe8:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    2fea:	6822      	ldr	r2, [r4, #0]
    2fec:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    2fee:	b25b      	sxtb	r3, r3
    2ff0:	2b00      	cmp	r3, #0
    2ff2:	dbfb      	blt.n	2fec <configure_adc+0x1c>
    2ff4:	2180      	movs	r1, #128	; 0x80
    2ff6:	0409      	lsls	r1, r1, #16
    2ff8:	4b0c      	ldr	r3, [pc, #48]	; (302c <configure_adc+0x5c>)
    2ffa:	6019      	str	r1, [r3, #0]
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    2ffc:	230f      	movs	r3, #15
    2ffe:	7593      	strb	r3, [r2, #22]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    3000:	7613      	strb	r3, [r2, #24]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    3002:	7813      	ldrb	r3, [r2, #0]
    3004:	2102      	movs	r1, #2
    3006:	430b      	orrs	r3, r1
    3008:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
    300a:	4b05      	ldr	r3, [pc, #20]	; (3020 <configure_adc+0x50>)
    300c:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    300e:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    3010:	b25b      	sxtb	r3, r3
    3012:	2b00      	cmp	r3, #0
    3014:	dbfb      	blt.n	300e <configure_adc+0x3e>
	adc_enable(&adc_instance);
}
    3016:	b00c      	add	sp, #48	; 0x30
    3018:	bd10      	pop	{r4, pc}
    301a:	46c0      	nop			; (mov r8, r8)
    301c:	000004d5 	.word	0x000004d5
    3020:	20000408 	.word	0x20000408
    3024:	42004000 	.word	0x42004000
    3028:	00000519 	.word	0x00000519
    302c:	e000e100 	.word	0xe000e100

00003030 <setupBoard>:


void setupBoard(void)
{
    3030:	b570      	push	{r4, r5, r6, lr}
	uint16_t adcResult;
	

	system_init();
    3032:	4b2a      	ldr	r3, [pc, #168]	; (30dc <setupBoard+0xac>)
    3034:	4798      	blx	r3
	
	configure_adc();
    3036:	4b2a      	ldr	r3, [pc, #168]	; (30e0 <setupBoard+0xb0>)
    3038:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    303a:	4b2a      	ldr	r3, [pc, #168]	; (30e4 <setupBoard+0xb4>)
    303c:	6819      	ldr	r1, [r3, #0]
    303e:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    3040:	b25b      	sxtb	r3, r3
    3042:	2b00      	cmp	r3, #0
    3044:	dbfb      	blt.n	303e <setupBoard+0xe>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    3046:	7b0b      	ldrb	r3, [r1, #12]
    3048:	2202      	movs	r2, #2
    304a:	4313      	orrs	r3, r2
    304c:	730b      	strb	r3, [r1, #12]
    304e:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    3050:	b25b      	sxtb	r3, r3
    3052:	2b00      	cmp	r3, #0
    3054:	dbfb      	blt.n	304e <setupBoard+0x1e>
	if (int_flags & ADC_INTFLAG_RESRDY) {
    3056:	2001      	movs	r0, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
    3058:	2504      	movs	r5, #4
		status_flags |= ADC_STATUS_WINDOW;
    305a:	2402      	movs	r4, #2
    305c:	e001      	b.n	3062 <setupBoard+0x32>
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    305e:	4210      	tst	r0, r2
    3060:	d10a      	bne.n	3078 <setupBoard+0x48>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    3062:	7e0b      	ldrb	r3, [r1, #24]
    3064:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
    3066:	0002      	movs	r2, r0
    3068:	401a      	ands	r2, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
    306a:	421d      	tst	r5, r3
    306c:	d000      	beq.n	3070 <setupBoard+0x40>
		status_flags |= ADC_STATUS_WINDOW;
    306e:	4322      	orrs	r2, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    3070:	421c      	tst	r4, r3
    3072:	d0f4      	beq.n	305e <setupBoard+0x2e>
		status_flags |= ADC_STATUS_OVERRUN;
    3074:	432a      	orrs	r2, r5
    3076:	e7f2      	b.n	305e <setupBoard+0x2e>
    3078:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    307a:	b25b      	sxtb	r3, r3
    307c:	2b00      	cmp	r3, #0
    307e:	dbfb      	blt.n	3078 <setupBoard+0x48>
	*result = adc_module->RESULT.reg;
    3080:	8b4c      	ldrh	r4, [r1, #26]
    3082:	b2a4      	uxth	r4, r4
	adc_module->INTFLAG.reg = int_flags;
    3084:	2301      	movs	r3, #1
    3086:	760b      	strb	r3, [r1, #24]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    3088:	7e0a      	ldrb	r2, [r1, #24]
    308a:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    308c:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    308e:	0750      	lsls	r0, r2, #29
    3090:	d501      	bpl.n	3096 <setupBoard+0x66>
		status_flags |= ADC_STATUS_WINDOW;
    3092:	2002      	movs	r0, #2
    3094:	4303      	orrs	r3, r0
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    3096:	0792      	lsls	r2, r2, #30
    3098:	d501      	bpl.n	309e <setupBoard+0x6e>
		status_flags |= ADC_STATUS_OVERRUN;
    309a:	2204      	movs	r2, #4
    309c:	4313      	orrs	r3, r2
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    309e:	075b      	lsls	r3, r3, #29
    30a0:	d501      	bpl.n	30a6 <setupBoard+0x76>
	adc_module->INTFLAG.reg = int_flags;
    30a2:	2302      	movs	r3, #2
    30a4:	760b      	strb	r3, [r1, #24]
	adc_start_conversion(&adc_instance);
	do {
		/* Wait for conversion to be done and read out result */
	} while (adc_read(&adc_instance, &adcResult) == STATUS_BUSY);
	
	system_init();
    30a6:	4b0d      	ldr	r3, [pc, #52]	; (30dc <setupBoard+0xac>)
    30a8:	4798      	blx	r3
	
	delay_init();
    30aa:	4b0f      	ldr	r3, [pc, #60]	; (30e8 <setupBoard+0xb8>)
    30ac:	4798      	blx	r3
	srand(adcResult);
    30ae:	0020      	movs	r0, r4
    30b0:	4b0e      	ldr	r3, [pc, #56]	; (30ec <setupBoard+0xbc>)
    30b2:	4798      	blx	r3
	configure_usart_USB();
    30b4:	4b0e      	ldr	r3, [pc, #56]	; (30f0 <setupBoard+0xc0>)
    30b6:	4798      	blx	r3
	configure_console();
    30b8:	4b0e      	ldr	r3, [pc, #56]	; (30f4 <setupBoard+0xc4>)
    30ba:	4798      	blx	r3
	
	InitLCD();
    30bc:	4b0e      	ldr	r3, [pc, #56]	; (30f8 <setupBoard+0xc8>)
    30be:	4798      	blx	r3
	splashScreen();
    30c0:	4b0e      	ldr	r3, [pc, #56]	; (30fc <setupBoard+0xcc>)
    30c2:	4798      	blx	r3
	
	

	
	printf("Serial OK 9600 8N1\n\r");
    30c4:	480e      	ldr	r0, [pc, #56]	; (3100 <setupBoard+0xd0>)
    30c6:	4b0f      	ldr	r3, [pc, #60]	; (3104 <setupBoard+0xd4>)
    30c8:	4798      	blx	r3
	
	conf_systick();
    30ca:	4b0f      	ldr	r3, [pc, #60]	; (3108 <setupBoard+0xd8>)
    30cc:	4798      	blx	r3
	clearCursorBuffer();
    30ce:	4b0f      	ldr	r3, [pc, #60]	; (310c <setupBoard+0xdc>)
    30d0:	4798      	blx	r3

	moveCursor(0,0);
    30d2:	2100      	movs	r1, #0
    30d4:	2000      	movs	r0, #0
    30d6:	4b0e      	ldr	r3, [pc, #56]	; (3110 <setupBoard+0xe0>)
    30d8:	4798      	blx	r3
}
    30da:	bd70      	pop	{r4, r5, r6, pc}
    30dc:	00001b3d 	.word	0x00001b3d
    30e0:	00002fd1 	.word	0x00002fd1
    30e4:	20000408 	.word	0x20000408
    30e8:	000003c1 	.word	0x000003c1
    30ec:	00003379 	.word	0x00003379
    30f0:	00002f15 	.word	0x00002f15
    30f4:	00001d65 	.word	0x00001d65
    30f8:	00002c51 	.word	0x00002c51
    30fc:	000001e5 	.word	0x000001e5
    3100:	00006564 	.word	0x00006564
    3104:	00003345 	.word	0x00003345
    3108:	00002ec1 	.word	0x00002ec1
    310c:	000023e9 	.word	0x000023e9
    3110:	0000249d 	.word	0x0000249d

00003114 <main>:
{
    3114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	setupBoard();
    3116:	4b0e      	ldr	r3, [pc, #56]	; (3150 <main+0x3c>)
    3118:	4798      	blx	r3
		if(ul_tickcount % 10000 == 0)
    311a:	4e0e      	ldr	r6, [pc, #56]	; (3154 <main+0x40>)
    311c:	4d0e      	ldr	r5, [pc, #56]	; (3158 <main+0x44>)
			blinkCursor();
    311e:	4f0f      	ldr	r7, [pc, #60]	; (315c <main+0x48>)
    3120:	e013      	b.n	314a <main+0x36>
		if(ul_tickcount % 20 == 0)
    3122:	4b0c      	ldr	r3, [pc, #48]	; (3154 <main+0x40>)
    3124:	8818      	ldrh	r0, [r3, #0]
    3126:	2114      	movs	r1, #20
    3128:	4b0b      	ldr	r3, [pc, #44]	; (3158 <main+0x44>)
    312a:	4798      	blx	r3
    312c:	b289      	uxth	r1, r1
    312e:	2900      	cmp	r1, #0
    3130:	d007      	beq.n	3142 <main+0x2e>
		if(ul_tickcount % 10000 == 0)
    3132:	8830      	ldrh	r0, [r6, #0]
    3134:	0021      	movs	r1, r4
    3136:	47a8      	blx	r5
    3138:	b289      	uxth	r1, r1
    313a:	2900      	cmp	r1, #0
    313c:	d1f1      	bne.n	3122 <main+0xe>
			blinkCursor();
    313e:	47b8      	blx	r7
    3140:	e7ef      	b.n	3122 <main+0xe>
			readKeyboard();
    3142:	4b07      	ldr	r3, [pc, #28]	; (3160 <main+0x4c>)
    3144:	4798      	blx	r3
			printKeyboardBuffer();
    3146:	4b07      	ldr	r3, [pc, #28]	; (3164 <main+0x50>)
    3148:	4798      	blx	r3
		if(ul_tickcount % 10000 == 0)
    314a:	4c07      	ldr	r4, [pc, #28]	; (3168 <main+0x54>)
    314c:	e7f1      	b.n	3132 <main+0x1e>
    314e:	46c0      	nop			; (mov r8, r8)
    3150:	00003031 	.word	0x00003031
    3154:	2000029a 	.word	0x2000029a
    3158:	00003279 	.word	0x00003279
    315c:	000027cd 	.word	0x000027cd
    3160:	000021e9 	.word	0x000021e9
    3164:	000025a5 	.word	0x000025a5
    3168:	00002710 	.word	0x00002710

0000316c <__udivsi3>:
    316c:	2200      	movs	r2, #0
    316e:	0843      	lsrs	r3, r0, #1
    3170:	428b      	cmp	r3, r1
    3172:	d374      	bcc.n	325e <__udivsi3+0xf2>
    3174:	0903      	lsrs	r3, r0, #4
    3176:	428b      	cmp	r3, r1
    3178:	d35f      	bcc.n	323a <__udivsi3+0xce>
    317a:	0a03      	lsrs	r3, r0, #8
    317c:	428b      	cmp	r3, r1
    317e:	d344      	bcc.n	320a <__udivsi3+0x9e>
    3180:	0b03      	lsrs	r3, r0, #12
    3182:	428b      	cmp	r3, r1
    3184:	d328      	bcc.n	31d8 <__udivsi3+0x6c>
    3186:	0c03      	lsrs	r3, r0, #16
    3188:	428b      	cmp	r3, r1
    318a:	d30d      	bcc.n	31a8 <__udivsi3+0x3c>
    318c:	22ff      	movs	r2, #255	; 0xff
    318e:	0209      	lsls	r1, r1, #8
    3190:	ba12      	rev	r2, r2
    3192:	0c03      	lsrs	r3, r0, #16
    3194:	428b      	cmp	r3, r1
    3196:	d302      	bcc.n	319e <__udivsi3+0x32>
    3198:	1212      	asrs	r2, r2, #8
    319a:	0209      	lsls	r1, r1, #8
    319c:	d065      	beq.n	326a <__udivsi3+0xfe>
    319e:	0b03      	lsrs	r3, r0, #12
    31a0:	428b      	cmp	r3, r1
    31a2:	d319      	bcc.n	31d8 <__udivsi3+0x6c>
    31a4:	e000      	b.n	31a8 <__udivsi3+0x3c>
    31a6:	0a09      	lsrs	r1, r1, #8
    31a8:	0bc3      	lsrs	r3, r0, #15
    31aa:	428b      	cmp	r3, r1
    31ac:	d301      	bcc.n	31b2 <__udivsi3+0x46>
    31ae:	03cb      	lsls	r3, r1, #15
    31b0:	1ac0      	subs	r0, r0, r3
    31b2:	4152      	adcs	r2, r2
    31b4:	0b83      	lsrs	r3, r0, #14
    31b6:	428b      	cmp	r3, r1
    31b8:	d301      	bcc.n	31be <__udivsi3+0x52>
    31ba:	038b      	lsls	r3, r1, #14
    31bc:	1ac0      	subs	r0, r0, r3
    31be:	4152      	adcs	r2, r2
    31c0:	0b43      	lsrs	r3, r0, #13
    31c2:	428b      	cmp	r3, r1
    31c4:	d301      	bcc.n	31ca <__udivsi3+0x5e>
    31c6:	034b      	lsls	r3, r1, #13
    31c8:	1ac0      	subs	r0, r0, r3
    31ca:	4152      	adcs	r2, r2
    31cc:	0b03      	lsrs	r3, r0, #12
    31ce:	428b      	cmp	r3, r1
    31d0:	d301      	bcc.n	31d6 <__udivsi3+0x6a>
    31d2:	030b      	lsls	r3, r1, #12
    31d4:	1ac0      	subs	r0, r0, r3
    31d6:	4152      	adcs	r2, r2
    31d8:	0ac3      	lsrs	r3, r0, #11
    31da:	428b      	cmp	r3, r1
    31dc:	d301      	bcc.n	31e2 <__udivsi3+0x76>
    31de:	02cb      	lsls	r3, r1, #11
    31e0:	1ac0      	subs	r0, r0, r3
    31e2:	4152      	adcs	r2, r2
    31e4:	0a83      	lsrs	r3, r0, #10
    31e6:	428b      	cmp	r3, r1
    31e8:	d301      	bcc.n	31ee <__udivsi3+0x82>
    31ea:	028b      	lsls	r3, r1, #10
    31ec:	1ac0      	subs	r0, r0, r3
    31ee:	4152      	adcs	r2, r2
    31f0:	0a43      	lsrs	r3, r0, #9
    31f2:	428b      	cmp	r3, r1
    31f4:	d301      	bcc.n	31fa <__udivsi3+0x8e>
    31f6:	024b      	lsls	r3, r1, #9
    31f8:	1ac0      	subs	r0, r0, r3
    31fa:	4152      	adcs	r2, r2
    31fc:	0a03      	lsrs	r3, r0, #8
    31fe:	428b      	cmp	r3, r1
    3200:	d301      	bcc.n	3206 <__udivsi3+0x9a>
    3202:	020b      	lsls	r3, r1, #8
    3204:	1ac0      	subs	r0, r0, r3
    3206:	4152      	adcs	r2, r2
    3208:	d2cd      	bcs.n	31a6 <__udivsi3+0x3a>
    320a:	09c3      	lsrs	r3, r0, #7
    320c:	428b      	cmp	r3, r1
    320e:	d301      	bcc.n	3214 <__udivsi3+0xa8>
    3210:	01cb      	lsls	r3, r1, #7
    3212:	1ac0      	subs	r0, r0, r3
    3214:	4152      	adcs	r2, r2
    3216:	0983      	lsrs	r3, r0, #6
    3218:	428b      	cmp	r3, r1
    321a:	d301      	bcc.n	3220 <__udivsi3+0xb4>
    321c:	018b      	lsls	r3, r1, #6
    321e:	1ac0      	subs	r0, r0, r3
    3220:	4152      	adcs	r2, r2
    3222:	0943      	lsrs	r3, r0, #5
    3224:	428b      	cmp	r3, r1
    3226:	d301      	bcc.n	322c <__udivsi3+0xc0>
    3228:	014b      	lsls	r3, r1, #5
    322a:	1ac0      	subs	r0, r0, r3
    322c:	4152      	adcs	r2, r2
    322e:	0903      	lsrs	r3, r0, #4
    3230:	428b      	cmp	r3, r1
    3232:	d301      	bcc.n	3238 <__udivsi3+0xcc>
    3234:	010b      	lsls	r3, r1, #4
    3236:	1ac0      	subs	r0, r0, r3
    3238:	4152      	adcs	r2, r2
    323a:	08c3      	lsrs	r3, r0, #3
    323c:	428b      	cmp	r3, r1
    323e:	d301      	bcc.n	3244 <__udivsi3+0xd8>
    3240:	00cb      	lsls	r3, r1, #3
    3242:	1ac0      	subs	r0, r0, r3
    3244:	4152      	adcs	r2, r2
    3246:	0883      	lsrs	r3, r0, #2
    3248:	428b      	cmp	r3, r1
    324a:	d301      	bcc.n	3250 <__udivsi3+0xe4>
    324c:	008b      	lsls	r3, r1, #2
    324e:	1ac0      	subs	r0, r0, r3
    3250:	4152      	adcs	r2, r2
    3252:	0843      	lsrs	r3, r0, #1
    3254:	428b      	cmp	r3, r1
    3256:	d301      	bcc.n	325c <__udivsi3+0xf0>
    3258:	004b      	lsls	r3, r1, #1
    325a:	1ac0      	subs	r0, r0, r3
    325c:	4152      	adcs	r2, r2
    325e:	1a41      	subs	r1, r0, r1
    3260:	d200      	bcs.n	3264 <__udivsi3+0xf8>
    3262:	4601      	mov	r1, r0
    3264:	4152      	adcs	r2, r2
    3266:	4610      	mov	r0, r2
    3268:	4770      	bx	lr
    326a:	e7ff      	b.n	326c <__udivsi3+0x100>
    326c:	b501      	push	{r0, lr}
    326e:	2000      	movs	r0, #0
    3270:	f000 f806 	bl	3280 <__aeabi_idiv0>
    3274:	bd02      	pop	{r1, pc}
    3276:	46c0      	nop			; (mov r8, r8)

00003278 <__aeabi_uidivmod>:
    3278:	2900      	cmp	r1, #0
    327a:	d0f7      	beq.n	326c <__udivsi3+0x100>
    327c:	e776      	b.n	316c <__udivsi3>
    327e:	4770      	bx	lr

00003280 <__aeabi_idiv0>:
    3280:	4770      	bx	lr
    3282:	46c0      	nop			; (mov r8, r8)

00003284 <__aeabi_lmul>:
    3284:	b5f0      	push	{r4, r5, r6, r7, lr}
    3286:	46ce      	mov	lr, r9
    3288:	4647      	mov	r7, r8
    328a:	0415      	lsls	r5, r2, #16
    328c:	0c2d      	lsrs	r5, r5, #16
    328e:	002e      	movs	r6, r5
    3290:	b580      	push	{r7, lr}
    3292:	0407      	lsls	r7, r0, #16
    3294:	0c14      	lsrs	r4, r2, #16
    3296:	0c3f      	lsrs	r7, r7, #16
    3298:	4699      	mov	r9, r3
    329a:	0c03      	lsrs	r3, r0, #16
    329c:	437e      	muls	r6, r7
    329e:	435d      	muls	r5, r3
    32a0:	4367      	muls	r7, r4
    32a2:	4363      	muls	r3, r4
    32a4:	197f      	adds	r7, r7, r5
    32a6:	0c34      	lsrs	r4, r6, #16
    32a8:	19e4      	adds	r4, r4, r7
    32aa:	469c      	mov	ip, r3
    32ac:	42a5      	cmp	r5, r4
    32ae:	d903      	bls.n	32b8 <__aeabi_lmul+0x34>
    32b0:	2380      	movs	r3, #128	; 0x80
    32b2:	025b      	lsls	r3, r3, #9
    32b4:	4698      	mov	r8, r3
    32b6:	44c4      	add	ip, r8
    32b8:	464b      	mov	r3, r9
    32ba:	4351      	muls	r1, r2
    32bc:	4343      	muls	r3, r0
    32be:	0436      	lsls	r6, r6, #16
    32c0:	0c36      	lsrs	r6, r6, #16
    32c2:	0c25      	lsrs	r5, r4, #16
    32c4:	0424      	lsls	r4, r4, #16
    32c6:	4465      	add	r5, ip
    32c8:	19a4      	adds	r4, r4, r6
    32ca:	1859      	adds	r1, r3, r1
    32cc:	1949      	adds	r1, r1, r5
    32ce:	0020      	movs	r0, r4
    32d0:	bc0c      	pop	{r2, r3}
    32d2:	4690      	mov	r8, r2
    32d4:	4699      	mov	r9, r3
    32d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000032d8 <__libc_init_array>:
    32d8:	b570      	push	{r4, r5, r6, lr}
    32da:	2600      	movs	r6, #0
    32dc:	4d0c      	ldr	r5, [pc, #48]	; (3310 <__libc_init_array+0x38>)
    32de:	4c0d      	ldr	r4, [pc, #52]	; (3314 <__libc_init_array+0x3c>)
    32e0:	1b64      	subs	r4, r4, r5
    32e2:	10a4      	asrs	r4, r4, #2
    32e4:	42a6      	cmp	r6, r4
    32e6:	d109      	bne.n	32fc <__libc_init_array+0x24>
    32e8:	2600      	movs	r6, #0
    32ea:	f003 f993 	bl	6614 <_init>
    32ee:	4d0a      	ldr	r5, [pc, #40]	; (3318 <__libc_init_array+0x40>)
    32f0:	4c0a      	ldr	r4, [pc, #40]	; (331c <__libc_init_array+0x44>)
    32f2:	1b64      	subs	r4, r4, r5
    32f4:	10a4      	asrs	r4, r4, #2
    32f6:	42a6      	cmp	r6, r4
    32f8:	d105      	bne.n	3306 <__libc_init_array+0x2e>
    32fa:	bd70      	pop	{r4, r5, r6, pc}
    32fc:	00b3      	lsls	r3, r6, #2
    32fe:	58eb      	ldr	r3, [r5, r3]
    3300:	4798      	blx	r3
    3302:	3601      	adds	r6, #1
    3304:	e7ee      	b.n	32e4 <__libc_init_array+0xc>
    3306:	00b3      	lsls	r3, r6, #2
    3308:	58eb      	ldr	r3, [r5, r3]
    330a:	4798      	blx	r3
    330c:	3601      	adds	r6, #1
    330e:	e7f2      	b.n	32f6 <__libc_init_array+0x1e>
    3310:	00006620 	.word	0x00006620
    3314:	00006620 	.word	0x00006620
    3318:	00006620 	.word	0x00006620
    331c:	00006624 	.word	0x00006624

00003320 <memcpy>:
    3320:	2300      	movs	r3, #0
    3322:	b510      	push	{r4, lr}
    3324:	429a      	cmp	r2, r3
    3326:	d100      	bne.n	332a <memcpy+0xa>
    3328:	bd10      	pop	{r4, pc}
    332a:	5ccc      	ldrb	r4, [r1, r3]
    332c:	54c4      	strb	r4, [r0, r3]
    332e:	3301      	adds	r3, #1
    3330:	e7f8      	b.n	3324 <memcpy+0x4>

00003332 <memset>:
    3332:	0003      	movs	r3, r0
    3334:	1882      	adds	r2, r0, r2
    3336:	4293      	cmp	r3, r2
    3338:	d100      	bne.n	333c <memset+0xa>
    333a:	4770      	bx	lr
    333c:	7019      	strb	r1, [r3, #0]
    333e:	3301      	adds	r3, #1
    3340:	e7f9      	b.n	3336 <memset+0x4>
	...

00003344 <iprintf>:
    3344:	b40f      	push	{r0, r1, r2, r3}
    3346:	4b0b      	ldr	r3, [pc, #44]	; (3374 <iprintf+0x30>)
    3348:	b513      	push	{r0, r1, r4, lr}
    334a:	681c      	ldr	r4, [r3, #0]
    334c:	2c00      	cmp	r4, #0
    334e:	d005      	beq.n	335c <iprintf+0x18>
    3350:	69a3      	ldr	r3, [r4, #24]
    3352:	2b00      	cmp	r3, #0
    3354:	d102      	bne.n	335c <iprintf+0x18>
    3356:	0020      	movs	r0, r4
    3358:	f000 fa2e 	bl	37b8 <__sinit>
    335c:	ab05      	add	r3, sp, #20
    335e:	9a04      	ldr	r2, [sp, #16]
    3360:	68a1      	ldr	r1, [r4, #8]
    3362:	0020      	movs	r0, r4
    3364:	9301      	str	r3, [sp, #4]
    3366:	f000 fc03 	bl	3b70 <_vfiprintf_r>
    336a:	bc16      	pop	{r1, r2, r4}
    336c:	bc08      	pop	{r3}
    336e:	b004      	add	sp, #16
    3370:	4718      	bx	r3
    3372:	46c0      	nop			; (mov r8, r8)
    3374:	20000158 	.word	0x20000158

00003378 <srand>:
    3378:	4b10      	ldr	r3, [pc, #64]	; (33bc <srand+0x44>)
    337a:	b570      	push	{r4, r5, r6, lr}
    337c:	681c      	ldr	r4, [r3, #0]
    337e:	0005      	movs	r5, r0
    3380:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    3382:	2b00      	cmp	r3, #0
    3384:	d115      	bne.n	33b2 <srand+0x3a>
    3386:	2018      	movs	r0, #24
    3388:	f000 fb18 	bl	39bc <malloc>
    338c:	4b0c      	ldr	r3, [pc, #48]	; (33c0 <srand+0x48>)
    338e:	63a0      	str	r0, [r4, #56]	; 0x38
    3390:	8003      	strh	r3, [r0, #0]
    3392:	4b0c      	ldr	r3, [pc, #48]	; (33c4 <srand+0x4c>)
    3394:	2201      	movs	r2, #1
    3396:	8043      	strh	r3, [r0, #2]
    3398:	4b0b      	ldr	r3, [pc, #44]	; (33c8 <srand+0x50>)
    339a:	8083      	strh	r3, [r0, #4]
    339c:	4b0b      	ldr	r3, [pc, #44]	; (33cc <srand+0x54>)
    339e:	80c3      	strh	r3, [r0, #6]
    33a0:	4b0b      	ldr	r3, [pc, #44]	; (33d0 <srand+0x58>)
    33a2:	8103      	strh	r3, [r0, #8]
    33a4:	2305      	movs	r3, #5
    33a6:	8143      	strh	r3, [r0, #10]
    33a8:	3306      	adds	r3, #6
    33aa:	8183      	strh	r3, [r0, #12]
    33ac:	2300      	movs	r3, #0
    33ae:	6102      	str	r2, [r0, #16]
    33b0:	6143      	str	r3, [r0, #20]
    33b2:	2200      	movs	r2, #0
    33b4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    33b6:	611d      	str	r5, [r3, #16]
    33b8:	615a      	str	r2, [r3, #20]
    33ba:	bd70      	pop	{r4, r5, r6, pc}
    33bc:	20000158 	.word	0x20000158
    33c0:	0000330e 	.word	0x0000330e
    33c4:	ffffabcd 	.word	0xffffabcd
    33c8:	00001234 	.word	0x00001234
    33cc:	ffffe66d 	.word	0xffffe66d
    33d0:	ffffdeec 	.word	0xffffdeec

000033d4 <rand>:
    33d4:	4b15      	ldr	r3, [pc, #84]	; (342c <rand+0x58>)
    33d6:	b510      	push	{r4, lr}
    33d8:	681c      	ldr	r4, [r3, #0]
    33da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    33dc:	2b00      	cmp	r3, #0
    33de:	d115      	bne.n	340c <rand+0x38>
    33e0:	2018      	movs	r0, #24
    33e2:	f000 faeb 	bl	39bc <malloc>
    33e6:	4b12      	ldr	r3, [pc, #72]	; (3430 <rand+0x5c>)
    33e8:	63a0      	str	r0, [r4, #56]	; 0x38
    33ea:	8003      	strh	r3, [r0, #0]
    33ec:	4b11      	ldr	r3, [pc, #68]	; (3434 <rand+0x60>)
    33ee:	2201      	movs	r2, #1
    33f0:	8043      	strh	r3, [r0, #2]
    33f2:	4b11      	ldr	r3, [pc, #68]	; (3438 <rand+0x64>)
    33f4:	8083      	strh	r3, [r0, #4]
    33f6:	4b11      	ldr	r3, [pc, #68]	; (343c <rand+0x68>)
    33f8:	80c3      	strh	r3, [r0, #6]
    33fa:	4b11      	ldr	r3, [pc, #68]	; (3440 <rand+0x6c>)
    33fc:	8103      	strh	r3, [r0, #8]
    33fe:	2305      	movs	r3, #5
    3400:	8143      	strh	r3, [r0, #10]
    3402:	3306      	adds	r3, #6
    3404:	8183      	strh	r3, [r0, #12]
    3406:	2300      	movs	r3, #0
    3408:	6102      	str	r2, [r0, #16]
    340a:	6143      	str	r3, [r0, #20]
    340c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
    340e:	4a0d      	ldr	r2, [pc, #52]	; (3444 <rand+0x70>)
    3410:	6920      	ldr	r0, [r4, #16]
    3412:	6961      	ldr	r1, [r4, #20]
    3414:	4b0c      	ldr	r3, [pc, #48]	; (3448 <rand+0x74>)
    3416:	f7ff ff35 	bl	3284 <__aeabi_lmul>
    341a:	2201      	movs	r2, #1
    341c:	2300      	movs	r3, #0
    341e:	1880      	adds	r0, r0, r2
    3420:	4159      	adcs	r1, r3
    3422:	6120      	str	r0, [r4, #16]
    3424:	6161      	str	r1, [r4, #20]
    3426:	0048      	lsls	r0, r1, #1
    3428:	0840      	lsrs	r0, r0, #1
    342a:	bd10      	pop	{r4, pc}
    342c:	20000158 	.word	0x20000158
    3430:	0000330e 	.word	0x0000330e
    3434:	ffffabcd 	.word	0xffffabcd
    3438:	00001234 	.word	0x00001234
    343c:	ffffe66d 	.word	0xffffe66d
    3440:	ffffdeec 	.word	0xffffdeec
    3444:	4c957f2d 	.word	0x4c957f2d
    3448:	5851f42d 	.word	0x5851f42d

0000344c <setbuf>:
    344c:	424a      	negs	r2, r1
    344e:	414a      	adcs	r2, r1
    3450:	2380      	movs	r3, #128	; 0x80
    3452:	b510      	push	{r4, lr}
    3454:	0052      	lsls	r2, r2, #1
    3456:	00db      	lsls	r3, r3, #3
    3458:	f000 f802 	bl	3460 <setvbuf>
    345c:	bd10      	pop	{r4, pc}
	...

00003460 <setvbuf>:
    3460:	b5f0      	push	{r4, r5, r6, r7, lr}
    3462:	001d      	movs	r5, r3
    3464:	4b4f      	ldr	r3, [pc, #316]	; (35a4 <setvbuf+0x144>)
    3466:	b085      	sub	sp, #20
    3468:	681e      	ldr	r6, [r3, #0]
    346a:	0004      	movs	r4, r0
    346c:	000f      	movs	r7, r1
    346e:	9200      	str	r2, [sp, #0]
    3470:	2e00      	cmp	r6, #0
    3472:	d005      	beq.n	3480 <setvbuf+0x20>
    3474:	69b3      	ldr	r3, [r6, #24]
    3476:	2b00      	cmp	r3, #0
    3478:	d102      	bne.n	3480 <setvbuf+0x20>
    347a:	0030      	movs	r0, r6
    347c:	f000 f99c 	bl	37b8 <__sinit>
    3480:	4b49      	ldr	r3, [pc, #292]	; (35a8 <setvbuf+0x148>)
    3482:	429c      	cmp	r4, r3
    3484:	d150      	bne.n	3528 <setvbuf+0xc8>
    3486:	6874      	ldr	r4, [r6, #4]
    3488:	9b00      	ldr	r3, [sp, #0]
    348a:	2b02      	cmp	r3, #2
    348c:	d005      	beq.n	349a <setvbuf+0x3a>
    348e:	2b01      	cmp	r3, #1
    3490:	d900      	bls.n	3494 <setvbuf+0x34>
    3492:	e084      	b.n	359e <setvbuf+0x13e>
    3494:	2d00      	cmp	r5, #0
    3496:	da00      	bge.n	349a <setvbuf+0x3a>
    3498:	e081      	b.n	359e <setvbuf+0x13e>
    349a:	0021      	movs	r1, r4
    349c:	0030      	movs	r0, r6
    349e:	f000 f91d 	bl	36dc <_fflush_r>
    34a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
    34a4:	2900      	cmp	r1, #0
    34a6:	d008      	beq.n	34ba <setvbuf+0x5a>
    34a8:	0023      	movs	r3, r4
    34aa:	3344      	adds	r3, #68	; 0x44
    34ac:	4299      	cmp	r1, r3
    34ae:	d002      	beq.n	34b6 <setvbuf+0x56>
    34b0:	0030      	movs	r0, r6
    34b2:	f000 fa8d 	bl	39d0 <_free_r>
    34b6:	2300      	movs	r3, #0
    34b8:	6363      	str	r3, [r4, #52]	; 0x34
    34ba:	2300      	movs	r3, #0
    34bc:	61a3      	str	r3, [r4, #24]
    34be:	6063      	str	r3, [r4, #4]
    34c0:	89a3      	ldrh	r3, [r4, #12]
    34c2:	061b      	lsls	r3, r3, #24
    34c4:	d503      	bpl.n	34ce <setvbuf+0x6e>
    34c6:	6921      	ldr	r1, [r4, #16]
    34c8:	0030      	movs	r0, r6
    34ca:	f000 fa81 	bl	39d0 <_free_r>
    34ce:	89a3      	ldrh	r3, [r4, #12]
    34d0:	4a36      	ldr	r2, [pc, #216]	; (35ac <setvbuf+0x14c>)
    34d2:	4013      	ands	r3, r2
    34d4:	81a3      	strh	r3, [r4, #12]
    34d6:	9b00      	ldr	r3, [sp, #0]
    34d8:	2b02      	cmp	r3, #2
    34da:	d05a      	beq.n	3592 <setvbuf+0x132>
    34dc:	ab03      	add	r3, sp, #12
    34de:	aa02      	add	r2, sp, #8
    34e0:	0021      	movs	r1, r4
    34e2:	0030      	movs	r0, r6
    34e4:	f000 f9fe 	bl	38e4 <__swhatbuf_r>
    34e8:	89a3      	ldrh	r3, [r4, #12]
    34ea:	4318      	orrs	r0, r3
    34ec:	81a0      	strh	r0, [r4, #12]
    34ee:	2d00      	cmp	r5, #0
    34f0:	d124      	bne.n	353c <setvbuf+0xdc>
    34f2:	9d02      	ldr	r5, [sp, #8]
    34f4:	0028      	movs	r0, r5
    34f6:	f000 fa61 	bl	39bc <malloc>
    34fa:	9501      	str	r5, [sp, #4]
    34fc:	1e07      	subs	r7, r0, #0
    34fe:	d142      	bne.n	3586 <setvbuf+0x126>
    3500:	9b02      	ldr	r3, [sp, #8]
    3502:	9301      	str	r3, [sp, #4]
    3504:	42ab      	cmp	r3, r5
    3506:	d139      	bne.n	357c <setvbuf+0x11c>
    3508:	2001      	movs	r0, #1
    350a:	4240      	negs	r0, r0
    350c:	2302      	movs	r3, #2
    350e:	89a2      	ldrh	r2, [r4, #12]
    3510:	4313      	orrs	r3, r2
    3512:	81a3      	strh	r3, [r4, #12]
    3514:	2300      	movs	r3, #0
    3516:	60a3      	str	r3, [r4, #8]
    3518:	0023      	movs	r3, r4
    351a:	3347      	adds	r3, #71	; 0x47
    351c:	6023      	str	r3, [r4, #0]
    351e:	6123      	str	r3, [r4, #16]
    3520:	2301      	movs	r3, #1
    3522:	6163      	str	r3, [r4, #20]
    3524:	b005      	add	sp, #20
    3526:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3528:	4b21      	ldr	r3, [pc, #132]	; (35b0 <setvbuf+0x150>)
    352a:	429c      	cmp	r4, r3
    352c:	d101      	bne.n	3532 <setvbuf+0xd2>
    352e:	68b4      	ldr	r4, [r6, #8]
    3530:	e7aa      	b.n	3488 <setvbuf+0x28>
    3532:	4b20      	ldr	r3, [pc, #128]	; (35b4 <setvbuf+0x154>)
    3534:	429c      	cmp	r4, r3
    3536:	d1a7      	bne.n	3488 <setvbuf+0x28>
    3538:	68f4      	ldr	r4, [r6, #12]
    353a:	e7a5      	b.n	3488 <setvbuf+0x28>
    353c:	2f00      	cmp	r7, #0
    353e:	d0d9      	beq.n	34f4 <setvbuf+0x94>
    3540:	69b3      	ldr	r3, [r6, #24]
    3542:	2b00      	cmp	r3, #0
    3544:	d102      	bne.n	354c <setvbuf+0xec>
    3546:	0030      	movs	r0, r6
    3548:	f000 f936 	bl	37b8 <__sinit>
    354c:	9b00      	ldr	r3, [sp, #0]
    354e:	2b01      	cmp	r3, #1
    3550:	d103      	bne.n	355a <setvbuf+0xfa>
    3552:	89a3      	ldrh	r3, [r4, #12]
    3554:	9a00      	ldr	r2, [sp, #0]
    3556:	431a      	orrs	r2, r3
    3558:	81a2      	strh	r2, [r4, #12]
    355a:	2008      	movs	r0, #8
    355c:	89a3      	ldrh	r3, [r4, #12]
    355e:	6027      	str	r7, [r4, #0]
    3560:	6127      	str	r7, [r4, #16]
    3562:	6165      	str	r5, [r4, #20]
    3564:	4018      	ands	r0, r3
    3566:	d018      	beq.n	359a <setvbuf+0x13a>
    3568:	2001      	movs	r0, #1
    356a:	4018      	ands	r0, r3
    356c:	2300      	movs	r3, #0
    356e:	4298      	cmp	r0, r3
    3570:	d011      	beq.n	3596 <setvbuf+0x136>
    3572:	426d      	negs	r5, r5
    3574:	60a3      	str	r3, [r4, #8]
    3576:	61a5      	str	r5, [r4, #24]
    3578:	0018      	movs	r0, r3
    357a:	e7d3      	b.n	3524 <setvbuf+0xc4>
    357c:	9801      	ldr	r0, [sp, #4]
    357e:	f000 fa1d 	bl	39bc <malloc>
    3582:	1e07      	subs	r7, r0, #0
    3584:	d0c0      	beq.n	3508 <setvbuf+0xa8>
    3586:	2380      	movs	r3, #128	; 0x80
    3588:	89a2      	ldrh	r2, [r4, #12]
    358a:	9d01      	ldr	r5, [sp, #4]
    358c:	4313      	orrs	r3, r2
    358e:	81a3      	strh	r3, [r4, #12]
    3590:	e7d6      	b.n	3540 <setvbuf+0xe0>
    3592:	2000      	movs	r0, #0
    3594:	e7ba      	b.n	350c <setvbuf+0xac>
    3596:	60a5      	str	r5, [r4, #8]
    3598:	e7c4      	b.n	3524 <setvbuf+0xc4>
    359a:	60a0      	str	r0, [r4, #8]
    359c:	e7c2      	b.n	3524 <setvbuf+0xc4>
    359e:	2001      	movs	r0, #1
    35a0:	4240      	negs	r0, r0
    35a2:	e7bf      	b.n	3524 <setvbuf+0xc4>
    35a4:	20000158 	.word	0x20000158
    35a8:	000065a0 	.word	0x000065a0
    35ac:	fffff35c 	.word	0xfffff35c
    35b0:	000065c0 	.word	0x000065c0
    35b4:	00006580 	.word	0x00006580

000035b8 <strlen>:
    35b8:	2300      	movs	r3, #0
    35ba:	5cc2      	ldrb	r2, [r0, r3]
    35bc:	3301      	adds	r3, #1
    35be:	2a00      	cmp	r2, #0
    35c0:	d1fb      	bne.n	35ba <strlen+0x2>
    35c2:	1e58      	subs	r0, r3, #1
    35c4:	4770      	bx	lr
	...

000035c8 <__sflush_r>:
    35c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    35ca:	898a      	ldrh	r2, [r1, #12]
    35cc:	0005      	movs	r5, r0
    35ce:	000c      	movs	r4, r1
    35d0:	0713      	lsls	r3, r2, #28
    35d2:	d460      	bmi.n	3696 <__sflush_r+0xce>
    35d4:	684b      	ldr	r3, [r1, #4]
    35d6:	2b00      	cmp	r3, #0
    35d8:	dc04      	bgt.n	35e4 <__sflush_r+0x1c>
    35da:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    35dc:	2b00      	cmp	r3, #0
    35de:	dc01      	bgt.n	35e4 <__sflush_r+0x1c>
    35e0:	2000      	movs	r0, #0
    35e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    35e4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    35e6:	2f00      	cmp	r7, #0
    35e8:	d0fa      	beq.n	35e0 <__sflush_r+0x18>
    35ea:	2300      	movs	r3, #0
    35ec:	682e      	ldr	r6, [r5, #0]
    35ee:	602b      	str	r3, [r5, #0]
    35f0:	2380      	movs	r3, #128	; 0x80
    35f2:	015b      	lsls	r3, r3, #5
    35f4:	401a      	ands	r2, r3
    35f6:	d034      	beq.n	3662 <__sflush_r+0x9a>
    35f8:	6d60      	ldr	r0, [r4, #84]	; 0x54
    35fa:	89a3      	ldrh	r3, [r4, #12]
    35fc:	075b      	lsls	r3, r3, #29
    35fe:	d506      	bpl.n	360e <__sflush_r+0x46>
    3600:	6863      	ldr	r3, [r4, #4]
    3602:	1ac0      	subs	r0, r0, r3
    3604:	6b63      	ldr	r3, [r4, #52]	; 0x34
    3606:	2b00      	cmp	r3, #0
    3608:	d001      	beq.n	360e <__sflush_r+0x46>
    360a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    360c:	1ac0      	subs	r0, r0, r3
    360e:	0002      	movs	r2, r0
    3610:	6a21      	ldr	r1, [r4, #32]
    3612:	2300      	movs	r3, #0
    3614:	0028      	movs	r0, r5
    3616:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    3618:	47b8      	blx	r7
    361a:	89a1      	ldrh	r1, [r4, #12]
    361c:	1c43      	adds	r3, r0, #1
    361e:	d106      	bne.n	362e <__sflush_r+0x66>
    3620:	682b      	ldr	r3, [r5, #0]
    3622:	2b1d      	cmp	r3, #29
    3624:	d831      	bhi.n	368a <__sflush_r+0xc2>
    3626:	4a2c      	ldr	r2, [pc, #176]	; (36d8 <__sflush_r+0x110>)
    3628:	40da      	lsrs	r2, r3
    362a:	07d3      	lsls	r3, r2, #31
    362c:	d52d      	bpl.n	368a <__sflush_r+0xc2>
    362e:	2300      	movs	r3, #0
    3630:	6063      	str	r3, [r4, #4]
    3632:	6923      	ldr	r3, [r4, #16]
    3634:	6023      	str	r3, [r4, #0]
    3636:	04cb      	lsls	r3, r1, #19
    3638:	d505      	bpl.n	3646 <__sflush_r+0x7e>
    363a:	1c43      	adds	r3, r0, #1
    363c:	d102      	bne.n	3644 <__sflush_r+0x7c>
    363e:	682b      	ldr	r3, [r5, #0]
    3640:	2b00      	cmp	r3, #0
    3642:	d100      	bne.n	3646 <__sflush_r+0x7e>
    3644:	6560      	str	r0, [r4, #84]	; 0x54
    3646:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3648:	602e      	str	r6, [r5, #0]
    364a:	2900      	cmp	r1, #0
    364c:	d0c8      	beq.n	35e0 <__sflush_r+0x18>
    364e:	0023      	movs	r3, r4
    3650:	3344      	adds	r3, #68	; 0x44
    3652:	4299      	cmp	r1, r3
    3654:	d002      	beq.n	365c <__sflush_r+0x94>
    3656:	0028      	movs	r0, r5
    3658:	f000 f9ba 	bl	39d0 <_free_r>
    365c:	2000      	movs	r0, #0
    365e:	6360      	str	r0, [r4, #52]	; 0x34
    3660:	e7bf      	b.n	35e2 <__sflush_r+0x1a>
    3662:	2301      	movs	r3, #1
    3664:	6a21      	ldr	r1, [r4, #32]
    3666:	0028      	movs	r0, r5
    3668:	47b8      	blx	r7
    366a:	1c43      	adds	r3, r0, #1
    366c:	d1c5      	bne.n	35fa <__sflush_r+0x32>
    366e:	682b      	ldr	r3, [r5, #0]
    3670:	2b00      	cmp	r3, #0
    3672:	d0c2      	beq.n	35fa <__sflush_r+0x32>
    3674:	2b1d      	cmp	r3, #29
    3676:	d001      	beq.n	367c <__sflush_r+0xb4>
    3678:	2b16      	cmp	r3, #22
    367a:	d101      	bne.n	3680 <__sflush_r+0xb8>
    367c:	602e      	str	r6, [r5, #0]
    367e:	e7af      	b.n	35e0 <__sflush_r+0x18>
    3680:	2340      	movs	r3, #64	; 0x40
    3682:	89a2      	ldrh	r2, [r4, #12]
    3684:	4313      	orrs	r3, r2
    3686:	81a3      	strh	r3, [r4, #12]
    3688:	e7ab      	b.n	35e2 <__sflush_r+0x1a>
    368a:	2340      	movs	r3, #64	; 0x40
    368c:	430b      	orrs	r3, r1
    368e:	2001      	movs	r0, #1
    3690:	81a3      	strh	r3, [r4, #12]
    3692:	4240      	negs	r0, r0
    3694:	e7a5      	b.n	35e2 <__sflush_r+0x1a>
    3696:	690f      	ldr	r7, [r1, #16]
    3698:	2f00      	cmp	r7, #0
    369a:	d0a1      	beq.n	35e0 <__sflush_r+0x18>
    369c:	680b      	ldr	r3, [r1, #0]
    369e:	600f      	str	r7, [r1, #0]
    36a0:	1bdb      	subs	r3, r3, r7
    36a2:	9301      	str	r3, [sp, #4]
    36a4:	2300      	movs	r3, #0
    36a6:	0792      	lsls	r2, r2, #30
    36a8:	d100      	bne.n	36ac <__sflush_r+0xe4>
    36aa:	694b      	ldr	r3, [r1, #20]
    36ac:	60a3      	str	r3, [r4, #8]
    36ae:	9b01      	ldr	r3, [sp, #4]
    36b0:	2b00      	cmp	r3, #0
    36b2:	dc00      	bgt.n	36b6 <__sflush_r+0xee>
    36b4:	e794      	b.n	35e0 <__sflush_r+0x18>
    36b6:	9b01      	ldr	r3, [sp, #4]
    36b8:	003a      	movs	r2, r7
    36ba:	6a21      	ldr	r1, [r4, #32]
    36bc:	0028      	movs	r0, r5
    36be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    36c0:	47b0      	blx	r6
    36c2:	2800      	cmp	r0, #0
    36c4:	dc03      	bgt.n	36ce <__sflush_r+0x106>
    36c6:	2340      	movs	r3, #64	; 0x40
    36c8:	89a2      	ldrh	r2, [r4, #12]
    36ca:	4313      	orrs	r3, r2
    36cc:	e7df      	b.n	368e <__sflush_r+0xc6>
    36ce:	9b01      	ldr	r3, [sp, #4]
    36d0:	183f      	adds	r7, r7, r0
    36d2:	1a1b      	subs	r3, r3, r0
    36d4:	9301      	str	r3, [sp, #4]
    36d6:	e7ea      	b.n	36ae <__sflush_r+0xe6>
    36d8:	20400001 	.word	0x20400001

000036dc <_fflush_r>:
    36dc:	690b      	ldr	r3, [r1, #16]
    36de:	b570      	push	{r4, r5, r6, lr}
    36e0:	0005      	movs	r5, r0
    36e2:	000c      	movs	r4, r1
    36e4:	2b00      	cmp	r3, #0
    36e6:	d101      	bne.n	36ec <_fflush_r+0x10>
    36e8:	2000      	movs	r0, #0
    36ea:	bd70      	pop	{r4, r5, r6, pc}
    36ec:	2800      	cmp	r0, #0
    36ee:	d004      	beq.n	36fa <_fflush_r+0x1e>
    36f0:	6983      	ldr	r3, [r0, #24]
    36f2:	2b00      	cmp	r3, #0
    36f4:	d101      	bne.n	36fa <_fflush_r+0x1e>
    36f6:	f000 f85f 	bl	37b8 <__sinit>
    36fa:	4b0b      	ldr	r3, [pc, #44]	; (3728 <_fflush_r+0x4c>)
    36fc:	429c      	cmp	r4, r3
    36fe:	d109      	bne.n	3714 <_fflush_r+0x38>
    3700:	686c      	ldr	r4, [r5, #4]
    3702:	220c      	movs	r2, #12
    3704:	5ea3      	ldrsh	r3, [r4, r2]
    3706:	2b00      	cmp	r3, #0
    3708:	d0ee      	beq.n	36e8 <_fflush_r+0xc>
    370a:	0021      	movs	r1, r4
    370c:	0028      	movs	r0, r5
    370e:	f7ff ff5b 	bl	35c8 <__sflush_r>
    3712:	e7ea      	b.n	36ea <_fflush_r+0xe>
    3714:	4b05      	ldr	r3, [pc, #20]	; (372c <_fflush_r+0x50>)
    3716:	429c      	cmp	r4, r3
    3718:	d101      	bne.n	371e <_fflush_r+0x42>
    371a:	68ac      	ldr	r4, [r5, #8]
    371c:	e7f1      	b.n	3702 <_fflush_r+0x26>
    371e:	4b04      	ldr	r3, [pc, #16]	; (3730 <_fflush_r+0x54>)
    3720:	429c      	cmp	r4, r3
    3722:	d1ee      	bne.n	3702 <_fflush_r+0x26>
    3724:	68ec      	ldr	r4, [r5, #12]
    3726:	e7ec      	b.n	3702 <_fflush_r+0x26>
    3728:	000065a0 	.word	0x000065a0
    372c:	000065c0 	.word	0x000065c0
    3730:	00006580 	.word	0x00006580

00003734 <_cleanup_r>:
    3734:	b510      	push	{r4, lr}
    3736:	4902      	ldr	r1, [pc, #8]	; (3740 <_cleanup_r+0xc>)
    3738:	f000 f8b2 	bl	38a0 <_fwalk_reent>
    373c:	bd10      	pop	{r4, pc}
    373e:	46c0      	nop			; (mov r8, r8)
    3740:	000036dd 	.word	0x000036dd

00003744 <std.isra.0>:
    3744:	2300      	movs	r3, #0
    3746:	b510      	push	{r4, lr}
    3748:	0004      	movs	r4, r0
    374a:	6003      	str	r3, [r0, #0]
    374c:	6043      	str	r3, [r0, #4]
    374e:	6083      	str	r3, [r0, #8]
    3750:	8181      	strh	r1, [r0, #12]
    3752:	6643      	str	r3, [r0, #100]	; 0x64
    3754:	81c2      	strh	r2, [r0, #14]
    3756:	6103      	str	r3, [r0, #16]
    3758:	6143      	str	r3, [r0, #20]
    375a:	6183      	str	r3, [r0, #24]
    375c:	0019      	movs	r1, r3
    375e:	2208      	movs	r2, #8
    3760:	305c      	adds	r0, #92	; 0x5c
    3762:	f7ff fde6 	bl	3332 <memset>
    3766:	4b05      	ldr	r3, [pc, #20]	; (377c <std.isra.0+0x38>)
    3768:	6224      	str	r4, [r4, #32]
    376a:	6263      	str	r3, [r4, #36]	; 0x24
    376c:	4b04      	ldr	r3, [pc, #16]	; (3780 <std.isra.0+0x3c>)
    376e:	62a3      	str	r3, [r4, #40]	; 0x28
    3770:	4b04      	ldr	r3, [pc, #16]	; (3784 <std.isra.0+0x40>)
    3772:	62e3      	str	r3, [r4, #44]	; 0x2c
    3774:	4b04      	ldr	r3, [pc, #16]	; (3788 <std.isra.0+0x44>)
    3776:	6323      	str	r3, [r4, #48]	; 0x30
    3778:	bd10      	pop	{r4, pc}
    377a:	46c0      	nop			; (mov r8, r8)
    377c:	000040dd 	.word	0x000040dd
    3780:	00004105 	.word	0x00004105
    3784:	0000413d 	.word	0x0000413d
    3788:	00004169 	.word	0x00004169

0000378c <__sfmoreglue>:
    378c:	b570      	push	{r4, r5, r6, lr}
    378e:	2568      	movs	r5, #104	; 0x68
    3790:	1e4a      	subs	r2, r1, #1
    3792:	4355      	muls	r5, r2
    3794:	000e      	movs	r6, r1
    3796:	0029      	movs	r1, r5
    3798:	3174      	adds	r1, #116	; 0x74
    379a:	f000 f963 	bl	3a64 <_malloc_r>
    379e:	1e04      	subs	r4, r0, #0
    37a0:	d008      	beq.n	37b4 <__sfmoreglue+0x28>
    37a2:	2100      	movs	r1, #0
    37a4:	002a      	movs	r2, r5
    37a6:	6001      	str	r1, [r0, #0]
    37a8:	6046      	str	r6, [r0, #4]
    37aa:	300c      	adds	r0, #12
    37ac:	60a0      	str	r0, [r4, #8]
    37ae:	3268      	adds	r2, #104	; 0x68
    37b0:	f7ff fdbf 	bl	3332 <memset>
    37b4:	0020      	movs	r0, r4
    37b6:	bd70      	pop	{r4, r5, r6, pc}

000037b8 <__sinit>:
    37b8:	6983      	ldr	r3, [r0, #24]
    37ba:	b513      	push	{r0, r1, r4, lr}
    37bc:	0004      	movs	r4, r0
    37be:	2b00      	cmp	r3, #0
    37c0:	d128      	bne.n	3814 <__sinit+0x5c>
    37c2:	6483      	str	r3, [r0, #72]	; 0x48
    37c4:	64c3      	str	r3, [r0, #76]	; 0x4c
    37c6:	6503      	str	r3, [r0, #80]	; 0x50
    37c8:	4b13      	ldr	r3, [pc, #76]	; (3818 <__sinit+0x60>)
    37ca:	4a14      	ldr	r2, [pc, #80]	; (381c <__sinit+0x64>)
    37cc:	681b      	ldr	r3, [r3, #0]
    37ce:	6282      	str	r2, [r0, #40]	; 0x28
    37d0:	9301      	str	r3, [sp, #4]
    37d2:	4298      	cmp	r0, r3
    37d4:	d101      	bne.n	37da <__sinit+0x22>
    37d6:	2301      	movs	r3, #1
    37d8:	6183      	str	r3, [r0, #24]
    37da:	0020      	movs	r0, r4
    37dc:	f000 f820 	bl	3820 <__sfp>
    37e0:	6060      	str	r0, [r4, #4]
    37e2:	0020      	movs	r0, r4
    37e4:	f000 f81c 	bl	3820 <__sfp>
    37e8:	60a0      	str	r0, [r4, #8]
    37ea:	0020      	movs	r0, r4
    37ec:	f000 f818 	bl	3820 <__sfp>
    37f0:	2200      	movs	r2, #0
    37f2:	60e0      	str	r0, [r4, #12]
    37f4:	2104      	movs	r1, #4
    37f6:	6860      	ldr	r0, [r4, #4]
    37f8:	f7ff ffa4 	bl	3744 <std.isra.0>
    37fc:	2201      	movs	r2, #1
    37fe:	2109      	movs	r1, #9
    3800:	68a0      	ldr	r0, [r4, #8]
    3802:	f7ff ff9f 	bl	3744 <std.isra.0>
    3806:	2202      	movs	r2, #2
    3808:	2112      	movs	r1, #18
    380a:	68e0      	ldr	r0, [r4, #12]
    380c:	f7ff ff9a 	bl	3744 <std.isra.0>
    3810:	2301      	movs	r3, #1
    3812:	61a3      	str	r3, [r4, #24]
    3814:	bd13      	pop	{r0, r1, r4, pc}
    3816:	46c0      	nop			; (mov r8, r8)
    3818:	0000657c 	.word	0x0000657c
    381c:	00003735 	.word	0x00003735

00003820 <__sfp>:
    3820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3822:	4b1e      	ldr	r3, [pc, #120]	; (389c <__sfp+0x7c>)
    3824:	0007      	movs	r7, r0
    3826:	681e      	ldr	r6, [r3, #0]
    3828:	69b3      	ldr	r3, [r6, #24]
    382a:	2b00      	cmp	r3, #0
    382c:	d102      	bne.n	3834 <__sfp+0x14>
    382e:	0030      	movs	r0, r6
    3830:	f7ff ffc2 	bl	37b8 <__sinit>
    3834:	3648      	adds	r6, #72	; 0x48
    3836:	68b4      	ldr	r4, [r6, #8]
    3838:	6873      	ldr	r3, [r6, #4]
    383a:	3b01      	subs	r3, #1
    383c:	d504      	bpl.n	3848 <__sfp+0x28>
    383e:	6833      	ldr	r3, [r6, #0]
    3840:	2b00      	cmp	r3, #0
    3842:	d007      	beq.n	3854 <__sfp+0x34>
    3844:	6836      	ldr	r6, [r6, #0]
    3846:	e7f6      	b.n	3836 <__sfp+0x16>
    3848:	220c      	movs	r2, #12
    384a:	5ea5      	ldrsh	r5, [r4, r2]
    384c:	2d00      	cmp	r5, #0
    384e:	d00d      	beq.n	386c <__sfp+0x4c>
    3850:	3468      	adds	r4, #104	; 0x68
    3852:	e7f2      	b.n	383a <__sfp+0x1a>
    3854:	2104      	movs	r1, #4
    3856:	0038      	movs	r0, r7
    3858:	f7ff ff98 	bl	378c <__sfmoreglue>
    385c:	6030      	str	r0, [r6, #0]
    385e:	2800      	cmp	r0, #0
    3860:	d1f0      	bne.n	3844 <__sfp+0x24>
    3862:	230c      	movs	r3, #12
    3864:	0004      	movs	r4, r0
    3866:	603b      	str	r3, [r7, #0]
    3868:	0020      	movs	r0, r4
    386a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    386c:	2301      	movs	r3, #1
    386e:	0020      	movs	r0, r4
    3870:	425b      	negs	r3, r3
    3872:	81e3      	strh	r3, [r4, #14]
    3874:	3302      	adds	r3, #2
    3876:	81a3      	strh	r3, [r4, #12]
    3878:	6665      	str	r5, [r4, #100]	; 0x64
    387a:	6025      	str	r5, [r4, #0]
    387c:	60a5      	str	r5, [r4, #8]
    387e:	6065      	str	r5, [r4, #4]
    3880:	6125      	str	r5, [r4, #16]
    3882:	6165      	str	r5, [r4, #20]
    3884:	61a5      	str	r5, [r4, #24]
    3886:	2208      	movs	r2, #8
    3888:	0029      	movs	r1, r5
    388a:	305c      	adds	r0, #92	; 0x5c
    388c:	f7ff fd51 	bl	3332 <memset>
    3890:	6365      	str	r5, [r4, #52]	; 0x34
    3892:	63a5      	str	r5, [r4, #56]	; 0x38
    3894:	64a5      	str	r5, [r4, #72]	; 0x48
    3896:	64e5      	str	r5, [r4, #76]	; 0x4c
    3898:	e7e6      	b.n	3868 <__sfp+0x48>
    389a:	46c0      	nop			; (mov r8, r8)
    389c:	0000657c 	.word	0x0000657c

000038a0 <_fwalk_reent>:
    38a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    38a2:	0004      	movs	r4, r0
    38a4:	0007      	movs	r7, r0
    38a6:	2600      	movs	r6, #0
    38a8:	9101      	str	r1, [sp, #4]
    38aa:	3448      	adds	r4, #72	; 0x48
    38ac:	2c00      	cmp	r4, #0
    38ae:	d101      	bne.n	38b4 <_fwalk_reent+0x14>
    38b0:	0030      	movs	r0, r6
    38b2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    38b4:	6863      	ldr	r3, [r4, #4]
    38b6:	68a5      	ldr	r5, [r4, #8]
    38b8:	9300      	str	r3, [sp, #0]
    38ba:	9b00      	ldr	r3, [sp, #0]
    38bc:	3b01      	subs	r3, #1
    38be:	9300      	str	r3, [sp, #0]
    38c0:	d501      	bpl.n	38c6 <_fwalk_reent+0x26>
    38c2:	6824      	ldr	r4, [r4, #0]
    38c4:	e7f2      	b.n	38ac <_fwalk_reent+0xc>
    38c6:	89ab      	ldrh	r3, [r5, #12]
    38c8:	2b01      	cmp	r3, #1
    38ca:	d908      	bls.n	38de <_fwalk_reent+0x3e>
    38cc:	220e      	movs	r2, #14
    38ce:	5eab      	ldrsh	r3, [r5, r2]
    38d0:	3301      	adds	r3, #1
    38d2:	d004      	beq.n	38de <_fwalk_reent+0x3e>
    38d4:	0029      	movs	r1, r5
    38d6:	0038      	movs	r0, r7
    38d8:	9b01      	ldr	r3, [sp, #4]
    38da:	4798      	blx	r3
    38dc:	4306      	orrs	r6, r0
    38de:	3568      	adds	r5, #104	; 0x68
    38e0:	e7eb      	b.n	38ba <_fwalk_reent+0x1a>
	...

000038e4 <__swhatbuf_r>:
    38e4:	b570      	push	{r4, r5, r6, lr}
    38e6:	000e      	movs	r6, r1
    38e8:	001d      	movs	r5, r3
    38ea:	230e      	movs	r3, #14
    38ec:	5ec9      	ldrsh	r1, [r1, r3]
    38ee:	b090      	sub	sp, #64	; 0x40
    38f0:	0014      	movs	r4, r2
    38f2:	2900      	cmp	r1, #0
    38f4:	da07      	bge.n	3906 <__swhatbuf_r+0x22>
    38f6:	2300      	movs	r3, #0
    38f8:	602b      	str	r3, [r5, #0]
    38fa:	89b3      	ldrh	r3, [r6, #12]
    38fc:	061b      	lsls	r3, r3, #24
    38fe:	d411      	bmi.n	3924 <__swhatbuf_r+0x40>
    3900:	2380      	movs	r3, #128	; 0x80
    3902:	00db      	lsls	r3, r3, #3
    3904:	e00f      	b.n	3926 <__swhatbuf_r+0x42>
    3906:	aa01      	add	r2, sp, #4
    3908:	f000 fd26 	bl	4358 <_fstat_r>
    390c:	2800      	cmp	r0, #0
    390e:	dbf2      	blt.n	38f6 <__swhatbuf_r+0x12>
    3910:	22f0      	movs	r2, #240	; 0xf0
    3912:	9b02      	ldr	r3, [sp, #8]
    3914:	0212      	lsls	r2, r2, #8
    3916:	4013      	ands	r3, r2
    3918:	4a05      	ldr	r2, [pc, #20]	; (3930 <__swhatbuf_r+0x4c>)
    391a:	189b      	adds	r3, r3, r2
    391c:	425a      	negs	r2, r3
    391e:	4153      	adcs	r3, r2
    3920:	602b      	str	r3, [r5, #0]
    3922:	e7ed      	b.n	3900 <__swhatbuf_r+0x1c>
    3924:	2340      	movs	r3, #64	; 0x40
    3926:	2000      	movs	r0, #0
    3928:	6023      	str	r3, [r4, #0]
    392a:	b010      	add	sp, #64	; 0x40
    392c:	bd70      	pop	{r4, r5, r6, pc}
    392e:	46c0      	nop			; (mov r8, r8)
    3930:	ffffe000 	.word	0xffffe000

00003934 <__smakebuf_r>:
    3934:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3936:	2602      	movs	r6, #2
    3938:	898b      	ldrh	r3, [r1, #12]
    393a:	0005      	movs	r5, r0
    393c:	000c      	movs	r4, r1
    393e:	4233      	tst	r3, r6
    3940:	d006      	beq.n	3950 <__smakebuf_r+0x1c>
    3942:	0023      	movs	r3, r4
    3944:	3347      	adds	r3, #71	; 0x47
    3946:	6023      	str	r3, [r4, #0]
    3948:	6123      	str	r3, [r4, #16]
    394a:	2301      	movs	r3, #1
    394c:	6163      	str	r3, [r4, #20]
    394e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    3950:	ab01      	add	r3, sp, #4
    3952:	466a      	mov	r2, sp
    3954:	f7ff ffc6 	bl	38e4 <__swhatbuf_r>
    3958:	9900      	ldr	r1, [sp, #0]
    395a:	0007      	movs	r7, r0
    395c:	0028      	movs	r0, r5
    395e:	f000 f881 	bl	3a64 <_malloc_r>
    3962:	2800      	cmp	r0, #0
    3964:	d108      	bne.n	3978 <__smakebuf_r+0x44>
    3966:	220c      	movs	r2, #12
    3968:	5ea3      	ldrsh	r3, [r4, r2]
    396a:	059a      	lsls	r2, r3, #22
    396c:	d4ef      	bmi.n	394e <__smakebuf_r+0x1a>
    396e:	2203      	movs	r2, #3
    3970:	4393      	bics	r3, r2
    3972:	431e      	orrs	r6, r3
    3974:	81a6      	strh	r6, [r4, #12]
    3976:	e7e4      	b.n	3942 <__smakebuf_r+0xe>
    3978:	4b0f      	ldr	r3, [pc, #60]	; (39b8 <__smakebuf_r+0x84>)
    397a:	62ab      	str	r3, [r5, #40]	; 0x28
    397c:	2380      	movs	r3, #128	; 0x80
    397e:	89a2      	ldrh	r2, [r4, #12]
    3980:	6020      	str	r0, [r4, #0]
    3982:	4313      	orrs	r3, r2
    3984:	81a3      	strh	r3, [r4, #12]
    3986:	9b00      	ldr	r3, [sp, #0]
    3988:	6120      	str	r0, [r4, #16]
    398a:	6163      	str	r3, [r4, #20]
    398c:	9b01      	ldr	r3, [sp, #4]
    398e:	2b00      	cmp	r3, #0
    3990:	d00d      	beq.n	39ae <__smakebuf_r+0x7a>
    3992:	230e      	movs	r3, #14
    3994:	5ee1      	ldrsh	r1, [r4, r3]
    3996:	0028      	movs	r0, r5
    3998:	f000 fcf0 	bl	437c <_isatty_r>
    399c:	2800      	cmp	r0, #0
    399e:	d006      	beq.n	39ae <__smakebuf_r+0x7a>
    39a0:	2203      	movs	r2, #3
    39a2:	89a3      	ldrh	r3, [r4, #12]
    39a4:	4393      	bics	r3, r2
    39a6:	001a      	movs	r2, r3
    39a8:	2301      	movs	r3, #1
    39aa:	4313      	orrs	r3, r2
    39ac:	81a3      	strh	r3, [r4, #12]
    39ae:	89a0      	ldrh	r0, [r4, #12]
    39b0:	4338      	orrs	r0, r7
    39b2:	81a0      	strh	r0, [r4, #12]
    39b4:	e7cb      	b.n	394e <__smakebuf_r+0x1a>
    39b6:	46c0      	nop			; (mov r8, r8)
    39b8:	00003735 	.word	0x00003735

000039bc <malloc>:
    39bc:	b510      	push	{r4, lr}
    39be:	4b03      	ldr	r3, [pc, #12]	; (39cc <malloc+0x10>)
    39c0:	0001      	movs	r1, r0
    39c2:	6818      	ldr	r0, [r3, #0]
    39c4:	f000 f84e 	bl	3a64 <_malloc_r>
    39c8:	bd10      	pop	{r4, pc}
    39ca:	46c0      	nop			; (mov r8, r8)
    39cc:	20000158 	.word	0x20000158

000039d0 <_free_r>:
    39d0:	b570      	push	{r4, r5, r6, lr}
    39d2:	0005      	movs	r5, r0
    39d4:	2900      	cmp	r1, #0
    39d6:	d010      	beq.n	39fa <_free_r+0x2a>
    39d8:	1f0c      	subs	r4, r1, #4
    39da:	6823      	ldr	r3, [r4, #0]
    39dc:	2b00      	cmp	r3, #0
    39de:	da00      	bge.n	39e2 <_free_r+0x12>
    39e0:	18e4      	adds	r4, r4, r3
    39e2:	0028      	movs	r0, r5
    39e4:	f000 fcfb 	bl	43de <__malloc_lock>
    39e8:	4a1d      	ldr	r2, [pc, #116]	; (3a60 <_free_r+0x90>)
    39ea:	6813      	ldr	r3, [r2, #0]
    39ec:	2b00      	cmp	r3, #0
    39ee:	d105      	bne.n	39fc <_free_r+0x2c>
    39f0:	6063      	str	r3, [r4, #4]
    39f2:	6014      	str	r4, [r2, #0]
    39f4:	0028      	movs	r0, r5
    39f6:	f000 fcf3 	bl	43e0 <__malloc_unlock>
    39fa:	bd70      	pop	{r4, r5, r6, pc}
    39fc:	42a3      	cmp	r3, r4
    39fe:	d909      	bls.n	3a14 <_free_r+0x44>
    3a00:	6821      	ldr	r1, [r4, #0]
    3a02:	1860      	adds	r0, r4, r1
    3a04:	4283      	cmp	r3, r0
    3a06:	d1f3      	bne.n	39f0 <_free_r+0x20>
    3a08:	6818      	ldr	r0, [r3, #0]
    3a0a:	685b      	ldr	r3, [r3, #4]
    3a0c:	1841      	adds	r1, r0, r1
    3a0e:	6021      	str	r1, [r4, #0]
    3a10:	e7ee      	b.n	39f0 <_free_r+0x20>
    3a12:	0013      	movs	r3, r2
    3a14:	685a      	ldr	r2, [r3, #4]
    3a16:	2a00      	cmp	r2, #0
    3a18:	d001      	beq.n	3a1e <_free_r+0x4e>
    3a1a:	42a2      	cmp	r2, r4
    3a1c:	d9f9      	bls.n	3a12 <_free_r+0x42>
    3a1e:	6819      	ldr	r1, [r3, #0]
    3a20:	1858      	adds	r0, r3, r1
    3a22:	42a0      	cmp	r0, r4
    3a24:	d10b      	bne.n	3a3e <_free_r+0x6e>
    3a26:	6820      	ldr	r0, [r4, #0]
    3a28:	1809      	adds	r1, r1, r0
    3a2a:	1858      	adds	r0, r3, r1
    3a2c:	6019      	str	r1, [r3, #0]
    3a2e:	4282      	cmp	r2, r0
    3a30:	d1e0      	bne.n	39f4 <_free_r+0x24>
    3a32:	6810      	ldr	r0, [r2, #0]
    3a34:	6852      	ldr	r2, [r2, #4]
    3a36:	1841      	adds	r1, r0, r1
    3a38:	6019      	str	r1, [r3, #0]
    3a3a:	605a      	str	r2, [r3, #4]
    3a3c:	e7da      	b.n	39f4 <_free_r+0x24>
    3a3e:	42a0      	cmp	r0, r4
    3a40:	d902      	bls.n	3a48 <_free_r+0x78>
    3a42:	230c      	movs	r3, #12
    3a44:	602b      	str	r3, [r5, #0]
    3a46:	e7d5      	b.n	39f4 <_free_r+0x24>
    3a48:	6821      	ldr	r1, [r4, #0]
    3a4a:	1860      	adds	r0, r4, r1
    3a4c:	4282      	cmp	r2, r0
    3a4e:	d103      	bne.n	3a58 <_free_r+0x88>
    3a50:	6810      	ldr	r0, [r2, #0]
    3a52:	6852      	ldr	r2, [r2, #4]
    3a54:	1841      	adds	r1, r0, r1
    3a56:	6021      	str	r1, [r4, #0]
    3a58:	6062      	str	r2, [r4, #4]
    3a5a:	605c      	str	r4, [r3, #4]
    3a5c:	e7ca      	b.n	39f4 <_free_r+0x24>
    3a5e:	46c0      	nop			; (mov r8, r8)
    3a60:	2000029c 	.word	0x2000029c

00003a64 <_malloc_r>:
    3a64:	2303      	movs	r3, #3
    3a66:	b570      	push	{r4, r5, r6, lr}
    3a68:	1ccd      	adds	r5, r1, #3
    3a6a:	439d      	bics	r5, r3
    3a6c:	3508      	adds	r5, #8
    3a6e:	0006      	movs	r6, r0
    3a70:	2d0c      	cmp	r5, #12
    3a72:	d21e      	bcs.n	3ab2 <_malloc_r+0x4e>
    3a74:	250c      	movs	r5, #12
    3a76:	42a9      	cmp	r1, r5
    3a78:	d81d      	bhi.n	3ab6 <_malloc_r+0x52>
    3a7a:	0030      	movs	r0, r6
    3a7c:	f000 fcaf 	bl	43de <__malloc_lock>
    3a80:	4a25      	ldr	r2, [pc, #148]	; (3b18 <_malloc_r+0xb4>)
    3a82:	6814      	ldr	r4, [r2, #0]
    3a84:	0021      	movs	r1, r4
    3a86:	2900      	cmp	r1, #0
    3a88:	d119      	bne.n	3abe <_malloc_r+0x5a>
    3a8a:	4c24      	ldr	r4, [pc, #144]	; (3b1c <_malloc_r+0xb8>)
    3a8c:	6823      	ldr	r3, [r4, #0]
    3a8e:	2b00      	cmp	r3, #0
    3a90:	d103      	bne.n	3a9a <_malloc_r+0x36>
    3a92:	0030      	movs	r0, r6
    3a94:	f000 fb10 	bl	40b8 <_sbrk_r>
    3a98:	6020      	str	r0, [r4, #0]
    3a9a:	0029      	movs	r1, r5
    3a9c:	0030      	movs	r0, r6
    3a9e:	f000 fb0b 	bl	40b8 <_sbrk_r>
    3aa2:	1c43      	adds	r3, r0, #1
    3aa4:	d12c      	bne.n	3b00 <_malloc_r+0x9c>
    3aa6:	230c      	movs	r3, #12
    3aa8:	0030      	movs	r0, r6
    3aaa:	6033      	str	r3, [r6, #0]
    3aac:	f000 fc98 	bl	43e0 <__malloc_unlock>
    3ab0:	e003      	b.n	3aba <_malloc_r+0x56>
    3ab2:	2d00      	cmp	r5, #0
    3ab4:	dadf      	bge.n	3a76 <_malloc_r+0x12>
    3ab6:	230c      	movs	r3, #12
    3ab8:	6033      	str	r3, [r6, #0]
    3aba:	2000      	movs	r0, #0
    3abc:	bd70      	pop	{r4, r5, r6, pc}
    3abe:	680b      	ldr	r3, [r1, #0]
    3ac0:	1b5b      	subs	r3, r3, r5
    3ac2:	d41a      	bmi.n	3afa <_malloc_r+0x96>
    3ac4:	2b0b      	cmp	r3, #11
    3ac6:	d903      	bls.n	3ad0 <_malloc_r+0x6c>
    3ac8:	600b      	str	r3, [r1, #0]
    3aca:	18cc      	adds	r4, r1, r3
    3acc:	6025      	str	r5, [r4, #0]
    3ace:	e003      	b.n	3ad8 <_malloc_r+0x74>
    3ad0:	428c      	cmp	r4, r1
    3ad2:	d10e      	bne.n	3af2 <_malloc_r+0x8e>
    3ad4:	6863      	ldr	r3, [r4, #4]
    3ad6:	6013      	str	r3, [r2, #0]
    3ad8:	0030      	movs	r0, r6
    3ada:	f000 fc81 	bl	43e0 <__malloc_unlock>
    3ade:	0020      	movs	r0, r4
    3ae0:	2207      	movs	r2, #7
    3ae2:	300b      	adds	r0, #11
    3ae4:	1d23      	adds	r3, r4, #4
    3ae6:	4390      	bics	r0, r2
    3ae8:	1ac3      	subs	r3, r0, r3
    3aea:	d0e7      	beq.n	3abc <_malloc_r+0x58>
    3aec:	425a      	negs	r2, r3
    3aee:	50e2      	str	r2, [r4, r3]
    3af0:	e7e4      	b.n	3abc <_malloc_r+0x58>
    3af2:	684b      	ldr	r3, [r1, #4]
    3af4:	6063      	str	r3, [r4, #4]
    3af6:	000c      	movs	r4, r1
    3af8:	e7ee      	b.n	3ad8 <_malloc_r+0x74>
    3afa:	000c      	movs	r4, r1
    3afc:	6849      	ldr	r1, [r1, #4]
    3afe:	e7c2      	b.n	3a86 <_malloc_r+0x22>
    3b00:	2303      	movs	r3, #3
    3b02:	1cc4      	adds	r4, r0, #3
    3b04:	439c      	bics	r4, r3
    3b06:	42a0      	cmp	r0, r4
    3b08:	d0e0      	beq.n	3acc <_malloc_r+0x68>
    3b0a:	1a21      	subs	r1, r4, r0
    3b0c:	0030      	movs	r0, r6
    3b0e:	f000 fad3 	bl	40b8 <_sbrk_r>
    3b12:	1c43      	adds	r3, r0, #1
    3b14:	d1da      	bne.n	3acc <_malloc_r+0x68>
    3b16:	e7c6      	b.n	3aa6 <_malloc_r+0x42>
    3b18:	2000029c 	.word	0x2000029c
    3b1c:	200002a0 	.word	0x200002a0

00003b20 <__sfputc_r>:
    3b20:	6893      	ldr	r3, [r2, #8]
    3b22:	b510      	push	{r4, lr}
    3b24:	3b01      	subs	r3, #1
    3b26:	6093      	str	r3, [r2, #8]
    3b28:	2b00      	cmp	r3, #0
    3b2a:	da05      	bge.n	3b38 <__sfputc_r+0x18>
    3b2c:	6994      	ldr	r4, [r2, #24]
    3b2e:	42a3      	cmp	r3, r4
    3b30:	db08      	blt.n	3b44 <__sfputc_r+0x24>
    3b32:	b2cb      	uxtb	r3, r1
    3b34:	2b0a      	cmp	r3, #10
    3b36:	d005      	beq.n	3b44 <__sfputc_r+0x24>
    3b38:	6813      	ldr	r3, [r2, #0]
    3b3a:	1c58      	adds	r0, r3, #1
    3b3c:	6010      	str	r0, [r2, #0]
    3b3e:	7019      	strb	r1, [r3, #0]
    3b40:	b2c8      	uxtb	r0, r1
    3b42:	bd10      	pop	{r4, pc}
    3b44:	f000 fb16 	bl	4174 <__swbuf_r>
    3b48:	e7fb      	b.n	3b42 <__sfputc_r+0x22>

00003b4a <__sfputs_r>:
    3b4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3b4c:	0006      	movs	r6, r0
    3b4e:	000f      	movs	r7, r1
    3b50:	0014      	movs	r4, r2
    3b52:	18d5      	adds	r5, r2, r3
    3b54:	42ac      	cmp	r4, r5
    3b56:	d101      	bne.n	3b5c <__sfputs_r+0x12>
    3b58:	2000      	movs	r0, #0
    3b5a:	e007      	b.n	3b6c <__sfputs_r+0x22>
    3b5c:	7821      	ldrb	r1, [r4, #0]
    3b5e:	003a      	movs	r2, r7
    3b60:	0030      	movs	r0, r6
    3b62:	f7ff ffdd 	bl	3b20 <__sfputc_r>
    3b66:	3401      	adds	r4, #1
    3b68:	1c43      	adds	r3, r0, #1
    3b6a:	d1f3      	bne.n	3b54 <__sfputs_r+0xa>
    3b6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00003b70 <_vfiprintf_r>:
    3b70:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b72:	b09f      	sub	sp, #124	; 0x7c
    3b74:	0006      	movs	r6, r0
    3b76:	000f      	movs	r7, r1
    3b78:	0014      	movs	r4, r2
    3b7a:	9305      	str	r3, [sp, #20]
    3b7c:	2800      	cmp	r0, #0
    3b7e:	d004      	beq.n	3b8a <_vfiprintf_r+0x1a>
    3b80:	6983      	ldr	r3, [r0, #24]
    3b82:	2b00      	cmp	r3, #0
    3b84:	d101      	bne.n	3b8a <_vfiprintf_r+0x1a>
    3b86:	f7ff fe17 	bl	37b8 <__sinit>
    3b8a:	4b7f      	ldr	r3, [pc, #508]	; (3d88 <_vfiprintf_r+0x218>)
    3b8c:	429f      	cmp	r7, r3
    3b8e:	d15c      	bne.n	3c4a <_vfiprintf_r+0xda>
    3b90:	6877      	ldr	r7, [r6, #4]
    3b92:	89bb      	ldrh	r3, [r7, #12]
    3b94:	071b      	lsls	r3, r3, #28
    3b96:	d562      	bpl.n	3c5e <_vfiprintf_r+0xee>
    3b98:	693b      	ldr	r3, [r7, #16]
    3b9a:	2b00      	cmp	r3, #0
    3b9c:	d05f      	beq.n	3c5e <_vfiprintf_r+0xee>
    3b9e:	2300      	movs	r3, #0
    3ba0:	ad06      	add	r5, sp, #24
    3ba2:	616b      	str	r3, [r5, #20]
    3ba4:	3320      	adds	r3, #32
    3ba6:	766b      	strb	r3, [r5, #25]
    3ba8:	3310      	adds	r3, #16
    3baa:	76ab      	strb	r3, [r5, #26]
    3bac:	9402      	str	r4, [sp, #8]
    3bae:	9c02      	ldr	r4, [sp, #8]
    3bb0:	7823      	ldrb	r3, [r4, #0]
    3bb2:	2b00      	cmp	r3, #0
    3bb4:	d15d      	bne.n	3c72 <_vfiprintf_r+0x102>
    3bb6:	9b02      	ldr	r3, [sp, #8]
    3bb8:	1ae3      	subs	r3, r4, r3
    3bba:	9304      	str	r3, [sp, #16]
    3bbc:	d00d      	beq.n	3bda <_vfiprintf_r+0x6a>
    3bbe:	9b04      	ldr	r3, [sp, #16]
    3bc0:	9a02      	ldr	r2, [sp, #8]
    3bc2:	0039      	movs	r1, r7
    3bc4:	0030      	movs	r0, r6
    3bc6:	f7ff ffc0 	bl	3b4a <__sfputs_r>
    3bca:	1c43      	adds	r3, r0, #1
    3bcc:	d100      	bne.n	3bd0 <_vfiprintf_r+0x60>
    3bce:	e0cc      	b.n	3d6a <_vfiprintf_r+0x1fa>
    3bd0:	696a      	ldr	r2, [r5, #20]
    3bd2:	9b04      	ldr	r3, [sp, #16]
    3bd4:	4694      	mov	ip, r2
    3bd6:	4463      	add	r3, ip
    3bd8:	616b      	str	r3, [r5, #20]
    3bda:	7823      	ldrb	r3, [r4, #0]
    3bdc:	2b00      	cmp	r3, #0
    3bde:	d100      	bne.n	3be2 <_vfiprintf_r+0x72>
    3be0:	e0c3      	b.n	3d6a <_vfiprintf_r+0x1fa>
    3be2:	2201      	movs	r2, #1
    3be4:	2300      	movs	r3, #0
    3be6:	4252      	negs	r2, r2
    3be8:	606a      	str	r2, [r5, #4]
    3bea:	a902      	add	r1, sp, #8
    3bec:	3254      	adds	r2, #84	; 0x54
    3bee:	1852      	adds	r2, r2, r1
    3bf0:	3401      	adds	r4, #1
    3bf2:	602b      	str	r3, [r5, #0]
    3bf4:	60eb      	str	r3, [r5, #12]
    3bf6:	60ab      	str	r3, [r5, #8]
    3bf8:	7013      	strb	r3, [r2, #0]
    3bfa:	65ab      	str	r3, [r5, #88]	; 0x58
    3bfc:	7821      	ldrb	r1, [r4, #0]
    3bfe:	2205      	movs	r2, #5
    3c00:	4862      	ldr	r0, [pc, #392]	; (3d8c <_vfiprintf_r+0x21c>)
    3c02:	f000 fbe1 	bl	43c8 <memchr>
    3c06:	1c63      	adds	r3, r4, #1
    3c08:	469c      	mov	ip, r3
    3c0a:	2800      	cmp	r0, #0
    3c0c:	d135      	bne.n	3c7a <_vfiprintf_r+0x10a>
    3c0e:	6829      	ldr	r1, [r5, #0]
    3c10:	06cb      	lsls	r3, r1, #27
    3c12:	d504      	bpl.n	3c1e <_vfiprintf_r+0xae>
    3c14:	2353      	movs	r3, #83	; 0x53
    3c16:	aa02      	add	r2, sp, #8
    3c18:	3020      	adds	r0, #32
    3c1a:	189b      	adds	r3, r3, r2
    3c1c:	7018      	strb	r0, [r3, #0]
    3c1e:	070b      	lsls	r3, r1, #28
    3c20:	d504      	bpl.n	3c2c <_vfiprintf_r+0xbc>
    3c22:	2353      	movs	r3, #83	; 0x53
    3c24:	202b      	movs	r0, #43	; 0x2b
    3c26:	aa02      	add	r2, sp, #8
    3c28:	189b      	adds	r3, r3, r2
    3c2a:	7018      	strb	r0, [r3, #0]
    3c2c:	7823      	ldrb	r3, [r4, #0]
    3c2e:	2b2a      	cmp	r3, #42	; 0x2a
    3c30:	d02c      	beq.n	3c8c <_vfiprintf_r+0x11c>
    3c32:	2000      	movs	r0, #0
    3c34:	210a      	movs	r1, #10
    3c36:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3c38:	7822      	ldrb	r2, [r4, #0]
    3c3a:	3a30      	subs	r2, #48	; 0x30
    3c3c:	2a09      	cmp	r2, #9
    3c3e:	d800      	bhi.n	3c42 <_vfiprintf_r+0xd2>
    3c40:	e06b      	b.n	3d1a <_vfiprintf_r+0x1aa>
    3c42:	2800      	cmp	r0, #0
    3c44:	d02a      	beq.n	3c9c <_vfiprintf_r+0x12c>
    3c46:	9309      	str	r3, [sp, #36]	; 0x24
    3c48:	e028      	b.n	3c9c <_vfiprintf_r+0x12c>
    3c4a:	4b51      	ldr	r3, [pc, #324]	; (3d90 <_vfiprintf_r+0x220>)
    3c4c:	429f      	cmp	r7, r3
    3c4e:	d101      	bne.n	3c54 <_vfiprintf_r+0xe4>
    3c50:	68b7      	ldr	r7, [r6, #8]
    3c52:	e79e      	b.n	3b92 <_vfiprintf_r+0x22>
    3c54:	4b4f      	ldr	r3, [pc, #316]	; (3d94 <_vfiprintf_r+0x224>)
    3c56:	429f      	cmp	r7, r3
    3c58:	d19b      	bne.n	3b92 <_vfiprintf_r+0x22>
    3c5a:	68f7      	ldr	r7, [r6, #12]
    3c5c:	e799      	b.n	3b92 <_vfiprintf_r+0x22>
    3c5e:	0039      	movs	r1, r7
    3c60:	0030      	movs	r0, r6
    3c62:	f000 faf1 	bl	4248 <__swsetup_r>
    3c66:	2800      	cmp	r0, #0
    3c68:	d099      	beq.n	3b9e <_vfiprintf_r+0x2e>
    3c6a:	2001      	movs	r0, #1
    3c6c:	4240      	negs	r0, r0
    3c6e:	b01f      	add	sp, #124	; 0x7c
    3c70:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3c72:	2b25      	cmp	r3, #37	; 0x25
    3c74:	d09f      	beq.n	3bb6 <_vfiprintf_r+0x46>
    3c76:	3401      	adds	r4, #1
    3c78:	e79a      	b.n	3bb0 <_vfiprintf_r+0x40>
    3c7a:	4b44      	ldr	r3, [pc, #272]	; (3d8c <_vfiprintf_r+0x21c>)
    3c7c:	6829      	ldr	r1, [r5, #0]
    3c7e:	1ac0      	subs	r0, r0, r3
    3c80:	2301      	movs	r3, #1
    3c82:	4083      	lsls	r3, r0
    3c84:	430b      	orrs	r3, r1
    3c86:	602b      	str	r3, [r5, #0]
    3c88:	4664      	mov	r4, ip
    3c8a:	e7b7      	b.n	3bfc <_vfiprintf_r+0x8c>
    3c8c:	9b05      	ldr	r3, [sp, #20]
    3c8e:	1d18      	adds	r0, r3, #4
    3c90:	681b      	ldr	r3, [r3, #0]
    3c92:	9005      	str	r0, [sp, #20]
    3c94:	2b00      	cmp	r3, #0
    3c96:	db3a      	blt.n	3d0e <_vfiprintf_r+0x19e>
    3c98:	9309      	str	r3, [sp, #36]	; 0x24
    3c9a:	4664      	mov	r4, ip
    3c9c:	7823      	ldrb	r3, [r4, #0]
    3c9e:	2b2e      	cmp	r3, #46	; 0x2e
    3ca0:	d10b      	bne.n	3cba <_vfiprintf_r+0x14a>
    3ca2:	7863      	ldrb	r3, [r4, #1]
    3ca4:	1c62      	adds	r2, r4, #1
    3ca6:	2b2a      	cmp	r3, #42	; 0x2a
    3ca8:	d13f      	bne.n	3d2a <_vfiprintf_r+0x1ba>
    3caa:	9b05      	ldr	r3, [sp, #20]
    3cac:	3402      	adds	r4, #2
    3cae:	1d1a      	adds	r2, r3, #4
    3cb0:	681b      	ldr	r3, [r3, #0]
    3cb2:	9205      	str	r2, [sp, #20]
    3cb4:	2b00      	cmp	r3, #0
    3cb6:	db35      	blt.n	3d24 <_vfiprintf_r+0x1b4>
    3cb8:	9307      	str	r3, [sp, #28]
    3cba:	7821      	ldrb	r1, [r4, #0]
    3cbc:	2203      	movs	r2, #3
    3cbe:	4836      	ldr	r0, [pc, #216]	; (3d98 <_vfiprintf_r+0x228>)
    3cc0:	f000 fb82 	bl	43c8 <memchr>
    3cc4:	2800      	cmp	r0, #0
    3cc6:	d007      	beq.n	3cd8 <_vfiprintf_r+0x168>
    3cc8:	4b33      	ldr	r3, [pc, #204]	; (3d98 <_vfiprintf_r+0x228>)
    3cca:	682a      	ldr	r2, [r5, #0]
    3ccc:	1ac0      	subs	r0, r0, r3
    3cce:	2340      	movs	r3, #64	; 0x40
    3cd0:	4083      	lsls	r3, r0
    3cd2:	4313      	orrs	r3, r2
    3cd4:	602b      	str	r3, [r5, #0]
    3cd6:	3401      	adds	r4, #1
    3cd8:	7821      	ldrb	r1, [r4, #0]
    3cda:	1c63      	adds	r3, r4, #1
    3cdc:	2206      	movs	r2, #6
    3cde:	482f      	ldr	r0, [pc, #188]	; (3d9c <_vfiprintf_r+0x22c>)
    3ce0:	9302      	str	r3, [sp, #8]
    3ce2:	7629      	strb	r1, [r5, #24]
    3ce4:	f000 fb70 	bl	43c8 <memchr>
    3ce8:	2800      	cmp	r0, #0
    3cea:	d044      	beq.n	3d76 <_vfiprintf_r+0x206>
    3cec:	4b2c      	ldr	r3, [pc, #176]	; (3da0 <_vfiprintf_r+0x230>)
    3cee:	2b00      	cmp	r3, #0
    3cf0:	d12f      	bne.n	3d52 <_vfiprintf_r+0x1e2>
    3cf2:	6829      	ldr	r1, [r5, #0]
    3cf4:	9b05      	ldr	r3, [sp, #20]
    3cf6:	2207      	movs	r2, #7
    3cf8:	05c9      	lsls	r1, r1, #23
    3cfa:	d528      	bpl.n	3d4e <_vfiprintf_r+0x1de>
    3cfc:	189b      	adds	r3, r3, r2
    3cfe:	4393      	bics	r3, r2
    3d00:	3308      	adds	r3, #8
    3d02:	9305      	str	r3, [sp, #20]
    3d04:	696b      	ldr	r3, [r5, #20]
    3d06:	9a03      	ldr	r2, [sp, #12]
    3d08:	189b      	adds	r3, r3, r2
    3d0a:	616b      	str	r3, [r5, #20]
    3d0c:	e74f      	b.n	3bae <_vfiprintf_r+0x3e>
    3d0e:	425b      	negs	r3, r3
    3d10:	60eb      	str	r3, [r5, #12]
    3d12:	2302      	movs	r3, #2
    3d14:	430b      	orrs	r3, r1
    3d16:	602b      	str	r3, [r5, #0]
    3d18:	e7bf      	b.n	3c9a <_vfiprintf_r+0x12a>
    3d1a:	434b      	muls	r3, r1
    3d1c:	3401      	adds	r4, #1
    3d1e:	189b      	adds	r3, r3, r2
    3d20:	2001      	movs	r0, #1
    3d22:	e789      	b.n	3c38 <_vfiprintf_r+0xc8>
    3d24:	2301      	movs	r3, #1
    3d26:	425b      	negs	r3, r3
    3d28:	e7c6      	b.n	3cb8 <_vfiprintf_r+0x148>
    3d2a:	2300      	movs	r3, #0
    3d2c:	0014      	movs	r4, r2
    3d2e:	200a      	movs	r0, #10
    3d30:	001a      	movs	r2, r3
    3d32:	606b      	str	r3, [r5, #4]
    3d34:	7821      	ldrb	r1, [r4, #0]
    3d36:	3930      	subs	r1, #48	; 0x30
    3d38:	2909      	cmp	r1, #9
    3d3a:	d903      	bls.n	3d44 <_vfiprintf_r+0x1d4>
    3d3c:	2b00      	cmp	r3, #0
    3d3e:	d0bc      	beq.n	3cba <_vfiprintf_r+0x14a>
    3d40:	9207      	str	r2, [sp, #28]
    3d42:	e7ba      	b.n	3cba <_vfiprintf_r+0x14a>
    3d44:	4342      	muls	r2, r0
    3d46:	3401      	adds	r4, #1
    3d48:	1852      	adds	r2, r2, r1
    3d4a:	2301      	movs	r3, #1
    3d4c:	e7f2      	b.n	3d34 <_vfiprintf_r+0x1c4>
    3d4e:	3307      	adds	r3, #7
    3d50:	e7d5      	b.n	3cfe <_vfiprintf_r+0x18e>
    3d52:	ab05      	add	r3, sp, #20
    3d54:	9300      	str	r3, [sp, #0]
    3d56:	003a      	movs	r2, r7
    3d58:	4b12      	ldr	r3, [pc, #72]	; (3da4 <_vfiprintf_r+0x234>)
    3d5a:	0029      	movs	r1, r5
    3d5c:	0030      	movs	r0, r6
    3d5e:	e000      	b.n	3d62 <_vfiprintf_r+0x1f2>
    3d60:	bf00      	nop
    3d62:	9003      	str	r0, [sp, #12]
    3d64:	9b03      	ldr	r3, [sp, #12]
    3d66:	3301      	adds	r3, #1
    3d68:	d1cc      	bne.n	3d04 <_vfiprintf_r+0x194>
    3d6a:	89bb      	ldrh	r3, [r7, #12]
    3d6c:	065b      	lsls	r3, r3, #25
    3d6e:	d500      	bpl.n	3d72 <_vfiprintf_r+0x202>
    3d70:	e77b      	b.n	3c6a <_vfiprintf_r+0xfa>
    3d72:	980b      	ldr	r0, [sp, #44]	; 0x2c
    3d74:	e77b      	b.n	3c6e <_vfiprintf_r+0xfe>
    3d76:	ab05      	add	r3, sp, #20
    3d78:	9300      	str	r3, [sp, #0]
    3d7a:	003a      	movs	r2, r7
    3d7c:	4b09      	ldr	r3, [pc, #36]	; (3da4 <_vfiprintf_r+0x234>)
    3d7e:	0029      	movs	r1, r5
    3d80:	0030      	movs	r0, r6
    3d82:	f000 f87f 	bl	3e84 <_printf_i>
    3d86:	e7ec      	b.n	3d62 <_vfiprintf_r+0x1f2>
    3d88:	000065a0 	.word	0x000065a0
    3d8c:	000065e0 	.word	0x000065e0
    3d90:	000065c0 	.word	0x000065c0
    3d94:	00006580 	.word	0x00006580
    3d98:	000065e6 	.word	0x000065e6
    3d9c:	000065ea 	.word	0x000065ea
    3da0:	00000000 	.word	0x00000000
    3da4:	00003b4b 	.word	0x00003b4b

00003da8 <_printf_common>:
    3da8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3daa:	0015      	movs	r5, r2
    3dac:	9301      	str	r3, [sp, #4]
    3dae:	688a      	ldr	r2, [r1, #8]
    3db0:	690b      	ldr	r3, [r1, #16]
    3db2:	9000      	str	r0, [sp, #0]
    3db4:	000c      	movs	r4, r1
    3db6:	4293      	cmp	r3, r2
    3db8:	da00      	bge.n	3dbc <_printf_common+0x14>
    3dba:	0013      	movs	r3, r2
    3dbc:	0022      	movs	r2, r4
    3dbe:	602b      	str	r3, [r5, #0]
    3dc0:	3243      	adds	r2, #67	; 0x43
    3dc2:	7812      	ldrb	r2, [r2, #0]
    3dc4:	2a00      	cmp	r2, #0
    3dc6:	d001      	beq.n	3dcc <_printf_common+0x24>
    3dc8:	3301      	adds	r3, #1
    3dca:	602b      	str	r3, [r5, #0]
    3dcc:	6823      	ldr	r3, [r4, #0]
    3dce:	069b      	lsls	r3, r3, #26
    3dd0:	d502      	bpl.n	3dd8 <_printf_common+0x30>
    3dd2:	682b      	ldr	r3, [r5, #0]
    3dd4:	3302      	adds	r3, #2
    3dd6:	602b      	str	r3, [r5, #0]
    3dd8:	2706      	movs	r7, #6
    3dda:	6823      	ldr	r3, [r4, #0]
    3ddc:	401f      	ands	r7, r3
    3dde:	d027      	beq.n	3e30 <_printf_common+0x88>
    3de0:	0023      	movs	r3, r4
    3de2:	3343      	adds	r3, #67	; 0x43
    3de4:	781b      	ldrb	r3, [r3, #0]
    3de6:	1e5a      	subs	r2, r3, #1
    3de8:	4193      	sbcs	r3, r2
    3dea:	6822      	ldr	r2, [r4, #0]
    3dec:	0692      	lsls	r2, r2, #26
    3dee:	d430      	bmi.n	3e52 <_printf_common+0xaa>
    3df0:	0022      	movs	r2, r4
    3df2:	9901      	ldr	r1, [sp, #4]
    3df4:	3243      	adds	r2, #67	; 0x43
    3df6:	9800      	ldr	r0, [sp, #0]
    3df8:	9e08      	ldr	r6, [sp, #32]
    3dfa:	47b0      	blx	r6
    3dfc:	1c43      	adds	r3, r0, #1
    3dfe:	d025      	beq.n	3e4c <_printf_common+0xa4>
    3e00:	2306      	movs	r3, #6
    3e02:	6820      	ldr	r0, [r4, #0]
    3e04:	682a      	ldr	r2, [r5, #0]
    3e06:	68e1      	ldr	r1, [r4, #12]
    3e08:	4003      	ands	r3, r0
    3e0a:	2500      	movs	r5, #0
    3e0c:	2b04      	cmp	r3, #4
    3e0e:	d103      	bne.n	3e18 <_printf_common+0x70>
    3e10:	1a8d      	subs	r5, r1, r2
    3e12:	43eb      	mvns	r3, r5
    3e14:	17db      	asrs	r3, r3, #31
    3e16:	401d      	ands	r5, r3
    3e18:	68a3      	ldr	r3, [r4, #8]
    3e1a:	6922      	ldr	r2, [r4, #16]
    3e1c:	4293      	cmp	r3, r2
    3e1e:	dd01      	ble.n	3e24 <_printf_common+0x7c>
    3e20:	1a9b      	subs	r3, r3, r2
    3e22:	18ed      	adds	r5, r5, r3
    3e24:	2700      	movs	r7, #0
    3e26:	42bd      	cmp	r5, r7
    3e28:	d120      	bne.n	3e6c <_printf_common+0xc4>
    3e2a:	2000      	movs	r0, #0
    3e2c:	e010      	b.n	3e50 <_printf_common+0xa8>
    3e2e:	3701      	adds	r7, #1
    3e30:	68e3      	ldr	r3, [r4, #12]
    3e32:	682a      	ldr	r2, [r5, #0]
    3e34:	1a9b      	subs	r3, r3, r2
    3e36:	429f      	cmp	r7, r3
    3e38:	dad2      	bge.n	3de0 <_printf_common+0x38>
    3e3a:	0022      	movs	r2, r4
    3e3c:	2301      	movs	r3, #1
    3e3e:	3219      	adds	r2, #25
    3e40:	9901      	ldr	r1, [sp, #4]
    3e42:	9800      	ldr	r0, [sp, #0]
    3e44:	9e08      	ldr	r6, [sp, #32]
    3e46:	47b0      	blx	r6
    3e48:	1c43      	adds	r3, r0, #1
    3e4a:	d1f0      	bne.n	3e2e <_printf_common+0x86>
    3e4c:	2001      	movs	r0, #1
    3e4e:	4240      	negs	r0, r0
    3e50:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3e52:	2030      	movs	r0, #48	; 0x30
    3e54:	18e1      	adds	r1, r4, r3
    3e56:	3143      	adds	r1, #67	; 0x43
    3e58:	7008      	strb	r0, [r1, #0]
    3e5a:	0021      	movs	r1, r4
    3e5c:	1c5a      	adds	r2, r3, #1
    3e5e:	3145      	adds	r1, #69	; 0x45
    3e60:	7809      	ldrb	r1, [r1, #0]
    3e62:	18a2      	adds	r2, r4, r2
    3e64:	3243      	adds	r2, #67	; 0x43
    3e66:	3302      	adds	r3, #2
    3e68:	7011      	strb	r1, [r2, #0]
    3e6a:	e7c1      	b.n	3df0 <_printf_common+0x48>
    3e6c:	0022      	movs	r2, r4
    3e6e:	2301      	movs	r3, #1
    3e70:	321a      	adds	r2, #26
    3e72:	9901      	ldr	r1, [sp, #4]
    3e74:	9800      	ldr	r0, [sp, #0]
    3e76:	9e08      	ldr	r6, [sp, #32]
    3e78:	47b0      	blx	r6
    3e7a:	1c43      	adds	r3, r0, #1
    3e7c:	d0e6      	beq.n	3e4c <_printf_common+0xa4>
    3e7e:	3701      	adds	r7, #1
    3e80:	e7d1      	b.n	3e26 <_printf_common+0x7e>
	...

00003e84 <_printf_i>:
    3e84:	b5f0      	push	{r4, r5, r6, r7, lr}
    3e86:	b08b      	sub	sp, #44	; 0x2c
    3e88:	9206      	str	r2, [sp, #24]
    3e8a:	000a      	movs	r2, r1
    3e8c:	3243      	adds	r2, #67	; 0x43
    3e8e:	9307      	str	r3, [sp, #28]
    3e90:	9005      	str	r0, [sp, #20]
    3e92:	9204      	str	r2, [sp, #16]
    3e94:	7e0a      	ldrb	r2, [r1, #24]
    3e96:	000c      	movs	r4, r1
    3e98:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3e9a:	2a6e      	cmp	r2, #110	; 0x6e
    3e9c:	d100      	bne.n	3ea0 <_printf_i+0x1c>
    3e9e:	e08f      	b.n	3fc0 <_printf_i+0x13c>
    3ea0:	d817      	bhi.n	3ed2 <_printf_i+0x4e>
    3ea2:	2a63      	cmp	r2, #99	; 0x63
    3ea4:	d02c      	beq.n	3f00 <_printf_i+0x7c>
    3ea6:	d808      	bhi.n	3eba <_printf_i+0x36>
    3ea8:	2a00      	cmp	r2, #0
    3eaa:	d100      	bne.n	3eae <_printf_i+0x2a>
    3eac:	e099      	b.n	3fe2 <_printf_i+0x15e>
    3eae:	2a58      	cmp	r2, #88	; 0x58
    3eb0:	d054      	beq.n	3f5c <_printf_i+0xd8>
    3eb2:	0026      	movs	r6, r4
    3eb4:	3642      	adds	r6, #66	; 0x42
    3eb6:	7032      	strb	r2, [r6, #0]
    3eb8:	e029      	b.n	3f0e <_printf_i+0x8a>
    3eba:	2a64      	cmp	r2, #100	; 0x64
    3ebc:	d001      	beq.n	3ec2 <_printf_i+0x3e>
    3ebe:	2a69      	cmp	r2, #105	; 0x69
    3ec0:	d1f7      	bne.n	3eb2 <_printf_i+0x2e>
    3ec2:	6821      	ldr	r1, [r4, #0]
    3ec4:	681a      	ldr	r2, [r3, #0]
    3ec6:	0608      	lsls	r0, r1, #24
    3ec8:	d523      	bpl.n	3f12 <_printf_i+0x8e>
    3eca:	1d11      	adds	r1, r2, #4
    3ecc:	6019      	str	r1, [r3, #0]
    3ece:	6815      	ldr	r5, [r2, #0]
    3ed0:	e025      	b.n	3f1e <_printf_i+0x9a>
    3ed2:	2a73      	cmp	r2, #115	; 0x73
    3ed4:	d100      	bne.n	3ed8 <_printf_i+0x54>
    3ed6:	e088      	b.n	3fea <_printf_i+0x166>
    3ed8:	d808      	bhi.n	3eec <_printf_i+0x68>
    3eda:	2a6f      	cmp	r2, #111	; 0x6f
    3edc:	d029      	beq.n	3f32 <_printf_i+0xae>
    3ede:	2a70      	cmp	r2, #112	; 0x70
    3ee0:	d1e7      	bne.n	3eb2 <_printf_i+0x2e>
    3ee2:	2220      	movs	r2, #32
    3ee4:	6809      	ldr	r1, [r1, #0]
    3ee6:	430a      	orrs	r2, r1
    3ee8:	6022      	str	r2, [r4, #0]
    3eea:	e003      	b.n	3ef4 <_printf_i+0x70>
    3eec:	2a75      	cmp	r2, #117	; 0x75
    3eee:	d020      	beq.n	3f32 <_printf_i+0xae>
    3ef0:	2a78      	cmp	r2, #120	; 0x78
    3ef2:	d1de      	bne.n	3eb2 <_printf_i+0x2e>
    3ef4:	0022      	movs	r2, r4
    3ef6:	2178      	movs	r1, #120	; 0x78
    3ef8:	3245      	adds	r2, #69	; 0x45
    3efa:	7011      	strb	r1, [r2, #0]
    3efc:	4a6c      	ldr	r2, [pc, #432]	; (40b0 <_printf_i+0x22c>)
    3efe:	e030      	b.n	3f62 <_printf_i+0xde>
    3f00:	000e      	movs	r6, r1
    3f02:	681a      	ldr	r2, [r3, #0]
    3f04:	3642      	adds	r6, #66	; 0x42
    3f06:	1d11      	adds	r1, r2, #4
    3f08:	6019      	str	r1, [r3, #0]
    3f0a:	6813      	ldr	r3, [r2, #0]
    3f0c:	7033      	strb	r3, [r6, #0]
    3f0e:	2301      	movs	r3, #1
    3f10:	e079      	b.n	4006 <_printf_i+0x182>
    3f12:	0649      	lsls	r1, r1, #25
    3f14:	d5d9      	bpl.n	3eca <_printf_i+0x46>
    3f16:	1d11      	adds	r1, r2, #4
    3f18:	6019      	str	r1, [r3, #0]
    3f1a:	2300      	movs	r3, #0
    3f1c:	5ed5      	ldrsh	r5, [r2, r3]
    3f1e:	2d00      	cmp	r5, #0
    3f20:	da03      	bge.n	3f2a <_printf_i+0xa6>
    3f22:	232d      	movs	r3, #45	; 0x2d
    3f24:	9a04      	ldr	r2, [sp, #16]
    3f26:	426d      	negs	r5, r5
    3f28:	7013      	strb	r3, [r2, #0]
    3f2a:	4b62      	ldr	r3, [pc, #392]	; (40b4 <_printf_i+0x230>)
    3f2c:	270a      	movs	r7, #10
    3f2e:	9303      	str	r3, [sp, #12]
    3f30:	e02f      	b.n	3f92 <_printf_i+0x10e>
    3f32:	6820      	ldr	r0, [r4, #0]
    3f34:	6819      	ldr	r1, [r3, #0]
    3f36:	0605      	lsls	r5, r0, #24
    3f38:	d503      	bpl.n	3f42 <_printf_i+0xbe>
    3f3a:	1d08      	adds	r0, r1, #4
    3f3c:	6018      	str	r0, [r3, #0]
    3f3e:	680d      	ldr	r5, [r1, #0]
    3f40:	e005      	b.n	3f4e <_printf_i+0xca>
    3f42:	0640      	lsls	r0, r0, #25
    3f44:	d5f9      	bpl.n	3f3a <_printf_i+0xb6>
    3f46:	680d      	ldr	r5, [r1, #0]
    3f48:	1d08      	adds	r0, r1, #4
    3f4a:	6018      	str	r0, [r3, #0]
    3f4c:	b2ad      	uxth	r5, r5
    3f4e:	4b59      	ldr	r3, [pc, #356]	; (40b4 <_printf_i+0x230>)
    3f50:	2708      	movs	r7, #8
    3f52:	9303      	str	r3, [sp, #12]
    3f54:	2a6f      	cmp	r2, #111	; 0x6f
    3f56:	d018      	beq.n	3f8a <_printf_i+0x106>
    3f58:	270a      	movs	r7, #10
    3f5a:	e016      	b.n	3f8a <_printf_i+0x106>
    3f5c:	3145      	adds	r1, #69	; 0x45
    3f5e:	700a      	strb	r2, [r1, #0]
    3f60:	4a54      	ldr	r2, [pc, #336]	; (40b4 <_printf_i+0x230>)
    3f62:	9203      	str	r2, [sp, #12]
    3f64:	681a      	ldr	r2, [r3, #0]
    3f66:	6821      	ldr	r1, [r4, #0]
    3f68:	1d10      	adds	r0, r2, #4
    3f6a:	6018      	str	r0, [r3, #0]
    3f6c:	6815      	ldr	r5, [r2, #0]
    3f6e:	0608      	lsls	r0, r1, #24
    3f70:	d522      	bpl.n	3fb8 <_printf_i+0x134>
    3f72:	07cb      	lsls	r3, r1, #31
    3f74:	d502      	bpl.n	3f7c <_printf_i+0xf8>
    3f76:	2320      	movs	r3, #32
    3f78:	4319      	orrs	r1, r3
    3f7a:	6021      	str	r1, [r4, #0]
    3f7c:	2710      	movs	r7, #16
    3f7e:	2d00      	cmp	r5, #0
    3f80:	d103      	bne.n	3f8a <_printf_i+0x106>
    3f82:	2320      	movs	r3, #32
    3f84:	6822      	ldr	r2, [r4, #0]
    3f86:	439a      	bics	r2, r3
    3f88:	6022      	str	r2, [r4, #0]
    3f8a:	0023      	movs	r3, r4
    3f8c:	2200      	movs	r2, #0
    3f8e:	3343      	adds	r3, #67	; 0x43
    3f90:	701a      	strb	r2, [r3, #0]
    3f92:	6863      	ldr	r3, [r4, #4]
    3f94:	60a3      	str	r3, [r4, #8]
    3f96:	2b00      	cmp	r3, #0
    3f98:	db5c      	blt.n	4054 <_printf_i+0x1d0>
    3f9a:	2204      	movs	r2, #4
    3f9c:	6821      	ldr	r1, [r4, #0]
    3f9e:	4391      	bics	r1, r2
    3fa0:	6021      	str	r1, [r4, #0]
    3fa2:	2d00      	cmp	r5, #0
    3fa4:	d158      	bne.n	4058 <_printf_i+0x1d4>
    3fa6:	9e04      	ldr	r6, [sp, #16]
    3fa8:	2b00      	cmp	r3, #0
    3faa:	d064      	beq.n	4076 <_printf_i+0x1f2>
    3fac:	0026      	movs	r6, r4
    3fae:	9b03      	ldr	r3, [sp, #12]
    3fb0:	3642      	adds	r6, #66	; 0x42
    3fb2:	781b      	ldrb	r3, [r3, #0]
    3fb4:	7033      	strb	r3, [r6, #0]
    3fb6:	e05e      	b.n	4076 <_printf_i+0x1f2>
    3fb8:	0648      	lsls	r0, r1, #25
    3fba:	d5da      	bpl.n	3f72 <_printf_i+0xee>
    3fbc:	b2ad      	uxth	r5, r5
    3fbe:	e7d8      	b.n	3f72 <_printf_i+0xee>
    3fc0:	6809      	ldr	r1, [r1, #0]
    3fc2:	681a      	ldr	r2, [r3, #0]
    3fc4:	0608      	lsls	r0, r1, #24
    3fc6:	d505      	bpl.n	3fd4 <_printf_i+0x150>
    3fc8:	1d11      	adds	r1, r2, #4
    3fca:	6019      	str	r1, [r3, #0]
    3fcc:	6813      	ldr	r3, [r2, #0]
    3fce:	6962      	ldr	r2, [r4, #20]
    3fd0:	601a      	str	r2, [r3, #0]
    3fd2:	e006      	b.n	3fe2 <_printf_i+0x15e>
    3fd4:	0649      	lsls	r1, r1, #25
    3fd6:	d5f7      	bpl.n	3fc8 <_printf_i+0x144>
    3fd8:	1d11      	adds	r1, r2, #4
    3fda:	6019      	str	r1, [r3, #0]
    3fdc:	6813      	ldr	r3, [r2, #0]
    3fde:	8aa2      	ldrh	r2, [r4, #20]
    3fe0:	801a      	strh	r2, [r3, #0]
    3fe2:	2300      	movs	r3, #0
    3fe4:	9e04      	ldr	r6, [sp, #16]
    3fe6:	6123      	str	r3, [r4, #16]
    3fe8:	e054      	b.n	4094 <_printf_i+0x210>
    3fea:	681a      	ldr	r2, [r3, #0]
    3fec:	1d11      	adds	r1, r2, #4
    3fee:	6019      	str	r1, [r3, #0]
    3ff0:	6816      	ldr	r6, [r2, #0]
    3ff2:	2100      	movs	r1, #0
    3ff4:	6862      	ldr	r2, [r4, #4]
    3ff6:	0030      	movs	r0, r6
    3ff8:	f000 f9e6 	bl	43c8 <memchr>
    3ffc:	2800      	cmp	r0, #0
    3ffe:	d001      	beq.n	4004 <_printf_i+0x180>
    4000:	1b80      	subs	r0, r0, r6
    4002:	6060      	str	r0, [r4, #4]
    4004:	6863      	ldr	r3, [r4, #4]
    4006:	6123      	str	r3, [r4, #16]
    4008:	2300      	movs	r3, #0
    400a:	9a04      	ldr	r2, [sp, #16]
    400c:	7013      	strb	r3, [r2, #0]
    400e:	e041      	b.n	4094 <_printf_i+0x210>
    4010:	6923      	ldr	r3, [r4, #16]
    4012:	0032      	movs	r2, r6
    4014:	9906      	ldr	r1, [sp, #24]
    4016:	9805      	ldr	r0, [sp, #20]
    4018:	9d07      	ldr	r5, [sp, #28]
    401a:	47a8      	blx	r5
    401c:	1c43      	adds	r3, r0, #1
    401e:	d043      	beq.n	40a8 <_printf_i+0x224>
    4020:	6823      	ldr	r3, [r4, #0]
    4022:	2500      	movs	r5, #0
    4024:	079b      	lsls	r3, r3, #30
    4026:	d40f      	bmi.n	4048 <_printf_i+0x1c4>
    4028:	9b09      	ldr	r3, [sp, #36]	; 0x24
    402a:	68e0      	ldr	r0, [r4, #12]
    402c:	4298      	cmp	r0, r3
    402e:	da3d      	bge.n	40ac <_printf_i+0x228>
    4030:	0018      	movs	r0, r3
    4032:	e03b      	b.n	40ac <_printf_i+0x228>
    4034:	0022      	movs	r2, r4
    4036:	2301      	movs	r3, #1
    4038:	3219      	adds	r2, #25
    403a:	9906      	ldr	r1, [sp, #24]
    403c:	9805      	ldr	r0, [sp, #20]
    403e:	9e07      	ldr	r6, [sp, #28]
    4040:	47b0      	blx	r6
    4042:	1c43      	adds	r3, r0, #1
    4044:	d030      	beq.n	40a8 <_printf_i+0x224>
    4046:	3501      	adds	r5, #1
    4048:	68e3      	ldr	r3, [r4, #12]
    404a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    404c:	1a9b      	subs	r3, r3, r2
    404e:	429d      	cmp	r5, r3
    4050:	dbf0      	blt.n	4034 <_printf_i+0x1b0>
    4052:	e7e9      	b.n	4028 <_printf_i+0x1a4>
    4054:	2d00      	cmp	r5, #0
    4056:	d0a9      	beq.n	3fac <_printf_i+0x128>
    4058:	9e04      	ldr	r6, [sp, #16]
    405a:	0028      	movs	r0, r5
    405c:	0039      	movs	r1, r7
    405e:	f7ff f90b 	bl	3278 <__aeabi_uidivmod>
    4062:	9b03      	ldr	r3, [sp, #12]
    4064:	3e01      	subs	r6, #1
    4066:	5c5b      	ldrb	r3, [r3, r1]
    4068:	0028      	movs	r0, r5
    406a:	7033      	strb	r3, [r6, #0]
    406c:	0039      	movs	r1, r7
    406e:	f7ff f87d 	bl	316c <__udivsi3>
    4072:	1e05      	subs	r5, r0, #0
    4074:	d1f1      	bne.n	405a <_printf_i+0x1d6>
    4076:	2f08      	cmp	r7, #8
    4078:	d109      	bne.n	408e <_printf_i+0x20a>
    407a:	6823      	ldr	r3, [r4, #0]
    407c:	07db      	lsls	r3, r3, #31
    407e:	d506      	bpl.n	408e <_printf_i+0x20a>
    4080:	6863      	ldr	r3, [r4, #4]
    4082:	6922      	ldr	r2, [r4, #16]
    4084:	4293      	cmp	r3, r2
    4086:	dc02      	bgt.n	408e <_printf_i+0x20a>
    4088:	2330      	movs	r3, #48	; 0x30
    408a:	3e01      	subs	r6, #1
    408c:	7033      	strb	r3, [r6, #0]
    408e:	9b04      	ldr	r3, [sp, #16]
    4090:	1b9b      	subs	r3, r3, r6
    4092:	6123      	str	r3, [r4, #16]
    4094:	9b07      	ldr	r3, [sp, #28]
    4096:	aa09      	add	r2, sp, #36	; 0x24
    4098:	9300      	str	r3, [sp, #0]
    409a:	0021      	movs	r1, r4
    409c:	9b06      	ldr	r3, [sp, #24]
    409e:	9805      	ldr	r0, [sp, #20]
    40a0:	f7ff fe82 	bl	3da8 <_printf_common>
    40a4:	1c43      	adds	r3, r0, #1
    40a6:	d1b3      	bne.n	4010 <_printf_i+0x18c>
    40a8:	2001      	movs	r0, #1
    40aa:	4240      	negs	r0, r0
    40ac:	b00b      	add	sp, #44	; 0x2c
    40ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    40b0:	00006602 	.word	0x00006602
    40b4:	000065f1 	.word	0x000065f1

000040b8 <_sbrk_r>:
    40b8:	2300      	movs	r3, #0
    40ba:	b570      	push	{r4, r5, r6, lr}
    40bc:	4c06      	ldr	r4, [pc, #24]	; (40d8 <_sbrk_r+0x20>)
    40be:	0005      	movs	r5, r0
    40c0:	0008      	movs	r0, r1
    40c2:	6023      	str	r3, [r4, #0]
    40c4:	f7fd fe0e 	bl	1ce4 <_sbrk>
    40c8:	1c43      	adds	r3, r0, #1
    40ca:	d103      	bne.n	40d4 <_sbrk_r+0x1c>
    40cc:	6823      	ldr	r3, [r4, #0]
    40ce:	2b00      	cmp	r3, #0
    40d0:	d000      	beq.n	40d4 <_sbrk_r+0x1c>
    40d2:	602b      	str	r3, [r5, #0]
    40d4:	bd70      	pop	{r4, r5, r6, pc}
    40d6:	46c0      	nop			; (mov r8, r8)
    40d8:	20000428 	.word	0x20000428

000040dc <__sread>:
    40dc:	b570      	push	{r4, r5, r6, lr}
    40de:	000c      	movs	r4, r1
    40e0:	250e      	movs	r5, #14
    40e2:	5f49      	ldrsh	r1, [r1, r5]
    40e4:	f000 f97e 	bl	43e4 <_read_r>
    40e8:	2800      	cmp	r0, #0
    40ea:	db03      	blt.n	40f4 <__sread+0x18>
    40ec:	6d63      	ldr	r3, [r4, #84]	; 0x54
    40ee:	181b      	adds	r3, r3, r0
    40f0:	6563      	str	r3, [r4, #84]	; 0x54
    40f2:	bd70      	pop	{r4, r5, r6, pc}
    40f4:	89a3      	ldrh	r3, [r4, #12]
    40f6:	4a02      	ldr	r2, [pc, #8]	; (4100 <__sread+0x24>)
    40f8:	4013      	ands	r3, r2
    40fa:	81a3      	strh	r3, [r4, #12]
    40fc:	e7f9      	b.n	40f2 <__sread+0x16>
    40fe:	46c0      	nop			; (mov r8, r8)
    4100:	ffffefff 	.word	0xffffefff

00004104 <__swrite>:
    4104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4106:	001f      	movs	r7, r3
    4108:	898b      	ldrh	r3, [r1, #12]
    410a:	0005      	movs	r5, r0
    410c:	000c      	movs	r4, r1
    410e:	0016      	movs	r6, r2
    4110:	05db      	lsls	r3, r3, #23
    4112:	d505      	bpl.n	4120 <__swrite+0x1c>
    4114:	230e      	movs	r3, #14
    4116:	5ec9      	ldrsh	r1, [r1, r3]
    4118:	2200      	movs	r2, #0
    411a:	2302      	movs	r3, #2
    411c:	f000 f940 	bl	43a0 <_lseek_r>
    4120:	89a3      	ldrh	r3, [r4, #12]
    4122:	4a05      	ldr	r2, [pc, #20]	; (4138 <__swrite+0x34>)
    4124:	0028      	movs	r0, r5
    4126:	4013      	ands	r3, r2
    4128:	81a3      	strh	r3, [r4, #12]
    412a:	0032      	movs	r2, r6
    412c:	230e      	movs	r3, #14
    412e:	5ee1      	ldrsh	r1, [r4, r3]
    4130:	003b      	movs	r3, r7
    4132:	f000 f875 	bl	4220 <_write_r>
    4136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4138:	ffffefff 	.word	0xffffefff

0000413c <__sseek>:
    413c:	b570      	push	{r4, r5, r6, lr}
    413e:	000c      	movs	r4, r1
    4140:	250e      	movs	r5, #14
    4142:	5f49      	ldrsh	r1, [r1, r5]
    4144:	f000 f92c 	bl	43a0 <_lseek_r>
    4148:	89a3      	ldrh	r3, [r4, #12]
    414a:	1c42      	adds	r2, r0, #1
    414c:	d103      	bne.n	4156 <__sseek+0x1a>
    414e:	4a05      	ldr	r2, [pc, #20]	; (4164 <__sseek+0x28>)
    4150:	4013      	ands	r3, r2
    4152:	81a3      	strh	r3, [r4, #12]
    4154:	bd70      	pop	{r4, r5, r6, pc}
    4156:	2280      	movs	r2, #128	; 0x80
    4158:	0152      	lsls	r2, r2, #5
    415a:	4313      	orrs	r3, r2
    415c:	81a3      	strh	r3, [r4, #12]
    415e:	6560      	str	r0, [r4, #84]	; 0x54
    4160:	e7f8      	b.n	4154 <__sseek+0x18>
    4162:	46c0      	nop			; (mov r8, r8)
    4164:	ffffefff 	.word	0xffffefff

00004168 <__sclose>:
    4168:	b510      	push	{r4, lr}
    416a:	230e      	movs	r3, #14
    416c:	5ec9      	ldrsh	r1, [r1, r3]
    416e:	f000 f8e1 	bl	4334 <_close_r>
    4172:	bd10      	pop	{r4, pc}

00004174 <__swbuf_r>:
    4174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4176:	0005      	movs	r5, r0
    4178:	000e      	movs	r6, r1
    417a:	0014      	movs	r4, r2
    417c:	2800      	cmp	r0, #0
    417e:	d004      	beq.n	418a <__swbuf_r+0x16>
    4180:	6983      	ldr	r3, [r0, #24]
    4182:	2b00      	cmp	r3, #0
    4184:	d101      	bne.n	418a <__swbuf_r+0x16>
    4186:	f7ff fb17 	bl	37b8 <__sinit>
    418a:	4b22      	ldr	r3, [pc, #136]	; (4214 <__swbuf_r+0xa0>)
    418c:	429c      	cmp	r4, r3
    418e:	d12d      	bne.n	41ec <__swbuf_r+0x78>
    4190:	686c      	ldr	r4, [r5, #4]
    4192:	69a3      	ldr	r3, [r4, #24]
    4194:	60a3      	str	r3, [r4, #8]
    4196:	89a3      	ldrh	r3, [r4, #12]
    4198:	071b      	lsls	r3, r3, #28
    419a:	d531      	bpl.n	4200 <__swbuf_r+0x8c>
    419c:	6923      	ldr	r3, [r4, #16]
    419e:	2b00      	cmp	r3, #0
    41a0:	d02e      	beq.n	4200 <__swbuf_r+0x8c>
    41a2:	6823      	ldr	r3, [r4, #0]
    41a4:	6922      	ldr	r2, [r4, #16]
    41a6:	b2f7      	uxtb	r7, r6
    41a8:	1a98      	subs	r0, r3, r2
    41aa:	6963      	ldr	r3, [r4, #20]
    41ac:	b2f6      	uxtb	r6, r6
    41ae:	4298      	cmp	r0, r3
    41b0:	db05      	blt.n	41be <__swbuf_r+0x4a>
    41b2:	0021      	movs	r1, r4
    41b4:	0028      	movs	r0, r5
    41b6:	f7ff fa91 	bl	36dc <_fflush_r>
    41ba:	2800      	cmp	r0, #0
    41bc:	d126      	bne.n	420c <__swbuf_r+0x98>
    41be:	68a3      	ldr	r3, [r4, #8]
    41c0:	3001      	adds	r0, #1
    41c2:	3b01      	subs	r3, #1
    41c4:	60a3      	str	r3, [r4, #8]
    41c6:	6823      	ldr	r3, [r4, #0]
    41c8:	1c5a      	adds	r2, r3, #1
    41ca:	6022      	str	r2, [r4, #0]
    41cc:	701f      	strb	r7, [r3, #0]
    41ce:	6963      	ldr	r3, [r4, #20]
    41d0:	4298      	cmp	r0, r3
    41d2:	d004      	beq.n	41de <__swbuf_r+0x6a>
    41d4:	89a3      	ldrh	r3, [r4, #12]
    41d6:	07db      	lsls	r3, r3, #31
    41d8:	d51a      	bpl.n	4210 <__swbuf_r+0x9c>
    41da:	2e0a      	cmp	r6, #10
    41dc:	d118      	bne.n	4210 <__swbuf_r+0x9c>
    41de:	0021      	movs	r1, r4
    41e0:	0028      	movs	r0, r5
    41e2:	f7ff fa7b 	bl	36dc <_fflush_r>
    41e6:	2800      	cmp	r0, #0
    41e8:	d012      	beq.n	4210 <__swbuf_r+0x9c>
    41ea:	e00f      	b.n	420c <__swbuf_r+0x98>
    41ec:	4b0a      	ldr	r3, [pc, #40]	; (4218 <__swbuf_r+0xa4>)
    41ee:	429c      	cmp	r4, r3
    41f0:	d101      	bne.n	41f6 <__swbuf_r+0x82>
    41f2:	68ac      	ldr	r4, [r5, #8]
    41f4:	e7cd      	b.n	4192 <__swbuf_r+0x1e>
    41f6:	4b09      	ldr	r3, [pc, #36]	; (421c <__swbuf_r+0xa8>)
    41f8:	429c      	cmp	r4, r3
    41fa:	d1ca      	bne.n	4192 <__swbuf_r+0x1e>
    41fc:	68ec      	ldr	r4, [r5, #12]
    41fe:	e7c8      	b.n	4192 <__swbuf_r+0x1e>
    4200:	0021      	movs	r1, r4
    4202:	0028      	movs	r0, r5
    4204:	f000 f820 	bl	4248 <__swsetup_r>
    4208:	2800      	cmp	r0, #0
    420a:	d0ca      	beq.n	41a2 <__swbuf_r+0x2e>
    420c:	2601      	movs	r6, #1
    420e:	4276      	negs	r6, r6
    4210:	0030      	movs	r0, r6
    4212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4214:	000065a0 	.word	0x000065a0
    4218:	000065c0 	.word	0x000065c0
    421c:	00006580 	.word	0x00006580

00004220 <_write_r>:
    4220:	b570      	push	{r4, r5, r6, lr}
    4222:	0005      	movs	r5, r0
    4224:	0008      	movs	r0, r1
    4226:	0011      	movs	r1, r2
    4228:	2200      	movs	r2, #0
    422a:	4c06      	ldr	r4, [pc, #24]	; (4244 <_write_r+0x24>)
    422c:	6022      	str	r2, [r4, #0]
    422e:	001a      	movs	r2, r3
    4230:	f7fd fd30 	bl	1c94 <_write>
    4234:	1c43      	adds	r3, r0, #1
    4236:	d103      	bne.n	4240 <_write_r+0x20>
    4238:	6823      	ldr	r3, [r4, #0]
    423a:	2b00      	cmp	r3, #0
    423c:	d000      	beq.n	4240 <_write_r+0x20>
    423e:	602b      	str	r3, [r5, #0]
    4240:	bd70      	pop	{r4, r5, r6, pc}
    4242:	46c0      	nop			; (mov r8, r8)
    4244:	20000428 	.word	0x20000428

00004248 <__swsetup_r>:
    4248:	4b36      	ldr	r3, [pc, #216]	; (4324 <__swsetup_r+0xdc>)
    424a:	b570      	push	{r4, r5, r6, lr}
    424c:	681d      	ldr	r5, [r3, #0]
    424e:	0006      	movs	r6, r0
    4250:	000c      	movs	r4, r1
    4252:	2d00      	cmp	r5, #0
    4254:	d005      	beq.n	4262 <__swsetup_r+0x1a>
    4256:	69ab      	ldr	r3, [r5, #24]
    4258:	2b00      	cmp	r3, #0
    425a:	d102      	bne.n	4262 <__swsetup_r+0x1a>
    425c:	0028      	movs	r0, r5
    425e:	f7ff faab 	bl	37b8 <__sinit>
    4262:	4b31      	ldr	r3, [pc, #196]	; (4328 <__swsetup_r+0xe0>)
    4264:	429c      	cmp	r4, r3
    4266:	d10f      	bne.n	4288 <__swsetup_r+0x40>
    4268:	686c      	ldr	r4, [r5, #4]
    426a:	230c      	movs	r3, #12
    426c:	5ee2      	ldrsh	r2, [r4, r3]
    426e:	b293      	uxth	r3, r2
    4270:	0719      	lsls	r1, r3, #28
    4272:	d42d      	bmi.n	42d0 <__swsetup_r+0x88>
    4274:	06d9      	lsls	r1, r3, #27
    4276:	d411      	bmi.n	429c <__swsetup_r+0x54>
    4278:	2309      	movs	r3, #9
    427a:	2001      	movs	r0, #1
    427c:	6033      	str	r3, [r6, #0]
    427e:	3337      	adds	r3, #55	; 0x37
    4280:	4313      	orrs	r3, r2
    4282:	81a3      	strh	r3, [r4, #12]
    4284:	4240      	negs	r0, r0
    4286:	bd70      	pop	{r4, r5, r6, pc}
    4288:	4b28      	ldr	r3, [pc, #160]	; (432c <__swsetup_r+0xe4>)
    428a:	429c      	cmp	r4, r3
    428c:	d101      	bne.n	4292 <__swsetup_r+0x4a>
    428e:	68ac      	ldr	r4, [r5, #8]
    4290:	e7eb      	b.n	426a <__swsetup_r+0x22>
    4292:	4b27      	ldr	r3, [pc, #156]	; (4330 <__swsetup_r+0xe8>)
    4294:	429c      	cmp	r4, r3
    4296:	d1e8      	bne.n	426a <__swsetup_r+0x22>
    4298:	68ec      	ldr	r4, [r5, #12]
    429a:	e7e6      	b.n	426a <__swsetup_r+0x22>
    429c:	075b      	lsls	r3, r3, #29
    429e:	d513      	bpl.n	42c8 <__swsetup_r+0x80>
    42a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
    42a2:	2900      	cmp	r1, #0
    42a4:	d008      	beq.n	42b8 <__swsetup_r+0x70>
    42a6:	0023      	movs	r3, r4
    42a8:	3344      	adds	r3, #68	; 0x44
    42aa:	4299      	cmp	r1, r3
    42ac:	d002      	beq.n	42b4 <__swsetup_r+0x6c>
    42ae:	0030      	movs	r0, r6
    42b0:	f7ff fb8e 	bl	39d0 <_free_r>
    42b4:	2300      	movs	r3, #0
    42b6:	6363      	str	r3, [r4, #52]	; 0x34
    42b8:	2224      	movs	r2, #36	; 0x24
    42ba:	89a3      	ldrh	r3, [r4, #12]
    42bc:	4393      	bics	r3, r2
    42be:	81a3      	strh	r3, [r4, #12]
    42c0:	2300      	movs	r3, #0
    42c2:	6063      	str	r3, [r4, #4]
    42c4:	6923      	ldr	r3, [r4, #16]
    42c6:	6023      	str	r3, [r4, #0]
    42c8:	2308      	movs	r3, #8
    42ca:	89a2      	ldrh	r2, [r4, #12]
    42cc:	4313      	orrs	r3, r2
    42ce:	81a3      	strh	r3, [r4, #12]
    42d0:	6923      	ldr	r3, [r4, #16]
    42d2:	2b00      	cmp	r3, #0
    42d4:	d10b      	bne.n	42ee <__swsetup_r+0xa6>
    42d6:	21a0      	movs	r1, #160	; 0xa0
    42d8:	2280      	movs	r2, #128	; 0x80
    42da:	89a3      	ldrh	r3, [r4, #12]
    42dc:	0089      	lsls	r1, r1, #2
    42de:	0092      	lsls	r2, r2, #2
    42e0:	400b      	ands	r3, r1
    42e2:	4293      	cmp	r3, r2
    42e4:	d003      	beq.n	42ee <__swsetup_r+0xa6>
    42e6:	0021      	movs	r1, r4
    42e8:	0030      	movs	r0, r6
    42ea:	f7ff fb23 	bl	3934 <__smakebuf_r>
    42ee:	2301      	movs	r3, #1
    42f0:	89a2      	ldrh	r2, [r4, #12]
    42f2:	4013      	ands	r3, r2
    42f4:	d011      	beq.n	431a <__swsetup_r+0xd2>
    42f6:	2300      	movs	r3, #0
    42f8:	60a3      	str	r3, [r4, #8]
    42fa:	6963      	ldr	r3, [r4, #20]
    42fc:	425b      	negs	r3, r3
    42fe:	61a3      	str	r3, [r4, #24]
    4300:	2000      	movs	r0, #0
    4302:	6923      	ldr	r3, [r4, #16]
    4304:	4283      	cmp	r3, r0
    4306:	d1be      	bne.n	4286 <__swsetup_r+0x3e>
    4308:	230c      	movs	r3, #12
    430a:	5ee2      	ldrsh	r2, [r4, r3]
    430c:	0613      	lsls	r3, r2, #24
    430e:	d5ba      	bpl.n	4286 <__swsetup_r+0x3e>
    4310:	2340      	movs	r3, #64	; 0x40
    4312:	4313      	orrs	r3, r2
    4314:	81a3      	strh	r3, [r4, #12]
    4316:	3801      	subs	r0, #1
    4318:	e7b5      	b.n	4286 <__swsetup_r+0x3e>
    431a:	0792      	lsls	r2, r2, #30
    431c:	d400      	bmi.n	4320 <__swsetup_r+0xd8>
    431e:	6963      	ldr	r3, [r4, #20]
    4320:	60a3      	str	r3, [r4, #8]
    4322:	e7ed      	b.n	4300 <__swsetup_r+0xb8>
    4324:	20000158 	.word	0x20000158
    4328:	000065a0 	.word	0x000065a0
    432c:	000065c0 	.word	0x000065c0
    4330:	00006580 	.word	0x00006580

00004334 <_close_r>:
    4334:	2300      	movs	r3, #0
    4336:	b570      	push	{r4, r5, r6, lr}
    4338:	4c06      	ldr	r4, [pc, #24]	; (4354 <_close_r+0x20>)
    433a:	0005      	movs	r5, r0
    433c:	0008      	movs	r0, r1
    433e:	6023      	str	r3, [r4, #0]
    4340:	f7fd fce2 	bl	1d08 <_close>
    4344:	1c43      	adds	r3, r0, #1
    4346:	d103      	bne.n	4350 <_close_r+0x1c>
    4348:	6823      	ldr	r3, [r4, #0]
    434a:	2b00      	cmp	r3, #0
    434c:	d000      	beq.n	4350 <_close_r+0x1c>
    434e:	602b      	str	r3, [r5, #0]
    4350:	bd70      	pop	{r4, r5, r6, pc}
    4352:	46c0      	nop			; (mov r8, r8)
    4354:	20000428 	.word	0x20000428

00004358 <_fstat_r>:
    4358:	2300      	movs	r3, #0
    435a:	b570      	push	{r4, r5, r6, lr}
    435c:	4c06      	ldr	r4, [pc, #24]	; (4378 <_fstat_r+0x20>)
    435e:	0005      	movs	r5, r0
    4360:	0008      	movs	r0, r1
    4362:	0011      	movs	r1, r2
    4364:	6023      	str	r3, [r4, #0]
    4366:	f7fd fcd2 	bl	1d0e <_fstat>
    436a:	1c43      	adds	r3, r0, #1
    436c:	d103      	bne.n	4376 <_fstat_r+0x1e>
    436e:	6823      	ldr	r3, [r4, #0]
    4370:	2b00      	cmp	r3, #0
    4372:	d000      	beq.n	4376 <_fstat_r+0x1e>
    4374:	602b      	str	r3, [r5, #0]
    4376:	bd70      	pop	{r4, r5, r6, pc}
    4378:	20000428 	.word	0x20000428

0000437c <_isatty_r>:
    437c:	2300      	movs	r3, #0
    437e:	b570      	push	{r4, r5, r6, lr}
    4380:	4c06      	ldr	r4, [pc, #24]	; (439c <_isatty_r+0x20>)
    4382:	0005      	movs	r5, r0
    4384:	0008      	movs	r0, r1
    4386:	6023      	str	r3, [r4, #0]
    4388:	f7fd fcc6 	bl	1d18 <_isatty>
    438c:	1c43      	adds	r3, r0, #1
    438e:	d103      	bne.n	4398 <_isatty_r+0x1c>
    4390:	6823      	ldr	r3, [r4, #0]
    4392:	2b00      	cmp	r3, #0
    4394:	d000      	beq.n	4398 <_isatty_r+0x1c>
    4396:	602b      	str	r3, [r5, #0]
    4398:	bd70      	pop	{r4, r5, r6, pc}
    439a:	46c0      	nop			; (mov r8, r8)
    439c:	20000428 	.word	0x20000428

000043a0 <_lseek_r>:
    43a0:	b570      	push	{r4, r5, r6, lr}
    43a2:	0005      	movs	r5, r0
    43a4:	0008      	movs	r0, r1
    43a6:	0011      	movs	r1, r2
    43a8:	2200      	movs	r2, #0
    43aa:	4c06      	ldr	r4, [pc, #24]	; (43c4 <_lseek_r+0x24>)
    43ac:	6022      	str	r2, [r4, #0]
    43ae:	001a      	movs	r2, r3
    43b0:	f7fd fcb4 	bl	1d1c <_lseek>
    43b4:	1c43      	adds	r3, r0, #1
    43b6:	d103      	bne.n	43c0 <_lseek_r+0x20>
    43b8:	6823      	ldr	r3, [r4, #0]
    43ba:	2b00      	cmp	r3, #0
    43bc:	d000      	beq.n	43c0 <_lseek_r+0x20>
    43be:	602b      	str	r3, [r5, #0]
    43c0:	bd70      	pop	{r4, r5, r6, pc}
    43c2:	46c0      	nop			; (mov r8, r8)
    43c4:	20000428 	.word	0x20000428

000043c8 <memchr>:
    43c8:	b2c9      	uxtb	r1, r1
    43ca:	1882      	adds	r2, r0, r2
    43cc:	4290      	cmp	r0, r2
    43ce:	d101      	bne.n	43d4 <memchr+0xc>
    43d0:	2000      	movs	r0, #0
    43d2:	4770      	bx	lr
    43d4:	7803      	ldrb	r3, [r0, #0]
    43d6:	428b      	cmp	r3, r1
    43d8:	d0fb      	beq.n	43d2 <memchr+0xa>
    43da:	3001      	adds	r0, #1
    43dc:	e7f6      	b.n	43cc <memchr+0x4>

000043de <__malloc_lock>:
    43de:	4770      	bx	lr

000043e0 <__malloc_unlock>:
    43e0:	4770      	bx	lr
	...

000043e4 <_read_r>:
    43e4:	b570      	push	{r4, r5, r6, lr}
    43e6:	0005      	movs	r5, r0
    43e8:	0008      	movs	r0, r1
    43ea:	0011      	movs	r1, r2
    43ec:	2200      	movs	r2, #0
    43ee:	4c06      	ldr	r4, [pc, #24]	; (4408 <_read_r+0x24>)
    43f0:	6022      	str	r2, [r4, #0]
    43f2:	001a      	movs	r2, r3
    43f4:	f7fd fc2c 	bl	1c50 <_read>
    43f8:	1c43      	adds	r3, r0, #1
    43fa:	d103      	bne.n	4404 <_read_r+0x20>
    43fc:	6823      	ldr	r3, [r4, #0]
    43fe:	2b00      	cmp	r3, #0
    4400:	d000      	beq.n	4404 <_read_r+0x20>
    4402:	602b      	str	r3, [r5, #0]
    4404:	bd70      	pop	{r4, r5, r6, pc}
    4406:	46c0      	nop			; (mov r8, r8)
    4408:	20000428 	.word	0x20000428
    440c:	000a000a 	.word	0x000a000a
    4410:	00140014 	.word	0x00140014
    4414:	00000014 	.word	0x00000014
    4418:	000a017c 	.word	0x000a017c
    441c:	000a017c 	.word	0x000a017c
    4420:	00140186 	.word	0x00140186
    4424:	00140000 	.word	0x00140000
    4428:	0122000a 	.word	0x0122000a
    442c:	00140186 	.word	0x00140186
    4430:	01220190 	.word	0x01220190
    4434:	0122000a 	.word	0x0122000a
    4438:	012c0014 	.word	0x012c0014
    443c:	0122017c 	.word	0x0122017c
    4440:	012c0186 	.word	0x012c0186
    4444:	012c0014 	.word	0x012c0014
    4448:	0136017c 	.word	0x0136017c
    444c:	001e0000 	.word	0x001e0000
    4450:	00280032 	.word	0x00280032
    4454:	00320000 	.word	0x00320000
    4458:	003c0032 	.word	0x003c0032
    445c:	001e0050 	.word	0x001e0050
    4460:	00280118 	.word	0x00280118
    4464:	00280046 	.word	0x00280046
    4468:	00be0050 	.word	0x00be0050
    446c:	00be0050 	.word	0x00be0050
    4470:	00c80118 	.word	0x00c80118
    4474:	00280118 	.word	0x00280118
    4478:	00be0122 	.word	0x00be0122
    447c:	00460000 	.word	0x00460000
    4480:	00500032 	.word	0x00500032
    4484:	005a0000 	.word	0x005a0000
    4488:	00640032 	.word	0x00640032
    448c:	006e0000 	.word	0x006e0000
    4490:	00780032 	.word	0x00780032
    4494:	00820000 	.word	0x00820000
    4498:	008c0032 	.word	0x008c0032
    449c:	00960000 	.word	0x00960000
    44a0:	00a00032 	.word	0x00a00032
    44a4:	00aa0000 	.word	0x00aa0000
    44a8:	00b40032 	.word	0x00b40032
    44ac:	00be0000 	.word	0x00be0000
    44b0:	00c80032 	.word	0x00c80032
    44b4:	00c8012c 	.word	0x00c8012c
    44b8:	00d20172 	.word	0x00d20172
    44bc:	00dc001e 	.word	0x00dc001e
    44c0:	00e60172 	.word	0x00e60172
    44c4:	00f0001e 	.word	0x00f0001e
    44c8:	00fa0172 	.word	0x00fa0172
    44cc:	0104001e 	.word	0x0104001e
    44d0:	010e0172 	.word	0x010e0172
    44d4:	0118005a 	.word	0x0118005a
    44d8:	0122012c 	.word	0x0122012c
    44dc:	82be50b4 	.word	0x82be50b4
    44e0:	8cbe82aa 	.word	0x8cbe82aa
    44e4:	64963c8c 	.word	0x64963c8c
    44e8:	64dc3cd2 	.word	0x64dc3cd2
    44ec:	a08c9682 	.word	0xa08c9682
    44f0:	aadca08c 	.word	0xaadca08c
    44f4:	a0e696dc 	.word	0xa0e696dc
    44f8:	50f03c78 	.word	0x50f03c78
    44fc:	5a78466e 	.word	0x5a78466e
    4500:	aaaa3c96 	.word	0xaaaa3c96
    4504:	a0dc3cc8 	.word	0xa0dc3cc8
    4508:	aae6a0d2 	.word	0xaae6a0d2
    450c:	78696e55 	.word	0x78696e55
    4510:	6f706520 	.word	0x6f706520
    4514:	6d206863 	.word	0x6d206863
    4518:	73756e69 	.word	0x73756e69
    451c:	46783020 	.word	0x46783020
    4520:	61642046 	.word	0x61642046
    4524:	00007379 	.word	0x00007379
    4528:	355e3331 	.word	0x355e3331
    452c:	31202b20 	.word	0x31202b20
    4530:	20355e36 	.word	0x20355e36
    4534:	3731203d 	.word	0x3731203d
    4538:	0000355e 	.word	0x0000355e
    453c:	69746552 	.word	0x69746552
    4540:	616c7563 	.word	0x616c7563
    4544:	676e6974 	.word	0x676e6974
    4548:	6c705320 	.word	0x6c705320
    454c:	73656e69 	.word	0x73656e69
    4550:	00000000 	.word	0x00000000
    4554:	6c6f6956 	.word	0x6c6f6956
    4558:	65636e65 	.word	0x65636e65
    455c:	726f7720 	.word	0x726f7720
    4560:	0000736b 	.word	0x0000736b
    4564:	73626154 	.word	0x73626154
    4568:	00000021 	.word	0x00000021
    456c:	6c6c694b 	.word	0x6c6c694b
    4570:	6c694220 	.word	0x6c694220
    4574:	6e6f696c 	.word	0x6e6f696c
    4578:	65726961 	.word	0x65726961
    457c:	61282073 	.word	0x61282073
    4580:	5420646e 	.word	0x5420646e
    4584:	6c6c6972 	.word	0x6c6c6972
    4588:	616e6f69 	.word	0x616e6f69
    458c:	29657269 	.word	0x29657269
    4590:	00000000 	.word	0x00000000
    4594:	65746e49 	.word	0x65746e49
    4598:	74736572 	.word	0x74736572
    459c:	206e6920 	.word	0x206e6920
    45a0:	68636574 	.word	0x68636574
    45a4:	6f6c6f6e 	.word	0x6f6c6f6e
    45a8:	69207967 	.word	0x69207967
    45ac:	6f6e2073 	.word	0x6f6e2073
    45b0:	20612074 	.word	0x20612074
    45b4:	73726570 	.word	0x73726570
    45b8:	6c616e6f 	.word	0x6c616e6f
    45bc:	00797469 	.word	0x00797469
    45c0:	50203031 	.word	0x50203031
    45c4:	544e4952 	.word	0x544e4952
    45c8:	52484320 	.word	0x52484320
    45cc:	30322824 	.word	0x30322824
    45d0:	2b352e35 	.word	0x2b352e35
    45d4:	28444e52 	.word	0x28444e52
    45d8:	3b292931 	.word	0x3b292931
    45dc:	47203a20 	.word	0x47203a20
    45e0:	204f544f 	.word	0x204f544f
    45e4:	00003031 	.word	0x00003031
    45e8:	67206f4e 	.word	0x67206f4e
    45ec:	2e73646f 	.word	0x2e73646f
    45f0:	206f4e20 	.word	0x206f4e20
    45f4:	7473616d 	.word	0x7473616d
    45f8:	2e737265 	.word	0x2e737265
    45fc:	206f4e20 	.word	0x206f4e20
    4600:	65747865 	.word	0x65747865
    4604:	6c616e72 	.word	0x6c616e72
    4608:	62696c20 	.word	0x62696c20
    460c:	69726172 	.word	0x69726172
    4610:	002e7365 	.word	0x002e7365
    4614:	63617053 	.word	0x63617053
    4618:	00217365 	.word	0x00217365
    461c:	6e616954 	.word	0x6e616954
    4620:	656d6e61 	.word	0x656d6e61
    4624:	7153206e 	.word	0x7153206e
    4628:	65726175 	.word	0x65726175
    462c:	38393120 	.word	0x38393120
    4630:	00000039 	.word	0x00000039
    4634:	72656d41 	.word	0x72656d41
    4638:	20616369 	.word	0x20616369
    463c:	20736177 	.word	0x20736177
    4640:	6e756f66 	.word	0x6e756f66
    4644:	20646564 	.word	0x20646564
    4648:	73206e6f 	.word	0x73206e6f
    464c:	6576616c 	.word	0x6576616c
    4650:	00007972 	.word	0x00007972
    4654:	72656854 	.word	0x72656854
    4658:	73692065 	.word	0x73692065
    465c:	6c6e6f20 	.word	0x6c6e6f20
    4660:	61632079 	.word	0x61632079
    4664:	61746970 	.word	0x61746970
    4668:	6e61206c 	.word	0x6e61206c
    466c:	616c2064 	.word	0x616c2064
    4670:	00726f62 	.word	0x00726f62
    4674:	6f636e45 	.word	0x6f636e45
    4678:	67617275 	.word	0x67617275
    467c:	79732065 	.word	0x79732065
    4680:	74656d6d 	.word	0x74656d6d
    4684:	20636972 	.word	0x20636972
    4688:	73616c63 	.word	0x73616c63
    468c:	61772073 	.word	0x61772073
    4690:	72616672 	.word	0x72616672
    4694:	00000065 	.word	0x00000065
    4698:	52554324 	.word	0x52554324
    469c:	544e4552 	.word	0x544e4552
    46a0:	4d454d5f 	.word	0x4d454d5f
    46a4:	00000045 	.word	0x00000045
    46a8:	694e2041 	.word	0x694e2041
    46ac:	54206563 	.word	0x54206563
    46b0:	00005954 	.word	0x00005954
    46b4:	6e617254 	.word	0x6e617254
    46b8:	69722073 	.word	0x69722073
    46bc:	73746867 	.word	0x73746867
    46c0:	65726120 	.word	0x65726120
    46c4:	6d756820 	.word	0x6d756820
    46c8:	72206e61 	.word	0x72206e61
    46cc:	74686769 	.word	0x74686769
    46d0:	00000073 	.word	0x00000073
    46d4:	3d202069 	.word	0x3d202069
    46d8:	35783020 	.word	0x35783020
    46dc:	35373366 	.word	0x35373366
    46e0:	20666439 	.word	0x20666439
    46e4:	2028202d 	.word	0x2028202d
    46e8:	3e3e2069 	.word	0x3e3e2069
    46ec:	29203120 	.word	0x29203120
    46f0:	0000003b 	.word	0x0000003b
    46f4:	42414341 	.word	0x42414341
    46f8:	00000000 	.word	0x00000000
    46fc:	63666544 	.word	0x63666544
    4700:	73276e6f 	.word	0x73276e6f
    4704:	6e616320 	.word	0x6e616320
    4708:	656c6563 	.word	0x656c6563
    470c:	00002e64 	.word	0x00002e64
    4710:	73746152 	.word	0x73746152
    4714:	7473656e 	.word	0x7473656e
    4718:	6f4e203a 	.word	0x6f4e203a
    471c:	6e696874 	.word	0x6e696874
    4720:	6f542067 	.word	0x6f542067
    4724:	216f4420 	.word	0x216f4420
    4728:	00000000 	.word	0x00000000
    472c:	68207449 	.word	0x68207449
    4730:	36207361 	.word	0x36207361
    4734:	656b2039 	.word	0x656b2039
    4738:	002e7379 	.word	0x002e7379
    473c:	61636542 	.word	0x61636542
    4740:	20657375 	.word	0x20657375
    4744:	342d5456 	.word	0x342d5456
    4748:	77203032 	.word	0x77203032
    474c:	61207361 	.word	0x61207361
    4750:	6165726c 	.word	0x6165726c
    4754:	74207964 	.word	0x74207964
    4758:	6e656b61 	.word	0x6e656b61
    475c:	00000000 	.word	0x00000000
    4760:	706d6f43 	.word	0x706d6f43
    4764:	73736572 	.word	0x73736572
    4768:	206e6f69 	.word	0x206e6f69
    476c:	6f676c61 	.word	0x6f676c61
    4770:	68746972 	.word	0x68746972
    4774:	6162206d 	.word	0x6162206d
    4778:	20646573 	.word	0x20646573
    477c:	42206e6f 	.word	0x42206e6f
    4780:	28205042 	.word	0x28205042
    4784:	37393931 	.word	0x37393931
    4788:	00000029 	.word	0x00000029
    478c:	20656854 	.word	0x20656854
    4790:	72756f73 	.word	0x72756f73
    4794:	6f206563 	.word	0x6f206563
    4798:	68742066 	.word	0x68742066
    479c:	694d2065 	.word	0x694d2065
    47a0:	73697373 	.word	0x73697373
    47a4:	70706973 	.word	0x70706973
    47a8:	69722069 	.word	0x69722069
    47ac:	20726576 	.word	0x20726576
    47b0:	69207369 	.word	0x69207369
    47b4:	6550206e 	.word	0x6550206e
    47b8:	79736e6e 	.word	0x79736e6e
    47bc:	6e61766c 	.word	0x6e61766c
    47c0:	002e6169 	.word	0x002e6169
    47c4:	6566664f 	.word	0x6566664f
    47c8:	7669736e 	.word	0x7669736e
    47cc:	61682065 	.word	0x61682065
    47d0:	61776472 	.word	0x61776472
    47d4:	00006572 	.word	0x00006572
    47d8:	6c6c6f46 	.word	0x6c6c6f46
    47dc:	5720776f 	.word	0x5720776f
    47e0:	646c726f 	.word	0x646c726f
    47e4:	676f5020 	.word	0x676f5020
    47e8:	64654620 	.word	0x64654620
    47ec:	74617265 	.word	0x74617265
    47f0:	206e6f69 	.word	0x206e6f69
    47f4:	40202020 	.word	0x40202020
    47f8:	6c726f57 	.word	0x6c726f57
    47fc:	676f5064 	.word	0x676f5064
    4800:	00000000 	.word	0x00000000
    4804:	6d6d7544 	.word	0x6d6d7544
    4808:	68742079 	.word	0x68742079
    480c:	20636369 	.word	0x20636369
    4810:	65696c63 	.word	0x65696c63
    4814:	0000746e 	.word	0x0000746e
    4818:	694e2041 	.word	0x694e2041
    481c:	54206563 	.word	0x54206563
    4820:	202e5954 	.word	0x202e5954
    4824:	4f206e41 	.word	0x4f206e41
    4828:	6f43204b 	.word	0x6f43204b
    482c:	7475706d 	.word	0x7475706d
    4830:	002e7265 	.word	0x002e7265
    4834:	41632049 	.word	0x41632049
    4838:	704f206e 	.word	0x704f206e
    483c:	41206e45 	.word	0x41206e45
    4840:	436f4c20 	.word	0x436f4c20
    4844:	6957206b 	.word	0x6957206b
    4848:	41206854 	.word	0x41206854
    484c:	644f7320 	.word	0x644f7320
    4850:	41632041 	.word	0x41632041
    4854:	0000006e 	.word	0x0000006e
    4858:	696c6f53 	.word	0x696c6f53
    485c:	69726164 	.word	0x69726164
    4860:	69207974 	.word	0x69207974
    4864:	6f6e2073 	.word	0x6f6e2073
    4868:	20612074 	.word	0x20612074
    486c:	2077656e 	.word	0x2077656e
    4870:	6d617266 	.word	0x6d617266
    4874:	726f7765 	.word	0x726f7765
    4878:	0000006b 	.word	0x0000006b
    487c:	61657242 	.word	0x61657242
    4880:	616f6264 	.word	0x616f6264
    4884:	6e696472 	.word	0x6e696472
    4888:	73492067 	.word	0x73492067
    488c:	746f4e20 	.word	0x746f4e20
    4890:	43204120 	.word	0x43204120
    4894:	656d6972 	.word	0x656d6972
    4898:	00000000 	.word	0x00000000
    489c:	2066664f 	.word	0x2066664f
    48a0:	6f207962 	.word	0x6f207962
    48a4:	6520656e 	.word	0x6520656e
    48a8:	726f7272 	.word	0x726f7272
    48ac:	72612073 	.word	0x72612073
    48b0:	6f632065 	.word	0x6f632065
    48b4:	6e6f6d6d 	.word	0x6e6f6d6d
    48b8:	00000000 	.word	0x00000000
    48bc:	000006e2 	.word	0x000006e2
    48c0:	0000092e 	.word	0x0000092e
    48c4:	0000092e 	.word	0x0000092e
    48c8:	0000092e 	.word	0x0000092e
    48cc:	0000092e 	.word	0x0000092e
    48d0:	0000092e 	.word	0x0000092e
    48d4:	0000092e 	.word	0x0000092e
    48d8:	0000092e 	.word	0x0000092e
    48dc:	0000092e 	.word	0x0000092e
    48e0:	0000092e 	.word	0x0000092e
    48e4:	0000092e 	.word	0x0000092e
    48e8:	0000092e 	.word	0x0000092e
    48ec:	0000092e 	.word	0x0000092e
    48f0:	0000092e 	.word	0x0000092e
    48f4:	0000092e 	.word	0x0000092e
    48f8:	0000092e 	.word	0x0000092e
    48fc:	000006ca 	.word	0x000006ca
    4900:	0000092e 	.word	0x0000092e
    4904:	0000092e 	.word	0x0000092e
    4908:	0000092e 	.word	0x0000092e
    490c:	0000092e 	.word	0x0000092e
    4910:	0000092e 	.word	0x0000092e
    4914:	0000092e 	.word	0x0000092e
    4918:	0000092e 	.word	0x0000092e
    491c:	0000092e 	.word	0x0000092e
    4920:	0000092e 	.word	0x0000092e
    4924:	0000092e 	.word	0x0000092e
    4928:	0000092e 	.word	0x0000092e
    492c:	0000092e 	.word	0x0000092e
    4930:	0000092e 	.word	0x0000092e
    4934:	0000092e 	.word	0x0000092e
    4938:	0000092e 	.word	0x0000092e
    493c:	000006da 	.word	0x000006da
    4940:	0000092e 	.word	0x0000092e
    4944:	0000092e 	.word	0x0000092e
    4948:	0000092e 	.word	0x0000092e
    494c:	0000092e 	.word	0x0000092e
    4950:	0000092e 	.word	0x0000092e
    4954:	0000092e 	.word	0x0000092e
    4958:	0000092e 	.word	0x0000092e
    495c:	0000092e 	.word	0x0000092e
    4960:	0000092e 	.word	0x0000092e
    4964:	0000092e 	.word	0x0000092e
    4968:	0000092e 	.word	0x0000092e
    496c:	0000092e 	.word	0x0000092e
    4970:	0000092e 	.word	0x0000092e
    4974:	0000092e 	.word	0x0000092e
    4978:	0000092e 	.word	0x0000092e
    497c:	000006d2 	.word	0x000006d2
    4980:	000006ea 	.word	0x000006ea
    4984:	000006b2 	.word	0x000006b2
    4988:	000006c2 	.word	0x000006c2
    498c:	000006ba 	.word	0x000006ba
    4990:	00000002 	.word	0x00000002
    4994:	00000003 	.word	0x00000003
    4998:	00000028 	.word	0x00000028
    499c:	00000029 	.word	0x00000029
    49a0:	00000004 	.word	0x00000004
    49a4:	00000005 	.word	0x00000005
    49a8:	00000006 	.word	0x00000006
    49ac:	00000007 	.word	0x00000007
    49b0:	00000020 	.word	0x00000020
    49b4:	00000021 	.word	0x00000021
    49b8:	00000022 	.word	0x00000022
    49bc:	00000023 	.word	0x00000023
    49c0:	00000024 	.word	0x00000024
    49c4:	00000025 	.word	0x00000025
    49c8:	00000026 	.word	0x00000026
    49cc:	00000027 	.word	0x00000027
    49d0:	00000008 	.word	0x00000008
    49d4:	00000009 	.word	0x00000009
    49d8:	0000000a 	.word	0x0000000a
    49dc:	0000000b 	.word	0x0000000b
    49e0:	42000800 	.word	0x42000800
    49e4:	42000c00 	.word	0x42000c00
    49e8:	42001000 	.word	0x42001000
    49ec:	42001400 	.word	0x42001400
    49f0:	42001800 	.word	0x42001800
    49f4:	42001c00 	.word	0x42001c00
    49f8:	000013de 	.word	0x000013de
    49fc:	000013da 	.word	0x000013da
    4a00:	000013da 	.word	0x000013da
    4a04:	00001440 	.word	0x00001440
    4a08:	00001440 	.word	0x00001440
    4a0c:	000013f2 	.word	0x000013f2
    4a10:	000013e4 	.word	0x000013e4
    4a14:	000013f8 	.word	0x000013f8
    4a18:	0000142e 	.word	0x0000142e
    4a1c:	00001600 	.word	0x00001600
    4a20:	000015e0 	.word	0x000015e0
    4a24:	000015e0 	.word	0x000015e0
    4a28:	0000166c 	.word	0x0000166c
    4a2c:	000015f2 	.word	0x000015f2
    4a30:	0000160e 	.word	0x0000160e
    4a34:	000015e4 	.word	0x000015e4
    4a38:	0000161c 	.word	0x0000161c
    4a3c:	0000165c 	.word	0x0000165c
	...
    4d84:	30ff0300 	.word	0x30ff0300
    4d88:	0000f33f 	.word	0x0000f33f
	...
    4d98:	00f00300 	.word	0x00f00300
    4d9c:	0000003f 	.word	0x0000003f
    4da0:	03000000 	.word	0x03000000
    4da4:	003f00f0 	.word	0x003f00f0
    4da8:	00000000 	.word	0x00000000
    4dac:	00330000 	.word	0x00330000
    4db0:	ff033003 	.word	0xff033003
    4db4:	00ff3ff0 	.word	0x00ff3ff0
    4db8:	30030033 	.word	0x30030033
    4dbc:	3ff0ff03 	.word	0x3ff0ff03
    4dc0:	003300ff 	.word	0x003300ff
    4dc4:	00000000 	.word	0x00000000
    4dc8:	00300000 	.word	0x00300000
    4dcc:	cc0cc0cc 	.word	0xcc0cc0cc
    4dd0:	3ff0ff03 	.word	0x3ff0ff03
    4dd4:	c0cc00ff 	.word	0xc0cc00ff
    4dd8:	3000cc0c 	.word	0x3000cc0c
    4ddc:	00000000 	.word	0x00000000
    4de0:	0e000000 	.word	0x0e000000
    4de4:	0e308303 	.word	0x0e308303
    4de8:	0038001c 	.word	0x0038001c
    4dec:	e300e000 	.word	0xe300e000
    4df0:	010e3380 	.word	0x010e3380
    4df4:	000030c0 	.word	0x000030c0
    4df8:	00300300 	.word	0x00300300
    4dfc:	c0000033 	.word	0xc0000033
    4e00:	0c03330f 	.word	0x0c03330f
    4e04:	03c33030 	.word	0x03c33030
    4e08:	c330300c 	.word	0xc330300c
    4e0c:	00c0f300 	.word	0x00c0f300
	...
    4e18:	03003000 	.word	0x03003000
    4e1c:	000f00c0 	.word	0x000f00c0
    4e20:	00003000 	.word	0x00003000
	...
    4e30:	03300000 	.word	0x03300000
    4e34:	03c0c000 	.word	0x03c0c000
    4e38:	003f00f0 	.word	0x003f00f0
	...
    4e48:	03003f00 	.word	0x03003f00
    4e4c:	c0c000f0 	.word	0xc0c000f0
    4e50:	00000330 	.word	0x00000330
	...
    4e60:	c0cc00c0 	.word	0xc0cc00c0
    4e64:	0c00f003 	.word	0x0c00f003
    4e68:	00c00000 	.word	0x00c00000
    4e6c:	cc0c003f 	.word	0xcc0c003f
    4e70:	00000c00 	.word	0x00000c00
    4e74:	000c0000 	.word	0x000c0000
    4e78:	0c00c000 	.word	0x0c00c000
    4e7c:	00c00000 	.word	0x00c00000
    4e80:	c000c0ff 	.word	0xc000c0ff
    4e84:	00000c00 	.word	0x00000c00
    4e88:	000c00c0 	.word	0x000c00c0
	...
    4e98:	00c00000 	.word	0x00c00000
    4e9c:	3000000f 	.word	0x3000000f
    4ea0:	00c00000 	.word	0x00c00000
    4ea4:	00000000 	.word	0x00000000
    4ea8:	c000000c 	.word	0xc000000c
    4eac:	00000c00 	.word	0x00000c00
    4eb0:	000c00c0 	.word	0x000c00c0
    4eb4:	0c00c000 	.word	0x0c00c000
    4eb8:	00c00000 	.word	0x00c00000
    4ebc:	0000000c 	.word	0x0000000c
	...
    4ecc:	000f00f0 	.word	0x000f00f0
    4ed0:	0000f000 	.word	0x0000f000
	...
    4edc:	00030000 	.word	0x00030000
    4ee0:	00000c00 	.word	0x00000c00
    4ee4:	c0000030 	.word	0xc0000030
    4ee8:	00000300 	.word	0x00000300
    4eec:	3000000c 	.word	0x3000000c
    4ef0:	3f000000 	.word	0x3f000000
    4ef4:	03fc0f00 	.word	0x03fc0f00
    4ef8:	0330f0c0 	.word	0x0330f0c0
    4efc:	30300003 	.word	0x30300003
    4f00:	f0c00303 	.word	0xf0c00303
    4f04:	3f00fc0f 	.word	0x3f00fc0f
	...
    4f10:	3f300000 	.word	0x3f300000
    4f14:	f0ff03ff 	.word	0xf0ff03ff
    4f18:	c0000318 	.word	0xc0000318
    4f1c:	00030630 	.word	0x00030630
    4f20:	00000000 	.word	0x00000000
    4f24:	0f30f000 	.word	0x0f30f000
    4f28:	300c0303 	.word	0x300c0303
    4f2c:	0c03c330 	.word	0x0c03c330
    4f30:	03333030 	.word	0x03333030
    4f34:	3f3c3003 	.word	0x3f3c3003
    4f38:	00f0c000 	.word	0x00f0c000
    4f3c:	c0030300 	.word	0xc0030300
    4f40:	ec033c3c 	.word	0xec033c3c
    4f44:	03c33330 	.word	0x03c33330
    4f48:	0330301c 	.word	0x0330301c
    4f4c:	30300003 	.word	0x30300003
    4f50:	c0000307 	.word	0xc0000307
    4f54:	03000000 	.word	0x03000000
    4f58:	00300000 	.word	0x00300000
    4f5c:	ff3f0003 	.word	0xff3f0003
    4f60:	0600c301 	.word	0x0600c301
    4f64:	003b0030 	.word	0x003b0030
    4f68:	0700f000 	.word	0x0700f000
    4f6c:	03000000 	.word	0x03000000
    4f70:	fc30c00f 	.word	0xfc30c00f
    4f74:	33303003 	.word	0x33303003
    4f78:	30300303 	.word	0x30300303
    4f7c:	30030333 	.word	0x30030333
    4f80:	03c33f30 	.word	0x03c33f30
    4f84:	0000c0fc 	.word	0x0000c0fc
    4f88:	00c00300 	.word	0x00c00300
    4f8c:	300c033c 	.word	0x300c033c
    4f90:	0c03c330 	.word	0x0c03c330
    4f94:	03c33030 	.word	0x03c33030
    4f98:	ff0f30cc 	.word	0xff0f30cc
    4f9c:	00c03f00 	.word	0x00c03f00
    4fa0:	00c00300 	.word	0x00c00300
    4fa4:	3003003c 	.word	0x3003003c
    4fa8:	03c03000 	.word	0x03c03000
    4fac:	0f300003 	.word	0x0f300003
    4fb0:	30f00003 	.word	0x30f00003
    4fb4:	00000300 	.word	0x00000300
    4fb8:	f3000000 	.word	0xf3000000
    4fbc:	033c0fc0 	.word	0x033c0fc0
    4fc0:	c330300c 	.word	0xc330300c
    4fc4:	30300c03 	.word	0x30300c03
    4fc8:	300c03c3 	.word	0x300c03c3
    4fcc:	f3003c0f 	.word	0xf3003c0f
    4fd0:	000000c0 	.word	0x000000c0
    4fd4:	fc0f00ff 	.word	0xfc0f00ff
    4fd8:	30e03003 	.word	0x30e03003
    4fdc:	300c03c3 	.word	0x300c03c3
    4fe0:	0c03c330 	.word	0x0c03c330
    4fe4:	00c33f30 	.word	0x00c33f30
    4fe8:	000000f0 	.word	0x000000f0
	...
    4ff4:	f0000000 	.word	0xf0000000
    4ff8:	000f0ff0 	.word	0x000f0ff0
    4ffc:	0000f0f0 	.word	0x0000f0f0
	...
    5010:	0f0fc0f0 	.word	0x0f0fc0f0
    5014:	00f0f000 	.word	0x00f0f000
    5018:	0000c000 	.word	0x0000c000
    501c:	00000000 	.word	0x00000000
    5020:	03033000 	.word	0x03033000
    5024:	0c0c3000 	.word	0x0c0c3000
    5028:	03c0c000 	.word	0x03c0c000
    502c:	00330030 	.word	0x00330030
    5030:	0c00c000 	.word	0x0c00c000
    5034:	00000000 	.word	0x00000000
    5038:	30030033 	.word	0x30030033
    503c:	03003300 	.word	0x03003300
    5040:	00330030 	.word	0x00330030
    5044:	33003003 	.word	0x33003003
    5048:	00300300 	.word	0x00300300
    504c:	00000033 	.word	0x00000033
    5050:	00000000 	.word	0x00000000
    5054:	000c00c0 	.word	0x000c00c0
    5058:	33003003 	.word	0x33003003
    505c:	000c0c00 	.word	0x000c0c00
    5060:	0330c0c0 	.word	0x0330c0c0
    5064:	00300003 	.word	0x00300003
    5068:	00c00000 	.word	0x00c00000
    506c:	3003000c 	.word	0x3003000c
    5070:	03003300 	.word	0x03003300
    5074:	f330300f 	.word	0xf330300f
    5078:	3c000003 	.word	0x3c000003
    507c:	00c00000 	.word	0x00c00000
    5080:	ff000000 	.word	0xff000000
    5084:	03f00f00 	.word	0x03f00f00
    5088:	3333301e 	.word	0x3333301e
    508c:	30303303 	.word	0x30303303
    5090:	300003c3 	.word	0x300003c3
    5094:	ff00ff3f 	.word	0xff00ff3f
    5098:	000000c0 	.word	0x000000c0
    509c:	ff03f00f 	.word	0xff03f00f
    50a0:	1c00f300 	.word	0x1c00f300
    50a4:	00030330 	.word	0x00030330
    50a8:	f300301c 	.word	0xf300301c
    50ac:	00ff0300 	.word	0x00ff0300
    50b0:	0000f00f 	.word	0x0000f00f
    50b4:	0fc0f300 	.word	0x0fc0f300
    50b8:	300c033c 	.word	0x300c033c
    50bc:	0c03c330 	.word	0x0c03c330
    50c0:	03c33030 	.word	0x03c33030
    50c4:	ff3ff0ff 	.word	0xff3ff0ff
    50c8:	00300003 	.word	0x00300003
    50cc:	c0c00000 	.word	0xc0c00000
    50d0:	00030c0c 	.word	0x00030c0c
    50d4:	03033030 	.word	0x03033030
    50d8:	03303000 	.word	0x03303000
    50dc:	0ff0c003 	.word	0x0ff0c003
    50e0:	003f00fc 	.word	0x003f00fc
    50e4:	1e000000 	.word	0x1e000000
    50e8:	00f00300 	.word	0x00f00300
    50ec:	0f3cc0e1 	.word	0x0f3cc0e1
    50f0:	30300003 	.word	0x30300003
    50f4:	f0ff0303 	.word	0xf0ff0303
    50f8:	0003ff3f 	.word	0x0003ff3f
    50fc:	03000030 	.word	0x03000030
    5100:	03303000 	.word	0x03303000
    5104:	30300003 	.word	0x30300003
    5108:	300c03c3 	.word	0x300c03c3
    510c:	0c03c330 	.word	0x0c03c330
    5110:	03ff3f30 	.word	0x03ff3f30
    5114:	0000f0ff 	.word	0x0000f0ff
    5118:	30000003 	.word	0x30000003
    511c:	00000300 	.word	0x00000300
    5120:	0c03c030 	.word	0x0c03c030
    5124:	03c03000 	.word	0x03c03000
    5128:	ff3f000c 	.word	0xff3f000c
    512c:	00f0ff03 	.word	0x00f0ff03
    5130:	c0c30000 	.word	0xc0c30000
    5134:	03033c0c 	.word	0x03033c0c
    5138:	03333030 	.word	0x03333030
    513c:	03303000 	.word	0x03303000
    5140:	0ff0c003 	.word	0x0ff0c003
    5144:	003f00fc 	.word	0x003f00fc
    5148:	ff030000 	.word	0xff030000
    514c:	00ff3ff0 	.word	0x00ff3ff0
    5150:	c000000c 	.word	0xc000000c
    5154:	00000c00 	.word	0x00000c00
    5158:	000c00c0 	.word	0x000c00c0
    515c:	ff03ff3f 	.word	0xff03ff3f
    5160:	000000f0 	.word	0x000000f0
    5164:	00000000 	.word	0x00000000
    5168:	30300003 	.word	0x30300003
    516c:	f0ff0303 	.word	0xf0ff0303
    5170:	0003ff3f 	.word	0x0003ff3f
    5174:	00033030 	.word	0x00033030
    5178:	00000000 	.word	0x00000000
    517c:	30000003 	.word	0x30000003
    5180:	c0ff0300 	.word	0xc0ff0300
    5184:	0003ff3f 	.word	0x0003ff3f
    5188:	00033030 	.word	0x00033030
    518c:	0f003000 	.word	0x0f003000
    5190:	00c00000 	.word	0x00c00000
    5194:	30000300 	.word	0x30000300
    5198:	c0000330 	.word	0xc0000330
    519c:	000c0cc0 	.word	0x000c0cc0
    51a0:	30030033 	.word	0x30030033
    51a4:	3f000c00 	.word	0x3f000c00
    51a8:	f0ff03ff 	.word	0xf0ff03ff
    51ac:	00000000 	.word	0x00000000
    51b0:	00030030 	.word	0x00030030
    51b4:	03003000 	.word	0x03003000
    51b8:	00300000 	.word	0x00300000
    51bc:	30000003 	.word	0x30000003
    51c0:	ff03ff3f 	.word	0xff03ff3f
    51c4:	030000f0 	.word	0x030000f0
    51c8:	ff3ff0ff 	.word	0xff3ff0ff
    51cc:	0700c001 	.word	0x0700c001
    51d0:	003c0000 	.word	0x003c0000
    51d4:	c0010007 	.word	0xc0010007
    51d8:	03ff3f00 	.word	0x03ff3f00
    51dc:	0000f0ff 	.word	0x0000f0ff
    51e0:	3ff0ff03 	.word	0x3ff0ff03
    51e4:	c00100ff 	.word	0xc00100ff
    51e8:	1c007000 	.word	0x1c007000
    51ec:	01000700 	.word	0x01000700
    51f0:	ff3f00c0 	.word	0xff3f00c0
    51f4:	00f0ff03 	.word	0x00f0ff03
    51f8:	c0ff0000 	.word	0xc0ff0000
    51fc:	8003fc0f 	.word	0x8003fc0f
    5200:	03033070 	.word	0x03033070
    5204:	03303000 	.word	0x03303000
    5208:	0f708003 	.word	0x0f708003
    520c:	c0ff00fc 	.word	0xc0ff00fc
    5210:	f0000000 	.word	0xf0000000
    5214:	03000f00 	.word	0x03000f00
    5218:	c030000c 	.word	0xc030000c
    521c:	30000c03 	.word	0x30000c03
    5220:	000c03c0 	.word	0x000c03c0
    5224:	ff03ff3f 	.word	0xff03ff3f
    5228:	000000f0 	.word	0x000000f0
    522c:	f30f30ff 	.word	0xf30f30ff
    5230:	30c00003 	.word	0x30c00003
    5234:	3003033f 	.word	0x3003033f
    5238:	00030330 	.word	0x00030330
    523c:	00ff3f30 	.word	0x00ff3f30
    5240:	0000c0ff 	.word	0x0000c0ff
    5244:	0f30f000 	.word	0x0f30f000
    5248:	c00f030f 	.word	0xc00f030f
    524c:	0c03f030 	.word	0x0c03f030
    5250:	03c03000 	.word	0x03c03000
    5254:	ff3f000c 	.word	0xff3f000c
    5258:	00f0ff03 	.word	0x00f0ff03
    525c:	c0c30000 	.word	0xc0c30000
    5260:	0c033c0c 	.word	0x0c033c0c
    5264:	03c33030 	.word	0x03c33030
    5268:	c330300c 	.word	0xc330300c
    526c:	3f300c03 	.word	0x3f300c03
    5270:	c0f000cf 	.word	0xc0f000cf
    5274:	00030000 	.word	0x00030000
    5278:	03003000 	.word	0x03003000
    527c:	00300000 	.word	0x00300000
    5280:	30f0ff03 	.word	0x30f0ff03
    5284:	00000300 	.word	0x00000300
    5288:	00030030 	.word	0x00030030
    528c:	03000000 	.word	0x03000000
    5290:	fc3fc0ff 	.word	0xfc3fc0ff
    5294:	00300000 	.word	0x00300000
    5298:	30000003 	.word	0x30000003
    529c:	00000300 	.word	0x00000300
    52a0:	03fc3f30 	.word	0x03fc3f30
    52a4:	0000c0ff 	.word	0x0000c0ff
    52a8:	3f00c003 	.word	0x3f00c003
    52ac:	c03f00c0 	.word	0xc03f00c0
    52b0:	00003e00 	.word	0x00003e00
    52b4:	003e0030 	.word	0x003e0030
    52b8:	c03fc03f 	.word	0xc03fc03f
    52bc:	0000c003 	.word	0x0000c003
    52c0:	e0ff0300 	.word	0xe0ff0300
    52c4:	0000ff3f 	.word	0x0000ff3f
    52c8:	003e0030 	.word	0x003e0030
    52cc:	3e00000f 	.word	0x3e00000f
    52d0:	3f300000 	.word	0x3f300000
    52d4:	e0ff03ff 	.word	0xe0ff03ff
    52d8:	00030000 	.word	0x00030000
    52dc:	000f3c30 	.word	0x000f3c30
    52e0:	b003c0f3 	.word	0xb003c0f3
    52e4:	03001e00 	.word	0x03001e00
    52e8:	c0f30070 	.word	0xc0f30070
    52ec:	00030f3c 	.word	0x00030f3c
    52f0:	03000030 	.word	0x03000030
    52f4:	003c0000 	.word	0x003c0000
    52f8:	0300f000 	.word	0x0300f000
    52fc:	f00f00e0 	.word	0xf00f00e0
    5300:	f000e003 	.word	0xf000e003
    5304:	03003c00 	.word	0x03003c00
    5308:	00000000 	.word	0x00000000
    530c:	3c300003 	.word	0x3c300003
    5310:	30e00303 	.word	0x30e00303
    5314:	0c038333 	.word	0x0c038333
    5318:	03733030 	.word	0x03733030
    531c:	1f303003 	.word	0x1f303003
    5320:	00f00003 	.word	0x00f00003
    5324:	00000000 	.word	0x00000000
    5328:	00030000 	.word	0x00030000
    532c:	03033030 	.word	0x03033030
    5330:	ff3f3000 	.word	0xff3f3000
    5334:	00f0ff03 	.word	0x00f0ff03
	...
    5340:	000f0030 	.word	0x000f0030
    5344:	f000c003 	.word	0xf000c003
    5348:	0f003c00 	.word	0x0f003c00
    534c:	00c00300 	.word	0x00c00300
    5350:	00000030 	.word	0x00000030
	...
    535c:	3f000000 	.word	0x3f000000
    5360:	f0ff03ff 	.word	0xf0ff03ff
    5364:	00030330 	.word	0x00030330
    5368:	00033030 	.word	0x00033030
    536c:	00000000 	.word	0x00000000
    5370:	03000c00 	.word	0x03000c00
    5374:	00f000c0 	.word	0x00f000c0
    5378:	0003001c 	.word	0x0003001c
    537c:	00001c00 	.word	0x00001c00
    5380:	c00300f0 	.word	0xc00300f0
    5384:	00000c00 	.word	0x00000c00
    5388:	30000000 	.word	0x30000000
    538c:	00000300 	.word	0x00000300
    5390:	00030030 	.word	0x00030030
    5394:	03003000 	.word	0x03003000
    5398:	00300000 	.word	0x00300000
    539c:	30000003 	.word	0x30000003
	...
    53a8:	000f0030 	.word	0x000f0030
    53ac:	3000c003 	.word	0x3000c003
    53b0:	00000300 	.word	0x00000300
	...
    53bc:	f303f00f 	.word	0xf303f00f
    53c0:	03303300 	.word	0x03303300
    53c4:	30330033 	.word	0x30330033
    53c8:	33003303 	.word	0x33003303
    53cc:	000c0030 	.word	0x000c0030
    53d0:	0000c000 	.word	0x0000c000
    53d4:	03c00f00 	.word	0x03c00f00
    53d8:	303000cf 	.word	0x303000cf
    53dc:	30000303 	.word	0x30000303
    53e0:	00030330 	.word	0x00030330
    53e4:	ff3fe01c 	.word	0xff3fe01c
    53e8:	00f0ff03 	.word	0x00f0ff03
    53ec:	300c0000 	.word	0x300c0000
    53f0:	3000c300 	.word	0x3000c300
    53f4:	00030330 	.word	0x00030330
    53f8:	03033030 	.word	0x03033030
    53fc:	03303000 	.word	0x03303000
    5400:	c00f00ff 	.word	0xc00f00ff
    5404:	ff030000 	.word	0xff030000
    5408:	00ff3ff0 	.word	0x00ff3ff0
    540c:	0303c00c 	.word	0x0303c00c
    5410:	03303000 	.word	0x03303000
    5414:	30300003 	.word	0x30300003
    5418:	0f00ff03 	.word	0x0f00ff03
    541c:	000000c0 	.word	0x000000c0
    5420:	f300000f 	.word	0xf300000f
    5424:	03303300 	.word	0x03303300
    5428:	30330033 	.word	0x30330033
    542c:	33003303 	.word	0x33003303
    5430:	00ff0330 	.word	0x00ff0330
    5434:	0000c00f 	.word	0x0000c00f
    5438:	0c00c000 	.word	0x0c00c000
    543c:	00000300 	.word	0x00000300
    5440:	0c03c030 	.word	0x0c03c030
    5444:	00ff0f00 	.word	0x00ff0f00
    5448:	c000f0ff 	.word	0xc000f0ff
    544c:	00000c00 	.word	0x00000c00
    5450:	0c300000 	.word	0x0c300000
    5454:	0cc00003 	.word	0x0cc00003
    5458:	30f3033f 	.word	0x30f3033f
    545c:	33033333 	.word	0x33033333
    5460:	03333330 	.word	0x03333330
    5464:	cc0cf0ff 	.word	0xcc0cf0ff
    5468:	0f000000 	.word	0x0f000000
    546c:	00ff00f0 	.word	0x00ff00f0
    5470:	00030030 	.word	0x00030030
    5474:	03003000 	.word	0x03003000
    5478:	000c0000 	.word	0x000c0000
    547c:	ff03ff3f 	.word	0xff03ff3f
    5480:	000000f0 	.word	0x000000f0
    5484:	00000000 	.word	0x00000000
    5488:	00300000 	.word	0x00300000
    548c:	f03f0303 	.word	0xf03f0303
    5490:	3000ff33 	.word	0x3000ff33
    5494:	00030030 	.word	0x00030030
	...
    54a0:	fc3f0300 	.word	0xfc3f0300
    54a4:	00f0ff33 	.word	0x00f0ff33
    54a8:	30000003 	.word	0x30000003
    54ac:	03000300 	.word	0x03000300
    54b0:	003c00f0 	.word	0x003c00f0
    54b4:	00000000 	.word	0x00000000
    54b8:	60000300 	.word	0x60000300
    54bc:	008c0330 	.word	0x008c0330
    54c0:	7000c01e 	.word	0x7000c01e
    54c4:	3f000300 	.word	0x3f000300
    54c8:	f0ff03ff 	.word	0xf0ff03ff
	...
    54d4:	ff3f3000 	.word	0xff3f3000
    54d8:	30f0ff03 	.word	0x30f0ff03
    54dc:	30000303 	.word	0x30000303
	...
    54e8:	ff03f00f 	.word	0xff03f00f
    54ec:	00003800 	.word	0x00003800
    54f0:	000700c0 	.word	0x000700c0
    54f4:	0c007000 	.word	0x0c007000
    54f8:	00ff0300 	.word	0x00ff0300
    54fc:	0000f03f 	.word	0x0000f03f
    5500:	00f00f00 	.word	0x00f00f00
    5504:	003000ff 	.word	0x003000ff
    5508:	30000003 	.word	0x30000003
    550c:	00000300 	.word	0x00000300
    5510:	ff00003c 	.word	0xff00003c
    5514:	00f03f00 	.word	0x00f03f00
    5518:	00000000 	.word	0x00000000
    551c:	3f00fc00 	.word	0x3f00fc00
    5520:	000303f0 	.word	0x000303f0
    5524:	03033030 	.word	0x03033030
    5528:	03303000 	.word	0x03303000
    552c:	c00f00ff 	.word	0xc00f00ff
    5530:	0f000000 	.word	0x0f000000
    5534:	00f00000 	.word	0x00f00000
    5538:	0c03c030 	.word	0x0c03c030
    553c:	03c03000 	.word	0x03c03000
    5540:	c030000c 	.word	0xc030000c
    5544:	3f00f000 	.word	0x3f00f000
    5548:	000000ff 	.word	0x000000ff
    554c:	f000ff3f 	.word	0xf000ff3f
    5550:	03c03000 	.word	0x03c03000
    5554:	c030000c 	.word	0xc030000c
    5558:	30000c03 	.word	0x30000c03
    555c:	00f000c0 	.word	0x00f000c0
    5560:	0000000f 	.word	0x0000000f
    5564:	01000c00 	.word	0x01000c00
    5568:	003000c0 	.word	0x003000c0
    556c:	30000003 	.word	0x30000003
    5570:	00c00100 	.word	0x00c00100
    5574:	ff00000c 	.word	0xff00000c
    5578:	00f03f00 	.word	0x00f03f00
    557c:	c0000000 	.word	0xc0000000
    5580:	33000c00 	.word	0x33000c00
    5584:	00330330 	.word	0x00330330
    5588:	33033033 	.word	0x33033033
    558c:	03303300 	.word	0x03303300
    5590:	300c00f3 	.word	0x300c00f3
    5594:	00000000 	.word	0x00000000
    5598:	000c0000 	.word	0x000c0000
    559c:	0303c030 	.word	0x0303c030
    55a0:	3f303000 	.word	0x3f303000
    55a4:	c0ff03fc 	.word	0xc0ff03fc
    55a8:	30000003 	.word	0x30000003
    55ac:	00000000 	.word	0x00000000
    55b0:	ff033000 	.word	0xff033000
    55b4:	00c03f00 	.word	0x00c03f00
    55b8:	30000003 	.word	0x30000003
    55bc:	00000300 	.word	0x00000300
    55c0:	00ff0330 	.word	0x00ff0330
    55c4:	0000c03f 	.word	0x0000c03f
    55c8:	00001c00 	.word	0x00001c00
    55cc:	800700e0 	.word	0x800700e0
    55d0:	00001e00 	.word	0x00001e00
    55d4:	001e00f0 	.word	0x001e00f0
    55d8:	e0008007 	.word	0xe0008007
    55dc:	00001c00 	.word	0x00001c00
    55e0:	c03f0000 	.word	0xc03f0000
    55e4:	0000ff03 	.word	0x0000ff03
    55e8:	001c0030 	.word	0x001c0030
    55ec:	1c000003 	.word	0x1c000003
    55f0:	03300000 	.word	0x03300000
    55f4:	c03f00ff 	.word	0xc03f00ff
	...
    5600:	ce013030 	.word	0xce013030
    5604:	00800700 	.word	0x00800700
    5608:	80070030 	.word	0x80070030
    560c:	3000ce01 	.word	0x3000ce01
    5610:	00000030 	.word	0x00000030
    5614:	00000000 	.word	0x00000000
    5618:	03fc3f00 	.word	0x03fc3f00
    561c:	c700f0ff 	.word	0xc700f0ff
    5620:	00300c00 	.word	0x00300c00
    5624:	f0fc03c7 	.word	0xf0fc03c7
    5628:	00000c3f 	.word	0x00000c3f
    562c:	03303000 	.word	0x03303000
    5630:	303c00c3 	.word	0x303c00c3
    5634:	33003303 	.word	0x33003303
    5638:	000f0330 	.word	0x000f0330
    563c:	0303f030 	.word	0x0303f030
    5640:	00303000 	.word	0x00303000
    5644:	30000300 	.word	0x30000300
    5648:	00030330 	.word	0x00030330
    564c:	00333330 	.word	0x00333330
    5650:	c000c0cc 	.word	0xc000c0cc
    5654:	00000c00 	.word	0x00000c00
	...
    5668:	3ff0ff03 	.word	0x3ff0ff03
    566c:	000000ff 	.word	0x000000ff
	...
    5680:	c0cc00c0 	.word	0xc0cc00c0
    5684:	33033333 	.word	0x33033333
    5688:	03033030 	.word	0x03033030
    568c:	00003000 	.word	0x00003000
    5690:	3f00c003 	.word	0x3f00c003
    5694:	00300000 	.word	0x00300000
    5698:	c0000007 	.word	0xc0000007
    569c:	03003800 	.word	0x03003800
    56a0:	003f0000 	.word	0x003f0000
    56a4:	0000f000 	.word	0x0000f000
	...
    56c0:	c0000000 	.word	0xc0000000
    56c4:	030c0cc0 	.word	0x030c0cc0
    56c8:	03303000 	.word	0x03303000
    56cc:	303c0003 	.word	0x303c0003
    56d0:	f0c04303 	.word	0xf0c04303
    56d4:	3f00fc0f 	.word	0x3f00fc0f
    56d8:	00000000 	.word	0x00000000
    56dc:	ff033000 	.word	0xff033000
    56e0:	18c0bf01 	.word	0x18c0bf01
    56e4:	30000003 	.word	0x30000003
    56e8:	80010300 	.word	0x80010300
    56ec:	00ff1b30 	.word	0x00ff1b30
    56f0:	0000c03f 	.word	0x0000c03f
    56f4:	00000f00 	.word	0x00000f00
    56f8:	303301f3 	.word	0x303301f3
    56fc:	b300331b 	.word	0xb300331b
    5700:	00330330 	.word	0x00330330
    5704:	ff033033 	.word	0xff033033
    5708:	00c00f00 	.word	0x00c00f00
    570c:	f00f0000 	.word	0xf00f0000
    5710:	b300f303 	.word	0xb300f303
    5714:	00331330 	.word	0x00331330
    5718:	330330b3 	.word	0x330330b3
    571c:	00303300 	.word	0x00303300
    5720:	c000000c 	.word	0xc000000c
    5724:	0f000000 	.word	0x0f000000
    5728:	01f31bf0 	.word	0x01f31bf0
    572c:	330330b3 	.word	0x330330b3
    5730:	1b303300 	.word	0x1b303300
    5734:	30b30133 	.word	0x30b30133
    5738:	00000c00 	.word	0x00000c00
    573c:	000000c0 	.word	0x000000c0
    5740:	f303f00f 	.word	0xf303f00f
    5744:	0b303300 	.word	0x0b303300
    5748:	30b30133 	.word	0x30b30133
    574c:	33003313 	.word	0x33003313
    5750:	000c0030 	.word	0x000c0030
    5754:	0000c000 	.word	0x0000c000
    5758:	03f00f00 	.word	0x03f00f00
    575c:	303303f3 	.word	0x303303f3
    5760:	b304334b 	.word	0xb304334b
    5764:	00333330 	.word	0x00333330
    5768:	0c003033 	.word	0x0c003033
    576c:	00c00000 	.word	0x00c00000
    5770:	300c0000 	.word	0x300c0000
    5774:	3000c300 	.word	0x3000c300
    5778:	c0030330 	.word	0xc0030330
    577c:	03033430 	.word	0x03033430
    5780:	03303000 	.word	0x03303000
    5784:	c00f00ff 	.word	0xc00f00ff
    5788:	0f000000 	.word	0x0f000000
    578c:	00f30000 	.word	0x00f30000
    5790:	330b3033 	.word	0x330b3033
    5794:	0b303301 	.word	0x0b303301
    5798:	30330033 	.word	0x30330033
    579c:	0f00ff03 	.word	0x0f00ff03
    57a0:	000000c0 	.word	0x000000c0
    57a4:	f300000f 	.word	0xf300000f
    57a8:	1b30b301 	.word	0x1b30b301
    57ac:	30330033 	.word	0x30330033
    57b0:	b3013303 	.word	0xb3013303
    57b4:	00ff1b30 	.word	0x00ff1b30
    57b8:	0000c00f 	.word	0x0000c00f
    57bc:	00000f00 	.word	0x00000f00
    57c0:	303300f3 	.word	0x303300f3
    57c4:	b3003303 	.word	0xb3003303
    57c8:	01331b30 	.word	0x01331b30
    57cc:	ff033033 	.word	0xff033033
    57d0:	00c00f00 	.word	0x00c00f00
    57d4:	00000000 	.word	0x00000000
    57d8:	00030000 	.word	0x00030000
    57dc:	00033030 	.word	0x00033030
    57e0:	ff03f03f 	.word	0xff03f03f
    57e4:	30303003 	.word	0x30303003
    57e8:	00000003 	.word	0x00000003
	...
    57f4:	03003000 	.word	0x03003000
    57f8:	13f0bf00 	.word	0x13f0bf00
    57fc:	30b000ff 	.word	0x30b000ff
    5800:	00000300 	.word	0x00000300
	...
    580c:	00300000 	.word	0x00300000
    5810:	f0bf0003 	.word	0xf0bf0003
    5814:	3001ff1b 	.word	0x3001ff1b
    5818:	00030030 	.word	0x00030030
    581c:	00000000 	.word	0x00000000
    5820:	c3f00f00 	.word	0xc3f00f00
    5824:	00f30cff 	.word	0x00f30cff
    5828:	0303301c 	.word	0x0303301c
    582c:	0c301c00 	.word	0x0c301c00
    5830:	ffc300f3 	.word	0xffc300f3
    5834:	00f00f00 	.word	0x00f00f00
    5838:	f00f0000 	.word	0xf00f0000
    583c:	f304ff03 	.word	0xf304ff03
    5840:	0b30bc00 	.word	0x0b30bc00
    5844:	30bc0003 	.word	0x30bc0003
    5848:	0300f304 	.word	0x0300f304
    584c:	f00f00ff 	.word	0xf00f00ff
    5850:	00030000 	.word	0x00030000
    5854:	0b033030 	.word	0x0b033030
    5858:	c3b03000 	.word	0xc3b03000
    585c:	70300c07 	.word	0x70300c07
    5860:	300c03c3 	.word	0x300c03c3
    5864:	ff03ff3f 	.word	0xff03ff3f
    5868:	000000f0 	.word	0x000000f0
    586c:	b303303f 	.word	0xb303303f
    5870:	03303100 	.word	0x03303100
    5874:	f01f00be 	.word	0xf01f00be
    5878:	3300f303 	.word	0x3300f303
    587c:	003f0330 	.word	0x003f0330
    5880:	0000c001 	.word	0x0000c001
    5884:	30300c03 	.word	0x30300c03
    5888:	f0ff03c3 	.word	0xf0ff03c3
    588c:	0303ff3f 	.word	0x0303ff3f
    5890:	00301c00 	.word	0x00301c00
    5894:	ff0300f3 	.word	0xff0300f3
    5898:	00f00f00 	.word	0x00f00f00
    589c:	00000000 	.word	0x00000000
    58a0:	3f00fc00 	.word	0x3f00fc00
    58a4:	01030bf0 	.word	0x01030bf0
    58a8:	030b3030 	.word	0x030b3030
    58ac:	03303000 	.word	0x03303000
    58b0:	c00f00ff 	.word	0xc00f00ff
    58b4:	00000000 	.word	0x00000000
    58b8:	01fc0000 	.word	0x01fc0000
    58bc:	031bf0bf 	.word	0x031bf0bf
    58c0:	03303000 	.word	0x03303000
    58c4:	30b00103 	.word	0x30b00103
    58c8:	0f00ff1b 	.word	0x0f00ff1b
    58cc:	000000c0 	.word	0x000000c0
    58d0:	fc000000 	.word	0xfc000000
    58d4:	03f03f00 	.word	0x03f03f00
    58d8:	30b00003 	.word	0x30b00003
    58dc:	3001031b 	.word	0x3001031b
    58e0:	00ff0330 	.word	0x00ff0330
    58e4:	0000c00f 	.word	0x0000c00f
    58e8:	03300000 	.word	0x03300000
    58ec:	c03f00ff 	.word	0xc03f00ff
    58f0:	00010308 	.word	0x00010308
    58f4:	00030830 	.word	0x00030830
    58f8:	ff033000 	.word	0xff033000
    58fc:	00c03f00 	.word	0x00c03f00
    5900:	30000000 	.word	0x30000000
    5904:	3f00ff03 	.word	0x3f00ff03
    5908:	010308c0 	.word	0x010308c0
    590c:	03103080 	.word	0x03103080
    5910:	03300000 	.word	0x03300000
    5914:	c03f00ff 	.word	0xc03f00ff
    5918:	00000000 	.word	0x00000000
    591c:	01000000 	.word	0x01000000
    5920:	ff1bfcbf 	.word	0xff1bfcbf
    5924:	00c700f0 	.word	0x00c700f0
    5928:	c780310c 	.word	0xc780310c
    592c:	3ff0fc1b 	.word	0x3ff0fc1b
    5930:	0000000c 	.word	0x0000000c
    5934:	fc07c07f 	.word	0xfc07c07f
    5938:	d870c00d 	.word	0xd870c00d
    593c:	30800103 	.word	0x30800103
    5940:	c00d03d8 	.word	0xc00d03d8
    5944:	00fc0770 	.word	0x00fc0770
    5948:	0000c07f 	.word	0x0000c07f
    594c:	dfc0ff01 	.word	0xdfc0ff01
    5950:	30000cfc 	.word	0x30000cfc
    5954:	00000300 	.word	0x00000300
    5958:	0c03c030 	.word	0x0c03c030
    595c:	fc1f3000 	.word	0xfc1f3000
    5960:	00c0ff01 	.word	0x00c0ff01
    5964:	00330000 	.word	0x00330000
    5968:	c0003003 	.word	0xc0003003
    596c:	070c0cc0 	.word	0x070c0cc0
    5970:	0c0cf8de 	.word	0x0c0cf8de
    5974:	0fc0c000 	.word	0x0fc0c000
    5978:	003f00fc 	.word	0x003f00fc
    597c:	00000000 	.word	0x00000000
    5980:	01030c30 	.word	0x01030c30
    5984:	03303080 	.word	0x03303080
    5988:	38300603 	.word	0x38300603
    598c:	f0ff0163 	.word	0xf0ff0163
    5990:	0600ff0f 	.word	0x0600ff0f
    5994:	02000030 	.word	0x02000030
    5998:	00380000 	.word	0x00380000
    599c:	0340e200 	.word	0x0340e200
    59a0:	f00f00a4 	.word	0xf00f00a4
    59a4:	e200a403 	.word	0xe200a403
    59a8:	02003840 	.word	0x02003840
    59ac:	00000000 	.word	0x00000000
    59b0:	0e00e000 	.word	0x0e00e000
    59b4:	30190300 	.word	0x30190300
    59b8:	1b039331 	.word	0x1b039331
    59bc:	03be31f0 	.word	0x03be31f0
    59c0:	ff3f0018 	.word	0xff3f0018
    59c4:	00f0ff03 	.word	0x00f0ff03
    59c8:	00e00000 	.word	0x00e00000
    59cc:	8c03001e 	.word	0x8c03001e
    59d0:	03c03800 	.word	0x03c03800
    59d4:	fc0f00fc 	.word	0xfc0f00fc
    59d8:	00fcff00 	.word	0x00fcff00
    59dc:	000cc0cf 	.word	0x000cc0cf
    59e0:	0f000000 	.word	0x0f000000
    59e4:	01f303f0 	.word	0x01f303f0
    59e8:	331b3033 	.word	0x331b3033
    59ec:	0330b300 	.word	0x0330b300
    59f0:	30330033 	.word	0x30330033
    59f4:	00000c00 	.word	0x00000c00
    59f8:	000000c0 	.word	0x000000c0
    59fc:	00000000 	.word	0x00000000
    5a00:	20300000 	.word	0x20300000
    5a04:	f03f0303 	.word	0xf03f0303
    5a08:	3000ff13 	.word	0x3000ff13
    5a0c:	00030030 	.word	0x00030030
	...
    5a18:	f03f00fc 	.word	0xf03f00fc
    5a1c:	b0010313 	.word	0xb0010313
    5a20:	00030b30 	.word	0x00030b30
    5a24:	ff033030 	.word	0xff033030
    5a28:	00c00f00 	.word	0x00c00f00
    5a2c:	30000000 	.word	0x30000000
    5a30:	3f00ff03 	.word	0x3f00ff03
    5a34:	010310c0 	.word	0x010310c0
    5a38:	03083080 	.word	0x03083080
    5a3c:	03300000 	.word	0x03300000
    5a40:	c03f00ff 	.word	0xc03f00ff
    5a44:	0f000000 	.word	0x0f000000
    5a48:	01ff08f0 	.word	0x01ff08f0
    5a4c:	00130030 	.word	0x00130030
    5a50:	0b00b000 	.word	0x0b00b000
    5a54:	003c0100 	.word	0x003c0100
    5a58:	3f00ff00 	.word	0x3f00ff00
    5a5c:	030000f0 	.word	0x030000f0
    5a60:	ff3ff0ff 	.word	0xff3ff0ff
    5a64:	80c00004 	.word	0x80c00004
    5a68:	000c0830 	.word	0x000c0830
    5a6c:	c0040043 	.word	0xc0040043
    5a70:	03ffbf00 	.word	0x03ffbf00
    5a74:	0000f0ff 	.word	0x0000f0ff
    5a78:	00000800 	.word	0x00000800
    5a7c:	00e80180 	.word	0x00e80180
    5a80:	a802802a 	.word	0xa802802a
    5a84:	02802a00 	.word	0x02802a00
    5a88:	80000068 	.word	0x80000068
    5a8c:	00000800 	.word	0x00000800
    5a90:	00080000 	.word	0x00080000
    5a94:	c8018000 	.word	0xc8018000
    5a98:	02803600 	.word	0x02803600
    5a9c:	80360028 	.word	0x80360028
    5aa0:	0000c801 	.word	0x0000c801
    5aa4:	00080080 	.word	0x00080080
    5aa8:	00000000 	.word	0x00000000
    5aac:	c0030030 	.word	0xc0030030
    5ab0:	f00c0c00 	.word	0xf00c0c00
    5ab4:	000ccfc0 	.word	0x000ccfc0
    5ab8:	cc00c00c 	.word	0xcc00c00c
    5abc:	00000300 	.word	0x00000300
    5ac0:	00000030 	.word	0x00000030
    5ac4:	c000000c 	.word	0xc000000c
    5ac8:	00000c00 	.word	0x00000c00
    5acc:	000c00c0 	.word	0x000c00c0
    5ad0:	0c00c000 	.word	0x0c00c000
    5ad4:	00f00000 	.word	0x00f00000
    5ad8:	0000000f 	.word	0x0000000f
    5adc:	00000f00 	.word	0x00000f00
    5ae0:	000c00f0 	.word	0x000c00f0
    5ae4:	0c00c000 	.word	0x0c00c000
    5ae8:	00c00000 	.word	0x00c00000
    5aec:	c000000c 	.word	0xc000000c
    5af0:	00000c00 	.word	0x00000c00
    5af4:	000c0000 	.word	0x000c0000
    5af8:	0d40cc00 	.word	0x0d40cc00
    5afc:	47db7ee4 	.word	0x47db7ee4
    5b00:	cc009ced 	.word	0xcc009ced
    5b04:	00440cc0 	.word	0x00440cc0
    5b08:	000c00c0 	.word	0x000c00c0
    5b0c:	0c000000 	.word	0x0c000000
    5b10:	00c10000 	.word	0x00c10000
    5b14:	cf7efe0c 	.word	0xcf7efe0c
    5b18:	0010ece7 	.word	0x0010ece7
    5b1c:	f00d00c1 	.word	0xf00d00c1
    5b20:	0c00df00 	.word	0x0c00df00
	...
    5b30:	fccf0000 	.word	0xfccf0000
    5b34:	00c0ff0c 	.word	0x00c0ff0c
	...
    5b44:	80200000 	.word	0x80200000
    5b48:	0a001001 	.word	0x0a001001
    5b4c:	00480200 	.word	0x00480200
    5b50:	a0000011 	.word	0xa0000011
    5b54:	00000400 	.word	0x00000400
    5b58:	00040000 	.word	0x00040000
    5b5c:	1100a000 	.word	0x1100a000
    5b60:	00480200 	.word	0x00480200
    5b64:	1001000a 	.word	0x1001000a
    5b68:	00802000 	.word	0x00802000
    5b6c:	00000000 	.word	0x00000000
    5b70:	08220882 	.word	0x08220882
    5b74:	88200820 	.word	0x88200820
    5b78:	82208220 	.word	0x82208220
    5b7c:	82088200 	.word	0x82088200
    5b80:	20082208 	.word	0x20082208
    5b84:	20882008 	.word	0x20882008
    5b88:	22499282 	.word	0x22499282
    5b8c:	24492449 	.word	0x24492449
    5b90:	24922499 	.word	0x24922499
    5b94:	49924492 	.word	0x49924492
    5b98:	49224992 	.word	0x49224992
    5b9c:	99244924 	.word	0x99244924
    5ba0:	b66d9224 	.word	0xb66d9224
    5ba4:	b6dbb6dd 	.word	0xb6dbb6dd
    5ba8:	6ddb66db 	.word	0x6ddb66db
    5bac:	6dbb6ddb 	.word	0x6dbb6ddb
    5bb0:	ddb66db6 	.word	0xddb66db6
    5bb4:	dbb6dbb6 	.word	0xdbb6dbb6
    5bb8:	006ddb66 	.word	0x006ddb66
	...
    5bc4:	0f000000 	.word	0x0f000000
    5bc8:	0000ffff 	.word	0x0000ffff
	...
    5be0:	00ffff0f 	.word	0x00ffff0f
    5be4:	00040040 	.word	0x00040040
    5be8:	04004000 	.word	0x04004000
	...
    5bf8:	ffff0f00 	.word	0xffff0f00
    5bfc:	0a00a000 	.word	0x0a00a000
    5c00:	00a00000 	.word	0x00a00000
    5c04:	0000000a 	.word	0x0000000a
	...
    5c10:	00f0ffff 	.word	0x00f0ffff
    5c14:	f0ffff00 	.word	0xf0ffff00
    5c18:	40000004 	.word	0x40000004
    5c1c:	00000400 	.word	0x00000400
	...
    5c28:	f07f0000 	.word	0xf07f0000
    5c2c:	7f000004 	.word	0x7f000004
    5c30:	000004f0 	.word	0x000004f0
    5c34:	00040040 	.word	0x00040040
	...
    5c44:	00ff0f00 	.word	0x00ff0f00
    5c48:	000a00a0 	.word	0x000a00a0
    5c4c:	0a00a000 	.word	0x0a00a000
	...
    5c58:	ff000000 	.word	0xff000000
    5c5c:	0000f0ff 	.word	0x0000f0ff
    5c60:	0af0bfff 	.word	0x0af0bfff
    5c64:	00a00000 	.word	0x00a00000
    5c68:	0000000a 	.word	0x0000000a
	...
    5c74:	00f0ffff 	.word	0x00f0ffff
    5c78:	f0ffff00 	.word	0xf0ffff00
	...
    5c8c:	f0ff0000 	.word	0xf0ff0000
    5c90:	bf000008 	.word	0xbf000008
    5c94:	00000af0 	.word	0x00000af0
    5c98:	000a00a0 	.word	0x000a00a0
	...
    5ca4:	e0ff0000 	.word	0xe0ff0000
    5ca8:	ff000200 	.word	0xff000200
    5cac:	000a00a0 	.word	0x000a00a0
    5cb0:	0a00a000 	.word	0x0a00a000
	...
    5cbc:	ff000000 	.word	0xff000000
    5cc0:	000400c0 	.word	0x000400c0
    5cc4:	0400c0ff 	.word	0x0400c0ff
    5cc8:	00400000 	.word	0x00400000
    5ccc:	00000004 	.word	0x00000004
	...
    5cd8:	fe0f0000 	.word	0xfe0f0000
    5cdc:	00a00000 	.word	0x00a00000
    5ce0:	a000000a 	.word	0xa000000a
    5ce4:	00000a00 	.word	0x00000a00
	...
    5cf4:	4000ff07 	.word	0x4000ff07
    5cf8:	00000400 	.word	0x00000400
    5cfc:	00040040 	.word	0x00040040
    5d00:	04004000 	.word	0x04004000
    5d04:	00400000 	.word	0x00400000
    5d08:	40000004 	.word	0x40000004
    5d0c:	0000fc0f 	.word	0x0000fc0f
	...
    5d18:	00400000 	.word	0x00400000
    5d1c:	40000004 	.word	0x40000004
    5d20:	00000400 	.word	0x00000400
    5d24:	00fc0f40 	.word	0x00fc0f40
    5d28:	04004000 	.word	0x04004000
    5d2c:	00400000 	.word	0x00400000
    5d30:	40000004 	.word	0x40000004
    5d34:	00000400 	.word	0x00000400
    5d38:	00040040 	.word	0x00040040
    5d3c:	07004000 	.word	0x07004000
    5d40:	004000ff 	.word	0x004000ff
    5d44:	40000004 	.word	0x40000004
    5d48:	00000400 	.word	0x00000400
    5d4c:	00040040 	.word	0x00040040
    5d50:	04004000 	.word	0x04004000
    5d54:	0f400000 	.word	0x0f400000
    5d58:	0000ffff 	.word	0x0000ffff
	...
    5d64:	04004000 	.word	0x04004000
    5d68:	00400000 	.word	0x00400000
    5d6c:	40000004 	.word	0x40000004
    5d70:	00000400 	.word	0x00000400
    5d74:	00040040 	.word	0x00040040
    5d78:	04004000 	.word	0x04004000
    5d7c:	00400000 	.word	0x00400000
    5d80:	40000004 	.word	0x40000004
    5d84:	00000400 	.word	0x00000400
    5d88:	ffff0f40 	.word	0xffff0f40
    5d8c:	04004000 	.word	0x04004000
    5d90:	00400000 	.word	0x00400000
    5d94:	a0000004 	.word	0xa0000004
    5d98:	00000a00 	.word	0x00000a00
    5d9c:	000a00a0 	.word	0x000a00a0
    5da0:	ff0fa000 	.word	0xff0fa000
    5da4:	000000ff 	.word	0x000000ff
	...
    5db0:	00040040 	.word	0x00040040
    5db4:	04004000 	.word	0x04004000
    5db8:	f0ffff00 	.word	0xf0ffff00
    5dbc:	ffff0000 	.word	0xffff0000
    5dc0:	000000f0 	.word	0x000000f0
    5dc4:	00000000 	.word	0x00000000
    5dc8:	0a00a000 	.word	0x0a00a000
    5dcc:	00a00000 	.word	0x00a00000
    5dd0:	a0ff000a 	.word	0xa0ff000a
    5dd4:	ff000200 	.word	0xff000200
    5dd8:	000000e0 	.word	0x000000e0
    5ddc:	00000000 	.word	0x00000000
    5de0:	00a00000 	.word	0x00a00000
    5de4:	a000000a 	.word	0xa000000a
    5de8:	00000a00 	.word	0x00000a00
    5dec:	0008f0bf 	.word	0x0008f0bf
    5df0:	00f0ff00 	.word	0x00f0ff00
    5df4:	00000000 	.word	0x00000000
    5df8:	a0000000 	.word	0xa0000000
    5dfc:	00000a00 	.word	0x00000a00
    5e00:	000a00a0 	.word	0x000a00a0
    5e04:	0200a0ff 	.word	0x0200a0ff
    5e08:	00a0ff00 	.word	0x00a0ff00
    5e0c:	a000000a 	.word	0xa000000a
    5e10:	00000a00 	.word	0x00000a00
    5e14:	000a00a0 	.word	0x000a00a0
    5e18:	0a00a000 	.word	0x0a00a000
    5e1c:	f0bf0000 	.word	0xf0bf0000
    5e20:	bf000008 	.word	0xbf000008
    5e24:	00000af0 	.word	0x00000af0
    5e28:	000a00a0 	.word	0x000a00a0
    5e2c:	0a00a000 	.word	0x0a00a000
    5e30:	00a00000 	.word	0x00a00000
    5e34:	bfff000a 	.word	0xbfff000a
    5e38:	ff0000f0 	.word	0xff0000f0
    5e3c:	0000f0ff 	.word	0x0000f0ff
    5e40:	00000000 	.word	0x00000000
    5e44:	00a00000 	.word	0x00a00000
    5e48:	a000000a 	.word	0xa000000a
    5e4c:	00000a00 	.word	0x00000a00
    5e50:	000a00a0 	.word	0x000a00a0
    5e54:	0a00a000 	.word	0x0a00a000
    5e58:	00a00000 	.word	0x00a00000
    5e5c:	a000000a 	.word	0xa000000a
    5e60:	00000a00 	.word	0x00000a00
    5e64:	000a00a0 	.word	0x000a00a0
    5e68:	00f0bfff 	.word	0x00f0bfff
    5e6c:	f0bfff00 	.word	0xf0bfff00
    5e70:	a000000a 	.word	0xa000000a
    5e74:	00000a00 	.word	0x00000a00
    5e78:	000a00a0 	.word	0x000a00a0
    5e7c:	0a00a000 	.word	0x0a00a000
    5e80:	0fa00000 	.word	0x0fa00000
    5e84:	a00000fa 	.word	0xa00000fa
    5e88:	00000a00 	.word	0x00000a00
    5e8c:	000a00a0 	.word	0x000a00a0
    5e90:	04004000 	.word	0x04004000
    5e94:	00400000 	.word	0x00400000
    5e98:	c0ff0004 	.word	0xc0ff0004
    5e9c:	ff000400 	.word	0xff000400
    5ea0:	000400c0 	.word	0x000400c0
    5ea4:	04004000 	.word	0x04004000
    5ea8:	00a00000 	.word	0x00a00000
    5eac:	a000000a 	.word	0xa000000a
    5eb0:	00000a00 	.word	0x00000a00
    5eb4:	ff0b00a0 	.word	0xff0b00a0
    5eb8:	0a00a000 	.word	0x0a00a000
    5ebc:	00a00000 	.word	0x00a00000
    5ec0:	4000000a 	.word	0x4000000a
    5ec4:	00000400 	.word	0x00000400
    5ec8:	00040040 	.word	0x00040040
    5ecc:	04f07f00 	.word	0x04f07f00
    5ed0:	f07f0000 	.word	0xf07f0000
    5ed4:	40000004 	.word	0x40000004
    5ed8:	00000400 	.word	0x00000400
    5edc:	00040040 	.word	0x00040040
    5ee0:	04004000 	.word	0x04004000
    5ee4:	00c0ff00 	.word	0x00c0ff00
    5ee8:	c0ff0004 	.word	0xc0ff0004
	...
    5ef4:	0a00a000 	.word	0x0a00a000
    5ef8:	00a00000 	.word	0x00a00000
    5efc:	a000000a 	.word	0xa000000a
    5f00:	0000fe0f 	.word	0x0000fe0f
	...
    5f0c:	00a00000 	.word	0x00a00000
    5f10:	a000000a 	.word	0xa000000a
    5f14:	00000a00 	.word	0x00000a00
    5f18:	ff0f00a0 	.word	0xff0f00a0
	...
    5f24:	40000000 	.word	0x40000000
    5f28:	00000400 	.word	0x00000400
    5f2c:	00040040 	.word	0x00040040
    5f30:	04f07f00 	.word	0x04f07f00
    5f34:	f07f0000 	.word	0xf07f0000
	...
    5f40:	00040040 	.word	0x00040040
    5f44:	04004000 	.word	0x04004000
    5f48:	f0ffff00 	.word	0xf0ffff00
    5f4c:	ffff0004 	.word	0xffff0004
    5f50:	000004f0 	.word	0x000004f0
    5f54:	00040040 	.word	0x00040040
    5f58:	0a00a000 	.word	0x0a00a000
    5f5c:	00a00000 	.word	0x00a00000
    5f60:	a000000a 	.word	0xa000000a
    5f64:	00ffff0f 	.word	0x00ffff0f
    5f68:	000a00a0 	.word	0x000a00a0
    5f6c:	0a00a000 	.word	0x0a00a000
	...
    5f7c:	00fc0f00 	.word	0x00fc0f00
    5f80:	04004000 	.word	0x04004000
    5f84:	00400000 	.word	0x00400000
    5f88:	40000004 	.word	0x40000004
    5f8c:	00000400 	.word	0x00000400
    5f90:	00040040 	.word	0x00040040
    5f94:	07004000 	.word	0x07004000
    5f98:	000000ff 	.word	0x000000ff
    5f9c:	00000000 	.word	0x00000000
    5fa0:	ff000000 	.word	0xff000000
    5fa4:	ffffffff 	.word	0xffffffff
    5fa8:	ffffffff 	.word	0xffffffff
    5fac:	ffffffff 	.word	0xffffffff
    5fb0:	ffffffff 	.word	0xffffffff
    5fb4:	ffffffff 	.word	0xffffffff
    5fb8:	ffffffff 	.word	0xffffffff
    5fbc:	07f07f00 	.word	0x07f07f00
    5fc0:	f07f00ff 	.word	0xf07f00ff
    5fc4:	7f00ff07 	.word	0x7f00ff07
    5fc8:	00ff07f0 	.word	0x00ff07f0
    5fcc:	ff07f07f 	.word	0xff07f07f
    5fd0:	07f07f00 	.word	0x07f07f00
    5fd4:	000000ff 	.word	0x000000ff
	...
    5fe0:	ffff0f00 	.word	0xffff0f00
    5fe4:	ffffffff 	.word	0xffffffff
    5fe8:	ffffffff 	.word	0xffffffff
    5fec:	ffffffff 	.word	0xffffffff
    5ff0:	ffffffff 	.word	0xffffffff
    5ff4:	ffffffff 	.word	0xffffffff
    5ff8:	ffffffff 	.word	0xffffffff
    5ffc:	000000ff 	.word	0x000000ff
    6000:	00000000 	.word	0x00000000
    6004:	ff000000 	.word	0xff000000
    6008:	00fc0fc0 	.word	0x00fc0fc0
    600c:	fc0fc0ff 	.word	0xfc0fc0ff
    6010:	0fc0ff00 	.word	0x0fc0ff00
    6014:	c0ff00fc 	.word	0xc0ff00fc
    6018:	ff00fc0f 	.word	0xff00fc0f
    601c:	00fc0fc0 	.word	0x00fc0fc0
    6020:	08000000 	.word	0x08000000
    6024:	00420010 	.word	0x00420010
    6028:	4200c003 	.word	0x4200c003
    602c:	00300c00 	.word	0x00300c00
    6030:	300c00c3 	.word	0x300c00c3
    6034:	03003c00 	.word	0x03003c00
    6038:	000000c0 	.word	0x000000c0
    603c:	1c000000 	.word	0x1c000000
    6040:	0d707300 	.word	0x0d707300
    6044:	108c00e3 	.word	0x108c00e3
    6048:	ff00c108 	.word	0xff00c108
    604c:	00ff07f0 	.word	0x00ff07f0
    6050:	00001000 	.word	0x00001000
    6054:	0f000000 	.word	0x0f000000
    6058:	00f80080 	.word	0x00f80080
    605c:	c000000c 	.word	0xc000000c
    6060:	00010c00 	.word	0x00010c00
    6064:	ff0ff0ff 	.word	0xff0ff0ff
    6068:	00108000 	.word	0x00108000
    606c:	10080000 	.word	0x10080000
    6070:	0f00ff00 	.word	0x0f00ff00
    6074:	00c000f0 	.word	0x00c000f0
    6078:	c000000c 	.word	0xc000000c
    607c:	00f00f00 	.word	0x00f00f00
    6080:	100800ff 	.word	0x100800ff
    6084:	80030000 	.word	0x80030000
    6088:	03033070 	.word	0x03033070
    608c:	03303000 	.word	0x03303000
    6090:	31300c03 	.word	0x31300c03
    6094:	303303e3 	.word	0x303303e3
    6098:	c0031b36 	.word	0xc0031b36
    609c:	000000f0 	.word	0x000000f0
    60a0:	fc030030 	.word	0xfc030030
    60a4:	03f03f00 	.word	0x03f03f00
    60a8:	30300003 	.word	0x30300003
    60ac:	30000303 	.word	0x30000303
    60b0:	00ff0330 	.word	0x00ff0330
    60b4:	0000c00f 	.word	0x0000c00f
    60b8:	03300000 	.word	0x03300000
    60bc:	c03f00ff 	.word	0xc03f00ff
    60c0:	00000300 	.word	0x00000300
    60c4:	00030030 	.word	0x00030030
    60c8:	ff033000 	.word	0xff033000
    60cc:	00fe3fe0 	.word	0x00fe3fe0
    60d0:	000c0000 	.word	0x000c0000
    60d4:	3800c001 	.word	0x3800c001
    60d8:	00000300 	.word	0x00000300
    60dc:	ff00f03f 	.word	0xff00f03f
    60e0:	03001c00 	.word	0x03001c00
    60e4:	00300080 	.word	0x00300080
    60e8:	00000000 	.word	0x00000000
    60ec:	80fc0400 	.word	0x80fc0400
    60f0:	0307e85f 	.word	0x0307e85f
    60f4:	07387080 	.word	0x07387080
    60f8:	38708003 	.word	0x38708003
    60fc:	4f80fe05 	.word	0x4f80fe05
    6100:	000000c8 	.word	0x000000c8
    6104:	fc0f003f 	.word	0xfc0f003f
    6108:	30f0cc03 	.word	0x30f0cc03
    610c:	300c03c3 	.word	0x300c03c3
    6110:	cc03c330 	.word	0xcc03c330
    6114:	00fc0ff0 	.word	0x00fc0ff0
    6118:	0000003f 	.word	0x0000003f
    611c:	1f90ff00 	.word	0x1f90ff00
    6120:	f08103ff 	.word	0xf08103ff
    6124:	00030030 	.word	0x00030030
    6128:	03003000 	.word	0x03003000
    612c:	ff1ff081 	.word	0xff1ff081
    6130:	0090ff00 	.word	0x0090ff00
    6134:	00000300 	.word	0x00000300
    6138:	3f03fc30 	.word	0x3f03fc30
    613c:	030337f0 	.word	0x030337f0
    6140:	033b30f0 	.word	0x033b30f0
    6144:	03303003 	.word	0x03303003
    6148:	c00f00ff 	.word	0xc00f00ff
    614c:	0f000000 	.word	0x0f000000
    6150:	00040180 	.word	0x00040180
    6154:	04012020 	.word	0x04012020
    6158:	01800f00 	.word	0x01800f00
    615c:	20200004 	.word	0x20200004
    6160:	0f000401 	.word	0x0f000401
    6164:	00000080 	.word	0x00000080
    6168:	0607c05f 	.word	0x0607c05f
    616c:	06203800 	.word	0x06203800
    6170:	104700c3 	.word	0x104700c3
    6174:	20001b06 	.word	0x20001b06
    6178:	000703e0 	.word	0x000703e0
    617c:	0000d01f 	.word	0x0000d01f
    6180:	00000000 	.word	0x00000000
    6184:	30000300 	.word	0x30000300
    6188:	0c03c330 	.word	0x0c03c330
    618c:	03c33030 	.word	0x03c33030
    6190:	fc0ff0cc 	.word	0xfc0ff0cc
    6194:	00003f00 	.word	0x00003f00
    6198:	fc3f0000 	.word	0xfc3f0000
    619c:	c0c0ff03 	.word	0xc0c0ff03
    61a0:	00000c00 	.word	0x00000c00
    61a4:	000c00c0 	.word	0x000c00c0
    61a8:	0300c000 	.word	0x0300c000
    61ac:	fc3fc0ff 	.word	0xfc3fc0ff
    61b0:	33000000 	.word	0x33000000
    61b4:	00330330 	.word	0x00330330
    61b8:	33033033 	.word	0x33033033
    61bc:	03303300 	.word	0x03303300
    61c0:	30330033 	.word	0x30330033
    61c4:	33003303 	.word	0x33003303
    61c8:	00000030 	.word	0x00000030
    61cc:	c100100c 	.word	0xc100100c
    61d0:	00100c00 	.word	0x00100c00
    61d4:	d0ff00c1 	.word	0xd0ff00c1
    61d8:	0c00c100 	.word	0x0c00c100
    61dc:	00c10010 	.word	0x00c10010
    61e0:	0000100c 	.word	0x0000100c
    61e4:	00000000 	.word	0x00000000
    61e8:	060c60c0 	.word	0x060c60c0
    61ec:	33603003 	.word	0x33603003
    61f0:	600c0c06 	.word	0x600c0c06
    61f4:	0330c6c0 	.word	0x0330c6c0
    61f8:	00360063 	.word	0x00360063
    61fc:	00000000 	.word	0x00000000
    6200:	00630330 	.word	0x00630330
    6204:	600c0c36 	.word	0x600c0c36
    6208:	3003c6c0 	.word	0x3003c6c0
    620c:	00063360 	.word	0x00063360
    6210:	060c60c0 	.word	0x060c60c0
    6214:	00060000 	.word	0x00060000
    6218:	0800c000 	.word	0x0800c000
    621c:	00c00000 	.word	0x00c00000
    6220:	00ffff07 	.word	0x00ffff07
	...
    6238:	f8ff0f00 	.word	0xf8ff0f00
    623c:	00600000 	.word	0x00600000
    6240:	10000001 	.word	0x10000001
    6244:	00000600 	.word	0x00000600
    6248:	00000c00 	.word	0x00000c00
    624c:	000c00c0 	.word	0x000c00c0
    6250:	cc00c000 	.word	0xcc00c000
    6254:	00cc0cc0 	.word	0x00cc0cc0
    6258:	c000000c 	.word	0xc000000c
    625c:	00000c00 	.word	0x00000c00
    6260:	00330000 	.word	0x00330000
    6264:	19009801 	.word	0x19009801
    6268:	00980180 	.word	0x00980180
    626c:	60060033 	.word	0x60060033
    6270:	06006600 	.word	0x06006600
    6274:	00330060 	.word	0x00330060
	...
    6280:	000c0000 	.word	0x000c0000
    6284:	12002001 	.word	0x12002001
    6288:	00c00000 	.word	0x00c00000
	...
    629c:	e0000000 	.word	0xe0000000
    62a0:	00000e00 	.word	0x00000e00
    62a4:	000000e0 	.word	0x000000e0
	...
    62b8:	00030030 	.word	0x00030030
    62bc:	00000000 	.word	0x00000000
    62c0:	10000000 	.word	0x10000000
    62c4:	00000100 	.word	0x00000100
    62c8:	00010010 	.word	0x00010010
    62cc:	00000e00 	.word	0x00000e00
    62d0:	3c00001c 	.word	0x3c00001c
    62d4:	00700000 	.word	0x00700000
    62d8:	00020038 	.word	0x00020038
    62dc:	e0010000 	.word	0xe0010000
    62e0:	06007e00 	.word	0x06007e00
    62e4:	00600000 	.word	0x00600000
    62e8:	3e000006 	.word	0x3e000006
    62ec:	00e00700 	.word	0x00e00700
	...
    62f8:	80380000 	.word	0x80380000
    62fc:	6e00c807 	.word	0x6e00c807
    6300:	00780680 	.word	0x00780680
    6304:	18028063 	.word	0x18028063
	...
    6318:	0f00ff00 	.word	0x0f00ff00
    631c:	00ff00f0 	.word	0x00ff00f0
    6320:	ff00f00f 	.word	0xff00f00f
    6324:	00f00f00 	.word	0x00f00f00
	...
    6340:	ffffffff 	.word	0xffffffff
    6344:	677537ff 	.word	0x677537ff
    6348:	71312c6a 	.word	0x71312c6a
    634c:	38ffffff 	.word	0x38ffffff
    6350:	ff6b6869 	.word	0xff6b6869
    6354:	7aff7732 	.word	0x7aff7732
    6358:	6f3039ff 	.word	0x6f3039ff
    635c:	65332e6c 	.word	0x65332e6c
    6360:	ffff7861 	.word	0xffff7861
    6364:	2f3b702d 	.word	0x2f3b702d
    6368:	63737234 	.word	0x63737234
    636c:	5b3dff20 	.word	0x5b3dff20
    6370:	7435ff27 	.word	0x7435ff27
    6374:	ff6e7664 	.word	0xff6e7664
    6378:	5cff5d27 	.word	0x5cff5d27
    637c:	62667936 	.word	0x62667936
    6380:	ffffff6d 	.word	0xffffff6d
    6384:	0000ffff 	.word	0x0000ffff
    6388:	ffffffff 	.word	0xffffffff
    638c:	475526ff 	.word	0x475526ff
    6390:	51213c4a 	.word	0x51213c4a
    6394:	2affffff 	.word	0x2affffff
    6398:	ff4b4849 	.word	0xff4b4849
    639c:	5aff5740 	.word	0x5aff5740
    63a0:	4f2928ff 	.word	0x4f2928ff
    63a4:	45233e4c 	.word	0x45233e4c
    63a8:	ffff5841 	.word	0xffff5841
    63ac:	3f3a505f 	.word	0x3f3a505f
    63b0:	43535224 	.word	0x43535224
    63b4:	7b2bff20 	.word	0x7b2bff20
    63b8:	5425ff22 	.word	0x5425ff22
    63bc:	ff4e5644 	.word	0xff4e5644
    63c0:	7cff7d7e 	.word	0x7cff7d7e
    63c4:	4246595e 	.word	0x4246595e
    63c8:	ffffff4d 	.word	0xffffff4d
    63cc:	0000ffff 	.word	0x0000ffff

000063d0 <kb_col>:
    63d0:	00010000 00020000 00040000 00080000     ................
    63e0:	00100000 00200000 08000000              ...... .....

000063ec <kb_col_index>:
    63ec:	00000010 00000011 00000012 00000013     ................
    63fc:	00000014 00000015 0000001b              ............

00006408 <kb_row>:
    6408:	00000004 00000008 00000010 00000020     ............ ...
    6418:	00000040 00000080 00000400 00000800     @...............
    6428:	00001000 00002000                       ..... ..

00006430 <kb_row_index>:
    6430:	00000002 00000003 00000004 00000005     ................
    6440:	00000006 00000007 0000000a 0000000b     ................
    6450:	0000000c 0000000d                       ........

00006458 <beelzebub.12954>:
    6458:	2e002d00 44003200 88005300 f300b600     .-...2.D.S......
    6468:	64012201 d4019201 08020702 5f023402     .".d.........4._
    6478:	94027802 bb02a602 db02ca02 f902e802     .x..............
    6488:	7f031f03                                ....

0000648c <belial.12951>:
    648c:	f0f0f0f0 b0b0b0f0 b1b6b6b6 b7b7b1b1     ................
    649c:	b2b2b2b7 bfb8b8b8 b9b3b3b3 b5b5b9b9     ................
    64ac:	babac2b5 bcbcbcba bebdbdbd f0f0f0be     ................
    64bc:	b1b1f0f0 b8b7b7b6 bcb8b8b8 c9c9bcbc     ................
    64cc:	35c9c9c9 0000363a                       ...5:6..

000064d4 <lucifer.12953>:
    64d4:	0852aa55 0d0d0d01 0d343434 34340d0d     U.R.....444...44
    64e4:	00000034 01242424 340f0f0f 08083434     4...$$$....444..
    64f4:	24240308 00780024 00007800 52aa5589     ..$$$.x..x...U.R
    6504:	00cc0008 01707005 02030303 02d00000     .....pp.........
    6514:	00505050 00000055                       PPP.U...

0000651c <mulciber.12952>:
    651c:	03020100 02010004 00020100 01000201     ................
    652c:	02010002 00020100 01000201 01000002     ................
    653c:	02010000 00020100 01000201 03020100     ................
    654c:	00000004 01000100 01000302 02010002     ................
    655c:	00000403 00000000 69726553 4f206c61     ........Serial O
    656c:	3639204b 38203030 0d0a314e 00000000     K 9600 8N1......

0000657c <_global_impure_ptr>:
    657c:	2000015c                                \.. 

00006580 <__sf_fake_stderr>:
	...

000065a0 <__sf_fake_stdin>:
	...

000065c0 <__sf_fake_stdout>:
	...
    65e0:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    65f0:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    6600:	31300046 35343332 39383736 64636261     F.0123456789abcd
    6610:	00006665                                ef..

00006614 <_init>:
    6614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6616:	46c0      	nop			; (mov r8, r8)
    6618:	bcf8      	pop	{r3, r4, r5, r6, r7}
    661a:	bc08      	pop	{r3}
    661c:	469e      	mov	lr, r3
    661e:	4770      	bx	lr

00006620 <__init_array_start>:
    6620:	000000dd 	.word	0x000000dd

00006624 <_fini>:
    6624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6626:	46c0      	nop			; (mov r8, r8)
    6628:	bcf8      	pop	{r3, r4, r5, r6, r7}
    662a:	bc08      	pop	{r3}
    662c:	469e      	mov	lr, r3
    662e:	4770      	bx	lr

00006630 <__fini_array_start>:
    6630:	000000b5 	.word	0x000000b5
