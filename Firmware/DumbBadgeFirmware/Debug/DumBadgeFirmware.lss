
DumBadgeFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007e38  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001d8  20000000  00007e38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000998  200001d8  00008010  000201d8  2**2
                  ALLOC
  3 .stack        00002000  20000b70  000089a8  000201d8  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
  6 .debug_info   0003d835  00000000  00000000  00020259  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005d62  00000000  00000000  0005da8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00007577  00000000  00000000  000637f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000008f0  00000000  00000000  0006ad67  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000ae8  00000000  00000000  0006b657  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001fb4c  00000000  00000000  0006c13f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001533e  00000000  00000000  0008bc8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0009057d  00000000  00000000  000a0fc9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001ee0  00000000  00000000  00131548  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
	// Keep the default device state after reset
	SystemCoreClock = __SYSTEM_CLOCK;
       0:	70 2b 00 20 79 2f 00 00 75 2f 00 00 75 2f 00 00     p+. y/..u/..u/..
	...
	config->stopbits         = USART_STOPBITS_1;
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
	config->baudrate         = 9600;
	config->receiver_enable  = true;
	config->transmitter_enable = true;
	config->clock_polarity_inverted = false;
      2c:	75 2f 00 00 00 00 00 00 00 00 00 00 75 2f 00 00     u/..........u/..
	config->use_external_clock = false;
	config->ext_clock_freq   = 0;
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
	config->generator_source = GCLK_GENERATOR_0;
      3c:	01 40 00 00 75 2f 00 00 75 2f 00 00 75 2f 00 00     .@..u/..u/..u/..
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
	config->receive_pulse_length                    = 19;
      4c:	75 2f 00 00 75 2f 00 00 75 2f 00 00 75 2f 00 00     u/..u/..u/..u/..
	usart_get_config_defaults(&config_usart);

	config_usart.baudrate    = SERCOMBAUD;
	config_usart.mux_setting = SERCOMMUX;
	config_usart.pinmux_pad0 = SERCOMPAD0;
	config_usart.pinmux_pad1 = SERCOMPAD1;
      5c:	75 2f 00 00 75 2f 00 00 91 21 00 00 a1 21 00 00     u/..u/...!...!..
	config_usart.pinmux_pad2 = SERCOMPAD2;
	config_usart.pinmux_pad3 = SERCOMPAD3;

	while (usart_init(&usart_instance,	 SERCOMMODULE, &config_usart) != STATUS_OK) { }
      6c:	b1 21 00 00 c1 21 00 00 d1 21 00 00 e1 21 00 00     .!...!...!...!..
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
      7c:	75 2f 00 00 75 2f 00 00 75 2f 00 00 75 2f 00 00     u/..u/..u/..u/..
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	if (usart_init(module, hw, config) == STATUS_OK) {
      8c:	75 2f 00 00 75 2f 00 00 75 2f 00 00 75 2f 00 00     u/..u/..u/..u/..
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
      9c:	c5 1c 00 00 75 2f 00 00 75 2f 00 00 75 2f 00 00     ....u/..u/..u/..
	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
      ac:	75 2f 00 00 00 00 00 00                             u/......

000000b4 <__do_global_dtors_aux>:
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
      ba:	2b00      	cmp	r3, #0
	return (usart_hw->SYNCBUSY.reg);
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
	while (usart_is_syncing(module)) {
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop

	stdio_serial_init(&usart_instance, SERCOMMODULE, &config_usart);
	usart_enable(&usart_instance);
}
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200001d8 	.word	0x200001d8
      d4:	00000000 	.word	0x00000000
      d8:	00007e38 	.word	0x00007e38

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200001dc 	.word	0x200001dc
     108:	00007e38 	.word	0x00007e38
     10c:	00007e38 	.word	0x00007e38
     110:	00000000 	.word	0x00000000

00000114 <ring_init>:
	cbuf->full = false;
	cbuf->tail = (cbuf->tail + 1) % cbuf->max;
}

cbuf_handle_t ring_init(uint8_t* buffer, uint16_t size)
{
     114:	b570      	push	{r4, r5, r6, lr}
     116:	0005      	movs	r5, r0
     118:	000c      	movs	r4, r1
	cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
     11a:	200c      	movs	r0, #12
     11c:	4b04      	ldr	r3, [pc, #16]	; (130 <ring_init+0x1c>)
     11e:	4798      	blx	r3

	cbuf->buffer = buffer;
     120:	6005      	str	r5, [r0, #0]
	cbuf->max = size;
     122:	8104      	strh	r4, [r0, #8]
	return cbuf;
}

void ring_reset(cbuf_handle_t cbuf)
{
	cbuf->head = 0;
     124:	2300      	movs	r3, #0
     126:	8083      	strh	r3, [r0, #4]
	cbuf->tail = 0;
     128:	80c3      	strh	r3, [r0, #6]
	cbuf->full = false;
     12a:	7283      	strb	r3, [r0, #10]
}
     12c:	bd70      	pop	{r4, r5, r6, pc}
     12e:	46c0      	nop			; (mov r8, r8)
     130:	00004799 	.word	0x00004799

00000134 <ring_reset>:
	cbuf->head = 0;
     134:	2300      	movs	r3, #0
     136:	8083      	strh	r3, [r0, #4]
	cbuf->tail = 0;
     138:	80c3      	strh	r3, [r0, #6]
	cbuf->full = false;
     13a:	7283      	strb	r3, [r0, #10]
}
     13c:	4770      	bx	lr
	...

00000140 <ring_put>:

void ring_put(cbuf_handle_t cbuf, uint8_t data)
{
     140:	b510      	push	{r4, lr}
     142:	0004      	movs	r4, r0
	cbuf->buffer[cbuf->head] = data;
     144:	8883      	ldrh	r3, [r0, #4]
     146:	005b      	lsls	r3, r3, #1
     148:	6802      	ldr	r2, [r0, #0]
     14a:	5299      	strh	r1, [r3, r2]
	if(cbuf->full)
     14c:	7a83      	ldrb	r3, [r0, #10]
     14e:	2b00      	cmp	r3, #0
     150:	d005      	beq.n	15e <ring_put+0x1e>
		cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     152:	88c0      	ldrh	r0, [r0, #6]
     154:	3001      	adds	r0, #1
     156:	8921      	ldrh	r1, [r4, #8]
     158:	4b07      	ldr	r3, [pc, #28]	; (178 <ring_put+0x38>)
     15a:	4798      	blx	r3
     15c:	80e1      	strh	r1, [r4, #6]
	cbuf->head = (cbuf->head + 1) % cbuf->max;
     15e:	88a0      	ldrh	r0, [r4, #4]
     160:	3001      	adds	r0, #1
     162:	8921      	ldrh	r1, [r4, #8]
     164:	4b04      	ldr	r3, [pc, #16]	; (178 <ring_put+0x38>)
     166:	4798      	blx	r3
     168:	b28b      	uxth	r3, r1
     16a:	80a3      	strh	r3, [r4, #4]
	cbuf->full = (cbuf->head == cbuf->tail);
     16c:	88e1      	ldrh	r1, [r4, #6]
     16e:	1ac9      	subs	r1, r1, r3
     170:	424a      	negs	r2, r1
     172:	414a      	adcs	r2, r1
     174:	72a2      	strb	r2, [r4, #10]

	advance_pointer(cbuf);
}
     176:	bd10      	pop	{r4, pc}
     178:	000046b9 	.word	0x000046b9

0000017c <ring_empty>:
	return r;
}

bool ring_empty(cbuf_handle_t cbuf)
{
	return (!cbuf->full && (cbuf->head == cbuf->tail));
     17c:	7a82      	ldrb	r2, [r0, #10]
     17e:	2300      	movs	r3, #0
     180:	2a00      	cmp	r2, #0
     182:	d105      	bne.n	190 <ring_empty+0x14>
     184:	8883      	ldrh	r3, [r0, #4]
     186:	88c0      	ldrh	r0, [r0, #6]
     188:	1a1b      	subs	r3, r3, r0
     18a:	4258      	negs	r0, r3
     18c:	4143      	adcs	r3, r0
     18e:	b2db      	uxtb	r3, r3
     190:	0018      	movs	r0, r3
}
     192:	4770      	bx	lr

00000194 <ring_get>:
{
     194:	b570      	push	{r4, r5, r6, lr}
     196:	0004      	movs	r4, r0
     198:	000d      	movs	r5, r1
	if(!ring_empty(cbuf))
     19a:	4b0b      	ldr	r3, [pc, #44]	; (1c8 <ring_get+0x34>)
     19c:	4798      	blx	r3
     19e:	2800      	cmp	r0, #0
     1a0:	d10e      	bne.n	1c0 <ring_get+0x2c>
		*data = cbuf->buffer[cbuf->tail];
     1a2:	88e3      	ldrh	r3, [r4, #6]
     1a4:	005b      	lsls	r3, r3, #1
     1a6:	6822      	ldr	r2, [r4, #0]
     1a8:	5a9b      	ldrh	r3, [r3, r2]
     1aa:	702b      	strb	r3, [r5, #0]
	cbuf->full = false;
     1ac:	2300      	movs	r3, #0
     1ae:	72a3      	strb	r3, [r4, #10]
	cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     1b0:	88e0      	ldrh	r0, [r4, #6]
     1b2:	3001      	adds	r0, #1
     1b4:	8921      	ldrh	r1, [r4, #8]
     1b6:	4b05      	ldr	r3, [pc, #20]	; (1cc <ring_get+0x38>)
     1b8:	4798      	blx	r3
     1ba:	80e1      	strh	r1, [r4, #6]
		r = 0;
     1bc:	2000      	movs	r0, #0
}
     1be:	bd70      	pop	{r4, r5, r6, pc}
	int r = -1;
     1c0:	2001      	movs	r0, #1
     1c2:	4240      	negs	r0, r0
	return r;
     1c4:	e7fb      	b.n	1be <ring_get+0x2a>
     1c6:	46c0      	nop			; (mov r8, r8)
     1c8:	0000017d 	.word	0x0000017d
     1cc:	000046b9 	.word	0x000046b9

000001d0 <isEmptyParser>:
int rearParam = -1;
int rearParser = -1;

bool isEmptyParser(void)
{
	if(frontParser == -1)
     1d0:	4b03      	ldr	r3, [pc, #12]	; (1e0 <isEmptyParser+0x10>)
     1d2:	6818      	ldr	r0, [r3, #0]
     1d4:	3001      	adds	r0, #1
     1d6:	4243      	negs	r3, r0
     1d8:	4158      	adcs	r0, r3
     1da:	b2c0      	uxtb	r0, r0
	{
		return true;
	}
	return false;
}
     1dc:	4770      	bx	lr
     1de:	46c0      	nop			; (mov r8, r8)
     1e0:	20000008 	.word	0x20000008

000001e4 <dequeueParser>:
}
char dequeueParser(void)
{
	char temp;
	
	temp = queueParser[frontParser];
     1e4:	4a08      	ldr	r2, [pc, #32]	; (208 <dequeueParser+0x24>)
     1e6:	6813      	ldr	r3, [r2, #0]
     1e8:	4908      	ldr	r1, [pc, #32]	; (20c <dequeueParser+0x28>)
     1ea:	5cc8      	ldrb	r0, [r1, r3]
	frontParser++;
     1ec:	3301      	adds	r3, #1
     1ee:	6013      	str	r3, [r2, #0]
	if(frontParser > rearParser)
     1f0:	4a07      	ldr	r2, [pc, #28]	; (210 <dequeueParser+0x2c>)
     1f2:	6812      	ldr	r2, [r2, #0]
     1f4:	4293      	cmp	r3, r2
     1f6:	dd05      	ble.n	204 <dequeueParser+0x20>
	{
		frontParser = rearParser = -1;
     1f8:	2301      	movs	r3, #1
     1fa:	425b      	negs	r3, r3
     1fc:	4a04      	ldr	r2, [pc, #16]	; (210 <dequeueParser+0x2c>)
     1fe:	6013      	str	r3, [r2, #0]
     200:	4a01      	ldr	r2, [pc, #4]	; (208 <dequeueParser+0x24>)
     202:	6013      	str	r3, [r2, #0]
	}
	return temp;
}
     204:	4770      	bx	lr
     206:	46c0      	nop			; (mov r8, r8)
     208:	20000008 	.word	0x20000008
     20c:	200002cc 	.word	0x200002cc
     210:	20000010 	.word	0x20000010

00000214 <enqueueParser>:
void enqueueParser(char data)
{
	if(frontParser == -1)
     214:	4b07      	ldr	r3, [pc, #28]	; (234 <enqueueParser+0x20>)
     216:	681b      	ldr	r3, [r3, #0]
     218:	3301      	adds	r3, #1
     21a:	d006      	beq.n	22a <enqueueParser+0x16>
	{
		frontParser = 0;
	}
	rearParser++;
     21c:	4a06      	ldr	r2, [pc, #24]	; (238 <enqueueParser+0x24>)
     21e:	6813      	ldr	r3, [r2, #0]
     220:	3301      	adds	r3, #1
     222:	6013      	str	r3, [r2, #0]
	queueParser[rearParser] = data;
     224:	4a05      	ldr	r2, [pc, #20]	; (23c <enqueueParser+0x28>)
     226:	54d0      	strb	r0, [r2, r3]
}
     228:	4770      	bx	lr
		frontParser = 0;
     22a:	2200      	movs	r2, #0
     22c:	4b01      	ldr	r3, [pc, #4]	; (234 <enqueueParser+0x20>)
     22e:	601a      	str	r2, [r3, #0]
     230:	e7f4      	b.n	21c <enqueueParser+0x8>
     232:	46c0      	nop			; (mov r8, r8)
     234:	20000008 	.word	0x20000008
     238:	20000010 	.word	0x20000010
     23c:	200002cc 	.word	0x200002cc

00000240 <isEmptyParam>:
bool isEmptyParam(void)
{
	if(frontParam == -1)
     240:	4b03      	ldr	r3, [pc, #12]	; (250 <isEmptyParam+0x10>)
     242:	6818      	ldr	r0, [r3, #0]
     244:	3001      	adds	r0, #1
     246:	4243      	negs	r3, r0
     248:	4158      	adcs	r0, r3
     24a:	b2c0      	uxtb	r0, r0
	{
		return true;
	}
	return false;
}
     24c:	4770      	bx	lr
     24e:	46c0      	nop			; (mov r8, r8)
     250:	20000004 	.word	0x20000004

00000254 <dequeueParam>:
}
uint8_t dequeueParam(void)
{
	uint8_t temp;
	
	temp = queueParam[frontParam];
     254:	4a08      	ldr	r2, [pc, #32]	; (278 <dequeueParam+0x24>)
     256:	6813      	ldr	r3, [r2, #0]
     258:	4908      	ldr	r1, [pc, #32]	; (27c <dequeueParam+0x28>)
     25a:	5cc8      	ldrb	r0, [r1, r3]
	frontParam++;
     25c:	3301      	adds	r3, #1
     25e:	6013      	str	r3, [r2, #0]
	if(frontParam > rearParam)
     260:	4a07      	ldr	r2, [pc, #28]	; (280 <dequeueParam+0x2c>)
     262:	6812      	ldr	r2, [r2, #0]
     264:	4293      	cmp	r3, r2
     266:	dd05      	ble.n	274 <dequeueParam+0x20>
	{
		frontParam = rearParam = -1;
     268:	2301      	movs	r3, #1
     26a:	425b      	negs	r3, r3
     26c:	4a04      	ldr	r2, [pc, #16]	; (280 <dequeueParam+0x2c>)
     26e:	6013      	str	r3, [r2, #0]
     270:	4a01      	ldr	r2, [pc, #4]	; (278 <dequeueParam+0x24>)
     272:	6013      	str	r3, [r2, #0]
	}

	return temp;
}
     274:	4770      	bx	lr
     276:	46c0      	nop			; (mov r8, r8)
     278:	20000004 	.word	0x20000004
     27c:	20000300 	.word	0x20000300
     280:	2000000c 	.word	0x2000000c

00000284 <enqueueParam>:
void enqueueParam(uint8_t data)
{

	if(frontParam == -1)
     284:	4b07      	ldr	r3, [pc, #28]	; (2a4 <enqueueParam+0x20>)
     286:	681b      	ldr	r3, [r3, #0]
     288:	3301      	adds	r3, #1
     28a:	d006      	beq.n	29a <enqueueParam+0x16>
	{
		frontParam = 0;
	}
	rearParam++;
     28c:	4a06      	ldr	r2, [pc, #24]	; (2a8 <enqueueParam+0x24>)
     28e:	6813      	ldr	r3, [r2, #0]
     290:	3301      	adds	r3, #1
     292:	6013      	str	r3, [r2, #0]
	queueParam[rearParam] = data;
     294:	4a05      	ldr	r2, [pc, #20]	; (2ac <enqueueParam+0x28>)
     296:	54d0      	strb	r0, [r2, r3]
}
     298:	4770      	bx	lr
		frontParam = 0;
     29a:	2200      	movs	r2, #0
     29c:	4b01      	ldr	r3, [pc, #4]	; (2a4 <enqueueParam+0x20>)
     29e:	601a      	str	r2, [r3, #0]
     2a0:	e7f4      	b.n	28c <enqueueParam+0x8>
     2a2:	46c0      	nop			; (mov r8, r8)
     2a4:	20000004 	.word	0x20000004
     2a8:	2000000c 	.word	0x2000000c
     2ac:	20000300 	.word	0x20000300

000002b0 <clearQueues>:
void clearQueues(void)
{
     2b0:	b530      	push	{r4, r5, lr}

	for(int i = 0 ; i < (MAXSIZE - 1) ; i++)
     2b2:	4b0e      	ldr	r3, [pc, #56]	; (2ec <clearQueues+0x3c>)
     2b4:	6818      	ldr	r0, [r3, #0]
     2b6:	1e43      	subs	r3, r0, #1
     2b8:	2b00      	cmp	r3, #0
     2ba:	dd0b      	ble.n	2d4 <clearQueues+0x24>
     2bc:	0018      	movs	r0, r3
     2be:	2300      	movs	r3, #0
	{
		queueParam[i] = 0;
     2c0:	4d0b      	ldr	r5, [pc, #44]	; (2f0 <clearQueues+0x40>)
     2c2:	2200      	movs	r2, #0
		queueParser[i] = 0;
     2c4:	4c0b      	ldr	r4, [pc, #44]	; (2f4 <clearQueues+0x44>)
		queueParam[i] = 0;
     2c6:	1959      	adds	r1, r3, r5
     2c8:	700a      	strb	r2, [r1, #0]
		queueParser[i] = 0;
     2ca:	1919      	adds	r1, r3, r4
     2cc:	700a      	strb	r2, [r1, #0]
	for(int i = 0 ; i < (MAXSIZE - 1) ; i++)
     2ce:	3301      	adds	r3, #1
     2d0:	4283      	cmp	r3, r0
     2d2:	d1f8      	bne.n	2c6 <clearQueues+0x16>
	}
	
	frontParser = -1;
     2d4:	2301      	movs	r3, #1
     2d6:	425b      	negs	r3, r3
     2d8:	4a07      	ldr	r2, [pc, #28]	; (2f8 <clearQueues+0x48>)
     2da:	6013      	str	r3, [r2, #0]
	frontParam = -1;
     2dc:	4a07      	ldr	r2, [pc, #28]	; (2fc <clearQueues+0x4c>)
     2de:	6013      	str	r3, [r2, #0]
	rearParam = -1;
     2e0:	4a07      	ldr	r2, [pc, #28]	; (300 <clearQueues+0x50>)
     2e2:	6013      	str	r3, [r2, #0]
	rearParser = -1;
     2e4:	4a07      	ldr	r2, [pc, #28]	; (304 <clearQueues+0x54>)
     2e6:	6013      	str	r3, [r2, #0]
}
     2e8:	bd30      	pop	{r4, r5, pc}
     2ea:	46c0      	nop			; (mov r8, r8)
     2ec:	20000000 	.word	0x20000000
     2f0:	20000300 	.word	0x20000300
     2f4:	200002cc 	.word	0x200002cc
     2f8:	20000008 	.word	0x20000008
     2fc:	20000004 	.word	0x20000004
     300:	2000000c 	.word	0x2000000c
     304:	20000010 	.word	0x20000010

00000308 <queueTransmogrifier>:
void queueTransmogrifier(void)
{
     308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	[24],[80]
	
	It's like reimplementing atoi() but it's not an interview question.
	*/
	
	int param = 0;
     30a:	2500      	movs	r5, #0
	char currentByte;
	
	while(!isEmptyParser())
     30c:	4e0c      	ldr	r6, [pc, #48]	; (340 <queueTransmogrifier+0x38>)
	{
		
		currentByte = dequeueParser();		//deque from parser
     30e:	4f0d      	ldr	r7, [pc, #52]	; (344 <queueTransmogrifier+0x3c>)

		if(currentByte == 0x3B || currentByte == 0x3F) //if it's ';' or '?'
		{
			enqueueParam(param);
     310:	4c0d      	ldr	r4, [pc, #52]	; (348 <queueTransmogrifier+0x40>)
	while(!isEmptyParser())
     312:	e002      	b.n	31a <queueTransmogrifier+0x12>
			enqueueParam(param);
     314:	b2e8      	uxtb	r0, r5
     316:	47a0      	blx	r4
			param = 0;
     318:	2500      	movs	r5, #0
	while(!isEmptyParser())
     31a:	47b0      	blx	r6
     31c:	2800      	cmp	r0, #0
     31e:	d10a      	bne.n	336 <queueTransmogrifier+0x2e>
		currentByte = dequeueParser();		//deque from parser
     320:	47b8      	blx	r7
		if(currentByte == 0x3B || currentByte == 0x3F) //if it's ';' or '?'
     322:	23fb      	movs	r3, #251	; 0xfb
     324:	4003      	ands	r3, r0
     326:	2b3b      	cmp	r3, #59	; 0x3b
     328:	d0f4      	beq.n	314 <queueTransmogrifier+0xc>
		}
		else
		{
			param = (10 * param) + (int)(currentByte-48);
     32a:	00ab      	lsls	r3, r5, #2
     32c:	195d      	adds	r5, r3, r5
     32e:	006d      	lsls	r5, r5, #1
     330:	3830      	subs	r0, #48	; 0x30
     332:	1945      	adds	r5, r0, r5
     334:	e7f1      	b.n	31a <queueTransmogrifier+0x12>
		}
	}
	enqueueParam(param);
     336:	b2e8      	uxtb	r0, r5
     338:	4b03      	ldr	r3, [pc, #12]	; (348 <queueTransmogrifier+0x40>)
     33a:	4798      	blx	r3
}
     33c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     33e:	46c0      	nop			; (mov r8, r8)
     340:	000001d1 	.word	0x000001d1
     344:	000001e5 	.word	0x000001e5
     348:	00000285 	.word	0x00000285

0000034c <CSIignoreState>:
	}
}

void CSIignoreState(uint8_t character)
{
	if(character == 0x1B)
     34c:	281b      	cmp	r0, #27
     34e:	d000      	beq.n	352 <CSIignoreState+0x6>
	{
		currentState = stateGround;
	}
}
     350:	4770      	bx	lr
		currentState = stateGround;
     352:	2200      	movs	r2, #0
     354:	4b01      	ldr	r3, [pc, #4]	; (35c <CSIignoreState+0x10>)
     356:	701a      	strb	r2, [r3, #0]
}
     358:	e7fa      	b.n	350 <CSIignoreState+0x4>
     35a:	46c0      	nop			; (mov r8, r8)
     35c:	200002bd 	.word	0x200002bd

00000360 <SC>:
/************************************************************************/

void SC()
{
	//Save cursor position
	DECSCX = xCharPos;
     360:	4b05      	ldr	r3, [pc, #20]	; (378 <SC+0x18>)
     362:	881a      	ldrh	r2, [r3, #0]
     364:	4b05      	ldr	r3, [pc, #20]	; (37c <SC+0x1c>)
     366:	701a      	strb	r2, [r3, #0]
	DECSCY = yCharPos;
     368:	4b05      	ldr	r3, [pc, #20]	; (380 <SC+0x20>)
     36a:	881a      	ldrh	r2, [r3, #0]
     36c:	4b05      	ldr	r3, [pc, #20]	; (384 <SC+0x24>)
     36e:	701a      	strb	r2, [r3, #0]
	currentState = stateGround;
     370:	2200      	movs	r2, #0
     372:	4b05      	ldr	r3, [pc, #20]	; (388 <SC+0x28>)
     374:	701a      	strb	r2, [r3, #0]
}
     376:	4770      	bx	lr
     378:	200002b8 	.word	0x200002b8
     37c:	200001f4 	.word	0x200001f4
     380:	200002ba 	.word	0x200002ba
     384:	200001f5 	.word	0x200001f5
     388:	200002bd 	.word	0x200002bd

0000038c <RC>:

void RC()
{
     38c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//Restore cursor to saved position
	
	char tempCharacter;
	
	drawChar(consoleDisplay[xCharPos][yCharPos]);
     38e:	4c0f      	ldr	r4, [pc, #60]	; (3cc <RC+0x40>)
     390:	4f0f      	ldr	r7, [pc, #60]	; (3d0 <RC+0x44>)
     392:	883a      	ldrh	r2, [r7, #0]
     394:	4e0f      	ldr	r6, [pc, #60]	; (3d4 <RC+0x48>)
     396:	8831      	ldrh	r1, [r6, #0]
     398:	0053      	lsls	r3, r2, #1
     39a:	189b      	adds	r3, r3, r2
     39c:	00db      	lsls	r3, r3, #3
     39e:	18e3      	adds	r3, r4, r3
     3a0:	5c58      	ldrb	r0, [r3, r1]
     3a2:	4d0d      	ldr	r5, [pc, #52]	; (3d8 <RC+0x4c>)
     3a4:	47a8      	blx	r5
	xCharPos = DECSCX;
     3a6:	4b0d      	ldr	r3, [pc, #52]	; (3dc <RC+0x50>)
     3a8:	781a      	ldrb	r2, [r3, #0]
     3aa:	803a      	strh	r2, [r7, #0]
	yCharPos = DECSCY;
     3ac:	4b0c      	ldr	r3, [pc, #48]	; (3e0 <RC+0x54>)
     3ae:	7819      	ldrb	r1, [r3, #0]
     3b0:	8031      	strh	r1, [r6, #0]
	tempCharacter = consoleDisplay[xCharPos][yCharPos];
     3b2:	0053      	lsls	r3, r2, #1
     3b4:	189b      	adds	r3, r3, r2
     3b6:	00db      	lsls	r3, r3, #3
     3b8:	18e3      	adds	r3, r4, r3
	drawChar(tempCharacter);
     3ba:	5c58      	ldrb	r0, [r3, r1]
     3bc:	47a8      	blx	r5
	blinkCursor();
     3be:	4b09      	ldr	r3, [pc, #36]	; (3e4 <RC+0x58>)
     3c0:	4798      	blx	r3
	currentState = stateGround;
     3c2:	2200      	movs	r2, #0
     3c4:	4b08      	ldr	r3, [pc, #32]	; (3e8 <RC+0x5c>)
     3c6:	701a      	strb	r2, [r3, #0]
}
     3c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     3ca:	46c0      	nop			; (mov r8, r8)
     3cc:	200003c0 	.word	0x200003c0
     3d0:	200002b8 	.word	0x200002b8
     3d4:	200002ba 	.word	0x200002ba
     3d8:	0000312d 	.word	0x0000312d
     3dc:	200001f4 	.word	0x200001f4
     3e0:	200001f5 	.word	0x200001f5
     3e4:	00003215 	.word	0x00003215
     3e8:	200002bd 	.word	0x200002bd

000003ec <IND>:

void IND()
{
     3ec:	b570      	push	{r4, r5, r6, lr}
	//performs newline() if row = 24
	
	char tempCharacter;
	int xTemp = 0;
	
	if(yCharPos < 23)
     3ee:	4b19      	ldr	r3, [pc, #100]	; (454 <IND+0x68>)
     3f0:	881a      	ldrh	r2, [r3, #0]
     3f2:	2a16      	cmp	r2, #22
     3f4:	d914      	bls.n	420 <IND+0x34>
		drawChar(tempCharacter);
		blinkCursor();
	}
	else
	{
		xTemp = xCharPos;
     3f6:	4d18      	ldr	r5, [pc, #96]	; (458 <IND+0x6c>)
     3f8:	882c      	ldrh	r4, [r5, #0]
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     3fa:	0063      	lsls	r3, r4, #1
     3fc:	191b      	adds	r3, r3, r4
     3fe:	00db      	lsls	r3, r3, #3
     400:	4916      	ldr	r1, [pc, #88]	; (45c <IND+0x70>)
     402:	18cb      	adds	r3, r1, r3
     404:	5c98      	ldrb	r0, [r3, r2]
     406:	4e16      	ldr	r6, [pc, #88]	; (460 <IND+0x74>)
     408:	47b0      	blx	r6
		newLine();
     40a:	4b16      	ldr	r3, [pc, #88]	; (464 <IND+0x78>)
     40c:	4798      	blx	r3
		drawChar(0x00);
     40e:	2000      	movs	r0, #0
     410:	47b0      	blx	r6
		xCharPos = xTemp;
     412:	802c      	strh	r4, [r5, #0]
		blinkCursor();
     414:	4b14      	ldr	r3, [pc, #80]	; (468 <IND+0x7c>)
     416:	4798      	blx	r3
	}
		
		currentState = stateGround;	
     418:	2200      	movs	r2, #0
     41a:	4b14      	ldr	r3, [pc, #80]	; (46c <IND+0x80>)
     41c:	701a      	strb	r2, [r3, #0]
}
     41e:	bd70      	pop	{r4, r5, r6, pc}
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     420:	4c0e      	ldr	r4, [pc, #56]	; (45c <IND+0x70>)
     422:	4d0d      	ldr	r5, [pc, #52]	; (458 <IND+0x6c>)
     424:	8829      	ldrh	r1, [r5, #0]
     426:	004b      	lsls	r3, r1, #1
     428:	185b      	adds	r3, r3, r1
     42a:	00db      	lsls	r3, r3, #3
     42c:	18e3      	adds	r3, r4, r3
     42e:	5c98      	ldrb	r0, [r3, r2]
     430:	4e0b      	ldr	r6, [pc, #44]	; (460 <IND+0x74>)
     432:	47b0      	blx	r6
		yCharPos++;
     434:	4a07      	ldr	r2, [pc, #28]	; (454 <IND+0x68>)
     436:	8813      	ldrh	r3, [r2, #0]
     438:	3301      	adds	r3, #1
     43a:	b29b      	uxth	r3, r3
     43c:	8013      	strh	r3, [r2, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     43e:	8829      	ldrh	r1, [r5, #0]
     440:	004a      	lsls	r2, r1, #1
     442:	1852      	adds	r2, r2, r1
     444:	00d2      	lsls	r2, r2, #3
     446:	18a4      	adds	r4, r4, r2
		drawChar(tempCharacter);
     448:	5ce0      	ldrb	r0, [r4, r3]
     44a:	47b0      	blx	r6
		blinkCursor();
     44c:	4b06      	ldr	r3, [pc, #24]	; (468 <IND+0x7c>)
     44e:	4798      	blx	r3
     450:	e7e2      	b.n	418 <IND+0x2c>
     452:	46c0      	nop			; (mov r8, r8)
     454:	200002ba 	.word	0x200002ba
     458:	200002b8 	.word	0x200002b8
     45c:	200003c0 	.word	0x200003c0
     460:	0000312d 	.word	0x0000312d
     464:	00003371 	.word	0x00003371
     468:	00003215 	.word	0x00003215
     46c:	200002bd 	.word	0x200002bd

00000470 <NEL>:

void NEL()
{
     470:	b570      	push	{r4, r5, r6, lr}
	//new line, moves down one line and to the
	//first column (CR,LF) scrolls if row = 24
	
	char tempCharacter;
	
	if(yCharPos < 23)
     472:	4b18      	ldr	r3, [pc, #96]	; (4d4 <NEL+0x64>)
     474:	881a      	ldrh	r2, [r3, #0]
     476:	2a16      	cmp	r2, #22
     478:	d915      	bls.n	4a6 <NEL+0x36>
		drawChar(tempCharacter);
		blinkCursor();
	}
	else
	{
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     47a:	4c17      	ldr	r4, [pc, #92]	; (4d8 <NEL+0x68>)
     47c:	8821      	ldrh	r1, [r4, #0]
     47e:	004b      	lsls	r3, r1, #1
     480:	185b      	adds	r3, r3, r1
     482:	00db      	lsls	r3, r3, #3
     484:	4915      	ldr	r1, [pc, #84]	; (4dc <NEL+0x6c>)
     486:	18cb      	adds	r3, r1, r3
     488:	5c98      	ldrb	r0, [r3, r2]
     48a:	4d15      	ldr	r5, [pc, #84]	; (4e0 <NEL+0x70>)
     48c:	47a8      	blx	r5
		newLine();
     48e:	4b15      	ldr	r3, [pc, #84]	; (4e4 <NEL+0x74>)
     490:	4798      	blx	r3
		drawChar(0x00);
     492:	2000      	movs	r0, #0
     494:	47a8      	blx	r5
		xCharPos = 0;
     496:	2300      	movs	r3, #0
     498:	8023      	strh	r3, [r4, #0]
		blinkCursor();
     49a:	4b13      	ldr	r3, [pc, #76]	; (4e8 <NEL+0x78>)
     49c:	4798      	blx	r3
	}
		
	currentState = stateGround;
     49e:	2200      	movs	r2, #0
     4a0:	4b12      	ldr	r3, [pc, #72]	; (4ec <NEL+0x7c>)
     4a2:	701a      	strb	r2, [r3, #0]
}
     4a4:	bd70      	pop	{r4, r5, r6, pc}
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     4a6:	4c0d      	ldr	r4, [pc, #52]	; (4dc <NEL+0x6c>)
     4a8:	4d0b      	ldr	r5, [pc, #44]	; (4d8 <NEL+0x68>)
     4aa:	8829      	ldrh	r1, [r5, #0]
     4ac:	004b      	lsls	r3, r1, #1
     4ae:	185b      	adds	r3, r3, r1
     4b0:	00db      	lsls	r3, r3, #3
     4b2:	18e3      	adds	r3, r4, r3
     4b4:	5c98      	ldrb	r0, [r3, r2]
     4b6:	4e0a      	ldr	r6, [pc, #40]	; (4e0 <NEL+0x70>)
     4b8:	47b0      	blx	r6
		yCharPos++;
     4ba:	4a06      	ldr	r2, [pc, #24]	; (4d4 <NEL+0x64>)
     4bc:	8813      	ldrh	r3, [r2, #0]
     4be:	3301      	adds	r3, #1
     4c0:	b29b      	uxth	r3, r3
     4c2:	8013      	strh	r3, [r2, #0]
		xCharPos = 0;
     4c4:	2200      	movs	r2, #0
     4c6:	802a      	strh	r2, [r5, #0]
		drawChar(tempCharacter);
     4c8:	5ce0      	ldrb	r0, [r4, r3]
     4ca:	47b0      	blx	r6
		blinkCursor();
     4cc:	4b06      	ldr	r3, [pc, #24]	; (4e8 <NEL+0x78>)
     4ce:	4798      	blx	r3
     4d0:	e7e5      	b.n	49e <NEL+0x2e>
     4d2:	46c0      	nop			; (mov r8, r8)
     4d4:	200002ba 	.word	0x200002ba
     4d8:	200002b8 	.word	0x200002b8
     4dc:	200003c0 	.word	0x200003c0
     4e0:	0000312d 	.word	0x0000312d
     4e4:	00003371 	.word	0x00003371
     4e8:	00003215 	.word	0x00003215
     4ec:	200002bd 	.word	0x200002bd

000004f0 <RI>:

void RI()
{
     4f0:	b570      	push	{r4, r5, r6, lr}
	//Reverse Index
	//Moves the cursor to the same horizontal position on the preceding line
	
	char tempCharacter;
	
	if(yCharPos == 0)
     4f2:	4b10      	ldr	r3, [pc, #64]	; (534 <RI+0x44>)
     4f4:	881a      	ldrh	r2, [r3, #0]
     4f6:	2a00      	cmp	r2, #0
     4f8:	d103      	bne.n	502 <RI+0x12>
		yCharPos--;
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
		drawChar(tempCharacter);
		blinkCursor();
	}
	currentState = stateGround;
     4fa:	2200      	movs	r2, #0
     4fc:	4b0e      	ldr	r3, [pc, #56]	; (538 <RI+0x48>)
     4fe:	701a      	strb	r2, [r3, #0]
}
     500:	bd70      	pop	{r4, r5, r6, pc}
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     502:	4c0e      	ldr	r4, [pc, #56]	; (53c <RI+0x4c>)
     504:	4d0e      	ldr	r5, [pc, #56]	; (540 <RI+0x50>)
     506:	8829      	ldrh	r1, [r5, #0]
     508:	004b      	lsls	r3, r1, #1
     50a:	185b      	adds	r3, r3, r1
     50c:	00db      	lsls	r3, r3, #3
     50e:	18e3      	adds	r3, r4, r3
     510:	5c98      	ldrb	r0, [r3, r2]
     512:	4e0c      	ldr	r6, [pc, #48]	; (544 <RI+0x54>)
     514:	47b0      	blx	r6
		yCharPos--;
     516:	4a07      	ldr	r2, [pc, #28]	; (534 <RI+0x44>)
     518:	8813      	ldrh	r3, [r2, #0]
     51a:	3b01      	subs	r3, #1
     51c:	b29b      	uxth	r3, r3
     51e:	8013      	strh	r3, [r2, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     520:	8829      	ldrh	r1, [r5, #0]
     522:	004a      	lsls	r2, r1, #1
     524:	1852      	adds	r2, r2, r1
     526:	00d2      	lsls	r2, r2, #3
     528:	18a4      	adds	r4, r4, r2
		drawChar(tempCharacter);
     52a:	5ce0      	ldrb	r0, [r4, r3]
     52c:	47b0      	blx	r6
		blinkCursor();
     52e:	4b06      	ldr	r3, [pc, #24]	; (548 <RI+0x58>)
     530:	4798      	blx	r3
     532:	e7e2      	b.n	4fa <RI+0xa>
     534:	200002ba 	.word	0x200002ba
     538:	200002bd 	.word	0x200002bd
     53c:	200003c0 	.word	0x200003c0
     540:	200002b8 	.word	0x200002b8
     544:	0000312d 	.word	0x0000312d
     548:	00003215 	.word	0x00003215

0000054c <RIS>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     54c:	f3bf 8f4f 	dsb	sy
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
     550:	4a03      	ldr	r2, [pc, #12]	; (560 <RIS+0x14>)
     552:	4b04      	ldr	r3, [pc, #16]	; (564 <RIS+0x18>)
     554:	60da      	str	r2, [r3, #12]
     556:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     55a:	46c0      	nop			; (mov r8, r8)
     55c:	e7fd      	b.n	55a <RIS+0xe>
     55e:	46c0      	nop			; (mov r8, r8)
     560:	05fa0004 	.word	0x05fa0004
     564:	e000ed00 	.word	0xe000ed00

00000568 <escState>:
{
     568:	b510      	push	{r4, lr}
	if(character == 0x37)		//ESC + 7 - (DECSC) -
     56a:	2837      	cmp	r0, #55	; 0x37
     56c:	d021      	beq.n	5b2 <escState+0x4a>
	else if(character == 0x38)		//ESC + 8 - (DECRC) -
     56e:	2838      	cmp	r0, #56	; 0x38
     570:	d022      	beq.n	5b8 <escState+0x50>
	else if(character == 0x44)		//ESC + D - (IND) - 
     572:	2844      	cmp	r0, #68	; 0x44
     574:	d023      	beq.n	5be <escState+0x56>
	else if(character == 0x45)		//ESC + E - (NEL) -
     576:	2845      	cmp	r0, #69	; 0x45
     578:	d024      	beq.n	5c4 <escState+0x5c>
	else if(character == 0x48)		//ESC + H - (HTS) - 
     57a:	2848      	cmp	r0, #72	; 0x48
     57c:	d025      	beq.n	5ca <escState+0x62>
	else if(character == 0x4D)		//ESC + M - (RI)
     57e:	284d      	cmp	r0, #77	; 0x4d
     580:	d027      	beq.n	5d2 <escState+0x6a>
	else if(character == 0x59)		//ESC + Z (DECID)
     582:	2859      	cmp	r0, #89	; 0x59
     584:	d028      	beq.n	5d8 <escState+0x70>
	else if(character == 0x63)		//ESC + c - (RIS)
     586:	2863      	cmp	r0, #99	; 0x63
     588:	d02e      	beq.n	5e8 <escState+0x80>
	else if(character == 0x3E)		//ESC >
     58a:	283e      	cmp	r0, #62	; 0x3e
     58c:	d02e      	beq.n	5ec <escState+0x84>
	else if(character == 0x3D)		//ESC =
     58e:	283d      	cmp	r0, #61	; 0x3d
     590:	d030      	beq.n	5f4 <escState+0x8c>
	else if(character == 0x5D)		//ESC ]
     592:	285d      	cmp	r0, #93	; 0x5d
     594:	d032      	beq.n	5fc <escState+0x94>
	else if(character == 0x23 || character == 0x25 || character == 0x28 ||
     596:	22fd      	movs	r2, #253	; 0xfd
     598:	0003      	movs	r3, r0
     59a:	3b23      	subs	r3, #35	; 0x23
     59c:	4213      	tst	r3, r2
     59e:	d031      	beq.n	604 <escState+0x9c>
     5a0:	3b05      	subs	r3, #5
     5a2:	2b01      	cmp	r3, #1
     5a4:	d92e      	bls.n	604 <escState+0x9c>
	else if(character == 0x5B)
     5a6:	285b      	cmp	r0, #91	; 0x5b
     5a8:	d032      	beq.n	610 <escState+0xa8>
		currentState = stateGround;
     5aa:	2200      	movs	r2, #0
     5ac:	4b1a      	ldr	r3, [pc, #104]	; (618 <escState+0xb0>)
     5ae:	701a      	strb	r2, [r3, #0]
}
     5b0:	e02d      	b.n	60e <escState+0xa6>
		SC();
     5b2:	4b1a      	ldr	r3, [pc, #104]	; (61c <escState+0xb4>)
     5b4:	4798      	blx	r3
     5b6:	e02a      	b.n	60e <escState+0xa6>
		RC();
     5b8:	4b19      	ldr	r3, [pc, #100]	; (620 <escState+0xb8>)
     5ba:	4798      	blx	r3
     5bc:	e027      	b.n	60e <escState+0xa6>
		IND();			
     5be:	4b19      	ldr	r3, [pc, #100]	; (624 <escState+0xbc>)
     5c0:	4798      	blx	r3
     5c2:	e024      	b.n	60e <escState+0xa6>
		NEL();
     5c4:	4b18      	ldr	r3, [pc, #96]	; (628 <escState+0xc0>)
     5c6:	4798      	blx	r3
     5c8:	e021      	b.n	60e <escState+0xa6>
}

void HTS()
{
	//set tab stop at current column, unsupported now
	currentState = stateGround;
     5ca:	2200      	movs	r2, #0
     5cc:	4b12      	ldr	r3, [pc, #72]	; (618 <escState+0xb0>)
     5ce:	701a      	strb	r2, [r3, #0]
     5d0:	e01d      	b.n	60e <escState+0xa6>
		RI();
     5d2:	4b16      	ldr	r3, [pc, #88]	; (62c <escState+0xc4>)
     5d4:	4798      	blx	r3
     5d6:	e01a      	b.n	60e <escState+0xa6>
		printf("%s",DECIDreturn);
     5d8:	4915      	ldr	r1, [pc, #84]	; (630 <escState+0xc8>)
     5da:	4816      	ldr	r0, [pc, #88]	; (634 <escState+0xcc>)
     5dc:	4b16      	ldr	r3, [pc, #88]	; (638 <escState+0xd0>)
     5de:	4798      	blx	r3
		currentState = stateGround;
     5e0:	2200      	movs	r2, #0
     5e2:	4b0d      	ldr	r3, [pc, #52]	; (618 <escState+0xb0>)
     5e4:	701a      	strb	r2, [r3, #0]
     5e6:	e012      	b.n	60e <escState+0xa6>
		RIS();
     5e8:	4b14      	ldr	r3, [pc, #80]	; (63c <escState+0xd4>)
     5ea:	4798      	blx	r3
		currentState = stateGround;
     5ec:	2200      	movs	r2, #0
     5ee:	4b0a      	ldr	r3, [pc, #40]	; (618 <escState+0xb0>)
     5f0:	701a      	strb	r2, [r3, #0]
     5f2:	e00c      	b.n	60e <escState+0xa6>
		currentState = stateGround;
     5f4:	2200      	movs	r2, #0
     5f6:	4b08      	ldr	r3, [pc, #32]	; (618 <escState+0xb0>)
     5f8:	701a      	strb	r2, [r3, #0]
     5fa:	e008      	b.n	60e <escState+0xa6>
		currentState = stateGround;
     5fc:	2200      	movs	r2, #0
     5fe:	4b06      	ldr	r3, [pc, #24]	; (618 <escState+0xb0>)
     600:	701a      	strb	r2, [r3, #0]
     602:	e004      	b.n	60e <escState+0xa6>
		stateEnterBuffer = character;
     604:	4b0e      	ldr	r3, [pc, #56]	; (640 <escState+0xd8>)
     606:	7018      	strb	r0, [r3, #0]
		currentState = stateESCinter;
     608:	2202      	movs	r2, #2
     60a:	4b03      	ldr	r3, [pc, #12]	; (618 <escState+0xb0>)
     60c:	701a      	strb	r2, [r3, #0]
}
     60e:	bd10      	pop	{r4, pc}
		currentState = stateCSIentry;
     610:	2203      	movs	r2, #3
     612:	4b01      	ldr	r3, [pc, #4]	; (618 <escState+0xb0>)
     614:	701a      	strb	r2, [r3, #0]
     616:	e7fa      	b.n	60e <escState+0xa6>
     618:	200002bd 	.word	0x200002bd
     61c:	00000361 	.word	0x00000361
     620:	0000038d 	.word	0x0000038d
     624:	000003ed 	.word	0x000003ed
     628:	00000471 	.word	0x00000471
     62c:	000004f1 	.word	0x000004f1
     630:	00005b00 	.word	0x00005b00
     634:	00005b34 	.word	0x00005b34
     638:	00004921 	.word	0x00004921
     63c:	0000054d 	.word	0x0000054d
     640:	20000342 	.word	0x20000342

00000644 <CUU>:

/************************************************************************/
/*    CSI mnemonic functions                                            */
/************************************************************************/
void CUU() // Cursor Up
{
     644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	unsigned char tempCharacter;
	uint8_t parameter = 0;
	
	if(isEmptyParam())
     646:	4b20      	ldr	r3, [pc, #128]	; (6c8 <CUU+0x84>)
     648:	4798      	blx	r3
	{
		parameter = 1;
     64a:	2401      	movs	r4, #1
	if(isEmptyParam())
     64c:	2800      	cmp	r0, #0
     64e:	d01d      	beq.n	68c <CUU+0x48>
		{
			parameter = 1;
		}
	}
	
	if((yCharPos - parameter) >= 0 && (yCharPos - parameter) <= 24)
     650:	4b1e      	ldr	r3, [pc, #120]	; (6cc <CUU+0x88>)
     652:	881a      	ldrh	r2, [r3, #0]
     654:	1b13      	subs	r3, r2, r4
     656:	2b18      	cmp	r3, #24
     658:	d91e      	bls.n	698 <CUU+0x54>
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
		drawChar(tempCharacter);
	}
	else
	{
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     65a:	4c1d      	ldr	r4, [pc, #116]	; (6d0 <CUU+0x8c>)
     65c:	4e1d      	ldr	r6, [pc, #116]	; (6d4 <CUU+0x90>)
     65e:	8831      	ldrh	r1, [r6, #0]
     660:	004b      	lsls	r3, r1, #1
     662:	185b      	adds	r3, r3, r1
     664:	00db      	lsls	r3, r3, #3
     666:	18e3      	adds	r3, r4, r3
     668:	5c98      	ldrb	r0, [r3, r2]
     66a:	4d1b      	ldr	r5, [pc, #108]	; (6d8 <CUU+0x94>)
     66c:	47a8      	blx	r5
		yCharPos = 0;
     66e:	2200      	movs	r2, #0
     670:	4b16      	ldr	r3, [pc, #88]	; (6cc <CUU+0x88>)
     672:	801a      	strh	r2, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     674:	8832      	ldrh	r2, [r6, #0]
     676:	0053      	lsls	r3, r2, #1
     678:	189b      	adds	r3, r3, r2
     67a:	00db      	lsls	r3, r3, #3
		drawChar(tempCharacter);
     67c:	5d18      	ldrb	r0, [r3, r4]
     67e:	47a8      	blx	r5
	}
	
	blinkCursor();
     680:	4b16      	ldr	r3, [pc, #88]	; (6dc <CUU+0x98>)
     682:	4798      	blx	r3
	currentState = stateGround;
     684:	2200      	movs	r2, #0
     686:	4b16      	ldr	r3, [pc, #88]	; (6e0 <CUU+0x9c>)
     688:	701a      	strb	r2, [r3, #0]
}
     68a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		parameter = dequeueParam();
     68c:	4b15      	ldr	r3, [pc, #84]	; (6e4 <CUU+0xa0>)
     68e:	4798      	blx	r3
     690:	1e04      	subs	r4, r0, #0
		if(parameter == 0)
     692:	d1dd      	bne.n	650 <CUU+0xc>
			parameter = 1;
     694:	3401      	adds	r4, #1
     696:	e7db      	b.n	650 <CUU+0xc>
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     698:	4d0d      	ldr	r5, [pc, #52]	; (6d0 <CUU+0x8c>)
     69a:	4e0e      	ldr	r6, [pc, #56]	; (6d4 <CUU+0x90>)
     69c:	8831      	ldrh	r1, [r6, #0]
     69e:	004b      	lsls	r3, r1, #1
     6a0:	185b      	adds	r3, r3, r1
     6a2:	00db      	lsls	r3, r3, #3
     6a4:	18eb      	adds	r3, r5, r3
     6a6:	5c98      	ldrb	r0, [r3, r2]
     6a8:	4f0b      	ldr	r7, [pc, #44]	; (6d8 <CUU+0x94>)
     6aa:	47b8      	blx	r7
		yCharPos = yCharPos - parameter;
     6ac:	4b07      	ldr	r3, [pc, #28]	; (6cc <CUU+0x88>)
     6ae:	8818      	ldrh	r0, [r3, #0]
     6b0:	1b04      	subs	r4, r0, r4
     6b2:	b2a4      	uxth	r4, r4
     6b4:	801c      	strh	r4, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     6b6:	8832      	ldrh	r2, [r6, #0]
     6b8:	0053      	lsls	r3, r2, #1
     6ba:	189b      	adds	r3, r3, r2
     6bc:	00db      	lsls	r3, r3, #3
     6be:	18ed      	adds	r5, r5, r3
		drawChar(tempCharacter);
     6c0:	5d28      	ldrb	r0, [r5, r4]
     6c2:	47b8      	blx	r7
     6c4:	e7dc      	b.n	680 <CUU+0x3c>
     6c6:	46c0      	nop			; (mov r8, r8)
     6c8:	00000241 	.word	0x00000241
     6cc:	200002ba 	.word	0x200002ba
     6d0:	200003c0 	.word	0x200003c0
     6d4:	200002b8 	.word	0x200002b8
     6d8:	0000312d 	.word	0x0000312d
     6dc:	00003215 	.word	0x00003215
     6e0:	200002bd 	.word	0x200002bd
     6e4:	00000255 	.word	0x00000255

000006e8 <CUD>:
void CUD() //Cursor Down
{
     6e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	unsigned char tempCharacter;
	uint8_t parameter = 0;
	
	if(isEmptyParam())
     6ea:	4b20      	ldr	r3, [pc, #128]	; (76c <CUD+0x84>)
     6ec:	4798      	blx	r3
	{
		parameter = 1;
     6ee:	2401      	movs	r4, #1
	if(isEmptyParam())
     6f0:	2800      	cmp	r0, #0
     6f2:	d01e      	beq.n	732 <CUD+0x4a>
		if(parameter == 0)
		{
			parameter = 1;
		}
	}
	if((yCharPos + parameter) <= 23)
     6f4:	4b1e      	ldr	r3, [pc, #120]	; (770 <CUD+0x88>)
     6f6:	881a      	ldrh	r2, [r3, #0]
     6f8:	18a3      	adds	r3, r4, r2
     6fa:	2b17      	cmp	r3, #23
     6fc:	dd1f      	ble.n	73e <CUD+0x56>
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
		drawChar(tempCharacter);
	}
	else
	{
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     6fe:	4c1d      	ldr	r4, [pc, #116]	; (774 <CUD+0x8c>)
     700:	4e1d      	ldr	r6, [pc, #116]	; (778 <CUD+0x90>)
     702:	8831      	ldrh	r1, [r6, #0]
     704:	004b      	lsls	r3, r1, #1
     706:	185b      	adds	r3, r3, r1
     708:	00db      	lsls	r3, r3, #3
     70a:	18e3      	adds	r3, r4, r3
     70c:	5c98      	ldrb	r0, [r3, r2]
     70e:	4d1b      	ldr	r5, [pc, #108]	; (77c <CUD+0x94>)
     710:	47a8      	blx	r5
		yCharPos = 23;
     712:	2217      	movs	r2, #23
     714:	4b16      	ldr	r3, [pc, #88]	; (770 <CUD+0x88>)
     716:	801a      	strh	r2, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     718:	8832      	ldrh	r2, [r6, #0]
     71a:	0053      	lsls	r3, r2, #1
     71c:	189b      	adds	r3, r3, r2
     71e:	00db      	lsls	r3, r3, #3
     720:	18e3      	adds	r3, r4, r3
		drawChar(tempCharacter);
     722:	7dd8      	ldrb	r0, [r3, #23]
     724:	47a8      	blx	r5
	}

	blinkCursor();
     726:	4b16      	ldr	r3, [pc, #88]	; (780 <CUD+0x98>)
     728:	4798      	blx	r3
	currentState = stateGround;
     72a:	2200      	movs	r2, #0
     72c:	4b15      	ldr	r3, [pc, #84]	; (784 <CUD+0x9c>)
     72e:	701a      	strb	r2, [r3, #0]
}
     730:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		parameter = dequeueParam();
     732:	4b15      	ldr	r3, [pc, #84]	; (788 <CUD+0xa0>)
     734:	4798      	blx	r3
     736:	1e04      	subs	r4, r0, #0
		if(parameter == 0)
     738:	d1dc      	bne.n	6f4 <CUD+0xc>
			parameter = 1;
     73a:	3401      	adds	r4, #1
     73c:	e7da      	b.n	6f4 <CUD+0xc>
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     73e:	4d0d      	ldr	r5, [pc, #52]	; (774 <CUD+0x8c>)
     740:	4e0d      	ldr	r6, [pc, #52]	; (778 <CUD+0x90>)
     742:	8831      	ldrh	r1, [r6, #0]
     744:	004b      	lsls	r3, r1, #1
     746:	185b      	adds	r3, r3, r1
     748:	00db      	lsls	r3, r3, #3
     74a:	18eb      	adds	r3, r5, r3
     74c:	5c98      	ldrb	r0, [r3, r2]
     74e:	4f0b      	ldr	r7, [pc, #44]	; (77c <CUD+0x94>)
     750:	47b8      	blx	r7
		yCharPos = yCharPos + parameter;
     752:	4b07      	ldr	r3, [pc, #28]	; (770 <CUD+0x88>)
     754:	8818      	ldrh	r0, [r3, #0]
     756:	1904      	adds	r4, r0, r4
     758:	b2a4      	uxth	r4, r4
     75a:	801c      	strh	r4, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     75c:	8832      	ldrh	r2, [r6, #0]
     75e:	0053      	lsls	r3, r2, #1
     760:	189b      	adds	r3, r3, r2
     762:	00db      	lsls	r3, r3, #3
     764:	18ed      	adds	r5, r5, r3
		drawChar(tempCharacter);
     766:	5d28      	ldrb	r0, [r5, r4]
     768:	47b8      	blx	r7
     76a:	e7dc      	b.n	726 <CUD+0x3e>
     76c:	00000241 	.word	0x00000241
     770:	200002ba 	.word	0x200002ba
     774:	200003c0 	.word	0x200003c0
     778:	200002b8 	.word	0x200002b8
     77c:	0000312d 	.word	0x0000312d
     780:	00003215 	.word	0x00003215
     784:	200002bd 	.word	0x200002bd
     788:	00000255 	.word	0x00000255

0000078c <CUF>:
void CUF() //Cursor Forward
{
     78c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	unsigned char tempCharacter;
	uint8_t parameter = 0;
	
	if(isEmptyParam())
     78e:	4b21      	ldr	r3, [pc, #132]	; (814 <CUF+0x88>)
     790:	4798      	blx	r3
	{
		parameter = 1;
     792:	2401      	movs	r4, #1
	if(isEmptyParam())
     794:	2800      	cmp	r0, #0
     796:	d01f      	beq.n	7d8 <CUF+0x4c>
		{
			parameter = 1;
		}
	}
	
	if(xCharPos + parameter <= 79)
     798:	4b1f      	ldr	r3, [pc, #124]	; (818 <CUF+0x8c>)
     79a:	881a      	ldrh	r2, [r3, #0]
     79c:	18a3      	adds	r3, r4, r2
     79e:	2b4f      	cmp	r3, #79	; 0x4f
     7a0:	dd20      	ble.n	7e4 <CUF+0x58>
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
		drawChar(tempCharacter);
	}
	else
	{
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     7a2:	4c1e      	ldr	r4, [pc, #120]	; (81c <CUF+0x90>)
     7a4:	4e1e      	ldr	r6, [pc, #120]	; (820 <CUF+0x94>)
     7a6:	8831      	ldrh	r1, [r6, #0]
     7a8:	0053      	lsls	r3, r2, #1
     7aa:	189b      	adds	r3, r3, r2
     7ac:	00db      	lsls	r3, r3, #3
     7ae:	18e3      	adds	r3, r4, r3
     7b0:	5c58      	ldrb	r0, [r3, r1]
     7b2:	4d1c      	ldr	r5, [pc, #112]	; (824 <CUF+0x98>)
     7b4:	47a8      	blx	r5
		xCharPos = 79;
     7b6:	224f      	movs	r2, #79	; 0x4f
     7b8:	4b17      	ldr	r3, [pc, #92]	; (818 <CUF+0x8c>)
     7ba:	801a      	strh	r2, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     7bc:	8833      	ldrh	r3, [r6, #0]
     7be:	18e4      	adds	r4, r4, r3
     7c0:	23ed      	movs	r3, #237	; 0xed
     7c2:	00db      	lsls	r3, r3, #3
     7c4:	469c      	mov	ip, r3
     7c6:	4464      	add	r4, ip
		drawChar(tempCharacter);	
     7c8:	7820      	ldrb	r0, [r4, #0]
     7ca:	47a8      	blx	r5
	}
	blinkCursor();
     7cc:	4b16      	ldr	r3, [pc, #88]	; (828 <CUF+0x9c>)
     7ce:	4798      	blx	r3
	currentState = stateGround;
     7d0:	2200      	movs	r2, #0
     7d2:	4b16      	ldr	r3, [pc, #88]	; (82c <CUF+0xa0>)
     7d4:	701a      	strb	r2, [r3, #0]
}
     7d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		parameter = dequeueParam();
     7d8:	4b15      	ldr	r3, [pc, #84]	; (830 <CUF+0xa4>)
     7da:	4798      	blx	r3
     7dc:	1e04      	subs	r4, r0, #0
		if(parameter == 0)
     7de:	d1db      	bne.n	798 <CUF+0xc>
			parameter = 1;
     7e0:	3401      	adds	r4, #1
     7e2:	e7d9      	b.n	798 <CUF+0xc>
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     7e4:	4d0d      	ldr	r5, [pc, #52]	; (81c <CUF+0x90>)
     7e6:	4e0e      	ldr	r6, [pc, #56]	; (820 <CUF+0x94>)
     7e8:	8831      	ldrh	r1, [r6, #0]
     7ea:	0053      	lsls	r3, r2, #1
     7ec:	189b      	adds	r3, r3, r2
     7ee:	00db      	lsls	r3, r3, #3
     7f0:	18eb      	adds	r3, r5, r3
     7f2:	5c58      	ldrb	r0, [r3, r1]
     7f4:	4f0b      	ldr	r7, [pc, #44]	; (824 <CUF+0x98>)
     7f6:	47b8      	blx	r7
		xCharPos = xCharPos + parameter;
     7f8:	4b07      	ldr	r3, [pc, #28]	; (818 <CUF+0x8c>)
     7fa:	8818      	ldrh	r0, [r3, #0]
     7fc:	1904      	adds	r4, r0, r4
     7fe:	b2a4      	uxth	r4, r4
     800:	801c      	strh	r4, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     802:	8833      	ldrh	r3, [r6, #0]
     804:	0060      	lsls	r0, r4, #1
     806:	1904      	adds	r4, r0, r4
     808:	00e4      	lsls	r4, r4, #3
     80a:	192c      	adds	r4, r5, r4
		drawChar(tempCharacter);
     80c:	5ce0      	ldrb	r0, [r4, r3]
     80e:	47b8      	blx	r7
     810:	e7dc      	b.n	7cc <CUF+0x40>
     812:	46c0      	nop			; (mov r8, r8)
     814:	00000241 	.word	0x00000241
     818:	200002b8 	.word	0x200002b8
     81c:	200003c0 	.word	0x200003c0
     820:	200002ba 	.word	0x200002ba
     824:	0000312d 	.word	0x0000312d
     828:	00003215 	.word	0x00003215
     82c:	200002bd 	.word	0x200002bd
     830:	00000255 	.word	0x00000255

00000834 <CUB>:
void CUB() //Cursor Backward
{
     834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	unsigned char tempCharacter;
	uint8_t parameter = 0;
	
	if(isEmptyParam())
     836:	4b1e      	ldr	r3, [pc, #120]	; (8b0 <CUB+0x7c>)
     838:	4798      	blx	r3
	{
		parameter = 1;
     83a:	2601      	movs	r6, #1
	if(isEmptyParam())
     83c:	2800      	cmp	r0, #0
     83e:	d01f      	beq.n	880 <CUB+0x4c>
		{
			parameter = 1;
		}
	}
	
	if(xCharPos - parameter >= 0)
     840:	4b1c      	ldr	r3, [pc, #112]	; (8b4 <CUB+0x80>)
     842:	881a      	ldrh	r2, [r3, #0]
     844:	1b93      	subs	r3, r2, r6
     846:	d421      	bmi.n	88c <CUB+0x58>
	{
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     848:	4c1b      	ldr	r4, [pc, #108]	; (8b8 <CUB+0x84>)
     84a:	4d1c      	ldr	r5, [pc, #112]	; (8bc <CUB+0x88>)
     84c:	8829      	ldrh	r1, [r5, #0]
     84e:	0053      	lsls	r3, r2, #1
     850:	189b      	adds	r3, r3, r2
     852:	00db      	lsls	r3, r3, #3
     854:	18e3      	adds	r3, r4, r3
     856:	5c58      	ldrb	r0, [r3, r1]
     858:	4f19      	ldr	r7, [pc, #100]	; (8c0 <CUB+0x8c>)
     85a:	47b8      	blx	r7
		xCharPos = xCharPos - parameter;
     85c:	4b15      	ldr	r3, [pc, #84]	; (8b4 <CUB+0x80>)
     85e:	8818      	ldrh	r0, [r3, #0]
     860:	1b80      	subs	r0, r0, r6
     862:	b280      	uxth	r0, r0
     864:	8018      	strh	r0, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     866:	882a      	ldrh	r2, [r5, #0]
     868:	0043      	lsls	r3, r0, #1
     86a:	1818      	adds	r0, r3, r0
     86c:	00c0      	lsls	r0, r0, #3
     86e:	1820      	adds	r0, r4, r0
		drawChar(tempCharacter);
     870:	5c80      	ldrb	r0, [r0, r2]
     872:	47b8      	blx	r7
		drawChar(consoleDisplay[xCharPos][yCharPos]);
		xCharPos = 0;
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
		drawChar(tempCharacter);
	}
	blinkCursor();
     874:	4b13      	ldr	r3, [pc, #76]	; (8c4 <CUB+0x90>)
     876:	4798      	blx	r3
	currentState = stateGround;
     878:	2200      	movs	r2, #0
     87a:	4b13      	ldr	r3, [pc, #76]	; (8c8 <CUB+0x94>)
     87c:	701a      	strb	r2, [r3, #0]
}
     87e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		parameter = dequeueParam();
     880:	4b12      	ldr	r3, [pc, #72]	; (8cc <CUB+0x98>)
     882:	4798      	blx	r3
     884:	1e06      	subs	r6, r0, #0
		if(parameter == 0)
     886:	d1db      	bne.n	840 <CUB+0xc>
			parameter = 1;
     888:	3601      	adds	r6, #1
     88a:	e7d9      	b.n	840 <CUB+0xc>
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     88c:	4d0a      	ldr	r5, [pc, #40]	; (8b8 <CUB+0x84>)
     88e:	4e0b      	ldr	r6, [pc, #44]	; (8bc <CUB+0x88>)
     890:	8831      	ldrh	r1, [r6, #0]
     892:	0053      	lsls	r3, r2, #1
     894:	189b      	adds	r3, r3, r2
     896:	00db      	lsls	r3, r3, #3
     898:	18eb      	adds	r3, r5, r3
     89a:	5c58      	ldrb	r0, [r3, r1]
     89c:	4c08      	ldr	r4, [pc, #32]	; (8c0 <CUB+0x8c>)
     89e:	47a0      	blx	r4
		xCharPos = 0;
     8a0:	2200      	movs	r2, #0
     8a2:	4b04      	ldr	r3, [pc, #16]	; (8b4 <CUB+0x80>)
     8a4:	801a      	strh	r2, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     8a6:	8833      	ldrh	r3, [r6, #0]
		drawChar(tempCharacter);
     8a8:	5ce8      	ldrb	r0, [r5, r3]
     8aa:	47a0      	blx	r4
     8ac:	e7e2      	b.n	874 <CUB+0x40>
     8ae:	46c0      	nop			; (mov r8, r8)
     8b0:	00000241 	.word	0x00000241
     8b4:	200002b8 	.word	0x200002b8
     8b8:	200003c0 	.word	0x200003c0
     8bc:	200002ba 	.word	0x200002ba
     8c0:	0000312d 	.word	0x0000312d
     8c4:	00003215 	.word	0x00003215
     8c8:	200002bd 	.word	0x200002bd
     8cc:	00000255 	.word	0x00000255

000008d0 <CNL>:
void CNL() //Cursor Next Line
{
     8d0:	b570      	push	{r4, r5, r6, lr}
	unsigned char tempCharacter;
	uint8_t parameter = 0;
	
	if(isEmptyParam())
     8d2:	4b1d      	ldr	r3, [pc, #116]	; (948 <CNL+0x78>)
     8d4:	4798      	blx	r3
	{
		parameter = 1;
     8d6:	2401      	movs	r4, #1
	if(isEmptyParam())
     8d8:	2800      	cmp	r0, #0
     8da:	d01c      	beq.n	916 <CNL+0x46>
		{
			parameter = 1;
		}
	}
	
	xCharPos = 0;
     8dc:	2200      	movs	r2, #0
     8de:	4b1b      	ldr	r3, [pc, #108]	; (94c <CNL+0x7c>)
     8e0:	801a      	strh	r2, [r3, #0]
	
	if((yCharPos + parameter) <= 23)
     8e2:	4b1b      	ldr	r3, [pc, #108]	; (950 <CNL+0x80>)
     8e4:	881b      	ldrh	r3, [r3, #0]
     8e6:	18e2      	adds	r2, r4, r3
     8e8:	2a17      	cmp	r2, #23
     8ea:	dd1a      	ble.n	922 <CNL+0x52>
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
		drawChar(tempCharacter);
	}
	else
	{
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     8ec:	4c19      	ldr	r4, [pc, #100]	; (954 <CNL+0x84>)
     8ee:	5ce0      	ldrb	r0, [r4, r3]
     8f0:	4d19      	ldr	r5, [pc, #100]	; (958 <CNL+0x88>)
     8f2:	47a8      	blx	r5
		yCharPos = 23;
     8f4:	2217      	movs	r2, #23
     8f6:	4b16      	ldr	r3, [pc, #88]	; (950 <CNL+0x80>)
     8f8:	801a      	strh	r2, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     8fa:	4b14      	ldr	r3, [pc, #80]	; (94c <CNL+0x7c>)
     8fc:	881a      	ldrh	r2, [r3, #0]
     8fe:	0053      	lsls	r3, r2, #1
     900:	189b      	adds	r3, r3, r2
     902:	00db      	lsls	r3, r3, #3
     904:	18e3      	adds	r3, r4, r3
		drawChar(tempCharacter);
     906:	7dd8      	ldrb	r0, [r3, #23]
     908:	47a8      	blx	r5
	}

	blinkCursor();
     90a:	4b14      	ldr	r3, [pc, #80]	; (95c <CNL+0x8c>)
     90c:	4798      	blx	r3
	currentState = stateGround;	
     90e:	2200      	movs	r2, #0
     910:	4b13      	ldr	r3, [pc, #76]	; (960 <CNL+0x90>)
     912:	701a      	strb	r2, [r3, #0]
}
     914:	bd70      	pop	{r4, r5, r6, pc}
		parameter = dequeueParam();
     916:	4b13      	ldr	r3, [pc, #76]	; (964 <CNL+0x94>)
     918:	4798      	blx	r3
     91a:	1e04      	subs	r4, r0, #0
		if(parameter == 0)
     91c:	d1de      	bne.n	8dc <CNL+0xc>
			parameter = 1;
     91e:	3401      	adds	r4, #1
     920:	e7dc      	b.n	8dc <CNL+0xc>
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     922:	4d0c      	ldr	r5, [pc, #48]	; (954 <CNL+0x84>)
     924:	5ce8      	ldrb	r0, [r5, r3]
     926:	4e0c      	ldr	r6, [pc, #48]	; (958 <CNL+0x88>)
     928:	47b0      	blx	r6
		yCharPos = yCharPos + parameter;
     92a:	4b09      	ldr	r3, [pc, #36]	; (950 <CNL+0x80>)
     92c:	8818      	ldrh	r0, [r3, #0]
     92e:	1904      	adds	r4, r0, r4
     930:	b2a4      	uxth	r4, r4
     932:	801c      	strh	r4, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     934:	4b05      	ldr	r3, [pc, #20]	; (94c <CNL+0x7c>)
     936:	881a      	ldrh	r2, [r3, #0]
     938:	0053      	lsls	r3, r2, #1
     93a:	189b      	adds	r3, r3, r2
     93c:	00db      	lsls	r3, r3, #3
     93e:	18eb      	adds	r3, r5, r3
		drawChar(tempCharacter);
     940:	5d18      	ldrb	r0, [r3, r4]
     942:	47b0      	blx	r6
     944:	e7e1      	b.n	90a <CNL+0x3a>
     946:	46c0      	nop			; (mov r8, r8)
     948:	00000241 	.word	0x00000241
     94c:	200002b8 	.word	0x200002b8
     950:	200002ba 	.word	0x200002ba
     954:	200003c0 	.word	0x200003c0
     958:	0000312d 	.word	0x0000312d
     95c:	00003215 	.word	0x00003215
     960:	200002bd 	.word	0x200002bd
     964:	00000255 	.word	0x00000255

00000968 <CPL>:
void CPL() //Cursor Preceding Line
{
     968:	b570      	push	{r4, r5, r6, lr}
	unsigned char tempCharacter;
	uint8_t parameter = 0;
	
	if(isEmptyParam())
     96a:	4b1c      	ldr	r3, [pc, #112]	; (9dc <CPL+0x74>)
     96c:	4798      	blx	r3
	{
		parameter = 1;
     96e:	2401      	movs	r4, #1
	if(isEmptyParam())
     970:	2800      	cmp	r0, #0
     972:	d01b      	beq.n	9ac <CPL+0x44>
		{
			parameter = 1;
		}
	}
	
	xCharPos = 0;
     974:	2200      	movs	r2, #0
     976:	4b1a      	ldr	r3, [pc, #104]	; (9e0 <CPL+0x78>)
     978:	801a      	strh	r2, [r3, #0]
	
	if((yCharPos - parameter) >= 0 && (yCharPos - parameter) <= 24)
     97a:	4b1a      	ldr	r3, [pc, #104]	; (9e4 <CPL+0x7c>)
     97c:	881b      	ldrh	r3, [r3, #0]
     97e:	1b1a      	subs	r2, r3, r4
     980:	2a18      	cmp	r2, #24
     982:	d919      	bls.n	9b8 <CPL+0x50>
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
		drawChar(tempCharacter);
	}
	else
	{
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     984:	4d18      	ldr	r5, [pc, #96]	; (9e8 <CPL+0x80>)
     986:	5ce8      	ldrb	r0, [r5, r3]
     988:	4c18      	ldr	r4, [pc, #96]	; (9ec <CPL+0x84>)
     98a:	47a0      	blx	r4
		yCharPos = 0;
     98c:	2200      	movs	r2, #0
     98e:	4b15      	ldr	r3, [pc, #84]	; (9e4 <CPL+0x7c>)
     990:	801a      	strh	r2, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     992:	4b13      	ldr	r3, [pc, #76]	; (9e0 <CPL+0x78>)
     994:	881a      	ldrh	r2, [r3, #0]
     996:	0053      	lsls	r3, r2, #1
     998:	189b      	adds	r3, r3, r2
     99a:	00db      	lsls	r3, r3, #3
		drawChar(tempCharacter);
     99c:	5d58      	ldrb	r0, [r3, r5]
     99e:	47a0      	blx	r4
	}
	
	blinkCursor();
     9a0:	4b13      	ldr	r3, [pc, #76]	; (9f0 <CPL+0x88>)
     9a2:	4798      	blx	r3
	currentState = stateGround;
     9a4:	2200      	movs	r2, #0
     9a6:	4b13      	ldr	r3, [pc, #76]	; (9f4 <CPL+0x8c>)
     9a8:	701a      	strb	r2, [r3, #0]
	
}
     9aa:	bd70      	pop	{r4, r5, r6, pc}
		parameter = dequeueParam();
     9ac:	4b12      	ldr	r3, [pc, #72]	; (9f8 <CPL+0x90>)
     9ae:	4798      	blx	r3
     9b0:	1e04      	subs	r4, r0, #0
		if(parameter == 0)
     9b2:	d1df      	bne.n	974 <CPL+0xc>
			parameter = 1;
     9b4:	3401      	adds	r4, #1
     9b6:	e7dd      	b.n	974 <CPL+0xc>
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     9b8:	4d0b      	ldr	r5, [pc, #44]	; (9e8 <CPL+0x80>)
     9ba:	5ce8      	ldrb	r0, [r5, r3]
     9bc:	4e0b      	ldr	r6, [pc, #44]	; (9ec <CPL+0x84>)
     9be:	47b0      	blx	r6
		yCharPos = yCharPos - parameter;
     9c0:	4b08      	ldr	r3, [pc, #32]	; (9e4 <CPL+0x7c>)
     9c2:	8818      	ldrh	r0, [r3, #0]
     9c4:	1b04      	subs	r4, r0, r4
     9c6:	b2a4      	uxth	r4, r4
     9c8:	801c      	strh	r4, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     9ca:	4b05      	ldr	r3, [pc, #20]	; (9e0 <CPL+0x78>)
     9cc:	881a      	ldrh	r2, [r3, #0]
     9ce:	0053      	lsls	r3, r2, #1
     9d0:	189b      	adds	r3, r3, r2
     9d2:	00db      	lsls	r3, r3, #3
     9d4:	18eb      	adds	r3, r5, r3
		drawChar(tempCharacter);
     9d6:	5d18      	ldrb	r0, [r3, r4]
     9d8:	47b0      	blx	r6
     9da:	e7e1      	b.n	9a0 <CPL+0x38>
     9dc:	00000241 	.word	0x00000241
     9e0:	200002b8 	.word	0x200002b8
     9e4:	200002ba 	.word	0x200002ba
     9e8:	200003c0 	.word	0x200003c0
     9ec:	0000312d 	.word	0x0000312d
     9f0:	00003215 	.word	0x00003215
     9f4:	200002bd 	.word	0x200002bd
     9f8:	00000255 	.word	0x00000255

000009fc <CHA>:
void CHA() //Cursor Horizontal Absolute
{
     9fc:	b5f0      	push	{r4, r5, r6, r7, lr}
     9fe:	46c6      	mov	lr, r8
     a00:	b500      	push	{lr}
	unsigned char tempCharacter;
	uint8_t parameter = 0;
	
	if(isEmptyParam())
     a02:	4b17      	ldr	r3, [pc, #92]	; (a60 <CHA+0x64>)
     a04:	4798      	blx	r3
	{
		parameter = 1;
     a06:	2501      	movs	r5, #1
	if(isEmptyParam())
     a08:	2800      	cmp	r0, #0
     a0a:	d01c      	beq.n	a46 <CHA+0x4a>
		{
			parameter = 79;
		}
	}
	
	drawChar(consoleDisplay[xCharPos][yCharPos]);
     a0c:	4c15      	ldr	r4, [pc, #84]	; (a64 <CHA+0x68>)
     a0e:	4f16      	ldr	r7, [pc, #88]	; (a68 <CHA+0x6c>)
     a10:	883a      	ldrh	r2, [r7, #0]
     a12:	4e16      	ldr	r6, [pc, #88]	; (a6c <CHA+0x70>)
     a14:	8831      	ldrh	r1, [r6, #0]
     a16:	0053      	lsls	r3, r2, #1
     a18:	189b      	adds	r3, r3, r2
     a1a:	00db      	lsls	r3, r3, #3
     a1c:	18e3      	adds	r3, r4, r3
     a1e:	5c58      	ldrb	r0, [r3, r1]
     a20:	4b13      	ldr	r3, [pc, #76]	; (a70 <CHA+0x74>)
     a22:	4698      	mov	r8, r3
     a24:	4798      	blx	r3
	xCharPos = parameter;
     a26:	803d      	strh	r5, [r7, #0]
	tempCharacter = consoleDisplay[xCharPos][yCharPos];
     a28:	8832      	ldrh	r2, [r6, #0]
     a2a:	006b      	lsls	r3, r5, #1
     a2c:	195b      	adds	r3, r3, r5
     a2e:	00db      	lsls	r3, r3, #3
     a30:	18e3      	adds	r3, r4, r3
	drawChar(tempCharacter);
     a32:	5c98      	ldrb	r0, [r3, r2]
     a34:	47c0      	blx	r8
	
	blinkCursor();
     a36:	4b0f      	ldr	r3, [pc, #60]	; (a74 <CHA+0x78>)
     a38:	4798      	blx	r3
	currentState = stateGround;
     a3a:	2200      	movs	r2, #0
     a3c:	4b0e      	ldr	r3, [pc, #56]	; (a78 <CHA+0x7c>)
     a3e:	701a      	strb	r2, [r3, #0]
}
     a40:	bc04      	pop	{r2}
     a42:	4690      	mov	r8, r2
     a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
		parameter = dequeueParam();
     a46:	4b0d      	ldr	r3, [pc, #52]	; (a7c <CHA+0x80>)
     a48:	4798      	blx	r3
     a4a:	1e02      	subs	r2, r0, #0
		if(parameter > 0)
     a4c:	d001      	beq.n	a52 <CHA+0x56>
			parameter--;  //need to decrement, because display is indexed at 0,0.
     a4e:	3801      	subs	r0, #1
     a50:	b2c2      	uxtb	r2, r0
     a52:	1c13      	adds	r3, r2, #0
     a54:	2a4f      	cmp	r2, #79	; 0x4f
     a56:	d900      	bls.n	a5a <CHA+0x5e>
     a58:	234f      	movs	r3, #79	; 0x4f
     a5a:	b2dd      	uxtb	r5, r3
     a5c:	e7d6      	b.n	a0c <CHA+0x10>
     a5e:	46c0      	nop			; (mov r8, r8)
     a60:	00000241 	.word	0x00000241
     a64:	200003c0 	.word	0x200003c0
     a68:	200002b8 	.word	0x200002b8
     a6c:	200002ba 	.word	0x200002ba
     a70:	0000312d 	.word	0x0000312d
     a74:	00003215 	.word	0x00003215
     a78:	200002bd 	.word	0x200002bd
     a7c:	00000255 	.word	0x00000255

00000a80 <CUP>:
void CUP() //Cursor Position
{
     a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     a82:	46ce      	mov	lr, r9
     a84:	4647      	mov	r7, r8
     a86:	b580      	push	{r7, lr}
	unsigned char tempCharacter;
	uint8_t parameter = 0;
	uint8_t xTemp = 0;
	uint8_t yTemp = 0;
	
	if(isEmptyParam())
     a88:	4b20      	ldr	r3, [pc, #128]	; (b0c <CUP+0x8c>)
     a8a:	4798      	blx	r3
	{
		parameter = 0;
     a8c:	2400      	movs	r4, #0
	if(isEmptyParam())
     a8e:	2800      	cmp	r0, #0
     a90:	d024      	beq.n	adc <CUP+0x5c>
		}
	}
	
	xTemp = parameter;

	if(isEmptyParam())
     a92:	4b1e      	ldr	r3, [pc, #120]	; (b0c <CUP+0x8c>)
     a94:	4798      	blx	r3
	{
		parameter = 0;
     a96:	2600      	movs	r6, #0
	if(isEmptyParam())
     a98:	2800      	cmp	r0, #0
     a9a:	d02b      	beq.n	af4 <CUP+0x74>
		}
	}
	
	yTemp = parameter;
	
	drawChar(consoleDisplay[xCharPos][yCharPos]);
     a9c:	4d1c      	ldr	r5, [pc, #112]	; (b10 <CUP+0x90>)
     a9e:	4b1d      	ldr	r3, [pc, #116]	; (b14 <CUP+0x94>)
     aa0:	4698      	mov	r8, r3
     aa2:	881a      	ldrh	r2, [r3, #0]
     aa4:	4f1c      	ldr	r7, [pc, #112]	; (b18 <CUP+0x98>)
     aa6:	8839      	ldrh	r1, [r7, #0]
     aa8:	0053      	lsls	r3, r2, #1
     aaa:	189b      	adds	r3, r3, r2
     aac:	00db      	lsls	r3, r3, #3
     aae:	18eb      	adds	r3, r5, r3
     ab0:	5c58      	ldrb	r0, [r3, r1]
     ab2:	4b1a      	ldr	r3, [pc, #104]	; (b1c <CUP+0x9c>)
     ab4:	4699      	mov	r9, r3
     ab6:	4798      	blx	r3
	xCharPos = xTemp;
     ab8:	4643      	mov	r3, r8
     aba:	801c      	strh	r4, [r3, #0]
	yCharPos = yTemp;
     abc:	803e      	strh	r6, [r7, #0]
	tempCharacter = consoleDisplay[xCharPos][yCharPos];
     abe:	0063      	lsls	r3, r4, #1
     ac0:	191c      	adds	r4, r3, r4
     ac2:	00e4      	lsls	r4, r4, #3
     ac4:	192c      	adds	r4, r5, r4
	drawChar(tempCharacter);
     ac6:	5da0      	ldrb	r0, [r4, r6]
     ac8:	47c8      	blx	r9
	
	blinkCursor();
     aca:	4b15      	ldr	r3, [pc, #84]	; (b20 <CUP+0xa0>)
     acc:	4798      	blx	r3
	currentState = stateGround;
     ace:	2200      	movs	r2, #0
     ad0:	4b14      	ldr	r3, [pc, #80]	; (b24 <CUP+0xa4>)
     ad2:	701a      	strb	r2, [r3, #0]
}
     ad4:	bc0c      	pop	{r2, r3}
     ad6:	4690      	mov	r8, r2
     ad8:	4699      	mov	r9, r3
     ada:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		parameter = dequeueParam();
     adc:	4b12      	ldr	r3, [pc, #72]	; (b28 <CUP+0xa8>)
     ade:	4798      	blx	r3
     ae0:	1e03      	subs	r3, r0, #0
		if(parameter > 0)
     ae2:	d001      	beq.n	ae8 <CUP+0x68>
			parameter--;  //need to decrement, because display is indexed at 0,0.
     ae4:	3801      	subs	r0, #1
     ae6:	b2c3      	uxtb	r3, r0
     ae8:	1c1c      	adds	r4, r3, #0
     aea:	2b4f      	cmp	r3, #79	; 0x4f
     aec:	d900      	bls.n	af0 <CUP+0x70>
     aee:	244f      	movs	r4, #79	; 0x4f
     af0:	b2e4      	uxtb	r4, r4
     af2:	e7ce      	b.n	a92 <CUP+0x12>
		parameter = dequeueParam();
     af4:	4b0c      	ldr	r3, [pc, #48]	; (b28 <CUP+0xa8>)
     af6:	4798      	blx	r3
     af8:	1e03      	subs	r3, r0, #0
		if(parameter > 0)
     afa:	d001      	beq.n	b00 <CUP+0x80>
			parameter--;  //need to decrement, because display is indexed at 0,0.
     afc:	3801      	subs	r0, #1
     afe:	b2c3      	uxtb	r3, r0
     b00:	1c1e      	adds	r6, r3, #0
     b02:	2b17      	cmp	r3, #23
     b04:	d900      	bls.n	b08 <CUP+0x88>
     b06:	2617      	movs	r6, #23
     b08:	b2f6      	uxtb	r6, r6
     b0a:	e7c7      	b.n	a9c <CUP+0x1c>
     b0c:	00000241 	.word	0x00000241
     b10:	200003c0 	.word	0x200003c0
     b14:	200002b8 	.word	0x200002b8
     b18:	200002ba 	.word	0x200002ba
     b1c:	0000312d 	.word	0x0000312d
     b20:	00003215 	.word	0x00003215
     b24:	200002bd 	.word	0x200002bd
     b28:	00000255 	.word	0x00000255

00000b2c <ED>:
{
	//do this later
	currentState = stateGround;
}
void ED() //Edit In Display
{
     b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
     b2e:	46de      	mov	lr, fp
     b30:	4657      	mov	r7, sl
     b32:	464e      	mov	r6, r9
     b34:	4645      	mov	r5, r8
     b36:	b5e0      	push	{r5, r6, r7, lr}
     b38:	b083      	sub	sp, #12
	uint8_t parameter;
	
	uint8_t xTemp = xCharPos;
     b3a:	4b43      	ldr	r3, [pc, #268]	; (c48 <ED+0x11c>)
     b3c:	881b      	ldrh	r3, [r3, #0]
     b3e:	4698      	mov	r8, r3
	uint8_t yTemp = yCharPos;
     b40:	4b42      	ldr	r3, [pc, #264]	; (c4c <ED+0x120>)
     b42:	881b      	ldrh	r3, [r3, #0]
     b44:	4699      	mov	r9, r3
	
	cursorBlinkState = false;  //need to turn the blinking off; ugly kludge
     b46:	2200      	movs	r2, #0
     b48:	4b41      	ldr	r3, [pc, #260]	; (c50 <ED+0x124>)
     b4a:	701a      	strb	r2, [r3, #0]
	
	if(isEmptyParam())
     b4c:	4b41      	ldr	r3, [pc, #260]	; (c54 <ED+0x128>)
     b4e:	4798      	blx	r3
     b50:	2800      	cmp	r0, #0
     b52:	d011      	beq.n	b78 <ED+0x4c>
			{
				xCharPos = i;
				drawChar(0x00);
			}
			//second step, erase previous lines
			for(int j = 0 ; j < yTemp ; j++)
     b54:	2500      	movs	r5, #0
		case 2:			//Erases entire display
			for(int j = 0 ; j < 24 ; j++)
			{
				for(int i = 0 ; i < 80 ; i++)
				{
					xCharPos = i;
     b56:	4b3c      	ldr	r3, [pc, #240]	; (c48 <ED+0x11c>)
     b58:	469a      	mov	sl, r3
					yCharPos = j;
     b5a:	4f3c      	ldr	r7, [pc, #240]	; (c4c <ED+0x120>)
					drawChar(0x00);
     b5c:	4e3e      	ldr	r6, [pc, #248]	; (c58 <ED+0x12c>)
			for(int j = 0 ; j < yTemp ; j++)
     b5e:	2400      	movs	r4, #0
					xCharPos = i;
     b60:	4653      	mov	r3, sl
     b62:	801c      	strh	r4, [r3, #0]
					yCharPos = j;
     b64:	803d      	strh	r5, [r7, #0]
					drawChar(0x00);
     b66:	2000      	movs	r0, #0
     b68:	47b0      	blx	r6
				for(int i = 0 ; i < 80 ; i++)
     b6a:	3401      	adds	r4, #1
     b6c:	2c50      	cmp	r4, #80	; 0x50
     b6e:	d1f7      	bne.n	b60 <ED+0x34>
			for(int j = 0 ; j < 24 ; j++)
     b70:	3501      	adds	r5, #1
     b72:	2d18      	cmp	r5, #24
     b74:	d1f3      	bne.n	b5e <ED+0x32>
     b76:	e04e      	b.n	c16 <ED+0xea>
	uint8_t xTemp = xCharPos;
     b78:	4643      	mov	r3, r8
     b7a:	466a      	mov	r2, sp
     b7c:	71d3      	strb	r3, [r2, #7]
     b7e:	79d4      	ldrb	r4, [r2, #7]
	uint8_t yTemp = yCharPos;
     b80:	464b      	mov	r3, r9
     b82:	71d3      	strb	r3, [r2, #7]
     b84:	79d3      	ldrb	r3, [r2, #7]
     b86:	469a      	mov	sl, r3
		parameter = dequeueParam();
     b88:	4b34      	ldr	r3, [pc, #208]	; (c5c <ED+0x130>)
     b8a:	4798      	blx	r3
	switch(parameter)
     b8c:	2801      	cmp	r0, #1
     b8e:	d004      	beq.n	b9a <ED+0x6e>
     b90:	2800      	cmp	r0, #0
     b92:	d022      	beq.n	bda <ED+0xae>
     b94:	2802      	cmp	r0, #2
     b96:	d13e      	bne.n	c16 <ED+0xea>
     b98:	e7dc      	b.n	b54 <ED+0x28>
			for(int i = 0 ;  i <= xTemp ;  i++)
     b9a:	0025      	movs	r5, r4
     b9c:	2600      	movs	r6, #0
				xCharPos = i;
     b9e:	4c2a      	ldr	r4, [pc, #168]	; (c48 <ED+0x11c>)
				drawChar(0x00);
     ba0:	4f2d      	ldr	r7, [pc, #180]	; (c58 <ED+0x12c>)
				xCharPos = i;
     ba2:	8026      	strh	r6, [r4, #0]
				drawChar(0x00);
     ba4:	2000      	movs	r0, #0
     ba6:	47b8      	blx	r7
			for(int i = 0 ;  i <= xTemp ;  i++)
     ba8:	3601      	adds	r6, #1
     baa:	42ae      	cmp	r6, r5
     bac:	ddf9      	ble.n	ba2 <ED+0x76>
			for(int j = 0 ; j < yTemp ; j++)
     bae:	46d3      	mov	fp, sl
     bb0:	2600      	movs	r6, #0
     bb2:	4653      	mov	r3, sl
     bb4:	2b00      	cmp	r3, #0
     bb6:	dd2e      	ble.n	c16 <ED+0xea>
					xCharPos = i;
     bb8:	4b23      	ldr	r3, [pc, #140]	; (c48 <ED+0x11c>)
     bba:	469a      	mov	sl, r3
					yCharPos = j;
     bbc:	4d23      	ldr	r5, [pc, #140]	; (c4c <ED+0x120>)
					drawChar(0x00);
     bbe:	4f26      	ldr	r7, [pc, #152]	; (c58 <ED+0x12c>)
			for(int i = 0 ;  i <= xTemp ;  i++)
     bc0:	2400      	movs	r4, #0
					xCharPos = i;
     bc2:	4653      	mov	r3, sl
     bc4:	801c      	strh	r4, [r3, #0]
					yCharPos = j;
     bc6:	802e      	strh	r6, [r5, #0]
					drawChar(0x00);
     bc8:	2000      	movs	r0, #0
     bca:	47b8      	blx	r7
				for(int i = 0 ; i < 80 ; i++)
     bcc:	3401      	adds	r4, #1
     bce:	2c50      	cmp	r4, #80	; 0x50
     bd0:	d1f7      	bne.n	bc2 <ED+0x96>
			for(int j = 0 ; j < yTemp ; j++)
     bd2:	3601      	adds	r6, #1
     bd4:	455e      	cmp	r6, fp
     bd6:	dbf3      	blt.n	bc0 <ED+0x94>
     bd8:	e01d      	b.n	c16 <ED+0xea>
			for(int i = xTemp ;  i <= 78 ;  i++)
     bda:	2c4e      	cmp	r4, #78	; 0x4e
     bdc:	dc07      	bgt.n	bee <ED+0xc2>
				xCharPos = i;
     bde:	4f1a      	ldr	r7, [pc, #104]	; (c48 <ED+0x11c>)
				drawChar(0x00);
     be0:	4e1d      	ldr	r6, [pc, #116]	; (c58 <ED+0x12c>)
				xCharPos = i;
     be2:	803c      	strh	r4, [r7, #0]
				drawChar(0x00);
     be4:	2000      	movs	r0, #0
     be6:	47b0      	blx	r6
			for(int i = xTemp ;  i <= 78 ;  i++)
     be8:	3401      	adds	r4, #1
     bea:	2c4f      	cmp	r4, #79	; 0x4f
     bec:	d1f9      	bne.n	be2 <ED+0xb6>
			for(int j = yTemp+1 ; j < 24 ; j++)
     bee:	4655      	mov	r5, sl
     bf0:	3501      	adds	r5, #1
     bf2:	2d17      	cmp	r5, #23
     bf4:	dc0f      	bgt.n	c16 <ED+0xea>
					xCharPos = i;
     bf6:	4b14      	ldr	r3, [pc, #80]	; (c48 <ED+0x11c>)
     bf8:	469a      	mov	sl, r3
					yCharPos = j;
     bfa:	4f14      	ldr	r7, [pc, #80]	; (c4c <ED+0x120>)
					drawChar(0x00);
     bfc:	4e16      	ldr	r6, [pc, #88]	; (c58 <ED+0x12c>)
{
     bfe:	2400      	movs	r4, #0
					xCharPos = i;
     c00:	4653      	mov	r3, sl
     c02:	801c      	strh	r4, [r3, #0]
					yCharPos = j;
     c04:	803d      	strh	r5, [r7, #0]
					drawChar(0x00);
     c06:	2000      	movs	r0, #0
     c08:	47b0      	blx	r6
				for(int i = 0 ; i < 80 ; i++)
     c0a:	3401      	adds	r4, #1
     c0c:	2c50      	cmp	r4, #80	; 0x50
     c0e:	d1f7      	bne.n	c00 <ED+0xd4>
			for(int j = yTemp+1 ; j < 24 ; j++)
     c10:	3501      	adds	r5, #1
     c12:	2d18      	cmp	r5, #24
     c14:	d1f3      	bne.n	bfe <ED+0xd2>
				}
			}
		break;
	}
	
	blinkCursor();
     c16:	4b12      	ldr	r3, [pc, #72]	; (c60 <ED+0x134>)
     c18:	4798      	blx	r3
	xCharPos = xTemp;
     c1a:	23ff      	movs	r3, #255	; 0xff
     c1c:	4642      	mov	r2, r8
     c1e:	401a      	ands	r2, r3
     c20:	4909      	ldr	r1, [pc, #36]	; (c48 <ED+0x11c>)
     c22:	800a      	strh	r2, [r1, #0]
	yCharPos = yTemp;
     c24:	464a      	mov	r2, r9
     c26:	4013      	ands	r3, r2
     c28:	4a08      	ldr	r2, [pc, #32]	; (c4c <ED+0x120>)
     c2a:	8013      	strh	r3, [r2, #0]
	drawChar(0x00);
     c2c:	2000      	movs	r0, #0
     c2e:	4b0a      	ldr	r3, [pc, #40]	; (c58 <ED+0x12c>)
     c30:	4798      	blx	r3
	
	currentState = stateGround;	
     c32:	2200      	movs	r2, #0
     c34:	4b0b      	ldr	r3, [pc, #44]	; (c64 <ED+0x138>)
     c36:	701a      	strb	r2, [r3, #0]


}
     c38:	b003      	add	sp, #12
     c3a:	bc3c      	pop	{r2, r3, r4, r5}
     c3c:	4690      	mov	r8, r2
     c3e:	4699      	mov	r9, r3
     c40:	46a2      	mov	sl, r4
     c42:	46ab      	mov	fp, r5
     c44:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c46:	46c0      	nop			; (mov r8, r8)
     c48:	200002b8 	.word	0x200002b8
     c4c:	200002ba 	.word	0x200002ba
     c50:	20000024 	.word	0x20000024
     c54:	00000241 	.word	0x00000241
     c58:	0000312d 	.word	0x0000312d
     c5c:	00000255 	.word	0x00000255
     c60:	00003215 	.word	0x00003215
     c64:	200002bd 	.word	0x200002bd

00000c68 <EL>:
void EL() //Edit In Line
{
     c68:	b5f0      	push	{r4, r5, r6, r7, lr}
     c6a:	46d6      	mov	lr, sl
     c6c:	464f      	mov	r7, r9
     c6e:	4646      	mov	r6, r8
     c70:	b5c0      	push	{r6, r7, lr}
	unsigned char tempCharacter;
	uint8_t parameter;
	
	uint8_t xTemp = xCharPos;
     c72:	4b31      	ldr	r3, [pc, #196]	; (d38 <EL+0xd0>)
     c74:	881f      	ldrh	r7, [r3, #0]
     c76:	b2fc      	uxtb	r4, r7
	uint8_t yTemp = yCharPos;
     c78:	4b30      	ldr	r3, [pc, #192]	; (d3c <EL+0xd4>)
     c7a:	881b      	ldrh	r3, [r3, #0]
     c7c:	4698      	mov	r8, r3
	
	cursorBlinkState = false;  //need to turn the blinking off; ugly kludge
     c7e:	2200      	movs	r2, #0
     c80:	4b2f      	ldr	r3, [pc, #188]	; (d40 <EL+0xd8>)
     c82:	701a      	strb	r2, [r3, #0]
	
	if(isEmptyParam())
     c84:	4b2f      	ldr	r3, [pc, #188]	; (d44 <EL+0xdc>)
     c86:	4798      	blx	r3
     c88:	2800      	cmp	r0, #0
     c8a:	d015      	beq.n	cb8 <EL+0x50>
	else
	{
		parameter = dequeueParam();
	}
	
	tempCharacter = consoleDisplay[xCharPos][yCharPos];
     c8c:	4b2a      	ldr	r3, [pc, #168]	; (d38 <EL+0xd0>)
     c8e:	881a      	ldrh	r2, [r3, #0]
     c90:	4b2a      	ldr	r3, [pc, #168]	; (d3c <EL+0xd4>)
     c92:	8819      	ldrh	r1, [r3, #0]
     c94:	0053      	lsls	r3, r2, #1
     c96:	189b      	adds	r3, r3, r2
     c98:	00db      	lsls	r3, r3, #3
     c9a:	4a2b      	ldr	r2, [pc, #172]	; (d48 <EL+0xe0>)
     c9c:	18d3      	adds	r3, r2, r3
     c9e:	5c5b      	ldrb	r3, [r3, r1]
     ca0:	4699      	mov	r9, r3
	
	switch(parameter)
	{
		case 0:			//Erases from cursor to end of line
			for(int i = xTemp ;  i <= 79 ;  i++)
     ca2:	2c4f      	cmp	r4, #79	; 0x4f
     ca4:	dc24      	bgt.n	cf0 <EL+0x88>
			{
				xCharPos = i;
     ca6:	4e24      	ldr	r6, [pc, #144]	; (d38 <EL+0xd0>)
				drawChar(0x00);
     ca8:	4d28      	ldr	r5, [pc, #160]	; (d4c <EL+0xe4>)
				xCharPos = i;
     caa:	8034      	strh	r4, [r6, #0]
				drawChar(0x00);
     cac:	2000      	movs	r0, #0
     cae:	47a8      	blx	r5
			for(int i = xTemp ;  i <= 79 ;  i++)
     cb0:	3401      	adds	r4, #1
     cb2:	2c50      	cmp	r4, #80	; 0x50
     cb4:	d1f9      	bne.n	caa <EL+0x42>
     cb6:	e01b      	b.n	cf0 <EL+0x88>
		parameter = dequeueParam();
     cb8:	4b25      	ldr	r3, [pc, #148]	; (d50 <EL+0xe8>)
     cba:	4798      	blx	r3
	tempCharacter = consoleDisplay[xCharPos][yCharPos];
     cbc:	4b1e      	ldr	r3, [pc, #120]	; (d38 <EL+0xd0>)
     cbe:	881a      	ldrh	r2, [r3, #0]
     cc0:	4b1e      	ldr	r3, [pc, #120]	; (d3c <EL+0xd4>)
     cc2:	8819      	ldrh	r1, [r3, #0]
     cc4:	0053      	lsls	r3, r2, #1
     cc6:	189b      	adds	r3, r3, r2
     cc8:	00db      	lsls	r3, r3, #3
     cca:	4a1f      	ldr	r2, [pc, #124]	; (d48 <EL+0xe0>)
     ccc:	18d3      	adds	r3, r2, r3
     cce:	5c5b      	ldrb	r3, [r3, r1]
     cd0:	4699      	mov	r9, r3
	switch(parameter)
     cd2:	2801      	cmp	r0, #1
     cd4:	d021      	beq.n	d1a <EL+0xb2>
     cd6:	2800      	cmp	r0, #0
     cd8:	d0e3      	beq.n	ca2 <EL+0x3a>
     cda:	2802      	cmp	r0, #2
     cdc:	d108      	bne.n	cf0 <EL+0x88>
     cde:	2400      	movs	r4, #0
		break;
		
		case 2:			//Erases entire line containing cursor
			for(int i = 0 ;  i <= 78 ;  i++)
			{
				xCharPos = i;
     ce0:	4e15      	ldr	r6, [pc, #84]	; (d38 <EL+0xd0>)
				drawChar(0x00);
     ce2:	4d1a      	ldr	r5, [pc, #104]	; (d4c <EL+0xe4>)
				xCharPos = i;
     ce4:	8034      	strh	r4, [r6, #0]
				drawChar(0x00);
     ce6:	2000      	movs	r0, #0
     ce8:	47a8      	blx	r5
			for(int i = 0 ;  i <= 78 ;  i++)
     cea:	3401      	adds	r4, #1
     cec:	2c4f      	cmp	r4, #79	; 0x4f
     cee:	d1f9      	bne.n	ce4 <EL+0x7c>
			}
		break;
	}
	
	blinkCursor();
     cf0:	4b18      	ldr	r3, [pc, #96]	; (d54 <EL+0xec>)
     cf2:	4798      	blx	r3
	xCharPos = xTemp;
     cf4:	23ff      	movs	r3, #255	; 0xff
     cf6:	401f      	ands	r7, r3
     cf8:	4a0f      	ldr	r2, [pc, #60]	; (d38 <EL+0xd0>)
     cfa:	8017      	strh	r7, [r2, #0]
	yCharPos = yTemp;
     cfc:	4642      	mov	r2, r8
     cfe:	4013      	ands	r3, r2
     d00:	4a0e      	ldr	r2, [pc, #56]	; (d3c <EL+0xd4>)
     d02:	8013      	strh	r3, [r2, #0]
	drawChar(tempCharacter);
     d04:	4648      	mov	r0, r9
     d06:	4b11      	ldr	r3, [pc, #68]	; (d4c <EL+0xe4>)
     d08:	4798      	blx	r3
	
	currentState = stateGround;	
     d0a:	2200      	movs	r2, #0
     d0c:	4b12      	ldr	r3, [pc, #72]	; (d58 <EL+0xf0>)
     d0e:	701a      	strb	r2, [r3, #0]
}
     d10:	bc1c      	pop	{r2, r3, r4}
     d12:	4690      	mov	r8, r2
     d14:	4699      	mov	r9, r3
     d16:	46a2      	mov	sl, r4
     d18:	bdf0      	pop	{r4, r5, r6, r7, pc}
			for(int i = 0 ;  i <= xTemp+1 ;  i++)
     d1a:	3401      	adds	r4, #1
     d1c:	2500      	movs	r5, #0
     d1e:	2c00      	cmp	r4, #0
     d20:	dbe6      	blt.n	cf0 <EL+0x88>
				xCharPos = i;
     d22:	4b05      	ldr	r3, [pc, #20]	; (d38 <EL+0xd0>)
     d24:	469a      	mov	sl, r3
				drawChar(0x00);
     d26:	4e09      	ldr	r6, [pc, #36]	; (d4c <EL+0xe4>)
				xCharPos = i;
     d28:	4653      	mov	r3, sl
     d2a:	801d      	strh	r5, [r3, #0]
				drawChar(0x00);
     d2c:	2000      	movs	r0, #0
     d2e:	47b0      	blx	r6
			for(int i = 0 ;  i <= xTemp+1 ;  i++)
     d30:	3501      	adds	r5, #1
     d32:	42a5      	cmp	r5, r4
     d34:	ddf8      	ble.n	d28 <EL+0xc0>
     d36:	e7db      	b.n	cf0 <EL+0x88>
     d38:	200002b8 	.word	0x200002b8
     d3c:	200002ba 	.word	0x200002ba
     d40:	20000024 	.word	0x20000024
     d44:	00000241 	.word	0x00000241
     d48:	200003c0 	.word	0x200003c0
     d4c:	0000312d 	.word	0x0000312d
     d50:	00000255 	.word	0x00000255
     d54:	00003215 	.word	0x00003215
     d58:	200002bd 	.word	0x200002bd

00000d5c <DSR>:
void ICH(void) //Insert indicated # of blank chars
{
	currentState = stateGround;
}
void DSR(void)
{
     d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
     d5e:	46ce      	mov	lr, r9
     d60:	4647      	mov	r7, r8
     d62:	b580      	push	{r7, lr}
     d64:	b087      	sub	sp, #28
	
	This function will support both ANSI and DEC formats
	*/
	unsigned char tempCharacter;
		
	uint8_t xTemp = xCharPos;
     d66:	4b34      	ldr	r3, [pc, #208]	; (e38 <DSR+0xdc>)
     d68:	881d      	ldrh	r5, [r3, #0]
	uint8_t yTemp = yCharPos;
     d6a:	4b34      	ldr	r3, [pc, #208]	; (e3c <DSR+0xe0>)
     d6c:	881e      	ldrh	r6, [r3, #0]
	
	char DSROSResponse[] = {0x1b, 0x5b, 0x30, 0x6e};
     d6e:	4b34      	ldr	r3, [pc, #208]	; (e40 <DSR+0xe4>)
     d70:	681b      	ldr	r3, [r3, #0]
     d72:	9305      	str	r3, [sp, #20]
	
	char stringResponse[10];
	char tempbuffer[5];
		
	cursorBlinkState = false;  //need to turn the blinking off; ugly kludge
     d74:	2200      	movs	r2, #0
     d76:	4b33      	ldr	r3, [pc, #204]	; (e44 <DSR+0xe8>)
     d78:	701a      	strb	r2, [r3, #0]
		
	tempCharacter = dequeueParser();
     d7a:	4b33      	ldr	r3, [pc, #204]	; (e48 <DSR+0xec>)
     d7c:	4798      	blx	r3
     d7e:	0004      	movs	r4, r0
	
	if(!isEmptyParam()) //We are in DEC format
     d80:	4b32      	ldr	r3, [pc, #200]	; (e4c <DSR+0xf0>)
     d82:	4798      	blx	r3
     d84:	2800      	cmp	r0, #0
     d86:	d014      	beq.n	db2 <DSR+0x56>
	{
		tempCharacter = dequeueParam();  //this now contains either a 5 or 6
	}
	
	switch(tempCharacter){
     d88:	2c05      	cmp	r4, #5
     d8a:	d016      	beq.n	dba <DSR+0x5e>
     d8c:	2c06      	cmp	r4, #6
     d8e:	d019      	beq.n	dc4 <DSR+0x68>
		
			printf("%s",stringResponse);
		break;
	}
	
	blinkCursor();
     d90:	4b2f      	ldr	r3, [pc, #188]	; (e50 <DSR+0xf4>)
     d92:	4798      	blx	r3
	xCharPos = xTemp;
     d94:	23ff      	movs	r3, #255	; 0xff
     d96:	401d      	ands	r5, r3
     d98:	4a27      	ldr	r2, [pc, #156]	; (e38 <DSR+0xdc>)
     d9a:	8015      	strh	r5, [r2, #0]
	yCharPos = yTemp;
     d9c:	4033      	ands	r3, r6
     d9e:	4a27      	ldr	r2, [pc, #156]	; (e3c <DSR+0xe0>)
     da0:	8013      	strh	r3, [r2, #0]
	currentState = stateGround;
     da2:	2200      	movs	r2, #0
     da4:	4b2b      	ldr	r3, [pc, #172]	; (e54 <DSR+0xf8>)
     da6:	701a      	strb	r2, [r3, #0]
}
     da8:	b007      	add	sp, #28
     daa:	bc0c      	pop	{r2, r3}
     dac:	4690      	mov	r8, r2
     dae:	4699      	mov	r9, r3
     db0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		tempCharacter = dequeueParam();  //this now contains either a 5 or 6
     db2:	4b29      	ldr	r3, [pc, #164]	; (e58 <DSR+0xfc>)
     db4:	4798      	blx	r3
     db6:	0004      	movs	r4, r0
     db8:	e7e6      	b.n	d88 <DSR+0x2c>
			printf("%s",DSROSResponse);
     dba:	a905      	add	r1, sp, #20
     dbc:	4827      	ldr	r0, [pc, #156]	; (e5c <DSR+0x100>)
     dbe:	4b28      	ldr	r3, [pc, #160]	; (e60 <DSR+0x104>)
     dc0:	4798      	blx	r3
		break;
     dc2:	e7e5      	b.n	d90 <DSR+0x34>
			strcat(stringResponse,"\x1B");
     dc4:	a802      	add	r0, sp, #8
     dc6:	4f27      	ldr	r7, [pc, #156]	; (e64 <DSR+0x108>)
     dc8:	47b8      	blx	r7
     dca:	ab02      	add	r3, sp, #8
     dcc:	469c      	mov	ip, r3
     dce:	4460      	add	r0, ip
     dd0:	2202      	movs	r2, #2
     dd2:	4925      	ldr	r1, [pc, #148]	; (e68 <DSR+0x10c>)
     dd4:	4c25      	ldr	r4, [pc, #148]	; (e6c <DSR+0x110>)
     dd6:	47a0      	blx	r4
			strcat(stringResponse,"\x5B");
     dd8:	a802      	add	r0, sp, #8
     dda:	47b8      	blx	r7
     ddc:	ab02      	add	r3, sp, #8
     dde:	469c      	mov	ip, r3
     de0:	4460      	add	r0, ip
     de2:	2202      	movs	r2, #2
     de4:	4922      	ldr	r1, [pc, #136]	; (e70 <DSR+0x114>)
     de6:	47a0      	blx	r4
			strcat(stringResponse,itoa(yTemp,tempbuffer,10));
     de8:	b2f0      	uxtb	r0, r6
     dea:	220a      	movs	r2, #10
     dec:	4669      	mov	r1, sp
     dee:	4b21      	ldr	r3, [pc, #132]	; (e74 <DSR+0x118>)
     df0:	4699      	mov	r9, r3
     df2:	4798      	blx	r3
     df4:	0001      	movs	r1, r0
     df6:	a802      	add	r0, sp, #8
     df8:	4b1f      	ldr	r3, [pc, #124]	; (e78 <DSR+0x11c>)
     dfa:	4698      	mov	r8, r3
     dfc:	4798      	blx	r3
			strcat(stringResponse,";");
     dfe:	a802      	add	r0, sp, #8
     e00:	47b8      	blx	r7
     e02:	ab02      	add	r3, sp, #8
     e04:	469c      	mov	ip, r3
     e06:	4460      	add	r0, ip
     e08:	2202      	movs	r2, #2
     e0a:	491c      	ldr	r1, [pc, #112]	; (e7c <DSR+0x120>)
     e0c:	47a0      	blx	r4
			strcat(stringResponse,itoa(xTemp,tempbuffer,10));
     e0e:	b2e8      	uxtb	r0, r5
     e10:	220a      	movs	r2, #10
     e12:	4669      	mov	r1, sp
     e14:	47c8      	blx	r9
     e16:	0001      	movs	r1, r0
     e18:	a802      	add	r0, sp, #8
     e1a:	47c0      	blx	r8
			strcat(stringResponse,"R");
     e1c:	a802      	add	r0, sp, #8
     e1e:	47b8      	blx	r7
     e20:	ab02      	add	r3, sp, #8
     e22:	469c      	mov	ip, r3
     e24:	4460      	add	r0, ip
     e26:	2202      	movs	r2, #2
     e28:	4915      	ldr	r1, [pc, #84]	; (e80 <DSR+0x124>)
     e2a:	47a0      	blx	r4
			printf("%s",stringResponse);
     e2c:	a902      	add	r1, sp, #8
     e2e:	480b      	ldr	r0, [pc, #44]	; (e5c <DSR+0x100>)
     e30:	4b0b      	ldr	r3, [pc, #44]	; (e60 <DSR+0x104>)
     e32:	4798      	blx	r3
		break;
     e34:	e7ac      	b.n	d90 <DSR+0x34>
     e36:	46c0      	nop			; (mov r8, r8)
     e38:	200002b8 	.word	0x200002b8
     e3c:	200002ba 	.word	0x200002ba
     e40:	000059bc 	.word	0x000059bc
     e44:	20000024 	.word	0x20000024
     e48:	000001e5 	.word	0x000001e5
     e4c:	00000241 	.word	0x00000241
     e50:	00003215 	.word	0x00003215
     e54:	200002bd 	.word	0x200002bd
     e58:	00000255 	.word	0x00000255
     e5c:	00005b34 	.word	0x00005b34
     e60:	00004921 	.word	0x00004921
     e64:	00004bfb 	.word	0x00004bfb
     e68:	00005b08 	.word	0x00005b08
     e6c:	000047ad 	.word	0x000047ad
     e70:	00005b0c 	.word	0x00005b0c
     e74:	00004791 	.word	0x00004791
     e78:	00004be1 	.word	0x00004be1
     e7c:	00005e20 	.word	0x00005e20
     e80:	00005b10 	.word	0x00005b10

00000e84 <isValidCSIEscapeCode>:
bool isValidCSIEscapeCode(uint8_t character)
{
	
	for(uint8_t i = 0; i <= sizeof(csiEscCodes)/sizeof(csiEscCodes[0]) ; i++)
	{
		if(character == csiEscCodes[i])
     e84:	2840      	cmp	r0, #64	; 0x40
     e86:	d006      	beq.n	e96 <isValidCSIEscapeCode+0x12>
     e88:	4b04      	ldr	r3, [pc, #16]	; (e9c <isValidCSIEscapeCode+0x18>)
     e8a:	3301      	adds	r3, #1
     e8c:	3301      	adds	r3, #1
     e8e:	1e5a      	subs	r2, r3, #1
     e90:	7812      	ldrb	r2, [r2, #0]
     e92:	4282      	cmp	r2, r0
     e94:	d1fa      	bne.n	e8c <isValidCSIEscapeCode+0x8>
		{
			return true;	
		}
	}
	return false;
}
     e96:	2001      	movs	r0, #1
     e98:	4770      	bx	lr
     e9a:	46c0      	nop			; (mov r8, r8)
     e9c:	00005b14 	.word	0x00005b14

00000ea0 <CSIparamState>:
{
     ea0:	b510      	push	{r4, lr}
     ea2:	0004      	movs	r4, r0
	if(character >= 0x30 && character <= 0x39)		//character is a digit, put it in the buffer
     ea4:	0003      	movs	r3, r0
     ea6:	3b30      	subs	r3, #48	; 0x30
     ea8:	2b09      	cmp	r3, #9
     eaa:	d90b      	bls.n	ec4 <CSIparamState+0x24>
	else if(character == 0x3B)					//character is ';', now we take items out of 
     eac:	283b      	cmp	r0, #59	; 0x3b
     eae:	d00c      	beq.n	eca <CSIparamState+0x2a>
	else if(character == 0x3F)					//character is '?', this is used for DECCKM
     eb0:	283f      	cmp	r0, #63	; 0x3f
     eb2:	d00e      	beq.n	ed2 <CSIparamState+0x32>
	else if(isValidCSIEscapeCode(character))		//character matches a supported escape code
     eb4:	4b0d      	ldr	r3, [pc, #52]	; (eec <CSIparamState+0x4c>)
     eb6:	4798      	blx	r3
     eb8:	2800      	cmp	r0, #0
     eba:	d10e      	bne.n	eda <CSIparamState+0x3a>
		currentState = stateCSIignore;
     ebc:	2205      	movs	r2, #5
     ebe:	4b0c      	ldr	r3, [pc, #48]	; (ef0 <CSIparamState+0x50>)
     ec0:	701a      	strb	r2, [r3, #0]
}
     ec2:	bd10      	pop	{r4, pc}
		enqueueParser(character);
     ec4:	4b0b      	ldr	r3, [pc, #44]	; (ef4 <CSIparamState+0x54>)
     ec6:	4798      	blx	r3
     ec8:	e7fb      	b.n	ec2 <CSIparamState+0x22>
		enqueueParser(';');						//parambuffer 			
     eca:	203b      	movs	r0, #59	; 0x3b
     ecc:	4b09      	ldr	r3, [pc, #36]	; (ef4 <CSIparamState+0x54>)
     ece:	4798      	blx	r3
     ed0:	e7f7      	b.n	ec2 <CSIparamState+0x22>
		enqueueParser('?');						//the terminating character
     ed2:	203f      	movs	r0, #63	; 0x3f
     ed4:	4b07      	ldr	r3, [pc, #28]	; (ef4 <CSIparamState+0x54>)
     ed6:	4798      	blx	r3
     ed8:	e7f3      	b.n	ec2 <CSIparamState+0x22>
		queueTransmogrifier();											
     eda:	4b07      	ldr	r3, [pc, #28]	; (ef8 <CSIparamState+0x58>)
     edc:	4798      	blx	r3
		currentState = stateCSIentry;
     ede:	2203      	movs	r2, #3
     ee0:	4b03      	ldr	r3, [pc, #12]	; (ef0 <CSIparamState+0x50>)
     ee2:	701a      	strb	r2, [r3, #0]
		CSIentryState(character);
     ee4:	0020      	movs	r0, r4
     ee6:	4b05      	ldr	r3, [pc, #20]	; (efc <CSIparamState+0x5c>)
     ee8:	4798      	blx	r3
     eea:	e7ea      	b.n	ec2 <CSIparamState+0x22>
     eec:	00000e85 	.word	0x00000e85
     ef0:	200002bd 	.word	0x200002bd
     ef4:	00000215 	.word	0x00000215
     ef8:	00000309 	.word	0x00000309
     efc:	00000f01 	.word	0x00000f01

00000f00 <CSIentryState>:
{
     f00:	b510      	push	{r4, lr}
	if(character == 0x40)		//ESC [ @ ICH insert indicated # of blank chars
     f02:	2840      	cmp	r0, #64	; 0x40
     f04:	d053      	beq.n	fae <CSIentryState+0xae>
	else if(character == 0x41)	//ESC [ A	Cursor Up
     f06:	2841      	cmp	r0, #65	; 0x41
     f08:	d055      	beq.n	fb6 <CSIentryState+0xb6>
	else if(character == 0x61)	//ESC [ a HPR
     f0a:	2861      	cmp	r0, #97	; 0x61
     f0c:	d056      	beq.n	fbc <CSIentryState+0xbc>
	else if(character == 0x42)	//ESC [ B	Cursor Down
     f0e:	2842      	cmp	r0, #66	; 0x42
     f10:	d057      	beq.n	fc2 <CSIentryState+0xc2>
	else if(character == 0x43)	//ESC [ C	Cursor Forward
     f12:	2843      	cmp	r0, #67	; 0x43
     f14:	d058      	beq.n	fc8 <CSIentryState+0xc8>
	else if(character == 0x63)	//ESC [ c DA
     f16:	2863      	cmp	r0, #99	; 0x63
     f18:	d059      	beq.n	fce <CSIentryState+0xce>
	else if(character == 0x44)	//ESC [ D	Cursor Backward
     f1a:	2844      	cmp	r0, #68	; 0x44
     f1c:	d05c      	beq.n	fd8 <CSIentryState+0xd8>
	else if(character == 0x64)	//ESC [ d	VPA
     f1e:	2864      	cmp	r0, #100	; 0x64
     f20:	d048      	beq.n	fb4 <CSIentryState+0xb4>
	else if(character == 0x45)	//ESC [ E	Cursor Next Line
     f22:	2845      	cmp	r0, #69	; 0x45
     f24:	d05b      	beq.n	fde <CSIentryState+0xde>
	else if(character == 0x65)	//ESC [ e VPR
     f26:	2865      	cmp	r0, #101	; 0x65
     f28:	d05c      	beq.n	fe4 <CSIentryState+0xe4>
	else if(character == 0x46)	//ESC [ F	Cursor Preceding Line
     f2a:	2846      	cmp	r0, #70	; 0x46
     f2c:	d05d      	beq.n	fea <CSIentryState+0xea>
	else if(character == 0x66)	//ESC [ f HVP
     f2e:	2866      	cmp	r0, #102	; 0x66
     f30:	d05e      	beq.n	ff0 <CSIentryState+0xf0>
	else if(character == 0x47)	//ESC [ G	Cursor Horizontal Absolute
     f32:	2847      	cmp	r0, #71	; 0x47
     f34:	d05f      	beq.n	ff6 <CSIentryState+0xf6>
	else if(character == 0x67)	//ESC [ g TBC
     f36:	2867      	cmp	r0, #103	; 0x67
     f38:	d03c      	beq.n	fb4 <CSIentryState+0xb4>
	else if(character == 0x48)	//ESC [ H	Cursor Position
     f3a:	2848      	cmp	r0, #72	; 0x48
     f3c:	d05e      	beq.n	ffc <CSIentryState+0xfc>
	else if(character == 0x68)	//ESC [ h Set Mode
     f3e:	2868      	cmp	r0, #104	; 0x68
     f40:	d05f      	beq.n	1002 <CSIentryState+0x102>
	else if(character == 0x49)	//ESC [ I	Cursor Horizontal Tab
     f42:	2849      	cmp	r0, #73	; 0x49
     f44:	d061      	beq.n	100a <CSIentryState+0x10a>
	else if(character == 0x4A)	//ESC [ J	Erase In Display
     f46:	284a      	cmp	r0, #74	; 0x4a
     f48:	d063      	beq.n	1012 <CSIentryState+0x112>
	else if(character == 0x4B)	//ESC [ K	Erase In Line
     f4a:	284b      	cmp	r0, #75	; 0x4b
     f4c:	d064      	beq.n	1018 <CSIentryState+0x118>
	else if(character == 0x4C)	//ESC [ L 
     f4e:	0003      	movs	r3, r0
     f50:	3b4c      	subs	r3, #76	; 0x4c
     f52:	2b01      	cmp	r3, #1
     f54:	d92e      	bls.n	fb4 <CSIentryState+0xb4>
	else if(character == 0x6C)	//ESC [ l	Reset mode
     f56:	286c      	cmp	r0, #108	; 0x6c
     f58:	d02c      	beq.n	fb4 <CSIentryState+0xb4>
	else if(character == 0x6D)	//ESC [ m	Select Graphic Rendition
     f5a:	286d      	cmp	r0, #109	; 0x6d
     f5c:	d05f      	beq.n	101e <CSIentryState+0x11e>
	else if(character == 0x6E)	//ESC [ n Device Status Report
     f5e:	286e      	cmp	r0, #110	; 0x6e
     f60:	d061      	beq.n	1026 <CSIentryState+0x126>
	else if(character == 0x50)	//ESC [ P	Delete Character
     f62:	2850      	cmp	r0, #80	; 0x50
     f64:	d062      	beq.n	102c <CSIentryState+0x12c>
	else if(character == 0x51)	//ESC [ Q	Select Edit Extent Mode
     f66:	2851      	cmp	r0, #81	; 0x51
     f68:	d064      	beq.n	1034 <CSIentryState+0x134>
	else if(character == 0x71)	//ESC [ q	Set Keyboard LEDs
     f6a:	0003      	movs	r3, r0
     f6c:	3b71      	subs	r3, #113	; 0x71
     f6e:	2b01      	cmp	r3, #1
     f70:	d920      	bls.n	fb4 <CSIentryState+0xb4>
	else if(character == 0x73)	//ESC [ s	Save Cursor Position
     f72:	2873      	cmp	r0, #115	; 0x73
     f74:	d062      	beq.n	103c <CSIentryState+0x13c>
	else if(character == 0x75)	//ESC [ u	Restore Cursor Position
     f76:	2875      	cmp	r0, #117	; 0x75
     f78:	d063      	beq.n	1042 <CSIentryState+0x142>
	else if(character == 0x58)	//ESC [ X
     f7a:	2858      	cmp	r0, #88	; 0x58
     f7c:	d01a      	beq.n	fb4 <CSIentryState+0xb4>
	else if(character == 0x57)	//ESC [ W	Cursor Tabulation Control
     f7e:	2857      	cmp	r0, #87	; 0x57
     f80:	d062      	beq.n	1048 <CSIentryState+0x148>
	else if(character == 0x5A)	//ESC [ Z	Cursor Backwards Tab
     f82:	285a      	cmp	r0, #90	; 0x5a
     f84:	d064      	beq.n	1050 <CSIentryState+0x150>
	else if(character == 0x60)	//ESC [ ` HPA
     f86:	2860      	cmp	r0, #96	; 0x60
     f88:	d014      	beq.n	fb4 <CSIentryState+0xb4>
	else if(character >= 0x30 && character <= 0x39) // if the character is a digit 0-9
     f8a:	0003      	movs	r3, r0
     f8c:	3b30      	subs	r3, #48	; 0x30
     f8e:	2b09      	cmp	r3, #9
     f90:	d962      	bls.n	1058 <CSIentryState+0x158>
	else if(character == 0x3B)	//Semicolon ; parameter deliminator
     f92:	283b      	cmp	r0, #59	; 0x3b
     f94:	d066      	beq.n	1064 <CSIentryState+0x164>
	else if(character == 0x3F)	//Question '?'; this is a param
     f96:	283f      	cmp	r0, #63	; 0x3f
     f98:	d06a      	beq.n	1070 <CSIentryState+0x170>
	else if(character == 0x1B)		//ESC, send back to stateESC
     f9a:	281b      	cmp	r0, #27
     f9c:	d100      	bne.n	fa0 <CSIentryState+0xa0>
     f9e:	e06d      	b.n	107c <CSIentryState+0x17c>
	else if(character == 0x3A)
     fa0:	283a      	cmp	r0, #58	; 0x3a
     fa2:	d100      	bne.n	fa6 <CSIentryState+0xa6>
     fa4:	e06e      	b.n	1084 <CSIentryState+0x184>
		currentState = stateGround;
     fa6:	2200      	movs	r2, #0
     fa8:	4b38      	ldr	r3, [pc, #224]	; (108c <CSIentryState+0x18c>)
     faa:	701a      	strb	r2, [r3, #0]
}
     fac:	e002      	b.n	fb4 <CSIentryState+0xb4>
	currentState = stateGround;
     fae:	2200      	movs	r2, #0
     fb0:	4b36      	ldr	r3, [pc, #216]	; (108c <CSIentryState+0x18c>)
     fb2:	701a      	strb	r2, [r3, #0]
}
     fb4:	bd10      	pop	{r4, pc}
		CUU();
     fb6:	4b36      	ldr	r3, [pc, #216]	; (1090 <CSIentryState+0x190>)
     fb8:	4798      	blx	r3
     fba:	e7fb      	b.n	fb4 <CSIentryState+0xb4>
		CUF();
     fbc:	4b35      	ldr	r3, [pc, #212]	; (1094 <CSIentryState+0x194>)
     fbe:	4798      	blx	r3
     fc0:	e7f8      	b.n	fb4 <CSIentryState+0xb4>
		CUD();
     fc2:	4b35      	ldr	r3, [pc, #212]	; (1098 <CSIentryState+0x198>)
     fc4:	4798      	blx	r3
     fc6:	e7f5      	b.n	fb4 <CSIentryState+0xb4>
		CUF();
     fc8:	4b32      	ldr	r3, [pc, #200]	; (1094 <CSIentryState+0x194>)
     fca:	4798      	blx	r3
     fcc:	e7f2      	b.n	fb4 <CSIentryState+0xb4>
		printf("%s",DECIDreturn);
     fce:	4933      	ldr	r1, [pc, #204]	; (109c <CSIentryState+0x19c>)
     fd0:	4833      	ldr	r0, [pc, #204]	; (10a0 <CSIentryState+0x1a0>)
     fd2:	4b34      	ldr	r3, [pc, #208]	; (10a4 <CSIentryState+0x1a4>)
     fd4:	4798      	blx	r3
     fd6:	e7ed      	b.n	fb4 <CSIentryState+0xb4>
		CUB();
     fd8:	4b33      	ldr	r3, [pc, #204]	; (10a8 <CSIentryState+0x1a8>)
     fda:	4798      	blx	r3
     fdc:	e7ea      	b.n	fb4 <CSIentryState+0xb4>
		CNL();
     fde:	4b33      	ldr	r3, [pc, #204]	; (10ac <CSIentryState+0x1ac>)
     fe0:	4798      	blx	r3
     fe2:	e7e7      	b.n	fb4 <CSIentryState+0xb4>
		CUD();
     fe4:	4b2c      	ldr	r3, [pc, #176]	; (1098 <CSIentryState+0x198>)
     fe6:	4798      	blx	r3
     fe8:	e7e4      	b.n	fb4 <CSIentryState+0xb4>
		CPL();
     fea:	4b31      	ldr	r3, [pc, #196]	; (10b0 <CSIentryState+0x1b0>)
     fec:	4798      	blx	r3
     fee:	e7e1      	b.n	fb4 <CSIentryState+0xb4>
		CUP();
     ff0:	4b30      	ldr	r3, [pc, #192]	; (10b4 <CSIentryState+0x1b4>)
     ff2:	4798      	blx	r3
     ff4:	e7de      	b.n	fb4 <CSIentryState+0xb4>
		CHA();
     ff6:	4b30      	ldr	r3, [pc, #192]	; (10b8 <CSIentryState+0x1b8>)
     ff8:	4798      	blx	r3
     ffa:	e7db      	b.n	fb4 <CSIentryState+0xb4>
		CUP();
     ffc:	4b2d      	ldr	r3, [pc, #180]	; (10b4 <CSIentryState+0x1b4>)
     ffe:	4798      	blx	r3
    1000:	e7d8      	b.n	fb4 <CSIentryState+0xb4>
		currentState = stateGround;
    1002:	2200      	movs	r2, #0
    1004:	4b21      	ldr	r3, [pc, #132]	; (108c <CSIentryState+0x18c>)
    1006:	701a      	strb	r2, [r3, #0]
    1008:	e7d4      	b.n	fb4 <CSIentryState+0xb4>
	currentState = stateGround;
    100a:	2200      	movs	r2, #0
    100c:	4b1f      	ldr	r3, [pc, #124]	; (108c <CSIentryState+0x18c>)
    100e:	701a      	strb	r2, [r3, #0]
    1010:	e7d0      	b.n	fb4 <CSIentryState+0xb4>
		ED();
    1012:	4b2a      	ldr	r3, [pc, #168]	; (10bc <CSIentryState+0x1bc>)
    1014:	4798      	blx	r3
    1016:	e7cd      	b.n	fb4 <CSIentryState+0xb4>
		EL();
    1018:	4b29      	ldr	r3, [pc, #164]	; (10c0 <CSIentryState+0x1c0>)
    101a:	4798      	blx	r3
    101c:	e7ca      	b.n	fb4 <CSIentryState+0xb4>
	currentState = stateGround;
    101e:	2200      	movs	r2, #0
    1020:	4b1a      	ldr	r3, [pc, #104]	; (108c <CSIentryState+0x18c>)
    1022:	701a      	strb	r2, [r3, #0]
    1024:	e7c6      	b.n	fb4 <CSIentryState+0xb4>
		DSR();
    1026:	4b27      	ldr	r3, [pc, #156]	; (10c4 <CSIentryState+0x1c4>)
    1028:	4798      	blx	r3
    102a:	e7c3      	b.n	fb4 <CSIentryState+0xb4>
	currentState = stateGround;
    102c:	2200      	movs	r2, #0
    102e:	4b17      	ldr	r3, [pc, #92]	; (108c <CSIentryState+0x18c>)
    1030:	701a      	strb	r2, [r3, #0]
    1032:	e7bf      	b.n	fb4 <CSIentryState+0xb4>
	currentState = stateGround;
    1034:	2200      	movs	r2, #0
    1036:	4b15      	ldr	r3, [pc, #84]	; (108c <CSIentryState+0x18c>)
    1038:	701a      	strb	r2, [r3, #0]
    103a:	e7bb      	b.n	fb4 <CSIentryState+0xb4>
		SC();
    103c:	4b22      	ldr	r3, [pc, #136]	; (10c8 <CSIentryState+0x1c8>)
    103e:	4798      	blx	r3
    1040:	e7b8      	b.n	fb4 <CSIentryState+0xb4>
		RC();
    1042:	4b22      	ldr	r3, [pc, #136]	; (10cc <CSIentryState+0x1cc>)
    1044:	4798      	blx	r3
    1046:	e7b5      	b.n	fb4 <CSIentryState+0xb4>
	currentState = stateGround;
    1048:	2200      	movs	r2, #0
    104a:	4b10      	ldr	r3, [pc, #64]	; (108c <CSIentryState+0x18c>)
    104c:	701a      	strb	r2, [r3, #0]
    104e:	e7b1      	b.n	fb4 <CSIentryState+0xb4>
	currentState = stateGround;
    1050:	2200      	movs	r2, #0
    1052:	4b0e      	ldr	r3, [pc, #56]	; (108c <CSIentryState+0x18c>)
    1054:	701a      	strb	r2, [r3, #0]
    1056:	e7ad      	b.n	fb4 <CSIentryState+0xb4>
		currentState = stateCSIparam;
    1058:	2204      	movs	r2, #4
    105a:	4b0c      	ldr	r3, [pc, #48]	; (108c <CSIentryState+0x18c>)
    105c:	701a      	strb	r2, [r3, #0]
		CSIparamState(character);
    105e:	4b1c      	ldr	r3, [pc, #112]	; (10d0 <CSIentryState+0x1d0>)
    1060:	4798      	blx	r3
    1062:	e7a7      	b.n	fb4 <CSIentryState+0xb4>
		currentState = stateCSIparam;
    1064:	2204      	movs	r2, #4
    1066:	4b09      	ldr	r3, [pc, #36]	; (108c <CSIentryState+0x18c>)
    1068:	701a      	strb	r2, [r3, #0]
		CSIparamState(character);
    106a:	4b19      	ldr	r3, [pc, #100]	; (10d0 <CSIentryState+0x1d0>)
    106c:	4798      	blx	r3
    106e:	e7a1      	b.n	fb4 <CSIentryState+0xb4>
		currentState = stateCSIparam;
    1070:	2204      	movs	r2, #4
    1072:	4b06      	ldr	r3, [pc, #24]	; (108c <CSIentryState+0x18c>)
    1074:	701a      	strb	r2, [r3, #0]
		CSIparamState(character);
    1076:	4b16      	ldr	r3, [pc, #88]	; (10d0 <CSIentryState+0x1d0>)
    1078:	4798      	blx	r3
    107a:	e79b      	b.n	fb4 <CSIentryState+0xb4>
		currentState = stateESC;
    107c:	2201      	movs	r2, #1
    107e:	4b03      	ldr	r3, [pc, #12]	; (108c <CSIentryState+0x18c>)
    1080:	701a      	strb	r2, [r3, #0]
    1082:	e797      	b.n	fb4 <CSIentryState+0xb4>
		currentState = stateCSIignore;
    1084:	2205      	movs	r2, #5
    1086:	4b01      	ldr	r3, [pc, #4]	; (108c <CSIentryState+0x18c>)
    1088:	701a      	strb	r2, [r3, #0]
    108a:	e793      	b.n	fb4 <CSIentryState+0xb4>
    108c:	200002bd 	.word	0x200002bd
    1090:	00000645 	.word	0x00000645
    1094:	0000078d 	.word	0x0000078d
    1098:	000006e9 	.word	0x000006e9
    109c:	00005b00 	.word	0x00005b00
    10a0:	00005b34 	.word	0x00005b34
    10a4:	00004921 	.word	0x00004921
    10a8:	00000835 	.word	0x00000835
    10ac:	000008d1 	.word	0x000008d1
    10b0:	00000969 	.word	0x00000969
    10b4:	00000a81 	.word	0x00000a81
    10b8:	000009fd 	.word	0x000009fd
    10bc:	00000b2d 	.word	0x00000b2d
    10c0:	00000c69 	.word	0x00000c69
    10c4:	00000d5d 	.word	0x00000d5d
    10c8:	00000361 	.word	0x00000361
    10cc:	0000038d 	.word	0x0000038d
    10d0:	00000ea1 	.word	0x00000ea1

000010d4 <nextTab>:


int nextTab(int a) 
{
    10d4:	b510      	push	{r4, lr}
    10d6:	b0d0      	sub	sp, #320	; 0x140
    10d8:	0004      	movs	r4, r0
	int tabArray[] =
    10da:	22a0      	movs	r2, #160	; 0xa0
    10dc:	0052      	lsls	r2, r2, #1
    10de:	4905      	ldr	r1, [pc, #20]	; (10f4 <nextTab+0x20>)
    10e0:	3104      	adds	r1, #4
    10e2:	4668      	mov	r0, sp
    10e4:	4b04      	ldr	r3, [pc, #16]	; (10f8 <nextTab+0x24>)
    10e6:	4798      	blx	r3
		 64,64,64,64,64,64,64,64,
		 72,72,72,72,72,72,72,72,
		 79,79,79,79,79,79,79,79
		};
	
	return tabArray[a];
    10e8:	00a4      	lsls	r4, r4, #2
    10ea:	466b      	mov	r3, sp
    10ec:	58e0      	ldr	r0, [r4, r3]
}
    10ee:	b050      	add	sp, #320	; 0x140
    10f0:	bd10      	pop	{r4, pc}
    10f2:	46c0      	nop			; (mov r8, r8)
    10f4:	000059bc 	.word	0x000059bc
    10f8:	000047ad 	.word	0x000047ad

000010fc <groundState>:
{
    10fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    10fe:	46c6      	mov	lr, r8
    1100:	b500      	push	{lr}
    1102:	0004      	movs	r4, r0
	clearQueues();									//parser and paramQueues cleared
    1104:	4bac      	ldr	r3, [pc, #688]	; (13b8 <groundState+0x2bc>)
    1106:	4798      	blx	r3
	if(character == 0x00)							//NUL 0x00 DO NOTHING
    1108:	2c07      	cmp	r4, #7
    110a:	d93d      	bls.n	1188 <groundState+0x8c>
	else if(character == 0x08)						//BS 0x08 Backspace
    110c:	2c08      	cmp	r4, #8
    110e:	d037      	beq.n	1180 <groundState+0x84>
	else if(character == 0x09)						//TAB 0x09 Horizontal Tab
    1110:	2c09      	cmp	r4, #9
    1112:	d055      	beq.n	11c0 <groundState+0xc4>
	else if(character == 0x0A)						//LF 0x0A Line Feed
    1114:	2c0a      	cmp	r4, #10
    1116:	d100      	bne.n	111a <groundState+0x1e>
    1118:	e074      	b.n	1204 <groundState+0x108>
	else if(character == 0x0B)						//VT 0x0B Vertical Tab
    111a:	2c0b      	cmp	r4, #11
    111c:	d100      	bne.n	1120 <groundState+0x24>
    111e:	e0c8      	b.n	12b2 <groundState+0x1b6>
	else if(character == 0x0C)						//FF 0x0C Form Feed
    1120:	2c0c      	cmp	r4, #12
    1122:	d031      	beq.n	1188 <groundState+0x8c>
	else if(character == 0x0D)						//CR 0x0D Carriage Return
    1124:	2c0d      	cmp	r4, #13
    1126:	d100      	bne.n	112a <groundState+0x2e>
    1128:	e11b      	b.n	1362 <groundState+0x266>
	else if(character == 0x0E)						//SO 0x0E Shift Out
    112a:	0023      	movs	r3, r4
    112c:	3b0e      	subs	r3, #14
    112e:	2b0c      	cmp	r3, #12
    1130:	d92a      	bls.n	1188 <groundState+0x8c>
	else if(character == 0x1B)						//ESC 0x1B Escape
    1132:	2c1b      	cmp	r4, #27
    1134:	d100      	bne.n	1138 <groundState+0x3c>
    1136:	e13a      	b.n	13ae <groundState+0x2b2>
	else if(character == 0x1C)						//FS 0x1C File Separator
    1138:	0023      	movs	r3, r4
    113a:	3b1c      	subs	r3, #28
    113c:	2b03      	cmp	r3, #3
    113e:	d923      	bls.n	1188 <groundState+0x8c>
	else if(character == 0x7F)						//DEL 0x7F Delete
    1140:	2c7f      	cmp	r4, #127	; 0x7f
    1142:	d021      	beq.n	1188 <groundState+0x8c>
		consoleDisplay[xCharPos][yCharPos] = character;
    1144:	4e9d      	ldr	r6, [pc, #628]	; (13bc <groundState+0x2c0>)
    1146:	4d9e      	ldr	r5, [pc, #632]	; (13c0 <groundState+0x2c4>)
    1148:	882b      	ldrh	r3, [r5, #0]
    114a:	4a9e      	ldr	r2, [pc, #632]	; (13c4 <groundState+0x2c8>)
    114c:	4690      	mov	r8, r2
    114e:	8812      	ldrh	r2, [r2, #0]
    1150:	2718      	movs	r7, #24
    1152:	437b      	muls	r3, r7
    1154:	18f3      	adds	r3, r6, r3
    1156:	549c      	strb	r4, [r3, r2]
		drawChar(consoleDisplay[xCharPos][yCharPos]);
    1158:	0020      	movs	r0, r4
    115a:	4c9b      	ldr	r4, [pc, #620]	; (13c8 <groundState+0x2cc>)
    115c:	47a0      	blx	r4
		xCharPos++;
    115e:	882b      	ldrh	r3, [r5, #0]
    1160:	3301      	adds	r3, #1
    1162:	b29b      	uxth	r3, r3
    1164:	802b      	strh	r3, [r5, #0]
		drawChar(consoleDisplay[xCharPos][yCharPos]);
    1166:	4642      	mov	r2, r8
    1168:	8812      	ldrh	r2, [r2, #0]
    116a:	437b      	muls	r3, r7
    116c:	18f6      	adds	r6, r6, r3
    116e:	5cb0      	ldrb	r0, [r6, r2]
    1170:	47a0      	blx	r4
		if(xCharPos > 79)		//END OF LINE
    1172:	882b      	ldrh	r3, [r5, #0]
    1174:	2b4f      	cmp	r3, #79	; 0x4f
    1176:	d907      	bls.n	1188 <groundState+0x8c>
			xCharPos--;
    1178:	3b01      	subs	r3, #1
    117a:	4a91      	ldr	r2, [pc, #580]	; (13c0 <groundState+0x2c4>)
    117c:	8013      	strh	r3, [r2, #0]
}
    117e:	e003      	b.n	1188 <groundState+0x8c>
		if(xCharPos > 0)
    1180:	4b8f      	ldr	r3, [pc, #572]	; (13c0 <groundState+0x2c4>)
    1182:	881b      	ldrh	r3, [r3, #0]
    1184:	2b00      	cmp	r3, #0
    1186:	d102      	bne.n	118e <groundState+0x92>
}
    1188:	bc04      	pop	{r2}
    118a:	4690      	mov	r8, r2
    118c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    118e:	4c8b      	ldr	r4, [pc, #556]	; (13bc <groundState+0x2c0>)
    1190:	4d8c      	ldr	r5, [pc, #560]	; (13c4 <groundState+0x2c8>)
    1192:	8829      	ldrh	r1, [r5, #0]
    1194:	005a      	lsls	r2, r3, #1
    1196:	18d3      	adds	r3, r2, r3
    1198:	00db      	lsls	r3, r3, #3
    119a:	18e3      	adds	r3, r4, r3
    119c:	5c58      	ldrb	r0, [r3, r1]
    119e:	4e8a      	ldr	r6, [pc, #552]	; (13c8 <groundState+0x2cc>)
    11a0:	47b0      	blx	r6
			xCharPos--;
    11a2:	4a87      	ldr	r2, [pc, #540]	; (13c0 <groundState+0x2c4>)
    11a4:	8813      	ldrh	r3, [r2, #0]
    11a6:	3b01      	subs	r3, #1
    11a8:	b29b      	uxth	r3, r3
    11aa:	8013      	strh	r3, [r2, #0]
			tempCharacter = consoleDisplay[xCharPos][yCharPos];
    11ac:	8829      	ldrh	r1, [r5, #0]
    11ae:	005a      	lsls	r2, r3, #1
    11b0:	18d3      	adds	r3, r2, r3
    11b2:	00db      	lsls	r3, r3, #3
    11b4:	18e3      	adds	r3, r4, r3
			drawChar(tempCharacter);
    11b6:	5c58      	ldrb	r0, [r3, r1]
    11b8:	47b0      	blx	r6
			blinkCursor();
    11ba:	4b84      	ldr	r3, [pc, #528]	; (13cc <groundState+0x2d0>)
    11bc:	4798      	blx	r3
    11be:	e7e3      	b.n	1188 <groundState+0x8c>
		drawChar(consoleDisplay[xCharPos][yCharPos]);
    11c0:	4c7f      	ldr	r4, [pc, #508]	; (13c0 <groundState+0x2c4>)
    11c2:	8822      	ldrh	r2, [r4, #0]
    11c4:	4b7f      	ldr	r3, [pc, #508]	; (13c4 <groundState+0x2c8>)
    11c6:	8819      	ldrh	r1, [r3, #0]
    11c8:	0053      	lsls	r3, r2, #1
    11ca:	189b      	adds	r3, r3, r2
    11cc:	00db      	lsls	r3, r3, #3
    11ce:	4a7b      	ldr	r2, [pc, #492]	; (13bc <groundState+0x2c0>)
    11d0:	18d3      	adds	r3, r2, r3
    11d2:	5c58      	ldrb	r0, [r3, r1]
    11d4:	4b7c      	ldr	r3, [pc, #496]	; (13c8 <groundState+0x2cc>)
    11d6:	4798      	blx	r3
		if(xCharPos <= 79)
    11d8:	8820      	ldrh	r0, [r4, #0]
    11da:	284f      	cmp	r0, #79	; 0x4f
    11dc:	d803      	bhi.n	11e6 <groundState+0xea>
			xCharPos = nextTab(xCharPos);
    11de:	4b7c      	ldr	r3, [pc, #496]	; (13d0 <groundState+0x2d4>)
    11e0:	4798      	blx	r3
    11e2:	4b77      	ldr	r3, [pc, #476]	; (13c0 <groundState+0x2c4>)
    11e4:	8018      	strh	r0, [r3, #0]
		drawChar(consoleDisplay[xCharPos][yCharPos]);
    11e6:	4b76      	ldr	r3, [pc, #472]	; (13c0 <groundState+0x2c4>)
    11e8:	881a      	ldrh	r2, [r3, #0]
    11ea:	4b76      	ldr	r3, [pc, #472]	; (13c4 <groundState+0x2c8>)
    11ec:	8819      	ldrh	r1, [r3, #0]
    11ee:	0053      	lsls	r3, r2, #1
    11f0:	189b      	adds	r3, r3, r2
    11f2:	00db      	lsls	r3, r3, #3
    11f4:	4a71      	ldr	r2, [pc, #452]	; (13bc <groundState+0x2c0>)
    11f6:	18d3      	adds	r3, r2, r3
    11f8:	5c58      	ldrb	r0, [r3, r1]
    11fa:	4b73      	ldr	r3, [pc, #460]	; (13c8 <groundState+0x2cc>)
    11fc:	4798      	blx	r3
		blinkCursor();
    11fe:	4b73      	ldr	r3, [pc, #460]	; (13cc <groundState+0x2d0>)
    1200:	4798      	blx	r3
    1202:	e7c1      	b.n	1188 <groundState+0x8c>
		if(yCharPos == 23)
    1204:	4b6f      	ldr	r3, [pc, #444]	; (13c4 <groundState+0x2c8>)
    1206:	881a      	ldrh	r2, [r3, #0]
    1208:	2a17      	cmp	r2, #23
    120a:	d032      	beq.n	1272 <groundState+0x176>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    120c:	4c6b      	ldr	r4, [pc, #428]	; (13bc <groundState+0x2c0>)
    120e:	4d6c      	ldr	r5, [pc, #432]	; (13c0 <groundState+0x2c4>)
    1210:	8829      	ldrh	r1, [r5, #0]
    1212:	004b      	lsls	r3, r1, #1
    1214:	185b      	adds	r3, r3, r1
    1216:	00db      	lsls	r3, r3, #3
    1218:	18e3      	adds	r3, r4, r3
    121a:	5c98      	ldrb	r0, [r3, r2]
    121c:	4e6a      	ldr	r6, [pc, #424]	; (13c8 <groundState+0x2cc>)
    121e:	47b0      	blx	r6
			yCharPos++;
    1220:	4a68      	ldr	r2, [pc, #416]	; (13c4 <groundState+0x2c8>)
    1222:	8813      	ldrh	r3, [r2, #0]
    1224:	3301      	adds	r3, #1
    1226:	b29b      	uxth	r3, r3
    1228:	8013      	strh	r3, [r2, #0]
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    122a:	8829      	ldrh	r1, [r5, #0]
    122c:	004a      	lsls	r2, r1, #1
    122e:	1852      	adds	r2, r2, r1
    1230:	00d2      	lsls	r2, r2, #3
    1232:	18a4      	adds	r4, r4, r2
    1234:	5ce0      	ldrb	r0, [r4, r3]
    1236:	47b0      	blx	r6
			blinkCursor();
    1238:	4b64      	ldr	r3, [pc, #400]	; (13cc <groundState+0x2d0>)
    123a:	4798      	blx	r3
		if(lineFeed)
    123c:	4b65      	ldr	r3, [pc, #404]	; (13d4 <groundState+0x2d8>)
    123e:	781b      	ldrb	r3, [r3, #0]
    1240:	2b00      	cmp	r3, #0
    1242:	d0a1      	beq.n	1188 <groundState+0x8c>
			if(yCharPos == 23)
    1244:	4b5f      	ldr	r3, [pc, #380]	; (13c4 <groundState+0x2c8>)
    1246:	881a      	ldrh	r2, [r3, #0]
    1248:	2a17      	cmp	r2, #23
    124a:	d021      	beq.n	1290 <groundState+0x194>
				drawChar(consoleDisplay[xCharPos][yCharPos]);
    124c:	4d5b      	ldr	r5, [pc, #364]	; (13bc <groundState+0x2c0>)
    124e:	4e5c      	ldr	r6, [pc, #368]	; (13c0 <groundState+0x2c4>)
    1250:	8831      	ldrh	r1, [r6, #0]
    1252:	004b      	lsls	r3, r1, #1
    1254:	185b      	adds	r3, r3, r1
    1256:	00db      	lsls	r3, r3, #3
    1258:	18eb      	adds	r3, r5, r3
    125a:	5c98      	ldrb	r0, [r3, r2]
    125c:	4c5a      	ldr	r4, [pc, #360]	; (13c8 <groundState+0x2cc>)
    125e:	47a0      	blx	r4
				xCharPos = 0;
    1260:	2300      	movs	r3, #0
    1262:	8033      	strh	r3, [r6, #0]
				drawChar(consoleDisplay[xCharPos][yCharPos]);
    1264:	4b57      	ldr	r3, [pc, #348]	; (13c4 <groundState+0x2c8>)
    1266:	881b      	ldrh	r3, [r3, #0]
    1268:	5ce8      	ldrb	r0, [r5, r3]
    126a:	47a0      	blx	r4
				blinkCursor();
    126c:	4b57      	ldr	r3, [pc, #348]	; (13cc <groundState+0x2d0>)
    126e:	4798      	blx	r3
    1270:	e78a      	b.n	1188 <groundState+0x8c>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    1272:	4b53      	ldr	r3, [pc, #332]	; (13c0 <groundState+0x2c4>)
    1274:	881a      	ldrh	r2, [r3, #0]
    1276:	0053      	lsls	r3, r2, #1
    1278:	189b      	adds	r3, r3, r2
    127a:	00db      	lsls	r3, r3, #3
    127c:	4a4f      	ldr	r2, [pc, #316]	; (13bc <groundState+0x2c0>)
    127e:	18d3      	adds	r3, r2, r3
    1280:	7dd8      	ldrb	r0, [r3, #23]
    1282:	4b51      	ldr	r3, [pc, #324]	; (13c8 <groundState+0x2cc>)
    1284:	4798      	blx	r3
			newLine();
    1286:	4b54      	ldr	r3, [pc, #336]	; (13d8 <groundState+0x2dc>)
    1288:	4798      	blx	r3
			blinkCursor();
    128a:	4b50      	ldr	r3, [pc, #320]	; (13cc <groundState+0x2d0>)
    128c:	4798      	blx	r3
    128e:	e7d5      	b.n	123c <groundState+0x140>
				drawChar(consoleDisplay[xCharPos][yCharPos]);
    1290:	4d4b      	ldr	r5, [pc, #300]	; (13c0 <groundState+0x2c4>)
    1292:	882a      	ldrh	r2, [r5, #0]
    1294:	0053      	lsls	r3, r2, #1
    1296:	189b      	adds	r3, r3, r2
    1298:	00db      	lsls	r3, r3, #3
    129a:	4a48      	ldr	r2, [pc, #288]	; (13bc <groundState+0x2c0>)
    129c:	18d3      	adds	r3, r2, r3
    129e:	7dd8      	ldrb	r0, [r3, #23]
    12a0:	4c49      	ldr	r4, [pc, #292]	; (13c8 <groundState+0x2cc>)
    12a2:	47a0      	blx	r4
				xCharPos = 0;
    12a4:	2300      	movs	r3, #0
    12a6:	802b      	strh	r3, [r5, #0]
				drawChar(0x00);
    12a8:	2000      	movs	r0, #0
    12aa:	47a0      	blx	r4
				blinkCursor();
    12ac:	4b47      	ldr	r3, [pc, #284]	; (13cc <groundState+0x2d0>)
    12ae:	4798      	blx	r3
    12b0:	e76a      	b.n	1188 <groundState+0x8c>
		if(yCharPos == 23)
    12b2:	4b44      	ldr	r3, [pc, #272]	; (13c4 <groundState+0x2c8>)
    12b4:	881a      	ldrh	r2, [r3, #0]
    12b6:	2a17      	cmp	r2, #23
    12b8:	d033      	beq.n	1322 <groundState+0x226>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    12ba:	4c40      	ldr	r4, [pc, #256]	; (13bc <groundState+0x2c0>)
    12bc:	4d40      	ldr	r5, [pc, #256]	; (13c0 <groundState+0x2c4>)
    12be:	8829      	ldrh	r1, [r5, #0]
    12c0:	004b      	lsls	r3, r1, #1
    12c2:	185b      	adds	r3, r3, r1
    12c4:	00db      	lsls	r3, r3, #3
    12c6:	18e3      	adds	r3, r4, r3
    12c8:	5c98      	ldrb	r0, [r3, r2]
    12ca:	4e3f      	ldr	r6, [pc, #252]	; (13c8 <groundState+0x2cc>)
    12cc:	47b0      	blx	r6
			yCharPos++;
    12ce:	4a3d      	ldr	r2, [pc, #244]	; (13c4 <groundState+0x2c8>)
    12d0:	8813      	ldrh	r3, [r2, #0]
    12d2:	3301      	adds	r3, #1
    12d4:	b29b      	uxth	r3, r3
    12d6:	8013      	strh	r3, [r2, #0]
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    12d8:	8829      	ldrh	r1, [r5, #0]
    12da:	004a      	lsls	r2, r1, #1
    12dc:	1852      	adds	r2, r2, r1
    12de:	00d2      	lsls	r2, r2, #3
    12e0:	18a4      	adds	r4, r4, r2
    12e2:	5ce0      	ldrb	r0, [r4, r3]
    12e4:	47b0      	blx	r6
			blinkCursor();
    12e6:	4b39      	ldr	r3, [pc, #228]	; (13cc <groundState+0x2d0>)
    12e8:	4798      	blx	r3
		if(lineFeed)
    12ea:	4b3a      	ldr	r3, [pc, #232]	; (13d4 <groundState+0x2d8>)
    12ec:	781b      	ldrb	r3, [r3, #0]
    12ee:	2b00      	cmp	r3, #0
    12f0:	d100      	bne.n	12f4 <groundState+0x1f8>
    12f2:	e749      	b.n	1188 <groundState+0x8c>
			if(yCharPos == 23)
    12f4:	4b33      	ldr	r3, [pc, #204]	; (13c4 <groundState+0x2c8>)
    12f6:	881a      	ldrh	r2, [r3, #0]
    12f8:	2a17      	cmp	r2, #23
    12fa:	d021      	beq.n	1340 <groundState+0x244>
				drawChar(consoleDisplay[xCharPos][yCharPos]);
    12fc:	4d2f      	ldr	r5, [pc, #188]	; (13bc <groundState+0x2c0>)
    12fe:	4e30      	ldr	r6, [pc, #192]	; (13c0 <groundState+0x2c4>)
    1300:	8831      	ldrh	r1, [r6, #0]
    1302:	004b      	lsls	r3, r1, #1
    1304:	185b      	adds	r3, r3, r1
    1306:	00db      	lsls	r3, r3, #3
    1308:	18eb      	adds	r3, r5, r3
    130a:	5c98      	ldrb	r0, [r3, r2]
    130c:	4c2e      	ldr	r4, [pc, #184]	; (13c8 <groundState+0x2cc>)
    130e:	47a0      	blx	r4
				xCharPos = 0;
    1310:	2300      	movs	r3, #0
    1312:	8033      	strh	r3, [r6, #0]
				drawChar(consoleDisplay[xCharPos][yCharPos]);
    1314:	4b2b      	ldr	r3, [pc, #172]	; (13c4 <groundState+0x2c8>)
    1316:	881b      	ldrh	r3, [r3, #0]
    1318:	5ce8      	ldrb	r0, [r5, r3]
    131a:	47a0      	blx	r4
				blinkCursor();
    131c:	4b2b      	ldr	r3, [pc, #172]	; (13cc <groundState+0x2d0>)
    131e:	4798      	blx	r3
    1320:	e732      	b.n	1188 <groundState+0x8c>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    1322:	4b27      	ldr	r3, [pc, #156]	; (13c0 <groundState+0x2c4>)
    1324:	881a      	ldrh	r2, [r3, #0]
    1326:	0053      	lsls	r3, r2, #1
    1328:	189b      	adds	r3, r3, r2
    132a:	00db      	lsls	r3, r3, #3
    132c:	4a23      	ldr	r2, [pc, #140]	; (13bc <groundState+0x2c0>)
    132e:	18d3      	adds	r3, r2, r3
    1330:	7dd8      	ldrb	r0, [r3, #23]
    1332:	4b25      	ldr	r3, [pc, #148]	; (13c8 <groundState+0x2cc>)
    1334:	4798      	blx	r3
			newLine();
    1336:	4b28      	ldr	r3, [pc, #160]	; (13d8 <groundState+0x2dc>)
    1338:	4798      	blx	r3
			blinkCursor();
    133a:	4b24      	ldr	r3, [pc, #144]	; (13cc <groundState+0x2d0>)
    133c:	4798      	blx	r3
    133e:	e7d4      	b.n	12ea <groundState+0x1ee>
				drawChar(consoleDisplay[xCharPos][yCharPos]);
    1340:	4d1f      	ldr	r5, [pc, #124]	; (13c0 <groundState+0x2c4>)
    1342:	882a      	ldrh	r2, [r5, #0]
    1344:	0053      	lsls	r3, r2, #1
    1346:	189b      	adds	r3, r3, r2
    1348:	00db      	lsls	r3, r3, #3
    134a:	4a1c      	ldr	r2, [pc, #112]	; (13bc <groundState+0x2c0>)
    134c:	18d3      	adds	r3, r2, r3
    134e:	7dd8      	ldrb	r0, [r3, #23]
    1350:	4c1d      	ldr	r4, [pc, #116]	; (13c8 <groundState+0x2cc>)
    1352:	47a0      	blx	r4
				xCharPos = 0;
    1354:	2300      	movs	r3, #0
    1356:	802b      	strh	r3, [r5, #0]
				drawChar(0x00);
    1358:	2000      	movs	r0, #0
    135a:	47a0      	blx	r4
				blinkCursor();
    135c:	4b1b      	ldr	r3, [pc, #108]	; (13cc <groundState+0x2d0>)
    135e:	4798      	blx	r3
    1360:	e712      	b.n	1188 <groundState+0x8c>
		if(yCharPos == 23)
    1362:	4b18      	ldr	r3, [pc, #96]	; (13c4 <groundState+0x2c8>)
    1364:	881a      	ldrh	r2, [r3, #0]
    1366:	2a17      	cmp	r2, #23
    1368:	d012      	beq.n	1390 <groundState+0x294>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    136a:	4d14      	ldr	r5, [pc, #80]	; (13bc <groundState+0x2c0>)
    136c:	4e14      	ldr	r6, [pc, #80]	; (13c0 <groundState+0x2c4>)
    136e:	8831      	ldrh	r1, [r6, #0]
    1370:	004b      	lsls	r3, r1, #1
    1372:	185b      	adds	r3, r3, r1
    1374:	00db      	lsls	r3, r3, #3
    1376:	18eb      	adds	r3, r5, r3
    1378:	5c98      	ldrb	r0, [r3, r2]
    137a:	4c13      	ldr	r4, [pc, #76]	; (13c8 <groundState+0x2cc>)
    137c:	47a0      	blx	r4
			xCharPos = 0;
    137e:	2300      	movs	r3, #0
    1380:	8033      	strh	r3, [r6, #0]
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    1382:	4b10      	ldr	r3, [pc, #64]	; (13c4 <groundState+0x2c8>)
    1384:	881b      	ldrh	r3, [r3, #0]
    1386:	5ce8      	ldrb	r0, [r5, r3]
    1388:	47a0      	blx	r4
			blinkCursor();
    138a:	4b10      	ldr	r3, [pc, #64]	; (13cc <groundState+0x2d0>)
    138c:	4798      	blx	r3
    138e:	e6fb      	b.n	1188 <groundState+0x8c>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    1390:	4c0b      	ldr	r4, [pc, #44]	; (13c0 <groundState+0x2c4>)
    1392:	8822      	ldrh	r2, [r4, #0]
    1394:	0053      	lsls	r3, r2, #1
    1396:	189b      	adds	r3, r3, r2
    1398:	00db      	lsls	r3, r3, #3
    139a:	4a08      	ldr	r2, [pc, #32]	; (13bc <groundState+0x2c0>)
    139c:	18d3      	adds	r3, r2, r3
    139e:	7dd8      	ldrb	r0, [r3, #23]
    13a0:	4b09      	ldr	r3, [pc, #36]	; (13c8 <groundState+0x2cc>)
    13a2:	4798      	blx	r3
			xCharPos = 0;
    13a4:	2300      	movs	r3, #0
    13a6:	8023      	strh	r3, [r4, #0]
			blinkCursor();
    13a8:	4b08      	ldr	r3, [pc, #32]	; (13cc <groundState+0x2d0>)
    13aa:	4798      	blx	r3
    13ac:	e6ec      	b.n	1188 <groundState+0x8c>
		currentState = stateESC;
    13ae:	2201      	movs	r2, #1
    13b0:	4b0a      	ldr	r3, [pc, #40]	; (13dc <groundState+0x2e0>)
    13b2:	701a      	strb	r2, [r3, #0]
    13b4:	e6e8      	b.n	1188 <groundState+0x8c>
    13b6:	46c0      	nop			; (mov r8, r8)
    13b8:	000002b1 	.word	0x000002b1
    13bc:	200003c0 	.word	0x200003c0
    13c0:	200002b8 	.word	0x200002b8
    13c4:	200002ba 	.word	0x200002ba
    13c8:	0000312d 	.word	0x0000312d
    13cc:	00003215 	.word	0x00003215
    13d0:	000010d5 	.word	0x000010d5
    13d4:	2000016c 	.word	0x2000016c
    13d8:	00003371 	.word	0x00003371
    13dc:	200002bd 	.word	0x200002bd

000013e0 <parseChar>:
{
    13e0:	b510      	push	{r4, lr}
	parserState state = currentState;
    13e2:	4b0e      	ldr	r3, [pc, #56]	; (141c <parseChar+0x3c>)
	switch(state)
    13e4:	781a      	ldrb	r2, [r3, #0]
    13e6:	2a05      	cmp	r2, #5
    13e8:	d805      	bhi.n	13f6 <parseChar+0x16>
    13ea:	0093      	lsls	r3, r2, #2
    13ec:	4a0c      	ldr	r2, [pc, #48]	; (1420 <parseChar+0x40>)
    13ee:	58d3      	ldr	r3, [r2, r3]
    13f0:	469f      	mov	pc, r3
			groundState(character);
    13f2:	4b0c      	ldr	r3, [pc, #48]	; (1424 <parseChar+0x44>)
    13f4:	4798      	blx	r3
}
    13f6:	bd10      	pop	{r4, pc}
			escState(character);
    13f8:	4b0b      	ldr	r3, [pc, #44]	; (1428 <parseChar+0x48>)
    13fa:	4798      	blx	r3
		break;
    13fc:	e7fb      	b.n	13f6 <parseChar+0x16>
	stateEnterBuffer = 0x00;
    13fe:	2300      	movs	r3, #0
    1400:	4a0a      	ldr	r2, [pc, #40]	; (142c <parseChar+0x4c>)
    1402:	7013      	strb	r3, [r2, #0]
	currentState = stateGround;
    1404:	4a05      	ldr	r2, [pc, #20]	; (141c <parseChar+0x3c>)
    1406:	7013      	strb	r3, [r2, #0]
    1408:	e7f5      	b.n	13f6 <parseChar+0x16>
			CSIentryState(character);
    140a:	4b09      	ldr	r3, [pc, #36]	; (1430 <parseChar+0x50>)
    140c:	4798      	blx	r3
		break;
    140e:	e7f2      	b.n	13f6 <parseChar+0x16>
			CSIparamState(character);
    1410:	4b08      	ldr	r3, [pc, #32]	; (1434 <parseChar+0x54>)
    1412:	4798      	blx	r3
		break;
    1414:	e7ef      	b.n	13f6 <parseChar+0x16>
			CSIignoreState(character);
    1416:	4b08      	ldr	r3, [pc, #32]	; (1438 <parseChar+0x58>)
    1418:	4798      	blx	r3
}
    141a:	e7ec      	b.n	13f6 <parseChar+0x16>
    141c:	200002bd 	.word	0x200002bd
    1420:	000059a4 	.word	0x000059a4
    1424:	000010fd 	.word	0x000010fd
    1428:	00000569 	.word	0x00000569
    142c:	20000342 	.word	0x20000342
    1430:	00000f01 	.word	0x00000f01
    1434:	00000ea1 	.word	0x00000ea1
    1438:	0000034d 	.word	0x0000034d

0000143c <drawKare>:
//	graphic in the entire project. Please note this is the most
//	space efficient way to do this; a 40x31 bitmap is 930 bytes,
//	whereas	this is (104*2)+28+20, or 256 bytes.
/*********************************************************************/
void drawKare(int emotion)
{
    143c:	b5f0      	push	{r4, r5, r6, r7, lr}
    143e:	b0c1      	sub	sp, #260	; 0x104
    1440:	0007      	movs	r7, r0
	uint16_t body[104] = {10,10,20,20,20,0,380,10,380,10,390,20,0,
    1442:	22d0      	movs	r2, #208	; 0xd0
    1444:	492d      	ldr	r1, [pc, #180]	; (14fc <drawKare+0xc0>)
    1446:	a80c      	add	r0, sp, #48	; 0x30
    1448:	4b2d      	ldr	r3, [pc, #180]	; (1500 <drawKare+0xc4>)
    144a:	4798      	blx	r3
		80,190,280,200,280,40,290,190,0,70,50,80,0,90,50,100,0,110,
		50,120,0,130,50,140,0,150,50,160,0,170,50,180,0,190,50,200,
		300,200,370,210,30,220,370,230,30,240,370,250,30,260,370,
		270,90,280,300,290};
	
	uint8_t happyTerm[28] = {180,80,190,130,170,130,190,140,140,
    144c:	a805      	add	r0, sp, #20
    144e:	4b2d      	ldr	r3, [pc, #180]	; (1504 <drawKare+0xc8>)
    1450:	001a      	movs	r2, r3
    1452:	3250      	adds	r2, #80	; 0x50
    1454:	0001      	movs	r1, r0
    1456:	ca31      	ldmia	r2!, {r0, r4, r5}
    1458:	c131      	stmia	r1!, {r0, r4, r5}
    145a:	ca31      	ldmia	r2!, {r0, r4, r5}
    145c:	c131      	stmia	r1!, {r0, r4, r5}
    145e:	6812      	ldr	r2, [r2, #0]
    1460:	600a      	str	r2, [r1, #0]
		60,150,100,210,60,220,100,130,150,140,160,140,160,220,170,
	220,150,230,160};
	
	uint8_t rPiBeret[20] = {120,60,240,80,110,70,120,90,150,
    1462:	336c      	adds	r3, #108	; 0x6c
    1464:	466a      	mov	r2, sp
    1466:	cb13      	ldmia	r3!, {r0, r1, r4}
    1468:	c213      	stmia	r2!, {r0, r1, r4}
    146a:	cb03      	ldmia	r3!, {r0, r1}
    146c:	c203      	stmia	r2!, {r0, r1}
    146e:	ac0c      	add	r4, sp, #48	; 0x30
    1470:	ae40      	add	r6, sp, #256	; 0x100

	
	
	for(int i = 0; i < 104; i = i+4)
	{
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
    1472:	4d25      	ldr	r5, [pc, #148]	; (1508 <drawKare+0xcc>)
		((body[i+1]/iSv)+(offsetGraphicY)),
		((body[i+2]/iSv)+(offsetGraphicX)),
		((body[i+3]/iSv)+(offsetGraphicY)));
    1474:	88e3      	ldrh	r3, [r4, #6]
    1476:	105b      	asrs	r3, r3, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
    1478:	3396      	adds	r3, #150	; 0x96
		((body[i+2]/iSv)+(offsetGraphicX)),
    147a:	88a2      	ldrh	r2, [r4, #4]
    147c:	1052      	asrs	r2, r2, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
    147e:	322d      	adds	r2, #45	; 0x2d
    1480:	32ff      	adds	r2, #255	; 0xff
		((body[i+1]/iSv)+(offsetGraphicY)),
    1482:	8861      	ldrh	r1, [r4, #2]
    1484:	1049      	asrs	r1, r1, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
    1486:	3196      	adds	r1, #150	; 0x96
    1488:	8820      	ldrh	r0, [r4, #0]
    148a:	1040      	asrs	r0, r0, #1
    148c:	302d      	adds	r0, #45	; 0x2d
    148e:	30ff      	adds	r0, #255	; 0xff
    1490:	47a8      	blx	r5
    1492:	3408      	adds	r4, #8
	for(int i = 0; i < 104; i = i+4)
    1494:	42b4      	cmp	r4, r6
    1496:	d1ed      	bne.n	1474 <drawKare+0x38>
	}
	switch(emotion)
    1498:	2f00      	cmp	r7, #0
    149a:	d003      	beq.n	14a4 <drawKare+0x68>
    149c:	2f01      	cmp	r7, #1
    149e:	d017      	beq.n	14d0 <drawKare+0x94>
		break;
		case 2:
		//make a sad terminal thing go here
		break;
	}
}
    14a0:	b041      	add	sp, #260	; 0x104
    14a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    14a4:	ac05      	add	r4, sp, #20
    14a6:	ae0c      	add	r6, sp, #48	; 0x30
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
    14a8:	4d17      	ldr	r5, [pc, #92]	; (1508 <drawKare+0xcc>)
			((happyTerm[i+3]/iSv)+(offsetGraphicY)));
    14aa:	78e3      	ldrb	r3, [r4, #3]
    14ac:	105b      	asrs	r3, r3, #1
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
    14ae:	3396      	adds	r3, #150	; 0x96
			((happyTerm[i+2]/iSv)+(offsetGraphicX)),
    14b0:	78a2      	ldrb	r2, [r4, #2]
    14b2:	1052      	asrs	r2, r2, #1
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
    14b4:	322d      	adds	r2, #45	; 0x2d
    14b6:	32ff      	adds	r2, #255	; 0xff
			((happyTerm[i+1]/iSv)+(offsetGraphicY)),
    14b8:	7861      	ldrb	r1, [r4, #1]
    14ba:	1049      	asrs	r1, r1, #1
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
    14bc:	3196      	adds	r1, #150	; 0x96
    14be:	7820      	ldrb	r0, [r4, #0]
    14c0:	1040      	asrs	r0, r0, #1
    14c2:	302d      	adds	r0, #45	; 0x2d
    14c4:	30ff      	adds	r0, #255	; 0xff
    14c6:	47a8      	blx	r5
    14c8:	3404      	adds	r4, #4
		for(int i = 0; i < 28; i = i+4)
    14ca:	42a6      	cmp	r6, r4
    14cc:	d1ed      	bne.n	14aa <drawKare+0x6e>
    14ce:	e7e7      	b.n	14a0 <drawKare+0x64>
    14d0:	466c      	mov	r4, sp
    14d2:	ae05      	add	r6, sp, #20
			fillRect((
    14d4:	4d0c      	ldr	r5, [pc, #48]	; (1508 <drawKare+0xcc>)
			((rPiBeret[i+3]/iSv)+(offsetGraphicY)));
    14d6:	78e3      	ldrb	r3, [r4, #3]
    14d8:	105b      	asrs	r3, r3, #1
			fillRect((
    14da:	3396      	adds	r3, #150	; 0x96
			((rPiBeret[i+2]/iSv)+(offsetGraphicX)),
    14dc:	78a2      	ldrb	r2, [r4, #2]
    14de:	1052      	asrs	r2, r2, #1
			fillRect((
    14e0:	322d      	adds	r2, #45	; 0x2d
    14e2:	32ff      	adds	r2, #255	; 0xff
			((rPiBeret[i+1]/iSv)+(offsetGraphicY)),
    14e4:	7861      	ldrb	r1, [r4, #1]
    14e6:	1049      	asrs	r1, r1, #1
			fillRect((
    14e8:	3196      	adds	r1, #150	; 0x96
			(rPiBeret[i]/iSv)+(offsetGraphicX)),
    14ea:	7820      	ldrb	r0, [r4, #0]
    14ec:	1040      	asrs	r0, r0, #1
			fillRect((
    14ee:	302d      	adds	r0, #45	; 0x2d
    14f0:	30ff      	adds	r0, #255	; 0xff
    14f2:	47a8      	blx	r5
    14f4:	3404      	adds	r4, #4
		for(int i = 0; i < 20; i = i+4)
    14f6:	42b4      	cmp	r4, r6
    14f8:	d1ed      	bne.n	14d6 <drawKare+0x9a>
    14fa:	e7d1      	b.n	14a0 <drawKare+0x64>
    14fc:	00005b38 	.word	0x00005b38
    1500:	000047ad 	.word	0x000047ad
    1504:	00005bb8 	.word	0x00005bb8
    1508:	00003bc9 	.word	0x00003bc9

0000150c <splashScreen>:

void splashScreen(void)
{
    150c:	b570      	push	{r4, r5, r6, lr}
	static const char *splashText[32];
	splashText[0]  = "Trans rights are human rights";//
    150e:	4c49      	ldr	r4, [pc, #292]	; (1634 <splashScreen+0x128>)
    1510:	4b49      	ldr	r3, [pc, #292]	; (1638 <splashScreen+0x12c>)
    1512:	6023      	str	r3, [r4, #0]
	splashText[1]  = "13^5 + 16^5 = 17^5";//
    1514:	4b49      	ldr	r3, [pc, #292]	; (163c <splashScreen+0x130>)
    1516:	6063      	str	r3, [r4, #4]
	splashText[2]  = "Reticulating Splines";//
    1518:	4b49      	ldr	r3, [pc, #292]	; (1640 <splashScreen+0x134>)
    151a:	60a3      	str	r3, [r4, #8]
	splashText[3]  = "violence.works";//
    151c:	4b49      	ldr	r3, [pc, #292]	; (1644 <splashScreen+0x138>)
    151e:	60e3      	str	r3, [r4, #12]
	splashText[4]  = "Si + PB";//
    1520:	4b49      	ldr	r3, [pc, #292]	; (1648 <splashScreen+0x13c>)
    1522:	6123      	str	r3, [r4, #16]
	splashText[5]  = "Kill Billionaires (and Trillionaire)";//
    1524:	4b49      	ldr	r3, [pc, #292]	; (164c <splashScreen+0x140>)
    1526:	6163      	str	r3, [r4, #20]
	splashText[6]  = "Interest in technology is not a personality";//
    1528:	4b49      	ldr	r3, [pc, #292]	; (1650 <splashScreen+0x144>)
    152a:	61a3      	str	r3, [r4, #24]
	splashText[7]  = "10 PRINT CHR$(205.5+RND(1)); : GOTO 10";//
    152c:	4b49      	ldr	r3, [pc, #292]	; (1654 <splashScreen+0x148>)
    152e:	61e3      	str	r3, [r4, #28]
	splashText[8]  = "No gods. No masters. No external libraries.";//
    1530:	4b49      	ldr	r3, [pc, #292]	; (1658 <splashScreen+0x14c>)
    1532:	6223      	str	r3, [r4, #32]
	splashText[9]  = "Kill Nazis";//
    1534:	4b49      	ldr	r3, [pc, #292]	; (165c <splashScreen+0x150>)
    1536:	6263      	str	r3, [r4, #36]	; 0x24
	splashText[10] = "Tiananmen Square 1989";//
    1538:	4b49      	ldr	r3, [pc, #292]	; (1660 <splashScreen+0x154>)
    153a:	62a3      	str	r3, [r4, #40]	; 0x28
	splashText[11] = "America was founded on slavery";
    153c:	4b49      	ldr	r3, [pc, #292]	; (1664 <splashScreen+0x158>)
    153e:	62e3      	str	r3, [r4, #44]	; 0x2c
	splashText[12] = "There is only capital and labor";//
    1540:	4b49      	ldr	r3, [pc, #292]	; (1668 <splashScreen+0x15c>)
    1542:	6323      	str	r3, [r4, #48]	; 0x30
	splashText[13] = "Encourage SYMMETRIC class warfare";//
    1544:	4b49      	ldr	r3, [pc, #292]	; (166c <splashScreen+0x160>)
    1546:	6363      	str	r3, [r4, #52]	; 0x34
	splashText[14] = "$CURRENT_MEME";//
    1548:	4b49      	ldr	r3, [pc, #292]	; (1670 <splashScreen+0x164>)
    154a:	63a3      	str	r3, [r4, #56]	; 0x38
	splashText[15] = "A Nice TTY";//
    154c:	4b49      	ldr	r3, [pc, #292]	; (1674 <splashScreen+0x168>)
    154e:	63e3      	str	r3, [r4, #60]	; 0x3c
	splashText[16] = "Unix epoch minus 0xFF days";//
    1550:	4b49      	ldr	r3, [pc, #292]	; (1678 <splashScreen+0x16c>)
    1552:	6423      	str	r3, [r4, #64]	; 0x40
	splashText[17] = "i  = 0x5f3759df - ( i >> 1 );";//
    1554:	4b49      	ldr	r3, [pc, #292]	; (167c <splashScreen+0x170>)
    1556:	6463      	str	r3, [r4, #68]	; 0x44
	splashText[18] = "Speak truth to power; I'm sure they'll listen this time.";//
    1558:	4b49      	ldr	r3, [pc, #292]	; (1680 <splashScreen+0x174>)
    155a:	64a3      	str	r3, [r4, #72]	; 0x48
	splashText[19] = "Defcon's canceled (2020)";//
    155c:	4b49      	ldr	r3, [pc, #292]	; (1684 <splashScreen+0x178>)
    155e:	64e3      	str	r3, [r4, #76]	; 0x4c
	splashText[20] = "Ratsnest: Nothing To Do!";//
    1560:	4b49      	ldr	r3, [pc, #292]	; (1688 <splashScreen+0x17c>)
    1562:	6523      	str	r3, [r4, #80]	; 0x50
	splashText[21] = "It has 69 keys.";//
    1564:	4b49      	ldr	r3, [pc, #292]	; (168c <splashScreen+0x180>)
    1566:	6563      	str	r3, [r4, #84]	; 0x54
	splashText[22] = "Because VT-420 was already taken";//
    1568:	4b49      	ldr	r3, [pc, #292]	; (1690 <splashScreen+0x184>)
    156a:	65a3      	str	r3, [r4, #88]	; 0x58
	splashText[23] = "Compression algorithm based on BBP (1997)";//
    156c:	4b49      	ldr	r3, [pc, #292]	; (1694 <splashScreen+0x188>)
    156e:	65e3      	str	r3, [r4, #92]	; 0x5c
	splashText[24] = "Teach health insurance providers to code.";
    1570:	4b49      	ldr	r3, [pc, #292]	; (1698 <splashScreen+0x18c>)
    1572:	6623      	str	r3, [r4, #96]	; 0x60
	splashText[25] = "Grand Central Hack The Planet";//
    1574:	4b49      	ldr	r3, [pc, #292]	; (169c <splashScreen+0x190>)
    1576:	6663      	str	r3, [r4, #100]	; 0x64
	splashText[26] = "WiFi is not wireless Ethernet!";//
    1578:	4b49      	ldr	r3, [pc, #292]	; (16a0 <splashScreen+0x194>)
    157a:	66a3      	str	r3, [r4, #104]	; 0x68
	splashText[27] = "Dummy thicc client";//
    157c:	4b49      	ldr	r3, [pc, #292]	; (16a4 <splashScreen+0x198>)
    157e:	66e3      	str	r3, [r4, #108]	; 0x6c
	splashText[28] = "A Nice TTY. An OK Computer.";//
    1580:	4b49      	ldr	r3, [pc, #292]	; (16a8 <splashScreen+0x19c>)
    1582:	6723      	str	r3, [r4, #112]	; 0x70
	splashText[29] = "USTeledildonics";//
    1584:	4b49      	ldr	r3, [pc, #292]	; (16ac <splashScreen+0x1a0>)
    1586:	6763      	str	r3, [r4, #116]	; 0x74
	splashText[30] = "Solidarity is not a new framework";//
    1588:	4b49      	ldr	r3, [pc, #292]	; (16b0 <splashScreen+0x1a4>)
    158a:	67a3      	str	r3, [r4, #120]	; 0x78
	splashText[31] = "Breadboarding Is Not A Crime";//
    158c:	4b49      	ldr	r3, [pc, #292]	; (16b4 <splashScreen+0x1a8>)
    158e:	67e3      	str	r3, [r4, #124]	; 0x7c
	splashText[32] = "Off by one errors are common";
    1590:	4a49      	ldr	r2, [pc, #292]	; (16b8 <splashScreen+0x1ac>)
    1592:	2380      	movs	r3, #128	; 0x80
    1594:	50e2      	str	r2, [r4, r3]
	
	const char *textPhrase = splashText[(((rand())%32))];
    1596:	4b49      	ldr	r3, [pc, #292]	; (16bc <splashScreen+0x1b0>)
    1598:	4798      	blx	r3
    159a:	17c3      	asrs	r3, r0, #31
    159c:	0edb      	lsrs	r3, r3, #27
    159e:	18c2      	adds	r2, r0, r3
    15a0:	201f      	movs	r0, #31
    15a2:	4010      	ands	r0, r2
    15a4:	1ac0      	subs	r0, r0, r3
    15a6:	0080      	lsls	r0, r0, #2
    15a8:	5904      	ldr	r4, [r0, r4]
	
	clearScreen();
    15aa:	4b45      	ldr	r3, [pc, #276]	; (16c0 <splashScreen+0x1b4>)
    15ac:	4798      	blx	r3
	setColorRGB(255,255,255);
    15ae:	22ff      	movs	r2, #255	; 0xff
    15b0:	21ff      	movs	r1, #255	; 0xff
    15b2:	20ff      	movs	r0, #255	; 0xff
    15b4:	4b43      	ldr	r3, [pc, #268]	; (16c4 <splashScreen+0x1b8>)
    15b6:	4798      	blx	r3
	
	REG_PORT_DIRTGL1 = PORT_PB31;
    15b8:	2280      	movs	r2, #128	; 0x80
    15ba:	0612      	lsls	r2, r2, #24
    15bc:	4b42      	ldr	r3, [pc, #264]	; (16c8 <splashScreen+0x1bc>)
    15be:	601a      	str	r2, [r3, #0]
	PORT->Group[1].PINCFG[31].bit.PULLEN = 1;
    15c0:	4b42      	ldr	r3, [pc, #264]	; (16cc <splashScreen+0x1c0>)
    15c2:	22df      	movs	r2, #223	; 0xdf
    15c4:	5c99      	ldrb	r1, [r3, r2]
    15c6:	2004      	movs	r0, #4
    15c8:	4301      	orrs	r1, r0
    15ca:	5499      	strb	r1, [r3, r2]
	PORT->Group[1].PINCFG[31].bit.INEN = 1;
    15cc:	5c99      	ldrb	r1, [r3, r2]
    15ce:	2002      	movs	r0, #2
    15d0:	4301      	orrs	r1, r0
    15d2:	5499      	strb	r1, [r3, r2]
	if((PORT->Group[1].IN.reg & PORT_PB31) != 0)
    15d4:	3a3f      	subs	r2, #63	; 0x3f
    15d6:	589b      	ldr	r3, [r3, r2]
    15d8:	2b00      	cmp	r3, #0
    15da:	db26      	blt.n	162a <splashScreen+0x11e>
		//This is the 'pi' graphic; put some codes
		//here to handle setting up the uarts.
		drawKare(1);
	}
	else
	drawKare(0); //The normal graphic
    15dc:	2000      	movs	r0, #0
    15de:	4b3c      	ldr	r3, [pc, #240]	; (16d0 <splashScreen+0x1c4>)
    15e0:	4798      	blx	r3
	

	
	xCharPos = 40 - (strlen(textPhrase)/2);
    15e2:	0020      	movs	r0, r4
    15e4:	4b3b      	ldr	r3, [pc, #236]	; (16d4 <splashScreen+0x1c8>)
    15e6:	4798      	blx	r3
    15e8:	4e3b      	ldr	r6, [pc, #236]	; (16d8 <splashScreen+0x1cc>)
    15ea:	0840      	lsrs	r0, r0, #1
    15ec:	2328      	movs	r3, #40	; 0x28
    15ee:	1a18      	subs	r0, r3, r0
    15f0:	8030      	strh	r0, [r6, #0]
	yCharPos = 16;
    15f2:	4d3a      	ldr	r5, [pc, #232]	; (16dc <splashScreen+0x1d0>)
    15f4:	2310      	movs	r3, #16
    15f6:	802b      	strh	r3, [r5, #0]
	
	writeString(textPhrase);
    15f8:	0020      	movs	r0, r4
    15fa:	4b39      	ldr	r3, [pc, #228]	; (16e0 <splashScreen+0x1d4>)
    15fc:	4798      	blx	r3
	xCharPos = 40 - (strlen(versionLabel)/2);
	yCharPos = 18;
	
	writeString(versionLabel);
	*/
	delay_ms(2000);
    15fe:	20fa      	movs	r0, #250	; 0xfa
    1600:	00c0      	lsls	r0, r0, #3
    1602:	4b38      	ldr	r3, [pc, #224]	; (16e4 <splashScreen+0x1d8>)
    1604:	4798      	blx	r3
		
	clearScreen();
    1606:	4b2e      	ldr	r3, [pc, #184]	; (16c0 <splashScreen+0x1b4>)
    1608:	4798      	blx	r3
	nullifyConsole();
    160a:	4b37      	ldr	r3, [pc, #220]	; (16e8 <splashScreen+0x1dc>)
    160c:	4798      	blx	r3
	
	setColorRGB(0,255,0);
    160e:	2200      	movs	r2, #0
    1610:	21ff      	movs	r1, #255	; 0xff
    1612:	2000      	movs	r0, #0
    1614:	4b2b      	ldr	r3, [pc, #172]	; (16c4 <splashScreen+0x1b8>)
    1616:	4798      	blx	r3
	setBackColorRGB(0,0,0);
    1618:	2200      	movs	r2, #0
    161a:	2100      	movs	r1, #0
    161c:	2000      	movs	r0, #0
    161e:	4b33      	ldr	r3, [pc, #204]	; (16ec <splashScreen+0x1e0>)
    1620:	4798      	blx	r3
	
	//Setting the xChar and yChar position has to come
	//after splashScreen() and InitLCD();
	xCharPos = 0;
    1622:	2300      	movs	r3, #0
    1624:	8033      	strh	r3, [r6, #0]
	yCharPos = 0;
    1626:	802b      	strh	r3, [r5, #0]
	

    1628:	bd70      	pop	{r4, r5, r6, pc}
		drawKare(1);
    162a:	2001      	movs	r0, #1
    162c:	4b28      	ldr	r3, [pc, #160]	; (16d0 <splashScreen+0x1c4>)
    162e:	4798      	blx	r3
    1630:	e7d7      	b.n	15e2 <splashScreen+0xd6>
    1632:	46c0      	nop			; (mov r8, r8)
    1634:	200001f8 	.word	0x200001f8
    1638:	00005c38 	.word	0x00005c38
    163c:	00005c58 	.word	0x00005c58
    1640:	00005c6c 	.word	0x00005c6c
    1644:	00005c84 	.word	0x00005c84
    1648:	00005c94 	.word	0x00005c94
    164c:	00005c9c 	.word	0x00005c9c
    1650:	00005cc4 	.word	0x00005cc4
    1654:	00005cf0 	.word	0x00005cf0
    1658:	00005d18 	.word	0x00005d18
    165c:	00005d44 	.word	0x00005d44
    1660:	00005d50 	.word	0x00005d50
    1664:	00005d68 	.word	0x00005d68
    1668:	00005d88 	.word	0x00005d88
    166c:	00005da8 	.word	0x00005da8
    1670:	00005dcc 	.word	0x00005dcc
    1674:	00005ddc 	.word	0x00005ddc
    1678:	00005de8 	.word	0x00005de8
    167c:	00005e04 	.word	0x00005e04
    1680:	00005e24 	.word	0x00005e24
    1684:	00005e60 	.word	0x00005e60
    1688:	00005e7c 	.word	0x00005e7c
    168c:	00005e98 	.word	0x00005e98
    1690:	00005ea8 	.word	0x00005ea8
    1694:	00005ecc 	.word	0x00005ecc
    1698:	00005ef8 	.word	0x00005ef8
    169c:	00005f24 	.word	0x00005f24
    16a0:	00005f44 	.word	0x00005f44
    16a4:	00005f64 	.word	0x00005f64
    16a8:	00005f78 	.word	0x00005f78
    16ac:	00005f94 	.word	0x00005f94
    16b0:	00005fa4 	.word	0x00005fa4
    16b4:	00005fc8 	.word	0x00005fc8
    16b8:	00005fe8 	.word	0x00005fe8
    16bc:	000049d9 	.word	0x000049d9
    16c0:	00003c99 	.word	0x00003c99
    16c4:	00003a8d 	.word	0x00003a8d
    16c8:	4100448c 	.word	0x4100448c
    16cc:	41004400 	.word	0x41004400
    16d0:	0000143d 	.word	0x0000143d
    16d4:	00004bfb 	.word	0x00004bfb
    16d8:	200002b8 	.word	0x200002b8
    16dc:	200002ba 	.word	0x200002ba
    16e0:	0000342d 	.word	0x0000342d
    16e4:	00001785 	.word	0x00001785
    16e8:	00003475 	.word	0x00003475
    16ec:	00003ab5 	.word	0x00003ab5

000016f0 <parseRXBuffer>:
char tempCharacter;

cbuf_handle_t ouroboros;	

void parseRXBuffer(void)
{
    16f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    16f2:	b083      	sub	sp, #12
		while(!ring_empty(ouroboros))
    16f4:	4e0b      	ldr	r6, [pc, #44]	; (1724 <parseRXBuffer+0x34>)
    16f6:	4d0c      	ldr	r5, [pc, #48]	; (1728 <parseRXBuffer+0x38>)
		{
			uint8_t characterFromRingBuffer;
			ring_get(ouroboros, &characterFromRingBuffer);
    16f8:	0037      	movs	r7, r6
		while(!ring_empty(ouroboros))
    16fa:	e008      	b.n	170e <parseRXBuffer+0x1e>
			ring_get(ouroboros, &characterFromRingBuffer);
    16fc:	466b      	mov	r3, sp
    16fe:	1ddc      	adds	r4, r3, #7
    1700:	0021      	movs	r1, r4
    1702:	6838      	ldr	r0, [r7, #0]
    1704:	4b09      	ldr	r3, [pc, #36]	; (172c <parseRXBuffer+0x3c>)
    1706:	4798      	blx	r3
			parseChar(characterFromRingBuffer);
    1708:	7820      	ldrb	r0, [r4, #0]
    170a:	4b09      	ldr	r3, [pc, #36]	; (1730 <parseRXBuffer+0x40>)
    170c:	4798      	blx	r3
		while(!ring_empty(ouroboros))
    170e:	6830      	ldr	r0, [r6, #0]
    1710:	47a8      	blx	r5
    1712:	2800      	cmp	r0, #0
    1714:	d0f2      	beq.n	16fc <parseRXBuffer+0xc>
		
		}
		ring_reset(ouroboros);
    1716:	4b03      	ldr	r3, [pc, #12]	; (1724 <parseRXBuffer+0x34>)
    1718:	6818      	ldr	r0, [r3, #0]
    171a:	4b06      	ldr	r3, [pc, #24]	; (1734 <parseRXBuffer+0x44>)
    171c:	4798      	blx	r3
}
    171e:	b003      	add	sp, #12
    1720:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1722:	46c0      	nop			; (mov r8, r8)
    1724:	2000035c 	.word	0x2000035c
    1728:	0000017d 	.word	0x0000017d
    172c:	00000195 	.word	0x00000195
    1730:	000013e1 	.word	0x000013e1
    1734:	00000135 	.word	0x00000135

00001738 <sendChar>:

void sendChar(char character)
{
    1738:	b510      	push	{r4, lr}
	printf("%c", character);
    173a:	4b01      	ldr	r3, [pc, #4]	; (1740 <sendChar+0x8>)
    173c:	4798      	blx	r3
    173e:	bd10      	pop	{r4, pc}
    1740:	00004955 	.word	0x00004955

00001744 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    1744:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    1746:	2000      	movs	r0, #0
    1748:	4b08      	ldr	r3, [pc, #32]	; (176c <delay_init+0x28>)
    174a:	4798      	blx	r3
    174c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    174e:	4c08      	ldr	r4, [pc, #32]	; (1770 <delay_init+0x2c>)
    1750:	21fa      	movs	r1, #250	; 0xfa
    1752:	0089      	lsls	r1, r1, #2
    1754:	47a0      	blx	r4
    1756:	4b07      	ldr	r3, [pc, #28]	; (1774 <delay_init+0x30>)
    1758:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    175a:	4907      	ldr	r1, [pc, #28]	; (1778 <delay_init+0x34>)
    175c:	0028      	movs	r0, r5
    175e:	47a0      	blx	r4
    1760:	4b06      	ldr	r3, [pc, #24]	; (177c <delay_init+0x38>)
    1762:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    1764:	2205      	movs	r2, #5
    1766:	4b06      	ldr	r3, [pc, #24]	; (1780 <delay_init+0x3c>)
    1768:	601a      	str	r2, [r3, #0]
}
    176a:	bd70      	pop	{r4, r5, r6, pc}
    176c:	00002d05 	.word	0x00002d05
    1770:	000043d9 	.word	0x000043d9
    1774:	20000014 	.word	0x20000014
    1778:	000f4240 	.word	0x000f4240
    177c:	20000018 	.word	0x20000018
    1780:	e000e010 	.word	0xe000e010

00001784 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    1784:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    1786:	4b08      	ldr	r3, [pc, #32]	; (17a8 <delay_cycles_ms+0x24>)
    1788:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    178a:	4a08      	ldr	r2, [pc, #32]	; (17ac <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    178c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    178e:	2180      	movs	r1, #128	; 0x80
    1790:	0249      	lsls	r1, r1, #9
	while (n--) {
    1792:	3801      	subs	r0, #1
    1794:	d307      	bcc.n	17a6 <delay_cycles_ms+0x22>
	if (n > 0) {
    1796:	2c00      	cmp	r4, #0
    1798:	d0fb      	beq.n	1792 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    179a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    179c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    179e:	6813      	ldr	r3, [r2, #0]
    17a0:	420b      	tst	r3, r1
    17a2:	d0fc      	beq.n	179e <delay_cycles_ms+0x1a>
    17a4:	e7f5      	b.n	1792 <delay_cycles_ms+0xe>
	}
}
    17a6:	bd30      	pop	{r4, r5, pc}
    17a8:	20000014 	.word	0x20000014
    17ac:	e000e010 	.word	0xe000e010

000017b0 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    17b0:	4b0c      	ldr	r3, [pc, #48]	; (17e4 <cpu_irq_enter_critical+0x34>)
    17b2:	681b      	ldr	r3, [r3, #0]
    17b4:	2b00      	cmp	r3, #0
    17b6:	d106      	bne.n	17c6 <cpu_irq_enter_critical+0x16>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    17b8:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    17bc:	2b00      	cmp	r3, #0
    17be:	d007      	beq.n	17d0 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    17c0:	2200      	movs	r2, #0
    17c2:	4b09      	ldr	r3, [pc, #36]	; (17e8 <cpu_irq_enter_critical+0x38>)
    17c4:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    17c6:	4a07      	ldr	r2, [pc, #28]	; (17e4 <cpu_irq_enter_critical+0x34>)
    17c8:	6813      	ldr	r3, [r2, #0]
    17ca:	3301      	adds	r3, #1
    17cc:	6013      	str	r3, [r2, #0]
}
    17ce:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    17d0:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    17d2:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    17d6:	2200      	movs	r2, #0
    17d8:	4b04      	ldr	r3, [pc, #16]	; (17ec <cpu_irq_enter_critical+0x3c>)
    17da:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    17dc:	3201      	adds	r2, #1
    17de:	4b02      	ldr	r3, [pc, #8]	; (17e8 <cpu_irq_enter_critical+0x38>)
    17e0:	701a      	strb	r2, [r3, #0]
    17e2:	e7f0      	b.n	17c6 <cpu_irq_enter_critical+0x16>
    17e4:	20000278 	.word	0x20000278
    17e8:	2000027c 	.word	0x2000027c
    17ec:	2000001c 	.word	0x2000001c

000017f0 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    17f0:	4b08      	ldr	r3, [pc, #32]	; (1814 <cpu_irq_leave_critical+0x24>)
    17f2:	681a      	ldr	r2, [r3, #0]
    17f4:	3a01      	subs	r2, #1
    17f6:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    17f8:	681b      	ldr	r3, [r3, #0]
    17fa:	2b00      	cmp	r3, #0
    17fc:	d109      	bne.n	1812 <cpu_irq_leave_critical+0x22>
    17fe:	4b06      	ldr	r3, [pc, #24]	; (1818 <cpu_irq_leave_critical+0x28>)
    1800:	781b      	ldrb	r3, [r3, #0]
    1802:	2b00      	cmp	r3, #0
    1804:	d005      	beq.n	1812 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    1806:	2201      	movs	r2, #1
    1808:	4b04      	ldr	r3, [pc, #16]	; (181c <cpu_irq_leave_critical+0x2c>)
    180a:	701a      	strb	r2, [r3, #0]
    180c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1810:	b662      	cpsie	i
	}
}
    1812:	4770      	bx	lr
    1814:	20000278 	.word	0x20000278
    1818:	2000027c 	.word	0x2000027c
    181c:	2000001c 	.word	0x2000001c

00001820 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    1820:	b5f0      	push	{r4, r5, r6, r7, lr}
    1822:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    1824:	ac01      	add	r4, sp, #4
    1826:	2501      	movs	r5, #1
    1828:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    182a:	2700      	movs	r7, #0
    182c:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    182e:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    1830:	0021      	movs	r1, r4
    1832:	203e      	movs	r0, #62	; 0x3e
    1834:	4e06      	ldr	r6, [pc, #24]	; (1850 <system_board_init+0x30>)
    1836:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1838:	2280      	movs	r2, #128	; 0x80
    183a:	05d2      	lsls	r2, r2, #23
    183c:	4b05      	ldr	r3, [pc, #20]	; (1854 <system_board_init+0x34>)
    183e:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    1840:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    1842:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    1844:	0021      	movs	r1, r4
    1846:	200f      	movs	r0, #15
    1848:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
    184a:	b003      	add	sp, #12
    184c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    184e:	46c0      	nop			; (mov r8, r8)
    1850:	00001d89 	.word	0x00001d89
    1854:	41004480 	.word	0x41004480

00001858 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
    1858:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
    185a:	2200      	movs	r2, #0
    185c:	2300      	movs	r3, #0
    185e:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
    1860:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
    1862:	2100      	movs	r1, #0
    1864:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
    1866:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
    1868:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
    186a:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
    186c:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
    186e:	6082      	str	r2, [r0, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	//config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
    1870:	24c0      	movs	r4, #192	; 0xc0
    1872:	0164      	lsls	r4, r4, #5
    1874:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
    1876:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
    1878:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
    187a:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
    187c:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
    187e:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
    1880:	242a      	movs	r4, #42	; 0x2a
    1882:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
    1884:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
    1886:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
    1888:	3c06      	subs	r4, #6
    188a:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
    188c:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
    188e:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
    1890:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
    1892:	232b      	movs	r3, #43	; 0x2b
    1894:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
    1896:	3301      	adds	r3, #1
    1898:	54c1      	strb	r1, [r0, r3]
}
    189a:	bd10      	pop	{r4, pc}

0000189c <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
    189c:	b5f0      	push	{r4, r5, r6, r7, lr}
    189e:	46d6      	mov	lr, sl
    18a0:	464f      	mov	r7, r9
    18a2:	4646      	mov	r6, r8
    18a4:	b5c0      	push	{r6, r7, lr}
    18a6:	b096      	sub	sp, #88	; 0x58
    18a8:	0007      	movs	r7, r0
    18aa:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    18ac:	6001      	str	r1, [r0, #0]
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    18ae:	4ac6      	ldr	r2, [pc, #792]	; (1bc8 <adc_init+0x32c>)
    18b0:	6a10      	ldr	r0, [r2, #32]
    18b2:	2380      	movs	r3, #128	; 0x80
    18b4:	025b      	lsls	r3, r3, #9
    18b6:	4303      	orrs	r3, r0
    18b8:	6213      	str	r3, [r2, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    18ba:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    18bc:	2005      	movs	r0, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    18be:	07db      	lsls	r3, r3, #31
    18c0:	d505      	bpl.n	18ce <adc_init+0x32>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
    18c2:	b016      	add	sp, #88	; 0x58
    18c4:	bc1c      	pop	{r2, r3, r4}
    18c6:	4690      	mov	r8, r2
    18c8:	4699      	mov	r9, r3
    18ca:	46a2      	mov	sl, r4
    18cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    18ce:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
    18d0:	3017      	adds	r0, #23
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    18d2:	079b      	lsls	r3, r3, #30
    18d4:	d4f5      	bmi.n	18c2 <adc_init+0x26>
	module_inst->reference = config->reference;
    18d6:	7873      	ldrb	r3, [r6, #1]
    18d8:	713b      	strb	r3, [r7, #4]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
    18da:	2b00      	cmp	r3, #0
    18dc:	d104      	bne.n	18e8 <adc_init+0x4c>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
    18de:	4abb      	ldr	r2, [pc, #748]	; (1bcc <adc_init+0x330>)
    18e0:	6c13      	ldr	r3, [r2, #64]	; 0x40
    18e2:	2104      	movs	r1, #4
    18e4:	430b      	orrs	r3, r1
    18e6:	6413      	str	r3, [r2, #64]	; 0x40
		module_inst->callback[i] = NULL;
    18e8:	2300      	movs	r3, #0
    18ea:	60bb      	str	r3, [r7, #8]
    18ec:	60fb      	str	r3, [r7, #12]
    18ee:	613b      	str	r3, [r7, #16]
	module_inst->registered_callback_mask = 0;
    18f0:	76bb      	strb	r3, [r7, #26]
	module_inst->enabled_callback_mask = 0;
    18f2:	76fb      	strb	r3, [r7, #27]
	module_inst->remaining_conversions = 0;
    18f4:	833b      	strh	r3, [r7, #24]
	module_inst->job_status = STATUS_OK;
    18f6:	773b      	strb	r3, [r7, #28]
	_adc_instances[0] = module_inst;
    18f8:	4bb5      	ldr	r3, [pc, #724]	; (1bd0 <adc_init+0x334>)
    18fa:	601f      	str	r7, [r3, #0]
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
    18fc:	232a      	movs	r3, #42	; 0x2a
    18fe:	5cf3      	ldrb	r3, [r6, r3]
    1900:	2b00      	cmp	r3, #0
    1902:	d105      	bne.n	1910 <adc_init+0x74>
    1904:	7d33      	ldrb	r3, [r6, #20]
    1906:	2b00      	cmp	r3, #0
    1908:	d102      	bne.n	1910 <adc_init+0x74>
		module_inst->software_trigger = true;
    190a:	3301      	adds	r3, #1
    190c:	777b      	strb	r3, [r7, #29]
    190e:	e001      	b.n	1914 <adc_init+0x78>
		module_inst->software_trigger = false;
    1910:	2300      	movs	r3, #0
    1912:	777b      	strb	r3, [r7, #29]
	Adc *const adc_module = module_inst->hw;
    1914:	683b      	ldr	r3, [r7, #0]
    1916:	4698      	mov	r8, r3
	gclk_chan_conf.source_generator = config->clock_source;
    1918:	7833      	ldrb	r3, [r6, #0]
    191a:	466a      	mov	r2, sp
    191c:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
    191e:	4669      	mov	r1, sp
    1920:	201e      	movs	r0, #30
    1922:	4bac      	ldr	r3, [pc, #688]	; (1bd4 <adc_init+0x338>)
    1924:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
    1926:	201e      	movs	r0, #30
    1928:	4bab      	ldr	r3, [pc, #684]	; (1bd8 <adc_init+0x33c>)
    192a:	4798      	blx	r3
	if (config->pin_scan.inputs_to_scan != 0) {
    192c:	232c      	movs	r3, #44	; 0x2c
    192e:	5cf2      	ldrb	r2, [r6, r3]
    1930:	2a00      	cmp	r2, #0
    1932:	d054      	beq.n	19de <adc_init+0x142>
		uint8_t offset = config->pin_scan.offset_start_scan;
    1934:	3b01      	subs	r3, #1
    1936:	5cf5      	ldrb	r5, [r6, r3]
		uint8_t start_pin =
    1938:	7b33      	ldrb	r3, [r6, #12]
    193a:	18eb      	adds	r3, r5, r3
    193c:	b2db      	uxtb	r3, r3
		uint8_t end_pin =
    193e:	18d1      	adds	r1, r2, r3
		while (start_pin < end_pin) {
    1940:	b2c9      	uxtb	r1, r1
    1942:	428b      	cmp	r3, r1
    1944:	d221      	bcs.n	198a <adc_init+0xee>
    1946:	1952      	adds	r2, r2, r5
    1948:	b2d3      	uxtb	r3, r2
    194a:	4699      	mov	r9, r3
	const uint32_t pinmapping[] = {
    194c:	4ba3      	ldr	r3, [pc, #652]	; (1bdc <adc_init+0x340>)
    194e:	469a      	mov	sl, r3
    1950:	e003      	b.n	195a <adc_init+0xbe>
			offset++;
    1952:	3501      	adds	r5, #1
    1954:	b2ed      	uxtb	r5, r5
		while (start_pin < end_pin) {
    1956:	454d      	cmp	r5, r9
    1958:	d017      	beq.n	198a <adc_init+0xee>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
    195a:	240f      	movs	r4, #15
    195c:	402c      	ands	r4, r5
    195e:	7b33      	ldrb	r3, [r6, #12]
    1960:	18e4      	adds	r4, r4, r3
	const uint32_t pinmapping[] = {
    1962:	2250      	movs	r2, #80	; 0x50
    1964:	499e      	ldr	r1, [pc, #632]	; (1be0 <adc_init+0x344>)
    1966:	a802      	add	r0, sp, #8
    1968:	47d0      	blx	sl
	if (pin <= ADC_EXTCHANNEL_MSB) {
    196a:	2c13      	cmp	r4, #19
    196c:	d8f1      	bhi.n	1952 <adc_init+0xb6>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    196e:	00a4      	lsls	r4, r4, #2
    1970:	ab02      	add	r3, sp, #8
    1972:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1974:	a901      	add	r1, sp, #4
    1976:	2300      	movs	r3, #0
    1978:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    197a:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    197c:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    197e:	3301      	adds	r3, #1
    1980:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    1982:	b2c0      	uxtb	r0, r0
    1984:	4b97      	ldr	r3, [pc, #604]	; (1be4 <adc_init+0x348>)
    1986:	4798      	blx	r3
    1988:	e7e3      	b.n	1952 <adc_init+0xb6>
		_adc_configure_ain_pin(config->negative_input);
    198a:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
    198c:	2250      	movs	r2, #80	; 0x50
    198e:	4994      	ldr	r1, [pc, #592]	; (1be0 <adc_init+0x344>)
    1990:	a802      	add	r0, sp, #8
    1992:	4b92      	ldr	r3, [pc, #584]	; (1bdc <adc_init+0x340>)
    1994:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
    1996:	2c13      	cmp	r4, #19
    1998:	d913      	bls.n	19c2 <adc_init+0x126>
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
    199a:	7d73      	ldrb	r3, [r6, #21]
    199c:	009b      	lsls	r3, r3, #2
    199e:	b2db      	uxtb	r3, r3
    19a0:	4642      	mov	r2, r8
    19a2:	7013      	strb	r3, [r2, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
    19a4:	7db3      	ldrb	r3, [r6, #22]
    19a6:	01db      	lsls	r3, r3, #7
    19a8:	7872      	ldrb	r2, [r6, #1]
    19aa:	4313      	orrs	r3, r2
    19ac:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
    19ae:	4642      	mov	r2, r8
    19b0:	7053      	strb	r3, [r2, #1]
	switch (config->resolution) {
    19b2:	7933      	ldrb	r3, [r6, #4]
    19b4:	2b34      	cmp	r3, #52	; 0x34
    19b6:	d900      	bls.n	19ba <adc_init+0x11e>
    19b8:	e17b      	b.n	1cb2 <adc_init+0x416>
    19ba:	009b      	lsls	r3, r3, #2
    19bc:	4a8a      	ldr	r2, [pc, #552]	; (1be8 <adc_init+0x34c>)
    19be:	58d3      	ldr	r3, [r2, r3]
    19c0:	469f      	mov	pc, r3
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    19c2:	00a4      	lsls	r4, r4, #2
    19c4:	ab02      	add	r3, sp, #8
    19c6:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    19c8:	a901      	add	r1, sp, #4
    19ca:	2300      	movs	r3, #0
    19cc:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    19ce:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    19d0:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    19d2:	3301      	adds	r3, #1
    19d4:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    19d6:	b2c0      	uxtb	r0, r0
    19d8:	4b82      	ldr	r3, [pc, #520]	; (1be4 <adc_init+0x348>)
    19da:	4798      	blx	r3
    19dc:	e7dd      	b.n	199a <adc_init+0xfe>
		_adc_configure_ain_pin(config->positive_input);
    19de:	7b34      	ldrb	r4, [r6, #12]
	const uint32_t pinmapping[] = {
    19e0:	2250      	movs	r2, #80	; 0x50
    19e2:	497f      	ldr	r1, [pc, #508]	; (1be0 <adc_init+0x344>)
    19e4:	a802      	add	r0, sp, #8
    19e6:	4b7d      	ldr	r3, [pc, #500]	; (1bdc <adc_init+0x340>)
    19e8:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
    19ea:	2c13      	cmp	r4, #19
    19ec:	d915      	bls.n	1a1a <adc_init+0x17e>
		_adc_configure_ain_pin(config->negative_input);
    19ee:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
    19f0:	2250      	movs	r2, #80	; 0x50
    19f2:	497b      	ldr	r1, [pc, #492]	; (1be0 <adc_init+0x344>)
    19f4:	a802      	add	r0, sp, #8
    19f6:	4b79      	ldr	r3, [pc, #484]	; (1bdc <adc_init+0x340>)
    19f8:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
    19fa:	2c13      	cmp	r4, #19
    19fc:	d8cd      	bhi.n	199a <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    19fe:	00a4      	lsls	r4, r4, #2
    1a00:	ab02      	add	r3, sp, #8
    1a02:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1a04:	a901      	add	r1, sp, #4
    1a06:	2300      	movs	r3, #0
    1a08:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    1a0a:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    1a0c:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    1a0e:	3301      	adds	r3, #1
    1a10:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    1a12:	b2c0      	uxtb	r0, r0
    1a14:	4b73      	ldr	r3, [pc, #460]	; (1be4 <adc_init+0x348>)
    1a16:	4798      	blx	r3
    1a18:	e7bf      	b.n	199a <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    1a1a:	00a4      	lsls	r4, r4, #2
    1a1c:	ab02      	add	r3, sp, #8
    1a1e:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1a20:	a901      	add	r1, sp, #4
    1a22:	2300      	movs	r3, #0
    1a24:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    1a26:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    1a28:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    1a2a:	3301      	adds	r3, #1
    1a2c:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    1a2e:	b2c0      	uxtb	r0, r0
    1a30:	4b6c      	ldr	r3, [pc, #432]	; (1be4 <adc_init+0x348>)
    1a32:	4798      	blx	r3
    1a34:	e7db      	b.n	19ee <adc_init+0x152>
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
    1a36:	2304      	movs	r3, #4
		resolution = ADC_RESOLUTION_16BIT;
    1a38:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_4;
    1a3a:	2102      	movs	r1, #2
    1a3c:	e01a      	b.n	1a74 <adc_init+0x1d8>
		adjres = config->divide_result;
    1a3e:	7c71      	ldrb	r1, [r6, #17]
		accumulate = config->accumulate_samples;
    1a40:	7c33      	ldrb	r3, [r6, #16]
		resolution = ADC_RESOLUTION_16BIT;
    1a42:	2410      	movs	r4, #16
    1a44:	e016      	b.n	1a74 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
    1a46:	2306      	movs	r3, #6
		resolution = ADC_RESOLUTION_16BIT;
    1a48:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
    1a4a:	2101      	movs	r1, #1
    1a4c:	e012      	b.n	1a74 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
    1a4e:	2308      	movs	r3, #8
		resolution = ADC_RESOLUTION_16BIT;
    1a50:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
    1a52:	2100      	movs	r1, #0
    1a54:	e00e      	b.n	1a74 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    1a56:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_8BIT;
    1a58:	2430      	movs	r4, #48	; 0x30
	uint8_t adjres = 0;
    1a5a:	2100      	movs	r1, #0
    1a5c:	e00a      	b.n	1a74 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    1a5e:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_10BIT;
    1a60:	2420      	movs	r4, #32
	uint8_t adjres = 0;
    1a62:	2100      	movs	r1, #0
    1a64:	e006      	b.n	1a74 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    1a66:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_12BIT;
    1a68:	2400      	movs	r4, #0
	uint8_t adjres = 0;
    1a6a:	2100      	movs	r1, #0
    1a6c:	e002      	b.n	1a74 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
    1a6e:	2302      	movs	r3, #2
		resolution = ADC_RESOLUTION_16BIT;
    1a70:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
    1a72:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
    1a74:	0109      	lsls	r1, r1, #4
    1a76:	2270      	movs	r2, #112	; 0x70
    1a78:	400a      	ands	r2, r1
    1a7a:	4313      	orrs	r3, r2
    1a7c:	4642      	mov	r2, r8
    1a7e:	7093      	strb	r3, [r2, #2]
	if (config->sample_length > 63) {
    1a80:	7df3      	ldrb	r3, [r6, #23]
		return STATUS_ERR_INVALID_ARG;
    1a82:	2017      	movs	r0, #23
	if (config->sample_length > 63) {
    1a84:	2b3f      	cmp	r3, #63	; 0x3f
    1a86:	d900      	bls.n	1a8a <adc_init+0x1ee>
    1a88:	e71b      	b.n	18c2 <adc_init+0x26>
		adc_module->SAMPCTRL.reg =
    1a8a:	70d3      	strb	r3, [r2, #3]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    1a8c:	683a      	ldr	r2, [r7, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1a8e:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    1a90:	b25b      	sxtb	r3, r3
    1a92:	2b00      	cmp	r3, #0
    1a94:	dbfb      	blt.n	1a8e <adc_init+0x1f2>
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
    1a96:	7cf3      	ldrb	r3, [r6, #19]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    1a98:	8872      	ldrh	r2, [r6, #2]
    1a9a:	4313      	orrs	r3, r2
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
    1a9c:	2224      	movs	r2, #36	; 0x24
    1a9e:	5cb2      	ldrb	r2, [r6, r2]
    1aa0:	00d2      	lsls	r2, r2, #3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    1aa2:	4313      	orrs	r3, r2
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
    1aa4:	7d32      	ldrb	r2, [r6, #20]
    1aa6:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    1aa8:	4313      	orrs	r3, r2
    1aaa:	7cb2      	ldrb	r2, [r6, #18]
    1aac:	0052      	lsls	r2, r2, #1
    1aae:	4313      	orrs	r3, r2
    1ab0:	4323      	orrs	r3, r4
	adc_module->CTRLB.reg =
    1ab2:	4642      	mov	r2, r8
    1ab4:	8093      	strh	r3, [r2, #4]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
    1ab6:	7e33      	ldrb	r3, [r6, #24]
    1ab8:	2b00      	cmp	r3, #0
    1aba:	d020      	beq.n	1afe <adc_init+0x262>
		switch (resolution) {
    1abc:	2c10      	cmp	r4, #16
    1abe:	d100      	bne.n	1ac2 <adc_init+0x226>
    1ac0:	e0d9      	b.n	1c76 <adc_init+0x3da>
    1ac2:	d800      	bhi.n	1ac6 <adc_init+0x22a>
    1ac4:	e098      	b.n	1bf8 <adc_init+0x35c>
    1ac6:	2c20      	cmp	r4, #32
    1ac8:	d100      	bne.n	1acc <adc_init+0x230>
    1aca:	e0b6      	b.n	1c3a <adc_init+0x39e>
    1acc:	2c30      	cmp	r4, #48	; 0x30
    1ace:	d116      	bne.n	1afe <adc_init+0x262>
			if (config->differential_mode &&
    1ad0:	7cf2      	ldrb	r2, [r6, #19]
    1ad2:	2a00      	cmp	r2, #0
    1ad4:	d00a      	beq.n	1aec <adc_init+0x250>
					(config->window.window_lower_value > 127 ||
    1ad6:	69f2      	ldr	r2, [r6, #28]
    1ad8:	3280      	adds	r2, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
    1ada:	2017      	movs	r0, #23
			if (config->differential_mode &&
    1adc:	2aff      	cmp	r2, #255	; 0xff
    1ade:	d900      	bls.n	1ae2 <adc_init+0x246>
    1ae0:	e6ef      	b.n	18c2 <adc_init+0x26>
					config->window.window_lower_value < -128 ||
    1ae2:	6a32      	ldr	r2, [r6, #32]
    1ae4:	3280      	adds	r2, #128	; 0x80
    1ae6:	2aff      	cmp	r2, #255	; 0xff
    1ae8:	d900      	bls.n	1aec <adc_init+0x250>
    1aea:	e6ea      	b.n	18c2 <adc_init+0x26>
				return STATUS_ERR_INVALID_ARG;
    1aec:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 255 ||
    1aee:	69f2      	ldr	r2, [r6, #28]
    1af0:	2aff      	cmp	r2, #255	; 0xff
    1af2:	dd00      	ble.n	1af6 <adc_init+0x25a>
    1af4:	e6e5      	b.n	18c2 <adc_init+0x26>
    1af6:	6a32      	ldr	r2, [r6, #32]
    1af8:	2aff      	cmp	r2, #255	; 0xff
    1afa:	dd00      	ble.n	1afe <adc_init+0x262>
    1afc:	e6e1      	b.n	18c2 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
    1afe:	6839      	ldr	r1, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1b00:	7e4a      	ldrb	r2, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    1b02:	b252      	sxtb	r2, r2
    1b04:	2a00      	cmp	r2, #0
    1b06:	dbfb      	blt.n	1b00 <adc_init+0x264>
	adc_module->WINCTRL.reg = config->window.window_mode;
    1b08:	4642      	mov	r2, r8
    1b0a:	7213      	strb	r3, [r2, #8]
	Adc *const adc_module = module_inst->hw;
    1b0c:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1b0e:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    1b10:	b25b      	sxtb	r3, r3
    1b12:	2b00      	cmp	r3, #0
    1b14:	dbfb      	blt.n	1b0e <adc_init+0x272>
	adc_module->WINLT.reg =
    1b16:	8bb3      	ldrh	r3, [r6, #28]
    1b18:	4642      	mov	r2, r8
    1b1a:	8393      	strh	r3, [r2, #28]
	Adc *const adc_module = module_inst->hw;
    1b1c:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1b1e:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    1b20:	b25b      	sxtb	r3, r3
    1b22:	2b00      	cmp	r3, #0
    1b24:	dbfb      	blt.n	1b1e <adc_init+0x282>
	adc_module->WINUT.reg = config->window.window_upper_value <<
    1b26:	8c33      	ldrh	r3, [r6, #32]
    1b28:	4642      	mov	r2, r8
    1b2a:	8413      	strh	r3, [r2, #32]
	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
    1b2c:	232c      	movs	r3, #44	; 0x2c
    1b2e:	5cf3      	ldrb	r3, [r6, r3]
	if (inputs_to_scan > 0) {
    1b30:	2b00      	cmp	r3, #0
    1b32:	d005      	beq.n	1b40 <adc_init+0x2a4>
		inputs_to_scan--;
    1b34:	3b01      	subs	r3, #1
    1b36:	b2db      	uxtb	r3, r3
		return STATUS_ERR_INVALID_ARG;
    1b38:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    1b3a:	2b0f      	cmp	r3, #15
    1b3c:	d900      	bls.n	1b40 <adc_init+0x2a4>
    1b3e:	e6c0      	b.n	18c2 <adc_init+0x26>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
    1b40:	222b      	movs	r2, #43	; 0x2b
    1b42:	5cb1      	ldrb	r1, [r6, r2]
		return STATUS_ERR_INVALID_ARG;
    1b44:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    1b46:	290f      	cmp	r1, #15
    1b48:	d900      	bls.n	1b4c <adc_init+0x2b0>
    1b4a:	e6ba      	b.n	18c2 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
    1b4c:	6838      	ldr	r0, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1b4e:	7e42      	ldrb	r2, [r0, #25]
	while (adc_is_syncing(module_inst)) {
    1b50:	b252      	sxtb	r2, r2
    1b52:	2a00      	cmp	r2, #0
    1b54:	dbfb      	blt.n	1b4e <adc_init+0x2b2>
			config->negative_input |
    1b56:	89f2      	ldrh	r2, [r6, #14]
			config->positive_input;
    1b58:	7b30      	ldrb	r0, [r6, #12]
			config->negative_input |
    1b5a:	4302      	orrs	r2, r0
    1b5c:	68b0      	ldr	r0, [r6, #8]
    1b5e:	4302      	orrs	r2, r0
			(config->pin_scan.offset_start_scan <<
    1b60:	0509      	lsls	r1, r1, #20
			config->negative_input |
    1b62:	430a      	orrs	r2, r1
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    1b64:	041b      	lsls	r3, r3, #16
			config->negative_input |
    1b66:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
    1b68:	4642      	mov	r2, r8
    1b6a:	6113      	str	r3, [r2, #16]
	adc_module->EVCTRL.reg = config->event_action;
    1b6c:	232a      	movs	r3, #42	; 0x2a
    1b6e:	5cf3      	ldrb	r3, [r6, r3]
    1b70:	7513      	strb	r3, [r2, #20]
	adc_module->INTENCLR.reg =
    1b72:	230f      	movs	r3, #15
    1b74:	7593      	strb	r3, [r2, #22]
	if (config->correction.correction_enable){
    1b76:	3315      	adds	r3, #21
    1b78:	5cf3      	ldrb	r3, [r6, r3]
    1b7a:	2b00      	cmp	r3, #0
    1b7c:	d012      	beq.n	1ba4 <adc_init+0x308>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    1b7e:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
    1b80:	4a1a      	ldr	r2, [pc, #104]	; (1bec <adc_init+0x350>)
			return STATUS_ERR_INVALID_ARG;
    1b82:	2017      	movs	r0, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    1b84:	4293      	cmp	r3, r2
    1b86:	d900      	bls.n	1b8a <adc_init+0x2ee>
    1b88:	e69b      	b.n	18c2 <adc_init+0x26>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
    1b8a:	4642      	mov	r2, r8
    1b8c:	8493      	strh	r3, [r2, #36]	; 0x24
		if (config->correction.offset_correction > 2047 ||
    1b8e:	8d32      	ldrh	r2, [r6, #40]	; 0x28
    1b90:	2380      	movs	r3, #128	; 0x80
    1b92:	011b      	lsls	r3, r3, #4
    1b94:	18d3      	adds	r3, r2, r3
    1b96:	4915      	ldr	r1, [pc, #84]	; (1bec <adc_init+0x350>)
    1b98:	b29b      	uxth	r3, r3
    1b9a:	428b      	cmp	r3, r1
    1b9c:	d900      	bls.n	1ba0 <adc_init+0x304>
    1b9e:	e690      	b.n	18c2 <adc_init+0x26>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
    1ba0:	4643      	mov	r3, r8
    1ba2:	84da      	strh	r2, [r3, #38]	; 0x26
			ADC_CALIB_BIAS_CAL(
    1ba4:	4b12      	ldr	r3, [pc, #72]	; (1bf0 <adc_init+0x354>)
    1ba6:	681b      	ldr	r3, [r3, #0]
    1ba8:	015b      	lsls	r3, r3, #5
    1baa:	22e0      	movs	r2, #224	; 0xe0
    1bac:	00d2      	lsls	r2, r2, #3
    1bae:	4013      	ands	r3, r2
			ADC_CALIB_LINEARITY_CAL(
    1bb0:	4a10      	ldr	r2, [pc, #64]	; (1bf4 <adc_init+0x358>)
    1bb2:	6851      	ldr	r1, [r2, #4]
    1bb4:	0149      	lsls	r1, r1, #5
    1bb6:	6812      	ldr	r2, [r2, #0]
    1bb8:	0ed2      	lsrs	r2, r2, #27
    1bba:	430a      	orrs	r2, r1
    1bbc:	b2d2      	uxtb	r2, r2
			) |
    1bbe:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
    1bc0:	4642      	mov	r2, r8
    1bc2:	8513      	strh	r3, [r2, #40]	; 0x28
	return STATUS_OK;
    1bc4:	2000      	movs	r0, #0
    1bc6:	e67c      	b.n	18c2 <adc_init+0x26>
    1bc8:	40000400 	.word	0x40000400
    1bcc:	40000800 	.word	0x40000800
    1bd0:	20000360 	.word	0x20000360
    1bd4:	00002e1d 	.word	0x00002e1d
    1bd8:	00002d91 	.word	0x00002d91
    1bdc:	000047ad 	.word	0x000047ad
    1be0:	000060dc 	.word	0x000060dc
    1be4:	00002f15 	.word	0x00002f15
    1be8:	00006008 	.word	0x00006008
    1bec:	00000fff 	.word	0x00000fff
    1bf0:	00806024 	.word	0x00806024
    1bf4:	00806020 	.word	0x00806020
		switch (resolution) {
    1bf8:	2c00      	cmp	r4, #0
    1bfa:	d000      	beq.n	1bfe <adc_init+0x362>
    1bfc:	e77f      	b.n	1afe <adc_init+0x262>
			if (config->differential_mode &&
    1bfe:	7cf2      	ldrb	r2, [r6, #19]
    1c00:	2a00      	cmp	r2, #0
    1c02:	d00f      	beq.n	1c24 <adc_init+0x388>
					(config->window.window_lower_value > 2047 ||
    1c04:	69f2      	ldr	r2, [r6, #28]
    1c06:	2180      	movs	r1, #128	; 0x80
    1c08:	0109      	lsls	r1, r1, #4
    1c0a:	468c      	mov	ip, r1
    1c0c:	4462      	add	r2, ip
			if (config->differential_mode &&
    1c0e:	492a      	ldr	r1, [pc, #168]	; (1cb8 <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
    1c10:	2017      	movs	r0, #23
			if (config->differential_mode &&
    1c12:	428a      	cmp	r2, r1
    1c14:	d900      	bls.n	1c18 <adc_init+0x37c>
    1c16:	e654      	b.n	18c2 <adc_init+0x26>
					config->window.window_lower_value < -2048 ||
    1c18:	6a32      	ldr	r2, [r6, #32]
    1c1a:	4462      	add	r2, ip
    1c1c:	4926      	ldr	r1, [pc, #152]	; (1cb8 <adc_init+0x41c>)
    1c1e:	428a      	cmp	r2, r1
    1c20:	d900      	bls.n	1c24 <adc_init+0x388>
    1c22:	e64e      	b.n	18c2 <adc_init+0x26>
			} else if (config->window.window_lower_value > 4095 ||
    1c24:	4a24      	ldr	r2, [pc, #144]	; (1cb8 <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
    1c26:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
    1c28:	69f1      	ldr	r1, [r6, #28]
    1c2a:	4291      	cmp	r1, r2
    1c2c:	dd00      	ble.n	1c30 <adc_init+0x394>
    1c2e:	e648      	b.n	18c2 <adc_init+0x26>
    1c30:	6a31      	ldr	r1, [r6, #32]
    1c32:	4291      	cmp	r1, r2
    1c34:	dd00      	ble.n	1c38 <adc_init+0x39c>
    1c36:	e644      	b.n	18c2 <adc_init+0x26>
    1c38:	e761      	b.n	1afe <adc_init+0x262>
			if (config->differential_mode &&
    1c3a:	7cf2      	ldrb	r2, [r6, #19]
    1c3c:	2a00      	cmp	r2, #0
    1c3e:	d00f      	beq.n	1c60 <adc_init+0x3c4>
					(config->window.window_lower_value > 511 ||
    1c40:	69f2      	ldr	r2, [r6, #28]
    1c42:	2180      	movs	r1, #128	; 0x80
    1c44:	0089      	lsls	r1, r1, #2
    1c46:	468c      	mov	ip, r1
    1c48:	4462      	add	r2, ip
			if (config->differential_mode &&
    1c4a:	491c      	ldr	r1, [pc, #112]	; (1cbc <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
    1c4c:	2017      	movs	r0, #23
			if (config->differential_mode &&
    1c4e:	428a      	cmp	r2, r1
    1c50:	d900      	bls.n	1c54 <adc_init+0x3b8>
    1c52:	e636      	b.n	18c2 <adc_init+0x26>
					config->window.window_lower_value < -512 ||
    1c54:	6a32      	ldr	r2, [r6, #32]
    1c56:	4462      	add	r2, ip
    1c58:	4918      	ldr	r1, [pc, #96]	; (1cbc <adc_init+0x420>)
    1c5a:	428a      	cmp	r2, r1
    1c5c:	d900      	bls.n	1c60 <adc_init+0x3c4>
    1c5e:	e630      	b.n	18c2 <adc_init+0x26>
			} else if (config->window.window_lower_value > 1023 ||
    1c60:	4a16      	ldr	r2, [pc, #88]	; (1cbc <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
    1c62:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
    1c64:	69f1      	ldr	r1, [r6, #28]
    1c66:	4291      	cmp	r1, r2
    1c68:	dd00      	ble.n	1c6c <adc_init+0x3d0>
    1c6a:	e62a      	b.n	18c2 <adc_init+0x26>
    1c6c:	6a31      	ldr	r1, [r6, #32]
    1c6e:	4291      	cmp	r1, r2
    1c70:	dd00      	ble.n	1c74 <adc_init+0x3d8>
    1c72:	e626      	b.n	18c2 <adc_init+0x26>
    1c74:	e743      	b.n	1afe <adc_init+0x262>
			if (config->differential_mode &&
    1c76:	7cf2      	ldrb	r2, [r6, #19]
    1c78:	2a00      	cmp	r2, #0
    1c7a:	d00f      	beq.n	1c9c <adc_init+0x400>
					(config->window.window_lower_value > 32767 ||
    1c7c:	69f2      	ldr	r2, [r6, #28]
    1c7e:	2180      	movs	r1, #128	; 0x80
    1c80:	0209      	lsls	r1, r1, #8
    1c82:	468c      	mov	ip, r1
    1c84:	4462      	add	r2, ip
			if (config->differential_mode &&
    1c86:	490e      	ldr	r1, [pc, #56]	; (1cc0 <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
    1c88:	2017      	movs	r0, #23
			if (config->differential_mode &&
    1c8a:	428a      	cmp	r2, r1
    1c8c:	d900      	bls.n	1c90 <adc_init+0x3f4>
    1c8e:	e618      	b.n	18c2 <adc_init+0x26>
					config->window.window_lower_value < -32768 ||
    1c90:	6a32      	ldr	r2, [r6, #32]
    1c92:	4462      	add	r2, ip
    1c94:	490a      	ldr	r1, [pc, #40]	; (1cc0 <adc_init+0x424>)
    1c96:	428a      	cmp	r2, r1
    1c98:	d900      	bls.n	1c9c <adc_init+0x400>
    1c9a:	e612      	b.n	18c2 <adc_init+0x26>
			} else if (config->window.window_lower_value > 65535 ||
    1c9c:	4a08      	ldr	r2, [pc, #32]	; (1cc0 <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
    1c9e:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
    1ca0:	69f1      	ldr	r1, [r6, #28]
    1ca2:	4291      	cmp	r1, r2
    1ca4:	dd00      	ble.n	1ca8 <adc_init+0x40c>
    1ca6:	e60c      	b.n	18c2 <adc_init+0x26>
    1ca8:	6a31      	ldr	r1, [r6, #32]
    1caa:	4291      	cmp	r1, r2
    1cac:	dd00      	ble.n	1cb0 <adc_init+0x414>
    1cae:	e608      	b.n	18c2 <adc_init+0x26>
    1cb0:	e725      	b.n	1afe <adc_init+0x262>
		return STATUS_ERR_INVALID_ARG;
    1cb2:	2017      	movs	r0, #23
    1cb4:	e605      	b.n	18c2 <adc_init+0x26>
    1cb6:	46c0      	nop			; (mov r8, r8)
    1cb8:	00000fff 	.word	0x00000fff
    1cbc:	000003ff 	.word	0x000003ff
    1cc0:	0000ffff 	.word	0x0000ffff

00001cc4 <ADC_Handler>:
	}
}

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
    1cc4:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
    1cc6:	4b2f      	ldr	r3, [pc, #188]	; (1d84 <ADC_Handler+0xc0>)
    1cc8:	681d      	ldr	r5, [r3, #0]
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
    1cca:	682b      	ldr	r3, [r5, #0]
    1ccc:	7e1a      	ldrb	r2, [r3, #24]
    1cce:	7ddc      	ldrb	r4, [r3, #23]
    1cd0:	4014      	ands	r4, r2
	if (flags & ADC_INTFLAG_RESRDY) {
    1cd2:	07e2      	lsls	r2, r4, #31
    1cd4:	d416      	bmi.n	1d04 <ADC_Handler+0x40>
	if (flags & ADC_INTFLAG_WINMON) {
    1cd6:	0763      	lsls	r3, r4, #29
    1cd8:	d508      	bpl.n	1cec <ADC_Handler+0x28>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
    1cda:	2304      	movs	r3, #4
    1cdc:	682a      	ldr	r2, [r5, #0]
    1cde:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    1ce0:	7eeb      	ldrb	r3, [r5, #27]
    1ce2:	079b      	lsls	r3, r3, #30
    1ce4:	d502      	bpl.n	1cec <ADC_Handler+0x28>
    1ce6:	7eab      	ldrb	r3, [r5, #26]
    1ce8:	079b      	lsls	r3, r3, #30
    1cea:	d442      	bmi.n	1d72 <ADC_Handler+0xae>
	if (flags & ADC_INTFLAG_OVERRUN) {
    1cec:	07a3      	lsls	r3, r4, #30
    1cee:	d508      	bpl.n	1d02 <ADC_Handler+0x3e>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    1cf0:	2302      	movs	r3, #2
    1cf2:	682a      	ldr	r2, [r5, #0]
    1cf4:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    1cf6:	7eeb      	ldrb	r3, [r5, #27]
    1cf8:	075b      	lsls	r3, r3, #29
    1cfa:	d502      	bpl.n	1d02 <ADC_Handler+0x3e>
    1cfc:	7eab      	ldrb	r3, [r5, #26]
    1cfe:	075b      	lsls	r3, r3, #29
    1d00:	d43b      	bmi.n	1d7a <ADC_Handler+0xb6>
	_adc_interrupt_handler(0);
}
    1d02:	bd70      	pop	{r4, r5, r6, pc}
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    1d04:	2201      	movs	r2, #1
    1d06:	761a      	strb	r2, [r3, #24]
	Adc *const adc_module = module_inst->hw;
    1d08:	682a      	ldr	r2, [r5, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1d0a:	7e53      	ldrb	r3, [r2, #25]
		while (adc_is_syncing(module)) {
    1d0c:	b25b      	sxtb	r3, r3
    1d0e:	2b00      	cmp	r3, #0
    1d10:	dbfb      	blt.n	1d0a <ADC_Handler+0x46>
		*(module->job_buffer++) = module->hw->RESULT.reg;
    1d12:	6969      	ldr	r1, [r5, #20]
    1d14:	1c8b      	adds	r3, r1, #2
    1d16:	616b      	str	r3, [r5, #20]
    1d18:	8b53      	ldrh	r3, [r2, #26]
    1d1a:	b29b      	uxth	r3, r3
    1d1c:	800b      	strh	r3, [r1, #0]
		if (--module->remaining_conversions > 0) {
    1d1e:	8b2b      	ldrh	r3, [r5, #24]
    1d20:	3b01      	subs	r3, #1
    1d22:	b29b      	uxth	r3, r3
    1d24:	832b      	strh	r3, [r5, #24]
    1d26:	2b00      	cmp	r3, #0
    1d28:	d011      	beq.n	1d4e <ADC_Handler+0x8a>
			if (module->software_trigger == true) {
    1d2a:	7f6b      	ldrb	r3, [r5, #29]
    1d2c:	2b00      	cmp	r3, #0
    1d2e:	d0d2      	beq.n	1cd6 <ADC_Handler+0x12>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    1d30:	682a      	ldr	r2, [r5, #0]
    1d32:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    1d34:	b25b      	sxtb	r3, r3
    1d36:	2b00      	cmp	r3, #0
    1d38:	dbfb      	blt.n	1d32 <ADC_Handler+0x6e>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    1d3a:	7b13      	ldrb	r3, [r2, #12]
    1d3c:	2102      	movs	r1, #2
    1d3e:	430b      	orrs	r3, r1
    1d40:	7313      	strb	r3, [r2, #12]
	Adc *const adc_module = module_inst->hw;
    1d42:	682a      	ldr	r2, [r5, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1d44:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    1d46:	b25b      	sxtb	r3, r3
    1d48:	2b00      	cmp	r3, #0
    1d4a:	dbfb      	blt.n	1d44 <ADC_Handler+0x80>
    1d4c:	e7c3      	b.n	1cd6 <ADC_Handler+0x12>
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
    1d4e:	2301      	movs	r3, #1
    1d50:	682a      	ldr	r2, [r5, #0]
    1d52:	7593      	strb	r3, [r2, #22]
			if (module->job_status == STATUS_BUSY) {
    1d54:	7f2b      	ldrb	r3, [r5, #28]
    1d56:	2b05      	cmp	r3, #5
    1d58:	d1bd      	bne.n	1cd6 <ADC_Handler+0x12>
				module->job_status = STATUS_OK;
    1d5a:	2300      	movs	r3, #0
    1d5c:	772b      	strb	r3, [r5, #28]
				if ((module->enabled_callback_mask &
    1d5e:	7eeb      	ldrb	r3, [r5, #27]
    1d60:	07db      	lsls	r3, r3, #31
    1d62:	d5b8      	bpl.n	1cd6 <ADC_Handler+0x12>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
    1d64:	7eab      	ldrb	r3, [r5, #26]
    1d66:	07db      	lsls	r3, r3, #31
    1d68:	d5b5      	bpl.n	1cd6 <ADC_Handler+0x12>
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
    1d6a:	0028      	movs	r0, r5
    1d6c:	68ab      	ldr	r3, [r5, #8]
    1d6e:	4798      	blx	r3
    1d70:	e7b1      	b.n	1cd6 <ADC_Handler+0x12>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
    1d72:	0028      	movs	r0, r5
    1d74:	68eb      	ldr	r3, [r5, #12]
    1d76:	4798      	blx	r3
    1d78:	e7b8      	b.n	1cec <ADC_Handler+0x28>
			(module->callback[ADC_CALLBACK_ERROR])(module);
    1d7a:	692b      	ldr	r3, [r5, #16]
    1d7c:	0028      	movs	r0, r5
    1d7e:	4798      	blx	r3
}
    1d80:	e7bf      	b.n	1d02 <ADC_Handler+0x3e>
    1d82:	46c0      	nop			; (mov r8, r8)
    1d84:	20000360 	.word	0x20000360

00001d88 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    1d88:	b500      	push	{lr}
    1d8a:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1d8c:	ab01      	add	r3, sp, #4
    1d8e:	2280      	movs	r2, #128	; 0x80
    1d90:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    1d92:	780a      	ldrb	r2, [r1, #0]
    1d94:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    1d96:	784a      	ldrb	r2, [r1, #1]
    1d98:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    1d9a:	788a      	ldrb	r2, [r1, #2]
    1d9c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    1d9e:	0019      	movs	r1, r3
    1da0:	4b01      	ldr	r3, [pc, #4]	; (1da8 <port_pin_set_config+0x20>)
    1da2:	4798      	blx	r3
}
    1da4:	b003      	add	sp, #12
    1da6:	bd00      	pop	{pc}
    1da8:	00002f15 	.word	0x00002f15

00001dac <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    1dac:	b5f0      	push	{r4, r5, r6, r7, lr}
    1dae:	46de      	mov	lr, fp
    1db0:	4657      	mov	r7, sl
    1db2:	464e      	mov	r6, r9
    1db4:	4645      	mov	r5, r8
    1db6:	b5e0      	push	{r5, r6, r7, lr}
    1db8:	b087      	sub	sp, #28
    1dba:	4680      	mov	r8, r0
    1dbc:	9104      	str	r1, [sp, #16]
    1dbe:	0016      	movs	r6, r2
    1dc0:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    1dc2:	2200      	movs	r2, #0
    1dc4:	2300      	movs	r3, #0
    1dc6:	2100      	movs	r1, #0
    1dc8:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    1dca:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    1dcc:	2001      	movs	r0, #1
    1dce:	0021      	movs	r1, r4
    1dd0:	9600      	str	r6, [sp, #0]
    1dd2:	9701      	str	r7, [sp, #4]
    1dd4:	465c      	mov	r4, fp
    1dd6:	9403      	str	r4, [sp, #12]
    1dd8:	4644      	mov	r4, r8
    1dda:	9405      	str	r4, [sp, #20]
    1ddc:	e013      	b.n	1e06 <long_division+0x5a>
    1dde:	2420      	movs	r4, #32
    1de0:	1a64      	subs	r4, r4, r1
    1de2:	0005      	movs	r5, r0
    1de4:	40e5      	lsrs	r5, r4
    1de6:	46a8      	mov	r8, r5
    1de8:	e014      	b.n	1e14 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    1dea:	9c00      	ldr	r4, [sp, #0]
    1dec:	9d01      	ldr	r5, [sp, #4]
    1dee:	1b12      	subs	r2, r2, r4
    1df0:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    1df2:	465c      	mov	r4, fp
    1df4:	464d      	mov	r5, r9
    1df6:	432c      	orrs	r4, r5
    1df8:	46a3      	mov	fp, r4
    1dfa:	9c03      	ldr	r4, [sp, #12]
    1dfc:	4645      	mov	r5, r8
    1dfe:	432c      	orrs	r4, r5
    1e00:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    1e02:	3901      	subs	r1, #1
    1e04:	d325      	bcc.n	1e52 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    1e06:	2420      	movs	r4, #32
    1e08:	4264      	negs	r4, r4
    1e0a:	190c      	adds	r4, r1, r4
    1e0c:	d4e7      	bmi.n	1dde <long_division+0x32>
    1e0e:	0005      	movs	r5, r0
    1e10:	40a5      	lsls	r5, r4
    1e12:	46a8      	mov	r8, r5
    1e14:	0004      	movs	r4, r0
    1e16:	408c      	lsls	r4, r1
    1e18:	46a1      	mov	r9, r4
		r = r << 1;
    1e1a:	1892      	adds	r2, r2, r2
    1e1c:	415b      	adcs	r3, r3
    1e1e:	0014      	movs	r4, r2
    1e20:	001d      	movs	r5, r3
		if (n & bit_shift) {
    1e22:	9e05      	ldr	r6, [sp, #20]
    1e24:	464f      	mov	r7, r9
    1e26:	403e      	ands	r6, r7
    1e28:	46b4      	mov	ip, r6
    1e2a:	9e04      	ldr	r6, [sp, #16]
    1e2c:	4647      	mov	r7, r8
    1e2e:	403e      	ands	r6, r7
    1e30:	46b2      	mov	sl, r6
    1e32:	4666      	mov	r6, ip
    1e34:	4657      	mov	r7, sl
    1e36:	433e      	orrs	r6, r7
    1e38:	d003      	beq.n	1e42 <long_division+0x96>
			r |= 0x01;
    1e3a:	0006      	movs	r6, r0
    1e3c:	4326      	orrs	r6, r4
    1e3e:	0032      	movs	r2, r6
    1e40:	002b      	movs	r3, r5
		if (r >= d) {
    1e42:	9c00      	ldr	r4, [sp, #0]
    1e44:	9d01      	ldr	r5, [sp, #4]
    1e46:	429d      	cmp	r5, r3
    1e48:	d8db      	bhi.n	1e02 <long_division+0x56>
    1e4a:	d1ce      	bne.n	1dea <long_division+0x3e>
    1e4c:	4294      	cmp	r4, r2
    1e4e:	d8d8      	bhi.n	1e02 <long_division+0x56>
    1e50:	e7cb      	b.n	1dea <long_division+0x3e>
    1e52:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    1e54:	4658      	mov	r0, fp
    1e56:	0019      	movs	r1, r3
    1e58:	b007      	add	sp, #28
    1e5a:	bc3c      	pop	{r2, r3, r4, r5}
    1e5c:	4690      	mov	r8, r2
    1e5e:	4699      	mov	r9, r3
    1e60:	46a2      	mov	sl, r4
    1e62:	46ab      	mov	fp, r5
    1e64:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001e66 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    1e66:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    1e68:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1e6a:	2340      	movs	r3, #64	; 0x40
    1e6c:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    1e6e:	4281      	cmp	r1, r0
    1e70:	d202      	bcs.n	1e78 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    1e72:	0018      	movs	r0, r3
    1e74:	bd10      	pop	{r4, pc}
		baud_calculated++;
    1e76:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    1e78:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    1e7a:	1c63      	adds	r3, r4, #1
    1e7c:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    1e7e:	4288      	cmp	r0, r1
    1e80:	d9f9      	bls.n	1e76 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1e82:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    1e84:	2cff      	cmp	r4, #255	; 0xff
    1e86:	d8f4      	bhi.n	1e72 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    1e88:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    1e8a:	2300      	movs	r3, #0
    1e8c:	e7f1      	b.n	1e72 <_sercom_get_sync_baud_val+0xc>
	...

00001e90 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    1e90:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e92:	b083      	sub	sp, #12
    1e94:	000f      	movs	r7, r1
    1e96:	0016      	movs	r6, r2
    1e98:	aa08      	add	r2, sp, #32
    1e9a:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    1e9c:	0004      	movs	r4, r0
    1e9e:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1ea0:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    1ea2:	42bc      	cmp	r4, r7
    1ea4:	d902      	bls.n	1eac <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    1ea6:	0010      	movs	r0, r2
    1ea8:	b003      	add	sp, #12
    1eaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    1eac:	2b00      	cmp	r3, #0
    1eae:	d114      	bne.n	1eda <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    1eb0:	0002      	movs	r2, r0
    1eb2:	0008      	movs	r0, r1
    1eb4:	2100      	movs	r1, #0
    1eb6:	4c19      	ldr	r4, [pc, #100]	; (1f1c <_sercom_get_async_baud_val+0x8c>)
    1eb8:	47a0      	blx	r4
    1eba:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    1ebc:	003a      	movs	r2, r7
    1ebe:	2300      	movs	r3, #0
    1ec0:	2000      	movs	r0, #0
    1ec2:	4c17      	ldr	r4, [pc, #92]	; (1f20 <_sercom_get_async_baud_val+0x90>)
    1ec4:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    1ec6:	2200      	movs	r2, #0
    1ec8:	2301      	movs	r3, #1
    1eca:	1a12      	subs	r2, r2, r0
    1ecc:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    1ece:	0c12      	lsrs	r2, r2, #16
    1ed0:	041b      	lsls	r3, r3, #16
    1ed2:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    1ed4:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    1ed6:	2200      	movs	r2, #0
    1ed8:	e7e5      	b.n	1ea6 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    1eda:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    1edc:	2b01      	cmp	r3, #1
    1ede:	d1f9      	bne.n	1ed4 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    1ee0:	000a      	movs	r2, r1
    1ee2:	2300      	movs	r3, #0
    1ee4:	2100      	movs	r1, #0
    1ee6:	4c0d      	ldr	r4, [pc, #52]	; (1f1c <_sercom_get_async_baud_val+0x8c>)
    1ee8:	47a0      	blx	r4
    1eea:	0002      	movs	r2, r0
    1eec:	000b      	movs	r3, r1
    1eee:	9200      	str	r2, [sp, #0]
    1ef0:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    1ef2:	0038      	movs	r0, r7
    1ef4:	2100      	movs	r1, #0
    1ef6:	4c0a      	ldr	r4, [pc, #40]	; (1f20 <_sercom_get_async_baud_val+0x90>)
    1ef8:	47a0      	blx	r4
    1efa:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    1efc:	2380      	movs	r3, #128	; 0x80
    1efe:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1f00:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    1f02:	4298      	cmp	r0, r3
    1f04:	d8cf      	bhi.n	1ea6 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    1f06:	0f79      	lsrs	r1, r7, #29
    1f08:	00f8      	lsls	r0, r7, #3
    1f0a:	9a00      	ldr	r2, [sp, #0]
    1f0c:	9b01      	ldr	r3, [sp, #4]
    1f0e:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    1f10:	00ea      	lsls	r2, r5, #3
    1f12:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    1f14:	b2d2      	uxtb	r2, r2
    1f16:	0352      	lsls	r2, r2, #13
    1f18:	432a      	orrs	r2, r5
    1f1a:	e7db      	b.n	1ed4 <_sercom_get_async_baud_val+0x44>
    1f1c:	000046c5 	.word	0x000046c5
    1f20:	00001dad 	.word	0x00001dad

00001f24 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    1f24:	b510      	push	{r4, lr}
    1f26:	b082      	sub	sp, #8
    1f28:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    1f2a:	4b0e      	ldr	r3, [pc, #56]	; (1f64 <sercom_set_gclk_generator+0x40>)
    1f2c:	781b      	ldrb	r3, [r3, #0]
    1f2e:	2b00      	cmp	r3, #0
    1f30:	d007      	beq.n	1f42 <sercom_set_gclk_generator+0x1e>
    1f32:	2900      	cmp	r1, #0
    1f34:	d105      	bne.n	1f42 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    1f36:	4b0b      	ldr	r3, [pc, #44]	; (1f64 <sercom_set_gclk_generator+0x40>)
    1f38:	785b      	ldrb	r3, [r3, #1]
    1f3a:	4283      	cmp	r3, r0
    1f3c:	d010      	beq.n	1f60 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    1f3e:	201d      	movs	r0, #29
    1f40:	e00c      	b.n	1f5c <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    1f42:	a901      	add	r1, sp, #4
    1f44:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    1f46:	2013      	movs	r0, #19
    1f48:	4b07      	ldr	r3, [pc, #28]	; (1f68 <sercom_set_gclk_generator+0x44>)
    1f4a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    1f4c:	2013      	movs	r0, #19
    1f4e:	4b07      	ldr	r3, [pc, #28]	; (1f6c <sercom_set_gclk_generator+0x48>)
    1f50:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    1f52:	4b04      	ldr	r3, [pc, #16]	; (1f64 <sercom_set_gclk_generator+0x40>)
    1f54:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    1f56:	2201      	movs	r2, #1
    1f58:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    1f5a:	2000      	movs	r0, #0
}
    1f5c:	b002      	add	sp, #8
    1f5e:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    1f60:	2000      	movs	r0, #0
    1f62:	e7fb      	b.n	1f5c <sercom_set_gclk_generator+0x38>
    1f64:	20000280 	.word	0x20000280
    1f68:	00002e1d 	.word	0x00002e1d
    1f6c:	00002d91 	.word	0x00002d91

00001f70 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    1f70:	4b40      	ldr	r3, [pc, #256]	; (2074 <STACK_SIZE+0x74>)
    1f72:	4298      	cmp	r0, r3
    1f74:	d031      	beq.n	1fda <_sercom_get_default_pad+0x6a>
    1f76:	d90a      	bls.n	1f8e <_sercom_get_default_pad+0x1e>
    1f78:	4b3f      	ldr	r3, [pc, #252]	; (2078 <STACK_SIZE+0x78>)
    1f7a:	4298      	cmp	r0, r3
    1f7c:	d04d      	beq.n	201a <STACK_SIZE+0x1a>
    1f7e:	4b3f      	ldr	r3, [pc, #252]	; (207c <STACK_SIZE+0x7c>)
    1f80:	4298      	cmp	r0, r3
    1f82:	d05a      	beq.n	203a <STACK_SIZE+0x3a>
    1f84:	4b3e      	ldr	r3, [pc, #248]	; (2080 <STACK_SIZE+0x80>)
    1f86:	4298      	cmp	r0, r3
    1f88:	d037      	beq.n	1ffa <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    1f8a:	2000      	movs	r0, #0
}
    1f8c:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    1f8e:	4b3d      	ldr	r3, [pc, #244]	; (2084 <STACK_SIZE+0x84>)
    1f90:	4298      	cmp	r0, r3
    1f92:	d00c      	beq.n	1fae <_sercom_get_default_pad+0x3e>
    1f94:	4b3c      	ldr	r3, [pc, #240]	; (2088 <STACK_SIZE+0x88>)
    1f96:	4298      	cmp	r0, r3
    1f98:	d1f7      	bne.n	1f8a <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1f9a:	2901      	cmp	r1, #1
    1f9c:	d017      	beq.n	1fce <_sercom_get_default_pad+0x5e>
    1f9e:	2900      	cmp	r1, #0
    1fa0:	d05d      	beq.n	205e <STACK_SIZE+0x5e>
    1fa2:	2902      	cmp	r1, #2
    1fa4:	d015      	beq.n	1fd2 <_sercom_get_default_pad+0x62>
    1fa6:	2903      	cmp	r1, #3
    1fa8:	d015      	beq.n	1fd6 <_sercom_get_default_pad+0x66>
	return 0;
    1faa:	2000      	movs	r0, #0
    1fac:	e7ee      	b.n	1f8c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1fae:	2901      	cmp	r1, #1
    1fb0:	d007      	beq.n	1fc2 <_sercom_get_default_pad+0x52>
    1fb2:	2900      	cmp	r1, #0
    1fb4:	d051      	beq.n	205a <STACK_SIZE+0x5a>
    1fb6:	2902      	cmp	r1, #2
    1fb8:	d005      	beq.n	1fc6 <_sercom_get_default_pad+0x56>
    1fba:	2903      	cmp	r1, #3
    1fbc:	d005      	beq.n	1fca <_sercom_get_default_pad+0x5a>
	return 0;
    1fbe:	2000      	movs	r0, #0
    1fc0:	e7e4      	b.n	1f8c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1fc2:	4832      	ldr	r0, [pc, #200]	; (208c <STACK_SIZE+0x8c>)
    1fc4:	e7e2      	b.n	1f8c <_sercom_get_default_pad+0x1c>
    1fc6:	4832      	ldr	r0, [pc, #200]	; (2090 <STACK_SIZE+0x90>)
    1fc8:	e7e0      	b.n	1f8c <_sercom_get_default_pad+0x1c>
    1fca:	4832      	ldr	r0, [pc, #200]	; (2094 <STACK_SIZE+0x94>)
    1fcc:	e7de      	b.n	1f8c <_sercom_get_default_pad+0x1c>
    1fce:	4832      	ldr	r0, [pc, #200]	; (2098 <STACK_SIZE+0x98>)
    1fd0:	e7dc      	b.n	1f8c <_sercom_get_default_pad+0x1c>
    1fd2:	4832      	ldr	r0, [pc, #200]	; (209c <STACK_SIZE+0x9c>)
    1fd4:	e7da      	b.n	1f8c <_sercom_get_default_pad+0x1c>
    1fd6:	4832      	ldr	r0, [pc, #200]	; (20a0 <STACK_SIZE+0xa0>)
    1fd8:	e7d8      	b.n	1f8c <_sercom_get_default_pad+0x1c>
    1fda:	2901      	cmp	r1, #1
    1fdc:	d007      	beq.n	1fee <_sercom_get_default_pad+0x7e>
    1fde:	2900      	cmp	r1, #0
    1fe0:	d03f      	beq.n	2062 <STACK_SIZE+0x62>
    1fe2:	2902      	cmp	r1, #2
    1fe4:	d005      	beq.n	1ff2 <_sercom_get_default_pad+0x82>
    1fe6:	2903      	cmp	r1, #3
    1fe8:	d005      	beq.n	1ff6 <_sercom_get_default_pad+0x86>
	return 0;
    1fea:	2000      	movs	r0, #0
    1fec:	e7ce      	b.n	1f8c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1fee:	482d      	ldr	r0, [pc, #180]	; (20a4 <STACK_SIZE+0xa4>)
    1ff0:	e7cc      	b.n	1f8c <_sercom_get_default_pad+0x1c>
    1ff2:	482d      	ldr	r0, [pc, #180]	; (20a8 <STACK_SIZE+0xa8>)
    1ff4:	e7ca      	b.n	1f8c <_sercom_get_default_pad+0x1c>
    1ff6:	482d      	ldr	r0, [pc, #180]	; (20ac <STACK_SIZE+0xac>)
    1ff8:	e7c8      	b.n	1f8c <_sercom_get_default_pad+0x1c>
    1ffa:	2901      	cmp	r1, #1
    1ffc:	d007      	beq.n	200e <STACK_SIZE+0xe>
    1ffe:	2900      	cmp	r1, #0
    2000:	d031      	beq.n	2066 <STACK_SIZE+0x66>
    2002:	2902      	cmp	r1, #2
    2004:	d005      	beq.n	2012 <STACK_SIZE+0x12>
    2006:	2903      	cmp	r1, #3
    2008:	d005      	beq.n	2016 <STACK_SIZE+0x16>
	return 0;
    200a:	2000      	movs	r0, #0
    200c:	e7be      	b.n	1f8c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    200e:	4828      	ldr	r0, [pc, #160]	; (20b0 <STACK_SIZE+0xb0>)
    2010:	e7bc      	b.n	1f8c <_sercom_get_default_pad+0x1c>
    2012:	4828      	ldr	r0, [pc, #160]	; (20b4 <STACK_SIZE+0xb4>)
    2014:	e7ba      	b.n	1f8c <_sercom_get_default_pad+0x1c>
    2016:	4828      	ldr	r0, [pc, #160]	; (20b8 <STACK_SIZE+0xb8>)
    2018:	e7b8      	b.n	1f8c <_sercom_get_default_pad+0x1c>
    201a:	2901      	cmp	r1, #1
    201c:	d007      	beq.n	202e <STACK_SIZE+0x2e>
    201e:	2900      	cmp	r1, #0
    2020:	d023      	beq.n	206a <STACK_SIZE+0x6a>
    2022:	2902      	cmp	r1, #2
    2024:	d005      	beq.n	2032 <STACK_SIZE+0x32>
    2026:	2903      	cmp	r1, #3
    2028:	d005      	beq.n	2036 <STACK_SIZE+0x36>
	return 0;
    202a:	2000      	movs	r0, #0
    202c:	e7ae      	b.n	1f8c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    202e:	4823      	ldr	r0, [pc, #140]	; (20bc <STACK_SIZE+0xbc>)
    2030:	e7ac      	b.n	1f8c <_sercom_get_default_pad+0x1c>
    2032:	4823      	ldr	r0, [pc, #140]	; (20c0 <STACK_SIZE+0xc0>)
    2034:	e7aa      	b.n	1f8c <_sercom_get_default_pad+0x1c>
    2036:	4823      	ldr	r0, [pc, #140]	; (20c4 <STACK_SIZE+0xc4>)
    2038:	e7a8      	b.n	1f8c <_sercom_get_default_pad+0x1c>
    203a:	2901      	cmp	r1, #1
    203c:	d007      	beq.n	204e <STACK_SIZE+0x4e>
    203e:	2900      	cmp	r1, #0
    2040:	d015      	beq.n	206e <STACK_SIZE+0x6e>
    2042:	2902      	cmp	r1, #2
    2044:	d005      	beq.n	2052 <STACK_SIZE+0x52>
    2046:	2903      	cmp	r1, #3
    2048:	d005      	beq.n	2056 <STACK_SIZE+0x56>
	return 0;
    204a:	2000      	movs	r0, #0
    204c:	e79e      	b.n	1f8c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    204e:	481e      	ldr	r0, [pc, #120]	; (20c8 <STACK_SIZE+0xc8>)
    2050:	e79c      	b.n	1f8c <_sercom_get_default_pad+0x1c>
    2052:	481e      	ldr	r0, [pc, #120]	; (20cc <STACK_SIZE+0xcc>)
    2054:	e79a      	b.n	1f8c <_sercom_get_default_pad+0x1c>
    2056:	481e      	ldr	r0, [pc, #120]	; (20d0 <STACK_SIZE+0xd0>)
    2058:	e798      	b.n	1f8c <_sercom_get_default_pad+0x1c>
    205a:	481e      	ldr	r0, [pc, #120]	; (20d4 <STACK_SIZE+0xd4>)
    205c:	e796      	b.n	1f8c <_sercom_get_default_pad+0x1c>
    205e:	2003      	movs	r0, #3
    2060:	e794      	b.n	1f8c <_sercom_get_default_pad+0x1c>
    2062:	481d      	ldr	r0, [pc, #116]	; (20d8 <STACK_SIZE+0xd8>)
    2064:	e792      	b.n	1f8c <_sercom_get_default_pad+0x1c>
    2066:	481d      	ldr	r0, [pc, #116]	; (20dc <STACK_SIZE+0xdc>)
    2068:	e790      	b.n	1f8c <_sercom_get_default_pad+0x1c>
    206a:	481d      	ldr	r0, [pc, #116]	; (20e0 <STACK_SIZE+0xe0>)
    206c:	e78e      	b.n	1f8c <_sercom_get_default_pad+0x1c>
    206e:	481d      	ldr	r0, [pc, #116]	; (20e4 <STACK_SIZE+0xe4>)
    2070:	e78c      	b.n	1f8c <_sercom_get_default_pad+0x1c>
    2072:	46c0      	nop			; (mov r8, r8)
    2074:	42001000 	.word	0x42001000
    2078:	42001800 	.word	0x42001800
    207c:	42001c00 	.word	0x42001c00
    2080:	42001400 	.word	0x42001400
    2084:	42000800 	.word	0x42000800
    2088:	42000c00 	.word	0x42000c00
    208c:	00050003 	.word	0x00050003
    2090:	00060003 	.word	0x00060003
    2094:	00070003 	.word	0x00070003
    2098:	00010003 	.word	0x00010003
    209c:	001e0003 	.word	0x001e0003
    20a0:	001f0003 	.word	0x001f0003
    20a4:	00090003 	.word	0x00090003
    20a8:	000a0003 	.word	0x000a0003
    20ac:	000b0003 	.word	0x000b0003
    20b0:	00110003 	.word	0x00110003
    20b4:	00120003 	.word	0x00120003
    20b8:	00130003 	.word	0x00130003
    20bc:	000d0003 	.word	0x000d0003
    20c0:	000e0003 	.word	0x000e0003
    20c4:	000f0003 	.word	0x000f0003
    20c8:	00170003 	.word	0x00170003
    20cc:	00180003 	.word	0x00180003
    20d0:	00190003 	.word	0x00190003
    20d4:	00040003 	.word	0x00040003
    20d8:	00080003 	.word	0x00080003
    20dc:	00100003 	.word	0x00100003
    20e0:	000c0003 	.word	0x000c0003
    20e4:	00160003 	.word	0x00160003

000020e8 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    20e8:	b530      	push	{r4, r5, lr}
    20ea:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    20ec:	4b0b      	ldr	r3, [pc, #44]	; (211c <_sercom_get_sercom_inst_index+0x34>)
    20ee:	466a      	mov	r2, sp
    20f0:	cb32      	ldmia	r3!, {r1, r4, r5}
    20f2:	c232      	stmia	r2!, {r1, r4, r5}
    20f4:	cb32      	ldmia	r3!, {r1, r4, r5}
    20f6:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    20f8:	9b00      	ldr	r3, [sp, #0]
    20fa:	4283      	cmp	r3, r0
    20fc:	d00b      	beq.n	2116 <_sercom_get_sercom_inst_index+0x2e>
    20fe:	2301      	movs	r3, #1
    2100:	009a      	lsls	r2, r3, #2
    2102:	4669      	mov	r1, sp
    2104:	5852      	ldr	r2, [r2, r1]
    2106:	4282      	cmp	r2, r0
    2108:	d006      	beq.n	2118 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    210a:	3301      	adds	r3, #1
    210c:	2b06      	cmp	r3, #6
    210e:	d1f7      	bne.n	2100 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    2110:	2000      	movs	r0, #0
}
    2112:	b007      	add	sp, #28
    2114:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2116:	2300      	movs	r3, #0
			return i;
    2118:	b2d8      	uxtb	r0, r3
    211a:	e7fa      	b.n	2112 <_sercom_get_sercom_inst_index+0x2a>
    211c:	0000612c 	.word	0x0000612c

00002120 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    2120:	4770      	bx	lr
	...

00002124 <_sercom_set_handler>:


void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    2124:	b5f0      	push	{r4, r5, r6, r7, lr}
	// Initialize handlers with default handler and device instances with 0 
	if (_handler_table_initialized == false) {
    2126:	4b0a      	ldr	r3, [pc, #40]	; (2150 <_sercom_set_handler+0x2c>)
    2128:	781b      	ldrb	r3, [r3, #0]
    212a:	2b00      	cmp	r3, #0
    212c:	d10c      	bne.n	2148 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    212e:	4f09      	ldr	r7, [pc, #36]	; (2154 <_sercom_set_handler+0x30>)
    2130:	4e09      	ldr	r6, [pc, #36]	; (2158 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    2132:	4d0a      	ldr	r5, [pc, #40]	; (215c <_sercom_set_handler+0x38>)
    2134:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    2136:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    2138:	195a      	adds	r2, r3, r5
    213a:	6014      	str	r4, [r2, #0]
    213c:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    213e:	2b18      	cmp	r3, #24
    2140:	d1f9      	bne.n	2136 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    2142:	2201      	movs	r2, #1
    2144:	4b02      	ldr	r3, [pc, #8]	; (2150 <_sercom_set_handler+0x2c>)
    2146:	701a      	strb	r2, [r3, #0]
	}

	// Save interrupt handler 
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    2148:	0080      	lsls	r0, r0, #2
    214a:	4b02      	ldr	r3, [pc, #8]	; (2154 <_sercom_set_handler+0x30>)
    214c:	50c1      	str	r1, [r0, r3]
}
    214e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2150:	20000282 	.word	0x20000282
    2154:	20000284 	.word	0x20000284
    2158:	00002121 	.word	0x00002121
    215c:	20000364 	.word	0x20000364

00002160 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    2160:	b500      	push	{lr}
    2162:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    2164:	2309      	movs	r3, #9
    2166:	466a      	mov	r2, sp
    2168:	7013      	strb	r3, [r2, #0]
    216a:	3301      	adds	r3, #1
    216c:	7053      	strb	r3, [r2, #1]
    216e:	3301      	adds	r3, #1
    2170:	7093      	strb	r3, [r2, #2]
    2172:	3301      	adds	r3, #1
    2174:	70d3      	strb	r3, [r2, #3]
    2176:	3301      	adds	r3, #1
    2178:	7113      	strb	r3, [r2, #4]
    217a:	3301      	adds	r3, #1
    217c:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    217e:	4b03      	ldr	r3, [pc, #12]	; (218c <_sercom_get_interrupt_vector+0x2c>)
    2180:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    2182:	466b      	mov	r3, sp
    2184:	5618      	ldrsb	r0, [r3, r0]
}
    2186:	b003      	add	sp, #12
    2188:	bd00      	pop	{pc}
    218a:	46c0      	nop			; (mov r8, r8)
    218c:	000020e9 	.word	0x000020e9

00002190 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    2190:	b510      	push	{r4, lr}
    2192:	4b02      	ldr	r3, [pc, #8]	; (219c <SERCOM0_Handler+0xc>)
    2194:	681b      	ldr	r3, [r3, #0]
    2196:	2000      	movs	r0, #0
    2198:	4798      	blx	r3
    219a:	bd10      	pop	{r4, pc}
    219c:	20000284 	.word	0x20000284

000021a0 <SERCOM1_Handler>:
    21a0:	b510      	push	{r4, lr}
    21a2:	4b02      	ldr	r3, [pc, #8]	; (21ac <SERCOM1_Handler+0xc>)
    21a4:	685b      	ldr	r3, [r3, #4]
    21a6:	2001      	movs	r0, #1
    21a8:	4798      	blx	r3
    21aa:	bd10      	pop	{r4, pc}
    21ac:	20000284 	.word	0x20000284

000021b0 <SERCOM2_Handler>:
    21b0:	b510      	push	{r4, lr}
    21b2:	4b02      	ldr	r3, [pc, #8]	; (21bc <SERCOM2_Handler+0xc>)
    21b4:	689b      	ldr	r3, [r3, #8]
    21b6:	2002      	movs	r0, #2
    21b8:	4798      	blx	r3
    21ba:	bd10      	pop	{r4, pc}
    21bc:	20000284 	.word	0x20000284

000021c0 <SERCOM3_Handler>:
    21c0:	b510      	push	{r4, lr}
    21c2:	4b02      	ldr	r3, [pc, #8]	; (21cc <SERCOM3_Handler+0xc>)
    21c4:	68db      	ldr	r3, [r3, #12]
    21c6:	2003      	movs	r0, #3
    21c8:	4798      	blx	r3
    21ca:	bd10      	pop	{r4, pc}
    21cc:	20000284 	.word	0x20000284

000021d0 <SERCOM4_Handler>:
    21d0:	b510      	push	{r4, lr}
    21d2:	4b02      	ldr	r3, [pc, #8]	; (21dc <SERCOM4_Handler+0xc>)
    21d4:	691b      	ldr	r3, [r3, #16]
    21d6:	2004      	movs	r0, #4
    21d8:	4798      	blx	r3
    21da:	bd10      	pop	{r4, pc}
    21dc:	20000284 	.word	0x20000284

000021e0 <SERCOM5_Handler>:
    21e0:	b510      	push	{r4, lr}
    21e2:	4b02      	ldr	r3, [pc, #8]	; (21ec <SERCOM5_Handler+0xc>)
    21e4:	695b      	ldr	r3, [r3, #20]
    21e6:	2005      	movs	r0, #5
    21e8:	4798      	blx	r3
    21ea:	bd10      	pop	{r4, pc}
    21ec:	20000284 	.word	0x20000284

000021f0 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    21f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    21f2:	46de      	mov	lr, fp
    21f4:	4657      	mov	r7, sl
    21f6:	464e      	mov	r6, r9
    21f8:	4645      	mov	r5, r8
    21fa:	b5e0      	push	{r5, r6, r7, lr}
    21fc:	b091      	sub	sp, #68	; 0x44
    21fe:	0005      	movs	r5, r0
    2200:	000c      	movs	r4, r1
    2202:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    2204:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2206:	0008      	movs	r0, r1
    2208:	4bba      	ldr	r3, [pc, #744]	; (24f4 <usart_init+0x304>)
    220a:	4798      	blx	r3
    220c:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    220e:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    2210:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    2212:	07db      	lsls	r3, r3, #31
    2214:	d506      	bpl.n	2224 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    2216:	b011      	add	sp, #68	; 0x44
    2218:	bc3c      	pop	{r2, r3, r4, r5}
    221a:	4690      	mov	r8, r2
    221c:	4699      	mov	r9, r3
    221e:	46a2      	mov	sl, r4
    2220:	46ab      	mov	fp, r5
    2222:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    2224:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    2226:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    2228:	079b      	lsls	r3, r3, #30
    222a:	d4f4      	bmi.n	2216 <usart_init+0x26>
    222c:	49b2      	ldr	r1, [pc, #712]	; (24f8 <usart_init+0x308>)
    222e:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    2230:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    2232:	2301      	movs	r3, #1
    2234:	40bb      	lsls	r3, r7
    2236:	4303      	orrs	r3, r0
    2238:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    223a:	a90f      	add	r1, sp, #60	; 0x3c
    223c:	272d      	movs	r7, #45	; 0x2d
    223e:	5df3      	ldrb	r3, [r6, r7]
    2240:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2242:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    2244:	b2d3      	uxtb	r3, r2
    2246:	9302      	str	r3, [sp, #8]
    2248:	0018      	movs	r0, r3
    224a:	4bac      	ldr	r3, [pc, #688]	; (24fc <usart_init+0x30c>)
    224c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    224e:	9802      	ldr	r0, [sp, #8]
    2250:	4bab      	ldr	r3, [pc, #684]	; (2500 <usart_init+0x310>)
    2252:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    2254:	5df0      	ldrb	r0, [r6, r7]
    2256:	2100      	movs	r1, #0
    2258:	4baa      	ldr	r3, [pc, #680]	; (2504 <usart_init+0x314>)
    225a:	4798      	blx	r3
	module->character_size = config->character_size;
    225c:	7af3      	ldrb	r3, [r6, #11]
    225e:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    2260:	2324      	movs	r3, #36	; 0x24
    2262:	5cf3      	ldrb	r3, [r6, r3]
    2264:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    2266:	2325      	movs	r3, #37	; 0x25
    2268:	5cf3      	ldrb	r3, [r6, r3]
    226a:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    226c:	7ef3      	ldrb	r3, [r6, #27]
    226e:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    2270:	7f33      	ldrb	r3, [r6, #28]
    2272:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2274:	682b      	ldr	r3, [r5, #0]
    2276:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2278:	0018      	movs	r0, r3
    227a:	4b9e      	ldr	r3, [pc, #632]	; (24f4 <usart_init+0x304>)
    227c:	4798      	blx	r3
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    227e:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    2280:	2200      	movs	r2, #0
    2282:	230e      	movs	r3, #14
    2284:	a906      	add	r1, sp, #24
    2286:	468c      	mov	ip, r1
    2288:	4463      	add	r3, ip
    228a:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    228c:	8a32      	ldrh	r2, [r6, #16]
    228e:	9202      	str	r2, [sp, #8]
    2290:	2380      	movs	r3, #128	; 0x80
    2292:	01db      	lsls	r3, r3, #7
    2294:	429a      	cmp	r2, r3
    2296:	d100      	bne.n	229a <usart_init+0xaa>
    2298:	e09a      	b.n	23d0 <usart_init+0x1e0>
    229a:	d90f      	bls.n	22bc <usart_init+0xcc>
    229c:	23c0      	movs	r3, #192	; 0xc0
    229e:	01db      	lsls	r3, r3, #7
    22a0:	9a02      	ldr	r2, [sp, #8]
    22a2:	429a      	cmp	r2, r3
    22a4:	d100      	bne.n	22a8 <usart_init+0xb8>
    22a6:	e08e      	b.n	23c6 <usart_init+0x1d6>
    22a8:	2380      	movs	r3, #128	; 0x80
    22aa:	021b      	lsls	r3, r3, #8
    22ac:	429a      	cmp	r2, r3
    22ae:	d000      	beq.n	22b2 <usart_init+0xc2>
    22b0:	e11b      	b.n	24ea <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    22b2:	2303      	movs	r3, #3
    22b4:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    22b6:	2300      	movs	r3, #0
    22b8:	9307      	str	r3, [sp, #28]
    22ba:	e008      	b.n	22ce <usart_init+0xde>
	switch (config->sample_rate) {
    22bc:	2380      	movs	r3, #128	; 0x80
    22be:	019b      	lsls	r3, r3, #6
    22c0:	429a      	cmp	r2, r3
    22c2:	d000      	beq.n	22c6 <usart_init+0xd6>
    22c4:	e111      	b.n	24ea <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    22c6:	2310      	movs	r3, #16
    22c8:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    22ca:	3b0f      	subs	r3, #15
    22cc:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    22ce:	6833      	ldr	r3, [r6, #0]
    22d0:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    22d2:	68f3      	ldr	r3, [r6, #12]
    22d4:	469b      	mov	fp, r3
		config->sample_adjustment |
    22d6:	6973      	ldr	r3, [r6, #20]
    22d8:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    22da:	7e33      	ldrb	r3, [r6, #24]
    22dc:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    22de:	2326      	movs	r3, #38	; 0x26
    22e0:	5cf3      	ldrb	r3, [r6, r3]
    22e2:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    22e4:	6873      	ldr	r3, [r6, #4]
    22e6:	4699      	mov	r9, r3
	switch (transfer_mode)
    22e8:	2b00      	cmp	r3, #0
    22ea:	d100      	bne.n	22ee <usart_init+0xfe>
    22ec:	e09c      	b.n	2428 <usart_init+0x238>
    22ee:	2380      	movs	r3, #128	; 0x80
    22f0:	055b      	lsls	r3, r3, #21
    22f2:	4599      	cmp	r9, r3
    22f4:	d100      	bne.n	22f8 <usart_init+0x108>
    22f6:	e080      	b.n	23fa <usart_init+0x20a>
	if(config->encoding_format_enable) {
    22f8:	7e73      	ldrb	r3, [r6, #25]
    22fa:	2b00      	cmp	r3, #0
    22fc:	d002      	beq.n	2304 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    22fe:	7eb3      	ldrb	r3, [r6, #26]
    2300:	4642      	mov	r2, r8
    2302:	7393      	strb	r3, [r2, #14]
	usart_hw->BAUD.reg = baud;
    2304:	230e      	movs	r3, #14
    2306:	aa06      	add	r2, sp, #24
    2308:	4694      	mov	ip, r2
    230a:	4463      	add	r3, ip
    230c:	881b      	ldrh	r3, [r3, #0]
    230e:	4642      	mov	r2, r8
    2310:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    2312:	9b05      	ldr	r3, [sp, #20]
    2314:	465a      	mov	r2, fp
    2316:	4313      	orrs	r3, r2
    2318:	9a03      	ldr	r2, [sp, #12]
    231a:	4313      	orrs	r3, r2
    231c:	464a      	mov	r2, r9
    231e:	4313      	orrs	r3, r2
    2320:	9f02      	ldr	r7, [sp, #8]
    2322:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2324:	9b04      	ldr	r3, [sp, #16]
    2326:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    2328:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    232a:	4653      	mov	r3, sl
    232c:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    232e:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    2330:	2327      	movs	r3, #39	; 0x27
    2332:	5cf3      	ldrb	r3, [r6, r3]
    2334:	2b00      	cmp	r3, #0
    2336:	d101      	bne.n	233c <usart_init+0x14c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    2338:	3304      	adds	r3, #4
    233a:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    233c:	7e73      	ldrb	r3, [r6, #25]
    233e:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    2340:	7f32      	ldrb	r2, [r6, #28]
    2342:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    2344:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    2346:	7f72      	ldrb	r2, [r6, #29]
    2348:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    234a:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    234c:	2224      	movs	r2, #36	; 0x24
    234e:	5cb2      	ldrb	r2, [r6, r2]
    2350:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    2352:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    2354:	2225      	movs	r2, #37	; 0x25
    2356:	5cb2      	ldrb	r2, [r6, r2]
    2358:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    235a:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    235c:	7ab1      	ldrb	r1, [r6, #10]
    235e:	7af2      	ldrb	r2, [r6, #11]
    2360:	4311      	orrs	r1, r2
    2362:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    2364:	8933      	ldrh	r3, [r6, #8]
    2366:	2bff      	cmp	r3, #255	; 0xff
    2368:	d100      	bne.n	236c <usart_init+0x17c>
    236a:	e081      	b.n	2470 <usart_init+0x280>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    236c:	2280      	movs	r2, #128	; 0x80
    236e:	0452      	lsls	r2, r2, #17
    2370:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    2372:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    2374:	232c      	movs	r3, #44	; 0x2c
    2376:	5cf3      	ldrb	r3, [r6, r3]
    2378:	2b00      	cmp	r3, #0
    237a:	d103      	bne.n	2384 <usart_init+0x194>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    237c:	4b62      	ldr	r3, [pc, #392]	; (2508 <usart_init+0x318>)
    237e:	789b      	ldrb	r3, [r3, #2]
    2380:	079b      	lsls	r3, r3, #30
    2382:	d501      	bpl.n	2388 <usart_init+0x198>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    2384:	2380      	movs	r3, #128	; 0x80
    2386:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    2388:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    238a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    238c:	2b00      	cmp	r3, #0
    238e:	d1fc      	bne.n	238a <usart_init+0x19a>
	usart_hw->CTRLB.reg = ctrlb;
    2390:	4643      	mov	r3, r8
    2392:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2394:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2396:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2398:	2b00      	cmp	r3, #0
    239a:	d1fc      	bne.n	2396 <usart_init+0x1a6>
	usart_hw->CTRLA.reg = ctrla;
    239c:	4643      	mov	r3, r8
    239e:	601f      	str	r7, [r3, #0]
    23a0:	ab0e      	add	r3, sp, #56	; 0x38
    23a2:	2280      	movs	r2, #128	; 0x80
    23a4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    23a6:	2200      	movs	r2, #0
    23a8:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    23aa:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    23ac:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    23ae:	6b33      	ldr	r3, [r6, #48]	; 0x30
    23b0:	930a      	str	r3, [sp, #40]	; 0x28
    23b2:	6b73      	ldr	r3, [r6, #52]	; 0x34
    23b4:	930b      	str	r3, [sp, #44]	; 0x2c
    23b6:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    23b8:	930c      	str	r3, [sp, #48]	; 0x30
    23ba:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    23bc:	9302      	str	r3, [sp, #8]
    23be:	930d      	str	r3, [sp, #52]	; 0x34
    23c0:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    23c2:	ae0a      	add	r6, sp, #40	; 0x28
    23c4:	e063      	b.n	248e <usart_init+0x29e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    23c6:	2308      	movs	r3, #8
    23c8:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    23ca:	3b07      	subs	r3, #7
    23cc:	9307      	str	r3, [sp, #28]
    23ce:	e77e      	b.n	22ce <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    23d0:	6833      	ldr	r3, [r6, #0]
    23d2:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    23d4:	68f3      	ldr	r3, [r6, #12]
    23d6:	469b      	mov	fp, r3
		config->sample_adjustment |
    23d8:	6973      	ldr	r3, [r6, #20]
    23da:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    23dc:	7e33      	ldrb	r3, [r6, #24]
    23de:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    23e0:	2326      	movs	r3, #38	; 0x26
    23e2:	5cf3      	ldrb	r3, [r6, r3]
    23e4:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    23e6:	6873      	ldr	r3, [r6, #4]
    23e8:	4699      	mov	r9, r3
	switch (transfer_mode)
    23ea:	2b00      	cmp	r3, #0
    23ec:	d018      	beq.n	2420 <usart_init+0x230>
    23ee:	2380      	movs	r3, #128	; 0x80
    23f0:	055b      	lsls	r3, r3, #21
    23f2:	4599      	cmp	r9, r3
    23f4:	d001      	beq.n	23fa <usart_init+0x20a>
	enum status_code status_code = STATUS_OK;
    23f6:	2000      	movs	r0, #0
    23f8:	e025      	b.n	2446 <usart_init+0x256>
			if (!config->use_external_clock) {
    23fa:	2327      	movs	r3, #39	; 0x27
    23fc:	5cf3      	ldrb	r3, [r6, r3]
    23fe:	2b00      	cmp	r3, #0
    2400:	d000      	beq.n	2404 <usart_init+0x214>
    2402:	e779      	b.n	22f8 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    2404:	6a33      	ldr	r3, [r6, #32]
    2406:	001f      	movs	r7, r3
    2408:	b2c0      	uxtb	r0, r0
    240a:	4b40      	ldr	r3, [pc, #256]	; (250c <usart_init+0x31c>)
    240c:	4798      	blx	r3
    240e:	0001      	movs	r1, r0
    2410:	220e      	movs	r2, #14
    2412:	ab06      	add	r3, sp, #24
    2414:	469c      	mov	ip, r3
    2416:	4462      	add	r2, ip
    2418:	0038      	movs	r0, r7
    241a:	4b3d      	ldr	r3, [pc, #244]	; (2510 <usart_init+0x320>)
    241c:	4798      	blx	r3
    241e:	e012      	b.n	2446 <usart_init+0x256>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    2420:	2308      	movs	r3, #8
    2422:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2424:	2300      	movs	r3, #0
    2426:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    2428:	2327      	movs	r3, #39	; 0x27
    242a:	5cf3      	ldrb	r3, [r6, r3]
    242c:	2b00      	cmp	r3, #0
    242e:	d00e      	beq.n	244e <usart_init+0x25e>
				status_code =
    2430:	9b06      	ldr	r3, [sp, #24]
    2432:	9300      	str	r3, [sp, #0]
    2434:	9b07      	ldr	r3, [sp, #28]
    2436:	220e      	movs	r2, #14
    2438:	a906      	add	r1, sp, #24
    243a:	468c      	mov	ip, r1
    243c:	4462      	add	r2, ip
    243e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    2440:	6a30      	ldr	r0, [r6, #32]
    2442:	4f34      	ldr	r7, [pc, #208]	; (2514 <usart_init+0x324>)
    2444:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    2446:	2800      	cmp	r0, #0
    2448:	d000      	beq.n	244c <usart_init+0x25c>
    244a:	e6e4      	b.n	2216 <usart_init+0x26>
    244c:	e754      	b.n	22f8 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    244e:	6a33      	ldr	r3, [r6, #32]
    2450:	001f      	movs	r7, r3
    2452:	b2c0      	uxtb	r0, r0
    2454:	4b2d      	ldr	r3, [pc, #180]	; (250c <usart_init+0x31c>)
    2456:	4798      	blx	r3
    2458:	0001      	movs	r1, r0
				status_code =
    245a:	9b06      	ldr	r3, [sp, #24]
    245c:	9300      	str	r3, [sp, #0]
    245e:	9b07      	ldr	r3, [sp, #28]
    2460:	220e      	movs	r2, #14
    2462:	a806      	add	r0, sp, #24
    2464:	4684      	mov	ip, r0
    2466:	4462      	add	r2, ip
    2468:	0038      	movs	r0, r7
    246a:	4f2a      	ldr	r7, [pc, #168]	; (2514 <usart_init+0x324>)
    246c:	47b8      	blx	r7
    246e:	e7ea      	b.n	2446 <usart_init+0x256>
		if(config->lin_slave_enable) {
    2470:	7ef3      	ldrb	r3, [r6, #27]
    2472:	2b00      	cmp	r3, #0
    2474:	d100      	bne.n	2478 <usart_init+0x288>
    2476:	e77d      	b.n	2374 <usart_init+0x184>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    2478:	2380      	movs	r3, #128	; 0x80
    247a:	04db      	lsls	r3, r3, #19
    247c:	431f      	orrs	r7, r3
    247e:	e779      	b.n	2374 <usart_init+0x184>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    2480:	0020      	movs	r0, r4
    2482:	4b25      	ldr	r3, [pc, #148]	; (2518 <usart_init+0x328>)
    2484:	4798      	blx	r3
    2486:	e007      	b.n	2498 <usart_init+0x2a8>
    2488:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    248a:	2f04      	cmp	r7, #4
    248c:	d00d      	beq.n	24aa <usart_init+0x2ba>
    248e:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2490:	00bb      	lsls	r3, r7, #2
    2492:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    2494:	2800      	cmp	r0, #0
    2496:	d0f3      	beq.n	2480 <usart_init+0x290>
		if (current_pinmux != PINMUX_UNUSED) {
    2498:	1c43      	adds	r3, r0, #1
    249a:	d0f5      	beq.n	2488 <usart_init+0x298>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    249c:	a90e      	add	r1, sp, #56	; 0x38
    249e:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    24a0:	0c00      	lsrs	r0, r0, #16
    24a2:	b2c0      	uxtb	r0, r0
    24a4:	4b1d      	ldr	r3, [pc, #116]	; (251c <usart_init+0x32c>)
    24a6:	4798      	blx	r3
    24a8:	e7ee      	b.n	2488 <usart_init+0x298>
		module->callback[i]            = NULL;
    24aa:	2300      	movs	r3, #0
    24ac:	60eb      	str	r3, [r5, #12]
    24ae:	612b      	str	r3, [r5, #16]
    24b0:	616b      	str	r3, [r5, #20]
    24b2:	61ab      	str	r3, [r5, #24]
    24b4:	61eb      	str	r3, [r5, #28]
    24b6:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    24b8:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    24ba:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    24bc:	2200      	movs	r2, #0
    24be:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    24c0:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    24c2:	3330      	adds	r3, #48	; 0x30
    24c4:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    24c6:	3301      	adds	r3, #1
    24c8:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    24ca:	3301      	adds	r3, #1
    24cc:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    24ce:	3301      	adds	r3, #1
    24d0:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    24d2:	6828      	ldr	r0, [r5, #0]
    24d4:	4b07      	ldr	r3, [pc, #28]	; (24f4 <usart_init+0x304>)
    24d6:	4798      	blx	r3
    24d8:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    24da:	4911      	ldr	r1, [pc, #68]	; (2520 <usart_init+0x330>)
    24dc:	4b11      	ldr	r3, [pc, #68]	; (2524 <usart_init+0x334>)
    24de:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    24e0:	00a4      	lsls	r4, r4, #2
    24e2:	4b11      	ldr	r3, [pc, #68]	; (2528 <usart_init+0x338>)
    24e4:	50e5      	str	r5, [r4, r3]
	return status_code;
    24e6:	2000      	movs	r0, #0
    24e8:	e695      	b.n	2216 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    24ea:	2310      	movs	r3, #16
    24ec:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    24ee:	2300      	movs	r3, #0
    24f0:	9307      	str	r3, [sp, #28]
    24f2:	e6ec      	b.n	22ce <usart_init+0xde>
    24f4:	000020e9 	.word	0x000020e9
    24f8:	40000400 	.word	0x40000400
    24fc:	00002e1d 	.word	0x00002e1d
    2500:	00002d91 	.word	0x00002d91
    2504:	00001f25 	.word	0x00001f25
    2508:	41002000 	.word	0x41002000
    250c:	00002e39 	.word	0x00002e39
    2510:	00001e67 	.word	0x00001e67
    2514:	00001e91 	.word	0x00001e91
    2518:	00001f71 	.word	0x00001f71
    251c:	00002f15 	.word	0x00002f15
    2520:	00002645 	.word	0x00002645
    2524:	00002125 	.word	0x00002125
    2528:	20000364 	.word	0x20000364

0000252c <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    252c:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    252e:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    2530:	2a00      	cmp	r2, #0
    2532:	d101      	bne.n	2538 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    2534:	0018      	movs	r0, r3
    2536:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    2538:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    253a:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    253c:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    253e:	2a00      	cmp	r2, #0
    2540:	d1f8      	bne.n	2534 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    2542:	6802      	ldr	r2, [r0, #0]
	usart_hw->DATA.reg = tx_data;
    2544:	8511      	strh	r1, [r2, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    2546:	2102      	movs	r1, #2
    2548:	7e13      	ldrb	r3, [r2, #24]
    254a:	420b      	tst	r3, r1
    254c:	d0fc      	beq.n	2548 <usart_write_wait+0x1c>
	return STATUS_OK;
    254e:	2300      	movs	r3, #0
    2550:	e7f0      	b.n	2534 <usart_write_wait+0x8>

00002552 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    2552:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    2554:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    2556:	2a00      	cmp	r2, #0
    2558:	d101      	bne.n	255e <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    255a:	0018      	movs	r0, r3
    255c:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    255e:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    2560:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    2562:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    2564:	2a00      	cmp	r2, #0
    2566:	d1f8      	bne.n	255a <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    2568:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    256a:	7e10      	ldrb	r0, [r2, #24]
    256c:	0740      	lsls	r0, r0, #29
    256e:	d5f4      	bpl.n	255a <usart_read_wait+0x8>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2570:	8b53      	ldrh	r3, [r2, #26]
    2572:	b2db      	uxtb	r3, r3
	if (error_code) {
    2574:	0698      	lsls	r0, r3, #26
    2576:	d01d      	beq.n	25b4 <usart_read_wait+0x62>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    2578:	0798      	lsls	r0, r3, #30
    257a:	d503      	bpl.n	2584 <usart_read_wait+0x32>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    257c:	2302      	movs	r3, #2
    257e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    2580:	3318      	adds	r3, #24
    2582:	e7ea      	b.n	255a <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2584:	0758      	lsls	r0, r3, #29
    2586:	d503      	bpl.n	2590 <usart_read_wait+0x3e>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    2588:	2304      	movs	r3, #4
    258a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    258c:	331a      	adds	r3, #26
    258e:	e7e4      	b.n	255a <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2590:	07d8      	lsls	r0, r3, #31
    2592:	d503      	bpl.n	259c <usart_read_wait+0x4a>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2594:	2301      	movs	r3, #1
    2596:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    2598:	3312      	adds	r3, #18
    259a:	e7de      	b.n	255a <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    259c:	06d8      	lsls	r0, r3, #27
    259e:	d503      	bpl.n	25a8 <usart_read_wait+0x56>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    25a0:	2310      	movs	r3, #16
    25a2:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    25a4:	3332      	adds	r3, #50	; 0x32
    25a6:	e7d8      	b.n	255a <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    25a8:	069b      	lsls	r3, r3, #26
    25aa:	d503      	bpl.n	25b4 <usart_read_wait+0x62>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    25ac:	2320      	movs	r3, #32
    25ae:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    25b0:	3321      	adds	r3, #33	; 0x21
    25b2:	e7d2      	b.n	255a <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    25b4:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    25b6:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    25b8:	2300      	movs	r3, #0
    25ba:	e7ce      	b.n	255a <usart_read_wait+0x8>

000025bc <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    25bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    25be:	0004      	movs	r4, r0
    25c0:	000d      	movs	r5, r1
    25c2:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    25c4:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    25c6:	4b0f      	ldr	r3, [pc, #60]	; (2604 <_usart_read_buffer+0x48>)
    25c8:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    25ca:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    25cc:	b29b      	uxth	r3, r3
    25ce:	2b00      	cmp	r3, #0
    25d0:	d003      	beq.n	25da <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
    25d2:	4b0d      	ldr	r3, [pc, #52]	; (2608 <_usart_read_buffer+0x4c>)
    25d4:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    25d6:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    25d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    25da:	85a6      	strh	r6, [r4, #44]	; 0x2c
    25dc:	4b0a      	ldr	r3, [pc, #40]	; (2608 <_usart_read_buffer+0x4c>)
    25de:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    25e0:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    25e2:	2205      	movs	r2, #5
    25e4:	2332      	movs	r3, #50	; 0x32
    25e6:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    25e8:	3b2e      	subs	r3, #46	; 0x2e
    25ea:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
    25ec:	7a23      	ldrb	r3, [r4, #8]
    25ee:	2b00      	cmp	r3, #0
    25f0:	d001      	beq.n	25f6 <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    25f2:	2320      	movs	r3, #32
    25f4:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
    25f6:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
    25f8:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
    25fa:	2b00      	cmp	r3, #0
    25fc:	d0ec      	beq.n	25d8 <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    25fe:	2308      	movs	r3, #8
    2600:	75bb      	strb	r3, [r7, #22]
    2602:	e7e9      	b.n	25d8 <_usart_read_buffer+0x1c>
    2604:	000017b1 	.word	0x000017b1
    2608:	000017f1 	.word	0x000017f1

0000260c <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    260c:	1c93      	adds	r3, r2, #2
    260e:	009b      	lsls	r3, r3, #2
    2610:	18c3      	adds	r3, r0, r3
    2612:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    2614:	2130      	movs	r1, #48	; 0x30
    2616:	2301      	movs	r3, #1
    2618:	4093      	lsls	r3, r2
    261a:	001a      	movs	r2, r3
    261c:	5c43      	ldrb	r3, [r0, r1]
    261e:	4313      	orrs	r3, r2
    2620:	5443      	strb	r3, [r0, r1]
}
    2622:	4770      	bx	lr

00002624 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    2624:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    2626:	2317      	movs	r3, #23
	if (length == 0) {
    2628:	2a00      	cmp	r2, #0
    262a:	d101      	bne.n	2630 <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
    262c:	0018      	movs	r0, r3
    262e:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
    2630:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
    2632:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
    2634:	2c00      	cmp	r4, #0
    2636:	d0f9      	beq.n	262c <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
    2638:	4b01      	ldr	r3, [pc, #4]	; (2640 <usart_read_buffer_job+0x1c>)
    263a:	4798      	blx	r3
    263c:	0003      	movs	r3, r0
    263e:	e7f5      	b.n	262c <usart_read_buffer_job+0x8>
    2640:	000025bd 	.word	0x000025bd

00002644 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    2644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    2646:	0080      	lsls	r0, r0, #2
    2648:	4b62      	ldr	r3, [pc, #392]	; (27d4 <_usart_interrupt_handler+0x190>)
    264a:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    264c:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    264e:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    2650:	2b00      	cmp	r3, #0
    2652:	d1fc      	bne.n	264e <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    2654:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    2656:	7da6      	ldrb	r6, [r4, #22]
    2658:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    265a:	2330      	movs	r3, #48	; 0x30
    265c:	5ceb      	ldrb	r3, [r5, r3]
    265e:	2231      	movs	r2, #49	; 0x31
    2660:	5caf      	ldrb	r7, [r5, r2]
    2662:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    2664:	07f3      	lsls	r3, r6, #31
    2666:	d522      	bpl.n	26ae <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    2668:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    266a:	b29b      	uxth	r3, r3
    266c:	2b00      	cmp	r3, #0
    266e:	d01c      	beq.n	26aa <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2670:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    2672:	7813      	ldrb	r3, [r2, #0]
    2674:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    2676:	1c51      	adds	r1, r2, #1
    2678:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    267a:	7969      	ldrb	r1, [r5, #5]
    267c:	2901      	cmp	r1, #1
    267e:	d00e      	beq.n	269e <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2680:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    2682:	05db      	lsls	r3, r3, #23
    2684:	0ddb      	lsrs	r3, r3, #23
    2686:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    2688:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    268a:	3b01      	subs	r3, #1
    268c:	b29b      	uxth	r3, r3
    268e:	85eb      	strh	r3, [r5, #46]	; 0x2e
    2690:	2b00      	cmp	r3, #0
    2692:	d10c      	bne.n	26ae <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2694:	3301      	adds	r3, #1
    2696:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    2698:	3301      	adds	r3, #1
    269a:	75a3      	strb	r3, [r4, #22]
    269c:	e007      	b.n	26ae <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    269e:	7851      	ldrb	r1, [r2, #1]
    26a0:	0209      	lsls	r1, r1, #8
    26a2:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    26a4:	3202      	adds	r2, #2
    26a6:	62aa      	str	r2, [r5, #40]	; 0x28
    26a8:	e7eb      	b.n	2682 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    26aa:	2301      	movs	r3, #1
    26ac:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    26ae:	07b3      	lsls	r3, r6, #30
    26b0:	d506      	bpl.n	26c0 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    26b2:	2302      	movs	r3, #2
    26b4:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    26b6:	2200      	movs	r2, #0
    26b8:	3331      	adds	r3, #49	; 0x31
    26ba:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    26bc:	07fb      	lsls	r3, r7, #31
    26be:	d41a      	bmi.n	26f6 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    26c0:	0773      	lsls	r3, r6, #29
    26c2:	d565      	bpl.n	2790 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    26c4:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    26c6:	b29b      	uxth	r3, r3
    26c8:	2b00      	cmp	r3, #0
    26ca:	d05f      	beq.n	278c <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    26cc:	8b63      	ldrh	r3, [r4, #26]
    26ce:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    26d0:	071a      	lsls	r2, r3, #28
    26d2:	d414      	bmi.n	26fe <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    26d4:	223f      	movs	r2, #63	; 0x3f
    26d6:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    26d8:	2b00      	cmp	r3, #0
    26da:	d034      	beq.n	2746 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    26dc:	079a      	lsls	r2, r3, #30
    26de:	d511      	bpl.n	2704 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    26e0:	221a      	movs	r2, #26
    26e2:	2332      	movs	r3, #50	; 0x32
    26e4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    26e6:	3b30      	subs	r3, #48	; 0x30
    26e8:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    26ea:	077b      	lsls	r3, r7, #29
    26ec:	d550      	bpl.n	2790 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    26ee:	0028      	movs	r0, r5
    26f0:	696b      	ldr	r3, [r5, #20]
    26f2:	4798      	blx	r3
    26f4:	e04c      	b.n	2790 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    26f6:	0028      	movs	r0, r5
    26f8:	68eb      	ldr	r3, [r5, #12]
    26fa:	4798      	blx	r3
    26fc:	e7e0      	b.n	26c0 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    26fe:	2237      	movs	r2, #55	; 0x37
    2700:	4013      	ands	r3, r2
    2702:	e7e9      	b.n	26d8 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2704:	075a      	lsls	r2, r3, #29
    2706:	d505      	bpl.n	2714 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    2708:	221e      	movs	r2, #30
    270a:	2332      	movs	r3, #50	; 0x32
    270c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    270e:	3b2e      	subs	r3, #46	; 0x2e
    2710:	8363      	strh	r3, [r4, #26]
    2712:	e7ea      	b.n	26ea <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2714:	07da      	lsls	r2, r3, #31
    2716:	d505      	bpl.n	2724 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    2718:	2213      	movs	r2, #19
    271a:	2332      	movs	r3, #50	; 0x32
    271c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    271e:	3b31      	subs	r3, #49	; 0x31
    2720:	8363      	strh	r3, [r4, #26]
    2722:	e7e2      	b.n	26ea <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    2724:	06da      	lsls	r2, r3, #27
    2726:	d505      	bpl.n	2734 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    2728:	2242      	movs	r2, #66	; 0x42
    272a:	2332      	movs	r3, #50	; 0x32
    272c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    272e:	3b22      	subs	r3, #34	; 0x22
    2730:	8363      	strh	r3, [r4, #26]
    2732:	e7da      	b.n	26ea <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    2734:	2220      	movs	r2, #32
    2736:	421a      	tst	r2, r3
    2738:	d0d7      	beq.n	26ea <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    273a:	3221      	adds	r2, #33	; 0x21
    273c:	2332      	movs	r3, #50	; 0x32
    273e:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2740:	3b12      	subs	r3, #18
    2742:	8363      	strh	r3, [r4, #26]
    2744:	e7d1      	b.n	26ea <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    2746:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    2748:	05db      	lsls	r3, r3, #23
    274a:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    274c:	b2da      	uxtb	r2, r3
    274e:	6a69      	ldr	r1, [r5, #36]	; 0x24
    2750:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    2752:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    2754:	1c51      	adds	r1, r2, #1
    2756:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2758:	7969      	ldrb	r1, [r5, #5]
    275a:	2901      	cmp	r1, #1
    275c:	d010      	beq.n	2780 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    275e:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2760:	3b01      	subs	r3, #1
    2762:	b29b      	uxth	r3, r3
    2764:	85ab      	strh	r3, [r5, #44]	; 0x2c
    2766:	2b00      	cmp	r3, #0
    2768:	d112      	bne.n	2790 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    276a:	3304      	adds	r3, #4
    276c:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    276e:	2200      	movs	r2, #0
    2770:	332e      	adds	r3, #46	; 0x2e
    2772:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    2774:	07bb      	lsls	r3, r7, #30
    2776:	d50b      	bpl.n	2790 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    2778:	0028      	movs	r0, r5
    277a:	692b      	ldr	r3, [r5, #16]
    277c:	4798      	blx	r3
    277e:	e007      	b.n	2790 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    2780:	0a1b      	lsrs	r3, r3, #8
    2782:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    2784:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    2786:	3301      	adds	r3, #1
    2788:	626b      	str	r3, [r5, #36]	; 0x24
    278a:	e7e8      	b.n	275e <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    278c:	2304      	movs	r3, #4
    278e:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    2790:	06f3      	lsls	r3, r6, #27
    2792:	d504      	bpl.n	279e <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    2794:	2310      	movs	r3, #16
    2796:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    2798:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    279a:	06fb      	lsls	r3, r7, #27
    279c:	d40e      	bmi.n	27bc <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    279e:	06b3      	lsls	r3, r6, #26
    27a0:	d504      	bpl.n	27ac <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    27a2:	2320      	movs	r3, #32
    27a4:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    27a6:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    27a8:	073b      	lsls	r3, r7, #28
    27aa:	d40b      	bmi.n	27c4 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    27ac:	0733      	lsls	r3, r6, #28
    27ae:	d504      	bpl.n	27ba <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    27b0:	2308      	movs	r3, #8
    27b2:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    27b4:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    27b6:	06bb      	lsls	r3, r7, #26
    27b8:	d408      	bmi.n	27cc <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    27ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    27bc:	0028      	movs	r0, r5
    27be:	69eb      	ldr	r3, [r5, #28]
    27c0:	4798      	blx	r3
    27c2:	e7ec      	b.n	279e <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    27c4:	0028      	movs	r0, r5
    27c6:	69ab      	ldr	r3, [r5, #24]
    27c8:	4798      	blx	r3
    27ca:	e7ef      	b.n	27ac <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    27cc:	6a2b      	ldr	r3, [r5, #32]
    27ce:	0028      	movs	r0, r5
    27d0:	4798      	blx	r3
}
    27d2:	e7f2      	b.n	27ba <_usart_interrupt_handler+0x176>
    27d4:	20000364 	.word	0x20000364

000027d8 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    27d8:	b510      	push	{r4, lr}
	switch (clock_source) {
    27da:	2808      	cmp	r0, #8
    27dc:	d803      	bhi.n	27e6 <system_clock_source_get_hz+0xe>
    27de:	0080      	lsls	r0, r0, #2
    27e0:	4b1c      	ldr	r3, [pc, #112]	; (2854 <system_clock_source_get_hz+0x7c>)
    27e2:	581b      	ldr	r3, [r3, r0]
    27e4:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    27e6:	2000      	movs	r0, #0
    27e8:	e032      	b.n	2850 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    27ea:	4b1b      	ldr	r3, [pc, #108]	; (2858 <system_clock_source_get_hz+0x80>)
    27ec:	6918      	ldr	r0, [r3, #16]
    27ee:	e02f      	b.n	2850 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    27f0:	4b1a      	ldr	r3, [pc, #104]	; (285c <system_clock_source_get_hz+0x84>)
    27f2:	6a1b      	ldr	r3, [r3, #32]
    27f4:	059b      	lsls	r3, r3, #22
    27f6:	0f9b      	lsrs	r3, r3, #30
    27f8:	4819      	ldr	r0, [pc, #100]	; (2860 <system_clock_source_get_hz+0x88>)
    27fa:	40d8      	lsrs	r0, r3
    27fc:	e028      	b.n	2850 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    27fe:	4b16      	ldr	r3, [pc, #88]	; (2858 <system_clock_source_get_hz+0x80>)
    2800:	6958      	ldr	r0, [r3, #20]
    2802:	e025      	b.n	2850 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2804:	4b14      	ldr	r3, [pc, #80]	; (2858 <system_clock_source_get_hz+0x80>)
    2806:	681b      	ldr	r3, [r3, #0]
			return 0;
    2808:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    280a:	079b      	lsls	r3, r3, #30
    280c:	d520      	bpl.n	2850 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    280e:	4913      	ldr	r1, [pc, #76]	; (285c <system_clock_source_get_hz+0x84>)
    2810:	2210      	movs	r2, #16
    2812:	68cb      	ldr	r3, [r1, #12]
    2814:	421a      	tst	r2, r3
    2816:	d0fc      	beq.n	2812 <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    2818:	4b0f      	ldr	r3, [pc, #60]	; (2858 <system_clock_source_get_hz+0x80>)
    281a:	681a      	ldr	r2, [r3, #0]
    281c:	2324      	movs	r3, #36	; 0x24
    281e:	4013      	ands	r3, r2
    2820:	2b04      	cmp	r3, #4
    2822:	d001      	beq.n	2828 <system_clock_source_get_hz+0x50>
			return 48000000UL;
    2824:	480f      	ldr	r0, [pc, #60]	; (2864 <system_clock_source_get_hz+0x8c>)
    2826:	e013      	b.n	2850 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2828:	2000      	movs	r0, #0
    282a:	4b0f      	ldr	r3, [pc, #60]	; (2868 <system_clock_source_get_hz+0x90>)
    282c:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    282e:	4b0a      	ldr	r3, [pc, #40]	; (2858 <system_clock_source_get_hz+0x80>)
    2830:	689b      	ldr	r3, [r3, #8]
    2832:	041b      	lsls	r3, r3, #16
    2834:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2836:	4358      	muls	r0, r3
    2838:	e00a      	b.n	2850 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    283a:	2350      	movs	r3, #80	; 0x50
    283c:	4a07      	ldr	r2, [pc, #28]	; (285c <system_clock_source_get_hz+0x84>)
    283e:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    2840:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2842:	075b      	lsls	r3, r3, #29
    2844:	d504      	bpl.n	2850 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    2846:	4b04      	ldr	r3, [pc, #16]	; (2858 <system_clock_source_get_hz+0x80>)
    2848:	68d8      	ldr	r0, [r3, #12]
    284a:	e001      	b.n	2850 <system_clock_source_get_hz+0x78>
		return 32768UL;
    284c:	2080      	movs	r0, #128	; 0x80
    284e:	0200      	lsls	r0, r0, #8
	}
}
    2850:	bd10      	pop	{r4, pc}
    2852:	46c0      	nop			; (mov r8, r8)
    2854:	00006144 	.word	0x00006144
    2858:	2000029c 	.word	0x2000029c
    285c:	40000800 	.word	0x40000800
    2860:	007a1200 	.word	0x007a1200
    2864:	02dc6c00 	.word	0x02dc6c00
    2868:	00002e39 	.word	0x00002e39

0000286c <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    286c:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    286e:	490c      	ldr	r1, [pc, #48]	; (28a0 <system_clock_source_osc8m_set_config+0x34>)
    2870:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    2872:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    2874:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    2876:	7840      	ldrb	r0, [r0, #1]
    2878:	2201      	movs	r2, #1
    287a:	4010      	ands	r0, r2
    287c:	0180      	lsls	r0, r0, #6
    287e:	2640      	movs	r6, #64	; 0x40
    2880:	43b3      	bics	r3, r6
    2882:	4303      	orrs	r3, r0
    2884:	402a      	ands	r2, r5
    2886:	01d2      	lsls	r2, r2, #7
    2888:	2080      	movs	r0, #128	; 0x80
    288a:	4383      	bics	r3, r0
    288c:	4313      	orrs	r3, r2
    288e:	2203      	movs	r2, #3
    2890:	4022      	ands	r2, r4
    2892:	0212      	lsls	r2, r2, #8
    2894:	4803      	ldr	r0, [pc, #12]	; (28a4 <system_clock_source_osc8m_set_config+0x38>)
    2896:	4003      	ands	r3, r0
    2898:	4313      	orrs	r3, r2
    289a:	620b      	str	r3, [r1, #32]
}
    289c:	bd70      	pop	{r4, r5, r6, pc}
    289e:	46c0      	nop			; (mov r8, r8)
    28a0:	40000800 	.word	0x40000800
    28a4:	fffffcff 	.word	0xfffffcff

000028a8 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    28a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    28aa:	46de      	mov	lr, fp
    28ac:	4657      	mov	r7, sl
    28ae:	464e      	mov	r6, r9
    28b0:	4645      	mov	r5, r8
    28b2:	b5e0      	push	{r5, r6, r7, lr}
    28b4:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    28b6:	4b26      	ldr	r3, [pc, #152]	; (2950 <system_clock_source_xosc32k_set_config+0xa8>)
    28b8:	469b      	mov	fp, r3
    28ba:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    28bc:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    28be:	7800      	ldrb	r0, [r0, #0]
    28c0:	4242      	negs	r2, r0
    28c2:	4142      	adcs	r2, r0
    28c4:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    28c6:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    28c8:	78ca      	ldrb	r2, [r1, #3]
    28ca:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    28cc:	790a      	ldrb	r2, [r1, #4]
    28ce:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    28d0:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    28d2:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    28d4:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    28d6:	688a      	ldr	r2, [r1, #8]
    28d8:	491e      	ldr	r1, [pc, #120]	; (2954 <system_clock_source_xosc32k_set_config+0xac>)
    28da:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    28dc:	2101      	movs	r1, #1
    28de:	464a      	mov	r2, r9
    28e0:	0092      	lsls	r2, r2, #2
    28e2:	4691      	mov	r9, r2
    28e4:	2204      	movs	r2, #4
    28e6:	4393      	bics	r3, r2
    28e8:	464a      	mov	r2, r9
    28ea:	4313      	orrs	r3, r2
    28ec:	4642      	mov	r2, r8
    28ee:	400a      	ands	r2, r1
    28f0:	00d2      	lsls	r2, r2, #3
    28f2:	4690      	mov	r8, r2
    28f4:	2208      	movs	r2, #8
    28f6:	4393      	bics	r3, r2
    28f8:	4642      	mov	r2, r8
    28fa:	4313      	orrs	r3, r2
    28fc:	4662      	mov	r2, ip
    28fe:	400a      	ands	r2, r1
    2900:	0112      	lsls	r2, r2, #4
    2902:	4694      	mov	ip, r2
    2904:	2210      	movs	r2, #16
    2906:	4393      	bics	r3, r2
    2908:	4662      	mov	r2, ip
    290a:	4313      	orrs	r3, r2
    290c:	4008      	ands	r0, r1
    290e:	0140      	lsls	r0, r0, #5
    2910:	2220      	movs	r2, #32
    2912:	4393      	bics	r3, r2
    2914:	4303      	orrs	r3, r0
    2916:	400f      	ands	r7, r1
    2918:	01bf      	lsls	r7, r7, #6
    291a:	2040      	movs	r0, #64	; 0x40
    291c:	4383      	bics	r3, r0
    291e:	433b      	orrs	r3, r7
    2920:	400e      	ands	r6, r1
    2922:	01f6      	lsls	r6, r6, #7
    2924:	3040      	adds	r0, #64	; 0x40
    2926:	4383      	bics	r3, r0
    2928:	4333      	orrs	r3, r6
    292a:	3879      	subs	r0, #121	; 0x79
    292c:	4005      	ands	r5, r0
    292e:	022d      	lsls	r5, r5, #8
    2930:	4809      	ldr	r0, [pc, #36]	; (2958 <system_clock_source_xosc32k_set_config+0xb0>)
    2932:	4003      	ands	r3, r0
    2934:	432b      	orrs	r3, r5
    2936:	4021      	ands	r1, r4
    2938:	0309      	lsls	r1, r1, #12
    293a:	4808      	ldr	r0, [pc, #32]	; (295c <system_clock_source_xosc32k_set_config+0xb4>)
    293c:	4003      	ands	r3, r0
    293e:	430b      	orrs	r3, r1
    2940:	465a      	mov	r2, fp
    2942:	8293      	strh	r3, [r2, #20]
}
    2944:	bc3c      	pop	{r2, r3, r4, r5}
    2946:	4690      	mov	r8, r2
    2948:	4699      	mov	r9, r3
    294a:	46a2      	mov	sl, r4
    294c:	46ab      	mov	fp, r5
    294e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2950:	40000800 	.word	0x40000800
    2954:	2000029c 	.word	0x2000029c
    2958:	fffff8ff 	.word	0xfffff8ff
    295c:	ffffefff 	.word	0xffffefff

00002960 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    2960:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    2962:	7a03      	ldrb	r3, [r0, #8]
    2964:	069b      	lsls	r3, r3, #26
    2966:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    2968:	8942      	ldrh	r2, [r0, #10]
    296a:	0592      	lsls	r2, r2, #22
    296c:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    296e:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    2970:	4918      	ldr	r1, [pc, #96]	; (29d4 <system_clock_source_dfll_set_config+0x74>)
    2972:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    2974:	7983      	ldrb	r3, [r0, #6]
    2976:	79c2      	ldrb	r2, [r0, #7]
    2978:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    297a:	8842      	ldrh	r2, [r0, #2]
    297c:	8884      	ldrh	r4, [r0, #4]
    297e:	4322      	orrs	r2, r4
    2980:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    2982:	7842      	ldrb	r2, [r0, #1]
    2984:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    2986:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    2988:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    298a:	7803      	ldrb	r3, [r0, #0]
    298c:	2b04      	cmp	r3, #4
    298e:	d011      	beq.n	29b4 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    2990:	2b20      	cmp	r3, #32
    2992:	d10e      	bne.n	29b2 <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2994:	7b03      	ldrb	r3, [r0, #12]
    2996:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    2998:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    299a:	4313      	orrs	r3, r2
    299c:	89c2      	ldrh	r2, [r0, #14]
    299e:	0412      	lsls	r2, r2, #16
    29a0:	490d      	ldr	r1, [pc, #52]	; (29d8 <system_clock_source_dfll_set_config+0x78>)
    29a2:	400a      	ands	r2, r1
    29a4:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    29a6:	4a0b      	ldr	r2, [pc, #44]	; (29d4 <system_clock_source_dfll_set_config+0x74>)
    29a8:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    29aa:	6811      	ldr	r1, [r2, #0]
    29ac:	4b0b      	ldr	r3, [pc, #44]	; (29dc <system_clock_source_dfll_set_config+0x7c>)
    29ae:	430b      	orrs	r3, r1
    29b0:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    29b2:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    29b4:	7b03      	ldrb	r3, [r0, #12]
    29b6:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    29b8:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    29ba:	4313      	orrs	r3, r2
    29bc:	89c2      	ldrh	r2, [r0, #14]
    29be:	0412      	lsls	r2, r2, #16
    29c0:	4905      	ldr	r1, [pc, #20]	; (29d8 <system_clock_source_dfll_set_config+0x78>)
    29c2:	400a      	ands	r2, r1
    29c4:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    29c6:	4a03      	ldr	r2, [pc, #12]	; (29d4 <system_clock_source_dfll_set_config+0x74>)
    29c8:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    29ca:	6813      	ldr	r3, [r2, #0]
    29cc:	2104      	movs	r1, #4
    29ce:	430b      	orrs	r3, r1
    29d0:	6013      	str	r3, [r2, #0]
    29d2:	e7ee      	b.n	29b2 <system_clock_source_dfll_set_config+0x52>
    29d4:	2000029c 	.word	0x2000029c
    29d8:	03ff0000 	.word	0x03ff0000
    29dc:	00000424 	.word	0x00000424

000029e0 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    29e0:	2808      	cmp	r0, #8
    29e2:	d803      	bhi.n	29ec <system_clock_source_enable+0xc>
    29e4:	0080      	lsls	r0, r0, #2
    29e6:	4b25      	ldr	r3, [pc, #148]	; (2a7c <system_clock_source_enable+0x9c>)
    29e8:	581b      	ldr	r3, [r3, r0]
    29ea:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    29ec:	2017      	movs	r0, #23
    29ee:	e044      	b.n	2a7a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    29f0:	4a23      	ldr	r2, [pc, #140]	; (2a80 <system_clock_source_enable+0xa0>)
    29f2:	6a13      	ldr	r3, [r2, #32]
    29f4:	2102      	movs	r1, #2
    29f6:	430b      	orrs	r3, r1
    29f8:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    29fa:	2000      	movs	r0, #0
    29fc:	e03d      	b.n	2a7a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    29fe:	4a20      	ldr	r2, [pc, #128]	; (2a80 <system_clock_source_enable+0xa0>)
    2a00:	6993      	ldr	r3, [r2, #24]
    2a02:	2102      	movs	r1, #2
    2a04:	430b      	orrs	r3, r1
    2a06:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    2a08:	2000      	movs	r0, #0
		break;
    2a0a:	e036      	b.n	2a7a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    2a0c:	4a1c      	ldr	r2, [pc, #112]	; (2a80 <system_clock_source_enable+0xa0>)
    2a0e:	8a13      	ldrh	r3, [r2, #16]
    2a10:	2102      	movs	r1, #2
    2a12:	430b      	orrs	r3, r1
    2a14:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    2a16:	2000      	movs	r0, #0
		break;
    2a18:	e02f      	b.n	2a7a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    2a1a:	4a19      	ldr	r2, [pc, #100]	; (2a80 <system_clock_source_enable+0xa0>)
    2a1c:	8a93      	ldrh	r3, [r2, #20]
    2a1e:	2102      	movs	r1, #2
    2a20:	430b      	orrs	r3, r1
    2a22:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    2a24:	2000      	movs	r0, #0
		break;
    2a26:	e028      	b.n	2a7a <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    2a28:	4916      	ldr	r1, [pc, #88]	; (2a84 <system_clock_source_enable+0xa4>)
    2a2a:	680b      	ldr	r3, [r1, #0]
    2a2c:	2202      	movs	r2, #2
    2a2e:	4313      	orrs	r3, r2
    2a30:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    2a32:	4b13      	ldr	r3, [pc, #76]	; (2a80 <system_clock_source_enable+0xa0>)
    2a34:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2a36:	0019      	movs	r1, r3
    2a38:	320e      	adds	r2, #14
    2a3a:	68cb      	ldr	r3, [r1, #12]
    2a3c:	421a      	tst	r2, r3
    2a3e:	d0fc      	beq.n	2a3a <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    2a40:	4a10      	ldr	r2, [pc, #64]	; (2a84 <system_clock_source_enable+0xa4>)
    2a42:	6891      	ldr	r1, [r2, #8]
    2a44:	4b0e      	ldr	r3, [pc, #56]	; (2a80 <system_clock_source_enable+0xa0>)
    2a46:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    2a48:	6852      	ldr	r2, [r2, #4]
    2a4a:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    2a4c:	2200      	movs	r2, #0
    2a4e:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2a50:	0019      	movs	r1, r3
    2a52:	3210      	adds	r2, #16
    2a54:	68cb      	ldr	r3, [r1, #12]
    2a56:	421a      	tst	r2, r3
    2a58:	d0fc      	beq.n	2a54 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    2a5a:	4b0a      	ldr	r3, [pc, #40]	; (2a84 <system_clock_source_enable+0xa4>)
    2a5c:	681b      	ldr	r3, [r3, #0]
    2a5e:	b29b      	uxth	r3, r3
    2a60:	4a07      	ldr	r2, [pc, #28]	; (2a80 <system_clock_source_enable+0xa0>)
    2a62:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    2a64:	2000      	movs	r0, #0
    2a66:	e008      	b.n	2a7a <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    2a68:	4905      	ldr	r1, [pc, #20]	; (2a80 <system_clock_source_enable+0xa0>)
    2a6a:	2244      	movs	r2, #68	; 0x44
    2a6c:	5c8b      	ldrb	r3, [r1, r2]
    2a6e:	2002      	movs	r0, #2
    2a70:	4303      	orrs	r3, r0
    2a72:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    2a74:	2000      	movs	r0, #0
		break;
    2a76:	e000      	b.n	2a7a <system_clock_source_enable+0x9a>
		return STATUS_OK;
    2a78:	2000      	movs	r0, #0
}
    2a7a:	4770      	bx	lr
    2a7c:	00006168 	.word	0x00006168
    2a80:	40000800 	.word	0x40000800
    2a84:	2000029c 	.word	0x2000029c

00002a88 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    2a88:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a8a:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    2a8c:	22c2      	movs	r2, #194	; 0xc2
    2a8e:	00d2      	lsls	r2, r2, #3
    2a90:	4b47      	ldr	r3, [pc, #284]	; (2bb0 <system_clock_init+0x128>)
    2a92:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    2a94:	4947      	ldr	r1, [pc, #284]	; (2bb4 <system_clock_init+0x12c>)
    2a96:	684b      	ldr	r3, [r1, #4]
    2a98:	221e      	movs	r2, #30
    2a9a:	4393      	bics	r3, r2
    2a9c:	3a1c      	subs	r2, #28
    2a9e:	4313      	orrs	r3, r2
    2aa0:	604b      	str	r3, [r1, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    2aa2:	ab01      	add	r3, sp, #4
    2aa4:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2aa6:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    2aa8:	4d43      	ldr	r5, [pc, #268]	; (2bb8 <system_clock_init+0x130>)
    2aaa:	b2e0      	uxtb	r0, r4
    2aac:	a901      	add	r1, sp, #4
    2aae:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2ab0:	3401      	adds	r4, #1
    2ab2:	2c25      	cmp	r4, #37	; 0x25
    2ab4:	d1f9      	bne.n	2aaa <system_clock_init+0x22>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    2ab6:	a80a      	add	r0, sp, #40	; 0x28
    2ab8:	2300      	movs	r3, #0
    2aba:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    2abc:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    2abe:	2280      	movs	r2, #128	; 0x80
    2ac0:	0212      	lsls	r2, r2, #8
    2ac2:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    2ac4:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    2ac6:	2201      	movs	r2, #1
    2ac8:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    2aca:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    2acc:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    2ace:	3205      	adds	r2, #5
    2ad0:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    2ad2:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    2ad4:	4b39      	ldr	r3, [pc, #228]	; (2bbc <system_clock_init+0x134>)
    2ad6:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    2ad8:	2005      	movs	r0, #5
    2ada:	4b39      	ldr	r3, [pc, #228]	; (2bc0 <system_clock_init+0x138>)
    2adc:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    2ade:	4934      	ldr	r1, [pc, #208]	; (2bb0 <system_clock_init+0x128>)
    2ae0:	2202      	movs	r2, #2
    2ae2:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    2ae4:	421a      	tst	r2, r3
    2ae6:	d0fc      	beq.n	2ae2 <system_clock_init+0x5a>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    2ae8:	4a31      	ldr	r2, [pc, #196]	; (2bb0 <system_clock_init+0x128>)
    2aea:	8a93      	ldrh	r3, [r2, #20]
    2aec:	2180      	movs	r1, #128	; 0x80
    2aee:	430b      	orrs	r3, r1
    2af0:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    2af2:	ab05      	add	r3, sp, #20
    2af4:	2100      	movs	r1, #0
    2af6:	2200      	movs	r2, #0
    2af8:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    2afa:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    2afc:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    2afe:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    2b00:	313f      	adds	r1, #63	; 0x3f
    2b02:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    2b04:	393b      	subs	r1, #59	; 0x3b
    2b06:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    2b08:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    2b0a:	4b2e      	ldr	r3, [pc, #184]	; (2bc4 <system_clock_init+0x13c>)
    2b0c:	681b      	ldr	r3, [r3, #0]
    2b0e:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    2b10:	2b3f      	cmp	r3, #63	; 0x3f
    2b12:	d04b      	beq.n	2bac <system_clock_init+0x124>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    2b14:	a805      	add	r0, sp, #20
    2b16:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    2b18:	23b7      	movs	r3, #183	; 0xb7
    2b1a:	00db      	lsls	r3, r3, #3
    2b1c:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    2b1e:	2307      	movs	r3, #7
    2b20:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    2b22:	3338      	adds	r3, #56	; 0x38
    2b24:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    2b26:	4b28      	ldr	r3, [pc, #160]	; (2bc8 <system_clock_init+0x140>)
    2b28:	4798      	blx	r3
	config->run_in_standby  = false;
    2b2a:	a804      	add	r0, sp, #16
    2b2c:	2500      	movs	r5, #0
    2b2e:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    2b30:	2601      	movs	r6, #1
    2b32:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    2b34:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    2b36:	4b25      	ldr	r3, [pc, #148]	; (2bcc <system_clock_init+0x144>)
    2b38:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    2b3a:	2006      	movs	r0, #6
    2b3c:	4f20      	ldr	r7, [pc, #128]	; (2bc0 <system_clock_init+0x138>)
    2b3e:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    2b40:	4b23      	ldr	r3, [pc, #140]	; (2bd0 <system_clock_init+0x148>)
    2b42:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    2b44:	ac01      	add	r4, sp, #4
    2b46:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    2b48:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    2b4a:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    2b4c:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    2b4e:	2305      	movs	r3, #5
    2b50:	7023      	strb	r3, [r4, #0]
    2b52:	0021      	movs	r1, r4
    2b54:	2001      	movs	r0, #1
    2b56:	4b1f      	ldr	r3, [pc, #124]	; (2bd4 <system_clock_init+0x14c>)
    2b58:	4798      	blx	r3
    2b5a:	2001      	movs	r0, #1
    2b5c:	4b1e      	ldr	r3, [pc, #120]	; (2bd8 <system_clock_init+0x150>)
    2b5e:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    2b60:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    2b62:	0021      	movs	r1, r4
    2b64:	2000      	movs	r0, #0
    2b66:	4b14      	ldr	r3, [pc, #80]	; (2bb8 <system_clock_init+0x130>)
    2b68:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    2b6a:	2000      	movs	r0, #0
    2b6c:	4b1b      	ldr	r3, [pc, #108]	; (2bdc <system_clock_init+0x154>)
    2b6e:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    2b70:	2007      	movs	r0, #7
    2b72:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    2b74:	490e      	ldr	r1, [pc, #56]	; (2bb0 <system_clock_init+0x128>)
    2b76:	22d0      	movs	r2, #208	; 0xd0
    2b78:	68cb      	ldr	r3, [r1, #12]
    2b7a:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    2b7c:	2bd0      	cmp	r3, #208	; 0xd0
    2b7e:	d1fb      	bne.n	2b78 <system_clock_init+0xf0>
	PM->CPUSEL.reg = (uint32_t)divider;
    2b80:	4a17      	ldr	r2, [pc, #92]	; (2be0 <system_clock_init+0x158>)
    2b82:	2300      	movs	r3, #0
    2b84:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    2b86:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    2b88:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    2b8a:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    2b8c:	a901      	add	r1, sp, #4
    2b8e:	2201      	movs	r2, #1
    2b90:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    2b92:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    2b94:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    2b96:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    2b98:	3307      	adds	r3, #7
    2b9a:	700b      	strb	r3, [r1, #0]
    2b9c:	2000      	movs	r0, #0
    2b9e:	4b0d      	ldr	r3, [pc, #52]	; (2bd4 <system_clock_init+0x14c>)
    2ba0:	4798      	blx	r3
    2ba2:	2000      	movs	r0, #0
    2ba4:	4b0c      	ldr	r3, [pc, #48]	; (2bd8 <system_clock_init+0x150>)
    2ba6:	4798      	blx	r3
#endif
}
    2ba8:	b00f      	add	sp, #60	; 0x3c
    2baa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    2bac:	3b20      	subs	r3, #32
    2bae:	e7b1      	b.n	2b14 <system_clock_init+0x8c>
    2bb0:	40000800 	.word	0x40000800
    2bb4:	41004000 	.word	0x41004000
    2bb8:	00002e1d 	.word	0x00002e1d
    2bbc:	000028a9 	.word	0x000028a9
    2bc0:	000029e1 	.word	0x000029e1
    2bc4:	00806024 	.word	0x00806024
    2bc8:	00002961 	.word	0x00002961
    2bcc:	0000286d 	.word	0x0000286d
    2bd0:	00002be5 	.word	0x00002be5
    2bd4:	00002c09 	.word	0x00002c09
    2bd8:	00002cc1 	.word	0x00002cc1
    2bdc:	00002d91 	.word	0x00002d91
    2be0:	40000400 	.word	0x40000400

00002be4 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    2be4:	4a06      	ldr	r2, [pc, #24]	; (2c00 <system_gclk_init+0x1c>)
    2be6:	6993      	ldr	r3, [r2, #24]
    2be8:	2108      	movs	r1, #8
    2bea:	430b      	orrs	r3, r1
    2bec:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    2bee:	2201      	movs	r2, #1
    2bf0:	4b04      	ldr	r3, [pc, #16]	; (2c04 <system_gclk_init+0x20>)
    2bf2:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    2bf4:	0019      	movs	r1, r3
    2bf6:	780b      	ldrb	r3, [r1, #0]
    2bf8:	4213      	tst	r3, r2
    2bfa:	d1fc      	bne.n	2bf6 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    2bfc:	4770      	bx	lr
    2bfe:	46c0      	nop			; (mov r8, r8)
    2c00:	40000400 	.word	0x40000400
    2c04:	40000c00 	.word	0x40000c00

00002c08 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    2c08:	b570      	push	{r4, r5, r6, lr}
    2c0a:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    2c0c:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    2c0e:	780d      	ldrb	r5, [r1, #0]
    2c10:	022d      	lsls	r5, r5, #8
    2c12:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    2c14:	784b      	ldrb	r3, [r1, #1]
    2c16:	2b00      	cmp	r3, #0
    2c18:	d002      	beq.n	2c20 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    2c1a:	2380      	movs	r3, #128	; 0x80
    2c1c:	02db      	lsls	r3, r3, #11
    2c1e:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    2c20:	7a4b      	ldrb	r3, [r1, #9]
    2c22:	2b00      	cmp	r3, #0
    2c24:	d002      	beq.n	2c2c <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    2c26:	2380      	movs	r3, #128	; 0x80
    2c28:	031b      	lsls	r3, r3, #12
    2c2a:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    2c2c:	6848      	ldr	r0, [r1, #4]
    2c2e:	2801      	cmp	r0, #1
    2c30:	d910      	bls.n	2c54 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    2c32:	1e43      	subs	r3, r0, #1
    2c34:	4218      	tst	r0, r3
    2c36:	d134      	bne.n	2ca2 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    2c38:	2802      	cmp	r0, #2
    2c3a:	d930      	bls.n	2c9e <system_gclk_gen_set_config+0x96>
    2c3c:	2302      	movs	r3, #2
    2c3e:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    2c40:	3201      	adds	r2, #1
						mask <<= 1) {
    2c42:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    2c44:	4298      	cmp	r0, r3
    2c46:	d8fb      	bhi.n	2c40 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    2c48:	0212      	lsls	r2, r2, #8
    2c4a:	4332      	orrs	r2, r6
    2c4c:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    2c4e:	2380      	movs	r3, #128	; 0x80
    2c50:	035b      	lsls	r3, r3, #13
    2c52:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    2c54:	7a0b      	ldrb	r3, [r1, #8]
    2c56:	2b00      	cmp	r3, #0
    2c58:	d002      	beq.n	2c60 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    2c5a:	2380      	movs	r3, #128	; 0x80
    2c5c:	039b      	lsls	r3, r3, #14
    2c5e:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2c60:	4a13      	ldr	r2, [pc, #76]	; (2cb0 <system_gclk_gen_set_config+0xa8>)
    2c62:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    2c64:	b25b      	sxtb	r3, r3
    2c66:	2b00      	cmp	r3, #0
    2c68:	dbfb      	blt.n	2c62 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    2c6a:	4b12      	ldr	r3, [pc, #72]	; (2cb4 <system_gclk_gen_set_config+0xac>)
    2c6c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2c6e:	4b12      	ldr	r3, [pc, #72]	; (2cb8 <system_gclk_gen_set_config+0xb0>)
    2c70:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2c72:	4a0f      	ldr	r2, [pc, #60]	; (2cb0 <system_gclk_gen_set_config+0xa8>)
    2c74:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    2c76:	b25b      	sxtb	r3, r3
    2c78:	2b00      	cmp	r3, #0
    2c7a:	dbfb      	blt.n	2c74 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    2c7c:	4b0c      	ldr	r3, [pc, #48]	; (2cb0 <system_gclk_gen_set_config+0xa8>)
    2c7e:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2c80:	001a      	movs	r2, r3
    2c82:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    2c84:	b25b      	sxtb	r3, r3
    2c86:	2b00      	cmp	r3, #0
    2c88:	dbfb      	blt.n	2c82 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    2c8a:	4a09      	ldr	r2, [pc, #36]	; (2cb0 <system_gclk_gen_set_config+0xa8>)
    2c8c:	6853      	ldr	r3, [r2, #4]
    2c8e:	2180      	movs	r1, #128	; 0x80
    2c90:	0249      	lsls	r1, r1, #9
    2c92:	400b      	ands	r3, r1
    2c94:	431d      	orrs	r5, r3
    2c96:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    2c98:	4b08      	ldr	r3, [pc, #32]	; (2cbc <system_gclk_gen_set_config+0xb4>)
    2c9a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2c9c:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    2c9e:	2200      	movs	r2, #0
    2ca0:	e7d2      	b.n	2c48 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    2ca2:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    2ca4:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    2ca6:	2380      	movs	r3, #128	; 0x80
    2ca8:	029b      	lsls	r3, r3, #10
    2caa:	431d      	orrs	r5, r3
    2cac:	e7d2      	b.n	2c54 <system_gclk_gen_set_config+0x4c>
    2cae:	46c0      	nop			; (mov r8, r8)
    2cb0:	40000c00 	.word	0x40000c00
    2cb4:	000017b1 	.word	0x000017b1
    2cb8:	40000c08 	.word	0x40000c08
    2cbc:	000017f1 	.word	0x000017f1

00002cc0 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    2cc0:	b510      	push	{r4, lr}
    2cc2:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2cc4:	4a0b      	ldr	r2, [pc, #44]	; (2cf4 <system_gclk_gen_enable+0x34>)
    2cc6:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2cc8:	b25b      	sxtb	r3, r3
    2cca:	2b00      	cmp	r3, #0
    2ccc:	dbfb      	blt.n	2cc6 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    2cce:	4b0a      	ldr	r3, [pc, #40]	; (2cf8 <system_gclk_gen_enable+0x38>)
    2cd0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2cd2:	4b0a      	ldr	r3, [pc, #40]	; (2cfc <system_gclk_gen_enable+0x3c>)
    2cd4:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2cd6:	4a07      	ldr	r2, [pc, #28]	; (2cf4 <system_gclk_gen_enable+0x34>)
    2cd8:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2cda:	b25b      	sxtb	r3, r3
    2cdc:	2b00      	cmp	r3, #0
    2cde:	dbfb      	blt.n	2cd8 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    2ce0:	4a04      	ldr	r2, [pc, #16]	; (2cf4 <system_gclk_gen_enable+0x34>)
    2ce2:	6851      	ldr	r1, [r2, #4]
    2ce4:	2380      	movs	r3, #128	; 0x80
    2ce6:	025b      	lsls	r3, r3, #9
    2ce8:	430b      	orrs	r3, r1
    2cea:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    2cec:	4b04      	ldr	r3, [pc, #16]	; (2d00 <system_gclk_gen_enable+0x40>)
    2cee:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2cf0:	bd10      	pop	{r4, pc}
    2cf2:	46c0      	nop			; (mov r8, r8)
    2cf4:	40000c00 	.word	0x40000c00
    2cf8:	000017b1 	.word	0x000017b1
    2cfc:	40000c04 	.word	0x40000c04
    2d00:	000017f1 	.word	0x000017f1

00002d04 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    2d04:	b570      	push	{r4, r5, r6, lr}
    2d06:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2d08:	4a1a      	ldr	r2, [pc, #104]	; (2d74 <system_gclk_gen_get_hz+0x70>)
    2d0a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2d0c:	b25b      	sxtb	r3, r3
    2d0e:	2b00      	cmp	r3, #0
    2d10:	dbfb      	blt.n	2d0a <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    2d12:	4b19      	ldr	r3, [pc, #100]	; (2d78 <system_gclk_gen_get_hz+0x74>)
    2d14:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2d16:	4b19      	ldr	r3, [pc, #100]	; (2d7c <system_gclk_gen_get_hz+0x78>)
    2d18:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2d1a:	4a16      	ldr	r2, [pc, #88]	; (2d74 <system_gclk_gen_get_hz+0x70>)
    2d1c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2d1e:	b25b      	sxtb	r3, r3
    2d20:	2b00      	cmp	r3, #0
    2d22:	dbfb      	blt.n	2d1c <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    2d24:	4e13      	ldr	r6, [pc, #76]	; (2d74 <system_gclk_gen_get_hz+0x70>)
    2d26:	6870      	ldr	r0, [r6, #4]
    2d28:	04c0      	lsls	r0, r0, #19
    2d2a:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    2d2c:	4b14      	ldr	r3, [pc, #80]	; (2d80 <system_gclk_gen_get_hz+0x7c>)
    2d2e:	4798      	blx	r3
    2d30:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2d32:	4b12      	ldr	r3, [pc, #72]	; (2d7c <system_gclk_gen_get_hz+0x78>)
    2d34:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    2d36:	6876      	ldr	r6, [r6, #4]
    2d38:	02f6      	lsls	r6, r6, #11
    2d3a:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2d3c:	4b11      	ldr	r3, [pc, #68]	; (2d84 <system_gclk_gen_get_hz+0x80>)
    2d3e:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2d40:	4a0c      	ldr	r2, [pc, #48]	; (2d74 <system_gclk_gen_get_hz+0x70>)
    2d42:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2d44:	b25b      	sxtb	r3, r3
    2d46:	2b00      	cmp	r3, #0
    2d48:	dbfb      	blt.n	2d42 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    2d4a:	4b0a      	ldr	r3, [pc, #40]	; (2d74 <system_gclk_gen_get_hz+0x70>)
    2d4c:	689c      	ldr	r4, [r3, #8]
    2d4e:	0224      	lsls	r4, r4, #8
    2d50:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    2d52:	4b0d      	ldr	r3, [pc, #52]	; (2d88 <system_gclk_gen_get_hz+0x84>)
    2d54:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    2d56:	2e00      	cmp	r6, #0
    2d58:	d107      	bne.n	2d6a <system_gclk_gen_get_hz+0x66>
    2d5a:	2c01      	cmp	r4, #1
    2d5c:	d907      	bls.n	2d6e <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    2d5e:	0021      	movs	r1, r4
    2d60:	0028      	movs	r0, r5
    2d62:	4b0a      	ldr	r3, [pc, #40]	; (2d8c <system_gclk_gen_get_hz+0x88>)
    2d64:	4798      	blx	r3
    2d66:	0005      	movs	r5, r0
    2d68:	e001      	b.n	2d6e <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    2d6a:	3401      	adds	r4, #1
    2d6c:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    2d6e:	0028      	movs	r0, r5
    2d70:	bd70      	pop	{r4, r5, r6, pc}
    2d72:	46c0      	nop			; (mov r8, r8)
    2d74:	40000c00 	.word	0x40000c00
    2d78:	000017b1 	.word	0x000017b1
    2d7c:	40000c04 	.word	0x40000c04
    2d80:	000027d9 	.word	0x000027d9
    2d84:	40000c08 	.word	0x40000c08
    2d88:	000017f1 	.word	0x000017f1
    2d8c:	000043d9 	.word	0x000043d9

00002d90 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    2d90:	b510      	push	{r4, lr}
    2d92:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2d94:	4b06      	ldr	r3, [pc, #24]	; (2db0 <system_gclk_chan_enable+0x20>)
    2d96:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2d98:	4b06      	ldr	r3, [pc, #24]	; (2db4 <system_gclk_chan_enable+0x24>)
    2d9a:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    2d9c:	4a06      	ldr	r2, [pc, #24]	; (2db8 <system_gclk_chan_enable+0x28>)
    2d9e:	8853      	ldrh	r3, [r2, #2]
    2da0:	2180      	movs	r1, #128	; 0x80
    2da2:	01c9      	lsls	r1, r1, #7
    2da4:	430b      	orrs	r3, r1
    2da6:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    2da8:	4b04      	ldr	r3, [pc, #16]	; (2dbc <system_gclk_chan_enable+0x2c>)
    2daa:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2dac:	bd10      	pop	{r4, pc}
    2dae:	46c0      	nop			; (mov r8, r8)
    2db0:	000017b1 	.word	0x000017b1
    2db4:	40000c02 	.word	0x40000c02
    2db8:	40000c00 	.word	0x40000c00
    2dbc:	000017f1 	.word	0x000017f1

00002dc0 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    2dc0:	b510      	push	{r4, lr}
    2dc2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2dc4:	4b0f      	ldr	r3, [pc, #60]	; (2e04 <system_gclk_chan_disable+0x44>)
    2dc6:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2dc8:	4b0f      	ldr	r3, [pc, #60]	; (2e08 <system_gclk_chan_disable+0x48>)
    2dca:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    2dcc:	4a0f      	ldr	r2, [pc, #60]	; (2e0c <system_gclk_chan_disable+0x4c>)
    2dce:	8853      	ldrh	r3, [r2, #2]
    2dd0:	051b      	lsls	r3, r3, #20
    2dd2:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    2dd4:	8853      	ldrh	r3, [r2, #2]
    2dd6:	490e      	ldr	r1, [pc, #56]	; (2e10 <system_gclk_chan_disable+0x50>)
    2dd8:	400b      	ands	r3, r1
    2dda:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    2ddc:	8853      	ldrh	r3, [r2, #2]
    2dde:	490d      	ldr	r1, [pc, #52]	; (2e14 <system_gclk_chan_disable+0x54>)
    2de0:	400b      	ands	r3, r1
    2de2:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    2de4:	0011      	movs	r1, r2
    2de6:	2280      	movs	r2, #128	; 0x80
    2de8:	01d2      	lsls	r2, r2, #7
    2dea:	884b      	ldrh	r3, [r1, #2]
    2dec:	4213      	tst	r3, r2
    2dee:	d1fc      	bne.n	2dea <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    2df0:	4906      	ldr	r1, [pc, #24]	; (2e0c <system_gclk_chan_disable+0x4c>)
    2df2:	884a      	ldrh	r2, [r1, #2]
    2df4:	0203      	lsls	r3, r0, #8
    2df6:	4806      	ldr	r0, [pc, #24]	; (2e10 <system_gclk_chan_disable+0x50>)
    2df8:	4002      	ands	r2, r0
    2dfa:	4313      	orrs	r3, r2
    2dfc:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    2dfe:	4b06      	ldr	r3, [pc, #24]	; (2e18 <system_gclk_chan_disable+0x58>)
    2e00:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2e02:	bd10      	pop	{r4, pc}
    2e04:	000017b1 	.word	0x000017b1
    2e08:	40000c02 	.word	0x40000c02
    2e0c:	40000c00 	.word	0x40000c00
    2e10:	fffff0ff 	.word	0xfffff0ff
    2e14:	ffffbfff 	.word	0xffffbfff
    2e18:	000017f1 	.word	0x000017f1

00002e1c <system_gclk_chan_set_config>:
{
    2e1c:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    2e1e:	780c      	ldrb	r4, [r1, #0]
    2e20:	0224      	lsls	r4, r4, #8
    2e22:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    2e24:	4b02      	ldr	r3, [pc, #8]	; (2e30 <system_gclk_chan_set_config+0x14>)
    2e26:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    2e28:	b2a4      	uxth	r4, r4
    2e2a:	4b02      	ldr	r3, [pc, #8]	; (2e34 <system_gclk_chan_set_config+0x18>)
    2e2c:	805c      	strh	r4, [r3, #2]
}
    2e2e:	bd10      	pop	{r4, pc}
    2e30:	00002dc1 	.word	0x00002dc1
    2e34:	40000c00 	.word	0x40000c00

00002e38 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    2e38:	b510      	push	{r4, lr}
    2e3a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2e3c:	4b06      	ldr	r3, [pc, #24]	; (2e58 <system_gclk_chan_get_hz+0x20>)
    2e3e:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2e40:	4b06      	ldr	r3, [pc, #24]	; (2e5c <system_gclk_chan_get_hz+0x24>)
    2e42:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    2e44:	4b06      	ldr	r3, [pc, #24]	; (2e60 <system_gclk_chan_get_hz+0x28>)
    2e46:	885c      	ldrh	r4, [r3, #2]
    2e48:	0524      	lsls	r4, r4, #20
    2e4a:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    2e4c:	4b05      	ldr	r3, [pc, #20]	; (2e64 <system_gclk_chan_get_hz+0x2c>)
    2e4e:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    2e50:	0020      	movs	r0, r4
    2e52:	4b05      	ldr	r3, [pc, #20]	; (2e68 <system_gclk_chan_get_hz+0x30>)
    2e54:	4798      	blx	r3
}
    2e56:	bd10      	pop	{r4, pc}
    2e58:	000017b1 	.word	0x000017b1
    2e5c:	40000c02 	.word	0x40000c02
    2e60:	40000c00 	.word	0x40000c00
    2e64:	000017f1 	.word	0x000017f1
    2e68:	00002d05 	.word	0x00002d05

00002e6c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    2e6c:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    2e6e:	78d3      	ldrb	r3, [r2, #3]
    2e70:	2b00      	cmp	r3, #0
    2e72:	d135      	bne.n	2ee0 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    2e74:	7813      	ldrb	r3, [r2, #0]
    2e76:	2b80      	cmp	r3, #128	; 0x80
    2e78:	d029      	beq.n	2ece <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    2e7a:	061b      	lsls	r3, r3, #24
    2e7c:	2480      	movs	r4, #128	; 0x80
    2e7e:	0264      	lsls	r4, r4, #9
    2e80:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    2e82:	7854      	ldrb	r4, [r2, #1]
    2e84:	2502      	movs	r5, #2
    2e86:	43ac      	bics	r4, r5
    2e88:	d106      	bne.n	2e98 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    2e8a:	7894      	ldrb	r4, [r2, #2]
    2e8c:	2c00      	cmp	r4, #0
    2e8e:	d120      	bne.n	2ed2 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    2e90:	2480      	movs	r4, #128	; 0x80
    2e92:	02a4      	lsls	r4, r4, #10
    2e94:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    2e96:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2e98:	7854      	ldrb	r4, [r2, #1]
    2e9a:	3c01      	subs	r4, #1
    2e9c:	2c01      	cmp	r4, #1
    2e9e:	d91c      	bls.n	2eda <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2ea0:	040d      	lsls	r5, r1, #16
    2ea2:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2ea4:	24a0      	movs	r4, #160	; 0xa0
    2ea6:	05e4      	lsls	r4, r4, #23
    2ea8:	432c      	orrs	r4, r5
    2eaa:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2eac:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    2eae:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2eb0:	24d0      	movs	r4, #208	; 0xd0
    2eb2:	0624      	lsls	r4, r4, #24
    2eb4:	432c      	orrs	r4, r5
    2eb6:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2eb8:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    2eba:	78d4      	ldrb	r4, [r2, #3]
    2ebc:	2c00      	cmp	r4, #0
    2ebe:	d122      	bne.n	2f06 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    2ec0:	035b      	lsls	r3, r3, #13
    2ec2:	d51c      	bpl.n	2efe <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    2ec4:	7893      	ldrb	r3, [r2, #2]
    2ec6:	2b01      	cmp	r3, #1
    2ec8:	d01e      	beq.n	2f08 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    2eca:	6141      	str	r1, [r0, #20]
    2ecc:	e017      	b.n	2efe <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    2ece:	2300      	movs	r3, #0
    2ed0:	e7d7      	b.n	2e82 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    2ed2:	24c0      	movs	r4, #192	; 0xc0
    2ed4:	02e4      	lsls	r4, r4, #11
    2ed6:	4323      	orrs	r3, r4
    2ed8:	e7dd      	b.n	2e96 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    2eda:	4c0d      	ldr	r4, [pc, #52]	; (2f10 <_system_pinmux_config+0xa4>)
    2edc:	4023      	ands	r3, r4
    2ede:	e7df      	b.n	2ea0 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    2ee0:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2ee2:	040c      	lsls	r4, r1, #16
    2ee4:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2ee6:	23a0      	movs	r3, #160	; 0xa0
    2ee8:	05db      	lsls	r3, r3, #23
    2eea:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2eec:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    2eee:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2ef0:	23d0      	movs	r3, #208	; 0xd0
    2ef2:	061b      	lsls	r3, r3, #24
    2ef4:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2ef6:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    2ef8:	78d3      	ldrb	r3, [r2, #3]
    2efa:	2b00      	cmp	r3, #0
    2efc:	d103      	bne.n	2f06 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2efe:	7853      	ldrb	r3, [r2, #1]
    2f00:	3b01      	subs	r3, #1
    2f02:	2b01      	cmp	r3, #1
    2f04:	d902      	bls.n	2f0c <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    2f06:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    2f08:	6181      	str	r1, [r0, #24]
    2f0a:	e7f8      	b.n	2efe <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    2f0c:	6081      	str	r1, [r0, #8]
}
    2f0e:	e7fa      	b.n	2f06 <_system_pinmux_config+0x9a>
    2f10:	fffbffff 	.word	0xfffbffff

00002f14 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    2f14:	b510      	push	{r4, lr}
    2f16:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    2f18:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    2f1a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    2f1c:	2900      	cmp	r1, #0
    2f1e:	d104      	bne.n	2f2a <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    2f20:	0943      	lsrs	r3, r0, #5
    2f22:	01db      	lsls	r3, r3, #7
    2f24:	4905      	ldr	r1, [pc, #20]	; (2f3c <system_pinmux_pin_set_config+0x28>)
    2f26:	468c      	mov	ip, r1
    2f28:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    2f2a:	241f      	movs	r4, #31
    2f2c:	4020      	ands	r0, r4
    2f2e:	2101      	movs	r1, #1
    2f30:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    2f32:	0018      	movs	r0, r3
    2f34:	4b02      	ldr	r3, [pc, #8]	; (2f40 <system_pinmux_pin_set_config+0x2c>)
    2f36:	4798      	blx	r3
}
    2f38:	bd10      	pop	{r4, pc}
    2f3a:	46c0      	nop			; (mov r8, r8)
    2f3c:	41004400 	.word	0x41004400
    2f40:	00002e6d 	.word	0x00002e6d

00002f44 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    2f44:	4770      	bx	lr
	...

00002f48 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    2f48:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    2f4a:	4b05      	ldr	r3, [pc, #20]	; (2f60 <system_init+0x18>)
    2f4c:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    2f4e:	4b05      	ldr	r3, [pc, #20]	; (2f64 <system_init+0x1c>)
    2f50:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    2f52:	4b05      	ldr	r3, [pc, #20]	; (2f68 <system_init+0x20>)
    2f54:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    2f56:	4b05      	ldr	r3, [pc, #20]	; (2f6c <system_init+0x24>)
    2f58:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    2f5a:	4b05      	ldr	r3, [pc, #20]	; (2f70 <system_init+0x28>)
    2f5c:	4798      	blx	r3
}
    2f5e:	bd10      	pop	{r4, pc}
    2f60:	00002a89 	.word	0x00002a89
    2f64:	00001821 	.word	0x00001821
    2f68:	00002f45 	.word	0x00002f45
    2f6c:	00002f45 	.word	0x00002f45
    2f70:	00002f45 	.word	0x00002f45

00002f74 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    2f74:	e7fe      	b.n	2f74 <Dummy_Handler>
	...

00002f78 <Reset_Handler>:
{
    2f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    2f7a:	4a2a      	ldr	r2, [pc, #168]	; (3024 <Reset_Handler+0xac>)
    2f7c:	4b2a      	ldr	r3, [pc, #168]	; (3028 <Reset_Handler+0xb0>)
    2f7e:	429a      	cmp	r2, r3
    2f80:	d011      	beq.n	2fa6 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    2f82:	001a      	movs	r2, r3
    2f84:	4b29      	ldr	r3, [pc, #164]	; (302c <Reset_Handler+0xb4>)
    2f86:	429a      	cmp	r2, r3
    2f88:	d20d      	bcs.n	2fa6 <Reset_Handler+0x2e>
    2f8a:	4a29      	ldr	r2, [pc, #164]	; (3030 <Reset_Handler+0xb8>)
    2f8c:	3303      	adds	r3, #3
    2f8e:	1a9b      	subs	r3, r3, r2
    2f90:	089b      	lsrs	r3, r3, #2
    2f92:	3301      	adds	r3, #1
    2f94:	009b      	lsls	r3, r3, #2
    2f96:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    2f98:	4823      	ldr	r0, [pc, #140]	; (3028 <Reset_Handler+0xb0>)
    2f9a:	4922      	ldr	r1, [pc, #136]	; (3024 <Reset_Handler+0xac>)
    2f9c:	588c      	ldr	r4, [r1, r2]
    2f9e:	5084      	str	r4, [r0, r2]
    2fa0:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    2fa2:	429a      	cmp	r2, r3
    2fa4:	d1fa      	bne.n	2f9c <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    2fa6:	4a23      	ldr	r2, [pc, #140]	; (3034 <Reset_Handler+0xbc>)
    2fa8:	4b23      	ldr	r3, [pc, #140]	; (3038 <Reset_Handler+0xc0>)
    2faa:	429a      	cmp	r2, r3
    2fac:	d20a      	bcs.n	2fc4 <Reset_Handler+0x4c>
    2fae:	43d3      	mvns	r3, r2
    2fb0:	4921      	ldr	r1, [pc, #132]	; (3038 <Reset_Handler+0xc0>)
    2fb2:	185b      	adds	r3, r3, r1
    2fb4:	2103      	movs	r1, #3
    2fb6:	438b      	bics	r3, r1
    2fb8:	3304      	adds	r3, #4
    2fba:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    2fbc:	2100      	movs	r1, #0
    2fbe:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    2fc0:	4293      	cmp	r3, r2
    2fc2:	d1fc      	bne.n	2fbe <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2fc4:	4a1d      	ldr	r2, [pc, #116]	; (303c <Reset_Handler+0xc4>)
    2fc6:	21ff      	movs	r1, #255	; 0xff
    2fc8:	4b1d      	ldr	r3, [pc, #116]	; (3040 <Reset_Handler+0xc8>)
    2fca:	438b      	bics	r3, r1
    2fcc:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    2fce:	39fd      	subs	r1, #253	; 0xfd
    2fd0:	2390      	movs	r3, #144	; 0x90
    2fd2:	005b      	lsls	r3, r3, #1
    2fd4:	4a1b      	ldr	r2, [pc, #108]	; (3044 <Reset_Handler+0xcc>)
    2fd6:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    2fd8:	4a1b      	ldr	r2, [pc, #108]	; (3048 <Reset_Handler+0xd0>)
    2fda:	78d3      	ldrb	r3, [r2, #3]
    2fdc:	2503      	movs	r5, #3
    2fde:	43ab      	bics	r3, r5
    2fe0:	2402      	movs	r4, #2
    2fe2:	4323      	orrs	r3, r4
    2fe4:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    2fe6:	78d3      	ldrb	r3, [r2, #3]
    2fe8:	270c      	movs	r7, #12
    2fea:	43bb      	bics	r3, r7
    2fec:	2608      	movs	r6, #8
    2fee:	4333      	orrs	r3, r6
    2ff0:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    2ff2:	4b16      	ldr	r3, [pc, #88]	; (304c <Reset_Handler+0xd4>)
    2ff4:	7b98      	ldrb	r0, [r3, #14]
    2ff6:	2230      	movs	r2, #48	; 0x30
    2ff8:	4390      	bics	r0, r2
    2ffa:	2220      	movs	r2, #32
    2ffc:	4310      	orrs	r0, r2
    2ffe:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    3000:	7b99      	ldrb	r1, [r3, #14]
    3002:	43b9      	bics	r1, r7
    3004:	4331      	orrs	r1, r6
    3006:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    3008:	7b9a      	ldrb	r2, [r3, #14]
    300a:	43aa      	bics	r2, r5
    300c:	4322      	orrs	r2, r4
    300e:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    3010:	4a0f      	ldr	r2, [pc, #60]	; (3050 <Reset_Handler+0xd8>)
    3012:	6853      	ldr	r3, [r2, #4]
    3014:	2180      	movs	r1, #128	; 0x80
    3016:	430b      	orrs	r3, r1
    3018:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    301a:	4b0e      	ldr	r3, [pc, #56]	; (3054 <Reset_Handler+0xdc>)
    301c:	4798      	blx	r3
        main();
    301e:	4b0e      	ldr	r3, [pc, #56]	; (3058 <Reset_Handler+0xe0>)
    3020:	4798      	blx	r3
    3022:	e7fe      	b.n	3022 <Reset_Handler+0xaa>
    3024:	00007e38 	.word	0x00007e38
    3028:	20000000 	.word	0x20000000
    302c:	200001d8 	.word	0x200001d8
    3030:	20000004 	.word	0x20000004
    3034:	200001d8 	.word	0x200001d8
    3038:	20000b70 	.word	0x20000b70
    303c:	e000ed00 	.word	0xe000ed00
    3040:	00000000 	.word	0x00000000
    3044:	41007000 	.word	0x41007000
    3048:	41005000 	.word	0x41005000
    304c:	41004800 	.word	0x41004800
    3050:	41004000 	.word	0x41004000
    3054:	00004719 	.word	0x00004719
    3058:	00004325 	.word	0x00004325

0000305c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    305c:	b5f0      	push	{r4, r5, r6, r7, lr}
    305e:	46c6      	mov	lr, r8
    3060:	b500      	push	{lr}
    3062:	000c      	movs	r4, r1
    3064:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    3066:	2800      	cmp	r0, #0
    3068:	d10f      	bne.n	308a <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    306a:	2a00      	cmp	r2, #0
    306c:	dd11      	ble.n	3092 <_read+0x36>
    306e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    3070:	4e09      	ldr	r6, [pc, #36]	; (3098 <_read+0x3c>)
    3072:	4d0a      	ldr	r5, [pc, #40]	; (309c <_read+0x40>)
    3074:	6830      	ldr	r0, [r6, #0]
    3076:	0021      	movs	r1, r4
    3078:	682b      	ldr	r3, [r5, #0]
    307a:	4798      	blx	r3
		ptr++;
    307c:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    307e:	42bc      	cmp	r4, r7
    3080:	d1f8      	bne.n	3074 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    3082:	4640      	mov	r0, r8
    3084:	bc04      	pop	{r2}
    3086:	4690      	mov	r8, r2
    3088:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    308a:	2301      	movs	r3, #1
    308c:	425b      	negs	r3, r3
    308e:	4698      	mov	r8, r3
    3090:	e7f7      	b.n	3082 <_read+0x26>
	for (; len > 0; --len) {
    3092:	4680      	mov	r8, r0
    3094:	e7f5      	b.n	3082 <_read+0x26>
    3096:	46c0      	nop			; (mov r8, r8)
    3098:	20000384 	.word	0x20000384
    309c:	2000037c 	.word	0x2000037c

000030a0 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    30a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    30a2:	46c6      	mov	lr, r8
    30a4:	b500      	push	{lr}
    30a6:	000e      	movs	r6, r1
    30a8:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    30aa:	3801      	subs	r0, #1
    30ac:	2802      	cmp	r0, #2
    30ae:	d810      	bhi.n	30d2 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    30b0:	2a00      	cmp	r2, #0
    30b2:	d011      	beq.n	30d8 <_write+0x38>
    30b4:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    30b6:	4b0c      	ldr	r3, [pc, #48]	; (30e8 <_write+0x48>)
    30b8:	4698      	mov	r8, r3
    30ba:	4f0c      	ldr	r7, [pc, #48]	; (30ec <_write+0x4c>)
    30bc:	4643      	mov	r3, r8
    30be:	6818      	ldr	r0, [r3, #0]
    30c0:	5d31      	ldrb	r1, [r6, r4]
    30c2:	683b      	ldr	r3, [r7, #0]
    30c4:	4798      	blx	r3
    30c6:	2800      	cmp	r0, #0
    30c8:	db08      	blt.n	30dc <_write+0x3c>
			return -1;
		}
		++nChars;
    30ca:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    30cc:	42a5      	cmp	r5, r4
    30ce:	d1f5      	bne.n	30bc <_write+0x1c>
    30d0:	e006      	b.n	30e0 <_write+0x40>
		return -1;
    30d2:	2401      	movs	r4, #1
    30d4:	4264      	negs	r4, r4
    30d6:	e003      	b.n	30e0 <_write+0x40>
	for (; len != 0; --len) {
    30d8:	0014      	movs	r4, r2
    30da:	e001      	b.n	30e0 <_write+0x40>
			return -1;
    30dc:	2401      	movs	r4, #1
    30de:	4264      	negs	r4, r4
	}
	return nChars;
}
    30e0:	0020      	movs	r0, r4
    30e2:	bc04      	pop	{r2}
    30e4:	4690      	mov	r8, r2
    30e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    30e8:	20000384 	.word	0x20000384
    30ec:	20000380 	.word	0x20000380

000030f0 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    30f0:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    30f2:	4a06      	ldr	r2, [pc, #24]	; (310c <_sbrk+0x1c>)
    30f4:	6812      	ldr	r2, [r2, #0]
    30f6:	2a00      	cmp	r2, #0
    30f8:	d004      	beq.n	3104 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    30fa:	4a04      	ldr	r2, [pc, #16]	; (310c <_sbrk+0x1c>)
    30fc:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    30fe:	18c3      	adds	r3, r0, r3
    3100:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    3102:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    3104:	4902      	ldr	r1, [pc, #8]	; (3110 <_sbrk+0x20>)
    3106:	4a01      	ldr	r2, [pc, #4]	; (310c <_sbrk+0x1c>)
    3108:	6011      	str	r1, [r2, #0]
    310a:	e7f6      	b.n	30fa <_sbrk+0xa>
    310c:	200002b4 	.word	0x200002b4
    3110:	20002b70 	.word	0x20002b70

00003114 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    3114:	2001      	movs	r0, #1
    3116:	4240      	negs	r0, r0
    3118:	4770      	bx	lr

0000311a <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    311a:	2380      	movs	r3, #128	; 0x80
    311c:	019b      	lsls	r3, r3, #6
    311e:	604b      	str	r3, [r1, #4]

	return 0;
}
    3120:	2000      	movs	r0, #0
    3122:	4770      	bx	lr

00003124 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    3124:	2001      	movs	r0, #1
    3126:	4770      	bx	lr

00003128 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    3128:	2000      	movs	r0, #0
    312a:	4770      	bx	lr

0000312c <drawChar>:
uint16_t xCharPos = 0;
uint16_t yCharPos = 0;


void drawChar(uint8_t character)
{
    312c:	b5f0      	push	{r4, r5, r6, r7, lr}
    312e:	46d6      	mov	lr, sl
    3130:	464f      	mov	r7, r9
    3132:	4646      	mov	r6, r8
    3134:	b5c0      	push	{r6, r7, lr}
    3136:	0004      	movs	r4, r0
	uint16_t x = xCharPos;
    3138:	4b2a      	ldr	r3, [pc, #168]	; (31e4 <drawChar+0xb8>)
    313a:	881b      	ldrh	r3, [r3, #0]
	uint16_t y = yCharPos;
    313c:	4a2a      	ldr	r2, [pc, #168]	; (31e8 <drawChar+0xbc>)
    313e:	8815      	ldrh	r5, [r2, #0]
	

	
	consoleDisplay[xCharPos][yCharPos] = character;
    3140:	005a      	lsls	r2, r3, #1
    3142:	18d2      	adds	r2, r2, r3
    3144:	00d2      	lsls	r2, r2, #3
    3146:	4829      	ldr	r0, [pc, #164]	; (31ec <drawChar+0xc0>)
    3148:	1882      	adds	r2, r0, r2
    314a:	5554      	strb	r4, [r2, r5]
	
	REG_PORT_OUTCLR1 = LCD_CS;
    314c:	2180      	movs	r1, #128	; 0x80
    314e:	03c9      	lsls	r1, r1, #15
    3150:	4a27      	ldr	r2, [pc, #156]	; (31f0 <drawChar+0xc4>)
    3152:	6011      	str	r1, [r2, #0]
	setXY(x*10,y*20,x*10+9,y*20+19);
    3154:	0098      	lsls	r0, r3, #2
    3156:	181b      	adds	r3, r3, r0
    3158:	005b      	lsls	r3, r3, #1
    315a:	b298      	uxth	r0, r3
    315c:	2114      	movs	r1, #20
    315e:	4369      	muls	r1, r5
    3160:	b289      	uxth	r1, r1
    3162:	000b      	movs	r3, r1
    3164:	3313      	adds	r3, #19
    3166:	b29b      	uxth	r3, r3
    3168:	0002      	movs	r2, r0
    316a:	3209      	adds	r2, #9
    316c:	b292      	uxth	r2, r2
    316e:	4d21      	ldr	r5, [pc, #132]	; (31f4 <drawChar+0xc8>)
    3170:	47a8      	blx	r5
    3172:	4a21      	ldr	r2, [pc, #132]	; (31f8 <drawChar+0xcc>)
    3174:	00a5      	lsls	r5, r4, #2
    3176:	192d      	adds	r5, r5, r4
    3178:	00ab      	lsls	r3, r5, #2
    317a:	18ed      	adds	r5, r5, r3
    317c:	1955      	adds	r5, r2, r5
    317e:	3401      	adds	r4, #1
    3180:	00a3      	lsls	r3, r4, #2
    3182:	191c      	adds	r4, r3, r4
    3184:	00a3      	lsls	r3, r4, #2
    3186:	18e4      	adds	r4, r4, r3
    3188:	4692      	mov	sl, r2
    318a:	44a2      	add	sl, r4
			{
				setPixel((fore_Color_High<<8)|fore_Color_Low);	
			}
			else
			{
				setPixel((back_Color_High<<8)|back_Color_Low);
    318c:	4b1b      	ldr	r3, [pc, #108]	; (31fc <drawChar+0xd0>)
    318e:	4699      	mov	r9, r3
    3190:	4b1b      	ldr	r3, [pc, #108]	; (3200 <drawChar+0xd4>)
    3192:	4698      	mov	r8, r3
    3194:	4f1b      	ldr	r7, [pc, #108]	; (3204 <drawChar+0xd8>)
				setPixel((fore_Color_High<<8)|fore_Color_Low);	
    3196:	4e1c      	ldr	r6, [pc, #112]	; (3208 <drawChar+0xdc>)
    3198:	e019      	b.n	31ce <drawChar+0xa2>
				setPixel((back_Color_High<<8)|back_Color_Low);
    319a:	464b      	mov	r3, r9
    319c:	8818      	ldrh	r0, [r3, #0]
    319e:	0200      	lsls	r0, r0, #8
    31a0:	4643      	mov	r3, r8
    31a2:	881b      	ldrh	r3, [r3, #0]
    31a4:	4318      	orrs	r0, r3
    31a6:	b280      	uxth	r0, r0
    31a8:	47b8      	blx	r7
		for(int j=0;j<8;j++)
    31aa:	3c01      	subs	r4, #1
    31ac:	d30c      	bcc.n	31c8 <drawChar+0x9c>
			if((CodePage437[character][i]&(1<<(7-j)))!=0)
    31ae:	782b      	ldrb	r3, [r5, #0]
    31b0:	4123      	asrs	r3, r4
    31b2:	07db      	lsls	r3, r3, #31
    31b4:	d5f1      	bpl.n	319a <drawChar+0x6e>
				setPixel((fore_Color_High<<8)|fore_Color_Low);	
    31b6:	8830      	ldrh	r0, [r6, #0]
    31b8:	0200      	lsls	r0, r0, #8
    31ba:	4b14      	ldr	r3, [pc, #80]	; (320c <drawChar+0xe0>)
    31bc:	881b      	ldrh	r3, [r3, #0]
    31be:	4318      	orrs	r0, r3
    31c0:	b280      	uxth	r0, r0
    31c2:	4b10      	ldr	r3, [pc, #64]	; (3204 <drawChar+0xd8>)
    31c4:	4798      	blx	r3
    31c6:	e7f0      	b.n	31aa <drawChar+0x7e>
    31c8:	3501      	adds	r5, #1
	for(uint16_t i=0; i <= 24; i++)
    31ca:	4555      	cmp	r5, sl
    31cc:	d001      	beq.n	31d2 <drawChar+0xa6>
{
    31ce:	2407      	movs	r4, #7
    31d0:	e7ed      	b.n	31ae <drawChar+0x82>
			}

		}
	}
	REG_PORT_OUTSET1 = LCD_CS;
    31d2:	2280      	movs	r2, #128	; 0x80
    31d4:	03d2      	lsls	r2, r2, #15
    31d6:	4b0e      	ldr	r3, [pc, #56]	; (3210 <drawChar+0xe4>)
    31d8:	601a      	str	r2, [r3, #0]
	

}
    31da:	bc1c      	pop	{r2, r3, r4}
    31dc:	4690      	mov	r8, r2
    31de:	4699      	mov	r9, r3
    31e0:	46a2      	mov	sl, r4
    31e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    31e4:	200002b8 	.word	0x200002b8
    31e8:	200002ba 	.word	0x200002ba
    31ec:	200003c0 	.word	0x200003c0
    31f0:	41004494 	.word	0x41004494
    31f4:	00003b51 	.word	0x00003b51
    31f8:	0000618c 	.word	0x0000618c
    31fc:	20000b46 	.word	0x20000b46
    3200:	20000b40 	.word	0x20000b40
    3204:	00003c89 	.word	0x00003c89
    3208:	20000b42 	.word	0x20000b42
    320c:	20000b44 	.word	0x20000b44
    3210:	41004498 	.word	0x41004498

00003214 <blinkCursor>:
	*/
	
}

void blinkCursor(void)
{
    3214:	b5f0      	push	{r4, r5, r6, r7, lr}
    3216:	46d6      	mov	lr, sl
    3218:	464f      	mov	r7, r9
    321a:	4646      	mov	r6, r8
    321c:	b5c0      	push	{r6, r7, lr}
	uint16_t x = xCharPos;
    321e:	4b47      	ldr	r3, [pc, #284]	; (333c <blinkCursor+0x128>)
    3220:	881b      	ldrh	r3, [r3, #0]
	uint16_t y = yCharPos;
    3222:	4a47      	ldr	r2, [pc, #284]	; (3340 <blinkCursor+0x12c>)
    3224:	8815      	ldrh	r5, [r2, #0]
	unsigned char character = consoleDisplay[x][y];
    3226:	005a      	lsls	r2, r3, #1
    3228:	18d2      	adds	r2, r2, r3
    322a:	00d2      	lsls	r2, r2, #3
    322c:	4845      	ldr	r0, [pc, #276]	; (3344 <blinkCursor+0x130>)
    322e:	1882      	adds	r2, r0, r2
    3230:	5d54      	ldrb	r4, [r2, r5]
	setXY(x*10,y*20,x*10+9,y*20+19);
    3232:	0098      	lsls	r0, r3, #2
    3234:	181b      	adds	r3, r3, r0
    3236:	005b      	lsls	r3, r3, #1
    3238:	b298      	uxth	r0, r3
    323a:	2114      	movs	r1, #20
    323c:	4369      	muls	r1, r5
    323e:	b289      	uxth	r1, r1
    3240:	000b      	movs	r3, r1
    3242:	3313      	adds	r3, #19
    3244:	b29b      	uxth	r3, r3
    3246:	0002      	movs	r2, r0
    3248:	3209      	adds	r2, #9
    324a:	b292      	uxth	r2, r2
    324c:	4d3e      	ldr	r5, [pc, #248]	; (3348 <blinkCursor+0x134>)
    324e:	47a8      	blx	r5
	REG_PORT_OUTCLR1 = LCD_CS;
    3250:	2280      	movs	r2, #128	; 0x80
    3252:	03d2      	lsls	r2, r2, #15
    3254:	4b3d      	ldr	r3, [pc, #244]	; (334c <blinkCursor+0x138>)
    3256:	601a      	str	r2, [r3, #0]
	if(cursorBlinkState)
    3258:	4b3d      	ldr	r3, [pc, #244]	; (3350 <blinkCursor+0x13c>)
    325a:	781b      	ldrb	r3, [r3, #0]
    325c:	2b00      	cmp	r3, #0
    325e:	d113      	bne.n	3288 <blinkCursor+0x74>
    3260:	4a3c      	ldr	r2, [pc, #240]	; (3354 <blinkCursor+0x140>)
    3262:	00a5      	lsls	r5, r4, #2
    3264:	192d      	adds	r5, r5, r4
    3266:	00ab      	lsls	r3, r5, #2
    3268:	18ed      	adds	r5, r5, r3
    326a:	1955      	adds	r5, r2, r5
    326c:	3401      	adds	r4, #1
    326e:	00a3      	lsls	r3, r4, #2
    3270:	191c      	adds	r4, r3, r4
    3272:	00a3      	lsls	r3, r4, #2
    3274:	18e4      	adds	r4, r4, r3
    3276:	4692      	mov	sl, r2
    3278:	44a2      	add	sl, r4
				{
					setPixel((fore_Color_High<<8)|fore_Color_Low);
				}
				else
				{
					setPixel((back_Color_High<<8)|back_Color_Low);
    327a:	4b37      	ldr	r3, [pc, #220]	; (3358 <blinkCursor+0x144>)
    327c:	4699      	mov	r9, r3
    327e:	4b37      	ldr	r3, [pc, #220]	; (335c <blinkCursor+0x148>)
    3280:	4698      	mov	r8, r3
    3282:	4f37      	ldr	r7, [pc, #220]	; (3360 <blinkCursor+0x14c>)
					setPixel((fore_Color_High<<8)|fore_Color_Low);
    3284:	4e37      	ldr	r6, [pc, #220]	; (3364 <blinkCursor+0x150>)
    3286:	e049      	b.n	331c <blinkCursor+0x108>
    3288:	4a32      	ldr	r2, [pc, #200]	; (3354 <blinkCursor+0x140>)
    328a:	00a5      	lsls	r5, r4, #2
    328c:	192d      	adds	r5, r5, r4
    328e:	00ab      	lsls	r3, r5, #2
    3290:	18ed      	adds	r5, r5, r3
    3292:	1955      	adds	r5, r2, r5
    3294:	3401      	adds	r4, #1
    3296:	00a3      	lsls	r3, r4, #2
    3298:	191c      	adds	r4, r3, r4
    329a:	00a3      	lsls	r3, r4, #2
    329c:	18e4      	adds	r4, r4, r3
    329e:	4692      	mov	sl, r2
    32a0:	44a2      	add	sl, r4
					setPixel((fore_Color_High<<8)|fore_Color_Low);
    32a2:	4b30      	ldr	r3, [pc, #192]	; (3364 <blinkCursor+0x150>)
    32a4:	4699      	mov	r9, r3
    32a6:	4b30      	ldr	r3, [pc, #192]	; (3368 <blinkCursor+0x154>)
    32a8:	4698      	mov	r8, r3
    32aa:	4f2d      	ldr	r7, [pc, #180]	; (3360 <blinkCursor+0x14c>)
					setPixel((back_Color_High<<8)|back_Color_Low);
    32ac:	4e2a      	ldr	r6, [pc, #168]	; (3358 <blinkCursor+0x144>)
    32ae:	e019      	b.n	32e4 <blinkCursor+0xd0>
					setPixel((fore_Color_High<<8)|fore_Color_Low);
    32b0:	464b      	mov	r3, r9
    32b2:	8818      	ldrh	r0, [r3, #0]
    32b4:	0200      	lsls	r0, r0, #8
    32b6:	4643      	mov	r3, r8
    32b8:	881b      	ldrh	r3, [r3, #0]
    32ba:	4318      	orrs	r0, r3
    32bc:	b280      	uxth	r0, r0
    32be:	47b8      	blx	r7
			for(int j=0;j<8;j++)
    32c0:	3c01      	subs	r4, #1
    32c2:	d30c      	bcc.n	32de <blinkCursor+0xca>
				if((CodePage437[character][i]&(1<<(7-j)))!=0)
    32c4:	782b      	ldrb	r3, [r5, #0]
    32c6:	4123      	asrs	r3, r4
    32c8:	07db      	lsls	r3, r3, #31
    32ca:	d5f1      	bpl.n	32b0 <blinkCursor+0x9c>
					setPixel((back_Color_High<<8)|back_Color_Low);
    32cc:	8830      	ldrh	r0, [r6, #0]
    32ce:	0200      	lsls	r0, r0, #8
    32d0:	4b22      	ldr	r3, [pc, #136]	; (335c <blinkCursor+0x148>)
    32d2:	881b      	ldrh	r3, [r3, #0]
    32d4:	4318      	orrs	r0, r3
    32d6:	b280      	uxth	r0, r0
    32d8:	4b21      	ldr	r3, [pc, #132]	; (3360 <blinkCursor+0x14c>)
    32da:	4798      	blx	r3
    32dc:	e7f0      	b.n	32c0 <blinkCursor+0xac>
    32de:	3501      	adds	r5, #1
		for(uint16_t i=0; i <= 24; i++)
    32e0:	4555      	cmp	r5, sl
    32e2:	d01d      	beq.n	3320 <blinkCursor+0x10c>
{
    32e4:	2407      	movs	r4, #7
    32e6:	e7ed      	b.n	32c4 <blinkCursor+0xb0>
					setPixel((back_Color_High<<8)|back_Color_Low);
    32e8:	464b      	mov	r3, r9
    32ea:	8818      	ldrh	r0, [r3, #0]
    32ec:	0200      	lsls	r0, r0, #8
    32ee:	4643      	mov	r3, r8
    32f0:	881b      	ldrh	r3, [r3, #0]
    32f2:	4318      	orrs	r0, r3
    32f4:	b280      	uxth	r0, r0
    32f6:	47b8      	blx	r7
			for(int j=0;j<8;j++)
    32f8:	3c01      	subs	r4, #1
    32fa:	d30c      	bcc.n	3316 <blinkCursor+0x102>
				if((CodePage437[character][i]&(1<<(7-j)))!=0)
    32fc:	782b      	ldrb	r3, [r5, #0]
    32fe:	4123      	asrs	r3, r4
    3300:	07db      	lsls	r3, r3, #31
    3302:	d5f1      	bpl.n	32e8 <blinkCursor+0xd4>
					setPixel((fore_Color_High<<8)|fore_Color_Low);
    3304:	8830      	ldrh	r0, [r6, #0]
    3306:	0200      	lsls	r0, r0, #8
    3308:	4b17      	ldr	r3, [pc, #92]	; (3368 <blinkCursor+0x154>)
    330a:	881b      	ldrh	r3, [r3, #0]
    330c:	4318      	orrs	r0, r3
    330e:	b280      	uxth	r0, r0
    3310:	4b13      	ldr	r3, [pc, #76]	; (3360 <blinkCursor+0x14c>)
    3312:	4798      	blx	r3
    3314:	e7f0      	b.n	32f8 <blinkCursor+0xe4>
    3316:	3501      	adds	r5, #1
		for(uint16_t i=0; i <= 24; i++)
    3318:	4555      	cmp	r5, sl
    331a:	d001      	beq.n	3320 <blinkCursor+0x10c>
{
    331c:	2407      	movs	r4, #7
    331e:	e7ed      	b.n	32fc <blinkCursor+0xe8>
				}
			}
		}
	}

	REG_PORT_OUTSET1 = LCD_CS;
    3320:	2280      	movs	r2, #128	; 0x80
    3322:	03d2      	lsls	r2, r2, #15
    3324:	4b11      	ldr	r3, [pc, #68]	; (336c <blinkCursor+0x158>)
    3326:	601a      	str	r2, [r3, #0]
	
	//invert cursorBlinkState
	cursorBlinkState = !cursorBlinkState;
    3328:	4a09      	ldr	r2, [pc, #36]	; (3350 <blinkCursor+0x13c>)
    332a:	7813      	ldrb	r3, [r2, #0]
    332c:	2101      	movs	r1, #1
    332e:	404b      	eors	r3, r1
    3330:	7013      	strb	r3, [r2, #0]
	
}
    3332:	bc1c      	pop	{r2, r3, r4}
    3334:	4690      	mov	r8, r2
    3336:	4699      	mov	r9, r3
    3338:	46a2      	mov	sl, r4
    333a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    333c:	200002b8 	.word	0x200002b8
    3340:	200002ba 	.word	0x200002ba
    3344:	200003c0 	.word	0x200003c0
    3348:	00003b51 	.word	0x00003b51
    334c:	41004494 	.word	0x41004494
    3350:	20000024 	.word	0x20000024
    3354:	0000618c 	.word	0x0000618c
    3358:	20000b46 	.word	0x20000b46
    335c:	20000b40 	.word	0x20000b40
    3360:	00003c89 	.word	0x00003c89
    3364:	20000b42 	.word	0x20000b42
    3368:	20000b44 	.word	0x20000b44
    336c:	41004498 	.word	0x41004498

00003370 <newLine>:
{
    3370:	b5f0      	push	{r4, r5, r6, r7, lr}
    3372:	46de      	mov	lr, fp
    3374:	4657      	mov	r7, sl
    3376:	464e      	mov	r6, r9
    3378:	4645      	mov	r5, r8
    337a:	b5e0      	push	{r5, r6, r7, lr}
    337c:	b083      	sub	sp, #12
	int tempCursorx = xCharPos;
    337e:	4b24      	ldr	r3, [pc, #144]	; (3410 <newLine+0xa0>)
    3380:	881b      	ldrh	r3, [r3, #0]
    3382:	469b      	mov	fp, r3
	int tempCursory = yCharPos;
    3384:	4b23      	ldr	r3, [pc, #140]	; (3414 <newLine+0xa4>)
    3386:	881b      	ldrh	r3, [r3, #0]
    3388:	9301      	str	r3, [sp, #4]
	cursorBlinkState = true;
    338a:	2201      	movs	r2, #1
    338c:	4b22      	ldr	r3, [pc, #136]	; (3418 <newLine+0xa8>)
    338e:	701a      	strb	r2, [r3, #0]
	blinkCursor();
    3390:	4b22      	ldr	r3, [pc, #136]	; (341c <newLine+0xac>)
    3392:	4798      	blx	r3
    3394:	4822      	ldr	r0, [pc, #136]	; (3420 <newLine+0xb0>)
    3396:	0004      	movs	r4, r0
    3398:	3418      	adds	r4, #24
    339a:	23f0      	movs	r3, #240	; 0xf0
    339c:	00db      	lsls	r3, r3, #3
    339e:	18c1      	adds	r1, r0, r3
{
    33a0:	0003      	movs	r3, r0
			consoleDisplay[i][j-1] = consoleDisplay[i][j];
    33a2:	785a      	ldrb	r2, [r3, #1]
    33a4:	701a      	strb	r2, [r3, #0]
    33a6:	3318      	adds	r3, #24
		for(int i = 0 ; i < 80 ; i++)
    33a8:	428b      	cmp	r3, r1
    33aa:	d1fa      	bne.n	33a2 <newLine+0x32>
    33ac:	3001      	adds	r0, #1
	for(int j = 1 ; j <= 24 ; j++)
    33ae:	42a0      	cmp	r0, r4
    33b0:	d1f3      	bne.n	339a <newLine+0x2a>
    33b2:	4b1c      	ldr	r3, [pc, #112]	; (3424 <newLine+0xb4>)
    33b4:	22f0      	movs	r2, #240	; 0xf0
    33b6:	00d2      	lsls	r2, r2, #3
    33b8:	1899      	adds	r1, r3, r2
		consoleDisplay[k][23] = 0x20;
    33ba:	2220      	movs	r2, #32
    33bc:	701a      	strb	r2, [r3, #0]
    33be:	3318      	adds	r3, #24
	for(int k = 0 ; k < 80 ; k ++)
    33c0:	428b      	cmp	r3, r1
    33c2:	d1fb      	bne.n	33bc <newLine+0x4c>
    33c4:	2600      	movs	r6, #0
    33c6:	4b16      	ldr	r3, [pc, #88]	; (3420 <newLine+0xb0>)
    33c8:	469a      	mov	sl, r3
			xCharPos = i;
    33ca:	4b11      	ldr	r3, [pc, #68]	; (3410 <newLine+0xa0>)
    33cc:	4699      	mov	r9, r3
			yCharPos = j;
    33ce:	4b11      	ldr	r3, [pc, #68]	; (3414 <newLine+0xa4>)
    33d0:	4698      	mov	r8, r3
    33d2:	4653      	mov	r3, sl
    33d4:	18f5      	adds	r5, r6, r3
{
    33d6:	2400      	movs	r4, #0
			drawChar(consoleDisplay[i][j]);
    33d8:	4f13      	ldr	r7, [pc, #76]	; (3428 <newLine+0xb8>)
			xCharPos = i;
    33da:	464b      	mov	r3, r9
    33dc:	801c      	strh	r4, [r3, #0]
			yCharPos = j;
    33de:	4643      	mov	r3, r8
    33e0:	801e      	strh	r6, [r3, #0]
			drawChar(consoleDisplay[i][j]);
    33e2:	7828      	ldrb	r0, [r5, #0]
    33e4:	47b8      	blx	r7
		for(int i = 0 ; i < 80 ; i++)
    33e6:	3401      	adds	r4, #1
    33e8:	3518      	adds	r5, #24
    33ea:	2c50      	cmp	r4, #80	; 0x50
    33ec:	d1f5      	bne.n	33da <newLine+0x6a>
	for(int j = 0 ; j < 24 ; j++)
    33ee:	3601      	adds	r6, #1
    33f0:	2e18      	cmp	r6, #24
    33f2:	d1ee      	bne.n	33d2 <newLine+0x62>
	xCharPos = tempCursorx;
    33f4:	4b06      	ldr	r3, [pc, #24]	; (3410 <newLine+0xa0>)
    33f6:	465a      	mov	r2, fp
    33f8:	801a      	strh	r2, [r3, #0]
	yCharPos = tempCursory;
    33fa:	4b06      	ldr	r3, [pc, #24]	; (3414 <newLine+0xa4>)
    33fc:	466a      	mov	r2, sp
    33fe:	8892      	ldrh	r2, [r2, #4]
    3400:	801a      	strh	r2, [r3, #0]
}
    3402:	b003      	add	sp, #12
    3404:	bc3c      	pop	{r2, r3, r4, r5}
    3406:	4690      	mov	r8, r2
    3408:	4699      	mov	r9, r3
    340a:	46a2      	mov	sl, r4
    340c:	46ab      	mov	fp, r5
    340e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3410:	200002b8 	.word	0x200002b8
    3414:	200002ba 	.word	0x200002ba
    3418:	20000024 	.word	0x20000024
    341c:	00003215 	.word	0x00003215
    3420:	200003c0 	.word	0x200003c0
    3424:	200003d7 	.word	0x200003d7
    3428:	0000312d 	.word	0x0000312d

0000342c <writeString>:

void writeString(const char str[])
{
    342c:	b5f0      	push	{r4, r5, r6, r7, lr}
    342e:	46c6      	mov	lr, r8
    3430:	b500      	push	{lr}
    3432:	0005      	movs	r5, r0
	int length = strlen(str);
    3434:	4b0c      	ldr	r3, [pc, #48]	; (3468 <writeString+0x3c>)
    3436:	4798      	blx	r3
	for(int i = 0; i < length; i++)
    3438:	2800      	cmp	r0, #0
    343a:	dd11      	ble.n	3460 <writeString+0x34>
    343c:	002c      	movs	r4, r5
    343e:	182d      	adds	r5, r5, r0
	{
		drawChar(str[i]);
    3440:	4f0a      	ldr	r7, [pc, #40]	; (346c <writeString+0x40>)
		if(xCharPos <= 80)
    3442:	4e0b      	ldr	r6, [pc, #44]	; (3470 <writeString+0x44>)
		xCharPos++;
    3444:	46b0      	mov	r8, r6
    3446:	e002      	b.n	344e <writeString+0x22>
    3448:	3401      	adds	r4, #1
	for(int i = 0; i < length; i++)
    344a:	42ac      	cmp	r4, r5
    344c:	d008      	beq.n	3460 <writeString+0x34>
		drawChar(str[i]);
    344e:	7820      	ldrb	r0, [r4, #0]
    3450:	47b8      	blx	r7
		if(xCharPos <= 80)
    3452:	8833      	ldrh	r3, [r6, #0]
    3454:	2b50      	cmp	r3, #80	; 0x50
    3456:	d8f7      	bhi.n	3448 <writeString+0x1c>
		xCharPos++;
    3458:	3301      	adds	r3, #1
    345a:	4642      	mov	r2, r8
    345c:	8013      	strh	r3, [r2, #0]
    345e:	e7f3      	b.n	3448 <writeString+0x1c>
	}
}
    3460:	bc04      	pop	{r2}
    3462:	4690      	mov	r8, r2
    3464:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3466:	46c0      	nop			; (mov r8, r8)
    3468:	00004bfb 	.word	0x00004bfb
    346c:	0000312d 	.word	0x0000312d
    3470:	200002b8 	.word	0x200002b8

00003474 <nullifyConsole>:

void nullifyConsole(void)
{
    3474:	4b08      	ldr	r3, [pc, #32]	; (3498 <nullifyConsole+0x24>)
    3476:	22f0      	movs	r2, #240	; 0xf0
    3478:	00d2      	lsls	r2, r2, #3
    347a:	1898      	adds	r0, r3, r2
	for(int i = 0 ; i < 80 ; i++)
	{
		for(int j = 0 ; j < 24 ; j++)
		{
			consoleDisplay[i][j] = 0x00;
    347c:	2100      	movs	r1, #0
    347e:	e002      	b.n	3486 <nullifyConsole+0x12>
    3480:	0013      	movs	r3, r2
	for(int i = 0 ; i < 80 ; i++)
    3482:	4290      	cmp	r0, r2
    3484:	d006      	beq.n	3494 <nullifyConsole+0x20>
    3486:	001a      	movs	r2, r3
    3488:	3218      	adds	r2, #24
			consoleDisplay[i][j] = 0x00;
    348a:	7019      	strb	r1, [r3, #0]
    348c:	3301      	adds	r3, #1
		for(int j = 0 ; j < 24 ; j++)
    348e:	4293      	cmp	r3, r2
    3490:	d1fb      	bne.n	348a <nullifyConsole+0x16>
    3492:	e7f5      	b.n	3480 <nullifyConsole+0xc>
		}
	}
}
    3494:	4770      	bx	lr
    3496:	46c0      	nop			; (mov r8, r8)
    3498:	200003c0 	.word	0x200003c0

0000349c <scanCodesContains>:

bool scanCodesContains(int scanCode)
{
	for(int i = 0 ; i < 70 ; i++)
	{
		if(scanCodes[i] == scanCode)
    349c:	4b09      	ldr	r3, [pc, #36]	; (34c4 <scanCodesContains+0x28>)
    349e:	681b      	ldr	r3, [r3, #0]
    34a0:	4298      	cmp	r0, r3
    34a2:	d00b      	beq.n	34bc <scanCodesContains+0x20>
    34a4:	4a07      	ldr	r2, [pc, #28]	; (34c4 <scanCodesContains+0x28>)
    34a6:	1d13      	adds	r3, r2, #4
    34a8:	3219      	adds	r2, #25
    34aa:	32ff      	adds	r2, #255	; 0xff
    34ac:	6819      	ldr	r1, [r3, #0]
    34ae:	4281      	cmp	r1, r0
    34b0:	d006      	beq.n	34c0 <scanCodesContains+0x24>
    34b2:	3304      	adds	r3, #4
	for(int i = 0 ; i < 70 ; i++)
    34b4:	4293      	cmp	r3, r2
    34b6:	d1f9      	bne.n	34ac <scanCodesContains+0x10>
		{
			return true;
		}
	}
	return false;
    34b8:	2000      	movs	r0, #0
    34ba:	e002      	b.n	34c2 <scanCodesContains+0x26>
			return true;
    34bc:	2001      	movs	r0, #1
    34be:	e000      	b.n	34c2 <scanCodesContains+0x26>
    34c0:	2001      	movs	r0, #1
}
    34c2:	4770      	bx	lr
    34c4:	20000050 	.word	0x20000050

000034c8 <keyDown>:

bool keyDown(int scancode)
{
	for(int i = 0 ; i < 20 ; i++)
	{
		if(keyDownBuffer[i] == scancode)
    34c8:	4b09      	ldr	r3, [pc, #36]	; (34f0 <keyDown+0x28>)
    34ca:	781b      	ldrb	r3, [r3, #0]
    34cc:	4298      	cmp	r0, r3
    34ce:	d00a      	beq.n	34e6 <keyDown+0x1e>
    34d0:	4907      	ldr	r1, [pc, #28]	; (34f0 <keyDown+0x28>)
    34d2:	1c4b      	adds	r3, r1, #1
    34d4:	3114      	adds	r1, #20
    34d6:	781a      	ldrb	r2, [r3, #0]
    34d8:	4282      	cmp	r2, r0
    34da:	d006      	beq.n	34ea <keyDown+0x22>
    34dc:	3301      	adds	r3, #1
	for(int i = 0 ; i < 20 ; i++)
    34de:	428b      	cmp	r3, r1
    34e0:	d1f9      	bne.n	34d6 <keyDown+0xe>
		{
			return true;
		}	
	}
	return false;
    34e2:	2000      	movs	r0, #0
}
    34e4:	4770      	bx	lr
			return true;
    34e6:	2001      	movs	r0, #1
    34e8:	e7fc      	b.n	34e4 <keyDown+0x1c>
    34ea:	2001      	movs	r0, #1
    34ec:	e7fa      	b.n	34e4 <keyDown+0x1c>
    34ee:	46c0      	nop			; (mov r8, r8)
    34f0:	20000028 	.word	0x20000028

000034f4 <printKeyboardBuffer>:
{
    34f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    34f6:	46d6      	mov	lr, sl
    34f8:	464f      	mov	r7, r9
    34fa:	4646      	mov	r6, r8
    34fc:	b5c0      	push	{r6, r7, lr}
    34fe:	b0cc      	sub	sp, #304	; 0x130
	unsigned char noCase[] =
    3500:	4dca      	ldr	r5, [pc, #808]	; (382c <printKeyboardBuffer+0x338>)
    3502:	2246      	movs	r2, #70	; 0x46
    3504:	0029      	movs	r1, r5
    3506:	a83a      	add	r0, sp, #232	; 0xe8
    3508:	4cc9      	ldr	r4, [pc, #804]	; (3830 <printKeyboardBuffer+0x33c>)
    350a:	47a0      	blx	r4
	unsigned char shiftCase[] =
    350c:	0029      	movs	r1, r5
    350e:	3148      	adds	r1, #72	; 0x48
    3510:	2246      	movs	r2, #70	; 0x46
    3512:	a828      	add	r0, sp, #160	; 0xa0
    3514:	47a0      	blx	r4
	unsigned char capsLockCase[] =
    3516:	4dc7      	ldr	r5, [pc, #796]	; (3834 <printKeyboardBuffer+0x340>)
    3518:	0029      	movs	r1, r5
    351a:	3110      	adds	r1, #16
    351c:	2246      	movs	r2, #70	; 0x46
    351e:	a816      	add	r0, sp, #88	; 0x58
    3520:	47a0      	blx	r4
	unsigned char controlCase[] =
    3522:	0029      	movs	r1, r5
    3524:	3158      	adds	r1, #88	; 0x58
    3526:	2246      	movs	r2, #70	; 0x46
    3528:	a804      	add	r0, sp, #16
    352a:	47a0      	blx	r4
    352c:	4fc2      	ldr	r7, [pc, #776]	; (3838 <printKeyboardBuffer+0x344>)
    352e:	003c      	movs	r4, r7
    3530:	3414      	adds	r4, #20
    3532:	003d      	movs	r5, r7
	bool controled = false;
    3534:	2300      	movs	r3, #0
    3536:	9303      	str	r3, [sp, #12]
	bool shifted = false;
    3538:	9302      	str	r3, [sp, #8]
			controled = true;
    353a:	2201      	movs	r2, #1
    353c:	e004      	b.n	3548 <printKeyboardBuffer+0x54>
		if(scanCodeBuffer[i] == 22)
    353e:	2916      	cmp	r1, #22
    3540:	d011      	beq.n	3566 <printKeyboardBuffer+0x72>
    3542:	3501      	adds	r5, #1
	for(int i=0; i<20; i++)
    3544:	42a5      	cmp	r5, r4
    3546:	d010      	beq.n	356a <printKeyboardBuffer+0x76>
		if((scanCodeBuffer[i] == 13) | (scanCodeBuffer[i] == 49))
    3548:	7829      	ldrb	r1, [r5, #0]
    354a:	000b      	movs	r3, r1
    354c:	3b0d      	subs	r3, #13
    354e:	425e      	negs	r6, r3
    3550:	415e      	adcs	r6, r3
    3552:	46b4      	mov	ip, r6
    3554:	0008      	movs	r0, r1
    3556:	3831      	subs	r0, #49	; 0x31
    3558:	4243      	negs	r3, r0
    355a:	4143      	adcs	r3, r0
    355c:	4660      	mov	r0, ip
    355e:	4318      	orrs	r0, r3
    3560:	d0ed      	beq.n	353e <printKeyboardBuffer+0x4a>
			shifted = true;
    3562:	9002      	str	r0, [sp, #8]
    3564:	e7eb      	b.n	353e <printKeyboardBuffer+0x4a>
			controled = true;
    3566:	9203      	str	r2, [sp, #12]
    3568:	e7eb      	b.n	3542 <printKeyboardBuffer+0x4e>
    356a:	4eb4      	ldr	r6, [pc, #720]	; (383c <printKeyboardBuffer+0x348>)
	for(int i=0; i<20; i++)
    356c:	003c      	movs	r4, r7
		if(!keyDown(scanCodeBuffer[i]))
    356e:	4bb4      	ldr	r3, [pc, #720]	; (3840 <printKeyboardBuffer+0x34c>)
    3570:	469a      	mov	sl, r3
    3572:	e00b      	b.n	358c <printKeyboardBuffer+0x98>
				sendChar(0x1B);
    3574:	301b      	adds	r0, #27
    3576:	4bb3      	ldr	r3, [pc, #716]	; (3844 <printKeyboardBuffer+0x350>)
    3578:	4798      	blx	r3
				if(localEcho)
    357a:	4bb3      	ldr	r3, [pc, #716]	; (3848 <printKeyboardBuffer+0x354>)
    357c:	781b      	ldrb	r3, [r3, #0]
    357e:	2b00      	cmp	r3, #0
    3580:	d14a      	bne.n	3618 <printKeyboardBuffer+0x124>
    3582:	3401      	adds	r4, #1
    3584:	3601      	adds	r6, #1
	for(int i = 0 ; i < 20 ; i++)
    3586:	42ac      	cmp	r4, r5
    3588:	d100      	bne.n	358c <printKeyboardBuffer+0x98>
    358a:	e144      	b.n	3816 <printKeyboardBuffer+0x322>
    358c:	9401      	str	r4, [sp, #4]
		if(!keyDown(scanCodeBuffer[i]))
    358e:	7823      	ldrb	r3, [r4, #0]
    3590:	4698      	mov	r8, r3
    3592:	0018      	movs	r0, r3
    3594:	47d0      	blx	sl
    3596:	2800      	cmp	r0, #0
    3598:	d1f3      	bne.n	3582 <printKeyboardBuffer+0x8e>
			keyDownBuffer[i] = scanCodeBuffer[i];
    359a:	4643      	mov	r3, r8
    359c:	7033      	strb	r3, [r6, #0]
			if(scanCodeBuffer[i] == 0x00)  //this is escape
    359e:	4643      	mov	r3, r8
    35a0:	2b00      	cmp	r3, #0
    35a2:	d0e7      	beq.n	3574 <printKeyboardBuffer+0x80>
			else if(scanCodeBuffer[i] == 0x01)	//setup button, do something weird here
    35a4:	4643      	mov	r3, r8
    35a6:	2b01      	cmp	r3, #1
    35a8:	d0eb      	beq.n	3582 <printKeyboardBuffer+0x8e>
			else if(scanCodeBuffer[i] == 67)		//Break key, set by break enable in settings
    35aa:	2b43      	cmp	r3, #67	; 0x43
    35ac:	d03a      	beq.n	3624 <printKeyboardBuffer+0x130>
			else if(scanCodeBuffer[i] == 58)   //Return key
    35ae:	4643      	mov	r3, r8
    35b0:	2b3a      	cmp	r3, #58	; 0x3a
    35b2:	d03f      	beq.n	3634 <printKeyboardBuffer+0x140>
			else if(scanCodeBuffer[i] == 12)		//caps lock
    35b4:	4643      	mov	r3, r8
    35b6:	2b0c      	cmp	r3, #12
    35b8:	d078      	beq.n	36ac <printKeyboardBuffer+0x1b8>
			else if(scanCodeBuffer[i] == 3)			//scroll lock
    35ba:	4643      	mov	r3, r8
    35bc:	2b03      	cmp	r3, #3
    35be:	d07b      	beq.n	36b8 <printKeyboardBuffer+0x1c4>
			else if(scanCodeBuffer[i] == 35) //left
    35c0:	4643      	mov	r3, r8
    35c2:	2b23      	cmp	r3, #35	; 0x23
    35c4:	d07e      	beq.n	36c4 <printKeyboardBuffer+0x1d0>
			else if(scanCodeBuffer[i]  == 45)	//down
    35c6:	4643      	mov	r3, r8
    35c8:	2b2d      	cmp	r3, #45	; 0x2d
    35ca:	d100      	bne.n	35ce <printKeyboardBuffer+0xda>
    35cc:	e097      	b.n	36fe <printKeyboardBuffer+0x20a>
			else if(scanCodeBuffer[i]  == 55)	//up
    35ce:	4643      	mov	r3, r8
    35d0:	2b37      	cmp	r3, #55	; 0x37
    35d2:	d100      	bne.n	35d6 <printKeyboardBuffer+0xe2>
    35d4:	e0b0      	b.n	3738 <printKeyboardBuffer+0x244>
			else if(scanCodeBuffer[i]  == 65)	//right
    35d6:	4643      	mov	r3, r8
    35d8:	2b41      	cmp	r3, #65	; 0x41
    35da:	d100      	bne.n	35de <printKeyboardBuffer+0xea>
    35dc:	e0c9      	b.n	3772 <printKeyboardBuffer+0x27e>
				if(controled)
    35de:	9b03      	ldr	r3, [sp, #12]
    35e0:	2b00      	cmp	r3, #0
    35e2:	d000      	beq.n	35e6 <printKeyboardBuffer+0xf2>
    35e4:	e0e2      	b.n	37ac <printKeyboardBuffer+0x2b8>
				else if(capsLock)
    35e6:	4b99      	ldr	r3, [pc, #612]	; (384c <printKeyboardBuffer+0x358>)
    35e8:	781b      	ldrb	r3, [r3, #0]
    35ea:	2b00      	cmp	r3, #0
    35ec:	d000      	beq.n	35f0 <printKeyboardBuffer+0xfc>
    35ee:	e0f0      	b.n	37d2 <printKeyboardBuffer+0x2de>
				else if(shifted)
    35f0:	9b02      	ldr	r3, [sp, #8]
    35f2:	2b00      	cmp	r3, #0
    35f4:	d100      	bne.n	35f8 <printKeyboardBuffer+0x104>
    35f6:	e0fd      	b.n	37f4 <printKeyboardBuffer+0x300>
					sendChar(shiftCase[scanCodeBuffer[i]]);
    35f8:	ab28      	add	r3, sp, #160	; 0xa0
    35fa:	4642      	mov	r2, r8
    35fc:	5c98      	ldrb	r0, [r3, r2]
    35fe:	4b91      	ldr	r3, [pc, #580]	; (3844 <printKeyboardBuffer+0x350>)
    3600:	4798      	blx	r3
					if(localEcho)
    3602:	4b91      	ldr	r3, [pc, #580]	; (3848 <printKeyboardBuffer+0x354>)
    3604:	781b      	ldrb	r3, [r3, #0]
    3606:	2b00      	cmp	r3, #0
    3608:	d0bb      	beq.n	3582 <printKeyboardBuffer+0x8e>
						parseChar(shiftCase[scanCodeBuffer[i]]);
    360a:	9b01      	ldr	r3, [sp, #4]
    360c:	781b      	ldrb	r3, [r3, #0]
    360e:	aa28      	add	r2, sp, #160	; 0xa0
    3610:	5cd0      	ldrb	r0, [r2, r3]
    3612:	4b8f      	ldr	r3, [pc, #572]	; (3850 <printKeyboardBuffer+0x35c>)
    3614:	4798      	blx	r3
    3616:	e7b4      	b.n	3582 <printKeyboardBuffer+0x8e>
					ring_put(ouroboros,0x1B);
    3618:	4b8e      	ldr	r3, [pc, #568]	; (3854 <printKeyboardBuffer+0x360>)
    361a:	6818      	ldr	r0, [r3, #0]
    361c:	211b      	movs	r1, #27
    361e:	4b8e      	ldr	r3, [pc, #568]	; (3858 <printKeyboardBuffer+0x364>)
    3620:	4798      	blx	r3
    3622:	e7ae      	b.n	3582 <printKeyboardBuffer+0x8e>
				if(breakEnable)
    3624:	4b8d      	ldr	r3, [pc, #564]	; (385c <printKeyboardBuffer+0x368>)
    3626:	781b      	ldrb	r3, [r3, #0]
    3628:	2b00      	cmp	r3, #0
    362a:	d0aa      	beq.n	3582 <printKeyboardBuffer+0x8e>
					sendChar(0x00);
    362c:	2000      	movs	r0, #0
    362e:	4b85      	ldr	r3, [pc, #532]	; (3844 <printKeyboardBuffer+0x350>)
    3630:	4798      	blx	r3
    3632:	e7a6      	b.n	3582 <printKeyboardBuffer+0x8e>
				if(lineFeedNewLine == 1)  //This is Windows; CRLF
    3634:	4b8a      	ldr	r3, [pc, #552]	; (3860 <printKeyboardBuffer+0x36c>)
    3636:	681b      	ldr	r3, [r3, #0]
    3638:	2b01      	cmp	r3, #1
    363a:	d014      	beq.n	3666 <printKeyboardBuffer+0x172>
				if(lineFeedNewLine == 2)  //This is Unix, sends LF
    363c:	4b88      	ldr	r3, [pc, #544]	; (3860 <printKeyboardBuffer+0x36c>)
    363e:	681b      	ldr	r3, [r3, #0]
    3640:	2b02      	cmp	r3, #2
    3642:	d026      	beq.n	3692 <printKeyboardBuffer+0x19e>
				if(lineFeedNewLine == 3)  //This is classic mac, sends CR
    3644:	4b86      	ldr	r3, [pc, #536]	; (3860 <printKeyboardBuffer+0x36c>)
    3646:	681b      	ldr	r3, [r3, #0]
    3648:	2b03      	cmp	r3, #3
    364a:	d19a      	bne.n	3582 <printKeyboardBuffer+0x8e>
					sendChar(0x0D);
    364c:	200d      	movs	r0, #13
    364e:	4b7d      	ldr	r3, [pc, #500]	; (3844 <printKeyboardBuffer+0x350>)
    3650:	4798      	blx	r3
					if(localEcho)
    3652:	4b7d      	ldr	r3, [pc, #500]	; (3848 <printKeyboardBuffer+0x354>)
    3654:	781b      	ldrb	r3, [r3, #0]
    3656:	2b00      	cmp	r3, #0
    3658:	d093      	beq.n	3582 <printKeyboardBuffer+0x8e>
						ring_put(ouroboros, 0x0D);
    365a:	4b7e      	ldr	r3, [pc, #504]	; (3854 <printKeyboardBuffer+0x360>)
    365c:	6818      	ldr	r0, [r3, #0]
    365e:	210d      	movs	r1, #13
    3660:	4b7d      	ldr	r3, [pc, #500]	; (3858 <printKeyboardBuffer+0x364>)
    3662:	4798      	blx	r3
    3664:	e78d      	b.n	3582 <printKeyboardBuffer+0x8e>
					sendChar(0x0D);
    3666:	200d      	movs	r0, #13
    3668:	4b76      	ldr	r3, [pc, #472]	; (3844 <printKeyboardBuffer+0x350>)
    366a:	4698      	mov	r8, r3
    366c:	4798      	blx	r3
					sendChar(0x0A);
    366e:	200a      	movs	r0, #10
    3670:	47c0      	blx	r8
					if(localEcho)
    3672:	4b75      	ldr	r3, [pc, #468]	; (3848 <printKeyboardBuffer+0x354>)
    3674:	781b      	ldrb	r3, [r3, #0]
    3676:	2b00      	cmp	r3, #0
    3678:	d0e0      	beq.n	363c <printKeyboardBuffer+0x148>
						ring_put(ouroboros, 0x0D);
    367a:	4b76      	ldr	r3, [pc, #472]	; (3854 <printKeyboardBuffer+0x360>)
    367c:	4699      	mov	r9, r3
    367e:	210d      	movs	r1, #13
    3680:	6818      	ldr	r0, [r3, #0]
    3682:	4b75      	ldr	r3, [pc, #468]	; (3858 <printKeyboardBuffer+0x364>)
    3684:	4698      	mov	r8, r3
    3686:	4798      	blx	r3
						ring_put(ouroboros, 0x0A);
    3688:	464b      	mov	r3, r9
    368a:	6818      	ldr	r0, [r3, #0]
    368c:	210a      	movs	r1, #10
    368e:	47c0      	blx	r8
    3690:	e7d4      	b.n	363c <printKeyboardBuffer+0x148>
					sendChar(0x0A);
    3692:	200a      	movs	r0, #10
    3694:	4b6b      	ldr	r3, [pc, #428]	; (3844 <printKeyboardBuffer+0x350>)
    3696:	4798      	blx	r3
					if(localEcho)
    3698:	4b6b      	ldr	r3, [pc, #428]	; (3848 <printKeyboardBuffer+0x354>)
    369a:	781b      	ldrb	r3, [r3, #0]
    369c:	2b00      	cmp	r3, #0
    369e:	d0d1      	beq.n	3644 <printKeyboardBuffer+0x150>
						ring_put(ouroboros, 0x0A);
    36a0:	4b6c      	ldr	r3, [pc, #432]	; (3854 <printKeyboardBuffer+0x360>)
    36a2:	6818      	ldr	r0, [r3, #0]
    36a4:	210a      	movs	r1, #10
    36a6:	4b6c      	ldr	r3, [pc, #432]	; (3858 <printKeyboardBuffer+0x364>)
    36a8:	4798      	blx	r3
    36aa:	e7cb      	b.n	3644 <printKeyboardBuffer+0x150>
				capsLock = !capsLock;
    36ac:	4a67      	ldr	r2, [pc, #412]	; (384c <printKeyboardBuffer+0x358>)
    36ae:	7813      	ldrb	r3, [r2, #0]
    36b0:	2101      	movs	r1, #1
    36b2:	404b      	eors	r3, r1
    36b4:	7013      	strb	r3, [r2, #0]
    36b6:	e764      	b.n	3582 <printKeyboardBuffer+0x8e>
				scrollLock = !scrollLock;
    36b8:	4a6a      	ldr	r2, [pc, #424]	; (3864 <printKeyboardBuffer+0x370>)
    36ba:	7813      	ldrb	r3, [r2, #0]
    36bc:	2101      	movs	r1, #1
    36be:	404b      	eors	r3, r1
    36c0:	7013      	strb	r3, [r2, #0]
    36c2:	e75e      	b.n	3582 <printKeyboardBuffer+0x8e>
				sendChar(0x1B);
    36c4:	201b      	movs	r0, #27
    36c6:	4b5f      	ldr	r3, [pc, #380]	; (3844 <printKeyboardBuffer+0x350>)
    36c8:	4698      	mov	r8, r3
    36ca:	4798      	blx	r3
				sendChar(0x5B);
    36cc:	205b      	movs	r0, #91	; 0x5b
    36ce:	47c0      	blx	r8
				sendChar(0x44);
    36d0:	2044      	movs	r0, #68	; 0x44
    36d2:	47c0      	blx	r8
				if(localEcho)
    36d4:	4b5c      	ldr	r3, [pc, #368]	; (3848 <printKeyboardBuffer+0x354>)
    36d6:	781b      	ldrb	r3, [r3, #0]
    36d8:	2b00      	cmp	r3, #0
    36da:	d100      	bne.n	36de <printKeyboardBuffer+0x1ea>
    36dc:	e751      	b.n	3582 <printKeyboardBuffer+0x8e>
					ring_put(ouroboros, 0x1B);
    36de:	4b5d      	ldr	r3, [pc, #372]	; (3854 <printKeyboardBuffer+0x360>)
    36e0:	4699      	mov	r9, r3
    36e2:	211b      	movs	r1, #27
    36e4:	6818      	ldr	r0, [r3, #0]
    36e6:	4b5c      	ldr	r3, [pc, #368]	; (3858 <printKeyboardBuffer+0x364>)
    36e8:	4698      	mov	r8, r3
    36ea:	4798      	blx	r3
					ring_put(ouroboros, 0x5B);
    36ec:	215b      	movs	r1, #91	; 0x5b
    36ee:	464b      	mov	r3, r9
    36f0:	6818      	ldr	r0, [r3, #0]
    36f2:	47c0      	blx	r8
					ring_put(ouroboros, 0x44);
    36f4:	464b      	mov	r3, r9
    36f6:	6818      	ldr	r0, [r3, #0]
    36f8:	2144      	movs	r1, #68	; 0x44
    36fa:	47c0      	blx	r8
    36fc:	e741      	b.n	3582 <printKeyboardBuffer+0x8e>
				sendChar(0x1B);
    36fe:	201b      	movs	r0, #27
    3700:	4b50      	ldr	r3, [pc, #320]	; (3844 <printKeyboardBuffer+0x350>)
    3702:	4698      	mov	r8, r3
    3704:	4798      	blx	r3
				sendChar(0x5B);
    3706:	205b      	movs	r0, #91	; 0x5b
    3708:	47c0      	blx	r8
				sendChar(0x42);
    370a:	2042      	movs	r0, #66	; 0x42
    370c:	47c0      	blx	r8
				if(localEcho)
    370e:	4b4e      	ldr	r3, [pc, #312]	; (3848 <printKeyboardBuffer+0x354>)
    3710:	781b      	ldrb	r3, [r3, #0]
    3712:	2b00      	cmp	r3, #0
    3714:	d100      	bne.n	3718 <printKeyboardBuffer+0x224>
    3716:	e734      	b.n	3582 <printKeyboardBuffer+0x8e>
					ring_put(ouroboros, 0x1B);
    3718:	4b4e      	ldr	r3, [pc, #312]	; (3854 <printKeyboardBuffer+0x360>)
    371a:	4699      	mov	r9, r3
    371c:	211b      	movs	r1, #27
    371e:	6818      	ldr	r0, [r3, #0]
    3720:	4b4d      	ldr	r3, [pc, #308]	; (3858 <printKeyboardBuffer+0x364>)
    3722:	4698      	mov	r8, r3
    3724:	4798      	blx	r3
					ring_put(ouroboros, 0x5B);
    3726:	215b      	movs	r1, #91	; 0x5b
    3728:	464b      	mov	r3, r9
    372a:	6818      	ldr	r0, [r3, #0]
    372c:	47c0      	blx	r8
					ring_put(ouroboros, 0x42);
    372e:	464b      	mov	r3, r9
    3730:	6818      	ldr	r0, [r3, #0]
    3732:	2142      	movs	r1, #66	; 0x42
    3734:	47c0      	blx	r8
    3736:	e724      	b.n	3582 <printKeyboardBuffer+0x8e>
				sendChar(0x1B);
    3738:	201b      	movs	r0, #27
    373a:	4b42      	ldr	r3, [pc, #264]	; (3844 <printKeyboardBuffer+0x350>)
    373c:	4698      	mov	r8, r3
    373e:	4798      	blx	r3
				sendChar(0x5B);
    3740:	205b      	movs	r0, #91	; 0x5b
    3742:	47c0      	blx	r8
				sendChar(0x41);
    3744:	2041      	movs	r0, #65	; 0x41
    3746:	47c0      	blx	r8
				if(localEcho)
    3748:	4b3f      	ldr	r3, [pc, #252]	; (3848 <printKeyboardBuffer+0x354>)
    374a:	781b      	ldrb	r3, [r3, #0]
    374c:	2b00      	cmp	r3, #0
    374e:	d100      	bne.n	3752 <printKeyboardBuffer+0x25e>
    3750:	e717      	b.n	3582 <printKeyboardBuffer+0x8e>
					ring_put(ouroboros, 0x1B);
    3752:	4b40      	ldr	r3, [pc, #256]	; (3854 <printKeyboardBuffer+0x360>)
    3754:	4699      	mov	r9, r3
    3756:	211b      	movs	r1, #27
    3758:	6818      	ldr	r0, [r3, #0]
    375a:	4b3f      	ldr	r3, [pc, #252]	; (3858 <printKeyboardBuffer+0x364>)
    375c:	4698      	mov	r8, r3
    375e:	4798      	blx	r3
					ring_put(ouroboros, 0x5B);
    3760:	215b      	movs	r1, #91	; 0x5b
    3762:	464b      	mov	r3, r9
    3764:	6818      	ldr	r0, [r3, #0]
    3766:	47c0      	blx	r8
					ring_put(ouroboros, 0x41);
    3768:	464b      	mov	r3, r9
    376a:	6818      	ldr	r0, [r3, #0]
    376c:	2141      	movs	r1, #65	; 0x41
    376e:	47c0      	blx	r8
    3770:	e707      	b.n	3582 <printKeyboardBuffer+0x8e>
				sendChar(0x1B);
    3772:	201b      	movs	r0, #27
    3774:	4b33      	ldr	r3, [pc, #204]	; (3844 <printKeyboardBuffer+0x350>)
    3776:	4698      	mov	r8, r3
    3778:	4798      	blx	r3
				sendChar(0x5B);
    377a:	205b      	movs	r0, #91	; 0x5b
    377c:	47c0      	blx	r8
				sendChar(0x43);
    377e:	2043      	movs	r0, #67	; 0x43
    3780:	47c0      	blx	r8
				if(localEcho)
    3782:	4b31      	ldr	r3, [pc, #196]	; (3848 <printKeyboardBuffer+0x354>)
    3784:	781b      	ldrb	r3, [r3, #0]
    3786:	2b00      	cmp	r3, #0
    3788:	d100      	bne.n	378c <printKeyboardBuffer+0x298>
    378a:	e6fa      	b.n	3582 <printKeyboardBuffer+0x8e>
					ring_put(ouroboros, 0x1B);
    378c:	4b31      	ldr	r3, [pc, #196]	; (3854 <printKeyboardBuffer+0x360>)
    378e:	4699      	mov	r9, r3
    3790:	211b      	movs	r1, #27
    3792:	6818      	ldr	r0, [r3, #0]
    3794:	4b30      	ldr	r3, [pc, #192]	; (3858 <printKeyboardBuffer+0x364>)
    3796:	4698      	mov	r8, r3
    3798:	4798      	blx	r3
					ring_put(ouroboros, 0x5B);
    379a:	215b      	movs	r1, #91	; 0x5b
    379c:	464b      	mov	r3, r9
    379e:	6818      	ldr	r0, [r3, #0]
    37a0:	47c0      	blx	r8
					ring_put(ouroboros, 0x43);
    37a2:	464b      	mov	r3, r9
    37a4:	6818      	ldr	r0, [r3, #0]
    37a6:	2143      	movs	r1, #67	; 0x43
    37a8:	47c0      	blx	r8
    37aa:	e6ea      	b.n	3582 <printKeyboardBuffer+0x8e>
					sendChar(controlCase[scanCodeBuffer[i]]);
    37ac:	ab04      	add	r3, sp, #16
    37ae:	4642      	mov	r2, r8
    37b0:	5c98      	ldrb	r0, [r3, r2]
    37b2:	4b24      	ldr	r3, [pc, #144]	; (3844 <printKeyboardBuffer+0x350>)
    37b4:	4798      	blx	r3
					if(localEcho)
    37b6:	4b24      	ldr	r3, [pc, #144]	; (3848 <printKeyboardBuffer+0x354>)
    37b8:	781b      	ldrb	r3, [r3, #0]
    37ba:	2b00      	cmp	r3, #0
    37bc:	d100      	bne.n	37c0 <printKeyboardBuffer+0x2cc>
    37be:	e6e0      	b.n	3582 <printKeyboardBuffer+0x8e>
						ring_put(ouroboros, controlCase[scanCodeBuffer[i]]);
    37c0:	9b01      	ldr	r3, [sp, #4]
    37c2:	781b      	ldrb	r3, [r3, #0]
    37c4:	aa04      	add	r2, sp, #16
    37c6:	5cd1      	ldrb	r1, [r2, r3]
    37c8:	4b22      	ldr	r3, [pc, #136]	; (3854 <printKeyboardBuffer+0x360>)
    37ca:	6818      	ldr	r0, [r3, #0]
    37cc:	4b22      	ldr	r3, [pc, #136]	; (3858 <printKeyboardBuffer+0x364>)
    37ce:	4798      	blx	r3
    37d0:	e6d7      	b.n	3582 <printKeyboardBuffer+0x8e>
					sendChar(capsLockCase[scanCodeBuffer[i]]);
    37d2:	ab16      	add	r3, sp, #88	; 0x58
    37d4:	4642      	mov	r2, r8
    37d6:	5c98      	ldrb	r0, [r3, r2]
    37d8:	4b1a      	ldr	r3, [pc, #104]	; (3844 <printKeyboardBuffer+0x350>)
    37da:	4798      	blx	r3
					if(localEcho)
    37dc:	4b1a      	ldr	r3, [pc, #104]	; (3848 <printKeyboardBuffer+0x354>)
    37de:	781b      	ldrb	r3, [r3, #0]
    37e0:	2b00      	cmp	r3, #0
    37e2:	d100      	bne.n	37e6 <printKeyboardBuffer+0x2f2>
    37e4:	e6cd      	b.n	3582 <printKeyboardBuffer+0x8e>
						parseChar(capsLockCase[scanCodeBuffer[i]]);
    37e6:	9b01      	ldr	r3, [sp, #4]
    37e8:	781b      	ldrb	r3, [r3, #0]
    37ea:	aa16      	add	r2, sp, #88	; 0x58
    37ec:	5cd0      	ldrb	r0, [r2, r3]
    37ee:	4b18      	ldr	r3, [pc, #96]	; (3850 <printKeyboardBuffer+0x35c>)
    37f0:	4798      	blx	r3
    37f2:	e6c6      	b.n	3582 <printKeyboardBuffer+0x8e>
					sendChar(noCase[scanCodeBuffer[i]]);
    37f4:	ab3a      	add	r3, sp, #232	; 0xe8
    37f6:	4642      	mov	r2, r8
    37f8:	5c98      	ldrb	r0, [r3, r2]
    37fa:	4b12      	ldr	r3, [pc, #72]	; (3844 <printKeyboardBuffer+0x350>)
    37fc:	4798      	blx	r3
					if(localEcho)
    37fe:	4b12      	ldr	r3, [pc, #72]	; (3848 <printKeyboardBuffer+0x354>)
    3800:	781b      	ldrb	r3, [r3, #0]
    3802:	2b00      	cmp	r3, #0
    3804:	d100      	bne.n	3808 <printKeyboardBuffer+0x314>
    3806:	e6bc      	b.n	3582 <printKeyboardBuffer+0x8e>
						parseChar(noCase[scanCodeBuffer[i]]);
    3808:	9b01      	ldr	r3, [sp, #4]
    380a:	781b      	ldrb	r3, [r3, #0]
    380c:	aa3a      	add	r2, sp, #232	; 0xe8
    380e:	5cd0      	ldrb	r0, [r2, r3]
    3810:	4b0f      	ldr	r3, [pc, #60]	; (3850 <printKeyboardBuffer+0x35c>)
    3812:	4798      	blx	r3
    3814:	e6b5      	b.n	3582 <printKeyboardBuffer+0x8e>
		scanCodeBuffer[i] = 0xFF;
    3816:	23ff      	movs	r3, #255	; 0xff
    3818:	703b      	strb	r3, [r7, #0]
    381a:	3701      	adds	r7, #1
	for(int i = 0 ; i < 20 ; i++)
    381c:	42bc      	cmp	r4, r7
    381e:	d1fb      	bne.n	3818 <printKeyboardBuffer+0x324>
}
    3820:	b04c      	add	sp, #304	; 0x130
    3822:	bc1c      	pop	{r2, r3, r4}
    3824:	4690      	mov	r8, r2
    3826:	4699      	mov	r9, r3
    3828:	46a2      	mov	sl, r4
    382a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    382c:	00007a8c 	.word	0x00007a8c
    3830:	000047ad 	.word	0x000047ad
    3834:	00007b0c 	.word	0x00007b0c
    3838:	2000003c 	.word	0x2000003c
    383c:	20000028 	.word	0x20000028
    3840:	000034c9 	.word	0x000034c9
    3844:	00001739 	.word	0x00001739
    3848:	200002bf 	.word	0x200002bf
    384c:	20000334 	.word	0x20000334
    3850:	000013e1 	.word	0x000013e1
    3854:	2000035c 	.word	0x2000035c
    3858:	00000141 	.word	0x00000141
    385c:	200002bc 	.word	0x200002bc
    3860:	20000170 	.word	0x20000170
    3864:	20000354 	.word	0x20000354

00003868 <removeFromKeyDown>:

void removeFromKeyDown(int scancode)
{
    3868:	b510      	push	{r4, lr}
    386a:	4b07      	ldr	r3, [pc, #28]	; (3888 <removeFromKeyDown+0x20>)
    386c:	0019      	movs	r1, r3
    386e:	3114      	adds	r1, #20
	for(int i = 0 ; i < 20 ; i++)
	{
		if(keyDownBuffer[i] == scancode)
		{
			keyDownBuffer[i] = 0xFF;
    3870:	24ff      	movs	r4, #255	; 0xff
    3872:	e002      	b.n	387a <removeFromKeyDown+0x12>
    3874:	3301      	adds	r3, #1
	for(int i = 0 ; i < 20 ; i++)
    3876:	428b      	cmp	r3, r1
    3878:	d004      	beq.n	3884 <removeFromKeyDown+0x1c>
		if(keyDownBuffer[i] == scancode)
    387a:	781a      	ldrb	r2, [r3, #0]
    387c:	4282      	cmp	r2, r0
    387e:	d1f9      	bne.n	3874 <removeFromKeyDown+0xc>
			keyDownBuffer[i] = 0xFF;
    3880:	701c      	strb	r4, [r3, #0]
    3882:	e7f7      	b.n	3874 <removeFromKeyDown+0xc>
		}
	}
}
    3884:	bd10      	pop	{r4, pc}
    3886:	46c0      	nop			; (mov r8, r8)
    3888:	20000028 	.word	0x20000028

0000388c <readKeyboard>:
{
    388c:	b5f0      	push	{r4, r5, r6, r7, lr}
    388e:	46de      	mov	lr, fp
    3890:	4657      	mov	r7, sl
    3892:	464e      	mov	r6, r9
    3894:	4645      	mov	r5, r8
    3896:	b5e0      	push	{r5, r6, r7, lr}
    3898:	b083      	sub	sp, #12
    389a:	4e6d      	ldr	r6, [pc, #436]	; (3a50 <readKeyboard+0x1c4>)
    389c:	0031      	movs	r1, r6
    389e:	3119      	adds	r1, #25
    38a0:	31ff      	adds	r1, #255	; 0xff
    38a2:	0033      	movs	r3, r6
		scanCodes[i] = 0xFF;
    38a4:	22ff      	movs	r2, #255	; 0xff
    38a6:	c304      	stmia	r3!, {r2}
	for(i = 0 ; i < 70 ; i++)
    38a8:	428b      	cmp	r3, r1
    38aa:	d1fc      	bne.n	38a6 <readKeyboard+0x1a>
	PORT->Group[0].WRCONFIG.bit.DRVSTR = 1;
    38ac:	4a69      	ldr	r2, [pc, #420]	; (3a54 <readKeyboard+0x1c8>)
    38ae:	6a91      	ldr	r1, [r2, #40]	; 0x28
    38b0:	2380      	movs	r3, #128	; 0x80
    38b2:	03db      	lsls	r3, r3, #15
    38b4:	430b      	orrs	r3, r1
    38b6:	6293      	str	r3, [r2, #40]	; 0x28
    38b8:	4c67      	ldr	r4, [pc, #412]	; (3a58 <readKeyboard+0x1cc>)
    38ba:	341c      	adds	r4, #28
    38bc:	4b66      	ldr	r3, [pc, #408]	; (3a58 <readKeyboard+0x1cc>)
		REG_PORT_DIRSET0 = kb_col[i];
    38be:	4867      	ldr	r0, [pc, #412]	; (3a5c <readKeyboard+0x1d0>)
		REG_PORT_OUTCLR0 = kb_col[i];
    38c0:	4967      	ldr	r1, [pc, #412]	; (3a60 <readKeyboard+0x1d4>)
		REG_PORT_DIRSET0 = kb_col[i];
    38c2:	681a      	ldr	r2, [r3, #0]
    38c4:	6002      	str	r2, [r0, #0]
		REG_PORT_OUTCLR0 = kb_col[i];
    38c6:	cb04      	ldmia	r3!, {r2}
    38c8:	600a      	str	r2, [r1, #0]
	for (i = 0; i < NUM_COL; i++) {
    38ca:	42a3      	cmp	r3, r4
    38cc:	d1f9      	bne.n	38c2 <readKeyboard+0x36>
    38ce:	2200      	movs	r2, #0
		REG_PORT_DIRCLR0 = kb_row[i];
    38d0:	4b64      	ldr	r3, [pc, #400]	; (3a64 <readKeyboard+0x1d8>)
    38d2:	469c      	mov	ip, r3
    38d4:	4f64      	ldr	r7, [pc, #400]	; (3a68 <readKeyboard+0x1dc>)
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.PULLEN = 1;
    38d6:	4d65      	ldr	r5, [pc, #404]	; (3a6c <readKeyboard+0x1e0>)
    38d8:	2404      	movs	r4, #4
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.INEN = 1;
    38da:	2002      	movs	r0, #2
		REG_PORT_DIRCLR0 = kb_row[i];
    38dc:	4663      	mov	r3, ip
    38de:	58d3      	ldr	r3, [r2, r3]
    38e0:	603b      	str	r3, [r7, #0]
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.PULLEN = 1;
    38e2:	5953      	ldr	r3, [r2, r5]
    38e4:	4962      	ldr	r1, [pc, #392]	; (3a70 <readKeyboard+0x1e4>)
    38e6:	4688      	mov	r8, r1
    38e8:	4443      	add	r3, r8
    38ea:	7819      	ldrb	r1, [r3, #0]
    38ec:	4321      	orrs	r1, r4
    38ee:	7019      	strb	r1, [r3, #0]
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.INEN = 1;
    38f0:	7819      	ldrb	r1, [r3, #0]
    38f2:	4301      	orrs	r1, r0
    38f4:	7019      	strb	r1, [r3, #0]
    38f6:	3204      	adds	r2, #4
	for (i = 0; i < NUM_ROW; i++) {
    38f8:	2a28      	cmp	r2, #40	; 0x28
    38fa:	d1ef      	bne.n	38dc <readKeyboard+0x50>
    38fc:	4b56      	ldr	r3, [pc, #344]	; (3a58 <readKeyboard+0x1cc>)
    38fe:	4699      	mov	r9, r3
    3900:	2300      	movs	r3, #0
    3902:	4698      	mov	r8, r3
    3904:	2200      	movs	r2, #0
		REG_PORT_OUTSET0 = kb_col[i];
    3906:	4b5b      	ldr	r3, [pc, #364]	; (3a74 <readKeyboard+0x1e8>)
    3908:	469b      	mov	fp, r3
			if((PORT->Group[0].IN.reg & kb_row[j]) != 0) {
    390a:	4d52      	ldr	r5, [pc, #328]	; (3a54 <readKeyboard+0x1c8>)
				scanCodes[scanCodeIndex] = (i * NUM_ROW) + j;
    390c:	4b50      	ldr	r3, [pc, #320]	; (3a50 <readKeyboard+0x1c4>)
    390e:	469c      	mov	ip, r3
		REG_PORT_OUTCLR0 = kb_col[i];
    3910:	4b53      	ldr	r3, [pc, #332]	; (3a60 <readKeyboard+0x1d4>)
    3912:	469a      	mov	sl, r3
    3914:	9601      	str	r6, [sp, #4]
    3916:	464e      	mov	r6, r9
    3918:	4647      	mov	r7, r8
    391a:	e015      	b.n	3948 <readKeyboard+0xbc>
    391c:	3304      	adds	r3, #4
    391e:	3101      	adds	r1, #1
		for (j = 0; j < NUM_ROW; j++) {	
    3920:	42a3      	cmp	r3, r4
    3922:	d008      	beq.n	3936 <readKeyboard+0xaa>
			if((PORT->Group[0].IN.reg & kb_row[j]) != 0) {
    3924:	6a28      	ldr	r0, [r5, #32]
    3926:	681e      	ldr	r6, [r3, #0]
    3928:	4206      	tst	r6, r0
    392a:	d0f7      	beq.n	391c <readKeyboard+0x90>
				scanCodes[scanCodeIndex] = (i * NUM_ROW) + j;
    392c:	0090      	lsls	r0, r2, #2
    392e:	4666      	mov	r6, ip
    3930:	5181      	str	r1, [r0, r6]
				scanCodeIndex++;
    3932:	3201      	adds	r2, #1
    3934:	e7f2      	b.n	391c <readKeyboard+0x90>
    3936:	9e00      	ldr	r6, [sp, #0]
		REG_PORT_OUTCLR0 = kb_col[i];
    3938:	4649      	mov	r1, r9
    393a:	6809      	ldr	r1, [r1, #0]
    393c:	4650      	mov	r0, sl
    393e:	6001      	str	r1, [r0, #0]
    3940:	3604      	adds	r6, #4
    3942:	370a      	adds	r7, #10
	for (i = 0; i < NUM_COL; i++) {
    3944:	2f46      	cmp	r7, #70	; 0x46
    3946:	d00a      	beq.n	395e <readKeyboard+0xd2>
    3948:	46b1      	mov	r9, r6
		REG_PORT_OUTSET0 = kb_col[i];
    394a:	465b      	mov	r3, fp
    394c:	6831      	ldr	r1, [r6, #0]
    394e:	6019      	str	r1, [r3, #0]
    3950:	4b44      	ldr	r3, [pc, #272]	; (3a64 <readKeyboard+0x1d8>)
    3952:	4698      	mov	r8, r3
    3954:	001c      	movs	r4, r3
    3956:	3428      	adds	r4, #40	; 0x28
    3958:	0039      	movs	r1, r7
    395a:	9600      	str	r6, [sp, #0]
    395c:	e7e2      	b.n	3924 <readKeyboard+0x98>
    395e:	4647      	mov	r7, r8
    3960:	9e01      	ldr	r6, [sp, #4]
    3962:	4641      	mov	r1, r8
		REG_PORT_DIRSET0 = kb_row[i];
    3964:	4d3d      	ldr	r5, [pc, #244]	; (3a5c <readKeyboard+0x1d0>)
		REG_PORT_OUTCLR0 = kb_row[i];
    3966:	4c3e      	ldr	r4, [pc, #248]	; (3a60 <readKeyboard+0x1d4>)
		REG_PORT_DIRSET0 = kb_row[i];
    3968:	6808      	ldr	r0, [r1, #0]
    396a:	6028      	str	r0, [r5, #0]
		REG_PORT_OUTCLR0 = kb_row[i];
    396c:	c901      	ldmia	r1!, {r0}
    396e:	6020      	str	r0, [r4, #0]
	for (i = 0; i < NUM_ROW; i++) {
    3970:	4299      	cmp	r1, r3
    3972:	d1f9      	bne.n	3968 <readKeyboard+0xdc>
    3974:	2100      	movs	r1, #0
		REG_PORT_DIRCLR0 = kb_col[i];
    3976:	4b38      	ldr	r3, [pc, #224]	; (3a58 <readKeyboard+0x1cc>)
    3978:	4699      	mov	r9, r3
    397a:	4b3b      	ldr	r3, [pc, #236]	; (3a68 <readKeyboard+0x1dc>)
    397c:	4698      	mov	r8, r3
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.PULLEN = 1;
    397e:	4b3e      	ldr	r3, [pc, #248]	; (3a78 <readKeyboard+0x1ec>)
    3980:	469c      	mov	ip, r3
    3982:	2504      	movs	r5, #4
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.INEN = 1;
    3984:	2402      	movs	r4, #2
		REG_PORT_DIRCLR0 = kb_col[i];
    3986:	4643      	mov	r3, r8
    3988:	4648      	mov	r0, r9
    398a:	5808      	ldr	r0, [r1, r0]
    398c:	6018      	str	r0, [r3, #0]
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.PULLEN = 1;
    398e:	4663      	mov	r3, ip
    3990:	58cb      	ldr	r3, [r1, r3]
    3992:	4837      	ldr	r0, [pc, #220]	; (3a70 <readKeyboard+0x1e4>)
    3994:	4682      	mov	sl, r0
    3996:	4453      	add	r3, sl
    3998:	7818      	ldrb	r0, [r3, #0]
    399a:	4328      	orrs	r0, r5
    399c:	7018      	strb	r0, [r3, #0]
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.INEN = 1;
    399e:	7818      	ldrb	r0, [r3, #0]
    39a0:	4320      	orrs	r0, r4
    39a2:	7018      	strb	r0, [r3, #0]
    39a4:	3104      	adds	r1, #4
	for (i = 0; i < NUM_COL; i++) {
    39a6:	291c      	cmp	r1, #28
    39a8:	d1ed      	bne.n	3986 <readKeyboard+0xfa>
    39aa:	2300      	movs	r3, #0
    39ac:	469c      	mov	ip, r3
		REG_PORT_OUTSET0 = kb_row[i];
    39ae:	4b31      	ldr	r3, [pc, #196]	; (3a74 <readKeyboard+0x1e8>)
    39b0:	469b      	mov	fp, r3
			if((PORT->Group[0].IN.reg & kb_col[j]) != 0)
    39b2:	4d28      	ldr	r5, [pc, #160]	; (3a54 <readKeyboard+0x1c8>)
				scanCodes[scanCodeIndex] = (j * NUM_ROW) + i;
    39b4:	4b26      	ldr	r3, [pc, #152]	; (3a50 <readKeyboard+0x1c4>)
    39b6:	4698      	mov	r8, r3
		REG_PORT_OUTCLR0 = kb_row[i];
    39b8:	4b29      	ldr	r3, [pc, #164]	; (3a60 <readKeyboard+0x1d4>)
    39ba:	469a      	mov	sl, r3
    39bc:	46b1      	mov	r9, r6
    39be:	003e      	movs	r6, r7
    39c0:	4667      	mov	r7, ip
    39c2:	e015      	b.n	39f0 <readKeyboard+0x164>
    39c4:	3104      	adds	r1, #4
    39c6:	330a      	adds	r3, #10
		for (j = 0; j < NUM_COL; j++) {
    39c8:	42a3      	cmp	r3, r4
    39ca:	d008      	beq.n	39de <readKeyboard+0x152>
			if((PORT->Group[0].IN.reg & kb_col[j]) != 0)
    39cc:	6a28      	ldr	r0, [r5, #32]
    39ce:	680e      	ldr	r6, [r1, #0]
    39d0:	4206      	tst	r6, r0
    39d2:	d0f7      	beq.n	39c4 <readKeyboard+0x138>
				scanCodes[scanCodeIndex] = (j * NUM_ROW) + i;
    39d4:	0090      	lsls	r0, r2, #2
    39d6:	4646      	mov	r6, r8
    39d8:	5183      	str	r3, [r0, r6]
				scanCodeIndex++;
    39da:	3201      	adds	r2, #1
    39dc:	e7f2      	b.n	39c4 <readKeyboard+0x138>
    39de:	9e00      	ldr	r6, [sp, #0]
		REG_PORT_OUTCLR0 = kb_row[i];
    39e0:	4663      	mov	r3, ip
    39e2:	681b      	ldr	r3, [r3, #0]
    39e4:	4651      	mov	r1, sl
    39e6:	600b      	str	r3, [r1, #0]
	for (i = 0; i < NUM_ROW; i++) {
    39e8:	3701      	adds	r7, #1
    39ea:	3604      	adds	r6, #4
    39ec:	2f0a      	cmp	r7, #10
    39ee:	d009      	beq.n	3a04 <readKeyboard+0x178>
    39f0:	46b4      	mov	ip, r6
		REG_PORT_OUTSET0 = kb_row[i];
    39f2:	465b      	mov	r3, fp
    39f4:	6831      	ldr	r1, [r6, #0]
    39f6:	6019      	str	r1, [r3, #0]
    39f8:	003b      	movs	r3, r7
    39fa:	003c      	movs	r4, r7
    39fc:	3446      	adds	r4, #70	; 0x46
    39fe:	4916      	ldr	r1, [pc, #88]	; (3a58 <readKeyboard+0x1cc>)
    3a00:	9600      	str	r6, [sp, #0]
    3a02:	e7e3      	b.n	39cc <readKeyboard+0x140>
    3a04:	464e      	mov	r6, r9
	for(i = 0 ; i < scanCodeIndex ; i++)
    3a06:	2a00      	cmp	r2, #0
    3a08:	dd08      	ble.n	3a1c <readKeyboard+0x190>
    3a0a:	4b1c      	ldr	r3, [pc, #112]	; (3a7c <readKeyboard+0x1f0>)
    3a0c:	0092      	lsls	r2, r2, #2
    3a0e:	4910      	ldr	r1, [pc, #64]	; (3a50 <readKeyboard+0x1c4>)
    3a10:	188a      	adds	r2, r1, r2
		scanCodeBuffer[i] = scanCodes[i];	
    3a12:	ce02      	ldmia	r6!, {r1}
    3a14:	7019      	strb	r1, [r3, #0]
    3a16:	3301      	adds	r3, #1
	for(i = 0 ; i < scanCodeIndex ; i++)
    3a18:	42b2      	cmp	r2, r6
    3a1a:	d1fa      	bne.n	3a12 <readKeyboard+0x186>
		REG_PORT_OUTSET0 = kb_row[i];
    3a1c:	2400      	movs	r4, #0
		if(keyDown(i) && !scanCodesContains(i))
    3a1e:	4d18      	ldr	r5, [pc, #96]	; (3a80 <readKeyboard+0x1f4>)
    3a20:	4e18      	ldr	r6, [pc, #96]	; (3a84 <readKeyboard+0x1f8>)
			removeFromKeyDown(i);
    3a22:	4f19      	ldr	r7, [pc, #100]	; (3a88 <readKeyboard+0x1fc>)
    3a24:	e002      	b.n	3a2c <readKeyboard+0x1a0>
	for(i = 0; i < 70; i++)
    3a26:	3401      	adds	r4, #1
    3a28:	2c46      	cmp	r4, #70	; 0x46
    3a2a:	d00a      	beq.n	3a42 <readKeyboard+0x1b6>
		if(keyDown(i) && !scanCodesContains(i))
    3a2c:	0020      	movs	r0, r4
    3a2e:	47a8      	blx	r5
    3a30:	2800      	cmp	r0, #0
    3a32:	d0f8      	beq.n	3a26 <readKeyboard+0x19a>
    3a34:	0020      	movs	r0, r4
    3a36:	47b0      	blx	r6
    3a38:	2800      	cmp	r0, #0
    3a3a:	d1f4      	bne.n	3a26 <readKeyboard+0x19a>
			removeFromKeyDown(i);
    3a3c:	0020      	movs	r0, r4
    3a3e:	47b8      	blx	r7
    3a40:	e7f1      	b.n	3a26 <readKeyboard+0x19a>
}
    3a42:	b003      	add	sp, #12
    3a44:	bc3c      	pop	{r2, r3, r4, r5}
    3a46:	4690      	mov	r8, r2
    3a48:	4699      	mov	r9, r3
    3a4a:	46a2      	mov	sl, r4
    3a4c:	46ab      	mov	fp, r5
    3a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3a50:	20000050 	.word	0x20000050
    3a54:	41004400 	.word	0x41004400
    3a58:	00007bac 	.word	0x00007bac
    3a5c:	41004408 	.word	0x41004408
    3a60:	41004414 	.word	0x41004414
    3a64:	00007be4 	.word	0x00007be4
    3a68:	41004404 	.word	0x41004404
    3a6c:	00007c0c 	.word	0x00007c0c
    3a70:	41004440 	.word	0x41004440
    3a74:	41004418 	.word	0x41004418
    3a78:	00007bc8 	.word	0x00007bc8
    3a7c:	2000003c 	.word	0x2000003c
    3a80:	000034c9 	.word	0x000034c9
    3a84:	0000349d 	.word	0x0000349d
    3a88:	00003869 	.word	0x00003869

00003a8c <setColorRGB>:

uint16_t fore_Color_High, fore_Color_Low;
uint16_t back_Color_High, back_Color_Low;

void setColorRGB(uint8_t r, uint8_t g, uint8_t b)
{
    3a8c:	b510      	push	{r4, lr}
	fore_Color_High = ((r&248)|g>>5);
    3a8e:	094b      	lsrs	r3, r1, #5
    3a90:	2407      	movs	r4, #7
    3a92:	43a0      	bics	r0, r4
    3a94:	4318      	orrs	r0, r3
    3a96:	4b05      	ldr	r3, [pc, #20]	; (3aac <setColorRGB+0x20>)
    3a98:	8018      	strh	r0, [r3, #0]
	fore_Color_Low = ((g&28)<<3|b>>3);
    3a9a:	00c9      	lsls	r1, r1, #3
    3a9c:	23e0      	movs	r3, #224	; 0xe0
    3a9e:	4019      	ands	r1, r3
    3aa0:	08d2      	lsrs	r2, r2, #3
    3aa2:	430a      	orrs	r2, r1
    3aa4:	4b02      	ldr	r3, [pc, #8]	; (3ab0 <setColorRGB+0x24>)
    3aa6:	801a      	strh	r2, [r3, #0]
}
    3aa8:	bd10      	pop	{r4, pc}
    3aaa:	46c0      	nop			; (mov r8, r8)
    3aac:	20000b42 	.word	0x20000b42
    3ab0:	20000b44 	.word	0x20000b44

00003ab4 <setBackColorRGB>:
	fore_Color_Low = (color & 0xFF);
}

void setBackColorRGB(unsigned char r,
unsigned char g, unsigned char b)
{
    3ab4:	b510      	push	{r4, lr}
	back_Color_High = ((r&248)|g>>5);
    3ab6:	094b      	lsrs	r3, r1, #5
    3ab8:	2407      	movs	r4, #7
    3aba:	43a0      	bics	r0, r4
    3abc:	4318      	orrs	r0, r3
    3abe:	4b05      	ldr	r3, [pc, #20]	; (3ad4 <setBackColorRGB+0x20>)
    3ac0:	8018      	strh	r0, [r3, #0]
	back_Color_Low = ((g&28)<<3|b>>3);
    3ac2:	00c9      	lsls	r1, r1, #3
    3ac4:	23e0      	movs	r3, #224	; 0xe0
    3ac6:	4019      	ands	r1, r3
    3ac8:	08d2      	lsrs	r2, r2, #3
    3aca:	430a      	orrs	r2, r1
    3acc:	4b02      	ldr	r3, [pc, #8]	; (3ad8 <setBackColorRGB+0x24>)
    3ace:	801a      	strh	r2, [r3, #0]
}
    3ad0:	bd10      	pop	{r4, pc}
    3ad2:	46c0      	nop			; (mov r8, r8)
    3ad4:	20000b46 	.word	0x20000b46
    3ad8:	20000b40 	.word	0x20000b40

00003adc <LCD_Fast_Fill>:
	(((long)(x2-x1)+1)*((long)(y2-y1)+1)));
	REG_PORT_OUTSET1 = LCD_CS;
}

void LCD_Fast_Fill(int ch, int cl, long pix)
{
    3adc:	b570      	push	{r4, r5, r6, lr}
	int blocks;
	
	
	REG_PORT_OUTCLR1 = 0x0000ffff;
    3ade:	4c19      	ldr	r4, [pc, #100]	; (3b44 <LCD_Fast_Fill+0x68>)
    3ae0:	4b19      	ldr	r3, [pc, #100]	; (3b48 <LCD_Fast_Fill+0x6c>)
    3ae2:	601c      	str	r4, [r3, #0]
	REG_PORT_OUTSET1 = (ch << 8) | cl;
    3ae4:	0200      	lsls	r0, r0, #8
    3ae6:	4301      	orrs	r1, r0
    3ae8:	4b18      	ldr	r3, [pc, #96]	; (3b4c <LCD_Fast_Fill+0x70>)
    3aea:	6019      	str	r1, [r3, #0]

	blocks = pix/16;
    3aec:	17d3      	asrs	r3, r2, #31
    3aee:	260f      	movs	r6, #15
    3af0:	401e      	ands	r6, r3
    3af2:	18b6      	adds	r6, r6, r2
    3af4:	1136      	asrs	r6, r6, #4
	for (int i=0; i<blocks; i++)
    3af6:	2500      	movs	r5, #0
    3af8:	2e00      	cmp	r6, #0
    3afa:	dd0c      	ble.n	3b16 <LCD_Fast_Fill+0x3a>
	{
		for (int j=0; j<16; j++)
		{
			REG_PORT_OUTCLR1 = LCD_WR;
    3afc:	4c12      	ldr	r4, [pc, #72]	; (3b48 <LCD_Fast_Fill+0x6c>)
    3afe:	2180      	movs	r1, #128	; 0x80
    3b00:	0289      	lsls	r1, r1, #10
			REG_PORT_OUTSET1 = LCD_WR;
    3b02:	4812      	ldr	r0, [pc, #72]	; (3b4c <LCD_Fast_Fill+0x70>)
{
    3b04:	2310      	movs	r3, #16
			REG_PORT_OUTCLR1 = LCD_WR;
    3b06:	6021      	str	r1, [r4, #0]
			REG_PORT_OUTSET1 = LCD_WR;
    3b08:	6001      	str	r1, [r0, #0]
    3b0a:	3b01      	subs	r3, #1
		for (int j=0; j<16; j++)
    3b0c:	2b00      	cmp	r3, #0
    3b0e:	d1fa      	bne.n	3b06 <LCD_Fast_Fill+0x2a>
	for (int i=0; i<blocks; i++)
    3b10:	3501      	adds	r5, #1
    3b12:	42ae      	cmp	r6, r5
    3b14:	d1f6      	bne.n	3b04 <LCD_Fast_Fill+0x28>
		}
	}
	
	if ((pix % 16) != 0)
    3b16:	0713      	lsls	r3, r2, #28
    3b18:	d013      	beq.n	3b42 <LCD_Fast_Fill+0x66>
	for (int i=0; i<(pix % 16)+1; i++)
    3b1a:	17d3      	asrs	r3, r2, #31
    3b1c:	0f1b      	lsrs	r3, r3, #28
    3b1e:	18d2      	adds	r2, r2, r3
    3b20:	210f      	movs	r1, #15
    3b22:	4011      	ands	r1, r2
    3b24:	1ac9      	subs	r1, r1, r3
    3b26:	1c4b      	adds	r3, r1, #1
    3b28:	2b00      	cmp	r3, #0
    3b2a:	dd0a      	ble.n	3b42 <LCD_Fast_Fill+0x66>
    3b2c:	0019      	movs	r1, r3
    3b2e:	2300      	movs	r3, #0
	{
		REG_PORT_OUTCLR1 = LCD_WR;
    3b30:	4c05      	ldr	r4, [pc, #20]	; (3b48 <LCD_Fast_Fill+0x6c>)
    3b32:	2280      	movs	r2, #128	; 0x80
    3b34:	0292      	lsls	r2, r2, #10
		REG_PORT_OUTSET1 = LCD_WR;
    3b36:	4805      	ldr	r0, [pc, #20]	; (3b4c <LCD_Fast_Fill+0x70>)
		REG_PORT_OUTCLR1 = LCD_WR;
    3b38:	6022      	str	r2, [r4, #0]
		REG_PORT_OUTSET1 = LCD_WR;
    3b3a:	6002      	str	r2, [r0, #0]
	for (int i=0; i<(pix % 16)+1; i++)
    3b3c:	3301      	adds	r3, #1
    3b3e:	4299      	cmp	r1, r3
    3b40:	d1fa      	bne.n	3b38 <LCD_Fast_Fill+0x5c>
	}
}
    3b42:	bd70      	pop	{r4, r5, r6, pc}
    3b44:	0000ffff 	.word	0x0000ffff
    3b48:	41004494 	.word	0x41004494
    3b4c:	41004498 	.word	0x41004498

00003b50 <setXY>:
{
	setXY(0,0,display_X_size,display_Y_size);
}

void setXY(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
    3b50:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b52:	b083      	sub	sp, #12
    3b54:	0007      	movs	r7, r0
    3b56:	9100      	str	r1, [sp, #0]
    3b58:	0016      	movs	r6, r2
    3b5a:	9301      	str	r3, [sp, #4]
	y1=display_Y_size-y1;
	y2=display_Y_size-y2;
	SwapUint16(y1, y2);
	*/
	
	LCD_Write_COM16(0x2a,0x00);
    3b5c:	2100      	movs	r1, #0
    3b5e:	202a      	movs	r0, #42	; 0x2a
    3b60:	4c17      	ldr	r4, [pc, #92]	; (3bc0 <setXY+0x70>)
    3b62:	47a0      	blx	r4
	LCD_Write_DATA8(x1>>8);
    3b64:	0a38      	lsrs	r0, r7, #8
    3b66:	4d17      	ldr	r5, [pc, #92]	; (3bc4 <setXY+0x74>)
    3b68:	47a8      	blx	r5
	LCD_Write_COM16(0x2a,0x01);
    3b6a:	2101      	movs	r1, #1
    3b6c:	202a      	movs	r0, #42	; 0x2a
    3b6e:	47a0      	blx	r4
	LCD_Write_DATA8(x1);
    3b70:	b2f8      	uxtb	r0, r7
    3b72:	47a8      	blx	r5
	LCD_Write_COM16(0x2a,0x02);
    3b74:	2102      	movs	r1, #2
    3b76:	202a      	movs	r0, #42	; 0x2a
    3b78:	47a0      	blx	r4
	LCD_Write_DATA8(x2>>8);
    3b7a:	0a30      	lsrs	r0, r6, #8
    3b7c:	47a8      	blx	r5
	LCD_Write_COM16(0x2a,0x03);
    3b7e:	2103      	movs	r1, #3
    3b80:	202a      	movs	r0, #42	; 0x2a
    3b82:	47a0      	blx	r4
	LCD_Write_DATA8(x2);
    3b84:	b2f0      	uxtb	r0, r6
    3b86:	47a8      	blx	r5

	LCD_Write_COM16(0x2b,0x00);
    3b88:	2100      	movs	r1, #0
    3b8a:	202b      	movs	r0, #43	; 0x2b
    3b8c:	47a0      	blx	r4
	LCD_Write_DATA8(y1>>8);
    3b8e:	9e00      	ldr	r6, [sp, #0]
    3b90:	0a30      	lsrs	r0, r6, #8
    3b92:	47a8      	blx	r5
	LCD_Write_COM16(0x2b,0x01);
    3b94:	2101      	movs	r1, #1
    3b96:	202b      	movs	r0, #43	; 0x2b
    3b98:	47a0      	blx	r4
	LCD_Write_DATA8(y1);
    3b9a:	b2f0      	uxtb	r0, r6
    3b9c:	47a8      	blx	r5
	LCD_Write_COM16(0x2b,0x02);
    3b9e:	2102      	movs	r1, #2
    3ba0:	202b      	movs	r0, #43	; 0x2b
    3ba2:	47a0      	blx	r4
	LCD_Write_DATA8(y2>>8);
    3ba4:	9e01      	ldr	r6, [sp, #4]
    3ba6:	0a30      	lsrs	r0, r6, #8
    3ba8:	47a8      	blx	r5
	LCD_Write_COM16(0x2b,0x03);
    3baa:	2103      	movs	r1, #3
    3bac:	202b      	movs	r0, #43	; 0x2b
    3bae:	47a0      	blx	r4
	LCD_Write_DATA8(y2);
    3bb0:	b2f0      	uxtb	r0, r6
    3bb2:	47a8      	blx	r5

	LCD_Write_COM16(0x2c,0x00);
    3bb4:	2100      	movs	r1, #0
    3bb6:	202c      	movs	r0, #44	; 0x2c
    3bb8:	47a0      	blx	r4
}
    3bba:	b003      	add	sp, #12
    3bbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3bbe:	46c0      	nop			; (mov r8, r8)
    3bc0:	00003cf5 	.word	0x00003cf5
    3bc4:	00003d25 	.word	0x00003d25

00003bc8 <fillRect>:
{
    3bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3bca:	46ce      	mov	lr, r9
    3bcc:	4647      	mov	r7, r8
    3bce:	b580      	push	{r7, lr}
    3bd0:	b083      	sub	sp, #12
    3bd2:	0006      	movs	r6, r0
    3bd4:	4689      	mov	r9, r1
    3bd6:	0014      	movs	r4, r2
    3bd8:	001d      	movs	r5, r3
	if (x1>x2)
    3bda:	4290      	cmp	r0, r2
    3bdc:	dd01      	ble.n	3be2 <fillRect+0x1a>
		x1 = x2;
    3bde:	0016      	movs	r6, r2
		x2 = temp;
    3be0:	0004      	movs	r4, r0
	if (y1>y2)
    3be2:	45a9      	cmp	r9, r5
    3be4:	dd02      	ble.n	3bec <fillRect+0x24>
    3be6:	0033      	movs	r3, r6
		x1 = x2;
    3be8:	0026      	movs	r6, r4
		x2 = temp;
    3bea:	001c      	movs	r4, r3
	REG_PORT_OUTCLR1 = LCD_CS;
    3bec:	2380      	movs	r3, #128	; 0x80
    3bee:	03db      	lsls	r3, r3, #15
    3bf0:	4698      	mov	r8, r3
    3bf2:	4b11      	ldr	r3, [pc, #68]	; (3c38 <fillRect+0x70>)
    3bf4:	4642      	mov	r2, r8
    3bf6:	601a      	str	r2, [r3, #0]
	setXY(x1, y1, x2, y2);
    3bf8:	b2ab      	uxth	r3, r5
    3bfa:	b2a2      	uxth	r2, r4
    3bfc:	4649      	mov	r1, r9
    3bfe:	4668      	mov	r0, sp
    3c00:	80c1      	strh	r1, [r0, #6]
    3c02:	88c1      	ldrh	r1, [r0, #6]
    3c04:	b2b0      	uxth	r0, r6
    3c06:	4f0d      	ldr	r7, [pc, #52]	; (3c3c <fillRect+0x74>)
    3c08:	47b8      	blx	r7
	REG_PORT_OUTSET1 = LCD_DC;
    3c0a:	4f0d      	ldr	r7, [pc, #52]	; (3c40 <fillRect+0x78>)
    3c0c:	2380      	movs	r3, #128	; 0x80
    3c0e:	041b      	lsls	r3, r3, #16
    3c10:	603b      	str	r3, [r7, #0]
	(((long)(x2-x1)+1)*((long)(y2-y1)+1)));
    3c12:	1ba4      	subs	r4, r4, r6
    3c14:	3401      	adds	r4, #1
    3c16:	464b      	mov	r3, r9
    3c18:	1aea      	subs	r2, r5, r3
    3c1a:	3201      	adds	r2, #1
	LCD_Fast_Fill(fore_Color_High, fore_Color_Low,
    3c1c:	4362      	muls	r2, r4
    3c1e:	4b09      	ldr	r3, [pc, #36]	; (3c44 <fillRect+0x7c>)
    3c20:	8819      	ldrh	r1, [r3, #0]
    3c22:	4b09      	ldr	r3, [pc, #36]	; (3c48 <fillRect+0x80>)
    3c24:	8818      	ldrh	r0, [r3, #0]
    3c26:	4b09      	ldr	r3, [pc, #36]	; (3c4c <fillRect+0x84>)
    3c28:	4798      	blx	r3
	REG_PORT_OUTSET1 = LCD_CS;
    3c2a:	4643      	mov	r3, r8
    3c2c:	603b      	str	r3, [r7, #0]
}
    3c2e:	b003      	add	sp, #12
    3c30:	bc0c      	pop	{r2, r3}
    3c32:	4690      	mov	r8, r2
    3c34:	4699      	mov	r9, r3
    3c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3c38:	41004494 	.word	0x41004494
    3c3c:	00003b51 	.word	0x00003b51
    3c40:	41004498 	.word	0x41004498
    3c44:	20000b44 	.word	0x20000b44
    3c48:	20000b42 	.word	0x20000b42
    3c4c:	00003add 	.word	0x00003add

00003c50 <clrXY>:
{
    3c50:	b510      	push	{r4, lr}
	setXY(0,0,display_X_size,display_Y_size);
    3c52:	4b04      	ldr	r3, [pc, #16]	; (3c64 <clrXY+0x14>)
    3c54:	881b      	ldrh	r3, [r3, #0]
    3c56:	4a04      	ldr	r2, [pc, #16]	; (3c68 <clrXY+0x18>)
    3c58:	8812      	ldrh	r2, [r2, #0]
    3c5a:	2100      	movs	r1, #0
    3c5c:	2000      	movs	r0, #0
    3c5e:	4c03      	ldr	r4, [pc, #12]	; (3c6c <clrXY+0x1c>)
    3c60:	47a0      	blx	r4
}
    3c62:	bd10      	pop	{r4, pc}
    3c64:	2000016a 	.word	0x2000016a
    3c68:	20000168 	.word	0x20000168
    3c6c:	00003b51 	.word	0x00003b51

00003c70 <clrScr>:
{
    3c70:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = LCD_CS;
    3c72:	2280      	movs	r2, #128	; 0x80
    3c74:	03d2      	lsls	r2, r2, #15
    3c76:	4b02      	ldr	r3, [pc, #8]	; (3c80 <clrScr+0x10>)
    3c78:	601a      	str	r2, [r3, #0]
	clrXY();
    3c7a:	4b02      	ldr	r3, [pc, #8]	; (3c84 <clrScr+0x14>)
    3c7c:	4798      	blx	r3
}
    3c7e:	bd10      	pop	{r4, pc}
    3c80:	41004494 	.word	0x41004494
    3c84:	00003c51 	.word	0x00003c51

00003c88 <setPixel>:

void setPixel(uint16_t color)
{
    3c88:	b510      	push	{r4, lr}
	//it sets it to a 16-bit color.
	LCD_Write_DATA16((color>>8),(color&0xFF));
    3c8a:	b2c1      	uxtb	r1, r0
    3c8c:	0a00      	lsrs	r0, r0, #8
    3c8e:	4b01      	ldr	r3, [pc, #4]	; (3c94 <setPixel+0xc>)
    3c90:	4798      	blx	r3
}
    3c92:	bd10      	pop	{r4, pc}
    3c94:	00003d0d 	.word	0x00003d0d

00003c98 <clearScreen>:
	LCD_Write_DATA8(0x80);
	REG_PORT_OUTSET1 = LCD_CS;
}
*/
void clearScreen(void)
{
    3c98:	b510      	push	{r4, lr}
	fore_Color_High = ((r&248)|g>>5);
    3c9a:	2300      	movs	r3, #0
    3c9c:	4a06      	ldr	r2, [pc, #24]	; (3cb8 <clearScreen+0x20>)
    3c9e:	8013      	strh	r3, [r2, #0]
	fore_Color_Low = ((g&28)<<3|b>>3);
    3ca0:	4a06      	ldr	r2, [pc, #24]	; (3cbc <clearScreen+0x24>)
    3ca2:	8013      	strh	r3, [r2, #0]
	setColorRGB(0,0,0);
	fillRect(0,0,display_Y_size,display_X_size);
    3ca4:	4b06      	ldr	r3, [pc, #24]	; (3cc0 <clearScreen+0x28>)
    3ca6:	881b      	ldrh	r3, [r3, #0]
    3ca8:	4a06      	ldr	r2, [pc, #24]	; (3cc4 <clearScreen+0x2c>)
    3caa:	8812      	ldrh	r2, [r2, #0]
    3cac:	2100      	movs	r1, #0
    3cae:	2000      	movs	r0, #0
    3cb0:	4c05      	ldr	r4, [pc, #20]	; (3cc8 <clearScreen+0x30>)
    3cb2:	47a0      	blx	r4
}
    3cb4:	bd10      	pop	{r4, pc}
    3cb6:	46c0      	nop			; (mov r8, r8)
    3cb8:	20000b42 	.word	0x20000b42
    3cbc:	20000b44 	.word	0x20000b44
    3cc0:	20000168 	.word	0x20000168
    3cc4:	2000016a 	.word	0x2000016a
    3cc8:	00003bc9 	.word	0x00003bc9

00003ccc <LCD_Write_Bus>:
	fillRect(0,0,799,489);
		
}

void LCD_Write_Bus(char VH, char VL)
{
    3ccc:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = 0x0000ffff;
    3cce:	4c06      	ldr	r4, [pc, #24]	; (3ce8 <LCD_Write_Bus+0x1c>)
    3cd0:	4b06      	ldr	r3, [pc, #24]	; (3cec <LCD_Write_Bus+0x20>)
    3cd2:	6023      	str	r3, [r4, #0]
	REG_PORT_OUTSET1 = (VH << 8) | VL;
    3cd4:	0200      	lsls	r0, r0, #8
    3cd6:	4301      	orrs	r1, r0
    3cd8:	4b05      	ldr	r3, [pc, #20]	; (3cf0 <LCD_Write_Bus+0x24>)
    3cda:	6019      	str	r1, [r3, #0]
	REG_PORT_OUTCLR1 = LCD_WR;
    3cdc:	2280      	movs	r2, #128	; 0x80
    3cde:	0292      	lsls	r2, r2, #10
    3ce0:	6022      	str	r2, [r4, #0]
	REG_PORT_OUTSET1 = LCD_WR;
    3ce2:	601a      	str	r2, [r3, #0]
}
    3ce4:	bd10      	pop	{r4, pc}
    3ce6:	46c0      	nop			; (mov r8, r8)
    3ce8:	41004494 	.word	0x41004494
    3cec:	0000ffff 	.word	0x0000ffff
    3cf0:	41004498 	.word	0x41004498

00003cf4 <LCD_Write_COM16>:

void LCD_Write_COM16(char VH, char VL)
{
    3cf4:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = LCD_DC;
    3cf6:	2280      	movs	r2, #128	; 0x80
    3cf8:	0412      	lsls	r2, r2, #16
    3cfa:	4b02      	ldr	r3, [pc, #8]	; (3d04 <LCD_Write_COM16+0x10>)
    3cfc:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(VH,VL);
    3cfe:	4b02      	ldr	r3, [pc, #8]	; (3d08 <LCD_Write_COM16+0x14>)
    3d00:	4798      	blx	r3
}
    3d02:	bd10      	pop	{r4, pc}
    3d04:	41004494 	.word	0x41004494
    3d08:	00003ccd 	.word	0x00003ccd

00003d0c <LCD_Write_DATA16>:
	REG_PORT_OUTCLR1 = LCD_DC;
	LCD_Write_Bus(0x00, VL);
}

void LCD_Write_DATA16(char VH, char VL)
{
    3d0c:	b510      	push	{r4, lr}
	REG_PORT_OUTSET1 = LCD_DC;
    3d0e:	2280      	movs	r2, #128	; 0x80
    3d10:	0412      	lsls	r2, r2, #16
    3d12:	4b02      	ldr	r3, [pc, #8]	; (3d1c <LCD_Write_DATA16+0x10>)
    3d14:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(VH,VL);
    3d16:	4b02      	ldr	r3, [pc, #8]	; (3d20 <LCD_Write_DATA16+0x14>)
    3d18:	4798      	blx	r3
}
    3d1a:	bd10      	pop	{r4, pc}
    3d1c:	41004498 	.word	0x41004498
    3d20:	00003ccd 	.word	0x00003ccd

00003d24 <LCD_Write_DATA8>:

void LCD_Write_DATA8(char VL)
{
    3d24:	b510      	push	{r4, lr}
    3d26:	0001      	movs	r1, r0
	REG_PORT_OUTSET1 = LCD_DC;
    3d28:	2280      	movs	r2, #128	; 0x80
    3d2a:	0412      	lsls	r2, r2, #16
    3d2c:	4b02      	ldr	r3, [pc, #8]	; (3d38 <LCD_Write_DATA8+0x14>)
    3d2e:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(0x00, VL);
    3d30:	2000      	movs	r0, #0
    3d32:	4b02      	ldr	r3, [pc, #8]	; (3d3c <LCD_Write_DATA8+0x18>)
    3d34:	4798      	blx	r3
}
    3d36:	bd10      	pop	{r4, pc}
    3d38:	41004498 	.word	0x41004498
    3d3c:	00003ccd 	.word	0x00003ccd

00003d40 <InitLCD>:
{
    3d40:	b5f0      	push	{r4, r5, r6, r7, lr}
    3d42:	46c6      	mov	lr, r8
    3d44:	b500      	push	{lr}
    3d46:	b082      	sub	sp, #8
	REG_PORT_DIRSET1 = 0x0000ffff;		//LCD data bus, PB00 - PB15
    3d48:	4b80      	ldr	r3, [pc, #512]	; (3f4c <InitLCD+0x20c>)
    3d4a:	4f81      	ldr	r7, [pc, #516]	; (3f50 <InitLCD+0x210>)
    3d4c:	601f      	str	r7, [r3, #0]
	REG_PORT_DIRSET1 = LCD_Reset;
    3d4e:	2580      	movs	r5, #128	; 0x80
    3d50:	05ed      	lsls	r5, r5, #23
    3d52:	601d      	str	r5, [r3, #0]
	REG_PORT_DIRSET1 = LCD_CS;
    3d54:	2680      	movs	r6, #128	; 0x80
    3d56:	03f6      	lsls	r6, r6, #15
    3d58:	601e      	str	r6, [r3, #0]
	REG_PORT_DIRSET1 = LCD_WR;
    3d5a:	2080      	movs	r0, #128	; 0x80
    3d5c:	0280      	lsls	r0, r0, #10
    3d5e:	6018      	str	r0, [r3, #0]
	REG_PORT_DIRSET1 = LCD_DC;
    3d60:	2180      	movs	r1, #128	; 0x80
    3d62:	0409      	lsls	r1, r1, #16
    3d64:	6019      	str	r1, [r3, #0]
	REG_PORT_DIRSET1 = LCD_RD;
    3d66:	2280      	movs	r2, #128	; 0x80
    3d68:	0252      	lsls	r2, r2, #9
    3d6a:	601a      	str	r2, [r3, #0]
	REG_PORT_OUTCLR1 = 0x0000ffff;
    3d6c:	4c79      	ldr	r4, [pc, #484]	; (3f54 <InitLCD+0x214>)
    3d6e:	6027      	str	r7, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_Reset;
    3d70:	6025      	str	r5, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_CS;
    3d72:	6026      	str	r6, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_WR;
    3d74:	6020      	str	r0, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_DC;
    3d76:	6021      	str	r1, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_RD;
    3d78:	6022      	str	r2, [r4, #0]
	REG_PORT_DIRSET1 = PORT_PB16;
    3d7a:	601a      	str	r2, [r3, #0]
	REG_PORT_OUTSET1 = PORT_PB16;
    3d7c:	4f76      	ldr	r7, [pc, #472]	; (3f58 <InitLCD+0x218>)
    3d7e:	603a      	str	r2, [r7, #0]
	REG_PORT_OUTSET1 = LCD_Reset;
    3d80:	603d      	str	r5, [r7, #0]
	delay_ms(5);
    3d82:	2005      	movs	r0, #5
    3d84:	4b75      	ldr	r3, [pc, #468]	; (3f5c <InitLCD+0x21c>)
    3d86:	4698      	mov	r8, r3
    3d88:	4798      	blx	r3
	REG_PORT_OUTCLR1 = LCD_Reset;
    3d8a:	6025      	str	r5, [r4, #0]
	delay_ms(5);
    3d8c:	2005      	movs	r0, #5
    3d8e:	47c0      	blx	r8
	REG_PORT_OUTSET1 = LCD_Reset;
    3d90:	603d      	str	r5, [r7, #0]
	REG_PORT_OUTCLR1 = LCD_CS;
    3d92:	6026      	str	r6, [r4, #0]
	for(int i = 0; i < 70; i++)
    3d94:	2400      	movs	r4, #0
		REG_PORT_OUTCLR1 = LCD_DC;
    3d96:	4b6f      	ldr	r3, [pc, #444]	; (3f54 <InitLCD+0x214>)
    3d98:	4698      	mov	r8, r3
    3d9a:	2580      	movs	r5, #128	; 0x80
    3d9c:	042d      	lsls	r5, r5, #16
    3d9e:	002f      	movs	r7, r5
		LCD_Write_COM16(belial[i],mulciber[i]);
    3da0:	4e6f      	ldr	r6, [pc, #444]	; (3f60 <InitLCD+0x220>)
		REG_PORT_OUTCLR1 = LCD_DC;
    3da2:	4643      	mov	r3, r8
    3da4:	601f      	str	r7, [r3, #0]
		LCD_Write_COM16(belial[i],mulciber[i]);
    3da6:	5da1      	ldrb	r1, [r4, r6]
    3da8:	4b6e      	ldr	r3, [pc, #440]	; (3f64 <InitLCD+0x224>)
    3daa:	5ce0      	ldrb	r0, [r4, r3]
    3dac:	4b6e      	ldr	r3, [pc, #440]	; (3f68 <InitLCD+0x228>)
    3dae:	4798      	blx	r3
		REG_PORT_OUTSET1 = LCD_DC;
    3db0:	4b69      	ldr	r3, [pc, #420]	; (3f58 <InitLCD+0x218>)
    3db2:	601d      	str	r5, [r3, #0]
		LCD_Write_DATA8(lucifer[i]);
    3db4:	4b6d      	ldr	r3, [pc, #436]	; (3f6c <InitLCD+0x22c>)
    3db6:	5ce0      	ldrb	r0, [r4, r3]
    3db8:	4b6d      	ldr	r3, [pc, #436]	; (3f70 <InitLCD+0x230>)
    3dba:	4798      	blx	r3
	for(int i = 0; i < 70; i++)
    3dbc:	3401      	adds	r4, #1
    3dbe:	2c46      	cmp	r4, #70	; 0x46
    3dc0:	d1ef      	bne.n	3da2 <InitLCD+0x62>
    3dc2:	23d1      	movs	r3, #209	; 0xd1
    3dc4:	9301      	str	r3, [sp, #4]
			LCD_Write_COM16(k,0x00);
    3dc6:	4d68      	ldr	r5, [pc, #416]	; (3f68 <InitLCD+0x228>)
			LCD_Write_DATA8(beelzebub[l]);
    3dc8:	4f69      	ldr	r7, [pc, #420]	; (3f70 <InitLCD+0x230>)
    3dca:	4c6a      	ldr	r4, [pc, #424]	; (3f74 <InitLCD+0x234>)
    3dcc:	0026      	movs	r6, r4
    3dce:	3634      	adds	r6, #52	; 0x34
			LCD_Write_COM16(k,0x00);
    3dd0:	2100      	movs	r1, #0
    3dd2:	9801      	ldr	r0, [sp, #4]
    3dd4:	47a8      	blx	r5
			LCD_Write_DATA8(beelzebub[l]);
    3dd6:	7820      	ldrb	r0, [r4, #0]
    3dd8:	47b8      	blx	r7
    3dda:	3401      	adds	r4, #1
		for(int l = 0; l < 52; l++)
    3ddc:	42a6      	cmp	r6, r4
    3dde:	d1f7      	bne.n	3dd0 <InitLCD+0x90>
	for(char k = 0xD1; k < 0xD6; k++)
    3de0:	9b01      	ldr	r3, [sp, #4]
    3de2:	3301      	adds	r3, #1
    3de4:	b2db      	uxtb	r3, r3
    3de6:	9301      	str	r3, [sp, #4]
    3de8:	2bd6      	cmp	r3, #214	; 0xd6
    3dea:	d1ee      	bne.n	3dca <InitLCD+0x8a>
	LCD_Write_COM16(0xF0, 0x00);LCD_Write_DATA8(0x55);
    3dec:	2100      	movs	r1, #0
    3dee:	20f0      	movs	r0, #240	; 0xf0
    3df0:	4c5d      	ldr	r4, [pc, #372]	; (3f68 <InitLCD+0x228>)
    3df2:	47a0      	blx	r4
    3df4:	2055      	movs	r0, #85	; 0x55
    3df6:	4d5e      	ldr	r5, [pc, #376]	; (3f70 <InitLCD+0x230>)
    3df8:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x01);LCD_Write_DATA8(0xAA);	
    3dfa:	2101      	movs	r1, #1
    3dfc:	20f0      	movs	r0, #240	; 0xf0
    3dfe:	47a0      	blx	r4
    3e00:	20aa      	movs	r0, #170	; 0xaa
    3e02:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x02);LCD_Write_DATA8(0x52);	
    3e04:	2102      	movs	r1, #2
    3e06:	20f0      	movs	r0, #240	; 0xf0
    3e08:	47a0      	blx	r4
    3e0a:	2052      	movs	r0, #82	; 0x52
    3e0c:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x03);LCD_Write_DATA8(0x08);	
    3e0e:	2103      	movs	r1, #3
    3e10:	20f0      	movs	r0, #240	; 0xf0
    3e12:	47a0      	blx	r4
    3e14:	2008      	movs	r0, #8
    3e16:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x04);LCD_Write_DATA8(0x00);	
    3e18:	2104      	movs	r1, #4
    3e1a:	20f0      	movs	r0, #240	; 0xf0
    3e1c:	47a0      	blx	r4
    3e1e:	2000      	movs	r0, #0
    3e20:	47a8      	blx	r5
	LCD_Write_COM16(0xB1, 0x00);LCD_Write_DATA8(0xCC);
    3e22:	2100      	movs	r1, #0
    3e24:	20b1      	movs	r0, #177	; 0xb1
    3e26:	47a0      	blx	r4
    3e28:	20cc      	movs	r0, #204	; 0xcc
    3e2a:	47a8      	blx	r5
	LCD_Write_COM16(0xB1, 0x01);LCD_Write_DATA8(0x00);	
    3e2c:	2101      	movs	r1, #1
    3e2e:	20b1      	movs	r0, #177	; 0xb1
    3e30:	47a0      	blx	r4
    3e32:	2000      	movs	r0, #0
    3e34:	47a8      	blx	r5
	LCD_Write_COM16(0xB5, 0x00);LCD_Write_DATA8(0x50);	
    3e36:	2100      	movs	r1, #0
    3e38:	20b5      	movs	r0, #181	; 0xb5
    3e3a:	47a0      	blx	r4
    3e3c:	2050      	movs	r0, #80	; 0x50
    3e3e:	47a8      	blx	r5
	LCD_Write_COM16(0xB6, 0x00);LCD_Write_DATA8(0x05);
    3e40:	2100      	movs	r1, #0
    3e42:	20b6      	movs	r0, #182	; 0xb6
    3e44:	47a0      	blx	r4
    3e46:	2005      	movs	r0, #5
    3e48:	47a8      	blx	r5
	LCD_Write_COM16(0xB7, 0x00);LCD_Write_DATA8(0x70);
    3e4a:	2100      	movs	r1, #0
    3e4c:	20b7      	movs	r0, #183	; 0xb7
    3e4e:	47a0      	blx	r4
    3e50:	2070      	movs	r0, #112	; 0x70
    3e52:	47a8      	blx	r5
	LCD_Write_COM16(0xB7, 0x01);LCD_Write_DATA8(0x70);
    3e54:	2101      	movs	r1, #1
    3e56:	20b7      	movs	r0, #183	; 0xb7
    3e58:	47a0      	blx	r4
    3e5a:	2070      	movs	r0, #112	; 0x70
    3e5c:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x00);LCD_Write_DATA8(0x01);
    3e5e:	2100      	movs	r1, #0
    3e60:	20b8      	movs	r0, #184	; 0xb8
    3e62:	47a0      	blx	r4
    3e64:	2001      	movs	r0, #1
    3e66:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x01);LCD_Write_DATA8(0x03);
    3e68:	2101      	movs	r1, #1
    3e6a:	20b8      	movs	r0, #184	; 0xb8
    3e6c:	47a0      	blx	r4
    3e6e:	2003      	movs	r0, #3
    3e70:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x02);LCD_Write_DATA8(0x03);
    3e72:	2102      	movs	r1, #2
    3e74:	20b8      	movs	r0, #184	; 0xb8
    3e76:	47a0      	blx	r4
    3e78:	2003      	movs	r0, #3
    3e7a:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x03);LCD_Write_DATA8(0x03);	
    3e7c:	2103      	movs	r1, #3
    3e7e:	20b8      	movs	r0, #184	; 0xb8
    3e80:	47a0      	blx	r4
    3e82:	2003      	movs	r0, #3
    3e84:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x00);LCD_Write_DATA8(0x02);
    3e86:	2100      	movs	r1, #0
    3e88:	20bc      	movs	r0, #188	; 0xbc
    3e8a:	47a0      	blx	r4
    3e8c:	2002      	movs	r0, #2
    3e8e:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x01);LCD_Write_DATA8(0x00);
    3e90:	2101      	movs	r1, #1
    3e92:	20bc      	movs	r0, #188	; 0xbc
    3e94:	47a0      	blx	r4
    3e96:	2000      	movs	r0, #0
    3e98:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x02);LCD_Write_DATA8(0x00);
    3e9a:	2102      	movs	r1, #2
    3e9c:	20bc      	movs	r0, #188	; 0xbc
    3e9e:	47a0      	blx	r4
    3ea0:	2000      	movs	r0, #0
    3ea2:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x00);LCD_Write_DATA8(0xD0);
    3ea4:	2100      	movs	r1, #0
    3ea6:	20c9      	movs	r0, #201	; 0xc9
    3ea8:	47a0      	blx	r4
    3eaa:	20d0      	movs	r0, #208	; 0xd0
    3eac:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x01);LCD_Write_DATA8(0x02);
    3eae:	2101      	movs	r1, #1
    3eb0:	20c9      	movs	r0, #201	; 0xc9
    3eb2:	47a0      	blx	r4
    3eb4:	2002      	movs	r0, #2
    3eb6:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x02);LCD_Write_DATA8(0x50);
    3eb8:	2102      	movs	r1, #2
    3eba:	20c9      	movs	r0, #201	; 0xc9
    3ebc:	47a0      	blx	r4
    3ebe:	2050      	movs	r0, #80	; 0x50
    3ec0:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x03);LCD_Write_DATA8(0x50);
    3ec2:	2103      	movs	r1, #3
    3ec4:	20c9      	movs	r0, #201	; 0xc9
    3ec6:	47a0      	blx	r4
    3ec8:	2050      	movs	r0, #80	; 0x50
    3eca:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x04);LCD_Write_DATA8(0x50);
    3ecc:	2104      	movs	r1, #4
    3ece:	20c9      	movs	r0, #201	; 0xc9
    3ed0:	47a0      	blx	r4
    3ed2:	2050      	movs	r0, #80	; 0x50
    3ed4:	47a8      	blx	r5
	LCD_Write_COM16(0x35, 0x00);LCD_Write_DATA8(0x00);
    3ed6:	2100      	movs	r1, #0
    3ed8:	2035      	movs	r0, #53	; 0x35
    3eda:	47a0      	blx	r4
    3edc:	2000      	movs	r0, #0
    3ede:	47a8      	blx	r5
	LCD_Write_COM16(0x3A, 0x00);LCD_Write_DATA8(0x55);
    3ee0:	2100      	movs	r1, #0
    3ee2:	203a      	movs	r0, #58	; 0x3a
    3ee4:	47a0      	blx	r4
    3ee6:	2055      	movs	r0, #85	; 0x55
    3ee8:	47a8      	blx	r5
	LCD_Write_COM16(0x36, 0x00);LCD_Write_DATA8(0xE2);  //This is the MADCTL register
    3eea:	2100      	movs	r1, #0
    3eec:	2036      	movs	r0, #54	; 0x36
    3eee:	47a0      	blx	r4
    3ef0:	20e2      	movs	r0, #226	; 0xe2
    3ef2:	47a8      	blx	r5
  	LCD_Write_COM16(0x11,0x00);   //Start Up  
    3ef4:	2100      	movs	r1, #0
    3ef6:	2011      	movs	r0, #17
    3ef8:	47a0      	blx	r4
  	delay_ms(100);
    3efa:	2064      	movs	r0, #100	; 0x64
    3efc:	4e17      	ldr	r6, [pc, #92]	; (3f5c <InitLCD+0x21c>)
    3efe:	47b0      	blx	r6
  	LCD_Write_COM16(0x29,0x00);   //Display On  
    3f00:	2100      	movs	r1, #0
    3f02:	2029      	movs	r0, #41	; 0x29
    3f04:	47a0      	blx	r4
   	delay_ms(100);
    3f06:	2064      	movs	r0, #100	; 0x64
    3f08:	47b0      	blx	r6
	LCD_Write_COM16(0x51,0x00);LCD_Write_DATA8(0xFF);
    3f0a:	2100      	movs	r1, #0
    3f0c:	2051      	movs	r0, #81	; 0x51
    3f0e:	47a0      	blx	r4
    3f10:	20ff      	movs	r0, #255	; 0xff
    3f12:	47a8      	blx	r5
	REG_PORT_OUTSET1 = LCD_CS;
    3f14:	2280      	movs	r2, #128	; 0x80
    3f16:	03d2      	lsls	r2, r2, #15
    3f18:	4b0f      	ldr	r3, [pc, #60]	; (3f58 <InitLCD+0x218>)
    3f1a:	601a      	str	r2, [r3, #0]
	clrScr();
    3f1c:	4b16      	ldr	r3, [pc, #88]	; (3f78 <InitLCD+0x238>)
    3f1e:	4798      	blx	r3
	setColorRGB(0,0,0);
    3f20:	2200      	movs	r2, #0
    3f22:	2100      	movs	r1, #0
    3f24:	2000      	movs	r0, #0
    3f26:	4b15      	ldr	r3, [pc, #84]	; (3f7c <InitLCD+0x23c>)
    3f28:	4798      	blx	r3
	setBackColorRGB(0, 0, 0);
    3f2a:	2200      	movs	r2, #0
    3f2c:	2100      	movs	r1, #0
    3f2e:	2000      	movs	r0, #0
    3f30:	4b13      	ldr	r3, [pc, #76]	; (3f80 <InitLCD+0x240>)
    3f32:	4798      	blx	r3
	fillRect(0,0,799,489);
    3f34:	23ea      	movs	r3, #234	; 0xea
    3f36:	33ff      	adds	r3, #255	; 0xff
    3f38:	4a12      	ldr	r2, [pc, #72]	; (3f84 <InitLCD+0x244>)
    3f3a:	2100      	movs	r1, #0
    3f3c:	2000      	movs	r0, #0
    3f3e:	4c12      	ldr	r4, [pc, #72]	; (3f88 <InitLCD+0x248>)
    3f40:	47a0      	blx	r4
}
    3f42:	b002      	add	sp, #8
    3f44:	bc04      	pop	{r2}
    3f46:	4690      	mov	r8, r2
    3f48:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3f4a:	46c0      	nop			; (mov r8, r8)
    3f4c:	41004488 	.word	0x41004488
    3f50:	0000ffff 	.word	0x0000ffff
    3f54:	41004494 	.word	0x41004494
    3f58:	41004498 	.word	0x41004498
    3f5c:	00001785 	.word	0x00001785
    3f60:	00007cf8 	.word	0x00007cf8
    3f64:	00007c68 	.word	0x00007c68
    3f68:	00003cf5 	.word	0x00003cf5
    3f6c:	00007cb0 	.word	0x00007cb0
    3f70:	00003d25 	.word	0x00003d25
    3f74:	00007c34 	.word	0x00007c34
    3f78:	00003c71 	.word	0x00003c71
    3f7c:	00003a8d 	.word	0x00003a8d
    3f80:	00003ab5 	.word	0x00003ab5
    3f84:	0000031f 	.word	0x0000031f
    3f88:	00003bc9 	.word	0x00003bc9

00003f8c <usart_read_callback>:
	SysTick_Config(SystemCoreClock/1000);
	system_interrupt_enable(SYSTEM_INTERRUPT_SYSTICK);
}

void usart_read_callback(struct usart_module *const usart_module)
{
    3f8c:	b510      	push	{r4, lr}
	// Read one character from the UART.
	//We can only use this function because it's non-blocking
	//and we can only read one character because reading > 1 means
	//it doesn't complete until _all_ characters are read.
	
	usart_read_buffer_job(&usart_instance, (uint8_t*)&rx_buf, 1);
    3f8e:	4c06      	ldr	r4, [pc, #24]	; (3fa8 <usart_read_callback+0x1c>)
    3f90:	2201      	movs	r2, #1
    3f92:	0021      	movs	r1, r4
    3f94:	4805      	ldr	r0, [pc, #20]	; (3fac <usart_read_callback+0x20>)
    3f96:	4b06      	ldr	r3, [pc, #24]	; (3fb0 <usart_read_callback+0x24>)
    3f98:	4798      	blx	r3
	
	//stuff that ONE CHARACTER into the circular FIFO buffer
	ring_put(ouroboros, rx_buf);
    3f9a:	7821      	ldrb	r1, [r4, #0]
    3f9c:	4b05      	ldr	r3, [pc, #20]	; (3fb4 <usart_read_callback+0x28>)
    3f9e:	6818      	ldr	r0, [r3, #0]
    3fa0:	4b05      	ldr	r3, [pc, #20]	; (3fb8 <usart_read_callback+0x2c>)
    3fa2:	4798      	blx	r3
}
    3fa4:	bd10      	pop	{r4, pc}
    3fa6:	46c0      	nop			; (mov r8, r8)
    3fa8:	20000b48 	.word	0x20000b48
    3fac:	20000388 	.word	0x20000388
    3fb0:	00002625 	.word	0x00002625
    3fb4:	2000035c 	.word	0x2000035c
    3fb8:	00000141 	.word	0x00000141

00003fbc <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    3fbc:	b570      	push	{r4, r5, r6, lr}
    3fbe:	b082      	sub	sp, #8
    3fc0:	0005      	movs	r5, r0
    3fc2:	000e      	movs	r6, r1
	uint16_t temp = 0;
    3fc4:	2200      	movs	r2, #0
    3fc6:	466b      	mov	r3, sp
    3fc8:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    3fca:	4c06      	ldr	r4, [pc, #24]	; (3fe4 <usart_serial_getchar+0x28>)
    3fcc:	466b      	mov	r3, sp
    3fce:	1d99      	adds	r1, r3, #6
    3fd0:	0028      	movs	r0, r5
    3fd2:	47a0      	blx	r4
    3fd4:	2800      	cmp	r0, #0
    3fd6:	d1f9      	bne.n	3fcc <usart_serial_getchar+0x10>

	*c = temp;
    3fd8:	466b      	mov	r3, sp
    3fda:	3306      	adds	r3, #6
    3fdc:	881b      	ldrh	r3, [r3, #0]
    3fde:	7033      	strb	r3, [r6, #0]
}
    3fe0:	b002      	add	sp, #8
    3fe2:	bd70      	pop	{r4, r5, r6, pc}
    3fe4:	00002553 	.word	0x00002553

00003fe8 <usart_serial_putchar>:
{
    3fe8:	b570      	push	{r4, r5, r6, lr}
    3fea:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    3fec:	b28c      	uxth	r4, r1
    3fee:	4e03      	ldr	r6, [pc, #12]	; (3ffc <usart_serial_putchar+0x14>)
    3ff0:	0021      	movs	r1, r4
    3ff2:	0028      	movs	r0, r5
    3ff4:	47b0      	blx	r6
    3ff6:	2800      	cmp	r0, #0
    3ff8:	d1fa      	bne.n	3ff0 <usart_serial_putchar+0x8>
}
    3ffa:	bd70      	pop	{r4, r5, r6, pc}
    3ffc:	0000252d 	.word	0x0000252d

00004000 <SysTick_Handler>:
	ul_tickcount++;
    4000:	4a02      	ldr	r2, [pc, #8]	; (400c <SysTick_Handler+0xc>)
    4002:	8813      	ldrh	r3, [r2, #0]
    4004:	3301      	adds	r3, #1
    4006:	8013      	strh	r3, [r2, #0]
}
    4008:	4770      	bx	lr
    400a:	46c0      	nop			; (mov r8, r8)
    400c:	200002c0 	.word	0x200002c0

00004010 <conf_systick>:
{
    4010:	b510      	push	{r4, lr}
	SysTick_Config(SystemCoreClock/1000);
    4012:	4b0e      	ldr	r3, [pc, #56]	; (404c <conf_systick+0x3c>)
    4014:	6818      	ldr	r0, [r3, #0]
    4016:	21fa      	movs	r1, #250	; 0xfa
    4018:	0089      	lsls	r1, r1, #2
    401a:	4b0d      	ldr	r3, [pc, #52]	; (4050 <conf_systick+0x40>)
    401c:	4798      	blx	r3
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    401e:	3801      	subs	r0, #1
    4020:	4b0c      	ldr	r3, [pc, #48]	; (4054 <conf_systick+0x44>)
    4022:	4298      	cmp	r0, r3
    4024:	d80d      	bhi.n	4042 <conf_systick+0x32>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    4026:	4a0c      	ldr	r2, [pc, #48]	; (4058 <conf_systick+0x48>)
    4028:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    402a:	480c      	ldr	r0, [pc, #48]	; (405c <conf_systick+0x4c>)
    402c:	6a03      	ldr	r3, [r0, #32]
    402e:	021b      	lsls	r3, r3, #8
    4030:	0a1b      	lsrs	r3, r3, #8
    4032:	21c0      	movs	r1, #192	; 0xc0
    4034:	0609      	lsls	r1, r1, #24
    4036:	430b      	orrs	r3, r1
    4038:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    403a:	2300      	movs	r3, #0
    403c:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    403e:	3307      	adds	r3, #7
    4040:	6013      	str	r3, [r2, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    4042:	2280      	movs	r2, #128	; 0x80
    4044:	0612      	lsls	r2, r2, #24
    4046:	4b06      	ldr	r3, [pc, #24]	; (4060 <conf_systick+0x50>)
    4048:	601a      	str	r2, [r3, #0]
}
    404a:	bd10      	pop	{r4, pc}
    404c:	20000020 	.word	0x20000020
    4050:	000043d9 	.word	0x000043d9
    4054:	00ffffff 	.word	0x00ffffff
    4058:	e000e010 	.word	0xe000e010
    405c:	e000ed00 	.word	0xe000ed00
    4060:	e000e100 	.word	0xe000e100

00004064 <configure_usart>:

/**************************SERCOM STUFF*******************************/


void configure_usart(void)
{
    4064:	b570      	push	{r4, r5, r6, lr}
    4066:	b090      	sub	sp, #64	; 0x40
	config->data_order       = USART_DATAORDER_LSB;
    4068:	2380      	movs	r3, #128	; 0x80
    406a:	05db      	lsls	r3, r3, #23
    406c:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    406e:	2300      	movs	r3, #0
    4070:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    4072:	22ff      	movs	r2, #255	; 0xff
    4074:	4669      	mov	r1, sp
    4076:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    4078:	2200      	movs	r2, #0
    407a:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    407c:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
    407e:	2196      	movs	r1, #150	; 0x96
    4080:	0189      	lsls	r1, r1, #6
    4082:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
    4084:	2101      	movs	r1, #1
    4086:	2024      	movs	r0, #36	; 0x24
    4088:	466c      	mov	r4, sp
    408a:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    408c:	3001      	adds	r0, #1
    408e:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    4090:	3125      	adds	r1, #37	; 0x25
    4092:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    4094:	3101      	adds	r1, #1
    4096:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    4098:	930a      	str	r3, [sp, #40]	; 0x28
	config->run_in_standby   = false;
    409a:	3105      	adds	r1, #5
    409c:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    409e:	3101      	adds	r1, #1
    40a0:	5463      	strb	r3, [r4, r1]
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    40a2:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    40a4:	8223      	strh	r3, [r4, #16]
	config->lin_slave_enable      = false;
    40a6:	76e3      	strb	r3, [r4, #27]
	config->immediate_buffer_overflow_notification  = false;
    40a8:	7622      	strb	r2, [r4, #24]
	config->start_frame_detection_enable            = false;
    40aa:	7722      	strb	r2, [r4, #28]
	config->encoding_format_enable                  = false;
    40ac:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    40ae:	2313      	movs	r3, #19
    40b0:	76a3      	strb	r3, [r4, #26]
	config->collision_detection_enable              = false;
    40b2:	7762      	strb	r2, [r4, #29]
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);

	config_usart.baudrate    = 9600;
	config_usart.mux_setting = USART_RX_1_TX_0_XCK_1;
    40b4:	2380      	movs	r3, #128	; 0x80
    40b6:	035b      	lsls	r3, r3, #13
    40b8:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = PINMUX_PA08D_SERCOM2_PAD0;
    40ba:	4b1e      	ldr	r3, [pc, #120]	; (4134 <configure_usart+0xd0>)
    40bc:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = PINMUX_PA09D_SERCOM2_PAD1;
    40be:	4b1e      	ldr	r3, [pc, #120]	; (4138 <configure_usart+0xd4>)
    40c0:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = PINMUX_UNUSED;
    40c2:	2301      	movs	r3, #1
    40c4:	425b      	negs	r3, r3
    40c6:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = PINMUX_UNUSED;
    40c8:	930f      	str	r3, [sp, #60]	; 0x3c
	
	
	
	while (usart_init(&usart_instance, SERCOM2, &config_usart) != STATUS_OK) {
    40ca:	4d1c      	ldr	r5, [pc, #112]	; (413c <configure_usart+0xd8>)
    40cc:	4c1c      	ldr	r4, [pc, #112]	; (4140 <configure_usart+0xdc>)
    40ce:	466a      	mov	r2, sp
    40d0:	491c      	ldr	r1, [pc, #112]	; (4144 <configure_usart+0xe0>)
    40d2:	0028      	movs	r0, r5
    40d4:	47a0      	blx	r4
    40d6:	2800      	cmp	r0, #0
    40d8:	d1f9      	bne.n	40ce <configure_usart+0x6a>
	stdio_base = (void *)module;
    40da:	4c18      	ldr	r4, [pc, #96]	; (413c <configure_usart+0xd8>)
    40dc:	4b1a      	ldr	r3, [pc, #104]	; (4148 <configure_usart+0xe4>)
    40de:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    40e0:	4a1a      	ldr	r2, [pc, #104]	; (414c <configure_usart+0xe8>)
    40e2:	4b1b      	ldr	r3, [pc, #108]	; (4150 <configure_usart+0xec>)
    40e4:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    40e6:	4a1b      	ldr	r2, [pc, #108]	; (4154 <configure_usart+0xf0>)
    40e8:	4b1b      	ldr	r3, [pc, #108]	; (4158 <configure_usart+0xf4>)
    40ea:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    40ec:	466a      	mov	r2, sp
    40ee:	4915      	ldr	r1, [pc, #84]	; (4144 <configure_usart+0xe0>)
    40f0:	0020      	movs	r0, r4
    40f2:	4b13      	ldr	r3, [pc, #76]	; (4140 <configure_usart+0xdc>)
    40f4:	4798      	blx	r3
	setbuf(stdout, NULL);
    40f6:	4e19      	ldr	r6, [pc, #100]	; (415c <configure_usart+0xf8>)
    40f8:	6833      	ldr	r3, [r6, #0]
    40fa:	6898      	ldr	r0, [r3, #8]
    40fc:	2100      	movs	r1, #0
    40fe:	4d18      	ldr	r5, [pc, #96]	; (4160 <configure_usart+0xfc>)
    4100:	47a8      	blx	r5
	setbuf(stdin, NULL);
    4102:	6833      	ldr	r3, [r6, #0]
    4104:	6858      	ldr	r0, [r3, #4]
    4106:	2100      	movs	r1, #0
    4108:	47a8      	blx	r5
	SercomUsart *const usart_hw = &(module->hw->USART);
    410a:	6825      	ldr	r5, [r4, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    410c:	0028      	movs	r0, r5
    410e:	4b15      	ldr	r3, [pc, #84]	; (4164 <configure_usart+0x100>)
    4110:	4798      	blx	r3
    4112:	231f      	movs	r3, #31
    4114:	4018      	ands	r0, r3
    4116:	3b1e      	subs	r3, #30
    4118:	4083      	lsls	r3, r0
    411a:	4a13      	ldr	r2, [pc, #76]	; (4168 <configure_usart+0x104>)
    411c:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    411e:	6822      	ldr	r2, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
    4120:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    4122:	2b00      	cmp	r3, #0
    4124:	d1fc      	bne.n	4120 <configure_usart+0xbc>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    4126:	682b      	ldr	r3, [r5, #0]
    4128:	2202      	movs	r2, #2
    412a:	4313      	orrs	r3, r2
    412c:	602b      	str	r3, [r5, #0]
	}
	stdio_serial_init(&usart_instance, SERCOM2, &config_usart);
	usart_enable(&usart_instance);
}
    412e:	b010      	add	sp, #64	; 0x40
    4130:	bd70      	pop	{r4, r5, r6, pc}
    4132:	46c0      	nop			; (mov r8, r8)
    4134:	00080003 	.word	0x00080003
    4138:	00090003 	.word	0x00090003
    413c:	20000388 	.word	0x20000388
    4140:	000021f1 	.word	0x000021f1
    4144:	42001000 	.word	0x42001000
    4148:	20000384 	.word	0x20000384
    414c:	00003fe9 	.word	0x00003fe9
    4150:	20000380 	.word	0x20000380
    4154:	00003fbd 	.word	0x00003fbd
    4158:	2000037c 	.word	0x2000037c
    415c:	20000174 	.word	0x20000174
    4160:	00004a75 	.word	0x00004a75
    4164:	00002161 	.word	0x00002161
    4168:	e000e100 	.word	0xe000e100

0000416c <configure_usart_callbacks>:

void configure_usart_callbacks(void)
{
    416c:	b510      	push	{r4, lr}
	usart_register_callback(&usart_instance,usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
    416e:	4c06      	ldr	r4, [pc, #24]	; (4188 <configure_usart_callbacks+0x1c>)
    4170:	2201      	movs	r2, #1
    4172:	4906      	ldr	r1, [pc, #24]	; (418c <configure_usart_callbacks+0x20>)
    4174:	0020      	movs	r0, r4
    4176:	4b06      	ldr	r3, [pc, #24]	; (4190 <configure_usart_callbacks+0x24>)
    4178:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    417a:	2231      	movs	r2, #49	; 0x31
    417c:	5ca3      	ldrb	r3, [r4, r2]
    417e:	2102      	movs	r1, #2
    4180:	430b      	orrs	r3, r1
    4182:	54a3      	strb	r3, [r4, r2]
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
}
    4184:	bd10      	pop	{r4, pc}
    4186:	46c0      	nop			; (mov r8, r8)
    4188:	20000388 	.word	0x20000388
    418c:	00003f8d 	.word	0x00003f8d
    4190:	0000260d 	.word	0x0000260d

00004194 <configure_adc>:
	usart_enable(&usart_USB);
}
*/

void configure_adc(void)
{
    4194:	b510      	push	{r4, lr}
    4196:	b08c      	sub	sp, #48	; 0x30
	struct adc_config config_adc;
	adc_get_config_defaults(&config_adc);
    4198:	4668      	mov	r0, sp
    419a:	4b16      	ldr	r3, [pc, #88]	; (41f4 <configure_adc+0x60>)
    419c:	4798      	blx	r3
	config_adc.clock_source = GCLK_GENERATOR_1;
    419e:	2301      	movs	r3, #1
    41a0:	466a      	mov	r2, sp
    41a2:	7013      	strb	r3, [r2, #0]
	config_adc.clock_prescaler = ADC_CLOCK_PRESCALER_DIV16;
    41a4:	2380      	movs	r3, #128	; 0x80
    41a6:	009b      	lsls	r3, r3, #2
    41a8:	8053      	strh	r3, [r2, #2]
	config_adc.reference = ADC_REFERENCE_INT1V;
    41aa:	2300      	movs	r3, #0
    41ac:	7053      	strb	r3, [r2, #1]
	config_adc.positive_input = ADC_POSITIVE_INPUT_TEMP;
    41ae:	3318      	adds	r3, #24
    41b0:	7313      	strb	r3, [r2, #12]
	config_adc.negative_input = ADC_NEGATIVE_INPUT_GND;
    41b2:	23c0      	movs	r3, #192	; 0xc0
    41b4:	015b      	lsls	r3, r3, #5
    41b6:	81d3      	strh	r3, [r2, #14]
	adc_init(&adc_instance, ADC, &config_adc);
    41b8:	4c0f      	ldr	r4, [pc, #60]	; (41f8 <configure_adc+0x64>)
    41ba:	4910      	ldr	r1, [pc, #64]	; (41fc <configure_adc+0x68>)
    41bc:	0020      	movs	r0, r4
    41be:	4b10      	ldr	r3, [pc, #64]	; (4200 <configure_adc+0x6c>)
    41c0:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    41c2:	6822      	ldr	r2, [r4, #0]
    41c4:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    41c6:	b25b      	sxtb	r3, r3
    41c8:	2b00      	cmp	r3, #0
    41ca:	dbfb      	blt.n	41c4 <configure_adc+0x30>
    41cc:	2180      	movs	r1, #128	; 0x80
    41ce:	0409      	lsls	r1, r1, #16
    41d0:	4b0c      	ldr	r3, [pc, #48]	; (4204 <configure_adc+0x70>)
    41d2:	6019      	str	r1, [r3, #0]
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    41d4:	230f      	movs	r3, #15
    41d6:	7593      	strb	r3, [r2, #22]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    41d8:	7613      	strb	r3, [r2, #24]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    41da:	7813      	ldrb	r3, [r2, #0]
    41dc:	2102      	movs	r1, #2
    41de:	430b      	orrs	r3, r1
    41e0:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
    41e2:	4b05      	ldr	r3, [pc, #20]	; (41f8 <configure_adc+0x64>)
    41e4:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    41e6:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    41e8:	b25b      	sxtb	r3, r3
    41ea:	2b00      	cmp	r3, #0
    41ec:	dbfb      	blt.n	41e6 <configure_adc+0x52>
	adc_enable(&adc_instance);
}
    41ee:	b00c      	add	sp, #48	; 0x30
    41f0:	bd10      	pop	{r4, pc}
    41f2:	46c0      	nop			; (mov r8, r8)
    41f4:	00001859 	.word	0x00001859
    41f8:	20000b4c 	.word	0x20000b4c
    41fc:	42004000 	.word	0x42004000
    4200:	0000189d 	.word	0x0000189d
    4204:	e000e100 	.word	0xe000e100

00004208 <setupBoard>:


void setupBoard(void)
{
    4208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t adcResult;
	uint16_t megaHurtz = (uint16_t)system_gclk_gen_get_hz(0);
    420a:	2000      	movs	r0, #0
    420c:	4b31      	ldr	r3, [pc, #196]	; (42d4 <setupBoard+0xcc>)
    420e:	4798      	blx	r3
    4210:	b287      	uxth	r7, r0
	

	system_init();
    4212:	4b31      	ldr	r3, [pc, #196]	; (42d8 <setupBoard+0xd0>)
    4214:	4798      	blx	r3
	
	configure_adc();
    4216:	4b31      	ldr	r3, [pc, #196]	; (42dc <setupBoard+0xd4>)
    4218:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    421a:	4b31      	ldr	r3, [pc, #196]	; (42e0 <setupBoard+0xd8>)
    421c:	6819      	ldr	r1, [r3, #0]
    421e:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    4220:	b25b      	sxtb	r3, r3
    4222:	2b00      	cmp	r3, #0
    4224:	dbfb      	blt.n	421e <setupBoard+0x16>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    4226:	7b0b      	ldrb	r3, [r1, #12]
    4228:	2202      	movs	r2, #2
    422a:	4313      	orrs	r3, r2
    422c:	730b      	strb	r3, [r1, #12]
    422e:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    4230:	b25b      	sxtb	r3, r3
    4232:	2b00      	cmp	r3, #0
    4234:	dbfb      	blt.n	422e <setupBoard+0x26>
	if (int_flags & ADC_INTFLAG_RESRDY) {
    4236:	2401      	movs	r4, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
    4238:	2604      	movs	r6, #4
		status_flags |= ADC_STATUS_WINDOW;
    423a:	2502      	movs	r5, #2
    423c:	e001      	b.n	4242 <setupBoard+0x3a>
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    423e:	4214      	tst	r4, r2
    4240:	d10a      	bne.n	4258 <setupBoard+0x50>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    4242:	7e0b      	ldrb	r3, [r1, #24]
    4244:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
    4246:	0022      	movs	r2, r4
    4248:	401a      	ands	r2, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
    424a:	421e      	tst	r6, r3
    424c:	d000      	beq.n	4250 <setupBoard+0x48>
		status_flags |= ADC_STATUS_WINDOW;
    424e:	432a      	orrs	r2, r5
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    4250:	421d      	tst	r5, r3
    4252:	d0f4      	beq.n	423e <setupBoard+0x36>
		status_flags |= ADC_STATUS_OVERRUN;
    4254:	4332      	orrs	r2, r6
    4256:	e7f2      	b.n	423e <setupBoard+0x36>
    4258:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    425a:	b25b      	sxtb	r3, r3
    425c:	2b00      	cmp	r3, #0
    425e:	dbfb      	blt.n	4258 <setupBoard+0x50>
	*result = adc_module->RESULT.reg;
    4260:	8b48      	ldrh	r0, [r1, #26]
    4262:	b280      	uxth	r0, r0
	adc_module->INTFLAG.reg = int_flags;
    4264:	2301      	movs	r3, #1
    4266:	760b      	strb	r3, [r1, #24]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    4268:	7e0a      	ldrb	r2, [r1, #24]
    426a:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    426c:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    426e:	0754      	lsls	r4, r2, #29
    4270:	d501      	bpl.n	4276 <setupBoard+0x6e>
		status_flags |= ADC_STATUS_WINDOW;
    4272:	2402      	movs	r4, #2
    4274:	4323      	orrs	r3, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    4276:	0792      	lsls	r2, r2, #30
    4278:	d501      	bpl.n	427e <setupBoard+0x76>
		status_flags |= ADC_STATUS_OVERRUN;
    427a:	2204      	movs	r2, #4
    427c:	4313      	orrs	r3, r2
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    427e:	075b      	lsls	r3, r3, #29
    4280:	d501      	bpl.n	4286 <setupBoard+0x7e>
	adc_module->INTFLAG.reg = int_flags;
    4282:	2302      	movs	r3, #2
    4284:	760b      	strb	r3, [r1, #24]
	do {
	/* Wait for conversion to be done and read out result */
	} while (adc_read(&adc_instance, &adcResult) == STATUS_BUSY);
	
	
	srand((adcResult ^ megaHurtz));
    4286:	4078      	eors	r0, r7
    4288:	4b16      	ldr	r3, [pc, #88]	; (42e4 <setupBoard+0xdc>)
    428a:	4798      	blx	r3
	
	delay_init();
    428c:	4b16      	ldr	r3, [pc, #88]	; (42e8 <setupBoard+0xe0>)
    428e:	4798      	blx	r3
	
	conf_systick();
    4290:	4c16      	ldr	r4, [pc, #88]	; (42ec <setupBoard+0xe4>)
    4292:	47a0      	blx	r4

	//configure_usart_USB();
	
	configure_usart();
    4294:	4b16      	ldr	r3, [pc, #88]	; (42f0 <setupBoard+0xe8>)
    4296:	4798      	blx	r3
	configure_usart_callbacks();
    4298:	4b16      	ldr	r3, [pc, #88]	; (42f4 <setupBoard+0xec>)
    429a:	4798      	blx	r3
	cpu_irq_enable();
    429c:	2201      	movs	r2, #1
    429e:	4b16      	ldr	r3, [pc, #88]	; (42f8 <setupBoard+0xf0>)
    42a0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    42a2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    42a6:	b662      	cpsie	i
	system_interrupt_enable_global();
	
	//I have no idea why I need to call this; it's in the callback and it
	//doesn't work without this line here. Remove this at your own peril.
	usart_read_buffer_job(&usart_instance, (uint8_t*)&rx_buf, 1);
    42a8:	4914      	ldr	r1, [pc, #80]	; (42fc <setupBoard+0xf4>)
    42aa:	4815      	ldr	r0, [pc, #84]	; (4300 <setupBoard+0xf8>)
    42ac:	4b15      	ldr	r3, [pc, #84]	; (4304 <setupBoard+0xfc>)
    42ae:	4798      	blx	r3
	


	printf("\n\rSerial OK 9600 8N1\n\r");
    42b0:	4815      	ldr	r0, [pc, #84]	; (4308 <setupBoard+0x100>)
    42b2:	4b16      	ldr	r3, [pc, #88]	; (430c <setupBoard+0x104>)
    42b4:	4798      	blx	r3

	
	InitLCD();
    42b6:	4b16      	ldr	r3, [pc, #88]	; (4310 <setupBoard+0x108>)
    42b8:	4798      	blx	r3
	splashScreen();
    42ba:	4b16      	ldr	r3, [pc, #88]	; (4314 <setupBoard+0x10c>)
    42bc:	4798      	blx	r3
			
	conf_systick();
    42be:	47a0      	blx	r4

	xCharPos=0;
    42c0:	2300      	movs	r3, #0
    42c2:	4a15      	ldr	r2, [pc, #84]	; (4318 <setupBoard+0x110>)
    42c4:	8013      	strh	r3, [r2, #0]
	yCharPos=0;
    42c6:	4a15      	ldr	r2, [pc, #84]	; (431c <setupBoard+0x114>)
    42c8:	8013      	strh	r3, [r2, #0]
	drawChar(0xFF);
    42ca:	20ff      	movs	r0, #255	; 0xff
    42cc:	4b14      	ldr	r3, [pc, #80]	; (4320 <setupBoard+0x118>)
    42ce:	4798      	blx	r3
}
    42d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    42d2:	46c0      	nop			; (mov r8, r8)
    42d4:	00002d05 	.word	0x00002d05
    42d8:	00002f49 	.word	0x00002f49
    42dc:	00004195 	.word	0x00004195
    42e0:	20000b4c 	.word	0x20000b4c
    42e4:	0000497d 	.word	0x0000497d
    42e8:	00001745 	.word	0x00001745
    42ec:	00004011 	.word	0x00004011
    42f0:	00004065 	.word	0x00004065
    42f4:	0000416d 	.word	0x0000416d
    42f8:	2000001c 	.word	0x2000001c
    42fc:	20000b48 	.word	0x20000b48
    4300:	20000388 	.word	0x20000388
    4304:	00002625 	.word	0x00002625
    4308:	00007d40 	.word	0x00007d40
    430c:	00004921 	.word	0x00004921
    4310:	00003d41 	.word	0x00003d41
    4314:	0000150d 	.word	0x0000150d
    4318:	200002b8 	.word	0x200002b8
    431c:	200002ba 	.word	0x200002ba
    4320:	0000312d 	.word	0x0000312d

00004324 <main>:
{
    4324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	setupBoard();
    4326:	4b20      	ldr	r3, [pc, #128]	; (43a8 <main+0x84>)
    4328:	4798      	blx	r3
	uint8_t * buffer  = malloc(UART_BUFFER_SIZE * sizeof(uint8_t));
    432a:	200a      	movs	r0, #10
    432c:	4b1f      	ldr	r3, [pc, #124]	; (43ac <main+0x88>)
    432e:	4798      	blx	r3
	ouroboros = ring_init(buffer, UART_BUFFER_SIZE);
    4330:	210a      	movs	r1, #10
    4332:	4b1f      	ldr	r3, [pc, #124]	; (43b0 <main+0x8c>)
    4334:	4798      	blx	r3
    4336:	4b1f      	ldr	r3, [pc, #124]	; (43b4 <main+0x90>)
    4338:	6018      	str	r0, [r3, #0]
		if((ul_tickcount % (UINT16_MAX/4) == 0) && (funcLock == false))
    433a:	4f1f      	ldr	r7, [pc, #124]	; (43b8 <main+0x94>)
    433c:	4e1f      	ldr	r6, [pc, #124]	; (43bc <main+0x98>)
    433e:	4d20      	ldr	r5, [pc, #128]	; (43c0 <main+0x9c>)
    4340:	e015      	b.n	436e <main+0x4a>
		if((ul_tickcount % 200 == 0) && (funcLock == false))
    4342:	21c8      	movs	r1, #200	; 0xc8
    4344:	0020      	movs	r0, r4
    4346:	4b1d      	ldr	r3, [pc, #116]	; (43bc <main+0x98>)
    4348:	4798      	blx	r3
    434a:	b289      	uxth	r1, r1
    434c:	2900      	cmp	r1, #0
    434e:	d10e      	bne.n	436e <main+0x4a>
    4350:	4b1c      	ldr	r3, [pc, #112]	; (43c4 <main+0xa0>)
    4352:	781b      	ldrb	r3, [r3, #0]
    4354:	2b00      	cmp	r3, #0
    4356:	d10a      	bne.n	436e <main+0x4a>
			funcLock = true;
    4358:	4c1a      	ldr	r4, [pc, #104]	; (43c4 <main+0xa0>)
    435a:	2301      	movs	r3, #1
    435c:	7023      	strb	r3, [r4, #0]
			readKeyboard();
    435e:	4b1a      	ldr	r3, [pc, #104]	; (43c8 <main+0xa4>)
    4360:	4798      	blx	r3
			printKeyboardBuffer();
    4362:	4b1a      	ldr	r3, [pc, #104]	; (43cc <main+0xa8>)
    4364:	4798      	blx	r3
			parseRXBuffer();
    4366:	4b1a      	ldr	r3, [pc, #104]	; (43d0 <main+0xac>)
    4368:	4798      	blx	r3
			funcLock = false;
    436a:	2300      	movs	r3, #0
    436c:	7023      	strb	r3, [r4, #0]
		__WFI();
    436e:	bf30      	wfi
		if((ul_tickcount % (UINT16_MAX/4) == 0) && (funcLock == false))
    4370:	883c      	ldrh	r4, [r7, #0]
    4372:	0029      	movs	r1, r5
    4374:	0020      	movs	r0, r4
    4376:	47b0      	blx	r6
    4378:	b289      	uxth	r1, r1
    437a:	2900      	cmp	r1, #0
    437c:	d1e1      	bne.n	4342 <main+0x1e>
    437e:	4b11      	ldr	r3, [pc, #68]	; (43c4 <main+0xa0>)
    4380:	781b      	ldrb	r3, [r3, #0]
    4382:	2b00      	cmp	r3, #0
    4384:	d1f3      	bne.n	436e <main+0x4a>
			funcLock = true;
    4386:	4c0f      	ldr	r4, [pc, #60]	; (43c4 <main+0xa0>)
    4388:	3301      	adds	r3, #1
    438a:	7023      	strb	r3, [r4, #0]
			blinkCursor();
    438c:	4b11      	ldr	r3, [pc, #68]	; (43d4 <main+0xb0>)
    438e:	4798      	blx	r3
			funcLock = false;
    4390:	2300      	movs	r3, #0
    4392:	7023      	strb	r3, [r4, #0]
		if((ul_tickcount % 200 == 0) && (funcLock == false))
    4394:	4b08      	ldr	r3, [pc, #32]	; (43b8 <main+0x94>)
    4396:	8818      	ldrh	r0, [r3, #0]
    4398:	21c8      	movs	r1, #200	; 0xc8
    439a:	4b08      	ldr	r3, [pc, #32]	; (43bc <main+0x98>)
    439c:	4798      	blx	r3
    439e:	b289      	uxth	r1, r1
    43a0:	2900      	cmp	r1, #0
    43a2:	d0d9      	beq.n	4358 <main+0x34>
    43a4:	e7e3      	b.n	436e <main+0x4a>
    43a6:	46c0      	nop			; (mov r8, r8)
    43a8:	00004209 	.word	0x00004209
    43ac:	00004799 	.word	0x00004799
    43b0:	00000115 	.word	0x00000115
    43b4:	2000035c 	.word	0x2000035c
    43b8:	200002c0 	.word	0x200002c0
    43bc:	000044e5 	.word	0x000044e5
    43c0:	00003fff 	.word	0x00003fff
    43c4:	200002be 	.word	0x200002be
    43c8:	0000388d 	.word	0x0000388d
    43cc:	000034f5 	.word	0x000034f5
    43d0:	000016f1 	.word	0x000016f1
    43d4:	00003215 	.word	0x00003215

000043d8 <__udivsi3>:
    43d8:	2200      	movs	r2, #0
    43da:	0843      	lsrs	r3, r0, #1
    43dc:	428b      	cmp	r3, r1
    43de:	d374      	bcc.n	44ca <__udivsi3+0xf2>
    43e0:	0903      	lsrs	r3, r0, #4
    43e2:	428b      	cmp	r3, r1
    43e4:	d35f      	bcc.n	44a6 <__udivsi3+0xce>
    43e6:	0a03      	lsrs	r3, r0, #8
    43e8:	428b      	cmp	r3, r1
    43ea:	d344      	bcc.n	4476 <__udivsi3+0x9e>
    43ec:	0b03      	lsrs	r3, r0, #12
    43ee:	428b      	cmp	r3, r1
    43f0:	d328      	bcc.n	4444 <__udivsi3+0x6c>
    43f2:	0c03      	lsrs	r3, r0, #16
    43f4:	428b      	cmp	r3, r1
    43f6:	d30d      	bcc.n	4414 <__udivsi3+0x3c>
    43f8:	22ff      	movs	r2, #255	; 0xff
    43fa:	0209      	lsls	r1, r1, #8
    43fc:	ba12      	rev	r2, r2
    43fe:	0c03      	lsrs	r3, r0, #16
    4400:	428b      	cmp	r3, r1
    4402:	d302      	bcc.n	440a <__udivsi3+0x32>
    4404:	1212      	asrs	r2, r2, #8
    4406:	0209      	lsls	r1, r1, #8
    4408:	d065      	beq.n	44d6 <__udivsi3+0xfe>
    440a:	0b03      	lsrs	r3, r0, #12
    440c:	428b      	cmp	r3, r1
    440e:	d319      	bcc.n	4444 <__udivsi3+0x6c>
    4410:	e000      	b.n	4414 <__udivsi3+0x3c>
    4412:	0a09      	lsrs	r1, r1, #8
    4414:	0bc3      	lsrs	r3, r0, #15
    4416:	428b      	cmp	r3, r1
    4418:	d301      	bcc.n	441e <__udivsi3+0x46>
    441a:	03cb      	lsls	r3, r1, #15
    441c:	1ac0      	subs	r0, r0, r3
    441e:	4152      	adcs	r2, r2
    4420:	0b83      	lsrs	r3, r0, #14
    4422:	428b      	cmp	r3, r1
    4424:	d301      	bcc.n	442a <__udivsi3+0x52>
    4426:	038b      	lsls	r3, r1, #14
    4428:	1ac0      	subs	r0, r0, r3
    442a:	4152      	adcs	r2, r2
    442c:	0b43      	lsrs	r3, r0, #13
    442e:	428b      	cmp	r3, r1
    4430:	d301      	bcc.n	4436 <__udivsi3+0x5e>
    4432:	034b      	lsls	r3, r1, #13
    4434:	1ac0      	subs	r0, r0, r3
    4436:	4152      	adcs	r2, r2
    4438:	0b03      	lsrs	r3, r0, #12
    443a:	428b      	cmp	r3, r1
    443c:	d301      	bcc.n	4442 <__udivsi3+0x6a>
    443e:	030b      	lsls	r3, r1, #12
    4440:	1ac0      	subs	r0, r0, r3
    4442:	4152      	adcs	r2, r2
    4444:	0ac3      	lsrs	r3, r0, #11
    4446:	428b      	cmp	r3, r1
    4448:	d301      	bcc.n	444e <__udivsi3+0x76>
    444a:	02cb      	lsls	r3, r1, #11
    444c:	1ac0      	subs	r0, r0, r3
    444e:	4152      	adcs	r2, r2
    4450:	0a83      	lsrs	r3, r0, #10
    4452:	428b      	cmp	r3, r1
    4454:	d301      	bcc.n	445a <__udivsi3+0x82>
    4456:	028b      	lsls	r3, r1, #10
    4458:	1ac0      	subs	r0, r0, r3
    445a:	4152      	adcs	r2, r2
    445c:	0a43      	lsrs	r3, r0, #9
    445e:	428b      	cmp	r3, r1
    4460:	d301      	bcc.n	4466 <__udivsi3+0x8e>
    4462:	024b      	lsls	r3, r1, #9
    4464:	1ac0      	subs	r0, r0, r3
    4466:	4152      	adcs	r2, r2
    4468:	0a03      	lsrs	r3, r0, #8
    446a:	428b      	cmp	r3, r1
    446c:	d301      	bcc.n	4472 <__udivsi3+0x9a>
    446e:	020b      	lsls	r3, r1, #8
    4470:	1ac0      	subs	r0, r0, r3
    4472:	4152      	adcs	r2, r2
    4474:	d2cd      	bcs.n	4412 <__udivsi3+0x3a>
    4476:	09c3      	lsrs	r3, r0, #7
    4478:	428b      	cmp	r3, r1
    447a:	d301      	bcc.n	4480 <__udivsi3+0xa8>
    447c:	01cb      	lsls	r3, r1, #7
    447e:	1ac0      	subs	r0, r0, r3
    4480:	4152      	adcs	r2, r2
    4482:	0983      	lsrs	r3, r0, #6
    4484:	428b      	cmp	r3, r1
    4486:	d301      	bcc.n	448c <__udivsi3+0xb4>
    4488:	018b      	lsls	r3, r1, #6
    448a:	1ac0      	subs	r0, r0, r3
    448c:	4152      	adcs	r2, r2
    448e:	0943      	lsrs	r3, r0, #5
    4490:	428b      	cmp	r3, r1
    4492:	d301      	bcc.n	4498 <__udivsi3+0xc0>
    4494:	014b      	lsls	r3, r1, #5
    4496:	1ac0      	subs	r0, r0, r3
    4498:	4152      	adcs	r2, r2
    449a:	0903      	lsrs	r3, r0, #4
    449c:	428b      	cmp	r3, r1
    449e:	d301      	bcc.n	44a4 <__udivsi3+0xcc>
    44a0:	010b      	lsls	r3, r1, #4
    44a2:	1ac0      	subs	r0, r0, r3
    44a4:	4152      	adcs	r2, r2
    44a6:	08c3      	lsrs	r3, r0, #3
    44a8:	428b      	cmp	r3, r1
    44aa:	d301      	bcc.n	44b0 <__udivsi3+0xd8>
    44ac:	00cb      	lsls	r3, r1, #3
    44ae:	1ac0      	subs	r0, r0, r3
    44b0:	4152      	adcs	r2, r2
    44b2:	0883      	lsrs	r3, r0, #2
    44b4:	428b      	cmp	r3, r1
    44b6:	d301      	bcc.n	44bc <__udivsi3+0xe4>
    44b8:	008b      	lsls	r3, r1, #2
    44ba:	1ac0      	subs	r0, r0, r3
    44bc:	4152      	adcs	r2, r2
    44be:	0843      	lsrs	r3, r0, #1
    44c0:	428b      	cmp	r3, r1
    44c2:	d301      	bcc.n	44c8 <__udivsi3+0xf0>
    44c4:	004b      	lsls	r3, r1, #1
    44c6:	1ac0      	subs	r0, r0, r3
    44c8:	4152      	adcs	r2, r2
    44ca:	1a41      	subs	r1, r0, r1
    44cc:	d200      	bcs.n	44d0 <__udivsi3+0xf8>
    44ce:	4601      	mov	r1, r0
    44d0:	4152      	adcs	r2, r2
    44d2:	4610      	mov	r0, r2
    44d4:	4770      	bx	lr
    44d6:	e7ff      	b.n	44d8 <__udivsi3+0x100>
    44d8:	b501      	push	{r0, lr}
    44da:	2000      	movs	r0, #0
    44dc:	f000 f8f0 	bl	46c0 <__aeabi_idiv0>
    44e0:	bd02      	pop	{r1, pc}
    44e2:	46c0      	nop			; (mov r8, r8)

000044e4 <__aeabi_uidivmod>:
    44e4:	2900      	cmp	r1, #0
    44e6:	d0f7      	beq.n	44d8 <__udivsi3+0x100>
    44e8:	e776      	b.n	43d8 <__udivsi3>
    44ea:	4770      	bx	lr

000044ec <__divsi3>:
    44ec:	4603      	mov	r3, r0
    44ee:	430b      	orrs	r3, r1
    44f0:	d47f      	bmi.n	45f2 <__divsi3+0x106>
    44f2:	2200      	movs	r2, #0
    44f4:	0843      	lsrs	r3, r0, #1
    44f6:	428b      	cmp	r3, r1
    44f8:	d374      	bcc.n	45e4 <__divsi3+0xf8>
    44fa:	0903      	lsrs	r3, r0, #4
    44fc:	428b      	cmp	r3, r1
    44fe:	d35f      	bcc.n	45c0 <__divsi3+0xd4>
    4500:	0a03      	lsrs	r3, r0, #8
    4502:	428b      	cmp	r3, r1
    4504:	d344      	bcc.n	4590 <__divsi3+0xa4>
    4506:	0b03      	lsrs	r3, r0, #12
    4508:	428b      	cmp	r3, r1
    450a:	d328      	bcc.n	455e <__divsi3+0x72>
    450c:	0c03      	lsrs	r3, r0, #16
    450e:	428b      	cmp	r3, r1
    4510:	d30d      	bcc.n	452e <__divsi3+0x42>
    4512:	22ff      	movs	r2, #255	; 0xff
    4514:	0209      	lsls	r1, r1, #8
    4516:	ba12      	rev	r2, r2
    4518:	0c03      	lsrs	r3, r0, #16
    451a:	428b      	cmp	r3, r1
    451c:	d302      	bcc.n	4524 <__divsi3+0x38>
    451e:	1212      	asrs	r2, r2, #8
    4520:	0209      	lsls	r1, r1, #8
    4522:	d065      	beq.n	45f0 <__divsi3+0x104>
    4524:	0b03      	lsrs	r3, r0, #12
    4526:	428b      	cmp	r3, r1
    4528:	d319      	bcc.n	455e <__divsi3+0x72>
    452a:	e000      	b.n	452e <__divsi3+0x42>
    452c:	0a09      	lsrs	r1, r1, #8
    452e:	0bc3      	lsrs	r3, r0, #15
    4530:	428b      	cmp	r3, r1
    4532:	d301      	bcc.n	4538 <__divsi3+0x4c>
    4534:	03cb      	lsls	r3, r1, #15
    4536:	1ac0      	subs	r0, r0, r3
    4538:	4152      	adcs	r2, r2
    453a:	0b83      	lsrs	r3, r0, #14
    453c:	428b      	cmp	r3, r1
    453e:	d301      	bcc.n	4544 <__divsi3+0x58>
    4540:	038b      	lsls	r3, r1, #14
    4542:	1ac0      	subs	r0, r0, r3
    4544:	4152      	adcs	r2, r2
    4546:	0b43      	lsrs	r3, r0, #13
    4548:	428b      	cmp	r3, r1
    454a:	d301      	bcc.n	4550 <__divsi3+0x64>
    454c:	034b      	lsls	r3, r1, #13
    454e:	1ac0      	subs	r0, r0, r3
    4550:	4152      	adcs	r2, r2
    4552:	0b03      	lsrs	r3, r0, #12
    4554:	428b      	cmp	r3, r1
    4556:	d301      	bcc.n	455c <__divsi3+0x70>
    4558:	030b      	lsls	r3, r1, #12
    455a:	1ac0      	subs	r0, r0, r3
    455c:	4152      	adcs	r2, r2
    455e:	0ac3      	lsrs	r3, r0, #11
    4560:	428b      	cmp	r3, r1
    4562:	d301      	bcc.n	4568 <__divsi3+0x7c>
    4564:	02cb      	lsls	r3, r1, #11
    4566:	1ac0      	subs	r0, r0, r3
    4568:	4152      	adcs	r2, r2
    456a:	0a83      	lsrs	r3, r0, #10
    456c:	428b      	cmp	r3, r1
    456e:	d301      	bcc.n	4574 <__divsi3+0x88>
    4570:	028b      	lsls	r3, r1, #10
    4572:	1ac0      	subs	r0, r0, r3
    4574:	4152      	adcs	r2, r2
    4576:	0a43      	lsrs	r3, r0, #9
    4578:	428b      	cmp	r3, r1
    457a:	d301      	bcc.n	4580 <__divsi3+0x94>
    457c:	024b      	lsls	r3, r1, #9
    457e:	1ac0      	subs	r0, r0, r3
    4580:	4152      	adcs	r2, r2
    4582:	0a03      	lsrs	r3, r0, #8
    4584:	428b      	cmp	r3, r1
    4586:	d301      	bcc.n	458c <__divsi3+0xa0>
    4588:	020b      	lsls	r3, r1, #8
    458a:	1ac0      	subs	r0, r0, r3
    458c:	4152      	adcs	r2, r2
    458e:	d2cd      	bcs.n	452c <__divsi3+0x40>
    4590:	09c3      	lsrs	r3, r0, #7
    4592:	428b      	cmp	r3, r1
    4594:	d301      	bcc.n	459a <__divsi3+0xae>
    4596:	01cb      	lsls	r3, r1, #7
    4598:	1ac0      	subs	r0, r0, r3
    459a:	4152      	adcs	r2, r2
    459c:	0983      	lsrs	r3, r0, #6
    459e:	428b      	cmp	r3, r1
    45a0:	d301      	bcc.n	45a6 <__divsi3+0xba>
    45a2:	018b      	lsls	r3, r1, #6
    45a4:	1ac0      	subs	r0, r0, r3
    45a6:	4152      	adcs	r2, r2
    45a8:	0943      	lsrs	r3, r0, #5
    45aa:	428b      	cmp	r3, r1
    45ac:	d301      	bcc.n	45b2 <__divsi3+0xc6>
    45ae:	014b      	lsls	r3, r1, #5
    45b0:	1ac0      	subs	r0, r0, r3
    45b2:	4152      	adcs	r2, r2
    45b4:	0903      	lsrs	r3, r0, #4
    45b6:	428b      	cmp	r3, r1
    45b8:	d301      	bcc.n	45be <__divsi3+0xd2>
    45ba:	010b      	lsls	r3, r1, #4
    45bc:	1ac0      	subs	r0, r0, r3
    45be:	4152      	adcs	r2, r2
    45c0:	08c3      	lsrs	r3, r0, #3
    45c2:	428b      	cmp	r3, r1
    45c4:	d301      	bcc.n	45ca <__divsi3+0xde>
    45c6:	00cb      	lsls	r3, r1, #3
    45c8:	1ac0      	subs	r0, r0, r3
    45ca:	4152      	adcs	r2, r2
    45cc:	0883      	lsrs	r3, r0, #2
    45ce:	428b      	cmp	r3, r1
    45d0:	d301      	bcc.n	45d6 <__divsi3+0xea>
    45d2:	008b      	lsls	r3, r1, #2
    45d4:	1ac0      	subs	r0, r0, r3
    45d6:	4152      	adcs	r2, r2
    45d8:	0843      	lsrs	r3, r0, #1
    45da:	428b      	cmp	r3, r1
    45dc:	d301      	bcc.n	45e2 <__divsi3+0xf6>
    45de:	004b      	lsls	r3, r1, #1
    45e0:	1ac0      	subs	r0, r0, r3
    45e2:	4152      	adcs	r2, r2
    45e4:	1a41      	subs	r1, r0, r1
    45e6:	d200      	bcs.n	45ea <__divsi3+0xfe>
    45e8:	4601      	mov	r1, r0
    45ea:	4152      	adcs	r2, r2
    45ec:	4610      	mov	r0, r2
    45ee:	4770      	bx	lr
    45f0:	e05d      	b.n	46ae <__divsi3+0x1c2>
    45f2:	0fca      	lsrs	r2, r1, #31
    45f4:	d000      	beq.n	45f8 <__divsi3+0x10c>
    45f6:	4249      	negs	r1, r1
    45f8:	1003      	asrs	r3, r0, #32
    45fa:	d300      	bcc.n	45fe <__divsi3+0x112>
    45fc:	4240      	negs	r0, r0
    45fe:	4053      	eors	r3, r2
    4600:	2200      	movs	r2, #0
    4602:	469c      	mov	ip, r3
    4604:	0903      	lsrs	r3, r0, #4
    4606:	428b      	cmp	r3, r1
    4608:	d32d      	bcc.n	4666 <__divsi3+0x17a>
    460a:	0a03      	lsrs	r3, r0, #8
    460c:	428b      	cmp	r3, r1
    460e:	d312      	bcc.n	4636 <__divsi3+0x14a>
    4610:	22fc      	movs	r2, #252	; 0xfc
    4612:	0189      	lsls	r1, r1, #6
    4614:	ba12      	rev	r2, r2
    4616:	0a03      	lsrs	r3, r0, #8
    4618:	428b      	cmp	r3, r1
    461a:	d30c      	bcc.n	4636 <__divsi3+0x14a>
    461c:	0189      	lsls	r1, r1, #6
    461e:	1192      	asrs	r2, r2, #6
    4620:	428b      	cmp	r3, r1
    4622:	d308      	bcc.n	4636 <__divsi3+0x14a>
    4624:	0189      	lsls	r1, r1, #6
    4626:	1192      	asrs	r2, r2, #6
    4628:	428b      	cmp	r3, r1
    462a:	d304      	bcc.n	4636 <__divsi3+0x14a>
    462c:	0189      	lsls	r1, r1, #6
    462e:	d03a      	beq.n	46a6 <__divsi3+0x1ba>
    4630:	1192      	asrs	r2, r2, #6
    4632:	e000      	b.n	4636 <__divsi3+0x14a>
    4634:	0989      	lsrs	r1, r1, #6
    4636:	09c3      	lsrs	r3, r0, #7
    4638:	428b      	cmp	r3, r1
    463a:	d301      	bcc.n	4640 <__divsi3+0x154>
    463c:	01cb      	lsls	r3, r1, #7
    463e:	1ac0      	subs	r0, r0, r3
    4640:	4152      	adcs	r2, r2
    4642:	0983      	lsrs	r3, r0, #6
    4644:	428b      	cmp	r3, r1
    4646:	d301      	bcc.n	464c <__divsi3+0x160>
    4648:	018b      	lsls	r3, r1, #6
    464a:	1ac0      	subs	r0, r0, r3
    464c:	4152      	adcs	r2, r2
    464e:	0943      	lsrs	r3, r0, #5
    4650:	428b      	cmp	r3, r1
    4652:	d301      	bcc.n	4658 <__divsi3+0x16c>
    4654:	014b      	lsls	r3, r1, #5
    4656:	1ac0      	subs	r0, r0, r3
    4658:	4152      	adcs	r2, r2
    465a:	0903      	lsrs	r3, r0, #4
    465c:	428b      	cmp	r3, r1
    465e:	d301      	bcc.n	4664 <__divsi3+0x178>
    4660:	010b      	lsls	r3, r1, #4
    4662:	1ac0      	subs	r0, r0, r3
    4664:	4152      	adcs	r2, r2
    4666:	08c3      	lsrs	r3, r0, #3
    4668:	428b      	cmp	r3, r1
    466a:	d301      	bcc.n	4670 <__divsi3+0x184>
    466c:	00cb      	lsls	r3, r1, #3
    466e:	1ac0      	subs	r0, r0, r3
    4670:	4152      	adcs	r2, r2
    4672:	0883      	lsrs	r3, r0, #2
    4674:	428b      	cmp	r3, r1
    4676:	d301      	bcc.n	467c <__divsi3+0x190>
    4678:	008b      	lsls	r3, r1, #2
    467a:	1ac0      	subs	r0, r0, r3
    467c:	4152      	adcs	r2, r2
    467e:	d2d9      	bcs.n	4634 <__divsi3+0x148>
    4680:	0843      	lsrs	r3, r0, #1
    4682:	428b      	cmp	r3, r1
    4684:	d301      	bcc.n	468a <__divsi3+0x19e>
    4686:	004b      	lsls	r3, r1, #1
    4688:	1ac0      	subs	r0, r0, r3
    468a:	4152      	adcs	r2, r2
    468c:	1a41      	subs	r1, r0, r1
    468e:	d200      	bcs.n	4692 <__divsi3+0x1a6>
    4690:	4601      	mov	r1, r0
    4692:	4663      	mov	r3, ip
    4694:	4152      	adcs	r2, r2
    4696:	105b      	asrs	r3, r3, #1
    4698:	4610      	mov	r0, r2
    469a:	d301      	bcc.n	46a0 <__divsi3+0x1b4>
    469c:	4240      	negs	r0, r0
    469e:	2b00      	cmp	r3, #0
    46a0:	d500      	bpl.n	46a4 <__divsi3+0x1b8>
    46a2:	4249      	negs	r1, r1
    46a4:	4770      	bx	lr
    46a6:	4663      	mov	r3, ip
    46a8:	105b      	asrs	r3, r3, #1
    46aa:	d300      	bcc.n	46ae <__divsi3+0x1c2>
    46ac:	4240      	negs	r0, r0
    46ae:	b501      	push	{r0, lr}
    46b0:	2000      	movs	r0, #0
    46b2:	f000 f805 	bl	46c0 <__aeabi_idiv0>
    46b6:	bd02      	pop	{r1, pc}

000046b8 <__aeabi_idivmod>:
    46b8:	2900      	cmp	r1, #0
    46ba:	d0f8      	beq.n	46ae <__divsi3+0x1c2>
    46bc:	e716      	b.n	44ec <__divsi3>
    46be:	4770      	bx	lr

000046c0 <__aeabi_idiv0>:
    46c0:	4770      	bx	lr
    46c2:	46c0      	nop			; (mov r8, r8)

000046c4 <__aeabi_lmul>:
    46c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    46c6:	46ce      	mov	lr, r9
    46c8:	4647      	mov	r7, r8
    46ca:	0415      	lsls	r5, r2, #16
    46cc:	0c2d      	lsrs	r5, r5, #16
    46ce:	002e      	movs	r6, r5
    46d0:	b580      	push	{r7, lr}
    46d2:	0407      	lsls	r7, r0, #16
    46d4:	0c14      	lsrs	r4, r2, #16
    46d6:	0c3f      	lsrs	r7, r7, #16
    46d8:	4699      	mov	r9, r3
    46da:	0c03      	lsrs	r3, r0, #16
    46dc:	437e      	muls	r6, r7
    46de:	435d      	muls	r5, r3
    46e0:	4367      	muls	r7, r4
    46e2:	4363      	muls	r3, r4
    46e4:	197f      	adds	r7, r7, r5
    46e6:	0c34      	lsrs	r4, r6, #16
    46e8:	19e4      	adds	r4, r4, r7
    46ea:	469c      	mov	ip, r3
    46ec:	42a5      	cmp	r5, r4
    46ee:	d903      	bls.n	46f8 <__aeabi_lmul+0x34>
    46f0:	2380      	movs	r3, #128	; 0x80
    46f2:	025b      	lsls	r3, r3, #9
    46f4:	4698      	mov	r8, r3
    46f6:	44c4      	add	ip, r8
    46f8:	464b      	mov	r3, r9
    46fa:	4351      	muls	r1, r2
    46fc:	4343      	muls	r3, r0
    46fe:	0436      	lsls	r6, r6, #16
    4700:	0c36      	lsrs	r6, r6, #16
    4702:	0c25      	lsrs	r5, r4, #16
    4704:	0424      	lsls	r4, r4, #16
    4706:	4465      	add	r5, ip
    4708:	19a4      	adds	r4, r4, r6
    470a:	1859      	adds	r1, r3, r1
    470c:	1949      	adds	r1, r1, r5
    470e:	0020      	movs	r0, r4
    4710:	bc0c      	pop	{r2, r3}
    4712:	4690      	mov	r8, r2
    4714:	4699      	mov	r9, r3
    4716:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004718 <__libc_init_array>:
    4718:	b570      	push	{r4, r5, r6, lr}
    471a:	2600      	movs	r6, #0
    471c:	4d0c      	ldr	r5, [pc, #48]	; (4750 <__libc_init_array+0x38>)
    471e:	4c0d      	ldr	r4, [pc, #52]	; (4754 <__libc_init_array+0x3c>)
    4720:	1b64      	subs	r4, r4, r5
    4722:	10a4      	asrs	r4, r4, #2
    4724:	42a6      	cmp	r6, r4
    4726:	d109      	bne.n	473c <__libc_init_array+0x24>
    4728:	2600      	movs	r6, #0
    472a:	f003 fb75 	bl	7e18 <_init>
    472e:	4d0a      	ldr	r5, [pc, #40]	; (4758 <__libc_init_array+0x40>)
    4730:	4c0a      	ldr	r4, [pc, #40]	; (475c <__libc_init_array+0x44>)
    4732:	1b64      	subs	r4, r4, r5
    4734:	10a4      	asrs	r4, r4, #2
    4736:	42a6      	cmp	r6, r4
    4738:	d105      	bne.n	4746 <__libc_init_array+0x2e>
    473a:	bd70      	pop	{r4, r5, r6, pc}
    473c:	00b3      	lsls	r3, r6, #2
    473e:	58eb      	ldr	r3, [r5, r3]
    4740:	4798      	blx	r3
    4742:	3601      	adds	r6, #1
    4744:	e7ee      	b.n	4724 <__libc_init_array+0xc>
    4746:	00b3      	lsls	r3, r6, #2
    4748:	58eb      	ldr	r3, [r5, r3]
    474a:	4798      	blx	r3
    474c:	3601      	adds	r6, #1
    474e:	e7f2      	b.n	4736 <__libc_init_array+0x1e>
    4750:	00007e24 	.word	0x00007e24
    4754:	00007e24 	.word	0x00007e24
    4758:	00007e24 	.word	0x00007e24
    475c:	00007e28 	.word	0x00007e28

00004760 <__itoa>:
    4760:	1e93      	subs	r3, r2, #2
    4762:	b510      	push	{r4, lr}
    4764:	000c      	movs	r4, r1
    4766:	2b22      	cmp	r3, #34	; 0x22
    4768:	d904      	bls.n	4774 <__itoa+0x14>
    476a:	2300      	movs	r3, #0
    476c:	001c      	movs	r4, r3
    476e:	700b      	strb	r3, [r1, #0]
    4770:	0020      	movs	r0, r4
    4772:	bd10      	pop	{r4, pc}
    4774:	2a0a      	cmp	r2, #10
    4776:	d109      	bne.n	478c <__itoa+0x2c>
    4778:	2800      	cmp	r0, #0
    477a:	da07      	bge.n	478c <__itoa+0x2c>
    477c:	232d      	movs	r3, #45	; 0x2d
    477e:	700b      	strb	r3, [r1, #0]
    4780:	2101      	movs	r1, #1
    4782:	4240      	negs	r0, r0
    4784:	1861      	adds	r1, r4, r1
    4786:	f000 fa3f 	bl	4c08 <__utoa>
    478a:	e7f1      	b.n	4770 <__itoa+0x10>
    478c:	2100      	movs	r1, #0
    478e:	e7f9      	b.n	4784 <__itoa+0x24>

00004790 <itoa>:
    4790:	b510      	push	{r4, lr}
    4792:	f7ff ffe5 	bl	4760 <__itoa>
    4796:	bd10      	pop	{r4, pc}

00004798 <malloc>:
    4798:	b510      	push	{r4, lr}
    479a:	4b03      	ldr	r3, [pc, #12]	; (47a8 <malloc+0x10>)
    479c:	0001      	movs	r1, r0
    479e:	6818      	ldr	r0, [r3, #0]
    47a0:	f000 f860 	bl	4864 <_malloc_r>
    47a4:	bd10      	pop	{r4, pc}
    47a6:	46c0      	nop			; (mov r8, r8)
    47a8:	20000174 	.word	0x20000174

000047ac <memcpy>:
    47ac:	2300      	movs	r3, #0
    47ae:	b510      	push	{r4, lr}
    47b0:	429a      	cmp	r2, r3
    47b2:	d100      	bne.n	47b6 <memcpy+0xa>
    47b4:	bd10      	pop	{r4, pc}
    47b6:	5ccc      	ldrb	r4, [r1, r3]
    47b8:	54c4      	strb	r4, [r0, r3]
    47ba:	3301      	adds	r3, #1
    47bc:	e7f8      	b.n	47b0 <memcpy+0x4>

000047be <memset>:
    47be:	0003      	movs	r3, r0
    47c0:	1882      	adds	r2, r0, r2
    47c2:	4293      	cmp	r3, r2
    47c4:	d100      	bne.n	47c8 <memset+0xa>
    47c6:	4770      	bx	lr
    47c8:	7019      	strb	r1, [r3, #0]
    47ca:	3301      	adds	r3, #1
    47cc:	e7f9      	b.n	47c2 <memset+0x4>
	...

000047d0 <_free_r>:
    47d0:	b570      	push	{r4, r5, r6, lr}
    47d2:	0005      	movs	r5, r0
    47d4:	2900      	cmp	r1, #0
    47d6:	d010      	beq.n	47fa <_free_r+0x2a>
    47d8:	1f0c      	subs	r4, r1, #4
    47da:	6823      	ldr	r3, [r4, #0]
    47dc:	2b00      	cmp	r3, #0
    47de:	da00      	bge.n	47e2 <_free_r+0x12>
    47e0:	18e4      	adds	r4, r4, r3
    47e2:	0028      	movs	r0, r5
    47e4:	f000 fc44 	bl	5070 <__malloc_lock>
    47e8:	4a1d      	ldr	r2, [pc, #116]	; (4860 <_free_r+0x90>)
    47ea:	6813      	ldr	r3, [r2, #0]
    47ec:	2b00      	cmp	r3, #0
    47ee:	d105      	bne.n	47fc <_free_r+0x2c>
    47f0:	6063      	str	r3, [r4, #4]
    47f2:	6014      	str	r4, [r2, #0]
    47f4:	0028      	movs	r0, r5
    47f6:	f000 fc3c 	bl	5072 <__malloc_unlock>
    47fa:	bd70      	pop	{r4, r5, r6, pc}
    47fc:	42a3      	cmp	r3, r4
    47fe:	d909      	bls.n	4814 <_free_r+0x44>
    4800:	6821      	ldr	r1, [r4, #0]
    4802:	1860      	adds	r0, r4, r1
    4804:	4283      	cmp	r3, r0
    4806:	d1f3      	bne.n	47f0 <_free_r+0x20>
    4808:	6818      	ldr	r0, [r3, #0]
    480a:	685b      	ldr	r3, [r3, #4]
    480c:	1841      	adds	r1, r0, r1
    480e:	6021      	str	r1, [r4, #0]
    4810:	e7ee      	b.n	47f0 <_free_r+0x20>
    4812:	0013      	movs	r3, r2
    4814:	685a      	ldr	r2, [r3, #4]
    4816:	2a00      	cmp	r2, #0
    4818:	d001      	beq.n	481e <_free_r+0x4e>
    481a:	42a2      	cmp	r2, r4
    481c:	d9f9      	bls.n	4812 <_free_r+0x42>
    481e:	6819      	ldr	r1, [r3, #0]
    4820:	1858      	adds	r0, r3, r1
    4822:	42a0      	cmp	r0, r4
    4824:	d10b      	bne.n	483e <_free_r+0x6e>
    4826:	6820      	ldr	r0, [r4, #0]
    4828:	1809      	adds	r1, r1, r0
    482a:	1858      	adds	r0, r3, r1
    482c:	6019      	str	r1, [r3, #0]
    482e:	4282      	cmp	r2, r0
    4830:	d1e0      	bne.n	47f4 <_free_r+0x24>
    4832:	6810      	ldr	r0, [r2, #0]
    4834:	6852      	ldr	r2, [r2, #4]
    4836:	1841      	adds	r1, r0, r1
    4838:	6019      	str	r1, [r3, #0]
    483a:	605a      	str	r2, [r3, #4]
    483c:	e7da      	b.n	47f4 <_free_r+0x24>
    483e:	42a0      	cmp	r0, r4
    4840:	d902      	bls.n	4848 <_free_r+0x78>
    4842:	230c      	movs	r3, #12
    4844:	602b      	str	r3, [r5, #0]
    4846:	e7d5      	b.n	47f4 <_free_r+0x24>
    4848:	6821      	ldr	r1, [r4, #0]
    484a:	1860      	adds	r0, r4, r1
    484c:	4282      	cmp	r2, r0
    484e:	d103      	bne.n	4858 <_free_r+0x88>
    4850:	6810      	ldr	r0, [r2, #0]
    4852:	6852      	ldr	r2, [r2, #4]
    4854:	1841      	adds	r1, r0, r1
    4856:	6021      	str	r1, [r4, #0]
    4858:	6062      	str	r2, [r4, #4]
    485a:	605c      	str	r4, [r3, #4]
    485c:	e7ca      	b.n	47f4 <_free_r+0x24>
    485e:	46c0      	nop			; (mov r8, r8)
    4860:	200002c4 	.word	0x200002c4

00004864 <_malloc_r>:
    4864:	2303      	movs	r3, #3
    4866:	b570      	push	{r4, r5, r6, lr}
    4868:	1ccd      	adds	r5, r1, #3
    486a:	439d      	bics	r5, r3
    486c:	3508      	adds	r5, #8
    486e:	0006      	movs	r6, r0
    4870:	2d0c      	cmp	r5, #12
    4872:	d21e      	bcs.n	48b2 <_malloc_r+0x4e>
    4874:	250c      	movs	r5, #12
    4876:	42a9      	cmp	r1, r5
    4878:	d81d      	bhi.n	48b6 <_malloc_r+0x52>
    487a:	0030      	movs	r0, r6
    487c:	f000 fbf8 	bl	5070 <__malloc_lock>
    4880:	4a25      	ldr	r2, [pc, #148]	; (4918 <_malloc_r+0xb4>)
    4882:	6814      	ldr	r4, [r2, #0]
    4884:	0021      	movs	r1, r4
    4886:	2900      	cmp	r1, #0
    4888:	d119      	bne.n	48be <_malloc_r+0x5a>
    488a:	4c24      	ldr	r4, [pc, #144]	; (491c <_malloc_r+0xb8>)
    488c:	6823      	ldr	r3, [r4, #0]
    488e:	2b00      	cmp	r3, #0
    4890:	d103      	bne.n	489a <_malloc_r+0x36>
    4892:	0030      	movs	r0, r6
    4894:	f000 f8dc 	bl	4a50 <_sbrk_r>
    4898:	6020      	str	r0, [r4, #0]
    489a:	0029      	movs	r1, r5
    489c:	0030      	movs	r0, r6
    489e:	f000 f8d7 	bl	4a50 <_sbrk_r>
    48a2:	1c43      	adds	r3, r0, #1
    48a4:	d12c      	bne.n	4900 <_malloc_r+0x9c>
    48a6:	230c      	movs	r3, #12
    48a8:	0030      	movs	r0, r6
    48aa:	6033      	str	r3, [r6, #0]
    48ac:	f000 fbe1 	bl	5072 <__malloc_unlock>
    48b0:	e003      	b.n	48ba <_malloc_r+0x56>
    48b2:	2d00      	cmp	r5, #0
    48b4:	dadf      	bge.n	4876 <_malloc_r+0x12>
    48b6:	230c      	movs	r3, #12
    48b8:	6033      	str	r3, [r6, #0]
    48ba:	2000      	movs	r0, #0
    48bc:	bd70      	pop	{r4, r5, r6, pc}
    48be:	680b      	ldr	r3, [r1, #0]
    48c0:	1b5b      	subs	r3, r3, r5
    48c2:	d41a      	bmi.n	48fa <_malloc_r+0x96>
    48c4:	2b0b      	cmp	r3, #11
    48c6:	d903      	bls.n	48d0 <_malloc_r+0x6c>
    48c8:	600b      	str	r3, [r1, #0]
    48ca:	18cc      	adds	r4, r1, r3
    48cc:	6025      	str	r5, [r4, #0]
    48ce:	e003      	b.n	48d8 <_malloc_r+0x74>
    48d0:	428c      	cmp	r4, r1
    48d2:	d10e      	bne.n	48f2 <_malloc_r+0x8e>
    48d4:	6863      	ldr	r3, [r4, #4]
    48d6:	6013      	str	r3, [r2, #0]
    48d8:	0030      	movs	r0, r6
    48da:	f000 fbca 	bl	5072 <__malloc_unlock>
    48de:	0020      	movs	r0, r4
    48e0:	2207      	movs	r2, #7
    48e2:	300b      	adds	r0, #11
    48e4:	1d23      	adds	r3, r4, #4
    48e6:	4390      	bics	r0, r2
    48e8:	1ac3      	subs	r3, r0, r3
    48ea:	d0e7      	beq.n	48bc <_malloc_r+0x58>
    48ec:	425a      	negs	r2, r3
    48ee:	50e2      	str	r2, [r4, r3]
    48f0:	e7e4      	b.n	48bc <_malloc_r+0x58>
    48f2:	684b      	ldr	r3, [r1, #4]
    48f4:	6063      	str	r3, [r4, #4]
    48f6:	000c      	movs	r4, r1
    48f8:	e7ee      	b.n	48d8 <_malloc_r+0x74>
    48fa:	000c      	movs	r4, r1
    48fc:	6849      	ldr	r1, [r1, #4]
    48fe:	e7c2      	b.n	4886 <_malloc_r+0x22>
    4900:	2303      	movs	r3, #3
    4902:	1cc4      	adds	r4, r0, #3
    4904:	439c      	bics	r4, r3
    4906:	42a0      	cmp	r0, r4
    4908:	d0e0      	beq.n	48cc <_malloc_r+0x68>
    490a:	1a21      	subs	r1, r4, r0
    490c:	0030      	movs	r0, r6
    490e:	f000 f89f 	bl	4a50 <_sbrk_r>
    4912:	1c43      	adds	r3, r0, #1
    4914:	d1da      	bne.n	48cc <_malloc_r+0x68>
    4916:	e7c6      	b.n	48a6 <_malloc_r+0x42>
    4918:	200002c4 	.word	0x200002c4
    491c:	200002c8 	.word	0x200002c8

00004920 <iprintf>:
    4920:	b40f      	push	{r0, r1, r2, r3}
    4922:	4b0b      	ldr	r3, [pc, #44]	; (4950 <iprintf+0x30>)
    4924:	b513      	push	{r0, r1, r4, lr}
    4926:	681c      	ldr	r4, [r3, #0]
    4928:	2c00      	cmp	r4, #0
    492a:	d005      	beq.n	4938 <iprintf+0x18>
    492c:	69a3      	ldr	r3, [r4, #24]
    492e:	2b00      	cmp	r3, #0
    4930:	d102      	bne.n	4938 <iprintf+0x18>
    4932:	0020      	movs	r0, r4
    4934:	f000 fa9a 	bl	4e6c <__sinit>
    4938:	ab05      	add	r3, sp, #20
    493a:	9a04      	ldr	r2, [sp, #16]
    493c:	68a1      	ldr	r1, [r4, #8]
    493e:	0020      	movs	r0, r4
    4940:	9301      	str	r3, [sp, #4]
    4942:	f000 fbbf 	bl	50c4 <_vfiprintf_r>
    4946:	bc16      	pop	{r1, r2, r4}
    4948:	bc08      	pop	{r3}
    494a:	b004      	add	sp, #16
    494c:	4718      	bx	r3
    494e:	46c0      	nop			; (mov r8, r8)
    4950:	20000174 	.word	0x20000174

00004954 <putchar>:
    4954:	4b08      	ldr	r3, [pc, #32]	; (4978 <putchar+0x24>)
    4956:	b570      	push	{r4, r5, r6, lr}
    4958:	681c      	ldr	r4, [r3, #0]
    495a:	0005      	movs	r5, r0
    495c:	2c00      	cmp	r4, #0
    495e:	d005      	beq.n	496c <putchar+0x18>
    4960:	69a3      	ldr	r3, [r4, #24]
    4962:	2b00      	cmp	r3, #0
    4964:	d102      	bne.n	496c <putchar+0x18>
    4966:	0020      	movs	r0, r4
    4968:	f000 fa80 	bl	4e6c <__sinit>
    496c:	0029      	movs	r1, r5
    496e:	68a2      	ldr	r2, [r4, #8]
    4970:	0020      	movs	r0, r4
    4972:	f000 fe4b 	bl	560c <_putc_r>
    4976:	bd70      	pop	{r4, r5, r6, pc}
    4978:	20000174 	.word	0x20000174

0000497c <srand>:
    497c:	4b10      	ldr	r3, [pc, #64]	; (49c0 <srand+0x44>)
    497e:	b570      	push	{r4, r5, r6, lr}
    4980:	681c      	ldr	r4, [r3, #0]
    4982:	0005      	movs	r5, r0
    4984:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    4986:	2b00      	cmp	r3, #0
    4988:	d115      	bne.n	49b6 <srand+0x3a>
    498a:	2018      	movs	r0, #24
    498c:	f7ff ff04 	bl	4798 <malloc>
    4990:	4b0c      	ldr	r3, [pc, #48]	; (49c4 <srand+0x48>)
    4992:	63a0      	str	r0, [r4, #56]	; 0x38
    4994:	8003      	strh	r3, [r0, #0]
    4996:	4b0c      	ldr	r3, [pc, #48]	; (49c8 <srand+0x4c>)
    4998:	2201      	movs	r2, #1
    499a:	8043      	strh	r3, [r0, #2]
    499c:	4b0b      	ldr	r3, [pc, #44]	; (49cc <srand+0x50>)
    499e:	8083      	strh	r3, [r0, #4]
    49a0:	4b0b      	ldr	r3, [pc, #44]	; (49d0 <srand+0x54>)
    49a2:	80c3      	strh	r3, [r0, #6]
    49a4:	4b0b      	ldr	r3, [pc, #44]	; (49d4 <srand+0x58>)
    49a6:	8103      	strh	r3, [r0, #8]
    49a8:	2305      	movs	r3, #5
    49aa:	8143      	strh	r3, [r0, #10]
    49ac:	3306      	adds	r3, #6
    49ae:	8183      	strh	r3, [r0, #12]
    49b0:	2300      	movs	r3, #0
    49b2:	6102      	str	r2, [r0, #16]
    49b4:	6143      	str	r3, [r0, #20]
    49b6:	2200      	movs	r2, #0
    49b8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    49ba:	611d      	str	r5, [r3, #16]
    49bc:	615a      	str	r2, [r3, #20]
    49be:	bd70      	pop	{r4, r5, r6, pc}
    49c0:	20000174 	.word	0x20000174
    49c4:	0000330e 	.word	0x0000330e
    49c8:	ffffabcd 	.word	0xffffabcd
    49cc:	00001234 	.word	0x00001234
    49d0:	ffffe66d 	.word	0xffffe66d
    49d4:	ffffdeec 	.word	0xffffdeec

000049d8 <rand>:
    49d8:	4b15      	ldr	r3, [pc, #84]	; (4a30 <rand+0x58>)
    49da:	b510      	push	{r4, lr}
    49dc:	681c      	ldr	r4, [r3, #0]
    49de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    49e0:	2b00      	cmp	r3, #0
    49e2:	d115      	bne.n	4a10 <rand+0x38>
    49e4:	2018      	movs	r0, #24
    49e6:	f7ff fed7 	bl	4798 <malloc>
    49ea:	4b12      	ldr	r3, [pc, #72]	; (4a34 <rand+0x5c>)
    49ec:	63a0      	str	r0, [r4, #56]	; 0x38
    49ee:	8003      	strh	r3, [r0, #0]
    49f0:	4b11      	ldr	r3, [pc, #68]	; (4a38 <rand+0x60>)
    49f2:	2201      	movs	r2, #1
    49f4:	8043      	strh	r3, [r0, #2]
    49f6:	4b11      	ldr	r3, [pc, #68]	; (4a3c <rand+0x64>)
    49f8:	8083      	strh	r3, [r0, #4]
    49fa:	4b11      	ldr	r3, [pc, #68]	; (4a40 <rand+0x68>)
    49fc:	80c3      	strh	r3, [r0, #6]
    49fe:	4b11      	ldr	r3, [pc, #68]	; (4a44 <rand+0x6c>)
    4a00:	8103      	strh	r3, [r0, #8]
    4a02:	2305      	movs	r3, #5
    4a04:	8143      	strh	r3, [r0, #10]
    4a06:	3306      	adds	r3, #6
    4a08:	8183      	strh	r3, [r0, #12]
    4a0a:	2300      	movs	r3, #0
    4a0c:	6102      	str	r2, [r0, #16]
    4a0e:	6143      	str	r3, [r0, #20]
    4a10:	6ba4      	ldr	r4, [r4, #56]	; 0x38
    4a12:	4a0d      	ldr	r2, [pc, #52]	; (4a48 <rand+0x70>)
    4a14:	6920      	ldr	r0, [r4, #16]
    4a16:	6961      	ldr	r1, [r4, #20]
    4a18:	4b0c      	ldr	r3, [pc, #48]	; (4a4c <rand+0x74>)
    4a1a:	f7ff fe53 	bl	46c4 <__aeabi_lmul>
    4a1e:	2201      	movs	r2, #1
    4a20:	2300      	movs	r3, #0
    4a22:	1880      	adds	r0, r0, r2
    4a24:	4159      	adcs	r1, r3
    4a26:	6120      	str	r0, [r4, #16]
    4a28:	6161      	str	r1, [r4, #20]
    4a2a:	0048      	lsls	r0, r1, #1
    4a2c:	0840      	lsrs	r0, r0, #1
    4a2e:	bd10      	pop	{r4, pc}
    4a30:	20000174 	.word	0x20000174
    4a34:	0000330e 	.word	0x0000330e
    4a38:	ffffabcd 	.word	0xffffabcd
    4a3c:	00001234 	.word	0x00001234
    4a40:	ffffe66d 	.word	0xffffe66d
    4a44:	ffffdeec 	.word	0xffffdeec
    4a48:	4c957f2d 	.word	0x4c957f2d
    4a4c:	5851f42d 	.word	0x5851f42d

00004a50 <_sbrk_r>:
    4a50:	2300      	movs	r3, #0
    4a52:	b570      	push	{r4, r5, r6, lr}
    4a54:	4c06      	ldr	r4, [pc, #24]	; (4a70 <_sbrk_r+0x20>)
    4a56:	0005      	movs	r5, r0
    4a58:	0008      	movs	r0, r1
    4a5a:	6023      	str	r3, [r4, #0]
    4a5c:	f7fe fb48 	bl	30f0 <_sbrk>
    4a60:	1c43      	adds	r3, r0, #1
    4a62:	d103      	bne.n	4a6c <_sbrk_r+0x1c>
    4a64:	6823      	ldr	r3, [r4, #0]
    4a66:	2b00      	cmp	r3, #0
    4a68:	d000      	beq.n	4a6c <_sbrk_r+0x1c>
    4a6a:	602b      	str	r3, [r5, #0]
    4a6c:	bd70      	pop	{r4, r5, r6, pc}
    4a6e:	46c0      	nop			; (mov r8, r8)
    4a70:	20000b6c 	.word	0x20000b6c

00004a74 <setbuf>:
    4a74:	424a      	negs	r2, r1
    4a76:	414a      	adcs	r2, r1
    4a78:	2380      	movs	r3, #128	; 0x80
    4a7a:	b510      	push	{r4, lr}
    4a7c:	0052      	lsls	r2, r2, #1
    4a7e:	00db      	lsls	r3, r3, #3
    4a80:	f000 f802 	bl	4a88 <setvbuf>
    4a84:	bd10      	pop	{r4, pc}
	...

00004a88 <setvbuf>:
    4a88:	b5f0      	push	{r4, r5, r6, r7, lr}
    4a8a:	001d      	movs	r5, r3
    4a8c:	4b4f      	ldr	r3, [pc, #316]	; (4bcc <setvbuf+0x144>)
    4a8e:	b085      	sub	sp, #20
    4a90:	681e      	ldr	r6, [r3, #0]
    4a92:	0004      	movs	r4, r0
    4a94:	000f      	movs	r7, r1
    4a96:	9200      	str	r2, [sp, #0]
    4a98:	2e00      	cmp	r6, #0
    4a9a:	d005      	beq.n	4aa8 <setvbuf+0x20>
    4a9c:	69b3      	ldr	r3, [r6, #24]
    4a9e:	2b00      	cmp	r3, #0
    4aa0:	d102      	bne.n	4aa8 <setvbuf+0x20>
    4aa2:	0030      	movs	r0, r6
    4aa4:	f000 f9e2 	bl	4e6c <__sinit>
    4aa8:	4b49      	ldr	r3, [pc, #292]	; (4bd0 <setvbuf+0x148>)
    4aaa:	429c      	cmp	r4, r3
    4aac:	d150      	bne.n	4b50 <setvbuf+0xc8>
    4aae:	6874      	ldr	r4, [r6, #4]
    4ab0:	9b00      	ldr	r3, [sp, #0]
    4ab2:	2b02      	cmp	r3, #2
    4ab4:	d005      	beq.n	4ac2 <setvbuf+0x3a>
    4ab6:	2b01      	cmp	r3, #1
    4ab8:	d900      	bls.n	4abc <setvbuf+0x34>
    4aba:	e084      	b.n	4bc6 <setvbuf+0x13e>
    4abc:	2d00      	cmp	r5, #0
    4abe:	da00      	bge.n	4ac2 <setvbuf+0x3a>
    4ac0:	e081      	b.n	4bc6 <setvbuf+0x13e>
    4ac2:	0021      	movs	r1, r4
    4ac4:	0030      	movs	r0, r6
    4ac6:	f000 f963 	bl	4d90 <_fflush_r>
    4aca:	6b61      	ldr	r1, [r4, #52]	; 0x34
    4acc:	2900      	cmp	r1, #0
    4ace:	d008      	beq.n	4ae2 <setvbuf+0x5a>
    4ad0:	0023      	movs	r3, r4
    4ad2:	3344      	adds	r3, #68	; 0x44
    4ad4:	4299      	cmp	r1, r3
    4ad6:	d002      	beq.n	4ade <setvbuf+0x56>
    4ad8:	0030      	movs	r0, r6
    4ada:	f7ff fe79 	bl	47d0 <_free_r>
    4ade:	2300      	movs	r3, #0
    4ae0:	6363      	str	r3, [r4, #52]	; 0x34
    4ae2:	2300      	movs	r3, #0
    4ae4:	61a3      	str	r3, [r4, #24]
    4ae6:	6063      	str	r3, [r4, #4]
    4ae8:	89a3      	ldrh	r3, [r4, #12]
    4aea:	061b      	lsls	r3, r3, #24
    4aec:	d503      	bpl.n	4af6 <setvbuf+0x6e>
    4aee:	6921      	ldr	r1, [r4, #16]
    4af0:	0030      	movs	r0, r6
    4af2:	f7ff fe6d 	bl	47d0 <_free_r>
    4af6:	89a3      	ldrh	r3, [r4, #12]
    4af8:	4a36      	ldr	r2, [pc, #216]	; (4bd4 <setvbuf+0x14c>)
    4afa:	4013      	ands	r3, r2
    4afc:	81a3      	strh	r3, [r4, #12]
    4afe:	9b00      	ldr	r3, [sp, #0]
    4b00:	2b02      	cmp	r3, #2
    4b02:	d05a      	beq.n	4bba <setvbuf+0x132>
    4b04:	ab03      	add	r3, sp, #12
    4b06:	aa02      	add	r2, sp, #8
    4b08:	0021      	movs	r1, r4
    4b0a:	0030      	movs	r0, r6
    4b0c:	f000 fa44 	bl	4f98 <__swhatbuf_r>
    4b10:	89a3      	ldrh	r3, [r4, #12]
    4b12:	4318      	orrs	r0, r3
    4b14:	81a0      	strh	r0, [r4, #12]
    4b16:	2d00      	cmp	r5, #0
    4b18:	d124      	bne.n	4b64 <setvbuf+0xdc>
    4b1a:	9d02      	ldr	r5, [sp, #8]
    4b1c:	0028      	movs	r0, r5
    4b1e:	f7ff fe3b 	bl	4798 <malloc>
    4b22:	9501      	str	r5, [sp, #4]
    4b24:	1e07      	subs	r7, r0, #0
    4b26:	d142      	bne.n	4bae <setvbuf+0x126>
    4b28:	9b02      	ldr	r3, [sp, #8]
    4b2a:	9301      	str	r3, [sp, #4]
    4b2c:	42ab      	cmp	r3, r5
    4b2e:	d139      	bne.n	4ba4 <setvbuf+0x11c>
    4b30:	2001      	movs	r0, #1
    4b32:	4240      	negs	r0, r0
    4b34:	2302      	movs	r3, #2
    4b36:	89a2      	ldrh	r2, [r4, #12]
    4b38:	4313      	orrs	r3, r2
    4b3a:	81a3      	strh	r3, [r4, #12]
    4b3c:	2300      	movs	r3, #0
    4b3e:	60a3      	str	r3, [r4, #8]
    4b40:	0023      	movs	r3, r4
    4b42:	3347      	adds	r3, #71	; 0x47
    4b44:	6023      	str	r3, [r4, #0]
    4b46:	6123      	str	r3, [r4, #16]
    4b48:	2301      	movs	r3, #1
    4b4a:	6163      	str	r3, [r4, #20]
    4b4c:	b005      	add	sp, #20
    4b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4b50:	4b21      	ldr	r3, [pc, #132]	; (4bd8 <setvbuf+0x150>)
    4b52:	429c      	cmp	r4, r3
    4b54:	d101      	bne.n	4b5a <setvbuf+0xd2>
    4b56:	68b4      	ldr	r4, [r6, #8]
    4b58:	e7aa      	b.n	4ab0 <setvbuf+0x28>
    4b5a:	4b20      	ldr	r3, [pc, #128]	; (4bdc <setvbuf+0x154>)
    4b5c:	429c      	cmp	r4, r3
    4b5e:	d1a7      	bne.n	4ab0 <setvbuf+0x28>
    4b60:	68f4      	ldr	r4, [r6, #12]
    4b62:	e7a5      	b.n	4ab0 <setvbuf+0x28>
    4b64:	2f00      	cmp	r7, #0
    4b66:	d0d9      	beq.n	4b1c <setvbuf+0x94>
    4b68:	69b3      	ldr	r3, [r6, #24]
    4b6a:	2b00      	cmp	r3, #0
    4b6c:	d102      	bne.n	4b74 <setvbuf+0xec>
    4b6e:	0030      	movs	r0, r6
    4b70:	f000 f97c 	bl	4e6c <__sinit>
    4b74:	9b00      	ldr	r3, [sp, #0]
    4b76:	2b01      	cmp	r3, #1
    4b78:	d103      	bne.n	4b82 <setvbuf+0xfa>
    4b7a:	89a3      	ldrh	r3, [r4, #12]
    4b7c:	9a00      	ldr	r2, [sp, #0]
    4b7e:	431a      	orrs	r2, r3
    4b80:	81a2      	strh	r2, [r4, #12]
    4b82:	2008      	movs	r0, #8
    4b84:	89a3      	ldrh	r3, [r4, #12]
    4b86:	6027      	str	r7, [r4, #0]
    4b88:	6127      	str	r7, [r4, #16]
    4b8a:	6165      	str	r5, [r4, #20]
    4b8c:	4018      	ands	r0, r3
    4b8e:	d018      	beq.n	4bc2 <setvbuf+0x13a>
    4b90:	2001      	movs	r0, #1
    4b92:	4018      	ands	r0, r3
    4b94:	2300      	movs	r3, #0
    4b96:	4298      	cmp	r0, r3
    4b98:	d011      	beq.n	4bbe <setvbuf+0x136>
    4b9a:	426d      	negs	r5, r5
    4b9c:	60a3      	str	r3, [r4, #8]
    4b9e:	61a5      	str	r5, [r4, #24]
    4ba0:	0018      	movs	r0, r3
    4ba2:	e7d3      	b.n	4b4c <setvbuf+0xc4>
    4ba4:	9801      	ldr	r0, [sp, #4]
    4ba6:	f7ff fdf7 	bl	4798 <malloc>
    4baa:	1e07      	subs	r7, r0, #0
    4bac:	d0c0      	beq.n	4b30 <setvbuf+0xa8>
    4bae:	2380      	movs	r3, #128	; 0x80
    4bb0:	89a2      	ldrh	r2, [r4, #12]
    4bb2:	9d01      	ldr	r5, [sp, #4]
    4bb4:	4313      	orrs	r3, r2
    4bb6:	81a3      	strh	r3, [r4, #12]
    4bb8:	e7d6      	b.n	4b68 <setvbuf+0xe0>
    4bba:	2000      	movs	r0, #0
    4bbc:	e7ba      	b.n	4b34 <setvbuf+0xac>
    4bbe:	60a5      	str	r5, [r4, #8]
    4bc0:	e7c4      	b.n	4b4c <setvbuf+0xc4>
    4bc2:	60a0      	str	r0, [r4, #8]
    4bc4:	e7c2      	b.n	4b4c <setvbuf+0xc4>
    4bc6:	2001      	movs	r0, #1
    4bc8:	4240      	negs	r0, r0
    4bca:	e7bf      	b.n	4b4c <setvbuf+0xc4>
    4bcc:	20000174 	.word	0x20000174
    4bd0:	00007da4 	.word	0x00007da4
    4bd4:	fffff35c 	.word	0xfffff35c
    4bd8:	00007dc4 	.word	0x00007dc4
    4bdc:	00007d84 	.word	0x00007d84

00004be0 <strcat>:
    4be0:	0002      	movs	r2, r0
    4be2:	b510      	push	{r4, lr}
    4be4:	7813      	ldrb	r3, [r2, #0]
    4be6:	2b00      	cmp	r3, #0
    4be8:	d105      	bne.n	4bf6 <strcat+0x16>
    4bea:	5ccc      	ldrb	r4, [r1, r3]
    4bec:	54d4      	strb	r4, [r2, r3]
    4bee:	3301      	adds	r3, #1
    4bf0:	2c00      	cmp	r4, #0
    4bf2:	d1fa      	bne.n	4bea <strcat+0xa>
    4bf4:	bd10      	pop	{r4, pc}
    4bf6:	3201      	adds	r2, #1
    4bf8:	e7f4      	b.n	4be4 <strcat+0x4>

00004bfa <strlen>:
    4bfa:	2300      	movs	r3, #0
    4bfc:	5cc2      	ldrb	r2, [r0, r3]
    4bfe:	3301      	adds	r3, #1
    4c00:	2a00      	cmp	r2, #0
    4c02:	d1fb      	bne.n	4bfc <strlen+0x2>
    4c04:	1e58      	subs	r0, r3, #1
    4c06:	4770      	bx	lr

00004c08 <__utoa>:
    4c08:	b5f0      	push	{r4, r5, r6, r7, lr}
    4c0a:	0017      	movs	r7, r2
    4c0c:	b08f      	sub	sp, #60	; 0x3c
    4c0e:	2225      	movs	r2, #37	; 0x25
    4c10:	0006      	movs	r6, r0
    4c12:	000d      	movs	r5, r1
    4c14:	a804      	add	r0, sp, #16
    4c16:	4918      	ldr	r1, [pc, #96]	; (4c78 <__utoa+0x70>)
    4c18:	f7ff fdc8 	bl	47ac <memcpy>
    4c1c:	aa04      	add	r2, sp, #16
    4c1e:	1ebb      	subs	r3, r7, #2
    4c20:	2400      	movs	r4, #0
    4c22:	9203      	str	r2, [sp, #12]
    4c24:	2b22      	cmp	r3, #34	; 0x22
    4c26:	d905      	bls.n	4c34 <__utoa+0x2c>
    4c28:	702c      	strb	r4, [r5, #0]
    4c2a:	0025      	movs	r5, r4
    4c2c:	0028      	movs	r0, r5
    4c2e:	b00f      	add	sp, #60	; 0x3c
    4c30:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4c32:	9c01      	ldr	r4, [sp, #4]
    4c34:	1c63      	adds	r3, r4, #1
    4c36:	9301      	str	r3, [sp, #4]
    4c38:	18eb      	adds	r3, r5, r3
    4c3a:	9300      	str	r3, [sp, #0]
    4c3c:	0030      	movs	r0, r6
    4c3e:	3b01      	subs	r3, #1
    4c40:	0039      	movs	r1, r7
    4c42:	9302      	str	r3, [sp, #8]
    4c44:	f7ff fc4e 	bl	44e4 <__aeabi_uidivmod>
    4c48:	9b03      	ldr	r3, [sp, #12]
    4c4a:	9a02      	ldr	r2, [sp, #8]
    4c4c:	5c5b      	ldrb	r3, [r3, r1]
    4c4e:	0030      	movs	r0, r6
    4c50:	7013      	strb	r3, [r2, #0]
    4c52:	0039      	movs	r1, r7
    4c54:	f7ff fbc0 	bl	43d8 <__udivsi3>
    4c58:	1e06      	subs	r6, r0, #0
    4c5a:	d1ea      	bne.n	4c32 <__utoa+0x2a>
    4c5c:	9b00      	ldr	r3, [sp, #0]
    4c5e:	7018      	strb	r0, [r3, #0]
    4c60:	002b      	movs	r3, r5
    4c62:	1b5a      	subs	r2, r3, r5
    4c64:	4294      	cmp	r4, r2
    4c66:	dde1      	ble.n	4c2c <__utoa+0x24>
    4c68:	781a      	ldrb	r2, [r3, #0]
    4c6a:	5d29      	ldrb	r1, [r5, r4]
    4c6c:	7019      	strb	r1, [r3, #0]
    4c6e:	552a      	strb	r2, [r5, r4]
    4c70:	3301      	adds	r3, #1
    4c72:	3c01      	subs	r4, #1
    4c74:	e7f5      	b.n	4c62 <__utoa+0x5a>
    4c76:	46c0      	nop			; (mov r8, r8)
    4c78:	00007d5c 	.word	0x00007d5c

00004c7c <__sflush_r>:
    4c7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4c7e:	898a      	ldrh	r2, [r1, #12]
    4c80:	0005      	movs	r5, r0
    4c82:	000c      	movs	r4, r1
    4c84:	0713      	lsls	r3, r2, #28
    4c86:	d460      	bmi.n	4d4a <__sflush_r+0xce>
    4c88:	684b      	ldr	r3, [r1, #4]
    4c8a:	2b00      	cmp	r3, #0
    4c8c:	dc04      	bgt.n	4c98 <__sflush_r+0x1c>
    4c8e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    4c90:	2b00      	cmp	r3, #0
    4c92:	dc01      	bgt.n	4c98 <__sflush_r+0x1c>
    4c94:	2000      	movs	r0, #0
    4c96:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4c98:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    4c9a:	2f00      	cmp	r7, #0
    4c9c:	d0fa      	beq.n	4c94 <__sflush_r+0x18>
    4c9e:	2300      	movs	r3, #0
    4ca0:	682e      	ldr	r6, [r5, #0]
    4ca2:	602b      	str	r3, [r5, #0]
    4ca4:	2380      	movs	r3, #128	; 0x80
    4ca6:	015b      	lsls	r3, r3, #5
    4ca8:	401a      	ands	r2, r3
    4caa:	d034      	beq.n	4d16 <__sflush_r+0x9a>
    4cac:	6d60      	ldr	r0, [r4, #84]	; 0x54
    4cae:	89a3      	ldrh	r3, [r4, #12]
    4cb0:	075b      	lsls	r3, r3, #29
    4cb2:	d506      	bpl.n	4cc2 <__sflush_r+0x46>
    4cb4:	6863      	ldr	r3, [r4, #4]
    4cb6:	1ac0      	subs	r0, r0, r3
    4cb8:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4cba:	2b00      	cmp	r3, #0
    4cbc:	d001      	beq.n	4cc2 <__sflush_r+0x46>
    4cbe:	6c23      	ldr	r3, [r4, #64]	; 0x40
    4cc0:	1ac0      	subs	r0, r0, r3
    4cc2:	0002      	movs	r2, r0
    4cc4:	6a21      	ldr	r1, [r4, #32]
    4cc6:	2300      	movs	r3, #0
    4cc8:	0028      	movs	r0, r5
    4cca:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    4ccc:	47b8      	blx	r7
    4cce:	89a1      	ldrh	r1, [r4, #12]
    4cd0:	1c43      	adds	r3, r0, #1
    4cd2:	d106      	bne.n	4ce2 <__sflush_r+0x66>
    4cd4:	682b      	ldr	r3, [r5, #0]
    4cd6:	2b1d      	cmp	r3, #29
    4cd8:	d831      	bhi.n	4d3e <__sflush_r+0xc2>
    4cda:	4a2c      	ldr	r2, [pc, #176]	; (4d8c <__sflush_r+0x110>)
    4cdc:	40da      	lsrs	r2, r3
    4cde:	07d3      	lsls	r3, r2, #31
    4ce0:	d52d      	bpl.n	4d3e <__sflush_r+0xc2>
    4ce2:	2300      	movs	r3, #0
    4ce4:	6063      	str	r3, [r4, #4]
    4ce6:	6923      	ldr	r3, [r4, #16]
    4ce8:	6023      	str	r3, [r4, #0]
    4cea:	04cb      	lsls	r3, r1, #19
    4cec:	d505      	bpl.n	4cfa <__sflush_r+0x7e>
    4cee:	1c43      	adds	r3, r0, #1
    4cf0:	d102      	bne.n	4cf8 <__sflush_r+0x7c>
    4cf2:	682b      	ldr	r3, [r5, #0]
    4cf4:	2b00      	cmp	r3, #0
    4cf6:	d100      	bne.n	4cfa <__sflush_r+0x7e>
    4cf8:	6560      	str	r0, [r4, #84]	; 0x54
    4cfa:	6b61      	ldr	r1, [r4, #52]	; 0x34
    4cfc:	602e      	str	r6, [r5, #0]
    4cfe:	2900      	cmp	r1, #0
    4d00:	d0c8      	beq.n	4c94 <__sflush_r+0x18>
    4d02:	0023      	movs	r3, r4
    4d04:	3344      	adds	r3, #68	; 0x44
    4d06:	4299      	cmp	r1, r3
    4d08:	d002      	beq.n	4d10 <__sflush_r+0x94>
    4d0a:	0028      	movs	r0, r5
    4d0c:	f7ff fd60 	bl	47d0 <_free_r>
    4d10:	2000      	movs	r0, #0
    4d12:	6360      	str	r0, [r4, #52]	; 0x34
    4d14:	e7bf      	b.n	4c96 <__sflush_r+0x1a>
    4d16:	2301      	movs	r3, #1
    4d18:	6a21      	ldr	r1, [r4, #32]
    4d1a:	0028      	movs	r0, r5
    4d1c:	47b8      	blx	r7
    4d1e:	1c43      	adds	r3, r0, #1
    4d20:	d1c5      	bne.n	4cae <__sflush_r+0x32>
    4d22:	682b      	ldr	r3, [r5, #0]
    4d24:	2b00      	cmp	r3, #0
    4d26:	d0c2      	beq.n	4cae <__sflush_r+0x32>
    4d28:	2b1d      	cmp	r3, #29
    4d2a:	d001      	beq.n	4d30 <__sflush_r+0xb4>
    4d2c:	2b16      	cmp	r3, #22
    4d2e:	d101      	bne.n	4d34 <__sflush_r+0xb8>
    4d30:	602e      	str	r6, [r5, #0]
    4d32:	e7af      	b.n	4c94 <__sflush_r+0x18>
    4d34:	2340      	movs	r3, #64	; 0x40
    4d36:	89a2      	ldrh	r2, [r4, #12]
    4d38:	4313      	orrs	r3, r2
    4d3a:	81a3      	strh	r3, [r4, #12]
    4d3c:	e7ab      	b.n	4c96 <__sflush_r+0x1a>
    4d3e:	2340      	movs	r3, #64	; 0x40
    4d40:	430b      	orrs	r3, r1
    4d42:	2001      	movs	r0, #1
    4d44:	81a3      	strh	r3, [r4, #12]
    4d46:	4240      	negs	r0, r0
    4d48:	e7a5      	b.n	4c96 <__sflush_r+0x1a>
    4d4a:	690f      	ldr	r7, [r1, #16]
    4d4c:	2f00      	cmp	r7, #0
    4d4e:	d0a1      	beq.n	4c94 <__sflush_r+0x18>
    4d50:	680b      	ldr	r3, [r1, #0]
    4d52:	600f      	str	r7, [r1, #0]
    4d54:	1bdb      	subs	r3, r3, r7
    4d56:	9301      	str	r3, [sp, #4]
    4d58:	2300      	movs	r3, #0
    4d5a:	0792      	lsls	r2, r2, #30
    4d5c:	d100      	bne.n	4d60 <__sflush_r+0xe4>
    4d5e:	694b      	ldr	r3, [r1, #20]
    4d60:	60a3      	str	r3, [r4, #8]
    4d62:	9b01      	ldr	r3, [sp, #4]
    4d64:	2b00      	cmp	r3, #0
    4d66:	dc00      	bgt.n	4d6a <__sflush_r+0xee>
    4d68:	e794      	b.n	4c94 <__sflush_r+0x18>
    4d6a:	9b01      	ldr	r3, [sp, #4]
    4d6c:	003a      	movs	r2, r7
    4d6e:	6a21      	ldr	r1, [r4, #32]
    4d70:	0028      	movs	r0, r5
    4d72:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    4d74:	47b0      	blx	r6
    4d76:	2800      	cmp	r0, #0
    4d78:	dc03      	bgt.n	4d82 <__sflush_r+0x106>
    4d7a:	2340      	movs	r3, #64	; 0x40
    4d7c:	89a2      	ldrh	r2, [r4, #12]
    4d7e:	4313      	orrs	r3, r2
    4d80:	e7df      	b.n	4d42 <__sflush_r+0xc6>
    4d82:	9b01      	ldr	r3, [sp, #4]
    4d84:	183f      	adds	r7, r7, r0
    4d86:	1a1b      	subs	r3, r3, r0
    4d88:	9301      	str	r3, [sp, #4]
    4d8a:	e7ea      	b.n	4d62 <__sflush_r+0xe6>
    4d8c:	20400001 	.word	0x20400001

00004d90 <_fflush_r>:
    4d90:	690b      	ldr	r3, [r1, #16]
    4d92:	b570      	push	{r4, r5, r6, lr}
    4d94:	0005      	movs	r5, r0
    4d96:	000c      	movs	r4, r1
    4d98:	2b00      	cmp	r3, #0
    4d9a:	d101      	bne.n	4da0 <_fflush_r+0x10>
    4d9c:	2000      	movs	r0, #0
    4d9e:	bd70      	pop	{r4, r5, r6, pc}
    4da0:	2800      	cmp	r0, #0
    4da2:	d004      	beq.n	4dae <_fflush_r+0x1e>
    4da4:	6983      	ldr	r3, [r0, #24]
    4da6:	2b00      	cmp	r3, #0
    4da8:	d101      	bne.n	4dae <_fflush_r+0x1e>
    4daa:	f000 f85f 	bl	4e6c <__sinit>
    4dae:	4b0b      	ldr	r3, [pc, #44]	; (4ddc <_fflush_r+0x4c>)
    4db0:	429c      	cmp	r4, r3
    4db2:	d109      	bne.n	4dc8 <_fflush_r+0x38>
    4db4:	686c      	ldr	r4, [r5, #4]
    4db6:	220c      	movs	r2, #12
    4db8:	5ea3      	ldrsh	r3, [r4, r2]
    4dba:	2b00      	cmp	r3, #0
    4dbc:	d0ee      	beq.n	4d9c <_fflush_r+0xc>
    4dbe:	0021      	movs	r1, r4
    4dc0:	0028      	movs	r0, r5
    4dc2:	f7ff ff5b 	bl	4c7c <__sflush_r>
    4dc6:	e7ea      	b.n	4d9e <_fflush_r+0xe>
    4dc8:	4b05      	ldr	r3, [pc, #20]	; (4de0 <_fflush_r+0x50>)
    4dca:	429c      	cmp	r4, r3
    4dcc:	d101      	bne.n	4dd2 <_fflush_r+0x42>
    4dce:	68ac      	ldr	r4, [r5, #8]
    4dd0:	e7f1      	b.n	4db6 <_fflush_r+0x26>
    4dd2:	4b04      	ldr	r3, [pc, #16]	; (4de4 <_fflush_r+0x54>)
    4dd4:	429c      	cmp	r4, r3
    4dd6:	d1ee      	bne.n	4db6 <_fflush_r+0x26>
    4dd8:	68ec      	ldr	r4, [r5, #12]
    4dda:	e7ec      	b.n	4db6 <_fflush_r+0x26>
    4ddc:	00007da4 	.word	0x00007da4
    4de0:	00007dc4 	.word	0x00007dc4
    4de4:	00007d84 	.word	0x00007d84

00004de8 <_cleanup_r>:
    4de8:	b510      	push	{r4, lr}
    4dea:	4902      	ldr	r1, [pc, #8]	; (4df4 <_cleanup_r+0xc>)
    4dec:	f000 f8b2 	bl	4f54 <_fwalk_reent>
    4df0:	bd10      	pop	{r4, pc}
    4df2:	46c0      	nop			; (mov r8, r8)
    4df4:	00004d91 	.word	0x00004d91

00004df8 <std.isra.0>:
    4df8:	2300      	movs	r3, #0
    4dfa:	b510      	push	{r4, lr}
    4dfc:	0004      	movs	r4, r0
    4dfe:	6003      	str	r3, [r0, #0]
    4e00:	6043      	str	r3, [r0, #4]
    4e02:	6083      	str	r3, [r0, #8]
    4e04:	8181      	strh	r1, [r0, #12]
    4e06:	6643      	str	r3, [r0, #100]	; 0x64
    4e08:	81c2      	strh	r2, [r0, #14]
    4e0a:	6103      	str	r3, [r0, #16]
    4e0c:	6143      	str	r3, [r0, #20]
    4e0e:	6183      	str	r3, [r0, #24]
    4e10:	0019      	movs	r1, r3
    4e12:	2208      	movs	r2, #8
    4e14:	305c      	adds	r0, #92	; 0x5c
    4e16:	f7ff fcd2 	bl	47be <memset>
    4e1a:	4b05      	ldr	r3, [pc, #20]	; (4e30 <std.isra.0+0x38>)
    4e1c:	6224      	str	r4, [r4, #32]
    4e1e:	6263      	str	r3, [r4, #36]	; 0x24
    4e20:	4b04      	ldr	r3, [pc, #16]	; (4e34 <std.isra.0+0x3c>)
    4e22:	62a3      	str	r3, [r4, #40]	; 0x28
    4e24:	4b04      	ldr	r3, [pc, #16]	; (4e38 <std.isra.0+0x40>)
    4e26:	62e3      	str	r3, [r4, #44]	; 0x2c
    4e28:	4b04      	ldr	r3, [pc, #16]	; (4e3c <std.isra.0+0x44>)
    4e2a:	6323      	str	r3, [r4, #48]	; 0x30
    4e2c:	bd10      	pop	{r4, pc}
    4e2e:	46c0      	nop			; (mov r8, r8)
    4e30:	00005679 	.word	0x00005679
    4e34:	000056a1 	.word	0x000056a1
    4e38:	000056d9 	.word	0x000056d9
    4e3c:	00005705 	.word	0x00005705

00004e40 <__sfmoreglue>:
    4e40:	b570      	push	{r4, r5, r6, lr}
    4e42:	2568      	movs	r5, #104	; 0x68
    4e44:	1e4a      	subs	r2, r1, #1
    4e46:	4355      	muls	r5, r2
    4e48:	000e      	movs	r6, r1
    4e4a:	0029      	movs	r1, r5
    4e4c:	3174      	adds	r1, #116	; 0x74
    4e4e:	f7ff fd09 	bl	4864 <_malloc_r>
    4e52:	1e04      	subs	r4, r0, #0
    4e54:	d008      	beq.n	4e68 <__sfmoreglue+0x28>
    4e56:	2100      	movs	r1, #0
    4e58:	002a      	movs	r2, r5
    4e5a:	6001      	str	r1, [r0, #0]
    4e5c:	6046      	str	r6, [r0, #4]
    4e5e:	300c      	adds	r0, #12
    4e60:	60a0      	str	r0, [r4, #8]
    4e62:	3268      	adds	r2, #104	; 0x68
    4e64:	f7ff fcab 	bl	47be <memset>
    4e68:	0020      	movs	r0, r4
    4e6a:	bd70      	pop	{r4, r5, r6, pc}

00004e6c <__sinit>:
    4e6c:	6983      	ldr	r3, [r0, #24]
    4e6e:	b513      	push	{r0, r1, r4, lr}
    4e70:	0004      	movs	r4, r0
    4e72:	2b00      	cmp	r3, #0
    4e74:	d128      	bne.n	4ec8 <__sinit+0x5c>
    4e76:	6483      	str	r3, [r0, #72]	; 0x48
    4e78:	64c3      	str	r3, [r0, #76]	; 0x4c
    4e7a:	6503      	str	r3, [r0, #80]	; 0x50
    4e7c:	4b13      	ldr	r3, [pc, #76]	; (4ecc <__sinit+0x60>)
    4e7e:	4a14      	ldr	r2, [pc, #80]	; (4ed0 <__sinit+0x64>)
    4e80:	681b      	ldr	r3, [r3, #0]
    4e82:	6282      	str	r2, [r0, #40]	; 0x28
    4e84:	9301      	str	r3, [sp, #4]
    4e86:	4298      	cmp	r0, r3
    4e88:	d101      	bne.n	4e8e <__sinit+0x22>
    4e8a:	2301      	movs	r3, #1
    4e8c:	6183      	str	r3, [r0, #24]
    4e8e:	0020      	movs	r0, r4
    4e90:	f000 f820 	bl	4ed4 <__sfp>
    4e94:	6060      	str	r0, [r4, #4]
    4e96:	0020      	movs	r0, r4
    4e98:	f000 f81c 	bl	4ed4 <__sfp>
    4e9c:	60a0      	str	r0, [r4, #8]
    4e9e:	0020      	movs	r0, r4
    4ea0:	f000 f818 	bl	4ed4 <__sfp>
    4ea4:	2200      	movs	r2, #0
    4ea6:	60e0      	str	r0, [r4, #12]
    4ea8:	2104      	movs	r1, #4
    4eaa:	6860      	ldr	r0, [r4, #4]
    4eac:	f7ff ffa4 	bl	4df8 <std.isra.0>
    4eb0:	2201      	movs	r2, #1
    4eb2:	2109      	movs	r1, #9
    4eb4:	68a0      	ldr	r0, [r4, #8]
    4eb6:	f7ff ff9f 	bl	4df8 <std.isra.0>
    4eba:	2202      	movs	r2, #2
    4ebc:	2112      	movs	r1, #18
    4ebe:	68e0      	ldr	r0, [r4, #12]
    4ec0:	f7ff ff9a 	bl	4df8 <std.isra.0>
    4ec4:	2301      	movs	r3, #1
    4ec6:	61a3      	str	r3, [r4, #24]
    4ec8:	bd13      	pop	{r0, r1, r4, pc}
    4eca:	46c0      	nop			; (mov r8, r8)
    4ecc:	00007d58 	.word	0x00007d58
    4ed0:	00004de9 	.word	0x00004de9

00004ed4 <__sfp>:
    4ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4ed6:	4b1e      	ldr	r3, [pc, #120]	; (4f50 <__sfp+0x7c>)
    4ed8:	0007      	movs	r7, r0
    4eda:	681e      	ldr	r6, [r3, #0]
    4edc:	69b3      	ldr	r3, [r6, #24]
    4ede:	2b00      	cmp	r3, #0
    4ee0:	d102      	bne.n	4ee8 <__sfp+0x14>
    4ee2:	0030      	movs	r0, r6
    4ee4:	f7ff ffc2 	bl	4e6c <__sinit>
    4ee8:	3648      	adds	r6, #72	; 0x48
    4eea:	68b4      	ldr	r4, [r6, #8]
    4eec:	6873      	ldr	r3, [r6, #4]
    4eee:	3b01      	subs	r3, #1
    4ef0:	d504      	bpl.n	4efc <__sfp+0x28>
    4ef2:	6833      	ldr	r3, [r6, #0]
    4ef4:	2b00      	cmp	r3, #0
    4ef6:	d007      	beq.n	4f08 <__sfp+0x34>
    4ef8:	6836      	ldr	r6, [r6, #0]
    4efa:	e7f6      	b.n	4eea <__sfp+0x16>
    4efc:	220c      	movs	r2, #12
    4efe:	5ea5      	ldrsh	r5, [r4, r2]
    4f00:	2d00      	cmp	r5, #0
    4f02:	d00d      	beq.n	4f20 <__sfp+0x4c>
    4f04:	3468      	adds	r4, #104	; 0x68
    4f06:	e7f2      	b.n	4eee <__sfp+0x1a>
    4f08:	2104      	movs	r1, #4
    4f0a:	0038      	movs	r0, r7
    4f0c:	f7ff ff98 	bl	4e40 <__sfmoreglue>
    4f10:	6030      	str	r0, [r6, #0]
    4f12:	2800      	cmp	r0, #0
    4f14:	d1f0      	bne.n	4ef8 <__sfp+0x24>
    4f16:	230c      	movs	r3, #12
    4f18:	0004      	movs	r4, r0
    4f1a:	603b      	str	r3, [r7, #0]
    4f1c:	0020      	movs	r0, r4
    4f1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4f20:	2301      	movs	r3, #1
    4f22:	0020      	movs	r0, r4
    4f24:	425b      	negs	r3, r3
    4f26:	81e3      	strh	r3, [r4, #14]
    4f28:	3302      	adds	r3, #2
    4f2a:	81a3      	strh	r3, [r4, #12]
    4f2c:	6665      	str	r5, [r4, #100]	; 0x64
    4f2e:	6025      	str	r5, [r4, #0]
    4f30:	60a5      	str	r5, [r4, #8]
    4f32:	6065      	str	r5, [r4, #4]
    4f34:	6125      	str	r5, [r4, #16]
    4f36:	6165      	str	r5, [r4, #20]
    4f38:	61a5      	str	r5, [r4, #24]
    4f3a:	2208      	movs	r2, #8
    4f3c:	0029      	movs	r1, r5
    4f3e:	305c      	adds	r0, #92	; 0x5c
    4f40:	f7ff fc3d 	bl	47be <memset>
    4f44:	6365      	str	r5, [r4, #52]	; 0x34
    4f46:	63a5      	str	r5, [r4, #56]	; 0x38
    4f48:	64a5      	str	r5, [r4, #72]	; 0x48
    4f4a:	64e5      	str	r5, [r4, #76]	; 0x4c
    4f4c:	e7e6      	b.n	4f1c <__sfp+0x48>
    4f4e:	46c0      	nop			; (mov r8, r8)
    4f50:	00007d58 	.word	0x00007d58

00004f54 <_fwalk_reent>:
    4f54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4f56:	0004      	movs	r4, r0
    4f58:	0007      	movs	r7, r0
    4f5a:	2600      	movs	r6, #0
    4f5c:	9101      	str	r1, [sp, #4]
    4f5e:	3448      	adds	r4, #72	; 0x48
    4f60:	2c00      	cmp	r4, #0
    4f62:	d101      	bne.n	4f68 <_fwalk_reent+0x14>
    4f64:	0030      	movs	r0, r6
    4f66:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4f68:	6863      	ldr	r3, [r4, #4]
    4f6a:	68a5      	ldr	r5, [r4, #8]
    4f6c:	9300      	str	r3, [sp, #0]
    4f6e:	9b00      	ldr	r3, [sp, #0]
    4f70:	3b01      	subs	r3, #1
    4f72:	9300      	str	r3, [sp, #0]
    4f74:	d501      	bpl.n	4f7a <_fwalk_reent+0x26>
    4f76:	6824      	ldr	r4, [r4, #0]
    4f78:	e7f2      	b.n	4f60 <_fwalk_reent+0xc>
    4f7a:	89ab      	ldrh	r3, [r5, #12]
    4f7c:	2b01      	cmp	r3, #1
    4f7e:	d908      	bls.n	4f92 <_fwalk_reent+0x3e>
    4f80:	220e      	movs	r2, #14
    4f82:	5eab      	ldrsh	r3, [r5, r2]
    4f84:	3301      	adds	r3, #1
    4f86:	d004      	beq.n	4f92 <_fwalk_reent+0x3e>
    4f88:	0029      	movs	r1, r5
    4f8a:	0038      	movs	r0, r7
    4f8c:	9b01      	ldr	r3, [sp, #4]
    4f8e:	4798      	blx	r3
    4f90:	4306      	orrs	r6, r0
    4f92:	3568      	adds	r5, #104	; 0x68
    4f94:	e7eb      	b.n	4f6e <_fwalk_reent+0x1a>
	...

00004f98 <__swhatbuf_r>:
    4f98:	b570      	push	{r4, r5, r6, lr}
    4f9a:	000e      	movs	r6, r1
    4f9c:	001d      	movs	r5, r3
    4f9e:	230e      	movs	r3, #14
    4fa0:	5ec9      	ldrsh	r1, [r1, r3]
    4fa2:	b090      	sub	sp, #64	; 0x40
    4fa4:	0014      	movs	r4, r2
    4fa6:	2900      	cmp	r1, #0
    4fa8:	da07      	bge.n	4fba <__swhatbuf_r+0x22>
    4faa:	2300      	movs	r3, #0
    4fac:	602b      	str	r3, [r5, #0]
    4fae:	89b3      	ldrh	r3, [r6, #12]
    4fb0:	061b      	lsls	r3, r3, #24
    4fb2:	d411      	bmi.n	4fd8 <__swhatbuf_r+0x40>
    4fb4:	2380      	movs	r3, #128	; 0x80
    4fb6:	00db      	lsls	r3, r3, #3
    4fb8:	e00f      	b.n	4fda <__swhatbuf_r+0x42>
    4fba:	aa01      	add	r2, sp, #4
    4fbc:	f000 fc9a 	bl	58f4 <_fstat_r>
    4fc0:	2800      	cmp	r0, #0
    4fc2:	dbf2      	blt.n	4faa <__swhatbuf_r+0x12>
    4fc4:	22f0      	movs	r2, #240	; 0xf0
    4fc6:	9b02      	ldr	r3, [sp, #8]
    4fc8:	0212      	lsls	r2, r2, #8
    4fca:	4013      	ands	r3, r2
    4fcc:	4a05      	ldr	r2, [pc, #20]	; (4fe4 <__swhatbuf_r+0x4c>)
    4fce:	189b      	adds	r3, r3, r2
    4fd0:	425a      	negs	r2, r3
    4fd2:	4153      	adcs	r3, r2
    4fd4:	602b      	str	r3, [r5, #0]
    4fd6:	e7ed      	b.n	4fb4 <__swhatbuf_r+0x1c>
    4fd8:	2340      	movs	r3, #64	; 0x40
    4fda:	2000      	movs	r0, #0
    4fdc:	6023      	str	r3, [r4, #0]
    4fde:	b010      	add	sp, #64	; 0x40
    4fe0:	bd70      	pop	{r4, r5, r6, pc}
    4fe2:	46c0      	nop			; (mov r8, r8)
    4fe4:	ffffe000 	.word	0xffffe000

00004fe8 <__smakebuf_r>:
    4fe8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4fea:	2602      	movs	r6, #2
    4fec:	898b      	ldrh	r3, [r1, #12]
    4fee:	0005      	movs	r5, r0
    4ff0:	000c      	movs	r4, r1
    4ff2:	4233      	tst	r3, r6
    4ff4:	d006      	beq.n	5004 <__smakebuf_r+0x1c>
    4ff6:	0023      	movs	r3, r4
    4ff8:	3347      	adds	r3, #71	; 0x47
    4ffa:	6023      	str	r3, [r4, #0]
    4ffc:	6123      	str	r3, [r4, #16]
    4ffe:	2301      	movs	r3, #1
    5000:	6163      	str	r3, [r4, #20]
    5002:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    5004:	ab01      	add	r3, sp, #4
    5006:	466a      	mov	r2, sp
    5008:	f7ff ffc6 	bl	4f98 <__swhatbuf_r>
    500c:	9900      	ldr	r1, [sp, #0]
    500e:	0007      	movs	r7, r0
    5010:	0028      	movs	r0, r5
    5012:	f7ff fc27 	bl	4864 <_malloc_r>
    5016:	2800      	cmp	r0, #0
    5018:	d108      	bne.n	502c <__smakebuf_r+0x44>
    501a:	220c      	movs	r2, #12
    501c:	5ea3      	ldrsh	r3, [r4, r2]
    501e:	059a      	lsls	r2, r3, #22
    5020:	d4ef      	bmi.n	5002 <__smakebuf_r+0x1a>
    5022:	2203      	movs	r2, #3
    5024:	4393      	bics	r3, r2
    5026:	431e      	orrs	r6, r3
    5028:	81a6      	strh	r6, [r4, #12]
    502a:	e7e4      	b.n	4ff6 <__smakebuf_r+0xe>
    502c:	4b0f      	ldr	r3, [pc, #60]	; (506c <__smakebuf_r+0x84>)
    502e:	62ab      	str	r3, [r5, #40]	; 0x28
    5030:	2380      	movs	r3, #128	; 0x80
    5032:	89a2      	ldrh	r2, [r4, #12]
    5034:	6020      	str	r0, [r4, #0]
    5036:	4313      	orrs	r3, r2
    5038:	81a3      	strh	r3, [r4, #12]
    503a:	9b00      	ldr	r3, [sp, #0]
    503c:	6120      	str	r0, [r4, #16]
    503e:	6163      	str	r3, [r4, #20]
    5040:	9b01      	ldr	r3, [sp, #4]
    5042:	2b00      	cmp	r3, #0
    5044:	d00d      	beq.n	5062 <__smakebuf_r+0x7a>
    5046:	230e      	movs	r3, #14
    5048:	5ee1      	ldrsh	r1, [r4, r3]
    504a:	0028      	movs	r0, r5
    504c:	f000 fc64 	bl	5918 <_isatty_r>
    5050:	2800      	cmp	r0, #0
    5052:	d006      	beq.n	5062 <__smakebuf_r+0x7a>
    5054:	2203      	movs	r2, #3
    5056:	89a3      	ldrh	r3, [r4, #12]
    5058:	4393      	bics	r3, r2
    505a:	001a      	movs	r2, r3
    505c:	2301      	movs	r3, #1
    505e:	4313      	orrs	r3, r2
    5060:	81a3      	strh	r3, [r4, #12]
    5062:	89a0      	ldrh	r0, [r4, #12]
    5064:	4338      	orrs	r0, r7
    5066:	81a0      	strh	r0, [r4, #12]
    5068:	e7cb      	b.n	5002 <__smakebuf_r+0x1a>
    506a:	46c0      	nop			; (mov r8, r8)
    506c:	00004de9 	.word	0x00004de9

00005070 <__malloc_lock>:
    5070:	4770      	bx	lr

00005072 <__malloc_unlock>:
    5072:	4770      	bx	lr

00005074 <__sfputc_r>:
    5074:	6893      	ldr	r3, [r2, #8]
    5076:	b510      	push	{r4, lr}
    5078:	3b01      	subs	r3, #1
    507a:	6093      	str	r3, [r2, #8]
    507c:	2b00      	cmp	r3, #0
    507e:	da05      	bge.n	508c <__sfputc_r+0x18>
    5080:	6994      	ldr	r4, [r2, #24]
    5082:	42a3      	cmp	r3, r4
    5084:	db08      	blt.n	5098 <__sfputc_r+0x24>
    5086:	b2cb      	uxtb	r3, r1
    5088:	2b0a      	cmp	r3, #10
    508a:	d005      	beq.n	5098 <__sfputc_r+0x24>
    508c:	6813      	ldr	r3, [r2, #0]
    508e:	1c58      	adds	r0, r3, #1
    5090:	6010      	str	r0, [r2, #0]
    5092:	7019      	strb	r1, [r3, #0]
    5094:	b2c8      	uxtb	r0, r1
    5096:	bd10      	pop	{r4, pc}
    5098:	f000 fb3a 	bl	5710 <__swbuf_r>
    509c:	e7fb      	b.n	5096 <__sfputc_r+0x22>

0000509e <__sfputs_r>:
    509e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    50a0:	0006      	movs	r6, r0
    50a2:	000f      	movs	r7, r1
    50a4:	0014      	movs	r4, r2
    50a6:	18d5      	adds	r5, r2, r3
    50a8:	42ac      	cmp	r4, r5
    50aa:	d101      	bne.n	50b0 <__sfputs_r+0x12>
    50ac:	2000      	movs	r0, #0
    50ae:	e007      	b.n	50c0 <__sfputs_r+0x22>
    50b0:	7821      	ldrb	r1, [r4, #0]
    50b2:	003a      	movs	r2, r7
    50b4:	0030      	movs	r0, r6
    50b6:	f7ff ffdd 	bl	5074 <__sfputc_r>
    50ba:	3401      	adds	r4, #1
    50bc:	1c43      	adds	r3, r0, #1
    50be:	d1f3      	bne.n	50a8 <__sfputs_r+0xa>
    50c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000050c4 <_vfiprintf_r>:
    50c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    50c6:	b09f      	sub	sp, #124	; 0x7c
    50c8:	0006      	movs	r6, r0
    50ca:	000f      	movs	r7, r1
    50cc:	0014      	movs	r4, r2
    50ce:	9305      	str	r3, [sp, #20]
    50d0:	2800      	cmp	r0, #0
    50d2:	d004      	beq.n	50de <_vfiprintf_r+0x1a>
    50d4:	6983      	ldr	r3, [r0, #24]
    50d6:	2b00      	cmp	r3, #0
    50d8:	d101      	bne.n	50de <_vfiprintf_r+0x1a>
    50da:	f7ff fec7 	bl	4e6c <__sinit>
    50de:	4b7f      	ldr	r3, [pc, #508]	; (52dc <_vfiprintf_r+0x218>)
    50e0:	429f      	cmp	r7, r3
    50e2:	d15c      	bne.n	519e <_vfiprintf_r+0xda>
    50e4:	6877      	ldr	r7, [r6, #4]
    50e6:	89bb      	ldrh	r3, [r7, #12]
    50e8:	071b      	lsls	r3, r3, #28
    50ea:	d562      	bpl.n	51b2 <_vfiprintf_r+0xee>
    50ec:	693b      	ldr	r3, [r7, #16]
    50ee:	2b00      	cmp	r3, #0
    50f0:	d05f      	beq.n	51b2 <_vfiprintf_r+0xee>
    50f2:	2300      	movs	r3, #0
    50f4:	ad06      	add	r5, sp, #24
    50f6:	616b      	str	r3, [r5, #20]
    50f8:	3320      	adds	r3, #32
    50fa:	766b      	strb	r3, [r5, #25]
    50fc:	3310      	adds	r3, #16
    50fe:	76ab      	strb	r3, [r5, #26]
    5100:	9402      	str	r4, [sp, #8]
    5102:	9c02      	ldr	r4, [sp, #8]
    5104:	7823      	ldrb	r3, [r4, #0]
    5106:	2b00      	cmp	r3, #0
    5108:	d15d      	bne.n	51c6 <_vfiprintf_r+0x102>
    510a:	9b02      	ldr	r3, [sp, #8]
    510c:	1ae3      	subs	r3, r4, r3
    510e:	9304      	str	r3, [sp, #16]
    5110:	d00d      	beq.n	512e <_vfiprintf_r+0x6a>
    5112:	9b04      	ldr	r3, [sp, #16]
    5114:	9a02      	ldr	r2, [sp, #8]
    5116:	0039      	movs	r1, r7
    5118:	0030      	movs	r0, r6
    511a:	f7ff ffc0 	bl	509e <__sfputs_r>
    511e:	1c43      	adds	r3, r0, #1
    5120:	d100      	bne.n	5124 <_vfiprintf_r+0x60>
    5122:	e0cc      	b.n	52be <_vfiprintf_r+0x1fa>
    5124:	696a      	ldr	r2, [r5, #20]
    5126:	9b04      	ldr	r3, [sp, #16]
    5128:	4694      	mov	ip, r2
    512a:	4463      	add	r3, ip
    512c:	616b      	str	r3, [r5, #20]
    512e:	7823      	ldrb	r3, [r4, #0]
    5130:	2b00      	cmp	r3, #0
    5132:	d100      	bne.n	5136 <_vfiprintf_r+0x72>
    5134:	e0c3      	b.n	52be <_vfiprintf_r+0x1fa>
    5136:	2201      	movs	r2, #1
    5138:	2300      	movs	r3, #0
    513a:	4252      	negs	r2, r2
    513c:	606a      	str	r2, [r5, #4]
    513e:	a902      	add	r1, sp, #8
    5140:	3254      	adds	r2, #84	; 0x54
    5142:	1852      	adds	r2, r2, r1
    5144:	3401      	adds	r4, #1
    5146:	602b      	str	r3, [r5, #0]
    5148:	60eb      	str	r3, [r5, #12]
    514a:	60ab      	str	r3, [r5, #8]
    514c:	7013      	strb	r3, [r2, #0]
    514e:	65ab      	str	r3, [r5, #88]	; 0x58
    5150:	7821      	ldrb	r1, [r4, #0]
    5152:	2205      	movs	r2, #5
    5154:	4862      	ldr	r0, [pc, #392]	; (52e0 <_vfiprintf_r+0x21c>)
    5156:	f000 fc05 	bl	5964 <memchr>
    515a:	1c63      	adds	r3, r4, #1
    515c:	469c      	mov	ip, r3
    515e:	2800      	cmp	r0, #0
    5160:	d135      	bne.n	51ce <_vfiprintf_r+0x10a>
    5162:	6829      	ldr	r1, [r5, #0]
    5164:	06cb      	lsls	r3, r1, #27
    5166:	d504      	bpl.n	5172 <_vfiprintf_r+0xae>
    5168:	2353      	movs	r3, #83	; 0x53
    516a:	aa02      	add	r2, sp, #8
    516c:	3020      	adds	r0, #32
    516e:	189b      	adds	r3, r3, r2
    5170:	7018      	strb	r0, [r3, #0]
    5172:	070b      	lsls	r3, r1, #28
    5174:	d504      	bpl.n	5180 <_vfiprintf_r+0xbc>
    5176:	2353      	movs	r3, #83	; 0x53
    5178:	202b      	movs	r0, #43	; 0x2b
    517a:	aa02      	add	r2, sp, #8
    517c:	189b      	adds	r3, r3, r2
    517e:	7018      	strb	r0, [r3, #0]
    5180:	7823      	ldrb	r3, [r4, #0]
    5182:	2b2a      	cmp	r3, #42	; 0x2a
    5184:	d02c      	beq.n	51e0 <_vfiprintf_r+0x11c>
    5186:	2000      	movs	r0, #0
    5188:	210a      	movs	r1, #10
    518a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    518c:	7822      	ldrb	r2, [r4, #0]
    518e:	3a30      	subs	r2, #48	; 0x30
    5190:	2a09      	cmp	r2, #9
    5192:	d800      	bhi.n	5196 <_vfiprintf_r+0xd2>
    5194:	e06b      	b.n	526e <_vfiprintf_r+0x1aa>
    5196:	2800      	cmp	r0, #0
    5198:	d02a      	beq.n	51f0 <_vfiprintf_r+0x12c>
    519a:	9309      	str	r3, [sp, #36]	; 0x24
    519c:	e028      	b.n	51f0 <_vfiprintf_r+0x12c>
    519e:	4b51      	ldr	r3, [pc, #324]	; (52e4 <_vfiprintf_r+0x220>)
    51a0:	429f      	cmp	r7, r3
    51a2:	d101      	bne.n	51a8 <_vfiprintf_r+0xe4>
    51a4:	68b7      	ldr	r7, [r6, #8]
    51a6:	e79e      	b.n	50e6 <_vfiprintf_r+0x22>
    51a8:	4b4f      	ldr	r3, [pc, #316]	; (52e8 <_vfiprintf_r+0x224>)
    51aa:	429f      	cmp	r7, r3
    51ac:	d19b      	bne.n	50e6 <_vfiprintf_r+0x22>
    51ae:	68f7      	ldr	r7, [r6, #12]
    51b0:	e799      	b.n	50e6 <_vfiprintf_r+0x22>
    51b2:	0039      	movs	r1, r7
    51b4:	0030      	movs	r0, r6
    51b6:	f000 fb15 	bl	57e4 <__swsetup_r>
    51ba:	2800      	cmp	r0, #0
    51bc:	d099      	beq.n	50f2 <_vfiprintf_r+0x2e>
    51be:	2001      	movs	r0, #1
    51c0:	4240      	negs	r0, r0
    51c2:	b01f      	add	sp, #124	; 0x7c
    51c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    51c6:	2b25      	cmp	r3, #37	; 0x25
    51c8:	d09f      	beq.n	510a <_vfiprintf_r+0x46>
    51ca:	3401      	adds	r4, #1
    51cc:	e79a      	b.n	5104 <_vfiprintf_r+0x40>
    51ce:	4b44      	ldr	r3, [pc, #272]	; (52e0 <_vfiprintf_r+0x21c>)
    51d0:	6829      	ldr	r1, [r5, #0]
    51d2:	1ac0      	subs	r0, r0, r3
    51d4:	2301      	movs	r3, #1
    51d6:	4083      	lsls	r3, r0
    51d8:	430b      	orrs	r3, r1
    51da:	602b      	str	r3, [r5, #0]
    51dc:	4664      	mov	r4, ip
    51de:	e7b7      	b.n	5150 <_vfiprintf_r+0x8c>
    51e0:	9b05      	ldr	r3, [sp, #20]
    51e2:	1d18      	adds	r0, r3, #4
    51e4:	681b      	ldr	r3, [r3, #0]
    51e6:	9005      	str	r0, [sp, #20]
    51e8:	2b00      	cmp	r3, #0
    51ea:	db3a      	blt.n	5262 <_vfiprintf_r+0x19e>
    51ec:	9309      	str	r3, [sp, #36]	; 0x24
    51ee:	4664      	mov	r4, ip
    51f0:	7823      	ldrb	r3, [r4, #0]
    51f2:	2b2e      	cmp	r3, #46	; 0x2e
    51f4:	d10b      	bne.n	520e <_vfiprintf_r+0x14a>
    51f6:	7863      	ldrb	r3, [r4, #1]
    51f8:	1c62      	adds	r2, r4, #1
    51fa:	2b2a      	cmp	r3, #42	; 0x2a
    51fc:	d13f      	bne.n	527e <_vfiprintf_r+0x1ba>
    51fe:	9b05      	ldr	r3, [sp, #20]
    5200:	3402      	adds	r4, #2
    5202:	1d1a      	adds	r2, r3, #4
    5204:	681b      	ldr	r3, [r3, #0]
    5206:	9205      	str	r2, [sp, #20]
    5208:	2b00      	cmp	r3, #0
    520a:	db35      	blt.n	5278 <_vfiprintf_r+0x1b4>
    520c:	9307      	str	r3, [sp, #28]
    520e:	7821      	ldrb	r1, [r4, #0]
    5210:	2203      	movs	r2, #3
    5212:	4836      	ldr	r0, [pc, #216]	; (52ec <_vfiprintf_r+0x228>)
    5214:	f000 fba6 	bl	5964 <memchr>
    5218:	2800      	cmp	r0, #0
    521a:	d007      	beq.n	522c <_vfiprintf_r+0x168>
    521c:	4b33      	ldr	r3, [pc, #204]	; (52ec <_vfiprintf_r+0x228>)
    521e:	682a      	ldr	r2, [r5, #0]
    5220:	1ac0      	subs	r0, r0, r3
    5222:	2340      	movs	r3, #64	; 0x40
    5224:	4083      	lsls	r3, r0
    5226:	4313      	orrs	r3, r2
    5228:	602b      	str	r3, [r5, #0]
    522a:	3401      	adds	r4, #1
    522c:	7821      	ldrb	r1, [r4, #0]
    522e:	1c63      	adds	r3, r4, #1
    5230:	2206      	movs	r2, #6
    5232:	482f      	ldr	r0, [pc, #188]	; (52f0 <_vfiprintf_r+0x22c>)
    5234:	9302      	str	r3, [sp, #8]
    5236:	7629      	strb	r1, [r5, #24]
    5238:	f000 fb94 	bl	5964 <memchr>
    523c:	2800      	cmp	r0, #0
    523e:	d044      	beq.n	52ca <_vfiprintf_r+0x206>
    5240:	4b2c      	ldr	r3, [pc, #176]	; (52f4 <_vfiprintf_r+0x230>)
    5242:	2b00      	cmp	r3, #0
    5244:	d12f      	bne.n	52a6 <_vfiprintf_r+0x1e2>
    5246:	6829      	ldr	r1, [r5, #0]
    5248:	9b05      	ldr	r3, [sp, #20]
    524a:	2207      	movs	r2, #7
    524c:	05c9      	lsls	r1, r1, #23
    524e:	d528      	bpl.n	52a2 <_vfiprintf_r+0x1de>
    5250:	189b      	adds	r3, r3, r2
    5252:	4393      	bics	r3, r2
    5254:	3308      	adds	r3, #8
    5256:	9305      	str	r3, [sp, #20]
    5258:	696b      	ldr	r3, [r5, #20]
    525a:	9a03      	ldr	r2, [sp, #12]
    525c:	189b      	adds	r3, r3, r2
    525e:	616b      	str	r3, [r5, #20]
    5260:	e74f      	b.n	5102 <_vfiprintf_r+0x3e>
    5262:	425b      	negs	r3, r3
    5264:	60eb      	str	r3, [r5, #12]
    5266:	2302      	movs	r3, #2
    5268:	430b      	orrs	r3, r1
    526a:	602b      	str	r3, [r5, #0]
    526c:	e7bf      	b.n	51ee <_vfiprintf_r+0x12a>
    526e:	434b      	muls	r3, r1
    5270:	3401      	adds	r4, #1
    5272:	189b      	adds	r3, r3, r2
    5274:	2001      	movs	r0, #1
    5276:	e789      	b.n	518c <_vfiprintf_r+0xc8>
    5278:	2301      	movs	r3, #1
    527a:	425b      	negs	r3, r3
    527c:	e7c6      	b.n	520c <_vfiprintf_r+0x148>
    527e:	2300      	movs	r3, #0
    5280:	0014      	movs	r4, r2
    5282:	200a      	movs	r0, #10
    5284:	001a      	movs	r2, r3
    5286:	606b      	str	r3, [r5, #4]
    5288:	7821      	ldrb	r1, [r4, #0]
    528a:	3930      	subs	r1, #48	; 0x30
    528c:	2909      	cmp	r1, #9
    528e:	d903      	bls.n	5298 <_vfiprintf_r+0x1d4>
    5290:	2b00      	cmp	r3, #0
    5292:	d0bc      	beq.n	520e <_vfiprintf_r+0x14a>
    5294:	9207      	str	r2, [sp, #28]
    5296:	e7ba      	b.n	520e <_vfiprintf_r+0x14a>
    5298:	4342      	muls	r2, r0
    529a:	3401      	adds	r4, #1
    529c:	1852      	adds	r2, r2, r1
    529e:	2301      	movs	r3, #1
    52a0:	e7f2      	b.n	5288 <_vfiprintf_r+0x1c4>
    52a2:	3307      	adds	r3, #7
    52a4:	e7d5      	b.n	5252 <_vfiprintf_r+0x18e>
    52a6:	ab05      	add	r3, sp, #20
    52a8:	9300      	str	r3, [sp, #0]
    52aa:	003a      	movs	r2, r7
    52ac:	4b12      	ldr	r3, [pc, #72]	; (52f8 <_vfiprintf_r+0x234>)
    52ae:	0029      	movs	r1, r5
    52b0:	0030      	movs	r0, r6
    52b2:	e000      	b.n	52b6 <_vfiprintf_r+0x1f2>
    52b4:	bf00      	nop
    52b6:	9003      	str	r0, [sp, #12]
    52b8:	9b03      	ldr	r3, [sp, #12]
    52ba:	3301      	adds	r3, #1
    52bc:	d1cc      	bne.n	5258 <_vfiprintf_r+0x194>
    52be:	89bb      	ldrh	r3, [r7, #12]
    52c0:	065b      	lsls	r3, r3, #25
    52c2:	d500      	bpl.n	52c6 <_vfiprintf_r+0x202>
    52c4:	e77b      	b.n	51be <_vfiprintf_r+0xfa>
    52c6:	980b      	ldr	r0, [sp, #44]	; 0x2c
    52c8:	e77b      	b.n	51c2 <_vfiprintf_r+0xfe>
    52ca:	ab05      	add	r3, sp, #20
    52cc:	9300      	str	r3, [sp, #0]
    52ce:	003a      	movs	r2, r7
    52d0:	4b09      	ldr	r3, [pc, #36]	; (52f8 <_vfiprintf_r+0x234>)
    52d2:	0029      	movs	r1, r5
    52d4:	0030      	movs	r0, r6
    52d6:	f000 f87f 	bl	53d8 <_printf_i>
    52da:	e7ec      	b.n	52b6 <_vfiprintf_r+0x1f2>
    52dc:	00007da4 	.word	0x00007da4
    52e0:	00007de4 	.word	0x00007de4
    52e4:	00007dc4 	.word	0x00007dc4
    52e8:	00007d84 	.word	0x00007d84
    52ec:	00007dea 	.word	0x00007dea
    52f0:	00007dee 	.word	0x00007dee
    52f4:	00000000 	.word	0x00000000
    52f8:	0000509f 	.word	0x0000509f

000052fc <_printf_common>:
    52fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    52fe:	0015      	movs	r5, r2
    5300:	9301      	str	r3, [sp, #4]
    5302:	688a      	ldr	r2, [r1, #8]
    5304:	690b      	ldr	r3, [r1, #16]
    5306:	9000      	str	r0, [sp, #0]
    5308:	000c      	movs	r4, r1
    530a:	4293      	cmp	r3, r2
    530c:	da00      	bge.n	5310 <_printf_common+0x14>
    530e:	0013      	movs	r3, r2
    5310:	0022      	movs	r2, r4
    5312:	602b      	str	r3, [r5, #0]
    5314:	3243      	adds	r2, #67	; 0x43
    5316:	7812      	ldrb	r2, [r2, #0]
    5318:	2a00      	cmp	r2, #0
    531a:	d001      	beq.n	5320 <_printf_common+0x24>
    531c:	3301      	adds	r3, #1
    531e:	602b      	str	r3, [r5, #0]
    5320:	6823      	ldr	r3, [r4, #0]
    5322:	069b      	lsls	r3, r3, #26
    5324:	d502      	bpl.n	532c <_printf_common+0x30>
    5326:	682b      	ldr	r3, [r5, #0]
    5328:	3302      	adds	r3, #2
    532a:	602b      	str	r3, [r5, #0]
    532c:	2706      	movs	r7, #6
    532e:	6823      	ldr	r3, [r4, #0]
    5330:	401f      	ands	r7, r3
    5332:	d027      	beq.n	5384 <_printf_common+0x88>
    5334:	0023      	movs	r3, r4
    5336:	3343      	adds	r3, #67	; 0x43
    5338:	781b      	ldrb	r3, [r3, #0]
    533a:	1e5a      	subs	r2, r3, #1
    533c:	4193      	sbcs	r3, r2
    533e:	6822      	ldr	r2, [r4, #0]
    5340:	0692      	lsls	r2, r2, #26
    5342:	d430      	bmi.n	53a6 <_printf_common+0xaa>
    5344:	0022      	movs	r2, r4
    5346:	9901      	ldr	r1, [sp, #4]
    5348:	3243      	adds	r2, #67	; 0x43
    534a:	9800      	ldr	r0, [sp, #0]
    534c:	9e08      	ldr	r6, [sp, #32]
    534e:	47b0      	blx	r6
    5350:	1c43      	adds	r3, r0, #1
    5352:	d025      	beq.n	53a0 <_printf_common+0xa4>
    5354:	2306      	movs	r3, #6
    5356:	6820      	ldr	r0, [r4, #0]
    5358:	682a      	ldr	r2, [r5, #0]
    535a:	68e1      	ldr	r1, [r4, #12]
    535c:	4003      	ands	r3, r0
    535e:	2500      	movs	r5, #0
    5360:	2b04      	cmp	r3, #4
    5362:	d103      	bne.n	536c <_printf_common+0x70>
    5364:	1a8d      	subs	r5, r1, r2
    5366:	43eb      	mvns	r3, r5
    5368:	17db      	asrs	r3, r3, #31
    536a:	401d      	ands	r5, r3
    536c:	68a3      	ldr	r3, [r4, #8]
    536e:	6922      	ldr	r2, [r4, #16]
    5370:	4293      	cmp	r3, r2
    5372:	dd01      	ble.n	5378 <_printf_common+0x7c>
    5374:	1a9b      	subs	r3, r3, r2
    5376:	18ed      	adds	r5, r5, r3
    5378:	2700      	movs	r7, #0
    537a:	42bd      	cmp	r5, r7
    537c:	d120      	bne.n	53c0 <_printf_common+0xc4>
    537e:	2000      	movs	r0, #0
    5380:	e010      	b.n	53a4 <_printf_common+0xa8>
    5382:	3701      	adds	r7, #1
    5384:	68e3      	ldr	r3, [r4, #12]
    5386:	682a      	ldr	r2, [r5, #0]
    5388:	1a9b      	subs	r3, r3, r2
    538a:	429f      	cmp	r7, r3
    538c:	dad2      	bge.n	5334 <_printf_common+0x38>
    538e:	0022      	movs	r2, r4
    5390:	2301      	movs	r3, #1
    5392:	3219      	adds	r2, #25
    5394:	9901      	ldr	r1, [sp, #4]
    5396:	9800      	ldr	r0, [sp, #0]
    5398:	9e08      	ldr	r6, [sp, #32]
    539a:	47b0      	blx	r6
    539c:	1c43      	adds	r3, r0, #1
    539e:	d1f0      	bne.n	5382 <_printf_common+0x86>
    53a0:	2001      	movs	r0, #1
    53a2:	4240      	negs	r0, r0
    53a4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    53a6:	2030      	movs	r0, #48	; 0x30
    53a8:	18e1      	adds	r1, r4, r3
    53aa:	3143      	adds	r1, #67	; 0x43
    53ac:	7008      	strb	r0, [r1, #0]
    53ae:	0021      	movs	r1, r4
    53b0:	1c5a      	adds	r2, r3, #1
    53b2:	3145      	adds	r1, #69	; 0x45
    53b4:	7809      	ldrb	r1, [r1, #0]
    53b6:	18a2      	adds	r2, r4, r2
    53b8:	3243      	adds	r2, #67	; 0x43
    53ba:	3302      	adds	r3, #2
    53bc:	7011      	strb	r1, [r2, #0]
    53be:	e7c1      	b.n	5344 <_printf_common+0x48>
    53c0:	0022      	movs	r2, r4
    53c2:	2301      	movs	r3, #1
    53c4:	321a      	adds	r2, #26
    53c6:	9901      	ldr	r1, [sp, #4]
    53c8:	9800      	ldr	r0, [sp, #0]
    53ca:	9e08      	ldr	r6, [sp, #32]
    53cc:	47b0      	blx	r6
    53ce:	1c43      	adds	r3, r0, #1
    53d0:	d0e6      	beq.n	53a0 <_printf_common+0xa4>
    53d2:	3701      	adds	r7, #1
    53d4:	e7d1      	b.n	537a <_printf_common+0x7e>
	...

000053d8 <_printf_i>:
    53d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    53da:	b08b      	sub	sp, #44	; 0x2c
    53dc:	9206      	str	r2, [sp, #24]
    53de:	000a      	movs	r2, r1
    53e0:	3243      	adds	r2, #67	; 0x43
    53e2:	9307      	str	r3, [sp, #28]
    53e4:	9005      	str	r0, [sp, #20]
    53e6:	9204      	str	r2, [sp, #16]
    53e8:	7e0a      	ldrb	r2, [r1, #24]
    53ea:	000c      	movs	r4, r1
    53ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
    53ee:	2a6e      	cmp	r2, #110	; 0x6e
    53f0:	d100      	bne.n	53f4 <_printf_i+0x1c>
    53f2:	e08f      	b.n	5514 <_printf_i+0x13c>
    53f4:	d817      	bhi.n	5426 <_printf_i+0x4e>
    53f6:	2a63      	cmp	r2, #99	; 0x63
    53f8:	d02c      	beq.n	5454 <_printf_i+0x7c>
    53fa:	d808      	bhi.n	540e <_printf_i+0x36>
    53fc:	2a00      	cmp	r2, #0
    53fe:	d100      	bne.n	5402 <_printf_i+0x2a>
    5400:	e099      	b.n	5536 <_printf_i+0x15e>
    5402:	2a58      	cmp	r2, #88	; 0x58
    5404:	d054      	beq.n	54b0 <_printf_i+0xd8>
    5406:	0026      	movs	r6, r4
    5408:	3642      	adds	r6, #66	; 0x42
    540a:	7032      	strb	r2, [r6, #0]
    540c:	e029      	b.n	5462 <_printf_i+0x8a>
    540e:	2a64      	cmp	r2, #100	; 0x64
    5410:	d001      	beq.n	5416 <_printf_i+0x3e>
    5412:	2a69      	cmp	r2, #105	; 0x69
    5414:	d1f7      	bne.n	5406 <_printf_i+0x2e>
    5416:	6821      	ldr	r1, [r4, #0]
    5418:	681a      	ldr	r2, [r3, #0]
    541a:	0608      	lsls	r0, r1, #24
    541c:	d523      	bpl.n	5466 <_printf_i+0x8e>
    541e:	1d11      	adds	r1, r2, #4
    5420:	6019      	str	r1, [r3, #0]
    5422:	6815      	ldr	r5, [r2, #0]
    5424:	e025      	b.n	5472 <_printf_i+0x9a>
    5426:	2a73      	cmp	r2, #115	; 0x73
    5428:	d100      	bne.n	542c <_printf_i+0x54>
    542a:	e088      	b.n	553e <_printf_i+0x166>
    542c:	d808      	bhi.n	5440 <_printf_i+0x68>
    542e:	2a6f      	cmp	r2, #111	; 0x6f
    5430:	d029      	beq.n	5486 <_printf_i+0xae>
    5432:	2a70      	cmp	r2, #112	; 0x70
    5434:	d1e7      	bne.n	5406 <_printf_i+0x2e>
    5436:	2220      	movs	r2, #32
    5438:	6809      	ldr	r1, [r1, #0]
    543a:	430a      	orrs	r2, r1
    543c:	6022      	str	r2, [r4, #0]
    543e:	e003      	b.n	5448 <_printf_i+0x70>
    5440:	2a75      	cmp	r2, #117	; 0x75
    5442:	d020      	beq.n	5486 <_printf_i+0xae>
    5444:	2a78      	cmp	r2, #120	; 0x78
    5446:	d1de      	bne.n	5406 <_printf_i+0x2e>
    5448:	0022      	movs	r2, r4
    544a:	2178      	movs	r1, #120	; 0x78
    544c:	3245      	adds	r2, #69	; 0x45
    544e:	7011      	strb	r1, [r2, #0]
    5450:	4a6c      	ldr	r2, [pc, #432]	; (5604 <_printf_i+0x22c>)
    5452:	e030      	b.n	54b6 <_printf_i+0xde>
    5454:	000e      	movs	r6, r1
    5456:	681a      	ldr	r2, [r3, #0]
    5458:	3642      	adds	r6, #66	; 0x42
    545a:	1d11      	adds	r1, r2, #4
    545c:	6019      	str	r1, [r3, #0]
    545e:	6813      	ldr	r3, [r2, #0]
    5460:	7033      	strb	r3, [r6, #0]
    5462:	2301      	movs	r3, #1
    5464:	e079      	b.n	555a <_printf_i+0x182>
    5466:	0649      	lsls	r1, r1, #25
    5468:	d5d9      	bpl.n	541e <_printf_i+0x46>
    546a:	1d11      	adds	r1, r2, #4
    546c:	6019      	str	r1, [r3, #0]
    546e:	2300      	movs	r3, #0
    5470:	5ed5      	ldrsh	r5, [r2, r3]
    5472:	2d00      	cmp	r5, #0
    5474:	da03      	bge.n	547e <_printf_i+0xa6>
    5476:	232d      	movs	r3, #45	; 0x2d
    5478:	9a04      	ldr	r2, [sp, #16]
    547a:	426d      	negs	r5, r5
    547c:	7013      	strb	r3, [r2, #0]
    547e:	4b62      	ldr	r3, [pc, #392]	; (5608 <_printf_i+0x230>)
    5480:	270a      	movs	r7, #10
    5482:	9303      	str	r3, [sp, #12]
    5484:	e02f      	b.n	54e6 <_printf_i+0x10e>
    5486:	6820      	ldr	r0, [r4, #0]
    5488:	6819      	ldr	r1, [r3, #0]
    548a:	0605      	lsls	r5, r0, #24
    548c:	d503      	bpl.n	5496 <_printf_i+0xbe>
    548e:	1d08      	adds	r0, r1, #4
    5490:	6018      	str	r0, [r3, #0]
    5492:	680d      	ldr	r5, [r1, #0]
    5494:	e005      	b.n	54a2 <_printf_i+0xca>
    5496:	0640      	lsls	r0, r0, #25
    5498:	d5f9      	bpl.n	548e <_printf_i+0xb6>
    549a:	680d      	ldr	r5, [r1, #0]
    549c:	1d08      	adds	r0, r1, #4
    549e:	6018      	str	r0, [r3, #0]
    54a0:	b2ad      	uxth	r5, r5
    54a2:	4b59      	ldr	r3, [pc, #356]	; (5608 <_printf_i+0x230>)
    54a4:	2708      	movs	r7, #8
    54a6:	9303      	str	r3, [sp, #12]
    54a8:	2a6f      	cmp	r2, #111	; 0x6f
    54aa:	d018      	beq.n	54de <_printf_i+0x106>
    54ac:	270a      	movs	r7, #10
    54ae:	e016      	b.n	54de <_printf_i+0x106>
    54b0:	3145      	adds	r1, #69	; 0x45
    54b2:	700a      	strb	r2, [r1, #0]
    54b4:	4a54      	ldr	r2, [pc, #336]	; (5608 <_printf_i+0x230>)
    54b6:	9203      	str	r2, [sp, #12]
    54b8:	681a      	ldr	r2, [r3, #0]
    54ba:	6821      	ldr	r1, [r4, #0]
    54bc:	1d10      	adds	r0, r2, #4
    54be:	6018      	str	r0, [r3, #0]
    54c0:	6815      	ldr	r5, [r2, #0]
    54c2:	0608      	lsls	r0, r1, #24
    54c4:	d522      	bpl.n	550c <_printf_i+0x134>
    54c6:	07cb      	lsls	r3, r1, #31
    54c8:	d502      	bpl.n	54d0 <_printf_i+0xf8>
    54ca:	2320      	movs	r3, #32
    54cc:	4319      	orrs	r1, r3
    54ce:	6021      	str	r1, [r4, #0]
    54d0:	2710      	movs	r7, #16
    54d2:	2d00      	cmp	r5, #0
    54d4:	d103      	bne.n	54de <_printf_i+0x106>
    54d6:	2320      	movs	r3, #32
    54d8:	6822      	ldr	r2, [r4, #0]
    54da:	439a      	bics	r2, r3
    54dc:	6022      	str	r2, [r4, #0]
    54de:	0023      	movs	r3, r4
    54e0:	2200      	movs	r2, #0
    54e2:	3343      	adds	r3, #67	; 0x43
    54e4:	701a      	strb	r2, [r3, #0]
    54e6:	6863      	ldr	r3, [r4, #4]
    54e8:	60a3      	str	r3, [r4, #8]
    54ea:	2b00      	cmp	r3, #0
    54ec:	db5c      	blt.n	55a8 <_printf_i+0x1d0>
    54ee:	2204      	movs	r2, #4
    54f0:	6821      	ldr	r1, [r4, #0]
    54f2:	4391      	bics	r1, r2
    54f4:	6021      	str	r1, [r4, #0]
    54f6:	2d00      	cmp	r5, #0
    54f8:	d158      	bne.n	55ac <_printf_i+0x1d4>
    54fa:	9e04      	ldr	r6, [sp, #16]
    54fc:	2b00      	cmp	r3, #0
    54fe:	d064      	beq.n	55ca <_printf_i+0x1f2>
    5500:	0026      	movs	r6, r4
    5502:	9b03      	ldr	r3, [sp, #12]
    5504:	3642      	adds	r6, #66	; 0x42
    5506:	781b      	ldrb	r3, [r3, #0]
    5508:	7033      	strb	r3, [r6, #0]
    550a:	e05e      	b.n	55ca <_printf_i+0x1f2>
    550c:	0648      	lsls	r0, r1, #25
    550e:	d5da      	bpl.n	54c6 <_printf_i+0xee>
    5510:	b2ad      	uxth	r5, r5
    5512:	e7d8      	b.n	54c6 <_printf_i+0xee>
    5514:	6809      	ldr	r1, [r1, #0]
    5516:	681a      	ldr	r2, [r3, #0]
    5518:	0608      	lsls	r0, r1, #24
    551a:	d505      	bpl.n	5528 <_printf_i+0x150>
    551c:	1d11      	adds	r1, r2, #4
    551e:	6019      	str	r1, [r3, #0]
    5520:	6813      	ldr	r3, [r2, #0]
    5522:	6962      	ldr	r2, [r4, #20]
    5524:	601a      	str	r2, [r3, #0]
    5526:	e006      	b.n	5536 <_printf_i+0x15e>
    5528:	0649      	lsls	r1, r1, #25
    552a:	d5f7      	bpl.n	551c <_printf_i+0x144>
    552c:	1d11      	adds	r1, r2, #4
    552e:	6019      	str	r1, [r3, #0]
    5530:	6813      	ldr	r3, [r2, #0]
    5532:	8aa2      	ldrh	r2, [r4, #20]
    5534:	801a      	strh	r2, [r3, #0]
    5536:	2300      	movs	r3, #0
    5538:	9e04      	ldr	r6, [sp, #16]
    553a:	6123      	str	r3, [r4, #16]
    553c:	e054      	b.n	55e8 <_printf_i+0x210>
    553e:	681a      	ldr	r2, [r3, #0]
    5540:	1d11      	adds	r1, r2, #4
    5542:	6019      	str	r1, [r3, #0]
    5544:	6816      	ldr	r6, [r2, #0]
    5546:	2100      	movs	r1, #0
    5548:	6862      	ldr	r2, [r4, #4]
    554a:	0030      	movs	r0, r6
    554c:	f000 fa0a 	bl	5964 <memchr>
    5550:	2800      	cmp	r0, #0
    5552:	d001      	beq.n	5558 <_printf_i+0x180>
    5554:	1b80      	subs	r0, r0, r6
    5556:	6060      	str	r0, [r4, #4]
    5558:	6863      	ldr	r3, [r4, #4]
    555a:	6123      	str	r3, [r4, #16]
    555c:	2300      	movs	r3, #0
    555e:	9a04      	ldr	r2, [sp, #16]
    5560:	7013      	strb	r3, [r2, #0]
    5562:	e041      	b.n	55e8 <_printf_i+0x210>
    5564:	6923      	ldr	r3, [r4, #16]
    5566:	0032      	movs	r2, r6
    5568:	9906      	ldr	r1, [sp, #24]
    556a:	9805      	ldr	r0, [sp, #20]
    556c:	9d07      	ldr	r5, [sp, #28]
    556e:	47a8      	blx	r5
    5570:	1c43      	adds	r3, r0, #1
    5572:	d043      	beq.n	55fc <_printf_i+0x224>
    5574:	6823      	ldr	r3, [r4, #0]
    5576:	2500      	movs	r5, #0
    5578:	079b      	lsls	r3, r3, #30
    557a:	d40f      	bmi.n	559c <_printf_i+0x1c4>
    557c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    557e:	68e0      	ldr	r0, [r4, #12]
    5580:	4298      	cmp	r0, r3
    5582:	da3d      	bge.n	5600 <_printf_i+0x228>
    5584:	0018      	movs	r0, r3
    5586:	e03b      	b.n	5600 <_printf_i+0x228>
    5588:	0022      	movs	r2, r4
    558a:	2301      	movs	r3, #1
    558c:	3219      	adds	r2, #25
    558e:	9906      	ldr	r1, [sp, #24]
    5590:	9805      	ldr	r0, [sp, #20]
    5592:	9e07      	ldr	r6, [sp, #28]
    5594:	47b0      	blx	r6
    5596:	1c43      	adds	r3, r0, #1
    5598:	d030      	beq.n	55fc <_printf_i+0x224>
    559a:	3501      	adds	r5, #1
    559c:	68e3      	ldr	r3, [r4, #12]
    559e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    55a0:	1a9b      	subs	r3, r3, r2
    55a2:	429d      	cmp	r5, r3
    55a4:	dbf0      	blt.n	5588 <_printf_i+0x1b0>
    55a6:	e7e9      	b.n	557c <_printf_i+0x1a4>
    55a8:	2d00      	cmp	r5, #0
    55aa:	d0a9      	beq.n	5500 <_printf_i+0x128>
    55ac:	9e04      	ldr	r6, [sp, #16]
    55ae:	0028      	movs	r0, r5
    55b0:	0039      	movs	r1, r7
    55b2:	f7fe ff97 	bl	44e4 <__aeabi_uidivmod>
    55b6:	9b03      	ldr	r3, [sp, #12]
    55b8:	3e01      	subs	r6, #1
    55ba:	5c5b      	ldrb	r3, [r3, r1]
    55bc:	0028      	movs	r0, r5
    55be:	7033      	strb	r3, [r6, #0]
    55c0:	0039      	movs	r1, r7
    55c2:	f7fe ff09 	bl	43d8 <__udivsi3>
    55c6:	1e05      	subs	r5, r0, #0
    55c8:	d1f1      	bne.n	55ae <_printf_i+0x1d6>
    55ca:	2f08      	cmp	r7, #8
    55cc:	d109      	bne.n	55e2 <_printf_i+0x20a>
    55ce:	6823      	ldr	r3, [r4, #0]
    55d0:	07db      	lsls	r3, r3, #31
    55d2:	d506      	bpl.n	55e2 <_printf_i+0x20a>
    55d4:	6863      	ldr	r3, [r4, #4]
    55d6:	6922      	ldr	r2, [r4, #16]
    55d8:	4293      	cmp	r3, r2
    55da:	dc02      	bgt.n	55e2 <_printf_i+0x20a>
    55dc:	2330      	movs	r3, #48	; 0x30
    55de:	3e01      	subs	r6, #1
    55e0:	7033      	strb	r3, [r6, #0]
    55e2:	9b04      	ldr	r3, [sp, #16]
    55e4:	1b9b      	subs	r3, r3, r6
    55e6:	6123      	str	r3, [r4, #16]
    55e8:	9b07      	ldr	r3, [sp, #28]
    55ea:	aa09      	add	r2, sp, #36	; 0x24
    55ec:	9300      	str	r3, [sp, #0]
    55ee:	0021      	movs	r1, r4
    55f0:	9b06      	ldr	r3, [sp, #24]
    55f2:	9805      	ldr	r0, [sp, #20]
    55f4:	f7ff fe82 	bl	52fc <_printf_common>
    55f8:	1c43      	adds	r3, r0, #1
    55fa:	d1b3      	bne.n	5564 <_printf_i+0x18c>
    55fc:	2001      	movs	r0, #1
    55fe:	4240      	negs	r0, r0
    5600:	b00b      	add	sp, #44	; 0x2c
    5602:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5604:	00007e06 	.word	0x00007e06
    5608:	00007df5 	.word	0x00007df5

0000560c <_putc_r>:
    560c:	b570      	push	{r4, r5, r6, lr}
    560e:	0006      	movs	r6, r0
    5610:	000d      	movs	r5, r1
    5612:	0014      	movs	r4, r2
    5614:	2800      	cmp	r0, #0
    5616:	d004      	beq.n	5622 <_putc_r+0x16>
    5618:	6983      	ldr	r3, [r0, #24]
    561a:	2b00      	cmp	r3, #0
    561c:	d101      	bne.n	5622 <_putc_r+0x16>
    561e:	f7ff fc25 	bl	4e6c <__sinit>
    5622:	4b12      	ldr	r3, [pc, #72]	; (566c <_putc_r+0x60>)
    5624:	429c      	cmp	r4, r3
    5626:	d111      	bne.n	564c <_putc_r+0x40>
    5628:	6874      	ldr	r4, [r6, #4]
    562a:	68a3      	ldr	r3, [r4, #8]
    562c:	3b01      	subs	r3, #1
    562e:	60a3      	str	r3, [r4, #8]
    5630:	2b00      	cmp	r3, #0
    5632:	da05      	bge.n	5640 <_putc_r+0x34>
    5634:	69a2      	ldr	r2, [r4, #24]
    5636:	4293      	cmp	r3, r2
    5638:	db12      	blt.n	5660 <_putc_r+0x54>
    563a:	b2eb      	uxtb	r3, r5
    563c:	2b0a      	cmp	r3, #10
    563e:	d00f      	beq.n	5660 <_putc_r+0x54>
    5640:	6823      	ldr	r3, [r4, #0]
    5642:	b2e8      	uxtb	r0, r5
    5644:	1c5a      	adds	r2, r3, #1
    5646:	6022      	str	r2, [r4, #0]
    5648:	701d      	strb	r5, [r3, #0]
    564a:	bd70      	pop	{r4, r5, r6, pc}
    564c:	4b08      	ldr	r3, [pc, #32]	; (5670 <_putc_r+0x64>)
    564e:	429c      	cmp	r4, r3
    5650:	d101      	bne.n	5656 <_putc_r+0x4a>
    5652:	68b4      	ldr	r4, [r6, #8]
    5654:	e7e9      	b.n	562a <_putc_r+0x1e>
    5656:	4b07      	ldr	r3, [pc, #28]	; (5674 <_putc_r+0x68>)
    5658:	429c      	cmp	r4, r3
    565a:	d1e6      	bne.n	562a <_putc_r+0x1e>
    565c:	68f4      	ldr	r4, [r6, #12]
    565e:	e7e4      	b.n	562a <_putc_r+0x1e>
    5660:	0022      	movs	r2, r4
    5662:	0029      	movs	r1, r5
    5664:	0030      	movs	r0, r6
    5666:	f000 f853 	bl	5710 <__swbuf_r>
    566a:	e7ee      	b.n	564a <_putc_r+0x3e>
    566c:	00007da4 	.word	0x00007da4
    5670:	00007dc4 	.word	0x00007dc4
    5674:	00007d84 	.word	0x00007d84

00005678 <__sread>:
    5678:	b570      	push	{r4, r5, r6, lr}
    567a:	000c      	movs	r4, r1
    567c:	250e      	movs	r5, #14
    567e:	5f49      	ldrsh	r1, [r1, r5]
    5680:	f000 f97c 	bl	597c <_read_r>
    5684:	2800      	cmp	r0, #0
    5686:	db03      	blt.n	5690 <__sread+0x18>
    5688:	6d63      	ldr	r3, [r4, #84]	; 0x54
    568a:	181b      	adds	r3, r3, r0
    568c:	6563      	str	r3, [r4, #84]	; 0x54
    568e:	bd70      	pop	{r4, r5, r6, pc}
    5690:	89a3      	ldrh	r3, [r4, #12]
    5692:	4a02      	ldr	r2, [pc, #8]	; (569c <__sread+0x24>)
    5694:	4013      	ands	r3, r2
    5696:	81a3      	strh	r3, [r4, #12]
    5698:	e7f9      	b.n	568e <__sread+0x16>
    569a:	46c0      	nop			; (mov r8, r8)
    569c:	ffffefff 	.word	0xffffefff

000056a0 <__swrite>:
    56a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    56a2:	001f      	movs	r7, r3
    56a4:	898b      	ldrh	r3, [r1, #12]
    56a6:	0005      	movs	r5, r0
    56a8:	000c      	movs	r4, r1
    56aa:	0016      	movs	r6, r2
    56ac:	05db      	lsls	r3, r3, #23
    56ae:	d505      	bpl.n	56bc <__swrite+0x1c>
    56b0:	230e      	movs	r3, #14
    56b2:	5ec9      	ldrsh	r1, [r1, r3]
    56b4:	2200      	movs	r2, #0
    56b6:	2302      	movs	r3, #2
    56b8:	f000 f940 	bl	593c <_lseek_r>
    56bc:	89a3      	ldrh	r3, [r4, #12]
    56be:	4a05      	ldr	r2, [pc, #20]	; (56d4 <__swrite+0x34>)
    56c0:	0028      	movs	r0, r5
    56c2:	4013      	ands	r3, r2
    56c4:	81a3      	strh	r3, [r4, #12]
    56c6:	0032      	movs	r2, r6
    56c8:	230e      	movs	r3, #14
    56ca:	5ee1      	ldrsh	r1, [r4, r3]
    56cc:	003b      	movs	r3, r7
    56ce:	f000 f875 	bl	57bc <_write_r>
    56d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    56d4:	ffffefff 	.word	0xffffefff

000056d8 <__sseek>:
    56d8:	b570      	push	{r4, r5, r6, lr}
    56da:	000c      	movs	r4, r1
    56dc:	250e      	movs	r5, #14
    56de:	5f49      	ldrsh	r1, [r1, r5]
    56e0:	f000 f92c 	bl	593c <_lseek_r>
    56e4:	89a3      	ldrh	r3, [r4, #12]
    56e6:	1c42      	adds	r2, r0, #1
    56e8:	d103      	bne.n	56f2 <__sseek+0x1a>
    56ea:	4a05      	ldr	r2, [pc, #20]	; (5700 <__sseek+0x28>)
    56ec:	4013      	ands	r3, r2
    56ee:	81a3      	strh	r3, [r4, #12]
    56f0:	bd70      	pop	{r4, r5, r6, pc}
    56f2:	2280      	movs	r2, #128	; 0x80
    56f4:	0152      	lsls	r2, r2, #5
    56f6:	4313      	orrs	r3, r2
    56f8:	81a3      	strh	r3, [r4, #12]
    56fa:	6560      	str	r0, [r4, #84]	; 0x54
    56fc:	e7f8      	b.n	56f0 <__sseek+0x18>
    56fe:	46c0      	nop			; (mov r8, r8)
    5700:	ffffefff 	.word	0xffffefff

00005704 <__sclose>:
    5704:	b510      	push	{r4, lr}
    5706:	230e      	movs	r3, #14
    5708:	5ec9      	ldrsh	r1, [r1, r3]
    570a:	f000 f8e1 	bl	58d0 <_close_r>
    570e:	bd10      	pop	{r4, pc}

00005710 <__swbuf_r>:
    5710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5712:	0005      	movs	r5, r0
    5714:	000e      	movs	r6, r1
    5716:	0014      	movs	r4, r2
    5718:	2800      	cmp	r0, #0
    571a:	d004      	beq.n	5726 <__swbuf_r+0x16>
    571c:	6983      	ldr	r3, [r0, #24]
    571e:	2b00      	cmp	r3, #0
    5720:	d101      	bne.n	5726 <__swbuf_r+0x16>
    5722:	f7ff fba3 	bl	4e6c <__sinit>
    5726:	4b22      	ldr	r3, [pc, #136]	; (57b0 <__swbuf_r+0xa0>)
    5728:	429c      	cmp	r4, r3
    572a:	d12d      	bne.n	5788 <__swbuf_r+0x78>
    572c:	686c      	ldr	r4, [r5, #4]
    572e:	69a3      	ldr	r3, [r4, #24]
    5730:	60a3      	str	r3, [r4, #8]
    5732:	89a3      	ldrh	r3, [r4, #12]
    5734:	071b      	lsls	r3, r3, #28
    5736:	d531      	bpl.n	579c <__swbuf_r+0x8c>
    5738:	6923      	ldr	r3, [r4, #16]
    573a:	2b00      	cmp	r3, #0
    573c:	d02e      	beq.n	579c <__swbuf_r+0x8c>
    573e:	6823      	ldr	r3, [r4, #0]
    5740:	6922      	ldr	r2, [r4, #16]
    5742:	b2f7      	uxtb	r7, r6
    5744:	1a98      	subs	r0, r3, r2
    5746:	6963      	ldr	r3, [r4, #20]
    5748:	b2f6      	uxtb	r6, r6
    574a:	4298      	cmp	r0, r3
    574c:	db05      	blt.n	575a <__swbuf_r+0x4a>
    574e:	0021      	movs	r1, r4
    5750:	0028      	movs	r0, r5
    5752:	f7ff fb1d 	bl	4d90 <_fflush_r>
    5756:	2800      	cmp	r0, #0
    5758:	d126      	bne.n	57a8 <__swbuf_r+0x98>
    575a:	68a3      	ldr	r3, [r4, #8]
    575c:	3001      	adds	r0, #1
    575e:	3b01      	subs	r3, #1
    5760:	60a3      	str	r3, [r4, #8]
    5762:	6823      	ldr	r3, [r4, #0]
    5764:	1c5a      	adds	r2, r3, #1
    5766:	6022      	str	r2, [r4, #0]
    5768:	701f      	strb	r7, [r3, #0]
    576a:	6963      	ldr	r3, [r4, #20]
    576c:	4298      	cmp	r0, r3
    576e:	d004      	beq.n	577a <__swbuf_r+0x6a>
    5770:	89a3      	ldrh	r3, [r4, #12]
    5772:	07db      	lsls	r3, r3, #31
    5774:	d51a      	bpl.n	57ac <__swbuf_r+0x9c>
    5776:	2e0a      	cmp	r6, #10
    5778:	d118      	bne.n	57ac <__swbuf_r+0x9c>
    577a:	0021      	movs	r1, r4
    577c:	0028      	movs	r0, r5
    577e:	f7ff fb07 	bl	4d90 <_fflush_r>
    5782:	2800      	cmp	r0, #0
    5784:	d012      	beq.n	57ac <__swbuf_r+0x9c>
    5786:	e00f      	b.n	57a8 <__swbuf_r+0x98>
    5788:	4b0a      	ldr	r3, [pc, #40]	; (57b4 <__swbuf_r+0xa4>)
    578a:	429c      	cmp	r4, r3
    578c:	d101      	bne.n	5792 <__swbuf_r+0x82>
    578e:	68ac      	ldr	r4, [r5, #8]
    5790:	e7cd      	b.n	572e <__swbuf_r+0x1e>
    5792:	4b09      	ldr	r3, [pc, #36]	; (57b8 <__swbuf_r+0xa8>)
    5794:	429c      	cmp	r4, r3
    5796:	d1ca      	bne.n	572e <__swbuf_r+0x1e>
    5798:	68ec      	ldr	r4, [r5, #12]
    579a:	e7c8      	b.n	572e <__swbuf_r+0x1e>
    579c:	0021      	movs	r1, r4
    579e:	0028      	movs	r0, r5
    57a0:	f000 f820 	bl	57e4 <__swsetup_r>
    57a4:	2800      	cmp	r0, #0
    57a6:	d0ca      	beq.n	573e <__swbuf_r+0x2e>
    57a8:	2601      	movs	r6, #1
    57aa:	4276      	negs	r6, r6
    57ac:	0030      	movs	r0, r6
    57ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    57b0:	00007da4 	.word	0x00007da4
    57b4:	00007dc4 	.word	0x00007dc4
    57b8:	00007d84 	.word	0x00007d84

000057bc <_write_r>:
    57bc:	b570      	push	{r4, r5, r6, lr}
    57be:	0005      	movs	r5, r0
    57c0:	0008      	movs	r0, r1
    57c2:	0011      	movs	r1, r2
    57c4:	2200      	movs	r2, #0
    57c6:	4c06      	ldr	r4, [pc, #24]	; (57e0 <_write_r+0x24>)
    57c8:	6022      	str	r2, [r4, #0]
    57ca:	001a      	movs	r2, r3
    57cc:	f7fd fc68 	bl	30a0 <_write>
    57d0:	1c43      	adds	r3, r0, #1
    57d2:	d103      	bne.n	57dc <_write_r+0x20>
    57d4:	6823      	ldr	r3, [r4, #0]
    57d6:	2b00      	cmp	r3, #0
    57d8:	d000      	beq.n	57dc <_write_r+0x20>
    57da:	602b      	str	r3, [r5, #0]
    57dc:	bd70      	pop	{r4, r5, r6, pc}
    57de:	46c0      	nop			; (mov r8, r8)
    57e0:	20000b6c 	.word	0x20000b6c

000057e4 <__swsetup_r>:
    57e4:	4b36      	ldr	r3, [pc, #216]	; (58c0 <__swsetup_r+0xdc>)
    57e6:	b570      	push	{r4, r5, r6, lr}
    57e8:	681d      	ldr	r5, [r3, #0]
    57ea:	0006      	movs	r6, r0
    57ec:	000c      	movs	r4, r1
    57ee:	2d00      	cmp	r5, #0
    57f0:	d005      	beq.n	57fe <__swsetup_r+0x1a>
    57f2:	69ab      	ldr	r3, [r5, #24]
    57f4:	2b00      	cmp	r3, #0
    57f6:	d102      	bne.n	57fe <__swsetup_r+0x1a>
    57f8:	0028      	movs	r0, r5
    57fa:	f7ff fb37 	bl	4e6c <__sinit>
    57fe:	4b31      	ldr	r3, [pc, #196]	; (58c4 <__swsetup_r+0xe0>)
    5800:	429c      	cmp	r4, r3
    5802:	d10f      	bne.n	5824 <__swsetup_r+0x40>
    5804:	686c      	ldr	r4, [r5, #4]
    5806:	230c      	movs	r3, #12
    5808:	5ee2      	ldrsh	r2, [r4, r3]
    580a:	b293      	uxth	r3, r2
    580c:	0719      	lsls	r1, r3, #28
    580e:	d42d      	bmi.n	586c <__swsetup_r+0x88>
    5810:	06d9      	lsls	r1, r3, #27
    5812:	d411      	bmi.n	5838 <__swsetup_r+0x54>
    5814:	2309      	movs	r3, #9
    5816:	2001      	movs	r0, #1
    5818:	6033      	str	r3, [r6, #0]
    581a:	3337      	adds	r3, #55	; 0x37
    581c:	4313      	orrs	r3, r2
    581e:	81a3      	strh	r3, [r4, #12]
    5820:	4240      	negs	r0, r0
    5822:	bd70      	pop	{r4, r5, r6, pc}
    5824:	4b28      	ldr	r3, [pc, #160]	; (58c8 <__swsetup_r+0xe4>)
    5826:	429c      	cmp	r4, r3
    5828:	d101      	bne.n	582e <__swsetup_r+0x4a>
    582a:	68ac      	ldr	r4, [r5, #8]
    582c:	e7eb      	b.n	5806 <__swsetup_r+0x22>
    582e:	4b27      	ldr	r3, [pc, #156]	; (58cc <__swsetup_r+0xe8>)
    5830:	429c      	cmp	r4, r3
    5832:	d1e8      	bne.n	5806 <__swsetup_r+0x22>
    5834:	68ec      	ldr	r4, [r5, #12]
    5836:	e7e6      	b.n	5806 <__swsetup_r+0x22>
    5838:	075b      	lsls	r3, r3, #29
    583a:	d513      	bpl.n	5864 <__swsetup_r+0x80>
    583c:	6b61      	ldr	r1, [r4, #52]	; 0x34
    583e:	2900      	cmp	r1, #0
    5840:	d008      	beq.n	5854 <__swsetup_r+0x70>
    5842:	0023      	movs	r3, r4
    5844:	3344      	adds	r3, #68	; 0x44
    5846:	4299      	cmp	r1, r3
    5848:	d002      	beq.n	5850 <__swsetup_r+0x6c>
    584a:	0030      	movs	r0, r6
    584c:	f7fe ffc0 	bl	47d0 <_free_r>
    5850:	2300      	movs	r3, #0
    5852:	6363      	str	r3, [r4, #52]	; 0x34
    5854:	2224      	movs	r2, #36	; 0x24
    5856:	89a3      	ldrh	r3, [r4, #12]
    5858:	4393      	bics	r3, r2
    585a:	81a3      	strh	r3, [r4, #12]
    585c:	2300      	movs	r3, #0
    585e:	6063      	str	r3, [r4, #4]
    5860:	6923      	ldr	r3, [r4, #16]
    5862:	6023      	str	r3, [r4, #0]
    5864:	2308      	movs	r3, #8
    5866:	89a2      	ldrh	r2, [r4, #12]
    5868:	4313      	orrs	r3, r2
    586a:	81a3      	strh	r3, [r4, #12]
    586c:	6923      	ldr	r3, [r4, #16]
    586e:	2b00      	cmp	r3, #0
    5870:	d10b      	bne.n	588a <__swsetup_r+0xa6>
    5872:	21a0      	movs	r1, #160	; 0xa0
    5874:	2280      	movs	r2, #128	; 0x80
    5876:	89a3      	ldrh	r3, [r4, #12]
    5878:	0089      	lsls	r1, r1, #2
    587a:	0092      	lsls	r2, r2, #2
    587c:	400b      	ands	r3, r1
    587e:	4293      	cmp	r3, r2
    5880:	d003      	beq.n	588a <__swsetup_r+0xa6>
    5882:	0021      	movs	r1, r4
    5884:	0030      	movs	r0, r6
    5886:	f7ff fbaf 	bl	4fe8 <__smakebuf_r>
    588a:	2301      	movs	r3, #1
    588c:	89a2      	ldrh	r2, [r4, #12]
    588e:	4013      	ands	r3, r2
    5890:	d011      	beq.n	58b6 <__swsetup_r+0xd2>
    5892:	2300      	movs	r3, #0
    5894:	60a3      	str	r3, [r4, #8]
    5896:	6963      	ldr	r3, [r4, #20]
    5898:	425b      	negs	r3, r3
    589a:	61a3      	str	r3, [r4, #24]
    589c:	2000      	movs	r0, #0
    589e:	6923      	ldr	r3, [r4, #16]
    58a0:	4283      	cmp	r3, r0
    58a2:	d1be      	bne.n	5822 <__swsetup_r+0x3e>
    58a4:	230c      	movs	r3, #12
    58a6:	5ee2      	ldrsh	r2, [r4, r3]
    58a8:	0613      	lsls	r3, r2, #24
    58aa:	d5ba      	bpl.n	5822 <__swsetup_r+0x3e>
    58ac:	2340      	movs	r3, #64	; 0x40
    58ae:	4313      	orrs	r3, r2
    58b0:	81a3      	strh	r3, [r4, #12]
    58b2:	3801      	subs	r0, #1
    58b4:	e7b5      	b.n	5822 <__swsetup_r+0x3e>
    58b6:	0792      	lsls	r2, r2, #30
    58b8:	d400      	bmi.n	58bc <__swsetup_r+0xd8>
    58ba:	6963      	ldr	r3, [r4, #20]
    58bc:	60a3      	str	r3, [r4, #8]
    58be:	e7ed      	b.n	589c <__swsetup_r+0xb8>
    58c0:	20000174 	.word	0x20000174
    58c4:	00007da4 	.word	0x00007da4
    58c8:	00007dc4 	.word	0x00007dc4
    58cc:	00007d84 	.word	0x00007d84

000058d0 <_close_r>:
    58d0:	2300      	movs	r3, #0
    58d2:	b570      	push	{r4, r5, r6, lr}
    58d4:	4c06      	ldr	r4, [pc, #24]	; (58f0 <_close_r+0x20>)
    58d6:	0005      	movs	r5, r0
    58d8:	0008      	movs	r0, r1
    58da:	6023      	str	r3, [r4, #0]
    58dc:	f7fd fc1a 	bl	3114 <_close>
    58e0:	1c43      	adds	r3, r0, #1
    58e2:	d103      	bne.n	58ec <_close_r+0x1c>
    58e4:	6823      	ldr	r3, [r4, #0]
    58e6:	2b00      	cmp	r3, #0
    58e8:	d000      	beq.n	58ec <_close_r+0x1c>
    58ea:	602b      	str	r3, [r5, #0]
    58ec:	bd70      	pop	{r4, r5, r6, pc}
    58ee:	46c0      	nop			; (mov r8, r8)
    58f0:	20000b6c 	.word	0x20000b6c

000058f4 <_fstat_r>:
    58f4:	2300      	movs	r3, #0
    58f6:	b570      	push	{r4, r5, r6, lr}
    58f8:	4c06      	ldr	r4, [pc, #24]	; (5914 <_fstat_r+0x20>)
    58fa:	0005      	movs	r5, r0
    58fc:	0008      	movs	r0, r1
    58fe:	0011      	movs	r1, r2
    5900:	6023      	str	r3, [r4, #0]
    5902:	f7fd fc0a 	bl	311a <_fstat>
    5906:	1c43      	adds	r3, r0, #1
    5908:	d103      	bne.n	5912 <_fstat_r+0x1e>
    590a:	6823      	ldr	r3, [r4, #0]
    590c:	2b00      	cmp	r3, #0
    590e:	d000      	beq.n	5912 <_fstat_r+0x1e>
    5910:	602b      	str	r3, [r5, #0]
    5912:	bd70      	pop	{r4, r5, r6, pc}
    5914:	20000b6c 	.word	0x20000b6c

00005918 <_isatty_r>:
    5918:	2300      	movs	r3, #0
    591a:	b570      	push	{r4, r5, r6, lr}
    591c:	4c06      	ldr	r4, [pc, #24]	; (5938 <_isatty_r+0x20>)
    591e:	0005      	movs	r5, r0
    5920:	0008      	movs	r0, r1
    5922:	6023      	str	r3, [r4, #0]
    5924:	f7fd fbfe 	bl	3124 <_isatty>
    5928:	1c43      	adds	r3, r0, #1
    592a:	d103      	bne.n	5934 <_isatty_r+0x1c>
    592c:	6823      	ldr	r3, [r4, #0]
    592e:	2b00      	cmp	r3, #0
    5930:	d000      	beq.n	5934 <_isatty_r+0x1c>
    5932:	602b      	str	r3, [r5, #0]
    5934:	bd70      	pop	{r4, r5, r6, pc}
    5936:	46c0      	nop			; (mov r8, r8)
    5938:	20000b6c 	.word	0x20000b6c

0000593c <_lseek_r>:
    593c:	b570      	push	{r4, r5, r6, lr}
    593e:	0005      	movs	r5, r0
    5940:	0008      	movs	r0, r1
    5942:	0011      	movs	r1, r2
    5944:	2200      	movs	r2, #0
    5946:	4c06      	ldr	r4, [pc, #24]	; (5960 <_lseek_r+0x24>)
    5948:	6022      	str	r2, [r4, #0]
    594a:	001a      	movs	r2, r3
    594c:	f7fd fbec 	bl	3128 <_lseek>
    5950:	1c43      	adds	r3, r0, #1
    5952:	d103      	bne.n	595c <_lseek_r+0x20>
    5954:	6823      	ldr	r3, [r4, #0]
    5956:	2b00      	cmp	r3, #0
    5958:	d000      	beq.n	595c <_lseek_r+0x20>
    595a:	602b      	str	r3, [r5, #0]
    595c:	bd70      	pop	{r4, r5, r6, pc}
    595e:	46c0      	nop			; (mov r8, r8)
    5960:	20000b6c 	.word	0x20000b6c

00005964 <memchr>:
    5964:	b2c9      	uxtb	r1, r1
    5966:	1882      	adds	r2, r0, r2
    5968:	4290      	cmp	r0, r2
    596a:	d101      	bne.n	5970 <memchr+0xc>
    596c:	2000      	movs	r0, #0
    596e:	4770      	bx	lr
    5970:	7803      	ldrb	r3, [r0, #0]
    5972:	428b      	cmp	r3, r1
    5974:	d0fb      	beq.n	596e <memchr+0xa>
    5976:	3001      	adds	r0, #1
    5978:	e7f6      	b.n	5968 <memchr+0x4>
	...

0000597c <_read_r>:
    597c:	b570      	push	{r4, r5, r6, lr}
    597e:	0005      	movs	r5, r0
    5980:	0008      	movs	r0, r1
    5982:	0011      	movs	r1, r2
    5984:	2200      	movs	r2, #0
    5986:	4c06      	ldr	r4, [pc, #24]	; (59a0 <_read_r+0x24>)
    5988:	6022      	str	r2, [r4, #0]
    598a:	001a      	movs	r2, r3
    598c:	f7fd fb66 	bl	305c <_read>
    5990:	1c43      	adds	r3, r0, #1
    5992:	d103      	bne.n	599c <_read_r+0x20>
    5994:	6823      	ldr	r3, [r4, #0]
    5996:	2b00      	cmp	r3, #0
    5998:	d000      	beq.n	599c <_read_r+0x20>
    599a:	602b      	str	r3, [r5, #0]
    599c:	bd70      	pop	{r4, r5, r6, pc}
    599e:	46c0      	nop			; (mov r8, r8)
    59a0:	20000b6c 	.word	0x20000b6c
    59a4:	000013f2 	.word	0x000013f2
    59a8:	000013f8 	.word	0x000013f8
    59ac:	000013fe 	.word	0x000013fe
    59b0:	0000140a 	.word	0x0000140a
    59b4:	00001410 	.word	0x00001410
    59b8:	00001416 	.word	0x00001416
    59bc:	6e305b1b 	.word	0x6e305b1b
    59c0:	00000008 	.word	0x00000008
    59c4:	00000008 	.word	0x00000008
    59c8:	00000008 	.word	0x00000008
    59cc:	00000008 	.word	0x00000008
    59d0:	00000008 	.word	0x00000008
    59d4:	00000008 	.word	0x00000008
    59d8:	00000008 	.word	0x00000008
    59dc:	00000008 	.word	0x00000008
    59e0:	00000010 	.word	0x00000010
    59e4:	00000010 	.word	0x00000010
    59e8:	00000010 	.word	0x00000010
    59ec:	00000010 	.word	0x00000010
    59f0:	00000010 	.word	0x00000010
    59f4:	00000010 	.word	0x00000010
    59f8:	00000010 	.word	0x00000010
    59fc:	00000010 	.word	0x00000010
    5a00:	00000018 	.word	0x00000018
    5a04:	00000018 	.word	0x00000018
    5a08:	00000018 	.word	0x00000018
    5a0c:	00000018 	.word	0x00000018
    5a10:	00000018 	.word	0x00000018
    5a14:	00000018 	.word	0x00000018
    5a18:	00000018 	.word	0x00000018
    5a1c:	00000018 	.word	0x00000018
    5a20:	00000020 	.word	0x00000020
    5a24:	00000020 	.word	0x00000020
    5a28:	00000020 	.word	0x00000020
    5a2c:	00000020 	.word	0x00000020
    5a30:	00000020 	.word	0x00000020
    5a34:	00000020 	.word	0x00000020
    5a38:	00000020 	.word	0x00000020
    5a3c:	00000020 	.word	0x00000020
    5a40:	00000028 	.word	0x00000028
    5a44:	00000028 	.word	0x00000028
    5a48:	00000028 	.word	0x00000028
    5a4c:	00000028 	.word	0x00000028
    5a50:	00000028 	.word	0x00000028
    5a54:	00000028 	.word	0x00000028
    5a58:	00000028 	.word	0x00000028
    5a5c:	00000028 	.word	0x00000028
    5a60:	00000030 	.word	0x00000030
    5a64:	00000030 	.word	0x00000030
    5a68:	00000030 	.word	0x00000030
    5a6c:	00000030 	.word	0x00000030
    5a70:	00000030 	.word	0x00000030
    5a74:	00000030 	.word	0x00000030
    5a78:	00000030 	.word	0x00000030
    5a7c:	00000030 	.word	0x00000030
    5a80:	00000038 	.word	0x00000038
    5a84:	00000038 	.word	0x00000038
    5a88:	00000038 	.word	0x00000038
    5a8c:	00000038 	.word	0x00000038
    5a90:	00000038 	.word	0x00000038
    5a94:	00000038 	.word	0x00000038
    5a98:	00000038 	.word	0x00000038
    5a9c:	00000038 	.word	0x00000038
    5aa0:	00000040 	.word	0x00000040
    5aa4:	00000040 	.word	0x00000040
    5aa8:	00000040 	.word	0x00000040
    5aac:	00000040 	.word	0x00000040
    5ab0:	00000040 	.word	0x00000040
    5ab4:	00000040 	.word	0x00000040
    5ab8:	00000040 	.word	0x00000040
    5abc:	00000040 	.word	0x00000040
    5ac0:	00000048 	.word	0x00000048
    5ac4:	00000048 	.word	0x00000048
    5ac8:	00000048 	.word	0x00000048
    5acc:	00000048 	.word	0x00000048
    5ad0:	00000048 	.word	0x00000048
    5ad4:	00000048 	.word	0x00000048
    5ad8:	00000048 	.word	0x00000048
    5adc:	00000048 	.word	0x00000048
    5ae0:	0000004f 	.word	0x0000004f
    5ae4:	0000004f 	.word	0x0000004f
    5ae8:	0000004f 	.word	0x0000004f
    5aec:	0000004f 	.word	0x0000004f
    5af0:	0000004f 	.word	0x0000004f
    5af4:	0000004f 	.word	0x0000004f
    5af8:	0000004f 	.word	0x0000004f
    5afc:	0000004f 	.word	0x0000004f

00005b00 <DECIDreturn>:
    5b00:	363f5b1b 00000063 0000001b 0000005b     .[?6c.......[...
    5b10:	00000052                                R...

00005b14 <csiEscCodes>:
    5b14:	43424140 47464544 4c4b4a48 6158504d     @ABCDEFGHJKLMPXa
    5b24:	66656463 6d6c6867 7372716e 00006075     cdefghlmnqrsu`..
    5b34:	00007325 000a000a 00140014 00000014     %s..............
    5b44:	000a017c 000a017c 00140186 00140000     |...|...........
    5b54:	0122000a 00140186 01220190 0122000a     .."......."...".
    5b64:	012c0014 0122017c 012c0186 012c0014     ..,.|."...,...,.
    5b74:	0136017c 001e0000 00280032 00320000     |.6.....2.(...2.
    5b84:	003c0032 001e0050 00280118 00280046     2.<.P.....(.F.(.
    5b94:	00be0050 00be0050 00c80118 00280118     P...P.........(.
    5ba4:	00be0122 00460000 00500032 005a0000     ".....F.2.P...Z.
    5bb4:	00640032 006e0000 00780032 00820000     2.d...n.2.x.....
    5bc4:	008c0032 00960000 00a00032 00aa0000     2.......2.......
    5bd4:	00b40032 00be0000 00c80032 00c8012c     2.......2...,...
    5be4:	00d20172 00dc001e 00e60172 00f0001e     r.......r.......
    5bf4:	00fa0172 0104001e 010e0172 0118005a     r.......r...Z...
    5c04:	0122012c 82be50b4 8cbe82aa 64963c8c     ,."..P.......<.d
    5c14:	64dc3cd2 a08c9682 aadca08c a0e696dc     .<.d............
    5c24:	50f03c78 5a78466e aaaa3c96 a0dc3cc8     x<.PnFxZ.<...<..
    5c34:	aae6a0d2 6e617254 69722073 73746867     ....Trans rights
    5c44:	65726120 6d756820 72206e61 74686769      are human right
    5c54:	00000073 355e3331 31202b20 20355e36     s...13^5 + 16^5 
    5c64:	3731203d 0000355e 69746552 616c7563     = 17^5..Reticula
    5c74:	676e6974 6c705320 73656e69 00000000     ting Splines....
    5c84:	6c6f6976 65636e65 726f772e 0000736b     violence.works..
    5c94:	2b206953 00425020 6c6c694b 6c694220     Si + PB.Kill Bil
    5ca4:	6e6f696c 65726961 61282073 5420646e     lionaires (and T
    5cb4:	6c6c6972 616e6f69 29657269 00000000     rillionaire)....
    5cc4:	65746e49 74736572 206e6920 68636574     Interest in tech
    5cd4:	6f6c6f6e 69207967 6f6e2073 20612074     nology is not a 
    5ce4:	73726570 6c616e6f 00797469 50203031     personality.10 P
    5cf4:	544e4952 52484320 30322824 2b352e35     RINT CHR$(205.5+
    5d04:	28444e52 3b292931 47203a20 204f544f     RND(1)); : GOTO 
    5d14:	00003031 67206f4e 2e73646f 206f4e20     10..No gods. No 
    5d24:	7473616d 2e737265 206f4e20 65747865     masters. No exte
    5d34:	6c616e72 62696c20 69726172 002e7365     rnal libraries..
    5d44:	6c6c694b 7a614e20 00007369 6e616954     Kill Nazis..Tian
    5d54:	656d6e61 7153206e 65726175 38393120     anmen Square 198
    5d64:	00000039 72656d41 20616369 20736177     9...America was 
    5d74:	6e756f66 20646564 73206e6f 6576616c     founded on slave
    5d84:	00007972 72656854 73692065 6c6e6f20     ry..There is onl
    5d94:	61632079 61746970 6e61206c 616c2064     y capital and la
    5da4:	00726f62 6f636e45 67617275 59532065     bor.Encourage SY
    5db4:	54454d4d 20434952 73616c63 61772073     MMETRIC class wa
    5dc4:	72616672 00000065 52554324 544e4552     rfare...$CURRENT
    5dd4:	4d454d5f 00000045 694e2041 54206563     _MEME...A Nice T
    5de4:	00005954 78696e55 6f706520 6d206863     TY..Unix epoch m
    5df4:	73756e69 46783020 61642046 00007379     inus 0xFF days..
    5e04:	3d202069 35783020 35373366 20666439     i  = 0x5f3759df 
    5e14:	2028202d 3e3e2069 29203120 0000003b     - ( i >> 1 );...
    5e24:	61657053 7274206b 20687475 70206f74     Speak truth to p
    5e34:	7265776f 2749203b 7573206d 74206572     ower; I'm sure t
    5e44:	27796568 6c206c6c 65747369 6874206e     hey'll listen th
    5e54:	74207369 2e656d69 00000000 63666544     is time.....Defc
    5e64:	73276e6f 6e616320 656c6563 32282064     on's canceled (2
    5e74:	29303230 00000000 73746152 7473656e     020)....Ratsnest
    5e84:	6f4e203a 6e696874 6f542067 216f4420     : Nothing To Do!
    5e94:	00000000 68207449 36207361 656b2039     ....It has 69 ke
    5ea4:	002e7379 61636542 20657375 342d5456     ys..Because VT-4
    5eb4:	77203032 61207361 6165726c 74207964     20 was already t
    5ec4:	6e656b61 00000000 706d6f43 73736572     aken....Compress
    5ed4:	206e6f69 6f676c61 68746972 6162206d     ion algorithm ba
    5ee4:	20646573 42206e6f 28205042 37393931     sed on BBP (1997
    5ef4:	00000029 63616554 65682068 68746c61     )...Teach health
    5f04:	736e6920 6e617275 70206563 69766f72      insurance provi
    5f14:	73726564 206f7420 65646f63 0000002e     ders to code....
    5f24:	6e617247 65432064 6172746e 6148206c     Grand Central Ha
    5f34:	54206b63 50206568 656e616c 00000074     ck The Planet...
    5f44:	69466957 20736920 20746f6e 65726977     WiFi is not wire
    5f54:	7373656c 68744520 656e7265 00002174     less Ethernet!..
    5f64:	6d6d7544 68742079 20636369 65696c63     Dummy thicc clie
    5f74:	0000746e 694e2041 54206563 202e5954     nt..A Nice TTY. 
    5f84:	4f206e41 6f43204b 7475706d 002e7265     An OK Computer..
    5f94:	65545355 6964656c 6e6f646c 00736369     USTeledildonics.
    5fa4:	696c6f53 69726164 69207974 6f6e2073     Solidarity is no
    5fb4:	20612074 2077656e 6d617266 726f7765     t a new framewor
    5fc4:	0000006b 61657242 616f6264 6e696472     k...Breadboardin
    5fd4:	73492067 746f4e20 43204120 656d6972     g Is Not A Crime
    5fe4:	00000000 2066664f 6f207962 6520656e     ....Off by one e
    5ff4:	726f7272 72612073 6f632065 6e6f6d6d     rrors are common
    6004:	00000000 00001a66 00001cb2 00001cb2     ....f...........
    6014:	00001cb2 00001cb2 00001cb2 00001cb2     ................
    6024:	00001cb2 00001cb2 00001cb2 00001cb2     ................
    6034:	00001cb2 00001cb2 00001cb2 00001cb2     ................
    6044:	00001cb2 00001a4e 00001cb2 00001cb2     ....N...........
    6054:	00001cb2 00001cb2 00001cb2 00001cb2     ................
    6064:	00001cb2 00001cb2 00001cb2 00001cb2     ................
    6074:	00001cb2 00001cb2 00001cb2 00001cb2     ................
    6084:	00001cb2 00001a5e 00001cb2 00001cb2     ....^...........
    6094:	00001cb2 00001cb2 00001cb2 00001cb2     ................
    60a4:	00001cb2 00001cb2 00001cb2 00001cb2     ................
    60b4:	00001cb2 00001cb2 00001cb2 00001cb2     ................
    60c4:	00001cb2 00001a56 00001a6e 00001a36     ....V...n...6...
    60d4:	00001a46 00001a3e 00000002 00000003     F...>...........
    60e4:	00000028 00000029 00000004 00000005     (...)...........
    60f4:	00000006 00000007 00000020 00000021     ........ ...!...
    6104:	00000022 00000023 00000024 00000025     "...#...$...%...
    6114:	00000026 00000027 00000008 00000009     &...'...........
    6124:	0000000a 0000000b 42000800 42000c00     ...........B...B
    6134:	42001000 42001400 42001800 42001c00     ...B...B...B...B
    6144:	000027ea 000027e6 000027e6 0000284c     .'...'...'..L(..
    6154:	0000284c 000027fe 000027f0 00002804     L(...'...'...(..
    6164:	0000283a 00002a0c 000029ec 000029ec     :(...*...)...)..
    6174:	00002a78 000029fe 00002a1a 000029f0     x*...)...*...)..
    6184:	00002a28 00002a68                       (*..h*..

0000618c <CodePage437>:
	...
    64c4:	01000000 06186080 18608001 60800106     .....`....`....`
    64d4:	80010000 00000060 00000000 66986106     ....`........a.f
    64e4:	98618619 00000000 00000000 00000000     ..a.............
    64f4:	00000000 98610600 fb8f1966 8f1966fe     ......a.f....f..
    6504:	1966fefb 00986186 00000000 80010000     ..f..a..........
    6514:	891f7e60 1f7e6082 7e649081 6080811f     `~...`~...d~...`
    6524:	00000000 04000000 29a60823 1820c106     ........#..).. .
    6534:	98200304 324c1165 00000008 00000000     .. .e.L2........
    6544:	84e08107 10420821 5a081e78 87208216     ....!.B.x..Z.. .
    6554:	0000f6d9 00000000 30c00000 00030618     ...........0....
    6564:	000000c0 00000000 00000000 00000000     ................
    6574:	40000000 03020810 0c30c000 08c00003     ...@......0.....
    6584:	10400002 00000000 01000000 02084000     ..@..........@..
    6594:	06186000 18608001 00010208 00000040     .`....`.....@...
    65a4:	00000000 42000000 90408210 40c23fff     .......B..@..?.@
    65b4:	80104290 00000000 00000000 00000000     .B..............
    65c4:	80000208 e0bfff20 02082080 00000000     .... .... ......
	...
    65e4:	18000000 c0000306 00001040 00000000     ........@.......
    65f4:	00000000 ff000000 0000e0bf 00000000     ................
	...
    6618:	030e3800 0000e080 00000000 08200000     .8............ .
    6628:	80000104 02041020 10408000 00000208     .... .....@.....
    6638:	00000000 e0030000 cc1863f8 b0c1061b     .........c......
    6648:	63061b6c f8e0c318 00000000 00000000     l..c............
    6658:	1b3c70c0 0c30c004 30c00003 e107030c     .p<...0....0....
    6668:	000000f8 00000000 c1f8e107 061860b0     .............`..
    6678:	0187030e 0f30c0c0 0000fefb 00000000     ......0.........
    6688:	fefb0f00 60c00003 80030e30 b0810618     .......`0.......
    6698:	00f8e167 00000000 40000000 03070c30     g..........@0...
    66a8:	31649040 04fefb0f 10400001 00000000     @.d1......@.....
    66b8:	0f000000 30c0fefb c1f8e30f 061860b0     .......0.....`..
    66c8:	e167a081 000000f8 00000000 60f8e003     ..g............`
    66d8:	00030c18 1b8c3ffe 67b0c106 0000f8e1     .....?.....g....
    66e8:	00000000 fefb0f00 20608001 00010408     ..........` ....
    66f8:	0c302080 00c00003 00000000 e0030000     . 0.............
    6708:	6cb0c1f8 0f3e061b c1061b8c f8e063b0     ...l..>......c..
    6718:	00000000 07000000 b0c1f8e1 7d0e3b6c     ............l;.}
    6728:	0618609f e1c70003 000000f0 00000000     .`..............
    6738:	38000000 e080030e 00000000 030e3800     ...8.........8..
    6748:	0000e080 00000000 00000000 80030e38     ............8...
    6758:	000000e0 0e380000 40c00003 00000010     ......8....@....
    6768:	30000000 03030c0c 30c0c000 0cc00003     ...0.......0....
    6778:	0c300003 00000000 00000000 00000000     ..0.............
    6788:	00fefb0f fefb0f00 00000000 00000000     ................
    6798:	00000000 3000030c 30c0000c c0c00003     .......0...0....
    67a8:	0c0c3030 00000003 00000000 f8e10700     00..............
    67b8:	6060b0c1 01061818 00006080 00608001     ..``.....`....`.
    67c8:	00000000 e1070000 6cb0c1f8 b4d33edb     ...........l.>..
    67d8:	c036fbec f8e10730 00000000 00000000     ..6.0...........
    67e8:	0d367080 c18c3186 fefb6fb0 1b6cb0c1     .p6..1...o....l.
    67f8:	00000006 00000000 61f8e30f 86196698     ...........a.f..
    6808:	19861f7e 6f986186 0000f8e3 00000000     ~....a.o........
    6818:	f8e00300 036c9861 0c30c000 98610003     ....a.l...0...a.
    6828:	00f8e063 00000000 c30f0000 861966f0     c............f..
    6838:	98618631 668c1966 f0c38f19 00000000     1.a.f..f........
    6848:	0f000000 30c0fefb fc00030c 00030c3f     .......0....?...
    6858:	fb0f30c0 000000fe 00000000 c0fefb0f     .0..............
    6868:	00030c30 030c3ffc 0c30c000 00000003     0....?....0.....
    6878:	00000000 f8e00300 036c9861 0c30c000     ........a.l...0.
    6888:	98611e7b 00f8e063 00000000 1b0c0000     {.a.c...........
    6898:	6cb0c106 bfff061b c1061bec 061b6cb0     ...l.........l..
    68a8:	00000000 07000000 0618f8e1 18608001     ..............`.
    68b8:	60800106 e1070618 000000f8 00000000     ...`............
    68c8:	067ef801 18608001 60800106 8731c618     ..~...`....`..1.
    68d8:	0000f0c1 00000000 061b0c00 838d31c6     .............1..
    68e8:	0d38e060 31c66083 00061b8c 00000000     `.8..`.1........
    68f8:	030c0000 0c30c000 30c00003 c000030c     ......0....0....
    6908:	fefb0f30 00000000 0c000000 bde38e1b     0...............
    6918:	c976dbed 061b6cb2 1b6cb0c1 00000006     ..v..l....l.....
    6928:	00000000 e1861b0c 661b6dbc 5b6cb3c9     .........m.f..l[
    6938:	ecb0c31e 0000061b 00000000 f8e00300     ................
    6948:	1b6cb0e3 6cb0c106 b8c1061b 00f8e0e3     ..l....l........
    6958:	00000000 e30f0000 6cb0c1f8 3ffe061b     ...........l...?
    6968:	c000038c 00030c30 00000000 07000000     ....0...........
    6978:	b0c1f8e1 c1061b6c 36db6cb0 d98731c6     ....l....l.6.1..
    6988:	000000f6 00000000 c1f8e30f 061b6cb0     .............l..
    6998:	638c3ffe cc30c318 0000061b 00000000     .?.c..0.........
    69a8:	f8e10700 036cb0c1 801f7e00 b0c10618     ......l..~......
    69b8:	00f8e167 00000000 fb0f0000 000208fe     g...............
    69c8:	02082080 08208000 20800002 00000000     . .... .... ....
    69d8:	0c000000 b0c1061b c1061b6c 061b6cb0     ........l....l..
    69e8:	e063b0c1 000000f8 00000000 c1061b0c     ..c.............
    69f8:	8c3166b0 60c31863 810d36d8 000020c0     .f1.c..`.6... ..
    6a08:	00000000 061b0c00 1b6cb0c1 6db2c906     ..........l....m
    6a18:	b5d576db 008c796f 00000000 1b0c0000     .v..oy..........
    6a28:	c3186306 060cf860 63d8e003 061bcc18     .c..`......c....
    6a38:	00000000 0c000000 1863061b 1cd860c3     ..........c..`..
    6a48:	20c00107 80000208 00000020 00000000     ... .... .......
    6a58:	03fefb0f 1060c000 0103060c 0f30c0c0     ......`.......0.
    6a68:	0000fefb 00000000 f8e00300 00030c30     ............0...
    6a78:	030c30c0 0c30c000 00f8e003 00000000     .0....0.........
    6a88:	01060000 010c3080 030c6080 03186000     .....0...`...`..
    6a98:	0618c000 00000000 07000000 030cf0c1     ................
    6aa8:	0c30c000 30c00003 c107030c 000000f0     ..0....0........
    6ab8:	00000000 36708000 8c31860d 0060b0c1     ......p6..1...`.
	...
    6ae4:	00fefb0f 00000000 80030000 00030ce0     ................
    6af4:	00001860 00000000 00000000 00000000     `...............
	...
    6b0c:	01fcf003 fef86380 f823b0c0 000000fe     .....c....#.....
    6b1c:	00000000 c000030c fcf30d30 0b6cb8e1     ........0.....l.
    6b2c:	6fb8e102 00007cf3 00000000 00000000     ...o.|..........
    6b3c:	e1070000 6cb0c1f8 30c00003 00fef907     .......l...0....
    6b4c:	00000000 18000000 67800106 b0c3f6d9     ...........g....
    6b5c:	c3061bec f6d9e7b0 00000000 00000000     ................
    6b6c:	00000000 c1f8e107 fefb6fb0 f10730c0     .........o...0..
    6b7c:	000000fc 00000000 3138e000 c000638c     ..........81.c..
    6b8c:	00033ffc 030c30c0 0000c000 00000000     .?...0..........
    6b9c:	00000000 d9070000 8731c6f6 30c0f0c1     ..........1....0
    6bac:	c3f8e107 f8e1e7b0 030c0000 0d30c000     ..............0.
    6bbc:	b8e178e3 c1061b6c 061b6cb0 00000000     .x..l....l......
    6bcc:	01000000 00006080 18e08003 60800106     .....`.........`
    6bdc:	e1070618 000000f8 00000000 00186000     .............`..
    6bec:	18600000 60800106 8c010618 31c61863     ..`....`....c..1
    6bfc:	00f0c187 00030c00 638c30c0 0f36cc30     .........0.c0.6.
    6c0c:	33ccc083 000c330c 00000000 c0030000     ...3.3..........
    6c1c:	00030cf0 030c30c0 0c30c000 f8e00303     .....0....0.....
	...
    6c38:	e70c330c 669b6dbf 1b6cb0c1 00000006     .3...m.f..l.....
	...
    6c50:	f8e20b00 1b6cb8e1 6cb0c106 0000061b     ......l....l....
	...
    6c68:	e1070000 cc30c3f8 30c30c33 00f8e1c7     ......0.3..0....
	...
    6c80:	0b000000 b0c1f8e2 be061b6c 0002882f     ........l.../...
    6c90:	02082080 00000000 00000000 c1fae803     . ..............
    6ca0:	061b6cb0 08a08f3e 20800002 00000208     .l..>...... ....
    6cb0:	00000000 7ce20800 036cbcf1 0c30c000     .......|..l...0.
    6cc0:	00000003 00000000 00000000 e1070000     ................
    6cd0:	0730c0f8 8001f8e1 00f8e36f 00000000     ..0.....o.......
    6ce0:	00030000 0f0c30c0 0c30f8e3 33c00003     .....0....0....3
    6cf0:	30c0c00c 00000000 00000000 00000000     ...0............
    6d00:	c30c330c 0c33cc30 d9c730c3 000000f6     .3..0.3..0......
	...
    6d18:	02020000 30e6b8c1 01073ed8 000020c0     .......0.>... ..
	...
    6d30:	1b0c0000 6cb0c106 b5d5769b 008c3166     .......l.v..f1..
	...
    6d48:	08000000 1b441823 6ce08003 08620c11     ....#.D....l..b.
	...
    6d64:	c618630c 18638c31 60801f7e 873bc618     .c..1.c.~..`..;.
    6d74:	0000f0c1 00000000 fefb0f00 c0c00003     ................
    6d84:	0f0c3030 0000fefb 00000000 1e780000     00............x.
    6d94:	40000208 000e3810 02081040 001e7800     ...@.8..@....x..
    6da4:	00000000 80010000 01061860 06186080     ........`....`..
    6db4:	18608001 60800106 00000000 0f000000     ..`....`........
    6dc4:	0208c003 0cc00003 c0000303 030f0208     ................
    6dd4:	000000c0 00000000 d9c61907 1c736cb3     .............ls.
	...
    6e0c:	e0030000 6c9861f8 30c00003 6100030c     .....a.l...0...a
    6e1c:	f8e06398 00000608 00000000 00669801     .c............f.
    6e2c:	c30c330c 0c33cc30 d9c730c3 000000f6     .3..0.3..0......
    6e3c:	00000000 0c180000 f8e10700 fb6fb0c1     ..............o.
    6e4c:	0730c0fe 0000fcf1 00000000 10000000     ..0.............
    6e5c:	f003000a 638001fc b0c0fef8 00fef823     .......c....#...
	...
    6e74:	030033cc 8001fcf0 c0fef863 fef823b0     .3......c....#..
	...
    6e8c:	000c6000 01fcf003 fef86380 f823b0c0     .`.......c....#.
    6e9c:	000000fe 03000000 0c482001 fcf00300     ......... H.....
    6eac:	f8638001 23b0c0fe 0000fef8 00000000     ..c....#........
    6ebc:	00000000 e1070000 6cb0c1f8 30c00003     ...........l...0
    6ecc:	04fef907 00000003 00000000 07001420     ............ ...
    6edc:	b0c1f8e1 c0fefb6f fcf10730 00000000     ....o...0.......
    6eec:	00000000 00669801 c1f8e107 fefb6fb0     ......f......o..
    6efc:	f10730c0 000000fc 00000000 18c00000     .0..............
    6f0c:	f8e10700 fb6fb0c1 0730c0fe 0000fcf1     ......o...0.....
    6f1c:	00000000 98610600 80030000 010618e0     ......a.........
    6f2c:	06186080 00f8e107 00000000 00000000     .`..............
    6f3c:	03002840 0618e080 18608001 f8e10706     @(........`.....
	...
    6f54:	0018c000 18e08003 60800106 e1070618     ...........`....
    6f64:	000000f8 18630000 367080c0 8c31860d     ......c...p6..1.
    6f74:	fb6fb0c1 6cb0c1fe 0000061b 1c000000     ..o....l........
    6f84:	70c08108 31860d36 6fb0c18c b0c1fefb     ...p6..1...o....
    6f94:	00061b6c 00000000 fb0f0606 0c30c0fe     l.............0.
    6fa4:	3ffc0003 c000030c fefb0f30 00000000     ...?....0.......
	...
    6fbc:	1dfe7907 fedb2786 f90733cc 000000ee     .y...'...3......
    6fcc:	00000000 367ef800 9861860d e3efb1c7     ......~6..a.....
    6fdc:	8c31c6f8 00001e7b 00000000 20000000     ..1.{.......... 
    6fec:	e1070014 cc30c3f8 30c30c33 00f8e1c7     ......0.3..0....
    6ffc:	00000000 01000000 07006698 30c3f8e1     .........f.....0
    700c:	c30c33cc f8e1c730 00000000 00000000     .3..0...........
    701c:	0018c000 c3f8e107 0c33cc30 e1c730c3     ........0.3..0..
    702c:	000000f8 00000000 14200000 0c330c00     .......... ...3.
    703c:	33cc30c3 c730c30c 0000f6d9 00000000     .0.3..0.........
    704c:	60000000 330c000c cc30c30c 30c30c33     ...`...3..0.3..0
    705c:	00f6d9c7 00000000 01000000 0c006698     .............f..
    706c:	31c61863 7e18638c 1860801f c1873bc6     c..1.c.~..`..;..
    707c:	800d36f0 383ef800 c1061bec 061b6cb0     .6....>8.....l..
    708c:	e0e3b8c1 000000f8 0c330000 c10603c0     ..........3.....
    709c:	061b6cb0 1b6cb0c1 63b0c106 0000f8e0     .l....l....c....
    70ac:	00000000 20800002 1b8c1f7e 0c32c826     ....... ~...&.2.
    70bc:	1f7e069b 08208080 00000000 c0010000     ..~... .........
    70cc:	461873f8 3e608001 6080810f fefb0f18     .s.F..`>...`....
    70dc:	00000000 0c000000 08630419 1c506083     ..........c..`P.
    70ec:	20e00302 80800f08 00000020 00000000     ... .... .......
    70fc:	c1f8e30f f81b6cb0 830d30fe 0d36d878     .....l...0..x.6.
    710c:	000038e3 00000000 3ce00000 98638e3f     .8.........<?.c.
    711c:	833ffee0 1c70c000 60800106 00000018     ..?...p....`....
    712c:	00000000 03000c18 8001fcf0 c0fef863     ............c...
    713c:	fef823b0 00000000 00000000 000060c0     .#...........`..
    714c:	18e08003 60800106 e1070618 000000f8     .......`........
    715c:	00000000 18300000 f8e10700 33cc30c3     ......0......0.3
    716c:	c730c30c 0000f8e1 00000000 30000000     ..0............0
    717c:	330c0018 cc30c30c 30c30c33 00f6d9c7     ...3..0.3..0....
	...
    7194:	0b001998 b8e1f8e2 c1061b6c 061b6cb0     ........l....l..
    71a4:	00000000 8c0c4c00 b8e1061b c9461b6d     .....L......m.F.
    71b4:	165b6cb2 1becb0c3 00000006 00000000     .l[.............
    71c4:	1e08c003 00e08308 000080ff 00000000     ................
	...
    71dc:	d8c00100 c0810d22 0080ff00 00000000     ...."...........
	...
    71f8:	00030c00 030c0000 3030c000 061b0c0c     ..........00....
    7208:	00c00f3f 00000000 00000000 ff000000     ?...............
    7218:	0003ecbf 00000000 00000000 00000000     ................
	...
    7230:	18e0bfff 00000006 00000000 00000000     ................
    7240:	30c00003 c000030c e0bfff00 0c1f3800     ...0.........8..
    7250:	183060c0 0000c00f c0000300 00030c30     .`0.........0...
    7260:	bfff00c0 668001e0 fc618619 60800106     .......f..a....`
    7270:	00000000 06180000 18000000 60800106     ...............`
    7280:	80010618 00061860 00000000 00000000     ....`...........
    7290:	90200100 80042448 00001290 00000000     .. .H$..........
	...
    72a8:	40020000 20010948 00244890 00000000     ...@H.. .H$.....
    72b8:	00000000 48024092 09004900 80240024     .....@.H.I..$.$.
    72c8:	92009004 00480240 24090049 42529200     ....@.H.I..$..RB
    72d8:	0949494a 24242529 929094a4 4a425292     JII.)%$$.....RBJ
    72e8:	29094949 ad6d2425 b6b6b5bd dbdad6f6     II.)%$m.........
    72f8:	6f6b5bdb bdad6d6d f6b6b6b5 08dbdad6     .[komm..........
    7308:	20800002 80000208 00020820 02082080     ... .... .... ..
    7318:	08208000 20800002 80000208 00020820     .. .... .... ...
    7328:	3e082080 08208000 20800002 80000208     . .>.. .... ....
    7338:	00020820 02082080 f8208000 20800f02      .... .... .... 
    7348:	80000208 00020820 05142080 14504001     .... .... ...@P.
    7358:	50400105 40013d14 01051450 05145040     ..@P.=.@P...@P..
    7368:	00504001 00000000 00000000 013f0000     .@P...........?.
    7378:	05145040 14504001 50400105 00000000     @P...@P...@P....
    7388:	00000000 02f80000 0820800f 20800002     .......... .... 
    7398:	80000208 01051420 05145040 f4504001     .... ...@P...@P.
    73a8:	50400f01 40010514 01051450 05145040     ..@P...@P...@P..
    73b8:	14504001 50400105 40010514 01051450     .@P...@P...@P...
    73c8:	05145040 00504001 00000000 00000000     @P...@P.........
    73d8:	0f01fc00 05145040 14504001 50400105     ....@P...@P...@P
    73e8:	40010514 01051450 01f45040 0000c00f     ...@P...@P......
	...
    7400:	01051400 05145040 14504001 0000003f     ....@P...@P.?...
	...
    7418:	02080000 08208000 20800002 800f02f8     ...... .... ....
	...
    743c:	003e0000 02082080 08208000 20800002     ..>.. .... .... 
    744c:	80000208 00020820 03082080 000000f0     .... .... ......
	...
    7464:	00020800 02082080 08208000 0000f03f     ..... .... .?...
	...
    7488:	80f03f00 00020820 02082080 08208000     .?.. .... .... .
    7498:	20800002 80000208 f0030820 02082080     ... .... .... ..
    74a8:	08208000 20800002 00000000 00000000     .. .... ........
    74b8:	3f000000 000000f0 00000000 00000000     ...?............
    74c8:	00020800 02082080 08208000 2080f03f     ..... .... .?.. 
    74d8:	80000208 00020820 02082080 08208000     .... .... .... .
    74e8:	20800002 fc00c20f 00020820 02082080     ... .... .... ..
    74f8:	14208000 50400105 40010514 f1051450     .. ...@P...@P...
    7508:	05145040 14504001 50400105 40010514     @P...@P...@P...@
    7518:	01051450 c4175040 0000fc01 00000000     P...@P..........
	...
    7534:	1f000000 507c01c4 40010514 01051450     ......|P...@P...
    7544:	05145040 14504001 50400105 fc0fc0f7     @P...@P...@P....
	...
    7568:	0fc0ff00 0514507c 14504001 50400105     ....|P...@P...@P
    7578:	40010514 01051450 c4175040 14507c01     ...@P...@P...|P.
    7588:	50400105 40010514 00000050 00000000     ..@P...@P.......
    7598:	ff000000 00fc0fc0 00000000 00000000     ................
    75a8:	05140000 14504001 50400105 7c0fc0f7     .....@P...@P...|
    75b8:	01051450 05145040 08504001 20800002     P...@P...@P.... 
    75c8:	80000208 0fc0ff20 000000fc 00000000     .... ...........
    75d8:	00000000 40010514 01051450 3f145040     .......@P...@P.?
    75e8:	000000f0 00000000 00000000 00000000     ................
    75f8:	00000000 ff000000 20fc0fc0 80000208     ........... ....
    7608:	00020820 00002080 00000000 00000000      .... ..........
    7618:	40f13f00 01051450 05145040 14504001     .?.@P...@P...@P.
    7628:	50400105 40010514 f0071450 00000000     ..@P...@P.......
	...
    7640:	80000208 00020820 c20f2080 0000fc00     .... .... ......
	...
    7660:	0f000000 20fc00c2 80000208 00020820     ....... .... ...
    7670:	00002080 00000000 00000000 40f10700     . .............@
    7680:	01051450 05145040 14504001 50400105     P...@P...@P...@P
    7690:	40010514 f13f1450 05145040 14504001     ...@P.?.@P...@P.
    76a0:	50400105 80000208 00020820 c2ff2080     ..@P.... .... ..
    76b0:	0820fc0f 20800002 80000208 00020820     .. .... .... ...
    76c0:	02082080 08208000 0000003e 00000000     . .... .>.......
	...
    76e0:	80f00300 00020820 02082080 ff208000     .... .... .... .
    76f0:	ffffffff ffffffff ffffffff ffffffff     ................
    7700:	ffffffff ffffffff 00000000 00000000     ................
    7710:	3f000000 ffffffff ffffffff ffffffff     ...?............
    7720:	0f3ef8ff 3ef8e083 f8e0830f e0830f3e     ..>....>....>...
    7730:	830f3ef8 0f3ef8e0 c30fe083 0f3ffcf0     .>....>.......?.
    7740:	3ffcf0c3 fcf0c30f f0c30f3f c30f3ffc     ...?....?....?..
    7750:	ff3ffcf0 ffffffff ffffffff f0ffffff     ..?.............
	...
    7774:	8f380000 c208234c e2d08330 00000000     ..8.L#..0.......
    7784:	00000000 193c0000 7c982186 8c61061f     ......<..!.|..a.
    7794:	63c61861 000000f8 00000000 ff000000     a..c............
    77a4:	8c31c61f 01061863 06186080 0000c003     ..1.c....`......
	...
    77c0:	c69fff00 18638c31 008e33c6 00000000     ....1.c..3......
    77d0:	fb0f0000 06b080fe 0618c000 c0800103     ................
    77e0:	fefb2f20 00000000 00000000 00000000      /..............
    77f0:	c3fef907 0c33cc30 e1c730c3 000000f8     ....0.3..0......
	...
    7808:	0c330c00 33cc30c3 cf30c30c 30c0f6db     ..3..0.3..0....0
    7818:	0000000c 00000000 e30c0000 618e7bbc     .............{.a
    7828:	06186080 00608001 00000000 00000000     .`....`.........
    7838:	c33f0000 30c3f8c1 c30c33cc f0e0c730     ..?....0.3..0...
    7848:	000000ff 03000000 1863f8e0 ff061bcc     ..........c.....
    7858:	061becbf e0c31863 000000f8 00000000     ....c...........
    7868:	e3fce103 061b6cb0 1b6cb0c1 c698e38e     .....l....l.....
    7878:	00008e33 00000000 fef80300 e1070318     3...............
    7888:	cc30c3f8 30c30c33 00f8e1c7 00000000     ..0.3..0........
    7898:	00000000 02000000 a2885421 88228a28     ........!T..(.".
    78a8:	00204295 00000000 00000000 07000000     .B .............
    78b8:	860e7367 628a28a3 7367b8b0 00000070     gs...(.b..gsp...
    78c8:	00000000 60f8e003 00030c18 030c3ffc     .......`.....?..
    78d8:	03186000 0000f8e0 00000000 00000000     .`..............
    78e8:	1b8c0f3e 6cb0c106 b0c1061b c1061b6c     >......l....l...
    78f8:	000060b0 00000000 0f000000 0000fefb     .`..............
    7908:	00fefb0f fefb0f00 00000000 00000000     ................
    7918:	02080000 ff208000 2080e0bf 03000208     ...... .... ....
    7928:	000000fe 00000000 3000030c 30c0000c     ...........0...0
    7938:	c0c00003 0c0c3030 3f000003 0000f0cf     ....00.....?....
    7948:	0c300000 0003030c 0330c0c0 030cc000     ..0.......0.....
    7958:	000c3000 00f0cf3f 88600307 00020820     .0..?.....`. ...
    7968:	02082080 08208000 20800002 80000208     . .... .... ....
    7978:	00020820 02082080 08208000 20800002      .... .... .... 
    7988:	80000208 09240820 00008001 18000000     .... .$.........
    7998:	00000006 00e0bfff 00061800 00000000     ................
	...
    79b0:	8a0f1c00 0f1c073e 00073e8a 00000000     ....>....>......
	...
    79c8:	01092460 00000080 00000000 00000000     `$..............
	...
    79ec:	80030e38 00000000 00000000 00000000     8...............
	...
    7a04:	01000000 00006080 00000000 0f000000     .....`..........
    7a14:	40000104 0d020820 0c504001 00800002     ...@ ....@P.....
    7a24:	00000000 f0c30b00 638c31c6 00000018     .........1.c....
	...
    7a40:	83070000 03070cf0 3fe0c081 00000000     ...........?....
	...
    7a64:	c30f3ffc 0f3ffcf0 0000f0c3 00000000     .?....?.........
	...
    7a8c:	0009001b 67753700 71312c6a 38000000     .....7ugj,1q...8
    7a9c:	006b6869 7a007732 6f303900 65332e6c     ihk.2w.z.90ol.3e
    7aac:	00007861 2f3b702d 63737234 5b3d0020     ax..-p;/4rsc .=[
    7abc:	74350027 006e7664 5c0d5d27 62667936     '.5tdvn.'].\6yfb
    7acc:	0008006d 00000a7f 0009001b 47552600     m............&UG
    7adc:	51213c4a 2a000000 004b4849 5a005740     J<!Q...*IHK.@W.Z
    7aec:	4f292800 45233e4c 00005841 3f3a505f     .()OL>#EAX.._P:?
    7afc:	43535224 7b2b0020 54250022 004e5644     $RSC .+{".%TDVN.
    7b0c:	7c0d7d7e 4246595e 0008004d 00000a7f     ~}.|^YFBM.......
    7b1c:	0009001b 47553700 51312c4a 38000000     .....7UGJ,1Q...8
    7b2c:	004b4849 5a005732 4f303900 45332e4c     IHK.2W.Z.90OL.3E
    7b3c:	00005841 2f3b502d 43535234 5b3d0020     AX..-P;/4RSC .=[
    7b4c:	54350027 004e5644 5c0d5d27 42465936     '.5TDVN.'].\6YFB
    7b5c:	0008004d 00000a7f 0009001b 07150000     M...............
    7b6c:	1100000a 00000000 000b0809 1a001700     ................
    7b7c:	0f000000 0500000a 00001801 1f001000     ................
    7b8c:	03131200 1b000000 14000000 000e1604     ................
    7b9c:	1c001d1e 02061900 0008000d 00000a00     ................

00007bac <kb_col>:
    7bac:	00010000 00020000 00040000 00080000     ................
    7bbc:	00100000 00200000 08000000              ...... .....

00007bc8 <kb_col_index>:
    7bc8:	00000010 00000011 00000012 00000013     ................
    7bd8:	00000014 00000015 0000001b              ............

00007be4 <kb_row>:
    7be4:	00000004 00000008 00000010 00000020     ............ ...
    7bf4:	00000040 00000080 00000400 00000800     @...............
    7c04:	00001000 00002000                       ..... ..

00007c0c <kb_row_index>:
    7c0c:	00000002 00000003 00000004 00000005     ................
    7c1c:	00000006 00000007 0000000a 0000000b     ................
    7c2c:	0000000c 0000000d                       ........

00007c34 <beelzebub.12957>:
    7c34:	2e002d00 44003200 88005300 f300b600     .-...2.D.S......
    7c44:	64012201 d4019201 08020702 5f023402     .".d.........4._
    7c54:	94027802 bb02a602 db02ca02 f902e802     .x..............
    7c64:	7f031f03                                ....

00007c68 <belial.12954>:
    7c68:	f0f0f0f0 b0b0b0f0 b1b6b6b6 b7b7b1b1     ................
    7c78:	b2b2b2b7 bfb8b8b8 b9b3b3b3 b5b5b9b9     ................
    7c88:	babac2b5 bcbcbcba bebdbdbd f0f0f0be     ................
    7c98:	b1b1f0f0 b8b7b7b6 bcb8b8b8 c9c9bcbc     ................
    7ca8:	35c9c9c9 0000363a                       ...5:6..

00007cb0 <lucifer.12956>:
    7cb0:	0852aa55 0d0d0d01 0d343434 34340d0d     U.R.....444...44
    7cc0:	00000034 01242424 340f0f0f 08083434     4...$$$....444..
    7cd0:	24240308 00780024 00007800 52aa5589     ..$$$.x..x...U.R
    7ce0:	00cc0008 01707005 02030303 02d00000     .....pp.........
    7cf0:	00505050 00000055                       PPP.U...

00007cf8 <mulciber.12955>:
    7cf8:	03020100 02010004 00020100 01000201     ................
    7d08:	02010002 00020100 01000201 01000002     ................
    7d18:	02010000 00020100 01000201 03020100     ................
    7d28:	00000004 01000100 01000302 02010002     ................
    7d38:	00000403 00000000 65530d0a 6c616972     ..........Serial
    7d48:	204b4f20 30303639 314e3820 00000d0a      OK 9600 8N1....

00007d58 <_global_impure_ptr>:
    7d58:	20000178 33323130 37363534 62613938     x.. 0123456789ab
    7d68:	66656463 6a696867 6e6d6c6b 7271706f     cdefghijklmnopqr
    7d78:	76757473 7a797877 00000000              stuvwxyz....

00007d84 <__sf_fake_stderr>:
	...

00007da4 <__sf_fake_stdin>:
	...

00007dc4 <__sf_fake_stdout>:
	...
    7de4:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    7df4:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    7e04:	31300046 35343332 39383736 64636261     F.0123456789abcd
    7e14:	00006665                                ef..

00007e18 <_init>:
    7e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7e1a:	46c0      	nop			; (mov r8, r8)
    7e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    7e1e:	bc08      	pop	{r3}
    7e20:	469e      	mov	lr, r3
    7e22:	4770      	bx	lr

00007e24 <__init_array_start>:
    7e24:	000000dd 	.word	0x000000dd

00007e28 <_fini>:
    7e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7e2a:	46c0      	nop			; (mov r8, r8)
    7e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    7e2e:	bc08      	pop	{r3}
    7e30:	469e      	mov	lr, r3
    7e32:	4770      	bx	lr

00007e34 <__fini_array_start>:
    7e34:	000000b5 	.word	0x000000b5
