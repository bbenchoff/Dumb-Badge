
DumBadgeFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008244  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000020c  20000000  00008244  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00002f18  2000020c  00008450  0002020c  2**2
                  ALLOC
  3 .stack        00002004  20003124  0000b368  0002020c  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020236  2**0
                  CONTENTS, READONLY
  6 .debug_info   0003e0a3  00000000  00000000  0002028f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005d88  00000000  00000000  0005e332  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000075aa  00000000  00000000  000640ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000008f0  00000000  00000000  0006b664  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000b88  00000000  00000000  0006bf54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001fbff  00000000  00000000  0006cadc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000153b9  00000000  00000000  0008c6db  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00090af8  00000000  00000000  000a1a94  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001ebc  00000000  00000000  0013258c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
	// Keep the default device state after reset
	SystemCoreClock = __SYSTEM_CLOCK;
       0:	28 51 00 20 a9 34 00 00 a5 34 00 00 a5 34 00 00     (Q. .4...4...4..
	...
	config->stopbits         = USART_STOPBITS_1;
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
	config->baudrate         = 9600;
	config->receiver_enable  = true;
	config->transmitter_enable = true;
	config->clock_polarity_inverted = false;
      2c:	a5 34 00 00 00 00 00 00 00 00 00 00 a5 34 00 00     .4...........4..
	config->use_external_clock = false;
	config->ext_clock_freq   = 0;
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
	config->generator_source = GCLK_GENERATOR_0;
      3c:	2d 46 00 00 a5 34 00 00 a5 34 00 00 a5 34 00 00     -F...4...4...4..

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
      4c:	a5 34 00 00 a5 34 00 00 a5 34 00 00 a5 34 00 00     .4...4...4...4..
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
      5c:	a5 34 00 00 a5 34 00 00 2d 27 00 00 3d 27 00 00     .4...4..-'..='..
	usart_get_config_defaults(&config_usart);

	config_usart.baudrate    = SERCOMBAUD;
	config_usart.mux_setting = SERCOMMUX;
	config_usart.pinmux_pad0 = SERCOMPAD0;
	config_usart.pinmux_pad1 = SERCOMPAD1;
      6c:	4d 27 00 00 5d 27 00 00 6d 27 00 00 7d 27 00 00     M'..]'..m'..}'..
	config_usart.pinmux_pad2 = SERCOMPAD2;
	config_usart.pinmux_pad3 = SERCOMPAD3;

	while (usart_init(&usart_instance,	 SERCOMMODULE, &config_usart) != STATUS_OK) { }
      7c:	a5 34 00 00 a5 34 00 00 a5 34 00 00 a5 34 00 00     .4...4...4...4..
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
      8c:	a5 34 00 00 a5 34 00 00 a5 34 00 00 a5 34 00 00     .4...4...4...4..
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	if (usart_init(module, hw, config) == STATUS_OK) {
      9c:	95 22 00 00 a5 34 00 00 a5 34 00 00 a5 34 00 00     ."...4...4...4..
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
      ac:	a5 34 00 00 00 00 00 00                             .4......

000000b4 <__do_global_dtors_aux>:
	setbuf(stdin, NULL);
      b4:	b510      	push	{r4, lr}
      b6:	4c05      	ldr	r4, [pc, #20]	; (cc <__do_global_dtors_aux+0x18>)
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
      b8:	7823      	ldrb	r3, [r4, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
      ba:	b933      	cbnz	r3, ca <__do_global_dtors_aux+0x16>
      bc:	4b04      	ldr	r3, [pc, #16]	; (d0 <__do_global_dtors_aux+0x1c>)
      be:	b113      	cbz	r3, c6 <__do_global_dtors_aux+0x12>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
      c0:	4804      	ldr	r0, [pc, #16]	; (d4 <__do_global_dtors_aux+0x20>)
      c2:	f3af 8000 	nop.w
      c6:	2301      	movs	r3, #1
      c8:	7023      	strb	r3, [r4, #0]
      ca:	bd10      	pop	{r4, pc}
      cc:	2000020c 	.word	0x2000020c
	return (usart_hw->SYNCBUSY.reg);
      d0:	00000000 	.word	0x00000000
	while (usart_is_syncing(module)) {
      d4:	00008244 	.word	0x00008244

000000d8 <frame_dummy>:

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
      d8:	4b0c      	ldr	r3, [pc, #48]	; (10c <frame_dummy+0x34>)
      da:	b143      	cbz	r3, ee <frame_dummy+0x16>
      dc:	480c      	ldr	r0, [pc, #48]	; (110 <frame_dummy+0x38>)

	stdio_serial_init(&usart_instance, SERCOMMODULE, &config_usart);
	usart_enable(&usart_instance);
}
      de:	490d      	ldr	r1, [pc, #52]	; (114 <frame_dummy+0x3c>)
      e0:	b510      	push	{r4, lr}
      e2:	f3af 8000 	nop.w
      e6:	480c      	ldr	r0, [pc, #48]	; (118 <frame_dummy+0x40>)
      e8:	6803      	ldr	r3, [r0, #0]
      ea:	b923      	cbnz	r3, f6 <frame_dummy+0x1e>
      ec:	bd10      	pop	{r4, pc}
      ee:	480a      	ldr	r0, [pc, #40]	; (118 <frame_dummy+0x40>)
      f0:	6803      	ldr	r3, [r0, #0]
      f2:	b933      	cbnz	r3, 102 <frame_dummy+0x2a>
      f4:	4770      	bx	lr
      f6:	4b09      	ldr	r3, [pc, #36]	; (11c <frame_dummy+0x44>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0f7      	beq.n	ec <frame_dummy+0x14>
      fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     100:	4718      	bx	r3
     102:	4b06      	ldr	r3, [pc, #24]	; (11c <frame_dummy+0x44>)
     104:	2b00      	cmp	r3, #0
     106:	d0f5      	beq.n	f4 <frame_dummy+0x1c>
     108:	4718      	bx	r3
     10a:	bf00      	nop
     10c:	00000000 	.word	0x00000000
     110:	00008244 	.word	0x00008244
     114:	20000210 	.word	0x20000210
     118:	00008244 	.word	0x00008244
     11c:	00000000 	.word	0x00000000

00000120 <ring_init>:
	cbuf->full = false;
	cbuf->tail = (cbuf->tail + 1) % cbuf->max;
}

cbuf_handle_t ring_init(uint8_t* buffer, uint16_t size)
{
     120:	b538      	push	{r3, r4, r5, lr}
     122:	4605      	mov	r5, r0
     124:	460c      	mov	r4, r1
	cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
     126:	200c      	movs	r0, #12
     128:	4b04      	ldr	r3, [pc, #16]	; (13c <ring_init+0x1c>)
     12a:	4798      	blx	r3

	cbuf->buffer = buffer;
     12c:	6005      	str	r5, [r0, #0]
	cbuf->max = size;
     12e:	8104      	strh	r4, [r0, #8]
	return cbuf;
}

void ring_reset(cbuf_handle_t cbuf)
{
	cbuf->head = 0;
     130:	2200      	movs	r2, #0
     132:	8082      	strh	r2, [r0, #4]
	cbuf->tail = 0;
     134:	80c2      	strh	r2, [r0, #6]
	cbuf->full = false;
     136:	7282      	strb	r2, [r0, #10]
}
     138:	bd38      	pop	{r3, r4, r5, pc}
     13a:	bf00      	nop
     13c:	00004aa9 	.word	0x00004aa9

00000140 <ring_reset>:
	cbuf->head = 0;
     140:	2300      	movs	r3, #0
     142:	8083      	strh	r3, [r0, #4]
	cbuf->tail = 0;
     144:	80c3      	strh	r3, [r0, #6]
	cbuf->full = false;
     146:	7283      	strb	r3, [r0, #10]
     148:	4770      	bx	lr

0000014a <ring_put>:
}

void ring_put(cbuf_handle_t cbuf, uint8_t data)
{
	cbuf->buffer[cbuf->head] = data;
     14a:	8882      	ldrh	r2, [r0, #4]
     14c:	6803      	ldr	r3, [r0, #0]
     14e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	if(cbuf->full)
     152:	7a83      	ldrb	r3, [r0, #10]
     154:	b13b      	cbz	r3, 166 <ring_put+0x1c>
		cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     156:	88c3      	ldrh	r3, [r0, #6]
     158:	3301      	adds	r3, #1
     15a:	8901      	ldrh	r1, [r0, #8]
     15c:	fb93 f2f1 	sdiv	r2, r3, r1
     160:	fb01 3312 	mls	r3, r1, r2, r3
     164:	80c3      	strh	r3, [r0, #6]
	cbuf->head = (cbuf->head + 1) % cbuf->max;
     166:	8883      	ldrh	r3, [r0, #4]
     168:	1c5a      	adds	r2, r3, #1
     16a:	8901      	ldrh	r1, [r0, #8]
     16c:	fb92 f3f1 	sdiv	r3, r2, r1
     170:	fb01 2313 	mls	r3, r1, r3, r2
     174:	b29b      	uxth	r3, r3
     176:	8083      	strh	r3, [r0, #4]
	cbuf->full = (cbuf->head == cbuf->tail);
     178:	88c2      	ldrh	r2, [r0, #6]
     17a:	429a      	cmp	r2, r3
     17c:	bf14      	ite	ne
     17e:	2300      	movne	r3, #0
     180:	2301      	moveq	r3, #1
     182:	7283      	strb	r3, [r0, #10]
     184:	4770      	bx	lr

00000186 <ring_empty>:
	return r;
}

bool ring_empty(cbuf_handle_t cbuf)
{
	return (!cbuf->full && (cbuf->head == cbuf->tail));
     186:	7a83      	ldrb	r3, [r0, #10]
     188:	b933      	cbnz	r3, 198 <ring_empty+0x12>
     18a:	8883      	ldrh	r3, [r0, #4]
     18c:	88c0      	ldrh	r0, [r0, #6]
     18e:	4283      	cmp	r3, r0
     190:	bf14      	ite	ne
     192:	2000      	movne	r0, #0
     194:	2001      	moveq	r0, #1
     196:	4770      	bx	lr
     198:	2000      	movs	r0, #0
}
     19a:	4770      	bx	lr

0000019c <ring_get>:
{
     19c:	b538      	push	{r3, r4, r5, lr}
     19e:	4604      	mov	r4, r0
     1a0:	460d      	mov	r5, r1
	if(!ring_empty(cbuf))
     1a2:	4b0a      	ldr	r3, [pc, #40]	; (1cc <ring_get+0x30>)
     1a4:	4798      	blx	r3
     1a6:	b970      	cbnz	r0, 1c6 <ring_get+0x2a>
		*data = cbuf->buffer[cbuf->tail];
     1a8:	88e2      	ldrh	r2, [r4, #6]
     1aa:	6823      	ldr	r3, [r4, #0]
     1ac:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
     1b0:	702b      	strb	r3, [r5, #0]
	cbuf->full = false;
     1b2:	72a0      	strb	r0, [r4, #10]
	cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     1b4:	88e3      	ldrh	r3, [r4, #6]
     1b6:	3301      	adds	r3, #1
     1b8:	8921      	ldrh	r1, [r4, #8]
     1ba:	fb93 f2f1 	sdiv	r2, r3, r1
     1be:	fb01 3312 	mls	r3, r1, r2, r3
     1c2:	80e3      	strh	r3, [r4, #6]
     1c4:	bd38      	pop	{r3, r4, r5, pc}
	int r = -1;
     1c6:	f04f 30ff 	mov.w	r0, #4294967295
}
     1ca:	bd38      	pop	{r3, r4, r5, pc}
     1cc:	00000187 	.word	0x00000187

000001d0 <isEmptyParser>:
int rearParam = -1;
int rearParser = -1;

bool isEmptyParser(void)
{
	if(frontParser == -1)
     1d0:	4b03      	ldr	r3, [pc, #12]	; (1e0 <isEmptyParser+0x10>)
     1d2:	6818      	ldr	r0, [r3, #0]
	{
		return true;
	}
	return false;
}
     1d4:	f1b0 3fff 	cmp.w	r0, #4294967295
     1d8:	bf14      	ite	ne
     1da:	2000      	movne	r0, #0
     1dc:	2001      	moveq	r0, #1
     1de:	4770      	bx	lr
     1e0:	20000008 	.word	0x20000008

000001e4 <dequeueParser>:
}
char dequeueParser(void)
{
	char temp;
	
	temp = queueParser[frontParser];
     1e4:	4a08      	ldr	r2, [pc, #32]	; (208 <dequeueParser+0x24>)
     1e6:	6813      	ldr	r3, [r2, #0]
     1e8:	4908      	ldr	r1, [pc, #32]	; (20c <dequeueParser+0x28>)
     1ea:	5cc8      	ldrb	r0, [r1, r3]
	frontParser++;
     1ec:	3301      	adds	r3, #1
     1ee:	6013      	str	r3, [r2, #0]
	if(frontParser > rearParser)
     1f0:	4a07      	ldr	r2, [pc, #28]	; (210 <dequeueParser+0x2c>)
     1f2:	6812      	ldr	r2, [r2, #0]
     1f4:	4293      	cmp	r3, r2
     1f6:	dd05      	ble.n	204 <dequeueParser+0x20>
	{
		frontParser = rearParser = -1;
     1f8:	f04f 33ff 	mov.w	r3, #4294967295
     1fc:	4a04      	ldr	r2, [pc, #16]	; (210 <dequeueParser+0x2c>)
     1fe:	6013      	str	r3, [r2, #0]
     200:	4a01      	ldr	r2, [pc, #4]	; (208 <dequeueParser+0x24>)
     202:	6013      	str	r3, [r2, #0]
	}
	return temp;
}
     204:	4770      	bx	lr
     206:	bf00      	nop
     208:	20000008 	.word	0x20000008
     20c:	20000300 	.word	0x20000300
     210:	20000010 	.word	0x20000010

00000214 <enqueueParser>:
void enqueueParser(char data)
{
	if(frontParser == -1)
     214:	4b07      	ldr	r3, [pc, #28]	; (234 <enqueueParser+0x20>)
     216:	681b      	ldr	r3, [r3, #0]
     218:	f1b3 3fff 	cmp.w	r3, #4294967295
     21c:	d006      	beq.n	22c <enqueueParser+0x18>
	{
		frontParser = 0;
	}
	rearParser++;
     21e:	4a06      	ldr	r2, [pc, #24]	; (238 <enqueueParser+0x24>)
     220:	6813      	ldr	r3, [r2, #0]
     222:	3301      	adds	r3, #1
     224:	6013      	str	r3, [r2, #0]
	queueParser[rearParser] = data;
     226:	4a05      	ldr	r2, [pc, #20]	; (23c <enqueueParser+0x28>)
     228:	54d0      	strb	r0, [r2, r3]
     22a:	4770      	bx	lr
		frontParser = 0;
     22c:	2200      	movs	r2, #0
     22e:	4b01      	ldr	r3, [pc, #4]	; (234 <enqueueParser+0x20>)
     230:	601a      	str	r2, [r3, #0]
     232:	e7f4      	b.n	21e <enqueueParser+0xa>
     234:	20000008 	.word	0x20000008
     238:	20000010 	.word	0x20000010
     23c:	20000300 	.word	0x20000300

00000240 <isEmptyParam>:
}
bool isEmptyParam(void)
{
	if(frontParam == -1)
     240:	4b03      	ldr	r3, [pc, #12]	; (250 <isEmptyParam+0x10>)
     242:	6818      	ldr	r0, [r3, #0]
	{
		return true;
	}
	return false;
}
     244:	f1b0 3fff 	cmp.w	r0, #4294967295
     248:	bf14      	ite	ne
     24a:	2000      	movne	r0, #0
     24c:	2001      	moveq	r0, #1
     24e:	4770      	bx	lr
     250:	20000004 	.word	0x20000004

00000254 <dequeueParam>:
}
uint8_t dequeueParam(void)
{
	uint8_t temp;
	
	temp = queueParam[frontParam];
     254:	4a08      	ldr	r2, [pc, #32]	; (278 <dequeueParam+0x24>)
     256:	6813      	ldr	r3, [r2, #0]
     258:	4908      	ldr	r1, [pc, #32]	; (27c <dequeueParam+0x28>)
     25a:	5cc8      	ldrb	r0, [r1, r3]
	frontParam++;
     25c:	3301      	adds	r3, #1
     25e:	6013      	str	r3, [r2, #0]
	if(frontParam > rearParam)
     260:	4a07      	ldr	r2, [pc, #28]	; (280 <dequeueParam+0x2c>)
     262:	6812      	ldr	r2, [r2, #0]
     264:	4293      	cmp	r3, r2
     266:	dd05      	ble.n	274 <dequeueParam+0x20>
	{
		frontParam = rearParam = -1;
     268:	f04f 33ff 	mov.w	r3, #4294967295
     26c:	4a04      	ldr	r2, [pc, #16]	; (280 <dequeueParam+0x2c>)
     26e:	6013      	str	r3, [r2, #0]
     270:	4a01      	ldr	r2, [pc, #4]	; (278 <dequeueParam+0x24>)
     272:	6013      	str	r3, [r2, #0]
	}

	return temp;
}
     274:	4770      	bx	lr
     276:	bf00      	nop
     278:	20000004 	.word	0x20000004
     27c:	20000334 	.word	0x20000334
     280:	2000000c 	.word	0x2000000c

00000284 <enqueueParam>:
void enqueueParam(uint8_t data)
{

	if(frontParam == -1)
     284:	4b07      	ldr	r3, [pc, #28]	; (2a4 <enqueueParam+0x20>)
     286:	681b      	ldr	r3, [r3, #0]
     288:	f1b3 3fff 	cmp.w	r3, #4294967295
     28c:	d006      	beq.n	29c <enqueueParam+0x18>
	{
		frontParam = 0;
	}
	rearParam++;
     28e:	4a06      	ldr	r2, [pc, #24]	; (2a8 <enqueueParam+0x24>)
     290:	6813      	ldr	r3, [r2, #0]
     292:	3301      	adds	r3, #1
     294:	6013      	str	r3, [r2, #0]
	queueParam[rearParam] = data;
     296:	4a05      	ldr	r2, [pc, #20]	; (2ac <enqueueParam+0x28>)
     298:	54d0      	strb	r0, [r2, r3]
     29a:	4770      	bx	lr
		frontParam = 0;
     29c:	2200      	movs	r2, #0
     29e:	4b01      	ldr	r3, [pc, #4]	; (2a4 <enqueueParam+0x20>)
     2a0:	601a      	str	r2, [r3, #0]
     2a2:	e7f4      	b.n	28e <enqueueParam+0xa>
     2a4:	20000004 	.word	0x20000004
     2a8:	2000000c 	.word	0x2000000c
     2ac:	20000334 	.word	0x20000334

000002b0 <clearQueues>:
}
void clearQueues(void)
{

	for(int i = 0 ; i < (MAXSIZE - 1) ; i++)
     2b0:	4b0d      	ldr	r3, [pc, #52]	; (2e8 <clearQueues+0x38>)
     2b2:	6818      	ldr	r0, [r3, #0]
     2b4:	1e43      	subs	r3, r0, #1
     2b6:	2b00      	cmp	r3, #0
     2b8:	dd0a      	ble.n	2d0 <clearQueues+0x20>
     2ba:	4b0c      	ldr	r3, [pc, #48]	; (2ec <clearQueues+0x3c>)
     2bc:	490c      	ldr	r1, [pc, #48]	; (2f0 <clearQueues+0x40>)
     2be:	4418      	add	r0, r3
     2c0:	3801      	subs	r0, #1
	{
		queueParam[i] = 0;
     2c2:	2200      	movs	r2, #0
     2c4:	f803 2f01 	strb.w	r2, [r3, #1]!
		queueParser[i] = 0;
     2c8:	f801 2f01 	strb.w	r2, [r1, #1]!
	for(int i = 0 ; i < (MAXSIZE - 1) ; i++)
     2cc:	4283      	cmp	r3, r0
     2ce:	d1f9      	bne.n	2c4 <clearQueues+0x14>
	}
	
	frontParser = -1;
     2d0:	f04f 33ff 	mov.w	r3, #4294967295
     2d4:	4a07      	ldr	r2, [pc, #28]	; (2f4 <clearQueues+0x44>)
     2d6:	6013      	str	r3, [r2, #0]
	frontParam = -1;
     2d8:	4a07      	ldr	r2, [pc, #28]	; (2f8 <clearQueues+0x48>)
     2da:	6013      	str	r3, [r2, #0]
	rearParam = -1;
     2dc:	4a07      	ldr	r2, [pc, #28]	; (2fc <clearQueues+0x4c>)
     2de:	6013      	str	r3, [r2, #0]
	rearParser = -1;
     2e0:	4a07      	ldr	r2, [pc, #28]	; (300 <clearQueues+0x50>)
     2e2:	6013      	str	r3, [r2, #0]
     2e4:	4770      	bx	lr
     2e6:	bf00      	nop
     2e8:	20000000 	.word	0x20000000
     2ec:	20000333 	.word	0x20000333
     2f0:	200002ff 	.word	0x200002ff
     2f4:	20000008 	.word	0x20000008
     2f8:	20000004 	.word	0x20000004
     2fc:	2000000c 	.word	0x2000000c
     300:	20000010 	.word	0x20000010

00000304 <queueTransmogrifier>:
}
void queueTransmogrifier(void)
{
     304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	[24],[80]
	
	It's like reimplementing atoi() but it's not an interview question.
	*/
	
	int param = 0;
     306:	2400      	movs	r4, #0
	char currentByte;
	
	while(!isEmptyParser())
     308:	4d0b      	ldr	r5, [pc, #44]	; (338 <queueTransmogrifier+0x34>)
	{
		
		currentByte = dequeueParser();		//deque from parser
     30a:	4e0c      	ldr	r6, [pc, #48]	; (33c <queueTransmogrifier+0x38>)

		if(currentByte == 0x3B || currentByte == 0x3F) //if it's ';' or '?'
		{
			enqueueParam(param);
     30c:	4f0c      	ldr	r7, [pc, #48]	; (340 <queueTransmogrifier+0x3c>)
	while(!isEmptyParser())
     30e:	e002      	b.n	316 <queueTransmogrifier+0x12>
			enqueueParam(param);
     310:	b2e0      	uxtb	r0, r4
     312:	47b8      	blx	r7
			param = 0;
     314:	2400      	movs	r4, #0
	while(!isEmptyParser())
     316:	47a8      	blx	r5
     318:	b950      	cbnz	r0, 330 <queueTransmogrifier+0x2c>
		currentByte = dequeueParser();		//deque from parser
     31a:	47b0      	blx	r6
		if(currentByte == 0x3B || currentByte == 0x3F) //if it's ';' or '?'
     31c:	f000 03fb 	and.w	r3, r0, #251	; 0xfb
     320:	2b3b      	cmp	r3, #59	; 0x3b
     322:	d0f5      	beq.n	310 <queueTransmogrifier+0xc>
		}
		else
		{
			param = (10 * param) + (int)(currentByte-48);
     324:	eb04 0484 	add.w	r4, r4, r4, lsl #2
     328:	3830      	subs	r0, #48	; 0x30
     32a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
     32e:	e7f2      	b.n	316 <queueTransmogrifier+0x12>
		}
	}
	enqueueParam(param);
     330:	b2e0      	uxtb	r0, r4
     332:	4b03      	ldr	r3, [pc, #12]	; (340 <queueTransmogrifier+0x3c>)
     334:	4798      	blx	r3
     336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     338:	000001d1 	.word	0x000001d1
     33c:	000001e5 	.word	0x000001e5
     340:	00000285 	.word	0x00000285

00000344 <CSIignoreState>:
	}
}

void CSIignoreState(uint8_t character)
{
	if(character == 0x1B)
     344:	281b      	cmp	r0, #27
     346:	d007      	beq.n	358 <CSIignoreState+0x14>
	{
		currentState = stateESC;
	}
	else if(character >= 0x40 && character <= 0x7E)
     348:	3840      	subs	r0, #64	; 0x40
     34a:	b2c0      	uxtb	r0, r0
     34c:	283e      	cmp	r0, #62	; 0x3e
     34e:	d802      	bhi.n	356 <CSIignoreState+0x12>
	{
		currentState = stateGround;
     350:	2200      	movs	r2, #0
     352:	4b03      	ldr	r3, [pc, #12]	; (360 <CSIignoreState+0x1c>)
     354:	701a      	strb	r2, [r3, #0]
     356:	4770      	bx	lr
		currentState = stateESC;
     358:	2201      	movs	r2, #1
     35a:	4b01      	ldr	r3, [pc, #4]	; (360 <CSIignoreState+0x1c>)
     35c:	701a      	strb	r2, [r3, #0]
     35e:	4770      	bx	lr
     360:	200002f1 	.word	0x200002f1

00000364 <SC>:
/************************************************************************/

void SC()
{
	//Save cursor position
	DECSCX = xCharPos;
     364:	4b05      	ldr	r3, [pc, #20]	; (37c <SC+0x18>)
     366:	881a      	ldrh	r2, [r3, #0]
     368:	4b05      	ldr	r3, [pc, #20]	; (380 <SC+0x1c>)
     36a:	701a      	strb	r2, [r3, #0]
	DECSCY = yCharPos;
     36c:	4b05      	ldr	r3, [pc, #20]	; (384 <SC+0x20>)
     36e:	881a      	ldrh	r2, [r3, #0]
     370:	4b05      	ldr	r3, [pc, #20]	; (388 <SC+0x24>)
     372:	701a      	strb	r2, [r3, #0]
	currentState = stateGround;
     374:	2200      	movs	r2, #0
     376:	4b05      	ldr	r3, [pc, #20]	; (38c <SC+0x28>)
     378:	701a      	strb	r2, [r3, #0]
     37a:	4770      	bx	lr
     37c:	200002ec 	.word	0x200002ec
     380:	20000228 	.word	0x20000228
     384:	200002ee 	.word	0x200002ee
     388:	20000229 	.word	0x20000229
     38c:	200002f1 	.word	0x200002f1

00000390 <RC>:
}

void RC()
{
     390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//Restore cursor to saved position
	
	char tempCharacter;
	
	drawChar(consoleDisplay[xCharPos][yCharPos]);
     392:	4c0f      	ldr	r4, [pc, #60]	; (3d0 <RC+0x40>)
     394:	4f0f      	ldr	r7, [pc, #60]	; (3d4 <RC+0x44>)
     396:	883b      	ldrh	r3, [r7, #0]
     398:	4e0f      	ldr	r6, [pc, #60]	; (3d8 <RC+0x48>)
     39a:	8832      	ldrh	r2, [r6, #0]
     39c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     3a0:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
     3a4:	5c98      	ldrb	r0, [r3, r2]
     3a6:	4d0d      	ldr	r5, [pc, #52]	; (3dc <RC+0x4c>)
     3a8:	47a8      	blx	r5
	xCharPos = DECSCX;
     3aa:	4b0d      	ldr	r3, [pc, #52]	; (3e0 <RC+0x50>)
     3ac:	781b      	ldrb	r3, [r3, #0]
     3ae:	803b      	strh	r3, [r7, #0]
	yCharPos = DECSCY;
     3b0:	4a0c      	ldr	r2, [pc, #48]	; (3e4 <RC+0x54>)
     3b2:	7812      	ldrb	r2, [r2, #0]
     3b4:	8032      	strh	r2, [r6, #0]
	tempCharacter = consoleDisplay[xCharPos][yCharPos];
     3b6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     3ba:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
	drawChar(tempCharacter);
     3be:	5c98      	ldrb	r0, [r3, r2]
     3c0:	47a8      	blx	r5
	blinkCursor();
     3c2:	4b09      	ldr	r3, [pc, #36]	; (3e8 <RC+0x58>)
     3c4:	4798      	blx	r3
	currentState = stateGround;
     3c6:	2200      	movs	r2, #0
     3c8:	4b08      	ldr	r3, [pc, #32]	; (3ec <RC+0x5c>)
     3ca:	701a      	strb	r2, [r3, #0]
     3cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     3ce:	bf00      	nop
     3d0:	200003f4 	.word	0x200003f4
     3d4:	200002ec 	.word	0x200002ec
     3d8:	200002ee 	.word	0x200002ee
     3dc:	0000363d 	.word	0x0000363d
     3e0:	20000228 	.word	0x20000228
     3e4:	20000229 	.word	0x20000229
     3e8:	000037ed 	.word	0x000037ed
     3ec:	200002f1 	.word	0x200002f1

000003f0 <IND>:
}

void IND()
{
     3f0:	b570      	push	{r4, r5, r6, lr}
	//performs newline() if row = 24
	
	char tempCharacter;
	int xTemp = 0;
	
	if(yCharPos < 23)
     3f2:	4b19      	ldr	r3, [pc, #100]	; (458 <IND+0x68>)
     3f4:	881b      	ldrh	r3, [r3, #0]
     3f6:	2b16      	cmp	r3, #22
     3f8:	d914      	bls.n	424 <IND+0x34>
		drawChar(tempCharacter);
		blinkCursor();
	}
	else
	{
		xTemp = xCharPos;
     3fa:	4d18      	ldr	r5, [pc, #96]	; (45c <IND+0x6c>)
     3fc:	882c      	ldrh	r4, [r5, #0]
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     3fe:	eb04 0144 	add.w	r1, r4, r4, lsl #1
     402:	4a17      	ldr	r2, [pc, #92]	; (460 <IND+0x70>)
     404:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
     408:	5cd0      	ldrb	r0, [r2, r3]
     40a:	4e16      	ldr	r6, [pc, #88]	; (464 <IND+0x74>)
     40c:	47b0      	blx	r6
		newLine();
     40e:	4b16      	ldr	r3, [pc, #88]	; (468 <IND+0x78>)
     410:	4798      	blx	r3
		drawChar(0x00);
     412:	2000      	movs	r0, #0
     414:	47b0      	blx	r6
		xCharPos = xTemp;
     416:	802c      	strh	r4, [r5, #0]
		blinkCursor();
     418:	4b14      	ldr	r3, [pc, #80]	; (46c <IND+0x7c>)
     41a:	4798      	blx	r3
	}
		
		currentState = stateGround;	
     41c:	2200      	movs	r2, #0
     41e:	4b14      	ldr	r3, [pc, #80]	; (470 <IND+0x80>)
     420:	701a      	strb	r2, [r3, #0]
     422:	bd70      	pop	{r4, r5, r6, pc}
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     424:	4c0e      	ldr	r4, [pc, #56]	; (460 <IND+0x70>)
     426:	4d0d      	ldr	r5, [pc, #52]	; (45c <IND+0x6c>)
     428:	882a      	ldrh	r2, [r5, #0]
     42a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
     42e:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
     432:	5cd0      	ldrb	r0, [r2, r3]
     434:	4e0b      	ldr	r6, [pc, #44]	; (464 <IND+0x74>)
     436:	47b0      	blx	r6
		yCharPos++;
     438:	4a07      	ldr	r2, [pc, #28]	; (458 <IND+0x68>)
     43a:	8813      	ldrh	r3, [r2, #0]
     43c:	3301      	adds	r3, #1
     43e:	b29b      	uxth	r3, r3
     440:	8013      	strh	r3, [r2, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     442:	882a      	ldrh	r2, [r5, #0]
     444:	eb02 0242 	add.w	r2, r2, r2, lsl #1
     448:	eb04 04c2 	add.w	r4, r4, r2, lsl #3
		drawChar(tempCharacter);
     44c:	5ce0      	ldrb	r0, [r4, r3]
     44e:	47b0      	blx	r6
		blinkCursor();
     450:	4b06      	ldr	r3, [pc, #24]	; (46c <IND+0x7c>)
     452:	4798      	blx	r3
     454:	e7e2      	b.n	41c <IND+0x2c>
     456:	bf00      	nop
     458:	200002ee 	.word	0x200002ee
     45c:	200002ec 	.word	0x200002ec
     460:	200003f4 	.word	0x200003f4
     464:	0000363d 	.word	0x0000363d
     468:	000039ad 	.word	0x000039ad
     46c:	000037ed 	.word	0x000037ed
     470:	200002f1 	.word	0x200002f1

00000474 <NEL>:
}

void NEL()
{
     474:	b570      	push	{r4, r5, r6, lr}
	//new line, moves down one line and to the
	//first column (CR,LF) scrolls if row = 24
	
	char tempCharacter;
	
	if(yCharPos < 23)
     476:	4b18      	ldr	r3, [pc, #96]	; (4d8 <NEL+0x64>)
     478:	881a      	ldrh	r2, [r3, #0]
     47a:	2a16      	cmp	r2, #22
     47c:	d915      	bls.n	4aa <NEL+0x36>
		drawChar(tempCharacter);
		blinkCursor();
	}
	else
	{
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     47e:	4c17      	ldr	r4, [pc, #92]	; (4dc <NEL+0x68>)
     480:	8823      	ldrh	r3, [r4, #0]
     482:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     486:	4916      	ldr	r1, [pc, #88]	; (4e0 <NEL+0x6c>)
     488:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
     48c:	5c98      	ldrb	r0, [r3, r2]
     48e:	4d15      	ldr	r5, [pc, #84]	; (4e4 <NEL+0x70>)
     490:	47a8      	blx	r5
		newLine();
     492:	4b15      	ldr	r3, [pc, #84]	; (4e8 <NEL+0x74>)
     494:	4798      	blx	r3
		drawChar(0x00);
     496:	2000      	movs	r0, #0
     498:	47a8      	blx	r5
		xCharPos = 0;
     49a:	2300      	movs	r3, #0
     49c:	8023      	strh	r3, [r4, #0]
		blinkCursor();
     49e:	4b13      	ldr	r3, [pc, #76]	; (4ec <NEL+0x78>)
     4a0:	4798      	blx	r3
	}
		
	currentState = stateGround;
     4a2:	2200      	movs	r2, #0
     4a4:	4b12      	ldr	r3, [pc, #72]	; (4f0 <NEL+0x7c>)
     4a6:	701a      	strb	r2, [r3, #0]
     4a8:	bd70      	pop	{r4, r5, r6, pc}
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     4aa:	4c0d      	ldr	r4, [pc, #52]	; (4e0 <NEL+0x6c>)
     4ac:	4d0b      	ldr	r5, [pc, #44]	; (4dc <NEL+0x68>)
     4ae:	882b      	ldrh	r3, [r5, #0]
     4b0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     4b4:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
     4b8:	5c98      	ldrb	r0, [r3, r2]
     4ba:	4e0a      	ldr	r6, [pc, #40]	; (4e4 <NEL+0x70>)
     4bc:	47b0      	blx	r6
		yCharPos++;
     4be:	4a06      	ldr	r2, [pc, #24]	; (4d8 <NEL+0x64>)
     4c0:	8813      	ldrh	r3, [r2, #0]
     4c2:	3301      	adds	r3, #1
     4c4:	b29b      	uxth	r3, r3
     4c6:	8013      	strh	r3, [r2, #0]
		xCharPos = 0;
     4c8:	2200      	movs	r2, #0
     4ca:	802a      	strh	r2, [r5, #0]
		drawChar(tempCharacter);
     4cc:	5ce0      	ldrb	r0, [r4, r3]
     4ce:	47b0      	blx	r6
		blinkCursor();
     4d0:	4b06      	ldr	r3, [pc, #24]	; (4ec <NEL+0x78>)
     4d2:	4798      	blx	r3
     4d4:	e7e5      	b.n	4a2 <NEL+0x2e>
     4d6:	bf00      	nop
     4d8:	200002ee 	.word	0x200002ee
     4dc:	200002ec 	.word	0x200002ec
     4e0:	200003f4 	.word	0x200003f4
     4e4:	0000363d 	.word	0x0000363d
     4e8:	000039ad 	.word	0x000039ad
     4ec:	000037ed 	.word	0x000037ed
     4f0:	200002f1 	.word	0x200002f1

000004f4 <RI>:
	//Reverse Index
	//Moves the cursor to the same horizontal position on the preceding line
	
	char tempCharacter;
	
	if(yCharPos == 0)
     4f4:	4b11      	ldr	r3, [pc, #68]	; (53c <RI+0x48>)
     4f6:	881a      	ldrh	r2, [r3, #0]
     4f8:	b91a      	cbnz	r2, 502 <RI+0xe>
		yCharPos--;
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
		drawChar(tempCharacter);
		blinkCursor();
	}
	currentState = stateGround;
     4fa:	2200      	movs	r2, #0
     4fc:	4b10      	ldr	r3, [pc, #64]	; (540 <RI+0x4c>)
     4fe:	701a      	strb	r2, [r3, #0]
     500:	4770      	bx	lr
{
     502:	b570      	push	{r4, r5, r6, lr}
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     504:	4c0f      	ldr	r4, [pc, #60]	; (544 <RI+0x50>)
     506:	4d10      	ldr	r5, [pc, #64]	; (548 <RI+0x54>)
     508:	882b      	ldrh	r3, [r5, #0]
     50a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     50e:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
     512:	5c98      	ldrb	r0, [r3, r2]
     514:	4e0d      	ldr	r6, [pc, #52]	; (54c <RI+0x58>)
     516:	47b0      	blx	r6
		yCharPos--;
     518:	4a08      	ldr	r2, [pc, #32]	; (53c <RI+0x48>)
     51a:	8813      	ldrh	r3, [r2, #0]
     51c:	3b01      	subs	r3, #1
     51e:	b29b      	uxth	r3, r3
     520:	8013      	strh	r3, [r2, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     522:	882a      	ldrh	r2, [r5, #0]
     524:	eb02 0242 	add.w	r2, r2, r2, lsl #1
     528:	eb04 04c2 	add.w	r4, r4, r2, lsl #3
		drawChar(tempCharacter);
     52c:	5ce0      	ldrb	r0, [r4, r3]
     52e:	47b0      	blx	r6
		blinkCursor();
     530:	4b07      	ldr	r3, [pc, #28]	; (550 <RI+0x5c>)
     532:	4798      	blx	r3
	currentState = stateGround;
     534:	2200      	movs	r2, #0
     536:	4b02      	ldr	r3, [pc, #8]	; (540 <RI+0x4c>)
     538:	701a      	strb	r2, [r3, #0]
     53a:	bd70      	pop	{r4, r5, r6, pc}
     53c:	200002ee 	.word	0x200002ee
     540:	200002f1 	.word	0x200002f1
     544:	200003f4 	.word	0x200003f4
     548:	200002ec 	.word	0x200002ec
     54c:	0000363d 	.word	0x0000363d
     550:	000037ed 	.word	0x000037ed

00000554 <RIS>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     554:	f3bf 8f4f 	dsb	sy
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
     558:	4a03      	ldr	r2, [pc, #12]	; (568 <RIS+0x14>)
     55a:	4b04      	ldr	r3, [pc, #16]	; (56c <RIS+0x18>)
     55c:	60da      	str	r2, [r3, #12]
     55e:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     562:	bf00      	nop
     564:	e7fd      	b.n	562 <RIS+0xe>
     566:	bf00      	nop
     568:	05fa0004 	.word	0x05fa0004
     56c:	e000ed00 	.word	0xe000ed00

00000570 <escState>:
{
     570:	b508      	push	{r3, lr}
	if(character == 0x37)		//ESC + 7 - (DECSC) -
     572:	2837      	cmp	r0, #55	; 0x37
     574:	d024      	beq.n	5c0 <escState+0x50>
	else if(character == 0x38)		//ESC + 8 - (DECRC) -
     576:	2838      	cmp	r0, #56	; 0x38
     578:	d025      	beq.n	5c6 <escState+0x56>
	else if(character == 0x44)		//ESC + D - (IND) - 
     57a:	2844      	cmp	r0, #68	; 0x44
     57c:	d026      	beq.n	5cc <escState+0x5c>
	else if(character == 0x45)		//ESC + E - (NEL) -
     57e:	2845      	cmp	r0, #69	; 0x45
     580:	d027      	beq.n	5d2 <escState+0x62>
	else if(character == 0x48)		//ESC + H - (HTS) - 
     582:	2848      	cmp	r0, #72	; 0x48
     584:	d028      	beq.n	5d8 <escState+0x68>
	else if(character == 0x4D)		//ESC + M - (RI)
     586:	284d      	cmp	r0, #77	; 0x4d
     588:	d02a      	beq.n	5e0 <escState+0x70>
	else if(character == 0x59)		//ESC + Z (DECID)
     58a:	2859      	cmp	r0, #89	; 0x59
     58c:	d02b      	beq.n	5e6 <escState+0x76>
	else if(character == 0x63)		//ESC + c - (RIS)
     58e:	2863      	cmp	r0, #99	; 0x63
     590:	d031      	beq.n	5f6 <escState+0x86>
	else if(character == 0x3E)		//ESC >
     592:	283e      	cmp	r0, #62	; 0x3e
     594:	d031      	beq.n	5fa <escState+0x8a>
	else if(character == 0x3D)		//ESC =
     596:	283d      	cmp	r0, #61	; 0x3d
     598:	d033      	beq.n	602 <escState+0x92>
	else if(character == 0x5D)		//ESC ]
     59a:	285d      	cmp	r0, #93	; 0x5d
     59c:	d035      	beq.n	60a <escState+0x9a>
	else if(character == 0x23 || character == 0x25 || character == 0x28 ||
     59e:	f1a0 0323 	sub.w	r3, r0, #35	; 0x23
     5a2:	b2db      	uxtb	r3, r3
     5a4:	2b06      	cmp	r3, #6
     5a6:	d805      	bhi.n	5b4 <escState+0x44>
     5a8:	2265      	movs	r2, #101	; 0x65
     5aa:	fa22 f303 	lsr.w	r3, r2, r3
     5ae:	f013 0f01 	tst.w	r3, #1
     5b2:	d12e      	bne.n	612 <escState+0xa2>
	else if(character == 0x5B)
     5b4:	285b      	cmp	r0, #91	; 0x5b
     5b6:	d032      	beq.n	61e <escState+0xae>
		currentState = stateGround;
     5b8:	2200      	movs	r2, #0
     5ba:	4b1b      	ldr	r3, [pc, #108]	; (628 <escState+0xb8>)
     5bc:	701a      	strb	r2, [r3, #0]
     5be:	bd08      	pop	{r3, pc}
		SC();
     5c0:	4b1a      	ldr	r3, [pc, #104]	; (62c <escState+0xbc>)
     5c2:	4798      	blx	r3
     5c4:	bd08      	pop	{r3, pc}
		RC();
     5c6:	4b1a      	ldr	r3, [pc, #104]	; (630 <escState+0xc0>)
     5c8:	4798      	blx	r3
     5ca:	bd08      	pop	{r3, pc}
		IND();			
     5cc:	4b19      	ldr	r3, [pc, #100]	; (634 <escState+0xc4>)
     5ce:	4798      	blx	r3
     5d0:	bd08      	pop	{r3, pc}
		NEL();
     5d2:	4b19      	ldr	r3, [pc, #100]	; (638 <escState+0xc8>)
     5d4:	4798      	blx	r3
     5d6:	bd08      	pop	{r3, pc}
}

void HTS()
{
	//set tab stop at current column, unsupported now
	currentState = stateGround;
     5d8:	2200      	movs	r2, #0
     5da:	4b13      	ldr	r3, [pc, #76]	; (628 <escState+0xb8>)
     5dc:	701a      	strb	r2, [r3, #0]
     5de:	bd08      	pop	{r3, pc}
		RI();
     5e0:	4b16      	ldr	r3, [pc, #88]	; (63c <escState+0xcc>)
     5e2:	4798      	blx	r3
     5e4:	bd08      	pop	{r3, pc}
		printf("%s",DECIDreturn);
     5e6:	4916      	ldr	r1, [pc, #88]	; (640 <escState+0xd0>)
     5e8:	4816      	ldr	r0, [pc, #88]	; (644 <escState+0xd4>)
     5ea:	4b17      	ldr	r3, [pc, #92]	; (648 <escState+0xd8>)
     5ec:	4798      	blx	r3
		currentState = stateGround;
     5ee:	2200      	movs	r2, #0
     5f0:	4b0d      	ldr	r3, [pc, #52]	; (628 <escState+0xb8>)
     5f2:	701a      	strb	r2, [r3, #0]
     5f4:	bd08      	pop	{r3, pc}
		RIS();
     5f6:	4b15      	ldr	r3, [pc, #84]	; (64c <escState+0xdc>)
     5f8:	4798      	blx	r3
		currentState = stateGround;
     5fa:	2200      	movs	r2, #0
     5fc:	4b0a      	ldr	r3, [pc, #40]	; (628 <escState+0xb8>)
     5fe:	701a      	strb	r2, [r3, #0]
     600:	bd08      	pop	{r3, pc}
		currentState = stateGround;
     602:	2200      	movs	r2, #0
     604:	4b08      	ldr	r3, [pc, #32]	; (628 <escState+0xb8>)
     606:	701a      	strb	r2, [r3, #0]
     608:	bd08      	pop	{r3, pc}
		currentState = stateGround;
     60a:	2200      	movs	r2, #0
     60c:	4b06      	ldr	r3, [pc, #24]	; (628 <escState+0xb8>)
     60e:	701a      	strb	r2, [r3, #0]
     610:	bd08      	pop	{r3, pc}
		stateEnterBuffer = character;
     612:	4b0f      	ldr	r3, [pc, #60]	; (650 <escState+0xe0>)
     614:	7018      	strb	r0, [r3, #0]
		currentState = stateESCinter;
     616:	2202      	movs	r2, #2
     618:	4b03      	ldr	r3, [pc, #12]	; (628 <escState+0xb8>)
     61a:	701a      	strb	r2, [r3, #0]
     61c:	bd08      	pop	{r3, pc}
		currentState = stateCSIentry;
     61e:	2203      	movs	r2, #3
     620:	4b01      	ldr	r3, [pc, #4]	; (628 <escState+0xb8>)
     622:	701a      	strb	r2, [r3, #0]
     624:	bd08      	pop	{r3, pc}
     626:	bf00      	nop
     628:	200002f1 	.word	0x200002f1
     62c:	00000365 	.word	0x00000365
     630:	00000391 	.word	0x00000391
     634:	000003f1 	.word	0x000003f1
     638:	00000475 	.word	0x00000475
     63c:	000004f5 	.word	0x000004f5
     640:	00006028 	.word	0x00006028
     644:	0000605c 	.word	0x0000605c
     648:	00004c39 	.word	0x00004c39
     64c:	00000555 	.word	0x00000555
     650:	20000376 	.word	0x20000376

00000654 <CUU>:

/************************************************************************/
/*    CSI mnemonic functions                                            */
/************************************************************************/
void CUU() // Cursor Up*
{
     654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	unsigned char tempCharacter;
	uint8_t parameter = 0;
	
	if(isEmptyParam())
     656:	4b1f      	ldr	r3, [pc, #124]	; (6d4 <CUU+0x80>)
     658:	4798      	blx	r3
     65a:	b1f0      	cbz	r0, 69a <CUU+0x46>
	{
		parameter = 1;
     65c:	2401      	movs	r4, #1
		{
			parameter = 1;
		}
	}
	
	if((yCharPos - parameter) >= 0 && (yCharPos - parameter) <= 24)
     65e:	4b1e      	ldr	r3, [pc, #120]	; (6d8 <CUU+0x84>)
     660:	881a      	ldrh	r2, [r3, #0]
     662:	1b13      	subs	r3, r2, r4
     664:	2b18      	cmp	r3, #24
     666:	d91e      	bls.n	6a6 <CUU+0x52>
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
		drawChar(tempCharacter);
	}
	else
	{
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     668:	4d1c      	ldr	r5, [pc, #112]	; (6dc <CUU+0x88>)
     66a:	4e1d      	ldr	r6, [pc, #116]	; (6e0 <CUU+0x8c>)
     66c:	8833      	ldrh	r3, [r6, #0]
     66e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     672:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
     676:	5c98      	ldrb	r0, [r3, r2]
     678:	4c1a      	ldr	r4, [pc, #104]	; (6e4 <CUU+0x90>)
     67a:	47a0      	blx	r4
		yCharPos = 0;
     67c:	2200      	movs	r2, #0
     67e:	4b16      	ldr	r3, [pc, #88]	; (6d8 <CUU+0x84>)
     680:	801a      	strh	r2, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     682:	8833      	ldrh	r3, [r6, #0]
     684:	eb03 0343 	add.w	r3, r3, r3, lsl #1
		drawChar(tempCharacter);
     688:	f815 0033 	ldrb.w	r0, [r5, r3, lsl #3]
     68c:	47a0      	blx	r4
	}
	
	blinkCursor();
     68e:	4b16      	ldr	r3, [pc, #88]	; (6e8 <CUU+0x94>)
     690:	4798      	blx	r3
	currentState = stateGround;
     692:	2200      	movs	r2, #0
     694:	4b15      	ldr	r3, [pc, #84]	; (6ec <CUU+0x98>)
     696:	701a      	strb	r2, [r3, #0]
     698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		parameter = dequeueParam();
     69a:	4b15      	ldr	r3, [pc, #84]	; (6f0 <CUU+0x9c>)
     69c:	4798      	blx	r3
		if(parameter == 0)
     69e:	1e04      	subs	r4, r0, #0
			parameter = 1;
     6a0:	bf08      	it	eq
     6a2:	2401      	moveq	r4, #1
     6a4:	e7db      	b.n	65e <CUU+0xa>
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     6a6:	4d0d      	ldr	r5, [pc, #52]	; (6dc <CUU+0x88>)
     6a8:	4e0d      	ldr	r6, [pc, #52]	; (6e0 <CUU+0x8c>)
     6aa:	8833      	ldrh	r3, [r6, #0]
     6ac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     6b0:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
     6b4:	5c98      	ldrb	r0, [r3, r2]
     6b6:	4f0b      	ldr	r7, [pc, #44]	; (6e4 <CUU+0x90>)
     6b8:	47b8      	blx	r7
		yCharPos = yCharPos - parameter;
     6ba:	4a07      	ldr	r2, [pc, #28]	; (6d8 <CUU+0x84>)
     6bc:	8813      	ldrh	r3, [r2, #0]
     6be:	1b1c      	subs	r4, r3, r4
     6c0:	b2a4      	uxth	r4, r4
     6c2:	8014      	strh	r4, [r2, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     6c4:	8833      	ldrh	r3, [r6, #0]
     6c6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     6ca:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
		drawChar(tempCharacter);
     6ce:	5d28      	ldrb	r0, [r5, r4]
     6d0:	47b8      	blx	r7
     6d2:	e7dc      	b.n	68e <CUU+0x3a>
     6d4:	00000241 	.word	0x00000241
     6d8:	200002ee 	.word	0x200002ee
     6dc:	200003f4 	.word	0x200003f4
     6e0:	200002ec 	.word	0x200002ec
     6e4:	0000363d 	.word	0x0000363d
     6e8:	000037ed 	.word	0x000037ed
     6ec:	200002f1 	.word	0x200002f1
     6f0:	00000255 	.word	0x00000255

000006f4 <CUD>:
}

void CUD() //Cursor Down *
{
     6f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	unsigned char tempCharacter;
	uint8_t parameter = 0;
	
	if(isEmptyParam())
     6f6:	4b20      	ldr	r3, [pc, #128]	; (778 <CUD+0x84>)
     6f8:	4798      	blx	r3
     6fa:	b1f8      	cbz	r0, 73c <CUD+0x48>
	{
		parameter = 1;
     6fc:	2401      	movs	r4, #1
		if(parameter == 0)
		{
			parameter = 1;
		}
	}
	if((yCharPos + parameter) <= 23)
     6fe:	4b1f      	ldr	r3, [pc, #124]	; (77c <CUD+0x88>)
     700:	881a      	ldrh	r2, [r3, #0]
     702:	18a3      	adds	r3, r4, r2
     704:	2b17      	cmp	r3, #23
     706:	dd1f      	ble.n	748 <CUD+0x54>
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
		drawChar(tempCharacter);
	}
	else
	{
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     708:	4c1d      	ldr	r4, [pc, #116]	; (780 <CUD+0x8c>)
     70a:	4e1e      	ldr	r6, [pc, #120]	; (784 <CUD+0x90>)
     70c:	8833      	ldrh	r3, [r6, #0]
     70e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     712:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
     716:	5c98      	ldrb	r0, [r3, r2]
     718:	4d1b      	ldr	r5, [pc, #108]	; (788 <CUD+0x94>)
     71a:	47a8      	blx	r5
		yCharPos = 23;
     71c:	2217      	movs	r2, #23
     71e:	4b17      	ldr	r3, [pc, #92]	; (77c <CUD+0x88>)
     720:	801a      	strh	r2, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     722:	8833      	ldrh	r3, [r6, #0]
     724:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     728:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
		drawChar(tempCharacter);
     72c:	7de0      	ldrb	r0, [r4, #23]
     72e:	47a8      	blx	r5
	}

	blinkCursor();
     730:	4b16      	ldr	r3, [pc, #88]	; (78c <CUD+0x98>)
     732:	4798      	blx	r3
	currentState = stateGround;
     734:	2200      	movs	r2, #0
     736:	4b16      	ldr	r3, [pc, #88]	; (790 <CUD+0x9c>)
     738:	701a      	strb	r2, [r3, #0]
     73a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		parameter = dequeueParam();
     73c:	4b15      	ldr	r3, [pc, #84]	; (794 <CUD+0xa0>)
     73e:	4798      	blx	r3
		if(parameter == 0)
     740:	1e04      	subs	r4, r0, #0
			parameter = 1;
     742:	bf08      	it	eq
     744:	2401      	moveq	r4, #1
     746:	e7da      	b.n	6fe <CUD+0xa>
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     748:	4d0d      	ldr	r5, [pc, #52]	; (780 <CUD+0x8c>)
     74a:	4e0e      	ldr	r6, [pc, #56]	; (784 <CUD+0x90>)
     74c:	8833      	ldrh	r3, [r6, #0]
     74e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     752:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
     756:	5c98      	ldrb	r0, [r3, r2]
     758:	4f0b      	ldr	r7, [pc, #44]	; (788 <CUD+0x94>)
     75a:	47b8      	blx	r7
		yCharPos = yCharPos + parameter;
     75c:	4b07      	ldr	r3, [pc, #28]	; (77c <CUD+0x88>)
     75e:	881a      	ldrh	r2, [r3, #0]
     760:	4414      	add	r4, r2
     762:	b2a4      	uxth	r4, r4
     764:	801c      	strh	r4, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     766:	8833      	ldrh	r3, [r6, #0]
     768:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     76c:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
		drawChar(tempCharacter);
     770:	5d28      	ldrb	r0, [r5, r4]
     772:	47b8      	blx	r7
     774:	e7dc      	b.n	730 <CUD+0x3c>
     776:	bf00      	nop
     778:	00000241 	.word	0x00000241
     77c:	200002ee 	.word	0x200002ee
     780:	200003f4 	.word	0x200003f4
     784:	200002ec 	.word	0x200002ec
     788:	0000363d 	.word	0x0000363d
     78c:	000037ed 	.word	0x000037ed
     790:	200002f1 	.word	0x200002f1
     794:	00000255 	.word	0x00000255

00000798 <CUF>:
}

void CUF() //Cursor Forward *
{
     798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	unsigned char tempCharacter;
	uint8_t parameter = 0;
	
	if(isEmptyParam())
     79a:	4b1f      	ldr	r3, [pc, #124]	; (818 <CUF+0x80>)
     79c:	4798      	blx	r3
     79e:	b1e8      	cbz	r0, 7dc <CUF+0x44>
	{
		parameter = 1;
     7a0:	2401      	movs	r4, #1
		{
			parameter = 1;
		}
	}
	
	if(xCharPos + parameter <= 79)
     7a2:	4b1e      	ldr	r3, [pc, #120]	; (81c <CUF+0x84>)
     7a4:	881b      	ldrh	r3, [r3, #0]
     7a6:	18e2      	adds	r2, r4, r3
     7a8:	2a4f      	cmp	r2, #79	; 0x4f
     7aa:	dd1d      	ble.n	7e8 <CUF+0x50>
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
		drawChar(tempCharacter);
	}
	else
	{
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     7ac:	4c1c      	ldr	r4, [pc, #112]	; (820 <CUF+0x88>)
     7ae:	4e1d      	ldr	r6, [pc, #116]	; (824 <CUF+0x8c>)
     7b0:	8832      	ldrh	r2, [r6, #0]
     7b2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     7b6:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
     7ba:	5c98      	ldrb	r0, [r3, r2]
     7bc:	4d1a      	ldr	r5, [pc, #104]	; (828 <CUF+0x90>)
     7be:	47a8      	blx	r5
		xCharPos = 79;
     7c0:	224f      	movs	r2, #79	; 0x4f
     7c2:	4b16      	ldr	r3, [pc, #88]	; (81c <CUF+0x84>)
     7c4:	801a      	strh	r2, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     7c6:	8833      	ldrh	r3, [r6, #0]
     7c8:	441c      	add	r4, r3
		drawChar(tempCharacter);	
     7ca:	f894 0768 	ldrb.w	r0, [r4, #1896]	; 0x768
     7ce:	47a8      	blx	r5
	}
	blinkCursor();
     7d0:	4b16      	ldr	r3, [pc, #88]	; (82c <CUF+0x94>)
     7d2:	4798      	blx	r3
	currentState = stateGround;
     7d4:	2200      	movs	r2, #0
     7d6:	4b16      	ldr	r3, [pc, #88]	; (830 <CUF+0x98>)
     7d8:	701a      	strb	r2, [r3, #0]
     7da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		parameter = dequeueParam();
     7dc:	4b15      	ldr	r3, [pc, #84]	; (834 <CUF+0x9c>)
     7de:	4798      	blx	r3
		if(parameter == 0)
     7e0:	1e04      	subs	r4, r0, #0
			parameter = 1;
     7e2:	bf08      	it	eq
     7e4:	2401      	moveq	r4, #1
     7e6:	e7dc      	b.n	7a2 <CUF+0xa>
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     7e8:	4d0d      	ldr	r5, [pc, #52]	; (820 <CUF+0x88>)
     7ea:	4e0e      	ldr	r6, [pc, #56]	; (824 <CUF+0x8c>)
     7ec:	8832      	ldrh	r2, [r6, #0]
     7ee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     7f2:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
     7f6:	5c98      	ldrb	r0, [r3, r2]
     7f8:	4f0b      	ldr	r7, [pc, #44]	; (828 <CUF+0x90>)
     7fa:	47b8      	blx	r7
		xCharPos = xCharPos + parameter;
     7fc:	4b07      	ldr	r3, [pc, #28]	; (81c <CUF+0x84>)
     7fe:	881a      	ldrh	r2, [r3, #0]
     800:	4414      	add	r4, r2
     802:	b2a4      	uxth	r4, r4
     804:	801c      	strh	r4, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     806:	8833      	ldrh	r3, [r6, #0]
     808:	eb04 0444 	add.w	r4, r4, r4, lsl #1
     80c:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
		drawChar(tempCharacter);
     810:	5ce0      	ldrb	r0, [r4, r3]
     812:	47b8      	blx	r7
     814:	e7dc      	b.n	7d0 <CUF+0x38>
     816:	bf00      	nop
     818:	00000241 	.word	0x00000241
     81c:	200002ec 	.word	0x200002ec
     820:	200003f4 	.word	0x200003f4
     824:	200002ee 	.word	0x200002ee
     828:	0000363d 	.word	0x0000363d
     82c:	000037ed 	.word	0x000037ed
     830:	200002f1 	.word	0x200002f1
     834:	00000255 	.word	0x00000255

00000838 <CUB>:
}

void CUB() //Cursor Backward *
{
     838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	unsigned char tempCharacter;
	uint8_t parameter = 0;
	
	if(isEmptyParam())
     83a:	4b1e      	ldr	r3, [pc, #120]	; (8b4 <CUB+0x7c>)
     83c:	4798      	blx	r3
     83e:	b308      	cbz	r0, 884 <CUB+0x4c>
	{
		parameter = 1;
     840:	2601      	movs	r6, #1
		{
			parameter = 1;
		}
	}
	
	if(xCharPos - parameter >= 0)
     842:	4b1d      	ldr	r3, [pc, #116]	; (8b8 <CUB+0x80>)
     844:	881b      	ldrh	r3, [r3, #0]
     846:	1b9a      	subs	r2, r3, r6
     848:	2a00      	cmp	r2, #0
     84a:	db21      	blt.n	890 <CUB+0x58>
	{
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     84c:	4c1b      	ldr	r4, [pc, #108]	; (8bc <CUB+0x84>)
     84e:	4d1c      	ldr	r5, [pc, #112]	; (8c0 <CUB+0x88>)
     850:	882a      	ldrh	r2, [r5, #0]
     852:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     856:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
     85a:	5c98      	ldrb	r0, [r3, r2]
     85c:	4f19      	ldr	r7, [pc, #100]	; (8c4 <CUB+0x8c>)
     85e:	47b8      	blx	r7
		xCharPos = xCharPos - parameter;
     860:	4b15      	ldr	r3, [pc, #84]	; (8b8 <CUB+0x80>)
     862:	8818      	ldrh	r0, [r3, #0]
     864:	1b80      	subs	r0, r0, r6
     866:	b280      	uxth	r0, r0
     868:	8018      	strh	r0, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     86a:	882b      	ldrh	r3, [r5, #0]
     86c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
     870:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
		drawChar(tempCharacter);
     874:	5cc0      	ldrb	r0, [r0, r3]
     876:	47b8      	blx	r7
		drawChar(consoleDisplay[xCharPos][yCharPos]);
		xCharPos = 0;
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
		drawChar(tempCharacter);
	}
	blinkCursor();
     878:	4b13      	ldr	r3, [pc, #76]	; (8c8 <CUB+0x90>)
     87a:	4798      	blx	r3
	currentState = stateGround;
     87c:	2200      	movs	r2, #0
     87e:	4b13      	ldr	r3, [pc, #76]	; (8cc <CUB+0x94>)
     880:	701a      	strb	r2, [r3, #0]
     882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		parameter = dequeueParam();
     884:	4b12      	ldr	r3, [pc, #72]	; (8d0 <CUB+0x98>)
     886:	4798      	blx	r3
		if(parameter == 0)
     888:	1e06      	subs	r6, r0, #0
			parameter = 1;
     88a:	bf08      	it	eq
     88c:	2601      	moveq	r6, #1
     88e:	e7d8      	b.n	842 <CUB+0xa>
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     890:	4d0a      	ldr	r5, [pc, #40]	; (8bc <CUB+0x84>)
     892:	4e0b      	ldr	r6, [pc, #44]	; (8c0 <CUB+0x88>)
     894:	8832      	ldrh	r2, [r6, #0]
     896:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     89a:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
     89e:	5c98      	ldrb	r0, [r3, r2]
     8a0:	4c08      	ldr	r4, [pc, #32]	; (8c4 <CUB+0x8c>)
     8a2:	47a0      	blx	r4
		xCharPos = 0;
     8a4:	2200      	movs	r2, #0
     8a6:	4b04      	ldr	r3, [pc, #16]	; (8b8 <CUB+0x80>)
     8a8:	801a      	strh	r2, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     8aa:	8833      	ldrh	r3, [r6, #0]
		drawChar(tempCharacter);
     8ac:	5ce8      	ldrb	r0, [r5, r3]
     8ae:	47a0      	blx	r4
     8b0:	e7e2      	b.n	878 <CUB+0x40>
     8b2:	bf00      	nop
     8b4:	00000241 	.word	0x00000241
     8b8:	200002ec 	.word	0x200002ec
     8bc:	200003f4 	.word	0x200003f4
     8c0:	200002ee 	.word	0x200002ee
     8c4:	0000363d 	.word	0x0000363d
     8c8:	000037ed 	.word	0x000037ed
     8cc:	200002f1 	.word	0x200002f1
     8d0:	00000255 	.word	0x00000255

000008d4 <CNL>:
}

void CNL() //Cursor Next Line *
{
     8d4:	b570      	push	{r4, r5, r6, lr}
	unsigned char tempCharacter;
	uint8_t parameter = 0;
	
	if(isEmptyParam())
     8d6:	4b1c      	ldr	r3, [pc, #112]	; (948 <CNL+0x74>)
     8d8:	4798      	blx	r3
     8da:	b1e8      	cbz	r0, 918 <CNL+0x44>
	{
		parameter = 1;
     8dc:	2401      	movs	r4, #1
		{
			parameter = 1;
		}
	}
	
	xCharPos = 0;
     8de:	2200      	movs	r2, #0
     8e0:	4b1a      	ldr	r3, [pc, #104]	; (94c <CNL+0x78>)
     8e2:	801a      	strh	r2, [r3, #0]
	
	if((yCharPos + parameter) <= 23)
     8e4:	4b1a      	ldr	r3, [pc, #104]	; (950 <CNL+0x7c>)
     8e6:	881b      	ldrh	r3, [r3, #0]
     8e8:	18e2      	adds	r2, r4, r3
     8ea:	2a17      	cmp	r2, #23
     8ec:	dd1a      	ble.n	924 <CNL+0x50>
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
		drawChar(tempCharacter);
	}
	else
	{
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     8ee:	4c19      	ldr	r4, [pc, #100]	; (954 <CNL+0x80>)
     8f0:	5ce0      	ldrb	r0, [r4, r3]
     8f2:	4d19      	ldr	r5, [pc, #100]	; (958 <CNL+0x84>)
     8f4:	47a8      	blx	r5
		yCharPos = 23;
     8f6:	2217      	movs	r2, #23
     8f8:	4b15      	ldr	r3, [pc, #84]	; (950 <CNL+0x7c>)
     8fa:	801a      	strh	r2, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     8fc:	4b13      	ldr	r3, [pc, #76]	; (94c <CNL+0x78>)
     8fe:	881b      	ldrh	r3, [r3, #0]
     900:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     904:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
		drawChar(tempCharacter);
     908:	7de0      	ldrb	r0, [r4, #23]
     90a:	47a8      	blx	r5
	}

	blinkCursor();
     90c:	4b13      	ldr	r3, [pc, #76]	; (95c <CNL+0x88>)
     90e:	4798      	blx	r3
	currentState = stateGround;	
     910:	2200      	movs	r2, #0
     912:	4b13      	ldr	r3, [pc, #76]	; (960 <CNL+0x8c>)
     914:	701a      	strb	r2, [r3, #0]
     916:	bd70      	pop	{r4, r5, r6, pc}
		parameter = dequeueParam();
     918:	4b12      	ldr	r3, [pc, #72]	; (964 <CNL+0x90>)
     91a:	4798      	blx	r3
		if(parameter == 0)
     91c:	1e04      	subs	r4, r0, #0
			parameter = 1;
     91e:	bf08      	it	eq
     920:	2401      	moveq	r4, #1
     922:	e7dc      	b.n	8de <CNL+0xa>
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     924:	4d0b      	ldr	r5, [pc, #44]	; (954 <CNL+0x80>)
     926:	5ce8      	ldrb	r0, [r5, r3]
     928:	4e0b      	ldr	r6, [pc, #44]	; (958 <CNL+0x84>)
     92a:	47b0      	blx	r6
		yCharPos = yCharPos + parameter;
     92c:	4b08      	ldr	r3, [pc, #32]	; (950 <CNL+0x7c>)
     92e:	881a      	ldrh	r2, [r3, #0]
     930:	4414      	add	r4, r2
     932:	b2a4      	uxth	r4, r4
     934:	801c      	strh	r4, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     936:	4b05      	ldr	r3, [pc, #20]	; (94c <CNL+0x78>)
     938:	881b      	ldrh	r3, [r3, #0]
     93a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     93e:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
		drawChar(tempCharacter);
     942:	5d28      	ldrb	r0, [r5, r4]
     944:	47b0      	blx	r6
     946:	e7e1      	b.n	90c <CNL+0x38>
     948:	00000241 	.word	0x00000241
     94c:	200002ec 	.word	0x200002ec
     950:	200002ee 	.word	0x200002ee
     954:	200003f4 	.word	0x200003f4
     958:	0000363d 	.word	0x0000363d
     95c:	000037ed 	.word	0x000037ed
     960:	200002f1 	.word	0x200002f1
     964:	00000255 	.word	0x00000255

00000968 <CPL>:
}

void CPL() //Cursor Preceding Line *
{
     968:	b570      	push	{r4, r5, r6, lr}
	unsigned char tempCharacter;
	uint8_t parameter = 0;
	
	if(isEmptyParam())
     96a:	4b1c      	ldr	r3, [pc, #112]	; (9dc <CPL+0x74>)
     96c:	4798      	blx	r3
     96e:	b1e0      	cbz	r0, 9aa <CPL+0x42>
	{
		parameter = 1;
     970:	2401      	movs	r4, #1
		{
			parameter = 1;
		}
	}
	
	xCharPos = 0;
     972:	2200      	movs	r2, #0
     974:	4b1a      	ldr	r3, [pc, #104]	; (9e0 <CPL+0x78>)
     976:	801a      	strh	r2, [r3, #0]
	
	if((yCharPos - parameter) >= 0 && (yCharPos - parameter) <= 24)
     978:	4b1a      	ldr	r3, [pc, #104]	; (9e4 <CPL+0x7c>)
     97a:	881b      	ldrh	r3, [r3, #0]
     97c:	1b1a      	subs	r2, r3, r4
     97e:	2a18      	cmp	r2, #24
     980:	d919      	bls.n	9b6 <CPL+0x4e>
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
		drawChar(tempCharacter);
	}
	else
	{
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     982:	4d19      	ldr	r5, [pc, #100]	; (9e8 <CPL+0x80>)
     984:	5ce8      	ldrb	r0, [r5, r3]
     986:	4c19      	ldr	r4, [pc, #100]	; (9ec <CPL+0x84>)
     988:	47a0      	blx	r4
		yCharPos = 0;
     98a:	2200      	movs	r2, #0
     98c:	4b15      	ldr	r3, [pc, #84]	; (9e4 <CPL+0x7c>)
     98e:	801a      	strh	r2, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     990:	4b13      	ldr	r3, [pc, #76]	; (9e0 <CPL+0x78>)
     992:	881b      	ldrh	r3, [r3, #0]
     994:	eb03 0343 	add.w	r3, r3, r3, lsl #1
		drawChar(tempCharacter);
     998:	f815 0033 	ldrb.w	r0, [r5, r3, lsl #3]
     99c:	47a0      	blx	r4
	}
	
	blinkCursor();
     99e:	4b14      	ldr	r3, [pc, #80]	; (9f0 <CPL+0x88>)
     9a0:	4798      	blx	r3
	currentState = stateGround;
     9a2:	2200      	movs	r2, #0
     9a4:	4b13      	ldr	r3, [pc, #76]	; (9f4 <CPL+0x8c>)
     9a6:	701a      	strb	r2, [r3, #0]
     9a8:	bd70      	pop	{r4, r5, r6, pc}
		parameter = dequeueParam();
     9aa:	4b13      	ldr	r3, [pc, #76]	; (9f8 <CPL+0x90>)
     9ac:	4798      	blx	r3
		if(parameter == 0)
     9ae:	1e04      	subs	r4, r0, #0
			parameter = 1;
     9b0:	bf08      	it	eq
     9b2:	2401      	moveq	r4, #1
     9b4:	e7dd      	b.n	972 <CPL+0xa>
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     9b6:	4d0c      	ldr	r5, [pc, #48]	; (9e8 <CPL+0x80>)
     9b8:	5ce8      	ldrb	r0, [r5, r3]
     9ba:	4e0c      	ldr	r6, [pc, #48]	; (9ec <CPL+0x84>)
     9bc:	47b0      	blx	r6
		yCharPos = yCharPos - parameter;
     9be:	4a09      	ldr	r2, [pc, #36]	; (9e4 <CPL+0x7c>)
     9c0:	8813      	ldrh	r3, [r2, #0]
     9c2:	1b1c      	subs	r4, r3, r4
     9c4:	b2a4      	uxth	r4, r4
     9c6:	8014      	strh	r4, [r2, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     9c8:	4b05      	ldr	r3, [pc, #20]	; (9e0 <CPL+0x78>)
     9ca:	881b      	ldrh	r3, [r3, #0]
     9cc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     9d0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
		drawChar(tempCharacter);
     9d4:	5d28      	ldrb	r0, [r5, r4]
     9d6:	47b0      	blx	r6
     9d8:	e7e1      	b.n	99e <CPL+0x36>
     9da:	bf00      	nop
     9dc:	00000241 	.word	0x00000241
     9e0:	200002ec 	.word	0x200002ec
     9e4:	200002ee 	.word	0x200002ee
     9e8:	200003f4 	.word	0x200003f4
     9ec:	0000363d 	.word	0x0000363d
     9f0:	000037ed 	.word	0x000037ed
     9f4:	200002f1 	.word	0x200002f1
     9f8:	00000255 	.word	0x00000255

000009fc <CHA>:
	
}

void CHA() //Cursor Horizontal Absolute *
{
     9fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	unsigned char tempCharacter;
	uint8_t parameter = 0;
	
	if(isEmptyParam())
     a00:	4b16      	ldr	r3, [pc, #88]	; (a5c <CHA+0x60>)
     a02:	4798      	blx	r3
     a04:	b1f0      	cbz	r0, a44 <CHA+0x48>
	{
		parameter = 1;
     a06:	2401      	movs	r4, #1
		{
			parameter = 79;
		}
	}
	
	drawChar(consoleDisplay[xCharPos][yCharPos]);
     a08:	4d15      	ldr	r5, [pc, #84]	; (a60 <CHA+0x64>)
     a0a:	f8df 806c 	ldr.w	r8, [pc, #108]	; a78 <CHA+0x7c>
     a0e:	f8b8 3000 	ldrh.w	r3, [r8]
     a12:	4f14      	ldr	r7, [pc, #80]	; (a64 <CHA+0x68>)
     a14:	883a      	ldrh	r2, [r7, #0]
     a16:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     a1a:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
     a1e:	5c98      	ldrb	r0, [r3, r2]
     a20:	4e11      	ldr	r6, [pc, #68]	; (a68 <CHA+0x6c>)
     a22:	47b0      	blx	r6
	xCharPos = parameter;
     a24:	f8a8 4000 	strh.w	r4, [r8]
	tempCharacter = consoleDisplay[xCharPos][yCharPos];
     a28:	883b      	ldrh	r3, [r7, #0]
     a2a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
     a2e:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
	drawChar(tempCharacter);
     a32:	5ce0      	ldrb	r0, [r4, r3]
     a34:	47b0      	blx	r6
	
	blinkCursor();
     a36:	4b0d      	ldr	r3, [pc, #52]	; (a6c <CHA+0x70>)
     a38:	4798      	blx	r3
	currentState = stateGround;
     a3a:	2200      	movs	r2, #0
     a3c:	4b0c      	ldr	r3, [pc, #48]	; (a70 <CHA+0x74>)
     a3e:	701a      	strb	r2, [r3, #0]
     a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		parameter = dequeueParam();
     a44:	4b0b      	ldr	r3, [pc, #44]	; (a74 <CHA+0x78>)
     a46:	4798      	blx	r3
		if(parameter > 0)
     a48:	4604      	mov	r4, r0
     a4a:	b108      	cbz	r0, a50 <CHA+0x54>
			parameter--;  //need to decrement, because display is indexed at 0,0.
     a4c:	1e44      	subs	r4, r0, #1
     a4e:	b2e4      	uxtb	r4, r4
     a50:	2c4f      	cmp	r4, #79	; 0x4f
     a52:	bf28      	it	cs
     a54:	244f      	movcs	r4, #79	; 0x4f
     a56:	b2e4      	uxtb	r4, r4
     a58:	e7d6      	b.n	a08 <CHA+0xc>
     a5a:	bf00      	nop
     a5c:	00000241 	.word	0x00000241
     a60:	200003f4 	.word	0x200003f4
     a64:	200002ee 	.word	0x200002ee
     a68:	0000363d 	.word	0x0000363d
     a6c:	000037ed 	.word	0x000037ed
     a70:	200002f1 	.word	0x200002f1
     a74:	00000255 	.word	0x00000255
     a78:	200002ec 	.word	0x200002ec

00000a7c <CUP>:
}

void CUP() //Cursor Position *
{
     a7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	unsigned char tempCharacter;
	uint8_t parameter = 0;
	uint8_t xTemp = 0;
	uint8_t yTemp = 0;
	
	if(isEmptyParam())
     a80:	4b1e      	ldr	r3, [pc, #120]	; (afc <CUP+0x80>)
     a82:	4798      	blx	r3
     a84:	b318      	cbz	r0, ace <CUP+0x52>
	{
		parameter = 0;
     a86:	2400      	movs	r4, #0
		}
	}
	
	xTemp = parameter;

	if(isEmptyParam())
     a88:	4b1c      	ldr	r3, [pc, #112]	; (afc <CUP+0x80>)
     a8a:	4798      	blx	r3
     a8c:	b350      	cbz	r0, ae4 <CUP+0x68>
	{
		parameter = 0;
     a8e:	2500      	movs	r5, #0
		}
	}
	
	yTemp = parameter;
	
	drawChar(consoleDisplay[xCharPos][yCharPos]);
     a90:	4e1b      	ldr	r6, [pc, #108]	; (b00 <CUP+0x84>)
     a92:	f8df 8080 	ldr.w	r8, [pc, #128]	; b14 <CUP+0x98>
     a96:	f8b8 3000 	ldrh.w	r3, [r8]
     a9a:	4f1a      	ldr	r7, [pc, #104]	; (b04 <CUP+0x88>)
     a9c:	883a      	ldrh	r2, [r7, #0]
     a9e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     aa2:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
     aa6:	5c98      	ldrb	r0, [r3, r2]
     aa8:	f8df 906c 	ldr.w	r9, [pc, #108]	; b18 <CUP+0x9c>
     aac:	47c8      	blx	r9
	xCharPos = xTemp;
     aae:	f8a8 4000 	strh.w	r4, [r8]
	yCharPos = yTemp;
     ab2:	803d      	strh	r5, [r7, #0]
	tempCharacter = consoleDisplay[xCharPos][yCharPos];
     ab4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
     ab8:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
	drawChar(tempCharacter);
     abc:	5d60      	ldrb	r0, [r4, r5]
     abe:	47c8      	blx	r9
	
	blinkCursor();
     ac0:	4b11      	ldr	r3, [pc, #68]	; (b08 <CUP+0x8c>)
     ac2:	4798      	blx	r3
	currentState = stateGround;
     ac4:	2200      	movs	r2, #0
     ac6:	4b11      	ldr	r3, [pc, #68]	; (b0c <CUP+0x90>)
     ac8:	701a      	strb	r2, [r3, #0]
     aca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		parameter = dequeueParam();
     ace:	4b10      	ldr	r3, [pc, #64]	; (b10 <CUP+0x94>)
     ad0:	4798      	blx	r3
		if(parameter > 0)
     ad2:	4604      	mov	r4, r0
     ad4:	b108      	cbz	r0, ada <CUP+0x5e>
			parameter--;  //need to decrement, because display is indexed at 0,0.
     ad6:	1e44      	subs	r4, r0, #1
     ad8:	b2e4      	uxtb	r4, r4
     ada:	2c4f      	cmp	r4, #79	; 0x4f
     adc:	bf28      	it	cs
     ade:	244f      	movcs	r4, #79	; 0x4f
     ae0:	b2e4      	uxtb	r4, r4
     ae2:	e7d1      	b.n	a88 <CUP+0xc>
		parameter = dequeueParam();
     ae4:	4b0a      	ldr	r3, [pc, #40]	; (b10 <CUP+0x94>)
     ae6:	4798      	blx	r3
		if(parameter > 0)
     ae8:	4605      	mov	r5, r0
     aea:	b108      	cbz	r0, af0 <CUP+0x74>
			parameter--;  //need to decrement, because display is indexed at 0,0.
     aec:	1e45      	subs	r5, r0, #1
     aee:	b2ed      	uxtb	r5, r5
     af0:	2d17      	cmp	r5, #23
     af2:	bf28      	it	cs
     af4:	2517      	movcs	r5, #23
     af6:	b2ed      	uxtb	r5, r5
     af8:	e7ca      	b.n	a90 <CUP+0x14>
     afa:	bf00      	nop
     afc:	00000241 	.word	0x00000241
     b00:	200003f4 	.word	0x200003f4
     b04:	200002ee 	.word	0x200002ee
     b08:	000037ed 	.word	0x000037ed
     b0c:	200002f1 	.word	0x200002f1
     b10:	00000255 	.word	0x00000255
     b14:	200002ec 	.word	0x200002ec
     b18:	0000363d 	.word	0x0000363d

00000b1c <ED>:
	//do this later
	currentState = stateGround;
}

void ED() //Edit In Display *
{
     b1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t parameter;
	
	uint8_t xTemp = xCharPos;
     b20:	4b3f      	ldr	r3, [pc, #252]	; (c20 <ED+0x104>)
     b22:	f8b3 9000 	ldrh.w	r9, [r3]
	uint8_t yTemp = yCharPos;
     b26:	4b3f      	ldr	r3, [pc, #252]	; (c24 <ED+0x108>)
     b28:	f8b3 8000 	ldrh.w	r8, [r3]
	
	cursorBlinkState = false;  //need to turn the blinking off; ugly kludge
     b2c:	2200      	movs	r2, #0
     b2e:	4b3e      	ldr	r3, [pc, #248]	; (c28 <ED+0x10c>)
     b30:	701a      	strb	r2, [r3, #0]
	
	if(isEmptyParam())
     b32:	4b3e      	ldr	r3, [pc, #248]	; (c2c <ED+0x110>)
     b34:	4798      	blx	r3
     b36:	b188      	cbz	r0, b5c <ED+0x40>
			{
				xCharPos = i;
				drawChar(0x00);
			}
			//second step, erase previous lines
			for(int j = 0 ; j < yTemp ; j++)
     b38:	2500      	movs	r5, #0
		case 2:			//Erases entire display
			for(int j = 0 ; j < 24 ; j++)
			{
				for(int i = 0 ; i < 80 ; i++)
				{
					xCharPos = i;
     b3a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; c20 <ED+0x104>
					yCharPos = j;
     b3e:	4f39      	ldr	r7, [pc, #228]	; (c24 <ED+0x108>)
					drawChar(0x00);
     b40:	4e3b      	ldr	r6, [pc, #236]	; (c30 <ED+0x114>)
			for(int j = 0 ; j < yTemp ; j++)
     b42:	2400      	movs	r4, #0
					xCharPos = i;
     b44:	f8aa 4000 	strh.w	r4, [sl]
					yCharPos = j;
     b48:	803d      	strh	r5, [r7, #0]
					drawChar(0x00);
     b4a:	2000      	movs	r0, #0
     b4c:	47b0      	blx	r6
				for(int i = 0 ; i < 80 ; i++)
     b4e:	3401      	adds	r4, #1
     b50:	2c50      	cmp	r4, #80	; 0x50
     b52:	d1f7      	bne.n	b44 <ED+0x28>
			for(int j = 0 ; j < 24 ; j++)
     b54:	3501      	adds	r5, #1
     b56:	2d18      	cmp	r5, #24
     b58:	d1f3      	bne.n	b42 <ED+0x26>
     b5a:	e04c      	b.n	bf6 <ED+0xda>
	uint8_t xTemp = xCharPos;
     b5c:	fa5f f689 	uxtb.w	r6, r9
	uint8_t yTemp = yCharPos;
     b60:	fa5f f588 	uxtb.w	r5, r8
		parameter = dequeueParam();
     b64:	4b33      	ldr	r3, [pc, #204]	; (c34 <ED+0x118>)
     b66:	4798      	blx	r3
	switch(parameter)
     b68:	2801      	cmp	r0, #1
     b6a:	d003      	beq.n	b74 <ED+0x58>
     b6c:	b310      	cbz	r0, bb4 <ED+0x98>
     b6e:	2802      	cmp	r0, #2
     b70:	d141      	bne.n	bf6 <ED+0xda>
     b72:	e7e1      	b.n	b38 <ED+0x1c>
			for(int i = 0 ;  i <= xTemp ;  i++)
     b74:	2400      	movs	r4, #0
				xCharPos = i;
     b76:	f8df b0a8 	ldr.w	fp, [pc, #168]	; c20 <ED+0x104>
				drawChar(0x00);
     b7a:	46a2      	mov	sl, r4
     b7c:	4f2c      	ldr	r7, [pc, #176]	; (c30 <ED+0x114>)
				xCharPos = i;
     b7e:	f8ab 4000 	strh.w	r4, [fp]
				drawChar(0x00);
     b82:	4650      	mov	r0, sl
     b84:	47b8      	blx	r7
			for(int i = 0 ;  i <= xTemp ;  i++)
     b86:	3401      	adds	r4, #1
     b88:	42b4      	cmp	r4, r6
     b8a:	ddf8      	ble.n	b7e <ED+0x62>
			for(int j = 0 ; j < yTemp ; j++)
     b8c:	46aa      	mov	sl, r5
     b8e:	b395      	cbz	r5, bf6 <ED+0xda>
     b90:	2500      	movs	r5, #0
					xCharPos = i;
     b92:	f8df b08c 	ldr.w	fp, [pc, #140]	; c20 <ED+0x104>
					yCharPos = j;
     b96:	4f23      	ldr	r7, [pc, #140]	; (c24 <ED+0x108>)
					drawChar(0x00);
     b98:	4e25      	ldr	r6, [pc, #148]	; (c30 <ED+0x114>)
			for(int i = 0 ;  i <= xTemp ;  i++)
     b9a:	2400      	movs	r4, #0
					xCharPos = i;
     b9c:	f8ab 4000 	strh.w	r4, [fp]
					yCharPos = j;
     ba0:	803d      	strh	r5, [r7, #0]
					drawChar(0x00);
     ba2:	2000      	movs	r0, #0
     ba4:	47b0      	blx	r6
				for(int i = 0 ; i < 80 ; i++)
     ba6:	3401      	adds	r4, #1
     ba8:	2c50      	cmp	r4, #80	; 0x50
     baa:	d1f7      	bne.n	b9c <ED+0x80>
			for(int j = 0 ; j < yTemp ; j++)
     bac:	3501      	adds	r5, #1
     bae:	4555      	cmp	r5, sl
     bb0:	dbf3      	blt.n	b9a <ED+0x7e>
     bb2:	e020      	b.n	bf6 <ED+0xda>
			for(int i = xTemp ;  i <= 78 ;  i++)
     bb4:	4634      	mov	r4, r6
     bb6:	2e4e      	cmp	r6, #78	; 0x4e
     bb8:	dc0a      	bgt.n	bd0 <ED+0xb4>
				xCharPos = i;
     bba:	f8df a064 	ldr.w	sl, [pc, #100]	; c20 <ED+0x104>
				drawChar(0x00);
     bbe:	2700      	movs	r7, #0
     bc0:	4e1b      	ldr	r6, [pc, #108]	; (c30 <ED+0x114>)
				xCharPos = i;
     bc2:	f8aa 4000 	strh.w	r4, [sl]
				drawChar(0x00);
     bc6:	4638      	mov	r0, r7
     bc8:	47b0      	blx	r6
			for(int i = xTemp ;  i <= 78 ;  i++)
     bca:	3401      	adds	r4, #1
     bcc:	2c4f      	cmp	r4, #79	; 0x4f
     bce:	d1f8      	bne.n	bc2 <ED+0xa6>
			for(int j = yTemp+1 ; j < 24 ; j++)
     bd0:	3501      	adds	r5, #1
     bd2:	2d17      	cmp	r5, #23
     bd4:	dc0f      	bgt.n	bf6 <ED+0xda>
					xCharPos = i;
     bd6:	f8df a048 	ldr.w	sl, [pc, #72]	; c20 <ED+0x104>
					yCharPos = j;
     bda:	4f12      	ldr	r7, [pc, #72]	; (c24 <ED+0x108>)
					drawChar(0x00);
     bdc:	4e14      	ldr	r6, [pc, #80]	; (c30 <ED+0x114>)
{
     bde:	2400      	movs	r4, #0
					xCharPos = i;
     be0:	f8aa 4000 	strh.w	r4, [sl]
					yCharPos = j;
     be4:	803d      	strh	r5, [r7, #0]
					drawChar(0x00);
     be6:	2000      	movs	r0, #0
     be8:	47b0      	blx	r6
				for(int i = 0 ; i < 80 ; i++)
     bea:	3401      	adds	r4, #1
     bec:	2c50      	cmp	r4, #80	; 0x50
     bee:	d1f7      	bne.n	be0 <ED+0xc4>
			for(int j = yTemp+1 ; j < 24 ; j++)
     bf0:	3501      	adds	r5, #1
     bf2:	2d18      	cmp	r5, #24
     bf4:	d1f3      	bne.n	bde <ED+0xc2>
				}
			}
		break;
	}
	
	blinkCursor();
     bf6:	4b10      	ldr	r3, [pc, #64]	; (c38 <ED+0x11c>)
     bf8:	4798      	blx	r3
	xCharPos = xTemp;
     bfa:	fa5f f989 	uxtb.w	r9, r9
     bfe:	4b08      	ldr	r3, [pc, #32]	; (c20 <ED+0x104>)
     c00:	f8a3 9000 	strh.w	r9, [r3]
	yCharPos = yTemp;
     c04:	fa5f f888 	uxtb.w	r8, r8
     c08:	4b06      	ldr	r3, [pc, #24]	; (c24 <ED+0x108>)
     c0a:	f8a3 8000 	strh.w	r8, [r3]
	drawChar(0x00);
     c0e:	2000      	movs	r0, #0
     c10:	4b07      	ldr	r3, [pc, #28]	; (c30 <ED+0x114>)
     c12:	4798      	blx	r3
	
	currentState = stateGround;	
     c14:	2200      	movs	r2, #0
     c16:	4b09      	ldr	r3, [pc, #36]	; (c3c <ED+0x120>)
     c18:	701a      	strb	r2, [r3, #0]
     c1a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     c1e:	bf00      	nop
     c20:	200002ec 	.word	0x200002ec
     c24:	200002ee 	.word	0x200002ee
     c28:	20000028 	.word	0x20000028
     c2c:	00000241 	.word	0x00000241
     c30:	0000363d 	.word	0x0000363d
     c34:	00000255 	.word	0x00000255
     c38:	000037ed 	.word	0x000037ed
     c3c:	200002f1 	.word	0x200002f1

00000c40 <EL>:


}

void EL() //Edit In Line *
{
     c40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	unsigned char tempCharacter;
	uint8_t parameter;
	
	uint8_t xTemp = xCharPos;
     c44:	4b32      	ldr	r3, [pc, #200]	; (d10 <EL+0xd0>)
     c46:	f8b3 8000 	ldrh.w	r8, [r3]
     c4a:	fa5f fb88 	uxtb.w	fp, r8
	uint8_t yTemp = yCharPos;
     c4e:	4b31      	ldr	r3, [pc, #196]	; (d14 <EL+0xd4>)
     c50:	f8b3 9000 	ldrh.w	r9, [r3]
	
	cursorBlinkState = false;  //need to turn the blinking off; ugly kludge
     c54:	2200      	movs	r2, #0
     c56:	4b30      	ldr	r3, [pc, #192]	; (d18 <EL+0xd8>)
     c58:	701a      	strb	r2, [r3, #0]
	
	if(isEmptyParam())
     c5a:	4b30      	ldr	r3, [pc, #192]	; (d1c <EL+0xdc>)
     c5c:	4798      	blx	r3
     c5e:	b1c0      	cbz	r0, c92 <EL+0x52>
	else
	{
		parameter = dequeueParam();
	}
	
	tempCharacter = consoleDisplay[xCharPos][yCharPos];
     c60:	4b2b      	ldr	r3, [pc, #172]	; (d10 <EL+0xd0>)
     c62:	881b      	ldrh	r3, [r3, #0]
     c64:	4a2b      	ldr	r2, [pc, #172]	; (d14 <EL+0xd4>)
     c66:	8811      	ldrh	r1, [r2, #0]
     c68:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     c6c:	4a2c      	ldr	r2, [pc, #176]	; (d20 <EL+0xe0>)
     c6e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
     c72:	f813 a001 	ldrb.w	sl, [r3, r1]
	
	switch(parameter)
	{
		case 0:			//Erases from cursor to end of line
			for(int i = xTemp ;  i <= 79 ;  i++)
     c76:	465c      	mov	r4, fp
     c78:	f1bb 0f4f 	cmp.w	fp, #79	; 0x4f
     c7c:	dc26      	bgt.n	ccc <EL+0x8c>
			{
				xCharPos = i;
     c7e:	4f24      	ldr	r7, [pc, #144]	; (d10 <EL+0xd0>)
				drawChar(0x00);
     c80:	2600      	movs	r6, #0
     c82:	4d28      	ldr	r5, [pc, #160]	; (d24 <EL+0xe4>)
				xCharPos = i;
     c84:	803c      	strh	r4, [r7, #0]
				drawChar(0x00);
     c86:	4630      	mov	r0, r6
     c88:	47a8      	blx	r5
			for(int i = xTemp ;  i <= 79 ;  i++)
     c8a:	3401      	adds	r4, #1
     c8c:	2c50      	cmp	r4, #80	; 0x50
     c8e:	d1f9      	bne.n	c84 <EL+0x44>
     c90:	e01c      	b.n	ccc <EL+0x8c>
		parameter = dequeueParam();
     c92:	4b25      	ldr	r3, [pc, #148]	; (d28 <EL+0xe8>)
     c94:	4798      	blx	r3
	tempCharacter = consoleDisplay[xCharPos][yCharPos];
     c96:	4b1e      	ldr	r3, [pc, #120]	; (d10 <EL+0xd0>)
     c98:	881b      	ldrh	r3, [r3, #0]
     c9a:	4a1e      	ldr	r2, [pc, #120]	; (d14 <EL+0xd4>)
     c9c:	8811      	ldrh	r1, [r2, #0]
     c9e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     ca2:	4a1f      	ldr	r2, [pc, #124]	; (d20 <EL+0xe0>)
     ca4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
     ca8:	f813 a001 	ldrb.w	sl, [r3, r1]
	switch(parameter)
     cac:	2801      	cmp	r0, #1
     cae:	d021      	beq.n	cf4 <EL+0xb4>
     cb0:	2800      	cmp	r0, #0
     cb2:	d0e0      	beq.n	c76 <EL+0x36>
     cb4:	2802      	cmp	r0, #2
     cb6:	d109      	bne.n	ccc <EL+0x8c>
     cb8:	2400      	movs	r4, #0
			break;
		
		case 2:			//Erases entire line containing cursor
			for(int i = 0 ;  i <= 78 ;  i++)
			{
				xCharPos = i;
     cba:	4f15      	ldr	r7, [pc, #84]	; (d10 <EL+0xd0>)
				drawChar(0x00);
     cbc:	4626      	mov	r6, r4
     cbe:	4d19      	ldr	r5, [pc, #100]	; (d24 <EL+0xe4>)
				xCharPos = i;
     cc0:	803c      	strh	r4, [r7, #0]
				drawChar(0x00);
     cc2:	4630      	mov	r0, r6
     cc4:	47a8      	blx	r5
			for(int i = 0 ;  i <= 78 ;  i++)
     cc6:	3401      	adds	r4, #1
     cc8:	2c4f      	cmp	r4, #79	; 0x4f
     cca:	d1f9      	bne.n	cc0 <EL+0x80>
			}
			break;
	}
	
	blinkCursor();
     ccc:	4b17      	ldr	r3, [pc, #92]	; (d2c <EL+0xec>)
     cce:	4798      	blx	r3
	xCharPos = xTemp;
     cd0:	fa5f f888 	uxtb.w	r8, r8
     cd4:	4b0e      	ldr	r3, [pc, #56]	; (d10 <EL+0xd0>)
     cd6:	f8a3 8000 	strh.w	r8, [r3]
	yCharPos = yTemp;
     cda:	fa5f f989 	uxtb.w	r9, r9
     cde:	4b0d      	ldr	r3, [pc, #52]	; (d14 <EL+0xd4>)
     ce0:	f8a3 9000 	strh.w	r9, [r3]
	drawChar(tempCharacter);
     ce4:	4650      	mov	r0, sl
     ce6:	4b0f      	ldr	r3, [pc, #60]	; (d24 <EL+0xe4>)
     ce8:	4798      	blx	r3
	
	currentState = stateGround;	
     cea:	2200      	movs	r2, #0
     cec:	4b10      	ldr	r3, [pc, #64]	; (d30 <EL+0xf0>)
     cee:	701a      	strb	r2, [r3, #0]
}
     cf0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			for(int i = 0 ;  i <= xTemp+1 ;  i++)
     cf4:	f10b 0b01 	add.w	fp, fp, #1
     cf8:	2400      	movs	r4, #0
				xCharPos = i;
     cfa:	4d05      	ldr	r5, [pc, #20]	; (d10 <EL+0xd0>)
				drawChar(0x00);
     cfc:	4627      	mov	r7, r4
     cfe:	4e09      	ldr	r6, [pc, #36]	; (d24 <EL+0xe4>)
				xCharPos = i;
     d00:	802c      	strh	r4, [r5, #0]
				drawChar(0x00);
     d02:	4638      	mov	r0, r7
     d04:	47b0      	blx	r6
			for(int i = 0 ;  i <= xTemp+1 ;  i++)
     d06:	3401      	adds	r4, #1
     d08:	455c      	cmp	r4, fp
     d0a:	ddf9      	ble.n	d00 <EL+0xc0>
     d0c:	e7de      	b.n	ccc <EL+0x8c>
     d0e:	bf00      	nop
     d10:	200002ec 	.word	0x200002ec
     d14:	200002ee 	.word	0x200002ee
     d18:	20000028 	.word	0x20000028
     d1c:	00000241 	.word	0x00000241
     d20:	200003f4 	.word	0x200003f4
     d24:	0000363d 	.word	0x0000363d
     d28:	00000255 	.word	0x00000255
     d2c:	000037ed 	.word	0x000037ed
     d30:	200002f1 	.word	0x200002f1

00000d34 <SGR>:

void SGR() //Select Graphic Rendition *
{
     d34:	b5f0      	push	{r4, r5, r6, r7, lr}
     d36:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
	
	uint16_t eightBitColor[256] = 
     d3a:	f44f 7200 	mov.w	r2, #512	; 0x200
     d3e:	49af      	ldr	r1, [pc, #700]	; (ffc <SGR+0x2c8>)
     d40:	4668      	mov	r0, sp
     d42:	4baf      	ldr	r3, [pc, #700]	; (1000 <SGR+0x2cc>)
     d44:	4798      	blx	r3
		0x5ACB,0x630C,0x632C,0x73AE,0x8410,0x8C51,0x94B2,0x9CF3,0xAD55,0xB596,
		0xBDF7,0xC638,0xD69A,0xDEDB,0xE73C,0xEF7D
	};
	
	uint8_t parameter;	
	cursorBlinkState = false;  //need to turn the blinking off; ugly kludge
     d46:	2200      	movs	r2, #0
     d48:	4bae      	ldr	r3, [pc, #696]	; (1004 <SGR+0x2d0>)
     d4a:	701a      	strb	r2, [r3, #0]
	uint8_t r = 0;
	uint8_t g = 0;
	uint8_t b = 0;	
	
	if(isEmptyParam())
     d4c:	4bae      	ldr	r3, [pc, #696]	; (1008 <SGR+0x2d4>)
     d4e:	4798      	blx	r3
     d50:	b910      	cbnz	r0, d58 <SGR+0x24>
		textBackground = defaultBackgroundColor;
							
	}
	else
	{
		while(!isEmptyParam())
     d52:	4dad      	ldr	r5, [pc, #692]	; (1008 <SGR+0x2d4>)
		{
			parameter = dequeueParam();
     d54:	4cad      	ldr	r4, [pc, #692]	; (100c <SGR+0x2d8>)
     d56:	e029      	b.n	dac <SGR+0x78>
		textBold = false;
     d58:	2300      	movs	r3, #0
     d5a:	4aad      	ldr	r2, [pc, #692]	; (1010 <SGR+0x2dc>)
     d5c:	7013      	strb	r3, [r2, #0]
		textUnderscore = false;
     d5e:	4aad      	ldr	r2, [pc, #692]	; (1014 <SGR+0x2e0>)
     d60:	7013      	strb	r3, [r2, #0]
		textBlink = false;
     d62:	4aad      	ldr	r2, [pc, #692]	; (1018 <SGR+0x2e4>)
     d64:	7013      	strb	r3, [r2, #0]
		textReverseVideo = false;
     d66:	4aad      	ldr	r2, [pc, #692]	; (101c <SGR+0x2e8>)
     d68:	7013      	strb	r3, [r2, #0]
		textForeground = defaultForegroundColor;
     d6a:	4bad      	ldr	r3, [pc, #692]	; (1020 <SGR+0x2ec>)
     d6c:	881a      	ldrh	r2, [r3, #0]
     d6e:	4bad      	ldr	r3, [pc, #692]	; (1024 <SGR+0x2f0>)
     d70:	801a      	strh	r2, [r3, #0]
		textBackground = defaultBackgroundColor;
     d72:	4bad      	ldr	r3, [pc, #692]	; (1028 <SGR+0x2f4>)
     d74:	881a      	ldrh	r2, [r3, #0]
     d76:	4bad      	ldr	r3, [pc, #692]	; (102c <SGR+0x2f8>)
     d78:	801a      	strh	r2, [r3, #0]
				
			}
		}	
	}
	
	blinkCursor();
     d7a:	4bad      	ldr	r3, [pc, #692]	; (1030 <SGR+0x2fc>)
     d7c:	4798      	blx	r3
	currentState = stateGround;
     d7e:	2200      	movs	r2, #0
     d80:	4bac      	ldr	r3, [pc, #688]	; (1034 <SGR+0x300>)
     d82:	701a      	strb	r2, [r3, #0]
}
     d84:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
     d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
					textBold = false;
     d8a:	2300      	movs	r3, #0
     d8c:	4aa0      	ldr	r2, [pc, #640]	; (1010 <SGR+0x2dc>)
     d8e:	7013      	strb	r3, [r2, #0]
					textUnderscore = false;
     d90:	4aa0      	ldr	r2, [pc, #640]	; (1014 <SGR+0x2e0>)
     d92:	7013      	strb	r3, [r2, #0]
					textBlink = false;
     d94:	4aa0      	ldr	r2, [pc, #640]	; (1018 <SGR+0x2e4>)
     d96:	7013      	strb	r3, [r2, #0]
					textReverseVideo = false;
     d98:	4aa0      	ldr	r2, [pc, #640]	; (101c <SGR+0x2e8>)
     d9a:	7013      	strb	r3, [r2, #0]
					textForeground = defaultForegroundColor;
     d9c:	4ba0      	ldr	r3, [pc, #640]	; (1020 <SGR+0x2ec>)
     d9e:	881a      	ldrh	r2, [r3, #0]
     da0:	4ba0      	ldr	r3, [pc, #640]	; (1024 <SGR+0x2f0>)
     da2:	801a      	strh	r2, [r3, #0]
					textBackground = defaultBackgroundColor;
     da4:	4ba0      	ldr	r3, [pc, #640]	; (1028 <SGR+0x2f4>)
     da6:	881a      	ldrh	r2, [r3, #0]
     da8:	4ba0      	ldr	r3, [pc, #640]	; (102c <SGR+0x2f8>)
     daa:	801a      	strh	r2, [r3, #0]
		while(!isEmptyParam())
     dac:	47a8      	blx	r5
     dae:	2800      	cmp	r0, #0
     db0:	d1e3      	bne.n	d7a <SGR+0x46>
			parameter = dequeueParam();
     db2:	47a0      	blx	r4
			switch(parameter)
     db4:	2831      	cmp	r0, #49	; 0x31
     db6:	d8f9      	bhi.n	dac <SGR+0x78>
     db8:	a301      	add	r3, pc, #4	; (adr r3, dc0 <SGR+0x8c>)
     dba:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
     dbe:	bf00      	nop
     dc0:	00000d8b 	.word	0x00000d8b
     dc4:	00000e89 	.word	0x00000e89
     dc8:	00001039 	.word	0x00001039
     dcc:	00000dad 	.word	0x00000dad
     dd0:	00000e91 	.word	0x00000e91
     dd4:	00000e99 	.word	0x00000e99
     dd8:	00000dad 	.word	0x00000dad
     ddc:	00000ea1 	.word	0x00000ea1
     de0:	00000dad 	.word	0x00000dad
     de4:	00000dad 	.word	0x00000dad
     de8:	00000dad 	.word	0x00000dad
     dec:	00000dad 	.word	0x00000dad
     df0:	00000dad 	.word	0x00000dad
     df4:	00000dad 	.word	0x00000dad
     df8:	00000dad 	.word	0x00000dad
     dfc:	00000dad 	.word	0x00000dad
     e00:	00000dad 	.word	0x00000dad
     e04:	00000dad 	.word	0x00000dad
     e08:	00000dad 	.word	0x00000dad
     e0c:	00000dad 	.word	0x00000dad
     e10:	00000dad 	.word	0x00000dad
     e14:	00000ea9 	.word	0x00000ea9
     e18:	00000eb1 	.word	0x00000eb1
     e1c:	00000dad 	.word	0x00000dad
     e20:	00000eb9 	.word	0x00000eb9
     e24:	00000ec1 	.word	0x00000ec1
     e28:	00000dad 	.word	0x00000dad
     e2c:	00000ec9 	.word	0x00000ec9
     e30:	00000dad 	.word	0x00000dad
     e34:	00000dad 	.word	0x00000dad
     e38:	00000ed1 	.word	0x00000ed1
     e3c:	00000ed9 	.word	0x00000ed9
     e40:	00000ee3 	.word	0x00000ee3
     e44:	00000eed 	.word	0x00000eed
     e48:	00000ef7 	.word	0x00000ef7
     e4c:	00000eff 	.word	0x00000eff
     e50:	00000f09 	.word	0x00000f09
     e54:	00000f13 	.word	0x00000f13
     e58:	00000f1d 	.word	0x00000f1d
     e5c:	00000f5d 	.word	0x00000f5d
     e60:	00000f67 	.word	0x00000f67
     e64:	00000f6f 	.word	0x00000f6f
     e68:	00000f79 	.word	0x00000f79
     e6c:	00000f83 	.word	0x00000f83
     e70:	00000f8d 	.word	0x00000f8d
     e74:	00000f95 	.word	0x00000f95
     e78:	00000f9f 	.word	0x00000f9f
     e7c:	00000fa9 	.word	0x00000fa9
     e80:	00000fb3 	.word	0x00000fb3
     e84:	00000ff3 	.word	0x00000ff3
					textBold = true;
     e88:	2201      	movs	r2, #1
     e8a:	4b61      	ldr	r3, [pc, #388]	; (1010 <SGR+0x2dc>)
     e8c:	701a      	strb	r2, [r3, #0]
					break;
     e8e:	e78d      	b.n	dac <SGR+0x78>
					textUnderscore = true;
     e90:	2201      	movs	r2, #1
     e92:	4b60      	ldr	r3, [pc, #384]	; (1014 <SGR+0x2e0>)
     e94:	701a      	strb	r2, [r3, #0]
					break;
     e96:	e789      	b.n	dac <SGR+0x78>
					textBlink = true;
     e98:	2201      	movs	r2, #1
     e9a:	4b5f      	ldr	r3, [pc, #380]	; (1018 <SGR+0x2e4>)
     e9c:	701a      	strb	r2, [r3, #0]
					break;
     e9e:	e785      	b.n	dac <SGR+0x78>
					textReverseVideo = true;
     ea0:	2201      	movs	r2, #1
     ea2:	4b5e      	ldr	r3, [pc, #376]	; (101c <SGR+0x2e8>)
     ea4:	701a      	strb	r2, [r3, #0]
					break;
     ea6:	e781      	b.n	dac <SGR+0x78>
					textUnderscore = true;
     ea8:	2201      	movs	r2, #1
     eaa:	4b5a      	ldr	r3, [pc, #360]	; (1014 <SGR+0x2e0>)
     eac:	701a      	strb	r2, [r3, #0]
					break;
     eae:	e77d      	b.n	dac <SGR+0x78>
					textBold = false;
     eb0:	2200      	movs	r2, #0
     eb2:	4b57      	ldr	r3, [pc, #348]	; (1010 <SGR+0x2dc>)
     eb4:	701a      	strb	r2, [r3, #0]
					break;
     eb6:	e779      	b.n	dac <SGR+0x78>
					textUnderscore = false;
     eb8:	2200      	movs	r2, #0
     eba:	4b56      	ldr	r3, [pc, #344]	; (1014 <SGR+0x2e0>)
     ebc:	701a      	strb	r2, [r3, #0]
					break;
     ebe:	e775      	b.n	dac <SGR+0x78>
					textBlink = false;
     ec0:	2200      	movs	r2, #0
     ec2:	4b55      	ldr	r3, [pc, #340]	; (1018 <SGR+0x2e4>)
     ec4:	701a      	strb	r2, [r3, #0]
					break;
     ec6:	e771      	b.n	dac <SGR+0x78>
					textReverseVideo = false;
     ec8:	2200      	movs	r2, #0
     eca:	4b54      	ldr	r3, [pc, #336]	; (101c <SGR+0x2e8>)
     ecc:	701a      	strb	r2, [r3, #0]
					break;
     ece:	e76d      	b.n	dac <SGR+0x78>
					textForeground = BLACK;
     ed0:	2200      	movs	r2, #0
     ed2:	4b54      	ldr	r3, [pc, #336]	; (1024 <SGR+0x2f0>)
     ed4:	801a      	strh	r2, [r3, #0]
					break;
     ed6:	e769      	b.n	dac <SGR+0x78>
					textForeground = RED;
     ed8:	f44f 4278 	mov.w	r2, #63488	; 0xf800
     edc:	4b51      	ldr	r3, [pc, #324]	; (1024 <SGR+0x2f0>)
     ede:	801a      	strh	r2, [r3, #0]
					break;
     ee0:	e764      	b.n	dac <SGR+0x78>
					textForeground = GREEN;
     ee2:	f44f 6280 	mov.w	r2, #1024	; 0x400
     ee6:	4b4f      	ldr	r3, [pc, #316]	; (1024 <SGR+0x2f0>)
     ee8:	801a      	strh	r2, [r3, #0]
					break;
     eea:	e75f      	b.n	dac <SGR+0x78>
					textForeground = BROWN;
     eec:	f64f 72e0 	movw	r2, #65504	; 0xffe0
     ef0:	4b4c      	ldr	r3, [pc, #304]	; (1024 <SGR+0x2f0>)
     ef2:	801a      	strh	r2, [r3, #0]
					break;
     ef4:	e75a      	b.n	dac <SGR+0x78>
					textForeground = BLUE;
     ef6:	221f      	movs	r2, #31
     ef8:	4b4a      	ldr	r3, [pc, #296]	; (1024 <SGR+0x2f0>)
     efa:	801a      	strh	r2, [r3, #0]
					break;
     efc:	e756      	b.n	dac <SGR+0x78>
					textForeground = MAGENTA;
     efe:	f64f 021f 	movw	r2, #63519	; 0xf81f
     f02:	4b48      	ldr	r3, [pc, #288]	; (1024 <SGR+0x2f0>)
     f04:	801a      	strh	r2, [r3, #0]
					break;
     f06:	e751      	b.n	dac <SGR+0x78>
					textForeground = CYAN;
     f08:	f240 72ff 	movw	r2, #2047	; 0x7ff
     f0c:	4b45      	ldr	r3, [pc, #276]	; (1024 <SGR+0x2f0>)
     f0e:	801a      	strh	r2, [r3, #0]
					break;
     f10:	e74c      	b.n	dac <SGR+0x78>
					textForeground = WHITE;
     f12:	f64f 72ff 	movw	r2, #65535	; 0xffff
     f16:	4b43      	ldr	r3, [pc, #268]	; (1024 <SGR+0x2f0>)
     f18:	801a      	strh	r2, [r3, #0]
					break;
     f1a:	e747      	b.n	dac <SGR+0x78>
					parameter = dequeueParam();
     f1c:	47a0      	blx	r4
					if(parameter == 5)	//256 color
     f1e:	2805      	cmp	r0, #5
     f20:	d016      	beq.n	f50 <SGR+0x21c>
					if(parameter == 2) //RGB color, 3 parameter r/g/b
     f22:	2802      	cmp	r0, #2
     f24:	f47f af42 	bne.w	dac <SGR+0x78>
						r = dequeueParam();
     f28:	47a0      	blx	r4
     f2a:	4606      	mov	r6, r0
						g = dequeueParam();
     f2c:	47a0      	blx	r4
     f2e:	4607      	mov	r7, r0
						b = dequeueParam();
     f30:	47a0      	blx	r4
						textForeground = ((r & 0xf8) << 8) | ((g & 0xfc) << 3) | (b >> 3);
     f32:	0233      	lsls	r3, r6, #8
     f34:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
     f38:	f023 0307 	bic.w	r3, r3, #7
     f3c:	00fa      	lsls	r2, r7, #3
     f3e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
     f42:	4313      	orrs	r3, r2
     f44:	f3c0 00c7 	ubfx	r0, r0, #3, #8
     f48:	4303      	orrs	r3, r0
     f4a:	4a36      	ldr	r2, [pc, #216]	; (1024 <SGR+0x2f0>)
     f4c:	8013      	strh	r3, [r2, #0]
     f4e:	e72d      	b.n	dac <SGR+0x78>
						parameter = dequeueParam();
     f50:	47a0      	blx	r4
						textForeground = eightBitColor[parameter];
     f52:	f83d 2010 	ldrh.w	r2, [sp, r0, lsl #1]
     f56:	4b33      	ldr	r3, [pc, #204]	; (1024 <SGR+0x2f0>)
     f58:	801a      	strh	r2, [r3, #0]
     f5a:	e7e2      	b.n	f22 <SGR+0x1ee>
					textForeground = defaultForegroundColor;
     f5c:	4b30      	ldr	r3, [pc, #192]	; (1020 <SGR+0x2ec>)
     f5e:	881a      	ldrh	r2, [r3, #0]
     f60:	4b30      	ldr	r3, [pc, #192]	; (1024 <SGR+0x2f0>)
     f62:	801a      	strh	r2, [r3, #0]
					break;
     f64:	e722      	b.n	dac <SGR+0x78>
					textBackground = BLACK;
     f66:	2200      	movs	r2, #0
     f68:	4b30      	ldr	r3, [pc, #192]	; (102c <SGR+0x2f8>)
     f6a:	801a      	strh	r2, [r3, #0]
					break;
     f6c:	e71e      	b.n	dac <SGR+0x78>
					textBackground = RED;
     f6e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
     f72:	4b2e      	ldr	r3, [pc, #184]	; (102c <SGR+0x2f8>)
     f74:	801a      	strh	r2, [r3, #0]
					break;
     f76:	e719      	b.n	dac <SGR+0x78>
					textBackground = GREEN;
     f78:	f44f 6280 	mov.w	r2, #1024	; 0x400
     f7c:	4b2b      	ldr	r3, [pc, #172]	; (102c <SGR+0x2f8>)
     f7e:	801a      	strh	r2, [r3, #0]
					break;
     f80:	e714      	b.n	dac <SGR+0x78>
					textBackground = BROWN;
     f82:	f64f 72e0 	movw	r2, #65504	; 0xffe0
     f86:	4b29      	ldr	r3, [pc, #164]	; (102c <SGR+0x2f8>)
     f88:	801a      	strh	r2, [r3, #0]
					break;
     f8a:	e70f      	b.n	dac <SGR+0x78>
					textBackground = BLUE;
     f8c:	221f      	movs	r2, #31
     f8e:	4b27      	ldr	r3, [pc, #156]	; (102c <SGR+0x2f8>)
     f90:	801a      	strh	r2, [r3, #0]
					break;
     f92:	e70b      	b.n	dac <SGR+0x78>
					textBackground = MAGENTA;
     f94:	f64f 021f 	movw	r2, #63519	; 0xf81f
     f98:	4b24      	ldr	r3, [pc, #144]	; (102c <SGR+0x2f8>)
     f9a:	801a      	strh	r2, [r3, #0]
					break;
     f9c:	e706      	b.n	dac <SGR+0x78>
					textBackground = CYAN;
     f9e:	f240 72ff 	movw	r2, #2047	; 0x7ff
     fa2:	4b22      	ldr	r3, [pc, #136]	; (102c <SGR+0x2f8>)
     fa4:	801a      	strh	r2, [r3, #0]
					break;
     fa6:	e701      	b.n	dac <SGR+0x78>
					textBackground = WHITE;
     fa8:	f64f 72ff 	movw	r2, #65535	; 0xffff
     fac:	4b1f      	ldr	r3, [pc, #124]	; (102c <SGR+0x2f8>)
     fae:	801a      	strh	r2, [r3, #0]
					break;
     fb0:	e6fc      	b.n	dac <SGR+0x78>
					parameter = dequeueParam();
     fb2:	47a0      	blx	r4
					if(parameter == 5)	//256 color
     fb4:	2805      	cmp	r0, #5
     fb6:	d016      	beq.n	fe6 <SGR+0x2b2>
					if(parameter == 2) //RGB color, 3 parameter r/g/b
     fb8:	2802      	cmp	r0, #2
     fba:	f47f aef7 	bne.w	dac <SGR+0x78>
						r = dequeueParam();
     fbe:	47a0      	blx	r4
     fc0:	4606      	mov	r6, r0
						g = dequeueParam();
     fc2:	47a0      	blx	r4
     fc4:	4607      	mov	r7, r0
						b = dequeueParam();
     fc6:	47a0      	blx	r4
						textBackground = ((r & 0xf8) << 8) | ((g & 0xfc) << 3) | (b >> 3);				
     fc8:	0233      	lsls	r3, r6, #8
     fca:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
     fce:	f023 0307 	bic.w	r3, r3, #7
     fd2:	00fa      	lsls	r2, r7, #3
     fd4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
     fd8:	4313      	orrs	r3, r2
     fda:	f3c0 00c7 	ubfx	r0, r0, #3, #8
     fde:	4303      	orrs	r3, r0
     fe0:	4a12      	ldr	r2, [pc, #72]	; (102c <SGR+0x2f8>)
     fe2:	8013      	strh	r3, [r2, #0]
     fe4:	e6e2      	b.n	dac <SGR+0x78>
						parameter = dequeueParam();
     fe6:	47a0      	blx	r4
						textBackground = eightBitColor[parameter];
     fe8:	f83d 2010 	ldrh.w	r2, [sp, r0, lsl #1]
     fec:	4b0f      	ldr	r3, [pc, #60]	; (102c <SGR+0x2f8>)
     fee:	801a      	strh	r2, [r3, #0]
     ff0:	e7e2      	b.n	fb8 <SGR+0x284>
					textBackground = defaultBackgroundColor;
     ff2:	4b0d      	ldr	r3, [pc, #52]	; (1028 <SGR+0x2f4>)
     ff4:	881a      	ldrh	r2, [r3, #0]
     ff6:	4b0d      	ldr	r3, [pc, #52]	; (102c <SGR+0x2f8>)
     ff8:	801a      	strh	r2, [r3, #0]
					break;
     ffa:	e6d7      	b.n	dac <SGR+0x78>
     ffc:	00005ce4 	.word	0x00005ce4
    1000:	00004ab9 	.word	0x00004ab9
    1004:	20000028 	.word	0x20000028
    1008:	00000241 	.word	0x00000241
    100c:	00000255 	.word	0x00000255
    1010:	20000388 	.word	0x20000388
    1014:	20000368 	.word	0x20000368
    1018:	2000036a 	.word	0x2000036a
    101c:	2000038a 	.word	0x2000038a
    1020:	2000018a 	.word	0x2000018a
    1024:	20000014 	.word	0x20000014
    1028:	200002f2 	.word	0x200002f2
    102c:	2000022a 	.word	0x2000022a
    1030:	000037ed 	.word	0x000037ed
    1034:	200002f1 	.word	0x200002f1
					textForeground &= 0x7BEF;	// what the fuck?
    1038:	4905      	ldr	r1, [pc, #20]	; (1050 <SGR+0x31c>)
    103a:	f647 33ef 	movw	r3, #31727	; 0x7bef
    103e:	880a      	ldrh	r2, [r1, #0]
    1040:	401a      	ands	r2, r3
    1042:	800a      	strh	r2, [r1, #0]
					textBackground &= 0x7BEF;
    1044:	4a03      	ldr	r2, [pc, #12]	; (1054 <SGR+0x320>)
    1046:	8811      	ldrh	r1, [r2, #0]
    1048:	400b      	ands	r3, r1
    104a:	8013      	strh	r3, [r2, #0]
					break;
    104c:	e6ae      	b.n	dac <SGR+0x78>
    104e:	bf00      	nop
    1050:	20000014 	.word	0x20000014
    1054:	2000022a 	.word	0x2000022a

00001058 <DSR>:
void ICH(void) //Insert indicated # of blank chars
{
	currentState = stateGround;
}
void DSR(void) 
{
    1058:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    105c:	b087      	sub	sp, #28
	
	This function will support both ANSI and DEC formats
	*/
	unsigned char tempCharacter;
		
	uint8_t xTemp = xCharPos;
    105e:	4b2e      	ldr	r3, [pc, #184]	; (1118 <DSR+0xc0>)
    1060:	881d      	ldrh	r5, [r3, #0]
	uint8_t yTemp = yCharPos;
    1062:	4b2e      	ldr	r3, [pc, #184]	; (111c <DSR+0xc4>)
    1064:	881c      	ldrh	r4, [r3, #0]
	
	char DSROSResponse[] = {0x1b, 0x5b, 0x30, 0x6e};
    1066:	4b2e      	ldr	r3, [pc, #184]	; (1120 <DSR+0xc8>)
    1068:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    106c:	9305      	str	r3, [sp, #20]
	
	char stringResponse[10];
	char tempbuffer[5];
		
	cursorBlinkState = false;  //need to turn the blinking off; ugly kludge
    106e:	2200      	movs	r2, #0
    1070:	4b2c      	ldr	r3, [pc, #176]	; (1124 <DSR+0xcc>)
    1072:	701a      	strb	r2, [r3, #0]
		
	tempCharacter = dequeueParser();
    1074:	4b2c      	ldr	r3, [pc, #176]	; (1128 <DSR+0xd0>)
    1076:	4798      	blx	r3
    1078:	4606      	mov	r6, r0
	
	if(!isEmptyParam()) //We are in DEC format
    107a:	4b2c      	ldr	r3, [pc, #176]	; (112c <DSR+0xd4>)
    107c:	4798      	blx	r3
    107e:	b1a8      	cbz	r0, 10ac <DSR+0x54>
	{
		tempCharacter = dequeueParam();  //this now contains either a 5 or 6
	}
	
	switch(tempCharacter){
    1080:	2e05      	cmp	r6, #5
    1082:	d017      	beq.n	10b4 <DSR+0x5c>
    1084:	2e06      	cmp	r6, #6
    1086:	d01a      	beq.n	10be <DSR+0x66>
		
			printf("%s",stringResponse);
		break;
	}
	
	stringResponse[0] = '\0';
    1088:	2600      	movs	r6, #0
    108a:	f88d 6008 	strb.w	r6, [sp, #8]
	tempbuffer[0] = '\0';
    108e:	f88d 6000 	strb.w	r6, [sp]
		
	blinkCursor();
    1092:	4b27      	ldr	r3, [pc, #156]	; (1130 <DSR+0xd8>)
    1094:	4798      	blx	r3
	xCharPos = xTemp;
    1096:	b2ed      	uxtb	r5, r5
    1098:	4b1f      	ldr	r3, [pc, #124]	; (1118 <DSR+0xc0>)
    109a:	801d      	strh	r5, [r3, #0]
	yCharPos = yTemp;
    109c:	b2e4      	uxtb	r4, r4
    109e:	4b1f      	ldr	r3, [pc, #124]	; (111c <DSR+0xc4>)
    10a0:	801c      	strh	r4, [r3, #0]
	currentState = stateGround;
    10a2:	4b24      	ldr	r3, [pc, #144]	; (1134 <DSR+0xdc>)
    10a4:	701e      	strb	r6, [r3, #0]
}
    10a6:	b007      	add	sp, #28
    10a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		tempCharacter = dequeueParam();  //this now contains either a 5 or 6
    10ac:	4b22      	ldr	r3, [pc, #136]	; (1138 <DSR+0xe0>)
    10ae:	4798      	blx	r3
    10b0:	4606      	mov	r6, r0
    10b2:	e7e5      	b.n	1080 <DSR+0x28>
			printf("%s",DSROSResponse);
    10b4:	a905      	add	r1, sp, #20
    10b6:	4821      	ldr	r0, [pc, #132]	; (113c <DSR+0xe4>)
    10b8:	4b21      	ldr	r3, [pc, #132]	; (1140 <DSR+0xe8>)
    10ba:	4798      	blx	r3
		break;
    10bc:	e7e4      	b.n	1088 <DSR+0x30>
			strcat(stringResponse,"\x1B");
    10be:	ae02      	add	r6, sp, #8
    10c0:	4630      	mov	r0, r6
    10c2:	4f20      	ldr	r7, [pc, #128]	; (1144 <DSR+0xec>)
    10c4:	47b8      	blx	r7
    10c6:	4b20      	ldr	r3, [pc, #128]	; (1148 <DSR+0xf0>)
    10c8:	881b      	ldrh	r3, [r3, #0]
    10ca:	5233      	strh	r3, [r6, r0]
			strcat(stringResponse,"\x5B");
    10cc:	4630      	mov	r0, r6
    10ce:	47b8      	blx	r7
    10d0:	4b1e      	ldr	r3, [pc, #120]	; (114c <DSR+0xf4>)
    10d2:	881b      	ldrh	r3, [r3, #0]
    10d4:	5233      	strh	r3, [r6, r0]
			strcat(stringResponse,itoa(yTemp,tempbuffer,10));
    10d6:	220a      	movs	r2, #10
    10d8:	4669      	mov	r1, sp
    10da:	b2e0      	uxtb	r0, r4
    10dc:	f8df 9078 	ldr.w	r9, [pc, #120]	; 1158 <DSR+0x100>
    10e0:	47c8      	blx	r9
    10e2:	4601      	mov	r1, r0
    10e4:	4630      	mov	r0, r6
    10e6:	f8df 8074 	ldr.w	r8, [pc, #116]	; 115c <DSR+0x104>
    10ea:	47c0      	blx	r8
			strcat(stringResponse,";");
    10ec:	4630      	mov	r0, r6
    10ee:	47b8      	blx	r7
    10f0:	4b17      	ldr	r3, [pc, #92]	; (1150 <DSR+0xf8>)
    10f2:	881b      	ldrh	r3, [r3, #0]
    10f4:	5233      	strh	r3, [r6, r0]
			strcat(stringResponse,itoa(xTemp,tempbuffer,10));
    10f6:	220a      	movs	r2, #10
    10f8:	4669      	mov	r1, sp
    10fa:	b2e8      	uxtb	r0, r5
    10fc:	47c8      	blx	r9
    10fe:	4601      	mov	r1, r0
    1100:	4630      	mov	r0, r6
    1102:	47c0      	blx	r8
			strcat(stringResponse,"R");
    1104:	4630      	mov	r0, r6
    1106:	47b8      	blx	r7
    1108:	4b12      	ldr	r3, [pc, #72]	; (1154 <DSR+0xfc>)
    110a:	881b      	ldrh	r3, [r3, #0]
    110c:	5233      	strh	r3, [r6, r0]
			printf("%s",stringResponse);
    110e:	4631      	mov	r1, r6
    1110:	480a      	ldr	r0, [pc, #40]	; (113c <DSR+0xe4>)
    1112:	4b0b      	ldr	r3, [pc, #44]	; (1140 <DSR+0xe8>)
    1114:	4798      	blx	r3
		break;
    1116:	e7b7      	b.n	1088 <DSR+0x30>
    1118:	200002ec 	.word	0x200002ec
    111c:	200002ee 	.word	0x200002ee
    1120:	00005ce4 	.word	0x00005ce4
    1124:	20000028 	.word	0x20000028
    1128:	000001e5 	.word	0x000001e5
    112c:	00000241 	.word	0x00000241
    1130:	000037ed 	.word	0x000037ed
    1134:	200002f1 	.word	0x200002f1
    1138:	00000255 	.word	0x00000255
    113c:	0000605c 	.word	0x0000605c
    1140:	00004c39 	.word	0x00004c39
    1144:	00004eff 	.word	0x00004eff
    1148:	00006030 	.word	0x00006030
    114c:	00006034 	.word	0x00006034
    1150:	00006348 	.word	0x00006348
    1154:	00006038 	.word	0x00006038
    1158:	00004aa5 	.word	0x00004aa5
    115c:	00004ee1 	.word	0x00004ee1

00001160 <isValidCSIEscapeCode>:
bool isValidCSIEscapeCode(uint8_t character)
{
	
	for(uint8_t i = 0; i <= sizeof(csiEscCodes)/sizeof(csiEscCodes[0]) ; i++)
	{
		if(character == csiEscCodes[i])
    1160:	2840      	cmp	r0, #64	; 0x40
    1162:	d004      	beq.n	116e <isValidCSIEscapeCode+0xe>
    1164:	4b03      	ldr	r3, [pc, #12]	; (1174 <isValidCSIEscapeCode+0x14>)
    1166:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    116a:	4282      	cmp	r2, r0
    116c:	d1fb      	bne.n	1166 <isValidCSIEscapeCode+0x6>
		{
			return true;	
		}
	}
	return false;
}
    116e:	2001      	movs	r0, #1
    1170:	4770      	bx	lr
    1172:	bf00      	nop
    1174:	0000603c 	.word	0x0000603c

00001178 <CSIparamState>:
{
    1178:	b510      	push	{r4, lr}
    117a:	4604      	mov	r4, r0
	if(character >= 0x30 && character <= 0x39)		//character is a digit, put it in the buffer
    117c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    1180:	b2db      	uxtb	r3, r3
    1182:	2b09      	cmp	r3, #9
    1184:	d90a      	bls.n	119c <CSIparamState+0x24>
	else if(character == 0x3B)					//character is ';', now we take items out of 
    1186:	283b      	cmp	r0, #59	; 0x3b
    1188:	d00b      	beq.n	11a2 <CSIparamState+0x2a>
	else if(character == 0x3F)					//character is '?', this is used for DECCKM
    118a:	283f      	cmp	r0, #63	; 0x3f
    118c:	d00d      	beq.n	11aa <CSIparamState+0x32>
	else if(isValidCSIEscapeCode(character))		//character matches a supported escape code
    118e:	4b0d      	ldr	r3, [pc, #52]	; (11c4 <CSIparamState+0x4c>)
    1190:	4798      	blx	r3
    1192:	b970      	cbnz	r0, 11b2 <CSIparamState+0x3a>
		currentState = stateCSIignore;
    1194:	2205      	movs	r2, #5
    1196:	4b0c      	ldr	r3, [pc, #48]	; (11c8 <CSIparamState+0x50>)
    1198:	701a      	strb	r2, [r3, #0]
    119a:	bd10      	pop	{r4, pc}
		enqueueParser(character);
    119c:	4b0b      	ldr	r3, [pc, #44]	; (11cc <CSIparamState+0x54>)
    119e:	4798      	blx	r3
    11a0:	bd10      	pop	{r4, pc}
		enqueueParser(';');						//parambuffer 			
    11a2:	203b      	movs	r0, #59	; 0x3b
    11a4:	4b09      	ldr	r3, [pc, #36]	; (11cc <CSIparamState+0x54>)
    11a6:	4798      	blx	r3
    11a8:	bd10      	pop	{r4, pc}
		enqueueParser('?');						//the terminating character
    11aa:	203f      	movs	r0, #63	; 0x3f
    11ac:	4b07      	ldr	r3, [pc, #28]	; (11cc <CSIparamState+0x54>)
    11ae:	4798      	blx	r3
    11b0:	bd10      	pop	{r4, pc}
		queueTransmogrifier();											
    11b2:	4b07      	ldr	r3, [pc, #28]	; (11d0 <CSIparamState+0x58>)
    11b4:	4798      	blx	r3
		currentState = stateCSIentry;
    11b6:	2203      	movs	r2, #3
    11b8:	4b03      	ldr	r3, [pc, #12]	; (11c8 <CSIparamState+0x50>)
    11ba:	701a      	strb	r2, [r3, #0]
		CSIentryState(character);
    11bc:	4620      	mov	r0, r4
    11be:	4b05      	ldr	r3, [pc, #20]	; (11d4 <CSIparamState+0x5c>)
    11c0:	4798      	blx	r3
    11c2:	bd10      	pop	{r4, pc}
    11c4:	00001161 	.word	0x00001161
    11c8:	200002f1 	.word	0x200002f1
    11cc:	00000215 	.word	0x00000215
    11d0:	00000305 	.word	0x00000305
    11d4:	000011d9 	.word	0x000011d9

000011d8 <CSIentryState>:
{
    11d8:	b508      	push	{r3, lr}
	if(character == 0x40)		//ESC [ @ ICH insert indicated # of blank chars
    11da:	2840      	cmp	r0, #64	; 0x40
    11dc:	d064      	beq.n	12a8 <CSIentryState+0xd0>
	else if(character == 0x41)	//ESC [ A	Cursor Up
    11de:	2841      	cmp	r0, #65	; 0x41
    11e0:	d066      	beq.n	12b0 <CSIentryState+0xd8>
	else if(character == 0x61)	//ESC [ a HPR
    11e2:	2861      	cmp	r0, #97	; 0x61
    11e4:	d067      	beq.n	12b6 <CSIentryState+0xde>
	else if(character == 0x42)	//ESC [ B	Cursor Down
    11e6:	2842      	cmp	r0, #66	; 0x42
    11e8:	d068      	beq.n	12bc <CSIentryState+0xe4>
	else if(character == 0x43)	//ESC [ C	Cursor Forward
    11ea:	2843      	cmp	r0, #67	; 0x43
    11ec:	d069      	beq.n	12c2 <CSIentryState+0xea>
	else if(character == 0x63)	//ESC [ c DA
    11ee:	2863      	cmp	r0, #99	; 0x63
    11f0:	d06a      	beq.n	12c8 <CSIentryState+0xf0>
	else if(character == 0x44)	//ESC [ D	Cursor Backward
    11f2:	2844      	cmp	r0, #68	; 0x44
    11f4:	d070      	beq.n	12d8 <CSIentryState+0x100>
	else if(character == 0x64)	//ESC [ d	VPA
    11f6:	2864      	cmp	r0, #100	; 0x64
    11f8:	d055      	beq.n	12a6 <CSIentryState+0xce>
	else if(character == 0x45)	//ESC [ E	Cursor Next Line
    11fa:	2845      	cmp	r0, #69	; 0x45
    11fc:	d06f      	beq.n	12de <CSIentryState+0x106>
	else if(character == 0x65)	//ESC [ e VPR
    11fe:	2865      	cmp	r0, #101	; 0x65
    1200:	d070      	beq.n	12e4 <CSIentryState+0x10c>
	else if(character == 0x46)	//ESC [ F	Cursor Preceding Line
    1202:	2846      	cmp	r0, #70	; 0x46
    1204:	d071      	beq.n	12ea <CSIentryState+0x112>
	else if(character == 0x66)	//ESC [ f HVP
    1206:	2866      	cmp	r0, #102	; 0x66
    1208:	d072      	beq.n	12f0 <CSIentryState+0x118>
	else if(character == 0x47)	//ESC [ G	Cursor Horizontal Absolute
    120a:	2847      	cmp	r0, #71	; 0x47
    120c:	d073      	beq.n	12f6 <CSIentryState+0x11e>
	else if(character == 0x67)	//ESC [ g TBC
    120e:	2867      	cmp	r0, #103	; 0x67
    1210:	d074      	beq.n	12fc <CSIentryState+0x124>
	else if(character == 0x48)	//ESC [ H	Cursor Position
    1212:	2848      	cmp	r0, #72	; 0x48
    1214:	d076      	beq.n	1304 <CSIentryState+0x12c>
	else if(character == 0x68)	//ESC [ h Set Mode
    1216:	2868      	cmp	r0, #104	; 0x68
    1218:	d077      	beq.n	130a <CSIentryState+0x132>
	else if(character == 0x49)	//ESC [ I	Cursor Horizontal Tab
    121a:	2849      	cmp	r0, #73	; 0x49
    121c:	d079      	beq.n	1312 <CSIentryState+0x13a>
	else if(character == 0x4A)	//ESC [ J	Erase In Display
    121e:	284a      	cmp	r0, #74	; 0x4a
    1220:	d07b      	beq.n	131a <CSIentryState+0x142>
	else if(character == 0x4B)	//ESC [ K	Erase In Line
    1222:	284b      	cmp	r0, #75	; 0x4b
    1224:	d07c      	beq.n	1320 <CSIentryState+0x148>
	else if(character == 0x4C)	//ESC [ L 
    1226:	284c      	cmp	r0, #76	; 0x4c
    1228:	d07d      	beq.n	1326 <CSIentryState+0x14e>
	else if(character == 0x6C)	//ESC [ l	Reset mode
    122a:	286c      	cmp	r0, #108	; 0x6c
    122c:	d07f      	beq.n	132e <CSIentryState+0x156>
	else if(character == 0x4D)	//ESC [ M
    122e:	284d      	cmp	r0, #77	; 0x4d
    1230:	f000 8081 	beq.w	1336 <CSIentryState+0x15e>
	else if(character == 0x6D)	//ESC [ m	Select Graphic Rendition
    1234:	286d      	cmp	r0, #109	; 0x6d
    1236:	f000 8082 	beq.w	133e <CSIentryState+0x166>
	else if(character == 0x6E)	//ESC [ n Device Status Report
    123a:	286e      	cmp	r0, #110	; 0x6e
    123c:	f000 8082 	beq.w	1344 <CSIentryState+0x16c>
	else if(character == 0x50)	//ESC [ P	Delete Character
    1240:	2850      	cmp	r0, #80	; 0x50
    1242:	f000 8082 	beq.w	134a <CSIentryState+0x172>
	else if(character == 0x51)	//ESC [ Q	Select Edit Extent Mode
    1246:	2851      	cmp	r0, #81	; 0x51
    1248:	f000 8083 	beq.w	1352 <CSIentryState+0x17a>
	else if(character == 0x71)	//ESC [ q	Set Keyboard LEDs
    124c:	2871      	cmp	r0, #113	; 0x71
    124e:	f000 8084 	beq.w	135a <CSIentryState+0x182>
	else if(character == 0x72)	//ESC [ r	DECSTBM
    1252:	2872      	cmp	r0, #114	; 0x72
    1254:	f000 8085 	beq.w	1362 <CSIentryState+0x18a>
	else if(character == 0x73)	//ESC [ s	Save Cursor Position
    1258:	2873      	cmp	r0, #115	; 0x73
    125a:	f000 8086 	beq.w	136a <CSIentryState+0x192>
	else if(character == 0x75)	//ESC [ u	Restore Cursor Position
    125e:	2875      	cmp	r0, #117	; 0x75
    1260:	f000 8086 	beq.w	1370 <CSIentryState+0x198>
	else if(character == 0x58)	//ESC [ X
    1264:	2858      	cmp	r0, #88	; 0x58
    1266:	f000 8086 	beq.w	1376 <CSIentryState+0x19e>
	else if(character == 0x57)	//ESC [ W	Cursor Tabulation Control
    126a:	2857      	cmp	r0, #87	; 0x57
    126c:	f000 8087 	beq.w	137e <CSIentryState+0x1a6>
	else if(character == 0x5A)	//ESC [ Z	Cursor Backwards Tab
    1270:	285a      	cmp	r0, #90	; 0x5a
    1272:	f000 8088 	beq.w	1386 <CSIentryState+0x1ae>
	else if(character == 0x60)	//ESC [ ` HPA
    1276:	2860      	cmp	r0, #96	; 0x60
    1278:	f000 8089 	beq.w	138e <CSIentryState+0x1b6>
	else if(character >= 0x30 && character <= 0x39) // if the character is a digit 0-9
    127c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    1280:	b2db      	uxtb	r3, r3
    1282:	2b09      	cmp	r3, #9
    1284:	f240 8087 	bls.w	1396 <CSIentryState+0x1be>
	else if(character == 0x3B)	//Semicolon ; parameter deliminator
    1288:	283b      	cmp	r0, #59	; 0x3b
    128a:	f000 808a 	beq.w	13a2 <CSIentryState+0x1ca>
	else if(character == 0x3F)	//Question '?'; this is a param
    128e:	283f      	cmp	r0, #63	; 0x3f
    1290:	f000 808d 	beq.w	13ae <CSIentryState+0x1d6>
	else if(character == 0x1B)		//ESC, send back to stateESC
    1294:	281b      	cmp	r0, #27
    1296:	f000 8090 	beq.w	13ba <CSIentryState+0x1e2>
	else if(character == 0x3A)
    129a:	283a      	cmp	r0, #58	; 0x3a
    129c:	f000 8091 	beq.w	13c2 <CSIentryState+0x1ea>
		currentState = stateGround;
    12a0:	2200      	movs	r2, #0
    12a2:	4b4a      	ldr	r3, [pc, #296]	; (13cc <CSIentryState+0x1f4>)
    12a4:	701a      	strb	r2, [r3, #0]
    12a6:	bd08      	pop	{r3, pc}
	currentState = stateGround;
    12a8:	2200      	movs	r2, #0
    12aa:	4b48      	ldr	r3, [pc, #288]	; (13cc <CSIentryState+0x1f4>)
    12ac:	701a      	strb	r2, [r3, #0]
    12ae:	bd08      	pop	{r3, pc}
		CUU();
    12b0:	4b47      	ldr	r3, [pc, #284]	; (13d0 <CSIentryState+0x1f8>)
    12b2:	4798      	blx	r3
    12b4:	bd08      	pop	{r3, pc}
		CUF();
    12b6:	4b47      	ldr	r3, [pc, #284]	; (13d4 <CSIentryState+0x1fc>)
    12b8:	4798      	blx	r3
    12ba:	bd08      	pop	{r3, pc}
		CUD();
    12bc:	4b46      	ldr	r3, [pc, #280]	; (13d8 <CSIentryState+0x200>)
    12be:	4798      	blx	r3
    12c0:	bd08      	pop	{r3, pc}
		CUF();
    12c2:	4b44      	ldr	r3, [pc, #272]	; (13d4 <CSIentryState+0x1fc>)
    12c4:	4798      	blx	r3
    12c6:	bd08      	pop	{r3, pc}
		printf("%s",DECIDreturn);
    12c8:	4944      	ldr	r1, [pc, #272]	; (13dc <CSIentryState+0x204>)
    12ca:	4845      	ldr	r0, [pc, #276]	; (13e0 <CSIentryState+0x208>)
    12cc:	4b45      	ldr	r3, [pc, #276]	; (13e4 <CSIentryState+0x20c>)
    12ce:	4798      	blx	r3
		currentState = stateGround;
    12d0:	2200      	movs	r2, #0
    12d2:	4b3e      	ldr	r3, [pc, #248]	; (13cc <CSIentryState+0x1f4>)
    12d4:	701a      	strb	r2, [r3, #0]
    12d6:	bd08      	pop	{r3, pc}
		CUB();
    12d8:	4b43      	ldr	r3, [pc, #268]	; (13e8 <CSIentryState+0x210>)
    12da:	4798      	blx	r3
    12dc:	bd08      	pop	{r3, pc}
		CNL();
    12de:	4b43      	ldr	r3, [pc, #268]	; (13ec <CSIentryState+0x214>)
    12e0:	4798      	blx	r3
    12e2:	bd08      	pop	{r3, pc}
		CUD();
    12e4:	4b3c      	ldr	r3, [pc, #240]	; (13d8 <CSIentryState+0x200>)
    12e6:	4798      	blx	r3
    12e8:	bd08      	pop	{r3, pc}
		CPL();
    12ea:	4b41      	ldr	r3, [pc, #260]	; (13f0 <CSIentryState+0x218>)
    12ec:	4798      	blx	r3
    12ee:	bd08      	pop	{r3, pc}
		CUP();
    12f0:	4b40      	ldr	r3, [pc, #256]	; (13f4 <CSIentryState+0x21c>)
    12f2:	4798      	blx	r3
    12f4:	bd08      	pop	{r3, pc}
		CHA();
    12f6:	4b40      	ldr	r3, [pc, #256]	; (13f8 <CSIentryState+0x220>)
    12f8:	4798      	blx	r3
    12fa:	bd08      	pop	{r3, pc}
		currentState = stateGround;
    12fc:	2200      	movs	r2, #0
    12fe:	4b33      	ldr	r3, [pc, #204]	; (13cc <CSIentryState+0x1f4>)
    1300:	701a      	strb	r2, [r3, #0]
    1302:	bd08      	pop	{r3, pc}
		CUP();
    1304:	4b3b      	ldr	r3, [pc, #236]	; (13f4 <CSIentryState+0x21c>)
    1306:	4798      	blx	r3
    1308:	bd08      	pop	{r3, pc}
		currentState = stateGround;
    130a:	2200      	movs	r2, #0
    130c:	4b2f      	ldr	r3, [pc, #188]	; (13cc <CSIentryState+0x1f4>)
    130e:	701a      	strb	r2, [r3, #0]
    1310:	bd08      	pop	{r3, pc}
	currentState = stateGround;
    1312:	2200      	movs	r2, #0
    1314:	4b2d      	ldr	r3, [pc, #180]	; (13cc <CSIentryState+0x1f4>)
    1316:	701a      	strb	r2, [r3, #0]
    1318:	bd08      	pop	{r3, pc}
		ED();
    131a:	4b38      	ldr	r3, [pc, #224]	; (13fc <CSIentryState+0x224>)
    131c:	4798      	blx	r3
    131e:	bd08      	pop	{r3, pc}
		EL();
    1320:	4b37      	ldr	r3, [pc, #220]	; (1400 <CSIentryState+0x228>)
    1322:	4798      	blx	r3
    1324:	bd08      	pop	{r3, pc}
		currentState = stateGround;
    1326:	2200      	movs	r2, #0
    1328:	4b28      	ldr	r3, [pc, #160]	; (13cc <CSIentryState+0x1f4>)
    132a:	701a      	strb	r2, [r3, #0]
    132c:	bd08      	pop	{r3, pc}
		currentState = stateGround;
    132e:	2200      	movs	r2, #0
    1330:	4b26      	ldr	r3, [pc, #152]	; (13cc <CSIentryState+0x1f4>)
    1332:	701a      	strb	r2, [r3, #0]
    1334:	bd08      	pop	{r3, pc}
		currentState = stateGround;
    1336:	2200      	movs	r2, #0
    1338:	4b24      	ldr	r3, [pc, #144]	; (13cc <CSIentryState+0x1f4>)
    133a:	701a      	strb	r2, [r3, #0]
    133c:	bd08      	pop	{r3, pc}
		SGR();
    133e:	4b31      	ldr	r3, [pc, #196]	; (1404 <CSIentryState+0x22c>)
    1340:	4798      	blx	r3
    1342:	bd08      	pop	{r3, pc}
		DSR();
    1344:	4b30      	ldr	r3, [pc, #192]	; (1408 <CSIentryState+0x230>)
    1346:	4798      	blx	r3
    1348:	bd08      	pop	{r3, pc}
	currentState = stateGround;
    134a:	2200      	movs	r2, #0
    134c:	4b1f      	ldr	r3, [pc, #124]	; (13cc <CSIentryState+0x1f4>)
    134e:	701a      	strb	r2, [r3, #0]
    1350:	bd08      	pop	{r3, pc}
	currentState = stateGround;
    1352:	2200      	movs	r2, #0
    1354:	4b1d      	ldr	r3, [pc, #116]	; (13cc <CSIentryState+0x1f4>)
    1356:	701a      	strb	r2, [r3, #0]
    1358:	bd08      	pop	{r3, pc}
		currentState = stateGround;
    135a:	2200      	movs	r2, #0
    135c:	4b1b      	ldr	r3, [pc, #108]	; (13cc <CSIentryState+0x1f4>)
    135e:	701a      	strb	r2, [r3, #0]
    1360:	bd08      	pop	{r3, pc}
		currentState = stateGround;
    1362:	2200      	movs	r2, #0
    1364:	4b19      	ldr	r3, [pc, #100]	; (13cc <CSIentryState+0x1f4>)
    1366:	701a      	strb	r2, [r3, #0]
    1368:	bd08      	pop	{r3, pc}
		SC();
    136a:	4b28      	ldr	r3, [pc, #160]	; (140c <CSIentryState+0x234>)
    136c:	4798      	blx	r3
    136e:	bd08      	pop	{r3, pc}
		RC();
    1370:	4b27      	ldr	r3, [pc, #156]	; (1410 <CSIentryState+0x238>)
    1372:	4798      	blx	r3
    1374:	bd08      	pop	{r3, pc}
		currentState = stateGround;
    1376:	2200      	movs	r2, #0
    1378:	4b14      	ldr	r3, [pc, #80]	; (13cc <CSIentryState+0x1f4>)
    137a:	701a      	strb	r2, [r3, #0]
    137c:	bd08      	pop	{r3, pc}
	currentState = stateGround;
    137e:	2200      	movs	r2, #0
    1380:	4b12      	ldr	r3, [pc, #72]	; (13cc <CSIentryState+0x1f4>)
    1382:	701a      	strb	r2, [r3, #0]
    1384:	bd08      	pop	{r3, pc}
	currentState = stateGround;
    1386:	2200      	movs	r2, #0
    1388:	4b10      	ldr	r3, [pc, #64]	; (13cc <CSIentryState+0x1f4>)
    138a:	701a      	strb	r2, [r3, #0]
    138c:	bd08      	pop	{r3, pc}
		currentState = stateGround;
    138e:	2200      	movs	r2, #0
    1390:	4b0e      	ldr	r3, [pc, #56]	; (13cc <CSIentryState+0x1f4>)
    1392:	701a      	strb	r2, [r3, #0]
    1394:	bd08      	pop	{r3, pc}
		currentState = stateCSIparam;
    1396:	2204      	movs	r2, #4
    1398:	4b0c      	ldr	r3, [pc, #48]	; (13cc <CSIentryState+0x1f4>)
    139a:	701a      	strb	r2, [r3, #0]
		CSIparamState(character);
    139c:	4b1d      	ldr	r3, [pc, #116]	; (1414 <CSIentryState+0x23c>)
    139e:	4798      	blx	r3
    13a0:	bd08      	pop	{r3, pc}
		currentState = stateCSIparam;
    13a2:	2204      	movs	r2, #4
    13a4:	4b09      	ldr	r3, [pc, #36]	; (13cc <CSIentryState+0x1f4>)
    13a6:	701a      	strb	r2, [r3, #0]
		CSIparamState(character);
    13a8:	4b1a      	ldr	r3, [pc, #104]	; (1414 <CSIentryState+0x23c>)
    13aa:	4798      	blx	r3
    13ac:	bd08      	pop	{r3, pc}
		currentState = stateCSIparam;
    13ae:	2204      	movs	r2, #4
    13b0:	4b06      	ldr	r3, [pc, #24]	; (13cc <CSIentryState+0x1f4>)
    13b2:	701a      	strb	r2, [r3, #0]
		CSIparamState(character);
    13b4:	4b17      	ldr	r3, [pc, #92]	; (1414 <CSIentryState+0x23c>)
    13b6:	4798      	blx	r3
    13b8:	bd08      	pop	{r3, pc}
		currentState = stateESC;
    13ba:	2201      	movs	r2, #1
    13bc:	4b03      	ldr	r3, [pc, #12]	; (13cc <CSIentryState+0x1f4>)
    13be:	701a      	strb	r2, [r3, #0]
    13c0:	bd08      	pop	{r3, pc}
		currentState = stateCSIignore;
    13c2:	2205      	movs	r2, #5
    13c4:	4b01      	ldr	r3, [pc, #4]	; (13cc <CSIentryState+0x1f4>)
    13c6:	701a      	strb	r2, [r3, #0]
    13c8:	bd08      	pop	{r3, pc}
    13ca:	bf00      	nop
    13cc:	200002f1 	.word	0x200002f1
    13d0:	00000655 	.word	0x00000655
    13d4:	00000799 	.word	0x00000799
    13d8:	000006f5 	.word	0x000006f5
    13dc:	00006028 	.word	0x00006028
    13e0:	0000605c 	.word	0x0000605c
    13e4:	00004c39 	.word	0x00004c39
    13e8:	00000839 	.word	0x00000839
    13ec:	000008d5 	.word	0x000008d5
    13f0:	00000969 	.word	0x00000969
    13f4:	00000a7d 	.word	0x00000a7d
    13f8:	000009fd 	.word	0x000009fd
    13fc:	00000b1d 	.word	0x00000b1d
    1400:	00000c41 	.word	0x00000c41
    1404:	00000d35 	.word	0x00000d35
    1408:	00001059 	.word	0x00001059
    140c:	00000365 	.word	0x00000365
    1410:	00000391 	.word	0x00000391
    1414:	00001179 	.word	0x00001179

00001418 <nextTab>:


int nextTab(int a) 
{
    1418:	b510      	push	{r4, lr}
    141a:	b0d0      	sub	sp, #320	; 0x140
    141c:	4604      	mov	r4, r0
	/*
	what data structures for tabs are most performant and is is big-o of 
	number of column or big-o of number of tabs shut the fuck up
	*/
	
	int tabArray[] =
    141e:	f44f 72a0 	mov.w	r2, #320	; 0x140
    1422:	4904      	ldr	r1, [pc, #16]	; (1434 <nextTab+0x1c>)
    1424:	4668      	mov	r0, sp
    1426:	4b04      	ldr	r3, [pc, #16]	; (1438 <nextTab+0x20>)
    1428:	4798      	blx	r3
		 72,72,72,72,72,72,72,72,
		 79,79,79,79,79,79,79,79
		};
	
	return tabArray[a];
}
    142a:	f85d 0024 	ldr.w	r0, [sp, r4, lsl #2]
    142e:	b050      	add	sp, #320	; 0x140
    1430:	bd10      	pop	{r4, pc}
    1432:	bf00      	nop
    1434:	00005ee8 	.word	0x00005ee8
    1438:	00004ab9 	.word	0x00004ab9

0000143c <groundState>:
{
    143c:	b570      	push	{r4, r5, r6, lr}
    143e:	4604      	mov	r4, r0
	clearQueues();									//parser and paramQueues cleared
    1440:	4b8b      	ldr	r3, [pc, #556]	; (1670 <groundState+0x234>)
    1442:	4798      	blx	r3
	if(character == 0x00)							//NUL 0x00 DO NOTHING
    1444:	2c07      	cmp	r4, #7
    1446:	f240 8081 	bls.w	154c <groundState+0x110>
	else if(character == 0x08)						//BS 0x08 Backspace
    144a:	2c08      	cmp	r4, #8
    144c:	d07b      	beq.n	1546 <groundState+0x10a>
	else if(character == 0x09)						//TAB 0x09 Horizontal Tab
    144e:	2c09      	cmp	r4, #9
    1450:	f000 8096 	beq.w	1580 <groundState+0x144>
	else if(character == 0x0A)						//LF 0x0A Line Feed
    1454:	2c0a      	cmp	r4, #10
    1456:	f000 80b4 	beq.w	15c2 <groundState+0x186>
	else if(character == 0x0B)						//VT 0x0B Vertical Tab
    145a:	2c0b      	cmp	r4, #11
    145c:	f000 812a 	beq.w	16b4 <groundState+0x278>
	else if(character == 0x0C)						//FF 0x0C Form Feed
    1460:	2c0c      	cmp	r4, #12
    1462:	f000 817e 	beq.w	1762 <groundState+0x326>
	else if(character == 0x0D)						//CR 0x0D Carriage Return
    1466:	2c0d      	cmp	r4, #13
    1468:	f000 81d2 	beq.w	1810 <groundState+0x3d4>
	else if(character == 0x0E)						//SO 0x0E Shift Out
    146c:	f1a4 030e 	sub.w	r3, r4, #14
    1470:	b2db      	uxtb	r3, r3
    1472:	2b0c      	cmp	r3, #12
    1474:	d96a      	bls.n	154c <groundState+0x110>
	else if(character == 0x1B)						//ESC 0x1B Escape
    1476:	2c1b      	cmp	r4, #27
    1478:	f000 81f0 	beq.w	185c <groundState+0x420>
	else if(character == 0x1C)						//FS 0x1C File Separator
    147c:	f1a4 031c 	sub.w	r3, r4, #28
    1480:	b2db      	uxtb	r3, r3
    1482:	2b03      	cmp	r3, #3
    1484:	d962      	bls.n	154c <groundState+0x110>
	else if(character == 0x7F)						//DEL 0x7F Delete
    1486:	2c7f      	cmp	r4, #127	; 0x7f
    1488:	d060      	beq.n	154c <groundState+0x110>
		consoleDisplay[xCharPos][yCharPos] = character;
    148a:	4b7a      	ldr	r3, [pc, #488]	; (1674 <groundState+0x238>)
    148c:	881a      	ldrh	r2, [r3, #0]
    148e:	4b7a      	ldr	r3, [pc, #488]	; (1678 <groundState+0x23c>)
    1490:	881b      	ldrh	r3, [r3, #0]
    1492:	2118      	movs	r1, #24
    1494:	4879      	ldr	r0, [pc, #484]	; (167c <groundState+0x240>)
    1496:	fb01 0102 	mla	r1, r1, r2, r0
    149a:	54cc      	strb	r4, [r1, r3]
		if(textReverseVideo == true)  //If this is reverse Text
    149c:	4978      	ldr	r1, [pc, #480]	; (1680 <groundState+0x244>)
    149e:	7809      	ldrb	r1, [r1, #0]
    14a0:	2900      	cmp	r1, #0
    14a2:	f000 81df 	beq.w	1864 <groundState+0x428>
			SetBit(consoleSGR[xCharPos][yCharPos],7);
    14a6:	2118      	movs	r1, #24
    14a8:	4876      	ldr	r0, [pc, #472]	; (1684 <groundState+0x248>)
    14aa:	fb01 0102 	mla	r1, r1, r2, r0
    14ae:	5cc8      	ldrb	r0, [r1, r3]
    14b0:	f060 007f 	orn	r0, r0, #127	; 0x7f
    14b4:	54c8      	strb	r0, [r1, r3]
		if(textBold == true)
    14b6:	4974      	ldr	r1, [pc, #464]	; (1688 <groundState+0x24c>)
    14b8:	7809      	ldrb	r1, [r1, #0]
    14ba:	2900      	cmp	r1, #0
    14bc:	f000 81db 	beq.w	1876 <groundState+0x43a>
			SetBit(consoleSGR[xCharPos][yCharPos],1);
    14c0:	2118      	movs	r1, #24
    14c2:	4870      	ldr	r0, [pc, #448]	; (1684 <groundState+0x248>)
    14c4:	fb01 0102 	mla	r1, r1, r2, r0
    14c8:	5cc8      	ldrb	r0, [r1, r3]
    14ca:	f040 0002 	orr.w	r0, r0, #2
    14ce:	54c8      	strb	r0, [r1, r3]
		if(textUnderscore == true)
    14d0:	496e      	ldr	r1, [pc, #440]	; (168c <groundState+0x250>)
    14d2:	7809      	ldrb	r1, [r1, #0]
    14d4:	2900      	cmp	r1, #0
    14d6:	f000 81d7 	beq.w	1888 <groundState+0x44c>
			SetBit(consoleSGR[xCharPos][yCharPos],4);
    14da:	2118      	movs	r1, #24
    14dc:	4869      	ldr	r0, [pc, #420]	; (1684 <groundState+0x248>)
    14de:	fb01 0102 	mla	r1, r1, r2, r0
    14e2:	5cc8      	ldrb	r0, [r1, r3]
    14e4:	f040 0010 	orr.w	r0, r0, #16
    14e8:	54c8      	strb	r0, [r1, r3]
		if(textBlink == true)
    14ea:	4969      	ldr	r1, [pc, #420]	; (1690 <groundState+0x254>)
    14ec:	7809      	ldrb	r1, [r1, #0]
    14ee:	2900      	cmp	r1, #0
    14f0:	f000 81d3 	beq.w	189a <groundState+0x45e>
			SetBit(consoleSGR[xCharPos][yCharPos],5);
    14f4:	2118      	movs	r1, #24
    14f6:	4863      	ldr	r0, [pc, #396]	; (1684 <groundState+0x248>)
    14f8:	fb01 0102 	mla	r1, r1, r2, r0
    14fc:	5cc8      	ldrb	r0, [r1, r3]
    14fe:	f040 0020 	orr.w	r0, r0, #32
    1502:	54c8      	strb	r0, [r1, r3]
		consoleColors[xCharPos][yCharPos] = (textForeground << 16) | textBackground;
    1504:	2518      	movs	r5, #24
    1506:	fb05 3302 	mla	r3, r5, r2, r3
    150a:	4a62      	ldr	r2, [pc, #392]	; (1694 <groundState+0x258>)
    150c:	8811      	ldrh	r1, [r2, #0]
    150e:	4a62      	ldr	r2, [pc, #392]	; (1698 <groundState+0x25c>)
    1510:	8812      	ldrh	r2, [r2, #0]
    1512:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    1516:	4961      	ldr	r1, [pc, #388]	; (169c <groundState+0x260>)
    1518:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		drawChar(consoleDisplay[xCharPos][yCharPos]);
    151c:	4620      	mov	r0, r4
    151e:	4e60      	ldr	r6, [pc, #384]	; (16a0 <groundState+0x264>)
    1520:	47b0      	blx	r6
		xCharPos++;
    1522:	4c54      	ldr	r4, [pc, #336]	; (1674 <groundState+0x238>)
    1524:	8823      	ldrh	r3, [r4, #0]
    1526:	3301      	adds	r3, #1
    1528:	b29b      	uxth	r3, r3
    152a:	8023      	strh	r3, [r4, #0]
		drawChar(consoleDisplay[xCharPos][yCharPos]);
    152c:	4a52      	ldr	r2, [pc, #328]	; (1678 <groundState+0x23c>)
    152e:	8812      	ldrh	r2, [r2, #0]
    1530:	4952      	ldr	r1, [pc, #328]	; (167c <groundState+0x240>)
    1532:	fb05 1303 	mla	r3, r5, r3, r1
    1536:	5c98      	ldrb	r0, [r3, r2]
    1538:	47b0      	blx	r6
		if(xCharPos > 79)		//END OF LINE
    153a:	8823      	ldrh	r3, [r4, #0]
    153c:	2b4f      	cmp	r3, #79	; 0x4f
    153e:	d905      	bls.n	154c <groundState+0x110>
			xCharPos--;
    1540:	3b01      	subs	r3, #1
    1542:	8023      	strh	r3, [r4, #0]
}
    1544:	e002      	b.n	154c <groundState+0x110>
		if(xCharPos > 0)
    1546:	4b4b      	ldr	r3, [pc, #300]	; (1674 <groundState+0x238>)
    1548:	881b      	ldrh	r3, [r3, #0]
    154a:	b903      	cbnz	r3, 154e <groundState+0x112>
    154c:	bd70      	pop	{r4, r5, r6, pc}
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    154e:	4c4b      	ldr	r4, [pc, #300]	; (167c <groundState+0x240>)
    1550:	4d49      	ldr	r5, [pc, #292]	; (1678 <groundState+0x23c>)
    1552:	882a      	ldrh	r2, [r5, #0]
    1554:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1558:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    155c:	5c98      	ldrb	r0, [r3, r2]
    155e:	4e50      	ldr	r6, [pc, #320]	; (16a0 <groundState+0x264>)
    1560:	47b0      	blx	r6
			xCharPos--;
    1562:	4a44      	ldr	r2, [pc, #272]	; (1674 <groundState+0x238>)
    1564:	8813      	ldrh	r3, [r2, #0]
    1566:	3b01      	subs	r3, #1
    1568:	b29b      	uxth	r3, r3
    156a:	8013      	strh	r3, [r2, #0]
			tempCharacter = consoleDisplay[xCharPos][yCharPos];
    156c:	882a      	ldrh	r2, [r5, #0]
    156e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1572:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
			drawChar(tempCharacter);
    1576:	5c98      	ldrb	r0, [r3, r2]
    1578:	47b0      	blx	r6
			blinkCursor();
    157a:	4b4a      	ldr	r3, [pc, #296]	; (16a4 <groundState+0x268>)
    157c:	4798      	blx	r3
    157e:	bd70      	pop	{r4, r5, r6, pc}
		drawChar(consoleDisplay[xCharPos][yCharPos]);
    1580:	4c3c      	ldr	r4, [pc, #240]	; (1674 <groundState+0x238>)
    1582:	8823      	ldrh	r3, [r4, #0]
    1584:	4a3c      	ldr	r2, [pc, #240]	; (1678 <groundState+0x23c>)
    1586:	8811      	ldrh	r1, [r2, #0]
    1588:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    158c:	4a3b      	ldr	r2, [pc, #236]	; (167c <groundState+0x240>)
    158e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    1592:	5c58      	ldrb	r0, [r3, r1]
    1594:	4b42      	ldr	r3, [pc, #264]	; (16a0 <groundState+0x264>)
    1596:	4798      	blx	r3
		if(xCharPos <= 79)
    1598:	8820      	ldrh	r0, [r4, #0]
    159a:	284f      	cmp	r0, #79	; 0x4f
    159c:	d802      	bhi.n	15a4 <groundState+0x168>
			xCharPos = nextTab(xCharPos);
    159e:	4b42      	ldr	r3, [pc, #264]	; (16a8 <groundState+0x26c>)
    15a0:	4798      	blx	r3
    15a2:	8020      	strh	r0, [r4, #0]
		drawChar(consoleDisplay[xCharPos][yCharPos]);
    15a4:	4b33      	ldr	r3, [pc, #204]	; (1674 <groundState+0x238>)
    15a6:	881b      	ldrh	r3, [r3, #0]
    15a8:	4a33      	ldr	r2, [pc, #204]	; (1678 <groundState+0x23c>)
    15aa:	8811      	ldrh	r1, [r2, #0]
    15ac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    15b0:	4a32      	ldr	r2, [pc, #200]	; (167c <groundState+0x240>)
    15b2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    15b6:	5c58      	ldrb	r0, [r3, r1]
    15b8:	4b39      	ldr	r3, [pc, #228]	; (16a0 <groundState+0x264>)
    15ba:	4798      	blx	r3
		blinkCursor();
    15bc:	4b39      	ldr	r3, [pc, #228]	; (16a4 <groundState+0x268>)
    15be:	4798      	blx	r3
    15c0:	bd70      	pop	{r4, r5, r6, pc}
		if(yCharPos == 23)
    15c2:	4b2d      	ldr	r3, [pc, #180]	; (1678 <groundState+0x23c>)
    15c4:	881a      	ldrh	r2, [r3, #0]
    15c6:	2a17      	cmp	r2, #23
    15c8:	d032      	beq.n	1630 <groundState+0x1f4>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    15ca:	4c2c      	ldr	r4, [pc, #176]	; (167c <groundState+0x240>)
    15cc:	4d29      	ldr	r5, [pc, #164]	; (1674 <groundState+0x238>)
    15ce:	882b      	ldrh	r3, [r5, #0]
    15d0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    15d4:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    15d8:	5c98      	ldrb	r0, [r3, r2]
    15da:	4e31      	ldr	r6, [pc, #196]	; (16a0 <groundState+0x264>)
    15dc:	47b0      	blx	r6
			yCharPos++;
    15de:	4a26      	ldr	r2, [pc, #152]	; (1678 <groundState+0x23c>)
    15e0:	8813      	ldrh	r3, [r2, #0]
    15e2:	3301      	adds	r3, #1
    15e4:	b29b      	uxth	r3, r3
    15e6:	8013      	strh	r3, [r2, #0]
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    15e8:	882a      	ldrh	r2, [r5, #0]
    15ea:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    15ee:	eb04 04c2 	add.w	r4, r4, r2, lsl #3
    15f2:	5ce0      	ldrb	r0, [r4, r3]
    15f4:	47b0      	blx	r6
			blinkCursor();
    15f6:	4b2b      	ldr	r3, [pc, #172]	; (16a4 <groundState+0x268>)
    15f8:	4798      	blx	r3
		if(lineFeed)
    15fa:	4b2c      	ldr	r3, [pc, #176]	; (16ac <groundState+0x270>)
    15fc:	781b      	ldrb	r3, [r3, #0]
    15fe:	2b00      	cmp	r3, #0
    1600:	d0a4      	beq.n	154c <groundState+0x110>
			if(yCharPos == 23)
    1602:	4b1d      	ldr	r3, [pc, #116]	; (1678 <groundState+0x23c>)
    1604:	881a      	ldrh	r2, [r3, #0]
    1606:	2a17      	cmp	r2, #23
    1608:	d021      	beq.n	164e <groundState+0x212>
				drawChar(consoleDisplay[xCharPos][yCharPos]);
    160a:	4d1c      	ldr	r5, [pc, #112]	; (167c <groundState+0x240>)
    160c:	4e19      	ldr	r6, [pc, #100]	; (1674 <groundState+0x238>)
    160e:	8833      	ldrh	r3, [r6, #0]
    1610:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1614:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    1618:	5c98      	ldrb	r0, [r3, r2]
    161a:	4c21      	ldr	r4, [pc, #132]	; (16a0 <groundState+0x264>)
    161c:	47a0      	blx	r4
				xCharPos = 0;
    161e:	2300      	movs	r3, #0
    1620:	8033      	strh	r3, [r6, #0]
				drawChar(consoleDisplay[xCharPos][yCharPos]);
    1622:	4b15      	ldr	r3, [pc, #84]	; (1678 <groundState+0x23c>)
    1624:	881b      	ldrh	r3, [r3, #0]
    1626:	5ce8      	ldrb	r0, [r5, r3]
    1628:	47a0      	blx	r4
				blinkCursor();
    162a:	4b1e      	ldr	r3, [pc, #120]	; (16a4 <groundState+0x268>)
    162c:	4798      	blx	r3
    162e:	bd70      	pop	{r4, r5, r6, pc}
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    1630:	4b10      	ldr	r3, [pc, #64]	; (1674 <groundState+0x238>)
    1632:	881b      	ldrh	r3, [r3, #0]
    1634:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1638:	4a10      	ldr	r2, [pc, #64]	; (167c <groundState+0x240>)
    163a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    163e:	7dd8      	ldrb	r0, [r3, #23]
    1640:	4b17      	ldr	r3, [pc, #92]	; (16a0 <groundState+0x264>)
    1642:	4798      	blx	r3
			newLine();
    1644:	4b1a      	ldr	r3, [pc, #104]	; (16b0 <groundState+0x274>)
    1646:	4798      	blx	r3
			blinkCursor();
    1648:	4b16      	ldr	r3, [pc, #88]	; (16a4 <groundState+0x268>)
    164a:	4798      	blx	r3
    164c:	e7d5      	b.n	15fa <groundState+0x1be>
				drawChar(consoleDisplay[xCharPos][yCharPos]);
    164e:	4d09      	ldr	r5, [pc, #36]	; (1674 <groundState+0x238>)
    1650:	882b      	ldrh	r3, [r5, #0]
    1652:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1656:	4a09      	ldr	r2, [pc, #36]	; (167c <groundState+0x240>)
    1658:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    165c:	7dd8      	ldrb	r0, [r3, #23]
    165e:	4c10      	ldr	r4, [pc, #64]	; (16a0 <groundState+0x264>)
    1660:	47a0      	blx	r4
				xCharPos = 0;
    1662:	2000      	movs	r0, #0
    1664:	8028      	strh	r0, [r5, #0]
				drawChar(0x00);
    1666:	47a0      	blx	r4
				blinkCursor();
    1668:	4b0e      	ldr	r3, [pc, #56]	; (16a4 <groundState+0x268>)
    166a:	4798      	blx	r3
    166c:	bd70      	pop	{r4, r5, r6, pc}
    166e:	bf00      	nop
    1670:	000002b1 	.word	0x000002b1
    1674:	200002ec 	.word	0x200002ec
    1678:	200002ee 	.word	0x200002ee
    167c:	200003f4 	.word	0x200003f4
    1680:	2000038a 	.word	0x2000038a
    1684:	20000b74 	.word	0x20000b74
    1688:	20000388 	.word	0x20000388
    168c:	20000368 	.word	0x20000368
    1690:	2000036a 	.word	0x2000036a
    1694:	20000014 	.word	0x20000014
    1698:	2000022a 	.word	0x2000022a
    169c:	200012f4 	.word	0x200012f4
    16a0:	0000363d 	.word	0x0000363d
    16a4:	000037ed 	.word	0x000037ed
    16a8:	00001419 	.word	0x00001419
    16ac:	2000018c 	.word	0x2000018c
    16b0:	000039ad 	.word	0x000039ad
		if(yCharPos == 23)
    16b4:	4b7d      	ldr	r3, [pc, #500]	; (18ac <groundState+0x470>)
    16b6:	881a      	ldrh	r2, [r3, #0]
    16b8:	2a17      	cmp	r2, #23
    16ba:	d033      	beq.n	1724 <groundState+0x2e8>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    16bc:	4c7c      	ldr	r4, [pc, #496]	; (18b0 <groundState+0x474>)
    16be:	4d7d      	ldr	r5, [pc, #500]	; (18b4 <groundState+0x478>)
    16c0:	882b      	ldrh	r3, [r5, #0]
    16c2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    16c6:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    16ca:	5c98      	ldrb	r0, [r3, r2]
    16cc:	4e7a      	ldr	r6, [pc, #488]	; (18b8 <groundState+0x47c>)
    16ce:	47b0      	blx	r6
			yCharPos++;
    16d0:	4a76      	ldr	r2, [pc, #472]	; (18ac <groundState+0x470>)
    16d2:	8813      	ldrh	r3, [r2, #0]
    16d4:	3301      	adds	r3, #1
    16d6:	b29b      	uxth	r3, r3
    16d8:	8013      	strh	r3, [r2, #0]
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    16da:	882a      	ldrh	r2, [r5, #0]
    16dc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    16e0:	eb04 04c2 	add.w	r4, r4, r2, lsl #3
    16e4:	5ce0      	ldrb	r0, [r4, r3]
    16e6:	47b0      	blx	r6
			blinkCursor();
    16e8:	4b74      	ldr	r3, [pc, #464]	; (18bc <groundState+0x480>)
    16ea:	4798      	blx	r3
		if(lineFeed)
    16ec:	4b74      	ldr	r3, [pc, #464]	; (18c0 <groundState+0x484>)
    16ee:	781b      	ldrb	r3, [r3, #0]
    16f0:	2b00      	cmp	r3, #0
    16f2:	f43f af2b 	beq.w	154c <groundState+0x110>
			if(yCharPos == 23)
    16f6:	4b6d      	ldr	r3, [pc, #436]	; (18ac <groundState+0x470>)
    16f8:	881a      	ldrh	r2, [r3, #0]
    16fa:	2a17      	cmp	r2, #23
    16fc:	d021      	beq.n	1742 <groundState+0x306>
				drawChar(consoleDisplay[xCharPos][yCharPos]);
    16fe:	4d6c      	ldr	r5, [pc, #432]	; (18b0 <groundState+0x474>)
    1700:	4e6c      	ldr	r6, [pc, #432]	; (18b4 <groundState+0x478>)
    1702:	8833      	ldrh	r3, [r6, #0]
    1704:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1708:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    170c:	5c98      	ldrb	r0, [r3, r2]
    170e:	4c6a      	ldr	r4, [pc, #424]	; (18b8 <groundState+0x47c>)
    1710:	47a0      	blx	r4
				xCharPos = 0;
    1712:	2300      	movs	r3, #0
    1714:	8033      	strh	r3, [r6, #0]
				drawChar(consoleDisplay[xCharPos][yCharPos]);
    1716:	4b65      	ldr	r3, [pc, #404]	; (18ac <groundState+0x470>)
    1718:	881b      	ldrh	r3, [r3, #0]
    171a:	5ce8      	ldrb	r0, [r5, r3]
    171c:	47a0      	blx	r4
				blinkCursor();
    171e:	4b67      	ldr	r3, [pc, #412]	; (18bc <groundState+0x480>)
    1720:	4798      	blx	r3
    1722:	bd70      	pop	{r4, r5, r6, pc}
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    1724:	4b63      	ldr	r3, [pc, #396]	; (18b4 <groundState+0x478>)
    1726:	881b      	ldrh	r3, [r3, #0]
    1728:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    172c:	4a60      	ldr	r2, [pc, #384]	; (18b0 <groundState+0x474>)
    172e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    1732:	7dd8      	ldrb	r0, [r3, #23]
    1734:	4b60      	ldr	r3, [pc, #384]	; (18b8 <groundState+0x47c>)
    1736:	4798      	blx	r3
			newLine();
    1738:	4b62      	ldr	r3, [pc, #392]	; (18c4 <groundState+0x488>)
    173a:	4798      	blx	r3
			blinkCursor();
    173c:	4b5f      	ldr	r3, [pc, #380]	; (18bc <groundState+0x480>)
    173e:	4798      	blx	r3
    1740:	e7d4      	b.n	16ec <groundState+0x2b0>
				drawChar(consoleDisplay[xCharPos][yCharPos]);
    1742:	4d5c      	ldr	r5, [pc, #368]	; (18b4 <groundState+0x478>)
    1744:	882b      	ldrh	r3, [r5, #0]
    1746:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    174a:	4a59      	ldr	r2, [pc, #356]	; (18b0 <groundState+0x474>)
    174c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    1750:	7dd8      	ldrb	r0, [r3, #23]
    1752:	4c59      	ldr	r4, [pc, #356]	; (18b8 <groundState+0x47c>)
    1754:	47a0      	blx	r4
				xCharPos = 0;
    1756:	2000      	movs	r0, #0
    1758:	8028      	strh	r0, [r5, #0]
				drawChar(0x00);
    175a:	47a0      	blx	r4
				blinkCursor();
    175c:	4b57      	ldr	r3, [pc, #348]	; (18bc <groundState+0x480>)
    175e:	4798      	blx	r3
    1760:	bd70      	pop	{r4, r5, r6, pc}
		if(yCharPos == 23)
    1762:	4b52      	ldr	r3, [pc, #328]	; (18ac <groundState+0x470>)
    1764:	881a      	ldrh	r2, [r3, #0]
    1766:	2a17      	cmp	r2, #23
    1768:	d033      	beq.n	17d2 <groundState+0x396>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    176a:	4c51      	ldr	r4, [pc, #324]	; (18b0 <groundState+0x474>)
    176c:	4d51      	ldr	r5, [pc, #324]	; (18b4 <groundState+0x478>)
    176e:	882b      	ldrh	r3, [r5, #0]
    1770:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1774:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    1778:	5c98      	ldrb	r0, [r3, r2]
    177a:	4e4f      	ldr	r6, [pc, #316]	; (18b8 <groundState+0x47c>)
    177c:	47b0      	blx	r6
			yCharPos++;
    177e:	4a4b      	ldr	r2, [pc, #300]	; (18ac <groundState+0x470>)
    1780:	8813      	ldrh	r3, [r2, #0]
    1782:	3301      	adds	r3, #1
    1784:	b29b      	uxth	r3, r3
    1786:	8013      	strh	r3, [r2, #0]
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    1788:	882a      	ldrh	r2, [r5, #0]
    178a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    178e:	eb04 04c2 	add.w	r4, r4, r2, lsl #3
    1792:	5ce0      	ldrb	r0, [r4, r3]
    1794:	47b0      	blx	r6
			blinkCursor();
    1796:	4b49      	ldr	r3, [pc, #292]	; (18bc <groundState+0x480>)
    1798:	4798      	blx	r3
		if(lineFeed)
    179a:	4b49      	ldr	r3, [pc, #292]	; (18c0 <groundState+0x484>)
    179c:	781b      	ldrb	r3, [r3, #0]
    179e:	2b00      	cmp	r3, #0
    17a0:	f43f aed4 	beq.w	154c <groundState+0x110>
			if(yCharPos == 23)
    17a4:	4b41      	ldr	r3, [pc, #260]	; (18ac <groundState+0x470>)
    17a6:	881a      	ldrh	r2, [r3, #0]
    17a8:	2a17      	cmp	r2, #23
    17aa:	d021      	beq.n	17f0 <groundState+0x3b4>
				drawChar(consoleDisplay[xCharPos][yCharPos]);
    17ac:	4d40      	ldr	r5, [pc, #256]	; (18b0 <groundState+0x474>)
    17ae:	4e41      	ldr	r6, [pc, #260]	; (18b4 <groundState+0x478>)
    17b0:	8833      	ldrh	r3, [r6, #0]
    17b2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    17b6:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    17ba:	5c98      	ldrb	r0, [r3, r2]
    17bc:	4c3e      	ldr	r4, [pc, #248]	; (18b8 <groundState+0x47c>)
    17be:	47a0      	blx	r4
				xCharPos = 0;
    17c0:	2300      	movs	r3, #0
    17c2:	8033      	strh	r3, [r6, #0]
				drawChar(consoleDisplay[xCharPos][yCharPos]);
    17c4:	4b39      	ldr	r3, [pc, #228]	; (18ac <groundState+0x470>)
    17c6:	881b      	ldrh	r3, [r3, #0]
    17c8:	5ce8      	ldrb	r0, [r5, r3]
    17ca:	47a0      	blx	r4
				blinkCursor();
    17cc:	4b3b      	ldr	r3, [pc, #236]	; (18bc <groundState+0x480>)
    17ce:	4798      	blx	r3
    17d0:	bd70      	pop	{r4, r5, r6, pc}
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    17d2:	4b38      	ldr	r3, [pc, #224]	; (18b4 <groundState+0x478>)
    17d4:	881b      	ldrh	r3, [r3, #0]
    17d6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    17da:	4a35      	ldr	r2, [pc, #212]	; (18b0 <groundState+0x474>)
    17dc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    17e0:	7dd8      	ldrb	r0, [r3, #23]
    17e2:	4b35      	ldr	r3, [pc, #212]	; (18b8 <groundState+0x47c>)
    17e4:	4798      	blx	r3
			newLine();
    17e6:	4b37      	ldr	r3, [pc, #220]	; (18c4 <groundState+0x488>)
    17e8:	4798      	blx	r3
			blinkCursor();
    17ea:	4b34      	ldr	r3, [pc, #208]	; (18bc <groundState+0x480>)
    17ec:	4798      	blx	r3
    17ee:	e7d4      	b.n	179a <groundState+0x35e>
				drawChar(consoleDisplay[xCharPos][yCharPos]);
    17f0:	4d30      	ldr	r5, [pc, #192]	; (18b4 <groundState+0x478>)
    17f2:	882b      	ldrh	r3, [r5, #0]
    17f4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    17f8:	4a2d      	ldr	r2, [pc, #180]	; (18b0 <groundState+0x474>)
    17fa:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    17fe:	7dd8      	ldrb	r0, [r3, #23]
    1800:	4c2d      	ldr	r4, [pc, #180]	; (18b8 <groundState+0x47c>)
    1802:	47a0      	blx	r4
				xCharPos = 0;
    1804:	2000      	movs	r0, #0
    1806:	8028      	strh	r0, [r5, #0]
				drawChar(0x00);
    1808:	47a0      	blx	r4
				blinkCursor();
    180a:	4b2c      	ldr	r3, [pc, #176]	; (18bc <groundState+0x480>)
    180c:	4798      	blx	r3
    180e:	bd70      	pop	{r4, r5, r6, pc}
		if(yCharPos == 23)
    1810:	4b26      	ldr	r3, [pc, #152]	; (18ac <groundState+0x470>)
    1812:	881a      	ldrh	r2, [r3, #0]
    1814:	2a17      	cmp	r2, #23
    1816:	d012      	beq.n	183e <groundState+0x402>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    1818:	4d25      	ldr	r5, [pc, #148]	; (18b0 <groundState+0x474>)
    181a:	4e26      	ldr	r6, [pc, #152]	; (18b4 <groundState+0x478>)
    181c:	8833      	ldrh	r3, [r6, #0]
    181e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1822:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    1826:	5c98      	ldrb	r0, [r3, r2]
    1828:	4c23      	ldr	r4, [pc, #140]	; (18b8 <groundState+0x47c>)
    182a:	47a0      	blx	r4
			xCharPos = 0;
    182c:	2300      	movs	r3, #0
    182e:	8033      	strh	r3, [r6, #0]
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    1830:	4b1e      	ldr	r3, [pc, #120]	; (18ac <groundState+0x470>)
    1832:	881b      	ldrh	r3, [r3, #0]
    1834:	5ce8      	ldrb	r0, [r5, r3]
    1836:	47a0      	blx	r4
			blinkCursor();
    1838:	4b20      	ldr	r3, [pc, #128]	; (18bc <groundState+0x480>)
    183a:	4798      	blx	r3
    183c:	bd70      	pop	{r4, r5, r6, pc}
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    183e:	4c1d      	ldr	r4, [pc, #116]	; (18b4 <groundState+0x478>)
    1840:	8823      	ldrh	r3, [r4, #0]
    1842:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1846:	4a1a      	ldr	r2, [pc, #104]	; (18b0 <groundState+0x474>)
    1848:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    184c:	7dd8      	ldrb	r0, [r3, #23]
    184e:	4b1a      	ldr	r3, [pc, #104]	; (18b8 <groundState+0x47c>)
    1850:	4798      	blx	r3
			xCharPos = 0;
    1852:	2300      	movs	r3, #0
    1854:	8023      	strh	r3, [r4, #0]
			blinkCursor();
    1856:	4b19      	ldr	r3, [pc, #100]	; (18bc <groundState+0x480>)
    1858:	4798      	blx	r3
    185a:	bd70      	pop	{r4, r5, r6, pc}
		currentState = stateESC;
    185c:	2201      	movs	r2, #1
    185e:	4b1a      	ldr	r3, [pc, #104]	; (18c8 <groundState+0x48c>)
    1860:	701a      	strb	r2, [r3, #0]
    1862:	bd70      	pop	{r4, r5, r6, pc}
			ClearBit(consoleSGR[xCharPos][yCharPos],7);
    1864:	2118      	movs	r1, #24
    1866:	4819      	ldr	r0, [pc, #100]	; (18cc <groundState+0x490>)
    1868:	fb01 0102 	mla	r1, r1, r2, r0
    186c:	5cc8      	ldrb	r0, [r1, r3]
    186e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    1872:	54c8      	strb	r0, [r1, r3]
    1874:	e61f      	b.n	14b6 <groundState+0x7a>
			ClearBit(consoleSGR[xCharPos][yCharPos],1);
    1876:	2118      	movs	r1, #24
    1878:	4814      	ldr	r0, [pc, #80]	; (18cc <groundState+0x490>)
    187a:	fb01 0102 	mla	r1, r1, r2, r0
    187e:	5cc8      	ldrb	r0, [r1, r3]
    1880:	f020 0002 	bic.w	r0, r0, #2
    1884:	54c8      	strb	r0, [r1, r3]
    1886:	e623      	b.n	14d0 <groundState+0x94>
			ClearBit(consoleSGR[xCharPos][yCharPos],4);
    1888:	2118      	movs	r1, #24
    188a:	4810      	ldr	r0, [pc, #64]	; (18cc <groundState+0x490>)
    188c:	fb01 0102 	mla	r1, r1, r2, r0
    1890:	5cc8      	ldrb	r0, [r1, r3]
    1892:	f020 0010 	bic.w	r0, r0, #16
    1896:	54c8      	strb	r0, [r1, r3]
    1898:	e627      	b.n	14ea <groundState+0xae>
			ClearBit(consoleSGR[xCharPos][yCharPos],5);
    189a:	2118      	movs	r1, #24
    189c:	480b      	ldr	r0, [pc, #44]	; (18cc <groundState+0x490>)
    189e:	fb01 0102 	mla	r1, r1, r2, r0
    18a2:	5cc8      	ldrb	r0, [r1, r3]
    18a4:	f020 0020 	bic.w	r0, r0, #32
    18a8:	54c8      	strb	r0, [r1, r3]
    18aa:	e62b      	b.n	1504 <groundState+0xc8>
    18ac:	200002ee 	.word	0x200002ee
    18b0:	200003f4 	.word	0x200003f4
    18b4:	200002ec 	.word	0x200002ec
    18b8:	0000363d 	.word	0x0000363d
    18bc:	000037ed 	.word	0x000037ed
    18c0:	2000018c 	.word	0x2000018c
    18c4:	000039ad 	.word	0x000039ad
    18c8:	200002f1 	.word	0x200002f1
    18cc:	20000b74 	.word	0x20000b74

000018d0 <parseChar>:
{
    18d0:	b508      	push	{r3, lr}
	parserState state = currentState;
    18d2:	4b0f      	ldr	r3, [pc, #60]	; (1910 <parseChar+0x40>)
	switch(state)
    18d4:	781b      	ldrb	r3, [r3, #0]
    18d6:	2b05      	cmp	r3, #5
    18d8:	d818      	bhi.n	190c <parseChar+0x3c>
    18da:	e8df f003 	tbb	[pc, r3]
    18de:	0603      	.short	0x0603
    18e0:	15120f09 	.word	0x15120f09
			groundState(character);
    18e4:	4b0b      	ldr	r3, [pc, #44]	; (1914 <parseChar+0x44>)
    18e6:	4798      	blx	r3
			break;
    18e8:	bd08      	pop	{r3, pc}
			escState(character);
    18ea:	4b0b      	ldr	r3, [pc, #44]	; (1918 <parseChar+0x48>)
    18ec:	4798      	blx	r3
			break;
    18ee:	bd08      	pop	{r3, pc}
	stateEnterBuffer = 0x00;
    18f0:	2300      	movs	r3, #0
    18f2:	4a0a      	ldr	r2, [pc, #40]	; (191c <parseChar+0x4c>)
    18f4:	7013      	strb	r3, [r2, #0]
	currentState = stateGround;
    18f6:	4a06      	ldr	r2, [pc, #24]	; (1910 <parseChar+0x40>)
    18f8:	7013      	strb	r3, [r2, #0]
    18fa:	bd08      	pop	{r3, pc}
			CSIentryState(character);
    18fc:	4b08      	ldr	r3, [pc, #32]	; (1920 <parseChar+0x50>)
    18fe:	4798      	blx	r3
			break;
    1900:	bd08      	pop	{r3, pc}
			CSIparamState(character);
    1902:	4b08      	ldr	r3, [pc, #32]	; (1924 <parseChar+0x54>)
    1904:	4798      	blx	r3
			break;
    1906:	bd08      	pop	{r3, pc}
			CSIignoreState(character);
    1908:	4b07      	ldr	r3, [pc, #28]	; (1928 <parseChar+0x58>)
    190a:	4798      	blx	r3
    190c:	bd08      	pop	{r3, pc}
    190e:	bf00      	nop
    1910:	200002f1 	.word	0x200002f1
    1914:	0000143d 	.word	0x0000143d
    1918:	00000571 	.word	0x00000571
    191c:	20000376 	.word	0x20000376
    1920:	000011d9 	.word	0x000011d9
    1924:	00001179 	.word	0x00001179
    1928:	00000345 	.word	0x00000345

0000192c <drawKare>:
//	graphic in the entire project. Please note this is the most
//	space efficient way to do this; a 40x31 bitmap is 930 bytes,
//	whereas	this is (104*2)+28+20, or 256 bytes.
/*********************************************************************/
void drawKare(int emotion)
{
    192c:	b5f0      	push	{r4, r5, r6, r7, lr}
    192e:	b0c1      	sub	sp, #260	; 0x104
    1930:	4607      	mov	r7, r0
	uint16_t body[104] = {10,10,20,20,20,0,380,10,380,10,390,20,0,
    1932:	4c2d      	ldr	r4, [pc, #180]	; (19e8 <drawKare+0xbc>)
    1934:	22d0      	movs	r2, #208	; 0xd0
    1936:	4621      	mov	r1, r4
    1938:	a80c      	add	r0, sp, #48	; 0x30
    193a:	4b2c      	ldr	r3, [pc, #176]	; (19ec <drawKare+0xc0>)
    193c:	4798      	blx	r3
		80,190,280,200,280,40,290,190,0,70,50,80,0,90,50,100,0,110,
		50,120,0,130,50,140,0,150,50,160,0,170,50,180,0,190,50,200,
		300,200,370,210,30,220,370,230,30,240,370,250,30,260,370,
		270,90,280,300,290};
	
	uint8_t happyTerm[28] = {180,80,190,130,170,130,190,140,140,
    193e:	ad05      	add	r5, sp, #20
    1940:	f104 06d0 	add.w	r6, r4, #208	; 0xd0
    1944:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    1946:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    1948:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    194c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		60,150,100,210,60,220,100,130,150,140,160,140,160,220,170,
	220,150,230,160};
	
	uint8_t rPiBeret[20] = {120,60,240,80,110,70,120,90,150,
    1950:	466d      	mov	r5, sp
    1952:	34ec      	adds	r4, #236	; 0xec
    1954:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    1956:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    1958:	6823      	ldr	r3, [r4, #0]
    195a:	602b      	str	r3, [r5, #0]
    195c:	ac0c      	add	r4, sp, #48	; 0x30
    195e:	ae40      	add	r6, sp, #256	; 0x100

	
	
	for(int i = 0; i < 104; i = i+4)
	{
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
    1960:	4d23      	ldr	r5, [pc, #140]	; (19f0 <drawKare+0xc4>)
		((body[i+1]/iSv)+(offsetGraphicY)),
		((body[i+2]/iSv)+(offsetGraphicX)),
		((body[i+3]/iSv)+(offsetGraphicY)));
    1962:	88e3      	ldrh	r3, [r4, #6]
    1964:	105b      	asrs	r3, r3, #1
		((body[i+2]/iSv)+(offsetGraphicX)),
    1966:	88a2      	ldrh	r2, [r4, #4]
    1968:	1052      	asrs	r2, r2, #1
		((body[i+1]/iSv)+(offsetGraphicY)),
    196a:	8861      	ldrh	r1, [r4, #2]
    196c:	1049      	asrs	r1, r1, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
    196e:	f834 0b08 	ldrh.w	r0, [r4], #8
    1972:	1040      	asrs	r0, r0, #1
    1974:	3396      	adds	r3, #150	; 0x96
    1976:	f502 7296 	add.w	r2, r2, #300	; 0x12c
    197a:	3196      	adds	r1, #150	; 0x96
    197c:	f500 7096 	add.w	r0, r0, #300	; 0x12c
    1980:	47a8      	blx	r5
	for(int i = 0; i < 104; i = i+4)
    1982:	42b4      	cmp	r4, r6
    1984:	d1ed      	bne.n	1962 <drawKare+0x36>
	}
	switch(emotion)
    1986:	b11f      	cbz	r7, 1990 <drawKare+0x64>
    1988:	2f01      	cmp	r7, #1
    198a:	d017      	beq.n	19bc <drawKare+0x90>
		break;
		case 2:
		//make a sad terminal thing go here
		break;
	}
}
    198c:	b041      	add	sp, #260	; 0x104
    198e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1990:	ac05      	add	r4, sp, #20
    1992:	ae0c      	add	r6, sp, #48	; 0x30
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
    1994:	4d16      	ldr	r5, [pc, #88]	; (19f0 <drawKare+0xc4>)
			((happyTerm[i+3]/iSv)+(offsetGraphicY)));
    1996:	78e3      	ldrb	r3, [r4, #3]
    1998:	105b      	asrs	r3, r3, #1
			((happyTerm[i+2]/iSv)+(offsetGraphicX)),
    199a:	78a2      	ldrb	r2, [r4, #2]
    199c:	1052      	asrs	r2, r2, #1
			((happyTerm[i+1]/iSv)+(offsetGraphicY)),
    199e:	7861      	ldrb	r1, [r4, #1]
    19a0:	1049      	asrs	r1, r1, #1
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
    19a2:	f814 0b04 	ldrb.w	r0, [r4], #4
    19a6:	1040      	asrs	r0, r0, #1
    19a8:	3396      	adds	r3, #150	; 0x96
    19aa:	f502 7296 	add.w	r2, r2, #300	; 0x12c
    19ae:	3196      	adds	r1, #150	; 0x96
    19b0:	f500 7096 	add.w	r0, r0, #300	; 0x12c
    19b4:	47a8      	blx	r5
		for(int i = 0; i < 28; i = i+4)
    19b6:	42a6      	cmp	r6, r4
    19b8:	d1ed      	bne.n	1996 <drawKare+0x6a>
    19ba:	e7e7      	b.n	198c <drawKare+0x60>
    19bc:	466c      	mov	r4, sp
    19be:	ae05      	add	r6, sp, #20
			fillRect((
    19c0:	4d0b      	ldr	r5, [pc, #44]	; (19f0 <drawKare+0xc4>)
			((rPiBeret[i+3]/iSv)+(offsetGraphicY)));
    19c2:	78e3      	ldrb	r3, [r4, #3]
    19c4:	105b      	asrs	r3, r3, #1
			((rPiBeret[i+2]/iSv)+(offsetGraphicX)),
    19c6:	78a2      	ldrb	r2, [r4, #2]
    19c8:	1052      	asrs	r2, r2, #1
			((rPiBeret[i+1]/iSv)+(offsetGraphicY)),
    19ca:	7861      	ldrb	r1, [r4, #1]
    19cc:	1049      	asrs	r1, r1, #1
			(rPiBeret[i]/iSv)+(offsetGraphicX)),
    19ce:	f814 0b04 	ldrb.w	r0, [r4], #4
    19d2:	1040      	asrs	r0, r0, #1
			fillRect((
    19d4:	3396      	adds	r3, #150	; 0x96
    19d6:	f502 7296 	add.w	r2, r2, #300	; 0x12c
    19da:	3196      	adds	r1, #150	; 0x96
    19dc:	f500 7096 	add.w	r0, r0, #300	; 0x12c
    19e0:	47a8      	blx	r5
		for(int i = 0; i < 20; i = i+4)
    19e2:	42b4      	cmp	r4, r6
    19e4:	d1ed      	bne.n	19c2 <drawKare+0x96>
    19e6:	e7d1      	b.n	198c <drawKare+0x60>
    19e8:	00006060 	.word	0x00006060
    19ec:	00004ab9 	.word	0x00004ab9
    19f0:	00004209 	.word	0x00004209

000019f4 <splashScreen>:

void splashScreen(void)
{
    19f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	static const char *splashText[32];
	splashText[0]  = "Trans rights are human rights";//
    19f8:	4c59      	ldr	r4, [pc, #356]	; (1b60 <splashScreen+0x16c>)
    19fa:	4b5a      	ldr	r3, [pc, #360]	; (1b64 <splashScreen+0x170>)
    19fc:	6023      	str	r3, [r4, #0]
	splashText[1]  = "13^5 + 16^5 = 17^5";//
    19fe:	4b5a      	ldr	r3, [pc, #360]	; (1b68 <splashScreen+0x174>)
    1a00:	6063      	str	r3, [r4, #4]
	splashText[2]  = "Reticulating Splines";//
    1a02:	4b5a      	ldr	r3, [pc, #360]	; (1b6c <splashScreen+0x178>)
    1a04:	60a3      	str	r3, [r4, #8]
	splashText[3]  = "violence.works";//
    1a06:	4b5a      	ldr	r3, [pc, #360]	; (1b70 <splashScreen+0x17c>)
    1a08:	60e3      	str	r3, [r4, #12]
	splashText[4]  = "Si + PB";//
    1a0a:	4b5a      	ldr	r3, [pc, #360]	; (1b74 <splashScreen+0x180>)
    1a0c:	6123      	str	r3, [r4, #16]
	splashText[5]  = "Kill Billionaires (and Trillionaire)";//
    1a0e:	4b5a      	ldr	r3, [pc, #360]	; (1b78 <splashScreen+0x184>)
    1a10:	6163      	str	r3, [r4, #20]
	splashText[6]  = "Interest in technology is not a personality";//
    1a12:	4b5a      	ldr	r3, [pc, #360]	; (1b7c <splashScreen+0x188>)
    1a14:	61a3      	str	r3, [r4, #24]
	splashText[7]  = "10 PRINT CHR$(205.5+RND(1)); : GOTO 10";//
    1a16:	4b5a      	ldr	r3, [pc, #360]	; (1b80 <splashScreen+0x18c>)
    1a18:	61e3      	str	r3, [r4, #28]
	splashText[8]  = "No gods. No masters. No external libraries.";//
    1a1a:	4b5a      	ldr	r3, [pc, #360]	; (1b84 <splashScreen+0x190>)
    1a1c:	6223      	str	r3, [r4, #32]
	splashText[9]  = "Kill Nazis";//
    1a1e:	4b5a      	ldr	r3, [pc, #360]	; (1b88 <splashScreen+0x194>)
    1a20:	6263      	str	r3, [r4, #36]	; 0x24
	splashText[10] = "Tiananmen Square 1989";//
    1a22:	4b5a      	ldr	r3, [pc, #360]	; (1b8c <splashScreen+0x198>)
    1a24:	62a3      	str	r3, [r4, #40]	; 0x28
	splashText[11] = "America was founded on slavery";
    1a26:	4b5a      	ldr	r3, [pc, #360]	; (1b90 <splashScreen+0x19c>)
    1a28:	62e3      	str	r3, [r4, #44]	; 0x2c
	splashText[12] = "There is only capital and labor";//
    1a2a:	4b5a      	ldr	r3, [pc, #360]	; (1b94 <splashScreen+0x1a0>)
    1a2c:	6323      	str	r3, [r4, #48]	; 0x30
	splashText[13] = "Encourage SYMMETRIC class warfare";//
    1a2e:	4b5a      	ldr	r3, [pc, #360]	; (1b98 <splashScreen+0x1a4>)
    1a30:	6363      	str	r3, [r4, #52]	; 0x34
	splashText[14] = "Vogon Poetry";//
    1a32:	4b5a      	ldr	r3, [pc, #360]	; (1b9c <splashScreen+0x1a8>)
    1a34:	63a3      	str	r3, [r4, #56]	; 0x38
	splashText[15] = "A Nice TTY";//
    1a36:	4b5a      	ldr	r3, [pc, #360]	; (1ba0 <splashScreen+0x1ac>)
    1a38:	63e3      	str	r3, [r4, #60]	; 0x3c
	splashText[16] = "Unix epoch minus 0xFF days";//
    1a3a:	4b5a      	ldr	r3, [pc, #360]	; (1ba4 <splashScreen+0x1b0>)
    1a3c:	6423      	str	r3, [r4, #64]	; 0x40
	splashText[17] = "i  = 0x5f3759df - ( i >> 1 );";//
    1a3e:	4b5a      	ldr	r3, [pc, #360]	; (1ba8 <splashScreen+0x1b4>)
    1a40:	6463      	str	r3, [r4, #68]	; 0x44
	splashText[18] = "Speak truth to power; I'm sure they'll listen this time.";//
    1a42:	4b5a      	ldr	r3, [pc, #360]	; (1bac <splashScreen+0x1b8>)
    1a44:	64a3      	str	r3, [r4, #72]	; 0x48
	splashText[19] = "Defcon's canceled (2020)";//
    1a46:	4b5a      	ldr	r3, [pc, #360]	; (1bb0 <splashScreen+0x1bc>)
    1a48:	64e3      	str	r3, [r4, #76]	; 0x4c
	splashText[20] = "Ratsnest: Nothing To Do!";//
    1a4a:	4b5a      	ldr	r3, [pc, #360]	; (1bb4 <splashScreen+0x1c0>)
    1a4c:	6523      	str	r3, [r4, #80]	; 0x50
	splashText[21] = "It has 69 keys.";//
    1a4e:	4b5a      	ldr	r3, [pc, #360]	; (1bb8 <splashScreen+0x1c4>)
    1a50:	6563      	str	r3, [r4, #84]	; 0x54
	splashText[22] = "Because VT-420 was already taken";//
    1a52:	4b5a      	ldr	r3, [pc, #360]	; (1bbc <splashScreen+0x1c8>)
    1a54:	65a3      	str	r3, [r4, #88]	; 0x58
	splashText[23] = "Compression algorithm based on BBP (1997)";//
    1a56:	4b5a      	ldr	r3, [pc, #360]	; (1bc0 <splashScreen+0x1cc>)
    1a58:	65e3      	str	r3, [r4, #92]	; 0x5c
	splashText[24] = "Teach health insurance providers to code.";
    1a5a:	4b5a      	ldr	r3, [pc, #360]	; (1bc4 <splashScreen+0x1d0>)
    1a5c:	6623      	str	r3, [r4, #96]	; 0x60
	splashText[25] = "Grand Central Hack The Planet";//
    1a5e:	4b5a      	ldr	r3, [pc, #360]	; (1bc8 <splashScreen+0x1d4>)
    1a60:	6663      	str	r3, [r4, #100]	; 0x64
	splashText[26] = "WiFi is not wireless Ethernet!";//
    1a62:	4b5a      	ldr	r3, [pc, #360]	; (1bcc <splashScreen+0x1d8>)
    1a64:	66a3      	str	r3, [r4, #104]	; 0x68
	splashText[27] = "Dummy thicc client";//
    1a66:	4b5a      	ldr	r3, [pc, #360]	; (1bd0 <splashScreen+0x1dc>)
    1a68:	66e3      	str	r3, [r4, #108]	; 0x6c
	splashText[28] = "A Nice TTY. An OK Computer.";//
    1a6a:	4b5a      	ldr	r3, [pc, #360]	; (1bd4 <splashScreen+0x1e0>)
    1a6c:	6723      	str	r3, [r4, #112]	; 0x70
	splashText[29] = "USTeledildonics";//
    1a6e:	4b5a      	ldr	r3, [pc, #360]	; (1bd8 <splashScreen+0x1e4>)
    1a70:	6763      	str	r3, [r4, #116]	; 0x74
	splashText[30] = "Solidarity is not a new framework";//
    1a72:	4b5a      	ldr	r3, [pc, #360]	; (1bdc <splashScreen+0x1e8>)
    1a74:	67a3      	str	r3, [r4, #120]	; 0x78
	splashText[31] = "Breadboarding Is Not A Crime";//
    1a76:	4b5a      	ldr	r3, [pc, #360]	; (1be0 <splashScreen+0x1ec>)
    1a78:	67e3      	str	r3, [r4, #124]	; 0x7c
	splashText[32] = "Off by one errors are common";
    1a7a:	4b5a      	ldr	r3, [pc, #360]	; (1be4 <splashScreen+0x1f0>)
    1a7c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	
	const char *textPhrase = splashText[(((rand())%32))];
    1a80:	4b59      	ldr	r3, [pc, #356]	; (1be8 <splashScreen+0x1f4>)
    1a82:	4798      	blx	r3
    1a84:	4242      	negs	r2, r0
    1a86:	f000 031f 	and.w	r3, r0, #31
    1a8a:	f002 021f 	and.w	r2, r2, #31
    1a8e:	bf58      	it	pl
    1a90:	4253      	negpl	r3, r2
    1a92:	f854 6023 	ldr.w	r6, [r4, r3, lsl #2]
	
	clearScreen();
    1a96:	4b55      	ldr	r3, [pc, #340]	; (1bec <splashScreen+0x1f8>)
    1a98:	4798      	blx	r3
	setColorRGB(255,255,255);
    1a9a:	22ff      	movs	r2, #255	; 0xff
    1a9c:	4611      	mov	r1, r2
    1a9e:	4610      	mov	r0, r2
    1aa0:	4b53      	ldr	r3, [pc, #332]	; (1bf0 <splashScreen+0x1fc>)
    1aa2:	4798      	blx	r3
	
	REG_PORT_DIRTGL1 = PORT_PB31;
    1aa4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    1aa8:	4b52      	ldr	r3, [pc, #328]	; (1bf4 <splashScreen+0x200>)
    1aaa:	601a      	str	r2, [r3, #0]
	PORT->Group[1].PINCFG[31].bit.PULLEN = 1;
    1aac:	3b8c      	subs	r3, #140	; 0x8c
    1aae:	f893 20df 	ldrb.w	r2, [r3, #223]	; 0xdf
    1ab2:	f042 0204 	orr.w	r2, r2, #4
    1ab6:	f883 20df 	strb.w	r2, [r3, #223]	; 0xdf
	PORT->Group[1].PINCFG[31].bit.INEN = 1;
    1aba:	f893 20df 	ldrb.w	r2, [r3, #223]	; 0xdf
    1abe:	f042 0202 	orr.w	r2, r2, #2
    1ac2:	f883 20df 	strb.w	r2, [r3, #223]	; 0xdf
	if((PORT->Group[1].IN.reg & PORT_PB31) != 0)
    1ac6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    1aca:	2b00      	cmp	r3, #0
    1acc:	db07      	blt.n	1ade <splashScreen+0xea>
		//This is the 'pi' graphic; put some codes
		//here to handle setting up the uarts.
		drawKare(1);
	}
	else
	drawKare(0); //The normal graphic
    1ace:	2000      	movs	r0, #0
    1ad0:	4b49      	ldr	r3, [pc, #292]	; (1bf8 <splashScreen+0x204>)
    1ad2:	4798      	blx	r3
    1ad4:	4b49      	ldr	r3, [pc, #292]	; (1bfc <splashScreen+0x208>)
    1ad6:	f503 50f0 	add.w	r0, r3, #7680	; 0x1e00
	
	for(int i = 0 ; i < 80 ; i++)
	{
		for(int j = 0 ; j < 24 ; j++)
		{
			consoleColors[i][j] = 0xFFFF0000;
    1ada:	4949      	ldr	r1, [pc, #292]	; (1c00 <splashScreen+0x20c>)
    1adc:	e006      	b.n	1aec <splashScreen+0xf8>
		drawKare(1);
    1ade:	2001      	movs	r0, #1
    1ae0:	4b45      	ldr	r3, [pc, #276]	; (1bf8 <splashScreen+0x204>)
    1ae2:	4798      	blx	r3
    1ae4:	e7f6      	b.n	1ad4 <splashScreen+0xe0>
    1ae6:	4613      	mov	r3, r2
	for(int i = 0 ; i < 80 ; i++)
    1ae8:	4290      	cmp	r0, r2
    1aea:	d006      	beq.n	1afa <splashScreen+0x106>
    1aec:	f103 0260 	add.w	r2, r3, #96	; 0x60
			consoleColors[i][j] = 0xFFFF0000;
    1af0:	f843 1b04 	str.w	r1, [r3], #4
		for(int j = 0 ; j < 24 ; j++)
    1af4:	4293      	cmp	r3, r2
    1af6:	d1fb      	bne.n	1af0 <splashScreen+0xfc>
    1af8:	e7f5      	b.n	1ae6 <splashScreen+0xf2>
	}
	
	//setColorHex(defaultForegroundColor);
	//setBackColorHex(defaultBackgroundColor);
	
	xCharPos = 40 - (strlen(textPhrase)/2);
    1afa:	4630      	mov	r0, r6
    1afc:	4f41      	ldr	r7, [pc, #260]	; (1c04 <splashScreen+0x210>)
    1afe:	47b8      	blx	r7
    1b00:	4d41      	ldr	r5, [pc, #260]	; (1c08 <splashScreen+0x214>)
    1b02:	0843      	lsrs	r3, r0, #1
    1b04:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
    1b08:	802b      	strh	r3, [r5, #0]
	yCharPos = 16;
    1b0a:	4c40      	ldr	r4, [pc, #256]	; (1c0c <splashScreen+0x218>)
    1b0c:	2310      	movs	r3, #16
    1b0e:	8023      	strh	r3, [r4, #0]
	writeString(textPhrase);
    1b10:	4630      	mov	r0, r6
    1b12:	4e3f      	ldr	r6, [pc, #252]	; (1c10 <splashScreen+0x21c>)
    1b14:	47b0      	blx	r6
	
	
	xCharPos = 40 - (strlen(versionLabel)/2);
    1b16:	f8df 8104 	ldr.w	r8, [pc, #260]	; 1c1c <splashScreen+0x228>
    1b1a:	4640      	mov	r0, r8
    1b1c:	47b8      	blx	r7
    1b1e:	0843      	lsrs	r3, r0, #1
    1b20:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
    1b24:	802b      	strh	r3, [r5, #0]
	yCharPos = 18;
    1b26:	2312      	movs	r3, #18
    1b28:	8023      	strh	r3, [r4, #0]
	writeString(versionLabel);
    1b2a:	4640      	mov	r0, r8
    1b2c:	47b0      	blx	r6
	
	xCharPos = 40 - (strlen(compileTime)/2);
    1b2e:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 1c20 <splashScreen+0x22c>
    1b32:	4640      	mov	r0, r8
    1b34:	47b8      	blx	r7
    1b36:	0843      	lsrs	r3, r0, #1
    1b38:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
    1b3c:	802b      	strh	r3, [r5, #0]
	yCharPos = 19;
    1b3e:	2313      	movs	r3, #19
    1b40:	8023      	strh	r3, [r4, #0]
	writeString(compileTime);
    1b42:	4640      	mov	r0, r8
    1b44:	47b0      	blx	r6
	
	
	delay_ms(3000);
    1b46:	f640 30b8 	movw	r0, #3000	; 0xbb8
    1b4a:	4b32      	ldr	r3, [pc, #200]	; (1c14 <splashScreen+0x220>)
    1b4c:	4798      	blx	r3
		
	clearScreen();
    1b4e:	4b27      	ldr	r3, [pc, #156]	; (1bec <splashScreen+0x1f8>)
    1b50:	4798      	blx	r3
	nullifyConsole();
    1b52:	4b31      	ldr	r3, [pc, #196]	; (1c18 <splashScreen+0x224>)
    1b54:	4798      	blx	r3
	//setColorRGB(0,255,0);
	//setBackColorRGB(0,0,0);
	
	//Setting the xChar and yChar position has to come
	//after splashScreen() and InitLCD();
	xCharPos = 0;
    1b56:	2300      	movs	r3, #0
    1b58:	802b      	strh	r3, [r5, #0]
	yCharPos = 0;
    1b5a:	8023      	strh	r3, [r4, #0]
    1b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1b60:	2000022c 	.word	0x2000022c
    1b64:	00006160 	.word	0x00006160
    1b68:	00006180 	.word	0x00006180
    1b6c:	00006194 	.word	0x00006194
    1b70:	000061ac 	.word	0x000061ac
    1b74:	000061bc 	.word	0x000061bc
    1b78:	000061c4 	.word	0x000061c4
    1b7c:	000061ec 	.word	0x000061ec
    1b80:	00006218 	.word	0x00006218
    1b84:	00006240 	.word	0x00006240
    1b88:	0000626c 	.word	0x0000626c
    1b8c:	00006278 	.word	0x00006278
    1b90:	00006290 	.word	0x00006290
    1b94:	000062b0 	.word	0x000062b0
    1b98:	000062d0 	.word	0x000062d0
    1b9c:	000062f4 	.word	0x000062f4
    1ba0:	00006304 	.word	0x00006304
    1ba4:	00006310 	.word	0x00006310
    1ba8:	0000632c 	.word	0x0000632c
    1bac:	0000634c 	.word	0x0000634c
    1bb0:	00006388 	.word	0x00006388
    1bb4:	000063a4 	.word	0x000063a4
    1bb8:	000063c0 	.word	0x000063c0
    1bbc:	000063d0 	.word	0x000063d0
    1bc0:	000063f4 	.word	0x000063f4
    1bc4:	00006420 	.word	0x00006420
    1bc8:	0000644c 	.word	0x0000644c
    1bcc:	0000646c 	.word	0x0000646c
    1bd0:	0000648c 	.word	0x0000648c
    1bd4:	000064a0 	.word	0x000064a0
    1bd8:	000064bc 	.word	0x000064bc
    1bdc:	000064cc 	.word	0x000064cc
    1be0:	000064f0 	.word	0x000064f0
    1be4:	00006510 	.word	0x00006510
    1be8:	00004ce1 	.word	0x00004ce1
    1bec:	000042c9 	.word	0x000042c9
    1bf0:	000040cd 	.word	0x000040cd
    1bf4:	4100448c 	.word	0x4100448c
    1bf8:	0000192d 	.word	0x0000192d
    1bfc:	200012f4 	.word	0x200012f4
    1c00:	ffff0000 	.word	0xffff0000
    1c04:	00004eff 	.word	0x00004eff
    1c08:	200002ec 	.word	0x200002ec
    1c0c:	200002ee 	.word	0x200002ee
    1c10:	00003a89 	.word	0x00003a89
    1c14:	00001cb5 	.word	0x00001cb5
    1c18:	00003ac1 	.word	0x00003ac1
    1c1c:	20000198 	.word	0x20000198
    1c20:	20000170 	.word	0x20000170

00001c24 <parseRXBuffer>:
char tempCharacter;

cbuf_handle_t ouroboros;	

void parseRXBuffer(void)
{
    1c24:	b570      	push	{r4, r5, r6, lr}
    1c26:	b082      	sub	sp, #8
		while(!ring_empty(ouroboros))
    1c28:	4c0a      	ldr	r4, [pc, #40]	; (1c54 <parseRXBuffer+0x30>)
    1c2a:	4d0b      	ldr	r5, [pc, #44]	; (1c58 <parseRXBuffer+0x34>)
		{
			uint8_t characterFromRingBuffer;
			ring_get(ouroboros, &characterFromRingBuffer);
    1c2c:	4e0b      	ldr	r6, [pc, #44]	; (1c5c <parseRXBuffer+0x38>)
		while(!ring_empty(ouroboros))
    1c2e:	e007      	b.n	1c40 <parseRXBuffer+0x1c>
			ring_get(ouroboros, &characterFromRingBuffer);
    1c30:	f10d 0107 	add.w	r1, sp, #7
    1c34:	6820      	ldr	r0, [r4, #0]
    1c36:	47b0      	blx	r6
			parseChar(characterFromRingBuffer);
    1c38:	f89d 0007 	ldrb.w	r0, [sp, #7]
    1c3c:	4b08      	ldr	r3, [pc, #32]	; (1c60 <parseRXBuffer+0x3c>)
    1c3e:	4798      	blx	r3
		while(!ring_empty(ouroboros))
    1c40:	6820      	ldr	r0, [r4, #0]
    1c42:	47a8      	blx	r5
    1c44:	2800      	cmp	r0, #0
    1c46:	d0f3      	beq.n	1c30 <parseRXBuffer+0xc>
		
		}
		ring_reset(ouroboros);
    1c48:	4b02      	ldr	r3, [pc, #8]	; (1c54 <parseRXBuffer+0x30>)
    1c4a:	6818      	ldr	r0, [r3, #0]
    1c4c:	4b05      	ldr	r3, [pc, #20]	; (1c64 <parseRXBuffer+0x40>)
    1c4e:	4798      	blx	r3
}
    1c50:	b002      	add	sp, #8
    1c52:	bd70      	pop	{r4, r5, r6, pc}
    1c54:	20000390 	.word	0x20000390
    1c58:	00000187 	.word	0x00000187
    1c5c:	0000019d 	.word	0x0000019d
    1c60:	000018d1 	.word	0x000018d1
    1c64:	00000141 	.word	0x00000141

00001c68 <sendChar>:

void sendChar(char character)
{
    1c68:	b508      	push	{r3, lr}
	printf("%c", character);
    1c6a:	4b01      	ldr	r3, [pc, #4]	; (1c70 <sendChar+0x8>)
    1c6c:	4798      	blx	r3
    1c6e:	bd08      	pop	{r3, pc}
    1c70:	00004c69 	.word	0x00004c69

00001c74 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    1c74:	b508      	push	{r3, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    1c76:	2000      	movs	r0, #0
    1c78:	4b08      	ldr	r3, [pc, #32]	; (1c9c <delay_init+0x28>)
    1c7a:	4798      	blx	r3
	cycles_per_ms /= 1000;
    1c7c:	4b08      	ldr	r3, [pc, #32]	; (1ca0 <delay_init+0x2c>)
    1c7e:	fba3 2300 	umull	r2, r3, r3, r0
    1c82:	099b      	lsrs	r3, r3, #6
    1c84:	4a07      	ldr	r2, [pc, #28]	; (1ca4 <delay_init+0x30>)
    1c86:	6013      	str	r3, [r2, #0]
	cycles_per_us = cycles_per_ms / 1000;
    1c88:	4b07      	ldr	r3, [pc, #28]	; (1ca8 <delay_init+0x34>)
    1c8a:	fba3 3000 	umull	r3, r0, r3, r0
    1c8e:	0c80      	lsrs	r0, r0, #18
    1c90:	4b06      	ldr	r3, [pc, #24]	; (1cac <delay_init+0x38>)
    1c92:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    1c94:	2205      	movs	r2, #5
    1c96:	4b06      	ldr	r3, [pc, #24]	; (1cb0 <delay_init+0x3c>)
    1c98:	601a      	str	r2, [r3, #0]
    1c9a:	bd08      	pop	{r3, pc}
    1c9c:	00003265 	.word	0x00003265
    1ca0:	10624dd3 	.word	0x10624dd3
    1ca4:	20000018 	.word	0x20000018
    1ca8:	431bde83 	.word	0x431bde83
    1cac:	2000001c 	.word	0x2000001c
    1cb0:	e000e010 	.word	0xe000e010

00001cb4 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    1cb4:	b410      	push	{r4}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    1cb6:	4b09      	ldr	r3, [pc, #36]	; (1cdc <delay_cycles_ms+0x28>)
    1cb8:	6819      	ldr	r1, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    1cba:	4a09      	ldr	r2, [pc, #36]	; (1ce0 <delay_cycles_ms+0x2c>)
		SysTick->VAL = 0;
    1cbc:	2400      	movs	r4, #0
	while (n--) {
    1cbe:	3801      	subs	r0, #1
    1cc0:	f1b0 3fff 	cmp.w	r0, #4294967295
    1cc4:	d008      	beq.n	1cd8 <delay_cycles_ms+0x24>
	if (n > 0) {
    1cc6:	2900      	cmp	r1, #0
    1cc8:	d0f9      	beq.n	1cbe <delay_cycles_ms+0xa>
		SysTick->LOAD = n;
    1cca:	6051      	str	r1, [r2, #4]
		SysTick->VAL = 0;
    1ccc:	6094      	str	r4, [r2, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1cce:	6813      	ldr	r3, [r2, #0]
    1cd0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1cd4:	d0fb      	beq.n	1cce <delay_cycles_ms+0x1a>
    1cd6:	e7f2      	b.n	1cbe <delay_cycles_ms+0xa>
	}
}
    1cd8:	bc10      	pop	{r4}
    1cda:	4770      	bx	lr
    1cdc:	20000018 	.word	0x20000018
    1ce0:	e000e010 	.word	0xe000e010

00001ce4 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    1ce4:	4b0b      	ldr	r3, [pc, #44]	; (1d14 <cpu_irq_enter_critical+0x30>)
    1ce6:	681b      	ldr	r3, [r3, #0]
    1ce8:	b92b      	cbnz	r3, 1cf6 <cpu_irq_enter_critical+0x12>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1cea:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    1cee:	b13b      	cbz	r3, 1d00 <cpu_irq_enter_critical+0x1c>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    1cf0:	2200      	movs	r2, #0
    1cf2:	4b09      	ldr	r3, [pc, #36]	; (1d18 <cpu_irq_enter_critical+0x34>)
    1cf4:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    1cf6:	4a07      	ldr	r2, [pc, #28]	; (1d14 <cpu_irq_enter_critical+0x30>)
    1cf8:	6813      	ldr	r3, [r2, #0]
    1cfa:	3301      	adds	r3, #1
    1cfc:	6013      	str	r3, [r2, #0]
    1cfe:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    1d00:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    1d02:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    1d06:	2200      	movs	r2, #0
    1d08:	4b04      	ldr	r3, [pc, #16]	; (1d1c <cpu_irq_enter_critical+0x38>)
    1d0a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    1d0c:	2201      	movs	r2, #1
    1d0e:	4b02      	ldr	r3, [pc, #8]	; (1d18 <cpu_irq_enter_critical+0x34>)
    1d10:	701a      	strb	r2, [r3, #0]
    1d12:	e7f0      	b.n	1cf6 <cpu_irq_enter_critical+0x12>
    1d14:	200002ac 	.word	0x200002ac
    1d18:	200002b0 	.word	0x200002b0
    1d1c:	20000020 	.word	0x20000020

00001d20 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    1d20:	4b07      	ldr	r3, [pc, #28]	; (1d40 <cpu_irq_leave_critical+0x20>)
    1d22:	681a      	ldr	r2, [r3, #0]
    1d24:	3a01      	subs	r2, #1
    1d26:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1d28:	681b      	ldr	r3, [r3, #0]
    1d2a:	b943      	cbnz	r3, 1d3e <cpu_irq_leave_critical+0x1e>
    1d2c:	4b05      	ldr	r3, [pc, #20]	; (1d44 <cpu_irq_leave_critical+0x24>)
    1d2e:	781b      	ldrb	r3, [r3, #0]
    1d30:	b12b      	cbz	r3, 1d3e <cpu_irq_leave_critical+0x1e>
		cpu_irq_enable();
    1d32:	2201      	movs	r2, #1
    1d34:	4b04      	ldr	r3, [pc, #16]	; (1d48 <cpu_irq_leave_critical+0x28>)
    1d36:	701a      	strb	r2, [r3, #0]
    1d38:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1d3c:	b662      	cpsie	i
    1d3e:	4770      	bx	lr
    1d40:	200002ac 	.word	0x200002ac
    1d44:	200002b0 	.word	0x200002b0
    1d48:	20000020 	.word	0x20000020

00001d4c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    1d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d4e:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    1d50:	2501      	movs	r5, #1
    1d52:	f88d 5005 	strb.w	r5, [sp, #5]
	config->powersave  = false;
    1d56:	2700      	movs	r7, #0
    1d58:	f88d 7006 	strb.w	r7, [sp, #6]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    1d5c:	ac02      	add	r4, sp, #8
    1d5e:	f804 5d04 	strb.w	r5, [r4, #-4]!
	port_pin_set_config(LED_0_PIN, &pin_conf);
    1d62:	4621      	mov	r1, r4
    1d64:	203e      	movs	r0, #62	; 0x3e
    1d66:	4e08      	ldr	r6, [pc, #32]	; (1d88 <system_board_init+0x3c>)
    1d68:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1d6a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1d6e:	4b07      	ldr	r3, [pc, #28]	; (1d8c <system_board_init+0x40>)
    1d70:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    1d74:	f88d 7004 	strb.w	r7, [sp, #4]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    1d78:	f88d 5005 	strb.w	r5, [sp, #5]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    1d7c:	4621      	mov	r1, r4
    1d7e:	200f      	movs	r0, #15
    1d80:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
    1d82:	b003      	add	sp, #12
    1d84:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d86:	bf00      	nop
    1d88:	00002369 	.word	0x00002369
    1d8c:	41004400 	.word	0x41004400

00001d90 <adc_get_config_defaults>:
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
    1d90:	2300      	movs	r3, #0
    1d92:	7003      	strb	r3, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
    1d94:	7043      	strb	r3, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
    1d96:	8043      	strh	r3, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
    1d98:	7103      	strb	r3, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
    1d9a:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
    1d9c:	6203      	str	r3, [r0, #32]
	config->window.window_lower_value     = 0;
    1d9e:	61c3      	str	r3, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
    1da0:	6083      	str	r3, [r0, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	//config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
    1da2:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
    1da6:	81c2      	strh	r2, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
    1da8:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
    1daa:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
    1dac:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
    1dae:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
    1db0:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
    1db2:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
	config->run_in_standby                = false;
    1db6:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
    1db8:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
    1dba:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
    1dbe:	84c3      	strh	r3, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
    1dc0:	8503      	strh	r3, [r0, #40]	; 0x28
	config->sample_length                 = 0;
    1dc2:	75c3      	strb	r3, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
    1dc4:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
	config->pin_scan.inputs_to_scan       = 0;
    1dc8:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
    1dcc:	4770      	bx	lr
	...

00001dd0 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
    1dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1dd4:	b099      	sub	sp, #100	; 0x64
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    1dd6:	6001      	str	r1, [r0, #0]
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    1dd8:	4c96      	ldr	r4, [pc, #600]	; (2034 <STACK_SIZE+0x34>)
    1dda:	6a23      	ldr	r3, [r4, #32]
    1ddc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    1de0:	6223      	str	r3, [r4, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    1de2:	780b      	ldrb	r3, [r1, #0]
    1de4:	f013 0f01 	tst.w	r3, #1
    1de8:	d003      	beq.n	1df2 <adc_init+0x22>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    1dea:	2005      	movs	r0, #5
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
    1dec:	b019      	add	sp, #100	; 0x64
    1dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    1df2:	780b      	ldrb	r3, [r1, #0]
    1df4:	f013 0f02 	tst.w	r3, #2
    1df8:	d001      	beq.n	1dfe <adc_init+0x2e>
		return STATUS_ERR_DENIED;
    1dfa:	201c      	movs	r0, #28
    1dfc:	e7f6      	b.n	1dec <adc_init+0x1c>
	module_inst->reference = config->reference;
    1dfe:	7853      	ldrb	r3, [r2, #1]
    1e00:	7103      	strb	r3, [r0, #4]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
    1e02:	b923      	cbnz	r3, 1e0e <adc_init+0x3e>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
    1e04:	498c      	ldr	r1, [pc, #560]	; (2038 <STACK_SIZE+0x38>)
    1e06:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    1e08:	f043 0304 	orr.w	r3, r3, #4
    1e0c:	640b      	str	r3, [r1, #64]	; 0x40
		module_inst->callback[i] = NULL;
    1e0e:	2300      	movs	r3, #0
    1e10:	6083      	str	r3, [r0, #8]
    1e12:	60c3      	str	r3, [r0, #12]
    1e14:	6103      	str	r3, [r0, #16]
	module_inst->registered_callback_mask = 0;
    1e16:	7683      	strb	r3, [r0, #26]
	module_inst->enabled_callback_mask = 0;
    1e18:	76c3      	strb	r3, [r0, #27]
	module_inst->remaining_conversions = 0;
    1e1a:	8303      	strh	r3, [r0, #24]
	module_inst->job_status = STATUS_OK;
    1e1c:	7703      	strb	r3, [r0, #28]
	_adc_instances[0] = module_inst;
    1e1e:	4b87      	ldr	r3, [pc, #540]	; (203c <STACK_SIZE+0x3c>)
    1e20:	6018      	str	r0, [r3, #0]
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
    1e22:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
    1e26:	b923      	cbnz	r3, 1e32 <adc_init+0x62>
    1e28:	7d13      	ldrb	r3, [r2, #20]
    1e2a:	b913      	cbnz	r3, 1e32 <adc_init+0x62>
		module_inst->software_trigger = true;
    1e2c:	2301      	movs	r3, #1
    1e2e:	7743      	strb	r3, [r0, #29]
    1e30:	e001      	b.n	1e36 <adc_init+0x66>
		module_inst->software_trigger = false;
    1e32:	2300      	movs	r3, #0
    1e34:	7743      	strb	r3, [r0, #29]
    1e36:	4617      	mov	r7, r2
    1e38:	9001      	str	r0, [sp, #4]
	Adc *const adc_module = module_inst->hw;
    1e3a:	f8d0 a000 	ldr.w	sl, [r0]
	gclk_chan_conf.source_generator = config->clock_source;
    1e3e:	7813      	ldrb	r3, [r2, #0]
    1e40:	a918      	add	r1, sp, #96	; 0x60
    1e42:	f801 3d58 	strb.w	r3, [r1, #-88]!
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
    1e46:	201e      	movs	r0, #30
    1e48:	4b7d      	ldr	r3, [pc, #500]	; (2040 <STACK_SIZE+0x40>)
    1e4a:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
    1e4c:	201e      	movs	r0, #30
    1e4e:	4b7d      	ldr	r3, [pc, #500]	; (2044 <STACK_SIZE+0x44>)
    1e50:	4798      	blx	r3
	if (config->pin_scan.inputs_to_scan != 0) {
    1e52:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
    1e56:	2a00      	cmp	r2, #0
    1e58:	f000 8097 	beq.w	1f8a <adc_init+0x1ba>
		uint8_t offset = config->pin_scan.offset_start_scan;
    1e5c:	f897 502b 	ldrb.w	r5, [r7, #43]	; 0x2b
		uint8_t start_pin =
    1e60:	7b3b      	ldrb	r3, [r7, #12]
    1e62:	442b      	add	r3, r5
    1e64:	b2db      	uxtb	r3, r3
		uint8_t end_pin =
    1e66:	18d1      	adds	r1, r2, r3
		while (start_pin < end_pin) {
    1e68:	b2c9      	uxtb	r1, r1
    1e6a:	428b      	cmp	r3, r1
    1e6c:	d22a      	bcs.n	1ec4 <adc_init+0xf4>
    1e6e:	eb02 0805 	add.w	r8, r2, r5
    1e72:	fa5f f888 	uxtb.w	r8, r8
	const uint32_t pinmapping[] = {
    1e76:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 204c <STACK_SIZE+0x4c>
    1e7a:	4e73      	ldr	r6, [pc, #460]	; (2048 <STACK_SIZE+0x48>)
		system_pinmux_pin_set_config(pin_map_result, &config);
    1e7c:	f8df b1d0 	ldr.w	fp, [pc, #464]	; 2050 <STACK_SIZE+0x50>
    1e80:	e003      	b.n	1e8a <adc_init+0xba>
			offset++;
    1e82:	3501      	adds	r5, #1
    1e84:	b2ed      	uxtb	r5, r5
		while (start_pin < end_pin) {
    1e86:	4545      	cmp	r5, r8
    1e88:	d01c      	beq.n	1ec4 <adc_init+0xf4>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
    1e8a:	f005 040f 	and.w	r4, r5, #15
    1e8e:	7b3b      	ldrb	r3, [r7, #12]
    1e90:	441c      	add	r4, r3
	const uint32_t pinmapping[] = {
    1e92:	2250      	movs	r2, #80	; 0x50
    1e94:	4649      	mov	r1, r9
    1e96:	a804      	add	r0, sp, #16
    1e98:	47b0      	blx	r6
	if (pin <= ADC_EXTCHANNEL_MSB) {
    1e9a:	2c13      	cmp	r4, #19
    1e9c:	d8f1      	bhi.n	1e82 <adc_init+0xb2>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    1e9e:	ab18      	add	r3, sp, #96	; 0x60
    1ea0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    1ea4:	f854 0c50 	ldr.w	r0, [r4, #-80]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1ea8:	2300      	movs	r3, #0
    1eaa:	f88d 300d 	strb.w	r3, [sp, #13]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    1eae:	f88d 300f 	strb.w	r3, [sp, #15]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    1eb2:	f88d 300e 	strb.w	r3, [sp, #14]
		config.mux_position = 1;
    1eb6:	a918      	add	r1, sp, #96	; 0x60
    1eb8:	2301      	movs	r3, #1
    1eba:	f801 3d54 	strb.w	r3, [r1, #-84]!
		system_pinmux_pin_set_config(pin_map_result, &config);
    1ebe:	b2c0      	uxtb	r0, r0
    1ec0:	47d8      	blx	fp
    1ec2:	e7de      	b.n	1e82 <adc_init+0xb2>
		_adc_configure_ain_pin(config->negative_input);
    1ec4:	89fc      	ldrh	r4, [r7, #14]
	const uint32_t pinmapping[] = {
    1ec6:	2250      	movs	r2, #80	; 0x50
    1ec8:	4960      	ldr	r1, [pc, #384]	; (204c <STACK_SIZE+0x4c>)
    1eca:	a804      	add	r0, sp, #16
    1ecc:	4b5e      	ldr	r3, [pc, #376]	; (2048 <STACK_SIZE+0x48>)
    1ece:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
    1ed0:	2c13      	cmp	r4, #19
    1ed2:	d946      	bls.n	1f62 <adc_init+0x192>
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
    1ed4:	7d7b      	ldrb	r3, [r7, #21]
    1ed6:	009b      	lsls	r3, r3, #2
    1ed8:	b2db      	uxtb	r3, r3
    1eda:	f88a 3000 	strb.w	r3, [sl]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
    1ede:	7dba      	ldrb	r2, [r7, #22]
    1ee0:	787b      	ldrb	r3, [r7, #1]
    1ee2:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
    1ee6:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
    1ee8:	f88a 3001 	strb.w	r3, [sl, #1]
	switch (config->resolution) {
    1eec:	793b      	ldrb	r3, [r7, #4]
    1eee:	2b34      	cmp	r3, #52	; 0x34
    1ef0:	f200 81c6 	bhi.w	2280 <STACK_SIZE+0x280>
    1ef4:	e8df f013 	tbh	[pc, r3, lsl #1]
    1ef8:	01c40099 	.word	0x01c40099
    1efc:	01c401c4 	.word	0x01c401c4
    1f00:	01c401c4 	.word	0x01c401c4
    1f04:	01c401c4 	.word	0x01c401c4
    1f08:	01c401c4 	.word	0x01c401c4
    1f0c:	01c401c4 	.word	0x01c401c4
    1f10:	01c401c4 	.word	0x01c401c4
    1f14:	01c401c4 	.word	0x01c401c4
    1f18:	01c4008d 	.word	0x01c4008d
    1f1c:	01c401c4 	.word	0x01c401c4
    1f20:	01c401c4 	.word	0x01c401c4
    1f24:	01c401c4 	.word	0x01c401c4
    1f28:	01c401c4 	.word	0x01c401c4
    1f2c:	01c401c4 	.word	0x01c401c4
    1f30:	01c401c4 	.word	0x01c401c4
    1f34:	01c401c4 	.word	0x01c401c4
    1f38:	01c40095 	.word	0x01c40095
    1f3c:	01c401c4 	.word	0x01c401c4
    1f40:	01c401c4 	.word	0x01c401c4
    1f44:	01c401c4 	.word	0x01c401c4
    1f48:	01c401c4 	.word	0x01c401c4
    1f4c:	01c401c4 	.word	0x01c401c4
    1f50:	01c401c4 	.word	0x01c401c4
    1f54:	01c401c4 	.word	0x01c401c4
    1f58:	00ae0091 	.word	0x00ae0091
    1f5c:	00890081 	.word	0x00890081
    1f60:	0085      	.short	0x0085
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    1f62:	ab18      	add	r3, sp, #96	; 0x60
    1f64:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    1f68:	f854 0c50 	ldr.w	r0, [r4, #-80]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1f6c:	2300      	movs	r3, #0
    1f6e:	f88d 300d 	strb.w	r3, [sp, #13]
	config->powersave    = false;
    1f72:	f88d 300f 	strb.w	r3, [sp, #15]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    1f76:	f88d 300e 	strb.w	r3, [sp, #14]
		config.mux_position = 1;
    1f7a:	a918      	add	r1, sp, #96	; 0x60
    1f7c:	2301      	movs	r3, #1
    1f7e:	f801 3d54 	strb.w	r3, [r1, #-84]!
		system_pinmux_pin_set_config(pin_map_result, &config);
    1f82:	b2c0      	uxtb	r0, r0
    1f84:	4b32      	ldr	r3, [pc, #200]	; (2050 <STACK_SIZE+0x50>)
    1f86:	4798      	blx	r3
    1f88:	e7a4      	b.n	1ed4 <adc_init+0x104>
		_adc_configure_ain_pin(config->positive_input);
    1f8a:	7b3c      	ldrb	r4, [r7, #12]
	const uint32_t pinmapping[] = {
    1f8c:	2250      	movs	r2, #80	; 0x50
    1f8e:	492f      	ldr	r1, [pc, #188]	; (204c <STACK_SIZE+0x4c>)
    1f90:	a804      	add	r0, sp, #16
    1f92:	4b2d      	ldr	r3, [pc, #180]	; (2048 <STACK_SIZE+0x48>)
    1f94:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
    1f96:	2c13      	cmp	r4, #19
    1f98:	d91b      	bls.n	1fd2 <adc_init+0x202>
		_adc_configure_ain_pin(config->negative_input);
    1f9a:	89fc      	ldrh	r4, [r7, #14]
	const uint32_t pinmapping[] = {
    1f9c:	2250      	movs	r2, #80	; 0x50
    1f9e:	492b      	ldr	r1, [pc, #172]	; (204c <STACK_SIZE+0x4c>)
    1fa0:	a804      	add	r0, sp, #16
    1fa2:	4b29      	ldr	r3, [pc, #164]	; (2048 <STACK_SIZE+0x48>)
    1fa4:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
    1fa6:	2c13      	cmp	r4, #19
    1fa8:	d894      	bhi.n	1ed4 <adc_init+0x104>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    1faa:	ab18      	add	r3, sp, #96	; 0x60
    1fac:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    1fb0:	f854 0c50 	ldr.w	r0, [r4, #-80]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1fb4:	2300      	movs	r3, #0
    1fb6:	f88d 300d 	strb.w	r3, [sp, #13]
	config->powersave    = false;
    1fba:	f88d 300f 	strb.w	r3, [sp, #15]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    1fbe:	f88d 300e 	strb.w	r3, [sp, #14]
		config.mux_position = 1;
    1fc2:	a918      	add	r1, sp, #96	; 0x60
    1fc4:	2301      	movs	r3, #1
    1fc6:	f801 3d54 	strb.w	r3, [r1, #-84]!
		system_pinmux_pin_set_config(pin_map_result, &config);
    1fca:	b2c0      	uxtb	r0, r0
    1fcc:	4b20      	ldr	r3, [pc, #128]	; (2050 <STACK_SIZE+0x50>)
    1fce:	4798      	blx	r3
    1fd0:	e780      	b.n	1ed4 <adc_init+0x104>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    1fd2:	ab18      	add	r3, sp, #96	; 0x60
    1fd4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    1fd8:	f854 0c50 	ldr.w	r0, [r4, #-80]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1fdc:	2300      	movs	r3, #0
    1fde:	f88d 300d 	strb.w	r3, [sp, #13]
	config->powersave    = false;
    1fe2:	f88d 300f 	strb.w	r3, [sp, #15]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    1fe6:	f88d 300e 	strb.w	r3, [sp, #14]
		config.mux_position = 1;
    1fea:	a918      	add	r1, sp, #96	; 0x60
    1fec:	2301      	movs	r3, #1
    1fee:	f801 3d54 	strb.w	r3, [r1, #-84]!
		system_pinmux_pin_set_config(pin_map_result, &config);
    1ff2:	b2c0      	uxtb	r0, r0
    1ff4:	4b16      	ldr	r3, [pc, #88]	; (2050 <STACK_SIZE+0x50>)
    1ff6:	4798      	blx	r3
    1ff8:	e7cf      	b.n	1f9a <adc_init+0x1ca>
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
    1ffa:	2204      	movs	r2, #4
		resolution = ADC_RESOLUTION_16BIT;
    1ffc:	2110      	movs	r1, #16
		adjres = ADC_DIVIDE_RESULT_4;
    1ffe:	2302      	movs	r3, #2
    2000:	e02b      	b.n	205a <STACK_SIZE+0x5a>
		adjres = config->divide_result;
    2002:	7c7b      	ldrb	r3, [r7, #17]
		accumulate = config->accumulate_samples;
    2004:	7c3a      	ldrb	r2, [r7, #16]
		resolution = ADC_RESOLUTION_16BIT;
    2006:	2110      	movs	r1, #16
    2008:	e027      	b.n	205a <STACK_SIZE+0x5a>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
    200a:	2206      	movs	r2, #6
		resolution = ADC_RESOLUTION_16BIT;
    200c:	2110      	movs	r1, #16
		adjres = ADC_DIVIDE_RESULT_2;
    200e:	2301      	movs	r3, #1
    2010:	e023      	b.n	205a <STACK_SIZE+0x5a>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
    2012:	2208      	movs	r2, #8
		resolution = ADC_RESOLUTION_16BIT;
    2014:	2110      	movs	r1, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
    2016:	2300      	movs	r3, #0
    2018:	e01f      	b.n	205a <STACK_SIZE+0x5a>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    201a:	2200      	movs	r2, #0
		resolution = ADC_RESOLUTION_8BIT;
    201c:	2130      	movs	r1, #48	; 0x30
	uint8_t adjres = 0;
    201e:	4613      	mov	r3, r2
    2020:	e01b      	b.n	205a <STACK_SIZE+0x5a>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    2022:	2200      	movs	r2, #0
		resolution = ADC_RESOLUTION_10BIT;
    2024:	2120      	movs	r1, #32
	uint8_t adjres = 0;
    2026:	4613      	mov	r3, r2
    2028:	e017      	b.n	205a <STACK_SIZE+0x5a>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    202a:	2200      	movs	r2, #0
		resolution = ADC_RESOLUTION_12BIT;
    202c:	4611      	mov	r1, r2
	uint8_t adjres = 0;
    202e:	4613      	mov	r3, r2
    2030:	e013      	b.n	205a <STACK_SIZE+0x5a>
    2032:	bf00      	nop
    2034:	40000400 	.word	0x40000400
    2038:	40000800 	.word	0x40000800
    203c:	20000394 	.word	0x20000394
    2040:	00003361 	.word	0x00003361
    2044:	000032e1 	.word	0x000032e1
    2048:	00004ab9 	.word	0x00004ab9
    204c:	00006530 	.word	0x00006530
    2050:	00003449 	.word	0x00003449
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
    2054:	2202      	movs	r2, #2
		resolution = ADC_RESOLUTION_16BIT;
    2056:	2110      	movs	r1, #16
		adjres = ADC_DIVIDE_RESULT_2;
    2058:	2301      	movs	r3, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
    205a:	011b      	lsls	r3, r3, #4
    205c:	f003 0370 	and.w	r3, r3, #112	; 0x70
    2060:	4313      	orrs	r3, r2
    2062:	f88a 3002 	strb.w	r3, [sl, #2]
	if (config->sample_length > 63) {
    2066:	7dfb      	ldrb	r3, [r7, #23]
    2068:	2b3f      	cmp	r3, #63	; 0x3f
		return STATUS_ERR_INVALID_ARG;
    206a:	bf88      	it	hi
    206c:	2017      	movhi	r0, #23
	if (config->sample_length > 63) {
    206e:	f63f aebd 	bhi.w	1dec <adc_init+0x1c>
		adc_module->SAMPCTRL.reg =
    2072:	f88a 3003 	strb.w	r3, [sl, #3]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    2076:	9b01      	ldr	r3, [sp, #4]
    2078:	681a      	ldr	r2, [r3, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    207a:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    207c:	f013 0f80 	tst.w	r3, #128	; 0x80
    2080:	d1fb      	bne.n	207a <STACK_SIZE+0x7a>
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
    2082:	7cfb      	ldrb	r3, [r7, #19]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    2084:	887a      	ldrh	r2, [r7, #2]
    2086:	4313      	orrs	r3, r2
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
    2088:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    208c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
    2090:	7d3a      	ldrb	r2, [r7, #20]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    2092:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
    2096:	7cba      	ldrb	r2, [r7, #18]
    2098:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
    209c:	430b      	orrs	r3, r1
    209e:	b29b      	uxth	r3, r3
	adc_module->CTRLB.reg =
    20a0:	f8aa 3004 	strh.w	r3, [sl, #4]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
    20a4:	7e3b      	ldrb	r3, [r7, #24]
    20a6:	b37b      	cbz	r3, 2108 <STACK_SIZE+0x108>
		switch (resolution) {
    20a8:	2910      	cmp	r1, #16
    20aa:	f000 80c9 	beq.w	2240 <STACK_SIZE+0x240>
    20ae:	d90c      	bls.n	20ca <STACK_SIZE+0xca>
    20b0:	2920      	cmp	r1, #32
    20b2:	f000 808f 	beq.w	21d4 <STACK_SIZE+0x1d4>
    20b6:	2930      	cmp	r1, #48	; 0x30
    20b8:	d126      	bne.n	2108 <STACK_SIZE+0x108>
			if (config->differential_mode &&
    20ba:	7cfa      	ldrb	r2, [r7, #19]
    20bc:	b1ca      	cbz	r2, 20f2 <STACK_SIZE+0xf2>
					(config->window.window_lower_value > 127 ||
    20be:	69fa      	ldr	r2, [r7, #28]
    20c0:	3280      	adds	r2, #128	; 0x80
			if (config->differential_mode &&
    20c2:	2aff      	cmp	r2, #255	; 0xff
    20c4:	d90f      	bls.n	20e6 <STACK_SIZE+0xe6>
				return STATUS_ERR_INVALID_ARG;
    20c6:	2017      	movs	r0, #23
    20c8:	e690      	b.n	1dec <adc_init+0x1c>
		switch (resolution) {
    20ca:	b9e9      	cbnz	r1, 2108 <STACK_SIZE+0x108>
			if (config->differential_mode &&
    20cc:	7cfa      	ldrb	r2, [r7, #19]
    20ce:	2a00      	cmp	r2, #0
    20d0:	f000 80a8 	beq.w	2224 <STACK_SIZE+0x224>
					(config->window.window_lower_value > 2047 ||
    20d4:	69fa      	ldr	r2, [r7, #28]
    20d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
			if (config->differential_mode &&
    20da:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    20de:	f0c0 8099 	bcc.w	2214 <STACK_SIZE+0x214>
				return STATUS_ERR_INVALID_ARG;
    20e2:	2017      	movs	r0, #23
    20e4:	e682      	b.n	1dec <adc_init+0x1c>
					config->window.window_lower_value < -128 ||
    20e6:	6a3a      	ldr	r2, [r7, #32]
    20e8:	3280      	adds	r2, #128	; 0x80
    20ea:	2aff      	cmp	r2, #255	; 0xff
    20ec:	d901      	bls.n	20f2 <STACK_SIZE+0xf2>
				return STATUS_ERR_INVALID_ARG;
    20ee:	2017      	movs	r0, #23
    20f0:	e67c      	b.n	1dec <adc_init+0x1c>
			} else if (config->window.window_lower_value > 255 ||
    20f2:	69fa      	ldr	r2, [r7, #28]
    20f4:	2aff      	cmp	r2, #255	; 0xff
    20f6:	dd01      	ble.n	20fc <STACK_SIZE+0xfc>
				return STATUS_ERR_INVALID_ARG;
    20f8:	2017      	movs	r0, #23
    20fa:	e677      	b.n	1dec <adc_init+0x1c>
			} else if (config->window.window_lower_value > 255 ||
    20fc:	6a3a      	ldr	r2, [r7, #32]
    20fe:	2aff      	cmp	r2, #255	; 0xff
				return STATUS_ERR_INVALID_ARG;
    2100:	bfc8      	it	gt
    2102:	2017      	movgt	r0, #23
			} else if (config->window.window_lower_value > 255 ||
    2104:	f73f ae72 	bgt.w	1dec <adc_init+0x1c>
	Adc *const adc_module = module_inst->hw;
    2108:	9a01      	ldr	r2, [sp, #4]
    210a:	6811      	ldr	r1, [r2, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    210c:	7e4a      	ldrb	r2, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    210e:	f012 0f80 	tst.w	r2, #128	; 0x80
    2112:	d1fb      	bne.n	210c <STACK_SIZE+0x10c>
	adc_module->WINCTRL.reg = config->window.window_mode;
    2114:	f88a 3008 	strb.w	r3, [sl, #8]
	Adc *const adc_module = module_inst->hw;
    2118:	9b01      	ldr	r3, [sp, #4]
    211a:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    211c:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    211e:	f013 0f80 	tst.w	r3, #128	; 0x80
    2122:	d1fb      	bne.n	211c <STACK_SIZE+0x11c>
	adc_module->WINLT.reg =
    2124:	8bbb      	ldrh	r3, [r7, #28]
    2126:	f8aa 301c 	strh.w	r3, [sl, #28]
	Adc *const adc_module = module_inst->hw;
    212a:	9b01      	ldr	r3, [sp, #4]
    212c:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    212e:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    2130:	f013 0f80 	tst.w	r3, #128	; 0x80
    2134:	d1fb      	bne.n	212e <STACK_SIZE+0x12e>
	adc_module->WINUT.reg = config->window.window_upper_value <<
    2136:	8c3b      	ldrh	r3, [r7, #32]
    2138:	f8aa 3020 	strh.w	r3, [sl, #32]
	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
    213c:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
	if (inputs_to_scan > 0) {
    2140:	b132      	cbz	r2, 2150 <STACK_SIZE+0x150>
		inputs_to_scan--;
    2142:	1e53      	subs	r3, r2, #1
    2144:	b2da      	uxtb	r2, r3
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    2146:	2a0f      	cmp	r2, #15
		return STATUS_ERR_INVALID_ARG;
    2148:	bf88      	it	hi
    214a:	2017      	movhi	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    214c:	f63f ae4e 	bhi.w	1dec <adc_init+0x1c>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
    2150:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    2154:	290f      	cmp	r1, #15
		return STATUS_ERR_INVALID_ARG;
    2156:	bf88      	it	hi
    2158:	2017      	movhi	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    215a:	f63f ae47 	bhi.w	1dec <adc_init+0x1c>
	Adc *const adc_module = module_inst->hw;
    215e:	9b01      	ldr	r3, [sp, #4]
    2160:	681b      	ldr	r3, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    2162:	7e58      	ldrb	r0, [r3, #25]
	while (adc_is_syncing(module_inst)) {
    2164:	f010 0f80 	tst.w	r0, #128	; 0x80
    2168:	d1fb      	bne.n	2162 <STACK_SIZE+0x162>
			config->negative_input |
    216a:	89fb      	ldrh	r3, [r7, #14]
			config->positive_input;
    216c:	7b38      	ldrb	r0, [r7, #12]
			config->negative_input |
    216e:	4303      	orrs	r3, r0
    2170:	68b8      	ldr	r0, [r7, #8]
    2172:	4303      	orrs	r3, r0
    2174:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
    2178:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	adc_module->INPUTCTRL.reg =
    217c:	f8ca 3010 	str.w	r3, [sl, #16]
	adc_module->EVCTRL.reg = config->event_action;
    2180:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
    2184:	f88a 3014 	strb.w	r3, [sl, #20]
	adc_module->INTENCLR.reg =
    2188:	230f      	movs	r3, #15
    218a:	f88a 3016 	strb.w	r3, [sl, #22]
	if (config->correction.correction_enable){
    218e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
    2192:	b173      	cbz	r3, 21b2 <STACK_SIZE+0x1b2>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    2194:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    2196:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    219a:	d273      	bcs.n	2284 <STACK_SIZE+0x284>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
    219c:	f8aa 3024 	strh.w	r3, [sl, #36]	; 0x24
		if (config->correction.offset_correction > 2047 ||
    21a0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
    21a2:	f502 6300 	add.w	r3, r2, #2048	; 0x800
    21a6:	b29b      	uxth	r3, r3
    21a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    21ac:	d26c      	bcs.n	2288 <STACK_SIZE+0x288>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
    21ae:	f8aa 2026 	strh.w	r2, [sl, #38]	; 0x26
			ADC_CALIB_BIAS_CAL(
    21b2:	4b36      	ldr	r3, [pc, #216]	; (228c <STACK_SIZE+0x28c>)
    21b4:	681b      	ldr	r3, [r3, #0]
    21b6:	015b      	lsls	r3, r3, #5
    21b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
			ADC_CALIB_LINEARITY_CAL(
    21bc:	4934      	ldr	r1, [pc, #208]	; (2290 <STACK_SIZE+0x290>)
    21be:	680a      	ldr	r2, [r1, #0]
    21c0:	6849      	ldr	r1, [r1, #4]
    21c2:	0ed2      	lsrs	r2, r2, #27
    21c4:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
    21c8:	b2d2      	uxtb	r2, r2
			) |
    21ca:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
    21cc:	f8aa 3028 	strh.w	r3, [sl, #40]	; 0x28
	return STATUS_OK;
    21d0:	2000      	movs	r0, #0
    21d2:	e60b      	b.n	1dec <adc_init+0x1c>
			if (config->differential_mode &&
    21d4:	7cfa      	ldrb	r2, [r7, #19]
    21d6:	b17a      	cbz	r2, 21f8 <STACK_SIZE+0x1f8>
					(config->window.window_lower_value > 511 ||
    21d8:	69fa      	ldr	r2, [r7, #28]
    21da:	f502 7200 	add.w	r2, r2, #512	; 0x200
			if (config->differential_mode &&
    21de:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    21e2:	d301      	bcc.n	21e8 <STACK_SIZE+0x1e8>
				return STATUS_ERR_INVALID_ARG;
    21e4:	2017      	movs	r0, #23
    21e6:	e601      	b.n	1dec <adc_init+0x1c>
					config->window.window_lower_value < -512 ||
    21e8:	6a3a      	ldr	r2, [r7, #32]
    21ea:	f502 7200 	add.w	r2, r2, #512	; 0x200
    21ee:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    21f2:	d301      	bcc.n	21f8 <STACK_SIZE+0x1f8>
				return STATUS_ERR_INVALID_ARG;
    21f4:	2017      	movs	r0, #23
    21f6:	e5f9      	b.n	1dec <adc_init+0x1c>
			} else if (config->window.window_lower_value > 1023 ||
    21f8:	69fa      	ldr	r2, [r7, #28]
    21fa:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    21fe:	db01      	blt.n	2204 <STACK_SIZE+0x204>
				return STATUS_ERR_INVALID_ARG;
    2200:	2017      	movs	r0, #23
    2202:	e5f3      	b.n	1dec <adc_init+0x1c>
			} else if (config->window.window_lower_value > 1023 ||
    2204:	6a3a      	ldr	r2, [r7, #32]
    2206:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
				return STATUS_ERR_INVALID_ARG;
    220a:	bfa8      	it	ge
    220c:	2017      	movge	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
    220e:	f6bf aded 	bge.w	1dec <adc_init+0x1c>
    2212:	e779      	b.n	2108 <STACK_SIZE+0x108>
					config->window.window_lower_value < -2048 ||
    2214:	6a3a      	ldr	r2, [r7, #32]
    2216:	f502 6200 	add.w	r2, r2, #2048	; 0x800
    221a:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    221e:	d301      	bcc.n	2224 <STACK_SIZE+0x224>
				return STATUS_ERR_INVALID_ARG;
    2220:	2017      	movs	r0, #23
    2222:	e5e3      	b.n	1dec <adc_init+0x1c>
			} else if (config->window.window_lower_value > 4095 ||
    2224:	69fa      	ldr	r2, [r7, #28]
    2226:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    222a:	db01      	blt.n	2230 <STACK_SIZE+0x230>
				return STATUS_ERR_INVALID_ARG;
    222c:	2017      	movs	r0, #23
    222e:	e5dd      	b.n	1dec <adc_init+0x1c>
			} else if (config->window.window_lower_value > 4095 ||
    2230:	6a3a      	ldr	r2, [r7, #32]
    2232:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
				return STATUS_ERR_INVALID_ARG;
    2236:	bfa8      	it	ge
    2238:	2017      	movge	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
    223a:	f6bf add7 	bge.w	1dec <adc_init+0x1c>
    223e:	e763      	b.n	2108 <STACK_SIZE+0x108>
			if (config->differential_mode &&
    2240:	7cfa      	ldrb	r2, [r7, #19]
    2242:	b17a      	cbz	r2, 2264 <STACK_SIZE+0x264>
					(config->window.window_lower_value > 32767 ||
    2244:	69fa      	ldr	r2, [r7, #28]
    2246:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
			if (config->differential_mode &&
    224a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    224e:	d301      	bcc.n	2254 <STACK_SIZE+0x254>
				return STATUS_ERR_INVALID_ARG;
    2250:	2017      	movs	r0, #23
    2252:	e5cb      	b.n	1dec <adc_init+0x1c>
					config->window.window_lower_value < -32768 ||
    2254:	6a3a      	ldr	r2, [r7, #32]
    2256:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    225a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    225e:	d301      	bcc.n	2264 <STACK_SIZE+0x264>
				return STATUS_ERR_INVALID_ARG;
    2260:	2017      	movs	r0, #23
    2262:	e5c3      	b.n	1dec <adc_init+0x1c>
			} else if (config->window.window_lower_value > 65535 ||
    2264:	69fa      	ldr	r2, [r7, #28]
    2266:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    226a:	db01      	blt.n	2270 <STACK_SIZE+0x270>
				return STATUS_ERR_INVALID_ARG;
    226c:	2017      	movs	r0, #23
    226e:	e5bd      	b.n	1dec <adc_init+0x1c>
			} else if (config->window.window_lower_value > 65535 ||
    2270:	6a3a      	ldr	r2, [r7, #32]
    2272:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
				return STATUS_ERR_INVALID_ARG;
    2276:	bfa8      	it	ge
    2278:	2017      	movge	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
    227a:	f6bf adb7 	bge.w	1dec <adc_init+0x1c>
    227e:	e743      	b.n	2108 <STACK_SIZE+0x108>
		return STATUS_ERR_INVALID_ARG;
    2280:	2017      	movs	r0, #23
    2282:	e5b3      	b.n	1dec <adc_init+0x1c>
			return STATUS_ERR_INVALID_ARG;
    2284:	2017      	movs	r0, #23
    2286:	e5b1      	b.n	1dec <adc_init+0x1c>
			return STATUS_ERR_INVALID_ARG;
    2288:	2017      	movs	r0, #23
	return _adc_set_config(module_inst, config);
    228a:	e5af      	b.n	1dec <adc_init+0x1c>
    228c:	00806024 	.word	0x00806024
    2290:	00806020 	.word	0x00806020

00002294 <ADC_Handler>:
	}
}

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
    2294:	b538      	push	{r3, r4, r5, lr}
	struct adc_module *module = _adc_instances[instance];
    2296:	4b33      	ldr	r3, [pc, #204]	; (2364 <ADC_Handler+0xd0>)
    2298:	681d      	ldr	r5, [r3, #0]
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
    229a:	682b      	ldr	r3, [r5, #0]
    229c:	7e1a      	ldrb	r2, [r3, #24]
    229e:	7ddc      	ldrb	r4, [r3, #23]
    22a0:	4014      	ands	r4, r2
	if (flags & ADC_INTFLAG_RESRDY) {
    22a2:	f014 0f01 	tst.w	r4, #1
    22a6:	d11c      	bne.n	22e2 <ADC_Handler+0x4e>
	if (flags & ADC_INTFLAG_WINMON) {
    22a8:	f014 0f04 	tst.w	r4, #4
    22ac:	d00a      	beq.n	22c4 <ADC_Handler+0x30>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
    22ae:	682b      	ldr	r3, [r5, #0]
    22b0:	2204      	movs	r2, #4
    22b2:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    22b4:	7eeb      	ldrb	r3, [r5, #27]
    22b6:	f013 0f02 	tst.w	r3, #2
    22ba:	d003      	beq.n	22c4 <ADC_Handler+0x30>
    22bc:	7eab      	ldrb	r3, [r5, #26]
    22be:	f013 0f02 	tst.w	r3, #2
    22c2:	d147      	bne.n	2354 <ADC_Handler+0xc0>
	if (flags & ADC_INTFLAG_OVERRUN) {
    22c4:	f014 0f02 	tst.w	r4, #2
    22c8:	d00a      	beq.n	22e0 <ADC_Handler+0x4c>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    22ca:	682b      	ldr	r3, [r5, #0]
    22cc:	2202      	movs	r2, #2
    22ce:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    22d0:	7eeb      	ldrb	r3, [r5, #27]
    22d2:	f013 0f04 	tst.w	r3, #4
    22d6:	d003      	beq.n	22e0 <ADC_Handler+0x4c>
    22d8:	7eab      	ldrb	r3, [r5, #26]
    22da:	f013 0f04 	tst.w	r3, #4
    22de:	d13d      	bne.n	235c <ADC_Handler+0xc8>
    22e0:	bd38      	pop	{r3, r4, r5, pc}
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    22e2:	2201      	movs	r2, #1
    22e4:	761a      	strb	r2, [r3, #24]
	Adc *const adc_module = module_inst->hw;
    22e6:	682b      	ldr	r3, [r5, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    22e8:	7e5a      	ldrb	r2, [r3, #25]
		while (adc_is_syncing(module)) {
    22ea:	f012 0f80 	tst.w	r2, #128	; 0x80
    22ee:	d1fb      	bne.n	22e8 <ADC_Handler+0x54>
		*(module->job_buffer++) = module->hw->RESULT.reg;
    22f0:	696a      	ldr	r2, [r5, #20]
    22f2:	1c91      	adds	r1, r2, #2
    22f4:	6169      	str	r1, [r5, #20]
    22f6:	8b5b      	ldrh	r3, [r3, #26]
    22f8:	b29b      	uxth	r3, r3
    22fa:	8013      	strh	r3, [r2, #0]
		if (--module->remaining_conversions > 0) {
    22fc:	8b2b      	ldrh	r3, [r5, #24]
    22fe:	3b01      	subs	r3, #1
    2300:	b29b      	uxth	r3, r3
    2302:	832b      	strh	r3, [r5, #24]
    2304:	b18b      	cbz	r3, 232a <ADC_Handler+0x96>
			if (module->software_trigger == true) {
    2306:	7f6b      	ldrb	r3, [r5, #29]
    2308:	2b00      	cmp	r3, #0
    230a:	d0cd      	beq.n	22a8 <ADC_Handler+0x14>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    230c:	682b      	ldr	r3, [r5, #0]
    230e:	7e5a      	ldrb	r2, [r3, #25]

	while (adc_is_syncing(module_inst)) {
    2310:	f012 0f80 	tst.w	r2, #128	; 0x80
    2314:	d1fb      	bne.n	230e <ADC_Handler+0x7a>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    2316:	7b1a      	ldrb	r2, [r3, #12]
    2318:	f042 0202 	orr.w	r2, r2, #2
    231c:	731a      	strb	r2, [r3, #12]
	Adc *const adc_module = module_inst->hw;
    231e:	682a      	ldr	r2, [r5, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    2320:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    2322:	f013 0f80 	tst.w	r3, #128	; 0x80
    2326:	d1fb      	bne.n	2320 <ADC_Handler+0x8c>
    2328:	e7be      	b.n	22a8 <ADC_Handler+0x14>
{
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    232a:	682b      	ldr	r3, [r5, #0]
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
    232c:	2201      	movs	r2, #1
    232e:	759a      	strb	r2, [r3, #22]
			if (module->job_status == STATUS_BUSY) {
    2330:	7f2b      	ldrb	r3, [r5, #28]
    2332:	b2db      	uxtb	r3, r3
    2334:	2b05      	cmp	r3, #5
    2336:	d1b7      	bne.n	22a8 <ADC_Handler+0x14>
				module->job_status = STATUS_OK;
    2338:	2300      	movs	r3, #0
    233a:	772b      	strb	r3, [r5, #28]
				if ((module->enabled_callback_mask &
    233c:	7eeb      	ldrb	r3, [r5, #27]
    233e:	f013 0f01 	tst.w	r3, #1
    2342:	d0b1      	beq.n	22a8 <ADC_Handler+0x14>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
    2344:	7eab      	ldrb	r3, [r5, #26]
    2346:	f013 0f01 	tst.w	r3, #1
    234a:	d0ad      	beq.n	22a8 <ADC_Handler+0x14>
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
    234c:	68ab      	ldr	r3, [r5, #8]
    234e:	4628      	mov	r0, r5
    2350:	4798      	blx	r3
    2352:	e7a9      	b.n	22a8 <ADC_Handler+0x14>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
    2354:	68eb      	ldr	r3, [r5, #12]
    2356:	4628      	mov	r0, r5
    2358:	4798      	blx	r3
    235a:	e7b3      	b.n	22c4 <ADC_Handler+0x30>
			(module->callback[ADC_CALLBACK_ERROR])(module);
    235c:	692b      	ldr	r3, [r5, #16]
    235e:	4628      	mov	r0, r5
    2360:	4798      	blx	r3
	_adc_interrupt_handler(0);
}
    2362:	e7bd      	b.n	22e0 <ADC_Handler+0x4c>
    2364:	20000394 	.word	0x20000394

00002368 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    2368:	b500      	push	{lr}
    236a:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    236c:	2380      	movs	r3, #128	; 0x80
    236e:	f88d 3004 	strb.w	r3, [sp, #4]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    2372:	780b      	ldrb	r3, [r1, #0]
    2374:	f88d 3005 	strb.w	r3, [sp, #5]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    2378:	784b      	ldrb	r3, [r1, #1]
    237a:	f88d 3006 	strb.w	r3, [sp, #6]
	pinmux_config.powersave    = config->powersave;
    237e:	788b      	ldrb	r3, [r1, #2]
    2380:	f88d 3007 	strb.w	r3, [sp, #7]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    2384:	a901      	add	r1, sp, #4
    2386:	4b02      	ldr	r3, [pc, #8]	; (2390 <port_pin_set_config+0x28>)
    2388:	4798      	blx	r3
}
    238a:	b003      	add	sp, #12
    238c:	f85d fb04 	ldr.w	pc, [sp], #4
    2390:	00003449 	.word	0x00003449

00002394 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    2394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2398:	b083      	sub	sp, #12
    239a:	e9cd 0100 	strd	r0, r1, [sp]
    239e:	4690      	mov	r8, r2
    23a0:	4699      	mov	r9, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    23a2:	2200      	movs	r2, #0
    23a4:	2300      	movs	r3, #0
    23a6:	4692      	mov	sl, r2
    23a8:	469b      	mov	fp, r3
	for (i = 63; i >= 0; i--) {
    23aa:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    23ae:	f04f 0c01 	mov.w	ip, #1
    23b2:	e004      	b.n	23be <long_division+0x2a>
	for (i = 63; i >= 0; i--) {
    23b4:	f10e 3eff 	add.w	lr, lr, #4294967295
    23b8:	f1be 3fff 	cmp.w	lr, #4294967295
    23bc:	d025      	beq.n	240a <long_division+0x76>
		bit_shift = (uint64_t)1 << i;
    23be:	f1ae 0020 	sub.w	r0, lr, #32
    23c2:	f1ce 0120 	rsb	r1, lr, #32
    23c6:	fa0c f500 	lsl.w	r5, ip, r0
    23ca:	fa2c f101 	lsr.w	r1, ip, r1
    23ce:	430d      	orrs	r5, r1
    23d0:	fa0c f40e 	lsl.w	r4, ip, lr

		r = r << 1;
    23d4:	1896      	adds	r6, r2, r2
    23d6:	eb43 0703 	adc.w	r7, r3, r3
    23da:	4632      	mov	r2, r6
    23dc:	463b      	mov	r3, r7

		if (n & bit_shift) {
    23de:	e9dd 0100 	ldrd	r0, r1, [sp]
    23e2:	4020      	ands	r0, r4
    23e4:	4029      	ands	r1, r5
    23e6:	4301      	orrs	r1, r0
			r |= 0x01;
    23e8:	bf1c      	itt	ne
    23ea:	f046 0201 	orrne.w	r2, r6, #1
    23ee:	463b      	movne	r3, r7
		}

		if (r >= d) {
    23f0:	454b      	cmp	r3, r9
    23f2:	bf08      	it	eq
    23f4:	4542      	cmpeq	r2, r8
    23f6:	d3dd      	bcc.n	23b4 <long_division+0x20>
			r = r - d;
    23f8:	ebb2 0208 	subs.w	r2, r2, r8
    23fc:	eb63 0309 	sbc.w	r3, r3, r9
			q |= bit_shift;
    2400:	ea4a 0a04 	orr.w	sl, sl, r4
    2404:	ea4b 0b05 	orr.w	fp, fp, r5
    2408:	e7d4      	b.n	23b4 <long_division+0x20>
		}
	}

	return q;
}
    240a:	4650      	mov	r0, sl
    240c:	4659      	mov	r1, fp
    240e:	b003      	add	sp, #12
    2410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00002414 <_sercom_get_sync_baud_val>:
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    2414:	0849      	lsrs	r1, r1, #1
    2416:	4281      	cmp	r1, r0
    2418:	d201      	bcs.n	241e <_sercom_get_sync_baud_val+0xa>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    241a:	2040      	movs	r0, #64	; 0x40
    241c:	4770      	bx	lr
{
    241e:	b410      	push	{r4}
    2420:	2300      	movs	r3, #0
    2422:	b29c      	uxth	r4, r3
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
    2424:	1a09      	subs	r1, r1, r0
    2426:	3301      	adds	r3, #1
	while (clock_value >= baudrate) {
    2428:	4288      	cmp	r0, r1
    242a:	d9fa      	bls.n	2422 <_sercom_get_sync_baud_val+0xe>
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    242c:	2cff      	cmp	r4, #255	; 0xff
    242e:	d902      	bls.n	2436 <_sercom_get_sync_baud_val+0x22>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    2430:	2040      	movs	r0, #64	; 0x40
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    2432:	bc10      	pop	{r4}
    2434:	4770      	bx	lr
		*baudvalue = baud_calculated;
    2436:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    2438:	2000      	movs	r0, #0
    243a:	e7fa      	b.n	2432 <_sercom_get_sync_baud_val+0x1e>

0000243c <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    243c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2440:	f89d 5018 	ldrb.w	r5, [sp, #24]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    2444:	fb00 f405 	mul.w	r4, r0, r5
    2448:	428c      	cmp	r4, r1
    244a:	d902      	bls.n	2452 <_sercom_get_async_baud_val+0x16>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    244c:	2040      	movs	r0, #64	; 0x40
    244e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2452:	4617      	mov	r7, r2
    2454:	460e      	mov	r6, r1
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    2456:	b98b      	cbnz	r3, 247c <_sercom_get_async_baud_val+0x40>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
    2458:	2000      	movs	r0, #0
    245a:	4632      	mov	r2, r6
    245c:	4603      	mov	r3, r0
    245e:	4621      	mov	r1, r4
    2460:	4c16      	ldr	r4, [pc, #88]	; (24bc <_sercom_get_async_baud_val+0x80>)
    2462:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    2464:	2200      	movs	r2, #0
    2466:	2301      	movs	r3, #1
    2468:	1a10      	subs	r0, r2, r0
    246a:	eb63 0101 	sbc.w	r1, r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    246e:	040b      	lsls	r3, r1, #16
    2470:	ea43 4010 	orr.w	r0, r3, r0, lsr #16
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
		baud_fp = temp1 - 8 * baud_int;
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
    2474:	8038      	strh	r0, [r7, #0]
	return STATUS_OK;
    2476:	2000      	movs	r0, #0
    2478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    247c:	2b01      	cmp	r3, #1
    247e:	d001      	beq.n	2484 <_sercom_get_async_baud_val+0x48>
	uint64_t baud_calculated = 0;
    2480:	2000      	movs	r0, #0
    2482:	e7f7      	b.n	2474 <_sercom_get_async_baud_val+0x38>
		temp1 = ((uint64_t)baudrate * sample_num);
    2484:	fba0 4505 	umull	r4, r5, r0, r5
		baud_int = long_division( peripheral_clock, temp1);
    2488:	4622      	mov	r2, r4
    248a:	462b      	mov	r3, r5
    248c:	4630      	mov	r0, r6
    248e:	2100      	movs	r1, #0
    2490:	f8df 8028 	ldr.w	r8, [pc, #40]	; 24bc <_sercom_get_async_baud_val+0x80>
    2494:	47c0      	blx	r8
    2496:	4680      	mov	r8, r0
		if(baud_int > BAUD_INT_MAX) {
    2498:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
    249c:	d902      	bls.n	24a4 <_sercom_get_async_baud_val+0x68>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    249e:	2040      	movs	r0, #64	; 0x40
}
    24a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    24a4:	4622      	mov	r2, r4
    24a6:	462b      	mov	r3, r5
    24a8:	00f0      	lsls	r0, r6, #3
    24aa:	0f71      	lsrs	r1, r6, #29
    24ac:	4c03      	ldr	r4, [pc, #12]	; (24bc <_sercom_get_async_baud_val+0x80>)
    24ae:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    24b0:	eba0 00c8 	sub.w	r0, r0, r8, lsl #3
		baud_calculated = baud_int | (baud_fp << 13);
    24b4:	b2c0      	uxtb	r0, r0
    24b6:	ea48 3040 	orr.w	r0, r8, r0, lsl #13
    24ba:	e7db      	b.n	2474 <_sercom_get_async_baud_val+0x38>
    24bc:	00002395 	.word	0x00002395

000024c0 <sercom_set_gclk_generator>:
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    24c0:	4b0e      	ldr	r3, [pc, #56]	; (24fc <sercom_set_gclk_generator+0x3c>)
    24c2:	781b      	ldrb	r3, [r3, #0]
    24c4:	b13b      	cbz	r3, 24d6 <sercom_set_gclk_generator+0x16>
    24c6:	b931      	cbnz	r1, 24d6 <sercom_set_gclk_generator+0x16>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    24c8:	4b0c      	ldr	r3, [pc, #48]	; (24fc <sercom_set_gclk_generator+0x3c>)
    24ca:	785b      	ldrb	r3, [r3, #1]
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    24cc:	4283      	cmp	r3, r0
    24ce:	bf14      	ite	ne
    24d0:	201d      	movne	r0, #29
    24d2:	2000      	moveq	r0, #0
    24d4:	4770      	bx	lr
{
    24d6:	b510      	push	{r4, lr}
    24d8:	b082      	sub	sp, #8
    24da:	4604      	mov	r4, r0
		gclk_chan_conf.source_generator = generator_source;
    24dc:	a902      	add	r1, sp, #8
    24de:	f801 0d04 	strb.w	r0, [r1, #-4]!
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    24e2:	2013      	movs	r0, #19
    24e4:	4b06      	ldr	r3, [pc, #24]	; (2500 <sercom_set_gclk_generator+0x40>)
    24e6:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    24e8:	2013      	movs	r0, #19
    24ea:	4b06      	ldr	r3, [pc, #24]	; (2504 <sercom_set_gclk_generator+0x44>)
    24ec:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    24ee:	4b03      	ldr	r3, [pc, #12]	; (24fc <sercom_set_gclk_generator+0x3c>)
    24f0:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    24f2:	2201      	movs	r2, #1
    24f4:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    24f6:	2000      	movs	r0, #0
}
    24f8:	b002      	add	sp, #8
    24fa:	bd10      	pop	{r4, pc}
    24fc:	200002b4 	.word	0x200002b4
    2500:	00003361 	.word	0x00003361
    2504:	000032e1 	.word	0x000032e1

00002508 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    2508:	4b3c      	ldr	r3, [pc, #240]	; (25fc <_sercom_get_default_pad+0xf4>)
    250a:	4298      	cmp	r0, r3
    250c:	d031      	beq.n	2572 <_sercom_get_default_pad+0x6a>
    250e:	d90c      	bls.n	252a <_sercom_get_default_pad+0x22>
    2510:	4b3b      	ldr	r3, [pc, #236]	; (2600 <_sercom_get_default_pad+0xf8>)
    2512:	4298      	cmp	r0, r3
    2514:	d049      	beq.n	25aa <_sercom_get_default_pad+0xa2>
    2516:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    251a:	4298      	cmp	r0, r3
    251c:	d053      	beq.n	25c6 <_sercom_get_default_pad+0xbe>
    251e:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
    2522:	4298      	cmp	r0, r3
    2524:	d033      	beq.n	258e <_sercom_get_default_pad+0x86>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    2526:	2000      	movs	r0, #0
    2528:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    252a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
    252e:	4298      	cmp	r0, r3
    2530:	d009      	beq.n	2546 <_sercom_get_default_pad+0x3e>
    2532:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    2536:	4298      	cmp	r0, r3
    2538:	d1f5      	bne.n	2526 <_sercom_get_default_pad+0x1e>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    253a:	2903      	cmp	r1, #3
    253c:	d813      	bhi.n	2566 <_sercom_get_default_pad+0x5e>
    253e:	e8df f001 	tbb	[pc, r1]
    2542:	1052      	.short	0x1052
    2544:	1614      	.short	0x1614
    2546:	2903      	cmp	r1, #3
    2548:	d805      	bhi.n	2556 <_sercom_get_default_pad+0x4e>
    254a:	e8df f001 	tbb	[pc, r1]
    254e:	024a      	.short	0x024a
    2550:	0806      	.short	0x0806
    2552:	482c      	ldr	r0, [pc, #176]	; (2604 <_sercom_get_default_pad+0xfc>)
    2554:	4770      	bx	lr
	return 0;
    2556:	2000      	movs	r0, #0
    2558:	4770      	bx	lr
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    255a:	482b      	ldr	r0, [pc, #172]	; (2608 <_sercom_get_default_pad+0x100>)
    255c:	4770      	bx	lr
    255e:	482b      	ldr	r0, [pc, #172]	; (260c <_sercom_get_default_pad+0x104>)
    2560:	4770      	bx	lr
    2562:	482b      	ldr	r0, [pc, #172]	; (2610 <_sercom_get_default_pad+0x108>)
    2564:	4770      	bx	lr
	return 0;
    2566:	2000      	movs	r0, #0
    2568:	4770      	bx	lr
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    256a:	482a      	ldr	r0, [pc, #168]	; (2614 <_sercom_get_default_pad+0x10c>)
    256c:	4770      	bx	lr
    256e:	482a      	ldr	r0, [pc, #168]	; (2618 <_sercom_get_default_pad+0x110>)
    2570:	4770      	bx	lr
    2572:	2903      	cmp	r1, #3
    2574:	d805      	bhi.n	2582 <_sercom_get_default_pad+0x7a>
    2576:	e8df f001 	tbb	[pc, r1]
    257a:	0238      	.short	0x0238
    257c:	0806      	.short	0x0806
    257e:	4827      	ldr	r0, [pc, #156]	; (261c <_sercom_get_default_pad+0x114>)
    2580:	4770      	bx	lr
	return 0;
    2582:	2000      	movs	r0, #0
    2584:	4770      	bx	lr
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2586:	4826      	ldr	r0, [pc, #152]	; (2620 <_sercom_get_default_pad+0x118>)
    2588:	4770      	bx	lr
    258a:	4826      	ldr	r0, [pc, #152]	; (2624 <_sercom_get_default_pad+0x11c>)
    258c:	4770      	bx	lr
    258e:	2903      	cmp	r1, #3
    2590:	d805      	bhi.n	259e <_sercom_get_default_pad+0x96>
    2592:	e8df f001 	tbb	[pc, r1]
    2596:	022c      	.short	0x022c
    2598:	0806      	.short	0x0806
    259a:	4823      	ldr	r0, [pc, #140]	; (2628 <_sercom_get_default_pad+0x120>)
    259c:	4770      	bx	lr
	return 0;
    259e:	2000      	movs	r0, #0
    25a0:	4770      	bx	lr
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    25a2:	4822      	ldr	r0, [pc, #136]	; (262c <_sercom_get_default_pad+0x124>)
    25a4:	4770      	bx	lr
    25a6:	4822      	ldr	r0, [pc, #136]	; (2630 <_sercom_get_default_pad+0x128>)
    25a8:	4770      	bx	lr
    25aa:	2903      	cmp	r1, #3
    25ac:	d805      	bhi.n	25ba <_sercom_get_default_pad+0xb2>
    25ae:	e8df f001 	tbb	[pc, r1]
    25b2:	0220      	.short	0x0220
    25b4:	0806      	.short	0x0806
    25b6:	481f      	ldr	r0, [pc, #124]	; (2634 <_sercom_get_default_pad+0x12c>)
    25b8:	4770      	bx	lr
	return 0;
    25ba:	2000      	movs	r0, #0
    25bc:	4770      	bx	lr
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    25be:	481e      	ldr	r0, [pc, #120]	; (2638 <_sercom_get_default_pad+0x130>)
    25c0:	4770      	bx	lr
    25c2:	481e      	ldr	r0, [pc, #120]	; (263c <_sercom_get_default_pad+0x134>)
    25c4:	4770      	bx	lr
    25c6:	2903      	cmp	r1, #3
    25c8:	d805      	bhi.n	25d6 <_sercom_get_default_pad+0xce>
    25ca:	e8df f001 	tbb	[pc, r1]
    25ce:	0214      	.short	0x0214
    25d0:	0806      	.short	0x0806
    25d2:	481b      	ldr	r0, [pc, #108]	; (2640 <_sercom_get_default_pad+0x138>)
    25d4:	4770      	bx	lr
	return 0;
    25d6:	2000      	movs	r0, #0
    25d8:	4770      	bx	lr
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    25da:	481a      	ldr	r0, [pc, #104]	; (2644 <_sercom_get_default_pad+0x13c>)
    25dc:	4770      	bx	lr
    25de:	481a      	ldr	r0, [pc, #104]	; (2648 <_sercom_get_default_pad+0x140>)
    25e0:	4770      	bx	lr
    25e2:	481a      	ldr	r0, [pc, #104]	; (264c <_sercom_get_default_pad+0x144>)
    25e4:	4770      	bx	lr
    25e6:	2003      	movs	r0, #3
    25e8:	4770      	bx	lr
    25ea:	4819      	ldr	r0, [pc, #100]	; (2650 <_sercom_get_default_pad+0x148>)
    25ec:	4770      	bx	lr
    25ee:	4819      	ldr	r0, [pc, #100]	; (2654 <_sercom_get_default_pad+0x14c>)
    25f0:	4770      	bx	lr
    25f2:	4819      	ldr	r0, [pc, #100]	; (2658 <_sercom_get_default_pad+0x150>)
    25f4:	4770      	bx	lr
    25f6:	4819      	ldr	r0, [pc, #100]	; (265c <_sercom_get_default_pad+0x154>)
}
    25f8:	4770      	bx	lr
    25fa:	bf00      	nop
    25fc:	42001000 	.word	0x42001000
    2600:	42001800 	.word	0x42001800
    2604:	00050003 	.word	0x00050003
    2608:	00060003 	.word	0x00060003
    260c:	00070003 	.word	0x00070003
    2610:	00010003 	.word	0x00010003
    2614:	001e0003 	.word	0x001e0003
    2618:	001f0003 	.word	0x001f0003
    261c:	00090003 	.word	0x00090003
    2620:	000a0003 	.word	0x000a0003
    2624:	000b0003 	.word	0x000b0003
    2628:	00110003 	.word	0x00110003
    262c:	00120003 	.word	0x00120003
    2630:	00130003 	.word	0x00130003
    2634:	000d0003 	.word	0x000d0003
    2638:	000e0003 	.word	0x000e0003
    263c:	000f0003 	.word	0x000f0003
    2640:	00170003 	.word	0x00170003
    2644:	00180003 	.word	0x00180003
    2648:	00190003 	.word	0x00190003
    264c:	00040003 	.word	0x00040003
    2650:	00080003 	.word	0x00080003
    2654:	00100003 	.word	0x00100003
    2658:	000c0003 	.word	0x000c0003
    265c:	00160003 	.word	0x00160003

00002660 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    2660:	b470      	push	{r4, r5, r6}
    2662:	b087      	sub	sp, #28
    2664:	4606      	mov	r6, r0
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    2666:	466c      	mov	r4, sp
    2668:	4d0c      	ldr	r5, [pc, #48]	; (269c <_sercom_get_sercom_inst_index+0x3c>)
    266a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    266c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    266e:	e895 0003 	ldmia.w	r5, {r0, r1}
    2672:	e884 0003 	stmia.w	r4, {r0, r1}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    2676:	9b00      	ldr	r3, [sp, #0]
    2678:	42b3      	cmp	r3, r6
    267a:	d00c      	beq.n	2696 <_sercom_get_sercom_inst_index+0x36>
    267c:	4632      	mov	r2, r6
    267e:	2001      	movs	r0, #1
    2680:	f85d 3020 	ldr.w	r3, [sp, r0, lsl #2]
    2684:	4293      	cmp	r3, r2
    2686:	d007      	beq.n	2698 <_sercom_get_sercom_inst_index+0x38>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2688:	3001      	adds	r0, #1
    268a:	2806      	cmp	r0, #6
    268c:	d1f8      	bne.n	2680 <_sercom_get_sercom_inst_index+0x20>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    268e:	2000      	movs	r0, #0
}
    2690:	b007      	add	sp, #28
    2692:	bc70      	pop	{r4, r5, r6}
    2694:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2696:	2000      	movs	r0, #0
			return i;
    2698:	b2c0      	uxtb	r0, r0
    269a:	e7f9      	b.n	2690 <_sercom_get_sercom_inst_index+0x30>
    269c:	00006580 	.word	0x00006580

000026a0 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    26a0:	4770      	bx	lr
	...

000026a4 <_sercom_set_handler>:
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	// Initialize handlers with default handler and device instances with 0 
	if (_handler_table_initialized == false) {
    26a4:	4b0d      	ldr	r3, [pc, #52]	; (26dc <_sercom_set_handler+0x38>)
    26a6:	781b      	ldrb	r3, [r3, #0]
    26a8:	b9a3      	cbnz	r3, 26d4 <_sercom_set_handler+0x30>
{
    26aa:	b470      	push	{r4, r5, r6}
    26ac:	4b0c      	ldr	r3, [pc, #48]	; (26e0 <_sercom_set_handler+0x3c>)
    26ae:	4a0d      	ldr	r2, [pc, #52]	; (26e4 <_sercom_set_handler+0x40>)
    26b0:	f103 0618 	add.w	r6, r3, #24
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    26b4:	4d0c      	ldr	r5, [pc, #48]	; (26e8 <_sercom_set_handler+0x44>)
			_sercom_instances[i] = NULL;
    26b6:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    26b8:	f843 5b04 	str.w	r5, [r3], #4
			_sercom_instances[i] = NULL;
    26bc:	f842 4b04 	str.w	r4, [r2], #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    26c0:	42b3      	cmp	r3, r6
    26c2:	d1f9      	bne.n	26b8 <_sercom_set_handler+0x14>
		}

		_handler_table_initialized = true;
    26c4:	2201      	movs	r2, #1
    26c6:	4b05      	ldr	r3, [pc, #20]	; (26dc <_sercom_set_handler+0x38>)
    26c8:	701a      	strb	r2, [r3, #0]
	}

	// Save interrupt handler 
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    26ca:	4b05      	ldr	r3, [pc, #20]	; (26e0 <_sercom_set_handler+0x3c>)
    26cc:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
    26d0:	bc70      	pop	{r4, r5, r6}
    26d2:	4770      	bx	lr
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    26d4:	4b02      	ldr	r3, [pc, #8]	; (26e0 <_sercom_set_handler+0x3c>)
    26d6:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
    26da:	4770      	bx	lr
    26dc:	200002b6 	.word	0x200002b6
    26e0:	200002b8 	.word	0x200002b8
    26e4:	20000398 	.word	0x20000398
    26e8:	000026a1 	.word	0x000026a1

000026ec <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    26ec:	b500      	push	{lr}
    26ee:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    26f0:	2309      	movs	r3, #9
    26f2:	f88d 3000 	strb.w	r3, [sp]
    26f6:	230a      	movs	r3, #10
    26f8:	f88d 3001 	strb.w	r3, [sp, #1]
    26fc:	230b      	movs	r3, #11
    26fe:	f88d 3002 	strb.w	r3, [sp, #2]
    2702:	230c      	movs	r3, #12
    2704:	f88d 3003 	strb.w	r3, [sp, #3]
    2708:	230d      	movs	r3, #13
    270a:	f88d 3004 	strb.w	r3, [sp, #4]
    270e:	230e      	movs	r3, #14
    2710:	f88d 3005 	strb.w	r3, [sp, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    2714:	4b04      	ldr	r3, [pc, #16]	; (2728 <_sercom_get_interrupt_vector+0x3c>)
    2716:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    2718:	ab02      	add	r3, sp, #8
    271a:	4418      	add	r0, r3
}
    271c:	f910 0c08 	ldrsb.w	r0, [r0, #-8]
    2720:	b003      	add	sp, #12
    2722:	f85d fb04 	ldr.w	pc, [sp], #4
    2726:	bf00      	nop
    2728:	00002661 	.word	0x00002661

0000272c <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    272c:	b508      	push	{r3, lr}
    272e:	4b02      	ldr	r3, [pc, #8]	; (2738 <SERCOM0_Handler+0xc>)
    2730:	681b      	ldr	r3, [r3, #0]
    2732:	2000      	movs	r0, #0
    2734:	4798      	blx	r3
    2736:	bd08      	pop	{r3, pc}
    2738:	200002b8 	.word	0x200002b8

0000273c <SERCOM1_Handler>:
    273c:	b508      	push	{r3, lr}
    273e:	4b02      	ldr	r3, [pc, #8]	; (2748 <SERCOM1_Handler+0xc>)
    2740:	685b      	ldr	r3, [r3, #4]
    2742:	2001      	movs	r0, #1
    2744:	4798      	blx	r3
    2746:	bd08      	pop	{r3, pc}
    2748:	200002b8 	.word	0x200002b8

0000274c <SERCOM2_Handler>:
    274c:	b508      	push	{r3, lr}
    274e:	4b02      	ldr	r3, [pc, #8]	; (2758 <SERCOM2_Handler+0xc>)
    2750:	689b      	ldr	r3, [r3, #8]
    2752:	2002      	movs	r0, #2
    2754:	4798      	blx	r3
    2756:	bd08      	pop	{r3, pc}
    2758:	200002b8 	.word	0x200002b8

0000275c <SERCOM3_Handler>:
    275c:	b508      	push	{r3, lr}
    275e:	4b02      	ldr	r3, [pc, #8]	; (2768 <SERCOM3_Handler+0xc>)
    2760:	68db      	ldr	r3, [r3, #12]
    2762:	2003      	movs	r0, #3
    2764:	4798      	blx	r3
    2766:	bd08      	pop	{r3, pc}
    2768:	200002b8 	.word	0x200002b8

0000276c <SERCOM4_Handler>:
    276c:	b508      	push	{r3, lr}
    276e:	4b02      	ldr	r3, [pc, #8]	; (2778 <SERCOM4_Handler+0xc>)
    2770:	691b      	ldr	r3, [r3, #16]
    2772:	2004      	movs	r0, #4
    2774:	4798      	blx	r3
    2776:	bd08      	pop	{r3, pc}
    2778:	200002b8 	.word	0x200002b8

0000277c <SERCOM5_Handler>:
    277c:	b508      	push	{r3, lr}
    277e:	4b02      	ldr	r3, [pc, #8]	; (2788 <SERCOM5_Handler+0xc>)
    2780:	695b      	ldr	r3, [r3, #20]
    2782:	2005      	movs	r0, #5
    2784:	4798      	blx	r3
    2786:	bd08      	pop	{r3, pc}
    2788:	200002b8 	.word	0x200002b8

0000278c <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    278c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2790:	b091      	sub	sp, #68	; 0x44
    2792:	4605      	mov	r5, r0
    2794:	460c      	mov	r4, r1
    2796:	4616      	mov	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    2798:	6001      	str	r1, [r0, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    279a:	4608      	mov	r0, r1
    279c:	4bad      	ldr	r3, [pc, #692]	; (2a54 <usart_init+0x2c8>)
    279e:	4798      	blx	r3
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    27a0:	6823      	ldr	r3, [r4, #0]
    27a2:	f013 0f01 	tst.w	r3, #1
    27a6:	d003      	beq.n	27b0 <usart_init+0x24>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    27a8:	2005      	movs	r0, #5
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    27aa:	b011      	add	sp, #68	; 0x44
    27ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    27b0:	6823      	ldr	r3, [r4, #0]
    27b2:	f013 0f02 	tst.w	r3, #2
    27b6:	d001      	beq.n	27bc <usart_init+0x30>
		return STATUS_ERR_DENIED;
    27b8:	201c      	movs	r0, #28
    27ba:	e7f6      	b.n	27aa <usart_init+0x1e>
    27bc:	4aa6      	ldr	r2, [pc, #664]	; (2a58 <usart_init+0x2cc>)
    27be:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    27c0:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    27c2:	2301      	movs	r3, #1
    27c4:	40bb      	lsls	r3, r7
    27c6:	430b      	orrs	r3, r1
    27c8:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    27ca:	f896 302d 	ldrb.w	r3, [r6, #45]	; 0x2d
    27ce:	a910      	add	r1, sp, #64	; 0x40
    27d0:	f801 3d04 	strb.w	r3, [r1, #-4]!
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    27d4:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    27d6:	b2c7      	uxtb	r7, r0
    27d8:	4638      	mov	r0, r7
    27da:	4ba0      	ldr	r3, [pc, #640]	; (2a5c <usart_init+0x2d0>)
    27dc:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    27de:	4638      	mov	r0, r7
    27e0:	4b9f      	ldr	r3, [pc, #636]	; (2a60 <usart_init+0x2d4>)
    27e2:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    27e4:	2100      	movs	r1, #0
    27e6:	f896 002d 	ldrb.w	r0, [r6, #45]	; 0x2d
    27ea:	4b9e      	ldr	r3, [pc, #632]	; (2a64 <usart_init+0x2d8>)
    27ec:	4798      	blx	r3
	module->character_size = config->character_size;
    27ee:	7af3      	ldrb	r3, [r6, #11]
    27f0:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    27f2:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
    27f6:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    27f8:	f896 3025 	ldrb.w	r3, [r6, #37]	; 0x25
    27fc:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    27fe:	7ef3      	ldrb	r3, [r6, #27]
    2800:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    2802:	7f33      	ldrb	r3, [r6, #28]
    2804:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2806:	f8d5 9000 	ldr.w	r9, [r5]
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    280a:	4648      	mov	r0, r9
    280c:	4b91      	ldr	r3, [pc, #580]	; (2a54 <usart_init+0x2c8>)
    280e:	4798      	blx	r3
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2810:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    2812:	2300      	movs	r3, #0
    2814:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
	switch (config->sample_rate) {
    2818:	f8b6 8010 	ldrh.w	r8, [r6, #16]
    281c:	f5b8 4f80 	cmp.w	r8, #16384	; 0x4000
    2820:	f000 8094 	beq.w	294c <usart_init+0x1c0>
    2824:	d90c      	bls.n	2840 <usart_init+0xb4>
    2826:	f5b8 4fc0 	cmp.w	r8, #24576	; 0x6000
    282a:	f000 808a 	beq.w	2942 <usart_init+0x1b6>
    282e:	f5b8 4f00 	cmp.w	r8, #32768	; 0x8000
    2832:	f040 812b 	bne.w	2a8c <usart_init+0x300>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    2836:	2303      	movs	r3, #3
    2838:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    283a:	2300      	movs	r3, #0
    283c:	9307      	str	r3, [sp, #28]
    283e:	e007      	b.n	2850 <usart_init+0xc4>
	switch (config->sample_rate) {
    2840:	f5b8 5f00 	cmp.w	r8, #8192	; 0x2000
    2844:	f040 8122 	bne.w	2a8c <usart_init+0x300>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    2848:	2310      	movs	r3, #16
    284a:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    284c:	2301      	movs	r3, #1
    284e:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    2850:	6833      	ldr	r3, [r6, #0]
    2852:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    2854:	68f3      	ldr	r3, [r6, #12]
    2856:	9304      	str	r3, [sp, #16]
		config->sample_adjustment |
    2858:	6973      	ldr	r3, [r6, #20]
    285a:	9302      	str	r3, [sp, #8]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    285c:	f896 b018 	ldrb.w	fp, [r6, #24]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2860:	f896 3026 	ldrb.w	r3, [r6, #38]	; 0x26
    2864:	9303      	str	r3, [sp, #12]
	transfer_mode = (uint32_t)config->transfer_mode;
    2866:	f8d6 a004 	ldr.w	sl, [r6, #4]
	switch (transfer_mode)
    286a:	f1ba 0f00 	cmp.w	sl, #0
    286e:	f000 8097 	beq.w	29a0 <usart_init+0x214>
    2872:	f1ba 5f80 	cmp.w	sl, #268435456	; 0x10000000
    2876:	d07e      	beq.n	2976 <usart_init+0x1ea>
	if(config->encoding_format_enable) {
    2878:	7e73      	ldrb	r3, [r6, #25]
    287a:	b113      	cbz	r3, 2882 <usart_init+0xf6>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    287c:	7eb3      	ldrb	r3, [r6, #26]
    287e:	f889 300e 	strb.w	r3, [r9, #14]
	usart_hw->BAUD.reg = baud;
    2882:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
    2886:	f8a9 300c 	strh.w	r3, [r9, #12]
	ctrla |= transfer_mode;
    288a:	9a04      	ldr	r2, [sp, #16]
    288c:	9b05      	ldr	r3, [sp, #20]
    288e:	431a      	orrs	r2, r3
    2890:	9b02      	ldr	r3, [sp, #8]
    2892:	431a      	orrs	r2, r3
    2894:	ea42 020a 	orr.w	r2, r2, sl
    2898:	ea42 0208 	orr.w	r2, r2, r8
    289c:	ea42 220b 	orr.w	r2, r2, fp, lsl #8
    28a0:	9b03      	ldr	r3, [sp, #12]
    28a2:	ea42 7243 	orr.w	r2, r2, r3, lsl #29
	if (config->use_external_clock == false) {
    28a6:	f896 3027 	ldrb.w	r3, [r6, #39]	; 0x27
    28aa:	b90b      	cbnz	r3, 28b0 <usart_init+0x124>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    28ac:	f042 0204 	orr.w	r2, r2, #4
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    28b0:	7e71      	ldrb	r1, [r6, #25]
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    28b2:	7f33      	ldrb	r3, [r6, #28]
    28b4:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    28b6:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    28ba:	7f71      	ldrb	r1, [r6, #29]
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    28bc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    28c0:	f896 1024 	ldrb.w	r1, [r6, #36]	; 0x24
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    28c4:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    28c8:	f896 1025 	ldrb.w	r1, [r6, #37]	; 0x25
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    28cc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	ctrlb |= (uint32_t)config->character_size;
    28d0:	7ab0      	ldrb	r0, [r6, #10]
    28d2:	7af1      	ldrb	r1, [r6, #11]
    28d4:	4308      	orrs	r0, r1
    28d6:	4318      	orrs	r0, r3
	if (config->parity != USART_PARITY_NONE) {
    28d8:	8933      	ldrh	r3, [r6, #8]
    28da:	2bff      	cmp	r3, #255	; 0xff
    28dc:	d07f      	beq.n	29de <usart_init+0x252>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    28de:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
		ctrlb |= config->parity;
    28e2:	4318      	orrs	r0, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    28e4:	f896 302c 	ldrb.w	r3, [r6, #44]	; 0x2c
    28e8:	b923      	cbnz	r3, 28f4 <usart_init+0x168>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    28ea:	4b5f      	ldr	r3, [pc, #380]	; (2a68 <usart_init+0x2dc>)
    28ec:	789b      	ldrb	r3, [r3, #2]
    28ee:	f013 0f02 	tst.w	r3, #2
    28f2:	d001      	beq.n	28f8 <usart_init+0x16c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    28f4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
	SercomUsart *const usart_hw = &(module->hw->USART);
    28f8:	6829      	ldr	r1, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    28fa:	69cb      	ldr	r3, [r1, #28]
	while (usart_is_syncing(module)) {
    28fc:	2b00      	cmp	r3, #0
    28fe:	d1fc      	bne.n	28fa <usart_init+0x16e>
	usart_hw->CTRLB.reg = ctrlb;
    2900:	f8c9 0004 	str.w	r0, [r9, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2904:	6829      	ldr	r1, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2906:	69cb      	ldr	r3, [r1, #28]
	while (usart_is_syncing(module)) {
    2908:	2b00      	cmp	r3, #0
    290a:	d1fc      	bne.n	2906 <usart_init+0x17a>
	usart_hw->CTRLA.reg = ctrla;
    290c:	f8c9 2000 	str.w	r2, [r9]
    2910:	2380      	movs	r3, #128	; 0x80
    2912:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2916:	2300      	movs	r3, #0
    2918:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
	config->powersave    = false;
    291c:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    2920:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
	uint32_t pad_pinmuxes[] = {
    2924:	6b32      	ldr	r2, [r6, #48]	; 0x30
    2926:	920a      	str	r2, [sp, #40]	; 0x28
    2928:	6b72      	ldr	r2, [r6, #52]	; 0x34
    292a:	920b      	str	r2, [sp, #44]	; 0x2c
    292c:	6bb2      	ldr	r2, [r6, #56]	; 0x38
    292e:	920c      	str	r2, [sp, #48]	; 0x30
    2930:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
    2932:	920d      	str	r2, [sp, #52]	; 0x34
    2934:	461e      	mov	r6, r3
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2936:	af0a      	add	r7, sp, #40	; 0x28
			current_pinmux = _sercom_get_default_pad(hw, pad);
    2938:	f8df 9148 	ldr.w	r9, [pc, #328]	; 2a84 <usart_init+0x2f8>
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    293c:	f8df 8148 	ldr.w	r8, [pc, #328]	; 2a88 <usart_init+0x2fc>
    2940:	e05a      	b.n	29f8 <usart_init+0x26c>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    2942:	2308      	movs	r3, #8
    2944:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    2946:	2301      	movs	r3, #1
    2948:	9307      	str	r3, [sp, #28]
    294a:	e781      	b.n	2850 <usart_init+0xc4>
	ctrla = (uint32_t)config->data_order |
    294c:	6833      	ldr	r3, [r6, #0]
    294e:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    2950:	68f3      	ldr	r3, [r6, #12]
    2952:	9304      	str	r3, [sp, #16]
		config->sample_adjustment |
    2954:	6973      	ldr	r3, [r6, #20]
    2956:	9302      	str	r3, [sp, #8]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2958:	f896 b018 	ldrb.w	fp, [r6, #24]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    295c:	f896 3026 	ldrb.w	r3, [r6, #38]	; 0x26
    2960:	9303      	str	r3, [sp, #12]
	transfer_mode = (uint32_t)config->transfer_mode;
    2962:	f8d6 a004 	ldr.w	sl, [r6, #4]
	switch (transfer_mode)
    2966:	f1ba 0f00 	cmp.w	sl, #0
    296a:	d015      	beq.n	2998 <usart_init+0x20c>
    296c:	f1ba 5f80 	cmp.w	sl, #268435456	; 0x10000000
    2970:	d001      	beq.n	2976 <usart_init+0x1ea>
	enum status_code status_code = STATUS_OK;
    2972:	2000      	movs	r0, #0
    2974:	e020      	b.n	29b8 <usart_init+0x22c>
			if (!config->use_external_clock) {
    2976:	f896 3027 	ldrb.w	r3, [r6, #39]	; 0x27
    297a:	2b00      	cmp	r3, #0
    297c:	f47f af7c 	bne.w	2878 <usart_init+0xec>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    2980:	6a33      	ldr	r3, [r6, #32]
    2982:	461f      	mov	r7, r3
    2984:	b2c0      	uxtb	r0, r0
    2986:	4b39      	ldr	r3, [pc, #228]	; (2a6c <usart_init+0x2e0>)
    2988:	4798      	blx	r3
    298a:	f10d 0226 	add.w	r2, sp, #38	; 0x26
    298e:	4601      	mov	r1, r0
    2990:	4638      	mov	r0, r7
    2992:	4b37      	ldr	r3, [pc, #220]	; (2a70 <usart_init+0x2e4>)
    2994:	4798      	blx	r3
    2996:	e00f      	b.n	29b8 <usart_init+0x22c>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    2998:	2308      	movs	r3, #8
    299a:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    299c:	2300      	movs	r3, #0
    299e:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    29a0:	f896 3027 	ldrb.w	r3, [r6, #39]	; 0x27
    29a4:	b163      	cbz	r3, 29c0 <usart_init+0x234>
				status_code =
    29a6:	9b06      	ldr	r3, [sp, #24]
    29a8:	9300      	str	r3, [sp, #0]
    29aa:	9b07      	ldr	r3, [sp, #28]
    29ac:	f10d 0226 	add.w	r2, sp, #38	; 0x26
    29b0:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    29b2:	6a30      	ldr	r0, [r6, #32]
    29b4:	4f2f      	ldr	r7, [pc, #188]	; (2a74 <usart_init+0x2e8>)
    29b6:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    29b8:	2800      	cmp	r0, #0
    29ba:	f47f aef6 	bne.w	27aa <usart_init+0x1e>
    29be:	e75b      	b.n	2878 <usart_init+0xec>
						_sercom_get_async_baud_val(config->baudrate,
    29c0:	6a33      	ldr	r3, [r6, #32]
    29c2:	461f      	mov	r7, r3
    29c4:	b2c0      	uxtb	r0, r0
    29c6:	4b29      	ldr	r3, [pc, #164]	; (2a6c <usart_init+0x2e0>)
    29c8:	4798      	blx	r3
				status_code =
    29ca:	9b06      	ldr	r3, [sp, #24]
    29cc:	9300      	str	r3, [sp, #0]
    29ce:	9b07      	ldr	r3, [sp, #28]
    29d0:	f10d 0226 	add.w	r2, sp, #38	; 0x26
    29d4:	4601      	mov	r1, r0
    29d6:	4638      	mov	r0, r7
    29d8:	4f26      	ldr	r7, [pc, #152]	; (2a74 <usart_init+0x2e8>)
    29da:	47b8      	blx	r7
    29dc:	e7ec      	b.n	29b8 <usart_init+0x22c>
		if(config->lin_slave_enable) {
    29de:	7ef3      	ldrb	r3, [r6, #27]
    29e0:	2b00      	cmp	r3, #0
    29e2:	f43f af7f 	beq.w	28e4 <usart_init+0x158>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    29e6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
    29ea:	e77b      	b.n	28e4 <usart_init+0x158>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    29ec:	4620      	mov	r0, r4
    29ee:	47c8      	blx	r9
    29f0:	e007      	b.n	2a02 <usart_init+0x276>
    29f2:	3601      	adds	r6, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    29f4:	2e04      	cmp	r6, #4
    29f6:	d00e      	beq.n	2a16 <usart_init+0x28a>
    29f8:	b2f1      	uxtb	r1, r6
		uint32_t current_pinmux = pad_pinmuxes[pad];
    29fa:	f857 0026 	ldr.w	r0, [r7, r6, lsl #2]
		if (current_pinmux == PINMUX_DEFAULT) {
    29fe:	2800      	cmp	r0, #0
    2a00:	d0f4      	beq.n	29ec <usart_init+0x260>
		if (current_pinmux != PINMUX_UNUSED) {
    2a02:	f1b0 3fff 	cmp.w	r0, #4294967295
    2a06:	d0f4      	beq.n	29f2 <usart_init+0x266>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    2a08:	a910      	add	r1, sp, #64	; 0x40
    2a0a:	f801 0d08 	strb.w	r0, [r1, #-8]!
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    2a0e:	f3c0 4007 	ubfx	r0, r0, #16, #8
    2a12:	47c0      	blx	r8
    2a14:	e7ed      	b.n	29f2 <usart_init+0x266>
		module->callback[i]            = NULL;
    2a16:	2400      	movs	r4, #0
    2a18:	60ec      	str	r4, [r5, #12]
    2a1a:	612c      	str	r4, [r5, #16]
    2a1c:	616c      	str	r4, [r5, #20]
    2a1e:	61ac      	str	r4, [r5, #24]
    2a20:	61ec      	str	r4, [r5, #28]
    2a22:	622c      	str	r4, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    2a24:	62ac      	str	r4, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    2a26:	626c      	str	r4, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    2a28:	85ec      	strh	r4, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    2a2a:	85ac      	strh	r4, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    2a2c:	f885 4030 	strb.w	r4, [r5, #48]	; 0x30
	module->callback_enable_mask       = 0x00;
    2a30:	f885 4031 	strb.w	r4, [r5, #49]	; 0x31
	module->rx_status                  = STATUS_OK;
    2a34:	f885 4032 	strb.w	r4, [r5, #50]	; 0x32
	module->tx_status                  = STATUS_OK;
    2a38:	f885 4033 	strb.w	r4, [r5, #51]	; 0x33
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    2a3c:	6828      	ldr	r0, [r5, #0]
    2a3e:	4b05      	ldr	r3, [pc, #20]	; (2a54 <usart_init+0x2c8>)
    2a40:	4798      	blx	r3
    2a42:	4606      	mov	r6, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    2a44:	490c      	ldr	r1, [pc, #48]	; (2a78 <usart_init+0x2ec>)
    2a46:	4b0d      	ldr	r3, [pc, #52]	; (2a7c <usart_init+0x2f0>)
    2a48:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    2a4a:	4b0d      	ldr	r3, [pc, #52]	; (2a80 <usart_init+0x2f4>)
    2a4c:	f843 5026 	str.w	r5, [r3, r6, lsl #2]
	return status_code;
    2a50:	4620      	mov	r0, r4
    2a52:	e6aa      	b.n	27aa <usart_init+0x1e>
    2a54:	00002661 	.word	0x00002661
    2a58:	40000400 	.word	0x40000400
    2a5c:	00003361 	.word	0x00003361
    2a60:	000032e1 	.word	0x000032e1
    2a64:	000024c1 	.word	0x000024c1
    2a68:	41002000 	.word	0x41002000
    2a6c:	0000337d 	.word	0x0000337d
    2a70:	00002415 	.word	0x00002415
    2a74:	0000243d 	.word	0x0000243d
    2a78:	00002bbd 	.word	0x00002bbd
    2a7c:	000026a5 	.word	0x000026a5
    2a80:	20000398 	.word	0x20000398
    2a84:	00002509 	.word	0x00002509
    2a88:	00003449 	.word	0x00003449
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    2a8c:	2310      	movs	r3, #16
    2a8e:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2a90:	2300      	movs	r3, #0
    2a92:	9307      	str	r3, [sp, #28]
    2a94:	e6dc      	b.n	2850 <usart_init+0xc4>
    2a96:	bf00      	nop

00002a98 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    2a98:	79c3      	ldrb	r3, [r0, #7]
    2a9a:	b90b      	cbnz	r3, 2aa0 <usart_write_wait+0x8>
		return STATUS_ERR_DENIED;
    2a9c:	201c      	movs	r0, #28
    2a9e:	4770      	bx	lr
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    2aa0:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
    2aa2:	b29b      	uxth	r3, r3
    2aa4:	b10b      	cbz	r3, 2aaa <usart_write_wait+0x12>
		return STATUS_BUSY;
    2aa6:	2005      	movs	r0, #5
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    2aa8:	4770      	bx	lr
	SercomUsart *const usart_hw = &(module->hw->USART);
    2aaa:	6802      	ldr	r2, [r0, #0]
	usart_hw->DATA.reg = tx_data;
    2aac:	8511      	strh	r1, [r2, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    2aae:	7e13      	ldrb	r3, [r2, #24]
    2ab0:	f013 0f02 	tst.w	r3, #2
    2ab4:	d0fb      	beq.n	2aae <usart_write_wait+0x16>
	return STATUS_OK;
    2ab6:	2000      	movs	r0, #0
    2ab8:	4770      	bx	lr

00002aba <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    2aba:	7983      	ldrb	r3, [r0, #6]
    2abc:	b90b      	cbnz	r3, 2ac2 <usart_read_wait+0x8>
		return STATUS_ERR_DENIED;
    2abe:	201c      	movs	r0, #28
    2ac0:	4770      	bx	lr
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    2ac2:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
    2ac4:	b29b      	uxth	r3, r3
    2ac6:	b10b      	cbz	r3, 2acc <usart_read_wait+0x12>
		return STATUS_BUSY;
    2ac8:	2005      	movs	r0, #5
    2aca:	4770      	bx	lr
	SercomUsart *const usart_hw = &(module->hw->USART);
    2acc:	6803      	ldr	r3, [r0, #0]
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    2ace:	7e1a      	ldrb	r2, [r3, #24]
    2ad0:	f012 0f04 	tst.w	r2, #4
    2ad4:	d101      	bne.n	2ada <usart_read_wait+0x20>
		/* Return error code */
		return STATUS_BUSY;
    2ad6:	2005      	movs	r0, #5

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    2ad8:	4770      	bx	lr
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2ada:	8b5a      	ldrh	r2, [r3, #26]
    2adc:	b2d2      	uxtb	r2, r2
	if (error_code) {
    2ade:	f012 0f3f 	tst.w	r2, #63	; 0x3f
    2ae2:	d022      	beq.n	2b2a <usart_read_wait+0x70>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    2ae4:	f012 0f02 	tst.w	r2, #2
    2ae8:	d003      	beq.n	2af2 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    2aea:	2202      	movs	r2, #2
    2aec:	835a      	strh	r2, [r3, #26]
			return STATUS_ERR_BAD_FORMAT;
    2aee:	201a      	movs	r0, #26
    2af0:	4770      	bx	lr
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2af2:	f012 0f04 	tst.w	r2, #4
    2af6:	d003      	beq.n	2b00 <usart_read_wait+0x46>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    2af8:	2204      	movs	r2, #4
    2afa:	835a      	strh	r2, [r3, #26]
			return STATUS_ERR_OVERFLOW;
    2afc:	201e      	movs	r0, #30
    2afe:	4770      	bx	lr
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2b00:	f012 0f01 	tst.w	r2, #1
    2b04:	d003      	beq.n	2b0e <usart_read_wait+0x54>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2b06:	2201      	movs	r2, #1
    2b08:	835a      	strh	r2, [r3, #26]
			return STATUS_ERR_BAD_DATA;
    2b0a:	2013      	movs	r0, #19
    2b0c:	4770      	bx	lr
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    2b0e:	f012 0f10 	tst.w	r2, #16
    2b12:	d003      	beq.n	2b1c <usart_read_wait+0x62>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    2b14:	2210      	movs	r2, #16
    2b16:	835a      	strh	r2, [r3, #26]
			return STATUS_ERR_PROTOCOL;
    2b18:	2042      	movs	r0, #66	; 0x42
    2b1a:	4770      	bx	lr
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    2b1c:	f012 0f20 	tst.w	r2, #32
    2b20:	d003      	beq.n	2b2a <usart_read_wait+0x70>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2b22:	2220      	movs	r2, #32
    2b24:	835a      	strh	r2, [r3, #26]
			return STATUS_ERR_PACKET_COLLISION;
    2b26:	2041      	movs	r0, #65	; 0x41
    2b28:	4770      	bx	lr
	*rx_data = usart_hw->DATA.reg;
    2b2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    2b2c:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    2b2e:	2000      	movs	r0, #0
    2b30:	4770      	bx	lr
	...

00002b34 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    2b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2b36:	4604      	mov	r4, r0
    2b38:	460e      	mov	r6, r1
    2b3a:	4617      	mov	r7, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2b3c:	6805      	ldr	r5, [r0, #0]
	cpu_irq_enter_critical();
    2b3e:	4b0f      	ldr	r3, [pc, #60]	; (2b7c <_usart_read_buffer+0x48>)
    2b40:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    2b42:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    2b44:	b29b      	uxth	r3, r3
    2b46:	b11b      	cbz	r3, 2b50 <_usart_read_buffer+0x1c>
	cpu_irq_leave_critical();
    2b48:	4b0d      	ldr	r3, [pc, #52]	; (2b80 <_usart_read_buffer+0x4c>)
    2b4a:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    2b4c:	2005      	movs	r0, #5
    2b4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
    2b50:	85a7      	strh	r7, [r4, #44]	; 0x2c
    2b52:	4b0b      	ldr	r3, [pc, #44]	; (2b80 <_usart_read_buffer+0x4c>)
    2b54:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	module->rx_buffer_ptr              = rx_data;
    2b56:	6266      	str	r6, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    2b58:	2305      	movs	r3, #5
    2b5a:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    2b5e:	2304      	movs	r3, #4
    2b60:	75ab      	strb	r3, [r5, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
    2b62:	7a23      	ldrb	r3, [r4, #8]
    2b64:	b10b      	cbz	r3, 2b6a <_usart_read_buffer+0x36>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    2b66:	2320      	movs	r3, #32
    2b68:	75ab      	strb	r3, [r5, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
    2b6a:	7a63      	ldrb	r3, [r4, #9]
    2b6c:	b11b      	cbz	r3, 2b76 <_usart_read_buffer+0x42>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    2b6e:	2308      	movs	r3, #8
    2b70:	75ab      	strb	r3, [r5, #22]
	}
#endif

	return STATUS_OK;
    2b72:	2000      	movs	r0, #0
    2b74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2b76:	2000      	movs	r0, #0
}
    2b78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2b7a:	bf00      	nop
    2b7c:	00001ce5 	.word	0x00001ce5
    2b80:	00001d21 	.word	0x00001d21

00002b84 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    2b84:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    2b88:	60d9      	str	r1, [r3, #12]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    2b8a:	2301      	movs	r3, #1
    2b8c:	4093      	lsls	r3, r2
    2b8e:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
    2b92:	431a      	orrs	r2, r3
    2b94:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
    2b98:	4770      	bx	lr
	...

00002b9c <usart_read_buffer_job>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
    2b9c:	b90a      	cbnz	r2, 2ba2 <usart_read_buffer_job+0x6>
		return STATUS_ERR_INVALID_ARG;
    2b9e:	2017      	movs	r0, #23
    2ba0:	4770      	bx	lr
{
    2ba2:	b508      	push	{r3, lr}
    2ba4:	4613      	mov	r3, r2
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    2ba6:	7982      	ldrb	r2, [r0, #6]
    2ba8:	b90a      	cbnz	r2, 2bae <usart_read_buffer_job+0x12>
		return STATUS_ERR_DENIED;
    2baa:	201c      	movs	r0, #28
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
    2bac:	bd08      	pop	{r3, pc}
    2bae:	461a      	mov	r2, r3
	return _usart_read_buffer(module, rx_data, length);
    2bb0:	4b01      	ldr	r3, [pc, #4]	; (2bb8 <usart_read_buffer_job+0x1c>)
    2bb2:	4798      	blx	r3
    2bb4:	bd08      	pop	{r3, pc}
    2bb6:	bf00      	nop
    2bb8:	00002b35 	.word	0x00002b35

00002bbc <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    2bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    2bbe:	4b6a      	ldr	r3, [pc, #424]	; (2d68 <_usart_interrupt_handler+0x1ac>)
    2bc0:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    2bc4:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2bc6:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    2bc8:	2b00      	cmp	r3, #0
    2bca:	d1fc      	bne.n	2bc6 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    2bcc:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    2bce:	7da6      	ldrb	r6, [r4, #22]
    2bd0:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    2bd2:	f895 7030 	ldrb.w	r7, [r5, #48]	; 0x30
    2bd6:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    2bda:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    2bdc:	f016 0f01 	tst.w	r6, #1
    2be0:	d021      	beq.n	2c26 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    2be2:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    2be4:	b29b      	uxth	r3, r3
    2be6:	b1e3      	cbz	r3, 2c22 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2be8:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    2bea:	460a      	mov	r2, r1
    2bec:	f812 3b01 	ldrb.w	r3, [r2], #1
    2bf0:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    2bf2:	62aa      	str	r2, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2bf4:	796a      	ldrb	r2, [r5, #5]
    2bf6:	2a01      	cmp	r2, #1
    2bf8:	d00d      	beq.n	2c16 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2bfa:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    2bfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
    2c00:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    2c02:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    2c04:	3b01      	subs	r3, #1
    2c06:	b29b      	uxth	r3, r3
    2c08:	85eb      	strh	r3, [r5, #46]	; 0x2e
    2c0a:	b963      	cbnz	r3, 2c26 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2c0c:	2301      	movs	r3, #1
    2c0e:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    2c10:	2302      	movs	r3, #2
    2c12:	75a3      	strb	r3, [r4, #22]
    2c14:	e007      	b.n	2c26 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    2c16:	784a      	ldrb	r2, [r1, #1]
    2c18:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
				(module->tx_buffer_ptr)++;
    2c1c:	3102      	adds	r1, #2
    2c1e:	62a9      	str	r1, [r5, #40]	; 0x28
    2c20:	e7ec      	b.n	2bfc <_usart_interrupt_handler+0x40>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2c22:	2301      	movs	r3, #1
    2c24:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    2c26:	f016 0f02 	tst.w	r6, #2
    2c2a:	d007      	beq.n	2c3c <_usart_interrupt_handler+0x80>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    2c2c:	2302      	movs	r3, #2
    2c2e:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    2c30:	2300      	movs	r3, #0
    2c32:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    2c36:	f017 0f01 	tst.w	r7, #1
    2c3a:	d11f      	bne.n	2c7c <_usart_interrupt_handler+0xc0>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    2c3c:	f016 0f04 	tst.w	r6, #4
    2c40:	d069      	beq.n	2d16 <_usart_interrupt_handler+0x15a>

		if (module->remaining_rx_buffer_length) {
    2c42:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2c44:	b29b      	uxth	r3, r3
    2c46:	2b00      	cmp	r3, #0
    2c48:	d063      	beq.n	2d12 <_usart_interrupt_handler+0x156>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2c4a:	8b63      	ldrh	r3, [r4, #26]
    2c4c:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    2c4e:	f013 0f08 	tst.w	r3, #8
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2c52:	bf0c      	ite	eq
    2c54:	f003 033f 	andeq.w	r3, r3, #63	; 0x3f
				error_code &= ~SERCOM_USART_STATUS_CTS;
    2c58:	f003 0337 	andne.w	r3, r3, #55	; 0x37
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    2c5c:	b3b3      	cbz	r3, 2ccc <_usart_interrupt_handler+0x110>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    2c5e:	f013 0f02 	tst.w	r3, #2
    2c62:	d00f      	beq.n	2c84 <_usart_interrupt_handler+0xc8>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    2c64:	231a      	movs	r3, #26
    2c66:	f885 3032 	strb.w	r3, [r5, #50]	; 0x32
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    2c6a:	2302      	movs	r3, #2
    2c6c:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    2c6e:	f017 0f04 	tst.w	r7, #4
    2c72:	d050      	beq.n	2d16 <_usart_interrupt_handler+0x15a>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    2c74:	696b      	ldr	r3, [r5, #20]
    2c76:	4628      	mov	r0, r5
    2c78:	4798      	blx	r3
    2c7a:	e04c      	b.n	2d16 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    2c7c:	68eb      	ldr	r3, [r5, #12]
    2c7e:	4628      	mov	r0, r5
    2c80:	4798      	blx	r3
    2c82:	e7db      	b.n	2c3c <_usart_interrupt_handler+0x80>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2c84:	f013 0f04 	tst.w	r3, #4
    2c88:	d005      	beq.n	2c96 <_usart_interrupt_handler+0xda>
					module->rx_status = STATUS_ERR_OVERFLOW;
    2c8a:	231e      	movs	r3, #30
    2c8c:	f885 3032 	strb.w	r3, [r5, #50]	; 0x32
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    2c90:	2304      	movs	r3, #4
    2c92:	8363      	strh	r3, [r4, #26]
    2c94:	e7eb      	b.n	2c6e <_usart_interrupt_handler+0xb2>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2c96:	f013 0f01 	tst.w	r3, #1
    2c9a:	d005      	beq.n	2ca8 <_usart_interrupt_handler+0xec>
					module->rx_status = STATUS_ERR_BAD_DATA;
    2c9c:	2313      	movs	r3, #19
    2c9e:	f885 3032 	strb.w	r3, [r5, #50]	; 0x32
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2ca2:	2301      	movs	r3, #1
    2ca4:	8363      	strh	r3, [r4, #26]
    2ca6:	e7e2      	b.n	2c6e <_usart_interrupt_handler+0xb2>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    2ca8:	f013 0f10 	tst.w	r3, #16
    2cac:	d005      	beq.n	2cba <_usart_interrupt_handler+0xfe>
					module->rx_status = STATUS_ERR_PROTOCOL;
    2cae:	2342      	movs	r3, #66	; 0x42
    2cb0:	f885 3032 	strb.w	r3, [r5, #50]	; 0x32
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    2cb4:	2310      	movs	r3, #16
    2cb6:	8363      	strh	r3, [r4, #26]
    2cb8:	e7d9      	b.n	2c6e <_usart_interrupt_handler+0xb2>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    2cba:	f013 0f20 	tst.w	r3, #32
    2cbe:	d0d6      	beq.n	2c6e <_usart_interrupt_handler+0xb2>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    2cc0:	2341      	movs	r3, #65	; 0x41
    2cc2:	f885 3032 	strb.w	r3, [r5, #50]	; 0x32
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2cc6:	2320      	movs	r3, #32
    2cc8:	8363      	strh	r3, [r4, #26]
    2cca:	e7d0      	b.n	2c6e <_usart_interrupt_handler+0xb2>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    2ccc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    2cce:	f3c3 0308 	ubfx	r3, r3, #0, #9

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    2cd2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    2cd4:	b2d9      	uxtb	r1, r3
    2cd6:	7011      	strb	r1, [r2, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    2cd8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    2cda:	1c51      	adds	r1, r2, #1
    2cdc:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2cde:	7969      	ldrb	r1, [r5, #5]
    2ce0:	2901      	cmp	r1, #1
    2ce2:	d010      	beq.n	2d06 <_usart_interrupt_handler+0x14a>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    2ce4:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2ce6:	3b01      	subs	r3, #1
    2ce8:	b29b      	uxth	r3, r3
    2cea:	85ab      	strh	r3, [r5, #44]	; 0x2c
    2cec:	b99b      	cbnz	r3, 2d16 <_usart_interrupt_handler+0x15a>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2cee:	2304      	movs	r3, #4
    2cf0:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    2cf2:	2300      	movs	r3, #0
    2cf4:	f885 3032 	strb.w	r3, [r5, #50]	; 0x32

					/* Run callback if registered and enabled */
					if (callback_status
    2cf8:	f017 0f02 	tst.w	r7, #2
    2cfc:	d00b      	beq.n	2d16 <_usart_interrupt_handler+0x15a>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    2cfe:	692b      	ldr	r3, [r5, #16]
    2d00:	4628      	mov	r0, r5
    2d02:	4798      	blx	r3
    2d04:	e007      	b.n	2d16 <_usart_interrupt_handler+0x15a>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    2d06:	0a1b      	lsrs	r3, r3, #8
    2d08:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    2d0a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    2d0c:	3301      	adds	r3, #1
    2d0e:	626b      	str	r3, [r5, #36]	; 0x24
    2d10:	e7e8      	b.n	2ce4 <_usart_interrupt_handler+0x128>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2d12:	2304      	movs	r3, #4
    2d14:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    2d16:	f016 0f10 	tst.w	r6, #16
    2d1a:	d005      	beq.n	2d28 <_usart_interrupt_handler+0x16c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    2d1c:	2310      	movs	r3, #16
    2d1e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    2d20:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    2d22:	f017 0f10 	tst.w	r7, #16
    2d26:	d112      	bne.n	2d4e <_usart_interrupt_handler+0x192>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    2d28:	f016 0f20 	tst.w	r6, #32
    2d2c:	d005      	beq.n	2d3a <_usart_interrupt_handler+0x17e>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    2d2e:	2320      	movs	r3, #32
    2d30:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    2d32:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    2d34:	f017 0f08 	tst.w	r7, #8
    2d38:	d10d      	bne.n	2d56 <_usart_interrupt_handler+0x19a>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    2d3a:	f016 0f08 	tst.w	r6, #8
    2d3e:	d005      	beq.n	2d4c <_usart_interrupt_handler+0x190>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    2d40:	2308      	movs	r3, #8
    2d42:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    2d44:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    2d46:	f017 0f20 	tst.w	r7, #32
    2d4a:	d108      	bne.n	2d5e <_usart_interrupt_handler+0x1a2>
    2d4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    2d4e:	69eb      	ldr	r3, [r5, #28]
    2d50:	4628      	mov	r0, r5
    2d52:	4798      	blx	r3
    2d54:	e7e8      	b.n	2d28 <_usart_interrupt_handler+0x16c>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    2d56:	69ab      	ldr	r3, [r5, #24]
    2d58:	4628      	mov	r0, r5
    2d5a:	4798      	blx	r3
    2d5c:	e7ed      	b.n	2d3a <_usart_interrupt_handler+0x17e>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    2d5e:	6a2b      	ldr	r3, [r5, #32]
    2d60:	4628      	mov	r0, r5
    2d62:	4798      	blx	r3
		}
	}
#endif
}
    2d64:	e7f2      	b.n	2d4c <_usart_interrupt_handler+0x190>
    2d66:	bf00      	nop
    2d68:	20000398 	.word	0x20000398

00002d6c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    2d6c:	b508      	push	{r3, lr}
	switch (clock_source) {
    2d6e:	2808      	cmp	r0, #8
    2d70:	d806      	bhi.n	2d80 <system_clock_source_get_hz+0x14>
    2d72:	e8df f000 	tbb	[pc, r0]
    2d76:	0507      	.short	0x0507
    2d78:	11383805 	.word	0x11383805
    2d7c:	140a      	.short	0x140a
    2d7e:	2f          	.byte	0x2f
    2d7f:	00          	.byte	0x00

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    2d80:	2000      	movs	r0, #0
    2d82:	bd08      	pop	{r3, pc}
		return _system_clock_inst.xosc.frequency;
    2d84:	4b1b      	ldr	r3, [pc, #108]	; (2df4 <system_clock_source_get_hz+0x88>)
    2d86:	6918      	ldr	r0, [r3, #16]
    2d88:	bd08      	pop	{r3, pc}
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    2d8a:	4b1b      	ldr	r3, [pc, #108]	; (2df8 <system_clock_source_get_hz+0x8c>)
    2d8c:	6a1b      	ldr	r3, [r3, #32]
    2d8e:	f3c3 2301 	ubfx	r3, r3, #8, #2
    2d92:	481a      	ldr	r0, [pc, #104]	; (2dfc <system_clock_source_get_hz+0x90>)
    2d94:	40d8      	lsrs	r0, r3
    2d96:	bd08      	pop	{r3, pc}
		return _system_clock_inst.xosc32k.frequency;
    2d98:	4b16      	ldr	r3, [pc, #88]	; (2df4 <system_clock_source_get_hz+0x88>)
    2d9a:	6958      	ldr	r0, [r3, #20]
    2d9c:	bd08      	pop	{r3, pc}
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2d9e:	4b15      	ldr	r3, [pc, #84]	; (2df4 <system_clock_source_get_hz+0x88>)
    2da0:	681b      	ldr	r3, [r3, #0]
    2da2:	f013 0f02 	tst.w	r3, #2
    2da6:	d021      	beq.n	2dec <system_clock_source_get_hz+0x80>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2da8:	4a13      	ldr	r2, [pc, #76]	; (2df8 <system_clock_source_get_hz+0x8c>)
    2daa:	68d3      	ldr	r3, [r2, #12]
    2dac:	f013 0f10 	tst.w	r3, #16
    2db0:	d0fb      	beq.n	2daa <system_clock_source_get_hz+0x3e>
		switch(_system_clock_inst.dfll.control &
    2db2:	4b10      	ldr	r3, [pc, #64]	; (2df4 <system_clock_source_get_hz+0x88>)
    2db4:	681b      	ldr	r3, [r3, #0]
    2db6:	f003 0324 	and.w	r3, r3, #36	; 0x24
    2dba:	2b04      	cmp	r3, #4
    2dbc:	d001      	beq.n	2dc2 <system_clock_source_get_hz+0x56>
			return 48000000UL;
    2dbe:	4810      	ldr	r0, [pc, #64]	; (2e00 <system_clock_source_get_hz+0x94>)
    2dc0:	bd08      	pop	{r3, pc}
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2dc2:	2000      	movs	r0, #0
    2dc4:	4b0f      	ldr	r3, [pc, #60]	; (2e04 <system_clock_source_get_hz+0x98>)
    2dc6:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    2dc8:	4b0a      	ldr	r3, [pc, #40]	; (2df4 <system_clock_source_get_hz+0x88>)
    2dca:	689b      	ldr	r3, [r3, #8]
    2dcc:	b29b      	uxth	r3, r3
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2dce:	fb00 f003 	mul.w	r0, r0, r3
    2dd2:	bd08      	pop	{r3, pc}
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2dd4:	4b08      	ldr	r3, [pc, #32]	; (2df8 <system_clock_source_get_hz+0x8c>)
    2dd6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
    2dda:	f013 0f04 	tst.w	r3, #4
    2dde:	d007      	beq.n	2df0 <system_clock_source_get_hz+0x84>
		return _system_clock_inst.dpll.frequency;
    2de0:	4b04      	ldr	r3, [pc, #16]	; (2df4 <system_clock_source_get_hz+0x88>)
    2de2:	68d8      	ldr	r0, [r3, #12]
    2de4:	bd08      	pop	{r3, pc}
		return 32768UL;
    2de6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    2dea:	bd08      	pop	{r3, pc}
			return 0;
    2dec:	2000      	movs	r0, #0
    2dee:	bd08      	pop	{r3, pc}
			return 0;
    2df0:	2000      	movs	r0, #0
	}
}
    2df2:	bd08      	pop	{r3, pc}
    2df4:	200002d0 	.word	0x200002d0
    2df8:	40000800 	.word	0x40000800
    2dfc:	007a1200 	.word	0x007a1200
    2e00:	02dc6c00 	.word	0x02dc6c00
    2e04:	0000337d 	.word	0x0000337d

00002e08 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    2e08:	b410      	push	{r4}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    2e0a:	4a07      	ldr	r2, [pc, #28]	; (2e28 <system_clock_source_osc8m_set_config+0x20>)
    2e0c:	6a13      	ldr	r3, [r2, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    2e0e:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    2e10:	7884      	ldrb	r4, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    2e12:	7840      	ldrb	r0, [r0, #1]
    2e14:	f360 1386 	bfi	r3, r0, #6, #1
    2e18:	f364 13c7 	bfi	r3, r4, #7, #1
    2e1c:	f361 2309 	bfi	r3, r1, #8, #2
    2e20:	6213      	str	r3, [r2, #32]
}
    2e22:	bc10      	pop	{r4}
    2e24:	4770      	bx	lr
    2e26:	bf00      	nop
    2e28:	40000800 	.word	0x40000800

00002e2c <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    2e2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    2e30:	4913      	ldr	r1, [pc, #76]	; (2e80 <system_clock_source_xosc32k_set_config+0x54>)
    2e32:	8a8b      	ldrh	r3, [r1, #20]

	temp.bit.STARTUP = config->startup_time;
    2e34:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    2e36:	7802      	ldrb	r2, [r0, #0]
    2e38:	fab2 f282 	clz	r2, r2
    2e3c:	0952      	lsrs	r2, r2, #5
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    2e3e:	f890 e002 	ldrb.w	lr, [r0, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    2e42:	f890 c003 	ldrb.w	ip, [r0, #3]
	temp.bit.EN32K = config->enable_32khz_output;
    2e46:	f890 8004 	ldrb.w	r8, [r0, #4]

	temp.bit.ONDEMAND = config->on_demand;
    2e4a:	7b46      	ldrb	r6, [r0, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    2e4c:	7b07      	ldrb	r7, [r0, #12]
	temp.bit.WRTLOCK  = config->write_once;
    2e4e:	7b84      	ldrb	r4, [r0, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    2e50:	f8d0 9008 	ldr.w	r9, [r0, #8]
    2e54:	480b      	ldr	r0, [pc, #44]	; (2e84 <system_clock_source_xosc32k_set_config+0x58>)
    2e56:	f8c0 9014 	str.w	r9, [r0, #20]

	SYSCTRL->XOSC32K = temp;
    2e5a:	f362 0382 	bfi	r3, r2, #2, #1
    2e5e:	f368 03c3 	bfi	r3, r8, #3, #1
    2e62:	f36c 1304 	bfi	r3, ip, #4, #1
    2e66:	f36e 1345 	bfi	r3, lr, #5, #1
    2e6a:	f367 1386 	bfi	r3, r7, #6, #1
    2e6e:	f366 13c7 	bfi	r3, r6, #7, #1
    2e72:	f365 230a 	bfi	r3, r5, #8, #3
    2e76:	f364 330c 	bfi	r3, r4, #12, #1
    2e7a:	828b      	strh	r3, [r1, #20]
    2e7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2e80:	40000800 	.word	0x40000800
    2e84:	200002d0 	.word	0x200002d0

00002e88 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    2e88:	b410      	push	{r4}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    2e8a:	7a03      	ldrb	r3, [r0, #8]
    2e8c:	029b      	lsls	r3, r3, #10
    2e8e:	b29b      	uxth	r3, r3
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    2e90:	8942      	ldrh	r2, [r0, #10]
    2e92:	f3c2 0209 	ubfx	r2, r2, #0, #10
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    2e96:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    2e98:	491a      	ldr	r1, [pc, #104]	; (2f04 <system_clock_source_dfll_set_config+0x7c>)
    2e9a:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    2e9c:	7983      	ldrb	r3, [r0, #6]
    2e9e:	79c2      	ldrb	r2, [r0, #7]
    2ea0:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    2ea2:	8842      	ldrh	r2, [r0, #2]
    2ea4:	8884      	ldrh	r4, [r0, #4]
    2ea6:	4322      	orrs	r2, r4
    2ea8:	b292      	uxth	r2, r2
    2eaa:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    2eac:	7842      	ldrb	r2, [r0, #1]
			(uint32_t)config->chill_cycle     |
    2eae:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
	_system_clock_inst.dfll.control =
    2eb2:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    2eb4:	7803      	ldrb	r3, [r0, #0]
    2eb6:	2b04      	cmp	r3, #4
    2eb8:	d014      	beq.n	2ee4 <system_clock_source_dfll_set_config+0x5c>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    2eba:	2b20      	cmp	r3, #32
    2ebc:	d110      	bne.n	2ee0 <system_clock_source_dfll_set_config+0x58>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2ebe:	7b02      	ldrb	r2, [r0, #12]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    2ec0:	8a03      	ldrh	r3, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    2ec2:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
    2ec6:	89c1      	ldrh	r1, [r0, #14]
    2ec8:	4a0f      	ldr	r2, [pc, #60]	; (2f08 <system_clock_source_dfll_set_config+0x80>)
    2eca:	ea02 4201 	and.w	r2, r2, r1, lsl #16
    2ece:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    2ed0:	4a0c      	ldr	r2, [pc, #48]	; (2f04 <system_clock_source_dfll_set_config+0x7c>)
    2ed2:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    2ed4:	6813      	ldr	r3, [r2, #0]
    2ed6:	f443 6384 	orr.w	r3, r3, #1056	; 0x420
    2eda:	f043 0304 	orr.w	r3, r3, #4
    2ede:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    2ee0:	bc10      	pop	{r4}
    2ee2:	4770      	bx	lr
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2ee4:	7b02      	ldrb	r2, [r0, #12]
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    2ee6:	8a03      	ldrh	r3, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    2ee8:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
    2eec:	89c1      	ldrh	r1, [r0, #14]
    2eee:	4a06      	ldr	r2, [pc, #24]	; (2f08 <system_clock_source_dfll_set_config+0x80>)
    2ef0:	ea02 4201 	and.w	r2, r2, r1, lsl #16
    2ef4:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    2ef6:	4a03      	ldr	r2, [pc, #12]	; (2f04 <system_clock_source_dfll_set_config+0x7c>)
    2ef8:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    2efa:	6813      	ldr	r3, [r2, #0]
    2efc:	f043 0304 	orr.w	r3, r3, #4
    2f00:	6013      	str	r3, [r2, #0]
    2f02:	e7ed      	b.n	2ee0 <system_clock_source_dfll_set_config+0x58>
    2f04:	200002d0 	.word	0x200002d0
    2f08:	03ff0000 	.word	0x03ff0000

00002f0c <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    2f0c:	2808      	cmp	r0, #8
    2f0e:	d806      	bhi.n	2f1e <system_clock_source_enable+0x12>
    2f10:	e8df f000 	tbb	[pc, r0]
    2f14:	4f050515 	.word	0x4f050515
    2f18:	25071d0e 	.word	0x25071d0e
    2f1c:	46          	.byte	0x46
    2f1d:	00          	.byte	0x00
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    2f1e:	2017      	movs	r0, #23
    2f20:	4770      	bx	lr
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    2f22:	4a25      	ldr	r2, [pc, #148]	; (2fb8 <system_clock_source_enable+0xac>)
    2f24:	6a13      	ldr	r3, [r2, #32]
    2f26:	f043 0302 	orr.w	r3, r3, #2
    2f2a:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    2f2c:	2000      	movs	r0, #0
    2f2e:	4770      	bx	lr
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    2f30:	4a21      	ldr	r2, [pc, #132]	; (2fb8 <system_clock_source_enable+0xac>)
    2f32:	6993      	ldr	r3, [r2, #24]
    2f34:	f043 0302 	orr.w	r3, r3, #2
    2f38:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    2f3a:	2000      	movs	r0, #0
		break;
    2f3c:	4770      	bx	lr
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    2f3e:	4a1e      	ldr	r2, [pc, #120]	; (2fb8 <system_clock_source_enable+0xac>)
    2f40:	8a13      	ldrh	r3, [r2, #16]
    2f42:	b29b      	uxth	r3, r3
    2f44:	f043 0302 	orr.w	r3, r3, #2
    2f48:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    2f4a:	2000      	movs	r0, #0
		break;
    2f4c:	4770      	bx	lr
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    2f4e:	4a1a      	ldr	r2, [pc, #104]	; (2fb8 <system_clock_source_enable+0xac>)
    2f50:	8a93      	ldrh	r3, [r2, #20]
    2f52:	b29b      	uxth	r3, r3
    2f54:	f043 0302 	orr.w	r3, r3, #2
    2f58:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    2f5a:	2000      	movs	r0, #0
		break;
    2f5c:	4770      	bx	lr
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    2f5e:	4a17      	ldr	r2, [pc, #92]	; (2fbc <system_clock_source_enable+0xb0>)
    2f60:	6813      	ldr	r3, [r2, #0]
    2f62:	f043 0302 	orr.w	r3, r3, #2
    2f66:	6013      	str	r3, [r2, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    2f68:	2202      	movs	r2, #2
    2f6a:	4b13      	ldr	r3, [pc, #76]	; (2fb8 <system_clock_source_enable+0xac>)
    2f6c:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2f6e:	461a      	mov	r2, r3
    2f70:	68d3      	ldr	r3, [r2, #12]
    2f72:	f013 0f10 	tst.w	r3, #16
    2f76:	d0fb      	beq.n	2f70 <system_clock_source_enable+0x64>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    2f78:	4a10      	ldr	r2, [pc, #64]	; (2fbc <system_clock_source_enable+0xb0>)
    2f7a:	6891      	ldr	r1, [r2, #8]
    2f7c:	4b0e      	ldr	r3, [pc, #56]	; (2fb8 <system_clock_source_enable+0xac>)
    2f7e:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    2f80:	6852      	ldr	r2, [r2, #4]
    2f82:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    2f84:	2200      	movs	r2, #0
    2f86:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2f88:	461a      	mov	r2, r3
    2f8a:	68d3      	ldr	r3, [r2, #12]
    2f8c:	f013 0f10 	tst.w	r3, #16
    2f90:	d0fb      	beq.n	2f8a <system_clock_source_enable+0x7e>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    2f92:	4b0a      	ldr	r3, [pc, #40]	; (2fbc <system_clock_source_enable+0xb0>)
    2f94:	681b      	ldr	r3, [r3, #0]
    2f96:	b29b      	uxth	r3, r3
    2f98:	4a07      	ldr	r2, [pc, #28]	; (2fb8 <system_clock_source_enable+0xac>)
    2f9a:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    2f9c:	2000      	movs	r0, #0
    2f9e:	4770      	bx	lr
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    2fa0:	4a05      	ldr	r2, [pc, #20]	; (2fb8 <system_clock_source_enable+0xac>)
    2fa2:	f892 3044 	ldrb.w	r3, [r2, #68]	; 0x44
    2fa6:	f043 0302 	orr.w	r3, r3, #2
    2faa:	f882 3044 	strb.w	r3, [r2, #68]	; 0x44
	return STATUS_OK;
    2fae:	2000      	movs	r0, #0
		break;
    2fb0:	4770      	bx	lr
		return STATUS_OK;
    2fb2:	2000      	movs	r0, #0
}
    2fb4:	4770      	bx	lr
    2fb6:	bf00      	nop
    2fb8:	40000800 	.word	0x40000800
    2fbc:	200002d0 	.word	0x200002d0

00002fc0 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    2fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2fc4:	b08e      	sub	sp, #56	; 0x38
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    2fc6:	f44f 62c2 	mov.w	r2, #1552	; 0x610
    2fca:	4b57      	ldr	r3, [pc, #348]	; (3128 <system_clock_init+0x168>)
    2fcc:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    2fce:	4b57      	ldr	r3, [pc, #348]	; (312c <system_clock_init+0x16c>)
    2fd0:	685a      	ldr	r2, [r3, #4]
    2fd2:	2101      	movs	r1, #1
    2fd4:	f361 0244 	bfi	r2, r1, #1, #4
    2fd8:	605a      	str	r2, [r3, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    2fda:	ad0e      	add	r5, sp, #56	; 0x38
    2fdc:	2302      	movs	r3, #2
    2fde:	f805 3d34 	strb.w	r3, [r5, #-52]!
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2fe2:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    2fe4:	4e52      	ldr	r6, [pc, #328]	; (3130 <system_clock_init+0x170>)
    2fe6:	4629      	mov	r1, r5
    2fe8:	b2e0      	uxtb	r0, r4
    2fea:	47b0      	blx	r6
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2fec:	3401      	adds	r4, #1
    2fee:	2c25      	cmp	r4, #37	; 0x25
    2ff0:	d1f9      	bne.n	2fe6 <system_clock_init+0x26>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    2ff2:	2300      	movs	r3, #0
    2ff4:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
	config->auto_gain_control   = false;
    2ff8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
	config->frequency           = 32768UL;
    2ffc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    3000:	920c      	str	r2, [sp, #48]	; 0x30
	config->enable_1khz_output  = false;
    3002:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
	config->enable_32khz_output = true;
    3006:	2201      	movs	r2, #1
    3008:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
	config->run_in_standby      = false;
    300c:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
	config->write_once          = false;
    3010:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    3014:	2206      	movs	r2, #6
    3016:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    301a:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    301e:	a80a      	add	r0, sp, #40	; 0x28
    3020:	4b44      	ldr	r3, [pc, #272]	; (3134 <system_clock_init+0x174>)
    3022:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    3024:	2005      	movs	r0, #5
    3026:	4b44      	ldr	r3, [pc, #272]	; (3138 <system_clock_init+0x178>)
    3028:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    302a:	4a3f      	ldr	r2, [pc, #252]	; (3128 <system_clock_init+0x168>)
    302c:	68d3      	ldr	r3, [r2, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    302e:	f013 0f02 	tst.w	r3, #2
    3032:	d0fb      	beq.n	302c <system_clock_init+0x6c>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    3034:	4a3c      	ldr	r2, [pc, #240]	; (3128 <system_clock_init+0x168>)
    3036:	8a93      	ldrh	r3, [r2, #20]
    3038:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    303c:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    303e:	2300      	movs	r3, #0
    3040:	f8ad 3016 	strh.w	r3, [sp, #22]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    3044:	f8ad 3018 	strh.w	r3, [sp, #24]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    3048:	f88d 301a 	strb.w	r3, [sp, #26]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    304c:	f88d 301b 	strb.w	r3, [sp, #27]
	config->fine_value      = 0xff / 4; /* Midpoint */
    3050:	223f      	movs	r2, #63	; 0x3f
    3052:	f8ad 201e 	strh.w	r2, [sp, #30]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    3056:	2204      	movs	r2, #4
    3058:	f88d 2014 	strb.w	r2, [sp, #20]
	dfll_conf.on_demand      = false;
    305c:	f88d 3015 	strb.w	r3, [sp, #21]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    3060:	4b36      	ldr	r3, [pc, #216]	; (313c <system_clock_init+0x17c>)
    3062:	681b      	ldr	r3, [r3, #0]
    3064:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
		coarse = 0x1f;
    3066:	2b3f      	cmp	r3, #63	; 0x3f
    3068:	bf08      	it	eq
    306a:	231f      	moveq	r3, #31
	}
	dfll_conf.coarse_value = coarse;
    306c:	f88d 301c 	strb.w	r3, [sp, #28]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    3070:	f44f 63b7 	mov.w	r3, #1464	; 0x5b8
    3074:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    3078:	f04f 0807 	mov.w	r8, #7
    307c:	f88d 8020 	strb.w	r8, [sp, #32]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    3080:	233f      	movs	r3, #63	; 0x3f
    3082:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    3086:	a805      	add	r0, sp, #20
    3088:	4b2d      	ldr	r3, [pc, #180]	; (3140 <system_clock_init+0x180>)
    308a:	4798      	blx	r3
	config->run_in_standby  = false;
    308c:	2400      	movs	r4, #0
    308e:	f88d 4011 	strb.w	r4, [sp, #17]
	config->on_demand       = true;
    3092:	2501      	movs	r5, #1
    3094:	f88d 5012 	strb.w	r5, [sp, #18]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    3098:	a80e      	add	r0, sp, #56	; 0x38
    309a:	f800 4d28 	strb.w	r4, [r0, #-40]!
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    309e:	4b29      	ldr	r3, [pc, #164]	; (3144 <system_clock_init+0x184>)
    30a0:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    30a2:	2006      	movs	r0, #6
    30a4:	4f24      	ldr	r7, [pc, #144]	; (3138 <system_clock_init+0x178>)
    30a6:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    30a8:	4b27      	ldr	r3, [pc, #156]	; (3148 <system_clock_init+0x188>)
    30aa:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    30ac:	9502      	str	r5, [sp, #8]
	config->high_when_disabled = false;
    30ae:	f88d 4005 	strb.w	r4, [sp, #5]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    30b2:	f88d 400c 	strb.w	r4, [sp, #12]
	config->output_enable      = false;
    30b6:	f88d 400d 	strb.w	r4, [sp, #13]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    30ba:	ae0e      	add	r6, sp, #56	; 0x38
    30bc:	2305      	movs	r3, #5
    30be:	f806 3d34 	strb.w	r3, [r6, #-52]!
    30c2:	4631      	mov	r1, r6
    30c4:	4628      	mov	r0, r5
    30c6:	4b21      	ldr	r3, [pc, #132]	; (314c <system_clock_init+0x18c>)
    30c8:	4798      	blx	r3
    30ca:	4628      	mov	r0, r5
    30cc:	4b20      	ldr	r3, [pc, #128]	; (3150 <system_clock_init+0x190>)
    30ce:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    30d0:	f88d 5004 	strb.w	r5, [sp, #4]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    30d4:	4631      	mov	r1, r6
    30d6:	4620      	mov	r0, r4
    30d8:	4b15      	ldr	r3, [pc, #84]	; (3130 <system_clock_init+0x170>)
    30da:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    30dc:	4620      	mov	r0, r4
    30de:	4b1d      	ldr	r3, [pc, #116]	; (3154 <system_clock_init+0x194>)
    30e0:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    30e2:	4640      	mov	r0, r8
    30e4:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    30e6:	4a10      	ldr	r2, [pc, #64]	; (3128 <system_clock_init+0x168>)
    30e8:	68d3      	ldr	r3, [r2, #12]
    30ea:	f003 03d0 	and.w	r3, r3, #208	; 0xd0
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    30ee:	2bd0      	cmp	r3, #208	; 0xd0
    30f0:	d1fa      	bne.n	30e8 <system_clock_init+0x128>
	PM->CPUSEL.reg = (uint32_t)divider;
    30f2:	4b19      	ldr	r3, [pc, #100]	; (3158 <system_clock_init+0x198>)
    30f4:	2400      	movs	r4, #0
    30f6:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    30f8:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    30fa:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    30fc:	72dc      	strb	r4, [r3, #11]
	config->division_factor    = 1;
    30fe:	2301      	movs	r3, #1
    3100:	9302      	str	r3, [sp, #8]
	config->high_when_disabled = false;
    3102:	f88d 4005 	strb.w	r4, [sp, #5]
	config->run_in_standby     = false;
    3106:	f88d 400c 	strb.w	r4, [sp, #12]
	config->output_enable      = false;
    310a:	f88d 400d 	strb.w	r4, [sp, #13]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    310e:	a90e      	add	r1, sp, #56	; 0x38
    3110:	2307      	movs	r3, #7
    3112:	f801 3d34 	strb.w	r3, [r1, #-52]!
    3116:	4620      	mov	r0, r4
    3118:	4b0c      	ldr	r3, [pc, #48]	; (314c <system_clock_init+0x18c>)
    311a:	4798      	blx	r3
    311c:	4620      	mov	r0, r4
    311e:	4b0c      	ldr	r3, [pc, #48]	; (3150 <system_clock_init+0x190>)
    3120:	4798      	blx	r3
#endif
}
    3122:	b00e      	add	sp, #56	; 0x38
    3124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3128:	40000800 	.word	0x40000800
    312c:	41004000 	.word	0x41004000
    3130:	00003361 	.word	0x00003361
    3134:	00002e2d 	.word	0x00002e2d
    3138:	00002f0d 	.word	0x00002f0d
    313c:	00806024 	.word	0x00806024
    3140:	00002e89 	.word	0x00002e89
    3144:	00002e09 	.word	0x00002e09
    3148:	0000315d 	.word	0x0000315d
    314c:	00003181 	.word	0x00003181
    3150:	00003225 	.word	0x00003225
    3154:	000032e1 	.word	0x000032e1
    3158:	40000400 	.word	0x40000400

0000315c <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    315c:	4a06      	ldr	r2, [pc, #24]	; (3178 <system_gclk_init+0x1c>)
    315e:	6993      	ldr	r3, [r2, #24]
    3160:	f043 0308 	orr.w	r3, r3, #8
    3164:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    3166:	2201      	movs	r2, #1
    3168:	4b04      	ldr	r3, [pc, #16]	; (317c <system_gclk_init+0x20>)
    316a:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    316c:	461a      	mov	r2, r3
    316e:	7813      	ldrb	r3, [r2, #0]
    3170:	f013 0f01 	tst.w	r3, #1
    3174:	d1fb      	bne.n	316e <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    3176:	4770      	bx	lr
    3178:	40000400 	.word	0x40000400
    317c:	40000c00 	.word	0x40000c00

00003180 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    3180:	b570      	push	{r4, r5, r6, lr}
    3182:	4606      	mov	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    3184:	4604      	mov	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    3186:	780d      	ldrb	r5, [r1, #0]
    3188:	ea40 2505 	orr.w	r5, r0, r5, lsl #8

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    318c:	784b      	ldrb	r3, [r1, #1]
    318e:	b10b      	cbz	r3, 3194 <system_gclk_gen_set_config+0x14>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    3190:	f445 2580 	orr.w	r5, r5, #262144	; 0x40000
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    3194:	7a4b      	ldrb	r3, [r1, #9]
    3196:	b10b      	cbz	r3, 319c <system_gclk_gen_set_config+0x1c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    3198:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    319c:	6848      	ldr	r0, [r1, #4]
    319e:	2801      	cmp	r0, #1
    31a0:	d90e      	bls.n	31c0 <system_gclk_gen_set_config+0x40>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    31a2:	1e43      	subs	r3, r0, #1
    31a4:	4203      	tst	r3, r0
    31a6:	d12f      	bne.n	3208 <system_gclk_gen_set_config+0x88>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    31a8:	2802      	cmp	r0, #2
    31aa:	d92b      	bls.n	3204 <system_gclk_gen_set_config+0x84>
    31ac:	2302      	movs	r3, #2
    31ae:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    31b0:	3201      	adds	r2, #1
						mask <<= 1) {
    31b2:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    31b4:	4298      	cmp	r0, r3
    31b6:	d8fb      	bhi.n	31b0 <system_gclk_gen_set_config+0x30>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    31b8:	ea46 2402 	orr.w	r4, r6, r2, lsl #8
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    31bc:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    31c0:	7a0b      	ldrb	r3, [r1, #8]
    31c2:	b10b      	cbz	r3, 31c8 <system_gclk_gen_set_config+0x48>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    31c4:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    31c8:	4a12      	ldr	r2, [pc, #72]	; (3214 <system_gclk_gen_set_config+0x94>)
    31ca:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    31cc:	f013 0f80 	tst.w	r3, #128	; 0x80
    31d0:	d1fb      	bne.n	31ca <system_gclk_gen_set_config+0x4a>
	cpu_irq_enter_critical();
    31d2:	4b11      	ldr	r3, [pc, #68]	; (3218 <system_gclk_gen_set_config+0x98>)
    31d4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    31d6:	4b11      	ldr	r3, [pc, #68]	; (321c <system_gclk_gen_set_config+0x9c>)
    31d8:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    31da:	4a0e      	ldr	r2, [pc, #56]	; (3214 <system_gclk_gen_set_config+0x94>)
    31dc:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    31de:	f013 0f80 	tst.w	r3, #128	; 0x80
    31e2:	d1fb      	bne.n	31dc <system_gclk_gen_set_config+0x5c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    31e4:	4b0b      	ldr	r3, [pc, #44]	; (3214 <system_gclk_gen_set_config+0x94>)
    31e6:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    31e8:	461a      	mov	r2, r3
    31ea:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    31ec:	f013 0f80 	tst.w	r3, #128	; 0x80
    31f0:	d1fb      	bne.n	31ea <system_gclk_gen_set_config+0x6a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    31f2:	4a08      	ldr	r2, [pc, #32]	; (3214 <system_gclk_gen_set_config+0x94>)
    31f4:	6853      	ldr	r3, [r2, #4]
    31f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    31fa:	431d      	orrs	r5, r3
    31fc:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    31fe:	4b08      	ldr	r3, [pc, #32]	; (3220 <system_gclk_gen_set_config+0xa0>)
    3200:	4798      	blx	r3
    3202:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    3204:	2200      	movs	r2, #0
    3206:	e7d7      	b.n	31b8 <system_gclk_gen_set_config+0x38>
			new_gendiv_config  |=
    3208:	ea46 2400 	orr.w	r4, r6, r0, lsl #8
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    320c:	f445 3500 	orr.w	r5, r5, #131072	; 0x20000
    3210:	e7d6      	b.n	31c0 <system_gclk_gen_set_config+0x40>
    3212:	bf00      	nop
    3214:	40000c00 	.word	0x40000c00
    3218:	00001ce5 	.word	0x00001ce5
    321c:	40000c08 	.word	0x40000c08
    3220:	00001d21 	.word	0x00001d21

00003224 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    3224:	b510      	push	{r4, lr}
    3226:	4604      	mov	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3228:	4a0a      	ldr	r2, [pc, #40]	; (3254 <system_gclk_gen_enable+0x30>)
    322a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    322c:	f013 0f80 	tst.w	r3, #128	; 0x80
    3230:	d1fb      	bne.n	322a <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    3232:	4b09      	ldr	r3, [pc, #36]	; (3258 <system_gclk_gen_enable+0x34>)
    3234:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    3236:	4b09      	ldr	r3, [pc, #36]	; (325c <system_gclk_gen_enable+0x38>)
    3238:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    323a:	4a06      	ldr	r2, [pc, #24]	; (3254 <system_gclk_gen_enable+0x30>)
    323c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    323e:	f013 0f80 	tst.w	r3, #128	; 0x80
    3242:	d1fb      	bne.n	323c <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    3244:	4a03      	ldr	r2, [pc, #12]	; (3254 <system_gclk_gen_enable+0x30>)
    3246:	6853      	ldr	r3, [r2, #4]
    3248:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    324c:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    324e:	4b04      	ldr	r3, [pc, #16]	; (3260 <system_gclk_gen_enable+0x3c>)
    3250:	4798      	blx	r3
    3252:	bd10      	pop	{r4, pc}
    3254:	40000c00 	.word	0x40000c00
    3258:	00001ce5 	.word	0x00001ce5
    325c:	40000c04 	.word	0x40000c04
    3260:	00001d21 	.word	0x00001d21

00003264 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    3264:	b570      	push	{r4, r5, r6, lr}
    3266:	4604      	mov	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3268:	4a18      	ldr	r2, [pc, #96]	; (32cc <system_gclk_gen_get_hz+0x68>)
    326a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    326c:	f013 0f80 	tst.w	r3, #128	; 0x80
    3270:	d1fb      	bne.n	326a <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    3272:	4b17      	ldr	r3, [pc, #92]	; (32d0 <system_gclk_gen_get_hz+0x6c>)
    3274:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    3276:	4b17      	ldr	r3, [pc, #92]	; (32d4 <system_gclk_gen_get_hz+0x70>)
    3278:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    327a:	4a14      	ldr	r2, [pc, #80]	; (32cc <system_gclk_gen_get_hz+0x68>)
    327c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    327e:	f013 0f80 	tst.w	r3, #128	; 0x80
    3282:	d1fb      	bne.n	327c <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    3284:	4d11      	ldr	r5, [pc, #68]	; (32cc <system_gclk_gen_get_hz+0x68>)
    3286:	6868      	ldr	r0, [r5, #4]
	uint32_t gen_input_hz = system_clock_source_get_hz(
    3288:	f3c0 2004 	ubfx	r0, r0, #8, #5
    328c:	4b12      	ldr	r3, [pc, #72]	; (32d8 <system_gclk_gen_get_hz+0x74>)
    328e:	4798      	blx	r3
    3290:	4606      	mov	r6, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    3292:	4b10      	ldr	r3, [pc, #64]	; (32d4 <system_gclk_gen_get_hz+0x70>)
    3294:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    3296:	686d      	ldr	r5, [r5, #4]
    3298:	f3c5 5500 	ubfx	r5, r5, #20, #1

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    329c:	3304      	adds	r3, #4
    329e:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    32a0:	4a0a      	ldr	r2, [pc, #40]	; (32cc <system_gclk_gen_get_hz+0x68>)
    32a2:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    32a4:	f013 0f80 	tst.w	r3, #128	; 0x80
    32a8:	d1fb      	bne.n	32a2 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    32aa:	4b08      	ldr	r3, [pc, #32]	; (32cc <system_gclk_gen_get_hz+0x68>)
    32ac:	689c      	ldr	r4, [r3, #8]
    32ae:	f3c4 240f 	ubfx	r4, r4, #8, #16
	cpu_irq_leave_critical();
    32b2:	4b0a      	ldr	r3, [pc, #40]	; (32dc <system_gclk_gen_get_hz+0x78>)
    32b4:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    32b6:	b925      	cbnz	r5, 32c2 <system_gclk_gen_get_hz+0x5e>
    32b8:	2c01      	cmp	r4, #1
    32ba:	d904      	bls.n	32c6 <system_gclk_gen_get_hz+0x62>
		gen_input_hz /= divider;
    32bc:	fbb6 f6f4 	udiv	r6, r6, r4
    32c0:	e001      	b.n	32c6 <system_gclk_gen_get_hz+0x62>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    32c2:	3401      	adds	r4, #1
    32c4:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    32c6:	4630      	mov	r0, r6
    32c8:	bd70      	pop	{r4, r5, r6, pc}
    32ca:	bf00      	nop
    32cc:	40000c00 	.word	0x40000c00
    32d0:	00001ce5 	.word	0x00001ce5
    32d4:	40000c04 	.word	0x40000c04
    32d8:	00002d6d 	.word	0x00002d6d
    32dc:	00001d21 	.word	0x00001d21

000032e0 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    32e0:	b510      	push	{r4, lr}
    32e2:	4604      	mov	r4, r0
	cpu_irq_enter_critical();
    32e4:	4b06      	ldr	r3, [pc, #24]	; (3300 <system_gclk_chan_enable+0x20>)
    32e6:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    32e8:	4b06      	ldr	r3, [pc, #24]	; (3304 <system_gclk_chan_enable+0x24>)
    32ea:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    32ec:	4a06      	ldr	r2, [pc, #24]	; (3308 <system_gclk_chan_enable+0x28>)
    32ee:	8853      	ldrh	r3, [r2, #2]
    32f0:	b29b      	uxth	r3, r3
    32f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    32f6:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    32f8:	4b04      	ldr	r3, [pc, #16]	; (330c <system_gclk_chan_enable+0x2c>)
    32fa:	4798      	blx	r3
    32fc:	bd10      	pop	{r4, pc}
    32fe:	bf00      	nop
    3300:	00001ce5 	.word	0x00001ce5
    3304:	40000c02 	.word	0x40000c02
    3308:	40000c00 	.word	0x40000c00
    330c:	00001d21 	.word	0x00001d21

00003310 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    3310:	b510      	push	{r4, lr}
    3312:	4604      	mov	r4, r0
	cpu_irq_enter_critical();
    3314:	4b0e      	ldr	r3, [pc, #56]	; (3350 <system_gclk_chan_disable+0x40>)
    3316:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    3318:	4b0e      	ldr	r3, [pc, #56]	; (3354 <system_gclk_chan_disable+0x44>)
    331a:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    331c:	4a0e      	ldr	r2, [pc, #56]	; (3358 <system_gclk_chan_disable+0x48>)
    331e:	8851      	ldrh	r1, [r2, #2]
    3320:	f3c1 2103 	ubfx	r1, r1, #8, #4
	GCLK->CLKCTRL.bit.GEN = 0;
    3324:	8853      	ldrh	r3, [r2, #2]
    3326:	f36f 230b 	bfc	r3, #8, #4
    332a:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    332c:	8853      	ldrh	r3, [r2, #2]
    332e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    3332:	041b      	lsls	r3, r3, #16
    3334:	0c1b      	lsrs	r3, r3, #16
    3336:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    3338:	8853      	ldrh	r3, [r2, #2]
    333a:	f413 4f80 	tst.w	r3, #16384	; 0x4000
    333e:	d1fb      	bne.n	3338 <system_gclk_chan_disable+0x28>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    3340:	4b05      	ldr	r3, [pc, #20]	; (3358 <system_gclk_chan_disable+0x48>)
    3342:	885a      	ldrh	r2, [r3, #2]
    3344:	f361 220b 	bfi	r2, r1, #8, #4
    3348:	805a      	strh	r2, [r3, #2]
	cpu_irq_leave_critical();
    334a:	4b04      	ldr	r3, [pc, #16]	; (335c <system_gclk_chan_disable+0x4c>)
    334c:	4798      	blx	r3
    334e:	bd10      	pop	{r4, pc}
    3350:	00001ce5 	.word	0x00001ce5
    3354:	40000c02 	.word	0x40000c02
    3358:	40000c00 	.word	0x40000c00
    335c:	00001d21 	.word	0x00001d21

00003360 <system_gclk_chan_set_config>:
{
    3360:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    3362:	780c      	ldrb	r4, [r1, #0]
    3364:	ea40 2404 	orr.w	r4, r0, r4, lsl #8
	system_gclk_chan_disable(channel);
    3368:	4b02      	ldr	r3, [pc, #8]	; (3374 <system_gclk_chan_set_config+0x14>)
    336a:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    336c:	b2a4      	uxth	r4, r4
    336e:	4b02      	ldr	r3, [pc, #8]	; (3378 <system_gclk_chan_set_config+0x18>)
    3370:	805c      	strh	r4, [r3, #2]
    3372:	bd10      	pop	{r4, pc}
    3374:	00003311 	.word	0x00003311
    3378:	40000c00 	.word	0x40000c00

0000337c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    337c:	b510      	push	{r4, lr}
    337e:	4604      	mov	r4, r0
	cpu_irq_enter_critical();
    3380:	4b06      	ldr	r3, [pc, #24]	; (339c <system_gclk_chan_get_hz+0x20>)
    3382:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    3384:	4b06      	ldr	r3, [pc, #24]	; (33a0 <system_gclk_chan_get_hz+0x24>)
    3386:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    3388:	3b02      	subs	r3, #2
    338a:	885c      	ldrh	r4, [r3, #2]
    338c:	f3c4 2403 	ubfx	r4, r4, #8, #4
	cpu_irq_leave_critical();
    3390:	4b04      	ldr	r3, [pc, #16]	; (33a4 <system_gclk_chan_get_hz+0x28>)
    3392:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    3394:	4620      	mov	r0, r4
    3396:	4b04      	ldr	r3, [pc, #16]	; (33a8 <system_gclk_chan_get_hz+0x2c>)
    3398:	4798      	blx	r3
}
    339a:	bd10      	pop	{r4, pc}
    339c:	00001ce5 	.word	0x00001ce5
    33a0:	40000c02 	.word	0x40000c02
    33a4:	00001d21 	.word	0x00001d21
    33a8:	00003265 	.word	0x00003265

000033ac <_system_pinmux_config>:

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    33ac:	78d3      	ldrb	r3, [r2, #3]
    33ae:	2b00      	cmp	r3, #0
    33b0:	d137      	bne.n	3422 <_system_pinmux_config+0x76>
{
    33b2:	b410      	push	{r4}
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    33b4:	7813      	ldrb	r3, [r2, #0]
    33b6:	2b80      	cmp	r3, #128	; 0x80
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    33b8:	bf1a      	itte	ne
    33ba:	061b      	lslne	r3, r3, #24
    33bc:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
	uint32_t pin_cfg = 0;
    33c0:	2300      	moveq	r3, #0
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    33c2:	7854      	ldrb	r4, [r2, #1]
    33c4:	f014 0ffd 	tst.w	r4, #253	; 0xfd
    33c8:	d104      	bne.n	33d4 <_system_pinmux_config+0x28>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    33ca:	7894      	ldrb	r4, [r2, #2]
    33cc:	bb1c      	cbnz	r4, 3416 <_system_pinmux_config+0x6a>
			pin_cfg |= PORT_WRCONFIG_INEN;
    33ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    33d2:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    33d4:	7854      	ldrb	r4, [r2, #1]
    33d6:	3c01      	subs	r4, #1
    33d8:	b2e4      	uxtb	r4, r4
    33da:	2c01      	cmp	r4, #1
    33dc:	d91e      	bls.n	341c <_system_pinmux_config+0x70>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    33de:	b28c      	uxth	r4, r1

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    33e0:	f044 44a0 	orr.w	r4, r4, #1342177280	; 0x50000000
    33e4:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    33e6:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    33e8:	ea43 4411 	orr.w	r4, r3, r1, lsr #16
    33ec:	f044 4450 	orr.w	r4, r4, #3489660928	; 0xd0000000
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    33f0:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    33f2:	78d4      	ldrb	r4, [r2, #3]
    33f4:	b96c      	cbnz	r4, 3412 <_system_pinmux_config+0x66>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    33f6:	f413 2f80 	tst.w	r3, #262144	; 0x40000
    33fa:	d004      	beq.n	3406 <_system_pinmux_config+0x5a>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    33fc:	7893      	ldrb	r3, [r2, #2]
    33fe:	2b01      	cmp	r3, #1
				port->OUTSET.reg = pin_mask;
    3400:	bf0c      	ite	eq
    3402:	6181      	streq	r1, [r0, #24]
			} else {
				port->OUTCLR.reg = pin_mask;
    3404:	6141      	strne	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3406:	7853      	ldrb	r3, [r2, #1]
    3408:	3b01      	subs	r3, #1
    340a:	b2db      	uxtb	r3, r3
    340c:	2b01      	cmp	r3, #1
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    340e:	bf98      	it	ls
    3410:	6081      	strls	r1, [r0, #8]
		}
	}
}
    3412:	bc10      	pop	{r4}
    3414:	4770      	bx	lr
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    3416:	f443 23c0 	orr.w	r3, r3, #393216	; 0x60000
    341a:	e7da      	b.n	33d2 <_system_pinmux_config+0x26>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    341c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    3420:	e7dd      	b.n	33de <_system_pinmux_config+0x32>
		port->DIRCLR.reg = pin_mask;
    3422:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    3424:	b28b      	uxth	r3, r1
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    3426:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    342a:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    342c:	0c0b      	lsrs	r3, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    342e:	f043 4350 	orr.w	r3, r3, #3489660928	; 0xd0000000
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3432:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    3434:	78d3      	ldrb	r3, [r2, #3]
    3436:	b933      	cbnz	r3, 3446 <_system_pinmux_config+0x9a>
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3438:	7853      	ldrb	r3, [r2, #1]
    343a:	3b01      	subs	r3, #1
    343c:	b2db      	uxtb	r3, r3
    343e:	2b01      	cmp	r3, #1
    3440:	d8e8      	bhi.n	3414 <_system_pinmux_config+0x68>
			port->DIRSET.reg = pin_mask;
    3442:	6081      	str	r1, [r0, #8]
    3444:	4770      	bx	lr
    3446:	4770      	bx	lr

00003448 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    3448:	b508      	push	{r3, lr}
    344a:	460a      	mov	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    344c:	09c3      	lsrs	r3, r0, #7
    344e:	d10d      	bne.n	346c <system_pinmux_pin_set_config+0x24>
		return &(ports[port_index]->Group[group_index]);
    3450:	0943      	lsrs	r3, r0, #5
    3452:	01db      	lsls	r3, r3, #7
    3454:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    3458:	f503 4388 	add.w	r3, r3, #17408	; 0x4400
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    345c:	f000 001f 	and.w	r0, r0, #31

	_system_pinmux_config(port, pin_mask, config);
    3460:	2101      	movs	r1, #1
    3462:	4081      	lsls	r1, r0
    3464:	4618      	mov	r0, r3
    3466:	4b02      	ldr	r3, [pc, #8]	; (3470 <system_pinmux_pin_set_config+0x28>)
    3468:	4798      	blx	r3
    346a:	bd08      	pop	{r3, pc}
	} else {
		Assert(false);
		return NULL;
    346c:	2300      	movs	r3, #0
    346e:	e7f5      	b.n	345c <system_pinmux_pin_set_config+0x14>
    3470:	000033ad 	.word	0x000033ad

00003474 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    3474:	4770      	bx	lr
	...

00003478 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    3478:	b508      	push	{r3, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    347a:	4b05      	ldr	r3, [pc, #20]	; (3490 <system_init+0x18>)
    347c:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    347e:	4b05      	ldr	r3, [pc, #20]	; (3494 <system_init+0x1c>)
    3480:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    3482:	4b05      	ldr	r3, [pc, #20]	; (3498 <system_init+0x20>)
    3484:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    3486:	4b05      	ldr	r3, [pc, #20]	; (349c <system_init+0x24>)
    3488:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    348a:	4b05      	ldr	r3, [pc, #20]	; (34a0 <system_init+0x28>)
    348c:	4798      	blx	r3
    348e:	bd08      	pop	{r3, pc}
    3490:	00002fc1 	.word	0x00002fc1
    3494:	00001d4d 	.word	0x00001d4d
    3498:	00003475 	.word	0x00003475
    349c:	00003475 	.word	0x00003475
    34a0:	00003475 	.word	0x00003475

000034a4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    34a4:	e7fe      	b.n	34a4 <Dummy_Handler>
	...

000034a8 <Reset_Handler>:
{
    34a8:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
    34aa:	4b27      	ldr	r3, [pc, #156]	; (3548 <Reset_Handler+0xa0>)
    34ac:	4a27      	ldr	r2, [pc, #156]	; (354c <Reset_Handler+0xa4>)
    34ae:	429a      	cmp	r2, r3
    34b0:	d010      	beq.n	34d4 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
    34b2:	4b27      	ldr	r3, [pc, #156]	; (3550 <Reset_Handler+0xa8>)
    34b4:	4a24      	ldr	r2, [pc, #144]	; (3548 <Reset_Handler+0xa0>)
    34b6:	429a      	cmp	r2, r3
    34b8:	d20c      	bcs.n	34d4 <Reset_Handler+0x2c>
    34ba:	3b01      	subs	r3, #1
    34bc:	1a9b      	subs	r3, r3, r2
    34be:	f023 0303 	bic.w	r3, r3, #3
    34c2:	3304      	adds	r3, #4
    34c4:	4413      	add	r3, r2
    34c6:	4921      	ldr	r1, [pc, #132]	; (354c <Reset_Handler+0xa4>)
                        *pDest++ = *pSrc++;
    34c8:	f851 0b04 	ldr.w	r0, [r1], #4
    34cc:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
    34d0:	429a      	cmp	r2, r3
    34d2:	d1f9      	bne.n	34c8 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
    34d4:	4b1f      	ldr	r3, [pc, #124]	; (3554 <Reset_Handler+0xac>)
    34d6:	4a20      	ldr	r2, [pc, #128]	; (3558 <Reset_Handler+0xb0>)
    34d8:	429a      	cmp	r2, r3
    34da:	d20a      	bcs.n	34f2 <Reset_Handler+0x4a>
    34dc:	3b01      	subs	r3, #1
    34de:	1a9b      	subs	r3, r3, r2
    34e0:	f023 0303 	bic.w	r3, r3, #3
    34e4:	3304      	adds	r3, #4
    34e6:	4413      	add	r3, r2
                *pDest++ = 0;
    34e8:	2100      	movs	r1, #0
    34ea:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
    34ee:	4293      	cmp	r3, r2
    34f0:	d1fb      	bne.n	34ea <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    34f2:	4a1a      	ldr	r2, [pc, #104]	; (355c <Reset_Handler+0xb4>)
    34f4:	4b1a      	ldr	r3, [pc, #104]	; (3560 <Reset_Handler+0xb8>)
    34f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    34fa:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    34fc:	2202      	movs	r2, #2
    34fe:	4b19      	ldr	r3, [pc, #100]	; (3564 <Reset_Handler+0xbc>)
    3500:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    3504:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
    3508:	78d9      	ldrb	r1, [r3, #3]
    350a:	f362 0101 	bfi	r1, r2, #0, #2
    350e:	70d9      	strb	r1, [r3, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    3510:	78d9      	ldrb	r1, [r3, #3]
    3512:	f362 0183 	bfi	r1, r2, #2, #2
    3516:	70d9      	strb	r1, [r3, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    3518:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
    351c:	7b99      	ldrb	r1, [r3, #14]
    351e:	f362 1105 	bfi	r1, r2, #4, #2
    3522:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    3524:	7b99      	ldrb	r1, [r3, #14]
    3526:	f362 0183 	bfi	r1, r2, #2, #2
    352a:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    352c:	7b99      	ldrb	r1, [r3, #14]
    352e:	f362 0101 	bfi	r1, r2, #0, #2
    3532:	7399      	strb	r1, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    3534:	4a0c      	ldr	r2, [pc, #48]	; (3568 <Reset_Handler+0xc0>)
    3536:	6853      	ldr	r3, [r2, #4]
    3538:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    353c:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    353e:	4b0b      	ldr	r3, [pc, #44]	; (356c <Reset_Handler+0xc4>)
    3540:	4798      	blx	r3
        main();
    3542:	4b0b      	ldr	r3, [pc, #44]	; (3570 <Reset_Handler+0xc8>)
    3544:	4798      	blx	r3
    3546:	e7fe      	b.n	3546 <Reset_Handler+0x9e>
    3548:	20000000 	.word	0x20000000
    354c:	00008244 	.word	0x00008244
    3550:	2000020c 	.word	0x2000020c
    3554:	20003124 	.word	0x20003124
    3558:	2000020c 	.word	0x2000020c
    355c:	e000ed00 	.word	0xe000ed00
    3560:	00000000 	.word	0x00000000
    3564:	41007000 	.word	0x41007000
    3568:	41004000 	.word	0x41004000
    356c:	00004a2d 	.word	0x00004a2d
    3570:	00004969 	.word	0x00004969

00003574 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    3574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
    3578:	b980      	cbnz	r0, 359c <_read+0x28>
    357a:	460c      	mov	r4, r1
    357c:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
    357e:	2a00      	cmp	r2, #0
    3580:	dd0f      	ble.n	35a2 <_read+0x2e>
    3582:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    3584:	4e08      	ldr	r6, [pc, #32]	; (35a8 <_read+0x34>)
    3586:	4d09      	ldr	r5, [pc, #36]	; (35ac <_read+0x38>)
    3588:	6830      	ldr	r0, [r6, #0]
    358a:	4621      	mov	r1, r4
    358c:	682b      	ldr	r3, [r5, #0]
    358e:	4798      	blx	r3
		ptr++;
    3590:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    3592:	42bc      	cmp	r4, r7
    3594:	d1f8      	bne.n	3588 <_read+0x14>
		nChars++;
	}
	return nChars;
}
    3596:	4640      	mov	r0, r8
    3598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
    359c:	f04f 38ff 	mov.w	r8, #4294967295
    35a0:	e7f9      	b.n	3596 <_read+0x22>
	for (; len > 0; --len) {
    35a2:	4680      	mov	r8, r0
    35a4:	e7f7      	b.n	3596 <_read+0x22>
    35a6:	bf00      	nop
    35a8:	200003b8 	.word	0x200003b8
    35ac:	200003b0 	.word	0x200003b0

000035b0 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    35b0:	3801      	subs	r0, #1
    35b2:	2802      	cmp	r0, #2
    35b4:	d815      	bhi.n	35e2 <_write+0x32>
{
    35b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    35ba:	460e      	mov	r6, r1
    35bc:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
    35be:	b19a      	cbz	r2, 35e8 <_write+0x38>
    35c0:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
    35c2:	f8df 8038 	ldr.w	r8, [pc, #56]	; 35fc <_write+0x4c>
    35c6:	4f0c      	ldr	r7, [pc, #48]	; (35f8 <_write+0x48>)
    35c8:	f8d8 0000 	ldr.w	r0, [r8]
    35cc:	f815 1b01 	ldrb.w	r1, [r5], #1
    35d0:	683b      	ldr	r3, [r7, #0]
    35d2:	4798      	blx	r3
    35d4:	2800      	cmp	r0, #0
    35d6:	db0a      	blt.n	35ee <_write+0x3e>
    35d8:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
    35da:	3c01      	subs	r4, #1
    35dc:	d1f4      	bne.n	35c8 <_write+0x18>
    35de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
    35e2:	f04f 30ff 	mov.w	r0, #4294967295
    35e6:	4770      	bx	lr
	for (; len != 0; --len) {
    35e8:	4610      	mov	r0, r2
    35ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
    35ee:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
    35f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    35f6:	bf00      	nop
    35f8:	200003b4 	.word	0x200003b4
    35fc:	200003b8 	.word	0x200003b8

00003600 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    3600:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    3602:	4a06      	ldr	r2, [pc, #24]	; (361c <_sbrk+0x1c>)
    3604:	6812      	ldr	r2, [r2, #0]
    3606:	b122      	cbz	r2, 3612 <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    3608:	4a04      	ldr	r2, [pc, #16]	; (361c <_sbrk+0x1c>)
    360a:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    360c:	4403      	add	r3, r0
    360e:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    3610:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    3612:	4903      	ldr	r1, [pc, #12]	; (3620 <_sbrk+0x20>)
    3614:	4a01      	ldr	r2, [pc, #4]	; (361c <_sbrk+0x1c>)
    3616:	6011      	str	r1, [r2, #0]
    3618:	e7f6      	b.n	3608 <_sbrk+0x8>
    361a:	bf00      	nop
    361c:	200002e8 	.word	0x200002e8
    3620:	20005128 	.word	0x20005128

00003624 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    3624:	f04f 30ff 	mov.w	r0, #4294967295
    3628:	4770      	bx	lr

0000362a <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    362a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    362e:	604b      	str	r3, [r1, #4]

	return 0;
}
    3630:	2000      	movs	r0, #0
    3632:	4770      	bx	lr

00003634 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    3634:	2001      	movs	r0, #1
    3636:	4770      	bx	lr

00003638 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    3638:	2000      	movs	r0, #0
    363a:	4770      	bx	lr

0000363c <drawChar>:
uint8_t consoleSGR[80][24];



void drawChar(uint8_t character)
{
    363c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3640:	b0e5      	sub	sp, #404	; 0x194
    3642:	4606      	mov	r6, r0

	uint16_t x = xCharPos;
    3644:	4b5f      	ldr	r3, [pc, #380]	; (37c4 <drawChar+0x188>)
    3646:	881b      	ldrh	r3, [r3, #0]
	uint16_t y = yCharPos;
    3648:	4a5f      	ldr	r2, [pc, #380]	; (37c8 <drawChar+0x18c>)
    364a:	8812      	ldrh	r2, [r2, #0]
	
	uint16_t tempForeground;
	uint16_t tempBackground;
	
	uint32_t tempColor = consoleColors[x][y];
    364c:	0059      	lsls	r1, r3, #1
    364e:	18c8      	adds	r0, r1, r3
    3650:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    3654:	4c5d      	ldr	r4, [pc, #372]	; (37cc <drawChar+0x190>)
    3656:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
	
	tempForeground = (tempColor >> 16);
    365a:	0c25      	lsrs	r5, r4, #16
	tempBackground = consoleColors[x][y] & 0xFFFF;
    365c:	b2a4      	uxth	r4, r4
	
	
	consoleDisplay[x][y] = character;
    365e:	4419      	add	r1, r3
    3660:	485b      	ldr	r0, [pc, #364]	; (37d0 <drawChar+0x194>)
    3662:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    3666:	548e      	strb	r6, [r1, r2]
	
	uint8_t displayFont[10][20];
	uint8_t tempFontStorage[200];
	uint8_t k = 0;
	
	REG_PORT_OUTCLR1 = LCD_CS;
    3668:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    366c:	4959      	ldr	r1, [pc, #356]	; (37d4 <drawChar+0x198>)
    366e:	6008      	str	r0, [r1, #0]
	setXY(x*10,y*20,x*10+9,y*20+19);
    3670:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3674:	0058      	lsls	r0, r3, #1
    3676:	b280      	uxth	r0, r0
    3678:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    367c:	0091      	lsls	r1, r2, #2
    367e:	b289      	uxth	r1, r1
    3680:	f101 0313 	add.w	r3, r1, #19
    3684:	f100 0209 	add.w	r2, r0, #9
    3688:	b29b      	uxth	r3, r3
    368a:	b292      	uxth	r2, r2
    368c:	4f52      	ldr	r7, [pc, #328]	; (37d8 <drawChar+0x19c>)
    368e:	47b8      	blx	r7
    3690:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    3694:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    3698:	4b50      	ldr	r3, [pc, #320]	; (37dc <drawChar+0x1a0>)
    369a:	eb06 0c03 	add.w	ip, r6, r3
	uint8_t k = 0;
    369e:	2600      	movs	r6, #0
			{
				tempFontStorage[k] = 0xFF;
			}
			else
			{
				tempFontStorage[k] = 0x00;
    36a0:	46b6      	mov	lr, r6
				tempFontStorage[k] = 0xFF;
    36a2:	27ff      	movs	r7, #255	; 0xff
    36a4:	e003      	b.n	36ae <drawChar+0x72>
    36a6:	3608      	adds	r6, #8
    36a8:	b2f6      	uxtb	r6, r6
	for(uint16_t i=0; i <= 24; i++)
    36aa:	2ec8      	cmp	r6, #200	; 0xc8
    36ac:	d013      	beq.n	36d6 <drawChar+0x9a>
			if((CodePage437[character][i]&(1<<(7-j)))!=0)
    36ae:	f81c 0f01 	ldrb.w	r0, [ip, #1]!
    36b2:	4633      	mov	r3, r6
    36b4:	2207      	movs	r2, #7
    36b6:	fa40 f102 	asr.w	r1, r0, r2
    36ba:	f011 0f01 	tst.w	r1, #1
				tempFontStorage[k] = 0xFF;
    36be:	bf14      	ite	ne
    36c0:	f80d 7003 	strbne.w	r7, [sp, r3]
				tempFontStorage[k] = 0x00;
    36c4:	f80d e003 	strbeq.w	lr, [sp, r3]
			}
			k++;
    36c8:	3301      	adds	r3, #1
    36ca:	b2db      	uxtb	r3, r3
    36cc:	3a01      	subs	r2, #1
		for(int j=0;j<8;j++)
    36ce:	f1b2 3fff 	cmp.w	r2, #4294967295
    36d2:	d1f0      	bne.n	36b6 <drawChar+0x7a>
    36d4:	e7e7      	b.n	36a6 <drawChar+0x6a>
    36d6:	f04f 0e00 	mov.w	lr, #0
			{
				displayFont[i][j] = 0xFF;	
			}
			else
			{
				displayFont[i][j] = 0x00;
    36da:	4676      	mov	r6, lr
				displayFont[i][j] = 0xFF;	
    36dc:	27ff      	movs	r7, #255	; 0xff
    36de:	fa5f f38e 	uxtb.w	r3, lr
    36e2:	aa32      	add	r2, sp, #200	; 0xc8
    36e4:	4472      	add	r2, lr
    36e6:	f103 0014 	add.w	r0, r3, #20
    36ea:	b2c0      	uxtb	r0, r0
			if(tempFontStorage[k] == 0xFF)
    36ec:	f81d 1003 	ldrb.w	r1, [sp, r3]
    36f0:	29ff      	cmp	r1, #255	; 0xff
				displayFont[i][j] = 0xFF;	
    36f2:	bf0c      	ite	eq
    36f4:	7017      	strbeq	r7, [r2, #0]
				displayFont[i][j] = 0x00;
    36f6:	7016      	strbne	r6, [r2, #0]
			}
			k++;
    36f8:	3301      	adds	r3, #1
    36fa:	b2db      	uxtb	r3, r3
    36fc:	3201      	adds	r2, #1
		for(uint8_t j = 0; j <= 19 ; j++)
    36fe:	4283      	cmp	r3, r0
    3700:	d1f4      	bne.n	36ec <drawChar+0xb0>
    3702:	f10e 0e14 	add.w	lr, lr, #20
	for(uint8_t i = 0; i <= 9 ; i++)
    3706:	f1be 0fc8 	cmp.w	lr, #200	; 0xc8
    370a:	d1e8      	bne.n	36de <drawChar+0xa2>
		}
	}
	
	//process displayFont if it is bold, first bit of consoleSGR
	if(BitVal(consoleSGR[xCharPos][yCharPos],1) == 1)
    370c:	4b2d      	ldr	r3, [pc, #180]	; (37c4 <drawChar+0x188>)
    370e:	881b      	ldrh	r3, [r3, #0]
    3710:	4a2d      	ldr	r2, [pc, #180]	; (37c8 <drawChar+0x18c>)
    3712:	8811      	ldrh	r1, [r2, #0]
    3714:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3718:	4a31      	ldr	r2, [pc, #196]	; (37e0 <drawChar+0x1a4>)
    371a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    371e:	5c5f      	ldrb	r7, [r3, r1]
    3720:	f017 0f02 	tst.w	r7, #2
    3724:	d010      	beq.n	3748 <drawChar+0x10c>
    3726:	f20d 118f 	addw	r1, sp, #399	; 0x18f
    372a:	f10d 06c7 	add.w	r6, sp, #199	; 0xc7
		{
			for(uint8_t j = 0; j <= 19 ; j++)
			{
				if(displayFont[i-1][j] == 0xFF)
				{
					displayFont[i][j] = 0xFF;
    372e:	20ff      	movs	r0, #255	; 0xff
    3730:	f1a1 0314 	sub.w	r3, r1, #20
				if(displayFont[i-1][j] == 0xFF)
    3734:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    3738:	2aff      	cmp	r2, #255	; 0xff
					displayFont[i][j] = 0xFF;
    373a:	bf08      	it	eq
    373c:	7518      	strbeq	r0, [r3, #20]
			for(uint8_t j = 0; j <= 19 ; j++)
    373e:	428b      	cmp	r3, r1
    3740:	d1f8      	bne.n	3734 <drawChar+0xf8>
    3742:	3914      	subs	r1, #20
		for(uint8_t i = 10; i >= 1 ; i--)
    3744:	42b1      	cmp	r1, r6
    3746:	d1f3      	bne.n	3730 <drawChar+0xf4>
			}
		}
	}
	
	//process displayfont if underscore, fourth bit of consoleSGR
	if(BitVal(consoleSGR[xCharPos][yCharPos],4) == 1)
    3748:	f017 0f10 	tst.w	r7, #16
    374c:	d008      	beq.n	3760 <drawChar+0x124>
    374e:	f20d 137b 	addw	r3, sp, #379	; 0x17b
    3752:	f20d 1185 	addw	r1, sp, #389	; 0x185
	{
		for(int i = 0 ; i <= 9 ; i++)
		{
			displayFont[9][i] = 0xFF;
    3756:	22ff      	movs	r2, #255	; 0xff
    3758:	f803 2f01 	strb.w	r2, [r3, #1]!
		for(int i = 0 ; i <= 9 ; i++)
    375c:	428b      	cmp	r3, r1
    375e:	d1fb      	bne.n	3758 <drawChar+0x11c>
		}
	}
	
	//Process inverse video, compare 7th bit of consoleSGR
	if(BitVal(consoleSGR[xCharPos][yCharPos],7) == 0)
    3760:	09fb      	lsrs	r3, r7, #7
    3762:	d014      	beq.n	378e <drawChar+0x152>
    3764:	f10d 07db 	add.w	r7, sp, #219	; 0xdb
    3768:	f20d 19a3 	addw	r9, sp, #419	; 0x1a3
				{
					setPixel(tempForeground);
				}
				else
				{
					setPixel(tempBackground);
    376c:	f8df 8078 	ldr.w	r8, [pc, #120]	; 37e8 <drawChar+0x1ac>
    3770:	f1a7 0614 	sub.w	r6, r7, #20
				if(displayFont[i][j] != 0xFF)
    3774:	f816 3f01 	ldrb.w	r3, [r6, #1]!
    3778:	2bff      	cmp	r3, #255	; 0xff
					setPixel(tempForeground);
    377a:	bf14      	ite	ne
    377c:	4628      	movne	r0, r5
					setPixel(tempBackground);
    377e:	4620      	moveq	r0, r4
    3780:	47c0      	blx	r8
			for(uint8_t j = 0; j <= 19 ; j++)
    3782:	42b7      	cmp	r7, r6
    3784:	d1f6      	bne.n	3774 <drawChar+0x138>
    3786:	3714      	adds	r7, #20
		for(uint8_t i = 0; i <= 9 ; i++)
    3788:	45b9      	cmp	r9, r7
    378a:	d1f1      	bne.n	3770 <drawChar+0x134>
    378c:	e013      	b.n	37b6 <drawChar+0x17a>
    378e:	f10d 07db 	add.w	r7, sp, #219	; 0xdb
    3792:	f20d 19a3 	addw	r9, sp, #419	; 0x1a3
					setPixel(tempBackground);
    3796:	f8df 8050 	ldr.w	r8, [pc, #80]	; 37e8 <drawChar+0x1ac>
    379a:	f1a7 0614 	sub.w	r6, r7, #20
				if(displayFont[i][j] == 0xFF)
    379e:	f816 3f01 	ldrb.w	r3, [r6, #1]!
    37a2:	2bff      	cmp	r3, #255	; 0xff
					setPixel(tempForeground);
    37a4:	bf0c      	ite	eq
    37a6:	4628      	moveq	r0, r5
					setPixel(tempBackground);
    37a8:	4620      	movne	r0, r4
    37aa:	47c0      	blx	r8
			for(uint8_t j = 0; j <= 19 ; j++)
    37ac:	42be      	cmp	r6, r7
    37ae:	d1f6      	bne.n	379e <drawChar+0x162>
    37b0:	3714      	adds	r7, #20
		for(uint8_t i = 0; i <= 9 ; i++)
    37b2:	45b9      	cmp	r9, r7
    37b4:	d1f1      	bne.n	379a <drawChar+0x15e>
				}
			}
		}		
	}
	
	REG_PORT_OUTSET1 = LCD_CS;
    37b6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    37ba:	4b0a      	ldr	r3, [pc, #40]	; (37e4 <drawChar+0x1a8>)
    37bc:	601a      	str	r2, [r3, #0]
}
    37be:	b065      	add	sp, #404	; 0x194
    37c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    37c4:	200002ec 	.word	0x200002ec
    37c8:	200002ee 	.word	0x200002ee
    37cc:	200012f4 	.word	0x200012f4
    37d0:	200003f4 	.word	0x200003f4
    37d4:	41004494 	.word	0x41004494
    37d8:	0000418d 	.word	0x0000418d
    37dc:	00006597 	.word	0x00006597
    37e0:	20000b74 	.word	0x20000b74
    37e4:	41004498 	.word	0x41004498
    37e8:	000042b9 	.word	0x000042b9

000037ec <blinkCursor>:
*/
	
}

void blinkCursor(void)
{
    37ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    37f0:	b0e5      	sub	sp, #404	; 0x194
	uint16_t x = xCharPos;
    37f2:	4b63      	ldr	r3, [pc, #396]	; (3980 <blinkCursor+0x194>)
    37f4:	881b      	ldrh	r3, [r3, #0]
	uint16_t y = yCharPos;
    37f6:	4a63      	ldr	r2, [pc, #396]	; (3984 <blinkCursor+0x198>)
    37f8:	8812      	ldrh	r2, [r2, #0]
	
	uint16_t tempForeground;
	uint16_t tempBackground;
	
	uint32_t tempColor = consoleColors[x][y];
    37fa:	0059      	lsls	r1, r3, #1
    37fc:	18c8      	adds	r0, r1, r3
    37fe:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    3802:	4c61      	ldr	r4, [pc, #388]	; (3988 <blinkCursor+0x19c>)
    3804:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
	
	tempForeground = (tempColor >> 16);
    3808:	0c25      	lsrs	r5, r4, #16
	tempBackground = consoleColors[x][y] & 0xFFFF;
    380a:	b2a4      	uxth	r4, r4
	
	uint8_t character = consoleDisplay[xCharPos][yCharPos];
    380c:	4419      	add	r1, r3
    380e:	485f      	ldr	r0, [pc, #380]	; (398c <blinkCursor+0x1a0>)
    3810:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    3814:	5c8e      	ldrb	r6, [r1, r2]
	
	uint8_t displayFont[10][20];
	uint8_t tempFontStorage[200];
	uint8_t k = 0;
	
	REG_PORT_OUTCLR1 = LCD_CS;
    3816:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    381a:	495d      	ldr	r1, [pc, #372]	; (3990 <blinkCursor+0x1a4>)
    381c:	6008      	str	r0, [r1, #0]
	setXY(x*10,y*20,x*10+9,y*20+19);
    381e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3822:	0058      	lsls	r0, r3, #1
    3824:	b280      	uxth	r0, r0
    3826:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    382a:	0091      	lsls	r1, r2, #2
    382c:	b289      	uxth	r1, r1
    382e:	f101 0313 	add.w	r3, r1, #19
    3832:	f100 0209 	add.w	r2, r0, #9
    3836:	b29b      	uxth	r3, r3
    3838:	b292      	uxth	r2, r2
    383a:	4f56      	ldr	r7, [pc, #344]	; (3994 <blinkCursor+0x1a8>)
    383c:	47b8      	blx	r7
    383e:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    3842:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    3846:	4b54      	ldr	r3, [pc, #336]	; (3998 <blinkCursor+0x1ac>)
    3848:	eb06 0c03 	add.w	ip, r6, r3
	uint8_t k = 0;
    384c:	2600      	movs	r6, #0
			{
				tempFontStorage[k] = 0xFF;
			}
			else
			{
				tempFontStorage[k] = 0x00;
    384e:	46b6      	mov	lr, r6
				tempFontStorage[k] = 0xFF;
    3850:	27ff      	movs	r7, #255	; 0xff
    3852:	e003      	b.n	385c <blinkCursor+0x70>
    3854:	3608      	adds	r6, #8
    3856:	b2f6      	uxtb	r6, r6
	for(uint16_t i=0; i <= 24; i++)
    3858:	2ec8      	cmp	r6, #200	; 0xc8
    385a:	d013      	beq.n	3884 <blinkCursor+0x98>
			if((CodePage437[character][i]&(1<<(7-j)))!=0)
    385c:	f81c 0f01 	ldrb.w	r0, [ip, #1]!
    3860:	4633      	mov	r3, r6
    3862:	2207      	movs	r2, #7
    3864:	fa40 f102 	asr.w	r1, r0, r2
    3868:	f011 0f01 	tst.w	r1, #1
				tempFontStorage[k] = 0xFF;
    386c:	bf14      	ite	ne
    386e:	f80d 7003 	strbne.w	r7, [sp, r3]
				tempFontStorage[k] = 0x00;
    3872:	f80d e003 	strbeq.w	lr, [sp, r3]
			}
			k++;
    3876:	3301      	adds	r3, #1
    3878:	b2db      	uxtb	r3, r3
    387a:	3a01      	subs	r2, #1
		for(int j=0;j<8;j++)
    387c:	f1b2 3fff 	cmp.w	r2, #4294967295
    3880:	d1f0      	bne.n	3864 <blinkCursor+0x78>
    3882:	e7e7      	b.n	3854 <blinkCursor+0x68>
    3884:	f04f 0e00 	mov.w	lr, #0
			{
				displayFont[i][j] = 0xFF;
			}
			else
			{
				displayFont[i][j] = 0x00;
    3888:	4676      	mov	r6, lr
				displayFont[i][j] = 0xFF;
    388a:	27ff      	movs	r7, #255	; 0xff
    388c:	fa5f f38e 	uxtb.w	r3, lr
    3890:	aa32      	add	r2, sp, #200	; 0xc8
    3892:	4472      	add	r2, lr
    3894:	f103 0014 	add.w	r0, r3, #20
    3898:	b2c0      	uxtb	r0, r0
			if(tempFontStorage[k] == 0xFF)
    389a:	f81d 1003 	ldrb.w	r1, [sp, r3]
    389e:	29ff      	cmp	r1, #255	; 0xff
				displayFont[i][j] = 0xFF;
    38a0:	bf0c      	ite	eq
    38a2:	7017      	strbeq	r7, [r2, #0]
				displayFont[i][j] = 0x00;
    38a4:	7016      	strbne	r6, [r2, #0]
			}
			k++;
    38a6:	3301      	adds	r3, #1
    38a8:	b2db      	uxtb	r3, r3
    38aa:	3201      	adds	r2, #1
		for(uint8_t j = 0; j <= 19 ; j++)
    38ac:	4283      	cmp	r3, r0
    38ae:	d1f4      	bne.n	389a <blinkCursor+0xae>
    38b0:	f10e 0e14 	add.w	lr, lr, #20
	for(uint8_t i = 0; i <= 9 ; i++)
    38b4:	f1be 0fc8 	cmp.w	lr, #200	; 0xc8
    38b8:	d1e8      	bne.n	388c <blinkCursor+0xa0>
		}
	}
	
	//process displayFont if it is bold, first bit of consoleSGR
	if(BitVal(consoleSGR[xCharPos][yCharPos],1) == 1)
    38ba:	4b31      	ldr	r3, [pc, #196]	; (3980 <blinkCursor+0x194>)
    38bc:	881b      	ldrh	r3, [r3, #0]
    38be:	4a31      	ldr	r2, [pc, #196]	; (3984 <blinkCursor+0x198>)
    38c0:	8811      	ldrh	r1, [r2, #0]
    38c2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    38c6:	4a35      	ldr	r2, [pc, #212]	; (399c <blinkCursor+0x1b0>)
    38c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    38cc:	5c5f      	ldrb	r7, [r3, r1]
    38ce:	f017 0f02 	tst.w	r7, #2
    38d2:	d010      	beq.n	38f6 <blinkCursor+0x10a>
    38d4:	f20d 118f 	addw	r1, sp, #399	; 0x18f
    38d8:	f10d 06c7 	add.w	r6, sp, #199	; 0xc7
		{
			for(uint8_t j = 0; j <= 19 ; j++)
			{
				if(displayFont[i-1][j] == 0xFF)
				{
					displayFont[i][j] = 0xFF;
    38dc:	20ff      	movs	r0, #255	; 0xff
    38de:	f1a1 0314 	sub.w	r3, r1, #20
				if(displayFont[i-1][j] == 0xFF)
    38e2:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    38e6:	2aff      	cmp	r2, #255	; 0xff
					displayFont[i][j] = 0xFF;
    38e8:	bf08      	it	eq
    38ea:	7518      	strbeq	r0, [r3, #20]
			for(uint8_t j = 0; j <= 19 ; j++)
    38ec:	428b      	cmp	r3, r1
    38ee:	d1f8      	bne.n	38e2 <blinkCursor+0xf6>
    38f0:	3914      	subs	r1, #20
		for(uint8_t i = 10; i >= 1 ; i--)
    38f2:	42b1      	cmp	r1, r6
    38f4:	d1f3      	bne.n	38de <blinkCursor+0xf2>
			}
		}
	}
	
	//process displayfont if underscore, fourth bit of consoleSGR
	if(BitVal(consoleSGR[xCharPos][yCharPos],4) == 1)
    38f6:	f017 0f10 	tst.w	r7, #16
    38fa:	d008      	beq.n	390e <blinkCursor+0x122>
    38fc:	f20d 137b 	addw	r3, sp, #379	; 0x17b
    3900:	f20d 1185 	addw	r1, sp, #389	; 0x185
	{
		for(int i = 0 ; i <= 9 ; i++)
		{
			displayFont[9][i] = 0xFF;
    3904:	22ff      	movs	r2, #255	; 0xff
    3906:	f803 2f01 	strb.w	r2, [r3, #1]!
		for(int i = 0 ; i <= 9 ; i++)
    390a:	428b      	cmp	r3, r1
    390c:	d1fb      	bne.n	3906 <blinkCursor+0x11a>
		}
	}
	
	if(!cursorBlinkState)
    390e:	4b24      	ldr	r3, [pc, #144]	; (39a0 <blinkCursor+0x1b4>)
    3910:	781b      	ldrb	r3, [r3, #0]
    3912:	b1a3      	cbz	r3, 393e <blinkCursor+0x152>
    3914:	f10d 07db 	add.w	r7, sp, #219	; 0xdb
    3918:	f20d 19a3 	addw	r9, sp, #419	; 0x1a3
				{
					setPixel(tempForeground);
				}
				else
				{
					setPixel(tempBackground);
    391c:	f8df 8088 	ldr.w	r8, [pc, #136]	; 39a8 <blinkCursor+0x1bc>
    3920:	f1a7 0614 	sub.w	r6, r7, #20
				if(displayFont[i][j] != 0xFF)
    3924:	f816 3f01 	ldrb.w	r3, [r6, #1]!
    3928:	2bff      	cmp	r3, #255	; 0xff
					setPixel(tempForeground);
    392a:	bf14      	ite	ne
    392c:	4628      	movne	r0, r5
					setPixel(tempBackground);
    392e:	4620      	moveq	r0, r4
    3930:	47c0      	blx	r8
			for(uint8_t j = 0; j <= 19 ; j++)
    3932:	42b7      	cmp	r7, r6
    3934:	d1f6      	bne.n	3924 <blinkCursor+0x138>
    3936:	3714      	adds	r7, #20
		for(uint8_t i = 0; i <= 9 ; i++)
    3938:	45b9      	cmp	r9, r7
    393a:	d1f1      	bne.n	3920 <blinkCursor+0x134>
    393c:	e013      	b.n	3966 <blinkCursor+0x17a>
    393e:	f10d 07db 	add.w	r7, sp, #219	; 0xdb
    3942:	f20d 19a3 	addw	r9, sp, #419	; 0x1a3
					setPixel(tempBackground);
    3946:	f8df 8060 	ldr.w	r8, [pc, #96]	; 39a8 <blinkCursor+0x1bc>
    394a:	f1a7 0614 	sub.w	r6, r7, #20
				if(displayFont[i][j] == 0xFF)
    394e:	f816 3f01 	ldrb.w	r3, [r6, #1]!
    3952:	2bff      	cmp	r3, #255	; 0xff
					setPixel(tempForeground);
    3954:	bf0c      	ite	eq
    3956:	4628      	moveq	r0, r5
					setPixel(tempBackground);
    3958:	4620      	movne	r0, r4
    395a:	47c0      	blx	r8
			for(uint8_t j = 0; j <= 19 ; j++)
    395c:	42be      	cmp	r6, r7
    395e:	d1f6      	bne.n	394e <blinkCursor+0x162>
    3960:	3714      	adds	r7, #20
		for(uint8_t i = 0; i <= 9 ; i++)
    3962:	45b9      	cmp	r9, r7
    3964:	d1f1      	bne.n	394a <blinkCursor+0x15e>
				}
			}
		}
	}
	
	REG_PORT_OUTSET1 = LCD_CS;
    3966:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    396a:	4b0e      	ldr	r3, [pc, #56]	; (39a4 <blinkCursor+0x1b8>)
    396c:	601a      	str	r2, [r3, #0]
	
	//invert cursorBlinkState
	cursorBlinkState = !cursorBlinkState;
    396e:	4a0c      	ldr	r2, [pc, #48]	; (39a0 <blinkCursor+0x1b4>)
    3970:	7813      	ldrb	r3, [r2, #0]
    3972:	f083 0301 	eor.w	r3, r3, #1
    3976:	7013      	strb	r3, [r2, #0]
	
}
    3978:	b065      	add	sp, #404	; 0x194
    397a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    397e:	bf00      	nop
    3980:	200002ec 	.word	0x200002ec
    3984:	200002ee 	.word	0x200002ee
    3988:	200012f4 	.word	0x200012f4
    398c:	200003f4 	.word	0x200003f4
    3990:	41004494 	.word	0x41004494
    3994:	0000418d 	.word	0x0000418d
    3998:	00006597 	.word	0x00006597
    399c:	20000b74 	.word	0x20000b74
    39a0:	20000028 	.word	0x20000028
    39a4:	41004498 	.word	0x41004498
    39a8:	000042b9 	.word	0x000042b9

000039ac <newLine>:
{
    39ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    39b0:	b083      	sub	sp, #12
	int tempCursorx = xCharPos;
    39b2:	4b2d      	ldr	r3, [pc, #180]	; (3a68 <newLine+0xbc>)
    39b4:	f8b3 b000 	ldrh.w	fp, [r3]
	int tempCursory = yCharPos;
    39b8:	4b2c      	ldr	r3, [pc, #176]	; (3a6c <newLine+0xc0>)
    39ba:	881b      	ldrh	r3, [r3, #0]
    39bc:	9301      	str	r3, [sp, #4]
	cursorBlinkState = true;
    39be:	2401      	movs	r4, #1
    39c0:	4b2b      	ldr	r3, [pc, #172]	; (3a70 <newLine+0xc4>)
    39c2:	701c      	strb	r4, [r3, #0]
	blinkCursor();
    39c4:	4b2b      	ldr	r3, [pc, #172]	; (3a74 <newLine+0xc8>)
    39c6:	4798      	blx	r3
	for(int j = 1 ; j <= 24 ; j++)
    39c8:	46a4      	mov	ip, r4
			consoleDisplay[i][j-1] = consoleDisplay[i][j];
    39ca:	4e2b      	ldr	r6, [pc, #172]	; (3a78 <newLine+0xcc>)
			consoleColors[i][j-1] = consoleColors[i][j];
    39cc:	492b      	ldr	r1, [pc, #172]	; (3a7c <newLine+0xd0>)
			consoleSGR[i][j-1] = consoleSGR[i][j];
    39ce:	4d2c      	ldr	r5, [pc, #176]	; (3a80 <newLine+0xd4>)
    39d0:	4664      	mov	r4, ip
    39d2:	f10c 32ff 	add.w	r2, ip, #4294967295
{
    39d6:	2300      	movs	r3, #0
			consoleDisplay[i][j-1] = consoleDisplay[i][j];
    39d8:	eb0c 0e06 	add.w	lr, ip, r6
			consoleSGR[i][j-1] = consoleSGR[i][j];
    39dc:	1967      	adds	r7, r4, r5
			consoleDisplay[i][j-1] = consoleDisplay[i][j];
    39de:	f81e 0003 	ldrb.w	r0, [lr, r3]
    39e2:	5590      	strb	r0, [r2, r6]
			consoleColors[i][j-1] = consoleColors[i][j];
    39e4:	1918      	adds	r0, r3, r4
    39e6:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    39ea:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
			consoleSGR[i][j-1] = consoleSGR[i][j];
    39ee:	5cf8      	ldrb	r0, [r7, r3]
    39f0:	5550      	strb	r0, [r2, r5]
    39f2:	3318      	adds	r3, #24
    39f4:	3218      	adds	r2, #24
		for(int i = 0 ; i < 80 ; i++)
    39f6:	f5b3 6ff0 	cmp.w	r3, #1920	; 0x780
    39fa:	d1f0      	bne.n	39de <newLine+0x32>
	for(int j = 1 ; j <= 24 ; j++)
    39fc:	f10c 0c01 	add.w	ip, ip, #1
    3a00:	f1bc 0f19 	cmp.w	ip, #25
    3a04:	d1e4      	bne.n	39d0 <newLine+0x24>
    3a06:	2317      	movs	r3, #23
		consoleDisplay[k][23] = 0x20;
    3a08:	4e1b      	ldr	r6, [pc, #108]	; (3a78 <newLine+0xcc>)
    3a0a:	2520      	movs	r5, #32
		consoleColors[k][23] = 0x0000;
    3a0c:	4c1b      	ldr	r4, [pc, #108]	; (3a7c <newLine+0xd0>)
    3a0e:	2200      	movs	r2, #0
		consoleSGR[k][23] = 0x00;
    3a10:	481b      	ldr	r0, [pc, #108]	; (3a80 <newLine+0xd4>)
	for(int k = 0 ; k < 80 ; k ++)
    3a12:	f240 7197 	movw	r1, #1943	; 0x797
		consoleDisplay[k][23] = 0x20;
    3a16:	559d      	strb	r5, [r3, r6]
		consoleColors[k][23] = 0x0000;
    3a18:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
		consoleSGR[k][23] = 0x00;
    3a1c:	541a      	strb	r2, [r3, r0]
    3a1e:	3318      	adds	r3, #24
	for(int k = 0 ; k < 80 ; k ++)
    3a20:	428b      	cmp	r3, r1
    3a22:	d1f8      	bne.n	3a16 <newLine+0x6a>
    3a24:	2600      	movs	r6, #0
    3a26:	f8df a050 	ldr.w	sl, [pc, #80]	; 3a78 <newLine+0xcc>
			xCharPos = i;
    3a2a:	f8df 903c 	ldr.w	r9, [pc, #60]	; 3a68 <newLine+0xbc>
			yCharPos = j;
    3a2e:	f8df 803c 	ldr.w	r8, [pc, #60]	; 3a6c <newLine+0xc0>
    3a32:	eb06 050a 	add.w	r5, r6, sl
    3a36:	2400      	movs	r4, #0
			drawChar(consoleDisplay[i][j]);
    3a38:	4f12      	ldr	r7, [pc, #72]	; (3a84 <newLine+0xd8>)
			xCharPos = i;
    3a3a:	f8a9 4000 	strh.w	r4, [r9]
			yCharPos = j;
    3a3e:	f8a8 6000 	strh.w	r6, [r8]
			drawChar(consoleDisplay[i][j]);
    3a42:	f815 0b18 	ldrb.w	r0, [r5], #24
    3a46:	47b8      	blx	r7
		for(int i = 0 ; i < 80 ; i++)
    3a48:	3401      	adds	r4, #1
    3a4a:	2c50      	cmp	r4, #80	; 0x50
    3a4c:	d1f5      	bne.n	3a3a <newLine+0x8e>
	for(int j = 0 ; j < 24 ; j++)
    3a4e:	3601      	adds	r6, #1
    3a50:	2e18      	cmp	r6, #24
    3a52:	d1ee      	bne.n	3a32 <newLine+0x86>
	xCharPos = tempCursorx;
    3a54:	4b04      	ldr	r3, [pc, #16]	; (3a68 <newLine+0xbc>)
    3a56:	f8a3 b000 	strh.w	fp, [r3]
	yCharPos = tempCursory;
    3a5a:	4b04      	ldr	r3, [pc, #16]	; (3a6c <newLine+0xc0>)
    3a5c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    3a60:	801a      	strh	r2, [r3, #0]
}
    3a62:	b003      	add	sp, #12
    3a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3a68:	200002ec 	.word	0x200002ec
    3a6c:	200002ee 	.word	0x200002ee
    3a70:	20000028 	.word	0x20000028
    3a74:	000037ed 	.word	0x000037ed
    3a78:	200003f4 	.word	0x200003f4
    3a7c:	200012f4 	.word	0x200012f4
    3a80:	20000b74 	.word	0x20000b74
    3a84:	0000363d 	.word	0x0000363d

00003a88 <writeString>:

void writeString(const char str[])
{
    3a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3a8a:	4606      	mov	r6, r0
	int length = strlen(str);
    3a8c:	4b09      	ldr	r3, [pc, #36]	; (3ab4 <writeString+0x2c>)
    3a8e:	4798      	blx	r3
	for(int i = 0; i < length; i++)
    3a90:	2800      	cmp	r0, #0
    3a92:	dd0d      	ble.n	3ab0 <writeString+0x28>
    3a94:	4634      	mov	r4, r6
    3a96:	4406      	add	r6, r0
	{
		drawChar(str[i]);
    3a98:	4f07      	ldr	r7, [pc, #28]	; (3ab8 <writeString+0x30>)
		if(xCharPos <= 80)
    3a9a:	4d08      	ldr	r5, [pc, #32]	; (3abc <writeString+0x34>)
		drawChar(str[i]);
    3a9c:	f814 0b01 	ldrb.w	r0, [r4], #1
    3aa0:	47b8      	blx	r7
		if(xCharPos <= 80)
    3aa2:	882b      	ldrh	r3, [r5, #0]
    3aa4:	2b50      	cmp	r3, #80	; 0x50
		xCharPos++;
    3aa6:	bf9c      	itt	ls
    3aa8:	3301      	addls	r3, #1
    3aaa:	802b      	strhls	r3, [r5, #0]
	for(int i = 0; i < length; i++)
    3aac:	42b4      	cmp	r4, r6
    3aae:	d1f5      	bne.n	3a9c <writeString+0x14>
    3ab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3ab2:	bf00      	nop
    3ab4:	00004eff 	.word	0x00004eff
    3ab8:	0000363d 	.word	0x0000363d
    3abc:	200002ec 	.word	0x200002ec

00003ac0 <nullifyConsole>:
	}
}

void nullifyConsole(void)
{
    3ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
    3ac2:	4b0d      	ldr	r3, [pc, #52]	; (3af8 <nullifyConsole+0x38>)
    3ac4:	4f0d      	ldr	r7, [pc, #52]	; (3afc <nullifyConsole+0x3c>)
    3ac6:	4e0e      	ldr	r6, [pc, #56]	; (3b00 <nullifyConsole+0x40>)
    3ac8:	f503 6ef0 	add.w	lr, r3, #1920	; 0x780
	for(int i = 0 ; i < 80 ; i++)
	{
		for(int j = 0 ; j < 24 ; j++)
		{
			consoleDisplay[i][j] = 0x00;
    3acc:	2000      	movs	r0, #0
			consoleSGR[i][j] = 0x00;
			consoleColors[i][j] = 0xFFFF0000;
    3ace:	4d0d      	ldr	r5, [pc, #52]	; (3b04 <nullifyConsole+0x44>)
    3ad0:	e004      	b.n	3adc <nullifyConsole+0x1c>
    3ad2:	3718      	adds	r7, #24
    3ad4:	3660      	adds	r6, #96	; 0x60
    3ad6:	4623      	mov	r3, r4
	for(int i = 0 ; i < 80 ; i++)
    3ad8:	45a6      	cmp	lr, r4
    3ada:	d00c      	beq.n	3af6 <nullifyConsole+0x36>
    3adc:	f103 0418 	add.w	r4, r3, #24
{
    3ae0:	4631      	mov	r1, r6
    3ae2:	463a      	mov	r2, r7
			consoleDisplay[i][j] = 0x00;
    3ae4:	f803 0b01 	strb.w	r0, [r3], #1
			consoleSGR[i][j] = 0x00;
    3ae8:	f802 0b01 	strb.w	r0, [r2], #1
			consoleColors[i][j] = 0xFFFF0000;
    3aec:	f841 5b04 	str.w	r5, [r1], #4
		for(int j = 0 ; j < 24 ; j++)
    3af0:	42a3      	cmp	r3, r4
    3af2:	d1f7      	bne.n	3ae4 <nullifyConsole+0x24>
    3af4:	e7ed      	b.n	3ad2 <nullifyConsole+0x12>
    3af6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3af8:	200003f4 	.word	0x200003f4
    3afc:	20000b74 	.word	0x20000b74
    3b00:	200012f4 	.word	0x200012f4
    3b04:	ffff0000 	.word	0xffff0000

00003b08 <scanCodesContains>:

bool scanCodesContains(int scanCode)
{
	for(int i = 0 ; i < 70 ; i++)
	{
		if(scanCodes[i] == scanCode)
    3b08:	4b09      	ldr	r3, [pc, #36]	; (3b30 <scanCodesContains+0x28>)
    3b0a:	681b      	ldr	r3, [r3, #0]
    3b0c:	4298      	cmp	r0, r3
    3b0e:	d00a      	beq.n	3b26 <scanCodesContains+0x1e>
    3b10:	4b07      	ldr	r3, [pc, #28]	; (3b30 <scanCodesContains+0x28>)
    3b12:	f503 718a 	add.w	r1, r3, #276	; 0x114
    3b16:	f853 2f04 	ldr.w	r2, [r3, #4]!
    3b1a:	4282      	cmp	r2, r0
    3b1c:	d005      	beq.n	3b2a <scanCodesContains+0x22>
	for(int i = 0 ; i < 70 ; i++)
    3b1e:	428b      	cmp	r3, r1
    3b20:	d1f9      	bne.n	3b16 <scanCodesContains+0xe>
		{
			return true;
		}
	}
	return false;
    3b22:	2000      	movs	r0, #0
    3b24:	4770      	bx	lr
			return true;
    3b26:	2001      	movs	r0, #1
    3b28:	4770      	bx	lr
    3b2a:	2001      	movs	r0, #1
}
    3b2c:	4770      	bx	lr
    3b2e:	bf00      	nop
    3b30:	20000054 	.word	0x20000054

00003b34 <keyDown>:

bool keyDown(int scancode)
{
	for(int i = 0 ; i < 20 ; i++)
	{
		if(keyDownBuffer[i] == scancode)
    3b34:	4b09      	ldr	r3, [pc, #36]	; (3b5c <keyDown+0x28>)
    3b36:	781b      	ldrb	r3, [r3, #0]
    3b38:	4298      	cmp	r0, r3
    3b3a:	d00a      	beq.n	3b52 <keyDown+0x1e>
    3b3c:	4b07      	ldr	r3, [pc, #28]	; (3b5c <keyDown+0x28>)
    3b3e:	f103 0113 	add.w	r1, r3, #19
    3b42:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    3b46:	4282      	cmp	r2, r0
    3b48:	d005      	beq.n	3b56 <keyDown+0x22>
	for(int i = 0 ; i < 20 ; i++)
    3b4a:	428b      	cmp	r3, r1
    3b4c:	d1f9      	bne.n	3b42 <keyDown+0xe>
		{
			return true;
		}	
	}
	return false;
    3b4e:	2000      	movs	r0, #0
    3b50:	4770      	bx	lr
			return true;
    3b52:	2001      	movs	r0, #1
    3b54:	4770      	bx	lr
    3b56:	2001      	movs	r0, #1
}
    3b58:	4770      	bx	lr
    3b5a:	bf00      	nop
    3b5c:	2000002c 	.word	0x2000002c

00003b60 <printKeyboardBuffer>:
{
    3b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3b64:	b0cb      	sub	sp, #300	; 0x12c
	unsigned char noCase[] =
    3b66:	4da8      	ldr	r5, [pc, #672]	; (3e08 <printKeyboardBuffer+0x2a8>)
    3b68:	2646      	movs	r6, #70	; 0x46
    3b6a:	4632      	mov	r2, r6
    3b6c:	4629      	mov	r1, r5
    3b6e:	a838      	add	r0, sp, #224	; 0xe0
    3b70:	4ca6      	ldr	r4, [pc, #664]	; (3e0c <printKeyboardBuffer+0x2ac>)
    3b72:	47a0      	blx	r4
	unsigned char shiftCase[] =
    3b74:	4632      	mov	r2, r6
    3b76:	f105 0148 	add.w	r1, r5, #72	; 0x48
    3b7a:	a826      	add	r0, sp, #152	; 0x98
    3b7c:	47a0      	blx	r4
	unsigned char capsLockCase[] =
    3b7e:	4632      	mov	r2, r6
    3b80:	f105 0190 	add.w	r1, r5, #144	; 0x90
    3b84:	a814      	add	r0, sp, #80	; 0x50
    3b86:	47a0      	blx	r4
	unsigned char controlCase[] =
    3b88:	4632      	mov	r2, r6
    3b8a:	f105 01d8 	add.w	r1, r5, #216	; 0xd8
    3b8e:	a802      	add	r0, sp, #8
    3b90:	47a0      	blx	r4
    3b92:	499f      	ldr	r1, [pc, #636]	; (3e10 <printKeyboardBuffer+0x2b0>)
    3b94:	1e4f      	subs	r7, r1, #1
    3b96:	3113      	adds	r1, #19
    3b98:	463e      	mov	r6, r7
	bool controled = false;
    3b9a:	f04f 0900 	mov.w	r9, #0
	bool shifted = false;
    3b9e:	46ca      	mov	sl, r9
		if((scanCodeBuffer[i] == 13) | (scanCodeBuffer[i] == 49))
    3ba0:	f816 3f01 	ldrb.w	r3, [r6, #1]!
    3ba4:	2b31      	cmp	r3, #49	; 0x31
    3ba6:	bf18      	it	ne
    3ba8:	2b0d      	cmpne	r3, #13
    3baa:	bf0c      	ite	eq
    3bac:	2201      	moveq	r2, #1
    3bae:	2200      	movne	r2, #0
			shifted = true;
    3bb0:	2a00      	cmp	r2, #0
    3bb2:	bf18      	it	ne
    3bb4:	4692      	movne	sl, r2
			controled = true;
    3bb6:	2b16      	cmp	r3, #22
    3bb8:	bf08      	it	eq
    3bba:	f04f 0901 	moveq.w	r9, #1
	for(int i=0; i<20; i++)
    3bbe:	428e      	cmp	r6, r1
    3bc0:	d1ee      	bne.n	3ba0 <printKeyboardBuffer+0x40>
    3bc2:	4c93      	ldr	r4, [pc, #588]	; (3e10 <printKeyboardBuffer+0x2b0>)
    3bc4:	f8df 8274 	ldr.w	r8, [pc, #628]	; 3e3c <printKeyboardBuffer+0x2dc>
    3bc8:	f104 0b14 	add.w	fp, r4, #20
					sendChar(noCase[scanCodeBuffer[i]]);
    3bcc:	f8cd a004 	str.w	sl, [sp, #4]
    3bd0:	e00c      	b.n	3bec <printKeyboardBuffer+0x8c>
				sendChar(0x1B);
    3bd2:	201b      	movs	r0, #27
    3bd4:	4b8f      	ldr	r3, [pc, #572]	; (3e14 <printKeyboardBuffer+0x2b4>)
    3bd6:	4798      	blx	r3
				if(localEcho)
    3bd8:	4b8f      	ldr	r3, [pc, #572]	; (3e18 <printKeyboardBuffer+0x2b8>)
    3bda:	781b      	ldrb	r3, [r3, #0]
    3bdc:	2b00      	cmp	r3, #0
    3bde:	d143      	bne.n	3c68 <printKeyboardBuffer+0x108>
    3be0:	3401      	adds	r4, #1
    3be2:	f108 0801 	add.w	r8, r8, #1
	for(int i = 0 ; i < 20 ; i++)
    3be6:	455c      	cmp	r4, fp
    3be8:	f000 8161 	beq.w	3eae <printKeyboardBuffer+0x34e>
		if(!keyDown(scanCodeBuffer[i]))
    3bec:	7825      	ldrb	r5, [r4, #0]
    3bee:	4628      	mov	r0, r5
    3bf0:	4b8a      	ldr	r3, [pc, #552]	; (3e1c <printKeyboardBuffer+0x2bc>)
    3bf2:	4798      	blx	r3
    3bf4:	2800      	cmp	r0, #0
    3bf6:	d1f3      	bne.n	3be0 <printKeyboardBuffer+0x80>
			keyDownBuffer[i] = scanCodeBuffer[i];
    3bf8:	f888 5000 	strb.w	r5, [r8]
			if(scanCodeBuffer[i] == 0x00)  //this is escape
    3bfc:	2d00      	cmp	r5, #0
    3bfe:	d0e8      	beq.n	3bd2 <printKeyboardBuffer+0x72>
			else if(scanCodeBuffer[i] == 0x01)	//setup button, do something weird here
    3c00:	2d01      	cmp	r5, #1
    3c02:	d0ed      	beq.n	3be0 <printKeyboardBuffer+0x80>
			else if(scanCodeBuffer[i] == 67)		//Break key, set by break enable in settings
    3c04:	2d43      	cmp	r5, #67	; 0x43
    3c06:	d035      	beq.n	3c74 <printKeyboardBuffer+0x114>
			else if(scanCodeBuffer[i] == 58)   //Return key
    3c08:	2d3a      	cmp	r5, #58	; 0x3a
    3c0a:	d03b      	beq.n	3c84 <printKeyboardBuffer+0x124>
			else if(scanCodeBuffer[i] == 12)		//caps lock
    3c0c:	2d0c      	cmp	r5, #12
    3c0e:	d075      	beq.n	3cfc <printKeyboardBuffer+0x19c>
			else if(scanCodeBuffer[i] == 3)			//scroll lock
    3c10:	2d03      	cmp	r5, #3
    3c12:	d07a      	beq.n	3d0a <printKeyboardBuffer+0x1aa>
			else if(scanCodeBuffer[i] == 35) //left
    3c14:	2d23      	cmp	r5, #35	; 0x23
    3c16:	d07e      	beq.n	3d16 <printKeyboardBuffer+0x1b6>
			else if(scanCodeBuffer[i]  == 45)	//down
    3c18:	2d2d      	cmp	r5, #45	; 0x2d
    3c1a:	f000 809a 	beq.w	3d52 <printKeyboardBuffer+0x1f2>
			else if(scanCodeBuffer[i]  == 55)	//up
    3c1e:	2d37      	cmp	r5, #55	; 0x37
    3c20:	f000 80b5 	beq.w	3d8e <printKeyboardBuffer+0x22e>
			else if(scanCodeBuffer[i]  == 65)	//right
    3c24:	2d41      	cmp	r5, #65	; 0x41
    3c26:	f000 80d0 	beq.w	3dca <printKeyboardBuffer+0x26a>
				if(controled)
    3c2a:	f1b9 0f00 	cmp.w	r9, #0
    3c2e:	f040 8107 	bne.w	3e40 <printKeyboardBuffer+0x2e0>
				else if(capsLock)
    3c32:	4b7b      	ldr	r3, [pc, #492]	; (3e20 <printKeyboardBuffer+0x2c0>)
    3c34:	781b      	ldrb	r3, [r3, #0]
    3c36:	2b00      	cmp	r3, #0
    3c38:	f040 8113 	bne.w	3e62 <printKeyboardBuffer+0x302>
				else if(shifted)
    3c3c:	9b01      	ldr	r3, [sp, #4]
    3c3e:	2b00      	cmp	r3, #0
    3c40:	f000 8122 	beq.w	3e88 <printKeyboardBuffer+0x328>
					sendChar(shiftCase[scanCodeBuffer[i]]);
    3c44:	ab4a      	add	r3, sp, #296	; 0x128
    3c46:	441d      	add	r5, r3
    3c48:	f815 0c90 	ldrb.w	r0, [r5, #-144]
    3c4c:	4b71      	ldr	r3, [pc, #452]	; (3e14 <printKeyboardBuffer+0x2b4>)
    3c4e:	4798      	blx	r3
					if(localEcho)
    3c50:	4b71      	ldr	r3, [pc, #452]	; (3e18 <printKeyboardBuffer+0x2b8>)
    3c52:	781b      	ldrb	r3, [r3, #0]
    3c54:	2b00      	cmp	r3, #0
    3c56:	d0c3      	beq.n	3be0 <printKeyboardBuffer+0x80>
						parseChar(shiftCase[scanCodeBuffer[i]]);
    3c58:	7823      	ldrb	r3, [r4, #0]
    3c5a:	aa4a      	add	r2, sp, #296	; 0x128
    3c5c:	4413      	add	r3, r2
    3c5e:	f813 0c90 	ldrb.w	r0, [r3, #-144]
    3c62:	4b70      	ldr	r3, [pc, #448]	; (3e24 <printKeyboardBuffer+0x2c4>)
    3c64:	4798      	blx	r3
    3c66:	e7bb      	b.n	3be0 <printKeyboardBuffer+0x80>
					ring_put(ouroboros,0x1B);
    3c68:	211b      	movs	r1, #27
    3c6a:	4b6f      	ldr	r3, [pc, #444]	; (3e28 <printKeyboardBuffer+0x2c8>)
    3c6c:	6818      	ldr	r0, [r3, #0]
    3c6e:	4b6f      	ldr	r3, [pc, #444]	; (3e2c <printKeyboardBuffer+0x2cc>)
    3c70:	4798      	blx	r3
    3c72:	e7b5      	b.n	3be0 <printKeyboardBuffer+0x80>
				if(breakEnable)
    3c74:	4b6e      	ldr	r3, [pc, #440]	; (3e30 <printKeyboardBuffer+0x2d0>)
    3c76:	781b      	ldrb	r3, [r3, #0]
    3c78:	2b00      	cmp	r3, #0
    3c7a:	d0b1      	beq.n	3be0 <printKeyboardBuffer+0x80>
					sendChar(0x00);
    3c7c:	2000      	movs	r0, #0
    3c7e:	4b65      	ldr	r3, [pc, #404]	; (3e14 <printKeyboardBuffer+0x2b4>)
    3c80:	4798      	blx	r3
    3c82:	e7ad      	b.n	3be0 <printKeyboardBuffer+0x80>
				if(lineFeedNewLine == 1)  //This is Windows; CRLF
    3c84:	4b6b      	ldr	r3, [pc, #428]	; (3e34 <printKeyboardBuffer+0x2d4>)
    3c86:	681b      	ldr	r3, [r3, #0]
    3c88:	2b01      	cmp	r3, #1
    3c8a:	d014      	beq.n	3cb6 <printKeyboardBuffer+0x156>
				if(lineFeedNewLine == 2)  //This is Unix, sends LF
    3c8c:	4b69      	ldr	r3, [pc, #420]	; (3e34 <printKeyboardBuffer+0x2d4>)
    3c8e:	681b      	ldr	r3, [r3, #0]
    3c90:	2b02      	cmp	r3, #2
    3c92:	d026      	beq.n	3ce2 <printKeyboardBuffer+0x182>
				if(lineFeedNewLine == 3)  //This is classic mac, sends CR
    3c94:	4b67      	ldr	r3, [pc, #412]	; (3e34 <printKeyboardBuffer+0x2d4>)
    3c96:	681b      	ldr	r3, [r3, #0]
    3c98:	2b03      	cmp	r3, #3
    3c9a:	d1a1      	bne.n	3be0 <printKeyboardBuffer+0x80>
					sendChar(0x0D);
    3c9c:	200d      	movs	r0, #13
    3c9e:	4b5d      	ldr	r3, [pc, #372]	; (3e14 <printKeyboardBuffer+0x2b4>)
    3ca0:	4798      	blx	r3
					if(localEcho)
    3ca2:	4b5d      	ldr	r3, [pc, #372]	; (3e18 <printKeyboardBuffer+0x2b8>)
    3ca4:	781b      	ldrb	r3, [r3, #0]
    3ca6:	2b00      	cmp	r3, #0
    3ca8:	d09a      	beq.n	3be0 <printKeyboardBuffer+0x80>
						ring_put(ouroboros, 0x0D);
    3caa:	210d      	movs	r1, #13
    3cac:	4b5e      	ldr	r3, [pc, #376]	; (3e28 <printKeyboardBuffer+0x2c8>)
    3cae:	6818      	ldr	r0, [r3, #0]
    3cb0:	4b5e      	ldr	r3, [pc, #376]	; (3e2c <printKeyboardBuffer+0x2cc>)
    3cb2:	4798      	blx	r3
    3cb4:	e794      	b.n	3be0 <printKeyboardBuffer+0x80>
					sendChar(0x0D);
    3cb6:	200d      	movs	r0, #13
    3cb8:	4b56      	ldr	r3, [pc, #344]	; (3e14 <printKeyboardBuffer+0x2b4>)
    3cba:	4798      	blx	r3
					sendChar(0x0A);
    3cbc:	200a      	movs	r0, #10
    3cbe:	4b55      	ldr	r3, [pc, #340]	; (3e14 <printKeyboardBuffer+0x2b4>)
    3cc0:	4798      	blx	r3
					if(localEcho)
    3cc2:	4b55      	ldr	r3, [pc, #340]	; (3e18 <printKeyboardBuffer+0x2b8>)
    3cc4:	781b      	ldrb	r3, [r3, #0]
    3cc6:	2b00      	cmp	r3, #0
    3cc8:	d0e0      	beq.n	3c8c <printKeyboardBuffer+0x12c>
						ring_put(ouroboros, 0x0D);
    3cca:	f8df a15c 	ldr.w	sl, [pc, #348]	; 3e28 <printKeyboardBuffer+0x2c8>
    3cce:	210d      	movs	r1, #13
    3cd0:	f8da 0000 	ldr.w	r0, [sl]
    3cd4:	4d55      	ldr	r5, [pc, #340]	; (3e2c <printKeyboardBuffer+0x2cc>)
    3cd6:	47a8      	blx	r5
						ring_put(ouroboros, 0x0A);
    3cd8:	210a      	movs	r1, #10
    3cda:	f8da 0000 	ldr.w	r0, [sl]
    3cde:	47a8      	blx	r5
    3ce0:	e7d4      	b.n	3c8c <printKeyboardBuffer+0x12c>
					sendChar(0x0A);
    3ce2:	200a      	movs	r0, #10
    3ce4:	4b4b      	ldr	r3, [pc, #300]	; (3e14 <printKeyboardBuffer+0x2b4>)
    3ce6:	4798      	blx	r3
					if(localEcho)
    3ce8:	4b4b      	ldr	r3, [pc, #300]	; (3e18 <printKeyboardBuffer+0x2b8>)
    3cea:	781b      	ldrb	r3, [r3, #0]
    3cec:	2b00      	cmp	r3, #0
    3cee:	d0d1      	beq.n	3c94 <printKeyboardBuffer+0x134>
						ring_put(ouroboros, 0x0A);
    3cf0:	210a      	movs	r1, #10
    3cf2:	4b4d      	ldr	r3, [pc, #308]	; (3e28 <printKeyboardBuffer+0x2c8>)
    3cf4:	6818      	ldr	r0, [r3, #0]
    3cf6:	4b4d      	ldr	r3, [pc, #308]	; (3e2c <printKeyboardBuffer+0x2cc>)
    3cf8:	4798      	blx	r3
    3cfa:	e7cb      	b.n	3c94 <printKeyboardBuffer+0x134>
				capsLock = !capsLock;
    3cfc:	4b48      	ldr	r3, [pc, #288]	; (3e20 <printKeyboardBuffer+0x2c0>)
    3cfe:	781b      	ldrb	r3, [r3, #0]
    3d00:	f083 0301 	eor.w	r3, r3, #1
    3d04:	4a46      	ldr	r2, [pc, #280]	; (3e20 <printKeyboardBuffer+0x2c0>)
    3d06:	7013      	strb	r3, [r2, #0]
    3d08:	e76a      	b.n	3be0 <printKeyboardBuffer+0x80>
				scrollLock = !scrollLock;
    3d0a:	4a4b      	ldr	r2, [pc, #300]	; (3e38 <printKeyboardBuffer+0x2d8>)
    3d0c:	7813      	ldrb	r3, [r2, #0]
    3d0e:	f083 0301 	eor.w	r3, r3, #1
    3d12:	7013      	strb	r3, [r2, #0]
    3d14:	e764      	b.n	3be0 <printKeyboardBuffer+0x80>
				sendChar(0x1B);
    3d16:	201b      	movs	r0, #27
    3d18:	4b3e      	ldr	r3, [pc, #248]	; (3e14 <printKeyboardBuffer+0x2b4>)
    3d1a:	4798      	blx	r3
				sendChar(0x5B);
    3d1c:	205b      	movs	r0, #91	; 0x5b
    3d1e:	4b3d      	ldr	r3, [pc, #244]	; (3e14 <printKeyboardBuffer+0x2b4>)
    3d20:	4798      	blx	r3
				sendChar(0x44);
    3d22:	2044      	movs	r0, #68	; 0x44
    3d24:	4b3b      	ldr	r3, [pc, #236]	; (3e14 <printKeyboardBuffer+0x2b4>)
    3d26:	4798      	blx	r3
				if(localEcho)
    3d28:	4b3b      	ldr	r3, [pc, #236]	; (3e18 <printKeyboardBuffer+0x2b8>)
    3d2a:	781b      	ldrb	r3, [r3, #0]
    3d2c:	2b00      	cmp	r3, #0
    3d2e:	f43f af57 	beq.w	3be0 <printKeyboardBuffer+0x80>
					ring_put(ouroboros, 0x1B);
    3d32:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 3e28 <printKeyboardBuffer+0x2c8>
    3d36:	211b      	movs	r1, #27
    3d38:	f8da 0000 	ldr.w	r0, [sl]
    3d3c:	4d3b      	ldr	r5, [pc, #236]	; (3e2c <printKeyboardBuffer+0x2cc>)
    3d3e:	47a8      	blx	r5
					ring_put(ouroboros, 0x5B);
    3d40:	215b      	movs	r1, #91	; 0x5b
    3d42:	f8da 0000 	ldr.w	r0, [sl]
    3d46:	47a8      	blx	r5
					ring_put(ouroboros, 0x44);
    3d48:	2144      	movs	r1, #68	; 0x44
    3d4a:	f8da 0000 	ldr.w	r0, [sl]
    3d4e:	47a8      	blx	r5
    3d50:	e746      	b.n	3be0 <printKeyboardBuffer+0x80>
				sendChar(0x1B);
    3d52:	201b      	movs	r0, #27
    3d54:	4b2f      	ldr	r3, [pc, #188]	; (3e14 <printKeyboardBuffer+0x2b4>)
    3d56:	4798      	blx	r3
				sendChar(0x5B);
    3d58:	205b      	movs	r0, #91	; 0x5b
    3d5a:	4b2e      	ldr	r3, [pc, #184]	; (3e14 <printKeyboardBuffer+0x2b4>)
    3d5c:	4798      	blx	r3
				sendChar(0x42);
    3d5e:	2042      	movs	r0, #66	; 0x42
    3d60:	4b2c      	ldr	r3, [pc, #176]	; (3e14 <printKeyboardBuffer+0x2b4>)
    3d62:	4798      	blx	r3
				if(localEcho)
    3d64:	4b2c      	ldr	r3, [pc, #176]	; (3e18 <printKeyboardBuffer+0x2b8>)
    3d66:	781b      	ldrb	r3, [r3, #0]
    3d68:	2b00      	cmp	r3, #0
    3d6a:	f43f af39 	beq.w	3be0 <printKeyboardBuffer+0x80>
					ring_put(ouroboros, 0x1B);
    3d6e:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 3e28 <printKeyboardBuffer+0x2c8>
    3d72:	211b      	movs	r1, #27
    3d74:	f8da 0000 	ldr.w	r0, [sl]
    3d78:	4d2c      	ldr	r5, [pc, #176]	; (3e2c <printKeyboardBuffer+0x2cc>)
    3d7a:	47a8      	blx	r5
					ring_put(ouroboros, 0x5B);
    3d7c:	215b      	movs	r1, #91	; 0x5b
    3d7e:	f8da 0000 	ldr.w	r0, [sl]
    3d82:	47a8      	blx	r5
					ring_put(ouroboros, 0x42);
    3d84:	2142      	movs	r1, #66	; 0x42
    3d86:	f8da 0000 	ldr.w	r0, [sl]
    3d8a:	47a8      	blx	r5
    3d8c:	e728      	b.n	3be0 <printKeyboardBuffer+0x80>
				sendChar(0x1B);
    3d8e:	201b      	movs	r0, #27
    3d90:	4b20      	ldr	r3, [pc, #128]	; (3e14 <printKeyboardBuffer+0x2b4>)
    3d92:	4798      	blx	r3
				sendChar(0x5B);
    3d94:	205b      	movs	r0, #91	; 0x5b
    3d96:	4b1f      	ldr	r3, [pc, #124]	; (3e14 <printKeyboardBuffer+0x2b4>)
    3d98:	4798      	blx	r3
				sendChar(0x41);
    3d9a:	2041      	movs	r0, #65	; 0x41
    3d9c:	4b1d      	ldr	r3, [pc, #116]	; (3e14 <printKeyboardBuffer+0x2b4>)
    3d9e:	4798      	blx	r3
				if(localEcho)
    3da0:	4b1d      	ldr	r3, [pc, #116]	; (3e18 <printKeyboardBuffer+0x2b8>)
    3da2:	781b      	ldrb	r3, [r3, #0]
    3da4:	2b00      	cmp	r3, #0
    3da6:	f43f af1b 	beq.w	3be0 <printKeyboardBuffer+0x80>
					ring_put(ouroboros, 0x1B);
    3daa:	f8df a07c 	ldr.w	sl, [pc, #124]	; 3e28 <printKeyboardBuffer+0x2c8>
    3dae:	211b      	movs	r1, #27
    3db0:	f8da 0000 	ldr.w	r0, [sl]
    3db4:	4d1d      	ldr	r5, [pc, #116]	; (3e2c <printKeyboardBuffer+0x2cc>)
    3db6:	47a8      	blx	r5
					ring_put(ouroboros, 0x5B);
    3db8:	215b      	movs	r1, #91	; 0x5b
    3dba:	f8da 0000 	ldr.w	r0, [sl]
    3dbe:	47a8      	blx	r5
					ring_put(ouroboros, 0x41);
    3dc0:	2141      	movs	r1, #65	; 0x41
    3dc2:	f8da 0000 	ldr.w	r0, [sl]
    3dc6:	47a8      	blx	r5
    3dc8:	e70a      	b.n	3be0 <printKeyboardBuffer+0x80>
				sendChar(0x1B);
    3dca:	201b      	movs	r0, #27
    3dcc:	4b11      	ldr	r3, [pc, #68]	; (3e14 <printKeyboardBuffer+0x2b4>)
    3dce:	4798      	blx	r3
				sendChar(0x5B);
    3dd0:	205b      	movs	r0, #91	; 0x5b
    3dd2:	4b10      	ldr	r3, [pc, #64]	; (3e14 <printKeyboardBuffer+0x2b4>)
    3dd4:	4798      	blx	r3
				sendChar(0x43);
    3dd6:	2043      	movs	r0, #67	; 0x43
    3dd8:	4b0e      	ldr	r3, [pc, #56]	; (3e14 <printKeyboardBuffer+0x2b4>)
    3dda:	4798      	blx	r3
				if(localEcho)
    3ddc:	4b0e      	ldr	r3, [pc, #56]	; (3e18 <printKeyboardBuffer+0x2b8>)
    3dde:	781b      	ldrb	r3, [r3, #0]
    3de0:	2b00      	cmp	r3, #0
    3de2:	f43f aefd 	beq.w	3be0 <printKeyboardBuffer+0x80>
					ring_put(ouroboros, 0x1B);
    3de6:	f8df a040 	ldr.w	sl, [pc, #64]	; 3e28 <printKeyboardBuffer+0x2c8>
    3dea:	211b      	movs	r1, #27
    3dec:	f8da 0000 	ldr.w	r0, [sl]
    3df0:	4d0e      	ldr	r5, [pc, #56]	; (3e2c <printKeyboardBuffer+0x2cc>)
    3df2:	47a8      	blx	r5
					ring_put(ouroboros, 0x5B);
    3df4:	215b      	movs	r1, #91	; 0x5b
    3df6:	f8da 0000 	ldr.w	r0, [sl]
    3dfa:	47a8      	blx	r5
					ring_put(ouroboros, 0x43);
    3dfc:	2143      	movs	r1, #67	; 0x43
    3dfe:	f8da 0000 	ldr.w	r0, [sl]
    3e02:	47a8      	blx	r5
    3e04:	e6ec      	b.n	3be0 <printKeyboardBuffer+0x80>
    3e06:	bf00      	nop
    3e08:	00007e98 	.word	0x00007e98
    3e0c:	00004ab9 	.word	0x00004ab9
    3e10:	20000040 	.word	0x20000040
    3e14:	00001c69 	.word	0x00001c69
    3e18:	20000194 	.word	0x20000194
    3e1c:	00003b35 	.word	0x00003b35
    3e20:	20000369 	.word	0x20000369
    3e24:	000018d1 	.word	0x000018d1
    3e28:	20000390 	.word	0x20000390
    3e2c:	0000014b 	.word	0x0000014b
    3e30:	200002f0 	.word	0x200002f0
    3e34:	20000190 	.word	0x20000190
    3e38:	20000389 	.word	0x20000389
    3e3c:	2000002c 	.word	0x2000002c
					sendChar(controlCase[scanCodeBuffer[i]]);
    3e40:	ab02      	add	r3, sp, #8
    3e42:	5d58      	ldrb	r0, [r3, r5]
    3e44:	4b1e      	ldr	r3, [pc, #120]	; (3ec0 <printKeyboardBuffer+0x360>)
    3e46:	4798      	blx	r3
					if(localEcho)
    3e48:	4b1e      	ldr	r3, [pc, #120]	; (3ec4 <printKeyboardBuffer+0x364>)
    3e4a:	781b      	ldrb	r3, [r3, #0]
    3e4c:	2b00      	cmp	r3, #0
    3e4e:	f43f aec7 	beq.w	3be0 <printKeyboardBuffer+0x80>
						ring_put(ouroboros, controlCase[scanCodeBuffer[i]]);
    3e52:	7823      	ldrb	r3, [r4, #0]
    3e54:	aa02      	add	r2, sp, #8
    3e56:	5cd1      	ldrb	r1, [r2, r3]
    3e58:	4b1b      	ldr	r3, [pc, #108]	; (3ec8 <printKeyboardBuffer+0x368>)
    3e5a:	6818      	ldr	r0, [r3, #0]
    3e5c:	4b1b      	ldr	r3, [pc, #108]	; (3ecc <printKeyboardBuffer+0x36c>)
    3e5e:	4798      	blx	r3
    3e60:	e6be      	b.n	3be0 <printKeyboardBuffer+0x80>
					sendChar(capsLockCase[scanCodeBuffer[i]]);
    3e62:	ab4a      	add	r3, sp, #296	; 0x128
    3e64:	441d      	add	r5, r3
    3e66:	f815 0cd8 	ldrb.w	r0, [r5, #-216]
    3e6a:	4b15      	ldr	r3, [pc, #84]	; (3ec0 <printKeyboardBuffer+0x360>)
    3e6c:	4798      	blx	r3
					if(localEcho)
    3e6e:	4b15      	ldr	r3, [pc, #84]	; (3ec4 <printKeyboardBuffer+0x364>)
    3e70:	781b      	ldrb	r3, [r3, #0]
    3e72:	2b00      	cmp	r3, #0
    3e74:	f43f aeb4 	beq.w	3be0 <printKeyboardBuffer+0x80>
						parseChar(capsLockCase[scanCodeBuffer[i]]);
    3e78:	7823      	ldrb	r3, [r4, #0]
    3e7a:	aa4a      	add	r2, sp, #296	; 0x128
    3e7c:	4413      	add	r3, r2
    3e7e:	f813 0cd8 	ldrb.w	r0, [r3, #-216]
    3e82:	4b13      	ldr	r3, [pc, #76]	; (3ed0 <printKeyboardBuffer+0x370>)
    3e84:	4798      	blx	r3
    3e86:	e6ab      	b.n	3be0 <printKeyboardBuffer+0x80>
					sendChar(noCase[scanCodeBuffer[i]]);
    3e88:	ab4a      	add	r3, sp, #296	; 0x128
    3e8a:	441d      	add	r5, r3
    3e8c:	f815 0c48 	ldrb.w	r0, [r5, #-72]
    3e90:	4b0b      	ldr	r3, [pc, #44]	; (3ec0 <printKeyboardBuffer+0x360>)
    3e92:	4798      	blx	r3
					if(localEcho)
    3e94:	4b0b      	ldr	r3, [pc, #44]	; (3ec4 <printKeyboardBuffer+0x364>)
    3e96:	781b      	ldrb	r3, [r3, #0]
    3e98:	2b00      	cmp	r3, #0
    3e9a:	f43f aea1 	beq.w	3be0 <printKeyboardBuffer+0x80>
						parseChar(noCase[scanCodeBuffer[i]]);
    3e9e:	7823      	ldrb	r3, [r4, #0]
    3ea0:	aa4a      	add	r2, sp, #296	; 0x128
    3ea2:	4413      	add	r3, r2
    3ea4:	f813 0c48 	ldrb.w	r0, [r3, #-72]
    3ea8:	4b09      	ldr	r3, [pc, #36]	; (3ed0 <printKeyboardBuffer+0x370>)
    3eaa:	4798      	blx	r3
    3eac:	e698      	b.n	3be0 <printKeyboardBuffer+0x80>
		scanCodeBuffer[i] = 0xFF;
    3eae:	23ff      	movs	r3, #255	; 0xff
    3eb0:	f807 3f01 	strb.w	r3, [r7, #1]!
	for(int i = 0 ; i < 20 ; i++)
    3eb4:	42b7      	cmp	r7, r6
    3eb6:	d1fb      	bne.n	3eb0 <printKeyboardBuffer+0x350>
}
    3eb8:	b04b      	add	sp, #300	; 0x12c
    3eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3ebe:	bf00      	nop
    3ec0:	00001c69 	.word	0x00001c69
    3ec4:	20000194 	.word	0x20000194
    3ec8:	20000390 	.word	0x20000390
    3ecc:	0000014b 	.word	0x0000014b
    3ed0:	000018d1 	.word	0x000018d1

00003ed4 <removeFromKeyDown>:

void removeFromKeyDown(int scancode)
{
    3ed4:	b410      	push	{r4}
    3ed6:	4b06      	ldr	r3, [pc, #24]	; (3ef0 <removeFromKeyDown+0x1c>)
    3ed8:	f103 0114 	add.w	r1, r3, #20
	for(int i = 0 ; i < 20 ; i++)
	{
		if(keyDownBuffer[i] == scancode)
		{
			keyDownBuffer[i] = 0xFF;
    3edc:	24ff      	movs	r4, #255	; 0xff
		if(keyDownBuffer[i] == scancode)
    3ede:	781a      	ldrb	r2, [r3, #0]
    3ee0:	4282      	cmp	r2, r0
			keyDownBuffer[i] = 0xFF;
    3ee2:	bf08      	it	eq
    3ee4:	701c      	strbeq	r4, [r3, #0]
    3ee6:	3301      	adds	r3, #1
	for(int i = 0 ; i < 20 ; i++)
    3ee8:	428b      	cmp	r3, r1
    3eea:	d1f8      	bne.n	3ede <removeFromKeyDown+0xa>
		}
	}
}
    3eec:	bc10      	pop	{r4}
    3eee:	4770      	bx	lr
    3ef0:	2000002c 	.word	0x2000002c

00003ef4 <readKeyboard>:
{
    3ef4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3ef8:	4a65      	ldr	r2, [pc, #404]	; (4090 <readKeyboard+0x19c>)
    3efa:	1f17      	subs	r7, r2, #4
    3efc:	f502 728a 	add.w	r2, r2, #276	; 0x114
    3f00:	463b      	mov	r3, r7
		scanCodes[i] = 0xFF;
    3f02:	21ff      	movs	r1, #255	; 0xff
    3f04:	f843 1f04 	str.w	r1, [r3, #4]!
	for(i = 0 ; i < 70 ; i++)
    3f08:	4293      	cmp	r3, r2
    3f0a:	d1fb      	bne.n	3f04 <readKeyboard+0x10>
	PORT->Group[0].WRCONFIG.bit.DRVSTR = 1;
    3f0c:	4a61      	ldr	r2, [pc, #388]	; (4094 <readKeyboard+0x1a0>)
    3f0e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3f10:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    3f14:	6293      	str	r3, [r2, #40]	; 0x28
    3f16:	4a60      	ldr	r2, [pc, #384]	; (4098 <readKeyboard+0x1a4>)
    3f18:	3218      	adds	r2, #24
    3f1a:	f1a2 081c 	sub.w	r8, r2, #28
		REG_PORT_DIRSET0 = kb_col[i];
    3f1e:	485f      	ldr	r0, [pc, #380]	; (409c <readKeyboard+0x1a8>)
		REG_PORT_OUTCLR0 = kb_col[i];
    3f20:	495f      	ldr	r1, [pc, #380]	; (40a0 <readKeyboard+0x1ac>)
		REG_PORT_DIRSET0 = kb_col[i];
    3f22:	f8d8 3004 	ldr.w	r3, [r8, #4]
    3f26:	6003      	str	r3, [r0, #0]
		REG_PORT_OUTCLR0 = kb_col[i];
    3f28:	f858 3f04 	ldr.w	r3, [r8, #4]!
    3f2c:	600b      	str	r3, [r1, #0]
	for (i = 0; i < NUM_COL; i++) {
    3f2e:	4590      	cmp	r8, r2
    3f30:	d1f7      	bne.n	3f22 <readKeyboard+0x2e>
    3f32:	f8df e190 	ldr.w	lr, [pc, #400]	; 40c4 <readKeyboard+0x1d0>
    3f36:	495b      	ldr	r1, [pc, #364]	; (40a4 <readKeyboard+0x1b0>)
    3f38:	f10e 0628 	add.w	r6, lr, #40	; 0x28
    3f3c:	4675      	mov	r5, lr
		REG_PORT_DIRCLR0 = kb_row[i];
    3f3e:	4c5a      	ldr	r4, [pc, #360]	; (40a8 <readKeyboard+0x1b4>)
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.PULLEN = 1;
    3f40:	4854      	ldr	r0, [pc, #336]	; (4094 <readKeyboard+0x1a0>)
		REG_PORT_DIRCLR0 = kb_row[i];
    3f42:	f855 3b04 	ldr.w	r3, [r5], #4
    3f46:	6023      	str	r3, [r4, #0]
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.PULLEN = 1;
    3f48:	f851 3b04 	ldr.w	r3, [r1], #4
    3f4c:	4403      	add	r3, r0
    3f4e:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    3f52:	f042 0204 	orr.w	r2, r2, #4
    3f56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.INEN = 1;
    3f5a:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    3f5e:	f042 0202 	orr.w	r2, r2, #2
    3f62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	for (i = 0; i < NUM_ROW; i++) {
    3f66:	42b5      	cmp	r5, r6
    3f68:	d1eb      	bne.n	3f42 <readKeyboard+0x4e>
    3f6a:	f8df a144 	ldr.w	sl, [pc, #324]	; 40b0 <readKeyboard+0x1bc>
    3f6e:	f04f 0900 	mov.w	r9, #0
    3f72:	464a      	mov	r2, r9
		REG_PORT_OUTSET0 = kb_col[i];
    3f74:	f8df b150 	ldr.w	fp, [pc, #336]	; 40c8 <readKeyboard+0x1d4>
			if((PORT->Group[0].IN.reg & kb_row[j]) != 0) {
    3f78:	4e46      	ldr	r6, [pc, #280]	; (4094 <readKeyboard+0x1a0>)
				scanCodes[scanCodeIndex] = (i * NUM_ROW) + j;
    3f7a:	f8df c114 	ldr.w	ip, [pc, #276]	; 4090 <readKeyboard+0x19c>
		REG_PORT_OUTSET0 = kb_col[i];
    3f7e:	f8da 3004 	ldr.w	r3, [sl, #4]
    3f82:	f8cb 3000 	str.w	r3, [fp]
    3f86:	4649      	mov	r1, r9
    3f88:	4673      	mov	r3, lr
			if((PORT->Group[0].IN.reg & kb_row[j]) != 0) {
    3f8a:	6a34      	ldr	r4, [r6, #32]
    3f8c:	f853 0b04 	ldr.w	r0, [r3], #4
    3f90:	4204      	tst	r4, r0
				scanCodes[scanCodeIndex] = (i * NUM_ROW) + j;
    3f92:	bf1c      	itt	ne
    3f94:	f84c 1022 	strne.w	r1, [ip, r2, lsl #2]
				scanCodeIndex++;
    3f98:	3201      	addne	r2, #1
    3f9a:	3101      	adds	r1, #1
		for (j = 0; j < NUM_ROW; j++) {	
    3f9c:	42ab      	cmp	r3, r5
    3f9e:	d1f4      	bne.n	3f8a <readKeyboard+0x96>
		REG_PORT_OUTCLR0 = kb_col[i];
    3fa0:	f85a 1f04 	ldr.w	r1, [sl, #4]!
    3fa4:	483e      	ldr	r0, [pc, #248]	; (40a0 <readKeyboard+0x1ac>)
    3fa6:	6001      	str	r1, [r0, #0]
    3fa8:	f109 090a 	add.w	r9, r9, #10
	for (i = 0; i < NUM_COL; i++) {
    3fac:	f1b9 0f46 	cmp.w	r9, #70	; 0x46
    3fb0:	d1e5      	bne.n	3f7e <readKeyboard+0x8a>
    3fb2:	4671      	mov	r1, lr
		REG_PORT_DIRSET0 = kb_row[i];
    3fb4:	4d39      	ldr	r5, [pc, #228]	; (409c <readKeyboard+0x1a8>)
		REG_PORT_OUTCLR0 = kb_row[i];
    3fb6:	4604      	mov	r4, r0
		REG_PORT_DIRSET0 = kb_row[i];
    3fb8:	6808      	ldr	r0, [r1, #0]
    3fba:	6028      	str	r0, [r5, #0]
		REG_PORT_OUTCLR0 = kb_row[i];
    3fbc:	f851 0b04 	ldr.w	r0, [r1], #4
    3fc0:	6020      	str	r0, [r4, #0]
	for (i = 0; i < NUM_ROW; i++) {
    3fc2:	4299      	cmp	r1, r3
    3fc4:	d1f8      	bne.n	3fb8 <readKeyboard+0xc4>
    3fc6:	4839      	ldr	r0, [pc, #228]	; (40ac <readKeyboard+0x1b8>)
    3fc8:	4d39      	ldr	r5, [pc, #228]	; (40b0 <readKeyboard+0x1bc>)
		REG_PORT_DIRCLR0 = kb_col[i];
    3fca:	4e37      	ldr	r6, [pc, #220]	; (40a8 <readKeyboard+0x1b4>)
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.PULLEN = 1;
    3fcc:	4c31      	ldr	r4, [pc, #196]	; (4094 <readKeyboard+0x1a0>)
		REG_PORT_DIRCLR0 = kb_col[i];
    3fce:	f855 3f04 	ldr.w	r3, [r5, #4]!
    3fd2:	6033      	str	r3, [r6, #0]
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.PULLEN = 1;
    3fd4:	f850 3f04 	ldr.w	r3, [r0, #4]!
    3fd8:	4423      	add	r3, r4
    3fda:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    3fde:	f041 0104 	orr.w	r1, r1, #4
    3fe2:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.INEN = 1;
    3fe6:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
    3fea:	f041 0102 	orr.w	r1, r1, #2
    3fee:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
	for (i = 0; i < NUM_COL; i++) {
    3ff2:	4545      	cmp	r5, r8
    3ff4:	d1eb      	bne.n	3fce <readKeyboard+0xda>
    3ff6:	f04f 0c00 	mov.w	ip, #0
		REG_PORT_OUTSET0 = kb_row[i];
    3ffa:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 40c8 <readKeyboard+0x1d4>
			if((PORT->Group[0].IN.reg & kb_col[j]) != 0)
    3ffe:	4e25      	ldr	r6, [pc, #148]	; (4094 <readKeyboard+0x1a0>)
				scanCodes[scanCodeIndex] = (j * NUM_ROW) + i;
    4000:	f8df 808c 	ldr.w	r8, [pc, #140]	; 4090 <readKeyboard+0x19c>
		REG_PORT_OUTCLR0 = kb_row[i];
    4004:	f8df a098 	ldr.w	sl, [pc, #152]	; 40a0 <readKeyboard+0x1ac>
    4008:	e00a      	b.n	4020 <readKeyboard+0x12c>
    400a:	f8d9 3000 	ldr.w	r3, [r9]
    400e:	f10e 0e04 	add.w	lr, lr, #4
    4012:	f8ca 3000 	str.w	r3, [sl]
	for (i = 0; i < NUM_ROW; i++) {
    4016:	f10c 0c01 	add.w	ip, ip, #1
    401a:	f1bc 0f0a 	cmp.w	ip, #10
    401e:	d012      	beq.n	4046 <readKeyboard+0x152>
    4020:	46f1      	mov	r9, lr
		REG_PORT_OUTSET0 = kb_row[i];
    4022:	f8de 3000 	ldr.w	r3, [lr]
    4026:	f8cb 3000 	str.w	r3, [fp]
    402a:	4661      	mov	r1, ip
    402c:	4b20      	ldr	r3, [pc, #128]	; (40b0 <readKeyboard+0x1bc>)
			if((PORT->Group[0].IN.reg & kb_col[j]) != 0)
    402e:	6a34      	ldr	r4, [r6, #32]
    4030:	f853 0f04 	ldr.w	r0, [r3, #4]!
    4034:	4204      	tst	r4, r0
				scanCodes[scanCodeIndex] = (j * NUM_ROW) + i;
    4036:	bf1c      	itt	ne
    4038:	f848 1022 	strne.w	r1, [r8, r2, lsl #2]
				scanCodeIndex++;
    403c:	3201      	addne	r2, #1
    403e:	310a      	adds	r1, #10
		for (j = 0; j < NUM_COL; j++) {
    4040:	429d      	cmp	r5, r3
    4042:	d1f4      	bne.n	402e <readKeyboard+0x13a>
    4044:	e7e1      	b.n	400a <readKeyboard+0x116>
	for(i = 0 ; i < scanCodeIndex ; i++)
    4046:	2a00      	cmp	r2, #0
    4048:	dd0c      	ble.n	4064 <readKeyboard+0x170>
    404a:	4b1a      	ldr	r3, [pc, #104]	; (40b4 <readKeyboard+0x1c0>)
    404c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    4050:	3a01      	subs	r2, #1
    4052:	490f      	ldr	r1, [pc, #60]	; (4090 <readKeyboard+0x19c>)
    4054:	eb01 0182 	add.w	r1, r1, r2, lsl #2
		scanCodeBuffer[i] = scanCodes[i];	
    4058:	f857 2f04 	ldr.w	r2, [r7, #4]!
    405c:	f803 2f01 	strb.w	r2, [r3, #1]!
	for(i = 0 ; i < scanCodeIndex ; i++)
    4060:	42b9      	cmp	r1, r7
    4062:	d1f9      	bne.n	4058 <readKeyboard+0x164>
		REG_PORT_OUTSET0 = kb_row[i];
    4064:	2400      	movs	r4, #0
		if(keyDown(i) && !scanCodesContains(i))
    4066:	4d14      	ldr	r5, [pc, #80]	; (40b8 <readKeyboard+0x1c4>)
    4068:	4e14      	ldr	r6, [pc, #80]	; (40bc <readKeyboard+0x1c8>)
			removeFromKeyDown(i);
    406a:	4f15      	ldr	r7, [pc, #84]	; (40c0 <readKeyboard+0x1cc>)
    406c:	e002      	b.n	4074 <readKeyboard+0x180>
	for(i = 0; i < 70; i++)
    406e:	3401      	adds	r4, #1
    4070:	2c46      	cmp	r4, #70	; 0x46
    4072:	d00a      	beq.n	408a <readKeyboard+0x196>
		if(keyDown(i) && !scanCodesContains(i))
    4074:	4620      	mov	r0, r4
    4076:	47a8      	blx	r5
    4078:	2800      	cmp	r0, #0
    407a:	d0f8      	beq.n	406e <readKeyboard+0x17a>
    407c:	4620      	mov	r0, r4
    407e:	47b0      	blx	r6
    4080:	2800      	cmp	r0, #0
    4082:	d1f4      	bne.n	406e <readKeyboard+0x17a>
			removeFromKeyDown(i);
    4084:	4620      	mov	r0, r4
    4086:	47b8      	blx	r7
    4088:	e7f1      	b.n	406e <readKeyboard+0x17a>
}
    408a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    408e:	bf00      	nop
    4090:	20000054 	.word	0x20000054
    4094:	41004400 	.word	0x41004400
    4098:	00007fb8 	.word	0x00007fb8
    409c:	41004408 	.word	0x41004408
    40a0:	41004414 	.word	0x41004414
    40a4:	00008018 	.word	0x00008018
    40a8:	41004404 	.word	0x41004404
    40ac:	00007fd0 	.word	0x00007fd0
    40b0:	00007fb4 	.word	0x00007fb4
    40b4:	2000003f 	.word	0x2000003f
    40b8:	00003b35 	.word	0x00003b35
    40bc:	00003b09 	.word	0x00003b09
    40c0:	00003ed5 	.word	0x00003ed5
    40c4:	00007ff0 	.word	0x00007ff0
    40c8:	41004418 	.word	0x41004418

000040cc <setColorRGB>:
uint16_t fore_Color_High, fore_Color_Low;
uint16_t back_Color_High, back_Color_Low;

void setColorRGB(uint8_t r, uint8_t g, uint8_t b)
{
	fore_Color_High = ((r&248)|g>>5);
    40cc:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
    40d0:	ea40 1051 	orr.w	r0, r0, r1, lsr #5
    40d4:	4b04      	ldr	r3, [pc, #16]	; (40e8 <setColorRGB+0x1c>)
    40d6:	8018      	strh	r0, [r3, #0]
	fore_Color_Low = ((g&28)<<3|b>>3);
    40d8:	00c9      	lsls	r1, r1, #3
    40da:	f001 01e0 	and.w	r1, r1, #224	; 0xe0
    40de:	ea41 01d2 	orr.w	r1, r1, r2, lsr #3
    40e2:	4b02      	ldr	r3, [pc, #8]	; (40ec <setColorRGB+0x20>)
    40e4:	8019      	strh	r1, [r3, #0]
    40e6:	4770      	bx	lr
    40e8:	200030f6 	.word	0x200030f6
    40ec:	200030f8 	.word	0x200030f8

000040f0 <setBackColorRGB>:
}

void setBackColorRGB(unsigned char r,
unsigned char g, unsigned char b)
{
	back_Color_High = ((r&248)|g>>5);
    40f0:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
    40f4:	ea40 1051 	orr.w	r0, r0, r1, lsr #5
    40f8:	4b04      	ldr	r3, [pc, #16]	; (410c <setBackColorRGB+0x1c>)
    40fa:	8018      	strh	r0, [r3, #0]
	back_Color_Low = ((g&28)<<3|b>>3);
    40fc:	00c9      	lsls	r1, r1, #3
    40fe:	f001 01e0 	and.w	r1, r1, #224	; 0xe0
    4102:	ea41 01d2 	orr.w	r1, r1, r2, lsr #3
    4106:	4b02      	ldr	r3, [pc, #8]	; (4110 <setBackColorRGB+0x20>)
    4108:	8019      	strh	r1, [r3, #0]
    410a:	4770      	bx	lr
    410c:	200030fa 	.word	0x200030fa
    4110:	200030f4 	.word	0x200030f4

00004114 <LCD_Fast_Fill>:
	(((long)(x2-x1)+1)*((long)(y2-y1)+1)));
	REG_PORT_OUTSET1 = LCD_CS;
}

void LCD_Fast_Fill(int ch, int cl, long pix)
{
    4114:	b470      	push	{r4, r5, r6}
	int blocks;
	
	
	REG_PORT_OUTCLR1 = 0x0000ffff;
    4116:	f64f 74ff 	movw	r4, #65535	; 0xffff
    411a:	4b1a      	ldr	r3, [pc, #104]	; (4184 <LCD_Fast_Fill+0x70>)
    411c:	601c      	str	r4, [r3, #0]
	REG_PORT_OUTSET1 = (ch << 8) | cl;
    411e:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
    4122:	3304      	adds	r3, #4
    4124:	6019      	str	r1, [r3, #0]

	blocks = pix/16;
    4126:	4616      	mov	r6, r2
    4128:	2a00      	cmp	r2, #0
    412a:	bfb8      	it	lt
    412c:	f102 060f 	addlt.w	r6, r2, #15
    4130:	1136      	asrs	r6, r6, #4
	for (int i=0; i<blocks; i++)
    4132:	2e00      	cmp	r6, #0
    4134:	dd0c      	ble.n	4150 <LCD_Fast_Fill+0x3c>
    4136:	2500      	movs	r5, #0
	{
		for (int j=0; j<16; j++)
		{
			REG_PORT_OUTCLR1 = LCD_WR;
    4138:	4c12      	ldr	r4, [pc, #72]	; (4184 <LCD_Fast_Fill+0x70>)
    413a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
			REG_PORT_OUTSET1 = LCD_WR;
    413e:	4812      	ldr	r0, [pc, #72]	; (4188 <LCD_Fast_Fill+0x74>)
{
    4140:	2310      	movs	r3, #16
			REG_PORT_OUTCLR1 = LCD_WR;
    4142:	6021      	str	r1, [r4, #0]
			REG_PORT_OUTSET1 = LCD_WR;
    4144:	6001      	str	r1, [r0, #0]
		for (int j=0; j<16; j++)
    4146:	3b01      	subs	r3, #1
    4148:	d1fb      	bne.n	4142 <LCD_Fast_Fill+0x2e>
	for (int i=0; i<blocks; i++)
    414a:	3501      	adds	r5, #1
    414c:	42ae      	cmp	r6, r5
    414e:	d1f7      	bne.n	4140 <LCD_Fast_Fill+0x2c>
		}
	}
	
	if ((pix % 16) != 0)
    4150:	f012 0f0f 	tst.w	r2, #15
    4154:	d014      	beq.n	4180 <LCD_Fast_Fill+0x6c>
	for (int i=0; i<(pix % 16)+1; i++)
    4156:	4253      	negs	r3, r2
    4158:	f002 020f 	and.w	r2, r2, #15
    415c:	f003 030f 	and.w	r3, r3, #15
    4160:	bf58      	it	pl
    4162:	425a      	negpl	r2, r3
    4164:	1c53      	adds	r3, r2, #1
    4166:	2b00      	cmp	r3, #0
    4168:	dd0a      	ble.n	4180 <LCD_Fast_Fill+0x6c>
    416a:	461a      	mov	r2, r3
    416c:	2300      	movs	r3, #0
	{
		REG_PORT_OUTCLR1 = LCD_WR;
    416e:	4c05      	ldr	r4, [pc, #20]	; (4184 <LCD_Fast_Fill+0x70>)
    4170:	f44f 3100 	mov.w	r1, #131072	; 0x20000
		REG_PORT_OUTSET1 = LCD_WR;
    4174:	4804      	ldr	r0, [pc, #16]	; (4188 <LCD_Fast_Fill+0x74>)
		REG_PORT_OUTCLR1 = LCD_WR;
    4176:	6021      	str	r1, [r4, #0]
		REG_PORT_OUTSET1 = LCD_WR;
    4178:	6001      	str	r1, [r0, #0]
	for (int i=0; i<(pix % 16)+1; i++)
    417a:	3301      	adds	r3, #1
    417c:	429a      	cmp	r2, r3
    417e:	d1fa      	bne.n	4176 <LCD_Fast_Fill+0x62>
	}
}
    4180:	bc70      	pop	{r4, r5, r6}
    4182:	4770      	bx	lr
    4184:	41004494 	.word	0x41004494
    4188:	41004498 	.word	0x41004498

0000418c <setXY>:
{
	setXY(0,0,display_X_size,display_Y_size);
}

void setXY(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
    418c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4190:	4681      	mov	r9, r0
    4192:	460f      	mov	r7, r1
    4194:	4690      	mov	r8, r2
    4196:	461e      	mov	r6, r3
	y1=display_Y_size-y1;
	y2=display_Y_size-y2;
	SwapUint16(y1, y2);
	*/
	
	LCD_Write_COM16(0x2a,0x00);
    4198:	2100      	movs	r1, #0
    419a:	202a      	movs	r0, #42	; 0x2a
    419c:	4c18      	ldr	r4, [pc, #96]	; (4200 <setXY+0x74>)
    419e:	47a0      	blx	r4
	LCD_Write_DATA8(x1>>8);
    41a0:	ea4f 2019 	mov.w	r0, r9, lsr #8
    41a4:	4d17      	ldr	r5, [pc, #92]	; (4204 <setXY+0x78>)
    41a6:	47a8      	blx	r5
	LCD_Write_COM16(0x2a,0x01);
    41a8:	2101      	movs	r1, #1
    41aa:	202a      	movs	r0, #42	; 0x2a
    41ac:	47a0      	blx	r4
	LCD_Write_DATA8(x1);
    41ae:	fa5f f089 	uxtb.w	r0, r9
    41b2:	47a8      	blx	r5
	LCD_Write_COM16(0x2a,0x02);
    41b4:	2102      	movs	r1, #2
    41b6:	202a      	movs	r0, #42	; 0x2a
    41b8:	47a0      	blx	r4
	LCD_Write_DATA8(x2>>8);
    41ba:	ea4f 2018 	mov.w	r0, r8, lsr #8
    41be:	47a8      	blx	r5
	LCD_Write_COM16(0x2a,0x03);
    41c0:	2103      	movs	r1, #3
    41c2:	202a      	movs	r0, #42	; 0x2a
    41c4:	47a0      	blx	r4
	LCD_Write_DATA8(x2);
    41c6:	fa5f f088 	uxtb.w	r0, r8
    41ca:	47a8      	blx	r5

	LCD_Write_COM16(0x2b,0x00);
    41cc:	2100      	movs	r1, #0
    41ce:	202b      	movs	r0, #43	; 0x2b
    41d0:	47a0      	blx	r4
	LCD_Write_DATA8(y1>>8);
    41d2:	0a38      	lsrs	r0, r7, #8
    41d4:	47a8      	blx	r5
	LCD_Write_COM16(0x2b,0x01);
    41d6:	2101      	movs	r1, #1
    41d8:	202b      	movs	r0, #43	; 0x2b
    41da:	47a0      	blx	r4
	LCD_Write_DATA8(y1);
    41dc:	b2f8      	uxtb	r0, r7
    41de:	47a8      	blx	r5
	LCD_Write_COM16(0x2b,0x02);
    41e0:	2102      	movs	r1, #2
    41e2:	202b      	movs	r0, #43	; 0x2b
    41e4:	47a0      	blx	r4
	LCD_Write_DATA8(y2>>8);
    41e6:	0a30      	lsrs	r0, r6, #8
    41e8:	47a8      	blx	r5
	LCD_Write_COM16(0x2b,0x03);
    41ea:	2103      	movs	r1, #3
    41ec:	202b      	movs	r0, #43	; 0x2b
    41ee:	47a0      	blx	r4
	LCD_Write_DATA8(y2);
    41f0:	b2f0      	uxtb	r0, r6
    41f2:	47a8      	blx	r5

	LCD_Write_COM16(0x2c,0x00);
    41f4:	2100      	movs	r1, #0
    41f6:	202c      	movs	r0, #44	; 0x2c
    41f8:	47a0      	blx	r4
    41fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    41fe:	bf00      	nop
    4200:	00004321 	.word	0x00004321
    4204:	00004351 	.word	0x00004351

00004208 <fillRect>:
{
    4208:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    420c:	4606      	mov	r6, r0
    420e:	4689      	mov	r9, r1
    4210:	4615      	mov	r5, r2
    4212:	461c      	mov	r4, r3
	if (x1>x2)
    4214:	4290      	cmp	r0, r2
    4216:	dd01      	ble.n	421c <fillRect+0x14>
		x1 = x2;
    4218:	4616      	mov	r6, r2
		x2 = temp;
    421a:	4605      	mov	r5, r0
	if (y1>y2)
    421c:	45a1      	cmp	r9, r4
    421e:	dd02      	ble.n	4226 <fillRect+0x1e>
    4220:	4633      	mov	r3, r6
		x1 = x2;
    4222:	462e      	mov	r6, r5
		x2 = temp;
    4224:	461d      	mov	r5, r3
	REG_PORT_OUTCLR1 = LCD_CS;
    4226:	f44f 0880 	mov.w	r8, #4194304	; 0x400000
    422a:	4b0f      	ldr	r3, [pc, #60]	; (4268 <fillRect+0x60>)
    422c:	f8c3 8000 	str.w	r8, [r3]
	setXY(x1, y1, x2, y2);
    4230:	b2a3      	uxth	r3, r4
    4232:	b2aa      	uxth	r2, r5
    4234:	fa1f f189 	uxth.w	r1, r9
    4238:	b2b0      	uxth	r0, r6
    423a:	4f0c      	ldr	r7, [pc, #48]	; (426c <fillRect+0x64>)
    423c:	47b8      	blx	r7
	REG_PORT_OUTSET1 = LCD_DC;
    423e:	4f0c      	ldr	r7, [pc, #48]	; (4270 <fillRect+0x68>)
    4240:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    4244:	603b      	str	r3, [r7, #0]
	(((long)(x2-x1)+1)*((long)(y2-y1)+1)));
    4246:	1bad      	subs	r5, r5, r6
    4248:	eba4 0409 	sub.w	r4, r4, r9
    424c:	1c62      	adds	r2, r4, #1
	LCD_Fast_Fill(fore_Color_High, fore_Color_Low,
    424e:	fb05 2202 	mla	r2, r5, r2, r2
    4252:	4b08      	ldr	r3, [pc, #32]	; (4274 <fillRect+0x6c>)
    4254:	8819      	ldrh	r1, [r3, #0]
    4256:	4b08      	ldr	r3, [pc, #32]	; (4278 <fillRect+0x70>)
    4258:	8818      	ldrh	r0, [r3, #0]
    425a:	4b08      	ldr	r3, [pc, #32]	; (427c <fillRect+0x74>)
    425c:	4798      	blx	r3
	REG_PORT_OUTSET1 = LCD_CS;
    425e:	f8c7 8000 	str.w	r8, [r7]
    4262:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4266:	bf00      	nop
    4268:	41004494 	.word	0x41004494
    426c:	0000418d 	.word	0x0000418d
    4270:	41004498 	.word	0x41004498
    4274:	200030f8 	.word	0x200030f8
    4278:	200030f6 	.word	0x200030f6
    427c:	00004115 	.word	0x00004115

00004280 <clrXY>:
{
    4280:	b510      	push	{r4, lr}
	setXY(0,0,display_X_size,display_Y_size);
    4282:	4b04      	ldr	r3, [pc, #16]	; (4294 <clrXY+0x14>)
    4284:	881b      	ldrh	r3, [r3, #0]
    4286:	4a04      	ldr	r2, [pc, #16]	; (4298 <clrXY+0x18>)
    4288:	8812      	ldrh	r2, [r2, #0]
    428a:	2100      	movs	r1, #0
    428c:	4608      	mov	r0, r1
    428e:	4c03      	ldr	r4, [pc, #12]	; (429c <clrXY+0x1c>)
    4290:	47a0      	blx	r4
    4292:	bd10      	pop	{r4, pc}
    4294:	2000016e 	.word	0x2000016e
    4298:	2000016c 	.word	0x2000016c
    429c:	0000418d 	.word	0x0000418d

000042a0 <clrScr>:
{
    42a0:	b508      	push	{r3, lr}
	REG_PORT_OUTCLR1 = LCD_CS;
    42a2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    42a6:	4b02      	ldr	r3, [pc, #8]	; (42b0 <clrScr+0x10>)
    42a8:	601a      	str	r2, [r3, #0]
	clrXY();
    42aa:	4b02      	ldr	r3, [pc, #8]	; (42b4 <clrScr+0x14>)
    42ac:	4798      	blx	r3
    42ae:	bd08      	pop	{r3, pc}
    42b0:	41004494 	.word	0x41004494
    42b4:	00004281 	.word	0x00004281

000042b8 <setPixel>:
}

void setPixel(uint16_t color)
{
    42b8:	b508      	push	{r3, lr}
	//it sets it to a 16-bit color.
	//LCD_Write_DATA16((color<<8),(color&0xFF)); 
	LCD_Write_DATA16((color>>8),(color&0xFF));
    42ba:	b2c1      	uxtb	r1, r0
    42bc:	0a00      	lsrs	r0, r0, #8
    42be:	4b01      	ldr	r3, [pc, #4]	; (42c4 <setPixel+0xc>)
    42c0:	4798      	blx	r3
    42c2:	bd08      	pop	{r3, pc}
    42c4:	00004339 	.word	0x00004339

000042c8 <clearScreen>:
	LCD_Write_DATA8(0x80);
	REG_PORT_OUTSET1 = LCD_CS;
}
*/
void clearScreen(void)
{
    42c8:	b510      	push	{r4, lr}
	fore_Color_High = ((r&248)|g>>5);
    42ca:	2000      	movs	r0, #0
    42cc:	4b05      	ldr	r3, [pc, #20]	; (42e4 <clearScreen+0x1c>)
    42ce:	8018      	strh	r0, [r3, #0]
	fore_Color_Low = ((g&28)<<3|b>>3);
    42d0:	4b05      	ldr	r3, [pc, #20]	; (42e8 <clearScreen+0x20>)
    42d2:	8018      	strh	r0, [r3, #0]
	setColorRGB(0,0,0);
	fillRect(0,0,display_Y_size,display_X_size);
    42d4:	4b05      	ldr	r3, [pc, #20]	; (42ec <clearScreen+0x24>)
    42d6:	881b      	ldrh	r3, [r3, #0]
    42d8:	4a05      	ldr	r2, [pc, #20]	; (42f0 <clearScreen+0x28>)
    42da:	8812      	ldrh	r2, [r2, #0]
    42dc:	4601      	mov	r1, r0
    42de:	4c05      	ldr	r4, [pc, #20]	; (42f4 <clearScreen+0x2c>)
    42e0:	47a0      	blx	r4
    42e2:	bd10      	pop	{r4, pc}
    42e4:	200030f6 	.word	0x200030f6
    42e8:	200030f8 	.word	0x200030f8
    42ec:	2000016c 	.word	0x2000016c
    42f0:	2000016e 	.word	0x2000016e
    42f4:	00004209 	.word	0x00004209

000042f8 <LCD_Write_Bus>:
	fillRect(0,0,799,489);
		
}

void LCD_Write_Bus(char VH, char VL)
{
    42f8:	b410      	push	{r4}
	REG_PORT_OUTCLR1 = 0x0000ffff;
    42fa:	4c07      	ldr	r4, [pc, #28]	; (4318 <LCD_Write_Bus+0x20>)
    42fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
    4300:	6023      	str	r3, [r4, #0]
	REG_PORT_OUTSET1 = (VH << 8) | VL;
    4302:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
    4306:	4b05      	ldr	r3, [pc, #20]	; (431c <LCD_Write_Bus+0x24>)
    4308:	6019      	str	r1, [r3, #0]
	REG_PORT_OUTCLR1 = LCD_WR;
    430a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    430e:	6022      	str	r2, [r4, #0]
	REG_PORT_OUTSET1 = LCD_WR;
    4310:	601a      	str	r2, [r3, #0]
}
    4312:	bc10      	pop	{r4}
    4314:	4770      	bx	lr
    4316:	bf00      	nop
    4318:	41004494 	.word	0x41004494
    431c:	41004498 	.word	0x41004498

00004320 <LCD_Write_COM16>:

void LCD_Write_COM16(char VH, char VL)
{
    4320:	b508      	push	{r3, lr}
	REG_PORT_OUTCLR1 = LCD_DC;
    4322:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    4326:	4b02      	ldr	r3, [pc, #8]	; (4330 <LCD_Write_COM16+0x10>)
    4328:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(VH,VL);
    432a:	4b02      	ldr	r3, [pc, #8]	; (4334 <LCD_Write_COM16+0x14>)
    432c:	4798      	blx	r3
    432e:	bd08      	pop	{r3, pc}
    4330:	41004494 	.word	0x41004494
    4334:	000042f9 	.word	0x000042f9

00004338 <LCD_Write_DATA16>:
	REG_PORT_OUTCLR1 = LCD_DC;
	LCD_Write_Bus(0x00, VL);
}

void LCD_Write_DATA16(char VH, char VL)
{
    4338:	b508      	push	{r3, lr}
	REG_PORT_OUTSET1 = LCD_DC;
    433a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    433e:	4b02      	ldr	r3, [pc, #8]	; (4348 <LCD_Write_DATA16+0x10>)
    4340:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(VH,VL);
    4342:	4b02      	ldr	r3, [pc, #8]	; (434c <LCD_Write_DATA16+0x14>)
    4344:	4798      	blx	r3
    4346:	bd08      	pop	{r3, pc}
    4348:	41004498 	.word	0x41004498
    434c:	000042f9 	.word	0x000042f9

00004350 <LCD_Write_DATA8>:
}

void LCD_Write_DATA8(char VL)
{
    4350:	b508      	push	{r3, lr}
	REG_PORT_OUTSET1 = LCD_DC;
    4352:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    4356:	4b03      	ldr	r3, [pc, #12]	; (4364 <LCD_Write_DATA8+0x14>)
    4358:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(0x00, VL);
    435a:	4601      	mov	r1, r0
    435c:	2000      	movs	r0, #0
    435e:	4b02      	ldr	r3, [pc, #8]	; (4368 <LCD_Write_DATA8+0x18>)
    4360:	4798      	blx	r3
    4362:	bd08      	pop	{r3, pc}
    4364:	41004498 	.word	0x41004498
    4368:	000042f9 	.word	0x000042f9

0000436c <InitLCD>:
{
    436c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	REG_PORT_DIRSET1 = 0x0000ffff;		//LCD data bus, PB00 - PB15
    4370:	4b83      	ldr	r3, [pc, #524]	; (4580 <InitLCD+0x214>)
    4372:	f64f 77ff 	movw	r7, #65535	; 0xffff
    4376:	601f      	str	r7, [r3, #0]
	REG_PORT_DIRSET1 = LCD_Reset;
    4378:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    437c:	601d      	str	r5, [r3, #0]
	REG_PORT_DIRSET1 = LCD_CS;
    437e:	f44f 0680 	mov.w	r6, #4194304	; 0x400000
    4382:	601e      	str	r6, [r3, #0]
	REG_PORT_DIRSET1 = LCD_WR;
    4384:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    4388:	6018      	str	r0, [r3, #0]
	REG_PORT_DIRSET1 = LCD_DC;
    438a:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    438e:	6019      	str	r1, [r3, #0]
	REG_PORT_DIRSET1 = LCD_RD;
    4390:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    4394:	601a      	str	r2, [r3, #0]
	REG_PORT_OUTCLR1 = 0x0000ffff;
    4396:	4c7b      	ldr	r4, [pc, #492]	; (4584 <InitLCD+0x218>)
    4398:	6027      	str	r7, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_Reset;
    439a:	6025      	str	r5, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_CS;
    439c:	6026      	str	r6, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_WR;
    439e:	6020      	str	r0, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_DC;
    43a0:	6021      	str	r1, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_RD;
    43a2:	6022      	str	r2, [r4, #0]
	REG_PORT_DIRSET1 = PORT_PB16;
    43a4:	601a      	str	r2, [r3, #0]
	REG_PORT_OUTSET1 = PORT_PB16;
    43a6:	4f78      	ldr	r7, [pc, #480]	; (4588 <InitLCD+0x21c>)
    43a8:	603a      	str	r2, [r7, #0]
	REG_PORT_OUTSET1 = LCD_Reset;
    43aa:	603d      	str	r5, [r7, #0]
	delay_ms(5);
    43ac:	2005      	movs	r0, #5
    43ae:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 45a0 <InitLCD+0x234>
    43b2:	47c0      	blx	r8
	REG_PORT_OUTCLR1 = LCD_Reset;
    43b4:	6025      	str	r5, [r4, #0]
	delay_ms(5);
    43b6:	2005      	movs	r0, #5
    43b8:	47c0      	blx	r8
	REG_PORT_OUTSET1 = LCD_Reset;
    43ba:	603d      	str	r5, [r7, #0]
	REG_PORT_OUTCLR1 = LCD_CS;
    43bc:	6026      	str	r6, [r4, #0]
    43be:	4f73      	ldr	r7, [pc, #460]	; (458c <InitLCD+0x220>)
    43c0:	1e7c      	subs	r4, r7, #1
    43c2:	4e73      	ldr	r6, [pc, #460]	; (4590 <InitLCD+0x224>)
    43c4:	4d73      	ldr	r5, [pc, #460]	; (4594 <InitLCD+0x228>)
    43c6:	3745      	adds	r7, #69	; 0x45
		REG_PORT_OUTCLR1 = LCD_DC;
    43c8:	f8df b1b8 	ldr.w	fp, [pc, #440]	; 4584 <InitLCD+0x218>
    43cc:	f44f 0800 	mov.w	r8, #8388608	; 0x800000
    43d0:	46c2      	mov	sl, r8
		REG_PORT_OUTSET1 = LCD_DC;
    43d2:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 4588 <InitLCD+0x21c>
		REG_PORT_OUTCLR1 = LCD_DC;
    43d6:	f8cb a000 	str.w	sl, [fp]
		LCD_Write_COM16(belial[i],mulciber[i]);
    43da:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    43de:	f814 0f01 	ldrb.w	r0, [r4, #1]!
    43e2:	4b6d      	ldr	r3, [pc, #436]	; (4598 <InitLCD+0x22c>)
    43e4:	4798      	blx	r3
		REG_PORT_OUTSET1 = LCD_DC;
    43e6:	f8c9 8000 	str.w	r8, [r9]
		LCD_Write_DATA8(lucifer[i]);
    43ea:	f815 0f01 	ldrb.w	r0, [r5, #1]!
    43ee:	4b6b      	ldr	r3, [pc, #428]	; (459c <InitLCD+0x230>)
    43f0:	4798      	blx	r3
	for(int i = 0; i < 70; i++)
    43f2:	42bc      	cmp	r4, r7
    43f4:	d1ef      	bne.n	43d6 <InitLCD+0x6a>
    43f6:	25d1      	movs	r5, #209	; 0xd1
    43f8:	f8df a1b8 	ldr.w	sl, [pc, #440]	; 45b4 <InitLCD+0x248>
    43fc:	f10a 0933 	add.w	r9, sl, #51	; 0x33
			LCD_Write_COM16(k,0x00);
    4400:	f8df 8194 	ldr.w	r8, [pc, #404]	; 4598 <InitLCD+0x22c>
    4404:	f10a 34ff 	add.w	r4, sl, #4294967295
    4408:	2700      	movs	r7, #0
			LCD_Write_DATA8(beelzebub[l]);
    440a:	4e64      	ldr	r6, [pc, #400]	; (459c <InitLCD+0x230>)
			LCD_Write_COM16(k,0x00);
    440c:	4639      	mov	r1, r7
    440e:	4628      	mov	r0, r5
    4410:	47c0      	blx	r8
			LCD_Write_DATA8(beelzebub[l]);
    4412:	f814 0f01 	ldrb.w	r0, [r4, #1]!
    4416:	47b0      	blx	r6
		for(int l = 0; l < 52; l++)
    4418:	45a1      	cmp	r9, r4
    441a:	d1f7      	bne.n	440c <InitLCD+0xa0>
	for(char k = 0xD1; k < 0xD6; k++)
    441c:	3501      	adds	r5, #1
    441e:	b2ed      	uxtb	r5, r5
    4420:	2dd6      	cmp	r5, #214	; 0xd6
    4422:	d1ef      	bne.n	4404 <InitLCD+0x98>
	LCD_Write_COM16(0xF0, 0x00);LCD_Write_DATA8(0x55);
    4424:	2100      	movs	r1, #0
    4426:	20f0      	movs	r0, #240	; 0xf0
    4428:	4c5b      	ldr	r4, [pc, #364]	; (4598 <InitLCD+0x22c>)
    442a:	47a0      	blx	r4
    442c:	2055      	movs	r0, #85	; 0x55
    442e:	4d5b      	ldr	r5, [pc, #364]	; (459c <InitLCD+0x230>)
    4430:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x01);LCD_Write_DATA8(0xAA);	
    4432:	2101      	movs	r1, #1
    4434:	20f0      	movs	r0, #240	; 0xf0
    4436:	47a0      	blx	r4
    4438:	20aa      	movs	r0, #170	; 0xaa
    443a:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x02);LCD_Write_DATA8(0x52);	
    443c:	2102      	movs	r1, #2
    443e:	20f0      	movs	r0, #240	; 0xf0
    4440:	47a0      	blx	r4
    4442:	2052      	movs	r0, #82	; 0x52
    4444:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x03);LCD_Write_DATA8(0x08);	
    4446:	2103      	movs	r1, #3
    4448:	20f0      	movs	r0, #240	; 0xf0
    444a:	47a0      	blx	r4
    444c:	2008      	movs	r0, #8
    444e:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x04);LCD_Write_DATA8(0x00);	
    4450:	2104      	movs	r1, #4
    4452:	20f0      	movs	r0, #240	; 0xf0
    4454:	47a0      	blx	r4
    4456:	2000      	movs	r0, #0
    4458:	47a8      	blx	r5
	LCD_Write_COM16(0xB1, 0x00);LCD_Write_DATA8(0xCC);
    445a:	2100      	movs	r1, #0
    445c:	20b1      	movs	r0, #177	; 0xb1
    445e:	47a0      	blx	r4
    4460:	20cc      	movs	r0, #204	; 0xcc
    4462:	47a8      	blx	r5
	LCD_Write_COM16(0xB1, 0x01);LCD_Write_DATA8(0x00);	
    4464:	2101      	movs	r1, #1
    4466:	20b1      	movs	r0, #177	; 0xb1
    4468:	47a0      	blx	r4
    446a:	2000      	movs	r0, #0
    446c:	47a8      	blx	r5
	LCD_Write_COM16(0xB5, 0x00);LCD_Write_DATA8(0x50);	
    446e:	2100      	movs	r1, #0
    4470:	20b5      	movs	r0, #181	; 0xb5
    4472:	47a0      	blx	r4
    4474:	2050      	movs	r0, #80	; 0x50
    4476:	47a8      	blx	r5
	LCD_Write_COM16(0xB6, 0x00);LCD_Write_DATA8(0x05);
    4478:	2100      	movs	r1, #0
    447a:	20b6      	movs	r0, #182	; 0xb6
    447c:	47a0      	blx	r4
    447e:	2005      	movs	r0, #5
    4480:	47a8      	blx	r5
	LCD_Write_COM16(0xB7, 0x00);LCD_Write_DATA8(0x70);
    4482:	2100      	movs	r1, #0
    4484:	20b7      	movs	r0, #183	; 0xb7
    4486:	47a0      	blx	r4
    4488:	2070      	movs	r0, #112	; 0x70
    448a:	47a8      	blx	r5
	LCD_Write_COM16(0xB7, 0x01);LCD_Write_DATA8(0x70);
    448c:	2101      	movs	r1, #1
    448e:	20b7      	movs	r0, #183	; 0xb7
    4490:	47a0      	blx	r4
    4492:	2070      	movs	r0, #112	; 0x70
    4494:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x00);LCD_Write_DATA8(0x01);
    4496:	2100      	movs	r1, #0
    4498:	20b8      	movs	r0, #184	; 0xb8
    449a:	47a0      	blx	r4
    449c:	2001      	movs	r0, #1
    449e:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x01);LCD_Write_DATA8(0x03);
    44a0:	2101      	movs	r1, #1
    44a2:	20b8      	movs	r0, #184	; 0xb8
    44a4:	47a0      	blx	r4
    44a6:	2003      	movs	r0, #3
    44a8:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x02);LCD_Write_DATA8(0x03);
    44aa:	2102      	movs	r1, #2
    44ac:	20b8      	movs	r0, #184	; 0xb8
    44ae:	47a0      	blx	r4
    44b0:	2003      	movs	r0, #3
    44b2:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x03);LCD_Write_DATA8(0x03);	
    44b4:	2103      	movs	r1, #3
    44b6:	20b8      	movs	r0, #184	; 0xb8
    44b8:	47a0      	blx	r4
    44ba:	2003      	movs	r0, #3
    44bc:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x00);LCD_Write_DATA8(0x02);
    44be:	2100      	movs	r1, #0
    44c0:	20bc      	movs	r0, #188	; 0xbc
    44c2:	47a0      	blx	r4
    44c4:	2002      	movs	r0, #2
    44c6:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x01);LCD_Write_DATA8(0x00);
    44c8:	2101      	movs	r1, #1
    44ca:	20bc      	movs	r0, #188	; 0xbc
    44cc:	47a0      	blx	r4
    44ce:	2000      	movs	r0, #0
    44d0:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x02);LCD_Write_DATA8(0x00);
    44d2:	2102      	movs	r1, #2
    44d4:	20bc      	movs	r0, #188	; 0xbc
    44d6:	47a0      	blx	r4
    44d8:	2000      	movs	r0, #0
    44da:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x00);LCD_Write_DATA8(0xD0);
    44dc:	2100      	movs	r1, #0
    44de:	20c9      	movs	r0, #201	; 0xc9
    44e0:	47a0      	blx	r4
    44e2:	20d0      	movs	r0, #208	; 0xd0
    44e4:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x01);LCD_Write_DATA8(0x02);
    44e6:	2101      	movs	r1, #1
    44e8:	20c9      	movs	r0, #201	; 0xc9
    44ea:	47a0      	blx	r4
    44ec:	2002      	movs	r0, #2
    44ee:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x02);LCD_Write_DATA8(0x50);
    44f0:	2102      	movs	r1, #2
    44f2:	20c9      	movs	r0, #201	; 0xc9
    44f4:	47a0      	blx	r4
    44f6:	2050      	movs	r0, #80	; 0x50
    44f8:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x03);LCD_Write_DATA8(0x50);
    44fa:	2103      	movs	r1, #3
    44fc:	20c9      	movs	r0, #201	; 0xc9
    44fe:	47a0      	blx	r4
    4500:	2050      	movs	r0, #80	; 0x50
    4502:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x04);LCD_Write_DATA8(0x50);
    4504:	2104      	movs	r1, #4
    4506:	20c9      	movs	r0, #201	; 0xc9
    4508:	47a0      	blx	r4
    450a:	2050      	movs	r0, #80	; 0x50
    450c:	47a8      	blx	r5
	LCD_Write_COM16(0x35, 0x00);LCD_Write_DATA8(0x00);
    450e:	2100      	movs	r1, #0
    4510:	2035      	movs	r0, #53	; 0x35
    4512:	47a0      	blx	r4
    4514:	2000      	movs	r0, #0
    4516:	47a8      	blx	r5
	LCD_Write_COM16(0x3A, 0x00);LCD_Write_DATA8(0x55);
    4518:	2100      	movs	r1, #0
    451a:	203a      	movs	r0, #58	; 0x3a
    451c:	47a0      	blx	r4
    451e:	2055      	movs	r0, #85	; 0x55
    4520:	47a8      	blx	r5
	LCD_Write_COM16(0x36, 0x00);LCD_Write_DATA8(0xE2);  //This is the MADCTL register
    4522:	2100      	movs	r1, #0
    4524:	2036      	movs	r0, #54	; 0x36
    4526:	47a0      	blx	r4
    4528:	20e2      	movs	r0, #226	; 0xe2
    452a:	47a8      	blx	r5
  	LCD_Write_COM16(0x11,0x00);   //Start Up  
    452c:	2100      	movs	r1, #0
    452e:	2011      	movs	r0, #17
    4530:	47a0      	blx	r4
  	delay_ms(100);
    4532:	2064      	movs	r0, #100	; 0x64
    4534:	4e1a      	ldr	r6, [pc, #104]	; (45a0 <InitLCD+0x234>)
    4536:	47b0      	blx	r6
  	LCD_Write_COM16(0x29,0x00);   //Display On  
    4538:	2100      	movs	r1, #0
    453a:	2029      	movs	r0, #41	; 0x29
    453c:	47a0      	blx	r4
   	delay_ms(100);
    453e:	2064      	movs	r0, #100	; 0x64
    4540:	47b0      	blx	r6
	LCD_Write_COM16(0x51,0x00);LCD_Write_DATA8(0xFF);
    4542:	2100      	movs	r1, #0
    4544:	2051      	movs	r0, #81	; 0x51
    4546:	47a0      	blx	r4
    4548:	20ff      	movs	r0, #255	; 0xff
    454a:	47a8      	blx	r5
	REG_PORT_OUTSET1 = LCD_CS;
    454c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    4550:	4b0d      	ldr	r3, [pc, #52]	; (4588 <InitLCD+0x21c>)
    4552:	601a      	str	r2, [r3, #0]
	clrScr();
    4554:	4b13      	ldr	r3, [pc, #76]	; (45a4 <InitLCD+0x238>)
    4556:	4798      	blx	r3
	setColorRGB(0,0,0);
    4558:	2200      	movs	r2, #0
    455a:	4611      	mov	r1, r2
    455c:	4610      	mov	r0, r2
    455e:	4b12      	ldr	r3, [pc, #72]	; (45a8 <InitLCD+0x23c>)
    4560:	4798      	blx	r3
	setBackColorRGB(0, 0, 0);
    4562:	2200      	movs	r2, #0
    4564:	4611      	mov	r1, r2
    4566:	4610      	mov	r0, r2
    4568:	4b10      	ldr	r3, [pc, #64]	; (45ac <InitLCD+0x240>)
    456a:	4798      	blx	r3
	fillRect(0,0,799,489);
    456c:	f240 13e9 	movw	r3, #489	; 0x1e9
    4570:	f240 321f 	movw	r2, #799	; 0x31f
    4574:	2100      	movs	r1, #0
    4576:	4608      	mov	r0, r1
    4578:	4c0d      	ldr	r4, [pc, #52]	; (45b0 <InitLCD+0x244>)
    457a:	47a0      	blx	r4
    457c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4580:	41004488 	.word	0x41004488
    4584:	41004494 	.word	0x41004494
    4588:	41004498 	.word	0x41004498
    458c:	00008074 	.word	0x00008074
    4590:	00008103 	.word	0x00008103
    4594:	000080bb 	.word	0x000080bb
    4598:	00004321 	.word	0x00004321
    459c:	00004351 	.word	0x00004351
    45a0:	00001cb5 	.word	0x00001cb5
    45a4:	000042a1 	.word	0x000042a1
    45a8:	000040cd 	.word	0x000040cd
    45ac:	000040f1 	.word	0x000040f1
    45b0:	00004209 	.word	0x00004209
    45b4:	00008040 	.word	0x00008040

000045b8 <usart_read_callback>:
	SysTick_Config(SystemCoreClock/1000);
	system_interrupt_enable(SYSTEM_INTERRUPT_SYSTICK);
}

void usart_read_callback(struct usart_module *const usart_module)
{
    45b8:	b510      	push	{r4, lr}
	// Read one character from the UART.
	//We can only use this function because it's non-blocking
	//and we can only read one character because reading > 1 means
	//it doesn't complete until _all_ characters are read.
	
	usart_read_buffer_job(&usart_instance, (uint8_t*)&rx_buf, 1);
    45ba:	4c06      	ldr	r4, [pc, #24]	; (45d4 <usart_read_callback+0x1c>)
    45bc:	2201      	movs	r2, #1
    45be:	4621      	mov	r1, r4
    45c0:	4805      	ldr	r0, [pc, #20]	; (45d8 <usart_read_callback+0x20>)
    45c2:	4b06      	ldr	r3, [pc, #24]	; (45dc <usart_read_callback+0x24>)
    45c4:	4798      	blx	r3
	
	//stuff that ONE CHARACTER into the circular FIFO buffer
	ring_put(ouroboros, rx_buf);
    45c6:	7821      	ldrb	r1, [r4, #0]
    45c8:	4b05      	ldr	r3, [pc, #20]	; (45e0 <usart_read_callback+0x28>)
    45ca:	6818      	ldr	r0, [r3, #0]
    45cc:	4b05      	ldr	r3, [pc, #20]	; (45e4 <usart_read_callback+0x2c>)
    45ce:	4798      	blx	r3
    45d0:	bd10      	pop	{r4, pc}
    45d2:	bf00      	nop
    45d4:	200030fc 	.word	0x200030fc
    45d8:	200003bc 	.word	0x200003bc
    45dc:	00002b9d 	.word	0x00002b9d
    45e0:	20000390 	.word	0x20000390
    45e4:	0000014b 	.word	0x0000014b

000045e8 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    45e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    45ea:	b083      	sub	sp, #12
    45ec:	4606      	mov	r6, r0
    45ee:	460f      	mov	r7, r1
	uint16_t temp = 0;
    45f0:	ac02      	add	r4, sp, #8
    45f2:	2300      	movs	r3, #0
    45f4:	f824 3d02 	strh.w	r3, [r4, #-2]!

	while(STATUS_OK != usart_read_wait(module, &temp));
    45f8:	4d05      	ldr	r5, [pc, #20]	; (4610 <usart_serial_getchar+0x28>)
    45fa:	4621      	mov	r1, r4
    45fc:	4630      	mov	r0, r6
    45fe:	47a8      	blx	r5
    4600:	2800      	cmp	r0, #0
    4602:	d1fa      	bne.n	45fa <usart_serial_getchar+0x12>

	*c = temp;
    4604:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    4608:	703b      	strb	r3, [r7, #0]
}
    460a:	b003      	add	sp, #12
    460c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    460e:	bf00      	nop
    4610:	00002abb 	.word	0x00002abb

00004614 <usart_serial_putchar>:
{
    4614:	b570      	push	{r4, r5, r6, lr}
    4616:	4606      	mov	r6, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    4618:	460d      	mov	r5, r1
    461a:	4c03      	ldr	r4, [pc, #12]	; (4628 <usart_serial_putchar+0x14>)
    461c:	4629      	mov	r1, r5
    461e:	4630      	mov	r0, r6
    4620:	47a0      	blx	r4
    4622:	2800      	cmp	r0, #0
    4624:	d1fa      	bne.n	461c <usart_serial_putchar+0x8>
}
    4626:	bd70      	pop	{r4, r5, r6, pc}
    4628:	00002a99 	.word	0x00002a99

0000462c <SysTick_Handler>:
	ul_tickcount++;
    462c:	4a02      	ldr	r2, [pc, #8]	; (4638 <SysTick_Handler+0xc>)
    462e:	8813      	ldrh	r3, [r2, #0]
    4630:	3301      	adds	r3, #1
    4632:	8013      	strh	r3, [r2, #0]
    4634:	4770      	bx	lr
    4636:	bf00      	nop
    4638:	200002f6 	.word	0x200002f6

0000463c <conf_systick>:
	SysTick_Config(SystemCoreClock/1000);
    463c:	4b0d      	ldr	r3, [pc, #52]	; (4674 <conf_systick+0x38>)
    463e:	681b      	ldr	r3, [r3, #0]
    4640:	4a0d      	ldr	r2, [pc, #52]	; (4678 <conf_systick+0x3c>)
    4642:	fba2 2303 	umull	r2, r3, r2, r3
    4646:	099b      	lsrs	r3, r3, #6
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    4648:	3b01      	subs	r3, #1
    464a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    464e:	d20c      	bcs.n	466a <conf_systick+0x2e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    4650:	4a0a      	ldr	r2, [pc, #40]	; (467c <conf_systick+0x40>)
    4652:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    4654:	490a      	ldr	r1, [pc, #40]	; (4680 <conf_systick+0x44>)
    4656:	6a0b      	ldr	r3, [r1, #32]
    4658:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    465c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    4660:	620b      	str	r3, [r1, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    4662:	2300      	movs	r3, #0
    4664:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    4666:	2307      	movs	r3, #7
    4668:	6013      	str	r3, [r2, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    466a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    466e:	4b05      	ldr	r3, [pc, #20]	; (4684 <conf_systick+0x48>)
    4670:	601a      	str	r2, [r3, #0]
    4672:	4770      	bx	lr
    4674:	20000024 	.word	0x20000024
    4678:	10624dd3 	.word	0x10624dd3
    467c:	e000e010 	.word	0xe000e010
    4680:	e000ed00 	.word	0xe000ed00
    4684:	e000e100 	.word	0xe000e100

00004688 <configure_usart>:

/**************************SERCOM STUFF*******************************/


void configure_usart(void)
{
    4688:	b570      	push	{r4, r5, r6, lr}
    468a:	b090      	sub	sp, #64	; 0x40
	config->data_order       = USART_DATAORDER_LSB;
    468c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4690:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    4692:	2300      	movs	r3, #0
    4694:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    4696:	22ff      	movs	r2, #255	; 0xff
    4698:	f8ad 2008 	strh.w	r2, [sp, #8]
	config->stopbits         = USART_STOPBITS_1;
    469c:	f88d 300a 	strb.w	r3, [sp, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    46a0:	f88d 300b 	strb.w	r3, [sp, #11]
	config->baudrate         = 9600;
    46a4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
    46a8:	9208      	str	r2, [sp, #32]
	config->receiver_enable  = true;
    46aa:	2201      	movs	r2, #1
    46ac:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
	config->transmitter_enable = true;
    46b0:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
	config->clock_polarity_inverted = false;
    46b4:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
	config->use_external_clock = false;
    46b8:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
	config->ext_clock_freq   = 0;
    46bc:	930a      	str	r3, [sp, #40]	; 0x28
	config->run_in_standby   = false;
    46be:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	config->generator_source = GCLK_GENERATOR_0;
    46c2:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    46c6:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    46c8:	f8ad 3010 	strh.w	r3, [sp, #16]
	config->lin_slave_enable      = false;
    46cc:	f88d 301b 	strb.w	r3, [sp, #27]
	config->immediate_buffer_overflow_notification  = false;
    46d0:	f88d 3018 	strb.w	r3, [sp, #24]
	config->start_frame_detection_enable            = false;
    46d4:	f88d 301c 	strb.w	r3, [sp, #28]
	config->encoding_format_enable                  = false;
    46d8:	f88d 3019 	strb.w	r3, [sp, #25]
	config->receive_pulse_length                    = 19;
    46dc:	2213      	movs	r2, #19
    46de:	f88d 201a 	strb.w	r2, [sp, #26]
	config->collision_detection_enable              = false;
    46e2:	f88d 301d 	strb.w	r3, [sp, #29]
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);

	config_usart.baudrate    = 9600;
	config_usart.mux_setting = USART_RX_1_TX_0_XCK_1;
    46e6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    46ea:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = PINMUX_PA08D_SERCOM2_PAD0;
    46ec:	4b1f      	ldr	r3, [pc, #124]	; (476c <configure_usart+0xe4>)
    46ee:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = PINMUX_PA09D_SERCOM2_PAD1;
    46f0:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    46f4:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = PINMUX_UNUSED;
    46f6:	f04f 33ff 	mov.w	r3, #4294967295
    46fa:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = PINMUX_UNUSED;
    46fc:	930f      	str	r3, [sp, #60]	; 0x3c
	
	RTS on PAD2 and CTS on PAD3
	
	*/
	
	while (usart_init(&usart_instance, SERCOM2, &config_usart) != STATUS_OK) {
    46fe:	4e1c      	ldr	r6, [pc, #112]	; (4770 <configure_usart+0xe8>)
    4700:	4d1c      	ldr	r5, [pc, #112]	; (4774 <configure_usart+0xec>)
    4702:	4c1d      	ldr	r4, [pc, #116]	; (4778 <configure_usart+0xf0>)
    4704:	466a      	mov	r2, sp
    4706:	4631      	mov	r1, r6
    4708:	4628      	mov	r0, r5
    470a:	47a0      	blx	r4
    470c:	2800      	cmp	r0, #0
    470e:	d1f9      	bne.n	4704 <configure_usart+0x7c>
	stdio_base = (void *)module;
    4710:	4c18      	ldr	r4, [pc, #96]	; (4774 <configure_usart+0xec>)
    4712:	4b1a      	ldr	r3, [pc, #104]	; (477c <configure_usart+0xf4>)
    4714:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    4716:	4a1a      	ldr	r2, [pc, #104]	; (4780 <configure_usart+0xf8>)
    4718:	4b1a      	ldr	r3, [pc, #104]	; (4784 <configure_usart+0xfc>)
    471a:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    471c:	4a1a      	ldr	r2, [pc, #104]	; (4788 <configure_usart+0x100>)
    471e:	4b1b      	ldr	r3, [pc, #108]	; (478c <configure_usart+0x104>)
    4720:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    4722:	466a      	mov	r2, sp
    4724:	4912      	ldr	r1, [pc, #72]	; (4770 <configure_usart+0xe8>)
    4726:	4620      	mov	r0, r4
    4728:	4b13      	ldr	r3, [pc, #76]	; (4778 <configure_usart+0xf0>)
    472a:	4798      	blx	r3
	setbuf(stdout, NULL);
    472c:	4e18      	ldr	r6, [pc, #96]	; (4790 <configure_usart+0x108>)
    472e:	6833      	ldr	r3, [r6, #0]
    4730:	2100      	movs	r1, #0
    4732:	6898      	ldr	r0, [r3, #8]
    4734:	4d17      	ldr	r5, [pc, #92]	; (4794 <configure_usart+0x10c>)
    4736:	47a8      	blx	r5
	setbuf(stdin, NULL);
    4738:	6833      	ldr	r3, [r6, #0]
    473a:	2100      	movs	r1, #0
    473c:	6858      	ldr	r0, [r3, #4]
    473e:	47a8      	blx	r5
	SercomUsart *const usart_hw = &(module->hw->USART);
    4740:	6825      	ldr	r5, [r4, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    4742:	4628      	mov	r0, r5
    4744:	4b14      	ldr	r3, [pc, #80]	; (4798 <configure_usart+0x110>)
    4746:	4798      	blx	r3
    4748:	f000 001f 	and.w	r0, r0, #31
    474c:	2301      	movs	r3, #1
    474e:	fa03 f000 	lsl.w	r0, r3, r0
    4752:	4b12      	ldr	r3, [pc, #72]	; (479c <configure_usart+0x114>)
    4754:	6018      	str	r0, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    4756:	6822      	ldr	r2, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
    4758:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    475a:	2b00      	cmp	r3, #0
    475c:	d1fc      	bne.n	4758 <configure_usart+0xd0>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    475e:	682b      	ldr	r3, [r5, #0]
    4760:	f043 0302 	orr.w	r3, r3, #2
    4764:	602b      	str	r3, [r5, #0]
	}
	stdio_serial_init(&usart_instance, SERCOM2, &config_usart);
	usart_enable(&usart_instance);
}
    4766:	b010      	add	sp, #64	; 0x40
    4768:	bd70      	pop	{r4, r5, r6, pc}
    476a:	bf00      	nop
    476c:	00080003 	.word	0x00080003
    4770:	42001000 	.word	0x42001000
    4774:	200003bc 	.word	0x200003bc
    4778:	0000278d 	.word	0x0000278d
    477c:	200003b8 	.word	0x200003b8
    4780:	00004615 	.word	0x00004615
    4784:	200003b4 	.word	0x200003b4
    4788:	000045e9 	.word	0x000045e9
    478c:	200003b0 	.word	0x200003b0
    4790:	200001a8 	.word	0x200001a8
    4794:	00004d75 	.word	0x00004d75
    4798:	000026ed 	.word	0x000026ed
    479c:	e000e100 	.word	0xe000e100

000047a0 <configure_usart_callbacks>:

void configure_usart_callbacks(void)
{
    47a0:	b510      	push	{r4, lr}
	usart_register_callback(&usart_instance,usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
    47a2:	4c06      	ldr	r4, [pc, #24]	; (47bc <configure_usart_callbacks+0x1c>)
    47a4:	2201      	movs	r2, #1
    47a6:	4906      	ldr	r1, [pc, #24]	; (47c0 <configure_usart_callbacks+0x20>)
    47a8:	4620      	mov	r0, r4
    47aa:	4b06      	ldr	r3, [pc, #24]	; (47c4 <configure_usart_callbacks+0x24>)
    47ac:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    47ae:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
    47b2:	f043 0302 	orr.w	r3, r3, #2
    47b6:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
    47ba:	bd10      	pop	{r4, pc}
    47bc:	200003bc 	.word	0x200003bc
    47c0:	000045b9 	.word	0x000045b9
    47c4:	00002b85 	.word	0x00002b85

000047c8 <configure_adc>:
	usart_enable(&usart_USB);
}
*/

void configure_adc(void)
{
    47c8:	b510      	push	{r4, lr}
    47ca:	b08c      	sub	sp, #48	; 0x30
	struct adc_config config_adc;
	adc_get_config_defaults(&config_adc);
    47cc:	4668      	mov	r0, sp
    47ce:	4b18      	ldr	r3, [pc, #96]	; (4830 <configure_adc+0x68>)
    47d0:	4798      	blx	r3
	config_adc.clock_source = GCLK_GENERATOR_1;
    47d2:	2301      	movs	r3, #1
    47d4:	f88d 3000 	strb.w	r3, [sp]
	config_adc.clock_prescaler = ADC_CLOCK_PRESCALER_DIV16;
    47d8:	f44f 7300 	mov.w	r3, #512	; 0x200
    47dc:	f8ad 3002 	strh.w	r3, [sp, #2]
	config_adc.reference = ADC_REFERENCE_INT1V;
    47e0:	2300      	movs	r3, #0
    47e2:	f88d 3001 	strb.w	r3, [sp, #1]
	config_adc.positive_input = ADC_POSITIVE_INPUT_TEMP;
    47e6:	2318      	movs	r3, #24
    47e8:	f88d 300c 	strb.w	r3, [sp, #12]
	config_adc.negative_input = ADC_NEGATIVE_INPUT_GND;
    47ec:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    47f0:	f8ad 300e 	strh.w	r3, [sp, #14]
	adc_init(&adc_instance, ADC, &config_adc);
    47f4:	4c0f      	ldr	r4, [pc, #60]	; (4834 <configure_adc+0x6c>)
    47f6:	466a      	mov	r2, sp
    47f8:	490f      	ldr	r1, [pc, #60]	; (4838 <configure_adc+0x70>)
    47fa:	4620      	mov	r0, r4
    47fc:	4b0f      	ldr	r3, [pc, #60]	; (483c <configure_adc+0x74>)
    47fe:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    4800:	6823      	ldr	r3, [r4, #0]
    4802:	7e5a      	ldrb	r2, [r3, #25]
	while (adc_is_syncing(module_inst)) {
    4804:	f012 0f80 	tst.w	r2, #128	; 0x80
    4808:	d1fb      	bne.n	4802 <configure_adc+0x3a>
    480a:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    480e:	4a0c      	ldr	r2, [pc, #48]	; (4840 <configure_adc+0x78>)
    4810:	6011      	str	r1, [r2, #0]
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    4812:	220f      	movs	r2, #15
    4814:	759a      	strb	r2, [r3, #22]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    4816:	761a      	strb	r2, [r3, #24]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    4818:	781a      	ldrb	r2, [r3, #0]
    481a:	f042 0202 	orr.w	r2, r2, #2
    481e:	701a      	strb	r2, [r3, #0]
	Adc *const adc_module = module_inst->hw;
    4820:	4b04      	ldr	r3, [pc, #16]	; (4834 <configure_adc+0x6c>)
    4822:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    4824:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    4826:	f013 0f80 	tst.w	r3, #128	; 0x80
    482a:	d1fb      	bne.n	4824 <configure_adc+0x5c>
	adc_enable(&adc_instance);
}
    482c:	b00c      	add	sp, #48	; 0x30
    482e:	bd10      	pop	{r4, pc}
    4830:	00001d91 	.word	0x00001d91
    4834:	20003100 	.word	0x20003100
    4838:	42004000 	.word	0x42004000
    483c:	00001dd1 	.word	0x00001dd1
    4840:	e000e100 	.word	0xe000e100

00004844 <setupBoard>:


void setupBoard(void)
{
    4844:	b510      	push	{r4, lr}
	uint16_t adcResult;
	uint16_t megaHurtz = (uint16_t)system_gclk_gen_get_hz(0);
    4846:	2000      	movs	r0, #0
    4848:	4b33      	ldr	r3, [pc, #204]	; (4918 <setupBoard+0xd4>)
    484a:	4798      	blx	r3
    484c:	b284      	uxth	r4, r0
	

	system_init();
    484e:	4b33      	ldr	r3, [pc, #204]	; (491c <setupBoard+0xd8>)
    4850:	4798      	blx	r3
	
	configure_adc();
    4852:	4b33      	ldr	r3, [pc, #204]	; (4920 <setupBoard+0xdc>)
    4854:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    4856:	4b33      	ldr	r3, [pc, #204]	; (4924 <setupBoard+0xe0>)
    4858:	6819      	ldr	r1, [r3, #0]
    485a:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    485c:	f013 0f80 	tst.w	r3, #128	; 0x80
    4860:	d1fb      	bne.n	485a <setupBoard+0x16>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    4862:	7b0b      	ldrb	r3, [r1, #12]
    4864:	f043 0302 	orr.w	r3, r3, #2
    4868:	730b      	strb	r3, [r1, #12]
    486a:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    486c:	f013 0f80 	tst.w	r3, #128	; 0x80
    4870:	d1fb      	bne.n	486a <setupBoard+0x26>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    4872:	7e0b      	ldrb	r3, [r1, #24]
    4874:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
    4876:	f003 0201 	and.w	r2, r3, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
    487a:	f013 0f04 	tst.w	r3, #4
		status_flags |= ADC_STATUS_WINDOW;
    487e:	bf18      	it	ne
    4880:	f042 0202 	orrne.w	r2, r2, #2
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    4884:	f013 0f02 	tst.w	r3, #2
		status_flags |= ADC_STATUS_OVERRUN;
    4888:	bf18      	it	ne
    488a:	f042 0204 	orrne.w	r2, r2, #4
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    488e:	f012 0f01 	tst.w	r2, #1
    4892:	d0ee      	beq.n	4872 <setupBoard+0x2e>
    4894:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    4896:	f013 0f80 	tst.w	r3, #128	; 0x80
    489a:	d1fb      	bne.n	4894 <setupBoard+0x50>
	*result = adc_module->RESULT.reg;
    489c:	8b48      	ldrh	r0, [r1, #26]
    489e:	b280      	uxth	r0, r0
	adc_module->INTFLAG.reg = int_flags;
    48a0:	2301      	movs	r3, #1
    48a2:	760b      	strb	r3, [r1, #24]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    48a4:	7e0b      	ldrb	r3, [r1, #24]
    48a6:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
    48a8:	f003 0201 	and.w	r2, r3, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
    48ac:	f013 0f04 	tst.w	r3, #4
		status_flags |= ADC_STATUS_WINDOW;
    48b0:	bf18      	it	ne
    48b2:	f042 0202 	orrne.w	r2, r2, #2
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    48b6:	f013 0f02 	tst.w	r3, #2
		status_flags |= ADC_STATUS_OVERRUN;
    48ba:	bf18      	it	ne
    48bc:	f042 0204 	orrne.w	r2, r2, #4
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    48c0:	f012 0f04 	tst.w	r2, #4
	adc_module->INTFLAG.reg = int_flags;
    48c4:	bf1c      	itt	ne
    48c6:	2302      	movne	r3, #2
    48c8:	760b      	strbne	r3, [r1, #24]
	do {
	/* Wait for conversion to be done and read out result */
	} while (adc_read(&adc_instance, &adcResult) == STATUS_BUSY);
	
	
	srand((adcResult ^ megaHurtz));
    48ca:	4060      	eors	r0, r4
    48cc:	4b16      	ldr	r3, [pc, #88]	; (4928 <setupBoard+0xe4>)
    48ce:	4798      	blx	r3
	
	delay_init();
    48d0:	4b16      	ldr	r3, [pc, #88]	; (492c <setupBoard+0xe8>)
    48d2:	4798      	blx	r3
	
	conf_systick();
    48d4:	4c16      	ldr	r4, [pc, #88]	; (4930 <setupBoard+0xec>)
    48d6:	47a0      	blx	r4
	and PAD1 (PI_RX) on pin 47.
	
	Also, this gives us the ability to bridge UARTs. THIS IS COOL
	
	*/
	configure_usart();
    48d8:	4b16      	ldr	r3, [pc, #88]	; (4934 <setupBoard+0xf0>)
    48da:	4798      	blx	r3
	configure_usart_callbacks();
    48dc:	4b16      	ldr	r3, [pc, #88]	; (4938 <setupBoard+0xf4>)
    48de:	4798      	blx	r3
	cpu_irq_enable();
    48e0:	2201      	movs	r2, #1
    48e2:	4b16      	ldr	r3, [pc, #88]	; (493c <setupBoard+0xf8>)
    48e4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    48e6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    48ea:	b662      	cpsie	i
	system_interrupt_enable_global();
	
	//I have no idea why I need to call this; it's in the callback and it
	//doesn't work without this line here. Remove this at your own peril.
	usart_read_buffer_job(&usart_instance, (uint8_t*)&rx_buf, 1);
    48ec:	4914      	ldr	r1, [pc, #80]	; (4940 <setupBoard+0xfc>)
    48ee:	4815      	ldr	r0, [pc, #84]	; (4944 <setupBoard+0x100>)
    48f0:	4b15      	ldr	r3, [pc, #84]	; (4948 <setupBoard+0x104>)
    48f2:	4798      	blx	r3
	


	printf("\n\rSerial OK 9600 8N1\n\r");
    48f4:	4815      	ldr	r0, [pc, #84]	; (494c <setupBoard+0x108>)
    48f6:	4b16      	ldr	r3, [pc, #88]	; (4950 <setupBoard+0x10c>)
    48f8:	4798      	blx	r3

	
	InitLCD();
    48fa:	4b16      	ldr	r3, [pc, #88]	; (4954 <setupBoard+0x110>)
    48fc:	4798      	blx	r3
	splashScreen();
    48fe:	4b16      	ldr	r3, [pc, #88]	; (4958 <setupBoard+0x114>)
    4900:	4798      	blx	r3
			
	conf_systick();
    4902:	47a0      	blx	r4

	xCharPos=0;
    4904:	2300      	movs	r3, #0
    4906:	4a15      	ldr	r2, [pc, #84]	; (495c <setupBoard+0x118>)
    4908:	8013      	strh	r3, [r2, #0]
	yCharPos=0;
    490a:	4a15      	ldr	r2, [pc, #84]	; (4960 <setupBoard+0x11c>)
    490c:	8013      	strh	r3, [r2, #0]
	drawChar(0xFF);
    490e:	20ff      	movs	r0, #255	; 0xff
    4910:	4b14      	ldr	r3, [pc, #80]	; (4964 <setupBoard+0x120>)
    4912:	4798      	blx	r3
    4914:	bd10      	pop	{r4, pc}
    4916:	bf00      	nop
    4918:	00003265 	.word	0x00003265
    491c:	00003479 	.word	0x00003479
    4920:	000047c9 	.word	0x000047c9
    4924:	20003100 	.word	0x20003100
    4928:	00004c91 	.word	0x00004c91
    492c:	00001c75 	.word	0x00001c75
    4930:	0000463d 	.word	0x0000463d
    4934:	00004689 	.word	0x00004689
    4938:	000047a1 	.word	0x000047a1
    493c:	20000020 	.word	0x20000020
    4940:	200030fc 	.word	0x200030fc
    4944:	200003bc 	.word	0x200003bc
    4948:	00002b9d 	.word	0x00002b9d
    494c:	0000814c 	.word	0x0000814c
    4950:	00004c39 	.word	0x00004c39
    4954:	0000436d 	.word	0x0000436d
    4958:	000019f5 	.word	0x000019f5
    495c:	200002ec 	.word	0x200002ec
    4960:	200002ee 	.word	0x200002ee
    4964:	0000363d 	.word	0x0000363d

00004968 <main>:
{
    4968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	setupBoard();
    496a:	4b24      	ldr	r3, [pc, #144]	; (49fc <main+0x94>)
    496c:	4798      	blx	r3
	uint8_t * buffer  = malloc(UART_BUFFER_SIZE * sizeof(uint8_t));
    496e:	200a      	movs	r0, #10
    4970:	4b23      	ldr	r3, [pc, #140]	; (4a00 <main+0x98>)
    4972:	4798      	blx	r3
	ouroboros = ring_init(buffer, UART_BUFFER_SIZE);
    4974:	210a      	movs	r1, #10
    4976:	4b23      	ldr	r3, [pc, #140]	; (4a04 <main+0x9c>)
    4978:	4798      	blx	r3
    497a:	4b23      	ldr	r3, [pc, #140]	; (4a08 <main+0xa0>)
    497c:	6018      	str	r0, [r3, #0]
		if((ul_tickcount % (UINT16_MAX/4) == 0) && (funcLock == false))
    497e:	4c23      	ldr	r4, [pc, #140]	; (4a0c <main+0xa4>)
    4980:	4d23      	ldr	r5, [pc, #140]	; (4a10 <main+0xa8>)
		if((ul_tickcount % 200 == 0) && (funcLock == false))
    4982:	4e24      	ldr	r6, [pc, #144]	; (4a14 <main+0xac>)
    4984:	e015      	b.n	49b2 <main+0x4a>
    4986:	fba6 1302 	umull	r1, r3, r6, r2
    498a:	099b      	lsrs	r3, r3, #6
    498c:	21c8      	movs	r1, #200	; 0xc8
    498e:	fb01 2213 	mls	r2, r1, r3, r2
    4992:	b292      	uxth	r2, r2
    4994:	b96a      	cbnz	r2, 49b2 <main+0x4a>
    4996:	4b20      	ldr	r3, [pc, #128]	; (4a18 <main+0xb0>)
    4998:	781b      	ldrb	r3, [r3, #0]
    499a:	b953      	cbnz	r3, 49b2 <main+0x4a>
			funcLock = true;
    499c:	4f1e      	ldr	r7, [pc, #120]	; (4a18 <main+0xb0>)
    499e:	2301      	movs	r3, #1
    49a0:	703b      	strb	r3, [r7, #0]
			readKeyboard();
    49a2:	4b1e      	ldr	r3, [pc, #120]	; (4a1c <main+0xb4>)
    49a4:	4798      	blx	r3
			printKeyboardBuffer();
    49a6:	4b1e      	ldr	r3, [pc, #120]	; (4a20 <main+0xb8>)
    49a8:	4798      	blx	r3
			parseRXBuffer();
    49aa:	4b1e      	ldr	r3, [pc, #120]	; (4a24 <main+0xbc>)
    49ac:	4798      	blx	r3
			funcLock = false;
    49ae:	2300      	movs	r3, #0
    49b0:	703b      	strb	r3, [r7, #0]
		__WFI();
    49b2:	bf30      	wfi
		if((ul_tickcount % (UINT16_MAX/4) == 0) && (funcLock == false))
    49b4:	8822      	ldrh	r2, [r4, #0]
    49b6:	fba5 1302 	umull	r1, r3, r5, r2
    49ba:	1ad1      	subs	r1, r2, r3
    49bc:	eb03 0351 	add.w	r3, r3, r1, lsr #1
    49c0:	0b5b      	lsrs	r3, r3, #13
    49c2:	ebc3 3383 	rsb	r3, r3, r3, lsl #14
    49c6:	1ad3      	subs	r3, r2, r3
    49c8:	b29b      	uxth	r3, r3
    49ca:	2b00      	cmp	r3, #0
    49cc:	d1db      	bne.n	4986 <main+0x1e>
    49ce:	4b12      	ldr	r3, [pc, #72]	; (4a18 <main+0xb0>)
    49d0:	781b      	ldrb	r3, [r3, #0]
    49d2:	2b00      	cmp	r3, #0
    49d4:	d1ed      	bne.n	49b2 <main+0x4a>
			funcLock = true;
    49d6:	4f10      	ldr	r7, [pc, #64]	; (4a18 <main+0xb0>)
    49d8:	2301      	movs	r3, #1
    49da:	703b      	strb	r3, [r7, #0]
			blinkCursor();
    49dc:	4b12      	ldr	r3, [pc, #72]	; (4a28 <main+0xc0>)
    49de:	4798      	blx	r3
			funcLock = false;
    49e0:	2300      	movs	r3, #0
    49e2:	703b      	strb	r3, [r7, #0]
		if((ul_tickcount % 200 == 0) && (funcLock == false))
    49e4:	8822      	ldrh	r2, [r4, #0]
    49e6:	fba6 1302 	umull	r1, r3, r6, r2
    49ea:	099b      	lsrs	r3, r3, #6
    49ec:	21c8      	movs	r1, #200	; 0xc8
    49ee:	fb01 2313 	mls	r3, r1, r3, r2
    49f2:	b29b      	uxth	r3, r3
    49f4:	2b00      	cmp	r3, #0
    49f6:	d0d1      	beq.n	499c <main+0x34>
    49f8:	e7db      	b.n	49b2 <main+0x4a>
    49fa:	bf00      	nop
    49fc:	00004845 	.word	0x00004845
    4a00:	00004aa9 	.word	0x00004aa9
    4a04:	00000121 	.word	0x00000121
    4a08:	20000390 	.word	0x20000390
    4a0c:	200002f6 	.word	0x200002f6
    4a10:	00040011 	.word	0x00040011
    4a14:	51eb851f 	.word	0x51eb851f
    4a18:	200002f4 	.word	0x200002f4
    4a1c:	00003ef5 	.word	0x00003ef5
    4a20:	00003b61 	.word	0x00003b61
    4a24:	00001c25 	.word	0x00001c25
    4a28:	000037ed 	.word	0x000037ed

00004a2c <__libc_init_array>:
    4a2c:	b570      	push	{r4, r5, r6, lr}
    4a2e:	4e0d      	ldr	r6, [pc, #52]	; (4a64 <__libc_init_array+0x38>)
    4a30:	4c0d      	ldr	r4, [pc, #52]	; (4a68 <__libc_init_array+0x3c>)
    4a32:	1ba4      	subs	r4, r4, r6
    4a34:	10a4      	asrs	r4, r4, #2
    4a36:	2500      	movs	r5, #0
    4a38:	42a5      	cmp	r5, r4
    4a3a:	d109      	bne.n	4a50 <__libc_init_array+0x24>
    4a3c:	4e0b      	ldr	r6, [pc, #44]	; (4a6c <__libc_init_array+0x40>)
    4a3e:	4c0c      	ldr	r4, [pc, #48]	; (4a70 <__libc_init_array+0x44>)
    4a40:	f003 fbf0 	bl	8224 <_init>
    4a44:	1ba4      	subs	r4, r4, r6
    4a46:	10a4      	asrs	r4, r4, #2
    4a48:	2500      	movs	r5, #0
    4a4a:	42a5      	cmp	r5, r4
    4a4c:	d105      	bne.n	4a5a <__libc_init_array+0x2e>
    4a4e:	bd70      	pop	{r4, r5, r6, pc}
    4a50:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    4a54:	4798      	blx	r3
    4a56:	3501      	adds	r5, #1
    4a58:	e7ee      	b.n	4a38 <__libc_init_array+0xc>
    4a5a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    4a5e:	4798      	blx	r3
    4a60:	3501      	adds	r5, #1
    4a62:	e7f2      	b.n	4a4a <__libc_init_array+0x1e>
    4a64:	00008230 	.word	0x00008230
    4a68:	00008230 	.word	0x00008230
    4a6c:	00008230 	.word	0x00008230
    4a70:	00008234 	.word	0x00008234

00004a74 <__itoa>:
    4a74:	1e93      	subs	r3, r2, #2
    4a76:	2b22      	cmp	r3, #34	; 0x22
    4a78:	b510      	push	{r4, lr}
    4a7a:	460c      	mov	r4, r1
    4a7c:	d904      	bls.n	4a88 <__itoa+0x14>
    4a7e:	2300      	movs	r3, #0
    4a80:	700b      	strb	r3, [r1, #0]
    4a82:	461c      	mov	r4, r3
    4a84:	4620      	mov	r0, r4
    4a86:	bd10      	pop	{r4, pc}
    4a88:	2a0a      	cmp	r2, #10
    4a8a:	d109      	bne.n	4aa0 <__itoa+0x2c>
    4a8c:	2800      	cmp	r0, #0
    4a8e:	da07      	bge.n	4aa0 <__itoa+0x2c>
    4a90:	232d      	movs	r3, #45	; 0x2d
    4a92:	700b      	strb	r3, [r1, #0]
    4a94:	4240      	negs	r0, r0
    4a96:	2101      	movs	r1, #1
    4a98:	4421      	add	r1, r4
    4a9a:	f000 fa39 	bl	4f10 <__utoa>
    4a9e:	e7f1      	b.n	4a84 <__itoa+0x10>
    4aa0:	2100      	movs	r1, #0
    4aa2:	e7f9      	b.n	4a98 <__itoa+0x24>

00004aa4 <itoa>:
    4aa4:	f7ff bfe6 	b.w	4a74 <__itoa>

00004aa8 <malloc>:
    4aa8:	4b02      	ldr	r3, [pc, #8]	; (4ab4 <malloc+0xc>)
    4aaa:	4601      	mov	r1, r0
    4aac:	6818      	ldr	r0, [r3, #0]
    4aae:	f000 b865 	b.w	4b7c <_malloc_r>
    4ab2:	bf00      	nop
    4ab4:	200001a8 	.word	0x200001a8

00004ab8 <memcpy>:
    4ab8:	b510      	push	{r4, lr}
    4aba:	1e43      	subs	r3, r0, #1
    4abc:	440a      	add	r2, r1
    4abe:	4291      	cmp	r1, r2
    4ac0:	d100      	bne.n	4ac4 <memcpy+0xc>
    4ac2:	bd10      	pop	{r4, pc}
    4ac4:	f811 4b01 	ldrb.w	r4, [r1], #1
    4ac8:	f803 4f01 	strb.w	r4, [r3, #1]!
    4acc:	e7f7      	b.n	4abe <memcpy+0x6>

00004ace <memset>:
    4ace:	4402      	add	r2, r0
    4ad0:	4603      	mov	r3, r0
    4ad2:	4293      	cmp	r3, r2
    4ad4:	d100      	bne.n	4ad8 <memset+0xa>
    4ad6:	4770      	bx	lr
    4ad8:	f803 1b01 	strb.w	r1, [r3], #1
    4adc:	e7f9      	b.n	4ad2 <memset+0x4>
	...

00004ae0 <_free_r>:
    4ae0:	b538      	push	{r3, r4, r5, lr}
    4ae2:	4605      	mov	r5, r0
    4ae4:	2900      	cmp	r1, #0
    4ae6:	d045      	beq.n	4b74 <_free_r+0x94>
    4ae8:	f851 3c04 	ldr.w	r3, [r1, #-4]
    4aec:	1f0c      	subs	r4, r1, #4
    4aee:	2b00      	cmp	r3, #0
    4af0:	bfb8      	it	lt
    4af2:	18e4      	addlt	r4, r4, r3
    4af4:	f000 fc2c 	bl	5350 <__malloc_lock>
    4af8:	4a1f      	ldr	r2, [pc, #124]	; (4b78 <_free_r+0x98>)
    4afa:	6813      	ldr	r3, [r2, #0]
    4afc:	4610      	mov	r0, r2
    4afe:	b933      	cbnz	r3, 4b0e <_free_r+0x2e>
    4b00:	6063      	str	r3, [r4, #4]
    4b02:	6014      	str	r4, [r2, #0]
    4b04:	4628      	mov	r0, r5
    4b06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    4b0a:	f000 bc22 	b.w	5352 <__malloc_unlock>
    4b0e:	42a3      	cmp	r3, r4
    4b10:	d90c      	bls.n	4b2c <_free_r+0x4c>
    4b12:	6821      	ldr	r1, [r4, #0]
    4b14:	1862      	adds	r2, r4, r1
    4b16:	4293      	cmp	r3, r2
    4b18:	bf04      	itt	eq
    4b1a:	681a      	ldreq	r2, [r3, #0]
    4b1c:	685b      	ldreq	r3, [r3, #4]
    4b1e:	6063      	str	r3, [r4, #4]
    4b20:	bf04      	itt	eq
    4b22:	1852      	addeq	r2, r2, r1
    4b24:	6022      	streq	r2, [r4, #0]
    4b26:	6004      	str	r4, [r0, #0]
    4b28:	e7ec      	b.n	4b04 <_free_r+0x24>
    4b2a:	4613      	mov	r3, r2
    4b2c:	685a      	ldr	r2, [r3, #4]
    4b2e:	b10a      	cbz	r2, 4b34 <_free_r+0x54>
    4b30:	42a2      	cmp	r2, r4
    4b32:	d9fa      	bls.n	4b2a <_free_r+0x4a>
    4b34:	6819      	ldr	r1, [r3, #0]
    4b36:	1858      	adds	r0, r3, r1
    4b38:	42a0      	cmp	r0, r4
    4b3a:	d10b      	bne.n	4b54 <_free_r+0x74>
    4b3c:	6820      	ldr	r0, [r4, #0]
    4b3e:	4401      	add	r1, r0
    4b40:	1858      	adds	r0, r3, r1
    4b42:	4282      	cmp	r2, r0
    4b44:	6019      	str	r1, [r3, #0]
    4b46:	d1dd      	bne.n	4b04 <_free_r+0x24>
    4b48:	6810      	ldr	r0, [r2, #0]
    4b4a:	6852      	ldr	r2, [r2, #4]
    4b4c:	605a      	str	r2, [r3, #4]
    4b4e:	4401      	add	r1, r0
    4b50:	6019      	str	r1, [r3, #0]
    4b52:	e7d7      	b.n	4b04 <_free_r+0x24>
    4b54:	d902      	bls.n	4b5c <_free_r+0x7c>
    4b56:	230c      	movs	r3, #12
    4b58:	602b      	str	r3, [r5, #0]
    4b5a:	e7d3      	b.n	4b04 <_free_r+0x24>
    4b5c:	6820      	ldr	r0, [r4, #0]
    4b5e:	1821      	adds	r1, r4, r0
    4b60:	428a      	cmp	r2, r1
    4b62:	bf04      	itt	eq
    4b64:	6811      	ldreq	r1, [r2, #0]
    4b66:	6852      	ldreq	r2, [r2, #4]
    4b68:	6062      	str	r2, [r4, #4]
    4b6a:	bf04      	itt	eq
    4b6c:	1809      	addeq	r1, r1, r0
    4b6e:	6021      	streq	r1, [r4, #0]
    4b70:	605c      	str	r4, [r3, #4]
    4b72:	e7c7      	b.n	4b04 <_free_r+0x24>
    4b74:	bd38      	pop	{r3, r4, r5, pc}
    4b76:	bf00      	nop
    4b78:	200002f8 	.word	0x200002f8

00004b7c <_malloc_r>:
    4b7c:	b570      	push	{r4, r5, r6, lr}
    4b7e:	1ccd      	adds	r5, r1, #3
    4b80:	f025 0503 	bic.w	r5, r5, #3
    4b84:	3508      	adds	r5, #8
    4b86:	2d0c      	cmp	r5, #12
    4b88:	bf38      	it	cc
    4b8a:	250c      	movcc	r5, #12
    4b8c:	2d00      	cmp	r5, #0
    4b8e:	4606      	mov	r6, r0
    4b90:	db01      	blt.n	4b96 <_malloc_r+0x1a>
    4b92:	42a9      	cmp	r1, r5
    4b94:	d903      	bls.n	4b9e <_malloc_r+0x22>
    4b96:	230c      	movs	r3, #12
    4b98:	6033      	str	r3, [r6, #0]
    4b9a:	2000      	movs	r0, #0
    4b9c:	bd70      	pop	{r4, r5, r6, pc}
    4b9e:	f000 fbd7 	bl	5350 <__malloc_lock>
    4ba2:	4a23      	ldr	r2, [pc, #140]	; (4c30 <_malloc_r+0xb4>)
    4ba4:	6814      	ldr	r4, [r2, #0]
    4ba6:	4621      	mov	r1, r4
    4ba8:	b991      	cbnz	r1, 4bd0 <_malloc_r+0x54>
    4baa:	4c22      	ldr	r4, [pc, #136]	; (4c34 <_malloc_r+0xb8>)
    4bac:	6823      	ldr	r3, [r4, #0]
    4bae:	b91b      	cbnz	r3, 4bb8 <_malloc_r+0x3c>
    4bb0:	4630      	mov	r0, r6
    4bb2:	f000 f8cf 	bl	4d54 <_sbrk_r>
    4bb6:	6020      	str	r0, [r4, #0]
    4bb8:	4629      	mov	r1, r5
    4bba:	4630      	mov	r0, r6
    4bbc:	f000 f8ca 	bl	4d54 <_sbrk_r>
    4bc0:	1c43      	adds	r3, r0, #1
    4bc2:	d126      	bne.n	4c12 <_malloc_r+0x96>
    4bc4:	230c      	movs	r3, #12
    4bc6:	6033      	str	r3, [r6, #0]
    4bc8:	4630      	mov	r0, r6
    4bca:	f000 fbc2 	bl	5352 <__malloc_unlock>
    4bce:	e7e4      	b.n	4b9a <_malloc_r+0x1e>
    4bd0:	680b      	ldr	r3, [r1, #0]
    4bd2:	1b5b      	subs	r3, r3, r5
    4bd4:	d41a      	bmi.n	4c0c <_malloc_r+0x90>
    4bd6:	2b0b      	cmp	r3, #11
    4bd8:	d90f      	bls.n	4bfa <_malloc_r+0x7e>
    4bda:	600b      	str	r3, [r1, #0]
    4bdc:	50cd      	str	r5, [r1, r3]
    4bde:	18cc      	adds	r4, r1, r3
    4be0:	4630      	mov	r0, r6
    4be2:	f000 fbb6 	bl	5352 <__malloc_unlock>
    4be6:	f104 000b 	add.w	r0, r4, #11
    4bea:	1d23      	adds	r3, r4, #4
    4bec:	f020 0007 	bic.w	r0, r0, #7
    4bf0:	1ac3      	subs	r3, r0, r3
    4bf2:	d01b      	beq.n	4c2c <_malloc_r+0xb0>
    4bf4:	425a      	negs	r2, r3
    4bf6:	50e2      	str	r2, [r4, r3]
    4bf8:	bd70      	pop	{r4, r5, r6, pc}
    4bfa:	428c      	cmp	r4, r1
    4bfc:	bf0d      	iteet	eq
    4bfe:	6863      	ldreq	r3, [r4, #4]
    4c00:	684b      	ldrne	r3, [r1, #4]
    4c02:	6063      	strne	r3, [r4, #4]
    4c04:	6013      	streq	r3, [r2, #0]
    4c06:	bf18      	it	ne
    4c08:	460c      	movne	r4, r1
    4c0a:	e7e9      	b.n	4be0 <_malloc_r+0x64>
    4c0c:	460c      	mov	r4, r1
    4c0e:	6849      	ldr	r1, [r1, #4]
    4c10:	e7ca      	b.n	4ba8 <_malloc_r+0x2c>
    4c12:	1cc4      	adds	r4, r0, #3
    4c14:	f024 0403 	bic.w	r4, r4, #3
    4c18:	42a0      	cmp	r0, r4
    4c1a:	d005      	beq.n	4c28 <_malloc_r+0xac>
    4c1c:	1a21      	subs	r1, r4, r0
    4c1e:	4630      	mov	r0, r6
    4c20:	f000 f898 	bl	4d54 <_sbrk_r>
    4c24:	3001      	adds	r0, #1
    4c26:	d0cd      	beq.n	4bc4 <_malloc_r+0x48>
    4c28:	6025      	str	r5, [r4, #0]
    4c2a:	e7d9      	b.n	4be0 <_malloc_r+0x64>
    4c2c:	bd70      	pop	{r4, r5, r6, pc}
    4c2e:	bf00      	nop
    4c30:	200002f8 	.word	0x200002f8
    4c34:	200002fc 	.word	0x200002fc

00004c38 <iprintf>:
    4c38:	b40f      	push	{r0, r1, r2, r3}
    4c3a:	4b0a      	ldr	r3, [pc, #40]	; (4c64 <iprintf+0x2c>)
    4c3c:	b513      	push	{r0, r1, r4, lr}
    4c3e:	681c      	ldr	r4, [r3, #0]
    4c40:	b124      	cbz	r4, 4c4c <iprintf+0x14>
    4c42:	69a3      	ldr	r3, [r4, #24]
    4c44:	b913      	cbnz	r3, 4c4c <iprintf+0x14>
    4c46:	4620      	mov	r0, r4
    4c48:	f000 fa94 	bl	5174 <__sinit>
    4c4c:	ab05      	add	r3, sp, #20
    4c4e:	9a04      	ldr	r2, [sp, #16]
    4c50:	68a1      	ldr	r1, [r4, #8]
    4c52:	9301      	str	r3, [sp, #4]
    4c54:	4620      	mov	r0, r4
    4c56:	f000 fba5 	bl	53a4 <_vfiprintf_r>
    4c5a:	b002      	add	sp, #8
    4c5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4c60:	b004      	add	sp, #16
    4c62:	4770      	bx	lr
    4c64:	200001a8 	.word	0x200001a8

00004c68 <putchar>:
    4c68:	b538      	push	{r3, r4, r5, lr}
    4c6a:	4b08      	ldr	r3, [pc, #32]	; (4c8c <putchar+0x24>)
    4c6c:	681c      	ldr	r4, [r3, #0]
    4c6e:	4605      	mov	r5, r0
    4c70:	b124      	cbz	r4, 4c7c <putchar+0x14>
    4c72:	69a3      	ldr	r3, [r4, #24]
    4c74:	b913      	cbnz	r3, 4c7c <putchar+0x14>
    4c76:	4620      	mov	r0, r4
    4c78:	f000 fa7c 	bl	5174 <__sinit>
    4c7c:	68a2      	ldr	r2, [r4, #8]
    4c7e:	4629      	mov	r1, r5
    4c80:	4620      	mov	r0, r4
    4c82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    4c86:	f000 be39 	b.w	58fc <_putc_r>
    4c8a:	bf00      	nop
    4c8c:	200001a8 	.word	0x200001a8

00004c90 <srand>:
    4c90:	b538      	push	{r3, r4, r5, lr}
    4c92:	4b12      	ldr	r3, [pc, #72]	; (4cdc <srand+0x4c>)
    4c94:	681c      	ldr	r4, [r3, #0]
    4c96:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    4c98:	4605      	mov	r5, r0
    4c9a:	b9d3      	cbnz	r3, 4cd2 <srand+0x42>
    4c9c:	2018      	movs	r0, #24
    4c9e:	f7ff ff03 	bl	4aa8 <malloc>
    4ca2:	f243 330e 	movw	r3, #13070	; 0x330e
    4ca6:	63a0      	str	r0, [r4, #56]	; 0x38
    4ca8:	8003      	strh	r3, [r0, #0]
    4caa:	f64a 33cd 	movw	r3, #43981	; 0xabcd
    4cae:	8043      	strh	r3, [r0, #2]
    4cb0:	f241 2334 	movw	r3, #4660	; 0x1234
    4cb4:	8083      	strh	r3, [r0, #4]
    4cb6:	f24e 636d 	movw	r3, #58989	; 0xe66d
    4cba:	80c3      	strh	r3, [r0, #6]
    4cbc:	f64d 63ec 	movw	r3, #57068	; 0xdeec
    4cc0:	8103      	strh	r3, [r0, #8]
    4cc2:	2305      	movs	r3, #5
    4cc4:	8143      	strh	r3, [r0, #10]
    4cc6:	230b      	movs	r3, #11
    4cc8:	8183      	strh	r3, [r0, #12]
    4cca:	2201      	movs	r2, #1
    4ccc:	2300      	movs	r3, #0
    4cce:	e9c0 2304 	strd	r2, r3, [r0, #16]
    4cd2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    4cd4:	2200      	movs	r2, #0
    4cd6:	611d      	str	r5, [r3, #16]
    4cd8:	615a      	str	r2, [r3, #20]
    4cda:	bd38      	pop	{r3, r4, r5, pc}
    4cdc:	200001a8 	.word	0x200001a8

00004ce0 <rand>:
    4ce0:	4b19      	ldr	r3, [pc, #100]	; (4d48 <rand+0x68>)
    4ce2:	b510      	push	{r4, lr}
    4ce4:	681c      	ldr	r4, [r3, #0]
    4ce6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    4ce8:	b9d3      	cbnz	r3, 4d20 <rand+0x40>
    4cea:	2018      	movs	r0, #24
    4cec:	f7ff fedc 	bl	4aa8 <malloc>
    4cf0:	f243 330e 	movw	r3, #13070	; 0x330e
    4cf4:	63a0      	str	r0, [r4, #56]	; 0x38
    4cf6:	8003      	strh	r3, [r0, #0]
    4cf8:	f64a 33cd 	movw	r3, #43981	; 0xabcd
    4cfc:	8043      	strh	r3, [r0, #2]
    4cfe:	f241 2334 	movw	r3, #4660	; 0x1234
    4d02:	8083      	strh	r3, [r0, #4]
    4d04:	f24e 636d 	movw	r3, #58989	; 0xe66d
    4d08:	80c3      	strh	r3, [r0, #6]
    4d0a:	f64d 63ec 	movw	r3, #57068	; 0xdeec
    4d0e:	8103      	strh	r3, [r0, #8]
    4d10:	2305      	movs	r3, #5
    4d12:	8143      	strh	r3, [r0, #10]
    4d14:	230b      	movs	r3, #11
    4d16:	8183      	strh	r3, [r0, #12]
    4d18:	2201      	movs	r2, #1
    4d1a:	2300      	movs	r3, #0
    4d1c:	e9c0 2304 	strd	r2, r3, [r0, #16]
    4d20:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    4d22:	480a      	ldr	r0, [pc, #40]	; (4d4c <rand+0x6c>)
    4d24:	690a      	ldr	r2, [r1, #16]
    4d26:	694b      	ldr	r3, [r1, #20]
    4d28:	4c09      	ldr	r4, [pc, #36]	; (4d50 <rand+0x70>)
    4d2a:	4350      	muls	r0, r2
    4d2c:	fb04 0003 	mla	r0, r4, r3, r0
    4d30:	fba2 2304 	umull	r2, r3, r2, r4
    4d34:	3201      	adds	r2, #1
    4d36:	4403      	add	r3, r0
    4d38:	f143 0300 	adc.w	r3, r3, #0
    4d3c:	e9c1 2304 	strd	r2, r3, [r1, #16]
    4d40:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
    4d44:	bd10      	pop	{r4, pc}
    4d46:	bf00      	nop
    4d48:	200001a8 	.word	0x200001a8
    4d4c:	5851f42d 	.word	0x5851f42d
    4d50:	4c957f2d 	.word	0x4c957f2d

00004d54 <_sbrk_r>:
    4d54:	b538      	push	{r3, r4, r5, lr}
    4d56:	4c06      	ldr	r4, [pc, #24]	; (4d70 <_sbrk_r+0x1c>)
    4d58:	2300      	movs	r3, #0
    4d5a:	4605      	mov	r5, r0
    4d5c:	4608      	mov	r0, r1
    4d5e:	6023      	str	r3, [r4, #0]
    4d60:	f7fe fc4e 	bl	3600 <_sbrk>
    4d64:	1c43      	adds	r3, r0, #1
    4d66:	d102      	bne.n	4d6e <_sbrk_r+0x1a>
    4d68:	6823      	ldr	r3, [r4, #0]
    4d6a:	b103      	cbz	r3, 4d6e <_sbrk_r+0x1a>
    4d6c:	602b      	str	r3, [r5, #0]
    4d6e:	bd38      	pop	{r3, r4, r5, pc}
    4d70:	20003120 	.word	0x20003120

00004d74 <setbuf>:
    4d74:	2900      	cmp	r1, #0
    4d76:	f44f 6380 	mov.w	r3, #1024	; 0x400
    4d7a:	bf0c      	ite	eq
    4d7c:	2202      	moveq	r2, #2
    4d7e:	2200      	movne	r2, #0
    4d80:	f000 b800 	b.w	4d84 <setvbuf>

00004d84 <setvbuf>:
    4d84:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    4d88:	461d      	mov	r5, r3
    4d8a:	4b51      	ldr	r3, [pc, #324]	; (4ed0 <setvbuf+0x14c>)
    4d8c:	681e      	ldr	r6, [r3, #0]
    4d8e:	4604      	mov	r4, r0
    4d90:	460f      	mov	r7, r1
    4d92:	4690      	mov	r8, r2
    4d94:	b126      	cbz	r6, 4da0 <setvbuf+0x1c>
    4d96:	69b3      	ldr	r3, [r6, #24]
    4d98:	b913      	cbnz	r3, 4da0 <setvbuf+0x1c>
    4d9a:	4630      	mov	r0, r6
    4d9c:	f000 f9ea 	bl	5174 <__sinit>
    4da0:	4b4c      	ldr	r3, [pc, #304]	; (4ed4 <setvbuf+0x150>)
    4da2:	429c      	cmp	r4, r3
    4da4:	d152      	bne.n	4e4c <setvbuf+0xc8>
    4da6:	6874      	ldr	r4, [r6, #4]
    4da8:	f1b8 0f02 	cmp.w	r8, #2
    4dac:	d006      	beq.n	4dbc <setvbuf+0x38>
    4dae:	f1b8 0f01 	cmp.w	r8, #1
    4db2:	f200 8089 	bhi.w	4ec8 <setvbuf+0x144>
    4db6:	2d00      	cmp	r5, #0
    4db8:	f2c0 8086 	blt.w	4ec8 <setvbuf+0x144>
    4dbc:	4621      	mov	r1, r4
    4dbe:	4630      	mov	r0, r6
    4dc0:	f000 f96e 	bl	50a0 <_fflush_r>
    4dc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
    4dc6:	b141      	cbz	r1, 4dda <setvbuf+0x56>
    4dc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
    4dcc:	4299      	cmp	r1, r3
    4dce:	d002      	beq.n	4dd6 <setvbuf+0x52>
    4dd0:	4630      	mov	r0, r6
    4dd2:	f7ff fe85 	bl	4ae0 <_free_r>
    4dd6:	2300      	movs	r3, #0
    4dd8:	6363      	str	r3, [r4, #52]	; 0x34
    4dda:	2300      	movs	r3, #0
    4ddc:	61a3      	str	r3, [r4, #24]
    4dde:	6063      	str	r3, [r4, #4]
    4de0:	89a3      	ldrh	r3, [r4, #12]
    4de2:	061b      	lsls	r3, r3, #24
    4de4:	d503      	bpl.n	4dee <setvbuf+0x6a>
    4de6:	6921      	ldr	r1, [r4, #16]
    4de8:	4630      	mov	r0, r6
    4dea:	f7ff fe79 	bl	4ae0 <_free_r>
    4dee:	89a3      	ldrh	r3, [r4, #12]
    4df0:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
    4df4:	f023 0303 	bic.w	r3, r3, #3
    4df8:	f1b8 0f02 	cmp.w	r8, #2
    4dfc:	81a3      	strh	r3, [r4, #12]
    4dfe:	d05d      	beq.n	4ebc <setvbuf+0x138>
    4e00:	ab01      	add	r3, sp, #4
    4e02:	466a      	mov	r2, sp
    4e04:	4621      	mov	r1, r4
    4e06:	4630      	mov	r0, r6
    4e08:	f000 fa3e 	bl	5288 <__swhatbuf_r>
    4e0c:	89a3      	ldrh	r3, [r4, #12]
    4e0e:	4318      	orrs	r0, r3
    4e10:	81a0      	strh	r0, [r4, #12]
    4e12:	bb2d      	cbnz	r5, 4e60 <setvbuf+0xdc>
    4e14:	9d00      	ldr	r5, [sp, #0]
    4e16:	4628      	mov	r0, r5
    4e18:	f7ff fe46 	bl	4aa8 <malloc>
    4e1c:	4607      	mov	r7, r0
    4e1e:	2800      	cmp	r0, #0
    4e20:	d14e      	bne.n	4ec0 <setvbuf+0x13c>
    4e22:	f8dd 9000 	ldr.w	r9, [sp]
    4e26:	45a9      	cmp	r9, r5
    4e28:	d13c      	bne.n	4ea4 <setvbuf+0x120>
    4e2a:	f04f 30ff 	mov.w	r0, #4294967295
    4e2e:	89a3      	ldrh	r3, [r4, #12]
    4e30:	f043 0302 	orr.w	r3, r3, #2
    4e34:	81a3      	strh	r3, [r4, #12]
    4e36:	2300      	movs	r3, #0
    4e38:	60a3      	str	r3, [r4, #8]
    4e3a:	f104 0347 	add.w	r3, r4, #71	; 0x47
    4e3e:	6023      	str	r3, [r4, #0]
    4e40:	6123      	str	r3, [r4, #16]
    4e42:	2301      	movs	r3, #1
    4e44:	6163      	str	r3, [r4, #20]
    4e46:	b003      	add	sp, #12
    4e48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4e4c:	4b22      	ldr	r3, [pc, #136]	; (4ed8 <setvbuf+0x154>)
    4e4e:	429c      	cmp	r4, r3
    4e50:	d101      	bne.n	4e56 <setvbuf+0xd2>
    4e52:	68b4      	ldr	r4, [r6, #8]
    4e54:	e7a8      	b.n	4da8 <setvbuf+0x24>
    4e56:	4b21      	ldr	r3, [pc, #132]	; (4edc <setvbuf+0x158>)
    4e58:	429c      	cmp	r4, r3
    4e5a:	bf08      	it	eq
    4e5c:	68f4      	ldreq	r4, [r6, #12]
    4e5e:	e7a3      	b.n	4da8 <setvbuf+0x24>
    4e60:	2f00      	cmp	r7, #0
    4e62:	d0d8      	beq.n	4e16 <setvbuf+0x92>
    4e64:	69b3      	ldr	r3, [r6, #24]
    4e66:	b913      	cbnz	r3, 4e6e <setvbuf+0xea>
    4e68:	4630      	mov	r0, r6
    4e6a:	f000 f983 	bl	5174 <__sinit>
    4e6e:	f1b8 0f01 	cmp.w	r8, #1
    4e72:	bf08      	it	eq
    4e74:	89a3      	ldrheq	r3, [r4, #12]
    4e76:	6027      	str	r7, [r4, #0]
    4e78:	bf04      	itt	eq
    4e7a:	f043 0301 	orreq.w	r3, r3, #1
    4e7e:	81a3      	strheq	r3, [r4, #12]
    4e80:	89a3      	ldrh	r3, [r4, #12]
    4e82:	6127      	str	r7, [r4, #16]
    4e84:	f013 0008 	ands.w	r0, r3, #8
    4e88:	6165      	str	r5, [r4, #20]
    4e8a:	d01b      	beq.n	4ec4 <setvbuf+0x140>
    4e8c:	f013 0001 	ands.w	r0, r3, #1
    4e90:	bf18      	it	ne
    4e92:	426d      	negne	r5, r5
    4e94:	f04f 0300 	mov.w	r3, #0
    4e98:	bf1d      	ittte	ne
    4e9a:	60a3      	strne	r3, [r4, #8]
    4e9c:	61a5      	strne	r5, [r4, #24]
    4e9e:	4618      	movne	r0, r3
    4ea0:	60a5      	streq	r5, [r4, #8]
    4ea2:	e7d0      	b.n	4e46 <setvbuf+0xc2>
    4ea4:	4648      	mov	r0, r9
    4ea6:	f7ff fdff 	bl	4aa8 <malloc>
    4eaa:	4607      	mov	r7, r0
    4eac:	2800      	cmp	r0, #0
    4eae:	d0bc      	beq.n	4e2a <setvbuf+0xa6>
    4eb0:	89a3      	ldrh	r3, [r4, #12]
    4eb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    4eb6:	81a3      	strh	r3, [r4, #12]
    4eb8:	464d      	mov	r5, r9
    4eba:	e7d3      	b.n	4e64 <setvbuf+0xe0>
    4ebc:	2000      	movs	r0, #0
    4ebe:	e7b6      	b.n	4e2e <setvbuf+0xaa>
    4ec0:	46a9      	mov	r9, r5
    4ec2:	e7f5      	b.n	4eb0 <setvbuf+0x12c>
    4ec4:	60a0      	str	r0, [r4, #8]
    4ec6:	e7be      	b.n	4e46 <setvbuf+0xc2>
    4ec8:	f04f 30ff 	mov.w	r0, #4294967295
    4ecc:	e7bb      	b.n	4e46 <setvbuf+0xc2>
    4ece:	bf00      	nop
    4ed0:	200001a8 	.word	0x200001a8
    4ed4:	000081b0 	.word	0x000081b0
    4ed8:	000081d0 	.word	0x000081d0
    4edc:	00008190 	.word	0x00008190

00004ee0 <strcat>:
    4ee0:	b510      	push	{r4, lr}
    4ee2:	4602      	mov	r2, r0
    4ee4:	4613      	mov	r3, r2
    4ee6:	3201      	adds	r2, #1
    4ee8:	781c      	ldrb	r4, [r3, #0]
    4eea:	2c00      	cmp	r4, #0
    4eec:	d1fa      	bne.n	4ee4 <strcat+0x4>
    4eee:	3b01      	subs	r3, #1
    4ef0:	f811 2b01 	ldrb.w	r2, [r1], #1
    4ef4:	f803 2f01 	strb.w	r2, [r3, #1]!
    4ef8:	2a00      	cmp	r2, #0
    4efa:	d1f9      	bne.n	4ef0 <strcat+0x10>
    4efc:	bd10      	pop	{r4, pc}

00004efe <strlen>:
    4efe:	4603      	mov	r3, r0
    4f00:	f813 2b01 	ldrb.w	r2, [r3], #1
    4f04:	2a00      	cmp	r2, #0
    4f06:	d1fb      	bne.n	4f00 <strlen+0x2>
    4f08:	1a18      	subs	r0, r3, r0
    4f0a:	3801      	subs	r0, #1
    4f0c:	4770      	bx	lr
	...

00004f10 <__utoa>:
    4f10:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f12:	4c1e      	ldr	r4, [pc, #120]	; (4f8c <__utoa+0x7c>)
    4f14:	b08b      	sub	sp, #44	; 0x2c
    4f16:	4603      	mov	r3, r0
    4f18:	460f      	mov	r7, r1
    4f1a:	466d      	mov	r5, sp
    4f1c:	f104 0e20 	add.w	lr, r4, #32
    4f20:	6820      	ldr	r0, [r4, #0]
    4f22:	6861      	ldr	r1, [r4, #4]
    4f24:	462e      	mov	r6, r5
    4f26:	c603      	stmia	r6!, {r0, r1}
    4f28:	3408      	adds	r4, #8
    4f2a:	4574      	cmp	r4, lr
    4f2c:	4635      	mov	r5, r6
    4f2e:	d1f7      	bne.n	4f20 <__utoa+0x10>
    4f30:	7921      	ldrb	r1, [r4, #4]
    4f32:	7131      	strb	r1, [r6, #4]
    4f34:	1e91      	subs	r1, r2, #2
    4f36:	6820      	ldr	r0, [r4, #0]
    4f38:	6030      	str	r0, [r6, #0]
    4f3a:	2922      	cmp	r1, #34	; 0x22
    4f3c:	f04f 0100 	mov.w	r1, #0
    4f40:	d904      	bls.n	4f4c <__utoa+0x3c>
    4f42:	7039      	strb	r1, [r7, #0]
    4f44:	460f      	mov	r7, r1
    4f46:	4638      	mov	r0, r7
    4f48:	b00b      	add	sp, #44	; 0x2c
    4f4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4f4c:	1e78      	subs	r0, r7, #1
    4f4e:	4606      	mov	r6, r0
    4f50:	fbb3 f5f2 	udiv	r5, r3, r2
    4f54:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
    4f58:	fb02 3315 	mls	r3, r2, r5, r3
    4f5c:	4473      	add	r3, lr
    4f5e:	1c4c      	adds	r4, r1, #1
    4f60:	f813 3c28 	ldrb.w	r3, [r3, #-40]
    4f64:	f806 3f01 	strb.w	r3, [r6, #1]!
    4f68:	462b      	mov	r3, r5
    4f6a:	b965      	cbnz	r5, 4f86 <__utoa+0x76>
    4f6c:	553d      	strb	r5, [r7, r4]
    4f6e:	187a      	adds	r2, r7, r1
    4f70:	1acc      	subs	r4, r1, r3
    4f72:	42a3      	cmp	r3, r4
    4f74:	dae7      	bge.n	4f46 <__utoa+0x36>
    4f76:	7844      	ldrb	r4, [r0, #1]
    4f78:	7815      	ldrb	r5, [r2, #0]
    4f7a:	f800 5f01 	strb.w	r5, [r0, #1]!
    4f7e:	3301      	adds	r3, #1
    4f80:	f802 4901 	strb.w	r4, [r2], #-1
    4f84:	e7f4      	b.n	4f70 <__utoa+0x60>
    4f86:	4621      	mov	r1, r4
    4f88:	e7e2      	b.n	4f50 <__utoa+0x40>
    4f8a:	bf00      	nop
    4f8c:	00008168 	.word	0x00008168

00004f90 <__sflush_r>:
    4f90:	898a      	ldrh	r2, [r1, #12]
    4f92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4f96:	4605      	mov	r5, r0
    4f98:	0710      	lsls	r0, r2, #28
    4f9a:	460c      	mov	r4, r1
    4f9c:	d45a      	bmi.n	5054 <__sflush_r+0xc4>
    4f9e:	684b      	ldr	r3, [r1, #4]
    4fa0:	2b00      	cmp	r3, #0
    4fa2:	dc05      	bgt.n	4fb0 <__sflush_r+0x20>
    4fa4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    4fa6:	2b00      	cmp	r3, #0
    4fa8:	dc02      	bgt.n	4fb0 <__sflush_r+0x20>
    4faa:	2000      	movs	r0, #0
    4fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4fb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    4fb2:	2e00      	cmp	r6, #0
    4fb4:	d0f9      	beq.n	4faa <__sflush_r+0x1a>
    4fb6:	2300      	movs	r3, #0
    4fb8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    4fbc:	682f      	ldr	r7, [r5, #0]
    4fbe:	602b      	str	r3, [r5, #0]
    4fc0:	d033      	beq.n	502a <__sflush_r+0x9a>
    4fc2:	6d60      	ldr	r0, [r4, #84]	; 0x54
    4fc4:	89a3      	ldrh	r3, [r4, #12]
    4fc6:	075a      	lsls	r2, r3, #29
    4fc8:	d505      	bpl.n	4fd6 <__sflush_r+0x46>
    4fca:	6863      	ldr	r3, [r4, #4]
    4fcc:	1ac0      	subs	r0, r0, r3
    4fce:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4fd0:	b10b      	cbz	r3, 4fd6 <__sflush_r+0x46>
    4fd2:	6c23      	ldr	r3, [r4, #64]	; 0x40
    4fd4:	1ac0      	subs	r0, r0, r3
    4fd6:	2300      	movs	r3, #0
    4fd8:	4602      	mov	r2, r0
    4fda:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    4fdc:	6a21      	ldr	r1, [r4, #32]
    4fde:	4628      	mov	r0, r5
    4fe0:	47b0      	blx	r6
    4fe2:	1c43      	adds	r3, r0, #1
    4fe4:	89a3      	ldrh	r3, [r4, #12]
    4fe6:	d106      	bne.n	4ff6 <__sflush_r+0x66>
    4fe8:	6829      	ldr	r1, [r5, #0]
    4fea:	291d      	cmp	r1, #29
    4fec:	d84b      	bhi.n	5086 <__sflush_r+0xf6>
    4fee:	4a2b      	ldr	r2, [pc, #172]	; (509c <__sflush_r+0x10c>)
    4ff0:	40ca      	lsrs	r2, r1
    4ff2:	07d6      	lsls	r6, r2, #31
    4ff4:	d547      	bpl.n	5086 <__sflush_r+0xf6>
    4ff6:	2200      	movs	r2, #0
    4ff8:	6062      	str	r2, [r4, #4]
    4ffa:	04d9      	lsls	r1, r3, #19
    4ffc:	6922      	ldr	r2, [r4, #16]
    4ffe:	6022      	str	r2, [r4, #0]
    5000:	d504      	bpl.n	500c <__sflush_r+0x7c>
    5002:	1c42      	adds	r2, r0, #1
    5004:	d101      	bne.n	500a <__sflush_r+0x7a>
    5006:	682b      	ldr	r3, [r5, #0]
    5008:	b903      	cbnz	r3, 500c <__sflush_r+0x7c>
    500a:	6560      	str	r0, [r4, #84]	; 0x54
    500c:	6b61      	ldr	r1, [r4, #52]	; 0x34
    500e:	602f      	str	r7, [r5, #0]
    5010:	2900      	cmp	r1, #0
    5012:	d0ca      	beq.n	4faa <__sflush_r+0x1a>
    5014:	f104 0344 	add.w	r3, r4, #68	; 0x44
    5018:	4299      	cmp	r1, r3
    501a:	d002      	beq.n	5022 <__sflush_r+0x92>
    501c:	4628      	mov	r0, r5
    501e:	f7ff fd5f 	bl	4ae0 <_free_r>
    5022:	2000      	movs	r0, #0
    5024:	6360      	str	r0, [r4, #52]	; 0x34
    5026:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    502a:	6a21      	ldr	r1, [r4, #32]
    502c:	2301      	movs	r3, #1
    502e:	4628      	mov	r0, r5
    5030:	47b0      	blx	r6
    5032:	1c41      	adds	r1, r0, #1
    5034:	d1c6      	bne.n	4fc4 <__sflush_r+0x34>
    5036:	682b      	ldr	r3, [r5, #0]
    5038:	2b00      	cmp	r3, #0
    503a:	d0c3      	beq.n	4fc4 <__sflush_r+0x34>
    503c:	2b1d      	cmp	r3, #29
    503e:	d001      	beq.n	5044 <__sflush_r+0xb4>
    5040:	2b16      	cmp	r3, #22
    5042:	d101      	bne.n	5048 <__sflush_r+0xb8>
    5044:	602f      	str	r7, [r5, #0]
    5046:	e7b0      	b.n	4faa <__sflush_r+0x1a>
    5048:	89a3      	ldrh	r3, [r4, #12]
    504a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    504e:	81a3      	strh	r3, [r4, #12]
    5050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5054:	690f      	ldr	r7, [r1, #16]
    5056:	2f00      	cmp	r7, #0
    5058:	d0a7      	beq.n	4faa <__sflush_r+0x1a>
    505a:	0793      	lsls	r3, r2, #30
    505c:	680e      	ldr	r6, [r1, #0]
    505e:	bf08      	it	eq
    5060:	694b      	ldreq	r3, [r1, #20]
    5062:	600f      	str	r7, [r1, #0]
    5064:	bf18      	it	ne
    5066:	2300      	movne	r3, #0
    5068:	eba6 0807 	sub.w	r8, r6, r7
    506c:	608b      	str	r3, [r1, #8]
    506e:	f1b8 0f00 	cmp.w	r8, #0
    5072:	dd9a      	ble.n	4faa <__sflush_r+0x1a>
    5074:	4643      	mov	r3, r8
    5076:	463a      	mov	r2, r7
    5078:	6a21      	ldr	r1, [r4, #32]
    507a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    507c:	4628      	mov	r0, r5
    507e:	47b0      	blx	r6
    5080:	2800      	cmp	r0, #0
    5082:	dc07      	bgt.n	5094 <__sflush_r+0x104>
    5084:	89a3      	ldrh	r3, [r4, #12]
    5086:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    508a:	81a3      	strh	r3, [r4, #12]
    508c:	f04f 30ff 	mov.w	r0, #4294967295
    5090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5094:	4407      	add	r7, r0
    5096:	eba8 0800 	sub.w	r8, r8, r0
    509a:	e7e8      	b.n	506e <__sflush_r+0xde>
    509c:	20400001 	.word	0x20400001

000050a0 <_fflush_r>:
    50a0:	b538      	push	{r3, r4, r5, lr}
    50a2:	690b      	ldr	r3, [r1, #16]
    50a4:	4605      	mov	r5, r0
    50a6:	460c      	mov	r4, r1
    50a8:	b1db      	cbz	r3, 50e2 <_fflush_r+0x42>
    50aa:	b118      	cbz	r0, 50b4 <_fflush_r+0x14>
    50ac:	6983      	ldr	r3, [r0, #24]
    50ae:	b90b      	cbnz	r3, 50b4 <_fflush_r+0x14>
    50b0:	f000 f860 	bl	5174 <__sinit>
    50b4:	4b0c      	ldr	r3, [pc, #48]	; (50e8 <_fflush_r+0x48>)
    50b6:	429c      	cmp	r4, r3
    50b8:	d109      	bne.n	50ce <_fflush_r+0x2e>
    50ba:	686c      	ldr	r4, [r5, #4]
    50bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    50c0:	b17b      	cbz	r3, 50e2 <_fflush_r+0x42>
    50c2:	4621      	mov	r1, r4
    50c4:	4628      	mov	r0, r5
    50c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    50ca:	f7ff bf61 	b.w	4f90 <__sflush_r>
    50ce:	4b07      	ldr	r3, [pc, #28]	; (50ec <_fflush_r+0x4c>)
    50d0:	429c      	cmp	r4, r3
    50d2:	d101      	bne.n	50d8 <_fflush_r+0x38>
    50d4:	68ac      	ldr	r4, [r5, #8]
    50d6:	e7f1      	b.n	50bc <_fflush_r+0x1c>
    50d8:	4b05      	ldr	r3, [pc, #20]	; (50f0 <_fflush_r+0x50>)
    50da:	429c      	cmp	r4, r3
    50dc:	bf08      	it	eq
    50de:	68ec      	ldreq	r4, [r5, #12]
    50e0:	e7ec      	b.n	50bc <_fflush_r+0x1c>
    50e2:	2000      	movs	r0, #0
    50e4:	bd38      	pop	{r3, r4, r5, pc}
    50e6:	bf00      	nop
    50e8:	000081b0 	.word	0x000081b0
    50ec:	000081d0 	.word	0x000081d0
    50f0:	00008190 	.word	0x00008190

000050f4 <_cleanup_r>:
    50f4:	4901      	ldr	r1, [pc, #4]	; (50fc <_cleanup_r+0x8>)
    50f6:	f000 b8a9 	b.w	524c <_fwalk_reent>
    50fa:	bf00      	nop
    50fc:	000050a1 	.word	0x000050a1

00005100 <std.isra.0>:
    5100:	2300      	movs	r3, #0
    5102:	b510      	push	{r4, lr}
    5104:	4604      	mov	r4, r0
    5106:	6003      	str	r3, [r0, #0]
    5108:	6043      	str	r3, [r0, #4]
    510a:	6083      	str	r3, [r0, #8]
    510c:	8181      	strh	r1, [r0, #12]
    510e:	6643      	str	r3, [r0, #100]	; 0x64
    5110:	81c2      	strh	r2, [r0, #14]
    5112:	6103      	str	r3, [r0, #16]
    5114:	6143      	str	r3, [r0, #20]
    5116:	6183      	str	r3, [r0, #24]
    5118:	4619      	mov	r1, r3
    511a:	2208      	movs	r2, #8
    511c:	305c      	adds	r0, #92	; 0x5c
    511e:	f7ff fcd6 	bl	4ace <memset>
    5122:	4b05      	ldr	r3, [pc, #20]	; (5138 <std.isra.0+0x38>)
    5124:	6263      	str	r3, [r4, #36]	; 0x24
    5126:	4b05      	ldr	r3, [pc, #20]	; (513c <std.isra.0+0x3c>)
    5128:	62a3      	str	r3, [r4, #40]	; 0x28
    512a:	4b05      	ldr	r3, [pc, #20]	; (5140 <std.isra.0+0x40>)
    512c:	62e3      	str	r3, [r4, #44]	; 0x2c
    512e:	4b05      	ldr	r3, [pc, #20]	; (5144 <std.isra.0+0x44>)
    5130:	6224      	str	r4, [r4, #32]
    5132:	6323      	str	r3, [r4, #48]	; 0x30
    5134:	bd10      	pop	{r4, pc}
    5136:	bf00      	nop
    5138:	00005969 	.word	0x00005969
    513c:	0000598b 	.word	0x0000598b
    5140:	000059c3 	.word	0x000059c3
    5144:	000059e7 	.word	0x000059e7

00005148 <__sfmoreglue>:
    5148:	b570      	push	{r4, r5, r6, lr}
    514a:	1e4a      	subs	r2, r1, #1
    514c:	2568      	movs	r5, #104	; 0x68
    514e:	4355      	muls	r5, r2
    5150:	460e      	mov	r6, r1
    5152:	f105 0174 	add.w	r1, r5, #116	; 0x74
    5156:	f7ff fd11 	bl	4b7c <_malloc_r>
    515a:	4604      	mov	r4, r0
    515c:	b140      	cbz	r0, 5170 <__sfmoreglue+0x28>
    515e:	2100      	movs	r1, #0
    5160:	e880 0042 	stmia.w	r0, {r1, r6}
    5164:	300c      	adds	r0, #12
    5166:	60a0      	str	r0, [r4, #8]
    5168:	f105 0268 	add.w	r2, r5, #104	; 0x68
    516c:	f7ff fcaf 	bl	4ace <memset>
    5170:	4620      	mov	r0, r4
    5172:	bd70      	pop	{r4, r5, r6, pc}

00005174 <__sinit>:
    5174:	6983      	ldr	r3, [r0, #24]
    5176:	b510      	push	{r4, lr}
    5178:	4604      	mov	r4, r0
    517a:	bb33      	cbnz	r3, 51ca <__sinit+0x56>
    517c:	6483      	str	r3, [r0, #72]	; 0x48
    517e:	64c3      	str	r3, [r0, #76]	; 0x4c
    5180:	6503      	str	r3, [r0, #80]	; 0x50
    5182:	4b12      	ldr	r3, [pc, #72]	; (51cc <__sinit+0x58>)
    5184:	4a12      	ldr	r2, [pc, #72]	; (51d0 <__sinit+0x5c>)
    5186:	681b      	ldr	r3, [r3, #0]
    5188:	6282      	str	r2, [r0, #40]	; 0x28
    518a:	4298      	cmp	r0, r3
    518c:	bf04      	itt	eq
    518e:	2301      	moveq	r3, #1
    5190:	6183      	streq	r3, [r0, #24]
    5192:	f000 f81f 	bl	51d4 <__sfp>
    5196:	6060      	str	r0, [r4, #4]
    5198:	4620      	mov	r0, r4
    519a:	f000 f81b 	bl	51d4 <__sfp>
    519e:	60a0      	str	r0, [r4, #8]
    51a0:	4620      	mov	r0, r4
    51a2:	f000 f817 	bl	51d4 <__sfp>
    51a6:	2200      	movs	r2, #0
    51a8:	60e0      	str	r0, [r4, #12]
    51aa:	2104      	movs	r1, #4
    51ac:	6860      	ldr	r0, [r4, #4]
    51ae:	f7ff ffa7 	bl	5100 <std.isra.0>
    51b2:	2201      	movs	r2, #1
    51b4:	2109      	movs	r1, #9
    51b6:	68a0      	ldr	r0, [r4, #8]
    51b8:	f7ff ffa2 	bl	5100 <std.isra.0>
    51bc:	2202      	movs	r2, #2
    51be:	2112      	movs	r1, #18
    51c0:	68e0      	ldr	r0, [r4, #12]
    51c2:	f7ff ff9d 	bl	5100 <std.isra.0>
    51c6:	2301      	movs	r3, #1
    51c8:	61a3      	str	r3, [r4, #24]
    51ca:	bd10      	pop	{r4, pc}
    51cc:	00008164 	.word	0x00008164
    51d0:	000050f5 	.word	0x000050f5

000051d4 <__sfp>:
    51d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    51d6:	4b1c      	ldr	r3, [pc, #112]	; (5248 <__sfp+0x74>)
    51d8:	681e      	ldr	r6, [r3, #0]
    51da:	69b3      	ldr	r3, [r6, #24]
    51dc:	4607      	mov	r7, r0
    51de:	b913      	cbnz	r3, 51e6 <__sfp+0x12>
    51e0:	4630      	mov	r0, r6
    51e2:	f7ff ffc7 	bl	5174 <__sinit>
    51e6:	3648      	adds	r6, #72	; 0x48
    51e8:	68b4      	ldr	r4, [r6, #8]
    51ea:	6873      	ldr	r3, [r6, #4]
    51ec:	3b01      	subs	r3, #1
    51ee:	d503      	bpl.n	51f8 <__sfp+0x24>
    51f0:	6833      	ldr	r3, [r6, #0]
    51f2:	b133      	cbz	r3, 5202 <__sfp+0x2e>
    51f4:	6836      	ldr	r6, [r6, #0]
    51f6:	e7f7      	b.n	51e8 <__sfp+0x14>
    51f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    51fc:	b16d      	cbz	r5, 521a <__sfp+0x46>
    51fe:	3468      	adds	r4, #104	; 0x68
    5200:	e7f4      	b.n	51ec <__sfp+0x18>
    5202:	2104      	movs	r1, #4
    5204:	4638      	mov	r0, r7
    5206:	f7ff ff9f 	bl	5148 <__sfmoreglue>
    520a:	6030      	str	r0, [r6, #0]
    520c:	2800      	cmp	r0, #0
    520e:	d1f1      	bne.n	51f4 <__sfp+0x20>
    5210:	230c      	movs	r3, #12
    5212:	603b      	str	r3, [r7, #0]
    5214:	4604      	mov	r4, r0
    5216:	4620      	mov	r0, r4
    5218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    521a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    521e:	81e3      	strh	r3, [r4, #14]
    5220:	2301      	movs	r3, #1
    5222:	81a3      	strh	r3, [r4, #12]
    5224:	6665      	str	r5, [r4, #100]	; 0x64
    5226:	6025      	str	r5, [r4, #0]
    5228:	60a5      	str	r5, [r4, #8]
    522a:	6065      	str	r5, [r4, #4]
    522c:	6125      	str	r5, [r4, #16]
    522e:	6165      	str	r5, [r4, #20]
    5230:	61a5      	str	r5, [r4, #24]
    5232:	2208      	movs	r2, #8
    5234:	4629      	mov	r1, r5
    5236:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    523a:	f7ff fc48 	bl	4ace <memset>
    523e:	6365      	str	r5, [r4, #52]	; 0x34
    5240:	63a5      	str	r5, [r4, #56]	; 0x38
    5242:	64a5      	str	r5, [r4, #72]	; 0x48
    5244:	64e5      	str	r5, [r4, #76]	; 0x4c
    5246:	e7e6      	b.n	5216 <__sfp+0x42>
    5248:	00008164 	.word	0x00008164

0000524c <_fwalk_reent>:
    524c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5250:	4680      	mov	r8, r0
    5252:	4689      	mov	r9, r1
    5254:	f100 0448 	add.w	r4, r0, #72	; 0x48
    5258:	2600      	movs	r6, #0
    525a:	b914      	cbnz	r4, 5262 <_fwalk_reent+0x16>
    525c:	4630      	mov	r0, r6
    525e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5262:	68a5      	ldr	r5, [r4, #8]
    5264:	6867      	ldr	r7, [r4, #4]
    5266:	3f01      	subs	r7, #1
    5268:	d501      	bpl.n	526e <_fwalk_reent+0x22>
    526a:	6824      	ldr	r4, [r4, #0]
    526c:	e7f5      	b.n	525a <_fwalk_reent+0xe>
    526e:	89ab      	ldrh	r3, [r5, #12]
    5270:	2b01      	cmp	r3, #1
    5272:	d907      	bls.n	5284 <_fwalk_reent+0x38>
    5274:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    5278:	3301      	adds	r3, #1
    527a:	d003      	beq.n	5284 <_fwalk_reent+0x38>
    527c:	4629      	mov	r1, r5
    527e:	4640      	mov	r0, r8
    5280:	47c8      	blx	r9
    5282:	4306      	orrs	r6, r0
    5284:	3568      	adds	r5, #104	; 0x68
    5286:	e7ee      	b.n	5266 <_fwalk_reent+0x1a>

00005288 <__swhatbuf_r>:
    5288:	b570      	push	{r4, r5, r6, lr}
    528a:	460e      	mov	r6, r1
    528c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    5290:	2900      	cmp	r1, #0
    5292:	b090      	sub	sp, #64	; 0x40
    5294:	4614      	mov	r4, r2
    5296:	461d      	mov	r5, r3
    5298:	da07      	bge.n	52aa <__swhatbuf_r+0x22>
    529a:	2300      	movs	r3, #0
    529c:	602b      	str	r3, [r5, #0]
    529e:	89b3      	ldrh	r3, [r6, #12]
    52a0:	061a      	lsls	r2, r3, #24
    52a2:	d410      	bmi.n	52c6 <__swhatbuf_r+0x3e>
    52a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    52a8:	e00e      	b.n	52c8 <__swhatbuf_r+0x40>
    52aa:	aa01      	add	r2, sp, #4
    52ac:	f000 fc82 	bl	5bb4 <_fstat_r>
    52b0:	2800      	cmp	r0, #0
    52b2:	dbf2      	blt.n	529a <__swhatbuf_r+0x12>
    52b4:	9a02      	ldr	r2, [sp, #8]
    52b6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
    52ba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
    52be:	425a      	negs	r2, r3
    52c0:	415a      	adcs	r2, r3
    52c2:	602a      	str	r2, [r5, #0]
    52c4:	e7ee      	b.n	52a4 <__swhatbuf_r+0x1c>
    52c6:	2340      	movs	r3, #64	; 0x40
    52c8:	2000      	movs	r0, #0
    52ca:	6023      	str	r3, [r4, #0]
    52cc:	b010      	add	sp, #64	; 0x40
    52ce:	bd70      	pop	{r4, r5, r6, pc}

000052d0 <__smakebuf_r>:
    52d0:	898b      	ldrh	r3, [r1, #12]
    52d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
    52d4:	079d      	lsls	r5, r3, #30
    52d6:	4606      	mov	r6, r0
    52d8:	460c      	mov	r4, r1
    52da:	d507      	bpl.n	52ec <__smakebuf_r+0x1c>
    52dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
    52e0:	6023      	str	r3, [r4, #0]
    52e2:	6123      	str	r3, [r4, #16]
    52e4:	2301      	movs	r3, #1
    52e6:	6163      	str	r3, [r4, #20]
    52e8:	b002      	add	sp, #8
    52ea:	bd70      	pop	{r4, r5, r6, pc}
    52ec:	ab01      	add	r3, sp, #4
    52ee:	466a      	mov	r2, sp
    52f0:	f7ff ffca 	bl	5288 <__swhatbuf_r>
    52f4:	9900      	ldr	r1, [sp, #0]
    52f6:	4605      	mov	r5, r0
    52f8:	4630      	mov	r0, r6
    52fa:	f7ff fc3f 	bl	4b7c <_malloc_r>
    52fe:	b948      	cbnz	r0, 5314 <__smakebuf_r+0x44>
    5300:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    5304:	059a      	lsls	r2, r3, #22
    5306:	d4ef      	bmi.n	52e8 <__smakebuf_r+0x18>
    5308:	f023 0303 	bic.w	r3, r3, #3
    530c:	f043 0302 	orr.w	r3, r3, #2
    5310:	81a3      	strh	r3, [r4, #12]
    5312:	e7e3      	b.n	52dc <__smakebuf_r+0xc>
    5314:	4b0d      	ldr	r3, [pc, #52]	; (534c <__smakebuf_r+0x7c>)
    5316:	62b3      	str	r3, [r6, #40]	; 0x28
    5318:	89a3      	ldrh	r3, [r4, #12]
    531a:	6020      	str	r0, [r4, #0]
    531c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    5320:	81a3      	strh	r3, [r4, #12]
    5322:	9b00      	ldr	r3, [sp, #0]
    5324:	6163      	str	r3, [r4, #20]
    5326:	9b01      	ldr	r3, [sp, #4]
    5328:	6120      	str	r0, [r4, #16]
    532a:	b15b      	cbz	r3, 5344 <__smakebuf_r+0x74>
    532c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    5330:	4630      	mov	r0, r6
    5332:	f000 fc51 	bl	5bd8 <_isatty_r>
    5336:	b128      	cbz	r0, 5344 <__smakebuf_r+0x74>
    5338:	89a3      	ldrh	r3, [r4, #12]
    533a:	f023 0303 	bic.w	r3, r3, #3
    533e:	f043 0301 	orr.w	r3, r3, #1
    5342:	81a3      	strh	r3, [r4, #12]
    5344:	89a3      	ldrh	r3, [r4, #12]
    5346:	431d      	orrs	r5, r3
    5348:	81a5      	strh	r5, [r4, #12]
    534a:	e7cd      	b.n	52e8 <__smakebuf_r+0x18>
    534c:	000050f5 	.word	0x000050f5

00005350 <__malloc_lock>:
    5350:	4770      	bx	lr

00005352 <__malloc_unlock>:
    5352:	4770      	bx	lr

00005354 <__sfputc_r>:
    5354:	6893      	ldr	r3, [r2, #8]
    5356:	3b01      	subs	r3, #1
    5358:	2b00      	cmp	r3, #0
    535a:	b410      	push	{r4}
    535c:	6093      	str	r3, [r2, #8]
    535e:	da08      	bge.n	5372 <__sfputc_r+0x1e>
    5360:	6994      	ldr	r4, [r2, #24]
    5362:	42a3      	cmp	r3, r4
    5364:	db02      	blt.n	536c <__sfputc_r+0x18>
    5366:	b2cb      	uxtb	r3, r1
    5368:	2b0a      	cmp	r3, #10
    536a:	d102      	bne.n	5372 <__sfputc_r+0x1e>
    536c:	bc10      	pop	{r4}
    536e:	f000 bb3f 	b.w	59f0 <__swbuf_r>
    5372:	6813      	ldr	r3, [r2, #0]
    5374:	1c58      	adds	r0, r3, #1
    5376:	6010      	str	r0, [r2, #0]
    5378:	7019      	strb	r1, [r3, #0]
    537a:	b2c8      	uxtb	r0, r1
    537c:	bc10      	pop	{r4}
    537e:	4770      	bx	lr

00005380 <__sfputs_r>:
    5380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5382:	4606      	mov	r6, r0
    5384:	460f      	mov	r7, r1
    5386:	4614      	mov	r4, r2
    5388:	18d5      	adds	r5, r2, r3
    538a:	42ac      	cmp	r4, r5
    538c:	d101      	bne.n	5392 <__sfputs_r+0x12>
    538e:	2000      	movs	r0, #0
    5390:	e007      	b.n	53a2 <__sfputs_r+0x22>
    5392:	463a      	mov	r2, r7
    5394:	f814 1b01 	ldrb.w	r1, [r4], #1
    5398:	4630      	mov	r0, r6
    539a:	f7ff ffdb 	bl	5354 <__sfputc_r>
    539e:	1c43      	adds	r3, r0, #1
    53a0:	d1f3      	bne.n	538a <__sfputs_r+0xa>
    53a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000053a4 <_vfiprintf_r>:
    53a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    53a8:	b09d      	sub	sp, #116	; 0x74
    53aa:	460c      	mov	r4, r1
    53ac:	4617      	mov	r7, r2
    53ae:	9303      	str	r3, [sp, #12]
    53b0:	4606      	mov	r6, r0
    53b2:	b118      	cbz	r0, 53bc <_vfiprintf_r+0x18>
    53b4:	6983      	ldr	r3, [r0, #24]
    53b6:	b90b      	cbnz	r3, 53bc <_vfiprintf_r+0x18>
    53b8:	f7ff fedc 	bl	5174 <__sinit>
    53bc:	4b7c      	ldr	r3, [pc, #496]	; (55b0 <_vfiprintf_r+0x20c>)
    53be:	429c      	cmp	r4, r3
    53c0:	d157      	bne.n	5472 <_vfiprintf_r+0xce>
    53c2:	6874      	ldr	r4, [r6, #4]
    53c4:	89a3      	ldrh	r3, [r4, #12]
    53c6:	0718      	lsls	r0, r3, #28
    53c8:	d55d      	bpl.n	5486 <_vfiprintf_r+0xe2>
    53ca:	6923      	ldr	r3, [r4, #16]
    53cc:	2b00      	cmp	r3, #0
    53ce:	d05a      	beq.n	5486 <_vfiprintf_r+0xe2>
    53d0:	2300      	movs	r3, #0
    53d2:	9309      	str	r3, [sp, #36]	; 0x24
    53d4:	2320      	movs	r3, #32
    53d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    53da:	2330      	movs	r3, #48	; 0x30
    53dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    53e0:	f04f 0b01 	mov.w	fp, #1
    53e4:	46b8      	mov	r8, r7
    53e6:	4645      	mov	r5, r8
    53e8:	f815 3b01 	ldrb.w	r3, [r5], #1
    53ec:	2b00      	cmp	r3, #0
    53ee:	d155      	bne.n	549c <_vfiprintf_r+0xf8>
    53f0:	ebb8 0a07 	subs.w	sl, r8, r7
    53f4:	d00b      	beq.n	540e <_vfiprintf_r+0x6a>
    53f6:	4653      	mov	r3, sl
    53f8:	463a      	mov	r2, r7
    53fa:	4621      	mov	r1, r4
    53fc:	4630      	mov	r0, r6
    53fe:	f7ff ffbf 	bl	5380 <__sfputs_r>
    5402:	3001      	adds	r0, #1
    5404:	f000 80c4 	beq.w	5590 <_vfiprintf_r+0x1ec>
    5408:	9b09      	ldr	r3, [sp, #36]	; 0x24
    540a:	4453      	add	r3, sl
    540c:	9309      	str	r3, [sp, #36]	; 0x24
    540e:	f898 3000 	ldrb.w	r3, [r8]
    5412:	2b00      	cmp	r3, #0
    5414:	f000 80bc 	beq.w	5590 <_vfiprintf_r+0x1ec>
    5418:	2300      	movs	r3, #0
    541a:	f04f 32ff 	mov.w	r2, #4294967295
    541e:	9304      	str	r3, [sp, #16]
    5420:	9307      	str	r3, [sp, #28]
    5422:	9205      	str	r2, [sp, #20]
    5424:	9306      	str	r3, [sp, #24]
    5426:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    542a:	931a      	str	r3, [sp, #104]	; 0x68
    542c:	2205      	movs	r2, #5
    542e:	7829      	ldrb	r1, [r5, #0]
    5430:	4860      	ldr	r0, [pc, #384]	; (55b4 <_vfiprintf_r+0x210>)
    5432:	f000 fbf5 	bl	5c20 <memchr>
    5436:	f105 0801 	add.w	r8, r5, #1
    543a:	9b04      	ldr	r3, [sp, #16]
    543c:	2800      	cmp	r0, #0
    543e:	d131      	bne.n	54a4 <_vfiprintf_r+0x100>
    5440:	06d9      	lsls	r1, r3, #27
    5442:	bf44      	itt	mi
    5444:	2220      	movmi	r2, #32
    5446:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    544a:	071a      	lsls	r2, r3, #28
    544c:	bf44      	itt	mi
    544e:	222b      	movmi	r2, #43	; 0x2b
    5450:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    5454:	782a      	ldrb	r2, [r5, #0]
    5456:	2a2a      	cmp	r2, #42	; 0x2a
    5458:	d02c      	beq.n	54b4 <_vfiprintf_r+0x110>
    545a:	9a07      	ldr	r2, [sp, #28]
    545c:	2100      	movs	r1, #0
    545e:	200a      	movs	r0, #10
    5460:	46a8      	mov	r8, r5
    5462:	3501      	adds	r5, #1
    5464:	f898 3000 	ldrb.w	r3, [r8]
    5468:	3b30      	subs	r3, #48	; 0x30
    546a:	2b09      	cmp	r3, #9
    546c:	d96d      	bls.n	554a <_vfiprintf_r+0x1a6>
    546e:	b371      	cbz	r1, 54ce <_vfiprintf_r+0x12a>
    5470:	e026      	b.n	54c0 <_vfiprintf_r+0x11c>
    5472:	4b51      	ldr	r3, [pc, #324]	; (55b8 <_vfiprintf_r+0x214>)
    5474:	429c      	cmp	r4, r3
    5476:	d101      	bne.n	547c <_vfiprintf_r+0xd8>
    5478:	68b4      	ldr	r4, [r6, #8]
    547a:	e7a3      	b.n	53c4 <_vfiprintf_r+0x20>
    547c:	4b4f      	ldr	r3, [pc, #316]	; (55bc <_vfiprintf_r+0x218>)
    547e:	429c      	cmp	r4, r3
    5480:	bf08      	it	eq
    5482:	68f4      	ldreq	r4, [r6, #12]
    5484:	e79e      	b.n	53c4 <_vfiprintf_r+0x20>
    5486:	4621      	mov	r1, r4
    5488:	4630      	mov	r0, r6
    548a:	f000 fb15 	bl	5ab8 <__swsetup_r>
    548e:	2800      	cmp	r0, #0
    5490:	d09e      	beq.n	53d0 <_vfiprintf_r+0x2c>
    5492:	f04f 30ff 	mov.w	r0, #4294967295
    5496:	b01d      	add	sp, #116	; 0x74
    5498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    549c:	2b25      	cmp	r3, #37	; 0x25
    549e:	d0a7      	beq.n	53f0 <_vfiprintf_r+0x4c>
    54a0:	46a8      	mov	r8, r5
    54a2:	e7a0      	b.n	53e6 <_vfiprintf_r+0x42>
    54a4:	4a43      	ldr	r2, [pc, #268]	; (55b4 <_vfiprintf_r+0x210>)
    54a6:	1a80      	subs	r0, r0, r2
    54a8:	fa0b f000 	lsl.w	r0, fp, r0
    54ac:	4318      	orrs	r0, r3
    54ae:	9004      	str	r0, [sp, #16]
    54b0:	4645      	mov	r5, r8
    54b2:	e7bb      	b.n	542c <_vfiprintf_r+0x88>
    54b4:	9a03      	ldr	r2, [sp, #12]
    54b6:	1d11      	adds	r1, r2, #4
    54b8:	6812      	ldr	r2, [r2, #0]
    54ba:	9103      	str	r1, [sp, #12]
    54bc:	2a00      	cmp	r2, #0
    54be:	db01      	blt.n	54c4 <_vfiprintf_r+0x120>
    54c0:	9207      	str	r2, [sp, #28]
    54c2:	e004      	b.n	54ce <_vfiprintf_r+0x12a>
    54c4:	4252      	negs	r2, r2
    54c6:	f043 0302 	orr.w	r3, r3, #2
    54ca:	9207      	str	r2, [sp, #28]
    54cc:	9304      	str	r3, [sp, #16]
    54ce:	f898 3000 	ldrb.w	r3, [r8]
    54d2:	2b2e      	cmp	r3, #46	; 0x2e
    54d4:	d110      	bne.n	54f8 <_vfiprintf_r+0x154>
    54d6:	f898 3001 	ldrb.w	r3, [r8, #1]
    54da:	2b2a      	cmp	r3, #42	; 0x2a
    54dc:	f108 0101 	add.w	r1, r8, #1
    54e0:	d137      	bne.n	5552 <_vfiprintf_r+0x1ae>
    54e2:	9b03      	ldr	r3, [sp, #12]
    54e4:	1d1a      	adds	r2, r3, #4
    54e6:	681b      	ldr	r3, [r3, #0]
    54e8:	9203      	str	r2, [sp, #12]
    54ea:	2b00      	cmp	r3, #0
    54ec:	bfb8      	it	lt
    54ee:	f04f 33ff 	movlt.w	r3, #4294967295
    54f2:	f108 0802 	add.w	r8, r8, #2
    54f6:	9305      	str	r3, [sp, #20]
    54f8:	4d31      	ldr	r5, [pc, #196]	; (55c0 <_vfiprintf_r+0x21c>)
    54fa:	f898 1000 	ldrb.w	r1, [r8]
    54fe:	2203      	movs	r2, #3
    5500:	4628      	mov	r0, r5
    5502:	f000 fb8d 	bl	5c20 <memchr>
    5506:	b140      	cbz	r0, 551a <_vfiprintf_r+0x176>
    5508:	2340      	movs	r3, #64	; 0x40
    550a:	1b40      	subs	r0, r0, r5
    550c:	fa03 f000 	lsl.w	r0, r3, r0
    5510:	9b04      	ldr	r3, [sp, #16]
    5512:	4303      	orrs	r3, r0
    5514:	9304      	str	r3, [sp, #16]
    5516:	f108 0801 	add.w	r8, r8, #1
    551a:	f898 1000 	ldrb.w	r1, [r8]
    551e:	4829      	ldr	r0, [pc, #164]	; (55c4 <_vfiprintf_r+0x220>)
    5520:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    5524:	2206      	movs	r2, #6
    5526:	f108 0701 	add.w	r7, r8, #1
    552a:	f000 fb79 	bl	5c20 <memchr>
    552e:	2800      	cmp	r0, #0
    5530:	d034      	beq.n	559c <_vfiprintf_r+0x1f8>
    5532:	4b25      	ldr	r3, [pc, #148]	; (55c8 <_vfiprintf_r+0x224>)
    5534:	bb03      	cbnz	r3, 5578 <_vfiprintf_r+0x1d4>
    5536:	9b03      	ldr	r3, [sp, #12]
    5538:	3307      	adds	r3, #7
    553a:	f023 0307 	bic.w	r3, r3, #7
    553e:	3308      	adds	r3, #8
    5540:	9303      	str	r3, [sp, #12]
    5542:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5544:	444b      	add	r3, r9
    5546:	9309      	str	r3, [sp, #36]	; 0x24
    5548:	e74c      	b.n	53e4 <_vfiprintf_r+0x40>
    554a:	fb00 3202 	mla	r2, r0, r2, r3
    554e:	2101      	movs	r1, #1
    5550:	e786      	b.n	5460 <_vfiprintf_r+0xbc>
    5552:	2300      	movs	r3, #0
    5554:	9305      	str	r3, [sp, #20]
    5556:	4618      	mov	r0, r3
    5558:	250a      	movs	r5, #10
    555a:	4688      	mov	r8, r1
    555c:	3101      	adds	r1, #1
    555e:	f898 2000 	ldrb.w	r2, [r8]
    5562:	3a30      	subs	r2, #48	; 0x30
    5564:	2a09      	cmp	r2, #9
    5566:	d903      	bls.n	5570 <_vfiprintf_r+0x1cc>
    5568:	2b00      	cmp	r3, #0
    556a:	d0c5      	beq.n	54f8 <_vfiprintf_r+0x154>
    556c:	9005      	str	r0, [sp, #20]
    556e:	e7c3      	b.n	54f8 <_vfiprintf_r+0x154>
    5570:	fb05 2000 	mla	r0, r5, r0, r2
    5574:	2301      	movs	r3, #1
    5576:	e7f0      	b.n	555a <_vfiprintf_r+0x1b6>
    5578:	ab03      	add	r3, sp, #12
    557a:	9300      	str	r3, [sp, #0]
    557c:	4622      	mov	r2, r4
    557e:	4b13      	ldr	r3, [pc, #76]	; (55cc <_vfiprintf_r+0x228>)
    5580:	a904      	add	r1, sp, #16
    5582:	4630      	mov	r0, r6
    5584:	f3af 8000 	nop.w
    5588:	f1b0 3fff 	cmp.w	r0, #4294967295
    558c:	4681      	mov	r9, r0
    558e:	d1d8      	bne.n	5542 <_vfiprintf_r+0x19e>
    5590:	89a3      	ldrh	r3, [r4, #12]
    5592:	065b      	lsls	r3, r3, #25
    5594:	f53f af7d 	bmi.w	5492 <_vfiprintf_r+0xee>
    5598:	9809      	ldr	r0, [sp, #36]	; 0x24
    559a:	e77c      	b.n	5496 <_vfiprintf_r+0xf2>
    559c:	ab03      	add	r3, sp, #12
    559e:	9300      	str	r3, [sp, #0]
    55a0:	4622      	mov	r2, r4
    55a2:	4b0a      	ldr	r3, [pc, #40]	; (55cc <_vfiprintf_r+0x228>)
    55a4:	a904      	add	r1, sp, #16
    55a6:	4630      	mov	r0, r6
    55a8:	f000 f888 	bl	56bc <_printf_i>
    55ac:	e7ec      	b.n	5588 <_vfiprintf_r+0x1e4>
    55ae:	bf00      	nop
    55b0:	000081b0 	.word	0x000081b0
    55b4:	000081f0 	.word	0x000081f0
    55b8:	000081d0 	.word	0x000081d0
    55bc:	00008190 	.word	0x00008190
    55c0:	000081f6 	.word	0x000081f6
    55c4:	000081fa 	.word	0x000081fa
    55c8:	00000000 	.word	0x00000000
    55cc:	00005381 	.word	0x00005381

000055d0 <_printf_common>:
    55d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    55d4:	4691      	mov	r9, r2
    55d6:	461f      	mov	r7, r3
    55d8:	688a      	ldr	r2, [r1, #8]
    55da:	690b      	ldr	r3, [r1, #16]
    55dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
    55e0:	4293      	cmp	r3, r2
    55e2:	bfb8      	it	lt
    55e4:	4613      	movlt	r3, r2
    55e6:	f8c9 3000 	str.w	r3, [r9]
    55ea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    55ee:	4606      	mov	r6, r0
    55f0:	460c      	mov	r4, r1
    55f2:	b112      	cbz	r2, 55fa <_printf_common+0x2a>
    55f4:	3301      	adds	r3, #1
    55f6:	f8c9 3000 	str.w	r3, [r9]
    55fa:	6823      	ldr	r3, [r4, #0]
    55fc:	0699      	lsls	r1, r3, #26
    55fe:	bf42      	ittt	mi
    5600:	f8d9 3000 	ldrmi.w	r3, [r9]
    5604:	3302      	addmi	r3, #2
    5606:	f8c9 3000 	strmi.w	r3, [r9]
    560a:	6825      	ldr	r5, [r4, #0]
    560c:	f015 0506 	ands.w	r5, r5, #6
    5610:	d107      	bne.n	5622 <_printf_common+0x52>
    5612:	f104 0a19 	add.w	sl, r4, #25
    5616:	68e3      	ldr	r3, [r4, #12]
    5618:	f8d9 2000 	ldr.w	r2, [r9]
    561c:	1a9b      	subs	r3, r3, r2
    561e:	429d      	cmp	r5, r3
    5620:	db29      	blt.n	5676 <_printf_common+0xa6>
    5622:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    5626:	6822      	ldr	r2, [r4, #0]
    5628:	3300      	adds	r3, #0
    562a:	bf18      	it	ne
    562c:	2301      	movne	r3, #1
    562e:	0692      	lsls	r2, r2, #26
    5630:	d42e      	bmi.n	5690 <_printf_common+0xc0>
    5632:	f104 0243 	add.w	r2, r4, #67	; 0x43
    5636:	4639      	mov	r1, r7
    5638:	4630      	mov	r0, r6
    563a:	47c0      	blx	r8
    563c:	3001      	adds	r0, #1
    563e:	d021      	beq.n	5684 <_printf_common+0xb4>
    5640:	6823      	ldr	r3, [r4, #0]
    5642:	68e5      	ldr	r5, [r4, #12]
    5644:	f8d9 2000 	ldr.w	r2, [r9]
    5648:	f003 0306 	and.w	r3, r3, #6
    564c:	2b04      	cmp	r3, #4
    564e:	bf08      	it	eq
    5650:	1aad      	subeq	r5, r5, r2
    5652:	68a3      	ldr	r3, [r4, #8]
    5654:	6922      	ldr	r2, [r4, #16]
    5656:	bf0c      	ite	eq
    5658:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    565c:	2500      	movne	r5, #0
    565e:	4293      	cmp	r3, r2
    5660:	bfc4      	itt	gt
    5662:	1a9b      	subgt	r3, r3, r2
    5664:	18ed      	addgt	r5, r5, r3
    5666:	f04f 0900 	mov.w	r9, #0
    566a:	341a      	adds	r4, #26
    566c:	454d      	cmp	r5, r9
    566e:	d11b      	bne.n	56a8 <_printf_common+0xd8>
    5670:	2000      	movs	r0, #0
    5672:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5676:	2301      	movs	r3, #1
    5678:	4652      	mov	r2, sl
    567a:	4639      	mov	r1, r7
    567c:	4630      	mov	r0, r6
    567e:	47c0      	blx	r8
    5680:	3001      	adds	r0, #1
    5682:	d103      	bne.n	568c <_printf_common+0xbc>
    5684:	f04f 30ff 	mov.w	r0, #4294967295
    5688:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    568c:	3501      	adds	r5, #1
    568e:	e7c2      	b.n	5616 <_printf_common+0x46>
    5690:	18e1      	adds	r1, r4, r3
    5692:	1c5a      	adds	r2, r3, #1
    5694:	2030      	movs	r0, #48	; 0x30
    5696:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    569a:	4422      	add	r2, r4
    569c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    56a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    56a4:	3302      	adds	r3, #2
    56a6:	e7c4      	b.n	5632 <_printf_common+0x62>
    56a8:	2301      	movs	r3, #1
    56aa:	4622      	mov	r2, r4
    56ac:	4639      	mov	r1, r7
    56ae:	4630      	mov	r0, r6
    56b0:	47c0      	blx	r8
    56b2:	3001      	adds	r0, #1
    56b4:	d0e6      	beq.n	5684 <_printf_common+0xb4>
    56b6:	f109 0901 	add.w	r9, r9, #1
    56ba:	e7d7      	b.n	566c <_printf_common+0x9c>

000056bc <_printf_i>:
    56bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    56c0:	4617      	mov	r7, r2
    56c2:	7e0a      	ldrb	r2, [r1, #24]
    56c4:	b085      	sub	sp, #20
    56c6:	2a6e      	cmp	r2, #110	; 0x6e
    56c8:	4698      	mov	r8, r3
    56ca:	4606      	mov	r6, r0
    56cc:	460c      	mov	r4, r1
    56ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    56d0:	f101 0e43 	add.w	lr, r1, #67	; 0x43
    56d4:	f000 80bc 	beq.w	5850 <_printf_i+0x194>
    56d8:	d81a      	bhi.n	5710 <_printf_i+0x54>
    56da:	2a63      	cmp	r2, #99	; 0x63
    56dc:	d02e      	beq.n	573c <_printf_i+0x80>
    56de:	d80a      	bhi.n	56f6 <_printf_i+0x3a>
    56e0:	2a00      	cmp	r2, #0
    56e2:	f000 80c8 	beq.w	5876 <_printf_i+0x1ba>
    56e6:	2a58      	cmp	r2, #88	; 0x58
    56e8:	f000 808a 	beq.w	5800 <_printf_i+0x144>
    56ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
    56f0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    56f4:	e02a      	b.n	574c <_printf_i+0x90>
    56f6:	2a64      	cmp	r2, #100	; 0x64
    56f8:	d001      	beq.n	56fe <_printf_i+0x42>
    56fa:	2a69      	cmp	r2, #105	; 0x69
    56fc:	d1f6      	bne.n	56ec <_printf_i+0x30>
    56fe:	6821      	ldr	r1, [r4, #0]
    5700:	681a      	ldr	r2, [r3, #0]
    5702:	f011 0f80 	tst.w	r1, #128	; 0x80
    5706:	d023      	beq.n	5750 <_printf_i+0x94>
    5708:	1d11      	adds	r1, r2, #4
    570a:	6019      	str	r1, [r3, #0]
    570c:	6813      	ldr	r3, [r2, #0]
    570e:	e027      	b.n	5760 <_printf_i+0xa4>
    5710:	2a73      	cmp	r2, #115	; 0x73
    5712:	f000 80b4 	beq.w	587e <_printf_i+0x1c2>
    5716:	d808      	bhi.n	572a <_printf_i+0x6e>
    5718:	2a6f      	cmp	r2, #111	; 0x6f
    571a:	d02a      	beq.n	5772 <_printf_i+0xb6>
    571c:	2a70      	cmp	r2, #112	; 0x70
    571e:	d1e5      	bne.n	56ec <_printf_i+0x30>
    5720:	680a      	ldr	r2, [r1, #0]
    5722:	f042 0220 	orr.w	r2, r2, #32
    5726:	600a      	str	r2, [r1, #0]
    5728:	e003      	b.n	5732 <_printf_i+0x76>
    572a:	2a75      	cmp	r2, #117	; 0x75
    572c:	d021      	beq.n	5772 <_printf_i+0xb6>
    572e:	2a78      	cmp	r2, #120	; 0x78
    5730:	d1dc      	bne.n	56ec <_printf_i+0x30>
    5732:	2278      	movs	r2, #120	; 0x78
    5734:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    5738:	496e      	ldr	r1, [pc, #440]	; (58f4 <_printf_i+0x238>)
    573a:	e064      	b.n	5806 <_printf_i+0x14a>
    573c:	681a      	ldr	r2, [r3, #0]
    573e:	f101 0542 	add.w	r5, r1, #66	; 0x42
    5742:	1d11      	adds	r1, r2, #4
    5744:	6019      	str	r1, [r3, #0]
    5746:	6813      	ldr	r3, [r2, #0]
    5748:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    574c:	2301      	movs	r3, #1
    574e:	e0a3      	b.n	5898 <_printf_i+0x1dc>
    5750:	f011 0f40 	tst.w	r1, #64	; 0x40
    5754:	f102 0104 	add.w	r1, r2, #4
    5758:	6019      	str	r1, [r3, #0]
    575a:	d0d7      	beq.n	570c <_printf_i+0x50>
    575c:	f9b2 3000 	ldrsh.w	r3, [r2]
    5760:	2b00      	cmp	r3, #0
    5762:	da03      	bge.n	576c <_printf_i+0xb0>
    5764:	222d      	movs	r2, #45	; 0x2d
    5766:	425b      	negs	r3, r3
    5768:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    576c:	4962      	ldr	r1, [pc, #392]	; (58f8 <_printf_i+0x23c>)
    576e:	220a      	movs	r2, #10
    5770:	e017      	b.n	57a2 <_printf_i+0xe6>
    5772:	6820      	ldr	r0, [r4, #0]
    5774:	6819      	ldr	r1, [r3, #0]
    5776:	f010 0f80 	tst.w	r0, #128	; 0x80
    577a:	d003      	beq.n	5784 <_printf_i+0xc8>
    577c:	1d08      	adds	r0, r1, #4
    577e:	6018      	str	r0, [r3, #0]
    5780:	680b      	ldr	r3, [r1, #0]
    5782:	e006      	b.n	5792 <_printf_i+0xd6>
    5784:	f010 0f40 	tst.w	r0, #64	; 0x40
    5788:	f101 0004 	add.w	r0, r1, #4
    578c:	6018      	str	r0, [r3, #0]
    578e:	d0f7      	beq.n	5780 <_printf_i+0xc4>
    5790:	880b      	ldrh	r3, [r1, #0]
    5792:	4959      	ldr	r1, [pc, #356]	; (58f8 <_printf_i+0x23c>)
    5794:	2a6f      	cmp	r2, #111	; 0x6f
    5796:	bf14      	ite	ne
    5798:	220a      	movne	r2, #10
    579a:	2208      	moveq	r2, #8
    579c:	2000      	movs	r0, #0
    579e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    57a2:	6865      	ldr	r5, [r4, #4]
    57a4:	60a5      	str	r5, [r4, #8]
    57a6:	2d00      	cmp	r5, #0
    57a8:	f2c0 809c 	blt.w	58e4 <_printf_i+0x228>
    57ac:	6820      	ldr	r0, [r4, #0]
    57ae:	f020 0004 	bic.w	r0, r0, #4
    57b2:	6020      	str	r0, [r4, #0]
    57b4:	2b00      	cmp	r3, #0
    57b6:	d13f      	bne.n	5838 <_printf_i+0x17c>
    57b8:	2d00      	cmp	r5, #0
    57ba:	f040 8095 	bne.w	58e8 <_printf_i+0x22c>
    57be:	4675      	mov	r5, lr
    57c0:	2a08      	cmp	r2, #8
    57c2:	d10b      	bne.n	57dc <_printf_i+0x120>
    57c4:	6823      	ldr	r3, [r4, #0]
    57c6:	07da      	lsls	r2, r3, #31
    57c8:	d508      	bpl.n	57dc <_printf_i+0x120>
    57ca:	6923      	ldr	r3, [r4, #16]
    57cc:	6862      	ldr	r2, [r4, #4]
    57ce:	429a      	cmp	r2, r3
    57d0:	bfde      	ittt	le
    57d2:	2330      	movle	r3, #48	; 0x30
    57d4:	f805 3c01 	strble.w	r3, [r5, #-1]
    57d8:	f105 35ff 	addle.w	r5, r5, #4294967295
    57dc:	ebae 0305 	sub.w	r3, lr, r5
    57e0:	6123      	str	r3, [r4, #16]
    57e2:	f8cd 8000 	str.w	r8, [sp]
    57e6:	463b      	mov	r3, r7
    57e8:	aa03      	add	r2, sp, #12
    57ea:	4621      	mov	r1, r4
    57ec:	4630      	mov	r0, r6
    57ee:	f7ff feef 	bl	55d0 <_printf_common>
    57f2:	3001      	adds	r0, #1
    57f4:	d155      	bne.n	58a2 <_printf_i+0x1e6>
    57f6:	f04f 30ff 	mov.w	r0, #4294967295
    57fa:	b005      	add	sp, #20
    57fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5800:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
    5804:	493c      	ldr	r1, [pc, #240]	; (58f8 <_printf_i+0x23c>)
    5806:	6822      	ldr	r2, [r4, #0]
    5808:	6818      	ldr	r0, [r3, #0]
    580a:	f012 0f80 	tst.w	r2, #128	; 0x80
    580e:	f100 0504 	add.w	r5, r0, #4
    5812:	601d      	str	r5, [r3, #0]
    5814:	d001      	beq.n	581a <_printf_i+0x15e>
    5816:	6803      	ldr	r3, [r0, #0]
    5818:	e002      	b.n	5820 <_printf_i+0x164>
    581a:	0655      	lsls	r5, r2, #25
    581c:	d5fb      	bpl.n	5816 <_printf_i+0x15a>
    581e:	8803      	ldrh	r3, [r0, #0]
    5820:	07d0      	lsls	r0, r2, #31
    5822:	bf44      	itt	mi
    5824:	f042 0220 	orrmi.w	r2, r2, #32
    5828:	6022      	strmi	r2, [r4, #0]
    582a:	b91b      	cbnz	r3, 5834 <_printf_i+0x178>
    582c:	6822      	ldr	r2, [r4, #0]
    582e:	f022 0220 	bic.w	r2, r2, #32
    5832:	6022      	str	r2, [r4, #0]
    5834:	2210      	movs	r2, #16
    5836:	e7b1      	b.n	579c <_printf_i+0xe0>
    5838:	4675      	mov	r5, lr
    583a:	fbb3 f0f2 	udiv	r0, r3, r2
    583e:	fb02 3310 	mls	r3, r2, r0, r3
    5842:	5ccb      	ldrb	r3, [r1, r3]
    5844:	f805 3d01 	strb.w	r3, [r5, #-1]!
    5848:	4603      	mov	r3, r0
    584a:	2800      	cmp	r0, #0
    584c:	d1f5      	bne.n	583a <_printf_i+0x17e>
    584e:	e7b7      	b.n	57c0 <_printf_i+0x104>
    5850:	6808      	ldr	r0, [r1, #0]
    5852:	681a      	ldr	r2, [r3, #0]
    5854:	6949      	ldr	r1, [r1, #20]
    5856:	f010 0f80 	tst.w	r0, #128	; 0x80
    585a:	d004      	beq.n	5866 <_printf_i+0x1aa>
    585c:	1d10      	adds	r0, r2, #4
    585e:	6018      	str	r0, [r3, #0]
    5860:	6813      	ldr	r3, [r2, #0]
    5862:	6019      	str	r1, [r3, #0]
    5864:	e007      	b.n	5876 <_printf_i+0x1ba>
    5866:	f010 0f40 	tst.w	r0, #64	; 0x40
    586a:	f102 0004 	add.w	r0, r2, #4
    586e:	6018      	str	r0, [r3, #0]
    5870:	6813      	ldr	r3, [r2, #0]
    5872:	d0f6      	beq.n	5862 <_printf_i+0x1a6>
    5874:	8019      	strh	r1, [r3, #0]
    5876:	2300      	movs	r3, #0
    5878:	6123      	str	r3, [r4, #16]
    587a:	4675      	mov	r5, lr
    587c:	e7b1      	b.n	57e2 <_printf_i+0x126>
    587e:	681a      	ldr	r2, [r3, #0]
    5880:	1d11      	adds	r1, r2, #4
    5882:	6019      	str	r1, [r3, #0]
    5884:	6815      	ldr	r5, [r2, #0]
    5886:	6862      	ldr	r2, [r4, #4]
    5888:	2100      	movs	r1, #0
    588a:	4628      	mov	r0, r5
    588c:	f000 f9c8 	bl	5c20 <memchr>
    5890:	b108      	cbz	r0, 5896 <_printf_i+0x1da>
    5892:	1b40      	subs	r0, r0, r5
    5894:	6060      	str	r0, [r4, #4]
    5896:	6863      	ldr	r3, [r4, #4]
    5898:	6123      	str	r3, [r4, #16]
    589a:	2300      	movs	r3, #0
    589c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    58a0:	e79f      	b.n	57e2 <_printf_i+0x126>
    58a2:	6923      	ldr	r3, [r4, #16]
    58a4:	462a      	mov	r2, r5
    58a6:	4639      	mov	r1, r7
    58a8:	4630      	mov	r0, r6
    58aa:	47c0      	blx	r8
    58ac:	3001      	adds	r0, #1
    58ae:	d0a2      	beq.n	57f6 <_printf_i+0x13a>
    58b0:	6823      	ldr	r3, [r4, #0]
    58b2:	079b      	lsls	r3, r3, #30
    58b4:	d507      	bpl.n	58c6 <_printf_i+0x20a>
    58b6:	2500      	movs	r5, #0
    58b8:	f104 0919 	add.w	r9, r4, #25
    58bc:	68e3      	ldr	r3, [r4, #12]
    58be:	9a03      	ldr	r2, [sp, #12]
    58c0:	1a9b      	subs	r3, r3, r2
    58c2:	429d      	cmp	r5, r3
    58c4:	db05      	blt.n	58d2 <_printf_i+0x216>
    58c6:	68e0      	ldr	r0, [r4, #12]
    58c8:	9b03      	ldr	r3, [sp, #12]
    58ca:	4298      	cmp	r0, r3
    58cc:	bfb8      	it	lt
    58ce:	4618      	movlt	r0, r3
    58d0:	e793      	b.n	57fa <_printf_i+0x13e>
    58d2:	2301      	movs	r3, #1
    58d4:	464a      	mov	r2, r9
    58d6:	4639      	mov	r1, r7
    58d8:	4630      	mov	r0, r6
    58da:	47c0      	blx	r8
    58dc:	3001      	adds	r0, #1
    58de:	d08a      	beq.n	57f6 <_printf_i+0x13a>
    58e0:	3501      	adds	r5, #1
    58e2:	e7eb      	b.n	58bc <_printf_i+0x200>
    58e4:	2b00      	cmp	r3, #0
    58e6:	d1a7      	bne.n	5838 <_printf_i+0x17c>
    58e8:	780b      	ldrb	r3, [r1, #0]
    58ea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    58ee:	f104 0542 	add.w	r5, r4, #66	; 0x42
    58f2:	e765      	b.n	57c0 <_printf_i+0x104>
    58f4:	00008212 	.word	0x00008212
    58f8:	00008201 	.word	0x00008201

000058fc <_putc_r>:
    58fc:	b570      	push	{r4, r5, r6, lr}
    58fe:	460d      	mov	r5, r1
    5900:	4614      	mov	r4, r2
    5902:	4606      	mov	r6, r0
    5904:	b118      	cbz	r0, 590e <_putc_r+0x12>
    5906:	6983      	ldr	r3, [r0, #24]
    5908:	b90b      	cbnz	r3, 590e <_putc_r+0x12>
    590a:	f7ff fc33 	bl	5174 <__sinit>
    590e:	4b13      	ldr	r3, [pc, #76]	; (595c <_putc_r+0x60>)
    5910:	429c      	cmp	r4, r3
    5912:	d112      	bne.n	593a <_putc_r+0x3e>
    5914:	6874      	ldr	r4, [r6, #4]
    5916:	68a3      	ldr	r3, [r4, #8]
    5918:	3b01      	subs	r3, #1
    591a:	2b00      	cmp	r3, #0
    591c:	60a3      	str	r3, [r4, #8]
    591e:	da16      	bge.n	594e <_putc_r+0x52>
    5920:	69a2      	ldr	r2, [r4, #24]
    5922:	4293      	cmp	r3, r2
    5924:	db02      	blt.n	592c <_putc_r+0x30>
    5926:	b2eb      	uxtb	r3, r5
    5928:	2b0a      	cmp	r3, #10
    592a:	d110      	bne.n	594e <_putc_r+0x52>
    592c:	4622      	mov	r2, r4
    592e:	4629      	mov	r1, r5
    5930:	4630      	mov	r0, r6
    5932:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5936:	f000 b85b 	b.w	59f0 <__swbuf_r>
    593a:	4b09      	ldr	r3, [pc, #36]	; (5960 <_putc_r+0x64>)
    593c:	429c      	cmp	r4, r3
    593e:	d101      	bne.n	5944 <_putc_r+0x48>
    5940:	68b4      	ldr	r4, [r6, #8]
    5942:	e7e8      	b.n	5916 <_putc_r+0x1a>
    5944:	4b07      	ldr	r3, [pc, #28]	; (5964 <_putc_r+0x68>)
    5946:	429c      	cmp	r4, r3
    5948:	bf08      	it	eq
    594a:	68f4      	ldreq	r4, [r6, #12]
    594c:	e7e3      	b.n	5916 <_putc_r+0x1a>
    594e:	6823      	ldr	r3, [r4, #0]
    5950:	1c5a      	adds	r2, r3, #1
    5952:	6022      	str	r2, [r4, #0]
    5954:	701d      	strb	r5, [r3, #0]
    5956:	b2e8      	uxtb	r0, r5
    5958:	bd70      	pop	{r4, r5, r6, pc}
    595a:	bf00      	nop
    595c:	000081b0 	.word	0x000081b0
    5960:	000081d0 	.word	0x000081d0
    5964:	00008190 	.word	0x00008190

00005968 <__sread>:
    5968:	b510      	push	{r4, lr}
    596a:	460c      	mov	r4, r1
    596c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    5970:	f000 f9a6 	bl	5cc0 <_read_r>
    5974:	2800      	cmp	r0, #0
    5976:	bfab      	itete	ge
    5978:	6d63      	ldrge	r3, [r4, #84]	; 0x54
    597a:	89a3      	ldrhlt	r3, [r4, #12]
    597c:	181b      	addge	r3, r3, r0
    597e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
    5982:	bfac      	ite	ge
    5984:	6563      	strge	r3, [r4, #84]	; 0x54
    5986:	81a3      	strhlt	r3, [r4, #12]
    5988:	bd10      	pop	{r4, pc}

0000598a <__swrite>:
    598a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    598e:	461f      	mov	r7, r3
    5990:	898b      	ldrh	r3, [r1, #12]
    5992:	05db      	lsls	r3, r3, #23
    5994:	4605      	mov	r5, r0
    5996:	460c      	mov	r4, r1
    5998:	4616      	mov	r6, r2
    599a:	d505      	bpl.n	59a8 <__swrite+0x1e>
    599c:	2302      	movs	r3, #2
    599e:	2200      	movs	r2, #0
    59a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    59a4:	f000 f928 	bl	5bf8 <_lseek_r>
    59a8:	89a3      	ldrh	r3, [r4, #12]
    59aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    59ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    59b2:	81a3      	strh	r3, [r4, #12]
    59b4:	4632      	mov	r2, r6
    59b6:	463b      	mov	r3, r7
    59b8:	4628      	mov	r0, r5
    59ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    59be:	f000 b869 	b.w	5a94 <_write_r>

000059c2 <__sseek>:
    59c2:	b510      	push	{r4, lr}
    59c4:	460c      	mov	r4, r1
    59c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    59ca:	f000 f915 	bl	5bf8 <_lseek_r>
    59ce:	1c43      	adds	r3, r0, #1
    59d0:	89a3      	ldrh	r3, [r4, #12]
    59d2:	bf15      	itete	ne
    59d4:	6560      	strne	r0, [r4, #84]	; 0x54
    59d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    59da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    59de:	81a3      	strheq	r3, [r4, #12]
    59e0:	bf18      	it	ne
    59e2:	81a3      	strhne	r3, [r4, #12]
    59e4:	bd10      	pop	{r4, pc}

000059e6 <__sclose>:
    59e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    59ea:	f000 b8d3 	b.w	5b94 <_close_r>
	...

000059f0 <__swbuf_r>:
    59f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    59f2:	460e      	mov	r6, r1
    59f4:	4614      	mov	r4, r2
    59f6:	4605      	mov	r5, r0
    59f8:	b118      	cbz	r0, 5a02 <__swbuf_r+0x12>
    59fa:	6983      	ldr	r3, [r0, #24]
    59fc:	b90b      	cbnz	r3, 5a02 <__swbuf_r+0x12>
    59fe:	f7ff fbb9 	bl	5174 <__sinit>
    5a02:	4b21      	ldr	r3, [pc, #132]	; (5a88 <__swbuf_r+0x98>)
    5a04:	429c      	cmp	r4, r3
    5a06:	d12a      	bne.n	5a5e <__swbuf_r+0x6e>
    5a08:	686c      	ldr	r4, [r5, #4]
    5a0a:	69a3      	ldr	r3, [r4, #24]
    5a0c:	60a3      	str	r3, [r4, #8]
    5a0e:	89a3      	ldrh	r3, [r4, #12]
    5a10:	071a      	lsls	r2, r3, #28
    5a12:	d52e      	bpl.n	5a72 <__swbuf_r+0x82>
    5a14:	6923      	ldr	r3, [r4, #16]
    5a16:	b363      	cbz	r3, 5a72 <__swbuf_r+0x82>
    5a18:	6923      	ldr	r3, [r4, #16]
    5a1a:	6820      	ldr	r0, [r4, #0]
    5a1c:	1ac0      	subs	r0, r0, r3
    5a1e:	6963      	ldr	r3, [r4, #20]
    5a20:	b2f6      	uxtb	r6, r6
    5a22:	4298      	cmp	r0, r3
    5a24:	4637      	mov	r7, r6
    5a26:	db04      	blt.n	5a32 <__swbuf_r+0x42>
    5a28:	4621      	mov	r1, r4
    5a2a:	4628      	mov	r0, r5
    5a2c:	f7ff fb38 	bl	50a0 <_fflush_r>
    5a30:	bb28      	cbnz	r0, 5a7e <__swbuf_r+0x8e>
    5a32:	68a3      	ldr	r3, [r4, #8]
    5a34:	3b01      	subs	r3, #1
    5a36:	60a3      	str	r3, [r4, #8]
    5a38:	6823      	ldr	r3, [r4, #0]
    5a3a:	1c5a      	adds	r2, r3, #1
    5a3c:	6022      	str	r2, [r4, #0]
    5a3e:	701e      	strb	r6, [r3, #0]
    5a40:	6963      	ldr	r3, [r4, #20]
    5a42:	3001      	adds	r0, #1
    5a44:	4298      	cmp	r0, r3
    5a46:	d004      	beq.n	5a52 <__swbuf_r+0x62>
    5a48:	89a3      	ldrh	r3, [r4, #12]
    5a4a:	07db      	lsls	r3, r3, #31
    5a4c:	d519      	bpl.n	5a82 <__swbuf_r+0x92>
    5a4e:	2e0a      	cmp	r6, #10
    5a50:	d117      	bne.n	5a82 <__swbuf_r+0x92>
    5a52:	4621      	mov	r1, r4
    5a54:	4628      	mov	r0, r5
    5a56:	f7ff fb23 	bl	50a0 <_fflush_r>
    5a5a:	b190      	cbz	r0, 5a82 <__swbuf_r+0x92>
    5a5c:	e00f      	b.n	5a7e <__swbuf_r+0x8e>
    5a5e:	4b0b      	ldr	r3, [pc, #44]	; (5a8c <__swbuf_r+0x9c>)
    5a60:	429c      	cmp	r4, r3
    5a62:	d101      	bne.n	5a68 <__swbuf_r+0x78>
    5a64:	68ac      	ldr	r4, [r5, #8]
    5a66:	e7d0      	b.n	5a0a <__swbuf_r+0x1a>
    5a68:	4b09      	ldr	r3, [pc, #36]	; (5a90 <__swbuf_r+0xa0>)
    5a6a:	429c      	cmp	r4, r3
    5a6c:	bf08      	it	eq
    5a6e:	68ec      	ldreq	r4, [r5, #12]
    5a70:	e7cb      	b.n	5a0a <__swbuf_r+0x1a>
    5a72:	4621      	mov	r1, r4
    5a74:	4628      	mov	r0, r5
    5a76:	f000 f81f 	bl	5ab8 <__swsetup_r>
    5a7a:	2800      	cmp	r0, #0
    5a7c:	d0cc      	beq.n	5a18 <__swbuf_r+0x28>
    5a7e:	f04f 37ff 	mov.w	r7, #4294967295
    5a82:	4638      	mov	r0, r7
    5a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5a86:	bf00      	nop
    5a88:	000081b0 	.word	0x000081b0
    5a8c:	000081d0 	.word	0x000081d0
    5a90:	00008190 	.word	0x00008190

00005a94 <_write_r>:
    5a94:	b538      	push	{r3, r4, r5, lr}
    5a96:	4c07      	ldr	r4, [pc, #28]	; (5ab4 <_write_r+0x20>)
    5a98:	4605      	mov	r5, r0
    5a9a:	4608      	mov	r0, r1
    5a9c:	4611      	mov	r1, r2
    5a9e:	2200      	movs	r2, #0
    5aa0:	6022      	str	r2, [r4, #0]
    5aa2:	461a      	mov	r2, r3
    5aa4:	f7fd fd84 	bl	35b0 <_write>
    5aa8:	1c43      	adds	r3, r0, #1
    5aaa:	d102      	bne.n	5ab2 <_write_r+0x1e>
    5aac:	6823      	ldr	r3, [r4, #0]
    5aae:	b103      	cbz	r3, 5ab2 <_write_r+0x1e>
    5ab0:	602b      	str	r3, [r5, #0]
    5ab2:	bd38      	pop	{r3, r4, r5, pc}
    5ab4:	20003120 	.word	0x20003120

00005ab8 <__swsetup_r>:
    5ab8:	4b32      	ldr	r3, [pc, #200]	; (5b84 <__swsetup_r+0xcc>)
    5aba:	b570      	push	{r4, r5, r6, lr}
    5abc:	681d      	ldr	r5, [r3, #0]
    5abe:	4606      	mov	r6, r0
    5ac0:	460c      	mov	r4, r1
    5ac2:	b125      	cbz	r5, 5ace <__swsetup_r+0x16>
    5ac4:	69ab      	ldr	r3, [r5, #24]
    5ac6:	b913      	cbnz	r3, 5ace <__swsetup_r+0x16>
    5ac8:	4628      	mov	r0, r5
    5aca:	f7ff fb53 	bl	5174 <__sinit>
    5ace:	4b2e      	ldr	r3, [pc, #184]	; (5b88 <__swsetup_r+0xd0>)
    5ad0:	429c      	cmp	r4, r3
    5ad2:	d10f      	bne.n	5af4 <__swsetup_r+0x3c>
    5ad4:	686c      	ldr	r4, [r5, #4]
    5ad6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    5ada:	b29a      	uxth	r2, r3
    5adc:	0715      	lsls	r5, r2, #28
    5ade:	d42c      	bmi.n	5b3a <__swsetup_r+0x82>
    5ae0:	06d0      	lsls	r0, r2, #27
    5ae2:	d411      	bmi.n	5b08 <__swsetup_r+0x50>
    5ae4:	2209      	movs	r2, #9
    5ae6:	6032      	str	r2, [r6, #0]
    5ae8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    5aec:	81a3      	strh	r3, [r4, #12]
    5aee:	f04f 30ff 	mov.w	r0, #4294967295
    5af2:	bd70      	pop	{r4, r5, r6, pc}
    5af4:	4b25      	ldr	r3, [pc, #148]	; (5b8c <__swsetup_r+0xd4>)
    5af6:	429c      	cmp	r4, r3
    5af8:	d101      	bne.n	5afe <__swsetup_r+0x46>
    5afa:	68ac      	ldr	r4, [r5, #8]
    5afc:	e7eb      	b.n	5ad6 <__swsetup_r+0x1e>
    5afe:	4b24      	ldr	r3, [pc, #144]	; (5b90 <__swsetup_r+0xd8>)
    5b00:	429c      	cmp	r4, r3
    5b02:	bf08      	it	eq
    5b04:	68ec      	ldreq	r4, [r5, #12]
    5b06:	e7e6      	b.n	5ad6 <__swsetup_r+0x1e>
    5b08:	0751      	lsls	r1, r2, #29
    5b0a:	d512      	bpl.n	5b32 <__swsetup_r+0x7a>
    5b0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
    5b0e:	b141      	cbz	r1, 5b22 <__swsetup_r+0x6a>
    5b10:	f104 0344 	add.w	r3, r4, #68	; 0x44
    5b14:	4299      	cmp	r1, r3
    5b16:	d002      	beq.n	5b1e <__swsetup_r+0x66>
    5b18:	4630      	mov	r0, r6
    5b1a:	f7fe ffe1 	bl	4ae0 <_free_r>
    5b1e:	2300      	movs	r3, #0
    5b20:	6363      	str	r3, [r4, #52]	; 0x34
    5b22:	89a3      	ldrh	r3, [r4, #12]
    5b24:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    5b28:	81a3      	strh	r3, [r4, #12]
    5b2a:	2300      	movs	r3, #0
    5b2c:	6063      	str	r3, [r4, #4]
    5b2e:	6923      	ldr	r3, [r4, #16]
    5b30:	6023      	str	r3, [r4, #0]
    5b32:	89a3      	ldrh	r3, [r4, #12]
    5b34:	f043 0308 	orr.w	r3, r3, #8
    5b38:	81a3      	strh	r3, [r4, #12]
    5b3a:	6923      	ldr	r3, [r4, #16]
    5b3c:	b94b      	cbnz	r3, 5b52 <__swsetup_r+0x9a>
    5b3e:	89a3      	ldrh	r3, [r4, #12]
    5b40:	f403 7320 	and.w	r3, r3, #640	; 0x280
    5b44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    5b48:	d003      	beq.n	5b52 <__swsetup_r+0x9a>
    5b4a:	4621      	mov	r1, r4
    5b4c:	4630      	mov	r0, r6
    5b4e:	f7ff fbbf 	bl	52d0 <__smakebuf_r>
    5b52:	89a2      	ldrh	r2, [r4, #12]
    5b54:	f012 0301 	ands.w	r3, r2, #1
    5b58:	d00c      	beq.n	5b74 <__swsetup_r+0xbc>
    5b5a:	2300      	movs	r3, #0
    5b5c:	60a3      	str	r3, [r4, #8]
    5b5e:	6963      	ldr	r3, [r4, #20]
    5b60:	425b      	negs	r3, r3
    5b62:	61a3      	str	r3, [r4, #24]
    5b64:	6923      	ldr	r3, [r4, #16]
    5b66:	b953      	cbnz	r3, 5b7e <__swsetup_r+0xc6>
    5b68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    5b6c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
    5b70:	d1ba      	bne.n	5ae8 <__swsetup_r+0x30>
    5b72:	bd70      	pop	{r4, r5, r6, pc}
    5b74:	0792      	lsls	r2, r2, #30
    5b76:	bf58      	it	pl
    5b78:	6963      	ldrpl	r3, [r4, #20]
    5b7a:	60a3      	str	r3, [r4, #8]
    5b7c:	e7f2      	b.n	5b64 <__swsetup_r+0xac>
    5b7e:	2000      	movs	r0, #0
    5b80:	e7f7      	b.n	5b72 <__swsetup_r+0xba>
    5b82:	bf00      	nop
    5b84:	200001a8 	.word	0x200001a8
    5b88:	000081b0 	.word	0x000081b0
    5b8c:	000081d0 	.word	0x000081d0
    5b90:	00008190 	.word	0x00008190

00005b94 <_close_r>:
    5b94:	b538      	push	{r3, r4, r5, lr}
    5b96:	4c06      	ldr	r4, [pc, #24]	; (5bb0 <_close_r+0x1c>)
    5b98:	2300      	movs	r3, #0
    5b9a:	4605      	mov	r5, r0
    5b9c:	4608      	mov	r0, r1
    5b9e:	6023      	str	r3, [r4, #0]
    5ba0:	f7fd fd40 	bl	3624 <_close>
    5ba4:	1c43      	adds	r3, r0, #1
    5ba6:	d102      	bne.n	5bae <_close_r+0x1a>
    5ba8:	6823      	ldr	r3, [r4, #0]
    5baa:	b103      	cbz	r3, 5bae <_close_r+0x1a>
    5bac:	602b      	str	r3, [r5, #0]
    5bae:	bd38      	pop	{r3, r4, r5, pc}
    5bb0:	20003120 	.word	0x20003120

00005bb4 <_fstat_r>:
    5bb4:	b538      	push	{r3, r4, r5, lr}
    5bb6:	4c07      	ldr	r4, [pc, #28]	; (5bd4 <_fstat_r+0x20>)
    5bb8:	2300      	movs	r3, #0
    5bba:	4605      	mov	r5, r0
    5bbc:	4608      	mov	r0, r1
    5bbe:	4611      	mov	r1, r2
    5bc0:	6023      	str	r3, [r4, #0]
    5bc2:	f7fd fd32 	bl	362a <_fstat>
    5bc6:	1c43      	adds	r3, r0, #1
    5bc8:	d102      	bne.n	5bd0 <_fstat_r+0x1c>
    5bca:	6823      	ldr	r3, [r4, #0]
    5bcc:	b103      	cbz	r3, 5bd0 <_fstat_r+0x1c>
    5bce:	602b      	str	r3, [r5, #0]
    5bd0:	bd38      	pop	{r3, r4, r5, pc}
    5bd2:	bf00      	nop
    5bd4:	20003120 	.word	0x20003120

00005bd8 <_isatty_r>:
    5bd8:	b538      	push	{r3, r4, r5, lr}
    5bda:	4c06      	ldr	r4, [pc, #24]	; (5bf4 <_isatty_r+0x1c>)
    5bdc:	2300      	movs	r3, #0
    5bde:	4605      	mov	r5, r0
    5be0:	4608      	mov	r0, r1
    5be2:	6023      	str	r3, [r4, #0]
    5be4:	f7fd fd26 	bl	3634 <_isatty>
    5be8:	1c43      	adds	r3, r0, #1
    5bea:	d102      	bne.n	5bf2 <_isatty_r+0x1a>
    5bec:	6823      	ldr	r3, [r4, #0]
    5bee:	b103      	cbz	r3, 5bf2 <_isatty_r+0x1a>
    5bf0:	602b      	str	r3, [r5, #0]
    5bf2:	bd38      	pop	{r3, r4, r5, pc}
    5bf4:	20003120 	.word	0x20003120

00005bf8 <_lseek_r>:
    5bf8:	b538      	push	{r3, r4, r5, lr}
    5bfa:	4c07      	ldr	r4, [pc, #28]	; (5c18 <_lseek_r+0x20>)
    5bfc:	4605      	mov	r5, r0
    5bfe:	4608      	mov	r0, r1
    5c00:	4611      	mov	r1, r2
    5c02:	2200      	movs	r2, #0
    5c04:	6022      	str	r2, [r4, #0]
    5c06:	461a      	mov	r2, r3
    5c08:	f7fd fd16 	bl	3638 <_lseek>
    5c0c:	1c43      	adds	r3, r0, #1
    5c0e:	d102      	bne.n	5c16 <_lseek_r+0x1e>
    5c10:	6823      	ldr	r3, [r4, #0]
    5c12:	b103      	cbz	r3, 5c16 <_lseek_r+0x1e>
    5c14:	602b      	str	r3, [r5, #0]
    5c16:	bd38      	pop	{r3, r4, r5, pc}
    5c18:	20003120 	.word	0x20003120
    5c1c:	00000000 	.word	0x00000000

00005c20 <memchr>:
    5c20:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    5c24:	2a10      	cmp	r2, #16
    5c26:	db2b      	blt.n	5c80 <memchr+0x60>
    5c28:	f010 0f07 	tst.w	r0, #7
    5c2c:	d008      	beq.n	5c40 <memchr+0x20>
    5c2e:	f810 3b01 	ldrb.w	r3, [r0], #1
    5c32:	3a01      	subs	r2, #1
    5c34:	428b      	cmp	r3, r1
    5c36:	d02d      	beq.n	5c94 <memchr+0x74>
    5c38:	f010 0f07 	tst.w	r0, #7
    5c3c:	b342      	cbz	r2, 5c90 <memchr+0x70>
    5c3e:	d1f6      	bne.n	5c2e <memchr+0xe>
    5c40:	b4f0      	push	{r4, r5, r6, r7}
    5c42:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    5c46:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    5c4a:	f022 0407 	bic.w	r4, r2, #7
    5c4e:	f07f 0700 	mvns.w	r7, #0
    5c52:	2300      	movs	r3, #0
    5c54:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    5c58:	3c08      	subs	r4, #8
    5c5a:	ea85 0501 	eor.w	r5, r5, r1
    5c5e:	ea86 0601 	eor.w	r6, r6, r1
    5c62:	fa85 f547 	uadd8	r5, r5, r7
    5c66:	faa3 f587 	sel	r5, r3, r7
    5c6a:	fa86 f647 	uadd8	r6, r6, r7
    5c6e:	faa5 f687 	sel	r6, r5, r7
    5c72:	b98e      	cbnz	r6, 5c98 <memchr+0x78>
    5c74:	d1ee      	bne.n	5c54 <memchr+0x34>
    5c76:	bcf0      	pop	{r4, r5, r6, r7}
    5c78:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    5c7c:	f002 0207 	and.w	r2, r2, #7
    5c80:	b132      	cbz	r2, 5c90 <memchr+0x70>
    5c82:	f810 3b01 	ldrb.w	r3, [r0], #1
    5c86:	3a01      	subs	r2, #1
    5c88:	ea83 0301 	eor.w	r3, r3, r1
    5c8c:	b113      	cbz	r3, 5c94 <memchr+0x74>
    5c8e:	d1f8      	bne.n	5c82 <memchr+0x62>
    5c90:	2000      	movs	r0, #0
    5c92:	4770      	bx	lr
    5c94:	3801      	subs	r0, #1
    5c96:	4770      	bx	lr
    5c98:	2d00      	cmp	r5, #0
    5c9a:	bf06      	itte	eq
    5c9c:	4635      	moveq	r5, r6
    5c9e:	3803      	subeq	r0, #3
    5ca0:	3807      	subne	r0, #7
    5ca2:	f015 0f01 	tst.w	r5, #1
    5ca6:	d107      	bne.n	5cb8 <memchr+0x98>
    5ca8:	3001      	adds	r0, #1
    5caa:	f415 7f80 	tst.w	r5, #256	; 0x100
    5cae:	bf02      	ittt	eq
    5cb0:	3001      	addeq	r0, #1
    5cb2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    5cb6:	3001      	addeq	r0, #1
    5cb8:	bcf0      	pop	{r4, r5, r6, r7}
    5cba:	3801      	subs	r0, #1
    5cbc:	4770      	bx	lr
    5cbe:	bf00      	nop

00005cc0 <_read_r>:
    5cc0:	b538      	push	{r3, r4, r5, lr}
    5cc2:	4c07      	ldr	r4, [pc, #28]	; (5ce0 <_read_r+0x20>)
    5cc4:	4605      	mov	r5, r0
    5cc6:	4608      	mov	r0, r1
    5cc8:	4611      	mov	r1, r2
    5cca:	2200      	movs	r2, #0
    5ccc:	6022      	str	r2, [r4, #0]
    5cce:	461a      	mov	r2, r3
    5cd0:	f7fd fc50 	bl	3574 <_read>
    5cd4:	1c43      	adds	r3, r0, #1
    5cd6:	d102      	bne.n	5cde <_read_r+0x1e>
    5cd8:	6823      	ldr	r3, [r4, #0]
    5cda:	b103      	cbz	r3, 5cde <_read_r+0x1e>
    5cdc:	602b      	str	r3, [r5, #0]
    5cde:	bd38      	pop	{r3, r4, r5, pc}
    5ce0:	20003120 	.word	0x20003120
    5ce4:	80000000 	.word	0x80000000
    5ce8:	84000400 	.word	0x84000400
    5cec:	80100010 	.word	0x80100010
    5cf0:	c6180410 	.word	0xc6180410
    5cf4:	f8008410 	.word	0xf8008410
    5cf8:	ffe007e0 	.word	0xffe007e0
    5cfc:	f81f001f 	.word	0xf81f001f
    5d00:	ffff07ff 	.word	0xffff07ff
    5d04:	000b0000 	.word	0x000b0000
    5d08:	00150010 	.word	0x00150010
    5d0c:	001f001a 	.word	0x001f001a
    5d10:	02eb02e0 	.word	0x02eb02e0
    5d14:	02f5001d 	.word	0x02f5001d
    5d18:	02ff02fa 	.word	0x02ff02fa
    5d1c:	042b0420 	.word	0x042b0420
    5d20:	04350430 	.word	0x04350430
    5d24:	043f043a 	.word	0x043f043a
    5d28:	056b0560 	.word	0x056b0560
    5d2c:	05750570 	.word	0x05750570
    5d30:	057f057a 	.word	0x057f057a
    5d34:	06ab06a0 	.word	0x06ab06a0
    5d38:	06b506b0 	.word	0x06b506b0
    5d3c:	06bf06ba 	.word	0x06bf06ba
    5d40:	07eb07e0 	.word	0x07eb07e0
    5d44:	07f507f0 	.word	0x07f507f0
    5d48:	07ff07fa 	.word	0x07ff07fa
    5d4c:	580b5800 	.word	0x580b5800
    5d50:	58155810 	.word	0x58155810
    5d54:	581f581a 	.word	0x581f581a
    5d58:	5aeb5ae0 	.word	0x5aeb5ae0
    5d5c:	5af55af0 	.word	0x5af55af0
    5d60:	5aff5afa 	.word	0x5aff5afa
    5d64:	5c2b5c20 	.word	0x5c2b5c20
    5d68:	5c355c30 	.word	0x5c355c30
    5d6c:	5c3f5c3a 	.word	0x5c3f5c3a
    5d70:	5d6b5d60 	.word	0x5d6b5d60
    5d74:	5d755d70 	.word	0x5d755d70
    5d78:	5d7f5d7a 	.word	0x5d7f5d7a
    5d7c:	5eab5ea0 	.word	0x5eab5ea0
    5d80:	5eb55eb0 	.word	0x5eb55eb0
    5d84:	5ebf5eba 	.word	0x5ebf5eba
    5d88:	5feb5fe0 	.word	0x5feb5fe0
    5d8c:	5ff55ff0 	.word	0x5ff55ff0
    5d90:	5fff5ffa 	.word	0x5fff5ffa
    5d94:	800b8000 	.word	0x800b8000
    5d98:	80158010 	.word	0x80158010
    5d9c:	801f801a 	.word	0x801f801a
    5da0:	82eb82e0 	.word	0x82eb82e0
    5da4:	82f582f0 	.word	0x82f582f0
    5da8:	82ff82fa 	.word	0x82ff82fa
    5dac:	842b8420 	.word	0x842b8420
    5db0:	84358430 	.word	0x84358430
    5db4:	843f843a 	.word	0x843f843a
    5db8:	856b8560 	.word	0x856b8560
    5dbc:	85758570 	.word	0x85758570
    5dc0:	857f857a 	.word	0x857f857a
    5dc4:	86ab86a0 	.word	0x86ab86a0
    5dc8:	86b586b0 	.word	0x86b586b0
    5dcc:	86bf86ba 	.word	0x86bf86ba
    5dd0:	87eb87e0 	.word	0x87eb87e0
    5dd4:	87f587f0 	.word	0x87f587f0
    5dd8:	87ff87fa 	.word	0x87ff87fa
    5ddc:	a80ba800 	.word	0xa80ba800
    5de0:	a815a810 	.word	0xa815a810
    5de4:	a81fa81a 	.word	0xa81fa81a
    5de8:	aaebaae0 	.word	0xaaebaae0
    5dec:	aaf5aaf0 	.word	0xaaf5aaf0
    5df0:	aaffaafa 	.word	0xaaffaafa
    5df4:	ac2bac20 	.word	0xac2bac20
    5df8:	0566ac30 	.word	0x0566ac30
    5dfc:	ac3fac3a 	.word	0xac3fac3a
    5e00:	ad6bad60 	.word	0xad6bad60
    5e04:	ad75ad70 	.word	0xad75ad70
    5e08:	ad7fad7a 	.word	0xad7fad7a
    5e0c:	aeabaea0 	.word	0xaeabaea0
    5e10:	aeb5aeb0 	.word	0xaeb5aeb0
    5e14:	aebfaeba 	.word	0xaebfaeba
    5e18:	afebafe0 	.word	0xafebafe0
    5e1c:	aff5aff0 	.word	0xaff5aff0
    5e20:	afffaffa 	.word	0xafffaffa
    5e24:	d00bd000 	.word	0xd00bd000
    5e28:	d015d010 	.word	0xd015d010
    5e2c:	d01fd01a 	.word	0xd01fd01a
    5e30:	d2ebd2e0 	.word	0xd2ebd2e0
    5e34:	d2f5d2f0 	.word	0xd2f5d2f0
    5e38:	d2ffd2fa 	.word	0xd2ffd2fa
    5e3c:	d42bd420 	.word	0xd42bd420
    5e40:	d435d430 	.word	0xd435d430
    5e44:	d43fd43a 	.word	0xd43fd43a
    5e48:	d56bd560 	.word	0xd56bd560
    5e4c:	d575d570 	.word	0xd575d570
    5e50:	d57fd57a 	.word	0xd57fd57a
    5e54:	d6abd6a0 	.word	0xd6abd6a0
    5e58:	d6b5d6b0 	.word	0xd6b5d6b0
    5e5c:	d6bfd6ba 	.word	0xd6bfd6ba
    5e60:	d7ebd7e0 	.word	0xd7ebd7e0
    5e64:	d7f5d7f0 	.word	0xd7f5d7f0
    5e68:	d7ffd7fa 	.word	0xd7ffd7fa
    5e6c:	f80bf800 	.word	0xf80bf800
    5e70:	f815f810 	.word	0xf815f810
    5e74:	f81ff81a 	.word	0xf81ff81a
    5e78:	faebfae0 	.word	0xfaebfae0
    5e7c:	faf5faf0 	.word	0xfaf5faf0
    5e80:	fafffafa 	.word	0xfafffafa
    5e84:	fc2bfc20 	.word	0xfc2bfc20
    5e88:	fc35fc30 	.word	0xfc35fc30
    5e8c:	fc3ffc3a 	.word	0xfc3ffc3a
    5e90:	fd6bfd60 	.word	0xfd6bfd60
    5e94:	fd75fd70 	.word	0xfd75fd70
    5e98:	fd7ffd7a 	.word	0xfd7ffd7a
    5e9c:	feabfea0 	.word	0xfeabfea0
    5ea0:	feb5feb0 	.word	0xfeb5feb0
    5ea4:	febffeba 	.word	0xfebffeba
    5ea8:	ffebffe0 	.word	0xffebffe0
    5eac:	fff5fff0 	.word	0xfff5fff0
    5eb0:	fffffffa 	.word	0xfffffffa
    5eb4:	10820841 	.word	0x10820841
    5eb8:	212418e3 	.word	0x212418e3
    5ebc:	39c73186 	.word	0x39c73186
    5ec0:	4a694228 	.word	0x4a694228
    5ec4:	630c5acb 	.word	0x630c5acb
    5ec8:	73ae632c 	.word	0x73ae632c
    5ecc:	8c518410 	.word	0x8c518410
    5ed0:	9cf394b2 	.word	0x9cf394b2
    5ed4:	b596ad55 	.word	0xb596ad55
    5ed8:	c638bdf7 	.word	0xc638bdf7
    5edc:	dedbd69a 	.word	0xdedbd69a
    5ee0:	ef7de73c 	.word	0xef7de73c
    5ee4:	6e305b1b 	.word	0x6e305b1b
    5ee8:	00000008 	.word	0x00000008
    5eec:	00000008 	.word	0x00000008
    5ef0:	00000008 	.word	0x00000008
    5ef4:	00000008 	.word	0x00000008
    5ef8:	00000008 	.word	0x00000008
    5efc:	00000008 	.word	0x00000008
    5f00:	00000008 	.word	0x00000008
    5f04:	00000008 	.word	0x00000008
    5f08:	00000010 	.word	0x00000010
    5f0c:	00000010 	.word	0x00000010
    5f10:	00000010 	.word	0x00000010
    5f14:	00000010 	.word	0x00000010
    5f18:	00000010 	.word	0x00000010
    5f1c:	00000010 	.word	0x00000010
    5f20:	00000010 	.word	0x00000010
    5f24:	00000010 	.word	0x00000010
    5f28:	00000018 	.word	0x00000018
    5f2c:	00000018 	.word	0x00000018
    5f30:	00000018 	.word	0x00000018
    5f34:	00000018 	.word	0x00000018
    5f38:	00000018 	.word	0x00000018
    5f3c:	00000018 	.word	0x00000018
    5f40:	00000018 	.word	0x00000018
    5f44:	00000018 	.word	0x00000018
    5f48:	00000020 	.word	0x00000020
    5f4c:	00000020 	.word	0x00000020
    5f50:	00000020 	.word	0x00000020
    5f54:	00000020 	.word	0x00000020
    5f58:	00000020 	.word	0x00000020
    5f5c:	00000020 	.word	0x00000020
    5f60:	00000020 	.word	0x00000020
    5f64:	00000020 	.word	0x00000020
    5f68:	00000028 	.word	0x00000028
    5f6c:	00000028 	.word	0x00000028
    5f70:	00000028 	.word	0x00000028
    5f74:	00000028 	.word	0x00000028
    5f78:	00000028 	.word	0x00000028
    5f7c:	00000028 	.word	0x00000028
    5f80:	00000028 	.word	0x00000028
    5f84:	00000028 	.word	0x00000028
    5f88:	00000030 	.word	0x00000030
    5f8c:	00000030 	.word	0x00000030
    5f90:	00000030 	.word	0x00000030
    5f94:	00000030 	.word	0x00000030
    5f98:	00000030 	.word	0x00000030
    5f9c:	00000030 	.word	0x00000030
    5fa0:	00000030 	.word	0x00000030
    5fa4:	00000030 	.word	0x00000030
    5fa8:	00000038 	.word	0x00000038
    5fac:	00000038 	.word	0x00000038
    5fb0:	00000038 	.word	0x00000038
    5fb4:	00000038 	.word	0x00000038
    5fb8:	00000038 	.word	0x00000038
    5fbc:	00000038 	.word	0x00000038
    5fc0:	00000038 	.word	0x00000038
    5fc4:	00000038 	.word	0x00000038
    5fc8:	00000040 	.word	0x00000040
    5fcc:	00000040 	.word	0x00000040
    5fd0:	00000040 	.word	0x00000040
    5fd4:	00000040 	.word	0x00000040
    5fd8:	00000040 	.word	0x00000040
    5fdc:	00000040 	.word	0x00000040
    5fe0:	00000040 	.word	0x00000040
    5fe4:	00000040 	.word	0x00000040
    5fe8:	00000048 	.word	0x00000048
    5fec:	00000048 	.word	0x00000048
    5ff0:	00000048 	.word	0x00000048
    5ff4:	00000048 	.word	0x00000048
    5ff8:	00000048 	.word	0x00000048
    5ffc:	00000048 	.word	0x00000048
    6000:	00000048 	.word	0x00000048
    6004:	00000048 	.word	0x00000048
    6008:	0000004f 	.word	0x0000004f
    600c:	0000004f 	.word	0x0000004f
    6010:	0000004f 	.word	0x0000004f
    6014:	0000004f 	.word	0x0000004f
    6018:	0000004f 	.word	0x0000004f
    601c:	0000004f 	.word	0x0000004f
    6020:	0000004f 	.word	0x0000004f
    6024:	0000004f 	.word	0x0000004f

00006028 <DECIDreturn>:
    6028:	363f5b1b 00000063 0000001b 0000005b     .[?6c.......[...
    6038:	00000052                                R...

0000603c <csiEscCodes>:
    603c:	43424140 47464544 4c4b4a48 6158504d     @ABCDEFGHJKLMPXa
    604c:	66656463 6d6c6867 7372716e 00006075     cdefghlmnqrsu`..
    605c:	00007325 000a000a 00140014 00000014     %s..............
    606c:	000a017c 000a017c 00140186 00140000     |...|...........
    607c:	0122000a 00140186 01220190 0122000a     .."......."...".
    608c:	012c0014 0122017c 012c0186 012c0014     ..,.|."...,...,.
    609c:	0136017c 001e0000 00280032 00320000     |.6.....2.(...2.
    60ac:	003c0032 001e0050 00280118 00280046     2.<.P.....(.F.(.
    60bc:	00be0050 00be0050 00c80118 00280118     P...P.........(.
    60cc:	00be0122 00460000 00500032 005a0000     ".....F.2.P...Z.
    60dc:	00640032 006e0000 00780032 00820000     2.d...n.2.x.....
    60ec:	008c0032 00960000 00a00032 00aa0000     2.......2.......
    60fc:	00b40032 00be0000 00c80032 00c8012c     2.......2...,...
    610c:	00d20172 00dc001e 00e60172 00f0001e     r.......r.......
    611c:	00fa0172 0104001e 010e0172 0118005a     r.......r...Z...
    612c:	0122012c 82be50b4 8cbe82aa 64963c8c     ,."..P.......<.d
    613c:	64dc3cd2 a08c9682 aadca08c a0e696dc     .<.d............
    614c:	50f03c78 5a78466e aaaa3c96 a0dc3cc8     x<.PnFxZ.<...<..
    615c:	aae6a0d2 6e617254 69722073 73746867     ....Trans rights
    616c:	65726120 6d756820 72206e61 74686769      are human right
    617c:	00000073 355e3331 31202b20 20355e36     s...13^5 + 16^5 
    618c:	3731203d 0000355e 69746552 616c7563     = 17^5..Reticula
    619c:	676e6974 6c705320 73656e69 00000000     ting Splines....
    61ac:	6c6f6976 65636e65 726f772e 0000736b     violence.works..
    61bc:	2b206953 00425020 6c6c694b 6c694220     Si + PB.Kill Bil
    61cc:	6e6f696c 65726961 61282073 5420646e     lionaires (and T
    61dc:	6c6c6972 616e6f69 29657269 00000000     rillionaire)....
    61ec:	65746e49 74736572 206e6920 68636574     Interest in tech
    61fc:	6f6c6f6e 69207967 6f6e2073 20612074     nology is not a 
    620c:	73726570 6c616e6f 00797469 50203031     personality.10 P
    621c:	544e4952 52484320 30322824 2b352e35     RINT CHR$(205.5+
    622c:	28444e52 3b292931 47203a20 204f544f     RND(1)); : GOTO 
    623c:	00003031 67206f4e 2e73646f 206f4e20     10..No gods. No 
    624c:	7473616d 2e737265 206f4e20 65747865     masters. No exte
    625c:	6c616e72 62696c20 69726172 002e7365     rnal libraries..
    626c:	6c6c694b 7a614e20 00007369 6e616954     Kill Nazis..Tian
    627c:	656d6e61 7153206e 65726175 38393120     anmen Square 198
    628c:	00000039 72656d41 20616369 20736177     9...America was 
    629c:	6e756f66 20646564 73206e6f 6576616c     founded on slave
    62ac:	00007972 72656854 73692065 6c6e6f20     ry..There is onl
    62bc:	61632079 61746970 6e61206c 616c2064     y capital and la
    62cc:	00726f62 6f636e45 67617275 59532065     bor.Encourage SY
    62dc:	54454d4d 20434952 73616c63 61772073     MMETRIC class wa
    62ec:	72616672 00000065 6f676f56 6f50206e     rfare...Vogon Po
    62fc:	79727465 00000000 694e2041 54206563     etry....A Nice T
    630c:	00005954 78696e55 6f706520 6d206863     TY..Unix epoch m
    631c:	73756e69 46783020 61642046 00007379     inus 0xFF days..
    632c:	3d202069 35783020 35373366 20666439     i  = 0x5f3759df 
    633c:	2028202d 3e3e2069 29203120 0000003b     - ( i >> 1 );...
    634c:	61657053 7274206b 20687475 70206f74     Speak truth to p
    635c:	7265776f 2749203b 7573206d 74206572     ower; I'm sure t
    636c:	27796568 6c206c6c 65747369 6874206e     hey'll listen th
    637c:	74207369 2e656d69 00000000 63666544     is time.....Defc
    638c:	73276e6f 6e616320 656c6563 32282064     on's canceled (2
    639c:	29303230 00000000 73746152 7473656e     020)....Ratsnest
    63ac:	6f4e203a 6e696874 6f542067 216f4420     : Nothing To Do!
    63bc:	00000000 68207449 36207361 656b2039     ....It has 69 ke
    63cc:	002e7379 61636542 20657375 342d5456     ys..Because VT-4
    63dc:	77203032 61207361 6165726c 74207964     20 was already t
    63ec:	6e656b61 00000000 706d6f43 73736572     aken....Compress
    63fc:	206e6f69 6f676c61 68746972 6162206d     ion algorithm ba
    640c:	20646573 42206e6f 28205042 37393931     sed on BBP (1997
    641c:	00000029 63616554 65682068 68746c61     )...Teach health
    642c:	736e6920 6e617275 70206563 69766f72      insurance provi
    643c:	73726564 206f7420 65646f63 0000002e     ders to code....
    644c:	6e617247 65432064 6172746e 6148206c     Grand Central Ha
    645c:	54206b63 50206568 656e616c 00000074     ck The Planet...
    646c:	69466957 20736920 20746f6e 65726977     WiFi is not wire
    647c:	7373656c 68744520 656e7265 00002174     less Ethernet!..
    648c:	6d6d7544 68742079 20636369 65696c63     Dummy thicc clie
    649c:	0000746e 694e2041 54206563 202e5954     nt..A Nice TTY. 
    64ac:	4f206e41 6f43204b 7475706d 002e7265     An OK Computer..
    64bc:	65545355 6964656c 6e6f646c 00736369     USTeledildonics.
    64cc:	696c6f53 69726164 69207974 6f6e2073     Solidarity is no
    64dc:	20612074 2077656e 6d617266 726f7765     t a new framewor
    64ec:	0000006b 61657242 616f6264 6e696472     k...Breadboardin
    64fc:	73492067 746f4e20 43204120 656d6972     g Is Not A Crime
    650c:	00000000 2066664f 6f207962 6520656e     ....Off by one e
    651c:	726f7272 72612073 6f632065 6e6f6d6d     rrors are common
    652c:	00000000 00000002 00000003 00000028     ............(...
    653c:	00000029 00000004 00000005 00000006     )...............
    654c:	00000007 00000020 00000021 00000022     .... ...!..."...
    655c:	00000023 00000024 00000025 00000026     #...$...%...&...
    656c:	00000027 00000008 00000009 0000000a     '...............
    657c:	0000000b 42000800 42000c00 42001000     .......B...B...B
    658c:	42001400 42001800 42001c00              ...B...B...B

00006598 <CodePage437>:
	...
    68d0:	01000000 06186080 18608001 60800106     .....`....`....`
    68e0:	80010000 00000060 00000000 66986106     ....`........a.f
    68f0:	98618619 00000000 00000000 00000000     ..a.............
    6900:	00000000 98610600 fb8f1966 8f1966fe     ......a.f....f..
    6910:	1966fefb 00986186 00000000 80010000     ..f..a..........
    6920:	891f7e60 1f7e6082 7e649081 6080811f     `~...`~...d~...`
    6930:	00000000 04000000 29a60823 1820c106     ........#..).. .
    6940:	98200304 324c1165 00000008 00000000     .. .e.L2........
    6950:	84e08107 10420821 5a081e78 87208216     ....!.B.x..Z.. .
    6960:	0000f6d9 00000000 30c00000 00030618     ...........0....
    6970:	000000c0 00000000 00000000 00000000     ................
    6980:	40000000 03020810 0c30c000 08c00003     ...@......0.....
    6990:	10400002 00000000 01000000 02084000     ..@..........@..
    69a0:	06186000 18608001 00010208 00000040     .`....`.....@...
    69b0:	00000000 42000000 90408210 40c23fff     .......B..@..?.@
    69c0:	80104290 00000000 00000000 00000000     .B..............
    69d0:	80000208 e0bfff20 02082080 00000000     .... .... ......
	...
    69f0:	18000000 c0000306 00001040 00000000     ........@.......
    6a00:	00000000 ff000000 0000e0bf 00000000     ................
	...
    6a24:	030e3800 0000e080 00000000 08200000     .8............ .
    6a34:	80000104 02041020 10408000 00000208     .... .....@.....
    6a44:	00000000 e0030000 cc1863f8 b0c1061b     .........c......
    6a54:	63061b6c f8e0c318 00000000 00000000     l..c............
    6a64:	1b3c70c0 0c30c004 30c00003 e107030c     .p<...0....0....
    6a74:	000000f8 00000000 c1f8e107 061860b0     .............`..
    6a84:	0187030e 0f30c0c0 0000fefb 00000000     ......0.........
    6a94:	fefb0f00 60c00003 80030e30 b0810618     .......`0.......
    6aa4:	00f8e167 00000000 40000000 03070c30     g..........@0...
    6ab4:	31649040 04fefb0f 10400001 00000000     @.d1......@.....
    6ac4:	0f000000 30c0fefb c1f8e30f 061860b0     .......0.....`..
    6ad4:	e167a081 000000f8 00000000 60f8e003     ..g............`
    6ae4:	00030c18 1b8c3ffe 67b0c106 0000f8e1     .....?.....g....
    6af4:	00000000 fefb0f00 20608001 00010408     ..........` ....
    6b04:	0c302080 00c00003 00000000 e0030000     . 0.............
    6b14:	6cb0c1f8 0f3e061b c1061b8c f8e063b0     ...l..>......c..
    6b24:	00000000 07000000 b0c1f8e1 7d0e3b6c     ............l;.}
    6b34:	0618609f e1c70003 000000f0 00000000     .`..............
    6b44:	38000000 e080030e 00000000 030e3800     ...8.........8..
    6b54:	0000e080 00000000 00000000 80030e38     ............8...
    6b64:	000000e0 0e380000 40c00003 00000010     ......8....@....
    6b74:	30000000 03030c0c 30c0c000 0cc00003     ...0.......0....
    6b84:	0c300003 00000000 00000000 00000000     ..0.............
    6b94:	00fefb0f fefb0f00 00000000 00000000     ................
    6ba4:	00000000 3000030c 30c0000c c0c00003     .......0...0....
    6bb4:	0c0c3030 00000003 00000000 f8e10700     00..............
    6bc4:	6060b0c1 01061818 00006080 00608001     ..``.....`....`.
    6bd4:	00000000 e1070000 6cb0c1f8 b4d33edb     ...........l.>..
    6be4:	c036fbec f8e10730 00000000 00000000     ..6.0...........
    6bf4:	0d367080 c18c3186 fefb6fb0 1b6cb0c1     .p6..1...o....l.
    6c04:	00000006 00000000 61f8e30f 86196698     ...........a.f..
    6c14:	19861f7e 6f986186 0000f8e3 00000000     ~....a.o........
    6c24:	f8e00300 036c9861 0c30c000 98610003     ....a.l...0...a.
    6c34:	00f8e063 00000000 c30f0000 861966f0     c............f..
    6c44:	98618631 668c1966 f0c38f19 00000000     1.a.f..f........
    6c54:	0f000000 30c0fefb fc00030c 00030c3f     .......0....?...
    6c64:	fb0f30c0 000000fe 00000000 c0fefb0f     .0..............
    6c74:	00030c30 030c3ffc 0c30c000 00000003     0....?....0.....
    6c84:	00000000 f8e00300 036c9861 0c30c000     ........a.l...0.
    6c94:	98611e7b 00f8e063 00000000 1b0c0000     {.a.c...........
    6ca4:	6cb0c106 bfff061b c1061bec 061b6cb0     ...l.........l..
    6cb4:	00000000 07000000 0618f8e1 18608001     ..............`.
    6cc4:	60800106 e1070618 000000f8 00000000     ...`............
    6cd4:	067ef801 18608001 60800106 8731c618     ..~...`....`..1.
    6ce4:	0000f0c1 00000000 061b0c00 838d31c6     .............1..
    6cf4:	0d38e060 31c66083 00061b8c 00000000     `.8..`.1........
    6d04:	030c0000 0c30c000 30c00003 c000030c     ......0....0....
    6d14:	fefb0f30 00000000 0c000000 bde38e1b     0...............
    6d24:	c976dbed 061b6cb2 1b6cb0c1 00000006     ..v..l....l.....
    6d34:	00000000 e1861b0c 661b6dbc 5b6cb3c9     .........m.f..l[
    6d44:	ecb0c31e 0000061b 00000000 f8e00300     ................
    6d54:	1b6cb0e3 6cb0c106 b8c1061b 00f8e0e3     ..l....l........
    6d64:	00000000 e30f0000 6cb0c1f8 3ffe061b     ...........l...?
    6d74:	c000038c 00030c30 00000000 07000000     ....0...........
    6d84:	b0c1f8e1 c1061b6c 36db6cb0 d98731c6     ....l....l.6.1..
    6d94:	000000f6 00000000 c1f8e30f 061b6cb0     .............l..
    6da4:	638c3ffe cc30c318 0000061b 00000000     .?.c..0.........
    6db4:	f8e10700 036cb0c1 801f7e00 b0c10618     ......l..~......
    6dc4:	00f8e167 00000000 fb0f0000 000208fe     g...............
    6dd4:	02082080 08208000 20800002 00000000     . .... .... ....
    6de4:	0c000000 b0c1061b c1061b6c 061b6cb0     ........l....l..
    6df4:	e063b0c1 000000f8 00000000 c1061b0c     ..c.............
    6e04:	8c3166b0 60c31863 810d36d8 000020c0     .f1.c..`.6... ..
    6e14:	00000000 061b0c00 1b6cb0c1 6db2c906     ..........l....m
    6e24:	b5d576db 008c796f 00000000 1b0c0000     .v..oy..........
    6e34:	c3186306 060cf860 63d8e003 061bcc18     .c..`......c....
    6e44:	00000000 0c000000 1863061b 1cd860c3     ..........c..`..
    6e54:	20c00107 80000208 00000020 00000000     ... .... .......
    6e64:	03fefb0f 1060c000 0103060c 0f30c0c0     ......`.......0.
    6e74:	0000fefb 00000000 f8e00300 00030c30     ............0...
    6e84:	030c30c0 0c30c000 00f8e003 00000000     .0....0.........
    6e94:	01060000 010c3080 030c6080 03186000     .....0...`...`..
    6ea4:	0618c000 00000000 07000000 030cf0c1     ................
    6eb4:	0c30c000 30c00003 c107030c 000000f0     ..0....0........
    6ec4:	00000000 36708000 8c31860d 0060b0c1     ......p6..1...`.
	...
    6ef0:	00fefb0f 00000000 80030000 00030ce0     ................
    6f00:	00001860 00000000 00000000 00000000     `...............
	...
    6f18:	01fcf003 fef86380 f823b0c0 000000fe     .....c....#.....
    6f28:	00000000 c000030c fcf30d30 0b6cb8e1     ........0.....l.
    6f38:	6fb8e102 00007cf3 00000000 00000000     ...o.|..........
    6f48:	e1070000 6cb0c1f8 30c00003 00fef907     .......l...0....
    6f58:	00000000 18000000 67800106 b0c3f6d9     ...........g....
    6f68:	c3061bec f6d9e7b0 00000000 00000000     ................
    6f78:	00000000 c1f8e107 fefb6fb0 f10730c0     .........o...0..
    6f88:	000000fc 00000000 3138e000 c000638c     ..........81.c..
    6f98:	00033ffc 030c30c0 0000c000 00000000     .?...0..........
    6fa8:	00000000 d9070000 8731c6f6 30c0f0c1     ..........1....0
    6fb8:	c3f8e107 f8e1e7b0 030c0000 0d30c000     ..............0.
    6fc8:	b8e178e3 c1061b6c 061b6cb0 00000000     .x..l....l......
    6fd8:	01000000 00006080 18e08003 60800106     .....`.........`
    6fe8:	e1070618 000000f8 00000000 00186000     .............`..
    6ff8:	18600000 60800106 8c010618 31c61863     ..`....`....c..1
    7008:	00f0c187 00030c00 638c30c0 0f36cc30     .........0.c0.6.
    7018:	33ccc083 000c330c 00000000 c0030000     ...3.3..........
    7028:	00030cf0 030c30c0 0c30c000 f8e00303     .....0....0.....
	...
    7044:	e70c330c 669b6dbf 1b6cb0c1 00000006     .3...m.f..l.....
	...
    705c:	f8e20b00 1b6cb8e1 6cb0c106 0000061b     ......l....l....
	...
    7074:	e1070000 cc30c3f8 30c30c33 00f8e1c7     ......0.3..0....
	...
    708c:	0b000000 b0c1f8e2 be061b6c 0002882f     ........l.../...
    709c:	02082080 00000000 00000000 c1fae803     . ..............
    70ac:	061b6cb0 08a08f3e 20800002 00000208     .l..>...... ....
    70bc:	00000000 7ce20800 036cbcf1 0c30c000     .......|..l...0.
    70cc:	00000003 00000000 00000000 e1070000     ................
    70dc:	0730c0f8 8001f8e1 00f8e36f 00000000     ..0.....o.......
    70ec:	00030000 0f0c30c0 0c30f8e3 33c00003     .....0....0....3
    70fc:	30c0c00c 00000000 00000000 00000000     ...0............
    710c:	c30c330c 0c33cc30 d9c730c3 000000f6     .3..0.3..0......
	...
    7124:	02020000 30e6b8c1 01073ed8 000020c0     .......0.>... ..
	...
    713c:	1b0c0000 6cb0c106 b5d5769b 008c3166     .......l.v..f1..
	...
    7154:	08000000 1b441823 6ce08003 08620c11     ....#.D....l..b.
	...
    7170:	c618630c 18638c31 60801f7e 873bc618     .c..1.c.~..`..;.
    7180:	0000f0c1 00000000 fefb0f00 c0c00003     ................
    7190:	0f0c3030 0000fefb 00000000 1e780000     00............x.
    71a0:	40000208 000e3810 02081040 001e7800     ...@.8..@....x..
    71b0:	00000000 80010000 01061860 06186080     ........`....`..
    71c0:	18608001 60800106 00000000 0f000000     ..`....`........
    71d0:	0208c003 0cc00003 c0000303 030f0208     ................
    71e0:	000000c0 00000000 d9c61907 1c736cb3     .............ls.
	...
    7218:	e0030000 6c9861f8 30c00003 6100030c     .....a.l...0...a
    7228:	f8e06398 00000608 00000000 00669801     .c............f.
    7238:	c30c330c 0c33cc30 d9c730c3 000000f6     .3..0.3..0......
    7248:	00000000 0c180000 f8e10700 fb6fb0c1     ..............o.
    7258:	0730c0fe 0000fcf1 00000000 10000000     ..0.............
    7268:	f003000a 638001fc b0c0fef8 00fef823     .......c....#...
	...
    7280:	030033cc 8001fcf0 c0fef863 fef823b0     .3......c....#..
	...
    7298:	000c6000 01fcf003 fef86380 f823b0c0     .`.......c....#.
    72a8:	000000fe 03000000 0c482001 fcf00300     ......... H.....
    72b8:	f8638001 23b0c0fe 0000fef8 00000000     ..c....#........
    72c8:	00000000 e1070000 6cb0c1f8 30c00003     ...........l...0
    72d8:	04fef907 00000003 00000000 07001420     ............ ...
    72e8:	b0c1f8e1 c0fefb6f fcf10730 00000000     ....o...0.......
    72f8:	00000000 00669801 c1f8e107 fefb6fb0     ......f......o..
    7308:	f10730c0 000000fc 00000000 18c00000     .0..............
    7318:	f8e10700 fb6fb0c1 0730c0fe 0000fcf1     ......o...0.....
    7328:	00000000 98610600 80030000 010618e0     ......a.........
    7338:	06186080 00f8e107 00000000 00000000     .`..............
    7348:	03002840 0618e080 18608001 f8e10706     @(........`.....
	...
    7360:	0018c000 18e08003 60800106 e1070618     ...........`....
    7370:	000000f8 18630000 367080c0 8c31860d     ......c...p6..1.
    7380:	fb6fb0c1 6cb0c1fe 0000061b 1c000000     ..o....l........
    7390:	70c08108 31860d36 6fb0c18c b0c1fefb     ...p6..1...o....
    73a0:	00061b6c 00000000 fb0f0606 0c30c0fe     l.............0.
    73b0:	3ffc0003 c000030c fefb0f30 00000000     ...?....0.......
	...
    73c8:	1dfe7907 fedb2786 f90733cc 000000ee     .y...'...3......
    73d8:	00000000 367ef800 9861860d e3efb1c7     ......~6..a.....
    73e8:	8c31c6f8 00001e7b 00000000 20000000     ..1.{.......... 
    73f8:	e1070014 cc30c3f8 30c30c33 00f8e1c7     ......0.3..0....
    7408:	00000000 01000000 07006698 30c3f8e1     .........f.....0
    7418:	c30c33cc f8e1c730 00000000 00000000     .3..0...........
    7428:	0018c000 c3f8e107 0c33cc30 e1c730c3     ........0.3..0..
    7438:	000000f8 00000000 14200000 0c330c00     .......... ...3.
    7448:	33cc30c3 c730c30c 0000f6d9 00000000     .0.3..0.........
    7458:	60000000 330c000c cc30c30c 30c30c33     ...`...3..0.3..0
    7468:	00f6d9c7 00000000 01000000 0c006698     .............f..
    7478:	31c61863 7e18638c 1860801f c1873bc6     c..1.c.~..`..;..
    7488:	800d36f0 383ef800 c1061bec 061b6cb0     .6....>8.....l..
    7498:	e0e3b8c1 000000f8 0c330000 c10603c0     ..........3.....
    74a8:	061b6cb0 1b6cb0c1 63b0c106 0000f8e0     .l....l....c....
    74b8:	00000000 20800002 1b8c1f7e 0c32c826     ....... ~...&.2.
    74c8:	1f7e069b 08208080 00000000 c0010000     ..~... .........
    74d8:	461873f8 3e608001 6080810f fefb0f18     .s.F..`>...`....
    74e8:	00000000 0c000000 08630419 1c506083     ..........c..`P.
    74f8:	20e00302 80800f08 00000020 00000000     ... .... .......
    7508:	c1f8e30f f81b6cb0 830d30fe 0d36d878     .....l...0..x.6.
    7518:	000038e3 00000000 3ce00000 98638e3f     .8.........<?.c.
    7528:	833ffee0 1c70c000 60800106 00000018     ..?...p....`....
    7538:	00000000 03000c18 8001fcf0 c0fef863     ............c...
    7548:	fef823b0 00000000 00000000 000060c0     .#...........`..
    7558:	18e08003 60800106 e1070618 000000f8     .......`........
    7568:	00000000 18300000 f8e10700 33cc30c3     ......0......0.3
    7578:	c730c30c 0000f8e1 00000000 30000000     ..0............0
    7588:	330c0018 cc30c30c 30c30c33 00f6d9c7     ...3..0.3..0....
	...
    75a0:	0b001998 b8e1f8e2 c1061b6c 061b6cb0     ........l....l..
    75b0:	00000000 8c0c4c00 b8e1061b c9461b6d     .....L......m.F.
    75c0:	165b6cb2 1becb0c3 00000006 00000000     .l[.............
    75d0:	1e08c003 00e08308 000080ff 00000000     ................
	...
    75e8:	d8c00100 c0810d22 0080ff00 00000000     ...."...........
	...
    7604:	00030c00 030c0000 3030c000 061b0c0c     ..........00....
    7614:	00c00f3f 00000000 00000000 ff000000     ?...............
    7624:	0003ecbf 00000000 00000000 00000000     ................
	...
    763c:	18e0bfff 00000006 00000000 00000000     ................
    764c:	30c00003 c000030c e0bfff00 0c1f3800     ...0.........8..
    765c:	183060c0 0000c00f c0000300 00030c30     .`0.........0...
    766c:	bfff00c0 668001e0 fc618619 60800106     .......f..a....`
    767c:	00000000 06180000 18000000 60800106     ...............`
    768c:	80010618 00061860 00000000 00000000     ....`...........
    769c:	90200100 80042448 00001290 00000000     .. .H$..........
	...
    76b4:	40020000 20010948 00244890 00000000     ...@H.. .H$.....
    76c4:	00000000 48024092 09004900 80240024     .....@.H.I..$.$.
    76d4:	92009004 00480240 24090049 42529200     ....@.H.I..$..RB
    76e4:	0949494a 24242529 929094a4 4a425292     JII.)%$$.....RBJ
    76f4:	29094949 ad6d2425 b6b6b5bd dbdad6f6     II.)%$m.........
    7704:	6f6b5bdb bdad6d6d f6b6b6b5 08dbdad6     .[komm..........
    7714:	20800002 80000208 00020820 02082080     ... .... .... ..
    7724:	08208000 20800002 80000208 00020820     .. .... .... ...
    7734:	3e082080 08208000 20800002 80000208     . .>.. .... ....
    7744:	00020820 02082080 f8208000 20800f02      .... .... .... 
    7754:	80000208 00020820 05142080 14504001     .... .... ...@P.
    7764:	50400105 40013d14 01051450 05145040     ..@P.=.@P...@P..
    7774:	00504001 00000000 00000000 013f0000     .@P...........?.
    7784:	05145040 14504001 50400105 00000000     @P...@P...@P....
    7794:	00000000 02f80000 0820800f 20800002     .......... .... 
    77a4:	80000208 01051420 05145040 f4504001     .... ...@P...@P.
    77b4:	50400f01 40010514 01051450 05145040     ..@P...@P...@P..
    77c4:	14504001 50400105 40010514 01051450     .@P...@P...@P...
    77d4:	05145040 00504001 00000000 00000000     @P...@P.........
    77e4:	0f01fc00 05145040 14504001 50400105     ....@P...@P...@P
    77f4:	40010514 01051450 01f45040 0000c00f     ...@P...@P......
	...
    780c:	01051400 05145040 14504001 0000003f     ....@P...@P.?...
	...
    7824:	02080000 08208000 20800002 800f02f8     ...... .... ....
	...
    7848:	003e0000 02082080 08208000 20800002     ..>.. .... .... 
    7858:	80000208 00020820 03082080 000000f0     .... .... ......
	...
    7870:	00020800 02082080 08208000 0000f03f     ..... .... .?...
	...
    7894:	80f03f00 00020820 02082080 08208000     .?.. .... .... .
    78a4:	20800002 80000208 f0030820 02082080     ... .... .... ..
    78b4:	08208000 20800002 00000000 00000000     .. .... ........
    78c4:	3f000000 000000f0 00000000 00000000     ...?............
    78d4:	00020800 02082080 08208000 2080f03f     ..... .... .?.. 
    78e4:	80000208 00020820 02082080 08208000     .... .... .... .
    78f4:	20800002 fc00c20f 00020820 02082080     ... .... .... ..
    7904:	14208000 50400105 40010514 f1051450     .. ...@P...@P...
    7914:	05145040 14504001 50400105 40010514     @P...@P...@P...@
    7924:	01051450 c4175040 0000fc01 00000000     P...@P..........
	...
    7940:	1f000000 507c01c4 40010514 01051450     ......|P...@P...
    7950:	05145040 14504001 50400105 fc0fc0f7     @P...@P...@P....
	...
    7974:	0fc0ff00 0514507c 14504001 50400105     ....|P...@P...@P
    7984:	40010514 01051450 c4175040 14507c01     ...@P...@P...|P.
    7994:	50400105 40010514 00000050 00000000     ..@P...@P.......
    79a4:	ff000000 00fc0fc0 00000000 00000000     ................
    79b4:	05140000 14504001 50400105 7c0fc0f7     .....@P...@P...|
    79c4:	01051450 05145040 08504001 20800002     P...@P...@P.... 
    79d4:	80000208 0fc0ff20 000000fc 00000000     .... ...........
    79e4:	00000000 40010514 01051450 3f145040     .......@P...@P.?
    79f4:	000000f0 00000000 00000000 00000000     ................
    7a04:	00000000 ff000000 20fc0fc0 80000208     ........... ....
    7a14:	00020820 00002080 00000000 00000000      .... ..........
    7a24:	40f13f00 01051450 05145040 14504001     .?.@P...@P...@P.
    7a34:	50400105 40010514 f0071450 00000000     ..@P...@P.......
	...
    7a4c:	80000208 00020820 c20f2080 0000fc00     .... .... ......
	...
    7a6c:	0f000000 20fc00c2 80000208 00020820     ....... .... ...
    7a7c:	00002080 00000000 00000000 40f10700     . .............@
    7a8c:	01051450 05145040 14504001 50400105     P...@P...@P...@P
    7a9c:	40010514 f13f1450 05145040 14504001     ...@P.?.@P...@P.
    7aac:	50400105 80000208 00020820 c2ff2080     ..@P.... .... ..
    7abc:	0820fc0f 20800002 80000208 00020820     .. .... .... ...
    7acc:	02082080 08208000 0000003e 00000000     . .... .>.......
	...
    7aec:	80f00300 00020820 02082080 ff208000     .... .... .... .
    7afc:	ffffffff ffffffff ffffffff ffffffff     ................
    7b0c:	ffffffff ffffffff 00000000 00000000     ................
    7b1c:	3f000000 ffffffff ffffffff ffffffff     ...?............
    7b2c:	0f3ef8ff 3ef8e083 f8e0830f e0830f3e     ..>....>....>...
    7b3c:	830f3ef8 0f3ef8e0 c30fe083 0f3ffcf0     .>....>.......?.
    7b4c:	3ffcf0c3 fcf0c30f f0c30f3f c30f3ffc     ...?....?....?..
    7b5c:	ff3ffcf0 ffffffff ffffffff f0ffffff     ..?.............
	...
    7b80:	8f380000 c208234c e2d08330 00000000     ..8.L#..0.......
    7b90:	00000000 193c0000 7c982186 8c61061f     ......<..!.|..a.
    7ba0:	63c61861 000000f8 00000000 ff000000     a..c............
    7bb0:	8c31c61f 01061863 06186080 0000c003     ..1.c....`......
	...
    7bcc:	c69fff00 18638c31 008e33c6 00000000     ....1.c..3......
    7bdc:	fb0f0000 06b080fe 0618c000 c0800103     ................
    7bec:	fefb2f20 00000000 00000000 00000000      /..............
    7bfc:	c3fef907 0c33cc30 e1c730c3 000000f8     ....0.3..0......
	...
    7c14:	0c330c00 33cc30c3 cf30c30c 30c0f6db     ..3..0.3..0....0
    7c24:	0000000c 00000000 e30c0000 618e7bbc     .............{.a
    7c34:	06186080 00608001 00000000 00000000     .`....`.........
    7c44:	c33f0000 30c3f8c1 c30c33cc f0e0c730     ..?....0.3..0...
    7c54:	000000ff 03000000 1863f8e0 ff061bcc     ..........c.....
    7c64:	061becbf e0c31863 000000f8 00000000     ....c...........
    7c74:	e3fce103 061b6cb0 1b6cb0c1 c698e38e     .....l....l.....
    7c84:	00008e33 00000000 fef80300 e1070318     3...............
    7c94:	cc30c3f8 30c30c33 00f8e1c7 00000000     ..0.3..0........
    7ca4:	00000000 02000000 a2885421 88228a28     ........!T..(.".
    7cb4:	00204295 00000000 00000000 07000000     .B .............
    7cc4:	860e7367 628a28a3 7367b8b0 00000070     gs...(.b..gsp...
    7cd4:	00000000 60f8e003 00030c18 030c3ffc     .......`.....?..
    7ce4:	03186000 0000f8e0 00000000 00000000     .`..............
    7cf4:	1b8c0f3e 6cb0c106 b0c1061b c1061b6c     >......l....l...
    7d04:	000060b0 00000000 0f000000 0000fefb     .`..............
    7d14:	00fefb0f fefb0f00 00000000 00000000     ................
    7d24:	02080000 ff208000 2080e0bf 03000208     ...... .... ....
    7d34:	000000fe 00000000 3000030c 30c0000c     ...........0...0
    7d44:	c0c00003 0c0c3030 3f000003 0000f0cf     ....00.....?....
    7d54:	0c300000 0003030c 0330c0c0 030cc000     ..0.......0.....
    7d64:	000c3000 00f0cf3f 88600307 00020820     .0..?.....`. ...
    7d74:	02082080 08208000 20800002 80000208     . .... .... ....
    7d84:	00020820 02082080 08208000 20800002      .... .... .... 
    7d94:	80000208 09240820 00008001 18000000     .... .$.........
    7da4:	00000006 00e0bfff 00061800 00000000     ................
	...
    7dbc:	8a0f1c00 0f1c073e 00073e8a 00000000     ....>....>......
	...
    7dd4:	01092460 00000080 00000000 00000000     `$..............
	...
    7df8:	80030e38 00000000 00000000 00000000     8...............
	...
    7e10:	01000000 00006080 00000000 0f000000     .....`..........
    7e20:	40000104 0d020820 0c504001 00800002     ...@ ....@P.....
    7e30:	00000000 f0c30b00 638c31c6 00000018     .........1.c....
	...
    7e4c:	83070000 03070cf0 3fe0c081 00000000     ...........?....
	...
    7e70:	c30f3ffc 0f3ffcf0 0000f0c3 00000000     .?....?.........
	...
    7e98:	0009001b 67753700 71312c6a 38000000     .....7ugj,1q...8
    7ea8:	006b6869 7a007732 6f303900 65332e6c     ihk.2w.z.90ol.3e
    7eb8:	00007861 2f3b702d 63737234 5b3d0020     ax..-p;/4rsc .=[
    7ec8:	74350027 006e7664 5c0d5d27 62667936     '.5tdvn.'].\6yfb
    7ed8:	0008006d 00000a7f 0009001b 47552600     m............&UG
    7ee8:	51213c4a 2a000000 004b4849 5a005740     J<!Q...*IHK.@W.Z
    7ef8:	4f292800 45233e4c 00005841 3f3a505f     .()OL>#EAX.._P:?
    7f08:	43535224 7b2b0020 54250022 004e5644     $RSC .+{".%TDVN.
    7f18:	7c0d7d7e 4246595e 0008004d 00000a7f     ~}.|^YFBM.......
    7f28:	0009001b 47553700 51312c4a 38000000     .....7UGJ,1Q...8
    7f38:	004b4849 5a005732 4f303900 45332e4c     IHK.2W.Z.90OL.3E
    7f48:	00005841 2f3b502d 43535234 5b3d0020     AX..-P;/4RSC .=[
    7f58:	54350027 004e5644 5c0d5d27 42465936     '.5TDVN.'].\6YFB
    7f68:	0008004d 00000a7f 0009001b 07150000     M...............
    7f78:	1100000a 00000000 000b0809 1a001700     ................
    7f88:	0f000000 0500000a 00001801 1f001000     ................
    7f98:	03131200 1b000000 14000000 000e1604     ................
    7fa8:	1c001d1e 02061900 0008000d 00000a00     ................

00007fb8 <kb_col>:
    7fb8:	00010000 00020000 00040000 00080000     ................
    7fc8:	00100000 00200000 08000000              ...... .....

00007fd4 <kb_col_index>:
    7fd4:	00000010 00000011 00000012 00000013     ................
    7fe4:	00000014 00000015 0000001b              ............

00007ff0 <kb_row>:
    7ff0:	00000004 00000008 00000010 00000020     ............ ...
    8000:	00000040 00000080 00000400 00000800     @...............
    8010:	00001000 00002000                       ..... ..

00008018 <kb_row_index>:
    8018:	00000002 00000003 00000004 00000005     ................
    8028:	00000006 00000007 0000000a 0000000b     ................
    8038:	0000000c 0000000d                       ........

00008040 <beelzebub.13341>:
    8040:	2e002d00 44003200 88005300 f300b600     .-...2.D.S......
    8050:	64012201 d4019201 08020702 5f023402     .".d.........4._
    8060:	94027802 bb02a602 db02ca02 f902e802     .x..............
    8070:	7f031f03                                ....

00008074 <belial.13338>:
    8074:	f0f0f0f0 b0b0b0f0 b1b6b6b6 b7b7b1b1     ................
    8084:	b2b2b2b7 bfb8b8b8 b9b3b3b3 b5b5b9b9     ................
    8094:	babac2b5 bcbcbcba bebdbdbd f0f0f0be     ................
    80a4:	b1b1f0f0 b8b7b7b6 bcb8b8b8 c9c9bcbc     ................
    80b4:	35c9c9c9 0000363a                       ...5:6..

000080bc <lucifer.13340>:
    80bc:	0852aa55 0d0d0d01 0d343434 34340d0d     U.R.....444...44
    80cc:	00000034 01242424 340f0f0f 08083434     4...$$$....444..
    80dc:	24240308 00780024 00007800 52aa5589     ..$$$.x..x...U.R
    80ec:	00cc0008 01707005 02030303 02d00000     .....pp.........
    80fc:	00505050 00000055                       PPP.U...

00008104 <mulciber.13339>:
    8104:	03020100 02010004 00020100 01000201     ................
    8114:	02010002 00020100 01000201 01000002     ................
    8124:	02010000 00020100 01000201 03020100     ................
    8134:	00000004 01000100 01000302 02010002     ................
    8144:	00000403 00000000 65530d0a 6c616972     ..........Serial
    8154:	204b4f20 30303639 314e3820 00000d0a      OK 9600 8N1....

00008164 <_global_impure_ptr>:
    8164:	200001ac 33323130 37363534 62613938     ... 0123456789ab
    8174:	66656463 6a696867 6e6d6c6b 7271706f     cdefghijklmnopqr
    8184:	76757473 7a797877 00000000              stuvwxyz....

00008190 <__sf_fake_stderr>:
	...

000081b0 <__sf_fake_stdin>:
	...

000081d0 <__sf_fake_stdout>:
	...
    81f0:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    8200:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    8210:	31300046 35343332 39383736 64636261     F.0123456789abcd
    8220:	00006665                                ef..

00008224 <_init>:
    8224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8226:	bf00      	nop
    8228:	bcf8      	pop	{r3, r4, r5, r6, r7}
    822a:	bc08      	pop	{r3}
    822c:	469e      	mov	lr, r3
    822e:	4770      	bx	lr

00008230 <__init_array_start>:
    8230:	000000d9 	.word	0x000000d9

00008234 <_fini>:
    8234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8236:	bf00      	nop
    8238:	bcf8      	pop	{r3, r4, r5, r6, r7}
    823a:	bc08      	pop	{r3}
    823c:	469e      	mov	lr, r3
    823e:	4770      	bx	lr

00008240 <__fini_array_start>:
    8240:	000000b5 	.word	0x000000b5
