
DumBadgeFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001de0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000074  20000000  00001de0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000bc  20000074  00001e54  00020074  2**2
                  ALLOC
  3 .stack        00002000  20000130  00001f10  00020074  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
  6 .debug_info   00020c6a  00000000  00000000  000200f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002ffd  00000000  00000000  00040d5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000044d5  00000000  00000000  00043d5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000498  00000000  00000000  00048231  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000005a8  00000000  00000000  000486c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001a610  00000000  00000000  00048c71  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00009e3e  00000000  00000000  00063281  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008e7c6  00000000  00000000  0006d0bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000cd0  00000000  00000000  000fb888  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	30 21 00 20 05 11 00 00 01 11 00 00 01 11 00 00     0!. ............
	...
      2c:	01 11 00 00 00 00 00 00 00 00 00 00 01 11 00 00     ................
      3c:	01 11 00 00 01 11 00 00 01 11 00 00 01 11 00 00     ................
      4c:	01 11 00 00 01 11 00 00 01 11 00 00 01 11 00 00     ................
      5c:	01 11 00 00 01 11 00 00 31 06 00 00 41 06 00 00     ........1...A...
      6c:	51 06 00 00 61 06 00 00 71 06 00 00 81 06 00 00     Q...a...q.......
      7c:	01 11 00 00 01 11 00 00 01 11 00 00 01 11 00 00     ................
      8c:	01 11 00 00 01 11 00 00 01 11 00 00 01 11 00 00     ................
      9c:	01 11 00 00 01 11 00 00 01 11 00 00 01 11 00 00     ................
      ac:	01 11 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000074 	.word	0x20000074
      d4:	00000000 	.word	0x00000000
      d8:	00001de0 	.word	0x00001de0

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000078 	.word	0x20000078
     108:	00001de0 	.word	0x00001de0
     10c:	00001de0 	.word	0x00001de0
     110:	00000000 	.word	0x00000000

00000114 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     114:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     116:	2000      	movs	r0, #0
     118:	4b08      	ldr	r3, [pc, #32]	; (13c <delay_init+0x28>)
     11a:	4798      	blx	r3
     11c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     11e:	4c08      	ldr	r4, [pc, #32]	; (140 <delay_init+0x2c>)
     120:	21fa      	movs	r1, #250	; 0xfa
     122:	0089      	lsls	r1, r1, #2
     124:	47a0      	blx	r4
     126:	4b07      	ldr	r3, [pc, #28]	; (144 <delay_init+0x30>)
     128:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     12a:	4907      	ldr	r1, [pc, #28]	; (148 <delay_init+0x34>)
     12c:	0028      	movs	r0, r5
     12e:	47a0      	blx	r4
     130:	4b06      	ldr	r3, [pc, #24]	; (14c <delay_init+0x38>)
     132:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     134:	2205      	movs	r2, #5
     136:	4b06      	ldr	r3, [pc, #24]	; (150 <delay_init+0x3c>)
     138:	601a      	str	r2, [r3, #0]
}
     13a:	bd70      	pop	{r4, r5, r6, pc}
     13c:	00000e91 	.word	0x00000e91
     140:	0000183d 	.word	0x0000183d
     144:	20000000 	.word	0x20000000
     148:	000f4240 	.word	0x000f4240
     14c:	20000004 	.word	0x20000004
     150:	e000e010 	.word	0xe000e010

00000154 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     154:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     156:	4b08      	ldr	r3, [pc, #32]	; (178 <delay_cycles_ms+0x24>)
     158:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     15a:	4a08      	ldr	r2, [pc, #32]	; (17c <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     15c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     15e:	2180      	movs	r1, #128	; 0x80
     160:	0249      	lsls	r1, r1, #9
	while (n--) {
     162:	3801      	subs	r0, #1
     164:	d307      	bcc.n	176 <delay_cycles_ms+0x22>
	if (n > 0) {
     166:	2c00      	cmp	r4, #0
     168:	d0fb      	beq.n	162 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     16a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     16c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     16e:	6813      	ldr	r3, [r2, #0]
     170:	420b      	tst	r3, r1
     172:	d0fc      	beq.n	16e <delay_cycles_ms+0x1a>
     174:	e7f5      	b.n	162 <delay_cycles_ms+0xe>
	}
}
     176:	bd30      	pop	{r4, r5, pc}
     178:	20000000 	.word	0x20000000
     17c:	e000e010 	.word	0xe000e010

00000180 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     180:	4b0c      	ldr	r3, [pc, #48]	; (1b4 <cpu_irq_enter_critical+0x34>)
     182:	681b      	ldr	r3, [r3, #0]
     184:	2b00      	cmp	r3, #0
     186:	d106      	bne.n	196 <cpu_irq_enter_critical+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     188:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     18c:	2b00      	cmp	r3, #0
     18e:	d007      	beq.n	1a0 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     190:	2200      	movs	r2, #0
     192:	4b09      	ldr	r3, [pc, #36]	; (1b8 <cpu_irq_enter_critical+0x38>)
     194:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     196:	4a07      	ldr	r2, [pc, #28]	; (1b4 <cpu_irq_enter_critical+0x34>)
     198:	6813      	ldr	r3, [r2, #0]
     19a:	3301      	adds	r3, #1
     19c:	6013      	str	r3, [r2, #0]
}
     19e:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     1a0:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     1a2:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     1a6:	2200      	movs	r2, #0
     1a8:	4b04      	ldr	r3, [pc, #16]	; (1bc <cpu_irq_enter_critical+0x3c>)
     1aa:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     1ac:	3201      	adds	r2, #1
     1ae:	4b02      	ldr	r3, [pc, #8]	; (1b8 <cpu_irq_enter_critical+0x38>)
     1b0:	701a      	strb	r2, [r3, #0]
     1b2:	e7f0      	b.n	196 <cpu_irq_enter_critical+0x16>
     1b4:	20000090 	.word	0x20000090
     1b8:	20000094 	.word	0x20000094
     1bc:	20000008 	.word	0x20000008

000001c0 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     1c0:	4b08      	ldr	r3, [pc, #32]	; (1e4 <cpu_irq_leave_critical+0x24>)
     1c2:	681a      	ldr	r2, [r3, #0]
     1c4:	3a01      	subs	r2, #1
     1c6:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     1c8:	681b      	ldr	r3, [r3, #0]
     1ca:	2b00      	cmp	r3, #0
     1cc:	d109      	bne.n	1e2 <cpu_irq_leave_critical+0x22>
     1ce:	4b06      	ldr	r3, [pc, #24]	; (1e8 <cpu_irq_leave_critical+0x28>)
     1d0:	781b      	ldrb	r3, [r3, #0]
     1d2:	2b00      	cmp	r3, #0
     1d4:	d005      	beq.n	1e2 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     1d6:	2201      	movs	r2, #1
     1d8:	4b04      	ldr	r3, [pc, #16]	; (1ec <cpu_irq_leave_critical+0x2c>)
     1da:	701a      	strb	r2, [r3, #0]
     1dc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     1e0:	b662      	cpsie	i
	}
}
     1e2:	4770      	bx	lr
     1e4:	20000090 	.word	0x20000090
     1e8:	20000094 	.word	0x20000094
     1ec:	20000008 	.word	0x20000008

000001f0 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     1f0:	b5f0      	push	{r4, r5, r6, r7, lr}
     1f2:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     1f4:	ac01      	add	r4, sp, #4
     1f6:	2501      	movs	r5, #1
     1f8:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     1fa:	2700      	movs	r7, #0
     1fc:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     1fe:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     200:	0021      	movs	r1, r4
     202:	203e      	movs	r0, #62	; 0x3e
     204:	4e06      	ldr	r6, [pc, #24]	; (220 <system_board_init+0x30>)
     206:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     208:	2280      	movs	r2, #128	; 0x80
     20a:	05d2      	lsls	r2, r2, #23
     20c:	4b05      	ldr	r3, [pc, #20]	; (224 <system_board_init+0x34>)
     20e:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     210:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     212:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     214:	0021      	movs	r1, r4
     216:	200f      	movs	r0, #15
     218:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
     21a:	b003      	add	sp, #12
     21c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     21e:	46c0      	nop			; (mov r8, r8)
     220:	00000229 	.word	0x00000229
     224:	41004480 	.word	0x41004480

00000228 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     228:	b500      	push	{lr}
     22a:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     22c:	ab01      	add	r3, sp, #4
     22e:	2280      	movs	r2, #128	; 0x80
     230:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     232:	780a      	ldrb	r2, [r1, #0]
     234:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     236:	784a      	ldrb	r2, [r1, #1]
     238:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     23a:	788a      	ldrb	r2, [r1, #2]
     23c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     23e:	0019      	movs	r1, r3
     240:	4b01      	ldr	r3, [pc, #4]	; (248 <port_pin_set_config+0x20>)
     242:	4798      	blx	r3
}
     244:	b003      	add	sp, #12
     246:	bd00      	pop	{pc}
     248:	000010a1 	.word	0x000010a1

0000024c <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     24c:	b5f0      	push	{r4, r5, r6, r7, lr}
     24e:	46de      	mov	lr, fp
     250:	4657      	mov	r7, sl
     252:	464e      	mov	r6, r9
     254:	4645      	mov	r5, r8
     256:	b5e0      	push	{r5, r6, r7, lr}
     258:	b087      	sub	sp, #28
     25a:	4680      	mov	r8, r0
     25c:	9104      	str	r1, [sp, #16]
     25e:	0016      	movs	r6, r2
     260:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     262:	2200      	movs	r2, #0
     264:	2300      	movs	r3, #0
     266:	2100      	movs	r1, #0
     268:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     26a:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     26c:	2001      	movs	r0, #1
     26e:	0021      	movs	r1, r4
     270:	9600      	str	r6, [sp, #0]
     272:	9701      	str	r7, [sp, #4]
     274:	465c      	mov	r4, fp
     276:	9403      	str	r4, [sp, #12]
     278:	4644      	mov	r4, r8
     27a:	9405      	str	r4, [sp, #20]
     27c:	e013      	b.n	2a6 <long_division+0x5a>
     27e:	2420      	movs	r4, #32
     280:	1a64      	subs	r4, r4, r1
     282:	0005      	movs	r5, r0
     284:	40e5      	lsrs	r5, r4
     286:	46a8      	mov	r8, r5
     288:	e014      	b.n	2b4 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     28a:	9c00      	ldr	r4, [sp, #0]
     28c:	9d01      	ldr	r5, [sp, #4]
     28e:	1b12      	subs	r2, r2, r4
     290:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     292:	465c      	mov	r4, fp
     294:	464d      	mov	r5, r9
     296:	432c      	orrs	r4, r5
     298:	46a3      	mov	fp, r4
     29a:	9c03      	ldr	r4, [sp, #12]
     29c:	4645      	mov	r5, r8
     29e:	432c      	orrs	r4, r5
     2a0:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     2a2:	3901      	subs	r1, #1
     2a4:	d325      	bcc.n	2f2 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     2a6:	2420      	movs	r4, #32
     2a8:	4264      	negs	r4, r4
     2aa:	190c      	adds	r4, r1, r4
     2ac:	d4e7      	bmi.n	27e <long_division+0x32>
     2ae:	0005      	movs	r5, r0
     2b0:	40a5      	lsls	r5, r4
     2b2:	46a8      	mov	r8, r5
     2b4:	0004      	movs	r4, r0
     2b6:	408c      	lsls	r4, r1
     2b8:	46a1      	mov	r9, r4
		r = r << 1;
     2ba:	1892      	adds	r2, r2, r2
     2bc:	415b      	adcs	r3, r3
     2be:	0014      	movs	r4, r2
     2c0:	001d      	movs	r5, r3
		if (n & bit_shift) {
     2c2:	9e05      	ldr	r6, [sp, #20]
     2c4:	464f      	mov	r7, r9
     2c6:	403e      	ands	r6, r7
     2c8:	46b4      	mov	ip, r6
     2ca:	9e04      	ldr	r6, [sp, #16]
     2cc:	4647      	mov	r7, r8
     2ce:	403e      	ands	r6, r7
     2d0:	46b2      	mov	sl, r6
     2d2:	4666      	mov	r6, ip
     2d4:	4657      	mov	r7, sl
     2d6:	433e      	orrs	r6, r7
     2d8:	d003      	beq.n	2e2 <long_division+0x96>
			r |= 0x01;
     2da:	0006      	movs	r6, r0
     2dc:	4326      	orrs	r6, r4
     2de:	0032      	movs	r2, r6
     2e0:	002b      	movs	r3, r5
		if (r >= d) {
     2e2:	9c00      	ldr	r4, [sp, #0]
     2e4:	9d01      	ldr	r5, [sp, #4]
     2e6:	429d      	cmp	r5, r3
     2e8:	d8db      	bhi.n	2a2 <long_division+0x56>
     2ea:	d1ce      	bne.n	28a <long_division+0x3e>
     2ec:	4294      	cmp	r4, r2
     2ee:	d8d8      	bhi.n	2a2 <long_division+0x56>
     2f0:	e7cb      	b.n	28a <long_division+0x3e>
     2f2:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     2f4:	4658      	mov	r0, fp
     2f6:	0019      	movs	r1, r3
     2f8:	b007      	add	sp, #28
     2fa:	bc3c      	pop	{r2, r3, r4, r5}
     2fc:	4690      	mov	r8, r2
     2fe:	4699      	mov	r9, r3
     300:	46a2      	mov	sl, r4
     302:	46ab      	mov	fp, r5
     304:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000306 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     306:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     308:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     30a:	2340      	movs	r3, #64	; 0x40
     30c:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     30e:	4281      	cmp	r1, r0
     310:	d202      	bcs.n	318 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     312:	0018      	movs	r0, r3
     314:	bd10      	pop	{r4, pc}
		baud_calculated++;
     316:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     318:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     31a:	1c63      	adds	r3, r4, #1
     31c:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     31e:	4288      	cmp	r0, r1
     320:	d9f9      	bls.n	316 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     322:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     324:	2cff      	cmp	r4, #255	; 0xff
     326:	d8f4      	bhi.n	312 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     328:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     32a:	2300      	movs	r3, #0
     32c:	e7f1      	b.n	312 <_sercom_get_sync_baud_val+0xc>
	...

00000330 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     330:	b5f0      	push	{r4, r5, r6, r7, lr}
     332:	b083      	sub	sp, #12
     334:	000f      	movs	r7, r1
     336:	0016      	movs	r6, r2
     338:	aa08      	add	r2, sp, #32
     33a:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     33c:	0004      	movs	r4, r0
     33e:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     340:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     342:	42bc      	cmp	r4, r7
     344:	d902      	bls.n	34c <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     346:	0010      	movs	r0, r2
     348:	b003      	add	sp, #12
     34a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     34c:	2b00      	cmp	r3, #0
     34e:	d114      	bne.n	37a <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     350:	0002      	movs	r2, r0
     352:	0008      	movs	r0, r1
     354:	2100      	movs	r1, #0
     356:	4c19      	ldr	r4, [pc, #100]	; (3bc <_sercom_get_async_baud_val+0x8c>)
     358:	47a0      	blx	r4
     35a:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     35c:	003a      	movs	r2, r7
     35e:	2300      	movs	r3, #0
     360:	2000      	movs	r0, #0
     362:	4c17      	ldr	r4, [pc, #92]	; (3c0 <_sercom_get_async_baud_val+0x90>)
     364:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     366:	2200      	movs	r2, #0
     368:	2301      	movs	r3, #1
     36a:	1a12      	subs	r2, r2, r0
     36c:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     36e:	0c12      	lsrs	r2, r2, #16
     370:	041b      	lsls	r3, r3, #16
     372:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     374:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     376:	2200      	movs	r2, #0
     378:	e7e5      	b.n	346 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     37a:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     37c:	2b01      	cmp	r3, #1
     37e:	d1f9      	bne.n	374 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     380:	000a      	movs	r2, r1
     382:	2300      	movs	r3, #0
     384:	2100      	movs	r1, #0
     386:	4c0d      	ldr	r4, [pc, #52]	; (3bc <_sercom_get_async_baud_val+0x8c>)
     388:	47a0      	blx	r4
     38a:	0002      	movs	r2, r0
     38c:	000b      	movs	r3, r1
     38e:	9200      	str	r2, [sp, #0]
     390:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     392:	0038      	movs	r0, r7
     394:	2100      	movs	r1, #0
     396:	4c0a      	ldr	r4, [pc, #40]	; (3c0 <_sercom_get_async_baud_val+0x90>)
     398:	47a0      	blx	r4
     39a:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     39c:	2380      	movs	r3, #128	; 0x80
     39e:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     3a0:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     3a2:	4298      	cmp	r0, r3
     3a4:	d8cf      	bhi.n	346 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     3a6:	0f79      	lsrs	r1, r7, #29
     3a8:	00f8      	lsls	r0, r7, #3
     3aa:	9a00      	ldr	r2, [sp, #0]
     3ac:	9b01      	ldr	r3, [sp, #4]
     3ae:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     3b0:	00ea      	lsls	r2, r5, #3
     3b2:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     3b4:	b2d2      	uxtb	r2, r2
     3b6:	0352      	lsls	r2, r2, #13
     3b8:	432a      	orrs	r2, r5
     3ba:	e7db      	b.n	374 <_sercom_get_async_baud_val+0x44>
     3bc:	00001955 	.word	0x00001955
     3c0:	0000024d 	.word	0x0000024d

000003c4 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     3c4:	b510      	push	{r4, lr}
     3c6:	b082      	sub	sp, #8
     3c8:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     3ca:	4b0e      	ldr	r3, [pc, #56]	; (404 <sercom_set_gclk_generator+0x40>)
     3cc:	781b      	ldrb	r3, [r3, #0]
     3ce:	2b00      	cmp	r3, #0
     3d0:	d007      	beq.n	3e2 <sercom_set_gclk_generator+0x1e>
     3d2:	2900      	cmp	r1, #0
     3d4:	d105      	bne.n	3e2 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     3d6:	4b0b      	ldr	r3, [pc, #44]	; (404 <sercom_set_gclk_generator+0x40>)
     3d8:	785b      	ldrb	r3, [r3, #1]
     3da:	4283      	cmp	r3, r0
     3dc:	d010      	beq.n	400 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     3de:	201d      	movs	r0, #29
     3e0:	e00c      	b.n	3fc <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     3e2:	a901      	add	r1, sp, #4
     3e4:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     3e6:	2013      	movs	r0, #19
     3e8:	4b07      	ldr	r3, [pc, #28]	; (408 <sercom_set_gclk_generator+0x44>)
     3ea:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     3ec:	2013      	movs	r0, #19
     3ee:	4b07      	ldr	r3, [pc, #28]	; (40c <sercom_set_gclk_generator+0x48>)
     3f0:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     3f2:	4b04      	ldr	r3, [pc, #16]	; (404 <sercom_set_gclk_generator+0x40>)
     3f4:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     3f6:	2201      	movs	r2, #1
     3f8:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     3fa:	2000      	movs	r0, #0
}
     3fc:	b002      	add	sp, #8
     3fe:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     400:	2000      	movs	r0, #0
     402:	e7fb      	b.n	3fc <sercom_set_gclk_generator+0x38>
     404:	20000098 	.word	0x20000098
     408:	00000fa9 	.word	0x00000fa9
     40c:	00000f1d 	.word	0x00000f1d

00000410 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     410:	4b40      	ldr	r3, [pc, #256]	; (514 <_sercom_get_default_pad+0x104>)
     412:	4298      	cmp	r0, r3
     414:	d031      	beq.n	47a <_sercom_get_default_pad+0x6a>
     416:	d90a      	bls.n	42e <_sercom_get_default_pad+0x1e>
     418:	4b3f      	ldr	r3, [pc, #252]	; (518 <_sercom_get_default_pad+0x108>)
     41a:	4298      	cmp	r0, r3
     41c:	d04d      	beq.n	4ba <_sercom_get_default_pad+0xaa>
     41e:	4b3f      	ldr	r3, [pc, #252]	; (51c <_sercom_get_default_pad+0x10c>)
     420:	4298      	cmp	r0, r3
     422:	d05a      	beq.n	4da <_sercom_get_default_pad+0xca>
     424:	4b3e      	ldr	r3, [pc, #248]	; (520 <_sercom_get_default_pad+0x110>)
     426:	4298      	cmp	r0, r3
     428:	d037      	beq.n	49a <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     42a:	2000      	movs	r0, #0
}
     42c:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     42e:	4b3d      	ldr	r3, [pc, #244]	; (524 <_sercom_get_default_pad+0x114>)
     430:	4298      	cmp	r0, r3
     432:	d00c      	beq.n	44e <_sercom_get_default_pad+0x3e>
     434:	4b3c      	ldr	r3, [pc, #240]	; (528 <_sercom_get_default_pad+0x118>)
     436:	4298      	cmp	r0, r3
     438:	d1f7      	bne.n	42a <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     43a:	2901      	cmp	r1, #1
     43c:	d017      	beq.n	46e <_sercom_get_default_pad+0x5e>
     43e:	2900      	cmp	r1, #0
     440:	d05d      	beq.n	4fe <_sercom_get_default_pad+0xee>
     442:	2902      	cmp	r1, #2
     444:	d015      	beq.n	472 <_sercom_get_default_pad+0x62>
     446:	2903      	cmp	r1, #3
     448:	d015      	beq.n	476 <_sercom_get_default_pad+0x66>
	return 0;
     44a:	2000      	movs	r0, #0
     44c:	e7ee      	b.n	42c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     44e:	2901      	cmp	r1, #1
     450:	d007      	beq.n	462 <_sercom_get_default_pad+0x52>
     452:	2900      	cmp	r1, #0
     454:	d051      	beq.n	4fa <_sercom_get_default_pad+0xea>
     456:	2902      	cmp	r1, #2
     458:	d005      	beq.n	466 <_sercom_get_default_pad+0x56>
     45a:	2903      	cmp	r1, #3
     45c:	d005      	beq.n	46a <_sercom_get_default_pad+0x5a>
	return 0;
     45e:	2000      	movs	r0, #0
     460:	e7e4      	b.n	42c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     462:	4832      	ldr	r0, [pc, #200]	; (52c <_sercom_get_default_pad+0x11c>)
     464:	e7e2      	b.n	42c <_sercom_get_default_pad+0x1c>
     466:	4832      	ldr	r0, [pc, #200]	; (530 <_sercom_get_default_pad+0x120>)
     468:	e7e0      	b.n	42c <_sercom_get_default_pad+0x1c>
     46a:	4832      	ldr	r0, [pc, #200]	; (534 <_sercom_get_default_pad+0x124>)
     46c:	e7de      	b.n	42c <_sercom_get_default_pad+0x1c>
     46e:	4832      	ldr	r0, [pc, #200]	; (538 <_sercom_get_default_pad+0x128>)
     470:	e7dc      	b.n	42c <_sercom_get_default_pad+0x1c>
     472:	4832      	ldr	r0, [pc, #200]	; (53c <_sercom_get_default_pad+0x12c>)
     474:	e7da      	b.n	42c <_sercom_get_default_pad+0x1c>
     476:	4832      	ldr	r0, [pc, #200]	; (540 <_sercom_get_default_pad+0x130>)
     478:	e7d8      	b.n	42c <_sercom_get_default_pad+0x1c>
     47a:	2901      	cmp	r1, #1
     47c:	d007      	beq.n	48e <_sercom_get_default_pad+0x7e>
     47e:	2900      	cmp	r1, #0
     480:	d03f      	beq.n	502 <_sercom_get_default_pad+0xf2>
     482:	2902      	cmp	r1, #2
     484:	d005      	beq.n	492 <_sercom_get_default_pad+0x82>
     486:	2903      	cmp	r1, #3
     488:	d005      	beq.n	496 <_sercom_get_default_pad+0x86>
	return 0;
     48a:	2000      	movs	r0, #0
     48c:	e7ce      	b.n	42c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     48e:	482d      	ldr	r0, [pc, #180]	; (544 <_sercom_get_default_pad+0x134>)
     490:	e7cc      	b.n	42c <_sercom_get_default_pad+0x1c>
     492:	482d      	ldr	r0, [pc, #180]	; (548 <_sercom_get_default_pad+0x138>)
     494:	e7ca      	b.n	42c <_sercom_get_default_pad+0x1c>
     496:	482d      	ldr	r0, [pc, #180]	; (54c <_sercom_get_default_pad+0x13c>)
     498:	e7c8      	b.n	42c <_sercom_get_default_pad+0x1c>
     49a:	2901      	cmp	r1, #1
     49c:	d007      	beq.n	4ae <_sercom_get_default_pad+0x9e>
     49e:	2900      	cmp	r1, #0
     4a0:	d031      	beq.n	506 <_sercom_get_default_pad+0xf6>
     4a2:	2902      	cmp	r1, #2
     4a4:	d005      	beq.n	4b2 <_sercom_get_default_pad+0xa2>
     4a6:	2903      	cmp	r1, #3
     4a8:	d005      	beq.n	4b6 <_sercom_get_default_pad+0xa6>
	return 0;
     4aa:	2000      	movs	r0, #0
     4ac:	e7be      	b.n	42c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     4ae:	4828      	ldr	r0, [pc, #160]	; (550 <_sercom_get_default_pad+0x140>)
     4b0:	e7bc      	b.n	42c <_sercom_get_default_pad+0x1c>
     4b2:	4828      	ldr	r0, [pc, #160]	; (554 <_sercom_get_default_pad+0x144>)
     4b4:	e7ba      	b.n	42c <_sercom_get_default_pad+0x1c>
     4b6:	4828      	ldr	r0, [pc, #160]	; (558 <_sercom_get_default_pad+0x148>)
     4b8:	e7b8      	b.n	42c <_sercom_get_default_pad+0x1c>
     4ba:	2901      	cmp	r1, #1
     4bc:	d007      	beq.n	4ce <_sercom_get_default_pad+0xbe>
     4be:	2900      	cmp	r1, #0
     4c0:	d023      	beq.n	50a <_sercom_get_default_pad+0xfa>
     4c2:	2902      	cmp	r1, #2
     4c4:	d005      	beq.n	4d2 <_sercom_get_default_pad+0xc2>
     4c6:	2903      	cmp	r1, #3
     4c8:	d005      	beq.n	4d6 <_sercom_get_default_pad+0xc6>
	return 0;
     4ca:	2000      	movs	r0, #0
     4cc:	e7ae      	b.n	42c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     4ce:	4823      	ldr	r0, [pc, #140]	; (55c <_sercom_get_default_pad+0x14c>)
     4d0:	e7ac      	b.n	42c <_sercom_get_default_pad+0x1c>
     4d2:	4823      	ldr	r0, [pc, #140]	; (560 <_sercom_get_default_pad+0x150>)
     4d4:	e7aa      	b.n	42c <_sercom_get_default_pad+0x1c>
     4d6:	4823      	ldr	r0, [pc, #140]	; (564 <_sercom_get_default_pad+0x154>)
     4d8:	e7a8      	b.n	42c <_sercom_get_default_pad+0x1c>
     4da:	2901      	cmp	r1, #1
     4dc:	d007      	beq.n	4ee <_sercom_get_default_pad+0xde>
     4de:	2900      	cmp	r1, #0
     4e0:	d015      	beq.n	50e <_sercom_get_default_pad+0xfe>
     4e2:	2902      	cmp	r1, #2
     4e4:	d005      	beq.n	4f2 <_sercom_get_default_pad+0xe2>
     4e6:	2903      	cmp	r1, #3
     4e8:	d005      	beq.n	4f6 <_sercom_get_default_pad+0xe6>
	return 0;
     4ea:	2000      	movs	r0, #0
     4ec:	e79e      	b.n	42c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     4ee:	481e      	ldr	r0, [pc, #120]	; (568 <_sercom_get_default_pad+0x158>)
     4f0:	e79c      	b.n	42c <_sercom_get_default_pad+0x1c>
     4f2:	481e      	ldr	r0, [pc, #120]	; (56c <_sercom_get_default_pad+0x15c>)
     4f4:	e79a      	b.n	42c <_sercom_get_default_pad+0x1c>
     4f6:	481e      	ldr	r0, [pc, #120]	; (570 <_sercom_get_default_pad+0x160>)
     4f8:	e798      	b.n	42c <_sercom_get_default_pad+0x1c>
     4fa:	481e      	ldr	r0, [pc, #120]	; (574 <_sercom_get_default_pad+0x164>)
     4fc:	e796      	b.n	42c <_sercom_get_default_pad+0x1c>
     4fe:	2003      	movs	r0, #3
     500:	e794      	b.n	42c <_sercom_get_default_pad+0x1c>
     502:	481d      	ldr	r0, [pc, #116]	; (578 <_sercom_get_default_pad+0x168>)
     504:	e792      	b.n	42c <_sercom_get_default_pad+0x1c>
     506:	481d      	ldr	r0, [pc, #116]	; (57c <_sercom_get_default_pad+0x16c>)
     508:	e790      	b.n	42c <_sercom_get_default_pad+0x1c>
     50a:	481d      	ldr	r0, [pc, #116]	; (580 <_sercom_get_default_pad+0x170>)
     50c:	e78e      	b.n	42c <_sercom_get_default_pad+0x1c>
     50e:	481d      	ldr	r0, [pc, #116]	; (584 <_sercom_get_default_pad+0x174>)
     510:	e78c      	b.n	42c <_sercom_get_default_pad+0x1c>
     512:	46c0      	nop			; (mov r8, r8)
     514:	42001000 	.word	0x42001000
     518:	42001800 	.word	0x42001800
     51c:	42001c00 	.word	0x42001c00
     520:	42001400 	.word	0x42001400
     524:	42000800 	.word	0x42000800
     528:	42000c00 	.word	0x42000c00
     52c:	00050003 	.word	0x00050003
     530:	00060003 	.word	0x00060003
     534:	00070003 	.word	0x00070003
     538:	00010003 	.word	0x00010003
     53c:	001e0003 	.word	0x001e0003
     540:	001f0003 	.word	0x001f0003
     544:	00090003 	.word	0x00090003
     548:	000a0003 	.word	0x000a0003
     54c:	000b0003 	.word	0x000b0003
     550:	00110003 	.word	0x00110003
     554:	00120003 	.word	0x00120003
     558:	00130003 	.word	0x00130003
     55c:	000d0003 	.word	0x000d0003
     560:	000e0003 	.word	0x000e0003
     564:	000f0003 	.word	0x000f0003
     568:	00170003 	.word	0x00170003
     56c:	00180003 	.word	0x00180003
     570:	00190003 	.word	0x00190003
     574:	00040003 	.word	0x00040003
     578:	00080003 	.word	0x00080003
     57c:	00100003 	.word	0x00100003
     580:	000c0003 	.word	0x000c0003
     584:	00160003 	.word	0x00160003

00000588 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     588:	b530      	push	{r4, r5, lr}
     58a:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     58c:	4b0b      	ldr	r3, [pc, #44]	; (5bc <_sercom_get_sercom_inst_index+0x34>)
     58e:	466a      	mov	r2, sp
     590:	cb32      	ldmia	r3!, {r1, r4, r5}
     592:	c232      	stmia	r2!, {r1, r4, r5}
     594:	cb32      	ldmia	r3!, {r1, r4, r5}
     596:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     598:	9b00      	ldr	r3, [sp, #0]
     59a:	4283      	cmp	r3, r0
     59c:	d00b      	beq.n	5b6 <_sercom_get_sercom_inst_index+0x2e>
     59e:	2301      	movs	r3, #1
     5a0:	009a      	lsls	r2, r3, #2
     5a2:	4669      	mov	r1, sp
     5a4:	5852      	ldr	r2, [r2, r1]
     5a6:	4282      	cmp	r2, r0
     5a8:	d006      	beq.n	5b8 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     5aa:	3301      	adds	r3, #1
     5ac:	2b06      	cmp	r3, #6
     5ae:	d1f7      	bne.n	5a0 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     5b0:	2000      	movs	r0, #0
}
     5b2:	b007      	add	sp, #28
     5b4:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     5b6:	2300      	movs	r3, #0
			return i;
     5b8:	b2d8      	uxtb	r0, r3
     5ba:	e7fa      	b.n	5b2 <_sercom_get_sercom_inst_index+0x2a>
     5bc:	00001b58 	.word	0x00001b58

000005c0 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     5c0:	4770      	bx	lr
	...

000005c4 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     5c4:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     5c6:	4b0a      	ldr	r3, [pc, #40]	; (5f0 <_sercom_set_handler+0x2c>)
     5c8:	781b      	ldrb	r3, [r3, #0]
     5ca:	2b00      	cmp	r3, #0
     5cc:	d10c      	bne.n	5e8 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     5ce:	4f09      	ldr	r7, [pc, #36]	; (5f4 <_sercom_set_handler+0x30>)
     5d0:	4e09      	ldr	r6, [pc, #36]	; (5f8 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     5d2:	4d0a      	ldr	r5, [pc, #40]	; (5fc <_sercom_set_handler+0x38>)
     5d4:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     5d6:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     5d8:	195a      	adds	r2, r3, r5
     5da:	6014      	str	r4, [r2, #0]
     5dc:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     5de:	2b18      	cmp	r3, #24
     5e0:	d1f9      	bne.n	5d6 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
     5e2:	2201      	movs	r2, #1
     5e4:	4b02      	ldr	r3, [pc, #8]	; (5f0 <_sercom_set_handler+0x2c>)
     5e6:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     5e8:	0080      	lsls	r0, r0, #2
     5ea:	4b02      	ldr	r3, [pc, #8]	; (5f4 <_sercom_set_handler+0x30>)
     5ec:	50c1      	str	r1, [r0, r3]
}
     5ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
     5f0:	2000009a 	.word	0x2000009a
     5f4:	2000009c 	.word	0x2000009c
     5f8:	000005c1 	.word	0x000005c1
     5fc:	200000d8 	.word	0x200000d8

00000600 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     600:	b500      	push	{lr}
     602:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     604:	2309      	movs	r3, #9
     606:	466a      	mov	r2, sp
     608:	7013      	strb	r3, [r2, #0]
     60a:	3301      	adds	r3, #1
     60c:	7053      	strb	r3, [r2, #1]
     60e:	3301      	adds	r3, #1
     610:	7093      	strb	r3, [r2, #2]
     612:	3301      	adds	r3, #1
     614:	70d3      	strb	r3, [r2, #3]
     616:	3301      	adds	r3, #1
     618:	7113      	strb	r3, [r2, #4]
     61a:	3301      	adds	r3, #1
     61c:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     61e:	4b03      	ldr	r3, [pc, #12]	; (62c <_sercom_get_interrupt_vector+0x2c>)
     620:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     622:	466b      	mov	r3, sp
     624:	5618      	ldrsb	r0, [r3, r0]
}
     626:	b003      	add	sp, #12
     628:	bd00      	pop	{pc}
     62a:	46c0      	nop			; (mov r8, r8)
     62c:	00000589 	.word	0x00000589

00000630 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     630:	b510      	push	{r4, lr}
     632:	4b02      	ldr	r3, [pc, #8]	; (63c <SERCOM0_Handler+0xc>)
     634:	681b      	ldr	r3, [r3, #0]
     636:	2000      	movs	r0, #0
     638:	4798      	blx	r3
     63a:	bd10      	pop	{r4, pc}
     63c:	2000009c 	.word	0x2000009c

00000640 <SERCOM1_Handler>:
     640:	b510      	push	{r4, lr}
     642:	4b02      	ldr	r3, [pc, #8]	; (64c <SERCOM1_Handler+0xc>)
     644:	685b      	ldr	r3, [r3, #4]
     646:	2001      	movs	r0, #1
     648:	4798      	blx	r3
     64a:	bd10      	pop	{r4, pc}
     64c:	2000009c 	.word	0x2000009c

00000650 <SERCOM2_Handler>:
     650:	b510      	push	{r4, lr}
     652:	4b02      	ldr	r3, [pc, #8]	; (65c <SERCOM2_Handler+0xc>)
     654:	689b      	ldr	r3, [r3, #8]
     656:	2002      	movs	r0, #2
     658:	4798      	blx	r3
     65a:	bd10      	pop	{r4, pc}
     65c:	2000009c 	.word	0x2000009c

00000660 <SERCOM3_Handler>:
     660:	b510      	push	{r4, lr}
     662:	4b02      	ldr	r3, [pc, #8]	; (66c <SERCOM3_Handler+0xc>)
     664:	68db      	ldr	r3, [r3, #12]
     666:	2003      	movs	r0, #3
     668:	4798      	blx	r3
     66a:	bd10      	pop	{r4, pc}
     66c:	2000009c 	.word	0x2000009c

00000670 <SERCOM4_Handler>:
     670:	b510      	push	{r4, lr}
     672:	4b02      	ldr	r3, [pc, #8]	; (67c <SERCOM4_Handler+0xc>)
     674:	691b      	ldr	r3, [r3, #16]
     676:	2004      	movs	r0, #4
     678:	4798      	blx	r3
     67a:	bd10      	pop	{r4, pc}
     67c:	2000009c 	.word	0x2000009c

00000680 <SERCOM5_Handler>:
     680:	b510      	push	{r4, lr}
     682:	4b02      	ldr	r3, [pc, #8]	; (68c <SERCOM5_Handler+0xc>)
     684:	695b      	ldr	r3, [r3, #20]
     686:	2005      	movs	r0, #5
     688:	4798      	blx	r3
     68a:	bd10      	pop	{r4, pc}
     68c:	2000009c 	.word	0x2000009c

00000690 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     690:	b5f0      	push	{r4, r5, r6, r7, lr}
     692:	46de      	mov	lr, fp
     694:	4657      	mov	r7, sl
     696:	464e      	mov	r6, r9
     698:	4645      	mov	r5, r8
     69a:	b5e0      	push	{r5, r6, r7, lr}
     69c:	b091      	sub	sp, #68	; 0x44
     69e:	0005      	movs	r5, r0
     6a0:	000c      	movs	r4, r1
     6a2:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     6a4:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     6a6:	0008      	movs	r0, r1
     6a8:	4bba      	ldr	r3, [pc, #744]	; (994 <usart_init+0x304>)
     6aa:	4798      	blx	r3
     6ac:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     6ae:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     6b0:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     6b2:	07db      	lsls	r3, r3, #31
     6b4:	d506      	bpl.n	6c4 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     6b6:	b011      	add	sp, #68	; 0x44
     6b8:	bc3c      	pop	{r2, r3, r4, r5}
     6ba:	4690      	mov	r8, r2
     6bc:	4699      	mov	r9, r3
     6be:	46a2      	mov	sl, r4
     6c0:	46ab      	mov	fp, r5
     6c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     6c4:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
     6c6:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     6c8:	079b      	lsls	r3, r3, #30
     6ca:	d4f4      	bmi.n	6b6 <usart_init+0x26>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     6cc:	49b2      	ldr	r1, [pc, #712]	; (998 <usart_init+0x308>)
     6ce:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     6d0:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     6d2:	2301      	movs	r3, #1
     6d4:	40bb      	lsls	r3, r7
     6d6:	4303      	orrs	r3, r0
     6d8:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     6da:	a90f      	add	r1, sp, #60	; 0x3c
     6dc:	272d      	movs	r7, #45	; 0x2d
     6de:	5df3      	ldrb	r3, [r6, r7]
     6e0:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     6e2:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     6e4:	b2d3      	uxtb	r3, r2
     6e6:	9302      	str	r3, [sp, #8]
     6e8:	0018      	movs	r0, r3
     6ea:	4bac      	ldr	r3, [pc, #688]	; (99c <usart_init+0x30c>)
     6ec:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     6ee:	9802      	ldr	r0, [sp, #8]
     6f0:	4bab      	ldr	r3, [pc, #684]	; (9a0 <usart_init+0x310>)
     6f2:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     6f4:	5df0      	ldrb	r0, [r6, r7]
     6f6:	2100      	movs	r1, #0
     6f8:	4baa      	ldr	r3, [pc, #680]	; (9a4 <usart_init+0x314>)
     6fa:	4798      	blx	r3
	module->character_size = config->character_size;
     6fc:	7af3      	ldrb	r3, [r6, #11]
     6fe:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
     700:	2324      	movs	r3, #36	; 0x24
     702:	5cf3      	ldrb	r3, [r6, r3]
     704:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     706:	2325      	movs	r3, #37	; 0x25
     708:	5cf3      	ldrb	r3, [r6, r3]
     70a:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
     70c:	7ef3      	ldrb	r3, [r6, #27]
     70e:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     710:	7f33      	ldrb	r3, [r6, #28]
     712:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
     714:	682b      	ldr	r3, [r5, #0]
     716:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     718:	0018      	movs	r0, r3
     71a:	4b9e      	ldr	r3, [pc, #632]	; (994 <usart_init+0x304>)
     71c:	4798      	blx	r3
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     71e:	3014      	adds	r0, #20
	uint16_t baud  = 0;
     720:	2200      	movs	r2, #0
     722:	230e      	movs	r3, #14
     724:	a906      	add	r1, sp, #24
     726:	468c      	mov	ip, r1
     728:	4463      	add	r3, ip
     72a:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
     72c:	8a32      	ldrh	r2, [r6, #16]
     72e:	9202      	str	r2, [sp, #8]
     730:	2380      	movs	r3, #128	; 0x80
     732:	01db      	lsls	r3, r3, #7
     734:	429a      	cmp	r2, r3
     736:	d100      	bne.n	73a <usart_init+0xaa>
     738:	e09a      	b.n	870 <usart_init+0x1e0>
     73a:	d90f      	bls.n	75c <usart_init+0xcc>
     73c:	23c0      	movs	r3, #192	; 0xc0
     73e:	01db      	lsls	r3, r3, #7
     740:	9a02      	ldr	r2, [sp, #8]
     742:	429a      	cmp	r2, r3
     744:	d100      	bne.n	748 <usart_init+0xb8>
     746:	e08e      	b.n	866 <usart_init+0x1d6>
     748:	2380      	movs	r3, #128	; 0x80
     74a:	021b      	lsls	r3, r3, #8
     74c:	429a      	cmp	r2, r3
     74e:	d000      	beq.n	752 <usart_init+0xc2>
     750:	e11b      	b.n	98a <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     752:	2303      	movs	r3, #3
     754:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     756:	2300      	movs	r3, #0
     758:	9307      	str	r3, [sp, #28]
     75a:	e008      	b.n	76e <usart_init+0xde>
	switch (config->sample_rate) {
     75c:	2380      	movs	r3, #128	; 0x80
     75e:	019b      	lsls	r3, r3, #6
     760:	429a      	cmp	r2, r3
     762:	d000      	beq.n	766 <usart_init+0xd6>
     764:	e111      	b.n	98a <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     766:	2310      	movs	r3, #16
     768:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     76a:	3b0f      	subs	r3, #15
     76c:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
     76e:	6833      	ldr	r3, [r6, #0]
     770:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     772:	68f3      	ldr	r3, [r6, #12]
     774:	469b      	mov	fp, r3
		config->sample_adjustment |
     776:	6973      	ldr	r3, [r6, #20]
     778:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     77a:	7e33      	ldrb	r3, [r6, #24]
     77c:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     77e:	2326      	movs	r3, #38	; 0x26
     780:	5cf3      	ldrb	r3, [r6, r3]
     782:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     784:	6873      	ldr	r3, [r6, #4]
     786:	4699      	mov	r9, r3
	switch (transfer_mode)
     788:	2b00      	cmp	r3, #0
     78a:	d100      	bne.n	78e <usart_init+0xfe>
     78c:	e09c      	b.n	8c8 <usart_init+0x238>
     78e:	2380      	movs	r3, #128	; 0x80
     790:	055b      	lsls	r3, r3, #21
     792:	4599      	cmp	r9, r3
     794:	d100      	bne.n	798 <usart_init+0x108>
     796:	e080      	b.n	89a <usart_init+0x20a>
	if(config->encoding_format_enable) {
     798:	7e73      	ldrb	r3, [r6, #25]
     79a:	2b00      	cmp	r3, #0
     79c:	d002      	beq.n	7a4 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     79e:	7eb3      	ldrb	r3, [r6, #26]
     7a0:	4642      	mov	r2, r8
     7a2:	7393      	strb	r3, [r2, #14]
	usart_hw->BAUD.reg = baud;
     7a4:	230e      	movs	r3, #14
     7a6:	aa06      	add	r2, sp, #24
     7a8:	4694      	mov	ip, r2
     7aa:	4463      	add	r3, ip
     7ac:	881b      	ldrh	r3, [r3, #0]
     7ae:	4642      	mov	r2, r8
     7b0:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
     7b2:	9b05      	ldr	r3, [sp, #20]
     7b4:	465a      	mov	r2, fp
     7b6:	4313      	orrs	r3, r2
     7b8:	9a03      	ldr	r2, [sp, #12]
     7ba:	4313      	orrs	r3, r2
     7bc:	464a      	mov	r2, r9
     7be:	4313      	orrs	r3, r2
     7c0:	9f02      	ldr	r7, [sp, #8]
     7c2:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     7c4:	9b04      	ldr	r3, [sp, #16]
     7c6:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
     7c8:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     7ca:	4653      	mov	r3, sl
     7cc:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
     7ce:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
     7d0:	2327      	movs	r3, #39	; 0x27
     7d2:	5cf3      	ldrb	r3, [r6, r3]
     7d4:	2b00      	cmp	r3, #0
     7d6:	d101      	bne.n	7dc <usart_init+0x14c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     7d8:	3304      	adds	r3, #4
     7da:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     7dc:	7e73      	ldrb	r3, [r6, #25]
     7de:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     7e0:	7f32      	ldrb	r2, [r6, #28]
     7e2:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     7e4:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     7e6:	7f72      	ldrb	r2, [r6, #29]
     7e8:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     7ea:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     7ec:	2224      	movs	r2, #36	; 0x24
     7ee:	5cb2      	ldrb	r2, [r6, r2]
     7f0:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     7f2:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     7f4:	2225      	movs	r2, #37	; 0x25
     7f6:	5cb2      	ldrb	r2, [r6, r2]
     7f8:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     7fa:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
     7fc:	7ab1      	ldrb	r1, [r6, #10]
     7fe:	7af2      	ldrb	r2, [r6, #11]
     800:	4311      	orrs	r1, r2
     802:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
     804:	8933      	ldrh	r3, [r6, #8]
     806:	2bff      	cmp	r3, #255	; 0xff
     808:	d100      	bne.n	80c <usart_init+0x17c>
     80a:	e081      	b.n	910 <usart_init+0x280>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     80c:	2280      	movs	r2, #128	; 0x80
     80e:	0452      	lsls	r2, r2, #17
     810:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
     812:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
     814:	232c      	movs	r3, #44	; 0x2c
     816:	5cf3      	ldrb	r3, [r6, r3]
     818:	2b00      	cmp	r3, #0
     81a:	d103      	bne.n	824 <usart_init+0x194>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     81c:	4b62      	ldr	r3, [pc, #392]	; (9a8 <usart_init+0x318>)
     81e:	789b      	ldrb	r3, [r3, #2]
     820:	079b      	lsls	r3, r3, #30
     822:	d501      	bpl.n	828 <usart_init+0x198>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     824:	2380      	movs	r3, #128	; 0x80
     826:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     828:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     82a:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     82c:	2b00      	cmp	r3, #0
     82e:	d1fc      	bne.n	82a <usart_init+0x19a>
	usart_hw->CTRLB.reg = ctrlb;
     830:	4643      	mov	r3, r8
     832:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
     834:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     836:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     838:	2b00      	cmp	r3, #0
     83a:	d1fc      	bne.n	836 <usart_init+0x1a6>
	usart_hw->CTRLA.reg = ctrla;
     83c:	4643      	mov	r3, r8
     83e:	601f      	str	r7, [r3, #0]
     840:	ab0e      	add	r3, sp, #56	; 0x38
     842:	2280      	movs	r2, #128	; 0x80
     844:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     846:	2200      	movs	r2, #0
     848:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     84a:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     84c:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     84e:	6b33      	ldr	r3, [r6, #48]	; 0x30
     850:	930a      	str	r3, [sp, #40]	; 0x28
     852:	6b73      	ldr	r3, [r6, #52]	; 0x34
     854:	930b      	str	r3, [sp, #44]	; 0x2c
     856:	6bb3      	ldr	r3, [r6, #56]	; 0x38
     858:	930c      	str	r3, [sp, #48]	; 0x30
     85a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
     85c:	9302      	str	r3, [sp, #8]
     85e:	930d      	str	r3, [sp, #52]	; 0x34
     860:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     862:	ae0a      	add	r6, sp, #40	; 0x28
     864:	e063      	b.n	92e <usart_init+0x29e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     866:	2308      	movs	r3, #8
     868:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     86a:	3b07      	subs	r3, #7
     86c:	9307      	str	r3, [sp, #28]
     86e:	e77e      	b.n	76e <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
     870:	6833      	ldr	r3, [r6, #0]
     872:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     874:	68f3      	ldr	r3, [r6, #12]
     876:	469b      	mov	fp, r3
		config->sample_adjustment |
     878:	6973      	ldr	r3, [r6, #20]
     87a:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     87c:	7e33      	ldrb	r3, [r6, #24]
     87e:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     880:	2326      	movs	r3, #38	; 0x26
     882:	5cf3      	ldrb	r3, [r6, r3]
     884:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     886:	6873      	ldr	r3, [r6, #4]
     888:	4699      	mov	r9, r3
	switch (transfer_mode)
     88a:	2b00      	cmp	r3, #0
     88c:	d018      	beq.n	8c0 <usart_init+0x230>
     88e:	2380      	movs	r3, #128	; 0x80
     890:	055b      	lsls	r3, r3, #21
     892:	4599      	cmp	r9, r3
     894:	d001      	beq.n	89a <usart_init+0x20a>
	enum status_code status_code = STATUS_OK;
     896:	2000      	movs	r0, #0
     898:	e025      	b.n	8e6 <usart_init+0x256>
			if (!config->use_external_clock) {
     89a:	2327      	movs	r3, #39	; 0x27
     89c:	5cf3      	ldrb	r3, [r6, r3]
     89e:	2b00      	cmp	r3, #0
     8a0:	d000      	beq.n	8a4 <usart_init+0x214>
     8a2:	e779      	b.n	798 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     8a4:	6a33      	ldr	r3, [r6, #32]
     8a6:	001f      	movs	r7, r3
     8a8:	b2c0      	uxtb	r0, r0
     8aa:	4b40      	ldr	r3, [pc, #256]	; (9ac <usart_init+0x31c>)
     8ac:	4798      	blx	r3
     8ae:	0001      	movs	r1, r0
     8b0:	220e      	movs	r2, #14
     8b2:	ab06      	add	r3, sp, #24
     8b4:	469c      	mov	ip, r3
     8b6:	4462      	add	r2, ip
     8b8:	0038      	movs	r0, r7
     8ba:	4b3d      	ldr	r3, [pc, #244]	; (9b0 <usart_init+0x320>)
     8bc:	4798      	blx	r3
     8be:	e012      	b.n	8e6 <usart_init+0x256>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     8c0:	2308      	movs	r3, #8
     8c2:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     8c4:	2300      	movs	r3, #0
     8c6:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
     8c8:	2327      	movs	r3, #39	; 0x27
     8ca:	5cf3      	ldrb	r3, [r6, r3]
     8cc:	2b00      	cmp	r3, #0
     8ce:	d00e      	beq.n	8ee <usart_init+0x25e>
				status_code =
     8d0:	9b06      	ldr	r3, [sp, #24]
     8d2:	9300      	str	r3, [sp, #0]
     8d4:	9b07      	ldr	r3, [sp, #28]
     8d6:	220e      	movs	r2, #14
     8d8:	a906      	add	r1, sp, #24
     8da:	468c      	mov	ip, r1
     8dc:	4462      	add	r2, ip
     8de:	6ab1      	ldr	r1, [r6, #40]	; 0x28
     8e0:	6a30      	ldr	r0, [r6, #32]
     8e2:	4f34      	ldr	r7, [pc, #208]	; (9b4 <usart_init+0x324>)
     8e4:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
     8e6:	2800      	cmp	r0, #0
     8e8:	d000      	beq.n	8ec <usart_init+0x25c>
     8ea:	e6e4      	b.n	6b6 <usart_init+0x26>
     8ec:	e754      	b.n	798 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
     8ee:	6a33      	ldr	r3, [r6, #32]
     8f0:	001f      	movs	r7, r3
     8f2:	b2c0      	uxtb	r0, r0
     8f4:	4b2d      	ldr	r3, [pc, #180]	; (9ac <usart_init+0x31c>)
     8f6:	4798      	blx	r3
     8f8:	0001      	movs	r1, r0
				status_code =
     8fa:	9b06      	ldr	r3, [sp, #24]
     8fc:	9300      	str	r3, [sp, #0]
     8fe:	9b07      	ldr	r3, [sp, #28]
     900:	220e      	movs	r2, #14
     902:	a806      	add	r0, sp, #24
     904:	4684      	mov	ip, r0
     906:	4462      	add	r2, ip
     908:	0038      	movs	r0, r7
     90a:	4f2a      	ldr	r7, [pc, #168]	; (9b4 <usart_init+0x324>)
     90c:	47b8      	blx	r7
     90e:	e7ea      	b.n	8e6 <usart_init+0x256>
		if(config->lin_slave_enable) {
     910:	7ef3      	ldrb	r3, [r6, #27]
     912:	2b00      	cmp	r3, #0
     914:	d100      	bne.n	918 <usart_init+0x288>
     916:	e77d      	b.n	814 <usart_init+0x184>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     918:	2380      	movs	r3, #128	; 0x80
     91a:	04db      	lsls	r3, r3, #19
     91c:	431f      	orrs	r7, r3
     91e:	e779      	b.n	814 <usart_init+0x184>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     920:	0020      	movs	r0, r4
     922:	4b25      	ldr	r3, [pc, #148]	; (9b8 <usart_init+0x328>)
     924:	4798      	blx	r3
     926:	e007      	b.n	938 <usart_init+0x2a8>
     928:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     92a:	2f04      	cmp	r7, #4
     92c:	d00d      	beq.n	94a <usart_init+0x2ba>
     92e:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
     930:	00bb      	lsls	r3, r7, #2
     932:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
     934:	2800      	cmp	r0, #0
     936:	d0f3      	beq.n	920 <usart_init+0x290>
		if (current_pinmux != PINMUX_UNUSED) {
     938:	1c43      	adds	r3, r0, #1
     93a:	d0f5      	beq.n	928 <usart_init+0x298>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     93c:	a90e      	add	r1, sp, #56	; 0x38
     93e:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     940:	0c00      	lsrs	r0, r0, #16
     942:	b2c0      	uxtb	r0, r0
     944:	4b1d      	ldr	r3, [pc, #116]	; (9bc <usart_init+0x32c>)
     946:	4798      	blx	r3
     948:	e7ee      	b.n	928 <usart_init+0x298>
		module->callback[i]            = NULL;
     94a:	2300      	movs	r3, #0
     94c:	60eb      	str	r3, [r5, #12]
     94e:	612b      	str	r3, [r5, #16]
     950:	616b      	str	r3, [r5, #20]
     952:	61ab      	str	r3, [r5, #24]
     954:	61eb      	str	r3, [r5, #28]
     956:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
     958:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     95a:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     95c:	2200      	movs	r2, #0
     95e:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     960:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     962:	3330      	adds	r3, #48	; 0x30
     964:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     966:	3301      	adds	r3, #1
     968:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     96a:	3301      	adds	r3, #1
     96c:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     96e:	3301      	adds	r3, #1
     970:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     972:	6828      	ldr	r0, [r5, #0]
     974:	4b07      	ldr	r3, [pc, #28]	; (994 <usart_init+0x304>)
     976:	4798      	blx	r3
     978:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     97a:	4911      	ldr	r1, [pc, #68]	; (9c0 <usart_init+0x330>)
     97c:	4b11      	ldr	r3, [pc, #68]	; (9c4 <usart_init+0x334>)
     97e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     980:	00a4      	lsls	r4, r4, #2
     982:	4b11      	ldr	r3, [pc, #68]	; (9c8 <usart_init+0x338>)
     984:	50e5      	str	r5, [r4, r3]
	return status_code;
     986:	2000      	movs	r0, #0
     988:	e695      	b.n	6b6 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     98a:	2310      	movs	r3, #16
     98c:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     98e:	2300      	movs	r3, #0
     990:	9307      	str	r3, [sp, #28]
     992:	e6ec      	b.n	76e <usart_init+0xde>
     994:	00000589 	.word	0x00000589
     998:	40000400 	.word	0x40000400
     99c:	00000fa9 	.word	0x00000fa9
     9a0:	00000f1d 	.word	0x00000f1d
     9a4:	000003c5 	.word	0x000003c5
     9a8:	41002000 	.word	0x41002000
     9ac:	00000fc5 	.word	0x00000fc5
     9b0:	00000307 	.word	0x00000307
     9b4:	00000331 	.word	0x00000331
     9b8:	00000411 	.word	0x00000411
     9bc:	000010a1 	.word	0x000010a1
     9c0:	000009cd 	.word	0x000009cd
     9c4:	000005c5 	.word	0x000005c5
     9c8:	200000d8 	.word	0x200000d8

000009cc <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     9cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     9ce:	0080      	lsls	r0, r0, #2
     9d0:	4b62      	ldr	r3, [pc, #392]	; (b5c <_usart_interrupt_handler+0x190>)
     9d2:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     9d4:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     9d6:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
     9d8:	2b00      	cmp	r3, #0
     9da:	d1fc      	bne.n	9d6 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     9dc:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
     9de:	7da6      	ldrb	r6, [r4, #22]
     9e0:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
     9e2:	2330      	movs	r3, #48	; 0x30
     9e4:	5ceb      	ldrb	r3, [r5, r3]
     9e6:	2231      	movs	r2, #49	; 0x31
     9e8:	5caf      	ldrb	r7, [r5, r2]
     9ea:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     9ec:	07f3      	lsls	r3, r6, #31
     9ee:	d522      	bpl.n	a36 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
     9f0:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     9f2:	b29b      	uxth	r3, r3
     9f4:	2b00      	cmp	r3, #0
     9f6:	d01c      	beq.n	a32 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     9f8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
     9fa:	7813      	ldrb	r3, [r2, #0]
     9fc:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     9fe:	1c51      	adds	r1, r2, #1
     a00:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     a02:	7969      	ldrb	r1, [r5, #5]
     a04:	2901      	cmp	r1, #1
     a06:	d00e      	beq.n	a26 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     a08:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     a0a:	05db      	lsls	r3, r3, #23
     a0c:	0ddb      	lsrs	r3, r3, #23
     a0e:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
     a10:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     a12:	3b01      	subs	r3, #1
     a14:	b29b      	uxth	r3, r3
     a16:	85eb      	strh	r3, [r5, #46]	; 0x2e
     a18:	2b00      	cmp	r3, #0
     a1a:	d10c      	bne.n	a36 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     a1c:	3301      	adds	r3, #1
     a1e:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     a20:	3301      	adds	r3, #1
     a22:	75a3      	strb	r3, [r4, #22]
     a24:	e007      	b.n	a36 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     a26:	7851      	ldrb	r1, [r2, #1]
     a28:	0209      	lsls	r1, r1, #8
     a2a:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
     a2c:	3202      	adds	r2, #2
     a2e:	62aa      	str	r2, [r5, #40]	; 0x28
     a30:	e7eb      	b.n	a0a <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     a32:	2301      	movs	r3, #1
     a34:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     a36:	07b3      	lsls	r3, r6, #30
     a38:	d506      	bpl.n	a48 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     a3a:	2302      	movs	r3, #2
     a3c:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
     a3e:	2200      	movs	r2, #0
     a40:	3331      	adds	r3, #49	; 0x31
     a42:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     a44:	07fb      	lsls	r3, r7, #31
     a46:	d41a      	bmi.n	a7e <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     a48:	0773      	lsls	r3, r6, #29
     a4a:	d565      	bpl.n	b18 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
     a4c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     a4e:	b29b      	uxth	r3, r3
     a50:	2b00      	cmp	r3, #0
     a52:	d05f      	beq.n	b14 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     a54:	8b63      	ldrh	r3, [r4, #26]
     a56:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
     a58:	071a      	lsls	r2, r3, #28
     a5a:	d414      	bmi.n	a86 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     a5c:	223f      	movs	r2, #63	; 0x3f
     a5e:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
     a60:	2b00      	cmp	r3, #0
     a62:	d034      	beq.n	ace <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     a64:	079a      	lsls	r2, r3, #30
     a66:	d511      	bpl.n	a8c <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     a68:	221a      	movs	r2, #26
     a6a:	2332      	movs	r3, #50	; 0x32
     a6c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     a6e:	3b30      	subs	r3, #48	; 0x30
     a70:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
     a72:	077b      	lsls	r3, r7, #29
     a74:	d550      	bpl.n	b18 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
     a76:	0028      	movs	r0, r5
     a78:	696b      	ldr	r3, [r5, #20]
     a7a:	4798      	blx	r3
     a7c:	e04c      	b.n	b18 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     a7e:	0028      	movs	r0, r5
     a80:	68eb      	ldr	r3, [r5, #12]
     a82:	4798      	blx	r3
     a84:	e7e0      	b.n	a48 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
     a86:	2237      	movs	r2, #55	; 0x37
     a88:	4013      	ands	r3, r2
     a8a:	e7e9      	b.n	a60 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     a8c:	075a      	lsls	r2, r3, #29
     a8e:	d505      	bpl.n	a9c <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
     a90:	221e      	movs	r2, #30
     a92:	2332      	movs	r3, #50	; 0x32
     a94:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     a96:	3b2e      	subs	r3, #46	; 0x2e
     a98:	8363      	strh	r3, [r4, #26]
     a9a:	e7ea      	b.n	a72 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     a9c:	07da      	lsls	r2, r3, #31
     a9e:	d505      	bpl.n	aac <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
     aa0:	2213      	movs	r2, #19
     aa2:	2332      	movs	r3, #50	; 0x32
     aa4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     aa6:	3b31      	subs	r3, #49	; 0x31
     aa8:	8363      	strh	r3, [r4, #26]
     aaa:	e7e2      	b.n	a72 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
     aac:	06da      	lsls	r2, r3, #27
     aae:	d505      	bpl.n	abc <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
     ab0:	2242      	movs	r2, #66	; 0x42
     ab2:	2332      	movs	r3, #50	; 0x32
     ab4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     ab6:	3b22      	subs	r3, #34	; 0x22
     ab8:	8363      	strh	r3, [r4, #26]
     aba:	e7da      	b.n	a72 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
     abc:	2220      	movs	r2, #32
     abe:	421a      	tst	r2, r3
     ac0:	d0d7      	beq.n	a72 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
     ac2:	3221      	adds	r2, #33	; 0x21
     ac4:	2332      	movs	r3, #50	; 0x32
     ac6:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     ac8:	3b12      	subs	r3, #18
     aca:	8363      	strh	r3, [r4, #26]
     acc:	e7d1      	b.n	a72 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     ace:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     ad0:	05db      	lsls	r3, r3, #23
     ad2:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
     ad4:	b2da      	uxtb	r2, r3
     ad6:	6a69      	ldr	r1, [r5, #36]	; 0x24
     ad8:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
     ada:	6a6a      	ldr	r2, [r5, #36]	; 0x24
     adc:	1c51      	adds	r1, r2, #1
     ade:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     ae0:	7969      	ldrb	r1, [r5, #5]
     ae2:	2901      	cmp	r1, #1
     ae4:	d010      	beq.n	b08 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
     ae6:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     ae8:	3b01      	subs	r3, #1
     aea:	b29b      	uxth	r3, r3
     aec:	85ab      	strh	r3, [r5, #44]	; 0x2c
     aee:	2b00      	cmp	r3, #0
     af0:	d112      	bne.n	b18 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     af2:	3304      	adds	r3, #4
     af4:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
     af6:	2200      	movs	r2, #0
     af8:	332e      	adds	r3, #46	; 0x2e
     afa:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
     afc:	07bb      	lsls	r3, r7, #30
     afe:	d50b      	bpl.n	b18 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
     b00:	0028      	movs	r0, r5
     b02:	692b      	ldr	r3, [r5, #16]
     b04:	4798      	blx	r3
     b06:	e007      	b.n	b18 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
     b08:	0a1b      	lsrs	r3, r3, #8
     b0a:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
     b0c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     b0e:	3301      	adds	r3, #1
     b10:	626b      	str	r3, [r5, #36]	; 0x24
     b12:	e7e8      	b.n	ae6 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     b14:	2304      	movs	r3, #4
     b16:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
     b18:	06f3      	lsls	r3, r6, #27
     b1a:	d504      	bpl.n	b26 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
     b1c:	2310      	movs	r3, #16
     b1e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
     b20:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
     b22:	06fb      	lsls	r3, r7, #27
     b24:	d40e      	bmi.n	b44 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
     b26:	06b3      	lsls	r3, r6, #26
     b28:	d504      	bpl.n	b34 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
     b2a:	2320      	movs	r3, #32
     b2c:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
     b2e:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
     b30:	073b      	lsls	r3, r7, #28
     b32:	d40b      	bmi.n	b4c <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
     b34:	0733      	lsls	r3, r6, #28
     b36:	d504      	bpl.n	b42 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
     b38:	2308      	movs	r3, #8
     b3a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
     b3c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
     b3e:	06bb      	lsls	r3, r7, #26
     b40:	d408      	bmi.n	b54 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
     b42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
     b44:	0028      	movs	r0, r5
     b46:	69eb      	ldr	r3, [r5, #28]
     b48:	4798      	blx	r3
     b4a:	e7ec      	b.n	b26 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
     b4c:	0028      	movs	r0, r5
     b4e:	69ab      	ldr	r3, [r5, #24]
     b50:	4798      	blx	r3
     b52:	e7ef      	b.n	b34 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
     b54:	6a2b      	ldr	r3, [r5, #32]
     b56:	0028      	movs	r0, r5
     b58:	4798      	blx	r3
}
     b5a:	e7f2      	b.n	b42 <_usart_interrupt_handler+0x176>
     b5c:	200000d8 	.word	0x200000d8

00000b60 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     b60:	b510      	push	{r4, lr}
	switch (clock_source) {
     b62:	2808      	cmp	r0, #8
     b64:	d803      	bhi.n	b6e <system_clock_source_get_hz+0xe>
     b66:	0080      	lsls	r0, r0, #2
     b68:	4b1c      	ldr	r3, [pc, #112]	; (bdc <system_clock_source_get_hz+0x7c>)
     b6a:	581b      	ldr	r3, [r3, r0]
     b6c:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
     b6e:	2000      	movs	r0, #0
     b70:	e032      	b.n	bd8 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
     b72:	4b1b      	ldr	r3, [pc, #108]	; (be0 <system_clock_source_get_hz+0x80>)
     b74:	6918      	ldr	r0, [r3, #16]
     b76:	e02f      	b.n	bd8 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
     b78:	4b1a      	ldr	r3, [pc, #104]	; (be4 <system_clock_source_get_hz+0x84>)
     b7a:	6a1b      	ldr	r3, [r3, #32]
     b7c:	059b      	lsls	r3, r3, #22
     b7e:	0f9b      	lsrs	r3, r3, #30
     b80:	4819      	ldr	r0, [pc, #100]	; (be8 <system_clock_source_get_hz+0x88>)
     b82:	40d8      	lsrs	r0, r3
     b84:	e028      	b.n	bd8 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
     b86:	4b16      	ldr	r3, [pc, #88]	; (be0 <system_clock_source_get_hz+0x80>)
     b88:	6958      	ldr	r0, [r3, #20]
     b8a:	e025      	b.n	bd8 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     b8c:	4b14      	ldr	r3, [pc, #80]	; (be0 <system_clock_source_get_hz+0x80>)
     b8e:	681b      	ldr	r3, [r3, #0]
			return 0;
     b90:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     b92:	079b      	lsls	r3, r3, #30
     b94:	d520      	bpl.n	bd8 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     b96:	4913      	ldr	r1, [pc, #76]	; (be4 <system_clock_source_get_hz+0x84>)
     b98:	2210      	movs	r2, #16
     b9a:	68cb      	ldr	r3, [r1, #12]
     b9c:	421a      	tst	r2, r3
     b9e:	d0fc      	beq.n	b9a <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
     ba0:	4b0f      	ldr	r3, [pc, #60]	; (be0 <system_clock_source_get_hz+0x80>)
     ba2:	681a      	ldr	r2, [r3, #0]
     ba4:	2324      	movs	r3, #36	; 0x24
     ba6:	4013      	ands	r3, r2
     ba8:	2b04      	cmp	r3, #4
     baa:	d001      	beq.n	bb0 <system_clock_source_get_hz+0x50>
			return 48000000UL;
     bac:	480f      	ldr	r0, [pc, #60]	; (bec <system_clock_source_get_hz+0x8c>)
     bae:	e013      	b.n	bd8 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     bb0:	2000      	movs	r0, #0
     bb2:	4b0f      	ldr	r3, [pc, #60]	; (bf0 <system_clock_source_get_hz+0x90>)
     bb4:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     bb6:	4b0a      	ldr	r3, [pc, #40]	; (be0 <system_clock_source_get_hz+0x80>)
     bb8:	689b      	ldr	r3, [r3, #8]
     bba:	041b      	lsls	r3, r3, #16
     bbc:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     bbe:	4358      	muls	r0, r3
     bc0:	e00a      	b.n	bd8 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     bc2:	2350      	movs	r3, #80	; 0x50
     bc4:	4a07      	ldr	r2, [pc, #28]	; (be4 <system_clock_source_get_hz+0x84>)
     bc6:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
     bc8:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     bca:	075b      	lsls	r3, r3, #29
     bcc:	d504      	bpl.n	bd8 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
     bce:	4b04      	ldr	r3, [pc, #16]	; (be0 <system_clock_source_get_hz+0x80>)
     bd0:	68d8      	ldr	r0, [r3, #12]
     bd2:	e001      	b.n	bd8 <system_clock_source_get_hz+0x78>
		return 32768UL;
     bd4:	2080      	movs	r0, #128	; 0x80
     bd6:	0200      	lsls	r0, r0, #8
	}
}
     bd8:	bd10      	pop	{r4, pc}
     bda:	46c0      	nop			; (mov r8, r8)
     bdc:	00001b70 	.word	0x00001b70
     be0:	200000b4 	.word	0x200000b4
     be4:	40000800 	.word	0x40000800
     be8:	007a1200 	.word	0x007a1200
     bec:	02dc6c00 	.word	0x02dc6c00
     bf0:	00000fc5 	.word	0x00000fc5

00000bf4 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
     bf4:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     bf6:	490c      	ldr	r1, [pc, #48]	; (c28 <system_clock_source_osc8m_set_config+0x34>)
     bf8:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
     bfa:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
     bfc:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
     bfe:	7840      	ldrb	r0, [r0, #1]
     c00:	2201      	movs	r2, #1
     c02:	4010      	ands	r0, r2
     c04:	0180      	lsls	r0, r0, #6
     c06:	2640      	movs	r6, #64	; 0x40
     c08:	43b3      	bics	r3, r6
     c0a:	4303      	orrs	r3, r0
     c0c:	402a      	ands	r2, r5
     c0e:	01d2      	lsls	r2, r2, #7
     c10:	2080      	movs	r0, #128	; 0x80
     c12:	4383      	bics	r3, r0
     c14:	4313      	orrs	r3, r2
     c16:	2203      	movs	r2, #3
     c18:	4022      	ands	r2, r4
     c1a:	0212      	lsls	r2, r2, #8
     c1c:	4803      	ldr	r0, [pc, #12]	; (c2c <system_clock_source_osc8m_set_config+0x38>)
     c1e:	4003      	ands	r3, r0
     c20:	4313      	orrs	r3, r2
     c22:	620b      	str	r3, [r1, #32]
}
     c24:	bd70      	pop	{r4, r5, r6, pc}
     c26:	46c0      	nop			; (mov r8, r8)
     c28:	40000800 	.word	0x40000800
     c2c:	fffffcff 	.word	0xfffffcff

00000c30 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
     c30:	2808      	cmp	r0, #8
     c32:	d803      	bhi.n	c3c <system_clock_source_enable+0xc>
     c34:	0080      	lsls	r0, r0, #2
     c36:	4b25      	ldr	r3, [pc, #148]	; (ccc <system_clock_source_enable+0x9c>)
     c38:	581b      	ldr	r3, [r3, r0]
     c3a:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     c3c:	2017      	movs	r0, #23
     c3e:	e044      	b.n	cca <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
     c40:	4a23      	ldr	r2, [pc, #140]	; (cd0 <system_clock_source_enable+0xa0>)
     c42:	6a13      	ldr	r3, [r2, #32]
     c44:	2102      	movs	r1, #2
     c46:	430b      	orrs	r3, r1
     c48:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
     c4a:	2000      	movs	r0, #0
     c4c:	e03d      	b.n	cca <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     c4e:	4a20      	ldr	r2, [pc, #128]	; (cd0 <system_clock_source_enable+0xa0>)
     c50:	6993      	ldr	r3, [r2, #24]
     c52:	2102      	movs	r1, #2
     c54:	430b      	orrs	r3, r1
     c56:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
     c58:	2000      	movs	r0, #0
		break;
     c5a:	e036      	b.n	cca <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
     c5c:	4a1c      	ldr	r2, [pc, #112]	; (cd0 <system_clock_source_enable+0xa0>)
     c5e:	8a13      	ldrh	r3, [r2, #16]
     c60:	2102      	movs	r1, #2
     c62:	430b      	orrs	r3, r1
     c64:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
     c66:	2000      	movs	r0, #0
		break;
     c68:	e02f      	b.n	cca <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
     c6a:	4a19      	ldr	r2, [pc, #100]	; (cd0 <system_clock_source_enable+0xa0>)
     c6c:	8a93      	ldrh	r3, [r2, #20]
     c6e:	2102      	movs	r1, #2
     c70:	430b      	orrs	r3, r1
     c72:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
     c74:	2000      	movs	r0, #0
		break;
     c76:	e028      	b.n	cca <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     c78:	4916      	ldr	r1, [pc, #88]	; (cd4 <system_clock_source_enable+0xa4>)
     c7a:	680b      	ldr	r3, [r1, #0]
     c7c:	2202      	movs	r2, #2
     c7e:	4313      	orrs	r3, r2
     c80:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
     c82:	4b13      	ldr	r3, [pc, #76]	; (cd0 <system_clock_source_enable+0xa0>)
     c84:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     c86:	0019      	movs	r1, r3
     c88:	320e      	adds	r2, #14
     c8a:	68cb      	ldr	r3, [r1, #12]
     c8c:	421a      	tst	r2, r3
     c8e:	d0fc      	beq.n	c8a <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
     c90:	4a10      	ldr	r2, [pc, #64]	; (cd4 <system_clock_source_enable+0xa4>)
     c92:	6891      	ldr	r1, [r2, #8]
     c94:	4b0e      	ldr	r3, [pc, #56]	; (cd0 <system_clock_source_enable+0xa0>)
     c96:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
     c98:	6852      	ldr	r2, [r2, #4]
     c9a:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
     c9c:	2200      	movs	r2, #0
     c9e:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     ca0:	0019      	movs	r1, r3
     ca2:	3210      	adds	r2, #16
     ca4:	68cb      	ldr	r3, [r1, #12]
     ca6:	421a      	tst	r2, r3
     ca8:	d0fc      	beq.n	ca4 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
     caa:	4b0a      	ldr	r3, [pc, #40]	; (cd4 <system_clock_source_enable+0xa4>)
     cac:	681b      	ldr	r3, [r3, #0]
     cae:	b29b      	uxth	r3, r3
     cb0:	4a07      	ldr	r2, [pc, #28]	; (cd0 <system_clock_source_enable+0xa0>)
     cb2:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
     cb4:	2000      	movs	r0, #0
     cb6:	e008      	b.n	cca <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
     cb8:	4905      	ldr	r1, [pc, #20]	; (cd0 <system_clock_source_enable+0xa0>)
     cba:	2244      	movs	r2, #68	; 0x44
     cbc:	5c8b      	ldrb	r3, [r1, r2]
     cbe:	2002      	movs	r0, #2
     cc0:	4303      	orrs	r3, r0
     cc2:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
     cc4:	2000      	movs	r0, #0
		break;
     cc6:	e000      	b.n	cca <system_clock_source_enable+0x9a>
		return STATUS_OK;
     cc8:	2000      	movs	r0, #0
}
     cca:	4770      	bx	lr
     ccc:	00001b94 	.word	0x00001b94
     cd0:	40000800 	.word	0x40000800
     cd4:	200000b4 	.word	0x200000b4

00000cd8 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
     cd8:	b530      	push	{r4, r5, lr}
     cda:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     cdc:	22c2      	movs	r2, #194	; 0xc2
     cde:	00d2      	lsls	r2, r2, #3
     ce0:	4b1a      	ldr	r3, [pc, #104]	; (d4c <system_clock_init+0x74>)
     ce2:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
     ce4:	4a1a      	ldr	r2, [pc, #104]	; (d50 <system_clock_init+0x78>)
     ce6:	6853      	ldr	r3, [r2, #4]
     ce8:	211e      	movs	r1, #30
     cea:	438b      	bics	r3, r1
     cec:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
     cee:	2301      	movs	r3, #1
     cf0:	466a      	mov	r2, sp
     cf2:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     cf4:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
     cf6:	4d17      	ldr	r5, [pc, #92]	; (d54 <system_clock_init+0x7c>)
     cf8:	b2e0      	uxtb	r0, r4
     cfa:	4669      	mov	r1, sp
     cfc:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     cfe:	3401      	adds	r4, #1
     d00:	2c25      	cmp	r4, #37	; 0x25
     d02:	d1f9      	bne.n	cf8 <system_clock_init+0x20>
	config->run_in_standby  = false;
     d04:	a803      	add	r0, sp, #12
     d06:	2400      	movs	r4, #0
     d08:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
     d0a:	2501      	movs	r5, #1
     d0c:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
     d0e:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
     d10:	4b11      	ldr	r3, [pc, #68]	; (d58 <system_clock_init+0x80>)
     d12:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
     d14:	2006      	movs	r0, #6
     d16:	4b11      	ldr	r3, [pc, #68]	; (d5c <system_clock_init+0x84>)
     d18:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
     d1a:	4b11      	ldr	r3, [pc, #68]	; (d60 <system_clock_init+0x88>)
     d1c:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
     d1e:	4b11      	ldr	r3, [pc, #68]	; (d64 <system_clock_init+0x8c>)
     d20:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
     d22:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
     d24:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
     d26:	72dc      	strb	r4, [r3, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
     d28:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
     d2a:	466b      	mov	r3, sp
     d2c:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22  || SAMR30 || SAMR34 || SAMR35
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
     d2e:	2306      	movs	r3, #6
     d30:	466a      	mov	r2, sp
     d32:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
     d34:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
     d36:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
     d38:	4669      	mov	r1, sp
     d3a:	2000      	movs	r0, #0
     d3c:	4b0a      	ldr	r3, [pc, #40]	; (d68 <system_clock_init+0x90>)
     d3e:	4798      	blx	r3
     d40:	2000      	movs	r0, #0
     d42:	4b0a      	ldr	r3, [pc, #40]	; (d6c <system_clock_init+0x94>)
     d44:	4798      	blx	r3
#endif
}
     d46:	b005      	add	sp, #20
     d48:	bd30      	pop	{r4, r5, pc}
     d4a:	46c0      	nop			; (mov r8, r8)
     d4c:	40000800 	.word	0x40000800
     d50:	41004000 	.word	0x41004000
     d54:	00000fa9 	.word	0x00000fa9
     d58:	00000bf5 	.word	0x00000bf5
     d5c:	00000c31 	.word	0x00000c31
     d60:	00000d71 	.word	0x00000d71
     d64:	40000400 	.word	0x40000400
     d68:	00000d95 	.word	0x00000d95
     d6c:	00000e4d 	.word	0x00000e4d

00000d70 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
     d70:	4a06      	ldr	r2, [pc, #24]	; (d8c <system_gclk_init+0x1c>)
     d72:	6993      	ldr	r3, [r2, #24]
     d74:	2108      	movs	r1, #8
     d76:	430b      	orrs	r3, r1
     d78:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
     d7a:	2201      	movs	r2, #1
     d7c:	4b04      	ldr	r3, [pc, #16]	; (d90 <system_gclk_init+0x20>)
     d7e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
     d80:	0019      	movs	r1, r3
     d82:	780b      	ldrb	r3, [r1, #0]
     d84:	4213      	tst	r3, r2
     d86:	d1fc      	bne.n	d82 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
     d88:	4770      	bx	lr
     d8a:	46c0      	nop			; (mov r8, r8)
     d8c:	40000400 	.word	0x40000400
     d90:	40000c00 	.word	0x40000c00

00000d94 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
     d94:	b570      	push	{r4, r5, r6, lr}
     d96:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
     d98:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
     d9a:	780d      	ldrb	r5, [r1, #0]
     d9c:	022d      	lsls	r5, r5, #8
     d9e:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
     da0:	784b      	ldrb	r3, [r1, #1]
     da2:	2b00      	cmp	r3, #0
     da4:	d002      	beq.n	dac <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
     da6:	2380      	movs	r3, #128	; 0x80
     da8:	02db      	lsls	r3, r3, #11
     daa:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
     dac:	7a4b      	ldrb	r3, [r1, #9]
     dae:	2b00      	cmp	r3, #0
     db0:	d002      	beq.n	db8 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
     db2:	2380      	movs	r3, #128	; 0x80
     db4:	031b      	lsls	r3, r3, #12
     db6:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
     db8:	6848      	ldr	r0, [r1, #4]
     dba:	2801      	cmp	r0, #1
     dbc:	d910      	bls.n	de0 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
     dbe:	1e43      	subs	r3, r0, #1
     dc0:	4218      	tst	r0, r3
     dc2:	d134      	bne.n	e2e <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
     dc4:	2802      	cmp	r0, #2
     dc6:	d930      	bls.n	e2a <system_gclk_gen_set_config+0x96>
     dc8:	2302      	movs	r3, #2
     dca:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
     dcc:	3201      	adds	r2, #1
						mask <<= 1) {
     dce:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
     dd0:	4298      	cmp	r0, r3
     dd2:	d8fb      	bhi.n	dcc <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
     dd4:	0212      	lsls	r2, r2, #8
     dd6:	4332      	orrs	r2, r6
     dd8:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
     dda:	2380      	movs	r3, #128	; 0x80
     ddc:	035b      	lsls	r3, r3, #13
     dde:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
     de0:	7a0b      	ldrb	r3, [r1, #8]
     de2:	2b00      	cmp	r3, #0
     de4:	d002      	beq.n	dec <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
     de6:	2380      	movs	r3, #128	; 0x80
     de8:	039b      	lsls	r3, r3, #14
     dea:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     dec:	4a13      	ldr	r2, [pc, #76]	; (e3c <system_gclk_gen_set_config+0xa8>)
     dee:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
     df0:	b25b      	sxtb	r3, r3
     df2:	2b00      	cmp	r3, #0
     df4:	dbfb      	blt.n	dee <system_gclk_gen_set_config+0x5a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     df6:	4b12      	ldr	r3, [pc, #72]	; (e40 <system_gclk_gen_set_config+0xac>)
     df8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     dfa:	4b12      	ldr	r3, [pc, #72]	; (e44 <system_gclk_gen_set_config+0xb0>)
     dfc:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     dfe:	4a0f      	ldr	r2, [pc, #60]	; (e3c <system_gclk_gen_set_config+0xa8>)
     e00:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
     e02:	b25b      	sxtb	r3, r3
     e04:	2b00      	cmp	r3, #0
     e06:	dbfb      	blt.n	e00 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
     e08:	4b0c      	ldr	r3, [pc, #48]	; (e3c <system_gclk_gen_set_config+0xa8>)
     e0a:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     e0c:	001a      	movs	r2, r3
     e0e:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
     e10:	b25b      	sxtb	r3, r3
     e12:	2b00      	cmp	r3, #0
     e14:	dbfb      	blt.n	e0e <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
     e16:	4a09      	ldr	r2, [pc, #36]	; (e3c <system_gclk_gen_set_config+0xa8>)
     e18:	6853      	ldr	r3, [r2, #4]
     e1a:	2180      	movs	r1, #128	; 0x80
     e1c:	0249      	lsls	r1, r1, #9
     e1e:	400b      	ands	r3, r1
     e20:	431d      	orrs	r5, r3
     e22:	6055      	str	r5, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     e24:	4b08      	ldr	r3, [pc, #32]	; (e48 <system_gclk_gen_set_config+0xb4>)
     e26:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     e28:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
     e2a:	2200      	movs	r2, #0
     e2c:	e7d2      	b.n	dd4 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
     e2e:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
     e30:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
     e32:	2380      	movs	r3, #128	; 0x80
     e34:	029b      	lsls	r3, r3, #10
     e36:	431d      	orrs	r5, r3
     e38:	e7d2      	b.n	de0 <system_gclk_gen_set_config+0x4c>
     e3a:	46c0      	nop			; (mov r8, r8)
     e3c:	40000c00 	.word	0x40000c00
     e40:	00000181 	.word	0x00000181
     e44:	40000c08 	.word	0x40000c08
     e48:	000001c1 	.word	0x000001c1

00000e4c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
     e4c:	b510      	push	{r4, lr}
     e4e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     e50:	4a0b      	ldr	r2, [pc, #44]	; (e80 <system_gclk_gen_enable+0x34>)
     e52:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     e54:	b25b      	sxtb	r3, r3
     e56:	2b00      	cmp	r3, #0
     e58:	dbfb      	blt.n	e52 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
     e5a:	4b0a      	ldr	r3, [pc, #40]	; (e84 <system_gclk_gen_enable+0x38>)
     e5c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     e5e:	4b0a      	ldr	r3, [pc, #40]	; (e88 <system_gclk_gen_enable+0x3c>)
     e60:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     e62:	4a07      	ldr	r2, [pc, #28]	; (e80 <system_gclk_gen_enable+0x34>)
     e64:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     e66:	b25b      	sxtb	r3, r3
     e68:	2b00      	cmp	r3, #0
     e6a:	dbfb      	blt.n	e64 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
     e6c:	4a04      	ldr	r2, [pc, #16]	; (e80 <system_gclk_gen_enable+0x34>)
     e6e:	6851      	ldr	r1, [r2, #4]
     e70:	2380      	movs	r3, #128	; 0x80
     e72:	025b      	lsls	r3, r3, #9
     e74:	430b      	orrs	r3, r1
     e76:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
     e78:	4b04      	ldr	r3, [pc, #16]	; (e8c <system_gclk_gen_enable+0x40>)
     e7a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     e7c:	bd10      	pop	{r4, pc}
     e7e:	46c0      	nop			; (mov r8, r8)
     e80:	40000c00 	.word	0x40000c00
     e84:	00000181 	.word	0x00000181
     e88:	40000c04 	.word	0x40000c04
     e8c:	000001c1 	.word	0x000001c1

00000e90 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
     e90:	b570      	push	{r4, r5, r6, lr}
     e92:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     e94:	4a1a      	ldr	r2, [pc, #104]	; (f00 <system_gclk_gen_get_hz+0x70>)
     e96:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     e98:	b25b      	sxtb	r3, r3
     e9a:	2b00      	cmp	r3, #0
     e9c:	dbfb      	blt.n	e96 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
     e9e:	4b19      	ldr	r3, [pc, #100]	; (f04 <system_gclk_gen_get_hz+0x74>)
     ea0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     ea2:	4b19      	ldr	r3, [pc, #100]	; (f08 <system_gclk_gen_get_hz+0x78>)
     ea4:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     ea6:	4a16      	ldr	r2, [pc, #88]	; (f00 <system_gclk_gen_get_hz+0x70>)
     ea8:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     eaa:	b25b      	sxtb	r3, r3
     eac:	2b00      	cmp	r3, #0
     eae:	dbfb      	blt.n	ea8 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
     eb0:	4e13      	ldr	r6, [pc, #76]	; (f00 <system_gclk_gen_get_hz+0x70>)
     eb2:	6870      	ldr	r0, [r6, #4]
     eb4:	04c0      	lsls	r0, r0, #19
     eb6:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
     eb8:	4b14      	ldr	r3, [pc, #80]	; (f0c <system_gclk_gen_get_hz+0x7c>)
     eba:	4798      	blx	r3
     ebc:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     ebe:	4b12      	ldr	r3, [pc, #72]	; (f08 <system_gclk_gen_get_hz+0x78>)
     ec0:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
     ec2:	6876      	ldr	r6, [r6, #4]
     ec4:	02f6      	lsls	r6, r6, #11
     ec6:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     ec8:	4b11      	ldr	r3, [pc, #68]	; (f10 <system_gclk_gen_get_hz+0x80>)
     eca:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     ecc:	4a0c      	ldr	r2, [pc, #48]	; (f00 <system_gclk_gen_get_hz+0x70>)
     ece:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     ed0:	b25b      	sxtb	r3, r3
     ed2:	2b00      	cmp	r3, #0
     ed4:	dbfb      	blt.n	ece <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
     ed6:	4b0a      	ldr	r3, [pc, #40]	; (f00 <system_gclk_gen_get_hz+0x70>)
     ed8:	689c      	ldr	r4, [r3, #8]
     eda:	0224      	lsls	r4, r4, #8
     edc:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
     ede:	4b0d      	ldr	r3, [pc, #52]	; (f14 <system_gclk_gen_get_hz+0x84>)
     ee0:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
     ee2:	2e00      	cmp	r6, #0
     ee4:	d107      	bne.n	ef6 <system_gclk_gen_get_hz+0x66>
     ee6:	2c01      	cmp	r4, #1
     ee8:	d907      	bls.n	efa <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
     eea:	0021      	movs	r1, r4
     eec:	0028      	movs	r0, r5
     eee:	4b0a      	ldr	r3, [pc, #40]	; (f18 <system_gclk_gen_get_hz+0x88>)
     ef0:	4798      	blx	r3
     ef2:	0005      	movs	r5, r0
     ef4:	e001      	b.n	efa <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
     ef6:	3401      	adds	r4, #1
     ef8:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
     efa:	0028      	movs	r0, r5
     efc:	bd70      	pop	{r4, r5, r6, pc}
     efe:	46c0      	nop			; (mov r8, r8)
     f00:	40000c00 	.word	0x40000c00
     f04:	00000181 	.word	0x00000181
     f08:	40000c04 	.word	0x40000c04
     f0c:	00000b61 	.word	0x00000b61
     f10:	40000c08 	.word	0x40000c08
     f14:	000001c1 	.word	0x000001c1
     f18:	0000183d 	.word	0x0000183d

00000f1c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
     f1c:	b510      	push	{r4, lr}
     f1e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     f20:	4b06      	ldr	r3, [pc, #24]	; (f3c <system_gclk_chan_enable+0x20>)
     f22:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     f24:	4b06      	ldr	r3, [pc, #24]	; (f40 <system_gclk_chan_enable+0x24>)
     f26:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
     f28:	4a06      	ldr	r2, [pc, #24]	; (f44 <system_gclk_chan_enable+0x28>)
     f2a:	8853      	ldrh	r3, [r2, #2]
     f2c:	2180      	movs	r1, #128	; 0x80
     f2e:	01c9      	lsls	r1, r1, #7
     f30:	430b      	orrs	r3, r1
     f32:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
     f34:	4b04      	ldr	r3, [pc, #16]	; (f48 <system_gclk_chan_enable+0x2c>)
     f36:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     f38:	bd10      	pop	{r4, pc}
     f3a:	46c0      	nop			; (mov r8, r8)
     f3c:	00000181 	.word	0x00000181
     f40:	40000c02 	.word	0x40000c02
     f44:	40000c00 	.word	0x40000c00
     f48:	000001c1 	.word	0x000001c1

00000f4c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
     f4c:	b510      	push	{r4, lr}
     f4e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     f50:	4b0f      	ldr	r3, [pc, #60]	; (f90 <system_gclk_chan_disable+0x44>)
     f52:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     f54:	4b0f      	ldr	r3, [pc, #60]	; (f94 <system_gclk_chan_disable+0x48>)
     f56:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
     f58:	4a0f      	ldr	r2, [pc, #60]	; (f98 <system_gclk_chan_disable+0x4c>)
     f5a:	8853      	ldrh	r3, [r2, #2]
     f5c:	051b      	lsls	r3, r3, #20
     f5e:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
     f60:	8853      	ldrh	r3, [r2, #2]
     f62:	490e      	ldr	r1, [pc, #56]	; (f9c <system_gclk_chan_disable+0x50>)
     f64:	400b      	ands	r3, r1
     f66:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
     f68:	8853      	ldrh	r3, [r2, #2]
     f6a:	490d      	ldr	r1, [pc, #52]	; (fa0 <system_gclk_chan_disable+0x54>)
     f6c:	400b      	ands	r3, r1
     f6e:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
     f70:	0011      	movs	r1, r2
     f72:	2280      	movs	r2, #128	; 0x80
     f74:	01d2      	lsls	r2, r2, #7
     f76:	884b      	ldrh	r3, [r1, #2]
     f78:	4213      	tst	r3, r2
     f7a:	d1fc      	bne.n	f76 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
     f7c:	4906      	ldr	r1, [pc, #24]	; (f98 <system_gclk_chan_disable+0x4c>)
     f7e:	884a      	ldrh	r2, [r1, #2]
     f80:	0203      	lsls	r3, r0, #8
     f82:	4806      	ldr	r0, [pc, #24]	; (f9c <system_gclk_chan_disable+0x50>)
     f84:	4002      	ands	r2, r0
     f86:	4313      	orrs	r3, r2
     f88:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
     f8a:	4b06      	ldr	r3, [pc, #24]	; (fa4 <system_gclk_chan_disable+0x58>)
     f8c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     f8e:	bd10      	pop	{r4, pc}
     f90:	00000181 	.word	0x00000181
     f94:	40000c02 	.word	0x40000c02
     f98:	40000c00 	.word	0x40000c00
     f9c:	fffff0ff 	.word	0xfffff0ff
     fa0:	ffffbfff 	.word	0xffffbfff
     fa4:	000001c1 	.word	0x000001c1

00000fa8 <system_gclk_chan_set_config>:
{
     fa8:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
     faa:	780c      	ldrb	r4, [r1, #0]
     fac:	0224      	lsls	r4, r4, #8
     fae:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
     fb0:	4b02      	ldr	r3, [pc, #8]	; (fbc <system_gclk_chan_set_config+0x14>)
     fb2:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
     fb4:	b2a4      	uxth	r4, r4
     fb6:	4b02      	ldr	r3, [pc, #8]	; (fc0 <system_gclk_chan_set_config+0x18>)
     fb8:	805c      	strh	r4, [r3, #2]
}
     fba:	bd10      	pop	{r4, pc}
     fbc:	00000f4d 	.word	0x00000f4d
     fc0:	40000c00 	.word	0x40000c00

00000fc4 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
     fc4:	b510      	push	{r4, lr}
     fc6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     fc8:	4b06      	ldr	r3, [pc, #24]	; (fe4 <system_gclk_chan_get_hz+0x20>)
     fca:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     fcc:	4b06      	ldr	r3, [pc, #24]	; (fe8 <system_gclk_chan_get_hz+0x24>)
     fce:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
     fd0:	4b06      	ldr	r3, [pc, #24]	; (fec <system_gclk_chan_get_hz+0x28>)
     fd2:	885c      	ldrh	r4, [r3, #2]
     fd4:	0524      	lsls	r4, r4, #20
     fd6:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
     fd8:	4b05      	ldr	r3, [pc, #20]	; (ff0 <system_gclk_chan_get_hz+0x2c>)
     fda:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
     fdc:	0020      	movs	r0, r4
     fde:	4b05      	ldr	r3, [pc, #20]	; (ff4 <system_gclk_chan_get_hz+0x30>)
     fe0:	4798      	blx	r3
}
     fe2:	bd10      	pop	{r4, pc}
     fe4:	00000181 	.word	0x00000181
     fe8:	40000c02 	.word	0x40000c02
     fec:	40000c00 	.word	0x40000c00
     ff0:	000001c1 	.word	0x000001c1
     ff4:	00000e91 	.word	0x00000e91

00000ff8 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
     ff8:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
     ffa:	78d3      	ldrb	r3, [r2, #3]
     ffc:	2b00      	cmp	r3, #0
     ffe:	d135      	bne.n	106c <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1000:	7813      	ldrb	r3, [r2, #0]
    1002:	2b80      	cmp	r3, #128	; 0x80
    1004:	d029      	beq.n	105a <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1006:	061b      	lsls	r3, r3, #24
    1008:	2480      	movs	r4, #128	; 0x80
    100a:	0264      	lsls	r4, r4, #9
    100c:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    100e:	7854      	ldrb	r4, [r2, #1]
    1010:	2502      	movs	r5, #2
    1012:	43ac      	bics	r4, r5
    1014:	d106      	bne.n	1024 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1016:	7894      	ldrb	r4, [r2, #2]
    1018:	2c00      	cmp	r4, #0
    101a:	d120      	bne.n	105e <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    101c:	2480      	movs	r4, #128	; 0x80
    101e:	02a4      	lsls	r4, r4, #10
    1020:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1022:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1024:	7854      	ldrb	r4, [r2, #1]
    1026:	3c01      	subs	r4, #1
    1028:	2c01      	cmp	r4, #1
    102a:	d91c      	bls.n	1066 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    102c:	040d      	lsls	r5, r1, #16
    102e:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1030:	24a0      	movs	r4, #160	; 0xa0
    1032:	05e4      	lsls	r4, r4, #23
    1034:	432c      	orrs	r4, r5
    1036:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1038:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    103a:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    103c:	24d0      	movs	r4, #208	; 0xd0
    103e:	0624      	lsls	r4, r4, #24
    1040:	432c      	orrs	r4, r5
    1042:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1044:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1046:	78d4      	ldrb	r4, [r2, #3]
    1048:	2c00      	cmp	r4, #0
    104a:	d122      	bne.n	1092 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    104c:	035b      	lsls	r3, r3, #13
    104e:	d51c      	bpl.n	108a <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1050:	7893      	ldrb	r3, [r2, #2]
    1052:	2b01      	cmp	r3, #1
    1054:	d01e      	beq.n	1094 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    1056:	6141      	str	r1, [r0, #20]
    1058:	e017      	b.n	108a <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    105a:	2300      	movs	r3, #0
    105c:	e7d7      	b.n	100e <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    105e:	24c0      	movs	r4, #192	; 0xc0
    1060:	02e4      	lsls	r4, r4, #11
    1062:	4323      	orrs	r3, r4
    1064:	e7dd      	b.n	1022 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1066:	4c0d      	ldr	r4, [pc, #52]	; (109c <_system_pinmux_config+0xa4>)
    1068:	4023      	ands	r3, r4
    106a:	e7df      	b.n	102c <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    106c:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    106e:	040c      	lsls	r4, r1, #16
    1070:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1072:	23a0      	movs	r3, #160	; 0xa0
    1074:	05db      	lsls	r3, r3, #23
    1076:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1078:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    107a:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    107c:	23d0      	movs	r3, #208	; 0xd0
    107e:	061b      	lsls	r3, r3, #24
    1080:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1082:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    1084:	78d3      	ldrb	r3, [r2, #3]
    1086:	2b00      	cmp	r3, #0
    1088:	d103      	bne.n	1092 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    108a:	7853      	ldrb	r3, [r2, #1]
    108c:	3b01      	subs	r3, #1
    108e:	2b01      	cmp	r3, #1
    1090:	d902      	bls.n	1098 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    1092:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    1094:	6181      	str	r1, [r0, #24]
    1096:	e7f8      	b.n	108a <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    1098:	6081      	str	r1, [r0, #8]
}
    109a:	e7fa      	b.n	1092 <_system_pinmux_config+0x9a>
    109c:	fffbffff 	.word	0xfffbffff

000010a0 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    10a0:	b510      	push	{r4, lr}
    10a2:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    10a4:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    10a6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    10a8:	2900      	cmp	r1, #0
    10aa:	d104      	bne.n	10b6 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    10ac:	0943      	lsrs	r3, r0, #5
    10ae:	01db      	lsls	r3, r3, #7
    10b0:	4905      	ldr	r1, [pc, #20]	; (10c8 <system_pinmux_pin_set_config+0x28>)
    10b2:	468c      	mov	ip, r1
    10b4:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    10b6:	241f      	movs	r4, #31
    10b8:	4020      	ands	r0, r4
    10ba:	2101      	movs	r1, #1
    10bc:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    10be:	0018      	movs	r0, r3
    10c0:	4b02      	ldr	r3, [pc, #8]	; (10cc <system_pinmux_pin_set_config+0x2c>)
    10c2:	4798      	blx	r3
}
    10c4:	bd10      	pop	{r4, pc}
    10c6:	46c0      	nop			; (mov r8, r8)
    10c8:	41004400 	.word	0x41004400
    10cc:	00000ff9 	.word	0x00000ff9

000010d0 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    10d0:	4770      	bx	lr
	...

000010d4 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    10d4:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    10d6:	4b05      	ldr	r3, [pc, #20]	; (10ec <system_init+0x18>)
    10d8:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    10da:	4b05      	ldr	r3, [pc, #20]	; (10f0 <system_init+0x1c>)
    10dc:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    10de:	4b05      	ldr	r3, [pc, #20]	; (10f4 <system_init+0x20>)
    10e0:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    10e2:	4b05      	ldr	r3, [pc, #20]	; (10f8 <system_init+0x24>)
    10e4:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    10e6:	4b05      	ldr	r3, [pc, #20]	; (10fc <system_init+0x28>)
    10e8:	4798      	blx	r3
}
    10ea:	bd10      	pop	{r4, pc}
    10ec:	00000cd9 	.word	0x00000cd9
    10f0:	000001f1 	.word	0x000001f1
    10f4:	000010d1 	.word	0x000010d1
    10f8:	000010d1 	.word	0x000010d1
    10fc:	000010d1 	.word	0x000010d1

00001100 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1100:	e7fe      	b.n	1100 <Dummy_Handler>
	...

00001104 <Reset_Handler>:
{
    1104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    1106:	4a2a      	ldr	r2, [pc, #168]	; (11b0 <Reset_Handler+0xac>)
    1108:	4b2a      	ldr	r3, [pc, #168]	; (11b4 <Reset_Handler+0xb0>)
    110a:	429a      	cmp	r2, r3
    110c:	d011      	beq.n	1132 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    110e:	001a      	movs	r2, r3
    1110:	4b29      	ldr	r3, [pc, #164]	; (11b8 <Reset_Handler+0xb4>)
    1112:	429a      	cmp	r2, r3
    1114:	d20d      	bcs.n	1132 <Reset_Handler+0x2e>
    1116:	4a29      	ldr	r2, [pc, #164]	; (11bc <Reset_Handler+0xb8>)
    1118:	3303      	adds	r3, #3
    111a:	1a9b      	subs	r3, r3, r2
    111c:	089b      	lsrs	r3, r3, #2
    111e:	3301      	adds	r3, #1
    1120:	009b      	lsls	r3, r3, #2
    1122:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1124:	4823      	ldr	r0, [pc, #140]	; (11b4 <Reset_Handler+0xb0>)
    1126:	4922      	ldr	r1, [pc, #136]	; (11b0 <Reset_Handler+0xac>)
    1128:	588c      	ldr	r4, [r1, r2]
    112a:	5084      	str	r4, [r0, r2]
    112c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    112e:	429a      	cmp	r2, r3
    1130:	d1fa      	bne.n	1128 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    1132:	4a23      	ldr	r2, [pc, #140]	; (11c0 <Reset_Handler+0xbc>)
    1134:	4b23      	ldr	r3, [pc, #140]	; (11c4 <Reset_Handler+0xc0>)
    1136:	429a      	cmp	r2, r3
    1138:	d20a      	bcs.n	1150 <Reset_Handler+0x4c>
    113a:	43d3      	mvns	r3, r2
    113c:	4921      	ldr	r1, [pc, #132]	; (11c4 <Reset_Handler+0xc0>)
    113e:	185b      	adds	r3, r3, r1
    1140:	2103      	movs	r1, #3
    1142:	438b      	bics	r3, r1
    1144:	3304      	adds	r3, #4
    1146:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    1148:	2100      	movs	r1, #0
    114a:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    114c:	4293      	cmp	r3, r2
    114e:	d1fc      	bne.n	114a <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1150:	4a1d      	ldr	r2, [pc, #116]	; (11c8 <Reset_Handler+0xc4>)
    1152:	21ff      	movs	r1, #255	; 0xff
    1154:	4b1d      	ldr	r3, [pc, #116]	; (11cc <Reset_Handler+0xc8>)
    1156:	438b      	bics	r3, r1
    1158:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    115a:	39fd      	subs	r1, #253	; 0xfd
    115c:	2390      	movs	r3, #144	; 0x90
    115e:	005b      	lsls	r3, r3, #1
    1160:	4a1b      	ldr	r2, [pc, #108]	; (11d0 <Reset_Handler+0xcc>)
    1162:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1164:	4a1b      	ldr	r2, [pc, #108]	; (11d4 <Reset_Handler+0xd0>)
    1166:	78d3      	ldrb	r3, [r2, #3]
    1168:	2503      	movs	r5, #3
    116a:	43ab      	bics	r3, r5
    116c:	2402      	movs	r4, #2
    116e:	4323      	orrs	r3, r4
    1170:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1172:	78d3      	ldrb	r3, [r2, #3]
    1174:	270c      	movs	r7, #12
    1176:	43bb      	bics	r3, r7
    1178:	2608      	movs	r6, #8
    117a:	4333      	orrs	r3, r6
    117c:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    117e:	4b16      	ldr	r3, [pc, #88]	; (11d8 <Reset_Handler+0xd4>)
    1180:	7b98      	ldrb	r0, [r3, #14]
    1182:	2230      	movs	r2, #48	; 0x30
    1184:	4390      	bics	r0, r2
    1186:	2220      	movs	r2, #32
    1188:	4310      	orrs	r0, r2
    118a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    118c:	7b99      	ldrb	r1, [r3, #14]
    118e:	43b9      	bics	r1, r7
    1190:	4331      	orrs	r1, r6
    1192:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1194:	7b9a      	ldrb	r2, [r3, #14]
    1196:	43aa      	bics	r2, r5
    1198:	4322      	orrs	r2, r4
    119a:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    119c:	4a0f      	ldr	r2, [pc, #60]	; (11dc <Reset_Handler+0xd8>)
    119e:	6853      	ldr	r3, [r2, #4]
    11a0:	2180      	movs	r1, #128	; 0x80
    11a2:	430b      	orrs	r3, r1
    11a4:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    11a6:	4b0e      	ldr	r3, [pc, #56]	; (11e0 <Reset_Handler+0xdc>)
    11a8:	4798      	blx	r3
        main();
    11aa:	4b0e      	ldr	r3, [pc, #56]	; (11e4 <Reset_Handler+0xe0>)
    11ac:	4798      	blx	r3
    11ae:	e7fe      	b.n	11ae <Reset_Handler+0xaa>
    11b0:	00001de0 	.word	0x00001de0
    11b4:	20000000 	.word	0x20000000
    11b8:	20000074 	.word	0x20000074
    11bc:	20000004 	.word	0x20000004
    11c0:	20000074 	.word	0x20000074
    11c4:	20000130 	.word	0x20000130
    11c8:	e000ed00 	.word	0xe000ed00
    11cc:	00000000 	.word	0x00000000
    11d0:	41007000 	.word	0x41007000
    11d4:	41005000 	.word	0x41005000
    11d8:	41004800 	.word	0x41004800
    11dc:	41004000 	.word	0x41004000
    11e0:	000019a9 	.word	0x000019a9
    11e4:	000016dd 	.word	0x000016dd

000011e8 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    11e8:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    11ea:	4a06      	ldr	r2, [pc, #24]	; (1204 <_sbrk+0x1c>)
    11ec:	6812      	ldr	r2, [r2, #0]
    11ee:	2a00      	cmp	r2, #0
    11f0:	d004      	beq.n	11fc <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    11f2:	4a04      	ldr	r2, [pc, #16]	; (1204 <_sbrk+0x1c>)
    11f4:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    11f6:	18c3      	adds	r3, r0, r3
    11f8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    11fa:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    11fc:	4902      	ldr	r1, [pc, #8]	; (1208 <_sbrk+0x20>)
    11fe:	4a01      	ldr	r2, [pc, #4]	; (1204 <_sbrk+0x1c>)
    1200:	6011      	str	r1, [r2, #0]
    1202:	e7f6      	b.n	11f2 <_sbrk+0xa>
    1204:	200000cc 	.word	0x200000cc
    1208:	20002130 	.word	0x20002130

0000120c <configure_usart>:
	}
}

/**************************SERCOM STUFF*******************************/
void configure_usart(void)
{
    120c:	b530      	push	{r4, r5, lr}
    120e:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    1210:	2380      	movs	r3, #128	; 0x80
    1212:	05db      	lsls	r3, r3, #23
    1214:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    1216:	2300      	movs	r3, #0
    1218:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    121a:	22ff      	movs	r2, #255	; 0xff
    121c:	4669      	mov	r1, sp
    121e:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    1220:	2200      	movs	r2, #0
    1222:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    1224:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
    1226:	2196      	movs	r1, #150	; 0x96
    1228:	0189      	lsls	r1, r1, #6
    122a:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
    122c:	2101      	movs	r1, #1
    122e:	2024      	movs	r0, #36	; 0x24
    1230:	466c      	mov	r4, sp
    1232:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    1234:	3001      	adds	r0, #1
    1236:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    1238:	3125      	adds	r1, #37	; 0x25
    123a:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    123c:	3101      	adds	r1, #1
    123e:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    1240:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    1242:	3105      	adds	r1, #5
    1244:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    1246:	3101      	adds	r1, #1
    1248:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    124a:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    124c:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    124e:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    1250:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    1252:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    1254:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    1256:	2313      	movs	r3, #19
    1258:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    125a:	7762      	strb	r2, [r4, #29]
		}
	}
	#else
	{
		config_usart.baudrate    = 9600;
		config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    125c:	2380      	movs	r3, #128	; 0x80
    125e:	035b      	lsls	r3, r3, #13
    1260:	9303      	str	r3, [sp, #12]
		config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    1262:	4b12      	ldr	r3, [pc, #72]	; (12ac <configure_usart+0xa0>)
    1264:	930c      	str	r3, [sp, #48]	; 0x30
		config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    1266:	4b12      	ldr	r3, [pc, #72]	; (12b0 <configure_usart+0xa4>)
    1268:	930d      	str	r3, [sp, #52]	; 0x34
		config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    126a:	2301      	movs	r3, #1
    126c:	425b      	negs	r3, r3
    126e:	930e      	str	r3, [sp, #56]	; 0x38
		config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    1270:	930f      	str	r3, [sp, #60]	; 0x3c
		while (usart_init(&usart_instance,
    1272:	4d10      	ldr	r5, [pc, #64]	; (12b4 <configure_usart+0xa8>)
    1274:	4c10      	ldr	r4, [pc, #64]	; (12b8 <configure_usart+0xac>)
    1276:	466a      	mov	r2, sp
    1278:	4910      	ldr	r1, [pc, #64]	; (12bc <configure_usart+0xb0>)
    127a:	0028      	movs	r0, r5
    127c:	47a0      	blx	r4
    127e:	2800      	cmp	r0, #0
    1280:	d1f9      	bne.n	1276 <configure_usart+0x6a>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1282:	4d0c      	ldr	r5, [pc, #48]	; (12b4 <configure_usart+0xa8>)
    1284:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1286:	0020      	movs	r0, r4
    1288:	4b0d      	ldr	r3, [pc, #52]	; (12c0 <configure_usart+0xb4>)
    128a:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    128c:	231f      	movs	r3, #31
    128e:	4018      	ands	r0, r3
    1290:	3b1e      	subs	r3, #30
    1292:	4083      	lsls	r3, r0
    1294:	4a0b      	ldr	r2, [pc, #44]	; (12c4 <configure_usart+0xb8>)
    1296:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1298:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    129a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    129c:	2b00      	cmp	r3, #0
    129e:	d1fc      	bne.n	129a <configure_usart+0x8e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    12a0:	6823      	ldr	r3, [r4, #0]
    12a2:	2202      	movs	r2, #2
    12a4:	4313      	orrs	r3, r2
    12a6:	6023      	str	r3, [r4, #0]
		EDBG_CDC_MODULE, &config_usart) != STATUS_OK) {
		}
	}
	#endif
	usart_enable(&usart_instance);
}
    12a8:	b011      	add	sp, #68	; 0x44
    12aa:	bd30      	pop	{r4, r5, pc}
    12ac:	00160002 	.word	0x00160002
    12b0:	00170002 	.word	0x00170002
    12b4:	200000f0 	.word	0x200000f0
    12b8:	00000691 	.word	0x00000691
    12bc:	42001400 	.word	0x42001400
    12c0:	00000601 	.word	0x00000601
    12c4:	e000e100 	.word	0xe000e100

000012c8 <LCD_Fast_Fill>:
		(((long)(x2-x1)+1)*((long)(y2-y1)+1)));
	REG_PORT_OUTSET1 = LCD_CS;
}

void LCD_Fast_Fill(int ch, int cl, long pix)
{
    12c8:	b570      	push	{r4, r5, r6, lr}
	int blocks;

	REG_PORT_OUTCLR1 = 0x0000ffff;
    12ca:	4c19      	ldr	r4, [pc, #100]	; (1330 <LCD_Fast_Fill+0x68>)
    12cc:	4b19      	ldr	r3, [pc, #100]	; (1334 <LCD_Fast_Fill+0x6c>)
    12ce:	601c      	str	r4, [r3, #0]
	REG_PORT_OUTSET1 = (ch << 8) | cl;
    12d0:	0200      	lsls	r0, r0, #8
    12d2:	4301      	orrs	r1, r0
    12d4:	4b18      	ldr	r3, [pc, #96]	; (1338 <LCD_Fast_Fill+0x70>)
    12d6:	6019      	str	r1, [r3, #0]

	blocks = pix/16;
    12d8:	17d3      	asrs	r3, r2, #31
    12da:	260f      	movs	r6, #15
    12dc:	401e      	ands	r6, r3
    12de:	18b6      	adds	r6, r6, r2
    12e0:	1136      	asrs	r6, r6, #4
	for (int i=0; i<blocks; i++)
    12e2:	2500      	movs	r5, #0
    12e4:	2e00      	cmp	r6, #0
    12e6:	dd0c      	ble.n	1302 <LCD_Fast_Fill+0x3a>
	{
		for (int j=0; j<16; j++)
		{
			REG_PORT_OUTCLR1 = LCD_WR;
    12e8:	4c12      	ldr	r4, [pc, #72]	; (1334 <LCD_Fast_Fill+0x6c>)
    12ea:	2180      	movs	r1, #128	; 0x80
    12ec:	0289      	lsls	r1, r1, #10
			REG_PORT_OUTSET1 = LCD_WR;
    12ee:	4812      	ldr	r0, [pc, #72]	; (1338 <LCD_Fast_Fill+0x70>)
{
    12f0:	2310      	movs	r3, #16
			REG_PORT_OUTCLR1 = LCD_WR;
    12f2:	6021      	str	r1, [r4, #0]
			REG_PORT_OUTSET1 = LCD_WR;
    12f4:	6001      	str	r1, [r0, #0]
    12f6:	3b01      	subs	r3, #1
		for (int j=0; j<16; j++)
    12f8:	2b00      	cmp	r3, #0
    12fa:	d1fa      	bne.n	12f2 <LCD_Fast_Fill+0x2a>
	for (int i=0; i<blocks; i++)
    12fc:	3501      	adds	r5, #1
    12fe:	42ae      	cmp	r6, r5
    1300:	d1f6      	bne.n	12f0 <LCD_Fast_Fill+0x28>
		}
	}
	
	if ((pix % 16) != 0)
    1302:	0713      	lsls	r3, r2, #28
    1304:	d013      	beq.n	132e <LCD_Fast_Fill+0x66>
		for (int i=0; i<(pix % 16)+1; i++)
    1306:	17d3      	asrs	r3, r2, #31
    1308:	0f1b      	lsrs	r3, r3, #28
    130a:	18d2      	adds	r2, r2, r3
    130c:	210f      	movs	r1, #15
    130e:	4011      	ands	r1, r2
    1310:	1ac9      	subs	r1, r1, r3
    1312:	1c4b      	adds	r3, r1, #1
    1314:	2b00      	cmp	r3, #0
    1316:	dd0a      	ble.n	132e <LCD_Fast_Fill+0x66>
    1318:	0019      	movs	r1, r3
    131a:	2300      	movs	r3, #0
		{
			REG_PORT_OUTCLR1 = LCD_WR;
    131c:	4c05      	ldr	r4, [pc, #20]	; (1334 <LCD_Fast_Fill+0x6c>)
    131e:	2280      	movs	r2, #128	; 0x80
    1320:	0292      	lsls	r2, r2, #10
			REG_PORT_OUTSET1 = LCD_WR;
    1322:	4805      	ldr	r0, [pc, #20]	; (1338 <LCD_Fast_Fill+0x70>)
			REG_PORT_OUTCLR1 = LCD_WR;
    1324:	6022      	str	r2, [r4, #0]
			REG_PORT_OUTSET1 = LCD_WR;
    1326:	6002      	str	r2, [r0, #0]
		for (int i=0; i<(pix % 16)+1; i++)
    1328:	3301      	adds	r3, #1
    132a:	4299      	cmp	r1, r3
    132c:	d1fa      	bne.n	1324 <LCD_Fast_Fill+0x5c>
		}
}
    132e:	bd70      	pop	{r4, r5, r6, pc}
    1330:	0000ffff 	.word	0x0000ffff
    1334:	41004494 	.word	0x41004494
    1338:	41004498 	.word	0x41004498

0000133c <setColorHex>:
	fore_Color_Low = ((g&28)<<3|b>>3);
}

void setColorHex(uint16_t color)
{
	fore_Color_High = (color >> 8);
    133c:	0a02      	lsrs	r2, r0, #8
    133e:	4b03      	ldr	r3, [pc, #12]	; (134c <setColorHex+0x10>)
    1340:	801a      	strh	r2, [r3, #0]
	fore_Color_Low = (color & 0xFF);
    1342:	23ff      	movs	r3, #255	; 0xff
    1344:	4018      	ands	r0, r3
    1346:	4b02      	ldr	r3, [pc, #8]	; (1350 <setColorHex+0x14>)
    1348:	8018      	strh	r0, [r3, #0]
}
    134a:	4770      	bx	lr
    134c:	20000126 	.word	0x20000126
    1350:	20000128 	.word	0x20000128

00001354 <LCD_Write_Bus>:
	LCD_Write_COM16(0x2c,0x00);
}


void LCD_Write_Bus(char VH, char VL)
{
    1354:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = 0x0000ffff;
    1356:	4c06      	ldr	r4, [pc, #24]	; (1370 <LCD_Write_Bus+0x1c>)
    1358:	4b06      	ldr	r3, [pc, #24]	; (1374 <LCD_Write_Bus+0x20>)
    135a:	6023      	str	r3, [r4, #0]
	REG_PORT_OUTSET1 = (VH << 8) | VL;
    135c:	0200      	lsls	r0, r0, #8
    135e:	4301      	orrs	r1, r0
    1360:	4b05      	ldr	r3, [pc, #20]	; (1378 <LCD_Write_Bus+0x24>)
    1362:	6019      	str	r1, [r3, #0]
	REG_PORT_OUTCLR1 = LCD_WR;
    1364:	2280      	movs	r2, #128	; 0x80
    1366:	0292      	lsls	r2, r2, #10
    1368:	6022      	str	r2, [r4, #0]
	REG_PORT_OUTSET1 = LCD_WR;
    136a:	601a      	str	r2, [r3, #0]
}
    136c:	bd10      	pop	{r4, pc}
    136e:	46c0      	nop			; (mov r8, r8)
    1370:	41004494 	.word	0x41004494
    1374:	0000ffff 	.word	0x0000ffff
    1378:	41004498 	.word	0x41004498

0000137c <LCD_Write_COM16>:

void LCD_Write_COM16(char VH, char VL)
{
    137c:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = LCD_DC;
    137e:	2280      	movs	r2, #128	; 0x80
    1380:	0412      	lsls	r2, r2, #16
    1382:	4b02      	ldr	r3, [pc, #8]	; (138c <LCD_Write_COM16+0x10>)
    1384:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(VH,VL);
    1386:	4b02      	ldr	r3, [pc, #8]	; (1390 <LCD_Write_COM16+0x14>)
    1388:	4798      	blx	r3
}
    138a:	bd10      	pop	{r4, pc}
    138c:	41004494 	.word	0x41004494
    1390:	00001355 	.word	0x00001355

00001394 <LCD_Write_DATA8>:
	REG_PORT_OUTSET1 = LCD_DC;
	LCD_Write_Bus(VH,VL);
}

void LCD_Write_DATA8(char VL)
{
    1394:	b510      	push	{r4, lr}
    1396:	0001      	movs	r1, r0
	REG_PORT_OUTSET1 = LCD_DC;
    1398:	2280      	movs	r2, #128	; 0x80
    139a:	0412      	lsls	r2, r2, #16
    139c:	4b02      	ldr	r3, [pc, #8]	; (13a8 <LCD_Write_DATA8+0x14>)
    139e:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(0x00, VL);
    13a0:	2000      	movs	r0, #0
    13a2:	4b02      	ldr	r3, [pc, #8]	; (13ac <LCD_Write_DATA8+0x18>)
    13a4:	4798      	blx	r3
}
    13a6:	bd10      	pop	{r4, pc}
    13a8:	41004498 	.word	0x41004498
    13ac:	00001355 	.word	0x00001355

000013b0 <setXY>:
{
    13b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    13b2:	b083      	sub	sp, #12
    13b4:	000e      	movs	r6, r1
    13b6:	9300      	str	r3, [sp, #0]
	y1=display_Y_size-y1;
    13b8:	4b1c      	ldr	r3, [pc, #112]	; (142c <setXY+0x7c>)
    13ba:	881d      	ldrh	r5, [r3, #0]
    13bc:	1a28      	subs	r0, r5, r0
    13be:	b287      	uxth	r7, r0
	y2=display_Y_size-y2;
    13c0:	1aad      	subs	r5, r5, r2
    13c2:	b2ad      	uxth	r5, r5
	LCD_Write_COM16(0x2a,0x00);
    13c4:	2100      	movs	r1, #0
    13c6:	202a      	movs	r0, #42	; 0x2a
    13c8:	4c19      	ldr	r4, [pc, #100]	; (1430 <setXY+0x80>)
    13ca:	47a0      	blx	r4
	LCD_Write_DATA8(x1>>8);
    13cc:	9601      	str	r6, [sp, #4]
    13ce:	0a30      	lsrs	r0, r6, #8
    13d0:	4e18      	ldr	r6, [pc, #96]	; (1434 <setXY+0x84>)
    13d2:	47b0      	blx	r6
	LCD_Write_COM16(0x2a,0x01);
    13d4:	2101      	movs	r1, #1
    13d6:	202a      	movs	r0, #42	; 0x2a
    13d8:	47a0      	blx	r4
	LCD_Write_DATA8(x1);
    13da:	466b      	mov	r3, sp
    13dc:	7918      	ldrb	r0, [r3, #4]
    13de:	47b0      	blx	r6
	LCD_Write_COM16(0x2a,0x02);
    13e0:	2102      	movs	r1, #2
    13e2:	202a      	movs	r0, #42	; 0x2a
    13e4:	47a0      	blx	r4
	LCD_Write_DATA8(x2>>8);
    13e6:	9b00      	ldr	r3, [sp, #0]
    13e8:	0a18      	lsrs	r0, r3, #8
    13ea:	47b0      	blx	r6
	LCD_Write_COM16(0x2a,0x03);
    13ec:	2103      	movs	r1, #3
    13ee:	202a      	movs	r0, #42	; 0x2a
    13f0:	47a0      	blx	r4
	LCD_Write_DATA8(x2);
    13f2:	466b      	mov	r3, sp
    13f4:	7818      	ldrb	r0, [r3, #0]
    13f6:	47b0      	blx	r6
	LCD_Write_COM16(0x2b,0x00);
    13f8:	2100      	movs	r1, #0
    13fa:	202b      	movs	r0, #43	; 0x2b
    13fc:	47a0      	blx	r4
	LCD_Write_DATA8(y1>>8);
    13fe:	0a28      	lsrs	r0, r5, #8
    1400:	47b0      	blx	r6
	LCD_Write_COM16(0x2b,0x01);
    1402:	2101      	movs	r1, #1
    1404:	202b      	movs	r0, #43	; 0x2b
    1406:	47a0      	blx	r4
	LCD_Write_DATA8(y1);
    1408:	b2e8      	uxtb	r0, r5
    140a:	47b0      	blx	r6
	LCD_Write_COM16(0x2b,0x02);
    140c:	2102      	movs	r1, #2
    140e:	202b      	movs	r0, #43	; 0x2b
    1410:	47a0      	blx	r4
	LCD_Write_DATA8(y2>>8);
    1412:	0a38      	lsrs	r0, r7, #8
    1414:	47b0      	blx	r6
	LCD_Write_COM16(0x2b,0x03);
    1416:	2103      	movs	r1, #3
    1418:	202b      	movs	r0, #43	; 0x2b
    141a:	47a0      	blx	r4
	LCD_Write_DATA8(y2);
    141c:	b2f8      	uxtb	r0, r7
    141e:	47b0      	blx	r6
	LCD_Write_COM16(0x2c,0x00);
    1420:	2100      	movs	r1, #0
    1422:	202c      	movs	r0, #44	; 0x2c
    1424:	47a0      	blx	r4
}
    1426:	b003      	add	sp, #12
    1428:	bdf0      	pop	{r4, r5, r6, r7, pc}
    142a:	46c0      	nop			; (mov r8, r8)
    142c:	2000000c 	.word	0x2000000c
    1430:	0000137d 	.word	0x0000137d
    1434:	00001395 	.word	0x00001395

00001438 <fillRect>:
{
    1438:	b5f0      	push	{r4, r5, r6, r7, lr}
    143a:	46ce      	mov	lr, r9
    143c:	4647      	mov	r7, r8
    143e:	b580      	push	{r7, lr}
    1440:	b083      	sub	sp, #12
    1442:	4681      	mov	r9, r0
    1444:	4688      	mov	r8, r1
    1446:	0015      	movs	r5, r2
    1448:	001c      	movs	r4, r3
	if (x1>x2)
    144a:	4290      	cmp	r0, r2
    144c:	dd02      	ble.n	1454 <fillRect+0x1c>
    144e:	0403      	lsls	r3, r0, #16
		SwapUint16(x1, x2);
    1450:	4691      	mov	r9, r2
    1452:	0c1d      	lsrs	r5, r3, #16
	if (y1>y2)
    1454:	45a0      	cmp	r8, r4
    1456:	dd03      	ble.n	1460 <fillRect+0x28>
    1458:	4643      	mov	r3, r8
    145a:	041b      	lsls	r3, r3, #16
		SwapUint16(y1, y2);
    145c:	46a0      	mov	r8, r4
    145e:	0c1c      	lsrs	r4, r3, #16
	REG_PORT_OUTCLR1 = LCD_CS;
    1460:	2780      	movs	r7, #128	; 0x80
    1462:	03ff      	lsls	r7, r7, #15
    1464:	4b12      	ldr	r3, [pc, #72]	; (14b0 <fillRect+0x78>)
    1466:	601f      	str	r7, [r3, #0]
	setXY(x1, y1, x2, y2);
    1468:	b2a3      	uxth	r3, r4
    146a:	b2aa      	uxth	r2, r5
    146c:	4641      	mov	r1, r8
    146e:	4668      	mov	r0, sp
    1470:	80c1      	strh	r1, [r0, #6]
    1472:	88c1      	ldrh	r1, [r0, #6]
    1474:	4648      	mov	r0, r9
    1476:	466e      	mov	r6, sp
    1478:	80f0      	strh	r0, [r6, #6]
    147a:	88f0      	ldrh	r0, [r6, #6]
    147c:	4e0d      	ldr	r6, [pc, #52]	; (14b4 <fillRect+0x7c>)
    147e:	47b0      	blx	r6
	REG_PORT_OUTSET1 = LCD_DC;
    1480:	4e0d      	ldr	r6, [pc, #52]	; (14b8 <fillRect+0x80>)
    1482:	2380      	movs	r3, #128	; 0x80
    1484:	041b      	lsls	r3, r3, #16
    1486:	6033      	str	r3, [r6, #0]
		(((long)(x2-x1)+1)*((long)(y2-y1)+1)));
    1488:	464b      	mov	r3, r9
    148a:	1aed      	subs	r5, r5, r3
    148c:	3501      	adds	r5, #1
    148e:	4643      	mov	r3, r8
    1490:	1ae2      	subs	r2, r4, r3
    1492:	3201      	adds	r2, #1
	LCD_Fast_Fill(fore_Color_High, fore_Color_Low, 
    1494:	436a      	muls	r2, r5
    1496:	4b09      	ldr	r3, [pc, #36]	; (14bc <fillRect+0x84>)
    1498:	8819      	ldrh	r1, [r3, #0]
    149a:	4b09      	ldr	r3, [pc, #36]	; (14c0 <fillRect+0x88>)
    149c:	8818      	ldrh	r0, [r3, #0]
    149e:	4b09      	ldr	r3, [pc, #36]	; (14c4 <fillRect+0x8c>)
    14a0:	4798      	blx	r3
	REG_PORT_OUTSET1 = LCD_CS;
    14a2:	6037      	str	r7, [r6, #0]
}
    14a4:	b003      	add	sp, #12
    14a6:	bc0c      	pop	{r2, r3}
    14a8:	4690      	mov	r8, r2
    14aa:	4699      	mov	r9, r3
    14ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    14ae:	46c0      	nop			; (mov r8, r8)
    14b0:	41004494 	.word	0x41004494
    14b4:	000013b1 	.word	0x000013b1
    14b8:	41004498 	.word	0x41004498
    14bc:	20000128 	.word	0x20000128
    14c0:	20000126 	.word	0x20000126
    14c4:	000012c9 	.word	0x000012c9

000014c8 <clrXY>:
{
    14c8:	b510      	push	{r4, lr}
	setXY(0,0,display_X_size,display_Y_size);
    14ca:	4b04      	ldr	r3, [pc, #16]	; (14dc <clrXY+0x14>)
    14cc:	881b      	ldrh	r3, [r3, #0]
    14ce:	4a04      	ldr	r2, [pc, #16]	; (14e0 <clrXY+0x18>)
    14d0:	8812      	ldrh	r2, [r2, #0]
    14d2:	2100      	movs	r1, #0
    14d4:	2000      	movs	r0, #0
    14d6:	4c03      	ldr	r4, [pc, #12]	; (14e4 <clrXY+0x1c>)
    14d8:	47a0      	blx	r4
}
    14da:	bd10      	pop	{r4, pc}
    14dc:	2000000c 	.word	0x2000000c
    14e0:	2000000a 	.word	0x2000000a
    14e4:	000013b1 	.word	0x000013b1

000014e8 <clrScr>:
{
    14e8:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = LCD_CS;
    14ea:	2280      	movs	r2, #128	; 0x80
    14ec:	03d2      	lsls	r2, r2, #15
    14ee:	4b02      	ldr	r3, [pc, #8]	; (14f8 <clrScr+0x10>)
    14f0:	601a      	str	r2, [r3, #0]
	clrXY();
    14f2:	4b02      	ldr	r3, [pc, #8]	; (14fc <clrScr+0x14>)
    14f4:	4798      	blx	r3
}
    14f6:	bd10      	pop	{r4, pc}
    14f8:	41004494 	.word	0x41004494
    14fc:	000014c9 	.word	0x000014c9

00001500 <drawKare>:
//	graphic in the entire project. Please note this is the most
//	space efficient way to do this; a 40x31 bitmap is 930 bytes, 
//	whereas	this is (104*2)+28+20, or 256 bytes.
/*********************************************************************/
void drawKare(int emotion)
{
    1500:	b5f0      	push	{r4, r5, r6, r7, lr}
    1502:	b0c1      	sub	sp, #260	; 0x104
    1504:	0007      	movs	r7, r0
	uint16_t body[104] = {10,10,20,20,20,0,380,10,380,10,390,20,0,
    1506:	22d0      	movs	r2, #208	; 0xd0
    1508:	4933      	ldr	r1, [pc, #204]	; (15d8 <drawKare+0xd8>)
    150a:	a80c      	add	r0, sp, #48	; 0x30
    150c:	4b33      	ldr	r3, [pc, #204]	; (15dc <drawKare+0xdc>)
    150e:	4798      	blx	r3
		50,120,0,130,50,140,0,150,50,160,0,170,50,180,0,190,50,200,
		300,200,370,210,30,220,370,230,30,240,370,250,30,260,370,
		270,90,280,300,290};
		
	//Yeah, these are uint8 arrays.		
	uint8_t happyTerm[28] = {180,80,190,130,170,130,190,140,140,
    1510:	a805      	add	r0, sp, #20
    1512:	4b33      	ldr	r3, [pc, #204]	; (15e0 <drawKare+0xe0>)
    1514:	001a      	movs	r2, r3
    1516:	3250      	adds	r2, #80	; 0x50
    1518:	0001      	movs	r1, r0
    151a:	ca31      	ldmia	r2!, {r0, r4, r5}
    151c:	c131      	stmia	r1!, {r0, r4, r5}
    151e:	ca31      	ldmia	r2!, {r0, r4, r5}
    1520:	c131      	stmia	r1!, {r0, r4, r5}
    1522:	6812      	ldr	r2, [r2, #0]
    1524:	600a      	str	r2, [r1, #0]
		60,150,100,210,60,220,100,130,150,140,160,140,160,220,170,
		220,150,230,160};
		
	uint8_t rPiBeret[20] = {120,60,240,80,110,70,120,90,150,
    1526:	336c      	adds	r3, #108	; 0x6c
    1528:	466a      	mov	r2, sp
    152a:	cb13      	ldmia	r3!, {r0, r1, r4}
    152c:	c213      	stmia	r2!, {r0, r1, r4}
    152e:	cb03      	ldmia	r3!, {r0, r1}
    1530:	c203      	stmia	r2!, {r0, r1}

	int offsetGraphicX = 300;	
	int offsetGraphicY = 150;	
	int iSv = 2;				//an inverse scale factor

	setColorHex(chip_Serial_Number);
    1532:	2040      	movs	r0, #64	; 0x40
    1534:	4b2b      	ldr	r3, [pc, #172]	; (15e4 <drawKare+0xe4>)
    1536:	4798      	blx	r3
	back_Color_High = ((r&248)|g>>5);
    1538:	2300      	movs	r3, #0
    153a:	4a2b      	ldr	r2, [pc, #172]	; (15e8 <drawKare+0xe8>)
    153c:	8013      	strh	r3, [r2, #0]
	back_Color_Low = ((g&28)<<3|b>>3);
    153e:	4a2b      	ldr	r2, [pc, #172]	; (15ec <drawKare+0xec>)
    1540:	8013      	strh	r3, [r2, #0]
    1542:	ac0c      	add	r4, sp, #48	; 0x30
    1544:	ae40      	add	r6, sp, #256	; 0x100
	setBackColorRGB(0,0,0);
		
	for(int i = 0; i < 104; i = i+4)
	{
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
    1546:	4d2a      	ldr	r5, [pc, #168]	; (15f0 <drawKare+0xf0>)
		((body[i+1]/iSv)+(offsetGraphicY)),
		((body[i+2]/iSv)+(offsetGraphicX)),
		((body[i+3]/iSv)+(offsetGraphicY)));
    1548:	88e3      	ldrh	r3, [r4, #6]
    154a:	105b      	asrs	r3, r3, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
    154c:	3396      	adds	r3, #150	; 0x96
		((body[i+2]/iSv)+(offsetGraphicX)),
    154e:	88a2      	ldrh	r2, [r4, #4]
    1550:	1052      	asrs	r2, r2, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
    1552:	322d      	adds	r2, #45	; 0x2d
    1554:	32ff      	adds	r2, #255	; 0xff
		((body[i+1]/iSv)+(offsetGraphicY)),
    1556:	8861      	ldrh	r1, [r4, #2]
    1558:	1049      	asrs	r1, r1, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
    155a:	3196      	adds	r1, #150	; 0x96
    155c:	8820      	ldrh	r0, [r4, #0]
    155e:	1040      	asrs	r0, r0, #1
    1560:	302d      	adds	r0, #45	; 0x2d
    1562:	30ff      	adds	r0, #255	; 0xff
    1564:	47a8      	blx	r5
    1566:	3408      	adds	r4, #8
	for(int i = 0; i < 104; i = i+4)
    1568:	42b4      	cmp	r4, r6
    156a:	d1ed      	bne.n	1548 <drawKare+0x48>
	}
	switch(emotion)
    156c:	2f00      	cmp	r7, #0
    156e:	d006      	beq.n	157e <drawKare+0x7e>
    1570:	2f01      	cmp	r7, #1
    1572:	d01a      	beq.n	15aa <drawKare+0xaa>
			case 2:
				//make a sad terminal thing go here
				break;
	}
	
	delay_ms(5000);
    1574:	481f      	ldr	r0, [pc, #124]	; (15f4 <drawKare+0xf4>)
    1576:	4b20      	ldr	r3, [pc, #128]	; (15f8 <drawKare+0xf8>)
    1578:	4798      	blx	r3
	
}
    157a:	b041      	add	sp, #260	; 0x104
    157c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    157e:	ac05      	add	r4, sp, #20
    1580:	ae0c      	add	r6, sp, #48	; 0x30
					fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
    1582:	4d1b      	ldr	r5, [pc, #108]	; (15f0 <drawKare+0xf0>)
					((happyTerm[i+3]/iSv)+(offsetGraphicY)));
    1584:	78e3      	ldrb	r3, [r4, #3]
    1586:	105b      	asrs	r3, r3, #1
					fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
    1588:	3396      	adds	r3, #150	; 0x96
					((happyTerm[i+2]/iSv)+(offsetGraphicX)),
    158a:	78a2      	ldrb	r2, [r4, #2]
    158c:	1052      	asrs	r2, r2, #1
					fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
    158e:	322d      	adds	r2, #45	; 0x2d
    1590:	32ff      	adds	r2, #255	; 0xff
					((happyTerm[i+1]/iSv)+(offsetGraphicY)),
    1592:	7861      	ldrb	r1, [r4, #1]
    1594:	1049      	asrs	r1, r1, #1
					fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
    1596:	3196      	adds	r1, #150	; 0x96
    1598:	7820      	ldrb	r0, [r4, #0]
    159a:	1040      	asrs	r0, r0, #1
    159c:	302d      	adds	r0, #45	; 0x2d
    159e:	30ff      	adds	r0, #255	; 0xff
    15a0:	47a8      	blx	r5
    15a2:	3404      	adds	r4, #4
				for(int i = 0; i < 28; i = i+4)
    15a4:	42a6      	cmp	r6, r4
    15a6:	d1ed      	bne.n	1584 <drawKare+0x84>
    15a8:	e7e4      	b.n	1574 <drawKare+0x74>
    15aa:	466c      	mov	r4, sp
    15ac:	ae05      	add	r6, sp, #20
					fillRect((
    15ae:	4d10      	ldr	r5, [pc, #64]	; (15f0 <drawKare+0xf0>)
					((rPiBeret[i+3]/iSv)+(offsetGraphicY)));
    15b0:	78e3      	ldrb	r3, [r4, #3]
    15b2:	105b      	asrs	r3, r3, #1
					fillRect((
    15b4:	3396      	adds	r3, #150	; 0x96
					((rPiBeret[i+2]/iSv)+(offsetGraphicX)),
    15b6:	78a2      	ldrb	r2, [r4, #2]
    15b8:	1052      	asrs	r2, r2, #1
					fillRect((
    15ba:	322d      	adds	r2, #45	; 0x2d
    15bc:	32ff      	adds	r2, #255	; 0xff
					((rPiBeret[i+1]/iSv)+(offsetGraphicY)),
    15be:	7861      	ldrb	r1, [r4, #1]
    15c0:	1049      	asrs	r1, r1, #1
					fillRect((
    15c2:	3196      	adds	r1, #150	; 0x96
					(rPiBeret[i]/iSv)+(offsetGraphicX)),
    15c4:	7820      	ldrb	r0, [r4, #0]
    15c6:	1040      	asrs	r0, r0, #1
					fillRect((
    15c8:	302d      	adds	r0, #45	; 0x2d
    15ca:	30ff      	adds	r0, #255	; 0xff
    15cc:	47a8      	blx	r5
    15ce:	3404      	adds	r4, #4
				for(int i = 0; i < 20; i = i+4)
    15d0:	42b4      	cmp	r4, r6
    15d2:	d1ed      	bne.n	15b0 <drawKare+0xb0>
    15d4:	e7ce      	b.n	1574 <drawKare+0x74>
    15d6:	46c0      	nop			; (mov r8, r8)
    15d8:	00001bb8 	.word	0x00001bb8
    15dc:	000019f1 	.word	0x000019f1
    15e0:	00001c38 	.word	0x00001c38
    15e4:	0000133d 	.word	0x0000133d
    15e8:	2000012a 	.word	0x2000012a
    15ec:	20000124 	.word	0x20000124
    15f0:	00001439 	.word	0x00001439
    15f4:	00001388 	.word	0x00001388
    15f8:	00000155 	.word	0x00000155

000015fc <InitLCD>:



/**************************InitLCD()**********************************/
void InitLCD(void)
{
    15fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    15fe:	b083      	sub	sp, #12
		0x00,0x53,0x00,0x88,0x00,0xB6,0x00,0xF3,0x01,0x22,0x01,0x64,
		0x01,0x92,0x01,0xD4,0x02,0x07,0x02,0x08,0x02,0x34,0x02,0x5F,
		0x02,0x78,0x02,0x94,0x02,0xA6,0x02,0xBB,0x02,0xDB,0x02,0xF9,
		0x03,0x1F,0x03,0x7F};
		
		REG_PORT_DIRSET1 = 0x00010000;
    1600:	2380      	movs	r3, #128	; 0x80
    1602:	025b      	lsls	r3, r3, #9
    1604:	4a27      	ldr	r2, [pc, #156]	; (16a4 <InitLCD+0xa8>)
    1606:	6013      	str	r3, [r2, #0]
		REG_PORT_OUTSET1 = PORT_PB16;
    1608:	4c27      	ldr	r4, [pc, #156]	; (16a8 <InitLCD+0xac>)
    160a:	6023      	str	r3, [r4, #0]
		
		REG_PORT_OUTSET1 = LCD_Reset;
    160c:	2580      	movs	r5, #128	; 0x80
    160e:	05ed      	lsls	r5, r5, #23
    1610:	6025      	str	r5, [r4, #0]
		delay_ms(5);
    1612:	2005      	movs	r0, #5
    1614:	4f25      	ldr	r7, [pc, #148]	; (16ac <InitLCD+0xb0>)
    1616:	47b8      	blx	r7
		REG_PORT_OUTCLR1 = LCD_Reset;
    1618:	4e25      	ldr	r6, [pc, #148]	; (16b0 <InitLCD+0xb4>)
    161a:	6035      	str	r5, [r6, #0]
		delay_ms(15);
    161c:	200f      	movs	r0, #15
    161e:	47b8      	blx	r7
		REG_PORT_OUTSET1 = LCD_Reset;
    1620:	6025      	str	r5, [r4, #0]
		REG_PORT_OUTCLR1 = LCD_CS;
    1622:	2380      	movs	r3, #128	; 0x80
    1624:	03db      	lsls	r3, r3, #15
    1626:	6033      	str	r3, [r6, #0]

	for(int i = 0; i < 70; i++)
    1628:	2400      	movs	r4, #0
	{
		LCD_Write_COM16(belial[i],mulciber[i]);
    162a:	4f22      	ldr	r7, [pc, #136]	; (16b4 <InitLCD+0xb8>)
    162c:	4e22      	ldr	r6, [pc, #136]	; (16b8 <InitLCD+0xbc>)
    162e:	4d23      	ldr	r5, [pc, #140]	; (16bc <InitLCD+0xc0>)
    1630:	5de1      	ldrb	r1, [r4, r7]
    1632:	5da0      	ldrb	r0, [r4, r6]
    1634:	47a8      	blx	r5
		LCD_Write_DATA8(lucifer[i]);
    1636:	4b22      	ldr	r3, [pc, #136]	; (16c0 <InitLCD+0xc4>)
    1638:	5ce0      	ldrb	r0, [r4, r3]
    163a:	4b22      	ldr	r3, [pc, #136]	; (16c4 <InitLCD+0xc8>)
    163c:	4798      	blx	r3
	for(int i = 0; i < 70; i++)
    163e:	3401      	adds	r4, #1
    1640:	2c46      	cmp	r4, #70	; 0x46
    1642:	d1f5      	bne.n	1630 <InitLCD+0x34>
    1644:	23d1      	movs	r3, #209	; 0xd1
    1646:	9301      	str	r3, [sp, #4]
	}
	
	for(char k = 0xD1; k < 0xD6; k++)
		for(int l = 0; l < 48; l++)
		{
			LCD_Write_COM16(k,l);
    1648:	4d1c      	ldr	r5, [pc, #112]	; (16bc <InitLCD+0xc0>)
			LCD_Write_DATA8(beelzebub[l]);
    164a:	4f1f      	ldr	r7, [pc, #124]	; (16c8 <InitLCD+0xcc>)
    164c:	4e1d      	ldr	r6, [pc, #116]	; (16c4 <InitLCD+0xc8>)
	for(int i = 0; i < 70; i++)
    164e:	2400      	movs	r4, #0
			LCD_Write_COM16(k,l);
    1650:	b2e1      	uxtb	r1, r4
    1652:	9801      	ldr	r0, [sp, #4]
    1654:	47a8      	blx	r5
			LCD_Write_DATA8(beelzebub[l]);
    1656:	5de0      	ldrb	r0, [r4, r7]
    1658:	47b0      	blx	r6
		for(int l = 0; l < 48; l++)
    165a:	3401      	adds	r4, #1
    165c:	2c30      	cmp	r4, #48	; 0x30
    165e:	d1f7      	bne.n	1650 <InitLCD+0x54>
	for(char k = 0xD1; k < 0xD6; k++)
    1660:	9b01      	ldr	r3, [sp, #4]
    1662:	3301      	adds	r3, #1
    1664:	b2db      	uxtb	r3, r3
    1666:	9301      	str	r3, [sp, #4]
    1668:	2bd6      	cmp	r3, #214	; 0xd6
    166a:	d1f0      	bne.n	164e <InitLCD+0x52>
		}
		

	
  	LCD_Write_COM16(0x11,0x00);   //StartUp  
    166c:	2100      	movs	r1, #0
    166e:	2011      	movs	r0, #17
    1670:	4d12      	ldr	r5, [pc, #72]	; (16bc <InitLCD+0xc0>)
    1672:	47a8      	blx	r5
  
  	delay_ms(5);
    1674:	2005      	movs	r0, #5
    1676:	4c0d      	ldr	r4, [pc, #52]	; (16ac <InitLCD+0xb0>)
    1678:	47a0      	blx	r4

  	LCD_Write_COM16(0x29,0x00);   //Display On  
    167a:	2100      	movs	r1, #0
    167c:	2029      	movs	r0, #41	; 0x29
    167e:	47a8      	blx	r5
	  
   	delay_ms(5);
    1680:	2005      	movs	r0, #5
    1682:	47a0      	blx	r4
	
	REG_PORT_OUTSET1 = LCD_CS;
    1684:	2280      	movs	r2, #128	; 0x80
    1686:	03d2      	lsls	r2, r2, #15
    1688:	4b07      	ldr	r3, [pc, #28]	; (16a8 <InitLCD+0xac>)
    168a:	601a      	str	r2, [r3, #0]
	fore_Color_High = ((r&248)|g>>5);
    168c:	23ff      	movs	r3, #255	; 0xff
    168e:	4a0f      	ldr	r2, [pc, #60]	; (16cc <InitLCD+0xd0>)
    1690:	8013      	strh	r3, [r2, #0]
	fore_Color_Low = ((g&28)<<3|b>>3);
    1692:	4a0f      	ldr	r2, [pc, #60]	; (16d0 <InitLCD+0xd4>)
    1694:	8013      	strh	r3, [r2, #0]
	back_Color_High = ((r&248)|g>>5);
    1696:	2300      	movs	r3, #0
    1698:	4a0e      	ldr	r2, [pc, #56]	; (16d4 <InitLCD+0xd8>)
    169a:	8013      	strh	r3, [r2, #0]
	back_Color_Low = ((g&28)<<3|b>>3);
    169c:	4a0e      	ldr	r2, [pc, #56]	; (16d8 <InitLCD+0xdc>)
    169e:	8013      	strh	r3, [r2, #0]
	
	setColorRGB(255, 255, 255);
	setBackColorRGB(0, 0, 0);
	
}
    16a0:	b003      	add	sp, #12
    16a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    16a4:	41004488 	.word	0x41004488
    16a8:	41004498 	.word	0x41004498
    16ac:	00000155 	.word	0x00000155
    16b0:	41004494 	.word	0x41004494
    16b4:	00001d78 	.word	0x00001d78
    16b8:	00001ce8 	.word	0x00001ce8
    16bc:	0000137d 	.word	0x0000137d
    16c0:	00001d30 	.word	0x00001d30
    16c4:	00001395 	.word	0x00001395
    16c8:	00001cb8 	.word	0x00001cb8
    16cc:	20000126 	.word	0x20000126
    16d0:	20000128 	.word	0x20000128
    16d4:	2000012a 	.word	0x2000012a
    16d8:	20000124 	.word	0x20000124

000016dc <main>:
{
    16dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    16de:	46de      	mov	lr, fp
    16e0:	464f      	mov	r7, r9
    16e2:	4646      	mov	r6, r8
    16e4:	b5c0      	push	{r6, r7, lr}
	system_init();
    16e6:	4b44      	ldr	r3, [pc, #272]	; (17f8 <main+0x11c>)
    16e8:	4798      	blx	r3
	delay_init();
    16ea:	4b44      	ldr	r3, [pc, #272]	; (17fc <main+0x120>)
    16ec:	4798      	blx	r3
	srand(chip_Serial_Number);
    16ee:	2040      	movs	r0, #64	; 0x40
    16f0:	4b43      	ldr	r3, [pc, #268]	; (1800 <main+0x124>)
    16f2:	4798      	blx	r3
	configure_usart();
    16f4:	4b43      	ldr	r3, [pc, #268]	; (1804 <main+0x128>)
    16f6:	4798      	blx	r3
	REG_PORT_DIRSET1 = 0x0000ffff;		//this is the LCD data bus, PB00 - PB15
    16f8:	4b43      	ldr	r3, [pc, #268]	; (1808 <main+0x12c>)
    16fa:	4a44      	ldr	r2, [pc, #272]	; (180c <main+0x130>)
    16fc:	4694      	mov	ip, r2
    16fe:	601a      	str	r2, [r3, #0]
	REG_PORT_DIRSET1 = LCD_Reset;
    1700:	2780      	movs	r7, #128	; 0x80
    1702:	05ff      	lsls	r7, r7, #23
    1704:	601f      	str	r7, [r3, #0]
	REG_PORT_DIRSET1 = LCD_CS;
    1706:	2580      	movs	r5, #128	; 0x80
    1708:	03ed      	lsls	r5, r5, #15
    170a:	601d      	str	r5, [r3, #0]
	REG_PORT_DIRSET1 = LCD_WR;
    170c:	2080      	movs	r0, #128	; 0x80
    170e:	0280      	lsls	r0, r0, #10
    1710:	6018      	str	r0, [r3, #0]
	REG_PORT_DIRSET1 = LCD_DC;
    1712:	2180      	movs	r1, #128	; 0x80
    1714:	0409      	lsls	r1, r1, #16
    1716:	6019      	str	r1, [r3, #0]
	REG_PORT_DIRSET1 = LCD_RD;
    1718:	3201      	adds	r2, #1
    171a:	4690      	mov	r8, r2
    171c:	601a      	str	r2, [r3, #0]
	REG_PORT_OUTCLR1 = 0x0000ffff;
    171e:	4b3c      	ldr	r3, [pc, #240]	; (1810 <main+0x134>)
    1720:	4662      	mov	r2, ip
    1722:	601a      	str	r2, [r3, #0]
	REG_PORT_OUTCLR1 = LCD_Reset;
    1724:	601f      	str	r7, [r3, #0]
	REG_PORT_OUTCLR1 = LCD_CS;
    1726:	601d      	str	r5, [r3, #0]
	REG_PORT_OUTCLR1 = LCD_WR;
    1728:	6018      	str	r0, [r3, #0]
	REG_PORT_OUTCLR1 = LCD_DC;
    172a:	6019      	str	r1, [r3, #0]
	REG_PORT_OUTCLR1 = LCD_RD;
    172c:	4642      	mov	r2, r8
    172e:	601a      	str	r2, [r3, #0]
	InitLCD();
    1730:	4b38      	ldr	r3, [pc, #224]	; (1814 <main+0x138>)
    1732:	4798      	blx	r3
	fore_Color_High = ((r&248)|g>>5);
    1734:	4b38      	ldr	r3, [pc, #224]	; (1818 <main+0x13c>)
    1736:	469b      	mov	fp, r3
    1738:	2500      	movs	r5, #0
    173a:	801d      	strh	r5, [r3, #0]
	fore_Color_Low = ((g&28)<<3|b>>3);
    173c:	4b37      	ldr	r3, [pc, #220]	; (181c <main+0x140>)
    173e:	4699      	mov	r9, r3
    1740:	801d      	strh	r5, [r3, #0]
	back_Color_High = ((r&248)|g>>5);
    1742:	4b37      	ldr	r3, [pc, #220]	; (1820 <main+0x144>)
    1744:	801d      	strh	r5, [r3, #0]
	back_Color_Low = ((g&28)<<3|b>>3);
    1746:	4b37      	ldr	r3, [pc, #220]	; (1824 <main+0x148>)
    1748:	801d      	strh	r5, [r3, #0]
	fillRect(0,0,799,479);
    174a:	23e0      	movs	r3, #224	; 0xe0
    174c:	33ff      	adds	r3, #255	; 0xff
    174e:	4a36      	ldr	r2, [pc, #216]	; (1828 <main+0x14c>)
    1750:	2100      	movs	r1, #0
    1752:	2000      	movs	r0, #0
    1754:	4f35      	ldr	r7, [pc, #212]	; (182c <main+0x150>)
    1756:	47b8      	blx	r7
	drawKare(0);
    1758:	2000      	movs	r0, #0
    175a:	4b35      	ldr	r3, [pc, #212]	; (1830 <main+0x154>)
    175c:	4798      	blx	r3
	delay_ms(2000);
    175e:	20fa      	movs	r0, #250	; 0xfa
    1760:	00c0      	lsls	r0, r0, #3
    1762:	4b34      	ldr	r3, [pc, #208]	; (1834 <main+0x158>)
    1764:	4798      	blx	r3
	fore_Color_High = ((r&248)|g>>5);
    1766:	465b      	mov	r3, fp
    1768:	801d      	strh	r5, [r3, #0]
	fore_Color_Low = ((g&28)<<3|b>>3);
    176a:	464b      	mov	r3, r9
    176c:	801d      	strh	r5, [r3, #0]
	fillRect(0,0,799,479);
    176e:	23e0      	movs	r3, #224	; 0xe0
    1770:	33ff      	adds	r3, #255	; 0xff
    1772:	4a2d      	ldr	r2, [pc, #180]	; (1828 <main+0x14c>)
    1774:	2100      	movs	r1, #0
    1776:	2000      	movs	r0, #0
    1778:	47b8      	blx	r7
		clrScr();
    177a:	4b2f      	ldr	r3, [pc, #188]	; (1838 <main+0x15c>)
    177c:	4798      	blx	r3
		red = 255;
    177e:	35ff      	adds	r5, #255	; 0xff
	fore_Color_High = ((r&248)|g>>5);
    1780:	4b25      	ldr	r3, [pc, #148]	; (1818 <main+0x13c>)
    1782:	4699      	mov	r9, r3
	fore_Color_Low = ((g&28)<<3|b>>3);
    1784:	4b25      	ldr	r3, [pc, #148]	; (181c <main+0x140>)
    1786:	4698      	mov	r8, r3
			fillRect(0,0,40,40);
    1788:	4f28      	ldr	r7, [pc, #160]	; (182c <main+0x150>)
    178a:	e024      	b.n	17d6 <main+0xfa>
			if(green > 0 && red == 0)
    178c:	2c00      	cmp	r4, #0
    178e:	dd03      	ble.n	1798 <main+0xbc>
    1790:	2d00      	cmp	r5, #0
    1792:	d107      	bne.n	17a4 <main+0xc8>
				green--;
    1794:	3c01      	subs	r4, #1
				blue++;
    1796:	3601      	adds	r6, #1
			if(blue > 0 && green == 0)
    1798:	2e00      	cmp	r6, #0
    179a:	dd03      	ble.n	17a4 <main+0xc8>
    179c:	2c00      	cmp	r4, #0
    179e:	d101      	bne.n	17a4 <main+0xc8>
				red++;
    17a0:	3501      	adds	r5, #1
				blue--;
    17a2:	3e01      	subs	r6, #1
	fore_Color_High = ((r&248)|g>>5);
    17a4:	2307      	movs	r3, #7
    17a6:	002a      	movs	r2, r5
    17a8:	439a      	bics	r2, r3
    17aa:	0013      	movs	r3, r2
    17ac:	b2e2      	uxtb	r2, r4
    17ae:	0952      	lsrs	r2, r2, #5
    17b0:	4313      	orrs	r3, r2
    17b2:	b2db      	uxtb	r3, r3
    17b4:	464a      	mov	r2, r9
    17b6:	8013      	strh	r3, [r2, #0]
	fore_Color_Low = ((g&28)<<3|b>>3);
    17b8:	00e2      	lsls	r2, r4, #3
    17ba:	23e0      	movs	r3, #224	; 0xe0
    17bc:	401a      	ands	r2, r3
    17be:	b2f3      	uxtb	r3, r6
    17c0:	08db      	lsrs	r3, r3, #3
    17c2:	4313      	orrs	r3, r2
    17c4:	4642      	mov	r2, r8
    17c6:	8013      	strh	r3, [r2, #0]
			fillRect(0,0,40,40);
    17c8:	2328      	movs	r3, #40	; 0x28
    17ca:	2228      	movs	r2, #40	; 0x28
    17cc:	2100      	movs	r1, #0
    17ce:	2000      	movs	r0, #0
    17d0:	47b8      	blx	r7
			if(red == 255)
    17d2:	2dff      	cmp	r5, #255	; 0xff
    17d4:	d008      	beq.n	17e8 <main+0x10c>
			if(red > 0 && blue == 0)
    17d6:	2d00      	cmp	r5, #0
    17d8:	ddd8      	ble.n	178c <main+0xb0>
    17da:	2e00      	cmp	r6, #0
    17dc:	d108      	bne.n	17f0 <main+0x114>
				red--;
    17de:	3d01      	subs	r5, #1
				green++;
    17e0:	3401      	adds	r4, #1
			if(green > 0 && red == 0)
    17e2:	2c00      	cmp	r4, #0
    17e4:	dcd4      	bgt.n	1790 <main+0xb4>
    17e6:	e7dd      	b.n	17a4 <main+0xc8>
				delay_ms(100);
    17e8:	2064      	movs	r0, #100	; 0x64
    17ea:	4b12      	ldr	r3, [pc, #72]	; (1834 <main+0x158>)
    17ec:	4798      	blx	r3
    17ee:	e7f2      	b.n	17d6 <main+0xfa>
			if(green > 0 && red == 0)
    17f0:	2c00      	cmp	r4, #0
    17f2:	dcd7      	bgt.n	17a4 <main+0xc8>
    17f4:	e7d0      	b.n	1798 <main+0xbc>
    17f6:	46c0      	nop			; (mov r8, r8)
    17f8:	000010d5 	.word	0x000010d5
    17fc:	00000115 	.word	0x00000115
    1800:	00001a05 	.word	0x00001a05
    1804:	0000120d 	.word	0x0000120d
    1808:	41004488 	.word	0x41004488
    180c:	0000ffff 	.word	0x0000ffff
    1810:	41004494 	.word	0x41004494
    1814:	000015fd 	.word	0x000015fd
    1818:	20000126 	.word	0x20000126
    181c:	20000128 	.word	0x20000128
    1820:	2000012a 	.word	0x2000012a
    1824:	20000124 	.word	0x20000124
    1828:	0000031f 	.word	0x0000031f
    182c:	00001439 	.word	0x00001439
    1830:	00001501 	.word	0x00001501
    1834:	00000155 	.word	0x00000155
    1838:	000014e9 	.word	0x000014e9

0000183c <__udivsi3>:
    183c:	2200      	movs	r2, #0
    183e:	0843      	lsrs	r3, r0, #1
    1840:	428b      	cmp	r3, r1
    1842:	d374      	bcc.n	192e <__udivsi3+0xf2>
    1844:	0903      	lsrs	r3, r0, #4
    1846:	428b      	cmp	r3, r1
    1848:	d35f      	bcc.n	190a <__udivsi3+0xce>
    184a:	0a03      	lsrs	r3, r0, #8
    184c:	428b      	cmp	r3, r1
    184e:	d344      	bcc.n	18da <__udivsi3+0x9e>
    1850:	0b03      	lsrs	r3, r0, #12
    1852:	428b      	cmp	r3, r1
    1854:	d328      	bcc.n	18a8 <__udivsi3+0x6c>
    1856:	0c03      	lsrs	r3, r0, #16
    1858:	428b      	cmp	r3, r1
    185a:	d30d      	bcc.n	1878 <__udivsi3+0x3c>
    185c:	22ff      	movs	r2, #255	; 0xff
    185e:	0209      	lsls	r1, r1, #8
    1860:	ba12      	rev	r2, r2
    1862:	0c03      	lsrs	r3, r0, #16
    1864:	428b      	cmp	r3, r1
    1866:	d302      	bcc.n	186e <__udivsi3+0x32>
    1868:	1212      	asrs	r2, r2, #8
    186a:	0209      	lsls	r1, r1, #8
    186c:	d065      	beq.n	193a <__udivsi3+0xfe>
    186e:	0b03      	lsrs	r3, r0, #12
    1870:	428b      	cmp	r3, r1
    1872:	d319      	bcc.n	18a8 <__udivsi3+0x6c>
    1874:	e000      	b.n	1878 <__udivsi3+0x3c>
    1876:	0a09      	lsrs	r1, r1, #8
    1878:	0bc3      	lsrs	r3, r0, #15
    187a:	428b      	cmp	r3, r1
    187c:	d301      	bcc.n	1882 <__udivsi3+0x46>
    187e:	03cb      	lsls	r3, r1, #15
    1880:	1ac0      	subs	r0, r0, r3
    1882:	4152      	adcs	r2, r2
    1884:	0b83      	lsrs	r3, r0, #14
    1886:	428b      	cmp	r3, r1
    1888:	d301      	bcc.n	188e <__udivsi3+0x52>
    188a:	038b      	lsls	r3, r1, #14
    188c:	1ac0      	subs	r0, r0, r3
    188e:	4152      	adcs	r2, r2
    1890:	0b43      	lsrs	r3, r0, #13
    1892:	428b      	cmp	r3, r1
    1894:	d301      	bcc.n	189a <__udivsi3+0x5e>
    1896:	034b      	lsls	r3, r1, #13
    1898:	1ac0      	subs	r0, r0, r3
    189a:	4152      	adcs	r2, r2
    189c:	0b03      	lsrs	r3, r0, #12
    189e:	428b      	cmp	r3, r1
    18a0:	d301      	bcc.n	18a6 <__udivsi3+0x6a>
    18a2:	030b      	lsls	r3, r1, #12
    18a4:	1ac0      	subs	r0, r0, r3
    18a6:	4152      	adcs	r2, r2
    18a8:	0ac3      	lsrs	r3, r0, #11
    18aa:	428b      	cmp	r3, r1
    18ac:	d301      	bcc.n	18b2 <__udivsi3+0x76>
    18ae:	02cb      	lsls	r3, r1, #11
    18b0:	1ac0      	subs	r0, r0, r3
    18b2:	4152      	adcs	r2, r2
    18b4:	0a83      	lsrs	r3, r0, #10
    18b6:	428b      	cmp	r3, r1
    18b8:	d301      	bcc.n	18be <__udivsi3+0x82>
    18ba:	028b      	lsls	r3, r1, #10
    18bc:	1ac0      	subs	r0, r0, r3
    18be:	4152      	adcs	r2, r2
    18c0:	0a43      	lsrs	r3, r0, #9
    18c2:	428b      	cmp	r3, r1
    18c4:	d301      	bcc.n	18ca <__udivsi3+0x8e>
    18c6:	024b      	lsls	r3, r1, #9
    18c8:	1ac0      	subs	r0, r0, r3
    18ca:	4152      	adcs	r2, r2
    18cc:	0a03      	lsrs	r3, r0, #8
    18ce:	428b      	cmp	r3, r1
    18d0:	d301      	bcc.n	18d6 <__udivsi3+0x9a>
    18d2:	020b      	lsls	r3, r1, #8
    18d4:	1ac0      	subs	r0, r0, r3
    18d6:	4152      	adcs	r2, r2
    18d8:	d2cd      	bcs.n	1876 <__udivsi3+0x3a>
    18da:	09c3      	lsrs	r3, r0, #7
    18dc:	428b      	cmp	r3, r1
    18de:	d301      	bcc.n	18e4 <__udivsi3+0xa8>
    18e0:	01cb      	lsls	r3, r1, #7
    18e2:	1ac0      	subs	r0, r0, r3
    18e4:	4152      	adcs	r2, r2
    18e6:	0983      	lsrs	r3, r0, #6
    18e8:	428b      	cmp	r3, r1
    18ea:	d301      	bcc.n	18f0 <__udivsi3+0xb4>
    18ec:	018b      	lsls	r3, r1, #6
    18ee:	1ac0      	subs	r0, r0, r3
    18f0:	4152      	adcs	r2, r2
    18f2:	0943      	lsrs	r3, r0, #5
    18f4:	428b      	cmp	r3, r1
    18f6:	d301      	bcc.n	18fc <__udivsi3+0xc0>
    18f8:	014b      	lsls	r3, r1, #5
    18fa:	1ac0      	subs	r0, r0, r3
    18fc:	4152      	adcs	r2, r2
    18fe:	0903      	lsrs	r3, r0, #4
    1900:	428b      	cmp	r3, r1
    1902:	d301      	bcc.n	1908 <__udivsi3+0xcc>
    1904:	010b      	lsls	r3, r1, #4
    1906:	1ac0      	subs	r0, r0, r3
    1908:	4152      	adcs	r2, r2
    190a:	08c3      	lsrs	r3, r0, #3
    190c:	428b      	cmp	r3, r1
    190e:	d301      	bcc.n	1914 <__udivsi3+0xd8>
    1910:	00cb      	lsls	r3, r1, #3
    1912:	1ac0      	subs	r0, r0, r3
    1914:	4152      	adcs	r2, r2
    1916:	0883      	lsrs	r3, r0, #2
    1918:	428b      	cmp	r3, r1
    191a:	d301      	bcc.n	1920 <__udivsi3+0xe4>
    191c:	008b      	lsls	r3, r1, #2
    191e:	1ac0      	subs	r0, r0, r3
    1920:	4152      	adcs	r2, r2
    1922:	0843      	lsrs	r3, r0, #1
    1924:	428b      	cmp	r3, r1
    1926:	d301      	bcc.n	192c <__udivsi3+0xf0>
    1928:	004b      	lsls	r3, r1, #1
    192a:	1ac0      	subs	r0, r0, r3
    192c:	4152      	adcs	r2, r2
    192e:	1a41      	subs	r1, r0, r1
    1930:	d200      	bcs.n	1934 <__udivsi3+0xf8>
    1932:	4601      	mov	r1, r0
    1934:	4152      	adcs	r2, r2
    1936:	4610      	mov	r0, r2
    1938:	4770      	bx	lr
    193a:	e7ff      	b.n	193c <__udivsi3+0x100>
    193c:	b501      	push	{r0, lr}
    193e:	2000      	movs	r0, #0
    1940:	f000 f806 	bl	1950 <__aeabi_idiv0>
    1944:	bd02      	pop	{r1, pc}
    1946:	46c0      	nop			; (mov r8, r8)

00001948 <__aeabi_uidivmod>:
    1948:	2900      	cmp	r1, #0
    194a:	d0f7      	beq.n	193c <__udivsi3+0x100>
    194c:	e776      	b.n	183c <__udivsi3>
    194e:	4770      	bx	lr

00001950 <__aeabi_idiv0>:
    1950:	4770      	bx	lr
    1952:	46c0      	nop			; (mov r8, r8)

00001954 <__aeabi_lmul>:
    1954:	b5f0      	push	{r4, r5, r6, r7, lr}
    1956:	46ce      	mov	lr, r9
    1958:	4647      	mov	r7, r8
    195a:	0415      	lsls	r5, r2, #16
    195c:	0c2d      	lsrs	r5, r5, #16
    195e:	002e      	movs	r6, r5
    1960:	b580      	push	{r7, lr}
    1962:	0407      	lsls	r7, r0, #16
    1964:	0c14      	lsrs	r4, r2, #16
    1966:	0c3f      	lsrs	r7, r7, #16
    1968:	4699      	mov	r9, r3
    196a:	0c03      	lsrs	r3, r0, #16
    196c:	437e      	muls	r6, r7
    196e:	435d      	muls	r5, r3
    1970:	4367      	muls	r7, r4
    1972:	4363      	muls	r3, r4
    1974:	197f      	adds	r7, r7, r5
    1976:	0c34      	lsrs	r4, r6, #16
    1978:	19e4      	adds	r4, r4, r7
    197a:	469c      	mov	ip, r3
    197c:	42a5      	cmp	r5, r4
    197e:	d903      	bls.n	1988 <__aeabi_lmul+0x34>
    1980:	2380      	movs	r3, #128	; 0x80
    1982:	025b      	lsls	r3, r3, #9
    1984:	4698      	mov	r8, r3
    1986:	44c4      	add	ip, r8
    1988:	464b      	mov	r3, r9
    198a:	4351      	muls	r1, r2
    198c:	4343      	muls	r3, r0
    198e:	0436      	lsls	r6, r6, #16
    1990:	0c36      	lsrs	r6, r6, #16
    1992:	0c25      	lsrs	r5, r4, #16
    1994:	0424      	lsls	r4, r4, #16
    1996:	4465      	add	r5, ip
    1998:	19a4      	adds	r4, r4, r6
    199a:	1859      	adds	r1, r3, r1
    199c:	1949      	adds	r1, r1, r5
    199e:	0020      	movs	r0, r4
    19a0:	bc0c      	pop	{r2, r3}
    19a2:	4690      	mov	r8, r2
    19a4:	4699      	mov	r9, r3
    19a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000019a8 <__libc_init_array>:
    19a8:	b570      	push	{r4, r5, r6, lr}
    19aa:	2600      	movs	r6, #0
    19ac:	4d0c      	ldr	r5, [pc, #48]	; (19e0 <__libc_init_array+0x38>)
    19ae:	4c0d      	ldr	r4, [pc, #52]	; (19e4 <__libc_init_array+0x3c>)
    19b0:	1b64      	subs	r4, r4, r5
    19b2:	10a4      	asrs	r4, r4, #2
    19b4:	42a6      	cmp	r6, r4
    19b6:	d109      	bne.n	19cc <__libc_init_array+0x24>
    19b8:	2600      	movs	r6, #0
    19ba:	f000 fa01 	bl	1dc0 <_init>
    19be:	4d0a      	ldr	r5, [pc, #40]	; (19e8 <__libc_init_array+0x40>)
    19c0:	4c0a      	ldr	r4, [pc, #40]	; (19ec <__libc_init_array+0x44>)
    19c2:	1b64      	subs	r4, r4, r5
    19c4:	10a4      	asrs	r4, r4, #2
    19c6:	42a6      	cmp	r6, r4
    19c8:	d105      	bne.n	19d6 <__libc_init_array+0x2e>
    19ca:	bd70      	pop	{r4, r5, r6, pc}
    19cc:	00b3      	lsls	r3, r6, #2
    19ce:	58eb      	ldr	r3, [r5, r3]
    19d0:	4798      	blx	r3
    19d2:	3601      	adds	r6, #1
    19d4:	e7ee      	b.n	19b4 <__libc_init_array+0xc>
    19d6:	00b3      	lsls	r3, r6, #2
    19d8:	58eb      	ldr	r3, [r5, r3]
    19da:	4798      	blx	r3
    19dc:	3601      	adds	r6, #1
    19de:	e7f2      	b.n	19c6 <__libc_init_array+0x1e>
    19e0:	00001dcc 	.word	0x00001dcc
    19e4:	00001dcc 	.word	0x00001dcc
    19e8:	00001dcc 	.word	0x00001dcc
    19ec:	00001dd0 	.word	0x00001dd0

000019f0 <memcpy>:
    19f0:	2300      	movs	r3, #0
    19f2:	b510      	push	{r4, lr}
    19f4:	429a      	cmp	r2, r3
    19f6:	d100      	bne.n	19fa <memcpy+0xa>
    19f8:	bd10      	pop	{r4, pc}
    19fa:	5ccc      	ldrb	r4, [r1, r3]
    19fc:	54c4      	strb	r4, [r0, r3]
    19fe:	3301      	adds	r3, #1
    1a00:	e7f8      	b.n	19f4 <memcpy+0x4>
	...

00001a04 <srand>:
    1a04:	4b10      	ldr	r3, [pc, #64]	; (1a48 <srand+0x44>)
    1a06:	b570      	push	{r4, r5, r6, lr}
    1a08:	681c      	ldr	r4, [r3, #0]
    1a0a:	0005      	movs	r5, r0
    1a0c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1a0e:	2b00      	cmp	r3, #0
    1a10:	d115      	bne.n	1a3e <srand+0x3a>
    1a12:	2018      	movs	r0, #24
    1a14:	f000 f824 	bl	1a60 <malloc>
    1a18:	4b0c      	ldr	r3, [pc, #48]	; (1a4c <srand+0x48>)
    1a1a:	63a0      	str	r0, [r4, #56]	; 0x38
    1a1c:	8003      	strh	r3, [r0, #0]
    1a1e:	4b0c      	ldr	r3, [pc, #48]	; (1a50 <srand+0x4c>)
    1a20:	2201      	movs	r2, #1
    1a22:	8043      	strh	r3, [r0, #2]
    1a24:	4b0b      	ldr	r3, [pc, #44]	; (1a54 <srand+0x50>)
    1a26:	8083      	strh	r3, [r0, #4]
    1a28:	4b0b      	ldr	r3, [pc, #44]	; (1a58 <srand+0x54>)
    1a2a:	80c3      	strh	r3, [r0, #6]
    1a2c:	4b0b      	ldr	r3, [pc, #44]	; (1a5c <srand+0x58>)
    1a2e:	8103      	strh	r3, [r0, #8]
    1a30:	2305      	movs	r3, #5
    1a32:	8143      	strh	r3, [r0, #10]
    1a34:	3306      	adds	r3, #6
    1a36:	8183      	strh	r3, [r0, #12]
    1a38:	2300      	movs	r3, #0
    1a3a:	6102      	str	r2, [r0, #16]
    1a3c:	6143      	str	r3, [r0, #20]
    1a3e:	2200      	movs	r2, #0
    1a40:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1a42:	611d      	str	r5, [r3, #16]
    1a44:	615a      	str	r2, [r3, #20]
    1a46:	bd70      	pop	{r4, r5, r6, pc}
    1a48:	20000010 	.word	0x20000010
    1a4c:	0000330e 	.word	0x0000330e
    1a50:	ffffabcd 	.word	0xffffabcd
    1a54:	00001234 	.word	0x00001234
    1a58:	ffffe66d 	.word	0xffffe66d
    1a5c:	ffffdeec 	.word	0xffffdeec

00001a60 <malloc>:
    1a60:	b510      	push	{r4, lr}
    1a62:	4b03      	ldr	r3, [pc, #12]	; (1a70 <malloc+0x10>)
    1a64:	0001      	movs	r1, r0
    1a66:	6818      	ldr	r0, [r3, #0]
    1a68:	f000 f804 	bl	1a74 <_malloc_r>
    1a6c:	bd10      	pop	{r4, pc}
    1a6e:	46c0      	nop			; (mov r8, r8)
    1a70:	20000010 	.word	0x20000010

00001a74 <_malloc_r>:
    1a74:	2303      	movs	r3, #3
    1a76:	b570      	push	{r4, r5, r6, lr}
    1a78:	1ccd      	adds	r5, r1, #3
    1a7a:	439d      	bics	r5, r3
    1a7c:	3508      	adds	r5, #8
    1a7e:	0006      	movs	r6, r0
    1a80:	2d0c      	cmp	r5, #12
    1a82:	d21e      	bcs.n	1ac2 <_malloc_r+0x4e>
    1a84:	250c      	movs	r5, #12
    1a86:	42a9      	cmp	r1, r5
    1a88:	d81d      	bhi.n	1ac6 <_malloc_r+0x52>
    1a8a:	0030      	movs	r0, r6
    1a8c:	f000 f862 	bl	1b54 <__malloc_lock>
    1a90:	4a25      	ldr	r2, [pc, #148]	; (1b28 <_malloc_r+0xb4>)
    1a92:	6814      	ldr	r4, [r2, #0]
    1a94:	0021      	movs	r1, r4
    1a96:	2900      	cmp	r1, #0
    1a98:	d119      	bne.n	1ace <_malloc_r+0x5a>
    1a9a:	4c24      	ldr	r4, [pc, #144]	; (1b2c <_malloc_r+0xb8>)
    1a9c:	6823      	ldr	r3, [r4, #0]
    1a9e:	2b00      	cmp	r3, #0
    1aa0:	d103      	bne.n	1aaa <_malloc_r+0x36>
    1aa2:	0030      	movs	r0, r6
    1aa4:	f000 f844 	bl	1b30 <_sbrk_r>
    1aa8:	6020      	str	r0, [r4, #0]
    1aaa:	0029      	movs	r1, r5
    1aac:	0030      	movs	r0, r6
    1aae:	f000 f83f 	bl	1b30 <_sbrk_r>
    1ab2:	1c43      	adds	r3, r0, #1
    1ab4:	d12c      	bne.n	1b10 <_malloc_r+0x9c>
    1ab6:	230c      	movs	r3, #12
    1ab8:	0030      	movs	r0, r6
    1aba:	6033      	str	r3, [r6, #0]
    1abc:	f000 f84b 	bl	1b56 <__malloc_unlock>
    1ac0:	e003      	b.n	1aca <_malloc_r+0x56>
    1ac2:	2d00      	cmp	r5, #0
    1ac4:	dadf      	bge.n	1a86 <_malloc_r+0x12>
    1ac6:	230c      	movs	r3, #12
    1ac8:	6033      	str	r3, [r6, #0]
    1aca:	2000      	movs	r0, #0
    1acc:	bd70      	pop	{r4, r5, r6, pc}
    1ace:	680b      	ldr	r3, [r1, #0]
    1ad0:	1b5b      	subs	r3, r3, r5
    1ad2:	d41a      	bmi.n	1b0a <_malloc_r+0x96>
    1ad4:	2b0b      	cmp	r3, #11
    1ad6:	d903      	bls.n	1ae0 <_malloc_r+0x6c>
    1ad8:	600b      	str	r3, [r1, #0]
    1ada:	18cc      	adds	r4, r1, r3
    1adc:	6025      	str	r5, [r4, #0]
    1ade:	e003      	b.n	1ae8 <_malloc_r+0x74>
    1ae0:	428c      	cmp	r4, r1
    1ae2:	d10e      	bne.n	1b02 <_malloc_r+0x8e>
    1ae4:	6863      	ldr	r3, [r4, #4]
    1ae6:	6013      	str	r3, [r2, #0]
    1ae8:	0030      	movs	r0, r6
    1aea:	f000 f834 	bl	1b56 <__malloc_unlock>
    1aee:	0020      	movs	r0, r4
    1af0:	2207      	movs	r2, #7
    1af2:	300b      	adds	r0, #11
    1af4:	1d23      	adds	r3, r4, #4
    1af6:	4390      	bics	r0, r2
    1af8:	1ac3      	subs	r3, r0, r3
    1afa:	d0e7      	beq.n	1acc <_malloc_r+0x58>
    1afc:	425a      	negs	r2, r3
    1afe:	50e2      	str	r2, [r4, r3]
    1b00:	e7e4      	b.n	1acc <_malloc_r+0x58>
    1b02:	684b      	ldr	r3, [r1, #4]
    1b04:	6063      	str	r3, [r4, #4]
    1b06:	000c      	movs	r4, r1
    1b08:	e7ee      	b.n	1ae8 <_malloc_r+0x74>
    1b0a:	000c      	movs	r4, r1
    1b0c:	6849      	ldr	r1, [r1, #4]
    1b0e:	e7c2      	b.n	1a96 <_malloc_r+0x22>
    1b10:	2303      	movs	r3, #3
    1b12:	1cc4      	adds	r4, r0, #3
    1b14:	439c      	bics	r4, r3
    1b16:	42a0      	cmp	r0, r4
    1b18:	d0e0      	beq.n	1adc <_malloc_r+0x68>
    1b1a:	1a21      	subs	r1, r4, r0
    1b1c:	0030      	movs	r0, r6
    1b1e:	f000 f807 	bl	1b30 <_sbrk_r>
    1b22:	1c43      	adds	r3, r0, #1
    1b24:	d1da      	bne.n	1adc <_malloc_r+0x68>
    1b26:	e7c6      	b.n	1ab6 <_malloc_r+0x42>
    1b28:	200000d0 	.word	0x200000d0
    1b2c:	200000d4 	.word	0x200000d4

00001b30 <_sbrk_r>:
    1b30:	2300      	movs	r3, #0
    1b32:	b570      	push	{r4, r5, r6, lr}
    1b34:	4c06      	ldr	r4, [pc, #24]	; (1b50 <_sbrk_r+0x20>)
    1b36:	0005      	movs	r5, r0
    1b38:	0008      	movs	r0, r1
    1b3a:	6023      	str	r3, [r4, #0]
    1b3c:	f7ff fb54 	bl	11e8 <_sbrk>
    1b40:	1c43      	adds	r3, r0, #1
    1b42:	d103      	bne.n	1b4c <_sbrk_r+0x1c>
    1b44:	6823      	ldr	r3, [r4, #0]
    1b46:	2b00      	cmp	r3, #0
    1b48:	d000      	beq.n	1b4c <_sbrk_r+0x1c>
    1b4a:	602b      	str	r3, [r5, #0]
    1b4c:	bd70      	pop	{r4, r5, r6, pc}
    1b4e:	46c0      	nop			; (mov r8, r8)
    1b50:	2000012c 	.word	0x2000012c

00001b54 <__malloc_lock>:
    1b54:	4770      	bx	lr

00001b56 <__malloc_unlock>:
    1b56:	4770      	bx	lr
    1b58:	42000800 	.word	0x42000800
    1b5c:	42000c00 	.word	0x42000c00
    1b60:	42001000 	.word	0x42001000
    1b64:	42001400 	.word	0x42001400
    1b68:	42001800 	.word	0x42001800
    1b6c:	42001c00 	.word	0x42001c00
    1b70:	00000b72 	.word	0x00000b72
    1b74:	00000b6e 	.word	0x00000b6e
    1b78:	00000b6e 	.word	0x00000b6e
    1b7c:	00000bd4 	.word	0x00000bd4
    1b80:	00000bd4 	.word	0x00000bd4
    1b84:	00000b86 	.word	0x00000b86
    1b88:	00000b78 	.word	0x00000b78
    1b8c:	00000b8c 	.word	0x00000b8c
    1b90:	00000bc2 	.word	0x00000bc2
    1b94:	00000c5c 	.word	0x00000c5c
    1b98:	00000c3c 	.word	0x00000c3c
    1b9c:	00000c3c 	.word	0x00000c3c
    1ba0:	00000cc8 	.word	0x00000cc8
    1ba4:	00000c4e 	.word	0x00000c4e
    1ba8:	00000c6a 	.word	0x00000c6a
    1bac:	00000c40 	.word	0x00000c40
    1bb0:	00000c78 	.word	0x00000c78
    1bb4:	00000cb8 	.word	0x00000cb8
    1bb8:	000a000a 	.word	0x000a000a
    1bbc:	00140014 	.word	0x00140014
    1bc0:	00000014 	.word	0x00000014
    1bc4:	000a017c 	.word	0x000a017c
    1bc8:	000a017c 	.word	0x000a017c
    1bcc:	00140186 	.word	0x00140186
    1bd0:	00140000 	.word	0x00140000
    1bd4:	0122000a 	.word	0x0122000a
    1bd8:	00140186 	.word	0x00140186
    1bdc:	01220190 	.word	0x01220190
    1be0:	0122000a 	.word	0x0122000a
    1be4:	012c0014 	.word	0x012c0014
    1be8:	0122017c 	.word	0x0122017c
    1bec:	012c0186 	.word	0x012c0186
    1bf0:	012c0014 	.word	0x012c0014
    1bf4:	0136017c 	.word	0x0136017c
    1bf8:	001e0000 	.word	0x001e0000
    1bfc:	00280032 	.word	0x00280032
    1c00:	00320000 	.word	0x00320000
    1c04:	003c0032 	.word	0x003c0032
    1c08:	001e0050 	.word	0x001e0050
    1c0c:	00280118 	.word	0x00280118
    1c10:	00280046 	.word	0x00280046
    1c14:	00be0050 	.word	0x00be0050
    1c18:	00be0050 	.word	0x00be0050
    1c1c:	00c80118 	.word	0x00c80118
    1c20:	00280118 	.word	0x00280118
    1c24:	00be0122 	.word	0x00be0122
    1c28:	00460000 	.word	0x00460000
    1c2c:	00500032 	.word	0x00500032
    1c30:	005a0000 	.word	0x005a0000
    1c34:	00640032 	.word	0x00640032
    1c38:	006e0000 	.word	0x006e0000
    1c3c:	00780032 	.word	0x00780032
    1c40:	00820000 	.word	0x00820000
    1c44:	008c0032 	.word	0x008c0032
    1c48:	00960000 	.word	0x00960000
    1c4c:	00a00032 	.word	0x00a00032
    1c50:	00aa0000 	.word	0x00aa0000
    1c54:	00b40032 	.word	0x00b40032
    1c58:	00be0000 	.word	0x00be0000
    1c5c:	00c80032 	.word	0x00c80032
    1c60:	00c8012c 	.word	0x00c8012c
    1c64:	00d20172 	.word	0x00d20172
    1c68:	00dc001e 	.word	0x00dc001e
    1c6c:	00e60172 	.word	0x00e60172
    1c70:	00f0001e 	.word	0x00f0001e
    1c74:	00fa0172 	.word	0x00fa0172
    1c78:	0104001e 	.word	0x0104001e
    1c7c:	010e0172 	.word	0x010e0172
    1c80:	0118005a 	.word	0x0118005a
    1c84:	0122012c 	.word	0x0122012c
    1c88:	82be50b4 	.word	0x82be50b4
    1c8c:	8cbe82aa 	.word	0x8cbe82aa
    1c90:	64963c8c 	.word	0x64963c8c
    1c94:	64dc3cd2 	.word	0x64dc3cd2
    1c98:	a08c9682 	.word	0xa08c9682
    1c9c:	aadca08c 	.word	0xaadca08c
    1ca0:	a0e696dc 	.word	0xa0e696dc
    1ca4:	50f03c78 	.word	0x50f03c78
    1ca8:	5a78466e 	.word	0x5a78466e
    1cac:	aaaa3c96 	.word	0xaaaa3c96
    1cb0:	a0dc3cc8 	.word	0xa0dc3cc8
    1cb4:	aae6a0d2 	.word	0xaae6a0d2

00001cb8 <beelzebub.12726>:
    1cb8:	2e002d00 44003200 88005300 f300b600     .-...2.D.S......
    1cc8:	64012201 d4019201 08020702 5f023402     .".d.........4._
    1cd8:	94027802 bb02a602 f902db02 7f031f03     .x..............

00001ce8 <belial.12723>:
    1ce8:	f0f0f0f0 b0b0b0f0 b1b6b6b6 b7b7b1b1     ................
    1cf8:	b2b2b2b7 bfb8b8b8 b9b3b3b3 b5b5b9b9     ................
    1d08:	babac2b5 bcbcbcba bebdbdbd f0f0f0be     ................
    1d18:	b1b1f0f0 b8b7b7b6 bcb8b8b8 c9c9bcbc     ................
    1d28:	35c9c9c9 0000363a                       ...5:6..

00001d30 <lucifer.12725>:
    1d30:	0852aa55 0d0d0d01 0d343434 34340d0d     U.R.....444...44
    1d40:	00000034 01242424 340f0f0f 08083434     4...$$$....444..
    1d50:	24240308 00780024 00007800 52aa5589     ..$$$.x..x...U.R
    1d60:	00cc0008 01707005 02030303 02d00000     .....pp.........
    1d70:	00505050 00000055                       PPP.U...

00001d78 <mulciber.12724>:
    1d78:	03020100 02010004 00020100 01000201     ................
    1d88:	02010002 00020100 01000201 01000002     ................
    1d98:	02010000 00020100 01000201 03020100     ................
    1da8:	00000004 01000100 01000302 02010002     ................
    1db8:	00000403 00000000                       ........

00001dc0 <_init>:
    1dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1dc2:	46c0      	nop			; (mov r8, r8)
    1dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1dc6:	bc08      	pop	{r3}
    1dc8:	469e      	mov	lr, r3
    1dca:	4770      	bx	lr

00001dcc <__init_array_start>:
    1dcc:	000000dd 	.word	0x000000dd

00001dd0 <_fini>:
    1dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1dd2:	46c0      	nop			; (mov r8, r8)
    1dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1dd6:	bc08      	pop	{r3}
    1dd8:	469e      	mov	lr, r3
    1dda:	4770      	bx	lr

00001ddc <__fini_array_start>:
    1ddc:	000000b5 	.word	0x000000b5
